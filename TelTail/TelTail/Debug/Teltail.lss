
Teltail.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000159a0  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000014c  20000000  000179a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f1c  20000150  00017af0  0002014c  2**4
                  ALLOC
  3 .stack        00002004  2000106c  00018a0c  0002014c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  6 .debug_info   000533c1  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fff  00000000  00000000  0007358e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000063af  00000000  00000000  0007858d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010f8  00000000  00000000  0007e93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f98  00000000  00000000  0007fa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009c15  00000000  00000000  000809cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014cf4  00000000  00000000  0008a5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00091396  00000000  00000000  0009f2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000042f4  00000000  00000000  0013066c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	70 30 00 20 39 89 00 00 31 8a 00 00 31 8a 00 00     p0. 9...1...1...
	...
    202c:	31 8a 00 00 00 00 00 00 00 00 00 00 31 8a 00 00     1...........1...
    203c:	31 8a 00 00 31 8a 00 00 31 8a 00 00 31 8a 00 00     1...1...1...1...
    204c:	31 8a 00 00 31 8a 00 00 31 8a 00 00 0d 29 00 00     1...1...1....)..
    205c:	31 8a 00 00 31 8a 00 00 59 70 00 00 71 70 00 00     1...1...Yp..qp..
    206c:	89 70 00 00 a1 70 00 00 b9 70 00 00 d1 70 00 00     .p...p...p...p..
    207c:	5d 30 00 00 71 30 00 00 85 30 00 00 15 31 00 00     ]0..q0...0...1..
    208c:	29 31 00 00 3d 31 00 00 00 00 00 00 00 00 00 00     )1..=1..........
    209c:	31 8a 00 00 31 8a 00 00 31 8a 00 00 31 8a 00 00     1...1...1...1...
    20ac:	31 8a 00 00 00 00 00 00                             1.......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000150 	.word	0x20000150
    20d4:	00000000 	.word	0x00000000
    20d8:	000179a0 	.word	0x000179a0

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000154 	.word	0x20000154
    2108:	000179a0 	.word	0x000179a0
    210c:	000179a0 	.word	0x000179a0
    2110:	00000000 	.word	0x00000000

00002114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46bd      	mov	sp, r7
    2126:	b002      	add	sp, #8
    2128:	bd80      	pop	{r7, pc}
	...

0000212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    212c:	b580      	push	{r7, lr}
    212e:	b082      	sub	sp, #8
    2130:	af00      	add	r7, sp, #0
    2132:	0002      	movs	r2, r0
    2134:	6039      	str	r1, [r7, #0]
    2136:	1dfb      	adds	r3, r7, #7
    2138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    213a:	1dfb      	adds	r3, r7, #7
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b01      	cmp	r3, #1
    2140:	d00a      	beq.n	2158 <system_apb_clock_set_mask+0x2c>
    2142:	2b02      	cmp	r3, #2
    2144:	d00f      	beq.n	2166 <system_apb_clock_set_mask+0x3a>
    2146:	2b00      	cmp	r3, #0
    2148:	d114      	bne.n	2174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <system_apb_clock_set_mask+0x58>)
    214c:	4a0d      	ldr	r2, [pc, #52]	; (2184 <system_apb_clock_set_mask+0x58>)
    214e:	6991      	ldr	r1, [r2, #24]
    2150:	683a      	ldr	r2, [r7, #0]
    2152:	430a      	orrs	r2, r1
    2154:	619a      	str	r2, [r3, #24]
			break;
    2156:	e00f      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2158:	4b0a      	ldr	r3, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215a:	4a0a      	ldr	r2, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215c:	69d1      	ldr	r1, [r2, #28]
    215e:	683a      	ldr	r2, [r7, #0]
    2160:	430a      	orrs	r2, r1
    2162:	61da      	str	r2, [r3, #28]
			break;
    2164:	e008      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2166:	4b07      	ldr	r3, [pc, #28]	; (2184 <system_apb_clock_set_mask+0x58>)
    2168:	4a06      	ldr	r2, [pc, #24]	; (2184 <system_apb_clock_set_mask+0x58>)
    216a:	6a11      	ldr	r1, [r2, #32]
    216c:	683a      	ldr	r2, [r7, #0]
    216e:	430a      	orrs	r2, r1
    2170:	621a      	str	r2, [r3, #32]
			break;
    2172:	e001      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2174:	2317      	movs	r3, #23
    2176:	e000      	b.n	217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2178:	2300      	movs	r3, #0
}
    217a:	0018      	movs	r0, r3
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	40000400 	.word	0x40000400

00002188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2201      	movs	r2, #1
    21a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2200      	movs	r2, #0
    21a6:	70da      	strb	r2, [r3, #3]
}
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	0002      	movs	r2, r0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    21bc:	1dfb      	adds	r3, r7, #7
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d002      	beq.n	21ca <system_voltage_reference_enable+0x1a>
    21c4:	2b01      	cmp	r3, #1
    21c6:	d007      	beq.n	21d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    21c8:	e00d      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <system_voltage_reference_enable+0x3c>)
    21cc:	4a07      	ldr	r2, [pc, #28]	; (21ec <system_voltage_reference_enable+0x3c>)
    21ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21d0:	2102      	movs	r1, #2
    21d2:	430a      	orrs	r2, r1
    21d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21d6:	e006      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21de:	2104      	movs	r1, #4
    21e0:	430a      	orrs	r2, r1
    21e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21e4:	46c0      	nop			; (mov r8, r8)
	}
}
    21e6:	46bd      	mov	sp, r7
    21e8:	b002      	add	sp, #8
    21ea:	bd80      	pop	{r7, pc}
    21ec:	40000800 	.word	0x40000800

000021f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	7e5b      	ldrb	r3, [r3, #25]
    2202:	b2db      	uxtb	r3, r3
    2204:	b25b      	sxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	da01      	bge.n	220e <adc_is_syncing+0x1e>
		return true;
    220a:	2301      	movs	r3, #1
    220c:	e000      	b.n	2210 <adc_is_syncing+0x20>
	}

	return false;
    220e:	2300      	movs	r3, #0
}
    2210:	0018      	movs	r0, r3
    2212:	46bd      	mov	sp, r7
    2214:	b004      	add	sp, #16
    2216:	bd80      	pop	{r7, pc}

00002218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2200      	movs	r2, #0
    222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	2200      	movs	r2, #0
    223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2200      	movs	r2, #0
    2242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2200      	movs	r2, #0
    2248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2200      	movs	r2, #0
    224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2200      	movs	r2, #0
    2254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	0152      	lsls	r2, r2, #5
    225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2200      	movs	r2, #0
    2262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	2200      	movs	r2, #0
    2268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	2200      	movs	r2, #0
    226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	2200      	movs	r2, #0
    2274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2200      	movs	r2, #0
    227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	222a      	movs	r2, #42	; 0x2a
    2280:	2100      	movs	r1, #0
    2282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	2200      	movs	r2, #0
    2288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2200      	movs	r2, #0
    228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2224      	movs	r2, #36	; 0x24
    2294:	2100      	movs	r1, #0
    2296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	2200      	movs	r2, #0
    229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2200      	movs	r2, #0
    22a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	2200      	movs	r2, #0
    22a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	222b      	movs	r2, #43	; 0x2b
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	222c      	movs	r2, #44	; 0x2c
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	46bd      	mov	sp, r7
    22be:	b002      	add	sp, #8
    22c0:	bd80      	pop	{r7, pc}
	...

000022c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b098      	sub	sp, #96	; 0x60
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    22cc:	230c      	movs	r3, #12
    22ce:	18fa      	adds	r2, r7, r3
    22d0:	4b15      	ldr	r3, [pc, #84]	; (2328 <_adc_configure_ain_pin+0x64>)
    22d2:	0010      	movs	r0, r2
    22d4:	0019      	movs	r1, r3
    22d6:	2350      	movs	r3, #80	; 0x50
    22d8:	001a      	movs	r2, r3
    22da:	4b14      	ldr	r3, [pc, #80]	; (232c <_adc_configure_ain_pin+0x68>)
    22dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <_adc_configure_ain_pin+0x6c>)
    22e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2b13      	cmp	r3, #19
    22e6:	d81a      	bhi.n	231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    22e8:	230c      	movs	r3, #12
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	687a      	ldr	r2, [r7, #4]
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	58d3      	ldr	r3, [r2, r3]
    22f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    22f4:	2308      	movs	r3, #8
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	0018      	movs	r0, r3
    22fa:	4b0e      	ldr	r3, [pc, #56]	; (2334 <_adc_configure_ain_pin+0x70>)
    22fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    22fe:	2308      	movs	r3, #8
    2300:	18fb      	adds	r3, r7, r3
    2302:	2200      	movs	r2, #0
    2304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2306:	2308      	movs	r3, #8
    2308:	18fb      	adds	r3, r7, r3
    230a:	2201      	movs	r2, #1
    230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2310:	b2db      	uxtb	r3, r3
    2312:	2208      	movs	r2, #8
    2314:	18ba      	adds	r2, r7, r2
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b07      	ldr	r3, [pc, #28]	; (2338 <_adc_configure_ain_pin+0x74>)
    231c:	4798      	blx	r3
	}
}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46bd      	mov	sp, r7
    2322:	b018      	add	sp, #96	; 0x60
    2324:	bd80      	pop	{r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	00017008 	.word	0x00017008
    232c:	00016fe5 	.word	0x00016fe5
    2330:	0000ffff 	.word	0x0000ffff
    2334:	00002189 	.word	0x00002189
    2338:	00007e1d 	.word	0x00007e1d

0000233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b089      	sub	sp, #36	; 0x24
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2346:	231f      	movs	r3, #31
    2348:	18fb      	adds	r3, r7, r3
    234a:	2200      	movs	r2, #0
    234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    234e:	2310      	movs	r3, #16
    2350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2352:	2317      	movs	r3, #23
    2354:	18fb      	adds	r3, r7, r3
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2360:	230c      	movs	r3, #12
    2362:	18fb      	adds	r3, r7, r3
    2364:	0018      	movs	r0, r3
    2366:	4bce      	ldr	r3, [pc, #824]	; (26a0 <_adc_set_config+0x364>)
    2368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	781a      	ldrb	r2, [r3, #0]
    236e:	230c      	movs	r3, #12
    2370:	18fb      	adds	r3, r7, r3
    2372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2374:	230c      	movs	r3, #12
    2376:	18fb      	adds	r3, r7, r3
    2378:	0019      	movs	r1, r3
    237a:	201e      	movs	r0, #30
    237c:	4bc9      	ldr	r3, [pc, #804]	; (26a4 <_adc_set_config+0x368>)
    237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2380:	201e      	movs	r0, #30
    2382:	4bc9      	ldr	r3, [pc, #804]	; (26a8 <_adc_set_config+0x36c>)
    2384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2386:	683b      	ldr	r3, [r7, #0]
    2388:	222c      	movs	r2, #44	; 0x2c
    238a:	5c9b      	ldrb	r3, [r3, r2]
    238c:	2b00      	cmp	r3, #0
    238e:	d040      	beq.n	2412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2390:	2316      	movs	r3, #22
    2392:	18fb      	adds	r3, r7, r3
    2394:	683a      	ldr	r2, [r7, #0]
    2396:	212b      	movs	r1, #43	; 0x2b
    2398:	5c52      	ldrb	r2, [r2, r1]
    239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    23a0:	2315      	movs	r3, #21
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	2216      	movs	r2, #22
    23a6:	18ba      	adds	r2, r7, r2
    23a8:	7812      	ldrb	r2, [r2, #0]
    23aa:	188a      	adds	r2, r1, r2
    23ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	222c      	movs	r2, #44	; 0x2c
    23b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2215      	movs	r2, #21
    23ba:	18ba      	adds	r2, r7, r2
    23bc:	7812      	ldrb	r2, [r2, #0]
    23be:	188a      	adds	r2, r1, r2
    23c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    23c2:	e018      	b.n	23f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    23c4:	2316      	movs	r3, #22
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	220f      	movs	r2, #15
    23cc:	4013      	ands	r3, r2
    23ce:	683a      	ldr	r2, [r7, #0]
    23d0:	7b12      	ldrb	r2, [r2, #12]
    23d2:	189b      	adds	r3, r3, r2
    23d4:	0018      	movs	r0, r3
    23d6:	4bb5      	ldr	r3, [pc, #724]	; (26ac <_adc_set_config+0x370>)
    23d8:	4798      	blx	r3
			start_pin++;
    23da:	2315      	movs	r3, #21
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	2315      	movs	r3, #21
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	3201      	adds	r2, #1
    23e6:	701a      	strb	r2, [r3, #0]
			offset++;
    23e8:	2316      	movs	r3, #22
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781a      	ldrb	r2, [r3, #0]
    23ee:	2316      	movs	r3, #22
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	3201      	adds	r2, #1
    23f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    23f6:	2315      	movs	r3, #21
    23f8:	18fa      	adds	r2, r7, r3
    23fa:	230f      	movs	r3, #15
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	7812      	ldrb	r2, [r2, #0]
    2400:	781b      	ldrb	r3, [r3, #0]
    2402:	429a      	cmp	r2, r3
    2404:	d3de      	bcc.n	23c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2406:	683b      	ldr	r3, [r7, #0]
    2408:	89db      	ldrh	r3, [r3, #14]
    240a:	0018      	movs	r0, r3
    240c:	4ba7      	ldr	r3, [pc, #668]	; (26ac <_adc_set_config+0x370>)
    240e:	4798      	blx	r3
    2410:	e009      	b.n	2426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	7b1b      	ldrb	r3, [r3, #12]
    2416:	0018      	movs	r0, r3
    2418:	4ba4      	ldr	r3, [pc, #656]	; (26ac <_adc_set_config+0x370>)
    241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	89db      	ldrh	r3, [r3, #14]
    2420:	0018      	movs	r0, r3
    2422:	4ba2      	ldr	r3, [pc, #648]	; (26ac <_adc_set_config+0x370>)
    2424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	7d5b      	ldrb	r3, [r3, #21]
    242a:	009b      	lsls	r3, r3, #2
    242c:	b2da      	uxtb	r2, r3
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	7d9b      	ldrb	r3, [r3, #22]
    2436:	01db      	lsls	r3, r3, #7
    2438:	b25a      	sxtb	r2, r3
			(config->reference);
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	785b      	ldrb	r3, [r3, #1]
    243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2440:	4313      	orrs	r3, r2
    2442:	b25b      	sxtb	r3, r3
    2444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	791b      	ldrb	r3, [r3, #4]
    244e:	2b34      	cmp	r3, #52	; 0x34
    2450:	d846      	bhi.n	24e0 <_adc_set_config+0x1a4>
    2452:	009a      	lsls	r2, r3, #2
    2454:	4b96      	ldr	r3, [pc, #600]	; (26b0 <_adc_set_config+0x374>)
    2456:	18d3      	adds	r3, r2, r3
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    245c:	231f      	movs	r3, #31
    245e:	18fb      	adds	r3, r7, r3
    2460:	683a      	ldr	r2, [r7, #0]
    2462:	7c52      	ldrb	r2, [r2, #17]
    2464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2466:	2317      	movs	r3, #23
    2468:	18fb      	adds	r3, r7, r3
    246a:	683a      	ldr	r2, [r7, #0]
    246c:	7c12      	ldrb	r2, [r2, #16]
    246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2470:	2310      	movs	r3, #16
    2472:	61bb      	str	r3, [r7, #24]
		break;
    2474:	e036      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2476:	231f      	movs	r3, #31
    2478:	18fb      	adds	r3, r7, r3
    247a:	2201      	movs	r2, #1
    247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	2202      	movs	r2, #2
    2484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2486:	2310      	movs	r3, #16
    2488:	61bb      	str	r3, [r7, #24]
		break;
    248a:	e02b      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    248c:	231f      	movs	r3, #31
    248e:	18fb      	adds	r3, r7, r3
    2490:	2202      	movs	r2, #2
    2492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2494:	2317      	movs	r3, #23
    2496:	18fb      	adds	r3, r7, r3
    2498:	2204      	movs	r2, #4
    249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    249c:	2310      	movs	r3, #16
    249e:	61bb      	str	r3, [r7, #24]
		break;
    24a0:	e020      	b.n	24e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    24a2:	231f      	movs	r3, #31
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    24aa:	2317      	movs	r3, #23
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	2206      	movs	r2, #6
    24b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24b2:	2310      	movs	r3, #16
    24b4:	61bb      	str	r3, [r7, #24]
		break;
    24b6:	e015      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    24b8:	231f      	movs	r3, #31
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2200      	movs	r2, #0
    24be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    24c0:	2317      	movs	r3, #23
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2208      	movs	r2, #8
    24c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24c8:	2310      	movs	r3, #16
    24ca:	61bb      	str	r3, [r7, #24]
		break;
    24cc:	e00a      	b.n	24e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    24ce:	2330      	movs	r3, #48	; 0x30
    24d0:	61bb      	str	r3, [r7, #24]
		break;
    24d2:	e007      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    24d4:	2320      	movs	r3, #32
    24d6:	61bb      	str	r3, [r7, #24]
		break;
    24d8:	e004      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    24da:	2300      	movs	r3, #0
    24dc:	61bb      	str	r3, [r7, #24]
		break;
    24de:	e001      	b.n	24e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    24e0:	2317      	movs	r3, #23
    24e2:	e1ae      	b.n	2842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    24e4:	231f      	movs	r3, #31
    24e6:	18fb      	adds	r3, r7, r3
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2270      	movs	r2, #112	; 0x70
    24f0:	4013      	ands	r3, r2
    24f2:	b2da      	uxtb	r2, r3
    24f4:	2317      	movs	r3, #23
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	4313      	orrs	r3, r2
    24fc:	b2da      	uxtb	r2, r3
    24fe:	693b      	ldr	r3, [r7, #16]
    2500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	7ddb      	ldrb	r3, [r3, #23]
    2506:	2b3f      	cmp	r3, #63	; 0x3f
    2508:	d901      	bls.n	250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    250a:	2317      	movs	r3, #23
    250c:	e199      	b.n	2842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    250e:	683b      	ldr	r3, [r7, #0]
    2510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2512:	693b      	ldr	r3, [r7, #16]
    2514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	0018      	movs	r0, r3
    251c:	4b65      	ldr	r3, [pc, #404]	; (26b4 <_adc_set_config+0x378>)
    251e:	4798      	blx	r3
    2520:	1e03      	subs	r3, r0, #0
    2522:	d1f9      	bne.n	2518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	885a      	ldrh	r2, [r3, #2]
    2528:	69bb      	ldr	r3, [r7, #24]
    252a:	b29b      	uxth	r3, r3
    252c:	4313      	orrs	r3, r2
    252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	2124      	movs	r1, #36	; 0x24
    2534:	5c5b      	ldrb	r3, [r3, r1]
    2536:	b29b      	uxth	r3, r3
    2538:	00db      	lsls	r3, r3, #3
    253a:	b29b      	uxth	r3, r3
			resolution |
    253c:	4313      	orrs	r3, r2
    253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	7d1b      	ldrb	r3, [r3, #20]
    2544:	b29b      	uxth	r3, r3
    2546:	009b      	lsls	r3, r3, #2
    2548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    254a:	4313      	orrs	r3, r2
    254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	7c9b      	ldrb	r3, [r3, #18]
    2552:	b29b      	uxth	r3, r3
    2554:	18db      	adds	r3, r3, r3
    2556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2558:	4313      	orrs	r3, r2
    255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	7cdb      	ldrb	r3, [r3, #19]
    2560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2562:	4313      	orrs	r3, r2
    2564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2566:	693b      	ldr	r3, [r7, #16]
    2568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    256a:	683b      	ldr	r3, [r7, #0]
    256c:	7e1b      	ldrb	r3, [r3, #24]
    256e:	2b00      	cmp	r3, #0
    2570:	d100      	bne.n	2574 <_adc_set_config+0x238>
    2572:	e0c4      	b.n	26fe <_adc_set_config+0x3c2>
		switch (resolution) {
    2574:	69bb      	ldr	r3, [r7, #24]
    2576:	2b10      	cmp	r3, #16
    2578:	d100      	bne.n	257c <_adc_set_config+0x240>
    257a:	e076      	b.n	266a <_adc_set_config+0x32e>
    257c:	d802      	bhi.n	2584 <_adc_set_config+0x248>
    257e:	2b00      	cmp	r3, #0
    2580:	d04d      	beq.n	261e <_adc_set_config+0x2e2>
    2582:	e0bc      	b.n	26fe <_adc_set_config+0x3c2>
    2584:	2b20      	cmp	r3, #32
    2586:	d023      	beq.n	25d0 <_adc_set_config+0x294>
    2588:	2b30      	cmp	r3, #48	; 0x30
    258a:	d000      	beq.n	258e <_adc_set_config+0x252>
    258c:	e0b7      	b.n	26fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	7cdb      	ldrb	r3, [r3, #19]
    2592:	2b00      	cmp	r3, #0
    2594:	d011      	beq.n	25ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2596:	683b      	ldr	r3, [r7, #0]
    2598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    259a:	2b7f      	cmp	r3, #127	; 0x7f
    259c:	dc0b      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    25a2:	3380      	adds	r3, #128	; 0x80
    25a4:	db07      	blt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    25a6:	683b      	ldr	r3, [r7, #0]
    25a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    25aa:	2b7f      	cmp	r3, #127	; 0x7f
    25ac:	dc03      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    25ae:	683b      	ldr	r3, [r7, #0]
    25b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    25b2:	3380      	adds	r3, #128	; 0x80
    25b4:	da01      	bge.n	25ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25b6:	2317      	movs	r3, #23
    25b8:	e143      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	69db      	ldr	r3, [r3, #28]
    25be:	2bff      	cmp	r3, #255	; 0xff
    25c0:	dc04      	bgt.n	25cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    25c6:	2bff      	cmp	r3, #255	; 0xff
    25c8:	dc00      	bgt.n	25cc <_adc_set_config+0x290>
    25ca:	e091      	b.n	26f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25cc:	2317      	movs	r3, #23
    25ce:	e138      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    25d0:	683b      	ldr	r3, [r7, #0]
    25d2:	7cdb      	ldrb	r3, [r3, #19]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d015      	beq.n	2604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    25dc:	4a36      	ldr	r2, [pc, #216]	; (26b8 <_adc_set_config+0x37c>)
    25de:	4293      	cmp	r3, r2
    25e0:	dc0e      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    25e2:	683b      	ldr	r3, [r7, #0]
    25e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    25e6:	4a35      	ldr	r2, [pc, #212]	; (26bc <_adc_set_config+0x380>)
    25e8:	4293      	cmp	r3, r2
    25ea:	db09      	blt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    25ec:	683b      	ldr	r3, [r7, #0]
    25ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    25f0:	4a31      	ldr	r2, [pc, #196]	; (26b8 <_adc_set_config+0x37c>)
    25f2:	4293      	cmp	r3, r2
    25f4:	dc04      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    25fa:	4a30      	ldr	r2, [pc, #192]	; (26bc <_adc_set_config+0x380>)
    25fc:	4293      	cmp	r3, r2
    25fe:	da01      	bge.n	2604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2600:	2317      	movs	r3, #23
    2602:	e11e      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2604:	683b      	ldr	r3, [r7, #0]
    2606:	69db      	ldr	r3, [r3, #28]
    2608:	4a2d      	ldr	r2, [pc, #180]	; (26c0 <_adc_set_config+0x384>)
    260a:	4293      	cmp	r3, r2
    260c:	dc05      	bgt.n	261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2612:	4a2b      	ldr	r2, [pc, #172]	; (26c0 <_adc_set_config+0x384>)
    2614:	4293      	cmp	r3, r2
    2616:	dc00      	bgt.n	261a <_adc_set_config+0x2de>
    2618:	e06c      	b.n	26f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    261a:	2317      	movs	r3, #23
    261c:	e111      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    261e:	683b      	ldr	r3, [r7, #0]
    2620:	7cdb      	ldrb	r3, [r3, #19]
    2622:	2b00      	cmp	r3, #0
    2624:	d015      	beq.n	2652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2626:	683b      	ldr	r3, [r7, #0]
    2628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    262a:	4a26      	ldr	r2, [pc, #152]	; (26c4 <_adc_set_config+0x388>)
    262c:	4293      	cmp	r3, r2
    262e:	dc0e      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2634:	4a24      	ldr	r2, [pc, #144]	; (26c8 <_adc_set_config+0x38c>)
    2636:	4293      	cmp	r3, r2
    2638:	db09      	blt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    263e:	4a21      	ldr	r2, [pc, #132]	; (26c4 <_adc_set_config+0x388>)
    2640:	4293      	cmp	r3, r2
    2642:	dc04      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2648:	4a1f      	ldr	r2, [pc, #124]	; (26c8 <_adc_set_config+0x38c>)
    264a:	4293      	cmp	r3, r2
    264c:	da01      	bge.n	2652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    264e:	2317      	movs	r3, #23
    2650:	e0f7      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	69db      	ldr	r3, [r3, #28]
    2656:	4a1d      	ldr	r2, [pc, #116]	; (26cc <_adc_set_config+0x390>)
    2658:	4293      	cmp	r3, r2
    265a:	dc04      	bgt.n	2666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2660:	4a1a      	ldr	r2, [pc, #104]	; (26cc <_adc_set_config+0x390>)
    2662:	4293      	cmp	r3, r2
    2664:	dd48      	ble.n	26f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2666:	2317      	movs	r3, #23
    2668:	e0eb      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    266a:	683b      	ldr	r3, [r7, #0]
    266c:	7cdb      	ldrb	r3, [r3, #19]
    266e:	2b00      	cmp	r3, #0
    2670:	d032      	beq.n	26d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2672:	683b      	ldr	r3, [r7, #0]
    2674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2676:	4a16      	ldr	r2, [pc, #88]	; (26d0 <_adc_set_config+0x394>)
    2678:	4293      	cmp	r3, r2
    267a:	dc0e      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2680:	4a14      	ldr	r2, [pc, #80]	; (26d4 <_adc_set_config+0x398>)
    2682:	4293      	cmp	r3, r2
    2684:	db09      	blt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    268a:	4a11      	ldr	r2, [pc, #68]	; (26d0 <_adc_set_config+0x394>)
    268c:	4293      	cmp	r3, r2
    268e:	dc04      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2694:	4a0f      	ldr	r2, [pc, #60]	; (26d4 <_adc_set_config+0x398>)
    2696:	4293      	cmp	r3, r2
    2698:	da1e      	bge.n	26d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    269a:	2317      	movs	r3, #23
    269c:	e0d1      	b.n	2842 <_adc_set_config+0x506>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00002115 	.word	0x00002115
    26a4:	00007b31 	.word	0x00007b31
    26a8:	00007b75 	.word	0x00007b75
    26ac:	000022c5 	.word	0x000022c5
    26b0:	00017058 	.word	0x00017058
    26b4:	000021f1 	.word	0x000021f1
    26b8:	000001ff 	.word	0x000001ff
    26bc:	fffffe00 	.word	0xfffffe00
    26c0:	000003ff 	.word	0x000003ff
    26c4:	000007ff 	.word	0x000007ff
    26c8:	fffff800 	.word	0xfffff800
    26cc:	00000fff 	.word	0x00000fff
    26d0:	00007fff 	.word	0x00007fff
    26d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	69db      	ldr	r3, [r3, #28]
    26dc:	4a5b      	ldr	r2, [pc, #364]	; (284c <_adc_set_config+0x510>)
    26de:	4293      	cmp	r3, r2
    26e0:	dc04      	bgt.n	26ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    26e2:	683b      	ldr	r3, [r7, #0]
    26e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    26e6:	4a59      	ldr	r2, [pc, #356]	; (284c <_adc_set_config+0x510>)
    26e8:	4293      	cmp	r3, r2
    26ea:	dd07      	ble.n	26fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    26ec:	2317      	movs	r3, #23
    26ee:	e0a8      	b.n	2842 <_adc_set_config+0x506>
			break;
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	e004      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	e002      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	e000      	b.n	26fe <_adc_set_config+0x3c2>
			}
			break;
    26fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	0018      	movs	r0, r3
    2704:	4b52      	ldr	r3, [pc, #328]	; (2850 <_adc_set_config+0x514>)
    2706:	4798      	blx	r3
    2708:	1e03      	subs	r3, r0, #0
    270a:	d1f9      	bne.n	2700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    270c:	683b      	ldr	r3, [r7, #0]
    270e:	7e1a      	ldrb	r2, [r3, #24]
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2714:	46c0      	nop			; (mov r8, r8)
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	0018      	movs	r0, r3
    271a:	4b4d      	ldr	r3, [pc, #308]	; (2850 <_adc_set_config+0x514>)
    271c:	4798      	blx	r3
    271e:	1e03      	subs	r3, r0, #0
    2720:	d1f9      	bne.n	2716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2722:	683b      	ldr	r3, [r7, #0]
    2724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2726:	b29a      	uxth	r2, r3
    2728:	693b      	ldr	r3, [r7, #16]
    272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	0018      	movs	r0, r3
    2732:	4b47      	ldr	r3, [pc, #284]	; (2850 <_adc_set_config+0x514>)
    2734:	4798      	blx	r3
    2736:	1e03      	subs	r3, r0, #0
    2738:	d1f9      	bne.n	272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	6a1b      	ldr	r3, [r3, #32]
    273e:	b29a      	uxth	r2, r3
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2744:	2314      	movs	r3, #20
    2746:	18fb      	adds	r3, r7, r3
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	212c      	movs	r1, #44	; 0x2c
    274c:	5c52      	ldrb	r2, [r2, r1]
    274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2750:	2314      	movs	r3, #20
    2752:	18fb      	adds	r3, r7, r3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d006      	beq.n	2768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    275a:	2314      	movs	r3, #20
    275c:	18fb      	adds	r3, r7, r3
    275e:	781a      	ldrb	r2, [r3, #0]
    2760:	2314      	movs	r3, #20
    2762:	18fb      	adds	r3, r7, r3
    2764:	3a01      	subs	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2768:	2314      	movs	r3, #20
    276a:	18fb      	adds	r3, r7, r3
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	2b0f      	cmp	r3, #15
    2770:	d804      	bhi.n	277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	222b      	movs	r2, #43	; 0x2b
    2776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2778:	2b0f      	cmp	r3, #15
    277a:	d901      	bls.n	2780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    277c:	2317      	movs	r3, #23
    277e:	e060      	b.n	2842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	0018      	movs	r0, r3
    2786:	4b32      	ldr	r3, [pc, #200]	; (2850 <_adc_set_config+0x514>)
    2788:	4798      	blx	r3
    278a:	1e03      	subs	r3, r0, #0
    278c:	d1f9      	bne.n	2782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    278e:	683b      	ldr	r3, [r7, #0]
    2790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2792:	683a      	ldr	r2, [r7, #0]
    2794:	212b      	movs	r1, #43	; 0x2b
    2796:	5c52      	ldrb	r2, [r2, r1]
    2798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    279c:	2214      	movs	r2, #20
    279e:	18ba      	adds	r2, r7, r2
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    27a4:	4313      	orrs	r3, r2
			config->negative_input |
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    27aa:	4313      	orrs	r3, r2
			config->positive_input;
    27ac:	683a      	ldr	r2, [r7, #0]
    27ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    27b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    27b2:	693b      	ldr	r3, [r7, #16]
    27b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	222a      	movs	r2, #42	; 0x2a
    27ba:	5c9a      	ldrb	r2, [r3, r2]
    27bc:	693b      	ldr	r3, [r7, #16]
    27be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	220f      	movs	r2, #15
    27c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    27c6:	683b      	ldr	r3, [r7, #0]
    27c8:	2224      	movs	r2, #36	; 0x24
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d01e      	beq.n	280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    27d0:	683b      	ldr	r3, [r7, #0]
    27d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    27d4:	4a1f      	ldr	r2, [pc, #124]	; (2854 <_adc_set_config+0x518>)
    27d6:	4293      	cmp	r3, r2
    27d8:	d901      	bls.n	27de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    27da:	2317      	movs	r3, #23
    27dc:	e031      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    27de:	683b      	ldr	r3, [r7, #0]
    27e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	2228      	movs	r2, #40	; 0x28
    27ea:	5e9b      	ldrsh	r3, [r3, r2]
    27ec:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_adc_set_config+0x51c>)
    27ee:	4293      	cmp	r3, r2
    27f0:	dc05      	bgt.n	27fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    27f2:	683b      	ldr	r3, [r7, #0]
    27f4:	2228      	movs	r2, #40	; 0x28
    27f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    27f8:	4a18      	ldr	r2, [pc, #96]	; (285c <_adc_set_config+0x520>)
    27fa:	4293      	cmp	r3, r2
    27fc:	da01      	bge.n	2802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    27fe:	2317      	movs	r3, #23
    2800:	e01f      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2802:	683b      	ldr	r3, [r7, #0]
    2804:	2228      	movs	r2, #40	; 0x28
    2806:	5e9b      	ldrsh	r3, [r3, r2]
    2808:	b29a      	uxth	r2, r3
    280a:	693b      	ldr	r3, [r7, #16]
    280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    280e:	4b14      	ldr	r3, [pc, #80]	; (2860 <_adc_set_config+0x524>)
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	08db      	lsrs	r3, r3, #3
    2814:	b29b      	uxth	r3, r3
    2816:	021b      	lsls	r3, r3, #8
    2818:	b29a      	uxth	r2, r3
    281a:	23e0      	movs	r3, #224	; 0xe0
    281c:	00db      	lsls	r3, r3, #3
    281e:	4013      	ands	r3, r2
    2820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2822:	4b10      	ldr	r3, [pc, #64]	; (2864 <_adc_set_config+0x528>)
    2824:	685c      	ldr	r4, [r3, #4]
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	0161      	lsls	r1, r4, #5
    282a:	0edd      	lsrs	r5, r3, #27
    282c:	430d      	orrs	r5, r1
    282e:	0ee6      	lsrs	r6, r4, #27
    2830:	b2ab      	uxth	r3, r5
    2832:	21ff      	movs	r1, #255	; 0xff
    2834:	400b      	ands	r3, r1
    2836:	b29b      	uxth	r3, r3
			) |
    2838:	4313      	orrs	r3, r2
    283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2840:	2300      	movs	r3, #0
}
    2842:	0018      	movs	r0, r3
    2844:	46bd      	mov	sp, r7
    2846:	b009      	add	sp, #36	; 0x24
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000ffff 	.word	0x0000ffff
    2850:	000021f1 	.word	0x000021f1
    2854:	00000fff 	.word	0x00000fff
    2858:	000007ff 	.word	0x000007ff
    285c:	fffff800 	.word	0xfffff800
    2860:	00806024 	.word	0x00806024
    2864:	00806020 	.word	0x00806020

00002868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2868:	b580      	push	{r7, lr}
    286a:	b084      	sub	sp, #16
    286c:	af00      	add	r7, sp, #0
    286e:	60f8      	str	r0, [r7, #12]
    2870:	60b9      	str	r1, [r7, #8]
    2872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	68ba      	ldr	r2, [r7, #8]
    2878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	025b      	lsls	r3, r3, #9
    287e:	0019      	movs	r1, r3
    2880:	2002      	movs	r0, #2
    2882:	4b15      	ldr	r3, [pc, #84]	; (28d8 <adc_init+0x70>)
    2884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	b2db      	uxtb	r3, r3
    288c:	001a      	movs	r2, r3
    288e:	2301      	movs	r3, #1
    2890:	4013      	ands	r3, r2
    2892:	d001      	beq.n	2898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2894:	2305      	movs	r3, #5
    2896:	e01a      	b.n	28ce <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2898:	68bb      	ldr	r3, [r7, #8]
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	b2db      	uxtb	r3, r3
    289e:	001a      	movs	r2, r3
    28a0:	2302      	movs	r3, #2
    28a2:	4013      	ands	r3, r2
    28a4:	d001      	beq.n	28aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    28a6:	231c      	movs	r3, #28
    28a8:	e011      	b.n	28ce <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	785a      	ldrb	r2, [r3, #1]
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	791b      	ldrb	r3, [r3, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d102      	bne.n	28c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    28ba:	2001      	movs	r0, #1
    28bc:	4b07      	ldr	r3, [pc, #28]	; (28dc <adc_init+0x74>)
    28be:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    28c0:	687a      	ldr	r2, [r7, #4]
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	0011      	movs	r1, r2
    28c6:	0018      	movs	r0, r3
    28c8:	4b05      	ldr	r3, [pc, #20]	; (28e0 <adc_init+0x78>)
    28ca:	4798      	blx	r3
    28cc:	0003      	movs	r3, r0
}
    28ce:	0018      	movs	r0, r3
    28d0:	46bd      	mov	sp, r7
    28d2:	b004      	add	sp, #16
    28d4:	bd80      	pop	{r7, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	0000212d 	.word	0x0000212d
    28dc:	000021b1 	.word	0x000021b1
    28e0:	0000233d 	.word	0x0000233d

000028e4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    28e8:	4b02      	ldr	r3, [pc, #8]	; (28f4 <system_interrupt_enter_critical_section+0x10>)
    28ea:	4798      	blx	r3
}
    28ec:	46c0      	nop			; (mov r8, r8)
    28ee:	46bd      	mov	sp, r7
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	0000717d 	.word	0x0000717d

000028f8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    28fc:	4b02      	ldr	r3, [pc, #8]	; (2908 <system_interrupt_leave_critical_section+0x10>)
    28fe:	4798      	blx	r3
}
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46bd      	mov	sp, r7
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	000071d1 	.word	0x000071d1

0000290c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    290c:	b580      	push	{r7, lr}
    290e:	b086      	sub	sp, #24
    2910:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    2912:	4b49      	ldr	r3, [pc, #292]	; (2a38 <DMAC_Handler+0x12c>)
    2914:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2916:	4b49      	ldr	r3, [pc, #292]	; (2a3c <DMAC_Handler+0x130>)
    2918:	8c1b      	ldrh	r3, [r3, #32]
    291a:	b29b      	uxth	r3, r3
    291c:	b2da      	uxtb	r2, r3
    291e:	2317      	movs	r3, #23
    2920:	18fb      	adds	r3, r7, r3
    2922:	210f      	movs	r1, #15
    2924:	400a      	ands	r2, r1
    2926:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    2928:	2317      	movs	r3, #23
    292a:	18fb      	adds	r3, r7, r3
    292c:	781a      	ldrb	r2, [r3, #0]
    292e:	4b44      	ldr	r3, [pc, #272]	; (2a40 <DMAC_Handler+0x134>)
    2930:	0092      	lsls	r2, r2, #2
    2932:	58d3      	ldr	r3, [r2, r3]
    2934:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2936:	4a41      	ldr	r2, [pc, #260]	; (2a3c <DMAC_Handler+0x130>)
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	210f      	movs	r1, #15
    293e:	400b      	ands	r3, r1
    2940:	b2d9      	uxtb	r1, r3
    2942:	233f      	movs	r3, #63	; 0x3f
    2944:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    2946:	493d      	ldr	r1, [pc, #244]	; (2a3c <DMAC_Handler+0x130>)
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	224e      	movs	r2, #78	; 0x4e
    294e:	5c8a      	ldrb	r2, [r1, r2]
    2950:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2952:	693b      	ldr	r3, [r7, #16]
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	4a3b      	ldr	r2, [pc, #236]	; (2a44 <DMAC_Handler+0x138>)
    2958:	011b      	lsls	r3, r3, #4
    295a:	18d3      	adds	r3, r2, r3
    295c:	3302      	adds	r3, #2
    295e:	881b      	ldrh	r3, [r3, #0]
    2960:	b29b      	uxth	r3, r3
    2962:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	4a37      	ldr	r2, [pc, #220]	; (2a48 <DMAC_Handler+0x13c>)
    296a:	011b      	lsls	r3, r3, #4
    296c:	18d3      	adds	r3, r2, r3
    296e:	3302      	adds	r3, #2
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    2976:	68ba      	ldr	r2, [r7, #8]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	1ad2      	subs	r2, r2, r3
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    2980:	230f      	movs	r3, #15
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2201      	movs	r2, #1
    2988:	4013      	ands	r3, r2
    298a:	d016      	beq.n	29ba <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    298c:	4a2b      	ldr	r2, [pc, #172]	; (2a3c <DMAC_Handler+0x130>)
    298e:	234e      	movs	r3, #78	; 0x4e
    2990:	2101      	movs	r1, #1
    2992:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    2994:	693b      	ldr	r3, [r7, #16]
    2996:	2210      	movs	r2, #16
    2998:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    299a:	693b      	ldr	r3, [r7, #16]
    299c:	7c1b      	ldrb	r3, [r3, #16]
    299e:	001a      	movs	r2, r3
    29a0:	2301      	movs	r3, #1
    29a2:	4013      	ands	r3, r2
    29a4:	d042      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    29a6:	693b      	ldr	r3, [r7, #16]
    29a8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    29aa:	2b00      	cmp	r3, #0
    29ac:	d03e      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	693a      	ldr	r2, [r7, #16]
    29b4:	0010      	movs	r0, r2
    29b6:	4798      	blx	r3
    29b8:	e038      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    29ba:	230f      	movs	r3, #15
    29bc:	18fb      	adds	r3, r7, r3
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2202      	movs	r2, #2
    29c2:	4013      	ands	r3, r2
    29c4:	d016      	beq.n	29f4 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    29c6:	4a1d      	ldr	r2, [pc, #116]	; (2a3c <DMAC_Handler+0x130>)
    29c8:	234e      	movs	r3, #78	; 0x4e
    29ca:	2102      	movs	r1, #2
    29cc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    29ce:	693b      	ldr	r3, [r7, #16]
    29d0:	2200      	movs	r2, #0
    29d2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29d4:	693b      	ldr	r3, [r7, #16]
    29d6:	7c1b      	ldrb	r3, [r3, #16]
    29d8:	001a      	movs	r2, r3
    29da:	2302      	movs	r3, #2
    29dc:	4013      	ands	r3, r2
    29de:	d025      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    29e0:	693b      	ldr	r3, [r7, #16]
    29e2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29e4:	2b00      	cmp	r3, #0
    29e6:	d021      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	689b      	ldr	r3, [r3, #8]
    29ec:	693a      	ldr	r2, [r7, #16]
    29ee:	0010      	movs	r0, r2
    29f0:	4798      	blx	r3
    29f2:	e01b      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    29f4:	230f      	movs	r3, #15
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	2204      	movs	r2, #4
    29fc:	4013      	ands	r3, r2
    29fe:	d015      	beq.n	2a2c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    2a00:	4a0e      	ldr	r2, [pc, #56]	; (2a3c <DMAC_Handler+0x130>)
    2a02:	234e      	movs	r3, #78	; 0x4e
    2a04:	2104      	movs	r1, #4
    2a06:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    2a08:	693b      	ldr	r3, [r7, #16]
    2a0a:	2206      	movs	r2, #6
    2a0c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a0e:	693b      	ldr	r3, [r7, #16]
    2a10:	7c1b      	ldrb	r3, [r3, #16]
    2a12:	001a      	movs	r2, r3
    2a14:	2304      	movs	r3, #4
    2a16:	4013      	ands	r3, r2
    2a18:	d008      	beq.n	2a2c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d004      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	68db      	ldr	r3, [r3, #12]
    2a26:	693a      	ldr	r2, [r7, #16]
    2a28:	0010      	movs	r0, r2
    2a2a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    2a2c:	4b07      	ldr	r3, [pc, #28]	; (2a4c <DMAC_Handler+0x140>)
    2a2e:	4798      	blx	r3
}
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46bd      	mov	sp, r7
    2a34:	b006      	add	sp, #24
    2a36:	bd80      	pop	{r7, pc}
    2a38:	000028e5 	.word	0x000028e5
    2a3c:	41004800 	.word	0x41004800
    2a40:	200001c0 	.word	0x200001c0
    2a44:	20000400 	.word	0x20000400
    2a48:	20000170 	.word	0x20000170
    2a4c:	000028f9 	.word	0x000028f9

00002a50 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b082      	sub	sp, #8
    2a54:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <nvm_is_ready+0x24>)
    2a58:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	7d1b      	ldrb	r3, [r3, #20]
    2a5e:	b2db      	uxtb	r3, r3
    2a60:	001a      	movs	r2, r3
    2a62:	2301      	movs	r3, #1
    2a64:	4013      	ands	r3, r2
    2a66:	1e5a      	subs	r2, r3, #1
    2a68:	4193      	sbcs	r3, r2
    2a6a:	b2db      	uxtb	r3, r3
}
    2a6c:	0018      	movs	r0, r3
    2a6e:	46bd      	mov	sp, r7
    2a70:	b002      	add	sp, #8
    2a72:	bd80      	pop	{r7, pc}
    2a74:	41004000 	.word	0x41004000

00002a78 <system_apb_clock_set_mask>:
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	0002      	movs	r2, r0
    2a80:	6039      	str	r1, [r7, #0]
    2a82:	1dfb      	adds	r3, r7, #7
    2a84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2a86:	1dfb      	adds	r3, r7, #7
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b01      	cmp	r3, #1
    2a8c:	d00a      	beq.n	2aa4 <system_apb_clock_set_mask+0x2c>
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d00f      	beq.n	2ab2 <system_apb_clock_set_mask+0x3a>
    2a92:	2b00      	cmp	r3, #0
    2a94:	d114      	bne.n	2ac0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2a96:	4b0e      	ldr	r3, [pc, #56]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a98:	4a0d      	ldr	r2, [pc, #52]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a9a:	6991      	ldr	r1, [r2, #24]
    2a9c:	683a      	ldr	r2, [r7, #0]
    2a9e:	430a      	orrs	r2, r1
    2aa0:	619a      	str	r2, [r3, #24]
			break;
    2aa2:	e00f      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2aa4:	4b0a      	ldr	r3, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa6:	4a0a      	ldr	r2, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa8:	69d1      	ldr	r1, [r2, #28]
    2aaa:	683a      	ldr	r2, [r7, #0]
    2aac:	430a      	orrs	r2, r1
    2aae:	61da      	str	r2, [r3, #28]
			break;
    2ab0:	e008      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2ab2:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab4:	4a06      	ldr	r2, [pc, #24]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab6:	6a11      	ldr	r1, [r2, #32]
    2ab8:	683a      	ldr	r2, [r7, #0]
    2aba:	430a      	orrs	r2, r1
    2abc:	621a      	str	r2, [r3, #32]
			break;
    2abe:	e001      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2ac0:	2317      	movs	r3, #23
    2ac2:	e000      	b.n	2ac6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ac4:	2300      	movs	r3, #0
}
    2ac6:	0018      	movs	r0, r3
    2ac8:	46bd      	mov	sp, r7
    2aca:	b002      	add	sp, #8
    2acc:	bd80      	pop	{r7, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	40000400 	.word	0x40000400

00002ad4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b084      	sub	sp, #16
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2adc:	4b2f      	ldr	r3, [pc, #188]	; (2b9c <nvm_set_config+0xc8>)
    2ade:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    2ae0:	2104      	movs	r1, #4
    2ae2:	2001      	movs	r0, #1
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <nvm_set_config+0xcc>)
    2ae6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2220      	movs	r2, #32
    2aec:	32ff      	adds	r2, #255	; 0xff
    2aee:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2af0:	4b2c      	ldr	r3, [pc, #176]	; (2ba4 <nvm_set_config+0xd0>)
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	001a      	movs	r2, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4053      	eors	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d001      	beq.n	2b06 <nvm_set_config+0x32>
		return STATUS_BUSY;
    2b02:	2305      	movs	r3, #5
    2b04:	e045      	b.n	2b92 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	021b      	lsls	r3, r3, #8
    2b0c:	001a      	movs	r2, r3
    2b0e:	23c0      	movs	r3, #192	; 0xc0
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	785b      	ldrb	r3, [r3, #1]
    2b18:	01db      	lsls	r3, r3, #7
    2b1a:	0019      	movs	r1, r3
    2b1c:	23ff      	movs	r3, #255	; 0xff
    2b1e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b20:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	789b      	ldrb	r3, [r3, #2]
    2b26:	005b      	lsls	r3, r3, #1
    2b28:	0019      	movs	r1, r3
    2b2a:	231e      	movs	r3, #30
    2b2c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b2e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	78db      	ldrb	r3, [r3, #3]
    2b34:	049b      	lsls	r3, r3, #18
    2b36:	0019      	movs	r1, r3
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	02db      	lsls	r3, r3, #11
    2b3c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b3e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	791b      	ldrb	r3, [r3, #4]
    2b44:	041b      	lsls	r3, r3, #16
    2b46:	0019      	movs	r1, r3
    2b48:	23c0      	movs	r3, #192	; 0xc0
    2b4a:	029b      	lsls	r3, r3, #10
    2b4c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b4e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	689b      	ldr	r3, [r3, #8]
    2b58:	035b      	lsls	r3, r3, #13
    2b5a:	0f5b      	lsrs	r3, r3, #29
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	001a      	movs	r2, r3
    2b60:	2308      	movs	r3, #8
    2b62:	4093      	lsls	r3, r2
    2b64:	b29a      	uxth	r2, r3
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <nvm_set_config+0xd4>)
    2b68:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	689b      	ldr	r3, [r3, #8]
    2b6e:	b29a      	uxth	r2, r3
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <nvm_set_config+0xd4>)
    2b72:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	785a      	ldrb	r2, [r3, #1]
    2b78:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <nvm_set_config+0xd4>)
    2b7a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	8b1b      	ldrh	r3, [r3, #24]
    2b80:	b29b      	uxth	r3, r3
    2b82:	001a      	movs	r2, r3
    2b84:	2380      	movs	r3, #128	; 0x80
    2b86:	005b      	lsls	r3, r3, #1
    2b88:	4013      	ands	r3, r2
    2b8a:	d001      	beq.n	2b90 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    2b8c:	2310      	movs	r3, #16
    2b8e:	e000      	b.n	2b92 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    2b90:	2300      	movs	r3, #0
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	41004000 	.word	0x41004000
    2ba0:	00002a79 	.word	0x00002a79
    2ba4:	00002a51 	.word	0x00002a51
    2ba8:	200001d4 	.word	0x200001d4

00002bac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b086      	sub	sp, #24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60b9      	str	r1, [r7, #8]
    2bb4:	607a      	str	r2, [r7, #4]
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	1c02      	adds	r2, r0, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2bbe:	4b3a      	ldr	r3, [pc, #232]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc0:	881b      	ldrh	r3, [r3, #0]
    2bc2:	001a      	movs	r2, r3
    2bc4:	4b38      	ldr	r3, [pc, #224]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc6:	885b      	ldrh	r3, [r3, #2]
    2bc8:	435a      	muls	r2, r3
    2bca:	68bb      	ldr	r3, [r7, #8]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d209      	bcs.n	2be4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2bd0:	68bb      	ldr	r3, [r7, #8]
    2bd2:	4a36      	ldr	r2, [pc, #216]	; (2cac <nvm_execute_command+0x100>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d903      	bls.n	2be0 <nvm_execute_command+0x34>
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	4a35      	ldr	r2, [pc, #212]	; (2cb0 <nvm_execute_command+0x104>)
    2bdc:	4293      	cmp	r3, r2
    2bde:	d901      	bls.n	2be4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2be0:	2318      	movs	r3, #24
    2be2:	e05c      	b.n	2c9e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2be4:	4b33      	ldr	r3, [pc, #204]	; (2cb4 <nvm_execute_command+0x108>)
    2be6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	685b      	ldr	r3, [r3, #4]
    2bec:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	2280      	movs	r2, #128	; 0x80
    2bf2:	02d2      	lsls	r2, r2, #11
    2bf4:	431a      	orrs	r2, r3
    2bf6:	697b      	ldr	r3, [r7, #20]
    2bf8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	2220      	movs	r2, #32
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2c02:	4b2d      	ldr	r3, [pc, #180]	; (2cb8 <nvm_execute_command+0x10c>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	001a      	movs	r2, r3
    2c0a:	2301      	movs	r3, #1
    2c0c:	4053      	eors	r3, r2
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d004      	beq.n	2c1e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2c14:	697b      	ldr	r3, [r7, #20]
    2c16:	693a      	ldr	r2, [r7, #16]
    2c18:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    2c1a:	2305      	movs	r3, #5
    2c1c:	e03f      	b.n	2c9e <nvm_execute_command+0xf2>
	}

	switch (command) {
    2c1e:	230f      	movs	r3, #15
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b45      	cmp	r3, #69	; 0x45
    2c26:	d81d      	bhi.n	2c64 <nvm_execute_command+0xb8>
    2c28:	009a      	lsls	r2, r3, #2
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <nvm_execute_command+0x110>)
    2c2c:	18d3      	adds	r3, r2, r3
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2c32:	697b      	ldr	r3, [r7, #20]
    2c34:	8b1b      	ldrh	r3, [r3, #24]
    2c36:	b29b      	uxth	r3, r3
    2c38:	001a      	movs	r2, r3
    2c3a:	2380      	movs	r3, #128	; 0x80
    2c3c:	005b      	lsls	r3, r3, #1
    2c3e:	4013      	ands	r3, r2
    2c40:	d004      	beq.n	2c4c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	693a      	ldr	r2, [r7, #16]
    2c46:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    2c48:	2310      	movs	r3, #16
    2c4a:	e028      	b.n	2c9e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c4c:	68bb      	ldr	r3, [r7, #8]
    2c4e:	089b      	lsrs	r3, r3, #2
    2c50:	005a      	lsls	r2, r3, #1
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	61da      	str	r2, [r3, #28]
			break;
    2c56:	e00b      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c58:	68bb      	ldr	r3, [r7, #8]
    2c5a:	089b      	lsrs	r3, r3, #2
    2c5c:	005a      	lsls	r2, r3, #1
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	61da      	str	r2, [r3, #28]
			break;
    2c62:	e005      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	693a      	ldr	r2, [r7, #16]
    2c68:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    2c6a:	2317      	movs	r3, #23
    2c6c:	e017      	b.n	2c9e <nvm_execute_command+0xf2>
			break;
    2c6e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    2c70:	230f      	movs	r3, #15
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	b29b      	uxth	r3, r3
    2c78:	4a11      	ldr	r2, [pc, #68]	; (2cc0 <nvm_execute_command+0x114>)
    2c7a:	4313      	orrs	r3, r2
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	697b      	ldr	r3, [r7, #20]
    2c80:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <nvm_execute_command+0x10c>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	001a      	movs	r2, r3
    2c8c:	2301      	movs	r3, #1
    2c8e:	4053      	eors	r3, r2
    2c90:	b2db      	uxtb	r3, r3
    2c92:	2b00      	cmp	r3, #0
    2c94:	d1f6      	bne.n	2c84 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    2c96:	697b      	ldr	r3, [r7, #20]
    2c98:	693a      	ldr	r2, [r7, #16]
    2c9a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b006      	add	sp, #24
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	200001d4 	.word	0x200001d4
    2cac:	00803fff 	.word	0x00803fff
    2cb0:	00806000 	.word	0x00806000
    2cb4:	41004000 	.word	0x41004000
    2cb8:	00002a51 	.word	0x00002a51
    2cbc:	0001712c 	.word	0x0001712c
    2cc0:	ffffa500 	.word	0xffffa500

00002cc4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b088      	sub	sp, #32
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	60b9      	str	r1, [r7, #8]
    2cce:	1dbb      	adds	r3, r7, #6
    2cd0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2cd2:	4b4a      	ldr	r3, [pc, #296]	; (2dfc <nvm_write_buffer+0x138>)
    2cd4:	881b      	ldrh	r3, [r3, #0]
    2cd6:	001a      	movs	r2, r3
    2cd8:	4b48      	ldr	r3, [pc, #288]	; (2dfc <nvm_write_buffer+0x138>)
    2cda:	885b      	ldrh	r3, [r3, #2]
    2cdc:	435a      	muls	r2, r3
	if (destination_address >
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d201      	bcs.n	2ce8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2ce4:	2318      	movs	r3, #24
    2ce6:	e084      	b.n	2df2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2ce8:	4b44      	ldr	r3, [pc, #272]	; (2dfc <nvm_write_buffer+0x138>)
    2cea:	881b      	ldrh	r3, [r3, #0]
    2cec:	3b01      	subs	r3, #1
    2cee:	001a      	movs	r2, r3
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	4013      	ands	r3, r2
    2cf4:	d001      	beq.n	2cfa <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2cf6:	2318      	movs	r3, #24
    2cf8:	e07b      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2cfa:	4b40      	ldr	r3, [pc, #256]	; (2dfc <nvm_write_buffer+0x138>)
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	1dba      	adds	r2, r7, #6
    2d00:	8812      	ldrh	r2, [r2, #0]
    2d02:	429a      	cmp	r2, r3
    2d04:	d901      	bls.n	2d0a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2d06:	2317      	movs	r3, #23
    2d08:	e073      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2d0a:	4b3d      	ldr	r3, [pc, #244]	; (2e00 <nvm_write_buffer+0x13c>)
    2d0c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2d0e:	4b3d      	ldr	r3, [pc, #244]	; (2e04 <nvm_write_buffer+0x140>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	001a      	movs	r2, r3
    2d16:	2301      	movs	r3, #1
    2d18:	4053      	eors	r3, r2
    2d1a:	b2db      	uxtb	r3, r3
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d001      	beq.n	2d24 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    2d20:	2305      	movs	r3, #5
    2d22:	e066      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    2d24:	697b      	ldr	r3, [r7, #20]
    2d26:	4a38      	ldr	r2, [pc, #224]	; (2e08 <nvm_write_buffer+0x144>)
    2d28:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	4b35      	ldr	r3, [pc, #212]	; (2e04 <nvm_write_buffer+0x140>)
    2d2e:	4798      	blx	r3
    2d30:	0003      	movs	r3, r0
    2d32:	001a      	movs	r2, r3
    2d34:	2301      	movs	r3, #1
    2d36:	4053      	eors	r3, r2
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d1f6      	bne.n	2d2c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2d3e:	697b      	ldr	r3, [r7, #20]
    2d40:	2220      	movs	r2, #32
    2d42:	32ff      	adds	r2, #255	; 0xff
    2d44:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	085b      	lsrs	r3, r3, #1
    2d4a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2d4c:	231a      	movs	r3, #26
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2200      	movs	r2, #0
    2d52:	801a      	strh	r2, [r3, #0]
    2d54:	e032      	b.n	2dbc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    2d56:	231a      	movs	r3, #26
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	68ba      	ldr	r2, [r7, #8]
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	2318      	movs	r3, #24
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2d68:	231a      	movs	r3, #26
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881a      	ldrh	r2, [r3, #0]
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	3b01      	subs	r3, #1
    2d74:	429a      	cmp	r2, r3
    2d76:	da11      	bge.n	2d9c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    2d78:	231a      	movs	r3, #26
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	3301      	adds	r3, #1
    2d80:	68ba      	ldr	r2, [r7, #8]
    2d82:	18d3      	adds	r3, r2, r3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	021b      	lsls	r3, r3, #8
    2d88:	b21a      	sxth	r2, r3
    2d8a:	2318      	movs	r3, #24
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	2100      	movs	r1, #0
    2d90:	5e5b      	ldrsh	r3, [r3, r1]
    2d92:	4313      	orrs	r3, r2
    2d94:	b21a      	sxth	r2, r3
    2d96:	2318      	movs	r3, #24
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	1c5a      	adds	r2, r3, #1
    2da0:	61fa      	str	r2, [r7, #28]
    2da2:	005b      	lsls	r3, r3, #1
    2da4:	001a      	movs	r2, r3
    2da6:	2318      	movs	r3, #24
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2dae:	231a      	movs	r3, #26
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	221a      	movs	r2, #26
    2db4:	18ba      	adds	r2, r7, r2
    2db6:	8812      	ldrh	r2, [r2, #0]
    2db8:	3202      	adds	r2, #2
    2dba:	801a      	strh	r2, [r3, #0]
    2dbc:	231a      	movs	r3, #26
    2dbe:	18fa      	adds	r2, r7, r3
    2dc0:	1dbb      	adds	r3, r7, #6
    2dc2:	8812      	ldrh	r2, [r2, #0]
    2dc4:	881b      	ldrh	r3, [r3, #0]
    2dc6:	429a      	cmp	r2, r3
    2dc8:	d3c5      	bcc.n	2d56 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2dca:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <nvm_write_buffer+0x138>)
    2dcc:	791b      	ldrb	r3, [r3, #4]
    2dce:	2201      	movs	r2, #1
    2dd0:	4053      	eors	r3, r2
    2dd2:	b2db      	uxtb	r3, r3
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d00b      	beq.n	2df0 <nvm_write_buffer+0x12c>
    2dd8:	1dbb      	adds	r3, r7, #6
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	2b3f      	cmp	r3, #63	; 0x3f
    2dde:	d807      	bhi.n	2df0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	2200      	movs	r2, #0
    2de4:	0019      	movs	r1, r3
    2de6:	2004      	movs	r0, #4
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <nvm_write_buffer+0x148>)
    2dea:	4798      	blx	r3
    2dec:	0003      	movs	r3, r0
    2dee:	e000      	b.n	2df2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    2df0:	2300      	movs	r3, #0
}
    2df2:	0018      	movs	r0, r3
    2df4:	46bd      	mov	sp, r7
    2df6:	b008      	add	sp, #32
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	200001d4 	.word	0x200001d4
    2e00:	41004000 	.word	0x41004000
    2e04:	00002a51 	.word	0x00002a51
    2e08:	ffffa544 	.word	0xffffa544
    2e0c:	00002bad 	.word	0x00002bad

00002e10 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b088      	sub	sp, #32
    2e14:	af00      	add	r7, sp, #0
    2e16:	60f8      	str	r0, [r7, #12]
    2e18:	60b9      	str	r1, [r7, #8]
    2e1a:	1dbb      	adds	r3, r7, #6
    2e1c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2e1e:	4b38      	ldr	r3, [pc, #224]	; (2f00 <nvm_read_buffer+0xf0>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	001a      	movs	r2, r3
    2e24:	4b36      	ldr	r3, [pc, #216]	; (2f00 <nvm_read_buffer+0xf0>)
    2e26:	885b      	ldrh	r3, [r3, #2]
    2e28:	435a      	muls	r2, r3
	if (source_address >
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	429a      	cmp	r2, r3
    2e2e:	d201      	bcs.n	2e34 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2e30:	2318      	movs	r3, #24
    2e32:	e060      	b.n	2ef6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    2e34:	4b32      	ldr	r3, [pc, #200]	; (2f00 <nvm_read_buffer+0xf0>)
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	3b01      	subs	r3, #1
    2e3a:	001a      	movs	r2, r3
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	4013      	ands	r3, r2
    2e40:	d001      	beq.n	2e46 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2e42:	2318      	movs	r3, #24
    2e44:	e057      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2e46:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <nvm_read_buffer+0xf0>)
    2e48:	881b      	ldrh	r3, [r3, #0]
    2e4a:	1dba      	adds	r2, r7, #6
    2e4c:	8812      	ldrh	r2, [r2, #0]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d901      	bls.n	2e56 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2e52:	2317      	movs	r3, #23
    2e54:	e04f      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2e56:	4b2b      	ldr	r3, [pc, #172]	; (2f04 <nvm_read_buffer+0xf4>)
    2e58:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2e5a:	4b2b      	ldr	r3, [pc, #172]	; (2f08 <nvm_read_buffer+0xf8>)
    2e5c:	4798      	blx	r3
    2e5e:	0003      	movs	r3, r0
    2e60:	001a      	movs	r2, r3
    2e62:	2301      	movs	r3, #1
    2e64:	4053      	eors	r3, r2
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d001      	beq.n	2e70 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    2e6c:	2305      	movs	r3, #5
    2e6e:	e042      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	2220      	movs	r2, #32
    2e74:	32ff      	adds	r2, #255	; 0xff
    2e76:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	085b      	lsrs	r3, r3, #1
    2e7c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2e7e:	231a      	movs	r3, #26
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	2200      	movs	r2, #0
    2e84:	801a      	strh	r2, [r3, #0]
    2e86:	e02e      	b.n	2ee6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    2e88:	69fb      	ldr	r3, [r7, #28]
    2e8a:	1c5a      	adds	r2, r3, #1
    2e8c:	61fa      	str	r2, [r7, #28]
    2e8e:	005b      	lsls	r3, r3, #1
    2e90:	001a      	movs	r2, r3
    2e92:	2312      	movs	r3, #18
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	8812      	ldrh	r2, [r2, #0]
    2e98:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    2e9a:	231a      	movs	r3, #26
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	18d3      	adds	r3, r2, r3
    2ea4:	2212      	movs	r2, #18
    2ea6:	18ba      	adds	r2, r7, r2
    2ea8:	8812      	ldrh	r2, [r2, #0]
    2eaa:	b2d2      	uxtb	r2, r2
    2eac:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2eae:	231a      	movs	r3, #26
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	881a      	ldrh	r2, [r3, #0]
    2eb4:	1dbb      	adds	r3, r7, #6
    2eb6:	881b      	ldrh	r3, [r3, #0]
    2eb8:	3b01      	subs	r3, #1
    2eba:	429a      	cmp	r2, r3
    2ebc:	da0c      	bge.n	2ed8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    2ebe:	231a      	movs	r3, #26
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	881b      	ldrh	r3, [r3, #0]
    2ec4:	3301      	adds	r3, #1
    2ec6:	68ba      	ldr	r2, [r7, #8]
    2ec8:	18d3      	adds	r3, r2, r3
    2eca:	2212      	movs	r2, #18
    2ecc:	18ba      	adds	r2, r7, r2
    2ece:	8812      	ldrh	r2, [r2, #0]
    2ed0:	0a12      	lsrs	r2, r2, #8
    2ed2:	b292      	uxth	r2, r2
    2ed4:	b2d2      	uxtb	r2, r2
    2ed6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2ed8:	231a      	movs	r3, #26
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	221a      	movs	r2, #26
    2ede:	18ba      	adds	r2, r7, r2
    2ee0:	8812      	ldrh	r2, [r2, #0]
    2ee2:	3202      	adds	r2, #2
    2ee4:	801a      	strh	r2, [r3, #0]
    2ee6:	231a      	movs	r3, #26
    2ee8:	18fa      	adds	r2, r7, r3
    2eea:	1dbb      	adds	r3, r7, #6
    2eec:	8812      	ldrh	r2, [r2, #0]
    2eee:	881b      	ldrh	r3, [r3, #0]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d3c9      	bcc.n	2e88 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    2ef4:	2300      	movs	r3, #0
}
    2ef6:	0018      	movs	r0, r3
    2ef8:	46bd      	mov	sp, r7
    2efa:	b008      	add	sp, #32
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	200001d4 	.word	0x200001d4
    2f04:	41004000 	.word	0x41004000
    2f08:	00002a51 	.word	0x00002a51

00002f0c <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b084      	sub	sp, #16
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2f14:	4b1e      	ldr	r3, [pc, #120]	; (2f90 <nvm_erase_row+0x84>)
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	001a      	movs	r2, r3
    2f1a:	4b1d      	ldr	r3, [pc, #116]	; (2f90 <nvm_erase_row+0x84>)
    2f1c:	885b      	ldrh	r3, [r3, #2]
    2f1e:	435a      	muls	r2, r3
	if (row_address >
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	429a      	cmp	r2, r3
    2f24:	d201      	bcs.n	2f2a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2f26:	2318      	movs	r3, #24
    2f28:	e02d      	b.n	2f86 <nvm_erase_row+0x7a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2f2a:	4b19      	ldr	r3, [pc, #100]	; (2f90 <nvm_erase_row+0x84>)
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	009b      	lsls	r3, r3, #2
    2f30:	3b01      	subs	r3, #1
    2f32:	001a      	movs	r2, r3
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	4013      	ands	r3, r2
    2f38:	d001      	beq.n	2f3e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    2f3a:	2318      	movs	r3, #24
    2f3c:	e023      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2f3e:	4b15      	ldr	r3, [pc, #84]	; (2f94 <nvm_erase_row+0x88>)
    2f40:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2f42:	4b15      	ldr	r3, [pc, #84]	; (2f98 <nvm_erase_row+0x8c>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	001a      	movs	r2, r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	4053      	eors	r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d001      	beq.n	2f58 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    2f54:	2305      	movs	r3, #5
    2f56:	e016      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f58:	68fb      	ldr	r3, [r7, #12]
    2f5a:	2220      	movs	r2, #32
    2f5c:	32ff      	adds	r2, #255	; 0xff
    2f5e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	089b      	lsrs	r3, r3, #2
    2f64:	005a      	lsls	r2, r3, #1
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2f6a:	68fb      	ldr	r3, [r7, #12]
    2f6c:	4a0b      	ldr	r2, [pc, #44]	; (2f9c <nvm_erase_row+0x90>)
    2f6e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <nvm_erase_row+0x8c>)
    2f74:	4798      	blx	r3
    2f76:	0003      	movs	r3, r0
    2f78:	001a      	movs	r2, r3
    2f7a:	2301      	movs	r3, #1
    2f7c:	4053      	eors	r3, r2
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1f6      	bne.n	2f72 <nvm_erase_row+0x66>
	}

	return STATUS_OK;
    2f84:	2300      	movs	r3, #0
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b004      	add	sp, #16
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200001d4 	.word	0x200001d4
    2f94:	41004000 	.word	0x41004000
    2f98:	00002a51 	.word	0x00002a51
    2f9c:	ffffa502 	.word	0xffffa502

00002fa0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b086      	sub	sp, #24
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2fa8:	4b2a      	ldr	r3, [pc, #168]	; (3054 <nvm_get_parameters+0xb4>)
    2faa:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2220      	movs	r2, #32
    2fb0:	32ff      	adds	r2, #255	; 0xff
    2fb2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	0c1b      	lsrs	r3, r3, #16
    2fbe:	2207      	movs	r2, #7
    2fc0:	4013      	ands	r3, r2
    2fc2:	2208      	movs	r2, #8
    2fc4:	409a      	lsls	r2, r3
    2fc6:	0013      	movs	r3, r2
	parameters->page_size =
    2fc8:	b2da      	uxtb	r2, r3
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    2fce:	693b      	ldr	r3, [r7, #16]
    2fd0:	b29a      	uxth	r2, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    2fd6:	4b20      	ldr	r3, [pc, #128]	; (3058 <nvm_get_parameters+0xb8>)
    2fd8:	881b      	ldrh	r3, [r3, #0]
    2fda:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    2fdc:	091b      	lsrs	r3, r3, #4
    2fde:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    2fe0:	230e      	movs	r3, #14
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2107      	movs	r1, #7
    2fe6:	400a      	ands	r2, r1
    2fe8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    2fea:	230e      	movs	r3, #14
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	881b      	ldrh	r3, [r3, #0]
    2ff0:	2b07      	cmp	r3, #7
    2ff2:	d103      	bne.n	2ffc <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2200      	movs	r2, #0
    2ff8:	605a      	str	r2, [r3, #4]
    2ffa:	e00a      	b.n	3012 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    2ffc:	230e      	movs	r3, #14
    2ffe:	18fb      	adds	r3, r7, r3
    3000:	881b      	ldrh	r3, [r3, #0]
    3002:	2206      	movs	r2, #6
    3004:	1ad3      	subs	r3, r2, r3
    3006:	2204      	movs	r2, #4
    3008:	409a      	lsls	r2, r3
    300a:	0013      	movs	r3, r2
    300c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    3012:	4b11      	ldr	r3, [pc, #68]	; (3058 <nvm_get_parameters+0xb8>)
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    3018:	230c      	movs	r3, #12
    301a:	18fb      	adds	r3, r7, r3
    301c:	2107      	movs	r1, #7
    301e:	400a      	ands	r2, r1
    3020:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    3022:	230c      	movs	r3, #12
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	2b07      	cmp	r3, #7
    302a:	d103      	bne.n	3034 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2200      	movs	r2, #0
    3030:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    3032:	e00a      	b.n	304a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    3034:	230c      	movs	r3, #12
    3036:	18fb      	adds	r3, r7, r3
    3038:	881b      	ldrh	r3, [r3, #0]
    303a:	2207      	movs	r2, #7
    303c:	1ad3      	subs	r3, r2, r3
    303e:	2204      	movs	r2, #4
    3040:	409a      	lsls	r2, r3
    3042:	0013      	movs	r3, r2
    3044:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	609a      	str	r2, [r3, #8]
}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	46bd      	mov	sp, r7
    304e:	b006      	add	sp, #24
    3050:	bd80      	pop	{r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	41004000 	.word	0x41004000
    3058:	00804000 	.word	0x00804000

0000305c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    305c:	b580      	push	{r7, lr}
    305e:	af00      	add	r7, sp, #0
    3060:	2000      	movs	r0, #0
    3062:	4b02      	ldr	r3, [pc, #8]	; (306c <TCC0_Handler+0x10>)
    3064:	4798      	blx	r3
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}
    306c:	00003099 	.word	0x00003099

00003070 <TCC1_Handler>:
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
    3074:	2001      	movs	r0, #1
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <TCC1_Handler+0x10>)
    3078:	4798      	blx	r3
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	46bd      	mov	sp, r7
    307e:	bd80      	pop	{r7, pc}
    3080:	00003099 	.word	0x00003099

00003084 <TCC2_Handler>:
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
    3088:	2002      	movs	r0, #2
    308a:	4b02      	ldr	r3, [pc, #8]	; (3094 <TCC2_Handler+0x10>)
    308c:	4798      	blx	r3
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	00003099 	.word	0x00003099

00003098 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	0002      	movs	r2, r0
    30a0:	1dfb      	adds	r3, r7, #7
    30a2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    30a8:	4b18      	ldr	r3, [pc, #96]	; (310c <_tcc_interrupt_handler+0x74>)
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	58d3      	ldr	r3, [r2, r3]
    30ae:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    30b6:	693b      	ldr	r3, [r7, #16]
    30b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30ba:	401a      	ands	r2, r3
			module->enable_callback_mask);
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30c0:	4013      	ands	r3, r2
    30c2:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30c4:	2300      	movs	r3, #0
    30c6:	617b      	str	r3, [r7, #20]
    30c8:	e019      	b.n	30fe <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    30ca:	4b11      	ldr	r3, [pc, #68]	; (3110 <_tcc_interrupt_handler+0x78>)
    30cc:	697a      	ldr	r2, [r7, #20]
    30ce:	0092      	lsls	r2, r2, #2
    30d0:	58d3      	ldr	r3, [r2, r3]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	4013      	ands	r3, r2
    30d6:	d00f      	beq.n	30f8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    30d8:	693a      	ldr	r2, [r7, #16]
    30da:	697b      	ldr	r3, [r7, #20]
    30dc:	009b      	lsls	r3, r3, #2
    30de:	18d3      	adds	r3, r2, r3
    30e0:	3304      	adds	r3, #4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	693a      	ldr	r2, [r7, #16]
    30e6:	0010      	movs	r0, r2
    30e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    30ea:	693b      	ldr	r3, [r7, #16]
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	4a08      	ldr	r2, [pc, #32]	; (3110 <_tcc_interrupt_handler+0x78>)
    30f0:	6979      	ldr	r1, [r7, #20]
    30f2:	0089      	lsls	r1, r1, #2
    30f4:	588a      	ldr	r2, [r1, r2]
    30f6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	3301      	adds	r3, #1
    30fc:	617b      	str	r3, [r7, #20]
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2b0b      	cmp	r3, #11
    3102:	dde2      	ble.n	30ca <_tcc_interrupt_handler+0x32>
		}
	}
}
    3104:	46c0      	nop			; (mov r8, r8)
    3106:	46bd      	mov	sp, r7
    3108:	b006      	add	sp, #24
    310a:	bd80      	pop	{r7, pc}
    310c:	20000450 	.word	0x20000450
    3110:	00017244 	.word	0x00017244

00003114 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3114:	b580      	push	{r7, lr}
    3116:	af00      	add	r7, sp, #0
    3118:	2000      	movs	r0, #0
    311a:	4b02      	ldr	r3, [pc, #8]	; (3124 <TC3_Handler+0x10>)
    311c:	4798      	blx	r3
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	00003151 	.word	0x00003151

00003128 <TC4_Handler>:
    3128:	b580      	push	{r7, lr}
    312a:	af00      	add	r7, sp, #0
    312c:	2001      	movs	r0, #1
    312e:	4b02      	ldr	r3, [pc, #8]	; (3138 <TC4_Handler+0x10>)
    3130:	4798      	blx	r3
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}
    3138:	00003151 	.word	0x00003151

0000313c <TC5_Handler>:
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
    3140:	2002      	movs	r0, #2
    3142:	4b02      	ldr	r3, [pc, #8]	; (314c <TC5_Handler+0x10>)
    3144:	4798      	blx	r3
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	46bd      	mov	sp, r7
    314a:	bd80      	pop	{r7, pc}
    314c:	00003151 	.word	0x00003151

00003150 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	0002      	movs	r2, r0
    3158:	1dfb      	adds	r3, r7, #7
    315a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    315c:	1dfb      	adds	r3, r7, #7
    315e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3160:	4b28      	ldr	r3, [pc, #160]	; (3204 <_tc_interrupt_handler+0xb4>)
    3162:	0092      	lsls	r2, r2, #2
    3164:	58d3      	ldr	r3, [r2, r3]
    3166:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	7b9b      	ldrb	r3, [r3, #14]
    316e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3174:	4013      	ands	r3, r2
    3176:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    317c:	230b      	movs	r3, #11
    317e:	18fb      	adds	r3, r7, r3
    3180:	400a      	ands	r2, r1
    3182:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3184:	230b      	movs	r3, #11
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2201      	movs	r2, #1
    318c:	4013      	ands	r3, r2
    318e:	d008      	beq.n	31a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	68fa      	ldr	r2, [r7, #12]
    3196:	0010      	movs	r0, r2
    3198:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	2201      	movs	r2, #1
    31a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    31a2:	230b      	movs	r3, #11
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2202      	movs	r2, #2
    31aa:	4013      	ands	r3, r2
    31ac:	d008      	beq.n	31c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	68db      	ldr	r3, [r3, #12]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	0010      	movs	r0, r2
    31b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2202      	movs	r2, #2
    31be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    31c0:	230b      	movs	r3, #11
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2210      	movs	r2, #16
    31c8:	4013      	ands	r3, r2
    31ca:	d008      	beq.n	31de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	691b      	ldr	r3, [r3, #16]
    31d0:	68fa      	ldr	r2, [r7, #12]
    31d2:	0010      	movs	r0, r2
    31d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31d6:	68fb      	ldr	r3, [r7, #12]
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	2210      	movs	r2, #16
    31dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    31de:	230b      	movs	r3, #11
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	2220      	movs	r2, #32
    31e6:	4013      	ands	r3, r2
    31e8:	d008      	beq.n	31fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	695b      	ldr	r3, [r3, #20]
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	0010      	movs	r0, r2
    31f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2220      	movs	r2, #32
    31fa:	739a      	strb	r2, [r3, #14]
	}
}
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46bd      	mov	sp, r7
    3200:	b004      	add	sp, #16
    3202:	bd80      	pop	{r7, pc}
    3204:	2000045c 	.word	0x2000045c

00003208 <system_gclk_chan_get_config_defaults>:
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	2200      	movs	r2, #0
    3214:	701a      	strb	r2, [r3, #0]
}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46bd      	mov	sp, r7
    321a:	b002      	add	sp, #8
    321c:	bd80      	pop	{r7, pc}
	...

00003220 <system_apb_clock_set_mask>:
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	0002      	movs	r2, r0
    3228:	6039      	str	r1, [r7, #0]
    322a:	1dfb      	adds	r3, r7, #7
    322c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    322e:	1dfb      	adds	r3, r7, #7
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b01      	cmp	r3, #1
    3234:	d00a      	beq.n	324c <system_apb_clock_set_mask+0x2c>
    3236:	2b02      	cmp	r3, #2
    3238:	d00f      	beq.n	325a <system_apb_clock_set_mask+0x3a>
    323a:	2b00      	cmp	r3, #0
    323c:	d114      	bne.n	3268 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    323e:	4b0e      	ldr	r3, [pc, #56]	; (3278 <system_apb_clock_set_mask+0x58>)
    3240:	4a0d      	ldr	r2, [pc, #52]	; (3278 <system_apb_clock_set_mask+0x58>)
    3242:	6991      	ldr	r1, [r2, #24]
    3244:	683a      	ldr	r2, [r7, #0]
    3246:	430a      	orrs	r2, r1
    3248:	619a      	str	r2, [r3, #24]
			break;
    324a:	e00f      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    324c:	4b0a      	ldr	r3, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    324e:	4a0a      	ldr	r2, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    3250:	69d1      	ldr	r1, [r2, #28]
    3252:	683a      	ldr	r2, [r7, #0]
    3254:	430a      	orrs	r2, r1
    3256:	61da      	str	r2, [r3, #28]
			break;
    3258:	e008      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <system_apb_clock_set_mask+0x58>)
    325c:	4a06      	ldr	r2, [pc, #24]	; (3278 <system_apb_clock_set_mask+0x58>)
    325e:	6a11      	ldr	r1, [r2, #32]
    3260:	683a      	ldr	r2, [r7, #0]
    3262:	430a      	orrs	r2, r1
    3264:	621a      	str	r2, [r3, #32]
			break;
    3266:	e001      	b.n	326c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3268:	2317      	movs	r3, #23
    326a:	e000      	b.n	326e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    326c:	2300      	movs	r3, #0
}
    326e:	0018      	movs	r0, r3
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	40000400 	.word	0x40000400

0000327c <system_pinmux_get_config_defaults>:
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2280      	movs	r2, #128	; 0x80
    3288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2200      	movs	r2, #0
    328e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2201      	movs	r2, #1
    3294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	2200      	movs	r2, #0
    329a:	70da      	strb	r2, [r3, #3]
}
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46bd      	mov	sp, r7
    32a0:	b002      	add	sp, #8
    32a2:	bd80      	pop	{r7, pc}

000032a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <system_is_debugger_present+0x1c>)
    32aa:	789b      	ldrb	r3, [r3, #2]
    32ac:	b2db      	uxtb	r3, r3
    32ae:	001a      	movs	r2, r3
    32b0:	2302      	movs	r3, #2
    32b2:	4013      	ands	r3, r2
    32b4:	1e5a      	subs	r2, r3, #1
    32b6:	4193      	sbcs	r3, r2
    32b8:	b2db      	uxtb	r3, r3
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	bd80      	pop	{r7, pc}
    32c0:	41002000 	.word	0x41002000

000032c4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	69db      	ldr	r3, [r3, #28]
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
    32da:	1e5a      	subs	r2, r3, #1
    32dc:	4193      	sbcs	r3, r2
    32de:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    32e0:	0018      	movs	r0, r3
    32e2:	46bd      	mov	sp, r7
    32e4:	b004      	add	sp, #16
    32e6:	bd80      	pop	{r7, pc}

000032e8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	0018      	movs	r0, r3
    32f6:	4b04      	ldr	r3, [pc, #16]	; (3308 <_i2c_master_wait_for_sync+0x20>)
    32f8:	4798      	blx	r3
    32fa:	1e03      	subs	r3, r0, #0
    32fc:	d1f9      	bne.n	32f2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46bd      	mov	sp, r7
    3302:	b002      	add	sp, #8
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	000032c5 	.word	0x000032c5

0000330c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	b095      	sub	sp, #84	; 0x54
    3310:	af00      	add	r7, sp, #0
    3312:	60f8      	str	r0, [r7, #12]
    3314:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3316:	2300      	movs	r3, #0
    3318:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    331a:	2300      	movs	r3, #0
    331c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    331e:	2300      	movs	r3, #0
    3320:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    3322:	233b      	movs	r3, #59	; 0x3b
    3324:	2208      	movs	r2, #8
    3326:	4694      	mov	ip, r2
    3328:	44bc      	add	ip, r7
    332a:	4463      	add	r3, ip
    332c:	2200      	movs	r2, #0
    332e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    3336:	68fb      	ldr	r3, [r7, #12]
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    333c:	2323      	movs	r3, #35	; 0x23
    333e:	2208      	movs	r2, #8
    3340:	18ba      	adds	r2, r7, r2
    3342:	18d4      	adds	r4, r2, r3
    3344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3346:	0018      	movs	r0, r3
    3348:	4bdb      	ldr	r3, [pc, #876]	; (36b8 <_i2c_master_set_config+0x3ac>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3350:	230c      	movs	r3, #12
    3352:	2208      	movs	r2, #8
    3354:	4694      	mov	ip, r2
    3356:	44bc      	add	ip, r7
    3358:	4463      	add	r3, ip
    335a:	0018      	movs	r0, r3
    335c:	4bd7      	ldr	r3, [pc, #860]	; (36bc <_i2c_master_set_config+0x3b0>)
    335e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3360:	68bb      	ldr	r3, [r7, #8]
    3362:	69db      	ldr	r3, [r3, #28]
    3364:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    3366:	68bb      	ldr	r3, [r7, #8]
    3368:	6a1b      	ldr	r3, [r3, #32]
    336a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    336e:	2b00      	cmp	r3, #0
    3370:	d106      	bne.n	3380 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3374:	2100      	movs	r1, #0
    3376:	0018      	movs	r0, r3
    3378:	4bd1      	ldr	r3, [pc, #836]	; (36c0 <_i2c_master_set_config+0x3b4>)
    337a:	4798      	blx	r3
    337c:	0003      	movs	r3, r0
    337e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3382:	b2da      	uxtb	r2, r3
    3384:	230c      	movs	r3, #12
    3386:	2108      	movs	r1, #8
    3388:	468c      	mov	ip, r1
    338a:	44bc      	add	ip, r7
    338c:	4463      	add	r3, ip
    338e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3390:	230c      	movs	r3, #12
    3392:	2208      	movs	r2, #8
    3394:	4694      	mov	ip, r2
    3396:	44bc      	add	ip, r7
    3398:	4463      	add	r3, ip
    339a:	2202      	movs	r2, #2
    339c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33a0:	0c1b      	lsrs	r3, r3, #16
    33a2:	b2db      	uxtb	r3, r3
    33a4:	220c      	movs	r2, #12
    33a6:	2108      	movs	r1, #8
    33a8:	468c      	mov	ip, r1
    33aa:	44bc      	add	ip, r7
    33ac:	4462      	add	r2, ip
    33ae:	0011      	movs	r1, r2
    33b0:	0018      	movs	r0, r3
    33b2:	4bc4      	ldr	r3, [pc, #784]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    33b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33b8:	2b00      	cmp	r3, #0
    33ba:	d106      	bne.n	33ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    33bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33be:	2101      	movs	r1, #1
    33c0:	0018      	movs	r0, r3
    33c2:	4bbf      	ldr	r3, [pc, #764]	; (36c0 <_i2c_master_set_config+0x3b4>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
    33c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    33ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33cc:	b2da      	uxtb	r2, r3
    33ce:	230c      	movs	r3, #12
    33d0:	2108      	movs	r1, #8
    33d2:	468c      	mov	ip, r1
    33d4:	44bc      	add	ip, r7
    33d6:	4463      	add	r3, ip
    33d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    33da:	230c      	movs	r3, #12
    33dc:	2208      	movs	r2, #8
    33de:	4694      	mov	ip, r2
    33e0:	44bc      	add	ip, r7
    33e2:	4463      	add	r3, ip
    33e4:	2202      	movs	r2, #2
    33e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    33e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33ea:	0c1b      	lsrs	r3, r3, #16
    33ec:	b2db      	uxtb	r3, r3
    33ee:	220c      	movs	r2, #12
    33f0:	2108      	movs	r1, #8
    33f2:	468c      	mov	ip, r1
    33f4:	44bc      	add	ip, r7
    33f6:	4462      	add	r2, ip
    33f8:	0011      	movs	r1, r2
    33fa:	0018      	movs	r0, r3
    33fc:	4bb1      	ldr	r3, [pc, #708]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3400:	68bb      	ldr	r3, [r7, #8]
    3402:	8a9a      	ldrh	r2, [r3, #20]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	8ada      	ldrh	r2, [r3, #22]
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	7e1b      	ldrb	r3, [r3, #24]
    3414:	2b00      	cmp	r3, #0
    3416:	d103      	bne.n	3420 <_i2c_master_set_config+0x114>
    3418:	4bab      	ldr	r3, [pc, #684]	; (36c8 <_i2c_master_set_config+0x3bc>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d002      	beq.n	3426 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	64fb      	str	r3, [r7, #76]	; 0x4c
    3424:	e001      	b.n	342a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3426:	2300      	movs	r3, #0
    3428:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    342a:	68bb      	ldr	r3, [r7, #8]
    342c:	691b      	ldr	r3, [r3, #16]
    342e:	2b00      	cmp	r3, #0
    3430:	d004      	beq.n	343c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	691b      	ldr	r3, [r3, #16]
    3436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3438:	4313      	orrs	r3, r2
    343a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	689b      	ldr	r3, [r3, #8]
    3440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3442:	4313      	orrs	r3, r2
    3444:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	2224      	movs	r2, #36	; 0x24
    344a:	5c9b      	ldrb	r3, [r3, r2]
    344c:	2b00      	cmp	r3, #0
    344e:	d004      	beq.n	345a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3452:	2280      	movs	r2, #128	; 0x80
    3454:	05d2      	lsls	r2, r2, #23
    3456:	4313      	orrs	r3, r2
    3458:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    345e:	2b00      	cmp	r3, #0
    3460:	d004      	beq.n	346c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3468:	4313      	orrs	r3, r2
    346a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    346c:	68bb      	ldr	r3, [r7, #8]
    346e:	222c      	movs	r2, #44	; 0x2c
    3470:	5c9b      	ldrb	r3, [r3, r2]
    3472:	2b00      	cmp	r3, #0
    3474:	d105      	bne.n	3482 <_i2c_master_set_config+0x176>
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	689a      	ldr	r2, [r3, #8]
    347a:	2380      	movs	r3, #128	; 0x80
    347c:	049b      	lsls	r3, r3, #18
    347e:	429a      	cmp	r2, r3
    3480:	d104      	bne.n	348c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	0512      	lsls	r2, r2, #20
    3488:	4313      	orrs	r3, r2
    348a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    348c:	68bb      	ldr	r3, [r7, #8]
    348e:	222d      	movs	r2, #45	; 0x2d
    3490:	5c9b      	ldrb	r3, [r3, r2]
    3492:	2b00      	cmp	r3, #0
    3494:	d004      	beq.n	34a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3498:	2280      	movs	r2, #128	; 0x80
    349a:	0412      	lsls	r2, r2, #16
    349c:	4313      	orrs	r3, r2
    349e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    34a0:	68bb      	ldr	r3, [r7, #8]
    34a2:	222e      	movs	r2, #46	; 0x2e
    34a4:	5c9b      	ldrb	r3, [r3, r2]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d004      	beq.n	34b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    34aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	03d2      	lsls	r2, r2, #15
    34b0:	4313      	orrs	r3, r2
    34b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    34b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ba:	431a      	orrs	r2, r3
    34bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    34c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34c2:	2280      	movs	r2, #128	; 0x80
    34c4:	0052      	lsls	r2, r2, #1
    34c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    34c8:	2323      	movs	r3, #35	; 0x23
    34ca:	2208      	movs	r2, #8
    34cc:	4694      	mov	ip, r2
    34ce:	44bc      	add	ip, r7
    34d0:	4463      	add	r3, ip
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	3314      	adds	r3, #20
    34d6:	b2db      	uxtb	r3, r3
    34d8:	0018      	movs	r0, r3
    34da:	4b7c      	ldr	r3, [pc, #496]	; (36cc <_i2c_master_set_config+0x3c0>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	22fa      	movs	r2, #250	; 0xfa
    34e8:	0092      	lsls	r2, r2, #2
    34ea:	4353      	muls	r3, r2
    34ec:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    34ee:	68bb      	ldr	r3, [r7, #8]
    34f0:	685b      	ldr	r3, [r3, #4]
    34f2:	22fa      	movs	r2, #250	; 0xfa
    34f4:	0092      	lsls	r2, r2, #2
    34f6:	4353      	muls	r3, r2
    34f8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    34fa:	68bb      	ldr	r3, [r7, #8]
    34fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    34fe:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    3500:	4b73      	ldr	r3, [pc, #460]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3502:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3504:	4798      	blx	r3
    3506:	0005      	movs	r5, r0
    3508:	000e      	movs	r6, r1
    350a:	4b71      	ldr	r3, [pc, #452]	; (36d0 <_i2c_master_set_config+0x3c4>)
    350c:	6a38      	ldr	r0, [r7, #32]
    350e:	4798      	blx	r3
    3510:	6038      	str	r0, [r7, #0]
    3512:	6079      	str	r1, [r7, #4]
    3514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3516:	69ba      	ldr	r2, [r7, #24]
    3518:	435a      	muls	r2, r3
    351a:	4b6d      	ldr	r3, [pc, #436]	; (36d0 <_i2c_master_set_config+0x3c4>)
    351c:	0010      	movs	r0, r2
    351e:	4798      	blx	r3
    3520:	4c6c      	ldr	r4, [pc, #432]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3522:	4a6d      	ldr	r2, [pc, #436]	; (36d8 <_i2c_master_set_config+0x3cc>)
    3524:	4b6d      	ldr	r3, [pc, #436]	; (36dc <_i2c_master_set_config+0x3d0>)
    3526:	47a0      	blx	r4
    3528:	0003      	movs	r3, r0
    352a:	000c      	movs	r4, r1
    352c:	0018      	movs	r0, r3
    352e:	0021      	movs	r1, r4
    3530:	4c6b      	ldr	r4, [pc, #428]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3532:	2200      	movs	r2, #0
    3534:	4b6b      	ldr	r3, [pc, #428]	; (36e4 <_i2c_master_set_config+0x3d8>)
    3536:	47a0      	blx	r4
    3538:	0003      	movs	r3, r0
    353a:	000c      	movs	r4, r1
    353c:	001a      	movs	r2, r3
    353e:	0023      	movs	r3, r4
    3540:	4c64      	ldr	r4, [pc, #400]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3542:	6838      	ldr	r0, [r7, #0]
    3544:	6879      	ldr	r1, [r7, #4]
    3546:	47a0      	blx	r4
    3548:	0003      	movs	r3, r0
    354a:	000c      	movs	r4, r1
    354c:	001a      	movs	r2, r3
    354e:	0023      	movs	r3, r4
    3550:	4c65      	ldr	r4, [pc, #404]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3552:	0028      	movs	r0, r5
    3554:	0031      	movs	r1, r6
    3556:	47a0      	blx	r4
    3558:	0003      	movs	r3, r0
    355a:	000c      	movs	r4, r1
    355c:	001d      	movs	r5, r3
    355e:	0026      	movs	r6, r4
    3560:	6a3b      	ldr	r3, [r7, #32]
    3562:	005a      	lsls	r2, r3, #1
    3564:	4b5a      	ldr	r3, [pc, #360]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3566:	0010      	movs	r0, r2
    3568:	4798      	blx	r3
    356a:	0002      	movs	r2, r0
    356c:	000b      	movs	r3, r1
    356e:	4c5c      	ldr	r4, [pc, #368]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3570:	0028      	movs	r0, r5
    3572:	0031      	movs	r1, r6
    3574:	47a0      	blx	r4
    3576:	0003      	movs	r3, r0
    3578:	000c      	movs	r4, r1
    357a:	0018      	movs	r0, r3
    357c:	0021      	movs	r1, r4
    357e:	4c5a      	ldr	r4, [pc, #360]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3580:	2200      	movs	r2, #0
    3582:	4b5a      	ldr	r3, [pc, #360]	; (36ec <_i2c_master_set_config+0x3e0>)
    3584:	47a0      	blx	r4
    3586:	0003      	movs	r3, r0
    3588:	000c      	movs	r4, r1
    358a:	001d      	movs	r5, r3
    358c:	0026      	movs	r6, r4
    358e:	6a3b      	ldr	r3, [r7, #32]
    3590:	005a      	lsls	r2, r3, #1
    3592:	4b4f      	ldr	r3, [pc, #316]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3594:	0010      	movs	r0, r2
    3596:	4798      	blx	r3
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	4c54      	ldr	r4, [pc, #336]	; (36f0 <_i2c_master_set_config+0x3e4>)
    359e:	0028      	movs	r0, r5
    35a0:	0031      	movs	r1, r6
    35a2:	47a0      	blx	r4
    35a4:	0003      	movs	r3, r0
    35a6:	000c      	movs	r4, r1
    35a8:	0019      	movs	r1, r3
    35aa:	0022      	movs	r2, r4
    35ac:	4b51      	ldr	r3, [pc, #324]	; (36f4 <_i2c_master_set_config+0x3e8>)
    35ae:	0008      	movs	r0, r1
    35b0:	0011      	movs	r1, r2
    35b2:	4798      	blx	r3
    35b4:	0003      	movs	r3, r0
    35b6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	689a      	ldr	r2, [r3, #8]
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	049b      	lsls	r3, r3, #18
    35c0:	429a      	cmp	r2, r3
    35c2:	d145      	bne.n	3650 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    35c4:	4b42      	ldr	r3, [pc, #264]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    35c8:	4798      	blx	r3
    35ca:	4c45      	ldr	r4, [pc, #276]	; (36e0 <_i2c_master_set_config+0x3d4>)
    35cc:	0002      	movs	r2, r0
    35ce:	000b      	movs	r3, r1
    35d0:	47a0      	blx	r4
    35d2:	0003      	movs	r3, r0
    35d4:	000c      	movs	r4, r1
    35d6:	001d      	movs	r5, r3
    35d8:	0026      	movs	r6, r4
    35da:	4b3d      	ldr	r3, [pc, #244]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35dc:	69f8      	ldr	r0, [r7, #28]
    35de:	4798      	blx	r3
    35e0:	4c3c      	ldr	r4, [pc, #240]	; (36d4 <_i2c_master_set_config+0x3c8>)
    35e2:	2200      	movs	r2, #0
    35e4:	4b44      	ldr	r3, [pc, #272]	; (36f8 <_i2c_master_set_config+0x3ec>)
    35e6:	47a0      	blx	r4
    35e8:	0003      	movs	r3, r0
    35ea:	000c      	movs	r4, r1
    35ec:	001a      	movs	r2, r3
    35ee:	0023      	movs	r3, r4
    35f0:	4c3f      	ldr	r4, [pc, #252]	; (36f0 <_i2c_master_set_config+0x3e4>)
    35f2:	0028      	movs	r0, r5
    35f4:	0031      	movs	r1, r6
    35f6:	47a0      	blx	r4
    35f8:	0003      	movs	r3, r0
    35fa:	000c      	movs	r4, r1
    35fc:	0018      	movs	r0, r3
    35fe:	0021      	movs	r1, r4
    3600:	4c39      	ldr	r4, [pc, #228]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3602:	2200      	movs	r2, #0
    3604:	4b39      	ldr	r3, [pc, #228]	; (36ec <_i2c_master_set_config+0x3e0>)
    3606:	47a0      	blx	r4
    3608:	0003      	movs	r3, r0
    360a:	000c      	movs	r4, r1
    360c:	0019      	movs	r1, r3
    360e:	0022      	movs	r2, r4
    3610:	4b38      	ldr	r3, [pc, #224]	; (36f4 <_i2c_master_set_config+0x3e8>)
    3612:	0008      	movs	r0, r1
    3614:	0011      	movs	r1, r2
    3616:	4798      	blx	r3
    3618:	0003      	movs	r3, r0
    361a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    361e:	2b00      	cmp	r3, #0
    3620:	d009      	beq.n	3636 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3622:	4b36      	ldr	r3, [pc, #216]	; (36fc <_i2c_master_set_config+0x3f0>)
    3624:	69f9      	ldr	r1, [r7, #28]
    3626:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
    362c:	1e9a      	subs	r2, r3, #2
    362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3630:	1ad3      	subs	r3, r2, r3
    3632:	64bb      	str	r3, [r7, #72]	; 0x48
    3634:	e00c      	b.n	3650 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3636:	69fb      	ldr	r3, [r7, #28]
    3638:	005a      	lsls	r2, r3, #1
    363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363c:	18d3      	adds	r3, r2, r3
    363e:	1e5a      	subs	r2, r3, #1
    3640:	69fb      	ldr	r3, [r7, #28]
    3642:	0059      	lsls	r1, r3, #1
    3644:	4b2d      	ldr	r3, [pc, #180]	; (36fc <_i2c_master_set_config+0x3f0>)
    3646:	0010      	movs	r0, r2
    3648:	4798      	blx	r3
    364a:	0003      	movs	r3, r0
    364c:	3b01      	subs	r3, #1
    364e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3652:	2bff      	cmp	r3, #255	; 0xff
    3654:	dc08      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3658:	2b00      	cmp	r3, #0
    365a:	db05      	blt.n	3668 <_i2c_master_set_config+0x35c>
    365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365e:	2bff      	cmp	r3, #255	; 0xff
    3660:	dc02      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3664:	2b00      	cmp	r3, #0
    3666:	da06      	bge.n	3676 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3668:	233b      	movs	r3, #59	; 0x3b
    366a:	2208      	movs	r2, #8
    366c:	4694      	mov	ip, r2
    366e:	44bc      	add	ip, r7
    3670:	4463      	add	r3, ip
    3672:	2240      	movs	r2, #64	; 0x40
    3674:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3676:	233b      	movs	r3, #59	; 0x3b
    3678:	2208      	movs	r2, #8
    367a:	4694      	mov	ip, r2
    367c:	44bc      	add	ip, r7
    367e:	4463      	add	r3, ip
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b40      	cmp	r3, #64	; 0x40
    3684:	d00e      	beq.n	36a4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3688:	22ff      	movs	r2, #255	; 0xff
    368a:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    368e:	041b      	lsls	r3, r3, #16
    3690:	0019      	movs	r1, r3
    3692:	23ff      	movs	r3, #255	; 0xff
    3694:	041b      	lsls	r3, r3, #16
    3696:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3698:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    369c:	0612      	lsls	r2, r2, #24
    369e:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    36a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36a2:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    36a4:	233b      	movs	r3, #59	; 0x3b
    36a6:	2208      	movs	r2, #8
    36a8:	4694      	mov	ip, r2
    36aa:	44bc      	add	ip, r7
    36ac:	4463      	add	r3, ip
    36ae:	781b      	ldrb	r3, [r3, #0]
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b015      	add	sp, #84	; 0x54
    36b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b8:	00006f45 	.word	0x00006f45
    36bc:	0000327d 	.word	0x0000327d
    36c0:	00006d89 	.word	0x00006d89
    36c4:	00007e1d 	.word	0x00007e1d
    36c8:	000032a5 	.word	0x000032a5
    36cc:	00007c55 	.word	0x00007c55
    36d0:	00016d2d 	.word	0x00016d2d
    36d4:	00016115 	.word	0x00016115
    36d8:	e826d695 	.word	0xe826d695
    36dc:	3e112e0b 	.word	0x3e112e0b
    36e0:	0001528d 	.word	0x0001528d
    36e4:	40240000 	.word	0x40240000
    36e8:	00016615 	.word	0x00016615
    36ec:	3ff00000 	.word	0x3ff00000
    36f0:	000158ad 	.word	0x000158ad
    36f4:	00016c41 	.word	0x00016c41
    36f8:	40080000 	.word	0x40080000
    36fc:	00014009 	.word	0x00014009

00003700 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3700:	b590      	push	{r4, r7, lr}
    3702:	b08b      	sub	sp, #44	; 0x2c
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	0018      	movs	r0, r3
    371e:	4b3b      	ldr	r3, [pc, #236]	; (380c <i2c_master_init+0x10c>)
    3720:	4798      	blx	r3
    3722:	0003      	movs	r3, r0
    3724:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3726:	6a3b      	ldr	r3, [r7, #32]
    3728:	3302      	adds	r3, #2
    372a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	3314      	adds	r3, #20
    3730:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3732:	2201      	movs	r2, #1
    3734:	69fb      	ldr	r3, [r7, #28]
    3736:	409a      	lsls	r2, r3
    3738:	0013      	movs	r3, r2
    373a:	0019      	movs	r1, r3
    373c:	2002      	movs	r0, #2
    373e:	4b34      	ldr	r3, [pc, #208]	; (3810 <i2c_master_init+0x110>)
    3740:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3742:	2314      	movs	r3, #20
    3744:	18fb      	adds	r3, r7, r3
    3746:	0018      	movs	r0, r3
    3748:	4b32      	ldr	r3, [pc, #200]	; (3814 <i2c_master_init+0x114>)
    374a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	7b1a      	ldrb	r2, [r3, #12]
    3750:	2314      	movs	r3, #20
    3752:	18fb      	adds	r3, r7, r3
    3754:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3756:	69bb      	ldr	r3, [r7, #24]
    3758:	b2db      	uxtb	r3, r3
    375a:	2214      	movs	r2, #20
    375c:	18ba      	adds	r2, r7, r2
    375e:	0011      	movs	r1, r2
    3760:	0018      	movs	r0, r3
    3762:	4b2d      	ldr	r3, [pc, #180]	; (3818 <i2c_master_init+0x118>)
    3764:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3766:	69bb      	ldr	r3, [r7, #24]
    3768:	b2db      	uxtb	r3, r3
    376a:	0018      	movs	r0, r3
    376c:	4b2b      	ldr	r3, [pc, #172]	; (381c <i2c_master_init+0x11c>)
    376e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	7b1b      	ldrb	r3, [r3, #12]
    3774:	2100      	movs	r1, #0
    3776:	0018      	movs	r0, r3
    3778:	4b29      	ldr	r3, [pc, #164]	; (3820 <i2c_master_init+0x120>)
    377a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	2202      	movs	r2, #2
    3782:	4013      	ands	r3, r2
    3784:	d001      	beq.n	378a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    3786:	231c      	movs	r3, #28
    3788:	e03b      	b.n	3802 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	2201      	movs	r2, #1
    3790:	4013      	ands	r3, r2
    3792:	d001      	beq.n	3798 <i2c_master_init+0x98>
		return STATUS_BUSY;
    3794:	2305      	movs	r3, #5
    3796:	e034      	b.n	3802 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	2217      	movs	r2, #23
    379e:	18bc      	adds	r4, r7, r2
    37a0:	0018      	movs	r0, r3
    37a2:	4b1a      	ldr	r3, [pc, #104]	; (380c <i2c_master_init+0x10c>)
    37a4:	4798      	blx	r3
    37a6:	0003      	movs	r3, r0
    37a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    37aa:	4a1e      	ldr	r2, [pc, #120]	; (3824 <i2c_master_init+0x124>)
    37ac:	2317      	movs	r3, #23
    37ae:	18fb      	adds	r3, r7, r3
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	0011      	movs	r1, r2
    37b4:	0018      	movs	r0, r3
    37b6:	4b1c      	ldr	r3, [pc, #112]	; (3828 <i2c_master_init+0x128>)
    37b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    37ba:	2317      	movs	r3, #23
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781a      	ldrb	r2, [r3, #0]
    37c0:	4b1a      	ldr	r3, [pc, #104]	; (382c <i2c_master_init+0x12c>)
    37c2:	0092      	lsls	r2, r2, #2
    37c4:	68f9      	ldr	r1, [r7, #12]
    37c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	2200      	movs	r2, #0
    37cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	2200      	movs	r2, #0
    37d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	2200      	movs	r2, #0
    37d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	2200      	movs	r2, #0
    37de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	2225      	movs	r2, #37	; 0x25
    37e4:	2100      	movs	r1, #0
    37e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	2200      	movs	r2, #0
    37ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37f0:	2214      	movs	r2, #20
    37f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	0011      	movs	r1, r2
    37fa:	0018      	movs	r0, r3
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <i2c_master_init+0x130>)
    37fe:	4798      	blx	r3
    3800:	0003      	movs	r3, r0
}
    3802:	0018      	movs	r0, r3
    3804:	46bd      	mov	sp, r7
    3806:	b00b      	add	sp, #44	; 0x2c
    3808:	bd90      	pop	{r4, r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00006f45 	.word	0x00006f45
    3810:	00003221 	.word	0x00003221
    3814:	00003209 	.word	0x00003209
    3818:	00007b31 	.word	0x00007b31
    381c:	00007b75 	.word	0x00007b75
    3820:	00006cfd 	.word	0x00006cfd
    3824:	00004021 	.word	0x00004021
    3828:	00006fa9 	.word	0x00006fa9
    382c:	20000468 	.word	0x20000468
    3830:	0000330d 	.word	0x0000330d

00003834 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	7e1b      	ldrb	r3, [r3, #24]
    3846:	b2db      	uxtb	r3, r3
    3848:	001a      	movs	r2, r3
    384a:	2302      	movs	r3, #2
    384c:	4013      	ands	r3, r2
    384e:	d00b      	beq.n	3868 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	2202      	movs	r2, #2
    3854:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	8b5b      	ldrh	r3, [r3, #26]
    385a:	b29b      	uxth	r3, r3
    385c:	001a      	movs	r2, r3
    385e:	2302      	movs	r3, #2
    3860:	4013      	ands	r3, r2
    3862:	d011      	beq.n	3888 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3864:	2341      	movs	r3, #65	; 0x41
    3866:	e010      	b.n	388a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	8b5b      	ldrh	r3, [r3, #26]
    386c:	b29b      	uxth	r3, r3
    386e:	001a      	movs	r2, r3
    3870:	2304      	movs	r3, #4
    3872:	4013      	ands	r3, r2
    3874:	d008      	beq.n	3888 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	685b      	ldr	r3, [r3, #4]
    387a:	22c0      	movs	r2, #192	; 0xc0
    387c:	0292      	lsls	r2, r2, #10
    387e:	431a      	orrs	r2, r3
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3884:	2318      	movs	r3, #24
    3886:	e000      	b.n	388a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3888:	2300      	movs	r3, #0
}
    388a:	0018      	movs	r0, r3
    388c:	46bd      	mov	sp, r7
    388e:	b004      	add	sp, #16
    3890:	bd80      	pop	{r7, pc}

00003892 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3892:	b580      	push	{r7, lr}
    3894:	b084      	sub	sp, #16
    3896:	af00      	add	r7, sp, #0
    3898:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    38a0:	230e      	movs	r3, #14
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	2200      	movs	r2, #0
    38a6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38a8:	e00f      	b.n	38ca <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    38aa:	230e      	movs	r3, #14
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	220e      	movs	r2, #14
    38b0:	18ba      	adds	r2, r7, r2
    38b2:	8812      	ldrh	r2, [r2, #0]
    38b4:	3201      	adds	r2, #1
    38b6:	801a      	strh	r2, [r3, #0]
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	891b      	ldrh	r3, [r3, #8]
    38bc:	220e      	movs	r2, #14
    38be:	18ba      	adds	r2, r7, r2
    38c0:	8812      	ldrh	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    38c6:	2312      	movs	r3, #18
    38c8:	e00e      	b.n	38e8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38ca:	68bb      	ldr	r3, [r7, #8]
    38cc:	7e1b      	ldrb	r3, [r3, #24]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	001a      	movs	r2, r3
    38d2:	2301      	movs	r3, #1
    38d4:	4013      	ands	r3, r2
    38d6:	d106      	bne.n	38e6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    38d8:	68bb      	ldr	r3, [r7, #8]
    38da:	7e1b      	ldrb	r3, [r3, #24]
    38dc:	b2db      	uxtb	r3, r3
    38de:	001a      	movs	r2, r3
    38e0:	2302      	movs	r3, #2
    38e2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38e4:	d0e1      	beq.n	38aa <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    38e6:	2300      	movs	r3, #0
}
    38e8:	0018      	movs	r0, r3
    38ea:	46bd      	mov	sp, r7
    38ec:	b004      	add	sp, #16
    38ee:	bd80      	pop	{r7, pc}

000038f0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    38f0:	b590      	push	{r4, r7, lr}
    38f2:	b085      	sub	sp, #20
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	000a      	movs	r2, r1
    38fa:	1cfb      	adds	r3, r7, #3
    38fc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	681b      	ldr	r3, [r3, #0]
    3902:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	2280      	movs	r2, #128	; 0x80
    390a:	02d2      	lsls	r2, r2, #11
    390c:	431a      	orrs	r2, r3
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3912:	1cfb      	adds	r3, r7, #3
    3914:	781a      	ldrb	r2, [r3, #0]
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    391a:	230b      	movs	r3, #11
    391c:	18fc      	adds	r4, r7, r3
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	0018      	movs	r0, r3
    3922:	4b07      	ldr	r3, [pc, #28]	; (3940 <_i2c_master_send_hs_master_code+0x50>)
    3924:	4798      	blx	r3
    3926:	0003      	movs	r3, r0
    3928:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	2201      	movs	r2, #1
    392e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    3930:	230b      	movs	r3, #11
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
}
    3936:	0018      	movs	r0, r3
    3938:	46bd      	mov	sp, r7
    393a:	b005      	add	sp, #20
    393c:	bd90      	pop	{r4, r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	00003893 	.word	0x00003893

00003944 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3944:	b590      	push	{r4, r7, lr}
    3946:	b087      	sub	sp, #28
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3954:	2314      	movs	r3, #20
    3956:	18fb      	adds	r3, r7, r3
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	8852      	ldrh	r2, [r2, #2]
    395c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    395e:	2312      	movs	r3, #18
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	011b      	lsls	r3, r3, #4
    396c:	0fdb      	lsrs	r3, r3, #31
    396e:	b2db      	uxtb	r3, r3
    3970:	001a      	movs	r2, r3
    3972:	230b      	movs	r3, #11
    3974:	18fb      	adds	r3, r7, r3
    3976:	1e51      	subs	r1, r2, #1
    3978:	418a      	sbcs	r2, r1
    397a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	7a5b      	ldrb	r3, [r3, #9]
    3980:	2b00      	cmp	r3, #0
    3982:	d006      	beq.n	3992 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7a9a      	ldrb	r2, [r3, #10]
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	0011      	movs	r1, r2
    398c:	0018      	movs	r0, r3
    398e:	4b85      	ldr	r3, [pc, #532]	; (3ba4 <_i2c_master_read_packet+0x260>)
    3990:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	4a84      	ldr	r2, [pc, #528]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3998:	401a      	ands	r2, r3
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	7a1b      	ldrb	r3, [r3, #8]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d042      	beq.n	3a2c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	881b      	ldrh	r3, [r3, #0]
    39aa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	7a5b      	ldrb	r3, [r3, #9]
    39b0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    39b2:	4313      	orrs	r3, r2
    39b4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39b6:	2380      	movs	r3, #128	; 0x80
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    39c0:	2317      	movs	r3, #23
    39c2:	18fc      	adds	r4, r7, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	0018      	movs	r0, r3
    39c8:	4b78      	ldr	r3, [pc, #480]	; (3bac <_i2c_master_read_packet+0x268>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	4a74      	ldr	r2, [pc, #464]	; (3ba8 <_i2c_master_read_packet+0x264>)
    39d6:	401a      	ands	r2, r3
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    39dc:	2317      	movs	r3, #23
    39de:	18fb      	adds	r3, r7, r3
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d107      	bne.n	39f6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    39e6:	2317      	movs	r3, #23
    39e8:	18fc      	adds	r4, r7, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0018      	movs	r0, r3
    39ee:	4b70      	ldr	r3, [pc, #448]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    39f0:	4798      	blx	r3
    39f2:	0003      	movs	r3, r0
    39f4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    39f6:	2317      	movs	r3, #23
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d111      	bne.n	3a24 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a00:	683b      	ldr	r3, [r7, #0]
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	b29b      	uxth	r3, r3
    3a08:	2278      	movs	r2, #120	; 0x78
    3a0a:	4313      	orrs	r3, r2
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	7a5b      	ldrb	r3, [r3, #9]
    3a14:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a16:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a18:	2201      	movs	r2, #1
    3a1a:	4313      	orrs	r3, r2
    3a1c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	625a      	str	r2, [r3, #36]	; 0x24
    3a22:	e00f      	b.n	3a44 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    3a24:	2317      	movs	r3, #23
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	e0b6      	b.n	3b9a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	881b      	ldrh	r3, [r3, #0]
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	2201      	movs	r2, #1
    3a34:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	7a5b      	ldrb	r3, [r3, #9]
    3a3a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a3c:	4313      	orrs	r3, r2
    3a3e:	001a      	movs	r2, r3
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a44:	2317      	movs	r3, #23
    3a46:	18fc      	adds	r4, r7, r3
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	0018      	movs	r0, r3
    3a4c:	4b57      	ldr	r3, [pc, #348]	; (3bac <_i2c_master_read_packet+0x268>)
    3a4e:	4798      	blx	r3
    3a50:	0003      	movs	r3, r0
    3a52:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3a54:	230b      	movs	r3, #11
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d00b      	beq.n	3a76 <_i2c_master_read_packet+0x132>
    3a5e:	683b      	ldr	r3, [r7, #0]
    3a60:	885b      	ldrh	r3, [r3, #2]
    3a62:	2b01      	cmp	r3, #1
    3a64:	d107      	bne.n	3a76 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2280      	movs	r2, #128	; 0x80
    3a6c:	02d2      	lsls	r2, r2, #11
    3a6e:	431a      	orrs	r2, r3
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	605a      	str	r2, [r3, #4]
    3a74:	e005      	b.n	3a82 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	685b      	ldr	r3, [r3, #4]
    3a7a:	4a4b      	ldr	r2, [pc, #300]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3a7c:	401a      	ands	r2, r3
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a82:	2317      	movs	r3, #23
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d107      	bne.n	3a9c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3a8c:	2317      	movs	r3, #23
    3a8e:	18fc      	adds	r4, r7, r3
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	0018      	movs	r0, r3
    3a94:	4b46      	ldr	r3, [pc, #280]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    3a96:	4798      	blx	r3
    3a98:	0003      	movs	r3, r0
    3a9a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a9c:	2317      	movs	r3, #23
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d000      	beq.n	3aa8 <_i2c_master_read_packet+0x164>
    3aa6:	e075      	b.n	3b94 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    3aa8:	e04b      	b.n	3b42 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	8b5b      	ldrh	r3, [r3, #26]
    3aae:	b29b      	uxth	r3, r3
    3ab0:	001a      	movs	r2, r3
    3ab2:	2320      	movs	r3, #32
    3ab4:	4013      	ands	r3, r2
    3ab6:	d101      	bne.n	3abc <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    3ab8:	2341      	movs	r3, #65	; 0x41
    3aba:	e06e      	b.n	3b9a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	7adb      	ldrb	r3, [r3, #11]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d01e      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
    3ac4:	230b      	movs	r3, #11
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d004      	beq.n	3ade <_i2c_master_read_packet+0x19a>
    3ad4:	2314      	movs	r3, #20
    3ad6:	18fb      	adds	r3, r7, r3
    3ad8:	881b      	ldrh	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d009      	beq.n	3af2 <_i2c_master_read_packet+0x1ae>
    3ade:	230b      	movs	r3, #11
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	781b      	ldrb	r3, [r3, #0]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d00c      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3ae8:	2314      	movs	r3, #20
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	881b      	ldrh	r3, [r3, #0]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d107      	bne.n	3b02 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	2280      	movs	r2, #128	; 0x80
    3af8:	02d2      	lsls	r2, r2, #11
    3afa:	431a      	orrs	r2, r3
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	605a      	str	r2, [r3, #4]
    3b00:	e01a      	b.n	3b38 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	0018      	movs	r0, r3
    3b06:	4b2b      	ldr	r3, [pc, #172]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b08:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	685a      	ldr	r2, [r3, #4]
    3b0e:	2312      	movs	r3, #18
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	2112      	movs	r1, #18
    3b16:	1879      	adds	r1, r7, r1
    3b18:	1c58      	adds	r0, r3, #1
    3b1a:	8008      	strh	r0, [r1, #0]
    3b1c:	18d3      	adds	r3, r2, r3
    3b1e:	68fa      	ldr	r2, [r7, #12]
    3b20:	2128      	movs	r1, #40	; 0x28
    3b22:	5c52      	ldrb	r2, [r2, r1]
    3b24:	b2d2      	uxtb	r2, r2
    3b26:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    3b28:	2317      	movs	r3, #23
    3b2a:	18fc      	adds	r4, r7, r3
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b1e      	ldr	r3, [pc, #120]	; (3bac <_i2c_master_read_packet+0x268>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3b38:	2317      	movs	r3, #23
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d109      	bne.n	3b56 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    3b42:	2314      	movs	r3, #20
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	881b      	ldrh	r3, [r3, #0]
    3b48:	2214      	movs	r2, #20
    3b4a:	18ba      	adds	r2, r7, r2
    3b4c:	1e59      	subs	r1, r3, #1
    3b4e:	8011      	strh	r1, [r2, #0]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1aa      	bne.n	3aaa <_i2c_master_read_packet+0x166>
    3b54:	e000      	b.n	3b58 <_i2c_master_read_packet+0x214>
				break;
    3b56:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	7a9b      	ldrb	r3, [r3, #10]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d00a      	beq.n	3b76 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	0018      	movs	r0, r3
    3b64:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b66:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	22c0      	movs	r2, #192	; 0xc0
    3b6e:	0292      	lsls	r2, r2, #10
    3b70:	431a      	orrs	r2, r3
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	0018      	movs	r0, r3
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b7c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3b7e:	683b      	ldr	r3, [r7, #0]
    3b80:	685a      	ldr	r2, [r3, #4]
    3b82:	2312      	movs	r3, #18
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	881b      	ldrh	r3, [r3, #0]
    3b88:	18d3      	adds	r3, r2, r3
    3b8a:	68fa      	ldr	r2, [r7, #12]
    3b8c:	2128      	movs	r1, #40	; 0x28
    3b8e:	5c52      	ldrb	r2, [r2, r1]
    3b90:	b2d2      	uxtb	r2, r2
    3b92:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3b94:	2317      	movs	r3, #23
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781b      	ldrb	r3, [r3, #0]
}
    3b9a:	0018      	movs	r0, r3
    3b9c:	46bd      	mov	sp, r7
    3b9e:	b007      	add	sp, #28
    3ba0:	bd90      	pop	{r4, r7, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	000038f1 	.word	0x000038f1
    3ba8:	fffbffff 	.word	0xfffbffff
    3bac:	00003893 	.word	0x00003893
    3bb0:	00003835 	.word	0x00003835
    3bb4:	000032e9 	.word	0x000032e9

00003bb8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	8b9b      	ldrh	r3, [r3, #28]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d001      	beq.n	3bd0 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3bcc:	2305      	movs	r3, #5
    3bce:	e00c      	b.n	3bea <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	2201      	movs	r2, #1
    3bd4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	2201      	movs	r2, #1
    3bda:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3bdc:	683a      	ldr	r2, [r7, #0]
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	0011      	movs	r1, r2
    3be2:	0018      	movs	r0, r3
    3be4:	4b03      	ldr	r3, [pc, #12]	; (3bf4 <i2c_master_read_packet_wait+0x3c>)
    3be6:	4798      	blx	r3
    3be8:	0003      	movs	r3, r0
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b002      	add	sp, #8
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	00003945 	.word	0x00003945

00003bf8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bf8:	b590      	push	{r4, r7, lr}
    3bfa:	b087      	sub	sp, #28
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3c08:	2314      	movs	r3, #20
    3c0a:	18fb      	adds	r3, r7, r3
    3c0c:	683a      	ldr	r2, [r7, #0]
    3c0e:	8852      	ldrh	r2, [r2, #2]
    3c10:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	0018      	movs	r0, r3
    3c16:	4b51      	ldr	r3, [pc, #324]	; (3d5c <_i2c_master_write_packet+0x164>)
    3c18:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3c1a:	683b      	ldr	r3, [r7, #0]
    3c1c:	7a5b      	ldrb	r3, [r3, #9]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d006      	beq.n	3c30 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	7a9a      	ldrb	r2, [r3, #10]
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	0011      	movs	r1, r2
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b4c      	ldr	r3, [pc, #304]	; (3d60 <_i2c_master_write_packet+0x168>)
    3c2e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	4a4b      	ldr	r2, [pc, #300]	; (3d64 <_i2c_master_write_packet+0x16c>)
    3c36:	401a      	ands	r2, r3
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3c3c:	683b      	ldr	r3, [r7, #0]
    3c3e:	7a1b      	ldrb	r3, [r3, #8]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d00d      	beq.n	3c60 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	881b      	ldrh	r3, [r3, #0]
    3c48:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c4a:	683b      	ldr	r3, [r7, #0]
    3c4c:	7a5b      	ldrb	r3, [r3, #9]
    3c4e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c50:	4313      	orrs	r3, r2
    3c52:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c54:	2380      	movs	r3, #128	; 0x80
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c5a:	68fb      	ldr	r3, [r7, #12]
    3c5c:	625a      	str	r2, [r3, #36]	; 0x24
    3c5e:	e009      	b.n	3c74 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c60:	683b      	ldr	r3, [r7, #0]
    3c62:	881b      	ldrh	r3, [r3, #0]
    3c64:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	7a5b      	ldrb	r3, [r3, #9]
    3c6a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c6c:	4313      	orrs	r3, r2
    3c6e:	001a      	movs	r2, r3
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3c74:	2317      	movs	r3, #23
    3c76:	18fc      	adds	r4, r7, r3
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b3a      	ldr	r3, [pc, #232]	; (3d68 <_i2c_master_write_packet+0x170>)
    3c7e:	4798      	blx	r3
    3c80:	0003      	movs	r3, r0
    3c82:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3c84:	2317      	movs	r3, #23
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d107      	bne.n	3c9e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3c8e:	2317      	movs	r3, #23
    3c90:	18fc      	adds	r4, r7, r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	0018      	movs	r0, r3
    3c96:	4b35      	ldr	r3, [pc, #212]	; (3d6c <_i2c_master_write_packet+0x174>)
    3c98:	4798      	blx	r3
    3c9a:	0003      	movs	r3, r0
    3c9c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3c9e:	2317      	movs	r3, #23
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d152      	bne.n	3d4e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3ca8:	2312      	movs	r3, #18
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3cb0:	e033      	b.n	3d1a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	8b5b      	ldrh	r3, [r3, #26]
    3cb6:	b29b      	uxth	r3, r3
    3cb8:	001a      	movs	r2, r3
    3cba:	2320      	movs	r3, #32
    3cbc:	4013      	ands	r3, r2
    3cbe:	d101      	bne.n	3cc4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3cc0:	2341      	movs	r3, #65	; 0x41
    3cc2:	e047      	b.n	3d54 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b24      	ldr	r3, [pc, #144]	; (3d5c <_i2c_master_write_packet+0x164>)
    3cca:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	685a      	ldr	r2, [r3, #4]
    3cd0:	2312      	movs	r3, #18
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	881b      	ldrh	r3, [r3, #0]
    3cd6:	2112      	movs	r1, #18
    3cd8:	1879      	adds	r1, r7, r1
    3cda:	1c58      	adds	r0, r3, #1
    3cdc:	8008      	strh	r0, [r1, #0]
    3cde:	18d3      	adds	r3, r2, r3
    3ce0:	7819      	ldrb	r1, [r3, #0]
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	2228      	movs	r2, #40	; 0x28
    3ce6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3ce8:	2317      	movs	r3, #23
    3cea:	18fc      	adds	r4, r7, r3
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b1d      	ldr	r3, [pc, #116]	; (3d68 <_i2c_master_write_packet+0x170>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3cf8:	2317      	movs	r3, #23
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d115      	bne.n	3d2e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	8b5b      	ldrh	r3, [r3, #26]
    3d06:	b29b      	uxth	r3, r3
    3d08:	001a      	movs	r2, r3
    3d0a:	2304      	movs	r3, #4
    3d0c:	4013      	ands	r3, r2
    3d0e:	d004      	beq.n	3d1a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3d10:	2317      	movs	r3, #23
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	221e      	movs	r2, #30
    3d16:	701a      	strb	r2, [r3, #0]
				break;
    3d18:	e00a      	b.n	3d30 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3d1a:	2314      	movs	r3, #20
    3d1c:	18fb      	adds	r3, r7, r3
    3d1e:	881b      	ldrh	r3, [r3, #0]
    3d20:	2214      	movs	r2, #20
    3d22:	18ba      	adds	r2, r7, r2
    3d24:	1e59      	subs	r1, r3, #1
    3d26:	8011      	strh	r1, [r2, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d1c2      	bne.n	3cb2 <_i2c_master_write_packet+0xba>
    3d2c:	e000      	b.n	3d30 <_i2c_master_write_packet+0x138>
				break;
    3d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	7a9b      	ldrb	r3, [r3, #10]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d00a      	beq.n	3d4e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <_i2c_master_write_packet+0x164>)
    3d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	685b      	ldr	r3, [r3, #4]
    3d44:	22c0      	movs	r2, #192	; 0xc0
    3d46:	0292      	lsls	r2, r2, #10
    3d48:	431a      	orrs	r2, r3
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3d4e:	2317      	movs	r3, #23
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	781b      	ldrb	r3, [r3, #0]
}
    3d54:	0018      	movs	r0, r3
    3d56:	46bd      	mov	sp, r7
    3d58:	b007      	add	sp, #28
    3d5a:	bd90      	pop	{r4, r7, pc}
    3d5c:	000032e9 	.word	0x000032e9
    3d60:	000038f1 	.word	0x000038f1
    3d64:	fffbffff 	.word	0xfffbffff
    3d68:	00003893 	.word	0x00003893
    3d6c:	00003835 	.word	0x00003835

00003d70 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    3d78:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	8b9b      	ldrh	r3, [r3, #28]
    3d7e:	b29b      	uxth	r3, r3
    3d80:	2b00      	cmp	r3, #0
    3d82:	d001      	beq.n	3d88 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3d84:	2305      	movs	r3, #5
    3d86:	e00c      	b.n	3da2 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2201      	movs	r2, #1
    3d8c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2201      	movs	r2, #1
    3d92:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0011      	movs	r1, r2
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b03      	ldr	r3, [pc, #12]	; (3dac <i2c_master_write_packet_wait+0x3c>)
    3d9e:	4798      	blx	r3
    3da0:	0003      	movs	r3, r0
}
    3da2:	0018      	movs	r0, r3
    3da4:	46bd      	mov	sp, r7
    3da6:	b002      	add	sp, #8
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003bf9 	.word	0x00003bf9

00003db0 <i2c_master_is_syncing>:
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	69db      	ldr	r3, [r3, #28]
    3dc2:	2207      	movs	r2, #7
    3dc4:	4013      	ands	r3, r2
    3dc6:	1e5a      	subs	r2, r3, #1
    3dc8:	4193      	sbcs	r3, r2
    3dca:	b2db      	uxtb	r3, r3
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b004      	add	sp, #16
    3dd2:	bd80      	pop	{r7, pc}

00003dd4 <_i2c_master_wait_for_sync>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3ddc:	46c0      	nop			; (mov r8, r8)
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	0018      	movs	r0, r3
    3de2:	4b04      	ldr	r3, [pc, #16]	; (3df4 <_i2c_master_wait_for_sync+0x20>)
    3de4:	4798      	blx	r3
    3de6:	1e03      	subs	r3, r0, #0
    3de8:	d1f9      	bne.n	3dde <_i2c_master_wait_for_sync+0xa>
}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46bd      	mov	sp, r7
    3dee:	b002      	add	sp, #8
    3df0:	bd80      	pop	{r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00003db1 	.word	0x00003db1

00003df8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b084      	sub	sp, #16
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	011b      	lsls	r3, r3, #4
    3e0c:	0fdb      	lsrs	r3, r3, #31
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	001a      	movs	r2, r3
    3e12:	230b      	movs	r3, #11
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	1e51      	subs	r1, r2, #1
    3e18:	418a      	sbcs	r2, r1
    3e1a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	8b52      	ldrh	r2, [r2, #26]
    3e24:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	8b9b      	ldrh	r3, [r3, #28]
    3e2a:	b29a      	uxth	r2, r3
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2108      	movs	r1, #8
    3e32:	1879      	adds	r1, r7, r1
    3e34:	8809      	ldrh	r1, [r1, #0]
    3e36:	1a8a      	subs	r2, r1, r2
    3e38:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	8b9b      	ldrh	r3, [r3, #28]
    3e3e:	b29b      	uxth	r3, r3
    3e40:	3b01      	subs	r3, #1
    3e42:	b29a      	uxth	r2, r3
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3e48:	230b      	movs	r3, #11
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d010      	beq.n	3e74 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	7adb      	ldrb	r3, [r3, #11]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d01c      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	8b9b      	ldrh	r3, [r3, #28]
    3e5e:	b29b      	uxth	r3, r3
    3e60:	2b01      	cmp	r3, #1
    3e62:	d117      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	685b      	ldr	r3, [r3, #4]
    3e68:	2280      	movs	r2, #128	; 0x80
    3e6a:	02d2      	lsls	r2, r2, #11
    3e6c:	431a      	orrs	r2, r3
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	605a      	str	r2, [r3, #4]
    3e72:	e00f      	b.n	3e94 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	7adb      	ldrb	r3, [r3, #11]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d00b      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	8b9b      	ldrh	r3, [r3, #28]
    3e80:	b29b      	uxth	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d106      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	685b      	ldr	r3, [r3, #4]
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	02d2      	lsls	r2, r2, #11
    3e8e:	431a      	orrs	r2, r3
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	8b9b      	ldrh	r3, [r3, #28]
    3e98:	b29b      	uxth	r3, r3
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d10e      	bne.n	3ebc <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	7a9b      	ldrb	r3, [r3, #10]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d00a      	beq.n	3ebc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <_i2c_master_read+0xec>)
    3eac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	22c0      	movs	r2, #192	; 0xc0
    3eb4:	0292      	lsls	r2, r2, #10
    3eb6:	431a      	orrs	r2, r3
    3eb8:	68fb      	ldr	r3, [r7, #12]
    3eba:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <_i2c_master_read+0xec>)
    3ec2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	6a1a      	ldr	r2, [r3, #32]
    3ec8:	2308      	movs	r3, #8
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	881b      	ldrh	r3, [r3, #0]
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	68fa      	ldr	r2, [r7, #12]
    3ed2:	2128      	movs	r1, #40	; 0x28
    3ed4:	5c52      	ldrb	r2, [r2, r1]
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	701a      	strb	r2, [r3, #0]
}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	00003dd5 	.word	0x00003dd5

00003ee8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	8b5b      	ldrh	r3, [r3, #26]
    3efa:	b29b      	uxth	r3, r3
    3efc:	001a      	movs	r2, r3
    3efe:	2304      	movs	r3, #4
    3f00:	4013      	ands	r3, r2
    3f02:	d004      	beq.n	3f0e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2225      	movs	r2, #37	; 0x25
    3f08:	211e      	movs	r1, #30
    3f0a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3f0c:	e024      	b.n	3f58 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3f0e:	230a      	movs	r3, #10
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	687a      	ldr	r2, [r7, #4]
    3f14:	8b52      	ldrh	r2, [r2, #26]
    3f16:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	8b9b      	ldrh	r3, [r3, #28]
    3f1c:	b29a      	uxth	r2, r3
    3f1e:	230a      	movs	r3, #10
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	210a      	movs	r1, #10
    3f24:	1879      	adds	r1, r7, r1
    3f26:	8809      	ldrh	r1, [r1, #0]
    3f28:	1a8a      	subs	r2, r1, r2
    3f2a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	8b9b      	ldrh	r3, [r3, #28]
    3f30:	b29b      	uxth	r3, r3
    3f32:	3b01      	subs	r3, #1
    3f34:	b29a      	uxth	r2, r3
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <_i2c_master_write+0x78>)
    3f40:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	6a1a      	ldr	r2, [r3, #32]
    3f46:	230a      	movs	r3, #10
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	18d3      	adds	r3, r2, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b2d9      	uxtb	r1, r3
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	2228      	movs	r2, #40	; 0x28
    3f56:	5499      	strb	r1, [r3, r2]
}
    3f58:	46bd      	mov	sp, r7
    3f5a:	b004      	add	sp, #16
    3f5c:	bd80      	pop	{r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	00003dd5 	.word	0x00003dd5

00003f64 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	7e1b      	ldrb	r3, [r3, #24]
    3f76:	b2db      	uxtb	r3, r3
    3f78:	001a      	movs	r2, r3
    3f7a:	2301      	movs	r3, #1
    3f7c:	4013      	ands	r3, r2
    3f7e:	d02b      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	2201      	movs	r2, #1
    3f84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	8b5b      	ldrh	r3, [r3, #26]
    3f8a:	b29b      	uxth	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2302      	movs	r3, #2
    3f90:	4013      	ands	r3, r2
    3f92:	d004      	beq.n	3f9e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	2225      	movs	r2, #37	; 0x25
    3f98:	2141      	movs	r1, #65	; 0x41
    3f9a:	5499      	strb	r1, [r3, r2]
    3f9c:	e01c      	b.n	3fd8 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	8b5b      	ldrh	r3, [r3, #26]
    3fa2:	b29b      	uxth	r3, r3
    3fa4:	001a      	movs	r2, r3
    3fa6:	2304      	movs	r3, #4
    3fa8:	4013      	ands	r3, r2
    3faa:	d015      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2225      	movs	r2, #37	; 0x25
    3fb0:	2118      	movs	r1, #24
    3fb2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2200      	movs	r2, #0
    3fb8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	7a9b      	ldrb	r3, [r3, #10]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d00a      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b13      	ldr	r3, [pc, #76]	; (4014 <_i2c_master_async_address_response+0xb0>)
    3fc8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	685b      	ldr	r3, [r3, #4]
    3fce:	22c0      	movs	r2, #192	; 0xc0
    3fd0:	0292      	lsls	r2, r2, #10
    3fd2:	431a      	orrs	r2, r3
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	8b9b      	ldrh	r3, [r3, #28]
    3fdc:	b29a      	uxth	r2, r3
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	2225      	movs	r2, #37	; 0x25
    3fe6:	5c9b      	ldrb	r3, [r3, r2]
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b05      	cmp	r3, #5
    3fec:	d10e      	bne.n	400c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2224      	movs	r2, #36	; 0x24
    3ff2:	5c9b      	ldrb	r3, [r3, r2]
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d104      	bne.n	4004 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	0018      	movs	r0, r3
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <_i2c_master_async_address_response+0xb4>)
    4000:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    4002:	e003      	b.n	400c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	0018      	movs	r0, r3
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <_i2c_master_async_address_response+0xb8>)
    400a:	4798      	blx	r3
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b004      	add	sp, #16
    4012:	bd80      	pop	{r7, pc}
    4014:	00003dd5 	.word	0x00003dd5
    4018:	00003ee9 	.word	0x00003ee9
    401c:	00003df9 	.word	0x00003df9

00004020 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	1dfb      	adds	r3, r7, #7
    402a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    4030:	4b93      	ldr	r3, [pc, #588]	; (4280 <_i2c_master_interrupt_handler+0x260>)
    4032:	0092      	lsls	r2, r2, #2
    4034:	58d3      	ldr	r3, [r2, r3]
    4036:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4038:	697b      	ldr	r3, [r7, #20]
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    403e:	693b      	ldr	r3, [r7, #16]
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	011b      	lsls	r3, r3, #4
    4044:	0fdb      	lsrs	r3, r3, #31
    4046:	b2db      	uxtb	r3, r3
    4048:	001a      	movs	r2, r3
    404a:	230f      	movs	r3, #15
    404c:	18fb      	adds	r3, r7, r3
    404e:	1e51      	subs	r1, r2, #1
    4050:	418a      	sbcs	r2, r1
    4052:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4054:	230e      	movs	r3, #14
    4056:	18fb      	adds	r3, r7, r3
    4058:	697a      	ldr	r2, [r7, #20]
    405a:	7e52      	ldrb	r2, [r2, #25]
    405c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	7e1b      	ldrb	r3, [r3, #24]
    4062:	b2da      	uxtb	r2, r3
    4064:	230e      	movs	r3, #14
    4066:	18fb      	adds	r3, r7, r3
    4068:	210e      	movs	r1, #14
    406a:	1879      	adds	r1, r7, r1
    406c:	7809      	ldrb	r1, [r1, #0]
    406e:	400a      	ands	r2, r1
    4070:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4072:	697b      	ldr	r3, [r7, #20]
    4074:	8b5b      	ldrh	r3, [r3, #26]
    4076:	b29b      	uxth	r3, r3
    4078:	2b00      	cmp	r3, #0
    407a:	d109      	bne.n	4090 <_i2c_master_interrupt_handler+0x70>
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	8b9b      	ldrh	r3, [r3, #28]
    4080:	b29b      	uxth	r3, r3
    4082:	2b00      	cmp	r3, #0
    4084:	d004      	beq.n	4090 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    4086:	697b      	ldr	r3, [r7, #20]
    4088:	0018      	movs	r0, r3
    408a:	4b7e      	ldr	r3, [pc, #504]	; (4284 <_i2c_master_interrupt_handler+0x264>)
    408c:	4798      	blx	r3
    408e:	e070      	b.n	4172 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4090:	697b      	ldr	r3, [r7, #20]
    4092:	8b5b      	ldrh	r3, [r3, #26]
    4094:	b29b      	uxth	r3, r3
    4096:	2b00      	cmp	r3, #0
    4098:	d039      	beq.n	410e <_i2c_master_interrupt_handler+0xee>
    409a:	697b      	ldr	r3, [r7, #20]
    409c:	8b9b      	ldrh	r3, [r3, #28]
    409e:	b29b      	uxth	r3, r3
    40a0:	2b00      	cmp	r3, #0
    40a2:	d134      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	2225      	movs	r2, #37	; 0x25
    40a8:	5c9b      	ldrb	r3, [r3, r2]
    40aa:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    40ac:	2b05      	cmp	r3, #5
    40ae:	d12e      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	2224      	movs	r2, #36	; 0x24
    40b4:	5c9b      	ldrb	r3, [r3, r2]
    40b6:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    40b8:	2b00      	cmp	r3, #0
    40ba:	d128      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    40bc:	693b      	ldr	r3, [r7, #16]
    40be:	2203      	movs	r2, #3
    40c0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    40c2:	697b      	ldr	r3, [r7, #20]
    40c4:	2200      	movs	r2, #0
    40c6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    40c8:	697b      	ldr	r3, [r7, #20]
    40ca:	2225      	movs	r2, #37	; 0x25
    40cc:	2100      	movs	r1, #0
    40ce:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    40d0:	697b      	ldr	r3, [r7, #20]
    40d2:	7a9b      	ldrb	r3, [r3, #10]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d00b      	beq.n	40f0 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	0018      	movs	r0, r3
    40dc:	4b6a      	ldr	r3, [pc, #424]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    40de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    40e0:	693b      	ldr	r3, [r7, #16]
    40e2:	685b      	ldr	r3, [r3, #4]
    40e4:	22c0      	movs	r2, #192	; 0xc0
    40e6:	0292      	lsls	r2, r2, #10
    40e8:	431a      	orrs	r2, r3
    40ea:	693b      	ldr	r3, [r7, #16]
    40ec:	605a      	str	r2, [r3, #4]
    40ee:	e002      	b.n	40f6 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    40f0:	693b      	ldr	r3, [r7, #16]
    40f2:	2201      	movs	r2, #1
    40f4:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    40f6:	230e      	movs	r3, #14
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2201      	movs	r2, #1
    40fe:	4013      	ands	r3, r2
    4100:	d037      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4102:	697b      	ldr	r3, [r7, #20]
    4104:	68db      	ldr	r3, [r3, #12]
    4106:	697a      	ldr	r2, [r7, #20]
    4108:	0010      	movs	r0, r2
    410a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    410c:	e031      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    410e:	697b      	ldr	r3, [r7, #20]
    4110:	8b5b      	ldrh	r3, [r3, #26]
    4112:	b29b      	uxth	r3, r3
    4114:	2b00      	cmp	r3, #0
    4116:	d02c      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
    4118:	697b      	ldr	r3, [r7, #20]
    411a:	8b9b      	ldrh	r3, [r3, #28]
    411c:	b29b      	uxth	r3, r3
    411e:	2b00      	cmp	r3, #0
    4120:	d027      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4122:	693b      	ldr	r3, [r7, #16]
    4124:	8b5b      	ldrh	r3, [r3, #26]
    4126:	b29b      	uxth	r3, r3
    4128:	001a      	movs	r2, r3
    412a:	2320      	movs	r3, #32
    412c:	4013      	ands	r3, r2
    412e:	d111      	bne.n	4154 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2201      	movs	r2, #1
    4138:	4053      	eors	r3, r2
    413a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    413c:	2b00      	cmp	r3, #0
    413e:	d104      	bne.n	414a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4140:	697b      	ldr	r3, [r7, #20]
    4142:	8b9b      	ldrh	r3, [r3, #28]
    4144:	b29b      	uxth	r3, r3
    4146:	2b01      	cmp	r3, #1
    4148:	d004      	beq.n	4154 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    414a:	697b      	ldr	r3, [r7, #20]
    414c:	2225      	movs	r2, #37	; 0x25
    414e:	2141      	movs	r1, #65	; 0x41
    4150:	5499      	strb	r1, [r3, r2]
    4152:	e00e      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4154:	697b      	ldr	r3, [r7, #20]
    4156:	2224      	movs	r2, #36	; 0x24
    4158:	5c9b      	ldrb	r3, [r3, r2]
    415a:	b2db      	uxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	d104      	bne.n	416a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	0018      	movs	r0, r3
    4164:	4b49      	ldr	r3, [pc, #292]	; (428c <_i2c_master_interrupt_handler+0x26c>)
    4166:	4798      	blx	r3
    4168:	e003      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	0018      	movs	r0, r3
    416e:	4b48      	ldr	r3, [pc, #288]	; (4290 <_i2c_master_interrupt_handler+0x270>)
    4170:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4172:	697b      	ldr	r3, [r7, #20]
    4174:	8b5b      	ldrh	r3, [r3, #26]
    4176:	b29b      	uxth	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d047      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
    417c:	697b      	ldr	r3, [r7, #20]
    417e:	8b9b      	ldrh	r3, [r3, #28]
    4180:	b29b      	uxth	r3, r3
    4182:	2b00      	cmp	r3, #0
    4184:	d142      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    4186:	697b      	ldr	r3, [r7, #20]
    4188:	2225      	movs	r2, #37	; 0x25
    418a:	5c9b      	ldrb	r3, [r3, r2]
    418c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    418e:	2b05      	cmp	r3, #5
    4190:	d13c      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4192:	697b      	ldr	r3, [r7, #20]
    4194:	2224      	movs	r2, #36	; 0x24
    4196:	5c9b      	ldrb	r3, [r3, r2]
    4198:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    419a:	2b01      	cmp	r3, #1
    419c:	d136      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    419e:	693b      	ldr	r3, [r7, #16]
    41a0:	7e1b      	ldrb	r3, [r3, #24]
    41a2:	b2db      	uxtb	r3, r3
    41a4:	001a      	movs	r2, r3
    41a6:	2302      	movs	r3, #2
    41a8:	4013      	ands	r3, r2
    41aa:	d002      	beq.n	41b2 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    41ac:	693b      	ldr	r3, [r7, #16]
    41ae:	2202      	movs	r2, #2
    41b0:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	2203      	movs	r2, #3
    41b6:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	2200      	movs	r2, #0
    41bc:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    41be:	697b      	ldr	r3, [r7, #20]
    41c0:	2225      	movs	r2, #37	; 0x25
    41c2:	2100      	movs	r1, #0
    41c4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    41c6:	230e      	movs	r3, #14
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2202      	movs	r2, #2
    41ce:	4013      	ands	r3, r2
    41d0:	d00b      	beq.n	41ea <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    41d2:	697b      	ldr	r3, [r7, #20]
    41d4:	2224      	movs	r2, #36	; 0x24
    41d6:	5c9b      	ldrb	r3, [r3, r2]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b01      	cmp	r3, #1
    41dc:	d105      	bne.n	41ea <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    41de:	697b      	ldr	r3, [r7, #20]
    41e0:	691b      	ldr	r3, [r3, #16]
    41e2:	697a      	ldr	r2, [r7, #20]
    41e4:	0010      	movs	r0, r2
    41e6:	4798      	blx	r3
    41e8:	e010      	b.n	420c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    41ea:	230e      	movs	r3, #14
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2201      	movs	r2, #1
    41f2:	4013      	ands	r3, r2
    41f4:	d00a      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    41f6:	697b      	ldr	r3, [r7, #20]
    41f8:	2224      	movs	r2, #36	; 0x24
    41fa:	5c9b      	ldrb	r3, [r3, r2]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	2b00      	cmp	r3, #0
    4200:	d104      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4202:	697b      	ldr	r3, [r7, #20]
    4204:	68db      	ldr	r3, [r3, #12]
    4206:	697a      	ldr	r2, [r7, #20]
    4208:	0010      	movs	r0, r2
    420a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    420c:	697b      	ldr	r3, [r7, #20]
    420e:	2225      	movs	r2, #37	; 0x25
    4210:	5c9b      	ldrb	r3, [r3, r2]
    4212:	b2db      	uxtb	r3, r3
    4214:	2b05      	cmp	r3, #5
    4216:	d02e      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	2225      	movs	r2, #37	; 0x25
    421c:	5c9b      	ldrb	r3, [r3, r2]
    421e:	b2db      	uxtb	r3, r3
    4220:	2b00      	cmp	r3, #0
    4222:	d028      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4224:	693b      	ldr	r3, [r7, #16]
    4226:	2203      	movs	r2, #3
    4228:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    422a:	697b      	ldr	r3, [r7, #20]
    422c:	2200      	movs	r2, #0
    422e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    4230:	697b      	ldr	r3, [r7, #20]
    4232:	2200      	movs	r2, #0
    4234:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	2225      	movs	r2, #37	; 0x25
    423a:	5c9b      	ldrb	r3, [r3, r2]
    423c:	b2db      	uxtb	r3, r3
    423e:	2b41      	cmp	r3, #65	; 0x41
    4240:	d00e      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4242:	697b      	ldr	r3, [r7, #20]
    4244:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4246:	2b00      	cmp	r3, #0
    4248:	d00a      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	0018      	movs	r0, r3
    424e:	4b0e      	ldr	r3, [pc, #56]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    4250:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	685b      	ldr	r3, [r3, #4]
    4256:	22e0      	movs	r2, #224	; 0xe0
    4258:	02d2      	lsls	r2, r2, #11
    425a:	431a      	orrs	r2, r3
    425c:	693b      	ldr	r3, [r7, #16]
    425e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4260:	230e      	movs	r3, #14
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2204      	movs	r2, #4
    4268:	4013      	ands	r3, r2
    426a:	d004      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    426c:	697b      	ldr	r3, [r7, #20]
    426e:	695b      	ldr	r3, [r3, #20]
    4270:	697a      	ldr	r2, [r7, #20]
    4272:	0010      	movs	r0, r2
    4274:	4798      	blx	r3
		}
	}
}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	46bd      	mov	sp, r7
    427a:	b006      	add	sp, #24
    427c:	bd80      	pop	{r7, pc}
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	20000468 	.word	0x20000468
    4284:	00003f65 	.word	0x00003f65
    4288:	00003dd5 	.word	0x00003dd5
    428c:	00003ee9 	.word	0x00003ee9
    4290:	00003df9 	.word	0x00003df9

00004294 <system_gclk_chan_get_config_defaults>:
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	2200      	movs	r2, #0
    42a0:	701a      	strb	r2, [r3, #0]
}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	46bd      	mov	sp, r7
    42a6:	b002      	add	sp, #8
    42a8:	bd80      	pop	{r7, pc}
	...

000042ac <system_apb_clock_set_mask>:
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b082      	sub	sp, #8
    42b0:	af00      	add	r7, sp, #0
    42b2:	0002      	movs	r2, r0
    42b4:	6039      	str	r1, [r7, #0]
    42b6:	1dfb      	adds	r3, r7, #7
    42b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42ba:	1dfb      	adds	r3, r7, #7
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	2b01      	cmp	r3, #1
    42c0:	d00a      	beq.n	42d8 <system_apb_clock_set_mask+0x2c>
    42c2:	2b02      	cmp	r3, #2
    42c4:	d00f      	beq.n	42e6 <system_apb_clock_set_mask+0x3a>
    42c6:	2b00      	cmp	r3, #0
    42c8:	d114      	bne.n	42f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    42ca:	4b0e      	ldr	r3, [pc, #56]	; (4304 <system_apb_clock_set_mask+0x58>)
    42cc:	4a0d      	ldr	r2, [pc, #52]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ce:	6991      	ldr	r1, [r2, #24]
    42d0:	683a      	ldr	r2, [r7, #0]
    42d2:	430a      	orrs	r2, r1
    42d4:	619a      	str	r2, [r3, #24]
			break;
    42d6:	e00f      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    42d8:	4b0a      	ldr	r3, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42da:	4a0a      	ldr	r2, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42dc:	69d1      	ldr	r1, [r2, #28]
    42de:	683a      	ldr	r2, [r7, #0]
    42e0:	430a      	orrs	r2, r1
    42e2:	61da      	str	r2, [r3, #28]
			break;
    42e4:	e008      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <system_apb_clock_set_mask+0x58>)
    42e8:	4a06      	ldr	r2, [pc, #24]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ea:	6a11      	ldr	r1, [r2, #32]
    42ec:	683a      	ldr	r2, [r7, #0]
    42ee:	430a      	orrs	r2, r1
    42f0:	621a      	str	r2, [r3, #32]
			break;
    42f2:	e001      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    42f4:	2317      	movs	r3, #23
    42f6:	e000      	b.n	42fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    42f8:	2300      	movs	r3, #0
}
    42fa:	0018      	movs	r0, r3
    42fc:	46bd      	mov	sp, r7
    42fe:	b002      	add	sp, #8
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	40000400 	.word	0x40000400

00004308 <system_pinmux_get_config_defaults>:
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	2200      	movs	r2, #0
    431a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	2201      	movs	r2, #1
    4320:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	2200      	movs	r2, #0
    4326:	70da      	strb	r2, [r3, #3]
}
    4328:	46c0      	nop			; (mov r8, r8)
    432a:	46bd      	mov	sp, r7
    432c:	b002      	add	sp, #8
    432e:	bd80      	pop	{r7, pc}

00004330 <system_is_debugger_present>:
{
    4330:	b580      	push	{r7, lr}
    4332:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <system_is_debugger_present+0x1c>)
    4336:	789b      	ldrb	r3, [r3, #2]
    4338:	b2db      	uxtb	r3, r3
    433a:	001a      	movs	r2, r3
    433c:	2302      	movs	r3, #2
    433e:	4013      	ands	r3, r2
    4340:	1e5a      	subs	r2, r3, #1
    4342:	4193      	sbcs	r3, r2
    4344:	b2db      	uxtb	r3, r3
}
    4346:	0018      	movs	r0, r3
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	41002000 	.word	0x41002000

00004350 <_i2c_slave_set_config>:
 *                                         previously set
 */
static enum status_code _i2c_slave_set_config(
		struct i2c_slave_module *const module,
		const struct i2c_slave_config *const config)
{
    4350:	b580      	push	{r7, lr}
    4352:	b088      	sub	sp, #32
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	613b      	str	r3, [r7, #16]
	Sercom *const sercom_hw = module->hw;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	60fb      	str	r3, [r7, #12]

	module->buffer_timeout = config->buffer_timeout;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	891a      	ldrh	r2, [r3, #8]
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	80da      	strh	r2, [r3, #6]
	module->ten_bit_address = config->ten_bit_address;
    436e:	683b      	ldr	r3, [r7, #0]
    4370:	7c1a      	ldrb	r2, [r3, #16]
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	721a      	strb	r2, [r3, #8]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4376:	2308      	movs	r3, #8
    4378:	18fb      	adds	r3, r7, r3
    437a:	0018      	movs	r0, r3
    437c:	4b49      	ldr	r3, [pc, #292]	; (44a4 <_i2c_slave_set_config+0x154>)
    437e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	69db      	ldr	r3, [r3, #28]
    4384:	61bb      	str	r3, [r7, #24]
	uint32_t pad1 = config->pinmux_pad1;
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	6a1b      	ldr	r3, [r3, #32]
    438a:	617b      	str	r3, [r7, #20]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    438c:	69bb      	ldr	r3, [r7, #24]
    438e:	2b00      	cmp	r3, #0
    4390:	d106      	bne.n	43a0 <_i2c_slave_set_config+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2100      	movs	r1, #0
    4396:	0018      	movs	r0, r3
    4398:	4b43      	ldr	r3, [pc, #268]	; (44a8 <_i2c_slave_set_config+0x158>)
    439a:	4798      	blx	r3
    439c:	0003      	movs	r3, r0
    439e:	61bb      	str	r3, [r7, #24]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    43a0:	69bb      	ldr	r3, [r7, #24]
    43a2:	b2da      	uxtb	r2, r3
    43a4:	2308      	movs	r3, #8
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43aa:	2308      	movs	r3, #8
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2202      	movs	r2, #2
    43b0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    43b2:	69bb      	ldr	r3, [r7, #24]
    43b4:	0c1b      	lsrs	r3, r3, #16
    43b6:	b2db      	uxtb	r3, r3
    43b8:	2208      	movs	r2, #8
    43ba:	18ba      	adds	r2, r7, r2
    43bc:	0011      	movs	r1, r2
    43be:	0018      	movs	r0, r3
    43c0:	4b3a      	ldr	r3, [pc, #232]	; (44ac <_i2c_slave_set_config+0x15c>)
    43c2:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    43c4:	697b      	ldr	r3, [r7, #20]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d106      	bne.n	43d8 <_i2c_slave_set_config+0x88>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2101      	movs	r1, #1
    43ce:	0018      	movs	r0, r3
    43d0:	4b35      	ldr	r3, [pc, #212]	; (44a8 <_i2c_slave_set_config+0x158>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	617b      	str	r3, [r7, #20]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    43d8:	697b      	ldr	r3, [r7, #20]
    43da:	b2da      	uxtb	r2, r3
    43dc:	2308      	movs	r3, #8
    43de:	18fb      	adds	r3, r7, r3
    43e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43e2:	2308      	movs	r3, #8
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2202      	movs	r2, #2
    43e8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    43ea:	697b      	ldr	r3, [r7, #20]
    43ec:	0c1b      	lsrs	r3, r3, #16
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2208      	movs	r2, #8
    43f2:	18ba      	adds	r2, r7, r2
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2c      	ldr	r3, [pc, #176]	; (44ac <_i2c_slave_set_config+0x15c>)
    43fa:	4798      	blx	r3

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
    43fc:	683b      	ldr	r3, [r7, #0]
    43fe:	7e9b      	ldrb	r3, [r3, #26]
    4400:	2b00      	cmp	r3, #0
    4402:	d103      	bne.n	440c <_i2c_slave_set_config+0xbc>
    4404:	4b2a      	ldr	r3, [pc, #168]	; (44b0 <_i2c_slave_set_config+0x160>)
    4406:	4798      	blx	r3
    4408:	1e03      	subs	r3, r0, #0
    440a:	d002      	beq.n	4412 <_i2c_slave_set_config+0xc2>
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
    440c:	2380      	movs	r3, #128	; 0x80
    440e:	61fb      	str	r3, [r7, #28]
    4410:	e001      	b.n	4416 <_i2c_slave_set_config+0xc6>
	} else {
		tmp_ctrla = 0;
    4412:	2300      	movs	r3, #0
    4414:	61fb      	str	r3, [r7, #28]
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	2225      	movs	r2, #37	; 0x25
    441a:	5c9b      	ldrb	r3, [r3, r2]
    441c:	2b00      	cmp	r3, #0
    441e:	d105      	bne.n	442c <_i2c_slave_set_config+0xdc>
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	695a      	ldr	r2, [r3, #20]
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	049b      	lsls	r3, r3, #18
    4428:	429a      	cmp	r2, r3
    442a:	d104      	bne.n	4436 <_i2c_slave_set_config+0xe6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    442c:	69fb      	ldr	r3, [r7, #28]
    442e:	2280      	movs	r2, #128	; 0x80
    4430:	0512      	lsls	r2, r2, #20
    4432:	4313      	orrs	r3, r2
    4434:	61fb      	str	r3, [r7, #28]
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	685a      	ldr	r2, [r3, #4]
			config->transfer_speed |
    443a:	683b      	ldr	r3, [r7, #0]
    443c:	695b      	ldr	r3, [r3, #20]
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    443e:	4313      	orrs	r3, r2
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	2124      	movs	r1, #36	; 0x24
    4444:	5c52      	ldrb	r2, [r2, r1]
    4446:	0792      	lsls	r2, r2, #30
			config->transfer_speed |
    4448:	4313      	orrs	r3, r2
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
    444a:	683a      	ldr	r2, [r7, #0]
    444c:	2126      	movs	r1, #38	; 0x26
    444e:	5c52      	ldrb	r2, [r2, r1]
    4450:	05d2      	lsls	r2, r2, #23
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4452:	4313      	orrs	r3, r2
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4454:	69fa      	ldr	r2, [r7, #28]
    4456:	4313      	orrs	r3, r2
    4458:	61fb      	str	r3, [r7, #28]

	i2c_hw->CTRLA.reg |= tmp_ctrla;
    445a:	693b      	ldr	r3, [r7, #16]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	69fb      	ldr	r3, [r7, #28]
    4460:	431a      	orrs	r2, r3
    4462:	693b      	ldr	r3, [r7, #16]
    4464:	601a      	str	r2, [r3, #0]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	895b      	ldrh	r3, [r3, #10]
    446a:	2280      	movs	r2, #128	; 0x80
    446c:	0052      	lsls	r2, r2, #1
    446e:	4313      	orrs	r3, r2
    4470:	b29b      	uxth	r3, r3
    4472:	001a      	movs	r2, r3
    4474:	693b      	ldr	r3, [r7, #16]
    4476:	605a      	str	r2, [r3, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	899b      	ldrh	r3, [r3, #12]
    447c:	005a      	lsls	r2, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	89db      	ldrh	r3, [r3, #14]
    4482:	045b      	lsls	r3, r3, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4484:	431a      	orrs	r2, r3
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	7c1b      	ldrb	r3, [r3, #16]
    448a:	03db      	lsls	r3, r3, #15
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    448c:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
    448e:	683a      	ldr	r2, [r7, #0]
    4490:	7c52      	ldrb	r2, [r2, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4492:	4313      	orrs	r3, r2
    4494:	001a      	movs	r2, r3
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4496:	693b      	ldr	r3, [r7, #16]
    4498:	625a      	str	r2, [r3, #36]	; 0x24

	return STATUS_OK;
    449a:	2300      	movs	r3, #0
}
    449c:	0018      	movs	r0, r3
    449e:	46bd      	mov	sp, r7
    44a0:	b008      	add	sp, #32
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00004309 	.word	0x00004309
    44a8:	00006d89 	.word	0x00006d89
    44ac:	00007e1d 	.word	0x00007e1d
    44b0:	00004331 	.word	0x00004331

000044b4 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
    44b4:	b590      	push	{r4, r7, lr}
    44b6:	b08b      	sub	sp, #44	; 0x2c
    44b8:	af00      	add	r7, sp, #0
    44ba:	60f8      	str	r0, [r7, #12]
    44bc:	60b9      	str	r1, [r7, #8]
    44be:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	68ba      	ldr	r2, [r7, #8]
    44c4:	601a      	str	r2, [r3, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
    44cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	2202      	movs	r2, #2
    44d2:	4013      	ands	r3, r2
    44d4:	d001      	beq.n	44da <i2c_slave_init+0x26>
		return STATUS_ERR_DENIED;
    44d6:	231c      	movs	r3, #28
    44d8:	e069      	b.n	45ae <i2c_slave_init+0xfa>
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
    44da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	2201      	movs	r2, #1
    44e0:	4013      	ands	r3, r2
    44e2:	d001      	beq.n	44e8 <i2c_slave_init+0x34>
		return STATUS_BUSY;
    44e4:	2305      	movs	r3, #5
    44e6:	e062      	b.n	45ae <i2c_slave_init+0xfa>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	0018      	movs	r0, r3
    44ee:	4b32      	ldr	r3, [pc, #200]	; (45b8 <i2c_slave_init+0x104>)
    44f0:	4798      	blx	r3
    44f2:	0003      	movs	r3, r0
    44f4:	623b      	str	r3, [r7, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    44f6:	6a3b      	ldr	r3, [r7, #32]
    44f8:	3302      	adds	r3, #2
    44fa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44fc:	6a3b      	ldr	r3, [r7, #32]
    44fe:	3314      	adds	r3, #20
    4500:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4502:	2201      	movs	r2, #1
    4504:	69fb      	ldr	r3, [r7, #28]
    4506:	409a      	lsls	r2, r3
    4508:	0013      	movs	r3, r2
    450a:	0019      	movs	r1, r3
    450c:	2002      	movs	r0, #2
    450e:	4b2b      	ldr	r3, [pc, #172]	; (45bc <i2c_slave_init+0x108>)
    4510:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4512:	2314      	movs	r3, #20
    4514:	18fb      	adds	r3, r7, r3
    4516:	0018      	movs	r0, r3
    4518:	4b29      	ldr	r3, [pc, #164]	; (45c0 <i2c_slave_init+0x10c>)
    451a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	7e5a      	ldrb	r2, [r3, #25]
    4520:	2314      	movs	r3, #20
    4522:	18fb      	adds	r3, r7, r3
    4524:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4526:	69bb      	ldr	r3, [r7, #24]
    4528:	b2db      	uxtb	r3, r3
    452a:	2214      	movs	r2, #20
    452c:	18ba      	adds	r2, r7, r2
    452e:	0011      	movs	r1, r2
    4530:	0018      	movs	r0, r3
    4532:	4b24      	ldr	r3, [pc, #144]	; (45c4 <i2c_slave_init+0x110>)
    4534:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4536:	69bb      	ldr	r3, [r7, #24]
    4538:	b2db      	uxtb	r3, r3
    453a:	0018      	movs	r0, r3
    453c:	4b22      	ldr	r3, [pc, #136]	; (45c8 <i2c_slave_init+0x114>)
    453e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	7e5b      	ldrb	r3, [r3, #25]
    4544:	2100      	movs	r1, #0
    4546:	0018      	movs	r0, r3
    4548:	4b20      	ldr	r3, [pc, #128]	; (45cc <i2c_slave_init+0x118>)
    454a:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	2217      	movs	r2, #23
    4552:	18bc      	adds	r4, r7, r2
    4554:	0018      	movs	r0, r3
    4556:	4b18      	ldr	r3, [pc, #96]	; (45b8 <i2c_slave_init+0x104>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
    455c:	7023      	strb	r3, [r4, #0]

	/* Save software module in interrupt handler */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
    455e:	4a1c      	ldr	r2, [pc, #112]	; (45d0 <i2c_slave_init+0x11c>)
    4560:	2317      	movs	r3, #23
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	0011      	movs	r1, r2
    4568:	0018      	movs	r0, r3
    456a:	4b1a      	ldr	r3, [pc, #104]	; (45d4 <i2c_slave_init+0x120>)
    456c:	4798      	blx	r3

	/* Save software module */
	_sercom_instances[instance_index] = module;
    456e:	2317      	movs	r3, #23
    4570:	18fb      	adds	r3, r7, r3
    4572:	781a      	ldrb	r2, [r3, #0]
    4574:	4b18      	ldr	r3, [pc, #96]	; (45d8 <i2c_slave_init+0x124>)
    4576:	0092      	lsls	r2, r2, #2
    4578:	68f9      	ldr	r1, [r7, #12]
    457a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module */
	module->registered_callback = 0;
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	2224      	movs	r2, #36	; 0x24
    4580:	2100      	movs	r1, #0
    4582:	5499      	strb	r1, [r3, r2]
	module->enabled_callback = 0;
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	2225      	movs	r2, #37	; 0x25
    4588:	2100      	movs	r1, #0
    458a:	5499      	strb	r1, [r3, r2]
	module->buffer_length = 0;
    458c:	68fb      	ldr	r3, [r7, #12]
    458e:	2200      	movs	r2, #0
    4590:	84da      	strh	r2, [r3, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	7e1a      	ldrb	r2, [r3, #24]
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	725a      	strb	r2, [r3, #9]
#endif

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
    459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    459c:	2210      	movs	r2, #16
    459e:	601a      	str	r2, [r3, #0]

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	0011      	movs	r1, r2
    45a6:	0018      	movs	r0, r3
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <i2c_slave_init+0x128>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
}
    45ae:	0018      	movs	r0, r3
    45b0:	46bd      	mov	sp, r7
    45b2:	b00b      	add	sp, #44	; 0x2c
    45b4:	bd90      	pop	{r4, r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00006f45 	.word	0x00006f45
    45bc:	000042ad 	.word	0x000042ad
    45c0:	00004295 	.word	0x00004295
    45c4:	00007b31 	.word	0x00007b31
    45c8:	00007b75 	.word	0x00007b75
    45cc:	00006cfd 	.word	0x00006cfd
    45d0:	000047d5 	.word	0x000047d5
    45d4:	00006fa9 	.word	0x00006fa9
    45d8:	20000468 	.word	0x20000468
    45dc:	00004351 	.word	0x00004351

000045e0 <system_interrupt_enter_critical_section>:
{
    45e0:	b580      	push	{r7, lr}
    45e2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <system_interrupt_enter_critical_section+0x10>)
    45e6:	4798      	blx	r3
}
    45e8:	46c0      	nop			; (mov r8, r8)
    45ea:	46bd      	mov	sp, r7
    45ec:	bd80      	pop	{r7, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	0000717d 	.word	0x0000717d

000045f4 <system_interrupt_leave_critical_section>:
{
    45f4:	b580      	push	{r7, lr}
    45f6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <system_interrupt_leave_critical_section+0x10>)
    45fa:	4798      	blx	r3
}
    45fc:	46c0      	nop			; (mov r8, r8)
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	000071d1 	.word	0x000071d1

00004608 <_i2c_slave_set_ctrlb_ackact>:
 * \param[in] send_ack true send ACK, false send NACK
 */
static inline void _i2c_slave_set_ctrlb_ackact(
		struct i2c_slave_module *const module,
		bool send_ack)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	000a      	movs	r2, r1
    4612:	1cfb      	adds	r3, r7, #3
    4614:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	60fb      	str	r3, [r7, #12]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
    461c:	4b0b      	ldr	r3, [pc, #44]	; (464c <_i2c_slave_set_ctrlb_ackact+0x44>)
    461e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	2200      	movs	r2, #0
    4624:	835a      	strh	r2, [r3, #26]

	if (send_ack == true) {
    4626:	1cfb      	adds	r3, r7, #3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d003      	beq.n	4636 <_i2c_slave_set_ctrlb_ackact+0x2e>
		i2c_hw->CTRLB.reg = 0;
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2200      	movs	r2, #0
    4632:	605a      	str	r2, [r3, #4]
    4634:	e003      	b.n	463e <_i2c_slave_set_ctrlb_ackact+0x36>
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	2280      	movs	r2, #128	; 0x80
    463a:	02d2      	lsls	r2, r2, #11
    463c:	605a      	str	r2, [r3, #4]
	}
	system_interrupt_leave_critical_section();
    463e:	4b04      	ldr	r3, [pc, #16]	; (4650 <_i2c_slave_set_ctrlb_ackact+0x48>)
    4640:	4798      	blx	r3
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
	}
#endif
	return;
    4642:	46c0      	nop			; (mov r8, r8)
}
    4644:	46bd      	mov	sp, r7
    4646:	b004      	add	sp, #16
    4648:	bd80      	pop	{r7, pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	000045e1 	.word	0x000045e1
    4650:	000045f5 	.word	0x000045f5

00004654 <_i2c_slave_set_ctrlb_cmd3>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static inline void _i2c_slave_set_ctrlb_cmd3(
		struct i2c_slave_module *const module)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	60fb      	str	r3, [r7, #12]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	7e1b      	ldrb	r3, [r3, #24]
    4666:	07db      	lsls	r3, r3, #31
    4668:	0fdb      	lsrs	r3, r3, #31
    466a:	b2db      	uxtb	r3, r3
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <_i2c_slave_set_ctrlb_cmd3+0x22>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	2201      	movs	r2, #1
    4674:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	2202      	movs	r2, #2
    467a:	761a      	strb	r2, [r3, #24]
#else
	/* Normal operation */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
#endif
	return;
    467c:	46c0      	nop			; (mov r8, r8)
}
    467e:	46bd      	mov	sp, r7
    4680:	b004      	add	sp, #16
    4682:	bd80      	pop	{r7, pc}

00004684 <_i2c_slave_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_read(
		struct i2c_slave_module *const module)
{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	60fb      	str	r3, [r7, #12]

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4696:	1c59      	adds	r1, r3, #1
    4698:	687a      	ldr	r2, [r7, #4]
    469a:	62d1      	str	r1, [r2, #44]	; 0x2c
    469c:	68fa      	ldr	r2, [r7, #12]
    469e:	2128      	movs	r1, #40	; 0x28
    46a0:	5c52      	ldrb	r2, [r2, r1]
    46a2:	b2d2      	uxtb	r2, r2
    46a4:	701a      	strb	r2, [r3, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46aa:	3b01      	subs	r3, #1
    46ac:	b29a      	uxth	r2, r3
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	46bd      	mov	sp, r7
    46b6:	b004      	add	sp, #16
    46b8:	bd80      	pop	{r7, pc}

000046ba <_i2c_slave_write>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_write(
		struct i2c_slave_module *const module)
{
    46ba:	b580      	push	{r7, lr}
    46bc:	b084      	sub	sp, #16
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	60fb      	str	r3, [r7, #12]

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46cc:	1c59      	adds	r1, r3, #1
    46ce:	687a      	ldr	r2, [r7, #4]
    46d0:	62d1      	str	r1, [r2, #44]	; 0x2c
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2d9      	uxtb	r1, r3
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2228      	movs	r2, #40	; 0x28
    46da:	5499      	strb	r1, [r3, r2]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46e0:	3b01      	subs	r3, #1
    46e2:	b29a      	uxth	r2, r3
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b004      	add	sp, #16
    46ee:	bd80      	pop	{r7, pc}

000046f0 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b084      	sub	sp, #16
    46f4:	af00      	add	r7, sp, #0
    46f6:	60f8      	str	r0, [r7, #12]
    46f8:	60b9      	str	r1, [r7, #8]
    46fa:	1dfb      	adds	r3, r7, #7
    46fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
    46fe:	1dfb      	adds	r3, r7, #7
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	68fa      	ldr	r2, [r7, #12]
    4704:	3302      	adds	r3, #2
    4706:	009b      	lsls	r3, r3, #2
    4708:	18d3      	adds	r3, r2, r3
    470a:	3304      	adds	r3, #4
    470c:	68ba      	ldr	r2, [r7, #8]
    470e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	2224      	movs	r2, #36	; 0x24
    4714:	5c9b      	ldrb	r3, [r3, r2]
    4716:	b2db      	uxtb	r3, r3
    4718:	b25a      	sxtb	r2, r3
    471a:	1dfb      	adds	r3, r7, #7
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	2101      	movs	r1, #1
    4720:	4099      	lsls	r1, r3
    4722:	000b      	movs	r3, r1
    4724:	b25b      	sxtb	r3, r3
    4726:	4313      	orrs	r3, r2
    4728:	b25b      	sxtb	r3, r3
    472a:	b2d9      	uxtb	r1, r3
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	2224      	movs	r2, #36	; 0x24
    4730:	5499      	strb	r1, [r3, r2]
}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}

0000473a <i2c_slave_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_slave_read_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    473a:	b580      	push	{r7, lr}
    473c:	b084      	sub	sp, #16
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
    4742:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4748:	2b00      	cmp	r3, #0
    474a:	d001      	beq.n	4750 <i2c_slave_read_packet_job+0x16>
		return STATUS_BUSY;
    474c:	2305      	movs	r3, #5
    474e:	e016      	b.n	477e <i2c_slave_read_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	685a      	ldr	r2, [r3, #4]
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	881a      	ldrh	r2, [r3, #0]
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    4760:	683b      	ldr	r3, [r7, #0]
    4762:	881a      	ldrh	r2, [r3, #0]
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2231      	movs	r2, #49	; 0x31
    476c:	2105      	movs	r1, #5
    476e:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	2207      	movs	r2, #7
    477a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
    477c:	2300      	movs	r3, #0
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b004      	add	sp, #16
    4784:	bd80      	pop	{r7, pc}

00004786 <i2c_slave_write_packet_job>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
enum status_code i2c_slave_write_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    4786:	b580      	push	{r7, lr}
    4788:	b084      	sub	sp, #16
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
    478e:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4794:	2b00      	cmp	r3, #0
    4796:	d001      	beq.n	479c <i2c_slave_write_packet_job+0x16>
		return STATUS_BUSY;
    4798:	2305      	movs	r3, #5
    479a:	e016      	b.n	47ca <i2c_slave_write_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	685a      	ldr	r2, [r3, #4]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    47a4:	683b      	ldr	r3, [r7, #0]
    47a6:	881a      	ldrh	r2, [r3, #0]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    47ac:	683b      	ldr	r3, [r7, #0]
    47ae:	881a      	ldrh	r2, [r3, #0]
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	2231      	movs	r2, #49	; 0x31
    47b8:	2105      	movs	r1, #5
    47ba:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2207      	movs	r2, #7
    47c6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
    47c8:	2300      	movs	r3, #0
}
    47ca:	0018      	movs	r0, r3
    47cc:	46bd      	mov	sp, r7
    47ce:	b004      	add	sp, #16
    47d0:	bd80      	pop	{r7, pc}
	...

000047d4 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b086      	sub	sp, #24
    47d8:	af00      	add	r7, sp, #0
    47da:	0002      	movs	r2, r0
    47dc:	1dfb      	adds	r3, r7, #7
    47de:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
			(struct i2c_slave_module*)_sercom_instances[instance];
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_slave_module *module =
    47e4:	4bc6      	ldr	r3, [pc, #792]	; (4b00 <_i2c_slave_interrupt_handler+0x32c>)
    47e6:	0092      	lsls	r2, r2, #2
    47e8:	58d3      	ldr	r3, [r2, r3]
    47ea:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	697a      	ldr	r2, [r7, #20]
    47f8:	2125      	movs	r1, #37	; 0x25
    47fa:	5c52      	ldrb	r2, [r2, r1]
    47fc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	2224      	movs	r2, #36	; 0x24
    4802:	5c9b      	ldrb	r3, [r3, r2]
    4804:	b2da      	uxtb	r2, r3
    4806:	230f      	movs	r3, #15
    4808:	18fb      	adds	r3, r7, r3
    480a:	210f      	movs	r1, #15
    480c:	1879      	adds	r1, r7, r1
    480e:	7809      	ldrb	r1, [r1, #0]
    4810:	400a      	ands	r2, r1
    4812:	701a      	strb	r2, [r3, #0]


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    4814:	693b      	ldr	r3, [r7, #16]
    4816:	7e1b      	ldrb	r3, [r3, #24]
    4818:	b2db      	uxtb	r3, r3
    481a:	001a      	movs	r2, r3
    481c:	2302      	movs	r3, #2
    481e:	4013      	ands	r3, r2
    4820:	d100      	bne.n	4824 <_i2c_slave_interrupt_handler+0x50>
    4822:	e0b4      	b.n	498e <_i2c_slave_interrupt_handler+0x1ba>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4828:	b29a      	uxth	r2, r3
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    482e:	429a      	cmp	r2, r3
    4830:	d01b      	beq.n	486a <_i2c_slave_interrupt_handler+0x96>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    4832:	697b      	ldr	r3, [r7, #20]
    4834:	2230      	movs	r2, #48	; 0x30
    4836:	5c9b      	ldrb	r3, [r3, r2]
    4838:	b2db      	uxtb	r3, r3
		if (module->buffer_length != module->buffer_remaining &&
    483a:	2b00      	cmp	r3, #0
    483c:	d115      	bne.n	486a <_i2c_slave_interrupt_handler+0x96>

			module->status = STATUS_OK;
    483e:	697b      	ldr	r3, [r7, #20]
    4840:	2231      	movs	r2, #49	; 0x31
    4842:	2100      	movs	r1, #0
    4844:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    4846:	697b      	ldr	r3, [r7, #20]
    4848:	2200      	movs	r2, #0
    484a:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    484c:	697b      	ldr	r3, [r7, #20]
    484e:	2200      	movs	r2, #0
    4850:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4852:	230f      	movs	r3, #15
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	2202      	movs	r2, #2
    485a:	4013      	ands	r3, r2
    485c:	d027      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    485e:	697b      	ldr	r3, [r7, #20]
    4860:	691b      	ldr	r3, [r3, #16]
    4862:	697a      	ldr	r2, [r7, #20]
    4864:	0010      	movs	r0, r2
    4866:	4798      	blx	r3
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4868:	e021      	b.n	48ae <_i2c_slave_interrupt_handler+0xda>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    486a:	697b      	ldr	r3, [r7, #20]
    486c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    486e:	b29a      	uxth	r2, r3
    4870:	697b      	ldr	r3, [r7, #20]
    4872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4874:	429a      	cmp	r2, r3
    4876:	d01a      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->transfer_direction == I2C_TRANSFER_READ) {
    4878:	697b      	ldr	r3, [r7, #20]
    487a:	2230      	movs	r2, #48	; 0x30
    487c:	5c9b      	ldrb	r3, [r3, r2]
    487e:	b2db      	uxtb	r3, r3
		} else if (module->buffer_length != module->buffer_remaining &&
    4880:	2b01      	cmp	r3, #1
    4882:	d114      	bne.n	48ae <_i2c_slave_interrupt_handler+0xda>
			module->status = STATUS_OK;
    4884:	697b      	ldr	r3, [r7, #20]
    4886:	2231      	movs	r2, #49	; 0x31
    4888:	2100      	movs	r1, #0
    488a:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    488c:	697b      	ldr	r3, [r7, #20]
    488e:	2200      	movs	r2, #0
    4890:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    4892:	697b      	ldr	r3, [r7, #20]
    4894:	2200      	movs	r2, #0
    4896:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    4898:	230f      	movs	r3, #15
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2201      	movs	r2, #1
    48a0:	4013      	ands	r3, r2
    48a2:	d004      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    48a4:	697b      	ldr	r3, [r7, #20]
    48a6:	68db      	ldr	r3, [r3, #12]
    48a8:	697a      	ldr	r2, [r7, #20]
    48aa:	0010      	movs	r0, r2
    48ac:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    48ae:	693b      	ldr	r3, [r7, #16]
    48b0:	8b5b      	ldrh	r3, [r3, #26]
    48b2:	b29b      	uxth	r3, r3
    48b4:	001a      	movs	r2, r3
    48b6:	2343      	movs	r3, #67	; 0x43
    48b8:	4013      	ands	r3, r2
    48ba:	d00e      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    48bc:	697b      	ldr	r3, [r7, #20]
    48be:	2231      	movs	r2, #49	; 0x31
    48c0:	2110      	movs	r1, #16
    48c2:	5499      	strb	r1, [r3, r2]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    48c4:	230f      	movs	r3, #15
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	2220      	movs	r2, #32
    48cc:	4013      	ands	r3, r2
    48ce:	d004      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    48d0:	697b      	ldr	r3, [r7, #20]
    48d2:	6a1b      	ldr	r3, [r3, #32]
    48d4:	697a      	ldr	r2, [r7, #20]
    48d6:	0010      	movs	r0, r2
    48d8:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	7a5b      	ldrb	r3, [r3, #9]
    48de:	2b00      	cmp	r3, #0
    48e0:	d005      	beq.n	48ee <_i2c_slave_interrupt_handler+0x11a>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
    48e2:	697b      	ldr	r3, [r7, #20]
    48e4:	2100      	movs	r1, #0
    48e6:	0018      	movs	r0, r3
    48e8:	4b86      	ldr	r3, [pc, #536]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    48ea:	4798      	blx	r3
    48ec:	e045      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	8b5b      	ldrh	r3, [r3, #26]
    48f2:	b29b      	uxth	r3, r3
    48f4:	001a      	movs	r2, r3
    48f6:	2308      	movs	r3, #8
    48f8:	4013      	ands	r3, r2
    48fa:	d01f      	beq.n	493c <_i2c_slave_interrupt_handler+0x168>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    48fc:	697b      	ldr	r3, [r7, #20]
    48fe:	2230      	movs	r2, #48	; 0x30
    4900:	2101      	movs	r1, #1
    4902:	5499      	strb	r1, [r3, r2]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2204      	movs	r2, #4
    490c:	4013      	ands	r3, r2
    490e:	d004      	beq.n	491a <_i2c_slave_interrupt_handler+0x146>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	695b      	ldr	r3, [r3, #20]
    4914:	697a      	ldr	r2, [r7, #20]
    4916:	0010      	movs	r0, r2
    4918:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    491a:	697b      	ldr	r3, [r7, #20]
    491c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    491e:	b29b      	uxth	r3, r3
    4920:	2b00      	cmp	r3, #0
    4922:	d105      	bne.n	4930 <_i2c_slave_interrupt_handler+0x15c>
				/* Data buffer not set up, NACK address, workaround 13574*/
				_i2c_slave_set_ctrlb_ackact(module, false);
    4924:	697b      	ldr	r3, [r7, #20]
    4926:	2100      	movs	r1, #0
    4928:	0018      	movs	r0, r3
    492a:	4b76      	ldr	r3, [pc, #472]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    492c:	4798      	blx	r3
    492e:	e024      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4930:	697b      	ldr	r3, [r7, #20]
    4932:	2101      	movs	r1, #1
    4934:	0018      	movs	r0, r3
    4936:	4b73      	ldr	r3, [pc, #460]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4938:	4798      	blx	r3
    493a:	e01e      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = I2C_TRANSFER_WRITE;
    493c:	697b      	ldr	r3, [r7, #20]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	2100      	movs	r1, #0
    4942:	5499      	strb	r1, [r3, r2]

			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    4944:	230f      	movs	r3, #15
    4946:	18fb      	adds	r3, r7, r3
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2208      	movs	r2, #8
    494c:	4013      	ands	r3, r2
    494e:	d004      	beq.n	495a <_i2c_slave_interrupt_handler+0x186>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    4950:	697b      	ldr	r3, [r7, #20]
    4952:	699b      	ldr	r3, [r3, #24]
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	0010      	movs	r0, r2
    4958:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    495e:	b29b      	uxth	r3, r3
    4960:	2b00      	cmp	r3, #0
    4962:	d105      	bne.n	4970 <_i2c_slave_interrupt_handler+0x19c>
				/* Data buffer not set up, NACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, false);
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	2100      	movs	r1, #0
    4968:	0018      	movs	r0, r3
    496a:	4b66      	ldr	r3, [pc, #408]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    496c:	4798      	blx	r3
    496e:	e004      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2101      	movs	r1, #1
    4974:	0018      	movs	r0, r3
    4976:	4b63      	ldr	r3, [pc, #396]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4978:	4798      	blx	r3
			}
		}

		/* ACK or NACK address, Workaround 13574 */
		_i2c_slave_set_ctrlb_cmd3(module);
    497a:	697b      	ldr	r3, [r7, #20]
    497c:	0018      	movs	r0, r3
    497e:	4b62      	ldr	r3, [pc, #392]	; (4b08 <_i2c_slave_interrupt_handler+0x334>)
    4980:	4798      	blx	r3

		/* ACK next incoming packet, workaround 13574 */
		_i2c_slave_set_ctrlb_ackact(module, true);
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	2101      	movs	r1, #1
    4986:	0018      	movs	r0, r3
    4988:	4b5e      	ldr	r3, [pc, #376]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    498a:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    498c:	e0d8      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	7e1b      	ldrb	r3, [r3, #24]
    4992:	b2db      	uxtb	r3, r3
    4994:	001a      	movs	r2, r3
    4996:	2301      	movs	r3, #1
    4998:	4013      	ands	r3, r2
    499a:	d054      	beq.n	4a46 <_i2c_slave_interrupt_handler+0x272>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	2201      	movs	r2, #1
    49a0:	761a      	strb	r2, [r3, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	2205      	movs	r2, #5
    49a6:	751a      	strb	r2, [r3, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49a8:	697b      	ldr	r3, [r7, #20]
    49aa:	2225      	movs	r2, #37	; 0x25
    49ac:	5c9b      	ldrb	r3, [r3, r2]
    49ae:	b2db      	uxtb	r3, r3
    49b0:	001a      	movs	r2, r3
    49b2:	2304      	movs	r3, #4
    49b4:	4013      	ands	r3, r2
    49b6:	d108      	bne.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    49b8:	697b      	ldr	r3, [r7, #20]
    49ba:	2225      	movs	r2, #37	; 0x25
    49bc:	5c9b      	ldrb	r3, [r3, r2]
    49be:	b2db      	uxtb	r3, r3
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49c0:	2b08      	cmp	r3, #8
    49c2:	d002      	beq.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    49c4:	693b      	ldr	r3, [r7, #16]
    49c6:	2202      	movs	r2, #2
    49c8:	751a      	strb	r2, [r3, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2231      	movs	r2, #49	; 0x31
    49ce:	5c9b      	ldrb	r3, [r3, r2]
    49d0:	b2db      	uxtb	r3, r3
    49d2:	2b1e      	cmp	r3, #30
    49d4:	d100      	bne.n	49d8 <_i2c_slave_interrupt_handler+0x204>
    49d6:	e0b3      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    49d8:	697b      	ldr	r3, [r7, #20]
    49da:	2231      	movs	r2, #49	; 0x31
    49dc:	5c9b      	ldrb	r3, [r3, r2]
    49de:	b2db      	uxtb	r3, r3
    49e0:	2b10      	cmp	r3, #16
    49e2:	d100      	bne.n	49e6 <_i2c_slave_interrupt_handler+0x212>
    49e4:	e0ac      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			module->status = STATUS_OK;
    49e6:	697b      	ldr	r3, [r7, #20]
    49e8:	2231      	movs	r2, #49	; 0x31
    49ea:	2100      	movs	r1, #0
    49ec:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    49ee:	697b      	ldr	r3, [r7, #20]
    49f0:	2200      	movs	r2, #0
    49f2:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    49f4:	697b      	ldr	r3, [r7, #20]
    49f6:	2200      	movs	r2, #0
    49f8:	851a      	strh	r2, [r3, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    49fa:	230f      	movs	r3, #15
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2202      	movs	r2, #2
    4a02:	4013      	ands	r3, r2
    4a04:	d00b      	beq.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	2230      	movs	r2, #48	; 0x30
    4a0a:	5c9b      	ldrb	r3, [r3, r2]
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d105      	bne.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	691b      	ldr	r3, [r3, #16]
    4a16:	697a      	ldr	r2, [r7, #20]
    4a18:	0010      	movs	r0, r2
    4a1a:	4798      	blx	r3
    4a1c:	e090      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    4a1e:	230f      	movs	r3, #15
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	4013      	ands	r3, r2
    4a28:	d100      	bne.n	4a2c <_i2c_slave_interrupt_handler+0x258>
    4a2a:	e089      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4a2c:	697b      	ldr	r3, [r7, #20]
    4a2e:	2230      	movs	r2, #48	; 0x30
    4a30:	5c9b      	ldrb	r3, [r3, r2]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b01      	cmp	r3, #1
    4a36:	d000      	beq.n	4a3a <_i2c_slave_interrupt_handler+0x266>
    4a38:	e082      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	68db      	ldr	r3, [r3, #12]
    4a3e:	697a      	ldr	r2, [r7, #20]
    4a40:	0010      	movs	r0, r2
    4a42:	4798      	blx	r3
}
    4a44:	e07c      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	7e1b      	ldrb	r3, [r3, #24]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	001a      	movs	r2, r3
    4a4e:	2304      	movs	r3, #4
    4a50:	4013      	ands	r3, r2
    4a52:	d100      	bne.n	4a56 <_i2c_slave_interrupt_handler+0x282>
    4a54:	e074      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
		if (module->buffer_remaining <= 0 ||
    4a56:	697b      	ldr	r3, [r7, #20]
    4a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d013      	beq.n	4a86 <_i2c_slave_interrupt_handler+0x2b2>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2230      	movs	r2, #48	; 0x30
    4a62:	5c9b      	ldrb	r3, [r3, r2]
    4a64:	b2db      	uxtb	r3, r3
		if (module->buffer_remaining <= 0 ||
    4a66:	2b01      	cmp	r3, #1
    4a68:	d150      	bne.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(module->buffer_length > module->buffer_remaining) &&
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a6e:	b29a      	uxth	r2, r3
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a74:	429a      	cmp	r2, r3
    4a76:	d949      	bls.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    4a78:	693b      	ldr	r3, [r7, #16]
    4a7a:	8b5b      	ldrh	r3, [r3, #26]
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	001a      	movs	r2, r3
    4a80:	2304      	movs	r3, #4
    4a82:	4013      	ands	r3, r2
				(module->buffer_length > module->buffer_remaining) &&
    4a84:	d042      	beq.n	4b0c <_i2c_slave_interrupt_handler+0x338>
			module->buffer_remaining = 0;
    4a86:	697b      	ldr	r3, [r7, #20]
    4a88:	2200      	movs	r2, #0
    4a8a:	851a      	strh	r2, [r3, #40]	; 0x28
			module->buffer_length = 0;
    4a8c:	697b      	ldr	r3, [r7, #20]
    4a8e:	2200      	movs	r2, #0
    4a90:	84da      	strh	r2, [r3, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	2230      	movs	r2, #48	; 0x30
    4a96:	5c9b      	ldrb	r3, [r3, r2]
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d11b      	bne.n	4ad6 <_i2c_slave_interrupt_handler+0x302>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	2100      	movs	r1, #0
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b17      	ldr	r3, [pc, #92]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4aa6:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4aa8:	693b      	ldr	r3, [r7, #16]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	0292      	lsls	r2, r2, #10
    4ab0:	431a      	orrs	r2, r3
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	605a      	str	r2, [r3, #4]
				module->status = STATUS_ERR_OVERFLOW;
    4ab6:	697b      	ldr	r3, [r7, #20]
    4ab8:	2231      	movs	r2, #49	; 0x31
    4aba:	211e      	movs	r1, #30
    4abc:	5499      	strb	r1, [r3, r2]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    4abe:	230f      	movs	r3, #15
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	2210      	movs	r2, #16
    4ac6:	4013      	ands	r3, r2
    4ac8:	d039      	beq.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	69db      	ldr	r3, [r3, #28]
    4ace:	697a      	ldr	r2, [r7, #20]
    4ad0:	0010      	movs	r0, r2
    4ad2:	4798      	blx	r3
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4ad4:	e033      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	2100      	movs	r1, #0
    4ada:	0018      	movs	r0, r3
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4ade:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4ae0:	693b      	ldr	r3, [r7, #16]
    4ae2:	685b      	ldr	r3, [r3, #4]
    4ae4:	2280      	movs	r2, #128	; 0x80
    4ae6:	0292      	lsls	r2, r2, #10
    4ae8:	431a      	orrs	r2, r3
    4aea:	693b      	ldr	r3, [r7, #16]
    4aec:	605a      	str	r2, [r3, #4]
				module->status = STATUS_OK;
    4aee:	697b      	ldr	r3, [r7, #20]
    4af0:	2231      	movs	r2, #49	; 0x31
    4af2:	2100      	movs	r1, #0
    4af4:	5499      	strb	r1, [r3, r2]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    4af6:	693b      	ldr	r3, [r7, #16]
    4af8:	2204      	movs	r2, #4
    4afa:	751a      	strb	r2, [r3, #20]
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4afc:	e01f      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	20000468 	.word	0x20000468
    4b04:	00004609 	.word	0x00004609
    4b08:	00004655 	.word	0x00004655
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b10:	b29b      	uxth	r3, r3
    4b12:	2b00      	cmp	r3, #0
    4b14:	d014      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    4b16:	697b      	ldr	r3, [r7, #20]
    4b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d010      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b1e:	697b      	ldr	r3, [r7, #20]
    4b20:	2230      	movs	r2, #48	; 0x30
    4b22:	5c9b      	ldrb	r3, [r3, r2]
    4b24:	b2db      	uxtb	r3, r3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d104      	bne.n	4b34 <_i2c_slave_interrupt_handler+0x360>
				_i2c_slave_read(module);
    4b2a:	697b      	ldr	r3, [r7, #20]
    4b2c:	0018      	movs	r0, r3
    4b2e:	4b06      	ldr	r3, [pc, #24]	; (4b48 <_i2c_slave_interrupt_handler+0x374>)
    4b30:	4798      	blx	r3
}
    4b32:	e005      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				_i2c_slave_write(module);
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	0018      	movs	r0, r3
    4b38:	4b04      	ldr	r3, [pc, #16]	; (4b4c <_i2c_slave_interrupt_handler+0x378>)
    4b3a:	4798      	blx	r3
}
    4b3c:	e000      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b3e:	46c0      	nop			; (mov r8, r8)
}
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	46bd      	mov	sp, r7
    4b44:	b006      	add	sp, #24
    4b46:	bd80      	pop	{r7, pc}
    4b48:	00004685 	.word	0x00004685
    4b4c:	000046bb 	.word	0x000046bb

00004b50 <system_gclk_chan_get_config_defaults>:
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	2200      	movs	r2, #0
    4b5c:	701a      	strb	r2, [r3, #0]
}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	46bd      	mov	sp, r7
    4b62:	b002      	add	sp, #8
    4b64:	bd80      	pop	{r7, pc}
	...

00004b68 <system_apb_clock_set_mask>:
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b082      	sub	sp, #8
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	0002      	movs	r2, r0
    4b70:	6039      	str	r1, [r7, #0]
    4b72:	1dfb      	adds	r3, r7, #7
    4b74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d00a      	beq.n	4b94 <system_apb_clock_set_mask+0x2c>
    4b7e:	2b02      	cmp	r3, #2
    4b80:	d00f      	beq.n	4ba2 <system_apb_clock_set_mask+0x3a>
    4b82:	2b00      	cmp	r3, #0
    4b84:	d114      	bne.n	4bb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b8a:	6991      	ldr	r1, [r2, #24]
    4b8c:	683a      	ldr	r2, [r7, #0]
    4b8e:	430a      	orrs	r2, r1
    4b90:	619a      	str	r2, [r3, #24]
			break;
    4b92:	e00f      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4b94:	4b0a      	ldr	r3, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b96:	4a0a      	ldr	r2, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b98:	69d1      	ldr	r1, [r2, #28]
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	430a      	orrs	r2, r1
    4b9e:	61da      	str	r2, [r3, #28]
			break;
    4ba0:	e008      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba4:	4a06      	ldr	r2, [pc, #24]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba6:	6a11      	ldr	r1, [r2, #32]
    4ba8:	683a      	ldr	r2, [r7, #0]
    4baa:	430a      	orrs	r2, r1
    4bac:	621a      	str	r2, [r3, #32]
			break;
    4bae:	e001      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bb0:	2317      	movs	r3, #23
    4bb2:	e000      	b.n	4bb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bb4:	2300      	movs	r3, #0
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b002      	add	sp, #8
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	40000400 	.word	0x40000400

00004bc4 <system_pinmux_get_config_defaults>:
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	2280      	movs	r2, #128	; 0x80
    4bd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	2200      	movs	r2, #0
    4bd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	2201      	movs	r2, #1
    4bdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	2200      	movs	r2, #0
    4be2:	70da      	strb	r2, [r3, #3]
}
    4be4:	46c0      	nop			; (mov r8, r8)
    4be6:	46bd      	mov	sp, r7
    4be8:	b002      	add	sp, #8
    4bea:	bd80      	pop	{r7, pc}

00004bec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4bf4:	2300      	movs	r3, #0
    4bf6:	60fb      	str	r3, [r7, #12]
    4bf8:	e00c      	b.n	4c14 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    4bfa:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_tcc_get_inst_index+0x38>)
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	0092      	lsls	r2, r2, #2
    4c00:	58d2      	ldr	r2, [r2, r3]
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	429a      	cmp	r2, r3
    4c06:	d102      	bne.n	4c0e <_tcc_get_inst_index+0x22>
			return i;
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	e006      	b.n	4c1c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	3301      	adds	r3, #1
    4c12:	60fb      	str	r3, [r7, #12]
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	2b02      	cmp	r3, #2
    4c18:	d9ef      	bls.n	4bfa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c1a:	2300      	movs	r3, #0
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	46bd      	mov	sp, r7
    4c20:	b004      	add	sp, #16
    4c22:	bd80      	pop	{r7, pc}
    4c24:	00017274 	.word	0x00017274

00004c28 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c28:	b590      	push	{r4, r7, lr}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c32:	230f      	movs	r3, #15
    4c34:	18fc      	adds	r4, r7, r3
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	0018      	movs	r0, r3
    4c3a:	4bad      	ldr	r3, [pc, #692]	; (4ef0 <tcc_get_config_defaults+0x2c8>)
    4c3c:	4798      	blx	r3
    4c3e:	0003      	movs	r3, r0
    4c40:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	2200      	movs	r2, #0
    4c46:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c48:	230f      	movs	r3, #15
    4c4a:	18fb      	adds	r3, r7, r3
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4ba9      	ldr	r3, [pc, #676]	; (4ef4 <tcc_get_config_defaults+0x2cc>)
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	58d2      	ldr	r2, [r2, r3]
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	2200      	movs	r2, #0
    4c5c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	2200      	movs	r2, #0
    4c62:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	2200      	movs	r2, #0
    4c68:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2200      	movs	r2, #0
    4c6e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	2200      	movs	r2, #0
    4c74:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2200      	movs	r2, #0
    4c7a:	61da      	str	r2, [r3, #28]
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	2200      	movs	r2, #0
    4c80:	621a      	str	r2, [r3, #32]
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	2200      	movs	r2, #0
    4c86:	625a      	str	r2, [r3, #36]	; 0x24
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2200      	movs	r2, #0
    4c8c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	2200      	movs	r2, #0
    4c92:	751a      	strb	r2, [r3, #20]
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	2200      	movs	r2, #0
    4c98:	755a      	strb	r2, [r3, #21]
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	2200      	movs	r2, #0
    4c9e:	759a      	strb	r2, [r3, #22]
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2200      	movs	r2, #0
    4ca4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2200      	movs	r2, #0
    4caa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	2200      	movs	r2, #0
    4cb0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	2200      	movs	r2, #0
    4cb6:	741a      	strb	r2, [r3, #16]
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2200      	movs	r2, #0
    4cbc:	745a      	strb	r2, [r3, #17]
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2200      	movs	r2, #0
    4cc2:	749a      	strb	r2, [r3, #18]
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	222c      	movs	r2, #44	; 0x2c
    4cce:	2100      	movs	r1, #0
    4cd0:	5499      	strb	r1, [r3, r2]
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	222d      	movs	r2, #45	; 0x2d
    4cd6:	2100      	movs	r1, #0
    4cd8:	5499      	strb	r1, [r3, r2]
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	222e      	movs	r2, #46	; 0x2e
    4cde:	2100      	movs	r1, #0
    4ce0:	5499      	strb	r1, [r3, r2]
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	222f      	movs	r2, #47	; 0x2f
    4ce6:	2100      	movs	r1, #0
    4ce8:	5499      	strb	r1, [r3, r2]
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	2230      	movs	r2, #48	; 0x30
    4cee:	2100      	movs	r1, #0
    4cf0:	5499      	strb	r1, [r3, r2]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	2231      	movs	r2, #49	; 0x31
    4cf6:	2100      	movs	r1, #0
    4cf8:	5499      	strb	r1, [r3, r2]
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	2232      	movs	r2, #50	; 0x32
    4cfe:	2100      	movs	r1, #0
    4d00:	5499      	strb	r1, [r3, r2]
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	2233      	movs	r2, #51	; 0x33
    4d06:	2100      	movs	r1, #0
    4d08:	5499      	strb	r1, [r3, r2]
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2234      	movs	r2, #52	; 0x34
    4d0e:	2100      	movs	r1, #0
    4d10:	5499      	strb	r1, [r3, r2]
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2235      	movs	r2, #53	; 0x35
    4d16:	2100      	movs	r1, #0
    4d18:	5499      	strb	r1, [r3, r2]
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	2236      	movs	r2, #54	; 0x36
    4d1e:	2100      	movs	r1, #0
    4d20:	5499      	strb	r1, [r3, r2]
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	2237      	movs	r2, #55	; 0x37
    4d26:	2100      	movs	r1, #0
    4d28:	5499      	strb	r1, [r3, r2]
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	2238      	movs	r2, #56	; 0x38
    4d2e:	2100      	movs	r1, #0
    4d30:	5499      	strb	r1, [r3, r2]
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	2239      	movs	r2, #57	; 0x39
    4d36:	2100      	movs	r1, #0
    4d38:	5499      	strb	r1, [r3, r2]
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	223a      	movs	r2, #58	; 0x3a
    4d3e:	2100      	movs	r1, #0
    4d40:	5499      	strb	r1, [r3, r2]
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	223b      	movs	r2, #59	; 0x3b
    4d46:	2100      	movs	r1, #0
    4d48:	5499      	strb	r1, [r3, r2]
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	223c      	movs	r2, #60	; 0x3c
    4d4e:	2100      	movs	r1, #0
    4d50:	5499      	strb	r1, [r3, r2]
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	223d      	movs	r2, #61	; 0x3d
    4d56:	2100      	movs	r1, #0
    4d58:	5499      	strb	r1, [r3, r2]
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	223e      	movs	r2, #62	; 0x3e
    4d5e:	2100      	movs	r1, #0
    4d60:	5499      	strb	r1, [r3, r2]
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	223f      	movs	r2, #63	; 0x3f
    4d66:	2100      	movs	r1, #0
    4d68:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	2240      	movs	r2, #64	; 0x40
    4d6e:	2100      	movs	r1, #0
    4d70:	5499      	strb	r1, [r3, r2]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	2241      	movs	r2, #65	; 0x41
    4d76:	2100      	movs	r1, #0
    4d78:	5499      	strb	r1, [r3, r2]
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	2242      	movs	r2, #66	; 0x42
    4d7e:	2100      	movs	r1, #0
    4d80:	5499      	strb	r1, [r3, r2]
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	2243      	movs	r2, #67	; 0x43
    4d86:	2100      	movs	r1, #0
    4d88:	5499      	strb	r1, [r3, r2]
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	2244      	movs	r2, #68	; 0x44
    4d8e:	2100      	movs	r1, #0
    4d90:	5499      	strb	r1, [r3, r2]
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	2245      	movs	r2, #69	; 0x45
    4d96:	2100      	movs	r1, #0
    4d98:	5499      	strb	r1, [r3, r2]
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	2246      	movs	r2, #70	; 0x46
    4d9e:	2100      	movs	r1, #0
    4da0:	5499      	strb	r1, [r3, r2]
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2247      	movs	r2, #71	; 0x47
    4da6:	2100      	movs	r1, #0
    4da8:	5499      	strb	r1, [r3, r2]
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	2248      	movs	r2, #72	; 0x48
    4dae:	2100      	movs	r1, #0
    4db0:	5499      	strb	r1, [r3, r2]
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	2249      	movs	r2, #73	; 0x49
    4db6:	2100      	movs	r1, #0
    4db8:	5499      	strb	r1, [r3, r2]
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	224a      	movs	r2, #74	; 0x4a
    4dbe:	2100      	movs	r1, #0
    4dc0:	5499      	strb	r1, [r3, r2]
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	224b      	movs	r2, #75	; 0x4b
    4dc6:	2100      	movs	r1, #0
    4dc8:	5499      	strb	r1, [r3, r2]
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	224c      	movs	r2, #76	; 0x4c
    4dce:	2100      	movs	r1, #0
    4dd0:	5499      	strb	r1, [r3, r2]
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	224d      	movs	r2, #77	; 0x4d
    4dd6:	2100      	movs	r1, #0
    4dd8:	5499      	strb	r1, [r3, r2]
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	224e      	movs	r2, #78	; 0x4e
    4dde:	2100      	movs	r1, #0
    4de0:	5499      	strb	r1, [r3, r2]
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	224f      	movs	r2, #79	; 0x4f
    4de6:	2100      	movs	r1, #0
    4de8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	2250      	movs	r2, #80	; 0x50
    4dee:	2100      	movs	r1, #0
    4df0:	5499      	strb	r1, [r3, r2]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	2251      	movs	r2, #81	; 0x51
    4df6:	2100      	movs	r1, #0
    4df8:	5499      	strb	r1, [r3, r2]
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	2252      	movs	r2, #82	; 0x52
    4dfe:	2100      	movs	r1, #0
    4e00:	5499      	strb	r1, [r3, r2]
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	2253      	movs	r2, #83	; 0x53
    4e06:	2100      	movs	r1, #0
    4e08:	5499      	strb	r1, [r3, r2]
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	2254      	movs	r2, #84	; 0x54
    4e0e:	2100      	movs	r1, #0
    4e10:	5499      	strb	r1, [r3, r2]
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	2255      	movs	r2, #85	; 0x55
    4e16:	2100      	movs	r1, #0
    4e18:	5499      	strb	r1, [r3, r2]
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	2256      	movs	r2, #86	; 0x56
    4e1e:	2100      	movs	r1, #0
    4e20:	5499      	strb	r1, [r3, r2]
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	2257      	movs	r2, #87	; 0x57
    4e26:	2100      	movs	r1, #0
    4e28:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	2298      	movs	r2, #152	; 0x98
    4e2e:	2100      	movs	r1, #0
    4e30:	5499      	strb	r1, [r3, r2]
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	2200      	movs	r2, #0
    4e36:	659a      	str	r2, [r3, #88]	; 0x58
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2200      	movs	r2, #0
    4e3c:	679a      	str	r2, [r3, #120]	; 0x78
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	2299      	movs	r2, #153	; 0x99
    4e42:	2100      	movs	r1, #0
    4e44:	5499      	strb	r1, [r3, r2]
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	2200      	movs	r2, #0
    4e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	2200      	movs	r2, #0
    4e50:	67da      	str	r2, [r3, #124]	; 0x7c
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	229a      	movs	r2, #154	; 0x9a
    4e56:	2100      	movs	r1, #0
    4e58:	5499      	strb	r1, [r3, r2]
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2200      	movs	r2, #0
    4e5e:	661a      	str	r2, [r3, #96]	; 0x60
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2280      	movs	r2, #128	; 0x80
    4e64:	2100      	movs	r1, #0
    4e66:	5099      	str	r1, [r3, r2]
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	229b      	movs	r2, #155	; 0x9b
    4e6c:	2100      	movs	r1, #0
    4e6e:	5499      	strb	r1, [r3, r2]
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2200      	movs	r2, #0
    4e74:	665a      	str	r2, [r3, #100]	; 0x64
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	2284      	movs	r2, #132	; 0x84
    4e7a:	2100      	movs	r1, #0
    4e7c:	5099      	str	r1, [r3, r2]
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	229c      	movs	r2, #156	; 0x9c
    4e82:	2100      	movs	r1, #0
    4e84:	5499      	strb	r1, [r3, r2]
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	2200      	movs	r2, #0
    4e8a:	669a      	str	r2, [r3, #104]	; 0x68
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2288      	movs	r2, #136	; 0x88
    4e90:	2100      	movs	r1, #0
    4e92:	5099      	str	r1, [r3, r2]
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	229d      	movs	r2, #157	; 0x9d
    4e98:	2100      	movs	r1, #0
    4e9a:	5499      	strb	r1, [r3, r2]
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	2200      	movs	r2, #0
    4ea0:	66da      	str	r2, [r3, #108]	; 0x6c
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	228c      	movs	r2, #140	; 0x8c
    4ea6:	2100      	movs	r1, #0
    4ea8:	5099      	str	r1, [r3, r2]
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	229e      	movs	r2, #158	; 0x9e
    4eae:	2100      	movs	r1, #0
    4eb0:	5499      	strb	r1, [r3, r2]
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	2200      	movs	r2, #0
    4eb6:	671a      	str	r2, [r3, #112]	; 0x70
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	2290      	movs	r2, #144	; 0x90
    4ebc:	2100      	movs	r1, #0
    4ebe:	5099      	str	r1, [r3, r2]
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	229f      	movs	r2, #159	; 0x9f
    4ec4:	2100      	movs	r1, #0
    4ec6:	5499      	strb	r1, [r3, r2]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2200      	movs	r2, #0
    4ecc:	675a      	str	r2, [r3, #116]	; 0x74
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	2294      	movs	r2, #148	; 0x94
    4ed2:	2100      	movs	r1, #0
    4ed4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	22a0      	movs	r2, #160	; 0xa0
    4eda:	2101      	movs	r1, #1
    4edc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	22a1      	movs	r2, #161	; 0xa1
    4ee2:	2100      	movs	r1, #0
    4ee4:	5499      	strb	r1, [r3, r2]
}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	46bd      	mov	sp, r7
    4eea:	b005      	add	sp, #20
    4eec:	bd90      	pop	{r4, r7, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00004bed 	.word	0x00004bed
    4ef4:	00017290 	.word	0x00017290

00004ef8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b086      	sub	sp, #24
    4efc:	af00      	add	r7, sp, #0
    4efe:	60b9      	str	r1, [r7, #8]
    4f00:	607a      	str	r2, [r7, #4]
    4f02:	230f      	movs	r3, #15
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	1c02      	adds	r2, r0, #0
    4f08:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    4f0a:	2300      	movs	r3, #0
    4f0c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f0e:	2300      	movs	r3, #0
    4f10:	613b      	str	r3, [r7, #16]
    4f12:	e01d      	b.n	4f50 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    4f14:	68ba      	ldr	r2, [r7, #8]
    4f16:	693b      	ldr	r3, [r7, #16]
    4f18:	18d3      	adds	r3, r2, r3
    4f1a:	3310      	adds	r3, #16
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	2b01      	cmp	r3, #1
    4f20:	d113      	bne.n	4f4a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    4f22:	230f      	movs	r3, #15
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	4a1b      	ldr	r2, [pc, #108]	; (4f98 <_tcc_build_ctrla+0xa0>)
    4f2a:	5cd3      	ldrb	r3, [r2, r3]
    4f2c:	001a      	movs	r2, r3
    4f2e:	693b      	ldr	r3, [r7, #16]
    4f30:	429a      	cmp	r2, r3
    4f32:	da01      	bge.n	4f38 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    4f34:	2317      	movs	r3, #23
    4f36:	e02a      	b.n	4f8e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	045a      	lsls	r2, r3, #17
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	409a      	lsls	r2, r3
    4f40:	0013      	movs	r3, r2
    4f42:	001a      	movs	r2, r3
    4f44:	697b      	ldr	r3, [r7, #20]
    4f46:	4313      	orrs	r3, r2
    4f48:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	3301      	adds	r3, #1
    4f4e:	613b      	str	r3, [r7, #16]
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2b03      	cmp	r3, #3
    4f54:	ddde      	ble.n	4f14 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    4f56:	68bb      	ldr	r3, [r7, #8]
    4f58:	22a1      	movs	r2, #161	; 0xa1
    4f5a:	5c9b      	ldrb	r3, [r3, r2]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d004      	beq.n	4f6a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2280      	movs	r2, #128	; 0x80
    4f64:	0112      	lsls	r2, r2, #4
    4f66:	4313      	orrs	r3, r2
    4f68:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	7b1b      	ldrb	r3, [r3, #12]
    4f6e:	031b      	lsls	r3, r3, #12
    4f70:	001a      	movs	r2, r3
    4f72:	697b      	ldr	r3, [r7, #20]
    4f74:	4313      	orrs	r3, r2
    4f76:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	7adb      	ldrb	r3, [r3, #11]
    4f7c:	021b      	lsls	r3, r3, #8
    4f7e:	001a      	movs	r2, r3
    4f80:	697b      	ldr	r3, [r7, #20]
    4f82:	4313      	orrs	r3, r2
    4f84:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	697a      	ldr	r2, [r7, #20]
    4f8a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    4f8c:	2300      	movs	r3, #0
}
    4f8e:	0018      	movs	r0, r3
    4f90:	46bd      	mov	sp, r7
    4f92:	b006      	add	sp, #24
    4f94:	bd80      	pop	{r7, pc}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	0001729c 	.word	0x0001729c

00004f9c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b086      	sub	sp, #24
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	60b9      	str	r1, [r7, #8]
    4fa4:	607a      	str	r2, [r7, #4]
    4fa6:	230f      	movs	r3, #15
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	1c02      	adds	r2, r0, #0
    4fac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    4fae:	2317      	movs	r3, #23
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	2200      	movs	r2, #0
    4fb4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    4fb6:	68bb      	ldr	r3, [r7, #8]
    4fb8:	7a1b      	ldrb	r3, [r3, #8]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d007      	beq.n	4fce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4fbe:	2317      	movs	r3, #23
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	2217      	movs	r2, #23
    4fc4:	18ba      	adds	r2, r7, r2
    4fc6:	7812      	ldrb	r2, [r2, #0]
    4fc8:	2104      	movs	r1, #4
    4fca:	430a      	orrs	r2, r1
    4fcc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4fce:	68bb      	ldr	r3, [r7, #8]
    4fd0:	7a5b      	ldrb	r3, [r3, #9]
    4fd2:	2b01      	cmp	r3, #1
    4fd4:	d107      	bne.n	4fe6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    4fd6:	2317      	movs	r3, #23
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	2217      	movs	r2, #23
    4fdc:	18ba      	adds	r2, r7, r2
    4fde:	7812      	ldrb	r2, [r2, #0]
    4fe0:	2101      	movs	r1, #1
    4fe2:	430a      	orrs	r2, r1
    4fe4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	2217      	movs	r2, #23
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	7812      	ldrb	r2, [r2, #0]
    4fee:	701a      	strb	r2, [r3, #0]
}
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	46bd      	mov	sp, r7
    4ff4:	b006      	add	sp, #24
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b088      	sub	sp, #32
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	60b9      	str	r1, [r7, #8]
    5000:	607a      	str	r2, [r7, #4]
    5002:	230f      	movs	r3, #15
    5004:	18fb      	adds	r3, r7, r3
    5006:	1c02      	adds	r2, r0, #0
    5008:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    500a:	230f      	movs	r3, #15
    500c:	18fb      	adds	r3, r7, r3
    500e:	781a      	ldrb	r2, [r3, #0]
    5010:	231b      	movs	r3, #27
    5012:	18fb      	adds	r3, r7, r3
    5014:	493e      	ldr	r1, [pc, #248]	; (5110 <_tcc_build_faults+0x118>)
    5016:	5c8a      	ldrb	r2, [r1, r2]
    5018:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    501a:	2300      	movs	r3, #0
    501c:	61fb      	str	r3, [r7, #28]
    501e:	e06e      	b.n	50fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    5020:	69fa      	ldr	r2, [r7, #28]
    5022:	0013      	movs	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	189b      	adds	r3, r3, r2
    5028:	005b      	lsls	r3, r3, #1
    502a:	3328      	adds	r3, #40	; 0x28
    502c:	68ba      	ldr	r2, [r7, #8]
    502e:	18d3      	adds	r3, r2, r3
    5030:	3304      	adds	r3, #4
    5032:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	7a5b      	ldrb	r3, [r3, #9]
    5038:	221b      	movs	r2, #27
    503a:	18ba      	adds	r2, r7, r2
    503c:	7812      	ldrb	r2, [r2, #0]
    503e:	429a      	cmp	r2, r3
    5040:	d801      	bhi.n	5046 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    5042:	2317      	movs	r3, #23
    5044:	e05f      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    5046:	697b      	ldr	r3, [r7, #20]
    5048:	781b      	ldrb	r3, [r3, #0]
    504a:	2b0f      	cmp	r3, #15
    504c:	d901      	bls.n	5052 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    504e:	2317      	movs	r3, #23
    5050:	e059      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5052:	697b      	ldr	r3, [r7, #20]
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	061b      	lsls	r3, r3, #24
    5058:	001a      	movs	r2, r3
    505a:	23f0      	movs	r3, #240	; 0xf0
    505c:	051b      	lsls	r3, r3, #20
    505e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5060:	697b      	ldr	r3, [r7, #20]
    5062:	785b      	ldrb	r3, [r3, #1]
    5064:	041b      	lsls	r3, r3, #16
    5066:	0019      	movs	r1, r3
    5068:	23ff      	movs	r3, #255	; 0xff
    506a:	041b      	lsls	r3, r3, #16
    506c:	400b      	ands	r3, r1
    506e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	2b00      	cmp	r3, #0
    5076:	d001      	beq.n	507c <_tcc_build_faults+0x84>
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	e000      	b.n	507e <_tcc_build_faults+0x86>
    507c:	2300      	movs	r3, #0
    507e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5080:	697b      	ldr	r3, [r7, #20]
    5082:	78db      	ldrb	r3, [r3, #3]
    5084:	2b00      	cmp	r3, #0
    5086:	d001      	beq.n	508c <_tcc_build_faults+0x94>
    5088:	2308      	movs	r3, #8
    508a:	e000      	b.n	508e <_tcc_build_faults+0x96>
    508c:	2300      	movs	r3, #0
    508e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	791b      	ldrb	r3, [r3, #4]
    5094:	2b00      	cmp	r3, #0
    5096:	d001      	beq.n	509c <_tcc_build_faults+0xa4>
    5098:	2310      	movs	r3, #16
    509a:	e000      	b.n	509e <_tcc_build_faults+0xa6>
    509c:	2300      	movs	r3, #0
    509e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    50a0:	697b      	ldr	r3, [r7, #20]
    50a2:	795b      	ldrb	r3, [r3, #5]
    50a4:	0019      	movs	r1, r3
    50a6:	2303      	movs	r3, #3
    50a8:	400b      	ands	r3, r1
    50aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    50ac:	697b      	ldr	r3, [r7, #20]
    50ae:	799b      	ldrb	r3, [r3, #6]
    50b0:	015b      	lsls	r3, r3, #5
    50b2:	0019      	movs	r1, r3
    50b4:	2360      	movs	r3, #96	; 0x60
    50b6:	400b      	ands	r3, r1
    50b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    50ba:	697b      	ldr	r3, [r7, #20]
    50bc:	79db      	ldrb	r3, [r3, #7]
    50be:	021b      	lsls	r3, r3, #8
    50c0:	0019      	movs	r1, r3
    50c2:	23c0      	movs	r3, #192	; 0xc0
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	400b      	ands	r3, r1
    50c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    50ca:	697b      	ldr	r3, [r7, #20]
    50cc:	7a1b      	ldrb	r3, [r3, #8]
    50ce:	031b      	lsls	r3, r3, #12
    50d0:	0019      	movs	r1, r3
    50d2:	23e0      	movs	r3, #224	; 0xe0
    50d4:	01db      	lsls	r3, r3, #7
    50d6:	400b      	ands	r3, r1
    50d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    50da:	697b      	ldr	r3, [r7, #20]
    50dc:	7a5b      	ldrb	r3, [r3, #9]
    50de:	029b      	lsls	r3, r3, #10
    50e0:	0019      	movs	r1, r3
    50e2:	23c0      	movs	r3, #192	; 0xc0
    50e4:	011b      	lsls	r3, r3, #4
    50e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    50e8:	4313      	orrs	r3, r2
    50ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    50ec:	69fb      	ldr	r3, [r7, #28]
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	693a      	ldr	r2, [r7, #16]
    50f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    50f8:	69fb      	ldr	r3, [r7, #28]
    50fa:	3301      	adds	r3, #1
    50fc:	61fb      	str	r3, [r7, #28]
    50fe:	69fb      	ldr	r3, [r7, #28]
    5100:	2b01      	cmp	r3, #1
    5102:	dd8d      	ble.n	5020 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    5104:	2300      	movs	r3, #0
}
    5106:	0018      	movs	r0, r3
    5108:	46bd      	mov	sp, r7
    510a:	b008      	add	sp, #32
    510c:	bd80      	pop	{r7, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	0001729c 	.word	0x0001729c

00005114 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    5114:	b580      	push	{r7, lr}
    5116:	b088      	sub	sp, #32
    5118:	af00      	add	r7, sp, #0
    511a:	60b9      	str	r1, [r7, #8]
    511c:	607a      	str	r2, [r7, #4]
    511e:	230f      	movs	r3, #15
    5120:	18fb      	adds	r3, r7, r3
    5122:	1c02      	adds	r2, r0, #0
    5124:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5126:	230f      	movs	r3, #15
    5128:	18fb      	adds	r3, r7, r3
    512a:	781a      	ldrb	r2, [r3, #0]
    512c:	2317      	movs	r3, #23
    512e:	18fb      	adds	r3, r7, r3
    5130:	492d      	ldr	r1, [pc, #180]	; (51e8 <_tcc_build_drvctrl+0xd4>)
    5132:	5c8a      	ldrb	r2, [r1, r2]
    5134:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    5136:	2300      	movs	r3, #0
    5138:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    513a:	2300      	movs	r3, #0
    513c:	61fb      	str	r3, [r7, #28]
    513e:	e048      	b.n	51d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    5140:	68ba      	ldr	r2, [r7, #8]
    5142:	2150      	movs	r1, #80	; 0x50
    5144:	69fb      	ldr	r3, [r7, #28]
    5146:	18d3      	adds	r3, r2, r3
    5148:	185b      	adds	r3, r3, r1
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d010      	beq.n	5172 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    5150:	2317      	movs	r3, #23
    5152:	18fb      	adds	r3, r7, r3
    5154:	781a      	ldrb	r2, [r3, #0]
    5156:	69fb      	ldr	r3, [r7, #28]
    5158:	429a      	cmp	r2, r3
    515a:	d801      	bhi.n	5160 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    515c:	2317      	movs	r3, #23
    515e:	e03f      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	025a      	lsls	r2, r3, #9
    5164:	69fb      	ldr	r3, [r7, #28]
    5166:	409a      	lsls	r2, r3
    5168:	0013      	movs	r3, r2
    516a:	001a      	movs	r2, r3
    516c:	69bb      	ldr	r3, [r7, #24]
    516e:	4313      	orrs	r3, r2
    5170:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5172:	68ba      	ldr	r2, [r7, #8]
    5174:	69fb      	ldr	r3, [r7, #28]
    5176:	331c      	adds	r3, #28
    5178:	005b      	lsls	r3, r3, #1
    517a:	18d3      	adds	r3, r2, r3
    517c:	3309      	adds	r3, #9
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d023      	beq.n	51cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5184:	2317      	movs	r3, #23
    5186:	18fb      	adds	r3, r7, r3
    5188:	781a      	ldrb	r2, [r3, #0]
    518a:	69fb      	ldr	r3, [r7, #28]
    518c:	429a      	cmp	r2, r3
    518e:	d801      	bhi.n	5194 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    5190:	2317      	movs	r3, #23
    5192:	e025      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5194:	68ba      	ldr	r2, [r7, #8]
    5196:	69fb      	ldr	r3, [r7, #28]
    5198:	331c      	adds	r3, #28
    519a:	005b      	lsls	r3, r3, #1
    519c:	18d3      	adds	r3, r2, r3
    519e:	3309      	adds	r3, #9
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	2b02      	cmp	r3, #2
    51a4:	d10a      	bne.n	51bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    51a6:	2302      	movs	r3, #2
    51a8:	33ff      	adds	r3, #255	; 0xff
    51aa:	001a      	movs	r2, r3
    51ac:	69fb      	ldr	r3, [r7, #28]
    51ae:	409a      	lsls	r2, r3
    51b0:	0013      	movs	r3, r2
    51b2:	001a      	movs	r2, r3
    51b4:	69bb      	ldr	r3, [r7, #24]
    51b6:	4313      	orrs	r3, r2
    51b8:	61bb      	str	r3, [r7, #24]
    51ba:	e007      	b.n	51cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    51bc:	2201      	movs	r2, #1
    51be:	69fb      	ldr	r3, [r7, #28]
    51c0:	409a      	lsls	r2, r3
    51c2:	0013      	movs	r3, r2
    51c4:	001a      	movs	r2, r3
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	4313      	orrs	r3, r2
    51ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    51cc:	69fb      	ldr	r3, [r7, #28]
    51ce:	3301      	adds	r3, #1
    51d0:	61fb      	str	r3, [r7, #28]
    51d2:	69fb      	ldr	r3, [r7, #28]
    51d4:	2b07      	cmp	r3, #7
    51d6:	d9b3      	bls.n	5140 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	69ba      	ldr	r2, [r7, #24]
    51dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    51de:	2300      	movs	r3, #0
}
    51e0:	0018      	movs	r0, r3
    51e2:	46bd      	mov	sp, r7
    51e4:	b008      	add	sp, #32
    51e6:	bd80      	pop	{r7, pc}
    51e8:	000172a0 	.word	0x000172a0

000051ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    51ec:	b580      	push	{r7, lr}
    51ee:	b088      	sub	sp, #32
    51f0:	af00      	add	r7, sp, #0
    51f2:	60b9      	str	r1, [r7, #8]
    51f4:	607a      	str	r2, [r7, #4]
    51f6:	230f      	movs	r3, #15
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	1c02      	adds	r2, r0, #0
    51fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    51fe:	230f      	movs	r3, #15
    5200:	18fb      	adds	r3, r7, r3
    5202:	781a      	ldrb	r2, [r3, #0]
    5204:	2317      	movs	r3, #23
    5206:	18fb      	adds	r3, r7, r3
    5208:	491d      	ldr	r1, [pc, #116]	; (5280 <_tcc_build_waves+0x94>)
    520a:	5c8a      	ldrb	r2, [r1, r2]
    520c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	3310      	adds	r3, #16
    5212:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5214:	693b      	ldr	r3, [r7, #16]
    5216:	7a5b      	ldrb	r3, [r3, #9]
    5218:	011b      	lsls	r3, r3, #4
    521a:	001a      	movs	r2, r3
    521c:	2330      	movs	r3, #48	; 0x30
    521e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5220:	693b      	ldr	r3, [r7, #16]
    5222:	7a1b      	ldrb	r3, [r3, #8]
    5224:	0019      	movs	r1, r3
    5226:	2307      	movs	r3, #7
    5228:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    522a:	4313      	orrs	r3, r2
    522c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    522e:	2300      	movs	r3, #0
    5230:	61fb      	str	r3, [r7, #28]
    5232:	e01a      	b.n	526a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    5234:	693a      	ldr	r2, [r7, #16]
    5236:	69fb      	ldr	r3, [r7, #28]
    5238:	18d3      	adds	r3, r2, r3
    523a:	3304      	adds	r3, #4
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d010      	beq.n	5264 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    5242:	2317      	movs	r3, #23
    5244:	18fb      	adds	r3, r7, r3
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	69fb      	ldr	r3, [r7, #28]
    524a:	429a      	cmp	r2, r3
    524c:	dc01      	bgt.n	5252 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    524e:	2317      	movs	r3, #23
    5250:	e012      	b.n	5278 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    5252:	2380      	movs	r3, #128	; 0x80
    5254:	025a      	lsls	r2, r3, #9
    5256:	69fb      	ldr	r3, [r7, #28]
    5258:	409a      	lsls	r2, r3
    525a:	0013      	movs	r3, r2
    525c:	001a      	movs	r2, r3
    525e:	69bb      	ldr	r3, [r7, #24]
    5260:	4313      	orrs	r3, r2
    5262:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5264:	69fb      	ldr	r3, [r7, #28]
    5266:	3301      	adds	r3, #1
    5268:	61fb      	str	r3, [r7, #28]
    526a:	69fb      	ldr	r3, [r7, #28]
    526c:	2b03      	cmp	r3, #3
    526e:	dde1      	ble.n	5234 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	69ba      	ldr	r2, [r7, #24]
    5274:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    5276:	2300      	movs	r3, #0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b008      	add	sp, #32
    527e:	bd80      	pop	{r7, pc}
    5280:	0001729c 	.word	0x0001729c

00005284 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5284:	b590      	push	{r4, r7, lr}
    5286:	b091      	sub	sp, #68	; 0x44
    5288:	af00      	add	r7, sp, #0
    528a:	60f8      	str	r0, [r7, #12]
    528c:	60b9      	str	r1, [r7, #8]
    528e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5290:	233b      	movs	r3, #59	; 0x3b
    5292:	18fc      	adds	r4, r7, r3
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	0018      	movs	r0, r3
    5298:	4bc4      	ldr	r3, [pc, #784]	; (55ac <tcc_init+0x328>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    52a0:	233b      	movs	r3, #59	; 0x3b
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	781a      	ldrb	r2, [r3, #0]
    52a6:	4bc2      	ldr	r3, [pc, #776]	; (55b0 <tcc_init+0x32c>)
    52a8:	0092      	lsls	r2, r2, #2
    52aa:	58d3      	ldr	r3, [r2, r3]
    52ac:	0019      	movs	r1, r3
    52ae:	2002      	movs	r0, #2
    52b0:	4bc0      	ldr	r3, [pc, #768]	; (55b4 <tcc_init+0x330>)
    52b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52b4:	68bb      	ldr	r3, [r7, #8]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2202      	movs	r2, #2
    52ba:	4013      	ands	r3, r2
    52bc:	d001      	beq.n	52c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    52be:	231c      	movs	r3, #28
    52c0:	e1be      	b.n	5640 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2201      	movs	r2, #1
    52c8:	4013      	ands	r3, r2
    52ca:	d001      	beq.n	52d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    52cc:	231c      	movs	r3, #28
    52ce:	e1b7      	b.n	5640 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    52d0:	233b      	movs	r3, #59	; 0x3b
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	4bb8      	ldr	r3, [pc, #736]	; (55b8 <tcc_init+0x334>)
    52d8:	0092      	lsls	r2, r2, #2
    52da:	58d3      	ldr	r3, [r2, r3]
    52dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52e4:	429a      	cmp	r2, r3
    52e6:	d804      	bhi.n	52f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ee:	429a      	cmp	r2, r3
    52f0:	d901      	bls.n	52f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    52f2:	2317      	movs	r3, #23
    52f4:	e1a4      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    52f6:	2300      	movs	r3, #0
    52f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    52fa:	e00e      	b.n	531a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    52fc:	687a      	ldr	r2, [r7, #4]
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	3306      	adds	r3, #6
    5302:	009b      	lsls	r3, r3, #2
    5304:	18d3      	adds	r3, r2, r3
    5306:	3304      	adds	r3, #4
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    530c:	429a      	cmp	r2, r3
    530e:	d901      	bls.n	5314 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    5310:	2317      	movs	r3, #23
    5312:	e195      	b.n	5640 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5316:	3301      	adds	r3, #1
    5318:	63fb      	str	r3, [r7, #60]	; 0x3c
    531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    531c:	2b03      	cmp	r3, #3
    531e:	dded      	ble.n	52fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5320:	2300      	movs	r3, #0
    5322:	63fb      	str	r3, [r7, #60]	; 0x3c
    5324:	e019      	b.n	535a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	2198      	movs	r1, #152	; 0x98
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	18d3      	adds	r3, r2, r3
    532e:	185b      	adds	r3, r3, r1
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2201      	movs	r2, #1
    5334:	4053      	eors	r3, r2
    5336:	b2db      	uxtb	r3, r3
    5338:	2b00      	cmp	r3, #0
    533a:	d10a      	bne.n	5352 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    533c:	233b      	movs	r3, #59	; 0x3b
    533e:	18fb      	adds	r3, r7, r3
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	4a9e      	ldr	r2, [pc, #632]	; (55bc <tcc_init+0x338>)
    5344:	5cd3      	ldrb	r3, [r2, r3]
    5346:	001a      	movs	r2, r3
    5348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    534a:	429a      	cmp	r2, r3
    534c:	dc02      	bgt.n	5354 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    534e:	2317      	movs	r3, #23
    5350:	e176      	b.n	5640 <tcc_init+0x3bc>
			continue;
    5352:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5356:	3301      	adds	r3, #1
    5358:	63fb      	str	r3, [r7, #60]	; 0x3c
    535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    535c:	2b07      	cmp	r3, #7
    535e:	dde2      	ble.n	5326 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    5360:	2300      	movs	r3, #0
    5362:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    5364:	2333      	movs	r3, #51	; 0x33
    5366:	18fc      	adds	r4, r7, r3
    5368:	232c      	movs	r3, #44	; 0x2c
    536a:	18fa      	adds	r2, r7, r3
    536c:	6879      	ldr	r1, [r7, #4]
    536e:	233b      	movs	r3, #59	; 0x3b
    5370:	18fb      	adds	r3, r7, r3
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	0018      	movs	r0, r3
    5376:	4b92      	ldr	r3, [pc, #584]	; (55c0 <tcc_init+0x33c>)
    5378:	4798      	blx	r3
    537a:	0003      	movs	r3, r0
    537c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    537e:	2333      	movs	r3, #51	; 0x33
    5380:	18fb      	adds	r3, r7, r3
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	d003      	beq.n	5390 <tcc_init+0x10c>
		return status;
    5388:	2333      	movs	r3, #51	; 0x33
    538a:	18fb      	adds	r3, r7, r3
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	e157      	b.n	5640 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    5390:	232b      	movs	r3, #43	; 0x2b
    5392:	18fa      	adds	r2, r7, r3
    5394:	6879      	ldr	r1, [r7, #4]
    5396:	233b      	movs	r3, #59	; 0x3b
    5398:	18fb      	adds	r3, r7, r3
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	0018      	movs	r0, r3
    539e:	4b89      	ldr	r3, [pc, #548]	; (55c4 <tcc_init+0x340>)
    53a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    53a2:	2333      	movs	r3, #51	; 0x33
    53a4:	18fc      	adds	r4, r7, r3
    53a6:	2320      	movs	r3, #32
    53a8:	18fa      	adds	r2, r7, r3
    53aa:	6879      	ldr	r1, [r7, #4]
    53ac:	233b      	movs	r3, #59	; 0x3b
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	0018      	movs	r0, r3
    53b4:	4b84      	ldr	r3, [pc, #528]	; (55c8 <tcc_init+0x344>)
    53b6:	4798      	blx	r3
    53b8:	0003      	movs	r3, r0
    53ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53bc:	2333      	movs	r3, #51	; 0x33
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <tcc_init+0x14a>
		return status;
    53c6:	2333      	movs	r3, #51	; 0x33
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	e138      	b.n	5640 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    53ce:	2300      	movs	r3, #0
    53d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    53d2:	2333      	movs	r3, #51	; 0x33
    53d4:	18fc      	adds	r4, r7, r3
    53d6:	231c      	movs	r3, #28
    53d8:	18fa      	adds	r2, r7, r3
    53da:	6879      	ldr	r1, [r7, #4]
    53dc:	233b      	movs	r3, #59	; 0x3b
    53de:	18fb      	adds	r3, r7, r3
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	0018      	movs	r0, r3
    53e4:	4b79      	ldr	r3, [pc, #484]	; (55cc <tcc_init+0x348>)
    53e6:	4798      	blx	r3
    53e8:	0003      	movs	r3, r0
    53ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53ec:	2333      	movs	r3, #51	; 0x33
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d003      	beq.n	53fe <tcc_init+0x17a>
		return status;
    53f6:	2333      	movs	r3, #51	; 0x33
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	e120      	b.n	5640 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    53fe:	2333      	movs	r3, #51	; 0x33
    5400:	18fc      	adds	r4, r7, r3
    5402:	2318      	movs	r3, #24
    5404:	18fa      	adds	r2, r7, r3
    5406:	6879      	ldr	r1, [r7, #4]
    5408:	233b      	movs	r3, #59	; 0x3b
    540a:	18fb      	adds	r3, r7, r3
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	0018      	movs	r0, r3
    5410:	4b6f      	ldr	r3, [pc, #444]	; (55d0 <tcc_init+0x34c>)
    5412:	4798      	blx	r3
    5414:	0003      	movs	r3, r0
    5416:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    5418:	2333      	movs	r3, #51	; 0x33
    541a:	18fb      	adds	r3, r7, r3
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d003      	beq.n	542a <tcc_init+0x1a6>
		return status;
    5422:	2333      	movs	r3, #51	; 0x33
    5424:	18fb      	adds	r3, r7, r3
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	e10a      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    542a:	2300      	movs	r3, #0
    542c:	63fb      	str	r3, [r7, #60]	; 0x3c
    542e:	e009      	b.n	5444 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    5430:	68fa      	ldr	r2, [r7, #12]
    5432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5434:	009b      	lsls	r3, r3, #2
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
    543a:	2200      	movs	r2, #0
    543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5440:	3301      	adds	r3, #1
    5442:	63fb      	str	r3, [r7, #60]	; 0x3c
    5444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5446:	2b0b      	cmp	r3, #11
    5448:	ddf2      	ble.n	5430 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    544a:	68fb      	ldr	r3, [r7, #12]
    544c:	2200      	movs	r2, #0
    544e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	2200      	movs	r2, #0
    5454:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5456:	233b      	movs	r3, #59	; 0x3b
    5458:	18fb      	adds	r3, r7, r3
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	4b5d      	ldr	r3, [pc, #372]	; (55d4 <tcc_init+0x350>)
    545e:	0092      	lsls	r2, r2, #2
    5460:	68f9      	ldr	r1, [r7, #12]
    5462:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	68ba      	ldr	r2, [r7, #8]
    5468:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	22a0      	movs	r2, #160	; 0xa0
    546e:	5c99      	ldrb	r1, [r3, r2]
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	223c      	movs	r2, #60	; 0x3c
    5474:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5476:	2314      	movs	r3, #20
    5478:	18fb      	adds	r3, r7, r3
    547a:	0018      	movs	r0, r3
    547c:	4b56      	ldr	r3, [pc, #344]	; (55d8 <tcc_init+0x354>)
    547e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	7a9a      	ldrb	r2, [r3, #10]
    5484:	2314      	movs	r3, #20
    5486:	18fb      	adds	r3, r7, r3
    5488:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    548a:	233b      	movs	r3, #59	; 0x3b
    548c:	18fb      	adds	r3, r7, r3
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	4a52      	ldr	r2, [pc, #328]	; (55dc <tcc_init+0x358>)
    5492:	5cd3      	ldrb	r3, [r2, r3]
    5494:	2214      	movs	r2, #20
    5496:	18ba      	adds	r2, r7, r2
    5498:	0011      	movs	r1, r2
    549a:	0018      	movs	r0, r3
    549c:	4b50      	ldr	r3, [pc, #320]	; (55e0 <tcc_init+0x35c>)
    549e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    54a0:	233b      	movs	r3, #59	; 0x3b
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	4a4d      	ldr	r2, [pc, #308]	; (55dc <tcc_init+0x358>)
    54a8:	5cd3      	ldrb	r3, [r2, r3]
    54aa:	0018      	movs	r0, r3
    54ac:	4b4d      	ldr	r3, [pc, #308]	; (55e4 <tcc_init+0x360>)
    54ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    54b0:	2300      	movs	r3, #0
    54b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    54b4:	e02d      	b.n	5512 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    54b6:	687a      	ldr	r2, [r7, #4]
    54b8:	2198      	movs	r1, #152	; 0x98
    54ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54bc:	18d3      	adds	r3, r2, r3
    54be:	185b      	adds	r3, r3, r1
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	2201      	movs	r2, #1
    54c4:	4053      	eors	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	2b00      	cmp	r3, #0
    54ca:	d11e      	bne.n	550a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    54cc:	2310      	movs	r3, #16
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	0018      	movs	r0, r3
    54d2:	4b45      	ldr	r3, [pc, #276]	; (55e8 <tcc_init+0x364>)
    54d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54da:	321e      	adds	r2, #30
    54dc:	0092      	lsls	r2, r2, #2
    54de:	58d3      	ldr	r3, [r2, r3]
    54e0:	b2da      	uxtb	r2, r3
    54e2:	2310      	movs	r3, #16
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54e8:	2310      	movs	r3, #16
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	2201      	movs	r2, #1
    54ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f4:	3216      	adds	r2, #22
    54f6:	0092      	lsls	r2, r2, #2
    54f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2210      	movs	r2, #16
    54fe:	18ba      	adds	r2, r7, r2
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b39      	ldr	r3, [pc, #228]	; (55ec <tcc_init+0x368>)
    5506:	4798      	blx	r3
    5508:	e000      	b.n	550c <tcc_init+0x288>
			continue;
    550a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    550e:	3301      	adds	r3, #1
    5510:	63fb      	str	r3, [r7, #60]	; 0x3c
    5512:	233b      	movs	r3, #59	; 0x3b
    5514:	18fb      	adds	r3, r7, r3
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	4a28      	ldr	r2, [pc, #160]	; (55bc <tcc_init+0x338>)
    551a:	5cd3      	ldrb	r3, [r2, r3]
    551c:	001a      	movs	r2, r3
    551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5520:	429a      	cmp	r2, r3
    5522:	dcc8      	bgt.n	54b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    5524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	68bb      	ldr	r3, [r7, #8]
    552e:	689b      	ldr	r3, [r3, #8]
    5530:	2204      	movs	r2, #4
    5532:	4013      	ands	r3, r2
    5534:	d1fa      	bne.n	552c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    5536:	68bb      	ldr	r3, [r7, #8]
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    553c:	46c0      	nop			; (mov r8, r8)
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	689b      	ldr	r3, [r3, #8]
    5542:	2204      	movs	r2, #4
    5544:	4013      	ands	r3, r2
    5546:	d1fa      	bne.n	553e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    5548:	232b      	movs	r3, #43	; 0x2b
    554a:	18fb      	adds	r3, r7, r3
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    5552:	2320      	movs	r3, #32
    5554:	18fb      	adds	r3, r7, r3
    5556:	681a      	ldr	r2, [r3, #0]
    5558:	68bb      	ldr	r3, [r7, #8]
    555a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    555c:	2320      	movs	r3, #32
    555e:	18fb      	adds	r3, r7, r3
    5560:	685a      	ldr	r2, [r3, #4]
    5562:	68bb      	ldr	r3, [r7, #8]
    5564:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    5566:	69fa      	ldr	r2, [r7, #28]
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    556c:	46c0      	nop			; (mov r8, r8)
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	689b      	ldr	r3, [r3, #8]
    5572:	4a1f      	ldr	r2, [pc, #124]	; (55f0 <tcc_init+0x36c>)
    5574:	4013      	ands	r3, r2
    5576:	d1fa      	bne.n	556e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    5578:	69ba      	ldr	r2, [r7, #24]
    557a:	68bb      	ldr	r3, [r7, #8]
    557c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	68bb      	ldr	r3, [r7, #8]
    5582:	689b      	ldr	r3, [r3, #8]
    5584:	2210      	movs	r2, #16
    5586:	4013      	ands	r3, r2
    5588:	d1fa      	bne.n	5580 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	689b      	ldr	r3, [r3, #8]
    5598:	4a16      	ldr	r2, [pc, #88]	; (55f4 <tcc_init+0x370>)
    559a:	4013      	ands	r3, r2
    559c:	d1fa      	bne.n	5594 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685a      	ldr	r2, [r3, #4]
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    55a6:	2300      	movs	r3, #0
    55a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    55aa:	e03f      	b.n	562c <tcc_init+0x3a8>
    55ac:	00004bed 	.word	0x00004bed
    55b0:	00017284 	.word	0x00017284
    55b4:	00004b69 	.word	0x00004b69
    55b8:	00017290 	.word	0x00017290
    55bc:	000172a0 	.word	0x000172a0
    55c0:	00004ef9 	.word	0x00004ef9
    55c4:	00004f9d 	.word	0x00004f9d
    55c8:	00004ff9 	.word	0x00004ff9
    55cc:	00005115 	.word	0x00005115
    55d0:	000051ed 	.word	0x000051ed
    55d4:	20000450 	.word	0x20000450
    55d8:	00004b51 	.word	0x00004b51
    55dc:	00017280 	.word	0x00017280
    55e0:	00007b31 	.word	0x00007b31
    55e4:	00007b75 	.word	0x00007b75
    55e8:	00004bc5 	.word	0x00004bc5
    55ec:	00007e1d 	.word	0x00007e1d
    55f0:	00020040 	.word	0x00020040
    55f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    55f8:	46c0      	nop			; (mov r8, r8)
    55fa:	68bb      	ldr	r3, [r7, #8]
    55fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    55fe:	4912      	ldr	r1, [pc, #72]	; (5648 <tcc_init+0x3c4>)
    5600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5602:	4091      	lsls	r1, r2
    5604:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    5606:	4013      	ands	r3, r2
    5608:	d1f7      	bne.n	55fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    560e:	3306      	adds	r3, #6
    5610:	009b      	lsls	r3, r3, #2
    5612:	18d3      	adds	r3, r2, r3
    5614:	3304      	adds	r3, #4
    5616:	681a      	ldr	r2, [r3, #0]
    5618:	68b9      	ldr	r1, [r7, #8]
    561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    561c:	3310      	adds	r3, #16
    561e:	009b      	lsls	r3, r3, #2
    5620:	18cb      	adds	r3, r1, r3
    5622:	3304      	adds	r3, #4
    5624:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5628:	3301      	adds	r3, #1
    562a:	63fb      	str	r3, [r7, #60]	; 0x3c
    562c:	233b      	movs	r3, #59	; 0x3b
    562e:	18fb      	adds	r3, r7, r3
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	4a06      	ldr	r2, [pc, #24]	; (564c <tcc_init+0x3c8>)
    5634:	5cd3      	ldrb	r3, [r2, r3]
    5636:	001a      	movs	r2, r3
    5638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    563a:	429a      	cmp	r2, r3
    563c:	dcdc      	bgt.n	55f8 <tcc_init+0x374>
	}

	return STATUS_OK;
    563e:	2300      	movs	r3, #0
}
    5640:	0018      	movs	r0, r3
    5642:	46bd      	mov	sp, r7
    5644:	b011      	add	sp, #68	; 0x44
    5646:	bd90      	pop	{r4, r7, pc}
    5648:	00080100 	.word	0x00080100
    564c:	0001729c 	.word	0x0001729c

00005650 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    5650:	b590      	push	{r4, r7, lr}
    5652:	b089      	sub	sp, #36	; 0x24
    5654:	af00      	add	r7, sp, #0
    5656:	60f8      	str	r0, [r7, #12]
    5658:	0008      	movs	r0, r1
    565a:	607a      	str	r2, [r7, #4]
    565c:	0019      	movs	r1, r3
    565e:	230b      	movs	r3, #11
    5660:	18fb      	adds	r3, r7, r3
    5662:	1c02      	adds	r2, r0, #0
    5664:	701a      	strb	r2, [r3, #0]
    5666:	230a      	movs	r3, #10
    5668:	18fb      	adds	r3, r7, r3
    566a:	1c0a      	adds	r2, r1, #0
    566c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    5674:	231b      	movs	r3, #27
    5676:	18fc      	adds	r4, r7, r3
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	0018      	movs	r0, r3
    567c:	4b28      	ldr	r3, [pc, #160]	; (5720 <_tcc_set_compare_value+0xd0>)
    567e:	4798      	blx	r3
    5680:	0003      	movs	r3, r0
    5682:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    5684:	231b      	movs	r3, #27
    5686:	18fb      	adds	r3, r7, r3
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	4a26      	ldr	r2, [pc, #152]	; (5724 <_tcc_set_compare_value+0xd4>)
    568c:	5cd3      	ldrb	r3, [r2, r3]
    568e:	220b      	movs	r2, #11
    5690:	18ba      	adds	r2, r7, r2
    5692:	7812      	ldrb	r2, [r2, #0]
    5694:	429a      	cmp	r2, r3
    5696:	d301      	bcc.n	569c <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    5698:	2317      	movs	r3, #23
    569a:	e03d      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    569c:	231b      	movs	r3, #27
    569e:	18fb      	adds	r3, r7, r3
    56a0:	781a      	ldrb	r2, [r3, #0]
    56a2:	4b21      	ldr	r3, [pc, #132]	; (5728 <_tcc_set_compare_value+0xd8>)
    56a4:	0092      	lsls	r2, r2, #2
    56a6:	58d3      	ldr	r3, [r2, r3]
    56a8:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	697b      	ldr	r3, [r7, #20]
    56ae:	429a      	cmp	r2, r3
    56b0:	d901      	bls.n	56b6 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    56b2:	2317      	movs	r3, #23
    56b4:	e030      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    56b6:	230a      	movs	r3, #10
    56b8:	18fb      	adds	r3, r7, r3
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d014      	beq.n	56ea <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    56c0:	46c0      	nop			; (mov r8, r8)
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    56c6:	220b      	movs	r2, #11
    56c8:	18ba      	adds	r2, r7, r2
    56ca:	7812      	ldrb	r2, [r2, #0]
    56cc:	2180      	movs	r1, #128	; 0x80
    56ce:	0309      	lsls	r1, r1, #12
    56d0:	4091      	lsls	r1, r2
    56d2:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
    56d4:	4013      	ands	r3, r2
    56d6:	d1f4      	bne.n	56c2 <_tcc_set_compare_value+0x72>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    56d8:	230b      	movs	r3, #11
    56da:	18fb      	adds	r3, r7, r3
    56dc:	781a      	ldrb	r2, [r3, #0]
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	321c      	adds	r2, #28
    56e2:	0092      	lsls	r2, r2, #2
    56e4:	6879      	ldr	r1, [r7, #4]
    56e6:	50d1      	str	r1, [r2, r3]
    56e8:	e015      	b.n	5716 <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	69fb      	ldr	r3, [r7, #28]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	220b      	movs	r2, #11
    56f2:	18ba      	adds	r2, r7, r2
    56f4:	7812      	ldrb	r2, [r2, #0]
    56f6:	2180      	movs	r1, #128	; 0x80
    56f8:	0049      	lsls	r1, r1, #1
    56fa:	4091      	lsls	r1, r2
    56fc:	000a      	movs	r2, r1
    56fe:	4013      	ands	r3, r2
    5700:	d1f4      	bne.n	56ec <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    5702:	230b      	movs	r3, #11
    5704:	18fb      	adds	r3, r7, r3
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	69fa      	ldr	r2, [r7, #28]
    570a:	3310      	adds	r3, #16
    570c:	009b      	lsls	r3, r3, #2
    570e:	18d3      	adds	r3, r2, r3
    5710:	3304      	adds	r3, #4
    5712:	687a      	ldr	r2, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    5716:	2300      	movs	r3, #0
}
    5718:	0018      	movs	r0, r3
    571a:	46bd      	mov	sp, r7
    571c:	b009      	add	sp, #36	; 0x24
    571e:	bd90      	pop	{r4, r7, pc}
    5720:	00004bed 	.word	0x00004bed
    5724:	0001729c 	.word	0x0001729c
    5728:	00017290 	.word	0x00017290

0000572c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    572c:	b590      	push	{r4, r7, lr}
    572e:	b085      	sub	sp, #20
    5730:	af00      	add	r7, sp, #0
    5732:	60f8      	str	r0, [r7, #12]
    5734:	607a      	str	r2, [r7, #4]
    5736:	230b      	movs	r3, #11
    5738:	18fb      	adds	r3, r7, r3
    573a:	1c0a      	adds	r2, r1, #0
    573c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	223c      	movs	r2, #60	; 0x3c
    5742:	5c9c      	ldrb	r4, [r3, r2]
    5744:	687a      	ldr	r2, [r7, #4]
    5746:	230b      	movs	r3, #11
    5748:	18fb      	adds	r3, r7, r3
    574a:	7819      	ldrb	r1, [r3, #0]
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	0023      	movs	r3, r4
    5750:	4c03      	ldr	r4, [pc, #12]	; (5760 <tcc_set_compare_value+0x34>)
    5752:	47a0      	blx	r4
    5754:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    5756:	0018      	movs	r0, r3
    5758:	46bd      	mov	sp, r7
    575a:	b005      	add	sp, #20
    575c:	bd90      	pop	{r4, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	00005651 	.word	0x00005651

00005764 <system_gclk_chan_get_config_defaults>:
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	2200      	movs	r2, #0
    5770:	701a      	strb	r2, [r3, #0]
}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	46bd      	mov	sp, r7
    5776:	b002      	add	sp, #8
    5778:	bd80      	pop	{r7, pc}
	...

0000577c <system_apb_clock_set_mask>:
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	0002      	movs	r2, r0
    5784:	6039      	str	r1, [r7, #0]
    5786:	1dfb      	adds	r3, r7, #7
    5788:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    578a:	1dfb      	adds	r3, r7, #7
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	2b01      	cmp	r3, #1
    5790:	d00a      	beq.n	57a8 <system_apb_clock_set_mask+0x2c>
    5792:	2b02      	cmp	r3, #2
    5794:	d00f      	beq.n	57b6 <system_apb_clock_set_mask+0x3a>
    5796:	2b00      	cmp	r3, #0
    5798:	d114      	bne.n	57c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579c:	4a0d      	ldr	r2, [pc, #52]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579e:	6991      	ldr	r1, [r2, #24]
    57a0:	683a      	ldr	r2, [r7, #0]
    57a2:	430a      	orrs	r2, r1
    57a4:	619a      	str	r2, [r3, #24]
			break;
    57a6:	e00f      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57aa:	4a0a      	ldr	r2, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ac:	69d1      	ldr	r1, [r2, #28]
    57ae:	683a      	ldr	r2, [r7, #0]
    57b0:	430a      	orrs	r2, r1
    57b2:	61da      	str	r2, [r3, #28]
			break;
    57b4:	e008      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    57b6:	4b07      	ldr	r3, [pc, #28]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57b8:	4a06      	ldr	r2, [pc, #24]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ba:	6a11      	ldr	r1, [r2, #32]
    57bc:	683a      	ldr	r2, [r7, #0]
    57be:	430a      	orrs	r2, r1
    57c0:	621a      	str	r2, [r3, #32]
			break;
    57c2:	e001      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    57c4:	2317      	movs	r3, #23
    57c6:	e000      	b.n	57ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    57c8:	2300      	movs	r3, #0
}
    57ca:	0018      	movs	r0, r3
    57cc:	46bd      	mov	sp, r7
    57ce:	b002      	add	sp, #8
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	40000400 	.word	0x40000400

000057d8 <system_pinmux_get_config_defaults>:
{
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2280      	movs	r2, #128	; 0x80
    57e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2200      	movs	r2, #0
    57ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	2201      	movs	r2, #1
    57f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	2200      	movs	r2, #0
    57f6:	70da      	strb	r2, [r3, #3]
}
    57f8:	46c0      	nop			; (mov r8, r8)
    57fa:	46bd      	mov	sp, r7
    57fc:	b002      	add	sp, #8
    57fe:	bd80      	pop	{r7, pc}

00005800 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5800:	b580      	push	{r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	7bdb      	ldrb	r3, [r3, #15]
    5812:	b2db      	uxtb	r3, r3
    5814:	001a      	movs	r2, r3
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	4013      	ands	r3, r2
    581a:	1e5a      	subs	r2, r3, #1
    581c:	4193      	sbcs	r3, r2
    581e:	b2db      	uxtb	r3, r3
#endif
}
    5820:	0018      	movs	r0, r3
    5822:	46bd      	mov	sp, r7
    5824:	b004      	add	sp, #16
    5826:	bd80      	pop	{r7, pc}

00005828 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5828:	b590      	push	{r4, r7, lr}
    582a:	b087      	sub	sp, #28
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5830:	2308      	movs	r3, #8
    5832:	18fb      	adds	r3, r7, r3
    5834:	4a0d      	ldr	r2, [pc, #52]	; (586c <_tc_get_inst_index+0x44>)
    5836:	ca13      	ldmia	r2!, {r0, r1, r4}
    5838:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    583a:	2300      	movs	r3, #0
    583c:	617b      	str	r3, [r7, #20]
    583e:	e00d      	b.n	585c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    5840:	2308      	movs	r3, #8
    5842:	18fb      	adds	r3, r7, r3
    5844:	697a      	ldr	r2, [r7, #20]
    5846:	0092      	lsls	r2, r2, #2
    5848:	58d2      	ldr	r2, [r2, r3]
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	429a      	cmp	r2, r3
    584e:	d102      	bne.n	5856 <_tc_get_inst_index+0x2e>
			return i;
    5850:	697b      	ldr	r3, [r7, #20]
    5852:	b2db      	uxtb	r3, r3
    5854:	e006      	b.n	5864 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5856:	697b      	ldr	r3, [r7, #20]
    5858:	3301      	adds	r3, #1
    585a:	617b      	str	r3, [r7, #20]
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2b02      	cmp	r3, #2
    5860:	d9ee      	bls.n	5840 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5862:	2300      	movs	r3, #0
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b007      	add	sp, #28
    586a:	bd90      	pop	{r4, r7, pc}
    586c:	000172a4 	.word	0x000172a4

00005870 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5870:	b590      	push	{r4, r7, lr}
    5872:	b08d      	sub	sp, #52	; 0x34
    5874:	af00      	add	r7, sp, #0
    5876:	60f8      	str	r0, [r7, #12]
    5878:	60b9      	str	r1, [r7, #8]
    587a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    587c:	232e      	movs	r3, #46	; 0x2e
    587e:	18fb      	adds	r3, r7, r3
    5880:	2200      	movs	r2, #0
    5882:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5884:	232d      	movs	r3, #45	; 0x2d
    5886:	18fb      	adds	r3, r7, r3
    5888:	2200      	movs	r2, #0
    588a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    588c:	232c      	movs	r3, #44	; 0x2c
    588e:	18fb      	adds	r3, r7, r3
    5890:	2200      	movs	r2, #0
    5892:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5894:	2329      	movs	r3, #41	; 0x29
    5896:	18fc      	adds	r4, r7, r3
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	0018      	movs	r0, r3
    589c:	4bbd      	ldr	r3, [pc, #756]	; (5b94 <tc_init+0x324>)
    589e:	4798      	blx	r3
    58a0:	0003      	movs	r3, r0
    58a2:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    58a4:	2324      	movs	r3, #36	; 0x24
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	4abb      	ldr	r2, [pc, #748]	; (5b98 <tc_init+0x328>)
    58aa:	8811      	ldrh	r1, [r2, #0]
    58ac:	8019      	strh	r1, [r3, #0]
    58ae:	7892      	ldrb	r2, [r2, #2]
    58b0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    58b2:	231c      	movs	r3, #28
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	4ab9      	ldr	r2, [pc, #740]	; (5b9c <tc_init+0x32c>)
    58b8:	6811      	ldr	r1, [r2, #0]
    58ba:	6019      	str	r1, [r3, #0]
    58bc:	8892      	ldrh	r2, [r2, #4]
    58be:	809a      	strh	r2, [r3, #4]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58c0:	232b      	movs	r3, #43	; 0x2b
    58c2:	18fb      	adds	r3, r7, r3
    58c4:	2200      	movs	r2, #0
    58c6:	701a      	strb	r2, [r3, #0]
    58c8:	e00e      	b.n	58e8 <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    58ca:	232b      	movs	r3, #43	; 0x2b
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	781a      	ldrb	r2, [r3, #0]
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	3202      	adds	r2, #2
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	2100      	movs	r1, #0
    58d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58da:	232b      	movs	r3, #43	; 0x2b
    58dc:	18fb      	adds	r3, r7, r3
    58de:	781a      	ldrb	r2, [r3, #0]
    58e0:	232b      	movs	r3, #43	; 0x2b
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	3201      	adds	r2, #1
    58e6:	701a      	strb	r2, [r3, #0]
    58e8:	232b      	movs	r3, #43	; 0x2b
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	2b03      	cmp	r3, #3
    58f0:	d9eb      	bls.n	58ca <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	2200      	movs	r2, #0
    58f6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	2200      	movs	r2, #0
    58fc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    58fe:	2329      	movs	r3, #41	; 0x29
    5900:	18fb      	adds	r3, r7, r3
    5902:	781a      	ldrb	r2, [r3, #0]
    5904:	4ba6      	ldr	r3, [pc, #664]	; (5ba0 <tc_init+0x330>)
    5906:	0092      	lsls	r2, r2, #2
    5908:	68f9      	ldr	r1, [r7, #12]
    590a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	68ba      	ldr	r2, [r7, #8]
    5910:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	789b      	ldrb	r3, [r3, #2]
    5916:	2b08      	cmp	r3, #8
    5918:	d108      	bne.n	592c <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    591a:	2329      	movs	r3, #41	; 0x29
    591c:	18fb      	adds	r3, r7, r3
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	3303      	adds	r3, #3
    5922:	2201      	movs	r2, #1
    5924:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5926:	d001      	beq.n	592c <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5928:	2317      	movs	r3, #23
    592a:	e1c2      	b.n	5cb2 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	789a      	ldrb	r2, [r3, #2]
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5934:	68bb      	ldr	r3, [r7, #8]
    5936:	881b      	ldrh	r3, [r3, #0]
    5938:	b29b      	uxth	r3, r3
    593a:	001a      	movs	r2, r3
    593c:	2301      	movs	r3, #1
    593e:	4013      	ands	r3, r2
    5940:	d001      	beq.n	5946 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5942:	2305      	movs	r3, #5
    5944:	e1b5      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5946:	68bb      	ldr	r3, [r7, #8]
    5948:	7bdb      	ldrb	r3, [r3, #15]
    594a:	b2db      	uxtb	r3, r3
    594c:	001a      	movs	r2, r3
    594e:	2310      	movs	r3, #16
    5950:	4013      	ands	r3, r2
    5952:	d001      	beq.n	5958 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5954:	231c      	movs	r3, #28
    5956:	e1ac      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5958:	68bb      	ldr	r3, [r7, #8]
    595a:	881b      	ldrh	r3, [r3, #0]
    595c:	b29b      	uxth	r3, r3
    595e:	001a      	movs	r2, r3
    5960:	2302      	movs	r3, #2
    5962:	4013      	ands	r3, r2
    5964:	d001      	beq.n	596a <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5966:	231c      	movs	r3, #28
    5968:	e1a3      	b.n	5cb2 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	7c1b      	ldrb	r3, [r3, #16]
    596e:	2b00      	cmp	r3, #0
    5970:	d017      	beq.n	59a2 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    5972:	2318      	movs	r3, #24
    5974:	18fb      	adds	r3, r7, r3
    5976:	0018      	movs	r0, r3
    5978:	4b8a      	ldr	r3, [pc, #552]	; (5ba4 <tc_init+0x334>)
    597a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	699b      	ldr	r3, [r3, #24]
    5980:	b2da      	uxtb	r2, r3
    5982:	2318      	movs	r3, #24
    5984:	18fb      	adds	r3, r7, r3
    5986:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5988:	2318      	movs	r3, #24
    598a:	18fb      	adds	r3, r7, r3
    598c:	2201      	movs	r2, #1
    598e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    5994:	b2db      	uxtb	r3, r3
    5996:	2218      	movs	r2, #24
    5998:	18ba      	adds	r2, r7, r2
    599a:	0011      	movs	r1, r2
    599c:	0018      	movs	r0, r3
    599e:	4b82      	ldr	r3, [pc, #520]	; (5ba8 <tc_init+0x338>)
    59a0:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	7f1b      	ldrb	r3, [r3, #28]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d017      	beq.n	59da <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    59aa:	2318      	movs	r3, #24
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	0018      	movs	r0, r3
    59b0:	4b7c      	ldr	r3, [pc, #496]	; (5ba4 <tc_init+0x334>)
    59b2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59b8:	b2da      	uxtb	r2, r3
    59ba:	2318      	movs	r3, #24
    59bc:	18fb      	adds	r3, r7, r3
    59be:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    59c0:	2318      	movs	r3, #24
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	2201      	movs	r2, #1
    59c6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    59cc:	b2db      	uxtb	r3, r3
    59ce:	2218      	movs	r2, #24
    59d0:	18ba      	adds	r2, r7, r2
    59d2:	0011      	movs	r1, r2
    59d4:	0018      	movs	r0, r3
    59d6:	4b74      	ldr	r3, [pc, #464]	; (5ba8 <tc_init+0x338>)
    59d8:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    59da:	2329      	movs	r3, #41	; 0x29
    59dc:	18fb      	adds	r3, r7, r3
    59de:	781a      	ldrb	r2, [r3, #0]
    59e0:	231c      	movs	r3, #28
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	0052      	lsls	r2, r2, #1
    59e6:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    59e8:	0019      	movs	r1, r3
    59ea:	2002      	movs	r0, #2
    59ec:	4b6f      	ldr	r3, [pc, #444]	; (5bac <tc_init+0x33c>)
    59ee:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	789b      	ldrb	r3, [r3, #2]
    59f4:	2b08      	cmp	r3, #8
    59f6:	d10b      	bne.n	5a10 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    59f8:	2329      	movs	r3, #41	; 0x29
    59fa:	18fb      	adds	r3, r7, r3
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	1c5a      	adds	r2, r3, #1
    5a00:	231c      	movs	r3, #28
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	0052      	lsls	r2, r2, #1
    5a06:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5a08:	0019      	movs	r1, r3
    5a0a:	2002      	movs	r0, #2
    5a0c:	4b67      	ldr	r3, [pc, #412]	; (5bac <tc_init+0x33c>)
    5a0e:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5a10:	2314      	movs	r3, #20
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	0018      	movs	r0, r3
    5a16:	4b66      	ldr	r3, [pc, #408]	; (5bb0 <tc_init+0x340>)
    5a18:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	2314      	movs	r3, #20
    5a20:	18fb      	adds	r3, r7, r3
    5a22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5a24:	2329      	movs	r3, #41	; 0x29
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	2224      	movs	r2, #36	; 0x24
    5a2c:	18ba      	adds	r2, r7, r2
    5a2e:	5cd3      	ldrb	r3, [r2, r3]
    5a30:	2214      	movs	r2, #20
    5a32:	18ba      	adds	r2, r7, r2
    5a34:	0011      	movs	r1, r2
    5a36:	0018      	movs	r0, r3
    5a38:	4b5e      	ldr	r3, [pc, #376]	; (5bb4 <tc_init+0x344>)
    5a3a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5a3c:	2329      	movs	r3, #41	; 0x29
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	781b      	ldrb	r3, [r3, #0]
    5a42:	2224      	movs	r2, #36	; 0x24
    5a44:	18ba      	adds	r2, r7, r2
    5a46:	5cd3      	ldrb	r3, [r2, r3]
    5a48:	0018      	movs	r0, r3
    5a4a:	4b5b      	ldr	r3, [pc, #364]	; (5bb8 <tc_init+0x348>)
    5a4c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	799b      	ldrb	r3, [r3, #6]
    5a56:	4313      	orrs	r3, r2
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    5a60:	4313      	orrs	r3, r2
    5a62:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    5a68:	232e      	movs	r3, #46	; 0x2e
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	430a      	orrs	r2, r1
    5a6e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	785b      	ldrb	r3, [r3, #1]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d008      	beq.n	5a8a <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5a78:	232e      	movs	r3, #46	; 0x2e
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	222e      	movs	r2, #46	; 0x2e
    5a7e:	18ba      	adds	r2, r7, r2
    5a80:	8812      	ldrh	r2, [r2, #0]
    5a82:	2180      	movs	r1, #128	; 0x80
    5a84:	0109      	lsls	r1, r1, #4
    5a86:	430a      	orrs	r2, r1
    5a88:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	0018      	movs	r0, r3
    5a90:	4b4a      	ldr	r3, [pc, #296]	; (5bbc <tc_init+0x34c>)
    5a92:	4798      	blx	r3
    5a94:	1e03      	subs	r3, r0, #0
    5a96:	d1f9      	bne.n	5a8c <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5a98:	68bb      	ldr	r3, [r7, #8]
    5a9a:	222e      	movs	r2, #46	; 0x2e
    5a9c:	18ba      	adds	r2, r7, r2
    5a9e:	8812      	ldrh	r2, [r2, #0]
    5aa0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	7b5b      	ldrb	r3, [r3, #13]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d003      	beq.n	5ab2 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5aaa:	232d      	movs	r3, #45	; 0x2d
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	2204      	movs	r2, #4
    5ab0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	7b9b      	ldrb	r3, [r3, #14]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d007      	beq.n	5aca <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5aba:	232d      	movs	r3, #45	; 0x2d
    5abc:	18fb      	adds	r3, r7, r3
    5abe:	222d      	movs	r2, #45	; 0x2d
    5ac0:	18ba      	adds	r2, r7, r2
    5ac2:	7812      	ldrb	r2, [r2, #0]
    5ac4:	2101      	movs	r1, #1
    5ac6:	430a      	orrs	r2, r1
    5ac8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	0018      	movs	r0, r3
    5ad0:	4b3a      	ldr	r3, [pc, #232]	; (5bbc <tc_init+0x34c>)
    5ad2:	4798      	blx	r3
    5ad4:	1e03      	subs	r3, r0, #0
    5ad6:	d1f9      	bne.n	5acc <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5ad8:	68bb      	ldr	r3, [r7, #8]
    5ada:	22ff      	movs	r2, #255	; 0xff
    5adc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5ade:	232d      	movs	r3, #45	; 0x2d
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d00b      	beq.n	5b00 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    5ae8:	46c0      	nop			; (mov r8, r8)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	0018      	movs	r0, r3
    5aee:	4b33      	ldr	r3, [pc, #204]	; (5bbc <tc_init+0x34c>)
    5af0:	4798      	blx	r3
    5af2:	1e03      	subs	r3, r0, #0
    5af4:	d1f9      	bne.n	5aea <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5af6:	68bb      	ldr	r3, [r7, #8]
    5af8:	222d      	movs	r2, #45	; 0x2d
    5afa:	18ba      	adds	r2, r7, r2
    5afc:	7812      	ldrb	r2, [r2, #0]
    5afe:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5b00:	232c      	movs	r3, #44	; 0x2c
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	687a      	ldr	r2, [r7, #4]
    5b06:	7a92      	ldrb	r2, [r2, #10]
    5b08:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b0a:	232a      	movs	r3, #42	; 0x2a
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	2200      	movs	r2, #0
    5b10:	701a      	strb	r2, [r3, #0]
    5b12:	e01c      	b.n	5b4e <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    5b14:	232a      	movs	r3, #42	; 0x2a
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	687a      	ldr	r2, [r7, #4]
    5b1c:	18d3      	adds	r3, r2, r3
    5b1e:	7adb      	ldrb	r3, [r3, #11]
    5b20:	2b00      	cmp	r3, #0
    5b22:	d00d      	beq.n	5b40 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5b24:	232a      	movs	r3, #42	; 0x2a
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2210      	movs	r2, #16
    5b2c:	409a      	lsls	r2, r3
    5b2e:	0013      	movs	r3, r2
    5b30:	b2d9      	uxtb	r1, r3
    5b32:	232c      	movs	r3, #44	; 0x2c
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	222c      	movs	r2, #44	; 0x2c
    5b38:	18ba      	adds	r2, r7, r2
    5b3a:	7812      	ldrb	r2, [r2, #0]
    5b3c:	430a      	orrs	r2, r1
    5b3e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b40:	232a      	movs	r3, #42	; 0x2a
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	781a      	ldrb	r2, [r3, #0]
    5b46:	232a      	movs	r3, #42	; 0x2a
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	3201      	adds	r2, #1
    5b4c:	701a      	strb	r2, [r3, #0]
    5b4e:	232a      	movs	r3, #42	; 0x2a
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	2b01      	cmp	r3, #1
    5b56:	d9dd      	bls.n	5b14 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b58:	46c0      	nop			; (mov r8, r8)
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b17      	ldr	r3, [pc, #92]	; (5bbc <tc_init+0x34c>)
    5b60:	4798      	blx	r3
    5b62:	1e03      	subs	r3, r0, #0
    5b64:	d1f9      	bne.n	5b5a <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5b66:	68bb      	ldr	r3, [r7, #8]
    5b68:	222c      	movs	r2, #44	; 0x2c
    5b6a:	18ba      	adds	r2, r7, r2
    5b6c:	7812      	ldrb	r2, [r2, #0]
    5b6e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b70:	46c0      	nop			; (mov r8, r8)
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	0018      	movs	r0, r3
    5b76:	4b11      	ldr	r3, [pc, #68]	; (5bbc <tc_init+0x34c>)
    5b78:	4798      	blx	r3
    5b7a:	1e03      	subs	r3, r0, #0
    5b7c:	d1f9      	bne.n	5b72 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	791b      	ldrb	r3, [r3, #4]
    5b82:	2b04      	cmp	r3, #4
    5b84:	d01c      	beq.n	5bc0 <tc_init+0x350>
    5b86:	2b08      	cmp	r3, #8
    5b88:	d100      	bne.n	5b8c <tc_init+0x31c>
    5b8a:	e06e      	b.n	5c6a <tc_init+0x3fa>
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d049      	beq.n	5c24 <tc_init+0x3b4>
    5b90:	e08e      	b.n	5cb0 <tc_init+0x440>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005829 	.word	0x00005829
    5b98:	000172b0 	.word	0x000172b0
    5b9c:	000172b4 	.word	0x000172b4
    5ba0:	2000045c 	.word	0x2000045c
    5ba4:	000057d9 	.word	0x000057d9
    5ba8:	00007e1d 	.word	0x00007e1d
    5bac:	0000577d 	.word	0x0000577d
    5bb0:	00005765 	.word	0x00005765
    5bb4:	00007b31 	.word	0x00007b31
    5bb8:	00007b75 	.word	0x00007b75
    5bbc:	00005801 	.word	0x00005801
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b3d      	ldr	r3, [pc, #244]	; (5cbc <tc_init+0x44c>)
    5bc8:	4798      	blx	r3
    5bca:	1e03      	subs	r3, r0, #0
    5bcc:	d1f9      	bne.n	5bc2 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	2228      	movs	r2, #40	; 0x28
    5bd2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    5bd4:	68bb      	ldr	r3, [r7, #8]
    5bd6:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    5bd8:	46c0      	nop			; (mov r8, r8)
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	0018      	movs	r0, r3
    5bde:	4b37      	ldr	r3, [pc, #220]	; (5cbc <tc_init+0x44c>)
    5be0:	4798      	blx	r3
    5be2:	1e03      	subs	r3, r0, #0
    5be4:	d1f9      	bne.n	5bda <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	2229      	movs	r2, #41	; 0x29
    5bea:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    5bec:	68bb      	ldr	r3, [r7, #8]
    5bee:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5bf0:	46c0      	nop			; (mov r8, r8)
    5bf2:	68fb      	ldr	r3, [r7, #12]
    5bf4:	0018      	movs	r0, r3
    5bf6:	4b31      	ldr	r3, [pc, #196]	; (5cbc <tc_init+0x44c>)
    5bf8:	4798      	blx	r3
    5bfa:	1e03      	subs	r3, r0, #0
    5bfc:	d1f9      	bne.n	5bf2 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	222a      	movs	r2, #42	; 0x2a
    5c02:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    5c04:	68bb      	ldr	r3, [r7, #8]
    5c06:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c08:	46c0      	nop			; (mov r8, r8)
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b2b      	ldr	r3, [pc, #172]	; (5cbc <tc_init+0x44c>)
    5c10:	4798      	blx	r3
    5c12:	1e03      	subs	r3, r0, #0
    5c14:	d1f9      	bne.n	5c0a <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	222b      	movs	r2, #43	; 0x2b
    5c1a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    5c20:	2300      	movs	r3, #0
    5c22:	e046      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    5c24:	46c0      	nop			; (mov r8, r8)
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b24      	ldr	r3, [pc, #144]	; (5cbc <tc_init+0x44c>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d1f9      	bne.n	5c26 <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	0018      	movs	r0, r3
    5c40:	4b1e      	ldr	r3, [pc, #120]	; (5cbc <tc_init+0x44c>)
    5c42:	4798      	blx	r3
    5c44:	1e03      	subs	r3, r0, #0
    5c46:	d1f9      	bne.n	5c3c <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5c4c:	68bb      	ldr	r3, [r7, #8]
    5c4e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c50:	46c0      	nop			; (mov r8, r8)
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	0018      	movs	r0, r3
    5c56:	4b19      	ldr	r3, [pc, #100]	; (5cbc <tc_init+0x44c>)
    5c58:	4798      	blx	r3
    5c5a:	1e03      	subs	r3, r0, #0
    5c5c:	d1f9      	bne.n	5c52 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    5c66:	2300      	movs	r3, #0
    5c68:	e023      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	0018      	movs	r0, r3
    5c70:	4b12      	ldr	r3, [pc, #72]	; (5cbc <tc_init+0x44c>)
    5c72:	4798      	blx	r3
    5c74:	1e03      	subs	r3, r0, #0
    5c76:	d1f9      	bne.n	5c6c <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c7c:	68bb      	ldr	r3, [r7, #8]
    5c7e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c80:	46c0      	nop			; (mov r8, r8)
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	0018      	movs	r0, r3
    5c86:	4b0d      	ldr	r3, [pc, #52]	; (5cbc <tc_init+0x44c>)
    5c88:	4798      	blx	r3
    5c8a:	1e03      	subs	r3, r0, #0
    5c8c:	d1f9      	bne.n	5c82 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    5c92:	68bb      	ldr	r3, [r7, #8]
    5c94:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0018      	movs	r0, r3
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <tc_init+0x44c>)
    5c9e:	4798      	blx	r3
    5ca0:	1e03      	subs	r3, r0, #0
    5ca2:	d1f9      	bne.n	5c98 <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5ca8:	68bb      	ldr	r3, [r7, #8]
    5caa:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    5cac:	2300      	movs	r3, #0
    5cae:	e000      	b.n	5cb2 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5cb0:	2317      	movs	r3, #23
}
    5cb2:	0018      	movs	r0, r3
    5cb4:	46bd      	mov	sp, r7
    5cb6:	b00d      	add	sp, #52	; 0x34
    5cb8:	bd90      	pop	{r4, r7, pc}
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	00005801 	.word	0x00005801

00005cc0 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b084      	sub	sp, #16
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b0e      	ldr	r3, [pc, #56]	; (5d10 <tc_get_count_value+0x50>)
    5cd6:	4798      	blx	r3
    5cd8:	1e03      	subs	r3, r0, #0
    5cda:	d1f9      	bne.n	5cd0 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	791b      	ldrb	r3, [r3, #4]
    5ce0:	2b04      	cmp	r3, #4
    5ce2:	d004      	beq.n	5cee <tc_get_count_value+0x2e>
    5ce4:	2b08      	cmp	r3, #8
    5ce6:	d00a      	beq.n	5cfe <tc_get_count_value+0x3e>
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d004      	beq.n	5cf6 <tc_get_count_value+0x36>
    5cec:	e00a      	b.n	5d04 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5cee:	68fb      	ldr	r3, [r7, #12]
    5cf0:	7c1b      	ldrb	r3, [r3, #16]
    5cf2:	b2db      	uxtb	r3, r3
    5cf4:	e007      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	8a1b      	ldrh	r3, [r3, #16]
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	e003      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    5cfe:	68fb      	ldr	r3, [r7, #12]
    5d00:	691b      	ldr	r3, [r3, #16]
    5d02:	e000      	b.n	5d06 <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    5d04:	2300      	movs	r3, #0
}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	b004      	add	sp, #16
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00005801 	.word	0x00005801

00005d14 <system_gclk_chan_get_config_defaults>:
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	2200      	movs	r2, #0
    5d20:	701a      	strb	r2, [r3, #0]
}
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	46bd      	mov	sp, r7
    5d26:	b002      	add	sp, #8
    5d28:	bd80      	pop	{r7, pc}
	...

00005d2c <system_apb_clock_set_mask>:
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	af00      	add	r7, sp, #0
    5d32:	0002      	movs	r2, r0
    5d34:	6039      	str	r1, [r7, #0]
    5d36:	1dfb      	adds	r3, r7, #7
    5d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d3a:	1dfb      	adds	r3, r7, #7
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	2b01      	cmp	r3, #1
    5d40:	d00a      	beq.n	5d58 <system_apb_clock_set_mask+0x2c>
    5d42:	2b02      	cmp	r3, #2
    5d44:	d00f      	beq.n	5d66 <system_apb_clock_set_mask+0x3a>
    5d46:	2b00      	cmp	r3, #0
    5d48:	d114      	bne.n	5d74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4c:	4a0d      	ldr	r2, [pc, #52]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4e:	6991      	ldr	r1, [r2, #24]
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	430a      	orrs	r2, r1
    5d54:	619a      	str	r2, [r3, #24]
			break;
    5d56:	e00f      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5d58:	4b0a      	ldr	r3, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5a:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5c:	69d1      	ldr	r1, [r2, #28]
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	430a      	orrs	r2, r1
    5d62:	61da      	str	r2, [r3, #28]
			break;
    5d64:	e008      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5d66:	4b07      	ldr	r3, [pc, #28]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d68:	4a06      	ldr	r2, [pc, #24]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d6a:	6a11      	ldr	r1, [r2, #32]
    5d6c:	683a      	ldr	r2, [r7, #0]
    5d6e:	430a      	orrs	r2, r1
    5d70:	621a      	str	r2, [r3, #32]
			break;
    5d72:	e001      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5d74:	2317      	movs	r3, #23
    5d76:	e000      	b.n	5d7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5d78:	2300      	movs	r3, #0
}
    5d7a:	0018      	movs	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b002      	add	sp, #8
    5d80:	bd80      	pop	{r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	40000400 	.word	0x40000400

00005d88 <system_pinmux_get_config_defaults>:
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	2280      	movs	r2, #128	; 0x80
    5d94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	2200      	movs	r2, #0
    5d9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	2201      	movs	r2, #1
    5da0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2200      	movs	r2, #0
    5da6:	70da      	strb	r2, [r3, #3]
}
    5da8:	46c0      	nop			; (mov r8, r8)
    5daa:	46bd      	mov	sp, r7
    5dac:	b002      	add	sp, #8
    5dae:	bd80      	pop	{r7, pc}

00005db0 <system_is_debugger_present>:
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5db4:	4b05      	ldr	r3, [pc, #20]	; (5dcc <system_is_debugger_present+0x1c>)
    5db6:	789b      	ldrb	r3, [r3, #2]
    5db8:	b2db      	uxtb	r3, r3
    5dba:	001a      	movs	r2, r3
    5dbc:	2302      	movs	r3, #2
    5dbe:	4013      	ands	r3, r2
    5dc0:	1e5a      	subs	r2, r3, #1
    5dc2:	4193      	sbcs	r3, r2
    5dc4:	b2db      	uxtb	r3, r3
}
    5dc6:	0018      	movs	r0, r3
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	41002000 	.word	0x41002000

00005dd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5dd0:	b580      	push	{r7, lr}
    5dd2:	b084      	sub	sp, #16
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	69db      	ldr	r3, [r3, #28]
    5de2:	1e5a      	subs	r2, r3, #1
    5de4:	4193      	sbcs	r3, r2
    5de6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5de8:	0018      	movs	r0, r3
    5dea:	46bd      	mov	sp, r7
    5dec:	b004      	add	sp, #16
    5dee:	bd80      	pop	{r7, pc}

00005df0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5df8:	46c0      	nop			; (mov r8, r8)
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b04      	ldr	r3, [pc, #16]	; (5e10 <_usart_wait_for_sync+0x20>)
    5e00:	4798      	blx	r3
    5e02:	1e03      	subs	r3, r0, #0
    5e04:	d1f9      	bne.n	5dfa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	46bd      	mov	sp, r7
    5e0a:	b002      	add	sp, #8
    5e0c:	bd80      	pop	{r7, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	00005dd1 	.word	0x00005dd1

00005e14 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5e14:	b5b0      	push	{r4, r5, r7, lr}
    5e16:	b08c      	sub	sp, #48	; 0x30
    5e18:	af02      	add	r7, sp, #8
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	0018      	movs	r0, r3
    5e2a:	4ba8      	ldr	r3, [pc, #672]	; (60cc <_usart_set_config+0x2b8>)
    5e2c:	4798      	blx	r3
    5e2e:	0003      	movs	r3, r0
    5e30:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5e32:	697b      	ldr	r3, [r7, #20]
    5e34:	3314      	adds	r3, #20
    5e36:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5e38:	2300      	movs	r3, #0
    5e3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5e3c:	2300      	movs	r3, #0
    5e3e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	2200      	movs	r2, #0
    5e46:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e48:	231f      	movs	r3, #31
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	2200      	movs	r2, #0
    5e4e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e50:	231e      	movs	r3, #30
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	2210      	movs	r2, #16
    5e56:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5e58:	683b      	ldr	r3, [r7, #0]
    5e5a:	8a1b      	ldrh	r3, [r3, #16]
    5e5c:	2280      	movs	r2, #128	; 0x80
    5e5e:	01d2      	lsls	r2, r2, #7
    5e60:	4293      	cmp	r3, r2
    5e62:	d01c      	beq.n	5e9e <_usart_set_config+0x8a>
    5e64:	2280      	movs	r2, #128	; 0x80
    5e66:	01d2      	lsls	r2, r2, #7
    5e68:	4293      	cmp	r3, r2
    5e6a:	dc06      	bgt.n	5e7a <_usart_set_config+0x66>
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d00d      	beq.n	5e8c <_usart_set_config+0x78>
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0192      	lsls	r2, r2, #6
    5e74:	4293      	cmp	r3, r2
    5e76:	d024      	beq.n	5ec2 <_usart_set_config+0xae>
    5e78:	e035      	b.n	5ee6 <_usart_set_config+0xd2>
    5e7a:	22c0      	movs	r2, #192	; 0xc0
    5e7c:	01d2      	lsls	r2, r2, #7
    5e7e:	4293      	cmp	r3, r2
    5e80:	d028      	beq.n	5ed4 <_usart_set_config+0xc0>
    5e82:	2280      	movs	r2, #128	; 0x80
    5e84:	0212      	lsls	r2, r2, #8
    5e86:	4293      	cmp	r3, r2
    5e88:	d012      	beq.n	5eb0 <_usart_set_config+0x9c>
    5e8a:	e02c      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e8c:	231f      	movs	r3, #31
    5e8e:	18fb      	adds	r3, r7, r3
    5e90:	2200      	movs	r2, #0
    5e92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e94:	231e      	movs	r3, #30
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	2210      	movs	r2, #16
    5e9a:	701a      	strb	r2, [r3, #0]
			break;
    5e9c:	e023      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e9e:	231f      	movs	r3, #31
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	2200      	movs	r2, #0
    5ea4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ea6:	231e      	movs	r3, #30
    5ea8:	18fb      	adds	r3, r7, r3
    5eaa:	2208      	movs	r2, #8
    5eac:	701a      	strb	r2, [r3, #0]
			break;
    5eae:	e01a      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eb0:	231f      	movs	r3, #31
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2200      	movs	r2, #0
    5eb6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5eb8:	231e      	movs	r3, #30
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	2203      	movs	r2, #3
    5ebe:	701a      	strb	r2, [r3, #0]
			break;
    5ec0:	e011      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec2:	231f      	movs	r3, #31
    5ec4:	18fb      	adds	r3, r7, r3
    5ec6:	2201      	movs	r2, #1
    5ec8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5eca:	231e      	movs	r3, #30
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	2210      	movs	r2, #16
    5ed0:	701a      	strb	r2, [r3, #0]
			break;
    5ed2:	e008      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ed4:	231f      	movs	r3, #31
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	2201      	movs	r2, #1
    5eda:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5edc:	231e      	movs	r3, #30
    5ede:	18fb      	adds	r3, r7, r3
    5ee0:	2208      	movs	r2, #8
    5ee2:	701a      	strb	r2, [r3, #0]
			break;
    5ee4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5ee6:	683b      	ldr	r3, [r7, #0]
    5ee8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5eea:	683b      	ldr	r3, [r7, #0]
    5eec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5eee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5ef4:	4313      	orrs	r3, r2
		config->sample_rate |
    5ef6:	683a      	ldr	r2, [r7, #0]
    5ef8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    5efa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	7e12      	ldrb	r2, [r2, #24]
    5f00:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5f02:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f04:	683a      	ldr	r2, [r7, #0]
    5f06:	2126      	movs	r1, #38	; 0x26
    5f08:	5c52      	ldrb	r2, [r2, r1]
    5f0a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5f0c:	4313      	orrs	r3, r2
    5f0e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5f10:	231d      	movs	r3, #29
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	2200      	movs	r2, #0
    5f16:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	685b      	ldr	r3, [r3, #4]
    5f1c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5f1e:	68fb      	ldr	r3, [r7, #12]
    5f20:	2b00      	cmp	r3, #0
    5f22:	d01e      	beq.n	5f62 <_usart_set_config+0x14e>
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	0552      	lsls	r2, r2, #21
    5f28:	4293      	cmp	r3, r2
    5f2a:	d14f      	bne.n	5fcc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	2227      	movs	r2, #39	; 0x27
    5f30:	5c9b      	ldrb	r3, [r3, r2]
    5f32:	2201      	movs	r2, #1
    5f34:	4053      	eors	r3, r2
    5f36:	b2db      	uxtb	r3, r3
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d046      	beq.n	5fca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	6a1d      	ldr	r5, [r3, #32]
    5f40:	693b      	ldr	r3, [r7, #16]
    5f42:	b2db      	uxtb	r3, r3
    5f44:	0018      	movs	r0, r3
    5f46:	4b62      	ldr	r3, [pc, #392]	; (60d0 <_usart_set_config+0x2bc>)
    5f48:	4798      	blx	r3
    5f4a:	0001      	movs	r1, r0
    5f4c:	231d      	movs	r3, #29
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	230a      	movs	r3, #10
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	001a      	movs	r2, r3
    5f56:	0028      	movs	r0, r5
    5f58:	4b5e      	ldr	r3, [pc, #376]	; (60d4 <_usart_set_config+0x2c0>)
    5f5a:	4798      	blx	r3
    5f5c:	0003      	movs	r3, r0
    5f5e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5f60:	e033      	b.n	5fca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	2227      	movs	r2, #39	; 0x27
    5f66:	5c9b      	ldrb	r3, [r3, r2]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d014      	beq.n	5f96 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	6a18      	ldr	r0, [r3, #32]
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5f74:	231d      	movs	r3, #29
    5f76:	18fc      	adds	r4, r7, r3
    5f78:	231f      	movs	r3, #31
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	781d      	ldrb	r5, [r3, #0]
    5f7e:	230a      	movs	r3, #10
    5f80:	18fa      	adds	r2, r7, r3
    5f82:	231e      	movs	r3, #30
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	9300      	str	r3, [sp, #0]
    5f8a:	002b      	movs	r3, r5
    5f8c:	4d52      	ldr	r5, [pc, #328]	; (60d8 <_usart_set_config+0x2c4>)
    5f8e:	47a8      	blx	r5
    5f90:	0003      	movs	r3, r0
    5f92:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5f94:	e01a      	b.n	5fcc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5f96:	683b      	ldr	r3, [r7, #0]
    5f98:	6a1d      	ldr	r5, [r3, #32]
    5f9a:	693b      	ldr	r3, [r7, #16]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	0018      	movs	r0, r3
    5fa0:	4b4b      	ldr	r3, [pc, #300]	; (60d0 <_usart_set_config+0x2bc>)
    5fa2:	4798      	blx	r3
				status_code =
    5fa4:	231d      	movs	r3, #29
    5fa6:	18fc      	adds	r4, r7, r3
    5fa8:	231f      	movs	r3, #31
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	7819      	ldrb	r1, [r3, #0]
    5fae:	230a      	movs	r3, #10
    5fb0:	18fa      	adds	r2, r7, r3
    5fb2:	231e      	movs	r3, #30
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	9300      	str	r3, [sp, #0]
    5fba:	000b      	movs	r3, r1
    5fbc:	0001      	movs	r1, r0
    5fbe:	0028      	movs	r0, r5
    5fc0:	4d45      	ldr	r5, [pc, #276]	; (60d8 <_usart_set_config+0x2c4>)
    5fc2:	47a8      	blx	r5
    5fc4:	0003      	movs	r3, r0
    5fc6:	7023      	strb	r3, [r4, #0]
			break;
    5fc8:	e000      	b.n	5fcc <_usart_set_config+0x1b8>
			break;
    5fca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5fcc:	231d      	movs	r3, #29
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d003      	beq.n	5fde <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5fd6:	231d      	movs	r3, #29
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	e071      	b.n	60c2 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5fde:	683b      	ldr	r3, [r7, #0]
    5fe0:	7e5b      	ldrb	r3, [r3, #25]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d003      	beq.n	5fee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	7e9a      	ldrb	r2, [r3, #26]
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	0018      	movs	r0, r3
    5ff2:	4b3a      	ldr	r3, [pc, #232]	; (60dc <_usart_set_config+0x2c8>)
    5ff4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5ff6:	230a      	movs	r3, #10
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	881a      	ldrh	r2, [r3, #0]
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	4313      	orrs	r3, r2
    6006:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6008:	683b      	ldr	r3, [r7, #0]
    600a:	2227      	movs	r2, #39	; 0x27
    600c:	5c9b      	ldrb	r3, [r3, r2]
    600e:	2201      	movs	r2, #1
    6010:	4053      	eors	r3, r2
    6012:	b2db      	uxtb	r3, r3
    6014:	2b00      	cmp	r3, #0
    6016:	d003      	beq.n	6020 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    601a:	2204      	movs	r2, #4
    601c:	4313      	orrs	r3, r2
    601e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	7e5b      	ldrb	r3, [r3, #25]
    6024:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	7f1b      	ldrb	r3, [r3, #28]
    602a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    602c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    602e:	683b      	ldr	r3, [r7, #0]
    6030:	7f5b      	ldrb	r3, [r3, #29]
    6032:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6034:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	2124      	movs	r1, #36	; 0x24
    603a:	5c5b      	ldrb	r3, [r3, r1]
    603c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    603e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	2125      	movs	r1, #37	; 0x25
    6044:	5c5b      	ldrb	r3, [r3, r1]
    6046:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6048:	4313      	orrs	r3, r2
	ctrlb =  
    604a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    604c:	683b      	ldr	r3, [r7, #0]
    604e:	7adb      	ldrb	r3, [r3, #11]
    6050:	001a      	movs	r2, r3
    6052:	6a3b      	ldr	r3, [r7, #32]
    6054:	4313      	orrs	r3, r2
    6056:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	891b      	ldrh	r3, [r3, #8]
    605c:	2bff      	cmp	r3, #255	; 0xff
    605e:	d00b      	beq.n	6078 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6062:	2280      	movs	r2, #128	; 0x80
    6064:	0452      	lsls	r2, r2, #17
    6066:	4313      	orrs	r3, r2
    6068:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	891b      	ldrh	r3, [r3, #8]
    606e:	001a      	movs	r2, r3
    6070:	6a3b      	ldr	r3, [r7, #32]
    6072:	4313      	orrs	r3, r2
    6074:	623b      	str	r3, [r7, #32]
    6076:	e008      	b.n	608a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    6078:	683b      	ldr	r3, [r7, #0]
    607a:	7edb      	ldrb	r3, [r3, #27]
    607c:	2b00      	cmp	r3, #0
    607e:	d004      	beq.n	608a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6082:	2280      	movs	r2, #128	; 0x80
    6084:	04d2      	lsls	r2, r2, #19
    6086:	4313      	orrs	r3, r2
    6088:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    608a:	683b      	ldr	r3, [r7, #0]
    608c:	222c      	movs	r2, #44	; 0x2c
    608e:	5c9b      	ldrb	r3, [r3, r2]
    6090:	2b00      	cmp	r3, #0
    6092:	d103      	bne.n	609c <_usart_set_config+0x288>
    6094:	4b12      	ldr	r3, [pc, #72]	; (60e0 <_usart_set_config+0x2cc>)
    6096:	4798      	blx	r3
    6098:	1e03      	subs	r3, r0, #0
    609a:	d003      	beq.n	60a4 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609e:	2280      	movs	r2, #128	; 0x80
    60a0:	4313      	orrs	r3, r2
    60a2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	0018      	movs	r0, r3
    60a8:	4b0c      	ldr	r3, [pc, #48]	; (60dc <_usart_set_config+0x2c8>)
    60aa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    60ac:	69bb      	ldr	r3, [r7, #24]
    60ae:	6a3a      	ldr	r2, [r7, #32]
    60b0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	0018      	movs	r0, r3
    60b6:	4b09      	ldr	r3, [pc, #36]	; (60dc <_usart_set_config+0x2c8>)
    60b8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    60ba:	69bb      	ldr	r3, [r7, #24]
    60bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60be:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    60c0:	2300      	movs	r3, #0
}
    60c2:	0018      	movs	r0, r3
    60c4:	46bd      	mov	sp, r7
    60c6:	b00a      	add	sp, #40	; 0x28
    60c8:	bdb0      	pop	{r4, r5, r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	00006f45 	.word	0x00006f45
    60d0:	00007c55 	.word	0x00007c55
    60d4:	00006a93 	.word	0x00006a93
    60d8:	00006b11 	.word	0x00006b11
    60dc:	00005df1 	.word	0x00005df1
    60e0:	00005db1 	.word	0x00005db1

000060e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    60e4:	b590      	push	{r4, r7, lr}
    60e6:	b093      	sub	sp, #76	; 0x4c
    60e8:	af00      	add	r7, sp, #0
    60ea:	60f8      	str	r0, [r7, #12]
    60ec:	60b9      	str	r1, [r7, #8]
    60ee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    60f0:	233b      	movs	r3, #59	; 0x3b
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	2200      	movs	r2, #0
    60f6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	68ba      	ldr	r2, [r7, #8]
    60fc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	0018      	movs	r0, r3
    610a:	4b86      	ldr	r3, [pc, #536]	; (6324 <usart_init+0x240>)
    610c:	4798      	blx	r3
    610e:	0003      	movs	r3, r0
    6110:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6114:	3302      	adds	r3, #2
    6116:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    611a:	3314      	adds	r3, #20
    611c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	2201      	movs	r2, #1
    6124:	4013      	ands	r3, r2
    6126:	d001      	beq.n	612c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6128:	2305      	movs	r3, #5
    612a:	e0f6      	b.n	631a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	2202      	movs	r2, #2
    6132:	4013      	ands	r3, r2
    6134:	d001      	beq.n	613a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6136:	231c      	movs	r3, #28
    6138:	e0ef      	b.n	631a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    613a:	2201      	movs	r2, #1
    613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    613e:	409a      	lsls	r2, r3
    6140:	0013      	movs	r3, r2
    6142:	0019      	movs	r1, r3
    6144:	2002      	movs	r0, #2
    6146:	4b78      	ldr	r3, [pc, #480]	; (6328 <usart_init+0x244>)
    6148:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    614a:	2324      	movs	r3, #36	; 0x24
    614c:	18fb      	adds	r3, r7, r3
    614e:	0018      	movs	r0, r3
    6150:	4b76      	ldr	r3, [pc, #472]	; (632c <usart_init+0x248>)
    6152:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	222d      	movs	r2, #45	; 0x2d
    6158:	5c9a      	ldrb	r2, [r3, r2]
    615a:	2324      	movs	r3, #36	; 0x24
    615c:	18fb      	adds	r3, r7, r3
    615e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6162:	b2db      	uxtb	r3, r3
    6164:	2224      	movs	r2, #36	; 0x24
    6166:	18ba      	adds	r2, r7, r2
    6168:	0011      	movs	r1, r2
    616a:	0018      	movs	r0, r3
    616c:	4b70      	ldr	r3, [pc, #448]	; (6330 <usart_init+0x24c>)
    616e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6170:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6172:	b2db      	uxtb	r3, r3
    6174:	0018      	movs	r0, r3
    6176:	4b6f      	ldr	r3, [pc, #444]	; (6334 <usart_init+0x250>)
    6178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	222d      	movs	r2, #45	; 0x2d
    617e:	5c9b      	ldrb	r3, [r3, r2]
    6180:	2100      	movs	r1, #0
    6182:	0018      	movs	r0, r3
    6184:	4b6c      	ldr	r3, [pc, #432]	; (6338 <usart_init+0x254>)
    6186:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	7ada      	ldrb	r2, [r3, #11]
    618c:	68fb      	ldr	r3, [r7, #12]
    618e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	2224      	movs	r2, #36	; 0x24
    6194:	5c9a      	ldrb	r2, [r3, r2]
    6196:	68fb      	ldr	r3, [r7, #12]
    6198:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	2225      	movs	r2, #37	; 0x25
    619e:	5c9a      	ldrb	r2, [r3, r2]
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	7eda      	ldrb	r2, [r3, #27]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	7f1a      	ldrb	r2, [r3, #28]
    61b0:	68fb      	ldr	r3, [r7, #12]
    61b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    61b4:	233b      	movs	r3, #59	; 0x3b
    61b6:	18fc      	adds	r4, r7, r3
    61b8:	687a      	ldr	r2, [r7, #4]
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	0011      	movs	r1, r2
    61be:	0018      	movs	r0, r3
    61c0:	4b5e      	ldr	r3, [pc, #376]	; (633c <usart_init+0x258>)
    61c2:	4798      	blx	r3
    61c4:	0003      	movs	r3, r0
    61c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    61c8:	233b      	movs	r3, #59	; 0x3b
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <usart_init+0xf6>
		return status_code;
    61d2:	233b      	movs	r3, #59	; 0x3b
    61d4:	18fb      	adds	r3, r7, r3
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	e09f      	b.n	631a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    61da:	2320      	movs	r3, #32
    61dc:	18fb      	adds	r3, r7, r3
    61de:	0018      	movs	r0, r3
    61e0:	4b57      	ldr	r3, [pc, #348]	; (6340 <usart_init+0x25c>)
    61e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    61e4:	2320      	movs	r3, #32
    61e6:	18fb      	adds	r3, r7, r3
    61e8:	2200      	movs	r2, #0
    61ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    61ec:	2320      	movs	r3, #32
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2200      	movs	r2, #0
    61f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    61f8:	2310      	movs	r3, #16
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6202:	2310      	movs	r3, #16
    6204:	18fb      	adds	r3, r7, r3
    6206:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    620c:	2310      	movs	r3, #16
    620e:	18fb      	adds	r3, r7, r3
    6210:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6216:	2310      	movs	r3, #16
    6218:	18fb      	adds	r3, r7, r3
    621a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    621c:	2347      	movs	r3, #71	; 0x47
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	701a      	strb	r2, [r3, #0]
    6224:	e02c      	b.n	6280 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6226:	2347      	movs	r3, #71	; 0x47
    6228:	18fb      	adds	r3, r7, r3
    622a:	781a      	ldrb	r2, [r3, #0]
    622c:	2310      	movs	r3, #16
    622e:	18fb      	adds	r3, r7, r3
    6230:	0092      	lsls	r2, r2, #2
    6232:	58d3      	ldr	r3, [r2, r3]
    6234:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6238:	2b00      	cmp	r3, #0
    623a:	d109      	bne.n	6250 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    623c:	2347      	movs	r3, #71	; 0x47
    623e:	18fb      	adds	r3, r7, r3
    6240:	781a      	ldrb	r2, [r3, #0]
    6242:	68bb      	ldr	r3, [r7, #8]
    6244:	0011      	movs	r1, r2
    6246:	0018      	movs	r0, r3
    6248:	4b3e      	ldr	r3, [pc, #248]	; (6344 <usart_init+0x260>)
    624a:	4798      	blx	r3
    624c:	0003      	movs	r3, r0
    624e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6252:	3301      	adds	r3, #1
    6254:	d00d      	beq.n	6272 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6258:	b2da      	uxtb	r2, r3
    625a:	2320      	movs	r3, #32
    625c:	18fb      	adds	r3, r7, r3
    625e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6262:	0c1b      	lsrs	r3, r3, #16
    6264:	b2db      	uxtb	r3, r3
    6266:	2220      	movs	r2, #32
    6268:	18ba      	adds	r2, r7, r2
    626a:	0011      	movs	r1, r2
    626c:	0018      	movs	r0, r3
    626e:	4b36      	ldr	r3, [pc, #216]	; (6348 <usart_init+0x264>)
    6270:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6272:	2347      	movs	r3, #71	; 0x47
    6274:	18fb      	adds	r3, r7, r3
    6276:	781a      	ldrb	r2, [r3, #0]
    6278:	2347      	movs	r3, #71	; 0x47
    627a:	18fb      	adds	r3, r7, r3
    627c:	3201      	adds	r2, #1
    627e:	701a      	strb	r2, [r3, #0]
    6280:	2347      	movs	r3, #71	; 0x47
    6282:	18fb      	adds	r3, r7, r3
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	2b03      	cmp	r3, #3
    6288:	d9cd      	bls.n	6226 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    628a:	2300      	movs	r3, #0
    628c:	63fb      	str	r3, [r7, #60]	; 0x3c
    628e:	e00a      	b.n	62a6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    6290:	68fa      	ldr	r2, [r7, #12]
    6292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6294:	3302      	adds	r3, #2
    6296:	009b      	lsls	r3, r3, #2
    6298:	18d3      	adds	r3, r2, r3
    629a:	3304      	adds	r3, #4
    629c:	2200      	movs	r2, #0
    629e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    62a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a2:	3301      	adds	r3, #1
    62a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    62a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a8:	2b05      	cmp	r3, #5
    62aa:	d9f1      	bls.n	6290 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	2200      	movs	r2, #0
    62b0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	2200      	movs	r2, #0
    62b6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	2200      	movs	r2, #0
    62bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	2200      	movs	r2, #0
    62c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	2230      	movs	r2, #48	; 0x30
    62c8:	2100      	movs	r1, #0
    62ca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	2231      	movs	r2, #49	; 0x31
    62d0:	2100      	movs	r1, #0
    62d2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	2232      	movs	r2, #50	; 0x32
    62d8:	2100      	movs	r1, #0
    62da:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	2233      	movs	r2, #51	; 0x33
    62e0:	2100      	movs	r1, #0
    62e2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	2227      	movs	r2, #39	; 0x27
    62ea:	18bc      	adds	r4, r7, r2
    62ec:	0018      	movs	r0, r3
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <usart_init+0x240>)
    62f0:	4798      	blx	r3
    62f2:	0003      	movs	r3, r0
    62f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    62f6:	4a15      	ldr	r2, [pc, #84]	; (634c <usart_init+0x268>)
    62f8:	2327      	movs	r3, #39	; 0x27
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	0011      	movs	r1, r2
    6300:	0018      	movs	r0, r3
    6302:	4b13      	ldr	r3, [pc, #76]	; (6350 <usart_init+0x26c>)
    6304:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6306:	2327      	movs	r3, #39	; 0x27
    6308:	18fb      	adds	r3, r7, r3
    630a:	781a      	ldrb	r2, [r3, #0]
    630c:	4b11      	ldr	r3, [pc, #68]	; (6354 <usart_init+0x270>)
    630e:	0092      	lsls	r2, r2, #2
    6310:	68f9      	ldr	r1, [r7, #12]
    6312:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6314:	233b      	movs	r3, #59	; 0x3b
    6316:	18fb      	adds	r3, r7, r3
    6318:	781b      	ldrb	r3, [r3, #0]
}
    631a:	0018      	movs	r0, r3
    631c:	46bd      	mov	sp, r7
    631e:	b013      	add	sp, #76	; 0x4c
    6320:	bd90      	pop	{r4, r7, pc}
    6322:	46c0      	nop			; (mov r8, r8)
    6324:	00006f45 	.word	0x00006f45
    6328:	00005d2d 	.word	0x00005d2d
    632c:	00005d15 	.word	0x00005d15
    6330:	00007b31 	.word	0x00007b31
    6334:	00007b75 	.word	0x00007b75
    6338:	00006cfd 	.word	0x00006cfd
    633c:	00005e15 	.word	0x00005e15
    6340:	00005d89 	.word	0x00005d89
    6344:	00006d89 	.word	0x00006d89
    6348:	00007e1d 	.word	0x00007e1d
    634c:	0000665d 	.word	0x0000665d
    6350:	00006fa9 	.word	0x00006fa9
    6354:	20000468 	.word	0x20000468

00006358 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6358:	b580      	push	{r7, lr}
    635a:	b084      	sub	sp, #16
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
    6360:	000a      	movs	r2, r1
    6362:	1cbb      	adds	r3, r7, #2
    6364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	79db      	ldrb	r3, [r3, #7]
    6370:	2201      	movs	r2, #1
    6372:	4053      	eors	r3, r2
    6374:	b2db      	uxtb	r3, r3
    6376:	2b00      	cmp	r3, #0
    6378:	d001      	beq.n	637e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    637a:	231c      	movs	r3, #28
    637c:	e017      	b.n	63ae <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6382:	b29b      	uxth	r3, r3
    6384:	2b00      	cmp	r3, #0
    6386:	d001      	beq.n	638c <usart_write_wait+0x34>
		return STATUS_BUSY;
    6388:	2305      	movs	r3, #5
    638a:	e010      	b.n	63ae <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	0018      	movs	r0, r3
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <usart_write_wait+0x60>)
    6392:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6394:	68fb      	ldr	r3, [r7, #12]
    6396:	1cba      	adds	r2, r7, #2
    6398:	8812      	ldrh	r2, [r2, #0]
    639a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    639c:	46c0      	nop			; (mov r8, r8)
    639e:	68fb      	ldr	r3, [r7, #12]
    63a0:	7e1b      	ldrb	r3, [r3, #24]
    63a2:	b2db      	uxtb	r3, r3
    63a4:	001a      	movs	r2, r3
    63a6:	2302      	movs	r3, #2
    63a8:	4013      	ands	r3, r2
    63aa:	d0f8      	beq.n	639e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    63ac:	2300      	movs	r3, #0
}
    63ae:	0018      	movs	r0, r3
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00005df1 	.word	0x00005df1

000063bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b08a      	sub	sp, #40	; 0x28
    63c0:	af00      	add	r7, sp, #0
    63c2:	60f8      	str	r0, [r7, #12]
    63c4:	60b9      	str	r1, [r7, #8]
    63c6:	1dbb      	adds	r3, r7, #6
    63c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    63ca:	1dbb      	adds	r3, r7, #6
    63cc:	881b      	ldrh	r3, [r3, #0]
    63ce:	2b00      	cmp	r3, #0
    63d0:	d101      	bne.n	63d6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    63d2:	2317      	movs	r3, #23
    63d4:	e07e      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	79db      	ldrb	r3, [r3, #7]
    63da:	2201      	movs	r2, #1
    63dc:	4053      	eors	r3, r2
    63de:	b2db      	uxtb	r3, r3
    63e0:	2b00      	cmp	r3, #0
    63e2:	d001      	beq.n	63e8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    63e4:	231c      	movs	r3, #28
    63e6:	e075      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    63e8:	68fb      	ldr	r3, [r7, #12]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	0018      	movs	r0, r3
    63f2:	4b3a      	ldr	r3, [pc, #232]	; (64dc <usart_write_buffer_wait+0x120>)
    63f4:	4798      	blx	r3

	uint16_t tx_pos = 0;
    63f6:	2326      	movs	r3, #38	; 0x26
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    63fe:	e048      	b.n	6492 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6400:	2300      	movs	r3, #0
    6402:	623b      	str	r3, [r7, #32]
    6404:	e00f      	b.n	6426 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6406:	697b      	ldr	r3, [r7, #20]
    6408:	7e1b      	ldrb	r3, [r3, #24]
    640a:	b2db      	uxtb	r3, r3
    640c:	001a      	movs	r2, r3
    640e:	2301      	movs	r3, #1
    6410:	4013      	ands	r3, r2
    6412:	d10d      	bne.n	6430 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    6414:	6a3b      	ldr	r3, [r7, #32]
    6416:	4a32      	ldr	r2, [pc, #200]	; (64e0 <usart_write_buffer_wait+0x124>)
    6418:	4293      	cmp	r3, r2
    641a:	d101      	bne.n	6420 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    641c:	2312      	movs	r3, #18
    641e:	e059      	b.n	64d4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6420:	6a3b      	ldr	r3, [r7, #32]
    6422:	3301      	adds	r3, #1
    6424:	623b      	str	r3, [r7, #32]
    6426:	6a3b      	ldr	r3, [r7, #32]
    6428:	4a2d      	ldr	r2, [pc, #180]	; (64e0 <usart_write_buffer_wait+0x124>)
    642a:	4293      	cmp	r3, r2
    642c:	d9eb      	bls.n	6406 <usart_write_buffer_wait+0x4a>
    642e:	e000      	b.n	6432 <usart_write_buffer_wait+0x76>
				break;
    6430:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    6432:	2326      	movs	r3, #38	; 0x26
    6434:	18fb      	adds	r3, r7, r3
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	2226      	movs	r2, #38	; 0x26
    643a:	18ba      	adds	r2, r7, r2
    643c:	1c59      	adds	r1, r3, #1
    643e:	8011      	strh	r1, [r2, #0]
    6440:	001a      	movs	r2, r3
    6442:	68bb      	ldr	r3, [r7, #8]
    6444:	189b      	adds	r3, r3, r2
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	231e      	movs	r3, #30
    644a:	18fb      	adds	r3, r7, r3
    644c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	795b      	ldrb	r3, [r3, #5]
    6452:	2b01      	cmp	r3, #1
    6454:	d115      	bne.n	6482 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6456:	2326      	movs	r3, #38	; 0x26
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	2226      	movs	r2, #38	; 0x26
    645e:	18ba      	adds	r2, r7, r2
    6460:	1c59      	adds	r1, r3, #1
    6462:	8011      	strh	r1, [r2, #0]
    6464:	001a      	movs	r2, r3
    6466:	68bb      	ldr	r3, [r7, #8]
    6468:	189b      	adds	r3, r3, r2
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	021b      	lsls	r3, r3, #8
    646e:	b21a      	sxth	r2, r3
    6470:	231e      	movs	r3, #30
    6472:	18fb      	adds	r3, r7, r3
    6474:	2100      	movs	r1, #0
    6476:	5e5b      	ldrsh	r3, [r3, r1]
    6478:	4313      	orrs	r3, r2
    647a:	b21a      	sxth	r2, r3
    647c:	231e      	movs	r3, #30
    647e:	18fb      	adds	r3, r7, r3
    6480:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    6482:	231e      	movs	r3, #30
    6484:	18fb      	adds	r3, r7, r3
    6486:	881a      	ldrh	r2, [r3, #0]
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	0011      	movs	r1, r2
    648c:	0018      	movs	r0, r3
    648e:	4b15      	ldr	r3, [pc, #84]	; (64e4 <usart_write_buffer_wait+0x128>)
    6490:	4798      	blx	r3
	while (length--) {
    6492:	1dbb      	adds	r3, r7, #6
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	1dba      	adds	r2, r7, #6
    6498:	1e59      	subs	r1, r3, #1
    649a:	8011      	strh	r1, [r2, #0]
    649c:	2b00      	cmp	r3, #0
    649e:	d1af      	bne.n	6400 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	61bb      	str	r3, [r7, #24]
    64a4:	e00f      	b.n	64c6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    64a6:	697b      	ldr	r3, [r7, #20]
    64a8:	7e1b      	ldrb	r3, [r3, #24]
    64aa:	b2db      	uxtb	r3, r3
    64ac:	001a      	movs	r2, r3
    64ae:	2302      	movs	r3, #2
    64b0:	4013      	ands	r3, r2
    64b2:	d10d      	bne.n	64d0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    64b4:	69bb      	ldr	r3, [r7, #24]
    64b6:	4a0a      	ldr	r2, [pc, #40]	; (64e0 <usart_write_buffer_wait+0x124>)
    64b8:	4293      	cmp	r3, r2
    64ba:	d101      	bne.n	64c0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    64bc:	2312      	movs	r3, #18
    64be:	e009      	b.n	64d4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64c0:	69bb      	ldr	r3, [r7, #24]
    64c2:	3301      	adds	r3, #1
    64c4:	61bb      	str	r3, [r7, #24]
    64c6:	69bb      	ldr	r3, [r7, #24]
    64c8:	4a05      	ldr	r2, [pc, #20]	; (64e0 <usart_write_buffer_wait+0x124>)
    64ca:	4293      	cmp	r3, r2
    64cc:	d9eb      	bls.n	64a6 <usart_write_buffer_wait+0xea>
    64ce:	e000      	b.n	64d2 <usart_write_buffer_wait+0x116>
			break;
    64d0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    64d2:	2300      	movs	r3, #0
}
    64d4:	0018      	movs	r0, r3
    64d6:	46bd      	mov	sp, r7
    64d8:	b00a      	add	sp, #40	; 0x28
    64da:	bd80      	pop	{r7, pc}
    64dc:	00005df1 	.word	0x00005df1
    64e0:	0000ffff 	.word	0x0000ffff
    64e4:	00006359 	.word	0x00006359

000064e8 <system_interrupt_enter_critical_section>:
{
    64e8:	b580      	push	{r7, lr}
    64ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <system_interrupt_enter_critical_section+0x10>)
    64ee:	4798      	blx	r3
}
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	0000717d 	.word	0x0000717d

000064fc <system_interrupt_leave_critical_section>:
{
    64fc:	b580      	push	{r7, lr}
    64fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6500:	4b02      	ldr	r3, [pc, #8]	; (650c <system_interrupt_leave_critical_section+0x10>)
    6502:	4798      	blx	r3
}
    6504:	46c0      	nop			; (mov r8, r8)
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	000071d1 	.word	0x000071d1

00006510 <usart_is_syncing>:
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	69db      	ldr	r3, [r3, #28]
    6522:	1e5a      	subs	r2, r3, #1
    6524:	4193      	sbcs	r3, r2
    6526:	b2db      	uxtb	r3, r3
}
    6528:	0018      	movs	r0, r3
    652a:	46bd      	mov	sp, r7
    652c:	b004      	add	sp, #16
    652e:	bd80      	pop	{r7, pc}

00006530 <_usart_wait_for_sync>:
{
    6530:	b580      	push	{r7, lr}
    6532:	b082      	sub	sp, #8
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	0018      	movs	r0, r3
    653e:	4b04      	ldr	r3, [pc, #16]	; (6550 <_usart_wait_for_sync+0x20>)
    6540:	4798      	blx	r3
    6542:	1e03      	subs	r3, r0, #0
    6544:	d1f9      	bne.n	653a <_usart_wait_for_sync+0xa>
}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	46bd      	mov	sp, r7
    654a:	b002      	add	sp, #8
    654c:	bd80      	pop	{r7, pc}
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	00006511 	.word	0x00006511

00006554 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6554:	b580      	push	{r7, lr}
    6556:	b086      	sub	sp, #24
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	60b9      	str	r1, [r7, #8]
    655e:	1dbb      	adds	r3, r7, #6
    6560:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6568:	4b16      	ldr	r3, [pc, #88]	; (65c4 <_usart_read_buffer+0x70>)
    656a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6570:	b29b      	uxth	r3, r3
    6572:	2b00      	cmp	r3, #0
    6574:	d003      	beq.n	657e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    6576:	4b14      	ldr	r3, [pc, #80]	; (65c8 <_usart_read_buffer+0x74>)
    6578:	4798      	blx	r3
		return STATUS_BUSY;
    657a:	2305      	movs	r3, #5
    657c:	e01e      	b.n	65bc <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	1dba      	adds	r2, r7, #6
    6582:	8812      	ldrh	r2, [r2, #0]
    6584:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    6586:	4b10      	ldr	r3, [pc, #64]	; (65c8 <_usart_read_buffer+0x74>)
    6588:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    658a:	68fb      	ldr	r3, [r7, #12]
    658c:	68ba      	ldr	r2, [r7, #8]
    658e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	2232      	movs	r2, #50	; 0x32
    6594:	2105      	movs	r1, #5
    6596:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6598:	697b      	ldr	r3, [r7, #20]
    659a:	2204      	movs	r2, #4
    659c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    659e:	68fb      	ldr	r3, [r7, #12]
    65a0:	7a1b      	ldrb	r3, [r3, #8]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d002      	beq.n	65ac <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    65a6:	697b      	ldr	r3, [r7, #20]
    65a8:	2220      	movs	r2, #32
    65aa:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    65ac:	68fb      	ldr	r3, [r7, #12]
    65ae:	7a5b      	ldrb	r3, [r3, #9]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d002      	beq.n	65ba <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    65b4:	697b      	ldr	r3, [r7, #20]
    65b6:	2208      	movs	r2, #8
    65b8:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    65ba:	2300      	movs	r3, #0
}
    65bc:	0018      	movs	r0, r3
    65be:	46bd      	mov	sp, r7
    65c0:	b006      	add	sp, #24
    65c2:	bd80      	pop	{r7, pc}
    65c4:	000064e9 	.word	0x000064e9
    65c8:	000064fd 	.word	0x000064fd

000065cc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    65cc:	b580      	push	{r7, lr}
    65ce:	b084      	sub	sp, #16
    65d0:	af00      	add	r7, sp, #0
    65d2:	60f8      	str	r0, [r7, #12]
    65d4:	60b9      	str	r1, [r7, #8]
    65d6:	1dbb      	adds	r3, r7, #6
    65d8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    65da:	1dbb      	adds	r3, r7, #6
    65dc:	881b      	ldrh	r3, [r3, #0]
    65de:	2b00      	cmp	r3, #0
    65e0:	d101      	bne.n	65e6 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    65e2:	2317      	movs	r3, #23
    65e4:	e010      	b.n	6608 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    65e6:	68fb      	ldr	r3, [r7, #12]
    65e8:	799b      	ldrb	r3, [r3, #6]
    65ea:	2201      	movs	r2, #1
    65ec:	4053      	eors	r3, r2
    65ee:	b2db      	uxtb	r3, r3
    65f0:	2b00      	cmp	r3, #0
    65f2:	d001      	beq.n	65f8 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    65f4:	231c      	movs	r3, #28
    65f6:	e007      	b.n	6608 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    65f8:	1dbb      	adds	r3, r7, #6
    65fa:	881a      	ldrh	r2, [r3, #0]
    65fc:	68b9      	ldr	r1, [r7, #8]
    65fe:	68fb      	ldr	r3, [r7, #12]
    6600:	0018      	movs	r0, r3
    6602:	4b03      	ldr	r3, [pc, #12]	; (6610 <usart_read_buffer_job+0x44>)
    6604:	4798      	blx	r3
    6606:	0003      	movs	r3, r0
}
    6608:	0018      	movs	r0, r3
    660a:	46bd      	mov	sp, r7
    660c:	b004      	add	sp, #16
    660e:	bd80      	pop	{r7, pc}
    6610:	00006555 	.word	0x00006555

00006614 <usart_abort_job>:
 * \param[in]  transceiver_type  Transfer type to cancel
 */
void usart_abort_job(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    6614:	b580      	push	{r7, lr}
    6616:	b084      	sub	sp, #16
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
    661c:	000a      	movs	r2, r1
    661e:	1cfb      	adds	r3, r7, #3
    6620:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6622:	687b      	ldr	r3, [r7, #4]
    6624:	681b      	ldr	r3, [r3, #0]
    6626:	60fb      	str	r3, [r7, #12]

	switch(transceiver_type) {
    6628:	1cfb      	adds	r3, r7, #3
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	2b00      	cmp	r3, #0
    662e:	d002      	beq.n	6636 <usart_abort_job+0x22>
    6630:	2b01      	cmp	r3, #1
    6632:	d007      	beq.n	6644 <usart_abort_job+0x30>
			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;

			break;
	}
}
    6634:	e00d      	b.n	6652 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    6636:	68fb      	ldr	r3, [r7, #12]
    6638:	2204      	movs	r2, #4
    663a:	761a      	strb	r2, [r3, #24]
			module->remaining_rx_buffer_length = 0;
    663c:	687b      	ldr	r3, [r7, #4]
    663e:	2200      	movs	r2, #0
    6640:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
    6642:	e006      	b.n	6652 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    6644:	68fb      	ldr	r3, [r7, #12]
    6646:	2202      	movs	r2, #2
    6648:	761a      	strb	r2, [r3, #24]
			module->remaining_tx_buffer_length = 0;
    664a:	687b      	ldr	r3, [r7, #4]
    664c:	2200      	movs	r2, #0
    664e:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
    6650:	46c0      	nop			; (mov r8, r8)
}
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	46bd      	mov	sp, r7
    6656:	b004      	add	sp, #16
    6658:	bd80      	pop	{r7, pc}
	...

0000665c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    665c:	b580      	push	{r7, lr}
    665e:	b088      	sub	sp, #32
    6660:	af00      	add	r7, sp, #0
    6662:	0002      	movs	r2, r0
    6664:	1dfb      	adds	r3, r7, #7
    6666:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    6668:	1dfb      	adds	r3, r7, #7
    666a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    666c:	4ba3      	ldr	r3, [pc, #652]	; (68fc <_usart_interrupt_handler+0x2a0>)
    666e:	0092      	lsls	r2, r2, #2
    6670:	58d3      	ldr	r3, [r2, r3]
    6672:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6674:	69bb      	ldr	r3, [r7, #24]
    6676:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    6678:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    667a:	69bb      	ldr	r3, [r7, #24]
    667c:	0018      	movs	r0, r3
    667e:	4ba0      	ldr	r3, [pc, #640]	; (6900 <_usart_interrupt_handler+0x2a4>)
    6680:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6682:	697b      	ldr	r3, [r7, #20]
    6684:	7e1b      	ldrb	r3, [r3, #24]
    6686:	b2da      	uxtb	r2, r3
    6688:	2312      	movs	r3, #18
    668a:	18fb      	adds	r3, r7, r3
    668c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    668e:	697b      	ldr	r3, [r7, #20]
    6690:	7d9b      	ldrb	r3, [r3, #22]
    6692:	b2db      	uxtb	r3, r3
    6694:	b29a      	uxth	r2, r3
    6696:	2312      	movs	r3, #18
    6698:	18fb      	adds	r3, r7, r3
    669a:	2112      	movs	r1, #18
    669c:	1879      	adds	r1, r7, r1
    669e:	8809      	ldrh	r1, [r1, #0]
    66a0:	400a      	ands	r2, r1
    66a2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    66a4:	69bb      	ldr	r3, [r7, #24]
    66a6:	2230      	movs	r2, #48	; 0x30
    66a8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    66aa:	69ba      	ldr	r2, [r7, #24]
    66ac:	2131      	movs	r1, #49	; 0x31
    66ae:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    66b0:	4013      	ands	r3, r2
    66b2:	b2da      	uxtb	r2, r3
    66b4:	2310      	movs	r3, #16
    66b6:	18fb      	adds	r3, r7, r3
    66b8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    66ba:	2312      	movs	r3, #18
    66bc:	18fb      	adds	r3, r7, r3
    66be:	881b      	ldrh	r3, [r3, #0]
    66c0:	2201      	movs	r2, #1
    66c2:	4013      	ands	r3, r2
    66c4:	d044      	beq.n	6750 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    66c6:	69bb      	ldr	r3, [r7, #24]
    66c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    66ca:	b29b      	uxth	r3, r3
    66cc:	2b00      	cmp	r3, #0
    66ce:	d03c      	beq.n	674a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    66d0:	69bb      	ldr	r3, [r7, #24]
    66d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	b2da      	uxtb	r2, r3
    66d8:	231c      	movs	r3, #28
    66da:	18fb      	adds	r3, r7, r3
    66dc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    66de:	69bb      	ldr	r3, [r7, #24]
    66e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66e2:	1c5a      	adds	r2, r3, #1
    66e4:	69bb      	ldr	r3, [r7, #24]
    66e6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    66e8:	69bb      	ldr	r3, [r7, #24]
    66ea:	795b      	ldrb	r3, [r3, #5]
    66ec:	2b01      	cmp	r3, #1
    66ee:	d113      	bne.n	6718 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    66f0:	69bb      	ldr	r3, [r7, #24]
    66f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	b2db      	uxtb	r3, r3
    66f8:	021b      	lsls	r3, r3, #8
    66fa:	b21a      	sxth	r2, r3
    66fc:	231c      	movs	r3, #28
    66fe:	18fb      	adds	r3, r7, r3
    6700:	2100      	movs	r1, #0
    6702:	5e5b      	ldrsh	r3, [r3, r1]
    6704:	4313      	orrs	r3, r2
    6706:	b21a      	sxth	r2, r3
    6708:	231c      	movs	r3, #28
    670a:	18fb      	adds	r3, r7, r3
    670c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    670e:	69bb      	ldr	r3, [r7, #24]
    6710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6712:	1c5a      	adds	r2, r3, #1
    6714:	69bb      	ldr	r3, [r7, #24]
    6716:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6718:	231c      	movs	r3, #28
    671a:	18fb      	adds	r3, r7, r3
    671c:	881b      	ldrh	r3, [r3, #0]
    671e:	05db      	lsls	r3, r3, #23
    6720:	0ddb      	lsrs	r3, r3, #23
    6722:	b29a      	uxth	r2, r3
    6724:	697b      	ldr	r3, [r7, #20]
    6726:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6728:	69bb      	ldr	r3, [r7, #24]
    672a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    672c:	b29b      	uxth	r3, r3
    672e:	3b01      	subs	r3, #1
    6730:	b29b      	uxth	r3, r3
    6732:	69ba      	ldr	r2, [r7, #24]
    6734:	1c19      	adds	r1, r3, #0
    6736:	85d1      	strh	r1, [r2, #46]	; 0x2e
    6738:	2b00      	cmp	r3, #0
    673a:	d109      	bne.n	6750 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    673c:	697b      	ldr	r3, [r7, #20]
    673e:	2201      	movs	r2, #1
    6740:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6742:	697b      	ldr	r3, [r7, #20]
    6744:	2202      	movs	r2, #2
    6746:	759a      	strb	r2, [r3, #22]
    6748:	e002      	b.n	6750 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    674a:	697b      	ldr	r3, [r7, #20]
    674c:	2201      	movs	r2, #1
    674e:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6750:	2312      	movs	r3, #18
    6752:	18fb      	adds	r3, r7, r3
    6754:	881b      	ldrh	r3, [r3, #0]
    6756:	2202      	movs	r2, #2
    6758:	4013      	ands	r3, r2
    675a:	d011      	beq.n	6780 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    675c:	697b      	ldr	r3, [r7, #20]
    675e:	2202      	movs	r2, #2
    6760:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    6762:	69bb      	ldr	r3, [r7, #24]
    6764:	2233      	movs	r2, #51	; 0x33
    6766:	2100      	movs	r1, #0
    6768:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    676a:	2310      	movs	r3, #16
    676c:	18fb      	adds	r3, r7, r3
    676e:	881b      	ldrh	r3, [r3, #0]
    6770:	2201      	movs	r2, #1
    6772:	4013      	ands	r3, r2
    6774:	d004      	beq.n	6780 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6776:	69bb      	ldr	r3, [r7, #24]
    6778:	68db      	ldr	r3, [r3, #12]
    677a:	69ba      	ldr	r2, [r7, #24]
    677c:	0010      	movs	r0, r2
    677e:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6780:	2312      	movs	r3, #18
    6782:	18fb      	adds	r3, r7, r3
    6784:	881b      	ldrh	r3, [r3, #0]
    6786:	2204      	movs	r2, #4
    6788:	4013      	ands	r3, r2
    678a:	d100      	bne.n	678e <_usart_interrupt_handler+0x132>
    678c:	e0bd      	b.n	690a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    678e:	69bb      	ldr	r3, [r7, #24]
    6790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6792:	b29b      	uxth	r3, r3
    6794:	2b00      	cmp	r3, #0
    6796:	d100      	bne.n	679a <_usart_interrupt_handler+0x13e>
    6798:	e0b4      	b.n	6904 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    679a:	697b      	ldr	r3, [r7, #20]
    679c:	8b5b      	ldrh	r3, [r3, #26]
    679e:	b29b      	uxth	r3, r3
    67a0:	b2da      	uxtb	r2, r3
    67a2:	231f      	movs	r3, #31
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	213f      	movs	r1, #63	; 0x3f
    67a8:	400a      	ands	r2, r1
    67aa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    67ac:	231f      	movs	r3, #31
    67ae:	18fb      	adds	r3, r7, r3
    67b0:	781b      	ldrb	r3, [r3, #0]
    67b2:	2208      	movs	r2, #8
    67b4:	4013      	ands	r3, r2
    67b6:	d007      	beq.n	67c8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    67b8:	231f      	movs	r3, #31
    67ba:	18fb      	adds	r3, r7, r3
    67bc:	221f      	movs	r2, #31
    67be:	18ba      	adds	r2, r7, r2
    67c0:	7812      	ldrb	r2, [r2, #0]
    67c2:	2108      	movs	r1, #8
    67c4:	438a      	bics	r2, r1
    67c6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    67c8:	231f      	movs	r3, #31
    67ca:	18fb      	adds	r3, r7, r3
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	2b00      	cmp	r3, #0
    67d0:	d050      	beq.n	6874 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    67d2:	231f      	movs	r3, #31
    67d4:	18fb      	adds	r3, r7, r3
    67d6:	781b      	ldrb	r3, [r3, #0]
    67d8:	2202      	movs	r2, #2
    67da:	4013      	ands	r3, r2
    67dc:	d007      	beq.n	67ee <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    67de:	69bb      	ldr	r3, [r7, #24]
    67e0:	2232      	movs	r2, #50	; 0x32
    67e2:	211a      	movs	r1, #26
    67e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    67e6:	697b      	ldr	r3, [r7, #20]
    67e8:	2202      	movs	r2, #2
    67ea:	835a      	strh	r2, [r3, #26]
    67ec:	e036      	b.n	685c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    67ee:	231f      	movs	r3, #31
    67f0:	18fb      	adds	r3, r7, r3
    67f2:	781b      	ldrb	r3, [r3, #0]
    67f4:	2204      	movs	r2, #4
    67f6:	4013      	ands	r3, r2
    67f8:	d007      	beq.n	680a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    67fa:	69bb      	ldr	r3, [r7, #24]
    67fc:	2232      	movs	r2, #50	; 0x32
    67fe:	211e      	movs	r1, #30
    6800:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6802:	697b      	ldr	r3, [r7, #20]
    6804:	2204      	movs	r2, #4
    6806:	835a      	strh	r2, [r3, #26]
    6808:	e028      	b.n	685c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    680a:	231f      	movs	r3, #31
    680c:	18fb      	adds	r3, r7, r3
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	2201      	movs	r2, #1
    6812:	4013      	ands	r3, r2
    6814:	d007      	beq.n	6826 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6816:	69bb      	ldr	r3, [r7, #24]
    6818:	2232      	movs	r2, #50	; 0x32
    681a:	2113      	movs	r1, #19
    681c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    681e:	697b      	ldr	r3, [r7, #20]
    6820:	2201      	movs	r2, #1
    6822:	835a      	strh	r2, [r3, #26]
    6824:	e01a      	b.n	685c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6826:	231f      	movs	r3, #31
    6828:	18fb      	adds	r3, r7, r3
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	2210      	movs	r2, #16
    682e:	4013      	ands	r3, r2
    6830:	d007      	beq.n	6842 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    6832:	69bb      	ldr	r3, [r7, #24]
    6834:	2232      	movs	r2, #50	; 0x32
    6836:	2142      	movs	r1, #66	; 0x42
    6838:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    683a:	697b      	ldr	r3, [r7, #20]
    683c:	2210      	movs	r2, #16
    683e:	835a      	strh	r2, [r3, #26]
    6840:	e00c      	b.n	685c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6842:	231f      	movs	r3, #31
    6844:	18fb      	adds	r3, r7, r3
    6846:	781b      	ldrb	r3, [r3, #0]
    6848:	2220      	movs	r2, #32
    684a:	4013      	ands	r3, r2
    684c:	d006      	beq.n	685c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    684e:	69bb      	ldr	r3, [r7, #24]
    6850:	2232      	movs	r2, #50	; 0x32
    6852:	2141      	movs	r1, #65	; 0x41
    6854:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6856:	697b      	ldr	r3, [r7, #20]
    6858:	2220      	movs	r2, #32
    685a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    685c:	2310      	movs	r3, #16
    685e:	18fb      	adds	r3, r7, r3
    6860:	881b      	ldrh	r3, [r3, #0]
    6862:	2204      	movs	r2, #4
    6864:	4013      	ands	r3, r2
				if (callback_status
    6866:	d050      	beq.n	690a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6868:	69bb      	ldr	r3, [r7, #24]
    686a:	695b      	ldr	r3, [r3, #20]
    686c:	69ba      	ldr	r2, [r7, #24]
    686e:	0010      	movs	r0, r2
    6870:	4798      	blx	r3
    6872:	e04a      	b.n	690a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6874:	697b      	ldr	r3, [r7, #20]
    6876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6878:	b29a      	uxth	r2, r3
    687a:	230e      	movs	r3, #14
    687c:	18fb      	adds	r3, r7, r3
    687e:	05d2      	lsls	r2, r2, #23
    6880:	0dd2      	lsrs	r2, r2, #23
    6882:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6884:	69bb      	ldr	r3, [r7, #24]
    6886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6888:	220e      	movs	r2, #14
    688a:	18ba      	adds	r2, r7, r2
    688c:	8812      	ldrh	r2, [r2, #0]
    688e:	b2d2      	uxtb	r2, r2
    6890:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6892:	69bb      	ldr	r3, [r7, #24]
    6894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6896:	1c5a      	adds	r2, r3, #1
    6898:	69bb      	ldr	r3, [r7, #24]
    689a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    689c:	69bb      	ldr	r3, [r7, #24]
    689e:	795b      	ldrb	r3, [r3, #5]
    68a0:	2b01      	cmp	r3, #1
    68a2:	d10d      	bne.n	68c0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    68a4:	69bb      	ldr	r3, [r7, #24]
    68a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68a8:	220e      	movs	r2, #14
    68aa:	18ba      	adds	r2, r7, r2
    68ac:	8812      	ldrh	r2, [r2, #0]
    68ae:	0a12      	lsrs	r2, r2, #8
    68b0:	b292      	uxth	r2, r2
    68b2:	b2d2      	uxtb	r2, r2
    68b4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    68b6:	69bb      	ldr	r3, [r7, #24]
    68b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68ba:	1c5a      	adds	r2, r3, #1
    68bc:	69bb      	ldr	r3, [r7, #24]
    68be:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    68c0:	69bb      	ldr	r3, [r7, #24]
    68c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    68c4:	b29b      	uxth	r3, r3
    68c6:	3b01      	subs	r3, #1
    68c8:	b29b      	uxth	r3, r3
    68ca:	69ba      	ldr	r2, [r7, #24]
    68cc:	1c19      	adds	r1, r3, #0
    68ce:	8591      	strh	r1, [r2, #44]	; 0x2c
    68d0:	2b00      	cmp	r3, #0
    68d2:	d11a      	bne.n	690a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68d4:	697b      	ldr	r3, [r7, #20]
    68d6:	2204      	movs	r2, #4
    68d8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    68da:	69bb      	ldr	r3, [r7, #24]
    68dc:	2232      	movs	r2, #50	; 0x32
    68de:	2100      	movs	r1, #0
    68e0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    68e2:	2310      	movs	r3, #16
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	881b      	ldrh	r3, [r3, #0]
    68e8:	2202      	movs	r2, #2
    68ea:	4013      	ands	r3, r2
					if (callback_status
    68ec:	d00d      	beq.n	690a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    68ee:	69bb      	ldr	r3, [r7, #24]
    68f0:	691b      	ldr	r3, [r3, #16]
    68f2:	69ba      	ldr	r2, [r7, #24]
    68f4:	0010      	movs	r0, r2
    68f6:	4798      	blx	r3
    68f8:	e007      	b.n	690a <_usart_interrupt_handler+0x2ae>
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	20000468 	.word	0x20000468
    6900:	00006531 	.word	0x00006531
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6904:	697b      	ldr	r3, [r7, #20]
    6906:	2204      	movs	r2, #4
    6908:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    690a:	2312      	movs	r3, #18
    690c:	18fb      	adds	r3, r7, r3
    690e:	881b      	ldrh	r3, [r3, #0]
    6910:	2210      	movs	r2, #16
    6912:	4013      	ands	r3, r2
    6914:	d010      	beq.n	6938 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6916:	697b      	ldr	r3, [r7, #20]
    6918:	2210      	movs	r2, #16
    691a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    691c:	697b      	ldr	r3, [r7, #20]
    691e:	2210      	movs	r2, #16
    6920:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6922:	2310      	movs	r3, #16
    6924:	18fb      	adds	r3, r7, r3
    6926:	881b      	ldrh	r3, [r3, #0]
    6928:	2210      	movs	r2, #16
    692a:	4013      	ands	r3, r2
    692c:	d004      	beq.n	6938 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    692e:	69bb      	ldr	r3, [r7, #24]
    6930:	69db      	ldr	r3, [r3, #28]
    6932:	69ba      	ldr	r2, [r7, #24]
    6934:	0010      	movs	r0, r2
    6936:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6938:	2312      	movs	r3, #18
    693a:	18fb      	adds	r3, r7, r3
    693c:	881b      	ldrh	r3, [r3, #0]
    693e:	2220      	movs	r2, #32
    6940:	4013      	ands	r3, r2
    6942:	d010      	beq.n	6966 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6944:	697b      	ldr	r3, [r7, #20]
    6946:	2220      	movs	r2, #32
    6948:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    694a:	697b      	ldr	r3, [r7, #20]
    694c:	2220      	movs	r2, #32
    694e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6950:	2310      	movs	r3, #16
    6952:	18fb      	adds	r3, r7, r3
    6954:	881b      	ldrh	r3, [r3, #0]
    6956:	2208      	movs	r2, #8
    6958:	4013      	ands	r3, r2
    695a:	d004      	beq.n	6966 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    695c:	69bb      	ldr	r3, [r7, #24]
    695e:	699b      	ldr	r3, [r3, #24]
    6960:	69ba      	ldr	r2, [r7, #24]
    6962:	0010      	movs	r0, r2
    6964:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6966:	2312      	movs	r3, #18
    6968:	18fb      	adds	r3, r7, r3
    696a:	881b      	ldrh	r3, [r3, #0]
    696c:	2208      	movs	r2, #8
    696e:	4013      	ands	r3, r2
    6970:	d010      	beq.n	6994 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6972:	697b      	ldr	r3, [r7, #20]
    6974:	2208      	movs	r2, #8
    6976:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6978:	697b      	ldr	r3, [r7, #20]
    697a:	2208      	movs	r2, #8
    697c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    697e:	2310      	movs	r3, #16
    6980:	18fb      	adds	r3, r7, r3
    6982:	881b      	ldrh	r3, [r3, #0]
    6984:	2220      	movs	r2, #32
    6986:	4013      	ands	r3, r2
    6988:	d004      	beq.n	6994 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    698a:	69bb      	ldr	r3, [r7, #24]
    698c:	6a1b      	ldr	r3, [r3, #32]
    698e:	69ba      	ldr	r2, [r7, #24]
    6990:	0010      	movs	r0, r2
    6992:	4798      	blx	r3
		}
	}
#endif
}
    6994:	46c0      	nop			; (mov r8, r8)
    6996:	46bd      	mov	sp, r7
    6998:	b008      	add	sp, #32
    699a:	bd80      	pop	{r7, pc}

0000699c <system_gclk_chan_get_config_defaults>:
{
    699c:	b580      	push	{r7, lr}
    699e:	b082      	sub	sp, #8
    69a0:	af00      	add	r7, sp, #0
    69a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	2200      	movs	r2, #0
    69a8:	701a      	strb	r2, [r3, #0]
}
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	46bd      	mov	sp, r7
    69ae:	b002      	add	sp, #8
    69b0:	bd80      	pop	{r7, pc}

000069b2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    69b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    69b4:	b08d      	sub	sp, #52	; 0x34
    69b6:	af00      	add	r7, sp, #0
    69b8:	60b8      	str	r0, [r7, #8]
    69ba:	60f9      	str	r1, [r7, #12]
    69bc:	603a      	str	r2, [r7, #0]
    69be:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    69c0:	2300      	movs	r3, #0
    69c2:	2400      	movs	r4, #0
    69c4:	623b      	str	r3, [r7, #32]
    69c6:	627c      	str	r4, [r7, #36]	; 0x24
    69c8:	2300      	movs	r3, #0
    69ca:	2400      	movs	r4, #0
    69cc:	61bb      	str	r3, [r7, #24]
    69ce:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    69d0:	233f      	movs	r3, #63	; 0x3f
    69d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    69d4:	e053      	b.n	6a7e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    69d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    69d8:	3b20      	subs	r3, #32
    69da:	2b00      	cmp	r3, #0
    69dc:	db04      	blt.n	69e8 <long_division+0x36>
    69de:	2201      	movs	r2, #1
    69e0:	409a      	lsls	r2, r3
    69e2:	0013      	movs	r3, r2
    69e4:	617b      	str	r3, [r7, #20]
    69e6:	e00b      	b.n	6a00 <long_division+0x4e>
    69e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    69ea:	2220      	movs	r2, #32
    69ec:	1ad3      	subs	r3, r2, r3
    69ee:	2201      	movs	r2, #1
    69f0:	40da      	lsrs	r2, r3
    69f2:	0013      	movs	r3, r2
    69f4:	2100      	movs	r1, #0
    69f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    69f8:	4091      	lsls	r1, r2
    69fa:	000a      	movs	r2, r1
    69fc:	4313      	orrs	r3, r2
    69fe:	617b      	str	r3, [r7, #20]
    6a00:	2201      	movs	r2, #1
    6a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a04:	409a      	lsls	r2, r3
    6a06:	0013      	movs	r3, r2
    6a08:	613b      	str	r3, [r7, #16]

		r = r << 1;
    6a0a:	69bb      	ldr	r3, [r7, #24]
    6a0c:	69fc      	ldr	r4, [r7, #28]
    6a0e:	18db      	adds	r3, r3, r3
    6a10:	4164      	adcs	r4, r4
    6a12:	61bb      	str	r3, [r7, #24]
    6a14:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    6a16:	68bb      	ldr	r3, [r7, #8]
    6a18:	693a      	ldr	r2, [r7, #16]
    6a1a:	401a      	ands	r2, r3
    6a1c:	0015      	movs	r5, r2
    6a1e:	68fb      	ldr	r3, [r7, #12]
    6a20:	697a      	ldr	r2, [r7, #20]
    6a22:	401a      	ands	r2, r3
    6a24:	0016      	movs	r6, r2
    6a26:	002b      	movs	r3, r5
    6a28:	4333      	orrs	r3, r6
    6a2a:	d007      	beq.n	6a3c <long_division+0x8a>
			r |= 0x01;
    6a2c:	69bb      	ldr	r3, [r7, #24]
    6a2e:	2201      	movs	r2, #1
    6a30:	4313      	orrs	r3, r2
    6a32:	61bb      	str	r3, [r7, #24]
    6a34:	69fb      	ldr	r3, [r7, #28]
    6a36:	2200      	movs	r2, #0
    6a38:	4313      	orrs	r3, r2
    6a3a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    6a3c:	687a      	ldr	r2, [r7, #4]
    6a3e:	69fb      	ldr	r3, [r7, #28]
    6a40:	429a      	cmp	r2, r3
    6a42:	d819      	bhi.n	6a78 <long_division+0xc6>
    6a44:	687a      	ldr	r2, [r7, #4]
    6a46:	69fb      	ldr	r3, [r7, #28]
    6a48:	429a      	cmp	r2, r3
    6a4a:	d103      	bne.n	6a54 <long_division+0xa2>
    6a4c:	683a      	ldr	r2, [r7, #0]
    6a4e:	69bb      	ldr	r3, [r7, #24]
    6a50:	429a      	cmp	r2, r3
    6a52:	d811      	bhi.n	6a78 <long_division+0xc6>
			r = r - d;
    6a54:	69b9      	ldr	r1, [r7, #24]
    6a56:	69fa      	ldr	r2, [r7, #28]
    6a58:	683b      	ldr	r3, [r7, #0]
    6a5a:	687c      	ldr	r4, [r7, #4]
    6a5c:	1ac9      	subs	r1, r1, r3
    6a5e:	41a2      	sbcs	r2, r4
    6a60:	000b      	movs	r3, r1
    6a62:	0014      	movs	r4, r2
    6a64:	61bb      	str	r3, [r7, #24]
    6a66:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    6a68:	6a3a      	ldr	r2, [r7, #32]
    6a6a:	693b      	ldr	r3, [r7, #16]
    6a6c:	4313      	orrs	r3, r2
    6a6e:	623b      	str	r3, [r7, #32]
    6a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6a72:	697b      	ldr	r3, [r7, #20]
    6a74:	4313      	orrs	r3, r2
    6a76:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    6a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a7a:	3b01      	subs	r3, #1
    6a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    6a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a80:	2b00      	cmp	r3, #0
    6a82:	daa8      	bge.n	69d6 <long_division+0x24>
		}
	}

	return q;
    6a84:	6a3b      	ldr	r3, [r7, #32]
    6a86:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6a88:	0018      	movs	r0, r3
    6a8a:	0021      	movs	r1, r4
    6a8c:	46bd      	mov	sp, r7
    6a8e:	b00d      	add	sp, #52	; 0x34
    6a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a92 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6a92:	b580      	push	{r7, lr}
    6a94:	b086      	sub	sp, #24
    6a96:	af00      	add	r7, sp, #0
    6a98:	60f8      	str	r0, [r7, #12]
    6a9a:	60b9      	str	r1, [r7, #8]
    6a9c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    6a9e:	2316      	movs	r3, #22
    6aa0:	18fb      	adds	r3, r7, r3
    6aa2:	2200      	movs	r2, #0
    6aa4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6aa6:	68bb      	ldr	r3, [r7, #8]
    6aa8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6aaa:	68bb      	ldr	r3, [r7, #8]
    6aac:	085a      	lsrs	r2, r3, #1
    6aae:	68fb      	ldr	r3, [r7, #12]
    6ab0:	429a      	cmp	r2, r3
    6ab2:	d201      	bcs.n	6ab8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6ab4:	2340      	movs	r3, #64	; 0x40
    6ab6:	e026      	b.n	6b06 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    6ab8:	68bb      	ldr	r3, [r7, #8]
    6aba:	085b      	lsrs	r3, r3, #1
    6abc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    6abe:	e00a      	b.n	6ad6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    6ac0:	693a      	ldr	r2, [r7, #16]
    6ac2:	68fb      	ldr	r3, [r7, #12]
    6ac4:	1ad3      	subs	r3, r2, r3
    6ac6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    6ac8:	2316      	movs	r3, #22
    6aca:	18fb      	adds	r3, r7, r3
    6acc:	881a      	ldrh	r2, [r3, #0]
    6ace:	2316      	movs	r3, #22
    6ad0:	18fb      	adds	r3, r7, r3
    6ad2:	3201      	adds	r2, #1
    6ad4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    6ad6:	693a      	ldr	r2, [r7, #16]
    6ad8:	68fb      	ldr	r3, [r7, #12]
    6ada:	429a      	cmp	r2, r3
    6adc:	d2f0      	bcs.n	6ac0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    6ade:	2316      	movs	r3, #22
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	2216      	movs	r2, #22
    6ae4:	18ba      	adds	r2, r7, r2
    6ae6:	8812      	ldrh	r2, [r2, #0]
    6ae8:	3a01      	subs	r2, #1
    6aea:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    6aec:	2316      	movs	r3, #22
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	881b      	ldrh	r3, [r3, #0]
    6af2:	2bff      	cmp	r3, #255	; 0xff
    6af4:	d901      	bls.n	6afa <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6af6:	2340      	movs	r3, #64	; 0x40
    6af8:	e005      	b.n	6b06 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	2216      	movs	r2, #22
    6afe:	18ba      	adds	r2, r7, r2
    6b00:	8812      	ldrh	r2, [r2, #0]
    6b02:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    6b04:	2300      	movs	r3, #0
	}
}
    6b06:	0018      	movs	r0, r3
    6b08:	46bd      	mov	sp, r7
    6b0a:	b006      	add	sp, #24
    6b0c:	bd80      	pop	{r7, pc}
	...

00006b10 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b12:	b09d      	sub	sp, #116	; 0x74
    6b14:	af00      	add	r7, sp, #0
    6b16:	63f8      	str	r0, [r7, #60]	; 0x3c
    6b18:	63b9      	str	r1, [r7, #56]	; 0x38
    6b1a:	637a      	str	r2, [r7, #52]	; 0x34
    6b1c:	2233      	movs	r2, #51	; 0x33
    6b1e:	18ba      	adds	r2, r7, r2
    6b20:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    6b22:	2300      	movs	r3, #0
    6b24:	2400      	movs	r4, #0
    6b26:	65bb      	str	r3, [r7, #88]	; 0x58
    6b28:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    6b2a:	2300      	movs	r3, #0
    6b2c:	2400      	movs	r4, #0
    6b2e:	653b      	str	r3, [r7, #80]	; 0x50
    6b30:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    6b32:	2300      	movs	r3, #0
    6b34:	2400      	movs	r4, #0
    6b36:	66bb      	str	r3, [r7, #104]	; 0x68
    6b38:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    6b3a:	2300      	movs	r3, #0
    6b3c:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6b3e:	2358      	movs	r3, #88	; 0x58
    6b40:	2230      	movs	r2, #48	; 0x30
    6b42:	4694      	mov	ip, r2
    6b44:	44bc      	add	ip, r7
    6b46:	4463      	add	r3, ip
    6b48:	781a      	ldrb	r2, [r3, #0]
    6b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6b4c:	435a      	muls	r2, r3
    6b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6b50:	429a      	cmp	r2, r3
    6b52:	d901      	bls.n	6b58 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6b54:	2340      	movs	r3, #64	; 0x40
    6b56:	e0c6      	b.n	6ce6 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6b58:	2333      	movs	r3, #51	; 0x33
    6b5a:	18fb      	adds	r3, r7, r3
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d13d      	bne.n	6bde <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6b62:	2358      	movs	r3, #88	; 0x58
    6b64:	2230      	movs	r2, #48	; 0x30
    6b66:	4694      	mov	ip, r2
    6b68:	44bc      	add	ip, r7
    6b6a:	4463      	add	r3, ip
    6b6c:	781b      	ldrb	r3, [r3, #0]
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	613b      	str	r3, [r7, #16]
    6b72:	2300      	movs	r3, #0
    6b74:	617b      	str	r3, [r7, #20]
    6b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6b78:	60bb      	str	r3, [r7, #8]
    6b7a:	2300      	movs	r3, #0
    6b7c:	60fb      	str	r3, [r7, #12]
    6b7e:	4c5c      	ldr	r4, [pc, #368]	; (6cf0 <_sercom_get_async_baud_val+0x1e0>)
    6b80:	68ba      	ldr	r2, [r7, #8]
    6b82:	68fb      	ldr	r3, [r7, #12]
    6b84:	6938      	ldr	r0, [r7, #16]
    6b86:	6979      	ldr	r1, [r7, #20]
    6b88:	47a0      	blx	r4
    6b8a:	0003      	movs	r3, r0
    6b8c:	000c      	movs	r4, r1
    6b8e:	001b      	movs	r3, r3
    6b90:	64fb      	str	r3, [r7, #76]	; 0x4c
    6b92:	2300      	movs	r3, #0
    6b94:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    6b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6b98:	603b      	str	r3, [r7, #0]
    6b9a:	2300      	movs	r3, #0
    6b9c:	607b      	str	r3, [r7, #4]
    6b9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6ba0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6ba2:	683a      	ldr	r2, [r7, #0]
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	4c53      	ldr	r4, [pc, #332]	; (6cf4 <_sercom_get_async_baud_val+0x1e4>)
    6ba8:	47a0      	blx	r4
    6baa:	0003      	movs	r3, r0
    6bac:	000c      	movs	r4, r1
    6bae:	65bb      	str	r3, [r7, #88]	; 0x58
    6bb0:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6bb2:	2100      	movs	r1, #0
    6bb4:	2201      	movs	r2, #1
    6bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6bb8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6bba:	1ac9      	subs	r1, r1, r3
    6bbc:	41a2      	sbcs	r2, r4
    6bbe:	000b      	movs	r3, r1
    6bc0:	0014      	movs	r4, r2
    6bc2:	653b      	str	r3, [r7, #80]	; 0x50
    6bc4:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    6bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6bc8:	0c1b      	lsrs	r3, r3, #16
    6bca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6bcc:	0416      	lsls	r6, r2, #16
    6bce:	431e      	orrs	r6, r3
    6bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6bd2:	041d      	lsls	r5, r3, #16
    6bd4:	0033      	movs	r3, r6
    6bd6:	66bb      	str	r3, [r7, #104]	; 0x68
    6bd8:	2300      	movs	r3, #0
    6bda:	66fb      	str	r3, [r7, #108]	; 0x6c
    6bdc:	e07d      	b.n	6cda <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6bde:	2333      	movs	r3, #51	; 0x33
    6be0:	18fb      	adds	r3, r7, r3
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	2b01      	cmp	r3, #1
    6be6:	d000      	beq.n	6bea <_sercom_get_async_baud_val+0xda>
    6be8:	e077      	b.n	6cda <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6bea:	2337      	movs	r3, #55	; 0x37
    6bec:	2230      	movs	r2, #48	; 0x30
    6bee:	4694      	mov	ip, r2
    6bf0:	44bc      	add	ip, r7
    6bf2:	4463      	add	r3, ip
    6bf4:	2200      	movs	r2, #0
    6bf6:	701a      	strb	r2, [r3, #0]
    6bf8:	e04e      	b.n	6c98 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    6bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    6bfe:	2300      	movs	r3, #0
    6c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6c06:	0003      	movs	r3, r0
    6c08:	0f5b      	lsrs	r3, r3, #29
    6c0a:	000a      	movs	r2, r1
    6c0c:	00d2      	lsls	r2, r2, #3
    6c0e:	4313      	orrs	r3, r2
    6c10:	64fb      	str	r3, [r7, #76]	; 0x4c
    6c12:	0003      	movs	r3, r0
    6c14:	00db      	lsls	r3, r3, #3
    6c16:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    6c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c1a:	623b      	str	r3, [r7, #32]
    6c1c:	2300      	movs	r3, #0
    6c1e:	627b      	str	r3, [r7, #36]	; 0x24
    6c20:	2358      	movs	r3, #88	; 0x58
    6c22:	2230      	movs	r2, #48	; 0x30
    6c24:	4694      	mov	ip, r2
    6c26:	44bc      	add	ip, r7
    6c28:	4463      	add	r3, ip
    6c2a:	781b      	ldrb	r3, [r3, #0]
    6c2c:	b2db      	uxtb	r3, r3
    6c2e:	61bb      	str	r3, [r7, #24]
    6c30:	2300      	movs	r3, #0
    6c32:	61fb      	str	r3, [r7, #28]
    6c34:	4c2e      	ldr	r4, [pc, #184]	; (6cf0 <_sercom_get_async_baud_val+0x1e0>)
    6c36:	69ba      	ldr	r2, [r7, #24]
    6c38:	69fb      	ldr	r3, [r7, #28]
    6c3a:	6a38      	ldr	r0, [r7, #32]
    6c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c3e:	47a0      	blx	r4
    6c40:	0003      	movs	r3, r0
    6c42:	000c      	movs	r4, r1
    6c44:	643b      	str	r3, [r7, #64]	; 0x40
    6c46:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    6c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6c4a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    6c4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6c4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6c50:	001a      	movs	r2, r3
    6c52:	0023      	movs	r3, r4
    6c54:	4c27      	ldr	r4, [pc, #156]	; (6cf4 <_sercom_get_async_baud_val+0x1e4>)
    6c56:	47a0      	blx	r4
    6c58:	0003      	movs	r3, r0
    6c5a:	000c      	movs	r4, r1
    6c5c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    6c5e:	2337      	movs	r3, #55	; 0x37
    6c60:	2230      	movs	r2, #48	; 0x30
    6c62:	4694      	mov	ip, r2
    6c64:	44bc      	add	ip, r7
    6c66:	4463      	add	r3, ip
    6c68:	781b      	ldrb	r3, [r3, #0]
    6c6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6c6c:	1ad3      	subs	r3, r2, r3
    6c6e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    6c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6c72:	08db      	lsrs	r3, r3, #3
    6c74:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    6c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6c78:	4a1f      	ldr	r2, [pc, #124]	; (6cf8 <_sercom_get_async_baud_val+0x1e8>)
    6c7a:	4293      	cmp	r3, r2
    6c7c:	d915      	bls.n	6caa <_sercom_get_async_baud_val+0x19a>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6c7e:	2337      	movs	r3, #55	; 0x37
    6c80:	2230      	movs	r2, #48	; 0x30
    6c82:	4694      	mov	ip, r2
    6c84:	44bc      	add	ip, r7
    6c86:	4463      	add	r3, ip
    6c88:	781a      	ldrb	r2, [r3, #0]
    6c8a:	2337      	movs	r3, #55	; 0x37
    6c8c:	2130      	movs	r1, #48	; 0x30
    6c8e:	468c      	mov	ip, r1
    6c90:	44bc      	add	ip, r7
    6c92:	4463      	add	r3, ip
    6c94:	3201      	adds	r2, #1
    6c96:	701a      	strb	r2, [r3, #0]
    6c98:	2337      	movs	r3, #55	; 0x37
    6c9a:	2230      	movs	r2, #48	; 0x30
    6c9c:	4694      	mov	ip, r2
    6c9e:	44bc      	add	ip, r7
    6ca0:	4463      	add	r3, ip
    6ca2:	781b      	ldrb	r3, [r3, #0]
    6ca4:	2b07      	cmp	r3, #7
    6ca6:	d9a8      	bls.n	6bfa <_sercom_get_async_baud_val+0xea>
    6ca8:	e000      	b.n	6cac <_sercom_get_async_baud_val+0x19c>
				break;
    6caa:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    6cac:	2337      	movs	r3, #55	; 0x37
    6cae:	2230      	movs	r2, #48	; 0x30
    6cb0:	4694      	mov	ip, r2
    6cb2:	44bc      	add	ip, r7
    6cb4:	4463      	add	r3, ip
    6cb6:	781b      	ldrb	r3, [r3, #0]
    6cb8:	2b08      	cmp	r3, #8
    6cba:	d101      	bne.n	6cc0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6cbc:	2340      	movs	r3, #64	; 0x40
    6cbe:	e012      	b.n	6ce6 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    6cc0:	2337      	movs	r3, #55	; 0x37
    6cc2:	2230      	movs	r2, #48	; 0x30
    6cc4:	4694      	mov	ip, r2
    6cc6:	44bc      	add	ip, r7
    6cc8:	4463      	add	r3, ip
    6cca:	781b      	ldrb	r3, [r3, #0]
    6ccc:	035b      	lsls	r3, r3, #13
    6cce:	001a      	movs	r2, r3
    6cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6cd2:	4313      	orrs	r3, r2
    6cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    6cd6:	2300      	movs	r3, #0
    6cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    6cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6cdc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6cde:	b29a      	uxth	r2, r3
    6ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ce2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    6ce4:	2300      	movs	r3, #0
}
    6ce6:	0018      	movs	r0, r3
    6ce8:	46bd      	mov	sp, r7
    6cea:	b01d      	add	sp, #116	; 0x74
    6cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	000143e5 	.word	0x000143e5
    6cf4:	000069b3 	.word	0x000069b3
    6cf8:	00001fff 	.word	0x00001fff

00006cfc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b084      	sub	sp, #16
    6d00:	af00      	add	r7, sp, #0
    6d02:	0002      	movs	r2, r0
    6d04:	1dfb      	adds	r3, r7, #7
    6d06:	701a      	strb	r2, [r3, #0]
    6d08:	1dbb      	adds	r3, r7, #6
    6d0a:	1c0a      	adds	r2, r1, #0
    6d0c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6d0e:	4b1a      	ldr	r3, [pc, #104]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d10:	781b      	ldrb	r3, [r3, #0]
    6d12:	2201      	movs	r2, #1
    6d14:	4053      	eors	r3, r2
    6d16:	b2db      	uxtb	r3, r3
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d103      	bne.n	6d24 <sercom_set_gclk_generator+0x28>
    6d1c:	1dbb      	adds	r3, r7, #6
    6d1e:	781b      	ldrb	r3, [r3, #0]
    6d20:	2b00      	cmp	r3, #0
    6d22:	d01b      	beq.n	6d5c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6d24:	230c      	movs	r3, #12
    6d26:	18fb      	adds	r3, r7, r3
    6d28:	0018      	movs	r0, r3
    6d2a:	4b14      	ldr	r3, [pc, #80]	; (6d7c <sercom_set_gclk_generator+0x80>)
    6d2c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    6d2e:	230c      	movs	r3, #12
    6d30:	18fb      	adds	r3, r7, r3
    6d32:	1dfa      	adds	r2, r7, #7
    6d34:	7812      	ldrb	r2, [r2, #0]
    6d36:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6d38:	230c      	movs	r3, #12
    6d3a:	18fb      	adds	r3, r7, r3
    6d3c:	0019      	movs	r1, r3
    6d3e:	2013      	movs	r0, #19
    6d40:	4b0f      	ldr	r3, [pc, #60]	; (6d80 <sercom_set_gclk_generator+0x84>)
    6d42:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6d44:	2013      	movs	r0, #19
    6d46:	4b0f      	ldr	r3, [pc, #60]	; (6d84 <sercom_set_gclk_generator+0x88>)
    6d48:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    6d4a:	4b0b      	ldr	r3, [pc, #44]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d4c:	1dfa      	adds	r2, r7, #7
    6d4e:	7812      	ldrb	r2, [r2, #0]
    6d50:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6d52:	4b09      	ldr	r3, [pc, #36]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d54:	2201      	movs	r2, #1
    6d56:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6d58:	2300      	movs	r3, #0
    6d5a:	e008      	b.n	6d6e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6d5c:	4b06      	ldr	r3, [pc, #24]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d5e:	785b      	ldrb	r3, [r3, #1]
    6d60:	1dfa      	adds	r2, r7, #7
    6d62:	7812      	ldrb	r2, [r2, #0]
    6d64:	429a      	cmp	r2, r3
    6d66:	d101      	bne.n	6d6c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    6d68:	2300      	movs	r3, #0
    6d6a:	e000      	b.n	6d6e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6d6c:	231d      	movs	r3, #29
}
    6d6e:	0018      	movs	r0, r3
    6d70:	46bd      	mov	sp, r7
    6d72:	b004      	add	sp, #16
    6d74:	bd80      	pop	{r7, pc}
    6d76:	46c0      	nop			; (mov r8, r8)
    6d78:	200001dc 	.word	0x200001dc
    6d7c:	0000699d 	.word	0x0000699d
    6d80:	00007b31 	.word	0x00007b31
    6d84:	00007b75 	.word	0x00007b75

00006d88 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b082      	sub	sp, #8
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	6078      	str	r0, [r7, #4]
    6d90:	000a      	movs	r2, r1
    6d92:	1cfb      	adds	r3, r7, #3
    6d94:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	4a4d      	ldr	r2, [pc, #308]	; (6ed0 <_sercom_get_default_pad+0x148>)
    6d9a:	4293      	cmp	r3, r2
    6d9c:	d03f      	beq.n	6e1e <_sercom_get_default_pad+0x96>
    6d9e:	4a4c      	ldr	r2, [pc, #304]	; (6ed0 <_sercom_get_default_pad+0x148>)
    6da0:	4293      	cmp	r3, r2
    6da2:	d806      	bhi.n	6db2 <_sercom_get_default_pad+0x2a>
    6da4:	4a4b      	ldr	r2, [pc, #300]	; (6ed4 <_sercom_get_default_pad+0x14c>)
    6da6:	4293      	cmp	r3, r2
    6da8:	d00f      	beq.n	6dca <_sercom_get_default_pad+0x42>
    6daa:	4a4b      	ldr	r2, [pc, #300]	; (6ed8 <_sercom_get_default_pad+0x150>)
    6dac:	4293      	cmp	r3, r2
    6dae:	d021      	beq.n	6df4 <_sercom_get_default_pad+0x6c>
    6db0:	e089      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6db2:	4a4a      	ldr	r2, [pc, #296]	; (6edc <_sercom_get_default_pad+0x154>)
    6db4:	4293      	cmp	r3, r2
    6db6:	d100      	bne.n	6dba <_sercom_get_default_pad+0x32>
    6db8:	e05b      	b.n	6e72 <_sercom_get_default_pad+0xea>
    6dba:	4a49      	ldr	r2, [pc, #292]	; (6ee0 <_sercom_get_default_pad+0x158>)
    6dbc:	4293      	cmp	r3, r2
    6dbe:	d100      	bne.n	6dc2 <_sercom_get_default_pad+0x3a>
    6dc0:	e06c      	b.n	6e9c <_sercom_get_default_pad+0x114>
    6dc2:	4a48      	ldr	r2, [pc, #288]	; (6ee4 <_sercom_get_default_pad+0x15c>)
    6dc4:	4293      	cmp	r3, r2
    6dc6:	d03f      	beq.n	6e48 <_sercom_get_default_pad+0xc0>
    6dc8:	e07d      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6dca:	1cfb      	adds	r3, r7, #3
    6dcc:	781b      	ldrb	r3, [r3, #0]
    6dce:	2b01      	cmp	r3, #1
    6dd0:	d00a      	beq.n	6de8 <_sercom_get_default_pad+0x60>
    6dd2:	dc02      	bgt.n	6dda <_sercom_get_default_pad+0x52>
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d005      	beq.n	6de4 <_sercom_get_default_pad+0x5c>
    6dd8:	e075      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6dda:	2b02      	cmp	r3, #2
    6ddc:	d006      	beq.n	6dec <_sercom_get_default_pad+0x64>
    6dde:	2b03      	cmp	r3, #3
    6de0:	d006      	beq.n	6df0 <_sercom_get_default_pad+0x68>
    6de2:	e070      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6de4:	4b40      	ldr	r3, [pc, #256]	; (6ee8 <_sercom_get_default_pad+0x160>)
    6de6:	e06f      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6de8:	4b40      	ldr	r3, [pc, #256]	; (6eec <_sercom_get_default_pad+0x164>)
    6dea:	e06d      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6dec:	4b40      	ldr	r3, [pc, #256]	; (6ef0 <_sercom_get_default_pad+0x168>)
    6dee:	e06b      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6df0:	4b40      	ldr	r3, [pc, #256]	; (6ef4 <_sercom_get_default_pad+0x16c>)
    6df2:	e069      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6df4:	1cfb      	adds	r3, r7, #3
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2b01      	cmp	r3, #1
    6dfa:	d00a      	beq.n	6e12 <_sercom_get_default_pad+0x8a>
    6dfc:	dc02      	bgt.n	6e04 <_sercom_get_default_pad+0x7c>
    6dfe:	2b00      	cmp	r3, #0
    6e00:	d005      	beq.n	6e0e <_sercom_get_default_pad+0x86>
    6e02:	e060      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e04:	2b02      	cmp	r3, #2
    6e06:	d006      	beq.n	6e16 <_sercom_get_default_pad+0x8e>
    6e08:	2b03      	cmp	r3, #3
    6e0a:	d006      	beq.n	6e1a <_sercom_get_default_pad+0x92>
    6e0c:	e05b      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e0e:	2303      	movs	r3, #3
    6e10:	e05a      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e12:	4b39      	ldr	r3, [pc, #228]	; (6ef8 <_sercom_get_default_pad+0x170>)
    6e14:	e058      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e16:	4b39      	ldr	r3, [pc, #228]	; (6efc <_sercom_get_default_pad+0x174>)
    6e18:	e056      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e1a:	4b39      	ldr	r3, [pc, #228]	; (6f00 <_sercom_get_default_pad+0x178>)
    6e1c:	e054      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e1e:	1cfb      	adds	r3, r7, #3
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	2b01      	cmp	r3, #1
    6e24:	d00a      	beq.n	6e3c <_sercom_get_default_pad+0xb4>
    6e26:	dc02      	bgt.n	6e2e <_sercom_get_default_pad+0xa6>
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d005      	beq.n	6e38 <_sercom_get_default_pad+0xb0>
    6e2c:	e04b      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e2e:	2b02      	cmp	r3, #2
    6e30:	d006      	beq.n	6e40 <_sercom_get_default_pad+0xb8>
    6e32:	2b03      	cmp	r3, #3
    6e34:	d006      	beq.n	6e44 <_sercom_get_default_pad+0xbc>
    6e36:	e046      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e38:	4b32      	ldr	r3, [pc, #200]	; (6f04 <_sercom_get_default_pad+0x17c>)
    6e3a:	e045      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e3c:	4b32      	ldr	r3, [pc, #200]	; (6f08 <_sercom_get_default_pad+0x180>)
    6e3e:	e043      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e40:	4b32      	ldr	r3, [pc, #200]	; (6f0c <_sercom_get_default_pad+0x184>)
    6e42:	e041      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e44:	4b32      	ldr	r3, [pc, #200]	; (6f10 <_sercom_get_default_pad+0x188>)
    6e46:	e03f      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e48:	1cfb      	adds	r3, r7, #3
    6e4a:	781b      	ldrb	r3, [r3, #0]
    6e4c:	2b01      	cmp	r3, #1
    6e4e:	d00a      	beq.n	6e66 <_sercom_get_default_pad+0xde>
    6e50:	dc02      	bgt.n	6e58 <_sercom_get_default_pad+0xd0>
    6e52:	2b00      	cmp	r3, #0
    6e54:	d005      	beq.n	6e62 <_sercom_get_default_pad+0xda>
    6e56:	e036      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e58:	2b02      	cmp	r3, #2
    6e5a:	d006      	beq.n	6e6a <_sercom_get_default_pad+0xe2>
    6e5c:	2b03      	cmp	r3, #3
    6e5e:	d006      	beq.n	6e6e <_sercom_get_default_pad+0xe6>
    6e60:	e031      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e62:	4b2c      	ldr	r3, [pc, #176]	; (6f14 <_sercom_get_default_pad+0x18c>)
    6e64:	e030      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e66:	4b2c      	ldr	r3, [pc, #176]	; (6f18 <_sercom_get_default_pad+0x190>)
    6e68:	e02e      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e6a:	4b2c      	ldr	r3, [pc, #176]	; (6f1c <_sercom_get_default_pad+0x194>)
    6e6c:	e02c      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e6e:	4b2c      	ldr	r3, [pc, #176]	; (6f20 <_sercom_get_default_pad+0x198>)
    6e70:	e02a      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e72:	1cfb      	adds	r3, r7, #3
    6e74:	781b      	ldrb	r3, [r3, #0]
    6e76:	2b01      	cmp	r3, #1
    6e78:	d00a      	beq.n	6e90 <_sercom_get_default_pad+0x108>
    6e7a:	dc02      	bgt.n	6e82 <_sercom_get_default_pad+0xfa>
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d005      	beq.n	6e8c <_sercom_get_default_pad+0x104>
    6e80:	e021      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e82:	2b02      	cmp	r3, #2
    6e84:	d006      	beq.n	6e94 <_sercom_get_default_pad+0x10c>
    6e86:	2b03      	cmp	r3, #3
    6e88:	d006      	beq.n	6e98 <_sercom_get_default_pad+0x110>
    6e8a:	e01c      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e8c:	4b25      	ldr	r3, [pc, #148]	; (6f24 <_sercom_get_default_pad+0x19c>)
    6e8e:	e01b      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e90:	4b25      	ldr	r3, [pc, #148]	; (6f28 <_sercom_get_default_pad+0x1a0>)
    6e92:	e019      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e94:	4b25      	ldr	r3, [pc, #148]	; (6f2c <_sercom_get_default_pad+0x1a4>)
    6e96:	e017      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e98:	4b25      	ldr	r3, [pc, #148]	; (6f30 <_sercom_get_default_pad+0x1a8>)
    6e9a:	e015      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e9c:	1cfb      	adds	r3, r7, #3
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d00a      	beq.n	6eba <_sercom_get_default_pad+0x132>
    6ea4:	dc02      	bgt.n	6eac <_sercom_get_default_pad+0x124>
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d005      	beq.n	6eb6 <_sercom_get_default_pad+0x12e>
    6eaa:	e00c      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6eac:	2b02      	cmp	r3, #2
    6eae:	d006      	beq.n	6ebe <_sercom_get_default_pad+0x136>
    6eb0:	2b03      	cmp	r3, #3
    6eb2:	d006      	beq.n	6ec2 <_sercom_get_default_pad+0x13a>
    6eb4:	e007      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6eb6:	4b1f      	ldr	r3, [pc, #124]	; (6f34 <_sercom_get_default_pad+0x1ac>)
    6eb8:	e006      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6eba:	4b1f      	ldr	r3, [pc, #124]	; (6f38 <_sercom_get_default_pad+0x1b0>)
    6ebc:	e004      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6ebe:	4b1f      	ldr	r3, [pc, #124]	; (6f3c <_sercom_get_default_pad+0x1b4>)
    6ec0:	e002      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6ec2:	4b1f      	ldr	r3, [pc, #124]	; (6f40 <_sercom_get_default_pad+0x1b8>)
    6ec4:	e000      	b.n	6ec8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6ec6:	2300      	movs	r3, #0
}
    6ec8:	0018      	movs	r0, r3
    6eca:	46bd      	mov	sp, r7
    6ecc:	b002      	add	sp, #8
    6ece:	bd80      	pop	{r7, pc}
    6ed0:	42001000 	.word	0x42001000
    6ed4:	42000800 	.word	0x42000800
    6ed8:	42000c00 	.word	0x42000c00
    6edc:	42001800 	.word	0x42001800
    6ee0:	42001c00 	.word	0x42001c00
    6ee4:	42001400 	.word	0x42001400
    6ee8:	00040003 	.word	0x00040003
    6eec:	00050003 	.word	0x00050003
    6ef0:	00060003 	.word	0x00060003
    6ef4:	00070003 	.word	0x00070003
    6ef8:	00010003 	.word	0x00010003
    6efc:	001e0003 	.word	0x001e0003
    6f00:	001f0003 	.word	0x001f0003
    6f04:	00080003 	.word	0x00080003
    6f08:	00090003 	.word	0x00090003
    6f0c:	000a0003 	.word	0x000a0003
    6f10:	000b0003 	.word	0x000b0003
    6f14:	00100003 	.word	0x00100003
    6f18:	00110003 	.word	0x00110003
    6f1c:	00120003 	.word	0x00120003
    6f20:	00130003 	.word	0x00130003
    6f24:	000c0003 	.word	0x000c0003
    6f28:	000d0003 	.word	0x000d0003
    6f2c:	000e0003 	.word	0x000e0003
    6f30:	000f0003 	.word	0x000f0003
    6f34:	00160003 	.word	0x00160003
    6f38:	00170003 	.word	0x00170003
    6f3c:	00180003 	.word	0x00180003
    6f40:	00190003 	.word	0x00190003

00006f44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6f44:	b590      	push	{r4, r7, lr}
    6f46:	b08b      	sub	sp, #44	; 0x2c
    6f48:	af00      	add	r7, sp, #0
    6f4a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6f4c:	230c      	movs	r3, #12
    6f4e:	18fb      	adds	r3, r7, r3
    6f50:	4a0f      	ldr	r2, [pc, #60]	; (6f90 <_sercom_get_sercom_inst_index+0x4c>)
    6f52:	ca13      	ldmia	r2!, {r0, r1, r4}
    6f54:	c313      	stmia	r3!, {r0, r1, r4}
    6f56:	ca13      	ldmia	r2!, {r0, r1, r4}
    6f58:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f5a:	2300      	movs	r3, #0
    6f5c:	627b      	str	r3, [r7, #36]	; 0x24
    6f5e:	e00e      	b.n	6f7e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6f60:	230c      	movs	r3, #12
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6f66:	0092      	lsls	r2, r2, #2
    6f68:	58d3      	ldr	r3, [r2, r3]
    6f6a:	001a      	movs	r2, r3
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	429a      	cmp	r2, r3
    6f70:	d102      	bne.n	6f78 <_sercom_get_sercom_inst_index+0x34>
			return i;
    6f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f74:	b2db      	uxtb	r3, r3
    6f76:	e006      	b.n	6f86 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f7a:	3301      	adds	r3, #1
    6f7c:	627b      	str	r3, [r7, #36]	; 0x24
    6f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f80:	2b05      	cmp	r3, #5
    6f82:	d9ed      	bls.n	6f60 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6f84:	2300      	movs	r3, #0
}
    6f86:	0018      	movs	r0, r3
    6f88:	46bd      	mov	sp, r7
    6f8a:	b00b      	add	sp, #44	; 0x2c
    6f8c:	bd90      	pop	{r4, r7, pc}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	000172bc 	.word	0x000172bc

00006f94 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6f94:	b580      	push	{r7, lr}
    6f96:	b082      	sub	sp, #8
    6f98:	af00      	add	r7, sp, #0
    6f9a:	0002      	movs	r2, r0
    6f9c:	1dfb      	adds	r3, r7, #7
    6f9e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6fa0:	46c0      	nop			; (mov r8, r8)
    6fa2:	46bd      	mov	sp, r7
    6fa4:	b002      	add	sp, #8
    6fa6:	bd80      	pop	{r7, pc}

00006fa8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b084      	sub	sp, #16
    6fac:	af00      	add	r7, sp, #0
    6fae:	0002      	movs	r2, r0
    6fb0:	6039      	str	r1, [r7, #0]
    6fb2:	1dfb      	adds	r3, r7, #7
    6fb4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6fb6:	4b13      	ldr	r3, [pc, #76]	; (7004 <_sercom_set_handler+0x5c>)
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	2201      	movs	r2, #1
    6fbc:	4053      	eors	r3, r2
    6fbe:	b2db      	uxtb	r3, r3
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d015      	beq.n	6ff0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fc4:	2300      	movs	r3, #0
    6fc6:	60fb      	str	r3, [r7, #12]
    6fc8:	e00c      	b.n	6fe4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6fca:	4b0f      	ldr	r3, [pc, #60]	; (7008 <_sercom_set_handler+0x60>)
    6fcc:	68fa      	ldr	r2, [r7, #12]
    6fce:	0092      	lsls	r2, r2, #2
    6fd0:	490e      	ldr	r1, [pc, #56]	; (700c <_sercom_set_handler+0x64>)
    6fd2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6fd4:	4b0e      	ldr	r3, [pc, #56]	; (7010 <_sercom_set_handler+0x68>)
    6fd6:	68fa      	ldr	r2, [r7, #12]
    6fd8:	0092      	lsls	r2, r2, #2
    6fda:	2100      	movs	r1, #0
    6fdc:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fde:	68fb      	ldr	r3, [r7, #12]
    6fe0:	3301      	adds	r3, #1
    6fe2:	60fb      	str	r3, [r7, #12]
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	2b05      	cmp	r3, #5
    6fe8:	d9ef      	bls.n	6fca <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    6fea:	4b06      	ldr	r3, [pc, #24]	; (7004 <_sercom_set_handler+0x5c>)
    6fec:	2201      	movs	r2, #1
    6fee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6ff0:	1dfb      	adds	r3, r7, #7
    6ff2:	781a      	ldrb	r2, [r3, #0]
    6ff4:	4b04      	ldr	r3, [pc, #16]	; (7008 <_sercom_set_handler+0x60>)
    6ff6:	0092      	lsls	r2, r2, #2
    6ff8:	6839      	ldr	r1, [r7, #0]
    6ffa:	50d1      	str	r1, [r2, r3]
}
    6ffc:	46c0      	nop			; (mov r8, r8)
    6ffe:	46bd      	mov	sp, r7
    7000:	b004      	add	sp, #16
    7002:	bd80      	pop	{r7, pc}
    7004:	200001de 	.word	0x200001de
    7008:	200001e0 	.word	0x200001e0
    700c:	00006f95 	.word	0x00006f95
    7010:	20000468 	.word	0x20000468

00007014 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7014:	b590      	push	{r4, r7, lr}
    7016:	b085      	sub	sp, #20
    7018:	af00      	add	r7, sp, #0
    701a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    701c:	2308      	movs	r3, #8
    701e:	18fb      	adds	r3, r7, r3
    7020:	4a0b      	ldr	r2, [pc, #44]	; (7050 <_sercom_get_interrupt_vector+0x3c>)
    7022:	6811      	ldr	r1, [r2, #0]
    7024:	6019      	str	r1, [r3, #0]
    7026:	8892      	ldrh	r2, [r2, #4]
    7028:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    702a:	230f      	movs	r3, #15
    702c:	18fc      	adds	r4, r7, r3
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	0018      	movs	r0, r3
    7032:	4b08      	ldr	r3, [pc, #32]	; (7054 <_sercom_get_interrupt_vector+0x40>)
    7034:	4798      	blx	r3
    7036:	0003      	movs	r3, r0
    7038:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    703a:	230f      	movs	r3, #15
    703c:	18fb      	adds	r3, r7, r3
    703e:	781b      	ldrb	r3, [r3, #0]
    7040:	2208      	movs	r2, #8
    7042:	18ba      	adds	r2, r7, r2
    7044:	5cd3      	ldrb	r3, [r2, r3]
    7046:	b25b      	sxtb	r3, r3
}
    7048:	0018      	movs	r0, r3
    704a:	46bd      	mov	sp, r7
    704c:	b005      	add	sp, #20
    704e:	bd90      	pop	{r4, r7, pc}
    7050:	000172d4 	.word	0x000172d4
    7054:	00006f45 	.word	0x00006f45

00007058 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7058:	b580      	push	{r7, lr}
    705a:	af00      	add	r7, sp, #0
    705c:	4b03      	ldr	r3, [pc, #12]	; (706c <SERCOM0_Handler+0x14>)
    705e:	681b      	ldr	r3, [r3, #0]
    7060:	2000      	movs	r0, #0
    7062:	4798      	blx	r3
    7064:	46c0      	nop			; (mov r8, r8)
    7066:	46bd      	mov	sp, r7
    7068:	bd80      	pop	{r7, pc}
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	200001e0 	.word	0x200001e0

00007070 <SERCOM1_Handler>:
    7070:	b580      	push	{r7, lr}
    7072:	af00      	add	r7, sp, #0
    7074:	4b03      	ldr	r3, [pc, #12]	; (7084 <SERCOM1_Handler+0x14>)
    7076:	685b      	ldr	r3, [r3, #4]
    7078:	2001      	movs	r0, #1
    707a:	4798      	blx	r3
    707c:	46c0      	nop			; (mov r8, r8)
    707e:	46bd      	mov	sp, r7
    7080:	bd80      	pop	{r7, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	200001e0 	.word	0x200001e0

00007088 <SERCOM2_Handler>:
    7088:	b580      	push	{r7, lr}
    708a:	af00      	add	r7, sp, #0
    708c:	4b03      	ldr	r3, [pc, #12]	; (709c <SERCOM2_Handler+0x14>)
    708e:	689b      	ldr	r3, [r3, #8]
    7090:	2002      	movs	r0, #2
    7092:	4798      	blx	r3
    7094:	46c0      	nop			; (mov r8, r8)
    7096:	46bd      	mov	sp, r7
    7098:	bd80      	pop	{r7, pc}
    709a:	46c0      	nop			; (mov r8, r8)
    709c:	200001e0 	.word	0x200001e0

000070a0 <SERCOM3_Handler>:
    70a0:	b580      	push	{r7, lr}
    70a2:	af00      	add	r7, sp, #0
    70a4:	4b03      	ldr	r3, [pc, #12]	; (70b4 <SERCOM3_Handler+0x14>)
    70a6:	68db      	ldr	r3, [r3, #12]
    70a8:	2003      	movs	r0, #3
    70aa:	4798      	blx	r3
    70ac:	46c0      	nop			; (mov r8, r8)
    70ae:	46bd      	mov	sp, r7
    70b0:	bd80      	pop	{r7, pc}
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	200001e0 	.word	0x200001e0

000070b8 <SERCOM4_Handler>:
    70b8:	b580      	push	{r7, lr}
    70ba:	af00      	add	r7, sp, #0
    70bc:	4b03      	ldr	r3, [pc, #12]	; (70cc <SERCOM4_Handler+0x14>)
    70be:	691b      	ldr	r3, [r3, #16]
    70c0:	2004      	movs	r0, #4
    70c2:	4798      	blx	r3
    70c4:	46c0      	nop			; (mov r8, r8)
    70c6:	46bd      	mov	sp, r7
    70c8:	bd80      	pop	{r7, pc}
    70ca:	46c0      	nop			; (mov r8, r8)
    70cc:	200001e0 	.word	0x200001e0

000070d0 <SERCOM5_Handler>:
    70d0:	b580      	push	{r7, lr}
    70d2:	af00      	add	r7, sp, #0
    70d4:	4b03      	ldr	r3, [pc, #12]	; (70e4 <SERCOM5_Handler+0x14>)
    70d6:	695b      	ldr	r3, [r3, #20]
    70d8:	2005      	movs	r0, #5
    70da:	4798      	blx	r3
    70dc:	46c0      	nop			; (mov r8, r8)
    70de:	46bd      	mov	sp, r7
    70e0:	bd80      	pop	{r7, pc}
    70e2:	46c0      	nop			; (mov r8, r8)
    70e4:	200001e0 	.word	0x200001e0

000070e8 <system_pinmux_get_config_defaults>:
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b082      	sub	sp, #8
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	2280      	movs	r2, #128	; 0x80
    70f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	2200      	movs	r2, #0
    70fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	2201      	movs	r2, #1
    7100:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	2200      	movs	r2, #0
    7106:	70da      	strb	r2, [r3, #3]
}
    7108:	46c0      	nop			; (mov r8, r8)
    710a:	46bd      	mov	sp, r7
    710c:	b002      	add	sp, #8
    710e:	bd80      	pop	{r7, pc}

00007110 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7110:	b580      	push	{r7, lr}
    7112:	b084      	sub	sp, #16
    7114:	af00      	add	r7, sp, #0
    7116:	0002      	movs	r2, r0
    7118:	6039      	str	r1, [r7, #0]
    711a:	1dfb      	adds	r3, r7, #7
    711c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    711e:	230c      	movs	r3, #12
    7120:	18fb      	adds	r3, r7, r3
    7122:	0018      	movs	r0, r3
    7124:	4b10      	ldr	r3, [pc, #64]	; (7168 <port_pin_set_config+0x58>)
    7126:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7128:	230c      	movs	r3, #12
    712a:	18fb      	adds	r3, r7, r3
    712c:	2280      	movs	r2, #128	; 0x80
    712e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7130:	683b      	ldr	r3, [r7, #0]
    7132:	781a      	ldrb	r2, [r3, #0]
    7134:	230c      	movs	r3, #12
    7136:	18fb      	adds	r3, r7, r3
    7138:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    713a:	683b      	ldr	r3, [r7, #0]
    713c:	785a      	ldrb	r2, [r3, #1]
    713e:	230c      	movs	r3, #12
    7140:	18fb      	adds	r3, r7, r3
    7142:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7144:	683b      	ldr	r3, [r7, #0]
    7146:	789a      	ldrb	r2, [r3, #2]
    7148:	230c      	movs	r3, #12
    714a:	18fb      	adds	r3, r7, r3
    714c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    714e:	230c      	movs	r3, #12
    7150:	18fa      	adds	r2, r7, r3
    7152:	1dfb      	adds	r3, r7, #7
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	0011      	movs	r1, r2
    7158:	0018      	movs	r0, r3
    715a:	4b04      	ldr	r3, [pc, #16]	; (716c <port_pin_set_config+0x5c>)
    715c:	4798      	blx	r3
}
    715e:	46c0      	nop			; (mov r8, r8)
    7160:	46bd      	mov	sp, r7
    7162:	b004      	add	sp, #16
    7164:	bd80      	pop	{r7, pc}
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	000070e9 	.word	0x000070e9
    716c:	00007e1d 	.word	0x00007e1d

00007170 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7170:	b580      	push	{r7, lr}
    7172:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7174:	46c0      	nop			; (mov r8, r8)
    7176:	46bd      	mov	sp, r7
    7178:	bd80      	pop	{r7, pc}
	...

0000717c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    717c:	b580      	push	{r7, lr}
    717e:	b082      	sub	sp, #8
    7180:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7182:	4b10      	ldr	r3, [pc, #64]	; (71c4 <cpu_irq_enter_critical+0x48>)
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	2b00      	cmp	r3, #0
    7188:	d112      	bne.n	71b0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    718a:	f3ef 8310 	mrs	r3, PRIMASK
    718e:	607b      	str	r3, [r7, #4]
  return(result);
    7190:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7192:	2b00      	cmp	r3, #0
    7194:	d109      	bne.n	71aa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    7196:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    7198:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    719c:	4b0a      	ldr	r3, [pc, #40]	; (71c8 <cpu_irq_enter_critical+0x4c>)
    719e:	2200      	movs	r2, #0
    71a0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    71a2:	4b0a      	ldr	r3, [pc, #40]	; (71cc <cpu_irq_enter_critical+0x50>)
    71a4:	2201      	movs	r2, #1
    71a6:	701a      	strb	r2, [r3, #0]
    71a8:	e002      	b.n	71b0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    71aa:	4b08      	ldr	r3, [pc, #32]	; (71cc <cpu_irq_enter_critical+0x50>)
    71ac:	2200      	movs	r2, #0
    71ae:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    71b0:	4b04      	ldr	r3, [pc, #16]	; (71c4 <cpu_irq_enter_critical+0x48>)
    71b2:	681b      	ldr	r3, [r3, #0]
    71b4:	1c5a      	adds	r2, r3, #1
    71b6:	4b03      	ldr	r3, [pc, #12]	; (71c4 <cpu_irq_enter_critical+0x48>)
    71b8:	601a      	str	r2, [r3, #0]
}
    71ba:	46c0      	nop			; (mov r8, r8)
    71bc:	46bd      	mov	sp, r7
    71be:	b002      	add	sp, #8
    71c0:	bd80      	pop	{r7, pc}
    71c2:	46c0      	nop			; (mov r8, r8)
    71c4:	200001f8 	.word	0x200001f8
    71c8:	20000000 	.word	0x20000000
    71cc:	200001fc 	.word	0x200001fc

000071d0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    71d0:	b580      	push	{r7, lr}
    71d2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    71d4:	4b0b      	ldr	r3, [pc, #44]	; (7204 <cpu_irq_leave_critical+0x34>)
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	1e5a      	subs	r2, r3, #1
    71da:	4b0a      	ldr	r3, [pc, #40]	; (7204 <cpu_irq_leave_critical+0x34>)
    71dc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    71de:	4b09      	ldr	r3, [pc, #36]	; (7204 <cpu_irq_leave_critical+0x34>)
    71e0:	681b      	ldr	r3, [r3, #0]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d10a      	bne.n	71fc <cpu_irq_leave_critical+0x2c>
    71e6:	4b08      	ldr	r3, [pc, #32]	; (7208 <cpu_irq_leave_critical+0x38>)
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	b2db      	uxtb	r3, r3
    71ec:	2b00      	cmp	r3, #0
    71ee:	d005      	beq.n	71fc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    71f0:	4b06      	ldr	r3, [pc, #24]	; (720c <cpu_irq_leave_critical+0x3c>)
    71f2:	2201      	movs	r2, #1
    71f4:	701a      	strb	r2, [r3, #0]
    71f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    71fa:	b662      	cpsie	i
	}
}
    71fc:	46c0      	nop			; (mov r8, r8)
    71fe:	46bd      	mov	sp, r7
    7200:	bd80      	pop	{r7, pc}
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	200001f8 	.word	0x200001f8
    7208:	200001fc 	.word	0x200001fc
    720c:	20000000 	.word	0x20000000

00007210 <system_gclk_gen_get_config_defaults>:
{
    7210:	b580      	push	{r7, lr}
    7212:	b082      	sub	sp, #8
    7214:	af00      	add	r7, sp, #0
    7216:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	2201      	movs	r2, #1
    721c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	2200      	movs	r2, #0
    7222:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	2206      	movs	r2, #6
    7228:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	2200      	movs	r2, #0
    722e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	2200      	movs	r2, #0
    7234:	725a      	strb	r2, [r3, #9]
}
    7236:	46c0      	nop			; (mov r8, r8)
    7238:	46bd      	mov	sp, r7
    723a:	b002      	add	sp, #8
    723c:	bd80      	pop	{r7, pc}

0000723e <system_clock_source_osc32k_get_config_defaults>:
{
    723e:	b580      	push	{r7, lr}
    7240:	b082      	sub	sp, #8
    7242:	af00      	add	r7, sp, #0
    7244:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	2201      	movs	r2, #1
    724a:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	2201      	movs	r2, #1
    7250:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	2200      	movs	r2, #0
    7256:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	2201      	movs	r2, #1
    725c:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	2207      	movs	r2, #7
    7262:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	2200      	movs	r2, #0
    7268:	715a      	strb	r2, [r3, #5]
}
    726a:	46c0      	nop			; (mov r8, r8)
    726c:	46bd      	mov	sp, r7
    726e:	b002      	add	sp, #8
    7270:	bd80      	pop	{r7, pc}

00007272 <system_clock_source_osc8m_get_config_defaults>:
{
    7272:	b580      	push	{r7, lr}
    7274:	b082      	sub	sp, #8
    7276:	af00      	add	r7, sp, #0
    7278:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	2203      	movs	r2, #3
    727e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	2200      	movs	r2, #0
    7284:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	2201      	movs	r2, #1
    728a:	709a      	strb	r2, [r3, #2]
}
    728c:	46c0      	nop			; (mov r8, r8)
    728e:	46bd      	mov	sp, r7
    7290:	b002      	add	sp, #8
    7292:	bd80      	pop	{r7, pc}

00007294 <system_cpu_clock_set_divider>:
{
    7294:	b580      	push	{r7, lr}
    7296:	b082      	sub	sp, #8
    7298:	af00      	add	r7, sp, #0
    729a:	0002      	movs	r2, r0
    729c:	1dfb      	adds	r3, r7, #7
    729e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    72a0:	4a03      	ldr	r2, [pc, #12]	; (72b0 <system_cpu_clock_set_divider+0x1c>)
    72a2:	1dfb      	adds	r3, r7, #7
    72a4:	781b      	ldrb	r3, [r3, #0]
    72a6:	7213      	strb	r3, [r2, #8]
}
    72a8:	46c0      	nop			; (mov r8, r8)
    72aa:	46bd      	mov	sp, r7
    72ac:	b002      	add	sp, #8
    72ae:	bd80      	pop	{r7, pc}
    72b0:	40000400 	.word	0x40000400

000072b4 <system_apb_clock_set_divider>:
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b082      	sub	sp, #8
    72b8:	af00      	add	r7, sp, #0
    72ba:	0002      	movs	r2, r0
    72bc:	1dfb      	adds	r3, r7, #7
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	1dbb      	adds	r3, r7, #6
    72c2:	1c0a      	adds	r2, r1, #0
    72c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    72c6:	1dfb      	adds	r3, r7, #7
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2b01      	cmp	r3, #1
    72cc:	d008      	beq.n	72e0 <system_apb_clock_set_divider+0x2c>
    72ce:	2b02      	cmp	r3, #2
    72d0:	d00b      	beq.n	72ea <system_apb_clock_set_divider+0x36>
    72d2:	2b00      	cmp	r3, #0
    72d4:	d10e      	bne.n	72f4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    72d6:	4a0b      	ldr	r2, [pc, #44]	; (7304 <system_apb_clock_set_divider+0x50>)
    72d8:	1dbb      	adds	r3, r7, #6
    72da:	781b      	ldrb	r3, [r3, #0]
    72dc:	7253      	strb	r3, [r2, #9]
			break;
    72de:	e00b      	b.n	72f8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    72e0:	4a08      	ldr	r2, [pc, #32]	; (7304 <system_apb_clock_set_divider+0x50>)
    72e2:	1dbb      	adds	r3, r7, #6
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	7293      	strb	r3, [r2, #10]
			break;
    72e8:	e006      	b.n	72f8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    72ea:	4a06      	ldr	r2, [pc, #24]	; (7304 <system_apb_clock_set_divider+0x50>)
    72ec:	1dbb      	adds	r3, r7, #6
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	72d3      	strb	r3, [r2, #11]
			break;
    72f2:	e001      	b.n	72f8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    72f4:	2317      	movs	r3, #23
    72f6:	e000      	b.n	72fa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    72f8:	2300      	movs	r3, #0
}
    72fa:	0018      	movs	r0, r3
    72fc:	46bd      	mov	sp, r7
    72fe:	b002      	add	sp, #8
    7300:	bd80      	pop	{r7, pc}
    7302:	46c0      	nop			; (mov r8, r8)
    7304:	40000400 	.word	0x40000400

00007308 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    7308:	b580      	push	{r7, lr}
    730a:	b082      	sub	sp, #8
    730c:	af00      	add	r7, sp, #0
    730e:	0002      	movs	r2, r0
    7310:	1dfb      	adds	r3, r7, #7
    7312:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7314:	4a08      	ldr	r2, [pc, #32]	; (7338 <system_flash_set_waitstates+0x30>)
    7316:	1dfb      	adds	r3, r7, #7
    7318:	781b      	ldrb	r3, [r3, #0]
    731a:	210f      	movs	r1, #15
    731c:	400b      	ands	r3, r1
    731e:	b2d9      	uxtb	r1, r3
    7320:	6853      	ldr	r3, [r2, #4]
    7322:	200f      	movs	r0, #15
    7324:	4001      	ands	r1, r0
    7326:	0049      	lsls	r1, r1, #1
    7328:	201e      	movs	r0, #30
    732a:	4383      	bics	r3, r0
    732c:	430b      	orrs	r3, r1
    732e:	6053      	str	r3, [r2, #4]
}
    7330:	46c0      	nop			; (mov r8, r8)
    7332:	46bd      	mov	sp, r7
    7334:	b002      	add	sp, #8
    7336:	bd80      	pop	{r7, pc}
    7338:	41004000 	.word	0x41004000

0000733c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    733c:	b580      	push	{r7, lr}
    733e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7340:	46c0      	nop			; (mov r8, r8)
    7342:	4b04      	ldr	r3, [pc, #16]	; (7354 <_system_dfll_wait_for_sync+0x18>)
    7344:	68db      	ldr	r3, [r3, #12]
    7346:	2210      	movs	r2, #16
    7348:	4013      	ands	r3, r2
    734a:	d0fa      	beq.n	7342 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    734c:	46c0      	nop			; (mov r8, r8)
    734e:	46bd      	mov	sp, r7
    7350:	bd80      	pop	{r7, pc}
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	40000800 	.word	0x40000800

00007358 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    7358:	b580      	push	{r7, lr}
    735a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    735c:	4b0c      	ldr	r3, [pc, #48]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    735e:	2202      	movs	r2, #2
    7360:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7362:	4b0c      	ldr	r3, [pc, #48]	; (7394 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7364:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7366:	4a0a      	ldr	r2, [pc, #40]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7368:	4b0b      	ldr	r3, [pc, #44]	; (7398 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    736a:	689b      	ldr	r3, [r3, #8]
    736c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    736e:	4a08      	ldr	r2, [pc, #32]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7370:	4b09      	ldr	r3, [pc, #36]	; (7398 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7372:	685b      	ldr	r3, [r3, #4]
    7374:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    7376:	4b06      	ldr	r3, [pc, #24]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7378:	2200      	movs	r2, #0
    737a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    737c:	4b05      	ldr	r3, [pc, #20]	; (7394 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    737e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7380:	4a03      	ldr	r2, [pc, #12]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7382:	4b05      	ldr	r3, [pc, #20]	; (7398 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7384:	681b      	ldr	r3, [r3, #0]
    7386:	b29b      	uxth	r3, r3
    7388:	8493      	strh	r3, [r2, #36]	; 0x24
}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	46bd      	mov	sp, r7
    738e:	bd80      	pop	{r7, pc}
    7390:	40000800 	.word	0x40000800
    7394:	0000733d 	.word	0x0000733d
    7398:	20000200 	.word	0x20000200

0000739c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	0002      	movs	r2, r0
    73a4:	1dfb      	adds	r3, r7, #7
    73a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    73a8:	1dfb      	adds	r3, r7, #7
    73aa:	781b      	ldrb	r3, [r3, #0]
    73ac:	2b08      	cmp	r3, #8
    73ae:	d840      	bhi.n	7432 <system_clock_source_get_hz+0x96>
    73b0:	009a      	lsls	r2, r3, #2
    73b2:	4b22      	ldr	r3, [pc, #136]	; (743c <system_clock_source_get_hz+0xa0>)
    73b4:	18d3      	adds	r3, r2, r3
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    73ba:	4b21      	ldr	r3, [pc, #132]	; (7440 <system_clock_source_get_hz+0xa4>)
    73bc:	691b      	ldr	r3, [r3, #16]
    73be:	e039      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    73c0:	4b20      	ldr	r3, [pc, #128]	; (7444 <system_clock_source_get_hz+0xa8>)
    73c2:	6a1b      	ldr	r3, [r3, #32]
    73c4:	059b      	lsls	r3, r3, #22
    73c6:	0f9b      	lsrs	r3, r3, #30
    73c8:	b2db      	uxtb	r3, r3
    73ca:	001a      	movs	r2, r3
    73cc:	4b1e      	ldr	r3, [pc, #120]	; (7448 <system_clock_source_get_hz+0xac>)
    73ce:	40d3      	lsrs	r3, r2
    73d0:	e030      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    73d2:	2380      	movs	r3, #128	; 0x80
    73d4:	021b      	lsls	r3, r3, #8
    73d6:	e02d      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    73d8:	2380      	movs	r3, #128	; 0x80
    73da:	021b      	lsls	r3, r3, #8
    73dc:	e02a      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    73de:	4b18      	ldr	r3, [pc, #96]	; (7440 <system_clock_source_get_hz+0xa4>)
    73e0:	695b      	ldr	r3, [r3, #20]
    73e2:	e027      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    73e4:	4b16      	ldr	r3, [pc, #88]	; (7440 <system_clock_source_get_hz+0xa4>)
    73e6:	681b      	ldr	r3, [r3, #0]
    73e8:	2202      	movs	r2, #2
    73ea:	4013      	ands	r3, r2
    73ec:	d101      	bne.n	73f2 <system_clock_source_get_hz+0x56>
			return 0;
    73ee:	2300      	movs	r3, #0
    73f0:	e020      	b.n	7434 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    73f2:	4b16      	ldr	r3, [pc, #88]	; (744c <system_clock_source_get_hz+0xb0>)
    73f4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    73f6:	4b12      	ldr	r3, [pc, #72]	; (7440 <system_clock_source_get_hz+0xa4>)
    73f8:	681b      	ldr	r3, [r3, #0]
    73fa:	2204      	movs	r2, #4
    73fc:	4013      	ands	r3, r2
    73fe:	d009      	beq.n	7414 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7400:	2000      	movs	r0, #0
    7402:	4b13      	ldr	r3, [pc, #76]	; (7450 <system_clock_source_get_hz+0xb4>)
    7404:	4798      	blx	r3
    7406:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    7408:	4b0d      	ldr	r3, [pc, #52]	; (7440 <system_clock_source_get_hz+0xa4>)
    740a:	689b      	ldr	r3, [r3, #8]
    740c:	041b      	lsls	r3, r3, #16
    740e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7410:	4353      	muls	r3, r2
    7412:	e00f      	b.n	7434 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    7414:	4b0f      	ldr	r3, [pc, #60]	; (7454 <system_clock_source_get_hz+0xb8>)
    7416:	e00d      	b.n	7434 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7418:	4a0a      	ldr	r2, [pc, #40]	; (7444 <system_clock_source_get_hz+0xa8>)
    741a:	2350      	movs	r3, #80	; 0x50
    741c:	5cd3      	ldrb	r3, [r2, r3]
    741e:	b2db      	uxtb	r3, r3
    7420:	001a      	movs	r2, r3
    7422:	2304      	movs	r3, #4
    7424:	4013      	ands	r3, r2
    7426:	d101      	bne.n	742c <system_clock_source_get_hz+0x90>
			return 0;
    7428:	2300      	movs	r3, #0
    742a:	e003      	b.n	7434 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    742c:	4b04      	ldr	r3, [pc, #16]	; (7440 <system_clock_source_get_hz+0xa4>)
    742e:	68db      	ldr	r3, [r3, #12]
    7430:	e000      	b.n	7434 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    7432:	2300      	movs	r3, #0
	}
}
    7434:	0018      	movs	r0, r3
    7436:	46bd      	mov	sp, r7
    7438:	b002      	add	sp, #8
    743a:	bd80      	pop	{r7, pc}
    743c:	000172dc 	.word	0x000172dc
    7440:	20000200 	.word	0x20000200
    7444:	40000800 	.word	0x40000800
    7448:	007a1200 	.word	0x007a1200
    744c:	0000733d 	.word	0x0000733d
    7450:	00007c55 	.word	0x00007c55
    7454:	02dc6c00 	.word	0x02dc6c00

00007458 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7458:	b580      	push	{r7, lr}
    745a:	b084      	sub	sp, #16
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7460:	4b1a      	ldr	r3, [pc, #104]	; (74cc <system_clock_source_osc8m_set_config+0x74>)
    7462:	6a1b      	ldr	r3, [r3, #32]
    7464:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	781b      	ldrb	r3, [r3, #0]
    746a:	1c1a      	adds	r2, r3, #0
    746c:	2303      	movs	r3, #3
    746e:	4013      	ands	r3, r2
    7470:	b2da      	uxtb	r2, r3
    7472:	230d      	movs	r3, #13
    7474:	18fb      	adds	r3, r7, r3
    7476:	2103      	movs	r1, #3
    7478:	400a      	ands	r2, r1
    747a:	0010      	movs	r0, r2
    747c:	781a      	ldrb	r2, [r3, #0]
    747e:	2103      	movs	r1, #3
    7480:	438a      	bics	r2, r1
    7482:	1c11      	adds	r1, r2, #0
    7484:	1c02      	adds	r2, r0, #0
    7486:	430a      	orrs	r2, r1
    7488:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	789a      	ldrb	r2, [r3, #2]
    748e:	230c      	movs	r3, #12
    7490:	18fb      	adds	r3, r7, r3
    7492:	01d0      	lsls	r0, r2, #7
    7494:	781a      	ldrb	r2, [r3, #0]
    7496:	217f      	movs	r1, #127	; 0x7f
    7498:	400a      	ands	r2, r1
    749a:	1c11      	adds	r1, r2, #0
    749c:	1c02      	adds	r2, r0, #0
    749e:	430a      	orrs	r2, r1
    74a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	785a      	ldrb	r2, [r3, #1]
    74a6:	230c      	movs	r3, #12
    74a8:	18fb      	adds	r3, r7, r3
    74aa:	2101      	movs	r1, #1
    74ac:	400a      	ands	r2, r1
    74ae:	0190      	lsls	r0, r2, #6
    74b0:	781a      	ldrb	r2, [r3, #0]
    74b2:	2140      	movs	r1, #64	; 0x40
    74b4:	438a      	bics	r2, r1
    74b6:	1c11      	adds	r1, r2, #0
    74b8:	1c02      	adds	r2, r0, #0
    74ba:	430a      	orrs	r2, r1
    74bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    74be:	4b03      	ldr	r3, [pc, #12]	; (74cc <system_clock_source_osc8m_set_config+0x74>)
    74c0:	68fa      	ldr	r2, [r7, #12]
    74c2:	621a      	str	r2, [r3, #32]
}
    74c4:	46c0      	nop			; (mov r8, r8)
    74c6:	46bd      	mov	sp, r7
    74c8:	b004      	add	sp, #16
    74ca:	bd80      	pop	{r7, pc}
    74cc:	40000800 	.word	0x40000800

000074d0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    74d0:	b580      	push	{r7, lr}
    74d2:	b084      	sub	sp, #16
    74d4:	af00      	add	r7, sp, #0
    74d6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    74d8:	4b2f      	ldr	r3, [pc, #188]	; (7598 <system_clock_source_osc32k_set_config+0xc8>)
    74da:	699b      	ldr	r3, [r3, #24]
    74dc:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	785a      	ldrb	r2, [r3, #1]
    74e2:	230c      	movs	r3, #12
    74e4:	18fb      	adds	r3, r7, r3
    74e6:	2101      	movs	r1, #1
    74e8:	400a      	ands	r2, r1
    74ea:	00d0      	lsls	r0, r2, #3
    74ec:	781a      	ldrb	r2, [r3, #0]
    74ee:	2108      	movs	r1, #8
    74f0:	438a      	bics	r2, r1
    74f2:	1c11      	adds	r1, r2, #0
    74f4:	1c02      	adds	r2, r0, #0
    74f6:	430a      	orrs	r2, r1
    74f8:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    74fa:	687b      	ldr	r3, [r7, #4]
    74fc:	789a      	ldrb	r2, [r3, #2]
    74fe:	230c      	movs	r3, #12
    7500:	18fb      	adds	r3, r7, r3
    7502:	2101      	movs	r1, #1
    7504:	400a      	ands	r2, r1
    7506:	0090      	lsls	r0, r2, #2
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	2104      	movs	r1, #4
    750c:	438a      	bics	r2, r1
    750e:	1c11      	adds	r1, r2, #0
    7510:	1c02      	adds	r2, r0, #0
    7512:	430a      	orrs	r2, r1
    7514:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    7516:	687b      	ldr	r3, [r7, #4]
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	1c1a      	adds	r2, r3, #0
    751c:	2307      	movs	r3, #7
    751e:	4013      	ands	r3, r2
    7520:	b2da      	uxtb	r2, r3
    7522:	230d      	movs	r3, #13
    7524:	18fb      	adds	r3, r7, r3
    7526:	2107      	movs	r1, #7
    7528:	400a      	ands	r2, r1
    752a:	0010      	movs	r0, r2
    752c:	781a      	ldrb	r2, [r3, #0]
    752e:	2107      	movs	r1, #7
    7530:	438a      	bics	r2, r1
    7532:	1c11      	adds	r1, r2, #0
    7534:	1c02      	adds	r2, r0, #0
    7536:	430a      	orrs	r2, r1
    7538:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	791a      	ldrb	r2, [r3, #4]
    753e:	230c      	movs	r3, #12
    7540:	18fb      	adds	r3, r7, r3
    7542:	01d0      	lsls	r0, r2, #7
    7544:	781a      	ldrb	r2, [r3, #0]
    7546:	217f      	movs	r1, #127	; 0x7f
    7548:	400a      	ands	r2, r1
    754a:	1c11      	adds	r1, r2, #0
    754c:	1c02      	adds	r2, r0, #0
    754e:	430a      	orrs	r2, r1
    7550:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	78da      	ldrb	r2, [r3, #3]
    7556:	230c      	movs	r3, #12
    7558:	18fb      	adds	r3, r7, r3
    755a:	2101      	movs	r1, #1
    755c:	400a      	ands	r2, r1
    755e:	0190      	lsls	r0, r2, #6
    7560:	781a      	ldrb	r2, [r3, #0]
    7562:	2140      	movs	r1, #64	; 0x40
    7564:	438a      	bics	r2, r1
    7566:	1c11      	adds	r1, r2, #0
    7568:	1c02      	adds	r2, r0, #0
    756a:	430a      	orrs	r2, r1
    756c:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	795a      	ldrb	r2, [r3, #5]
    7572:	230d      	movs	r3, #13
    7574:	18fb      	adds	r3, r7, r3
    7576:	2101      	movs	r1, #1
    7578:	400a      	ands	r2, r1
    757a:	0110      	lsls	r0, r2, #4
    757c:	781a      	ldrb	r2, [r3, #0]
    757e:	2110      	movs	r1, #16
    7580:	438a      	bics	r2, r1
    7582:	1c11      	adds	r1, r2, #0
    7584:	1c02      	adds	r2, r0, #0
    7586:	430a      	orrs	r2, r1
    7588:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    758a:	4b03      	ldr	r3, [pc, #12]	; (7598 <system_clock_source_osc32k_set_config+0xc8>)
    758c:	68fa      	ldr	r2, [r7, #12]
    758e:	619a      	str	r2, [r3, #24]
}
    7590:	46c0      	nop			; (mov r8, r8)
    7592:	46bd      	mov	sp, r7
    7594:	b004      	add	sp, #16
    7596:	bd80      	pop	{r7, pc}
    7598:	40000800 	.word	0x40000800

0000759c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    759c:	b580      	push	{r7, lr}
    759e:	b082      	sub	sp, #8
    75a0:	af00      	add	r7, sp, #0
    75a2:	0002      	movs	r2, r0
    75a4:	1dfb      	adds	r3, r7, #7
    75a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    75a8:	1dfb      	adds	r3, r7, #7
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	2b08      	cmp	r3, #8
    75ae:	d83b      	bhi.n	7628 <system_clock_source_enable+0x8c>
    75b0:	009a      	lsls	r2, r3, #2
    75b2:	4b21      	ldr	r3, [pc, #132]	; (7638 <system_clock_source_enable+0x9c>)
    75b4:	18d3      	adds	r3, r2, r3
    75b6:	681b      	ldr	r3, [r3, #0]
    75b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    75ba:	4b20      	ldr	r3, [pc, #128]	; (763c <system_clock_source_enable+0xa0>)
    75bc:	4a1f      	ldr	r2, [pc, #124]	; (763c <system_clock_source_enable+0xa0>)
    75be:	6a12      	ldr	r2, [r2, #32]
    75c0:	2102      	movs	r1, #2
    75c2:	430a      	orrs	r2, r1
    75c4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    75c6:	2300      	movs	r3, #0
    75c8:	e031      	b.n	762e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    75ca:	4b1c      	ldr	r3, [pc, #112]	; (763c <system_clock_source_enable+0xa0>)
    75cc:	4a1b      	ldr	r2, [pc, #108]	; (763c <system_clock_source_enable+0xa0>)
    75ce:	6992      	ldr	r2, [r2, #24]
    75d0:	2102      	movs	r1, #2
    75d2:	430a      	orrs	r2, r1
    75d4:	619a      	str	r2, [r3, #24]
		break;
    75d6:	e029      	b.n	762c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    75d8:	4a18      	ldr	r2, [pc, #96]	; (763c <system_clock_source_enable+0xa0>)
    75da:	4b18      	ldr	r3, [pc, #96]	; (763c <system_clock_source_enable+0xa0>)
    75dc:	8a1b      	ldrh	r3, [r3, #16]
    75de:	b29b      	uxth	r3, r3
    75e0:	2102      	movs	r1, #2
    75e2:	430b      	orrs	r3, r1
    75e4:	b29b      	uxth	r3, r3
    75e6:	8213      	strh	r3, [r2, #16]
		break;
    75e8:	e020      	b.n	762c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    75ea:	4a14      	ldr	r2, [pc, #80]	; (763c <system_clock_source_enable+0xa0>)
    75ec:	4b13      	ldr	r3, [pc, #76]	; (763c <system_clock_source_enable+0xa0>)
    75ee:	8a9b      	ldrh	r3, [r3, #20]
    75f0:	b29b      	uxth	r3, r3
    75f2:	2102      	movs	r1, #2
    75f4:	430b      	orrs	r3, r1
    75f6:	b29b      	uxth	r3, r3
    75f8:	8293      	strh	r3, [r2, #20]
		break;
    75fa:	e017      	b.n	762c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    75fc:	4b10      	ldr	r3, [pc, #64]	; (7640 <system_clock_source_enable+0xa4>)
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	2202      	movs	r2, #2
    7602:	431a      	orrs	r2, r3
    7604:	4b0e      	ldr	r3, [pc, #56]	; (7640 <system_clock_source_enable+0xa4>)
    7606:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    7608:	4b0e      	ldr	r3, [pc, #56]	; (7644 <system_clock_source_enable+0xa8>)
    760a:	4798      	blx	r3
		break;
    760c:	e00e      	b.n	762c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    760e:	4a0b      	ldr	r2, [pc, #44]	; (763c <system_clock_source_enable+0xa0>)
    7610:	490a      	ldr	r1, [pc, #40]	; (763c <system_clock_source_enable+0xa0>)
    7612:	2344      	movs	r3, #68	; 0x44
    7614:	5ccb      	ldrb	r3, [r1, r3]
    7616:	b2db      	uxtb	r3, r3
    7618:	2102      	movs	r1, #2
    761a:	430b      	orrs	r3, r1
    761c:	b2d9      	uxtb	r1, r3
    761e:	2344      	movs	r3, #68	; 0x44
    7620:	54d1      	strb	r1, [r2, r3]
		break;
    7622:	e003      	b.n	762c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    7624:	2300      	movs	r3, #0
    7626:	e002      	b.n	762e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7628:	2317      	movs	r3, #23
    762a:	e000      	b.n	762e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    762c:	2300      	movs	r3, #0
}
    762e:	0018      	movs	r0, r3
    7630:	46bd      	mov	sp, r7
    7632:	b002      	add	sp, #8
    7634:	bd80      	pop	{r7, pc}
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	00017300 	.word	0x00017300
    763c:	40000800 	.word	0x40000800
    7640:	20000200 	.word	0x20000200
    7644:	00007359 	.word	0x00007359

00007648 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    7648:	b580      	push	{r7, lr}
    764a:	b082      	sub	sp, #8
    764c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    764e:	003b      	movs	r3, r7
    7650:	2201      	movs	r2, #1
    7652:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7654:	2300      	movs	r3, #0
    7656:	607b      	str	r3, [r7, #4]
    7658:	e009      	b.n	766e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    765a:	687b      	ldr	r3, [r7, #4]
    765c:	b2db      	uxtb	r3, r3
    765e:	003a      	movs	r2, r7
    7660:	0011      	movs	r1, r2
    7662:	0018      	movs	r0, r3
    7664:	4b05      	ldr	r3, [pc, #20]	; (767c <_switch_peripheral_gclk+0x34>)
    7666:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	3301      	adds	r3, #1
    766c:	607b      	str	r3, [r7, #4]
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	2b24      	cmp	r3, #36	; 0x24
    7672:	d9f2      	bls.n	765a <_switch_peripheral_gclk+0x12>
	}
}
    7674:	46c0      	nop			; (mov r8, r8)
    7676:	46bd      	mov	sp, r7
    7678:	b002      	add	sp, #8
    767a:	bd80      	pop	{r7, pc}
    767c:	00007b31 	.word	0x00007b31

00007680 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7680:	b580      	push	{r7, lr}
    7682:	b0a2      	sub	sp, #136	; 0x88
    7684:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7686:	4b4f      	ldr	r3, [pc, #316]	; (77c4 <system_clock_init+0x144>)
    7688:	22c2      	movs	r2, #194	; 0xc2
    768a:	00d2      	lsls	r2, r2, #3
    768c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    768e:	2000      	movs	r0, #0
    7690:	4b4d      	ldr	r3, [pc, #308]	; (77c8 <system_clock_init+0x148>)
    7692:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    7694:	4b4d      	ldr	r3, [pc, #308]	; (77cc <system_clock_init+0x14c>)
    7696:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    7698:	4a4a      	ldr	r2, [pc, #296]	; (77c4 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    769a:	4b4d      	ldr	r3, [pc, #308]	; (77d0 <system_clock_init+0x150>)
    769c:	681b      	ldr	r3, [r3, #0]
    769e:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    76a0:	b2db      	uxtb	r3, r3
    76a2:	1c19      	adds	r1, r3, #0
    76a4:	237f      	movs	r3, #127	; 0x7f
    76a6:	400b      	ands	r3, r1
    76a8:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    76aa:	6993      	ldr	r3, [r2, #24]
    76ac:	207f      	movs	r0, #127	; 0x7f
    76ae:	4001      	ands	r1, r0
    76b0:	0409      	lsls	r1, r1, #16
    76b2:	4848      	ldr	r0, [pc, #288]	; (77d4 <system_clock_init+0x154>)
    76b4:	4003      	ands	r3, r0
    76b6:	430b      	orrs	r3, r1
    76b8:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    76ba:	2380      	movs	r3, #128	; 0x80
    76bc:	18fb      	adds	r3, r7, r3
    76be:	0018      	movs	r0, r3
    76c0:	4b45      	ldr	r3, [pc, #276]	; (77d8 <system_clock_init+0x158>)
    76c2:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    76c4:	2380      	movs	r3, #128	; 0x80
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	2207      	movs	r2, #7
    76ca:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    76cc:	2380      	movs	r3, #128	; 0x80
    76ce:	18fb      	adds	r3, r7, r3
    76d0:	2201      	movs	r2, #1
    76d2:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    76d4:	2380      	movs	r3, #128	; 0x80
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	2201      	movs	r2, #1
    76da:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    76dc:	2380      	movs	r3, #128	; 0x80
    76de:	18fb      	adds	r3, r7, r3
    76e0:	2201      	movs	r2, #1
    76e2:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    76e4:	2380      	movs	r3, #128	; 0x80
    76e6:	18fb      	adds	r3, r7, r3
    76e8:	2200      	movs	r2, #0
    76ea:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    76ec:	2380      	movs	r3, #128	; 0x80
    76ee:	18fb      	adds	r3, r7, r3
    76f0:	0018      	movs	r0, r3
    76f2:	4b3a      	ldr	r3, [pc, #232]	; (77dc <system_clock_init+0x15c>)
    76f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    76f6:	2004      	movs	r0, #4
    76f8:	4b39      	ldr	r3, [pc, #228]	; (77e0 <system_clock_init+0x160>)
    76fa:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    76fc:	237c      	movs	r3, #124	; 0x7c
    76fe:	18fb      	adds	r3, r7, r3
    7700:	0018      	movs	r0, r3
    7702:	4b38      	ldr	r3, [pc, #224]	; (77e4 <system_clock_init+0x164>)
    7704:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7706:	237c      	movs	r3, #124	; 0x7c
    7708:	18fb      	adds	r3, r7, r3
    770a:	2200      	movs	r2, #0
    770c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    770e:	237c      	movs	r3, #124	; 0x7c
    7710:	18fb      	adds	r3, r7, r3
    7712:	2201      	movs	r2, #1
    7714:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    7716:	237c      	movs	r3, #124	; 0x7c
    7718:	18fb      	adds	r3, r7, r3
    771a:	2200      	movs	r2, #0
    771c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    771e:	237c      	movs	r3, #124	; 0x7c
    7720:	18fb      	adds	r3, r7, r3
    7722:	0018      	movs	r0, r3
    7724:	4b30      	ldr	r3, [pc, #192]	; (77e8 <system_clock_init+0x168>)
    7726:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7728:	2006      	movs	r0, #6
    772a:	4b2d      	ldr	r3, [pc, #180]	; (77e0 <system_clock_init+0x160>)
    772c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    772e:	4b2f      	ldr	r3, [pc, #188]	; (77ec <system_clock_init+0x16c>)
    7730:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7732:	2358      	movs	r3, #88	; 0x58
    7734:	18fb      	adds	r3, r7, r3
    7736:	0018      	movs	r0, r3
    7738:	4b2d      	ldr	r3, [pc, #180]	; (77f0 <system_clock_init+0x170>)
    773a:	4798      	blx	r3
    773c:	2358      	movs	r3, #88	; 0x58
    773e:	18fb      	adds	r3, r7, r3
    7740:	2204      	movs	r2, #4
    7742:	701a      	strb	r2, [r3, #0]
    7744:	2358      	movs	r3, #88	; 0x58
    7746:	18fb      	adds	r3, r7, r3
    7748:	2220      	movs	r2, #32
    774a:	605a      	str	r2, [r3, #4]
    774c:	2358      	movs	r3, #88	; 0x58
    774e:	18fb      	adds	r3, r7, r3
    7750:	2200      	movs	r2, #0
    7752:	721a      	strb	r2, [r3, #8]
    7754:	2358      	movs	r3, #88	; 0x58
    7756:	18fb      	adds	r3, r7, r3
    7758:	2200      	movs	r2, #0
    775a:	725a      	strb	r2, [r3, #9]
    775c:	2358      	movs	r3, #88	; 0x58
    775e:	18fb      	adds	r3, r7, r3
    7760:	0019      	movs	r1, r3
    7762:	2002      	movs	r0, #2
    7764:	4b23      	ldr	r3, [pc, #140]	; (77f4 <system_clock_init+0x174>)
    7766:	4798      	blx	r3
    7768:	2002      	movs	r0, #2
    776a:	4b23      	ldr	r3, [pc, #140]	; (77f8 <system_clock_init+0x178>)
    776c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    776e:	2000      	movs	r0, #0
    7770:	4b22      	ldr	r3, [pc, #136]	; (77fc <system_clock_init+0x17c>)
    7772:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    7774:	2100      	movs	r1, #0
    7776:	2000      	movs	r0, #0
    7778:	4b21      	ldr	r3, [pc, #132]	; (7800 <system_clock_init+0x180>)
    777a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    777c:	2100      	movs	r1, #0
    777e:	2001      	movs	r0, #1
    7780:	4b1f      	ldr	r3, [pc, #124]	; (7800 <system_clock_init+0x180>)
    7782:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    7784:	2100      	movs	r1, #0
    7786:	2002      	movs	r0, #2
    7788:	4b1d      	ldr	r3, [pc, #116]	; (7800 <system_clock_init+0x180>)
    778a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    778c:	1d3b      	adds	r3, r7, #4
    778e:	0018      	movs	r0, r3
    7790:	4b17      	ldr	r3, [pc, #92]	; (77f0 <system_clock_init+0x170>)
    7792:	4798      	blx	r3
    7794:	1d3b      	adds	r3, r7, #4
    7796:	2206      	movs	r2, #6
    7798:	701a      	strb	r2, [r3, #0]
    779a:	1d3b      	adds	r3, r7, #4
    779c:	2201      	movs	r2, #1
    779e:	605a      	str	r2, [r3, #4]
    77a0:	1d3b      	adds	r3, r7, #4
    77a2:	2200      	movs	r2, #0
    77a4:	721a      	strb	r2, [r3, #8]
    77a6:	1d3b      	adds	r3, r7, #4
    77a8:	2200      	movs	r2, #0
    77aa:	725a      	strb	r2, [r3, #9]
    77ac:	1d3b      	adds	r3, r7, #4
    77ae:	0019      	movs	r1, r3
    77b0:	2000      	movs	r0, #0
    77b2:	4b10      	ldr	r3, [pc, #64]	; (77f4 <system_clock_init+0x174>)
    77b4:	4798      	blx	r3
    77b6:	2000      	movs	r0, #0
    77b8:	4b0f      	ldr	r3, [pc, #60]	; (77f8 <system_clock_init+0x178>)
    77ba:	4798      	blx	r3
#endif
}
    77bc:	46c0      	nop			; (mov r8, r8)
    77be:	46bd      	mov	sp, r7
    77c0:	b022      	add	sp, #136	; 0x88
    77c2:	bd80      	pop	{r7, pc}
    77c4:	40000800 	.word	0x40000800
    77c8:	00007309 	.word	0x00007309
    77cc:	00007649 	.word	0x00007649
    77d0:	00806024 	.word	0x00806024
    77d4:	ff80ffff 	.word	0xff80ffff
    77d8:	0000723f 	.word	0x0000723f
    77dc:	000074d1 	.word	0x000074d1
    77e0:	0000759d 	.word	0x0000759d
    77e4:	00007273 	.word	0x00007273
    77e8:	00007459 	.word	0x00007459
    77ec:	000078a9 	.word	0x000078a9
    77f0:	00007211 	.word	0x00007211
    77f4:	000078d9 	.word	0x000078d9
    77f8:	000079fd 	.word	0x000079fd
    77fc:	00007295 	.word	0x00007295
    7800:	000072b5 	.word	0x000072b5

00007804 <system_apb_clock_set_mask>:
{
    7804:	b580      	push	{r7, lr}
    7806:	b082      	sub	sp, #8
    7808:	af00      	add	r7, sp, #0
    780a:	0002      	movs	r2, r0
    780c:	6039      	str	r1, [r7, #0]
    780e:	1dfb      	adds	r3, r7, #7
    7810:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7812:	1dfb      	adds	r3, r7, #7
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	2b01      	cmp	r3, #1
    7818:	d00a      	beq.n	7830 <system_apb_clock_set_mask+0x2c>
    781a:	2b02      	cmp	r3, #2
    781c:	d00f      	beq.n	783e <system_apb_clock_set_mask+0x3a>
    781e:	2b00      	cmp	r3, #0
    7820:	d114      	bne.n	784c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7822:	4b0e      	ldr	r3, [pc, #56]	; (785c <system_apb_clock_set_mask+0x58>)
    7824:	4a0d      	ldr	r2, [pc, #52]	; (785c <system_apb_clock_set_mask+0x58>)
    7826:	6991      	ldr	r1, [r2, #24]
    7828:	683a      	ldr	r2, [r7, #0]
    782a:	430a      	orrs	r2, r1
    782c:	619a      	str	r2, [r3, #24]
			break;
    782e:	e00f      	b.n	7850 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7830:	4b0a      	ldr	r3, [pc, #40]	; (785c <system_apb_clock_set_mask+0x58>)
    7832:	4a0a      	ldr	r2, [pc, #40]	; (785c <system_apb_clock_set_mask+0x58>)
    7834:	69d1      	ldr	r1, [r2, #28]
    7836:	683a      	ldr	r2, [r7, #0]
    7838:	430a      	orrs	r2, r1
    783a:	61da      	str	r2, [r3, #28]
			break;
    783c:	e008      	b.n	7850 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    783e:	4b07      	ldr	r3, [pc, #28]	; (785c <system_apb_clock_set_mask+0x58>)
    7840:	4a06      	ldr	r2, [pc, #24]	; (785c <system_apb_clock_set_mask+0x58>)
    7842:	6a11      	ldr	r1, [r2, #32]
    7844:	683a      	ldr	r2, [r7, #0]
    7846:	430a      	orrs	r2, r1
    7848:	621a      	str	r2, [r3, #32]
			break;
    784a:	e001      	b.n	7850 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    784c:	2317      	movs	r3, #23
    784e:	e000      	b.n	7852 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7850:	2300      	movs	r3, #0
}
    7852:	0018      	movs	r0, r3
    7854:	46bd      	mov	sp, r7
    7856:	b002      	add	sp, #8
    7858:	bd80      	pop	{r7, pc}
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	40000400 	.word	0x40000400

00007860 <system_interrupt_enter_critical_section>:
{
    7860:	b580      	push	{r7, lr}
    7862:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7864:	4b02      	ldr	r3, [pc, #8]	; (7870 <system_interrupt_enter_critical_section+0x10>)
    7866:	4798      	blx	r3
}
    7868:	46c0      	nop			; (mov r8, r8)
    786a:	46bd      	mov	sp, r7
    786c:	bd80      	pop	{r7, pc}
    786e:	46c0      	nop			; (mov r8, r8)
    7870:	0000717d 	.word	0x0000717d

00007874 <system_interrupt_leave_critical_section>:
{
    7874:	b580      	push	{r7, lr}
    7876:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7878:	4b02      	ldr	r3, [pc, #8]	; (7884 <system_interrupt_leave_critical_section+0x10>)
    787a:	4798      	blx	r3
}
    787c:	46c0      	nop			; (mov r8, r8)
    787e:	46bd      	mov	sp, r7
    7880:	bd80      	pop	{r7, pc}
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	000071d1 	.word	0x000071d1

00007888 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    7888:	b580      	push	{r7, lr}
    788a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    788c:	4b05      	ldr	r3, [pc, #20]	; (78a4 <system_gclk_is_syncing+0x1c>)
    788e:	785b      	ldrb	r3, [r3, #1]
    7890:	b2db      	uxtb	r3, r3
    7892:	b25b      	sxtb	r3, r3
    7894:	2b00      	cmp	r3, #0
    7896:	da01      	bge.n	789c <system_gclk_is_syncing+0x14>
		return true;
    7898:	2301      	movs	r3, #1
    789a:	e000      	b.n	789e <system_gclk_is_syncing+0x16>
	}

	return false;
    789c:	2300      	movs	r3, #0
}
    789e:	0018      	movs	r0, r3
    78a0:	46bd      	mov	sp, r7
    78a2:	bd80      	pop	{r7, pc}
    78a4:	40000c00 	.word	0x40000c00

000078a8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    78a8:	b580      	push	{r7, lr}
    78aa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    78ac:	2108      	movs	r1, #8
    78ae:	2000      	movs	r0, #0
    78b0:	4b07      	ldr	r3, [pc, #28]	; (78d0 <system_gclk_init+0x28>)
    78b2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    78b4:	4b07      	ldr	r3, [pc, #28]	; (78d4 <system_gclk_init+0x2c>)
    78b6:	2201      	movs	r2, #1
    78b8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    78ba:	46c0      	nop			; (mov r8, r8)
    78bc:	4b05      	ldr	r3, [pc, #20]	; (78d4 <system_gclk_init+0x2c>)
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	b2db      	uxtb	r3, r3
    78c2:	001a      	movs	r2, r3
    78c4:	2301      	movs	r3, #1
    78c6:	4013      	ands	r3, r2
    78c8:	d1f8      	bne.n	78bc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    78ca:	46c0      	nop			; (mov r8, r8)
    78cc:	46bd      	mov	sp, r7
    78ce:	bd80      	pop	{r7, pc}
    78d0:	00007805 	.word	0x00007805
    78d4:	40000c00 	.word	0x40000c00

000078d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b086      	sub	sp, #24
    78dc:	af00      	add	r7, sp, #0
    78de:	0002      	movs	r2, r0
    78e0:	6039      	str	r1, [r7, #0]
    78e2:	1dfb      	adds	r3, r7, #7
    78e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    78e6:	1dfb      	adds	r3, r7, #7
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    78ec:	1dfb      	adds	r3, r7, #7
    78ee:	781b      	ldrb	r3, [r3, #0]
    78f0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    78f2:	683b      	ldr	r3, [r7, #0]
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	021b      	lsls	r3, r3, #8
    78f8:	001a      	movs	r2, r3
    78fa:	697b      	ldr	r3, [r7, #20]
    78fc:	4313      	orrs	r3, r2
    78fe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7900:	683b      	ldr	r3, [r7, #0]
    7902:	785b      	ldrb	r3, [r3, #1]
    7904:	2b00      	cmp	r3, #0
    7906:	d004      	beq.n	7912 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7908:	697b      	ldr	r3, [r7, #20]
    790a:	2280      	movs	r2, #128	; 0x80
    790c:	02d2      	lsls	r2, r2, #11
    790e:	4313      	orrs	r3, r2
    7910:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7912:	683b      	ldr	r3, [r7, #0]
    7914:	7a5b      	ldrb	r3, [r3, #9]
    7916:	2b00      	cmp	r3, #0
    7918:	d004      	beq.n	7924 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    791a:	697b      	ldr	r3, [r7, #20]
    791c:	2280      	movs	r2, #128	; 0x80
    791e:	0312      	lsls	r2, r2, #12
    7920:	4313      	orrs	r3, r2
    7922:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7924:	683b      	ldr	r3, [r7, #0]
    7926:	685b      	ldr	r3, [r3, #4]
    7928:	2b01      	cmp	r3, #1
    792a:	d92c      	bls.n	7986 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    792c:	683b      	ldr	r3, [r7, #0]
    792e:	685a      	ldr	r2, [r3, #4]
    7930:	683b      	ldr	r3, [r7, #0]
    7932:	685b      	ldr	r3, [r3, #4]
    7934:	3b01      	subs	r3, #1
    7936:	4013      	ands	r3, r2
    7938:	d11a      	bne.n	7970 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    793a:	2300      	movs	r3, #0
    793c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    793e:	2302      	movs	r3, #2
    7940:	60bb      	str	r3, [r7, #8]
    7942:	e005      	b.n	7950 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    7944:	68fb      	ldr	r3, [r7, #12]
    7946:	3301      	adds	r3, #1
    7948:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    794a:	68bb      	ldr	r3, [r7, #8]
    794c:	005b      	lsls	r3, r3, #1
    794e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    7950:	683b      	ldr	r3, [r7, #0]
    7952:	685a      	ldr	r2, [r3, #4]
    7954:	68bb      	ldr	r3, [r7, #8]
    7956:	429a      	cmp	r2, r3
    7958:	d8f4      	bhi.n	7944 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    795a:	68fb      	ldr	r3, [r7, #12]
    795c:	021b      	lsls	r3, r3, #8
    795e:	693a      	ldr	r2, [r7, #16]
    7960:	4313      	orrs	r3, r2
    7962:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7964:	697b      	ldr	r3, [r7, #20]
    7966:	2280      	movs	r2, #128	; 0x80
    7968:	0352      	lsls	r2, r2, #13
    796a:	4313      	orrs	r3, r2
    796c:	617b      	str	r3, [r7, #20]
    796e:	e00a      	b.n	7986 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    7970:	683b      	ldr	r3, [r7, #0]
    7972:	685b      	ldr	r3, [r3, #4]
    7974:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    7976:	693a      	ldr	r2, [r7, #16]
    7978:	4313      	orrs	r3, r2
    797a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    797c:	697b      	ldr	r3, [r7, #20]
    797e:	2280      	movs	r2, #128	; 0x80
    7980:	0292      	lsls	r2, r2, #10
    7982:	4313      	orrs	r3, r2
    7984:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7986:	683b      	ldr	r3, [r7, #0]
    7988:	7a1b      	ldrb	r3, [r3, #8]
    798a:	2b00      	cmp	r3, #0
    798c:	d004      	beq.n	7998 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    798e:	697b      	ldr	r3, [r7, #20]
    7990:	2280      	movs	r2, #128	; 0x80
    7992:	0392      	lsls	r2, r2, #14
    7994:	4313      	orrs	r3, r2
    7996:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    7998:	46c0      	nop			; (mov r8, r8)
    799a:	4b13      	ldr	r3, [pc, #76]	; (79e8 <system_gclk_gen_set_config+0x110>)
    799c:	4798      	blx	r3
    799e:	1e03      	subs	r3, r0, #0
    79a0:	d1fb      	bne.n	799a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    79a2:	4b12      	ldr	r3, [pc, #72]	; (79ec <system_gclk_gen_set_config+0x114>)
    79a4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    79a6:	4a12      	ldr	r2, [pc, #72]	; (79f0 <system_gclk_gen_set_config+0x118>)
    79a8:	1dfb      	adds	r3, r7, #7
    79aa:	781b      	ldrb	r3, [r3, #0]
    79ac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	4b0d      	ldr	r3, [pc, #52]	; (79e8 <system_gclk_gen_set_config+0x110>)
    79b2:	4798      	blx	r3
    79b4:	1e03      	subs	r3, r0, #0
    79b6:	d1fb      	bne.n	79b0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    79b8:	4b0e      	ldr	r3, [pc, #56]	; (79f4 <system_gclk_gen_set_config+0x11c>)
    79ba:	693a      	ldr	r2, [r7, #16]
    79bc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    79be:	46c0      	nop			; (mov r8, r8)
    79c0:	4b09      	ldr	r3, [pc, #36]	; (79e8 <system_gclk_gen_set_config+0x110>)
    79c2:	4798      	blx	r3
    79c4:	1e03      	subs	r3, r0, #0
    79c6:	d1fb      	bne.n	79c0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    79c8:	4b0a      	ldr	r3, [pc, #40]	; (79f4 <system_gclk_gen_set_config+0x11c>)
    79ca:	4a0a      	ldr	r2, [pc, #40]	; (79f4 <system_gclk_gen_set_config+0x11c>)
    79cc:	6851      	ldr	r1, [r2, #4]
    79ce:	2280      	movs	r2, #128	; 0x80
    79d0:	0252      	lsls	r2, r2, #9
    79d2:	4011      	ands	r1, r2
    79d4:	697a      	ldr	r2, [r7, #20]
    79d6:	430a      	orrs	r2, r1
    79d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    79da:	4b07      	ldr	r3, [pc, #28]	; (79f8 <system_gclk_gen_set_config+0x120>)
    79dc:	4798      	blx	r3
}
    79de:	46c0      	nop			; (mov r8, r8)
    79e0:	46bd      	mov	sp, r7
    79e2:	b006      	add	sp, #24
    79e4:	bd80      	pop	{r7, pc}
    79e6:	46c0      	nop			; (mov r8, r8)
    79e8:	00007889 	.word	0x00007889
    79ec:	00007861 	.word	0x00007861
    79f0:	40000c08 	.word	0x40000c08
    79f4:	40000c00 	.word	0x40000c00
    79f8:	00007875 	.word	0x00007875

000079fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	b082      	sub	sp, #8
    7a00:	af00      	add	r7, sp, #0
    7a02:	0002      	movs	r2, r0
    7a04:	1dfb      	adds	r3, r7, #7
    7a06:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7a08:	46c0      	nop			; (mov r8, r8)
    7a0a:	4b0e      	ldr	r3, [pc, #56]	; (7a44 <system_gclk_gen_enable+0x48>)
    7a0c:	4798      	blx	r3
    7a0e:	1e03      	subs	r3, r0, #0
    7a10:	d1fb      	bne.n	7a0a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7a12:	4b0d      	ldr	r3, [pc, #52]	; (7a48 <system_gclk_gen_enable+0x4c>)
    7a14:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a16:	4a0d      	ldr	r2, [pc, #52]	; (7a4c <system_gclk_gen_enable+0x50>)
    7a18:	1dfb      	adds	r3, r7, #7
    7a1a:	781b      	ldrb	r3, [r3, #0]
    7a1c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7a1e:	46c0      	nop			; (mov r8, r8)
    7a20:	4b08      	ldr	r3, [pc, #32]	; (7a44 <system_gclk_gen_enable+0x48>)
    7a22:	4798      	blx	r3
    7a24:	1e03      	subs	r3, r0, #0
    7a26:	d1fb      	bne.n	7a20 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7a28:	4b09      	ldr	r3, [pc, #36]	; (7a50 <system_gclk_gen_enable+0x54>)
    7a2a:	4a09      	ldr	r2, [pc, #36]	; (7a50 <system_gclk_gen_enable+0x54>)
    7a2c:	6852      	ldr	r2, [r2, #4]
    7a2e:	2180      	movs	r1, #128	; 0x80
    7a30:	0249      	lsls	r1, r1, #9
    7a32:	430a      	orrs	r2, r1
    7a34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7a36:	4b07      	ldr	r3, [pc, #28]	; (7a54 <system_gclk_gen_enable+0x58>)
    7a38:	4798      	blx	r3
}
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	46bd      	mov	sp, r7
    7a3e:	b002      	add	sp, #8
    7a40:	bd80      	pop	{r7, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	00007889 	.word	0x00007889
    7a48:	00007861 	.word	0x00007861
    7a4c:	40000c04 	.word	0x40000c04
    7a50:	40000c00 	.word	0x40000c00
    7a54:	00007875 	.word	0x00007875

00007a58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b086      	sub	sp, #24
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	0002      	movs	r2, r0
    7a60:	1dfb      	adds	r3, r7, #7
    7a62:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7a64:	46c0      	nop			; (mov r8, r8)
    7a66:	4b2a      	ldr	r3, [pc, #168]	; (7b10 <system_gclk_gen_get_hz+0xb8>)
    7a68:	4798      	blx	r3
    7a6a:	1e03      	subs	r3, r0, #0
    7a6c:	d1fb      	bne.n	7a66 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7a6e:	4b29      	ldr	r3, [pc, #164]	; (7b14 <system_gclk_gen_get_hz+0xbc>)
    7a70:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a72:	4a29      	ldr	r2, [pc, #164]	; (7b18 <system_gclk_gen_get_hz+0xc0>)
    7a74:	1dfb      	adds	r3, r7, #7
    7a76:	781b      	ldrb	r3, [r3, #0]
    7a78:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7a7a:	46c0      	nop			; (mov r8, r8)
    7a7c:	4b24      	ldr	r3, [pc, #144]	; (7b10 <system_gclk_gen_get_hz+0xb8>)
    7a7e:	4798      	blx	r3
    7a80:	1e03      	subs	r3, r0, #0
    7a82:	d1fb      	bne.n	7a7c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7a84:	4b25      	ldr	r3, [pc, #148]	; (7b1c <system_gclk_gen_get_hz+0xc4>)
    7a86:	685b      	ldr	r3, [r3, #4]
    7a88:	04db      	lsls	r3, r3, #19
    7a8a:	0edb      	lsrs	r3, r3, #27
    7a8c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7a8e:	0018      	movs	r0, r3
    7a90:	4b23      	ldr	r3, [pc, #140]	; (7b20 <system_gclk_gen_get_hz+0xc8>)
    7a92:	4798      	blx	r3
    7a94:	0003      	movs	r3, r0
    7a96:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a98:	4a1f      	ldr	r2, [pc, #124]	; (7b18 <system_gclk_gen_get_hz+0xc0>)
    7a9a:	1dfb      	adds	r3, r7, #7
    7a9c:	781b      	ldrb	r3, [r3, #0]
    7a9e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7aa0:	4b1e      	ldr	r3, [pc, #120]	; (7b1c <system_gclk_gen_get_hz+0xc4>)
    7aa2:	685b      	ldr	r3, [r3, #4]
    7aa4:	02db      	lsls	r3, r3, #11
    7aa6:	0fdb      	lsrs	r3, r3, #31
    7aa8:	b2da      	uxtb	r2, r3
    7aaa:	2313      	movs	r3, #19
    7aac:	18fb      	adds	r3, r7, r3
    7aae:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7ab0:	4a1c      	ldr	r2, [pc, #112]	; (7b24 <system_gclk_gen_get_hz+0xcc>)
    7ab2:	1dfb      	adds	r3, r7, #7
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7ab8:	46c0      	nop			; (mov r8, r8)
    7aba:	4b15      	ldr	r3, [pc, #84]	; (7b10 <system_gclk_gen_get_hz+0xb8>)
    7abc:	4798      	blx	r3
    7abe:	1e03      	subs	r3, r0, #0
    7ac0:	d1fb      	bne.n	7aba <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7ac2:	4b16      	ldr	r3, [pc, #88]	; (7b1c <system_gclk_gen_get_hz+0xc4>)
    7ac4:	689b      	ldr	r3, [r3, #8]
    7ac6:	021b      	lsls	r3, r3, #8
    7ac8:	0c1b      	lsrs	r3, r3, #16
    7aca:	b29b      	uxth	r3, r3
    7acc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    7ace:	4b16      	ldr	r3, [pc, #88]	; (7b28 <system_gclk_gen_get_hz+0xd0>)
    7ad0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7ad2:	2313      	movs	r3, #19
    7ad4:	18fb      	adds	r3, r7, r3
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d109      	bne.n	7af0 <system_gclk_gen_get_hz+0x98>
    7adc:	68fb      	ldr	r3, [r7, #12]
    7ade:	2b01      	cmp	r3, #1
    7ae0:	d906      	bls.n	7af0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    7ae2:	4b12      	ldr	r3, [pc, #72]	; (7b2c <system_gclk_gen_get_hz+0xd4>)
    7ae4:	68f9      	ldr	r1, [r7, #12]
    7ae6:	6978      	ldr	r0, [r7, #20]
    7ae8:	4798      	blx	r3
    7aea:	0003      	movs	r3, r0
    7aec:	617b      	str	r3, [r7, #20]
    7aee:	e00a      	b.n	7b06 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    7af0:	2313      	movs	r3, #19
    7af2:	18fb      	adds	r3, r7, r3
    7af4:	781b      	ldrb	r3, [r3, #0]
    7af6:	2b00      	cmp	r3, #0
    7af8:	d005      	beq.n	7b06 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    7afa:	68fb      	ldr	r3, [r7, #12]
    7afc:	3301      	adds	r3, #1
    7afe:	697a      	ldr	r2, [r7, #20]
    7b00:	40da      	lsrs	r2, r3
    7b02:	0013      	movs	r3, r2
    7b04:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    7b06:	697b      	ldr	r3, [r7, #20]
}
    7b08:	0018      	movs	r0, r3
    7b0a:	46bd      	mov	sp, r7
    7b0c:	b006      	add	sp, #24
    7b0e:	bd80      	pop	{r7, pc}
    7b10:	00007889 	.word	0x00007889
    7b14:	00007861 	.word	0x00007861
    7b18:	40000c04 	.word	0x40000c04
    7b1c:	40000c00 	.word	0x40000c00
    7b20:	0000739d 	.word	0x0000739d
    7b24:	40000c08 	.word	0x40000c08
    7b28:	00007875 	.word	0x00007875
    7b2c:	00014009 	.word	0x00014009

00007b30 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    7b30:	b580      	push	{r7, lr}
    7b32:	b084      	sub	sp, #16
    7b34:	af00      	add	r7, sp, #0
    7b36:	0002      	movs	r2, r0
    7b38:	6039      	str	r1, [r7, #0]
    7b3a:	1dfb      	adds	r3, r7, #7
    7b3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    7b3e:	1dfb      	adds	r3, r7, #7
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7b44:	683b      	ldr	r3, [r7, #0]
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	021b      	lsls	r3, r3, #8
    7b4a:	001a      	movs	r2, r3
    7b4c:	68fb      	ldr	r3, [r7, #12]
    7b4e:	4313      	orrs	r3, r2
    7b50:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    7b52:	1dfb      	adds	r3, r7, #7
    7b54:	781b      	ldrb	r3, [r3, #0]
    7b56:	0018      	movs	r0, r3
    7b58:	4b04      	ldr	r3, [pc, #16]	; (7b6c <system_gclk_chan_set_config+0x3c>)
    7b5a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    7b5c:	4b04      	ldr	r3, [pc, #16]	; (7b70 <system_gclk_chan_set_config+0x40>)
    7b5e:	68fa      	ldr	r2, [r7, #12]
    7b60:	b292      	uxth	r2, r2
    7b62:	805a      	strh	r2, [r3, #2]
}
    7b64:	46c0      	nop			; (mov r8, r8)
    7b66:	46bd      	mov	sp, r7
    7b68:	b004      	add	sp, #16
    7b6a:	bd80      	pop	{r7, pc}
    7b6c:	00007bbd 	.word	0x00007bbd
    7b70:	40000c00 	.word	0x40000c00

00007b74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7b74:	b580      	push	{r7, lr}
    7b76:	b082      	sub	sp, #8
    7b78:	af00      	add	r7, sp, #0
    7b7a:	0002      	movs	r2, r0
    7b7c:	1dfb      	adds	r3, r7, #7
    7b7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7b80:	4b0a      	ldr	r3, [pc, #40]	; (7bac <system_gclk_chan_enable+0x38>)
    7b82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7b84:	4a0a      	ldr	r2, [pc, #40]	; (7bb0 <system_gclk_chan_enable+0x3c>)
    7b86:	1dfb      	adds	r3, r7, #7
    7b88:	781b      	ldrb	r3, [r3, #0]
    7b8a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7b8c:	4909      	ldr	r1, [pc, #36]	; (7bb4 <system_gclk_chan_enable+0x40>)
    7b8e:	4b09      	ldr	r3, [pc, #36]	; (7bb4 <system_gclk_chan_enable+0x40>)
    7b90:	885b      	ldrh	r3, [r3, #2]
    7b92:	b29b      	uxth	r3, r3
    7b94:	2280      	movs	r2, #128	; 0x80
    7b96:	01d2      	lsls	r2, r2, #7
    7b98:	4313      	orrs	r3, r2
    7b9a:	b29b      	uxth	r3, r3
    7b9c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    7b9e:	4b06      	ldr	r3, [pc, #24]	; (7bb8 <system_gclk_chan_enable+0x44>)
    7ba0:	4798      	blx	r3
}
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	46bd      	mov	sp, r7
    7ba6:	b002      	add	sp, #8
    7ba8:	bd80      	pop	{r7, pc}
    7baa:	46c0      	nop			; (mov r8, r8)
    7bac:	00007861 	.word	0x00007861
    7bb0:	40000c02 	.word	0x40000c02
    7bb4:	40000c00 	.word	0x40000c00
    7bb8:	00007875 	.word	0x00007875

00007bbc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7bbc:	b580      	push	{r7, lr}
    7bbe:	b084      	sub	sp, #16
    7bc0:	af00      	add	r7, sp, #0
    7bc2:	0002      	movs	r2, r0
    7bc4:	1dfb      	adds	r3, r7, #7
    7bc6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7bc8:	4b1c      	ldr	r3, [pc, #112]	; (7c3c <system_gclk_chan_disable+0x80>)
    7bca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7bcc:	4a1c      	ldr	r2, [pc, #112]	; (7c40 <system_gclk_chan_disable+0x84>)
    7bce:	1dfb      	adds	r3, r7, #7
    7bd0:	781b      	ldrb	r3, [r3, #0]
    7bd2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7bd4:	4b1b      	ldr	r3, [pc, #108]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bd6:	885b      	ldrh	r3, [r3, #2]
    7bd8:	051b      	lsls	r3, r3, #20
    7bda:	0f1b      	lsrs	r3, r3, #28
    7bdc:	b2db      	uxtb	r3, r3
    7bde:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    7be0:	4a18      	ldr	r2, [pc, #96]	; (7c44 <system_gclk_chan_disable+0x88>)
    7be2:	8853      	ldrh	r3, [r2, #2]
    7be4:	4918      	ldr	r1, [pc, #96]	; (7c48 <system_gclk_chan_disable+0x8c>)
    7be6:	400b      	ands	r3, r1
    7be8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7bea:	4a16      	ldr	r2, [pc, #88]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bec:	4b15      	ldr	r3, [pc, #84]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bee:	885b      	ldrh	r3, [r3, #2]
    7bf0:	b29b      	uxth	r3, r3
    7bf2:	4916      	ldr	r1, [pc, #88]	; (7c4c <system_gclk_chan_disable+0x90>)
    7bf4:	400b      	ands	r3, r1
    7bf6:	b29b      	uxth	r3, r3
    7bf8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    7bfa:	46c0      	nop			; (mov r8, r8)
    7bfc:	4b11      	ldr	r3, [pc, #68]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bfe:	885b      	ldrh	r3, [r3, #2]
    7c00:	b29b      	uxth	r3, r3
    7c02:	001a      	movs	r2, r3
    7c04:	2380      	movs	r3, #128	; 0x80
    7c06:	01db      	lsls	r3, r3, #7
    7c08:	4013      	ands	r3, r2
    7c0a:	d1f7      	bne.n	7bfc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    7c0c:	4a0d      	ldr	r2, [pc, #52]	; (7c44 <system_gclk_chan_disable+0x88>)
    7c0e:	68fb      	ldr	r3, [r7, #12]
    7c10:	b2db      	uxtb	r3, r3
    7c12:	1c19      	adds	r1, r3, #0
    7c14:	230f      	movs	r3, #15
    7c16:	400b      	ands	r3, r1
    7c18:	b2d9      	uxtb	r1, r3
    7c1a:	8853      	ldrh	r3, [r2, #2]
    7c1c:	1c08      	adds	r0, r1, #0
    7c1e:	210f      	movs	r1, #15
    7c20:	4001      	ands	r1, r0
    7c22:	0208      	lsls	r0, r1, #8
    7c24:	4908      	ldr	r1, [pc, #32]	; (7c48 <system_gclk_chan_disable+0x8c>)
    7c26:	400b      	ands	r3, r1
    7c28:	1c19      	adds	r1, r3, #0
    7c2a:	1c03      	adds	r3, r0, #0
    7c2c:	430b      	orrs	r3, r1
    7c2e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    7c30:	4b07      	ldr	r3, [pc, #28]	; (7c50 <system_gclk_chan_disable+0x94>)
    7c32:	4798      	blx	r3
}
    7c34:	46c0      	nop			; (mov r8, r8)
    7c36:	46bd      	mov	sp, r7
    7c38:	b004      	add	sp, #16
    7c3a:	bd80      	pop	{r7, pc}
    7c3c:	00007861 	.word	0x00007861
    7c40:	40000c02 	.word	0x40000c02
    7c44:	40000c00 	.word	0x40000c00
    7c48:	fffff0ff 	.word	0xfffff0ff
    7c4c:	ffffbfff 	.word	0xffffbfff
    7c50:	00007875 	.word	0x00007875

00007c54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7c54:	b580      	push	{r7, lr}
    7c56:	b084      	sub	sp, #16
    7c58:	af00      	add	r7, sp, #0
    7c5a:	0002      	movs	r2, r0
    7c5c:	1dfb      	adds	r3, r7, #7
    7c5e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7c60:	4b0d      	ldr	r3, [pc, #52]	; (7c98 <system_gclk_chan_get_hz+0x44>)
    7c62:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7c64:	4a0d      	ldr	r2, [pc, #52]	; (7c9c <system_gclk_chan_get_hz+0x48>)
    7c66:	1dfb      	adds	r3, r7, #7
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    7c6c:	4b0c      	ldr	r3, [pc, #48]	; (7ca0 <system_gclk_chan_get_hz+0x4c>)
    7c6e:	885b      	ldrh	r3, [r3, #2]
    7c70:	051b      	lsls	r3, r3, #20
    7c72:	0f1b      	lsrs	r3, r3, #28
    7c74:	b2da      	uxtb	r2, r3
    7c76:	230f      	movs	r3, #15
    7c78:	18fb      	adds	r3, r7, r3
    7c7a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    7c7c:	4b09      	ldr	r3, [pc, #36]	; (7ca4 <system_gclk_chan_get_hz+0x50>)
    7c7e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7c80:	230f      	movs	r3, #15
    7c82:	18fb      	adds	r3, r7, r3
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	0018      	movs	r0, r3
    7c88:	4b07      	ldr	r3, [pc, #28]	; (7ca8 <system_gclk_chan_get_hz+0x54>)
    7c8a:	4798      	blx	r3
    7c8c:	0003      	movs	r3, r0
}
    7c8e:	0018      	movs	r0, r3
    7c90:	46bd      	mov	sp, r7
    7c92:	b004      	add	sp, #16
    7c94:	bd80      	pop	{r7, pc}
    7c96:	46c0      	nop			; (mov r8, r8)
    7c98:	00007861 	.word	0x00007861
    7c9c:	40000c02 	.word	0x40000c02
    7ca0:	40000c00 	.word	0x40000c00
    7ca4:	00007875 	.word	0x00007875
    7ca8:	00007a59 	.word	0x00007a59

00007cac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7cac:	b580      	push	{r7, lr}
    7cae:	b084      	sub	sp, #16
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	0002      	movs	r2, r0
    7cb4:	1dfb      	adds	r3, r7, #7
    7cb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7cb8:	230f      	movs	r3, #15
    7cba:	18fb      	adds	r3, r7, r3
    7cbc:	1dfa      	adds	r2, r7, #7
    7cbe:	7812      	ldrb	r2, [r2, #0]
    7cc0:	09d2      	lsrs	r2, r2, #7
    7cc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7cc4:	230e      	movs	r3, #14
    7cc6:	18fb      	adds	r3, r7, r3
    7cc8:	1dfa      	adds	r2, r7, #7
    7cca:	7812      	ldrb	r2, [r2, #0]
    7ccc:	0952      	lsrs	r2, r2, #5
    7cce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7cd0:	4b0d      	ldr	r3, [pc, #52]	; (7d08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7cd2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7cd4:	230f      	movs	r3, #15
    7cd6:	18fb      	adds	r3, r7, r3
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d10f      	bne.n	7cfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7cde:	230f      	movs	r3, #15
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	009b      	lsls	r3, r3, #2
    7ce6:	2210      	movs	r2, #16
    7ce8:	4694      	mov	ip, r2
    7cea:	44bc      	add	ip, r7
    7cec:	4463      	add	r3, ip
    7cee:	3b08      	subs	r3, #8
    7cf0:	681a      	ldr	r2, [r3, #0]
    7cf2:	230e      	movs	r3, #14
    7cf4:	18fb      	adds	r3, r7, r3
    7cf6:	781b      	ldrb	r3, [r3, #0]
    7cf8:	01db      	lsls	r3, r3, #7
    7cfa:	18d3      	adds	r3, r2, r3
    7cfc:	e000      	b.n	7d00 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    7cfe:	2300      	movs	r3, #0
	}
}
    7d00:	0018      	movs	r0, r3
    7d02:	46bd      	mov	sp, r7
    7d04:	b004      	add	sp, #16
    7d06:	bd80      	pop	{r7, pc}
    7d08:	41004400 	.word	0x41004400

00007d0c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7d0c:	b580      	push	{r7, lr}
    7d0e:	b088      	sub	sp, #32
    7d10:	af00      	add	r7, sp, #0
    7d12:	60f8      	str	r0, [r7, #12]
    7d14:	60b9      	str	r1, [r7, #8]
    7d16:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7d18:	2300      	movs	r3, #0
    7d1a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	78db      	ldrb	r3, [r3, #3]
    7d20:	2201      	movs	r2, #1
    7d22:	4053      	eors	r3, r2
    7d24:	b2db      	uxtb	r3, r3
    7d26:	2b00      	cmp	r3, #0
    7d28:	d035      	beq.n	7d96 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	2b80      	cmp	r3, #128	; 0x80
    7d30:	d00b      	beq.n	7d4a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7d32:	69fb      	ldr	r3, [r7, #28]
    7d34:	2280      	movs	r2, #128	; 0x80
    7d36:	0252      	lsls	r2, r2, #9
    7d38:	4313      	orrs	r3, r2
    7d3a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	781b      	ldrb	r3, [r3, #0]
    7d40:	061b      	lsls	r3, r3, #24
    7d42:	001a      	movs	r2, r3
    7d44:	69fb      	ldr	r3, [r7, #28]
    7d46:	4313      	orrs	r3, r2
    7d48:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	785b      	ldrb	r3, [r3, #1]
    7d4e:	2b00      	cmp	r3, #0
    7d50:	d003      	beq.n	7d5a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7d56:	2b02      	cmp	r3, #2
    7d58:	d110      	bne.n	7d7c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7d5a:	69fb      	ldr	r3, [r7, #28]
    7d5c:	2280      	movs	r2, #128	; 0x80
    7d5e:	0292      	lsls	r2, r2, #10
    7d60:	4313      	orrs	r3, r2
    7d62:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7d64:	687b      	ldr	r3, [r7, #4]
    7d66:	789b      	ldrb	r3, [r3, #2]
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d004      	beq.n	7d76 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7d6c:	69fb      	ldr	r3, [r7, #28]
    7d6e:	2280      	movs	r2, #128	; 0x80
    7d70:	02d2      	lsls	r2, r2, #11
    7d72:	4313      	orrs	r3, r2
    7d74:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7d76:	68fb      	ldr	r3, [r7, #12]
    7d78:	68ba      	ldr	r2, [r7, #8]
    7d7a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	785b      	ldrb	r3, [r3, #1]
    7d80:	2b01      	cmp	r3, #1
    7d82:	d003      	beq.n	7d8c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7d84:	687b      	ldr	r3, [r7, #4]
    7d86:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7d88:	2b02      	cmp	r3, #2
    7d8a:	d107      	bne.n	7d9c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7d8c:	69fb      	ldr	r3, [r7, #28]
    7d8e:	4a22      	ldr	r2, [pc, #136]	; (7e18 <_system_pinmux_config+0x10c>)
    7d90:	4013      	ands	r3, r2
    7d92:	61fb      	str	r3, [r7, #28]
    7d94:	e002      	b.n	7d9c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7d96:	68fb      	ldr	r3, [r7, #12]
    7d98:	68ba      	ldr	r2, [r7, #8]
    7d9a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7d9c:	68bb      	ldr	r3, [r7, #8]
    7d9e:	041b      	lsls	r3, r3, #16
    7da0:	0c1b      	lsrs	r3, r3, #16
    7da2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7da4:	68bb      	ldr	r3, [r7, #8]
    7da6:	0c1b      	lsrs	r3, r3, #16
    7da8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7daa:	69ba      	ldr	r2, [r7, #24]
    7dac:	69fb      	ldr	r3, [r7, #28]
    7dae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7db0:	22a0      	movs	r2, #160	; 0xa0
    7db2:	05d2      	lsls	r2, r2, #23
    7db4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7db6:	68fb      	ldr	r3, [r7, #12]
    7db8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7dba:	697a      	ldr	r2, [r7, #20]
    7dbc:	69fb      	ldr	r3, [r7, #28]
    7dbe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7dc0:	22d0      	movs	r2, #208	; 0xd0
    7dc2:	0612      	lsls	r2, r2, #24
    7dc4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7dc6:	68fb      	ldr	r3, [r7, #12]
    7dc8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7dca:	687b      	ldr	r3, [r7, #4]
    7dcc:	78db      	ldrb	r3, [r3, #3]
    7dce:	2201      	movs	r2, #1
    7dd0:	4053      	eors	r3, r2
    7dd2:	b2db      	uxtb	r3, r3
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d01a      	beq.n	7e0e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7dd8:	69fa      	ldr	r2, [r7, #28]
    7dda:	2380      	movs	r3, #128	; 0x80
    7ddc:	02db      	lsls	r3, r3, #11
    7dde:	4013      	ands	r3, r2
    7de0:	d00a      	beq.n	7df8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	789b      	ldrb	r3, [r3, #2]
    7de6:	2b01      	cmp	r3, #1
    7de8:	d103      	bne.n	7df2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	68ba      	ldr	r2, [r7, #8]
    7dee:	619a      	str	r2, [r3, #24]
    7df0:	e002      	b.n	7df8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7df2:	68fb      	ldr	r3, [r7, #12]
    7df4:	68ba      	ldr	r2, [r7, #8]
    7df6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	785b      	ldrb	r3, [r3, #1]
    7dfc:	2b01      	cmp	r3, #1
    7dfe:	d003      	beq.n	7e08 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7e04:	2b02      	cmp	r3, #2
    7e06:	d102      	bne.n	7e0e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	68ba      	ldr	r2, [r7, #8]
    7e0c:	609a      	str	r2, [r3, #8]
		}
	}
}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	46bd      	mov	sp, r7
    7e12:	b008      	add	sp, #32
    7e14:	bd80      	pop	{r7, pc}
    7e16:	46c0      	nop			; (mov r8, r8)
    7e18:	fffbffff 	.word	0xfffbffff

00007e1c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7e1c:	b580      	push	{r7, lr}
    7e1e:	b084      	sub	sp, #16
    7e20:	af00      	add	r7, sp, #0
    7e22:	0002      	movs	r2, r0
    7e24:	6039      	str	r1, [r7, #0]
    7e26:	1dfb      	adds	r3, r7, #7
    7e28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7e2a:	1dfb      	adds	r3, r7, #7
    7e2c:	781b      	ldrb	r3, [r3, #0]
    7e2e:	0018      	movs	r0, r3
    7e30:	4b0a      	ldr	r3, [pc, #40]	; (7e5c <system_pinmux_pin_set_config+0x40>)
    7e32:	4798      	blx	r3
    7e34:	0003      	movs	r3, r0
    7e36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7e38:	1dfb      	adds	r3, r7, #7
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	221f      	movs	r2, #31
    7e3e:	4013      	ands	r3, r2
    7e40:	2201      	movs	r2, #1
    7e42:	409a      	lsls	r2, r3
    7e44:	0013      	movs	r3, r2
    7e46:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7e48:	683a      	ldr	r2, [r7, #0]
    7e4a:	68b9      	ldr	r1, [r7, #8]
    7e4c:	68fb      	ldr	r3, [r7, #12]
    7e4e:	0018      	movs	r0, r3
    7e50:	4b03      	ldr	r3, [pc, #12]	; (7e60 <system_pinmux_pin_set_config+0x44>)
    7e52:	4798      	blx	r3
}
    7e54:	46c0      	nop			; (mov r8, r8)
    7e56:	46bd      	mov	sp, r7
    7e58:	b004      	add	sp, #16
    7e5a:	bd80      	pop	{r7, pc}
    7e5c:	00007cad 	.word	0x00007cad
    7e60:	00007d0d 	.word	0x00007d0d

00007e64 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7e64:	b580      	push	{r7, lr}
    7e66:	af00      	add	r7, sp, #0
	return;
    7e68:	46c0      	nop			; (mov r8, r8)
}
    7e6a:	46bd      	mov	sp, r7
    7e6c:	bd80      	pop	{r7, pc}
	...

00007e70 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7e70:	b580      	push	{r7, lr}
    7e72:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7e74:	4b06      	ldr	r3, [pc, #24]	; (7e90 <system_init+0x20>)
    7e76:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7e78:	4b06      	ldr	r3, [pc, #24]	; (7e94 <system_init+0x24>)
    7e7a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7e7c:	4b06      	ldr	r3, [pc, #24]	; (7e98 <system_init+0x28>)
    7e7e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7e80:	4b06      	ldr	r3, [pc, #24]	; (7e9c <system_init+0x2c>)
    7e82:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7e84:	4b06      	ldr	r3, [pc, #24]	; (7ea0 <system_init+0x30>)
    7e86:	4798      	blx	r3
}
    7e88:	46c0      	nop			; (mov r8, r8)
    7e8a:	46bd      	mov	sp, r7
    7e8c:	bd80      	pop	{r7, pc}
    7e8e:	46c0      	nop			; (mov r8, r8)
    7e90:	00007681 	.word	0x00007681
    7e94:	00007171 	.word	0x00007171
    7e98:	00007e65 	.word	0x00007e65
    7e9c:	00007e65 	.word	0x00007e65
    7ea0:	00007e65 	.word	0x00007e65

00007ea4 <nvm_get_config_defaults>:
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	b082      	sub	sp, #8
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	2200      	movs	r2, #0
    7eb0:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	2201      	movs	r2, #1
    7eb6:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    7eb8:	4b08      	ldr	r3, [pc, #32]	; (7edc <nvm_get_config_defaults+0x38>)
    7eba:	685b      	ldr	r3, [r3, #4]
    7ebc:	06db      	lsls	r3, r3, #27
    7ebe:	0f1b      	lsrs	r3, r3, #28
    7ec0:	b2db      	uxtb	r3, r3
    7ec2:	001a      	movs	r2, r3
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	2200      	movs	r2, #0
    7ecc:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	2200      	movs	r2, #0
    7ed2:	711a      	strb	r2, [r3, #4]
}
    7ed4:	46c0      	nop			; (mov r8, r8)
    7ed6:	46bd      	mov	sp, r7
    7ed8:	b002      	add	sp, #8
    7eda:	bd80      	pop	{r7, pc}
    7edc:	41004000 	.word	0x41004000

00007ee0 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    7ee0:	b590      	push	{r4, r7, lr}
    7ee2:	b085      	sub	sp, #20
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	0002      	movs	r2, r0
    7ee8:	1dfb      	adds	r3, r7, #7
    7eea:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7eec:	230f      	movs	r3, #15
    7eee:	18fb      	adds	r3, r7, r3
    7ef0:	2200      	movs	r2, #0
    7ef2:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    7ef4:	4b0a      	ldr	r3, [pc, #40]	; (7f20 <_eeprom_emulator_nvm_erase_row+0x40>)
    7ef6:	685b      	ldr	r3, [r3, #4]
    7ef8:	1dfa      	adds	r2, r7, #7
    7efa:	7812      	ldrb	r2, [r2, #0]
    7efc:	0212      	lsls	r2, r2, #8
    7efe:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
    7f00:	220f      	movs	r2, #15
    7f02:	18bc      	adds	r4, r7, r2
    7f04:	0018      	movs	r0, r3
    7f06:	4b07      	ldr	r3, [pc, #28]	; (7f24 <_eeprom_emulator_nvm_erase_row+0x44>)
    7f08:	4798      	blx	r3
    7f0a:	0003      	movs	r3, r0
    7f0c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    7f0e:	230f      	movs	r3, #15
    7f10:	18fb      	adds	r3, r7, r3
    7f12:	781b      	ldrb	r3, [r3, #0]
    7f14:	2b05      	cmp	r3, #5
    7f16:	d0ed      	beq.n	7ef4 <_eeprom_emulator_nvm_erase_row+0x14>
}
    7f18:	46c0      	nop			; (mov r8, r8)
    7f1a:	46bd      	mov	sp, r7
    7f1c:	b005      	add	sp, #20
    7f1e:	bd90      	pop	{r4, r7, pc}
    7f20:	20000218 	.word	0x20000218
    7f24:	00002f0d 	.word	0x00002f0d

00007f28 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
    7f28:	b590      	push	{r4, r7, lr}
    7f2a:	b085      	sub	sp, #20
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	0002      	movs	r2, r0
    7f30:	6039      	str	r1, [r7, #0]
    7f32:	1dbb      	adds	r3, r7, #6
    7f34:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7f36:	230f      	movs	r3, #15
    7f38:	18fb      	adds	r3, r7, r3
    7f3a:	2200      	movs	r2, #0
    7f3c:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7f3e:	4b0c      	ldr	r3, [pc, #48]	; (7f70 <_eeprom_emulator_nvm_fill_cache+0x48>)
    7f40:	685a      	ldr	r2, [r3, #4]
    7f42:	1dbb      	adds	r3, r7, #6
    7f44:	881b      	ldrh	r3, [r3, #0]
    7f46:	019b      	lsls	r3, r3, #6
    7f48:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
    7f4a:	0018      	movs	r0, r3
    7f4c:	230f      	movs	r3, #15
    7f4e:	18fc      	adds	r4, r7, r3
    7f50:	683b      	ldr	r3, [r7, #0]
    7f52:	2240      	movs	r2, #64	; 0x40
    7f54:	0019      	movs	r1, r3
    7f56:	4b07      	ldr	r3, [pc, #28]	; (7f74 <_eeprom_emulator_nvm_fill_cache+0x4c>)
    7f58:	4798      	blx	r3
    7f5a:	0003      	movs	r3, r0
    7f5c:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    7f5e:	230f      	movs	r3, #15
    7f60:	18fb      	adds	r3, r7, r3
    7f62:	781b      	ldrb	r3, [r3, #0]
    7f64:	2b05      	cmp	r3, #5
    7f66:	d0ea      	beq.n	7f3e <_eeprom_emulator_nvm_fill_cache+0x16>
}
    7f68:	46c0      	nop			; (mov r8, r8)
    7f6a:	46bd      	mov	sp, r7
    7f6c:	b005      	add	sp, #20
    7f6e:	bd90      	pop	{r4, r7, pc}
    7f70:	20000218 	.word	0x20000218
    7f74:	00002cc5 	.word	0x00002cc5

00007f78 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
    7f78:	b590      	push	{r4, r7, lr}
    7f7a:	b085      	sub	sp, #20
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	0002      	movs	r2, r0
    7f80:	1dbb      	adds	r3, r7, #6
    7f82:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7f84:	230f      	movs	r3, #15
    7f86:	18fb      	adds	r3, r7, r3
    7f88:	2200      	movs	r2, #0
    7f8a:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    7f8c:	4b0b      	ldr	r3, [pc, #44]	; (7fbc <_eeprom_emulator_nvm_commit_cache+0x44>)
    7f8e:	685a      	ldr	r2, [r3, #4]
    7f90:	1dbb      	adds	r3, r7, #6
    7f92:	881b      	ldrh	r3, [r3, #0]
    7f94:	019b      	lsls	r3, r3, #6
    7f96:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
    7f98:	220f      	movs	r2, #15
    7f9a:	18bc      	adds	r4, r7, r2
    7f9c:	2200      	movs	r2, #0
    7f9e:	0019      	movs	r1, r3
    7fa0:	2004      	movs	r0, #4
    7fa2:	4b07      	ldr	r3, [pc, #28]	; (7fc0 <_eeprom_emulator_nvm_commit_cache+0x48>)
    7fa4:	4798      	blx	r3
    7fa6:	0003      	movs	r3, r0
    7fa8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    7faa:	230f      	movs	r3, #15
    7fac:	18fb      	adds	r3, r7, r3
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	2b05      	cmp	r3, #5
    7fb2:	d0eb      	beq.n	7f8c <_eeprom_emulator_nvm_commit_cache+0x14>
}
    7fb4:	46c0      	nop			; (mov r8, r8)
    7fb6:	46bd      	mov	sp, r7
    7fb8:	b005      	add	sp, #20
    7fba:	bd90      	pop	{r4, r7, pc}
    7fbc:	20000218 	.word	0x20000218
    7fc0:	00002bad 	.word	0x00002bad

00007fc4 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
    7fc4:	b590      	push	{r4, r7, lr}
    7fc6:	b085      	sub	sp, #20
    7fc8:	af00      	add	r7, sp, #0
    7fca:	0002      	movs	r2, r0
    7fcc:	6039      	str	r1, [r7, #0]
    7fce:	1dbb      	adds	r3, r7, #6
    7fd0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7fd2:	230f      	movs	r3, #15
    7fd4:	18fb      	adds	r3, r7, r3
    7fd6:	2200      	movs	r2, #0
    7fd8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7fda:	4b0c      	ldr	r3, [pc, #48]	; (800c <_eeprom_emulator_nvm_read_page+0x48>)
    7fdc:	685a      	ldr	r2, [r3, #4]
    7fde:	1dbb      	adds	r3, r7, #6
    7fe0:	881b      	ldrh	r3, [r3, #0]
    7fe2:	019b      	lsls	r3, r3, #6
    7fe4:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
    7fe6:	0018      	movs	r0, r3
    7fe8:	230f      	movs	r3, #15
    7fea:	18fc      	adds	r4, r7, r3
    7fec:	683b      	ldr	r3, [r7, #0]
    7fee:	2240      	movs	r2, #64	; 0x40
    7ff0:	0019      	movs	r1, r3
    7ff2:	4b07      	ldr	r3, [pc, #28]	; (8010 <_eeprom_emulator_nvm_read_page+0x4c>)
    7ff4:	4798      	blx	r3
    7ff6:	0003      	movs	r3, r0
    7ff8:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    7ffa:	230f      	movs	r3, #15
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	2b05      	cmp	r3, #5
    8002:	d0ea      	beq.n	7fda <_eeprom_emulator_nvm_read_page+0x16>
}
    8004:	46c0      	nop			; (mov r8, r8)
    8006:	46bd      	mov	sp, r7
    8008:	b005      	add	sp, #20
    800a:	bd90      	pop	{r4, r7, pc}
    800c:	20000218 	.word	0x20000218
    8010:	00002e11 	.word	0x00002e11

00008014 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
    8014:	b580      	push	{r7, lr}
    8016:	b092      	sub	sp, #72	; 0x48
    8018:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
    801a:	2346      	movs	r3, #70	; 0x46
    801c:	18fb      	adds	r3, r7, r3
    801e:	2200      	movs	r2, #0
    8020:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
    8022:	4b32      	ldr	r3, [pc, #200]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    8024:	2287      	movs	r2, #135	; 0x87
    8026:	2100      	movs	r1, #0
    8028:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    802a:	4b30      	ldr	r3, [pc, #192]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    802c:	2287      	movs	r2, #135	; 0x87
    802e:	5c9b      	ldrb	r3, [r3, r2]
    8030:	0018      	movs	r0, r3
    8032:	4b2f      	ldr	r3, [pc, #188]	; (80f0 <_eeprom_emulator_format_memory+0xdc>)
    8034:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    8036:	2344      	movs	r3, #68	; 0x44
    8038:	18fb      	adds	r3, r7, r3
    803a:	2204      	movs	r2, #4
    803c:	801a      	strh	r2, [r3, #0]
    803e:	e04a      	b.n	80d6 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8040:	2344      	movs	r3, #68	; 0x44
    8042:	18fb      	adds	r3, r7, r3
    8044:	881a      	ldrh	r2, [r3, #0]
    8046:	4b29      	ldr	r3, [pc, #164]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    8048:	891b      	ldrh	r3, [r3, #8]
    804a:	3b01      	subs	r3, #1
    804c:	429a      	cmp	r2, r3
    804e:	d03a      	beq.n	80c6 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    8050:	2344      	movs	r3, #68	; 0x44
    8052:	18fb      	adds	r3, r7, r3
    8054:	881b      	ldrh	r3, [r3, #0]
    8056:	2203      	movs	r2, #3
    8058:	4013      	ands	r3, r2
    805a:	b29b      	uxth	r3, r3
    805c:	2b00      	cmp	r3, #0
    805e:	d108      	bne.n	8072 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    8060:	2344      	movs	r3, #68	; 0x44
    8062:	18fb      	adds	r3, r7, r3
    8064:	881b      	ldrh	r3, [r3, #0]
    8066:	089b      	lsrs	r3, r3, #2
    8068:	b29b      	uxth	r3, r3
    806a:	b2db      	uxtb	r3, r3
    806c:	0018      	movs	r0, r3
    806e:	4b20      	ldr	r3, [pc, #128]	; (80f0 <_eeprom_emulator_format_memory+0xdc>)
    8070:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    8072:	2344      	movs	r3, #68	; 0x44
    8074:	18fb      	adds	r3, r7, r3
    8076:	881b      	ldrh	r3, [r3, #0]
    8078:	2203      	movs	r2, #3
    807a:	4013      	ands	r3, r2
    807c:	b29b      	uxth	r3, r3
    807e:	2b01      	cmp	r3, #1
    8080:	d822      	bhi.n	80c8 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
    8082:	1d3b      	adds	r3, r7, #4
    8084:	2240      	movs	r2, #64	; 0x40
    8086:	21ff      	movs	r1, #255	; 0xff
    8088:	0018      	movs	r0, r3
    808a:	4b1a      	ldr	r3, [pc, #104]	; (80f4 <_eeprom_emulator_format_memory+0xe0>)
    808c:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
    808e:	2346      	movs	r3, #70	; 0x46
    8090:	18fb      	adds	r3, r7, r3
    8092:	881b      	ldrh	r3, [r3, #0]
    8094:	b2da      	uxtb	r2, r3
    8096:	1d3b      	adds	r3, r7, #4
    8098:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    809a:	1d3a      	adds	r2, r7, #4
    809c:	2344      	movs	r3, #68	; 0x44
    809e:	18fb      	adds	r3, r7, r3
    80a0:	881b      	ldrh	r3, [r3, #0]
    80a2:	0011      	movs	r1, r2
    80a4:	0018      	movs	r0, r3
    80a6:	4b14      	ldr	r3, [pc, #80]	; (80f8 <_eeprom_emulator_format_memory+0xe4>)
    80a8:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    80aa:	2344      	movs	r3, #68	; 0x44
    80ac:	18fb      	adds	r3, r7, r3
    80ae:	881b      	ldrh	r3, [r3, #0]
    80b0:	0018      	movs	r0, r3
    80b2:	4b12      	ldr	r3, [pc, #72]	; (80fc <_eeprom_emulator_format_memory+0xe8>)
    80b4:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
    80b6:	2346      	movs	r3, #70	; 0x46
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	881a      	ldrh	r2, [r3, #0]
    80bc:	2346      	movs	r3, #70	; 0x46
    80be:	18fb      	adds	r3, r7, r3
    80c0:	3201      	adds	r2, #1
    80c2:	801a      	strh	r2, [r3, #0]
    80c4:	e000      	b.n	80c8 <_eeprom_emulator_format_memory+0xb4>
			continue;
    80c6:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    80c8:	2344      	movs	r3, #68	; 0x44
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	881a      	ldrh	r2, [r3, #0]
    80ce:	2344      	movs	r3, #68	; 0x44
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	3201      	adds	r2, #1
    80d4:	801a      	strh	r2, [r3, #0]
    80d6:	4b05      	ldr	r3, [pc, #20]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    80d8:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    80da:	2244      	movs	r2, #68	; 0x44
    80dc:	18ba      	adds	r2, r7, r2
    80de:	8812      	ldrh	r2, [r2, #0]
    80e0:	429a      	cmp	r2, r3
    80e2:	d3ad      	bcc.n	8040 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
    80e4:	46c0      	nop			; (mov r8, r8)
    80e6:	46bd      	mov	sp, r7
    80e8:	b012      	add	sp, #72	; 0x48
    80ea:	bd80      	pop	{r7, pc}
    80ec:	20000218 	.word	0x20000218
    80f0:	00007ee1 	.word	0x00007ee1
    80f4:	00016ff7 	.word	0x00016ff7
    80f8:	00007f29 	.word	0x00007f29
    80fc:	00007f79 	.word	0x00007f79

00008100 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    8100:	b580      	push	{r7, lr}
    8102:	b084      	sub	sp, #16
    8104:	af00      	add	r7, sp, #0
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    8106:	230e      	movs	r3, #14
    8108:	18fb      	adds	r3, r7, r3
    810a:	2200      	movs	r2, #0
    810c:	801a      	strh	r2, [r3, #0]
    810e:	e033      	b.n	8178 <_eeprom_emulator_update_page_mapping+0x78>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    8110:	230e      	movs	r3, #14
    8112:	18fb      	adds	r3, r7, r3
    8114:	881a      	ldrh	r2, [r3, #0]
    8116:	4b4c      	ldr	r3, [pc, #304]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8118:	891b      	ldrh	r3, [r3, #8]
    811a:	3b01      	subs	r3, #1
    811c:	429a      	cmp	r2, r3
    811e:	d023      	beq.n	8168 <_eeprom_emulator_update_page_mapping+0x68>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    8120:	4b49      	ldr	r3, [pc, #292]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8122:	685a      	ldr	r2, [r3, #4]
    8124:	230e      	movs	r3, #14
    8126:	18fb      	adds	r3, r7, r3
    8128:	881b      	ldrh	r3, [r3, #0]
    812a:	019b      	lsls	r3, r3, #6
    812c:	18d3      	adds	r3, r2, r3
    812e:	781a      	ldrb	r2, [r3, #0]
    8130:	2308      	movs	r3, #8
    8132:	18fb      	adds	r3, r7, r3
    8134:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8136:	2308      	movs	r3, #8
    8138:	18fb      	adds	r3, r7, r3
    813a:	881b      	ldrh	r3, [r3, #0]
    813c:	2bff      	cmp	r3, #255	; 0xff
    813e:	d014      	beq.n	816a <_eeprom_emulator_update_page_mapping+0x6a>
				(logical_page < _eeprom_instance.logical_pages)) {
    8140:	4b41      	ldr	r3, [pc, #260]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8142:	7a9b      	ldrb	r3, [r3, #10]
    8144:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8146:	2208      	movs	r2, #8
    8148:	18ba      	adds	r2, r7, r2
    814a:	8812      	ldrh	r2, [r2, #0]
    814c:	429a      	cmp	r2, r3
    814e:	d20c      	bcs.n	816a <_eeprom_emulator_update_page_mapping+0x6a>
			_eeprom_instance.page_map[logical_page] = c;
    8150:	2308      	movs	r3, #8
    8152:	18fb      	adds	r3, r7, r3
    8154:	881b      	ldrh	r3, [r3, #0]
    8156:	220e      	movs	r2, #14
    8158:	18ba      	adds	r2, r7, r2
    815a:	8812      	ldrh	r2, [r2, #0]
    815c:	b2d1      	uxtb	r1, r2
    815e:	4a3a      	ldr	r2, [pc, #232]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8160:	18d3      	adds	r3, r2, r3
    8162:	1c0a      	adds	r2, r1, #0
    8164:	72da      	strb	r2, [r3, #11]
    8166:	e000      	b.n	816a <_eeprom_emulator_update_page_mapping+0x6a>
			continue;
    8168:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    816a:	230e      	movs	r3, #14
    816c:	18fb      	adds	r3, r7, r3
    816e:	881a      	ldrh	r2, [r3, #0]
    8170:	230e      	movs	r3, #14
    8172:	18fb      	adds	r3, r7, r3
    8174:	3201      	adds	r2, #1
    8176:	801a      	strh	r2, [r3, #0]
    8178:	4b33      	ldr	r3, [pc, #204]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    817a:	891b      	ldrh	r3, [r3, #8]
    817c:	220e      	movs	r2, #14
    817e:	18ba      	adds	r2, r7, r2
    8180:	8812      	ldrh	r2, [r2, #0]
    8182:	429a      	cmp	r2, r3
    8184:	d3c4      	bcc.n	8110 <_eeprom_emulator_update_page_mapping+0x10>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    8186:	4b30      	ldr	r3, [pc, #192]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8188:	2287      	movs	r2, #135	; 0x87
    818a:	213f      	movs	r1, #63	; 0x3f
    818c:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    818e:	230c      	movs	r3, #12
    8190:	18fb      	adds	r3, r7, r3
    8192:	2200      	movs	r2, #0
    8194:	801a      	strh	r2, [r3, #0]
    8196:	e04a      	b.n	822e <_eeprom_emulator_update_page_mapping+0x12e>
		bool spare_row_found = true;
    8198:	230b      	movs	r3, #11
    819a:	18fb      	adds	r3, r7, r3
    819c:	2201      	movs	r2, #1
    819e:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    81a0:	230a      	movs	r3, #10
    81a2:	18fb      	adds	r3, r7, r3
    81a4:	2200      	movs	r2, #0
    81a6:	701a      	strb	r2, [r3, #0]
    81a8:	e028      	b.n	81fc <_eeprom_emulator_update_page_mapping+0xfc>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    81aa:	230c      	movs	r3, #12
    81ac:	18fb      	adds	r3, r7, r3
    81ae:	881b      	ldrh	r3, [r3, #0]
    81b0:	009b      	lsls	r3, r3, #2
    81b2:	b299      	uxth	r1, r3
    81b4:	230a      	movs	r3, #10
    81b6:	18fb      	adds	r3, r7, r3
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	b29a      	uxth	r2, r3
    81bc:	1dbb      	adds	r3, r7, #6
    81be:	188a      	adds	r2, r1, r2
    81c0:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    81c2:	1dbb      	adds	r3, r7, #6
    81c4:	881a      	ldrh	r2, [r3, #0]
    81c6:	4b20      	ldr	r3, [pc, #128]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    81c8:	891b      	ldrh	r3, [r3, #8]
    81ca:	3b01      	subs	r3, #1
    81cc:	429a      	cmp	r2, r3
    81ce:	d00d      	beq.n	81ec <_eeprom_emulator_update_page_mapping+0xec>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    81d0:	4b1d      	ldr	r3, [pc, #116]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    81d2:	685a      	ldr	r2, [r3, #4]
    81d4:	1dbb      	adds	r3, r7, #6
    81d6:	881b      	ldrh	r3, [r3, #0]
    81d8:	019b      	lsls	r3, r3, #6
    81da:	18d3      	adds	r3, r2, r3
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	2bff      	cmp	r3, #255	; 0xff
    81e0:	d005      	beq.n	81ee <_eeprom_emulator_update_page_mapping+0xee>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    81e2:	230b      	movs	r3, #11
    81e4:	18fb      	adds	r3, r7, r3
    81e6:	2200      	movs	r2, #0
    81e8:	701a      	strb	r2, [r3, #0]
    81ea:	e000      	b.n	81ee <_eeprom_emulator_update_page_mapping+0xee>
				continue;
    81ec:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    81ee:	230a      	movs	r3, #10
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	781a      	ldrb	r2, [r3, #0]
    81f4:	230a      	movs	r3, #10
    81f6:	18fb      	adds	r3, r7, r3
    81f8:	3201      	adds	r2, #1
    81fa:	701a      	strb	r2, [r3, #0]
    81fc:	230a      	movs	r3, #10
    81fe:	18fb      	adds	r3, r7, r3
    8200:	781b      	ldrb	r3, [r3, #0]
    8202:	2b03      	cmp	r3, #3
    8204:	d9d1      	bls.n	81aa <_eeprom_emulator_update_page_mapping+0xaa>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    8206:	230b      	movs	r3, #11
    8208:	18fb      	adds	r3, r7, r3
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	2b00      	cmp	r3, #0
    820e:	d007      	beq.n	8220 <_eeprom_emulator_update_page_mapping+0x120>
			_eeprom_instance.spare_row = c;
    8210:	230c      	movs	r3, #12
    8212:	18fb      	adds	r3, r7, r3
    8214:	881b      	ldrh	r3, [r3, #0]
    8216:	b2d9      	uxtb	r1, r3
    8218:	4b0b      	ldr	r3, [pc, #44]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    821a:	2287      	movs	r2, #135	; 0x87
    821c:	5499      	strb	r1, [r3, r2]
			break;
    821e:	e00f      	b.n	8240 <_eeprom_emulator_update_page_mapping+0x140>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8220:	230c      	movs	r3, #12
    8222:	18fb      	adds	r3, r7, r3
    8224:	881a      	ldrh	r2, [r3, #0]
    8226:	230c      	movs	r3, #12
    8228:	18fb      	adds	r3, r7, r3
    822a:	3201      	adds	r2, #1
    822c:	801a      	strh	r2, [r3, #0]
    822e:	4b06      	ldr	r3, [pc, #24]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8230:	891b      	ldrh	r3, [r3, #8]
    8232:	089b      	lsrs	r3, r3, #2
    8234:	b29b      	uxth	r3, r3
    8236:	220c      	movs	r2, #12
    8238:	18ba      	adds	r2, r7, r2
    823a:	8812      	ldrh	r2, [r2, #0]
    823c:	429a      	cmp	r2, r3
    823e:	d3ab      	bcc.n	8198 <_eeprom_emulator_update_page_mapping+0x98>
		}
	}
}
    8240:	46c0      	nop			; (mov r8, r8)
    8242:	46bd      	mov	sp, r7
    8244:	b004      	add	sp, #16
    8246:	bd80      	pop	{r7, pc}
    8248:	20000218 	.word	0x20000218

0000824c <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
    824c:	b580      	push	{r7, lr}
    824e:	b084      	sub	sp, #16
    8250:	af00      	add	r7, sp, #0
    8252:	0002      	movs	r2, r0
    8254:	6039      	str	r1, [r7, #0]
    8256:	1dfb      	adds	r3, r7, #7
    8258:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
    825a:	230e      	movs	r3, #14
    825c:	18fb      	adds	r3, r7, r3
    825e:	1dfa      	adds	r2, r7, #7
    8260:	7812      	ldrb	r2, [r2, #0]
    8262:	0892      	lsrs	r2, r2, #2
    8264:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    8266:	230d      	movs	r3, #13
    8268:	18fb      	adds	r3, r7, r3
    826a:	1dfa      	adds	r2, r7, #7
    826c:	7812      	ldrb	r2, [r2, #0]
    826e:	2103      	movs	r1, #3
    8270:	400a      	ands	r2, r1
    8272:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8274:	230f      	movs	r3, #15
    8276:	18fb      	adds	r3, r7, r3
    8278:	220d      	movs	r2, #13
    827a:	18ba      	adds	r2, r7, r2
    827c:	7812      	ldrb	r2, [r2, #0]
    827e:	701a      	strb	r2, [r3, #0]
    8280:	e023      	b.n	82ca <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    8282:	230e      	movs	r3, #14
    8284:	18fb      	adds	r3, r7, r3
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	009b      	lsls	r3, r3, #2
    828a:	b2d9      	uxtb	r1, r3
    828c:	230c      	movs	r3, #12
    828e:	18fb      	adds	r3, r7, r3
    8290:	220f      	movs	r2, #15
    8292:	18ba      	adds	r2, r7, r2
    8294:	7812      	ldrb	r2, [r2, #0]
    8296:	188a      	adds	r2, r1, r2
    8298:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
    829a:	4b11      	ldr	r3, [pc, #68]	; (82e0 <_eeprom_emulator_is_page_free_on_row+0x94>)
    829c:	685a      	ldr	r2, [r3, #4]
    829e:	230c      	movs	r3, #12
    82a0:	18fb      	adds	r3, r7, r3
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	019b      	lsls	r3, r3, #6
    82a6:	18d3      	adds	r3, r2, r3
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	2bff      	cmp	r3, #255	; 0xff
    82ac:	d106      	bne.n	82bc <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
    82ae:	683b      	ldr	r3, [r7, #0]
    82b0:	220c      	movs	r2, #12
    82b2:	18ba      	adds	r2, r7, r2
    82b4:	7812      	ldrb	r2, [r2, #0]
    82b6:	701a      	strb	r2, [r3, #0]
			return true;
    82b8:	2301      	movs	r3, #1
    82ba:	e00c      	b.n	82d6 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    82bc:	230f      	movs	r3, #15
    82be:	18fb      	adds	r3, r7, r3
    82c0:	781a      	ldrb	r2, [r3, #0]
    82c2:	230f      	movs	r3, #15
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	3201      	adds	r2, #1
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	230f      	movs	r3, #15
    82cc:	18fb      	adds	r3, r7, r3
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	2b03      	cmp	r3, #3
    82d2:	d9d6      	bls.n	8282 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
    82d4:	2300      	movs	r3, #0
}
    82d6:	0018      	movs	r0, r3
    82d8:	46bd      	mov	sp, r7
    82da:	b004      	add	sp, #16
    82dc:	bd80      	pop	{r7, pc}
    82de:	46c0      	nop			; (mov r8, r8)
    82e0:	20000218 	.word	0x20000218

000082e4 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
    82e4:	b580      	push	{r7, lr}
    82e6:	b086      	sub	sp, #24
    82e8:	af00      	add	r7, sp, #0
    82ea:	603a      	str	r2, [r7, #0]
    82ec:	1dfb      	adds	r3, r7, #7
    82ee:	1c02      	adds	r2, r0, #0
    82f0:	701a      	strb	r2, [r3, #0]
    82f2:	1dbb      	adds	r3, r7, #6
    82f4:	1c0a      	adds	r2, r1, #0
    82f6:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    82f8:	2314      	movs	r3, #20
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	2200      	movs	r2, #0
    82fe:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    8300:	4b69      	ldr	r3, [pc, #420]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8302:	685b      	ldr	r3, [r3, #4]
    8304:	1dfa      	adds	r2, r7, #7
    8306:	7812      	ldrb	r2, [r2, #0]
    8308:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
    830a:	189b      	adds	r3, r3, r2
    830c:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    830e:	693b      	ldr	r3, [r7, #16]
    8310:	781a      	ldrb	r2, [r3, #0]
    8312:	2308      	movs	r3, #8
    8314:	18fb      	adds	r3, r7, r3
    8316:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    8318:	1dfb      	adds	r3, r7, #7
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	009b      	lsls	r3, r3, #2
    831e:	b2da      	uxtb	r2, r3
    8320:	2308      	movs	r3, #8
    8322:	18fb      	adds	r3, r7, r3
    8324:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
    8326:	693b      	ldr	r3, [r7, #16]
    8328:	3340      	adds	r3, #64	; 0x40
    832a:	781a      	ldrb	r2, [r3, #0]
    832c:	2308      	movs	r3, #8
    832e:	18fb      	adds	r3, r7, r3
    8330:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    8332:	1dfb      	adds	r3, r7, #7
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	009b      	lsls	r3, r3, #2
    8338:	b2db      	uxtb	r3, r3
    833a:	3301      	adds	r3, #1
    833c:	b2da      	uxtb	r2, r3
    833e:	2308      	movs	r3, #8
    8340:	18fb      	adds	r3, r7, r3
    8342:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
    8344:	2317      	movs	r3, #23
    8346:	18fb      	adds	r3, r7, r3
    8348:	2200      	movs	r2, #0
    834a:	701a      	strb	r2, [r3, #0]
    834c:	e03a      	b.n	83c4 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    834e:	2316      	movs	r3, #22
    8350:	18fb      	adds	r3, r7, r3
    8352:	2202      	movs	r2, #2
    8354:	701a      	strb	r2, [r3, #0]
    8356:	e029      	b.n	83ac <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    8358:	2317      	movs	r3, #23
    835a:	18fb      	adds	r3, r7, r3
    835c:	781a      	ldrb	r2, [r3, #0]
    835e:	2308      	movs	r3, #8
    8360:	18fb      	adds	r3, r7, r3
    8362:	0052      	lsls	r2, r2, #1
    8364:	5cd2      	ldrb	r2, [r2, r3]
    8366:	2316      	movs	r3, #22
    8368:	18fb      	adds	r3, r7, r3
    836a:	781b      	ldrb	r3, [r3, #0]
    836c:	019b      	lsls	r3, r3, #6
    836e:	6939      	ldr	r1, [r7, #16]
    8370:	18cb      	adds	r3, r1, r3
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	429a      	cmp	r2, r3
    8376:	d112      	bne.n	839e <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
    8378:	2317      	movs	r3, #23
    837a:	18fb      	adds	r3, r7, r3
    837c:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    837e:	1dfa      	adds	r2, r7, #7
    8380:	7812      	ldrb	r2, [r2, #0]
    8382:	0092      	lsls	r2, r2, #2
    8384:	b2d1      	uxtb	r1, r2
    8386:	2216      	movs	r2, #22
    8388:	18ba      	adds	r2, r7, r2
    838a:	7812      	ldrb	r2, [r2, #0]
    838c:	188a      	adds	r2, r1, r2
    838e:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
    8390:	2208      	movs	r2, #8
    8392:	18ba      	adds	r2, r7, r2
    8394:	005b      	lsls	r3, r3, #1
    8396:	18d3      	adds	r3, r2, r3
    8398:	3301      	adds	r3, #1
    839a:	1c0a      	adds	r2, r1, #0
    839c:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    839e:	2316      	movs	r3, #22
    83a0:	18fb      	adds	r3, r7, r3
    83a2:	781a      	ldrb	r2, [r3, #0]
    83a4:	2316      	movs	r3, #22
    83a6:	18fb      	adds	r3, r7, r3
    83a8:	3201      	adds	r2, #1
    83aa:	701a      	strb	r2, [r3, #0]
    83ac:	2316      	movs	r3, #22
    83ae:	18fb      	adds	r3, r7, r3
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	2b03      	cmp	r3, #3
    83b4:	d9d0      	bls.n	8358 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
    83b6:	2317      	movs	r3, #23
    83b8:	18fb      	adds	r3, r7, r3
    83ba:	781a      	ldrb	r2, [r3, #0]
    83bc:	2317      	movs	r3, #23
    83be:	18fb      	adds	r3, r7, r3
    83c0:	3201      	adds	r2, #1
    83c2:	701a      	strb	r2, [r3, #0]
    83c4:	2317      	movs	r3, #23
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	2b01      	cmp	r3, #1
    83cc:	d9bf      	bls.n	834e <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
    83ce:	2315      	movs	r3, #21
    83d0:	18fb      	adds	r3, r7, r3
    83d2:	2200      	movs	r2, #0
    83d4:	701a      	strb	r2, [r3, #0]
    83d6:	e051      	b.n	847c <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    83d8:	4b33      	ldr	r3, [pc, #204]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    83da:	2287      	movs	r2, #135	; 0x87
    83dc:	5c9b      	ldrb	r3, [r3, r2]
    83de:	009a      	lsls	r2, r3, #2
    83e0:	2315      	movs	r3, #21
    83e2:	18fb      	adds	r3, r7, r3
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
    83e8:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    83ea:	4b30      	ldr	r3, [pc, #192]	; (84ac <_eeprom_emulator_move_data_to_spare+0x1c8>)
    83ec:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
    83ee:	2315      	movs	r3, #21
    83f0:	18fb      	adds	r3, r7, r3
    83f2:	781a      	ldrb	r2, [r3, #0]
    83f4:	2308      	movs	r3, #8
    83f6:	18fb      	adds	r3, r7, r3
    83f8:	0052      	lsls	r2, r2, #1
    83fa:	5cd3      	ldrb	r3, [r2, r3]
    83fc:	1dba      	adds	r2, r7, #6
    83fe:	7812      	ldrb	r2, [r2, #0]
    8400:	429a      	cmp	r2, r3
    8402:	d10d      	bne.n	8420 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
    8404:	4b28      	ldr	r3, [pc, #160]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8406:	1dba      	adds	r2, r7, #6
    8408:	2188      	movs	r1, #136	; 0x88
    840a:	7812      	ldrb	r2, [r2, #0]
    840c:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    840e:	4b26      	ldr	r3, [pc, #152]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8410:	228c      	movs	r2, #140	; 0x8c
    8412:	6839      	ldr	r1, [r7, #0]
    8414:	189b      	adds	r3, r3, r2
    8416:	223c      	movs	r2, #60	; 0x3c
    8418:	0018      	movs	r0, r3
    841a:	4b25      	ldr	r3, [pc, #148]	; (84b0 <_eeprom_emulator_move_data_to_spare+0x1cc>)
    841c:	4798      	blx	r3
    841e:	e00e      	b.n	843e <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
    8420:	2315      	movs	r3, #21
    8422:	18fb      	adds	r3, r7, r3
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	2208      	movs	r2, #8
    8428:	18ba      	adds	r2, r7, r2
    842a:	005b      	lsls	r3, r3, #1
    842c:	18d3      	adds	r3, r2, r3
    842e:	3301      	adds	r3, #1
    8430:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
    8432:	b29b      	uxth	r3, r3
    8434:	4a1f      	ldr	r2, [pc, #124]	; (84b4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8436:	0011      	movs	r1, r2
    8438:	0018      	movs	r0, r3
    843a:	4b1f      	ldr	r3, [pc, #124]	; (84b8 <_eeprom_emulator_move_data_to_spare+0x1d4>)
    843c:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    843e:	68fb      	ldr	r3, [r7, #12]
    8440:	b29b      	uxth	r3, r3
    8442:	4a1c      	ldr	r2, [pc, #112]	; (84b4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8444:	0011      	movs	r1, r2
    8446:	0018      	movs	r0, r3
    8448:	4b1c      	ldr	r3, [pc, #112]	; (84bc <_eeprom_emulator_move_data_to_spare+0x1d8>)
    844a:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    844c:	2315      	movs	r3, #21
    844e:	18fb      	adds	r3, r7, r3
    8450:	781a      	ldrb	r2, [r3, #0]
    8452:	2308      	movs	r3, #8
    8454:	18fb      	adds	r3, r7, r3
    8456:	0052      	lsls	r2, r2, #1
    8458:	5cd3      	ldrb	r3, [r2, r3]
    845a:	0019      	movs	r1, r3
    845c:	68fb      	ldr	r3, [r7, #12]
    845e:	b2da      	uxtb	r2, r3
    8460:	4b11      	ldr	r3, [pc, #68]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8462:	185b      	adds	r3, r3, r1
    8464:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
    8466:	4b10      	ldr	r3, [pc, #64]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8468:	22c8      	movs	r2, #200	; 0xc8
    846a:	2101      	movs	r1, #1
    846c:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
    846e:	2315      	movs	r3, #21
    8470:	18fb      	adds	r3, r7, r3
    8472:	781a      	ldrb	r2, [r3, #0]
    8474:	2315      	movs	r3, #21
    8476:	18fb      	adds	r3, r7, r3
    8478:	3201      	adds	r2, #1
    847a:	701a      	strb	r2, [r3, #0]
    847c:	2315      	movs	r3, #21
    847e:	18fb      	adds	r3, r7, r3
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	2b01      	cmp	r3, #1
    8484:	d9a8      	bls.n	83d8 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
    8486:	1dfb      	adds	r3, r7, #7
    8488:	781b      	ldrb	r3, [r3, #0]
    848a:	0018      	movs	r0, r3
    848c:	4b0c      	ldr	r3, [pc, #48]	; (84c0 <_eeprom_emulator_move_data_to_spare+0x1dc>)
    848e:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
    8490:	4b05      	ldr	r3, [pc, #20]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8492:	1dfa      	adds	r2, r7, #7
    8494:	2187      	movs	r1, #135	; 0x87
    8496:	7812      	ldrb	r2, [r2, #0]
    8498:	545a      	strb	r2, [r3, r1]

	return error_code;
    849a:	2314      	movs	r3, #20
    849c:	18fb      	adds	r3, r7, r3
    849e:	781b      	ldrb	r3, [r3, #0]
}
    84a0:	0018      	movs	r0, r3
    84a2:	46bd      	mov	sp, r7
    84a4:	b006      	add	sp, #24
    84a6:	bd80      	pop	{r7, pc}
    84a8:	20000218 	.word	0x20000218
    84ac:	000088e1 	.word	0x000088e1
    84b0:	00016fe5 	.word	0x00016fe5
    84b4:	200002a0 	.word	0x200002a0
    84b8:	00007fc5 	.word	0x00007fc5
    84bc:	00007f29 	.word	0x00007f29
    84c0:	00007ee1 	.word	0x00007ee1

000084c4 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
    84c4:	b590      	push	{r4, r7, lr}
    84c6:	b095      	sub	sp, #84	; 0x54
    84c8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    84ca:	2340      	movs	r3, #64	; 0x40
    84cc:	18fb      	adds	r3, r7, r3
    84ce:	4a29      	ldr	r2, [pc, #164]	; (8574 <_eeprom_emulator_create_master_page+0xb0>)
    84d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    84d2:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
    84d4:	003b      	movs	r3, r7
    84d6:	2240      	movs	r2, #64	; 0x40
    84d8:	21ff      	movs	r1, #255	; 0xff
    84da:	0018      	movs	r0, r3
    84dc:	4b26      	ldr	r3, [pc, #152]	; (8578 <_eeprom_emulator_create_master_page+0xb4>)
    84de:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    84e0:	234f      	movs	r3, #79	; 0x4f
    84e2:	18fb      	adds	r3, r7, r3
    84e4:	2200      	movs	r2, #0
    84e6:	701a      	strb	r2, [r3, #0]
    84e8:	e013      	b.n	8512 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
    84ea:	234f      	movs	r3, #79	; 0x4f
    84ec:	18fb      	adds	r3, r7, r3
    84ee:	781a      	ldrb	r2, [r3, #0]
    84f0:	234f      	movs	r3, #79	; 0x4f
    84f2:	18fb      	adds	r3, r7, r3
    84f4:	7819      	ldrb	r1, [r3, #0]
    84f6:	2340      	movs	r3, #64	; 0x40
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	0089      	lsls	r1, r1, #2
    84fc:	58c9      	ldr	r1, [r1, r3]
    84fe:	003b      	movs	r3, r7
    8500:	0092      	lsls	r2, r2, #2
    8502:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    8504:	234f      	movs	r3, #79	; 0x4f
    8506:	18fb      	adds	r3, r7, r3
    8508:	781a      	ldrb	r2, [r3, #0]
    850a:	234f      	movs	r3, #79	; 0x4f
    850c:	18fb      	adds	r3, r7, r3
    850e:	3201      	adds	r2, #1
    8510:	701a      	strb	r2, [r3, #0]
    8512:	234f      	movs	r3, #79	; 0x4f
    8514:	18fb      	adds	r3, r7, r3
    8516:	781b      	ldrb	r3, [r3, #0]
    8518:	2b02      	cmp	r3, #2
    851a:	d9e6      	bls.n	84ea <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    851c:	003b      	movs	r3, r7
    851e:	2201      	movs	r2, #1
    8520:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    8522:	003b      	movs	r3, r7
    8524:	2201      	movs	r2, #1
    8526:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    8528:	003b      	movs	r3, r7
    852a:	2200      	movs	r2, #0
    852c:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
    852e:	003b      	movs	r3, r7
    8530:	2200      	movs	r2, #0
    8532:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    8534:	4b11      	ldr	r3, [pc, #68]	; (857c <_eeprom_emulator_create_master_page+0xb8>)
    8536:	891b      	ldrh	r3, [r3, #8]
    8538:	3b01      	subs	r3, #1
    853a:	2b00      	cmp	r3, #0
    853c:	da00      	bge.n	8540 <_eeprom_emulator_create_master_page+0x7c>
    853e:	3303      	adds	r3, #3
    8540:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
    8542:	b2db      	uxtb	r3, r3
    8544:	0018      	movs	r0, r3
    8546:	4b0e      	ldr	r3, [pc, #56]	; (8580 <_eeprom_emulator_create_master_page+0xbc>)
    8548:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    854a:	4b0c      	ldr	r3, [pc, #48]	; (857c <_eeprom_emulator_create_master_page+0xb8>)
    854c:	891b      	ldrh	r3, [r3, #8]
    854e:	3b01      	subs	r3, #1
    8550:	b29b      	uxth	r3, r3
    8552:	003a      	movs	r2, r7
    8554:	0011      	movs	r1, r2
    8556:	0018      	movs	r0, r3
    8558:	4b0a      	ldr	r3, [pc, #40]	; (8584 <_eeprom_emulator_create_master_page+0xc0>)
    855a:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    855c:	4b07      	ldr	r3, [pc, #28]	; (857c <_eeprom_emulator_create_master_page+0xb8>)
    855e:	891b      	ldrh	r3, [r3, #8]
    8560:	3b01      	subs	r3, #1
    8562:	b29b      	uxth	r3, r3
    8564:	0018      	movs	r0, r3
    8566:	4b08      	ldr	r3, [pc, #32]	; (8588 <_eeprom_emulator_create_master_page+0xc4>)
    8568:	4798      	blx	r3
}
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	46bd      	mov	sp, r7
    856e:	b015      	add	sp, #84	; 0x54
    8570:	bd90      	pop	{r4, r7, pc}
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	00017324 	.word	0x00017324
    8578:	00016ff7 	.word	0x00016ff7
    857c:	20000218 	.word	0x20000218
    8580:	00007ee1 	.word	0x00007ee1
    8584:	00007f29 	.word	0x00007f29
    8588:	00007f79 	.word	0x00007f79

0000858c <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
    858c:	b590      	push	{r4, r7, lr}
    858e:	b095      	sub	sp, #84	; 0x54
    8590:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    8592:	2340      	movs	r3, #64	; 0x40
    8594:	18fb      	adds	r3, r7, r3
    8596:	4a22      	ldr	r2, [pc, #136]	; (8620 <_eeprom_emulator_verify_master_page+0x94>)
    8598:	ca13      	ldmia	r2!, {r0, r1, r4}
    859a:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    859c:	4b21      	ldr	r3, [pc, #132]	; (8624 <_eeprom_emulator_verify_master_page+0x98>)
    859e:	891b      	ldrh	r3, [r3, #8]
    85a0:	3b01      	subs	r3, #1
    85a2:	b29b      	uxth	r3, r3
    85a4:	003a      	movs	r2, r7
    85a6:	0011      	movs	r1, r2
    85a8:	0018      	movs	r0, r3
    85aa:	4b1f      	ldr	r3, [pc, #124]	; (8628 <_eeprom_emulator_verify_master_page+0x9c>)
    85ac:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    85ae:	234f      	movs	r3, #79	; 0x4f
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	2200      	movs	r2, #0
    85b4:	701a      	strb	r2, [r3, #0]
    85b6:	e017      	b.n	85e8 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
    85b8:	234f      	movs	r3, #79	; 0x4f
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	781a      	ldrb	r2, [r3, #0]
    85be:	003b      	movs	r3, r7
    85c0:	0092      	lsls	r2, r2, #2
    85c2:	58d2      	ldr	r2, [r2, r3]
    85c4:	234f      	movs	r3, #79	; 0x4f
    85c6:	18fb      	adds	r3, r7, r3
    85c8:	7819      	ldrb	r1, [r3, #0]
    85ca:	2340      	movs	r3, #64	; 0x40
    85cc:	18fb      	adds	r3, r7, r3
    85ce:	0089      	lsls	r1, r1, #2
    85d0:	58cb      	ldr	r3, [r1, r3]
    85d2:	429a      	cmp	r2, r3
    85d4:	d001      	beq.n	85da <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
    85d6:	231a      	movs	r3, #26
    85d8:	e01e      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    85da:	234f      	movs	r3, #79	; 0x4f
    85dc:	18fb      	adds	r3, r7, r3
    85de:	781a      	ldrb	r2, [r3, #0]
    85e0:	234f      	movs	r3, #79	; 0x4f
    85e2:	18fb      	adds	r3, r7, r3
    85e4:	3201      	adds	r2, #1
    85e6:	701a      	strb	r2, [r3, #0]
    85e8:	234f      	movs	r3, #79	; 0x4f
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	2b02      	cmp	r3, #2
    85f0:	d9e2      	bls.n	85b8 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    85f2:	003b      	movs	r3, r7
    85f4:	7bdb      	ldrb	r3, [r3, #15]
    85f6:	2b01      	cmp	r3, #1
    85f8:	d001      	beq.n	85fe <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
    85fa:	2310      	movs	r3, #16
    85fc:	e00c      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    85fe:	003b      	movs	r3, r7
    8600:	7b1b      	ldrb	r3, [r3, #12]
    8602:	2b01      	cmp	r3, #1
    8604:	d001      	beq.n	860a <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
    8606:	2310      	movs	r3, #16
    8608:	e006      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    860a:	003b      	movs	r3, r7
    860c:	7b5b      	ldrb	r3, [r3, #13]
    860e:	2b00      	cmp	r3, #0
    8610:	d001      	beq.n	8616 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
    8612:	2310      	movs	r3, #16
    8614:	e000      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
    8616:	2300      	movs	r3, #0
}
    8618:	0018      	movs	r0, r3
    861a:	46bd      	mov	sp, r7
    861c:	b015      	add	sp, #84	; 0x54
    861e:	bd90      	pop	{r4, r7, pc}
    8620:	00017324 	.word	0x00017324
    8624:	20000218 	.word	0x20000218
    8628:	00007fc5 	.word	0x00007fc5

0000862c <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    862c:	b590      	push	{r4, r7, lr}
    862e:	b087      	sub	sp, #28
    8630:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    8632:	2317      	movs	r3, #23
    8634:	18fb      	adds	r3, r7, r3
    8636:	2200      	movs	r2, #0
    8638:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
    863a:	2310      	movs	r3, #16
    863c:	18fb      	adds	r3, r7, r3
    863e:	0018      	movs	r0, r3
    8640:	4b2e      	ldr	r3, [pc, #184]	; (86fc <eeprom_emulator_init+0xd0>)
    8642:	4798      	blx	r3
	config.manual_page_write = true;
    8644:	2310      	movs	r3, #16
    8646:	18fb      	adds	r3, r7, r3
    8648:	2201      	movs	r2, #1
    864a:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    864c:	2317      	movs	r3, #23
    864e:	18fc      	adds	r4, r7, r3
    8650:	2310      	movs	r3, #16
    8652:	18fb      	adds	r3, r7, r3
    8654:	0018      	movs	r0, r3
    8656:	4b2a      	ldr	r3, [pc, #168]	; (8700 <eeprom_emulator_init+0xd4>)
    8658:	4798      	blx	r3
    865a:	0003      	movs	r3, r0
    865c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    865e:	2317      	movs	r3, #23
    8660:	18fb      	adds	r3, r7, r3
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	2b05      	cmp	r3, #5
    8666:	d0f1      	beq.n	864c <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    8668:	1d3b      	adds	r3, r7, #4
    866a:	0018      	movs	r0, r3
    866c:	4b25      	ldr	r3, [pc, #148]	; (8704 <eeprom_emulator_init+0xd8>)
    866e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    8670:	1d3b      	adds	r3, r7, #4
    8672:	685b      	ldr	r3, [r3, #4]
    8674:	2b0b      	cmp	r3, #11
    8676:	d801      	bhi.n	867c <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
    8678:	2316      	movs	r3, #22
    867a:	e03b      	b.n	86f4 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
    867c:	1d3b      	adds	r3, r7, #4
    867e:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
    8680:	b29a      	uxth	r2, r3
    8682:	4b21      	ldr	r3, [pc, #132]	; (8708 <eeprom_emulator_init+0xdc>)
    8684:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    8686:	1d3b      	adds	r3, r7, #4
    8688:	685b      	ldr	r3, [r3, #4]
    868a:	3b08      	subs	r3, #8
    868c:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
    868e:	b2da      	uxtb	r2, r3
    8690:	4b1d      	ldr	r3, [pc, #116]	; (8708 <eeprom_emulator_init+0xdc>)
    8692:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
    8694:	4b1c      	ldr	r3, [pc, #112]	; (8708 <eeprom_emulator_init+0xdc>)
    8696:	891b      	ldrh	r3, [r3, #8]
    8698:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
    869a:	0013      	movs	r3, r2
    869c:	069b      	lsls	r3, r3, #26
    869e:	1a9b      	subs	r3, r3, r2
    86a0:	019b      	lsls	r3, r3, #6
    86a2:	2280      	movs	r2, #128	; 0x80
    86a4:	02d2      	lsls	r2, r2, #11
    86a6:	4694      	mov	ip, r2
    86a8:	4463      	add	r3, ip
    86aa:	001a      	movs	r2, r3
	_eeprom_instance.flash =
    86ac:	4b16      	ldr	r3, [pc, #88]	; (8708 <eeprom_emulator_init+0xdc>)
    86ae:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    86b0:	4b15      	ldr	r3, [pc, #84]	; (8708 <eeprom_emulator_init+0xdc>)
    86b2:	22c8      	movs	r2, #200	; 0xc8
    86b4:	2100      	movs	r1, #0
    86b6:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    86b8:	4b14      	ldr	r3, [pc, #80]	; (870c <eeprom_emulator_init+0xe0>)
    86ba:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    86bc:	4b12      	ldr	r3, [pc, #72]	; (8708 <eeprom_emulator_init+0xdc>)
    86be:	2287      	movs	r2, #135	; 0x87
    86c0:	5c9b      	ldrb	r3, [r3, r2]
    86c2:	2b3f      	cmp	r3, #63	; 0x3f
    86c4:	d101      	bne.n	86ca <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
    86c6:	231a      	movs	r3, #26
    86c8:	e014      	b.n	86f4 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
    86ca:	2317      	movs	r3, #23
    86cc:	18fc      	adds	r4, r7, r3
    86ce:	4b10      	ldr	r3, [pc, #64]	; (8710 <eeprom_emulator_init+0xe4>)
    86d0:	4798      	blx	r3
    86d2:	0003      	movs	r3, r0
    86d4:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
    86d6:	2317      	movs	r3, #23
    86d8:	18fb      	adds	r3, r7, r3
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	2b00      	cmp	r3, #0
    86de:	d003      	beq.n	86e8 <eeprom_emulator_init+0xbc>
		return error_code;
    86e0:	2317      	movs	r3, #23
    86e2:	18fb      	adds	r3, r7, r3
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	e005      	b.n	86f4 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
    86e8:	4b07      	ldr	r3, [pc, #28]	; (8708 <eeprom_emulator_init+0xdc>)
    86ea:	2201      	movs	r2, #1
    86ec:	701a      	strb	r2, [r3, #0]

	return error_code;
    86ee:	2317      	movs	r3, #23
    86f0:	18fb      	adds	r3, r7, r3
    86f2:	781b      	ldrb	r3, [r3, #0]
}
    86f4:	0018      	movs	r0, r3
    86f6:	46bd      	mov	sp, r7
    86f8:	b007      	add	sp, #28
    86fa:	bd90      	pop	{r4, r7, pc}
    86fc:	00007ea5 	.word	0x00007ea5
    8700:	00002ad5 	.word	0x00002ad5
    8704:	00002fa1 	.word	0x00002fa1
    8708:	20000218 	.word	0x20000218
    870c:	00008101 	.word	0x00008101
    8710:	0000858d 	.word	0x0000858d

00008714 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    8714:	b580      	push	{r7, lr}
    8716:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
    8718:	4b04      	ldr	r3, [pc, #16]	; (872c <eeprom_emulator_erase_memory+0x18>)
    871a:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
    871c:	4b04      	ldr	r3, [pc, #16]	; (8730 <eeprom_emulator_erase_memory+0x1c>)
    871e:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    8720:	4b04      	ldr	r3, [pc, #16]	; (8734 <eeprom_emulator_erase_memory+0x20>)
    8722:	4798      	blx	r3
}
    8724:	46c0      	nop			; (mov r8, r8)
    8726:	46bd      	mov	sp, r7
    8728:	bd80      	pop	{r7, pc}
    872a:	46c0      	nop			; (mov r8, r8)
    872c:	00008015 	.word	0x00008015
    8730:	000084c5 	.word	0x000084c5
    8734:	00008101 	.word	0x00008101

00008738 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
    8738:	b590      	push	{r4, r7, lr}
    873a:	b085      	sub	sp, #20
    873c:	af00      	add	r7, sp, #0
    873e:	0002      	movs	r2, r0
    8740:	6039      	str	r1, [r7, #0]
    8742:	1dfb      	adds	r3, r7, #7
    8744:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    8746:	4b38      	ldr	r3, [pc, #224]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	2201      	movs	r2, #1
    874c:	4053      	eors	r3, r2
    874e:	b2db      	uxtb	r3, r3
    8750:	2b00      	cmp	r3, #0
    8752:	d001      	beq.n	8758 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    8754:	231f      	movs	r3, #31
    8756:	e063      	b.n	8820 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    8758:	4b33      	ldr	r3, [pc, #204]	; (8828 <eeprom_emulator_write_page+0xf0>)
    875a:	7a9b      	ldrb	r3, [r3, #10]
    875c:	1dfa      	adds	r2, r7, #7
    875e:	7812      	ldrb	r2, [r2, #0]
    8760:	429a      	cmp	r2, r3
    8762:	d301      	bcc.n	8768 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    8764:	2318      	movs	r3, #24
    8766:	e05b      	b.n	8820 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
    8768:	4b2f      	ldr	r3, [pc, #188]	; (8828 <eeprom_emulator_write_page+0xf0>)
    876a:	22c8      	movs	r2, #200	; 0xc8
    876c:	5c9b      	ldrb	r3, [r3, r2]
    876e:	2b00      	cmp	r3, #0
    8770:	d008      	beq.n	8784 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    8772:	4b2d      	ldr	r3, [pc, #180]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8774:	2288      	movs	r2, #136	; 0x88
    8776:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    8778:	1dfa      	adds	r2, r7, #7
    877a:	7812      	ldrb	r2, [r2, #0]
    877c:	429a      	cmp	r2, r3
    877e:	d001      	beq.n	8784 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    8780:	4b2a      	ldr	r3, [pc, #168]	; (882c <eeprom_emulator_write_page+0xf4>)
    8782:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
    8784:	230e      	movs	r3, #14
    8786:	18fb      	adds	r3, r7, r3
    8788:	2200      	movs	r2, #0
    878a:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    878c:	1dfb      	adds	r3, r7, #7
    878e:	781b      	ldrb	r3, [r3, #0]
    8790:	4a25      	ldr	r2, [pc, #148]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8792:	18d3      	adds	r3, r2, r3
    8794:	7adb      	ldrb	r3, [r3, #11]
    8796:	220f      	movs	r2, #15
    8798:	18bc      	adds	r4, r7, r2
    879a:	220e      	movs	r2, #14
    879c:	18ba      	adds	r2, r7, r2
    879e:	0011      	movs	r1, r2
    87a0:	0018      	movs	r0, r3
    87a2:	4b23      	ldr	r3, [pc, #140]	; (8830 <eeprom_emulator_write_page+0xf8>)
    87a4:	4798      	blx	r3
    87a6:	0003      	movs	r3, r0
    87a8:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
    87aa:	230f      	movs	r3, #15
    87ac:	18fb      	adds	r3, r7, r3
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	2201      	movs	r2, #1
    87b2:	4053      	eors	r3, r2
    87b4:	b2db      	uxtb	r3, r3
    87b6:	2b00      	cmp	r3, #0
    87b8:	d00e      	beq.n	87d8 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
    87ba:	1dfb      	adds	r3, r7, #7
    87bc:	781b      	ldrb	r3, [r3, #0]
    87be:	4a1a      	ldr	r2, [pc, #104]	; (8828 <eeprom_emulator_write_page+0xf0>)
    87c0:	18d3      	adds	r3, r2, r3
    87c2:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
    87c4:	089b      	lsrs	r3, r3, #2
    87c6:	b2d8      	uxtb	r0, r3
    87c8:	683a      	ldr	r2, [r7, #0]
    87ca:	1dfb      	adds	r3, r7, #7
    87cc:	781b      	ldrb	r3, [r3, #0]
    87ce:	0019      	movs	r1, r3
    87d0:	4b18      	ldr	r3, [pc, #96]	; (8834 <eeprom_emulator_write_page+0xfc>)
    87d2:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
    87d4:	2300      	movs	r3, #0
    87d6:	e023      	b.n	8820 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
    87d8:	4b13      	ldr	r3, [pc, #76]	; (8828 <eeprom_emulator_write_page+0xf0>)
    87da:	1dfa      	adds	r2, r7, #7
    87dc:	2188      	movs	r1, #136	; 0x88
    87de:	7812      	ldrb	r2, [r2, #0]
    87e0:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
    87e2:	4b11      	ldr	r3, [pc, #68]	; (8828 <eeprom_emulator_write_page+0xf0>)
    87e4:	228c      	movs	r2, #140	; 0x8c
    87e6:	6839      	ldr	r1, [r7, #0]
    87e8:	189b      	adds	r3, r3, r2
    87ea:	223c      	movs	r2, #60	; 0x3c
    87ec:	0018      	movs	r0, r3
    87ee:	4b12      	ldr	r3, [pc, #72]	; (8838 <eeprom_emulator_write_page+0x100>)
    87f0:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    87f2:	230e      	movs	r3, #14
    87f4:	18fb      	adds	r3, r7, r3
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	b29b      	uxth	r3, r3
    87fa:	4a10      	ldr	r2, [pc, #64]	; (883c <eeprom_emulator_write_page+0x104>)
    87fc:	0011      	movs	r1, r2
    87fe:	0018      	movs	r0, r3
    8800:	4b0f      	ldr	r3, [pc, #60]	; (8840 <eeprom_emulator_write_page+0x108>)
    8802:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
    8804:	1dfb      	adds	r3, r7, #7
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	220e      	movs	r2, #14
    880a:	18ba      	adds	r2, r7, r2
    880c:	7811      	ldrb	r1, [r2, #0]
    880e:	4a06      	ldr	r2, [pc, #24]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8810:	18d3      	adds	r3, r2, r3
    8812:	1c0a      	adds	r2, r1, #0
    8814:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
    8816:	4b04      	ldr	r3, [pc, #16]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8818:	22c8      	movs	r2, #200	; 0xc8
    881a:	2101      	movs	r1, #1
    881c:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
    881e:	2300      	movs	r3, #0
}
    8820:	0018      	movs	r0, r3
    8822:	46bd      	mov	sp, r7
    8824:	b005      	add	sp, #20
    8826:	bd90      	pop	{r4, r7, pc}
    8828:	20000218 	.word	0x20000218
    882c:	000088e1 	.word	0x000088e1
    8830:	0000824d 	.word	0x0000824d
    8834:	000082e5 	.word	0x000082e5
    8838:	00016fe5 	.word	0x00016fe5
    883c:	200002a0 	.word	0x200002a0
    8840:	00007f29 	.word	0x00007f29

00008844 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    8844:	b580      	push	{r7, lr}
    8846:	b092      	sub	sp, #72	; 0x48
    8848:	af00      	add	r7, sp, #0
    884a:	0002      	movs	r2, r0
    884c:	6039      	str	r1, [r7, #0]
    884e:	1dfb      	adds	r3, r7, #7
    8850:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    8852:	4b20      	ldr	r3, [pc, #128]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8854:	781b      	ldrb	r3, [r3, #0]
    8856:	2201      	movs	r2, #1
    8858:	4053      	eors	r3, r2
    885a:	b2db      	uxtb	r3, r3
    885c:	2b00      	cmp	r3, #0
    885e:	d001      	beq.n	8864 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    8860:	231f      	movs	r3, #31
    8862:	e033      	b.n	88cc <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    8864:	4b1b      	ldr	r3, [pc, #108]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8866:	7a9b      	ldrb	r3, [r3, #10]
    8868:	1dfa      	adds	r2, r7, #7
    886a:	7812      	ldrb	r2, [r2, #0]
    886c:	429a      	cmp	r2, r3
    886e:	d301      	bcc.n	8874 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    8870:	2318      	movs	r3, #24
    8872:	e02b      	b.n	88cc <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    8874:	4b17      	ldr	r3, [pc, #92]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8876:	22c8      	movs	r2, #200	; 0xc8
    8878:	5c9b      	ldrb	r3, [r3, r2]
    887a:	2b00      	cmp	r3, #0
    887c:	d010      	beq.n	88a0 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    887e:	4b15      	ldr	r3, [pc, #84]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8880:	2288      	movs	r2, #136	; 0x88
    8882:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    8884:	1dfa      	adds	r2, r7, #7
    8886:	7812      	ldrb	r2, [r2, #0]
    8888:	429a      	cmp	r2, r3
    888a:	d109      	bne.n	88a0 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    888c:	6839      	ldr	r1, [r7, #0]
    888e:	4b11      	ldr	r3, [pc, #68]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8890:	228c      	movs	r2, #140	; 0x8c
    8892:	0008      	movs	r0, r1
    8894:	189b      	adds	r3, r3, r2
    8896:	223c      	movs	r2, #60	; 0x3c
    8898:	0019      	movs	r1, r3
    889a:	4b0f      	ldr	r3, [pc, #60]	; (88d8 <eeprom_emulator_read_page+0x94>)
    889c:	4798      	blx	r3
    889e:	e014      	b.n	88ca <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
    88a0:	1dfb      	adds	r3, r7, #7
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	4a0b      	ldr	r2, [pc, #44]	; (88d4 <eeprom_emulator_read_page+0x90>)
    88a6:	18d3      	adds	r3, r2, r3
    88a8:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
    88aa:	b29b      	uxth	r3, r3
    88ac:	2208      	movs	r2, #8
    88ae:	18ba      	adds	r2, r7, r2
    88b0:	0011      	movs	r1, r2
    88b2:	0018      	movs	r0, r3
    88b4:	4b09      	ldr	r3, [pc, #36]	; (88dc <eeprom_emulator_read_page+0x98>)
    88b6:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    88b8:	683a      	ldr	r2, [r7, #0]
    88ba:	2308      	movs	r3, #8
    88bc:	18fb      	adds	r3, r7, r3
    88be:	0010      	movs	r0, r2
    88c0:	3304      	adds	r3, #4
    88c2:	223c      	movs	r2, #60	; 0x3c
    88c4:	0019      	movs	r1, r3
    88c6:	4b04      	ldr	r3, [pc, #16]	; (88d8 <eeprom_emulator_read_page+0x94>)
    88c8:	4798      	blx	r3
	}

	return STATUS_OK;
    88ca:	2300      	movs	r3, #0
}
    88cc:	0018      	movs	r0, r3
    88ce:	46bd      	mov	sp, r7
    88d0:	b012      	add	sp, #72	; 0x48
    88d2:	bd80      	pop	{r7, pc}
    88d4:	20000218 	.word	0x20000218
    88d8:	00016fe5 	.word	0x00016fe5
    88dc:	00007fc5 	.word	0x00007fc5

000088e0 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b082      	sub	sp, #8
    88e4:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    88e6:	1dfb      	adds	r3, r7, #7
    88e8:	2200      	movs	r2, #0
    88ea:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    88ec:	4b10      	ldr	r3, [pc, #64]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    88ee:	22c8      	movs	r2, #200	; 0xc8
    88f0:	5c9b      	ldrb	r3, [r3, r2]
    88f2:	2201      	movs	r2, #1
    88f4:	4053      	eors	r3, r2
    88f6:	b2db      	uxtb	r3, r3
    88f8:	2b00      	cmp	r3, #0
    88fa:	d001      	beq.n	8900 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
    88fc:	2300      	movs	r3, #0
    88fe:	e013      	b.n	8928 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    8900:	1dbb      	adds	r3, r7, #6
    8902:	4a0b      	ldr	r2, [pc, #44]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    8904:	2188      	movs	r1, #136	; 0x88
    8906:	5c52      	ldrb	r2, [r2, r1]
    8908:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    890a:	1dbb      	adds	r3, r7, #6
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	4a08      	ldr	r2, [pc, #32]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    8910:	18d3      	adds	r3, r2, r3
    8912:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
    8914:	b29b      	uxth	r3, r3
    8916:	0018      	movs	r0, r3
    8918:	4b06      	ldr	r3, [pc, #24]	; (8934 <eeprom_emulator_commit_page_buffer+0x54>)
    891a:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    891c:	4b04      	ldr	r3, [pc, #16]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    891e:	22c8      	movs	r2, #200	; 0xc8
    8920:	2100      	movs	r1, #0
    8922:	5499      	strb	r1, [r3, r2]

	return error_code;
    8924:	1dfb      	adds	r3, r7, #7
    8926:	781b      	ldrb	r3, [r3, #0]
}
    8928:	0018      	movs	r0, r3
    892a:	46bd      	mov	sp, r7
    892c:	b002      	add	sp, #8
    892e:	bd80      	pop	{r7, pc}
    8930:	20000218 	.word	0x20000218
    8934:	00007f79 	.word	0x00007f79

00008938 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8938:	b580      	push	{r7, lr}
    893a:	b082      	sub	sp, #8
    893c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    893e:	4b2f      	ldr	r3, [pc, #188]	; (89fc <Reset_Handler+0xc4>)
    8940:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8942:	4b2f      	ldr	r3, [pc, #188]	; (8a00 <Reset_Handler+0xc8>)
    8944:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    8946:	687a      	ldr	r2, [r7, #4]
    8948:	683b      	ldr	r3, [r7, #0]
    894a:	429a      	cmp	r2, r3
    894c:	d00c      	beq.n	8968 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    894e:	e007      	b.n	8960 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8950:	683b      	ldr	r3, [r7, #0]
    8952:	1d1a      	adds	r2, r3, #4
    8954:	603a      	str	r2, [r7, #0]
    8956:	687a      	ldr	r2, [r7, #4]
    8958:	1d11      	adds	r1, r2, #4
    895a:	6079      	str	r1, [r7, #4]
    895c:	6812      	ldr	r2, [r2, #0]
    895e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    8960:	683a      	ldr	r2, [r7, #0]
    8962:	4b28      	ldr	r3, [pc, #160]	; (8a04 <Reset_Handler+0xcc>)
    8964:	429a      	cmp	r2, r3
    8966:	d3f3      	bcc.n	8950 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8968:	4b27      	ldr	r3, [pc, #156]	; (8a08 <Reset_Handler+0xd0>)
    896a:	603b      	str	r3, [r7, #0]
    896c:	e004      	b.n	8978 <Reset_Handler+0x40>
                *pDest++ = 0;
    896e:	683b      	ldr	r3, [r7, #0]
    8970:	1d1a      	adds	r2, r3, #4
    8972:	603a      	str	r2, [r7, #0]
    8974:	2200      	movs	r2, #0
    8976:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    8978:	683a      	ldr	r2, [r7, #0]
    897a:	4b24      	ldr	r3, [pc, #144]	; (8a0c <Reset_Handler+0xd4>)
    897c:	429a      	cmp	r2, r3
    897e:	d3f6      	bcc.n	896e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8980:	4b23      	ldr	r3, [pc, #140]	; (8a10 <Reset_Handler+0xd8>)
    8982:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8984:	4b23      	ldr	r3, [pc, #140]	; (8a14 <Reset_Handler+0xdc>)
    8986:	687a      	ldr	r2, [r7, #4]
    8988:	21ff      	movs	r1, #255	; 0xff
    898a:	438a      	bics	r2, r1
    898c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    898e:	4a22      	ldr	r2, [pc, #136]	; (8a18 <Reset_Handler+0xe0>)
    8990:	2390      	movs	r3, #144	; 0x90
    8992:	005b      	lsls	r3, r3, #1
    8994:	2102      	movs	r1, #2
    8996:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8998:	4a20      	ldr	r2, [pc, #128]	; (8a1c <Reset_Handler+0xe4>)
    899a:	78d3      	ldrb	r3, [r2, #3]
    899c:	2103      	movs	r1, #3
    899e:	438b      	bics	r3, r1
    89a0:	1c19      	adds	r1, r3, #0
    89a2:	2302      	movs	r3, #2
    89a4:	430b      	orrs	r3, r1
    89a6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    89a8:	4a1c      	ldr	r2, [pc, #112]	; (8a1c <Reset_Handler+0xe4>)
    89aa:	78d3      	ldrb	r3, [r2, #3]
    89ac:	210c      	movs	r1, #12
    89ae:	438b      	bics	r3, r1
    89b0:	1c19      	adds	r1, r3, #0
    89b2:	2308      	movs	r3, #8
    89b4:	430b      	orrs	r3, r1
    89b6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    89b8:	4a19      	ldr	r2, [pc, #100]	; (8a20 <Reset_Handler+0xe8>)
    89ba:	7b93      	ldrb	r3, [r2, #14]
    89bc:	2130      	movs	r1, #48	; 0x30
    89be:	438b      	bics	r3, r1
    89c0:	1c19      	adds	r1, r3, #0
    89c2:	2320      	movs	r3, #32
    89c4:	430b      	orrs	r3, r1
    89c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    89c8:	4a15      	ldr	r2, [pc, #84]	; (8a20 <Reset_Handler+0xe8>)
    89ca:	7b93      	ldrb	r3, [r2, #14]
    89cc:	210c      	movs	r1, #12
    89ce:	438b      	bics	r3, r1
    89d0:	1c19      	adds	r1, r3, #0
    89d2:	2308      	movs	r3, #8
    89d4:	430b      	orrs	r3, r1
    89d6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    89d8:	4a11      	ldr	r2, [pc, #68]	; (8a20 <Reset_Handler+0xe8>)
    89da:	7b93      	ldrb	r3, [r2, #14]
    89dc:	2103      	movs	r1, #3
    89de:	438b      	bics	r3, r1
    89e0:	1c19      	adds	r1, r3, #0
    89e2:	2302      	movs	r3, #2
    89e4:	430b      	orrs	r3, r1
    89e6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    89e8:	4a0e      	ldr	r2, [pc, #56]	; (8a24 <Reset_Handler+0xec>)
    89ea:	6853      	ldr	r3, [r2, #4]
    89ec:	2180      	movs	r1, #128	; 0x80
    89ee:	430b      	orrs	r3, r1
    89f0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    89f2:	4b0d      	ldr	r3, [pc, #52]	; (8a28 <Reset_Handler+0xf0>)
    89f4:	4798      	blx	r3

        /* Branch to main function */
        main();
    89f6:	4b0d      	ldr	r3, [pc, #52]	; (8a2c <Reset_Handler+0xf4>)
    89f8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    89fa:	e7fe      	b.n	89fa <Reset_Handler+0xc2>
    89fc:	000179a0 	.word	0x000179a0
    8a00:	20000000 	.word	0x20000000
    8a04:	2000014c 	.word	0x2000014c
    8a08:	20000150 	.word	0x20000150
    8a0c:	2000106c 	.word	0x2000106c
    8a10:	00002000 	.word	0x00002000
    8a14:	e000ed00 	.word	0xe000ed00
    8a18:	41007000 	.word	0x41007000
    8a1c:	41005000 	.word	0x41005000
    8a20:	41004800 	.word	0x41004800
    8a24:	41004000 	.word	0x41004000
    8a28:	00016f9d 	.word	0x00016f9d
    8a2c:	00010719 	.word	0x00010719

00008a30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8a30:	b580      	push	{r7, lr}
    8a32:	af00      	add	r7, sp, #0
        while (1) {
    8a34:	e7fe      	b.n	8a34 <Dummy_Handler+0x4>
	...

00008a38 <system_pinmux_get_group_from_gpio_pin>:
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b084      	sub	sp, #16
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	0002      	movs	r2, r0
    8a40:	1dfb      	adds	r3, r7, #7
    8a42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8a44:	230f      	movs	r3, #15
    8a46:	18fb      	adds	r3, r7, r3
    8a48:	1dfa      	adds	r2, r7, #7
    8a4a:	7812      	ldrb	r2, [r2, #0]
    8a4c:	09d2      	lsrs	r2, r2, #7
    8a4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8a50:	230e      	movs	r3, #14
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	1dfa      	adds	r2, r7, #7
    8a56:	7812      	ldrb	r2, [r2, #0]
    8a58:	0952      	lsrs	r2, r2, #5
    8a5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8a5c:	4b0d      	ldr	r3, [pc, #52]	; (8a94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8a5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8a60:	230f      	movs	r3, #15
    8a62:	18fb      	adds	r3, r7, r3
    8a64:	781b      	ldrb	r3, [r3, #0]
    8a66:	2b00      	cmp	r3, #0
    8a68:	d10f      	bne.n	8a8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8a6a:	230f      	movs	r3, #15
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	781b      	ldrb	r3, [r3, #0]
    8a70:	009b      	lsls	r3, r3, #2
    8a72:	2210      	movs	r2, #16
    8a74:	4694      	mov	ip, r2
    8a76:	44bc      	add	ip, r7
    8a78:	4463      	add	r3, ip
    8a7a:	3b08      	subs	r3, #8
    8a7c:	681a      	ldr	r2, [r3, #0]
    8a7e:	230e      	movs	r3, #14
    8a80:	18fb      	adds	r3, r7, r3
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	01db      	lsls	r3, r3, #7
    8a86:	18d3      	adds	r3, r2, r3
    8a88:	e000      	b.n	8a8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8a8a:	2300      	movs	r3, #0
}
    8a8c:	0018      	movs	r0, r3
    8a8e:	46bd      	mov	sp, r7
    8a90:	b004      	add	sp, #16
    8a92:	bd80      	pop	{r7, pc}
    8a94:	41004400 	.word	0x41004400

00008a98 <adc_is_syncing>:
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b084      	sub	sp, #16
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	681b      	ldr	r3, [r3, #0]
    8aa4:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8aa6:	68fb      	ldr	r3, [r7, #12]
    8aa8:	7e5b      	ldrb	r3, [r3, #25]
    8aaa:	b2db      	uxtb	r3, r3
    8aac:	b25b      	sxtb	r3, r3
    8aae:	2b00      	cmp	r3, #0
    8ab0:	da01      	bge.n	8ab6 <adc_is_syncing+0x1e>
		return true;
    8ab2:	2301      	movs	r3, #1
    8ab4:	e000      	b.n	8ab8 <adc_is_syncing+0x20>
	return false;
    8ab6:	2300      	movs	r3, #0
}
    8ab8:	0018      	movs	r0, r3
    8aba:	46bd      	mov	sp, r7
    8abc:	b004      	add	sp, #16
    8abe:	bd80      	pop	{r7, pc}

00008ac0 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    8ac0:	b580      	push	{r7, lr}
    8ac2:	b086      	sub	sp, #24
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8ac8:	687b      	ldr	r3, [r7, #4]
    8aca:	681b      	ldr	r3, [r3, #0]
    8acc:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    8ace:	693b      	ldr	r3, [r7, #16]
    8ad0:	7e1b      	ldrb	r3, [r3, #24]
    8ad2:	b2db      	uxtb	r3, r3
    8ad4:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    8ad6:	2300      	movs	r3, #0
    8ad8:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    8ada:	68fb      	ldr	r3, [r7, #12]
    8adc:	2201      	movs	r2, #1
    8ade:	4013      	ands	r3, r2
    8ae0:	d003      	beq.n	8aea <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    8ae2:	697b      	ldr	r3, [r7, #20]
    8ae4:	2201      	movs	r2, #1
    8ae6:	4313      	orrs	r3, r2
    8ae8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    8aea:	68fb      	ldr	r3, [r7, #12]
    8aec:	2204      	movs	r2, #4
    8aee:	4013      	ands	r3, r2
    8af0:	d003      	beq.n	8afa <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    8af2:	697b      	ldr	r3, [r7, #20]
    8af4:	2202      	movs	r2, #2
    8af6:	4313      	orrs	r3, r2
    8af8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    8afa:	68fb      	ldr	r3, [r7, #12]
    8afc:	2202      	movs	r2, #2
    8afe:	4013      	ands	r3, r2
    8b00:	d003      	beq.n	8b0a <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    8b02:	697b      	ldr	r3, [r7, #20]
    8b04:	2204      	movs	r2, #4
    8b06:	4313      	orrs	r3, r2
    8b08:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    8b0a:	697b      	ldr	r3, [r7, #20]
}
    8b0c:	0018      	movs	r0, r3
    8b0e:	46bd      	mov	sp, r7
    8b10:	b006      	add	sp, #24
    8b12:	bd80      	pop	{r7, pc}

00008b14 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    8b14:	b580      	push	{r7, lr}
    8b16:	b084      	sub	sp, #16
    8b18:	af00      	add	r7, sp, #0
    8b1a:	6078      	str	r0, [r7, #4]
    8b1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8b1e:	687b      	ldr	r3, [r7, #4]
    8b20:	681b      	ldr	r3, [r3, #0]
    8b22:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    8b24:	2300      	movs	r3, #0
    8b26:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    8b28:	683b      	ldr	r3, [r7, #0]
    8b2a:	2201      	movs	r2, #1
    8b2c:	4013      	ands	r3, r2
    8b2e:	d003      	beq.n	8b38 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    8b30:	68fb      	ldr	r3, [r7, #12]
    8b32:	2201      	movs	r2, #1
    8b34:	4313      	orrs	r3, r2
    8b36:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    8b38:	683b      	ldr	r3, [r7, #0]
    8b3a:	2202      	movs	r2, #2
    8b3c:	4013      	ands	r3, r2
    8b3e:	d003      	beq.n	8b48 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    8b40:	68fb      	ldr	r3, [r7, #12]
    8b42:	2204      	movs	r2, #4
    8b44:	4313      	orrs	r3, r2
    8b46:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    8b48:	683b      	ldr	r3, [r7, #0]
    8b4a:	2204      	movs	r2, #4
    8b4c:	4013      	ands	r3, r2
    8b4e:	d003      	beq.n	8b58 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    8b50:	68fb      	ldr	r3, [r7, #12]
    8b52:	2202      	movs	r2, #2
    8b54:	4313      	orrs	r3, r2
    8b56:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    8b58:	68fb      	ldr	r3, [r7, #12]
    8b5a:	b2da      	uxtb	r2, r3
    8b5c:	68bb      	ldr	r3, [r7, #8]
    8b5e:	761a      	strb	r2, [r3, #24]
}
    8b60:	46c0      	nop			; (mov r8, r8)
    8b62:	46bd      	mov	sp, r7
    8b64:	b004      	add	sp, #16
    8b66:	bd80      	pop	{r7, pc}

00008b68 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    8b68:	b580      	push	{r7, lr}
    8b6a:	b084      	sub	sp, #16
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	681b      	ldr	r3, [r3, #0]
    8b74:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8b76:	46c0      	nop			; (mov r8, r8)
    8b78:	687b      	ldr	r3, [r7, #4]
    8b7a:	0018      	movs	r0, r3
    8b7c:	4b0b      	ldr	r3, [pc, #44]	; (8bac <adc_enable+0x44>)
    8b7e:	4798      	blx	r3
    8b80:	1e03      	subs	r3, r0, #0
    8b82:	d1f9      	bne.n	8b78 <adc_enable+0x10>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    8b84:	68fb      	ldr	r3, [r7, #12]
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	b2db      	uxtb	r3, r3
    8b8a:	2202      	movs	r2, #2
    8b8c:	4313      	orrs	r3, r2
    8b8e:	b2da      	uxtb	r2, r3
    8b90:	68fb      	ldr	r3, [r7, #12]
    8b92:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    8b94:	46c0      	nop			; (mov r8, r8)
    8b96:	687b      	ldr	r3, [r7, #4]
    8b98:	0018      	movs	r0, r3
    8b9a:	4b04      	ldr	r3, [pc, #16]	; (8bac <adc_enable+0x44>)
    8b9c:	4798      	blx	r3
    8b9e:	1e03      	subs	r3, r0, #0
    8ba0:	d1f9      	bne.n	8b96 <adc_enable+0x2e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    8ba2:	2300      	movs	r3, #0
}
    8ba4:	0018      	movs	r0, r3
    8ba6:	46bd      	mov	sp, r7
    8ba8:	b004      	add	sp, #16
    8baa:	bd80      	pop	{r7, pc}
    8bac:	00008a99 	.word	0x00008a99

00008bb0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b084      	sub	sp, #16
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	681b      	ldr	r3, [r3, #0]
    8bbc:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8bbe:	46c0      	nop			; (mov r8, r8)
    8bc0:	687b      	ldr	r3, [r7, #4]
    8bc2:	0018      	movs	r0, r3
    8bc4:	4b0b      	ldr	r3, [pc, #44]	; (8bf4 <adc_start_conversion+0x44>)
    8bc6:	4798      	blx	r3
    8bc8:	1e03      	subs	r3, r0, #0
    8bca:	d1f9      	bne.n	8bc0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	7b1b      	ldrb	r3, [r3, #12]
    8bd0:	b2db      	uxtb	r3, r3
    8bd2:	2202      	movs	r2, #2
    8bd4:	4313      	orrs	r3, r2
    8bd6:	b2da      	uxtb	r2, r3
    8bd8:	68fb      	ldr	r3, [r7, #12]
    8bda:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    8bdc:	46c0      	nop			; (mov r8, r8)
    8bde:	687b      	ldr	r3, [r7, #4]
    8be0:	0018      	movs	r0, r3
    8be2:	4b04      	ldr	r3, [pc, #16]	; (8bf4 <adc_start_conversion+0x44>)
    8be4:	4798      	blx	r3
    8be6:	1e03      	subs	r3, r0, #0
    8be8:	d1f9      	bne.n	8bde <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	46bd      	mov	sp, r7
    8bee:	b004      	add	sp, #16
    8bf0:	bd80      	pop	{r7, pc}
    8bf2:	46c0      	nop			; (mov r8, r8)
    8bf4:	00008a99 	.word	0x00008a99

00008bf8 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    8bf8:	b580      	push	{r7, lr}
    8bfa:	b084      	sub	sp, #16
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	6078      	str	r0, [r7, #4]
    8c00:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    8c02:	687b      	ldr	r3, [r7, #4]
    8c04:	0018      	movs	r0, r3
    8c06:	4b18      	ldr	r3, [pc, #96]	; (8c68 <adc_read+0x70>)
    8c08:	4798      	blx	r3
    8c0a:	0002      	movs	r2, r0
    8c0c:	2301      	movs	r3, #1
    8c0e:	4013      	ands	r3, r2
    8c10:	d101      	bne.n	8c16 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    8c12:	2305      	movs	r3, #5
    8c14:	e023      	b.n	8c5e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	681b      	ldr	r3, [r3, #0]
    8c1a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    8c1c:	46c0      	nop			; (mov r8, r8)
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	0018      	movs	r0, r3
    8c22:	4b12      	ldr	r3, [pc, #72]	; (8c6c <adc_read+0x74>)
    8c24:	4798      	blx	r3
    8c26:	1e03      	subs	r3, r0, #0
    8c28:	d1f9      	bne.n	8c1e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    8c2a:	68fb      	ldr	r3, [r7, #12]
    8c2c:	8b5b      	ldrh	r3, [r3, #26]
    8c2e:	b29a      	uxth	r2, r3
    8c30:	683b      	ldr	r3, [r7, #0]
    8c32:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	2101      	movs	r1, #1
    8c38:	0018      	movs	r0, r3
    8c3a:	4b0d      	ldr	r3, [pc, #52]	; (8c70 <adc_read+0x78>)
    8c3c:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	0018      	movs	r0, r3
    8c42:	4b09      	ldr	r3, [pc, #36]	; (8c68 <adc_read+0x70>)
    8c44:	4798      	blx	r3
    8c46:	0002      	movs	r2, r0
    8c48:	2304      	movs	r3, #4
    8c4a:	4013      	ands	r3, r2
    8c4c:	d006      	beq.n	8c5c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	2104      	movs	r1, #4
    8c52:	0018      	movs	r0, r3
    8c54:	4b06      	ldr	r3, [pc, #24]	; (8c70 <adc_read+0x78>)
    8c56:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    8c58:	231e      	movs	r3, #30
    8c5a:	e000      	b.n	8c5e <adc_read+0x66>
	}

	return STATUS_OK;
    8c5c:	2300      	movs	r3, #0
}
    8c5e:	0018      	movs	r0, r3
    8c60:	46bd      	mov	sp, r7
    8c62:	b004      	add	sp, #16
    8c64:	bd80      	pop	{r7, pc}
    8c66:	46c0      	nop			; (mov r8, r8)
    8c68:	00008ac1 	.word	0x00008ac1
    8c6c:	00008a99 	.word	0x00008a99
    8c70:	00008b15 	.word	0x00008b15

00008c74 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8c74:	b580      	push	{r7, lr}
    8c76:	b082      	sub	sp, #8
    8c78:	af00      	add	r7, sp, #0
    8c7a:	0002      	movs	r2, r0
    8c7c:	1dfb      	adds	r3, r7, #7
    8c7e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8c80:	1dfb      	adds	r3, r7, #7
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	0018      	movs	r0, r3
    8c86:	4b03      	ldr	r3, [pc, #12]	; (8c94 <port_get_group_from_gpio_pin+0x20>)
    8c88:	4798      	blx	r3
    8c8a:	0003      	movs	r3, r0
}
    8c8c:	0018      	movs	r0, r3
    8c8e:	46bd      	mov	sp, r7
    8c90:	b002      	add	sp, #8
    8c92:	bd80      	pop	{r7, pc}
    8c94:	00008a39 	.word	0x00008a39

00008c98 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8c98:	b580      	push	{r7, lr}
    8c9a:	b082      	sub	sp, #8
    8c9c:	af00      	add	r7, sp, #0
    8c9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	2200      	movs	r2, #0
    8ca4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	2201      	movs	r2, #1
    8caa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	2200      	movs	r2, #0
    8cb0:	709a      	strb	r2, [r3, #2]
}
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	46bd      	mov	sp, r7
    8cb6:	b002      	add	sp, #8
    8cb8:	bd80      	pop	{r7, pc}
	...

00008cbc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    8cbc:	b580      	push	{r7, lr}
    8cbe:	b084      	sub	sp, #16
    8cc0:	af00      	add	r7, sp, #0
    8cc2:	0002      	movs	r2, r0
    8cc4:	1dfb      	adds	r3, r7, #7
    8cc6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8cc8:	1dfb      	adds	r3, r7, #7
    8cca:	781b      	ldrb	r3, [r3, #0]
    8ccc:	0018      	movs	r0, r3
    8cce:	4b0b      	ldr	r3, [pc, #44]	; (8cfc <port_pin_get_input_level+0x40>)
    8cd0:	4798      	blx	r3
    8cd2:	0003      	movs	r3, r0
    8cd4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8cd6:	1dfb      	adds	r3, r7, #7
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	221f      	movs	r2, #31
    8cdc:	4013      	ands	r3, r2
    8cde:	2201      	movs	r2, #1
    8ce0:	409a      	lsls	r2, r3
    8ce2:	0013      	movs	r3, r2
    8ce4:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    8ce6:	68fb      	ldr	r3, [r7, #12]
    8ce8:	6a1b      	ldr	r3, [r3, #32]
    8cea:	68ba      	ldr	r2, [r7, #8]
    8cec:	4013      	ands	r3, r2
    8cee:	1e5a      	subs	r2, r3, #1
    8cf0:	4193      	sbcs	r3, r2
    8cf2:	b2db      	uxtb	r3, r3
}
    8cf4:	0018      	movs	r0, r3
    8cf6:	46bd      	mov	sp, r7
    8cf8:	b004      	add	sp, #16
    8cfa:	bd80      	pop	{r7, pc}
    8cfc:	00008c75 	.word	0x00008c75

00008d00 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8d00:	b580      	push	{r7, lr}
    8d02:	b084      	sub	sp, #16
    8d04:	af00      	add	r7, sp, #0
    8d06:	0002      	movs	r2, r0
    8d08:	1dfb      	adds	r3, r7, #7
    8d0a:	701a      	strb	r2, [r3, #0]
    8d0c:	1dbb      	adds	r3, r7, #6
    8d0e:	1c0a      	adds	r2, r1, #0
    8d10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8d12:	1dfb      	adds	r3, r7, #7
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	0018      	movs	r0, r3
    8d18:	4b0d      	ldr	r3, [pc, #52]	; (8d50 <port_pin_set_output_level+0x50>)
    8d1a:	4798      	blx	r3
    8d1c:	0003      	movs	r3, r0
    8d1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8d20:	1dfb      	adds	r3, r7, #7
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	221f      	movs	r2, #31
    8d26:	4013      	ands	r3, r2
    8d28:	2201      	movs	r2, #1
    8d2a:	409a      	lsls	r2, r3
    8d2c:	0013      	movs	r3, r2
    8d2e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8d30:	1dbb      	adds	r3, r7, #6
    8d32:	781b      	ldrb	r3, [r3, #0]
    8d34:	2b00      	cmp	r3, #0
    8d36:	d003      	beq.n	8d40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8d38:	68fb      	ldr	r3, [r7, #12]
    8d3a:	68ba      	ldr	r2, [r7, #8]
    8d3c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8d3e:	e002      	b.n	8d46 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8d40:	68fb      	ldr	r3, [r7, #12]
    8d42:	68ba      	ldr	r2, [r7, #8]
    8d44:	615a      	str	r2, [r3, #20]
}
    8d46:	46c0      	nop			; (mov r8, r8)
    8d48:	46bd      	mov	sp, r7
    8d4a:	b004      	add	sp, #16
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	46c0      	nop			; (mov r8, r8)
    8d50:	00008c75 	.word	0x00008c75

00008d54 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	b082      	sub	sp, #8
    8d58:	af00      	add	r7, sp, #0
    8d5a:	0002      	movs	r2, r0
    8d5c:	1dfb      	adds	r3, r7, #7
    8d5e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8d60:	4b06      	ldr	r3, [pc, #24]	; (8d7c <system_interrupt_enable+0x28>)
    8d62:	1dfa      	adds	r2, r7, #7
    8d64:	7812      	ldrb	r2, [r2, #0]
    8d66:	0011      	movs	r1, r2
    8d68:	221f      	movs	r2, #31
    8d6a:	400a      	ands	r2, r1
    8d6c:	2101      	movs	r1, #1
    8d6e:	4091      	lsls	r1, r2
    8d70:	000a      	movs	r2, r1
    8d72:	601a      	str	r2, [r3, #0]
}
    8d74:	46c0      	nop			; (mov r8, r8)
    8d76:	46bd      	mov	sp, r7
    8d78:	b002      	add	sp, #8
    8d7a:	bd80      	pop	{r7, pc}
    8d7c:	e000e100 	.word	0xe000e100

00008d80 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    8d80:	b580      	push	{r7, lr}
    8d82:	b082      	sub	sp, #8
    8d84:	af00      	add	r7, sp, #0
    8d86:	0002      	movs	r2, r0
    8d88:	1dfb      	adds	r3, r7, #7
    8d8a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8d8c:	4a07      	ldr	r2, [pc, #28]	; (8dac <system_interrupt_disable+0x2c>)
    8d8e:	1dfb      	adds	r3, r7, #7
    8d90:	781b      	ldrb	r3, [r3, #0]
    8d92:	0019      	movs	r1, r3
    8d94:	231f      	movs	r3, #31
    8d96:	400b      	ands	r3, r1
    8d98:	2101      	movs	r1, #1
    8d9a:	4099      	lsls	r1, r3
    8d9c:	000b      	movs	r3, r1
    8d9e:	0019      	movs	r1, r3
    8da0:	2380      	movs	r3, #128	; 0x80
    8da2:	50d1      	str	r1, [r2, r3]
}
    8da4:	46c0      	nop			; (mov r8, r8)
    8da6:	46bd      	mov	sp, r7
    8da8:	b002      	add	sp, #8
    8daa:	bd80      	pop	{r7, pc}
    8dac:	e000e100 	.word	0xe000e100

00008db0 <i2c_master_is_syncing>:
{
    8db0:	b580      	push	{r7, lr}
    8db2:	b084      	sub	sp, #16
    8db4:	af00      	add	r7, sp, #0
    8db6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	681b      	ldr	r3, [r3, #0]
    8dbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    8dbe:	68fb      	ldr	r3, [r7, #12]
    8dc0:	69db      	ldr	r3, [r3, #28]
    8dc2:	2207      	movs	r2, #7
    8dc4:	4013      	ands	r3, r2
    8dc6:	1e5a      	subs	r2, r3, #1
    8dc8:	4193      	sbcs	r3, r2
    8dca:	b2db      	uxtb	r3, r3
}
    8dcc:	0018      	movs	r0, r3
    8dce:	46bd      	mov	sp, r7
    8dd0:	b004      	add	sp, #16
    8dd2:	bd80      	pop	{r7, pc}

00008dd4 <_i2c_master_wait_for_sync>:
{
    8dd4:	b580      	push	{r7, lr}
    8dd6:	b082      	sub	sp, #8
    8dd8:	af00      	add	r7, sp, #0
    8dda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    8ddc:	46c0      	nop			; (mov r8, r8)
    8dde:	687b      	ldr	r3, [r7, #4]
    8de0:	0018      	movs	r0, r3
    8de2:	4b04      	ldr	r3, [pc, #16]	; (8df4 <_i2c_master_wait_for_sync+0x20>)
    8de4:	4798      	blx	r3
    8de6:	1e03      	subs	r3, r0, #0
    8de8:	d1f9      	bne.n	8dde <_i2c_master_wait_for_sync+0xa>
}
    8dea:	46c0      	nop			; (mov r8, r8)
    8dec:	46bd      	mov	sp, r7
    8dee:	b002      	add	sp, #8
    8df0:	bd80      	pop	{r7, pc}
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	00008db1 	.word	0x00008db1

00008df8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    8df8:	b580      	push	{r7, lr}
    8dfa:	b082      	sub	sp, #8
    8dfc:	af00      	add	r7, sp, #0
    8dfe:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	2264      	movs	r2, #100	; 0x64
    8e04:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	4a1b      	ldr	r2, [pc, #108]	; (8e78 <i2c_master_get_config_defaults+0x80>)
    8e0a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	2200      	movs	r2, #0
    8e10:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    8e12:	687b      	ldr	r3, [r7, #4]
    8e14:	2200      	movs	r2, #0
    8e16:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	2200      	movs	r2, #0
    8e1c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    8e1e:	687b      	ldr	r3, [r7, #4]
    8e20:	2280      	movs	r2, #128	; 0x80
    8e22:	0392      	lsls	r2, r2, #14
    8e24:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    8e26:	687b      	ldr	r3, [r7, #4]
    8e28:	2201      	movs	r2, #1
    8e2a:	4252      	negs	r2, r2
    8e2c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    8e2e:	687b      	ldr	r3, [r7, #4]
    8e30:	2201      	movs	r2, #1
    8e32:	4252      	negs	r2, r2
    8e34:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    8e36:	687b      	ldr	r3, [r7, #4]
    8e38:	2200      	movs	r2, #0
    8e3a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    8e3c:	687b      	ldr	r3, [r7, #4]
    8e3e:	2200      	movs	r2, #0
    8e40:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    8e42:	687b      	ldr	r3, [r7, #4]
    8e44:	2224      	movs	r2, #36	; 0x24
    8e46:	2100      	movs	r1, #0
    8e48:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	2200      	movs	r2, #0
    8e4e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	222c      	movs	r2, #44	; 0x2c
    8e54:	2100      	movs	r1, #0
    8e56:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8e58:	687b      	ldr	r3, [r7, #4]
    8e5a:	222d      	movs	r2, #45	; 0x2d
    8e5c:	2100      	movs	r1, #0
    8e5e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	222e      	movs	r2, #46	; 0x2e
    8e64:	2100      	movs	r1, #0
    8e66:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	22d7      	movs	r2, #215	; 0xd7
    8e6c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8e6e:	46c0      	nop			; (mov r8, r8)
    8e70:	46bd      	mov	sp, r7
    8e72:	b002      	add	sp, #8
    8e74:	bd80      	pop	{r7, pc}
    8e76:	46c0      	nop			; (mov r8, r8)
    8e78:	00000d48 	.word	0x00000d48

00008e7c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	b084      	sub	sp, #16
    8e80:	af00      	add	r7, sp, #0
    8e82:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    8e84:	687b      	ldr	r3, [r7, #4]
    8e86:	681b      	ldr	r3, [r3, #0]
    8e88:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    8e8a:	2300      	movs	r3, #0
    8e8c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	0018      	movs	r0, r3
    8e92:	4b14      	ldr	r3, [pc, #80]	; (8ee4 <i2c_master_enable+0x68>)
    8e94:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    8e96:	68bb      	ldr	r3, [r7, #8]
    8e98:	681b      	ldr	r3, [r3, #0]
    8e9a:	2202      	movs	r2, #2
    8e9c:	431a      	orrs	r2, r3
    8e9e:	68bb      	ldr	r3, [r7, #8]
    8ea0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	681b      	ldr	r3, [r3, #0]
    8ea6:	0018      	movs	r0, r3
    8ea8:	4b0f      	ldr	r3, [pc, #60]	; (8ee8 <i2c_master_enable+0x6c>)
    8eaa:	4798      	blx	r3
    8eac:	0003      	movs	r3, r0
    8eae:	0018      	movs	r0, r3
    8eb0:	4b0e      	ldr	r3, [pc, #56]	; (8eec <i2c_master_enable+0x70>)
    8eb2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8eb4:	e00c      	b.n	8ed0 <i2c_master_enable+0x54>
		timeout_counter++;
    8eb6:	68fb      	ldr	r3, [r7, #12]
    8eb8:	3301      	adds	r3, #1
    8eba:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	88db      	ldrh	r3, [r3, #6]
    8ec0:	001a      	movs	r2, r3
    8ec2:	68fb      	ldr	r3, [r7, #12]
    8ec4:	429a      	cmp	r2, r3
    8ec6:	d803      	bhi.n	8ed0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    8ec8:	68bb      	ldr	r3, [r7, #8]
    8eca:	2210      	movs	r2, #16
    8ecc:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    8ece:	e006      	b.n	8ede <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8ed0:	68bb      	ldr	r3, [r7, #8]
    8ed2:	8b5b      	ldrh	r3, [r3, #26]
    8ed4:	b29b      	uxth	r3, r3
    8ed6:	001a      	movs	r2, r3
    8ed8:	2310      	movs	r3, #16
    8eda:	4013      	ands	r3, r2
    8edc:	d0eb      	beq.n	8eb6 <i2c_master_enable+0x3a>
		}
	}
}
    8ede:	46bd      	mov	sp, r7
    8ee0:	b004      	add	sp, #16
    8ee2:	bd80      	pop	{r7, pc}
    8ee4:	00008dd5 	.word	0x00008dd5
    8ee8:	00007015 	.word	0x00007015
    8eec:	00008d55 	.word	0x00008d55

00008ef0 <i2c_slave_is_syncing>:
{
    8ef0:	b580      	push	{r7, lr}
    8ef2:	b084      	sub	sp, #16
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	681b      	ldr	r3, [r3, #0]
    8efc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    8efe:	68fb      	ldr	r3, [r7, #12]
    8f00:	69db      	ldr	r3, [r3, #28]
    8f02:	2203      	movs	r2, #3
    8f04:	4013      	ands	r3, r2
    8f06:	1e5a      	subs	r2, r3, #1
    8f08:	4193      	sbcs	r3, r2
    8f0a:	b2db      	uxtb	r3, r3
}
    8f0c:	0018      	movs	r0, r3
    8f0e:	46bd      	mov	sp, r7
    8f10:	b004      	add	sp, #16
    8f12:	bd80      	pop	{r7, pc}

00008f14 <_i2c_slave_wait_for_sync>:
{
    8f14:	b580      	push	{r7, lr}
    8f16:	b082      	sub	sp, #8
    8f18:	af00      	add	r7, sp, #0
    8f1a:	6078      	str	r0, [r7, #4]
	while (i2c_slave_is_syncing(module)) {
    8f1c:	46c0      	nop			; (mov r8, r8)
    8f1e:	687b      	ldr	r3, [r7, #4]
    8f20:	0018      	movs	r0, r3
    8f22:	4b04      	ldr	r3, [pc, #16]	; (8f34 <_i2c_slave_wait_for_sync+0x20>)
    8f24:	4798      	blx	r3
    8f26:	1e03      	subs	r3, r0, #0
    8f28:	d1f9      	bne.n	8f1e <_i2c_slave_wait_for_sync+0xa>
}
    8f2a:	46c0      	nop			; (mov r8, r8)
    8f2c:	46bd      	mov	sp, r7
    8f2e:	b002      	add	sp, #8
    8f30:	bd80      	pop	{r7, pc}
    8f32:	46c0      	nop			; (mov r8, r8)
    8f34:	00008ef1 	.word	0x00008ef1

00008f38 <i2c_slave_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initialized
 */
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
    8f38:	b580      	push	{r7, lr}
    8f3a:	b082      	sub	sp, #8
    8f3c:	af00      	add	r7, sp, #0
    8f3e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	2200      	movs	r2, #0
    8f44:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	2280      	movs	r2, #128	; 0x80
    8f4a:	0392      	lsls	r2, r2, #14
    8f4c:	605a      	str	r2, [r3, #4]
	config->buffer_timeout = 65535;
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	2201      	movs	r2, #1
    8f52:	4252      	negs	r2, r2
    8f54:	811a      	strh	r2, [r3, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	2200      	movs	r2, #0
    8f5a:	815a      	strh	r2, [r3, #10]
	config->address = 0;
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	2200      	movs	r2, #0
    8f60:	819a      	strh	r2, [r3, #12]
	config->address_mask = 0;
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	2200      	movs	r2, #0
    8f66:	81da      	strh	r2, [r3, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	2200      	movs	r2, #0
    8f6c:	741a      	strb	r2, [r3, #16]
#endif
	config->enable_general_call_address = false;
    8f6e:	687b      	ldr	r3, [r7, #4]
    8f70:	2200      	movs	r2, #0
    8f72:	745a      	strb	r2, [r3, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	2200      	movs	r2, #0
    8f78:	615a      	str	r2, [r3, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	2200      	movs	r2, #0
    8f7e:	761a      	strb	r2, [r3, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    8f80:	687b      	ldr	r3, [r7, #4]
    8f82:	2200      	movs	r2, #0
    8f84:	765a      	strb	r2, [r3, #25]
	config->run_in_standby = false;
    8f86:	687b      	ldr	r3, [r7, #4]
    8f88:	2200      	movs	r2, #0
    8f8a:	769a      	strb	r2, [r3, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    8f8c:	687b      	ldr	r3, [r7, #4]
    8f8e:	2200      	movs	r2, #0
    8f90:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	2200      	movs	r2, #0
    8f96:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	2224      	movs	r2, #36	; 0x24
    8f9c:	2100      	movs	r1, #0
    8f9e:	5499      	strb	r1, [r3, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8fa0:	687b      	ldr	r3, [r7, #4]
    8fa2:	2225      	movs	r2, #37	; 0x25
    8fa4:	2100      	movs	r1, #0
    8fa6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8fa8:	687b      	ldr	r3, [r7, #4]
    8faa:	2226      	movs	r2, #38	; 0x26
    8fac:	2100      	movs	r1, #0
    8fae:	5499      	strb	r1, [r3, r2]
#endif
}
    8fb0:	46c0      	nop			; (mov r8, r8)
    8fb2:	46bd      	mov	sp, r7
    8fb4:	b002      	add	sp, #8
    8fb6:	bd80      	pop	{r7, pc}

00008fb8 <i2c_slave_enable>:
 *
 * \param[in]  module Pointer to the software module struct
 */
static inline void i2c_slave_enable(
		const struct i2c_slave_module *const module)
{
    8fb8:	b580      	push	{r7, lr}
    8fba:	b084      	sub	sp, #16
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    8fc0:	687b      	ldr	r3, [r7, #4]
    8fc2:	681b      	ldr	r3, [r3, #0]
    8fc4:	60fb      	str	r3, [r7, #12]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	681b      	ldr	r3, [r3, #0]
    8fca:	0018      	movs	r0, r3
    8fcc:	4b09      	ldr	r3, [pc, #36]	; (8ff4 <i2c_slave_enable+0x3c>)
    8fce:	4798      	blx	r3
    8fd0:	0003      	movs	r3, r0
    8fd2:	0018      	movs	r0, r3
    8fd4:	4b08      	ldr	r3, [pc, #32]	; (8ff8 <i2c_slave_enable+0x40>)
    8fd6:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
    8fd8:	687b      	ldr	r3, [r7, #4]
    8fda:	0018      	movs	r0, r3
    8fdc:	4b07      	ldr	r3, [pc, #28]	; (8ffc <i2c_slave_enable+0x44>)
    8fde:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    8fe0:	68fb      	ldr	r3, [r7, #12]
    8fe2:	681b      	ldr	r3, [r3, #0]
    8fe4:	2202      	movs	r2, #2
    8fe6:	431a      	orrs	r2, r3
    8fe8:	68fb      	ldr	r3, [r7, #12]
    8fea:	601a      	str	r2, [r3, #0]
}
    8fec:	46c0      	nop			; (mov r8, r8)
    8fee:	46bd      	mov	sp, r7
    8ff0:	b004      	add	sp, #16
    8ff2:	bd80      	pop	{r7, pc}
    8ff4:	00007015 	.word	0x00007015
    8ff8:	00008d55 	.word	0x00008d55
    8ffc:	00008f15 	.word	0x00008f15

00009000 <i2c_slave_enable_callback>:
 * \param[in]      callback_type  Callback type to enable
 */
static inline void i2c_slave_enable_callback(
		struct i2c_slave_module *const module,
		enum i2c_slave_callback callback_type)
{
    9000:	b580      	push	{r7, lr}
    9002:	b084      	sub	sp, #16
    9004:	af00      	add	r7, sp, #0
    9006:	6078      	str	r0, [r7, #4]
    9008:	000a      	movs	r2, r1
    900a:	1cfb      	adds	r3, r7, #3
    900c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	2225      	movs	r2, #37	; 0x25
    9012:	5c9b      	ldrb	r3, [r3, r2]
    9014:	b2db      	uxtb	r3, r3
    9016:	b25a      	sxtb	r2, r3
    9018:	1cfb      	adds	r3, r7, #3
    901a:	781b      	ldrb	r3, [r3, #0]
    901c:	2101      	movs	r1, #1
    901e:	4099      	lsls	r1, r3
    9020:	000b      	movs	r3, r1
    9022:	b25b      	sxtb	r3, r3
    9024:	4313      	orrs	r3, r2
    9026:	b25b      	sxtb	r3, r3
    9028:	b2d9      	uxtb	r1, r3
    902a:	687b      	ldr	r3, [r7, #4]
    902c:	2225      	movs	r2, #37	; 0x25
    902e:	5499      	strb	r1, [r3, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9030:	687b      	ldr	r3, [r7, #4]
    9032:	681b      	ldr	r3, [r3, #0]
    9034:	60fb      	str	r3, [r7, #12]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
    9036:	1cfb      	adds	r3, r7, #3
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	2b02      	cmp	r3, #2
    903c:	d003      	beq.n	9046 <i2c_slave_enable_callback+0x46>
    903e:	1cfb      	adds	r3, r7, #3
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	2b03      	cmp	r3, #3
    9044:	d102      	bne.n	904c <i2c_slave_enable_callback+0x4c>
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    9046:	68fb      	ldr	r3, [r7, #12]
    9048:	2202      	movs	r2, #2
    904a:	759a      	strb	r2, [r3, #22]
	}
}
    904c:	46c0      	nop			; (mov r8, r8)
    904e:	46bd      	mov	sp, r7
    9050:	b004      	add	sp, #16
    9052:	bd80      	pop	{r7, pc}

00009054 <usart_is_syncing>:
{
    9054:	b580      	push	{r7, lr}
    9056:	b084      	sub	sp, #16
    9058:	af00      	add	r7, sp, #0
    905a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	681b      	ldr	r3, [r3, #0]
    9060:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    9062:	68fb      	ldr	r3, [r7, #12]
    9064:	69db      	ldr	r3, [r3, #28]
    9066:	1e5a      	subs	r2, r3, #1
    9068:	4193      	sbcs	r3, r2
    906a:	b2db      	uxtb	r3, r3
}
    906c:	0018      	movs	r0, r3
    906e:	46bd      	mov	sp, r7
    9070:	b004      	add	sp, #16
    9072:	bd80      	pop	{r7, pc}

00009074 <_usart_wait_for_sync>:
{
    9074:	b580      	push	{r7, lr}
    9076:	b082      	sub	sp, #8
    9078:	af00      	add	r7, sp, #0
    907a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    907c:	46c0      	nop			; (mov r8, r8)
    907e:	687b      	ldr	r3, [r7, #4]
    9080:	0018      	movs	r0, r3
    9082:	4b04      	ldr	r3, [pc, #16]	; (9094 <_usart_wait_for_sync+0x20>)
    9084:	4798      	blx	r3
    9086:	1e03      	subs	r3, r0, #0
    9088:	d1f9      	bne.n	907e <_usart_wait_for_sync+0xa>
}
    908a:	46c0      	nop			; (mov r8, r8)
    908c:	46bd      	mov	sp, r7
    908e:	b002      	add	sp, #8
    9090:	bd80      	pop	{r7, pc}
    9092:	46c0      	nop			; (mov r8, r8)
    9094:	00009055 	.word	0x00009055

00009098 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9098:	b580      	push	{r7, lr}
    909a:	b082      	sub	sp, #8
    909c:	af00      	add	r7, sp, #0
    909e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    90a0:	687b      	ldr	r3, [r7, #4]
    90a2:	2280      	movs	r2, #128	; 0x80
    90a4:	05d2      	lsls	r2, r2, #23
    90a6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    90a8:	687b      	ldr	r3, [r7, #4]
    90aa:	2200      	movs	r2, #0
    90ac:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    90ae:	687b      	ldr	r3, [r7, #4]
    90b0:	22ff      	movs	r2, #255	; 0xff
    90b2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	2200      	movs	r2, #0
    90b8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	2200      	movs	r2, #0
    90be:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	2296      	movs	r2, #150	; 0x96
    90c4:	0192      	lsls	r2, r2, #6
    90c6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	2224      	movs	r2, #36	; 0x24
    90cc:	2101      	movs	r1, #1
    90ce:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	2225      	movs	r2, #37	; 0x25
    90d4:	2101      	movs	r1, #1
    90d6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    90d8:	687b      	ldr	r3, [r7, #4]
    90da:	2226      	movs	r2, #38	; 0x26
    90dc:	2100      	movs	r1, #0
    90de:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    90e0:	687b      	ldr	r3, [r7, #4]
    90e2:	2227      	movs	r2, #39	; 0x27
    90e4:	2100      	movs	r1, #0
    90e6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	2200      	movs	r2, #0
    90ec:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	2288      	movs	r2, #136	; 0x88
    90f2:	0352      	lsls	r2, r2, #13
    90f4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    90f6:	687b      	ldr	r3, [r7, #4]
    90f8:	222c      	movs	r2, #44	; 0x2c
    90fa:	2100      	movs	r1, #0
    90fc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    90fe:	687b      	ldr	r3, [r7, #4]
    9100:	222d      	movs	r2, #45	; 0x2d
    9102:	2100      	movs	r1, #0
    9104:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	2200      	movs	r2, #0
    910a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	2200      	movs	r2, #0
    9110:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	2200      	movs	r2, #0
    9116:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    9118:	687b      	ldr	r3, [r7, #4]
    911a:	2200      	movs	r2, #0
    911c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    911e:	687b      	ldr	r3, [r7, #4]
    9120:	2200      	movs	r2, #0
    9122:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	2200      	movs	r2, #0
    9128:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    912a:	687b      	ldr	r3, [r7, #4]
    912c:	2200      	movs	r2, #0
    912e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	2200      	movs	r2, #0
    9134:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	2200      	movs	r2, #0
    913a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	2200      	movs	r2, #0
    9140:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	2213      	movs	r2, #19
    9146:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	2200      	movs	r2, #0
    914c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    914e:	46c0      	nop			; (mov r8, r8)
    9150:	46bd      	mov	sp, r7
    9152:	b002      	add	sp, #8
    9154:	bd80      	pop	{r7, pc}
	...

00009158 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    9158:	b580      	push	{r7, lr}
    915a:	b084      	sub	sp, #16
    915c:	af00      	add	r7, sp, #0
    915e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	681b      	ldr	r3, [r3, #0]
    9164:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	681b      	ldr	r3, [r3, #0]
    916a:	0018      	movs	r0, r3
    916c:	4b09      	ldr	r3, [pc, #36]	; (9194 <usart_enable+0x3c>)
    916e:	4798      	blx	r3
    9170:	0003      	movs	r3, r0
    9172:	0018      	movs	r0, r3
    9174:	4b08      	ldr	r3, [pc, #32]	; (9198 <usart_enable+0x40>)
    9176:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	0018      	movs	r0, r3
    917c:	4b07      	ldr	r3, [pc, #28]	; (919c <usart_enable+0x44>)
    917e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9180:	68fb      	ldr	r3, [r7, #12]
    9182:	681b      	ldr	r3, [r3, #0]
    9184:	2202      	movs	r2, #2
    9186:	431a      	orrs	r2, r3
    9188:	68fb      	ldr	r3, [r7, #12]
    918a:	601a      	str	r2, [r3, #0]
}
    918c:	46c0      	nop			; (mov r8, r8)
    918e:	46bd      	mov	sp, r7
    9190:	b004      	add	sp, #16
    9192:	bd80      	pop	{r7, pc}
    9194:	00007015 	.word	0x00007015
    9198:	00008d55 	.word	0x00008d55
    919c:	00009075 	.word	0x00009075

000091a0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    91a0:	b580      	push	{r7, lr}
    91a2:	b084      	sub	sp, #16
    91a4:	af00      	add	r7, sp, #0
    91a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	681b      	ldr	r3, [r3, #0]
    91ac:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	681b      	ldr	r3, [r3, #0]
    91b2:	0018      	movs	r0, r3
    91b4:	4b0a      	ldr	r3, [pc, #40]	; (91e0 <usart_disable+0x40>)
    91b6:	4798      	blx	r3
    91b8:	0003      	movs	r3, r0
    91ba:	0018      	movs	r0, r3
    91bc:	4b09      	ldr	r3, [pc, #36]	; (91e4 <usart_disable+0x44>)
    91be:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    91c0:	687b      	ldr	r3, [r7, #4]
    91c2:	0018      	movs	r0, r3
    91c4:	4b08      	ldr	r3, [pc, #32]	; (91e8 <usart_disable+0x48>)
    91c6:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    91c8:	68fb      	ldr	r3, [r7, #12]
    91ca:	681b      	ldr	r3, [r3, #0]
    91cc:	2202      	movs	r2, #2
    91ce:	4393      	bics	r3, r2
    91d0:	001a      	movs	r2, r3
    91d2:	68fb      	ldr	r3, [r7, #12]
    91d4:	601a      	str	r2, [r3, #0]
}
    91d6:	46c0      	nop			; (mov r8, r8)
    91d8:	46bd      	mov	sp, r7
    91da:	b004      	add	sp, #16
    91dc:	bd80      	pop	{r7, pc}
    91de:	46c0      	nop			; (mov r8, r8)
    91e0:	00007015 	.word	0x00007015
    91e4:	00008d81 	.word	0x00008d81
    91e8:	00009075 	.word	0x00009075

000091ec <tc_is_syncing>:
{
    91ec:	b580      	push	{r7, lr}
    91ee:	b084      	sub	sp, #16
    91f0:	af00      	add	r7, sp, #0
    91f2:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    91f4:	687b      	ldr	r3, [r7, #4]
    91f6:	681b      	ldr	r3, [r3, #0]
    91f8:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    91fa:	68fb      	ldr	r3, [r7, #12]
    91fc:	7bdb      	ldrb	r3, [r3, #15]
    91fe:	b2db      	uxtb	r3, r3
    9200:	001a      	movs	r2, r3
    9202:	2380      	movs	r3, #128	; 0x80
    9204:	4013      	ands	r3, r2
    9206:	1e5a      	subs	r2, r3, #1
    9208:	4193      	sbcs	r3, r2
    920a:	b2db      	uxtb	r3, r3
}
    920c:	0018      	movs	r0, r3
    920e:	46bd      	mov	sp, r7
    9210:	b004      	add	sp, #16
    9212:	bd80      	pop	{r7, pc}

00009214 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    9214:	b580      	push	{r7, lr}
    9216:	b082      	sub	sp, #8
    9218:	af00      	add	r7, sp, #0
    921a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	2200      	movs	r2, #0
    9220:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	2200      	movs	r2, #0
    9226:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    9228:	687b      	ldr	r3, [r7, #4]
    922a:	2200      	movs	r2, #0
    922c:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	2200      	movs	r2, #0
    9232:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	2200      	movs	r2, #0
    9238:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    923a:	687b      	ldr	r3, [r7, #4]
    923c:	2200      	movs	r2, #0
    923e:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	2200      	movs	r2, #0
    9244:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	2200      	movs	r2, #0
    924a:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    924c:	687b      	ldr	r3, [r7, #4]
    924e:	2200      	movs	r2, #0
    9250:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	2200      	movs	r2, #0
    9256:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	2200      	movs	r2, #0
    925c:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    925e:	687b      	ldr	r3, [r7, #4]
    9260:	2200      	movs	r2, #0
    9262:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	2200      	movs	r2, #0
    9268:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	2200      	movs	r2, #0
    926e:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    9270:	687b      	ldr	r3, [r7, #4]
    9272:	2200      	movs	r2, #0
    9274:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	2200      	movs	r2, #0
    927a:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	2200      	movs	r2, #0
    9280:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	2200      	movs	r2, #0
    9286:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	2200      	movs	r2, #0
    928c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	2200      	movs	r2, #0
    9292:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    9294:	46c0      	nop			; (mov r8, r8)
    9296:	46bd      	mov	sp, r7
    9298:	b002      	add	sp, #8
    929a:	bd80      	pop	{r7, pc}

0000929c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    929c:	b580      	push	{r7, lr}
    929e:	b084      	sub	sp, #16
    92a0:	af00      	add	r7, sp, #0
    92a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	681b      	ldr	r3, [r3, #0]
    92a8:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    92aa:	46c0      	nop			; (mov r8, r8)
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	0018      	movs	r0, r3
    92b0:	4b07      	ldr	r3, [pc, #28]	; (92d0 <tc_enable+0x34>)
    92b2:	4798      	blx	r3
    92b4:	1e03      	subs	r3, r0, #0
    92b6:	d1f9      	bne.n	92ac <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    92b8:	68fb      	ldr	r3, [r7, #12]
    92ba:	881b      	ldrh	r3, [r3, #0]
    92bc:	b29b      	uxth	r3, r3
    92be:	2202      	movs	r2, #2
    92c0:	4313      	orrs	r3, r2
    92c2:	b29a      	uxth	r2, r3
    92c4:	68fb      	ldr	r3, [r7, #12]
    92c6:	801a      	strh	r2, [r3, #0]
}
    92c8:	46c0      	nop			; (mov r8, r8)
    92ca:	46bd      	mov	sp, r7
    92cc:	b004      	add	sp, #16
    92ce:	bd80      	pop	{r7, pc}
    92d0:	000091ed 	.word	0x000091ed

000092d4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	b084      	sub	sp, #16
    92d8:	af00      	add	r7, sp, #0
    92da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	681b      	ldr	r3, [r3, #0]
    92e0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    92e2:	46c0      	nop			; (mov r8, r8)
    92e4:	68fb      	ldr	r3, [r7, #12]
    92e6:	689b      	ldr	r3, [r3, #8]
    92e8:	2202      	movs	r2, #2
    92ea:	4013      	ands	r3, r2
    92ec:	d1fa      	bne.n	92e4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	681b      	ldr	r3, [r3, #0]
    92f2:	2202      	movs	r2, #2
    92f4:	431a      	orrs	r2, r3
    92f6:	68fb      	ldr	r3, [r7, #12]
    92f8:	601a      	str	r2, [r3, #0]
}
    92fa:	46c0      	nop			; (mov r8, r8)
    92fc:	46bd      	mov	sp, r7
    92fe:	b004      	add	sp, #16
    9300:	bd80      	pop	{r7, pc}
	...

00009304 <initIMU>:


float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

void initIMU()
{
    9304:	b580      	push	{r7, lr}
    9306:	b082      	sub	sp, #8
    9308:	af00      	add	r7, sp, #0
	settings.device.agAddress = LSM9DS1_AG_ADDR;
    930a:	4b4f      	ldr	r3, [pc, #316]	; (9448 <initIMU+0x144>)
    930c:	226b      	movs	r2, #107	; 0x6b
    930e:	705a      	strb	r2, [r3, #1]
	settings.device.mAddress = LSM9DS1_M_ADDR;
    9310:	4b4d      	ldr	r3, [pc, #308]	; (9448 <initIMU+0x144>)
    9312:	221e      	movs	r2, #30
    9314:	709a      	strb	r2, [r3, #2]

	settings.gyro.enabled = true;
    9316:	4b4c      	ldr	r3, [pc, #304]	; (9448 <initIMU+0x144>)
    9318:	2201      	movs	r2, #1
    931a:	711a      	strb	r2, [r3, #4]
	settings.gyro.enableX = true;
    931c:	4b4a      	ldr	r3, [pc, #296]	; (9448 <initIMU+0x144>)
    931e:	2201      	movs	r2, #1
    9320:	745a      	strb	r2, [r3, #17]
	settings.gyro.enableY = true;
    9322:	4b49      	ldr	r3, [pc, #292]	; (9448 <initIMU+0x144>)
    9324:	2201      	movs	r2, #1
    9326:	749a      	strb	r2, [r3, #18]
	settings.gyro.enableZ = true;
    9328:	4b47      	ldr	r3, [pc, #284]	; (9448 <initIMU+0x144>)
    932a:	2201      	movs	r2, #1
    932c:	74da      	strb	r2, [r3, #19]
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;//245
    932e:	4b46      	ldr	r3, [pc, #280]	; (9448 <initIMU+0x144>)
    9330:	22f5      	movs	r2, #245	; 0xf5
    9332:	80da      	strh	r2, [r3, #6]
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
    9334:	4b44      	ldr	r3, [pc, #272]	; (9448 <initIMU+0x144>)
    9336:	2206      	movs	r2, #6
    9338:	721a      	strb	r2, [r3, #8]
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
    933a:	4b43      	ldr	r3, [pc, #268]	; (9448 <initIMU+0x144>)
    933c:	2200      	movs	r2, #0
    933e:	725a      	strb	r2, [r3, #9]
	settings.gyro.lowPowerEnable = false;
    9340:	4b41      	ldr	r3, [pc, #260]	; (9448 <initIMU+0x144>)
    9342:	2200      	movs	r2, #0
    9344:	729a      	strb	r2, [r3, #10]
	settings.gyro.HPFEnable = false;
    9346:	4b40      	ldr	r3, [pc, #256]	; (9448 <initIMU+0x144>)
    9348:	2200      	movs	r2, #0
    934a:	72da      	strb	r2, [r3, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
    934c:	4b3e      	ldr	r3, [pc, #248]	; (9448 <initIMU+0x144>)
    934e:	2200      	movs	r2, #0
    9350:	731a      	strb	r2, [r3, #12]
	settings.gyro.flipX = false;
    9352:	4b3d      	ldr	r3, [pc, #244]	; (9448 <initIMU+0x144>)
    9354:	2200      	movs	r2, #0
    9356:	735a      	strb	r2, [r3, #13]
	settings.gyro.flipY = false;
    9358:	4b3b      	ldr	r3, [pc, #236]	; (9448 <initIMU+0x144>)
    935a:	2200      	movs	r2, #0
    935c:	739a      	strb	r2, [r3, #14]
	settings.gyro.flipZ = false;
    935e:	4b3a      	ldr	r3, [pc, #232]	; (9448 <initIMU+0x144>)
    9360:	2200      	movs	r2, #0
    9362:	73da      	strb	r2, [r3, #15]
	settings.gyro.orientation = 0;
    9364:	4b38      	ldr	r3, [pc, #224]	; (9448 <initIMU+0x144>)
    9366:	2200      	movs	r2, #0
    9368:	741a      	strb	r2, [r3, #16]
	settings.gyro.latchInterrupt = true;
    936a:	4b37      	ldr	r3, [pc, #220]	; (9448 <initIMU+0x144>)
    936c:	2201      	movs	r2, #1
    936e:	751a      	strb	r2, [r3, #20]

	settings.accel.enabled = true;
    9370:	4b35      	ldr	r3, [pc, #212]	; (9448 <initIMU+0x144>)
    9372:	2201      	movs	r2, #1
    9374:	759a      	strb	r2, [r3, #22]
	settings.accel.enableX = true;
    9376:	4b34      	ldr	r3, [pc, #208]	; (9448 <initIMU+0x144>)
    9378:	2201      	movs	r2, #1
    937a:	765a      	strb	r2, [r3, #25]
	settings.accel.enableY = true;
    937c:	4b32      	ldr	r3, [pc, #200]	; (9448 <initIMU+0x144>)
    937e:	2201      	movs	r2, #1
    9380:	769a      	strb	r2, [r3, #26]
	settings.accel.enableZ = true;
    9382:	4b31      	ldr	r3, [pc, #196]	; (9448 <initIMU+0x144>)
    9384:	2201      	movs	r2, #1
    9386:	76da      	strb	r2, [r3, #27]
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 16;//8
    9388:	4b2f      	ldr	r3, [pc, #188]	; (9448 <initIMU+0x144>)
    938a:	2210      	movs	r2, #16
    938c:	75da      	strb	r2, [r3, #23]
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
    938e:	4b2e      	ldr	r3, [pc, #184]	; (9448 <initIMU+0x144>)
    9390:	2206      	movs	r2, #6
    9392:	761a      	strb	r2, [r3, #24]
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = -1;
    9394:	4b2c      	ldr	r3, [pc, #176]	; (9448 <initIMU+0x144>)
    9396:	22ff      	movs	r2, #255	; 0xff
    9398:	771a      	strb	r2, [r3, #28]
	settings.accel.highResEnable = false;
    939a:	4b2b      	ldr	r3, [pc, #172]	; (9448 <initIMU+0x144>)
    939c:	2200      	movs	r2, #0
    939e:	775a      	strb	r2, [r3, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
    93a0:	4b29      	ldr	r3, [pc, #164]	; (9448 <initIMU+0x144>)
    93a2:	2200      	movs	r2, #0
    93a4:	779a      	strb	r2, [r3, #30]

	settings.mag.enabled = true;
    93a6:	4b28      	ldr	r3, [pc, #160]	; (9448 <initIMU+0x144>)
    93a8:	2201      	movs	r2, #1
    93aa:	77da      	strb	r2, [r3, #31]
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 8;
    93ac:	4b26      	ldr	r3, [pc, #152]	; (9448 <initIMU+0x144>)
    93ae:	2220      	movs	r2, #32
    93b0:	2108      	movs	r1, #8
    93b2:	5499      	strb	r1, [r3, r2]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
    93b4:	4b24      	ldr	r3, [pc, #144]	; (9448 <initIMU+0x144>)
    93b6:	2221      	movs	r2, #33	; 0x21
    93b8:	2107      	movs	r1, #7
    93ba:	5499      	strb	r1, [r3, r2]
	settings.mag.tempCompensationEnable = true;
    93bc:	4b22      	ldr	r3, [pc, #136]	; (9448 <initIMU+0x144>)
    93be:	2222      	movs	r2, #34	; 0x22
    93c0:	2101      	movs	r1, #1
    93c2:	5499      	strb	r1, [r3, r2]
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 1;
    93c4:	4b20      	ldr	r3, [pc, #128]	; (9448 <initIMU+0x144>)
    93c6:	2223      	movs	r2, #35	; 0x23
    93c8:	2101      	movs	r1, #1
    93ca:	5499      	strb	r1, [r3, r2]
	settings.mag.ZPerformance = 1;
    93cc:	4b1e      	ldr	r3, [pc, #120]	; (9448 <initIMU+0x144>)
    93ce:	2224      	movs	r2, #36	; 0x24
    93d0:	2101      	movs	r1, #1
    93d2:	5499      	strb	r1, [r3, r2]
	settings.mag.lowPowerEnable = false;
    93d4:	4b1c      	ldr	r3, [pc, #112]	; (9448 <initIMU+0x144>)
    93d6:	2225      	movs	r2, #37	; 0x25
    93d8:	2100      	movs	r1, #0
    93da:	5499      	strb	r1, [r3, r2]
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
    93dc:	4b1a      	ldr	r3, [pc, #104]	; (9448 <initIMU+0x144>)
    93de:	2226      	movs	r2, #38	; 0x26
    93e0:	2100      	movs	r1, #0
    93e2:	5499      	strb	r1, [r3, r2]

	settings.temp.enabled = true;
    93e4:	4b18      	ldr	r3, [pc, #96]	; (9448 <initIMU+0x144>)
    93e6:	2227      	movs	r2, #39	; 0x27
    93e8:	2101      	movs	r1, #1
    93ea:	5499      	strb	r1, [r3, r2]
	for (int i=0; i<3; i++)
    93ec:	2300      	movs	r3, #0
    93ee:	607b      	str	r3, [r7, #4]
    93f0:	e020      	b.n	9434 <initIMU+0x130>
	{
		gBias[i] = 0;
    93f2:	4b16      	ldr	r3, [pc, #88]	; (944c <initIMU+0x148>)
    93f4:	687a      	ldr	r2, [r7, #4]
    93f6:	0092      	lsls	r2, r2, #2
    93f8:	2100      	movs	r1, #0
    93fa:	50d1      	str	r1, [r2, r3]
		aBias[i] = 0;
    93fc:	4b14      	ldr	r3, [pc, #80]	; (9450 <initIMU+0x14c>)
    93fe:	687a      	ldr	r2, [r7, #4]
    9400:	0092      	lsls	r2, r2, #2
    9402:	2100      	movs	r1, #0
    9404:	50d1      	str	r1, [r2, r3]
		mBias[i] = 0;
    9406:	4b13      	ldr	r3, [pc, #76]	; (9454 <initIMU+0x150>)
    9408:	687a      	ldr	r2, [r7, #4]
    940a:	0092      	lsls	r2, r2, #2
    940c:	2100      	movs	r1, #0
    940e:	50d1      	str	r1, [r2, r3]
		gBiasRaw[i] = 0;
    9410:	4b11      	ldr	r3, [pc, #68]	; (9458 <initIMU+0x154>)
    9412:	687a      	ldr	r2, [r7, #4]
    9414:	0052      	lsls	r2, r2, #1
    9416:	2100      	movs	r1, #0
    9418:	52d1      	strh	r1, [r2, r3]
		aBiasRaw[i] = 0;
    941a:	4b10      	ldr	r3, [pc, #64]	; (945c <initIMU+0x158>)
    941c:	687a      	ldr	r2, [r7, #4]
    941e:	0052      	lsls	r2, r2, #1
    9420:	2100      	movs	r1, #0
    9422:	52d1      	strh	r1, [r2, r3]
		mBiasRaw[i] = 0;
    9424:	4b0e      	ldr	r3, [pc, #56]	; (9460 <initIMU+0x15c>)
    9426:	687a      	ldr	r2, [r7, #4]
    9428:	0052      	lsls	r2, r2, #1
    942a:	2100      	movs	r1, #0
    942c:	52d1      	strh	r1, [r2, r3]
	for (int i=0; i<3; i++)
    942e:	687b      	ldr	r3, [r7, #4]
    9430:	3301      	adds	r3, #1
    9432:	607b      	str	r3, [r7, #4]
    9434:	687b      	ldr	r3, [r7, #4]
    9436:	2b02      	cmp	r3, #2
    9438:	dddb      	ble.n	93f2 <initIMU+0xee>
	}
	_autoCalc = false;
    943a:	4b0a      	ldr	r3, [pc, #40]	; (9464 <initIMU+0x160>)
    943c:	2200      	movs	r2, #0
    943e:	701a      	strb	r2, [r3, #0]
}
    9440:	46c0      	nop			; (mov r8, r8)
    9442:	46bd      	mov	sp, r7
    9444:	b002      	add	sp, #8
    9446:	bd80      	pop	{r7, pc}
    9448:	200004e8 	.word	0x200004e8
    944c:	20000f9c 	.word	0x20000f9c
    9450:	20000480 	.word	0x20000480
    9454:	20001060 	.word	0x20001060
    9458:	20000c9c 	.word	0x20000c9c
    945c:	20000ca4 	.word	0x20000ca4
    9460:	20000498 	.word	0x20000498
    9464:	20000908 	.word	0x20000908

00009468 <beginIMU>:


uint16_t beginIMU()
{
    9468:	b590      	push	{r4, r7, lr}
    946a:	b083      	sub	sp, #12
    946c:	af00      	add	r7, sp, #0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
    946e:	4b1e      	ldr	r3, [pc, #120]	; (94e8 <beginIMU+0x80>)
    9470:	785a      	ldrb	r2, [r3, #1]
    9472:	4b1e      	ldr	r3, [pc, #120]	; (94ec <beginIMU+0x84>)
    9474:	701a      	strb	r2, [r3, #0]
	_mAddress = settings.device.mAddress;
    9476:	4b1c      	ldr	r3, [pc, #112]	; (94e8 <beginIMU+0x80>)
    9478:	789a      	ldrb	r2, [r3, #2]
    947a:	4b1d      	ldr	r3, [pc, #116]	; (94f0 <beginIMU+0x88>)
    947c:	701a      	strb	r2, [r3, #0]
	
	constrainScales();
    947e:	4b1d      	ldr	r3, [pc, #116]	; (94f4 <beginIMU+0x8c>)
    9480:	4798      	blx	r3
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
    9482:	4b1d      	ldr	r3, [pc, #116]	; (94f8 <beginIMU+0x90>)
    9484:	4798      	blx	r3
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
    9486:	4b1d      	ldr	r3, [pc, #116]	; (94fc <beginIMU+0x94>)
    9488:	4798      	blx	r3
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
    948a:	4b1d      	ldr	r3, [pc, #116]	; (9500 <beginIMU+0x98>)
    948c:	4798      	blx	r3
	
	initI2C();	// Initialize I2C
    948e:	4b1d      	ldr	r3, [pc, #116]	; (9504 <beginIMU+0x9c>)
    9490:	4798      	blx	r3
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
    9492:	1dfc      	adds	r4, r7, #7
    9494:	200f      	movs	r0, #15
    9496:	4b1c      	ldr	r3, [pc, #112]	; (9508 <beginIMU+0xa0>)
    9498:	4798      	blx	r3
    949a:	0003      	movs	r3, r0
    949c:	7023      	strb	r3, [r4, #0]
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
    949e:	1dbc      	adds	r4, r7, #6
    94a0:	200f      	movs	r0, #15
    94a2:	4b1a      	ldr	r3, [pc, #104]	; (950c <beginIMU+0xa4>)
    94a4:	4798      	blx	r3
    94a6:	0003      	movs	r3, r0
    94a8:	7023      	strb	r3, [r4, #0]
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
    94aa:	1dbb      	adds	r3, r7, #6
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	021b      	lsls	r3, r3, #8
    94b0:	b21a      	sxth	r2, r3
    94b2:	1dfb      	adds	r3, r7, #7
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	b21b      	sxth	r3, r3
    94b8:	4313      	orrs	r3, r2
    94ba:	b21a      	sxth	r2, r3
    94bc:	1d3b      	adds	r3, r7, #4
    94be:	801a      	strh	r2, [r3, #0]
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
    94c0:	1d3b      	adds	r3, r7, #4
    94c2:	881b      	ldrh	r3, [r3, #0]
    94c4:	4a12      	ldr	r2, [pc, #72]	; (9510 <beginIMU+0xa8>)
    94c6:	4293      	cmp	r3, r2
    94c8:	d001      	beq.n	94ce <beginIMU+0x66>
		return 0;
    94ca:	2300      	movs	r3, #0
    94cc:	e007      	b.n	94de <beginIMU+0x76>
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
    94ce:	4b11      	ldr	r3, [pc, #68]	; (9514 <beginIMU+0xac>)
    94d0:	4798      	blx	r3
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
    94d2:	4b11      	ldr	r3, [pc, #68]	; (9518 <beginIMU+0xb0>)
    94d4:	4798      	blx	r3
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
    94d6:	4b11      	ldr	r3, [pc, #68]	; (951c <beginIMU+0xb4>)
    94d8:	4798      	blx	r3

	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
    94da:	1d3b      	adds	r3, r7, #4
    94dc:	881b      	ldrh	r3, [r3, #0]
}
    94de:	0018      	movs	r0, r3
    94e0:	46bd      	mov	sp, r7
    94e2:	b003      	add	sp, #12
    94e4:	bd90      	pop	{r4, r7, pc}
    94e6:	46c0      	nop			; (mov r8, r8)
    94e8:	200004e8 	.word	0x200004e8
    94ec:	20000a3a 	.word	0x20000a3a
    94f0:	200009c0 	.word	0x200009c0
    94f4:	00009f65 	.word	0x00009f65
    94f8:	00009de1 	.word	0x00009de1
    94fc:	00009e51 	.word	0x00009e51
    9500:	00009e19 	.word	0x00009e19
    9504:	0000a131 	.word	0x0000a131
    9508:	0000a0c5 	.word	0x0000a0c5
    950c:	0000a059 	.word	0x0000a059
    9510:	0000683d 	.word	0x0000683d
    9514:	00009521 	.word	0x00009521
    9518:	000096a1 	.word	0x000096a1
    951c:	00009a29 	.word	0x00009a29

00009520 <initGyro>:

void initGyro()
{
    9520:	b580      	push	{r7, lr}
    9522:	b082      	sub	sp, #8
    9524:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    9526:	1dfb      	adds	r3, r7, #7
    9528:	2200      	movs	r2, #0
    952a:	701a      	strb	r2, [r3, #0]
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
    952c:	4b5a      	ldr	r3, [pc, #360]	; (9698 <initGyro+0x178>)
    952e:	791b      	ldrb	r3, [r3, #4]
    9530:	2b00      	cmp	r3, #0
    9532:	d004      	beq.n	953e <initGyro+0x1e>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
    9534:	4b58      	ldr	r3, [pc, #352]	; (9698 <initGyro+0x178>)
    9536:	7a1b      	ldrb	r3, [r3, #8]
    9538:	015a      	lsls	r2, r3, #5
    953a:	1dfb      	adds	r3, r7, #7
    953c:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.gyro.scale)
    953e:	4b56      	ldr	r3, [pc, #344]	; (9698 <initGyro+0x178>)
    9540:	88db      	ldrh	r3, [r3, #6]
    9542:	22fa      	movs	r2, #250	; 0xfa
    9544:	0052      	lsls	r2, r2, #1
    9546:	4293      	cmp	r3, r2
    9548:	d004      	beq.n	9554 <initGyro+0x34>
    954a:	22fa      	movs	r2, #250	; 0xfa
    954c:	00d2      	lsls	r2, r2, #3
    954e:	4293      	cmp	r3, r2
    9550:	d007      	beq.n	9562 <initGyro+0x42>
    9552:	e00d      	b.n	9570 <initGyro+0x50>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
    9554:	1dfb      	adds	r3, r7, #7
    9556:	1dfa      	adds	r2, r7, #7
    9558:	7812      	ldrb	r2, [r2, #0]
    955a:	2108      	movs	r1, #8
    955c:	430a      	orrs	r2, r1
    955e:	701a      	strb	r2, [r3, #0]
			break;
    9560:	e006      	b.n	9570 <initGyro+0x50>
		case 2000:
			tempRegValue |= (0x3 << 3);
    9562:	1dfb      	adds	r3, r7, #7
    9564:	1dfa      	adds	r2, r7, #7
    9566:	7812      	ldrb	r2, [r2, #0]
    9568:	2118      	movs	r1, #24
    956a:	430a      	orrs	r2, r1
    956c:	701a      	strb	r2, [r3, #0]
			break;
    956e:	46c0      	nop			; (mov r8, r8)
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
    9570:	4b49      	ldr	r3, [pc, #292]	; (9698 <initGyro+0x178>)
    9572:	7a5b      	ldrb	r3, [r3, #9]
    9574:	b25b      	sxtb	r3, r3
    9576:	2203      	movs	r2, #3
    9578:	4013      	ands	r3, r2
    957a:	b25a      	sxtb	r2, r3
    957c:	1dfb      	adds	r3, r7, #7
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	b25b      	sxtb	r3, r3
    9582:	4313      	orrs	r3, r2
    9584:	b25a      	sxtb	r2, r3
    9586:	1dfb      	adds	r3, r7, #7
    9588:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
    958a:	1dfb      	adds	r3, r7, #7
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	0019      	movs	r1, r3
    9590:	2010      	movs	r0, #16
    9592:	4b42      	ldr	r3, [pc, #264]	; (969c <initGyro+0x17c>)
    9594:	4798      	blx	r3
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
    9596:	2100      	movs	r1, #0
    9598:	2011      	movs	r0, #17
    959a:	4b40      	ldr	r3, [pc, #256]	; (969c <initGyro+0x17c>)
    959c:	4798      	blx	r3
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
    959e:	4b3e      	ldr	r3, [pc, #248]	; (9698 <initGyro+0x178>)
    95a0:	7a9b      	ldrb	r3, [r3, #10]
    95a2:	2b00      	cmp	r3, #0
    95a4:	d001      	beq.n	95aa <initGyro+0x8a>
    95a6:	2280      	movs	r2, #128	; 0x80
    95a8:	e000      	b.n	95ac <initGyro+0x8c>
    95aa:	2200      	movs	r2, #0
    95ac:	1dfb      	adds	r3, r7, #7
    95ae:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.HPFEnable)
    95b0:	4b39      	ldr	r3, [pc, #228]	; (9698 <initGyro+0x178>)
    95b2:	7adb      	ldrb	r3, [r3, #11]
    95b4:	2b00      	cmp	r3, #0
    95b6:	d00c      	beq.n	95d2 <initGyro+0xb2>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
    95b8:	4b37      	ldr	r3, [pc, #220]	; (9698 <initGyro+0x178>)
    95ba:	7b1b      	ldrb	r3, [r3, #12]
    95bc:	220f      	movs	r2, #15
    95be:	4013      	ands	r3, r2
    95c0:	b2da      	uxtb	r2, r3
    95c2:	1dfb      	adds	r3, r7, #7
    95c4:	781b      	ldrb	r3, [r3, #0]
    95c6:	4313      	orrs	r3, r2
    95c8:	b2da      	uxtb	r2, r3
    95ca:	1dfb      	adds	r3, r7, #7
    95cc:	2140      	movs	r1, #64	; 0x40
    95ce:	430a      	orrs	r2, r1
    95d0:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
    95d2:	1dfb      	adds	r3, r7, #7
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	0019      	movs	r1, r3
    95d8:	2012      	movs	r0, #18
    95da:	4b30      	ldr	r3, [pc, #192]	; (969c <initGyro+0x17c>)
    95dc:	4798      	blx	r3
	// Zen_G - Z-axis output enable (0:disable, 1:enable)
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
    95de:	1dfb      	adds	r3, r7, #7
    95e0:	2200      	movs	r2, #0
    95e2:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
    95e4:	4b2c      	ldr	r3, [pc, #176]	; (9698 <initGyro+0x178>)
    95e6:	7cdb      	ldrb	r3, [r3, #19]
    95e8:	2b00      	cmp	r3, #0
    95ea:	d005      	beq.n	95f8 <initGyro+0xd8>
    95ec:	1dfb      	adds	r3, r7, #7
    95ee:	1dfa      	adds	r2, r7, #7
    95f0:	7812      	ldrb	r2, [r2, #0]
    95f2:	2120      	movs	r1, #32
    95f4:	430a      	orrs	r2, r1
    95f6:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
    95f8:	4b27      	ldr	r3, [pc, #156]	; (9698 <initGyro+0x178>)
    95fa:	7c9b      	ldrb	r3, [r3, #18]
    95fc:	2b00      	cmp	r3, #0
    95fe:	d005      	beq.n	960c <initGyro+0xec>
    9600:	1dfb      	adds	r3, r7, #7
    9602:	1dfa      	adds	r2, r7, #7
    9604:	7812      	ldrb	r2, [r2, #0]
    9606:	2110      	movs	r1, #16
    9608:	430a      	orrs	r2, r1
    960a:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
    960c:	4b22      	ldr	r3, [pc, #136]	; (9698 <initGyro+0x178>)
    960e:	7c5b      	ldrb	r3, [r3, #17]
    9610:	2b00      	cmp	r3, #0
    9612:	d005      	beq.n	9620 <initGyro+0x100>
    9614:	1dfb      	adds	r3, r7, #7
    9616:	1dfa      	adds	r2, r7, #7
    9618:	7812      	ldrb	r2, [r2, #0]
    961a:	2108      	movs	r1, #8
    961c:	430a      	orrs	r2, r1
    961e:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
    9620:	4b1d      	ldr	r3, [pc, #116]	; (9698 <initGyro+0x178>)
    9622:	7d1b      	ldrb	r3, [r3, #20]
    9624:	2b00      	cmp	r3, #0
    9626:	d005      	beq.n	9634 <initGyro+0x114>
    9628:	1dfb      	adds	r3, r7, #7
    962a:	1dfa      	adds	r2, r7, #7
    962c:	7812      	ldrb	r2, [r2, #0]
    962e:	2102      	movs	r1, #2
    9630:	430a      	orrs	r2, r1
    9632:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG4, tempRegValue);
    9634:	1dfb      	adds	r3, r7, #7
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	0019      	movs	r1, r3
    963a:	201e      	movs	r0, #30
    963c:	4b17      	ldr	r3, [pc, #92]	; (969c <initGyro+0x17c>)
    963e:	4798      	blx	r3
	
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
    9640:	1dfb      	adds	r3, r7, #7
    9642:	2200      	movs	r2, #0
    9644:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
    9646:	4b14      	ldr	r3, [pc, #80]	; (9698 <initGyro+0x178>)
    9648:	7b5b      	ldrb	r3, [r3, #13]
    964a:	2b00      	cmp	r3, #0
    964c:	d005      	beq.n	965a <initGyro+0x13a>
    964e:	1dfb      	adds	r3, r7, #7
    9650:	1dfa      	adds	r2, r7, #7
    9652:	7812      	ldrb	r2, [r2, #0]
    9654:	2120      	movs	r1, #32
    9656:	430a      	orrs	r2, r1
    9658:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
    965a:	4b0f      	ldr	r3, [pc, #60]	; (9698 <initGyro+0x178>)
    965c:	7b9b      	ldrb	r3, [r3, #14]
    965e:	2b00      	cmp	r3, #0
    9660:	d005      	beq.n	966e <initGyro+0x14e>
    9662:	1dfb      	adds	r3, r7, #7
    9664:	1dfa      	adds	r2, r7, #7
    9666:	7812      	ldrb	r2, [r2, #0]
    9668:	2110      	movs	r1, #16
    966a:	430a      	orrs	r2, r1
    966c:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
    966e:	4b0a      	ldr	r3, [pc, #40]	; (9698 <initGyro+0x178>)
    9670:	7bdb      	ldrb	r3, [r3, #15]
    9672:	2b00      	cmp	r3, #0
    9674:	d005      	beq.n	9682 <initGyro+0x162>
    9676:	1dfb      	adds	r3, r7, #7
    9678:	1dfa      	adds	r2, r7, #7
    967a:	7812      	ldrb	r2, [r2, #0]
    967c:	2108      	movs	r1, #8
    967e:	430a      	orrs	r2, r1
    9680:	701a      	strb	r2, [r3, #0]
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
    9682:	1dfb      	adds	r3, r7, #7
    9684:	781b      	ldrb	r3, [r3, #0]
    9686:	0019      	movs	r1, r3
    9688:	2013      	movs	r0, #19
    968a:	4b04      	ldr	r3, [pc, #16]	; (969c <initGyro+0x17c>)
    968c:	4798      	blx	r3
}
    968e:	46c0      	nop			; (mov r8, r8)
    9690:	46bd      	mov	sp, r7
    9692:	b002      	add	sp, #8
    9694:	bd80      	pop	{r7, pc}
    9696:	46c0      	nop			; (mov r8, r8)
    9698:	200004e8 	.word	0x200004e8
    969c:	00009ff1 	.word	0x00009ff1

000096a0 <initAccel>:

void initAccel()
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b082      	sub	sp, #8
    96a4:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    96a6:	1dfb      	adds	r3, r7, #7
    96a8:	2200      	movs	r2, #0
    96aa:	701a      	strb	r2, [r3, #0]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
    96ac:	4b4b      	ldr	r3, [pc, #300]	; (97dc <initAccel+0x13c>)
    96ae:	7edb      	ldrb	r3, [r3, #27]
    96b0:	2b00      	cmp	r3, #0
    96b2:	d005      	beq.n	96c0 <initAccel+0x20>
    96b4:	1dfb      	adds	r3, r7, #7
    96b6:	1dfa      	adds	r2, r7, #7
    96b8:	7812      	ldrb	r2, [r2, #0]
    96ba:	2120      	movs	r1, #32
    96bc:	430a      	orrs	r2, r1
    96be:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableY) tempRegValue |= (1<<4);
    96c0:	4b46      	ldr	r3, [pc, #280]	; (97dc <initAccel+0x13c>)
    96c2:	7e9b      	ldrb	r3, [r3, #26]
    96c4:	2b00      	cmp	r3, #0
    96c6:	d005      	beq.n	96d4 <initAccel+0x34>
    96c8:	1dfb      	adds	r3, r7, #7
    96ca:	1dfa      	adds	r2, r7, #7
    96cc:	7812      	ldrb	r2, [r2, #0]
    96ce:	2110      	movs	r1, #16
    96d0:	430a      	orrs	r2, r1
    96d2:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableX) tempRegValue |= (1<<3);
    96d4:	4b41      	ldr	r3, [pc, #260]	; (97dc <initAccel+0x13c>)
    96d6:	7e5b      	ldrb	r3, [r3, #25]
    96d8:	2b00      	cmp	r3, #0
    96da:	d005      	beq.n	96e8 <initAccel+0x48>
    96dc:	1dfb      	adds	r3, r7, #7
    96de:	1dfa      	adds	r2, r7, #7
    96e0:	7812      	ldrb	r2, [r2, #0]
    96e2:	2108      	movs	r1, #8
    96e4:	430a      	orrs	r2, r1
    96e6:	701a      	strb	r2, [r3, #0]
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
    96e8:	1dfb      	adds	r3, r7, #7
    96ea:	781b      	ldrb	r3, [r3, #0]
    96ec:	0019      	movs	r1, r3
    96ee:	201f      	movs	r0, #31
    96f0:	4b3b      	ldr	r3, [pc, #236]	; (97e0 <initAccel+0x140>)
    96f2:	4798      	blx	r3
	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
	// ODR_XL[2:0] - Output data rate & power mode selection
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
    96f4:	1dfb      	adds	r3, r7, #7
    96f6:	2200      	movs	r2, #0
    96f8:	701a      	strb	r2, [r3, #0]
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
    96fa:	4b38      	ldr	r3, [pc, #224]	; (97dc <initAccel+0x13c>)
    96fc:	7d9b      	ldrb	r3, [r3, #22]
    96fe:	2b00      	cmp	r3, #0
    9700:	d00a      	beq.n	9718 <initAccel+0x78>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
    9702:	4b36      	ldr	r3, [pc, #216]	; (97dc <initAccel+0x13c>)
    9704:	7e1b      	ldrb	r3, [r3, #24]
    9706:	015b      	lsls	r3, r3, #5
    9708:	b25a      	sxtb	r2, r3
    970a:	1dfb      	adds	r3, r7, #7
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	b25b      	sxtb	r3, r3
    9710:	4313      	orrs	r3, r2
    9712:	b25a      	sxtb	r2, r3
    9714:	1dfb      	adds	r3, r7, #7
    9716:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.accel.scale)
    9718:	4b30      	ldr	r3, [pc, #192]	; (97dc <initAccel+0x13c>)
    971a:	7ddb      	ldrb	r3, [r3, #23]
    971c:	2b08      	cmp	r3, #8
    971e:	d00a      	beq.n	9736 <initAccel+0x96>
    9720:	2b10      	cmp	r3, #16
    9722:	d00f      	beq.n	9744 <initAccel+0xa4>
    9724:	2b04      	cmp	r3, #4
    9726:	d114      	bne.n	9752 <initAccel+0xb2>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
    9728:	1dfb      	adds	r3, r7, #7
    972a:	1dfa      	adds	r2, r7, #7
    972c:	7812      	ldrb	r2, [r2, #0]
    972e:	2110      	movs	r1, #16
    9730:	430a      	orrs	r2, r1
    9732:	701a      	strb	r2, [r3, #0]
			break;
    9734:	e00d      	b.n	9752 <initAccel+0xb2>
		case 8:
			tempRegValue |= (0x3 << 3);
    9736:	1dfb      	adds	r3, r7, #7
    9738:	1dfa      	adds	r2, r7, #7
    973a:	7812      	ldrb	r2, [r2, #0]
    973c:	2118      	movs	r1, #24
    973e:	430a      	orrs	r2, r1
    9740:	701a      	strb	r2, [r3, #0]
			break;
    9742:	e006      	b.n	9752 <initAccel+0xb2>
		case 16:
			tempRegValue |= (0x1 << 3);
    9744:	1dfb      	adds	r3, r7, #7
    9746:	1dfa      	adds	r2, r7, #7
    9748:	7812      	ldrb	r2, [r2, #0]
    974a:	2108      	movs	r1, #8
    974c:	430a      	orrs	r2, r1
    974e:	701a      	strb	r2, [r3, #0]
			break;
    9750:	46c0      	nop			; (mov r8, r8)
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
    9752:	4b22      	ldr	r3, [pc, #136]	; (97dc <initAccel+0x13c>)
    9754:	7f1b      	ldrb	r3, [r3, #28]
    9756:	b25b      	sxtb	r3, r3
    9758:	2b00      	cmp	r3, #0
    975a:	db12      	blt.n	9782 <initAccel+0xe2>
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
    975c:	1dfb      	adds	r3, r7, #7
    975e:	1dfa      	adds	r2, r7, #7
    9760:	7812      	ldrb	r2, [r2, #0]
    9762:	2104      	movs	r1, #4
    9764:	430a      	orrs	r2, r1
    9766:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.bandwidth & 0x03);
    9768:	4b1c      	ldr	r3, [pc, #112]	; (97dc <initAccel+0x13c>)
    976a:	7f1b      	ldrb	r3, [r3, #28]
    976c:	b25b      	sxtb	r3, r3
    976e:	2203      	movs	r2, #3
    9770:	4013      	ands	r3, r2
    9772:	b25a      	sxtb	r2, r3
    9774:	1dfb      	adds	r3, r7, #7
    9776:	781b      	ldrb	r3, [r3, #0]
    9778:	b25b      	sxtb	r3, r3
    977a:	4313      	orrs	r3, r2
    977c:	b25a      	sxtb	r2, r3
    977e:	1dfb      	adds	r3, r7, #7
    9780:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
    9782:	1dfb      	adds	r3, r7, #7
    9784:	781b      	ldrb	r3, [r3, #0]
    9786:	0019      	movs	r1, r3
    9788:	2020      	movs	r0, #32
    978a:	4b15      	ldr	r3, [pc, #84]	; (97e0 <initAccel+0x140>)
    978c:	4798      	blx	r3
	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
    978e:	1dfb      	adds	r3, r7, #7
    9790:	2200      	movs	r2, #0
    9792:	701a      	strb	r2, [r3, #0]
	if (settings.accel.highResEnable)
    9794:	4b11      	ldr	r3, [pc, #68]	; (97dc <initAccel+0x13c>)
    9796:	7f5b      	ldrb	r3, [r3, #29]
    9798:	2b00      	cmp	r3, #0
    979a:	d014      	beq.n	97c6 <initAccel+0x126>
	{
		tempRegValue |= (1<<7); // Set HR bit
    979c:	1dfb      	adds	r3, r7, #7
    979e:	1dfa      	adds	r2, r7, #7
    97a0:	7812      	ldrb	r2, [r2, #0]
    97a2:	2180      	movs	r1, #128	; 0x80
    97a4:	4249      	negs	r1, r1
    97a6:	430a      	orrs	r2, r1
    97a8:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
    97aa:	4b0c      	ldr	r3, [pc, #48]	; (97dc <initAccel+0x13c>)
    97ac:	7f9b      	ldrb	r3, [r3, #30]
    97ae:	015b      	lsls	r3, r3, #5
    97b0:	b25b      	sxtb	r3, r3
    97b2:	2260      	movs	r2, #96	; 0x60
    97b4:	4013      	ands	r3, r2
    97b6:	b25a      	sxtb	r2, r3
    97b8:	1dfb      	adds	r3, r7, #7
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	b25b      	sxtb	r3, r3
    97be:	4313      	orrs	r3, r2
    97c0:	b25a      	sxtb	r2, r3
    97c2:	1dfb      	adds	r3, r7, #7
    97c4:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
    97c6:	1dfb      	adds	r3, r7, #7
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	0019      	movs	r1, r3
    97cc:	2021      	movs	r0, #33	; 0x21
    97ce:	4b04      	ldr	r3, [pc, #16]	; (97e0 <initAccel+0x140>)
    97d0:	4798      	blx	r3
}
    97d2:	46c0      	nop			; (mov r8, r8)
    97d4:	46bd      	mov	sp, r7
    97d6:	b002      	add	sp, #8
    97d8:	bd80      	pop	{r7, pc}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	200004e8 	.word	0x200004e8
    97e0:	00009ff1 	.word	0x00009ff1

000097e4 <calibrate>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void calibrate(bool autoCalc)
{  
    97e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    97e6:	b08b      	sub	sp, #44	; 0x2c
    97e8:	af00      	add	r7, sp, #0
    97ea:	0002      	movs	r2, r0
    97ec:	1dfb      	adds	r3, r7, #7
    97ee:	701a      	strb	r2, [r3, #0]
	//uint8_t data[6] = {0, 0, 0, 0, 0, 0};
	uint8_t samples = 0;
    97f0:	2327      	movs	r3, #39	; 0x27
    97f2:	18fb      	adds	r3, r7, r3
    97f4:	2200      	movs	r2, #0
    97f6:	701a      	strb	r2, [r3, #0]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
    97f8:	2314      	movs	r3, #20
    97fa:	18fb      	adds	r3, r7, r3
    97fc:	2200      	movs	r2, #0
    97fe:	601a      	str	r2, [r3, #0]
    9800:	2314      	movs	r3, #20
    9802:	18fb      	adds	r3, r7, r3
    9804:	2200      	movs	r2, #0
    9806:	605a      	str	r2, [r3, #4]
    9808:	2314      	movs	r3, #20
    980a:	18fb      	adds	r3, r7, r3
    980c:	2200      	movs	r2, #0
    980e:	609a      	str	r2, [r3, #8]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
    9810:	2308      	movs	r3, #8
    9812:	18fb      	adds	r3, r7, r3
    9814:	2200      	movs	r2, #0
    9816:	601a      	str	r2, [r3, #0]
    9818:	2308      	movs	r3, #8
    981a:	18fb      	adds	r3, r7, r3
    981c:	2200      	movs	r2, #0
    981e:	605a      	str	r2, [r3, #4]
    9820:	2308      	movs	r3, #8
    9822:	18fb      	adds	r3, r7, r3
    9824:	2200      	movs	r2, #0
    9826:	609a      	str	r2, [r3, #8]
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
    9828:	2001      	movs	r0, #1
    982a:	4b67      	ldr	r3, [pc, #412]	; (99c8 <calibrate+0x1e4>)
    982c:	4798      	blx	r3
	setFIFO(FIFO_THS, 0x1F);
    982e:	211f      	movs	r1, #31
    9830:	2001      	movs	r0, #1
    9832:	4b66      	ldr	r3, [pc, #408]	; (99cc <calibrate+0x1e8>)
    9834:	4798      	blx	r3
	while (samples < 0x1F)
    9836:	e009      	b.n	984c <calibrate+0x68>
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
    9838:	202f      	movs	r0, #47	; 0x2f
    983a:	4b65      	ldr	r3, [pc, #404]	; (99d0 <calibrate+0x1ec>)
    983c:	4798      	blx	r3
    983e:	0003      	movs	r3, r0
    9840:	0019      	movs	r1, r3
    9842:	2327      	movs	r3, #39	; 0x27
    9844:	18fb      	adds	r3, r7, r3
    9846:	223f      	movs	r2, #63	; 0x3f
    9848:	400a      	ands	r2, r1
    984a:	701a      	strb	r2, [r3, #0]
	while (samples < 0x1F)
    984c:	2327      	movs	r3, #39	; 0x27
    984e:	18fb      	adds	r3, r7, r3
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	2b1e      	cmp	r3, #30
    9854:	d9f0      	bls.n	9838 <calibrate+0x54>
	}
	for(ii = 0; ii < samples ; ii++) 
    9856:	2300      	movs	r3, #0
    9858:	623b      	str	r3, [r7, #32]
    985a:	e059      	b.n	9910 <calibrate+0x12c>
	{	// Read the gyro data stored in the FIFO
		readGyro();
    985c:	4b5d      	ldr	r3, [pc, #372]	; (99d4 <calibrate+0x1f0>)
    985e:	4798      	blx	r3
		gBiasRawTemp[0] += gx;
    9860:	2308      	movs	r3, #8
    9862:	18fb      	adds	r3, r7, r3
    9864:	681b      	ldr	r3, [r3, #0]
    9866:	4a5c      	ldr	r2, [pc, #368]	; (99d8 <calibrate+0x1f4>)
    9868:	2100      	movs	r1, #0
    986a:	5e52      	ldrsh	r2, [r2, r1]
    986c:	189a      	adds	r2, r3, r2
    986e:	2308      	movs	r3, #8
    9870:	18fb      	adds	r3, r7, r3
    9872:	601a      	str	r2, [r3, #0]
		gBiasRawTemp[1] += gy;
    9874:	2308      	movs	r3, #8
    9876:	18fb      	adds	r3, r7, r3
    9878:	685b      	ldr	r3, [r3, #4]
    987a:	4a58      	ldr	r2, [pc, #352]	; (99dc <calibrate+0x1f8>)
    987c:	2100      	movs	r1, #0
    987e:	5e52      	ldrsh	r2, [r2, r1]
    9880:	189a      	adds	r2, r3, r2
    9882:	2308      	movs	r3, #8
    9884:	18fb      	adds	r3, r7, r3
    9886:	605a      	str	r2, [r3, #4]
		gBiasRawTemp[2] += gz;
    9888:	2308      	movs	r3, #8
    988a:	18fb      	adds	r3, r7, r3
    988c:	689b      	ldr	r3, [r3, #8]
    988e:	4a54      	ldr	r2, [pc, #336]	; (99e0 <calibrate+0x1fc>)
    9890:	2100      	movs	r1, #0
    9892:	5e52      	ldrsh	r2, [r2, r1]
    9894:	189a      	adds	r2, r3, r2
    9896:	2308      	movs	r3, #8
    9898:	18fb      	adds	r3, r7, r3
    989a:	609a      	str	r2, [r3, #8]
		readAccel();
    989c:	4b51      	ldr	r3, [pc, #324]	; (99e4 <calibrate+0x200>)
    989e:	4798      	blx	r3
		aBiasRawTemp[0] += ax;
    98a0:	2314      	movs	r3, #20
    98a2:	18fb      	adds	r3, r7, r3
    98a4:	681b      	ldr	r3, [r3, #0]
    98a6:	4a50      	ldr	r2, [pc, #320]	; (99e8 <calibrate+0x204>)
    98a8:	2100      	movs	r1, #0
    98aa:	5e52      	ldrsh	r2, [r2, r1]
    98ac:	189a      	adds	r2, r3, r2
    98ae:	2314      	movs	r3, #20
    98b0:	18fb      	adds	r3, r7, r3
    98b2:	601a      	str	r2, [r3, #0]
		aBiasRawTemp[1] += ay;
    98b4:	2314      	movs	r3, #20
    98b6:	18fb      	adds	r3, r7, r3
    98b8:	685b      	ldr	r3, [r3, #4]
    98ba:	4a4c      	ldr	r2, [pc, #304]	; (99ec <calibrate+0x208>)
    98bc:	2100      	movs	r1, #0
    98be:	5e52      	ldrsh	r2, [r2, r1]
    98c0:	189a      	adds	r2, r3, r2
    98c2:	2314      	movs	r3, #20
    98c4:	18fb      	adds	r3, r7, r3
    98c6:	605a      	str	r2, [r3, #4]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
    98c8:	2314      	movs	r3, #20
    98ca:	18fb      	adds	r3, r7, r3
    98cc:	689c      	ldr	r4, [r3, #8]
    98ce:	4b48      	ldr	r3, [pc, #288]	; (99f0 <calibrate+0x20c>)
    98d0:	2200      	movs	r2, #0
    98d2:	5e9b      	ldrsh	r3, [r3, r2]
    98d4:	001e      	movs	r6, r3
    98d6:	4b47      	ldr	r3, [pc, #284]	; (99f4 <calibrate+0x210>)
    98d8:	681a      	ldr	r2, [r3, #0]
    98da:	4b47      	ldr	r3, [pc, #284]	; (99f8 <calibrate+0x214>)
    98dc:	1c10      	adds	r0, r2, #0
    98de:	4798      	blx	r3
    98e0:	0002      	movs	r2, r0
    98e2:	000b      	movs	r3, r1
    98e4:	4d45      	ldr	r5, [pc, #276]	; (99fc <calibrate+0x218>)
    98e6:	2000      	movs	r0, #0
    98e8:	4945      	ldr	r1, [pc, #276]	; (9a00 <calibrate+0x21c>)
    98ea:	47a8      	blx	r5
    98ec:	0002      	movs	r2, r0
    98ee:	000b      	movs	r3, r1
    98f0:	0011      	movs	r1, r2
    98f2:	001a      	movs	r2, r3
    98f4:	4b43      	ldr	r3, [pc, #268]	; (9a04 <calibrate+0x220>)
    98f6:	0008      	movs	r0, r1
    98f8:	0011      	movs	r1, r2
    98fa:	4798      	blx	r3
    98fc:	0003      	movs	r3, r0
    98fe:	b21b      	sxth	r3, r3
    9900:	1af3      	subs	r3, r6, r3
    9902:	18e2      	adds	r2, r4, r3
    9904:	2314      	movs	r3, #20
    9906:	18fb      	adds	r3, r7, r3
    9908:	609a      	str	r2, [r3, #8]
	for(ii = 0; ii < samples ; ii++) 
    990a:	6a3b      	ldr	r3, [r7, #32]
    990c:	3301      	adds	r3, #1
    990e:	623b      	str	r3, [r7, #32]
    9910:	2327      	movs	r3, #39	; 0x27
    9912:	18fb      	adds	r3, r7, r3
    9914:	781a      	ldrb	r2, [r3, #0]
    9916:	6a3b      	ldr	r3, [r7, #32]
    9918:	429a      	cmp	r2, r3
    991a:	dc9f      	bgt.n	985c <calibrate+0x78>
	}  
	for (ii = 0; ii < 3; ii++)
    991c:	2300      	movs	r3, #0
    991e:	623b      	str	r3, [r7, #32]
    9920:	e03c      	b.n	999c <calibrate+0x1b8>
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
    9922:	2308      	movs	r3, #8
    9924:	18fb      	adds	r3, r7, r3
    9926:	6a3a      	ldr	r2, [r7, #32]
    9928:	0092      	lsls	r2, r2, #2
    992a:	58d2      	ldr	r2, [r2, r3]
    992c:	2327      	movs	r3, #39	; 0x27
    992e:	18fb      	adds	r3, r7, r3
    9930:	7819      	ldrb	r1, [r3, #0]
    9932:	4b35      	ldr	r3, [pc, #212]	; (9a08 <calibrate+0x224>)
    9934:	0010      	movs	r0, r2
    9936:	4798      	blx	r3
    9938:	0003      	movs	r3, r0
    993a:	b219      	sxth	r1, r3
    993c:	4b33      	ldr	r3, [pc, #204]	; (9a0c <calibrate+0x228>)
    993e:	6a3a      	ldr	r2, [r7, #32]
    9940:	0052      	lsls	r2, r2, #1
    9942:	52d1      	strh	r1, [r2, r3]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
    9944:	4b31      	ldr	r3, [pc, #196]	; (9a0c <calibrate+0x228>)
    9946:	6a3a      	ldr	r2, [r7, #32]
    9948:	0052      	lsls	r2, r2, #1
    994a:	5ed3      	ldrsh	r3, [r2, r3]
    994c:	0018      	movs	r0, r3
    994e:	4b30      	ldr	r3, [pc, #192]	; (9a10 <calibrate+0x22c>)
    9950:	4798      	blx	r3
    9952:	1c01      	adds	r1, r0, #0
    9954:	4b2f      	ldr	r3, [pc, #188]	; (9a14 <calibrate+0x230>)
    9956:	6a3a      	ldr	r2, [r7, #32]
    9958:	0092      	lsls	r2, r2, #2
    995a:	50d1      	str	r1, [r2, r3]
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
    995c:	2314      	movs	r3, #20
    995e:	18fb      	adds	r3, r7, r3
    9960:	6a3a      	ldr	r2, [r7, #32]
    9962:	0092      	lsls	r2, r2, #2
    9964:	58d2      	ldr	r2, [r2, r3]
    9966:	2327      	movs	r3, #39	; 0x27
    9968:	18fb      	adds	r3, r7, r3
    996a:	7819      	ldrb	r1, [r3, #0]
    996c:	4b26      	ldr	r3, [pc, #152]	; (9a08 <calibrate+0x224>)
    996e:	0010      	movs	r0, r2
    9970:	4798      	blx	r3
    9972:	0003      	movs	r3, r0
    9974:	b219      	sxth	r1, r3
    9976:	4b28      	ldr	r3, [pc, #160]	; (9a18 <calibrate+0x234>)
    9978:	6a3a      	ldr	r2, [r7, #32]
    997a:	0052      	lsls	r2, r2, #1
    997c:	52d1      	strh	r1, [r2, r3]
		aBias[ii] = calcAccel(aBiasRaw[ii]);
    997e:	4b26      	ldr	r3, [pc, #152]	; (9a18 <calibrate+0x234>)
    9980:	6a3a      	ldr	r2, [r7, #32]
    9982:	0052      	lsls	r2, r2, #1
    9984:	5ed3      	ldrsh	r3, [r2, r3]
    9986:	0018      	movs	r0, r3
    9988:	4b24      	ldr	r3, [pc, #144]	; (9a1c <calibrate+0x238>)
    998a:	4798      	blx	r3
    998c:	1c01      	adds	r1, r0, #0
    998e:	4b24      	ldr	r3, [pc, #144]	; (9a20 <calibrate+0x23c>)
    9990:	6a3a      	ldr	r2, [r7, #32]
    9992:	0092      	lsls	r2, r2, #2
    9994:	50d1      	str	r1, [r2, r3]
	for (ii = 0; ii < 3; ii++)
    9996:	6a3b      	ldr	r3, [r7, #32]
    9998:	3301      	adds	r3, #1
    999a:	623b      	str	r3, [r7, #32]
    999c:	6a3b      	ldr	r3, [r7, #32]
    999e:	2b02      	cmp	r3, #2
    99a0:	ddbf      	ble.n	9922 <calibrate+0x13e>
	}
	
	enableFIFO(false);
    99a2:	2000      	movs	r0, #0
    99a4:	4b08      	ldr	r3, [pc, #32]	; (99c8 <calibrate+0x1e4>)
    99a6:	4798      	blx	r3
	setFIFO(FIFO_OFF, 0x00);
    99a8:	2100      	movs	r1, #0
    99aa:	2000      	movs	r0, #0
    99ac:	4b07      	ldr	r3, [pc, #28]	; (99cc <calibrate+0x1e8>)
    99ae:	4798      	blx	r3
	
	if (autoCalc) _autoCalc = true;
    99b0:	1dfb      	adds	r3, r7, #7
    99b2:	781b      	ldrb	r3, [r3, #0]
    99b4:	2b00      	cmp	r3, #0
    99b6:	d002      	beq.n	99be <calibrate+0x1da>
    99b8:	4b1a      	ldr	r3, [pc, #104]	; (9a24 <calibrate+0x240>)
    99ba:	2201      	movs	r2, #1
    99bc:	701a      	strb	r2, [r3, #0]
}
    99be:	46c0      	nop			; (mov r8, r8)
    99c0:	46bd      	mov	sp, r7
    99c2:	b00b      	add	sp, #44	; 0x2c
    99c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99c6:	46c0      	nop			; (mov r8, r8)
    99c8:	00009ead 	.word	0x00009ead
    99cc:	00009f11 	.word	0x00009f11
    99d0:	0000a059 	.word	0x0000a059
    99d4:	00009ca5 	.word	0x00009ca5
    99d8:	200002e4 	.word	0x200002e4
    99dc:	200002e6 	.word	0x200002e6
    99e0:	200002e8 	.word	0x200002e8
    99e4:	00009b6d 	.word	0x00009b6d
    99e8:	200002ea 	.word	0x200002ea
    99ec:	200002ec 	.word	0x200002ec
    99f0:	200002ee 	.word	0x200002ee
    99f4:	200009bc 	.word	0x200009bc
    99f8:	00016d9d 	.word	0x00016d9d
    99fc:	000158ad 	.word	0x000158ad
    9a00:	3ff00000 	.word	0x3ff00000
    9a04:	00016c41 	.word	0x00016c41
    9a08:	0001411d 	.word	0x0001411d
    9a0c:	20000c9c 	.word	0x20000c9c
    9a10:	00009d71 	.word	0x00009d71
    9a14:	20000f9c 	.word	0x20000f9c
    9a18:	20000ca4 	.word	0x20000ca4
    9a1c:	00009da9 	.word	0x00009da9
    9a20:	20000480 	.word	0x20000480
    9a24:	20000908 	.word	0x20000908

00009a28 <initMag>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void initMag()
{
    9a28:	b580      	push	{r7, lr}
    9a2a:	b082      	sub	sp, #8
    9a2c:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    9a2e:	1dfb      	adds	r3, r7, #7
    9a30:	2200      	movs	r2, #0
    9a32:	701a      	strb	r2, [r3, #0]
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
    9a34:	4b4b      	ldr	r3, [pc, #300]	; (9b64 <initMag+0x13c>)
    9a36:	2222      	movs	r2, #34	; 0x22
    9a38:	5c9b      	ldrb	r3, [r3, r2]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d006      	beq.n	9a4c <initMag+0x24>
    9a3e:	1dfb      	adds	r3, r7, #7
    9a40:	1dfa      	adds	r2, r7, #7
    9a42:	7812      	ldrb	r2, [r2, #0]
    9a44:	2180      	movs	r1, #128	; 0x80
    9a46:	4249      	negs	r1, r1
    9a48:	430a      	orrs	r2, r1
    9a4a:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
    9a4c:	4b45      	ldr	r3, [pc, #276]	; (9b64 <initMag+0x13c>)
    9a4e:	2223      	movs	r2, #35	; 0x23
    9a50:	5c9b      	ldrb	r3, [r3, r2]
    9a52:	015b      	lsls	r3, r3, #5
    9a54:	b25b      	sxtb	r3, r3
    9a56:	2260      	movs	r2, #96	; 0x60
    9a58:	4013      	ands	r3, r2
    9a5a:	b25a      	sxtb	r2, r3
    9a5c:	1dfb      	adds	r3, r7, #7
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	b25b      	sxtb	r3, r3
    9a62:	4313      	orrs	r3, r2
    9a64:	b25a      	sxtb	r2, r3
    9a66:	1dfb      	adds	r3, r7, #7
    9a68:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
    9a6a:	4b3e      	ldr	r3, [pc, #248]	; (9b64 <initMag+0x13c>)
    9a6c:	2221      	movs	r2, #33	; 0x21
    9a6e:	5c9b      	ldrb	r3, [r3, r2]
    9a70:	009b      	lsls	r3, r3, #2
    9a72:	b25b      	sxtb	r3, r3
    9a74:	221c      	movs	r2, #28
    9a76:	4013      	ands	r3, r2
    9a78:	b25a      	sxtb	r2, r3
    9a7a:	1dfb      	adds	r3, r7, #7
    9a7c:	781b      	ldrb	r3, [r3, #0]
    9a7e:	b25b      	sxtb	r3, r3
    9a80:	4313      	orrs	r3, r2
    9a82:	b25a      	sxtb	r2, r3
    9a84:	1dfb      	adds	r3, r7, #7
    9a86:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG1_M, tempRegValue);
    9a88:	1dfb      	adds	r3, r7, #7
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	0019      	movs	r1, r3
    9a8e:	2020      	movs	r0, #32
    9a90:	4b35      	ldr	r3, [pc, #212]	; (9b68 <initMag+0x140>)
    9a92:	4798      	blx	r3
	// CTRL_REG2_M (Default value 0x00)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
    9a94:	1dfb      	adds	r3, r7, #7
    9a96:	2200      	movs	r2, #0
    9a98:	701a      	strb	r2, [r3, #0]
	switch (settings.mag.scale)
    9a9a:	4b32      	ldr	r3, [pc, #200]	; (9b64 <initMag+0x13c>)
    9a9c:	2220      	movs	r2, #32
    9a9e:	5c9b      	ldrb	r3, [r3, r2]
    9aa0:	2b0c      	cmp	r3, #12
    9aa2:	d00a      	beq.n	9aba <initMag+0x92>
    9aa4:	2b10      	cmp	r3, #16
    9aa6:	d00f      	beq.n	9ac8 <initMag+0xa0>
    9aa8:	2b08      	cmp	r3, #8
    9aaa:	d114      	bne.n	9ad6 <initMag+0xae>
	{
	case 8:
		tempRegValue |= (0x1 << 5);
    9aac:	1dfb      	adds	r3, r7, #7
    9aae:	1dfa      	adds	r2, r7, #7
    9ab0:	7812      	ldrb	r2, [r2, #0]
    9ab2:	2120      	movs	r1, #32
    9ab4:	430a      	orrs	r2, r1
    9ab6:	701a      	strb	r2, [r3, #0]
		break;
    9ab8:	e00d      	b.n	9ad6 <initMag+0xae>
	case 12:
		tempRegValue |= (0x2 << 5);
    9aba:	1dfb      	adds	r3, r7, #7
    9abc:	1dfa      	adds	r2, r7, #7
    9abe:	7812      	ldrb	r2, [r2, #0]
    9ac0:	2140      	movs	r1, #64	; 0x40
    9ac2:	430a      	orrs	r2, r1
    9ac4:	701a      	strb	r2, [r3, #0]
		break;
    9ac6:	e006      	b.n	9ad6 <initMag+0xae>
	case 16:
		tempRegValue |= (0x3 << 5);
    9ac8:	1dfb      	adds	r3, r7, #7
    9aca:	1dfa      	adds	r2, r7, #7
    9acc:	7812      	ldrb	r2, [r2, #0]
    9ace:	2160      	movs	r1, #96	; 0x60
    9ad0:	430a      	orrs	r2, r1
    9ad2:	701a      	strb	r2, [r3, #0]
		break;
    9ad4:	46c0      	nop			; (mov r8, r8)
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
    9ad6:	1dfb      	adds	r3, r7, #7
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	0019      	movs	r1, r3
    9adc:	2021      	movs	r0, #33	; 0x21
    9ade:	4b22      	ldr	r3, [pc, #136]	; (9b68 <initMag+0x140>)
    9ae0:	4798      	blx	r3
	// LP - Low-power mode cofiguration (1:enable)
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
    9ae2:	1dfb      	adds	r3, r7, #7
    9ae4:	2200      	movs	r2, #0
    9ae6:	701a      	strb	r2, [r3, #0]
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
    9ae8:	4b1e      	ldr	r3, [pc, #120]	; (9b64 <initMag+0x13c>)
    9aea:	2225      	movs	r2, #37	; 0x25
    9aec:	5c9b      	ldrb	r3, [r3, r2]
    9aee:	2b00      	cmp	r3, #0
    9af0:	d005      	beq.n	9afe <initMag+0xd6>
    9af2:	1dfb      	adds	r3, r7, #7
    9af4:	1dfa      	adds	r2, r7, #7
    9af6:	7812      	ldrb	r2, [r2, #0]
    9af8:	2120      	movs	r1, #32
    9afa:	430a      	orrs	r2, r1
    9afc:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.operatingMode & 0x3);
    9afe:	4b19      	ldr	r3, [pc, #100]	; (9b64 <initMag+0x13c>)
    9b00:	2226      	movs	r2, #38	; 0x26
    9b02:	5c9b      	ldrb	r3, [r3, r2]
    9b04:	b25b      	sxtb	r3, r3
    9b06:	2203      	movs	r2, #3
    9b08:	4013      	ands	r3, r2
    9b0a:	b25a      	sxtb	r2, r3
    9b0c:	1dfb      	adds	r3, r7, #7
    9b0e:	781b      	ldrb	r3, [r3, #0]
    9b10:	b25b      	sxtb	r3, r3
    9b12:	4313      	orrs	r3, r2
    9b14:	b25a      	sxtb	r2, r3
    9b16:	1dfb      	adds	r3, r7, #7
    9b18:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
    9b1a:	1dfb      	adds	r3, r7, #7
    9b1c:	781b      	ldrb	r3, [r3, #0]
    9b1e:	0019      	movs	r1, r3
    9b20:	2022      	movs	r0, #34	; 0x22
    9b22:	4b11      	ldr	r3, [pc, #68]	; (9b68 <initMag+0x140>)
    9b24:	4798      	blx	r3
	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
	// OMZ[1:0] - Z-axis operative mode selection
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
    9b26:	1dfb      	adds	r3, r7, #7
    9b28:	2200      	movs	r2, #0
    9b2a:	701a      	strb	r2, [r3, #0]
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
    9b2c:	4b0d      	ldr	r3, [pc, #52]	; (9b64 <initMag+0x13c>)
    9b2e:	2224      	movs	r2, #36	; 0x24
    9b30:	5c9b      	ldrb	r3, [r3, r2]
    9b32:	009b      	lsls	r3, r3, #2
    9b34:	b2da      	uxtb	r2, r3
    9b36:	1dfb      	adds	r3, r7, #7
    9b38:	210c      	movs	r1, #12
    9b3a:	400a      	ands	r2, r1
    9b3c:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG4_M, tempRegValue);
    9b3e:	1dfb      	adds	r3, r7, #7
    9b40:	781b      	ldrb	r3, [r3, #0]
    9b42:	0019      	movs	r1, r3
    9b44:	2023      	movs	r0, #35	; 0x23
    9b46:	4b08      	ldr	r3, [pc, #32]	; (9b68 <initMag+0x140>)
    9b48:	4798      	blx	r3
	
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
    9b4a:	1dfb      	adds	r3, r7, #7
    9b4c:	2200      	movs	r2, #0
    9b4e:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG5_M, tempRegValue);
    9b50:	1dfb      	adds	r3, r7, #7
    9b52:	781b      	ldrb	r3, [r3, #0]
    9b54:	0019      	movs	r1, r3
    9b56:	2024      	movs	r0, #36	; 0x24
    9b58:	4b03      	ldr	r3, [pc, #12]	; (9b68 <initMag+0x140>)
    9b5a:	4798      	blx	r3
}
    9b5c:	46c0      	nop			; (mov r8, r8)
    9b5e:	46bd      	mov	sp, r7
    9b60:	b002      	add	sp, #8
    9b62:	bd80      	pop	{r7, pc}
    9b64:	200004e8 	.word	0x200004e8
    9b68:	0000a025 	.word	0x0000a025

00009b6c <readAccel>:
	
	return ((status & (1<<axis)) >> axis);
}

void readAccel()
{
    9b6c:	b580      	push	{r7, lr}
    9b6e:	b082      	sub	sp, #8
    9b70:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
    9b72:	003b      	movs	r3, r7
    9b74:	2206      	movs	r2, #6
    9b76:	0019      	movs	r1, r3
    9b78:	2028      	movs	r0, #40	; 0x28
    9b7a:	4b29      	ldr	r3, [pc, #164]	; (9c20 <readAccel+0xb4>)
    9b7c:	4798      	blx	r3
	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
    9b7e:	003b      	movs	r3, r7
    9b80:	785b      	ldrb	r3, [r3, #1]
    9b82:	021b      	lsls	r3, r3, #8
    9b84:	b21a      	sxth	r2, r3
    9b86:	003b      	movs	r3, r7
    9b88:	781b      	ldrb	r3, [r3, #0]
    9b8a:	b21b      	sxth	r3, r3
    9b8c:	4313      	orrs	r3, r2
    9b8e:	b21a      	sxth	r2, r3
    9b90:	4b24      	ldr	r3, [pc, #144]	; (9c24 <readAccel+0xb8>)
    9b92:	801a      	strh	r2, [r3, #0]
	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
    9b94:	003b      	movs	r3, r7
    9b96:	78db      	ldrb	r3, [r3, #3]
    9b98:	021b      	lsls	r3, r3, #8
    9b9a:	b21a      	sxth	r2, r3
    9b9c:	003b      	movs	r3, r7
    9b9e:	789b      	ldrb	r3, [r3, #2]
    9ba0:	b21b      	sxth	r3, r3
    9ba2:	4313      	orrs	r3, r2
    9ba4:	b21a      	sxth	r2, r3
    9ba6:	4b20      	ldr	r3, [pc, #128]	; (9c28 <readAccel+0xbc>)
    9ba8:	801a      	strh	r2, [r3, #0]
	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
    9baa:	003b      	movs	r3, r7
    9bac:	795b      	ldrb	r3, [r3, #5]
    9bae:	021b      	lsls	r3, r3, #8
    9bb0:	b21a      	sxth	r2, r3
    9bb2:	003b      	movs	r3, r7
    9bb4:	791b      	ldrb	r3, [r3, #4]
    9bb6:	b21b      	sxth	r3, r3
    9bb8:	4313      	orrs	r3, r2
    9bba:	b21a      	sxth	r2, r3
    9bbc:	4b1b      	ldr	r3, [pc, #108]	; (9c2c <readAccel+0xc0>)
    9bbe:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    9bc0:	4b1b      	ldr	r3, [pc, #108]	; (9c30 <readAccel+0xc4>)
    9bc2:	781b      	ldrb	r3, [r3, #0]
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	d026      	beq.n	9c16 <readAccel+0xaa>
	{
		ax -= aBiasRaw[X_AXIS];
    9bc8:	4b16      	ldr	r3, [pc, #88]	; (9c24 <readAccel+0xb8>)
    9bca:	2200      	movs	r2, #0
    9bcc:	5e9b      	ldrsh	r3, [r3, r2]
    9bce:	b29a      	uxth	r2, r3
    9bd0:	4b18      	ldr	r3, [pc, #96]	; (9c34 <readAccel+0xc8>)
    9bd2:	2100      	movs	r1, #0
    9bd4:	5e5b      	ldrsh	r3, [r3, r1]
    9bd6:	b29b      	uxth	r3, r3
    9bd8:	1ad3      	subs	r3, r2, r3
    9bda:	b29b      	uxth	r3, r3
    9bdc:	b21a      	sxth	r2, r3
    9bde:	4b11      	ldr	r3, [pc, #68]	; (9c24 <readAccel+0xb8>)
    9be0:	801a      	strh	r2, [r3, #0]
		ay -= aBiasRaw[Y_AXIS];
    9be2:	4b11      	ldr	r3, [pc, #68]	; (9c28 <readAccel+0xbc>)
    9be4:	2200      	movs	r2, #0
    9be6:	5e9b      	ldrsh	r3, [r3, r2]
    9be8:	b29a      	uxth	r2, r3
    9bea:	4b12      	ldr	r3, [pc, #72]	; (9c34 <readAccel+0xc8>)
    9bec:	2102      	movs	r1, #2
    9bee:	5e5b      	ldrsh	r3, [r3, r1]
    9bf0:	b29b      	uxth	r3, r3
    9bf2:	1ad3      	subs	r3, r2, r3
    9bf4:	b29b      	uxth	r3, r3
    9bf6:	b21a      	sxth	r2, r3
    9bf8:	4b0b      	ldr	r3, [pc, #44]	; (9c28 <readAccel+0xbc>)
    9bfa:	801a      	strh	r2, [r3, #0]
		az -= aBiasRaw[Z_AXIS];
    9bfc:	4b0b      	ldr	r3, [pc, #44]	; (9c2c <readAccel+0xc0>)
    9bfe:	2200      	movs	r2, #0
    9c00:	5e9b      	ldrsh	r3, [r3, r2]
    9c02:	b29a      	uxth	r2, r3
    9c04:	4b0b      	ldr	r3, [pc, #44]	; (9c34 <readAccel+0xc8>)
    9c06:	2104      	movs	r1, #4
    9c08:	5e5b      	ldrsh	r3, [r3, r1]
    9c0a:	b29b      	uxth	r3, r3
    9c0c:	1ad3      	subs	r3, r2, r3
    9c0e:	b29b      	uxth	r3, r3
    9c10:	b21a      	sxth	r2, r3
    9c12:	4b06      	ldr	r3, [pc, #24]	; (9c2c <readAccel+0xc0>)
    9c14:	801a      	strh	r2, [r3, #0]
	}
}
    9c16:	46c0      	nop			; (mov r8, r8)
    9c18:	46bd      	mov	sp, r7
    9c1a:	b002      	add	sp, #8
    9c1c:	bd80      	pop	{r7, pc}
    9c1e:	46c0      	nop			; (mov r8, r8)
    9c20:	0000a089 	.word	0x0000a089
    9c24:	200002ea 	.word	0x200002ea
    9c28:	200002ec 	.word	0x200002ec
    9c2c:	200002ee 	.word	0x200002ee
    9c30:	20000908 	.word	0x20000908
    9c34:	20000ca4 	.word	0x20000ca4

00009c38 <readMag>:
	
	return value;
}

void readMag()
{
    9c38:	b580      	push	{r7, lr}
    9c3a:	b082      	sub	sp, #8
    9c3c:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
    9c3e:	003b      	movs	r3, r7
    9c40:	2206      	movs	r2, #6
    9c42:	0019      	movs	r1, r3
    9c44:	2028      	movs	r0, #40	; 0x28
    9c46:	4b13      	ldr	r3, [pc, #76]	; (9c94 <readMag+0x5c>)
    9c48:	4798      	blx	r3
	mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
    9c4a:	003b      	movs	r3, r7
    9c4c:	785b      	ldrb	r3, [r3, #1]
    9c4e:	021b      	lsls	r3, r3, #8
    9c50:	b21a      	sxth	r2, r3
    9c52:	003b      	movs	r3, r7
    9c54:	781b      	ldrb	r3, [r3, #0]
    9c56:	b21b      	sxth	r3, r3
    9c58:	4313      	orrs	r3, r2
    9c5a:	b21a      	sxth	r2, r3
    9c5c:	4b0e      	ldr	r3, [pc, #56]	; (9c98 <readMag+0x60>)
    9c5e:	801a      	strh	r2, [r3, #0]
	my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
    9c60:	003b      	movs	r3, r7
    9c62:	78db      	ldrb	r3, [r3, #3]
    9c64:	021b      	lsls	r3, r3, #8
    9c66:	b21a      	sxth	r2, r3
    9c68:	003b      	movs	r3, r7
    9c6a:	789b      	ldrb	r3, [r3, #2]
    9c6c:	b21b      	sxth	r3, r3
    9c6e:	4313      	orrs	r3, r2
    9c70:	b21a      	sxth	r2, r3
    9c72:	4b0a      	ldr	r3, [pc, #40]	; (9c9c <readMag+0x64>)
    9c74:	801a      	strh	r2, [r3, #0]
	mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
    9c76:	003b      	movs	r3, r7
    9c78:	795b      	ldrb	r3, [r3, #5]
    9c7a:	021b      	lsls	r3, r3, #8
    9c7c:	b21a      	sxth	r2, r3
    9c7e:	003b      	movs	r3, r7
    9c80:	791b      	ldrb	r3, [r3, #4]
    9c82:	b21b      	sxth	r3, r3
    9c84:	4313      	orrs	r3, r2
    9c86:	b21a      	sxth	r2, r3
    9c88:	4b05      	ldr	r3, [pc, #20]	; (9ca0 <readMag+0x68>)
    9c8a:	801a      	strh	r2, [r3, #0]
}
    9c8c:	46c0      	nop			; (mov r8, r8)
    9c8e:	46bd      	mov	sp, r7
    9c90:	b002      	add	sp, #8
    9c92:	bd80      	pop	{r7, pc}
    9c94:	0000a0f5 	.word	0x0000a0f5
    9c98:	200002f0 	.word	0x200002f0
    9c9c:	200002f2 	.word	0x200002f2
    9ca0:	200002f4 	.word	0x200002f4

00009ca4 <readGyro>:
	xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
	temperature = ((int16_t)temp[1] << 8) | temp[0];
}

void readGyro()
{
    9ca4:	b580      	push	{r7, lr}
    9ca6:	b082      	sub	sp, #8
    9ca8:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
    9caa:	003b      	movs	r3, r7
    9cac:	2206      	movs	r2, #6
    9cae:	0019      	movs	r1, r3
    9cb0:	2018      	movs	r0, #24
    9cb2:	4b29      	ldr	r3, [pc, #164]	; (9d58 <readGyro+0xb4>)
    9cb4:	4798      	blx	r3
	gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
    9cb6:	003b      	movs	r3, r7
    9cb8:	785b      	ldrb	r3, [r3, #1]
    9cba:	021b      	lsls	r3, r3, #8
    9cbc:	b21a      	sxth	r2, r3
    9cbe:	003b      	movs	r3, r7
    9cc0:	781b      	ldrb	r3, [r3, #0]
    9cc2:	b21b      	sxth	r3, r3
    9cc4:	4313      	orrs	r3, r2
    9cc6:	b21a      	sxth	r2, r3
    9cc8:	4b24      	ldr	r3, [pc, #144]	; (9d5c <readGyro+0xb8>)
    9cca:	801a      	strh	r2, [r3, #0]
	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
    9ccc:	003b      	movs	r3, r7
    9cce:	78db      	ldrb	r3, [r3, #3]
    9cd0:	021b      	lsls	r3, r3, #8
    9cd2:	b21a      	sxth	r2, r3
    9cd4:	003b      	movs	r3, r7
    9cd6:	789b      	ldrb	r3, [r3, #2]
    9cd8:	b21b      	sxth	r3, r3
    9cda:	4313      	orrs	r3, r2
    9cdc:	b21a      	sxth	r2, r3
    9cde:	4b20      	ldr	r3, [pc, #128]	; (9d60 <readGyro+0xbc>)
    9ce0:	801a      	strh	r2, [r3, #0]
	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
    9ce2:	003b      	movs	r3, r7
    9ce4:	795b      	ldrb	r3, [r3, #5]
    9ce6:	021b      	lsls	r3, r3, #8
    9ce8:	b21a      	sxth	r2, r3
    9cea:	003b      	movs	r3, r7
    9cec:	791b      	ldrb	r3, [r3, #4]
    9cee:	b21b      	sxth	r3, r3
    9cf0:	4313      	orrs	r3, r2
    9cf2:	b21a      	sxth	r2, r3
    9cf4:	4b1b      	ldr	r3, [pc, #108]	; (9d64 <readGyro+0xc0>)
    9cf6:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    9cf8:	4b1b      	ldr	r3, [pc, #108]	; (9d68 <readGyro+0xc4>)
    9cfa:	781b      	ldrb	r3, [r3, #0]
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	d026      	beq.n	9d4e <readGyro+0xaa>
	{
		gx -= gBiasRaw[X_AXIS];
    9d00:	4b16      	ldr	r3, [pc, #88]	; (9d5c <readGyro+0xb8>)
    9d02:	2200      	movs	r2, #0
    9d04:	5e9b      	ldrsh	r3, [r3, r2]
    9d06:	b29a      	uxth	r2, r3
    9d08:	4b18      	ldr	r3, [pc, #96]	; (9d6c <readGyro+0xc8>)
    9d0a:	2100      	movs	r1, #0
    9d0c:	5e5b      	ldrsh	r3, [r3, r1]
    9d0e:	b29b      	uxth	r3, r3
    9d10:	1ad3      	subs	r3, r2, r3
    9d12:	b29b      	uxth	r3, r3
    9d14:	b21a      	sxth	r2, r3
    9d16:	4b11      	ldr	r3, [pc, #68]	; (9d5c <readGyro+0xb8>)
    9d18:	801a      	strh	r2, [r3, #0]
		gy -= gBiasRaw[Y_AXIS];
    9d1a:	4b11      	ldr	r3, [pc, #68]	; (9d60 <readGyro+0xbc>)
    9d1c:	2200      	movs	r2, #0
    9d1e:	5e9b      	ldrsh	r3, [r3, r2]
    9d20:	b29a      	uxth	r2, r3
    9d22:	4b12      	ldr	r3, [pc, #72]	; (9d6c <readGyro+0xc8>)
    9d24:	2102      	movs	r1, #2
    9d26:	5e5b      	ldrsh	r3, [r3, r1]
    9d28:	b29b      	uxth	r3, r3
    9d2a:	1ad3      	subs	r3, r2, r3
    9d2c:	b29b      	uxth	r3, r3
    9d2e:	b21a      	sxth	r2, r3
    9d30:	4b0b      	ldr	r3, [pc, #44]	; (9d60 <readGyro+0xbc>)
    9d32:	801a      	strh	r2, [r3, #0]
		gz -= gBiasRaw[Z_AXIS];
    9d34:	4b0b      	ldr	r3, [pc, #44]	; (9d64 <readGyro+0xc0>)
    9d36:	2200      	movs	r2, #0
    9d38:	5e9b      	ldrsh	r3, [r3, r2]
    9d3a:	b29a      	uxth	r2, r3
    9d3c:	4b0b      	ldr	r3, [pc, #44]	; (9d6c <readGyro+0xc8>)
    9d3e:	2104      	movs	r1, #4
    9d40:	5e5b      	ldrsh	r3, [r3, r1]
    9d42:	b29b      	uxth	r3, r3
    9d44:	1ad3      	subs	r3, r2, r3
    9d46:	b29b      	uxth	r3, r3
    9d48:	b21a      	sxth	r2, r3
    9d4a:	4b06      	ldr	r3, [pc, #24]	; (9d64 <readGyro+0xc0>)
    9d4c:	801a      	strh	r2, [r3, #0]
	}
}
    9d4e:	46c0      	nop			; (mov r8, r8)
    9d50:	46bd      	mov	sp, r7
    9d52:	b002      	add	sp, #8
    9d54:	bd80      	pop	{r7, pc}
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	0000a089 	.word	0x0000a089
    9d5c:	200002e4 	.word	0x200002e4
    9d60:	200002e6 	.word	0x200002e6
    9d64:	200002e8 	.word	0x200002e8
    9d68:	20000908 	.word	0x20000908
    9d6c:	20000c9c 	.word	0x20000c9c

00009d70 <calcGyro>:
	
	return value;
}

float calcGyro(int16_t gyro)
{
    9d70:	b580      	push	{r7, lr}
    9d72:	b082      	sub	sp, #8
    9d74:	af00      	add	r7, sp, #0
    9d76:	0002      	movs	r2, r0
    9d78:	1dbb      	adds	r3, r7, #6
    9d7a:	801a      	strh	r2, [r3, #0]
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
    9d7c:	1dbb      	adds	r3, r7, #6
    9d7e:	2200      	movs	r2, #0
    9d80:	5e9a      	ldrsh	r2, [r3, r2]
    9d82:	4b06      	ldr	r3, [pc, #24]	; (9d9c <calcGyro+0x2c>)
    9d84:	0010      	movs	r0, r2
    9d86:	4798      	blx	r3
    9d88:	4b05      	ldr	r3, [pc, #20]	; (9da0 <calcGyro+0x30>)
    9d8a:	681a      	ldr	r2, [r3, #0]
    9d8c:	4b05      	ldr	r3, [pc, #20]	; (9da4 <calcGyro+0x34>)
    9d8e:	1c11      	adds	r1, r2, #0
    9d90:	4798      	blx	r3
    9d92:	1c03      	adds	r3, r0, #0
}
    9d94:	1c18      	adds	r0, r3, #0
    9d96:	46bd      	mov	sp, r7
    9d98:	b002      	add	sp, #8
    9d9a:	bd80      	pop	{r7, pc}
    9d9c:	00015161 	.word	0x00015161
    9da0:	20000f04 	.word	0x20000f04
    9da4:	00014ba9 	.word	0x00014ba9

00009da8 <calcAccel>:

float calcAccel(int16_t accel)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b082      	sub	sp, #8
    9dac:	af00      	add	r7, sp, #0
    9dae:	0002      	movs	r2, r0
    9db0:	1dbb      	adds	r3, r7, #6
    9db2:	801a      	strh	r2, [r3, #0]
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
    9db4:	1dbb      	adds	r3, r7, #6
    9db6:	2200      	movs	r2, #0
    9db8:	5e9a      	ldrsh	r2, [r3, r2]
    9dba:	4b06      	ldr	r3, [pc, #24]	; (9dd4 <calcAccel+0x2c>)
    9dbc:	0010      	movs	r0, r2
    9dbe:	4798      	blx	r3
    9dc0:	4b05      	ldr	r3, [pc, #20]	; (9dd8 <calcAccel+0x30>)
    9dc2:	681a      	ldr	r2, [r3, #0]
    9dc4:	4b05      	ldr	r3, [pc, #20]	; (9ddc <calcAccel+0x34>)
    9dc6:	1c11      	adds	r1, r2, #0
    9dc8:	4798      	blx	r3
    9dca:	1c03      	adds	r3, r0, #0
}
    9dcc:	1c18      	adds	r0, r3, #0
    9dce:	46bd      	mov	sp, r7
    9dd0:	b002      	add	sp, #8
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	00015161 	.word	0x00015161
    9dd8:	200009bc 	.word	0x200009bc
    9ddc:	00014ba9 	.word	0x00014ba9

00009de0 <calcgRes>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void calcgRes()
{
    9de0:	b580      	push	{r7, lr}
    9de2:	af00      	add	r7, sp, #0
	gRes = ((float) settings.gyro.scale) / 32768.0;
    9de4:	4b08      	ldr	r3, [pc, #32]	; (9e08 <calcgRes+0x28>)
    9de6:	88da      	ldrh	r2, [r3, #6]
    9de8:	4b08      	ldr	r3, [pc, #32]	; (9e0c <calcgRes+0x2c>)
    9dea:	0010      	movs	r0, r2
    9dec:	4798      	blx	r3
    9dee:	1c02      	adds	r2, r0, #0
    9df0:	4b07      	ldr	r3, [pc, #28]	; (9e10 <calcgRes+0x30>)
    9df2:	218e      	movs	r1, #142	; 0x8e
    9df4:	05c9      	lsls	r1, r1, #23
    9df6:	1c10      	adds	r0, r2, #0
    9df8:	4798      	blx	r3
    9dfa:	1c03      	adds	r3, r0, #0
    9dfc:	1c1a      	adds	r2, r3, #0
    9dfe:	4b05      	ldr	r3, [pc, #20]	; (9e14 <calcgRes+0x34>)
    9e00:	601a      	str	r2, [r3, #0]
}
    9e02:	46c0      	nop			; (mov r8, r8)
    9e04:	46bd      	mov	sp, r7
    9e06:	bd80      	pop	{r7, pc}
    9e08:	200004e8 	.word	0x200004e8
    9e0c:	00015201 	.word	0x00015201
    9e10:	000147c9 	.word	0x000147c9
    9e14:	20000f04 	.word	0x20000f04

00009e18 <calcaRes>:

void calcaRes()
{
    9e18:	b580      	push	{r7, lr}
    9e1a:	af00      	add	r7, sp, #0
	aRes = ((float) settings.accel.scale) / 32768.0;
    9e1c:	4b08      	ldr	r3, [pc, #32]	; (9e40 <calcaRes+0x28>)
    9e1e:	7dda      	ldrb	r2, [r3, #23]
    9e20:	4b08      	ldr	r3, [pc, #32]	; (9e44 <calcaRes+0x2c>)
    9e22:	0010      	movs	r0, r2
    9e24:	4798      	blx	r3
    9e26:	1c02      	adds	r2, r0, #0
    9e28:	4b07      	ldr	r3, [pc, #28]	; (9e48 <calcaRes+0x30>)
    9e2a:	218e      	movs	r1, #142	; 0x8e
    9e2c:	05c9      	lsls	r1, r1, #23
    9e2e:	1c10      	adds	r0, r2, #0
    9e30:	4798      	blx	r3
    9e32:	1c03      	adds	r3, r0, #0
    9e34:	1c1a      	adds	r2, r3, #0
    9e36:	4b05      	ldr	r3, [pc, #20]	; (9e4c <calcaRes+0x34>)
    9e38:	601a      	str	r2, [r3, #0]
}
    9e3a:	46c0      	nop			; (mov r8, r8)
    9e3c:	46bd      	mov	sp, r7
    9e3e:	bd80      	pop	{r7, pc}
    9e40:	200004e8 	.word	0x200004e8
    9e44:	00015201 	.word	0x00015201
    9e48:	000147c9 	.word	0x000147c9
    9e4c:	200009bc 	.word	0x200009bc

00009e50 <calcmRes>:

void calcmRes()
{
    9e50:	b580      	push	{r7, lr}
    9e52:	af00      	add	r7, sp, #0
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
    9e54:	4b12      	ldr	r3, [pc, #72]	; (9ea0 <calcmRes+0x50>)
    9e56:	2220      	movs	r2, #32
    9e58:	5c9b      	ldrb	r3, [r3, r2]
    9e5a:	2b08      	cmp	r3, #8
    9e5c:	d00d      	beq.n	9e7a <calcmRes+0x2a>
    9e5e:	dc02      	bgt.n	9e66 <calcmRes+0x16>
    9e60:	2b04      	cmp	r3, #4
    9e62:	d005      	beq.n	9e70 <calcmRes+0x20>
	case 16:
		mRes = magSensitivity[3];
		break;
	}
	
}
    9e64:	e018      	b.n	9e98 <calcmRes+0x48>
	switch (settings.mag.scale)
    9e66:	2b0c      	cmp	r3, #12
    9e68:	d00c      	beq.n	9e84 <calcmRes+0x34>
    9e6a:	2b10      	cmp	r3, #16
    9e6c:	d00f      	beq.n	9e8e <calcmRes+0x3e>
}
    9e6e:	e013      	b.n	9e98 <calcmRes+0x48>
		mRes = magSensitivity[0];
    9e70:	4b0c      	ldr	r3, [pc, #48]	; (9ea4 <calcmRes+0x54>)
    9e72:	681a      	ldr	r2, [r3, #0]
    9e74:	4b0c      	ldr	r3, [pc, #48]	; (9ea8 <calcmRes+0x58>)
    9e76:	601a      	str	r2, [r3, #0]
		break;
    9e78:	e00e      	b.n	9e98 <calcmRes+0x48>
		mRes = magSensitivity[1];
    9e7a:	4b0a      	ldr	r3, [pc, #40]	; (9ea4 <calcmRes+0x54>)
    9e7c:	685a      	ldr	r2, [r3, #4]
    9e7e:	4b0a      	ldr	r3, [pc, #40]	; (9ea8 <calcmRes+0x58>)
    9e80:	601a      	str	r2, [r3, #0]
		break;
    9e82:	e009      	b.n	9e98 <calcmRes+0x48>
		mRes = magSensitivity[2];
    9e84:	4b07      	ldr	r3, [pc, #28]	; (9ea4 <calcmRes+0x54>)
    9e86:	689a      	ldr	r2, [r3, #8]
    9e88:	4b07      	ldr	r3, [pc, #28]	; (9ea8 <calcmRes+0x58>)
    9e8a:	601a      	str	r2, [r3, #0]
		break;
    9e8c:	e004      	b.n	9e98 <calcmRes+0x48>
		mRes = magSensitivity[3];
    9e8e:	4b05      	ldr	r3, [pc, #20]	; (9ea4 <calcmRes+0x54>)
    9e90:	68da      	ldr	r2, [r3, #12]
    9e92:	4b05      	ldr	r3, [pc, #20]	; (9ea8 <calcmRes+0x58>)
    9e94:	601a      	str	r2, [r3, #0]
		break;
    9e96:	46c0      	nop			; (mov r8, r8)
}
    9e98:	46c0      	nop			; (mov r8, r8)
    9e9a:	46bd      	mov	sp, r7
    9e9c:	bd80      	pop	{r7, pc}
    9e9e:	46c0      	nop			; (mov r8, r8)
    9ea0:	200004e8 	.word	0x200004e8
    9ea4:	20000008 	.word	0x20000008
    9ea8:	20000fa8 	.word	0x20000fa8

00009eac <enableFIFO>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void enableFIFO(bool enable)
{
    9eac:	b590      	push	{r4, r7, lr}
    9eae:	b085      	sub	sp, #20
    9eb0:	af00      	add	r7, sp, #0
    9eb2:	0002      	movs	r2, r0
    9eb4:	1dfb      	adds	r3, r7, #7
    9eb6:	701a      	strb	r2, [r3, #0]
	uint8_t temp = xgReadByte(CTRL_REG9);
    9eb8:	230f      	movs	r3, #15
    9eba:	18fc      	adds	r4, r7, r3
    9ebc:	2023      	movs	r0, #35	; 0x23
    9ebe:	4b12      	ldr	r3, [pc, #72]	; (9f08 <enableFIFO+0x5c>)
    9ec0:	4798      	blx	r3
    9ec2:	0003      	movs	r3, r0
    9ec4:	7023      	strb	r3, [r4, #0]
	if (enable) temp |= (1<<1);
    9ec6:	1dfb      	adds	r3, r7, #7
    9ec8:	781b      	ldrb	r3, [r3, #0]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d008      	beq.n	9ee0 <enableFIFO+0x34>
    9ece:	230f      	movs	r3, #15
    9ed0:	18fb      	adds	r3, r7, r3
    9ed2:	220f      	movs	r2, #15
    9ed4:	18ba      	adds	r2, r7, r2
    9ed6:	7812      	ldrb	r2, [r2, #0]
    9ed8:	2102      	movs	r1, #2
    9eda:	430a      	orrs	r2, r1
    9edc:	701a      	strb	r2, [r3, #0]
    9ede:	e007      	b.n	9ef0 <enableFIFO+0x44>
	else temp &= ~(1<<1);
    9ee0:	230f      	movs	r3, #15
    9ee2:	18fb      	adds	r3, r7, r3
    9ee4:	220f      	movs	r2, #15
    9ee6:	18ba      	adds	r2, r7, r2
    9ee8:	7812      	ldrb	r2, [r2, #0]
    9eea:	2102      	movs	r1, #2
    9eec:	438a      	bics	r2, r1
    9eee:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG9, temp);
    9ef0:	230f      	movs	r3, #15
    9ef2:	18fb      	adds	r3, r7, r3
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	0019      	movs	r1, r3
    9ef8:	2023      	movs	r0, #35	; 0x23
    9efa:	4b04      	ldr	r3, [pc, #16]	; (9f0c <enableFIFO+0x60>)
    9efc:	4798      	blx	r3
}
    9efe:	46c0      	nop			; (mov r8, r8)
    9f00:	46bd      	mov	sp, r7
    9f02:	b005      	add	sp, #20
    9f04:	bd90      	pop	{r4, r7, pc}
    9f06:	46c0      	nop			; (mov r8, r8)
    9f08:	0000a059 	.word	0x0000a059
    9f0c:	00009ff1 	.word	0x00009ff1

00009f10 <setFIFO>:

void setFIFO(enum fifoMode_type fifoMode, uint8_t fifoThs)
{
    9f10:	b580      	push	{r7, lr}
    9f12:	b084      	sub	sp, #16
    9f14:	af00      	add	r7, sp, #0
    9f16:	0002      	movs	r2, r0
    9f18:	1dfb      	adds	r3, r7, #7
    9f1a:	701a      	strb	r2, [r3, #0]
    9f1c:	1dbb      	adds	r3, r7, #6
    9f1e:	1c0a      	adds	r2, r1, #0
    9f20:	701a      	strb	r2, [r3, #0]
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
    9f22:	230f      	movs	r3, #15
    9f24:	18fa      	adds	r2, r7, r3
    9f26:	1dbb      	adds	r3, r7, #6
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	b2d9      	uxtb	r1, r3
    9f2c:	291f      	cmp	r1, #31
    9f2e:	d900      	bls.n	9f32 <setFIFO+0x22>
    9f30:	231f      	movs	r3, #31
    9f32:	7013      	strb	r3, [r2, #0]
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
    9f34:	1dfb      	adds	r3, r7, #7
    9f36:	781b      	ldrb	r3, [r3, #0]
    9f38:	015b      	lsls	r3, r3, #5
    9f3a:	b25a      	sxtb	r2, r3
    9f3c:	230f      	movs	r3, #15
    9f3e:	18fb      	adds	r3, r7, r3
    9f40:	781b      	ldrb	r3, [r3, #0]
    9f42:	b25b      	sxtb	r3, r3
    9f44:	211f      	movs	r1, #31
    9f46:	400b      	ands	r3, r1
    9f48:	b25b      	sxtb	r3, r3
    9f4a:	4313      	orrs	r3, r2
    9f4c:	b25b      	sxtb	r3, r3
    9f4e:	b2db      	uxtb	r3, r3
    9f50:	0019      	movs	r1, r3
    9f52:	202e      	movs	r0, #46	; 0x2e
    9f54:	4b02      	ldr	r3, [pc, #8]	; (9f60 <setFIFO+0x50>)
    9f56:	4798      	blx	r3
}
    9f58:	46c0      	nop			; (mov r8, r8)
    9f5a:	46bd      	mov	sp, r7
    9f5c:	b004      	add	sp, #16
    9f5e:	bd80      	pop	{r7, pc}
    9f60:	00009ff1 	.word	0x00009ff1

00009f64 <constrainScales>:
{
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void constrainScales()
{
    9f64:	b580      	push	{r7, lr}
    9f66:	af00      	add	r7, sp, #0
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    9f68:	4b20      	ldr	r3, [pc, #128]	; (9fec <constrainScales+0x88>)
    9f6a:	88db      	ldrh	r3, [r3, #6]
    9f6c:	2bf5      	cmp	r3, #245	; 0xf5
    9f6e:	d00e      	beq.n	9f8e <constrainScales+0x2a>
    9f70:	4b1e      	ldr	r3, [pc, #120]	; (9fec <constrainScales+0x88>)
    9f72:	88da      	ldrh	r2, [r3, #6]
    9f74:	23fa      	movs	r3, #250	; 0xfa
    9f76:	005b      	lsls	r3, r3, #1
    9f78:	429a      	cmp	r2, r3
    9f7a:	d008      	beq.n	9f8e <constrainScales+0x2a>
		(settings.gyro.scale != 2000))
    9f7c:	4b1b      	ldr	r3, [pc, #108]	; (9fec <constrainScales+0x88>)
    9f7e:	88da      	ldrh	r2, [r3, #6]
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    9f80:	23fa      	movs	r3, #250	; 0xfa
    9f82:	00db      	lsls	r3, r3, #3
    9f84:	429a      	cmp	r2, r3
    9f86:	d002      	beq.n	9f8e <constrainScales+0x2a>
	{
		settings.gyro.scale = 245;
    9f88:	4b18      	ldr	r3, [pc, #96]	; (9fec <constrainScales+0x88>)
    9f8a:	22f5      	movs	r2, #245	; 0xf5
    9f8c:	80da      	strh	r2, [r3, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    9f8e:	4b17      	ldr	r3, [pc, #92]	; (9fec <constrainScales+0x88>)
    9f90:	7ddb      	ldrb	r3, [r3, #23]
    9f92:	2b02      	cmp	r3, #2
    9f94:	d00e      	beq.n	9fb4 <constrainScales+0x50>
    9f96:	4b15      	ldr	r3, [pc, #84]	; (9fec <constrainScales+0x88>)
    9f98:	7ddb      	ldrb	r3, [r3, #23]
    9f9a:	2b04      	cmp	r3, #4
    9f9c:	d00a      	beq.n	9fb4 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    9f9e:	4b13      	ldr	r3, [pc, #76]	; (9fec <constrainScales+0x88>)
    9fa0:	7ddb      	ldrb	r3, [r3, #23]
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    9fa2:	2b08      	cmp	r3, #8
    9fa4:	d006      	beq.n	9fb4 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    9fa6:	4b11      	ldr	r3, [pc, #68]	; (9fec <constrainScales+0x88>)
    9fa8:	7ddb      	ldrb	r3, [r3, #23]
    9faa:	2b10      	cmp	r3, #16
    9fac:	d002      	beq.n	9fb4 <constrainScales+0x50>
	{
		settings.accel.scale = 2;
    9fae:	4b0f      	ldr	r3, [pc, #60]	; (9fec <constrainScales+0x88>)
    9fb0:	2202      	movs	r2, #2
    9fb2:	75da      	strb	r2, [r3, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    9fb4:	4b0d      	ldr	r3, [pc, #52]	; (9fec <constrainScales+0x88>)
    9fb6:	2220      	movs	r2, #32
    9fb8:	5c9b      	ldrb	r3, [r3, r2]
    9fba:	2b04      	cmp	r3, #4
    9fbc:	d012      	beq.n	9fe4 <constrainScales+0x80>
    9fbe:	4b0b      	ldr	r3, [pc, #44]	; (9fec <constrainScales+0x88>)
    9fc0:	2220      	movs	r2, #32
    9fc2:	5c9b      	ldrb	r3, [r3, r2]
    9fc4:	2b08      	cmp	r3, #8
    9fc6:	d00d      	beq.n	9fe4 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    9fc8:	4b08      	ldr	r3, [pc, #32]	; (9fec <constrainScales+0x88>)
    9fca:	2220      	movs	r2, #32
    9fcc:	5c9b      	ldrb	r3, [r3, r2]
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    9fce:	2b0c      	cmp	r3, #12
    9fd0:	d008      	beq.n	9fe4 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    9fd2:	4b06      	ldr	r3, [pc, #24]	; (9fec <constrainScales+0x88>)
    9fd4:	2220      	movs	r2, #32
    9fd6:	5c9b      	ldrb	r3, [r3, r2]
    9fd8:	2b10      	cmp	r3, #16
    9fda:	d003      	beq.n	9fe4 <constrainScales+0x80>
	{
		settings.mag.scale = 4;
    9fdc:	4b03      	ldr	r3, [pc, #12]	; (9fec <constrainScales+0x88>)
    9fde:	2220      	movs	r2, #32
    9fe0:	2104      	movs	r1, #4
    9fe2:	5499      	strb	r1, [r3, r2]
	}
}
    9fe4:	46c0      	nop			; (mov r8, r8)
    9fe6:	46bd      	mov	sp, r7
    9fe8:	bd80      	pop	{r7, pc}
    9fea:	46c0      	nop			; (mov r8, r8)
    9fec:	200004e8 	.word	0x200004e8

00009ff0 <xgWriteByte>:

void xgWriteByte(uint8_t subAddress, uint8_t data)
{
    9ff0:	b580      	push	{r7, lr}
    9ff2:	b082      	sub	sp, #8
    9ff4:	af00      	add	r7, sp, #0
    9ff6:	0002      	movs	r2, r0
    9ff8:	1dfb      	adds	r3, r7, #7
    9ffa:	701a      	strb	r2, [r3, #0]
    9ffc:	1dbb      	adds	r3, r7, #6
    9ffe:	1c0a      	adds	r2, r1, #0
    a000:	701a      	strb	r2, [r3, #0]
		writeByte(_xgAddress, subAddress, data);
    a002:	4b06      	ldr	r3, [pc, #24]	; (a01c <xgWriteByte+0x2c>)
    a004:	7818      	ldrb	r0, [r3, #0]
    a006:	1dbb      	adds	r3, r7, #6
    a008:	781a      	ldrb	r2, [r3, #0]
    a00a:	1dfb      	adds	r3, r7, #7
    a00c:	781b      	ldrb	r3, [r3, #0]
    a00e:	0019      	movs	r1, r3
    a010:	4b03      	ldr	r3, [pc, #12]	; (a020 <xgWriteByte+0x30>)
    a012:	4798      	blx	r3
}
    a014:	46c0      	nop			; (mov r8, r8)
    a016:	46bd      	mov	sp, r7
    a018:	b002      	add	sp, #8
    a01a:	bd80      	pop	{r7, pc}
    a01c:	20000a3a 	.word	0x20000a3a
    a020:	0000a189 	.word	0x0000a189

0000a024 <mWriteByte>:

void mWriteByte(uint8_t subAddress, uint8_t data)
{
    a024:	b580      	push	{r7, lr}
    a026:	b082      	sub	sp, #8
    a028:	af00      	add	r7, sp, #0
    a02a:	0002      	movs	r2, r0
    a02c:	1dfb      	adds	r3, r7, #7
    a02e:	701a      	strb	r2, [r3, #0]
    a030:	1dbb      	adds	r3, r7, #6
    a032:	1c0a      	adds	r2, r1, #0
    a034:	701a      	strb	r2, [r3, #0]
		return writeByte(_mAddress, subAddress, data);
    a036:	4b06      	ldr	r3, [pc, #24]	; (a050 <mWriteByte+0x2c>)
    a038:	7818      	ldrb	r0, [r3, #0]
    a03a:	1dbb      	adds	r3, r7, #6
    a03c:	781a      	ldrb	r2, [r3, #0]
    a03e:	1dfb      	adds	r3, r7, #7
    a040:	781b      	ldrb	r3, [r3, #0]
    a042:	0019      	movs	r1, r3
    a044:	4b03      	ldr	r3, [pc, #12]	; (a054 <mWriteByte+0x30>)
    a046:	4798      	blx	r3
}
    a048:	46bd      	mov	sp, r7
    a04a:	b002      	add	sp, #8
    a04c:	bd80      	pop	{r7, pc}
    a04e:	46c0      	nop			; (mov r8, r8)
    a050:	200009c0 	.word	0x200009c0
    a054:	0000a189 	.word	0x0000a189

0000a058 <xgReadByte>:

uint8_t xgReadByte(uint8_t subAddress)
{
    a058:	b580      	push	{r7, lr}
    a05a:	b082      	sub	sp, #8
    a05c:	af00      	add	r7, sp, #0
    a05e:	0002      	movs	r2, r0
    a060:	1dfb      	adds	r3, r7, #7
    a062:	701a      	strb	r2, [r3, #0]
		return readByte(_xgAddress, subAddress);
    a064:	4b06      	ldr	r3, [pc, #24]	; (a080 <xgReadByte+0x28>)
    a066:	781a      	ldrb	r2, [r3, #0]
    a068:	1dfb      	adds	r3, r7, #7
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	0019      	movs	r1, r3
    a06e:	0010      	movs	r0, r2
    a070:	4b04      	ldr	r3, [pc, #16]	; (a084 <xgReadByte+0x2c>)
    a072:	4798      	blx	r3
    a074:	0003      	movs	r3, r0
}
    a076:	0018      	movs	r0, r3
    a078:	46bd      	mov	sp, r7
    a07a:	b002      	add	sp, #8
    a07c:	bd80      	pop	{r7, pc}
    a07e:	46c0      	nop			; (mov r8, r8)
    a080:	20000a3a 	.word	0x20000a3a
    a084:	0000a231 	.word	0x0000a231

0000a088 <xgReadBytes>:

void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    a088:	b590      	push	{r4, r7, lr}
    a08a:	b083      	sub	sp, #12
    a08c:	af00      	add	r7, sp, #0
    a08e:	6039      	str	r1, [r7, #0]
    a090:	0011      	movs	r1, r2
    a092:	1dfb      	adds	r3, r7, #7
    a094:	1c02      	adds	r2, r0, #0
    a096:	701a      	strb	r2, [r3, #0]
    a098:	1dbb      	adds	r3, r7, #6
    a09a:	1c0a      	adds	r2, r1, #0
    a09c:	701a      	strb	r2, [r3, #0]
		readBytes(_xgAddress, subAddress, dest, count);
    a09e:	4b07      	ldr	r3, [pc, #28]	; (a0bc <xgReadBytes+0x34>)
    a0a0:	7818      	ldrb	r0, [r3, #0]
    a0a2:	1dbb      	adds	r3, r7, #6
    a0a4:	781c      	ldrb	r4, [r3, #0]
    a0a6:	683a      	ldr	r2, [r7, #0]
    a0a8:	1dfb      	adds	r3, r7, #7
    a0aa:	7819      	ldrb	r1, [r3, #0]
    a0ac:	0023      	movs	r3, r4
    a0ae:	4c04      	ldr	r4, [pc, #16]	; (a0c0 <xgReadBytes+0x38>)
    a0b0:	47a0      	blx	r4
}
    a0b2:	46c0      	nop			; (mov r8, r8)
    a0b4:	46bd      	mov	sp, r7
    a0b6:	b003      	add	sp, #12
    a0b8:	bd90      	pop	{r4, r7, pc}
    a0ba:	46c0      	nop			; (mov r8, r8)
    a0bc:	20000a3a 	.word	0x20000a3a
    a0c0:	0000a301 	.word	0x0000a301

0000a0c4 <mReadByte>:

uint8_t mReadByte(uint8_t subAddress)
{
    a0c4:	b580      	push	{r7, lr}
    a0c6:	b082      	sub	sp, #8
    a0c8:	af00      	add	r7, sp, #0
    a0ca:	0002      	movs	r2, r0
    a0cc:	1dfb      	adds	r3, r7, #7
    a0ce:	701a      	strb	r2, [r3, #0]
		return readByte(_mAddress, subAddress);
    a0d0:	4b06      	ldr	r3, [pc, #24]	; (a0ec <mReadByte+0x28>)
    a0d2:	781a      	ldrb	r2, [r3, #0]
    a0d4:	1dfb      	adds	r3, r7, #7
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	0019      	movs	r1, r3
    a0da:	0010      	movs	r0, r2
    a0dc:	4b04      	ldr	r3, [pc, #16]	; (a0f0 <mReadByte+0x2c>)
    a0de:	4798      	blx	r3
    a0e0:	0003      	movs	r3, r0
}
    a0e2:	0018      	movs	r0, r3
    a0e4:	46bd      	mov	sp, r7
    a0e6:	b002      	add	sp, #8
    a0e8:	bd80      	pop	{r7, pc}
    a0ea:	46c0      	nop			; (mov r8, r8)
    a0ec:	200009c0 	.word	0x200009c0
    a0f0:	0000a231 	.word	0x0000a231

0000a0f4 <mReadBytes>:

void mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    a0f4:	b590      	push	{r4, r7, lr}
    a0f6:	b083      	sub	sp, #12
    a0f8:	af00      	add	r7, sp, #0
    a0fa:	6039      	str	r1, [r7, #0]
    a0fc:	0011      	movs	r1, r2
    a0fe:	1dfb      	adds	r3, r7, #7
    a100:	1c02      	adds	r2, r0, #0
    a102:	701a      	strb	r2, [r3, #0]
    a104:	1dbb      	adds	r3, r7, #6
    a106:	1c0a      	adds	r2, r1, #0
    a108:	701a      	strb	r2, [r3, #0]
		readBytes(_mAddress, subAddress, dest, count);
    a10a:	4b07      	ldr	r3, [pc, #28]	; (a128 <mReadBytes+0x34>)
    a10c:	7818      	ldrb	r0, [r3, #0]
    a10e:	1dbb      	adds	r3, r7, #6
    a110:	781c      	ldrb	r4, [r3, #0]
    a112:	683a      	ldr	r2, [r7, #0]
    a114:	1dfb      	adds	r3, r7, #7
    a116:	7819      	ldrb	r1, [r3, #0]
    a118:	0023      	movs	r3, r4
    a11a:	4c04      	ldr	r4, [pc, #16]	; (a12c <mReadBytes+0x38>)
    a11c:	47a0      	blx	r4
}
    a11e:	46c0      	nop			; (mov r8, r8)
    a120:	46bd      	mov	sp, r7
    a122:	b003      	add	sp, #12
    a124:	bd90      	pop	{r4, r7, pc}
    a126:	46c0      	nop			; (mov r8, r8)
    a128:	200009c0 	.word	0x200009c0
    a12c:	0000a301 	.word	0x0000a301

0000a130 <initI2C>:

// Configure SERCOM channel 3 as I2C master for IMU communication
void initI2C()
{
    a130:	b580      	push	{r7, lr}
    a132:	b08e      	sub	sp, #56	; 0x38
    a134:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    a136:	1d3b      	adds	r3, r7, #4
    a138:	0018      	movs	r0, r3
    a13a:	4b0c      	ldr	r3, [pc, #48]	; (a16c <initI2C+0x3c>)
    a13c:	4798      	blx	r3
	config_i2c_master.buffer_timeout = MASTER_TIMEOUT;
    a13e:	1d3b      	adds	r3, r7, #4
    a140:	22fa      	movs	r2, #250	; 0xfa
    a142:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    a144:	1d3b      	adds	r3, r7, #4
    a146:	4a0a      	ldr	r2, [pc, #40]	; (a170 <initI2C+0x40>)
    a148:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    a14a:	1d3b      	adds	r3, r7, #4
    a14c:	4a09      	ldr	r2, [pc, #36]	; (a174 <initI2C+0x44>)
    a14e:	621a      	str	r2, [r3, #32]
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    a150:	1d3a      	adds	r2, r7, #4
    a152:	4909      	ldr	r1, [pc, #36]	; (a178 <initI2C+0x48>)
    a154:	4b09      	ldr	r3, [pc, #36]	; (a17c <initI2C+0x4c>)
    a156:	0018      	movs	r0, r3
    a158:	4b09      	ldr	r3, [pc, #36]	; (a180 <initI2C+0x50>)
    a15a:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    a15c:	4b07      	ldr	r3, [pc, #28]	; (a17c <initI2C+0x4c>)
    a15e:	0018      	movs	r0, r3
    a160:	4b08      	ldr	r3, [pc, #32]	; (a184 <initI2C+0x54>)
    a162:	4798      	blx	r3
}
    a164:	46c0      	nop			; (mov r8, r8)
    a166:	46bd      	mov	sp, r7
    a168:	b00e      	add	sp, #56	; 0x38
    a16a:	bd80      	pop	{r7, pc}
    a16c:	00008df9 	.word	0x00008df9
    a170:	00160002 	.word	0x00160002
    a174:	00170002 	.word	0x00170002
    a178:	42001400 	.word	0x42001400
    a17c:	20000cac 	.word	0x20000cac
    a180:	00003701 	.word	0x00003701
    a184:	00008e7d 	.word	0x00008e7d

0000a188 <writeByte>:

// Wire.h read and write protocols
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
    a188:	b590      	push	{r4, r7, lr}
    a18a:	b087      	sub	sp, #28
    a18c:	af00      	add	r7, sp, #0
    a18e:	0004      	movs	r4, r0
    a190:	0008      	movs	r0, r1
    a192:	0011      	movs	r1, r2
    a194:	1dfb      	adds	r3, r7, #7
    a196:	1c22      	adds	r2, r4, #0
    a198:	701a      	strb	r2, [r3, #0]
    a19a:	1dbb      	adds	r3, r7, #6
    a19c:	1c02      	adds	r2, r0, #0
    a19e:	701a      	strb	r2, [r3, #0]
    a1a0:	1d7b      	adds	r3, r7, #5
    a1a2:	1c0a      	adds	r2, r1, #0
    a1a4:	701a      	strb	r2, [r3, #0]
	/* Timeout counter. */
	uint16_t timeout = 0;
    a1a6:	2316      	movs	r3, #22
    a1a8:	18fb      	adds	r3, r7, r3
    a1aa:	2200      	movs	r2, #0
    a1ac:	801a      	strh	r2, [r3, #0]
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    a1ae:	4b1d      	ldr	r3, [pc, #116]	; (a224 <writeByte+0x9c>)
    a1b0:	1dba      	adds	r2, r7, #6
    a1b2:	7812      	ldrb	r2, [r2, #0]
    a1b4:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = data;
    a1b6:	4b1b      	ldr	r3, [pc, #108]	; (a224 <writeByte+0x9c>)
    a1b8:	1d7a      	adds	r2, r7, #5
    a1ba:	7812      	ldrb	r2, [r2, #0]
    a1bc:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
    a1be:	1dfb      	adds	r3, r7, #7
    a1c0:	781b      	ldrb	r3, [r3, #0]
    a1c2:	b29a      	uxth	r2, r3
    a1c4:	2308      	movs	r3, #8
    a1c6:	18fb      	adds	r3, r7, r3
    a1c8:	801a      	strh	r2, [r3, #0]
    a1ca:	2308      	movs	r3, #8
    a1cc:	18fb      	adds	r3, r7, r3
    a1ce:	2202      	movs	r2, #2
    a1d0:	805a      	strh	r2, [r3, #2]
    a1d2:	2308      	movs	r3, #8
    a1d4:	18fb      	adds	r3, r7, r3
    a1d6:	4a13      	ldr	r2, [pc, #76]	; (a224 <writeByte+0x9c>)
    a1d8:	605a      	str	r2, [r3, #4]
    a1da:	2308      	movs	r3, #8
    a1dc:	18fb      	adds	r3, r7, r3
    a1de:	2200      	movs	r2, #0
    a1e0:	721a      	strb	r2, [r3, #8]
    a1e2:	2308      	movs	r3, #8
    a1e4:	18fb      	adds	r3, r7, r3
    a1e6:	2200      	movs	r2, #0
    a1e8:	725a      	strb	r2, [r3, #9]
    a1ea:	2308      	movs	r3, #8
    a1ec:	18fb      	adds	r3, r7, r3
    a1ee:	2200      	movs	r2, #0
    a1f0:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

    /* Write buffer to slave until success. */
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a1f2:	e008      	b.n	a206 <writeByte+0x7e>
    STATUS_OK) {
	    /* Increment timeout counter and check if timed out. */
	    if (timeout++ == MASTER_TIMEOUT) {
    a1f4:	2316      	movs	r3, #22
    a1f6:	18fb      	adds	r3, r7, r3
    a1f8:	881b      	ldrh	r3, [r3, #0]
    a1fa:	2216      	movs	r2, #22
    a1fc:	18ba      	adds	r2, r7, r2
    a1fe:	1c59      	adds	r1, r3, #1
    a200:	8011      	strh	r1, [r2, #0]
    a202:	2bfa      	cmp	r3, #250	; 0xfa
    a204:	d009      	beq.n	a21a <writeByte+0x92>
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a206:	2308      	movs	r3, #8
    a208:	18fa      	adds	r2, r7, r3
    a20a:	4b07      	ldr	r3, [pc, #28]	; (a228 <writeByte+0xa0>)
    a20c:	0011      	movs	r1, r2
    a20e:	0018      	movs	r0, r3
    a210:	4b06      	ldr	r3, [pc, #24]	; (a22c <writeByte+0xa4>)
    a212:	4798      	blx	r3
    a214:	1e03      	subs	r3, r0, #0
    a216:	d1ed      	bne.n	a1f4 <writeByte+0x6c>
		    break;
	    }
    }
}
    a218:	e000      	b.n	a21c <writeByte+0x94>
		    break;
    a21a:	46c0      	nop			; (mov r8, r8)
}
    a21c:	46c0      	nop			; (mov r8, r8)
    a21e:	46bd      	mov	sp, r7
    a220:	b007      	add	sp, #28
    a222:	bd90      	pop	{r4, r7, pc}
    a224:	20000fac 	.word	0x20000fac
    a228:	20000cac 	.word	0x20000cac
    a22c:	00003d71 	.word	0x00003d71

0000a230 <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
    a230:	b580      	push	{r7, lr}
    a232:	b088      	sub	sp, #32
    a234:	af00      	add	r7, sp, #0
    a236:	0002      	movs	r2, r0
    a238:	1dfb      	adds	r3, r7, #7
    a23a:	701a      	strb	r2, [r3, #0]
    a23c:	1dbb      	adds	r3, r7, #6
    a23e:	1c0a      	adds	r2, r1, #0
    a240:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    a242:	2300      	movs	r3, #0
    a244:	61fb      	str	r3, [r7, #28]
	uint8_t data; // `data` will store the register data	
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    a246:	4b29      	ldr	r3, [pc, #164]	; (a2ec <readByte+0xbc>)
    a248:	1dba      	adds	r2, r7, #6
    a24a:	7812      	ldrb	r2, [r2, #0]
    a24c:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    a24e:	1dfb      	adds	r3, r7, #7
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	b29a      	uxth	r2, r3
    a254:	230c      	movs	r3, #12
    a256:	18fb      	adds	r3, r7, r3
    a258:	801a      	strh	r2, [r3, #0]
    a25a:	230c      	movs	r3, #12
    a25c:	18fb      	adds	r3, r7, r3
    a25e:	2201      	movs	r2, #1
    a260:	805a      	strh	r2, [r3, #2]
    a262:	230c      	movs	r3, #12
    a264:	18fb      	adds	r3, r7, r3
    a266:	4a21      	ldr	r2, [pc, #132]	; (a2ec <readByte+0xbc>)
    a268:	605a      	str	r2, [r3, #4]
    a26a:	230c      	movs	r3, #12
    a26c:	18fb      	adds	r3, r7, r3
    a26e:	2200      	movs	r2, #0
    a270:	721a      	strb	r2, [r3, #8]
    a272:	230c      	movs	r3, #12
    a274:	18fb      	adds	r3, r7, r3
    a276:	2200      	movs	r2, #0
    a278:	725a      	strb	r2, [r3, #9]
    a27a:	230c      	movs	r3, #12
    a27c:	18fb      	adds	r3, r7, r3
    a27e:	2200      	movs	r2, #0
    a280:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a282:	e004      	b.n	a28e <readByte+0x5e>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a284:	69fb      	ldr	r3, [r7, #28]
    a286:	1c5a      	adds	r2, r3, #1
    a288:	61fa      	str	r2, [r7, #28]
    a28a:	2bfa      	cmp	r3, #250	; 0xfa
    a28c:	d009      	beq.n	a2a2 <readByte+0x72>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a28e:	230c      	movs	r3, #12
    a290:	18fa      	adds	r2, r7, r3
    a292:	4b17      	ldr	r3, [pc, #92]	; (a2f0 <readByte+0xc0>)
    a294:	0011      	movs	r1, r2
    a296:	0018      	movs	r0, r3
    a298:	4b16      	ldr	r3, [pc, #88]	; (a2f4 <readByte+0xc4>)
    a29a:	4798      	blx	r3
    a29c:	1e03      	subs	r3, r0, #0
    a29e:	d1f1      	bne.n	a284 <readByte+0x54>
    a2a0:	e000      	b.n	a2a4 <readByte+0x74>
			break;
    a2a2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    a2a4:	2300      	movs	r3, #0
    a2a6:	61fb      	str	r3, [r7, #28]
	packet.data = read_buffer;
    a2a8:	230c      	movs	r3, #12
    a2aa:	18fb      	adds	r3, r7, r3
    a2ac:	4a12      	ldr	r2, [pc, #72]	; (a2f8 <readByte+0xc8>)
    a2ae:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a2b0:	e004      	b.n	a2bc <readByte+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a2b2:	69fb      	ldr	r3, [r7, #28]
    a2b4:	1c5a      	adds	r2, r3, #1
    a2b6:	61fa      	str	r2, [r7, #28]
    a2b8:	2bfa      	cmp	r3, #250	; 0xfa
    a2ba:	d009      	beq.n	a2d0 <readByte+0xa0>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a2bc:	230c      	movs	r3, #12
    a2be:	18fa      	adds	r2, r7, r3
    a2c0:	4b0b      	ldr	r3, [pc, #44]	; (a2f0 <readByte+0xc0>)
    a2c2:	0011      	movs	r1, r2
    a2c4:	0018      	movs	r0, r3
    a2c6:	4b0d      	ldr	r3, [pc, #52]	; (a2fc <readByte+0xcc>)
    a2c8:	4798      	blx	r3
    a2ca:	1e03      	subs	r3, r0, #0
    a2cc:	d1f1      	bne.n	a2b2 <readByte+0x82>
    a2ce:	e000      	b.n	a2d2 <readByte+0xa2>
			break;
    a2d0:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	data = read_buffer[0];                      // Fill Rx buffer with result
    a2d2:	231b      	movs	r3, #27
    a2d4:	18fb      	adds	r3, r7, r3
    a2d6:	4a08      	ldr	r2, [pc, #32]	; (a2f8 <readByte+0xc8>)
    a2d8:	7812      	ldrb	r2, [r2, #0]
    a2da:	701a      	strb	r2, [r3, #0]
	return data;                             // Return data read from slave register
    a2dc:	231b      	movs	r3, #27
    a2de:	18fb      	adds	r3, r7, r3
    a2e0:	781b      	ldrb	r3, [r3, #0]
}
    a2e2:	0018      	movs	r0, r3
    a2e4:	46bd      	mov	sp, r7
    a2e6:	b008      	add	sp, #32
    a2e8:	bd80      	pop	{r7, pc}
    a2ea:	46c0      	nop			; (mov r8, r8)
    a2ec:	20000fac 	.word	0x20000fac
    a2f0:	20000cac 	.word	0x20000cac
    a2f4:	00003d71 	.word	0x00003d71
    a2f8:	20000cd4 	.word	0x20000cd4
    a2fc:	00003bb9 	.word	0x00003bb9

0000a300 <readBytes>:

uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
    a300:	b590      	push	{r4, r7, lr}
    a302:	b089      	sub	sp, #36	; 0x24
    a304:	af00      	add	r7, sp, #0
    a306:	0004      	movs	r4, r0
    a308:	0008      	movs	r0, r1
    a30a:	603a      	str	r2, [r7, #0]
    a30c:	0019      	movs	r1, r3
    a30e:	1dfb      	adds	r3, r7, #7
    a310:	1c22      	adds	r2, r4, #0
    a312:	701a      	strb	r2, [r3, #0]
    a314:	1dbb      	adds	r3, r7, #6
    a316:	1c02      	adds	r2, r0, #0
    a318:	701a      	strb	r2, [r3, #0]
    a31a:	1d7b      	adds	r3, r7, #5
    a31c:	1c0a      	adds	r2, r1, #0
    a31e:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    a320:	2300      	movs	r3, #0
    a322:	61fb      	str	r3, [r7, #28]
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress | 0x80;
    a324:	1dbb      	adds	r3, r7, #6
    a326:	781b      	ldrb	r3, [r3, #0]
    a328:	2280      	movs	r2, #128	; 0x80
    a32a:	4252      	negs	r2, r2
    a32c:	4313      	orrs	r3, r2
    a32e:	b2da      	uxtb	r2, r3
    a330:	4b38      	ldr	r3, [pc, #224]	; (a414 <readBytes+0x114>)
    a332:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    a334:	1dfb      	adds	r3, r7, #7
    a336:	781b      	ldrb	r3, [r3, #0]
    a338:	b29a      	uxth	r2, r3
    a33a:	230c      	movs	r3, #12
    a33c:	18fb      	adds	r3, r7, r3
    a33e:	801a      	strh	r2, [r3, #0]
    a340:	230c      	movs	r3, #12
    a342:	18fb      	adds	r3, r7, r3
    a344:	2201      	movs	r2, #1
    a346:	805a      	strh	r2, [r3, #2]
    a348:	230c      	movs	r3, #12
    a34a:	18fb      	adds	r3, r7, r3
    a34c:	4a31      	ldr	r2, [pc, #196]	; (a414 <readBytes+0x114>)
    a34e:	605a      	str	r2, [r3, #4]
    a350:	230c      	movs	r3, #12
    a352:	18fb      	adds	r3, r7, r3
    a354:	2200      	movs	r2, #0
    a356:	721a      	strb	r2, [r3, #8]
    a358:	230c      	movs	r3, #12
    a35a:	18fb      	adds	r3, r7, r3
    a35c:	2200      	movs	r2, #0
    a35e:	725a      	strb	r2, [r3, #9]
    a360:	230c      	movs	r3, #12
    a362:	18fb      	adds	r3, r7, r3
    a364:	2200      	movs	r2, #0
    a366:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a368:	e004      	b.n	a374 <readBytes+0x74>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a36a:	69fb      	ldr	r3, [r7, #28]
    a36c:	1c5a      	adds	r2, r3, #1
    a36e:	61fa      	str	r2, [r7, #28]
    a370:	2bfa      	cmp	r3, #250	; 0xfa
    a372:	d009      	beq.n	a388 <readBytes+0x88>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a374:	230c      	movs	r3, #12
    a376:	18fa      	adds	r2, r7, r3
    a378:	4b27      	ldr	r3, [pc, #156]	; (a418 <readBytes+0x118>)
    a37a:	0011      	movs	r1, r2
    a37c:	0018      	movs	r0, r3
    a37e:	4b27      	ldr	r3, [pc, #156]	; (a41c <readBytes+0x11c>)
    a380:	4798      	blx	r3
    a382:	1e03      	subs	r3, r0, #0
    a384:	d1f1      	bne.n	a36a <readBytes+0x6a>
    a386:	e000      	b.n	a38a <readBytes+0x8a>
			break;
    a388:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    a38a:	2300      	movs	r3, #0
    a38c:	61fb      	str	r3, [r7, #28]
	packet.data_length = count;
    a38e:	1d7b      	adds	r3, r7, #5
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	b29a      	uxth	r2, r3
    a394:	230c      	movs	r3, #12
    a396:	18fb      	adds	r3, r7, r3
    a398:	805a      	strh	r2, [r3, #2]
	packet.data = read_buffer;
    a39a:	230c      	movs	r3, #12
    a39c:	18fb      	adds	r3, r7, r3
    a39e:	4a20      	ldr	r2, [pc, #128]	; (a420 <readBytes+0x120>)
    a3a0:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a3a2:	e004      	b.n	a3ae <readBytes+0xae>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a3a4:	69fb      	ldr	r3, [r7, #28]
    a3a6:	1c5a      	adds	r2, r3, #1
    a3a8:	61fa      	str	r2, [r7, #28]
    a3aa:	2bfa      	cmp	r3, #250	; 0xfa
    a3ac:	d009      	beq.n	a3c2 <readBytes+0xc2>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a3ae:	230c      	movs	r3, #12
    a3b0:	18fa      	adds	r2, r7, r3
    a3b2:	4b19      	ldr	r3, [pc, #100]	; (a418 <readBytes+0x118>)
    a3b4:	0011      	movs	r1, r2
    a3b6:	0018      	movs	r0, r3
    a3b8:	4b1a      	ldr	r3, [pc, #104]	; (a424 <readBytes+0x124>)
    a3ba:	4798      	blx	r3
    a3bc:	1e03      	subs	r3, r0, #0
    a3be:	d1f1      	bne.n	a3a4 <readBytes+0xa4>
    a3c0:	e000      	b.n	a3c4 <readBytes+0xc4>
			break;
    a3c2:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	uint8_t i = 0;
    a3c4:	231b      	movs	r3, #27
    a3c6:	18fb      	adds	r3, r7, r3
    a3c8:	2200      	movs	r2, #0
    a3ca:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    a3cc:	231b      	movs	r3, #27
    a3ce:	18fb      	adds	r3, r7, r3
    a3d0:	2200      	movs	r2, #0
    a3d2:	701a      	strb	r2, [r3, #0]
    a3d4:	e011      	b.n	a3fa <readBytes+0xfa>
	{
		dest[i] = read_buffer[i];
    a3d6:	231b      	movs	r3, #27
    a3d8:	18fb      	adds	r3, r7, r3
    a3da:	781b      	ldrb	r3, [r3, #0]
    a3dc:	683a      	ldr	r2, [r7, #0]
    a3de:	18d3      	adds	r3, r2, r3
    a3e0:	221b      	movs	r2, #27
    a3e2:	18ba      	adds	r2, r7, r2
    a3e4:	7812      	ldrb	r2, [r2, #0]
    a3e6:	490e      	ldr	r1, [pc, #56]	; (a420 <readBytes+0x120>)
    a3e8:	5c8a      	ldrb	r2, [r1, r2]
    a3ea:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    a3ec:	231b      	movs	r3, #27
    a3ee:	18fb      	adds	r3, r7, r3
    a3f0:	781a      	ldrb	r2, [r3, #0]
    a3f2:	231b      	movs	r3, #27
    a3f4:	18fb      	adds	r3, r7, r3
    a3f6:	3201      	adds	r2, #1
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	231b      	movs	r3, #27
    a3fc:	18fa      	adds	r2, r7, r3
    a3fe:	1d7b      	adds	r3, r7, #5
    a400:	7812      	ldrb	r2, [r2, #0]
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	429a      	cmp	r2, r3
    a406:	d3e6      	bcc.n	a3d6 <readBytes+0xd6>
	}
	return count;
    a408:	1d7b      	adds	r3, r7, #5
    a40a:	781b      	ldrb	r3, [r3, #0]
}
    a40c:	0018      	movs	r0, r3
    a40e:	46bd      	mov	sp, r7
    a410:	b009      	add	sp, #36	; 0x24
    a412:	bd90      	pop	{r4, r7, pc}
    a414:	20000fac 	.word	0x20000fac
    a418:	20000cac 	.word	0x20000cac
    a41c:	00003d71 	.word	0x00003d71
    a420:	20000cd4 	.word	0x20000cd4
    a424:	00003bb9 	.word	0x00003bb9

0000a428 <CorrectIMUvalues>:

void CorrectIMUvalues(uint8_t connector_orient, uint8_t power_orient){
    a428:	b580      	push	{r7, lr}
    a42a:	b082      	sub	sp, #8
    a42c:	af00      	add	r7, sp, #0
    a42e:	0002      	movs	r2, r0
    a430:	1dfb      	adds	r3, r7, #7
    a432:	701a      	strb	r2, [r3, #0]
    a434:	1dbb      	adds	r3, r7, #6
    a436:	1c0a      	adds	r2, r1, #0
    a438:	701a      	strb	r2, [r3, #0]
	if((connector_orient == 0 || power_orient == 0)||(connector_orient > 6 || power_orient > 6)){
    a43a:	1dfb      	adds	r3, r7, #7
    a43c:	781b      	ldrb	r3, [r3, #0]
    a43e:	2b00      	cmp	r3, #0
    a440:	d00b      	beq.n	a45a <CorrectIMUvalues+0x32>
    a442:	1dbb      	adds	r3, r7, #6
    a444:	781b      	ldrb	r3, [r3, #0]
    a446:	2b00      	cmp	r3, #0
    a448:	d007      	beq.n	a45a <CorrectIMUvalues+0x32>
    a44a:	1dfb      	adds	r3, r7, #7
    a44c:	781b      	ldrb	r3, [r3, #0]
    a44e:	2b06      	cmp	r3, #6
    a450:	d803      	bhi.n	a45a <CorrectIMUvalues+0x32>
    a452:	1dbb      	adds	r3, r7, #6
    a454:	781b      	ldrb	r3, [r3, #0]
    a456:	2b06      	cmp	r3, #6
    a458:	d92e      	bls.n	a4b8 <CorrectIMUvalues+0x90>
		caz = az;
    a45a:	4bf3      	ldr	r3, [pc, #972]	; (a828 <CorrectIMUvalues+0x400>)
    a45c:	2200      	movs	r2, #0
    a45e:	5e9a      	ldrsh	r2, [r3, r2]
    a460:	4bf2      	ldr	r3, [pc, #968]	; (a82c <CorrectIMUvalues+0x404>)
    a462:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    a464:	4bf2      	ldr	r3, [pc, #968]	; (a830 <CorrectIMUvalues+0x408>)
    a466:	2200      	movs	r2, #0
    a468:	5e9a      	ldrsh	r2, [r3, r2]
    a46a:	4bf2      	ldr	r3, [pc, #968]	; (a834 <CorrectIMUvalues+0x40c>)
    a46c:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    a46e:	4bf2      	ldr	r3, [pc, #968]	; (a838 <CorrectIMUvalues+0x410>)
    a470:	2200      	movs	r2, #0
    a472:	5e9a      	ldrsh	r2, [r3, r2]
    a474:	4bf1      	ldr	r3, [pc, #964]	; (a83c <CorrectIMUvalues+0x414>)
    a476:	801a      	strh	r2, [r3, #0]
		cax = ax;
    a478:	4bf1      	ldr	r3, [pc, #964]	; (a840 <CorrectIMUvalues+0x418>)
    a47a:	2200      	movs	r2, #0
    a47c:	5e9a      	ldrsh	r2, [r3, r2]
    a47e:	4bf1      	ldr	r3, [pc, #964]	; (a844 <CorrectIMUvalues+0x41c>)
    a480:	801a      	strh	r2, [r3, #0]
		cay = ay;
    a482:	4bf1      	ldr	r3, [pc, #964]	; (a848 <CorrectIMUvalues+0x420>)
    a484:	2200      	movs	r2, #0
    a486:	5e9a      	ldrsh	r2, [r3, r2]
    a488:	4bf0      	ldr	r3, [pc, #960]	; (a84c <CorrectIMUvalues+0x424>)
    a48a:	801a      	strh	r2, [r3, #0]
		cgx = gx;
    a48c:	4bf0      	ldr	r3, [pc, #960]	; (a850 <CorrectIMUvalues+0x428>)
    a48e:	2200      	movs	r2, #0
    a490:	5e9a      	ldrsh	r2, [r3, r2]
    a492:	4bf0      	ldr	r3, [pc, #960]	; (a854 <CorrectIMUvalues+0x42c>)
    a494:	801a      	strh	r2, [r3, #0]
		cgy = gy;
    a496:	4bf0      	ldr	r3, [pc, #960]	; (a858 <CorrectIMUvalues+0x430>)
    a498:	2200      	movs	r2, #0
    a49a:	5e9a      	ldrsh	r2, [r3, r2]
    a49c:	4bef      	ldr	r3, [pc, #956]	; (a85c <CorrectIMUvalues+0x434>)
    a49e:	801a      	strh	r2, [r3, #0]
		cmx = mx;
    a4a0:	4bef      	ldr	r3, [pc, #956]	; (a860 <CorrectIMUvalues+0x438>)
    a4a2:	2200      	movs	r2, #0
    a4a4:	5e9a      	ldrsh	r2, [r3, r2]
    a4a6:	4bef      	ldr	r3, [pc, #956]	; (a864 <CorrectIMUvalues+0x43c>)
    a4a8:	801a      	strh	r2, [r3, #0]
		cmy = my;
    a4aa:	4bef      	ldr	r3, [pc, #956]	; (a868 <CorrectIMUvalues+0x440>)
    a4ac:	2200      	movs	r2, #0
    a4ae:	5e9a      	ldrsh	r2, [r3, r2]
    a4b0:	4bee      	ldr	r3, [pc, #952]	; (a86c <CorrectIMUvalues+0x444>)
    a4b2:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
			cmx = mz;
			cmy = mx;
		}
	}
}
    a4b4:	f000 fd5a 	bl	af6c <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_UP){ // Connectors Up
    a4b8:	1dfb      	adds	r3, r7, #7
    a4ba:	781b      	ldrb	r3, [r3, #0]
    a4bc:	2b01      	cmp	r3, #1
    a4be:	d000      	beq.n	a4c2 <CorrectIMUvalues+0x9a>
    a4c0:	e0d0      	b.n	a664 <CorrectIMUvalues+0x23c>
		caz = az;
    a4c2:	4bd9      	ldr	r3, [pc, #868]	; (a828 <CorrectIMUvalues+0x400>)
    a4c4:	2200      	movs	r2, #0
    a4c6:	5e9a      	ldrsh	r2, [r3, r2]
    a4c8:	4bd8      	ldr	r3, [pc, #864]	; (a82c <CorrectIMUvalues+0x404>)
    a4ca:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    a4cc:	4bd8      	ldr	r3, [pc, #864]	; (a830 <CorrectIMUvalues+0x408>)
    a4ce:	2200      	movs	r2, #0
    a4d0:	5e9a      	ldrsh	r2, [r3, r2]
    a4d2:	4bd8      	ldr	r3, [pc, #864]	; (a834 <CorrectIMUvalues+0x40c>)
    a4d4:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    a4d6:	4bd8      	ldr	r3, [pc, #864]	; (a838 <CorrectIMUvalues+0x410>)
    a4d8:	2200      	movs	r2, #0
    a4da:	5e9a      	ldrsh	r2, [r3, r2]
    a4dc:	4bd7      	ldr	r3, [pc, #860]	; (a83c <CorrectIMUvalues+0x414>)
    a4de:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    a4e0:	1dbb      	adds	r3, r7, #6
    a4e2:	781b      	ldrb	r3, [r3, #0]
    a4e4:	2b03      	cmp	r3, #3
    a4e6:	d12b      	bne.n	a540 <CorrectIMUvalues+0x118>
			cax = -ay;
    a4e8:	4bd7      	ldr	r3, [pc, #860]	; (a848 <CorrectIMUvalues+0x420>)
    a4ea:	2200      	movs	r2, #0
    a4ec:	5e9b      	ldrsh	r3, [r3, r2]
    a4ee:	b29b      	uxth	r3, r3
    a4f0:	425b      	negs	r3, r3
    a4f2:	b29b      	uxth	r3, r3
    a4f4:	b21a      	sxth	r2, r3
    a4f6:	4bd3      	ldr	r3, [pc, #844]	; (a844 <CorrectIMUvalues+0x41c>)
    a4f8:	801a      	strh	r2, [r3, #0]
			cay = ax;
    a4fa:	4bd1      	ldr	r3, [pc, #836]	; (a840 <CorrectIMUvalues+0x418>)
    a4fc:	2200      	movs	r2, #0
    a4fe:	5e9a      	ldrsh	r2, [r3, r2]
    a500:	4bd2      	ldr	r3, [pc, #840]	; (a84c <CorrectIMUvalues+0x424>)
    a502:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a504:	4bd4      	ldr	r3, [pc, #848]	; (a858 <CorrectIMUvalues+0x430>)
    a506:	2200      	movs	r2, #0
    a508:	5e9b      	ldrsh	r3, [r3, r2]
    a50a:	b29b      	uxth	r3, r3
    a50c:	425b      	negs	r3, r3
    a50e:	b29b      	uxth	r3, r3
    a510:	b21a      	sxth	r2, r3
    a512:	4bd0      	ldr	r3, [pc, #832]	; (a854 <CorrectIMUvalues+0x42c>)
    a514:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    a516:	4bce      	ldr	r3, [pc, #824]	; (a850 <CorrectIMUvalues+0x428>)
    a518:	2200      	movs	r2, #0
    a51a:	5e9a      	ldrsh	r2, [r3, r2]
    a51c:	4bcf      	ldr	r3, [pc, #828]	; (a85c <CorrectIMUvalues+0x434>)
    a51e:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a520:	4bd1      	ldr	r3, [pc, #836]	; (a868 <CorrectIMUvalues+0x440>)
    a522:	2200      	movs	r2, #0
    a524:	5e9a      	ldrsh	r2, [r3, r2]
    a526:	4bcf      	ldr	r3, [pc, #828]	; (a864 <CorrectIMUvalues+0x43c>)
    a528:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    a52a:	4bcd      	ldr	r3, [pc, #820]	; (a860 <CorrectIMUvalues+0x438>)
    a52c:	2200      	movs	r2, #0
    a52e:	5e9b      	ldrsh	r3, [r3, r2]
    a530:	b29b      	uxth	r3, r3
    a532:	425b      	negs	r3, r3
    a534:	b29b      	uxth	r3, r3
    a536:	b21a      	sxth	r2, r3
    a538:	4bcc      	ldr	r3, [pc, #816]	; (a86c <CorrectIMUvalues+0x444>)
    a53a:	801a      	strh	r2, [r3, #0]
}
    a53c:	f000 fd16 	bl	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    a540:	1dbb      	adds	r3, r7, #6
    a542:	781b      	ldrb	r3, [r3, #0]
    a544:	2b04      	cmp	r3, #4
    a546:	d12b      	bne.n	a5a0 <CorrectIMUvalues+0x178>
			cax = ay;
    a548:	4bbf      	ldr	r3, [pc, #764]	; (a848 <CorrectIMUvalues+0x420>)
    a54a:	2200      	movs	r2, #0
    a54c:	5e9a      	ldrsh	r2, [r3, r2]
    a54e:	4bbd      	ldr	r3, [pc, #756]	; (a844 <CorrectIMUvalues+0x41c>)
    a550:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    a552:	4bbb      	ldr	r3, [pc, #748]	; (a840 <CorrectIMUvalues+0x418>)
    a554:	2200      	movs	r2, #0
    a556:	5e9b      	ldrsh	r3, [r3, r2]
    a558:	b29b      	uxth	r3, r3
    a55a:	425b      	negs	r3, r3
    a55c:	b29b      	uxth	r3, r3
    a55e:	b21a      	sxth	r2, r3
    a560:	4bba      	ldr	r3, [pc, #744]	; (a84c <CorrectIMUvalues+0x424>)
    a562:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a564:	4bbc      	ldr	r3, [pc, #752]	; (a858 <CorrectIMUvalues+0x430>)
    a566:	2200      	movs	r2, #0
    a568:	5e9a      	ldrsh	r2, [r3, r2]
    a56a:	4bba      	ldr	r3, [pc, #744]	; (a854 <CorrectIMUvalues+0x42c>)
    a56c:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    a56e:	4bb8      	ldr	r3, [pc, #736]	; (a850 <CorrectIMUvalues+0x428>)
    a570:	2200      	movs	r2, #0
    a572:	5e9b      	ldrsh	r3, [r3, r2]
    a574:	b29b      	uxth	r3, r3
    a576:	425b      	negs	r3, r3
    a578:	b29b      	uxth	r3, r3
    a57a:	b21a      	sxth	r2, r3
    a57c:	4bb7      	ldr	r3, [pc, #732]	; (a85c <CorrectIMUvalues+0x434>)
    a57e:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a580:	4bb9      	ldr	r3, [pc, #740]	; (a868 <CorrectIMUvalues+0x440>)
    a582:	2200      	movs	r2, #0
    a584:	5e9b      	ldrsh	r3, [r3, r2]
    a586:	b29b      	uxth	r3, r3
    a588:	425b      	negs	r3, r3
    a58a:	b29b      	uxth	r3, r3
    a58c:	b21a      	sxth	r2, r3
    a58e:	4bb5      	ldr	r3, [pc, #724]	; (a864 <CorrectIMUvalues+0x43c>)
    a590:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    a592:	4bb3      	ldr	r3, [pc, #716]	; (a860 <CorrectIMUvalues+0x438>)
    a594:	2200      	movs	r2, #0
    a596:	5e9a      	ldrsh	r2, [r3, r2]
    a598:	4bb4      	ldr	r3, [pc, #720]	; (a86c <CorrectIMUvalues+0x444>)
    a59a:	801a      	strh	r2, [r3, #0]
}
    a59c:	f000 fce6 	bl	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a5a0:	1dbb      	adds	r3, r7, #6
    a5a2:	781b      	ldrb	r3, [r3, #0]
    a5a4:	2b05      	cmp	r3, #5
    a5a6:	d137      	bne.n	a618 <CorrectIMUvalues+0x1f0>
			cax = -ax;
    a5a8:	4ba5      	ldr	r3, [pc, #660]	; (a840 <CorrectIMUvalues+0x418>)
    a5aa:	2200      	movs	r2, #0
    a5ac:	5e9b      	ldrsh	r3, [r3, r2]
    a5ae:	b29b      	uxth	r3, r3
    a5b0:	425b      	negs	r3, r3
    a5b2:	b29b      	uxth	r3, r3
    a5b4:	b21a      	sxth	r2, r3
    a5b6:	4ba3      	ldr	r3, [pc, #652]	; (a844 <CorrectIMUvalues+0x41c>)
    a5b8:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a5ba:	4ba3      	ldr	r3, [pc, #652]	; (a848 <CorrectIMUvalues+0x420>)
    a5bc:	2200      	movs	r2, #0
    a5be:	5e9b      	ldrsh	r3, [r3, r2]
    a5c0:	b29b      	uxth	r3, r3
    a5c2:	425b      	negs	r3, r3
    a5c4:	b29b      	uxth	r3, r3
    a5c6:	b21a      	sxth	r2, r3
    a5c8:	4ba0      	ldr	r3, [pc, #640]	; (a84c <CorrectIMUvalues+0x424>)
    a5ca:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    a5cc:	4ba0      	ldr	r3, [pc, #640]	; (a850 <CorrectIMUvalues+0x428>)
    a5ce:	2200      	movs	r2, #0
    a5d0:	5e9b      	ldrsh	r3, [r3, r2]
    a5d2:	b29b      	uxth	r3, r3
    a5d4:	425b      	negs	r3, r3
    a5d6:	b29b      	uxth	r3, r3
    a5d8:	b21a      	sxth	r2, r3
    a5da:	4b9e      	ldr	r3, [pc, #632]	; (a854 <CorrectIMUvalues+0x42c>)
    a5dc:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a5de:	4b9e      	ldr	r3, [pc, #632]	; (a858 <CorrectIMUvalues+0x430>)
    a5e0:	2200      	movs	r2, #0
    a5e2:	5e9b      	ldrsh	r3, [r3, r2]
    a5e4:	b29b      	uxth	r3, r3
    a5e6:	425b      	negs	r3, r3
    a5e8:	b29b      	uxth	r3, r3
    a5ea:	b21a      	sxth	r2, r3
    a5ec:	4b9b      	ldr	r3, [pc, #620]	; (a85c <CorrectIMUvalues+0x434>)
    a5ee:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    a5f0:	4b9b      	ldr	r3, [pc, #620]	; (a860 <CorrectIMUvalues+0x438>)
    a5f2:	2200      	movs	r2, #0
    a5f4:	5e9b      	ldrsh	r3, [r3, r2]
    a5f6:	b29b      	uxth	r3, r3
    a5f8:	425b      	negs	r3, r3
    a5fa:	b29b      	uxth	r3, r3
    a5fc:	b21a      	sxth	r2, r3
    a5fe:	4b99      	ldr	r3, [pc, #612]	; (a864 <CorrectIMUvalues+0x43c>)
    a600:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a602:	4b99      	ldr	r3, [pc, #612]	; (a868 <CorrectIMUvalues+0x440>)
    a604:	2200      	movs	r2, #0
    a606:	5e9b      	ldrsh	r3, [r3, r2]
    a608:	b29b      	uxth	r3, r3
    a60a:	425b      	negs	r3, r3
    a60c:	b29b      	uxth	r3, r3
    a60e:	b21a      	sxth	r2, r3
    a610:	4b96      	ldr	r3, [pc, #600]	; (a86c <CorrectIMUvalues+0x444>)
    a612:	801a      	strh	r2, [r3, #0]
}
    a614:	f000 fcaa 	bl	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a618:	1dbb      	adds	r3, r7, #6
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	2b06      	cmp	r3, #6
    a61e:	d001      	beq.n	a624 <CorrectIMUvalues+0x1fc>
    a620:	f000 fca4 	bl	af6c <CorrectIMUvalues+0xb44>
			cax = ax;
    a624:	4b86      	ldr	r3, [pc, #536]	; (a840 <CorrectIMUvalues+0x418>)
    a626:	2200      	movs	r2, #0
    a628:	5e9a      	ldrsh	r2, [r3, r2]
    a62a:	4b86      	ldr	r3, [pc, #536]	; (a844 <CorrectIMUvalues+0x41c>)
    a62c:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a62e:	4b86      	ldr	r3, [pc, #536]	; (a848 <CorrectIMUvalues+0x420>)
    a630:	2200      	movs	r2, #0
    a632:	5e9a      	ldrsh	r2, [r3, r2]
    a634:	4b85      	ldr	r3, [pc, #532]	; (a84c <CorrectIMUvalues+0x424>)
    a636:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    a638:	4b85      	ldr	r3, [pc, #532]	; (a850 <CorrectIMUvalues+0x428>)
    a63a:	2200      	movs	r2, #0
    a63c:	5e9a      	ldrsh	r2, [r3, r2]
    a63e:	4b85      	ldr	r3, [pc, #532]	; (a854 <CorrectIMUvalues+0x42c>)
    a640:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a642:	4b85      	ldr	r3, [pc, #532]	; (a858 <CorrectIMUvalues+0x430>)
    a644:	2200      	movs	r2, #0
    a646:	5e9a      	ldrsh	r2, [r3, r2]
    a648:	4b84      	ldr	r3, [pc, #528]	; (a85c <CorrectIMUvalues+0x434>)
    a64a:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    a64c:	4b84      	ldr	r3, [pc, #528]	; (a860 <CorrectIMUvalues+0x438>)
    a64e:	2200      	movs	r2, #0
    a650:	5e9a      	ldrsh	r2, [r3, r2]
    a652:	4b84      	ldr	r3, [pc, #528]	; (a864 <CorrectIMUvalues+0x43c>)
    a654:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a656:	4b84      	ldr	r3, [pc, #528]	; (a868 <CorrectIMUvalues+0x440>)
    a658:	2200      	movs	r2, #0
    a65a:	5e9a      	ldrsh	r2, [r3, r2]
    a65c:	4b83      	ldr	r3, [pc, #524]	; (a86c <CorrectIMUvalues+0x444>)
    a65e:	801a      	strh	r2, [r3, #0]
}
    a660:	f000 fc84 	bl	af6c <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_DOWN){ // Connectors Down
    a664:	1dfb      	adds	r3, r7, #7
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	2b02      	cmp	r3, #2
    a66a:	d000      	beq.n	a66e <CorrectIMUvalues+0x246>
    a66c:	e100      	b.n	a870 <CorrectIMUvalues+0x448>
		caz = -az;
    a66e:	4b6e      	ldr	r3, [pc, #440]	; (a828 <CorrectIMUvalues+0x400>)
    a670:	2200      	movs	r2, #0
    a672:	5e9b      	ldrsh	r3, [r3, r2]
    a674:	b29b      	uxth	r3, r3
    a676:	425b      	negs	r3, r3
    a678:	b29b      	uxth	r3, r3
    a67a:	b21a      	sxth	r2, r3
    a67c:	4b6b      	ldr	r3, [pc, #428]	; (a82c <CorrectIMUvalues+0x404>)
    a67e:	801a      	strh	r2, [r3, #0]
		cgz = -gz;
    a680:	4b6b      	ldr	r3, [pc, #428]	; (a830 <CorrectIMUvalues+0x408>)
    a682:	2200      	movs	r2, #0
    a684:	5e9b      	ldrsh	r3, [r3, r2]
    a686:	b29b      	uxth	r3, r3
    a688:	425b      	negs	r3, r3
    a68a:	b29b      	uxth	r3, r3
    a68c:	b21a      	sxth	r2, r3
    a68e:	4b69      	ldr	r3, [pc, #420]	; (a834 <CorrectIMUvalues+0x40c>)
    a690:	801a      	strh	r2, [r3, #0]
		cmz = -mz;
    a692:	4b69      	ldr	r3, [pc, #420]	; (a838 <CorrectIMUvalues+0x410>)
    a694:	2200      	movs	r2, #0
    a696:	5e9b      	ldrsh	r3, [r3, r2]
    a698:	b29b      	uxth	r3, r3
    a69a:	425b      	negs	r3, r3
    a69c:	b29b      	uxth	r3, r3
    a69e:	b21a      	sxth	r2, r3
    a6a0:	4b66      	ldr	r3, [pc, #408]	; (a83c <CorrectIMUvalues+0x414>)
    a6a2:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    a6a4:	1dbb      	adds	r3, r7, #6
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	2b03      	cmp	r3, #3
    a6aa:	d127      	bne.n	a6fc <CorrectIMUvalues+0x2d4>
			cax = ay;
    a6ac:	4b66      	ldr	r3, [pc, #408]	; (a848 <CorrectIMUvalues+0x420>)
    a6ae:	2200      	movs	r2, #0
    a6b0:	5e9a      	ldrsh	r2, [r3, r2]
    a6b2:	4b64      	ldr	r3, [pc, #400]	; (a844 <CorrectIMUvalues+0x41c>)
    a6b4:	801a      	strh	r2, [r3, #0]
			cay = ax;
    a6b6:	4b62      	ldr	r3, [pc, #392]	; (a840 <CorrectIMUvalues+0x418>)
    a6b8:	2200      	movs	r2, #0
    a6ba:	5e9a      	ldrsh	r2, [r3, r2]
    a6bc:	4b63      	ldr	r3, [pc, #396]	; (a84c <CorrectIMUvalues+0x424>)
    a6be:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a6c0:	4b65      	ldr	r3, [pc, #404]	; (a858 <CorrectIMUvalues+0x430>)
    a6c2:	2200      	movs	r2, #0
    a6c4:	5e9a      	ldrsh	r2, [r3, r2]
    a6c6:	4b63      	ldr	r3, [pc, #396]	; (a854 <CorrectIMUvalues+0x42c>)
    a6c8:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    a6ca:	4b61      	ldr	r3, [pc, #388]	; (a850 <CorrectIMUvalues+0x428>)
    a6cc:	2200      	movs	r2, #0
    a6ce:	5e9a      	ldrsh	r2, [r3, r2]
    a6d0:	4b62      	ldr	r3, [pc, #392]	; (a85c <CorrectIMUvalues+0x434>)
    a6d2:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a6d4:	4b64      	ldr	r3, [pc, #400]	; (a868 <CorrectIMUvalues+0x440>)
    a6d6:	2200      	movs	r2, #0
    a6d8:	5e9b      	ldrsh	r3, [r3, r2]
    a6da:	b29b      	uxth	r3, r3
    a6dc:	425b      	negs	r3, r3
    a6de:	b29b      	uxth	r3, r3
    a6e0:	b21a      	sxth	r2, r3
    a6e2:	4b60      	ldr	r3, [pc, #384]	; (a864 <CorrectIMUvalues+0x43c>)
    a6e4:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    a6e6:	4b5e      	ldr	r3, [pc, #376]	; (a860 <CorrectIMUvalues+0x438>)
    a6e8:	2200      	movs	r2, #0
    a6ea:	5e9b      	ldrsh	r3, [r3, r2]
    a6ec:	b29b      	uxth	r3, r3
    a6ee:	425b      	negs	r3, r3
    a6f0:	b29b      	uxth	r3, r3
    a6f2:	b21a      	sxth	r2, r3
    a6f4:	4b5d      	ldr	r3, [pc, #372]	; (a86c <CorrectIMUvalues+0x444>)
    a6f6:	801a      	strh	r2, [r3, #0]
}
    a6f8:	f000 fc38 	bl	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    a6fc:	1dbb      	adds	r3, r7, #6
    a6fe:	781b      	ldrb	r3, [r3, #0]
    a700:	2b04      	cmp	r3, #4
    a702:	d12f      	bne.n	a764 <CorrectIMUvalues+0x33c>
			cax = -ay;
    a704:	4b50      	ldr	r3, [pc, #320]	; (a848 <CorrectIMUvalues+0x420>)
    a706:	2200      	movs	r2, #0
    a708:	5e9b      	ldrsh	r3, [r3, r2]
    a70a:	b29b      	uxth	r3, r3
    a70c:	425b      	negs	r3, r3
    a70e:	b29b      	uxth	r3, r3
    a710:	b21a      	sxth	r2, r3
    a712:	4b4c      	ldr	r3, [pc, #304]	; (a844 <CorrectIMUvalues+0x41c>)
    a714:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    a716:	4b4a      	ldr	r3, [pc, #296]	; (a840 <CorrectIMUvalues+0x418>)
    a718:	2200      	movs	r2, #0
    a71a:	5e9b      	ldrsh	r3, [r3, r2]
    a71c:	b29b      	uxth	r3, r3
    a71e:	425b      	negs	r3, r3
    a720:	b29b      	uxth	r3, r3
    a722:	b21a      	sxth	r2, r3
    a724:	4b49      	ldr	r3, [pc, #292]	; (a84c <CorrectIMUvalues+0x424>)
    a726:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a728:	4b4b      	ldr	r3, [pc, #300]	; (a858 <CorrectIMUvalues+0x430>)
    a72a:	2200      	movs	r2, #0
    a72c:	5e9b      	ldrsh	r3, [r3, r2]
    a72e:	b29b      	uxth	r3, r3
    a730:	425b      	negs	r3, r3
    a732:	b29b      	uxth	r3, r3
    a734:	b21a      	sxth	r2, r3
    a736:	4b47      	ldr	r3, [pc, #284]	; (a854 <CorrectIMUvalues+0x42c>)
    a738:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    a73a:	4b45      	ldr	r3, [pc, #276]	; (a850 <CorrectIMUvalues+0x428>)
    a73c:	2200      	movs	r2, #0
    a73e:	5e9b      	ldrsh	r3, [r3, r2]
    a740:	b29b      	uxth	r3, r3
    a742:	425b      	negs	r3, r3
    a744:	b29b      	uxth	r3, r3
    a746:	b21a      	sxth	r2, r3
    a748:	4b44      	ldr	r3, [pc, #272]	; (a85c <CorrectIMUvalues+0x434>)
    a74a:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a74c:	4b46      	ldr	r3, [pc, #280]	; (a868 <CorrectIMUvalues+0x440>)
    a74e:	2200      	movs	r2, #0
    a750:	5e9a      	ldrsh	r2, [r3, r2]
    a752:	4b44      	ldr	r3, [pc, #272]	; (a864 <CorrectIMUvalues+0x43c>)
    a754:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    a756:	4b42      	ldr	r3, [pc, #264]	; (a860 <CorrectIMUvalues+0x438>)
    a758:	2200      	movs	r2, #0
    a75a:	5e9a      	ldrsh	r2, [r3, r2]
    a75c:	4b43      	ldr	r3, [pc, #268]	; (a86c <CorrectIMUvalues+0x444>)
    a75e:	801a      	strh	r2, [r3, #0]
}
    a760:	f000 fc04 	bl	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a764:	1dbb      	adds	r3, r7, #6
    a766:	781b      	ldrb	r3, [r3, #0]
    a768:	2b05      	cmp	r3, #5
    a76a:	d12b      	bne.n	a7c4 <CorrectIMUvalues+0x39c>
			cax = ax;
    a76c:	4b34      	ldr	r3, [pc, #208]	; (a840 <CorrectIMUvalues+0x418>)
    a76e:	2200      	movs	r2, #0
    a770:	5e9a      	ldrsh	r2, [r3, r2]
    a772:	4b34      	ldr	r3, [pc, #208]	; (a844 <CorrectIMUvalues+0x41c>)
    a774:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a776:	4b34      	ldr	r3, [pc, #208]	; (a848 <CorrectIMUvalues+0x420>)
    a778:	2200      	movs	r2, #0
    a77a:	5e9b      	ldrsh	r3, [r3, r2]
    a77c:	b29b      	uxth	r3, r3
    a77e:	425b      	negs	r3, r3
    a780:	b29b      	uxth	r3, r3
    a782:	b21a      	sxth	r2, r3
    a784:	4b31      	ldr	r3, [pc, #196]	; (a84c <CorrectIMUvalues+0x424>)
    a786:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    a788:	4b31      	ldr	r3, [pc, #196]	; (a850 <CorrectIMUvalues+0x428>)
    a78a:	2200      	movs	r2, #0
    a78c:	5e9a      	ldrsh	r2, [r3, r2]
    a78e:	4b31      	ldr	r3, [pc, #196]	; (a854 <CorrectIMUvalues+0x42c>)
    a790:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a792:	4b31      	ldr	r3, [pc, #196]	; (a858 <CorrectIMUvalues+0x430>)
    a794:	2200      	movs	r2, #0
    a796:	5e9b      	ldrsh	r3, [r3, r2]
    a798:	b29b      	uxth	r3, r3
    a79a:	425b      	negs	r3, r3
    a79c:	b29b      	uxth	r3, r3
    a79e:	b21a      	sxth	r2, r3
    a7a0:	4b2e      	ldr	r3, [pc, #184]	; (a85c <CorrectIMUvalues+0x434>)
    a7a2:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    a7a4:	4b2e      	ldr	r3, [pc, #184]	; (a860 <CorrectIMUvalues+0x438>)
    a7a6:	2200      	movs	r2, #0
    a7a8:	5e9a      	ldrsh	r2, [r3, r2]
    a7aa:	4b2e      	ldr	r3, [pc, #184]	; (a864 <CorrectIMUvalues+0x43c>)
    a7ac:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a7ae:	4b2e      	ldr	r3, [pc, #184]	; (a868 <CorrectIMUvalues+0x440>)
    a7b0:	2200      	movs	r2, #0
    a7b2:	5e9b      	ldrsh	r3, [r3, r2]
    a7b4:	b29b      	uxth	r3, r3
    a7b6:	425b      	negs	r3, r3
    a7b8:	b29b      	uxth	r3, r3
    a7ba:	b21a      	sxth	r2, r3
    a7bc:	4b2b      	ldr	r3, [pc, #172]	; (a86c <CorrectIMUvalues+0x444>)
    a7be:	801a      	strh	r2, [r3, #0]
}
    a7c0:	f000 fbd4 	bl	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a7c4:	1dbb      	adds	r3, r7, #6
    a7c6:	781b      	ldrb	r3, [r3, #0]
    a7c8:	2b06      	cmp	r3, #6
    a7ca:	d001      	beq.n	a7d0 <CorrectIMUvalues+0x3a8>
    a7cc:	f000 fbce 	bl	af6c <CorrectIMUvalues+0xb44>
			cax = -ax;
    a7d0:	4b1b      	ldr	r3, [pc, #108]	; (a840 <CorrectIMUvalues+0x418>)
    a7d2:	2200      	movs	r2, #0
    a7d4:	5e9b      	ldrsh	r3, [r3, r2]
    a7d6:	b29b      	uxth	r3, r3
    a7d8:	425b      	negs	r3, r3
    a7da:	b29b      	uxth	r3, r3
    a7dc:	b21a      	sxth	r2, r3
    a7de:	4b19      	ldr	r3, [pc, #100]	; (a844 <CorrectIMUvalues+0x41c>)
    a7e0:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a7e2:	4b19      	ldr	r3, [pc, #100]	; (a848 <CorrectIMUvalues+0x420>)
    a7e4:	2200      	movs	r2, #0
    a7e6:	5e9a      	ldrsh	r2, [r3, r2]
    a7e8:	4b18      	ldr	r3, [pc, #96]	; (a84c <CorrectIMUvalues+0x424>)
    a7ea:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    a7ec:	4b18      	ldr	r3, [pc, #96]	; (a850 <CorrectIMUvalues+0x428>)
    a7ee:	2200      	movs	r2, #0
    a7f0:	5e9b      	ldrsh	r3, [r3, r2]
    a7f2:	b29b      	uxth	r3, r3
    a7f4:	425b      	negs	r3, r3
    a7f6:	b29b      	uxth	r3, r3
    a7f8:	b21a      	sxth	r2, r3
    a7fa:	4b16      	ldr	r3, [pc, #88]	; (a854 <CorrectIMUvalues+0x42c>)
    a7fc:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a7fe:	4b16      	ldr	r3, [pc, #88]	; (a858 <CorrectIMUvalues+0x430>)
    a800:	2200      	movs	r2, #0
    a802:	5e9a      	ldrsh	r2, [r3, r2]
    a804:	4b15      	ldr	r3, [pc, #84]	; (a85c <CorrectIMUvalues+0x434>)
    a806:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    a808:	4b15      	ldr	r3, [pc, #84]	; (a860 <CorrectIMUvalues+0x438>)
    a80a:	2200      	movs	r2, #0
    a80c:	5e9b      	ldrsh	r3, [r3, r2]
    a80e:	b29b      	uxth	r3, r3
    a810:	425b      	negs	r3, r3
    a812:	b29b      	uxth	r3, r3
    a814:	b21a      	sxth	r2, r3
    a816:	4b13      	ldr	r3, [pc, #76]	; (a864 <CorrectIMUvalues+0x43c>)
    a818:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a81a:	4b13      	ldr	r3, [pc, #76]	; (a868 <CorrectIMUvalues+0x440>)
    a81c:	2200      	movs	r2, #0
    a81e:	5e9a      	ldrsh	r2, [r3, r2]
    a820:	4b12      	ldr	r3, [pc, #72]	; (a86c <CorrectIMUvalues+0x444>)
    a822:	801a      	strh	r2, [r3, #0]
}
    a824:	e3a2      	b.n	af6c <CorrectIMUvalues+0xb44>
    a826:	46c0      	nop			; (mov r8, r8)
    a828:	200002ee 	.word	0x200002ee
    a82c:	20000300 	.word	0x20000300
    a830:	200002e8 	.word	0x200002e8
    a834:	200002fa 	.word	0x200002fa
    a838:	200002f4 	.word	0x200002f4
    a83c:	20000306 	.word	0x20000306
    a840:	200002ea 	.word	0x200002ea
    a844:	200002fc 	.word	0x200002fc
    a848:	200002ec 	.word	0x200002ec
    a84c:	200002fe 	.word	0x200002fe
    a850:	200002e4 	.word	0x200002e4
    a854:	200002f6 	.word	0x200002f6
    a858:	200002e6 	.word	0x200002e6
    a85c:	200002f8 	.word	0x200002f8
    a860:	200002f0 	.word	0x200002f0
    a864:	20000302 	.word	0x20000302
    a868:	200002f2 	.word	0x200002f2
    a86c:	20000304 	.word	0x20000304
	} else if(connector_orient == ORIENT_LEFT){ // Connectors Left
    a870:	1dfb      	adds	r3, r7, #7
    a872:	781b      	ldrb	r3, [r3, #0]
    a874:	2b03      	cmp	r3, #3
    a876:	d000      	beq.n	a87a <CorrectIMUvalues+0x452>
    a878:	e0cf      	b.n	aa1a <CorrectIMUvalues+0x5f2>
		caz = ax;
    a87a:	4bd4      	ldr	r3, [pc, #848]	; (abcc <CorrectIMUvalues+0x7a4>)
    a87c:	2200      	movs	r2, #0
    a87e:	5e9a      	ldrsh	r2, [r3, r2]
    a880:	4bd3      	ldr	r3, [pc, #844]	; (abd0 <CorrectIMUvalues+0x7a8>)
    a882:	801a      	strh	r2, [r3, #0]
		cgz = gx;
    a884:	4bd3      	ldr	r3, [pc, #844]	; (abd4 <CorrectIMUvalues+0x7ac>)
    a886:	2200      	movs	r2, #0
    a888:	5e9a      	ldrsh	r2, [r3, r2]
    a88a:	4bd3      	ldr	r3, [pc, #844]	; (abd8 <CorrectIMUvalues+0x7b0>)
    a88c:	801a      	strh	r2, [r3, #0]
		cmz = -mx;
    a88e:	4bd3      	ldr	r3, [pc, #844]	; (abdc <CorrectIMUvalues+0x7b4>)
    a890:	2200      	movs	r2, #0
    a892:	5e9b      	ldrsh	r3, [r3, r2]
    a894:	b29b      	uxth	r3, r3
    a896:	425b      	negs	r3, r3
    a898:	b29b      	uxth	r3, r3
    a89a:	b21a      	sxth	r2, r3
    a89c:	4bd0      	ldr	r3, [pc, #832]	; (abe0 <CorrectIMUvalues+0x7b8>)
    a89e:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    a8a0:	1dbb      	adds	r3, r7, #6
    a8a2:	781b      	ldrb	r3, [r3, #0]
    a8a4:	2b01      	cmp	r3, #1
    a8a6:	d122      	bne.n	a8ee <CorrectIMUvalues+0x4c6>
			cax = ay;
    a8a8:	4bce      	ldr	r3, [pc, #824]	; (abe4 <CorrectIMUvalues+0x7bc>)
    a8aa:	2200      	movs	r2, #0
    a8ac:	5e9a      	ldrsh	r2, [r3, r2]
    a8ae:	4bce      	ldr	r3, [pc, #824]	; (abe8 <CorrectIMUvalues+0x7c0>)
    a8b0:	801a      	strh	r2, [r3, #0]
			cay = az;
    a8b2:	4bce      	ldr	r3, [pc, #824]	; (abec <CorrectIMUvalues+0x7c4>)
    a8b4:	2200      	movs	r2, #0
    a8b6:	5e9a      	ldrsh	r2, [r3, r2]
    a8b8:	4bcd      	ldr	r3, [pc, #820]	; (abf0 <CorrectIMUvalues+0x7c8>)
    a8ba:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a8bc:	4bcd      	ldr	r3, [pc, #820]	; (abf4 <CorrectIMUvalues+0x7cc>)
    a8be:	2200      	movs	r2, #0
    a8c0:	5e9a      	ldrsh	r2, [r3, r2]
    a8c2:	4bcd      	ldr	r3, [pc, #820]	; (abf8 <CorrectIMUvalues+0x7d0>)
    a8c4:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    a8c6:	4bcd      	ldr	r3, [pc, #820]	; (abfc <CorrectIMUvalues+0x7d4>)
    a8c8:	2200      	movs	r2, #0
    a8ca:	5e9a      	ldrsh	r2, [r3, r2]
    a8cc:	4bcc      	ldr	r3, [pc, #816]	; (ac00 <CorrectIMUvalues+0x7d8>)
    a8ce:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a8d0:	4bcc      	ldr	r3, [pc, #816]	; (ac04 <CorrectIMUvalues+0x7dc>)
    a8d2:	2200      	movs	r2, #0
    a8d4:	5e9b      	ldrsh	r3, [r3, r2]
    a8d6:	b29b      	uxth	r3, r3
    a8d8:	425b      	negs	r3, r3
    a8da:	b29b      	uxth	r3, r3
    a8dc:	b21a      	sxth	r2, r3
    a8de:	4bca      	ldr	r3, [pc, #808]	; (ac08 <CorrectIMUvalues+0x7e0>)
    a8e0:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    a8e2:	4bca      	ldr	r3, [pc, #808]	; (ac0c <CorrectIMUvalues+0x7e4>)
    a8e4:	2200      	movs	r2, #0
    a8e6:	5e9a      	ldrsh	r2, [r3, r2]
    a8e8:	4bc9      	ldr	r3, [pc, #804]	; (ac10 <CorrectIMUvalues+0x7e8>)
    a8ea:	801a      	strh	r2, [r3, #0]
}
    a8ec:	e33e      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    a8ee:	1dbb      	adds	r3, r7, #6
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	2b02      	cmp	r3, #2
    a8f4:	d132      	bne.n	a95c <CorrectIMUvalues+0x534>
			cax = -ay;
    a8f6:	4bbb      	ldr	r3, [pc, #748]	; (abe4 <CorrectIMUvalues+0x7bc>)
    a8f8:	2200      	movs	r2, #0
    a8fa:	5e9b      	ldrsh	r3, [r3, r2]
    a8fc:	b29b      	uxth	r3, r3
    a8fe:	425b      	negs	r3, r3
    a900:	b29b      	uxth	r3, r3
    a902:	b21a      	sxth	r2, r3
    a904:	4bb8      	ldr	r3, [pc, #736]	; (abe8 <CorrectIMUvalues+0x7c0>)
    a906:	801a      	strh	r2, [r3, #0]
			cay = -az;
    a908:	4bb8      	ldr	r3, [pc, #736]	; (abec <CorrectIMUvalues+0x7c4>)
    a90a:	2200      	movs	r2, #0
    a90c:	5e9b      	ldrsh	r3, [r3, r2]
    a90e:	b29b      	uxth	r3, r3
    a910:	425b      	negs	r3, r3
    a912:	b29b      	uxth	r3, r3
    a914:	b21a      	sxth	r2, r3
    a916:	4bb6      	ldr	r3, [pc, #728]	; (abf0 <CorrectIMUvalues+0x7c8>)
    a918:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a91a:	4bb6      	ldr	r3, [pc, #728]	; (abf4 <CorrectIMUvalues+0x7cc>)
    a91c:	2200      	movs	r2, #0
    a91e:	5e9b      	ldrsh	r3, [r3, r2]
    a920:	b29b      	uxth	r3, r3
    a922:	425b      	negs	r3, r3
    a924:	b29b      	uxth	r3, r3
    a926:	b21a      	sxth	r2, r3
    a928:	4bb3      	ldr	r3, [pc, #716]	; (abf8 <CorrectIMUvalues+0x7d0>)
    a92a:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    a92c:	4bb3      	ldr	r3, [pc, #716]	; (abfc <CorrectIMUvalues+0x7d4>)
    a92e:	2200      	movs	r2, #0
    a930:	5e9b      	ldrsh	r3, [r3, r2]
    a932:	b29b      	uxth	r3, r3
    a934:	425b      	negs	r3, r3
    a936:	b29b      	uxth	r3, r3
    a938:	b21a      	sxth	r2, r3
    a93a:	4bb1      	ldr	r3, [pc, #708]	; (ac00 <CorrectIMUvalues+0x7d8>)
    a93c:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a93e:	4bb1      	ldr	r3, [pc, #708]	; (ac04 <CorrectIMUvalues+0x7dc>)
    a940:	2200      	movs	r2, #0
    a942:	5e9a      	ldrsh	r2, [r3, r2]
    a944:	4bb0      	ldr	r3, [pc, #704]	; (ac08 <CorrectIMUvalues+0x7e0>)
    a946:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    a948:	4bb0      	ldr	r3, [pc, #704]	; (ac0c <CorrectIMUvalues+0x7e4>)
    a94a:	2200      	movs	r2, #0
    a94c:	5e9b      	ldrsh	r3, [r3, r2]
    a94e:	b29b      	uxth	r3, r3
    a950:	425b      	negs	r3, r3
    a952:	b29b      	uxth	r3, r3
    a954:	b21a      	sxth	r2, r3
    a956:	4bae      	ldr	r3, [pc, #696]	; (ac10 <CorrectIMUvalues+0x7e8>)
    a958:	801a      	strh	r2, [r3, #0]
}
    a95a:	e307      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a95c:	1dbb      	adds	r3, r7, #6
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	2b05      	cmp	r3, #5
    a962:	d12e      	bne.n	a9c2 <CorrectIMUvalues+0x59a>
			cax = az;
    a964:	4ba1      	ldr	r3, [pc, #644]	; (abec <CorrectIMUvalues+0x7c4>)
    a966:	2200      	movs	r2, #0
    a968:	5e9a      	ldrsh	r2, [r3, r2]
    a96a:	4b9f      	ldr	r3, [pc, #636]	; (abe8 <CorrectIMUvalues+0x7c0>)
    a96c:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a96e:	4b9d      	ldr	r3, [pc, #628]	; (abe4 <CorrectIMUvalues+0x7bc>)
    a970:	2200      	movs	r2, #0
    a972:	5e9b      	ldrsh	r3, [r3, r2]
    a974:	b29b      	uxth	r3, r3
    a976:	425b      	negs	r3, r3
    a978:	b29b      	uxth	r3, r3
    a97a:	b21a      	sxth	r2, r3
    a97c:	4b9c      	ldr	r3, [pc, #624]	; (abf0 <CorrectIMUvalues+0x7c8>)
    a97e:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    a980:	4b9e      	ldr	r3, [pc, #632]	; (abfc <CorrectIMUvalues+0x7d4>)
    a982:	2200      	movs	r2, #0
    a984:	5e9a      	ldrsh	r2, [r3, r2]
    a986:	4b9c      	ldr	r3, [pc, #624]	; (abf8 <CorrectIMUvalues+0x7d0>)
    a988:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a98a:	4b9a      	ldr	r3, [pc, #616]	; (abf4 <CorrectIMUvalues+0x7cc>)
    a98c:	2200      	movs	r2, #0
    a98e:	5e9b      	ldrsh	r3, [r3, r2]
    a990:	b29b      	uxth	r3, r3
    a992:	425b      	negs	r3, r3
    a994:	b29b      	uxth	r3, r3
    a996:	b21a      	sxth	r2, r3
    a998:	4b99      	ldr	r3, [pc, #612]	; (ac00 <CorrectIMUvalues+0x7d8>)
    a99a:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    a99c:	4b9b      	ldr	r3, [pc, #620]	; (ac0c <CorrectIMUvalues+0x7e4>)
    a99e:	2200      	movs	r2, #0
    a9a0:	5e9b      	ldrsh	r3, [r3, r2]
    a9a2:	b29b      	uxth	r3, r3
    a9a4:	425b      	negs	r3, r3
    a9a6:	b29b      	uxth	r3, r3
    a9a8:	b21a      	sxth	r2, r3
    a9aa:	4b97      	ldr	r3, [pc, #604]	; (ac08 <CorrectIMUvalues+0x7e0>)
    a9ac:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a9ae:	4b95      	ldr	r3, [pc, #596]	; (ac04 <CorrectIMUvalues+0x7dc>)
    a9b0:	2200      	movs	r2, #0
    a9b2:	5e9b      	ldrsh	r3, [r3, r2]
    a9b4:	b29b      	uxth	r3, r3
    a9b6:	425b      	negs	r3, r3
    a9b8:	b29b      	uxth	r3, r3
    a9ba:	b21a      	sxth	r2, r3
    a9bc:	4b94      	ldr	r3, [pc, #592]	; (ac10 <CorrectIMUvalues+0x7e8>)
    a9be:	801a      	strh	r2, [r3, #0]
}
    a9c0:	e2d4      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a9c2:	1dbb      	adds	r3, r7, #6
    a9c4:	781b      	ldrb	r3, [r3, #0]
    a9c6:	2b06      	cmp	r3, #6
    a9c8:	d000      	beq.n	a9cc <CorrectIMUvalues+0x5a4>
    a9ca:	e2cf      	b.n	af6c <CorrectIMUvalues+0xb44>
			cax = -az;
    a9cc:	4b87      	ldr	r3, [pc, #540]	; (abec <CorrectIMUvalues+0x7c4>)
    a9ce:	2200      	movs	r2, #0
    a9d0:	5e9b      	ldrsh	r3, [r3, r2]
    a9d2:	b29b      	uxth	r3, r3
    a9d4:	425b      	negs	r3, r3
    a9d6:	b29b      	uxth	r3, r3
    a9d8:	b21a      	sxth	r2, r3
    a9da:	4b83      	ldr	r3, [pc, #524]	; (abe8 <CorrectIMUvalues+0x7c0>)
    a9dc:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a9de:	4b81      	ldr	r3, [pc, #516]	; (abe4 <CorrectIMUvalues+0x7bc>)
    a9e0:	2200      	movs	r2, #0
    a9e2:	5e9a      	ldrsh	r2, [r3, r2]
    a9e4:	4b82      	ldr	r3, [pc, #520]	; (abf0 <CorrectIMUvalues+0x7c8>)
    a9e6:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    a9e8:	4b84      	ldr	r3, [pc, #528]	; (abfc <CorrectIMUvalues+0x7d4>)
    a9ea:	2200      	movs	r2, #0
    a9ec:	5e9b      	ldrsh	r3, [r3, r2]
    a9ee:	b29b      	uxth	r3, r3
    a9f0:	425b      	negs	r3, r3
    a9f2:	b29b      	uxth	r3, r3
    a9f4:	b21a      	sxth	r2, r3
    a9f6:	4b80      	ldr	r3, [pc, #512]	; (abf8 <CorrectIMUvalues+0x7d0>)
    a9f8:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a9fa:	4b7e      	ldr	r3, [pc, #504]	; (abf4 <CorrectIMUvalues+0x7cc>)
    a9fc:	2200      	movs	r2, #0
    a9fe:	5e9a      	ldrsh	r2, [r3, r2]
    aa00:	4b7f      	ldr	r3, [pc, #508]	; (ac00 <CorrectIMUvalues+0x7d8>)
    aa02:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    aa04:	4b81      	ldr	r3, [pc, #516]	; (ac0c <CorrectIMUvalues+0x7e4>)
    aa06:	2200      	movs	r2, #0
    aa08:	5e9a      	ldrsh	r2, [r3, r2]
    aa0a:	4b7f      	ldr	r3, [pc, #508]	; (ac08 <CorrectIMUvalues+0x7e0>)
    aa0c:	801a      	strh	r2, [r3, #0]
			cmy = my;
    aa0e:	4b7d      	ldr	r3, [pc, #500]	; (ac04 <CorrectIMUvalues+0x7dc>)
    aa10:	2200      	movs	r2, #0
    aa12:	5e9a      	ldrsh	r2, [r3, r2]
    aa14:	4b7e      	ldr	r3, [pc, #504]	; (ac10 <CorrectIMUvalues+0x7e8>)
    aa16:	801a      	strh	r2, [r3, #0]
}
    aa18:	e2a8      	b.n	af6c <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_RIGHT){ // Connectors Right
    aa1a:	1dfb      	adds	r3, r7, #7
    aa1c:	781b      	ldrb	r3, [r3, #0]
    aa1e:	2b04      	cmp	r3, #4
    aa20:	d000      	beq.n	aa24 <CorrectIMUvalues+0x5fc>
    aa22:	e0f7      	b.n	ac14 <CorrectIMUvalues+0x7ec>
		caz = -ax;
    aa24:	4b69      	ldr	r3, [pc, #420]	; (abcc <CorrectIMUvalues+0x7a4>)
    aa26:	2200      	movs	r2, #0
    aa28:	5e9b      	ldrsh	r3, [r3, r2]
    aa2a:	b29b      	uxth	r3, r3
    aa2c:	425b      	negs	r3, r3
    aa2e:	b29b      	uxth	r3, r3
    aa30:	b21a      	sxth	r2, r3
    aa32:	4b67      	ldr	r3, [pc, #412]	; (abd0 <CorrectIMUvalues+0x7a8>)
    aa34:	801a      	strh	r2, [r3, #0]
		cgz = -gx;
    aa36:	4b67      	ldr	r3, [pc, #412]	; (abd4 <CorrectIMUvalues+0x7ac>)
    aa38:	2200      	movs	r2, #0
    aa3a:	5e9b      	ldrsh	r3, [r3, r2]
    aa3c:	b29b      	uxth	r3, r3
    aa3e:	425b      	negs	r3, r3
    aa40:	b29b      	uxth	r3, r3
    aa42:	b21a      	sxth	r2, r3
    aa44:	4b64      	ldr	r3, [pc, #400]	; (abd8 <CorrectIMUvalues+0x7b0>)
    aa46:	801a      	strh	r2, [r3, #0]
		cmz = mx;
    aa48:	4b64      	ldr	r3, [pc, #400]	; (abdc <CorrectIMUvalues+0x7b4>)
    aa4a:	2200      	movs	r2, #0
    aa4c:	5e9a      	ldrsh	r2, [r3, r2]
    aa4e:	4b64      	ldr	r3, [pc, #400]	; (abe0 <CorrectIMUvalues+0x7b8>)
    aa50:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    aa52:	1dbb      	adds	r3, r7, #6
    aa54:	781b      	ldrb	r3, [r3, #0]
    aa56:	2b01      	cmp	r3, #1
    aa58:	d126      	bne.n	aaa8 <CorrectIMUvalues+0x680>
			cax = -ay;
    aa5a:	4b62      	ldr	r3, [pc, #392]	; (abe4 <CorrectIMUvalues+0x7bc>)
    aa5c:	2200      	movs	r2, #0
    aa5e:	5e9b      	ldrsh	r3, [r3, r2]
    aa60:	b29b      	uxth	r3, r3
    aa62:	425b      	negs	r3, r3
    aa64:	b29b      	uxth	r3, r3
    aa66:	b21a      	sxth	r2, r3
    aa68:	4b5f      	ldr	r3, [pc, #380]	; (abe8 <CorrectIMUvalues+0x7c0>)
    aa6a:	801a      	strh	r2, [r3, #0]
			cay = az;
    aa6c:	4b5f      	ldr	r3, [pc, #380]	; (abec <CorrectIMUvalues+0x7c4>)
    aa6e:	2200      	movs	r2, #0
    aa70:	5e9a      	ldrsh	r2, [r3, r2]
    aa72:	4b5f      	ldr	r3, [pc, #380]	; (abf0 <CorrectIMUvalues+0x7c8>)
    aa74:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    aa76:	4b5f      	ldr	r3, [pc, #380]	; (abf4 <CorrectIMUvalues+0x7cc>)
    aa78:	2200      	movs	r2, #0
    aa7a:	5e9b      	ldrsh	r3, [r3, r2]
    aa7c:	b29b      	uxth	r3, r3
    aa7e:	425b      	negs	r3, r3
    aa80:	b29b      	uxth	r3, r3
    aa82:	b21a      	sxth	r2, r3
    aa84:	4b5c      	ldr	r3, [pc, #368]	; (abf8 <CorrectIMUvalues+0x7d0>)
    aa86:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    aa88:	4b5c      	ldr	r3, [pc, #368]	; (abfc <CorrectIMUvalues+0x7d4>)
    aa8a:	2200      	movs	r2, #0
    aa8c:	5e9a      	ldrsh	r2, [r3, r2]
    aa8e:	4b5c      	ldr	r3, [pc, #368]	; (ac00 <CorrectIMUvalues+0x7d8>)
    aa90:	801a      	strh	r2, [r3, #0]
			cmx = my;
    aa92:	4b5c      	ldr	r3, [pc, #368]	; (ac04 <CorrectIMUvalues+0x7dc>)
    aa94:	2200      	movs	r2, #0
    aa96:	5e9a      	ldrsh	r2, [r3, r2]
    aa98:	4b5b      	ldr	r3, [pc, #364]	; (ac08 <CorrectIMUvalues+0x7e0>)
    aa9a:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    aa9c:	4b5b      	ldr	r3, [pc, #364]	; (ac0c <CorrectIMUvalues+0x7e4>)
    aa9e:	2200      	movs	r2, #0
    aaa0:	5e9a      	ldrsh	r2, [r3, r2]
    aaa2:	4b5b      	ldr	r3, [pc, #364]	; (ac10 <CorrectIMUvalues+0x7e8>)
    aaa4:	801a      	strh	r2, [r3, #0]
}
    aaa6:	e261      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    aaa8:	1dbb      	adds	r3, r7, #6
    aaaa:	781b      	ldrb	r3, [r3, #0]
    aaac:	2b02      	cmp	r3, #2
    aaae:	d12e      	bne.n	ab0e <CorrectIMUvalues+0x6e6>
			cax = ay;
    aab0:	4b4c      	ldr	r3, [pc, #304]	; (abe4 <CorrectIMUvalues+0x7bc>)
    aab2:	2200      	movs	r2, #0
    aab4:	5e9a      	ldrsh	r2, [r3, r2]
    aab6:	4b4c      	ldr	r3, [pc, #304]	; (abe8 <CorrectIMUvalues+0x7c0>)
    aab8:	801a      	strh	r2, [r3, #0]
			cay = -az;
    aaba:	4b4c      	ldr	r3, [pc, #304]	; (abec <CorrectIMUvalues+0x7c4>)
    aabc:	2200      	movs	r2, #0
    aabe:	5e9b      	ldrsh	r3, [r3, r2]
    aac0:	b29b      	uxth	r3, r3
    aac2:	425b      	negs	r3, r3
    aac4:	b29b      	uxth	r3, r3
    aac6:	b21a      	sxth	r2, r3
    aac8:	4b49      	ldr	r3, [pc, #292]	; (abf0 <CorrectIMUvalues+0x7c8>)
    aaca:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    aacc:	4b49      	ldr	r3, [pc, #292]	; (abf4 <CorrectIMUvalues+0x7cc>)
    aace:	2200      	movs	r2, #0
    aad0:	5e9a      	ldrsh	r2, [r3, r2]
    aad2:	4b49      	ldr	r3, [pc, #292]	; (abf8 <CorrectIMUvalues+0x7d0>)
    aad4:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    aad6:	4b49      	ldr	r3, [pc, #292]	; (abfc <CorrectIMUvalues+0x7d4>)
    aad8:	2200      	movs	r2, #0
    aada:	5e9b      	ldrsh	r3, [r3, r2]
    aadc:	b29b      	uxth	r3, r3
    aade:	425b      	negs	r3, r3
    aae0:	b29b      	uxth	r3, r3
    aae2:	b21a      	sxth	r2, r3
    aae4:	4b46      	ldr	r3, [pc, #280]	; (ac00 <CorrectIMUvalues+0x7d8>)
    aae6:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    aae8:	4b46      	ldr	r3, [pc, #280]	; (ac04 <CorrectIMUvalues+0x7dc>)
    aaea:	2200      	movs	r2, #0
    aaec:	5e9b      	ldrsh	r3, [r3, r2]
    aaee:	b29b      	uxth	r3, r3
    aaf0:	425b      	negs	r3, r3
    aaf2:	b29b      	uxth	r3, r3
    aaf4:	b21a      	sxth	r2, r3
    aaf6:	4b44      	ldr	r3, [pc, #272]	; (ac08 <CorrectIMUvalues+0x7e0>)
    aaf8:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    aafa:	4b44      	ldr	r3, [pc, #272]	; (ac0c <CorrectIMUvalues+0x7e4>)
    aafc:	2200      	movs	r2, #0
    aafe:	5e9b      	ldrsh	r3, [r3, r2]
    ab00:	b29b      	uxth	r3, r3
    ab02:	425b      	negs	r3, r3
    ab04:	b29b      	uxth	r3, r3
    ab06:	b21a      	sxth	r2, r3
    ab08:	4b41      	ldr	r3, [pc, #260]	; (ac10 <CorrectIMUvalues+0x7e8>)
    ab0a:	801a      	strh	r2, [r3, #0]
}
    ab0c:	e22e      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    ab0e:	1dbb      	adds	r3, r7, #6
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	2b05      	cmp	r3, #5
    ab14:	d132      	bne.n	ab7c <CorrectIMUvalues+0x754>
			cax = -az;
    ab16:	4b35      	ldr	r3, [pc, #212]	; (abec <CorrectIMUvalues+0x7c4>)
    ab18:	2200      	movs	r2, #0
    ab1a:	5e9b      	ldrsh	r3, [r3, r2]
    ab1c:	b29b      	uxth	r3, r3
    ab1e:	425b      	negs	r3, r3
    ab20:	b29b      	uxth	r3, r3
    ab22:	b21a      	sxth	r2, r3
    ab24:	4b30      	ldr	r3, [pc, #192]	; (abe8 <CorrectIMUvalues+0x7c0>)
    ab26:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    ab28:	4b2e      	ldr	r3, [pc, #184]	; (abe4 <CorrectIMUvalues+0x7bc>)
    ab2a:	2200      	movs	r2, #0
    ab2c:	5e9b      	ldrsh	r3, [r3, r2]
    ab2e:	b29b      	uxth	r3, r3
    ab30:	425b      	negs	r3, r3
    ab32:	b29b      	uxth	r3, r3
    ab34:	b21a      	sxth	r2, r3
    ab36:	4b2e      	ldr	r3, [pc, #184]	; (abf0 <CorrectIMUvalues+0x7c8>)
    ab38:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    ab3a:	4b30      	ldr	r3, [pc, #192]	; (abfc <CorrectIMUvalues+0x7d4>)
    ab3c:	2200      	movs	r2, #0
    ab3e:	5e9b      	ldrsh	r3, [r3, r2]
    ab40:	b29b      	uxth	r3, r3
    ab42:	425b      	negs	r3, r3
    ab44:	b29b      	uxth	r3, r3
    ab46:	b21a      	sxth	r2, r3
    ab48:	4b2b      	ldr	r3, [pc, #172]	; (abf8 <CorrectIMUvalues+0x7d0>)
    ab4a:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    ab4c:	4b29      	ldr	r3, [pc, #164]	; (abf4 <CorrectIMUvalues+0x7cc>)
    ab4e:	2200      	movs	r2, #0
    ab50:	5e9b      	ldrsh	r3, [r3, r2]
    ab52:	b29b      	uxth	r3, r3
    ab54:	425b      	negs	r3, r3
    ab56:	b29b      	uxth	r3, r3
    ab58:	b21a      	sxth	r2, r3
    ab5a:	4b29      	ldr	r3, [pc, #164]	; (ac00 <CorrectIMUvalues+0x7d8>)
    ab5c:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    ab5e:	4b2b      	ldr	r3, [pc, #172]	; (ac0c <CorrectIMUvalues+0x7e4>)
    ab60:	2200      	movs	r2, #0
    ab62:	5e9a      	ldrsh	r2, [r3, r2]
    ab64:	4b28      	ldr	r3, [pc, #160]	; (ac08 <CorrectIMUvalues+0x7e0>)
    ab66:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    ab68:	4b26      	ldr	r3, [pc, #152]	; (ac04 <CorrectIMUvalues+0x7dc>)
    ab6a:	2200      	movs	r2, #0
    ab6c:	5e9b      	ldrsh	r3, [r3, r2]
    ab6e:	b29b      	uxth	r3, r3
    ab70:	425b      	negs	r3, r3
    ab72:	b29b      	uxth	r3, r3
    ab74:	b21a      	sxth	r2, r3
    ab76:	4b26      	ldr	r3, [pc, #152]	; (ac10 <CorrectIMUvalues+0x7e8>)
    ab78:	801a      	strh	r2, [r3, #0]
}
    ab7a:	e1f7      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    ab7c:	1dbb      	adds	r3, r7, #6
    ab7e:	781b      	ldrb	r3, [r3, #0]
    ab80:	2b06      	cmp	r3, #6
    ab82:	d000      	beq.n	ab86 <CorrectIMUvalues+0x75e>
    ab84:	e1f2      	b.n	af6c <CorrectIMUvalues+0xb44>
			cax = az;
    ab86:	4b19      	ldr	r3, [pc, #100]	; (abec <CorrectIMUvalues+0x7c4>)
    ab88:	2200      	movs	r2, #0
    ab8a:	5e9a      	ldrsh	r2, [r3, r2]
    ab8c:	4b16      	ldr	r3, [pc, #88]	; (abe8 <CorrectIMUvalues+0x7c0>)
    ab8e:	801a      	strh	r2, [r3, #0]
			cay = ay;
    ab90:	4b14      	ldr	r3, [pc, #80]	; (abe4 <CorrectIMUvalues+0x7bc>)
    ab92:	2200      	movs	r2, #0
    ab94:	5e9a      	ldrsh	r2, [r3, r2]
    ab96:	4b16      	ldr	r3, [pc, #88]	; (abf0 <CorrectIMUvalues+0x7c8>)
    ab98:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    ab9a:	4b18      	ldr	r3, [pc, #96]	; (abfc <CorrectIMUvalues+0x7d4>)
    ab9c:	2200      	movs	r2, #0
    ab9e:	5e9a      	ldrsh	r2, [r3, r2]
    aba0:	4b15      	ldr	r3, [pc, #84]	; (abf8 <CorrectIMUvalues+0x7d0>)
    aba2:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    aba4:	4b13      	ldr	r3, [pc, #76]	; (abf4 <CorrectIMUvalues+0x7cc>)
    aba6:	2200      	movs	r2, #0
    aba8:	5e9a      	ldrsh	r2, [r3, r2]
    abaa:	4b15      	ldr	r3, [pc, #84]	; (ac00 <CorrectIMUvalues+0x7d8>)
    abac:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    abae:	4b17      	ldr	r3, [pc, #92]	; (ac0c <CorrectIMUvalues+0x7e4>)
    abb0:	2200      	movs	r2, #0
    abb2:	5e9b      	ldrsh	r3, [r3, r2]
    abb4:	b29b      	uxth	r3, r3
    abb6:	425b      	negs	r3, r3
    abb8:	b29b      	uxth	r3, r3
    abba:	b21a      	sxth	r2, r3
    abbc:	4b12      	ldr	r3, [pc, #72]	; (ac08 <CorrectIMUvalues+0x7e0>)
    abbe:	801a      	strh	r2, [r3, #0]
			cmy = my;
    abc0:	4b10      	ldr	r3, [pc, #64]	; (ac04 <CorrectIMUvalues+0x7dc>)
    abc2:	2200      	movs	r2, #0
    abc4:	5e9a      	ldrsh	r2, [r3, r2]
    abc6:	4b12      	ldr	r3, [pc, #72]	; (ac10 <CorrectIMUvalues+0x7e8>)
    abc8:	801a      	strh	r2, [r3, #0]
}
    abca:	e1cf      	b.n	af6c <CorrectIMUvalues+0xb44>
    abcc:	200002ea 	.word	0x200002ea
    abd0:	20000300 	.word	0x20000300
    abd4:	200002e4 	.word	0x200002e4
    abd8:	200002fa 	.word	0x200002fa
    abdc:	200002f0 	.word	0x200002f0
    abe0:	20000306 	.word	0x20000306
    abe4:	200002ec 	.word	0x200002ec
    abe8:	200002fc 	.word	0x200002fc
    abec:	200002ee 	.word	0x200002ee
    abf0:	200002fe 	.word	0x200002fe
    abf4:	200002e6 	.word	0x200002e6
    abf8:	200002f6 	.word	0x200002f6
    abfc:	200002e8 	.word	0x200002e8
    ac00:	200002f8 	.word	0x200002f8
    ac04:	200002f2 	.word	0x200002f2
    ac08:	20000302 	.word	0x20000302
    ac0c:	200002f4 	.word	0x200002f4
    ac10:	20000304 	.word	0x20000304
	} else if(connector_orient == ORIENT_REAR){ // Connectors Rear
    ac14:	1dfb      	adds	r3, r7, #7
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	2b05      	cmp	r3, #5
    ac1a:	d000      	beq.n	ac1e <CorrectIMUvalues+0x7f6>
    ac1c:	e0d7      	b.n	adce <CorrectIMUvalues+0x9a6>
		caz = -ay;
    ac1e:	4bd5      	ldr	r3, [pc, #852]	; (af74 <CorrectIMUvalues+0xb4c>)
    ac20:	2200      	movs	r2, #0
    ac22:	5e9b      	ldrsh	r3, [r3, r2]
    ac24:	b29b      	uxth	r3, r3
    ac26:	425b      	negs	r3, r3
    ac28:	b29b      	uxth	r3, r3
    ac2a:	b21a      	sxth	r2, r3
    ac2c:	4bd2      	ldr	r3, [pc, #840]	; (af78 <CorrectIMUvalues+0xb50>)
    ac2e:	801a      	strh	r2, [r3, #0]
		cgz = -gy;
    ac30:	4bd2      	ldr	r3, [pc, #840]	; (af7c <CorrectIMUvalues+0xb54>)
    ac32:	2200      	movs	r2, #0
    ac34:	5e9b      	ldrsh	r3, [r3, r2]
    ac36:	b29b      	uxth	r3, r3
    ac38:	425b      	negs	r3, r3
    ac3a:	b29b      	uxth	r3, r3
    ac3c:	b21a      	sxth	r2, r3
    ac3e:	4bd0      	ldr	r3, [pc, #832]	; (af80 <CorrectIMUvalues+0xb58>)
    ac40:	801a      	strh	r2, [r3, #0]
		cmz = -my;
    ac42:	4bd0      	ldr	r3, [pc, #832]	; (af84 <CorrectIMUvalues+0xb5c>)
    ac44:	2200      	movs	r2, #0
    ac46:	5e9b      	ldrsh	r3, [r3, r2]
    ac48:	b29b      	uxth	r3, r3
    ac4a:	425b      	negs	r3, r3
    ac4c:	b29b      	uxth	r3, r3
    ac4e:	b21a      	sxth	r2, r3
    ac50:	4bcd      	ldr	r3, [pc, #820]	; (af88 <CorrectIMUvalues+0xb60>)
    ac52:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    ac54:	1dbb      	adds	r3, r7, #6
    ac56:	781b      	ldrb	r3, [r3, #0]
    ac58:	2b01      	cmp	r3, #1
    ac5a:	d11e      	bne.n	ac9a <CorrectIMUvalues+0x872>
			cax = ax;
    ac5c:	4bcb      	ldr	r3, [pc, #812]	; (af8c <CorrectIMUvalues+0xb64>)
    ac5e:	2200      	movs	r2, #0
    ac60:	5e9a      	ldrsh	r2, [r3, r2]
    ac62:	4bcb      	ldr	r3, [pc, #812]	; (af90 <CorrectIMUvalues+0xb68>)
    ac64:	801a      	strh	r2, [r3, #0]
			cay = az;
    ac66:	4bcb      	ldr	r3, [pc, #812]	; (af94 <CorrectIMUvalues+0xb6c>)
    ac68:	2200      	movs	r2, #0
    ac6a:	5e9a      	ldrsh	r2, [r3, r2]
    ac6c:	4bca      	ldr	r3, [pc, #808]	; (af98 <CorrectIMUvalues+0xb70>)
    ac6e:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    ac70:	4bca      	ldr	r3, [pc, #808]	; (af9c <CorrectIMUvalues+0xb74>)
    ac72:	2200      	movs	r2, #0
    ac74:	5e9a      	ldrsh	r2, [r3, r2]
    ac76:	4bca      	ldr	r3, [pc, #808]	; (afa0 <CorrectIMUvalues+0xb78>)
    ac78:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    ac7a:	4bca      	ldr	r3, [pc, #808]	; (afa4 <CorrectIMUvalues+0xb7c>)
    ac7c:	2200      	movs	r2, #0
    ac7e:	5e9a      	ldrsh	r2, [r3, r2]
    ac80:	4bc9      	ldr	r3, [pc, #804]	; (afa8 <CorrectIMUvalues+0xb80>)
    ac82:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    ac84:	4bc9      	ldr	r3, [pc, #804]	; (afac <CorrectIMUvalues+0xb84>)
    ac86:	2200      	movs	r2, #0
    ac88:	5e9a      	ldrsh	r2, [r3, r2]
    ac8a:	4bc9      	ldr	r3, [pc, #804]	; (afb0 <CorrectIMUvalues+0xb88>)
    ac8c:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    ac8e:	4bc9      	ldr	r3, [pc, #804]	; (afb4 <CorrectIMUvalues+0xb8c>)
    ac90:	2200      	movs	r2, #0
    ac92:	5e9a      	ldrsh	r2, [r3, r2]
    ac94:	4bc8      	ldr	r3, [pc, #800]	; (afb8 <CorrectIMUvalues+0xb90>)
    ac96:	801a      	strh	r2, [r3, #0]
}
    ac98:	e168      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    ac9a:	1dbb      	adds	r3, r7, #6
    ac9c:	781b      	ldrb	r3, [r3, #0]
    ac9e:	2b02      	cmp	r3, #2
    aca0:	d136      	bne.n	ad10 <CorrectIMUvalues+0x8e8>
			cax = -ax;
    aca2:	4bba      	ldr	r3, [pc, #744]	; (af8c <CorrectIMUvalues+0xb64>)
    aca4:	2200      	movs	r2, #0
    aca6:	5e9b      	ldrsh	r3, [r3, r2]
    aca8:	b29b      	uxth	r3, r3
    acaa:	425b      	negs	r3, r3
    acac:	b29b      	uxth	r3, r3
    acae:	b21a      	sxth	r2, r3
    acb0:	4bb7      	ldr	r3, [pc, #732]	; (af90 <CorrectIMUvalues+0xb68>)
    acb2:	801a      	strh	r2, [r3, #0]
			cay = -az;
    acb4:	4bb7      	ldr	r3, [pc, #732]	; (af94 <CorrectIMUvalues+0xb6c>)
    acb6:	2200      	movs	r2, #0
    acb8:	5e9b      	ldrsh	r3, [r3, r2]
    acba:	b29b      	uxth	r3, r3
    acbc:	425b      	negs	r3, r3
    acbe:	b29b      	uxth	r3, r3
    acc0:	b21a      	sxth	r2, r3
    acc2:	4bb5      	ldr	r3, [pc, #724]	; (af98 <CorrectIMUvalues+0xb70>)
    acc4:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    acc6:	4bb5      	ldr	r3, [pc, #724]	; (af9c <CorrectIMUvalues+0xb74>)
    acc8:	2200      	movs	r2, #0
    acca:	5e9b      	ldrsh	r3, [r3, r2]
    accc:	b29b      	uxth	r3, r3
    acce:	425b      	negs	r3, r3
    acd0:	b29b      	uxth	r3, r3
    acd2:	b21a      	sxth	r2, r3
    acd4:	4bb2      	ldr	r3, [pc, #712]	; (afa0 <CorrectIMUvalues+0xb78>)
    acd6:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    acd8:	4bb2      	ldr	r3, [pc, #712]	; (afa4 <CorrectIMUvalues+0xb7c>)
    acda:	2200      	movs	r2, #0
    acdc:	5e9b      	ldrsh	r3, [r3, r2]
    acde:	b29b      	uxth	r3, r3
    ace0:	425b      	negs	r3, r3
    ace2:	b29b      	uxth	r3, r3
    ace4:	b21a      	sxth	r2, r3
    ace6:	4bb0      	ldr	r3, [pc, #704]	; (afa8 <CorrectIMUvalues+0xb80>)
    ace8:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    acea:	4bb0      	ldr	r3, [pc, #704]	; (afac <CorrectIMUvalues+0xb84>)
    acec:	2200      	movs	r2, #0
    acee:	5e9b      	ldrsh	r3, [r3, r2]
    acf0:	b29b      	uxth	r3, r3
    acf2:	425b      	negs	r3, r3
    acf4:	b29b      	uxth	r3, r3
    acf6:	b21a      	sxth	r2, r3
    acf8:	4bad      	ldr	r3, [pc, #692]	; (afb0 <CorrectIMUvalues+0xb88>)
    acfa:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    acfc:	4bad      	ldr	r3, [pc, #692]	; (afb4 <CorrectIMUvalues+0xb8c>)
    acfe:	2200      	movs	r2, #0
    ad00:	5e9b      	ldrsh	r3, [r3, r2]
    ad02:	b29b      	uxth	r3, r3
    ad04:	425b      	negs	r3, r3
    ad06:	b29b      	uxth	r3, r3
    ad08:	b21a      	sxth	r2, r3
    ad0a:	4bab      	ldr	r3, [pc, #684]	; (afb8 <CorrectIMUvalues+0xb90>)
    ad0c:	801a      	strh	r2, [r3, #0]
}
    ad0e:	e12d      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    ad10:	1dbb      	adds	r3, r7, #6
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	2b03      	cmp	r3, #3
    ad16:	d12a      	bne.n	ad6e <CorrectIMUvalues+0x946>
			cax = -az;
    ad18:	4b9e      	ldr	r3, [pc, #632]	; (af94 <CorrectIMUvalues+0xb6c>)
    ad1a:	2200      	movs	r2, #0
    ad1c:	5e9b      	ldrsh	r3, [r3, r2]
    ad1e:	b29b      	uxth	r3, r3
    ad20:	425b      	negs	r3, r3
    ad22:	b29b      	uxth	r3, r3
    ad24:	b21a      	sxth	r2, r3
    ad26:	4b9a      	ldr	r3, [pc, #616]	; (af90 <CorrectIMUvalues+0xb68>)
    ad28:	801a      	strh	r2, [r3, #0]
			cay = ax;
    ad2a:	4b98      	ldr	r3, [pc, #608]	; (af8c <CorrectIMUvalues+0xb64>)
    ad2c:	2200      	movs	r2, #0
    ad2e:	5e9a      	ldrsh	r2, [r3, r2]
    ad30:	4b99      	ldr	r3, [pc, #612]	; (af98 <CorrectIMUvalues+0xb70>)
    ad32:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    ad34:	4b9b      	ldr	r3, [pc, #620]	; (afa4 <CorrectIMUvalues+0xb7c>)
    ad36:	2200      	movs	r2, #0
    ad38:	5e9b      	ldrsh	r3, [r3, r2]
    ad3a:	b29b      	uxth	r3, r3
    ad3c:	425b      	negs	r3, r3
    ad3e:	b29b      	uxth	r3, r3
    ad40:	b21a      	sxth	r2, r3
    ad42:	4b97      	ldr	r3, [pc, #604]	; (afa0 <CorrectIMUvalues+0xb78>)
    ad44:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    ad46:	4b95      	ldr	r3, [pc, #596]	; (af9c <CorrectIMUvalues+0xb74>)
    ad48:	2200      	movs	r2, #0
    ad4a:	5e9a      	ldrsh	r2, [r3, r2]
    ad4c:	4b96      	ldr	r3, [pc, #600]	; (afa8 <CorrectIMUvalues+0xb80>)
    ad4e:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    ad50:	4b98      	ldr	r3, [pc, #608]	; (afb4 <CorrectIMUvalues+0xb8c>)
    ad52:	2200      	movs	r2, #0
    ad54:	5e9a      	ldrsh	r2, [r3, r2]
    ad56:	4b96      	ldr	r3, [pc, #600]	; (afb0 <CorrectIMUvalues+0xb88>)
    ad58:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    ad5a:	4b94      	ldr	r3, [pc, #592]	; (afac <CorrectIMUvalues+0xb84>)
    ad5c:	2200      	movs	r2, #0
    ad5e:	5e9b      	ldrsh	r3, [r3, r2]
    ad60:	b29b      	uxth	r3, r3
    ad62:	425b      	negs	r3, r3
    ad64:	b29b      	uxth	r3, r3
    ad66:	b21a      	sxth	r2, r3
    ad68:	4b93      	ldr	r3, [pc, #588]	; (afb8 <CorrectIMUvalues+0xb90>)
    ad6a:	801a      	strh	r2, [r3, #0]
}
    ad6c:	e0fe      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    ad6e:	1dbb      	adds	r3, r7, #6
    ad70:	781b      	ldrb	r3, [r3, #0]
    ad72:	2b04      	cmp	r3, #4
    ad74:	d000      	beq.n	ad78 <CorrectIMUvalues+0x950>
    ad76:	e0f9      	b.n	af6c <CorrectIMUvalues+0xb44>
			cax = az;
    ad78:	4b86      	ldr	r3, [pc, #536]	; (af94 <CorrectIMUvalues+0xb6c>)
    ad7a:	2200      	movs	r2, #0
    ad7c:	5e9a      	ldrsh	r2, [r3, r2]
    ad7e:	4b84      	ldr	r3, [pc, #528]	; (af90 <CorrectIMUvalues+0xb68>)
    ad80:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    ad82:	4b82      	ldr	r3, [pc, #520]	; (af8c <CorrectIMUvalues+0xb64>)
    ad84:	2200      	movs	r2, #0
    ad86:	5e9b      	ldrsh	r3, [r3, r2]
    ad88:	b29b      	uxth	r3, r3
    ad8a:	425b      	negs	r3, r3
    ad8c:	b29b      	uxth	r3, r3
    ad8e:	b21a      	sxth	r2, r3
    ad90:	4b81      	ldr	r3, [pc, #516]	; (af98 <CorrectIMUvalues+0xb70>)
    ad92:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    ad94:	4b83      	ldr	r3, [pc, #524]	; (afa4 <CorrectIMUvalues+0xb7c>)
    ad96:	2200      	movs	r2, #0
    ad98:	5e9a      	ldrsh	r2, [r3, r2]
    ad9a:	4b81      	ldr	r3, [pc, #516]	; (afa0 <CorrectIMUvalues+0xb78>)
    ad9c:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    ad9e:	4b7f      	ldr	r3, [pc, #508]	; (af9c <CorrectIMUvalues+0xb74>)
    ada0:	2200      	movs	r2, #0
    ada2:	5e9b      	ldrsh	r3, [r3, r2]
    ada4:	b29b      	uxth	r3, r3
    ada6:	425b      	negs	r3, r3
    ada8:	b29b      	uxth	r3, r3
    adaa:	b21a      	sxth	r2, r3
    adac:	4b7e      	ldr	r3, [pc, #504]	; (afa8 <CorrectIMUvalues+0xb80>)
    adae:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    adb0:	4b80      	ldr	r3, [pc, #512]	; (afb4 <CorrectIMUvalues+0xb8c>)
    adb2:	2200      	movs	r2, #0
    adb4:	5e9b      	ldrsh	r3, [r3, r2]
    adb6:	b29b      	uxth	r3, r3
    adb8:	425b      	negs	r3, r3
    adba:	b29b      	uxth	r3, r3
    adbc:	b21a      	sxth	r2, r3
    adbe:	4b7c      	ldr	r3, [pc, #496]	; (afb0 <CorrectIMUvalues+0xb88>)
    adc0:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    adc2:	4b7a      	ldr	r3, [pc, #488]	; (afac <CorrectIMUvalues+0xb84>)
    adc4:	2200      	movs	r2, #0
    adc6:	5e9a      	ldrsh	r2, [r3, r2]
    adc8:	4b7b      	ldr	r3, [pc, #492]	; (afb8 <CorrectIMUvalues+0xb90>)
    adca:	801a      	strh	r2, [r3, #0]
}
    adcc:	e0ce      	b.n	af6c <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_FRONT){ // Connectors Front
    adce:	1dfb      	adds	r3, r7, #7
    add0:	781b      	ldrb	r3, [r3, #0]
    add2:	2b06      	cmp	r3, #6
    add4:	d000      	beq.n	add8 <CorrectIMUvalues+0x9b0>
    add6:	e0c9      	b.n	af6c <CorrectIMUvalues+0xb44>
		caz = ay;
    add8:	4b66      	ldr	r3, [pc, #408]	; (af74 <CorrectIMUvalues+0xb4c>)
    adda:	2200      	movs	r2, #0
    addc:	5e9a      	ldrsh	r2, [r3, r2]
    adde:	4b66      	ldr	r3, [pc, #408]	; (af78 <CorrectIMUvalues+0xb50>)
    ade0:	801a      	strh	r2, [r3, #0]
		cgz = gy;
    ade2:	4b66      	ldr	r3, [pc, #408]	; (af7c <CorrectIMUvalues+0xb54>)
    ade4:	2200      	movs	r2, #0
    ade6:	5e9a      	ldrsh	r2, [r3, r2]
    ade8:	4b65      	ldr	r3, [pc, #404]	; (af80 <CorrectIMUvalues+0xb58>)
    adea:	801a      	strh	r2, [r3, #0]
		cgz = my;
    adec:	4b65      	ldr	r3, [pc, #404]	; (af84 <CorrectIMUvalues+0xb5c>)
    adee:	2200      	movs	r2, #0
    adf0:	5e9a      	ldrsh	r2, [r3, r2]
    adf2:	4b63      	ldr	r3, [pc, #396]	; (af80 <CorrectIMUvalues+0xb58>)
    adf4:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    adf6:	1dbb      	adds	r3, r7, #6
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	2b01      	cmp	r3, #1
    adfc:	d12a      	bne.n	ae54 <CorrectIMUvalues+0xa2c>
			cax = -ax;
    adfe:	4b63      	ldr	r3, [pc, #396]	; (af8c <CorrectIMUvalues+0xb64>)
    ae00:	2200      	movs	r2, #0
    ae02:	5e9b      	ldrsh	r3, [r3, r2]
    ae04:	b29b      	uxth	r3, r3
    ae06:	425b      	negs	r3, r3
    ae08:	b29b      	uxth	r3, r3
    ae0a:	b21a      	sxth	r2, r3
    ae0c:	4b60      	ldr	r3, [pc, #384]	; (af90 <CorrectIMUvalues+0xb68>)
    ae0e:	801a      	strh	r2, [r3, #0]
			cay = az;
    ae10:	4b60      	ldr	r3, [pc, #384]	; (af94 <CorrectIMUvalues+0xb6c>)
    ae12:	2200      	movs	r2, #0
    ae14:	5e9a      	ldrsh	r2, [r3, r2]
    ae16:	4b60      	ldr	r3, [pc, #384]	; (af98 <CorrectIMUvalues+0xb70>)
    ae18:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    ae1a:	4b60      	ldr	r3, [pc, #384]	; (af9c <CorrectIMUvalues+0xb74>)
    ae1c:	2200      	movs	r2, #0
    ae1e:	5e9b      	ldrsh	r3, [r3, r2]
    ae20:	b29b      	uxth	r3, r3
    ae22:	425b      	negs	r3, r3
    ae24:	b29b      	uxth	r3, r3
    ae26:	b21a      	sxth	r2, r3
    ae28:	4b5d      	ldr	r3, [pc, #372]	; (afa0 <CorrectIMUvalues+0xb78>)
    ae2a:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    ae2c:	4b5d      	ldr	r3, [pc, #372]	; (afa4 <CorrectIMUvalues+0xb7c>)
    ae2e:	2200      	movs	r2, #0
    ae30:	5e9a      	ldrsh	r2, [r3, r2]
    ae32:	4b5d      	ldr	r3, [pc, #372]	; (afa8 <CorrectIMUvalues+0xb80>)
    ae34:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    ae36:	4b5d      	ldr	r3, [pc, #372]	; (afac <CorrectIMUvalues+0xb84>)
    ae38:	2200      	movs	r2, #0
    ae3a:	5e9b      	ldrsh	r3, [r3, r2]
    ae3c:	b29b      	uxth	r3, r3
    ae3e:	425b      	negs	r3, r3
    ae40:	b29b      	uxth	r3, r3
    ae42:	b21a      	sxth	r2, r3
    ae44:	4b5a      	ldr	r3, [pc, #360]	; (afb0 <CorrectIMUvalues+0xb88>)
    ae46:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    ae48:	4b5a      	ldr	r3, [pc, #360]	; (afb4 <CorrectIMUvalues+0xb8c>)
    ae4a:	2200      	movs	r2, #0
    ae4c:	5e9a      	ldrsh	r2, [r3, r2]
    ae4e:	4b5a      	ldr	r3, [pc, #360]	; (afb8 <CorrectIMUvalues+0xb90>)
    ae50:	801a      	strh	r2, [r3, #0]
}
    ae52:	e08b      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    ae54:	1dbb      	adds	r3, r7, #6
    ae56:	781b      	ldrb	r3, [r3, #0]
    ae58:	2b02      	cmp	r3, #2
    ae5a:	d12a      	bne.n	aeb2 <CorrectIMUvalues+0xa8a>
			cax = ax;
    ae5c:	4b4b      	ldr	r3, [pc, #300]	; (af8c <CorrectIMUvalues+0xb64>)
    ae5e:	2200      	movs	r2, #0
    ae60:	5e9a      	ldrsh	r2, [r3, r2]
    ae62:	4b4b      	ldr	r3, [pc, #300]	; (af90 <CorrectIMUvalues+0xb68>)
    ae64:	801a      	strh	r2, [r3, #0]
			cay = -az;
    ae66:	4b4b      	ldr	r3, [pc, #300]	; (af94 <CorrectIMUvalues+0xb6c>)
    ae68:	2200      	movs	r2, #0
    ae6a:	5e9b      	ldrsh	r3, [r3, r2]
    ae6c:	b29b      	uxth	r3, r3
    ae6e:	425b      	negs	r3, r3
    ae70:	b29b      	uxth	r3, r3
    ae72:	b21a      	sxth	r2, r3
    ae74:	4b48      	ldr	r3, [pc, #288]	; (af98 <CorrectIMUvalues+0xb70>)
    ae76:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    ae78:	4b48      	ldr	r3, [pc, #288]	; (af9c <CorrectIMUvalues+0xb74>)
    ae7a:	2200      	movs	r2, #0
    ae7c:	5e9a      	ldrsh	r2, [r3, r2]
    ae7e:	4b48      	ldr	r3, [pc, #288]	; (afa0 <CorrectIMUvalues+0xb78>)
    ae80:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    ae82:	4b48      	ldr	r3, [pc, #288]	; (afa4 <CorrectIMUvalues+0xb7c>)
    ae84:	2200      	movs	r2, #0
    ae86:	5e9b      	ldrsh	r3, [r3, r2]
    ae88:	b29b      	uxth	r3, r3
    ae8a:	425b      	negs	r3, r3
    ae8c:	b29b      	uxth	r3, r3
    ae8e:	b21a      	sxth	r2, r3
    ae90:	4b45      	ldr	r3, [pc, #276]	; (afa8 <CorrectIMUvalues+0xb80>)
    ae92:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    ae94:	4b45      	ldr	r3, [pc, #276]	; (afac <CorrectIMUvalues+0xb84>)
    ae96:	2200      	movs	r2, #0
    ae98:	5e9a      	ldrsh	r2, [r3, r2]
    ae9a:	4b45      	ldr	r3, [pc, #276]	; (afb0 <CorrectIMUvalues+0xb88>)
    ae9c:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    ae9e:	4b45      	ldr	r3, [pc, #276]	; (afb4 <CorrectIMUvalues+0xb8c>)
    aea0:	2200      	movs	r2, #0
    aea2:	5e9b      	ldrsh	r3, [r3, r2]
    aea4:	b29b      	uxth	r3, r3
    aea6:	425b      	negs	r3, r3
    aea8:	b29b      	uxth	r3, r3
    aeaa:	b21a      	sxth	r2, r3
    aeac:	4b42      	ldr	r3, [pc, #264]	; (afb8 <CorrectIMUvalues+0xb90>)
    aeae:	801a      	strh	r2, [r3, #0]
}
    aeb0:	e05c      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    aeb2:	1dbb      	adds	r3, r7, #6
    aeb4:	781b      	ldrb	r3, [r3, #0]
    aeb6:	2b03      	cmp	r3, #3
    aeb8:	d126      	bne.n	af08 <CorrectIMUvalues+0xae0>
			cax = az;
    aeba:	4b36      	ldr	r3, [pc, #216]	; (af94 <CorrectIMUvalues+0xb6c>)
    aebc:	2200      	movs	r2, #0
    aebe:	5e9a      	ldrsh	r2, [r3, r2]
    aec0:	4b33      	ldr	r3, [pc, #204]	; (af90 <CorrectIMUvalues+0xb68>)
    aec2:	801a      	strh	r2, [r3, #0]
			cay = ax;
    aec4:	4b31      	ldr	r3, [pc, #196]	; (af8c <CorrectIMUvalues+0xb64>)
    aec6:	2200      	movs	r2, #0
    aec8:	5e9a      	ldrsh	r2, [r3, r2]
    aeca:	4b33      	ldr	r3, [pc, #204]	; (af98 <CorrectIMUvalues+0xb70>)
    aecc:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    aece:	4b35      	ldr	r3, [pc, #212]	; (afa4 <CorrectIMUvalues+0xb7c>)
    aed0:	2200      	movs	r2, #0
    aed2:	5e9a      	ldrsh	r2, [r3, r2]
    aed4:	4b32      	ldr	r3, [pc, #200]	; (afa0 <CorrectIMUvalues+0xb78>)
    aed6:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    aed8:	4b30      	ldr	r3, [pc, #192]	; (af9c <CorrectIMUvalues+0xb74>)
    aeda:	2200      	movs	r2, #0
    aedc:	5e9a      	ldrsh	r2, [r3, r2]
    aede:	4b32      	ldr	r3, [pc, #200]	; (afa8 <CorrectIMUvalues+0xb80>)
    aee0:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    aee2:	4b34      	ldr	r3, [pc, #208]	; (afb4 <CorrectIMUvalues+0xb8c>)
    aee4:	2200      	movs	r2, #0
    aee6:	5e9b      	ldrsh	r3, [r3, r2]
    aee8:	b29b      	uxth	r3, r3
    aeea:	425b      	negs	r3, r3
    aeec:	b29b      	uxth	r3, r3
    aeee:	b21a      	sxth	r2, r3
    aef0:	4b2f      	ldr	r3, [pc, #188]	; (afb0 <CorrectIMUvalues+0xb88>)
    aef2:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    aef4:	4b2d      	ldr	r3, [pc, #180]	; (afac <CorrectIMUvalues+0xb84>)
    aef6:	2200      	movs	r2, #0
    aef8:	5e9b      	ldrsh	r3, [r3, r2]
    aefa:	b29b      	uxth	r3, r3
    aefc:	425b      	negs	r3, r3
    aefe:	b29b      	uxth	r3, r3
    af00:	b21a      	sxth	r2, r3
    af02:	4b2d      	ldr	r3, [pc, #180]	; (afb8 <CorrectIMUvalues+0xb90>)
    af04:	801a      	strh	r2, [r3, #0]
}
    af06:	e031      	b.n	af6c <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    af08:	1dbb      	adds	r3, r7, #6
    af0a:	781b      	ldrb	r3, [r3, #0]
    af0c:	2b04      	cmp	r3, #4
    af0e:	d12d      	bne.n	af6c <CorrectIMUvalues+0xb44>
			cax = -az;
    af10:	4b20      	ldr	r3, [pc, #128]	; (af94 <CorrectIMUvalues+0xb6c>)
    af12:	2200      	movs	r2, #0
    af14:	5e9b      	ldrsh	r3, [r3, r2]
    af16:	b29b      	uxth	r3, r3
    af18:	425b      	negs	r3, r3
    af1a:	b29b      	uxth	r3, r3
    af1c:	b21a      	sxth	r2, r3
    af1e:	4b1c      	ldr	r3, [pc, #112]	; (af90 <CorrectIMUvalues+0xb68>)
    af20:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    af22:	4b1a      	ldr	r3, [pc, #104]	; (af8c <CorrectIMUvalues+0xb64>)
    af24:	2200      	movs	r2, #0
    af26:	5e9b      	ldrsh	r3, [r3, r2]
    af28:	b29b      	uxth	r3, r3
    af2a:	425b      	negs	r3, r3
    af2c:	b29b      	uxth	r3, r3
    af2e:	b21a      	sxth	r2, r3
    af30:	4b19      	ldr	r3, [pc, #100]	; (af98 <CorrectIMUvalues+0xb70>)
    af32:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    af34:	4b1b      	ldr	r3, [pc, #108]	; (afa4 <CorrectIMUvalues+0xb7c>)
    af36:	2200      	movs	r2, #0
    af38:	5e9b      	ldrsh	r3, [r3, r2]
    af3a:	b29b      	uxth	r3, r3
    af3c:	425b      	negs	r3, r3
    af3e:	b29b      	uxth	r3, r3
    af40:	b21a      	sxth	r2, r3
    af42:	4b17      	ldr	r3, [pc, #92]	; (afa0 <CorrectIMUvalues+0xb78>)
    af44:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    af46:	4b15      	ldr	r3, [pc, #84]	; (af9c <CorrectIMUvalues+0xb74>)
    af48:	2200      	movs	r2, #0
    af4a:	5e9b      	ldrsh	r3, [r3, r2]
    af4c:	b29b      	uxth	r3, r3
    af4e:	425b      	negs	r3, r3
    af50:	b29b      	uxth	r3, r3
    af52:	b21a      	sxth	r2, r3
    af54:	4b14      	ldr	r3, [pc, #80]	; (afa8 <CorrectIMUvalues+0xb80>)
    af56:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    af58:	4b16      	ldr	r3, [pc, #88]	; (afb4 <CorrectIMUvalues+0xb8c>)
    af5a:	2200      	movs	r2, #0
    af5c:	5e9a      	ldrsh	r2, [r3, r2]
    af5e:	4b14      	ldr	r3, [pc, #80]	; (afb0 <CorrectIMUvalues+0xb88>)
    af60:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    af62:	4b12      	ldr	r3, [pc, #72]	; (afac <CorrectIMUvalues+0xb84>)
    af64:	2200      	movs	r2, #0
    af66:	5e9a      	ldrsh	r2, [r3, r2]
    af68:	4b13      	ldr	r3, [pc, #76]	; (afb8 <CorrectIMUvalues+0xb90>)
    af6a:	801a      	strh	r2, [r3, #0]
}
    af6c:	46c0      	nop			; (mov r8, r8)
    af6e:	46bd      	mov	sp, r7
    af70:	b002      	add	sp, #8
    af72:	bd80      	pop	{r7, pc}
    af74:	200002ec 	.word	0x200002ec
    af78:	20000300 	.word	0x20000300
    af7c:	200002e6 	.word	0x200002e6
    af80:	200002fa 	.word	0x200002fa
    af84:	200002f2 	.word	0x200002f2
    af88:	20000306 	.word	0x20000306
    af8c:	200002ea 	.word	0x200002ea
    af90:	200002fc 	.word	0x200002fc
    af94:	200002ee 	.word	0x200002ee
    af98:	200002fe 	.word	0x200002fe
    af9c:	200002e4 	.word	0x200002e4
    afa0:	200002f6 	.word	0x200002f6
    afa4:	200002e8 	.word	0x200002e8
    afa8:	200002f8 	.word	0x200002f8
    afac:	200002f0 	.word	0x200002f0
    afb0:	20000302 	.word	0x20000302
    afb4:	200002f4 	.word	0x200002f4
    afb8:	20000304 	.word	0x20000304

0000afbc <configure_tc>:
void configure_tc(void);
void check_time(uint32_t* time_var);
void check_time_micros(uint32_t* time_var);

void configure_tc(void)
{
    afbc:	b580      	push	{r7, lr}
    afbe:	b08e      	sub	sp, #56	; 0x38
    afc0:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
    afc2:	1d3b      	adds	r3, r7, #4
    afc4:	0018      	movs	r0, r3
    afc6:	4b0e      	ldr	r3, [pc, #56]	; (b000 <configure_tc+0x44>)
    afc8:	4798      	blx	r3
	
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    afca:	1d3b      	adds	r3, r7, #4
    afcc:	2208      	movs	r2, #8
    afce:	709a      	strb	r2, [r3, #2]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    afd0:	1d3b      	adds	r3, r7, #4
    afd2:	2200      	movs	r2, #0
    afd4:	739a      	strb	r2, [r3, #14]
	config_tc.clock_source =  GCLK_CLKCTRL_GEN_GCLK0;
    afd6:	1d3b      	adds	r3, r7, #4
    afd8:	2200      	movs	r2, #0
    afda:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    afdc:	1d3b      	adds	r3, r7, #4
    afde:	2200      	movs	r2, #0
    afe0:	809a      	strh	r2, [r3, #4]

	tc_init(&tc0, TC4, &config_tc);
    afe2:	1d3a      	adds	r2, r7, #4
    afe4:	4907      	ldr	r1, [pc, #28]	; (b004 <configure_tc+0x48>)
    afe6:	4b08      	ldr	r3, [pc, #32]	; (b008 <configure_tc+0x4c>)
    afe8:	0018      	movs	r0, r3
    afea:	4b08      	ldr	r3, [pc, #32]	; (b00c <configure_tc+0x50>)
    afec:	4798      	blx	r3
	tc_enable(&tc0);
    afee:	4b06      	ldr	r3, [pc, #24]	; (b008 <configure_tc+0x4c>)
    aff0:	0018      	movs	r0, r3
    aff2:	4b07      	ldr	r3, [pc, #28]	; (b010 <configure_tc+0x54>)
    aff4:	4798      	blx	r3
}
    aff6:	46c0      	nop			; (mov r8, r8)
    aff8:	46bd      	mov	sp, r7
    affa:	b00e      	add	sp, #56	; 0x38
    affc:	bd80      	pop	{r7, pc}
    affe:	46c0      	nop			; (mov r8, r8)
    b000:	00009215 	.word	0x00009215
    b004:	42003000 	.word	0x42003000
    b008:	2000078c 	.word	0x2000078c
    b00c:	00005871 	.word	0x00005871
    b010:	0000929d 	.word	0x0000929d

0000b014 <millis>:



uint32_t millis()
{
    b014:	b580      	push	{r7, lr}
    b016:	af00      	add	r7, sp, #0
	return (tc_get_count_value(&tc0)/7500);
    b018:	4b06      	ldr	r3, [pc, #24]	; (b034 <millis+0x20>)
    b01a:	0018      	movs	r0, r3
    b01c:	4b06      	ldr	r3, [pc, #24]	; (b038 <millis+0x24>)
    b01e:	4798      	blx	r3
    b020:	0002      	movs	r2, r0
    b022:	4b06      	ldr	r3, [pc, #24]	; (b03c <millis+0x28>)
    b024:	4906      	ldr	r1, [pc, #24]	; (b040 <millis+0x2c>)
    b026:	0010      	movs	r0, r2
    b028:	4798      	blx	r3
    b02a:	0003      	movs	r3, r0
}
    b02c:	0018      	movs	r0, r3
    b02e:	46bd      	mov	sp, r7
    b030:	bd80      	pop	{r7, pc}
    b032:	46c0      	nop			; (mov r8, r8)
    b034:	2000078c 	.word	0x2000078c
    b038:	00005cc1 	.word	0x00005cc1
    b03c:	00014009 	.word	0x00014009
    b040:	00001d4c 	.word	0x00001d4c

0000b044 <check_time>:
uint32_t micros()
{
	return (tc_get_count_value(&tc0)/7.5);
}

void check_time(uint32_t* time_var){
    b044:	b590      	push	{r4, r7, lr}
    b046:	b083      	sub	sp, #12
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
	if(*time_var > millis())
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	681c      	ldr	r4, [r3, #0]
    b050:	4b05      	ldr	r3, [pc, #20]	; (b068 <check_time+0x24>)
    b052:	4798      	blx	r3
    b054:	0003      	movs	r3, r0
    b056:	429c      	cmp	r4, r3
    b058:	d902      	bls.n	b060 <check_time+0x1c>
		*time_var = 0;
    b05a:	687b      	ldr	r3, [r7, #4]
    b05c:	2200      	movs	r2, #0
    b05e:	601a      	str	r2, [r3, #0]
}
    b060:	46c0      	nop			; (mov r8, r8)
    b062:	46bd      	mov	sp, r7
    b064:	b003      	add	sp, #12
    b066:	bd90      	pop	{r4, r7, pc}
    b068:	0000b015 	.word	0x0000b015

0000b06c <configure_LED_PWM>:



// Configure all of the LED ports as PWM outputs
void configure_LED_PWM(void)
{
    b06c:	b580      	push	{r7, lr}
    b06e:	b0aa      	sub	sp, #168	; 0xa8
    b070:	af00      	add	r7, sp, #0
struct tcc_config config_tcc;
tcc_get_config_defaults(&config_tcc, TCC0);
    b072:	4a58      	ldr	r2, [pc, #352]	; (b1d4 <configure_LED_PWM+0x168>)
    b074:	1d3b      	adds	r3, r7, #4
    b076:	0011      	movs	r1, r2
    b078:	0018      	movs	r0, r3
    b07a:	4b57      	ldr	r3, [pc, #348]	; (b1d8 <configure_LED_PWM+0x16c>)
    b07c:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b07e:	1d3b      	adds	r3, r7, #4
    b080:	4a56      	ldr	r2, [pc, #344]	; (b1dc <configure_LED_PWM+0x170>)
    b082:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b084:	1d3b      	adds	r3, r7, #4
    b086:	2202      	movs	r2, #2
    b088:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    b08a:	1d3b      	adds	r3, r7, #4
    b08c:	2200      	movs	r2, #0
    b08e:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    b090:	1d3b      	adds	r3, r7, #4
    b092:	2200      	movs	r2, #0
    b094:	621a      	str	r2, [r3, #32]
config_tcc.compare.match[2] = 0;
    b096:	1d3b      	adds	r3, r7, #4
    b098:	2200      	movs	r2, #0
    b09a:	625a      	str	r2, [r3, #36]	; 0x24
config_tcc.compare.match[3] = 0;
    b09c:	1d3b      	adds	r3, r7, #4
    b09e:	2200      	movs	r2, #0
    b0a0:	629a      	str	r2, [r3, #40]	; 0x28
config_tcc.pins.enable_wave_out_pin[0] = true;
    b0a2:	1d3b      	adds	r3, r7, #4
    b0a4:	2298      	movs	r2, #152	; 0x98
    b0a6:	2101      	movs	r1, #1
    b0a8:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    b0aa:	1d3b      	adds	r3, r7, #4
    b0ac:	2299      	movs	r2, #153	; 0x99
    b0ae:	2101      	movs	r1, #1
    b0b0:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[2] = true;
    b0b2:	1d3b      	adds	r3, r7, #4
    b0b4:	229a      	movs	r2, #154	; 0x9a
    b0b6:	2101      	movs	r1, #1
    b0b8:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[3] = true;
    b0ba:	1d3b      	adds	r3, r7, #4
    b0bc:	229b      	movs	r2, #155	; 0x9b
    b0be:	2101      	movs	r1, #1
    b0c0:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA14F_TCC0_WO4; 
    b0c2:	1d3b      	adds	r3, r7, #4
    b0c4:	220e      	movs	r2, #14
    b0c6:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PB11F_TCC0_WO5; 
    b0c8:	1d3b      	adds	r3, r7, #4
    b0ca:	222b      	movs	r2, #43	; 0x2b
    b0cc:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin[2]        = PIN_PA10F_TCC0_WO2; 
    b0ce:	1d3b      	adds	r3, r7, #4
    b0d0:	220a      	movs	r2, #10
    b0d2:	661a      	str	r2, [r3, #96]	; 0x60
config_tcc.pins.wave_out_pin[3]        = PIN_PA11F_TCC0_WO3;  
    b0d4:	1d3b      	adds	r3, r7, #4
    b0d6:	220b      	movs	r2, #11
    b0d8:	665a      	str	r2, [r3, #100]	; 0x64
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA14F_TCC0_WO4;
    b0da:	1d3b      	adds	r3, r7, #4
    b0dc:	2205      	movs	r2, #5
    b0de:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PB11F_TCC0_WO5;
    b0e0:	1d3b      	adds	r3, r7, #4
    b0e2:	2205      	movs	r2, #5
    b0e4:	67da      	str	r2, [r3, #124]	; 0x7c
config_tcc.pins.wave_out_pin_mux[2]    = MUX_PA10F_TCC0_WO2;
    b0e6:	1d3b      	adds	r3, r7, #4
    b0e8:	2280      	movs	r2, #128	; 0x80
    b0ea:	2105      	movs	r1, #5
    b0ec:	5099      	str	r1, [r3, r2]
config_tcc.pins.wave_out_pin_mux[3]    = MUX_PA11F_TCC0_WO3;
    b0ee:	1d3b      	adds	r3, r7, #4
    b0f0:	2284      	movs	r2, #132	; 0x84
    b0f2:	2105      	movs	r1, #5
    b0f4:	5099      	str	r1, [r3, r2]


tcc_init(&tcc0, TCC0, &config_tcc);
    b0f6:	1d3a      	adds	r2, r7, #4
    b0f8:	4936      	ldr	r1, [pc, #216]	; (b1d4 <configure_LED_PWM+0x168>)
    b0fa:	4b39      	ldr	r3, [pc, #228]	; (b1e0 <configure_LED_PWM+0x174>)
    b0fc:	0018      	movs	r0, r3
    b0fe:	4b39      	ldr	r3, [pc, #228]	; (b1e4 <configure_LED_PWM+0x178>)
    b100:	4798      	blx	r3
tcc_enable(&tcc0);
    b102:	4b37      	ldr	r3, [pc, #220]	; (b1e0 <configure_LED_PWM+0x174>)
    b104:	0018      	movs	r0, r3
    b106:	4b38      	ldr	r3, [pc, #224]	; (b1e8 <configure_LED_PWM+0x17c>)
    b108:	4798      	blx	r3


tcc_get_config_defaults(&config_tcc, TCC1);
    b10a:	4a38      	ldr	r2, [pc, #224]	; (b1ec <configure_LED_PWM+0x180>)
    b10c:	1d3b      	adds	r3, r7, #4
    b10e:	0011      	movs	r1, r2
    b110:	0018      	movs	r0, r3
    b112:	4b31      	ldr	r3, [pc, #196]	; (b1d8 <configure_LED_PWM+0x16c>)
    b114:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b116:	1d3b      	adds	r3, r7, #4
    b118:	4a30      	ldr	r2, [pc, #192]	; (b1dc <configure_LED_PWM+0x170>)
    b11a:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b11c:	1d3b      	adds	r3, r7, #4
    b11e:	2202      	movs	r2, #2
    b120:	761a      	strb	r2, [r3, #24]

//config_tcc.compare.match[0] = 0;
config_tcc.compare.match[1] = 0;
    b122:	1d3b      	adds	r3, r7, #4
    b124:	2200      	movs	r2, #0
    b126:	621a      	str	r2, [r3, #32]
//config_tcc.pins.enable_wave_out_pin[0] = true;
config_tcc.pins.enable_wave_out_pin[1] = true;
    b128:	1d3b      	adds	r3, r7, #4
    b12a:	2299      	movs	r2, #153	; 0x99
    b12c:	2101      	movs	r1, #1
    b12e:	5499      	strb	r1, [r3, r2]
//config_tcc.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    b130:	1d3b      	adds	r3, r7, #4
    b132:	2207      	movs	r2, #7
    b134:	65da      	str	r2, [r3, #92]	; 0x5c
//config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    b136:	1d3b      	adds	r3, r7, #4
    b138:	2204      	movs	r2, #4
    b13a:	67da      	str	r2, [r3, #124]	; 0x7c

tcc_init(&tcc1, TCC1, &config_tcc);
    b13c:	1d3a      	adds	r2, r7, #4
    b13e:	492b      	ldr	r1, [pc, #172]	; (b1ec <configure_LED_PWM+0x180>)
    b140:	4b2b      	ldr	r3, [pc, #172]	; (b1f0 <configure_LED_PWM+0x184>)
    b142:	0018      	movs	r0, r3
    b144:	4b27      	ldr	r3, [pc, #156]	; (b1e4 <configure_LED_PWM+0x178>)
    b146:	4798      	blx	r3
// Configure the capture channel to read pulse width of PPM_IN pin
TCC1->CTRLA.reg  |= TCC_CTRLA_CPTEN0;
    b148:	4b28      	ldr	r3, [pc, #160]	; (b1ec <configure_LED_PWM+0x180>)
    b14a:	4a28      	ldr	r2, [pc, #160]	; (b1ec <configure_LED_PWM+0x180>)
    b14c:	6812      	ldr	r2, [r2, #0]
    b14e:	2180      	movs	r1, #128	; 0x80
    b150:	0449      	lsls	r1, r1, #17
    b152:	430a      	orrs	r2, r1
    b154:	601a      	str	r2, [r3, #0]
TCC1->EVCTRL.reg |= TCC_EVCTRL_TCEI1 | TCC_EVCTRL_EVACT1_PWP;
    b156:	4b25      	ldr	r3, [pc, #148]	; (b1ec <configure_LED_PWM+0x180>)
    b158:	4a24      	ldr	r2, [pc, #144]	; (b1ec <configure_LED_PWM+0x180>)
    b15a:	6a12      	ldr	r2, [r2, #32]
    b15c:	4925      	ldr	r1, [pc, #148]	; (b1f4 <configure_LED_PWM+0x188>)
    b15e:	430a      	orrs	r2, r1
    b160:	621a      	str	r2, [r3, #32]
tcc_enable(&tcc1);
    b162:	4b23      	ldr	r3, [pc, #140]	; (b1f0 <configure_LED_PWM+0x184>)
    b164:	0018      	movs	r0, r3
    b166:	4b20      	ldr	r3, [pc, #128]	; (b1e8 <configure_LED_PWM+0x17c>)
    b168:	4798      	blx	r3


tcc_get_config_defaults(&config_tcc, TCC2);
    b16a:	4a23      	ldr	r2, [pc, #140]	; (b1f8 <configure_LED_PWM+0x18c>)
    b16c:	1d3b      	adds	r3, r7, #4
    b16e:	0011      	movs	r1, r2
    b170:	0018      	movs	r0, r3
    b172:	4b19      	ldr	r3, [pc, #100]	; (b1d8 <configure_LED_PWM+0x16c>)
    b174:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b176:	1d3b      	adds	r3, r7, #4
    b178:	4a18      	ldr	r2, [pc, #96]	; (b1dc <configure_LED_PWM+0x170>)
    b17a:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b17c:	1d3b      	adds	r3, r7, #4
    b17e:	2202      	movs	r2, #2
    b180:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    b182:	1d3b      	adds	r3, r7, #4
    b184:	2200      	movs	r2, #0
    b186:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    b188:	1d3b      	adds	r3, r7, #4
    b18a:	2200      	movs	r2, #0
    b18c:	621a      	str	r2, [r3, #32]
config_tcc.pins.enable_wave_out_pin[0] = true;
    b18e:	1d3b      	adds	r3, r7, #4
    b190:	2298      	movs	r2, #152	; 0x98
    b192:	2101      	movs	r1, #1
    b194:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    b196:	1d3b      	adds	r3, r7, #4
    b198:	2299      	movs	r2, #153	; 0x99
    b19a:	2101      	movs	r1, #1
    b19c:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA12E_TCC2_WO0;
    b19e:	1d3b      	adds	r3, r7, #4
    b1a0:	220c      	movs	r2, #12
    b1a2:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PA13E_TCC2_WO1;
    b1a4:	1d3b      	adds	r3, r7, #4
    b1a6:	220d      	movs	r2, #13
    b1a8:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA12E_TCC2_WO0;
    b1aa:	1d3b      	adds	r3, r7, #4
    b1ac:	2204      	movs	r2, #4
    b1ae:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA13E_TCC2_WO1;
    b1b0:	1d3b      	adds	r3, r7, #4
    b1b2:	2204      	movs	r2, #4
    b1b4:	67da      	str	r2, [r3, #124]	; 0x7c

tcc_init(&tcc2, TCC2, &config_tcc);
    b1b6:	1d3a      	adds	r2, r7, #4
    b1b8:	490f      	ldr	r1, [pc, #60]	; (b1f8 <configure_LED_PWM+0x18c>)
    b1ba:	4b10      	ldr	r3, [pc, #64]	; (b1fc <configure_LED_PWM+0x190>)
    b1bc:	0018      	movs	r0, r3
    b1be:	4b09      	ldr	r3, [pc, #36]	; (b1e4 <configure_LED_PWM+0x178>)
    b1c0:	4798      	blx	r3
tcc_enable(&tcc2);
    b1c2:	4b0e      	ldr	r3, [pc, #56]	; (b1fc <configure_LED_PWM+0x190>)
    b1c4:	0018      	movs	r0, r3
    b1c6:	4b08      	ldr	r3, [pc, #32]	; (b1e8 <configure_LED_PWM+0x17c>)
    b1c8:	4798      	blx	r3
}
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	46bd      	mov	sp, r7
    b1ce:	b02a      	add	sp, #168	; 0xa8
    b1d0:	bd80      	pop	{r7, pc}
    b1d2:	46c0      	nop			; (mov r8, r8)
    b1d4:	42002000 	.word	0x42002000
    b1d8:	00004c29 	.word	0x00004c29
    b1dc:	0000ffff 	.word	0x0000ffff
    b1e0:	2000074c 	.word	0x2000074c
    b1e4:	00005285 	.word	0x00005285
    b1e8:	000092d5 	.word	0x000092d5
    b1ec:	42002400 	.word	0x42002400
    b1f0:	20000f5c 	.word	0x20000f5c
    b1f4:	00008030 	.word	0x00008030
    b1f8:	42002800 	.word	0x42002800
    b1fc:	20000f1c 	.word	0x20000f1c

0000b200 <setLeftRGB>:

void setLeftRGB(uint16_t red, uint16_t green, uint16_t blue) {
    b200:	b590      	push	{r4, r7, lr}
    b202:	b083      	sub	sp, #12
    b204:	af00      	add	r7, sp, #0
    b206:	0004      	movs	r4, r0
    b208:	0008      	movs	r0, r1
    b20a:	0011      	movs	r1, r2
    b20c:	1dbb      	adds	r3, r7, #6
    b20e:	1c22      	adds	r2, r4, #0
    b210:	801a      	strh	r2, [r3, #0]
    b212:	1d3b      	adds	r3, r7, #4
    b214:	1c02      	adds	r2, r0, #0
    b216:	801a      	strh	r2, [r3, #0]
    b218:	1cbb      	adds	r3, r7, #2
    b21a:	1c0a      	adds	r2, r1, #0
    b21c:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.LB = blue;
    b21e:	4b12      	ldr	r3, [pc, #72]	; (b268 <setLeftRGB+0x68>)
    b220:	1cba      	adds	r2, r7, #2
    b222:	8812      	ldrh	r2, [r2, #0]
    b224:	809a      	strh	r2, [r3, #4]
	RGB_Ouptut.LG = green;
    b226:	4b10      	ldr	r3, [pc, #64]	; (b268 <setLeftRGB+0x68>)
    b228:	1d3a      	adds	r2, r7, #4
    b22a:	8812      	ldrh	r2, [r2, #0]
    b22c:	805a      	strh	r2, [r3, #2]
	RGB_Ouptut.LR = red;
    b22e:	4b0e      	ldr	r3, [pc, #56]	; (b268 <setLeftRGB+0x68>)
    b230:	1dba      	adds	r2, r7, #6
    b232:	8812      	ldrh	r2, [r2, #0]
    b234:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), red);
    b236:	1dbb      	adds	r3, r7, #6
    b238:	881a      	ldrh	r2, [r3, #0]
    b23a:	4b0c      	ldr	r3, [pc, #48]	; (b26c <setLeftRGB+0x6c>)
    b23c:	2100      	movs	r1, #0
    b23e:	0018      	movs	r0, r3
    b240:	4b0b      	ldr	r3, [pc, #44]	; (b270 <setLeftRGB+0x70>)
    b242:	4798      	blx	r3
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
    b244:	1d3b      	adds	r3, r7, #4
    b246:	881a      	ldrh	r2, [r3, #0]
    b248:	4b0a      	ldr	r3, [pc, #40]	; (b274 <setLeftRGB+0x74>)
    b24a:	2101      	movs	r1, #1
    b24c:	0018      	movs	r0, r3
    b24e:	4b08      	ldr	r3, [pc, #32]	; (b270 <setLeftRGB+0x70>)
    b250:	4798      	blx	r3
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
    b252:	1cbb      	adds	r3, r7, #2
    b254:	881a      	ldrh	r2, [r3, #0]
    b256:	4b08      	ldr	r3, [pc, #32]	; (b278 <setLeftRGB+0x78>)
    b258:	2101      	movs	r1, #1
    b25a:	0018      	movs	r0, r3
    b25c:	4b04      	ldr	r3, [pc, #16]	; (b270 <setLeftRGB+0x70>)
    b25e:	4798      	blx	r3
}
    b260:	46c0      	nop			; (mov r8, r8)
    b262:	46bd      	mov	sp, r7
    b264:	b003      	add	sp, #12
    b266:	bd90      	pop	{r4, r7, pc}
    b268:	20000314 	.word	0x20000314
    b26c:	2000074c 	.word	0x2000074c
    b270:	0000572d 	.word	0x0000572d
    b274:	20000f1c 	.word	0x20000f1c
    b278:	20000f5c 	.word	0x20000f5c

0000b27c <setRightRGB>:

void setRightRGB(uint16_t red, uint16_t green, uint16_t blue) {
    b27c:	b590      	push	{r4, r7, lr}
    b27e:	b083      	sub	sp, #12
    b280:	af00      	add	r7, sp, #0
    b282:	0004      	movs	r4, r0
    b284:	0008      	movs	r0, r1
    b286:	0011      	movs	r1, r2
    b288:	1dbb      	adds	r3, r7, #6
    b28a:	1c22      	adds	r2, r4, #0
    b28c:	801a      	strh	r2, [r3, #0]
    b28e:	1d3b      	adds	r3, r7, #4
    b290:	1c02      	adds	r2, r0, #0
    b292:	801a      	strh	r2, [r3, #0]
    b294:	1cbb      	adds	r3, r7, #2
    b296:	1c0a      	adds	r2, r1, #0
    b298:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.RB = blue;
    b29a:	4b12      	ldr	r3, [pc, #72]	; (b2e4 <setRightRGB+0x68>)
    b29c:	1cba      	adds	r2, r7, #2
    b29e:	8812      	ldrh	r2, [r2, #0]
    b2a0:	815a      	strh	r2, [r3, #10]
	RGB_Ouptut.RG = green;
    b2a2:	4b10      	ldr	r3, [pc, #64]	; (b2e4 <setRightRGB+0x68>)
    b2a4:	1d3a      	adds	r2, r7, #4
    b2a6:	8812      	ldrh	r2, [r2, #0]
    b2a8:	811a      	strh	r2, [r3, #8]
	RGB_Ouptut.RR = red;
    b2aa:	4b0e      	ldr	r3, [pc, #56]	; (b2e4 <setRightRGB+0x68>)
    b2ac:	1dba      	adds	r2, r7, #6
    b2ae:	8812      	ldrh	r2, [r2, #0]
    b2b0:	80da      	strh	r2, [r3, #6]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), red);		
    b2b2:	1dbb      	adds	r3, r7, #6
    b2b4:	881a      	ldrh	r2, [r3, #0]
    b2b6:	4b0c      	ldr	r3, [pc, #48]	; (b2e8 <setRightRGB+0x6c>)
    b2b8:	2103      	movs	r1, #3
    b2ba:	0018      	movs	r0, r3
    b2bc:	4b0b      	ldr	r3, [pc, #44]	; (b2ec <setRightRGB+0x70>)
    b2be:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), green);
    b2c0:	1d3b      	adds	r3, r7, #4
    b2c2:	881a      	ldrh	r2, [r3, #0]
    b2c4:	4b08      	ldr	r3, [pc, #32]	; (b2e8 <setRightRGB+0x6c>)
    b2c6:	2101      	movs	r1, #1
    b2c8:	0018      	movs	r0, r3
    b2ca:	4b08      	ldr	r3, [pc, #32]	; (b2ec <setRightRGB+0x70>)
    b2cc:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), blue);
    b2ce:	1cbb      	adds	r3, r7, #2
    b2d0:	881a      	ldrh	r2, [r3, #0]
    b2d2:	4b05      	ldr	r3, [pc, #20]	; (b2e8 <setRightRGB+0x6c>)
    b2d4:	2102      	movs	r1, #2
    b2d6:	0018      	movs	r0, r3
    b2d8:	4b04      	ldr	r3, [pc, #16]	; (b2ec <setRightRGB+0x70>)
    b2da:	4798      	blx	r3
}
    b2dc:	46c0      	nop			; (mov r8, r8)
    b2de:	46bd      	mov	sp, r7
    b2e0:	b003      	add	sp, #12
    b2e2:	bd90      	pop	{r4, r7, pc}
    b2e4:	20000314 	.word	0x20000314
    b2e8:	2000074c 	.word	0x2000074c
    b2ec:	0000572d 	.word	0x0000572d

0000b2f0 <setWhite>:

void setWhite(uint16_t white) {
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b082      	sub	sp, #8
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	0002      	movs	r2, r0
    b2f8:	1dbb      	adds	r3, r7, #6
    b2fa:	801a      	strh	r2, [r3, #0]
	head = white;
    b2fc:	4b08      	ldr	r3, [pc, #32]	; (b320 <setWhite+0x30>)
    b2fe:	1dba      	adds	r2, r7, #6
    b300:	8812      	ldrh	r2, [r2, #0]
    b302:	801a      	strh	r2, [r3, #0]
	//tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), white);
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0, white); // Changed to non-pwm due to pulse width reading on PPM_IN pin
    b304:	1dbb      	adds	r3, r7, #6
    b306:	881b      	ldrh	r3, [r3, #0]
    b308:	1e5a      	subs	r2, r3, #1
    b30a:	4193      	sbcs	r3, r2
    b30c:	b2db      	uxtb	r3, r3
    b30e:	0019      	movs	r1, r3
    b310:	2006      	movs	r0, #6
    b312:	4b04      	ldr	r3, [pc, #16]	; (b324 <setWhite+0x34>)
    b314:	4798      	blx	r3
}
    b316:	46c0      	nop			; (mov r8, r8)
    b318:	46bd      	mov	sp, r7
    b31a:	b002      	add	sp, #8
    b31c:	bd80      	pop	{r7, pc}
    b31e:	46c0      	nop			; (mov r8, r8)
    b320:	200009c2 	.word	0x200009c2
    b324:	00008d01 	.word	0x00008d01

0000b328 <setRed>:

void setRed(uint16_t red) {
    b328:	b580      	push	{r7, lr}
    b32a:	b082      	sub	sp, #8
    b32c:	af00      	add	r7, sp, #0
    b32e:	0002      	movs	r2, r0
    b330:	1dbb      	adds	r3, r7, #6
    b332:	801a      	strh	r2, [r3, #0]
	brake = red;
    b334:	4b07      	ldr	r3, [pc, #28]	; (b354 <setRed+0x2c>)
    b336:	1dba      	adds	r2, r7, #6
    b338:	8812      	ldrh	r2, [r2, #0]
    b33a:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (0), red);
    b33c:	1dbb      	adds	r3, r7, #6
    b33e:	881a      	ldrh	r2, [r3, #0]
    b340:	4b05      	ldr	r3, [pc, #20]	; (b358 <setRed+0x30>)
    b342:	2100      	movs	r1, #0
    b344:	0018      	movs	r0, r3
    b346:	4b05      	ldr	r3, [pc, #20]	; (b35c <setRed+0x34>)
    b348:	4798      	blx	r3
}
    b34a:	46c0      	nop			; (mov r8, r8)
    b34c:	46bd      	mov	sp, r7
    b34e:	b002      	add	sp, #8
    b350:	bd80      	pop	{r7, pc}
    b352:	46c0      	nop			; (mov r8, r8)
    b354:	20000312 	.word	0x20000312
    b358:	20000f1c 	.word	0x20000f1c
    b35c:	0000572d 	.word	0x0000572d

0000b360 <setAux>:

void setAux(bool aux) {
    b360:	b580      	push	{r7, lr}
    b362:	b082      	sub	sp, #8
    b364:	af00      	add	r7, sp, #0
    b366:	0002      	movs	r2, r0
    b368:	1dfb      	adds	r3, r7, #7
    b36a:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(AUX_PIN,aux);
    b36c:	1dfb      	adds	r3, r7, #7
    b36e:	781b      	ldrb	r3, [r3, #0]
    b370:	0019      	movs	r1, r3
    b372:	2008      	movs	r0, #8
    b374:	4b02      	ldr	r3, [pc, #8]	; (b380 <setAux+0x20>)
    b376:	4798      	blx	r3
}
    b378:	46c0      	nop			; (mov r8, r8)
    b37a:	46bd      	mov	sp, r7
    b37c:	b002      	add	sp, #8
    b37e:	bd80      	pop	{r7, pc}
    b380:	00008d01 	.word	0x00008d01

0000b384 <setCycleColor>:

struct RGB_Vals setCycleColor(uint16_t _upColor, uint16_t _downColor, int _cycle){
    b384:	b580      	push	{r7, lr}
    b386:	b088      	sub	sp, #32
    b388:	af00      	add	r7, sp, #0
    b38a:	60f8      	str	r0, [r7, #12]
    b38c:	0008      	movs	r0, r1
    b38e:	0011      	movs	r1, r2
    b390:	607b      	str	r3, [r7, #4]
    b392:	230a      	movs	r3, #10
    b394:	18fb      	adds	r3, r7, r3
    b396:	1c02      	adds	r2, r0, #0
    b398:	801a      	strh	r2, [r3, #0]
    b39a:	2308      	movs	r3, #8
    b39c:	18fb      	adds	r3, r7, r3
    b39e:	1c0a      	adds	r2, r1, #0
    b3a0:	801a      	strh	r2, [r3, #0]
	struct RGB_Vals color;
	if(_cycle == 0){
    b3a2:	687b      	ldr	r3, [r7, #4]
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d11f      	bne.n	b3e8 <setCycleColor+0x64>
		color.LR=_upColor;
    b3a8:	2314      	movs	r3, #20
    b3aa:	18fb      	adds	r3, r7, r3
    b3ac:	220a      	movs	r2, #10
    b3ae:	18ba      	adds	r2, r7, r2
    b3b0:	8812      	ldrh	r2, [r2, #0]
    b3b2:	801a      	strh	r2, [r3, #0]
		color.LG = 0;
    b3b4:	2314      	movs	r3, #20
    b3b6:	18fb      	adds	r3, r7, r3
    b3b8:	2200      	movs	r2, #0
    b3ba:	805a      	strh	r2, [r3, #2]
		color.LB = _downColor;
    b3bc:	2314      	movs	r3, #20
    b3be:	18fb      	adds	r3, r7, r3
    b3c0:	2208      	movs	r2, #8
    b3c2:	18ba      	adds	r2, r7, r2
    b3c4:	8812      	ldrh	r2, [r2, #0]
    b3c6:	809a      	strh	r2, [r3, #4]
		color.RR=_upColor;
    b3c8:	2314      	movs	r3, #20
    b3ca:	18fb      	adds	r3, r7, r3
    b3cc:	220a      	movs	r2, #10
    b3ce:	18ba      	adds	r2, r7, r2
    b3d0:	8812      	ldrh	r2, [r2, #0]
    b3d2:	80da      	strh	r2, [r3, #6]
		color.RG = 0;
    b3d4:	2314      	movs	r3, #20
    b3d6:	18fb      	adds	r3, r7, r3
    b3d8:	2200      	movs	r2, #0
    b3da:	811a      	strh	r2, [r3, #8]
		color.RB = _downColor;
    b3dc:	2314      	movs	r3, #20
    b3de:	18fb      	adds	r3, r7, r3
    b3e0:	2208      	movs	r2, #8
    b3e2:	18ba      	adds	r2, r7, r2
    b3e4:	8812      	ldrh	r2, [r2, #0]
    b3e6:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 1){
    b3e8:	687b      	ldr	r3, [r7, #4]
    b3ea:	2b01      	cmp	r3, #1
    b3ec:	d11f      	bne.n	b42e <setCycleColor+0xaa>
		color.LR=_downColor;
    b3ee:	2314      	movs	r3, #20
    b3f0:	18fb      	adds	r3, r7, r3
    b3f2:	2208      	movs	r2, #8
    b3f4:	18ba      	adds	r2, r7, r2
    b3f6:	8812      	ldrh	r2, [r2, #0]
    b3f8:	801a      	strh	r2, [r3, #0]
		color.LG = _upColor;
    b3fa:	2314      	movs	r3, #20
    b3fc:	18fb      	adds	r3, r7, r3
    b3fe:	220a      	movs	r2, #10
    b400:	18ba      	adds	r2, r7, r2
    b402:	8812      	ldrh	r2, [r2, #0]
    b404:	805a      	strh	r2, [r3, #2]
		color.LB = 0;
    b406:	2314      	movs	r3, #20
    b408:	18fb      	adds	r3, r7, r3
    b40a:	2200      	movs	r2, #0
    b40c:	809a      	strh	r2, [r3, #4]
		color.RR=_downColor;
    b40e:	2314      	movs	r3, #20
    b410:	18fb      	adds	r3, r7, r3
    b412:	2208      	movs	r2, #8
    b414:	18ba      	adds	r2, r7, r2
    b416:	8812      	ldrh	r2, [r2, #0]
    b418:	80da      	strh	r2, [r3, #6]
		color.RG = _upColor;
    b41a:	2314      	movs	r3, #20
    b41c:	18fb      	adds	r3, r7, r3
    b41e:	220a      	movs	r2, #10
    b420:	18ba      	adds	r2, r7, r2
    b422:	8812      	ldrh	r2, [r2, #0]
    b424:	811a      	strh	r2, [r3, #8]
		color.RB = 0;
    b426:	2314      	movs	r3, #20
    b428:	18fb      	adds	r3, r7, r3
    b42a:	2200      	movs	r2, #0
    b42c:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 2){
    b42e:	687b      	ldr	r3, [r7, #4]
    b430:	2b02      	cmp	r3, #2
    b432:	d11f      	bne.n	b474 <setCycleColor+0xf0>
		color.LR=0;
    b434:	2314      	movs	r3, #20
    b436:	18fb      	adds	r3, r7, r3
    b438:	2200      	movs	r2, #0
    b43a:	801a      	strh	r2, [r3, #0]
		color.LG = _downColor;
    b43c:	2314      	movs	r3, #20
    b43e:	18fb      	adds	r3, r7, r3
    b440:	2208      	movs	r2, #8
    b442:	18ba      	adds	r2, r7, r2
    b444:	8812      	ldrh	r2, [r2, #0]
    b446:	805a      	strh	r2, [r3, #2]
		color.LB = _upColor;
    b448:	2314      	movs	r3, #20
    b44a:	18fb      	adds	r3, r7, r3
    b44c:	220a      	movs	r2, #10
    b44e:	18ba      	adds	r2, r7, r2
    b450:	8812      	ldrh	r2, [r2, #0]
    b452:	809a      	strh	r2, [r3, #4]
		color.RR=0;
    b454:	2314      	movs	r3, #20
    b456:	18fb      	adds	r3, r7, r3
    b458:	2200      	movs	r2, #0
    b45a:	80da      	strh	r2, [r3, #6]
		color.RG = _downColor;
    b45c:	2314      	movs	r3, #20
    b45e:	18fb      	adds	r3, r7, r3
    b460:	2208      	movs	r2, #8
    b462:	18ba      	adds	r2, r7, r2
    b464:	8812      	ldrh	r2, [r2, #0]
    b466:	811a      	strh	r2, [r3, #8]
		color.RB = _upColor;
    b468:	2314      	movs	r3, #20
    b46a:	18fb      	adds	r3, r7, r3
    b46c:	220a      	movs	r2, #10
    b46e:	18ba      	adds	r2, r7, r2
    b470:	8812      	ldrh	r2, [r2, #0]
    b472:	815a      	strh	r2, [r3, #10]
	}
	return color;
    b474:	68fa      	ldr	r2, [r7, #12]
    b476:	2314      	movs	r3, #20
    b478:	18fb      	adds	r3, r7, r3
    b47a:	0010      	movs	r0, r2
    b47c:	0019      	movs	r1, r3
    b47e:	230c      	movs	r3, #12
    b480:	001a      	movs	r2, r3
    b482:	4b03      	ldr	r3, [pc, #12]	; (b490 <setCycleColor+0x10c>)
    b484:	4798      	blx	r3
}
    b486:	68f8      	ldr	r0, [r7, #12]
    b488:	46bd      	mov	sp, r7
    b48a:	b008      	add	sp, #32
    b48c:	bd80      	pop	{r7, pc}
    b48e:	46c0      	nop			; (mov r8, r8)
    b490:	00016fe5 	.word	0x00016fe5

0000b494 <setConstBases>:

void setConstBases(){
    b494:	b580      	push	{r7, lr}
    b496:	af00      	add	r7, sp, #0
	ColorBase[MODE_STATIC] = COLOR_STATIC;
    b498:	4b25      	ldr	r3, [pc, #148]	; (b530 <setConstBases+0x9c>)
    b49a:	2200      	movs	r2, #0
    b49c:	701a      	strb	r2, [r3, #0]
	RateBase[MODE_STATIC] = RATE_STATIC;
    b49e:	4b25      	ldr	r3, [pc, #148]	; (b534 <setConstBases+0xa0>)
    b4a0:	2200      	movs	r2, #0
    b4a2:	701a      	strb	r2, [r3, #0]
	BrightBase[MODE_STATIC] = BRIGHT_STATIC;
    b4a4:	4b24      	ldr	r3, [pc, #144]	; (b538 <setConstBases+0xa4>)
    b4a6:	2200      	movs	r2, #0
    b4a8:	701a      	strb	r2, [r3, #0]
	
	ColorBase[MODE_COLOR_CYCLE] = COLOR_COLOR_CYCLE;
    b4aa:	4b21      	ldr	r3, [pc, #132]	; (b530 <setConstBases+0x9c>)
    b4ac:	2201      	movs	r2, #1
    b4ae:	705a      	strb	r2, [r3, #1]
	RateBase[MODE_COLOR_CYCLE] = RATE_STATIC;
    b4b0:	4b20      	ldr	r3, [pc, #128]	; (b534 <setConstBases+0xa0>)
    b4b2:	2200      	movs	r2, #0
    b4b4:	705a      	strb	r2, [r3, #1]
	BrightBase[MODE_COLOR_CYCLE] = BRIGHT_STATIC;
    b4b6:	4b20      	ldr	r3, [pc, #128]	; (b538 <setConstBases+0xa4>)
    b4b8:	2200      	movs	r2, #0
    b4ba:	705a      	strb	r2, [r3, #1]
	
	ColorBase[MODE_COMPASS_CYCLE] = COLOR_COMPASS;
    b4bc:	4b1c      	ldr	r3, [pc, #112]	; (b530 <setConstBases+0x9c>)
    b4be:	2202      	movs	r2, #2
    b4c0:	709a      	strb	r2, [r3, #2]
	RateBase[MODE_COMPASS_CYCLE] = RATE_STATIC;
    b4c2:	4b1c      	ldr	r3, [pc, #112]	; (b534 <setConstBases+0xa0>)
    b4c4:	2200      	movs	r2, #0
    b4c6:	709a      	strb	r2, [r3, #2]
	BrightBase[MODE_COMPASS_CYCLE] = BRIGHT_STATIC;
    b4c8:	4b1b      	ldr	r3, [pc, #108]	; (b538 <setConstBases+0xa4>)
    b4ca:	2200      	movs	r2, #0
    b4cc:	709a      	strb	r2, [r3, #2]
	
	ColorBase[MODE_THROTTLE] = COLOR_THROTTLE;
    b4ce:	4b18      	ldr	r3, [pc, #96]	; (b530 <setConstBases+0x9c>)
    b4d0:	2206      	movs	r2, #6
    b4d2:	70da      	strb	r2, [r3, #3]
	RateBase[MODE_THROTTLE] = RATE_STATIC;
    b4d4:	4b17      	ldr	r3, [pc, #92]	; (b534 <setConstBases+0xa0>)
    b4d6:	2200      	movs	r2, #0
    b4d8:	70da      	strb	r2, [r3, #3]
	BrightBase[MODE_THROTTLE] = BRIGHT_STATIC;
    b4da:	4b17      	ldr	r3, [pc, #92]	; (b538 <setConstBases+0xa4>)
    b4dc:	2200      	movs	r2, #0
    b4de:	70da      	strb	r2, [r3, #3]
	
	ColorBase[MODE_RPM_CYCLE] = COLOR_COLOR_CYCLE;
    b4e0:	4b13      	ldr	r3, [pc, #76]	; (b530 <setConstBases+0x9c>)
    b4e2:	2201      	movs	r2, #1
    b4e4:	711a      	strb	r2, [r3, #4]
	RateBase[MODE_RPM_CYCLE] = RATE_RPM;
    b4e6:	4b13      	ldr	r3, [pc, #76]	; (b534 <setConstBases+0xa0>)
    b4e8:	2203      	movs	r2, #3
    b4ea:	711a      	strb	r2, [r3, #4]
	BrightBase[MODE_RPM_CYCLE] = BRIGHT_RPM;
    b4ec:	4b12      	ldr	r3, [pc, #72]	; (b538 <setConstBases+0xa4>)
    b4ee:	2203      	movs	r2, #3
    b4f0:	711a      	strb	r2, [r3, #4]
	
	ColorBase[MODE_RPM_THROTTLE] = COLOR_THROTTLE;
    b4f2:	4b0f      	ldr	r3, [pc, #60]	; (b530 <setConstBases+0x9c>)
    b4f4:	2206      	movs	r2, #6
    b4f6:	715a      	strb	r2, [r3, #5]
	RateBase[MODE_RPM_THROTTLE] = RATE_STATIC;
    b4f8:	4b0e      	ldr	r3, [pc, #56]	; (b534 <setConstBases+0xa0>)
    b4fa:	2200      	movs	r2, #0
    b4fc:	715a      	strb	r2, [r3, #5]
	BrightBase[MODE_RPM_THROTTLE] = BRIGHT_RPM;
    b4fe:	4b0e      	ldr	r3, [pc, #56]	; (b538 <setConstBases+0xa4>)
    b500:	2203      	movs	r2, #3
    b502:	715a      	strb	r2, [r3, #5]
	
	ColorBase[MODE_X_ACCEL] = COLOR_COLOR_CYCLE;
    b504:	4b0a      	ldr	r3, [pc, #40]	; (b530 <setConstBases+0x9c>)
    b506:	2201      	movs	r2, #1
    b508:	719a      	strb	r2, [r3, #6]
	RateBase[MODE_X_ACCEL] = RATE_STATIC;
    b50a:	4b0a      	ldr	r3, [pc, #40]	; (b534 <setConstBases+0xa0>)
    b50c:	2200      	movs	r2, #0
    b50e:	719a      	strb	r2, [r3, #6]
	BrightBase[MODE_X_ACCEL] = BRIGHT_X_ACCEL;
    b510:	4b09      	ldr	r3, [pc, #36]	; (b538 <setConstBases+0xa4>)
    b512:	2205      	movs	r2, #5
    b514:	719a      	strb	r2, [r3, #6]
	
	ColorBase[MODE_Y_ACCEL] = COLOR_Y_ACCEL;
    b516:	4b06      	ldr	r3, [pc, #24]	; (b530 <setConstBases+0x9c>)
    b518:	2209      	movs	r2, #9
    b51a:	71da      	strb	r2, [r3, #7]
	RateBase[MODE_Y_ACCEL] = RATE_STATIC;
    b51c:	4b05      	ldr	r3, [pc, #20]	; (b534 <setConstBases+0xa0>)
    b51e:	2200      	movs	r2, #0
    b520:	71da      	strb	r2, [r3, #7]
	BrightBase[MODE_Y_ACCEL] = BRIGHT_STATIC;
    b522:	4b05      	ldr	r3, [pc, #20]	; (b538 <setConstBases+0xa4>)
    b524:	2200      	movs	r2, #0
    b526:	71da      	strb	r2, [r3, #7]
}
    b528:	46c0      	nop			; (mov r8, r8)
    b52a:	46bd      	mov	sp, r7
    b52c:	bd80      	pop	{r7, pc}
    b52e:	46c0      	nop			; (mov r8, r8)
    b530:	20000070 	.word	0x20000070
    b534:	20000088 	.word	0x20000088
    b538:	2000007c 	.word	0x2000007c

0000b53c <ERROR_LEDs>:

// Flash the side LEDs red until restart
// 0: Red, 1: Blue, 2:Green, 3: Teal, 4: Yellow, 5:Purple
void ERROR_LEDs(uint8_t error_type){
    b53c:	b580      	push	{r7, lr}
    b53e:	b086      	sub	sp, #24
    b540:	af00      	add	r7, sp, #0
    b542:	0002      	movs	r2, r0
    b544:	1dfb      	adds	r3, r7, #7
    b546:	701a      	strb	r2, [r3, #0]
	uint32_t timer = 0;
    b548:	2300      	movs	r3, #0
    b54a:	60fb      	str	r3, [r7, #12]

	uint16_t tempR = 0, tempG = 0, tempB = 0;
    b54c:	2316      	movs	r3, #22
    b54e:	18fb      	adds	r3, r7, r3
    b550:	2200      	movs	r2, #0
    b552:	801a      	strh	r2, [r3, #0]
    b554:	2314      	movs	r3, #20
    b556:	18fb      	adds	r3, r7, r3
    b558:	2200      	movs	r2, #0
    b55a:	801a      	strh	r2, [r3, #0]
    b55c:	2312      	movs	r3, #18
    b55e:	18fb      	adds	r3, r7, r3
    b560:	2200      	movs	r2, #0
    b562:	801a      	strh	r2, [r3, #0]
	if(error_type == 0 || error_type == 4  || error_type == 5)
    b564:	1dfb      	adds	r3, r7, #7
    b566:	781b      	ldrb	r3, [r3, #0]
    b568:	2b00      	cmp	r3, #0
    b56a:	d007      	beq.n	b57c <ERROR_LEDs+0x40>
    b56c:	1dfb      	adds	r3, r7, #7
    b56e:	781b      	ldrb	r3, [r3, #0]
    b570:	2b04      	cmp	r3, #4
    b572:	d003      	beq.n	b57c <ERROR_LEDs+0x40>
    b574:	1dfb      	adds	r3, r7, #7
    b576:	781b      	ldrb	r3, [r3, #0]
    b578:	2b05      	cmp	r3, #5
    b57a:	d104      	bne.n	b586 <ERROR_LEDs+0x4a>
		tempR = 0xFFFF;
    b57c:	2316      	movs	r3, #22
    b57e:	18fb      	adds	r3, r7, r3
    b580:	2201      	movs	r2, #1
    b582:	4252      	negs	r2, r2
    b584:	801a      	strh	r2, [r3, #0]
	if(error_type >= 2 && error_type <= 4)
    b586:	1dfb      	adds	r3, r7, #7
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	2b01      	cmp	r3, #1
    b58c:	d908      	bls.n	b5a0 <ERROR_LEDs+0x64>
    b58e:	1dfb      	adds	r3, r7, #7
    b590:	781b      	ldrb	r3, [r3, #0]
    b592:	2b04      	cmp	r3, #4
    b594:	d804      	bhi.n	b5a0 <ERROR_LEDs+0x64>
		tempG = 0xFFFF;
    b596:	2314      	movs	r3, #20
    b598:	18fb      	adds	r3, r7, r3
    b59a:	2201      	movs	r2, #1
    b59c:	4252      	negs	r2, r2
    b59e:	801a      	strh	r2, [r3, #0]
	if(error_type == 1 || error_type == 3 || error_type == 5)
    b5a0:	1dfb      	adds	r3, r7, #7
    b5a2:	781b      	ldrb	r3, [r3, #0]
    b5a4:	2b01      	cmp	r3, #1
    b5a6:	d007      	beq.n	b5b8 <ERROR_LEDs+0x7c>
    b5a8:	1dfb      	adds	r3, r7, #7
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	2b03      	cmp	r3, #3
    b5ae:	d003      	beq.n	b5b8 <ERROR_LEDs+0x7c>
    b5b0:	1dfb      	adds	r3, r7, #7
    b5b2:	781b      	ldrb	r3, [r3, #0]
    b5b4:	2b05      	cmp	r3, #5
    b5b6:	d104      	bne.n	b5c2 <ERROR_LEDs+0x86>
		tempB = 0xFFFF;
    b5b8:	2312      	movs	r3, #18
    b5ba:	18fb      	adds	r3, r7, r3
    b5bc:	2201      	movs	r2, #1
    b5be:	4252      	negs	r2, r2
    b5c0:	801a      	strh	r2, [r3, #0]

	while(1){
		setLeftRGB(0,0,0);
    b5c2:	2200      	movs	r2, #0
    b5c4:	2100      	movs	r1, #0
    b5c6:	2000      	movs	r0, #0
    b5c8:	4b2e      	ldr	r3, [pc, #184]	; (b684 <ERROR_LEDs+0x148>)
    b5ca:	4798      	blx	r3
		setRightRGB(0,0,0);
    b5cc:	2200      	movs	r2, #0
    b5ce:	2100      	movs	r1, #0
    b5d0:	2000      	movs	r0, #0
    b5d2:	4b2d      	ldr	r3, [pc, #180]	; (b688 <ERROR_LEDs+0x14c>)
    b5d4:	4798      	blx	r3
		
		setRed(0);
    b5d6:	2000      	movs	r0, #0
    b5d8:	4b2c      	ldr	r3, [pc, #176]	; (b68c <ERROR_LEDs+0x150>)
    b5da:	4798      	blx	r3
		setWhite(0);
    b5dc:	2000      	movs	r0, #0
    b5de:	4b2c      	ldr	r3, [pc, #176]	; (b690 <ERROR_LEDs+0x154>)
    b5e0:	4798      	blx	r3
		setAux(0);
    b5e2:	2000      	movs	r0, #0
    b5e4:	4b2b      	ldr	r3, [pc, #172]	; (b694 <ERROR_LEDs+0x158>)
    b5e6:	4798      	blx	r3

		while(millis() - timer < 1000) {
    b5e8:	e004      	b.n	b5f4 <ERROR_LEDs+0xb8>
			check_time(&timer);
    b5ea:	230c      	movs	r3, #12
    b5ec:	18fb      	adds	r3, r7, r3
    b5ee:	0018      	movs	r0, r3
    b5f0:	4b29      	ldr	r3, [pc, #164]	; (b698 <ERROR_LEDs+0x15c>)
    b5f2:	4798      	blx	r3
		while(millis() - timer < 1000) {
    b5f4:	4b29      	ldr	r3, [pc, #164]	; (b69c <ERROR_LEDs+0x160>)
    b5f6:	4798      	blx	r3
    b5f8:	0002      	movs	r2, r0
    b5fa:	68fb      	ldr	r3, [r7, #12]
    b5fc:	1ad3      	subs	r3, r2, r3
    b5fe:	4a28      	ldr	r2, [pc, #160]	; (b6a0 <ERROR_LEDs+0x164>)
    b600:	4293      	cmp	r3, r2
    b602:	d9f2      	bls.n	b5ea <ERROR_LEDs+0xae>
		}
		timer = millis();
    b604:	4b25      	ldr	r3, [pc, #148]	; (b69c <ERROR_LEDs+0x160>)
    b606:	4798      	blx	r3
    b608:	0003      	movs	r3, r0
    b60a:	60fb      	str	r3, [r7, #12]

		setLeftRGB(tempR,tempG,tempB);
    b60c:	2312      	movs	r3, #18
    b60e:	18fb      	adds	r3, r7, r3
    b610:	881a      	ldrh	r2, [r3, #0]
    b612:	2314      	movs	r3, #20
    b614:	18fb      	adds	r3, r7, r3
    b616:	8819      	ldrh	r1, [r3, #0]
    b618:	2316      	movs	r3, #22
    b61a:	18fb      	adds	r3, r7, r3
    b61c:	881b      	ldrh	r3, [r3, #0]
    b61e:	0018      	movs	r0, r3
    b620:	4b18      	ldr	r3, [pc, #96]	; (b684 <ERROR_LEDs+0x148>)
    b622:	4798      	blx	r3
		setRightRGB(tempR,tempG,tempB);
    b624:	2312      	movs	r3, #18
    b626:	18fb      	adds	r3, r7, r3
    b628:	881a      	ldrh	r2, [r3, #0]
    b62a:	2314      	movs	r3, #20
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	8819      	ldrh	r1, [r3, #0]
    b630:	2316      	movs	r3, #22
    b632:	18fb      	adds	r3, r7, r3
    b634:	881b      	ldrh	r3, [r3, #0]
    b636:	0018      	movs	r0, r3
    b638:	4b13      	ldr	r3, [pc, #76]	; (b688 <ERROR_LEDs+0x14c>)
    b63a:	4798      	blx	r3
		
		setRed(0xFFFF);
    b63c:	4b19      	ldr	r3, [pc, #100]	; (b6a4 <ERROR_LEDs+0x168>)
    b63e:	0018      	movs	r0, r3
    b640:	4b12      	ldr	r3, [pc, #72]	; (b68c <ERROR_LEDs+0x150>)
    b642:	4798      	blx	r3
		setWhite(0xFFFF);
    b644:	4b17      	ldr	r3, [pc, #92]	; (b6a4 <ERROR_LEDs+0x168>)
    b646:	0018      	movs	r0, r3
    b648:	4b11      	ldr	r3, [pc, #68]	; (b690 <ERROR_LEDs+0x154>)
    b64a:	4798      	blx	r3
		setAux(1);
    b64c:	2001      	movs	r0, #1
    b64e:	4b11      	ldr	r3, [pc, #68]	; (b694 <ERROR_LEDs+0x158>)
    b650:	4798      	blx	r3

		while(millis() - timer < 250) {
    b652:	e004      	b.n	b65e <ERROR_LEDs+0x122>
			check_time(&timer);
    b654:	230c      	movs	r3, #12
    b656:	18fb      	adds	r3, r7, r3
    b658:	0018      	movs	r0, r3
    b65a:	4b0f      	ldr	r3, [pc, #60]	; (b698 <ERROR_LEDs+0x15c>)
    b65c:	4798      	blx	r3
		while(millis() - timer < 250) {
    b65e:	4b0f      	ldr	r3, [pc, #60]	; (b69c <ERROR_LEDs+0x160>)
    b660:	4798      	blx	r3
    b662:	0002      	movs	r2, r0
    b664:	68fb      	ldr	r3, [r7, #12]
    b666:	1ad3      	subs	r3, r2, r3
    b668:	2bf9      	cmp	r3, #249	; 0xf9
    b66a:	d9f3      	bls.n	b654 <ERROR_LEDs+0x118>
		}
		timer = millis();
    b66c:	4b0b      	ldr	r3, [pc, #44]	; (b69c <ERROR_LEDs+0x160>)
    b66e:	4798      	blx	r3
    b670:	0003      	movs	r3, r0
    b672:	60fb      	str	r3, [r7, #12]
    b674:	2312      	movs	r3, #18
    b676:	18fb      	adds	r3, r7, r3
    b678:	2212      	movs	r2, #18
    b67a:	18ba      	adds	r2, r7, r2
    b67c:	8812      	ldrh	r2, [r2, #0]
    b67e:	801a      	strh	r2, [r3, #0]
		setLeftRGB(0,0,0);
    b680:	e79f      	b.n	b5c2 <ERROR_LEDs+0x86>
    b682:	46c0      	nop			; (mov r8, r8)
    b684:	0000b201 	.word	0x0000b201
    b688:	0000b27d 	.word	0x0000b27d
    b68c:	0000b329 	.word	0x0000b329
    b690:	0000b2f1 	.word	0x0000b2f1
    b694:	0000b361 	.word	0x0000b361
    b698:	0000b045 	.word	0x0000b045
    b69c:	0000b015 	.word	0x0000b015
    b6a0:	000003e7 	.word	0x000003e7
    b6a4:	0000ffff 	.word	0x0000ffff

0000b6a8 <TurnSignal>:
}

// true = left    false = right
uint32_t turnTimer = 0;
uint16_t turnOutput = 0;
void TurnSignal(bool direction){
    b6a8:	b580      	push	{r7, lr}
    b6aa:	b082      	sub	sp, #8
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	0002      	movs	r2, r0
    b6b0:	1dfb      	adds	r3, r7, #7
    b6b2:	701a      	strb	r2, [r3, #0]

	check_time(&turnTimer);
    b6b4:	4b29      	ldr	r3, [pc, #164]	; (b75c <TurnSignal+0xb4>)
    b6b6:	0018      	movs	r0, r3
    b6b8:	4b29      	ldr	r3, [pc, #164]	; (b760 <TurnSignal+0xb8>)
    b6ba:	4798      	blx	r3
	if(turnOutput == 0x0 && (millis() - turnTimer >= TURN_OFF_TIME)){
    b6bc:	4b29      	ldr	r3, [pc, #164]	; (b764 <TurnSignal+0xbc>)
    b6be:	881b      	ldrh	r3, [r3, #0]
    b6c0:	2b00      	cmp	r3, #0
    b6c2:	d113      	bne.n	b6ec <TurnSignal+0x44>
    b6c4:	4b28      	ldr	r3, [pc, #160]	; (b768 <TurnSignal+0xc0>)
    b6c6:	4798      	blx	r3
    b6c8:	0002      	movs	r2, r0
    b6ca:	4b24      	ldr	r3, [pc, #144]	; (b75c <TurnSignal+0xb4>)
    b6cc:	681b      	ldr	r3, [r3, #0]
    b6ce:	1ad2      	subs	r2, r2, r3
    b6d0:	2390      	movs	r3, #144	; 0x90
    b6d2:	33ff      	adds	r3, #255	; 0xff
    b6d4:	429a      	cmp	r2, r3
    b6d6:	d909      	bls.n	b6ec <TurnSignal+0x44>
		turnOutput = 0xFFFF;
    b6d8:	4b22      	ldr	r3, [pc, #136]	; (b764 <TurnSignal+0xbc>)
    b6da:	2201      	movs	r2, #1
    b6dc:	4252      	negs	r2, r2
    b6de:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    b6e0:	4b21      	ldr	r3, [pc, #132]	; (b768 <TurnSignal+0xc0>)
    b6e2:	4798      	blx	r3
    b6e4:	0002      	movs	r2, r0
    b6e6:	4b1d      	ldr	r3, [pc, #116]	; (b75c <TurnSignal+0xb4>)
    b6e8:	601a      	str	r2, [r3, #0]
    b6ea:	e014      	b.n	b716 <TurnSignal+0x6e>
	} else if(turnOutput == 0xFFFF && (millis() - turnTimer >= TURN_ON_TIME)){
    b6ec:	4b1d      	ldr	r3, [pc, #116]	; (b764 <TurnSignal+0xbc>)
    b6ee:	881b      	ldrh	r3, [r3, #0]
    b6f0:	4a1e      	ldr	r2, [pc, #120]	; (b76c <TurnSignal+0xc4>)
    b6f2:	4293      	cmp	r3, r2
    b6f4:	d10f      	bne.n	b716 <TurnSignal+0x6e>
    b6f6:	4b1c      	ldr	r3, [pc, #112]	; (b768 <TurnSignal+0xc0>)
    b6f8:	4798      	blx	r3
    b6fa:	0002      	movs	r2, r0
    b6fc:	4b17      	ldr	r3, [pc, #92]	; (b75c <TurnSignal+0xb4>)
    b6fe:	681b      	ldr	r3, [r3, #0]
    b700:	1ad3      	subs	r3, r2, r3
    b702:	2bf9      	cmp	r3, #249	; 0xf9
    b704:	d907      	bls.n	b716 <TurnSignal+0x6e>
		turnOutput = 0;
    b706:	4b17      	ldr	r3, [pc, #92]	; (b764 <TurnSignal+0xbc>)
    b708:	2200      	movs	r2, #0
    b70a:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    b70c:	4b16      	ldr	r3, [pc, #88]	; (b768 <TurnSignal+0xc0>)
    b70e:	4798      	blx	r3
    b710:	0002      	movs	r2, r0
    b712:	4b12      	ldr	r3, [pc, #72]	; (b75c <TurnSignal+0xb4>)
    b714:	601a      	str	r2, [r3, #0]
	}

	if(direction == true){
    b716:	1dfb      	adds	r3, r7, #7
    b718:	781b      	ldrb	r3, [r3, #0]
    b71a:	2b00      	cmp	r3, #0
    b71c:	d00d      	beq.n	b73a <TurnSignal+0x92>
		setLeftRGB(turnOutput,turnOutput,0);
    b71e:	4b11      	ldr	r3, [pc, #68]	; (b764 <TurnSignal+0xbc>)
    b720:	8818      	ldrh	r0, [r3, #0]
    b722:	4b10      	ldr	r3, [pc, #64]	; (b764 <TurnSignal+0xbc>)
    b724:	881b      	ldrh	r3, [r3, #0]
    b726:	2200      	movs	r2, #0
    b728:	0019      	movs	r1, r3
    b72a:	4b11      	ldr	r3, [pc, #68]	; (b770 <TurnSignal+0xc8>)
    b72c:	4798      	blx	r3
		setRightRGB(0,0,0);
    b72e:	2200      	movs	r2, #0
    b730:	2100      	movs	r1, #0
    b732:	2000      	movs	r0, #0
    b734:	4b0f      	ldr	r3, [pc, #60]	; (b774 <TurnSignal+0xcc>)
    b736:	4798      	blx	r3
	} else {
		setLeftRGB(0,0,0);
		setRightRGB(turnOutput,turnOutput,0);
	}
}
    b738:	e00c      	b.n	b754 <TurnSignal+0xac>
		setLeftRGB(0,0,0);
    b73a:	2200      	movs	r2, #0
    b73c:	2100      	movs	r1, #0
    b73e:	2000      	movs	r0, #0
    b740:	4b0b      	ldr	r3, [pc, #44]	; (b770 <TurnSignal+0xc8>)
    b742:	4798      	blx	r3
		setRightRGB(turnOutput,turnOutput,0);
    b744:	4b07      	ldr	r3, [pc, #28]	; (b764 <TurnSignal+0xbc>)
    b746:	8818      	ldrh	r0, [r3, #0]
    b748:	4b06      	ldr	r3, [pc, #24]	; (b764 <TurnSignal+0xbc>)
    b74a:	881b      	ldrh	r3, [r3, #0]
    b74c:	2200      	movs	r2, #0
    b74e:	0019      	movs	r1, r3
    b750:	4b08      	ldr	r3, [pc, #32]	; (b774 <TurnSignal+0xcc>)
    b752:	4798      	blx	r3
}
    b754:	46c0      	nop			; (mov r8, r8)
    b756:	46bd      	mov	sp, r7
    b758:	b002      	add	sp, #8
    b75a:	bd80      	pop	{r7, pc}
    b75c:	20000334 	.word	0x20000334
    b760:	0000b045 	.word	0x0000b045
    b764:	20000338 	.word	0x20000338
    b768:	0000b015 	.word	0x0000b015
    b76c:	0000ffff 	.word	0x0000ffff
    b770:	0000b201 	.word	0x0000b201
    b774:	0000b27d 	.word	0x0000b27d

0000b778 <crc16>:
	0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
	0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
	0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

uint16_t crc16(uint8_t *buf, uint16_t len) {
    b778:	b580      	push	{r7, lr}
    b77a:	b084      	sub	sp, #16
    b77c:	af00      	add	r7, sp, #0
    b77e:	6078      	str	r0, [r7, #4]
    b780:	000a      	movs	r2, r1
    b782:	1cbb      	adds	r3, r7, #2
    b784:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint16_t cksum = 0;
    b786:	230c      	movs	r3, #12
    b788:	18fb      	adds	r3, r7, r3
    b78a:	2200      	movs	r2, #0
    b78c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
    b78e:	230e      	movs	r3, #14
    b790:	18fb      	adds	r3, r7, r3
    b792:	2200      	movs	r2, #0
    b794:	801a      	strh	r2, [r3, #0]
    b796:	e021      	b.n	b7dc <crc16+0x64>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
    b798:	230c      	movs	r3, #12
    b79a:	18fb      	adds	r3, r7, r3
    b79c:	881b      	ldrh	r3, [r3, #0]
    b79e:	0a1b      	lsrs	r3, r3, #8
    b7a0:	b29b      	uxth	r3, r3
    b7a2:	0019      	movs	r1, r3
    b7a4:	687b      	ldr	r3, [r7, #4]
    b7a6:	1c5a      	adds	r2, r3, #1
    b7a8:	607a      	str	r2, [r7, #4]
    b7aa:	781b      	ldrb	r3, [r3, #0]
    b7ac:	404b      	eors	r3, r1
    b7ae:	22ff      	movs	r2, #255	; 0xff
    b7b0:	401a      	ands	r2, r3
    b7b2:	4b11      	ldr	r3, [pc, #68]	; (b7f8 <crc16+0x80>)
    b7b4:	0052      	lsls	r2, r2, #1
    b7b6:	5ad3      	ldrh	r3, [r2, r3]
    b7b8:	b21a      	sxth	r2, r3
    b7ba:	230c      	movs	r3, #12
    b7bc:	18fb      	adds	r3, r7, r3
    b7be:	881b      	ldrh	r3, [r3, #0]
    b7c0:	021b      	lsls	r3, r3, #8
    b7c2:	b21b      	sxth	r3, r3
    b7c4:	4053      	eors	r3, r2
    b7c6:	b21a      	sxth	r2, r3
    b7c8:	230c      	movs	r3, #12
    b7ca:	18fb      	adds	r3, r7, r3
    b7cc:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
    b7ce:	230e      	movs	r3, #14
    b7d0:	18fb      	adds	r3, r7, r3
    b7d2:	881a      	ldrh	r2, [r3, #0]
    b7d4:	230e      	movs	r3, #14
    b7d6:	18fb      	adds	r3, r7, r3
    b7d8:	3201      	adds	r2, #1
    b7da:	801a      	strh	r2, [r3, #0]
    b7dc:	230e      	movs	r3, #14
    b7de:	18fa      	adds	r2, r7, r3
    b7e0:	1cbb      	adds	r3, r7, #2
    b7e2:	8812      	ldrh	r2, [r2, #0]
    b7e4:	881b      	ldrh	r3, [r3, #0]
    b7e6:	429a      	cmp	r2, r3
    b7e8:	d3d6      	bcc.n	b798 <crc16+0x20>
	}
	return cksum;
    b7ea:	230c      	movs	r3, #12
    b7ec:	18fb      	adds	r3, r7, r3
    b7ee:	881b      	ldrh	r3, [r3, #0]
}
    b7f0:	0018      	movs	r0, r3
    b7f2:	46bd      	mov	sp, r7
    b7f4:	b004      	add	sp, #16
    b7f6:	bd80      	pop	{r7, pc}
    b7f8:	00017330 	.word	0x00017330

0000b7fc <configure_vesc_usart>:
float buffer_get_float32_auto(uint8_t *buffer, int8_t index);


// Configure SERCOM5 as USART for VESC
void configure_vesc_usart()
{
    b7fc:	b580      	push	{r7, lr}
    b7fe:	b092      	sub	sp, #72	; 0x48
    b800:	af00      	add	r7, sp, #0
	uint32_t baud = 0;
    b802:	2300      	movs	r3, #0
    b804:	647b      	str	r3, [r7, #68]	; 0x44
	if(UART_baud == BAUD_9600)
    b806:	4b28      	ldr	r3, [pc, #160]	; (b8a8 <configure_vesc_usart+0xac>)
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	2b00      	cmp	r3, #0
    b80c:	d103      	bne.n	b816 <configure_vesc_usart+0x1a>
		baud = 9600;
    b80e:	2396      	movs	r3, #150	; 0x96
    b810:	019b      	lsls	r3, r3, #6
    b812:	647b      	str	r3, [r7, #68]	; 0x44
    b814:	e016      	b.n	b844 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_38400)
    b816:	4b24      	ldr	r3, [pc, #144]	; (b8a8 <configure_vesc_usart+0xac>)
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	2b01      	cmp	r3, #1
    b81c:	d103      	bne.n	b826 <configure_vesc_usart+0x2a>
		baud = 38400;
    b81e:	2396      	movs	r3, #150	; 0x96
    b820:	021b      	lsls	r3, r3, #8
    b822:	647b      	str	r3, [r7, #68]	; 0x44
    b824:	e00e      	b.n	b844 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_57600)
    b826:	4b20      	ldr	r3, [pc, #128]	; (b8a8 <configure_vesc_usart+0xac>)
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	2b02      	cmp	r3, #2
    b82c:	d103      	bne.n	b836 <configure_vesc_usart+0x3a>
		baud = 57600;
    b82e:	23e1      	movs	r3, #225	; 0xe1
    b830:	021b      	lsls	r3, r3, #8
    b832:	647b      	str	r3, [r7, #68]	; 0x44
    b834:	e006      	b.n	b844 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_115200)
    b836:	4b1c      	ldr	r3, [pc, #112]	; (b8a8 <configure_vesc_usart+0xac>)
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	2b03      	cmp	r3, #3
    b83c:	d102      	bne.n	b844 <configure_vesc_usart+0x48>
		baud = 115200;
    b83e:	23e1      	movs	r3, #225	; 0xe1
    b840:	025b      	lsls	r3, r3, #9
    b842:	647b      	str	r3, [r7, #68]	; 0x44

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    b844:	1d3b      	adds	r3, r7, #4
    b846:	0018      	movs	r0, r3
    b848:	4b18      	ldr	r3, [pc, #96]	; (b8ac <configure_vesc_usart+0xb0>)
    b84a:	4798      	blx	r3
	config_usart.baudrate    = baud;
    b84c:	1d3b      	adds	r3, r7, #4
    b84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    b850:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    b852:	1d3b      	adds	r3, r7, #4
    b854:	2280      	movs	r2, #128	; 0x80
    b856:	0352      	lsls	r2, r2, #13
    b858:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    b85a:	1d3b      	adds	r3, r7, #4
    b85c:	4a14      	ldr	r2, [pc, #80]	; (b8b0 <configure_vesc_usart+0xb4>)
    b85e:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    b860:	1d3b      	adds	r3, r7, #4
    b862:	4a14      	ldr	r2, [pc, #80]	; (b8b4 <configure_vesc_usart+0xb8>)
    b864:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    b866:	1d3b      	adds	r3, r7, #4
    b868:	2201      	movs	r2, #1
    b86a:	4252      	negs	r2, r2
    b86c:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    b86e:	1d3b      	adds	r3, r7, #4
    b870:	2201      	movs	r2, #1
    b872:	4252      	negs	r2, r2
    b874:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&vesc_usart,SERCOM1, &config_usart) != STATUS_OK)
    b876:	46c0      	nop			; (mov r8, r8)
    b878:	1d3a      	adds	r2, r7, #4
    b87a:	490f      	ldr	r1, [pc, #60]	; (b8b8 <configure_vesc_usart+0xbc>)
    b87c:	4b0f      	ldr	r3, [pc, #60]	; (b8bc <configure_vesc_usart+0xc0>)
    b87e:	0018      	movs	r0, r3
    b880:	4b0f      	ldr	r3, [pc, #60]	; (b8c0 <configure_vesc_usart+0xc4>)
    b882:	4798      	blx	r3
    b884:	1e03      	subs	r3, r0, #0
    b886:	d1f7      	bne.n	b878 <configure_vesc_usart+0x7c>
	{}
	usart_enable(&vesc_usart);
    b888:	4b0c      	ldr	r3, [pc, #48]	; (b8bc <configure_vesc_usart+0xc0>)
    b88a:	0018      	movs	r0, r3
    b88c:	4b0d      	ldr	r3, [pc, #52]	; (b8c4 <configure_vesc_usart+0xc8>)
    b88e:	4798      	blx	r3

	latest_vesc_vals.FW_VERSION_MAJOR = 0;
    b890:	4b0d      	ldr	r3, [pc, #52]	; (b8c8 <configure_vesc_usart+0xcc>)
    b892:	2234      	movs	r2, #52	; 0x34
    b894:	2100      	movs	r1, #0
    b896:	5499      	strb	r1, [r3, r2]
	latest_vesc_vals.FW_VERSION_MINOR = 0;
    b898:	4b0b      	ldr	r3, [pc, #44]	; (b8c8 <configure_vesc_usart+0xcc>)
    b89a:	2235      	movs	r2, #53	; 0x35
    b89c:	2100      	movs	r1, #0
    b89e:	5499      	strb	r1, [r3, r2]
}
    b8a0:	46c0      	nop			; (mov r8, r8)
    b8a2:	46bd      	mov	sp, r7
    b8a4:	b012      	add	sp, #72	; 0x48
    b8a6:	bd80      	pop	{r7, pc}
    b8a8:	20000311 	.word	0x20000311
    b8ac:	00009099 	.word	0x00009099
    b8b0:	00100002 	.word	0x00100002
    b8b4:	00110002 	.word	0x00110002
    b8b8:	42000c00 	.word	0x42000c00
    b8bc:	20000718 	.word	0x20000718
    b8c0:	000060e5 	.word	0x000060e5
    b8c4:	00009159 	.word	0x00009159
    b8c8:	20000958 	.word	0x20000958

0000b8cc <send_packet>:
	usart_register_callback(&vesc_usart, vesc_usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&vesc_usart, USART_CALLBACK_BUFFER_RECEIVED);
}*/

uint8_t vesc_tx_buff[MAX_PAYLOAD_LEN+6];
void send_packet(struct uart_packet send_pak){
    b8cc:	b084      	sub	sp, #16
    b8ce:	b590      	push	{r4, r7, lr}
    b8d0:	b085      	sub	sp, #20
    b8d2:	af00      	add	r7, sp, #0
    b8d4:	2420      	movs	r4, #32
    b8d6:	193c      	adds	r4, r7, r4
    b8d8:	6020      	str	r0, [r4, #0]
    b8da:	6061      	str	r1, [r4, #4]
    b8dc:	60a2      	str	r2, [r4, #8]
    b8de:	60e3      	str	r3, [r4, #12]
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
    b8e0:	4b49      	ldr	r3, [pc, #292]	; (ba08 <send_packet+0x13c>)
    b8e2:	4798      	blx	r3
    b8e4:	0002      	movs	r2, r0
    b8e6:	4b49      	ldr	r3, [pc, #292]	; (ba0c <send_packet+0x140>)
    b8e8:	681b      	ldr	r3, [r3, #0]
    b8ea:	1ad2      	subs	r2, r2, r3
    b8ec:	4b48      	ldr	r3, [pc, #288]	; (ba10 <send_packet+0x144>)
    b8ee:	681b      	ldr	r3, [r3, #0]
    b8f0:	429a      	cmp	r2, r3
    b8f2:	d902      	bls.n	b8fa <send_packet+0x2e>
		HOLD_FOR_REPLY = false;
    b8f4:	4b47      	ldr	r3, [pc, #284]	; (ba14 <send_packet+0x148>)
    b8f6:	2200      	movs	r2, #0
    b8f8:	701a      	strb	r2, [r3, #0]

	send_pak.stop = 0x03;
    b8fa:	2320      	movs	r3, #32
    b8fc:	18fa      	adds	r2, r7, r3
    b8fe:	4b46      	ldr	r3, [pc, #280]	; (ba18 <send_packet+0x14c>)
    b900:	2103      	movs	r1, #3
    b902:	54d1      	strb	r1, [r2, r3]

	if(!HOLD_FOR_REPLY){
    b904:	4b43      	ldr	r3, [pc, #268]	; (ba14 <send_packet+0x148>)
    b906:	781b      	ldrb	r3, [r3, #0]
    b908:	2201      	movs	r2, #1
    b90a:	4053      	eors	r3, r2
    b90c:	b2db      	uxtb	r3, r3
    b90e:	2b00      	cmp	r3, #0
    b910:	d100      	bne.n	b914 <send_packet+0x48>
    b912:	e071      	b.n	b9f8 <send_packet+0x12c>
		uint16_t payload_len = 0;
    b914:	230e      	movs	r3, #14
    b916:	18fb      	adds	r3, r7, r3
    b918:	2200      	movs	r2, #0
    b91a:	801a      	strh	r2, [r3, #0]
		if(send_pak.start == 0x03)
    b91c:	2320      	movs	r3, #32
    b91e:	18fb      	adds	r3, r7, r3
    b920:	781b      	ldrb	r3, [r3, #0]
    b922:	2b03      	cmp	r3, #3
    b924:	d10e      	bne.n	b944 <send_packet+0x78>
			payload_len = ((send_pak.len[0]<<8)|send_pak.len[1]);
    b926:	2320      	movs	r3, #32
    b928:	18fb      	adds	r3, r7, r3
    b92a:	785b      	ldrb	r3, [r3, #1]
    b92c:	021b      	lsls	r3, r3, #8
    b92e:	b21a      	sxth	r2, r3
    b930:	2320      	movs	r3, #32
    b932:	18fb      	adds	r3, r7, r3
    b934:	789b      	ldrb	r3, [r3, #2]
    b936:	b21b      	sxth	r3, r3
    b938:	4313      	orrs	r3, r2
    b93a:	b21a      	sxth	r2, r3
    b93c:	230e      	movs	r3, #14
    b93e:	18fb      	adds	r3, r7, r3
    b940:	801a      	strh	r2, [r3, #0]
    b942:	e005      	b.n	b950 <send_packet+0x84>
		else
			payload_len = send_pak.len[0];
    b944:	2320      	movs	r3, #32
    b946:	18fb      	adds	r3, r7, r3
    b948:	785a      	ldrb	r2, [r3, #1]
    b94a:	230e      	movs	r3, #14
    b94c:	18fb      	adds	r3, r7, r3
    b94e:	801a      	strh	r2, [r3, #0]
		
		uint16_t message_len = (send_pak.start+payload_len+3);
    b950:	2320      	movs	r3, #32
    b952:	18fb      	adds	r3, r7, r3
    b954:	781b      	ldrb	r3, [r3, #0]
    b956:	b29a      	uxth	r2, r3
    b958:	230e      	movs	r3, #14
    b95a:	18fb      	adds	r3, r7, r3
    b95c:	881b      	ldrh	r3, [r3, #0]
    b95e:	18d3      	adds	r3, r2, r3
    b960:	b29a      	uxth	r2, r3
    b962:	1cbb      	adds	r3, r7, #2
    b964:	3203      	adds	r2, #3
    b966:	801a      	strh	r2, [r3, #0]
		uint8_t *send_ptr = &(send_pak.start);
    b968:	2320      	movs	r3, #32
    b96a:	18fb      	adds	r3, r7, r3
    b96c:	60bb      	str	r3, [r7, #8]

		for(size_t i=0;i<message_len;i++){
    b96e:	2300      	movs	r3, #0
    b970:	607b      	str	r3, [r7, #4]
    b972:	e02d      	b.n	b9d0 <send_packet+0x104>
			if(send_pak.start==0x02 && i==2)
    b974:	2320      	movs	r3, #32
    b976:	18fb      	adds	r3, r7, r3
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	2b02      	cmp	r3, #2
    b97c:	d106      	bne.n	b98c <send_packet+0xc0>
    b97e:	687b      	ldr	r3, [r7, #4]
    b980:	2b02      	cmp	r3, #2
    b982:	d103      	bne.n	b98c <send_packet+0xc0>
			send_ptr+=1;
    b984:	68bb      	ldr	r3, [r7, #8]
    b986:	3301      	adds	r3, #1
    b988:	60bb      	str	r3, [r7, #8]
    b98a:	e014      	b.n	b9b6 <send_packet+0xea>
			else if(i==payload_len+send_pak.start)
    b98c:	230e      	movs	r3, #14
    b98e:	18fb      	adds	r3, r7, r3
    b990:	881b      	ldrh	r3, [r3, #0]
    b992:	2220      	movs	r2, #32
    b994:	18ba      	adds	r2, r7, r2
    b996:	7812      	ldrb	r2, [r2, #0]
    b998:	189b      	adds	r3, r3, r2
    b99a:	001a      	movs	r2, r3
    b99c:	687b      	ldr	r3, [r7, #4]
    b99e:	429a      	cmp	r2, r3
    b9a0:	d109      	bne.n	b9b6 <send_packet+0xea>
			send_ptr+=(MAX_PAYLOAD_LEN-payload_len);
    b9a2:	230e      	movs	r3, #14
    b9a4:	18fb      	adds	r3, r7, r3
    b9a6:	881b      	ldrh	r3, [r3, #0]
    b9a8:	2280      	movs	r2, #128	; 0x80
    b9aa:	0092      	lsls	r2, r2, #2
    b9ac:	1ad3      	subs	r3, r2, r3
    b9ae:	001a      	movs	r2, r3
    b9b0:	68bb      	ldr	r3, [r7, #8]
    b9b2:	189b      	adds	r3, r3, r2
    b9b4:	60bb      	str	r3, [r7, #8]

			vesc_tx_buff[i] = *send_ptr;
    b9b6:	68bb      	ldr	r3, [r7, #8]
    b9b8:	7819      	ldrb	r1, [r3, #0]
    b9ba:	4a18      	ldr	r2, [pc, #96]	; (ba1c <send_packet+0x150>)
    b9bc:	687b      	ldr	r3, [r7, #4]
    b9be:	18d3      	adds	r3, r2, r3
    b9c0:	1c0a      	adds	r2, r1, #0
    b9c2:	701a      	strb	r2, [r3, #0]

			send_ptr++;
    b9c4:	68bb      	ldr	r3, [r7, #8]
    b9c6:	3301      	adds	r3, #1
    b9c8:	60bb      	str	r3, [r7, #8]
		for(size_t i=0;i<message_len;i++){
    b9ca:	687b      	ldr	r3, [r7, #4]
    b9cc:	3301      	adds	r3, #1
    b9ce:	607b      	str	r3, [r7, #4]
    b9d0:	1cbb      	adds	r3, r7, #2
    b9d2:	881a      	ldrh	r2, [r3, #0]
    b9d4:	687b      	ldr	r3, [r7, #4]
    b9d6:	429a      	cmp	r2, r3
    b9d8:	d8cc      	bhi.n	b974 <send_packet+0xa8>
		}
		
		HOLD_FOR_REPLY = true;
    b9da:	4b0e      	ldr	r3, [pc, #56]	; (ba14 <send_packet+0x148>)
    b9dc:	2201      	movs	r2, #1
    b9de:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_wait(&vesc_usart, vesc_tx_buff, message_len);
    b9e0:	1cbb      	adds	r3, r7, #2
    b9e2:	881a      	ldrh	r2, [r3, #0]
    b9e4:	490d      	ldr	r1, [pc, #52]	; (ba1c <send_packet+0x150>)
    b9e6:	4b0e      	ldr	r3, [pc, #56]	; (ba20 <send_packet+0x154>)
    b9e8:	0018      	movs	r0, r3
    b9ea:	4b0e      	ldr	r3, [pc, #56]	; (ba24 <send_packet+0x158>)
    b9ec:	4798      	blx	r3
		vesc_usart_time = millis();
    b9ee:	4b06      	ldr	r3, [pc, #24]	; (ba08 <send_packet+0x13c>)
    b9f0:	4798      	blx	r3
    b9f2:	0002      	movs	r2, r0
    b9f4:	4b05      	ldr	r3, [pc, #20]	; (ba0c <send_packet+0x140>)
    b9f6:	601a      	str	r2, [r3, #0]
	}
}
    b9f8:	46c0      	nop			; (mov r8, r8)
    b9fa:	46bd      	mov	sp, r7
    b9fc:	b005      	add	sp, #20
    b9fe:	bc90      	pop	{r4, r7}
    ba00:	bc08      	pop	{r3}
    ba02:	b004      	add	sp, #16
    ba04:	4718      	bx	r3
    ba06:	46c0      	nop			; (mov r8, r8)
    ba08:	0000b015 	.word	0x0000b015
    ba0c:	20000364 	.word	0x20000364
    ba10:	200000ac 	.word	0x200000ac
    ba14:	20000368 	.word	0x20000368
    ba18:	00000205 	.word	0x00000205
    ba1c:	20000510 	.word	0x20000510
    ba20:	20000718 	.word	0x20000718
    ba24:	000063bd 	.word	0x000063bd

0000ba28 <process_recieved_packet>:

void process_recieved_packet(){
    ba28:	b580      	push	{r7, lr}
    ba2a:	b082      	sub	sp, #8
    ba2c:	af00      	add	r7, sp, #0
		uint8_t packet_id = vesc_revieve_packet.payload[0];
    ba2e:	1dfb      	adds	r3, r7, #7
    ba30:	4abc      	ldr	r2, [pc, #752]	; (bd24 <process_recieved_packet+0x2fc>)
    ba32:	78d2      	ldrb	r2, [r2, #3]
    ba34:	701a      	strb	r2, [r3, #0]
		if(packet_id == COMM_FW_VERSION){ // Bytes are the same for all FW's
    ba36:	4bbc      	ldr	r3, [pc, #752]	; (bd28 <process_recieved_packet+0x300>)
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	1dfa      	adds	r2, r7, #7
    ba3c:	7812      	ldrb	r2, [r2, #0]
    ba3e:	429a      	cmp	r2, r3
    ba40:	d10b      	bne.n	ba5a <process_recieved_packet+0x32>
			latest_vesc_vals.FW_VERSION_MAJOR = (uint16_t)vesc_revieve_packet.payload[1];
    ba42:	4bb8      	ldr	r3, [pc, #736]	; (bd24 <process_recieved_packet+0x2fc>)
    ba44:	7919      	ldrb	r1, [r3, #4]
    ba46:	4bb9      	ldr	r3, [pc, #740]	; (bd2c <process_recieved_packet+0x304>)
    ba48:	2234      	movs	r2, #52	; 0x34
    ba4a:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.FW_VERSION_MINOR = (uint16_t)vesc_revieve_packet.payload[2];
    ba4c:	4bb5      	ldr	r3, [pc, #724]	; (bd24 <process_recieved_packet+0x2fc>)
    ba4e:	7959      	ldrb	r1, [r3, #5]
    ba50:	4bb6      	ldr	r3, [pc, #728]	; (bd2c <process_recieved_packet+0x304>)
    ba52:	2235      	movs	r2, #53	; 0x35
    ba54:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
		} else if(packet_id == COMM_GET_IMU_DATA){ 
			// TODO
	}
}
    ba56:	f000 ff52 	bl	c8fe <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_VALUES){
    ba5a:	4bb5      	ldr	r3, [pc, #724]	; (bd30 <process_recieved_packet+0x308>)
    ba5c:	781b      	ldrb	r3, [r3, #0]
    ba5e:	1dfa      	adds	r2, r7, #7
    ba60:	7812      	ldrb	r2, [r2, #0]
    ba62:	429a      	cmp	r2, r3
    ba64:	d000      	beq.n	ba68 <process_recieved_packet+0x40>
    ba66:	e17f      	b.n	bd68 <process_recieved_packet+0x340>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[GET_VALUES_FET_TEMP] << 8) | vesc_revieve_packet.payload[GET_VALUES_FET_TEMP+1];
    ba68:	4bb2      	ldr	r3, [pc, #712]	; (bd34 <process_recieved_packet+0x30c>)
    ba6a:	781b      	ldrb	r3, [r3, #0]
    ba6c:	001a      	movs	r2, r3
    ba6e:	4bad      	ldr	r3, [pc, #692]	; (bd24 <process_recieved_packet+0x2fc>)
    ba70:	189b      	adds	r3, r3, r2
    ba72:	78db      	ldrb	r3, [r3, #3]
    ba74:	021b      	lsls	r3, r3, #8
    ba76:	b21a      	sxth	r2, r3
    ba78:	4bae      	ldr	r3, [pc, #696]	; (bd34 <process_recieved_packet+0x30c>)
    ba7a:	781b      	ldrb	r3, [r3, #0]
    ba7c:	3301      	adds	r3, #1
    ba7e:	49a9      	ldr	r1, [pc, #676]	; (bd24 <process_recieved_packet+0x2fc>)
    ba80:	18cb      	adds	r3, r1, r3
    ba82:	78db      	ldrb	r3, [r3, #3]
    ba84:	b21b      	sxth	r3, r3
    ba86:	4313      	orrs	r3, r2
    ba88:	b21a      	sxth	r2, r3
    ba8a:	4ba8      	ldr	r3, [pc, #672]	; (bd2c <process_recieved_packet+0x304>)
    ba8c:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+3];
    ba8e:	4baa      	ldr	r3, [pc, #680]	; (bd38 <process_recieved_packet+0x310>)
    ba90:	781b      	ldrb	r3, [r3, #0]
    ba92:	001a      	movs	r2, r3
    ba94:	4ba3      	ldr	r3, [pc, #652]	; (bd24 <process_recieved_packet+0x2fc>)
    ba96:	189b      	adds	r3, r3, r2
    ba98:	78db      	ldrb	r3, [r3, #3]
    ba9a:	061a      	lsls	r2, r3, #24
    ba9c:	4ba6      	ldr	r3, [pc, #664]	; (bd38 <process_recieved_packet+0x310>)
    ba9e:	781b      	ldrb	r3, [r3, #0]
    baa0:	3301      	adds	r3, #1
    baa2:	49a0      	ldr	r1, [pc, #640]	; (bd24 <process_recieved_packet+0x2fc>)
    baa4:	18cb      	adds	r3, r1, r3
    baa6:	78db      	ldrb	r3, [r3, #3]
    baa8:	041b      	lsls	r3, r3, #16
    baaa:	431a      	orrs	r2, r3
    baac:	4ba2      	ldr	r3, [pc, #648]	; (bd38 <process_recieved_packet+0x310>)
    baae:	781b      	ldrb	r3, [r3, #0]
    bab0:	3302      	adds	r3, #2
    bab2:	499c      	ldr	r1, [pc, #624]	; (bd24 <process_recieved_packet+0x2fc>)
    bab4:	18cb      	adds	r3, r1, r3
    bab6:	78db      	ldrb	r3, [r3, #3]
    bab8:	021b      	lsls	r3, r3, #8
    baba:	4313      	orrs	r3, r2
    babc:	4a9e      	ldr	r2, [pc, #632]	; (bd38 <process_recieved_packet+0x310>)
    babe:	7812      	ldrb	r2, [r2, #0]
    bac0:	3203      	adds	r2, #3
    bac2:	4998      	ldr	r1, [pc, #608]	; (bd24 <process_recieved_packet+0x2fc>)
    bac4:	188a      	adds	r2, r1, r2
    bac6:	78d2      	ldrb	r2, [r2, #3]
    bac8:	431a      	orrs	r2, r3
    baca:	4b98      	ldr	r3, [pc, #608]	; (bd2c <process_recieved_packet+0x304>)
    bacc:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[GET_VALUES_IN_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_CURR+3];
    bace:	4b9b      	ldr	r3, [pc, #620]	; (bd3c <process_recieved_packet+0x314>)
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	001a      	movs	r2, r3
    bad4:	4b93      	ldr	r3, [pc, #588]	; (bd24 <process_recieved_packet+0x2fc>)
    bad6:	189b      	adds	r3, r3, r2
    bad8:	78db      	ldrb	r3, [r3, #3]
    bada:	061a      	lsls	r2, r3, #24
    badc:	4b97      	ldr	r3, [pc, #604]	; (bd3c <process_recieved_packet+0x314>)
    bade:	781b      	ldrb	r3, [r3, #0]
    bae0:	3301      	adds	r3, #1
    bae2:	4990      	ldr	r1, [pc, #576]	; (bd24 <process_recieved_packet+0x2fc>)
    bae4:	18cb      	adds	r3, r1, r3
    bae6:	78db      	ldrb	r3, [r3, #3]
    bae8:	041b      	lsls	r3, r3, #16
    baea:	431a      	orrs	r2, r3
    baec:	4b93      	ldr	r3, [pc, #588]	; (bd3c <process_recieved_packet+0x314>)
    baee:	781b      	ldrb	r3, [r3, #0]
    baf0:	3302      	adds	r3, #2
    baf2:	498c      	ldr	r1, [pc, #560]	; (bd24 <process_recieved_packet+0x2fc>)
    baf4:	18cb      	adds	r3, r1, r3
    baf6:	78db      	ldrb	r3, [r3, #3]
    baf8:	021b      	lsls	r3, r3, #8
    bafa:	4313      	orrs	r3, r2
    bafc:	4a8f      	ldr	r2, [pc, #572]	; (bd3c <process_recieved_packet+0x314>)
    bafe:	7812      	ldrb	r2, [r2, #0]
    bb00:	3203      	adds	r2, #3
    bb02:	4988      	ldr	r1, [pc, #544]	; (bd24 <process_recieved_packet+0x2fc>)
    bb04:	188a      	adds	r2, r1, r2
    bb06:	78d2      	ldrb	r2, [r2, #3]
    bb08:	431a      	orrs	r2, r3
    bb0a:	4b88      	ldr	r3, [pc, #544]	; (bd2c <process_recieved_packet+0x304>)
    bb0c:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[GET_VALUES_DUTY] << 8) | vesc_revieve_packet.payload[GET_VALUES_DUTY+1];
    bb0e:	4b8c      	ldr	r3, [pc, #560]	; (bd40 <process_recieved_packet+0x318>)
    bb10:	781b      	ldrb	r3, [r3, #0]
    bb12:	001a      	movs	r2, r3
    bb14:	4b83      	ldr	r3, [pc, #524]	; (bd24 <process_recieved_packet+0x2fc>)
    bb16:	189b      	adds	r3, r3, r2
    bb18:	78db      	ldrb	r3, [r3, #3]
    bb1a:	021b      	lsls	r3, r3, #8
    bb1c:	b21a      	sxth	r2, r3
    bb1e:	4b88      	ldr	r3, [pc, #544]	; (bd40 <process_recieved_packet+0x318>)
    bb20:	781b      	ldrb	r3, [r3, #0]
    bb22:	3301      	adds	r3, #1
    bb24:	497f      	ldr	r1, [pc, #508]	; (bd24 <process_recieved_packet+0x2fc>)
    bb26:	18cb      	adds	r3, r1, r3
    bb28:	78db      	ldrb	r3, [r3, #3]
    bb2a:	b21b      	sxth	r3, r3
    bb2c:	4313      	orrs	r3, r2
    bb2e:	b21a      	sxth	r2, r3
    bb30:	4b7e      	ldr	r3, [pc, #504]	; (bd2c <process_recieved_packet+0x304>)
    bb32:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[GET_VALUES_RPM] << 24) | (vesc_revieve_packet.payload[GET_VALUES_RPM+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_RPM+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_RPM+3];
    bb34:	4b83      	ldr	r3, [pc, #524]	; (bd44 <process_recieved_packet+0x31c>)
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	001a      	movs	r2, r3
    bb3a:	4b7a      	ldr	r3, [pc, #488]	; (bd24 <process_recieved_packet+0x2fc>)
    bb3c:	189b      	adds	r3, r3, r2
    bb3e:	78db      	ldrb	r3, [r3, #3]
    bb40:	061a      	lsls	r2, r3, #24
    bb42:	4b80      	ldr	r3, [pc, #512]	; (bd44 <process_recieved_packet+0x31c>)
    bb44:	781b      	ldrb	r3, [r3, #0]
    bb46:	3301      	adds	r3, #1
    bb48:	4976      	ldr	r1, [pc, #472]	; (bd24 <process_recieved_packet+0x2fc>)
    bb4a:	18cb      	adds	r3, r1, r3
    bb4c:	78db      	ldrb	r3, [r3, #3]
    bb4e:	041b      	lsls	r3, r3, #16
    bb50:	431a      	orrs	r2, r3
    bb52:	4b7c      	ldr	r3, [pc, #496]	; (bd44 <process_recieved_packet+0x31c>)
    bb54:	781b      	ldrb	r3, [r3, #0]
    bb56:	3302      	adds	r3, #2
    bb58:	4972      	ldr	r1, [pc, #456]	; (bd24 <process_recieved_packet+0x2fc>)
    bb5a:	18cb      	adds	r3, r1, r3
    bb5c:	78db      	ldrb	r3, [r3, #3]
    bb5e:	021b      	lsls	r3, r3, #8
    bb60:	4313      	orrs	r3, r2
    bb62:	4a78      	ldr	r2, [pc, #480]	; (bd44 <process_recieved_packet+0x31c>)
    bb64:	7812      	ldrb	r2, [r2, #0]
    bb66:	3203      	adds	r2, #3
    bb68:	496e      	ldr	r1, [pc, #440]	; (bd24 <process_recieved_packet+0x2fc>)
    bb6a:	188a      	adds	r2, r1, r2
    bb6c:	78d2      	ldrb	r2, [r2, #3]
    bb6e:	431a      	orrs	r2, r3
    bb70:	4b6e      	ldr	r3, [pc, #440]	; (bd2c <process_recieved_packet+0x304>)
    bb72:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[GET_VALUES_IN_VOLT] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_VOLT+1];
    bb74:	4b74      	ldr	r3, [pc, #464]	; (bd48 <process_recieved_packet+0x320>)
    bb76:	781b      	ldrb	r3, [r3, #0]
    bb78:	001a      	movs	r2, r3
    bb7a:	4b6a      	ldr	r3, [pc, #424]	; (bd24 <process_recieved_packet+0x2fc>)
    bb7c:	189b      	adds	r3, r3, r2
    bb7e:	78db      	ldrb	r3, [r3, #3]
    bb80:	021b      	lsls	r3, r3, #8
    bb82:	b21a      	sxth	r2, r3
    bb84:	4b70      	ldr	r3, [pc, #448]	; (bd48 <process_recieved_packet+0x320>)
    bb86:	781b      	ldrb	r3, [r3, #0]
    bb88:	3301      	adds	r3, #1
    bb8a:	4966      	ldr	r1, [pc, #408]	; (bd24 <process_recieved_packet+0x2fc>)
    bb8c:	18cb      	adds	r3, r1, r3
    bb8e:	78db      	ldrb	r3, [r3, #3]
    bb90:	b21b      	sxth	r3, r3
    bb92:	4313      	orrs	r3, r2
    bb94:	b21a      	sxth	r2, r3
    bb96:	4b65      	ldr	r3, [pc, #404]	; (bd2c <process_recieved_packet+0x304>)
    bb98:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[GET_VALUES_AH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_USED+3])/100;
    bb9a:	4b6c      	ldr	r3, [pc, #432]	; (bd4c <process_recieved_packet+0x324>)
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	001a      	movs	r2, r3
    bba0:	4b60      	ldr	r3, [pc, #384]	; (bd24 <process_recieved_packet+0x2fc>)
    bba2:	189b      	adds	r3, r3, r2
    bba4:	78db      	ldrb	r3, [r3, #3]
    bba6:	061a      	lsls	r2, r3, #24
    bba8:	4b68      	ldr	r3, [pc, #416]	; (bd4c <process_recieved_packet+0x324>)
    bbaa:	781b      	ldrb	r3, [r3, #0]
    bbac:	3301      	adds	r3, #1
    bbae:	495d      	ldr	r1, [pc, #372]	; (bd24 <process_recieved_packet+0x2fc>)
    bbb0:	18cb      	adds	r3, r1, r3
    bbb2:	78db      	ldrb	r3, [r3, #3]
    bbb4:	041b      	lsls	r3, r3, #16
    bbb6:	431a      	orrs	r2, r3
    bbb8:	4b64      	ldr	r3, [pc, #400]	; (bd4c <process_recieved_packet+0x324>)
    bbba:	781b      	ldrb	r3, [r3, #0]
    bbbc:	3302      	adds	r3, #2
    bbbe:	4959      	ldr	r1, [pc, #356]	; (bd24 <process_recieved_packet+0x2fc>)
    bbc0:	18cb      	adds	r3, r1, r3
    bbc2:	78db      	ldrb	r3, [r3, #3]
    bbc4:	021b      	lsls	r3, r3, #8
    bbc6:	4313      	orrs	r3, r2
    bbc8:	4a60      	ldr	r2, [pc, #384]	; (bd4c <process_recieved_packet+0x324>)
    bbca:	7812      	ldrb	r2, [r2, #0]
    bbcc:	3203      	adds	r2, #3
    bbce:	4955      	ldr	r1, [pc, #340]	; (bd24 <process_recieved_packet+0x2fc>)
    bbd0:	188a      	adds	r2, r1, r2
    bbd2:	78d2      	ldrb	r2, [r2, #3]
    bbd4:	431a      	orrs	r2, r3
    bbd6:	4b5e      	ldr	r3, [pc, #376]	; (bd50 <process_recieved_packet+0x328>)
    bbd8:	2164      	movs	r1, #100	; 0x64
    bbda:	0010      	movs	r0, r2
    bbdc:	4798      	blx	r3
    bbde:	0003      	movs	r3, r0
    bbe0:	001a      	movs	r2, r3
    bbe2:	4b52      	ldr	r3, [pc, #328]	; (bd2c <process_recieved_packet+0x304>)
    bbe4:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_AH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+3])/100;
    bbe6:	4b5b      	ldr	r3, [pc, #364]	; (bd54 <process_recieved_packet+0x32c>)
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	001a      	movs	r2, r3
    bbec:	4b4d      	ldr	r3, [pc, #308]	; (bd24 <process_recieved_packet+0x2fc>)
    bbee:	189b      	adds	r3, r3, r2
    bbf0:	78db      	ldrb	r3, [r3, #3]
    bbf2:	061a      	lsls	r2, r3, #24
    bbf4:	4b57      	ldr	r3, [pc, #348]	; (bd54 <process_recieved_packet+0x32c>)
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	3301      	adds	r3, #1
    bbfa:	494a      	ldr	r1, [pc, #296]	; (bd24 <process_recieved_packet+0x2fc>)
    bbfc:	18cb      	adds	r3, r1, r3
    bbfe:	78db      	ldrb	r3, [r3, #3]
    bc00:	041b      	lsls	r3, r3, #16
    bc02:	431a      	orrs	r2, r3
    bc04:	4b53      	ldr	r3, [pc, #332]	; (bd54 <process_recieved_packet+0x32c>)
    bc06:	781b      	ldrb	r3, [r3, #0]
    bc08:	3302      	adds	r3, #2
    bc0a:	4946      	ldr	r1, [pc, #280]	; (bd24 <process_recieved_packet+0x2fc>)
    bc0c:	18cb      	adds	r3, r1, r3
    bc0e:	78db      	ldrb	r3, [r3, #3]
    bc10:	021b      	lsls	r3, r3, #8
    bc12:	4313      	orrs	r3, r2
    bc14:	4a4f      	ldr	r2, [pc, #316]	; (bd54 <process_recieved_packet+0x32c>)
    bc16:	7812      	ldrb	r2, [r2, #0]
    bc18:	3203      	adds	r2, #3
    bc1a:	4942      	ldr	r1, [pc, #264]	; (bd24 <process_recieved_packet+0x2fc>)
    bc1c:	188a      	adds	r2, r1, r2
    bc1e:	78d2      	ldrb	r2, [r2, #3]
    bc20:	431a      	orrs	r2, r3
    bc22:	4b4b      	ldr	r3, [pc, #300]	; (bd50 <process_recieved_packet+0x328>)
    bc24:	2164      	movs	r1, #100	; 0x64
    bc26:	0010      	movs	r0, r2
    bc28:	4798      	blx	r3
    bc2a:	0003      	movs	r3, r0
    bc2c:	001a      	movs	r2, r3
    bc2e:	4b3f      	ldr	r3, [pc, #252]	; (bd2c <process_recieved_packet+0x304>)
    bc30:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[GET_VALUES_WH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_USED+3])/100;
    bc32:	4b49      	ldr	r3, [pc, #292]	; (bd58 <process_recieved_packet+0x330>)
    bc34:	781b      	ldrb	r3, [r3, #0]
    bc36:	001a      	movs	r2, r3
    bc38:	4b3a      	ldr	r3, [pc, #232]	; (bd24 <process_recieved_packet+0x2fc>)
    bc3a:	189b      	adds	r3, r3, r2
    bc3c:	78db      	ldrb	r3, [r3, #3]
    bc3e:	061a      	lsls	r2, r3, #24
    bc40:	4b45      	ldr	r3, [pc, #276]	; (bd58 <process_recieved_packet+0x330>)
    bc42:	781b      	ldrb	r3, [r3, #0]
    bc44:	3301      	adds	r3, #1
    bc46:	4937      	ldr	r1, [pc, #220]	; (bd24 <process_recieved_packet+0x2fc>)
    bc48:	18cb      	adds	r3, r1, r3
    bc4a:	78db      	ldrb	r3, [r3, #3]
    bc4c:	041b      	lsls	r3, r3, #16
    bc4e:	431a      	orrs	r2, r3
    bc50:	4b41      	ldr	r3, [pc, #260]	; (bd58 <process_recieved_packet+0x330>)
    bc52:	781b      	ldrb	r3, [r3, #0]
    bc54:	3302      	adds	r3, #2
    bc56:	4933      	ldr	r1, [pc, #204]	; (bd24 <process_recieved_packet+0x2fc>)
    bc58:	18cb      	adds	r3, r1, r3
    bc5a:	78db      	ldrb	r3, [r3, #3]
    bc5c:	021b      	lsls	r3, r3, #8
    bc5e:	4313      	orrs	r3, r2
    bc60:	4a3d      	ldr	r2, [pc, #244]	; (bd58 <process_recieved_packet+0x330>)
    bc62:	7812      	ldrb	r2, [r2, #0]
    bc64:	3203      	adds	r2, #3
    bc66:	492f      	ldr	r1, [pc, #188]	; (bd24 <process_recieved_packet+0x2fc>)
    bc68:	188a      	adds	r2, r1, r2
    bc6a:	78d2      	ldrb	r2, [r2, #3]
    bc6c:	431a      	orrs	r2, r3
    bc6e:	4b38      	ldr	r3, [pc, #224]	; (bd50 <process_recieved_packet+0x328>)
    bc70:	2164      	movs	r1, #100	; 0x64
    bc72:	0010      	movs	r0, r2
    bc74:	4798      	blx	r3
    bc76:	0003      	movs	r3, r0
    bc78:	001a      	movs	r2, r3
    bc7a:	4b2c      	ldr	r3, [pc, #176]	; (bd2c <process_recieved_packet+0x304>)
    bc7c:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_WH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+3])/100;
    bc7e:	4b37      	ldr	r3, [pc, #220]	; (bd5c <process_recieved_packet+0x334>)
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	001a      	movs	r2, r3
    bc84:	4b27      	ldr	r3, [pc, #156]	; (bd24 <process_recieved_packet+0x2fc>)
    bc86:	189b      	adds	r3, r3, r2
    bc88:	78db      	ldrb	r3, [r3, #3]
    bc8a:	061a      	lsls	r2, r3, #24
    bc8c:	4b33      	ldr	r3, [pc, #204]	; (bd5c <process_recieved_packet+0x334>)
    bc8e:	781b      	ldrb	r3, [r3, #0]
    bc90:	3301      	adds	r3, #1
    bc92:	4924      	ldr	r1, [pc, #144]	; (bd24 <process_recieved_packet+0x2fc>)
    bc94:	18cb      	adds	r3, r1, r3
    bc96:	78db      	ldrb	r3, [r3, #3]
    bc98:	041b      	lsls	r3, r3, #16
    bc9a:	431a      	orrs	r2, r3
    bc9c:	4b2f      	ldr	r3, [pc, #188]	; (bd5c <process_recieved_packet+0x334>)
    bc9e:	781b      	ldrb	r3, [r3, #0]
    bca0:	3302      	adds	r3, #2
    bca2:	4920      	ldr	r1, [pc, #128]	; (bd24 <process_recieved_packet+0x2fc>)
    bca4:	18cb      	adds	r3, r1, r3
    bca6:	78db      	ldrb	r3, [r3, #3]
    bca8:	021b      	lsls	r3, r3, #8
    bcaa:	4313      	orrs	r3, r2
    bcac:	4a2b      	ldr	r2, [pc, #172]	; (bd5c <process_recieved_packet+0x334>)
    bcae:	7812      	ldrb	r2, [r2, #0]
    bcb0:	3203      	adds	r2, #3
    bcb2:	491c      	ldr	r1, [pc, #112]	; (bd24 <process_recieved_packet+0x2fc>)
    bcb4:	188a      	adds	r2, r1, r2
    bcb6:	78d2      	ldrb	r2, [r2, #3]
    bcb8:	431a      	orrs	r2, r3
    bcba:	4b25      	ldr	r3, [pc, #148]	; (bd50 <process_recieved_packet+0x328>)
    bcbc:	2164      	movs	r1, #100	; 0x64
    bcbe:	0010      	movs	r0, r2
    bcc0:	4798      	blx	r3
    bcc2:	0003      	movs	r3, r0
    bcc4:	001a      	movs	r2, r3
    bcc6:	4b19      	ldr	r3, [pc, #100]	; (bd2c <process_recieved_packet+0x304>)
    bcc8:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[GET_VALUES_TACH] << 24) | (vesc_revieve_packet.payload[GET_VALUES_TACH+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_TACH+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_TACH+2];
    bcca:	4b25      	ldr	r3, [pc, #148]	; (bd60 <process_recieved_packet+0x338>)
    bccc:	781b      	ldrb	r3, [r3, #0]
    bcce:	001a      	movs	r2, r3
    bcd0:	4b14      	ldr	r3, [pc, #80]	; (bd24 <process_recieved_packet+0x2fc>)
    bcd2:	189b      	adds	r3, r3, r2
    bcd4:	78db      	ldrb	r3, [r3, #3]
    bcd6:	061a      	lsls	r2, r3, #24
    bcd8:	4b21      	ldr	r3, [pc, #132]	; (bd60 <process_recieved_packet+0x338>)
    bcda:	781b      	ldrb	r3, [r3, #0]
    bcdc:	3301      	adds	r3, #1
    bcde:	4911      	ldr	r1, [pc, #68]	; (bd24 <process_recieved_packet+0x2fc>)
    bce0:	18cb      	adds	r3, r1, r3
    bce2:	78db      	ldrb	r3, [r3, #3]
    bce4:	041b      	lsls	r3, r3, #16
    bce6:	431a      	orrs	r2, r3
    bce8:	4b1d      	ldr	r3, [pc, #116]	; (bd60 <process_recieved_packet+0x338>)
    bcea:	781b      	ldrb	r3, [r3, #0]
    bcec:	3302      	adds	r3, #2
    bcee:	490d      	ldr	r1, [pc, #52]	; (bd24 <process_recieved_packet+0x2fc>)
    bcf0:	18cb      	adds	r3, r1, r3
    bcf2:	78db      	ldrb	r3, [r3, #3]
    bcf4:	021b      	lsls	r3, r3, #8
    bcf6:	4313      	orrs	r3, r2
    bcf8:	4a19      	ldr	r2, [pc, #100]	; (bd60 <process_recieved_packet+0x338>)
    bcfa:	7812      	ldrb	r2, [r2, #0]
    bcfc:	3202      	adds	r2, #2
    bcfe:	4909      	ldr	r1, [pc, #36]	; (bd24 <process_recieved_packet+0x2fc>)
    bd00:	188a      	adds	r2, r1, r2
    bd02:	78d2      	ldrb	r2, [r2, #3]
    bd04:	431a      	orrs	r2, r3
    bd06:	4b09      	ldr	r3, [pc, #36]	; (bd2c <process_recieved_packet+0x304>)
    bd08:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[GET_VALUES_FAULT];
    bd0a:	4b16      	ldr	r3, [pc, #88]	; (bd64 <process_recieved_packet+0x33c>)
    bd0c:	781b      	ldrb	r3, [r3, #0]
    bd0e:	001a      	movs	r2, r3
    bd10:	4b04      	ldr	r3, [pc, #16]	; (bd24 <process_recieved_packet+0x2fc>)
    bd12:	189b      	adds	r3, r3, r2
    bd14:	78db      	ldrb	r3, [r3, #3]
    bd16:	b259      	sxtb	r1, r3
    bd18:	4b04      	ldr	r3, [pc, #16]	; (bd2c <process_recieved_packet+0x304>)
    bd1a:	222c      	movs	r2, #44	; 0x2c
    bd1c:	5499      	strb	r1, [r3, r2]
}
    bd1e:	f000 fdee 	bl	c8fe <process_recieved_packet+0xed6>
    bd22:	46c0      	nop			; (mov r8, r8)
    bd24:	20000ce0 	.word	0x20000ce0
    bd28:	2000033a 	.word	0x2000033a
    bd2c:	20000958 	.word	0x20000958
    bd30:	2000033b 	.word	0x2000033b
    bd34:	20000343 	.word	0x20000343
    bd38:	20000344 	.word	0x20000344
    bd3c:	20000345 	.word	0x20000345
    bd40:	20000346 	.word	0x20000346
    bd44:	20000347 	.word	0x20000347
    bd48:	20000348 	.word	0x20000348
    bd4c:	20000349 	.word	0x20000349
    bd50:	0001411d 	.word	0x0001411d
    bd54:	2000034a 	.word	0x2000034a
    bd58:	2000034b 	.word	0x2000034b
    bd5c:	2000034c 	.word	0x2000034c
    bd60:	2000034d 	.word	0x2000034d
    bd64:	2000034e 	.word	0x2000034e
		} else if(packet_id == COMM_GET_MCCONF){
    bd68:	4bfd      	ldr	r3, [pc, #1012]	; (c160 <process_recieved_packet+0x738>)
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	1dfa      	adds	r2, r7, #7
    bd6e:	7812      	ldrb	r2, [r2, #0]
    bd70:	429a      	cmp	r2, r3
    bd72:	d001      	beq.n	bd78 <process_recieved_packet+0x350>
    bd74:	f000 fc58 	bl	c628 <process_recieved_packet+0xc00>
			if(esc_fw == FW_2v18){
    bd78:	4bfa      	ldr	r3, [pc, #1000]	; (c164 <process_recieved_packet+0x73c>)
    bd7a:	781b      	ldrb	r3, [r3, #0]
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	d000      	beq.n	bd82 <process_recieved_packet+0x35a>
    bd80:	e32a      	b.n	c3d8 <process_recieved_packet+0x9b0>
				mcconf_limits.motor_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+3])/1000;
    bd82:	4bf9      	ldr	r3, [pc, #996]	; (c168 <process_recieved_packet+0x740>)
    bd84:	781b      	ldrb	r3, [r3, #0]
    bd86:	001a      	movs	r2, r3
    bd88:	4bf8      	ldr	r3, [pc, #992]	; (c16c <process_recieved_packet+0x744>)
    bd8a:	189b      	adds	r3, r3, r2
    bd8c:	78db      	ldrb	r3, [r3, #3]
    bd8e:	061a      	lsls	r2, r3, #24
    bd90:	4bf5      	ldr	r3, [pc, #980]	; (c168 <process_recieved_packet+0x740>)
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	3301      	adds	r3, #1
    bd96:	49f5      	ldr	r1, [pc, #980]	; (c16c <process_recieved_packet+0x744>)
    bd98:	18cb      	adds	r3, r1, r3
    bd9a:	78db      	ldrb	r3, [r3, #3]
    bd9c:	041b      	lsls	r3, r3, #16
    bd9e:	431a      	orrs	r2, r3
    bda0:	4bf1      	ldr	r3, [pc, #964]	; (c168 <process_recieved_packet+0x740>)
    bda2:	781b      	ldrb	r3, [r3, #0]
    bda4:	3302      	adds	r3, #2
    bda6:	49f1      	ldr	r1, [pc, #964]	; (c16c <process_recieved_packet+0x744>)
    bda8:	18cb      	adds	r3, r1, r3
    bdaa:	78db      	ldrb	r3, [r3, #3]
    bdac:	021b      	lsls	r3, r3, #8
    bdae:	4313      	orrs	r3, r2
    bdb0:	4aed      	ldr	r2, [pc, #948]	; (c168 <process_recieved_packet+0x740>)
    bdb2:	7812      	ldrb	r2, [r2, #0]
    bdb4:	3203      	adds	r2, #3
    bdb6:	49ed      	ldr	r1, [pc, #948]	; (c16c <process_recieved_packet+0x744>)
    bdb8:	188a      	adds	r2, r1, r2
    bdba:	78d2      	ldrb	r2, [r2, #3]
    bdbc:	4313      	orrs	r3, r2
    bdbe:	0018      	movs	r0, r3
    bdc0:	4beb      	ldr	r3, [pc, #940]	; (c170 <process_recieved_packet+0x748>)
    bdc2:	22fa      	movs	r2, #250	; 0xfa
    bdc4:	0091      	lsls	r1, r2, #2
    bdc6:	4798      	blx	r3
    bdc8:	0003      	movs	r3, r0
    bdca:	001a      	movs	r2, r3
    bdcc:	4be9      	ldr	r3, [pc, #932]	; (c174 <process_recieved_packet+0x74c>)
    bdce:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+3])/1000;
    bdd0:	4be9      	ldr	r3, [pc, #932]	; (c178 <process_recieved_packet+0x750>)
    bdd2:	781b      	ldrb	r3, [r3, #0]
    bdd4:	001a      	movs	r2, r3
    bdd6:	4be5      	ldr	r3, [pc, #916]	; (c16c <process_recieved_packet+0x744>)
    bdd8:	189b      	adds	r3, r3, r2
    bdda:	78db      	ldrb	r3, [r3, #3]
    bddc:	061a      	lsls	r2, r3, #24
    bdde:	4be6      	ldr	r3, [pc, #920]	; (c178 <process_recieved_packet+0x750>)
    bde0:	781b      	ldrb	r3, [r3, #0]
    bde2:	3301      	adds	r3, #1
    bde4:	49e1      	ldr	r1, [pc, #900]	; (c16c <process_recieved_packet+0x744>)
    bde6:	18cb      	adds	r3, r1, r3
    bde8:	78db      	ldrb	r3, [r3, #3]
    bdea:	041b      	lsls	r3, r3, #16
    bdec:	431a      	orrs	r2, r3
    bdee:	4be2      	ldr	r3, [pc, #904]	; (c178 <process_recieved_packet+0x750>)
    bdf0:	781b      	ldrb	r3, [r3, #0]
    bdf2:	3302      	adds	r3, #2
    bdf4:	49dd      	ldr	r1, [pc, #884]	; (c16c <process_recieved_packet+0x744>)
    bdf6:	18cb      	adds	r3, r1, r3
    bdf8:	78db      	ldrb	r3, [r3, #3]
    bdfa:	021b      	lsls	r3, r3, #8
    bdfc:	4313      	orrs	r3, r2
    bdfe:	4ade      	ldr	r2, [pc, #888]	; (c178 <process_recieved_packet+0x750>)
    be00:	7812      	ldrb	r2, [r2, #0]
    be02:	3203      	adds	r2, #3
    be04:	49d9      	ldr	r1, [pc, #868]	; (c16c <process_recieved_packet+0x744>)
    be06:	188a      	adds	r2, r1, r2
    be08:	78d2      	ldrb	r2, [r2, #3]
    be0a:	4313      	orrs	r3, r2
    be0c:	0018      	movs	r0, r3
    be0e:	4bd8      	ldr	r3, [pc, #864]	; (c170 <process_recieved_packet+0x748>)
    be10:	22fa      	movs	r2, #250	; 0xfa
    be12:	0091      	lsls	r1, r2, #2
    be14:	4798      	blx	r3
    be16:	0003      	movs	r3, r0
    be18:	001a      	movs	r2, r3
    be1a:	4bd6      	ldr	r3, [pc, #856]	; (c174 <process_recieved_packet+0x74c>)
    be1c:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+3])/1000;
    be1e:	4bd7      	ldr	r3, [pc, #860]	; (c17c <process_recieved_packet+0x754>)
    be20:	781b      	ldrb	r3, [r3, #0]
    be22:	001a      	movs	r2, r3
    be24:	4bd1      	ldr	r3, [pc, #836]	; (c16c <process_recieved_packet+0x744>)
    be26:	189b      	adds	r3, r3, r2
    be28:	78db      	ldrb	r3, [r3, #3]
    be2a:	061a      	lsls	r2, r3, #24
    be2c:	4bd3      	ldr	r3, [pc, #844]	; (c17c <process_recieved_packet+0x754>)
    be2e:	781b      	ldrb	r3, [r3, #0]
    be30:	3301      	adds	r3, #1
    be32:	49ce      	ldr	r1, [pc, #824]	; (c16c <process_recieved_packet+0x744>)
    be34:	18cb      	adds	r3, r1, r3
    be36:	78db      	ldrb	r3, [r3, #3]
    be38:	041b      	lsls	r3, r3, #16
    be3a:	431a      	orrs	r2, r3
    be3c:	4bcf      	ldr	r3, [pc, #828]	; (c17c <process_recieved_packet+0x754>)
    be3e:	781b      	ldrb	r3, [r3, #0]
    be40:	3302      	adds	r3, #2
    be42:	49ca      	ldr	r1, [pc, #808]	; (c16c <process_recieved_packet+0x744>)
    be44:	18cb      	adds	r3, r1, r3
    be46:	78db      	ldrb	r3, [r3, #3]
    be48:	021b      	lsls	r3, r3, #8
    be4a:	4313      	orrs	r3, r2
    be4c:	4acb      	ldr	r2, [pc, #812]	; (c17c <process_recieved_packet+0x754>)
    be4e:	7812      	ldrb	r2, [r2, #0]
    be50:	3203      	adds	r2, #3
    be52:	49c6      	ldr	r1, [pc, #792]	; (c16c <process_recieved_packet+0x744>)
    be54:	188a      	adds	r2, r1, r2
    be56:	78d2      	ldrb	r2, [r2, #3]
    be58:	4313      	orrs	r3, r2
    be5a:	0018      	movs	r0, r3
    be5c:	4bc4      	ldr	r3, [pc, #784]	; (c170 <process_recieved_packet+0x748>)
    be5e:	22fa      	movs	r2, #250	; 0xfa
    be60:	0091      	lsls	r1, r2, #2
    be62:	4798      	blx	r3
    be64:	0003      	movs	r3, r0
    be66:	001a      	movs	r2, r3
    be68:	4bc2      	ldr	r3, [pc, #776]	; (c174 <process_recieved_packet+0x74c>)
    be6a:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+3])/1000;
    be6c:	4bc4      	ldr	r3, [pc, #784]	; (c180 <process_recieved_packet+0x758>)
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	001a      	movs	r2, r3
    be72:	4bbe      	ldr	r3, [pc, #760]	; (c16c <process_recieved_packet+0x744>)
    be74:	189b      	adds	r3, r3, r2
    be76:	78db      	ldrb	r3, [r3, #3]
    be78:	061a      	lsls	r2, r3, #24
    be7a:	4bc1      	ldr	r3, [pc, #772]	; (c180 <process_recieved_packet+0x758>)
    be7c:	781b      	ldrb	r3, [r3, #0]
    be7e:	3301      	adds	r3, #1
    be80:	49ba      	ldr	r1, [pc, #744]	; (c16c <process_recieved_packet+0x744>)
    be82:	18cb      	adds	r3, r1, r3
    be84:	78db      	ldrb	r3, [r3, #3]
    be86:	041b      	lsls	r3, r3, #16
    be88:	431a      	orrs	r2, r3
    be8a:	4bbd      	ldr	r3, [pc, #756]	; (c180 <process_recieved_packet+0x758>)
    be8c:	781b      	ldrb	r3, [r3, #0]
    be8e:	3302      	adds	r3, #2
    be90:	49b6      	ldr	r1, [pc, #728]	; (c16c <process_recieved_packet+0x744>)
    be92:	18cb      	adds	r3, r1, r3
    be94:	78db      	ldrb	r3, [r3, #3]
    be96:	021b      	lsls	r3, r3, #8
    be98:	4313      	orrs	r3, r2
    be9a:	4ab9      	ldr	r2, [pc, #740]	; (c180 <process_recieved_packet+0x758>)
    be9c:	7812      	ldrb	r2, [r2, #0]
    be9e:	3203      	adds	r2, #3
    bea0:	49b2      	ldr	r1, [pc, #712]	; (c16c <process_recieved_packet+0x744>)
    bea2:	188a      	adds	r2, r1, r2
    bea4:	78d2      	ldrb	r2, [r2, #3]
    bea6:	4313      	orrs	r3, r2
    bea8:	0018      	movs	r0, r3
    beaa:	4bb1      	ldr	r3, [pc, #708]	; (c170 <process_recieved_packet+0x748>)
    beac:	22fa      	movs	r2, #250	; 0xfa
    beae:	0091      	lsls	r1, r2, #2
    beb0:	4798      	blx	r3
    beb2:	0003      	movs	r3, r0
    beb4:	001a      	movs	r2, r3
    beb6:	4baf      	ldr	r3, [pc, #700]	; (c174 <process_recieved_packet+0x74c>)
    beb8:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+3])/1000;
    beba:	4bb2      	ldr	r3, [pc, #712]	; (c184 <process_recieved_packet+0x75c>)
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	001a      	movs	r2, r3
    bec0:	4baa      	ldr	r3, [pc, #680]	; (c16c <process_recieved_packet+0x744>)
    bec2:	189b      	adds	r3, r3, r2
    bec4:	78db      	ldrb	r3, [r3, #3]
    bec6:	061a      	lsls	r2, r3, #24
    bec8:	4bae      	ldr	r3, [pc, #696]	; (c184 <process_recieved_packet+0x75c>)
    beca:	781b      	ldrb	r3, [r3, #0]
    becc:	3301      	adds	r3, #1
    bece:	49a7      	ldr	r1, [pc, #668]	; (c16c <process_recieved_packet+0x744>)
    bed0:	18cb      	adds	r3, r1, r3
    bed2:	78db      	ldrb	r3, [r3, #3]
    bed4:	041b      	lsls	r3, r3, #16
    bed6:	431a      	orrs	r2, r3
    bed8:	4baa      	ldr	r3, [pc, #680]	; (c184 <process_recieved_packet+0x75c>)
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	3302      	adds	r3, #2
    bede:	49a3      	ldr	r1, [pc, #652]	; (c16c <process_recieved_packet+0x744>)
    bee0:	18cb      	adds	r3, r1, r3
    bee2:	78db      	ldrb	r3, [r3, #3]
    bee4:	021b      	lsls	r3, r3, #8
    bee6:	4313      	orrs	r3, r2
    bee8:	4aa6      	ldr	r2, [pc, #664]	; (c184 <process_recieved_packet+0x75c>)
    beea:	7812      	ldrb	r2, [r2, #0]
    beec:	3203      	adds	r2, #3
    beee:	499f      	ldr	r1, [pc, #636]	; (c16c <process_recieved_packet+0x744>)
    bef0:	188a      	adds	r2, r1, r2
    bef2:	78d2      	ldrb	r2, [r2, #3]
    bef4:	4313      	orrs	r3, r2
    bef6:	0018      	movs	r0, r3
    bef8:	4b9d      	ldr	r3, [pc, #628]	; (c170 <process_recieved_packet+0x748>)
    befa:	22fa      	movs	r2, #250	; 0xfa
    befc:	0091      	lsls	r1, r2, #2
    befe:	4798      	blx	r3
    bf00:	0003      	movs	r3, r0
    bf02:	001a      	movs	r2, r3
    bf04:	4b9b      	ldr	r3, [pc, #620]	; (c174 <process_recieved_packet+0x74c>)
    bf06:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+3])/1000;
    bf08:	4b9f      	ldr	r3, [pc, #636]	; (c188 <process_recieved_packet+0x760>)
    bf0a:	781b      	ldrb	r3, [r3, #0]
    bf0c:	001a      	movs	r2, r3
    bf0e:	4b97      	ldr	r3, [pc, #604]	; (c16c <process_recieved_packet+0x744>)
    bf10:	189b      	adds	r3, r3, r2
    bf12:	78db      	ldrb	r3, [r3, #3]
    bf14:	061a      	lsls	r2, r3, #24
    bf16:	4b9c      	ldr	r3, [pc, #624]	; (c188 <process_recieved_packet+0x760>)
    bf18:	781b      	ldrb	r3, [r3, #0]
    bf1a:	3301      	adds	r3, #1
    bf1c:	4993      	ldr	r1, [pc, #588]	; (c16c <process_recieved_packet+0x744>)
    bf1e:	18cb      	adds	r3, r1, r3
    bf20:	78db      	ldrb	r3, [r3, #3]
    bf22:	041b      	lsls	r3, r3, #16
    bf24:	431a      	orrs	r2, r3
    bf26:	4b98      	ldr	r3, [pc, #608]	; (c188 <process_recieved_packet+0x760>)
    bf28:	781b      	ldrb	r3, [r3, #0]
    bf2a:	3302      	adds	r3, #2
    bf2c:	498f      	ldr	r1, [pc, #572]	; (c16c <process_recieved_packet+0x744>)
    bf2e:	18cb      	adds	r3, r1, r3
    bf30:	78db      	ldrb	r3, [r3, #3]
    bf32:	021b      	lsls	r3, r3, #8
    bf34:	4313      	orrs	r3, r2
    bf36:	4a94      	ldr	r2, [pc, #592]	; (c188 <process_recieved_packet+0x760>)
    bf38:	7812      	ldrb	r2, [r2, #0]
    bf3a:	3203      	adds	r2, #3
    bf3c:	498b      	ldr	r1, [pc, #556]	; (c16c <process_recieved_packet+0x744>)
    bf3e:	188a      	adds	r2, r1, r2
    bf40:	78d2      	ldrb	r2, [r2, #3]
    bf42:	4313      	orrs	r3, r2
    bf44:	0018      	movs	r0, r3
    bf46:	4b8a      	ldr	r3, [pc, #552]	; (c170 <process_recieved_packet+0x748>)
    bf48:	22fa      	movs	r2, #250	; 0xfa
    bf4a:	0091      	lsls	r1, r2, #2
    bf4c:	4798      	blx	r3
    bf4e:	0003      	movs	r3, r0
    bf50:	001a      	movs	r2, r3
    bf52:	4b88      	ldr	r3, [pc, #544]	; (c174 <process_recieved_packet+0x74c>)
    bf54:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+3])/1000;
    bf56:	4b8d      	ldr	r3, [pc, #564]	; (c18c <process_recieved_packet+0x764>)
    bf58:	781b      	ldrb	r3, [r3, #0]
    bf5a:	001a      	movs	r2, r3
    bf5c:	4b83      	ldr	r3, [pc, #524]	; (c16c <process_recieved_packet+0x744>)
    bf5e:	189b      	adds	r3, r3, r2
    bf60:	78db      	ldrb	r3, [r3, #3]
    bf62:	061a      	lsls	r2, r3, #24
    bf64:	4b89      	ldr	r3, [pc, #548]	; (c18c <process_recieved_packet+0x764>)
    bf66:	781b      	ldrb	r3, [r3, #0]
    bf68:	3301      	adds	r3, #1
    bf6a:	4980      	ldr	r1, [pc, #512]	; (c16c <process_recieved_packet+0x744>)
    bf6c:	18cb      	adds	r3, r1, r3
    bf6e:	78db      	ldrb	r3, [r3, #3]
    bf70:	041b      	lsls	r3, r3, #16
    bf72:	431a      	orrs	r2, r3
    bf74:	4b85      	ldr	r3, [pc, #532]	; (c18c <process_recieved_packet+0x764>)
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	3302      	adds	r3, #2
    bf7a:	497c      	ldr	r1, [pc, #496]	; (c16c <process_recieved_packet+0x744>)
    bf7c:	18cb      	adds	r3, r1, r3
    bf7e:	78db      	ldrb	r3, [r3, #3]
    bf80:	021b      	lsls	r3, r3, #8
    bf82:	4313      	orrs	r3, r2
    bf84:	4a81      	ldr	r2, [pc, #516]	; (c18c <process_recieved_packet+0x764>)
    bf86:	7812      	ldrb	r2, [r2, #0]
    bf88:	3203      	adds	r2, #3
    bf8a:	4978      	ldr	r1, [pc, #480]	; (c16c <process_recieved_packet+0x744>)
    bf8c:	188a      	adds	r2, r1, r2
    bf8e:	78d2      	ldrb	r2, [r2, #3]
    bf90:	4313      	orrs	r3, r2
    bf92:	0018      	movs	r0, r3
    bf94:	4b76      	ldr	r3, [pc, #472]	; (c170 <process_recieved_packet+0x748>)
    bf96:	22fa      	movs	r2, #250	; 0xfa
    bf98:	0091      	lsls	r1, r2, #2
    bf9a:	4798      	blx	r3
    bf9c:	0003      	movs	r3, r0
    bf9e:	001a      	movs	r2, r3
    bfa0:	4b74      	ldr	r3, [pc, #464]	; (c174 <process_recieved_packet+0x74c>)
    bfa2:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+3])/1000;
    bfa4:	4b7a      	ldr	r3, [pc, #488]	; (c190 <process_recieved_packet+0x768>)
    bfa6:	781b      	ldrb	r3, [r3, #0]
    bfa8:	001a      	movs	r2, r3
    bfaa:	4b70      	ldr	r3, [pc, #448]	; (c16c <process_recieved_packet+0x744>)
    bfac:	189b      	adds	r3, r3, r2
    bfae:	78db      	ldrb	r3, [r3, #3]
    bfb0:	061a      	lsls	r2, r3, #24
    bfb2:	4b77      	ldr	r3, [pc, #476]	; (c190 <process_recieved_packet+0x768>)
    bfb4:	781b      	ldrb	r3, [r3, #0]
    bfb6:	3301      	adds	r3, #1
    bfb8:	496c      	ldr	r1, [pc, #432]	; (c16c <process_recieved_packet+0x744>)
    bfba:	18cb      	adds	r3, r1, r3
    bfbc:	78db      	ldrb	r3, [r3, #3]
    bfbe:	041b      	lsls	r3, r3, #16
    bfc0:	431a      	orrs	r2, r3
    bfc2:	4b73      	ldr	r3, [pc, #460]	; (c190 <process_recieved_packet+0x768>)
    bfc4:	781b      	ldrb	r3, [r3, #0]
    bfc6:	3302      	adds	r3, #2
    bfc8:	4968      	ldr	r1, [pc, #416]	; (c16c <process_recieved_packet+0x744>)
    bfca:	18cb      	adds	r3, r1, r3
    bfcc:	78db      	ldrb	r3, [r3, #3]
    bfce:	021b      	lsls	r3, r3, #8
    bfd0:	4313      	orrs	r3, r2
    bfd2:	4a6f      	ldr	r2, [pc, #444]	; (c190 <process_recieved_packet+0x768>)
    bfd4:	7812      	ldrb	r2, [r2, #0]
    bfd6:	3203      	adds	r2, #3
    bfd8:	4964      	ldr	r1, [pc, #400]	; (c16c <process_recieved_packet+0x744>)
    bfda:	188a      	adds	r2, r1, r2
    bfdc:	78d2      	ldrb	r2, [r2, #3]
    bfde:	4313      	orrs	r3, r2
    bfe0:	0018      	movs	r0, r3
    bfe2:	4b63      	ldr	r3, [pc, #396]	; (c170 <process_recieved_packet+0x748>)
    bfe4:	22fa      	movs	r2, #250	; 0xfa
    bfe6:	0091      	lsls	r1, r2, #2
    bfe8:	4798      	blx	r3
    bfea:	0003      	movs	r3, r0
    bfec:	001a      	movs	r2, r3
    bfee:	4b61      	ldr	r3, [pc, #388]	; (c174 <process_recieved_packet+0x74c>)
    bff0:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+3])/1000;
    bff2:	4b68      	ldr	r3, [pc, #416]	; (c194 <process_recieved_packet+0x76c>)
    bff4:	781b      	ldrb	r3, [r3, #0]
    bff6:	001a      	movs	r2, r3
    bff8:	4b5c      	ldr	r3, [pc, #368]	; (c16c <process_recieved_packet+0x744>)
    bffa:	189b      	adds	r3, r3, r2
    bffc:	78db      	ldrb	r3, [r3, #3]
    bffe:	061a      	lsls	r2, r3, #24
    c000:	4b64      	ldr	r3, [pc, #400]	; (c194 <process_recieved_packet+0x76c>)
    c002:	781b      	ldrb	r3, [r3, #0]
    c004:	3301      	adds	r3, #1
    c006:	4959      	ldr	r1, [pc, #356]	; (c16c <process_recieved_packet+0x744>)
    c008:	18cb      	adds	r3, r1, r3
    c00a:	78db      	ldrb	r3, [r3, #3]
    c00c:	041b      	lsls	r3, r3, #16
    c00e:	431a      	orrs	r2, r3
    c010:	4b60      	ldr	r3, [pc, #384]	; (c194 <process_recieved_packet+0x76c>)
    c012:	781b      	ldrb	r3, [r3, #0]
    c014:	3302      	adds	r3, #2
    c016:	4955      	ldr	r1, [pc, #340]	; (c16c <process_recieved_packet+0x744>)
    c018:	18cb      	adds	r3, r1, r3
    c01a:	78db      	ldrb	r3, [r3, #3]
    c01c:	021b      	lsls	r3, r3, #8
    c01e:	4313      	orrs	r3, r2
    c020:	4a5c      	ldr	r2, [pc, #368]	; (c194 <process_recieved_packet+0x76c>)
    c022:	7812      	ldrb	r2, [r2, #0]
    c024:	3203      	adds	r2, #3
    c026:	4951      	ldr	r1, [pc, #324]	; (c16c <process_recieved_packet+0x744>)
    c028:	188a      	adds	r2, r1, r2
    c02a:	78d2      	ldrb	r2, [r2, #3]
    c02c:	4313      	orrs	r3, r2
    c02e:	0018      	movs	r0, r3
    c030:	4b4f      	ldr	r3, [pc, #316]	; (c170 <process_recieved_packet+0x748>)
    c032:	22fa      	movs	r2, #250	; 0xfa
    c034:	0091      	lsls	r1, r2, #2
    c036:	4798      	blx	r3
    c038:	0003      	movs	r3, r0
    c03a:	001a      	movs	r2, r3
    c03c:	4b4d      	ldr	r3, [pc, #308]	; (c174 <process_recieved_packet+0x74c>)
    c03e:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+3])/1000;
    c040:	4b55      	ldr	r3, [pc, #340]	; (c198 <process_recieved_packet+0x770>)
    c042:	781b      	ldrb	r3, [r3, #0]
    c044:	001a      	movs	r2, r3
    c046:	4b49      	ldr	r3, [pc, #292]	; (c16c <process_recieved_packet+0x744>)
    c048:	189b      	adds	r3, r3, r2
    c04a:	78db      	ldrb	r3, [r3, #3]
    c04c:	061a      	lsls	r2, r3, #24
    c04e:	4b52      	ldr	r3, [pc, #328]	; (c198 <process_recieved_packet+0x770>)
    c050:	781b      	ldrb	r3, [r3, #0]
    c052:	3301      	adds	r3, #1
    c054:	4945      	ldr	r1, [pc, #276]	; (c16c <process_recieved_packet+0x744>)
    c056:	18cb      	adds	r3, r1, r3
    c058:	78db      	ldrb	r3, [r3, #3]
    c05a:	041b      	lsls	r3, r3, #16
    c05c:	431a      	orrs	r2, r3
    c05e:	4b4e      	ldr	r3, [pc, #312]	; (c198 <process_recieved_packet+0x770>)
    c060:	781b      	ldrb	r3, [r3, #0]
    c062:	3302      	adds	r3, #2
    c064:	4941      	ldr	r1, [pc, #260]	; (c16c <process_recieved_packet+0x744>)
    c066:	18cb      	adds	r3, r1, r3
    c068:	78db      	ldrb	r3, [r3, #3]
    c06a:	021b      	lsls	r3, r3, #8
    c06c:	4313      	orrs	r3, r2
    c06e:	4a4a      	ldr	r2, [pc, #296]	; (c198 <process_recieved_packet+0x770>)
    c070:	7812      	ldrb	r2, [r2, #0]
    c072:	3203      	adds	r2, #3
    c074:	493d      	ldr	r1, [pc, #244]	; (c16c <process_recieved_packet+0x744>)
    c076:	188a      	adds	r2, r1, r2
    c078:	78d2      	ldrb	r2, [r2, #3]
    c07a:	4313      	orrs	r3, r2
    c07c:	0018      	movs	r0, r3
    c07e:	4b3c      	ldr	r3, [pc, #240]	; (c170 <process_recieved_packet+0x748>)
    c080:	22fa      	movs	r2, #250	; 0xfa
    c082:	0091      	lsls	r1, r2, #2
    c084:	4798      	blx	r3
    c086:	0003      	movs	r3, r0
    c088:	001a      	movs	r2, r3
    c08a:	4b3a      	ldr	r3, [pc, #232]	; (c174 <process_recieved_packet+0x74c>)
    c08c:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+3])/1000;
    c08e:	4b43      	ldr	r3, [pc, #268]	; (c19c <process_recieved_packet+0x774>)
    c090:	781b      	ldrb	r3, [r3, #0]
    c092:	001a      	movs	r2, r3
    c094:	4b35      	ldr	r3, [pc, #212]	; (c16c <process_recieved_packet+0x744>)
    c096:	189b      	adds	r3, r3, r2
    c098:	78db      	ldrb	r3, [r3, #3]
    c09a:	061a      	lsls	r2, r3, #24
    c09c:	4b3f      	ldr	r3, [pc, #252]	; (c19c <process_recieved_packet+0x774>)
    c09e:	781b      	ldrb	r3, [r3, #0]
    c0a0:	3301      	adds	r3, #1
    c0a2:	4932      	ldr	r1, [pc, #200]	; (c16c <process_recieved_packet+0x744>)
    c0a4:	18cb      	adds	r3, r1, r3
    c0a6:	78db      	ldrb	r3, [r3, #3]
    c0a8:	041b      	lsls	r3, r3, #16
    c0aa:	431a      	orrs	r2, r3
    c0ac:	4b3b      	ldr	r3, [pc, #236]	; (c19c <process_recieved_packet+0x774>)
    c0ae:	781b      	ldrb	r3, [r3, #0]
    c0b0:	3302      	adds	r3, #2
    c0b2:	492e      	ldr	r1, [pc, #184]	; (c16c <process_recieved_packet+0x744>)
    c0b4:	18cb      	adds	r3, r1, r3
    c0b6:	78db      	ldrb	r3, [r3, #3]
    c0b8:	021b      	lsls	r3, r3, #8
    c0ba:	4313      	orrs	r3, r2
    c0bc:	4a37      	ldr	r2, [pc, #220]	; (c19c <process_recieved_packet+0x774>)
    c0be:	7812      	ldrb	r2, [r2, #0]
    c0c0:	3203      	adds	r2, #3
    c0c2:	492a      	ldr	r1, [pc, #168]	; (c16c <process_recieved_packet+0x744>)
    c0c4:	188a      	adds	r2, r1, r2
    c0c6:	78d2      	ldrb	r2, [r2, #3]
    c0c8:	4313      	orrs	r3, r2
    c0ca:	0018      	movs	r0, r3
    c0cc:	4b28      	ldr	r3, [pc, #160]	; (c170 <process_recieved_packet+0x748>)
    c0ce:	22fa      	movs	r2, #250	; 0xfa
    c0d0:	0091      	lsls	r1, r2, #2
    c0d2:	4798      	blx	r3
    c0d4:	0003      	movs	r3, r0
    c0d6:	001a      	movs	r2, r3
    c0d8:	4b26      	ldr	r3, [pc, #152]	; (c174 <process_recieved_packet+0x74c>)
    c0da:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+3])/1000;
    c0dc:	4b30      	ldr	r3, [pc, #192]	; (c1a0 <process_recieved_packet+0x778>)
    c0de:	781b      	ldrb	r3, [r3, #0]
    c0e0:	001a      	movs	r2, r3
    c0e2:	4b22      	ldr	r3, [pc, #136]	; (c16c <process_recieved_packet+0x744>)
    c0e4:	189b      	adds	r3, r3, r2
    c0e6:	78db      	ldrb	r3, [r3, #3]
    c0e8:	061a      	lsls	r2, r3, #24
    c0ea:	4b2d      	ldr	r3, [pc, #180]	; (c1a0 <process_recieved_packet+0x778>)
    c0ec:	781b      	ldrb	r3, [r3, #0]
    c0ee:	3301      	adds	r3, #1
    c0f0:	491e      	ldr	r1, [pc, #120]	; (c16c <process_recieved_packet+0x744>)
    c0f2:	18cb      	adds	r3, r1, r3
    c0f4:	78db      	ldrb	r3, [r3, #3]
    c0f6:	041b      	lsls	r3, r3, #16
    c0f8:	431a      	orrs	r2, r3
    c0fa:	4b29      	ldr	r3, [pc, #164]	; (c1a0 <process_recieved_packet+0x778>)
    c0fc:	781b      	ldrb	r3, [r3, #0]
    c0fe:	3302      	adds	r3, #2
    c100:	491a      	ldr	r1, [pc, #104]	; (c16c <process_recieved_packet+0x744>)
    c102:	18cb      	adds	r3, r1, r3
    c104:	78db      	ldrb	r3, [r3, #3]
    c106:	021b      	lsls	r3, r3, #8
    c108:	4313      	orrs	r3, r2
    c10a:	4a25      	ldr	r2, [pc, #148]	; (c1a0 <process_recieved_packet+0x778>)
    c10c:	7812      	ldrb	r2, [r2, #0]
    c10e:	3203      	adds	r2, #3
    c110:	4916      	ldr	r1, [pc, #88]	; (c16c <process_recieved_packet+0x744>)
    c112:	188a      	adds	r2, r1, r2
    c114:	78d2      	ldrb	r2, [r2, #3]
    c116:	4313      	orrs	r3, r2
    c118:	0018      	movs	r0, r3
    c11a:	4b15      	ldr	r3, [pc, #84]	; (c170 <process_recieved_packet+0x748>)
    c11c:	22fa      	movs	r2, #250	; 0xfa
    c11e:	0091      	lsls	r1, r2, #2
    c120:	4798      	blx	r3
    c122:	0003      	movs	r3, r0
    c124:	001a      	movs	r2, r3
    c126:	4b1f      	ldr	r3, [pc, #124]	; (c1a4 <process_recieved_packet+0x77c>)
    c128:	0010      	movs	r0, r2
    c12a:	4798      	blx	r3
    c12c:	1c02      	adds	r2, r0, #0
    c12e:	4b11      	ldr	r3, [pc, #68]	; (c174 <process_recieved_packet+0x74c>)
    c130:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+3])/1000;
    c132:	4b1d      	ldr	r3, [pc, #116]	; (c1a8 <process_recieved_packet+0x780>)
    c134:	781b      	ldrb	r3, [r3, #0]
    c136:	001a      	movs	r2, r3
    c138:	4b0c      	ldr	r3, [pc, #48]	; (c16c <process_recieved_packet+0x744>)
    c13a:	189b      	adds	r3, r3, r2
    c13c:	78db      	ldrb	r3, [r3, #3]
    c13e:	061a      	lsls	r2, r3, #24
    c140:	4b19      	ldr	r3, [pc, #100]	; (c1a8 <process_recieved_packet+0x780>)
    c142:	781b      	ldrb	r3, [r3, #0]
    c144:	3301      	adds	r3, #1
    c146:	4909      	ldr	r1, [pc, #36]	; (c16c <process_recieved_packet+0x744>)
    c148:	18cb      	adds	r3, r1, r3
    c14a:	78db      	ldrb	r3, [r3, #3]
    c14c:	041b      	lsls	r3, r3, #16
    c14e:	431a      	orrs	r2, r3
    c150:	4b15      	ldr	r3, [pc, #84]	; (c1a8 <process_recieved_packet+0x780>)
    c152:	781b      	ldrb	r3, [r3, #0]
    c154:	3302      	adds	r3, #2
    c156:	4905      	ldr	r1, [pc, #20]	; (c16c <process_recieved_packet+0x744>)
    c158:	18cb      	adds	r3, r1, r3
    c15a:	78db      	ldrb	r3, [r3, #3]
    c15c:	021b      	lsls	r3, r3, #8
    c15e:	e025      	b.n	c1ac <process_recieved_packet+0x784>
    c160:	2000033c 	.word	0x2000033c
    c164:	2000001a 	.word	0x2000001a
    c168:	2000034f 	.word	0x2000034f
    c16c:	20000ce0 	.word	0x20000ce0
    c170:	0001411d 	.word	0x0001411d
    c174:	20000fd4 	.word	0x20000fd4
    c178:	20000350 	.word	0x20000350
    c17c:	20000351 	.word	0x20000351
    c180:	20000352 	.word	0x20000352
    c184:	20000353 	.word	0x20000353
    c188:	20000354 	.word	0x20000354
    c18c:	20000355 	.word	0x20000355
    c190:	20000356 	.word	0x20000356
    c194:	20000357 	.word	0x20000357
    c198:	20000358 	.word	0x20000358
    c19c:	20000359 	.word	0x20000359
    c1a0:	2000035a 	.word	0x2000035a
    c1a4:	00015161 	.word	0x00015161
    c1a8:	2000035b 	.word	0x2000035b
    c1ac:	4313      	orrs	r3, r2
    c1ae:	4a7f      	ldr	r2, [pc, #508]	; (c3ac <process_recieved_packet+0x984>)
    c1b0:	7812      	ldrb	r2, [r2, #0]
    c1b2:	3203      	adds	r2, #3
    c1b4:	497e      	ldr	r1, [pc, #504]	; (c3b0 <process_recieved_packet+0x988>)
    c1b6:	188a      	adds	r2, r1, r2
    c1b8:	78d2      	ldrb	r2, [r2, #3]
    c1ba:	4313      	orrs	r3, r2
    c1bc:	0018      	movs	r0, r3
    c1be:	4b7d      	ldr	r3, [pc, #500]	; (c3b4 <process_recieved_packet+0x98c>)
    c1c0:	22fa      	movs	r2, #250	; 0xfa
    c1c2:	0091      	lsls	r1, r2, #2
    c1c4:	4798      	blx	r3
    c1c6:	0003      	movs	r3, r0
    c1c8:	001a      	movs	r2, r3
    c1ca:	4b7b      	ldr	r3, [pc, #492]	; (c3b8 <process_recieved_packet+0x990>)
    c1cc:	0010      	movs	r0, r2
    c1ce:	4798      	blx	r3
    c1d0:	1c02      	adds	r2, r0, #0
    c1d2:	4b7a      	ldr	r3, [pc, #488]	; (c3bc <process_recieved_packet+0x994>)
    c1d4:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+3])/1000;
    c1d6:	4b7a      	ldr	r3, [pc, #488]	; (c3c0 <process_recieved_packet+0x998>)
    c1d8:	781b      	ldrb	r3, [r3, #0]
    c1da:	001a      	movs	r2, r3
    c1dc:	4b74      	ldr	r3, [pc, #464]	; (c3b0 <process_recieved_packet+0x988>)
    c1de:	189b      	adds	r3, r3, r2
    c1e0:	78db      	ldrb	r3, [r3, #3]
    c1e2:	061a      	lsls	r2, r3, #24
    c1e4:	4b76      	ldr	r3, [pc, #472]	; (c3c0 <process_recieved_packet+0x998>)
    c1e6:	781b      	ldrb	r3, [r3, #0]
    c1e8:	3301      	adds	r3, #1
    c1ea:	4971      	ldr	r1, [pc, #452]	; (c3b0 <process_recieved_packet+0x988>)
    c1ec:	18cb      	adds	r3, r1, r3
    c1ee:	78db      	ldrb	r3, [r3, #3]
    c1f0:	041b      	lsls	r3, r3, #16
    c1f2:	431a      	orrs	r2, r3
    c1f4:	4b72      	ldr	r3, [pc, #456]	; (c3c0 <process_recieved_packet+0x998>)
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	3302      	adds	r3, #2
    c1fa:	496d      	ldr	r1, [pc, #436]	; (c3b0 <process_recieved_packet+0x988>)
    c1fc:	18cb      	adds	r3, r1, r3
    c1fe:	78db      	ldrb	r3, [r3, #3]
    c200:	021b      	lsls	r3, r3, #8
    c202:	4313      	orrs	r3, r2
    c204:	4a6e      	ldr	r2, [pc, #440]	; (c3c0 <process_recieved_packet+0x998>)
    c206:	7812      	ldrb	r2, [r2, #0]
    c208:	3203      	adds	r2, #3
    c20a:	4969      	ldr	r1, [pc, #420]	; (c3b0 <process_recieved_packet+0x988>)
    c20c:	188a      	adds	r2, r1, r2
    c20e:	78d2      	ldrb	r2, [r2, #3]
    c210:	4313      	orrs	r3, r2
    c212:	0018      	movs	r0, r3
    c214:	4b67      	ldr	r3, [pc, #412]	; (c3b4 <process_recieved_packet+0x98c>)
    c216:	22fa      	movs	r2, #250	; 0xfa
    c218:	0091      	lsls	r1, r2, #2
    c21a:	4798      	blx	r3
    c21c:	0003      	movs	r3, r0
    c21e:	001a      	movs	r2, r3
    c220:	4b66      	ldr	r3, [pc, #408]	; (c3bc <process_recieved_packet+0x994>)
    c222:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+3])/1000;
    c224:	4b67      	ldr	r3, [pc, #412]	; (c3c4 <process_recieved_packet+0x99c>)
    c226:	781b      	ldrb	r3, [r3, #0]
    c228:	001a      	movs	r2, r3
    c22a:	4b61      	ldr	r3, [pc, #388]	; (c3b0 <process_recieved_packet+0x988>)
    c22c:	189b      	adds	r3, r3, r2
    c22e:	78db      	ldrb	r3, [r3, #3]
    c230:	061a      	lsls	r2, r3, #24
    c232:	4b64      	ldr	r3, [pc, #400]	; (c3c4 <process_recieved_packet+0x99c>)
    c234:	781b      	ldrb	r3, [r3, #0]
    c236:	3301      	adds	r3, #1
    c238:	495d      	ldr	r1, [pc, #372]	; (c3b0 <process_recieved_packet+0x988>)
    c23a:	18cb      	adds	r3, r1, r3
    c23c:	78db      	ldrb	r3, [r3, #3]
    c23e:	041b      	lsls	r3, r3, #16
    c240:	431a      	orrs	r2, r3
    c242:	4b60      	ldr	r3, [pc, #384]	; (c3c4 <process_recieved_packet+0x99c>)
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	3302      	adds	r3, #2
    c248:	4959      	ldr	r1, [pc, #356]	; (c3b0 <process_recieved_packet+0x988>)
    c24a:	18cb      	adds	r3, r1, r3
    c24c:	78db      	ldrb	r3, [r3, #3]
    c24e:	021b      	lsls	r3, r3, #8
    c250:	4313      	orrs	r3, r2
    c252:	4a5c      	ldr	r2, [pc, #368]	; (c3c4 <process_recieved_packet+0x99c>)
    c254:	7812      	ldrb	r2, [r2, #0]
    c256:	3203      	adds	r2, #3
    c258:	4955      	ldr	r1, [pc, #340]	; (c3b0 <process_recieved_packet+0x988>)
    c25a:	188a      	adds	r2, r1, r2
    c25c:	78d2      	ldrb	r2, [r2, #3]
    c25e:	4313      	orrs	r3, r2
    c260:	0018      	movs	r0, r3
    c262:	4b54      	ldr	r3, [pc, #336]	; (c3b4 <process_recieved_packet+0x98c>)
    c264:	22fa      	movs	r2, #250	; 0xfa
    c266:	0091      	lsls	r1, r2, #2
    c268:	4798      	blx	r3
    c26a:	0003      	movs	r3, r0
    c26c:	001a      	movs	r2, r3
    c26e:	4b53      	ldr	r3, [pc, #332]	; (c3bc <process_recieved_packet+0x994>)
    c270:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2])/1000;
    c272:	4b55      	ldr	r3, [pc, #340]	; (c3c8 <process_recieved_packet+0x9a0>)
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	001a      	movs	r2, r3
    c278:	4b4d      	ldr	r3, [pc, #308]	; (c3b0 <process_recieved_packet+0x988>)
    c27a:	189b      	adds	r3, r3, r2
    c27c:	78db      	ldrb	r3, [r3, #3]
    c27e:	061a      	lsls	r2, r3, #24
    c280:	4b51      	ldr	r3, [pc, #324]	; (c3c8 <process_recieved_packet+0x9a0>)
    c282:	781b      	ldrb	r3, [r3, #0]
    c284:	3301      	adds	r3, #1
    c286:	494a      	ldr	r1, [pc, #296]	; (c3b0 <process_recieved_packet+0x988>)
    c288:	18cb      	adds	r3, r1, r3
    c28a:	78db      	ldrb	r3, [r3, #3]
    c28c:	041b      	lsls	r3, r3, #16
    c28e:	431a      	orrs	r2, r3
    c290:	4b4d      	ldr	r3, [pc, #308]	; (c3c8 <process_recieved_packet+0x9a0>)
    c292:	781b      	ldrb	r3, [r3, #0]
    c294:	3302      	adds	r3, #2
    c296:	4946      	ldr	r1, [pc, #280]	; (c3b0 <process_recieved_packet+0x988>)
    c298:	18cb      	adds	r3, r1, r3
    c29a:	78db      	ldrb	r3, [r3, #3]
    c29c:	021b      	lsls	r3, r3, #8
    c29e:	4313      	orrs	r3, r2
    c2a0:	4a49      	ldr	r2, [pc, #292]	; (c3c8 <process_recieved_packet+0x9a0>)
    c2a2:	7812      	ldrb	r2, [r2, #0]
    c2a4:	3202      	adds	r2, #2
    c2a6:	4942      	ldr	r1, [pc, #264]	; (c3b0 <process_recieved_packet+0x988>)
    c2a8:	188a      	adds	r2, r1, r2
    c2aa:	78d2      	ldrb	r2, [r2, #3]
    c2ac:	4313      	orrs	r3, r2
    c2ae:	0018      	movs	r0, r3
    c2b0:	4b40      	ldr	r3, [pc, #256]	; (c3b4 <process_recieved_packet+0x98c>)
    c2b2:	22fa      	movs	r2, #250	; 0xfa
    c2b4:	0091      	lsls	r1, r2, #2
    c2b6:	4798      	blx	r3
    c2b8:	0003      	movs	r3, r0
    c2ba:	001a      	movs	r2, r3
    c2bc:	4b3f      	ldr	r3, [pc, #252]	; (c3bc <process_recieved_packet+0x994>)
    c2be:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+3])/1000;
    c2c0:	4b42      	ldr	r3, [pc, #264]	; (c3cc <process_recieved_packet+0x9a4>)
    c2c2:	781b      	ldrb	r3, [r3, #0]
    c2c4:	001a      	movs	r2, r3
    c2c6:	4b3a      	ldr	r3, [pc, #232]	; (c3b0 <process_recieved_packet+0x988>)
    c2c8:	189b      	adds	r3, r3, r2
    c2ca:	78db      	ldrb	r3, [r3, #3]
    c2cc:	061a      	lsls	r2, r3, #24
    c2ce:	4b3f      	ldr	r3, [pc, #252]	; (c3cc <process_recieved_packet+0x9a4>)
    c2d0:	781b      	ldrb	r3, [r3, #0]
    c2d2:	3301      	adds	r3, #1
    c2d4:	4936      	ldr	r1, [pc, #216]	; (c3b0 <process_recieved_packet+0x988>)
    c2d6:	18cb      	adds	r3, r1, r3
    c2d8:	78db      	ldrb	r3, [r3, #3]
    c2da:	041b      	lsls	r3, r3, #16
    c2dc:	431a      	orrs	r2, r3
    c2de:	4b3b      	ldr	r3, [pc, #236]	; (c3cc <process_recieved_packet+0x9a4>)
    c2e0:	781b      	ldrb	r3, [r3, #0]
    c2e2:	3302      	adds	r3, #2
    c2e4:	4932      	ldr	r1, [pc, #200]	; (c3b0 <process_recieved_packet+0x988>)
    c2e6:	18cb      	adds	r3, r1, r3
    c2e8:	78db      	ldrb	r3, [r3, #3]
    c2ea:	021b      	lsls	r3, r3, #8
    c2ec:	4313      	orrs	r3, r2
    c2ee:	4a37      	ldr	r2, [pc, #220]	; (c3cc <process_recieved_packet+0x9a4>)
    c2f0:	7812      	ldrb	r2, [r2, #0]
    c2f2:	3203      	adds	r2, #3
    c2f4:	492e      	ldr	r1, [pc, #184]	; (c3b0 <process_recieved_packet+0x988>)
    c2f6:	188a      	adds	r2, r1, r2
    c2f8:	78d2      	ldrb	r2, [r2, #3]
    c2fa:	4313      	orrs	r3, r2
    c2fc:	0018      	movs	r0, r3
    c2fe:	4b2d      	ldr	r3, [pc, #180]	; (c3b4 <process_recieved_packet+0x98c>)
    c300:	22fa      	movs	r2, #250	; 0xfa
    c302:	0091      	lsls	r1, r2, #2
    c304:	4798      	blx	r3
    c306:	0003      	movs	r3, r0
    c308:	001a      	movs	r2, r3
    c30a:	4b2c      	ldr	r3, [pc, #176]	; (c3bc <process_recieved_packet+0x994>)
    c30c:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+3])/1000;
    c30e:	4b30      	ldr	r3, [pc, #192]	; (c3d0 <process_recieved_packet+0x9a8>)
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	001a      	movs	r2, r3
    c314:	4b26      	ldr	r3, [pc, #152]	; (c3b0 <process_recieved_packet+0x988>)
    c316:	189b      	adds	r3, r3, r2
    c318:	78db      	ldrb	r3, [r3, #3]
    c31a:	061a      	lsls	r2, r3, #24
    c31c:	4b2c      	ldr	r3, [pc, #176]	; (c3d0 <process_recieved_packet+0x9a8>)
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	3301      	adds	r3, #1
    c322:	4923      	ldr	r1, [pc, #140]	; (c3b0 <process_recieved_packet+0x988>)
    c324:	18cb      	adds	r3, r1, r3
    c326:	78db      	ldrb	r3, [r3, #3]
    c328:	041b      	lsls	r3, r3, #16
    c32a:	431a      	orrs	r2, r3
    c32c:	4b28      	ldr	r3, [pc, #160]	; (c3d0 <process_recieved_packet+0x9a8>)
    c32e:	781b      	ldrb	r3, [r3, #0]
    c330:	3302      	adds	r3, #2
    c332:	491f      	ldr	r1, [pc, #124]	; (c3b0 <process_recieved_packet+0x988>)
    c334:	18cb      	adds	r3, r1, r3
    c336:	78db      	ldrb	r3, [r3, #3]
    c338:	021b      	lsls	r3, r3, #8
    c33a:	4313      	orrs	r3, r2
    c33c:	4a24      	ldr	r2, [pc, #144]	; (c3d0 <process_recieved_packet+0x9a8>)
    c33e:	7812      	ldrb	r2, [r2, #0]
    c340:	3203      	adds	r2, #3
    c342:	491b      	ldr	r1, [pc, #108]	; (c3b0 <process_recieved_packet+0x988>)
    c344:	188a      	adds	r2, r1, r2
    c346:	78d2      	ldrb	r2, [r2, #3]
    c348:	4313      	orrs	r3, r2
    c34a:	0018      	movs	r0, r3
    c34c:	4b19      	ldr	r3, [pc, #100]	; (c3b4 <process_recieved_packet+0x98c>)
    c34e:	22fa      	movs	r2, #250	; 0xfa
    c350:	0091      	lsls	r1, r2, #2
    c352:	4798      	blx	r3
    c354:	0003      	movs	r3, r0
    c356:	001a      	movs	r2, r3
    c358:	4b18      	ldr	r3, [pc, #96]	; (c3bc <process_recieved_packet+0x994>)
    c35a:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+3])/1000;
    c35c:	4b1d      	ldr	r3, [pc, #116]	; (c3d4 <process_recieved_packet+0x9ac>)
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	001a      	movs	r2, r3
    c362:	4b13      	ldr	r3, [pc, #76]	; (c3b0 <process_recieved_packet+0x988>)
    c364:	189b      	adds	r3, r3, r2
    c366:	78db      	ldrb	r3, [r3, #3]
    c368:	061a      	lsls	r2, r3, #24
    c36a:	4b1a      	ldr	r3, [pc, #104]	; (c3d4 <process_recieved_packet+0x9ac>)
    c36c:	781b      	ldrb	r3, [r3, #0]
    c36e:	3301      	adds	r3, #1
    c370:	490f      	ldr	r1, [pc, #60]	; (c3b0 <process_recieved_packet+0x988>)
    c372:	18cb      	adds	r3, r1, r3
    c374:	78db      	ldrb	r3, [r3, #3]
    c376:	041b      	lsls	r3, r3, #16
    c378:	431a      	orrs	r2, r3
    c37a:	4b16      	ldr	r3, [pc, #88]	; (c3d4 <process_recieved_packet+0x9ac>)
    c37c:	781b      	ldrb	r3, [r3, #0]
    c37e:	3302      	adds	r3, #2
    c380:	490b      	ldr	r1, [pc, #44]	; (c3b0 <process_recieved_packet+0x988>)
    c382:	18cb      	adds	r3, r1, r3
    c384:	78db      	ldrb	r3, [r3, #3]
    c386:	021b      	lsls	r3, r3, #8
    c388:	4313      	orrs	r3, r2
    c38a:	4a12      	ldr	r2, [pc, #72]	; (c3d4 <process_recieved_packet+0x9ac>)
    c38c:	7812      	ldrb	r2, [r2, #0]
    c38e:	3203      	adds	r2, #3
    c390:	4907      	ldr	r1, [pc, #28]	; (c3b0 <process_recieved_packet+0x988>)
    c392:	188a      	adds	r2, r1, r2
    c394:	78d2      	ldrb	r2, [r2, #3]
    c396:	4313      	orrs	r3, r2
    c398:	0018      	movs	r0, r3
    c39a:	4b06      	ldr	r3, [pc, #24]	; (c3b4 <process_recieved_packet+0x98c>)
    c39c:	22fa      	movs	r2, #250	; 0xfa
    c39e:	0091      	lsls	r1, r2, #2
    c3a0:	4798      	blx	r3
    c3a2:	0003      	movs	r3, r0
    c3a4:	001a      	movs	r2, r3
    c3a6:	4b05      	ldr	r3, [pc, #20]	; (c3bc <process_recieved_packet+0x994>)
    c3a8:	649a      	str	r2, [r3, #72]	; 0x48
    c3aa:	e136      	b.n	c61a <process_recieved_packet+0xbf2>
    c3ac:	2000035b 	.word	0x2000035b
    c3b0:	20000ce0 	.word	0x20000ce0
    c3b4:	0001411d 	.word	0x0001411d
    c3b8:	00015161 	.word	0x00015161
    c3bc:	20000fd4 	.word	0x20000fd4
    c3c0:	2000035c 	.word	0x2000035c
    c3c4:	2000035d 	.word	0x2000035d
    c3c8:	2000035e 	.word	0x2000035e
    c3cc:	2000035f 	.word	0x2000035f
    c3d0:	20000360 	.word	0x20000360
    c3d4:	20000361 	.word	0x20000361
				mcconf_limits.motor_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MAX);
    c3d8:	4bbf      	ldr	r3, [pc, #764]	; (c6d8 <process_recieved_packet+0xcb0>)
    c3da:	781b      	ldrb	r3, [r3, #0]
    c3dc:	b25a      	sxtb	r2, r3
    c3de:	4bbf      	ldr	r3, [pc, #764]	; (c6dc <process_recieved_packet+0xcb4>)
    c3e0:	0011      	movs	r1, r2
    c3e2:	0018      	movs	r0, r3
    c3e4:	4bbe      	ldr	r3, [pc, #760]	; (c6e0 <process_recieved_packet+0xcb8>)
    c3e6:	4798      	blx	r3
    c3e8:	1c02      	adds	r2, r0, #0
    c3ea:	4bbe      	ldr	r3, [pc, #760]	; (c6e4 <process_recieved_packet+0xcbc>)
    c3ec:	1c10      	adds	r0, r2, #0
    c3ee:	4798      	blx	r3
    c3f0:	0002      	movs	r2, r0
    c3f2:	4bbd      	ldr	r3, [pc, #756]	; (c6e8 <process_recieved_packet+0xcc0>)
    c3f4:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MIN);
    c3f6:	4bbd      	ldr	r3, [pc, #756]	; (c6ec <process_recieved_packet+0xcc4>)
    c3f8:	781b      	ldrb	r3, [r3, #0]
    c3fa:	b25a      	sxtb	r2, r3
    c3fc:	4bb7      	ldr	r3, [pc, #732]	; (c6dc <process_recieved_packet+0xcb4>)
    c3fe:	0011      	movs	r1, r2
    c400:	0018      	movs	r0, r3
    c402:	4bb7      	ldr	r3, [pc, #732]	; (c6e0 <process_recieved_packet+0xcb8>)
    c404:	4798      	blx	r3
    c406:	1c02      	adds	r2, r0, #0
    c408:	4bb6      	ldr	r3, [pc, #728]	; (c6e4 <process_recieved_packet+0xcbc>)
    c40a:	1c10      	adds	r0, r2, #0
    c40c:	4798      	blx	r3
    c40e:	0002      	movs	r2, r0
    c410:	4bb5      	ldr	r3, [pc, #724]	; (c6e8 <process_recieved_packet+0xcc0>)
    c412:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MAX);
    c414:	4bb6      	ldr	r3, [pc, #728]	; (c6f0 <process_recieved_packet+0xcc8>)
    c416:	781b      	ldrb	r3, [r3, #0]
    c418:	b25a      	sxtb	r2, r3
    c41a:	4bb0      	ldr	r3, [pc, #704]	; (c6dc <process_recieved_packet+0xcb4>)
    c41c:	0011      	movs	r1, r2
    c41e:	0018      	movs	r0, r3
    c420:	4baf      	ldr	r3, [pc, #700]	; (c6e0 <process_recieved_packet+0xcb8>)
    c422:	4798      	blx	r3
    c424:	1c02      	adds	r2, r0, #0
    c426:	4baf      	ldr	r3, [pc, #700]	; (c6e4 <process_recieved_packet+0xcbc>)
    c428:	1c10      	adds	r0, r2, #0
    c42a:	4798      	blx	r3
    c42c:	0002      	movs	r2, r0
    c42e:	4bae      	ldr	r3, [pc, #696]	; (c6e8 <process_recieved_packet+0xcc0>)
    c430:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MIN);
    c432:	4bb0      	ldr	r3, [pc, #704]	; (c6f4 <process_recieved_packet+0xccc>)
    c434:	781b      	ldrb	r3, [r3, #0]
    c436:	b25a      	sxtb	r2, r3
    c438:	4ba8      	ldr	r3, [pc, #672]	; (c6dc <process_recieved_packet+0xcb4>)
    c43a:	0011      	movs	r1, r2
    c43c:	0018      	movs	r0, r3
    c43e:	4ba8      	ldr	r3, [pc, #672]	; (c6e0 <process_recieved_packet+0xcb8>)
    c440:	4798      	blx	r3
    c442:	1c02      	adds	r2, r0, #0
    c444:	4ba7      	ldr	r3, [pc, #668]	; (c6e4 <process_recieved_packet+0xcbc>)
    c446:	1c10      	adds	r0, r2, #0
    c448:	4798      	blx	r3
    c44a:	0002      	movs	r2, r0
    c44c:	4ba6      	ldr	r3, [pc, #664]	; (c6e8 <process_recieved_packet+0xcc0>)
    c44e:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ABS_CURR_MAX);
    c450:	4ba9      	ldr	r3, [pc, #676]	; (c6f8 <process_recieved_packet+0xcd0>)
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	b25a      	sxtb	r2, r3
    c456:	4ba1      	ldr	r3, [pc, #644]	; (c6dc <process_recieved_packet+0xcb4>)
    c458:	0011      	movs	r1, r2
    c45a:	0018      	movs	r0, r3
    c45c:	4ba0      	ldr	r3, [pc, #640]	; (c6e0 <process_recieved_packet+0xcb8>)
    c45e:	4798      	blx	r3
    c460:	1c02      	adds	r2, r0, #0
    c462:	4ba0      	ldr	r3, [pc, #640]	; (c6e4 <process_recieved_packet+0xcbc>)
    c464:	1c10      	adds	r0, r2, #0
    c466:	4798      	blx	r3
    c468:	0002      	movs	r2, r0
    c46a:	4b9f      	ldr	r3, [pc, #636]	; (c6e8 <process_recieved_packet+0xcc0>)
    c46c:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MIN);
    c46e:	4ba3      	ldr	r3, [pc, #652]	; (c6fc <process_recieved_packet+0xcd4>)
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	b25a      	sxtb	r2, r3
    c474:	4b99      	ldr	r3, [pc, #612]	; (c6dc <process_recieved_packet+0xcb4>)
    c476:	0011      	movs	r1, r2
    c478:	0018      	movs	r0, r3
    c47a:	4b99      	ldr	r3, [pc, #612]	; (c6e0 <process_recieved_packet+0xcb8>)
    c47c:	4798      	blx	r3
    c47e:	1c02      	adds	r2, r0, #0
    c480:	4b98      	ldr	r3, [pc, #608]	; (c6e4 <process_recieved_packet+0xcbc>)
    c482:	1c10      	adds	r0, r2, #0
    c484:	4798      	blx	r3
    c486:	0002      	movs	r2, r0
    c488:	4b97      	ldr	r3, [pc, #604]	; (c6e8 <process_recieved_packet+0xcc0>)
    c48a:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MAX);
    c48c:	4b9c      	ldr	r3, [pc, #624]	; (c700 <process_recieved_packet+0xcd8>)
    c48e:	781b      	ldrb	r3, [r3, #0]
    c490:	b25a      	sxtb	r2, r3
    c492:	4b92      	ldr	r3, [pc, #584]	; (c6dc <process_recieved_packet+0xcb4>)
    c494:	0011      	movs	r1, r2
    c496:	0018      	movs	r0, r3
    c498:	4b91      	ldr	r3, [pc, #580]	; (c6e0 <process_recieved_packet+0xcb8>)
    c49a:	4798      	blx	r3
    c49c:	1c02      	adds	r2, r0, #0
    c49e:	4b91      	ldr	r3, [pc, #580]	; (c6e4 <process_recieved_packet+0xcbc>)
    c4a0:	1c10      	adds	r0, r2, #0
    c4a2:	4798      	blx	r3
    c4a4:	0002      	movs	r2, r0
    c4a6:	4b90      	ldr	r3, [pc, #576]	; (c6e8 <process_recieved_packet+0xcc0>)
    c4a8:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_MAX);
    c4aa:	4b96      	ldr	r3, [pc, #600]	; (c704 <process_recieved_packet+0xcdc>)
    c4ac:	781b      	ldrb	r3, [r3, #0]
    c4ae:	b25a      	sxtb	r2, r3
    c4b0:	4b8a      	ldr	r3, [pc, #552]	; (c6dc <process_recieved_packet+0xcb4>)
    c4b2:	0011      	movs	r1, r2
    c4b4:	0018      	movs	r0, r3
    c4b6:	4b8a      	ldr	r3, [pc, #552]	; (c6e0 <process_recieved_packet+0xcb8>)
    c4b8:	4798      	blx	r3
    c4ba:	1c02      	adds	r2, r0, #0
    c4bc:	4b89      	ldr	r3, [pc, #548]	; (c6e4 <process_recieved_packet+0xcbc>)
    c4be:	1c10      	adds	r0, r2, #0
    c4c0:	4798      	blx	r3
    c4c2:	0002      	movs	r2, r0
    c4c4:	4b88      	ldr	r3, [pc, #544]	; (c6e8 <process_recieved_packet+0xcc0>)
    c4c6:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_CC_MAX);
    c4c8:	4b8f      	ldr	r3, [pc, #572]	; (c708 <process_recieved_packet+0xce0>)
    c4ca:	781b      	ldrb	r3, [r3, #0]
    c4cc:	b25a      	sxtb	r2, r3
    c4ce:	4b83      	ldr	r3, [pc, #524]	; (c6dc <process_recieved_packet+0xcb4>)
    c4d0:	0011      	movs	r1, r2
    c4d2:	0018      	movs	r0, r3
    c4d4:	4b82      	ldr	r3, [pc, #520]	; (c6e0 <process_recieved_packet+0xcb8>)
    c4d6:	4798      	blx	r3
    c4d8:	1c02      	adds	r2, r0, #0
    c4da:	4b82      	ldr	r3, [pc, #520]	; (c6e4 <process_recieved_packet+0xcbc>)
    c4dc:	1c10      	adds	r0, r2, #0
    c4de:	4798      	blx	r3
    c4e0:	0002      	movs	r2, r0
    c4e2:	4b81      	ldr	r3, [pc, #516]	; (c6e8 <process_recieved_packet+0xcc0>)
    c4e4:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MIN);
    c4e6:	4b89      	ldr	r3, [pc, #548]	; (c70c <process_recieved_packet+0xce4>)
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	b25a      	sxtb	r2, r3
    c4ec:	4b7b      	ldr	r3, [pc, #492]	; (c6dc <process_recieved_packet+0xcb4>)
    c4ee:	0011      	movs	r1, r2
    c4f0:	0018      	movs	r0, r3
    c4f2:	4b7b      	ldr	r3, [pc, #492]	; (c6e0 <process_recieved_packet+0xcb8>)
    c4f4:	4798      	blx	r3
    c4f6:	1c02      	adds	r2, r0, #0
    c4f8:	4b7a      	ldr	r3, [pc, #488]	; (c6e4 <process_recieved_packet+0xcbc>)
    c4fa:	1c10      	adds	r0, r2, #0
    c4fc:	4798      	blx	r3
    c4fe:	0002      	movs	r2, r0
    c500:	4b79      	ldr	r3, [pc, #484]	; (c6e8 <process_recieved_packet+0xcc0>)
    c502:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MAX);
    c504:	4b82      	ldr	r3, [pc, #520]	; (c710 <process_recieved_packet+0xce8>)
    c506:	781b      	ldrb	r3, [r3, #0]
    c508:	b25a      	sxtb	r2, r3
    c50a:	4b74      	ldr	r3, [pc, #464]	; (c6dc <process_recieved_packet+0xcb4>)
    c50c:	0011      	movs	r1, r2
    c50e:	0018      	movs	r0, r3
    c510:	4b73      	ldr	r3, [pc, #460]	; (c6e0 <process_recieved_packet+0xcb8>)
    c512:	4798      	blx	r3
    c514:	1c02      	adds	r2, r0, #0
    c516:	4b73      	ldr	r3, [pc, #460]	; (c6e4 <process_recieved_packet+0xcbc>)
    c518:	1c10      	adds	r0, r2, #0
    c51a:	4798      	blx	r3
    c51c:	0002      	movs	r2, r0
    c51e:	4b72      	ldr	r3, [pc, #456]	; (c6e8 <process_recieved_packet+0xcc0>)
    c520:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_STRT);
    c522:	4b7c      	ldr	r3, [pc, #496]	; (c714 <process_recieved_packet+0xcec>)
    c524:	781b      	ldrb	r3, [r3, #0]
    c526:	b25a      	sxtb	r2, r3
    c528:	4b6c      	ldr	r3, [pc, #432]	; (c6dc <process_recieved_packet+0xcb4>)
    c52a:	0011      	movs	r1, r2
    c52c:	0018      	movs	r0, r3
    c52e:	4b6c      	ldr	r3, [pc, #432]	; (c6e0 <process_recieved_packet+0xcb8>)
    c530:	4798      	blx	r3
    c532:	1c02      	adds	r2, r0, #0
    c534:	4b6c      	ldr	r3, [pc, #432]	; (c6e8 <process_recieved_packet+0xcc0>)
    c536:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_END);
    c538:	4b77      	ldr	r3, [pc, #476]	; (c718 <process_recieved_packet+0xcf0>)
    c53a:	781b      	ldrb	r3, [r3, #0]
    c53c:	b25a      	sxtb	r2, r3
    c53e:	4b67      	ldr	r3, [pc, #412]	; (c6dc <process_recieved_packet+0xcb4>)
    c540:	0011      	movs	r1, r2
    c542:	0018      	movs	r0, r3
    c544:	4b66      	ldr	r3, [pc, #408]	; (c6e0 <process_recieved_packet+0xcb8>)
    c546:	4798      	blx	r3
    c548:	1c02      	adds	r2, r0, #0
    c54a:	4b67      	ldr	r3, [pc, #412]	; (c6e8 <process_recieved_packet+0xcc0>)
    c54c:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_STRT);
    c54e:	4b73      	ldr	r3, [pc, #460]	; (c71c <process_recieved_packet+0xcf4>)
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	b25a      	sxtb	r2, r3
    c554:	4b61      	ldr	r3, [pc, #388]	; (c6dc <process_recieved_packet+0xcb4>)
    c556:	0011      	movs	r1, r2
    c558:	0018      	movs	r0, r3
    c55a:	4b61      	ldr	r3, [pc, #388]	; (c6e0 <process_recieved_packet+0xcb8>)
    c55c:	4798      	blx	r3
    c55e:	1c02      	adds	r2, r0, #0
    c560:	4b60      	ldr	r3, [pc, #384]	; (c6e4 <process_recieved_packet+0xcbc>)
    c562:	1c10      	adds	r0, r2, #0
    c564:	4798      	blx	r3
    c566:	0002      	movs	r2, r0
    c568:	4b5f      	ldr	r3, [pc, #380]	; (c6e8 <process_recieved_packet+0xcc0>)
    c56a:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_END);
    c56c:	4b6c      	ldr	r3, [pc, #432]	; (c720 <process_recieved_packet+0xcf8>)
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	b25a      	sxtb	r2, r3
    c572:	4b5a      	ldr	r3, [pc, #360]	; (c6dc <process_recieved_packet+0xcb4>)
    c574:	0011      	movs	r1, r2
    c576:	0018      	movs	r0, r3
    c578:	4b59      	ldr	r3, [pc, #356]	; (c6e0 <process_recieved_packet+0xcb8>)
    c57a:	4798      	blx	r3
    c57c:	1c02      	adds	r2, r0, #0
    c57e:	4b59      	ldr	r3, [pc, #356]	; (c6e4 <process_recieved_packet+0xcbc>)
    c580:	1c10      	adds	r0, r2, #0
    c582:	4798      	blx	r3
    c584:	0002      	movs	r2, r0
    c586:	4b58      	ldr	r3, [pc, #352]	; (c6e8 <process_recieved_packet+0xcc0>)
    c588:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_STRT);
    c58a:	4b66      	ldr	r3, [pc, #408]	; (c724 <process_recieved_packet+0xcfc>)
    c58c:	781b      	ldrb	r3, [r3, #0]
    c58e:	b25a      	sxtb	r2, r3
    c590:	4b52      	ldr	r3, [pc, #328]	; (c6dc <process_recieved_packet+0xcb4>)
    c592:	0011      	movs	r1, r2
    c594:	0018      	movs	r0, r3
    c596:	4b52      	ldr	r3, [pc, #328]	; (c6e0 <process_recieved_packet+0xcb8>)
    c598:	4798      	blx	r3
    c59a:	1c02      	adds	r2, r0, #0
    c59c:	4b51      	ldr	r3, [pc, #324]	; (c6e4 <process_recieved_packet+0xcbc>)
    c59e:	1c10      	adds	r0, r2, #0
    c5a0:	4798      	blx	r3
    c5a2:	0002      	movs	r2, r0
    c5a4:	4b50      	ldr	r3, [pc, #320]	; (c6e8 <process_recieved_packet+0xcc0>)
    c5a6:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_END);
    c5a8:	4b5f      	ldr	r3, [pc, #380]	; (c728 <process_recieved_packet+0xd00>)
    c5aa:	781b      	ldrb	r3, [r3, #0]
    c5ac:	b25a      	sxtb	r2, r3
    c5ae:	4b4b      	ldr	r3, [pc, #300]	; (c6dc <process_recieved_packet+0xcb4>)
    c5b0:	0011      	movs	r1, r2
    c5b2:	0018      	movs	r0, r3
    c5b4:	4b4a      	ldr	r3, [pc, #296]	; (c6e0 <process_recieved_packet+0xcb8>)
    c5b6:	4798      	blx	r3
    c5b8:	1c02      	adds	r2, r0, #0
    c5ba:	4b4a      	ldr	r3, [pc, #296]	; (c6e4 <process_recieved_packet+0xcbc>)
    c5bc:	1c10      	adds	r0, r2, #0
    c5be:	4798      	blx	r3
    c5c0:	0002      	movs	r2, r0
    c5c2:	4b49      	ldr	r3, [pc, #292]	; (c6e8 <process_recieved_packet+0xcc0>)
    c5c4:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MIN)*100);
    c5c6:	4b59      	ldr	r3, [pc, #356]	; (c72c <process_recieved_packet+0xd04>)
    c5c8:	781b      	ldrb	r3, [r3, #0]
    c5ca:	b25a      	sxtb	r2, r3
    c5cc:	4b43      	ldr	r3, [pc, #268]	; (c6dc <process_recieved_packet+0xcb4>)
    c5ce:	0011      	movs	r1, r2
    c5d0:	0018      	movs	r0, r3
    c5d2:	4b43      	ldr	r3, [pc, #268]	; (c6e0 <process_recieved_packet+0xcb8>)
    c5d4:	4798      	blx	r3
    c5d6:	1c02      	adds	r2, r0, #0
    c5d8:	4b55      	ldr	r3, [pc, #340]	; (c730 <process_recieved_packet+0xd08>)
    c5da:	4956      	ldr	r1, [pc, #344]	; (c734 <process_recieved_packet+0xd0c>)
    c5dc:	1c10      	adds	r0, r2, #0
    c5de:	4798      	blx	r3
    c5e0:	1c03      	adds	r3, r0, #0
    c5e2:	1c1a      	adds	r2, r3, #0
    c5e4:	4b3f      	ldr	r3, [pc, #252]	; (c6e4 <process_recieved_packet+0xcbc>)
    c5e6:	1c10      	adds	r0, r2, #0
    c5e8:	4798      	blx	r3
    c5ea:	0002      	movs	r2, r0
    c5ec:	4b3e      	ldr	r3, [pc, #248]	; (c6e8 <process_recieved_packet+0xcc0>)
    c5ee:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MAX)*100);
    c5f0:	4b51      	ldr	r3, [pc, #324]	; (c738 <process_recieved_packet+0xd10>)
    c5f2:	781b      	ldrb	r3, [r3, #0]
    c5f4:	b25a      	sxtb	r2, r3
    c5f6:	4b39      	ldr	r3, [pc, #228]	; (c6dc <process_recieved_packet+0xcb4>)
    c5f8:	0011      	movs	r1, r2
    c5fa:	0018      	movs	r0, r3
    c5fc:	4b38      	ldr	r3, [pc, #224]	; (c6e0 <process_recieved_packet+0xcb8>)
    c5fe:	4798      	blx	r3
    c600:	1c02      	adds	r2, r0, #0
    c602:	4b4b      	ldr	r3, [pc, #300]	; (c730 <process_recieved_packet+0xd08>)
    c604:	494b      	ldr	r1, [pc, #300]	; (c734 <process_recieved_packet+0xd0c>)
    c606:	1c10      	adds	r0, r2, #0
    c608:	4798      	blx	r3
    c60a:	1c03      	adds	r3, r0, #0
    c60c:	1c1a      	adds	r2, r3, #0
    c60e:	4b35      	ldr	r3, [pc, #212]	; (c6e4 <process_recieved_packet+0xcbc>)
    c610:	1c10      	adds	r0, r2, #0
    c612:	4798      	blx	r3
    c614:	0002      	movs	r2, r0
    c616:	4b34      	ldr	r3, [pc, #208]	; (c6e8 <process_recieved_packet+0xcc0>)
    c618:	649a      	str	r2, [r3, #72]	; 0x48
			GET_LIMITS = 0;
    c61a:	4b48      	ldr	r3, [pc, #288]	; (c73c <process_recieved_packet+0xd14>)
    c61c:	2200      	movs	r2, #0
    c61e:	701a      	strb	r2, [r3, #0]
			SEND_LIMITS = 1;
    c620:	4b47      	ldr	r3, [pc, #284]	; (c740 <process_recieved_packet+0xd18>)
    c622:	2201      	movs	r2, #1
    c624:	701a      	strb	r2, [r3, #0]
}
    c626:	e16a      	b.n	c8fe <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_DECODED_PPM){
    c628:	4b46      	ldr	r3, [pc, #280]	; (c744 <process_recieved_packet+0xd1c>)
    c62a:	781b      	ldrb	r3, [r3, #0]
    c62c:	1dfa      	adds	r2, r7, #7
    c62e:	7812      	ldrb	r2, [r2, #0]
    c630:	429a      	cmp	r2, r3
    c632:	d110      	bne.n	c656 <process_recieved_packet+0xc2e>
			latest_vesc_vals.pwm_val = (int32_t)(((vesc_revieve_packet.payload[1]&0x00FF)<<24)|((vesc_revieve_packet.payload[2]&0x00FF)<<16)|((vesc_revieve_packet.payload[3]&0x00FF)<<8)|(vesc_revieve_packet.payload[4]&0x00FF));
    c634:	4b44      	ldr	r3, [pc, #272]	; (c748 <process_recieved_packet+0xd20>)
    c636:	791b      	ldrb	r3, [r3, #4]
    c638:	061a      	lsls	r2, r3, #24
    c63a:	4b43      	ldr	r3, [pc, #268]	; (c748 <process_recieved_packet+0xd20>)
    c63c:	795b      	ldrb	r3, [r3, #5]
    c63e:	041b      	lsls	r3, r3, #16
    c640:	431a      	orrs	r2, r3
    c642:	4b41      	ldr	r3, [pc, #260]	; (c748 <process_recieved_packet+0xd20>)
    c644:	799b      	ldrb	r3, [r3, #6]
    c646:	021b      	lsls	r3, r3, #8
    c648:	4313      	orrs	r3, r2
    c64a:	4a3f      	ldr	r2, [pc, #252]	; (c748 <process_recieved_packet+0xd20>)
    c64c:	79d2      	ldrb	r2, [r2, #7]
    c64e:	431a      	orrs	r2, r3
    c650:	4b3e      	ldr	r3, [pc, #248]	; (c74c <process_recieved_packet+0xd24>)
    c652:	631a      	str	r2, [r3, #48]	; 0x30
}
    c654:	e153      	b.n	c8fe <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_DECODED_CHUK){
    c656:	4b3e      	ldr	r3, [pc, #248]	; (c750 <process_recieved_packet+0xd28>)
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	1dfa      	adds	r2, r7, #7
    c65c:	7812      	ldrb	r2, [r2, #0]
    c65e:	429a      	cmp	r2, r3
    c660:	d17a      	bne.n	c758 <process_recieved_packet+0xd30>
			rec_chuck_struct.js_x = vesc_revieve_packet.payload[1];
    c662:	4b39      	ldr	r3, [pc, #228]	; (c748 <process_recieved_packet+0xd20>)
    c664:	791b      	ldrb	r3, [r3, #4]
    c666:	b25a      	sxtb	r2, r3
    c668:	4b3a      	ldr	r3, [pc, #232]	; (c754 <process_recieved_packet+0xd2c>)
    c66a:	701a      	strb	r2, [r3, #0]
			rec_chuck_struct.js_y = vesc_revieve_packet.payload[2];
    c66c:	4b36      	ldr	r3, [pc, #216]	; (c748 <process_recieved_packet+0xd20>)
    c66e:	795b      	ldrb	r3, [r3, #5]
    c670:	b25a      	sxtb	r2, r3
    c672:	4b38      	ldr	r3, [pc, #224]	; (c754 <process_recieved_packet+0xd2c>)
    c674:	705a      	strb	r2, [r3, #1]
			rec_chuck_struct.bt_c = vesc_revieve_packet.payload[3];
    c676:	4b34      	ldr	r3, [pc, #208]	; (c748 <process_recieved_packet+0xd20>)
    c678:	799b      	ldrb	r3, [r3, #6]
    c67a:	1e5a      	subs	r2, r3, #1
    c67c:	4193      	sbcs	r3, r2
    c67e:	b2da      	uxtb	r2, r3
    c680:	4b34      	ldr	r3, [pc, #208]	; (c754 <process_recieved_packet+0xd2c>)
    c682:	721a      	strb	r2, [r3, #8]
			rec_chuck_struct.bt_z = vesc_revieve_packet.payload[4];
    c684:	4b30      	ldr	r3, [pc, #192]	; (c748 <process_recieved_packet+0xd20>)
    c686:	79db      	ldrb	r3, [r3, #7]
    c688:	1e5a      	subs	r2, r3, #1
    c68a:	4193      	sbcs	r3, r2
    c68c:	b2da      	uxtb	r2, r3
    c68e:	4b31      	ldr	r3, [pc, #196]	; (c754 <process_recieved_packet+0xd2c>)
    c690:	725a      	strb	r2, [r3, #9]
			rec_chuck_struct.acc_x = (int16_t)(((vesc_revieve_packet.payload[5] & 0x00FF) << 8)|(vesc_revieve_packet.payload[6] & 0x00FF));
    c692:	4b2d      	ldr	r3, [pc, #180]	; (c748 <process_recieved_packet+0xd20>)
    c694:	7a1b      	ldrb	r3, [r3, #8]
    c696:	021b      	lsls	r3, r3, #8
    c698:	b21a      	sxth	r2, r3
    c69a:	4b2b      	ldr	r3, [pc, #172]	; (c748 <process_recieved_packet+0xd20>)
    c69c:	7a5b      	ldrb	r3, [r3, #9]
    c69e:	b21b      	sxth	r3, r3
    c6a0:	4313      	orrs	r3, r2
    c6a2:	b21a      	sxth	r2, r3
    c6a4:	4b2b      	ldr	r3, [pc, #172]	; (c754 <process_recieved_packet+0xd2c>)
    c6a6:	805a      	strh	r2, [r3, #2]
			rec_chuck_struct.acc_y = (int16_t)(((vesc_revieve_packet.payload[7] & 0x00FF) << 8)|(vesc_revieve_packet.payload[8] & 0x00FF));
    c6a8:	4b27      	ldr	r3, [pc, #156]	; (c748 <process_recieved_packet+0xd20>)
    c6aa:	7a9b      	ldrb	r3, [r3, #10]
    c6ac:	021b      	lsls	r3, r3, #8
    c6ae:	b21a      	sxth	r2, r3
    c6b0:	4b25      	ldr	r3, [pc, #148]	; (c748 <process_recieved_packet+0xd20>)
    c6b2:	7adb      	ldrb	r3, [r3, #11]
    c6b4:	b21b      	sxth	r3, r3
    c6b6:	4313      	orrs	r3, r2
    c6b8:	b21a      	sxth	r2, r3
    c6ba:	4b26      	ldr	r3, [pc, #152]	; (c754 <process_recieved_packet+0xd2c>)
    c6bc:	809a      	strh	r2, [r3, #4]
			rec_chuck_struct.acc_z = (int16_t)(((vesc_revieve_packet.payload[9] & 0x00FF) << 8)|(vesc_revieve_packet.payload[10] & 0x00FF));
    c6be:	4b22      	ldr	r3, [pc, #136]	; (c748 <process_recieved_packet+0xd20>)
    c6c0:	7b1b      	ldrb	r3, [r3, #12]
    c6c2:	021b      	lsls	r3, r3, #8
    c6c4:	b21a      	sxth	r2, r3
    c6c6:	4b20      	ldr	r3, [pc, #128]	; (c748 <process_recieved_packet+0xd20>)
    c6c8:	7b5b      	ldrb	r3, [r3, #13]
    c6ca:	b21b      	sxth	r3, r3
    c6cc:	4313      	orrs	r3, r2
    c6ce:	b21a      	sxth	r2, r3
    c6d0:	4b20      	ldr	r3, [pc, #128]	; (c754 <process_recieved_packet+0xd2c>)
    c6d2:	80da      	strh	r2, [r3, #6]
}
    c6d4:	e113      	b.n	c8fe <process_recieved_packet+0xed6>
    c6d6:	46c0      	nop			; (mov r8, r8)
    c6d8:	2000034f 	.word	0x2000034f
    c6dc:	20000ce3 	.word	0x20000ce3
    c6e0:	0000c919 	.word	0x0000c919
    c6e4:	00015121 	.word	0x00015121
    c6e8:	20000fd4 	.word	0x20000fd4
    c6ec:	20000350 	.word	0x20000350
    c6f0:	20000351 	.word	0x20000351
    c6f4:	20000352 	.word	0x20000352
    c6f8:	20000353 	.word	0x20000353
    c6fc:	20000354 	.word	0x20000354
    c700:	20000355 	.word	0x20000355
    c704:	20000356 	.word	0x20000356
    c708:	20000357 	.word	0x20000357
    c70c:	20000358 	.word	0x20000358
    c710:	20000359 	.word	0x20000359
    c714:	2000035a 	.word	0x2000035a
    c718:	2000035b 	.word	0x2000035b
    c71c:	2000035c 	.word	0x2000035c
    c720:	2000035d 	.word	0x2000035d
    c724:	2000035e 	.word	0x2000035e
    c728:	2000035f 	.word	0x2000035f
    c72c:	20000360 	.word	0x20000360
    c730:	00014ba9 	.word	0x00014ba9
    c734:	42c80000 	.word	0x42c80000
    c738:	20000361 	.word	0x20000361
    c73c:	20000019 	.word	0x20000019
    c740:	2000030e 	.word	0x2000030e
    c744:	2000033e 	.word	0x2000033e
    c748:	20000ce0 	.word	0x20000ce0
    c74c:	20000958 	.word	0x20000958
    c750:	2000033f 	.word	0x2000033f
    c754:	20001054 	.word	0x20001054
		} else if(packet_id == COMM_GET_VALUES_SELECTIVE){ // Only available in latest Official FW
    c758:	4b6b      	ldr	r3, [pc, #428]	; (c908 <process_recieved_packet+0xee0>)
    c75a:	781b      	ldrb	r3, [r3, #0]
    c75c:	1dfa      	adds	r2, r7, #7
    c75e:	7812      	ldrb	r2, [r2, #0]
    c760:	429a      	cmp	r2, r3
    c762:	d000      	beq.n	c766 <process_recieved_packet+0xd3e>
    c764:	e0cb      	b.n	c8fe <process_recieved_packet+0xed6>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[5] << 8) | vesc_revieve_packet.payload[6];
    c766:	4b69      	ldr	r3, [pc, #420]	; (c90c <process_recieved_packet+0xee4>)
    c768:	7a1b      	ldrb	r3, [r3, #8]
    c76a:	021b      	lsls	r3, r3, #8
    c76c:	b21a      	sxth	r2, r3
    c76e:	4b67      	ldr	r3, [pc, #412]	; (c90c <process_recieved_packet+0xee4>)
    c770:	7a5b      	ldrb	r3, [r3, #9]
    c772:	b21b      	sxth	r3, r3
    c774:	4313      	orrs	r3, r2
    c776:	b21a      	sxth	r2, r3
    c778:	4b65      	ldr	r3, [pc, #404]	; (c910 <process_recieved_packet+0xee8>)
    c77a:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[7] << 24) | (vesc_revieve_packet.payload[8] << 16) | (vesc_revieve_packet.payload[9] << 8) | vesc_revieve_packet.payload[10];
    c77c:	4b63      	ldr	r3, [pc, #396]	; (c90c <process_recieved_packet+0xee4>)
    c77e:	7a9b      	ldrb	r3, [r3, #10]
    c780:	061a      	lsls	r2, r3, #24
    c782:	4b62      	ldr	r3, [pc, #392]	; (c90c <process_recieved_packet+0xee4>)
    c784:	7adb      	ldrb	r3, [r3, #11]
    c786:	041b      	lsls	r3, r3, #16
    c788:	431a      	orrs	r2, r3
    c78a:	4b60      	ldr	r3, [pc, #384]	; (c90c <process_recieved_packet+0xee4>)
    c78c:	7b1b      	ldrb	r3, [r3, #12]
    c78e:	021b      	lsls	r3, r3, #8
    c790:	4313      	orrs	r3, r2
    c792:	4a5e      	ldr	r2, [pc, #376]	; (c90c <process_recieved_packet+0xee4>)
    c794:	7b52      	ldrb	r2, [r2, #13]
    c796:	431a      	orrs	r2, r3
    c798:	4b5d      	ldr	r3, [pc, #372]	; (c910 <process_recieved_packet+0xee8>)
    c79a:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[11] << 24) | (vesc_revieve_packet.payload[12] << 16) | (vesc_revieve_packet.payload[13] << 8) | vesc_revieve_packet.payload[14];
    c79c:	4b5b      	ldr	r3, [pc, #364]	; (c90c <process_recieved_packet+0xee4>)
    c79e:	7b9b      	ldrb	r3, [r3, #14]
    c7a0:	061a      	lsls	r2, r3, #24
    c7a2:	4b5a      	ldr	r3, [pc, #360]	; (c90c <process_recieved_packet+0xee4>)
    c7a4:	7bdb      	ldrb	r3, [r3, #15]
    c7a6:	041b      	lsls	r3, r3, #16
    c7a8:	431a      	orrs	r2, r3
    c7aa:	4b58      	ldr	r3, [pc, #352]	; (c90c <process_recieved_packet+0xee4>)
    c7ac:	7c1b      	ldrb	r3, [r3, #16]
    c7ae:	021b      	lsls	r3, r3, #8
    c7b0:	4313      	orrs	r3, r2
    c7b2:	4a56      	ldr	r2, [pc, #344]	; (c90c <process_recieved_packet+0xee4>)
    c7b4:	7c52      	ldrb	r2, [r2, #17]
    c7b6:	431a      	orrs	r2, r3
    c7b8:	4b55      	ldr	r3, [pc, #340]	; (c910 <process_recieved_packet+0xee8>)
    c7ba:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[15] << 8) | vesc_revieve_packet.payload[16];
    c7bc:	4b53      	ldr	r3, [pc, #332]	; (c90c <process_recieved_packet+0xee4>)
    c7be:	7c9b      	ldrb	r3, [r3, #18]
    c7c0:	021b      	lsls	r3, r3, #8
    c7c2:	b21a      	sxth	r2, r3
    c7c4:	4b51      	ldr	r3, [pc, #324]	; (c90c <process_recieved_packet+0xee4>)
    c7c6:	7cdb      	ldrb	r3, [r3, #19]
    c7c8:	b21b      	sxth	r3, r3
    c7ca:	4313      	orrs	r3, r2
    c7cc:	b21a      	sxth	r2, r3
    c7ce:	4b50      	ldr	r3, [pc, #320]	; (c910 <process_recieved_packet+0xee8>)
    c7d0:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[17] << 24) | (vesc_revieve_packet.payload[18] << 16) | (vesc_revieve_packet.payload[19] << 8) | vesc_revieve_packet.payload[20];
    c7d2:	4b4e      	ldr	r3, [pc, #312]	; (c90c <process_recieved_packet+0xee4>)
    c7d4:	7d1b      	ldrb	r3, [r3, #20]
    c7d6:	061a      	lsls	r2, r3, #24
    c7d8:	4b4c      	ldr	r3, [pc, #304]	; (c90c <process_recieved_packet+0xee4>)
    c7da:	7d5b      	ldrb	r3, [r3, #21]
    c7dc:	041b      	lsls	r3, r3, #16
    c7de:	431a      	orrs	r2, r3
    c7e0:	4b4a      	ldr	r3, [pc, #296]	; (c90c <process_recieved_packet+0xee4>)
    c7e2:	7d9b      	ldrb	r3, [r3, #22]
    c7e4:	021b      	lsls	r3, r3, #8
    c7e6:	4313      	orrs	r3, r2
    c7e8:	4a48      	ldr	r2, [pc, #288]	; (c90c <process_recieved_packet+0xee4>)
    c7ea:	7dd2      	ldrb	r2, [r2, #23]
    c7ec:	431a      	orrs	r2, r3
    c7ee:	4b48      	ldr	r3, [pc, #288]	; (c910 <process_recieved_packet+0xee8>)
    c7f0:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[21] << 8) | vesc_revieve_packet.payload[22];
    c7f2:	4b46      	ldr	r3, [pc, #280]	; (c90c <process_recieved_packet+0xee4>)
    c7f4:	7e1b      	ldrb	r3, [r3, #24]
    c7f6:	021b      	lsls	r3, r3, #8
    c7f8:	b21a      	sxth	r2, r3
    c7fa:	4b44      	ldr	r3, [pc, #272]	; (c90c <process_recieved_packet+0xee4>)
    c7fc:	7e5b      	ldrb	r3, [r3, #25]
    c7fe:	b21b      	sxth	r3, r3
    c800:	4313      	orrs	r3, r2
    c802:	b21a      	sxth	r2, r3
    c804:	4b42      	ldr	r3, [pc, #264]	; (c910 <process_recieved_packet+0xee8>)
    c806:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[23] << 24) | (vesc_revieve_packet.payload[24] << 16) | (vesc_revieve_packet.payload[25] << 8) | vesc_revieve_packet.payload[26])*10;
    c808:	4b40      	ldr	r3, [pc, #256]	; (c90c <process_recieved_packet+0xee4>)
    c80a:	7e9b      	ldrb	r3, [r3, #26]
    c80c:	061a      	lsls	r2, r3, #24
    c80e:	4b3f      	ldr	r3, [pc, #252]	; (c90c <process_recieved_packet+0xee4>)
    c810:	7edb      	ldrb	r3, [r3, #27]
    c812:	041b      	lsls	r3, r3, #16
    c814:	431a      	orrs	r2, r3
    c816:	4b3d      	ldr	r3, [pc, #244]	; (c90c <process_recieved_packet+0xee4>)
    c818:	7f1b      	ldrb	r3, [r3, #28]
    c81a:	021b      	lsls	r3, r3, #8
    c81c:	4313      	orrs	r3, r2
    c81e:	4a3b      	ldr	r2, [pc, #236]	; (c90c <process_recieved_packet+0xee4>)
    c820:	7f52      	ldrb	r2, [r2, #29]
    c822:	431a      	orrs	r2, r3
    c824:	0013      	movs	r3, r2
    c826:	009b      	lsls	r3, r3, #2
    c828:	189b      	adds	r3, r3, r2
    c82a:	005b      	lsls	r3, r3, #1
    c82c:	001a      	movs	r2, r3
    c82e:	4b38      	ldr	r3, [pc, #224]	; (c910 <process_recieved_packet+0xee8>)
    c830:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[27] << 24) | (vesc_revieve_packet.payload[28] << 16) | (vesc_revieve_packet.payload[29] << 8) | vesc_revieve_packet.payload[30])*10;
    c832:	4b36      	ldr	r3, [pc, #216]	; (c90c <process_recieved_packet+0xee4>)
    c834:	7f9b      	ldrb	r3, [r3, #30]
    c836:	061a      	lsls	r2, r3, #24
    c838:	4b34      	ldr	r3, [pc, #208]	; (c90c <process_recieved_packet+0xee4>)
    c83a:	7fdb      	ldrb	r3, [r3, #31]
    c83c:	041b      	lsls	r3, r3, #16
    c83e:	431a      	orrs	r2, r3
    c840:	4b32      	ldr	r3, [pc, #200]	; (c90c <process_recieved_packet+0xee4>)
    c842:	2120      	movs	r1, #32
    c844:	5c5b      	ldrb	r3, [r3, r1]
    c846:	021b      	lsls	r3, r3, #8
    c848:	4313      	orrs	r3, r2
    c84a:	4a30      	ldr	r2, [pc, #192]	; (c90c <process_recieved_packet+0xee4>)
    c84c:	2121      	movs	r1, #33	; 0x21
    c84e:	5c52      	ldrb	r2, [r2, r1]
    c850:	431a      	orrs	r2, r3
    c852:	0013      	movs	r3, r2
    c854:	009b      	lsls	r3, r3, #2
    c856:	189b      	adds	r3, r3, r2
    c858:	005b      	lsls	r3, r3, #1
    c85a:	001a      	movs	r2, r3
    c85c:	4b2c      	ldr	r3, [pc, #176]	; (c910 <process_recieved_packet+0xee8>)
    c85e:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[31] << 24) | (vesc_revieve_packet.payload[32] << 16) | (vesc_revieve_packet.payload[33] << 8) | vesc_revieve_packet.payload[34])/100;
    c860:	4b2a      	ldr	r3, [pc, #168]	; (c90c <process_recieved_packet+0xee4>)
    c862:	2222      	movs	r2, #34	; 0x22
    c864:	5c9b      	ldrb	r3, [r3, r2]
    c866:	061a      	lsls	r2, r3, #24
    c868:	4b28      	ldr	r3, [pc, #160]	; (c90c <process_recieved_packet+0xee4>)
    c86a:	2123      	movs	r1, #35	; 0x23
    c86c:	5c5b      	ldrb	r3, [r3, r1]
    c86e:	041b      	lsls	r3, r3, #16
    c870:	431a      	orrs	r2, r3
    c872:	4b26      	ldr	r3, [pc, #152]	; (c90c <process_recieved_packet+0xee4>)
    c874:	2124      	movs	r1, #36	; 0x24
    c876:	5c5b      	ldrb	r3, [r3, r1]
    c878:	021b      	lsls	r3, r3, #8
    c87a:	4313      	orrs	r3, r2
    c87c:	4a23      	ldr	r2, [pc, #140]	; (c90c <process_recieved_packet+0xee4>)
    c87e:	2125      	movs	r1, #37	; 0x25
    c880:	5c52      	ldrb	r2, [r2, r1]
    c882:	431a      	orrs	r2, r3
    c884:	4b23      	ldr	r3, [pc, #140]	; (c914 <process_recieved_packet+0xeec>)
    c886:	2164      	movs	r1, #100	; 0x64
    c888:	0010      	movs	r0, r2
    c88a:	4798      	blx	r3
    c88c:	0003      	movs	r3, r0
    c88e:	001a      	movs	r2, r3
    c890:	4b1f      	ldr	r3, [pc, #124]	; (c910 <process_recieved_packet+0xee8>)
    c892:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[35] << 24) | (vesc_revieve_packet.payload[36] << 16) | (vesc_revieve_packet.payload[37] << 8) | vesc_revieve_packet.payload[38])/100;
    c894:	4b1d      	ldr	r3, [pc, #116]	; (c90c <process_recieved_packet+0xee4>)
    c896:	2226      	movs	r2, #38	; 0x26
    c898:	5c9b      	ldrb	r3, [r3, r2]
    c89a:	061a      	lsls	r2, r3, #24
    c89c:	4b1b      	ldr	r3, [pc, #108]	; (c90c <process_recieved_packet+0xee4>)
    c89e:	2127      	movs	r1, #39	; 0x27
    c8a0:	5c5b      	ldrb	r3, [r3, r1]
    c8a2:	041b      	lsls	r3, r3, #16
    c8a4:	431a      	orrs	r2, r3
    c8a6:	4b19      	ldr	r3, [pc, #100]	; (c90c <process_recieved_packet+0xee4>)
    c8a8:	2128      	movs	r1, #40	; 0x28
    c8aa:	5c5b      	ldrb	r3, [r3, r1]
    c8ac:	021b      	lsls	r3, r3, #8
    c8ae:	4313      	orrs	r3, r2
    c8b0:	4a16      	ldr	r2, [pc, #88]	; (c90c <process_recieved_packet+0xee4>)
    c8b2:	2129      	movs	r1, #41	; 0x29
    c8b4:	5c52      	ldrb	r2, [r2, r1]
    c8b6:	431a      	orrs	r2, r3
    c8b8:	4b16      	ldr	r3, [pc, #88]	; (c914 <process_recieved_packet+0xeec>)
    c8ba:	2164      	movs	r1, #100	; 0x64
    c8bc:	0010      	movs	r0, r2
    c8be:	4798      	blx	r3
    c8c0:	0003      	movs	r3, r0
    c8c2:	001a      	movs	r2, r3
    c8c4:	4b12      	ldr	r3, [pc, #72]	; (c910 <process_recieved_packet+0xee8>)
    c8c6:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
    c8c8:	4b10      	ldr	r3, [pc, #64]	; (c90c <process_recieved_packet+0xee4>)
    c8ca:	222a      	movs	r2, #42	; 0x2a
    c8cc:	5c9b      	ldrb	r3, [r3, r2]
    c8ce:	061a      	lsls	r2, r3, #24
    c8d0:	4b0e      	ldr	r3, [pc, #56]	; (c90c <process_recieved_packet+0xee4>)
    c8d2:	212b      	movs	r1, #43	; 0x2b
    c8d4:	5c5b      	ldrb	r3, [r3, r1]
    c8d6:	041b      	lsls	r3, r3, #16
    c8d8:	431a      	orrs	r2, r3
    c8da:	4b0c      	ldr	r3, [pc, #48]	; (c90c <process_recieved_packet+0xee4>)
    c8dc:	212c      	movs	r1, #44	; 0x2c
    c8de:	5c5b      	ldrb	r3, [r3, r1]
    c8e0:	021b      	lsls	r3, r3, #8
    c8e2:	4313      	orrs	r3, r2
    c8e4:	4a09      	ldr	r2, [pc, #36]	; (c90c <process_recieved_packet+0xee4>)
    c8e6:	212d      	movs	r1, #45	; 0x2d
    c8e8:	5c52      	ldrb	r2, [r2, r1]
    c8ea:	431a      	orrs	r2, r3
    c8ec:	4b08      	ldr	r3, [pc, #32]	; (c910 <process_recieved_packet+0xee8>)
    c8ee:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
    c8f0:	4b06      	ldr	r3, [pc, #24]	; (c90c <process_recieved_packet+0xee4>)
    c8f2:	222e      	movs	r2, #46	; 0x2e
    c8f4:	5c9b      	ldrb	r3, [r3, r2]
    c8f6:	b259      	sxtb	r1, r3
    c8f8:	4b05      	ldr	r3, [pc, #20]	; (c910 <process_recieved_packet+0xee8>)
    c8fa:	222c      	movs	r2, #44	; 0x2c
    c8fc:	5499      	strb	r1, [r3, r2]
}
    c8fe:	46c0      	nop			; (mov r8, r8)
    c900:	46bd      	mov	sp, r7
    c902:	b002      	add	sp, #8
    c904:	bd80      	pop	{r7, pc}
    c906:	46c0      	nop			; (mov r8, r8)
    c908:	20000341 	.word	0x20000341
    c90c:	20000ce0 	.word	0x20000ce0
    c910:	20000958 	.word	0x20000958
    c914:	0001411d 	.word	0x0001411d

0000c918 <buffer_get_float32_auto>:

float buffer_get_float32_auto(uint8_t *buffer, int8_t index) {
    c918:	b590      	push	{r4, r7, lr}
    c91a:	b089      	sub	sp, #36	; 0x24
    c91c:	af00      	add	r7, sp, #0
    c91e:	6078      	str	r0, [r7, #4]
    c920:	000a      	movs	r2, r1
    c922:	1cfb      	adds	r3, r7, #3
    c924:	701a      	strb	r2, [r3, #0]
	uint32_t res = ((uint32_t) buffer[index]) << 24 | ((uint32_t) buffer[index+1]) << 16 | ((uint32_t) buffer[index+2]) << 8 | ((uint32_t) buffer[index+3]);
    c926:	1cfb      	adds	r3, r7, #3
    c928:	781b      	ldrb	r3, [r3, #0]
    c92a:	b25b      	sxtb	r3, r3
    c92c:	687a      	ldr	r2, [r7, #4]
    c92e:	18d3      	adds	r3, r2, r3
    c930:	781b      	ldrb	r3, [r3, #0]
    c932:	061a      	lsls	r2, r3, #24
    c934:	1cfb      	adds	r3, r7, #3
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	b25b      	sxtb	r3, r3
    c93a:	3301      	adds	r3, #1
    c93c:	6879      	ldr	r1, [r7, #4]
    c93e:	18cb      	adds	r3, r1, r3
    c940:	781b      	ldrb	r3, [r3, #0]
    c942:	041b      	lsls	r3, r3, #16
    c944:	431a      	orrs	r2, r3
    c946:	1cfb      	adds	r3, r7, #3
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	b25b      	sxtb	r3, r3
    c94c:	3302      	adds	r3, #2
    c94e:	6879      	ldr	r1, [r7, #4]
    c950:	18cb      	adds	r3, r1, r3
    c952:	781b      	ldrb	r3, [r3, #0]
    c954:	021b      	lsls	r3, r3, #8
    c956:	4313      	orrs	r3, r2
    c958:	1cfa      	adds	r2, r7, #3
    c95a:	7812      	ldrb	r2, [r2, #0]
    c95c:	b252      	sxtb	r2, r2
    c95e:	3203      	adds	r2, #3
    c960:	6879      	ldr	r1, [r7, #4]
    c962:	188a      	adds	r2, r1, r2
    c964:	7812      	ldrb	r2, [r2, #0]
    c966:	4313      	orrs	r3, r2
    c968:	617b      	str	r3, [r7, #20]

	int e = (res >> 23) & 0xFF;
    c96a:	697b      	ldr	r3, [r7, #20]
    c96c:	0ddb      	lsrs	r3, r3, #23
    c96e:	001a      	movs	r2, r3
    c970:	23ff      	movs	r3, #255	; 0xff
    c972:	4013      	ands	r3, r2
    c974:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
    c976:	697b      	ldr	r3, [r7, #20]
    c978:	025b      	lsls	r3, r3, #9
    c97a:	0a5b      	lsrs	r3, r3, #9
    c97c:	613b      	str	r3, [r7, #16]
	bool neg = res & (1U << 31);
    c97e:	697b      	ldr	r3, [r7, #20]
    c980:	0fdb      	lsrs	r3, r3, #31
    c982:	07da      	lsls	r2, r3, #31
    c984:	230f      	movs	r3, #15
    c986:	18fb      	adds	r3, r7, r3
    c988:	1e51      	subs	r1, r2, #1
    c98a:	418a      	sbcs	r2, r1
    c98c:	701a      	strb	r2, [r3, #0]

	float sig = 0.0;
    c98e:	2300      	movs	r3, #0
    c990:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
    c992:	69fb      	ldr	r3, [r7, #28]
    c994:	2b00      	cmp	r3, #0
    c996:	d102      	bne.n	c99e <buffer_get_float32_auto+0x86>
    c998:	693b      	ldr	r3, [r7, #16]
    c99a:	2b00      	cmp	r3, #0
    c99c:	d01f      	beq.n	c9de <buffer_get_float32_auto+0xc6>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
    c99e:	4b1a      	ldr	r3, [pc, #104]	; (ca08 <buffer_get_float32_auto+0xf0>)
    c9a0:	6938      	ldr	r0, [r7, #16]
    c9a2:	4798      	blx	r3
    c9a4:	1c02      	adds	r2, r0, #0
    c9a6:	4b19      	ldr	r3, [pc, #100]	; (ca0c <buffer_get_float32_auto+0xf4>)
    c9a8:	1c10      	adds	r0, r2, #0
    c9aa:	4798      	blx	r3
    c9ac:	4c18      	ldr	r4, [pc, #96]	; (ca10 <buffer_get_float32_auto+0xf8>)
    c9ae:	2200      	movs	r2, #0
    c9b0:	4b18      	ldr	r3, [pc, #96]	; (ca14 <buffer_get_float32_auto+0xfc>)
    c9b2:	47a0      	blx	r4
    c9b4:	0003      	movs	r3, r0
    c9b6:	000c      	movs	r4, r1
    c9b8:	0018      	movs	r0, r3
    c9ba:	0021      	movs	r1, r4
    c9bc:	4c16      	ldr	r4, [pc, #88]	; (ca18 <buffer_get_float32_auto+0x100>)
    c9be:	2200      	movs	r2, #0
    c9c0:	4b16      	ldr	r3, [pc, #88]	; (ca1c <buffer_get_float32_auto+0x104>)
    c9c2:	47a0      	blx	r4
    c9c4:	0003      	movs	r3, r0
    c9c6:	000c      	movs	r4, r1
    c9c8:	0019      	movs	r1, r3
    c9ca:	0022      	movs	r2, r4
    c9cc:	4b14      	ldr	r3, [pc, #80]	; (ca20 <buffer_get_float32_auto+0x108>)
    c9ce:	0008      	movs	r0, r1
    c9d0:	0011      	movs	r1, r2
    c9d2:	4798      	blx	r3
    c9d4:	1c03      	adds	r3, r0, #0
    c9d6:	61bb      	str	r3, [r7, #24]
		e -= 126;
    c9d8:	69fb      	ldr	r3, [r7, #28]
    c9da:	3b7e      	subs	r3, #126	; 0x7e
    c9dc:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
    c9de:	230f      	movs	r3, #15
    c9e0:	18fb      	adds	r3, r7, r3
    c9e2:	781b      	ldrb	r3, [r3, #0]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d004      	beq.n	c9f2 <buffer_get_float32_auto+0xda>
		sig = -sig;
    c9e8:	69bb      	ldr	r3, [r7, #24]
    c9ea:	2280      	movs	r2, #128	; 0x80
    c9ec:	0612      	lsls	r2, r2, #24
    c9ee:	4053      	eors	r3, r2
    c9f0:	61bb      	str	r3, [r7, #24]
	}
	
	return ldexpf(sig, e);
    c9f2:	69fa      	ldr	r2, [r7, #28]
    c9f4:	69bb      	ldr	r3, [r7, #24]
    c9f6:	0011      	movs	r1, r2
    c9f8:	1c18      	adds	r0, r3, #0
    c9fa:	4b0a      	ldr	r3, [pc, #40]	; (ca24 <buffer_get_float32_auto+0x10c>)
    c9fc:	4798      	blx	r3
    c9fe:	1c03      	adds	r3, r0, #0
}
    ca00:	1c18      	adds	r0, r3, #0
    ca02:	46bd      	mov	sp, r7
    ca04:	b009      	add	sp, #36	; 0x24
    ca06:	bd90      	pop	{r4, r7, pc}
    ca08:	00015201 	.word	0x00015201
    ca0c:	00016d9d 	.word	0x00016d9d
    ca10:	000158ad 	.word	0x000158ad
    ca14:	41700000 	.word	0x41700000
    ca18:	0001528d 	.word	0x0001528d
    ca1c:	3fe00000 	.word	0x3fe00000
    ca20:	00016e41 	.word	0x00016e41
    ca24:	00013ed9 	.word	0x00013ed9

0000ca28 <vesc_get_fw_version>:


void vesc_get_fw_version(){
    ca28:	b590      	push	{r4, r7, lr}
    ca2a:	4c2d      	ldr	r4, [pc, #180]	; (cae0 <vesc_get_fw_version+0xb8>)
    ca2c:	44a5      	add	sp, r4
    ca2e:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    ca30:	4b2c      	ldr	r3, [pc, #176]	; (cae4 <vesc_get_fw_version+0xbc>)
    ca32:	2282      	movs	r2, #130	; 0x82
    ca34:	0092      	lsls	r2, r2, #2
    ca36:	4694      	mov	ip, r2
    ca38:	44bc      	add	ip, r7
    ca3a:	4463      	add	r3, ip
    ca3c:	2202      	movs	r2, #2
    ca3e:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    ca40:	4b28      	ldr	r3, [pc, #160]	; (cae4 <vesc_get_fw_version+0xbc>)
    ca42:	2282      	movs	r2, #130	; 0x82
    ca44:	0092      	lsls	r2, r2, #2
    ca46:	4694      	mov	ip, r2
    ca48:	44bc      	add	ip, r7
    ca4a:	4463      	add	r3, ip
    ca4c:	2201      	movs	r2, #1
    ca4e:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_FW_VERSION;
    ca50:	4b25      	ldr	r3, [pc, #148]	; (cae8 <vesc_get_fw_version+0xc0>)
    ca52:	781a      	ldrb	r2, [r3, #0]
    ca54:	4b23      	ldr	r3, [pc, #140]	; (cae4 <vesc_get_fw_version+0xbc>)
    ca56:	2182      	movs	r1, #130	; 0x82
    ca58:	0089      	lsls	r1, r1, #2
    ca5a:	468c      	mov	ip, r1
    ca5c:	44bc      	add	ip, r7
    ca5e:	4463      	add	r3, ip
    ca60:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    ca62:	4b22      	ldr	r3, [pc, #136]	; (caec <vesc_get_fw_version+0xc4>)
    ca64:	18fc      	adds	r4, r7, r3
    ca66:	003b      	movs	r3, r7
    ca68:	3303      	adds	r3, #3
    ca6a:	2101      	movs	r1, #1
    ca6c:	0018      	movs	r0, r3
    ca6e:	4b20      	ldr	r3, [pc, #128]	; (caf0 <vesc_get_fw_version+0xc8>)
    ca70:	4798      	blx	r3
    ca72:	0003      	movs	r3, r0
    ca74:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    ca76:	4b1d      	ldr	r3, [pc, #116]	; (caec <vesc_get_fw_version+0xc4>)
    ca78:	18fb      	adds	r3, r7, r3
    ca7a:	881b      	ldrh	r3, [r3, #0]
    ca7c:	0a1b      	lsrs	r3, r3, #8
    ca7e:	b29b      	uxth	r3, r3
    ca80:	b2d9      	uxtb	r1, r3
    ca82:	4b18      	ldr	r3, [pc, #96]	; (cae4 <vesc_get_fw_version+0xbc>)
    ca84:	2282      	movs	r2, #130	; 0x82
    ca86:	0092      	lsls	r2, r2, #2
    ca88:	4694      	mov	ip, r2
    ca8a:	44bc      	add	ip, r7
    ca8c:	4463      	add	r3, ip
    ca8e:	4a19      	ldr	r2, [pc, #100]	; (caf4 <vesc_get_fw_version+0xcc>)
    ca90:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    ca92:	4b16      	ldr	r3, [pc, #88]	; (caec <vesc_get_fw_version+0xc4>)
    ca94:	18fb      	adds	r3, r7, r3
    ca96:	881b      	ldrh	r3, [r3, #0]
    ca98:	b2d9      	uxtb	r1, r3
    ca9a:	4b12      	ldr	r3, [pc, #72]	; (cae4 <vesc_get_fw_version+0xbc>)
    ca9c:	2282      	movs	r2, #130	; 0x82
    ca9e:	0092      	lsls	r2, r2, #2
    caa0:	18ba      	adds	r2, r7, r2
    caa2:	18d2      	adds	r2, r2, r3
    caa4:	2381      	movs	r3, #129	; 0x81
    caa6:	009b      	lsls	r3, r3, #2
    caa8:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    caaa:	4b0e      	ldr	r3, [pc, #56]	; (cae4 <vesc_get_fw_version+0xbc>)
    caac:	2282      	movs	r2, #130	; 0x82
    caae:	0092      	lsls	r2, r2, #2
    cab0:	18ba      	adds	r2, r7, r2
    cab2:	18d4      	adds	r4, r2, r3
    cab4:	466b      	mov	r3, sp
    cab6:	0018      	movs	r0, r3
    cab8:	0021      	movs	r1, r4
    caba:	3110      	adds	r1, #16
    cabc:	23fb      	movs	r3, #251	; 0xfb
    cabe:	005b      	lsls	r3, r3, #1
    cac0:	001a      	movs	r2, r3
    cac2:	4b0d      	ldr	r3, [pc, #52]	; (caf8 <vesc_get_fw_version+0xd0>)
    cac4:	4798      	blx	r3
    cac6:	6820      	ldr	r0, [r4, #0]
    cac8:	6861      	ldr	r1, [r4, #4]
    caca:	68a2      	ldr	r2, [r4, #8]
    cacc:	68e3      	ldr	r3, [r4, #12]
    cace:	4c0b      	ldr	r4, [pc, #44]	; (cafc <vesc_get_fw_version+0xd4>)
    cad0:	47a0      	blx	r4
}
    cad2:	46c0      	nop			; (mov r8, r8)
    cad4:	46bd      	mov	sp, r7
    cad6:	2383      	movs	r3, #131	; 0x83
    cad8:	009b      	lsls	r3, r3, #2
    cada:	449d      	add	sp, r3
    cadc:	bd90      	pop	{r4, r7, pc}
    cade:	46c0      	nop			; (mov r8, r8)
    cae0:	fffffbfc 	.word	0xfffffbfc
    cae4:	fffffdf8 	.word	0xfffffdf8
    cae8:	2000033a 	.word	0x2000033a
    caec:	00000206 	.word	0x00000206
    caf0:	0000b779 	.word	0x0000b779
    caf4:	00000203 	.word	0x00000203
    caf8:	00016fe5 	.word	0x00016fe5
    cafc:	0000b8cd 	.word	0x0000b8cd

0000cb00 <vesc_get_vals>:

void vesc_get_vals(){
    cb00:	b590      	push	{r4, r7, lr}
    cb02:	4c6a      	ldr	r4, [pc, #424]	; (ccac <vesc_get_vals+0x1ac>)
    cb04:	44a5      	add	sp, r4
    cb06:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;
	
	send_pack.start = 0x02;
    cb08:	4b69      	ldr	r3, [pc, #420]	; (ccb0 <vesc_get_vals+0x1b0>)
    cb0a:	2284      	movs	r2, #132	; 0x84
    cb0c:	0092      	lsls	r2, r2, #2
    cb0e:	4694      	mov	ip, r2
    cb10:	44bc      	add	ip, r7
    cb12:	4463      	add	r3, ip
    cb14:	2202      	movs	r2, #2
    cb16:	701a      	strb	r2, [r3, #0]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
    cb18:	4b66      	ldr	r3, [pc, #408]	; (ccb4 <vesc_get_vals+0x1b4>)
    cb1a:	2235      	movs	r2, #53	; 0x35
    cb1c:	5c9b      	ldrb	r3, [r3, r2]
    cb1e:	2b2f      	cmp	r3, #47	; 0x2f
    cb20:	d972      	bls.n	cc08 <vesc_get_vals+0x108>
    cb22:	4b64      	ldr	r3, [pc, #400]	; (ccb4 <vesc_get_vals+0x1b4>)
    cb24:	2235      	movs	r2, #53	; 0x35
    cb26:	5c9b      	ldrb	r3, [r3, r2]
    cb28:	2b63      	cmp	r3, #99	; 0x63
    cb2a:	d86d      	bhi.n	cc08 <vesc_get_vals+0x108>
		send_pack.len[0] = 0x05;
    cb2c:	4b60      	ldr	r3, [pc, #384]	; (ccb0 <vesc_get_vals+0x1b0>)
    cb2e:	2284      	movs	r2, #132	; 0x84
    cb30:	0092      	lsls	r2, r2, #2
    cb32:	4694      	mov	ip, r2
    cb34:	44bc      	add	ip, r7
    cb36:	4463      	add	r3, ip
    cb38:	2205      	movs	r2, #5
    cb3a:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES_SELECTIVE;
    cb3c:	4b5e      	ldr	r3, [pc, #376]	; (ccb8 <vesc_get_vals+0x1b8>)
    cb3e:	781a      	ldrb	r2, [r3, #0]
    cb40:	4b5b      	ldr	r3, [pc, #364]	; (ccb0 <vesc_get_vals+0x1b0>)
    cb42:	2184      	movs	r1, #132	; 0x84
    cb44:	0089      	lsls	r1, r1, #2
    cb46:	468c      	mov	ip, r1
    cb48:	44bc      	add	ip, r7
    cb4a:	4463      	add	r3, ip
    cb4c:	70da      	strb	r2, [r3, #3]
		int32_t mask = (uint32_t)0b0001011111111001101;
    cb4e:	4b5b      	ldr	r3, [pc, #364]	; (ccbc <vesc_get_vals+0x1bc>)
    cb50:	2283      	movs	r2, #131	; 0x83
    cb52:	0092      	lsls	r2, r2, #2
    cb54:	18ba      	adds	r2, r7, r2
    cb56:	6013      	str	r3, [r2, #0]
		send_pack.payload[1] = (mask>>24)&0xFF;
    cb58:	2383      	movs	r3, #131	; 0x83
    cb5a:	009b      	lsls	r3, r3, #2
    cb5c:	18fb      	adds	r3, r7, r3
    cb5e:	681b      	ldr	r3, [r3, #0]
    cb60:	0e1b      	lsrs	r3, r3, #24
    cb62:	b2da      	uxtb	r2, r3
    cb64:	4b52      	ldr	r3, [pc, #328]	; (ccb0 <vesc_get_vals+0x1b0>)
    cb66:	2184      	movs	r1, #132	; 0x84
    cb68:	0089      	lsls	r1, r1, #2
    cb6a:	468c      	mov	ip, r1
    cb6c:	44bc      	add	ip, r7
    cb6e:	4463      	add	r3, ip
    cb70:	711a      	strb	r2, [r3, #4]
		send_pack.payload[2] = (mask>>16)&0xFF;
    cb72:	2383      	movs	r3, #131	; 0x83
    cb74:	009b      	lsls	r3, r3, #2
    cb76:	18fb      	adds	r3, r7, r3
    cb78:	681b      	ldr	r3, [r3, #0]
    cb7a:	141b      	asrs	r3, r3, #16
    cb7c:	b2da      	uxtb	r2, r3
    cb7e:	4b4c      	ldr	r3, [pc, #304]	; (ccb0 <vesc_get_vals+0x1b0>)
    cb80:	2184      	movs	r1, #132	; 0x84
    cb82:	0089      	lsls	r1, r1, #2
    cb84:	468c      	mov	ip, r1
    cb86:	44bc      	add	ip, r7
    cb88:	4463      	add	r3, ip
    cb8a:	715a      	strb	r2, [r3, #5]
		send_pack.payload[3] = (mask>>8)&0xFF;
    cb8c:	2383      	movs	r3, #131	; 0x83
    cb8e:	009b      	lsls	r3, r3, #2
    cb90:	18fb      	adds	r3, r7, r3
    cb92:	681b      	ldr	r3, [r3, #0]
    cb94:	121b      	asrs	r3, r3, #8
    cb96:	b2da      	uxtb	r2, r3
    cb98:	4b45      	ldr	r3, [pc, #276]	; (ccb0 <vesc_get_vals+0x1b0>)
    cb9a:	2184      	movs	r1, #132	; 0x84
    cb9c:	0089      	lsls	r1, r1, #2
    cb9e:	468c      	mov	ip, r1
    cba0:	44bc      	add	ip, r7
    cba2:	4463      	add	r3, ip
    cba4:	719a      	strb	r2, [r3, #6]
		send_pack.payload[4] = (mask&0xFF);
    cba6:	2383      	movs	r3, #131	; 0x83
    cba8:	009b      	lsls	r3, r3, #2
    cbaa:	18fb      	adds	r3, r7, r3
    cbac:	681b      	ldr	r3, [r3, #0]
    cbae:	b2da      	uxtb	r2, r3
    cbb0:	4b3f      	ldr	r3, [pc, #252]	; (ccb0 <vesc_get_vals+0x1b0>)
    cbb2:	2184      	movs	r1, #132	; 0x84
    cbb4:	0089      	lsls	r1, r1, #2
    cbb6:	468c      	mov	ip, r1
    cbb8:	44bc      	add	ip, r7
    cbba:	4463      	add	r3, ip
    cbbc:	71da      	strb	r2, [r3, #7]
		uint16_t crc = crc16(send_pack.payload, 5);
    cbbe:	4b40      	ldr	r3, [pc, #256]	; (ccc0 <vesc_get_vals+0x1c0>)
    cbc0:	18fc      	adds	r4, r7, r3
    cbc2:	003b      	movs	r3, r7
    cbc4:	3303      	adds	r3, #3
    cbc6:	2105      	movs	r1, #5
    cbc8:	0018      	movs	r0, r3
    cbca:	4b3e      	ldr	r3, [pc, #248]	; (ccc4 <vesc_get_vals+0x1c4>)
    cbcc:	4798      	blx	r3
    cbce:	0003      	movs	r3, r0
    cbd0:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cbd2:	4b3b      	ldr	r3, [pc, #236]	; (ccc0 <vesc_get_vals+0x1c0>)
    cbd4:	18fb      	adds	r3, r7, r3
    cbd6:	881b      	ldrh	r3, [r3, #0]
    cbd8:	0a1b      	lsrs	r3, r3, #8
    cbda:	b29b      	uxth	r3, r3
    cbdc:	b2d9      	uxtb	r1, r3
    cbde:	4b34      	ldr	r3, [pc, #208]	; (ccb0 <vesc_get_vals+0x1b0>)
    cbe0:	2284      	movs	r2, #132	; 0x84
    cbe2:	0092      	lsls	r2, r2, #2
    cbe4:	4694      	mov	ip, r2
    cbe6:	44bc      	add	ip, r7
    cbe8:	4463      	add	r3, ip
    cbea:	4a37      	ldr	r2, [pc, #220]	; (ccc8 <vesc_get_vals+0x1c8>)
    cbec:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cbee:	4b34      	ldr	r3, [pc, #208]	; (ccc0 <vesc_get_vals+0x1c0>)
    cbf0:	18fb      	adds	r3, r7, r3
    cbf2:	881b      	ldrh	r3, [r3, #0]
    cbf4:	b2d9      	uxtb	r1, r3
    cbf6:	4b2e      	ldr	r3, [pc, #184]	; (ccb0 <vesc_get_vals+0x1b0>)
    cbf8:	2284      	movs	r2, #132	; 0x84
    cbfa:	0092      	lsls	r2, r2, #2
    cbfc:	18ba      	adds	r2, r7, r2
    cbfe:	18d2      	adds	r2, r2, r3
    cc00:	2381      	movs	r3, #129	; 0x81
    cc02:	009b      	lsls	r3, r3, #2
    cc04:	54d1      	strb	r1, [r2, r3]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
    cc06:	e037      	b.n	cc78 <vesc_get_vals+0x178>
	} else {
		send_pack.len[0] = 0x01;
    cc08:	4b29      	ldr	r3, [pc, #164]	; (ccb0 <vesc_get_vals+0x1b0>)
    cc0a:	2284      	movs	r2, #132	; 0x84
    cc0c:	0092      	lsls	r2, r2, #2
    cc0e:	4694      	mov	ip, r2
    cc10:	44bc      	add	ip, r7
    cc12:	4463      	add	r3, ip
    cc14:	2201      	movs	r2, #1
    cc16:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES;
    cc18:	4b2c      	ldr	r3, [pc, #176]	; (cccc <vesc_get_vals+0x1cc>)
    cc1a:	781a      	ldrb	r2, [r3, #0]
    cc1c:	4b24      	ldr	r3, [pc, #144]	; (ccb0 <vesc_get_vals+0x1b0>)
    cc1e:	2184      	movs	r1, #132	; 0x84
    cc20:	0089      	lsls	r1, r1, #2
    cc22:	468c      	mov	ip, r1
    cc24:	44bc      	add	ip, r7
    cc26:	4463      	add	r3, ip
    cc28:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
    cc2a:	2382      	movs	r3, #130	; 0x82
    cc2c:	009b      	lsls	r3, r3, #2
    cc2e:	18fc      	adds	r4, r7, r3
    cc30:	003b      	movs	r3, r7
    cc32:	3303      	adds	r3, #3
    cc34:	2101      	movs	r1, #1
    cc36:	0018      	movs	r0, r3
    cc38:	4b22      	ldr	r3, [pc, #136]	; (ccc4 <vesc_get_vals+0x1c4>)
    cc3a:	4798      	blx	r3
    cc3c:	0003      	movs	r3, r0
    cc3e:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cc40:	2382      	movs	r3, #130	; 0x82
    cc42:	009b      	lsls	r3, r3, #2
    cc44:	18fb      	adds	r3, r7, r3
    cc46:	881b      	ldrh	r3, [r3, #0]
    cc48:	0a1b      	lsrs	r3, r3, #8
    cc4a:	b29b      	uxth	r3, r3
    cc4c:	b2d9      	uxtb	r1, r3
    cc4e:	4b18      	ldr	r3, [pc, #96]	; (ccb0 <vesc_get_vals+0x1b0>)
    cc50:	2284      	movs	r2, #132	; 0x84
    cc52:	0092      	lsls	r2, r2, #2
    cc54:	4694      	mov	ip, r2
    cc56:	44bc      	add	ip, r7
    cc58:	4463      	add	r3, ip
    cc5a:	4a1b      	ldr	r2, [pc, #108]	; (ccc8 <vesc_get_vals+0x1c8>)
    cc5c:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cc5e:	2382      	movs	r3, #130	; 0x82
    cc60:	009b      	lsls	r3, r3, #2
    cc62:	18fb      	adds	r3, r7, r3
    cc64:	881b      	ldrh	r3, [r3, #0]
    cc66:	b2d9      	uxtb	r1, r3
    cc68:	4b11      	ldr	r3, [pc, #68]	; (ccb0 <vesc_get_vals+0x1b0>)
    cc6a:	2284      	movs	r2, #132	; 0x84
    cc6c:	0092      	lsls	r2, r2, #2
    cc6e:	18ba      	adds	r2, r7, r2
    cc70:	18d2      	adds	r2, r2, r3
    cc72:	2381      	movs	r3, #129	; 0x81
    cc74:	009b      	lsls	r3, r3, #2
    cc76:	54d1      	strb	r1, [r2, r3]
	}

	send_packet(send_pack);
    cc78:	4b0d      	ldr	r3, [pc, #52]	; (ccb0 <vesc_get_vals+0x1b0>)
    cc7a:	2284      	movs	r2, #132	; 0x84
    cc7c:	0092      	lsls	r2, r2, #2
    cc7e:	18ba      	adds	r2, r7, r2
    cc80:	18d4      	adds	r4, r2, r3
    cc82:	466b      	mov	r3, sp
    cc84:	0018      	movs	r0, r3
    cc86:	0021      	movs	r1, r4
    cc88:	3110      	adds	r1, #16
    cc8a:	23fb      	movs	r3, #251	; 0xfb
    cc8c:	005b      	lsls	r3, r3, #1
    cc8e:	001a      	movs	r2, r3
    cc90:	4b0f      	ldr	r3, [pc, #60]	; (ccd0 <vesc_get_vals+0x1d0>)
    cc92:	4798      	blx	r3
    cc94:	6820      	ldr	r0, [r4, #0]
    cc96:	6861      	ldr	r1, [r4, #4]
    cc98:	68a2      	ldr	r2, [r4, #8]
    cc9a:	68e3      	ldr	r3, [r4, #12]
    cc9c:	4c0d      	ldr	r4, [pc, #52]	; (ccd4 <vesc_get_vals+0x1d4>)
    cc9e:	47a0      	blx	r4
}
    cca0:	46c0      	nop			; (mov r8, r8)
    cca2:	46bd      	mov	sp, r7
    cca4:	2385      	movs	r3, #133	; 0x85
    cca6:	009b      	lsls	r3, r3, #2
    cca8:	449d      	add	sp, r3
    ccaa:	bd90      	pop	{r4, r7, pc}
    ccac:	fffffbf4 	.word	0xfffffbf4
    ccb0:	fffffdf0 	.word	0xfffffdf0
    ccb4:	20000958 	.word	0x20000958
    ccb8:	20000341 	.word	0x20000341
    ccbc:	0000bfcd 	.word	0x0000bfcd
    ccc0:	0000020a 	.word	0x0000020a
    ccc4:	0000b779 	.word	0x0000b779
    ccc8:	00000203 	.word	0x00000203
    cccc:	2000033b 	.word	0x2000033b
    ccd0:	00016fe5 	.word	0x00016fe5
    ccd4:	0000b8cd 	.word	0x0000b8cd

0000ccd8 <vesc_get_mcconf>:

void vesc_get_mcconf(){
    ccd8:	b590      	push	{r4, r7, lr}
    ccda:	4c2d      	ldr	r4, [pc, #180]	; (cd90 <vesc_get_mcconf+0xb8>)
    ccdc:	44a5      	add	sp, r4
    ccde:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cce0:	4b2c      	ldr	r3, [pc, #176]	; (cd94 <vesc_get_mcconf+0xbc>)
    cce2:	2282      	movs	r2, #130	; 0x82
    cce4:	0092      	lsls	r2, r2, #2
    cce6:	4694      	mov	ip, r2
    cce8:	44bc      	add	ip, r7
    ccea:	4463      	add	r3, ip
    ccec:	2202      	movs	r2, #2
    ccee:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    ccf0:	4b28      	ldr	r3, [pc, #160]	; (cd94 <vesc_get_mcconf+0xbc>)
    ccf2:	2282      	movs	r2, #130	; 0x82
    ccf4:	0092      	lsls	r2, r2, #2
    ccf6:	4694      	mov	ip, r2
    ccf8:	44bc      	add	ip, r7
    ccfa:	4463      	add	r3, ip
    ccfc:	2201      	movs	r2, #1
    ccfe:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_MCCONF;
    cd00:	4b25      	ldr	r3, [pc, #148]	; (cd98 <vesc_get_mcconf+0xc0>)
    cd02:	781a      	ldrb	r2, [r3, #0]
    cd04:	4b23      	ldr	r3, [pc, #140]	; (cd94 <vesc_get_mcconf+0xbc>)
    cd06:	2182      	movs	r1, #130	; 0x82
    cd08:	0089      	lsls	r1, r1, #2
    cd0a:	468c      	mov	ip, r1
    cd0c:	44bc      	add	ip, r7
    cd0e:	4463      	add	r3, ip
    cd10:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cd12:	4b22      	ldr	r3, [pc, #136]	; (cd9c <vesc_get_mcconf+0xc4>)
    cd14:	18fc      	adds	r4, r7, r3
    cd16:	003b      	movs	r3, r7
    cd18:	3303      	adds	r3, #3
    cd1a:	2101      	movs	r1, #1
    cd1c:	0018      	movs	r0, r3
    cd1e:	4b20      	ldr	r3, [pc, #128]	; (cda0 <vesc_get_mcconf+0xc8>)
    cd20:	4798      	blx	r3
    cd22:	0003      	movs	r3, r0
    cd24:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cd26:	4b1d      	ldr	r3, [pc, #116]	; (cd9c <vesc_get_mcconf+0xc4>)
    cd28:	18fb      	adds	r3, r7, r3
    cd2a:	881b      	ldrh	r3, [r3, #0]
    cd2c:	0a1b      	lsrs	r3, r3, #8
    cd2e:	b29b      	uxth	r3, r3
    cd30:	b2d9      	uxtb	r1, r3
    cd32:	4b18      	ldr	r3, [pc, #96]	; (cd94 <vesc_get_mcconf+0xbc>)
    cd34:	2282      	movs	r2, #130	; 0x82
    cd36:	0092      	lsls	r2, r2, #2
    cd38:	4694      	mov	ip, r2
    cd3a:	44bc      	add	ip, r7
    cd3c:	4463      	add	r3, ip
    cd3e:	4a19      	ldr	r2, [pc, #100]	; (cda4 <vesc_get_mcconf+0xcc>)
    cd40:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cd42:	4b16      	ldr	r3, [pc, #88]	; (cd9c <vesc_get_mcconf+0xc4>)
    cd44:	18fb      	adds	r3, r7, r3
    cd46:	881b      	ldrh	r3, [r3, #0]
    cd48:	b2d9      	uxtb	r1, r3
    cd4a:	4b12      	ldr	r3, [pc, #72]	; (cd94 <vesc_get_mcconf+0xbc>)
    cd4c:	2282      	movs	r2, #130	; 0x82
    cd4e:	0092      	lsls	r2, r2, #2
    cd50:	18ba      	adds	r2, r7, r2
    cd52:	18d2      	adds	r2, r2, r3
    cd54:	2381      	movs	r3, #129	; 0x81
    cd56:	009b      	lsls	r3, r3, #2
    cd58:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cd5a:	4b0e      	ldr	r3, [pc, #56]	; (cd94 <vesc_get_mcconf+0xbc>)
    cd5c:	2282      	movs	r2, #130	; 0x82
    cd5e:	0092      	lsls	r2, r2, #2
    cd60:	18ba      	adds	r2, r7, r2
    cd62:	18d4      	adds	r4, r2, r3
    cd64:	466b      	mov	r3, sp
    cd66:	0018      	movs	r0, r3
    cd68:	0021      	movs	r1, r4
    cd6a:	3110      	adds	r1, #16
    cd6c:	23fb      	movs	r3, #251	; 0xfb
    cd6e:	005b      	lsls	r3, r3, #1
    cd70:	001a      	movs	r2, r3
    cd72:	4b0d      	ldr	r3, [pc, #52]	; (cda8 <vesc_get_mcconf+0xd0>)
    cd74:	4798      	blx	r3
    cd76:	6820      	ldr	r0, [r4, #0]
    cd78:	6861      	ldr	r1, [r4, #4]
    cd7a:	68a2      	ldr	r2, [r4, #8]
    cd7c:	68e3      	ldr	r3, [r4, #12]
    cd7e:	4c0b      	ldr	r4, [pc, #44]	; (cdac <vesc_get_mcconf+0xd4>)
    cd80:	47a0      	blx	r4
}
    cd82:	46c0      	nop			; (mov r8, r8)
    cd84:	46bd      	mov	sp, r7
    cd86:	2383      	movs	r3, #131	; 0x83
    cd88:	009b      	lsls	r3, r3, #2
    cd8a:	449d      	add	sp, r3
    cd8c:	bd90      	pop	{r4, r7, pc}
    cd8e:	46c0      	nop			; (mov r8, r8)
    cd90:	fffffbfc 	.word	0xfffffbfc
    cd94:	fffffdf8 	.word	0xfffffdf8
    cd98:	2000033c 	.word	0x2000033c
    cd9c:	00000206 	.word	0x00000206
    cda0:	0000b779 	.word	0x0000b779
    cda4:	00000203 	.word	0x00000203
    cda8:	00016fe5 	.word	0x00016fe5
    cdac:	0000b8cd 	.word	0x0000b8cd

0000cdb0 <vesc_get_pwm>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_get_pwm(){
    cdb0:	b590      	push	{r4, r7, lr}
    cdb2:	4c2d      	ldr	r4, [pc, #180]	; (ce68 <vesc_get_pwm+0xb8>)
    cdb4:	44a5      	add	sp, r4
    cdb6:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cdb8:	4b2c      	ldr	r3, [pc, #176]	; (ce6c <vesc_get_pwm+0xbc>)
    cdba:	2282      	movs	r2, #130	; 0x82
    cdbc:	0092      	lsls	r2, r2, #2
    cdbe:	4694      	mov	ip, r2
    cdc0:	44bc      	add	ip, r7
    cdc2:	4463      	add	r3, ip
    cdc4:	2202      	movs	r2, #2
    cdc6:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cdc8:	4b28      	ldr	r3, [pc, #160]	; (ce6c <vesc_get_pwm+0xbc>)
    cdca:	2282      	movs	r2, #130	; 0x82
    cdcc:	0092      	lsls	r2, r2, #2
    cdce:	4694      	mov	ip, r2
    cdd0:	44bc      	add	ip, r7
    cdd2:	4463      	add	r3, ip
    cdd4:	2201      	movs	r2, #1
    cdd6:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_PPM;
    cdd8:	4b25      	ldr	r3, [pc, #148]	; (ce70 <vesc_get_pwm+0xc0>)
    cdda:	781a      	ldrb	r2, [r3, #0]
    cddc:	4b23      	ldr	r3, [pc, #140]	; (ce6c <vesc_get_pwm+0xbc>)
    cdde:	2182      	movs	r1, #130	; 0x82
    cde0:	0089      	lsls	r1, r1, #2
    cde2:	468c      	mov	ip, r1
    cde4:	44bc      	add	ip, r7
    cde6:	4463      	add	r3, ip
    cde8:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cdea:	4b22      	ldr	r3, [pc, #136]	; (ce74 <vesc_get_pwm+0xc4>)
    cdec:	18fc      	adds	r4, r7, r3
    cdee:	003b      	movs	r3, r7
    cdf0:	3303      	adds	r3, #3
    cdf2:	2101      	movs	r1, #1
    cdf4:	0018      	movs	r0, r3
    cdf6:	4b20      	ldr	r3, [pc, #128]	; (ce78 <vesc_get_pwm+0xc8>)
    cdf8:	4798      	blx	r3
    cdfa:	0003      	movs	r3, r0
    cdfc:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cdfe:	4b1d      	ldr	r3, [pc, #116]	; (ce74 <vesc_get_pwm+0xc4>)
    ce00:	18fb      	adds	r3, r7, r3
    ce02:	881b      	ldrh	r3, [r3, #0]
    ce04:	0a1b      	lsrs	r3, r3, #8
    ce06:	b29b      	uxth	r3, r3
    ce08:	b2d9      	uxtb	r1, r3
    ce0a:	4b18      	ldr	r3, [pc, #96]	; (ce6c <vesc_get_pwm+0xbc>)
    ce0c:	2282      	movs	r2, #130	; 0x82
    ce0e:	0092      	lsls	r2, r2, #2
    ce10:	4694      	mov	ip, r2
    ce12:	44bc      	add	ip, r7
    ce14:	4463      	add	r3, ip
    ce16:	4a19      	ldr	r2, [pc, #100]	; (ce7c <vesc_get_pwm+0xcc>)
    ce18:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    ce1a:	4b16      	ldr	r3, [pc, #88]	; (ce74 <vesc_get_pwm+0xc4>)
    ce1c:	18fb      	adds	r3, r7, r3
    ce1e:	881b      	ldrh	r3, [r3, #0]
    ce20:	b2d9      	uxtb	r1, r3
    ce22:	4b12      	ldr	r3, [pc, #72]	; (ce6c <vesc_get_pwm+0xbc>)
    ce24:	2282      	movs	r2, #130	; 0x82
    ce26:	0092      	lsls	r2, r2, #2
    ce28:	18ba      	adds	r2, r7, r2
    ce2a:	18d2      	adds	r2, r2, r3
    ce2c:	2381      	movs	r3, #129	; 0x81
    ce2e:	009b      	lsls	r3, r3, #2
    ce30:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    ce32:	4b0e      	ldr	r3, [pc, #56]	; (ce6c <vesc_get_pwm+0xbc>)
    ce34:	2282      	movs	r2, #130	; 0x82
    ce36:	0092      	lsls	r2, r2, #2
    ce38:	18ba      	adds	r2, r7, r2
    ce3a:	18d4      	adds	r4, r2, r3
    ce3c:	466b      	mov	r3, sp
    ce3e:	0018      	movs	r0, r3
    ce40:	0021      	movs	r1, r4
    ce42:	3110      	adds	r1, #16
    ce44:	23fb      	movs	r3, #251	; 0xfb
    ce46:	005b      	lsls	r3, r3, #1
    ce48:	001a      	movs	r2, r3
    ce4a:	4b0d      	ldr	r3, [pc, #52]	; (ce80 <vesc_get_pwm+0xd0>)
    ce4c:	4798      	blx	r3
    ce4e:	6820      	ldr	r0, [r4, #0]
    ce50:	6861      	ldr	r1, [r4, #4]
    ce52:	68a2      	ldr	r2, [r4, #8]
    ce54:	68e3      	ldr	r3, [r4, #12]
    ce56:	4c0b      	ldr	r4, [pc, #44]	; (ce84 <vesc_get_pwm+0xd4>)
    ce58:	47a0      	blx	r4
}
    ce5a:	46c0      	nop			; (mov r8, r8)
    ce5c:	46bd      	mov	sp, r7
    ce5e:	2383      	movs	r3, #131	; 0x83
    ce60:	009b      	lsls	r3, r3, #2
    ce62:	449d      	add	sp, r3
    ce64:	bd90      	pop	{r4, r7, pc}
    ce66:	46c0      	nop			; (mov r8, r8)
    ce68:	fffffbfc 	.word	0xfffffbfc
    ce6c:	fffffdf8 	.word	0xfffffdf8
    ce70:	2000033e 	.word	0x2000033e
    ce74:	00000206 	.word	0x00000206
    ce78:	0000b779 	.word	0x0000b779
    ce7c:	00000203 	.word	0x00000203
    ce80:	00016fe5 	.word	0x00016fe5
    ce84:	0000b8cd 	.word	0x0000b8cd

0000ce88 <vesc_get_chuck>:

void vesc_get_chuck(){
    ce88:	b590      	push	{r4, r7, lr}
    ce8a:	4c2d      	ldr	r4, [pc, #180]	; (cf40 <vesc_get_chuck+0xb8>)
    ce8c:	44a5      	add	sp, r4
    ce8e:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    ce90:	4b2c      	ldr	r3, [pc, #176]	; (cf44 <vesc_get_chuck+0xbc>)
    ce92:	2282      	movs	r2, #130	; 0x82
    ce94:	0092      	lsls	r2, r2, #2
    ce96:	4694      	mov	ip, r2
    ce98:	44bc      	add	ip, r7
    ce9a:	4463      	add	r3, ip
    ce9c:	2202      	movs	r2, #2
    ce9e:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cea0:	4b28      	ldr	r3, [pc, #160]	; (cf44 <vesc_get_chuck+0xbc>)
    cea2:	2282      	movs	r2, #130	; 0x82
    cea4:	0092      	lsls	r2, r2, #2
    cea6:	4694      	mov	ip, r2
    cea8:	44bc      	add	ip, r7
    ceaa:	4463      	add	r3, ip
    ceac:	2201      	movs	r2, #1
    ceae:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_CHUK;
    ceb0:	4b25      	ldr	r3, [pc, #148]	; (cf48 <vesc_get_chuck+0xc0>)
    ceb2:	781a      	ldrb	r2, [r3, #0]
    ceb4:	4b23      	ldr	r3, [pc, #140]	; (cf44 <vesc_get_chuck+0xbc>)
    ceb6:	2182      	movs	r1, #130	; 0x82
    ceb8:	0089      	lsls	r1, r1, #2
    ceba:	468c      	mov	ip, r1
    cebc:	44bc      	add	ip, r7
    cebe:	4463      	add	r3, ip
    cec0:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cec2:	4b22      	ldr	r3, [pc, #136]	; (cf4c <vesc_get_chuck+0xc4>)
    cec4:	18fc      	adds	r4, r7, r3
    cec6:	003b      	movs	r3, r7
    cec8:	3303      	adds	r3, #3
    ceca:	2101      	movs	r1, #1
    cecc:	0018      	movs	r0, r3
    cece:	4b20      	ldr	r3, [pc, #128]	; (cf50 <vesc_get_chuck+0xc8>)
    ced0:	4798      	blx	r3
    ced2:	0003      	movs	r3, r0
    ced4:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    ced6:	4b1d      	ldr	r3, [pc, #116]	; (cf4c <vesc_get_chuck+0xc4>)
    ced8:	18fb      	adds	r3, r7, r3
    ceda:	881b      	ldrh	r3, [r3, #0]
    cedc:	0a1b      	lsrs	r3, r3, #8
    cede:	b29b      	uxth	r3, r3
    cee0:	b2d9      	uxtb	r1, r3
    cee2:	4b18      	ldr	r3, [pc, #96]	; (cf44 <vesc_get_chuck+0xbc>)
    cee4:	2282      	movs	r2, #130	; 0x82
    cee6:	0092      	lsls	r2, r2, #2
    cee8:	4694      	mov	ip, r2
    ceea:	44bc      	add	ip, r7
    ceec:	4463      	add	r3, ip
    ceee:	4a19      	ldr	r2, [pc, #100]	; (cf54 <vesc_get_chuck+0xcc>)
    cef0:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cef2:	4b16      	ldr	r3, [pc, #88]	; (cf4c <vesc_get_chuck+0xc4>)
    cef4:	18fb      	adds	r3, r7, r3
    cef6:	881b      	ldrh	r3, [r3, #0]
    cef8:	b2d9      	uxtb	r1, r3
    cefa:	4b12      	ldr	r3, [pc, #72]	; (cf44 <vesc_get_chuck+0xbc>)
    cefc:	2282      	movs	r2, #130	; 0x82
    cefe:	0092      	lsls	r2, r2, #2
    cf00:	18ba      	adds	r2, r7, r2
    cf02:	18d2      	adds	r2, r2, r3
    cf04:	2381      	movs	r3, #129	; 0x81
    cf06:	009b      	lsls	r3, r3, #2
    cf08:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cf0a:	4b0e      	ldr	r3, [pc, #56]	; (cf44 <vesc_get_chuck+0xbc>)
    cf0c:	2282      	movs	r2, #130	; 0x82
    cf0e:	0092      	lsls	r2, r2, #2
    cf10:	18ba      	adds	r2, r7, r2
    cf12:	18d4      	adds	r4, r2, r3
    cf14:	466b      	mov	r3, sp
    cf16:	0018      	movs	r0, r3
    cf18:	0021      	movs	r1, r4
    cf1a:	3110      	adds	r1, #16
    cf1c:	23fb      	movs	r3, #251	; 0xfb
    cf1e:	005b      	lsls	r3, r3, #1
    cf20:	001a      	movs	r2, r3
    cf22:	4b0d      	ldr	r3, [pc, #52]	; (cf58 <vesc_get_chuck+0xd0>)
    cf24:	4798      	blx	r3
    cf26:	6820      	ldr	r0, [r4, #0]
    cf28:	6861      	ldr	r1, [r4, #4]
    cf2a:	68a2      	ldr	r2, [r4, #8]
    cf2c:	68e3      	ldr	r3, [r4, #12]
    cf2e:	4c0b      	ldr	r4, [pc, #44]	; (cf5c <vesc_get_chuck+0xd4>)
    cf30:	47a0      	blx	r4
}
    cf32:	46c0      	nop			; (mov r8, r8)
    cf34:	46bd      	mov	sp, r7
    cf36:	2383      	movs	r3, #131	; 0x83
    cf38:	009b      	lsls	r3, r3, #2
    cf3a:	449d      	add	sp, r3
    cf3c:	bd90      	pop	{r4, r7, pc}
    cf3e:	46c0      	nop			; (mov r8, r8)
    cf40:	fffffbfc 	.word	0xfffffbfc
    cf44:	fffffdf8 	.word	0xfffffdf8
    cf48:	2000033f 	.word	0x2000033f
    cf4c:	00000206 	.word	0x00000206
    cf50:	0000b779 	.word	0x0000b779
    cf54:	00000203 	.word	0x00000203
    cf58:	00016fe5 	.word	0x00016fe5
    cf5c:	0000b8cd 	.word	0x0000b8cd

0000cf60 <vesc_read_all>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_read_all(){
    cf60:	b580      	push	{r7, lr}
    cf62:	af00      	add	r7, sp, #0
	static uint8_t read_index = 0;
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
    cf64:	4b50      	ldr	r3, [pc, #320]	; (d0a8 <vesc_read_all+0x148>)
    cf66:	4798      	blx	r3
    cf68:	0002      	movs	r2, r0
    cf6a:	4b50      	ldr	r3, [pc, #320]	; (d0ac <vesc_read_all+0x14c>)
    cf6c:	681b      	ldr	r3, [r3, #0]
    cf6e:	1ad2      	subs	r2, r2, r3
    cf70:	4b4f      	ldr	r3, [pc, #316]	; (d0b0 <vesc_read_all+0x150>)
    cf72:	681b      	ldr	r3, [r3, #0]
    cf74:	429a      	cmp	r2, r3
    cf76:	d902      	bls.n	cf7e <vesc_read_all+0x1e>
		HOLD_FOR_REPLY = false;
    cf78:	4b4e      	ldr	r3, [pc, #312]	; (d0b4 <vesc_read_all+0x154>)
    cf7a:	2200      	movs	r2, #0
    cf7c:	701a      	strb	r2, [r3, #0]

	switch(read_index){
    cf7e:	4b4e      	ldr	r3, [pc, #312]	; (d0b8 <vesc_read_all+0x158>)
    cf80:	781b      	ldrb	r3, [r3, #0]
    cf82:	2b01      	cmp	r3, #1
    cf84:	d026      	beq.n	cfd4 <vesc_read_all+0x74>
    cf86:	dc02      	bgt.n	cf8e <vesc_read_all+0x2e>
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d005      	beq.n	cf98 <vesc_read_all+0x38>
    cf8c:	e07d      	b.n	d08a <vesc_read_all+0x12a>
    cf8e:	2b02      	cmp	r3, #2
    cf90:	d03e      	beq.n	d010 <vesc_read_all+0xb0>
    cf92:	2b03      	cmp	r3, #3
    cf94:	d05a      	beq.n	d04c <vesc_read_all+0xec>
    cf96:	e078      	b.n	d08a <vesc_read_all+0x12a>
		case 0:
		if(!READ_VESC_PWM){
    cf98:	4b48      	ldr	r3, [pc, #288]	; (d0bc <vesc_read_all+0x15c>)
    cf9a:	781b      	ldrb	r3, [r3, #0]
    cf9c:	2201      	movs	r2, #1
    cf9e:	4053      	eors	r3, r2
    cfa0:	b2db      	uxtb	r3, r3
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	d006      	beq.n	cfb4 <vesc_read_all+0x54>
			read_index++;
    cfa6:	4b44      	ldr	r3, [pc, #272]	; (d0b8 <vesc_read_all+0x158>)
    cfa8:	781b      	ldrb	r3, [r3, #0]
    cfaa:	3301      	adds	r3, #1
    cfac:	b2da      	uxtb	r2, r3
    cfae:	4b42      	ldr	r3, [pc, #264]	; (d0b8 <vesc_read_all+0x158>)
    cfb0:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_pwm();
		}
		break;
    cfb2:	e063      	b.n	d07c <vesc_read_all+0x11c>
		} else if(!HOLD_FOR_REPLY){
    cfb4:	4b3f      	ldr	r3, [pc, #252]	; (d0b4 <vesc_read_all+0x154>)
    cfb6:	781b      	ldrb	r3, [r3, #0]
    cfb8:	2201      	movs	r2, #1
    cfba:	4053      	eors	r3, r2
    cfbc:	b2db      	uxtb	r3, r3
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d05c      	beq.n	d07c <vesc_read_all+0x11c>
			read_index++;
    cfc2:	4b3d      	ldr	r3, [pc, #244]	; (d0b8 <vesc_read_all+0x158>)
    cfc4:	781b      	ldrb	r3, [r3, #0]
    cfc6:	3301      	adds	r3, #1
    cfc8:	b2da      	uxtb	r2, r3
    cfca:	4b3b      	ldr	r3, [pc, #236]	; (d0b8 <vesc_read_all+0x158>)
    cfcc:	701a      	strb	r2, [r3, #0]
			vesc_get_pwm();
    cfce:	4b3c      	ldr	r3, [pc, #240]	; (d0c0 <vesc_read_all+0x160>)
    cfd0:	4798      	blx	r3
		break;
    cfd2:	e053      	b.n	d07c <vesc_read_all+0x11c>
		case 1:
		if(!READ_VESC_FW){
    cfd4:	4b3b      	ldr	r3, [pc, #236]	; (d0c4 <vesc_read_all+0x164>)
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	2201      	movs	r2, #1
    cfda:	4053      	eors	r3, r2
    cfdc:	b2db      	uxtb	r3, r3
    cfde:	2b00      	cmp	r3, #0
    cfe0:	d006      	beq.n	cff0 <vesc_read_all+0x90>
			read_index++;
    cfe2:	4b35      	ldr	r3, [pc, #212]	; (d0b8 <vesc_read_all+0x158>)
    cfe4:	781b      	ldrb	r3, [r3, #0]
    cfe6:	3301      	adds	r3, #1
    cfe8:	b2da      	uxtb	r2, r3
    cfea:	4b33      	ldr	r3, [pc, #204]	; (d0b8 <vesc_read_all+0x158>)
    cfec:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_fw_version();
		}
		break;
    cfee:	e047      	b.n	d080 <vesc_read_all+0x120>
		} else if(!HOLD_FOR_REPLY){
    cff0:	4b30      	ldr	r3, [pc, #192]	; (d0b4 <vesc_read_all+0x154>)
    cff2:	781b      	ldrb	r3, [r3, #0]
    cff4:	2201      	movs	r2, #1
    cff6:	4053      	eors	r3, r2
    cff8:	b2db      	uxtb	r3, r3
    cffa:	2b00      	cmp	r3, #0
    cffc:	d040      	beq.n	d080 <vesc_read_all+0x120>
			read_index++;
    cffe:	4b2e      	ldr	r3, [pc, #184]	; (d0b8 <vesc_read_all+0x158>)
    d000:	781b      	ldrb	r3, [r3, #0]
    d002:	3301      	adds	r3, #1
    d004:	b2da      	uxtb	r2, r3
    d006:	4b2c      	ldr	r3, [pc, #176]	; (d0b8 <vesc_read_all+0x158>)
    d008:	701a      	strb	r2, [r3, #0]
			vesc_get_fw_version();
    d00a:	4b2f      	ldr	r3, [pc, #188]	; (d0c8 <vesc_read_all+0x168>)
    d00c:	4798      	blx	r3
		break;
    d00e:	e037      	b.n	d080 <vesc_read_all+0x120>
		case 2:
		if(!READ_VESC_VALS){
    d010:	4b2e      	ldr	r3, [pc, #184]	; (d0cc <vesc_read_all+0x16c>)
    d012:	781b      	ldrb	r3, [r3, #0]
    d014:	2201      	movs	r2, #1
    d016:	4053      	eors	r3, r2
    d018:	b2db      	uxtb	r3, r3
    d01a:	2b00      	cmp	r3, #0
    d01c:	d006      	beq.n	d02c <vesc_read_all+0xcc>
			read_index++;
    d01e:	4b26      	ldr	r3, [pc, #152]	; (d0b8 <vesc_read_all+0x158>)
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	3301      	adds	r3, #1
    d024:	b2da      	uxtb	r2, r3
    d026:	4b24      	ldr	r3, [pc, #144]	; (d0b8 <vesc_read_all+0x158>)
    d028:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_vals();
		}
		break;
    d02a:	e02b      	b.n	d084 <vesc_read_all+0x124>
		} else if(!HOLD_FOR_REPLY){
    d02c:	4b21      	ldr	r3, [pc, #132]	; (d0b4 <vesc_read_all+0x154>)
    d02e:	781b      	ldrb	r3, [r3, #0]
    d030:	2201      	movs	r2, #1
    d032:	4053      	eors	r3, r2
    d034:	b2db      	uxtb	r3, r3
    d036:	2b00      	cmp	r3, #0
    d038:	d024      	beq.n	d084 <vesc_read_all+0x124>
			read_index++;
    d03a:	4b1f      	ldr	r3, [pc, #124]	; (d0b8 <vesc_read_all+0x158>)
    d03c:	781b      	ldrb	r3, [r3, #0]
    d03e:	3301      	adds	r3, #1
    d040:	b2da      	uxtb	r2, r3
    d042:	4b1d      	ldr	r3, [pc, #116]	; (d0b8 <vesc_read_all+0x158>)
    d044:	701a      	strb	r2, [r3, #0]
			vesc_get_vals();
    d046:	4b22      	ldr	r3, [pc, #136]	; (d0d0 <vesc_read_all+0x170>)
    d048:	4798      	blx	r3
		break;
    d04a:	e01b      	b.n	d084 <vesc_read_all+0x124>
		case 3:
		if(!READ_VESC_CHUCK){
    d04c:	4b21      	ldr	r3, [pc, #132]	; (d0d4 <vesc_read_all+0x174>)
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	2201      	movs	r2, #1
    d052:	4053      	eors	r3, r2
    d054:	b2db      	uxtb	r3, r3
    d056:	2b00      	cmp	r3, #0
    d058:	d003      	beq.n	d062 <vesc_read_all+0x102>
			read_index=0;
    d05a:	4b17      	ldr	r3, [pc, #92]	; (d0b8 <vesc_read_all+0x158>)
    d05c:	2200      	movs	r2, #0
    d05e:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index=0;
			vesc_get_chuck();
		}
		break;
    d060:	e012      	b.n	d088 <vesc_read_all+0x128>
		} else if(!HOLD_FOR_REPLY){
    d062:	4b14      	ldr	r3, [pc, #80]	; (d0b4 <vesc_read_all+0x154>)
    d064:	781b      	ldrb	r3, [r3, #0]
    d066:	2201      	movs	r2, #1
    d068:	4053      	eors	r3, r2
    d06a:	b2db      	uxtb	r3, r3
    d06c:	2b00      	cmp	r3, #0
    d06e:	d00b      	beq.n	d088 <vesc_read_all+0x128>
			read_index=0;
    d070:	4b11      	ldr	r3, [pc, #68]	; (d0b8 <vesc_read_all+0x158>)
    d072:	2200      	movs	r2, #0
    d074:	701a      	strb	r2, [r3, #0]
			vesc_get_chuck();
    d076:	4b18      	ldr	r3, [pc, #96]	; (d0d8 <vesc_read_all+0x178>)
    d078:	4798      	blx	r3
		break;
    d07a:	e005      	b.n	d088 <vesc_read_all+0x128>
		break;
    d07c:	46c0      	nop			; (mov r8, r8)
    d07e:	e004      	b.n	d08a <vesc_read_all+0x12a>
		break;
    d080:	46c0      	nop			; (mov r8, r8)
    d082:	e002      	b.n	d08a <vesc_read_all+0x12a>
		break;
    d084:	46c0      	nop			; (mov r8, r8)
    d086:	e000      	b.n	d08a <vesc_read_all+0x12a>
		break;
    d088:	46c0      	nop			; (mov r8, r8)
	}
	
	READ_VESC_PWM = false;
    d08a:	4b0c      	ldr	r3, [pc, #48]	; (d0bc <vesc_read_all+0x15c>)
    d08c:	2200      	movs	r2, #0
    d08e:	701a      	strb	r2, [r3, #0]
	READ_VESC_FW = false;
    d090:	4b0c      	ldr	r3, [pc, #48]	; (d0c4 <vesc_read_all+0x164>)
    d092:	2200      	movs	r2, #0
    d094:	701a      	strb	r2, [r3, #0]
	READ_VESC_VALS = false;
    d096:	4b0d      	ldr	r3, [pc, #52]	; (d0cc <vesc_read_all+0x16c>)
    d098:	2200      	movs	r2, #0
    d09a:	701a      	strb	r2, [r3, #0]
	READ_VESC_CHUCK = false;
    d09c:	4b0d      	ldr	r3, [pc, #52]	; (d0d4 <vesc_read_all+0x174>)
    d09e:	2200      	movs	r2, #0
    d0a0:	701a      	strb	r2, [r3, #0]
}
    d0a2:	46c0      	nop			; (mov r8, r8)
    d0a4:	46bd      	mov	sp, r7
    d0a6:	bd80      	pop	{r7, pc}
    d0a8:	0000b015 	.word	0x0000b015
    d0ac:	20000364 	.word	0x20000364
    d0b0:	200000ac 	.word	0x200000ac
    d0b4:	20000368 	.word	0x20000368
    d0b8:	200003e9 	.word	0x200003e9
    d0bc:	20000369 	.word	0x20000369
    d0c0:	0000cdb1 	.word	0x0000cdb1
    d0c4:	2000036c 	.word	0x2000036c
    d0c8:	0000ca29 	.word	0x0000ca29
    d0cc:	2000036b 	.word	0x2000036b
    d0d0:	0000cb01 	.word	0x0000cb01
    d0d4:	2000036a 	.word	0x2000036a
    d0d8:	0000ce89 	.word	0x0000ce89

0000d0dc <detect_vesc_firmware>:


void detect_vesc_firmware(){
    d0dc:	b580      	push	{r7, lr}
    d0de:	af00      	add	r7, sp, #0
	vesc_get_fw_version();
    d0e0:	4bcf      	ldr	r3, [pc, #828]	; (d420 <detect_vesc_firmware+0x344>)
    d0e2:	4798      	blx	r3

	if(latest_vesc_vals.FW_VERSION_MAJOR != 0 || latest_vesc_vals.FW_VERSION_MINOR != 0)
    d0e4:	4bcf      	ldr	r3, [pc, #828]	; (d424 <detect_vesc_firmware+0x348>)
    d0e6:	2234      	movs	r2, #52	; 0x34
    d0e8:	5c9b      	ldrb	r3, [r3, r2]
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	d105      	bne.n	d0fa <detect_vesc_firmware+0x1e>
    d0ee:	4bcd      	ldr	r3, [pc, #820]	; (d424 <detect_vesc_firmware+0x348>)
    d0f0:	2235      	movs	r2, #53	; 0x35
    d0f2:	5c9b      	ldrb	r3, [r3, r2]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d100      	bne.n	d0fa <detect_vesc_firmware+0x1e>
    d0f8:	e271      	b.n	d5de <detect_vesc_firmware+0x502>
	{
		ESC_FW_READ = true;
    d0fa:	4bcb      	ldr	r3, [pc, #812]	; (d428 <detect_vesc_firmware+0x34c>)
    d0fc:	2201      	movs	r2, #1
    d0fe:	701a      	strb	r2, [r3, #0]

		// Define the location in which particular values can be found in COMM messages used by each FW
		if(latest_vesc_vals.FW_VERSION_MAJOR == 2 && latest_vesc_vals.FW_VERSION_MINOR <= 18){ // <= v2.18
    d100:	4bc8      	ldr	r3, [pc, #800]	; (d424 <detect_vesc_firmware+0x348>)
    d102:	2234      	movs	r2, #52	; 0x34
    d104:	5c9b      	ldrb	r3, [r3, r2]
    d106:	2b02      	cmp	r3, #2
    d108:	d000      	beq.n	d10c <detect_vesc_firmware+0x30>
    d10a:	e080      	b.n	d20e <detect_vesc_firmware+0x132>
    d10c:	4bc5      	ldr	r3, [pc, #788]	; (d424 <detect_vesc_firmware+0x348>)
    d10e:	2235      	movs	r2, #53	; 0x35
    d110:	5c9b      	ldrb	r3, [r3, r2]
    d112:	2b12      	cmp	r3, #18
    d114:	d87b      	bhi.n	d20e <detect_vesc_firmware+0x132>
			esc_fw = FW_2v18;
    d116:	4bc5      	ldr	r3, [pc, #788]	; (d42c <detect_vesc_firmware+0x350>)
    d118:	2200      	movs	r2, #0
    d11a:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d11c:	4bc4      	ldr	r3, [pc, #784]	; (d430 <detect_vesc_firmware+0x354>)
    d11e:	2200      	movs	r2, #0
    d120:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d122:	4bc4      	ldr	r3, [pc, #784]	; (d434 <detect_vesc_firmware+0x358>)
    d124:	2204      	movs	r2, #4
    d126:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 13;
    d128:	4bc3      	ldr	r3, [pc, #780]	; (d438 <detect_vesc_firmware+0x35c>)
    d12a:	220d      	movs	r2, #13
    d12c:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 29;
    d12e:	4bc3      	ldr	r3, [pc, #780]	; (d43c <detect_vesc_firmware+0x360>)
    d130:	221d      	movs	r2, #29
    d132:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 30;
    d134:	4bc2      	ldr	r3, [pc, #776]	; (d440 <detect_vesc_firmware+0x364>)
    d136:	221e      	movs	r2, #30
    d138:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 32;
    d13a:	4bc2      	ldr	r3, [pc, #776]	; (d444 <detect_vesc_firmware+0x368>)
    d13c:	2220      	movs	r2, #32
    d13e:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 34;
    d140:	4bc1      	ldr	r3, [pc, #772]	; (d448 <detect_vesc_firmware+0x36c>)
    d142:	2222      	movs	r2, #34	; 0x22
    d144:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d146:	4bc1      	ldr	r3, [pc, #772]	; (d44c <detect_vesc_firmware+0x370>)
    d148:	22ff      	movs	r2, #255	; 0xff
    d14a:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d14c:	4bc0      	ldr	r3, [pc, #768]	; (d450 <detect_vesc_firmware+0x374>)
    d14e:	22ff      	movs	r2, #255	; 0xff
    d150:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d152:	4bc0      	ldr	r3, [pc, #768]	; (d454 <detect_vesc_firmware+0x378>)
    d154:	2201      	movs	r2, #1
    d156:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 15;
    d158:	4bbf      	ldr	r3, [pc, #764]	; (d458 <detect_vesc_firmware+0x37c>)
    d15a:	220f      	movs	r2, #15
    d15c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 19;
    d15e:	4bbf      	ldr	r3, [pc, #764]	; (d45c <detect_vesc_firmware+0x380>)
    d160:	2213      	movs	r2, #19
    d162:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 23;
    d164:	4bbe      	ldr	r3, [pc, #760]	; (d460 <detect_vesc_firmware+0x384>)
    d166:	2217      	movs	r2, #23
    d168:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 25;
    d16a:	4bbe      	ldr	r3, [pc, #760]	; (d464 <detect_vesc_firmware+0x388>)
    d16c:	2219      	movs	r2, #25
    d16e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 29;
    d170:	4bbd      	ldr	r3, [pc, #756]	; (d468 <detect_vesc_firmware+0x38c>)
    d172:	221d      	movs	r2, #29
    d174:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 31;
    d176:	4bbd      	ldr	r3, [pc, #756]	; (d46c <detect_vesc_firmware+0x390>)
    d178:	221f      	movs	r2, #31
    d17a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 35;
    d17c:	4bbc      	ldr	r3, [pc, #752]	; (d470 <detect_vesc_firmware+0x394>)
    d17e:	2223      	movs	r2, #35	; 0x23
    d180:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 39;
    d182:	4bbc      	ldr	r3, [pc, #752]	; (d474 <detect_vesc_firmware+0x398>)
    d184:	2227      	movs	r2, #39	; 0x27
    d186:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 43;
    d188:	4bbb      	ldr	r3, [pc, #748]	; (d478 <detect_vesc_firmware+0x39c>)
    d18a:	222b      	movs	r2, #43	; 0x2b
    d18c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 47;
    d18e:	4bbb      	ldr	r3, [pc, #748]	; (d47c <detect_vesc_firmware+0x3a0>)
    d190:	222f      	movs	r2, #47	; 0x2f
    d192:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 55;
    d194:	4bba      	ldr	r3, [pc, #744]	; (d480 <detect_vesc_firmware+0x3a4>)
    d196:	2237      	movs	r2, #55	; 0x37
    d198:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
    d19a:	4bba      	ldr	r3, [pc, #744]	; (d484 <detect_vesc_firmware+0x3a8>)
    d19c:	2205      	movs	r2, #5
    d19e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d1a0:	4bb9      	ldr	r3, [pc, #740]	; (d488 <detect_vesc_firmware+0x3ac>)
    d1a2:	2209      	movs	r2, #9
    d1a4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d1a6:	4bb9      	ldr	r3, [pc, #740]	; (d48c <detect_vesc_firmware+0x3b0>)
    d1a8:	220d      	movs	r2, #13
    d1aa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d1ac:	4bb8      	ldr	r3, [pc, #736]	; (d490 <detect_vesc_firmware+0x3b4>)
    d1ae:	2211      	movs	r2, #17
    d1b0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d1b2:	4bb8      	ldr	r3, [pc, #736]	; (d494 <detect_vesc_firmware+0x3b8>)
    d1b4:	2215      	movs	r2, #21
    d1b6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d1b8:	4bb7      	ldr	r3, [pc, #732]	; (d498 <detect_vesc_firmware+0x3bc>)
    d1ba:	2219      	movs	r2, #25
    d1bc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d1be:	4bb7      	ldr	r3, [pc, #732]	; (d49c <detect_vesc_firmware+0x3c0>)
    d1c0:	221d      	movs	r2, #29
    d1c2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 33;
    d1c4:	4bb6      	ldr	r3, [pc, #728]	; (d4a0 <detect_vesc_firmware+0x3c4>)
    d1c6:	2221      	movs	r2, #33	; 0x21
    d1c8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 37;
    d1ca:	4bb6      	ldr	r3, [pc, #728]	; (d4a4 <detect_vesc_firmware+0x3c8>)
    d1cc:	2225      	movs	r2, #37	; 0x25
    d1ce:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 41;
    d1d0:	4bb5      	ldr	r3, [pc, #724]	; (d4a8 <detect_vesc_firmware+0x3cc>)
    d1d2:	2229      	movs	r2, #41	; 0x29
    d1d4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 45;
    d1d6:	4bb5      	ldr	r3, [pc, #724]	; (d4ac <detect_vesc_firmware+0x3d0>)
    d1d8:	222d      	movs	r2, #45	; 0x2d
    d1da:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 49;
    d1dc:	4bb4      	ldr	r3, [pc, #720]	; (d4b0 <detect_vesc_firmware+0x3d4>)
    d1de:	2231      	movs	r2, #49	; 0x31
    d1e0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 53;
    d1e2:	4bb4      	ldr	r3, [pc, #720]	; (d4b4 <detect_vesc_firmware+0x3d8>)
    d1e4:	2235      	movs	r2, #53	; 0x35
    d1e6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 59;
    d1e8:	4bb3      	ldr	r3, [pc, #716]	; (d4b8 <detect_vesc_firmware+0x3dc>)
    d1ea:	223b      	movs	r2, #59	; 0x3b
    d1ec:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 63;
    d1ee:	4bb3      	ldr	r3, [pc, #716]	; (d4bc <detect_vesc_firmware+0x3e0>)
    d1f0:	223f      	movs	r2, #63	; 0x3f
    d1f2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 67;
    d1f4:	4bb2      	ldr	r3, [pc, #712]	; (d4c0 <detect_vesc_firmware+0x3e4>)
    d1f6:	2243      	movs	r2, #67	; 0x43
    d1f8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 71;
    d1fa:	4bb2      	ldr	r3, [pc, #712]	; (d4c4 <detect_vesc_firmware+0x3e8>)
    d1fc:	2247      	movs	r2, #71	; 0x47
    d1fe:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 75;
    d200:	4bb1      	ldr	r3, [pc, #708]	; (d4c8 <detect_vesc_firmware+0x3ec>)
    d202:	224b      	movs	r2, #75	; 0x4b
    d204:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 79;
    d206:	4bb1      	ldr	r3, [pc, #708]	; (d4cc <detect_vesc_firmware+0x3f0>)
    d208:	224f      	movs	r2, #79	; 0x4f
    d20a:	701a      	strb	r2, [r3, #0]
    d20c:	e1e7      	b.n	d5de <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR < 100){ // >= 3.0
    d20e:	4b85      	ldr	r3, [pc, #532]	; (d424 <detect_vesc_firmware+0x348>)
    d210:	2234      	movs	r2, #52	; 0x34
    d212:	5c9b      	ldrb	r3, [r3, r2]
    d214:	2b03      	cmp	r3, #3
    d216:	d000      	beq.n	d21a <detect_vesc_firmware+0x13e>
    d218:	e080      	b.n	d31c <detect_vesc_firmware+0x240>
    d21a:	4b82      	ldr	r3, [pc, #520]	; (d424 <detect_vesc_firmware+0x348>)
    d21c:	2235      	movs	r2, #53	; 0x35
    d21e:	5c9b      	ldrb	r3, [r3, r2]
    d220:	2b63      	cmp	r3, #99	; 0x63
    d222:	d87b      	bhi.n	d31c <detect_vesc_firmware+0x240>
			esc_fw = FW_3v00;
    d224:	4b81      	ldr	r3, [pc, #516]	; (d42c <detect_vesc_firmware+0x350>)
    d226:	2201      	movs	r2, #1
    d228:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d22a:	4b81      	ldr	r3, [pc, #516]	; (d430 <detect_vesc_firmware+0x354>)
    d22c:	2200      	movs	r2, #0
    d22e:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d230:	4b80      	ldr	r3, [pc, #512]	; (d434 <detect_vesc_firmware+0x358>)
    d232:	2204      	movs	r2, #4
    d234:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d236:	4b80      	ldr	r3, [pc, #512]	; (d438 <detect_vesc_firmware+0x35c>)
    d238:	220e      	movs	r2, #14
    d23a:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d23c:	4b7f      	ldr	r3, [pc, #508]	; (d43c <detect_vesc_firmware+0x360>)
    d23e:	221e      	movs	r2, #30
    d240:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d242:	4b7f      	ldr	r3, [pc, #508]	; (d440 <detect_vesc_firmware+0x364>)
    d244:	221f      	movs	r2, #31
    d246:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d248:	4b7e      	ldr	r3, [pc, #504]	; (d444 <detect_vesc_firmware+0x368>)
    d24a:	2221      	movs	r2, #33	; 0x21
    d24c:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d24e:	4b7e      	ldr	r3, [pc, #504]	; (d448 <detect_vesc_firmware+0x36c>)
    d250:	2223      	movs	r2, #35	; 0x23
    d252:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 50;
    d254:	4b7d      	ldr	r3, [pc, #500]	; (d44c <detect_vesc_firmware+0x370>)
    d256:	2232      	movs	r2, #50	; 0x32
    d258:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 65;
    d25a:	4b7d      	ldr	r3, [pc, #500]	; (d450 <detect_vesc_firmware+0x374>)
    d25c:	2241      	movs	r2, #65	; 0x41
    d25e:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d260:	4b7c      	ldr	r3, [pc, #496]	; (d454 <detect_vesc_firmware+0x378>)
    d262:	2201      	movs	r2, #1
    d264:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
    d266:	4b7c      	ldr	r3, [pc, #496]	; (d458 <detect_vesc_firmware+0x37c>)
    d268:	2205      	movs	r2, #5
    d26a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
    d26c:	4b7b      	ldr	r3, [pc, #492]	; (d45c <detect_vesc_firmware+0x380>)
    d26e:	2209      	movs	r2, #9
    d270:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
    d272:	4b7b      	ldr	r3, [pc, #492]	; (d460 <detect_vesc_firmware+0x384>)
    d274:	2215      	movs	r2, #21
    d276:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
    d278:	4b7a      	ldr	r3, [pc, #488]	; (d464 <detect_vesc_firmware+0x388>)
    d27a:	2217      	movs	r2, #23
    d27c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
    d27e:	4b7a      	ldr	r3, [pc, #488]	; (d468 <detect_vesc_firmware+0x38c>)
    d280:	221b      	movs	r2, #27
    d282:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
    d284:	4b79      	ldr	r3, [pc, #484]	; (d46c <detect_vesc_firmware+0x390>)
    d286:	221d      	movs	r2, #29
    d288:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
    d28a:	4b79      	ldr	r3, [pc, #484]	; (d470 <detect_vesc_firmware+0x394>)
    d28c:	2221      	movs	r2, #33	; 0x21
    d28e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
    d290:	4b78      	ldr	r3, [pc, #480]	; (d474 <detect_vesc_firmware+0x398>)
    d292:	2225      	movs	r2, #37	; 0x25
    d294:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
    d296:	4b78      	ldr	r3, [pc, #480]	; (d478 <detect_vesc_firmware+0x39c>)
    d298:	2229      	movs	r2, #41	; 0x29
    d29a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
    d29c:	4b77      	ldr	r3, [pc, #476]	; (d47c <detect_vesc_firmware+0x3a0>)
    d29e:	222d      	movs	r2, #45	; 0x2d
    d2a0:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
    d2a2:	4b77      	ldr	r3, [pc, #476]	; (d480 <detect_vesc_firmware+0x3a4>)
    d2a4:	2235      	movs	r2, #53	; 0x35
    d2a6:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
    d2a8:	4b76      	ldr	r3, [pc, #472]	; (d484 <detect_vesc_firmware+0x3a8>)
    d2aa:	2205      	movs	r2, #5
    d2ac:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d2ae:	4b76      	ldr	r3, [pc, #472]	; (d488 <detect_vesc_firmware+0x3ac>)
    d2b0:	2209      	movs	r2, #9
    d2b2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d2b4:	4b75      	ldr	r3, [pc, #468]	; (d48c <detect_vesc_firmware+0x3b0>)
    d2b6:	220d      	movs	r2, #13
    d2b8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d2ba:	4b75      	ldr	r3, [pc, #468]	; (d490 <detect_vesc_firmware+0x3b4>)
    d2bc:	2211      	movs	r2, #17
    d2be:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d2c0:	4b74      	ldr	r3, [pc, #464]	; (d494 <detect_vesc_firmware+0x3b8>)
    d2c2:	2215      	movs	r2, #21
    d2c4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d2c6:	4b74      	ldr	r3, [pc, #464]	; (d498 <detect_vesc_firmware+0x3bc>)
    d2c8:	2219      	movs	r2, #25
    d2ca:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d2cc:	4b73      	ldr	r3, [pc, #460]	; (d49c <detect_vesc_firmware+0x3c0>)
    d2ce:	221d      	movs	r2, #29
    d2d0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
    d2d2:	4b73      	ldr	r3, [pc, #460]	; (d4a0 <detect_vesc_firmware+0x3c4>)
    d2d4:	2225      	movs	r2, #37	; 0x25
    d2d6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
    d2d8:	4b72      	ldr	r3, [pc, #456]	; (d4a4 <detect_vesc_firmware+0x3c8>)
    d2da:	2229      	movs	r2, #41	; 0x29
    d2dc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
    d2de:	4b72      	ldr	r3, [pc, #456]	; (d4a8 <detect_vesc_firmware+0x3cc>)
    d2e0:	222d      	movs	r2, #45	; 0x2d
    d2e2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
    d2e4:	4b71      	ldr	r3, [pc, #452]	; (d4ac <detect_vesc_firmware+0x3d0>)
    d2e6:	2231      	movs	r2, #49	; 0x31
    d2e8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
    d2ea:	4b71      	ldr	r3, [pc, #452]	; (d4b0 <detect_vesc_firmware+0x3d4>)
    d2ec:	2235      	movs	r2, #53	; 0x35
    d2ee:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
    d2f0:	4b70      	ldr	r3, [pc, #448]	; (d4b4 <detect_vesc_firmware+0x3d8>)
    d2f2:	2239      	movs	r2, #57	; 0x39
    d2f4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
    d2f6:	4b70      	ldr	r3, [pc, #448]	; (d4b8 <detect_vesc_firmware+0x3dc>)
    d2f8:	223e      	movs	r2, #62	; 0x3e
    d2fa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
    d2fc:	4b6f      	ldr	r3, [pc, #444]	; (d4bc <detect_vesc_firmware+0x3e0>)
    d2fe:	2242      	movs	r2, #66	; 0x42
    d300:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
    d302:	4b6f      	ldr	r3, [pc, #444]	; (d4c0 <detect_vesc_firmware+0x3e4>)
    d304:	2246      	movs	r2, #70	; 0x46
    d306:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
    d308:	4b6e      	ldr	r3, [pc, #440]	; (d4c4 <detect_vesc_firmware+0x3e8>)
    d30a:	224a      	movs	r2, #74	; 0x4a
    d30c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
    d30e:	4b6e      	ldr	r3, [pc, #440]	; (d4c8 <detect_vesc_firmware+0x3ec>)
    d310:	2252      	movs	r2, #82	; 0x52
    d312:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
    d314:	4b6d      	ldr	r3, [pc, #436]	; (d4cc <detect_vesc_firmware+0x3f0>)
    d316:	2256      	movs	r2, #86	; 0x56
    d318:	701a      	strb	r2, [r3, #0]
    d31a:	e160      	b.n	d5de <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 23){ // Unity
    d31c:	4b41      	ldr	r3, [pc, #260]	; (d424 <detect_vesc_firmware+0x348>)
    d31e:	2234      	movs	r2, #52	; 0x34
    d320:	5c9b      	ldrb	r3, [r3, r2]
    d322:	2b17      	cmp	r3, #23
    d324:	d000      	beq.n	d328 <detect_vesc_firmware+0x24c>
    d326:	e0d3      	b.n	d4d0 <detect_vesc_firmware+0x3f4>
			esc_fw = FW_UNITY;
    d328:	4b40      	ldr	r3, [pc, #256]	; (d42c <detect_vesc_firmware+0x350>)
    d32a:	2202      	movs	r2, #2
    d32c:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d32e:	4b40      	ldr	r3, [pc, #256]	; (d430 <detect_vesc_firmware+0x354>)
    d330:	2200      	movs	r2, #0
    d332:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4; // May use COMM_GET_UNITY_VALUES = 38
    d334:	4b3f      	ldr	r3, [pc, #252]	; (d434 <detect_vesc_firmware+0x358>)
    d336:	2204      	movs	r2, #4
    d338:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d33a:	4b3f      	ldr	r3, [pc, #252]	; (d438 <detect_vesc_firmware+0x35c>)
    d33c:	220e      	movs	r2, #14
    d33e:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d340:	4b3e      	ldr	r3, [pc, #248]	; (d43c <detect_vesc_firmware+0x360>)
    d342:	221e      	movs	r2, #30
    d344:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d346:	4b3e      	ldr	r3, [pc, #248]	; (d440 <detect_vesc_firmware+0x364>)
    d348:	221f      	movs	r2, #31
    d34a:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d34c:	4b3d      	ldr	r3, [pc, #244]	; (d444 <detect_vesc_firmware+0x368>)
    d34e:	2221      	movs	r2, #33	; 0x21
    d350:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d352:	4b3d      	ldr	r3, [pc, #244]	; (d448 <detect_vesc_firmware+0x36c>)
    d354:	2223      	movs	r2, #35	; 0x23
    d356:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d358:	4b3c      	ldr	r3, [pc, #240]	; (d44c <detect_vesc_firmware+0x370>)
    d35a:	22ff      	movs	r2, #255	; 0xff
    d35c:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d35e:	4b3c      	ldr	r3, [pc, #240]	; (d450 <detect_vesc_firmware+0x374>)
    d360:	22ff      	movs	r2, #255	; 0xff
    d362:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d364:	4b3b      	ldr	r3, [pc, #236]	; (d454 <detect_vesc_firmware+0x378>)
    d366:	2201      	movs	r2, #1
    d368:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 9;
    d36a:	4b3b      	ldr	r3, [pc, #236]	; (d458 <detect_vesc_firmware+0x37c>)
    d36c:	2209      	movs	r2, #9
    d36e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 17;
    d370:	4b3a      	ldr	r3, [pc, #232]	; (d45c <detect_vesc_firmware+0x380>)
    d372:	2211      	movs	r2, #17
    d374:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 37;
    d376:	4b3a      	ldr	r3, [pc, #232]	; (d460 <detect_vesc_firmware+0x384>)
    d378:	2225      	movs	r2, #37	; 0x25
    d37a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 41;
    d37c:	4b39      	ldr	r3, [pc, #228]	; (d464 <detect_vesc_firmware+0x388>)
    d37e:	2229      	movs	r2, #41	; 0x29
    d380:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 49;
    d382:	4b39      	ldr	r3, [pc, #228]	; (d468 <detect_vesc_firmware+0x38c>)
    d384:	2231      	movs	r2, #49	; 0x31
    d386:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 51;
    d388:	4b38      	ldr	r3, [pc, #224]	; (d46c <detect_vesc_firmware+0x390>)
    d38a:	2233      	movs	r2, #51	; 0x33
    d38c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 55;
    d38e:	4b38      	ldr	r3, [pc, #224]	; (d470 <detect_vesc_firmware+0x394>)
    d390:	2237      	movs	r2, #55	; 0x37
    d392:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 59;
    d394:	4b37      	ldr	r3, [pc, #220]	; (d474 <detect_vesc_firmware+0x398>)
    d396:	223b      	movs	r2, #59	; 0x3b
    d398:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 63;
    d39a:	4b37      	ldr	r3, [pc, #220]	; (d478 <detect_vesc_firmware+0x39c>)
    d39c:	223f      	movs	r2, #63	; 0x3f
    d39e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 67;
    d3a0:	4b36      	ldr	r3, [pc, #216]	; (d47c <detect_vesc_firmware+0x3a0>)
    d3a2:	2243      	movs	r2, #67	; 0x43
    d3a4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 83;
    d3a6:	4b36      	ldr	r3, [pc, #216]	; (d480 <detect_vesc_firmware+0x3a4>)
    d3a8:	2253      	movs	r2, #83	; 0x53
    d3aa:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 9;
    d3ac:	4b35      	ldr	r3, [pc, #212]	; (d484 <detect_vesc_firmware+0x3a8>)
    d3ae:	2209      	movs	r2, #9
    d3b0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 13;
    d3b2:	4b35      	ldr	r3, [pc, #212]	; (d488 <detect_vesc_firmware+0x3ac>)
    d3b4:	220d      	movs	r2, #13
    d3b6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 17;
    d3b8:	4b34      	ldr	r3, [pc, #208]	; (d48c <detect_vesc_firmware+0x3b0>)
    d3ba:	2211      	movs	r2, #17
    d3bc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 21;
    d3be:	4b34      	ldr	r3, [pc, #208]	; (d490 <detect_vesc_firmware+0x3b4>)
    d3c0:	2215      	movs	r2, #21
    d3c2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 25;
    d3c4:	4b33      	ldr	r3, [pc, #204]	; (d494 <detect_vesc_firmware+0x3b8>)
    d3c6:	2219      	movs	r2, #25
    d3c8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 29;
    d3ca:	4b33      	ldr	r3, [pc, #204]	; (d498 <detect_vesc_firmware+0x3bc>)
    d3cc:	221d      	movs	r2, #29
    d3ce:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 33;
    d3d0:	4b32      	ldr	r3, [pc, #200]	; (d49c <detect_vesc_firmware+0x3c0>)
    d3d2:	2221      	movs	r2, #33	; 0x21
    d3d4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 41;
    d3d6:	4b32      	ldr	r3, [pc, #200]	; (d4a0 <detect_vesc_firmware+0x3c4>)
    d3d8:	2229      	movs	r2, #41	; 0x29
    d3da:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 45;
    d3dc:	4b31      	ldr	r3, [pc, #196]	; (d4a4 <detect_vesc_firmware+0x3c8>)
    d3de:	222d      	movs	r2, #45	; 0x2d
    d3e0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 49;
    d3e2:	4b31      	ldr	r3, [pc, #196]	; (d4a8 <detect_vesc_firmware+0x3cc>)
    d3e4:	2231      	movs	r2, #49	; 0x31
    d3e6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 53;
    d3e8:	4b30      	ldr	r3, [pc, #192]	; (d4ac <detect_vesc_firmware+0x3d0>)
    d3ea:	2235      	movs	r2, #53	; 0x35
    d3ec:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 57;
    d3ee:	4b30      	ldr	r3, [pc, #192]	; (d4b0 <detect_vesc_firmware+0x3d4>)
    d3f0:	2239      	movs	r2, #57	; 0x39
    d3f2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 61;
    d3f4:	4b2f      	ldr	r3, [pc, #188]	; (d4b4 <detect_vesc_firmware+0x3d8>)
    d3f6:	223d      	movs	r2, #61	; 0x3d
    d3f8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 66;
    d3fa:	4b2f      	ldr	r3, [pc, #188]	; (d4b8 <detect_vesc_firmware+0x3dc>)
    d3fc:	2242      	movs	r2, #66	; 0x42
    d3fe:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 70;
    d400:	4b2e      	ldr	r3, [pc, #184]	; (d4bc <detect_vesc_firmware+0x3e0>)
    d402:	2246      	movs	r2, #70	; 0x46
    d404:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 74;
    d406:	4b2e      	ldr	r3, [pc, #184]	; (d4c0 <detect_vesc_firmware+0x3e4>)
    d408:	224a      	movs	r2, #74	; 0x4a
    d40a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 78;
    d40c:	4b2d      	ldr	r3, [pc, #180]	; (d4c4 <detect_vesc_firmware+0x3e8>)
    d40e:	224e      	movs	r2, #78	; 0x4e
    d410:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 86;
    d412:	4b2d      	ldr	r3, [pc, #180]	; (d4c8 <detect_vesc_firmware+0x3ec>)
    d414:	2256      	movs	r2, #86	; 0x56
    d416:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 90;
    d418:	4b2c      	ldr	r3, [pc, #176]	; (d4cc <detect_vesc_firmware+0x3f0>)
    d41a:	225a      	movs	r2, #90	; 0x5a
    d41c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
			GET_MCCONF_DUTY_MIN = 82;
			GET_MCCONF_DUTY_MAX = 86;
		}
	}
}
    d41e:	e0de      	b.n	d5de <detect_vesc_firmware+0x502>
    d420:	0000ca29 	.word	0x0000ca29
    d424:	20000958 	.word	0x20000958
    d428:	2000030f 	.word	0x2000030f
    d42c:	2000001a 	.word	0x2000001a
    d430:	2000033a 	.word	0x2000033a
    d434:	2000033b 	.word	0x2000033b
    d438:	2000033c 	.word	0x2000033c
    d43c:	2000033d 	.word	0x2000033d
    d440:	2000033e 	.word	0x2000033e
    d444:	2000033f 	.word	0x2000033f
    d448:	20000340 	.word	0x20000340
    d44c:	20000341 	.word	0x20000341
    d450:	20000342 	.word	0x20000342
    d454:	20000343 	.word	0x20000343
    d458:	20000344 	.word	0x20000344
    d45c:	20000345 	.word	0x20000345
    d460:	20000346 	.word	0x20000346
    d464:	20000347 	.word	0x20000347
    d468:	20000348 	.word	0x20000348
    d46c:	20000349 	.word	0x20000349
    d470:	2000034a 	.word	0x2000034a
    d474:	2000034b 	.word	0x2000034b
    d478:	2000034c 	.word	0x2000034c
    d47c:	2000034d 	.word	0x2000034d
    d480:	2000034e 	.word	0x2000034e
    d484:	2000034f 	.word	0x2000034f
    d488:	20000350 	.word	0x20000350
    d48c:	20000351 	.word	0x20000351
    d490:	20000352 	.word	0x20000352
    d494:	20000353 	.word	0x20000353
    d498:	20000354 	.word	0x20000354
    d49c:	20000355 	.word	0x20000355
    d4a0:	20000356 	.word	0x20000356
    d4a4:	20000357 	.word	0x20000357
    d4a8:	20000358 	.word	0x20000358
    d4ac:	20000359 	.word	0x20000359
    d4b0:	2000035a 	.word	0x2000035a
    d4b4:	2000035b 	.word	0x2000035b
    d4b8:	2000035c 	.word	0x2000035c
    d4bc:	2000035d 	.word	0x2000035d
    d4c0:	2000035e 	.word	0x2000035e
    d4c4:	2000035f 	.word	0x2000035f
    d4c8:	20000360 	.word	0x20000360
    d4cc:	20000361 	.word	0x20000361
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 100){ // Ackmaniac
    d4d0:	4b44      	ldr	r3, [pc, #272]	; (d5e4 <detect_vesc_firmware+0x508>)
    d4d2:	2234      	movs	r2, #52	; 0x34
    d4d4:	5c9b      	ldrb	r3, [r3, r2]
    d4d6:	2b03      	cmp	r3, #3
    d4d8:	d000      	beq.n	d4dc <detect_vesc_firmware+0x400>
    d4da:	e080      	b.n	d5de <detect_vesc_firmware+0x502>
    d4dc:	4b41      	ldr	r3, [pc, #260]	; (d5e4 <detect_vesc_firmware+0x508>)
    d4de:	2235      	movs	r2, #53	; 0x35
    d4e0:	5c9b      	ldrb	r3, [r3, r2]
    d4e2:	2b63      	cmp	r3, #99	; 0x63
    d4e4:	d97b      	bls.n	d5de <detect_vesc_firmware+0x502>
			esc_fw = FW_ACKMANIAC;
    d4e6:	4b40      	ldr	r3, [pc, #256]	; (d5e8 <detect_vesc_firmware+0x50c>)
    d4e8:	2203      	movs	r2, #3
    d4ea:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d4ec:	4b3f      	ldr	r3, [pc, #252]	; (d5ec <detect_vesc_firmware+0x510>)
    d4ee:	2200      	movs	r2, #0
    d4f0:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d4f2:	4b3f      	ldr	r3, [pc, #252]	; (d5f0 <detect_vesc_firmware+0x514>)
    d4f4:	2204      	movs	r2, #4
    d4f6:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d4f8:	4b3e      	ldr	r3, [pc, #248]	; (d5f4 <detect_vesc_firmware+0x518>)
    d4fa:	220e      	movs	r2, #14
    d4fc:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d4fe:	4b3e      	ldr	r3, [pc, #248]	; (d5f8 <detect_vesc_firmware+0x51c>)
    d500:	221e      	movs	r2, #30
    d502:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d504:	4b3d      	ldr	r3, [pc, #244]	; (d5fc <detect_vesc_firmware+0x520>)
    d506:	221f      	movs	r2, #31
    d508:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d50a:	4b3d      	ldr	r3, [pc, #244]	; (d600 <detect_vesc_firmware+0x524>)
    d50c:	2221      	movs	r2, #33	; 0x21
    d50e:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d510:	4b3c      	ldr	r3, [pc, #240]	; (d604 <detect_vesc_firmware+0x528>)
    d512:	2223      	movs	r2, #35	; 0x23
    d514:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d516:	4b3c      	ldr	r3, [pc, #240]	; (d608 <detect_vesc_firmware+0x52c>)
    d518:	22ff      	movs	r2, #255	; 0xff
    d51a:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d51c:	4b3b      	ldr	r3, [pc, #236]	; (d60c <detect_vesc_firmware+0x530>)
    d51e:	22ff      	movs	r2, #255	; 0xff
    d520:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FET_TEMP = 1;
    d522:	4b3b      	ldr	r3, [pc, #236]	; (d610 <detect_vesc_firmware+0x534>)
    d524:	2201      	movs	r2, #1
    d526:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
    d528:	4b3a      	ldr	r3, [pc, #232]	; (d614 <detect_vesc_firmware+0x538>)
    d52a:	2205      	movs	r2, #5
    d52c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
    d52e:	4b3a      	ldr	r3, [pc, #232]	; (d618 <detect_vesc_firmware+0x53c>)
    d530:	2209      	movs	r2, #9
    d532:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
    d534:	4b39      	ldr	r3, [pc, #228]	; (d61c <detect_vesc_firmware+0x540>)
    d536:	2215      	movs	r2, #21
    d538:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
    d53a:	4b39      	ldr	r3, [pc, #228]	; (d620 <detect_vesc_firmware+0x544>)
    d53c:	2217      	movs	r2, #23
    d53e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
    d540:	4b38      	ldr	r3, [pc, #224]	; (d624 <detect_vesc_firmware+0x548>)
    d542:	221b      	movs	r2, #27
    d544:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
    d546:	4b38      	ldr	r3, [pc, #224]	; (d628 <detect_vesc_firmware+0x54c>)
    d548:	221d      	movs	r2, #29
    d54a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
    d54c:	4b37      	ldr	r3, [pc, #220]	; (d62c <detect_vesc_firmware+0x550>)
    d54e:	2221      	movs	r2, #33	; 0x21
    d550:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
    d552:	4b37      	ldr	r3, [pc, #220]	; (d630 <detect_vesc_firmware+0x554>)
    d554:	2225      	movs	r2, #37	; 0x25
    d556:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
    d558:	4b36      	ldr	r3, [pc, #216]	; (d634 <detect_vesc_firmware+0x558>)
    d55a:	2229      	movs	r2, #41	; 0x29
    d55c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
    d55e:	4b36      	ldr	r3, [pc, #216]	; (d638 <detect_vesc_firmware+0x55c>)
    d560:	222d      	movs	r2, #45	; 0x2d
    d562:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
    d564:	4b35      	ldr	r3, [pc, #212]	; (d63c <detect_vesc_firmware+0x560>)
    d566:	2235      	movs	r2, #53	; 0x35
    d568:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MAX = 5;
    d56a:	4b35      	ldr	r3, [pc, #212]	; (d640 <detect_vesc_firmware+0x564>)
    d56c:	2205      	movs	r2, #5
    d56e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d570:	4b34      	ldr	r3, [pc, #208]	; (d644 <detect_vesc_firmware+0x568>)
    d572:	2209      	movs	r2, #9
    d574:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d576:	4b34      	ldr	r3, [pc, #208]	; (d648 <detect_vesc_firmware+0x56c>)
    d578:	220d      	movs	r2, #13
    d57a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d57c:	4b33      	ldr	r3, [pc, #204]	; (d64c <detect_vesc_firmware+0x570>)
    d57e:	2211      	movs	r2, #17
    d580:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d582:	4b33      	ldr	r3, [pc, #204]	; (d650 <detect_vesc_firmware+0x574>)
    d584:	2215      	movs	r2, #21
    d586:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d588:	4b32      	ldr	r3, [pc, #200]	; (d654 <detect_vesc_firmware+0x578>)
    d58a:	2219      	movs	r2, #25
    d58c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d58e:	4b32      	ldr	r3, [pc, #200]	; (d658 <detect_vesc_firmware+0x57c>)
    d590:	221d      	movs	r2, #29
    d592:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
    d594:	4b31      	ldr	r3, [pc, #196]	; (d65c <detect_vesc_firmware+0x580>)
    d596:	2225      	movs	r2, #37	; 0x25
    d598:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
    d59a:	4b31      	ldr	r3, [pc, #196]	; (d660 <detect_vesc_firmware+0x584>)
    d59c:	2229      	movs	r2, #41	; 0x29
    d59e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
    d5a0:	4b30      	ldr	r3, [pc, #192]	; (d664 <detect_vesc_firmware+0x588>)
    d5a2:	222d      	movs	r2, #45	; 0x2d
    d5a4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
    d5a6:	4b30      	ldr	r3, [pc, #192]	; (d668 <detect_vesc_firmware+0x58c>)
    d5a8:	2231      	movs	r2, #49	; 0x31
    d5aa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
    d5ac:	4b2f      	ldr	r3, [pc, #188]	; (d66c <detect_vesc_firmware+0x590>)
    d5ae:	2235      	movs	r2, #53	; 0x35
    d5b0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
    d5b2:	4b2f      	ldr	r3, [pc, #188]	; (d670 <detect_vesc_firmware+0x594>)
    d5b4:	2239      	movs	r2, #57	; 0x39
    d5b6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
    d5b8:	4b2e      	ldr	r3, [pc, #184]	; (d674 <detect_vesc_firmware+0x598>)
    d5ba:	223e      	movs	r2, #62	; 0x3e
    d5bc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
    d5be:	4b2e      	ldr	r3, [pc, #184]	; (d678 <detect_vesc_firmware+0x59c>)
    d5c0:	2242      	movs	r2, #66	; 0x42
    d5c2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
    d5c4:	4b2d      	ldr	r3, [pc, #180]	; (d67c <detect_vesc_firmware+0x5a0>)
    d5c6:	2246      	movs	r2, #70	; 0x46
    d5c8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
    d5ca:	4b2d      	ldr	r3, [pc, #180]	; (d680 <detect_vesc_firmware+0x5a4>)
    d5cc:	224a      	movs	r2, #74	; 0x4a
    d5ce:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
    d5d0:	4b2c      	ldr	r3, [pc, #176]	; (d684 <detect_vesc_firmware+0x5a8>)
    d5d2:	2252      	movs	r2, #82	; 0x52
    d5d4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
    d5d6:	4b2c      	ldr	r3, [pc, #176]	; (d688 <detect_vesc_firmware+0x5ac>)
    d5d8:	2256      	movs	r2, #86	; 0x56
    d5da:	701a      	strb	r2, [r3, #0]
}
    d5dc:	e7ff      	b.n	d5de <detect_vesc_firmware+0x502>
    d5de:	46c0      	nop			; (mov r8, r8)
    d5e0:	46bd      	mov	sp, r7
    d5e2:	bd80      	pop	{r7, pc}
    d5e4:	20000958 	.word	0x20000958
    d5e8:	2000001a 	.word	0x2000001a
    d5ec:	2000033a 	.word	0x2000033a
    d5f0:	2000033b 	.word	0x2000033b
    d5f4:	2000033c 	.word	0x2000033c
    d5f8:	2000033d 	.word	0x2000033d
    d5fc:	2000033e 	.word	0x2000033e
    d600:	2000033f 	.word	0x2000033f
    d604:	20000340 	.word	0x20000340
    d608:	20000341 	.word	0x20000341
    d60c:	20000342 	.word	0x20000342
    d610:	20000343 	.word	0x20000343
    d614:	20000344 	.word	0x20000344
    d618:	20000345 	.word	0x20000345
    d61c:	20000346 	.word	0x20000346
    d620:	20000347 	.word	0x20000347
    d624:	20000348 	.word	0x20000348
    d628:	20000349 	.word	0x20000349
    d62c:	2000034a 	.word	0x2000034a
    d630:	2000034b 	.word	0x2000034b
    d634:	2000034c 	.word	0x2000034c
    d638:	2000034d 	.word	0x2000034d
    d63c:	2000034e 	.word	0x2000034e
    d640:	2000034f 	.word	0x2000034f
    d644:	20000350 	.word	0x20000350
    d648:	20000351 	.word	0x20000351
    d64c:	20000352 	.word	0x20000352
    d650:	20000353 	.word	0x20000353
    d654:	20000354 	.word	0x20000354
    d658:	20000355 	.word	0x20000355
    d65c:	20000356 	.word	0x20000356
    d660:	20000357 	.word	0x20000357
    d664:	20000358 	.word	0x20000358
    d668:	20000359 	.word	0x20000359
    d66c:	2000035a 	.word	0x2000035a
    d670:	2000035b 	.word	0x2000035b
    d674:	2000035c 	.word	0x2000035c
    d678:	2000035d 	.word	0x2000035d
    d67c:	2000035e 	.word	0x2000035e
    d680:	2000035f 	.word	0x2000035f
    d684:	20000360 	.word	0x20000360
    d688:	20000361 	.word	0x20000361

0000d68c <CHECK_BUFFER>:

bool CHECK_BUFFER(uint8_t *buf){
    d68c:	b580      	push	{r7, lr}
    d68e:	b082      	sub	sp, #8
    d690:	af00      	add	r7, sp, #0
    d692:	6078      	str	r0, [r7, #4]
	return (((buf[0] == 0x2) && (buf[buf[1]+4] == 0x3)) || ((buf[0] == 0x3) && (buf[((buf[1]<<8)|buf[2])+5] == 0x3)));
    d694:	687b      	ldr	r3, [r7, #4]
    d696:	781b      	ldrb	r3, [r3, #0]
    d698:	2b02      	cmp	r3, #2
    d69a:	d108      	bne.n	d6ae <CHECK_BUFFER+0x22>
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	3301      	adds	r3, #1
    d6a0:	781b      	ldrb	r3, [r3, #0]
    d6a2:	3304      	adds	r3, #4
    d6a4:	687a      	ldr	r2, [r7, #4]
    d6a6:	18d3      	adds	r3, r2, r3
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	2b03      	cmp	r3, #3
    d6ac:	d011      	beq.n	d6d2 <CHECK_BUFFER+0x46>
    d6ae:	687b      	ldr	r3, [r7, #4]
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	2b03      	cmp	r3, #3
    d6b4:	d10f      	bne.n	d6d6 <CHECK_BUFFER+0x4a>
    d6b6:	687b      	ldr	r3, [r7, #4]
    d6b8:	3301      	adds	r3, #1
    d6ba:	781b      	ldrb	r3, [r3, #0]
    d6bc:	021b      	lsls	r3, r3, #8
    d6be:	687a      	ldr	r2, [r7, #4]
    d6c0:	3202      	adds	r2, #2
    d6c2:	7812      	ldrb	r2, [r2, #0]
    d6c4:	4313      	orrs	r3, r2
    d6c6:	3305      	adds	r3, #5
    d6c8:	687a      	ldr	r2, [r7, #4]
    d6ca:	18d3      	adds	r3, r2, r3
    d6cc:	781b      	ldrb	r3, [r3, #0]
    d6ce:	2b03      	cmp	r3, #3
    d6d0:	d101      	bne.n	d6d6 <CHECK_BUFFER+0x4a>
    d6d2:	2301      	movs	r3, #1
    d6d4:	e000      	b.n	d6d8 <CHECK_BUFFER+0x4c>
    d6d6:	2300      	movs	r3, #0
    d6d8:	1c1a      	adds	r2, r3, #0
    d6da:	2301      	movs	r3, #1
    d6dc:	4013      	ands	r3, r2
    d6de:	b2db      	uxtb	r3, r3
}
    d6e0:	0018      	movs	r0, r3
    d6e2:	46bd      	mov	sp, r7
    d6e4:	b002      	add	sp, #8
    d6e6:	bd80      	pop	{r7, pc}

0000d6e8 <read_vesc_packet>:

void read_vesc_packet(void){
    d6e8:	b590      	push	{r4, r7, lr}
    d6ea:	b083      	sub	sp, #12
    d6ec:	af00      	add	r7, sp, #0
	if(CHECK_BUFFER(vesc_USART_read_buffer)){
    d6ee:	4b4b      	ldr	r3, [pc, #300]	; (d81c <read_vesc_packet+0x134>)
    d6f0:	0018      	movs	r0, r3
    d6f2:	4b4b      	ldr	r3, [pc, #300]	; (d820 <read_vesc_packet+0x138>)
    d6f4:	4798      	blx	r3
    d6f6:	1e03      	subs	r3, r0, #0
    d6f8:	d100      	bne.n	d6fc <read_vesc_packet+0x14>
    d6fa:	e084      	b.n	d806 <read_vesc_packet+0x11e>
		VESC_PACKET_RECIEVED = true;
    d6fc:	4b49      	ldr	r3, [pc, #292]	; (d824 <read_vesc_packet+0x13c>)
    d6fe:	2201      	movs	r2, #1
    d700:	701a      	strb	r2, [r3, #0]

		if(vesc_USART_read_buffer[0] == 0x2){
    d702:	4b46      	ldr	r3, [pc, #280]	; (d81c <read_vesc_packet+0x134>)
    d704:	781b      	ldrb	r3, [r3, #0]
    d706:	2b02      	cmp	r3, #2
    d708:	d11e      	bne.n	d748 <read_vesc_packet+0x60>
			packet_len = vesc_USART_read_buffer[1];
    d70a:	4b44      	ldr	r3, [pc, #272]	; (d81c <read_vesc_packet+0x134>)
    d70c:	785b      	ldrb	r3, [r3, #1]
    d70e:	b29a      	uxth	r2, r3
    d710:	4b45      	ldr	r3, [pc, #276]	; (d828 <read_vesc_packet+0x140>)
    d712:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+2,packet_len);
    d714:	4945      	ldr	r1, [pc, #276]	; (d82c <read_vesc_packet+0x144>)
    d716:	4b44      	ldr	r3, [pc, #272]	; (d828 <read_vesc_packet+0x140>)
    d718:	881b      	ldrh	r3, [r3, #0]
    d71a:	001a      	movs	r2, r3
    d71c:	4b44      	ldr	r3, [pc, #272]	; (d830 <read_vesc_packet+0x148>)
    d71e:	0018      	movs	r0, r3
    d720:	4b44      	ldr	r3, [pc, #272]	; (d834 <read_vesc_packet+0x14c>)
    d722:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+2];
    d724:	4b40      	ldr	r3, [pc, #256]	; (d828 <read_vesc_packet+0x140>)
    d726:	881b      	ldrh	r3, [r3, #0]
    d728:	3302      	adds	r3, #2
    d72a:	4a3c      	ldr	r2, [pc, #240]	; (d81c <read_vesc_packet+0x134>)
    d72c:	5cd1      	ldrb	r1, [r2, r3]
    d72e:	4b42      	ldr	r3, [pc, #264]	; (d838 <read_vesc_packet+0x150>)
    d730:	4a42      	ldr	r2, [pc, #264]	; (d83c <read_vesc_packet+0x154>)
    d732:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+3];
    d734:	4b3c      	ldr	r3, [pc, #240]	; (d828 <read_vesc_packet+0x140>)
    d736:	881b      	ldrh	r3, [r3, #0]
    d738:	3303      	adds	r3, #3
    d73a:	4a38      	ldr	r2, [pc, #224]	; (d81c <read_vesc_packet+0x134>)
    d73c:	5cd1      	ldrb	r1, [r2, r3]
    d73e:	4a3e      	ldr	r2, [pc, #248]	; (d838 <read_vesc_packet+0x150>)
    d740:	2381      	movs	r3, #129	; 0x81
    d742:	009b      	lsls	r3, r3, #2
    d744:	54d1      	strb	r1, [r2, r3]
    d746:	e024      	b.n	d792 <read_vesc_packet+0xaa>
		} else{
			packet_len = ((vesc_USART_read_buffer[1]<<8)|vesc_USART_read_buffer[2]);
    d748:	4b34      	ldr	r3, [pc, #208]	; (d81c <read_vesc_packet+0x134>)
    d74a:	785b      	ldrb	r3, [r3, #1]
    d74c:	021b      	lsls	r3, r3, #8
    d74e:	b21a      	sxth	r2, r3
    d750:	4b32      	ldr	r3, [pc, #200]	; (d81c <read_vesc_packet+0x134>)
    d752:	789b      	ldrb	r3, [r3, #2]
    d754:	b21b      	sxth	r3, r3
    d756:	4313      	orrs	r3, r2
    d758:	b21b      	sxth	r3, r3
    d75a:	b29a      	uxth	r2, r3
    d75c:	4b32      	ldr	r3, [pc, #200]	; (d828 <read_vesc_packet+0x140>)
    d75e:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+3,packet_len);
    d760:	4937      	ldr	r1, [pc, #220]	; (d840 <read_vesc_packet+0x158>)
    d762:	4b31      	ldr	r3, [pc, #196]	; (d828 <read_vesc_packet+0x140>)
    d764:	881b      	ldrh	r3, [r3, #0]
    d766:	001a      	movs	r2, r3
    d768:	4b31      	ldr	r3, [pc, #196]	; (d830 <read_vesc_packet+0x148>)
    d76a:	0018      	movs	r0, r3
    d76c:	4b31      	ldr	r3, [pc, #196]	; (d834 <read_vesc_packet+0x14c>)
    d76e:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+3];
    d770:	4b2d      	ldr	r3, [pc, #180]	; (d828 <read_vesc_packet+0x140>)
    d772:	881b      	ldrh	r3, [r3, #0]
    d774:	3303      	adds	r3, #3
    d776:	4a29      	ldr	r2, [pc, #164]	; (d81c <read_vesc_packet+0x134>)
    d778:	5cd1      	ldrb	r1, [r2, r3]
    d77a:	4b2f      	ldr	r3, [pc, #188]	; (d838 <read_vesc_packet+0x150>)
    d77c:	4a2f      	ldr	r2, [pc, #188]	; (d83c <read_vesc_packet+0x154>)
    d77e:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+4];
    d780:	4b29      	ldr	r3, [pc, #164]	; (d828 <read_vesc_packet+0x140>)
    d782:	881b      	ldrh	r3, [r3, #0]
    d784:	3304      	adds	r3, #4
    d786:	4a25      	ldr	r2, [pc, #148]	; (d81c <read_vesc_packet+0x134>)
    d788:	5cd1      	ldrb	r1, [r2, r3]
    d78a:	4a2b      	ldr	r2, [pc, #172]	; (d838 <read_vesc_packet+0x150>)
    d78c:	2381      	movs	r3, #129	; 0x81
    d78e:	009b      	lsls	r3, r3, #2
    d790:	54d1      	strb	r1, [r2, r3]
		}
		
		// Check if the message was corrupted
		uint16_t crc_check = crc16(vesc_revieve_packet.payload, packet_len);
    d792:	4b25      	ldr	r3, [pc, #148]	; (d828 <read_vesc_packet+0x140>)
    d794:	881a      	ldrh	r2, [r3, #0]
    d796:	1dbc      	adds	r4, r7, #6
    d798:	4b25      	ldr	r3, [pc, #148]	; (d830 <read_vesc_packet+0x148>)
    d79a:	0011      	movs	r1, r2
    d79c:	0018      	movs	r0, r3
    d79e:	4b29      	ldr	r3, [pc, #164]	; (d844 <read_vesc_packet+0x15c>)
    d7a0:	4798      	blx	r3
    d7a2:	0003      	movs	r3, r0
    d7a4:	8023      	strh	r3, [r4, #0]
		if(crc_check != (uint16_t)((vesc_revieve_packet.crc[0]<<8)|vesc_revieve_packet.crc[1])){
    d7a6:	4b24      	ldr	r3, [pc, #144]	; (d838 <read_vesc_packet+0x150>)
    d7a8:	4a24      	ldr	r2, [pc, #144]	; (d83c <read_vesc_packet+0x154>)
    d7aa:	5c9b      	ldrb	r3, [r3, r2]
    d7ac:	021b      	lsls	r3, r3, #8
    d7ae:	b21a      	sxth	r2, r3
    d7b0:	4921      	ldr	r1, [pc, #132]	; (d838 <read_vesc_packet+0x150>)
    d7b2:	2381      	movs	r3, #129	; 0x81
    d7b4:	009b      	lsls	r3, r3, #2
    d7b6:	5ccb      	ldrb	r3, [r1, r3]
    d7b8:	b21b      	sxth	r3, r3
    d7ba:	4313      	orrs	r3, r2
    d7bc:	b21b      	sxth	r3, r3
    d7be:	b29b      	uxth	r3, r3
    d7c0:	1dba      	adds	r2, r7, #6
    d7c2:	8812      	ldrh	r2, [r2, #0]
    d7c4:	429a      	cmp	r2, r3
    d7c6:	d005      	beq.n	d7d4 <read_vesc_packet+0xec>
			ERROR_LEDs(0);
    d7c8:	2000      	movs	r0, #0
    d7ca:	4b1f      	ldr	r3, [pc, #124]	; (d848 <read_vesc_packet+0x160>)
    d7cc:	4798      	blx	r3
			VESC_PACKET_RECIEVED = false; // dont handle the packet if it was
    d7ce:	4b15      	ldr	r3, [pc, #84]	; (d824 <read_vesc_packet+0x13c>)
    d7d0:	2200      	movs	r2, #0
    d7d2:	701a      	strb	r2, [r3, #0]
		}
		
		vesc_usart_time = millis();
    d7d4:	4b1d      	ldr	r3, [pc, #116]	; (d84c <read_vesc_packet+0x164>)
    d7d6:	4798      	blx	r3
    d7d8:	0002      	movs	r2, r0
    d7da:	4b1d      	ldr	r3, [pc, #116]	; (d850 <read_vesc_packet+0x168>)
    d7dc:	601a      	str	r2, [r3, #0]
		HOLD_FOR_REPLY = false;
    d7de:	4b1d      	ldr	r3, [pc, #116]	; (d854 <read_vesc_packet+0x16c>)
    d7e0:	2200      	movs	r2, #0
    d7e2:	701a      	strb	r2, [r3, #0]
		
		memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6);
    d7e4:	4a1c      	ldr	r2, [pc, #112]	; (d858 <read_vesc_packet+0x170>)
    d7e6:	4b0d      	ldr	r3, [pc, #52]	; (d81c <read_vesc_packet+0x134>)
    d7e8:	2100      	movs	r1, #0
    d7ea:	0018      	movs	r0, r3
    d7ec:	4b1b      	ldr	r3, [pc, #108]	; (d85c <read_vesc_packet+0x174>)
    d7ee:	4798      	blx	r3
		//Stop listening to the ESC UART
		usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
    d7f0:	4b1b      	ldr	r3, [pc, #108]	; (d860 <read_vesc_packet+0x178>)
    d7f2:	2100      	movs	r1, #0
    d7f4:	0018      	movs	r0, r3
    d7f6:	4b1b      	ldr	r3, [pc, #108]	; (d864 <read_vesc_packet+0x17c>)
    d7f8:	4798      	blx	r3
		// Start listening to the ESC UART
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
    d7fa:	4a17      	ldr	r2, [pc, #92]	; (d858 <read_vesc_packet+0x170>)
    d7fc:	4907      	ldr	r1, [pc, #28]	; (d81c <read_vesc_packet+0x134>)
    d7fe:	4b18      	ldr	r3, [pc, #96]	; (d860 <read_vesc_packet+0x178>)
    d800:	0018      	movs	r0, r3
    d802:	4b19      	ldr	r3, [pc, #100]	; (d868 <read_vesc_packet+0x180>)
    d804:	4798      	blx	r3
	}

	if(VESC_PACKET_RECIEVED){
    d806:	4b07      	ldr	r3, [pc, #28]	; (d824 <read_vesc_packet+0x13c>)
    d808:	781b      	ldrb	r3, [r3, #0]
    d80a:	2b00      	cmp	r3, #0
    d80c:	d001      	beq.n	d812 <read_vesc_packet+0x12a>
		process_recieved_packet();
    d80e:	4b17      	ldr	r3, [pc, #92]	; (d86c <read_vesc_packet+0x184>)
    d810:	4798      	blx	r3
	}
}
    d812:	46c0      	nop			; (mov r8, r8)
    d814:	46bd      	mov	sp, r7
    d816:	b003      	add	sp, #12
    d818:	bd90      	pop	{r4, r7, pc}
    d81a:	46c0      	nop			; (mov r8, r8)
    d81c:	20000a78 	.word	0x20000a78
    d820:	0000d68d 	.word	0x0000d68d
    d824:	2000036d 	.word	0x2000036d
    d828:	20000370 	.word	0x20000370
    d82c:	20000a7a 	.word	0x20000a7a
    d830:	20000ce3 	.word	0x20000ce3
    d834:	00016fe5 	.word	0x00016fe5
    d838:	20000ce0 	.word	0x20000ce0
    d83c:	00000203 	.word	0x00000203
    d840:	20000a7b 	.word	0x20000a7b
    d844:	0000b779 	.word	0x0000b779
    d848:	0000b53d 	.word	0x0000b53d
    d84c:	0000b015 	.word	0x0000b015
    d850:	20000364 	.word	0x20000364
    d854:	20000368 	.word	0x20000368
    d858:	00000206 	.word	0x00000206
    d85c:	00016ff7 	.word	0x00016ff7
    d860:	20000718 	.word	0x20000718
    d864:	00006615 	.word	0x00006615
    d868:	000065cd 	.word	0x000065cd
    d86c:	0000ba29 	.word	0x0000ba29

0000d870 <get_pulse_width>:
int get_pulse_width(void);



//uint16_t light_sens = 0; // for PWM debugging
int get_pulse_width() {
    d870:	b580      	push	{r7, lr}
    d872:	af00      	add	r7, sp, #0
	return TCC1->CC[0].bit.CC;
    d874:	4b03      	ldr	r3, [pc, #12]	; (d884 <get_pulse_width+0x14>)
    d876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d878:	021b      	lsls	r3, r3, #8
    d87a:	0a1b      	lsrs	r3, r3, #8
}
    d87c:	0018      	movs	r0, r3
    d87e:	46bd      	mov	sp, r7
    d880:	bd80      	pop	{r7, pc}
    d882:	46c0      	nop			; (mov r8, r8)
    d884:	42002400 	.word	0x42002400

0000d888 <HandleUserInput>:

int pulse_width_last = 0;
int pulse_width = 0;
void HandleUserInput()
{
    d888:	b590      	push	{r4, r7, lr}
    d88a:	b083      	sub	sp, #12
    d88c:	af00      	add	r7, sp, #0
	///////////////   Use the appropriate throttle input   ///////////////
	//////////////////////////////////////////////////////////////////////
	switch(remote_type){
    d88e:	4bc9      	ldr	r3, [pc, #804]	; (dbb4 <HandleUserInput+0x32c>)
    d890:	781b      	ldrb	r3, [r3, #0]
    d892:	2b04      	cmp	r3, #4
    d894:	d853      	bhi.n	d93e <HandleUserInput+0xb6>
    d896:	009a      	lsls	r2, r3, #2
    d898:	4bc7      	ldr	r3, [pc, #796]	; (dbb8 <HandleUserInput+0x330>)
    d89a:	18d3      	adds	r3, r2, r3
    d89c:	681b      	ldr	r3, [r3, #0]
    d89e:	469f      	mov	pc, r3
		case REMOTE_PPM:
		case REMOTE_UART_PPM:{
			READ_VESC_PWM = true;
    d8a0:	4bc6      	ldr	r3, [pc, #792]	; (dbbc <HandleUserInput+0x334>)
    d8a2:	2201      	movs	r2, #1
    d8a4:	701a      	strb	r2, [r3, #0]
			float temp = (((float)latest_vesc_vals.pwm_val + 595000.0)*(255.0/1495000.0));
    d8a6:	4bc6      	ldr	r3, [pc, #792]	; (dbc0 <HandleUserInput+0x338>)
    d8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d8aa:	4bc6      	ldr	r3, [pc, #792]	; (dbc4 <HandleUserInput+0x33c>)
    d8ac:	0010      	movs	r0, r2
    d8ae:	4798      	blx	r3
    d8b0:	1c02      	adds	r2, r0, #0
    d8b2:	4bc5      	ldr	r3, [pc, #788]	; (dbc8 <HandleUserInput+0x340>)
    d8b4:	1c10      	adds	r0, r2, #0
    d8b6:	4798      	blx	r3
    d8b8:	4cc4      	ldr	r4, [pc, #784]	; (dbcc <HandleUserInput+0x344>)
    d8ba:	2200      	movs	r2, #0
    d8bc:	4bc4      	ldr	r3, [pc, #784]	; (dbd0 <HandleUserInput+0x348>)
    d8be:	47a0      	blx	r4
    d8c0:	0003      	movs	r3, r0
    d8c2:	000c      	movs	r4, r1
    d8c4:	0018      	movs	r0, r3
    d8c6:	0021      	movs	r1, r4
    d8c8:	4cc2      	ldr	r4, [pc, #776]	; (dbd4 <HandleUserInput+0x34c>)
    d8ca:	4ac3      	ldr	r2, [pc, #780]	; (dbd8 <HandleUserInput+0x350>)
    d8cc:	4bc3      	ldr	r3, [pc, #780]	; (dbdc <HandleUserInput+0x354>)
    d8ce:	47a0      	blx	r4
    d8d0:	0003      	movs	r3, r0
    d8d2:	000c      	movs	r4, r1
    d8d4:	0019      	movs	r1, r3
    d8d6:	0022      	movs	r2, r4
    d8d8:	4bc1      	ldr	r3, [pc, #772]	; (dbe0 <HandleUserInput+0x358>)
    d8da:	0008      	movs	r0, r1
    d8dc:	0011      	movs	r1, r2
    d8de:	4798      	blx	r3
    d8e0:	1c03      	adds	r3, r0, #0
    d8e2:	607b      	str	r3, [r7, #4]
			//temp = -temp + 255;
			if(temp < 0)
    d8e4:	4bbf      	ldr	r3, [pc, #764]	; (dbe4 <HandleUserInput+0x35c>)
    d8e6:	2100      	movs	r1, #0
    d8e8:	6878      	ldr	r0, [r7, #4]
    d8ea:	4798      	blx	r3
    d8ec:	1e03      	subs	r3, r0, #0
    d8ee:	d002      	beq.n	d8f6 <HandleUserInput+0x6e>
				temp = 0;
    d8f0:	2300      	movs	r3, #0
    d8f2:	607b      	str	r3, [r7, #4]
    d8f4:	e007      	b.n	d906 <HandleUserInput+0x7e>
			else if(temp > 255)
    d8f6:	4bbc      	ldr	r3, [pc, #752]	; (dbe8 <HandleUserInput+0x360>)
    d8f8:	49bc      	ldr	r1, [pc, #752]	; (dbec <HandleUserInput+0x364>)
    d8fa:	6878      	ldr	r0, [r7, #4]
    d8fc:	4798      	blx	r3
    d8fe:	1e03      	subs	r3, r0, #0
    d900:	d001      	beq.n	d906 <HandleUserInput+0x7e>
				temp = 255;
    d902:	4bba      	ldr	r3, [pc, #744]	; (dbec <HandleUserInput+0x364>)
    d904:	607b      	str	r3, [r7, #4]
			remote_y = (uint8_t)(temp);
    d906:	4bba      	ldr	r3, [pc, #744]	; (dbf0 <HandleUserInput+0x368>)
    d908:	6878      	ldr	r0, [r7, #4]
    d90a:	4798      	blx	r3
    d90c:	0003      	movs	r3, r0
    d90e:	b2da      	uxtb	r2, r3
    d910:	4bb8      	ldr	r3, [pc, #736]	; (dbf4 <HandleUserInput+0x36c>)
    d912:	701a      	strb	r2, [r3, #0]
			break;}
    d914:	e013      	b.n	d93e <HandleUserInput+0xb6>
		case REMOTE_UART_SINGLE:
		case REMOTE_UART_DUAL:
			READ_VESC_CHUCK = true;
    d916:	4bb8      	ldr	r3, [pc, #736]	; (dbf8 <HandleUserInput+0x370>)
    d918:	2201      	movs	r2, #1
    d91a:	701a      	strb	r2, [r3, #0]
			remote_y = rec_chuck_struct.js_y;
    d91c:	4bb7      	ldr	r3, [pc, #732]	; (dbfc <HandleUserInput+0x374>)
    d91e:	785b      	ldrb	r3, [r3, #1]
    d920:	b25b      	sxtb	r3, r3
    d922:	b2da      	uxtb	r2, r3
    d924:	4bb3      	ldr	r3, [pc, #716]	; (dbf4 <HandleUserInput+0x36c>)
    d926:	701a      	strb	r2, [r3, #0]
			if(remote_type == REMOTE_UART_DUAL)
    d928:	4ba2      	ldr	r3, [pc, #648]	; (dbb4 <HandleUserInput+0x32c>)
    d92a:	781b      	ldrb	r3, [r3, #0]
    d92c:	2b03      	cmp	r3, #3
    d92e:	d005      	beq.n	d93c <HandleUserInput+0xb4>
				remote_x;
			else
				remote_x = 255/2;
    d930:	4bb3      	ldr	r3, [pc, #716]	; (dc00 <HandleUserInput+0x378>)
    d932:	227f      	movs	r2, #127	; 0x7f
    d934:	701a      	strb	r2, [r3, #0]
			break;
    d936:	e001      	b.n	d93c <HandleUserInput+0xb4>
		case REMOTE_APP:
			//if(app_remote_check && REMOTE_TYPE < 2)
				//temp_y = AppRemoteY;
			//else
				//temp_y = VescRemoteY;
			break;
    d938:	46c0      	nop			; (mov r8, r8)
    d93a:	e000      	b.n	d93e <HandleUserInput+0xb6>
			break;
    d93c:	46c0      	nop			; (mov r8, r8)
	}


	////////////////   Use the appropriate button input   ////////////////
	//////////////////////////////////////////////////////////////////////
	switch(button_type){
    d93e:	4bb1      	ldr	r3, [pc, #708]	; (dc04 <HandleUserInput+0x37c>)
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	2b07      	cmp	r3, #7
    d944:	d844      	bhi.n	d9d0 <HandleUserInput+0x148>
    d946:	009a      	lsls	r2, r3, #2
    d948:	4baf      	ldr	r3, [pc, #700]	; (dc08 <HandleUserInput+0x380>)
    d94a:	18d3      	adds	r3, r2, r3
    d94c:	681b      	ldr	r3, [r3, #0]
    d94e:	469f      	mov	pc, r3
		case BTN_MOMENTARY: 
		case BTN_LATCHED:
			remote_btn_state = port_pin_get_input_level(PPM_IN);
    d950:	2022      	movs	r0, #34	; 0x22
    d952:	4bae      	ldr	r3, [pc, #696]	; (dc0c <HandleUserInput+0x384>)
    d954:	4798      	blx	r3
    d956:	0003      	movs	r3, r0
    d958:	001a      	movs	r2, r3
    d95a:	4bad      	ldr	r3, [pc, #692]	; (dc10 <HandleUserInput+0x388>)
    d95c:	701a      	strb	r2, [r3, #0]
			break;
    d95e:	e03b      	b.n	d9d8 <HandleUserInput+0x150>
		case BTN_LATCHED_PPM:{
			pulse_width = get_pulse_width();
    d960:	4bac      	ldr	r3, [pc, #688]	; (dc14 <HandleUserInput+0x38c>)
    d962:	4798      	blx	r3
    d964:	0002      	movs	r2, r0
    d966:	4bac      	ldr	r3, [pc, #688]	; (dc18 <HandleUserInput+0x390>)
    d968:	601a      	str	r2, [r3, #0]
			if(pulse_width > 9000)
    d96a:	4bab      	ldr	r3, [pc, #684]	; (dc18 <HandleUserInput+0x390>)
    d96c:	681b      	ldr	r3, [r3, #0]
    d96e:	4aab      	ldr	r2, [pc, #684]	; (dc1c <HandleUserInput+0x394>)
    d970:	4293      	cmp	r3, r2
    d972:	dd03      	ble.n	d97c <HandleUserInput+0xf4>
				remote_btn_state = false;
    d974:	4ba6      	ldr	r3, [pc, #664]	; (dc10 <HandleUserInput+0x388>)
    d976:	2200      	movs	r2, #0
    d978:	701a      	strb	r2, [r3, #0]
    d97a:	e002      	b.n	d982 <HandleUserInput+0xfa>
			else
				remote_btn_state = true;
    d97c:	4ba4      	ldr	r3, [pc, #656]	; (dc10 <HandleUserInput+0x388>)
    d97e:	2201      	movs	r2, #1
    d980:	701a      	strb	r2, [r3, #0]
			pulse_width_last = pulse_width;
    d982:	4ba5      	ldr	r3, [pc, #660]	; (dc18 <HandleUserInput+0x390>)
    d984:	681a      	ldr	r2, [r3, #0]
    d986:	4ba6      	ldr	r3, [pc, #664]	; (dc20 <HandleUserInput+0x398>)
    d988:	601a      	str	r2, [r3, #0]
			//light_sens = pulse_width; // for debugging pulse width reading
			}
			break;
    d98a:	e025      	b.n	d9d8 <HandleUserInput+0x150>
		case BTN_UART_C:
			remote_btn_state = rec_chuck_struct.bt_c;
    d98c:	4b9b      	ldr	r3, [pc, #620]	; (dbfc <HandleUserInput+0x374>)
    d98e:	7a1b      	ldrb	r3, [r3, #8]
    d990:	001a      	movs	r2, r3
    d992:	4b9f      	ldr	r3, [pc, #636]	; (dc10 <HandleUserInput+0x388>)
    d994:	701a      	strb	r2, [r3, #0]
			break;	
    d996:	e01f      	b.n	d9d8 <HandleUserInput+0x150>
		case BTN_UART_Z:
			remote_btn_state = rec_chuck_struct.bt_z;
    d998:	4b98      	ldr	r3, [pc, #608]	; (dbfc <HandleUserInput+0x374>)
    d99a:	7a5b      	ldrb	r3, [r3, #9]
    d99c:	001a      	movs	r2, r3
    d99e:	4b9c      	ldr	r3, [pc, #624]	; (dc10 <HandleUserInput+0x388>)
    d9a0:	701a      	strb	r2, [r3, #0]
			break;
    d9a2:	e019      	b.n	d9d8 <HandleUserInput+0x150>
		case BTN_THROTTLE_DWN:
			remote_btn_state = (remote_y < (127 - DWN_THRESH));
    d9a4:	4b93      	ldr	r3, [pc, #588]	; (dbf4 <HandleUserInput+0x36c>)
    d9a6:	781a      	ldrb	r2, [r3, #0]
    d9a8:	2174      	movs	r1, #116	; 0x74
    d9aa:	2300      	movs	r3, #0
    d9ac:	4291      	cmp	r1, r2
    d9ae:	415b      	adcs	r3, r3
    d9b0:	b2db      	uxtb	r3, r3
    d9b2:	001a      	movs	r2, r3
    d9b4:	4b96      	ldr	r3, [pc, #600]	; (dc10 <HandleUserInput+0x388>)
    d9b6:	701a      	strb	r2, [r3, #0]
			break;
    d9b8:	e00e      	b.n	d9d8 <HandleUserInput+0x150>
		case BTN_THROTTLE_UP:
			remote_btn_state = (remote_y > (127 + UP_THRESH));
    d9ba:	4b8e      	ldr	r3, [pc, #568]	; (dbf4 <HandleUserInput+0x36c>)
    d9bc:	781b      	ldrb	r3, [r3, #0]
    d9be:	2289      	movs	r2, #137	; 0x89
    d9c0:	429a      	cmp	r2, r3
    d9c2:	419b      	sbcs	r3, r3
    d9c4:	425b      	negs	r3, r3
    d9c6:	b2db      	uxtb	r3, r3
    d9c8:	001a      	movs	r2, r3
    d9ca:	4b91      	ldr	r3, [pc, #580]	; (dc10 <HandleUserInput+0x388>)
    d9cc:	701a      	strb	r2, [r3, #0]
			break;
    d9ce:	e003      	b.n	d9d8 <HandleUserInput+0x150>
		default:
			remote_btn_state = 0;
    d9d0:	4b8f      	ldr	r3, [pc, #572]	; (dc10 <HandleUserInput+0x388>)
    d9d2:	2200      	movs	r2, #0
    d9d4:	701a      	strb	r2, [r3, #0]
			break;
    d9d6:	46c0      	nop			; (mov r8, r8)
	}

	////   Determine the time the button was held down and released   ////
	//////////////////////////////////////////////////////////////////////
	if(button_type != BTN_LATCHED && button_type != BTN_LATCHED_PPM){
    d9d8:	4b8a      	ldr	r3, [pc, #552]	; (dc04 <HandleUserInput+0x37c>)
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	2b02      	cmp	r3, #2
    d9de:	d063      	beq.n	daa8 <HandleUserInput+0x220>
    d9e0:	4b88      	ldr	r3, [pc, #544]	; (dc04 <HandleUserInput+0x37c>)
    d9e2:	781b      	ldrb	r3, [r3, #0]
    d9e4:	2b03      	cmp	r3, #3
    d9e6:	d05f      	beq.n	daa8 <HandleUserInput+0x220>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    d9e8:	4b89      	ldr	r3, [pc, #548]	; (dc10 <HandleUserInput+0x388>)
    d9ea:	781b      	ldrb	r3, [r3, #0]
    d9ec:	2b01      	cmp	r3, #1
    d9ee:	d10c      	bne.n	da0a <HandleUserInput+0x182>
    d9f0:	4b8c      	ldr	r3, [pc, #560]	; (dc24 <HandleUserInput+0x39c>)
    d9f2:	781b      	ldrb	r3, [r3, #0]
    d9f4:	2b00      	cmp	r3, #0
    d9f6:	d108      	bne.n	da0a <HandleUserInput+0x182>
			lButtonTime = millis(); // Mark the time of button state transition
    d9f8:	4b8b      	ldr	r3, [pc, #556]	; (dc28 <HandleUserInput+0x3a0>)
    d9fa:	4798      	blx	r3
    d9fc:	0002      	movs	r2, r0
    d9fe:	4b8b      	ldr	r3, [pc, #556]	; (dc2c <HandleUserInput+0x3a4>)
    da00:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    da02:	4b8b      	ldr	r3, [pc, #556]	; (dc30 <HandleUserInput+0x3a8>)
    da04:	2200      	movs	r2, #0
    da06:	601a      	str	r2, [r3, #0]
    da08:	e04d      	b.n	daa6 <HandleUserInput+0x21e>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
    da0a:	4b81      	ldr	r3, [pc, #516]	; (dc10 <HandleUserInput+0x388>)
    da0c:	781b      	ldrb	r3, [r3, #0]
    da0e:	2b00      	cmp	r3, #0
    da10:	d118      	bne.n	da44 <HandleUserInput+0x1bc>
    da12:	4b84      	ldr	r3, [pc, #528]	; (dc24 <HandleUserInput+0x39c>)
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	2b01      	cmp	r3, #1
    da18:	d114      	bne.n	da44 <HandleUserInput+0x1bc>
			check_time(&lButtonTime);
    da1a:	4b84      	ldr	r3, [pc, #528]	; (dc2c <HandleUserInput+0x3a4>)
    da1c:	0018      	movs	r0, r3
    da1e:	4b85      	ldr	r3, [pc, #532]	; (dc34 <HandleUserInput+0x3ac>)
    da20:	4798      	blx	r3
			ButtonDownTime = millis() - lButtonTime;  // Track time button was pressed
    da22:	4b81      	ldr	r3, [pc, #516]	; (dc28 <HandleUserInput+0x3a0>)
    da24:	4798      	blx	r3
    da26:	0002      	movs	r2, r0
    da28:	4b80      	ldr	r3, [pc, #512]	; (dc2c <HandleUserInput+0x3a4>)
    da2a:	681b      	ldr	r3, [r3, #0]
    da2c:	1ad2      	subs	r2, r2, r3
    da2e:	4b82      	ldr	r3, [pc, #520]	; (dc38 <HandleUserInput+0x3b0>)
    da30:	601a      	str	r2, [r3, #0]

			lButtonTime = millis();  // Mark the time of button state transition
    da32:	4b7d      	ldr	r3, [pc, #500]	; (dc28 <HandleUserInput+0x3a0>)
    da34:	4798      	blx	r3
    da36:	0002      	movs	r2, r0
    da38:	4b7c      	ldr	r3, [pc, #496]	; (dc2c <HandleUserInput+0x3a4>)
    da3a:	601a      	str	r2, [r3, #0]
			ButtonHeldTime = 0;
    da3c:	4b7f      	ldr	r3, [pc, #508]	; (dc3c <HandleUserInput+0x3b4>)
    da3e:	2200      	movs	r2, #0
    da40:	601a      	str	r2, [r3, #0]
    da42:	e030      	b.n	daa6 <HandleUserInput+0x21e>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
    da44:	4b72      	ldr	r3, [pc, #456]	; (dc10 <HandleUserInput+0x388>)
    da46:	781b      	ldrb	r3, [r3, #0]
    da48:	2b00      	cmp	r3, #0
    da4a:	d116      	bne.n	da7a <HandleUserInput+0x1f2>
    da4c:	4b75      	ldr	r3, [pc, #468]	; (dc24 <HandleUserInput+0x39c>)
    da4e:	781b      	ldrb	r3, [r3, #0]
    da50:	2b00      	cmp	r3, #0
    da52:	d112      	bne.n	da7a <HandleUserInput+0x1f2>
			check_time(&lButtonTime);
    da54:	4b75      	ldr	r3, [pc, #468]	; (dc2c <HandleUserInput+0x3a4>)
    da56:	0018      	movs	r0, r3
    da58:	4b76      	ldr	r3, [pc, #472]	; (dc34 <HandleUserInput+0x3ac>)
    da5a:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    da5c:	4b72      	ldr	r3, [pc, #456]	; (dc28 <HandleUserInput+0x3a0>)
    da5e:	4798      	blx	r3
    da60:	0002      	movs	r2, r0
    da62:	4b72      	ldr	r3, [pc, #456]	; (dc2c <HandleUserInput+0x3a4>)
    da64:	681b      	ldr	r3, [r3, #0]
    da66:	1ad2      	subs	r2, r2, r3
    da68:	4b71      	ldr	r3, [pc, #452]	; (dc30 <HandleUserInput+0x3a8>)
    da6a:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
    da6c:	4b72      	ldr	r3, [pc, #456]	; (dc38 <HandleUserInput+0x3b0>)
    da6e:	2200      	movs	r2, #0
    da70:	601a      	str	r2, [r3, #0]
			TurnSignalOn = false;
    da72:	4b73      	ldr	r3, [pc, #460]	; (dc40 <HandleUserInput+0x3b8>)
    da74:	2200      	movs	r2, #0
    da76:	701a      	strb	r2, [r3, #0]
    da78:	e015      	b.n	daa6 <HandleUserInput+0x21e>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
    da7a:	4b65      	ldr	r3, [pc, #404]	; (dc10 <HandleUserInput+0x388>)
    da7c:	781b      	ldrb	r3, [r3, #0]
    da7e:	2b01      	cmp	r3, #1
    da80:	d000      	beq.n	da84 <HandleUserInput+0x1fc>
    da82:	e06c      	b.n	db5e <HandleUserInput+0x2d6>
    da84:	4b67      	ldr	r3, [pc, #412]	; (dc24 <HandleUserInput+0x39c>)
    da86:	781b      	ldrb	r3, [r3, #0]
    da88:	2b01      	cmp	r3, #1
    da8a:	d168      	bne.n	db5e <HandleUserInput+0x2d6>
			check_time(&lButtonTime);
    da8c:	4b67      	ldr	r3, [pc, #412]	; (dc2c <HandleUserInput+0x3a4>)
    da8e:	0018      	movs	r0, r3
    da90:	4b68      	ldr	r3, [pc, #416]	; (dc34 <HandleUserInput+0x3ac>)
    da92:	4798      	blx	r3
			ButtonHeldTime = millis() - lButtonTime; // Track time button is not pressed
    da94:	4b64      	ldr	r3, [pc, #400]	; (dc28 <HandleUserInput+0x3a0>)
    da96:	4798      	blx	r3
    da98:	0002      	movs	r2, r0
    da9a:	4b64      	ldr	r3, [pc, #400]	; (dc2c <HandleUserInput+0x3a4>)
    da9c:	681b      	ldr	r3, [r3, #0]
    da9e:	1ad2      	subs	r2, r2, r3
    daa0:	4b66      	ldr	r3, [pc, #408]	; (dc3c <HandleUserInput+0x3b4>)
    daa2:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    daa4:	e05b      	b.n	db5e <HandleUserInput+0x2d6>
    daa6:	e05a      	b.n	db5e <HandleUserInput+0x2d6>
		}
	} else {
		ButtonHeldTime = 0;
    daa8:	4b64      	ldr	r3, [pc, #400]	; (dc3c <HandleUserInput+0x3b4>)
    daaa:	2200      	movs	r2, #0
    daac:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    daae:	4b58      	ldr	r3, [pc, #352]	; (dc10 <HandleUserInput+0x388>)
    dab0:	781b      	ldrb	r3, [r3, #0]
    dab2:	2b01      	cmp	r3, #1
    dab4:	d10f      	bne.n	dad6 <HandleUserInput+0x24e>
    dab6:	4b5b      	ldr	r3, [pc, #364]	; (dc24 <HandleUserInput+0x39c>)
    dab8:	781b      	ldrb	r3, [r3, #0]
    daba:	2b00      	cmp	r3, #0
    dabc:	d10b      	bne.n	dad6 <HandleUserInput+0x24e>
			ButtonDownTime = 250;  // Track time button was pressed
    dabe:	4b5e      	ldr	r3, [pc, #376]	; (dc38 <HandleUserInput+0x3b0>)
    dac0:	22fa      	movs	r2, #250	; 0xfa
    dac2:	601a      	str	r2, [r3, #0]
			lButtonTime = millis(); // Mark the time of button state transition
    dac4:	4b58      	ldr	r3, [pc, #352]	; (dc28 <HandleUserInput+0x3a0>)
    dac6:	4798      	blx	r3
    dac8:	0002      	movs	r2, r0
    daca:	4b58      	ldr	r3, [pc, #352]	; (dc2c <HandleUserInput+0x3a4>)
    dacc:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    dace:	4b58      	ldr	r3, [pc, #352]	; (dc30 <HandleUserInput+0x3a8>)
    dad0:	2200      	movs	r2, #0
    dad2:	601a      	str	r2, [r3, #0]
    dad4:	e044      	b.n	db60 <HandleUserInput+0x2d8>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
    dad6:	4b4e      	ldr	r3, [pc, #312]	; (dc10 <HandleUserInput+0x388>)
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	2b00      	cmp	r3, #0
    dadc:	d10f      	bne.n	dafe <HandleUserInput+0x276>
    dade:	4b51      	ldr	r3, [pc, #324]	; (dc24 <HandleUserInput+0x39c>)
    dae0:	781b      	ldrb	r3, [r3, #0]
    dae2:	2b01      	cmp	r3, #1
    dae4:	d10b      	bne.n	dafe <HandleUserInput+0x276>
			ButtonDownTime = 250;  // Track time button was pressed
    dae6:	4b54      	ldr	r3, [pc, #336]	; (dc38 <HandleUserInput+0x3b0>)
    dae8:	22fa      	movs	r2, #250	; 0xfa
    daea:	601a      	str	r2, [r3, #0]
			lButtonTime = millis();  // Mark the time of button state transition
    daec:	4b4e      	ldr	r3, [pc, #312]	; (dc28 <HandleUserInput+0x3a0>)
    daee:	4798      	blx	r3
    daf0:	0002      	movs	r2, r0
    daf2:	4b4e      	ldr	r3, [pc, #312]	; (dc2c <HandleUserInput+0x3a4>)
    daf4:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    daf6:	4b4e      	ldr	r3, [pc, #312]	; (dc30 <HandleUserInput+0x3a8>)
    daf8:	2200      	movs	r2, #0
    dafa:	601a      	str	r2, [r3, #0]
    dafc:	e030      	b.n	db60 <HandleUserInput+0x2d8>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
    dafe:	4b44      	ldr	r3, [pc, #272]	; (dc10 <HandleUserInput+0x388>)
    db00:	781b      	ldrb	r3, [r3, #0]
    db02:	2b00      	cmp	r3, #0
    db04:	d113      	bne.n	db2e <HandleUserInput+0x2a6>
    db06:	4b47      	ldr	r3, [pc, #284]	; (dc24 <HandleUserInput+0x39c>)
    db08:	781b      	ldrb	r3, [r3, #0]
    db0a:	2b00      	cmp	r3, #0
    db0c:	d10f      	bne.n	db2e <HandleUserInput+0x2a6>
			check_time(&lButtonTime);
    db0e:	4b47      	ldr	r3, [pc, #284]	; (dc2c <HandleUserInput+0x3a4>)
    db10:	0018      	movs	r0, r3
    db12:	4b48      	ldr	r3, [pc, #288]	; (dc34 <HandleUserInput+0x3ac>)
    db14:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    db16:	4b44      	ldr	r3, [pc, #272]	; (dc28 <HandleUserInput+0x3a0>)
    db18:	4798      	blx	r3
    db1a:	0002      	movs	r2, r0
    db1c:	4b43      	ldr	r3, [pc, #268]	; (dc2c <HandleUserInput+0x3a4>)
    db1e:	681b      	ldr	r3, [r3, #0]
    db20:	1ad2      	subs	r2, r2, r3
    db22:	4b43      	ldr	r3, [pc, #268]	; (dc30 <HandleUserInput+0x3a8>)
    db24:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
    db26:	4b44      	ldr	r3, [pc, #272]	; (dc38 <HandleUserInput+0x3b0>)
    db28:	2200      	movs	r2, #0
    db2a:	601a      	str	r2, [r3, #0]
    db2c:	e018      	b.n	db60 <HandleUserInput+0x2d8>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
    db2e:	4b38      	ldr	r3, [pc, #224]	; (dc10 <HandleUserInput+0x388>)
    db30:	781b      	ldrb	r3, [r3, #0]
    db32:	2b01      	cmp	r3, #1
    db34:	d114      	bne.n	db60 <HandleUserInput+0x2d8>
    db36:	4b3b      	ldr	r3, [pc, #236]	; (dc24 <HandleUserInput+0x39c>)
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	2b01      	cmp	r3, #1
    db3c:	d110      	bne.n	db60 <HandleUserInput+0x2d8>
			check_time(&lButtonTime);
    db3e:	4b3b      	ldr	r3, [pc, #236]	; (dc2c <HandleUserInput+0x3a4>)
    db40:	0018      	movs	r0, r3
    db42:	4b3c      	ldr	r3, [pc, #240]	; (dc34 <HandleUserInput+0x3ac>)
    db44:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    db46:	4b38      	ldr	r3, [pc, #224]	; (dc28 <HandleUserInput+0x3a0>)
    db48:	4798      	blx	r3
    db4a:	0002      	movs	r2, r0
    db4c:	4b37      	ldr	r3, [pc, #220]	; (dc2c <HandleUserInput+0x3a4>)
    db4e:	681b      	ldr	r3, [r3, #0]
    db50:	1ad2      	subs	r2, r2, r3
    db52:	4b37      	ldr	r3, [pc, #220]	; (dc30 <HandleUserInput+0x3a8>)
    db54:	601a      	str	r2, [r3, #0]
			
			ButtonDownTime = 0;
    db56:	4b38      	ldr	r3, [pc, #224]	; (dc38 <HandleUserInput+0x3b0>)
    db58:	2200      	movs	r2, #0
    db5a:	601a      	str	r2, [r3, #0]
    db5c:	e000      	b.n	db60 <HandleUserInput+0x2d8>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    db5e:	46c0      	nop			; (mov r8, r8)
		}
	}

	////////   Determine the type of button press that occurred   ////////
	//////////////////////////////////////////////////////////////////////
	ButtonPressType = PRESS_NONE;
    db60:	4b38      	ldr	r3, [pc, #224]	; (dc44 <HandleUserInput+0x3bc>)
    db62:	2200      	movs	r2, #0
    db64:	701a      	strb	r2, [r3, #0]
	if(ButtonDownTime > 0 && ButtonDownTime < 500){ // Button Tap
    db66:	4b34      	ldr	r3, [pc, #208]	; (dc38 <HandleUserInput+0x3b0>)
    db68:	681b      	ldr	r3, [r3, #0]
    db6a:	2b00      	cmp	r3, #0
    db6c:	d00c      	beq.n	db88 <HandleUserInput+0x300>
    db6e:	4b32      	ldr	r3, [pc, #200]	; (dc38 <HandleUserInput+0x3b0>)
    db70:	681a      	ldr	r2, [r3, #0]
    db72:	23f4      	movs	r3, #244	; 0xf4
    db74:	33ff      	adds	r3, #255	; 0xff
    db76:	429a      	cmp	r2, r3
    db78:	d806      	bhi.n	db88 <HandleUserInput+0x300>
		tapIndex++;
    db7a:	4b33      	ldr	r3, [pc, #204]	; (dc48 <HandleUserInput+0x3c0>)
    db7c:	781b      	ldrb	r3, [r3, #0]
    db7e:	3301      	adds	r3, #1
    db80:	b2da      	uxtb	r2, r3
    db82:	4b31      	ldr	r3, [pc, #196]	; (dc48 <HandleUserInput+0x3c0>)
    db84:	701a      	strb	r2, [r3, #0]
    db86:	e072      	b.n	dc6e <HandleUserInput+0x3e6>
	} else if(ButtonDownTime > 500 && ButtonDownTime < 1000 && !TurnSignalOn){ // Medium Press
    db88:	4b2b      	ldr	r3, [pc, #172]	; (dc38 <HandleUserInput+0x3b0>)
    db8a:	681a      	ldr	r2, [r3, #0]
    db8c:	23fa      	movs	r3, #250	; 0xfa
    db8e:	005b      	lsls	r3, r3, #1
    db90:	429a      	cmp	r2, r3
    db92:	d95d      	bls.n	dc50 <HandleUserInput+0x3c8>
    db94:	4b28      	ldr	r3, [pc, #160]	; (dc38 <HandleUserInput+0x3b0>)
    db96:	681b      	ldr	r3, [r3, #0]
    db98:	4a2c      	ldr	r2, [pc, #176]	; (dc4c <HandleUserInput+0x3c4>)
    db9a:	4293      	cmp	r3, r2
    db9c:	d858      	bhi.n	dc50 <HandleUserInput+0x3c8>
    db9e:	4b28      	ldr	r3, [pc, #160]	; (dc40 <HandleUserInput+0x3b8>)
    dba0:	781b      	ldrb	r3, [r3, #0]
    dba2:	2201      	movs	r2, #1
    dba4:	4053      	eors	r3, r2
    dba6:	b2db      	uxtb	r3, r3
    dba8:	2b00      	cmp	r3, #0
    dbaa:	d051      	beq.n	dc50 <HandleUserInput+0x3c8>
		ButtonPressType = MEDIUM_PRESS;
    dbac:	4b25      	ldr	r3, [pc, #148]	; (dc44 <HandleUserInput+0x3bc>)
    dbae:	2206      	movs	r2, #6
    dbb0:	701a      	strb	r2, [r3, #0]
    dbb2:	e05c      	b.n	dc6e <HandleUserInput+0x3e6>
    dbb4:	20000308 	.word	0x20000308
    dbb8:	00017530 	.word	0x00017530
    dbbc:	20000369 	.word	0x20000369
    dbc0:	20000958 	.word	0x20000958
    dbc4:	00015161 	.word	0x00015161
    dbc8:	00016d9d 	.word	0x00016d9d
    dbcc:	0001528d 	.word	0x0001528d
    dbd0:	41222870 	.word	0x41222870
    dbd4:	00016115 	.word	0x00016115
    dbd8:	ca397ea4 	.word	0xca397ea4
    dbdc:	3f265b54 	.word	0x3f265b54
    dbe0:	00016e41 	.word	0x00016e41
    dbe4:	00014395 	.word	0x00014395
    dbe8:	000143bd 	.word	0x000143bd
    dbec:	437f0000 	.word	0x437f0000
    dbf0:	00014439 	.word	0x00014439
    dbf4:	2000030a 	.word	0x2000030a
    dbf8:	2000036a 	.word	0x2000036a
    dbfc:	20001054 	.word	0x20001054
    dc00:	2000030b 	.word	0x2000030b
    dc04:	20000309 	.word	0x20000309
    dc08:	00017544 	.word	0x00017544
    dc0c:	00008cbd 	.word	0x00008cbd
    dc10:	2000030c 	.word	0x2000030c
    dc14:	0000d871 	.word	0x0000d871
    dc18:	200003a8 	.word	0x200003a8
    dc1c:	00002328 	.word	0x00002328
    dc20:	200003a4 	.word	0x200003a4
    dc24:	2000030d 	.word	0x2000030d
    dc28:	0000b015 	.word	0x0000b015
    dc2c:	20000398 	.word	0x20000398
    dc30:	20000394 	.word	0x20000394
    dc34:	0000b045 	.word	0x0000b045
    dc38:	20000390 	.word	0x20000390
    dc3c:	2000038c 	.word	0x2000038c
    dc40:	2000039c 	.word	0x2000039c
    dc44:	20000388 	.word	0x20000388
    dc48:	2000038a 	.word	0x2000038a
    dc4c:	000003e7 	.word	0x000003e7
	} else if(ButtonDownTime >= 1000 && !TurnSignalOn){ // Long Press
    dc50:	4bc3      	ldr	r3, [pc, #780]	; (df60 <HandleUserInput+0x6d8>)
    dc52:	681b      	ldr	r3, [r3, #0]
    dc54:	4ac3      	ldr	r2, [pc, #780]	; (df64 <HandleUserInput+0x6dc>)
    dc56:	4293      	cmp	r3, r2
    dc58:	d909      	bls.n	dc6e <HandleUserInput+0x3e6>
    dc5a:	4bc3      	ldr	r3, [pc, #780]	; (df68 <HandleUserInput+0x6e0>)
    dc5c:	781b      	ldrb	r3, [r3, #0]
    dc5e:	2201      	movs	r2, #1
    dc60:	4053      	eors	r3, r2
    dc62:	b2db      	uxtb	r3, r3
    dc64:	2b00      	cmp	r3, #0
    dc66:	d002      	beq.n	dc6e <HandleUserInput+0x3e6>
		ButtonPressType = LONG_PRESS;
    dc68:	4bc0      	ldr	r3, [pc, #768]	; (df6c <HandleUserInput+0x6e4>)
    dc6a:	2207      	movs	r2, #7
    dc6c:	701a      	strb	r2, [r3, #0]
	}
	if(tapIndex > 0 && ButtonUpTime > 200){
    dc6e:	4bc0      	ldr	r3, [pc, #768]	; (df70 <HandleUserInput+0x6e8>)
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	2b00      	cmp	r3, #0
    dc74:	d006      	beq.n	dc84 <HandleUserInput+0x3fc>
    dc76:	4bbf      	ldr	r3, [pc, #764]	; (df74 <HandleUserInput+0x6ec>)
    dc78:	681b      	ldr	r3, [r3, #0]
    dc7a:	2bc8      	cmp	r3, #200	; 0xc8
    dc7c:	d902      	bls.n	dc84 <HandleUserInput+0x3fc>
		tapSequence = 1;
    dc7e:	4bbe      	ldr	r3, [pc, #760]	; (df78 <HandleUserInput+0x6f0>)
    dc80:	2201      	movs	r2, #1
    dc82:	701a      	strb	r2, [r3, #0]
	}
	if(tapSequence){
    dc84:	4bbc      	ldr	r3, [pc, #752]	; (df78 <HandleUserInput+0x6f0>)
    dc86:	781b      	ldrb	r3, [r3, #0]
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d03c      	beq.n	dd06 <HandleUserInput+0x47e>
		if(remote_type == REMOTE_UART_DUAL && VescRemoteX <= 110 && tapIndex == 1)
    dc8c:	4bbb      	ldr	r3, [pc, #748]	; (df7c <HandleUserInput+0x6f4>)
    dc8e:	781b      	ldrb	r3, [r3, #0]
    dc90:	2b03      	cmp	r3, #3
    dc92:	d10b      	bne.n	dcac <HandleUserInput+0x424>
    dc94:	4bba      	ldr	r3, [pc, #744]	; (df80 <HandleUserInput+0x6f8>)
    dc96:	781b      	ldrb	r3, [r3, #0]
    dc98:	2b6e      	cmp	r3, #110	; 0x6e
    dc9a:	d807      	bhi.n	dcac <HandleUserInput+0x424>
    dc9c:	4bb4      	ldr	r3, [pc, #720]	; (df70 <HandleUserInput+0x6e8>)
    dc9e:	781b      	ldrb	r3, [r3, #0]
    dca0:	2b01      	cmp	r3, #1
    dca2:	d103      	bne.n	dcac <HandleUserInput+0x424>
			ButtonPressType = LEFT_TAP;
    dca4:	4bb1      	ldr	r3, [pc, #708]	; (df6c <HandleUserInput+0x6e4>)
    dca6:	2204      	movs	r2, #4
    dca8:	701a      	strb	r2, [r3, #0]
    dcaa:	e026      	b.n	dcfa <HandleUserInput+0x472>
		else if(remote_type == REMOTE_UART_DUAL && VescRemoteX >= 150 && tapIndex == 1)
    dcac:	4bb3      	ldr	r3, [pc, #716]	; (df7c <HandleUserInput+0x6f4>)
    dcae:	781b      	ldrb	r3, [r3, #0]
    dcb0:	2b03      	cmp	r3, #3
    dcb2:	d10b      	bne.n	dccc <HandleUserInput+0x444>
    dcb4:	4bb2      	ldr	r3, [pc, #712]	; (df80 <HandleUserInput+0x6f8>)
    dcb6:	781b      	ldrb	r3, [r3, #0]
    dcb8:	2b95      	cmp	r3, #149	; 0x95
    dcba:	d907      	bls.n	dccc <HandleUserInput+0x444>
    dcbc:	4bac      	ldr	r3, [pc, #688]	; (df70 <HandleUserInput+0x6e8>)
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	2b01      	cmp	r3, #1
    dcc2:	d103      	bne.n	dccc <HandleUserInput+0x444>
		ButtonPressType = RIGHT_TAP;
    dcc4:	4ba9      	ldr	r3, [pc, #676]	; (df6c <HandleUserInput+0x6e4>)
    dcc6:	2205      	movs	r2, #5
    dcc8:	701a      	strb	r2, [r3, #0]
    dcca:	e016      	b.n	dcfa <HandleUserInput+0x472>
		else if(tapIndex == 1)
    dccc:	4ba8      	ldr	r3, [pc, #672]	; (df70 <HandleUserInput+0x6e8>)
    dcce:	781b      	ldrb	r3, [r3, #0]
    dcd0:	2b01      	cmp	r3, #1
    dcd2:	d103      	bne.n	dcdc <HandleUserInput+0x454>
			ButtonPressType = SINGLE_TAP;
    dcd4:	4ba5      	ldr	r3, [pc, #660]	; (df6c <HandleUserInput+0x6e4>)
    dcd6:	2201      	movs	r2, #1
    dcd8:	701a      	strb	r2, [r3, #0]
    dcda:	e00e      	b.n	dcfa <HandleUserInput+0x472>
		else if(tapIndex == 2)
    dcdc:	4ba4      	ldr	r3, [pc, #656]	; (df70 <HandleUserInput+0x6e8>)
    dcde:	781b      	ldrb	r3, [r3, #0]
    dce0:	2b02      	cmp	r3, #2
    dce2:	d103      	bne.n	dcec <HandleUserInput+0x464>
			ButtonPressType = DOUBLE_TAP;
    dce4:	4ba1      	ldr	r3, [pc, #644]	; (df6c <HandleUserInput+0x6e4>)
    dce6:	2202      	movs	r2, #2
    dce8:	701a      	strb	r2, [r3, #0]
    dcea:	e006      	b.n	dcfa <HandleUserInput+0x472>
		else if(tapIndex == 3)
    dcec:	4ba0      	ldr	r3, [pc, #640]	; (df70 <HandleUserInput+0x6e8>)
    dcee:	781b      	ldrb	r3, [r3, #0]
    dcf0:	2b03      	cmp	r3, #3
    dcf2:	d102      	bne.n	dcfa <HandleUserInput+0x472>
			ButtonPressType = TRIPLE_TAP;
    dcf4:	4b9d      	ldr	r3, [pc, #628]	; (df6c <HandleUserInput+0x6e4>)
    dcf6:	2203      	movs	r2, #3
    dcf8:	701a      	strb	r2, [r3, #0]
		
		tapSequence = 0;
    dcfa:	4b9f      	ldr	r3, [pc, #636]	; (df78 <HandleUserInput+0x6f0>)
    dcfc:	2200      	movs	r2, #0
    dcfe:	701a      	strb	r2, [r3, #0]
		tapIndex = 0;
    dd00:	4b9b      	ldr	r3, [pc, #620]	; (df70 <HandleUserInput+0x6e8>)
    dd02:	2200      	movs	r2, #0
    dd04:	701a      	strb	r2, [r3, #0]
	}
	
	//////////////////////   Handle the aux output   /////////////////////
	//////////////////////////////////////////////////////////////////////
	if(AUX_ENABLED){
    dd06:	4b9f      	ldr	r3, [pc, #636]	; (df84 <HandleUserInput+0x6fc>)
    dd08:	781b      	ldrb	r3, [r3, #0]
    dd0a:	2b00      	cmp	r3, #0
    dd0c:	d100      	bne.n	dd10 <HandleUserInput+0x488>
    dd0e:	e09f      	b.n	de50 <HandleUserInput+0x5c8>
		switch(auxControlType){
    dd10:	4b9d      	ldr	r3, [pc, #628]	; (df88 <HandleUserInput+0x700>)
    dd12:	781b      	ldrb	r3, [r3, #0]
    dd14:	2b01      	cmp	r3, #1
    dd16:	d014      	beq.n	dd42 <HandleUserInput+0x4ba>
    dd18:	dc02      	bgt.n	dd20 <HandleUserInput+0x498>
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	d003      	beq.n	dd26 <HandleUserInput+0x49e>
    dd1e:	e06b      	b.n	ddf8 <HandleUserInput+0x570>
    dd20:	2b02      	cmp	r3, #2
    dd22:	d031      	beq.n	dd88 <HandleUserInput+0x500>
				check_time(&AuxOnTime);
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
					AUX_OUTPUT = false;
				break;
			case AUX_PATTERN:
				break;
    dd24:	e068      	b.n	ddf8 <HandleUserInput+0x570>
				if(ButtonHeldTime > 500){
    dd26:	4b99      	ldr	r3, [pc, #612]	; (df8c <HandleUserInput+0x704>)
    dd28:	681a      	ldr	r2, [r3, #0]
    dd2a:	23fa      	movs	r3, #250	; 0xfa
    dd2c:	005b      	lsls	r3, r3, #1
    dd2e:	429a      	cmp	r2, r3
    dd30:	d903      	bls.n	dd3a <HandleUserInput+0x4b2>
					AUX_OUTPUT = true;
    dd32:	4b97      	ldr	r3, [pc, #604]	; (df90 <HandleUserInput+0x708>)
    dd34:	2201      	movs	r2, #1
    dd36:	701a      	strb	r2, [r3, #0]
				break;
    dd38:	e05e      	b.n	ddf8 <HandleUserInput+0x570>
					AUX_OUTPUT = false;
    dd3a:	4b95      	ldr	r3, [pc, #596]	; (df90 <HandleUserInput+0x708>)
    dd3c:	2200      	movs	r2, #0
    dd3e:	701a      	strb	r2, [r3, #0]
				break;
    dd40:	e05a      	b.n	ddf8 <HandleUserInput+0x570>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
    dd42:	4b8e      	ldr	r3, [pc, #568]	; (df7c <HandleUserInput+0x6f4>)
    dd44:	781b      	ldrb	r3, [r3, #0]
    dd46:	2b03      	cmp	r3, #3
    dd48:	d005      	beq.n	dd56 <HandleUserInput+0x4ce>
    dd4a:	4b92      	ldr	r3, [pc, #584]	; (df94 <HandleUserInput+0x70c>)
    dd4c:	781a      	ldrb	r2, [r3, #0]
    dd4e:	4b87      	ldr	r3, [pc, #540]	; (df6c <HandleUserInput+0x6e4>)
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	429a      	cmp	r2, r3
    dd54:	d009      	beq.n	dd6a <HandleUserInput+0x4e2>
					|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
    dd56:	4b89      	ldr	r3, [pc, #548]	; (df7c <HandleUserInput+0x6f4>)
    dd58:	781b      	ldrb	r3, [r3, #0]
    dd5a:	2b03      	cmp	r3, #3
    dd5c:	d149      	bne.n	ddf2 <HandleUserInput+0x56a>
    dd5e:	4b8e      	ldr	r3, [pc, #568]	; (df98 <HandleUserInput+0x710>)
    dd60:	781a      	ldrb	r2, [r3, #0]
    dd62:	4b82      	ldr	r3, [pc, #520]	; (df6c <HandleUserInput+0x6e4>)
    dd64:	781b      	ldrb	r3, [r3, #0]
    dd66:	429a      	cmp	r2, r3
    dd68:	d143      	bne.n	ddf2 <HandleUserInput+0x56a>
					AUX_OUTPUT = !AUX_OUTPUT;
    dd6a:	4b89      	ldr	r3, [pc, #548]	; (df90 <HandleUserInput+0x708>)
    dd6c:	781b      	ldrb	r3, [r3, #0]
    dd6e:	1e5a      	subs	r2, r3, #1
    dd70:	4193      	sbcs	r3, r2
    dd72:	b2db      	uxtb	r3, r3
    dd74:	2201      	movs	r2, #1
    dd76:	4053      	eors	r3, r2
    dd78:	b2db      	uxtb	r3, r3
    dd7a:	1c1a      	adds	r2, r3, #0
    dd7c:	2301      	movs	r3, #1
    dd7e:	4013      	ands	r3, r2
    dd80:	b2da      	uxtb	r2, r3
    dd82:	4b83      	ldr	r3, [pc, #524]	; (df90 <HandleUserInput+0x708>)
    dd84:	701a      	strb	r2, [r3, #0]
				break;
    dd86:	e034      	b.n	ddf2 <HandleUserInput+0x56a>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
    dd88:	4b7c      	ldr	r3, [pc, #496]	; (df7c <HandleUserInput+0x6f4>)
    dd8a:	781b      	ldrb	r3, [r3, #0]
    dd8c:	2b03      	cmp	r3, #3
    dd8e:	d005      	beq.n	dd9c <HandleUserInput+0x514>
    dd90:	4b80      	ldr	r3, [pc, #512]	; (df94 <HandleUserInput+0x70c>)
    dd92:	781a      	ldrb	r2, [r3, #0]
    dd94:	4b75      	ldr	r3, [pc, #468]	; (df6c <HandleUserInput+0x6e4>)
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	429a      	cmp	r2, r3
    dd9a:	d009      	beq.n	ddb0 <HandleUserInput+0x528>
					|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
    dd9c:	4b77      	ldr	r3, [pc, #476]	; (df7c <HandleUserInput+0x6f4>)
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	2b03      	cmp	r3, #3
    dda2:	d10d      	bne.n	ddc0 <HandleUserInput+0x538>
    dda4:	4b7c      	ldr	r3, [pc, #496]	; (df98 <HandleUserInput+0x710>)
    dda6:	781a      	ldrb	r2, [r3, #0]
    dda8:	4b70      	ldr	r3, [pc, #448]	; (df6c <HandleUserInput+0x6e4>)
    ddaa:	781b      	ldrb	r3, [r3, #0]
    ddac:	429a      	cmp	r2, r3
    ddae:	d107      	bne.n	ddc0 <HandleUserInput+0x538>
					AUX_OUTPUT = true;
    ddb0:	4b77      	ldr	r3, [pc, #476]	; (df90 <HandleUserInput+0x708>)
    ddb2:	2201      	movs	r2, #1
    ddb4:	701a      	strb	r2, [r3, #0]
					AuxOnTime = millis();
    ddb6:	4b79      	ldr	r3, [pc, #484]	; (df9c <HandleUserInput+0x714>)
    ddb8:	4798      	blx	r3
    ddba:	0002      	movs	r2, r0
    ddbc:	4b78      	ldr	r3, [pc, #480]	; (dfa0 <HandleUserInput+0x718>)
    ddbe:	601a      	str	r2, [r3, #0]
				check_time(&AuxOnTime);
    ddc0:	4b77      	ldr	r3, [pc, #476]	; (dfa0 <HandleUserInput+0x718>)
    ddc2:	0018      	movs	r0, r3
    ddc4:	4b77      	ldr	r3, [pc, #476]	; (dfa4 <HandleUserInput+0x71c>)
    ddc6:	4798      	blx	r3
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
    ddc8:	4b71      	ldr	r3, [pc, #452]	; (df90 <HandleUserInput+0x708>)
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	2b00      	cmp	r3, #0
    ddce:	d012      	beq.n	ddf6 <HandleUserInput+0x56e>
    ddd0:	4b72      	ldr	r3, [pc, #456]	; (df9c <HandleUserInput+0x714>)
    ddd2:	4798      	blx	r3
    ddd4:	0002      	movs	r2, r0
    ddd6:	4b72      	ldr	r3, [pc, #456]	; (dfa0 <HandleUserInput+0x718>)
    ddd8:	681b      	ldr	r3, [r3, #0]
    ddda:	1ad3      	subs	r3, r2, r3
    dddc:	4a72      	ldr	r2, [pc, #456]	; (dfa8 <HandleUserInput+0x720>)
    ddde:	7812      	ldrb	r2, [r2, #0]
    dde0:	0011      	movs	r1, r2
    dde2:	2264      	movs	r2, #100	; 0x64
    dde4:	434a      	muls	r2, r1
    dde6:	4293      	cmp	r3, r2
    dde8:	d305      	bcc.n	ddf6 <HandleUserInput+0x56e>
					AUX_OUTPUT = false;
    ddea:	4b69      	ldr	r3, [pc, #420]	; (df90 <HandleUserInput+0x708>)
    ddec:	2200      	movs	r2, #0
    ddee:	701a      	strb	r2, [r3, #0]
				break;
    ddf0:	e001      	b.n	ddf6 <HandleUserInput+0x56e>
				break;
    ddf2:	46c0      	nop			; (mov r8, r8)
    ddf4:	e000      	b.n	ddf8 <HandleUserInput+0x570>
				break;
    ddf6:	46c0      	nop			; (mov r8, r8)
		}

		if(AppAuxButton == 1 && lAppAuxButton == 0) {
    ddf8:	4b6c      	ldr	r3, [pc, #432]	; (dfac <HandleUserInput+0x724>)
    ddfa:	781b      	ldrb	r3, [r3, #0]
    ddfc:	2b01      	cmp	r3, #1
    ddfe:	d107      	bne.n	de10 <HandleUserInput+0x588>
    de00:	4b6b      	ldr	r3, [pc, #428]	; (dfb0 <HandleUserInput+0x728>)
    de02:	781b      	ldrb	r3, [r3, #0]
    de04:	2b00      	cmp	r3, #0
    de06:	d103      	bne.n	de10 <HandleUserInput+0x588>
			AUX_OUTPUT = true;
    de08:	4b61      	ldr	r3, [pc, #388]	; (df90 <HandleUserInput+0x708>)
    de0a:	2201      	movs	r2, #1
    de0c:	701a      	strb	r2, [r3, #0]
    de0e:	e00a      	b.n	de26 <HandleUserInput+0x59e>
		} else if(AppAuxButton == 0 && lAppAuxButton == 1){
    de10:	4b66      	ldr	r3, [pc, #408]	; (dfac <HandleUserInput+0x724>)
    de12:	781b      	ldrb	r3, [r3, #0]
    de14:	2b00      	cmp	r3, #0
    de16:	d106      	bne.n	de26 <HandleUserInput+0x59e>
    de18:	4b65      	ldr	r3, [pc, #404]	; (dfb0 <HandleUserInput+0x728>)
    de1a:	781b      	ldrb	r3, [r3, #0]
    de1c:	2b01      	cmp	r3, #1
    de1e:	d102      	bne.n	de26 <HandleUserInput+0x59e>
			AUX_OUTPUT = false;
    de20:	4b5b      	ldr	r3, [pc, #364]	; (df90 <HandleUserInput+0x708>)
    de22:	2200      	movs	r2, #0
    de24:	701a      	strb	r2, [r3, #0]
		}
		lAppAuxButton = AppAuxButton;
    de26:	4b61      	ldr	r3, [pc, #388]	; (dfac <HandleUserInput+0x724>)
    de28:	781a      	ldrb	r2, [r3, #0]
    de2a:	4b61      	ldr	r3, [pc, #388]	; (dfb0 <HandleUserInput+0x728>)
    de2c:	701a      	strb	r2, [r3, #0]

		port_pin_set_output_level(AUX_PIN, !AUX_OUTPUT);
    de2e:	4b58      	ldr	r3, [pc, #352]	; (df90 <HandleUserInput+0x708>)
    de30:	781b      	ldrb	r3, [r3, #0]
    de32:	1e5a      	subs	r2, r3, #1
    de34:	4193      	sbcs	r3, r2
    de36:	b2db      	uxtb	r3, r3
    de38:	2201      	movs	r2, #1
    de3a:	4053      	eors	r3, r2
    de3c:	b2db      	uxtb	r3, r3
    de3e:	1c1a      	adds	r2, r3, #0
    de40:	2301      	movs	r3, #1
    de42:	4013      	ands	r3, r2
    de44:	b2db      	uxtb	r3, r3
    de46:	0019      	movs	r1, r3
    de48:	2008      	movs	r0, #8
    de4a:	4b5a      	ldr	r3, [pc, #360]	; (dfb4 <HandleUserInput+0x72c>)
    de4c:	4798      	blx	r3
    de4e:	e003      	b.n	de58 <HandleUserInput+0x5d0>
	}
	else{
		port_pin_set_output_level(AUX_PIN, true);
    de50:	2101      	movs	r1, #1
    de52:	2008      	movs	r0, #8
    de54:	4b57      	ldr	r3, [pc, #348]	; (dfb4 <HandleUserInput+0x72c>)
    de56:	4798      	blx	r3
	}

	/////////////   Handle the side, head, and tail lights   /////////////
	//////////////////////////////////////////////////////////////////////
	if(ButtonPressType != PRESS_NONE){
    de58:	4b44      	ldr	r3, [pc, #272]	; (df6c <HandleUserInput+0x6e4>)
    de5a:	781b      	ldrb	r3, [r3, #0]
    de5c:	2b00      	cmp	r3, #0
    de5e:	d100      	bne.n	de62 <HandleUserInput+0x5da>
    de60:	e1a5      	b.n	e1ae <HandleUserInput+0x926>
		if(remote_type != REMOTE_UART_DUAL){ // If single axis remote is connected
    de62:	4b46      	ldr	r3, [pc, #280]	; (df7c <HandleUserInput+0x6f4>)
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	2b03      	cmp	r3, #3
    de68:	d100      	bne.n	de6c <HandleUserInput+0x5e4>
    de6a:	e0cc      	b.n	e006 <HandleUserInput+0x77e>
			if(single_all_control == ButtonPressType){
    de6c:	4b52      	ldr	r3, [pc, #328]	; (dfb8 <HandleUserInput+0x730>)
    de6e:	781a      	ldrb	r2, [r3, #0]
    de70:	4b3e      	ldr	r3, [pc, #248]	; (df6c <HandleUserInput+0x6e4>)
    de72:	781b      	ldrb	r3, [r3, #0]
    de74:	429a      	cmp	r2, r3
    de76:	d108      	bne.n	de8a <HandleUserInput+0x602>
				LIGHTS_ON = !LIGHTS_ON;
    de78:	4b50      	ldr	r3, [pc, #320]	; (dfbc <HandleUserInput+0x734>)
    de7a:	781b      	ldrb	r3, [r3, #0]
    de7c:	425a      	negs	r2, r3
    de7e:	4153      	adcs	r3, r2
    de80:	b2db      	uxtb	r3, r3
    de82:	001a      	movs	r2, r3
    de84:	4b4d      	ldr	r3, [pc, #308]	; (dfbc <HandleUserInput+0x734>)
    de86:	701a      	strb	r2, [r3, #0]
    de88:	e191      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(single_head_control == ButtonPressType){
    de8a:	4b4d      	ldr	r3, [pc, #308]	; (dfc0 <HandleUserInput+0x738>)
    de8c:	781a      	ldrb	r2, [r3, #0]
    de8e:	4b37      	ldr	r3, [pc, #220]	; (df6c <HandleUserInput+0x6e4>)
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	429a      	cmp	r2, r3
    de94:	d123      	bne.n	dede <HandleUserInput+0x656>
				if(!LIGHTS_ON){
    de96:	4b49      	ldr	r3, [pc, #292]	; (dfbc <HandleUserInput+0x734>)
    de98:	781b      	ldrb	r3, [r3, #0]
    de9a:	2b00      	cmp	r3, #0
    de9c:	d109      	bne.n	deb2 <HandleUserInput+0x62a>
					HEADLIGHTS = true;
    de9e:	4b49      	ldr	r3, [pc, #292]	; (dfc4 <HandleUserInput+0x73c>)
    dea0:	2201      	movs	r2, #1
    dea2:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    dea4:	4b48      	ldr	r3, [pc, #288]	; (dfc8 <HandleUserInput+0x740>)
    dea6:	2200      	movs	r2, #0
    dea8:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    deaa:	4b44      	ldr	r3, [pc, #272]	; (dfbc <HandleUserInput+0x734>)
    deac:	2201      	movs	r2, #1
    deae:	701a      	strb	r2, [r3, #0]
    deb0:	e17d      	b.n	e1ae <HandleUserInput+0x926>
				}

				else if(SIDELIGHTS)
    deb2:	4b45      	ldr	r3, [pc, #276]	; (dfc8 <HandleUserInput+0x740>)
    deb4:	781b      	ldrb	r3, [r3, #0]
    deb6:	2b00      	cmp	r3, #0
    deb8:	d008      	beq.n	decc <HandleUserInput+0x644>
				HEADLIGHTS = !HEADLIGHTS;
    deba:	4b42      	ldr	r3, [pc, #264]	; (dfc4 <HandleUserInput+0x73c>)
    debc:	781b      	ldrb	r3, [r3, #0]
    debe:	425a      	negs	r2, r3
    dec0:	4153      	adcs	r3, r2
    dec2:	b2db      	uxtb	r3, r3
    dec4:	001a      	movs	r2, r3
    dec6:	4b3f      	ldr	r3, [pc, #252]	; (dfc4 <HandleUserInput+0x73c>)
    dec8:	701a      	strb	r2, [r3, #0]
    deca:	e170      	b.n	e1ae <HandleUserInput+0x926>
				else
				LIGHTS_ON = !LIGHTS_ON;
    decc:	4b3b      	ldr	r3, [pc, #236]	; (dfbc <HandleUserInput+0x734>)
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	425a      	negs	r2, r3
    ded2:	4153      	adcs	r3, r2
    ded4:	b2db      	uxtb	r3, r3
    ded6:	001a      	movs	r2, r3
    ded8:	4b38      	ldr	r3, [pc, #224]	; (dfbc <HandleUserInput+0x734>)
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	e167      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(single_side_control == ButtonPressType){
    dede:	4b3b      	ldr	r3, [pc, #236]	; (dfcc <HandleUserInput+0x744>)
    dee0:	781a      	ldrb	r2, [r3, #0]
    dee2:	4b22      	ldr	r3, [pc, #136]	; (df6c <HandleUserInput+0x6e4>)
    dee4:	781b      	ldrb	r3, [r3, #0]
    dee6:	429a      	cmp	r2, r3
    dee8:	d123      	bne.n	df32 <HandleUserInput+0x6aa>
				if(!LIGHTS_ON){
    deea:	4b34      	ldr	r3, [pc, #208]	; (dfbc <HandleUserInput+0x734>)
    deec:	781b      	ldrb	r3, [r3, #0]
    deee:	2b00      	cmp	r3, #0
    def0:	d109      	bne.n	df06 <HandleUserInput+0x67e>
					HEADLIGHTS = false;
    def2:	4b34      	ldr	r3, [pc, #208]	; (dfc4 <HandleUserInput+0x73c>)
    def4:	2200      	movs	r2, #0
    def6:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
    def8:	4b33      	ldr	r3, [pc, #204]	; (dfc8 <HandleUserInput+0x740>)
    defa:	2201      	movs	r2, #1
    defc:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    defe:	4b2f      	ldr	r3, [pc, #188]	; (dfbc <HandleUserInput+0x734>)
    df00:	2201      	movs	r2, #1
    df02:	701a      	strb	r2, [r3, #0]
    df04:	e153      	b.n	e1ae <HandleUserInput+0x926>
				}
				else if(HEADLIGHTS)
    df06:	4b2f      	ldr	r3, [pc, #188]	; (dfc4 <HandleUserInput+0x73c>)
    df08:	781b      	ldrb	r3, [r3, #0]
    df0a:	2b00      	cmp	r3, #0
    df0c:	d008      	beq.n	df20 <HandleUserInput+0x698>
				SIDELIGHTS = !SIDELIGHTS;
    df0e:	4b2e      	ldr	r3, [pc, #184]	; (dfc8 <HandleUserInput+0x740>)
    df10:	781b      	ldrb	r3, [r3, #0]
    df12:	425a      	negs	r2, r3
    df14:	4153      	adcs	r3, r2
    df16:	b2db      	uxtb	r3, r3
    df18:	001a      	movs	r2, r3
    df1a:	4b2b      	ldr	r3, [pc, #172]	; (dfc8 <HandleUserInput+0x740>)
    df1c:	701a      	strb	r2, [r3, #0]
    df1e:	e146      	b.n	e1ae <HandleUserInput+0x926>
				else
				LIGHTS_ON = !LIGHTS_ON;
    df20:	4b26      	ldr	r3, [pc, #152]	; (dfbc <HandleUserInput+0x734>)
    df22:	781b      	ldrb	r3, [r3, #0]
    df24:	425a      	negs	r2, r3
    df26:	4153      	adcs	r3, r2
    df28:	b2db      	uxtb	r3, r3
    df2a:	001a      	movs	r2, r3
    df2c:	4b23      	ldr	r3, [pc, #140]	; (dfbc <HandleUserInput+0x734>)
    df2e:	701a      	strb	r2, [r3, #0]
    df30:	e13d      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(single_down_control == ButtonPressType){
    df32:	4b27      	ldr	r3, [pc, #156]	; (dfd0 <HandleUserInput+0x748>)
    df34:	781a      	ldrb	r2, [r3, #0]
    df36:	4b0d      	ldr	r3, [pc, #52]	; (df6c <HandleUserInput+0x6e4>)
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	429a      	cmp	r2, r3
    df3c:	d14c      	bne.n	dfd8 <HandleUserInput+0x750>
				if(light_mode == 0)
    df3e:	4b25      	ldr	r3, [pc, #148]	; (dfd4 <HandleUserInput+0x74c>)
    df40:	781b      	ldrb	r3, [r3, #0]
    df42:	2b00      	cmp	r3, #0
    df44:	d105      	bne.n	df52 <HandleUserInput+0x6ca>
					light_mode = light_modes - 1;
    df46:	2309      	movs	r3, #9
    df48:	3b01      	subs	r3, #1
    df4a:	b2da      	uxtb	r2, r3
    df4c:	4b21      	ldr	r3, [pc, #132]	; (dfd4 <HandleUserInput+0x74c>)
    df4e:	701a      	strb	r2, [r3, #0]
    df50:	e12d      	b.n	e1ae <HandleUserInput+0x926>
				else
					light_mode--;
    df52:	4b20      	ldr	r3, [pc, #128]	; (dfd4 <HandleUserInput+0x74c>)
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	3b01      	subs	r3, #1
    df58:	b2da      	uxtb	r2, r3
    df5a:	4b1e      	ldr	r3, [pc, #120]	; (dfd4 <HandleUserInput+0x74c>)
    df5c:	701a      	strb	r2, [r3, #0]
    df5e:	e126      	b.n	e1ae <HandleUserInput+0x926>
    df60:	20000390 	.word	0x20000390
    df64:	000003e7 	.word	0x000003e7
    df68:	2000039c 	.word	0x2000039c
    df6c:	20000388 	.word	0x20000388
    df70:	2000038a 	.word	0x2000038a
    df74:	20000394 	.word	0x20000394
    df78:	20000389 	.word	0x20000389
    df7c:	20000308 	.word	0x20000308
    df80:	20000373 	.word	0x20000373
    df84:	20000375 	.word	0x20000375
    df88:	20000378 	.word	0x20000378
    df8c:	2000038c 	.word	0x2000038c
    df90:	20000377 	.word	0x20000377
    df94:	2000037a 	.word	0x2000037a
    df98:	20000380 	.word	0x20000380
    df9c:	0000b015 	.word	0x0000b015
    dfa0:	200003a0 	.word	0x200003a0
    dfa4:	0000b045 	.word	0x0000b045
    dfa8:	20000379 	.word	0x20000379
    dfac:	20000386 	.word	0x20000386
    dfb0:	20000387 	.word	0x20000387
    dfb4:	00008d01 	.word	0x00008d01
    dfb8:	2000037b 	.word	0x2000037b
    dfbc:	200000a3 	.word	0x200000a3
    dfc0:	2000037c 	.word	0x2000037c
    dfc4:	20000322 	.word	0x20000322
    dfc8:	200000a2 	.word	0x200000a2
    dfcc:	2000037d 	.word	0x2000037d
    dfd0:	2000037f 	.word	0x2000037f
    dfd4:	2000001b 	.word	0x2000001b
			}
			else if(single_up_control == ButtonPressType){
    dfd8:	4b79      	ldr	r3, [pc, #484]	; (e1c0 <HandleUserInput+0x938>)
    dfda:	781a      	ldrb	r2, [r3, #0]
    dfdc:	4b79      	ldr	r3, [pc, #484]	; (e1c4 <HandleUserInput+0x93c>)
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	429a      	cmp	r2, r3
    dfe2:	d000      	beq.n	dfe6 <HandleUserInput+0x75e>
    dfe4:	e0e3      	b.n	e1ae <HandleUserInput+0x926>
				light_mode++;
    dfe6:	4b78      	ldr	r3, [pc, #480]	; (e1c8 <HandleUserInput+0x940>)
    dfe8:	781b      	ldrb	r3, [r3, #0]
    dfea:	3301      	adds	r3, #1
    dfec:	b2da      	uxtb	r2, r3
    dfee:	4b76      	ldr	r3, [pc, #472]	; (e1c8 <HandleUserInput+0x940>)
    dff0:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
    dff2:	4b75      	ldr	r3, [pc, #468]	; (e1c8 <HandleUserInput+0x940>)
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	2209      	movs	r2, #9
    dff8:	4293      	cmp	r3, r2
    dffa:	d200      	bcs.n	dffe <HandleUserInput+0x776>
    dffc:	e0d7      	b.n	e1ae <HandleUserInput+0x926>
					light_mode = 0;
    dffe:	4b72      	ldr	r3, [pc, #456]	; (e1c8 <HandleUserInput+0x940>)
    e000:	2200      	movs	r2, #0
    e002:	701a      	strb	r2, [r3, #0]
    e004:	e0d3      	b.n	e1ae <HandleUserInput+0x926>
			}
		}
		else if(remote_type == REMOTE_UART_DUAL){ // If dual axis remote is connected
    e006:	4b71      	ldr	r3, [pc, #452]	; (e1cc <HandleUserInput+0x944>)
    e008:	781b      	ldrb	r3, [r3, #0]
    e00a:	2b03      	cmp	r3, #3
    e00c:	d000      	beq.n	e010 <HandleUserInput+0x788>
    e00e:	e0ce      	b.n	e1ae <HandleUserInput+0x926>
			if(dual_all_control == ButtonPressType){
    e010:	4b6f      	ldr	r3, [pc, #444]	; (e1d0 <HandleUserInput+0x948>)
    e012:	781a      	ldrb	r2, [r3, #0]
    e014:	4b6b      	ldr	r3, [pc, #428]	; (e1c4 <HandleUserInput+0x93c>)
    e016:	781b      	ldrb	r3, [r3, #0]
    e018:	429a      	cmp	r2, r3
    e01a:	d108      	bne.n	e02e <HandleUserInput+0x7a6>
				LIGHTS_ON = !LIGHTS_ON;
    e01c:	4b6d      	ldr	r3, [pc, #436]	; (e1d4 <HandleUserInput+0x94c>)
    e01e:	781b      	ldrb	r3, [r3, #0]
    e020:	425a      	negs	r2, r3
    e022:	4153      	adcs	r3, r2
    e024:	b2db      	uxtb	r3, r3
    e026:	001a      	movs	r2, r3
    e028:	4b6a      	ldr	r3, [pc, #424]	; (e1d4 <HandleUserInput+0x94c>)
    e02a:	701a      	strb	r2, [r3, #0]
    e02c:	e0bf      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(dual_head_control == ButtonPressType){
    e02e:	4b6a      	ldr	r3, [pc, #424]	; (e1d8 <HandleUserInput+0x950>)
    e030:	781a      	ldrb	r2, [r3, #0]
    e032:	4b64      	ldr	r3, [pc, #400]	; (e1c4 <HandleUserInput+0x93c>)
    e034:	781b      	ldrb	r3, [r3, #0]
    e036:	429a      	cmp	r2, r3
    e038:	d123      	bne.n	e082 <HandleUserInput+0x7fa>
				if(!LIGHTS_ON){
    e03a:	4b66      	ldr	r3, [pc, #408]	; (e1d4 <HandleUserInput+0x94c>)
    e03c:	781b      	ldrb	r3, [r3, #0]
    e03e:	2b00      	cmp	r3, #0
    e040:	d109      	bne.n	e056 <HandleUserInput+0x7ce>
					HEADLIGHTS = true;
    e042:	4b66      	ldr	r3, [pc, #408]	; (e1dc <HandleUserInput+0x954>)
    e044:	2201      	movs	r2, #1
    e046:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e048:	4b65      	ldr	r3, [pc, #404]	; (e1e0 <HandleUserInput+0x958>)
    e04a:	2200      	movs	r2, #0
    e04c:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    e04e:	4b61      	ldr	r3, [pc, #388]	; (e1d4 <HandleUserInput+0x94c>)
    e050:	2201      	movs	r2, #1
    e052:	701a      	strb	r2, [r3, #0]
    e054:	e0ab      	b.n	e1ae <HandleUserInput+0x926>
				}

				else if(SIDELIGHTS)
    e056:	4b62      	ldr	r3, [pc, #392]	; (e1e0 <HandleUserInput+0x958>)
    e058:	781b      	ldrb	r3, [r3, #0]
    e05a:	2b00      	cmp	r3, #0
    e05c:	d008      	beq.n	e070 <HandleUserInput+0x7e8>
				HEADLIGHTS = !HEADLIGHTS;
    e05e:	4b5f      	ldr	r3, [pc, #380]	; (e1dc <HandleUserInput+0x954>)
    e060:	781b      	ldrb	r3, [r3, #0]
    e062:	425a      	negs	r2, r3
    e064:	4153      	adcs	r3, r2
    e066:	b2db      	uxtb	r3, r3
    e068:	001a      	movs	r2, r3
    e06a:	4b5c      	ldr	r3, [pc, #368]	; (e1dc <HandleUserInput+0x954>)
    e06c:	701a      	strb	r2, [r3, #0]
    e06e:	e09e      	b.n	e1ae <HandleUserInput+0x926>
				else
				LIGHTS_ON = !LIGHTS_ON;
    e070:	4b58      	ldr	r3, [pc, #352]	; (e1d4 <HandleUserInput+0x94c>)
    e072:	781b      	ldrb	r3, [r3, #0]
    e074:	425a      	negs	r2, r3
    e076:	4153      	adcs	r3, r2
    e078:	b2db      	uxtb	r3, r3
    e07a:	001a      	movs	r2, r3
    e07c:	4b55      	ldr	r3, [pc, #340]	; (e1d4 <HandleUserInput+0x94c>)
    e07e:	701a      	strb	r2, [r3, #0]
    e080:	e095      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(dual_side_control == ButtonPressType){
    e082:	4b58      	ldr	r3, [pc, #352]	; (e1e4 <HandleUserInput+0x95c>)
    e084:	781a      	ldrb	r2, [r3, #0]
    e086:	4b4f      	ldr	r3, [pc, #316]	; (e1c4 <HandleUserInput+0x93c>)
    e088:	781b      	ldrb	r3, [r3, #0]
    e08a:	429a      	cmp	r2, r3
    e08c:	d123      	bne.n	e0d6 <HandleUserInput+0x84e>
				if(!LIGHTS_ON){
    e08e:	4b51      	ldr	r3, [pc, #324]	; (e1d4 <HandleUserInput+0x94c>)
    e090:	781b      	ldrb	r3, [r3, #0]
    e092:	2b00      	cmp	r3, #0
    e094:	d109      	bne.n	e0aa <HandleUserInput+0x822>
					HEADLIGHTS = false;
    e096:	4b51      	ldr	r3, [pc, #324]	; (e1dc <HandleUserInput+0x954>)
    e098:	2200      	movs	r2, #0
    e09a:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
    e09c:	4b50      	ldr	r3, [pc, #320]	; (e1e0 <HandleUserInput+0x958>)
    e09e:	2201      	movs	r2, #1
    e0a0:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    e0a2:	4b4c      	ldr	r3, [pc, #304]	; (e1d4 <HandleUserInput+0x94c>)
    e0a4:	2201      	movs	r2, #1
    e0a6:	701a      	strb	r2, [r3, #0]
    e0a8:	e081      	b.n	e1ae <HandleUserInput+0x926>
				}
				else if(HEADLIGHTS)
    e0aa:	4b4c      	ldr	r3, [pc, #304]	; (e1dc <HandleUserInput+0x954>)
    e0ac:	781b      	ldrb	r3, [r3, #0]
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d008      	beq.n	e0c4 <HandleUserInput+0x83c>
				SIDELIGHTS = !SIDELIGHTS;
    e0b2:	4b4b      	ldr	r3, [pc, #300]	; (e1e0 <HandleUserInput+0x958>)
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	425a      	negs	r2, r3
    e0b8:	4153      	adcs	r3, r2
    e0ba:	b2db      	uxtb	r3, r3
    e0bc:	001a      	movs	r2, r3
    e0be:	4b48      	ldr	r3, [pc, #288]	; (e1e0 <HandleUserInput+0x958>)
    e0c0:	701a      	strb	r2, [r3, #0]
    e0c2:	e074      	b.n	e1ae <HandleUserInput+0x926>
				else
				LIGHTS_ON = !LIGHTS_ON;
    e0c4:	4b43      	ldr	r3, [pc, #268]	; (e1d4 <HandleUserInput+0x94c>)
    e0c6:	781b      	ldrb	r3, [r3, #0]
    e0c8:	425a      	negs	r2, r3
    e0ca:	4153      	adcs	r3, r2
    e0cc:	b2db      	uxtb	r3, r3
    e0ce:	001a      	movs	r2, r3
    e0d0:	4b40      	ldr	r3, [pc, #256]	; (e1d4 <HandleUserInput+0x94c>)
    e0d2:	701a      	strb	r2, [r3, #0]
    e0d4:	e06b      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(dual_down_control == ButtonPressType){
    e0d6:	4b44      	ldr	r3, [pc, #272]	; (e1e8 <HandleUserInput+0x960>)
    e0d8:	781a      	ldrb	r2, [r3, #0]
    e0da:	4b3a      	ldr	r3, [pc, #232]	; (e1c4 <HandleUserInput+0x93c>)
    e0dc:	781b      	ldrb	r3, [r3, #0]
    e0de:	429a      	cmp	r2, r3
    e0e0:	d110      	bne.n	e104 <HandleUserInput+0x87c>
				if(light_mode == 0)
    e0e2:	4b39      	ldr	r3, [pc, #228]	; (e1c8 <HandleUserInput+0x940>)
    e0e4:	781b      	ldrb	r3, [r3, #0]
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d105      	bne.n	e0f6 <HandleUserInput+0x86e>
					light_mode = light_modes - 1;
    e0ea:	2309      	movs	r3, #9
    e0ec:	3b01      	subs	r3, #1
    e0ee:	b2da      	uxtb	r2, r3
    e0f0:	4b35      	ldr	r3, [pc, #212]	; (e1c8 <HandleUserInput+0x940>)
    e0f2:	701a      	strb	r2, [r3, #0]
    e0f4:	e05b      	b.n	e1ae <HandleUserInput+0x926>
				else
					light_mode--;
    e0f6:	4b34      	ldr	r3, [pc, #208]	; (e1c8 <HandleUserInput+0x940>)
    e0f8:	781b      	ldrb	r3, [r3, #0]
    e0fa:	3b01      	subs	r3, #1
    e0fc:	b2da      	uxtb	r2, r3
    e0fe:	4b32      	ldr	r3, [pc, #200]	; (e1c8 <HandleUserInput+0x940>)
    e100:	701a      	strb	r2, [r3, #0]
    e102:	e054      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(dual_up_control == ButtonPressType){
    e104:	4b39      	ldr	r3, [pc, #228]	; (e1ec <HandleUserInput+0x964>)
    e106:	781a      	ldrb	r2, [r3, #0]
    e108:	4b2e      	ldr	r3, [pc, #184]	; (e1c4 <HandleUserInput+0x93c>)
    e10a:	781b      	ldrb	r3, [r3, #0]
    e10c:	429a      	cmp	r2, r3
    e10e:	d10e      	bne.n	e12e <HandleUserInput+0x8a6>
				light_mode++;
    e110:	4b2d      	ldr	r3, [pc, #180]	; (e1c8 <HandleUserInput+0x940>)
    e112:	781b      	ldrb	r3, [r3, #0]
    e114:	3301      	adds	r3, #1
    e116:	b2da      	uxtb	r2, r3
    e118:	4b2b      	ldr	r3, [pc, #172]	; (e1c8 <HandleUserInput+0x940>)
    e11a:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
    e11c:	4b2a      	ldr	r3, [pc, #168]	; (e1c8 <HandleUserInput+0x940>)
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	2209      	movs	r2, #9
    e122:	4293      	cmp	r3, r2
    e124:	d343      	bcc.n	e1ae <HandleUserInput+0x926>
					light_mode = 0;
    e126:	4b28      	ldr	r3, [pc, #160]	; (e1c8 <HandleUserInput+0x940>)
    e128:	2200      	movs	r2, #0
    e12a:	701a      	strb	r2, [r3, #0]
    e12c:	e03f      	b.n	e1ae <HandleUserInput+0x926>
			}
			else if(TURN_ENABLED == 1 && ButtonHeldTime > 500){
    e12e:	4b30      	ldr	r3, [pc, #192]	; (e1f0 <HandleUserInput+0x968>)
    e130:	781b      	ldrb	r3, [r3, #0]
    e132:	2b00      	cmp	r3, #0
    e134:	d02f      	beq.n	e196 <HandleUserInput+0x90e>
    e136:	4b2f      	ldr	r3, [pc, #188]	; (e1f4 <HandleUserInput+0x96c>)
    e138:	681a      	ldr	r2, [r3, #0]
    e13a:	23fa      	movs	r3, #250	; 0xfa
    e13c:	005b      	lsls	r3, r3, #1
    e13e:	429a      	cmp	r2, r3
    e140:	d929      	bls.n	e196 <HandleUserInput+0x90e>
				if(VescRemoteX < 110){
    e142:	4b2d      	ldr	r3, [pc, #180]	; (e1f8 <HandleUserInput+0x970>)
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	2b6d      	cmp	r3, #109	; 0x6d
    e148:	d810      	bhi.n	e16c <HandleUserInput+0x8e4>
					if(SIDELIGHTS)
    e14a:	4b25      	ldr	r3, [pc, #148]	; (e1e0 <HandleUserInput+0x958>)
    e14c:	781b      	ldrb	r3, [r3, #0]
    e14e:	2b00      	cmp	r3, #0
    e150:	d002      	beq.n	e158 <HandleUserInput+0x8d0>
						RestoreTurnLights = true;
    e152:	4b2a      	ldr	r3, [pc, #168]	; (e1fc <HandleUserInput+0x974>)
    e154:	2201      	movs	r2, #1
    e156:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e158:	4b21      	ldr	r3, [pc, #132]	; (e1e0 <HandleUserInput+0x958>)
    e15a:	2200      	movs	r2, #0
    e15c:	701a      	strb	r2, [r3, #0]
				
					TurnSignalOn = true;
    e15e:	4b28      	ldr	r3, [pc, #160]	; (e200 <HandleUserInput+0x978>)
    e160:	2201      	movs	r2, #1
    e162:	701a      	strb	r2, [r3, #0]
					TurnSignal(true);
    e164:	2001      	movs	r0, #1
    e166:	4b27      	ldr	r3, [pc, #156]	; (e204 <HandleUserInput+0x97c>)
    e168:	4798      	blx	r3
				if(VescRemoteX < 110){
    e16a:	e01f      	b.n	e1ac <HandleUserInput+0x924>
				}
				else if(VescRemoteX > 150){
    e16c:	4b22      	ldr	r3, [pc, #136]	; (e1f8 <HandleUserInput+0x970>)
    e16e:	781b      	ldrb	r3, [r3, #0]
    e170:	2b96      	cmp	r3, #150	; 0x96
    e172:	d91b      	bls.n	e1ac <HandleUserInput+0x924>
					if(SIDELIGHTS)
    e174:	4b1a      	ldr	r3, [pc, #104]	; (e1e0 <HandleUserInput+0x958>)
    e176:	781b      	ldrb	r3, [r3, #0]
    e178:	2b00      	cmp	r3, #0
    e17a:	d002      	beq.n	e182 <HandleUserInput+0x8fa>
						RestoreTurnLights = true;
    e17c:	4b1f      	ldr	r3, [pc, #124]	; (e1fc <HandleUserInput+0x974>)
    e17e:	2201      	movs	r2, #1
    e180:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e182:	4b17      	ldr	r3, [pc, #92]	; (e1e0 <HandleUserInput+0x958>)
    e184:	2200      	movs	r2, #0
    e186:	701a      	strb	r2, [r3, #0]

					TurnSignalOn = true;
    e188:	4b1d      	ldr	r3, [pc, #116]	; (e200 <HandleUserInput+0x978>)
    e18a:	2201      	movs	r2, #1
    e18c:	701a      	strb	r2, [r3, #0]
					TurnSignal(false);
    e18e:	2000      	movs	r0, #0
    e190:	4b1c      	ldr	r3, [pc, #112]	; (e204 <HandleUserInput+0x97c>)
    e192:	4798      	blx	r3
				if(VescRemoteX < 110){
    e194:	e00a      	b.n	e1ac <HandleUserInput+0x924>
				}
			}
			else if(RestoreTurnLights){
    e196:	4b19      	ldr	r3, [pc, #100]	; (e1fc <HandleUserInput+0x974>)
    e198:	781b      	ldrb	r3, [r3, #0]
    e19a:	2b00      	cmp	r3, #0
    e19c:	d007      	beq.n	e1ae <HandleUserInput+0x926>
				SIDELIGHTS = true;
    e19e:	4b10      	ldr	r3, [pc, #64]	; (e1e0 <HandleUserInput+0x958>)
    e1a0:	2201      	movs	r2, #1
    e1a2:	701a      	strb	r2, [r3, #0]
				RestoreTurnLights = false;
    e1a4:	4b15      	ldr	r3, [pc, #84]	; (e1fc <HandleUserInput+0x974>)
    e1a6:	2200      	movs	r2, #0
    e1a8:	701a      	strb	r2, [r3, #0]
    e1aa:	e000      	b.n	e1ae <HandleUserInput+0x926>
				if(VescRemoteX < 110){
    e1ac:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	lremote_btn_state = remote_btn_state;
    e1ae:	4b16      	ldr	r3, [pc, #88]	; (e208 <HandleUserInput+0x980>)
    e1b0:	781a      	ldrb	r2, [r3, #0]
    e1b2:	4b16      	ldr	r3, [pc, #88]	; (e20c <HandleUserInput+0x984>)
    e1b4:	701a      	strb	r2, [r3, #0]
}
    e1b6:	46c0      	nop			; (mov r8, r8)
    e1b8:	46bd      	mov	sp, r7
    e1ba:	b003      	add	sp, #12
    e1bc:	bd90      	pop	{r4, r7, pc}
    e1be:	46c0      	nop			; (mov r8, r8)
    e1c0:	2000037e 	.word	0x2000037e
    e1c4:	20000388 	.word	0x20000388
    e1c8:	2000001b 	.word	0x2000001b
    e1cc:	20000308 	.word	0x20000308
    e1d0:	20000381 	.word	0x20000381
    e1d4:	200000a3 	.word	0x200000a3
    e1d8:	20000382 	.word	0x20000382
    e1dc:	20000322 	.word	0x20000322
    e1e0:	200000a2 	.word	0x200000a2
    e1e4:	20000383 	.word	0x20000383
    e1e8:	20000385 	.word	0x20000385
    e1ec:	20000384 	.word	0x20000384
    e1f0:	20000376 	.word	0x20000376
    e1f4:	2000038c 	.word	0x2000038c
    e1f8:	20000373 	.word	0x20000373
    e1fc:	2000039d 	.word	0x2000039d
    e200:	2000039c 	.word	0x2000039c
    e204:	0000b6a9 	.word	0x0000b6a9
    e208:	2000030c 	.word	0x2000030c
    e20c:	2000030d 	.word	0x2000030d

0000e210 <save_led_data>:


// EEPROM size needs to be set to 0x02


void save_led_data(){
    e210:	b590      	push	{r4, r7, lr}
    e212:	b085      	sub	sp, #20
    e214:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e216:	2300      	movs	r3, #0
    e218:	60fb      	str	r3, [r7, #12]
    e21a:	e005      	b.n	e228 <save_led_data+0x18>
		eeprom_data[0] = 0;
    e21c:	4ba4      	ldr	r3, [pc, #656]	; (e4b0 <save_led_data+0x2a0>)
    e21e:	2200      	movs	r2, #0
    e220:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e222:	68fb      	ldr	r3, [r7, #12]
    e224:	3301      	adds	r3, #1
    e226:	60fb      	str	r3, [r7, #12]
    e228:	68fb      	ldr	r3, [r7, #12]
    e22a:	2b3b      	cmp	r3, #59	; 0x3b
    e22c:	ddf6      	ble.n	e21c <save_led_data+0xc>
	}

	eeprom_data[0] = SWITCHES;
    e22e:	4ba1      	ldr	r3, [pc, #644]	; (e4b4 <save_led_data+0x2a4>)
    e230:	781a      	ldrb	r2, [r3, #0]
    e232:	4b9f      	ldr	r3, [pc, #636]	; (e4b0 <save_led_data+0x2a0>)
    e234:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = light_mode;
    e236:	4ba0      	ldr	r3, [pc, #640]	; (e4b8 <save_led_data+0x2a8>)
    e238:	781a      	ldrb	r2, [r3, #0]
    e23a:	4b9d      	ldr	r3, [pc, #628]	; (e4b0 <save_led_data+0x2a0>)
    e23c:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = (Static_RGB.LR & 0xFF);
    e23e:	4b9f      	ldr	r3, [pc, #636]	; (e4bc <save_led_data+0x2ac>)
    e240:	881b      	ldrh	r3, [r3, #0]
    e242:	b2da      	uxtb	r2, r3
    e244:	4b9a      	ldr	r3, [pc, #616]	; (e4b0 <save_led_data+0x2a0>)
    e246:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (Static_RGB.LR & 0xFF00) >> 8;
    e248:	4b9c      	ldr	r3, [pc, #624]	; (e4bc <save_led_data+0x2ac>)
    e24a:	881b      	ldrh	r3, [r3, #0]
    e24c:	0a1b      	lsrs	r3, r3, #8
    e24e:	b29b      	uxth	r3, r3
    e250:	b2da      	uxtb	r2, r3
    e252:	4b97      	ldr	r3, [pc, #604]	; (e4b0 <save_led_data+0x2a0>)
    e254:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (Static_RGB.LG & 0xFF);
    e256:	4b99      	ldr	r3, [pc, #612]	; (e4bc <save_led_data+0x2ac>)
    e258:	885b      	ldrh	r3, [r3, #2]
    e25a:	b2da      	uxtb	r2, r3
    e25c:	4b94      	ldr	r3, [pc, #592]	; (e4b0 <save_led_data+0x2a0>)
    e25e:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Static_RGB.LG & 0xFF00) >> 8;
    e260:	4b96      	ldr	r3, [pc, #600]	; (e4bc <save_led_data+0x2ac>)
    e262:	885b      	ldrh	r3, [r3, #2]
    e264:	0a1b      	lsrs	r3, r3, #8
    e266:	b29b      	uxth	r3, r3
    e268:	b2da      	uxtb	r2, r3
    e26a:	4b91      	ldr	r3, [pc, #580]	; (e4b0 <save_led_data+0x2a0>)
    e26c:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Static_RGB.LB & 0xFF);
    e26e:	4b93      	ldr	r3, [pc, #588]	; (e4bc <save_led_data+0x2ac>)
    e270:	889b      	ldrh	r3, [r3, #4]
    e272:	b2da      	uxtb	r2, r3
    e274:	4b8e      	ldr	r3, [pc, #568]	; (e4b0 <save_led_data+0x2a0>)
    e276:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Static_RGB.LB & 0xFF00) >> 8;
    e278:	4b90      	ldr	r3, [pc, #576]	; (e4bc <save_led_data+0x2ac>)
    e27a:	889b      	ldrh	r3, [r3, #4]
    e27c:	0a1b      	lsrs	r3, r3, #8
    e27e:	b29b      	uxth	r3, r3
    e280:	b2da      	uxtb	r2, r3
    e282:	4b8b      	ldr	r3, [pc, #556]	; (e4b0 <save_led_data+0x2a0>)
    e284:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Static_RGB.RR & 0xFF);
    e286:	4b8d      	ldr	r3, [pc, #564]	; (e4bc <save_led_data+0x2ac>)
    e288:	88db      	ldrh	r3, [r3, #6]
    e28a:	b2da      	uxtb	r2, r3
    e28c:	4b88      	ldr	r3, [pc, #544]	; (e4b0 <save_led_data+0x2a0>)
    e28e:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Static_RGB.RR & 0xFF00) >> 8;
    e290:	4b8a      	ldr	r3, [pc, #552]	; (e4bc <save_led_data+0x2ac>)
    e292:	88db      	ldrh	r3, [r3, #6]
    e294:	0a1b      	lsrs	r3, r3, #8
    e296:	b29b      	uxth	r3, r3
    e298:	b2da      	uxtb	r2, r3
    e29a:	4b85      	ldr	r3, [pc, #532]	; (e4b0 <save_led_data+0x2a0>)
    e29c:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Static_RGB.RG & 0xFF);
    e29e:	4b87      	ldr	r3, [pc, #540]	; (e4bc <save_led_data+0x2ac>)
    e2a0:	891b      	ldrh	r3, [r3, #8]
    e2a2:	b2da      	uxtb	r2, r3
    e2a4:	4b82      	ldr	r3, [pc, #520]	; (e4b0 <save_led_data+0x2a0>)
    e2a6:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Static_RGB.RG & 0xFF00) >> 8;
    e2a8:	4b84      	ldr	r3, [pc, #528]	; (e4bc <save_led_data+0x2ac>)
    e2aa:	891b      	ldrh	r3, [r3, #8]
    e2ac:	0a1b      	lsrs	r3, r3, #8
    e2ae:	b29b      	uxth	r3, r3
    e2b0:	b2da      	uxtb	r2, r3
    e2b2:	4b7f      	ldr	r3, [pc, #508]	; (e4b0 <save_led_data+0x2a0>)
    e2b4:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Static_RGB.RB & 0xFF);
    e2b6:	4b81      	ldr	r3, [pc, #516]	; (e4bc <save_led_data+0x2ac>)
    e2b8:	895b      	ldrh	r3, [r3, #10]
    e2ba:	b2da      	uxtb	r2, r3
    e2bc:	4b7c      	ldr	r3, [pc, #496]	; (e4b0 <save_led_data+0x2a0>)
    e2be:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Static_RGB.RB & 0xFF00) >> 8;
    e2c0:	4b7e      	ldr	r3, [pc, #504]	; (e4bc <save_led_data+0x2ac>)
    e2c2:	895b      	ldrh	r3, [r3, #10]
    e2c4:	0a1b      	lsrs	r3, r3, #8
    e2c6:	b29b      	uxth	r3, r3
    e2c8:	b2da      	uxtb	r2, r3
    e2ca:	4b79      	ldr	r3, [pc, #484]	; (e4b0 <save_led_data+0x2a0>)
    e2cc:	735a      	strb	r2, [r3, #13]
	int dataOffset = 14;
    e2ce:	230e      	movs	r3, #14
    e2d0:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++){
    e2d2:	2300      	movs	r3, #0
    e2d4:	60bb      	str	r3, [r7, #8]
    e2d6:	e058      	b.n	e38a <save_led_data+0x17a>
		eeprom_data[dataOffset + (i*5)] = ColorBase[i];
    e2d8:	68ba      	ldr	r2, [r7, #8]
    e2da:	0013      	movs	r3, r2
    e2dc:	009b      	lsls	r3, r3, #2
    e2de:	189a      	adds	r2, r3, r2
    e2e0:	683b      	ldr	r3, [r7, #0]
    e2e2:	18d3      	adds	r3, r2, r3
    e2e4:	4976      	ldr	r1, [pc, #472]	; (e4c0 <save_led_data+0x2b0>)
    e2e6:	68ba      	ldr	r2, [r7, #8]
    e2e8:	188a      	adds	r2, r1, r2
    e2ea:	7811      	ldrb	r1, [r2, #0]
    e2ec:	4a70      	ldr	r2, [pc, #448]	; (e4b0 <save_led_data+0x2a0>)
    e2ee:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+1] = BrightBase[i];
    e2f0:	68ba      	ldr	r2, [r7, #8]
    e2f2:	0013      	movs	r3, r2
    e2f4:	009b      	lsls	r3, r3, #2
    e2f6:	189a      	adds	r2, r3, r2
    e2f8:	683b      	ldr	r3, [r7, #0]
    e2fa:	18d3      	adds	r3, r2, r3
    e2fc:	3301      	adds	r3, #1
    e2fe:	4971      	ldr	r1, [pc, #452]	; (e4c4 <save_led_data+0x2b4>)
    e300:	68ba      	ldr	r2, [r7, #8]
    e302:	188a      	adds	r2, r1, r2
    e304:	7811      	ldrb	r1, [r2, #0]
    e306:	4a6a      	ldr	r2, [pc, #424]	; (e4b0 <save_led_data+0x2a0>)
    e308:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+2] = RateBase[i];
    e30a:	68ba      	ldr	r2, [r7, #8]
    e30c:	0013      	movs	r3, r2
    e30e:	009b      	lsls	r3, r3, #2
    e310:	189a      	adds	r2, r3, r2
    e312:	683b      	ldr	r3, [r7, #0]
    e314:	18d3      	adds	r3, r2, r3
    e316:	3302      	adds	r3, #2
    e318:	496b      	ldr	r1, [pc, #428]	; (e4c8 <save_led_data+0x2b8>)
    e31a:	68ba      	ldr	r2, [r7, #8]
    e31c:	188a      	adds	r2, r1, r2
    e31e:	7811      	ldrb	r1, [r2, #0]
    e320:	4a63      	ldr	r2, [pc, #396]	; (e4b0 <save_led_data+0x2a0>)
    e322:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+3] = (uint8_t)(RateSens[i]*100);
    e324:	68ba      	ldr	r2, [r7, #8]
    e326:	0013      	movs	r3, r2
    e328:	009b      	lsls	r3, r3, #2
    e32a:	189a      	adds	r2, r3, r2
    e32c:	683b      	ldr	r3, [r7, #0]
    e32e:	18d3      	adds	r3, r2, r3
    e330:	1cdc      	adds	r4, r3, #3
    e332:	4b66      	ldr	r3, [pc, #408]	; (e4cc <save_led_data+0x2bc>)
    e334:	68ba      	ldr	r2, [r7, #8]
    e336:	0092      	lsls	r2, r2, #2
    e338:	58d2      	ldr	r2, [r2, r3]
    e33a:	4b65      	ldr	r3, [pc, #404]	; (e4d0 <save_led_data+0x2c0>)
    e33c:	4965      	ldr	r1, [pc, #404]	; (e4d4 <save_led_data+0x2c4>)
    e33e:	1c10      	adds	r0, r2, #0
    e340:	4798      	blx	r3
    e342:	1c03      	adds	r3, r0, #0
    e344:	1c1a      	adds	r2, r3, #0
    e346:	4b64      	ldr	r3, [pc, #400]	; (e4d8 <save_led_data+0x2c8>)
    e348:	1c10      	adds	r0, r2, #0
    e34a:	4798      	blx	r3
    e34c:	0003      	movs	r3, r0
    e34e:	b2da      	uxtb	r2, r3
    e350:	4b57      	ldr	r3, [pc, #348]	; (e4b0 <save_led_data+0x2a0>)
    e352:	551a      	strb	r2, [r3, r4]
		eeprom_data[dataOffset + (i*5)+4] = (uint8_t)(Brightness[i]*100);
    e354:	68ba      	ldr	r2, [r7, #8]
    e356:	0013      	movs	r3, r2
    e358:	009b      	lsls	r3, r3, #2
    e35a:	189a      	adds	r2, r3, r2
    e35c:	683b      	ldr	r3, [r7, #0]
    e35e:	18d3      	adds	r3, r2, r3
    e360:	1d1c      	adds	r4, r3, #4
    e362:	4b5e      	ldr	r3, [pc, #376]	; (e4dc <save_led_data+0x2cc>)
    e364:	68ba      	ldr	r2, [r7, #8]
    e366:	0092      	lsls	r2, r2, #2
    e368:	58d2      	ldr	r2, [r2, r3]
    e36a:	4b59      	ldr	r3, [pc, #356]	; (e4d0 <save_led_data+0x2c0>)
    e36c:	4959      	ldr	r1, [pc, #356]	; (e4d4 <save_led_data+0x2c4>)
    e36e:	1c10      	adds	r0, r2, #0
    e370:	4798      	blx	r3
    e372:	1c03      	adds	r3, r0, #0
    e374:	1c1a      	adds	r2, r3, #0
    e376:	4b58      	ldr	r3, [pc, #352]	; (e4d8 <save_led_data+0x2c8>)
    e378:	1c10      	adds	r0, r2, #0
    e37a:	4798      	blx	r3
    e37c:	0003      	movs	r3, r0
    e37e:	b2da      	uxtb	r2, r3
    e380:	4b4b      	ldr	r3, [pc, #300]	; (e4b0 <save_led_data+0x2a0>)
    e382:	551a      	strb	r2, [r3, r4]
	for(int i = 0; i < 8; i++){
    e384:	68bb      	ldr	r3, [r7, #8]
    e386:	3301      	adds	r3, #1
    e388:	60bb      	str	r3, [r7, #8]
    e38a:	68bb      	ldr	r3, [r7, #8]
    e38c:	2b07      	cmp	r3, #7
    e38e:	dda3      	ble.n	e2d8 <save_led_data+0xc8>
	}

	eeprom_emulator_write_page(0, eeprom_data);
    e390:	4b47      	ldr	r3, [pc, #284]	; (e4b0 <save_led_data+0x2a0>)
    e392:	0019      	movs	r1, r3
    e394:	2000      	movs	r0, #0
    e396:	4b52      	ldr	r3, [pc, #328]	; (e4e0 <save_led_data+0x2d0>)
    e398:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e39a:	4b52      	ldr	r3, [pc, #328]	; (e4e4 <save_led_data+0x2d4>)
    e39c:	4798      	blx	r3

	
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e39e:	2300      	movs	r3, #0
    e3a0:	607b      	str	r3, [r7, #4]
    e3a2:	e005      	b.n	e3b0 <save_led_data+0x1a0>
		eeprom_data[0] = 0;
    e3a4:	4b42      	ldr	r3, [pc, #264]	; (e4b0 <save_led_data+0x2a0>)
    e3a6:	2200      	movs	r2, #0
    e3a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e3aa:	687b      	ldr	r3, [r7, #4]
    e3ac:	3301      	adds	r3, #1
    e3ae:	607b      	str	r3, [r7, #4]
    e3b0:	687b      	ldr	r3, [r7, #4]
    e3b2:	2b3b      	cmp	r3, #59	; 0x3b
    e3b4:	ddf6      	ble.n	e3a4 <save_led_data+0x194>
	}
	
	eeprom_data[0] = ColorBase[8];
    e3b6:	4b42      	ldr	r3, [pc, #264]	; (e4c0 <save_led_data+0x2b0>)
    e3b8:	7a1a      	ldrb	r2, [r3, #8]
    e3ba:	4b3d      	ldr	r3, [pc, #244]	; (e4b0 <save_led_data+0x2a0>)
    e3bc:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = BrightBase[8];
    e3be:	4b41      	ldr	r3, [pc, #260]	; (e4c4 <save_led_data+0x2b4>)
    e3c0:	7a1a      	ldrb	r2, [r3, #8]
    e3c2:	4b3b      	ldr	r3, [pc, #236]	; (e4b0 <save_led_data+0x2a0>)
    e3c4:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = RateBase[8];
    e3c6:	4b40      	ldr	r3, [pc, #256]	; (e4c8 <save_led_data+0x2b8>)
    e3c8:	7a1a      	ldrb	r2, [r3, #8]
    e3ca:	4b39      	ldr	r3, [pc, #228]	; (e4b0 <save_led_data+0x2a0>)
    e3cc:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (uint8_t)(RateSens[8]*100);
    e3ce:	4b3f      	ldr	r3, [pc, #252]	; (e4cc <save_led_data+0x2bc>)
    e3d0:	6a1a      	ldr	r2, [r3, #32]
    e3d2:	4b3f      	ldr	r3, [pc, #252]	; (e4d0 <save_led_data+0x2c0>)
    e3d4:	493f      	ldr	r1, [pc, #252]	; (e4d4 <save_led_data+0x2c4>)
    e3d6:	1c10      	adds	r0, r2, #0
    e3d8:	4798      	blx	r3
    e3da:	1c03      	adds	r3, r0, #0
    e3dc:	1c1a      	adds	r2, r3, #0
    e3de:	4b3e      	ldr	r3, [pc, #248]	; (e4d8 <save_led_data+0x2c8>)
    e3e0:	1c10      	adds	r0, r2, #0
    e3e2:	4798      	blx	r3
    e3e4:	0003      	movs	r3, r0
    e3e6:	b2da      	uxtb	r2, r3
    e3e8:	4b31      	ldr	r3, [pc, #196]	; (e4b0 <save_led_data+0x2a0>)
    e3ea:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (uint8_t)(Brightness[8]*100);
    e3ec:	4b3b      	ldr	r3, [pc, #236]	; (e4dc <save_led_data+0x2cc>)
    e3ee:	6a1a      	ldr	r2, [r3, #32]
    e3f0:	4b37      	ldr	r3, [pc, #220]	; (e4d0 <save_led_data+0x2c0>)
    e3f2:	4938      	ldr	r1, [pc, #224]	; (e4d4 <save_led_data+0x2c4>)
    e3f4:	1c10      	adds	r0, r2, #0
    e3f6:	4798      	blx	r3
    e3f8:	1c03      	adds	r3, r0, #0
    e3fa:	1c1a      	adds	r2, r3, #0
    e3fc:	4b36      	ldr	r3, [pc, #216]	; (e4d8 <save_led_data+0x2c8>)
    e3fe:	1c10      	adds	r0, r2, #0
    e400:	4798      	blx	r3
    e402:	0003      	movs	r3, r0
    e404:	b2da      	uxtb	r2, r3
    e406:	4b2a      	ldr	r3, [pc, #168]	; (e4b0 <save_led_data+0x2a0>)
    e408:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Custom_RGB.LR & 0xFF);
    e40a:	4b37      	ldr	r3, [pc, #220]	; (e4e8 <save_led_data+0x2d8>)
    e40c:	881b      	ldrh	r3, [r3, #0]
    e40e:	b2da      	uxtb	r2, r3
    e410:	4b27      	ldr	r3, [pc, #156]	; (e4b0 <save_led_data+0x2a0>)
    e412:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Custom_RGB.LR & 0xFF00) >> 8;
    e414:	4b34      	ldr	r3, [pc, #208]	; (e4e8 <save_led_data+0x2d8>)
    e416:	881b      	ldrh	r3, [r3, #0]
    e418:	0a1b      	lsrs	r3, r3, #8
    e41a:	b29b      	uxth	r3, r3
    e41c:	b2da      	uxtb	r2, r3
    e41e:	4b24      	ldr	r3, [pc, #144]	; (e4b0 <save_led_data+0x2a0>)
    e420:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Custom_RGB.LG & 0xFF);
    e422:	4b31      	ldr	r3, [pc, #196]	; (e4e8 <save_led_data+0x2d8>)
    e424:	885b      	ldrh	r3, [r3, #2]
    e426:	b2da      	uxtb	r2, r3
    e428:	4b21      	ldr	r3, [pc, #132]	; (e4b0 <save_led_data+0x2a0>)
    e42a:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Custom_RGB.LG & 0xFF00) >> 8;
    e42c:	4b2e      	ldr	r3, [pc, #184]	; (e4e8 <save_led_data+0x2d8>)
    e42e:	885b      	ldrh	r3, [r3, #2]
    e430:	0a1b      	lsrs	r3, r3, #8
    e432:	b29b      	uxth	r3, r3
    e434:	b2da      	uxtb	r2, r3
    e436:	4b1e      	ldr	r3, [pc, #120]	; (e4b0 <save_led_data+0x2a0>)
    e438:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Custom_RGB.LB & 0xFF);
    e43a:	4b2b      	ldr	r3, [pc, #172]	; (e4e8 <save_led_data+0x2d8>)
    e43c:	889b      	ldrh	r3, [r3, #4]
    e43e:	b2da      	uxtb	r2, r3
    e440:	4b1b      	ldr	r3, [pc, #108]	; (e4b0 <save_led_data+0x2a0>)
    e442:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Custom_RGB.LB & 0xFF00) >> 8;
    e444:	4b28      	ldr	r3, [pc, #160]	; (e4e8 <save_led_data+0x2d8>)
    e446:	889b      	ldrh	r3, [r3, #4]
    e448:	0a1b      	lsrs	r3, r3, #8
    e44a:	b29b      	uxth	r3, r3
    e44c:	b2da      	uxtb	r2, r3
    e44e:	4b18      	ldr	r3, [pc, #96]	; (e4b0 <save_led_data+0x2a0>)
    e450:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Custom_RGB.RR & 0xFF);
    e452:	4b25      	ldr	r3, [pc, #148]	; (e4e8 <save_led_data+0x2d8>)
    e454:	88db      	ldrh	r3, [r3, #6]
    e456:	b2da      	uxtb	r2, r3
    e458:	4b15      	ldr	r3, [pc, #84]	; (e4b0 <save_led_data+0x2a0>)
    e45a:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Custom_RGB.RR & 0xFF00) >> 8;
    e45c:	4b22      	ldr	r3, [pc, #136]	; (e4e8 <save_led_data+0x2d8>)
    e45e:	88db      	ldrh	r3, [r3, #6]
    e460:	0a1b      	lsrs	r3, r3, #8
    e462:	b29b      	uxth	r3, r3
    e464:	b2da      	uxtb	r2, r3
    e466:	4b12      	ldr	r3, [pc, #72]	; (e4b0 <save_led_data+0x2a0>)
    e468:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Custom_RGB.RG & 0xFF);
    e46a:	4b1f      	ldr	r3, [pc, #124]	; (e4e8 <save_led_data+0x2d8>)
    e46c:	891b      	ldrh	r3, [r3, #8]
    e46e:	b2da      	uxtb	r2, r3
    e470:	4b0f      	ldr	r3, [pc, #60]	; (e4b0 <save_led_data+0x2a0>)
    e472:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = (Custom_RGB.RG & 0xFF00) >> 8;
    e474:	4b1c      	ldr	r3, [pc, #112]	; (e4e8 <save_led_data+0x2d8>)
    e476:	891b      	ldrh	r3, [r3, #8]
    e478:	0a1b      	lsrs	r3, r3, #8
    e47a:	b29b      	uxth	r3, r3
    e47c:	b2da      	uxtb	r2, r3
    e47e:	4b0c      	ldr	r3, [pc, #48]	; (e4b0 <save_led_data+0x2a0>)
    e480:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = (Custom_RGB.RB & 0xFF);
    e482:	4b19      	ldr	r3, [pc, #100]	; (e4e8 <save_led_data+0x2d8>)
    e484:	895b      	ldrh	r3, [r3, #10]
    e486:	b2da      	uxtb	r2, r3
    e488:	4b09      	ldr	r3, [pc, #36]	; (e4b0 <save_led_data+0x2a0>)
    e48a:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = (Custom_RGB.RB & 0xFF00) >> 8;
    e48c:	4b16      	ldr	r3, [pc, #88]	; (e4e8 <save_led_data+0x2d8>)
    e48e:	895b      	ldrh	r3, [r3, #10]
    e490:	0a1b      	lsrs	r3, r3, #8
    e492:	b29b      	uxth	r3, r3
    e494:	b2da      	uxtb	r2, r3
    e496:	4b06      	ldr	r3, [pc, #24]	; (e4b0 <save_led_data+0x2a0>)
    e498:	741a      	strb	r2, [r3, #16]

	eeprom_emulator_write_page(1, eeprom_data);
    e49a:	4b05      	ldr	r3, [pc, #20]	; (e4b0 <save_led_data+0x2a0>)
    e49c:	0019      	movs	r1, r3
    e49e:	2001      	movs	r0, #1
    e4a0:	4b0f      	ldr	r3, [pc, #60]	; (e4e0 <save_led_data+0x2d0>)
    e4a2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e4a4:	4b0f      	ldr	r3, [pc, #60]	; (e4e4 <save_led_data+0x2d4>)
    e4a6:	4798      	blx	r3
}
    e4a8:	46c0      	nop			; (mov r8, r8)
    e4aa:	46bd      	mov	sp, r7
    e4ac:	b005      	add	sp, #20
    e4ae:	bd90      	pop	{r4, r7, pc}
    e4b0:	200009e0 	.word	0x200009e0
    e4b4:	20000325 	.word	0x20000325
    e4b8:	2000001b 	.word	0x2000001b
    e4bc:	2000001c 	.word	0x2000001c
    e4c0:	20000070 	.word	0x20000070
    e4c4:	2000007c 	.word	0x2000007c
    e4c8:	20000088 	.word	0x20000088
    e4cc:	20000028 	.word	0x20000028
    e4d0:	00014ba9 	.word	0x00014ba9
    e4d4:	42c80000 	.word	0x42c80000
    e4d8:	00014439 	.word	0x00014439
    e4dc:	2000004c 	.word	0x2000004c
    e4e0:	00008739 	.word	0x00008739
    e4e4:	000088e1 	.word	0x000088e1
    e4e8:	20000094 	.word	0x20000094

0000e4ec <restore_led_data>:

void restore_led_data(){
    e4ec:	b590      	push	{r4, r7, lr}
    e4ee:	b09f      	sub	sp, #124	; 0x7c
    e4f0:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(0, eeprom_data);
    e4f2:	4ba9      	ldr	r3, [pc, #676]	; (e798 <restore_led_data+0x2ac>)
    e4f4:	0019      	movs	r1, r3
    e4f6:	2000      	movs	r0, #0
    e4f8:	4ba8      	ldr	r3, [pc, #672]	; (e79c <restore_led_data+0x2b0>)
    e4fa:	4798      	blx	r3
	
	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    e4fc:	4ba6      	ldr	r3, [pc, #664]	; (e798 <restore_led_data+0x2ac>)
    e4fe:	781b      	ldrb	r3, [r3, #0]
    e500:	2bff      	cmp	r3, #255	; 0xff
    e502:	d000      	beq.n	e506 <restore_led_data+0x1a>
    e504:	e0b4      	b.n	e670 <restore_led_data+0x184>
    e506:	4ba4      	ldr	r3, [pc, #656]	; (e798 <restore_led_data+0x2ac>)
    e508:	785b      	ldrb	r3, [r3, #1]
    e50a:	2bff      	cmp	r3, #255	; 0xff
    e50c:	d000      	beq.n	e510 <restore_led_data+0x24>
    e50e:	e0af      	b.n	e670 <restore_led_data+0x184>
		SWITCHES = 0x30; // SIDE: on	HEAD: on	LIGHT: disable	IMU: disable
    e510:	4ba3      	ldr	r3, [pc, #652]	; (e7a0 <restore_led_data+0x2b4>)
    e512:	2230      	movs	r2, #48	; 0x30
    e514:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    e516:	4ba2      	ldr	r3, [pc, #648]	; (e7a0 <restore_led_data+0x2b4>)
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	111b      	asrs	r3, r3, #4
    e51c:	b2db      	uxtb	r3, r3
    e51e:	2201      	movs	r2, #1
    e520:	4013      	ands	r3, r2
    e522:	b2da      	uxtb	r2, r3
    e524:	4b9f      	ldr	r3, [pc, #636]	; (e7a4 <restore_led_data+0x2b8>)
    e526:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    e528:	4b9d      	ldr	r3, [pc, #628]	; (e7a0 <restore_led_data+0x2b4>)
    e52a:	781b      	ldrb	r3, [r3, #0]
    e52c:	115b      	asrs	r3, r3, #5
    e52e:	b2db      	uxtb	r3, r3
    e530:	2201      	movs	r2, #1
    e532:	4013      	ands	r3, r2
    e534:	b2da      	uxtb	r2, r3
    e536:	4b9c      	ldr	r3, [pc, #624]	; (e7a8 <restore_led_data+0x2bc>)
    e538:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    e53a:	4b99      	ldr	r3, [pc, #612]	; (e7a0 <restore_led_data+0x2b4>)
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	119b      	asrs	r3, r3, #6
    e540:	b2db      	uxtb	r3, r3
    e542:	2201      	movs	r2, #1
    e544:	4013      	ands	r3, r2
    e546:	b2da      	uxtb	r2, r3
    e548:	4b98      	ldr	r3, [pc, #608]	; (e7ac <restore_led_data+0x2c0>)
    e54a:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    e54c:	4b94      	ldr	r3, [pc, #592]	; (e7a0 <restore_led_data+0x2b4>)
    e54e:	781b      	ldrb	r3, [r3, #0]
    e550:	09db      	lsrs	r3, r3, #7
    e552:	b2da      	uxtb	r2, r3
    e554:	4b96      	ldr	r3, [pc, #600]	; (e7b0 <restore_led_data+0x2c4>)
    e556:	701a      	strb	r2, [r3, #0]
		light_mode = MODE_COLOR_CYCLE;
    e558:	4b96      	ldr	r3, [pc, #600]	; (e7b4 <restore_led_data+0x2c8>)
    e55a:	2201      	movs	r2, #1
    e55c:	701a      	strb	r2, [r3, #0]

		Static_RGB.LR = 0;
    e55e:	4b96      	ldr	r3, [pc, #600]	; (e7b8 <restore_led_data+0x2cc>)
    e560:	2200      	movs	r2, #0
    e562:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = 0xFFFF;
    e564:	4b94      	ldr	r3, [pc, #592]	; (e7b8 <restore_led_data+0x2cc>)
    e566:	2201      	movs	r2, #1
    e568:	4252      	negs	r2, r2
    e56a:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = 0;
    e56c:	4b92      	ldr	r3, [pc, #584]	; (e7b8 <restore_led_data+0x2cc>)
    e56e:	2200      	movs	r2, #0
    e570:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = 0;
    e572:	4b91      	ldr	r3, [pc, #580]	; (e7b8 <restore_led_data+0x2cc>)
    e574:	2200      	movs	r2, #0
    e576:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = 0;
    e578:	4b8f      	ldr	r3, [pc, #572]	; (e7b8 <restore_led_data+0x2cc>)
    e57a:	2200      	movs	r2, #0
    e57c:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = 0xFFFF;
    e57e:	4b8e      	ldr	r3, [pc, #568]	; (e7b8 <restore_led_data+0x2cc>)
    e580:	2201      	movs	r2, #1
    e582:	4252      	negs	r2, r2
    e584:	815a      	strh	r2, [r3, #10]

		
		uint8_t default_ColorBase[9] = {0,1,2,7,1,7,9,10,1};
    e586:	2360      	movs	r3, #96	; 0x60
    e588:	18fb      	adds	r3, r7, r3
    e58a:	4a8c      	ldr	r2, [pc, #560]	; (e7bc <restore_led_data+0x2d0>)
    e58c:	ca03      	ldmia	r2!, {r0, r1}
    e58e:	c303      	stmia	r3!, {r0, r1}
    e590:	7812      	ldrb	r2, [r2, #0]
    e592:	701a      	strb	r2, [r3, #0]
		uint8_t default_BrightBase[9] = {255,0,0,0,3,3,0,0,2};
    e594:	2354      	movs	r3, #84	; 0x54
    e596:	18fb      	adds	r3, r7, r3
    e598:	4a89      	ldr	r2, [pc, #548]	; (e7c0 <restore_led_data+0x2d4>)
    e59a:	ca03      	ldmia	r2!, {r0, r1}
    e59c:	c303      	stmia	r3!, {r0, r1}
    e59e:	7812      	ldrb	r2, [r2, #0]
    e5a0:	701a      	strb	r2, [r3, #0]
		uint8_t default_RateBase[9] = {255,0,255,0,0,255,0,0,3};
    e5a2:	2348      	movs	r3, #72	; 0x48
    e5a4:	18fb      	adds	r3, r7, r3
    e5a6:	4a87      	ldr	r2, [pc, #540]	; (e7c4 <restore_led_data+0x2d8>)
    e5a8:	ca03      	ldmia	r2!, {r0, r1}
    e5aa:	c303      	stmia	r3!, {r0, r1}
    e5ac:	7812      	ldrb	r2, [r2, #0]
    e5ae:	701a      	strb	r2, [r3, #0]
		float default_RateSens[9] = {0,0.75,0,0.5,0.5,0,0.5,0.5,0.5};
    e5b0:	003b      	movs	r3, r7
    e5b2:	4a85      	ldr	r2, [pc, #532]	; (e7c8 <restore_led_data+0x2dc>)
    e5b4:	ca13      	ldmia	r2!, {r0, r1, r4}
    e5b6:	c313      	stmia	r3!, {r0, r1, r4}
    e5b8:	ca13      	ldmia	r2!, {r0, r1, r4}
    e5ba:	c313      	stmia	r3!, {r0, r1, r4}
    e5bc:	ca13      	ldmia	r2!, {r0, r1, r4}
    e5be:	c313      	stmia	r3!, {r0, r1, r4}
		float default_Brightness[9] = {0,0.25,0.5,0.5,0.5,0.5,0.5,0.5,0.5};
    e5c0:	2324      	movs	r3, #36	; 0x24
    e5c2:	18fb      	adds	r3, r7, r3
    e5c4:	4a81      	ldr	r2, [pc, #516]	; (e7cc <restore_led_data+0x2e0>)
    e5c6:	ca13      	ldmia	r2!, {r0, r1, r4}
    e5c8:	c313      	stmia	r3!, {r0, r1, r4}
    e5ca:	ca13      	ldmia	r2!, {r0, r1, r4}
    e5cc:	c313      	stmia	r3!, {r0, r1, r4}
    e5ce:	ca13      	ldmia	r2!, {r0, r1, r4}
    e5d0:	c313      	stmia	r3!, {r0, r1, r4}

		for(int i = 0; i < 9; i++){
    e5d2:	2300      	movs	r3, #0
    e5d4:	677b      	str	r3, [r7, #116]	; 0x74
    e5d6:	e031      	b.n	e63c <restore_led_data+0x150>
			ColorBase[i] = default_ColorBase[i];
    e5d8:	2360      	movs	r3, #96	; 0x60
    e5da:	18fa      	adds	r2, r7, r3
    e5dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e5de:	18d3      	adds	r3, r2, r3
    e5e0:	7819      	ldrb	r1, [r3, #0]
    e5e2:	4a7b      	ldr	r2, [pc, #492]	; (e7d0 <restore_led_data+0x2e4>)
    e5e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e5e6:	18d3      	adds	r3, r2, r3
    e5e8:	1c0a      	adds	r2, r1, #0
    e5ea:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = default_BrightBase[i];
    e5ec:	2354      	movs	r3, #84	; 0x54
    e5ee:	18fa      	adds	r2, r7, r3
    e5f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e5f2:	18d3      	adds	r3, r2, r3
    e5f4:	7819      	ldrb	r1, [r3, #0]
    e5f6:	4a77      	ldr	r2, [pc, #476]	; (e7d4 <restore_led_data+0x2e8>)
    e5f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e5fa:	18d3      	adds	r3, r2, r3
    e5fc:	1c0a      	adds	r2, r1, #0
    e5fe:	701a      	strb	r2, [r3, #0]
			RateBase[i] = default_RateBase[i];
    e600:	2348      	movs	r3, #72	; 0x48
    e602:	18fa      	adds	r2, r7, r3
    e604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e606:	18d3      	adds	r3, r2, r3
    e608:	7819      	ldrb	r1, [r3, #0]
    e60a:	4a73      	ldr	r2, [pc, #460]	; (e7d8 <restore_led_data+0x2ec>)
    e60c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e60e:	18d3      	adds	r3, r2, r3
    e610:	1c0a      	adds	r2, r1, #0
    e612:	701a      	strb	r2, [r3, #0]
			RateSens[i] = default_RateSens[i];
    e614:	003b      	movs	r3, r7
    e616:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e618:	0092      	lsls	r2, r2, #2
    e61a:	58d1      	ldr	r1, [r2, r3]
    e61c:	4b6f      	ldr	r3, [pc, #444]	; (e7dc <restore_led_data+0x2f0>)
    e61e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e620:	0092      	lsls	r2, r2, #2
    e622:	50d1      	str	r1, [r2, r3]
			Brightness[i] = default_Brightness[i];
    e624:	2324      	movs	r3, #36	; 0x24
    e626:	18fb      	adds	r3, r7, r3
    e628:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e62a:	0092      	lsls	r2, r2, #2
    e62c:	58d1      	ldr	r1, [r2, r3]
    e62e:	4b6c      	ldr	r3, [pc, #432]	; (e7e0 <restore_led_data+0x2f4>)
    e630:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e632:	0092      	lsls	r2, r2, #2
    e634:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 9; i++){
    e636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e638:	3301      	adds	r3, #1
    e63a:	677b      	str	r3, [r7, #116]	; 0x74
    e63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e63e:	2b08      	cmp	r3, #8
    e640:	ddca      	ble.n	e5d8 <restore_led_data+0xec>
		}

		Custom_RGB.LR = 0;
    e642:	4b68      	ldr	r3, [pc, #416]	; (e7e4 <restore_led_data+0x2f8>)
    e644:	2200      	movs	r2, #0
    e646:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = 0;
    e648:	4b66      	ldr	r3, [pc, #408]	; (e7e4 <restore_led_data+0x2f8>)
    e64a:	2200      	movs	r2, #0
    e64c:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = 0xFFFF;
    e64e:	4b65      	ldr	r3, [pc, #404]	; (e7e4 <restore_led_data+0x2f8>)
    e650:	2201      	movs	r2, #1
    e652:	4252      	negs	r2, r2
    e654:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = 0;
    e656:	4b63      	ldr	r3, [pc, #396]	; (e7e4 <restore_led_data+0x2f8>)
    e658:	2200      	movs	r2, #0
    e65a:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = 0xFFFF;
    e65c:	4b61      	ldr	r3, [pc, #388]	; (e7e4 <restore_led_data+0x2f8>)
    e65e:	2201      	movs	r2, #1
    e660:	4252      	negs	r2, r2
    e662:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = 0;
    e664:	4b5f      	ldr	r3, [pc, #380]	; (e7e4 <restore_led_data+0x2f8>)
    e666:	2200      	movs	r2, #0
    e668:	815a      	strh	r2, [r3, #10]

		save_led_data();
    e66a:	4b5f      	ldr	r3, [pc, #380]	; (e7e8 <restore_led_data+0x2fc>)
    e66c:	4798      	blx	r3
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    e66e:	e1ad      	b.n	e9cc <restore_led_data+0x4e0>
	}
	else{ // else restore the stored data
		SWITCHES = eeprom_data[0];
    e670:	4b49      	ldr	r3, [pc, #292]	; (e798 <restore_led_data+0x2ac>)
    e672:	781a      	ldrb	r2, [r3, #0]
    e674:	4b4a      	ldr	r3, [pc, #296]	; (e7a0 <restore_led_data+0x2b4>)
    e676:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    e678:	4b49      	ldr	r3, [pc, #292]	; (e7a0 <restore_led_data+0x2b4>)
    e67a:	781b      	ldrb	r3, [r3, #0]
    e67c:	111b      	asrs	r3, r3, #4
    e67e:	b2db      	uxtb	r3, r3
    e680:	2201      	movs	r2, #1
    e682:	4013      	ands	r3, r2
    e684:	b2da      	uxtb	r2, r3
    e686:	4b47      	ldr	r3, [pc, #284]	; (e7a4 <restore_led_data+0x2b8>)
    e688:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    e68a:	4b45      	ldr	r3, [pc, #276]	; (e7a0 <restore_led_data+0x2b4>)
    e68c:	781b      	ldrb	r3, [r3, #0]
    e68e:	115b      	asrs	r3, r3, #5
    e690:	b2db      	uxtb	r3, r3
    e692:	2201      	movs	r2, #1
    e694:	4013      	ands	r3, r2
    e696:	b2da      	uxtb	r2, r3
    e698:	4b43      	ldr	r3, [pc, #268]	; (e7a8 <restore_led_data+0x2bc>)
    e69a:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    e69c:	4b40      	ldr	r3, [pc, #256]	; (e7a0 <restore_led_data+0x2b4>)
    e69e:	781b      	ldrb	r3, [r3, #0]
    e6a0:	119b      	asrs	r3, r3, #6
    e6a2:	b2db      	uxtb	r3, r3
    e6a4:	2201      	movs	r2, #1
    e6a6:	4013      	ands	r3, r2
    e6a8:	b2da      	uxtb	r2, r3
    e6aa:	4b40      	ldr	r3, [pc, #256]	; (e7ac <restore_led_data+0x2c0>)
    e6ac:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    e6ae:	4b3c      	ldr	r3, [pc, #240]	; (e7a0 <restore_led_data+0x2b4>)
    e6b0:	781b      	ldrb	r3, [r3, #0]
    e6b2:	09db      	lsrs	r3, r3, #7
    e6b4:	b2da      	uxtb	r2, r3
    e6b6:	4b3e      	ldr	r3, [pc, #248]	; (e7b0 <restore_led_data+0x2c4>)
    e6b8:	701a      	strb	r2, [r3, #0]
		light_mode = eeprom_data[1];
    e6ba:	4b37      	ldr	r3, [pc, #220]	; (e798 <restore_led_data+0x2ac>)
    e6bc:	785a      	ldrb	r2, [r3, #1]
    e6be:	4b3d      	ldr	r3, [pc, #244]	; (e7b4 <restore_led_data+0x2c8>)
    e6c0:	701a      	strb	r2, [r3, #0]
		Static_RGB.LR = eeprom_data[2];
    e6c2:	4b35      	ldr	r3, [pc, #212]	; (e798 <restore_led_data+0x2ac>)
    e6c4:	789b      	ldrb	r3, [r3, #2]
    e6c6:	b29a      	uxth	r2, r3
    e6c8:	4b3b      	ldr	r3, [pc, #236]	; (e7b8 <restore_led_data+0x2cc>)
    e6ca:	801a      	strh	r2, [r3, #0]
		Static_RGB.LR = (Static_RGB.LR | (eeprom_data[3] << 8));
    e6cc:	4b3a      	ldr	r3, [pc, #232]	; (e7b8 <restore_led_data+0x2cc>)
    e6ce:	881b      	ldrh	r3, [r3, #0]
    e6d0:	b21a      	sxth	r2, r3
    e6d2:	4b31      	ldr	r3, [pc, #196]	; (e798 <restore_led_data+0x2ac>)
    e6d4:	78db      	ldrb	r3, [r3, #3]
    e6d6:	021b      	lsls	r3, r3, #8
    e6d8:	b21b      	sxth	r3, r3
    e6da:	4313      	orrs	r3, r2
    e6dc:	b21b      	sxth	r3, r3
    e6de:	b29a      	uxth	r2, r3
    e6e0:	4b35      	ldr	r3, [pc, #212]	; (e7b8 <restore_led_data+0x2cc>)
    e6e2:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = eeprom_data[4];
    e6e4:	4b2c      	ldr	r3, [pc, #176]	; (e798 <restore_led_data+0x2ac>)
    e6e6:	791b      	ldrb	r3, [r3, #4]
    e6e8:	b29a      	uxth	r2, r3
    e6ea:	4b33      	ldr	r3, [pc, #204]	; (e7b8 <restore_led_data+0x2cc>)
    e6ec:	805a      	strh	r2, [r3, #2]
		Static_RGB.LG = (Static_RGB.LG | (eeprom_data[5] << 8));
    e6ee:	4b32      	ldr	r3, [pc, #200]	; (e7b8 <restore_led_data+0x2cc>)
    e6f0:	885b      	ldrh	r3, [r3, #2]
    e6f2:	b21a      	sxth	r2, r3
    e6f4:	4b28      	ldr	r3, [pc, #160]	; (e798 <restore_led_data+0x2ac>)
    e6f6:	795b      	ldrb	r3, [r3, #5]
    e6f8:	021b      	lsls	r3, r3, #8
    e6fa:	b21b      	sxth	r3, r3
    e6fc:	4313      	orrs	r3, r2
    e6fe:	b21b      	sxth	r3, r3
    e700:	b29a      	uxth	r2, r3
    e702:	4b2d      	ldr	r3, [pc, #180]	; (e7b8 <restore_led_data+0x2cc>)
    e704:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = eeprom_data[6];
    e706:	4b24      	ldr	r3, [pc, #144]	; (e798 <restore_led_data+0x2ac>)
    e708:	799b      	ldrb	r3, [r3, #6]
    e70a:	b29a      	uxth	r2, r3
    e70c:	4b2a      	ldr	r3, [pc, #168]	; (e7b8 <restore_led_data+0x2cc>)
    e70e:	809a      	strh	r2, [r3, #4]
		Static_RGB.LB = (Static_RGB.LB | (eeprom_data[7] << 8));
    e710:	4b29      	ldr	r3, [pc, #164]	; (e7b8 <restore_led_data+0x2cc>)
    e712:	889b      	ldrh	r3, [r3, #4]
    e714:	b21a      	sxth	r2, r3
    e716:	4b20      	ldr	r3, [pc, #128]	; (e798 <restore_led_data+0x2ac>)
    e718:	79db      	ldrb	r3, [r3, #7]
    e71a:	021b      	lsls	r3, r3, #8
    e71c:	b21b      	sxth	r3, r3
    e71e:	4313      	orrs	r3, r2
    e720:	b21b      	sxth	r3, r3
    e722:	b29a      	uxth	r2, r3
    e724:	4b24      	ldr	r3, [pc, #144]	; (e7b8 <restore_led_data+0x2cc>)
    e726:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = eeprom_data[8];
    e728:	4b1b      	ldr	r3, [pc, #108]	; (e798 <restore_led_data+0x2ac>)
    e72a:	7a1b      	ldrb	r3, [r3, #8]
    e72c:	b29a      	uxth	r2, r3
    e72e:	4b22      	ldr	r3, [pc, #136]	; (e7b8 <restore_led_data+0x2cc>)
    e730:	80da      	strh	r2, [r3, #6]
		Static_RGB.RR = (Static_RGB.RR | (eeprom_data[9] << 8));
    e732:	4b21      	ldr	r3, [pc, #132]	; (e7b8 <restore_led_data+0x2cc>)
    e734:	88db      	ldrh	r3, [r3, #6]
    e736:	b21a      	sxth	r2, r3
    e738:	4b17      	ldr	r3, [pc, #92]	; (e798 <restore_led_data+0x2ac>)
    e73a:	7a5b      	ldrb	r3, [r3, #9]
    e73c:	021b      	lsls	r3, r3, #8
    e73e:	b21b      	sxth	r3, r3
    e740:	4313      	orrs	r3, r2
    e742:	b21b      	sxth	r3, r3
    e744:	b29a      	uxth	r2, r3
    e746:	4b1c      	ldr	r3, [pc, #112]	; (e7b8 <restore_led_data+0x2cc>)
    e748:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = eeprom_data[10];
    e74a:	4b13      	ldr	r3, [pc, #76]	; (e798 <restore_led_data+0x2ac>)
    e74c:	7a9b      	ldrb	r3, [r3, #10]
    e74e:	b29a      	uxth	r2, r3
    e750:	4b19      	ldr	r3, [pc, #100]	; (e7b8 <restore_led_data+0x2cc>)
    e752:	811a      	strh	r2, [r3, #8]
		Static_RGB.RG = (Static_RGB.RG | (eeprom_data[11] << 8));
    e754:	4b18      	ldr	r3, [pc, #96]	; (e7b8 <restore_led_data+0x2cc>)
    e756:	891b      	ldrh	r3, [r3, #8]
    e758:	b21a      	sxth	r2, r3
    e75a:	4b0f      	ldr	r3, [pc, #60]	; (e798 <restore_led_data+0x2ac>)
    e75c:	7adb      	ldrb	r3, [r3, #11]
    e75e:	021b      	lsls	r3, r3, #8
    e760:	b21b      	sxth	r3, r3
    e762:	4313      	orrs	r3, r2
    e764:	b21b      	sxth	r3, r3
    e766:	b29a      	uxth	r2, r3
    e768:	4b13      	ldr	r3, [pc, #76]	; (e7b8 <restore_led_data+0x2cc>)
    e76a:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = eeprom_data[12];
    e76c:	4b0a      	ldr	r3, [pc, #40]	; (e798 <restore_led_data+0x2ac>)
    e76e:	7b1b      	ldrb	r3, [r3, #12]
    e770:	b29a      	uxth	r2, r3
    e772:	4b11      	ldr	r3, [pc, #68]	; (e7b8 <restore_led_data+0x2cc>)
    e774:	815a      	strh	r2, [r3, #10]
		Static_RGB.RB = (Static_RGB.RB | (eeprom_data[13] << 8));
    e776:	4b10      	ldr	r3, [pc, #64]	; (e7b8 <restore_led_data+0x2cc>)
    e778:	895b      	ldrh	r3, [r3, #10]
    e77a:	b21a      	sxth	r2, r3
    e77c:	4b06      	ldr	r3, [pc, #24]	; (e798 <restore_led_data+0x2ac>)
    e77e:	7b5b      	ldrb	r3, [r3, #13]
    e780:	021b      	lsls	r3, r3, #8
    e782:	b21b      	sxth	r3, r3
    e784:	4313      	orrs	r3, r2
    e786:	b21b      	sxth	r3, r3
    e788:	b29a      	uxth	r2, r3
    e78a:	4b0b      	ldr	r3, [pc, #44]	; (e7b8 <restore_led_data+0x2cc>)
    e78c:	815a      	strh	r2, [r3, #10]
		int dataOffset = 14;
    e78e:	230e      	movs	r3, #14
    e790:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < 8; i++){
    e792:	2300      	movs	r3, #0
    e794:	673b      	str	r3, [r7, #112]	; 0x70
    e796:	e083      	b.n	e8a0 <restore_led_data+0x3b4>
    e798:	200009e0 	.word	0x200009e0
    e79c:	00008845 	.word	0x00008845
    e7a0:	20000325 	.word	0x20000325
    e7a4:	200000a2 	.word	0x200000a2
    e7a8:	20000322 	.word	0x20000322
    e7ac:	20000323 	.word	0x20000323
    e7b0:	20000324 	.word	0x20000324
    e7b4:	2000001b 	.word	0x2000001b
    e7b8:	2000001c 	.word	0x2000001c
    e7bc:	00017564 	.word	0x00017564
    e7c0:	00017570 	.word	0x00017570
    e7c4:	0001757c 	.word	0x0001757c
    e7c8:	00017588 	.word	0x00017588
    e7cc:	000175ac 	.word	0x000175ac
    e7d0:	20000070 	.word	0x20000070
    e7d4:	2000007c 	.word	0x2000007c
    e7d8:	20000088 	.word	0x20000088
    e7dc:	20000028 	.word	0x20000028
    e7e0:	2000004c 	.word	0x2000004c
    e7e4:	20000094 	.word	0x20000094
    e7e8:	0000e211 	.word	0x0000e211
			ColorBase[i] = eeprom_data[dataOffset + (i*5)];
    e7ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e7ee:	0013      	movs	r3, r2
    e7f0:	009b      	lsls	r3, r3, #2
    e7f2:	189a      	adds	r2, r3, r2
    e7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e7f6:	18d3      	adds	r3, r2, r3
    e7f8:	4a76      	ldr	r2, [pc, #472]	; (e9d4 <restore_led_data+0x4e8>)
    e7fa:	5cd1      	ldrb	r1, [r2, r3]
    e7fc:	4a76      	ldr	r2, [pc, #472]	; (e9d8 <restore_led_data+0x4ec>)
    e7fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e800:	18d3      	adds	r3, r2, r3
    e802:	1c0a      	adds	r2, r1, #0
    e804:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = eeprom_data[dataOffset + (i*5) + 1];
    e806:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e808:	0013      	movs	r3, r2
    e80a:	009b      	lsls	r3, r3, #2
    e80c:	189a      	adds	r2, r3, r2
    e80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e810:	18d3      	adds	r3, r2, r3
    e812:	3301      	adds	r3, #1
    e814:	4a6f      	ldr	r2, [pc, #444]	; (e9d4 <restore_led_data+0x4e8>)
    e816:	5cd1      	ldrb	r1, [r2, r3]
    e818:	4a70      	ldr	r2, [pc, #448]	; (e9dc <restore_led_data+0x4f0>)
    e81a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e81c:	18d3      	adds	r3, r2, r3
    e81e:	1c0a      	adds	r2, r1, #0
    e820:	701a      	strb	r2, [r3, #0]
			RateBase[i] = eeprom_data[dataOffset + (i*5) + 2];
    e822:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e824:	0013      	movs	r3, r2
    e826:	009b      	lsls	r3, r3, #2
    e828:	189a      	adds	r2, r3, r2
    e82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e82c:	18d3      	adds	r3, r2, r3
    e82e:	3302      	adds	r3, #2
    e830:	4a68      	ldr	r2, [pc, #416]	; (e9d4 <restore_led_data+0x4e8>)
    e832:	5cd1      	ldrb	r1, [r2, r3]
    e834:	4a6a      	ldr	r2, [pc, #424]	; (e9e0 <restore_led_data+0x4f4>)
    e836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e838:	18d3      	adds	r3, r2, r3
    e83a:	1c0a      	adds	r2, r1, #0
    e83c:	701a      	strb	r2, [r3, #0]
			RateSens[i] = ((float)eeprom_data[dataOffset + (i*5) + 3])/100;
    e83e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e840:	0013      	movs	r3, r2
    e842:	009b      	lsls	r3, r3, #2
    e844:	189a      	adds	r2, r3, r2
    e846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e848:	18d3      	adds	r3, r2, r3
    e84a:	3303      	adds	r3, #3
    e84c:	4a61      	ldr	r2, [pc, #388]	; (e9d4 <restore_led_data+0x4e8>)
    e84e:	5cd2      	ldrb	r2, [r2, r3]
    e850:	4b64      	ldr	r3, [pc, #400]	; (e9e4 <restore_led_data+0x4f8>)
    e852:	0010      	movs	r0, r2
    e854:	4798      	blx	r3
    e856:	1c02      	adds	r2, r0, #0
    e858:	4b63      	ldr	r3, [pc, #396]	; (e9e8 <restore_led_data+0x4fc>)
    e85a:	4964      	ldr	r1, [pc, #400]	; (e9ec <restore_led_data+0x500>)
    e85c:	1c10      	adds	r0, r2, #0
    e85e:	4798      	blx	r3
    e860:	1c03      	adds	r3, r0, #0
    e862:	1c19      	adds	r1, r3, #0
    e864:	4b62      	ldr	r3, [pc, #392]	; (e9f0 <restore_led_data+0x504>)
    e866:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e868:	0092      	lsls	r2, r2, #2
    e86a:	50d1      	str	r1, [r2, r3]
			Brightness[i] = ((float)eeprom_data[dataOffset + (i*5) + 4])/100;
    e86c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e86e:	0013      	movs	r3, r2
    e870:	009b      	lsls	r3, r3, #2
    e872:	189a      	adds	r2, r3, r2
    e874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e876:	18d3      	adds	r3, r2, r3
    e878:	3304      	adds	r3, #4
    e87a:	4a56      	ldr	r2, [pc, #344]	; (e9d4 <restore_led_data+0x4e8>)
    e87c:	5cd2      	ldrb	r2, [r2, r3]
    e87e:	4b59      	ldr	r3, [pc, #356]	; (e9e4 <restore_led_data+0x4f8>)
    e880:	0010      	movs	r0, r2
    e882:	4798      	blx	r3
    e884:	1c02      	adds	r2, r0, #0
    e886:	4b58      	ldr	r3, [pc, #352]	; (e9e8 <restore_led_data+0x4fc>)
    e888:	4958      	ldr	r1, [pc, #352]	; (e9ec <restore_led_data+0x500>)
    e88a:	1c10      	adds	r0, r2, #0
    e88c:	4798      	blx	r3
    e88e:	1c03      	adds	r3, r0, #0
    e890:	1c19      	adds	r1, r3, #0
    e892:	4b58      	ldr	r3, [pc, #352]	; (e9f4 <restore_led_data+0x508>)
    e894:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e896:	0092      	lsls	r2, r2, #2
    e898:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 8; i++){
    e89a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e89c:	3301      	adds	r3, #1
    e89e:	673b      	str	r3, [r7, #112]	; 0x70
    e8a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e8a2:	2b07      	cmp	r3, #7
    e8a4:	dda2      	ble.n	e7ec <restore_led_data+0x300>
		}

		eeprom_emulator_read_page(1, eeprom_data);
    e8a6:	4b4b      	ldr	r3, [pc, #300]	; (e9d4 <restore_led_data+0x4e8>)
    e8a8:	0019      	movs	r1, r3
    e8aa:	2001      	movs	r0, #1
    e8ac:	4b52      	ldr	r3, [pc, #328]	; (e9f8 <restore_led_data+0x50c>)
    e8ae:	4798      	blx	r3

		ColorBase[8] = eeprom_data[0];
    e8b0:	4b48      	ldr	r3, [pc, #288]	; (e9d4 <restore_led_data+0x4e8>)
    e8b2:	781a      	ldrb	r2, [r3, #0]
    e8b4:	4b48      	ldr	r3, [pc, #288]	; (e9d8 <restore_led_data+0x4ec>)
    e8b6:	721a      	strb	r2, [r3, #8]
		BrightBase[8] = eeprom_data[1];
    e8b8:	4b46      	ldr	r3, [pc, #280]	; (e9d4 <restore_led_data+0x4e8>)
    e8ba:	785a      	ldrb	r2, [r3, #1]
    e8bc:	4b47      	ldr	r3, [pc, #284]	; (e9dc <restore_led_data+0x4f0>)
    e8be:	721a      	strb	r2, [r3, #8]
		RateBase[8] = eeprom_data[2];
    e8c0:	4b44      	ldr	r3, [pc, #272]	; (e9d4 <restore_led_data+0x4e8>)
    e8c2:	789a      	ldrb	r2, [r3, #2]
    e8c4:	4b46      	ldr	r3, [pc, #280]	; (e9e0 <restore_led_data+0x4f4>)
    e8c6:	721a      	strb	r2, [r3, #8]
		RateSens[8] = ((float)eeprom_data[3])/100;
    e8c8:	4b42      	ldr	r3, [pc, #264]	; (e9d4 <restore_led_data+0x4e8>)
    e8ca:	78da      	ldrb	r2, [r3, #3]
    e8cc:	4b45      	ldr	r3, [pc, #276]	; (e9e4 <restore_led_data+0x4f8>)
    e8ce:	0010      	movs	r0, r2
    e8d0:	4798      	blx	r3
    e8d2:	1c02      	adds	r2, r0, #0
    e8d4:	4b44      	ldr	r3, [pc, #272]	; (e9e8 <restore_led_data+0x4fc>)
    e8d6:	4945      	ldr	r1, [pc, #276]	; (e9ec <restore_led_data+0x500>)
    e8d8:	1c10      	adds	r0, r2, #0
    e8da:	4798      	blx	r3
    e8dc:	1c03      	adds	r3, r0, #0
    e8de:	1c1a      	adds	r2, r3, #0
    e8e0:	4b43      	ldr	r3, [pc, #268]	; (e9f0 <restore_led_data+0x504>)
    e8e2:	621a      	str	r2, [r3, #32]
		Brightness[8] = ((float)eeprom_data[4])/100;
    e8e4:	4b3b      	ldr	r3, [pc, #236]	; (e9d4 <restore_led_data+0x4e8>)
    e8e6:	791a      	ldrb	r2, [r3, #4]
    e8e8:	4b3e      	ldr	r3, [pc, #248]	; (e9e4 <restore_led_data+0x4f8>)
    e8ea:	0010      	movs	r0, r2
    e8ec:	4798      	blx	r3
    e8ee:	1c02      	adds	r2, r0, #0
    e8f0:	4b3d      	ldr	r3, [pc, #244]	; (e9e8 <restore_led_data+0x4fc>)
    e8f2:	493e      	ldr	r1, [pc, #248]	; (e9ec <restore_led_data+0x500>)
    e8f4:	1c10      	adds	r0, r2, #0
    e8f6:	4798      	blx	r3
    e8f8:	1c03      	adds	r3, r0, #0
    e8fa:	1c1a      	adds	r2, r3, #0
    e8fc:	4b3d      	ldr	r3, [pc, #244]	; (e9f4 <restore_led_data+0x508>)
    e8fe:	621a      	str	r2, [r3, #32]
		Custom_RGB.LR = eeprom_data[5];
    e900:	4b34      	ldr	r3, [pc, #208]	; (e9d4 <restore_led_data+0x4e8>)
    e902:	795b      	ldrb	r3, [r3, #5]
    e904:	b29a      	uxth	r2, r3
    e906:	4b3d      	ldr	r3, [pc, #244]	; (e9fc <restore_led_data+0x510>)
    e908:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LR = (Custom_RGB.LR | (eeprom_data[6] << 8));
    e90a:	4b3c      	ldr	r3, [pc, #240]	; (e9fc <restore_led_data+0x510>)
    e90c:	881b      	ldrh	r3, [r3, #0]
    e90e:	b21a      	sxth	r2, r3
    e910:	4b30      	ldr	r3, [pc, #192]	; (e9d4 <restore_led_data+0x4e8>)
    e912:	799b      	ldrb	r3, [r3, #6]
    e914:	021b      	lsls	r3, r3, #8
    e916:	b21b      	sxth	r3, r3
    e918:	4313      	orrs	r3, r2
    e91a:	b21b      	sxth	r3, r3
    e91c:	b29a      	uxth	r2, r3
    e91e:	4b37      	ldr	r3, [pc, #220]	; (e9fc <restore_led_data+0x510>)
    e920:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = eeprom_data[7];
    e922:	4b2c      	ldr	r3, [pc, #176]	; (e9d4 <restore_led_data+0x4e8>)
    e924:	79db      	ldrb	r3, [r3, #7]
    e926:	b29a      	uxth	r2, r3
    e928:	4b34      	ldr	r3, [pc, #208]	; (e9fc <restore_led_data+0x510>)
    e92a:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LG = (Custom_RGB.LG | (eeprom_data[8] << 8));
    e92c:	4b33      	ldr	r3, [pc, #204]	; (e9fc <restore_led_data+0x510>)
    e92e:	885b      	ldrh	r3, [r3, #2]
    e930:	b21a      	sxth	r2, r3
    e932:	4b28      	ldr	r3, [pc, #160]	; (e9d4 <restore_led_data+0x4e8>)
    e934:	7a1b      	ldrb	r3, [r3, #8]
    e936:	021b      	lsls	r3, r3, #8
    e938:	b21b      	sxth	r3, r3
    e93a:	4313      	orrs	r3, r2
    e93c:	b21b      	sxth	r3, r3
    e93e:	b29a      	uxth	r2, r3
    e940:	4b2e      	ldr	r3, [pc, #184]	; (e9fc <restore_led_data+0x510>)
    e942:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = eeprom_data[9];
    e944:	4b23      	ldr	r3, [pc, #140]	; (e9d4 <restore_led_data+0x4e8>)
    e946:	7a5b      	ldrb	r3, [r3, #9]
    e948:	b29a      	uxth	r2, r3
    e94a:	4b2c      	ldr	r3, [pc, #176]	; (e9fc <restore_led_data+0x510>)
    e94c:	809a      	strh	r2, [r3, #4]
		Custom_RGB.LB = (Custom_RGB.LB | (eeprom_data[10] << 8));
    e94e:	4b2b      	ldr	r3, [pc, #172]	; (e9fc <restore_led_data+0x510>)
    e950:	889b      	ldrh	r3, [r3, #4]
    e952:	b21a      	sxth	r2, r3
    e954:	4b1f      	ldr	r3, [pc, #124]	; (e9d4 <restore_led_data+0x4e8>)
    e956:	7a9b      	ldrb	r3, [r3, #10]
    e958:	021b      	lsls	r3, r3, #8
    e95a:	b21b      	sxth	r3, r3
    e95c:	4313      	orrs	r3, r2
    e95e:	b21b      	sxth	r3, r3
    e960:	b29a      	uxth	r2, r3
    e962:	4b26      	ldr	r3, [pc, #152]	; (e9fc <restore_led_data+0x510>)
    e964:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = eeprom_data[11];
    e966:	4b1b      	ldr	r3, [pc, #108]	; (e9d4 <restore_led_data+0x4e8>)
    e968:	7adb      	ldrb	r3, [r3, #11]
    e96a:	b29a      	uxth	r2, r3
    e96c:	4b23      	ldr	r3, [pc, #140]	; (e9fc <restore_led_data+0x510>)
    e96e:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RR = (Custom_RGB.RR | (eeprom_data[12] << 8));
    e970:	4b22      	ldr	r3, [pc, #136]	; (e9fc <restore_led_data+0x510>)
    e972:	88db      	ldrh	r3, [r3, #6]
    e974:	b21a      	sxth	r2, r3
    e976:	4b17      	ldr	r3, [pc, #92]	; (e9d4 <restore_led_data+0x4e8>)
    e978:	7b1b      	ldrb	r3, [r3, #12]
    e97a:	021b      	lsls	r3, r3, #8
    e97c:	b21b      	sxth	r3, r3
    e97e:	4313      	orrs	r3, r2
    e980:	b21b      	sxth	r3, r3
    e982:	b29a      	uxth	r2, r3
    e984:	4b1d      	ldr	r3, [pc, #116]	; (e9fc <restore_led_data+0x510>)
    e986:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = eeprom_data[13];
    e988:	4b12      	ldr	r3, [pc, #72]	; (e9d4 <restore_led_data+0x4e8>)
    e98a:	7b5b      	ldrb	r3, [r3, #13]
    e98c:	b29a      	uxth	r2, r3
    e98e:	4b1b      	ldr	r3, [pc, #108]	; (e9fc <restore_led_data+0x510>)
    e990:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RG = (Custom_RGB.RG | (eeprom_data[14] << 8));
    e992:	4b1a      	ldr	r3, [pc, #104]	; (e9fc <restore_led_data+0x510>)
    e994:	891b      	ldrh	r3, [r3, #8]
    e996:	b21a      	sxth	r2, r3
    e998:	4b0e      	ldr	r3, [pc, #56]	; (e9d4 <restore_led_data+0x4e8>)
    e99a:	7b9b      	ldrb	r3, [r3, #14]
    e99c:	021b      	lsls	r3, r3, #8
    e99e:	b21b      	sxth	r3, r3
    e9a0:	4313      	orrs	r3, r2
    e9a2:	b21b      	sxth	r3, r3
    e9a4:	b29a      	uxth	r2, r3
    e9a6:	4b15      	ldr	r3, [pc, #84]	; (e9fc <restore_led_data+0x510>)
    e9a8:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = eeprom_data[15];
    e9aa:	4b0a      	ldr	r3, [pc, #40]	; (e9d4 <restore_led_data+0x4e8>)
    e9ac:	7bdb      	ldrb	r3, [r3, #15]
    e9ae:	b29a      	uxth	r2, r3
    e9b0:	4b12      	ldr	r3, [pc, #72]	; (e9fc <restore_led_data+0x510>)
    e9b2:	815a      	strh	r2, [r3, #10]
		Custom_RGB.RB = (Custom_RGB.RB | (eeprom_data[16] << 8));
    e9b4:	4b11      	ldr	r3, [pc, #68]	; (e9fc <restore_led_data+0x510>)
    e9b6:	895b      	ldrh	r3, [r3, #10]
    e9b8:	b21a      	sxth	r2, r3
    e9ba:	4b06      	ldr	r3, [pc, #24]	; (e9d4 <restore_led_data+0x4e8>)
    e9bc:	7c1b      	ldrb	r3, [r3, #16]
    e9be:	021b      	lsls	r3, r3, #8
    e9c0:	b21b      	sxth	r3, r3
    e9c2:	4313      	orrs	r3, r2
    e9c4:	b21b      	sxth	r3, r3
    e9c6:	b29a      	uxth	r2, r3
    e9c8:	4b0c      	ldr	r3, [pc, #48]	; (e9fc <restore_led_data+0x510>)
    e9ca:	815a      	strh	r2, [r3, #10]
	}
}
    e9cc:	46c0      	nop			; (mov r8, r8)
    e9ce:	46bd      	mov	sp, r7
    e9d0:	b01f      	add	sp, #124	; 0x7c
    e9d2:	bd90      	pop	{r4, r7, pc}
    e9d4:	200009e0 	.word	0x200009e0
    e9d8:	20000070 	.word	0x20000070
    e9dc:	2000007c 	.word	0x2000007c
    e9e0:	20000088 	.word	0x20000088
    e9e4:	00015201 	.word	0x00015201
    e9e8:	000147c9 	.word	0x000147c9
    e9ec:	42c80000 	.word	0x42c80000
    e9f0:	20000028 	.word	0x20000028
    e9f4:	2000004c 	.word	0x2000004c
    e9f8:	00008845 	.word	0x00008845
    e9fc:	20000094 	.word	0x20000094

0000ea00 <save_cal_data>:

void save_cal_data()
{
    ea00:	b580      	push	{r7, lr}
    ea02:	b082      	sub	sp, #8
    ea04:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    ea06:	2300      	movs	r3, #0
    ea08:	607b      	str	r3, [r7, #4]
    ea0a:	e005      	b.n	ea18 <save_cal_data+0x18>
		eeprom_data[0] = 0;
    ea0c:	4b44      	ldr	r3, [pc, #272]	; (eb20 <save_cal_data+0x120>)
    ea0e:	2200      	movs	r2, #0
    ea10:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    ea12:	687b      	ldr	r3, [r7, #4]
    ea14:	3301      	adds	r3, #1
    ea16:	607b      	str	r3, [r7, #4]
    ea18:	687b      	ldr	r3, [r7, #4]
    ea1a:	2b3b      	cmp	r3, #59	; 0x3b
    ea1c:	ddf6      	ble.n	ea0c <save_cal_data+0xc>
	}

	eeprom_data[0] = ((gBiasRaw[0]) & 0xFF00) >> 8;
    ea1e:	4b41      	ldr	r3, [pc, #260]	; (eb24 <save_cal_data+0x124>)
    ea20:	2200      	movs	r2, #0
    ea22:	5e9b      	ldrsh	r3, [r3, r2]
    ea24:	121b      	asrs	r3, r3, #8
    ea26:	b2da      	uxtb	r2, r3
    ea28:	4b3d      	ldr	r3, [pc, #244]	; (eb20 <save_cal_data+0x120>)
    ea2a:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ((gBiasRaw[0]) & 0xFF);
    ea2c:	4b3d      	ldr	r3, [pc, #244]	; (eb24 <save_cal_data+0x124>)
    ea2e:	2200      	movs	r2, #0
    ea30:	5e9b      	ldrsh	r3, [r3, r2]
    ea32:	b2da      	uxtb	r2, r3
    ea34:	4b3a      	ldr	r3, [pc, #232]	; (eb20 <save_cal_data+0x120>)
    ea36:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = ((gBiasRaw[1]) & 0xFF00) >> 8;
    ea38:	4b3a      	ldr	r3, [pc, #232]	; (eb24 <save_cal_data+0x124>)
    ea3a:	2202      	movs	r2, #2
    ea3c:	5e9b      	ldrsh	r3, [r3, r2]
    ea3e:	121b      	asrs	r3, r3, #8
    ea40:	b2da      	uxtb	r2, r3
    ea42:	4b37      	ldr	r3, [pc, #220]	; (eb20 <save_cal_data+0x120>)
    ea44:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = ((gBiasRaw[1]) & 0xFF);
    ea46:	4b37      	ldr	r3, [pc, #220]	; (eb24 <save_cal_data+0x124>)
    ea48:	2202      	movs	r2, #2
    ea4a:	5e9b      	ldrsh	r3, [r3, r2]
    ea4c:	b2da      	uxtb	r2, r3
    ea4e:	4b34      	ldr	r3, [pc, #208]	; (eb20 <save_cal_data+0x120>)
    ea50:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = ((gBiasRaw[2]) & 0xFF00) >> 8;
    ea52:	4b34      	ldr	r3, [pc, #208]	; (eb24 <save_cal_data+0x124>)
    ea54:	2204      	movs	r2, #4
    ea56:	5e9b      	ldrsh	r3, [r3, r2]
    ea58:	121b      	asrs	r3, r3, #8
    ea5a:	b2da      	uxtb	r2, r3
    ea5c:	4b30      	ldr	r3, [pc, #192]	; (eb20 <save_cal_data+0x120>)
    ea5e:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = ((gBiasRaw[2]) & 0xFF);
    ea60:	4b30      	ldr	r3, [pc, #192]	; (eb24 <save_cal_data+0x124>)
    ea62:	2204      	movs	r2, #4
    ea64:	5e9b      	ldrsh	r3, [r3, r2]
    ea66:	b2da      	uxtb	r2, r3
    ea68:	4b2d      	ldr	r3, [pc, #180]	; (eb20 <save_cal_data+0x120>)
    ea6a:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = ((aBiasRaw[0]) & 0xFF00) >> 8;
    ea6c:	4b2e      	ldr	r3, [pc, #184]	; (eb28 <save_cal_data+0x128>)
    ea6e:	2200      	movs	r2, #0
    ea70:	5e9b      	ldrsh	r3, [r3, r2]
    ea72:	121b      	asrs	r3, r3, #8
    ea74:	b2da      	uxtb	r2, r3
    ea76:	4b2a      	ldr	r3, [pc, #168]	; (eb20 <save_cal_data+0x120>)
    ea78:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = ((aBiasRaw[0]) & 0xFF);
    ea7a:	4b2b      	ldr	r3, [pc, #172]	; (eb28 <save_cal_data+0x128>)
    ea7c:	2200      	movs	r2, #0
    ea7e:	5e9b      	ldrsh	r3, [r3, r2]
    ea80:	b2da      	uxtb	r2, r3
    ea82:	4b27      	ldr	r3, [pc, #156]	; (eb20 <save_cal_data+0x120>)
    ea84:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = ((aBiasRaw[1]) & 0xFF00) >> 8;
    ea86:	4b28      	ldr	r3, [pc, #160]	; (eb28 <save_cal_data+0x128>)
    ea88:	2202      	movs	r2, #2
    ea8a:	5e9b      	ldrsh	r3, [r3, r2]
    ea8c:	121b      	asrs	r3, r3, #8
    ea8e:	b2da      	uxtb	r2, r3
    ea90:	4b23      	ldr	r3, [pc, #140]	; (eb20 <save_cal_data+0x120>)
    ea92:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = ((aBiasRaw[1]) & 0xFF);
    ea94:	4b24      	ldr	r3, [pc, #144]	; (eb28 <save_cal_data+0x128>)
    ea96:	2202      	movs	r2, #2
    ea98:	5e9b      	ldrsh	r3, [r3, r2]
    ea9a:	b2da      	uxtb	r2, r3
    ea9c:	4b20      	ldr	r3, [pc, #128]	; (eb20 <save_cal_data+0x120>)
    ea9e:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = ((aBiasRaw[2]) & 0xFF00) >> 8;
    eaa0:	4b21      	ldr	r3, [pc, #132]	; (eb28 <save_cal_data+0x128>)
    eaa2:	2204      	movs	r2, #4
    eaa4:	5e9b      	ldrsh	r3, [r3, r2]
    eaa6:	121b      	asrs	r3, r3, #8
    eaa8:	b2da      	uxtb	r2, r3
    eaaa:	4b1d      	ldr	r3, [pc, #116]	; (eb20 <save_cal_data+0x120>)
    eaac:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = ((aBiasRaw[2]) & 0xFF);
    eaae:	4b1e      	ldr	r3, [pc, #120]	; (eb28 <save_cal_data+0x128>)
    eab0:	2204      	movs	r2, #4
    eab2:	5e9b      	ldrsh	r3, [r3, r2]
    eab4:	b2da      	uxtb	r2, r3
    eab6:	4b1a      	ldr	r3, [pc, #104]	; (eb20 <save_cal_data+0x120>)
    eab8:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = ((mBiasRaw[0]) & 0xFF00) >> 8;
    eaba:	4b1c      	ldr	r3, [pc, #112]	; (eb2c <save_cal_data+0x12c>)
    eabc:	2200      	movs	r2, #0
    eabe:	5e9b      	ldrsh	r3, [r3, r2]
    eac0:	121b      	asrs	r3, r3, #8
    eac2:	b2da      	uxtb	r2, r3
    eac4:	4b16      	ldr	r3, [pc, #88]	; (eb20 <save_cal_data+0x120>)
    eac6:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = ((mBiasRaw[0]) & 0xFF);
    eac8:	4b18      	ldr	r3, [pc, #96]	; (eb2c <save_cal_data+0x12c>)
    eaca:	2200      	movs	r2, #0
    eacc:	5e9b      	ldrsh	r3, [r3, r2]
    eace:	b2da      	uxtb	r2, r3
    ead0:	4b13      	ldr	r3, [pc, #76]	; (eb20 <save_cal_data+0x120>)
    ead2:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = ((mBiasRaw[1]) & 0xFF00) >> 8;
    ead4:	4b15      	ldr	r3, [pc, #84]	; (eb2c <save_cal_data+0x12c>)
    ead6:	2202      	movs	r2, #2
    ead8:	5e9b      	ldrsh	r3, [r3, r2]
    eada:	121b      	asrs	r3, r3, #8
    eadc:	b2da      	uxtb	r2, r3
    eade:	4b10      	ldr	r3, [pc, #64]	; (eb20 <save_cal_data+0x120>)
    eae0:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = ((mBiasRaw[1]) & 0xFF);
    eae2:	4b12      	ldr	r3, [pc, #72]	; (eb2c <save_cal_data+0x12c>)
    eae4:	2202      	movs	r2, #2
    eae6:	5e9b      	ldrsh	r3, [r3, r2]
    eae8:	b2da      	uxtb	r2, r3
    eaea:	4b0d      	ldr	r3, [pc, #52]	; (eb20 <save_cal_data+0x120>)
    eaec:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = ((mBiasRaw[2]) & 0xFF00) >> 8;
    eaee:	4b0f      	ldr	r3, [pc, #60]	; (eb2c <save_cal_data+0x12c>)
    eaf0:	2204      	movs	r2, #4
    eaf2:	5e9b      	ldrsh	r3, [r3, r2]
    eaf4:	121b      	asrs	r3, r3, #8
    eaf6:	b2da      	uxtb	r2, r3
    eaf8:	4b09      	ldr	r3, [pc, #36]	; (eb20 <save_cal_data+0x120>)
    eafa:	741a      	strb	r2, [r3, #16]
	eeprom_data[17] = ((mBiasRaw[2]) & 0xFF);
    eafc:	4b0b      	ldr	r3, [pc, #44]	; (eb2c <save_cal_data+0x12c>)
    eafe:	2204      	movs	r2, #4
    eb00:	5e9b      	ldrsh	r3, [r3, r2]
    eb02:	b2da      	uxtb	r2, r3
    eb04:	4b06      	ldr	r3, [pc, #24]	; (eb20 <save_cal_data+0x120>)
    eb06:	745a      	strb	r2, [r3, #17]

	//Write EEPROM data
	eeprom_emulator_write_page(2, eeprom_data);
    eb08:	4b05      	ldr	r3, [pc, #20]	; (eb20 <save_cal_data+0x120>)
    eb0a:	0019      	movs	r1, r3
    eb0c:	2002      	movs	r0, #2
    eb0e:	4b08      	ldr	r3, [pc, #32]	; (eb30 <save_cal_data+0x130>)
    eb10:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    eb12:	4b08      	ldr	r3, [pc, #32]	; (eb34 <save_cal_data+0x134>)
    eb14:	4798      	blx	r3
}
    eb16:	46c0      	nop			; (mov r8, r8)
    eb18:	46bd      	mov	sp, r7
    eb1a:	b002      	add	sp, #8
    eb1c:	bd80      	pop	{r7, pc}
    eb1e:	46c0      	nop			; (mov r8, r8)
    eb20:	200009e0 	.word	0x200009e0
    eb24:	20000c9c 	.word	0x20000c9c
    eb28:	20000ca4 	.word	0x20000ca4
    eb2c:	20000498 	.word	0x20000498
    eb30:	00008739 	.word	0x00008739
    eb34:	000088e1 	.word	0x000088e1

0000eb38 <restore_cal_data>:

void restore_cal_data(bool autoCal)
{
    eb38:	b580      	push	{r7, lr}
    eb3a:	b084      	sub	sp, #16
    eb3c:	af00      	add	r7, sp, #0
    eb3e:	0002      	movs	r2, r0
    eb40:	1dfb      	adds	r3, r7, #7
    eb42:	701a      	strb	r2, [r3, #0]
	eeprom_emulator_read_page(2, eeprom_data);
    eb44:	4b63      	ldr	r3, [pc, #396]	; (ecd4 <restore_cal_data+0x19c>)
    eb46:	0019      	movs	r1, r3
    eb48:	2002      	movs	r0, #2
    eb4a:	4b63      	ldr	r3, [pc, #396]	; (ecd8 <restore_cal_data+0x1a0>)
    eb4c:	4798      	blx	r3
	int16_t temp = 0;
    eb4e:	230e      	movs	r3, #14
    eb50:	18fb      	adds	r3, r7, r3
    eb52:	2200      	movs	r2, #0
    eb54:	801a      	strh	r2, [r3, #0]

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    eb56:	4b5f      	ldr	r3, [pc, #380]	; (ecd4 <restore_cal_data+0x19c>)
    eb58:	781b      	ldrb	r3, [r3, #0]
    eb5a:	2bff      	cmp	r3, #255	; 0xff
    eb5c:	d121      	bne.n	eba2 <restore_cal_data+0x6a>
    eb5e:	4b5d      	ldr	r3, [pc, #372]	; (ecd4 <restore_cal_data+0x19c>)
    eb60:	785b      	ldrb	r3, [r3, #1]
    eb62:	2bff      	cmp	r3, #255	; 0xff
    eb64:	d11d      	bne.n	eba2 <restore_cal_data+0x6a>
		gBiasRaw[0] = 0;
    eb66:	4b5d      	ldr	r3, [pc, #372]	; (ecdc <restore_cal_data+0x1a4>)
    eb68:	2200      	movs	r2, #0
    eb6a:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = 0;
    eb6c:	4b5b      	ldr	r3, [pc, #364]	; (ecdc <restore_cal_data+0x1a4>)
    eb6e:	2200      	movs	r2, #0
    eb70:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = 0;
    eb72:	4b5a      	ldr	r3, [pc, #360]	; (ecdc <restore_cal_data+0x1a4>)
    eb74:	2200      	movs	r2, #0
    eb76:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = 0;
    eb78:	4b59      	ldr	r3, [pc, #356]	; (ece0 <restore_cal_data+0x1a8>)
    eb7a:	2200      	movs	r2, #0
    eb7c:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = 0;
    eb7e:	4b58      	ldr	r3, [pc, #352]	; (ece0 <restore_cal_data+0x1a8>)
    eb80:	2200      	movs	r2, #0
    eb82:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = 0;
    eb84:	4b56      	ldr	r3, [pc, #344]	; (ece0 <restore_cal_data+0x1a8>)
    eb86:	2200      	movs	r2, #0
    eb88:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = 0;
    eb8a:	4b56      	ldr	r3, [pc, #344]	; (ece4 <restore_cal_data+0x1ac>)
    eb8c:	2200      	movs	r2, #0
    eb8e:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = 0;
    eb90:	4b54      	ldr	r3, [pc, #336]	; (ece4 <restore_cal_data+0x1ac>)
    eb92:	2200      	movs	r2, #0
    eb94:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = 0;
    eb96:	4b53      	ldr	r3, [pc, #332]	; (ece4 <restore_cal_data+0x1ac>)
    eb98:	2200      	movs	r2, #0
    eb9a:	809a      	strh	r2, [r3, #4]

		save_cal_data();
    eb9c:	4b52      	ldr	r3, [pc, #328]	; (ece8 <restore_cal_data+0x1b0>)
    eb9e:	4798      	blx	r3
    eba0:	e08f      	b.n	ecc2 <restore_cal_data+0x18a>
	}
	else{ // else restore the stored data
		gBiasRaw[0] = (temp | (eeprom_data[0] << 8) | eeprom_data[1]);
    eba2:	4b4c      	ldr	r3, [pc, #304]	; (ecd4 <restore_cal_data+0x19c>)
    eba4:	781b      	ldrb	r3, [r3, #0]
    eba6:	021b      	lsls	r3, r3, #8
    eba8:	b21a      	sxth	r2, r3
    ebaa:	230e      	movs	r3, #14
    ebac:	18fb      	adds	r3, r7, r3
    ebae:	881b      	ldrh	r3, [r3, #0]
    ebb0:	4313      	orrs	r3, r2
    ebb2:	b21a      	sxth	r2, r3
    ebb4:	4b47      	ldr	r3, [pc, #284]	; (ecd4 <restore_cal_data+0x19c>)
    ebb6:	785b      	ldrb	r3, [r3, #1]
    ebb8:	b21b      	sxth	r3, r3
    ebba:	4313      	orrs	r3, r2
    ebbc:	b21a      	sxth	r2, r3
    ebbe:	4b47      	ldr	r3, [pc, #284]	; (ecdc <restore_cal_data+0x1a4>)
    ebc0:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = (temp | (eeprom_data[2] << 8) | eeprom_data[3]);
    ebc2:	4b44      	ldr	r3, [pc, #272]	; (ecd4 <restore_cal_data+0x19c>)
    ebc4:	789b      	ldrb	r3, [r3, #2]
    ebc6:	021b      	lsls	r3, r3, #8
    ebc8:	b21a      	sxth	r2, r3
    ebca:	230e      	movs	r3, #14
    ebcc:	18fb      	adds	r3, r7, r3
    ebce:	881b      	ldrh	r3, [r3, #0]
    ebd0:	4313      	orrs	r3, r2
    ebd2:	b21a      	sxth	r2, r3
    ebd4:	4b3f      	ldr	r3, [pc, #252]	; (ecd4 <restore_cal_data+0x19c>)
    ebd6:	78db      	ldrb	r3, [r3, #3]
    ebd8:	b21b      	sxth	r3, r3
    ebda:	4313      	orrs	r3, r2
    ebdc:	b21a      	sxth	r2, r3
    ebde:	4b3f      	ldr	r3, [pc, #252]	; (ecdc <restore_cal_data+0x1a4>)
    ebe0:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = (temp | (eeprom_data[4] << 8) | eeprom_data[5]);
    ebe2:	4b3c      	ldr	r3, [pc, #240]	; (ecd4 <restore_cal_data+0x19c>)
    ebe4:	791b      	ldrb	r3, [r3, #4]
    ebe6:	021b      	lsls	r3, r3, #8
    ebe8:	b21a      	sxth	r2, r3
    ebea:	230e      	movs	r3, #14
    ebec:	18fb      	adds	r3, r7, r3
    ebee:	881b      	ldrh	r3, [r3, #0]
    ebf0:	4313      	orrs	r3, r2
    ebf2:	b21a      	sxth	r2, r3
    ebf4:	4b37      	ldr	r3, [pc, #220]	; (ecd4 <restore_cal_data+0x19c>)
    ebf6:	795b      	ldrb	r3, [r3, #5]
    ebf8:	b21b      	sxth	r3, r3
    ebfa:	4313      	orrs	r3, r2
    ebfc:	b21a      	sxth	r2, r3
    ebfe:	4b37      	ldr	r3, [pc, #220]	; (ecdc <restore_cal_data+0x1a4>)
    ec00:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = (temp | (eeprom_data[6] << 8) | eeprom_data[7]);
    ec02:	4b34      	ldr	r3, [pc, #208]	; (ecd4 <restore_cal_data+0x19c>)
    ec04:	799b      	ldrb	r3, [r3, #6]
    ec06:	021b      	lsls	r3, r3, #8
    ec08:	b21a      	sxth	r2, r3
    ec0a:	230e      	movs	r3, #14
    ec0c:	18fb      	adds	r3, r7, r3
    ec0e:	881b      	ldrh	r3, [r3, #0]
    ec10:	4313      	orrs	r3, r2
    ec12:	b21a      	sxth	r2, r3
    ec14:	4b2f      	ldr	r3, [pc, #188]	; (ecd4 <restore_cal_data+0x19c>)
    ec16:	79db      	ldrb	r3, [r3, #7]
    ec18:	b21b      	sxth	r3, r3
    ec1a:	4313      	orrs	r3, r2
    ec1c:	b21a      	sxth	r2, r3
    ec1e:	4b30      	ldr	r3, [pc, #192]	; (ece0 <restore_cal_data+0x1a8>)
    ec20:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = (temp | (eeprom_data[8] << 8) | eeprom_data[9]);
    ec22:	4b2c      	ldr	r3, [pc, #176]	; (ecd4 <restore_cal_data+0x19c>)
    ec24:	7a1b      	ldrb	r3, [r3, #8]
    ec26:	021b      	lsls	r3, r3, #8
    ec28:	b21a      	sxth	r2, r3
    ec2a:	230e      	movs	r3, #14
    ec2c:	18fb      	adds	r3, r7, r3
    ec2e:	881b      	ldrh	r3, [r3, #0]
    ec30:	4313      	orrs	r3, r2
    ec32:	b21a      	sxth	r2, r3
    ec34:	4b27      	ldr	r3, [pc, #156]	; (ecd4 <restore_cal_data+0x19c>)
    ec36:	7a5b      	ldrb	r3, [r3, #9]
    ec38:	b21b      	sxth	r3, r3
    ec3a:	4313      	orrs	r3, r2
    ec3c:	b21a      	sxth	r2, r3
    ec3e:	4b28      	ldr	r3, [pc, #160]	; (ece0 <restore_cal_data+0x1a8>)
    ec40:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = (temp | (eeprom_data[10] << 8) | eeprom_data[11]);
    ec42:	4b24      	ldr	r3, [pc, #144]	; (ecd4 <restore_cal_data+0x19c>)
    ec44:	7a9b      	ldrb	r3, [r3, #10]
    ec46:	021b      	lsls	r3, r3, #8
    ec48:	b21a      	sxth	r2, r3
    ec4a:	230e      	movs	r3, #14
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	881b      	ldrh	r3, [r3, #0]
    ec50:	4313      	orrs	r3, r2
    ec52:	b21a      	sxth	r2, r3
    ec54:	4b1f      	ldr	r3, [pc, #124]	; (ecd4 <restore_cal_data+0x19c>)
    ec56:	7adb      	ldrb	r3, [r3, #11]
    ec58:	b21b      	sxth	r3, r3
    ec5a:	4313      	orrs	r3, r2
    ec5c:	b21a      	sxth	r2, r3
    ec5e:	4b20      	ldr	r3, [pc, #128]	; (ece0 <restore_cal_data+0x1a8>)
    ec60:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = (temp | (eeprom_data[12] << 8) | eeprom_data[13]);
    ec62:	4b1c      	ldr	r3, [pc, #112]	; (ecd4 <restore_cal_data+0x19c>)
    ec64:	7b1b      	ldrb	r3, [r3, #12]
    ec66:	021b      	lsls	r3, r3, #8
    ec68:	b21a      	sxth	r2, r3
    ec6a:	230e      	movs	r3, #14
    ec6c:	18fb      	adds	r3, r7, r3
    ec6e:	881b      	ldrh	r3, [r3, #0]
    ec70:	4313      	orrs	r3, r2
    ec72:	b21a      	sxth	r2, r3
    ec74:	4b17      	ldr	r3, [pc, #92]	; (ecd4 <restore_cal_data+0x19c>)
    ec76:	7b5b      	ldrb	r3, [r3, #13]
    ec78:	b21b      	sxth	r3, r3
    ec7a:	4313      	orrs	r3, r2
    ec7c:	b21a      	sxth	r2, r3
    ec7e:	4b19      	ldr	r3, [pc, #100]	; (ece4 <restore_cal_data+0x1ac>)
    ec80:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = (temp | (eeprom_data[14] << 8) | eeprom_data[15]);
    ec82:	4b14      	ldr	r3, [pc, #80]	; (ecd4 <restore_cal_data+0x19c>)
    ec84:	7b9b      	ldrb	r3, [r3, #14]
    ec86:	021b      	lsls	r3, r3, #8
    ec88:	b21a      	sxth	r2, r3
    ec8a:	230e      	movs	r3, #14
    ec8c:	18fb      	adds	r3, r7, r3
    ec8e:	881b      	ldrh	r3, [r3, #0]
    ec90:	4313      	orrs	r3, r2
    ec92:	b21a      	sxth	r2, r3
    ec94:	4b0f      	ldr	r3, [pc, #60]	; (ecd4 <restore_cal_data+0x19c>)
    ec96:	7bdb      	ldrb	r3, [r3, #15]
    ec98:	b21b      	sxth	r3, r3
    ec9a:	4313      	orrs	r3, r2
    ec9c:	b21a      	sxth	r2, r3
    ec9e:	4b11      	ldr	r3, [pc, #68]	; (ece4 <restore_cal_data+0x1ac>)
    eca0:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = (temp | (eeprom_data[16] << 8) | eeprom_data[17]);
    eca2:	4b0c      	ldr	r3, [pc, #48]	; (ecd4 <restore_cal_data+0x19c>)
    eca4:	7c1b      	ldrb	r3, [r3, #16]
    eca6:	021b      	lsls	r3, r3, #8
    eca8:	b21a      	sxth	r2, r3
    ecaa:	230e      	movs	r3, #14
    ecac:	18fb      	adds	r3, r7, r3
    ecae:	881b      	ldrh	r3, [r3, #0]
    ecb0:	4313      	orrs	r3, r2
    ecb2:	b21a      	sxth	r2, r3
    ecb4:	4b07      	ldr	r3, [pc, #28]	; (ecd4 <restore_cal_data+0x19c>)
    ecb6:	7c5b      	ldrb	r3, [r3, #17]
    ecb8:	b21b      	sxth	r3, r3
    ecba:	4313      	orrs	r3, r2
    ecbc:	b21a      	sxth	r2, r3
    ecbe:	4b09      	ldr	r3, [pc, #36]	; (ece4 <restore_cal_data+0x1ac>)
    ecc0:	809a      	strh	r2, [r3, #4]
	}
	
	_autoCalc = autoCal;
    ecc2:	4b0a      	ldr	r3, [pc, #40]	; (ecec <restore_cal_data+0x1b4>)
    ecc4:	1dfa      	adds	r2, r7, #7
    ecc6:	7812      	ldrb	r2, [r2, #0]
    ecc8:	701a      	strb	r2, [r3, #0]
}
    ecca:	46c0      	nop			; (mov r8, r8)
    eccc:	46bd      	mov	sp, r7
    ecce:	b004      	add	sp, #16
    ecd0:	bd80      	pop	{r7, pc}
    ecd2:	46c0      	nop			; (mov r8, r8)
    ecd4:	200009e0 	.word	0x200009e0
    ecd8:	00008845 	.word	0x00008845
    ecdc:	20000c9c 	.word	0x20000c9c
    ece0:	20000ca4 	.word	0x20000ca4
    ece4:	20000498 	.word	0x20000498
    ece8:	0000ea01 	.word	0x0000ea01
    ecec:	20000908 	.word	0x20000908

0000ecf0 <save_orientation_controls_remote_esc>:

void save_orientation_controls_remote_esc()
{
    ecf0:	b580      	push	{r7, lr}
    ecf2:	b082      	sub	sp, #8
    ecf4:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    ecf6:	2300      	movs	r3, #0
    ecf8:	607b      	str	r3, [r7, #4]
    ecfa:	e005      	b.n	ed08 <save_orientation_controls_remote_esc+0x18>
		eeprom_data[0] = 0;
    ecfc:	4b42      	ldr	r3, [pc, #264]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ecfe:	2200      	movs	r2, #0
    ed00:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    ed02:	687b      	ldr	r3, [r7, #4]
    ed04:	3301      	adds	r3, #1
    ed06:	607b      	str	r3, [r7, #4]
    ed08:	687b      	ldr	r3, [r7, #4]
    ed0a:	2b3b      	cmp	r3, #59	; 0x3b
    ed0c:	ddf6      	ble.n	ecfc <save_orientation_controls_remote_esc+0xc>
	}

	eeprom_data[0] = ORIENTATION[0];
    ed0e:	4b3f      	ldr	r3, [pc, #252]	; (ee0c <save_orientation_controls_remote_esc+0x11c>)
    ed10:	781a      	ldrb	r2, [r3, #0]
    ed12:	4b3d      	ldr	r3, [pc, #244]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed14:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ORIENTATION[1];
    ed16:	4b3d      	ldr	r3, [pc, #244]	; (ee0c <save_orientation_controls_remote_esc+0x11c>)
    ed18:	785a      	ldrb	r2, [r3, #1]
    ed1a:	4b3b      	ldr	r3, [pc, #236]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed1c:	705a      	strb	r2, [r3, #1]

	eeprom_data[2] = ((AUX_ENABLED << 1) | TURN_ENABLED);
    ed1e:	4b3c      	ldr	r3, [pc, #240]	; (ee10 <save_orientation_controls_remote_esc+0x120>)
    ed20:	781b      	ldrb	r3, [r3, #0]
    ed22:	005b      	lsls	r3, r3, #1
    ed24:	b25a      	sxtb	r2, r3
    ed26:	4b3b      	ldr	r3, [pc, #236]	; (ee14 <save_orientation_controls_remote_esc+0x124>)
    ed28:	781b      	ldrb	r3, [r3, #0]
    ed2a:	b25b      	sxtb	r3, r3
    ed2c:	4313      	orrs	r3, r2
    ed2e:	b25b      	sxtb	r3, r3
    ed30:	b2da      	uxtb	r2, r3
    ed32:	4b35      	ldr	r3, [pc, #212]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed34:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = auxControlType;
    ed36:	4b38      	ldr	r3, [pc, #224]	; (ee18 <save_orientation_controls_remote_esc+0x128>)
    ed38:	781a      	ldrb	r2, [r3, #0]
    ed3a:	4b33      	ldr	r3, [pc, #204]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed3c:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = auxTimedDuration;
    ed3e:	4b37      	ldr	r3, [pc, #220]	; (ee1c <save_orientation_controls_remote_esc+0x12c>)
    ed40:	781a      	ldrb	r2, [r3, #0]
    ed42:	4b31      	ldr	r3, [pc, #196]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed44:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = single_aux_control;
    ed46:	4b36      	ldr	r3, [pc, #216]	; (ee20 <save_orientation_controls_remote_esc+0x130>)
    ed48:	781a      	ldrb	r2, [r3, #0]
    ed4a:	4b2f      	ldr	r3, [pc, #188]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed4c:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = single_all_control;
    ed4e:	4b35      	ldr	r3, [pc, #212]	; (ee24 <save_orientation_controls_remote_esc+0x134>)
    ed50:	781a      	ldrb	r2, [r3, #0]
    ed52:	4b2d      	ldr	r3, [pc, #180]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed54:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = single_head_control;
    ed56:	4b34      	ldr	r3, [pc, #208]	; (ee28 <save_orientation_controls_remote_esc+0x138>)
    ed58:	781a      	ldrb	r2, [r3, #0]
    ed5a:	4b2b      	ldr	r3, [pc, #172]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed5c:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = single_side_control;
    ed5e:	4b33      	ldr	r3, [pc, #204]	; (ee2c <save_orientation_controls_remote_esc+0x13c>)
    ed60:	781a      	ldrb	r2, [r3, #0]
    ed62:	4b29      	ldr	r3, [pc, #164]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed64:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = single_up_control;
    ed66:	4b32      	ldr	r3, [pc, #200]	; (ee30 <save_orientation_controls_remote_esc+0x140>)
    ed68:	781a      	ldrb	r2, [r3, #0]
    ed6a:	4b27      	ldr	r3, [pc, #156]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed6c:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = single_down_control;
    ed6e:	4b31      	ldr	r3, [pc, #196]	; (ee34 <save_orientation_controls_remote_esc+0x144>)
    ed70:	781a      	ldrb	r2, [r3, #0]
    ed72:	4b25      	ldr	r3, [pc, #148]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed74:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = dual_aux_control;
    ed76:	4b30      	ldr	r3, [pc, #192]	; (ee38 <save_orientation_controls_remote_esc+0x148>)
    ed78:	781a      	ldrb	r2, [r3, #0]
    ed7a:	4b23      	ldr	r3, [pc, #140]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed7c:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = dual_all_control;
    ed7e:	4b2f      	ldr	r3, [pc, #188]	; (ee3c <save_orientation_controls_remote_esc+0x14c>)
    ed80:	781a      	ldrb	r2, [r3, #0]
    ed82:	4b21      	ldr	r3, [pc, #132]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed84:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = dual_head_control;
    ed86:	4b2e      	ldr	r3, [pc, #184]	; (ee40 <save_orientation_controls_remote_esc+0x150>)
    ed88:	781a      	ldrb	r2, [r3, #0]
    ed8a:	4b1f      	ldr	r3, [pc, #124]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed8c:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = dual_side_control;
    ed8e:	4b2d      	ldr	r3, [pc, #180]	; (ee44 <save_orientation_controls_remote_esc+0x154>)
    ed90:	781a      	ldrb	r2, [r3, #0]
    ed92:	4b1d      	ldr	r3, [pc, #116]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed94:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = dual_up_control;
    ed96:	4b2c      	ldr	r3, [pc, #176]	; (ee48 <save_orientation_controls_remote_esc+0x158>)
    ed98:	781a      	ldrb	r2, [r3, #0]
    ed9a:	4b1b      	ldr	r3, [pc, #108]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    ed9c:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = dual_down_control;
    ed9e:	4b2b      	ldr	r3, [pc, #172]	; (ee4c <save_orientation_controls_remote_esc+0x15c>)
    eda0:	781a      	ldrb	r2, [r3, #0]
    eda2:	4b19      	ldr	r3, [pc, #100]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    eda4:	741a      	strb	r2, [r3, #16]

	eeprom_data[17] = ((remote_type << 4) | (button_type & 0x0F));
    eda6:	4b2a      	ldr	r3, [pc, #168]	; (ee50 <save_orientation_controls_remote_esc+0x160>)
    eda8:	781b      	ldrb	r3, [r3, #0]
    edaa:	011b      	lsls	r3, r3, #4
    edac:	b25a      	sxtb	r2, r3
    edae:	4b29      	ldr	r3, [pc, #164]	; (ee54 <save_orientation_controls_remote_esc+0x164>)
    edb0:	781b      	ldrb	r3, [r3, #0]
    edb2:	b25b      	sxtb	r3, r3
    edb4:	210f      	movs	r1, #15
    edb6:	400b      	ands	r3, r1
    edb8:	b25b      	sxtb	r3, r3
    edba:	4313      	orrs	r3, r2
    edbc:	b25b      	sxtb	r3, r3
    edbe:	b2da      	uxtb	r2, r3
    edc0:	4b11      	ldr	r3, [pc, #68]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    edc2:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = deadzone;
    edc4:	4b24      	ldr	r3, [pc, #144]	; (ee58 <save_orientation_controls_remote_esc+0x168>)
    edc6:	781a      	ldrb	r2, [r3, #0]
    edc8:	4b0f      	ldr	r3, [pc, #60]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    edca:	749a      	strb	r2, [r3, #18]
	
	eeprom_data[19] = esc_fw;
    edcc:	4b23      	ldr	r3, [pc, #140]	; (ee5c <save_orientation_controls_remote_esc+0x16c>)
    edce:	781a      	ldrb	r2, [r3, #0]
    edd0:	4b0d      	ldr	r3, [pc, #52]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    edd2:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = ((esc_comms << 4) | (UART_baud & 0x0F));//*/
    edd4:	4b22      	ldr	r3, [pc, #136]	; (ee60 <save_orientation_controls_remote_esc+0x170>)
    edd6:	781b      	ldrb	r3, [r3, #0]
    edd8:	011b      	lsls	r3, r3, #4
    edda:	b25a      	sxtb	r2, r3
    eddc:	4b21      	ldr	r3, [pc, #132]	; (ee64 <save_orientation_controls_remote_esc+0x174>)
    edde:	781b      	ldrb	r3, [r3, #0]
    ede0:	b25b      	sxtb	r3, r3
    ede2:	210f      	movs	r1, #15
    ede4:	400b      	ands	r3, r1
    ede6:	b25b      	sxtb	r3, r3
    ede8:	4313      	orrs	r3, r2
    edea:	b25b      	sxtb	r3, r3
    edec:	b2da      	uxtb	r2, r3
    edee:	4b06      	ldr	r3, [pc, #24]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    edf0:	751a      	strb	r2, [r3, #20]

	//Write EEPROM data
	eeprom_emulator_write_page(3, eeprom_data);
    edf2:	4b05      	ldr	r3, [pc, #20]	; (ee08 <save_orientation_controls_remote_esc+0x118>)
    edf4:	0019      	movs	r1, r3
    edf6:	2003      	movs	r0, #3
    edf8:	4b1b      	ldr	r3, [pc, #108]	; (ee68 <save_orientation_controls_remote_esc+0x178>)
    edfa:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    edfc:	4b1b      	ldr	r3, [pc, #108]	; (ee6c <save_orientation_controls_remote_esc+0x17c>)
    edfe:	4798      	blx	r3
}
    ee00:	46c0      	nop			; (mov r8, r8)
    ee02:	46bd      	mov	sp, r7
    ee04:	b002      	add	sp, #8
    ee06:	bd80      	pop	{r7, pc}
    ee08:	200009e0 	.word	0x200009e0
    ee0c:	20000004 	.word	0x20000004
    ee10:	20000375 	.word	0x20000375
    ee14:	20000376 	.word	0x20000376
    ee18:	20000378 	.word	0x20000378
    ee1c:	20000379 	.word	0x20000379
    ee20:	2000037a 	.word	0x2000037a
    ee24:	2000037b 	.word	0x2000037b
    ee28:	2000037c 	.word	0x2000037c
    ee2c:	2000037d 	.word	0x2000037d
    ee30:	2000037e 	.word	0x2000037e
    ee34:	2000037f 	.word	0x2000037f
    ee38:	20000380 	.word	0x20000380
    ee3c:	20000381 	.word	0x20000381
    ee40:	20000382 	.word	0x20000382
    ee44:	20000383 	.word	0x20000383
    ee48:	20000384 	.word	0x20000384
    ee4c:	20000385 	.word	0x20000385
    ee50:	20000308 	.word	0x20000308
    ee54:	20000309 	.word	0x20000309
    ee58:	20000018 	.word	0x20000018
    ee5c:	2000001a 	.word	0x2000001a
    ee60:	20000310 	.word	0x20000310
    ee64:	20000311 	.word	0x20000311
    ee68:	00008739 	.word	0x00008739
    ee6c:	000088e1 	.word	0x000088e1

0000ee70 <restore_orientation_controls_remote_esc>:

void restore_orientation_controls_remote_esc()
{
    ee70:	b580      	push	{r7, lr}
    ee72:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(3, eeprom_data);
    ee74:	4b68      	ldr	r3, [pc, #416]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ee76:	0019      	movs	r1, r3
    ee78:	2003      	movs	r0, #3
    ee7a:	4b68      	ldr	r3, [pc, #416]	; (f01c <restore_orientation_controls_remote_esc+0x1ac>)
    ee7c:	4798      	blx	r3

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    ee7e:	4b66      	ldr	r3, [pc, #408]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ee80:	781b      	ldrb	r3, [r3, #0]
    ee82:	2bff      	cmp	r3, #255	; 0xff
    ee84:	d14e      	bne.n	ef24 <restore_orientation_controls_remote_esc+0xb4>
    ee86:	4b64      	ldr	r3, [pc, #400]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ee88:	785b      	ldrb	r3, [r3, #1]
    ee8a:	2bff      	cmp	r3, #255	; 0xff
    ee8c:	d14a      	bne.n	ef24 <restore_orientation_controls_remote_esc+0xb4>
		ORIENTATION[0] = 1; // Connectors up
    ee8e:	4b64      	ldr	r3, [pc, #400]	; (f020 <restore_orientation_controls_remote_esc+0x1b0>)
    ee90:	2201      	movs	r2, #1
    ee92:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = 6; // Power front
    ee94:	4b62      	ldr	r3, [pc, #392]	; (f020 <restore_orientation_controls_remote_esc+0x1b0>)
    ee96:	2206      	movs	r2, #6
    ee98:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = 0; // Aux disabled
    ee9a:	4b62      	ldr	r3, [pc, #392]	; (f024 <restore_orientation_controls_remote_esc+0x1b4>)
    ee9c:	2200      	movs	r2, #0
    ee9e:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = 0; // Turn disabled
    eea0:	4b61      	ldr	r3, [pc, #388]	; (f028 <restore_orientation_controls_remote_esc+0x1b8>)
    eea2:	2200      	movs	r2, #0
    eea4:	701a      	strb	r2, [r3, #0]
		auxControlType = AUX_MOMENTARY;
    eea6:	4b61      	ldr	r3, [pc, #388]	; (f02c <restore_orientation_controls_remote_esc+0x1bc>)
    eea8:	2200      	movs	r2, #0
    eeaa:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = 10; // 1 second
    eeac:	4b60      	ldr	r3, [pc, #384]	; (f030 <restore_orientation_controls_remote_esc+0x1c0>)
    eeae:	220a      	movs	r2, #10
    eeb0:	701a      	strb	r2, [r3, #0]
		single_aux_control = PRESS_NONE;
    eeb2:	4b60      	ldr	r3, [pc, #384]	; (f034 <restore_orientation_controls_remote_esc+0x1c4>)
    eeb4:	2200      	movs	r2, #0
    eeb6:	701a      	strb	r2, [r3, #0]
		single_all_control = SINGLE_TAP;
    eeb8:	4b5f      	ldr	r3, [pc, #380]	; (f038 <restore_orientation_controls_remote_esc+0x1c8>)
    eeba:	2201      	movs	r2, #1
    eebc:	701a      	strb	r2, [r3, #0]
		single_head_control = MEDIUM_PRESS;
    eebe:	4b5f      	ldr	r3, [pc, #380]	; (f03c <restore_orientation_controls_remote_esc+0x1cc>)
    eec0:	2206      	movs	r2, #6
    eec2:	701a      	strb	r2, [r3, #0]
		single_side_control = LONG_PRESS;
    eec4:	4b5e      	ldr	r3, [pc, #376]	; (f040 <restore_orientation_controls_remote_esc+0x1d0>)
    eec6:	2207      	movs	r2, #7
    eec8:	701a      	strb	r2, [r3, #0]
		single_up_control = DOUBLE_TAP;
    eeca:	4b5e      	ldr	r3, [pc, #376]	; (f044 <restore_orientation_controls_remote_esc+0x1d4>)
    eecc:	2202      	movs	r2, #2
    eece:	701a      	strb	r2, [r3, #0]
		single_down_control = TRIPLE_TAP;
    eed0:	4b5d      	ldr	r3, [pc, #372]	; (f048 <restore_orientation_controls_remote_esc+0x1d8>)
    eed2:	2203      	movs	r2, #3
    eed4:	701a      	strb	r2, [r3, #0]
		dual_aux_control = PRESS_NONE;
    eed6:	4b5d      	ldr	r3, [pc, #372]	; (f04c <restore_orientation_controls_remote_esc+0x1dc>)
    eed8:	2200      	movs	r2, #0
    eeda:	701a      	strb	r2, [r3, #0]
		dual_all_control = SINGLE_TAP;
    eedc:	4b5c      	ldr	r3, [pc, #368]	; (f050 <restore_orientation_controls_remote_esc+0x1e0>)
    eede:	2201      	movs	r2, #1
    eee0:	701a      	strb	r2, [r3, #0]
		dual_head_control = MEDIUM_PRESS;
    eee2:	4b5c      	ldr	r3, [pc, #368]	; (f054 <restore_orientation_controls_remote_esc+0x1e4>)
    eee4:	2206      	movs	r2, #6
    eee6:	701a      	strb	r2, [r3, #0]
		dual_side_control = LONG_PRESS;
    eee8:	4b5b      	ldr	r3, [pc, #364]	; (f058 <restore_orientation_controls_remote_esc+0x1e8>)
    eeea:	2207      	movs	r2, #7
    eeec:	701a      	strb	r2, [r3, #0]
		dual_up_control =  RIGHT_TAP;
    eeee:	4b5b      	ldr	r3, [pc, #364]	; (f05c <restore_orientation_controls_remote_esc+0x1ec>)
    eef0:	2205      	movs	r2, #5
    eef2:	701a      	strb	r2, [r3, #0]
		dual_down_control = LEFT_TAP;
    eef4:	4b5a      	ldr	r3, [pc, #360]	; (f060 <restore_orientation_controls_remote_esc+0x1f0>)
    eef6:	2204      	movs	r2, #4
    eef8:	701a      	strb	r2, [r3, #0]

		remote_type = 0;
    eefa:	4b5a      	ldr	r3, [pc, #360]	; (f064 <restore_orientation_controls_remote_esc+0x1f4>)
    eefc:	2200      	movs	r2, #0
    eefe:	701a      	strb	r2, [r3, #0]
		deadzone = 10;
    ef00:	4b59      	ldr	r3, [pc, #356]	; (f068 <restore_orientation_controls_remote_esc+0x1f8>)
    ef02:	220a      	movs	r2, #10
    ef04:	701a      	strb	r2, [r3, #0]
		button_type = 1;
    ef06:	4b59      	ldr	r3, [pc, #356]	; (f06c <restore_orientation_controls_remote_esc+0x1fc>)
    ef08:	2201      	movs	r2, #1
    ef0a:	701a      	strb	r2, [r3, #0]

		esc_fw = FW_3v00; // Set 3.0 as the default FW to prevent bricking any ESCs
    ef0c:	4b58      	ldr	r3, [pc, #352]	; (f070 <restore_orientation_controls_remote_esc+0x200>)
    ef0e:	2201      	movs	r2, #1
    ef10:	701a      	strb	r2, [r3, #0]
		esc_comms = 2;
    ef12:	4b58      	ldr	r3, [pc, #352]	; (f074 <restore_orientation_controls_remote_esc+0x204>)
    ef14:	2202      	movs	r2, #2
    ef16:	701a      	strb	r2, [r3, #0]
		UART_baud = 3;
    ef18:	4b57      	ldr	r3, [pc, #348]	; (f078 <restore_orientation_controls_remote_esc+0x208>)
    ef1a:	2203      	movs	r2, #3
    ef1c:	701a      	strb	r2, [r3, #0]

		save_orientation_controls_remote_esc();
    ef1e:	4b57      	ldr	r3, [pc, #348]	; (f07c <restore_orientation_controls_remote_esc+0x20c>)
    ef20:	4798      	blx	r3
    ef22:	e075      	b.n	f010 <restore_orientation_controls_remote_esc+0x1a0>
	}
	else { // else restore the stored data
		ORIENTATION[0] = eeprom_data[0];
    ef24:	4b3c      	ldr	r3, [pc, #240]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef26:	781a      	ldrb	r2, [r3, #0]
    ef28:	4b3d      	ldr	r3, [pc, #244]	; (f020 <restore_orientation_controls_remote_esc+0x1b0>)
    ef2a:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = eeprom_data[1];
    ef2c:	4b3a      	ldr	r3, [pc, #232]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef2e:	785a      	ldrb	r2, [r3, #1]
    ef30:	4b3b      	ldr	r3, [pc, #236]	; (f020 <restore_orientation_controls_remote_esc+0x1b0>)
    ef32:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = (eeprom_data[2] & 0x02) >> 1;
    ef34:	4b38      	ldr	r3, [pc, #224]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef36:	789b      	ldrb	r3, [r3, #2]
    ef38:	105b      	asrs	r3, r3, #1
    ef3a:	2201      	movs	r2, #1
    ef3c:	4013      	ands	r3, r2
    ef3e:	1e5a      	subs	r2, r3, #1
    ef40:	4193      	sbcs	r3, r2
    ef42:	b2da      	uxtb	r2, r3
    ef44:	4b37      	ldr	r3, [pc, #220]	; (f024 <restore_orientation_controls_remote_esc+0x1b4>)
    ef46:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = (eeprom_data[2] & 0x01);
    ef48:	4b33      	ldr	r3, [pc, #204]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef4a:	789b      	ldrb	r3, [r3, #2]
    ef4c:	001a      	movs	r2, r3
    ef4e:	2301      	movs	r3, #1
    ef50:	4013      	ands	r3, r2
    ef52:	1e5a      	subs	r2, r3, #1
    ef54:	4193      	sbcs	r3, r2
    ef56:	b2da      	uxtb	r2, r3
    ef58:	4b33      	ldr	r3, [pc, #204]	; (f028 <restore_orientation_controls_remote_esc+0x1b8>)
    ef5a:	701a      	strb	r2, [r3, #0]
		auxControlType = eeprom_data[3];
    ef5c:	4b2e      	ldr	r3, [pc, #184]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef5e:	78da      	ldrb	r2, [r3, #3]
    ef60:	4b32      	ldr	r3, [pc, #200]	; (f02c <restore_orientation_controls_remote_esc+0x1bc>)
    ef62:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = eeprom_data[4];
    ef64:	4b2c      	ldr	r3, [pc, #176]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef66:	791a      	ldrb	r2, [r3, #4]
    ef68:	4b31      	ldr	r3, [pc, #196]	; (f030 <restore_orientation_controls_remote_esc+0x1c0>)
    ef6a:	701a      	strb	r2, [r3, #0]
		single_aux_control = eeprom_data[5];
    ef6c:	4b2a      	ldr	r3, [pc, #168]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef6e:	795a      	ldrb	r2, [r3, #5]
    ef70:	4b30      	ldr	r3, [pc, #192]	; (f034 <restore_orientation_controls_remote_esc+0x1c4>)
    ef72:	701a      	strb	r2, [r3, #0]
		single_all_control = eeprom_data[6];
    ef74:	4b28      	ldr	r3, [pc, #160]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef76:	799a      	ldrb	r2, [r3, #6]
    ef78:	4b2f      	ldr	r3, [pc, #188]	; (f038 <restore_orientation_controls_remote_esc+0x1c8>)
    ef7a:	701a      	strb	r2, [r3, #0]
		single_head_control = eeprom_data[7];
    ef7c:	4b26      	ldr	r3, [pc, #152]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef7e:	79da      	ldrb	r2, [r3, #7]
    ef80:	4b2e      	ldr	r3, [pc, #184]	; (f03c <restore_orientation_controls_remote_esc+0x1cc>)
    ef82:	701a      	strb	r2, [r3, #0]
		single_side_control = eeprom_data[8];
    ef84:	4b24      	ldr	r3, [pc, #144]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef86:	7a1a      	ldrb	r2, [r3, #8]
    ef88:	4b2d      	ldr	r3, [pc, #180]	; (f040 <restore_orientation_controls_remote_esc+0x1d0>)
    ef8a:	701a      	strb	r2, [r3, #0]
		single_up_control = eeprom_data[9];
    ef8c:	4b22      	ldr	r3, [pc, #136]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef8e:	7a5a      	ldrb	r2, [r3, #9]
    ef90:	4b2c      	ldr	r3, [pc, #176]	; (f044 <restore_orientation_controls_remote_esc+0x1d4>)
    ef92:	701a      	strb	r2, [r3, #0]
		single_down_control = eeprom_data[10];
    ef94:	4b20      	ldr	r3, [pc, #128]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef96:	7a9a      	ldrb	r2, [r3, #10]
    ef98:	4b2b      	ldr	r3, [pc, #172]	; (f048 <restore_orientation_controls_remote_esc+0x1d8>)
    ef9a:	701a      	strb	r2, [r3, #0]
		dual_aux_control = eeprom_data[11];
    ef9c:	4b1e      	ldr	r3, [pc, #120]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    ef9e:	7ada      	ldrb	r2, [r3, #11]
    efa0:	4b2a      	ldr	r3, [pc, #168]	; (f04c <restore_orientation_controls_remote_esc+0x1dc>)
    efa2:	701a      	strb	r2, [r3, #0]
		dual_all_control = eeprom_data[12];
    efa4:	4b1c      	ldr	r3, [pc, #112]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efa6:	7b1a      	ldrb	r2, [r3, #12]
    efa8:	4b29      	ldr	r3, [pc, #164]	; (f050 <restore_orientation_controls_remote_esc+0x1e0>)
    efaa:	701a      	strb	r2, [r3, #0]
		dual_head_control = eeprom_data[13];
    efac:	4b1a      	ldr	r3, [pc, #104]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efae:	7b5a      	ldrb	r2, [r3, #13]
    efb0:	4b28      	ldr	r3, [pc, #160]	; (f054 <restore_orientation_controls_remote_esc+0x1e4>)
    efb2:	701a      	strb	r2, [r3, #0]
		dual_side_control = eeprom_data[14];
    efb4:	4b18      	ldr	r3, [pc, #96]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efb6:	7b9a      	ldrb	r2, [r3, #14]
    efb8:	4b27      	ldr	r3, [pc, #156]	; (f058 <restore_orientation_controls_remote_esc+0x1e8>)
    efba:	701a      	strb	r2, [r3, #0]
		dual_up_control = eeprom_data[15];
    efbc:	4b16      	ldr	r3, [pc, #88]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efbe:	7bda      	ldrb	r2, [r3, #15]
    efc0:	4b26      	ldr	r3, [pc, #152]	; (f05c <restore_orientation_controls_remote_esc+0x1ec>)
    efc2:	701a      	strb	r2, [r3, #0]
		dual_down_control = eeprom_data[16];
    efc4:	4b14      	ldr	r3, [pc, #80]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efc6:	7c1a      	ldrb	r2, [r3, #16]
    efc8:	4b25      	ldr	r3, [pc, #148]	; (f060 <restore_orientation_controls_remote_esc+0x1f0>)
    efca:	701a      	strb	r2, [r3, #0]

		remote_type = ((eeprom_data[17]&0xF0)>>4);
    efcc:	4b12      	ldr	r3, [pc, #72]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efce:	7c5b      	ldrb	r3, [r3, #17]
    efd0:	091b      	lsrs	r3, r3, #4
    efd2:	b2da      	uxtb	r2, r3
    efd4:	4b23      	ldr	r3, [pc, #140]	; (f064 <restore_orientation_controls_remote_esc+0x1f4>)
    efd6:	701a      	strb	r2, [r3, #0]
		button_type = (eeprom_data[17]&0x0F);
    efd8:	4b0f      	ldr	r3, [pc, #60]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efda:	7c5b      	ldrb	r3, [r3, #17]
    efdc:	220f      	movs	r2, #15
    efde:	4013      	ands	r3, r2
    efe0:	b2da      	uxtb	r2, r3
    efe2:	4b22      	ldr	r3, [pc, #136]	; (f06c <restore_orientation_controls_remote_esc+0x1fc>)
    efe4:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[18];
    efe6:	4b0c      	ldr	r3, [pc, #48]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    efe8:	7c9a      	ldrb	r2, [r3, #18]
    efea:	4b1f      	ldr	r3, [pc, #124]	; (f068 <restore_orientation_controls_remote_esc+0x1f8>)
    efec:	701a      	strb	r2, [r3, #0]

		esc_fw = eeprom_data[19];
    efee:	4b0a      	ldr	r3, [pc, #40]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    eff0:	7cda      	ldrb	r2, [r3, #19]
    eff2:	4b1f      	ldr	r3, [pc, #124]	; (f070 <restore_orientation_controls_remote_esc+0x200>)
    eff4:	701a      	strb	r2, [r3, #0]
		esc_comms = ((eeprom_data[20]&0xF0)>>4);
    eff6:	4b08      	ldr	r3, [pc, #32]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    eff8:	7d1b      	ldrb	r3, [r3, #20]
    effa:	091b      	lsrs	r3, r3, #4
    effc:	b2da      	uxtb	r2, r3
    effe:	4b1d      	ldr	r3, [pc, #116]	; (f074 <restore_orientation_controls_remote_esc+0x204>)
    f000:	701a      	strb	r2, [r3, #0]
		UART_baud = (eeprom_data[20]&0x0F);//*/
    f002:	4b05      	ldr	r3, [pc, #20]	; (f018 <restore_orientation_controls_remote_esc+0x1a8>)
    f004:	7d1b      	ldrb	r3, [r3, #20]
    f006:	220f      	movs	r2, #15
    f008:	4013      	ands	r3, r2
    f00a:	b2da      	uxtb	r2, r3
    f00c:	4b1a      	ldr	r3, [pc, #104]	; (f078 <restore_orientation_controls_remote_esc+0x208>)
    f00e:	701a      	strb	r2, [r3, #0]
	}
}
    f010:	46c0      	nop			; (mov r8, r8)
    f012:	46bd      	mov	sp, r7
    f014:	bd80      	pop	{r7, pc}
    f016:	46c0      	nop			; (mov r8, r8)
    f018:	200009e0 	.word	0x200009e0
    f01c:	00008845 	.word	0x00008845
    f020:	20000004 	.word	0x20000004
    f024:	20000375 	.word	0x20000375
    f028:	20000376 	.word	0x20000376
    f02c:	20000378 	.word	0x20000378
    f030:	20000379 	.word	0x20000379
    f034:	2000037a 	.word	0x2000037a
    f038:	2000037b 	.word	0x2000037b
    f03c:	2000037c 	.word	0x2000037c
    f040:	2000037d 	.word	0x2000037d
    f044:	2000037e 	.word	0x2000037e
    f048:	2000037f 	.word	0x2000037f
    f04c:	20000380 	.word	0x20000380
    f050:	20000381 	.word	0x20000381
    f054:	20000382 	.word	0x20000382
    f058:	20000383 	.word	0x20000383
    f05c:	20000384 	.word	0x20000384
    f060:	20000385 	.word	0x20000385
    f064:	20000308 	.word	0x20000308
    f068:	20000018 	.word	0x20000018
    f06c:	20000309 	.word	0x20000309
    f070:	2000001a 	.word	0x2000001a
    f074:	20000310 	.word	0x20000310
    f078:	20000311 	.word	0x20000311
    f07c:	0000ecf1 	.word	0x0000ecf1

0000f080 <check_ble_AT_recieved>:
	uint8_t payload[MAX_BLE_PAYLOAD_SIZE];
};

struct ble_packet ble_recieve_packet;

bool check_ble_AT_recieved(){
    f080:	b580      	push	{r7, lr}
    f082:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == 'O' && ble_USART_read_buffer[1] == 'K');
    f084:	4b08      	ldr	r3, [pc, #32]	; (f0a8 <check_ble_AT_recieved+0x28>)
    f086:	781b      	ldrb	r3, [r3, #0]
    f088:	2b4f      	cmp	r3, #79	; 0x4f
    f08a:	d105      	bne.n	f098 <check_ble_AT_recieved+0x18>
    f08c:	4b06      	ldr	r3, [pc, #24]	; (f0a8 <check_ble_AT_recieved+0x28>)
    f08e:	785b      	ldrb	r3, [r3, #1]
    f090:	2b4b      	cmp	r3, #75	; 0x4b
    f092:	d101      	bne.n	f098 <check_ble_AT_recieved+0x18>
    f094:	2301      	movs	r3, #1
    f096:	e000      	b.n	f09a <check_ble_AT_recieved+0x1a>
    f098:	2300      	movs	r3, #0
    f09a:	1c1a      	adds	r2, r3, #0
    f09c:	2301      	movs	r3, #1
    f09e:	4013      	ands	r3, r2
    f0a0:	b2db      	uxtb	r3, r3
}
    f0a2:	0018      	movs	r0, r3
    f0a4:	46bd      	mov	sp, r7
    f0a6:	bd80      	pop	{r7, pc}
    f0a8:	20000f08 	.word	0x20000f08

0000f0ac <check_ble_packet_recieved>:

bool check_ble_packet_recieved(){
    f0ac:	b580      	push	{r7, lr}
    f0ae:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == BLE_START_BYTE && ble_USART_read_buffer[ble_USART_read_buffer[1]+3] == BLE_STOP_BYTE);
    f0b0:	4b0a      	ldr	r3, [pc, #40]	; (f0dc <check_ble_packet_recieved+0x30>)
    f0b2:	781b      	ldrb	r3, [r3, #0]
    f0b4:	2ba5      	cmp	r3, #165	; 0xa5
    f0b6:	d108      	bne.n	f0ca <check_ble_packet_recieved+0x1e>
    f0b8:	4b08      	ldr	r3, [pc, #32]	; (f0dc <check_ble_packet_recieved+0x30>)
    f0ba:	785b      	ldrb	r3, [r3, #1]
    f0bc:	3303      	adds	r3, #3
    f0be:	4a07      	ldr	r2, [pc, #28]	; (f0dc <check_ble_packet_recieved+0x30>)
    f0c0:	5cd3      	ldrb	r3, [r2, r3]
    f0c2:	2b5a      	cmp	r3, #90	; 0x5a
    f0c4:	d101      	bne.n	f0ca <check_ble_packet_recieved+0x1e>
    f0c6:	2301      	movs	r3, #1
    f0c8:	e000      	b.n	f0cc <check_ble_packet_recieved+0x20>
    f0ca:	2300      	movs	r3, #0
    f0cc:	1c1a      	adds	r2, r3, #0
    f0ce:	2301      	movs	r3, #1
    f0d0:	4013      	ands	r3, r2
    f0d2:	b2db      	uxtb	r3, r3
}
    f0d4:	0018      	movs	r0, r3
    f0d6:	46bd      	mov	sp, r7
    f0d8:	bd80      	pop	{r7, pc}
    f0da:	46c0      	nop			; (mov r8, r8)
    f0dc:	20000f08 	.word	0x20000f08

0000f0e0 <process_ble_packet>:

void process_ble_packet(){
    f0e0:	b580      	push	{r7, lr}
    f0e2:	af00      	add	r7, sp, #0
	switch(ble_recieve_packet.ID){
    f0e4:	4bf3      	ldr	r3, [pc, #972]	; (f4b4 <process_ble_packet+0x3d4>)
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	3baa      	subs	r3, #170	; 0xaa
    f0ea:	2b54      	cmp	r3, #84	; 0x54
    f0ec:	d901      	bls.n	f0f2 <process_ble_packet+0x12>
    f0ee:	f000 fce7 	bl	fac0 <process_ble_packet+0x9e0>
    f0f2:	009a      	lsls	r2, r3, #2
    f0f4:	4bf0      	ldr	r3, [pc, #960]	; (f4b8 <process_ble_packet+0x3d8>)
    f0f6:	18d3      	adds	r3, r2, r3
    f0f8:	681b      	ldr	r3, [r3, #0]
    f0fa:	469f      	mov	pc, r3
		case Read_Motor_Limits:
			GET_LIMITS = 1;
    f0fc:	4bef      	ldr	r3, [pc, #956]	; (f4bc <process_ble_packet+0x3dc>)
    f0fe:	2201      	movs	r2, #1
    f100:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f102:	4bef      	ldr	r3, [pc, #956]	; (f4c0 <process_ble_packet+0x3e0>)
    f104:	2200      	movs	r2, #0
    f106:	701a      	strb	r2, [r3, #0]
			break;
    f108:	f000 fcda 	bl	fac0 <process_ble_packet+0x9e0>
		case (int)Read_LED_Vars:
			SEND_LED_CHARS = 1;
    f10c:	4bed      	ldr	r3, [pc, #948]	; (f4c4 <process_ble_packet+0x3e4>)
    f10e:	2201      	movs	r2, #1
    f110:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f112:	4beb      	ldr	r3, [pc, #940]	; (f4c0 <process_ble_packet+0x3e0>)
    f114:	2200      	movs	r2, #0
    f116:	701a      	strb	r2, [r3, #0]
			break;
    f118:	f000 fcd2 	bl	fac0 <process_ble_packet+0x9e0>
		case Calibrate_All:
			_autoCalc = false; // Workaround so that calibrate doesnt include the current offset
    f11c:	4bea      	ldr	r3, [pc, #936]	; (f4c8 <process_ble_packet+0x3e8>)
    f11e:	2200      	movs	r2, #0
    f120:	701a      	strb	r2, [r3, #0]
			calibrate(true);
    f122:	2001      	movs	r0, #1
    f124:	4be9      	ldr	r3, [pc, #932]	; (f4cc <process_ble_packet+0x3ec>)
    f126:	4798      	blx	r3
			save_cal_data();
    f128:	4be9      	ldr	r3, [pc, #932]	; (f4d0 <process_ble_packet+0x3f0>)
    f12a:	4798      	blx	r3
			break;
    f12c:	f000 fcc8 	bl	fac0 <process_ble_packet+0x9e0>
		case Read_Sensor_Vars:
			SEND_SENSORS = 1;
    f130:	4be8      	ldr	r3, [pc, #928]	; (f4d4 <process_ble_packet+0x3f4>)
    f132:	2201      	movs	r2, #1
    f134:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f136:	4be2      	ldr	r3, [pc, #904]	; (f4c0 <process_ble_packet+0x3e0>)
    f138:	2200      	movs	r2, #0
    f13a:	701a      	strb	r2, [r3, #0]
			break;
    f13c:	f000 fcc0 	bl	fac0 <process_ble_packet+0x9e0>
		case LED_Toggle:
			LIGHTS_ON = !LIGHTS_ON;
    f140:	4be5      	ldr	r3, [pc, #916]	; (f4d8 <process_ble_packet+0x3f8>)
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	425a      	negs	r2, r3
    f146:	4153      	adcs	r3, r2
    f148:	b2db      	uxtb	r3, r3
    f14a:	001a      	movs	r2, r3
    f14c:	4be2      	ldr	r3, [pc, #904]	; (f4d8 <process_ble_packet+0x3f8>)
    f14e:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f150:	4be2      	ldr	r3, [pc, #904]	; (f4dc <process_ble_packet+0x3fc>)
    f152:	4798      	blx	r3
			break;
    f154:	f000 fcb4 	bl	fac0 <process_ble_packet+0x9e0>
		case LED_Mode_Down:
			if(light_mode > 0)
    f158:	4be1      	ldr	r3, [pc, #900]	; (f4e0 <process_ble_packet+0x400>)
    f15a:	781b      	ldrb	r3, [r3, #0]
    f15c:	2b00      	cmp	r3, #0
    f15e:	d005      	beq.n	f16c <process_ble_packet+0x8c>
			light_mode--;
    f160:	4bdf      	ldr	r3, [pc, #892]	; (f4e0 <process_ble_packet+0x400>)
    f162:	781b      	ldrb	r3, [r3, #0]
    f164:	3b01      	subs	r3, #1
    f166:	b2da      	uxtb	r2, r3
    f168:	4bdd      	ldr	r3, [pc, #884]	; (f4e0 <process_ble_packet+0x400>)
    f16a:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f16c:	4bdb      	ldr	r3, [pc, #876]	; (f4dc <process_ble_packet+0x3fc>)
    f16e:	4798      	blx	r3
			break;
    f170:	f000 fca6 	bl	fac0 <process_ble_packet+0x9e0>
		case LED_Mode_Up:
			if(light_mode < light_modes)
    f174:	4bda      	ldr	r3, [pc, #872]	; (f4e0 <process_ble_packet+0x400>)
    f176:	781b      	ldrb	r3, [r3, #0]
    f178:	2209      	movs	r2, #9
    f17a:	4293      	cmp	r3, r2
    f17c:	d205      	bcs.n	f18a <process_ble_packet+0xaa>
			light_mode++;
    f17e:	4bd8      	ldr	r3, [pc, #864]	; (f4e0 <process_ble_packet+0x400>)
    f180:	781b      	ldrb	r3, [r3, #0]
    f182:	3301      	adds	r3, #1
    f184:	b2da      	uxtb	r2, r3
    f186:	4bd6      	ldr	r3, [pc, #856]	; (f4e0 <process_ble_packet+0x400>)
    f188:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f18a:	4bd4      	ldr	r3, [pc, #848]	; (f4dc <process_ble_packet+0x3fc>)
    f18c:	4798      	blx	r3
			break;
    f18e:	f000 fc97 	bl	fac0 <process_ble_packet+0x9e0>
		case Read_Orientaion:
			SEND_ORIENTAION_CONFIG = 1;
    f192:	4bd4      	ldr	r3, [pc, #848]	; (f4e4 <process_ble_packet+0x404>)
    f194:	2201      	movs	r2, #1
    f196:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f198:	4bc9      	ldr	r3, [pc, #804]	; (f4c0 <process_ble_packet+0x3e0>)
    f19a:	2200      	movs	r2, #0
    f19c:	701a      	strb	r2, [r3, #0]
			break;
    f19e:	f000 fc8f 	bl	fac0 <process_ble_packet+0x9e0>
		case Read_Controls:
			SEND_CONTROLS_CONFIG = 1;
    f1a2:	4bd1      	ldr	r3, [pc, #836]	; (f4e8 <process_ble_packet+0x408>)
    f1a4:	2201      	movs	r2, #1
    f1a6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f1a8:	4bc5      	ldr	r3, [pc, #788]	; (f4c0 <process_ble_packet+0x3e0>)
    f1aa:	2200      	movs	r2, #0
    f1ac:	701a      	strb	r2, [r3, #0]
			break;
    f1ae:	f000 fc87 	bl	fac0 <process_ble_packet+0x9e0>
		case Read_Remote_Config:
			SEND_REMOTE_CONFIG = 1;
    f1b2:	4bce      	ldr	r3, [pc, #824]	; (f4ec <process_ble_packet+0x40c>)
    f1b4:	2201      	movs	r2, #1
    f1b6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f1b8:	4bc1      	ldr	r3, [pc, #772]	; (f4c0 <process_ble_packet+0x3e0>)
    f1ba:	2200      	movs	r2, #0
    f1bc:	701a      	strb	r2, [r3, #0]
			break;
    f1be:	f000 fc7f 	bl	fac0 <process_ble_packet+0x9e0>
		case Read_ESC_Config:
			SEND_ESC_CONFIG = 1;
    f1c2:	4bcb      	ldr	r3, [pc, #812]	; (f4f0 <process_ble_packet+0x410>)
    f1c4:	2201      	movs	r2, #1
    f1c6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f1c8:	4bbd      	ldr	r3, [pc, #756]	; (f4c0 <process_ble_packet+0x3e0>)
    f1ca:	2200      	movs	r2, #0
    f1cc:	701a      	strb	r2, [r3, #0]
			break;
    f1ce:	f000 fc77 	bl	fac0 <process_ble_packet+0x9e0>
		case Aux_Pressed:
			LIGHTS_ON = true;
    f1d2:	4bc1      	ldr	r3, [pc, #772]	; (f4d8 <process_ble_packet+0x3f8>)
    f1d4:	2201      	movs	r2, #1
    f1d6:	701a      	strb	r2, [r3, #0]
			AppAuxButton = 1;
    f1d8:	4bc6      	ldr	r3, [pc, #792]	; (f4f4 <process_ble_packet+0x414>)
    f1da:	2201      	movs	r2, #1
    f1dc:	701a      	strb	r2, [r3, #0]
			break;
    f1de:	f000 fc6f 	bl	fac0 <process_ble_packet+0x9e0>
		case Aux_Released:
			LIGHTS_ON = false;
    f1e2:	4bbd      	ldr	r3, [pc, #756]	; (f4d8 <process_ble_packet+0x3f8>)
    f1e4:	2200      	movs	r2, #0
    f1e6:	701a      	strb	r2, [r3, #0]
			AppAuxButton = 0;
    f1e8:	4bc2      	ldr	r3, [pc, #776]	; (f4f4 <process_ble_packet+0x414>)
    f1ea:	2200      	movs	r2, #0
    f1ec:	701a      	strb	r2, [r3, #0]
			break;
    f1ee:	f000 fc67 	bl	fac0 <process_ble_packet+0x9e0>
		case Remote_Data:
			AppRemoteY = (ble_recieve_packet.payload[0] & 0x0FF);
    f1f2:	4bb0      	ldr	r3, [pc, #704]	; (f4b4 <process_ble_packet+0x3d4>)
    f1f4:	789a      	ldrb	r2, [r3, #2]
    f1f6:	4bc0      	ldr	r3, [pc, #768]	; (f4f8 <process_ble_packet+0x418>)
    f1f8:	701a      	strb	r2, [r3, #0]
			NEW_REMOTE_DATA = 1;
    f1fa:	4bc0      	ldr	r3, [pc, #768]	; (f4fc <process_ble_packet+0x41c>)
    f1fc:	2201      	movs	r2, #1
    f1fe:	701a      	strb	r2, [r3, #0]
			break;
    f200:	f000 fc5e 	bl	fac0 <process_ble_packet+0x9e0>
		case RPM_Throttle:
			LIGHTS_ON = 1;
    f204:	4bb4      	ldr	r3, [pc, #720]	; (f4d8 <process_ble_packet+0x3f8>)
    f206:	2201      	movs	r2, #1
    f208:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_RPM_THROTTLE;
    f20a:	4bb5      	ldr	r3, [pc, #724]	; (f4e0 <process_ble_packet+0x400>)
    f20c:	2205      	movs	r2, #5
    f20e:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f210:	4ba8      	ldr	r3, [pc, #672]	; (f4b4 <process_ble_packet+0x3d4>)
    f212:	789a      	ldrb	r2, [r3, #2]
    f214:	4bba      	ldr	r3, [pc, #744]	; (f500 <process_ble_packet+0x420>)
    f216:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f218:	4bb9      	ldr	r3, [pc, #740]	; (f500 <process_ble_packet+0x420>)
    f21a:	781b      	ldrb	r3, [r3, #0]
    f21c:	111b      	asrs	r3, r3, #4
    f21e:	b2db      	uxtb	r3, r3
    f220:	2201      	movs	r2, #1
    f222:	4013      	ands	r3, r2
    f224:	b2da      	uxtb	r2, r3
    f226:	4bb7      	ldr	r3, [pc, #732]	; (f504 <process_ble_packet+0x424>)
    f228:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f22a:	4bb5      	ldr	r3, [pc, #724]	; (f500 <process_ble_packet+0x420>)
    f22c:	781b      	ldrb	r3, [r3, #0]
    f22e:	115b      	asrs	r3, r3, #5
    f230:	b2db      	uxtb	r3, r3
    f232:	2201      	movs	r2, #1
    f234:	4013      	ands	r3, r2
    f236:	b2da      	uxtb	r2, r3
    f238:	4bb3      	ldr	r3, [pc, #716]	; (f508 <process_ble_packet+0x428>)
    f23a:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f23c:	4bb0      	ldr	r3, [pc, #704]	; (f500 <process_ble_packet+0x420>)
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	119b      	asrs	r3, r3, #6
    f242:	b2db      	uxtb	r3, r3
    f244:	2201      	movs	r2, #1
    f246:	4013      	ands	r3, r2
    f248:	b2da      	uxtb	r2, r3
    f24a:	4bb0      	ldr	r3, [pc, #704]	; (f50c <process_ble_packet+0x42c>)
    f24c:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f24e:	4bac      	ldr	r3, [pc, #688]	; (f500 <process_ble_packet+0x420>)
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	09db      	lsrs	r3, r3, #7
    f254:	b2da      	uxtb	r2, r3
    f256:	4bae      	ldr	r3, [pc, #696]	; (f510 <process_ble_packet+0x430>)
    f258:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f25a:	4ba0      	ldr	r3, [pc, #640]	; (f4dc <process_ble_packet+0x3fc>)
    f25c:	4798      	blx	r3
			break;
    f25e:	f000 fc2f 	bl	fac0 <process_ble_packet+0x9e0>
		case Compass_Cycle_Values:
			LIGHTS_ON = 1;
    f262:	4b9d      	ldr	r3, [pc, #628]	; (f4d8 <process_ble_packet+0x3f8>)
    f264:	2201      	movs	r2, #1
    f266:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_COMPASS_CYCLE;
    f268:	4b9d      	ldr	r3, [pc, #628]	; (f4e0 <process_ble_packet+0x400>)
    f26a:	2202      	movs	r2, #2
    f26c:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f26e:	4b91      	ldr	r3, [pc, #580]	; (f4b4 <process_ble_packet+0x3d4>)
    f270:	789a      	ldrb	r2, [r3, #2]
    f272:	4ba3      	ldr	r3, [pc, #652]	; (f500 <process_ble_packet+0x420>)
    f274:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f276:	4ba2      	ldr	r3, [pc, #648]	; (f500 <process_ble_packet+0x420>)
    f278:	781b      	ldrb	r3, [r3, #0]
    f27a:	111b      	asrs	r3, r3, #4
    f27c:	b2db      	uxtb	r3, r3
    f27e:	2201      	movs	r2, #1
    f280:	4013      	ands	r3, r2
    f282:	b2da      	uxtb	r2, r3
    f284:	4b9f      	ldr	r3, [pc, #636]	; (f504 <process_ble_packet+0x424>)
    f286:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f288:	4b9d      	ldr	r3, [pc, #628]	; (f500 <process_ble_packet+0x420>)
    f28a:	781b      	ldrb	r3, [r3, #0]
    f28c:	115b      	asrs	r3, r3, #5
    f28e:	b2db      	uxtb	r3, r3
    f290:	2201      	movs	r2, #1
    f292:	4013      	ands	r3, r2
    f294:	b2da      	uxtb	r2, r3
    f296:	4b9c      	ldr	r3, [pc, #624]	; (f508 <process_ble_packet+0x428>)
    f298:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f29a:	4b99      	ldr	r3, [pc, #612]	; (f500 <process_ble_packet+0x420>)
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	119b      	asrs	r3, r3, #6
    f2a0:	b2db      	uxtb	r3, r3
    f2a2:	2201      	movs	r2, #1
    f2a4:	4013      	ands	r3, r2
    f2a6:	b2da      	uxtb	r2, r3
    f2a8:	4b98      	ldr	r3, [pc, #608]	; (f50c <process_ble_packet+0x42c>)
    f2aa:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f2ac:	4b94      	ldr	r3, [pc, #592]	; (f500 <process_ble_packet+0x420>)
    f2ae:	781b      	ldrb	r3, [r3, #0]
    f2b0:	09db      	lsrs	r3, r3, #7
    f2b2:	b2da      	uxtb	r2, r3
    f2b4:	4b96      	ldr	r3, [pc, #600]	; (f510 <process_ble_packet+0x430>)
    f2b6:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_COMPASS_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    f2b8:	4b7e      	ldr	r3, [pc, #504]	; (f4b4 <process_ble_packet+0x3d4>)
    f2ba:	78da      	ldrb	r2, [r3, #3]
    f2bc:	4b95      	ldr	r3, [pc, #596]	; (f514 <process_ble_packet+0x434>)
    f2be:	0010      	movs	r0, r2
    f2c0:	4798      	blx	r3
    f2c2:	1c02      	adds	r2, r0, #0
    f2c4:	4b94      	ldr	r3, [pc, #592]	; (f518 <process_ble_packet+0x438>)
    f2c6:	4995      	ldr	r1, [pc, #596]	; (f51c <process_ble_packet+0x43c>)
    f2c8:	1c10      	adds	r0, r2, #0
    f2ca:	4798      	blx	r3
    f2cc:	1c03      	adds	r3, r0, #0
    f2ce:	1c1a      	adds	r2, r3, #0
    f2d0:	4b93      	ldr	r3, [pc, #588]	; (f520 <process_ble_packet+0x440>)
    f2d2:	609a      	str	r2, [r3, #8]
			save_led_data();
    f2d4:	4b81      	ldr	r3, [pc, #516]	; (f4dc <process_ble_packet+0x3fc>)
    f2d6:	4798      	blx	r3
			break;
    f2d8:	f000 fbf2 	bl	fac0 <process_ble_packet+0x9e0>
		case RPM_Values:
			LIGHTS_ON = 1;
    f2dc:	4b7e      	ldr	r3, [pc, #504]	; (f4d8 <process_ble_packet+0x3f8>)
    f2de:	2201      	movs	r2, #1
    f2e0:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_RPM_CYCLE;
    f2e2:	4b7f      	ldr	r3, [pc, #508]	; (f4e0 <process_ble_packet+0x400>)
    f2e4:	2204      	movs	r2, #4
    f2e6:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f2e8:	4b72      	ldr	r3, [pc, #456]	; (f4b4 <process_ble_packet+0x3d4>)
    f2ea:	789a      	ldrb	r2, [r3, #2]
    f2ec:	4b84      	ldr	r3, [pc, #528]	; (f500 <process_ble_packet+0x420>)
    f2ee:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f2f0:	4b83      	ldr	r3, [pc, #524]	; (f500 <process_ble_packet+0x420>)
    f2f2:	781b      	ldrb	r3, [r3, #0]
    f2f4:	111b      	asrs	r3, r3, #4
    f2f6:	b2db      	uxtb	r3, r3
    f2f8:	2201      	movs	r2, #1
    f2fa:	4013      	ands	r3, r2
    f2fc:	b2da      	uxtb	r2, r3
    f2fe:	4b81      	ldr	r3, [pc, #516]	; (f504 <process_ble_packet+0x424>)
    f300:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f302:	4b7f      	ldr	r3, [pc, #508]	; (f500 <process_ble_packet+0x420>)
    f304:	781b      	ldrb	r3, [r3, #0]
    f306:	115b      	asrs	r3, r3, #5
    f308:	b2db      	uxtb	r3, r3
    f30a:	2201      	movs	r2, #1
    f30c:	4013      	ands	r3, r2
    f30e:	b2da      	uxtb	r2, r3
    f310:	4b7d      	ldr	r3, [pc, #500]	; (f508 <process_ble_packet+0x428>)
    f312:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f314:	4b7a      	ldr	r3, [pc, #488]	; (f500 <process_ble_packet+0x420>)
    f316:	781b      	ldrb	r3, [r3, #0]
    f318:	119b      	asrs	r3, r3, #6
    f31a:	b2db      	uxtb	r3, r3
    f31c:	2201      	movs	r2, #1
    f31e:	4013      	ands	r3, r2
    f320:	b2da      	uxtb	r2, r3
    f322:	4b7a      	ldr	r3, [pc, #488]	; (f50c <process_ble_packet+0x42c>)
    f324:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f326:	4b76      	ldr	r3, [pc, #472]	; (f500 <process_ble_packet+0x420>)
    f328:	781b      	ldrb	r3, [r3, #0]
    f32a:	09db      	lsrs	r3, r3, #7
    f32c:	b2da      	uxtb	r2, r3
    f32e:	4b78      	ldr	r3, [pc, #480]	; (f510 <process_ble_packet+0x430>)
    f330:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_RPM_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    f332:	4b60      	ldr	r3, [pc, #384]	; (f4b4 <process_ble_packet+0x3d4>)
    f334:	78da      	ldrb	r2, [r3, #3]
    f336:	4b77      	ldr	r3, [pc, #476]	; (f514 <process_ble_packet+0x434>)
    f338:	0010      	movs	r0, r2
    f33a:	4798      	blx	r3
    f33c:	1c02      	adds	r2, r0, #0
    f33e:	4b76      	ldr	r3, [pc, #472]	; (f518 <process_ble_packet+0x438>)
    f340:	4976      	ldr	r1, [pc, #472]	; (f51c <process_ble_packet+0x43c>)
    f342:	1c10      	adds	r0, r2, #0
    f344:	4798      	blx	r3
    f346:	1c03      	adds	r3, r0, #0
    f348:	1c1a      	adds	r2, r3, #0
    f34a:	4b76      	ldr	r3, [pc, #472]	; (f524 <process_ble_packet+0x444>)
    f34c:	611a      	str	r2, [r3, #16]
			save_led_data();
    f34e:	4b63      	ldr	r3, [pc, #396]	; (f4dc <process_ble_packet+0x3fc>)
    f350:	4798      	blx	r3
			break;
    f352:	e3b5      	b.n	fac0 <process_ble_packet+0x9e0>
		case X_Accel_Values:
			LIGHTS_ON = 1;
    f354:	4b60      	ldr	r3, [pc, #384]	; (f4d8 <process_ble_packet+0x3f8>)
    f356:	2201      	movs	r2, #1
    f358:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_X_ACCEL;
    f35a:	4b61      	ldr	r3, [pc, #388]	; (f4e0 <process_ble_packet+0x400>)
    f35c:	2206      	movs	r2, #6
    f35e:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f360:	4b54      	ldr	r3, [pc, #336]	; (f4b4 <process_ble_packet+0x3d4>)
    f362:	789a      	ldrb	r2, [r3, #2]
    f364:	4b66      	ldr	r3, [pc, #408]	; (f500 <process_ble_packet+0x420>)
    f366:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f368:	4b65      	ldr	r3, [pc, #404]	; (f500 <process_ble_packet+0x420>)
    f36a:	781b      	ldrb	r3, [r3, #0]
    f36c:	111b      	asrs	r3, r3, #4
    f36e:	b2db      	uxtb	r3, r3
    f370:	2201      	movs	r2, #1
    f372:	4013      	ands	r3, r2
    f374:	b2da      	uxtb	r2, r3
    f376:	4b63      	ldr	r3, [pc, #396]	; (f504 <process_ble_packet+0x424>)
    f378:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f37a:	4b61      	ldr	r3, [pc, #388]	; (f500 <process_ble_packet+0x420>)
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	115b      	asrs	r3, r3, #5
    f380:	b2db      	uxtb	r3, r3
    f382:	2201      	movs	r2, #1
    f384:	4013      	ands	r3, r2
    f386:	b2da      	uxtb	r2, r3
    f388:	4b5f      	ldr	r3, [pc, #380]	; (f508 <process_ble_packet+0x428>)
    f38a:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f38c:	4b5c      	ldr	r3, [pc, #368]	; (f500 <process_ble_packet+0x420>)
    f38e:	781b      	ldrb	r3, [r3, #0]
    f390:	119b      	asrs	r3, r3, #6
    f392:	b2db      	uxtb	r3, r3
    f394:	2201      	movs	r2, #1
    f396:	4013      	ands	r3, r2
    f398:	b2da      	uxtb	r2, r3
    f39a:	4b5c      	ldr	r3, [pc, #368]	; (f50c <process_ble_packet+0x42c>)
    f39c:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f39e:	4b58      	ldr	r3, [pc, #352]	; (f500 <process_ble_packet+0x420>)
    f3a0:	781b      	ldrb	r3, [r3, #0]
    f3a2:	09db      	lsrs	r3, r3, #7
    f3a4:	b2da      	uxtb	r2, r3
    f3a6:	4b5a      	ldr	r3, [pc, #360]	; (f510 <process_ble_packet+0x430>)
    f3a8:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_X_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
    f3aa:	4b42      	ldr	r3, [pc, #264]	; (f4b4 <process_ble_packet+0x3d4>)
    f3ac:	78da      	ldrb	r2, [r3, #3]
    f3ae:	4b59      	ldr	r3, [pc, #356]	; (f514 <process_ble_packet+0x434>)
    f3b0:	0010      	movs	r0, r2
    f3b2:	4798      	blx	r3
    f3b4:	1c02      	adds	r2, r0, #0
    f3b6:	4b58      	ldr	r3, [pc, #352]	; (f518 <process_ble_packet+0x438>)
    f3b8:	4958      	ldr	r1, [pc, #352]	; (f51c <process_ble_packet+0x43c>)
    f3ba:	1c10      	adds	r0, r2, #0
    f3bc:	4798      	blx	r3
    f3be:	1c03      	adds	r3, r0, #0
    f3c0:	1c1a      	adds	r2, r3, #0
    f3c2:	4b58      	ldr	r3, [pc, #352]	; (f524 <process_ble_packet+0x444>)
    f3c4:	619a      	str	r2, [r3, #24]
			save_led_data();
    f3c6:	4b45      	ldr	r3, [pc, #276]	; (f4dc <process_ble_packet+0x3fc>)
    f3c8:	4798      	blx	r3
			break;
    f3ca:	e379      	b.n	fac0 <process_ble_packet+0x9e0>
		case Y_Accel_Values:
			LIGHTS_ON = 1;
    f3cc:	4b42      	ldr	r3, [pc, #264]	; (f4d8 <process_ble_packet+0x3f8>)
    f3ce:	2201      	movs	r2, #1
    f3d0:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_Y_ACCEL;
    f3d2:	4b43      	ldr	r3, [pc, #268]	; (f4e0 <process_ble_packet+0x400>)
    f3d4:	2207      	movs	r2, #7
    f3d6:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f3d8:	4b36      	ldr	r3, [pc, #216]	; (f4b4 <process_ble_packet+0x3d4>)
    f3da:	789a      	ldrb	r2, [r3, #2]
    f3dc:	4b48      	ldr	r3, [pc, #288]	; (f500 <process_ble_packet+0x420>)
    f3de:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f3e0:	4b47      	ldr	r3, [pc, #284]	; (f500 <process_ble_packet+0x420>)
    f3e2:	781b      	ldrb	r3, [r3, #0]
    f3e4:	111b      	asrs	r3, r3, #4
    f3e6:	b2db      	uxtb	r3, r3
    f3e8:	2201      	movs	r2, #1
    f3ea:	4013      	ands	r3, r2
    f3ec:	b2da      	uxtb	r2, r3
    f3ee:	4b45      	ldr	r3, [pc, #276]	; (f504 <process_ble_packet+0x424>)
    f3f0:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f3f2:	4b43      	ldr	r3, [pc, #268]	; (f500 <process_ble_packet+0x420>)
    f3f4:	781b      	ldrb	r3, [r3, #0]
    f3f6:	115b      	asrs	r3, r3, #5
    f3f8:	b2db      	uxtb	r3, r3
    f3fa:	2201      	movs	r2, #1
    f3fc:	4013      	ands	r3, r2
    f3fe:	b2da      	uxtb	r2, r3
    f400:	4b41      	ldr	r3, [pc, #260]	; (f508 <process_ble_packet+0x428>)
    f402:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f404:	4b3e      	ldr	r3, [pc, #248]	; (f500 <process_ble_packet+0x420>)
    f406:	781b      	ldrb	r3, [r3, #0]
    f408:	119b      	asrs	r3, r3, #6
    f40a:	b2db      	uxtb	r3, r3
    f40c:	2201      	movs	r2, #1
    f40e:	4013      	ands	r3, r2
    f410:	b2da      	uxtb	r2, r3
    f412:	4b3e      	ldr	r3, [pc, #248]	; (f50c <process_ble_packet+0x42c>)
    f414:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f416:	4b3a      	ldr	r3, [pc, #232]	; (f500 <process_ble_packet+0x420>)
    f418:	781b      	ldrb	r3, [r3, #0]
    f41a:	09db      	lsrs	r3, r3, #7
    f41c:	b2da      	uxtb	r2, r3
    f41e:	4b3c      	ldr	r3, [pc, #240]	; (f510 <process_ble_packet+0x430>)
    f420:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_Y_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
    f422:	4b24      	ldr	r3, [pc, #144]	; (f4b4 <process_ble_packet+0x3d4>)
    f424:	78da      	ldrb	r2, [r3, #3]
    f426:	4b3b      	ldr	r3, [pc, #236]	; (f514 <process_ble_packet+0x434>)
    f428:	0010      	movs	r0, r2
    f42a:	4798      	blx	r3
    f42c:	1c02      	adds	r2, r0, #0
    f42e:	4b3a      	ldr	r3, [pc, #232]	; (f518 <process_ble_packet+0x438>)
    f430:	493a      	ldr	r1, [pc, #232]	; (f51c <process_ble_packet+0x43c>)
    f432:	1c10      	adds	r0, r2, #0
    f434:	4798      	blx	r3
    f436:	1c03      	adds	r3, r0, #0
    f438:	1c1a      	adds	r2, r3, #0
    f43a:	4b39      	ldr	r3, [pc, #228]	; (f520 <process_ble_packet+0x440>)
    f43c:	61da      	str	r2, [r3, #28]
			save_led_data();
    f43e:	4b27      	ldr	r3, [pc, #156]	; (f4dc <process_ble_packet+0x3fc>)
    f440:	4798      	blx	r3
			break;
    f442:	e33d      	b.n	fac0 <process_ble_packet+0x9e0>
		case Apply_Orientation:
			ORIENTATION[0] = ble_recieve_packet.payload[0];
    f444:	4b1b      	ldr	r3, [pc, #108]	; (f4b4 <process_ble_packet+0x3d4>)
    f446:	789a      	ldrb	r2, [r3, #2]
    f448:	4b37      	ldr	r3, [pc, #220]	; (f528 <process_ble_packet+0x448>)
    f44a:	701a      	strb	r2, [r3, #0]
			ORIENTATION[1] = ble_recieve_packet.payload[1];
    f44c:	4b19      	ldr	r3, [pc, #100]	; (f4b4 <process_ble_packet+0x3d4>)
    f44e:	78da      	ldrb	r2, [r3, #3]
    f450:	4b35      	ldr	r3, [pc, #212]	; (f528 <process_ble_packet+0x448>)
    f452:	705a      	strb	r2, [r3, #1]
			save_orientation_controls_remote_esc();
    f454:	4b35      	ldr	r3, [pc, #212]	; (f52c <process_ble_packet+0x44c>)
    f456:	4798      	blx	r3
			break;
    f458:	e332      	b.n	fac0 <process_ble_packet+0x9e0>
		case Apply_Remote_Config:
			remote_type = (ble_recieve_packet.payload[0]&0x0F0)>>4;
    f45a:	4b16      	ldr	r3, [pc, #88]	; (f4b4 <process_ble_packet+0x3d4>)
    f45c:	789b      	ldrb	r3, [r3, #2]
    f45e:	091b      	lsrs	r3, r3, #4
    f460:	b2da      	uxtb	r2, r3
    f462:	4b33      	ldr	r3, [pc, #204]	; (f530 <process_ble_packet+0x450>)
    f464:	701a      	strb	r2, [r3, #0]
			button_type = (ble_recieve_packet.payload[0]&0x0F);
    f466:	4b13      	ldr	r3, [pc, #76]	; (f4b4 <process_ble_packet+0x3d4>)
    f468:	789b      	ldrb	r3, [r3, #2]
    f46a:	220f      	movs	r2, #15
    f46c:	4013      	ands	r3, r2
    f46e:	b2da      	uxtb	r2, r3
    f470:	4b30      	ldr	r3, [pc, #192]	; (f534 <process_ble_packet+0x454>)
    f472:	701a      	strb	r2, [r3, #0]
			deadzone = ble_recieve_packet.payload[1];
    f474:	4b0f      	ldr	r3, [pc, #60]	; (f4b4 <process_ble_packet+0x3d4>)
    f476:	78da      	ldrb	r2, [r3, #3]
    f478:	4b2f      	ldr	r3, [pc, #188]	; (f538 <process_ble_packet+0x458>)
    f47a:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc();
    f47c:	4b2b      	ldr	r3, [pc, #172]	; (f52c <process_ble_packet+0x44c>)
    f47e:	4798      	blx	r3
			break;
    f480:	e31e      	b.n	fac0 <process_ble_packet+0x9e0>
		case Apply_ESC_Config:
			esc_fw = ble_recieve_packet.payload[0];
    f482:	4b0c      	ldr	r3, [pc, #48]	; (f4b4 <process_ble_packet+0x3d4>)
    f484:	789a      	ldrb	r2, [r3, #2]
    f486:	4b2d      	ldr	r3, [pc, #180]	; (f53c <process_ble_packet+0x45c>)
    f488:	701a      	strb	r2, [r3, #0]
			esc_comms = (ble_recieve_packet.payload[1]&0x0F0)>>4;
    f48a:	4b0a      	ldr	r3, [pc, #40]	; (f4b4 <process_ble_packet+0x3d4>)
    f48c:	78db      	ldrb	r3, [r3, #3]
    f48e:	091b      	lsrs	r3, r3, #4
    f490:	b2da      	uxtb	r2, r3
    f492:	4b2b      	ldr	r3, [pc, #172]	; (f540 <process_ble_packet+0x460>)
    f494:	701a      	strb	r2, [r3, #0]
			UART_baud = (ble_recieve_packet.payload[1]&0x0F);
    f496:	4b07      	ldr	r3, [pc, #28]	; (f4b4 <process_ble_packet+0x3d4>)
    f498:	78db      	ldrb	r3, [r3, #3]
    f49a:	220f      	movs	r2, #15
    f49c:	4013      	ands	r3, r2
    f49e:	b2da      	uxtb	r2, r3
    f4a0:	4b28      	ldr	r3, [pc, #160]	; (f544 <process_ble_packet+0x464>)
    f4a2:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc();
    f4a4:	4b21      	ldr	r3, [pc, #132]	; (f52c <process_ble_packet+0x44c>)
    f4a6:	4798      	blx	r3
			configured_comms = esc_comms;
    f4a8:	4b25      	ldr	r3, [pc, #148]	; (f540 <process_ble_packet+0x460>)
    f4aa:	781a      	ldrb	r2, [r3, #0]
    f4ac:	4b26      	ldr	r3, [pc, #152]	; (f548 <process_ble_packet+0x468>)
    f4ae:	701a      	strb	r2, [r3, #0]
			break;
    f4b0:	e306      	b.n	fac0 <process_ble_packet+0x9e0>
    f4b2:	46c0      	nop			; (mov r8, r8)
    f4b4:	200004d4 	.word	0x200004d4
    f4b8:	0001761c 	.word	0x0001761c
    f4bc:	20000019 	.word	0x20000019
    f4c0:	200000b1 	.word	0x200000b1
    f4c4:	200003ac 	.word	0x200003ac
    f4c8:	20000908 	.word	0x20000908
    f4cc:	000097e5 	.word	0x000097e5
    f4d0:	0000ea01 	.word	0x0000ea01
    f4d4:	200003af 	.word	0x200003af
    f4d8:	200000a3 	.word	0x200000a3
    f4dc:	0000e211 	.word	0x0000e211
    f4e0:	2000001b 	.word	0x2000001b
    f4e4:	200003b0 	.word	0x200003b0
    f4e8:	200003b1 	.word	0x200003b1
    f4ec:	200003b2 	.word	0x200003b2
    f4f0:	200003b3 	.word	0x200003b3
    f4f4:	20000386 	.word	0x20000386
    f4f8:	200000b3 	.word	0x200000b3
    f4fc:	200003ae 	.word	0x200003ae
    f500:	20000325 	.word	0x20000325
    f504:	200000a2 	.word	0x200000a2
    f508:	20000322 	.word	0x20000322
    f50c:	20000323 	.word	0x20000323
    f510:	20000324 	.word	0x20000324
    f514:	00015201 	.word	0x00015201
    f518:	000147c9 	.word	0x000147c9
    f51c:	42c80000 	.word	0x42c80000
    f520:	2000004c 	.word	0x2000004c
    f524:	20000028 	.word	0x20000028
    f528:	20000004 	.word	0x20000004
    f52c:	0000ecf1 	.word	0x0000ecf1
    f530:	20000308 	.word	0x20000308
    f534:	20000309 	.word	0x20000309
    f538:	20000018 	.word	0x20000018
    f53c:	2000001a 	.word	0x2000001a
    f540:	20000310 	.word	0x20000310
    f544:	20000311 	.word	0x20000311
    f548:	2000036e 	.word	0x2000036e
		case Color_Cycle_Values:
			LIGHTS_ON = 1;
    f54c:	4bd1      	ldr	r3, [pc, #836]	; (f894 <process_ble_packet+0x7b4>)
    f54e:	2201      	movs	r2, #1
    f550:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_COLOR_CYCLE;
    f552:	4bd1      	ldr	r3, [pc, #836]	; (f898 <process_ble_packet+0x7b8>)
    f554:	2201      	movs	r2, #1
    f556:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f558:	4bd0      	ldr	r3, [pc, #832]	; (f89c <process_ble_packet+0x7bc>)
    f55a:	789a      	ldrb	r2, [r3, #2]
    f55c:	4bd0      	ldr	r3, [pc, #832]	; (f8a0 <process_ble_packet+0x7c0>)
    f55e:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f560:	4bcf      	ldr	r3, [pc, #828]	; (f8a0 <process_ble_packet+0x7c0>)
    f562:	781b      	ldrb	r3, [r3, #0]
    f564:	111b      	asrs	r3, r3, #4
    f566:	b2db      	uxtb	r3, r3
    f568:	2201      	movs	r2, #1
    f56a:	4013      	ands	r3, r2
    f56c:	b2da      	uxtb	r2, r3
    f56e:	4bcd      	ldr	r3, [pc, #820]	; (f8a4 <process_ble_packet+0x7c4>)
    f570:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f572:	4bcb      	ldr	r3, [pc, #812]	; (f8a0 <process_ble_packet+0x7c0>)
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	115b      	asrs	r3, r3, #5
    f578:	b2db      	uxtb	r3, r3
    f57a:	2201      	movs	r2, #1
    f57c:	4013      	ands	r3, r2
    f57e:	b2da      	uxtb	r2, r3
    f580:	4bc9      	ldr	r3, [pc, #804]	; (f8a8 <process_ble_packet+0x7c8>)
    f582:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f584:	4bc6      	ldr	r3, [pc, #792]	; (f8a0 <process_ble_packet+0x7c0>)
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	119b      	asrs	r3, r3, #6
    f58a:	b2db      	uxtb	r3, r3
    f58c:	2201      	movs	r2, #1
    f58e:	4013      	ands	r3, r2
    f590:	b2da      	uxtb	r2, r3
    f592:	4bc6      	ldr	r3, [pc, #792]	; (f8ac <process_ble_packet+0x7cc>)
    f594:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f596:	4bc2      	ldr	r3, [pc, #776]	; (f8a0 <process_ble_packet+0x7c0>)
    f598:	781b      	ldrb	r3, [r3, #0]
    f59a:	09db      	lsrs	r3, r3, #7
    f59c:	b2da      	uxtb	r2, r3
    f59e:	4bc4      	ldr	r3, [pc, #784]	; (f8b0 <process_ble_packet+0x7d0>)
    f5a0:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    f5a2:	4bbe      	ldr	r3, [pc, #760]	; (f89c <process_ble_packet+0x7bc>)
    f5a4:	78da      	ldrb	r2, [r3, #3]
    f5a6:	4bc3      	ldr	r3, [pc, #780]	; (f8b4 <process_ble_packet+0x7d4>)
    f5a8:	0010      	movs	r0, r2
    f5aa:	4798      	blx	r3
    f5ac:	1c02      	adds	r2, r0, #0
    f5ae:	4bc2      	ldr	r3, [pc, #776]	; (f8b8 <process_ble_packet+0x7d8>)
    f5b0:	49c2      	ldr	r1, [pc, #776]	; (f8bc <process_ble_packet+0x7dc>)
    f5b2:	1c10      	adds	r0, r2, #0
    f5b4:	4798      	blx	r3
    f5b6:	1c03      	adds	r3, r0, #0
    f5b8:	1c1a      	adds	r2, r3, #0
    f5ba:	4bc1      	ldr	r3, [pc, #772]	; (f8c0 <process_ble_packet+0x7e0>)
    f5bc:	605a      	str	r2, [r3, #4]
			Brightness[MODE_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[2]))/100;
    f5be:	4bb7      	ldr	r3, [pc, #732]	; (f89c <process_ble_packet+0x7bc>)
    f5c0:	791a      	ldrb	r2, [r3, #4]
    f5c2:	4bbc      	ldr	r3, [pc, #752]	; (f8b4 <process_ble_packet+0x7d4>)
    f5c4:	0010      	movs	r0, r2
    f5c6:	4798      	blx	r3
    f5c8:	1c02      	adds	r2, r0, #0
    f5ca:	4bbb      	ldr	r3, [pc, #748]	; (f8b8 <process_ble_packet+0x7d8>)
    f5cc:	49bb      	ldr	r1, [pc, #748]	; (f8bc <process_ble_packet+0x7dc>)
    f5ce:	1c10      	adds	r0, r2, #0
    f5d0:	4798      	blx	r3
    f5d2:	1c03      	adds	r3, r0, #0
    f5d4:	1c1a      	adds	r2, r3, #0
    f5d6:	4bbb      	ldr	r3, [pc, #748]	; (f8c4 <process_ble_packet+0x7e4>)
    f5d8:	605a      	str	r2, [r3, #4]
			save_led_data();
    f5da:	4bbb      	ldr	r3, [pc, #748]	; (f8c8 <process_ble_packet+0x7e8>)
    f5dc:	4798      	blx	r3
			break;
    f5de:	e26f      	b.n	fac0 <process_ble_packet+0x9e0>
		case Throttle_Values:
			LIGHTS_ON = 1;
    f5e0:	4bac      	ldr	r3, [pc, #688]	; (f894 <process_ble_packet+0x7b4>)
    f5e2:	2201      	movs	r2, #1
    f5e4:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_THROTTLE;
    f5e6:	4bac      	ldr	r3, [pc, #688]	; (f898 <process_ble_packet+0x7b8>)
    f5e8:	2203      	movs	r2, #3
    f5ea:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f5ec:	4bab      	ldr	r3, [pc, #684]	; (f89c <process_ble_packet+0x7bc>)
    f5ee:	789a      	ldrb	r2, [r3, #2]
    f5f0:	4bab      	ldr	r3, [pc, #684]	; (f8a0 <process_ble_packet+0x7c0>)
    f5f2:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f5f4:	4baa      	ldr	r3, [pc, #680]	; (f8a0 <process_ble_packet+0x7c0>)
    f5f6:	781b      	ldrb	r3, [r3, #0]
    f5f8:	111b      	asrs	r3, r3, #4
    f5fa:	b2db      	uxtb	r3, r3
    f5fc:	2201      	movs	r2, #1
    f5fe:	4013      	ands	r3, r2
    f600:	b2da      	uxtb	r2, r3
    f602:	4ba8      	ldr	r3, [pc, #672]	; (f8a4 <process_ble_packet+0x7c4>)
    f604:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f606:	4ba6      	ldr	r3, [pc, #664]	; (f8a0 <process_ble_packet+0x7c0>)
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	115b      	asrs	r3, r3, #5
    f60c:	b2db      	uxtb	r3, r3
    f60e:	2201      	movs	r2, #1
    f610:	4013      	ands	r3, r2
    f612:	b2da      	uxtb	r2, r3
    f614:	4ba4      	ldr	r3, [pc, #656]	; (f8a8 <process_ble_packet+0x7c8>)
    f616:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f618:	4ba1      	ldr	r3, [pc, #644]	; (f8a0 <process_ble_packet+0x7c0>)
    f61a:	781b      	ldrb	r3, [r3, #0]
    f61c:	119b      	asrs	r3, r3, #6
    f61e:	b2db      	uxtb	r3, r3
    f620:	2201      	movs	r2, #1
    f622:	4013      	ands	r3, r2
    f624:	b2da      	uxtb	r2, r3
    f626:	4ba1      	ldr	r3, [pc, #644]	; (f8ac <process_ble_packet+0x7cc>)
    f628:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f62a:	4b9d      	ldr	r3, [pc, #628]	; (f8a0 <process_ble_packet+0x7c0>)
    f62c:	781b      	ldrb	r3, [r3, #0]
    f62e:	09db      	lsrs	r3, r3, #7
    f630:	b2da      	uxtb	r2, r3
    f632:	4b9f      	ldr	r3, [pc, #636]	; (f8b0 <process_ble_packet+0x7d0>)
    f634:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_THROTTLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    f636:	4b99      	ldr	r3, [pc, #612]	; (f89c <process_ble_packet+0x7bc>)
    f638:	78da      	ldrb	r2, [r3, #3]
    f63a:	4b9e      	ldr	r3, [pc, #632]	; (f8b4 <process_ble_packet+0x7d4>)
    f63c:	0010      	movs	r0, r2
    f63e:	4798      	blx	r3
    f640:	1c02      	adds	r2, r0, #0
    f642:	4b9d      	ldr	r3, [pc, #628]	; (f8b8 <process_ble_packet+0x7d8>)
    f644:	499d      	ldr	r1, [pc, #628]	; (f8bc <process_ble_packet+0x7dc>)
    f646:	1c10      	adds	r0, r2, #0
    f648:	4798      	blx	r3
    f64a:	1c03      	adds	r3, r0, #0
    f64c:	1c1a      	adds	r2, r3, #0
    f64e:	4b9c      	ldr	r3, [pc, #624]	; (f8c0 <process_ble_packet+0x7e0>)
    f650:	60da      	str	r2, [r3, #12]
			Brightness[MODE_THROTTLE] = ((float)(ble_recieve_packet.payload[2]))/100;
    f652:	4b92      	ldr	r3, [pc, #584]	; (f89c <process_ble_packet+0x7bc>)
    f654:	791a      	ldrb	r2, [r3, #4]
    f656:	4b97      	ldr	r3, [pc, #604]	; (f8b4 <process_ble_packet+0x7d4>)
    f658:	0010      	movs	r0, r2
    f65a:	4798      	blx	r3
    f65c:	1c02      	adds	r2, r0, #0
    f65e:	4b96      	ldr	r3, [pc, #600]	; (f8b8 <process_ble_packet+0x7d8>)
    f660:	4996      	ldr	r1, [pc, #600]	; (f8bc <process_ble_packet+0x7dc>)
    f662:	1c10      	adds	r0, r2, #0
    f664:	4798      	blx	r3
    f666:	1c03      	adds	r3, r0, #0
    f668:	1c1a      	adds	r2, r3, #0
    f66a:	4b96      	ldr	r3, [pc, #600]	; (f8c4 <process_ble_packet+0x7e4>)
    f66c:	60da      	str	r2, [r3, #12]
			save_led_data();
    f66e:	4b96      	ldr	r3, [pc, #600]	; (f8c8 <process_ble_packet+0x7e8>)
    f670:	4798      	blx	r3
			break;
    f672:	e225      	b.n	fac0 <process_ble_packet+0x9e0>
		case Static_Values:
			LIGHTS_ON = 1;
    f674:	4b87      	ldr	r3, [pc, #540]	; (f894 <process_ble_packet+0x7b4>)
    f676:	2201      	movs	r2, #1
    f678:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_STATIC;
    f67a:	4b87      	ldr	r3, [pc, #540]	; (f898 <process_ble_packet+0x7b8>)
    f67c:	2200      	movs	r2, #0
    f67e:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f680:	4b86      	ldr	r3, [pc, #536]	; (f89c <process_ble_packet+0x7bc>)
    f682:	789a      	ldrb	r2, [r3, #2]
    f684:	4b86      	ldr	r3, [pc, #536]	; (f8a0 <process_ble_packet+0x7c0>)
    f686:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f688:	4b85      	ldr	r3, [pc, #532]	; (f8a0 <process_ble_packet+0x7c0>)
    f68a:	781b      	ldrb	r3, [r3, #0]
    f68c:	111b      	asrs	r3, r3, #4
    f68e:	b2db      	uxtb	r3, r3
    f690:	2201      	movs	r2, #1
    f692:	4013      	ands	r3, r2
    f694:	b2da      	uxtb	r2, r3
    f696:	4b83      	ldr	r3, [pc, #524]	; (f8a4 <process_ble_packet+0x7c4>)
    f698:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f69a:	4b81      	ldr	r3, [pc, #516]	; (f8a0 <process_ble_packet+0x7c0>)
    f69c:	781b      	ldrb	r3, [r3, #0]
    f69e:	115b      	asrs	r3, r3, #5
    f6a0:	b2db      	uxtb	r3, r3
    f6a2:	2201      	movs	r2, #1
    f6a4:	4013      	ands	r3, r2
    f6a6:	b2da      	uxtb	r2, r3
    f6a8:	4b7f      	ldr	r3, [pc, #508]	; (f8a8 <process_ble_packet+0x7c8>)
    f6aa:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f6ac:	4b7c      	ldr	r3, [pc, #496]	; (f8a0 <process_ble_packet+0x7c0>)
    f6ae:	781b      	ldrb	r3, [r3, #0]
    f6b0:	119b      	asrs	r3, r3, #6
    f6b2:	b2db      	uxtb	r3, r3
    f6b4:	2201      	movs	r2, #1
    f6b6:	4013      	ands	r3, r2
    f6b8:	b2da      	uxtb	r2, r3
    f6ba:	4b7c      	ldr	r3, [pc, #496]	; (f8ac <process_ble_packet+0x7cc>)
    f6bc:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f6be:	4b78      	ldr	r3, [pc, #480]	; (f8a0 <process_ble_packet+0x7c0>)
    f6c0:	781b      	ldrb	r3, [r3, #0]
    f6c2:	09db      	lsrs	r3, r3, #7
    f6c4:	b2da      	uxtb	r2, r3
    f6c6:	4b7a      	ldr	r3, [pc, #488]	; (f8b0 <process_ble_packet+0x7d0>)
    f6c8:	701a      	strb	r2, [r3, #0]
			Static_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[1] * 257);
    f6ca:	4b74      	ldr	r3, [pc, #464]	; (f89c <process_ble_packet+0x7bc>)
    f6cc:	78da      	ldrb	r2, [r3, #3]
    f6ce:	4b79      	ldr	r3, [pc, #484]	; (f8b4 <process_ble_packet+0x7d4>)
    f6d0:	0010      	movs	r0, r2
    f6d2:	4798      	blx	r3
    f6d4:	1c02      	adds	r2, r0, #0
    f6d6:	4b7d      	ldr	r3, [pc, #500]	; (f8cc <process_ble_packet+0x7ec>)
    f6d8:	497d      	ldr	r1, [pc, #500]	; (f8d0 <process_ble_packet+0x7f0>)
    f6da:	1c10      	adds	r0, r2, #0
    f6dc:	4798      	blx	r3
    f6de:	1c03      	adds	r3, r0, #0
    f6e0:	1c1a      	adds	r2, r3, #0
    f6e2:	4b7c      	ldr	r3, [pc, #496]	; (f8d4 <process_ble_packet+0x7f4>)
    f6e4:	1c10      	adds	r0, r2, #0
    f6e6:	4798      	blx	r3
    f6e8:	0003      	movs	r3, r0
    f6ea:	b29a      	uxth	r2, r3
    f6ec:	4b7a      	ldr	r3, [pc, #488]	; (f8d8 <process_ble_packet+0x7f8>)
    f6ee:	801a      	strh	r2, [r3, #0]
			Static_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[2] * 257);
    f6f0:	4b6a      	ldr	r3, [pc, #424]	; (f89c <process_ble_packet+0x7bc>)
    f6f2:	791a      	ldrb	r2, [r3, #4]
    f6f4:	4b6f      	ldr	r3, [pc, #444]	; (f8b4 <process_ble_packet+0x7d4>)
    f6f6:	0010      	movs	r0, r2
    f6f8:	4798      	blx	r3
    f6fa:	1c02      	adds	r2, r0, #0
    f6fc:	4b73      	ldr	r3, [pc, #460]	; (f8cc <process_ble_packet+0x7ec>)
    f6fe:	4974      	ldr	r1, [pc, #464]	; (f8d0 <process_ble_packet+0x7f0>)
    f700:	1c10      	adds	r0, r2, #0
    f702:	4798      	blx	r3
    f704:	1c03      	adds	r3, r0, #0
    f706:	1c1a      	adds	r2, r3, #0
    f708:	4b72      	ldr	r3, [pc, #456]	; (f8d4 <process_ble_packet+0x7f4>)
    f70a:	1c10      	adds	r0, r2, #0
    f70c:	4798      	blx	r3
    f70e:	0003      	movs	r3, r0
    f710:	b29a      	uxth	r2, r3
    f712:	4b71      	ldr	r3, [pc, #452]	; (f8d8 <process_ble_packet+0x7f8>)
    f714:	805a      	strh	r2, [r3, #2]
			Static_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
    f716:	4b61      	ldr	r3, [pc, #388]	; (f89c <process_ble_packet+0x7bc>)
    f718:	795a      	ldrb	r2, [r3, #5]
    f71a:	4b66      	ldr	r3, [pc, #408]	; (f8b4 <process_ble_packet+0x7d4>)
    f71c:	0010      	movs	r0, r2
    f71e:	4798      	blx	r3
    f720:	1c02      	adds	r2, r0, #0
    f722:	4b6a      	ldr	r3, [pc, #424]	; (f8cc <process_ble_packet+0x7ec>)
    f724:	496a      	ldr	r1, [pc, #424]	; (f8d0 <process_ble_packet+0x7f0>)
    f726:	1c10      	adds	r0, r2, #0
    f728:	4798      	blx	r3
    f72a:	1c03      	adds	r3, r0, #0
    f72c:	1c1a      	adds	r2, r3, #0
    f72e:	4b69      	ldr	r3, [pc, #420]	; (f8d4 <process_ble_packet+0x7f4>)
    f730:	1c10      	adds	r0, r2, #0
    f732:	4798      	blx	r3
    f734:	0003      	movs	r3, r0
    f736:	b29a      	uxth	r2, r3
    f738:	4b67      	ldr	r3, [pc, #412]	; (f8d8 <process_ble_packet+0x7f8>)
    f73a:	809a      	strh	r2, [r3, #4]
			Static_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
    f73c:	4b57      	ldr	r3, [pc, #348]	; (f89c <process_ble_packet+0x7bc>)
    f73e:	799a      	ldrb	r2, [r3, #6]
    f740:	4b5c      	ldr	r3, [pc, #368]	; (f8b4 <process_ble_packet+0x7d4>)
    f742:	0010      	movs	r0, r2
    f744:	4798      	blx	r3
    f746:	1c02      	adds	r2, r0, #0
    f748:	4b60      	ldr	r3, [pc, #384]	; (f8cc <process_ble_packet+0x7ec>)
    f74a:	4961      	ldr	r1, [pc, #388]	; (f8d0 <process_ble_packet+0x7f0>)
    f74c:	1c10      	adds	r0, r2, #0
    f74e:	4798      	blx	r3
    f750:	1c03      	adds	r3, r0, #0
    f752:	1c1a      	adds	r2, r3, #0
    f754:	4b5f      	ldr	r3, [pc, #380]	; (f8d4 <process_ble_packet+0x7f4>)
    f756:	1c10      	adds	r0, r2, #0
    f758:	4798      	blx	r3
    f75a:	0003      	movs	r3, r0
    f75c:	b29a      	uxth	r2, r3
    f75e:	4b5e      	ldr	r3, [pc, #376]	; (f8d8 <process_ble_packet+0x7f8>)
    f760:	80da      	strh	r2, [r3, #6]
			Static_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
    f762:	4b4e      	ldr	r3, [pc, #312]	; (f89c <process_ble_packet+0x7bc>)
    f764:	79da      	ldrb	r2, [r3, #7]
    f766:	4b53      	ldr	r3, [pc, #332]	; (f8b4 <process_ble_packet+0x7d4>)
    f768:	0010      	movs	r0, r2
    f76a:	4798      	blx	r3
    f76c:	1c02      	adds	r2, r0, #0
    f76e:	4b57      	ldr	r3, [pc, #348]	; (f8cc <process_ble_packet+0x7ec>)
    f770:	4957      	ldr	r1, [pc, #348]	; (f8d0 <process_ble_packet+0x7f0>)
    f772:	1c10      	adds	r0, r2, #0
    f774:	4798      	blx	r3
    f776:	1c03      	adds	r3, r0, #0
    f778:	1c1a      	adds	r2, r3, #0
    f77a:	4b56      	ldr	r3, [pc, #344]	; (f8d4 <process_ble_packet+0x7f4>)
    f77c:	1c10      	adds	r0, r2, #0
    f77e:	4798      	blx	r3
    f780:	0003      	movs	r3, r0
    f782:	b29a      	uxth	r2, r3
    f784:	4b54      	ldr	r3, [pc, #336]	; (f8d8 <process_ble_packet+0x7f8>)
    f786:	811a      	strh	r2, [r3, #8]
			Static_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
    f788:	4b44      	ldr	r3, [pc, #272]	; (f89c <process_ble_packet+0x7bc>)
    f78a:	7a1a      	ldrb	r2, [r3, #8]
    f78c:	4b49      	ldr	r3, [pc, #292]	; (f8b4 <process_ble_packet+0x7d4>)
    f78e:	0010      	movs	r0, r2
    f790:	4798      	blx	r3
    f792:	1c02      	adds	r2, r0, #0
    f794:	4b4d      	ldr	r3, [pc, #308]	; (f8cc <process_ble_packet+0x7ec>)
    f796:	494e      	ldr	r1, [pc, #312]	; (f8d0 <process_ble_packet+0x7f0>)
    f798:	1c10      	adds	r0, r2, #0
    f79a:	4798      	blx	r3
    f79c:	1c03      	adds	r3, r0, #0
    f79e:	1c1a      	adds	r2, r3, #0
    f7a0:	4b4c      	ldr	r3, [pc, #304]	; (f8d4 <process_ble_packet+0x7f4>)
    f7a2:	1c10      	adds	r0, r2, #0
    f7a4:	4798      	blx	r3
    f7a6:	0003      	movs	r3, r0
    f7a8:	b29a      	uxth	r2, r3
    f7aa:	4b4b      	ldr	r3, [pc, #300]	; (f8d8 <process_ble_packet+0x7f8>)
    f7ac:	815a      	strh	r2, [r3, #10]
			save_led_data();
    f7ae:	4b46      	ldr	r3, [pc, #280]	; (f8c8 <process_ble_packet+0x7e8>)
    f7b0:	4798      	blx	r3
			break;
    f7b2:	e185      	b.n	fac0 <process_ble_packet+0x9e0>
		case Apply_Control_Settings:
			AUX_ENABLED = (ble_recieve_packet.payload[0]&0x80)>>7;
    f7b4:	4b39      	ldr	r3, [pc, #228]	; (f89c <process_ble_packet+0x7bc>)
    f7b6:	789b      	ldrb	r3, [r3, #2]
    f7b8:	09db      	lsrs	r3, r3, #7
    f7ba:	b2db      	uxtb	r3, r3
    f7bc:	1e5a      	subs	r2, r3, #1
    f7be:	4193      	sbcs	r3, r2
    f7c0:	b2da      	uxtb	r2, r3
    f7c2:	4b46      	ldr	r3, [pc, #280]	; (f8dc <process_ble_packet+0x7fc>)
    f7c4:	701a      	strb	r2, [r3, #0]
			TURN_ENABLED = (ble_recieve_packet.payload[0]&0x40)>>6;
    f7c6:	4b35      	ldr	r3, [pc, #212]	; (f89c <process_ble_packet+0x7bc>)
    f7c8:	789b      	ldrb	r3, [r3, #2]
    f7ca:	119b      	asrs	r3, r3, #6
    f7cc:	2201      	movs	r2, #1
    f7ce:	4013      	ands	r3, r2
    f7d0:	1e5a      	subs	r2, r3, #1
    f7d2:	4193      	sbcs	r3, r2
    f7d4:	b2da      	uxtb	r2, r3
    f7d6:	4b42      	ldr	r3, [pc, #264]	; (f8e0 <process_ble_packet+0x800>)
    f7d8:	701a      	strb	r2, [r3, #0]
			auxControlType = (ble_recieve_packet.payload[0]&0x0F);
    f7da:	4b30      	ldr	r3, [pc, #192]	; (f89c <process_ble_packet+0x7bc>)
    f7dc:	789b      	ldrb	r3, [r3, #2]
    f7de:	220f      	movs	r2, #15
    f7e0:	4013      	ands	r3, r2
    f7e2:	b2da      	uxtb	r2, r3
    f7e4:	4b3f      	ldr	r3, [pc, #252]	; (f8e4 <process_ble_packet+0x804>)
    f7e6:	701a      	strb	r2, [r3, #0]
			auxTimedDuration = (ble_recieve_packet.payload[1]&0xFF);
    f7e8:	4b2c      	ldr	r3, [pc, #176]	; (f89c <process_ble_packet+0x7bc>)
    f7ea:	78da      	ldrb	r2, [r3, #3]
    f7ec:	4b3e      	ldr	r3, [pc, #248]	; (f8e8 <process_ble_packet+0x808>)
    f7ee:	701a      	strb	r2, [r3, #0]
			single_aux_control = (ble_recieve_packet.payload[2]&0xF0)>>4;
    f7f0:	4b2a      	ldr	r3, [pc, #168]	; (f89c <process_ble_packet+0x7bc>)
    f7f2:	791b      	ldrb	r3, [r3, #4]
    f7f4:	091b      	lsrs	r3, r3, #4
    f7f6:	b2da      	uxtb	r2, r3
    f7f8:	4b3c      	ldr	r3, [pc, #240]	; (f8ec <process_ble_packet+0x80c>)
    f7fa:	701a      	strb	r2, [r3, #0]
			single_all_control = (ble_recieve_packet.payload[2]&0x0F);
    f7fc:	4b27      	ldr	r3, [pc, #156]	; (f89c <process_ble_packet+0x7bc>)
    f7fe:	791b      	ldrb	r3, [r3, #4]
    f800:	220f      	movs	r2, #15
    f802:	4013      	ands	r3, r2
    f804:	b2da      	uxtb	r2, r3
    f806:	4b3a      	ldr	r3, [pc, #232]	; (f8f0 <process_ble_packet+0x810>)
    f808:	701a      	strb	r2, [r3, #0]
			single_head_control = (ble_recieve_packet.payload[3]&0xF0)>>4;
    f80a:	4b24      	ldr	r3, [pc, #144]	; (f89c <process_ble_packet+0x7bc>)
    f80c:	795b      	ldrb	r3, [r3, #5]
    f80e:	091b      	lsrs	r3, r3, #4
    f810:	b2da      	uxtb	r2, r3
    f812:	4b38      	ldr	r3, [pc, #224]	; (f8f4 <process_ble_packet+0x814>)
    f814:	701a      	strb	r2, [r3, #0]
			single_side_control = (ble_recieve_packet.payload[3]&0x0F);
    f816:	4b21      	ldr	r3, [pc, #132]	; (f89c <process_ble_packet+0x7bc>)
    f818:	795b      	ldrb	r3, [r3, #5]
    f81a:	220f      	movs	r2, #15
    f81c:	4013      	ands	r3, r2
    f81e:	b2da      	uxtb	r2, r3
    f820:	4b35      	ldr	r3, [pc, #212]	; (f8f8 <process_ble_packet+0x818>)
    f822:	701a      	strb	r2, [r3, #0]
			single_down_control = (ble_recieve_packet.payload[4]&0xF0)>>4;
    f824:	4b1d      	ldr	r3, [pc, #116]	; (f89c <process_ble_packet+0x7bc>)
    f826:	799b      	ldrb	r3, [r3, #6]
    f828:	091b      	lsrs	r3, r3, #4
    f82a:	b2da      	uxtb	r2, r3
    f82c:	4b33      	ldr	r3, [pc, #204]	; (f8fc <process_ble_packet+0x81c>)
    f82e:	701a      	strb	r2, [r3, #0]
			single_up_control = (ble_recieve_packet.payload[4]&0x0F);
    f830:	4b1a      	ldr	r3, [pc, #104]	; (f89c <process_ble_packet+0x7bc>)
    f832:	799b      	ldrb	r3, [r3, #6]
    f834:	220f      	movs	r2, #15
    f836:	4013      	ands	r3, r2
    f838:	b2da      	uxtb	r2, r3
    f83a:	4b31      	ldr	r3, [pc, #196]	; (f900 <process_ble_packet+0x820>)
    f83c:	701a      	strb	r2, [r3, #0]
			dual_aux_control = (ble_recieve_packet.payload[5]&0xF0)>>4;
    f83e:	4b17      	ldr	r3, [pc, #92]	; (f89c <process_ble_packet+0x7bc>)
    f840:	79db      	ldrb	r3, [r3, #7]
    f842:	091b      	lsrs	r3, r3, #4
    f844:	b2da      	uxtb	r2, r3
    f846:	4b2f      	ldr	r3, [pc, #188]	; (f904 <process_ble_packet+0x824>)
    f848:	701a      	strb	r2, [r3, #0]
			dual_all_control = (ble_recieve_packet.payload[5]&0x0F);
    f84a:	4b14      	ldr	r3, [pc, #80]	; (f89c <process_ble_packet+0x7bc>)
    f84c:	79db      	ldrb	r3, [r3, #7]
    f84e:	220f      	movs	r2, #15
    f850:	4013      	ands	r3, r2
    f852:	b2da      	uxtb	r2, r3
    f854:	4b2c      	ldr	r3, [pc, #176]	; (f908 <process_ble_packet+0x828>)
    f856:	701a      	strb	r2, [r3, #0]
			dual_head_control = (ble_recieve_packet.payload[6]&0xF0)>>4;
    f858:	4b10      	ldr	r3, [pc, #64]	; (f89c <process_ble_packet+0x7bc>)
    f85a:	7a1b      	ldrb	r3, [r3, #8]
    f85c:	091b      	lsrs	r3, r3, #4
    f85e:	b2da      	uxtb	r2, r3
    f860:	4b2a      	ldr	r3, [pc, #168]	; (f90c <process_ble_packet+0x82c>)
    f862:	701a      	strb	r2, [r3, #0]
			dual_side_control = (ble_recieve_packet.payload[6]&0x0F);
    f864:	4b0d      	ldr	r3, [pc, #52]	; (f89c <process_ble_packet+0x7bc>)
    f866:	7a1b      	ldrb	r3, [r3, #8]
    f868:	220f      	movs	r2, #15
    f86a:	4013      	ands	r3, r2
    f86c:	b2da      	uxtb	r2, r3
    f86e:	4b28      	ldr	r3, [pc, #160]	; (f910 <process_ble_packet+0x830>)
    f870:	701a      	strb	r2, [r3, #0]
			dual_down_control = (ble_recieve_packet.payload[7]&0xF0)>>4;
    f872:	4b0a      	ldr	r3, [pc, #40]	; (f89c <process_ble_packet+0x7bc>)
    f874:	7a5b      	ldrb	r3, [r3, #9]
    f876:	091b      	lsrs	r3, r3, #4
    f878:	b2da      	uxtb	r2, r3
    f87a:	4b26      	ldr	r3, [pc, #152]	; (f914 <process_ble_packet+0x834>)
    f87c:	701a      	strb	r2, [r3, #0]
			dual_up_control = (ble_recieve_packet.payload[7]&0x0F);
    f87e:	4b07      	ldr	r3, [pc, #28]	; (f89c <process_ble_packet+0x7bc>)
    f880:	7a5b      	ldrb	r3, [r3, #9]
    f882:	220f      	movs	r2, #15
    f884:	4013      	ands	r3, r2
    f886:	b2da      	uxtb	r2, r3
    f888:	4b23      	ldr	r3, [pc, #140]	; (f918 <process_ble_packet+0x838>)
    f88a:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc();
    f88c:	4b23      	ldr	r3, [pc, #140]	; (f91c <process_ble_packet+0x83c>)
    f88e:	4798      	blx	r3
			break;
    f890:	e116      	b.n	fac0 <process_ble_packet+0x9e0>
    f892:	46c0      	nop			; (mov r8, r8)
    f894:	200000a3 	.word	0x200000a3
    f898:	2000001b 	.word	0x2000001b
    f89c:	200004d4 	.word	0x200004d4
    f8a0:	20000325 	.word	0x20000325
    f8a4:	200000a2 	.word	0x200000a2
    f8a8:	20000322 	.word	0x20000322
    f8ac:	20000323 	.word	0x20000323
    f8b0:	20000324 	.word	0x20000324
    f8b4:	00015201 	.word	0x00015201
    f8b8:	000147c9 	.word	0x000147c9
    f8bc:	42c80000 	.word	0x42c80000
    f8c0:	20000028 	.word	0x20000028
    f8c4:	2000004c 	.word	0x2000004c
    f8c8:	0000e211 	.word	0x0000e211
    f8cc:	00014ba9 	.word	0x00014ba9
    f8d0:	43808000 	.word	0x43808000
    f8d4:	00014439 	.word	0x00014439
    f8d8:	2000001c 	.word	0x2000001c
    f8dc:	20000375 	.word	0x20000375
    f8e0:	20000376 	.word	0x20000376
    f8e4:	20000378 	.word	0x20000378
    f8e8:	20000379 	.word	0x20000379
    f8ec:	2000037a 	.word	0x2000037a
    f8f0:	2000037b 	.word	0x2000037b
    f8f4:	2000037c 	.word	0x2000037c
    f8f8:	2000037d 	.word	0x2000037d
    f8fc:	2000037f 	.word	0x2000037f
    f900:	2000037e 	.word	0x2000037e
    f904:	20000380 	.word	0x20000380
    f908:	20000381 	.word	0x20000381
    f90c:	20000382 	.word	0x20000382
    f910:	20000383 	.word	0x20000383
    f914:	20000385 	.word	0x20000385
    f918:	20000384 	.word	0x20000384
    f91c:	0000ecf1 	.word	0x0000ecf1
		case Custom_Values:
			LIGHTS_ON = 1;
    f920:	4b69      	ldr	r3, [pc, #420]	; (fac8 <process_ble_packet+0x9e8>)
    f922:	2201      	movs	r2, #1
    f924:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_CUSTOM;
    f926:	4b69      	ldr	r3, [pc, #420]	; (facc <process_ble_packet+0x9ec>)
    f928:	2208      	movs	r2, #8
    f92a:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f92c:	4b68      	ldr	r3, [pc, #416]	; (fad0 <process_ble_packet+0x9f0>)
    f92e:	789a      	ldrb	r2, [r3, #2]
    f930:	4b68      	ldr	r3, [pc, #416]	; (fad4 <process_ble_packet+0x9f4>)
    f932:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f934:	4b67      	ldr	r3, [pc, #412]	; (fad4 <process_ble_packet+0x9f4>)
    f936:	781b      	ldrb	r3, [r3, #0]
    f938:	111b      	asrs	r3, r3, #4
    f93a:	b2db      	uxtb	r3, r3
    f93c:	2201      	movs	r2, #1
    f93e:	4013      	ands	r3, r2
    f940:	b2da      	uxtb	r2, r3
    f942:	4b65      	ldr	r3, [pc, #404]	; (fad8 <process_ble_packet+0x9f8>)
    f944:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f946:	4b63      	ldr	r3, [pc, #396]	; (fad4 <process_ble_packet+0x9f4>)
    f948:	781b      	ldrb	r3, [r3, #0]
    f94a:	115b      	asrs	r3, r3, #5
    f94c:	b2db      	uxtb	r3, r3
    f94e:	2201      	movs	r2, #1
    f950:	4013      	ands	r3, r2
    f952:	b2da      	uxtb	r2, r3
    f954:	4b61      	ldr	r3, [pc, #388]	; (fadc <process_ble_packet+0x9fc>)
    f956:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f958:	4b5e      	ldr	r3, [pc, #376]	; (fad4 <process_ble_packet+0x9f4>)
    f95a:	781b      	ldrb	r3, [r3, #0]
    f95c:	119b      	asrs	r3, r3, #6
    f95e:	b2db      	uxtb	r3, r3
    f960:	2201      	movs	r2, #1
    f962:	4013      	ands	r3, r2
    f964:	b2da      	uxtb	r2, r3
    f966:	4b5e      	ldr	r3, [pc, #376]	; (fae0 <process_ble_packet+0xa00>)
    f968:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f96a:	4b5a      	ldr	r3, [pc, #360]	; (fad4 <process_ble_packet+0x9f4>)
    f96c:	781b      	ldrb	r3, [r3, #0]
    f96e:	09db      	lsrs	r3, r3, #7
    f970:	b2da      	uxtb	r2, r3
    f972:	4b5c      	ldr	r3, [pc, #368]	; (fae4 <process_ble_packet+0xa04>)
    f974:	701a      	strb	r2, [r3, #0]
			ColorBase[MODE_CUSTOM] = (SWITCHES & 0x0F);
    f976:	4b57      	ldr	r3, [pc, #348]	; (fad4 <process_ble_packet+0x9f4>)
    f978:	781b      	ldrb	r3, [r3, #0]
    f97a:	220f      	movs	r2, #15
    f97c:	4013      	ands	r3, r2
    f97e:	b2da      	uxtb	r2, r3
    f980:	4b59      	ldr	r3, [pc, #356]	; (fae8 <process_ble_packet+0xa08>)
    f982:	721a      	strb	r2, [r3, #8]
			RateBase[MODE_CUSTOM] = (ble_recieve_packet.payload[1] & 0xF0) >> 4;
    f984:	4b52      	ldr	r3, [pc, #328]	; (fad0 <process_ble_packet+0x9f0>)
    f986:	78db      	ldrb	r3, [r3, #3]
    f988:	091b      	lsrs	r3, r3, #4
    f98a:	b2da      	uxtb	r2, r3
    f98c:	4b57      	ldr	r3, [pc, #348]	; (faec <process_ble_packet+0xa0c>)
    f98e:	721a      	strb	r2, [r3, #8]
			BrightBase[MODE_CUSTOM] = (ble_recieve_packet.payload[1] & 0x0F);
    f990:	4b4f      	ldr	r3, [pc, #316]	; (fad0 <process_ble_packet+0x9f0>)
    f992:	78db      	ldrb	r3, [r3, #3]
    f994:	220f      	movs	r2, #15
    f996:	4013      	ands	r3, r2
    f998:	b2da      	uxtb	r2, r3
    f99a:	4b55      	ldr	r3, [pc, #340]	; (faf0 <process_ble_packet+0xa10>)
    f99c:	721a      	strb	r2, [r3, #8]
			Custom_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[2] * 257);
    f99e:	4b4c      	ldr	r3, [pc, #304]	; (fad0 <process_ble_packet+0x9f0>)
    f9a0:	791a      	ldrb	r2, [r3, #4]
    f9a2:	4b54      	ldr	r3, [pc, #336]	; (faf4 <process_ble_packet+0xa14>)
    f9a4:	0010      	movs	r0, r2
    f9a6:	4798      	blx	r3
    f9a8:	1c02      	adds	r2, r0, #0
    f9aa:	4b53      	ldr	r3, [pc, #332]	; (faf8 <process_ble_packet+0xa18>)
    f9ac:	4953      	ldr	r1, [pc, #332]	; (fafc <process_ble_packet+0xa1c>)
    f9ae:	1c10      	adds	r0, r2, #0
    f9b0:	4798      	blx	r3
    f9b2:	1c03      	adds	r3, r0, #0
    f9b4:	1c1a      	adds	r2, r3, #0
    f9b6:	4b52      	ldr	r3, [pc, #328]	; (fb00 <process_ble_packet+0xa20>)
    f9b8:	1c10      	adds	r0, r2, #0
    f9ba:	4798      	blx	r3
    f9bc:	0003      	movs	r3, r0
    f9be:	b29a      	uxth	r2, r3
    f9c0:	4b50      	ldr	r3, [pc, #320]	; (fb04 <process_ble_packet+0xa24>)
    f9c2:	801a      	strh	r2, [r3, #0]
			Custom_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
    f9c4:	4b42      	ldr	r3, [pc, #264]	; (fad0 <process_ble_packet+0x9f0>)
    f9c6:	795a      	ldrb	r2, [r3, #5]
    f9c8:	4b4a      	ldr	r3, [pc, #296]	; (faf4 <process_ble_packet+0xa14>)
    f9ca:	0010      	movs	r0, r2
    f9cc:	4798      	blx	r3
    f9ce:	1c02      	adds	r2, r0, #0
    f9d0:	4b49      	ldr	r3, [pc, #292]	; (faf8 <process_ble_packet+0xa18>)
    f9d2:	494a      	ldr	r1, [pc, #296]	; (fafc <process_ble_packet+0xa1c>)
    f9d4:	1c10      	adds	r0, r2, #0
    f9d6:	4798      	blx	r3
    f9d8:	1c03      	adds	r3, r0, #0
    f9da:	1c1a      	adds	r2, r3, #0
    f9dc:	4b48      	ldr	r3, [pc, #288]	; (fb00 <process_ble_packet+0xa20>)
    f9de:	1c10      	adds	r0, r2, #0
    f9e0:	4798      	blx	r3
    f9e2:	0003      	movs	r3, r0
    f9e4:	b29a      	uxth	r2, r3
    f9e6:	4b47      	ldr	r3, [pc, #284]	; (fb04 <process_ble_packet+0xa24>)
    f9e8:	805a      	strh	r2, [r3, #2]
			Custom_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
    f9ea:	4b39      	ldr	r3, [pc, #228]	; (fad0 <process_ble_packet+0x9f0>)
    f9ec:	799a      	ldrb	r2, [r3, #6]
    f9ee:	4b41      	ldr	r3, [pc, #260]	; (faf4 <process_ble_packet+0xa14>)
    f9f0:	0010      	movs	r0, r2
    f9f2:	4798      	blx	r3
    f9f4:	1c02      	adds	r2, r0, #0
    f9f6:	4b40      	ldr	r3, [pc, #256]	; (faf8 <process_ble_packet+0xa18>)
    f9f8:	4940      	ldr	r1, [pc, #256]	; (fafc <process_ble_packet+0xa1c>)
    f9fa:	1c10      	adds	r0, r2, #0
    f9fc:	4798      	blx	r3
    f9fe:	1c03      	adds	r3, r0, #0
    fa00:	1c1a      	adds	r2, r3, #0
    fa02:	4b3f      	ldr	r3, [pc, #252]	; (fb00 <process_ble_packet+0xa20>)
    fa04:	1c10      	adds	r0, r2, #0
    fa06:	4798      	blx	r3
    fa08:	0003      	movs	r3, r0
    fa0a:	b29a      	uxth	r2, r3
    fa0c:	4b3d      	ldr	r3, [pc, #244]	; (fb04 <process_ble_packet+0xa24>)
    fa0e:	809a      	strh	r2, [r3, #4]
			Custom_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
    fa10:	4b2f      	ldr	r3, [pc, #188]	; (fad0 <process_ble_packet+0x9f0>)
    fa12:	79da      	ldrb	r2, [r3, #7]
    fa14:	4b37      	ldr	r3, [pc, #220]	; (faf4 <process_ble_packet+0xa14>)
    fa16:	0010      	movs	r0, r2
    fa18:	4798      	blx	r3
    fa1a:	1c02      	adds	r2, r0, #0
    fa1c:	4b36      	ldr	r3, [pc, #216]	; (faf8 <process_ble_packet+0xa18>)
    fa1e:	4937      	ldr	r1, [pc, #220]	; (fafc <process_ble_packet+0xa1c>)
    fa20:	1c10      	adds	r0, r2, #0
    fa22:	4798      	blx	r3
    fa24:	1c03      	adds	r3, r0, #0
    fa26:	1c1a      	adds	r2, r3, #0
    fa28:	4b35      	ldr	r3, [pc, #212]	; (fb00 <process_ble_packet+0xa20>)
    fa2a:	1c10      	adds	r0, r2, #0
    fa2c:	4798      	blx	r3
    fa2e:	0003      	movs	r3, r0
    fa30:	b29a      	uxth	r2, r3
    fa32:	4b34      	ldr	r3, [pc, #208]	; (fb04 <process_ble_packet+0xa24>)
    fa34:	80da      	strh	r2, [r3, #6]
			Custom_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
    fa36:	4b26      	ldr	r3, [pc, #152]	; (fad0 <process_ble_packet+0x9f0>)
    fa38:	7a1a      	ldrb	r2, [r3, #8]
    fa3a:	4b2e      	ldr	r3, [pc, #184]	; (faf4 <process_ble_packet+0xa14>)
    fa3c:	0010      	movs	r0, r2
    fa3e:	4798      	blx	r3
    fa40:	1c02      	adds	r2, r0, #0
    fa42:	4b2d      	ldr	r3, [pc, #180]	; (faf8 <process_ble_packet+0xa18>)
    fa44:	492d      	ldr	r1, [pc, #180]	; (fafc <process_ble_packet+0xa1c>)
    fa46:	1c10      	adds	r0, r2, #0
    fa48:	4798      	blx	r3
    fa4a:	1c03      	adds	r3, r0, #0
    fa4c:	1c1a      	adds	r2, r3, #0
    fa4e:	4b2c      	ldr	r3, [pc, #176]	; (fb00 <process_ble_packet+0xa20>)
    fa50:	1c10      	adds	r0, r2, #0
    fa52:	4798      	blx	r3
    fa54:	0003      	movs	r3, r0
    fa56:	b29a      	uxth	r2, r3
    fa58:	4b2a      	ldr	r3, [pc, #168]	; (fb04 <process_ble_packet+0xa24>)
    fa5a:	811a      	strh	r2, [r3, #8]
			Custom_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[7] * 257);
    fa5c:	4b1c      	ldr	r3, [pc, #112]	; (fad0 <process_ble_packet+0x9f0>)
    fa5e:	7a5a      	ldrb	r2, [r3, #9]
    fa60:	4b24      	ldr	r3, [pc, #144]	; (faf4 <process_ble_packet+0xa14>)
    fa62:	0010      	movs	r0, r2
    fa64:	4798      	blx	r3
    fa66:	1c02      	adds	r2, r0, #0
    fa68:	4b23      	ldr	r3, [pc, #140]	; (faf8 <process_ble_packet+0xa18>)
    fa6a:	4924      	ldr	r1, [pc, #144]	; (fafc <process_ble_packet+0xa1c>)
    fa6c:	1c10      	adds	r0, r2, #0
    fa6e:	4798      	blx	r3
    fa70:	1c03      	adds	r3, r0, #0
    fa72:	1c1a      	adds	r2, r3, #0
    fa74:	4b22      	ldr	r3, [pc, #136]	; (fb00 <process_ble_packet+0xa20>)
    fa76:	1c10      	adds	r0, r2, #0
    fa78:	4798      	blx	r3
    fa7a:	0003      	movs	r3, r0
    fa7c:	b29a      	uxth	r2, r3
    fa7e:	4b21      	ldr	r3, [pc, #132]	; (fb04 <process_ble_packet+0xa24>)
    fa80:	815a      	strh	r2, [r3, #10]
			RateSens[MODE_CUSTOM] = ((float)(ble_recieve_packet.payload[8]))/100;
    fa82:	4b13      	ldr	r3, [pc, #76]	; (fad0 <process_ble_packet+0x9f0>)
    fa84:	7a9a      	ldrb	r2, [r3, #10]
    fa86:	4b1b      	ldr	r3, [pc, #108]	; (faf4 <process_ble_packet+0xa14>)
    fa88:	0010      	movs	r0, r2
    fa8a:	4798      	blx	r3
    fa8c:	1c02      	adds	r2, r0, #0
    fa8e:	4b1e      	ldr	r3, [pc, #120]	; (fb08 <process_ble_packet+0xa28>)
    fa90:	491e      	ldr	r1, [pc, #120]	; (fb0c <process_ble_packet+0xa2c>)
    fa92:	1c10      	adds	r0, r2, #0
    fa94:	4798      	blx	r3
    fa96:	1c03      	adds	r3, r0, #0
    fa98:	1c1a      	adds	r2, r3, #0
    fa9a:	4b1d      	ldr	r3, [pc, #116]	; (fb10 <process_ble_packet+0xa30>)
    fa9c:	621a      	str	r2, [r3, #32]
			Brightness[MODE_CUSTOM] = ((float)(ble_recieve_packet.payload[9]))/100;
    fa9e:	4b0c      	ldr	r3, [pc, #48]	; (fad0 <process_ble_packet+0x9f0>)
    faa0:	7ada      	ldrb	r2, [r3, #11]
    faa2:	4b14      	ldr	r3, [pc, #80]	; (faf4 <process_ble_packet+0xa14>)
    faa4:	0010      	movs	r0, r2
    faa6:	4798      	blx	r3
    faa8:	1c02      	adds	r2, r0, #0
    faaa:	4b17      	ldr	r3, [pc, #92]	; (fb08 <process_ble_packet+0xa28>)
    faac:	4917      	ldr	r1, [pc, #92]	; (fb0c <process_ble_packet+0xa2c>)
    faae:	1c10      	adds	r0, r2, #0
    fab0:	4798      	blx	r3
    fab2:	1c03      	adds	r3, r0, #0
    fab4:	1c1a      	adds	r2, r3, #0
    fab6:	4b17      	ldr	r3, [pc, #92]	; (fb14 <process_ble_packet+0xa34>)
    fab8:	621a      	str	r2, [r3, #32]
			save_led_data();
    faba:	4b17      	ldr	r3, [pc, #92]	; (fb18 <process_ble_packet+0xa38>)
    fabc:	4798      	blx	r3
			break;
    fabe:	46c0      	nop			; (mov r8, r8)
	}
}
    fac0:	46c0      	nop			; (mov r8, r8)
    fac2:	46bd      	mov	sp, r7
    fac4:	bd80      	pop	{r7, pc}
    fac6:	46c0      	nop			; (mov r8, r8)
    fac8:	200000a3 	.word	0x200000a3
    facc:	2000001b 	.word	0x2000001b
    fad0:	200004d4 	.word	0x200004d4
    fad4:	20000325 	.word	0x20000325
    fad8:	200000a2 	.word	0x200000a2
    fadc:	20000322 	.word	0x20000322
    fae0:	20000323 	.word	0x20000323
    fae4:	20000324 	.word	0x20000324
    fae8:	20000070 	.word	0x20000070
    faec:	20000088 	.word	0x20000088
    faf0:	2000007c 	.word	0x2000007c
    faf4:	00015201 	.word	0x00015201
    faf8:	00014ba9 	.word	0x00014ba9
    fafc:	43808000 	.word	0x43808000
    fb00:	00014439 	.word	0x00014439
    fb04:	20000094 	.word	0x20000094
    fb08:	000147c9 	.word	0x000147c9
    fb0c:	42c80000 	.word	0x42c80000
    fb10:	20000028 	.word	0x20000028
    fb14:	2000004c 	.word	0x2000004c
    fb18:	0000e211 	.word	0x0000e211

0000fb1c <read_ble_packet>:

void read_ble_packet(){
    fb1c:	b580      	push	{r7, lr}
    fb1e:	af00      	add	r7, sp, #0
	if(check_ble_packet_recieved()){
    fb20:	4b28      	ldr	r3, [pc, #160]	; (fbc4 <read_ble_packet+0xa8>)
    fb22:	4798      	blx	r3
    fb24:	1e03      	subs	r3, r0, #0
    fb26:	d023      	beq.n	fb70 <read_ble_packet+0x54>
		ble_recieve_packet.size = ble_USART_read_buffer[1];
    fb28:	4b27      	ldr	r3, [pc, #156]	; (fbc8 <read_ble_packet+0xac>)
    fb2a:	785a      	ldrb	r2, [r3, #1]
    fb2c:	4b27      	ldr	r3, [pc, #156]	; (fbcc <read_ble_packet+0xb0>)
    fb2e:	705a      	strb	r2, [r3, #1]
		ble_recieve_packet.ID = ble_USART_read_buffer[2];
    fb30:	4b25      	ldr	r3, [pc, #148]	; (fbc8 <read_ble_packet+0xac>)
    fb32:	789a      	ldrb	r2, [r3, #2]
    fb34:	4b25      	ldr	r3, [pc, #148]	; (fbcc <read_ble_packet+0xb0>)
    fb36:	701a      	strb	r2, [r3, #0]
		memcpy(ble_recieve_packet.payload, ble_USART_read_buffer+3, ble_recieve_packet.size);
    fb38:	4925      	ldr	r1, [pc, #148]	; (fbd0 <read_ble_packet+0xb4>)
    fb3a:	4b24      	ldr	r3, [pc, #144]	; (fbcc <read_ble_packet+0xb0>)
    fb3c:	785b      	ldrb	r3, [r3, #1]
    fb3e:	001a      	movs	r2, r3
    fb40:	4b24      	ldr	r3, [pc, #144]	; (fbd4 <read_ble_packet+0xb8>)
    fb42:	0018      	movs	r0, r3
    fb44:	4b24      	ldr	r3, [pc, #144]	; (fbd8 <read_ble_packet+0xbc>)
    fb46:	4798      	blx	r3
		process_ble_packet();
    fb48:	4b24      	ldr	r3, [pc, #144]	; (fbdc <read_ble_packet+0xc0>)
    fb4a:	4798      	blx	r3
			
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
    fb4c:	4b1e      	ldr	r3, [pc, #120]	; (fbc8 <read_ble_packet+0xac>)
    fb4e:	2213      	movs	r2, #19
    fb50:	2100      	movs	r1, #0
    fb52:	0018      	movs	r0, r3
    fb54:	4b22      	ldr	r3, [pc, #136]	; (fbe0 <read_ble_packet+0xc4>)
    fb56:	4798      	blx	r3
		//Stop listening to the BLE UART
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
    fb58:	4b22      	ldr	r3, [pc, #136]	; (fbe4 <read_ble_packet+0xc8>)
    fb5a:	2100      	movs	r1, #0
    fb5c:	0018      	movs	r0, r3
    fb5e:	4b22      	ldr	r3, [pc, #136]	; (fbe8 <read_ble_packet+0xcc>)
    fb60:	4798      	blx	r3
		// Start listening to the BLE UART
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
    fb62:	4919      	ldr	r1, [pc, #100]	; (fbc8 <read_ble_packet+0xac>)
    fb64:	4b1f      	ldr	r3, [pc, #124]	; (fbe4 <read_ble_packet+0xc8>)
    fb66:	2213      	movs	r2, #19
    fb68:	0018      	movs	r0, r3
    fb6a:	4b20      	ldr	r3, [pc, #128]	; (fbec <read_ble_packet+0xd0>)
    fb6c:	4798      	blx	r3
		//Stop listening to the BLE UART
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
		// Start listening to the BLE UART
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
	}
    fb6e:	e025      	b.n	fbbc <read_ble_packet+0xa0>
	} else if(check_ble_AT_recieved()){
    fb70:	4b1f      	ldr	r3, [pc, #124]	; (fbf0 <read_ble_packet+0xd4>)
    fb72:	4798      	blx	r3
    fb74:	1e03      	subs	r3, r0, #0
    fb76:	d021      	beq.n	fbbc <read_ble_packet+0xa0>
		if(!BLE_CONFIGURED && OK_EXPECTED){
    fb78:	4b1e      	ldr	r3, [pc, #120]	; (fbf4 <read_ble_packet+0xd8>)
    fb7a:	781b      	ldrb	r3, [r3, #0]
    fb7c:	2201      	movs	r2, #1
    fb7e:	4053      	eors	r3, r2
    fb80:	b2db      	uxtb	r3, r3
    fb82:	2b00      	cmp	r3, #0
    fb84:	d009      	beq.n	fb9a <read_ble_packet+0x7e>
    fb86:	4b1c      	ldr	r3, [pc, #112]	; (fbf8 <read_ble_packet+0xdc>)
    fb88:	781b      	ldrb	r3, [r3, #0]
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d005      	beq.n	fb9a <read_ble_packet+0x7e>
			BLE_CONFIGURED = true;
    fb8e:	4b19      	ldr	r3, [pc, #100]	; (fbf4 <read_ble_packet+0xd8>)
    fb90:	2201      	movs	r2, #1
    fb92:	701a      	strb	r2, [r3, #0]
			OK_EXPECTED = false;
    fb94:	4b18      	ldr	r3, [pc, #96]	; (fbf8 <read_ble_packet+0xdc>)
    fb96:	2200      	movs	r2, #0
    fb98:	701a      	strb	r2, [r3, #0]
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
    fb9a:	4b0b      	ldr	r3, [pc, #44]	; (fbc8 <read_ble_packet+0xac>)
    fb9c:	2213      	movs	r2, #19
    fb9e:	2100      	movs	r1, #0
    fba0:	0018      	movs	r0, r3
    fba2:	4b0f      	ldr	r3, [pc, #60]	; (fbe0 <read_ble_packet+0xc4>)
    fba4:	4798      	blx	r3
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
    fba6:	4b0f      	ldr	r3, [pc, #60]	; (fbe4 <read_ble_packet+0xc8>)
    fba8:	2100      	movs	r1, #0
    fbaa:	0018      	movs	r0, r3
    fbac:	4b0e      	ldr	r3, [pc, #56]	; (fbe8 <read_ble_packet+0xcc>)
    fbae:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
    fbb0:	4905      	ldr	r1, [pc, #20]	; (fbc8 <read_ble_packet+0xac>)
    fbb2:	4b0c      	ldr	r3, [pc, #48]	; (fbe4 <read_ble_packet+0xc8>)
    fbb4:	2213      	movs	r2, #19
    fbb6:	0018      	movs	r0, r3
    fbb8:	4b0c      	ldr	r3, [pc, #48]	; (fbec <read_ble_packet+0xd0>)
    fbba:	4798      	blx	r3
    fbbc:	46c0      	nop			; (mov r8, r8)
    fbbe:	46bd      	mov	sp, r7
    fbc0:	bd80      	pop	{r7, pc}
    fbc2:	46c0      	nop			; (mov r8, r8)
    fbc4:	0000f0ad 	.word	0x0000f0ad
    fbc8:	20000f08 	.word	0x20000f08
    fbcc:	200004d4 	.word	0x200004d4
    fbd0:	20000f0b 	.word	0x20000f0b
    fbd4:	200004d6 	.word	0x200004d6
    fbd8:	00016fe5 	.word	0x00016fe5
    fbdc:	0000f0e1 	.word	0x0000f0e1
    fbe0:	00016ff7 	.word	0x00016ff7
    fbe4:	200004a0 	.word	0x200004a0
    fbe8:	00006615 	.word	0x00006615
    fbec:	000065cd 	.word	0x000065cd
    fbf0:	0000f081 	.word	0x0000f081
    fbf4:	200003ad 	.word	0x200003ad
    fbf8:	200003b4 	.word	0x200003b4

0000fbfc <configure_ble_usart>:
	}
}

// Configure SERCOM5 as USART for BLE module
void configure_ble_usart(int baud)
{
    fbfc:	b580      	push	{r7, lr}
    fbfe:	b092      	sub	sp, #72	; 0x48
    fc00:	af00      	add	r7, sp, #0
    fc02:	6078      	str	r0, [r7, #4]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    fc04:	2308      	movs	r3, #8
    fc06:	18fb      	adds	r3, r7, r3
    fc08:	0018      	movs	r0, r3
    fc0a:	4b17      	ldr	r3, [pc, #92]	; (fc68 <configure_ble_usart+0x6c>)
    fc0c:	4798      	blx	r3
	config_usart.baudrate    = baud;
    fc0e:	687a      	ldr	r2, [r7, #4]
    fc10:	2308      	movs	r3, #8
    fc12:	18fb      	adds	r3, r7, r3
    fc14:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    fc16:	2308      	movs	r3, #8
    fc18:	18fb      	adds	r3, r7, r3
    fc1a:	22c4      	movs	r2, #196	; 0xc4
    fc1c:	0392      	lsls	r2, r2, #14
    fc1e:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    fc20:	2308      	movs	r3, #8
    fc22:	18fb      	adds	r3, r7, r3
    fc24:	2201      	movs	r2, #1
    fc26:	4252      	negs	r2, r2
    fc28:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    fc2a:	2308      	movs	r3, #8
    fc2c:	18fb      	adds	r3, r7, r3
    fc2e:	2201      	movs	r2, #1
    fc30:	4252      	negs	r2, r2
    fc32:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20C_SERCOM5_PAD2;
    fc34:	2308      	movs	r3, #8
    fc36:	18fb      	adds	r3, r7, r3
    fc38:	4a0c      	ldr	r2, [pc, #48]	; (fc6c <configure_ble_usart+0x70>)
    fc3a:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21C_SERCOM5_PAD3;
    fc3c:	2308      	movs	r3, #8
    fc3e:	18fb      	adds	r3, r7, r3
    fc40:	4a0b      	ldr	r2, [pc, #44]	; (fc70 <configure_ble_usart+0x74>)
    fc42:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&ble_usart,SERCOM5, &config_usart) != STATUS_OK)
    fc44:	46c0      	nop			; (mov r8, r8)
    fc46:	2308      	movs	r3, #8
    fc48:	18fa      	adds	r2, r7, r3
    fc4a:	490a      	ldr	r1, [pc, #40]	; (fc74 <configure_ble_usart+0x78>)
    fc4c:	4b0a      	ldr	r3, [pc, #40]	; (fc78 <configure_ble_usart+0x7c>)
    fc4e:	0018      	movs	r0, r3
    fc50:	4b0a      	ldr	r3, [pc, #40]	; (fc7c <configure_ble_usart+0x80>)
    fc52:	4798      	blx	r3
    fc54:	1e03      	subs	r3, r0, #0
    fc56:	d1f6      	bne.n	fc46 <configure_ble_usart+0x4a>
	{}
	usart_enable(&ble_usart);
    fc58:	4b07      	ldr	r3, [pc, #28]	; (fc78 <configure_ble_usart+0x7c>)
    fc5a:	0018      	movs	r0, r3
    fc5c:	4b08      	ldr	r3, [pc, #32]	; (fc80 <configure_ble_usart+0x84>)
    fc5e:	4798      	blx	r3
}
    fc60:	46c0      	nop			; (mov r8, r8)
    fc62:	46bd      	mov	sp, r7
    fc64:	b012      	add	sp, #72	; 0x48
    fc66:	bd80      	pop	{r7, pc}
    fc68:	00009099 	.word	0x00009099
    fc6c:	00140002 	.word	0x00140002
    fc70:	00150002 	.word	0x00150002
    fc74:	42001c00 	.word	0x42001c00
    fc78:	200004a0 	.word	0x200004a0
    fc7c:	000060e5 	.word	0x000060e5
    fc80:	00009159 	.word	0x00009159

0000fc84 <configure_BLE_module>:

void configure_BLE_module()
{
    fc84:	b590      	push	{r4, r7, lr}
    fc86:	b09b      	sub	sp, #108	; 0x6c
    fc88:	af00      	add	r7, sp, #0
	int baud = 0;
    fc8a:	2300      	movs	r3, #0
    fc8c:	667b      	str	r3, [r7, #100]	; 0x64
	int bauds[5] = {9600, 19200, 38400, 57600, 115200};
    fc8e:	232c      	movs	r3, #44	; 0x2c
    fc90:	18fb      	adds	r3, r7, r3
    fc92:	4a75      	ldr	r2, [pc, #468]	; (fe68 <configure_BLE_module+0x1e4>)
    fc94:	ca13      	ldmia	r2!, {r0, r1, r4}
    fc96:	c313      	stmia	r3!, {r0, r1, r4}
    fc98:	ca03      	ldmia	r2!, {r0, r1}
    fc9a:	c303      	stmia	r3!, {r0, r1}
	while(1){
		configure_ble_usart(bauds[baud]);
    fc9c:	232c      	movs	r3, #44	; 0x2c
    fc9e:	18fb      	adds	r3, r7, r3
    fca0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    fca2:	0092      	lsls	r2, r2, #2
    fca4:	58d3      	ldr	r3, [r2, r3]
    fca6:	0018      	movs	r0, r3
    fca8:	4b70      	ldr	r3, [pc, #448]	; (fe6c <configure_BLE_module+0x1e8>)
    fcaa:	4798      	blx	r3
		//configure_BLE_usart_callbacks();
		//usart_read_buffer_job(&ble_usart, (uint8_t *)ble_USART_read_buffer, (uint16_t)1);
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
    fcac:	4970      	ldr	r1, [pc, #448]	; (fe70 <configure_BLE_module+0x1ec>)
    fcae:	4b71      	ldr	r3, [pc, #452]	; (fe74 <configure_BLE_module+0x1f0>)
    fcb0:	2213      	movs	r2, #19
    fcb2:	0018      	movs	r0, r3
    fcb4:	4b70      	ldr	r3, [pc, #448]	; (fe78 <configure_BLE_module+0x1f4>)
    fcb6:	4798      	blx	r3

		baud += 1;
    fcb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fcba:	3301      	adds	r3, #1
    fcbc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud > 4)
    fcbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fcc0:	2b04      	cmp	r3, #4
    fcc2:	dd01      	ble.n	fcc8 <configure_BLE_module+0x44>
			baud = 0;
    fcc4:	2300      	movs	r3, #0
    fcc6:	667b      	str	r3, [r7, #100]	; 0x64
			
		for(int i = 0; i < 10000; ++i);
    fcc8:	2300      	movs	r3, #0
    fcca:	663b      	str	r3, [r7, #96]	; 0x60
    fccc:	e002      	b.n	fcd4 <configure_BLE_module+0x50>
    fcce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fcd0:	3301      	adds	r3, #1
    fcd2:	663b      	str	r3, [r7, #96]	; 0x60
    fcd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fcd6:	4a69      	ldr	r2, [pc, #420]	; (fe7c <configure_BLE_module+0x1f8>)
    fcd8:	4293      	cmp	r3, r2
    fcda:	ddf8      	ble.n	fcce <configure_BLE_module+0x4a>
		else if(BLE_BAUD == 38400)
			strcpy(string1,"AT+BAUD2");
		else if(BLE_BAUD == 57600)
			strcpy(string1,"AT+BAUD3");
		else if(BLE_BAUD == 115200)
			strcpy(string1,"AT+BAUD4");
    fcdc:	2324      	movs	r3, #36	; 0x24
    fcde:	18fb      	adds	r3, r7, r3
    fce0:	4a67      	ldr	r2, [pc, #412]	; (fe80 <configure_BLE_module+0x1fc>)
    fce2:	ca03      	ldmia	r2!, {r0, r1}
    fce4:	c303      	stmia	r3!, {r0, r1}
    fce6:	7812      	ldrb	r2, [r2, #0]
    fce8:	701a      	strb	r2, [r3, #0]
		OK_EXPECTED = true;
    fcea:	4b66      	ldr	r3, [pc, #408]	; (fe84 <configure_BLE_module+0x200>)
    fcec:	2201      	movs	r2, #1
    fcee:	701a      	strb	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string1, sizeof(string1))!=STATUS_OK){}
    fcf0:	46c0      	nop			; (mov r8, r8)
    fcf2:	2324      	movs	r3, #36	; 0x24
    fcf4:	18f9      	adds	r1, r7, r3
    fcf6:	4b5f      	ldr	r3, [pc, #380]	; (fe74 <configure_BLE_module+0x1f0>)
    fcf8:	2208      	movs	r2, #8
    fcfa:	0018      	movs	r0, r3
    fcfc:	4b62      	ldr	r3, [pc, #392]	; (fe88 <configure_BLE_module+0x204>)
    fcfe:	4798      	blx	r3
    fd00:	1e03      	subs	r3, r0, #0
    fd02:	d1f6      	bne.n	fcf2 <configure_BLE_module+0x6e>
		for(int i = 0; i < 25000; ++i);
    fd04:	2300      	movs	r3, #0
    fd06:	65fb      	str	r3, [r7, #92]	; 0x5c
    fd08:	e002      	b.n	fd10 <configure_BLE_module+0x8c>
    fd0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fd0c:	3301      	adds	r3, #1
    fd0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    fd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fd12:	4a5e      	ldr	r2, [pc, #376]	; (fe8c <configure_BLE_module+0x208>)
    fd14:	4293      	cmp	r3, r2
    fd16:	ddf8      	ble.n	fd0a <configure_BLE_module+0x86>
		
		OK_EXPECTED = true;
    fd18:	4b5a      	ldr	r3, [pc, #360]	; (fe84 <configure_BLE_module+0x200>)
    fd1a:	2201      	movs	r2, #1
    fd1c:	701a      	strb	r2, [r3, #0]
		uint8_t string2[14] = "AT+NAMETelTail";
    fd1e:	2314      	movs	r3, #20
    fd20:	18fb      	adds	r3, r7, r3
    fd22:	4a5b      	ldr	r2, [pc, #364]	; (fe90 <configure_BLE_module+0x20c>)
    fd24:	ca13      	ldmia	r2!, {r0, r1, r4}
    fd26:	c313      	stmia	r3!, {r0, r1, r4}
    fd28:	8812      	ldrh	r2, [r2, #0]
    fd2a:	801a      	strh	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string2, sizeof(string2))!=STATUS_OK){}
    fd2c:	46c0      	nop			; (mov r8, r8)
    fd2e:	2314      	movs	r3, #20
    fd30:	18f9      	adds	r1, r7, r3
    fd32:	4b50      	ldr	r3, [pc, #320]	; (fe74 <configure_BLE_module+0x1f0>)
    fd34:	220e      	movs	r2, #14
    fd36:	0018      	movs	r0, r3
    fd38:	4b53      	ldr	r3, [pc, #332]	; (fe88 <configure_BLE_module+0x204>)
    fd3a:	4798      	blx	r3
    fd3c:	1e03      	subs	r3, r0, #0
    fd3e:	d1f6      	bne.n	fd2e <configure_BLE_module+0xaa>
		for(int i = 0; i < 25000; ++i);
    fd40:	2300      	movs	r3, #0
    fd42:	65bb      	str	r3, [r7, #88]	; 0x58
    fd44:	e002      	b.n	fd4c <configure_BLE_module+0xc8>
    fd46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    fd48:	3301      	adds	r3, #1
    fd4a:	65bb      	str	r3, [r7, #88]	; 0x58
    fd4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    fd4e:	4a4f      	ldr	r2, [pc, #316]	; (fe8c <configure_BLE_module+0x208>)
    fd50:	4293      	cmp	r3, r2
    fd52:	ddf8      	ble.n	fd46 <configure_BLE_module+0xc2>
		
		OK_EXPECTED = true;
    fd54:	4b4b      	ldr	r3, [pc, #300]	; (fe84 <configure_BLE_module+0x200>)
    fd56:	2201      	movs	r2, #1
    fd58:	701a      	strb	r2, [r3, #0]
		uint8_t string3[8] = "AT+POWE3"; // Default = 2
    fd5a:	230c      	movs	r3, #12
    fd5c:	18fb      	adds	r3, r7, r3
    fd5e:	4a4d      	ldr	r2, [pc, #308]	; (fe94 <configure_BLE_module+0x210>)
    fd60:	ca03      	ldmia	r2!, {r0, r1}
    fd62:	c303      	stmia	r3!, {r0, r1}
		while(usart_write_buffer_wait(&ble_usart, string3, sizeof(string3))!=STATUS_OK){}
    fd64:	46c0      	nop			; (mov r8, r8)
    fd66:	230c      	movs	r3, #12
    fd68:	18f9      	adds	r1, r7, r3
    fd6a:	4b42      	ldr	r3, [pc, #264]	; (fe74 <configure_BLE_module+0x1f0>)
    fd6c:	2208      	movs	r2, #8
    fd6e:	0018      	movs	r0, r3
    fd70:	4b45      	ldr	r3, [pc, #276]	; (fe88 <configure_BLE_module+0x204>)
    fd72:	4798      	blx	r3
    fd74:	1e03      	subs	r3, r0, #0
    fd76:	d1f6      	bne.n	fd66 <configure_BLE_module+0xe2>
		for(int i = 0; i < 25000; ++i);
    fd78:	2300      	movs	r3, #0
    fd7a:	657b      	str	r3, [r7, #84]	; 0x54
    fd7c:	e002      	b.n	fd84 <configure_BLE_module+0x100>
    fd7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fd80:	3301      	adds	r3, #1
    fd82:	657b      	str	r3, [r7, #84]	; 0x54
    fd84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fd86:	4a41      	ldr	r2, [pc, #260]	; (fe8c <configure_BLE_module+0x208>)
    fd88:	4293      	cmp	r3, r2
    fd8a:	ddf8      	ble.n	fd7e <configure_BLE_module+0xfa>
		
		read_ble_packet();
    fd8c:	4b42      	ldr	r3, [pc, #264]	; (fe98 <configure_BLE_module+0x214>)
    fd8e:	4798      	blx	r3
		if(!BLE_CONFIGURED){
    fd90:	4b42      	ldr	r3, [pc, #264]	; (fe9c <configure_BLE_module+0x218>)
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	2201      	movs	r2, #1
    fd96:	4053      	eors	r3, r2
    fd98:	b2db      	uxtb	r3, r3
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d00e      	beq.n	fdbc <configure_BLE_module+0x138>
			usart_disable(&ble_usart);
    fd9e:	4b35      	ldr	r3, [pc, #212]	; (fe74 <configure_BLE_module+0x1f0>)
    fda0:	0018      	movs	r0, r3
    fda2:	4b3f      	ldr	r3, [pc, #252]	; (fea0 <configure_BLE_module+0x21c>)
    fda4:	4798      	blx	r3
			for(int i = 0; i < 10000; ++i);
    fda6:	2300      	movs	r3, #0
    fda8:	653b      	str	r3, [r7, #80]	; 0x50
    fdaa:	e002      	b.n	fdb2 <configure_BLE_module+0x12e>
    fdac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    fdae:	3301      	adds	r3, #1
    fdb0:	653b      	str	r3, [r7, #80]	; 0x50
    fdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    fdb4:	4a31      	ldr	r2, [pc, #196]	; (fe7c <configure_BLE_module+0x1f8>)
    fdb6:	4293      	cmp	r3, r2
    fdb8:	ddf8      	ble.n	fdac <configure_BLE_module+0x128>
	while(1){
    fdba:	e76f      	b.n	fc9c <configure_BLE_module+0x18>
		}
		else{
			uint8_t string4[8] = "AT+RESET";
    fdbc:	1d3b      	adds	r3, r7, #4
    fdbe:	4a39      	ldr	r2, [pc, #228]	; (fea4 <configure_BLE_module+0x220>)
    fdc0:	ca03      	ldmia	r2!, {r0, r1}
    fdc2:	c303      	stmia	r3!, {r0, r1}
			while(usart_write_buffer_wait(&ble_usart, string4, sizeof(string4))!=STATUS_OK){}
    fdc4:	46c0      	nop			; (mov r8, r8)
    fdc6:	1d39      	adds	r1, r7, #4
    fdc8:	4b2a      	ldr	r3, [pc, #168]	; (fe74 <configure_BLE_module+0x1f0>)
    fdca:	2208      	movs	r2, #8
    fdcc:	0018      	movs	r0, r3
    fdce:	4b2e      	ldr	r3, [pc, #184]	; (fe88 <configure_BLE_module+0x204>)
    fdd0:	4798      	blx	r3
    fdd2:	1e03      	subs	r3, r0, #0
    fdd4:	d1f7      	bne.n	fdc6 <configure_BLE_module+0x142>
			for(int i = 0; i < 25000; ++i);
    fdd6:	2300      	movs	r3, #0
    fdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    fdda:	e002      	b.n	fde2 <configure_BLE_module+0x15e>
    fddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    fdde:	3301      	adds	r3, #1
    fde0:	64fb      	str	r3, [r7, #76]	; 0x4c
    fde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    fde4:	4a29      	ldr	r2, [pc, #164]	; (fe8c <configure_BLE_module+0x208>)
    fde6:	4293      	cmp	r3, r2
    fde8:	ddf8      	ble.n	fddc <configure_BLE_module+0x158>
			usart_disable(&ble_usart);
    fdea:	4b22      	ldr	r3, [pc, #136]	; (fe74 <configure_BLE_module+0x1f0>)
    fdec:	0018      	movs	r0, r3
    fdee:	4b2c      	ldr	r3, [pc, #176]	; (fea0 <configure_BLE_module+0x21c>)
    fdf0:	4798      	blx	r3
			for(int i = 0; i < 500000; ++i);
    fdf2:	2300      	movs	r3, #0
    fdf4:	64bb      	str	r3, [r7, #72]	; 0x48
    fdf6:	e002      	b.n	fdfe <configure_BLE_module+0x17a>
    fdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fdfa:	3301      	adds	r3, #1
    fdfc:	64bb      	str	r3, [r7, #72]	; 0x48
    fdfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fe00:	4a29      	ldr	r2, [pc, #164]	; (fea8 <configure_BLE_module+0x224>)
    fe02:	4293      	cmp	r3, r2
    fe04:	ddf8      	ble.n	fdf8 <configure_BLE_module+0x174>
			configure_ble_usart(BLE_BAUD);
    fe06:	23e1      	movs	r3, #225	; 0xe1
    fe08:	025b      	lsls	r3, r3, #9
    fe0a:	0018      	movs	r0, r3
    fe0c:	4b17      	ldr	r3, [pc, #92]	; (fe6c <configure_BLE_module+0x1e8>)
    fe0e:	4798      	blx	r3
			for(int i = 0; i < 5000; ++i);
    fe10:	2300      	movs	r3, #0
    fe12:	647b      	str	r3, [r7, #68]	; 0x44
    fe14:	e002      	b.n	fe1c <configure_BLE_module+0x198>
    fe16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe18:	3301      	adds	r3, #1
    fe1a:	647b      	str	r3, [r7, #68]	; 0x44
    fe1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe1e:	4a23      	ldr	r2, [pc, #140]	; (feac <configure_BLE_module+0x228>)
    fe20:	4293      	cmp	r3, r2
    fe22:	ddf8      	ble.n	fe16 <configure_BLE_module+0x192>
			uint8_t string5[2] = "AT";
    fe24:	003b      	movs	r3, r7
    fe26:	4a22      	ldr	r2, [pc, #136]	; (feb0 <configure_BLE_module+0x22c>)
    fe28:	801a      	strh	r2, [r3, #0]
			while(usart_write_buffer_wait(&ble_usart, string5, sizeof(string5))!=STATUS_OK){}
    fe2a:	46c0      	nop			; (mov r8, r8)
    fe2c:	0039      	movs	r1, r7
    fe2e:	4b11      	ldr	r3, [pc, #68]	; (fe74 <configure_BLE_module+0x1f0>)
    fe30:	2202      	movs	r2, #2
    fe32:	0018      	movs	r0, r3
    fe34:	4b14      	ldr	r3, [pc, #80]	; (fe88 <configure_BLE_module+0x204>)
    fe36:	4798      	blx	r3
    fe38:	1e03      	subs	r3, r0, #0
    fe3a:	d1f7      	bne.n	fe2c <configure_BLE_module+0x1a8>
			for(int i = 0; i < 10000; ++i);
    fe3c:	2300      	movs	r3, #0
    fe3e:	643b      	str	r3, [r7, #64]	; 0x40
    fe40:	e002      	b.n	fe48 <configure_BLE_module+0x1c4>
    fe42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe44:	3301      	adds	r3, #1
    fe46:	643b      	str	r3, [r7, #64]	; 0x40
    fe48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe4a:	4a0c      	ldr	r2, [pc, #48]	; (fe7c <configure_BLE_module+0x1f8>)
    fe4c:	4293      	cmp	r3, r2
    fe4e:	ddf8      	ble.n	fe42 <configure_BLE_module+0x1be>
			//configure_BLE_usart_callbacks();
			usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
    fe50:	4907      	ldr	r1, [pc, #28]	; (fe70 <configure_BLE_module+0x1ec>)
    fe52:	4b08      	ldr	r3, [pc, #32]	; (fe74 <configure_BLE_module+0x1f0>)
    fe54:	2213      	movs	r2, #19
    fe56:	0018      	movs	r0, r3
    fe58:	4b07      	ldr	r3, [pc, #28]	; (fe78 <configure_BLE_module+0x1f4>)
    fe5a:	4798      	blx	r3
			break;
    fe5c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    fe5e:	46c0      	nop			; (mov r8, r8)
    fe60:	46bd      	mov	sp, r7
    fe62:	b01b      	add	sp, #108	; 0x6c
    fe64:	bd90      	pop	{r4, r7, pc}
    fe66:	46c0      	nop			; (mov r8, r8)
    fe68:	000175dc 	.word	0x000175dc
    fe6c:	0000fbfd 	.word	0x0000fbfd
    fe70:	20000f08 	.word	0x20000f08
    fe74:	200004a0 	.word	0x200004a0
    fe78:	000065cd 	.word	0x000065cd
    fe7c:	0000270f 	.word	0x0000270f
    fe80:	000175d0 	.word	0x000175d0
    fe84:	200003b4 	.word	0x200003b4
    fe88:	000063bd 	.word	0x000063bd
    fe8c:	000061a7 	.word	0x000061a7
    fe90:	000175f0 	.word	0x000175f0
    fe94:	00017600 	.word	0x00017600
    fe98:	0000fb1d 	.word	0x0000fb1d
    fe9c:	200003ad 	.word	0x200003ad
    fea0:	000091a1 	.word	0x000091a1
    fea4:	0001760c 	.word	0x0001760c
    fea8:	0007a11f 	.word	0x0007a11f
    feac:	00001387 	.word	0x00001387
    feb0:	00005441 	.word	0x00005441

0000feb4 <configure_ADC>:
	usart_enable_callback(&ble_usart, USART_CALLBACK_BUFFER_RECEIVED);
}

// Configure the light sensor port as an input
void configure_ADC(void)
{
    feb4:	b580      	push	{r7, lr}
    feb6:	b08e      	sub	sp, #56	; 0x38
    feb8:	af00      	add	r7, sp, #0
	for(int i = 0; i < LGHTsamples; ++i){
    feba:	2300      	movs	r3, #0
    febc:	637b      	str	r3, [r7, #52]	; 0x34
    febe:	e007      	b.n	fed0 <configure_ADC+0x1c>
		LGHTaverage[i] = 0;
    fec0:	4b1a      	ldr	r3, [pc, #104]	; (ff2c <configure_ADC+0x78>)
    fec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fec4:	0052      	lsls	r2, r2, #1
    fec6:	2100      	movs	r1, #0
    fec8:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < LGHTsamples; ++i){
    feca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fecc:	3301      	adds	r3, #1
    fece:	637b      	str	r3, [r7, #52]	; 0x34
    fed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fed2:	2b95      	cmp	r3, #149	; 0x95
    fed4:	ddf4      	ble.n	fec0 <configure_ADC+0xc>
	}

	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    fed6:	1d3b      	adds	r3, r7, #4
    fed8:	0018      	movs	r0, r3
    feda:	4b15      	ldr	r3, [pc, #84]	; (ff30 <configure_ADC+0x7c>)
    fedc:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    fede:	1d3b      	adds	r3, r7, #4
    fee0:	2202      	movs	r2, #2
    fee2:	705a      	strb	r2, [r3, #1]
	config_adc.resolution = ADC_RESOLUTION_16BIT;
    fee4:	1d3b      	adds	r3, r7, #4
    fee6:	2210      	movs	r2, #16
    fee8:	711a      	strb	r2, [r3, #4]
	config_adc.differential_mode = DISABLE;
    feea:	1d3b      	adds	r3, r7, #4
    feec:	2200      	movs	r2, #0
    feee:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    fef0:	1d3b      	adds	r3, r7, #4
    fef2:	22c0      	movs	r2, #192	; 0xc0
    fef4:	0152      	lsls	r2, r2, #5
    fef6:	81da      	strh	r2, [r3, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN17;
    fef8:	1d3b      	adds	r3, r7, #4
    fefa:	2211      	movs	r2, #17
    fefc:	731a      	strb	r2, [r3, #12]
	config_adc.freerunning = DISABLE;
    fefe:	1d3b      	adds	r3, r7, #4
    ff00:	2200      	movs	r2, #0
    ff02:	751a      	strb	r2, [r3, #20]
	config_adc.run_in_standby = true;
    ff04:	1d3b      	adds	r3, r7, #4
    ff06:	2201      	movs	r2, #1
    ff08:	755a      	strb	r2, [r3, #21]
	config_adc.left_adjust = false;
    ff0a:	1d3b      	adds	r3, r7, #4
    ff0c:	2200      	movs	r2, #0
    ff0e:	749a      	strb	r2, [r3, #18]
	adc_init(&adc1, ADC, &config_adc);
    ff10:	1d3a      	adds	r2, r7, #4
    ff12:	4908      	ldr	r1, [pc, #32]	; (ff34 <configure_ADC+0x80>)
    ff14:	4b08      	ldr	r3, [pc, #32]	; (ff38 <configure_ADC+0x84>)
    ff16:	0018      	movs	r0, r3
    ff18:	4b08      	ldr	r3, [pc, #32]	; (ff3c <configure_ADC+0x88>)
    ff1a:	4798      	blx	r3
	adc_enable(&adc1);
    ff1c:	4b06      	ldr	r3, [pc, #24]	; (ff38 <configure_ADC+0x84>)
    ff1e:	0018      	movs	r0, r3
    ff20:	4b07      	ldr	r3, [pc, #28]	; (ff40 <configure_ADC+0x8c>)
    ff22:	4798      	blx	r3
}
    ff24:	46c0      	nop			; (mov r8, r8)
    ff26:	46bd      	mov	sp, r7
    ff28:	b00e      	add	sp, #56	; 0x38
    ff2a:	bd80      	pop	{r7, pc}
    ff2c:	200007dc 	.word	0x200007dc
    ff30:	00002219 	.word	0x00002219
    ff34:	42004000 	.word	0x42004000
    ff38:	200009b4 	.word	0x200009b4
    ff3c:	00002869 	.word	0x00002869
    ff40:	00008b69 	.word	0x00008b69

0000ff44 <configure_port_pins>:

// Configure the LED selection port as output
void configure_port_pins(void)
{
    ff44:	b580      	push	{r7, lr}
    ff46:	b082      	sub	sp, #8
    ff48:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    ff4a:	1d3b      	adds	r3, r7, #4
    ff4c:	0018      	movs	r0, r3
    ff4e:	4b1a      	ldr	r3, [pc, #104]	; (ffb8 <configure_port_pins+0x74>)
    ff50:	4798      	blx	r3
	
	config_port_pin.powersave = false;
    ff52:	1d3b      	adds	r3, r7, #4
    ff54:	2200      	movs	r2, #0
    ff56:	709a      	strb	r2, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    ff58:	1d3b      	adds	r3, r7, #4
    ff5a:	2201      	movs	r2, #1
    ff5c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA06E_TCC1_WO0, &config_port_pin);
    ff5e:	1d3b      	adds	r3, r7, #4
    ff60:	0019      	movs	r1, r3
    ff62:	2006      	movs	r0, #6
    ff64:	4b15      	ldr	r3, [pc, #84]	; (ffbc <configure_port_pins+0x78>)
    ff66:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0,false);
    ff68:	2100      	movs	r1, #0
    ff6a:	2006      	movs	r0, #6
    ff6c:	4b14      	ldr	r3, [pc, #80]	; (ffc0 <configure_port_pins+0x7c>)
    ff6e:	4798      	blx	r3

	config_port_pin.powersave = false;
    ff70:	1d3b      	adds	r3, r7, #4
    ff72:	2200      	movs	r2, #0
    ff74:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    ff76:	1d3b      	adds	r3, r7, #4
    ff78:	2201      	movs	r2, #1
    ff7a:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    ff7c:	1d3b      	adds	r3, r7, #4
    ff7e:	2200      	movs	r2, #0
    ff80:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PPM_IN, &config_port_pin);
    ff82:	1d3b      	adds	r3, r7, #4
    ff84:	0019      	movs	r1, r3
    ff86:	2022      	movs	r0, #34	; 0x22
    ff88:	4b0c      	ldr	r3, [pc, #48]	; (ffbc <configure_port_pins+0x78>)
    ff8a:	4798      	blx	r3
	
	config_port_pin.powersave = false;
    ff8c:	1d3b      	adds	r3, r7, #4
    ff8e:	2200      	movs	r2, #0
    ff90:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    ff92:	1d3b      	adds	r3, r7, #4
    ff94:	2200      	movs	r2, #0
    ff96:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    ff98:	1d3b      	adds	r3, r7, #4
    ff9a:	2201      	movs	r2, #1
    ff9c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AUX_PIN, &config_port_pin);
    ff9e:	1d3b      	adds	r3, r7, #4
    ffa0:	0019      	movs	r1, r3
    ffa2:	2008      	movs	r0, #8
    ffa4:	4b05      	ldr	r3, [pc, #20]	; (ffbc <configure_port_pins+0x78>)
    ffa6:	4798      	blx	r3
	port_pin_set_output_level(AUX_PIN,true);
    ffa8:	2101      	movs	r1, #1
    ffaa:	2008      	movs	r0, #8
    ffac:	4b04      	ldr	r3, [pc, #16]	; (ffc0 <configure_port_pins+0x7c>)
    ffae:	4798      	blx	r3
}
    ffb0:	46c0      	nop			; (mov r8, r8)
    ffb2:	46bd      	mov	sp, r7
    ffb4:	b002      	add	sp, #8
    ffb6:	bd80      	pop	{r7, pc}
    ffb8:	00008c99 	.word	0x00008c99
    ffbc:	00007111 	.word	0x00007111
    ffc0:	00008d01 	.word	0x00008d01

0000ffc4 <configure_i2c_slave>:
	}
}

// Configure SERCOM1 as I2C slave for VESC communication
void configure_i2c_slave(void)
{	
    ffc4:	b580      	push	{r7, lr}
    ffc6:	b08a      	sub	sp, #40	; 0x28
    ffc8:	af00      	add	r7, sp, #0
	/* Create and initialize config_i2c_slave structure */
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
    ffca:	003b      	movs	r3, r7
    ffcc:	0018      	movs	r0, r3
    ffce:	4b0f      	ldr	r3, [pc, #60]	; (1000c <configure_i2c_slave+0x48>)
    ffd0:	4798      	blx	r3
	/* Change address and address_mode */
	config_i2c_slave.address        = SLAVE_ADDRESS;
    ffd2:	003b      	movs	r3, r7
    ffd4:	2212      	movs	r2, #18
    ffd6:	819a      	strh	r2, [r3, #12]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_MASK;
    ffd8:	003b      	movs	r3, r7
    ffda:	2200      	movs	r2, #0
    ffdc:	815a      	strh	r2, [r3, #10]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    ffde:	003b      	movs	r3, r7
    ffe0:	4a0b      	ldr	r2, [pc, #44]	; (10010 <configure_i2c_slave+0x4c>)
    ffe2:	61da      	str	r2, [r3, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    ffe4:	003b      	movs	r3, r7
    ffe6:	4a0b      	ldr	r2, [pc, #44]	; (10014 <configure_i2c_slave+0x50>)
    ffe8:	621a      	str	r2, [r3, #32]
	config_i2c_slave.generator_source = GCLK_GENERATOR_0;
    ffea:	003b      	movs	r3, r7
    ffec:	2200      	movs	r2, #0
    ffee:	765a      	strb	r2, [r3, #25]
	/* Initialize and enable device with config_i2c_slave */
	i2c_slave_init(&i2c_slave_instance, SERCOM1, &config_i2c_slave);
    fff0:	003a      	movs	r2, r7
    fff2:	4909      	ldr	r1, [pc, #36]	; (10018 <configure_i2c_slave+0x54>)
    fff4:	4b09      	ldr	r3, [pc, #36]	; (1001c <configure_i2c_slave+0x58>)
    fff6:	0018      	movs	r0, r3
    fff8:	4b09      	ldr	r3, [pc, #36]	; (10020 <configure_i2c_slave+0x5c>)
    fffa:	4798      	blx	r3
	i2c_slave_enable(&i2c_slave_instance);
    fffc:	4b07      	ldr	r3, [pc, #28]	; (1001c <configure_i2c_slave+0x58>)
    fffe:	0018      	movs	r0, r3
   10000:	4b08      	ldr	r3, [pc, #32]	; (10024 <configure_i2c_slave+0x60>)
   10002:	4798      	blx	r3
}
   10004:	46c0      	nop			; (mov r8, r8)
   10006:	46bd      	mov	sp, r7
   10008:	b00a      	add	sp, #40	; 0x28
   1000a:	bd80      	pop	{r7, pc}
   1000c:	00008f39 	.word	0x00008f39
   10010:	00100002 	.word	0x00100002
   10014:	00110002 	.word	0x00110002
   10018:	42000c00 	.word	0x42000c00
   1001c:	20001020 	.word	0x20001020
   10020:	000044b5 	.word	0x000044b5
   10024:	00008fb9 	.word	0x00008fb9

00010028 <i2c_write_request_callback>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
   10028:	b580      	push	{r7, lr}
   1002a:	b082      	sub	sp, #8
   1002c:	af00      	add	r7, sp, #0
   1002e:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	packet.data_length = SLAVE_READ_DATA_LENGTH;
   10030:	4bae      	ldr	r3, [pc, #696]	; (102ec <i2c_write_request_callback+0x2c4>)
   10032:	221e      	movs	r2, #30
   10034:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_read_buffer;
   10036:	4bad      	ldr	r3, [pc, #692]	; (102ec <i2c_write_request_callback+0x2c4>)
   10038:	4aad      	ldr	r2, [pc, #692]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1003a:	605a      	str	r2, [r3, #4]
	
	if(FIRST_MESSAGE == 1){
   1003c:	4bad      	ldr	r3, [pc, #692]	; (102f4 <i2c_write_request_callback+0x2cc>)
   1003e:	781b      	ldrb	r3, [r3, #0]
   10040:	2b01      	cmp	r3, #1
   10042:	d105      	bne.n	10050 <i2c_write_request_callback+0x28>
		FIRST_MESSAGE = 0;
   10044:	4bab      	ldr	r3, [pc, #684]	; (102f4 <i2c_write_request_callback+0x2cc>)
   10046:	2200      	movs	r2, #0
   10048:	701a      	strb	r2, [r3, #0]
		GET_LIMITS = 1; // Read the limits on first message to set lighting variables
   1004a:	4bab      	ldr	r3, [pc, #684]	; (102f8 <i2c_write_request_callback+0x2d0>)
   1004c:	2201      	movs	r2, #1
   1004e:	701a      	strb	r2, [r3, #0]
	}
	i2c_slave_read_packet_job(module, &packet);
   10050:	4aa6      	ldr	r2, [pc, #664]	; (102ec <i2c_write_request_callback+0x2c4>)
   10052:	687b      	ldr	r3, [r7, #4]
   10054:	0011      	movs	r1, r2
   10056:	0018      	movs	r0, r3
   10058:	4ba8      	ldr	r3, [pc, #672]	; (102fc <i2c_write_request_callback+0x2d4>)
   1005a:	4798      	blx	r3
		if(I2C_slave_read_buffer[0] == 0x8D && I2C_slave_read_buffer[28] == 0xAD) {
   1005c:	4ba4      	ldr	r3, [pc, #656]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1005e:	781b      	ldrb	r3, [r3, #0]
   10060:	2b8d      	cmp	r3, #141	; 0x8d
   10062:	d000      	beq.n	10066 <i2c_write_request_callback+0x3e>
   10064:	e090      	b.n	10188 <i2c_write_request_callback+0x160>
   10066:	4ba2      	ldr	r3, [pc, #648]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10068:	7f1b      	ldrb	r3, [r3, #28]
   1006a:	2bad      	cmp	r3, #173	; 0xad
   1006c:	d000      	beq.n	10070 <i2c_write_request_callback+0x48>
   1006e:	e08b      	b.n	10188 <i2c_write_request_callback+0x160>
			mcconf_limits.motor_current_max = I2C_slave_read_buffer[1];
   10070:	4b9f      	ldr	r3, [pc, #636]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10072:	785b      	ldrb	r3, [r3, #1]
   10074:	001a      	movs	r2, r3
   10076:	4ba2      	ldr	r3, [pc, #648]	; (10300 <i2c_write_request_callback+0x2d8>)
   10078:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = I2C_slave_read_buffer[2];
   1007a:	4b9d      	ldr	r3, [pc, #628]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1007c:	789b      	ldrb	r3, [r3, #2]
   1007e:	001a      	movs	r2, r3
   10080:	4b9f      	ldr	r3, [pc, #636]	; (10300 <i2c_write_request_callback+0x2d8>)
   10082:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = I2C_slave_read_buffer[3];
   10084:	4b9a      	ldr	r3, [pc, #616]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10086:	78db      	ldrb	r3, [r3, #3]
   10088:	001a      	movs	r2, r3
   1008a:	4b9d      	ldr	r3, [pc, #628]	; (10300 <i2c_write_request_callback+0x2d8>)
   1008c:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = I2C_slave_read_buffer[4];
   1008e:	4b98      	ldr	r3, [pc, #608]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10090:	791b      	ldrb	r3, [r3, #4]
   10092:	001a      	movs	r2, r3
   10094:	4b9a      	ldr	r3, [pc, #616]	; (10300 <i2c_write_request_callback+0x2d8>)
   10096:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = I2C_slave_read_buffer[5];
   10098:	4b95      	ldr	r3, [pc, #596]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1009a:	795b      	ldrb	r3, [r3, #5]
   1009c:	001a      	movs	r2, r3
   1009e:	4b98      	ldr	r3, [pc, #608]	; (10300 <i2c_write_request_callback+0x2d8>)
   100a0:	611a      	str	r2, [r3, #16]
			mcconf_limits.max_vin = I2C_slave_read_buffer[6];
   100a2:	4b93      	ldr	r3, [pc, #588]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100a4:	799b      	ldrb	r3, [r3, #6]
   100a6:	001a      	movs	r2, r3
   100a8:	4b95      	ldr	r3, [pc, #596]	; (10300 <i2c_write_request_callback+0x2d8>)
   100aa:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.min_vin = I2C_slave_read_buffer[7];
   100ac:	4b90      	ldr	r3, [pc, #576]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100ae:	79db      	ldrb	r3, [r3, #7]
   100b0:	001a      	movs	r2, r3
   100b2:	4b93      	ldr	r3, [pc, #588]	; (10300 <i2c_write_request_callback+0x2d8>)
   100b4:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.battery_cut_start = I2C_slave_read_buffer[8];
   100b6:	4b8e      	ldr	r3, [pc, #568]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100b8:	7a1a      	ldrb	r2, [r3, #8]
   100ba:	4b92      	ldr	r3, [pc, #584]	; (10304 <i2c_write_request_callback+0x2dc>)
   100bc:	0010      	movs	r0, r2
   100be:	4798      	blx	r3
   100c0:	1c02      	adds	r2, r0, #0
   100c2:	4b8f      	ldr	r3, [pc, #572]	; (10300 <i2c_write_request_callback+0x2d8>)
   100c4:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = I2C_slave_read_buffer[9];
   100c6:	4b8a      	ldr	r3, [pc, #552]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100c8:	7a5a      	ldrb	r2, [r3, #9]
   100ca:	4b8e      	ldr	r3, [pc, #568]	; (10304 <i2c_write_request_callback+0x2dc>)
   100cc:	0010      	movs	r0, r2
   100ce:	4798      	blx	r3
   100d0:	1c02      	adds	r2, r0, #0
   100d2:	4b8b      	ldr	r3, [pc, #556]	; (10300 <i2c_write_request_callback+0x2d8>)
   100d4:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.max_erpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   100d6:	4b86      	ldr	r3, [pc, #536]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100d8:	7a9b      	ldrb	r3, [r3, #10]
   100da:	001a      	movs	r2, r3
   100dc:	4b84      	ldr	r3, [pc, #528]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100de:	7adb      	ldrb	r3, [r3, #11]
   100e0:	021b      	lsls	r3, r3, #8
   100e2:	431a      	orrs	r2, r3
   100e4:	4b82      	ldr	r3, [pc, #520]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100e6:	7b1b      	ldrb	r3, [r3, #12]
   100e8:	041b      	lsls	r3, r3, #16
   100ea:	431a      	orrs	r2, r3
   100ec:	4b84      	ldr	r3, [pc, #528]	; (10300 <i2c_write_request_callback+0x2d8>)
   100ee:	619a      	str	r2, [r3, #24]
			mcconf_limits.min_erpm = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   100f0:	4b7f      	ldr	r3, [pc, #508]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100f2:	7b5b      	ldrb	r3, [r3, #13]
   100f4:	001a      	movs	r2, r3
   100f6:	4b7e      	ldr	r3, [pc, #504]	; (102f0 <i2c_write_request_callback+0x2c8>)
   100f8:	7b9b      	ldrb	r3, [r3, #14]
   100fa:	021b      	lsls	r3, r3, #8
   100fc:	431a      	orrs	r2, r3
   100fe:	4b7c      	ldr	r3, [pc, #496]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10100:	7bdb      	ldrb	r3, [r3, #15]
   10102:	041b      	lsls	r3, r3, #16
   10104:	431a      	orrs	r2, r3
   10106:	4b7e      	ldr	r3, [pc, #504]	; (10300 <i2c_write_request_callback+0x2d8>)
   10108:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm_fbrake = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   1010a:	4b79      	ldr	r3, [pc, #484]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1010c:	7c1b      	ldrb	r3, [r3, #16]
   1010e:	001a      	movs	r2, r3
   10110:	4b77      	ldr	r3, [pc, #476]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10112:	7c5b      	ldrb	r3, [r3, #17]
   10114:	021b      	lsls	r3, r3, #8
   10116:	431a      	orrs	r2, r3
   10118:	4b75      	ldr	r3, [pc, #468]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1011a:	7c9b      	ldrb	r3, [r3, #18]
   1011c:	041b      	lsls	r3, r3, #16
   1011e:	431a      	orrs	r2, r3
   10120:	4b77      	ldr	r3, [pc, #476]	; (10300 <i2c_write_request_callback+0x2d8>)
   10122:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   10124:	4b72      	ldr	r3, [pc, #456]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10126:	7cdb      	ldrb	r3, [r3, #19]
   10128:	001a      	movs	r2, r3
   1012a:	4b71      	ldr	r3, [pc, #452]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1012c:	7d1b      	ldrb	r3, [r3, #20]
   1012e:	021b      	lsls	r3, r3, #8
   10130:	431a      	orrs	r2, r3
   10132:	4b6f      	ldr	r3, [pc, #444]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10134:	7d5b      	ldrb	r3, [r3, #21]
   10136:	041b      	lsls	r3, r3, #16
   10138:	431a      	orrs	r2, r3
   1013a:	4b71      	ldr	r3, [pc, #452]	; (10300 <i2c_write_request_callback+0x2d8>)
   1013c:	621a      	str	r2, [r3, #32]
			mcconf_limits.temp_fet_start = I2C_slave_read_buffer[22];
   1013e:	4b6c      	ldr	r3, [pc, #432]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10140:	7d9b      	ldrb	r3, [r3, #22]
   10142:	001a      	movs	r2, r3
   10144:	4b6e      	ldr	r3, [pc, #440]	; (10300 <i2c_write_request_callback+0x2d8>)
   10146:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = I2C_slave_read_buffer[23];
   10148:	4b69      	ldr	r3, [pc, #420]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1014a:	7ddb      	ldrb	r3, [r3, #23]
   1014c:	001a      	movs	r2, r3
   1014e:	4b6c      	ldr	r3, [pc, #432]	; (10300 <i2c_write_request_callback+0x2d8>)
   10150:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = I2C_slave_read_buffer[24];
   10152:	4b67      	ldr	r3, [pc, #412]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10154:	7e1b      	ldrb	r3, [r3, #24]
   10156:	001a      	movs	r2, r3
   10158:	4b69      	ldr	r3, [pc, #420]	; (10300 <i2c_write_request_callback+0x2d8>)
   1015a:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = I2C_slave_read_buffer[25];
   1015c:	4b64      	ldr	r3, [pc, #400]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1015e:	7e5b      	ldrb	r3, [r3, #25]
   10160:	001a      	movs	r2, r3
   10162:	4b67      	ldr	r3, [pc, #412]	; (10300 <i2c_write_request_callback+0x2d8>)
   10164:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.max_duty = I2C_slave_read_buffer[26];
   10166:	4b62      	ldr	r3, [pc, #392]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10168:	7e9b      	ldrb	r3, [r3, #26]
   1016a:	001a      	movs	r2, r3
   1016c:	4b64      	ldr	r3, [pc, #400]	; (10300 <i2c_write_request_callback+0x2d8>)
   1016e:	649a      	str	r2, [r3, #72]	; 0x48
			mcconf_limits.min_duty = I2C_slave_read_buffer[27];
   10170:	4b5f      	ldr	r3, [pc, #380]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10172:	7edb      	ldrb	r3, [r3, #27]
   10174:	001a      	movs	r2, r3
   10176:	4b62      	ldr	r3, [pc, #392]	; (10300 <i2c_write_request_callback+0x2d8>)
   10178:	645a      	str	r2, [r3, #68]	; 0x44
			SEND_LIMITS = 1;
   1017a:	4b63      	ldr	r3, [pc, #396]	; (10308 <i2c_write_request_callback+0x2e0>)
   1017c:	2201      	movs	r2, #1
   1017e:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   10180:	4b62      	ldr	r3, [pc, #392]	; (1030c <i2c_write_request_callback+0x2e4>)
   10182:	2200      	movs	r2, #0
   10184:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
		}
}
   10186:	e0ad      	b.n	102e4 <i2c_write_request_callback+0x2bc>
		} else if(I2C_slave_read_buffer[0] == 0xDD && I2C_slave_read_buffer[29] == 0xAD) {
   10188:	4b59      	ldr	r3, [pc, #356]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1018a:	781b      	ldrb	r3, [r3, #0]
   1018c:	2bdd      	cmp	r3, #221	; 0xdd
   1018e:	d000      	beq.n	10192 <i2c_write_request_callback+0x16a>
   10190:	e0a8      	b.n	102e4 <i2c_write_request_callback+0x2bc>
   10192:	4b57      	ldr	r3, [pc, #348]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10194:	7f5b      	ldrb	r3, [r3, #29]
   10196:	2bad      	cmp	r3, #173	; 0xad
   10198:	d000      	beq.n	1019c <i2c_write_request_callback+0x174>
   1019a:	e0a3      	b.n	102e4 <i2c_write_request_callback+0x2bc>
			latest_vesc_vals.avg_input_current = I2C_slave_read_buffer[1];
   1019c:	4b54      	ldr	r3, [pc, #336]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1019e:	785b      	ldrb	r3, [r3, #1]
   101a0:	001a      	movs	r2, r3
   101a2:	4b5b      	ldr	r3, [pc, #364]	; (10310 <i2c_write_request_callback+0x2e8>)
   101a4:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.avg_input_current += (I2C_slave_read_buffer[2] << 8);
   101a6:	4b5a      	ldr	r3, [pc, #360]	; (10310 <i2c_write_request_callback+0x2e8>)
   101a8:	689a      	ldr	r2, [r3, #8]
   101aa:	4b51      	ldr	r3, [pc, #324]	; (102f0 <i2c_write_request_callback+0x2c8>)
   101ac:	789b      	ldrb	r3, [r3, #2]
   101ae:	021b      	lsls	r3, r3, #8
   101b0:	18d2      	adds	r2, r2, r3
   101b2:	4b57      	ldr	r3, [pc, #348]	; (10310 <i2c_write_request_callback+0x2e8>)
   101b4:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.INPUT_VOLTAGE = I2C_slave_read_buffer[3];
   101b6:	4b4e      	ldr	r3, [pc, #312]	; (102f0 <i2c_write_request_callback+0x2c8>)
   101b8:	78db      	ldrb	r3, [r3, #3]
   101ba:	b21a      	sxth	r2, r3
   101bc:	4b54      	ldr	r3, [pc, #336]	; (10310 <i2c_write_request_callback+0x2e8>)
   101be:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.INPUT_VOLTAGE += (I2C_slave_read_buffer[4] << 8);
   101c0:	4b53      	ldr	r3, [pc, #332]	; (10310 <i2c_write_request_callback+0x2e8>)
   101c2:	2214      	movs	r2, #20
   101c4:	5e9b      	ldrsh	r3, [r3, r2]
   101c6:	b29a      	uxth	r2, r3
   101c8:	4b49      	ldr	r3, [pc, #292]	; (102f0 <i2c_write_request_callback+0x2c8>)
   101ca:	791b      	ldrb	r3, [r3, #4]
   101cc:	b29b      	uxth	r3, r3
   101ce:	021b      	lsls	r3, r3, #8
   101d0:	b29b      	uxth	r3, r3
   101d2:	18d3      	adds	r3, r2, r3
   101d4:	b29b      	uxth	r3, r3
   101d6:	b21a      	sxth	r2, r3
   101d8:	4b4d      	ldr	r3, [pc, #308]	; (10310 <i2c_write_request_callback+0x2e8>)
   101da:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.avg_motor_current = I2C_slave_read_buffer[5];
   101dc:	4b44      	ldr	r3, [pc, #272]	; (102f0 <i2c_write_request_callback+0x2c8>)
   101de:	795b      	ldrb	r3, [r3, #5]
   101e0:	001a      	movs	r2, r3
   101e2:	4b4b      	ldr	r3, [pc, #300]	; (10310 <i2c_write_request_callback+0x2e8>)
   101e4:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_motor_current += (I2C_slave_read_buffer[6] << 8);
   101e6:	4b4a      	ldr	r3, [pc, #296]	; (10310 <i2c_write_request_callback+0x2e8>)
   101e8:	685a      	ldr	r2, [r3, #4]
   101ea:	4b41      	ldr	r3, [pc, #260]	; (102f0 <i2c_write_request_callback+0x2c8>)
   101ec:	799b      	ldrb	r3, [r3, #6]
   101ee:	021b      	lsls	r3, r3, #8
   101f0:	18d2      	adds	r2, r2, r3
   101f2:	4b47      	ldr	r3, [pc, #284]	; (10310 <i2c_write_request_callback+0x2e8>)
   101f4:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.temp_fet_filtered = I2C_slave_read_buffer[7];
   101f6:	4b3e      	ldr	r3, [pc, #248]	; (102f0 <i2c_write_request_callback+0x2c8>)
   101f8:	79db      	ldrb	r3, [r3, #7]
   101fa:	b21a      	sxth	r2, r3
   101fc:	4b44      	ldr	r3, [pc, #272]	; (10310 <i2c_write_request_callback+0x2e8>)
   101fe:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.temp_fet_filtered += (I2C_slave_read_buffer[8] << 8);
   10200:	4b43      	ldr	r3, [pc, #268]	; (10310 <i2c_write_request_callback+0x2e8>)
   10202:	2200      	movs	r2, #0
   10204:	5e9b      	ldrsh	r3, [r3, r2]
   10206:	b29a      	uxth	r2, r3
   10208:	4b39      	ldr	r3, [pc, #228]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1020a:	7a1b      	ldrb	r3, [r3, #8]
   1020c:	b29b      	uxth	r3, r3
   1020e:	021b      	lsls	r3, r3, #8
   10210:	b29b      	uxth	r3, r3
   10212:	18d3      	adds	r3, r2, r3
   10214:	b29b      	uxth	r3, r3
   10216:	b21a      	sxth	r2, r3
   10218:	4b3d      	ldr	r3, [pc, #244]	; (10310 <i2c_write_request_callback+0x2e8>)
   1021a:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.duty_cycle = I2C_slave_read_buffer[9];
   1021c:	4b34      	ldr	r3, [pc, #208]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1021e:	7a5b      	ldrb	r3, [r3, #9]
   10220:	b21a      	sxth	r2, r3
   10222:	4b3b      	ldr	r3, [pc, #236]	; (10310 <i2c_write_request_callback+0x2e8>)
   10224:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   10226:	4b32      	ldr	r3, [pc, #200]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10228:	7a9b      	ldrb	r3, [r3, #10]
   1022a:	001a      	movs	r2, r3
   1022c:	4b30      	ldr	r3, [pc, #192]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1022e:	7adb      	ldrb	r3, [r3, #11]
   10230:	021b      	lsls	r3, r3, #8
   10232:	431a      	orrs	r2, r3
   10234:	4b2e      	ldr	r3, [pc, #184]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10236:	7b1b      	ldrb	r3, [r3, #12]
   10238:	041b      	lsls	r3, r3, #16
   1023a:	431a      	orrs	r2, r3
   1023c:	4b34      	ldr	r3, [pc, #208]	; (10310 <i2c_write_request_callback+0x2e8>)
   1023e:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.amp_hours = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   10240:	4b2b      	ldr	r3, [pc, #172]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10242:	7b5b      	ldrb	r3, [r3, #13]
   10244:	001a      	movs	r2, r3
   10246:	4b2a      	ldr	r3, [pc, #168]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10248:	7b9b      	ldrb	r3, [r3, #14]
   1024a:	021b      	lsls	r3, r3, #8
   1024c:	431a      	orrs	r2, r3
   1024e:	4b28      	ldr	r3, [pc, #160]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10250:	7bdb      	ldrb	r3, [r3, #15]
   10252:	041b      	lsls	r3, r3, #16
   10254:	431a      	orrs	r2, r3
   10256:	4b2e      	ldr	r3, [pc, #184]	; (10310 <i2c_write_request_callback+0x2e8>)
   10258:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   1025a:	4b25      	ldr	r3, [pc, #148]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1025c:	7c1b      	ldrb	r3, [r3, #16]
   1025e:	001a      	movs	r2, r3
   10260:	4b23      	ldr	r3, [pc, #140]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10262:	7c5b      	ldrb	r3, [r3, #17]
   10264:	021b      	lsls	r3, r3, #8
   10266:	431a      	orrs	r2, r3
   10268:	4b21      	ldr	r3, [pc, #132]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1026a:	7c9b      	ldrb	r3, [r3, #18]
   1026c:	041b      	lsls	r3, r3, #16
   1026e:	431a      	orrs	r2, r3
   10270:	4b27      	ldr	r3, [pc, #156]	; (10310 <i2c_write_request_callback+0x2e8>)
   10272:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   10274:	4b1e      	ldr	r3, [pc, #120]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10276:	7cdb      	ldrb	r3, [r3, #19]
   10278:	001a      	movs	r2, r3
   1027a:	4b1d      	ldr	r3, [pc, #116]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1027c:	7d1b      	ldrb	r3, [r3, #20]
   1027e:	021b      	lsls	r3, r3, #8
   10280:	431a      	orrs	r2, r3
   10282:	4b1b      	ldr	r3, [pc, #108]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10284:	7d5b      	ldrb	r3, [r3, #21]
   10286:	041b      	lsls	r3, r3, #16
   10288:	431a      	orrs	r2, r3
   1028a:	4b21      	ldr	r3, [pc, #132]	; (10310 <i2c_write_request_callback+0x2e8>)
   1028c:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = (I2C_slave_read_buffer[22] | (I2C_slave_read_buffer[23] << 8) | (I2C_slave_read_buffer[24] << 16));
   1028e:	4b18      	ldr	r3, [pc, #96]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10290:	7d9b      	ldrb	r3, [r3, #22]
   10292:	001a      	movs	r2, r3
   10294:	4b16      	ldr	r3, [pc, #88]	; (102f0 <i2c_write_request_callback+0x2c8>)
   10296:	7ddb      	ldrb	r3, [r3, #23]
   10298:	021b      	lsls	r3, r3, #8
   1029a:	431a      	orrs	r2, r3
   1029c:	4b14      	ldr	r3, [pc, #80]	; (102f0 <i2c_write_request_callback+0x2c8>)
   1029e:	7e1b      	ldrb	r3, [r3, #24]
   102a0:	041b      	lsls	r3, r3, #16
   102a2:	431a      	orrs	r2, r3
   102a4:	4b1a      	ldr	r3, [pc, #104]	; (10310 <i2c_write_request_callback+0x2e8>)
   102a6:	625a      	str	r2, [r3, #36]	; 0x24
			remote_x = I2C_slave_read_buffer[25];
   102a8:	4b11      	ldr	r3, [pc, #68]	; (102f0 <i2c_write_request_callback+0x2c8>)
   102aa:	7e5a      	ldrb	r2, [r3, #25]
   102ac:	4b19      	ldr	r3, [pc, #100]	; (10314 <i2c_write_request_callback+0x2ec>)
   102ae:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
   102b0:	4b0f      	ldr	r3, [pc, #60]	; (102f0 <i2c_write_request_callback+0x2c8>)
   102b2:	7e9a      	ldrb	r2, [r3, #26]
   102b4:	4b18      	ldr	r3, [pc, #96]	; (10318 <i2c_write_request_callback+0x2f0>)
   102b6:	701a      	strb	r2, [r3, #0]
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
   102b8:	4b0d      	ldr	r3, [pc, #52]	; (102f0 <i2c_write_request_callback+0x2c8>)
   102ba:	7edb      	ldrb	r3, [r3, #27]
   102bc:	105b      	asrs	r3, r3, #1
   102be:	b2db      	uxtb	r3, r3
   102c0:	2203      	movs	r2, #3
   102c2:	4013      	ands	r3, r2
   102c4:	b2da      	uxtb	r2, r3
   102c6:	4b15      	ldr	r3, [pc, #84]	; (1031c <i2c_write_request_callback+0x2f4>)
   102c8:	701a      	strb	r2, [r3, #0]
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
   102ca:	4b09      	ldr	r3, [pc, #36]	; (102f0 <i2c_write_request_callback+0x2c8>)
   102cc:	7edb      	ldrb	r3, [r3, #27]
   102ce:	2201      	movs	r2, #1
   102d0:	4013      	ands	r3, r2
   102d2:	b2da      	uxtb	r2, r3
   102d4:	4b12      	ldr	r3, [pc, #72]	; (10320 <i2c_write_request_callback+0x2f8>)
   102d6:	701a      	strb	r2, [r3, #0]
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
   102d8:	4b05      	ldr	r3, [pc, #20]	; (102f0 <i2c_write_request_callback+0x2c8>)
   102da:	7f1b      	ldrb	r3, [r3, #28]
   102dc:	b259      	sxtb	r1, r3
   102de:	4b0c      	ldr	r3, [pc, #48]	; (10310 <i2c_write_request_callback+0x2e8>)
   102e0:	222c      	movs	r2, #44	; 0x2c
   102e2:	5499      	strb	r1, [r3, r2]
}
   102e4:	46c0      	nop			; (mov r8, r8)
   102e6:	46bd      	mov	sp, r7
   102e8:	b002      	add	sp, #8
   102ea:	bd80      	pop	{r7, pc}
   102ec:	200003b8 	.word	0x200003b8
   102f0:	200007a8 	.word	0x200007a8
   102f4:	200000b2 	.word	0x200000b2
   102f8:	20000019 	.word	0x20000019
   102fc:	0000473b 	.word	0x0000473b
   10300:	20000fd4 	.word	0x20000fd4
   10304:	00015201 	.word	0x00015201
   10308:	2000030e 	.word	0x2000030e
   1030c:	200000b1 	.word	0x200000b1
   10310:	20000958 	.word	0x20000958
   10314:	2000030b 	.word	0x2000030b
   10318:	2000030a 	.word	0x2000030a
   1031c:	20000308 	.word	0x20000308
   10320:	2000030c 	.word	0x2000030c

00010324 <i2c_read_request_callback>:

uint8_t app_remote_check = 0;
void i2c_read_request_callback(struct i2c_slave_module *const module)
{
   10324:	b580      	push	{r7, lr}
   10326:	b082      	sub	sp, #8
   10328:	af00      	add	r7, sp, #0
   1032a:	6078      	str	r0, [r7, #4]
	I2C_slave_write_buffer[0] = AppRemoteY;
   1032c:	4b10      	ldr	r3, [pc, #64]	; (10370 <i2c_read_request_callback+0x4c>)
   1032e:	781a      	ldrb	r2, [r3, #0]
   10330:	4b10      	ldr	r3, [pc, #64]	; (10374 <i2c_read_request_callback+0x50>)
   10332:	701a      	strb	r2, [r3, #0]
	I2C_slave_write_buffer[1] = GET_LIMITS;
   10334:	4b10      	ldr	r3, [pc, #64]	; (10378 <i2c_read_request_callback+0x54>)
   10336:	781a      	ldrb	r2, [r3, #0]
   10338:	4b0e      	ldr	r3, [pc, #56]	; (10374 <i2c_read_request_callback+0x50>)
   1033a:	705a      	strb	r2, [r3, #1]
	I2C_slave_write_buffer[2] = app_remote_check;
   1033c:	4b0f      	ldr	r3, [pc, #60]	; (1037c <i2c_read_request_callback+0x58>)
   1033e:	781a      	ldrb	r2, [r3, #0]
   10340:	4b0c      	ldr	r3, [pc, #48]	; (10374 <i2c_read_request_callback+0x50>)
   10342:	709a      	strb	r2, [r3, #2]

	/* Init i2c packet. */
	packet.data_length = SLAVE_WRITE_DATA_LENGTH;
   10344:	4b0e      	ldr	r3, [pc, #56]	; (10380 <i2c_read_request_callback+0x5c>)
   10346:	2203      	movs	r2, #3
   10348:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_write_buffer;
   1034a:	4b0d      	ldr	r3, [pc, #52]	; (10380 <i2c_read_request_callback+0x5c>)
   1034c:	4a09      	ldr	r2, [pc, #36]	; (10374 <i2c_read_request_callback+0x50>)
   1034e:	605a      	str	r2, [r3, #4]
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
   10350:	4a0b      	ldr	r2, [pc, #44]	; (10380 <i2c_read_request_callback+0x5c>)
   10352:	687b      	ldr	r3, [r7, #4]
   10354:	0011      	movs	r1, r2
   10356:	0018      	movs	r0, r3
   10358:	4b0a      	ldr	r3, [pc, #40]	; (10384 <i2c_read_request_callback+0x60>)
   1035a:	4798      	blx	r3
	NEW_REMOTE_DATA = 0;
   1035c:	4b0a      	ldr	r3, [pc, #40]	; (10388 <i2c_read_request_callback+0x64>)
   1035e:	2200      	movs	r2, #0
   10360:	701a      	strb	r2, [r3, #0]

	GET_LIMITS = 0;
   10362:	4b05      	ldr	r3, [pc, #20]	; (10378 <i2c_read_request_callback+0x54>)
   10364:	2200      	movs	r2, #0
   10366:	701a      	strb	r2, [r3, #0]
}
   10368:	46c0      	nop			; (mov r8, r8)
   1036a:	46bd      	mov	sp, r7
   1036c:	b002      	add	sp, #8
   1036e:	bd80      	pop	{r7, pc}
   10370:	200000b3 	.word	0x200000b3
   10374:	20000990 	.word	0x20000990
   10378:	20000019 	.word	0x20000019
   1037c:	200003e8 	.word	0x200003e8
   10380:	200003b8 	.word	0x200003b8
   10384:	00004787 	.word	0x00004787
   10388:	200003ae 	.word	0x200003ae

0001038c <configure_i2c_slave_callbacks>:


void configure_i2c_slave_callbacks(void)
{
   1038c:	b580      	push	{r7, lr}
   1038e:	af00      	add	r7, sp, #0
	/* Register and enable callback functions */
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback, I2C_SLAVE_CALLBACK_READ_REQUEST);
   10390:	490c      	ldr	r1, [pc, #48]	; (103c4 <configure_i2c_slave_callbacks+0x38>)
   10392:	4b0d      	ldr	r3, [pc, #52]	; (103c8 <configure_i2c_slave_callbacks+0x3c>)
   10394:	2202      	movs	r2, #2
   10396:	0018      	movs	r0, r3
   10398:	4b0c      	ldr	r3, [pc, #48]	; (103cc <configure_i2c_slave_callbacks+0x40>)
   1039a:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_READ_REQUEST);
   1039c:	4b0a      	ldr	r3, [pc, #40]	; (103c8 <configure_i2c_slave_callbacks+0x3c>)
   1039e:	2102      	movs	r1, #2
   103a0:	0018      	movs	r0, r3
   103a2:	4b0b      	ldr	r3, [pc, #44]	; (103d0 <configure_i2c_slave_callbacks+0x44>)
   103a4:	4798      	blx	r3

	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   103a6:	490b      	ldr	r1, [pc, #44]	; (103d4 <configure_i2c_slave_callbacks+0x48>)
   103a8:	4b07      	ldr	r3, [pc, #28]	; (103c8 <configure_i2c_slave_callbacks+0x3c>)
   103aa:	2203      	movs	r2, #3
   103ac:	0018      	movs	r0, r3
   103ae:	4b07      	ldr	r3, [pc, #28]	; (103cc <configure_i2c_slave_callbacks+0x40>)
   103b0:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   103b2:	4b05      	ldr	r3, [pc, #20]	; (103c8 <configure_i2c_slave_callbacks+0x3c>)
   103b4:	2103      	movs	r1, #3
   103b6:	0018      	movs	r0, r3
   103b8:	4b05      	ldr	r3, [pc, #20]	; (103d0 <configure_i2c_slave_callbacks+0x44>)
   103ba:	4798      	blx	r3
}
   103bc:	46c0      	nop			; (mov r8, r8)
   103be:	46bd      	mov	sp, r7
   103c0:	bd80      	pop	{r7, pc}
   103c2:	46c0      	nop			; (mov r8, r8)
   103c4:	00010325 	.word	0x00010325
   103c8:	20001020 	.word	0x20001020
   103cc:	000046f1 	.word	0x000046f1
   103d0:	00009001 	.word	0x00009001
   103d4:	00010029 	.word	0x00010029

000103d8 <configure_eeprom>:

void configure_eeprom(void)
{
   103d8:	b590      	push	{r4, r7, lr}
   103da:	b083      	sub	sp, #12
   103dc:	af00      	add	r7, sp, #0
	/* Setup EEPROM emulator service */
	enum status_code error_code = eeprom_emulator_init();
   103de:	1dfc      	adds	r4, r7, #7
   103e0:	4b0a      	ldr	r3, [pc, #40]	; (1040c <configure_eeprom+0x34>)
   103e2:	4798      	blx	r3
   103e4:	0003      	movs	r3, r0
   103e6:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY) {
   103e8:	1dfb      	adds	r3, r7, #7
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	2b16      	cmp	r3, #22
   103ee:	d100      	bne.n	103f2 <configure_eeprom+0x1a>
		while (true) {
   103f0:	e7fe      	b.n	103f0 <configure_eeprom+0x18>
			/* No EEPROM section has been set in the device's fuses */
		}
	}
	else if (error_code != STATUS_OK) {
   103f2:	1dfb      	adds	r3, r7, #7
   103f4:	781b      	ldrb	r3, [r3, #0]
   103f6:	2b00      	cmp	r3, #0
   103f8:	d003      	beq.n	10402 <configure_eeprom+0x2a>
		/* Erase the emulated EEPROM memory (assume it is unformatted or
		 * irrecoverably corrupt) */
		eeprom_emulator_erase_memory();
   103fa:	4b05      	ldr	r3, [pc, #20]	; (10410 <configure_eeprom+0x38>)
   103fc:	4798      	blx	r3
		eeprom_emulator_init();
   103fe:	4b03      	ldr	r3, [pc, #12]	; (1040c <configure_eeprom+0x34>)
   10400:	4798      	blx	r3
	}
}
   10402:	46c0      	nop			; (mov r8, r8)
   10404:	46bd      	mov	sp, r7
   10406:	b003      	add	sp, #12
   10408:	bd90      	pop	{r4, r7, pc}
   1040a:	46c0      	nop			; (mov r8, r8)
   1040c:	0000862d 	.word	0x0000862d
   10410:	00008715 	.word	0x00008715

00010414 <config_eic_channel>:

/* Sense: 
 * None, Rise, Fall, Both, High, Low
 * 0x0	 0x1   0x2	 0x3   0x4   0x5
 */
void config_eic_channel(int ch, int sense, bool filt) {
   10414:	b5b0      	push	{r4, r5, r7, lr}
   10416:	b084      	sub	sp, #16
   10418:	af00      	add	r7, sp, #0
   1041a:	60f8      	str	r0, [r7, #12]
   1041c:	60b9      	str	r1, [r7, #8]
   1041e:	1dfb      	adds	r3, r7, #7
   10420:	701a      	strb	r2, [r3, #0]
	// Config channel
	EIC->CONFIG[ch/8].reg &= ~(0xF << 4*(ch%8));
   10422:	4c32      	ldr	r4, [pc, #200]	; (104ec <config_eic_channel+0xd8>)
   10424:	68fb      	ldr	r3, [r7, #12]
   10426:	2b00      	cmp	r3, #0
   10428:	da00      	bge.n	1042c <config_eic_channel+0x18>
   1042a:	3307      	adds	r3, #7
   1042c:	10db      	asrs	r3, r3, #3
   1042e:	001a      	movs	r2, r3
   10430:	492e      	ldr	r1, [pc, #184]	; (104ec <config_eic_channel+0xd8>)
   10432:	1d93      	adds	r3, r2, #6
   10434:	009b      	lsls	r3, r3, #2
   10436:	5859      	ldr	r1, [r3, r1]
   10438:	68fb      	ldr	r3, [r7, #12]
   1043a:	482d      	ldr	r0, [pc, #180]	; (104f0 <config_eic_channel+0xdc>)
   1043c:	4003      	ands	r3, r0
   1043e:	d504      	bpl.n	1044a <config_eic_channel+0x36>
   10440:	3b01      	subs	r3, #1
   10442:	2008      	movs	r0, #8
   10444:	4240      	negs	r0, r0
   10446:	4303      	orrs	r3, r0
   10448:	3301      	adds	r3, #1
   1044a:	009b      	lsls	r3, r3, #2
   1044c:	200f      	movs	r0, #15
   1044e:	4098      	lsls	r0, r3
   10450:	0003      	movs	r3, r0
   10452:	43db      	mvns	r3, r3
   10454:	4019      	ands	r1, r3
   10456:	1d93      	adds	r3, r2, #6
   10458:	009b      	lsls	r3, r3, #2
   1045a:	5119      	str	r1, [r3, r4]
	EIC->CONFIG[ch/8].reg |= (0xF & ((filt? 0x8 : 0) | (0x7 & sense))) << 4*(ch%8);
   1045c:	4d23      	ldr	r5, [pc, #140]	; (104ec <config_eic_channel+0xd8>)
   1045e:	68fb      	ldr	r3, [r7, #12]
   10460:	2b00      	cmp	r3, #0
   10462:	da00      	bge.n	10466 <config_eic_channel+0x52>
   10464:	3307      	adds	r3, #7
   10466:	10db      	asrs	r3, r3, #3
   10468:	001a      	movs	r2, r3
   1046a:	4920      	ldr	r1, [pc, #128]	; (104ec <config_eic_channel+0xd8>)
   1046c:	1d93      	adds	r3, r2, #6
   1046e:	009b      	lsls	r3, r3, #2
   10470:	5859      	ldr	r1, [r3, r1]
   10472:	1dfb      	adds	r3, r7, #7
   10474:	781b      	ldrb	r3, [r3, #0]
   10476:	2b00      	cmp	r3, #0
   10478:	d001      	beq.n	1047e <config_eic_channel+0x6a>
   1047a:	2308      	movs	r3, #8
   1047c:	e000      	b.n	10480 <config_eic_channel+0x6c>
   1047e:	2300      	movs	r3, #0
   10480:	68b8      	ldr	r0, [r7, #8]
   10482:	2407      	movs	r4, #7
   10484:	4020      	ands	r0, r4
   10486:	4303      	orrs	r3, r0
   10488:	200f      	movs	r0, #15
   1048a:	4018      	ands	r0, r3
   1048c:	68fb      	ldr	r3, [r7, #12]
   1048e:	4c18      	ldr	r4, [pc, #96]	; (104f0 <config_eic_channel+0xdc>)
   10490:	4023      	ands	r3, r4
   10492:	d504      	bpl.n	1049e <config_eic_channel+0x8a>
   10494:	3b01      	subs	r3, #1
   10496:	2408      	movs	r4, #8
   10498:	4264      	negs	r4, r4
   1049a:	4323      	orrs	r3, r4
   1049c:	3301      	adds	r3, #1
   1049e:	009b      	lsls	r3, r3, #2
   104a0:	4098      	lsls	r0, r3
   104a2:	0003      	movs	r3, r0
   104a4:	4319      	orrs	r1, r3
   104a6:	1d93      	adds	r3, r2, #6
   104a8:	009b      	lsls	r3, r3, #2
   104aa:	5159      	str	r1, [r3, r5]
	// No wake-up
	EIC->WAKEUP.reg &= ~(1 << ch);	
   104ac:	4b0f      	ldr	r3, [pc, #60]	; (104ec <config_eic_channel+0xd8>)
   104ae:	4a0f      	ldr	r2, [pc, #60]	; (104ec <config_eic_channel+0xd8>)
   104b0:	6952      	ldr	r2, [r2, #20]
   104b2:	2001      	movs	r0, #1
   104b4:	68f9      	ldr	r1, [r7, #12]
   104b6:	4088      	lsls	r0, r1
   104b8:	0001      	movs	r1, r0
   104ba:	43c9      	mvns	r1, r1
   104bc:	400a      	ands	r2, r1
   104be:	615a      	str	r2, [r3, #20]
	// No interrupt
	EIC->INTENCLR.reg |= 1<<ch;
   104c0:	4b0a      	ldr	r3, [pc, #40]	; (104ec <config_eic_channel+0xd8>)
   104c2:	4a0a      	ldr	r2, [pc, #40]	; (104ec <config_eic_channel+0xd8>)
   104c4:	6892      	ldr	r2, [r2, #8]
   104c6:	2001      	movs	r0, #1
   104c8:	68f9      	ldr	r1, [r7, #12]
   104ca:	4088      	lsls	r0, r1
   104cc:	0001      	movs	r1, r0
   104ce:	430a      	orrs	r2, r1
   104d0:	609a      	str	r2, [r3, #8]
	// Generate Event 
	EIC->EVCTRL.reg |= 1<<ch;
   104d2:	4b06      	ldr	r3, [pc, #24]	; (104ec <config_eic_channel+0xd8>)
   104d4:	4a05      	ldr	r2, [pc, #20]	; (104ec <config_eic_channel+0xd8>)
   104d6:	6852      	ldr	r2, [r2, #4]
   104d8:	2001      	movs	r0, #1
   104da:	68f9      	ldr	r1, [r7, #12]
   104dc:	4088      	lsls	r0, r1
   104de:	0001      	movs	r1, r0
   104e0:	430a      	orrs	r2, r1
   104e2:	605a      	str	r2, [r3, #4]
}
   104e4:	46c0      	nop			; (mov r8, r8)
   104e6:	46bd      	mov	sp, r7
   104e8:	b004      	add	sp, #16
   104ea:	bdb0      	pop	{r4, r5, r7, pc}
   104ec:	40001800 	.word	0x40001800
   104f0:	80000007 	.word	0x80000007

000104f4 <config_eic>:

void config_eic() {
   104f4:	b580      	push	{r7, lr}
   104f6:	af00      	add	r7, sp, #0
	PM->APBAMASK.reg |= PM_APBAMASK_EIC;
   104f8:	4b17      	ldr	r3, [pc, #92]	; (10558 <config_eic+0x64>)
   104fa:	4a17      	ldr	r2, [pc, #92]	; (10558 <config_eic+0x64>)
   104fc:	6992      	ldr	r2, [r2, #24]
   104fe:	2140      	movs	r1, #64	; 0x40
   10500:	430a      	orrs	r2, r1
   10502:	619a      	str	r2, [r3, #24]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EIC_GCLK_ID) | 
   10504:	4b15      	ldr	r3, [pc, #84]	; (1055c <config_eic+0x68>)
   10506:	4a16      	ldr	r2, [pc, #88]	; (10560 <config_eic+0x6c>)
   10508:	805a      	strh	r2, [r3, #2]
					    GCLK_CLKCTRL_CLKEN | 
					    GCLK_CLKCTRL_GEN(0);
	EIC->CTRL.reg = EIC_CTRL_SWRST;
   1050a:	4b16      	ldr	r3, [pc, #88]	; (10564 <config_eic+0x70>)
   1050c:	2201      	movs	r2, #1
   1050e:	701a      	strb	r2, [r3, #0]
	while(EIC->CTRL.bit.SWRST && EIC->STATUS.bit.SYNCBUSY);
   10510:	46c0      	nop			; (mov r8, r8)
   10512:	4b14      	ldr	r3, [pc, #80]	; (10564 <config_eic+0x70>)
   10514:	781b      	ldrb	r3, [r3, #0]
   10516:	07db      	lsls	r3, r3, #31
   10518:	0fdb      	lsrs	r3, r3, #31
   1051a:	b2db      	uxtb	r3, r3
   1051c:	2b00      	cmp	r3, #0
   1051e:	d006      	beq.n	1052e <config_eic+0x3a>
   10520:	4b10      	ldr	r3, [pc, #64]	; (10564 <config_eic+0x70>)
   10522:	785b      	ldrb	r3, [r3, #1]
   10524:	061b      	lsls	r3, r3, #24
   10526:	0fdb      	lsrs	r3, r3, #31
   10528:	b2db      	uxtb	r3, r3
   1052a:	2b00      	cmp	r3, #0
   1052c:	d1f1      	bne.n	10512 <config_eic+0x1e>
	config_eic_channel(2, 4, false);		
   1052e:	2200      	movs	r2, #0
   10530:	2104      	movs	r1, #4
   10532:	2002      	movs	r0, #2
   10534:	4b0c      	ldr	r3, [pc, #48]	; (10568 <config_eic+0x74>)
   10536:	4798      	blx	r3

	EIC->CTRL.bit.ENABLE = 1;
   10538:	4a0a      	ldr	r2, [pc, #40]	; (10564 <config_eic+0x70>)
   1053a:	7813      	ldrb	r3, [r2, #0]
   1053c:	2102      	movs	r1, #2
   1053e:	430b      	orrs	r3, r1
   10540:	7013      	strb	r3, [r2, #0]
	while(EIC->STATUS.bit.SYNCBUSY);
   10542:	46c0      	nop			; (mov r8, r8)
   10544:	4b07      	ldr	r3, [pc, #28]	; (10564 <config_eic+0x70>)
   10546:	785b      	ldrb	r3, [r3, #1]
   10548:	061b      	lsls	r3, r3, #24
   1054a:	0fdb      	lsrs	r3, r3, #31
   1054c:	b2db      	uxtb	r3, r3
   1054e:	2b00      	cmp	r3, #0
   10550:	d1f8      	bne.n	10544 <config_eic+0x50>
}
   10552:	46c0      	nop			; (mov r8, r8)
   10554:	46bd      	mov	sp, r7
   10556:	bd80      	pop	{r7, pc}
   10558:	40000400 	.word	0x40000400
   1055c:	40000c00 	.word	0x40000c00
   10560:	00004005 	.word	0x00004005
   10564:	40001800 	.word	0x40001800
   10568:	00010415 	.word	0x00010415

0001056c <config_evsys>:

void config_evsys() {
   1056c:	b580      	push	{r7, lr}
   1056e:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_EVSYS;
   10570:	4b17      	ldr	r3, [pc, #92]	; (105d0 <config_evsys+0x64>)
   10572:	4a17      	ldr	r2, [pc, #92]	; (105d0 <config_evsys+0x64>)
   10574:	6a12      	ldr	r2, [r2, #32]
   10576:	2102      	movs	r1, #2
   10578:	430a      	orrs	r2, r1
   1057a:	621a      	str	r2, [r3, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EVSYS_GCLK_ID_0) |
   1057c:	4b15      	ldr	r3, [pc, #84]	; (105d4 <config_evsys+0x68>)
   1057e:	4a16      	ldr	r2, [pc, #88]	; (105d8 <config_evsys+0x6c>)
   10580:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN |
	GCLK_CLKCTRL_GEN(0);
	while(GCLK->STATUS.bit.SYNCBUSY);
   10582:	46c0      	nop			; (mov r8, r8)
   10584:	4b13      	ldr	r3, [pc, #76]	; (105d4 <config_evsys+0x68>)
   10586:	785b      	ldrb	r3, [r3, #1]
   10588:	061b      	lsls	r3, r3, #24
   1058a:	0fdb      	lsrs	r3, r3, #31
   1058c:	b2db      	uxtb	r3, r3
   1058e:	2b00      	cmp	r3, #0
   10590:	d1f8      	bne.n	10584 <config_evsys+0x18>

	EVSYS->CTRL.bit.SWRST = 1;
   10592:	4a12      	ldr	r2, [pc, #72]	; (105dc <config_evsys+0x70>)
   10594:	7813      	ldrb	r3, [r2, #0]
   10596:	2101      	movs	r1, #1
   10598:	430b      	orrs	r3, r1
   1059a:	7013      	strb	r3, [r2, #0]
	while(EVSYS->CTRL.bit.SWRST);
   1059c:	46c0      	nop			; (mov r8, r8)
   1059e:	4b0f      	ldr	r3, [pc, #60]	; (105dc <config_evsys+0x70>)
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	07db      	lsls	r3, r3, #31
   105a4:	0fdb      	lsrs	r3, r3, #31
   105a6:	b2db      	uxtb	r3, r3
   105a8:	2b00      	cmp	r3, #0
   105aa:	d1f8      	bne.n	1059e <config_evsys+0x32>

	// Event receiver
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(1) | // Set channel n-1
   105ac:	4b0b      	ldr	r3, [pc, #44]	; (105dc <config_evsys+0x70>)
   105ae:	220c      	movs	r2, #12
   105b0:	32ff      	adds	r2, #255	; 0xff
   105b2:	811a      	strh	r2, [r3, #8]
	EVSYS_USER_USER(EVSYS_ID_USER_TCC1_EV_1); // Match/Capture 1 on TCC1
	// Event channel
	EVSYS->CHANNEL.reg = EVSYS_CHANNEL_CHANNEL(0) | // Set channel n
   105b4:	4b09      	ldr	r3, [pc, #36]	; (105dc <config_evsys+0x70>)
   105b6:	4a0a      	ldr	r2, [pc, #40]	; (105e0 <config_evsys+0x74>)
   105b8:	605a      	str	r2, [r3, #4]
	EVSYS_CHANNEL_PATH_ASYNCHRONOUS |
	EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_2) |
	EVSYS_CHANNEL_EDGSEL_BOTH_EDGES; // Detect both edges
	// Wait channel to be ready
	while(!EVSYS->CHSTATUS.bit.USRRDY0);
   105ba:	46c0      	nop			; (mov r8, r8)
   105bc:	4b07      	ldr	r3, [pc, #28]	; (105dc <config_evsys+0x70>)
   105be:	68db      	ldr	r3, [r3, #12]
   105c0:	07db      	lsls	r3, r3, #31
   105c2:	0fdb      	lsrs	r3, r3, #31
   105c4:	b2db      	uxtb	r3, r3
   105c6:	2b00      	cmp	r3, #0
   105c8:	d0f8      	beq.n	105bc <config_evsys+0x50>
	// EVSYS is always enabled
}
   105ca:	46c0      	nop			; (mov r8, r8)
   105cc:	46bd      	mov	sp, r7
   105ce:	bd80      	pop	{r7, pc}
   105d0:	40000400 	.word	0x40000400
   105d4:	40000c00 	.word	0x40000c00
   105d8:	00004007 	.word	0x00004007
   105dc:	42000400 	.word	0x42000400
   105e0:	0e0e0000 	.word	0x0e0e0000

000105e4 <gpio_in>:

void gpio_in(int port, int pin)	{
   105e4:	b590      	push	{r4, r7, lr}
   105e6:	b083      	sub	sp, #12
   105e8:	af00      	add	r7, sp, #0
   105ea:	6078      	str	r0, [r7, #4]
   105ec:	6039      	str	r1, [r7, #0]
	PORT->Group[port].DIRCLR.reg = (1 << pin);
   105ee:	4a13      	ldr	r2, [pc, #76]	; (1063c <gpio_in+0x58>)
   105f0:	2101      	movs	r1, #1
   105f2:	683b      	ldr	r3, [r7, #0]
   105f4:	4099      	lsls	r1, r3
   105f6:	000b      	movs	r3, r1
   105f8:	0019      	movs	r1, r3
   105fa:	687b      	ldr	r3, [r7, #4]
   105fc:	01db      	lsls	r3, r3, #7
   105fe:	18d3      	adds	r3, r2, r3
   10600:	3304      	adds	r3, #4
   10602:	6019      	str	r1, [r3, #0]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_INEN;
   10604:	480d      	ldr	r0, [pc, #52]	; (1063c <gpio_in+0x58>)
   10606:	4a0d      	ldr	r2, [pc, #52]	; (1063c <gpio_in+0x58>)
   10608:	687b      	ldr	r3, [r7, #4]
   1060a:	2140      	movs	r1, #64	; 0x40
   1060c:	01db      	lsls	r3, r3, #7
   1060e:	18d2      	adds	r2, r2, r3
   10610:	683b      	ldr	r3, [r7, #0]
   10612:	18d3      	adds	r3, r2, r3
   10614:	185b      	adds	r3, r3, r1
   10616:	781b      	ldrb	r3, [r3, #0]
   10618:	b2db      	uxtb	r3, r3
   1061a:	2202      	movs	r2, #2
   1061c:	4313      	orrs	r3, r2
   1061e:	b2dc      	uxtb	r4, r3
   10620:	687b      	ldr	r3, [r7, #4]
   10622:	2140      	movs	r1, #64	; 0x40
   10624:	01db      	lsls	r3, r3, #7
   10626:	18c2      	adds	r2, r0, r3
   10628:	683b      	ldr	r3, [r7, #0]
   1062a:	18d3      	adds	r3, r2, r3
   1062c:	185b      	adds	r3, r3, r1
   1062e:	1c22      	adds	r2, r4, #0
   10630:	701a      	strb	r2, [r3, #0]
}
   10632:	46c0      	nop			; (mov r8, r8)
   10634:	46bd      	mov	sp, r7
   10636:	b003      	add	sp, #12
   10638:	bd90      	pop	{r4, r7, pc}
   1063a:	46c0      	nop			; (mov r8, r8)
   1063c:	41004400 	.word	0x41004400

00010640 <gpio_pmuxen>:

void gpio_pmuxen(int port, int pin, int mux) {
   10640:	b590      	push	{r4, r7, lr}
   10642:	b085      	sub	sp, #20
   10644:	af00      	add	r7, sp, #0
   10646:	60f8      	str	r0, [r7, #12]
   10648:	60b9      	str	r1, [r7, #8]
   1064a:	607a      	str	r2, [r7, #4]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_PMUXEN;
   1064c:	4827      	ldr	r0, [pc, #156]	; (106ec <gpio_pmuxen+0xac>)
   1064e:	4a27      	ldr	r2, [pc, #156]	; (106ec <gpio_pmuxen+0xac>)
   10650:	68fb      	ldr	r3, [r7, #12]
   10652:	2140      	movs	r1, #64	; 0x40
   10654:	01db      	lsls	r3, r3, #7
   10656:	18d2      	adds	r2, r2, r3
   10658:	68bb      	ldr	r3, [r7, #8]
   1065a:	18d3      	adds	r3, r2, r3
   1065c:	185b      	adds	r3, r3, r1
   1065e:	781b      	ldrb	r3, [r3, #0]
   10660:	b2db      	uxtb	r3, r3
   10662:	2201      	movs	r2, #1
   10664:	4313      	orrs	r3, r2
   10666:	b2dc      	uxtb	r4, r3
   10668:	68fb      	ldr	r3, [r7, #12]
   1066a:	2140      	movs	r1, #64	; 0x40
   1066c:	01db      	lsls	r3, r3, #7
   1066e:	18c2      	adds	r2, r0, r3
   10670:	68bb      	ldr	r3, [r7, #8]
   10672:	18d3      	adds	r3, r2, r3
   10674:	185b      	adds	r3, r3, r1
   10676:	1c22      	adds	r2, r4, #0
   10678:	701a      	strb	r2, [r3, #0]
	if (pin & 1)
   1067a:	68bb      	ldr	r3, [r7, #8]
   1067c:	2201      	movs	r2, #1
   1067e:	4013      	ands	r3, r2
   10680:	d017      	beq.n	106b2 <gpio_pmuxen+0x72>
		PORT->Group[port].PMUX[pin>>1].bit.PMUXO = mux;
   10682:	4c1a      	ldr	r4, [pc, #104]	; (106ec <gpio_pmuxen+0xac>)
   10684:	68bb      	ldr	r3, [r7, #8]
   10686:	105b      	asrs	r3, r3, #1
   10688:	687a      	ldr	r2, [r7, #4]
   1068a:	b2d2      	uxtb	r2, r2
   1068c:	1c11      	adds	r1, r2, #0
   1068e:	220f      	movs	r2, #15
   10690:	400a      	ands	r2, r1
   10692:	b2d1      	uxtb	r1, r2
   10694:	68fa      	ldr	r2, [r7, #12]
   10696:	2030      	movs	r0, #48	; 0x30
   10698:	01d2      	lsls	r2, r2, #7
   1069a:	18a2      	adds	r2, r4, r2
   1069c:	18d3      	adds	r3, r2, r3
   1069e:	181a      	adds	r2, r3, r0
   106a0:	7813      	ldrb	r3, [r2, #0]
   106a2:	0108      	lsls	r0, r1, #4
   106a4:	210f      	movs	r1, #15
   106a6:	400b      	ands	r3, r1
   106a8:	1c19      	adds	r1, r3, #0
   106aa:	1c03      	adds	r3, r0, #0
   106ac:	430b      	orrs	r3, r1
   106ae:	7013      	strb	r3, [r2, #0]
	else
		PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
}
   106b0:	e017      	b.n	106e2 <gpio_pmuxen+0xa2>
		PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
   106b2:	4c0e      	ldr	r4, [pc, #56]	; (106ec <gpio_pmuxen+0xac>)
   106b4:	68bb      	ldr	r3, [r7, #8]
   106b6:	105b      	asrs	r3, r3, #1
   106b8:	687a      	ldr	r2, [r7, #4]
   106ba:	b2d2      	uxtb	r2, r2
   106bc:	1c11      	adds	r1, r2, #0
   106be:	220f      	movs	r2, #15
   106c0:	400a      	ands	r2, r1
   106c2:	b2d1      	uxtb	r1, r2
   106c4:	68fa      	ldr	r2, [r7, #12]
   106c6:	2030      	movs	r0, #48	; 0x30
   106c8:	01d2      	lsls	r2, r2, #7
   106ca:	18a2      	adds	r2, r4, r2
   106cc:	18d3      	adds	r3, r2, r3
   106ce:	181a      	adds	r2, r3, r0
   106d0:	7813      	ldrb	r3, [r2, #0]
   106d2:	200f      	movs	r0, #15
   106d4:	4008      	ands	r0, r1
   106d6:	210f      	movs	r1, #15
   106d8:	438b      	bics	r3, r1
   106da:	1c19      	adds	r1, r3, #0
   106dc:	1c03      	adds	r3, r0, #0
   106de:	430b      	orrs	r3, r1
   106e0:	7013      	strb	r3, [r2, #0]
}
   106e2:	46c0      	nop			; (mov r8, r8)
   106e4:	46bd      	mov	sp, r7
   106e6:	b005      	add	sp, #20
   106e8:	bd90      	pop	{r4, r7, pc}
   106ea:	46c0      	nop			; (mov r8, r8)
   106ec:	41004400 	.word	0x41004400

000106f0 <config_gpio>:

void config_gpio() {
   106f0:	b580      	push	{r7, lr}
   106f2:	af00      	add	r7, sp, #0
	gpio_in(1, 2);
   106f4:	2102      	movs	r1, #2
   106f6:	2001      	movs	r0, #1
   106f8:	4b05      	ldr	r3, [pc, #20]	; (10710 <config_gpio+0x20>)
   106fa:	4798      	blx	r3
	gpio_pmuxen(1, 2, PINMUX_PB02A_EIC_EXTINT2);
   106fc:	2388      	movs	r3, #136	; 0x88
   106fe:	039b      	lsls	r3, r3, #14
   10700:	001a      	movs	r2, r3
   10702:	2102      	movs	r1, #2
   10704:	2001      	movs	r0, #1
   10706:	4b03      	ldr	r3, [pc, #12]	; (10714 <config_gpio+0x24>)
   10708:	4798      	blx	r3
}
   1070a:	46c0      	nop			; (mov r8, r8)
   1070c:	46bd      	mov	sp, r7
   1070e:	bd80      	pop	{r7, pc}
   10710:	000105e5 	.word	0x000105e5
   10714:	00010641 	.word	0x00010641

00010718 <main>:




int main (void)
{
   10718:	b5f0      	push	{r4, r5, r6, r7, lr}
   1071a:	b095      	sub	sp, #84	; 0x54
   1071c:	af00      	add	r7, sp, #0
	system_init();
   1071e:	4bd6      	ldr	r3, [pc, #856]	; (10a78 <main+0x360>)
   10720:	4798      	blx	r3
	configure_tc(); // Configure millis timer
   10722:	4bd6      	ldr	r3, [pc, #856]	; (10a7c <main+0x364>)
   10724:	4798      	blx	r3
	
	// Configure Devices
	configure_ADC();
   10726:	4bd6      	ldr	r3, [pc, #856]	; (10a80 <main+0x368>)
   10728:	4798      	blx	r3
	configure_port_pins();
   1072a:	4bd6      	ldr	r3, [pc, #856]	; (10a84 <main+0x36c>)
   1072c:	4798      	blx	r3
	configure_LED_PWM();
   1072e:	4bd6      	ldr	r3, [pc, #856]	; (10a88 <main+0x370>)
   10730:	4798      	blx	r3

	// Configure The button input pin and interrupt handlers for pulse width measurement
	config_eic();    // Configure the external interruption
   10732:	4bd6      	ldr	r3, [pc, #856]	; (10a8c <main+0x374>)
   10734:	4798      	blx	r3
	config_evsys();  // Configure the event system
   10736:	4bd6      	ldr	r3, [pc, #856]	; (10a90 <main+0x378>)
   10738:	4798      	blx	r3
	config_gpio();   // Configure the dedicated pin
   1073a:	4bd6      	ldr	r3, [pc, #856]	; (10a94 <main+0x37c>)
   1073c:	4798      	blx	r3
	
	//ERROR_LEDs(2); // Uncomment for testing SAM-BA and LED output functionality
	configure_BLE_module(); // Blocks when no BLE module is installed
   1073e:	4bd6      	ldr	r3, [pc, #856]	; (10a98 <main+0x380>)
   10740:	4798      	blx	r3
	initIMU();
   10742:	4bd6      	ldr	r3, [pc, #856]	; (10a9c <main+0x384>)
   10744:	4798      	blx	r3
	if(!beginIMU()) ERROR_LEDs(0);
   10746:	4bd6      	ldr	r3, [pc, #856]	; (10aa0 <main+0x388>)
   10748:	4798      	blx	r3
   1074a:	1e03      	subs	r3, r0, #0
   1074c:	d102      	bne.n	10754 <main+0x3c>
   1074e:	2000      	movs	r0, #0
   10750:	4bd4      	ldr	r3, [pc, #848]	; (10aa4 <main+0x38c>)
   10752:	4798      	blx	r3
	initKalman(0.1, 0.1, 0.5);
   10754:	22fc      	movs	r2, #252	; 0xfc
   10756:	0592      	lsls	r2, r2, #22
   10758:	49d3      	ldr	r1, [pc, #844]	; (10aa8 <main+0x390>)
   1075a:	4bd3      	ldr	r3, [pc, #844]	; (10aa8 <main+0x390>)
   1075c:	1c18      	adds	r0, r3, #0
   1075e:	4bd3      	ldr	r3, [pc, #844]	; (10aac <main+0x394>)
   10760:	4798      	blx	r3
	  
	configure_eeprom();
   10762:	4bd3      	ldr	r3, [pc, #844]	; (10ab0 <main+0x398>)
   10764:	4798      	blx	r3
	restore_led_data();
   10766:	4bd3      	ldr	r3, [pc, #844]	; (10ab4 <main+0x39c>)
   10768:	4798      	blx	r3
	restore_orientation_controls_remote_esc();
   1076a:	4bd3      	ldr	r3, [pc, #844]	; (10ab8 <main+0x3a0>)
   1076c:	4798      	blx	r3
	restore_cal_data(true);
   1076e:	2001      	movs	r0, #1
   10770:	4bd2      	ldr	r3, [pc, #840]	; (10abc <main+0x3a4>)
   10772:	4798      	blx	r3

	setConstBases();
   10774:	4bd2      	ldr	r3, [pc, #840]	; (10ac0 <main+0x3a8>)
   10776:	4798      	blx	r3

	if(esc_comms == COMMS_I2C){
   10778:	4bd2      	ldr	r3, [pc, #840]	; (10ac4 <main+0x3ac>)
   1077a:	781b      	ldrb	r3, [r3, #0]
   1077c:	2b01      	cmp	r3, #1
   1077e:	d104      	bne.n	1078a <main+0x72>
		configure_i2c_slave();
   10780:	4bd1      	ldr	r3, [pc, #836]	; (10ac8 <main+0x3b0>)
   10782:	4798      	blx	r3
		configure_i2c_slave_callbacks();
   10784:	4bd1      	ldr	r3, [pc, #836]	; (10acc <main+0x3b4>)
   10786:	4798      	blx	r3
   10788:	e00e      	b.n	107a8 <main+0x90>

	} else if(esc_comms == COMMS_UART){
   1078a:	4bce      	ldr	r3, [pc, #824]	; (10ac4 <main+0x3ac>)
   1078c:	781b      	ldrb	r3, [r3, #0]
   1078e:	2b02      	cmp	r3, #2
   10790:	d10a      	bne.n	107a8 <main+0x90>
		configure_vesc_usart();
   10792:	4bcf      	ldr	r3, [pc, #828]	; (10ad0 <main+0x3b8>)
   10794:	4798      	blx	r3
		//configure_vesc_usart_callbacks();

		vesc_uart_expected_bytes = VESC_UART_BYTES_START;  // Start listening for start byte
   10796:	4bcf      	ldr	r3, [pc, #828]	; (10ad4 <main+0x3bc>)
   10798:	2200      	movs	r2, #0
   1079a:	701a      	strb	r2, [r3, #0]
		//usart_read_buffer_job(&vesc_usart, &vesc_revieve_packet.start, (uint16_t)1);
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   1079c:	4ace      	ldr	r2, [pc, #824]	; (10ad8 <main+0x3c0>)
   1079e:	49cf      	ldr	r1, [pc, #828]	; (10adc <main+0x3c4>)
   107a0:	4bcf      	ldr	r3, [pc, #828]	; (10ae0 <main+0x3c8>)
   107a2:	0018      	movs	r0, r3
   107a4:	4bcf      	ldr	r3, [pc, #828]	; (10ae4 <main+0x3cc>)
   107a6:	4798      	blx	r3
	}
	
	////////////////////////////////////////////

	configured_comms = esc_comms;
   107a8:	4bc6      	ldr	r3, [pc, #792]	; (10ac4 <main+0x3ac>)
   107aa:	781a      	ldrb	r2, [r3, #0]
   107ac:	4bce      	ldr	r3, [pc, #824]	; (10ae8 <main+0x3d0>)
   107ae:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < ACCELsamples; ++i){
   107b0:	2300      	movs	r3, #0
   107b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   107b4:	e007      	b.n	107c6 <main+0xae>
		AXaverage[i] = 0;
   107b6:	4bcd      	ldr	r3, [pc, #820]	; (10aec <main+0x3d4>)
   107b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   107ba:	0052      	lsls	r2, r2, #1
   107bc:	2100      	movs	r1, #0
   107be:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   107c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   107c2:	3301      	adds	r3, #1
   107c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   107c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   107c8:	2b0e      	cmp	r3, #14
   107ca:	ddf4      	ble.n	107b6 <main+0x9e>
	}
	
	for(int i = 0; i < ACCELsamples; ++i){
   107cc:	2300      	movs	r3, #0
   107ce:	64bb      	str	r3, [r7, #72]	; 0x48
   107d0:	e007      	b.n	107e2 <main+0xca>
		AYaverage[i] = 0;
   107d2:	4bc7      	ldr	r3, [pc, #796]	; (10af0 <main+0x3d8>)
   107d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   107d6:	0052      	lsls	r2, r2, #1
   107d8:	2100      	movs	r1, #0
   107da:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   107dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107de:	3301      	adds	r3, #1
   107e0:	64bb      	str	r3, [r7, #72]	; 0x48
   107e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107e4:	2b0e      	cmp	r3, #14
   107e6:	ddf4      	ble.n	107d2 <main+0xba>
	}
	
	for(int i = 0; i < ACCELsamples; ++i){
   107e8:	2300      	movs	r3, #0
   107ea:	647b      	str	r3, [r7, #68]	; 0x44
   107ec:	e007      	b.n	107fe <main+0xe6>
		AZaverage[i] = 0;
   107ee:	4bc1      	ldr	r3, [pc, #772]	; (10af4 <main+0x3dc>)
   107f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   107f2:	0052      	lsls	r2, r2, #1
   107f4:	2100      	movs	r1, #0
   107f6:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   107f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   107fa:	3301      	adds	r3, #1
   107fc:	647b      	str	r3, [r7, #68]	; 0x44
   107fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10800:	2b0e      	cmp	r3, #14
   10802:	ddf4      	ble.n	107ee <main+0xd6>
	}

	for(int i = 0; i < SLAVE_READ_DATA_LENGTH; ++i){
   10804:	2300      	movs	r3, #0
   10806:	643b      	str	r3, [r7, #64]	; 0x40
   10808:	e007      	b.n	1081a <main+0x102>
		I2C_slave_read_buffer[i] = 0;
   1080a:	4abb      	ldr	r2, [pc, #748]	; (10af8 <main+0x3e0>)
   1080c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1080e:	18d3      	adds	r3, r2, r3
   10810:	2200      	movs	r2, #0
   10812:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SLAVE_READ_DATA_LENGTH; ++i){
   10814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10816:	3301      	adds	r3, #1
   10818:	643b      	str	r3, [r7, #64]	; 0x40
   1081a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1081c:	2b1d      	cmp	r3, #29
   1081e:	ddf4      	ble.n	1080a <main+0xf2>
	}

	for(int i = 0; i < SLAVE_WRITE_DATA_LENGTH; ++i){
   10820:	2300      	movs	r3, #0
   10822:	63fb      	str	r3, [r7, #60]	; 0x3c
   10824:	e007      	b.n	10836 <main+0x11e>
		I2C_slave_write_buffer[i] = 0;
   10826:	4ab5      	ldr	r2, [pc, #724]	; (10afc <main+0x3e4>)
   10828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1082a:	18d3      	adds	r3, r2, r3
   1082c:	2200      	movs	r2, #0
   1082e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SLAVE_WRITE_DATA_LENGTH; ++i){
   10830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10832:	3301      	adds	r3, #1
   10834:	63fb      	str	r3, [r7, #60]	; 0x3c
   10836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10838:	2b02      	cmp	r3, #2
   1083a:	ddf4      	ble.n	10826 <main+0x10e>
	}

	// Initialize local variables used in main
	for(int i = 0; i < 44; ++i){
   1083c:	2300      	movs	r3, #0
   1083e:	63bb      	str	r3, [r7, #56]	; 0x38
   10840:	e007      	b.n	10852 <main+0x13a>
		ble_write_buffer[i] = 0;
   10842:	4aaf      	ldr	r2, [pc, #700]	; (10b00 <main+0x3e8>)
   10844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10846:	18d3      	adds	r3, r2, r3
   10848:	2200      	movs	r2, #0
   1084a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 44; ++i){
   1084c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1084e:	3301      	adds	r3, #1
   10850:	63bb      	str	r3, [r7, #56]	; 0x38
   10852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10854:	2b2b      	cmp	r3, #43	; 0x2b
   10856:	ddf4      	ble.n	10842 <main+0x12a>
	}
	VescRemoteX = VescRemoteY = 128;
   10858:	4baa      	ldr	r3, [pc, #680]	; (10b04 <main+0x3ec>)
   1085a:	2280      	movs	r2, #128	; 0x80
   1085c:	701a      	strb	r2, [r3, #0]
   1085e:	4ba9      	ldr	r3, [pc, #676]	; (10b04 <main+0x3ec>)
   10860:	781a      	ldrb	r2, [r3, #0]
   10862:	4ba9      	ldr	r3, [pc, #676]	; (10b08 <main+0x3f0>)
   10864:	701a      	strb	r2, [r3, #0]

	float heading = 0;
   10866:	2300      	movs	r3, #0
   10868:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t headingTime = 0;
   1086a:	2300      	movs	r3, #0
   1086c:	61fb      	str	r3, [r7, #28]
	uint32_t lheadingTime = 0;
   1086e:	2300      	movs	r3, #0
   10870:	633b      	str	r3, [r7, #48]	; 0x30

	int BLE_TX_INDEX = 0;
   10872:	2300      	movs	r3, #0
   10874:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t BLE_TX_DELAY = 15;
   10876:	231a      	movs	r3, #26
   10878:	18fb      	adds	r3, r7, r3
   1087a:	220f      	movs	r2, #15
   1087c:	801a      	strh	r2, [r3, #0]
	uint32_t BLE_TX_TIME = 0;
   1087e:	2300      	movs	r3, #0
   10880:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t BLE_DUMMY_TIME = 0;
   10882:	2300      	movs	r3, #0
   10884:	627b      	str	r3, [r7, #36]	; 0x24

	mcconf_limits.max_erpm = 1000000;
   10886:	4ba1      	ldr	r3, [pc, #644]	; (10b0c <main+0x3f4>)
   10888:	4aa1      	ldr	r2, [pc, #644]	; (10b10 <main+0x3f8>)
   1088a:	619a      	str	r2, [r3, #24]
	mcconf_limits.min_erpm = -1000000;
   1088c:	4b9f      	ldr	r3, [pc, #636]	; (10b0c <main+0x3f4>)
   1088e:	4aa1      	ldr	r2, [pc, #644]	; (10b14 <main+0x3fc>)
   10890:	615a      	str	r2, [r3, #20]

	////////////////////////////////////////////

	while(1)
	{
		if(configured_comms != esc_comms)
   10892:	4b95      	ldr	r3, [pc, #596]	; (10ae8 <main+0x3d0>)
   10894:	781a      	ldrb	r2, [r3, #0]
   10896:	4b8b      	ldr	r3, [pc, #556]	; (10ac4 <main+0x3ac>)
   10898:	781b      	ldrb	r3, [r3, #0]
   1089a:	429a      	cmp	r2, r3
   1089c:	d002      	beq.n	108a4 <main+0x18c>
		{
			// TODO: Deconfigure old comms and configure new comms
			ERROR_LEDs(5);
   1089e:	2005      	movs	r0, #5
   108a0:	4b80      	ldr	r3, [pc, #512]	; (10aa4 <main+0x38c>)
   108a2:	4798      	blx	r3
		}

		// Handle BLE Communication
		read_ble_packet();
   108a4:	4b9c      	ldr	r3, [pc, #624]	; (10b18 <main+0x400>)
   108a6:	4798      	blx	r3

		// Communicate with the ESC
		if(esc_comms == COMMS_UART){
   108a8:	4b86      	ldr	r3, [pc, #536]	; (10ac4 <main+0x3ac>)
   108aa:	781b      	ldrb	r3, [r3, #0]
   108ac:	2b02      	cmp	r3, #2
   108ae:	d118      	bne.n	108e2 <main+0x1ca>
			read_vesc_packet();
   108b0:	4b9a      	ldr	r3, [pc, #616]	; (10b1c <main+0x404>)
   108b2:	4798      	blx	r3
			if(ESC_FW_READ){
   108b4:	4b9a      	ldr	r3, [pc, #616]	; (10b20 <main+0x408>)
   108b6:	781b      	ldrb	r3, [r3, #0]
   108b8:	2b00      	cmp	r3, #0
   108ba:	d010      	beq.n	108de <main+0x1c6>
				if(GET_LIMITS) {
   108bc:	4b99      	ldr	r3, [pc, #612]	; (10b24 <main+0x40c>)
   108be:	781b      	ldrb	r3, [r3, #0]
   108c0:	2b00      	cmp	r3, #0
   108c2:	d002      	beq.n	108ca <main+0x1b2>
					vesc_get_mcconf();
   108c4:	4b98      	ldr	r3, [pc, #608]	; (10b28 <main+0x410>)
   108c6:	4798      	blx	r3
   108c8:	e00b      	b.n	108e2 <main+0x1ca>
				} else if(SEND_CONTINUOUS){
   108ca:	4b98      	ldr	r3, [pc, #608]	; (10b2c <main+0x414>)
   108cc:	781b      	ldrb	r3, [r3, #0]
   108ce:	2b00      	cmp	r3, #0
   108d0:	d007      	beq.n	108e2 <main+0x1ca>
					READ_VESC_VALS = true;
   108d2:	4b97      	ldr	r3, [pc, #604]	; (10b30 <main+0x418>)
   108d4:	2201      	movs	r2, #1
   108d6:	701a      	strb	r2, [r3, #0]
					vesc_read_all();
   108d8:	4b96      	ldr	r3, [pc, #600]	; (10b34 <main+0x41c>)
   108da:	4798      	blx	r3
   108dc:	e001      	b.n	108e2 <main+0x1ca>
				}
			} else{
				detect_vesc_firmware();
   108de:	4b96      	ldr	r3, [pc, #600]	; (10b38 <main+0x420>)
   108e0:	4798      	blx	r3
			}
		}

		readAccel();
   108e2:	4b96      	ldr	r3, [pc, #600]	; (10b3c <main+0x424>)
   108e4:	4798      	blx	r3
		readGyro();
   108e6:	4b96      	ldr	r3, [pc, #600]	; (10b40 <main+0x428>)
   108e8:	4798      	blx	r3
		readMag();
   108ea:	4b96      	ldr	r3, [pc, #600]	; (10b44 <main+0x42c>)
   108ec:	4798      	blx	r3

		// All IMU measurements are corrected to orient power to front and connectors up
		CorrectIMUvalues(ORIENTATION[0], ORIENTATION[1]);
   108ee:	4b96      	ldr	r3, [pc, #600]	; (10b48 <main+0x430>)
   108f0:	781a      	ldrb	r2, [r3, #0]
   108f2:	4b95      	ldr	r3, [pc, #596]	; (10b48 <main+0x430>)
   108f4:	785b      	ldrb	r3, [r3, #1]
   108f6:	0019      	movs	r1, r3
   108f8:	0010      	movs	r0, r2
   108fa:	4b94      	ldr	r3, [pc, #592]	; (10b4c <main+0x434>)
   108fc:	4798      	blx	r3


		if(abs(axKalman - cax) < 10000)
   108fe:	4b94      	ldr	r3, [pc, #592]	; (10b50 <main+0x438>)
   10900:	681c      	ldr	r4, [r3, #0]
   10902:	4b94      	ldr	r3, [pc, #592]	; (10b54 <main+0x43c>)
   10904:	2200      	movs	r2, #0
   10906:	5e9a      	ldrsh	r2, [r3, r2]
   10908:	4b93      	ldr	r3, [pc, #588]	; (10b58 <main+0x440>)
   1090a:	0010      	movs	r0, r2
   1090c:	4798      	blx	r3
   1090e:	1c02      	adds	r2, r0, #0
   10910:	4b92      	ldr	r3, [pc, #584]	; (10b5c <main+0x444>)
   10912:	1c11      	adds	r1, r2, #0
   10914:	1c20      	adds	r0, r4, #0
   10916:	4798      	blx	r3
   10918:	1c03      	adds	r3, r0, #0
   1091a:	1c1a      	adds	r2, r3, #0
   1091c:	4b90      	ldr	r3, [pc, #576]	; (10b60 <main+0x448>)
   1091e:	1c10      	adds	r0, r2, #0
   10920:	4798      	blx	r3
   10922:	0002      	movs	r2, r0
   10924:	4b8f      	ldr	r3, [pc, #572]	; (10b64 <main+0x44c>)
   10926:	429a      	cmp	r2, r3
   10928:	db29      	blt.n	1097e <main+0x266>
   1092a:	4b89      	ldr	r3, [pc, #548]	; (10b50 <main+0x438>)
   1092c:	681c      	ldr	r4, [r3, #0]
   1092e:	4b89      	ldr	r3, [pc, #548]	; (10b54 <main+0x43c>)
   10930:	2200      	movs	r2, #0
   10932:	5e9a      	ldrsh	r2, [r3, r2]
   10934:	4b88      	ldr	r3, [pc, #544]	; (10b58 <main+0x440>)
   10936:	0010      	movs	r0, r2
   10938:	4798      	blx	r3
   1093a:	1c02      	adds	r2, r0, #0
   1093c:	4b87      	ldr	r3, [pc, #540]	; (10b5c <main+0x444>)
   1093e:	1c11      	adds	r1, r2, #0
   10940:	1c20      	adds	r0, r4, #0
   10942:	4798      	blx	r3
   10944:	1c03      	adds	r3, r0, #0
   10946:	1c1a      	adds	r2, r3, #0
   10948:	4b85      	ldr	r3, [pc, #532]	; (10b60 <main+0x448>)
   1094a:	1c10      	adds	r0, r2, #0
   1094c:	4798      	blx	r3
   1094e:	0002      	movs	r2, r0
   10950:	4b85      	ldr	r3, [pc, #532]	; (10b68 <main+0x450>)
   10952:	429a      	cmp	r2, r3
   10954:	dc13      	bgt.n	1097e <main+0x266>
		{
			avgAX = averageAX();
   10956:	4b85      	ldr	r3, [pc, #532]	; (10b6c <main+0x454>)
   10958:	4798      	blx	r3
   1095a:	0003      	movs	r3, r0
   1095c:	001a      	movs	r2, r3
   1095e:	4b84      	ldr	r3, [pc, #528]	; (10b70 <main+0x458>)
   10960:	801a      	strh	r2, [r3, #0]
			axKalman = updateKalman(avgAX, ax_kalman);
   10962:	4b83      	ldr	r3, [pc, #524]	; (10b70 <main+0x458>)
   10964:	2200      	movs	r2, #0
   10966:	5e9a      	ldrsh	r2, [r3, r2]
   10968:	4b7b      	ldr	r3, [pc, #492]	; (10b58 <main+0x440>)
   1096a:	0010      	movs	r0, r2
   1096c:	4798      	blx	r3
   1096e:	1c03      	adds	r3, r0, #0
   10970:	2100      	movs	r1, #0
   10972:	1c18      	adds	r0, r3, #0
   10974:	4b7f      	ldr	r3, [pc, #508]	; (10b74 <main+0x45c>)
   10976:	4798      	blx	r3
   10978:	1c02      	adds	r2, r0, #0
   1097a:	4b75      	ldr	r3, [pc, #468]	; (10b50 <main+0x438>)
   1097c:	601a      	str	r2, [r3, #0]
		}
		avgAY = averageAY();
   1097e:	4b7e      	ldr	r3, [pc, #504]	; (10b78 <main+0x460>)
   10980:	4798      	blx	r3
   10982:	0003      	movs	r3, r0
   10984:	001a      	movs	r2, r3
   10986:	4b7d      	ldr	r3, [pc, #500]	; (10b7c <main+0x464>)
   10988:	801a      	strh	r2, [r3, #0]
		//avgAZ = averageAZ();
		
		getLightSens(&light_sens);
   1098a:	4b7d      	ldr	r3, [pc, #500]	; (10b80 <main+0x468>)
   1098c:	0018      	movs	r0, r3
   1098e:	4b7d      	ldr	r3, [pc, #500]	; (10b84 <main+0x46c>)
   10990:	4798      	blx	r3
		light_sens = updateKalman(light_sens, light_kalman);
   10992:	4b7b      	ldr	r3, [pc, #492]	; (10b80 <main+0x468>)
   10994:	881a      	ldrh	r2, [r3, #0]
   10996:	4b7c      	ldr	r3, [pc, #496]	; (10b88 <main+0x470>)
   10998:	0010      	movs	r0, r2
   1099a:	4798      	blx	r3
   1099c:	1c03      	adds	r3, r0, #0
   1099e:	2106      	movs	r1, #6
   109a0:	1c18      	adds	r0, r3, #0
   109a2:	4b74      	ldr	r3, [pc, #464]	; (10b74 <main+0x45c>)
   109a4:	4798      	blx	r3
   109a6:	1c02      	adds	r2, r0, #0
   109a8:	4b78      	ldr	r3, [pc, #480]	; (10b8c <main+0x474>)
   109aa:	1c10      	adds	r0, r2, #0
   109ac:	4798      	blx	r3
   109ae:	0003      	movs	r3, r0
   109b0:	b29a      	uxth	r2, r3
   109b2:	4b73      	ldr	r3, [pc, #460]	; (10b80 <main+0x468>)
   109b4:	801a      	strh	r2, [r3, #0]
		
		ayKalman = updateKalman(avgAY, ay_kalman);
   109b6:	4b71      	ldr	r3, [pc, #452]	; (10b7c <main+0x464>)
   109b8:	2200      	movs	r2, #0
   109ba:	5e9a      	ldrsh	r2, [r3, r2]
   109bc:	4b66      	ldr	r3, [pc, #408]	; (10b58 <main+0x440>)
   109be:	0010      	movs	r0, r2
   109c0:	4798      	blx	r3
   109c2:	1c03      	adds	r3, r0, #0
   109c4:	2101      	movs	r1, #1
   109c6:	1c18      	adds	r0, r3, #0
   109c8:	4b6a      	ldr	r3, [pc, #424]	; (10b74 <main+0x45c>)
   109ca:	4798      	blx	r3
   109cc:	1c02      	adds	r2, r0, #0
   109ce:	4b70      	ldr	r3, [pc, #448]	; (10b90 <main+0x478>)
   109d0:	601a      	str	r2, [r3, #0]
		azKalman = updateKalman(caz, az_kalman);
   109d2:	4b70      	ldr	r3, [pc, #448]	; (10b94 <main+0x47c>)
   109d4:	2200      	movs	r2, #0
   109d6:	5e9a      	ldrsh	r2, [r3, r2]
   109d8:	4b5f      	ldr	r3, [pc, #380]	; (10b58 <main+0x440>)
   109da:	0010      	movs	r0, r2
   109dc:	4798      	blx	r3
   109de:	1c03      	adds	r3, r0, #0
   109e0:	2102      	movs	r1, #2
   109e2:	1c18      	adds	r0, r3, #0
   109e4:	4b63      	ldr	r3, [pc, #396]	; (10b74 <main+0x45c>)
   109e6:	4798      	blx	r3
   109e8:	1c02      	adds	r2, r0, #0
   109ea:	4b6b      	ldr	r3, [pc, #428]	; (10b98 <main+0x480>)
   109ec:	601a      	str	r2, [r3, #0]
		//avgAZ = averageAZ();
		gxKalman = calcGyro(cgx);//(uint16_t)(updateKalman(calcGyro(cgx), gx_kalman)*10);
   109ee:	4b6b      	ldr	r3, [pc, #428]	; (10b9c <main+0x484>)
   109f0:	2200      	movs	r2, #0
   109f2:	5e9b      	ldrsh	r3, [r3, r2]
   109f4:	0018      	movs	r0, r3
   109f6:	4b6a      	ldr	r3, [pc, #424]	; (10ba0 <main+0x488>)
   109f8:	4798      	blx	r3
   109fa:	1c02      	adds	r2, r0, #0
   109fc:	4b69      	ldr	r3, [pc, #420]	; (10ba4 <main+0x48c>)
   109fe:	601a      	str	r2, [r3, #0]
		gyKalman = calcGyro(cgy);//(uint16_t)(updateKalman(calcGyro(cgy), gy_kalman)*10);
   10a00:	4b69      	ldr	r3, [pc, #420]	; (10ba8 <main+0x490>)
   10a02:	2200      	movs	r2, #0
   10a04:	5e9b      	ldrsh	r3, [r3, r2]
   10a06:	0018      	movs	r0, r3
   10a08:	4b65      	ldr	r3, [pc, #404]	; (10ba0 <main+0x488>)
   10a0a:	4798      	blx	r3
   10a0c:	1c02      	adds	r2, r0, #0
   10a0e:	4b67      	ldr	r3, [pc, #412]	; (10bac <main+0x494>)
   10a10:	601a      	str	r2, [r3, #0]
		gzKalman = calcGyro(cgz);//(updateKalman(calcGyro(cgz), gz_kalman));
   10a12:	4b67      	ldr	r3, [pc, #412]	; (10bb0 <main+0x498>)
   10a14:	2200      	movs	r2, #0
   10a16:	5e9b      	ldrsh	r3, [r3, r2]
   10a18:	0018      	movs	r0, r3
   10a1a:	4b61      	ldr	r3, [pc, #388]	; (10ba0 <main+0x488>)
   10a1c:	4798      	blx	r3
   10a1e:	1c02      	adds	r2, r0, #0
   10a20:	4b64      	ldr	r3, [pc, #400]	; (10bb4 <main+0x49c>)
   10a22:	601a      	str	r2, [r3, #0]

		if(axKalman > kalmanAX_max)
   10a24:	4b4a      	ldr	r3, [pc, #296]	; (10b50 <main+0x438>)
   10a26:	681a      	ldr	r2, [r3, #0]
   10a28:	4b63      	ldr	r3, [pc, #396]	; (10bb8 <main+0x4a0>)
   10a2a:	6819      	ldr	r1, [r3, #0]
   10a2c:	4b63      	ldr	r3, [pc, #396]	; (10bbc <main+0x4a4>)
   10a2e:	1c10      	adds	r0, r2, #0
   10a30:	4798      	blx	r3
   10a32:	1e03      	subs	r3, r0, #0
   10a34:	d004      	beq.n	10a40 <main+0x328>
			kalmanAX_max = axKalman;
   10a36:	4b46      	ldr	r3, [pc, #280]	; (10b50 <main+0x438>)
   10a38:	681a      	ldr	r2, [r3, #0]
   10a3a:	4b5f      	ldr	r3, [pc, #380]	; (10bb8 <main+0x4a0>)
   10a3c:	601a      	str	r2, [r3, #0]
   10a3e:	e00c      	b.n	10a5a <main+0x342>
		else if(axKalman < kalmanAX_min)
   10a40:	4b43      	ldr	r3, [pc, #268]	; (10b50 <main+0x438>)
   10a42:	681a      	ldr	r2, [r3, #0]
   10a44:	4b5e      	ldr	r3, [pc, #376]	; (10bc0 <main+0x4a8>)
   10a46:	6819      	ldr	r1, [r3, #0]
   10a48:	4b5e      	ldr	r3, [pc, #376]	; (10bc4 <main+0x4ac>)
   10a4a:	1c10      	adds	r0, r2, #0
   10a4c:	4798      	blx	r3
   10a4e:	1e03      	subs	r3, r0, #0
   10a50:	d003      	beq.n	10a5a <main+0x342>
			kalmanAX_min = axKalman;
   10a52:	4b3f      	ldr	r3, [pc, #252]	; (10b50 <main+0x438>)
   10a54:	681a      	ldr	r2, [r3, #0]
   10a56:	4b5a      	ldr	r3, [pc, #360]	; (10bc0 <main+0x4a8>)
   10a58:	601a      	str	r2, [r3, #0]

		if(ayKalman > kalmanAY_max)
   10a5a:	4b4d      	ldr	r3, [pc, #308]	; (10b90 <main+0x478>)
   10a5c:	681a      	ldr	r2, [r3, #0]
   10a5e:	4b5a      	ldr	r3, [pc, #360]	; (10bc8 <main+0x4b0>)
   10a60:	6819      	ldr	r1, [r3, #0]
   10a62:	4b56      	ldr	r3, [pc, #344]	; (10bbc <main+0x4a4>)
   10a64:	1c10      	adds	r0, r2, #0
   10a66:	4798      	blx	r3
   10a68:	1e03      	subs	r3, r0, #0
   10a6a:	d100      	bne.n	10a6e <main+0x356>
   10a6c:	e0ae      	b.n	10bcc <main+0x4b4>
			kalmanAY_max = ayKalman;
   10a6e:	4b48      	ldr	r3, [pc, #288]	; (10b90 <main+0x478>)
   10a70:	681a      	ldr	r2, [r3, #0]
   10a72:	4b55      	ldr	r3, [pc, #340]	; (10bc8 <main+0x4b0>)
   10a74:	601a      	str	r2, [r3, #0]
   10a76:	e0b6      	b.n	10be6 <main+0x4ce>
   10a78:	00007e71 	.word	0x00007e71
   10a7c:	0000afbd 	.word	0x0000afbd
   10a80:	0000feb5 	.word	0x0000feb5
   10a84:	0000ff45 	.word	0x0000ff45
   10a88:	0000b06d 	.word	0x0000b06d
   10a8c:	000104f5 	.word	0x000104f5
   10a90:	0001056d 	.word	0x0001056d
   10a94:	000106f1 	.word	0x000106f1
   10a98:	0000fc85 	.word	0x0000fc85
   10a9c:	00009305 	.word	0x00009305
   10aa0:	00009469 	.word	0x00009469
   10aa4:	0000b53d 	.word	0x0000b53d
   10aa8:	3dcccccd 	.word	0x3dcccccd
   10aac:	00013c25 	.word	0x00013c25
   10ab0:	000103d9 	.word	0x000103d9
   10ab4:	0000e4ed 	.word	0x0000e4ed
   10ab8:	0000ee71 	.word	0x0000ee71
   10abc:	0000eb39 	.word	0x0000eb39
   10ac0:	0000b495 	.word	0x0000b495
   10ac4:	20000310 	.word	0x20000310
   10ac8:	0000ffc5 	.word	0x0000ffc5
   10acc:	0001038d 	.word	0x0001038d
   10ad0:	0000b7fd 	.word	0x0000b7fd
   10ad4:	20000372 	.word	0x20000372
   10ad8:	00000206 	.word	0x00000206
   10adc:	20000a78 	.word	0x20000a78
   10ae0:	20000718 	.word	0x20000718
   10ae4:	000065cd 	.word	0x000065cd
   10ae8:	2000036e 	.word	0x2000036e
   10aec:	20000a58 	.word	0x20000a58
   10af0:	20000a1c 	.word	0x20000a1c
   10af4:	20000994 	.word	0x20000994
   10af8:	200007a8 	.word	0x200007a8
   10afc:	20000990 	.word	0x20000990
   10b00:	20000928 	.word	0x20000928
   10b04:	20000374 	.word	0x20000374
   10b08:	20000373 	.word	0x20000373
   10b0c:	20000fd4 	.word	0x20000fd4
   10b10:	000f4240 	.word	0x000f4240
   10b14:	fff0bdc0 	.word	0xfff0bdc0
   10b18:	0000fb1d 	.word	0x0000fb1d
   10b1c:	0000d6e9 	.word	0x0000d6e9
   10b20:	2000030f 	.word	0x2000030f
   10b24:	20000019 	.word	0x20000019
   10b28:	0000ccd9 	.word	0x0000ccd9
   10b2c:	200000b1 	.word	0x200000b1
   10b30:	2000036b 	.word	0x2000036b
   10b34:	0000cf61 	.word	0x0000cf61
   10b38:	0000d0dd 	.word	0x0000d0dd
   10b3c:	00009b6d 	.word	0x00009b6d
   10b40:	00009ca5 	.word	0x00009ca5
   10b44:	00009c39 	.word	0x00009c39
   10b48:	20000004 	.word	0x20000004
   10b4c:	0000a429 	.word	0x0000a429
   10b50:	200003d0 	.word	0x200003d0
   10b54:	200002fc 	.word	0x200002fc
   10b58:	00015161 	.word	0x00015161
   10b5c:	00014de9 	.word	0x00014de9
   10b60:	00015121 	.word	0x00015121
   10b64:	ffffd8f1 	.word	0xffffd8f1
   10b68:	0000270f 	.word	0x0000270f
   10b6c:	00013945 	.word	0x00013945
   10b70:	200003cc 	.word	0x200003cc
   10b74:	00013cfd 	.word	0x00013cfd
   10b78:	000139c5 	.word	0x000139c5
   10b7c:	200003ce 	.word	0x200003ce
   10b80:	200003c0 	.word	0x200003c0
   10b84:	000138f1 	.word	0x000138f1
   10b88:	00015201 	.word	0x00015201
   10b8c:	00014439 	.word	0x00014439
   10b90:	200003d4 	.word	0x200003d4
   10b94:	20000300 	.word	0x20000300
   10b98:	200003d8 	.word	0x200003d8
   10b9c:	200002f6 	.word	0x200002f6
   10ba0:	00009d71 	.word	0x00009d71
   10ba4:	200003dc 	.word	0x200003dc
   10ba8:	200002f8 	.word	0x200002f8
   10bac:	200003e0 	.word	0x200003e0
   10bb0:	200002fa 	.word	0x200002fa
   10bb4:	200003e4 	.word	0x200003e4
   10bb8:	200000b8 	.word	0x200000b8
   10bbc:	000143bd 	.word	0x000143bd
   10bc0:	200000b4 	.word	0x200000b4
   10bc4:	00014395 	.word	0x00014395
   10bc8:	200000c0 	.word	0x200000c0
		else if(ayKalman < kalmanAY_min)
   10bcc:	4bbb      	ldr	r3, [pc, #748]	; (10ebc <main+0x7a4>)
   10bce:	681a      	ldr	r2, [r3, #0]
   10bd0:	4bbb      	ldr	r3, [pc, #748]	; (10ec0 <main+0x7a8>)
   10bd2:	6819      	ldr	r1, [r3, #0]
   10bd4:	4bbb      	ldr	r3, [pc, #748]	; (10ec4 <main+0x7ac>)
   10bd6:	1c10      	adds	r0, r2, #0
   10bd8:	4798      	blx	r3
   10bda:	1e03      	subs	r3, r0, #0
   10bdc:	d003      	beq.n	10be6 <main+0x4ce>
			kalmanAY_min = ayKalman;
   10bde:	4bb7      	ldr	r3, [pc, #732]	; (10ebc <main+0x7a4>)
   10be0:	681a      	ldr	r2, [r3, #0]
   10be2:	4bb7      	ldr	r3, [pc, #732]	; (10ec0 <main+0x7a8>)
   10be4:	601a      	str	r2, [r3, #0]

		if(azKalman > kalmanAZ_max)
   10be6:	4bb8      	ldr	r3, [pc, #736]	; (10ec8 <main+0x7b0>)
   10be8:	681a      	ldr	r2, [r3, #0]
   10bea:	4bb8      	ldr	r3, [pc, #736]	; (10ecc <main+0x7b4>)
   10bec:	6819      	ldr	r1, [r3, #0]
   10bee:	4bb8      	ldr	r3, [pc, #736]	; (10ed0 <main+0x7b8>)
   10bf0:	1c10      	adds	r0, r2, #0
   10bf2:	4798      	blx	r3
   10bf4:	1e03      	subs	r3, r0, #0
   10bf6:	d004      	beq.n	10c02 <main+0x4ea>
			kalmanAZ_max = azKalman;
   10bf8:	4bb3      	ldr	r3, [pc, #716]	; (10ec8 <main+0x7b0>)
   10bfa:	681a      	ldr	r2, [r3, #0]
   10bfc:	4bb3      	ldr	r3, [pc, #716]	; (10ecc <main+0x7b4>)
   10bfe:	601a      	str	r2, [r3, #0]
   10c00:	e00c      	b.n	10c1c <main+0x504>
		else if(azKalman < kalmanAZ_min)
   10c02:	4bb1      	ldr	r3, [pc, #708]	; (10ec8 <main+0x7b0>)
   10c04:	681a      	ldr	r2, [r3, #0]
   10c06:	4bb3      	ldr	r3, [pc, #716]	; (10ed4 <main+0x7bc>)
   10c08:	6819      	ldr	r1, [r3, #0]
   10c0a:	4bae      	ldr	r3, [pc, #696]	; (10ec4 <main+0x7ac>)
   10c0c:	1c10      	adds	r0, r2, #0
   10c0e:	4798      	blx	r3
   10c10:	1e03      	subs	r3, r0, #0
   10c12:	d003      	beq.n	10c1c <main+0x504>
			kalmanAZ_min = azKalman;
   10c14:	4bac      	ldr	r3, [pc, #688]	; (10ec8 <main+0x7b0>)
   10c16:	681a      	ldr	r2, [r3, #0]
   10c18:	4bae      	ldr	r3, [pc, #696]	; (10ed4 <main+0x7bc>)
   10c1a:	601a      	str	r2, [r3, #0]
			
		if(gxKalman > kalmanGX_max)
   10c1c:	4bae      	ldr	r3, [pc, #696]	; (10ed8 <main+0x7c0>)
   10c1e:	681a      	ldr	r2, [r3, #0]
   10c20:	4bae      	ldr	r3, [pc, #696]	; (10edc <main+0x7c4>)
   10c22:	6819      	ldr	r1, [r3, #0]
   10c24:	4baa      	ldr	r3, [pc, #680]	; (10ed0 <main+0x7b8>)
   10c26:	1c10      	adds	r0, r2, #0
   10c28:	4798      	blx	r3
   10c2a:	1e03      	subs	r3, r0, #0
   10c2c:	d004      	beq.n	10c38 <main+0x520>
			kalmanGX_max = gxKalman;
   10c2e:	4baa      	ldr	r3, [pc, #680]	; (10ed8 <main+0x7c0>)
   10c30:	681a      	ldr	r2, [r3, #0]
   10c32:	4baa      	ldr	r3, [pc, #680]	; (10edc <main+0x7c4>)
   10c34:	601a      	str	r2, [r3, #0]
   10c36:	e00c      	b.n	10c52 <main+0x53a>
		else if(gxKalman < kalmanGX_min)
   10c38:	4ba7      	ldr	r3, [pc, #668]	; (10ed8 <main+0x7c0>)
   10c3a:	681a      	ldr	r2, [r3, #0]
   10c3c:	4ba8      	ldr	r3, [pc, #672]	; (10ee0 <main+0x7c8>)
   10c3e:	6819      	ldr	r1, [r3, #0]
   10c40:	4ba0      	ldr	r3, [pc, #640]	; (10ec4 <main+0x7ac>)
   10c42:	1c10      	adds	r0, r2, #0
   10c44:	4798      	blx	r3
   10c46:	1e03      	subs	r3, r0, #0
   10c48:	d003      	beq.n	10c52 <main+0x53a>
			kalmanGX_min = gxKalman;
   10c4a:	4ba3      	ldr	r3, [pc, #652]	; (10ed8 <main+0x7c0>)
   10c4c:	681a      	ldr	r2, [r3, #0]
   10c4e:	4ba4      	ldr	r3, [pc, #656]	; (10ee0 <main+0x7c8>)
   10c50:	601a      	str	r2, [r3, #0]

		if(gyKalman > kalmanGY_max)
   10c52:	4ba4      	ldr	r3, [pc, #656]	; (10ee4 <main+0x7cc>)
   10c54:	681a      	ldr	r2, [r3, #0]
   10c56:	4ba4      	ldr	r3, [pc, #656]	; (10ee8 <main+0x7d0>)
   10c58:	6819      	ldr	r1, [r3, #0]
   10c5a:	4b9d      	ldr	r3, [pc, #628]	; (10ed0 <main+0x7b8>)
   10c5c:	1c10      	adds	r0, r2, #0
   10c5e:	4798      	blx	r3
   10c60:	1e03      	subs	r3, r0, #0
   10c62:	d004      	beq.n	10c6e <main+0x556>
			kalmanGY_max = gyKalman;
   10c64:	4b9f      	ldr	r3, [pc, #636]	; (10ee4 <main+0x7cc>)
   10c66:	681a      	ldr	r2, [r3, #0]
   10c68:	4b9f      	ldr	r3, [pc, #636]	; (10ee8 <main+0x7d0>)
   10c6a:	601a      	str	r2, [r3, #0]
   10c6c:	e00c      	b.n	10c88 <main+0x570>
		else if(gyKalman < kalmanGY_min)
   10c6e:	4b9d      	ldr	r3, [pc, #628]	; (10ee4 <main+0x7cc>)
   10c70:	681a      	ldr	r2, [r3, #0]
   10c72:	4b9e      	ldr	r3, [pc, #632]	; (10eec <main+0x7d4>)
   10c74:	6819      	ldr	r1, [r3, #0]
   10c76:	4b93      	ldr	r3, [pc, #588]	; (10ec4 <main+0x7ac>)
   10c78:	1c10      	adds	r0, r2, #0
   10c7a:	4798      	blx	r3
   10c7c:	1e03      	subs	r3, r0, #0
   10c7e:	d003      	beq.n	10c88 <main+0x570>
			kalmanGY_min = gyKalman;
   10c80:	4b98      	ldr	r3, [pc, #608]	; (10ee4 <main+0x7cc>)
   10c82:	681a      	ldr	r2, [r3, #0]
   10c84:	4b99      	ldr	r3, [pc, #612]	; (10eec <main+0x7d4>)
   10c86:	601a      	str	r2, [r3, #0]

		if(gzKalman > kalmanAZ_max)
   10c88:	4b99      	ldr	r3, [pc, #612]	; (10ef0 <main+0x7d8>)
   10c8a:	681a      	ldr	r2, [r3, #0]
   10c8c:	4b8f      	ldr	r3, [pc, #572]	; (10ecc <main+0x7b4>)
   10c8e:	6819      	ldr	r1, [r3, #0]
   10c90:	4b8f      	ldr	r3, [pc, #572]	; (10ed0 <main+0x7b8>)
   10c92:	1c10      	adds	r0, r2, #0
   10c94:	4798      	blx	r3
   10c96:	1e03      	subs	r3, r0, #0
   10c98:	d004      	beq.n	10ca4 <main+0x58c>
			kalmanGZ_max = gzKalman;
   10c9a:	4b95      	ldr	r3, [pc, #596]	; (10ef0 <main+0x7d8>)
   10c9c:	681a      	ldr	r2, [r3, #0]
   10c9e:	4b95      	ldr	r3, [pc, #596]	; (10ef4 <main+0x7dc>)
   10ca0:	601a      	str	r2, [r3, #0]
   10ca2:	e00c      	b.n	10cbe <main+0x5a6>
		else if(gzKalman < kalmanGZ_min)
   10ca4:	4b92      	ldr	r3, [pc, #584]	; (10ef0 <main+0x7d8>)
   10ca6:	681a      	ldr	r2, [r3, #0]
   10ca8:	4b93      	ldr	r3, [pc, #588]	; (10ef8 <main+0x7e0>)
   10caa:	6819      	ldr	r1, [r3, #0]
   10cac:	4b85      	ldr	r3, [pc, #532]	; (10ec4 <main+0x7ac>)
   10cae:	1c10      	adds	r0, r2, #0
   10cb0:	4798      	blx	r3
   10cb2:	1e03      	subs	r3, r0, #0
   10cb4:	d003      	beq.n	10cbe <main+0x5a6>
			kalmanGZ_min = gzKalman;
   10cb6:	4b8e      	ldr	r3, [pc, #568]	; (10ef0 <main+0x7d8>)
   10cb8:	681a      	ldr	r2, [r3, #0]
   10cba:	4b8f      	ldr	r3, [pc, #572]	; (10ef8 <main+0x7e0>)
   10cbc:	601a      	str	r2, [r3, #0]

		headingTime = millis();
   10cbe:	4b8f      	ldr	r3, [pc, #572]	; (10efc <main+0x7e4>)
   10cc0:	4798      	blx	r3
   10cc2:	0003      	movs	r3, r0
   10cc4:	61fb      	str	r3, [r7, #28]
		if(abs(gzKalman) >= 0.5){
   10cc6:	4b8a      	ldr	r3, [pc, #552]	; (10ef0 <main+0x7d8>)
   10cc8:	681a      	ldr	r2, [r3, #0]
   10cca:	4b8d      	ldr	r3, [pc, #564]	; (10f00 <main+0x7e8>)
   10ccc:	1c10      	adds	r0, r2, #0
   10cce:	4798      	blx	r3
   10cd0:	0003      	movs	r3, r0
   10cd2:	17d9      	asrs	r1, r3, #31
   10cd4:	185a      	adds	r2, r3, r1
   10cd6:	404a      	eors	r2, r1
   10cd8:	4b8a      	ldr	r3, [pc, #552]	; (10f04 <main+0x7ec>)
   10cda:	0010      	movs	r0, r2
   10cdc:	4798      	blx	r3
   10cde:	4c8a      	ldr	r4, [pc, #552]	; (10f08 <main+0x7f0>)
   10ce0:	2200      	movs	r2, #0
   10ce2:	4b8a      	ldr	r3, [pc, #552]	; (10f0c <main+0x7f4>)
   10ce4:	47a0      	blx	r4
   10ce6:	1e03      	subs	r3, r0, #0
   10ce8:	d039      	beq.n	10d5e <main+0x646>
			if(headingTime < lheadingTime){
   10cea:	69fa      	ldr	r2, [r7, #28]
   10cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10cee:	429a      	cmp	r2, r3
   10cf0:	d21b      	bcs.n	10d2a <main+0x612>
				heading += (gzKalman) * (((float)(headingTime + (0xFFFFFFFF - lheadingTime)))/1000);
   10cf2:	69fa      	ldr	r2, [r7, #28]
   10cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10cf6:	1ad3      	subs	r3, r2, r3
   10cf8:	1e5a      	subs	r2, r3, #1
   10cfa:	4b85      	ldr	r3, [pc, #532]	; (10f10 <main+0x7f8>)
   10cfc:	0010      	movs	r0, r2
   10cfe:	4798      	blx	r3
   10d00:	1c02      	adds	r2, r0, #0
   10d02:	4b84      	ldr	r3, [pc, #528]	; (10f14 <main+0x7fc>)
   10d04:	4984      	ldr	r1, [pc, #528]	; (10f18 <main+0x800>)
   10d06:	1c10      	adds	r0, r2, #0
   10d08:	4798      	blx	r3
   10d0a:	1c03      	adds	r3, r0, #0
   10d0c:	1c18      	adds	r0, r3, #0
   10d0e:	4b78      	ldr	r3, [pc, #480]	; (10ef0 <main+0x7d8>)
   10d10:	681a      	ldr	r2, [r3, #0]
   10d12:	4b82      	ldr	r3, [pc, #520]	; (10f1c <main+0x804>)
   10d14:	1c11      	adds	r1, r2, #0
   10d16:	4798      	blx	r3
   10d18:	1c03      	adds	r3, r0, #0
   10d1a:	1c1a      	adds	r2, r3, #0
   10d1c:	4b80      	ldr	r3, [pc, #512]	; (10f20 <main+0x808>)
   10d1e:	1c11      	adds	r1, r2, #0
   10d20:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10d22:	4798      	blx	r3
   10d24:	1c03      	adds	r3, r0, #0
   10d26:	637b      	str	r3, [r7, #52]	; 0x34
   10d28:	e019      	b.n	10d5e <main+0x646>
			}
			else
				heading += (gzKalman) * (((float)(headingTime - lheadingTime))/1000);
   10d2a:	69fa      	ldr	r2, [r7, #28]
   10d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10d2e:	1ad2      	subs	r2, r2, r3
   10d30:	4b77      	ldr	r3, [pc, #476]	; (10f10 <main+0x7f8>)
   10d32:	0010      	movs	r0, r2
   10d34:	4798      	blx	r3
   10d36:	1c02      	adds	r2, r0, #0
   10d38:	4b76      	ldr	r3, [pc, #472]	; (10f14 <main+0x7fc>)
   10d3a:	4977      	ldr	r1, [pc, #476]	; (10f18 <main+0x800>)
   10d3c:	1c10      	adds	r0, r2, #0
   10d3e:	4798      	blx	r3
   10d40:	1c03      	adds	r3, r0, #0
   10d42:	1c18      	adds	r0, r3, #0
   10d44:	4b6a      	ldr	r3, [pc, #424]	; (10ef0 <main+0x7d8>)
   10d46:	681a      	ldr	r2, [r3, #0]
   10d48:	4b74      	ldr	r3, [pc, #464]	; (10f1c <main+0x804>)
   10d4a:	1c11      	adds	r1, r2, #0
   10d4c:	4798      	blx	r3
   10d4e:	1c03      	adds	r3, r0, #0
   10d50:	1c1a      	adds	r2, r3, #0
   10d52:	4b73      	ldr	r3, [pc, #460]	; (10f20 <main+0x808>)
   10d54:	1c11      	adds	r1, r2, #0
   10d56:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10d58:	4798      	blx	r3
   10d5a:	1c03      	adds	r3, r0, #0
   10d5c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		lheadingTime = headingTime;
   10d5e:	69fb      	ldr	r3, [r7, #28]
   10d60:	633b      	str	r3, [r7, #48]	; 0x30
		if(heading < 0)
   10d62:	4b58      	ldr	r3, [pc, #352]	; (10ec4 <main+0x7ac>)
   10d64:	2100      	movs	r1, #0
   10d66:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10d68:	4798      	blx	r3
   10d6a:	1e03      	subs	r3, r0, #0
   10d6c:	d006      	beq.n	10d7c <main+0x664>
			heading = 360 + heading;
   10d6e:	4b6c      	ldr	r3, [pc, #432]	; (10f20 <main+0x808>)
   10d70:	496c      	ldr	r1, [pc, #432]	; (10f24 <main+0x80c>)
   10d72:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10d74:	4798      	blx	r3
   10d76:	1c03      	adds	r3, r0, #0
   10d78:	637b      	str	r3, [r7, #52]	; 0x34
   10d7a:	e00b      	b.n	10d94 <main+0x67c>
		else if(heading > 360)
   10d7c:	4b54      	ldr	r3, [pc, #336]	; (10ed0 <main+0x7b8>)
   10d7e:	4969      	ldr	r1, [pc, #420]	; (10f24 <main+0x80c>)
   10d80:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10d82:	4798      	blx	r3
   10d84:	1e03      	subs	r3, r0, #0
   10d86:	d005      	beq.n	10d94 <main+0x67c>
			heading = heading - 360;
   10d88:	4b67      	ldr	r3, [pc, #412]	; (10f28 <main+0x810>)
   10d8a:	4966      	ldr	r1, [pc, #408]	; (10f24 <main+0x80c>)
   10d8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10d8e:	4798      	blx	r3
   10d90:	1c03      	adds	r3, r0, #0
   10d92:	637b      	str	r3, [r7, #52]	; 0x34

		
		if(BLE_TX_TIME>millis())
   10d94:	4b59      	ldr	r3, [pc, #356]	; (10efc <main+0x7e4>)
   10d96:	4798      	blx	r3
   10d98:	0002      	movs	r2, r0
   10d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10d9c:	429a      	cmp	r2, r3
   10d9e:	d201      	bcs.n	10da4 <main+0x68c>
			BLE_TX_TIME = 0;
   10da0:	2300      	movs	r3, #0
   10da2:	62bb      	str	r3, [r7, #40]	; 0x28
		if(SEND_CONTINUOUS && app_remote_check == 0 &&((millis()-BLE_TX_TIME) >= BLE_TX_DELAY))
   10da4:	4b61      	ldr	r3, [pc, #388]	; (10f2c <main+0x814>)
   10da6:	781b      	ldrb	r3, [r3, #0]
   10da8:	2b00      	cmp	r3, #0
   10daa:	d100      	bne.n	10dae <main+0x696>
   10dac:	e2ac      	b.n	11308 <main+0xbf0>
   10dae:	4b60      	ldr	r3, [pc, #384]	; (10f30 <main+0x818>)
   10db0:	781b      	ldrb	r3, [r3, #0]
   10db2:	2b00      	cmp	r3, #0
   10db4:	d000      	beq.n	10db8 <main+0x6a0>
   10db6:	e2a7      	b.n	11308 <main+0xbf0>
   10db8:	4b50      	ldr	r3, [pc, #320]	; (10efc <main+0x7e4>)
   10dba:	4798      	blx	r3
   10dbc:	0002      	movs	r2, r0
   10dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10dc0:	1ad2      	subs	r2, r2, r3
   10dc2:	231a      	movs	r3, #26
   10dc4:	18fb      	adds	r3, r7, r3
   10dc6:	881b      	ldrh	r3, [r3, #0]
   10dc8:	429a      	cmp	r2, r3
   10dca:	d200      	bcs.n	10dce <main+0x6b6>
   10dcc:	e29c      	b.n	11308 <main+0xbf0>
		{
			switch(BLE_TX_INDEX){
   10dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10dd0:	2b01      	cmp	r3, #1
   10dd2:	d100      	bne.n	10dd6 <main+0x6be>
   10dd4:	e0b6      	b.n	10f44 <main+0x82c>
   10dd6:	dc02      	bgt.n	10dde <main+0x6c6>
   10dd8:	2b00      	cmp	r3, #0
   10dda:	d007      	beq.n	10dec <main+0x6d4>
   10ddc:	e25a      	b.n	11294 <main+0xb7c>
   10dde:	2b02      	cmp	r3, #2
   10de0:	d100      	bne.n	10de4 <main+0x6cc>
   10de2:	e116      	b.n	11012 <main+0x8fa>
   10de4:	2b03      	cmp	r3, #3
   10de6:	d100      	bne.n	10dea <main+0x6d2>
   10de8:	e1c1      	b.n	1116e <main+0xa56>
   10dea:	e253      	b.n	11294 <main+0xb7c>
				case 0:
					ble_write_buffer[0] = 0x11;
   10dec:	4b51      	ldr	r3, [pc, #324]	; (10f34 <main+0x81c>)
   10dee:	2211      	movs	r2, #17
   10df0:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = latest_vesc_vals.avg_input_current & 0xFF;
   10df2:	4b51      	ldr	r3, [pc, #324]	; (10f38 <main+0x820>)
   10df4:	689b      	ldr	r3, [r3, #8]
   10df6:	b2da      	uxtb	r2, r3
   10df8:	4b4e      	ldr	r3, [pc, #312]	; (10f34 <main+0x81c>)
   10dfa:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.avg_input_current & 0xFF00) >> 8;
   10dfc:	4b4e      	ldr	r3, [pc, #312]	; (10f38 <main+0x820>)
   10dfe:	689b      	ldr	r3, [r3, #8]
   10e00:	121b      	asrs	r3, r3, #8
   10e02:	b2da      	uxtb	r2, r3
   10e04:	4b4b      	ldr	r3, [pc, #300]	; (10f34 <main+0x81c>)
   10e06:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x12;
   10e08:	4b4a      	ldr	r3, [pc, #296]	; (10f34 <main+0x81c>)
   10e0a:	2212      	movs	r2, #18
   10e0c:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = latest_vesc_vals.INPUT_VOLTAGE;
   10e0e:	4b4a      	ldr	r3, [pc, #296]	; (10f38 <main+0x820>)
   10e10:	2214      	movs	r2, #20
   10e12:	5e9b      	ldrsh	r3, [r3, r2]
   10e14:	b2da      	uxtb	r2, r3
   10e16:	4b47      	ldr	r3, [pc, #284]	; (10f34 <main+0x81c>)
   10e18:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.INPUT_VOLTAGE & 0xFF00) >> 8;
   10e1a:	4b47      	ldr	r3, [pc, #284]	; (10f38 <main+0x820>)
   10e1c:	2214      	movs	r2, #20
   10e1e:	5e9b      	ldrsh	r3, [r3, r2]
   10e20:	121b      	asrs	r3, r3, #8
   10e22:	b2da      	uxtb	r2, r3
   10e24:	4b43      	ldr	r3, [pc, #268]	; (10f34 <main+0x81c>)
   10e26:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x13;
   10e28:	4b42      	ldr	r3, [pc, #264]	; (10f34 <main+0x81c>)
   10e2a:	2213      	movs	r2, #19
   10e2c:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = latest_vesc_vals.avg_motor_current;
   10e2e:	4b42      	ldr	r3, [pc, #264]	; (10f38 <main+0x820>)
   10e30:	685b      	ldr	r3, [r3, #4]
   10e32:	b2da      	uxtb	r2, r3
   10e34:	4b3f      	ldr	r3, [pc, #252]	; (10f34 <main+0x81c>)
   10e36:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (latest_vesc_vals.avg_motor_current & 0xFF00) >> 8;
   10e38:	4b3f      	ldr	r3, [pc, #252]	; (10f38 <main+0x820>)
   10e3a:	685b      	ldr	r3, [r3, #4]
   10e3c:	121b      	asrs	r3, r3, #8
   10e3e:	b2da      	uxtb	r2, r3
   10e40:	4b3c      	ldr	r3, [pc, #240]	; (10f34 <main+0x81c>)
   10e42:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x14;
   10e44:	4b3b      	ldr	r3, [pc, #236]	; (10f34 <main+0x81c>)
   10e46:	2214      	movs	r2, #20
   10e48:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = latest_vesc_vals.temp_fet_filtered;
   10e4a:	4b3b      	ldr	r3, [pc, #236]	; (10f38 <main+0x820>)
   10e4c:	2200      	movs	r2, #0
   10e4e:	5e9b      	ldrsh	r3, [r3, r2]
   10e50:	b2da      	uxtb	r2, r3
   10e52:	4b38      	ldr	r3, [pc, #224]	; (10f34 <main+0x81c>)
   10e54:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.temp_fet_filtered & 0xFF00) >> 8;
   10e56:	4b38      	ldr	r3, [pc, #224]	; (10f38 <main+0x820>)
   10e58:	2200      	movs	r2, #0
   10e5a:	5e9b      	ldrsh	r3, [r3, r2]
   10e5c:	121b      	asrs	r3, r3, #8
   10e5e:	b2da      	uxtb	r2, r3
   10e60:	4b34      	ldr	r3, [pc, #208]	; (10f34 <main+0x81c>)
   10e62:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x15;
   10e64:	4b33      	ldr	r3, [pc, #204]	; (10f34 <main+0x81c>)
   10e66:	2215      	movs	r2, #21
   10e68:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = latest_vesc_vals.duty_cycle;
   10e6a:	4b33      	ldr	r3, [pc, #204]	; (10f38 <main+0x820>)
   10e6c:	220c      	movs	r2, #12
   10e6e:	5e9b      	ldrsh	r3, [r3, r2]
   10e70:	b2da      	uxtb	r2, r3
   10e72:	4b30      	ldr	r3, [pc, #192]	; (10f34 <main+0x81c>)
   10e74:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.duty_cycle & 0xFF00) >> 8;
   10e76:	4b30      	ldr	r3, [pc, #192]	; (10f38 <main+0x820>)
   10e78:	220c      	movs	r2, #12
   10e7a:	5e9b      	ldrsh	r3, [r3, r2]
   10e7c:	121b      	asrs	r3, r3, #8
   10e7e:	b2da      	uxtb	r2, r3
   10e80:	4b2c      	ldr	r3, [pc, #176]	; (10f34 <main+0x81c>)
   10e82:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x16;
   10e84:	4b2b      	ldr	r3, [pc, #172]	; (10f34 <main+0x81c>)
   10e86:	2216      	movs	r2, #22
   10e88:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = (latest_vesc_vals.rpm & 0xFF);
   10e8a:	4b2b      	ldr	r3, [pc, #172]	; (10f38 <main+0x820>)
   10e8c:	691b      	ldr	r3, [r3, #16]
   10e8e:	b2da      	uxtb	r2, r3
   10e90:	4b28      	ldr	r3, [pc, #160]	; (10f34 <main+0x81c>)
   10e92:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = (latest_vesc_vals.rpm & 0xFF00) >> 8;
   10e94:	4b28      	ldr	r3, [pc, #160]	; (10f38 <main+0x820>)
   10e96:	691b      	ldr	r3, [r3, #16]
   10e98:	121b      	asrs	r3, r3, #8
   10e9a:	b2da      	uxtb	r2, r3
   10e9c:	4b25      	ldr	r3, [pc, #148]	; (10f34 <main+0x81c>)
   10e9e:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = (latest_vesc_vals.rpm & 0xFF0000) >> 16;
   10ea0:	4b25      	ldr	r3, [pc, #148]	; (10f38 <main+0x820>)
   10ea2:	691b      	ldr	r3, [r3, #16]
   10ea4:	141b      	asrs	r3, r3, #16
   10ea6:	b2da      	uxtb	r2, r3
   10ea8:	4b22      	ldr	r3, [pc, #136]	; (10f34 <main+0x81c>)
   10eaa:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   10eac:	4921      	ldr	r1, [pc, #132]	; (10f34 <main+0x81c>)
   10eae:	4b23      	ldr	r3, [pc, #140]	; (10f3c <main+0x824>)
   10eb0:	2213      	movs	r2, #19
   10eb2:	0018      	movs	r0, r3
   10eb4:	4b22      	ldr	r3, [pc, #136]	; (10f40 <main+0x828>)
   10eb6:	4798      	blx	r3
					break;
   10eb8:	e1ec      	b.n	11294 <main+0xb7c>
   10eba:	46c0      	nop			; (mov r8, r8)
   10ebc:	200003d4 	.word	0x200003d4
   10ec0:	200000bc 	.word	0x200000bc
   10ec4:	00014395 	.word	0x00014395
   10ec8:	200003d8 	.word	0x200003d8
   10ecc:	200000c8 	.word	0x200000c8
   10ed0:	000143bd 	.word	0x000143bd
   10ed4:	200000c4 	.word	0x200000c4
   10ed8:	200003dc 	.word	0x200003dc
   10edc:	200000d0 	.word	0x200000d0
   10ee0:	200000cc 	.word	0x200000cc
   10ee4:	200003e0 	.word	0x200003e0
   10ee8:	200000d8 	.word	0x200000d8
   10eec:	200000d4 	.word	0x200000d4
   10ef0:	200003e4 	.word	0x200003e4
   10ef4:	200000e0 	.word	0x200000e0
   10ef8:	200000dc 	.word	0x200000dc
   10efc:	0000b015 	.word	0x0000b015
   10f00:	00015121 	.word	0x00015121
   10f04:	00016ca9 	.word	0x00016ca9
   10f08:	0001435d 	.word	0x0001435d
   10f0c:	3fe00000 	.word	0x3fe00000
   10f10:	00015201 	.word	0x00015201
   10f14:	000147c9 	.word	0x000147c9
   10f18:	447a0000 	.word	0x447a0000
   10f1c:	00014ba9 	.word	0x00014ba9
   10f20:	000144a5 	.word	0x000144a5
   10f24:	43b40000 	.word	0x43b40000
   10f28:	00014de9 	.word	0x00014de9
   10f2c:	200000b1 	.word	0x200000b1
   10f30:	200003e8 	.word	0x200003e8
   10f34:	20000928 	.word	0x20000928
   10f38:	20000958 	.word	0x20000958
   10f3c:	200004a0 	.word	0x200004a0
   10f40:	000063bd 	.word	0x000063bd
				case 1:
					ble_write_buffer[0] = 0x17;
   10f44:	4bda      	ldr	r3, [pc, #872]	; (112b0 <main+0xb98>)
   10f46:	2217      	movs	r2, #23
   10f48:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = (latest_vesc_vals.amp_hours & 0xFF);
   10f4a:	4bda      	ldr	r3, [pc, #872]	; (112b4 <main+0xb9c>)
   10f4c:	699b      	ldr	r3, [r3, #24]
   10f4e:	b2da      	uxtb	r2, r3
   10f50:	4bd7      	ldr	r3, [pc, #860]	; (112b0 <main+0xb98>)
   10f52:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.amp_hours & 0xFF00) >> 8;
   10f54:	4bd7      	ldr	r3, [pc, #860]	; (112b4 <main+0xb9c>)
   10f56:	699b      	ldr	r3, [r3, #24]
   10f58:	121b      	asrs	r3, r3, #8
   10f5a:	b2da      	uxtb	r2, r3
   10f5c:	4bd4      	ldr	r3, [pc, #848]	; (112b0 <main+0xb98>)
   10f5e:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = (latest_vesc_vals.amp_hours & 0xFF0000) >> 16;
   10f60:	4bd4      	ldr	r3, [pc, #848]	; (112b4 <main+0xb9c>)
   10f62:	699b      	ldr	r3, [r3, #24]
   10f64:	141b      	asrs	r3, r3, #16
   10f66:	b2da      	uxtb	r2, r3
   10f68:	4bd1      	ldr	r3, [pc, #836]	; (112b0 <main+0xb98>)
   10f6a:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = 0x18;
   10f6c:	4bd0      	ldr	r3, [pc, #832]	; (112b0 <main+0xb98>)
   10f6e:	2218      	movs	r2, #24
   10f70:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.amp_hours_charged & 0xFF);
   10f72:	4bd0      	ldr	r3, [pc, #832]	; (112b4 <main+0xb9c>)
   10f74:	69db      	ldr	r3, [r3, #28]
   10f76:	b2da      	uxtb	r2, r3
   10f78:	4bcd      	ldr	r3, [pc, #820]	; (112b0 <main+0xb98>)
   10f7a:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (latest_vesc_vals.amp_hours_charged & 0xFF00) >> 8;
   10f7c:	4bcd      	ldr	r3, [pc, #820]	; (112b4 <main+0xb9c>)
   10f7e:	69db      	ldr	r3, [r3, #28]
   10f80:	121b      	asrs	r3, r3, #8
   10f82:	b2da      	uxtb	r2, r3
   10f84:	4bca      	ldr	r3, [pc, #808]	; (112b0 <main+0xb98>)
   10f86:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = (latest_vesc_vals.amp_hours_charged & 0xFF0000) >> 16;
   10f88:	4bca      	ldr	r3, [pc, #808]	; (112b4 <main+0xb9c>)
   10f8a:	69db      	ldr	r3, [r3, #28]
   10f8c:	141b      	asrs	r3, r3, #16
   10f8e:	b2da      	uxtb	r2, r3
   10f90:	4bc7      	ldr	r3, [pc, #796]	; (112b0 <main+0xb98>)
   10f92:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = 0x19;
   10f94:	4bc6      	ldr	r3, [pc, #792]	; (112b0 <main+0xb98>)
   10f96:	2219      	movs	r2, #25
   10f98:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = (latest_vesc_vals.watt_hours & 0xFF);
   10f9a:	4bc6      	ldr	r3, [pc, #792]	; (112b4 <main+0xb9c>)
   10f9c:	6a1b      	ldr	r3, [r3, #32]
   10f9e:	b2da      	uxtb	r2, r3
   10fa0:	4bc3      	ldr	r3, [pc, #780]	; (112b0 <main+0xb98>)
   10fa2:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (latest_vesc_vals.watt_hours & 0xFF00) >> 8;
   10fa4:	4bc3      	ldr	r3, [pc, #780]	; (112b4 <main+0xb9c>)
   10fa6:	6a1b      	ldr	r3, [r3, #32]
   10fa8:	121b      	asrs	r3, r3, #8
   10faa:	b2da      	uxtb	r2, r3
   10fac:	4bc0      	ldr	r3, [pc, #768]	; (112b0 <main+0xb98>)
   10fae:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.watt_hours & 0xFF0000) >> 16;
   10fb0:	4bc0      	ldr	r3, [pc, #768]	; (112b4 <main+0xb9c>)
   10fb2:	6a1b      	ldr	r3, [r3, #32]
   10fb4:	141b      	asrs	r3, r3, #16
   10fb6:	b2da      	uxtb	r2, r3
   10fb8:	4bbd      	ldr	r3, [pc, #756]	; (112b0 <main+0xb98>)
   10fba:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x1A;
   10fbc:	4bbc      	ldr	r3, [pc, #752]	; (112b0 <main+0xb98>)
   10fbe:	221a      	movs	r2, #26
   10fc0:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (latest_vesc_vals.watt_hours_charged & 0xFF);
   10fc2:	4bbc      	ldr	r3, [pc, #752]	; (112b4 <main+0xb9c>)
   10fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10fc6:	b2da      	uxtb	r2, r3
   10fc8:	4bb9      	ldr	r3, [pc, #740]	; (112b0 <main+0xb98>)
   10fca:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.watt_hours_charged & 0xFF00) >> 8;
   10fcc:	4bb9      	ldr	r3, [pc, #740]	; (112b4 <main+0xb9c>)
   10fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10fd0:	121b      	asrs	r3, r3, #8
   10fd2:	b2da      	uxtb	r2, r3
   10fd4:	4bb6      	ldr	r3, [pc, #728]	; (112b0 <main+0xb98>)
   10fd6:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = (latest_vesc_vals.watt_hours_charged & 0xFF0000) >> 16;
   10fd8:	4bb6      	ldr	r3, [pc, #728]	; (112b4 <main+0xb9c>)
   10fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10fdc:	141b      	asrs	r3, r3, #16
   10fde:	b2da      	uxtb	r2, r3
   10fe0:	4bb3      	ldr	r3, [pc, #716]	; (112b0 <main+0xb98>)
   10fe2:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x1B;
   10fe4:	4bb2      	ldr	r3, [pc, #712]	; (112b0 <main+0xb98>)
   10fe6:	221b      	movs	r2, #27
   10fe8:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = latest_vesc_vals.fault;
   10fea:	4bb2      	ldr	r3, [pc, #712]	; (112b4 <main+0xb9c>)
   10fec:	222c      	movs	r2, #44	; 0x2c
   10fee:	569b      	ldrsb	r3, [r3, r2]
   10ff0:	b2da      	uxtb	r2, r3
   10ff2:	4baf      	ldr	r3, [pc, #700]	; (112b0 <main+0xb98>)
   10ff4:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0x21;
   10ff6:	4bae      	ldr	r3, [pc, #696]	; (112b0 <main+0xb98>)
   10ff8:	2221      	movs	r2, #33	; 0x21
   10ffa:	749a      	strb	r2, [r3, #18]
					ble_write_buffer[19] = remote_x;
   10ffc:	4bae      	ldr	r3, [pc, #696]	; (112b8 <main+0xba0>)
   10ffe:	781a      	ldrb	r2, [r3, #0]
   11000:	4bab      	ldr	r3, [pc, #684]	; (112b0 <main+0xb98>)
   11002:	74da      	strb	r2, [r3, #19]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 20);
   11004:	49aa      	ldr	r1, [pc, #680]	; (112b0 <main+0xb98>)
   11006:	4bad      	ldr	r3, [pc, #692]	; (112bc <main+0xba4>)
   11008:	2214      	movs	r2, #20
   1100a:	0018      	movs	r0, r3
   1100c:	4bac      	ldr	r3, [pc, #688]	; (112c0 <main+0xba8>)
   1100e:	4798      	blx	r3
					break;
   11010:	e140      	b.n	11294 <main+0xb7c>
				case 2:
					ble_write_buffer[0] = 0x2E;
   11012:	4ba7      	ldr	r3, [pc, #668]	; (112b0 <main+0xb98>)
   11014:	222e      	movs	r2, #46	; 0x2e
   11016:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(heading*10) & 0xFF); // Heading
   11018:	4baa      	ldr	r3, [pc, #680]	; (112c4 <main+0xbac>)
   1101a:	49ab      	ldr	r1, [pc, #684]	; (112c8 <main+0xbb0>)
   1101c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1101e:	4798      	blx	r3
   11020:	1c03      	adds	r3, r0, #0
   11022:	1c1a      	adds	r2, r3, #0
   11024:	4ba9      	ldr	r3, [pc, #676]	; (112cc <main+0xbb4>)
   11026:	1c10      	adds	r0, r2, #0
   11028:	4798      	blx	r3
   1102a:	0003      	movs	r3, r0
   1102c:	b29b      	uxth	r3, r3
   1102e:	b2da      	uxtb	r2, r3
   11030:	4b9f      	ldr	r3, [pc, #636]	; (112b0 <main+0xb98>)
   11032:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(heading*10) & 0xFF00) >> 8; // Heading
   11034:	4ba3      	ldr	r3, [pc, #652]	; (112c4 <main+0xbac>)
   11036:	49a4      	ldr	r1, [pc, #656]	; (112c8 <main+0xbb0>)
   11038:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1103a:	4798      	blx	r3
   1103c:	1c03      	adds	r3, r0, #0
   1103e:	1c1a      	adds	r2, r3, #0
   11040:	4ba2      	ldr	r3, [pc, #648]	; (112cc <main+0xbb4>)
   11042:	1c10      	adds	r0, r2, #0
   11044:	4798      	blx	r3
   11046:	0003      	movs	r3, r0
   11048:	b29b      	uxth	r3, r3
   1104a:	0a1b      	lsrs	r3, r3, #8
   1104c:	b29b      	uxth	r3, r3
   1104e:	b2da      	uxtb	r2, r3
   11050:	4b97      	ldr	r3, [pc, #604]	; (112b0 <main+0xb98>)
   11052:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x22;
   11054:	4b96      	ldr	r3, [pc, #600]	; (112b0 <main+0xb98>)
   11056:	2222      	movs	r2, #34	; 0x22
   11058:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = remote_y;
   1105a:	4b9d      	ldr	r3, [pc, #628]	; (112d0 <main+0xbb8>)
   1105c:	781a      	ldrb	r2, [r3, #0]
   1105e:	4b94      	ldr	r3, [pc, #592]	; (112b0 <main+0xb98>)
   11060:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = 0x23;
   11062:	4b93      	ldr	r3, [pc, #588]	; (112b0 <main+0xb98>)
   11064:	2223      	movs	r2, #35	; 0x23
   11066:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (remote_btn_state | (REMOTE_TYPE << 1));
   11068:	4b9a      	ldr	r3, [pc, #616]	; (112d4 <main+0xbbc>)
   1106a:	781b      	ldrb	r3, [r3, #0]
   1106c:	005b      	lsls	r3, r3, #1
   1106e:	b25a      	sxtb	r2, r3
   11070:	4b99      	ldr	r3, [pc, #612]	; (112d8 <main+0xbc0>)
   11072:	781b      	ldrb	r3, [r3, #0]
   11074:	b25b      	sxtb	r3, r3
   11076:	4313      	orrs	r3, r2
   11078:	b25b      	sxtb	r3, r3
   1107a:	b2da      	uxtb	r2, r3
   1107c:	4b8c      	ldr	r3, [pc, #560]	; (112b0 <main+0xb98>)
   1107e:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = 0x24;
   11080:	4b8b      	ldr	r3, [pc, #556]	; (112b0 <main+0xb98>)
   11082:	2224      	movs	r2, #36	; 0x24
   11084:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = ((uint16_t)axKalman & 0xFF); // Accel X
   11086:	4b95      	ldr	r3, [pc, #596]	; (112dc <main+0xbc4>)
   11088:	681a      	ldr	r2, [r3, #0]
   1108a:	4b90      	ldr	r3, [pc, #576]	; (112cc <main+0xbb4>)
   1108c:	1c10      	adds	r0, r2, #0
   1108e:	4798      	blx	r3
   11090:	0003      	movs	r3, r0
   11092:	b29b      	uxth	r3, r3
   11094:	b2da      	uxtb	r2, r3
   11096:	4b86      	ldr	r3, [pc, #536]	; (112b0 <main+0xb98>)
   11098:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = ((uint16_t)axKalman & 0xFF00) >> 8; // Accel X
   1109a:	4b90      	ldr	r3, [pc, #576]	; (112dc <main+0xbc4>)
   1109c:	681a      	ldr	r2, [r3, #0]
   1109e:	4b8b      	ldr	r3, [pc, #556]	; (112cc <main+0xbb4>)
   110a0:	1c10      	adds	r0, r2, #0
   110a2:	4798      	blx	r3
   110a4:	0003      	movs	r3, r0
   110a6:	b29b      	uxth	r3, r3
   110a8:	0a1b      	lsrs	r3, r3, #8
   110aa:	b29b      	uxth	r3, r3
   110ac:	b2da      	uxtb	r2, r3
   110ae:	4b80      	ldr	r3, [pc, #512]	; (112b0 <main+0xb98>)
   110b0:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = 0x25;
   110b2:	4b7f      	ldr	r3, [pc, #508]	; (112b0 <main+0xb98>)
   110b4:	2225      	movs	r2, #37	; 0x25
   110b6:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = ((uint16_t)ayKalman & 0xFF); // Accel Y
   110b8:	4b89      	ldr	r3, [pc, #548]	; (112e0 <main+0xbc8>)
   110ba:	681a      	ldr	r2, [r3, #0]
   110bc:	4b83      	ldr	r3, [pc, #524]	; (112cc <main+0xbb4>)
   110be:	1c10      	adds	r0, r2, #0
   110c0:	4798      	blx	r3
   110c2:	0003      	movs	r3, r0
   110c4:	b29b      	uxth	r3, r3
   110c6:	b2da      	uxtb	r2, r3
   110c8:	4b79      	ldr	r3, [pc, #484]	; (112b0 <main+0xb98>)
   110ca:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = ((uint16_t)ayKalman & 0xFF00) >> 8; // Accel Y
   110cc:	4b84      	ldr	r3, [pc, #528]	; (112e0 <main+0xbc8>)
   110ce:	681a      	ldr	r2, [r3, #0]
   110d0:	4b7e      	ldr	r3, [pc, #504]	; (112cc <main+0xbb4>)
   110d2:	1c10      	adds	r0, r2, #0
   110d4:	4798      	blx	r3
   110d6:	0003      	movs	r3, r0
   110d8:	b29b      	uxth	r3, r3
   110da:	0a1b      	lsrs	r3, r3, #8
   110dc:	b29b      	uxth	r3, r3
   110de:	b2da      	uxtb	r2, r3
   110e0:	4b73      	ldr	r3, [pc, #460]	; (112b0 <main+0xb98>)
   110e2:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = 0x26;
   110e4:	4b72      	ldr	r3, [pc, #456]	; (112b0 <main+0xb98>)
   110e6:	2226      	movs	r2, #38	; 0x26
   110e8:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = ((uint16_t)azKalman & 0xFF); // Accel Z
   110ea:	4b7e      	ldr	r3, [pc, #504]	; (112e4 <main+0xbcc>)
   110ec:	681a      	ldr	r2, [r3, #0]
   110ee:	4b77      	ldr	r3, [pc, #476]	; (112cc <main+0xbb4>)
   110f0:	1c10      	adds	r0, r2, #0
   110f2:	4798      	blx	r3
   110f4:	0003      	movs	r3, r0
   110f6:	b29b      	uxth	r3, r3
   110f8:	b2da      	uxtb	r2, r3
   110fa:	4b6d      	ldr	r3, [pc, #436]	; (112b0 <main+0xb98>)
   110fc:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = ((uint16_t)azKalman & 0xFF00) >> 8; // Accel Z
   110fe:	4b79      	ldr	r3, [pc, #484]	; (112e4 <main+0xbcc>)
   11100:	681a      	ldr	r2, [r3, #0]
   11102:	4b72      	ldr	r3, [pc, #456]	; (112cc <main+0xbb4>)
   11104:	1c10      	adds	r0, r2, #0
   11106:	4798      	blx	r3
   11108:	0003      	movs	r3, r0
   1110a:	b29b      	uxth	r3, r3
   1110c:	0a1b      	lsrs	r3, r3, #8
   1110e:	b29b      	uxth	r3, r3
   11110:	b2da      	uxtb	r2, r3
   11112:	4b67      	ldr	r3, [pc, #412]	; (112b0 <main+0xb98>)
   11114:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x27;
   11116:	4b66      	ldr	r3, [pc, #408]	; (112b0 <main+0xb98>)
   11118:	2227      	movs	r2, #39	; 0x27
   1111a:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((uint16_t)(gxKalman*10) & 0xFF); // Gyro X
   1111c:	4b72      	ldr	r3, [pc, #456]	; (112e8 <main+0xbd0>)
   1111e:	681a      	ldr	r2, [r3, #0]
   11120:	4b68      	ldr	r3, [pc, #416]	; (112c4 <main+0xbac>)
   11122:	4969      	ldr	r1, [pc, #420]	; (112c8 <main+0xbb0>)
   11124:	1c10      	adds	r0, r2, #0
   11126:	4798      	blx	r3
   11128:	1c03      	adds	r3, r0, #0
   1112a:	1c1a      	adds	r2, r3, #0
   1112c:	4b67      	ldr	r3, [pc, #412]	; (112cc <main+0xbb4>)
   1112e:	1c10      	adds	r0, r2, #0
   11130:	4798      	blx	r3
   11132:	0003      	movs	r3, r0
   11134:	b29b      	uxth	r3, r3
   11136:	b2da      	uxtb	r2, r3
   11138:	4b5d      	ldr	r3, [pc, #372]	; (112b0 <main+0xb98>)
   1113a:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = ((uint16_t)(gxKalman*10) & 0xFF00) >> 8; // Gyro X
   1113c:	4b6a      	ldr	r3, [pc, #424]	; (112e8 <main+0xbd0>)
   1113e:	681a      	ldr	r2, [r3, #0]
   11140:	4b60      	ldr	r3, [pc, #384]	; (112c4 <main+0xbac>)
   11142:	4961      	ldr	r1, [pc, #388]	; (112c8 <main+0xbb0>)
   11144:	1c10      	adds	r0, r2, #0
   11146:	4798      	blx	r3
   11148:	1c03      	adds	r3, r0, #0
   1114a:	1c1a      	adds	r2, r3, #0
   1114c:	4b5f      	ldr	r3, [pc, #380]	; (112cc <main+0xbb4>)
   1114e:	1c10      	adds	r0, r2, #0
   11150:	4798      	blx	r3
   11152:	0003      	movs	r3, r0
   11154:	b29b      	uxth	r3, r3
   11156:	0a1b      	lsrs	r3, r3, #8
   11158:	b29b      	uxth	r3, r3
   1115a:	b2da      	uxtb	r2, r3
   1115c:	4b54      	ldr	r3, [pc, #336]	; (112b0 <main+0xb98>)
   1115e:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   11160:	4953      	ldr	r1, [pc, #332]	; (112b0 <main+0xb98>)
   11162:	4b56      	ldr	r3, [pc, #344]	; (112bc <main+0xba4>)
   11164:	2213      	movs	r2, #19
   11166:	0018      	movs	r0, r3
   11168:	4b55      	ldr	r3, [pc, #340]	; (112c0 <main+0xba8>)
   1116a:	4798      	blx	r3
					break;
   1116c:	e092      	b.n	11294 <main+0xb7c>
				case 3:
					ble_write_buffer[0] = 0x28;
   1116e:	4b50      	ldr	r3, [pc, #320]	; (112b0 <main+0xb98>)
   11170:	2228      	movs	r2, #40	; 0x28
   11172:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(gyKalman*10) & 0xFF); // Gyro Y
   11174:	4b5d      	ldr	r3, [pc, #372]	; (112ec <main+0xbd4>)
   11176:	681a      	ldr	r2, [r3, #0]
   11178:	4b52      	ldr	r3, [pc, #328]	; (112c4 <main+0xbac>)
   1117a:	4953      	ldr	r1, [pc, #332]	; (112c8 <main+0xbb0>)
   1117c:	1c10      	adds	r0, r2, #0
   1117e:	4798      	blx	r3
   11180:	1c03      	adds	r3, r0, #0
   11182:	1c1a      	adds	r2, r3, #0
   11184:	4b51      	ldr	r3, [pc, #324]	; (112cc <main+0xbb4>)
   11186:	1c10      	adds	r0, r2, #0
   11188:	4798      	blx	r3
   1118a:	0003      	movs	r3, r0
   1118c:	b29b      	uxth	r3, r3
   1118e:	b2da      	uxtb	r2, r3
   11190:	4b47      	ldr	r3, [pc, #284]	; (112b0 <main+0xb98>)
   11192:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(gyKalman*10) & 0xFF00) >> 8; // Gyro Y
   11194:	4b55      	ldr	r3, [pc, #340]	; (112ec <main+0xbd4>)
   11196:	681a      	ldr	r2, [r3, #0]
   11198:	4b4a      	ldr	r3, [pc, #296]	; (112c4 <main+0xbac>)
   1119a:	494b      	ldr	r1, [pc, #300]	; (112c8 <main+0xbb0>)
   1119c:	1c10      	adds	r0, r2, #0
   1119e:	4798      	blx	r3
   111a0:	1c03      	adds	r3, r0, #0
   111a2:	1c1a      	adds	r2, r3, #0
   111a4:	4b49      	ldr	r3, [pc, #292]	; (112cc <main+0xbb4>)
   111a6:	1c10      	adds	r0, r2, #0
   111a8:	4798      	blx	r3
   111aa:	0003      	movs	r3, r0
   111ac:	b29b      	uxth	r3, r3
   111ae:	0a1b      	lsrs	r3, r3, #8
   111b0:	b29b      	uxth	r3, r3
   111b2:	b2da      	uxtb	r2, r3
   111b4:	4b3e      	ldr	r3, [pc, #248]	; (112b0 <main+0xb98>)
   111b6:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x29;
   111b8:	4b3d      	ldr	r3, [pc, #244]	; (112b0 <main+0xb98>)
   111ba:	2229      	movs	r2, #41	; 0x29
   111bc:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = ((uint16_t)(gzKalman*10) & 0xFF); // Gyro Z
   111be:	4b4c      	ldr	r3, [pc, #304]	; (112f0 <main+0xbd8>)
   111c0:	681a      	ldr	r2, [r3, #0]
   111c2:	4b40      	ldr	r3, [pc, #256]	; (112c4 <main+0xbac>)
   111c4:	4940      	ldr	r1, [pc, #256]	; (112c8 <main+0xbb0>)
   111c6:	1c10      	adds	r0, r2, #0
   111c8:	4798      	blx	r3
   111ca:	1c03      	adds	r3, r0, #0
   111cc:	1c1a      	adds	r2, r3, #0
   111ce:	4b3f      	ldr	r3, [pc, #252]	; (112cc <main+0xbb4>)
   111d0:	1c10      	adds	r0, r2, #0
   111d2:	4798      	blx	r3
   111d4:	0003      	movs	r3, r0
   111d6:	b29b      	uxth	r3, r3
   111d8:	b2da      	uxtb	r2, r3
   111da:	4b35      	ldr	r3, [pc, #212]	; (112b0 <main+0xb98>)
   111dc:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = ((uint16_t)(gzKalman*10) & 0xFF00) >> 8; // Gyro Z
   111de:	4b44      	ldr	r3, [pc, #272]	; (112f0 <main+0xbd8>)
   111e0:	681a      	ldr	r2, [r3, #0]
   111e2:	4b38      	ldr	r3, [pc, #224]	; (112c4 <main+0xbac>)
   111e4:	4938      	ldr	r1, [pc, #224]	; (112c8 <main+0xbb0>)
   111e6:	1c10      	adds	r0, r2, #0
   111e8:	4798      	blx	r3
   111ea:	1c03      	adds	r3, r0, #0
   111ec:	1c1a      	adds	r2, r3, #0
   111ee:	4b37      	ldr	r3, [pc, #220]	; (112cc <main+0xbb4>)
   111f0:	1c10      	adds	r0, r2, #0
   111f2:	4798      	blx	r3
   111f4:	0003      	movs	r3, r0
   111f6:	b29b      	uxth	r3, r3
   111f8:	0a1b      	lsrs	r3, r3, #8
   111fa:	b29b      	uxth	r3, r3
   111fc:	b2da      	uxtb	r2, r3
   111fe:	4b2c      	ldr	r3, [pc, #176]	; (112b0 <main+0xb98>)
   11200:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x2A;
   11202:	4b2b      	ldr	r3, [pc, #172]	; (112b0 <main+0xb98>)
   11204:	222a      	movs	r2, #42	; 0x2a
   11206:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = ((mx) & 0xFF); // Compass X
   11208:	4b3a      	ldr	r3, [pc, #232]	; (112f4 <main+0xbdc>)
   1120a:	2200      	movs	r2, #0
   1120c:	5e9b      	ldrsh	r3, [r3, r2]
   1120e:	b2da      	uxtb	r2, r3
   11210:	4b27      	ldr	r3, [pc, #156]	; (112b0 <main+0xb98>)
   11212:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (mx & 0xFF00) >> 8; // Compass X
   11214:	4b37      	ldr	r3, [pc, #220]	; (112f4 <main+0xbdc>)
   11216:	2200      	movs	r2, #0
   11218:	5e9b      	ldrsh	r3, [r3, r2]
   1121a:	121b      	asrs	r3, r3, #8
   1121c:	b2da      	uxtb	r2, r3
   1121e:	4b24      	ldr	r3, [pc, #144]	; (112b0 <main+0xb98>)
   11220:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x2B;
   11222:	4b23      	ldr	r3, [pc, #140]	; (112b0 <main+0xb98>)
   11224:	222b      	movs	r2, #43	; 0x2b
   11226:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (my & 0xFF); // Compass Y
   11228:	4b33      	ldr	r3, [pc, #204]	; (112f8 <main+0xbe0>)
   1122a:	2200      	movs	r2, #0
   1122c:	5e9b      	ldrsh	r3, [r3, r2]
   1122e:	b2da      	uxtb	r2, r3
   11230:	4b1f      	ldr	r3, [pc, #124]	; (112b0 <main+0xb98>)
   11232:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (my & 0xFF00) >> 8; // Compass Y
   11234:	4b30      	ldr	r3, [pc, #192]	; (112f8 <main+0xbe0>)
   11236:	2200      	movs	r2, #0
   11238:	5e9b      	ldrsh	r3, [r3, r2]
   1123a:	121b      	asrs	r3, r3, #8
   1123c:	b2da      	uxtb	r2, r3
   1123e:	4b1c      	ldr	r3, [pc, #112]	; (112b0 <main+0xb98>)
   11240:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x2C;
   11242:	4b1b      	ldr	r3, [pc, #108]	; (112b0 <main+0xb98>)
   11244:	222c      	movs	r2, #44	; 0x2c
   11246:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (mz & 0xFF); // Compass Z
   11248:	4b2c      	ldr	r3, [pc, #176]	; (112fc <main+0xbe4>)
   1124a:	2200      	movs	r2, #0
   1124c:	5e9b      	ldrsh	r3, [r3, r2]
   1124e:	b2da      	uxtb	r2, r3
   11250:	4b17      	ldr	r3, [pc, #92]	; (112b0 <main+0xb98>)
   11252:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (mz & 0xFF00) >> 8; // Compass Z
   11254:	4b29      	ldr	r3, [pc, #164]	; (112fc <main+0xbe4>)
   11256:	2200      	movs	r2, #0
   11258:	5e9b      	ldrsh	r3, [r3, r2]
   1125a:	121b      	asrs	r3, r3, #8
   1125c:	b2da      	uxtb	r2, r3
   1125e:	4b14      	ldr	r3, [pc, #80]	; (112b0 <main+0xb98>)
   11260:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x2D;
   11262:	4b13      	ldr	r3, [pc, #76]	; (112b0 <main+0xb98>)
   11264:	222d      	movs	r2, #45	; 0x2d
   11266:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = ((int)(light_sens) & 0xFF); // Light Sensor
   11268:	4b25      	ldr	r3, [pc, #148]	; (11300 <main+0xbe8>)
   1126a:	881b      	ldrh	r3, [r3, #0]
   1126c:	b2da      	uxtb	r2, r3
   1126e:	4b10      	ldr	r3, [pc, #64]	; (112b0 <main+0xb98>)
   11270:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((int)(light_sens) & 0xFF00) >> 8; // Light Sensor
   11272:	4b23      	ldr	r3, [pc, #140]	; (11300 <main+0xbe8>)
   11274:	881b      	ldrh	r3, [r3, #0]
   11276:	0a1b      	lsrs	r3, r3, #8
   11278:	b29b      	uxth	r3, r3
   1127a:	b2da      	uxtb	r2, r3
   1127c:	4b0c      	ldr	r3, [pc, #48]	; (112b0 <main+0xb98>)
   1127e:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0xDE;
   11280:	4b0b      	ldr	r3, [pc, #44]	; (112b0 <main+0xb98>)
   11282:	22de      	movs	r2, #222	; 0xde
   11284:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   11286:	490a      	ldr	r1, [pc, #40]	; (112b0 <main+0xb98>)
   11288:	4b0c      	ldr	r3, [pc, #48]	; (112bc <main+0xba4>)
   1128a:	2213      	movs	r2, #19
   1128c:	0018      	movs	r0, r3
   1128e:	4b0c      	ldr	r3, [pc, #48]	; (112c0 <main+0xba8>)
   11290:	4798      	blx	r3
					break;
   11292:	46c0      	nop			; (mov r8, r8)
			}
			BLE_TX_INDEX++;
   11294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11296:	3301      	adds	r3, #1
   11298:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(BLE_TX_INDEX > 3)
   1129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1129c:	2b03      	cmp	r3, #3
   1129e:	dd01      	ble.n	112a4 <main+0xb8c>
				BLE_TX_INDEX = 0;
   112a0:	2300      	movs	r3, #0
   112a2:	62fb      	str	r3, [r7, #44]	; 0x2c

			BLE_TX_TIME = millis(); // Placed at end of transmit to provide accurate message timing
   112a4:	4b17      	ldr	r3, [pc, #92]	; (11304 <main+0xbec>)
   112a6:	4798      	blx	r3
   112a8:	0003      	movs	r3, r0
   112aa:	62bb      	str	r3, [r7, #40]	; 0x28
   112ac:	e04f      	b.n	1134e <main+0xc36>
   112ae:	46c0      	nop			; (mov r8, r8)
   112b0:	20000928 	.word	0x20000928
   112b4:	20000958 	.word	0x20000958
   112b8:	2000030b 	.word	0x2000030b
   112bc:	200004a0 	.word	0x200004a0
   112c0:	000063bd 	.word	0x000063bd
   112c4:	00014ba9 	.word	0x00014ba9
   112c8:	41200000 	.word	0x41200000
   112cc:	00014439 	.word	0x00014439
   112d0:	2000030a 	.word	0x2000030a
   112d4:	200000b0 	.word	0x200000b0
   112d8:	2000030c 	.word	0x2000030c
   112dc:	200003d0 	.word	0x200003d0
   112e0:	200003d4 	.word	0x200003d4
   112e4:	200003d8 	.word	0x200003d8
   112e8:	200003dc 	.word	0x200003dc
   112ec:	200003e0 	.word	0x200003e0
   112f0:	200003e4 	.word	0x200003e4
   112f4:	200002f0 	.word	0x200002f0
   112f8:	200002f2 	.word	0x200002f2
   112fc:	200002f4 	.word	0x200002f4
   11300:	200003c0 	.word	0x200003c0
   11304:	0000b015 	.word	0x0000b015
		}
		else
		{
			// Use a dummy delay that mimics the delay of the BLE send
			// commands to keep the timing of the light sections the same
			while((millis()-BLE_DUMMY_TIME) < BLE_TX_DELAY + (1.0/BLE_BAUD)*20.0){}
   11308:	46c0      	nop			; (mov r8, r8)
   1130a:	4bf2      	ldr	r3, [pc, #968]	; (116d4 <main+0xfbc>)
   1130c:	4798      	blx	r3
   1130e:	0002      	movs	r2, r0
   11310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11312:	1ad2      	subs	r2, r2, r3
   11314:	4bf0      	ldr	r3, [pc, #960]	; (116d8 <main+0xfc0>)
   11316:	0010      	movs	r0, r2
   11318:	4798      	blx	r3
   1131a:	0005      	movs	r5, r0
   1131c:	000e      	movs	r6, r1
   1131e:	231a      	movs	r3, #26
   11320:	18fb      	adds	r3, r7, r3
   11322:	881a      	ldrh	r2, [r3, #0]
   11324:	4bed      	ldr	r3, [pc, #948]	; (116dc <main+0xfc4>)
   11326:	0010      	movs	r0, r2
   11328:	4798      	blx	r3
   1132a:	4ced      	ldr	r4, [pc, #948]	; (116e0 <main+0xfc8>)
   1132c:	4aed      	ldr	r2, [pc, #948]	; (116e4 <main+0xfcc>)
   1132e:	4bee      	ldr	r3, [pc, #952]	; (116e8 <main+0xfd0>)
   11330:	47a0      	blx	r4
   11332:	0003      	movs	r3, r0
   11334:	000c      	movs	r4, r1
   11336:	001a      	movs	r2, r3
   11338:	0023      	movs	r3, r4
   1133a:	4cec      	ldr	r4, [pc, #944]	; (116ec <main+0xfd4>)
   1133c:	0028      	movs	r0, r5
   1133e:	0031      	movs	r1, r6
   11340:	47a0      	blx	r4
   11342:	1e03      	subs	r3, r0, #0
   11344:	d1e1      	bne.n	1130a <main+0xbf2>
			BLE_DUMMY_TIME = millis();
   11346:	4be3      	ldr	r3, [pc, #908]	; (116d4 <main+0xfbc>)
   11348:	4798      	blx	r3
   1134a:	0003      	movs	r3, r0
   1134c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		
		////////////////////////////   Handle Limits Request   ////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LIMITS)
   1134e:	4be8      	ldr	r3, [pc, #928]	; (116f0 <main+0xfd8>)
   11350:	781b      	ldrb	r3, [r3, #0]
   11352:	2b00      	cmp	r3, #0
   11354:	d100      	bne.n	11358 <main+0xc40>
   11356:	e12d      	b.n	115b4 <main+0xe9c>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11358:	46c0      	nop			; (mov r8, r8)
   1135a:	4bde      	ldr	r3, [pc, #888]	; (116d4 <main+0xfbc>)
   1135c:	4798      	blx	r3
   1135e:	0002      	movs	r2, r0
   11360:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11362:	1ad3      	subs	r3, r2, r3
   11364:	221a      	movs	r2, #26
   11366:	18ba      	adds	r2, r7, r2
   11368:	8812      	ldrh	r2, [r2, #0]
   1136a:	0052      	lsls	r2, r2, #1
   1136c:	4293      	cmp	r3, r2
   1136e:	d3f4      	bcc.n	1135a <main+0xc42>
			BLE_TX_TIME = millis();
   11370:	4bd8      	ldr	r3, [pc, #864]	; (116d4 <main+0xfbc>)
   11372:	4798      	blx	r3
   11374:	0003      	movs	r3, r0
   11376:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x41;
   11378:	4bde      	ldr	r3, [pc, #888]	; (116f4 <main+0xfdc>)
   1137a:	2241      	movs	r2, #65	; 0x41
   1137c:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.motor_current_max;
   1137e:	4bde      	ldr	r3, [pc, #888]	; (116f8 <main+0xfe0>)
   11380:	681b      	ldr	r3, [r3, #0]
   11382:	b2da      	uxtb	r2, r3
   11384:	4bdb      	ldr	r3, [pc, #876]	; (116f4 <main+0xfdc>)
   11386:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x42;
   11388:	4bda      	ldr	r3, [pc, #872]	; (116f4 <main+0xfdc>)
   1138a:	2242      	movs	r2, #66	; 0x42
   1138c:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.motor_current_min;
   1138e:	4bda      	ldr	r3, [pc, #872]	; (116f8 <main+0xfe0>)
   11390:	685b      	ldr	r3, [r3, #4]
   11392:	b2da      	uxtb	r2, r3
   11394:	4bd7      	ldr	r3, [pc, #860]	; (116f4 <main+0xfdc>)
   11396:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x43;
   11398:	4bd6      	ldr	r3, [pc, #856]	; (116f4 <main+0xfdc>)
   1139a:	2243      	movs	r2, #67	; 0x43
   1139c:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.input_current_max;
   1139e:	4bd6      	ldr	r3, [pc, #856]	; (116f8 <main+0xfe0>)
   113a0:	689b      	ldr	r3, [r3, #8]
   113a2:	b2da      	uxtb	r2, r3
   113a4:	4bd3      	ldr	r3, [pc, #844]	; (116f4 <main+0xfdc>)
   113a6:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x44;
   113a8:	4bd2      	ldr	r3, [pc, #840]	; (116f4 <main+0xfdc>)
   113aa:	2244      	movs	r2, #68	; 0x44
   113ac:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.input_current_min;
   113ae:	4bd2      	ldr	r3, [pc, #840]	; (116f8 <main+0xfe0>)
   113b0:	68db      	ldr	r3, [r3, #12]
   113b2:	b2da      	uxtb	r2, r3
   113b4:	4bcf      	ldr	r3, [pc, #828]	; (116f4 <main+0xfdc>)
   113b6:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x45;
   113b8:	4bce      	ldr	r3, [pc, #824]	; (116f4 <main+0xfdc>)
   113ba:	2245      	movs	r2, #69	; 0x45
   113bc:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.abs_current_max;
   113be:	4bce      	ldr	r3, [pc, #824]	; (116f8 <main+0xfe0>)
   113c0:	691b      	ldr	r3, [r3, #16]
   113c2:	b2da      	uxtb	r2, r3
   113c4:	4bcb      	ldr	r3, [pc, #812]	; (116f4 <main+0xfdc>)
   113c6:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x46;
   113c8:	4bca      	ldr	r3, [pc, #808]	; (116f4 <main+0xfdc>)
   113ca:	2246      	movs	r2, #70	; 0x46
   113cc:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.max_vin;
   113ce:	4bca      	ldr	r3, [pc, #808]	; (116f8 <main+0xfe0>)
   113d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113d2:	b2da      	uxtb	r2, r3
   113d4:	4bc7      	ldr	r3, [pc, #796]	; (116f4 <main+0xfdc>)
   113d6:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   113d8:	49c6      	ldr	r1, [pc, #792]	; (116f4 <main+0xfdc>)
   113da:	4bc8      	ldr	r3, [pc, #800]	; (116fc <main+0xfe4>)
   113dc:	220c      	movs	r2, #12
   113de:	0018      	movs	r0, r3
   113e0:	4bc7      	ldr	r3, [pc, #796]	; (11700 <main+0xfe8>)
   113e2:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   113e4:	46c0      	nop			; (mov r8, r8)
   113e6:	4bbb      	ldr	r3, [pc, #748]	; (116d4 <main+0xfbc>)
   113e8:	4798      	blx	r3
   113ea:	0002      	movs	r2, r0
   113ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   113ee:	1ad3      	subs	r3, r2, r3
   113f0:	221a      	movs	r2, #26
   113f2:	18ba      	adds	r2, r7, r2
   113f4:	8812      	ldrh	r2, [r2, #0]
   113f6:	0052      	lsls	r2, r2, #1
   113f8:	4293      	cmp	r3, r2
   113fa:	d3f4      	bcc.n	113e6 <main+0xcce>
			BLE_TX_TIME = millis();
   113fc:	4bb5      	ldr	r3, [pc, #724]	; (116d4 <main+0xfbc>)
   113fe:	4798      	blx	r3
   11400:	0003      	movs	r3, r0
   11402:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x48;
   11404:	4bbb      	ldr	r3, [pc, #748]	; (116f4 <main+0xfdc>)
   11406:	2248      	movs	r2, #72	; 0x48
   11408:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.battery_cut_start;
   1140a:	4bbb      	ldr	r3, [pc, #748]	; (116f8 <main+0xfe0>)
   1140c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1140e:	4bbd      	ldr	r3, [pc, #756]	; (11704 <main+0xfec>)
   11410:	1c10      	adds	r0, r2, #0
   11412:	4798      	blx	r3
   11414:	0003      	movs	r3, r0
   11416:	b2da      	uxtb	r2, r3
   11418:	4bb6      	ldr	r3, [pc, #728]	; (116f4 <main+0xfdc>)
   1141a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x49;
   1141c:	4bb5      	ldr	r3, [pc, #724]	; (116f4 <main+0xfdc>)
   1141e:	2249      	movs	r2, #73	; 0x49
   11420:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.battery_cut_end;
   11422:	4bb5      	ldr	r3, [pc, #724]	; (116f8 <main+0xfe0>)
   11424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11426:	4bb7      	ldr	r3, [pc, #732]	; (11704 <main+0xfec>)
   11428:	1c10      	adds	r0, r2, #0
   1142a:	4798      	blx	r3
   1142c:	0003      	movs	r3, r0
   1142e:	b2da      	uxtb	r2, r3
   11430:	4bb0      	ldr	r3, [pc, #704]	; (116f4 <main+0xfdc>)
   11432:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4A;
   11434:	4baf      	ldr	r3, [pc, #700]	; (116f4 <main+0xfdc>)
   11436:	224a      	movs	r2, #74	; 0x4a
   11438:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (mcconf_limits.max_erpm & 0xFF);
   1143a:	4baf      	ldr	r3, [pc, #700]	; (116f8 <main+0xfe0>)
   1143c:	699b      	ldr	r3, [r3, #24]
   1143e:	b2da      	uxtb	r2, r3
   11440:	4bac      	ldr	r3, [pc, #688]	; (116f4 <main+0xfdc>)
   11442:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (mcconf_limits.max_erpm & 0xFF00) >> 8;
   11444:	4bac      	ldr	r3, [pc, #688]	; (116f8 <main+0xfe0>)
   11446:	699b      	ldr	r3, [r3, #24]
   11448:	121b      	asrs	r3, r3, #8
   1144a:	b2da      	uxtb	r2, r3
   1144c:	4ba9      	ldr	r3, [pc, #676]	; (116f4 <main+0xfdc>)
   1144e:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (mcconf_limits.max_erpm & 0xFF0000) >> 16;
   11450:	4ba9      	ldr	r3, [pc, #676]	; (116f8 <main+0xfe0>)
   11452:	699b      	ldr	r3, [r3, #24]
   11454:	141b      	asrs	r3, r3, #16
   11456:	b2da      	uxtb	r2, r3
   11458:	4ba6      	ldr	r3, [pc, #664]	; (116f4 <main+0xfdc>)
   1145a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4B;
   1145c:	4ba5      	ldr	r3, [pc, #660]	; (116f4 <main+0xfdc>)
   1145e:	224b      	movs	r2, #75	; 0x4b
   11460:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (mcconf_limits.min_erpm & 0xFF);
   11462:	4ba5      	ldr	r3, [pc, #660]	; (116f8 <main+0xfe0>)
   11464:	695b      	ldr	r3, [r3, #20]
   11466:	b2da      	uxtb	r2, r3
   11468:	4ba2      	ldr	r3, [pc, #648]	; (116f4 <main+0xfdc>)
   1146a:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (mcconf_limits.min_erpm & 0xFF00) >> 8;
   1146c:	4ba2      	ldr	r3, [pc, #648]	; (116f8 <main+0xfe0>)
   1146e:	695b      	ldr	r3, [r3, #20]
   11470:	121b      	asrs	r3, r3, #8
   11472:	b2da      	uxtb	r2, r3
   11474:	4b9f      	ldr	r3, [pc, #636]	; (116f4 <main+0xfdc>)
   11476:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (mcconf_limits.min_erpm & 0xFF0000) >> 16;
   11478:	4b9f      	ldr	r3, [pc, #636]	; (116f8 <main+0xfe0>)
   1147a:	695b      	ldr	r3, [r3, #20]
   1147c:	141b      	asrs	r3, r3, #16
   1147e:	b2da      	uxtb	r2, r3
   11480:	4b9c      	ldr	r3, [pc, #624]	; (116f4 <main+0xfdc>)
   11482:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   11484:	499b      	ldr	r1, [pc, #620]	; (116f4 <main+0xfdc>)
   11486:	4b9d      	ldr	r3, [pc, #628]	; (116fc <main+0xfe4>)
   11488:	220c      	movs	r2, #12
   1148a:	0018      	movs	r0, r3
   1148c:	4b9c      	ldr	r3, [pc, #624]	; (11700 <main+0xfe8>)
   1148e:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11490:	46c0      	nop			; (mov r8, r8)
   11492:	4b90      	ldr	r3, [pc, #576]	; (116d4 <main+0xfbc>)
   11494:	4798      	blx	r3
   11496:	0002      	movs	r2, r0
   11498:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1149a:	1ad3      	subs	r3, r2, r3
   1149c:	221a      	movs	r2, #26
   1149e:	18ba      	adds	r2, r7, r2
   114a0:	8812      	ldrh	r2, [r2, #0]
   114a2:	0052      	lsls	r2, r2, #1
   114a4:	4293      	cmp	r3, r2
   114a6:	d3f4      	bcc.n	11492 <main+0xd7a>
			BLE_TX_TIME = millis();
   114a8:	4b8a      	ldr	r3, [pc, #552]	; (116d4 <main+0xfbc>)
   114aa:	4798      	blx	r3
   114ac:	0003      	movs	r3, r0
   114ae:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x4C;
   114b0:	4b90      	ldr	r3, [pc, #576]	; (116f4 <main+0xfdc>)
   114b2:	224c      	movs	r2, #76	; 0x4c
   114b4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((mcconf_limits.max_erpm_fbrake) & 0xFF);
   114b6:	4b90      	ldr	r3, [pc, #576]	; (116f8 <main+0xfe0>)
   114b8:	69db      	ldr	r3, [r3, #28]
   114ba:	b2da      	uxtb	r2, r3
   114bc:	4b8d      	ldr	r3, [pc, #564]	; (116f4 <main+0xfdc>)
   114be:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ((mcconf_limits.max_erpm_fbrake) & 0xFF00) >> 8;
   114c0:	4b8d      	ldr	r3, [pc, #564]	; (116f8 <main+0xfe0>)
   114c2:	69db      	ldr	r3, [r3, #28]
   114c4:	121b      	asrs	r3, r3, #8
   114c6:	b2da      	uxtb	r2, r3
   114c8:	4b8a      	ldr	r3, [pc, #552]	; (116f4 <main+0xfdc>)
   114ca:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((mcconf_limits.max_erpm_fbrake) & 0xFF0000) >> 16;
   114cc:	4b8a      	ldr	r3, [pc, #552]	; (116f8 <main+0xfe0>)
   114ce:	69db      	ldr	r3, [r3, #28]
   114d0:	141b      	asrs	r3, r3, #16
   114d2:	b2da      	uxtb	r2, r3
   114d4:	4b87      	ldr	r3, [pc, #540]	; (116f4 <main+0xfdc>)
   114d6:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4D;
   114d8:	4b86      	ldr	r3, [pc, #536]	; (116f4 <main+0xfdc>)
   114da:	224d      	movs	r2, #77	; 0x4d
   114dc:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF);
   114de:	4b86      	ldr	r3, [pc, #536]	; (116f8 <main+0xfe0>)
   114e0:	6a1b      	ldr	r3, [r3, #32]
   114e2:	b2da      	uxtb	r2, r3
   114e4:	4b83      	ldr	r3, [pc, #524]	; (116f4 <main+0xfdc>)
   114e6:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF00) >> 8;
   114e8:	4b83      	ldr	r3, [pc, #524]	; (116f8 <main+0xfe0>)
   114ea:	6a1b      	ldr	r3, [r3, #32]
   114ec:	121b      	asrs	r3, r3, #8
   114ee:	b2da      	uxtb	r2, r3
   114f0:	4b80      	ldr	r3, [pc, #512]	; (116f4 <main+0xfdc>)
   114f2:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF0000) >> 16;
   114f4:	4b80      	ldr	r3, [pc, #512]	; (116f8 <main+0xfe0>)
   114f6:	6a1b      	ldr	r3, [r3, #32]
   114f8:	141b      	asrs	r3, r3, #16
   114fa:	b2da      	uxtb	r2, r3
   114fc:	4b7d      	ldr	r3, [pc, #500]	; (116f4 <main+0xfdc>)
   114fe:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4E;
   11500:	4b7c      	ldr	r3, [pc, #496]	; (116f4 <main+0xfdc>)
   11502:	224e      	movs	r2, #78	; 0x4e
   11504:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.temp_fet_start;
   11506:	4b7c      	ldr	r3, [pc, #496]	; (116f8 <main+0xfe0>)
   11508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1150a:	b2da      	uxtb	r2, r3
   1150c:	4b79      	ldr	r3, [pc, #484]	; (116f4 <main+0xfdc>)
   1150e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x4F;
   11510:	4b78      	ldr	r3, [pc, #480]	; (116f4 <main+0xfdc>)
   11512:	224f      	movs	r2, #79	; 0x4f
   11514:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.temp_fet_end;
   11516:	4b78      	ldr	r3, [pc, #480]	; (116f8 <main+0xfe0>)
   11518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1151a:	b2da      	uxtb	r2, r3
   1151c:	4b75      	ldr	r3, [pc, #468]	; (116f4 <main+0xfdc>)
   1151e:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   11520:	4974      	ldr	r1, [pc, #464]	; (116f4 <main+0xfdc>)
   11522:	4b76      	ldr	r3, [pc, #472]	; (116fc <main+0xfe4>)
   11524:	220c      	movs	r2, #12
   11526:	0018      	movs	r0, r3
   11528:	4b75      	ldr	r3, [pc, #468]	; (11700 <main+0xfe8>)
   1152a:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1152c:	46c0      	nop			; (mov r8, r8)
   1152e:	4b69      	ldr	r3, [pc, #420]	; (116d4 <main+0xfbc>)
   11530:	4798      	blx	r3
   11532:	0002      	movs	r2, r0
   11534:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11536:	1ad3      	subs	r3, r2, r3
   11538:	221a      	movs	r2, #26
   1153a:	18ba      	adds	r2, r7, r2
   1153c:	8812      	ldrh	r2, [r2, #0]
   1153e:	0052      	lsls	r2, r2, #1
   11540:	4293      	cmp	r3, r2
   11542:	d3f4      	bcc.n	1152e <main+0xe16>
			BLE_TX_TIME = millis();
   11544:	4b63      	ldr	r3, [pc, #396]	; (116d4 <main+0xfbc>)
   11546:	4798      	blx	r3
   11548:	0003      	movs	r3, r0
   1154a:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x50;
   1154c:	4b69      	ldr	r3, [pc, #420]	; (116f4 <main+0xfdc>)
   1154e:	2250      	movs	r2, #80	; 0x50
   11550:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.temp_motor_start;
   11552:	4b69      	ldr	r3, [pc, #420]	; (116f8 <main+0xfe0>)
   11554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11556:	b2da      	uxtb	r2, r3
   11558:	4b66      	ldr	r3, [pc, #408]	; (116f4 <main+0xfdc>)
   1155a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x51;
   1155c:	4b65      	ldr	r3, [pc, #404]	; (116f4 <main+0xfdc>)
   1155e:	2251      	movs	r2, #81	; 0x51
   11560:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.temp_motor_end;
   11562:	4b65      	ldr	r3, [pc, #404]	; (116f8 <main+0xfe0>)
   11564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11566:	b2da      	uxtb	r2, r3
   11568:	4b62      	ldr	r3, [pc, #392]	; (116f4 <main+0xfdc>)
   1156a:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x52;
   1156c:	4b61      	ldr	r3, [pc, #388]	; (116f4 <main+0xfdc>)
   1156e:	2252      	movs	r2, #82	; 0x52
   11570:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.max_duty;
   11572:	4b61      	ldr	r3, [pc, #388]	; (116f8 <main+0xfe0>)
   11574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11576:	b2da      	uxtb	r2, r3
   11578:	4b5e      	ldr	r3, [pc, #376]	; (116f4 <main+0xfdc>)
   1157a:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x53;
   1157c:	4b5d      	ldr	r3, [pc, #372]	; (116f4 <main+0xfdc>)
   1157e:	2253      	movs	r2, #83	; 0x53
   11580:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.min_duty;
   11582:	4b5d      	ldr	r3, [pc, #372]	; (116f8 <main+0xfe0>)
   11584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11586:	b2da      	uxtb	r2, r3
   11588:	4b5a      	ldr	r3, [pc, #360]	; (116f4 <main+0xfdc>)
   1158a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x47;
   1158c:	4b59      	ldr	r3, [pc, #356]	; (116f4 <main+0xfdc>)
   1158e:	2247      	movs	r2, #71	; 0x47
   11590:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.min_vin;
   11592:	4b59      	ldr	r3, [pc, #356]	; (116f8 <main+0xfe0>)
   11594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11596:	b2da      	uxtb	r2, r3
   11598:	4b56      	ldr	r3, [pc, #344]	; (116f4 <main+0xfdc>)
   1159a:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   1159c:	4955      	ldr	r1, [pc, #340]	; (116f4 <main+0xfdc>)
   1159e:	4b57      	ldr	r3, [pc, #348]	; (116fc <main+0xfe4>)
   115a0:	220a      	movs	r2, #10
   115a2:	0018      	movs	r0, r3
   115a4:	4b56      	ldr	r3, [pc, #344]	; (11700 <main+0xfe8>)
   115a6:	4798      	blx	r3

			SEND_LIMITS = 0;
   115a8:	4b51      	ldr	r3, [pc, #324]	; (116f0 <main+0xfd8>)
   115aa:	2200      	movs	r2, #0
   115ac:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   115ae:	4b56      	ldr	r3, [pc, #344]	; (11708 <main+0xff0>)
   115b0:	2201      	movs	r2, #1
   115b2:	701a      	strb	r2, [r3, #0]
		}

		
		////////////////////////   Handle Sensor Params Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_SENSORS)
   115b4:	4b55      	ldr	r3, [pc, #340]	; (1170c <main+0xff4>)
   115b6:	781b      	ldrb	r3, [r3, #0]
   115b8:	2b00      	cmp	r3, #0
   115ba:	d100      	bne.n	115be <main+0xea6>
   115bc:	e161      	b.n	11882 <main+0x116a>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   115be:	46c0      	nop			; (mov r8, r8)
   115c0:	4b44      	ldr	r3, [pc, #272]	; (116d4 <main+0xfbc>)
   115c2:	4798      	blx	r3
   115c4:	0002      	movs	r2, r0
   115c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   115c8:	1ad3      	subs	r3, r2, r3
   115ca:	221a      	movs	r2, #26
   115cc:	18ba      	adds	r2, r7, r2
   115ce:	8812      	ldrh	r2, [r2, #0]
   115d0:	0052      	lsls	r2, r2, #1
   115d2:	4293      	cmp	r3, r2
   115d4:	d3f4      	bcc.n	115c0 <main+0xea8>
			BLE_TX_TIME = millis();
   115d6:	4b3f      	ldr	r3, [pc, #252]	; (116d4 <main+0xfbc>)
   115d8:	4798      	blx	r3
   115da:	0003      	movs	r3, r0
   115dc:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x61;
   115de:	4b45      	ldr	r3, [pc, #276]	; (116f4 <main+0xfdc>)
   115e0:	2261      	movs	r2, #97	; 0x61
   115e2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(err_estimate[ax_kalman]) & 0xFF); // Accel X estimated error
   115e4:	4b4a      	ldr	r3, [pc, #296]	; (11710 <main+0xff8>)
   115e6:	681a      	ldr	r2, [r3, #0]
   115e8:	4b46      	ldr	r3, [pc, #280]	; (11704 <main+0xfec>)
   115ea:	1c10      	adds	r0, r2, #0
   115ec:	4798      	blx	r3
   115ee:	0003      	movs	r3, r0
   115f0:	b29b      	uxth	r3, r3
   115f2:	b2da      	uxtb	r2, r3
   115f4:	4b3f      	ldr	r3, [pc, #252]	; (116f4 <main+0xfdc>)
   115f6:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x62;
   115f8:	4b3e      	ldr	r3, [pc, #248]	; (116f4 <main+0xfdc>)
   115fa:	2262      	movs	r2, #98	; 0x62
   115fc:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(err_estimate[ay_kalman]) & 0xFF); // AccelY estimated error
   115fe:	4b44      	ldr	r3, [pc, #272]	; (11710 <main+0xff8>)
   11600:	685a      	ldr	r2, [r3, #4]
   11602:	4b40      	ldr	r3, [pc, #256]	; (11704 <main+0xfec>)
   11604:	1c10      	adds	r0, r2, #0
   11606:	4798      	blx	r3
   11608:	0003      	movs	r3, r0
   1160a:	b29b      	uxth	r3, r3
   1160c:	b2da      	uxtb	r2, r3
   1160e:	4b39      	ldr	r3, [pc, #228]	; (116f4 <main+0xfdc>)
   11610:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x63;
   11612:	4b38      	ldr	r3, [pc, #224]	; (116f4 <main+0xfdc>)
   11614:	2263      	movs	r2, #99	; 0x63
   11616:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(err_estimate[az_kalman]) & 0xFF); // Accel Z estimated error
   11618:	4b3d      	ldr	r3, [pc, #244]	; (11710 <main+0xff8>)
   1161a:	689a      	ldr	r2, [r3, #8]
   1161c:	4b39      	ldr	r3, [pc, #228]	; (11704 <main+0xfec>)
   1161e:	1c10      	adds	r0, r2, #0
   11620:	4798      	blx	r3
   11622:	0003      	movs	r3, r0
   11624:	b29b      	uxth	r3, r3
   11626:	b2da      	uxtb	r2, r3
   11628:	4b32      	ldr	r3, [pc, #200]	; (116f4 <main+0xfdc>)
   1162a:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x64;
   1162c:	4b31      	ldr	r3, [pc, #196]	; (116f4 <main+0xfdc>)
   1162e:	2264      	movs	r2, #100	; 0x64
   11630:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(err_estimate[gx_kalman]) & 0xFF); // Gyro X estimated error
   11632:	4b37      	ldr	r3, [pc, #220]	; (11710 <main+0xff8>)
   11634:	68da      	ldr	r2, [r3, #12]
   11636:	4b33      	ldr	r3, [pc, #204]	; (11704 <main+0xfec>)
   11638:	1c10      	adds	r0, r2, #0
   1163a:	4798      	blx	r3
   1163c:	0003      	movs	r3, r0
   1163e:	b29b      	uxth	r3, r3
   11640:	b2da      	uxtb	r2, r3
   11642:	4b2c      	ldr	r3, [pc, #176]	; (116f4 <main+0xfdc>)
   11644:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x65;
   11646:	4b2b      	ldr	r3, [pc, #172]	; (116f4 <main+0xfdc>)
   11648:	2265      	movs	r2, #101	; 0x65
   1164a:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(err_estimate[gy_kalman]) & 0xFF); // Gyro Y estimated error
   1164c:	4b30      	ldr	r3, [pc, #192]	; (11710 <main+0xff8>)
   1164e:	691a      	ldr	r2, [r3, #16]
   11650:	4b2c      	ldr	r3, [pc, #176]	; (11704 <main+0xfec>)
   11652:	1c10      	adds	r0, r2, #0
   11654:	4798      	blx	r3
   11656:	0003      	movs	r3, r0
   11658:	b29b      	uxth	r3, r3
   1165a:	b2da      	uxtb	r2, r3
   1165c:	4b25      	ldr	r3, [pc, #148]	; (116f4 <main+0xfdc>)
   1165e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x66;
   11660:	4b24      	ldr	r3, [pc, #144]	; (116f4 <main+0xfdc>)
   11662:	2266      	movs	r2, #102	; 0x66
   11664:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(err_estimate[gz_kalman]) & 0xFF); // Gyro Z estimated error
   11666:	4b2a      	ldr	r3, [pc, #168]	; (11710 <main+0xff8>)
   11668:	695a      	ldr	r2, [r3, #20]
   1166a:	4b26      	ldr	r3, [pc, #152]	; (11704 <main+0xfec>)
   1166c:	1c10      	adds	r0, r2, #0
   1166e:	4798      	blx	r3
   11670:	0003      	movs	r3, r0
   11672:	b29b      	uxth	r3, r3
   11674:	b2da      	uxtb	r2, r3
   11676:	4b1f      	ldr	r3, [pc, #124]	; (116f4 <main+0xfdc>)
   11678:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x67;
   1167a:	4b1e      	ldr	r3, [pc, #120]	; (116f4 <main+0xfdc>)
   1167c:	2267      	movs	r2, #103	; 0x67
   1167e:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(err_estimate[light_kalman]) & 0xFF); // Light Sensor estimated error
   11680:	4b23      	ldr	r3, [pc, #140]	; (11710 <main+0xff8>)
   11682:	699a      	ldr	r2, [r3, #24]
   11684:	4b1f      	ldr	r3, [pc, #124]	; (11704 <main+0xfec>)
   11686:	1c10      	adds	r0, r2, #0
   11688:	4798      	blx	r3
   1168a:	0003      	movs	r3, r0
   1168c:	b29b      	uxth	r3, r3
   1168e:	b2da      	uxtb	r2, r3
   11690:	4b18      	ldr	r3, [pc, #96]	; (116f4 <main+0xfdc>)
   11692:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   11694:	4917      	ldr	r1, [pc, #92]	; (116f4 <main+0xfdc>)
   11696:	4b19      	ldr	r3, [pc, #100]	; (116fc <main+0xfe4>)
   11698:	220e      	movs	r2, #14
   1169a:	0018      	movs	r0, r3
   1169c:	4b18      	ldr	r3, [pc, #96]	; (11700 <main+0xfe8>)
   1169e:	4798      	blx	r3
		
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   116a0:	46c0      	nop			; (mov r8, r8)
   116a2:	4b0c      	ldr	r3, [pc, #48]	; (116d4 <main+0xfbc>)
   116a4:	4798      	blx	r3
   116a6:	0002      	movs	r2, r0
   116a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   116aa:	1ad3      	subs	r3, r2, r3
   116ac:	221a      	movs	r2, #26
   116ae:	18ba      	adds	r2, r7, r2
   116b0:	8812      	ldrh	r2, [r2, #0]
   116b2:	0052      	lsls	r2, r2, #1
   116b4:	4293      	cmp	r3, r2
   116b6:	d3f4      	bcc.n	116a2 <main+0xf8a>
			BLE_TX_TIME = millis();
   116b8:	4b06      	ldr	r3, [pc, #24]	; (116d4 <main+0xfbc>)
   116ba:	4798      	blx	r3
   116bc:	0003      	movs	r3, r0
   116be:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x68;
   116c0:	4b0c      	ldr	r3, [pc, #48]	; (116f4 <main+0xfdc>)
   116c2:	2268      	movs	r2, #104	; 0x68
   116c4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(q[ax_kalman]*100.0) & 0xFF); // Accel X Sensitivity
   116c6:	4b13      	ldr	r3, [pc, #76]	; (11714 <main+0xffc>)
   116c8:	681a      	ldr	r2, [r3, #0]
   116ca:	4b13      	ldr	r3, [pc, #76]	; (11718 <main+0x1000>)
   116cc:	1c10      	adds	r0, r2, #0
   116ce:	4798      	blx	r3
   116d0:	e024      	b.n	1171c <main+0x1004>
   116d2:	46c0      	nop			; (mov r8, r8)
   116d4:	0000b015 	.word	0x0000b015
   116d8:	00016d2d 	.word	0x00016d2d
   116dc:	00016ca9 	.word	0x00016ca9
   116e0:	0001528d 	.word	0x0001528d
   116e4:	16c16c17 	.word	0x16c16c17
   116e8:	3f26c16c 	.word	0x3f26c16c
   116ec:	00014321 	.word	0x00014321
   116f0:	2000030e 	.word	0x2000030e
   116f4:	20000928 	.word	0x20000928
   116f8:	20000fd4 	.word	0x20000fd4
   116fc:	200004a0 	.word	0x200004a0
   11700:	000063bd 	.word	0x000063bd
   11704:	00014439 	.word	0x00014439
   11708:	200000b1 	.word	0x200000b1
   1170c:	200003af 	.word	0x200003af
   11710:	200009c4 	.word	0x200009c4
   11714:	20000fb8 	.word	0x20000fb8
   11718:	00016d9d 	.word	0x00016d9d
   1171c:	4cf8      	ldr	r4, [pc, #992]	; (11b00 <main+0x13e8>)
   1171e:	2200      	movs	r2, #0
   11720:	4bf8      	ldr	r3, [pc, #992]	; (11b04 <main+0x13ec>)
   11722:	47a0      	blx	r4
   11724:	0003      	movs	r3, r0
   11726:	000c      	movs	r4, r1
   11728:	0019      	movs	r1, r3
   1172a:	0022      	movs	r2, r4
   1172c:	4bf6      	ldr	r3, [pc, #984]	; (11b08 <main+0x13f0>)
   1172e:	0008      	movs	r0, r1
   11730:	0011      	movs	r1, r2
   11732:	4798      	blx	r3
   11734:	0003      	movs	r3, r0
   11736:	b29b      	uxth	r3, r3
   11738:	b2da      	uxtb	r2, r3
   1173a:	4bf4      	ldr	r3, [pc, #976]	; (11b0c <main+0x13f4>)
   1173c:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x69;
   1173e:	4bf3      	ldr	r3, [pc, #972]	; (11b0c <main+0x13f4>)
   11740:	2269      	movs	r2, #105	; 0x69
   11742:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(q[ay_kalman]*100.0) & 0xFF); // Accel Y Sensitivity
   11744:	4bf2      	ldr	r3, [pc, #968]	; (11b10 <main+0x13f8>)
   11746:	685a      	ldr	r2, [r3, #4]
   11748:	4bf2      	ldr	r3, [pc, #968]	; (11b14 <main+0x13fc>)
   1174a:	1c10      	adds	r0, r2, #0
   1174c:	4798      	blx	r3
   1174e:	4cec      	ldr	r4, [pc, #944]	; (11b00 <main+0x13e8>)
   11750:	2200      	movs	r2, #0
   11752:	4bec      	ldr	r3, [pc, #944]	; (11b04 <main+0x13ec>)
   11754:	47a0      	blx	r4
   11756:	0003      	movs	r3, r0
   11758:	000c      	movs	r4, r1
   1175a:	0019      	movs	r1, r3
   1175c:	0022      	movs	r2, r4
   1175e:	4bea      	ldr	r3, [pc, #936]	; (11b08 <main+0x13f0>)
   11760:	0008      	movs	r0, r1
   11762:	0011      	movs	r1, r2
   11764:	4798      	blx	r3
   11766:	0003      	movs	r3, r0
   11768:	b29b      	uxth	r3, r3
   1176a:	b2da      	uxtb	r2, r3
   1176c:	4be7      	ldr	r3, [pc, #924]	; (11b0c <main+0x13f4>)
   1176e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x6A;
   11770:	4be6      	ldr	r3, [pc, #920]	; (11b0c <main+0x13f4>)
   11772:	226a      	movs	r2, #106	; 0x6a
   11774:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(q[az_kalman]*100.0) & 0xFF); // Accel Z Sensitivity
   11776:	4be6      	ldr	r3, [pc, #920]	; (11b10 <main+0x13f8>)
   11778:	689a      	ldr	r2, [r3, #8]
   1177a:	4be6      	ldr	r3, [pc, #920]	; (11b14 <main+0x13fc>)
   1177c:	1c10      	adds	r0, r2, #0
   1177e:	4798      	blx	r3
   11780:	4cdf      	ldr	r4, [pc, #892]	; (11b00 <main+0x13e8>)
   11782:	2200      	movs	r2, #0
   11784:	4bdf      	ldr	r3, [pc, #892]	; (11b04 <main+0x13ec>)
   11786:	47a0      	blx	r4
   11788:	0003      	movs	r3, r0
   1178a:	000c      	movs	r4, r1
   1178c:	0019      	movs	r1, r3
   1178e:	0022      	movs	r2, r4
   11790:	4bdd      	ldr	r3, [pc, #884]	; (11b08 <main+0x13f0>)
   11792:	0008      	movs	r0, r1
   11794:	0011      	movs	r1, r2
   11796:	4798      	blx	r3
   11798:	0003      	movs	r3, r0
   1179a:	b29b      	uxth	r3, r3
   1179c:	b2da      	uxtb	r2, r3
   1179e:	4bdb      	ldr	r3, [pc, #876]	; (11b0c <main+0x13f4>)
   117a0:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x6B;
   117a2:	4bda      	ldr	r3, [pc, #872]	; (11b0c <main+0x13f4>)
   117a4:	226b      	movs	r2, #107	; 0x6b
   117a6:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(q[gx_kalman]*100.0) & 0xFF); // Gyro X Sensitivity
   117a8:	4bd9      	ldr	r3, [pc, #868]	; (11b10 <main+0x13f8>)
   117aa:	68da      	ldr	r2, [r3, #12]
   117ac:	4bd9      	ldr	r3, [pc, #868]	; (11b14 <main+0x13fc>)
   117ae:	1c10      	adds	r0, r2, #0
   117b0:	4798      	blx	r3
   117b2:	4cd3      	ldr	r4, [pc, #844]	; (11b00 <main+0x13e8>)
   117b4:	2200      	movs	r2, #0
   117b6:	4bd3      	ldr	r3, [pc, #844]	; (11b04 <main+0x13ec>)
   117b8:	47a0      	blx	r4
   117ba:	0003      	movs	r3, r0
   117bc:	000c      	movs	r4, r1
   117be:	0019      	movs	r1, r3
   117c0:	0022      	movs	r2, r4
   117c2:	4bd1      	ldr	r3, [pc, #836]	; (11b08 <main+0x13f0>)
   117c4:	0008      	movs	r0, r1
   117c6:	0011      	movs	r1, r2
   117c8:	4798      	blx	r3
   117ca:	0003      	movs	r3, r0
   117cc:	b29b      	uxth	r3, r3
   117ce:	b2da      	uxtb	r2, r3
   117d0:	4bce      	ldr	r3, [pc, #824]	; (11b0c <main+0x13f4>)
   117d2:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x6C;
   117d4:	4bcd      	ldr	r3, [pc, #820]	; (11b0c <main+0x13f4>)
   117d6:	226c      	movs	r2, #108	; 0x6c
   117d8:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(q[gy_kalman]*100.0) & 0xFF); // Gyro Y Sensitivity
   117da:	4bcd      	ldr	r3, [pc, #820]	; (11b10 <main+0x13f8>)
   117dc:	691a      	ldr	r2, [r3, #16]
   117de:	4bcd      	ldr	r3, [pc, #820]	; (11b14 <main+0x13fc>)
   117e0:	1c10      	adds	r0, r2, #0
   117e2:	4798      	blx	r3
   117e4:	4cc6      	ldr	r4, [pc, #792]	; (11b00 <main+0x13e8>)
   117e6:	2200      	movs	r2, #0
   117e8:	4bc6      	ldr	r3, [pc, #792]	; (11b04 <main+0x13ec>)
   117ea:	47a0      	blx	r4
   117ec:	0003      	movs	r3, r0
   117ee:	000c      	movs	r4, r1
   117f0:	0019      	movs	r1, r3
   117f2:	0022      	movs	r2, r4
   117f4:	4bc4      	ldr	r3, [pc, #784]	; (11b08 <main+0x13f0>)
   117f6:	0008      	movs	r0, r1
   117f8:	0011      	movs	r1, r2
   117fa:	4798      	blx	r3
   117fc:	0003      	movs	r3, r0
   117fe:	b29b      	uxth	r3, r3
   11800:	b2da      	uxtb	r2, r3
   11802:	4bc2      	ldr	r3, [pc, #776]	; (11b0c <main+0x13f4>)
   11804:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x6D;
   11806:	4bc1      	ldr	r3, [pc, #772]	; (11b0c <main+0x13f4>)
   11808:	226d      	movs	r2, #109	; 0x6d
   1180a:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(q[gz_kalman]*100.0) & 0xFF); // Gyro Z Sensitivity
   1180c:	4bc0      	ldr	r3, [pc, #768]	; (11b10 <main+0x13f8>)
   1180e:	695a      	ldr	r2, [r3, #20]
   11810:	4bc0      	ldr	r3, [pc, #768]	; (11b14 <main+0x13fc>)
   11812:	1c10      	adds	r0, r2, #0
   11814:	4798      	blx	r3
   11816:	4cba      	ldr	r4, [pc, #744]	; (11b00 <main+0x13e8>)
   11818:	2200      	movs	r2, #0
   1181a:	4bba      	ldr	r3, [pc, #744]	; (11b04 <main+0x13ec>)
   1181c:	47a0      	blx	r4
   1181e:	0003      	movs	r3, r0
   11820:	000c      	movs	r4, r1
   11822:	0019      	movs	r1, r3
   11824:	0022      	movs	r2, r4
   11826:	4bb8      	ldr	r3, [pc, #736]	; (11b08 <main+0x13f0>)
   11828:	0008      	movs	r0, r1
   1182a:	0011      	movs	r1, r2
   1182c:	4798      	blx	r3
   1182e:	0003      	movs	r3, r0
   11830:	b29b      	uxth	r3, r3
   11832:	b2da      	uxtb	r2, r3
   11834:	4bb5      	ldr	r3, [pc, #724]	; (11b0c <main+0x13f4>)
   11836:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x6E;
   11838:	4bb4      	ldr	r3, [pc, #720]	; (11b0c <main+0x13f4>)
   1183a:	226e      	movs	r2, #110	; 0x6e
   1183c:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(q[light_kalman]*100.0) & 0xFF); // Light Sensitivity
   1183e:	4bb4      	ldr	r3, [pc, #720]	; (11b10 <main+0x13f8>)
   11840:	699a      	ldr	r2, [r3, #24]
   11842:	4bb4      	ldr	r3, [pc, #720]	; (11b14 <main+0x13fc>)
   11844:	1c10      	adds	r0, r2, #0
   11846:	4798      	blx	r3
   11848:	4cad      	ldr	r4, [pc, #692]	; (11b00 <main+0x13e8>)
   1184a:	2200      	movs	r2, #0
   1184c:	4bad      	ldr	r3, [pc, #692]	; (11b04 <main+0x13ec>)
   1184e:	47a0      	blx	r4
   11850:	0003      	movs	r3, r0
   11852:	000c      	movs	r4, r1
   11854:	0019      	movs	r1, r3
   11856:	0022      	movs	r2, r4
   11858:	4bab      	ldr	r3, [pc, #684]	; (11b08 <main+0x13f0>)
   1185a:	0008      	movs	r0, r1
   1185c:	0011      	movs	r1, r2
   1185e:	4798      	blx	r3
   11860:	0003      	movs	r3, r0
   11862:	b29b      	uxth	r3, r3
   11864:	b2da      	uxtb	r2, r3
   11866:	4ba9      	ldr	r3, [pc, #676]	; (11b0c <main+0x13f4>)
   11868:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   1186a:	49a8      	ldr	r1, [pc, #672]	; (11b0c <main+0x13f4>)
   1186c:	4baa      	ldr	r3, [pc, #680]	; (11b18 <main+0x1400>)
   1186e:	220e      	movs	r2, #14
   11870:	0018      	movs	r0, r3
   11872:	4baa      	ldr	r3, [pc, #680]	; (11b1c <main+0x1404>)
   11874:	4798      	blx	r3

			SEND_SENSORS = 0;
   11876:	4baa      	ldr	r3, [pc, #680]	; (11b20 <main+0x1408>)
   11878:	2200      	movs	r2, #0
   1187a:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1187c:	4ba9      	ldr	r3, [pc, #676]	; (11b24 <main+0x140c>)
   1187e:	2201      	movs	r2, #1
   11880:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle LED Params Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LED_CHARS)
   11882:	4ba9      	ldr	r3, [pc, #676]	; (11b28 <main+0x1410>)
   11884:	781b      	ldrb	r3, [r3, #0]
   11886:	2b00      	cmp	r3, #0
   11888:	d100      	bne.n	1188c <main+0x1174>
   1188a:	e27d      	b.n	11d88 <main+0x1670>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1188c:	46c0      	nop			; (mov r8, r8)
   1188e:	4ba7      	ldr	r3, [pc, #668]	; (11b2c <main+0x1414>)
   11890:	4798      	blx	r3
   11892:	0002      	movs	r2, r0
   11894:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11896:	1ad3      	subs	r3, r2, r3
   11898:	221a      	movs	r2, #26
   1189a:	18ba      	adds	r2, r7, r2
   1189c:	8812      	ldrh	r2, [r2, #0]
   1189e:	0052      	lsls	r2, r2, #1
   118a0:	4293      	cmp	r3, r2
   118a2:	d3f4      	bcc.n	1188e <main+0x1176>
			BLE_TX_TIME = millis();
   118a4:	4ba1      	ldr	r3, [pc, #644]	; (11b2c <main+0x1414>)
   118a6:	4798      	blx	r3
   118a8:	0003      	movs	r3, r0
   118aa:	62bb      	str	r3, [r7, #40]	; 0x28

			uint8_t led_mode_switches = ((light_mode << 4) | (HEADLIGHTS << 3) | (SIDELIGHTS << 2) | (LIGHT_CONTROLLED << 1) | IMU_CONTROLED);
   118ac:	4ba0      	ldr	r3, [pc, #640]	; (11b30 <main+0x1418>)
   118ae:	781b      	ldrb	r3, [r3, #0]
   118b0:	011b      	lsls	r3, r3, #4
   118b2:	b25a      	sxtb	r2, r3
   118b4:	4b9f      	ldr	r3, [pc, #636]	; (11b34 <main+0x141c>)
   118b6:	781b      	ldrb	r3, [r3, #0]
   118b8:	00db      	lsls	r3, r3, #3
   118ba:	b25b      	sxtb	r3, r3
   118bc:	4313      	orrs	r3, r2
   118be:	b25a      	sxtb	r2, r3
   118c0:	4b9d      	ldr	r3, [pc, #628]	; (11b38 <main+0x1420>)
   118c2:	781b      	ldrb	r3, [r3, #0]
   118c4:	009b      	lsls	r3, r3, #2
   118c6:	b25b      	sxtb	r3, r3
   118c8:	4313      	orrs	r3, r2
   118ca:	b25a      	sxtb	r2, r3
   118cc:	4b9b      	ldr	r3, [pc, #620]	; (11b3c <main+0x1424>)
   118ce:	781b      	ldrb	r3, [r3, #0]
   118d0:	005b      	lsls	r3, r3, #1
   118d2:	b25b      	sxtb	r3, r3
   118d4:	4313      	orrs	r3, r2
   118d6:	b25a      	sxtb	r2, r3
   118d8:	4b99      	ldr	r3, [pc, #612]	; (11b40 <main+0x1428>)
   118da:	781b      	ldrb	r3, [r3, #0]
   118dc:	b25b      	sxtb	r3, r3
   118de:	4313      	orrs	r3, r2
   118e0:	b25a      	sxtb	r2, r3
   118e2:	2319      	movs	r3, #25
   118e4:	18fb      	adds	r3, r7, r3
   118e6:	701a      	strb	r2, [r3, #0]

			// Global LED Settings
			ble_write_buffer[0] = 0x31;
   118e8:	4b88      	ldr	r3, [pc, #544]	; (11b0c <main+0x13f4>)
   118ea:	2231      	movs	r2, #49	; 0x31
   118ec:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = led_mode_switches; // Current switch states
   118ee:	4b87      	ldr	r3, [pc, #540]	; (11b0c <main+0x13f4>)
   118f0:	2219      	movs	r2, #25
   118f2:	18ba      	adds	r2, r7, r2
   118f4:	7812      	ldrb	r2, [r2, #0]
   118f6:	705a      	strb	r2, [r3, #1]
			// Static
			ble_write_buffer[2] = 0x32;
   118f8:	4b84      	ldr	r3, [pc, #528]	; (11b0c <main+0x13f4>)
   118fa:	2232      	movs	r2, #50	; 0x32
   118fc:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((float)Static_RGB.LR / 655.35);
   118fe:	4b91      	ldr	r3, [pc, #580]	; (11b44 <main+0x142c>)
   11900:	881a      	ldrh	r2, [r3, #0]
   11902:	4b91      	ldr	r3, [pc, #580]	; (11b48 <main+0x1430>)
   11904:	0010      	movs	r0, r2
   11906:	4798      	blx	r3
   11908:	1c02      	adds	r2, r0, #0
   1190a:	4b82      	ldr	r3, [pc, #520]	; (11b14 <main+0x13fc>)
   1190c:	1c10      	adds	r0, r2, #0
   1190e:	4798      	blx	r3
   11910:	4c8e      	ldr	r4, [pc, #568]	; (11b4c <main+0x1434>)
   11912:	4a8f      	ldr	r2, [pc, #572]	; (11b50 <main+0x1438>)
   11914:	4b8f      	ldr	r3, [pc, #572]	; (11b54 <main+0x143c>)
   11916:	47a0      	blx	r4
   11918:	0003      	movs	r3, r0
   1191a:	000c      	movs	r4, r1
   1191c:	0019      	movs	r1, r3
   1191e:	0022      	movs	r2, r4
   11920:	4b79      	ldr	r3, [pc, #484]	; (11b08 <main+0x13f0>)
   11922:	0008      	movs	r0, r1
   11924:	0011      	movs	r1, r2
   11926:	4798      	blx	r3
   11928:	0003      	movs	r3, r0
   1192a:	b2da      	uxtb	r2, r3
   1192c:	4b77      	ldr	r3, [pc, #476]	; (11b0c <main+0x13f4>)
   1192e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((float)Static_RGB.LG / 655.35);
   11930:	4b84      	ldr	r3, [pc, #528]	; (11b44 <main+0x142c>)
   11932:	885a      	ldrh	r2, [r3, #2]
   11934:	4b84      	ldr	r3, [pc, #528]	; (11b48 <main+0x1430>)
   11936:	0010      	movs	r0, r2
   11938:	4798      	blx	r3
   1193a:	1c02      	adds	r2, r0, #0
   1193c:	4b75      	ldr	r3, [pc, #468]	; (11b14 <main+0x13fc>)
   1193e:	1c10      	adds	r0, r2, #0
   11940:	4798      	blx	r3
   11942:	4c82      	ldr	r4, [pc, #520]	; (11b4c <main+0x1434>)
   11944:	4a82      	ldr	r2, [pc, #520]	; (11b50 <main+0x1438>)
   11946:	4b83      	ldr	r3, [pc, #524]	; (11b54 <main+0x143c>)
   11948:	47a0      	blx	r4
   1194a:	0003      	movs	r3, r0
   1194c:	000c      	movs	r4, r1
   1194e:	0019      	movs	r1, r3
   11950:	0022      	movs	r2, r4
   11952:	4b6d      	ldr	r3, [pc, #436]	; (11b08 <main+0x13f0>)
   11954:	0008      	movs	r0, r1
   11956:	0011      	movs	r1, r2
   11958:	4798      	blx	r3
   1195a:	0003      	movs	r3, r0
   1195c:	b2da      	uxtb	r2, r3
   1195e:	4b6b      	ldr	r3, [pc, #428]	; (11b0c <main+0x13f4>)
   11960:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((float)Static_RGB.LB / 655.35);
   11962:	4b78      	ldr	r3, [pc, #480]	; (11b44 <main+0x142c>)
   11964:	889a      	ldrh	r2, [r3, #4]
   11966:	4b78      	ldr	r3, [pc, #480]	; (11b48 <main+0x1430>)
   11968:	0010      	movs	r0, r2
   1196a:	4798      	blx	r3
   1196c:	1c02      	adds	r2, r0, #0
   1196e:	4b69      	ldr	r3, [pc, #420]	; (11b14 <main+0x13fc>)
   11970:	1c10      	adds	r0, r2, #0
   11972:	4798      	blx	r3
   11974:	4c75      	ldr	r4, [pc, #468]	; (11b4c <main+0x1434>)
   11976:	4a76      	ldr	r2, [pc, #472]	; (11b50 <main+0x1438>)
   11978:	4b76      	ldr	r3, [pc, #472]	; (11b54 <main+0x143c>)
   1197a:	47a0      	blx	r4
   1197c:	0003      	movs	r3, r0
   1197e:	000c      	movs	r4, r1
   11980:	0019      	movs	r1, r3
   11982:	0022      	movs	r2, r4
   11984:	4b60      	ldr	r3, [pc, #384]	; (11b08 <main+0x13f0>)
   11986:	0008      	movs	r0, r1
   11988:	0011      	movs	r1, r2
   1198a:	4798      	blx	r3
   1198c:	0003      	movs	r3, r0
   1198e:	b2da      	uxtb	r2, r3
   11990:	4b5e      	ldr	r3, [pc, #376]	; (11b0c <main+0x13f4>)
   11992:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((float)Static_RGB.RR / 655.35);
   11994:	4b6b      	ldr	r3, [pc, #428]	; (11b44 <main+0x142c>)
   11996:	88da      	ldrh	r2, [r3, #6]
   11998:	4b6b      	ldr	r3, [pc, #428]	; (11b48 <main+0x1430>)
   1199a:	0010      	movs	r0, r2
   1199c:	4798      	blx	r3
   1199e:	1c02      	adds	r2, r0, #0
   119a0:	4b5c      	ldr	r3, [pc, #368]	; (11b14 <main+0x13fc>)
   119a2:	1c10      	adds	r0, r2, #0
   119a4:	4798      	blx	r3
   119a6:	4c69      	ldr	r4, [pc, #420]	; (11b4c <main+0x1434>)
   119a8:	4a69      	ldr	r2, [pc, #420]	; (11b50 <main+0x1438>)
   119aa:	4b6a      	ldr	r3, [pc, #424]	; (11b54 <main+0x143c>)
   119ac:	47a0      	blx	r4
   119ae:	0003      	movs	r3, r0
   119b0:	000c      	movs	r4, r1
   119b2:	0019      	movs	r1, r3
   119b4:	0022      	movs	r2, r4
   119b6:	4b54      	ldr	r3, [pc, #336]	; (11b08 <main+0x13f0>)
   119b8:	0008      	movs	r0, r1
   119ba:	0011      	movs	r1, r2
   119bc:	4798      	blx	r3
   119be:	0003      	movs	r3, r0
   119c0:	b2da      	uxtb	r2, r3
   119c2:	4b52      	ldr	r3, [pc, #328]	; (11b0c <main+0x13f4>)
   119c4:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Static_RGB.RG / 655.35);
   119c6:	4b5f      	ldr	r3, [pc, #380]	; (11b44 <main+0x142c>)
   119c8:	891a      	ldrh	r2, [r3, #8]
   119ca:	4b5f      	ldr	r3, [pc, #380]	; (11b48 <main+0x1430>)
   119cc:	0010      	movs	r0, r2
   119ce:	4798      	blx	r3
   119d0:	1c02      	adds	r2, r0, #0
   119d2:	4b50      	ldr	r3, [pc, #320]	; (11b14 <main+0x13fc>)
   119d4:	1c10      	adds	r0, r2, #0
   119d6:	4798      	blx	r3
   119d8:	4c5c      	ldr	r4, [pc, #368]	; (11b4c <main+0x1434>)
   119da:	4a5d      	ldr	r2, [pc, #372]	; (11b50 <main+0x1438>)
   119dc:	4b5d      	ldr	r3, [pc, #372]	; (11b54 <main+0x143c>)
   119de:	47a0      	blx	r4
   119e0:	0003      	movs	r3, r0
   119e2:	000c      	movs	r4, r1
   119e4:	0019      	movs	r1, r3
   119e6:	0022      	movs	r2, r4
   119e8:	4b47      	ldr	r3, [pc, #284]	; (11b08 <main+0x13f0>)
   119ea:	0008      	movs	r0, r1
   119ec:	0011      	movs	r1, r2
   119ee:	4798      	blx	r3
   119f0:	0003      	movs	r3, r0
   119f2:	b2da      	uxtb	r2, r3
   119f4:	4b45      	ldr	r3, [pc, #276]	; (11b0c <main+0x13f4>)
   119f6:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Static_RGB.RB / 655.35);
   119f8:	4b52      	ldr	r3, [pc, #328]	; (11b44 <main+0x142c>)
   119fa:	895a      	ldrh	r2, [r3, #10]
   119fc:	4b52      	ldr	r3, [pc, #328]	; (11b48 <main+0x1430>)
   119fe:	0010      	movs	r0, r2
   11a00:	4798      	blx	r3
   11a02:	1c02      	adds	r2, r0, #0
   11a04:	4b43      	ldr	r3, [pc, #268]	; (11b14 <main+0x13fc>)
   11a06:	1c10      	adds	r0, r2, #0
   11a08:	4798      	blx	r3
   11a0a:	4c50      	ldr	r4, [pc, #320]	; (11b4c <main+0x1434>)
   11a0c:	4a50      	ldr	r2, [pc, #320]	; (11b50 <main+0x1438>)
   11a0e:	4b51      	ldr	r3, [pc, #324]	; (11b54 <main+0x143c>)
   11a10:	47a0      	blx	r4
   11a12:	0003      	movs	r3, r0
   11a14:	000c      	movs	r4, r1
   11a16:	0019      	movs	r1, r3
   11a18:	0022      	movs	r2, r4
   11a1a:	4b3b      	ldr	r3, [pc, #236]	; (11b08 <main+0x13f0>)
   11a1c:	0008      	movs	r0, r1
   11a1e:	0011      	movs	r1, r2
   11a20:	4798      	blx	r3
   11a22:	0003      	movs	r3, r0
   11a24:	b2da      	uxtb	r2, r3
   11a26:	4b39      	ldr	r3, [pc, #228]	; (11b0c <main+0x13f4>)
   11a28:	721a      	strb	r2, [r3, #8]
			// Color Cycle
			ble_write_buffer[9] = 0x33;
   11a2a:	4b38      	ldr	r3, [pc, #224]	; (11b0c <main+0x13f4>)
   11a2c:	2233      	movs	r2, #51	; 0x33
   11a2e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)(RateSens[MODE_COLOR_CYCLE] * 100);
   11a30:	4b49      	ldr	r3, [pc, #292]	; (11b58 <main+0x1440>)
   11a32:	685a      	ldr	r2, [r3, #4]
   11a34:	4b49      	ldr	r3, [pc, #292]	; (11b5c <main+0x1444>)
   11a36:	494a      	ldr	r1, [pc, #296]	; (11b60 <main+0x1448>)
   11a38:	1c10      	adds	r0, r2, #0
   11a3a:	4798      	blx	r3
   11a3c:	1c03      	adds	r3, r0, #0
   11a3e:	1c1a      	adds	r2, r3, #0
   11a40:	4b48      	ldr	r3, [pc, #288]	; (11b64 <main+0x144c>)
   11a42:	1c10      	adds	r0, r2, #0
   11a44:	4798      	blx	r3
   11a46:	0003      	movs	r3, r0
   11a48:	b2da      	uxtb	r2, r3
   11a4a:	4b30      	ldr	r3, [pc, #192]	; (11b0c <main+0x13f4>)
   11a4c:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)(Brightness[MODE_COLOR_CYCLE] * 100);
   11a4e:	4b46      	ldr	r3, [pc, #280]	; (11b68 <main+0x1450>)
   11a50:	685a      	ldr	r2, [r3, #4]
   11a52:	4b42      	ldr	r3, [pc, #264]	; (11b5c <main+0x1444>)
   11a54:	4942      	ldr	r1, [pc, #264]	; (11b60 <main+0x1448>)
   11a56:	1c10      	adds	r0, r2, #0
   11a58:	4798      	blx	r3
   11a5a:	1c03      	adds	r3, r0, #0
   11a5c:	1c1a      	adds	r2, r3, #0
   11a5e:	4b41      	ldr	r3, [pc, #260]	; (11b64 <main+0x144c>)
   11a60:	1c10      	adds	r0, r2, #0
   11a62:	4798      	blx	r3
   11a64:	0003      	movs	r3, r0
   11a66:	b2da      	uxtb	r2, r3
   11a68:	4b28      	ldr	r3, [pc, #160]	; (11b0c <main+0x13f4>)
   11a6a:	72da      	strb	r2, [r3, #11]
			// Compass Cycle
			ble_write_buffer[12] = 0x34;
   11a6c:	4b27      	ldr	r3, [pc, #156]	; (11b0c <main+0x13f4>)
   11a6e:	2234      	movs	r2, #52	; 0x34
   11a70:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(Brightness[MODE_COMPASS_CYCLE] * 100);
   11a72:	4b3d      	ldr	r3, [pc, #244]	; (11b68 <main+0x1450>)
   11a74:	689a      	ldr	r2, [r3, #8]
   11a76:	4b39      	ldr	r3, [pc, #228]	; (11b5c <main+0x1444>)
   11a78:	4939      	ldr	r1, [pc, #228]	; (11b60 <main+0x1448>)
   11a7a:	1c10      	adds	r0, r2, #0
   11a7c:	4798      	blx	r3
   11a7e:	1c03      	adds	r3, r0, #0
   11a80:	1c1a      	adds	r2, r3, #0
   11a82:	4b38      	ldr	r3, [pc, #224]	; (11b64 <main+0x144c>)
   11a84:	1c10      	adds	r0, r2, #0
   11a86:	4798      	blx	r3
   11a88:	0003      	movs	r3, r0
   11a8a:	b2da      	uxtb	r2, r3
   11a8c:	4b1f      	ldr	r3, [pc, #124]	; (11b0c <main+0x13f4>)
   11a8e:	735a      	strb	r2, [r3, #13]
			// Throttle Based
			ble_write_buffer[14] = 0x35;
   11a90:	4b1e      	ldr	r3, [pc, #120]	; (11b0c <main+0x13f4>)
   11a92:	2235      	movs	r2, #53	; 0x35
   11a94:	739a      	strb	r2, [r3, #14]
			ble_write_buffer[15] = (uint8_t)(RateSens[MODE_THROTTLE] * 100);
   11a96:	4b30      	ldr	r3, [pc, #192]	; (11b58 <main+0x1440>)
   11a98:	68da      	ldr	r2, [r3, #12]
   11a9a:	4b30      	ldr	r3, [pc, #192]	; (11b5c <main+0x1444>)
   11a9c:	4930      	ldr	r1, [pc, #192]	; (11b60 <main+0x1448>)
   11a9e:	1c10      	adds	r0, r2, #0
   11aa0:	4798      	blx	r3
   11aa2:	1c03      	adds	r3, r0, #0
   11aa4:	1c1a      	adds	r2, r3, #0
   11aa6:	4b2f      	ldr	r3, [pc, #188]	; (11b64 <main+0x144c>)
   11aa8:	1c10      	adds	r0, r2, #0
   11aaa:	4798      	blx	r3
   11aac:	0003      	movs	r3, r0
   11aae:	b2da      	uxtb	r2, r3
   11ab0:	4b16      	ldr	r3, [pc, #88]	; (11b0c <main+0x13f4>)
   11ab2:	73da      	strb	r2, [r3, #15]
			ble_write_buffer[16] = (uint8_t)(Brightness[MODE_THROTTLE] * 100);
   11ab4:	4b2c      	ldr	r3, [pc, #176]	; (11b68 <main+0x1450>)
   11ab6:	68da      	ldr	r2, [r3, #12]
   11ab8:	4b28      	ldr	r3, [pc, #160]	; (11b5c <main+0x1444>)
   11aba:	4929      	ldr	r1, [pc, #164]	; (11b60 <main+0x1448>)
   11abc:	1c10      	adds	r0, r2, #0
   11abe:	4798      	blx	r3
   11ac0:	1c03      	adds	r3, r0, #0
   11ac2:	1c1a      	adds	r2, r3, #0
   11ac4:	4b27      	ldr	r3, [pc, #156]	; (11b64 <main+0x144c>)
   11ac6:	1c10      	adds	r0, r2, #0
   11ac8:	4798      	blx	r3
   11aca:	0003      	movs	r3, r0
   11acc:	b2da      	uxtb	r2, r3
   11ace:	4b0f      	ldr	r3, [pc, #60]	; (11b0c <main+0x13f4>)
   11ad0:	741a      	strb	r2, [r3, #16]
			// RPM Based
			ble_write_buffer[17] = 0x36;
   11ad2:	4b0e      	ldr	r3, [pc, #56]	; (11b0c <main+0x13f4>)
   11ad4:	2236      	movs	r2, #54	; 0x36
   11ad6:	745a      	strb	r2, [r3, #17]
			ble_write_buffer[18] = (uint8_t)(RateSens[MODE_RPM_CYCLE] * 100);
   11ad8:	4b1f      	ldr	r3, [pc, #124]	; (11b58 <main+0x1440>)
   11ada:	691a      	ldr	r2, [r3, #16]
   11adc:	4b1f      	ldr	r3, [pc, #124]	; (11b5c <main+0x1444>)
   11ade:	4920      	ldr	r1, [pc, #128]	; (11b60 <main+0x1448>)
   11ae0:	1c10      	adds	r0, r2, #0
   11ae2:	4798      	blx	r3
   11ae4:	1c03      	adds	r3, r0, #0
   11ae6:	1c1a      	adds	r2, r3, #0
   11ae8:	4b1e      	ldr	r3, [pc, #120]	; (11b64 <main+0x144c>)
   11aea:	1c10      	adds	r0, r2, #0
   11aec:	4798      	blx	r3
   11aee:	0003      	movs	r3, r0
   11af0:	b2da      	uxtb	r2, r3
   11af2:	4b06      	ldr	r3, [pc, #24]	; (11b0c <main+0x13f4>)
   11af4:	749a      	strb	r2, [r3, #18]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   11af6:	4905      	ldr	r1, [pc, #20]	; (11b0c <main+0x13f4>)
   11af8:	4b07      	ldr	r3, [pc, #28]	; (11b18 <main+0x1400>)
   11afa:	2213      	movs	r2, #19
   11afc:	0018      	movs	r0, r3
   11afe:	e035      	b.n	11b6c <main+0x1454>
   11b00:	00016115 	.word	0x00016115
   11b04:	40590000 	.word	0x40590000
   11b08:	00014469 	.word	0x00014469
   11b0c:	20000928 	.word	0x20000928
   11b10:	20000fb8 	.word	0x20000fb8
   11b14:	00016d9d 	.word	0x00016d9d
   11b18:	200004a0 	.word	0x200004a0
   11b1c:	000063bd 	.word	0x000063bd
   11b20:	200003af 	.word	0x200003af
   11b24:	200000b1 	.word	0x200000b1
   11b28:	200003ac 	.word	0x200003ac
   11b2c:	0000b015 	.word	0x0000b015
   11b30:	2000001b 	.word	0x2000001b
   11b34:	20000322 	.word	0x20000322
   11b38:	200000a2 	.word	0x200000a2
   11b3c:	20000323 	.word	0x20000323
   11b40:	20000324 	.word	0x20000324
   11b44:	2000001c 	.word	0x2000001c
   11b48:	00015201 	.word	0x00015201
   11b4c:	000158ad 	.word	0x000158ad
   11b50:	cccccccd 	.word	0xcccccccd
   11b54:	40847acc 	.word	0x40847acc
   11b58:	20000028 	.word	0x20000028
   11b5c:	00014ba9 	.word	0x00014ba9
   11b60:	42c80000 	.word	0x42c80000
   11b64:	00014439 	.word	0x00014439
   11b68:	2000004c 	.word	0x2000004c
   11b6c:	4bf1      	ldr	r3, [pc, #964]	; (11f34 <main+0x181c>)
   11b6e:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11b70:	46c0      	nop			; (mov r8, r8)
   11b72:	4bf1      	ldr	r3, [pc, #964]	; (11f38 <main+0x1820>)
   11b74:	4798      	blx	r3
   11b76:	0002      	movs	r2, r0
   11b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11b7a:	1ad3      	subs	r3, r2, r3
   11b7c:	221a      	movs	r2, #26
   11b7e:	18ba      	adds	r2, r7, r2
   11b80:	8812      	ldrh	r2, [r2, #0]
   11b82:	0052      	lsls	r2, r2, #1
   11b84:	4293      	cmp	r3, r2
   11b86:	d3f4      	bcc.n	11b72 <main+0x145a>
			BLE_TX_TIME = millis();
   11b88:	4beb      	ldr	r3, [pc, #940]	; (11f38 <main+0x1820>)
   11b8a:	4798      	blx	r3
   11b8c:	0003      	movs	r3, r0
   11b8e:	62bb      	str	r3, [r7, #40]	; 0x28

			// X Accel Based
			ble_write_buffer[0] = 0x37;
   11b90:	4bea      	ldr	r3, [pc, #936]	; (11f3c <main+0x1824>)
   11b92:	2237      	movs	r2, #55	; 0x37
   11b94:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RateSens[MODE_X_ACCEL] * 100);
   11b96:	4bea      	ldr	r3, [pc, #936]	; (11f40 <main+0x1828>)
   11b98:	699a      	ldr	r2, [r3, #24]
   11b9a:	4bea      	ldr	r3, [pc, #936]	; (11f44 <main+0x182c>)
   11b9c:	49ea      	ldr	r1, [pc, #936]	; (11f48 <main+0x1830>)
   11b9e:	1c10      	adds	r0, r2, #0
   11ba0:	4798      	blx	r3
   11ba2:	1c03      	adds	r3, r0, #0
   11ba4:	1c1a      	adds	r2, r3, #0
   11ba6:	4be9      	ldr	r3, [pc, #932]	; (11f4c <main+0x1834>)
   11ba8:	1c10      	adds	r0, r2, #0
   11baa:	4798      	blx	r3
   11bac:	0003      	movs	r3, r0
   11bae:	b2da      	uxtb	r2, r3
   11bb0:	4be2      	ldr	r3, [pc, #904]	; (11f3c <main+0x1824>)
   11bb2:	705a      	strb	r2, [r3, #1]
			// Y Accel Based
			ble_write_buffer[2] = 0x38;
   11bb4:	4be1      	ldr	r3, [pc, #900]	; (11f3c <main+0x1824>)
   11bb6:	2238      	movs	r2, #56	; 0x38
   11bb8:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Brightness[MODE_Y_ACCEL] * 100);
   11bba:	4be5      	ldr	r3, [pc, #916]	; (11f50 <main+0x1838>)
   11bbc:	69da      	ldr	r2, [r3, #28]
   11bbe:	4be1      	ldr	r3, [pc, #900]	; (11f44 <main+0x182c>)
   11bc0:	49e1      	ldr	r1, [pc, #900]	; (11f48 <main+0x1830>)
   11bc2:	1c10      	adds	r0, r2, #0
   11bc4:	4798      	blx	r3
   11bc6:	1c03      	adds	r3, r0, #0
   11bc8:	1c1a      	adds	r2, r3, #0
   11bca:	4be0      	ldr	r3, [pc, #896]	; (11f4c <main+0x1834>)
   11bcc:	1c10      	adds	r0, r2, #0
   11bce:	4798      	blx	r3
   11bd0:	0003      	movs	r3, r0
   11bd2:	b2da      	uxtb	r2, r3
   11bd4:	4bd9      	ldr	r3, [pc, #868]	; (11f3c <main+0x1824>)
   11bd6:	70da      	strb	r2, [r3, #3]
			// Custom
			uint8_t color_bright_base = (ColorBase[MODE_CUSTOM] << 4) | BrightBase[MODE_CUSTOM];
   11bd8:	4bde      	ldr	r3, [pc, #888]	; (11f54 <main+0x183c>)
   11bda:	7a1b      	ldrb	r3, [r3, #8]
   11bdc:	011b      	lsls	r3, r3, #4
   11bde:	b25a      	sxtb	r2, r3
   11be0:	4bdd      	ldr	r3, [pc, #884]	; (11f58 <main+0x1840>)
   11be2:	7a1b      	ldrb	r3, [r3, #8]
   11be4:	b25b      	sxtb	r3, r3
   11be6:	4313      	orrs	r3, r2
   11be8:	b25a      	sxtb	r2, r3
   11bea:	2318      	movs	r3, #24
   11bec:	18fb      	adds	r3, r7, r3
   11bee:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[4] = 0x39;
   11bf0:	4bd2      	ldr	r3, [pc, #840]	; (11f3c <main+0x1824>)
   11bf2:	2239      	movs	r2, #57	; 0x39
   11bf4:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = color_bright_base;
   11bf6:	4bd1      	ldr	r3, [pc, #836]	; (11f3c <main+0x1824>)
   11bf8:	2218      	movs	r2, #24
   11bfa:	18ba      	adds	r2, r7, r2
   11bfc:	7812      	ldrb	r2, [r2, #0]
   11bfe:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = RateBase[MODE_CUSTOM];
   11c00:	4bd6      	ldr	r3, [pc, #856]	; (11f5c <main+0x1844>)
   11c02:	7a1a      	ldrb	r2, [r3, #8]
   11c04:	4bcd      	ldr	r3, [pc, #820]	; (11f3c <main+0x1824>)
   11c06:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Custom_RGB.LR / 655.35);
   11c08:	4bd5      	ldr	r3, [pc, #852]	; (11f60 <main+0x1848>)
   11c0a:	881a      	ldrh	r2, [r3, #0]
   11c0c:	4bd5      	ldr	r3, [pc, #852]	; (11f64 <main+0x184c>)
   11c0e:	0010      	movs	r0, r2
   11c10:	4798      	blx	r3
   11c12:	1c02      	adds	r2, r0, #0
   11c14:	4bd4      	ldr	r3, [pc, #848]	; (11f68 <main+0x1850>)
   11c16:	1c10      	adds	r0, r2, #0
   11c18:	4798      	blx	r3
   11c1a:	4cd4      	ldr	r4, [pc, #848]	; (11f6c <main+0x1854>)
   11c1c:	4ad4      	ldr	r2, [pc, #848]	; (11f70 <main+0x1858>)
   11c1e:	4bd5      	ldr	r3, [pc, #852]	; (11f74 <main+0x185c>)
   11c20:	47a0      	blx	r4
   11c22:	0003      	movs	r3, r0
   11c24:	000c      	movs	r4, r1
   11c26:	0019      	movs	r1, r3
   11c28:	0022      	movs	r2, r4
   11c2a:	4bd3      	ldr	r3, [pc, #844]	; (11f78 <main+0x1860>)
   11c2c:	0008      	movs	r0, r1
   11c2e:	0011      	movs	r1, r2
   11c30:	4798      	blx	r3
   11c32:	0003      	movs	r3, r0
   11c34:	b2da      	uxtb	r2, r3
   11c36:	4bc1      	ldr	r3, [pc, #772]	; (11f3c <main+0x1824>)
   11c38:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Custom_RGB.LG / 655.35);
   11c3a:	4bc9      	ldr	r3, [pc, #804]	; (11f60 <main+0x1848>)
   11c3c:	885a      	ldrh	r2, [r3, #2]
   11c3e:	4bc9      	ldr	r3, [pc, #804]	; (11f64 <main+0x184c>)
   11c40:	0010      	movs	r0, r2
   11c42:	4798      	blx	r3
   11c44:	1c02      	adds	r2, r0, #0
   11c46:	4bc8      	ldr	r3, [pc, #800]	; (11f68 <main+0x1850>)
   11c48:	1c10      	adds	r0, r2, #0
   11c4a:	4798      	blx	r3
   11c4c:	4cc7      	ldr	r4, [pc, #796]	; (11f6c <main+0x1854>)
   11c4e:	4ac8      	ldr	r2, [pc, #800]	; (11f70 <main+0x1858>)
   11c50:	4bc8      	ldr	r3, [pc, #800]	; (11f74 <main+0x185c>)
   11c52:	47a0      	blx	r4
   11c54:	0003      	movs	r3, r0
   11c56:	000c      	movs	r4, r1
   11c58:	0019      	movs	r1, r3
   11c5a:	0022      	movs	r2, r4
   11c5c:	4bc6      	ldr	r3, [pc, #792]	; (11f78 <main+0x1860>)
   11c5e:	0008      	movs	r0, r1
   11c60:	0011      	movs	r1, r2
   11c62:	4798      	blx	r3
   11c64:	0003      	movs	r3, r0
   11c66:	b2da      	uxtb	r2, r3
   11c68:	4bb4      	ldr	r3, [pc, #720]	; (11f3c <main+0x1824>)
   11c6a:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)((float)Custom_RGB.LB / 655.35);
   11c6c:	4bbc      	ldr	r3, [pc, #752]	; (11f60 <main+0x1848>)
   11c6e:	889a      	ldrh	r2, [r3, #4]
   11c70:	4bbc      	ldr	r3, [pc, #752]	; (11f64 <main+0x184c>)
   11c72:	0010      	movs	r0, r2
   11c74:	4798      	blx	r3
   11c76:	1c02      	adds	r2, r0, #0
   11c78:	4bbb      	ldr	r3, [pc, #748]	; (11f68 <main+0x1850>)
   11c7a:	1c10      	adds	r0, r2, #0
   11c7c:	4798      	blx	r3
   11c7e:	4cbb      	ldr	r4, [pc, #748]	; (11f6c <main+0x1854>)
   11c80:	4abb      	ldr	r2, [pc, #748]	; (11f70 <main+0x1858>)
   11c82:	4bbc      	ldr	r3, [pc, #752]	; (11f74 <main+0x185c>)
   11c84:	47a0      	blx	r4
   11c86:	0003      	movs	r3, r0
   11c88:	000c      	movs	r4, r1
   11c8a:	0019      	movs	r1, r3
   11c8c:	0022      	movs	r2, r4
   11c8e:	4bba      	ldr	r3, [pc, #744]	; (11f78 <main+0x1860>)
   11c90:	0008      	movs	r0, r1
   11c92:	0011      	movs	r1, r2
   11c94:	4798      	blx	r3
   11c96:	0003      	movs	r3, r0
   11c98:	b2da      	uxtb	r2, r3
   11c9a:	4ba8      	ldr	r3, [pc, #672]	; (11f3c <main+0x1824>)
   11c9c:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)((float)Custom_RGB.RR / 655.35);
   11c9e:	4bb0      	ldr	r3, [pc, #704]	; (11f60 <main+0x1848>)
   11ca0:	88da      	ldrh	r2, [r3, #6]
   11ca2:	4bb0      	ldr	r3, [pc, #704]	; (11f64 <main+0x184c>)
   11ca4:	0010      	movs	r0, r2
   11ca6:	4798      	blx	r3
   11ca8:	1c02      	adds	r2, r0, #0
   11caa:	4baf      	ldr	r3, [pc, #700]	; (11f68 <main+0x1850>)
   11cac:	1c10      	adds	r0, r2, #0
   11cae:	4798      	blx	r3
   11cb0:	4cae      	ldr	r4, [pc, #696]	; (11f6c <main+0x1854>)
   11cb2:	4aaf      	ldr	r2, [pc, #700]	; (11f70 <main+0x1858>)
   11cb4:	4baf      	ldr	r3, [pc, #700]	; (11f74 <main+0x185c>)
   11cb6:	47a0      	blx	r4
   11cb8:	0003      	movs	r3, r0
   11cba:	000c      	movs	r4, r1
   11cbc:	0019      	movs	r1, r3
   11cbe:	0022      	movs	r2, r4
   11cc0:	4bad      	ldr	r3, [pc, #692]	; (11f78 <main+0x1860>)
   11cc2:	0008      	movs	r0, r1
   11cc4:	0011      	movs	r1, r2
   11cc6:	4798      	blx	r3
   11cc8:	0003      	movs	r3, r0
   11cca:	b2da      	uxtb	r2, r3
   11ccc:	4b9b      	ldr	r3, [pc, #620]	; (11f3c <main+0x1824>)
   11cce:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)((float)Custom_RGB.RG / 655.35);
   11cd0:	4ba3      	ldr	r3, [pc, #652]	; (11f60 <main+0x1848>)
   11cd2:	891a      	ldrh	r2, [r3, #8]
   11cd4:	4ba3      	ldr	r3, [pc, #652]	; (11f64 <main+0x184c>)
   11cd6:	0010      	movs	r0, r2
   11cd8:	4798      	blx	r3
   11cda:	1c02      	adds	r2, r0, #0
   11cdc:	4ba2      	ldr	r3, [pc, #648]	; (11f68 <main+0x1850>)
   11cde:	1c10      	adds	r0, r2, #0
   11ce0:	4798      	blx	r3
   11ce2:	4ca2      	ldr	r4, [pc, #648]	; (11f6c <main+0x1854>)
   11ce4:	4aa2      	ldr	r2, [pc, #648]	; (11f70 <main+0x1858>)
   11ce6:	4ba3      	ldr	r3, [pc, #652]	; (11f74 <main+0x185c>)
   11ce8:	47a0      	blx	r4
   11cea:	0003      	movs	r3, r0
   11cec:	000c      	movs	r4, r1
   11cee:	0019      	movs	r1, r3
   11cf0:	0022      	movs	r2, r4
   11cf2:	4ba1      	ldr	r3, [pc, #644]	; (11f78 <main+0x1860>)
   11cf4:	0008      	movs	r0, r1
   11cf6:	0011      	movs	r1, r2
   11cf8:	4798      	blx	r3
   11cfa:	0003      	movs	r3, r0
   11cfc:	b2da      	uxtb	r2, r3
   11cfe:	4b8f      	ldr	r3, [pc, #572]	; (11f3c <main+0x1824>)
   11d00:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)((float)Custom_RGB.RB / 655.35);
   11d02:	4b97      	ldr	r3, [pc, #604]	; (11f60 <main+0x1848>)
   11d04:	895a      	ldrh	r2, [r3, #10]
   11d06:	4b97      	ldr	r3, [pc, #604]	; (11f64 <main+0x184c>)
   11d08:	0010      	movs	r0, r2
   11d0a:	4798      	blx	r3
   11d0c:	1c02      	adds	r2, r0, #0
   11d0e:	4b96      	ldr	r3, [pc, #600]	; (11f68 <main+0x1850>)
   11d10:	1c10      	adds	r0, r2, #0
   11d12:	4798      	blx	r3
   11d14:	4c95      	ldr	r4, [pc, #596]	; (11f6c <main+0x1854>)
   11d16:	4a96      	ldr	r2, [pc, #600]	; (11f70 <main+0x1858>)
   11d18:	4b96      	ldr	r3, [pc, #600]	; (11f74 <main+0x185c>)
   11d1a:	47a0      	blx	r4
   11d1c:	0003      	movs	r3, r0
   11d1e:	000c      	movs	r4, r1
   11d20:	0019      	movs	r1, r3
   11d22:	0022      	movs	r2, r4
   11d24:	4b94      	ldr	r3, [pc, #592]	; (11f78 <main+0x1860>)
   11d26:	0008      	movs	r0, r1
   11d28:	0011      	movs	r1, r2
   11d2a:	4798      	blx	r3
   11d2c:	0003      	movs	r3, r0
   11d2e:	b2da      	uxtb	r2, r3
   11d30:	4b82      	ldr	r3, [pc, #520]	; (11f3c <main+0x1824>)
   11d32:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(RateSens[MODE_CUSTOM] * 100);
   11d34:	4b82      	ldr	r3, [pc, #520]	; (11f40 <main+0x1828>)
   11d36:	6a1a      	ldr	r2, [r3, #32]
   11d38:	4b82      	ldr	r3, [pc, #520]	; (11f44 <main+0x182c>)
   11d3a:	4983      	ldr	r1, [pc, #524]	; (11f48 <main+0x1830>)
   11d3c:	1c10      	adds	r0, r2, #0
   11d3e:	4798      	blx	r3
   11d40:	1c03      	adds	r3, r0, #0
   11d42:	1c1a      	adds	r2, r3, #0
   11d44:	4b81      	ldr	r3, [pc, #516]	; (11f4c <main+0x1834>)
   11d46:	1c10      	adds	r0, r2, #0
   11d48:	4798      	blx	r3
   11d4a:	0003      	movs	r3, r0
   11d4c:	b2da      	uxtb	r2, r3
   11d4e:	4b7b      	ldr	r3, [pc, #492]	; (11f3c <main+0x1824>)
   11d50:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_CUSTOM] * 100);
   11d52:	4b7f      	ldr	r3, [pc, #508]	; (11f50 <main+0x1838>)
   11d54:	6a1a      	ldr	r2, [r3, #32]
   11d56:	4b7b      	ldr	r3, [pc, #492]	; (11f44 <main+0x182c>)
   11d58:	497b      	ldr	r1, [pc, #492]	; (11f48 <main+0x1830>)
   11d5a:	1c10      	adds	r0, r2, #0
   11d5c:	4798      	blx	r3
   11d5e:	1c03      	adds	r3, r0, #0
   11d60:	1c1a      	adds	r2, r3, #0
   11d62:	4b7a      	ldr	r3, [pc, #488]	; (11f4c <main+0x1834>)
   11d64:	1c10      	adds	r0, r2, #0
   11d66:	4798      	blx	r3
   11d68:	0003      	movs	r3, r0
   11d6a:	b2da      	uxtb	r2, r3
   11d6c:	4b73      	ldr	r3, [pc, #460]	; (11f3c <main+0x1824>)
   11d6e:	739a      	strb	r2, [r3, #14]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 15);
   11d70:	4972      	ldr	r1, [pc, #456]	; (11f3c <main+0x1824>)
   11d72:	4b82      	ldr	r3, [pc, #520]	; (11f7c <main+0x1864>)
   11d74:	220f      	movs	r2, #15
   11d76:	0018      	movs	r0, r3
   11d78:	4b6e      	ldr	r3, [pc, #440]	; (11f34 <main+0x181c>)
   11d7a:	4798      	blx	r3

			SEND_LED_CHARS = 0;
   11d7c:	4b80      	ldr	r3, [pc, #512]	; (11f80 <main+0x1868>)
   11d7e:	2200      	movs	r2, #0
   11d80:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11d82:	4b80      	ldr	r3, [pc, #512]	; (11f84 <main+0x186c>)
   11d84:	2201      	movs	r2, #1
   11d86:	701a      	strb	r2, [r3, #0]
		}
		

		//////////////////////////   Handle Orientation Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ORIENTAION_CONFIG)
   11d88:	4b7f      	ldr	r3, [pc, #508]	; (11f88 <main+0x1870>)
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	2b00      	cmp	r3, #0
   11d8e:	d026      	beq.n	11dde <main+0x16c6>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11d90:	46c0      	nop			; (mov r8, r8)
   11d92:	4b69      	ldr	r3, [pc, #420]	; (11f38 <main+0x1820>)
   11d94:	4798      	blx	r3
   11d96:	0002      	movs	r2, r0
   11d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11d9a:	1ad3      	subs	r3, r2, r3
   11d9c:	221a      	movs	r2, #26
   11d9e:	18ba      	adds	r2, r7, r2
   11da0:	8812      	ldrh	r2, [r2, #0]
   11da2:	0052      	lsls	r2, r2, #1
   11da4:	4293      	cmp	r3, r2
   11da6:	d3f4      	bcc.n	11d92 <main+0x167a>
			BLE_TX_TIME = millis();
   11da8:	4b63      	ldr	r3, [pc, #396]	; (11f38 <main+0x1820>)
   11daa:	4798      	blx	r3
   11dac:	0003      	movs	r3, r0
   11dae:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x71;
   11db0:	4b62      	ldr	r3, [pc, #392]	; (11f3c <main+0x1824>)
   11db2:	2271      	movs	r2, #113	; 0x71
   11db4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ORIENTATION[0]; // Connectors Orientation
   11db6:	4b75      	ldr	r3, [pc, #468]	; (11f8c <main+0x1874>)
   11db8:	781a      	ldrb	r2, [r3, #0]
   11dba:	4b60      	ldr	r3, [pc, #384]	; (11f3c <main+0x1824>)
   11dbc:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ORIENTATION[1]; // Power Orientation
   11dbe:	4b73      	ldr	r3, [pc, #460]	; (11f8c <main+0x1874>)
   11dc0:	785a      	ldrb	r2, [r3, #1]
   11dc2:	4b5e      	ldr	r3, [pc, #376]	; (11f3c <main+0x1824>)
   11dc4:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   11dc6:	495d      	ldr	r1, [pc, #372]	; (11f3c <main+0x1824>)
   11dc8:	4b6c      	ldr	r3, [pc, #432]	; (11f7c <main+0x1864>)
   11dca:	2203      	movs	r2, #3
   11dcc:	0018      	movs	r0, r3
   11dce:	4b59      	ldr	r3, [pc, #356]	; (11f34 <main+0x181c>)
   11dd0:	4798      	blx	r3


			SEND_ORIENTAION_CONFIG = 0;
   11dd2:	4b6d      	ldr	r3, [pc, #436]	; (11f88 <main+0x1870>)
   11dd4:	2200      	movs	r2, #0
   11dd6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11dd8:	4b6a      	ldr	r3, [pc, #424]	; (11f84 <main+0x186c>)
   11dda:	2201      	movs	r2, #1
   11ddc:	701a      	strb	r2, [r3, #0]
		}


		///////////////////////////   Handle Controls Request   ///////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_CONTROLS_CONFIG)
   11dde:	4b6c      	ldr	r3, [pc, #432]	; (11f90 <main+0x1878>)
   11de0:	781b      	ldrb	r3, [r3, #0]
   11de2:	2b00      	cmp	r3, #0
   11de4:	d07c      	beq.n	11ee0 <main+0x17c8>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11de6:	46c0      	nop			; (mov r8, r8)
   11de8:	4b53      	ldr	r3, [pc, #332]	; (11f38 <main+0x1820>)
   11dea:	4798      	blx	r3
   11dec:	0002      	movs	r2, r0
   11dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11df0:	1ad3      	subs	r3, r2, r3
   11df2:	221a      	movs	r2, #26
   11df4:	18ba      	adds	r2, r7, r2
   11df6:	8812      	ldrh	r2, [r2, #0]
   11df8:	0052      	lsls	r2, r2, #1
   11dfa:	4293      	cmp	r3, r2
   11dfc:	d3f4      	bcc.n	11de8 <main+0x16d0>
			BLE_TX_TIME = millis();
   11dfe:	4b4e      	ldr	r3, [pc, #312]	; (11f38 <main+0x1820>)
   11e00:	4798      	blx	r3
   11e02:	0003      	movs	r3, r0
   11e04:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x81;
   11e06:	4b4d      	ldr	r3, [pc, #308]	; (11f3c <main+0x1824>)
   11e08:	2281      	movs	r2, #129	; 0x81
   11e0a:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((AUX_ENABLED << 7) | (TURN_ENABLED << 6) | auxControlType);
   11e0c:	4b61      	ldr	r3, [pc, #388]	; (11f94 <main+0x187c>)
   11e0e:	781b      	ldrb	r3, [r3, #0]
   11e10:	01db      	lsls	r3, r3, #7
   11e12:	b25a      	sxtb	r2, r3
   11e14:	4b60      	ldr	r3, [pc, #384]	; (11f98 <main+0x1880>)
   11e16:	781b      	ldrb	r3, [r3, #0]
   11e18:	019b      	lsls	r3, r3, #6
   11e1a:	b25b      	sxtb	r3, r3
   11e1c:	4313      	orrs	r3, r2
   11e1e:	b25a      	sxtb	r2, r3
   11e20:	4b5e      	ldr	r3, [pc, #376]	; (11f9c <main+0x1884>)
   11e22:	781b      	ldrb	r3, [r3, #0]
   11e24:	b25b      	sxtb	r3, r3
   11e26:	4313      	orrs	r3, r2
   11e28:	b25b      	sxtb	r3, r3
   11e2a:	b2da      	uxtb	r2, r3
   11e2c:	4b43      	ldr	r3, [pc, #268]	; (11f3c <main+0x1824>)
   11e2e:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)auxTimedDuration;
   11e30:	4b5b      	ldr	r3, [pc, #364]	; (11fa0 <main+0x1888>)
   11e32:	781a      	ldrb	r2, [r3, #0]
   11e34:	4b41      	ldr	r3, [pc, #260]	; (11f3c <main+0x1824>)
   11e36:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((single_aux_control << 4) | single_all_control);
   11e38:	4b5a      	ldr	r3, [pc, #360]	; (11fa4 <main+0x188c>)
   11e3a:	781b      	ldrb	r3, [r3, #0]
   11e3c:	011b      	lsls	r3, r3, #4
   11e3e:	b25a      	sxtb	r2, r3
   11e40:	4b59      	ldr	r3, [pc, #356]	; (11fa8 <main+0x1890>)
   11e42:	781b      	ldrb	r3, [r3, #0]
   11e44:	b25b      	sxtb	r3, r3
   11e46:	4313      	orrs	r3, r2
   11e48:	b25b      	sxtb	r3, r3
   11e4a:	b2da      	uxtb	r2, r3
   11e4c:	4b3b      	ldr	r3, [pc, #236]	; (11f3c <main+0x1824>)
   11e4e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((single_head_control << 4) | single_side_control);
   11e50:	4b56      	ldr	r3, [pc, #344]	; (11fac <main+0x1894>)
   11e52:	781b      	ldrb	r3, [r3, #0]
   11e54:	011b      	lsls	r3, r3, #4
   11e56:	b25a      	sxtb	r2, r3
   11e58:	4b55      	ldr	r3, [pc, #340]	; (11fb0 <main+0x1898>)
   11e5a:	781b      	ldrb	r3, [r3, #0]
   11e5c:	b25b      	sxtb	r3, r3
   11e5e:	4313      	orrs	r3, r2
   11e60:	b25b      	sxtb	r3, r3
   11e62:	b2da      	uxtb	r2, r3
   11e64:	4b35      	ldr	r3, [pc, #212]	; (11f3c <main+0x1824>)
   11e66:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((single_down_control << 4) | single_up_control);
   11e68:	4b52      	ldr	r3, [pc, #328]	; (11fb4 <main+0x189c>)
   11e6a:	781b      	ldrb	r3, [r3, #0]
   11e6c:	011b      	lsls	r3, r3, #4
   11e6e:	b25a      	sxtb	r2, r3
   11e70:	4b51      	ldr	r3, [pc, #324]	; (11fb8 <main+0x18a0>)
   11e72:	781b      	ldrb	r3, [r3, #0]
   11e74:	b25b      	sxtb	r3, r3
   11e76:	4313      	orrs	r3, r2
   11e78:	b25b      	sxtb	r3, r3
   11e7a:	b2da      	uxtb	r2, r3
   11e7c:	4b2f      	ldr	r3, [pc, #188]	; (11f3c <main+0x1824>)
   11e7e:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((dual_aux_control << 4) | dual_all_control);
   11e80:	4b4e      	ldr	r3, [pc, #312]	; (11fbc <main+0x18a4>)
   11e82:	781b      	ldrb	r3, [r3, #0]
   11e84:	011b      	lsls	r3, r3, #4
   11e86:	b25a      	sxtb	r2, r3
   11e88:	4b4d      	ldr	r3, [pc, #308]	; (11fc0 <main+0x18a8>)
   11e8a:	781b      	ldrb	r3, [r3, #0]
   11e8c:	b25b      	sxtb	r3, r3
   11e8e:	4313      	orrs	r3, r2
   11e90:	b25b      	sxtb	r3, r3
   11e92:	b2da      	uxtb	r2, r3
   11e94:	4b29      	ldr	r3, [pc, #164]	; (11f3c <main+0x1824>)
   11e96:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((dual_head_control << 4) | dual_side_control);
   11e98:	4b4a      	ldr	r3, [pc, #296]	; (11fc4 <main+0x18ac>)
   11e9a:	781b      	ldrb	r3, [r3, #0]
   11e9c:	011b      	lsls	r3, r3, #4
   11e9e:	b25a      	sxtb	r2, r3
   11ea0:	4b49      	ldr	r3, [pc, #292]	; (11fc8 <main+0x18b0>)
   11ea2:	781b      	ldrb	r3, [r3, #0]
   11ea4:	b25b      	sxtb	r3, r3
   11ea6:	4313      	orrs	r3, r2
   11ea8:	b25b      	sxtb	r3, r3
   11eaa:	b2da      	uxtb	r2, r3
   11eac:	4b23      	ldr	r3, [pc, #140]	; (11f3c <main+0x1824>)
   11eae:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((dual_down_control << 4) | dual_up_control);
   11eb0:	4b46      	ldr	r3, [pc, #280]	; (11fcc <main+0x18b4>)
   11eb2:	781b      	ldrb	r3, [r3, #0]
   11eb4:	011b      	lsls	r3, r3, #4
   11eb6:	b25a      	sxtb	r2, r3
   11eb8:	4b45      	ldr	r3, [pc, #276]	; (11fd0 <main+0x18b8>)
   11eba:	781b      	ldrb	r3, [r3, #0]
   11ebc:	b25b      	sxtb	r3, r3
   11ebe:	4313      	orrs	r3, r2
   11ec0:	b25b      	sxtb	r3, r3
   11ec2:	b2da      	uxtb	r2, r3
   11ec4:	4b1d      	ldr	r3, [pc, #116]	; (11f3c <main+0x1824>)
   11ec6:	721a      	strb	r2, [r3, #8]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 9);
   11ec8:	491c      	ldr	r1, [pc, #112]	; (11f3c <main+0x1824>)
   11eca:	4b2c      	ldr	r3, [pc, #176]	; (11f7c <main+0x1864>)
   11ecc:	2209      	movs	r2, #9
   11ece:	0018      	movs	r0, r3
   11ed0:	4b18      	ldr	r3, [pc, #96]	; (11f34 <main+0x181c>)
   11ed2:	4798      	blx	r3

			SEND_CONTROLS_CONFIG = 0;
   11ed4:	4b2e      	ldr	r3, [pc, #184]	; (11f90 <main+0x1878>)
   11ed6:	2200      	movs	r2, #0
   11ed8:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11eda:	4b2a      	ldr	r3, [pc, #168]	; (11f84 <main+0x186c>)
   11edc:	2201      	movs	r2, #1
   11ede:	701a      	strb	r2, [r3, #0]
		}


		/////////////////////////   Handle Remote Config Request   ////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_REMOTE_CONFIG)
   11ee0:	4b3c      	ldr	r3, [pc, #240]	; (11fd4 <main+0x18bc>)
   11ee2:	781b      	ldrb	r3, [r3, #0]
   11ee4:	2b00      	cmp	r3, #0
   11ee6:	d100      	bne.n	11eea <main+0x17d2>
   11ee8:	e087      	b.n	11ffa <main+0x18e2>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11eea:	46c0      	nop			; (mov r8, r8)
   11eec:	4b12      	ldr	r3, [pc, #72]	; (11f38 <main+0x1820>)
   11eee:	4798      	blx	r3
   11ef0:	0002      	movs	r2, r0
   11ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ef4:	1ad3      	subs	r3, r2, r3
   11ef6:	221a      	movs	r2, #26
   11ef8:	18ba      	adds	r2, r7, r2
   11efa:	8812      	ldrh	r2, [r2, #0]
   11efc:	0052      	lsls	r2, r2, #1
   11efe:	4293      	cmp	r3, r2
   11f00:	d3f4      	bcc.n	11eec <main+0x17d4>
			BLE_TX_TIME = millis();
   11f02:	4b0d      	ldr	r3, [pc, #52]	; (11f38 <main+0x1820>)
   11f04:	4798      	blx	r3
   11f06:	0003      	movs	r3, r0
   11f08:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x72;
   11f0a:	4b0c      	ldr	r3, [pc, #48]	; (11f3c <main+0x1824>)
   11f0c:	2272      	movs	r2, #114	; 0x72
   11f0e:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((remote_type << 4) | button_type);
   11f10:	4b31      	ldr	r3, [pc, #196]	; (11fd8 <main+0x18c0>)
   11f12:	781b      	ldrb	r3, [r3, #0]
   11f14:	011b      	lsls	r3, r3, #4
   11f16:	b25a      	sxtb	r2, r3
   11f18:	4b30      	ldr	r3, [pc, #192]	; (11fdc <main+0x18c4>)
   11f1a:	781b      	ldrb	r3, [r3, #0]
   11f1c:	b25b      	sxtb	r3, r3
   11f1e:	4313      	orrs	r3, r2
   11f20:	b25b      	sxtb	r3, r3
   11f22:	b2da      	uxtb	r2, r3
   11f24:	4b05      	ldr	r3, [pc, #20]	; (11f3c <main+0x1824>)
   11f26:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   11f28:	4b2d      	ldr	r3, [pc, #180]	; (11fe0 <main+0x18c8>)
   11f2a:	781a      	ldrb	r2, [r3, #0]
   11f2c:	4b03      	ldr	r3, [pc, #12]	; (11f3c <main+0x1824>)
   11f2e:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   11f30:	4902      	ldr	r1, [pc, #8]	; (11f3c <main+0x1824>)
   11f32:	e057      	b.n	11fe4 <main+0x18cc>
   11f34:	000063bd 	.word	0x000063bd
   11f38:	0000b015 	.word	0x0000b015
   11f3c:	20000928 	.word	0x20000928
   11f40:	20000028 	.word	0x20000028
   11f44:	00014ba9 	.word	0x00014ba9
   11f48:	42c80000 	.word	0x42c80000
   11f4c:	00014439 	.word	0x00014439
   11f50:	2000004c 	.word	0x2000004c
   11f54:	20000070 	.word	0x20000070
   11f58:	2000007c 	.word	0x2000007c
   11f5c:	20000088 	.word	0x20000088
   11f60:	20000094 	.word	0x20000094
   11f64:	00015201 	.word	0x00015201
   11f68:	00016d9d 	.word	0x00016d9d
   11f6c:	000158ad 	.word	0x000158ad
   11f70:	cccccccd 	.word	0xcccccccd
   11f74:	40847acc 	.word	0x40847acc
   11f78:	00014469 	.word	0x00014469
   11f7c:	200004a0 	.word	0x200004a0
   11f80:	200003ac 	.word	0x200003ac
   11f84:	200000b1 	.word	0x200000b1
   11f88:	200003b0 	.word	0x200003b0
   11f8c:	20000004 	.word	0x20000004
   11f90:	200003b1 	.word	0x200003b1
   11f94:	20000375 	.word	0x20000375
   11f98:	20000376 	.word	0x20000376
   11f9c:	20000378 	.word	0x20000378
   11fa0:	20000379 	.word	0x20000379
   11fa4:	2000037a 	.word	0x2000037a
   11fa8:	2000037b 	.word	0x2000037b
   11fac:	2000037c 	.word	0x2000037c
   11fb0:	2000037d 	.word	0x2000037d
   11fb4:	2000037f 	.word	0x2000037f
   11fb8:	2000037e 	.word	0x2000037e
   11fbc:	20000380 	.word	0x20000380
   11fc0:	20000381 	.word	0x20000381
   11fc4:	20000382 	.word	0x20000382
   11fc8:	20000383 	.word	0x20000383
   11fcc:	20000385 	.word	0x20000385
   11fd0:	20000384 	.word	0x20000384
   11fd4:	200003b2 	.word	0x200003b2
   11fd8:	20000308 	.word	0x20000308
   11fdc:	20000309 	.word	0x20000309
   11fe0:	20000018 	.word	0x20000018
   11fe4:	4bd5      	ldr	r3, [pc, #852]	; (1233c <main+0x1c24>)
   11fe6:	2203      	movs	r2, #3
   11fe8:	0018      	movs	r0, r3
   11fea:	4bd5      	ldr	r3, [pc, #852]	; (12340 <main+0x1c28>)
   11fec:	4798      	blx	r3

			SEND_REMOTE_CONFIG = 0;
   11fee:	4bd5      	ldr	r3, [pc, #852]	; (12344 <main+0x1c2c>)
   11ff0:	2200      	movs	r2, #0
   11ff2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11ff4:	4bd4      	ldr	r3, [pc, #848]	; (12348 <main+0x1c30>)
   11ff6:	2201      	movs	r2, #1
   11ff8:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle ESC Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ESC_CONFIG)
   11ffa:	4bd4      	ldr	r3, [pc, #848]	; (1234c <main+0x1c34>)
   11ffc:	781b      	ldrb	r3, [r3, #0]
   11ffe:	2b00      	cmp	r3, #0
   12000:	d02e      	beq.n	12060 <main+0x1948>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   12002:	46c0      	nop			; (mov r8, r8)
   12004:	4bd2      	ldr	r3, [pc, #840]	; (12350 <main+0x1c38>)
   12006:	4798      	blx	r3
   12008:	0002      	movs	r2, r0
   1200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1200c:	1ad3      	subs	r3, r2, r3
   1200e:	221a      	movs	r2, #26
   12010:	18ba      	adds	r2, r7, r2
   12012:	8812      	ldrh	r2, [r2, #0]
   12014:	0052      	lsls	r2, r2, #1
   12016:	4293      	cmp	r3, r2
   12018:	d3f4      	bcc.n	12004 <main+0x18ec>
			BLE_TX_TIME = millis();
   1201a:	4bcd      	ldr	r3, [pc, #820]	; (12350 <main+0x1c38>)
   1201c:	4798      	blx	r3
   1201e:	0003      	movs	r3, r0
   12020:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x73;
   12022:	4bcc      	ldr	r3, [pc, #816]	; (12354 <main+0x1c3c>)
   12024:	2273      	movs	r2, #115	; 0x73
   12026:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(esc_fw);
   12028:	4bcb      	ldr	r3, [pc, #812]	; (12358 <main+0x1c40>)
   1202a:	781a      	ldrb	r2, [r3, #0]
   1202c:	4bc9      	ldr	r3, [pc, #804]	; (12354 <main+0x1c3c>)
   1202e:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)((esc_comms << 4) | UART_baud);
   12030:	4bca      	ldr	r3, [pc, #808]	; (1235c <main+0x1c44>)
   12032:	781b      	ldrb	r3, [r3, #0]
   12034:	011b      	lsls	r3, r3, #4
   12036:	b25a      	sxtb	r2, r3
   12038:	4bc9      	ldr	r3, [pc, #804]	; (12360 <main+0x1c48>)
   1203a:	781b      	ldrb	r3, [r3, #0]
   1203c:	b25b      	sxtb	r3, r3
   1203e:	4313      	orrs	r3, r2
   12040:	b25b      	sxtb	r3, r3
   12042:	b2da      	uxtb	r2, r3
   12044:	4bc3      	ldr	r3, [pc, #780]	; (12354 <main+0x1c3c>)
   12046:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   12048:	49c2      	ldr	r1, [pc, #776]	; (12354 <main+0x1c3c>)
   1204a:	4bbc      	ldr	r3, [pc, #752]	; (1233c <main+0x1c24>)
   1204c:	2203      	movs	r2, #3
   1204e:	0018      	movs	r0, r3
   12050:	4bbb      	ldr	r3, [pc, #748]	; (12340 <main+0x1c28>)
   12052:	4798      	blx	r3

			SEND_ESC_CONFIG = 0;
   12054:	4bbd      	ldr	r3, [pc, #756]	; (1234c <main+0x1c34>)
   12056:	2200      	movs	r2, #0
   12058:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1205a:	4bbb      	ldr	r3, [pc, #748]	; (12348 <main+0x1c30>)
   1205c:	2201      	movs	r2, #1
   1205e:	701a      	strb	r2, [r3, #0]
		}
		

		////////////////////////////////   LED Controls   /////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleUserInput();
   12060:	4bc0      	ldr	r3, [pc, #768]	; (12364 <main+0x1c4c>)
   12062:	4798      	blx	r3


		//////////////////////////////////   LED MODES   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(sensorControl() && LIGHTS_ON){
   12064:	4bc0      	ldr	r3, [pc, #768]	; (12368 <main+0x1c50>)
   12066:	4798      	blx	r3
   12068:	1e03      	subs	r3, r0, #0
   1206a:	d101      	bne.n	12070 <main+0x1958>
   1206c:	f001 fbe2 	bl	13834 <main+0x311c>
   12070:	4bbe      	ldr	r3, [pc, #760]	; (1236c <main+0x1c54>)
   12072:	781b      	ldrb	r3, [r3, #0]
   12074:	2b00      	cmp	r3, #0
   12076:	d101      	bne.n	1207c <main+0x1964>
   12078:	f001 fbdc 	bl	13834 <main+0x311c>
			if(SIDELIGHTS && lightControlSide()){
   1207c:	4bbc      	ldr	r3, [pc, #752]	; (12370 <main+0x1c58>)
   1207e:	781b      	ldrb	r3, [r3, #0]
   12080:	2b00      	cmp	r3, #0
   12082:	d101      	bne.n	12088 <main+0x1970>
   12084:	f001 fb6d 	bl	13762 <main+0x304a>
   12088:	4bba      	ldr	r3, [pc, #744]	; (12374 <main+0x1c5c>)
   1208a:	4798      	blx	r3
   1208c:	1e03      	subs	r3, r0, #0
   1208e:	d101      	bne.n	12094 <main+0x197c>
   12090:	f001 fb67 	bl	13762 <main+0x304a>
			// brightness is a value from 0 to 1
			static float output_brightness = 0;

			// Variable for controlling the rate or sensitivity in applicable modes
			// brightness is a value from 0 to 1
			float output_rate_sens = 0;
   12094:	2300      	movs	r3, #0
   12096:	623b      	str	r3, [r7, #32]

			switch(RateBase[light_mode]){ // Set the value to be used for rate or sensitivity in the side LED algorithm
   12098:	4bb7      	ldr	r3, [pc, #732]	; (12378 <main+0x1c60>)
   1209a:	781b      	ldrb	r3, [r3, #0]
   1209c:	001a      	movs	r2, r3
   1209e:	4bb7      	ldr	r3, [pc, #732]	; (1237c <main+0x1c64>)
   120a0:	5c9b      	ldrb	r3, [r3, r2]
   120a2:	2b07      	cmp	r3, #7
   120a4:	d900      	bls.n	120a8 <main+0x1990>
   120a6:	e0c0      	b.n	1222a <main+0x1b12>
   120a8:	009a      	lsls	r2, r3, #2
   120aa:	4bb5      	ldr	r3, [pc, #724]	; (12380 <main+0x1c68>)
   120ac:	18d3      	adds	r3, r2, r3
   120ae:	681b      	ldr	r3, [r3, #0]
   120b0:	469f      	mov	pc, r3
				case RATE_STATIC:
				{
					output_rate_sens = RateSens[light_mode];
   120b2:	4bb1      	ldr	r3, [pc, #708]	; (12378 <main+0x1c60>)
   120b4:	781b      	ldrb	r3, [r3, #0]
   120b6:	001a      	movs	r2, r3
   120b8:	4bb2      	ldr	r3, [pc, #712]	; (12384 <main+0x1c6c>)
   120ba:	0092      	lsls	r2, r2, #2
   120bc:	58d3      	ldr	r3, [r2, r3]
   120be:	623b      	str	r3, [r7, #32]
					break;
   120c0:	e0b3      	b.n	1222a <main+0x1b12>
				}
				case RATE_YAW_RATE:
				{
					if(gzKalman < 0)
   120c2:	4bb1      	ldr	r3, [pc, #708]	; (12388 <main+0x1c70>)
   120c4:	681a      	ldr	r2, [r3, #0]
   120c6:	4bb1      	ldr	r3, [pc, #708]	; (1238c <main+0x1c74>)
   120c8:	2100      	movs	r1, #0
   120ca:	1c10      	adds	r0, r2, #0
   120cc:	4798      	blx	r3
   120ce:	1e03      	subs	r3, r0, #0
   120d0:	d009      	beq.n	120e6 <main+0x19ce>
						output_rate_sens = gzKalman/kalmanGZ_min;
   120d2:	4bad      	ldr	r3, [pc, #692]	; (12388 <main+0x1c70>)
   120d4:	681a      	ldr	r2, [r3, #0]
   120d6:	4bae      	ldr	r3, [pc, #696]	; (12390 <main+0x1c78>)
   120d8:	6819      	ldr	r1, [r3, #0]
   120da:	4bae      	ldr	r3, [pc, #696]	; (12394 <main+0x1c7c>)
   120dc:	1c10      	adds	r0, r2, #0
   120de:	4798      	blx	r3
   120e0:	1c03      	adds	r3, r0, #0
   120e2:	623b      	str	r3, [r7, #32]
					else
						output_rate_sens = gzKalman/kalmanGZ_max;
					break;
   120e4:	e0a1      	b.n	1222a <main+0x1b12>
						output_rate_sens = gzKalman/kalmanGZ_max;
   120e6:	4ba8      	ldr	r3, [pc, #672]	; (12388 <main+0x1c70>)
   120e8:	681a      	ldr	r2, [r3, #0]
   120ea:	4bab      	ldr	r3, [pc, #684]	; (12398 <main+0x1c80>)
   120ec:	6819      	ldr	r1, [r3, #0]
   120ee:	4ba9      	ldr	r3, [pc, #676]	; (12394 <main+0x1c7c>)
   120f0:	1c10      	adds	r0, r2, #0
   120f2:	4798      	blx	r3
   120f4:	1c03      	adds	r3, r0, #0
   120f6:	623b      	str	r3, [r7, #32]
					break;
   120f8:	e097      	b.n	1222a <main+0x1b12>
				}
				case RATE_ROLL_RATE:
				{
					if(gyKalman < 0)
   120fa:	4ba8      	ldr	r3, [pc, #672]	; (1239c <main+0x1c84>)
   120fc:	681a      	ldr	r2, [r3, #0]
   120fe:	4ba3      	ldr	r3, [pc, #652]	; (1238c <main+0x1c74>)
   12100:	2100      	movs	r1, #0
   12102:	1c10      	adds	r0, r2, #0
   12104:	4798      	blx	r3
   12106:	1e03      	subs	r3, r0, #0
   12108:	d009      	beq.n	1211e <main+0x1a06>
						output_rate_sens = gyKalman/kalmanGY_min;
   1210a:	4ba4      	ldr	r3, [pc, #656]	; (1239c <main+0x1c84>)
   1210c:	681a      	ldr	r2, [r3, #0]
   1210e:	4ba4      	ldr	r3, [pc, #656]	; (123a0 <main+0x1c88>)
   12110:	6819      	ldr	r1, [r3, #0]
   12112:	4ba0      	ldr	r3, [pc, #640]	; (12394 <main+0x1c7c>)
   12114:	1c10      	adds	r0, r2, #0
   12116:	4798      	blx	r3
   12118:	1c03      	adds	r3, r0, #0
   1211a:	623b      	str	r3, [r7, #32]
					else
						output_rate_sens = gyKalman/kalmanGY_max;
					break;
   1211c:	e085      	b.n	1222a <main+0x1b12>
						output_rate_sens = gyKalman/kalmanGY_max;
   1211e:	4b9f      	ldr	r3, [pc, #636]	; (1239c <main+0x1c84>)
   12120:	681a      	ldr	r2, [r3, #0]
   12122:	4ba0      	ldr	r3, [pc, #640]	; (123a4 <main+0x1c8c>)
   12124:	6819      	ldr	r1, [r3, #0]
   12126:	4b9b      	ldr	r3, [pc, #620]	; (12394 <main+0x1c7c>)
   12128:	1c10      	adds	r0, r2, #0
   1212a:	4798      	blx	r3
   1212c:	1c03      	adds	r3, r0, #0
   1212e:	623b      	str	r3, [r7, #32]
					break;
   12130:	e07b      	b.n	1222a <main+0x1b12>
				}
				case RATE_RPM:
				{
					output_rate_sens = (((float)latest_vesc_vals.rpm)/mcconf_limits.max_erpm);
   12132:	4b9d      	ldr	r3, [pc, #628]	; (123a8 <main+0x1c90>)
   12134:	691a      	ldr	r2, [r3, #16]
   12136:	4b9d      	ldr	r3, [pc, #628]	; (123ac <main+0x1c94>)
   12138:	0010      	movs	r0, r2
   1213a:	4798      	blx	r3
   1213c:	1c04      	adds	r4, r0, #0
   1213e:	4b9c      	ldr	r3, [pc, #624]	; (123b0 <main+0x1c98>)
   12140:	699a      	ldr	r2, [r3, #24]
   12142:	4b9a      	ldr	r3, [pc, #616]	; (123ac <main+0x1c94>)
   12144:	0010      	movs	r0, r2
   12146:	4798      	blx	r3
   12148:	1c02      	adds	r2, r0, #0
   1214a:	4b92      	ldr	r3, [pc, #584]	; (12394 <main+0x1c7c>)
   1214c:	1c11      	adds	r1, r2, #0
   1214e:	1c20      	adds	r0, r4, #0
   12150:	4798      	blx	r3
   12152:	1c03      	adds	r3, r0, #0
   12154:	623b      	str	r3, [r7, #32]
					break;
   12156:	e068      	b.n	1222a <main+0x1b12>
				}
				case RATE_THROTTLE:
				{
					output_rate_sens = remote_y/255.0;
   12158:	4b96      	ldr	r3, [pc, #600]	; (123b4 <main+0x1c9c>)
   1215a:	781b      	ldrb	r3, [r3, #0]
   1215c:	001a      	movs	r2, r3
   1215e:	4b96      	ldr	r3, [pc, #600]	; (123b8 <main+0x1ca0>)
   12160:	0010      	movs	r0, r2
   12162:	4798      	blx	r3
   12164:	4c95      	ldr	r4, [pc, #596]	; (123bc <main+0x1ca4>)
   12166:	2200      	movs	r2, #0
   12168:	4b95      	ldr	r3, [pc, #596]	; (123c0 <main+0x1ca8>)
   1216a:	47a0      	blx	r4
   1216c:	0003      	movs	r3, r0
   1216e:	000c      	movs	r4, r1
   12170:	0019      	movs	r1, r3
   12172:	0022      	movs	r2, r4
   12174:	4b93      	ldr	r3, [pc, #588]	; (123c4 <main+0x1cac>)
   12176:	0008      	movs	r0, r1
   12178:	0011      	movs	r1, r2
   1217a:	4798      	blx	r3
   1217c:	1c03      	adds	r3, r0, #0
   1217e:	623b      	str	r3, [r7, #32]
				}
				break;
   12180:	e053      	b.n	1222a <main+0x1b12>
				case RATE_X_ACCEL:
				{
					if(axKalman < 0)
   12182:	4b91      	ldr	r3, [pc, #580]	; (123c8 <main+0x1cb0>)
   12184:	681a      	ldr	r2, [r3, #0]
   12186:	4b81      	ldr	r3, [pc, #516]	; (1238c <main+0x1c74>)
   12188:	2100      	movs	r1, #0
   1218a:	1c10      	adds	r0, r2, #0
   1218c:	4798      	blx	r3
   1218e:	1e03      	subs	r3, r0, #0
   12190:	d009      	beq.n	121a6 <main+0x1a8e>
						output_rate_sens = axKalman/kalmanAX_min;
   12192:	4b8d      	ldr	r3, [pc, #564]	; (123c8 <main+0x1cb0>)
   12194:	681a      	ldr	r2, [r3, #0]
   12196:	4b8d      	ldr	r3, [pc, #564]	; (123cc <main+0x1cb4>)
   12198:	6819      	ldr	r1, [r3, #0]
   1219a:	4b7e      	ldr	r3, [pc, #504]	; (12394 <main+0x1c7c>)
   1219c:	1c10      	adds	r0, r2, #0
   1219e:	4798      	blx	r3
   121a0:	1c03      	adds	r3, r0, #0
   121a2:	623b      	str	r3, [r7, #32]
					else
						output_rate_sens = axKalman/kalmanAX_max;
					break;
   121a4:	e041      	b.n	1222a <main+0x1b12>
						output_rate_sens = axKalman/kalmanAX_max;
   121a6:	4b88      	ldr	r3, [pc, #544]	; (123c8 <main+0x1cb0>)
   121a8:	681a      	ldr	r2, [r3, #0]
   121aa:	4b89      	ldr	r3, [pc, #548]	; (123d0 <main+0x1cb8>)
   121ac:	6819      	ldr	r1, [r3, #0]
   121ae:	4b79      	ldr	r3, [pc, #484]	; (12394 <main+0x1c7c>)
   121b0:	1c10      	adds	r0, r2, #0
   121b2:	4798      	blx	r3
   121b4:	1c03      	adds	r3, r0, #0
   121b6:	623b      	str	r3, [r7, #32]
					break;
   121b8:	e037      	b.n	1222a <main+0x1b12>
				}
				case RATE_Y_ACCEL:
				{
					if(ayKalman < 0)
   121ba:	4b86      	ldr	r3, [pc, #536]	; (123d4 <main+0x1cbc>)
   121bc:	681a      	ldr	r2, [r3, #0]
   121be:	4b73      	ldr	r3, [pc, #460]	; (1238c <main+0x1c74>)
   121c0:	2100      	movs	r1, #0
   121c2:	1c10      	adds	r0, r2, #0
   121c4:	4798      	blx	r3
   121c6:	1e03      	subs	r3, r0, #0
   121c8:	d009      	beq.n	121de <main+0x1ac6>
						output_rate_sens = ayKalman/kalmanAY_min;
   121ca:	4b82      	ldr	r3, [pc, #520]	; (123d4 <main+0x1cbc>)
   121cc:	681a      	ldr	r2, [r3, #0]
   121ce:	4b82      	ldr	r3, [pc, #520]	; (123d8 <main+0x1cc0>)
   121d0:	6819      	ldr	r1, [r3, #0]
   121d2:	4b70      	ldr	r3, [pc, #448]	; (12394 <main+0x1c7c>)
   121d4:	1c10      	adds	r0, r2, #0
   121d6:	4798      	blx	r3
   121d8:	1c03      	adds	r3, r0, #0
   121da:	623b      	str	r3, [r7, #32]
					else
						output_rate_sens = ayKalman/kalmanAY_max;
					break;
   121dc:	e025      	b.n	1222a <main+0x1b12>
						output_rate_sens = ayKalman/kalmanAY_max;
   121de:	4b7d      	ldr	r3, [pc, #500]	; (123d4 <main+0x1cbc>)
   121e0:	681a      	ldr	r2, [r3, #0]
   121e2:	4b7e      	ldr	r3, [pc, #504]	; (123dc <main+0x1cc4>)
   121e4:	6819      	ldr	r1, [r3, #0]
   121e6:	4b6b      	ldr	r3, [pc, #428]	; (12394 <main+0x1c7c>)
   121e8:	1c10      	adds	r0, r2, #0
   121ea:	4798      	blx	r3
   121ec:	1c03      	adds	r3, r0, #0
   121ee:	623b      	str	r3, [r7, #32]
					break;
   121f0:	e01b      	b.n	1222a <main+0x1b12>
				}
				case RATE_Z_ACCEL:
				{
					if(azKalman < 0)
   121f2:	4b7b      	ldr	r3, [pc, #492]	; (123e0 <main+0x1cc8>)
   121f4:	681a      	ldr	r2, [r3, #0]
   121f6:	4b65      	ldr	r3, [pc, #404]	; (1238c <main+0x1c74>)
   121f8:	2100      	movs	r1, #0
   121fa:	1c10      	adds	r0, r2, #0
   121fc:	4798      	blx	r3
   121fe:	1e03      	subs	r3, r0, #0
   12200:	d009      	beq.n	12216 <main+0x1afe>
						output_rate_sens = azKalman/kalmanAZ_min;
   12202:	4b77      	ldr	r3, [pc, #476]	; (123e0 <main+0x1cc8>)
   12204:	681a      	ldr	r2, [r3, #0]
   12206:	4b77      	ldr	r3, [pc, #476]	; (123e4 <main+0x1ccc>)
   12208:	6819      	ldr	r1, [r3, #0]
   1220a:	4b62      	ldr	r3, [pc, #392]	; (12394 <main+0x1c7c>)
   1220c:	1c10      	adds	r0, r2, #0
   1220e:	4798      	blx	r3
   12210:	1c03      	adds	r3, r0, #0
   12212:	623b      	str	r3, [r7, #32]
					else
						output_rate_sens = azKalman/kalmanAZ_max;
					break;
   12214:	e008      	b.n	12228 <main+0x1b10>
						output_rate_sens = azKalman/kalmanAZ_max;
   12216:	4b72      	ldr	r3, [pc, #456]	; (123e0 <main+0x1cc8>)
   12218:	681a      	ldr	r2, [r3, #0]
   1221a:	4b73      	ldr	r3, [pc, #460]	; (123e8 <main+0x1cd0>)
   1221c:	6819      	ldr	r1, [r3, #0]
   1221e:	4b5d      	ldr	r3, [pc, #372]	; (12394 <main+0x1c7c>)
   12220:	1c10      	adds	r0, r2, #0
   12222:	4798      	blx	r3
   12224:	1c03      	adds	r3, r0, #0
   12226:	623b      	str	r3, [r7, #32]
					break;
   12228:	46c0      	nop			; (mov r8, r8)
				}
			}
	
			if(output_rate_sens < 0)
   1222a:	4b58      	ldr	r3, [pc, #352]	; (1238c <main+0x1c74>)
   1222c:	2100      	movs	r1, #0
   1222e:	6a38      	ldr	r0, [r7, #32]
   12230:	4798      	blx	r3
   12232:	1e03      	subs	r3, r0, #0
   12234:	d002      	beq.n	1223c <main+0x1b24>
				output_rate_sens = 0;
   12236:	2300      	movs	r3, #0
   12238:	623b      	str	r3, [r7, #32]
   1223a:	e009      	b.n	12250 <main+0x1b38>
			else if(output_rate_sens > 1)
   1223c:	4b6b      	ldr	r3, [pc, #428]	; (123ec <main+0x1cd4>)
   1223e:	21fe      	movs	r1, #254	; 0xfe
   12240:	0589      	lsls	r1, r1, #22
   12242:	6a38      	ldr	r0, [r7, #32]
   12244:	4798      	blx	r3
   12246:	1e03      	subs	r3, r0, #0
   12248:	d002      	beq.n	12250 <main+0x1b38>
				output_rate_sens = 1;
   1224a:	23fe      	movs	r3, #254	; 0xfe
   1224c:	059b      	lsls	r3, r3, #22
   1224e:	623b      	str	r3, [r7, #32]

			switch(BrightBase[light_mode]){ // Set the Brightness of the side LEDs
   12250:	4b49      	ldr	r3, [pc, #292]	; (12378 <main+0x1c60>)
   12252:	781b      	ldrb	r3, [r3, #0]
   12254:	001a      	movs	r2, r3
   12256:	4b66      	ldr	r3, [pc, #408]	; (123f0 <main+0x1cd8>)
   12258:	5c9b      	ldrb	r3, [r3, r2]
   1225a:	2b08      	cmp	r3, #8
   1225c:	d900      	bls.n	12260 <main+0x1b48>
   1225e:	e188      	b.n	12572 <main+0x1e5a>
   12260:	009a      	lsls	r2, r3, #2
   12262:	4b64      	ldr	r3, [pc, #400]	; (123f4 <main+0x1cdc>)
   12264:	18d3      	adds	r3, r2, r3
   12266:	681b      	ldr	r3, [r3, #0]
   12268:	469f      	mov	pc, r3
				case BRIGHT_STATIC:
				{
					output_brightness = Brightness[light_mode];
   1226a:	4b43      	ldr	r3, [pc, #268]	; (12378 <main+0x1c60>)
   1226c:	781b      	ldrb	r3, [r3, #0]
   1226e:	001a      	movs	r2, r3
   12270:	4b61      	ldr	r3, [pc, #388]	; (123f8 <main+0x1ce0>)
   12272:	0092      	lsls	r2, r2, #2
   12274:	58d2      	ldr	r2, [r2, r3]
   12276:	4b61      	ldr	r3, [pc, #388]	; (123fc <main+0x1ce4>)
   12278:	601a      	str	r2, [r3, #0]
					break;
   1227a:	e17a      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_YAW_RATE:
				{
					if(gzKalman < 0)
   1227c:	4b42      	ldr	r3, [pc, #264]	; (12388 <main+0x1c70>)
   1227e:	681a      	ldr	r2, [r3, #0]
   12280:	4b42      	ldr	r3, [pc, #264]	; (1238c <main+0x1c74>)
   12282:	2100      	movs	r1, #0
   12284:	1c10      	adds	r0, r2, #0
   12286:	4798      	blx	r3
   12288:	1e03      	subs	r3, r0, #0
   1228a:	d00b      	beq.n	122a4 <main+0x1b8c>
						output_brightness = gzKalman/kalmanGZ_min;
   1228c:	4b3e      	ldr	r3, [pc, #248]	; (12388 <main+0x1c70>)
   1228e:	681a      	ldr	r2, [r3, #0]
   12290:	4b3f      	ldr	r3, [pc, #252]	; (12390 <main+0x1c78>)
   12292:	6819      	ldr	r1, [r3, #0]
   12294:	4b3f      	ldr	r3, [pc, #252]	; (12394 <main+0x1c7c>)
   12296:	1c10      	adds	r0, r2, #0
   12298:	4798      	blx	r3
   1229a:	1c03      	adds	r3, r0, #0
   1229c:	1c1a      	adds	r2, r3, #0
   1229e:	4b57      	ldr	r3, [pc, #348]	; (123fc <main+0x1ce4>)
   122a0:	601a      	str	r2, [r3, #0]
					else
						output_brightness = gzKalman/kalmanGZ_max;
					break;
   122a2:	e166      	b.n	12572 <main+0x1e5a>
						output_brightness = gzKalman/kalmanGZ_max;
   122a4:	4b38      	ldr	r3, [pc, #224]	; (12388 <main+0x1c70>)
   122a6:	681a      	ldr	r2, [r3, #0]
   122a8:	4b3b      	ldr	r3, [pc, #236]	; (12398 <main+0x1c80>)
   122aa:	6819      	ldr	r1, [r3, #0]
   122ac:	4b39      	ldr	r3, [pc, #228]	; (12394 <main+0x1c7c>)
   122ae:	1c10      	adds	r0, r2, #0
   122b0:	4798      	blx	r3
   122b2:	1c03      	adds	r3, r0, #0
   122b4:	1c1a      	adds	r2, r3, #0
   122b6:	4b51      	ldr	r3, [pc, #324]	; (123fc <main+0x1ce4>)
   122b8:	601a      	str	r2, [r3, #0]
					break;
   122ba:	e15a      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_ROLL_RATE:
				{
					if(gyKalman < 0)
   122bc:	4b37      	ldr	r3, [pc, #220]	; (1239c <main+0x1c84>)
   122be:	681a      	ldr	r2, [r3, #0]
   122c0:	4b32      	ldr	r3, [pc, #200]	; (1238c <main+0x1c74>)
   122c2:	2100      	movs	r1, #0
   122c4:	1c10      	adds	r0, r2, #0
   122c6:	4798      	blx	r3
   122c8:	1e03      	subs	r3, r0, #0
   122ca:	d00b      	beq.n	122e4 <main+0x1bcc>
						output_brightness = gyKalman/kalmanGY_min;
   122cc:	4b33      	ldr	r3, [pc, #204]	; (1239c <main+0x1c84>)
   122ce:	681a      	ldr	r2, [r3, #0]
   122d0:	4b33      	ldr	r3, [pc, #204]	; (123a0 <main+0x1c88>)
   122d2:	6819      	ldr	r1, [r3, #0]
   122d4:	4b2f      	ldr	r3, [pc, #188]	; (12394 <main+0x1c7c>)
   122d6:	1c10      	adds	r0, r2, #0
   122d8:	4798      	blx	r3
   122da:	1c03      	adds	r3, r0, #0
   122dc:	1c1a      	adds	r2, r3, #0
   122de:	4b47      	ldr	r3, [pc, #284]	; (123fc <main+0x1ce4>)
   122e0:	601a      	str	r2, [r3, #0]
					else
						output_brightness = gyKalman/kalmanGY_max;
					break;
   122e2:	e146      	b.n	12572 <main+0x1e5a>
						output_brightness = gyKalman/kalmanGY_max;
   122e4:	4b2d      	ldr	r3, [pc, #180]	; (1239c <main+0x1c84>)
   122e6:	681a      	ldr	r2, [r3, #0]
   122e8:	4b2e      	ldr	r3, [pc, #184]	; (123a4 <main+0x1c8c>)
   122ea:	6819      	ldr	r1, [r3, #0]
   122ec:	4b29      	ldr	r3, [pc, #164]	; (12394 <main+0x1c7c>)
   122ee:	1c10      	adds	r0, r2, #0
   122f0:	4798      	blx	r3
   122f2:	1c03      	adds	r3, r0, #0
   122f4:	1c1a      	adds	r2, r3, #0
   122f6:	4b41      	ldr	r3, [pc, #260]	; (123fc <main+0x1ce4>)
   122f8:	601a      	str	r2, [r3, #0]
					break;
   122fa:	e13a      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_RPM:
				{
					if(latest_vesc_vals.rpm != 0)
   122fc:	4b2a      	ldr	r3, [pc, #168]	; (123a8 <main+0x1c90>)
   122fe:	691b      	ldr	r3, [r3, #16]
   12300:	2b00      	cmp	r3, #0
   12302:	d017      	beq.n	12334 <main+0x1c1c>
						output_brightness = ((float)abs(latest_vesc_vals.rpm))/(float)mcconf_limits.max_erpm;
   12304:	4b28      	ldr	r3, [pc, #160]	; (123a8 <main+0x1c90>)
   12306:	691b      	ldr	r3, [r3, #16]
   12308:	17d9      	asrs	r1, r3, #31
   1230a:	185a      	adds	r2, r3, r1
   1230c:	404a      	eors	r2, r1
   1230e:	4b27      	ldr	r3, [pc, #156]	; (123ac <main+0x1c94>)
   12310:	0010      	movs	r0, r2
   12312:	4798      	blx	r3
   12314:	1c04      	adds	r4, r0, #0
   12316:	4b26      	ldr	r3, [pc, #152]	; (123b0 <main+0x1c98>)
   12318:	699a      	ldr	r2, [r3, #24]
   1231a:	4b24      	ldr	r3, [pc, #144]	; (123ac <main+0x1c94>)
   1231c:	0010      	movs	r0, r2
   1231e:	4798      	blx	r3
   12320:	1c02      	adds	r2, r0, #0
   12322:	4b1c      	ldr	r3, [pc, #112]	; (12394 <main+0x1c7c>)
   12324:	1c11      	adds	r1, r2, #0
   12326:	1c20      	adds	r0, r4, #0
   12328:	4798      	blx	r3
   1232a:	1c03      	adds	r3, r0, #0
   1232c:	1c1a      	adds	r2, r3, #0
   1232e:	4b33      	ldr	r3, [pc, #204]	; (123fc <main+0x1ce4>)
   12330:	601a      	str	r2, [r3, #0]
					else
						output_brightness = 0;
					break;
   12332:	e11e      	b.n	12572 <main+0x1e5a>
						output_brightness = 0;
   12334:	4b31      	ldr	r3, [pc, #196]	; (123fc <main+0x1ce4>)
   12336:	2200      	movs	r2, #0
   12338:	601a      	str	r2, [r3, #0]
					break;
   1233a:	e11a      	b.n	12572 <main+0x1e5a>
   1233c:	200004a0 	.word	0x200004a0
   12340:	000063bd 	.word	0x000063bd
   12344:	200003b2 	.word	0x200003b2
   12348:	200000b1 	.word	0x200000b1
   1234c:	200003b3 	.word	0x200003b3
   12350:	0000b015 	.word	0x0000b015
   12354:	20000928 	.word	0x20000928
   12358:	2000001a 	.word	0x2000001a
   1235c:	20000310 	.word	0x20000310
   12360:	20000311 	.word	0x20000311
   12364:	0000d889 	.word	0x0000d889
   12368:	00013a45 	.word	0x00013a45
   1236c:	200000a3 	.word	0x200000a3
   12370:	200000a2 	.word	0x200000a2
   12374:	00013c0d 	.word	0x00013c0d
   12378:	2000001b 	.word	0x2000001b
   1237c:	20000088 	.word	0x20000088
   12380:	00017770 	.word	0x00017770
   12384:	20000028 	.word	0x20000028
   12388:	200003e4 	.word	0x200003e4
   1238c:	00014395 	.word	0x00014395
   12390:	200000dc 	.word	0x200000dc
   12394:	000147c9 	.word	0x000147c9
   12398:	200000e0 	.word	0x200000e0
   1239c:	200003e0 	.word	0x200003e0
   123a0:	200000d4 	.word	0x200000d4
   123a4:	200000d8 	.word	0x200000d8
   123a8:	20000958 	.word	0x20000958
   123ac:	00015161 	.word	0x00015161
   123b0:	20000fd4 	.word	0x20000fd4
   123b4:	2000030a 	.word	0x2000030a
   123b8:	00016ca9 	.word	0x00016ca9
   123bc:	000158ad 	.word	0x000158ad
   123c0:	406fe000 	.word	0x406fe000
   123c4:	00016e41 	.word	0x00016e41
   123c8:	200003d0 	.word	0x200003d0
   123cc:	200000b4 	.word	0x200000b4
   123d0:	200000b8 	.word	0x200000b8
   123d4:	200003d4 	.word	0x200003d4
   123d8:	200000bc 	.word	0x200000bc
   123dc:	200000c0 	.word	0x200000c0
   123e0:	200003d8 	.word	0x200003d8
   123e4:	200000c4 	.word	0x200000c4
   123e8:	200000c8 	.word	0x200000c8
   123ec:	000143bd 	.word	0x000143bd
   123f0:	2000007c 	.word	0x2000007c
   123f4:	00017790 	.word	0x00017790
   123f8:	2000004c 	.word	0x2000004c
   123fc:	200003ec 	.word	0x200003ec
				}
				case BRIGHT_THROTTLE:
				{
					output_brightness = remote_y/255.0;
   12400:	4be6      	ldr	r3, [pc, #920]	; (1279c <main+0x2084>)
   12402:	781b      	ldrb	r3, [r3, #0]
   12404:	001a      	movs	r2, r3
   12406:	4be6      	ldr	r3, [pc, #920]	; (127a0 <main+0x2088>)
   12408:	0010      	movs	r0, r2
   1240a:	4798      	blx	r3
   1240c:	4ce5      	ldr	r4, [pc, #916]	; (127a4 <main+0x208c>)
   1240e:	2200      	movs	r2, #0
   12410:	4be5      	ldr	r3, [pc, #916]	; (127a8 <main+0x2090>)
   12412:	47a0      	blx	r4
   12414:	0003      	movs	r3, r0
   12416:	000c      	movs	r4, r1
   12418:	0019      	movs	r1, r3
   1241a:	0022      	movs	r2, r4
   1241c:	4be3      	ldr	r3, [pc, #908]	; (127ac <main+0x2094>)
   1241e:	0008      	movs	r0, r1
   12420:	0011      	movs	r1, r2
   12422:	4798      	blx	r3
   12424:	1c02      	adds	r2, r0, #0
   12426:	4be2      	ldr	r3, [pc, #904]	; (127b0 <main+0x2098>)
   12428:	601a      	str	r2, [r3, #0]
					break;
   1242a:	e0a2      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_X_ACCEL:
				{
					if(axKalman < 0){
   1242c:	4be1      	ldr	r3, [pc, #900]	; (127b4 <main+0x209c>)
   1242e:	681a      	ldr	r2, [r3, #0]
   12430:	4be1      	ldr	r3, [pc, #900]	; (127b8 <main+0x20a0>)
   12432:	2100      	movs	r1, #0
   12434:	1c10      	adds	r0, r2, #0
   12436:	4798      	blx	r3
   12438:	1e03      	subs	r3, r0, #0
   1243a:	d00e      	beq.n	1245a <main+0x1d42>
						output_brightness = axKalman/kalmanAX_min;
   1243c:	4bdd      	ldr	r3, [pc, #884]	; (127b4 <main+0x209c>)
   1243e:	681a      	ldr	r2, [r3, #0]
   12440:	4bde      	ldr	r3, [pc, #888]	; (127bc <main+0x20a4>)
   12442:	6819      	ldr	r1, [r3, #0]
   12444:	4bde      	ldr	r3, [pc, #888]	; (127c0 <main+0x20a8>)
   12446:	1c10      	adds	r0, r2, #0
   12448:	4798      	blx	r3
   1244a:	1c03      	adds	r3, r0, #0
   1244c:	1c1a      	adds	r2, r3, #0
   1244e:	4bd8      	ldr	r3, [pc, #864]	; (127b0 <main+0x2098>)
   12450:	601a      	str	r2, [r3, #0]
						SUPRESS_LEFT_RGB = true;
   12452:	4bdc      	ldr	r3, [pc, #880]	; (127c4 <main+0x20ac>)
   12454:	2201      	movs	r2, #1
   12456:	701a      	strb	r2, [r3, #0]
					} else{
						output_brightness = axKalman/kalmanAX_max;
						SUPRESS_RIGHT_RGB = true;
					}
					break;
   12458:	e08b      	b.n	12572 <main+0x1e5a>
						output_brightness = axKalman/kalmanAX_max;
   1245a:	4bd6      	ldr	r3, [pc, #856]	; (127b4 <main+0x209c>)
   1245c:	681a      	ldr	r2, [r3, #0]
   1245e:	4bda      	ldr	r3, [pc, #872]	; (127c8 <main+0x20b0>)
   12460:	6819      	ldr	r1, [r3, #0]
   12462:	4bd7      	ldr	r3, [pc, #860]	; (127c0 <main+0x20a8>)
   12464:	1c10      	adds	r0, r2, #0
   12466:	4798      	blx	r3
   12468:	1c03      	adds	r3, r0, #0
   1246a:	1c1a      	adds	r2, r3, #0
   1246c:	4bd0      	ldr	r3, [pc, #832]	; (127b0 <main+0x2098>)
   1246e:	601a      	str	r2, [r3, #0]
						SUPRESS_RIGHT_RGB = true;
   12470:	4bd6      	ldr	r3, [pc, #856]	; (127cc <main+0x20b4>)
   12472:	2201      	movs	r2, #1
   12474:	701a      	strb	r2, [r3, #0]
					break;
   12476:	e07c      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_Y_ACCEL:
				{
					if(ayKalman < 0)
   12478:	4bd5      	ldr	r3, [pc, #852]	; (127d0 <main+0x20b8>)
   1247a:	681a      	ldr	r2, [r3, #0]
   1247c:	4bce      	ldr	r3, [pc, #824]	; (127b8 <main+0x20a0>)
   1247e:	2100      	movs	r1, #0
   12480:	1c10      	adds	r0, r2, #0
   12482:	4798      	blx	r3
   12484:	1e03      	subs	r3, r0, #0
   12486:	d00b      	beq.n	124a0 <main+0x1d88>
						output_brightness = ayKalman/kalmanAY_min;
   12488:	4bd1      	ldr	r3, [pc, #836]	; (127d0 <main+0x20b8>)
   1248a:	681a      	ldr	r2, [r3, #0]
   1248c:	4bd1      	ldr	r3, [pc, #836]	; (127d4 <main+0x20bc>)
   1248e:	6819      	ldr	r1, [r3, #0]
   12490:	4bcb      	ldr	r3, [pc, #812]	; (127c0 <main+0x20a8>)
   12492:	1c10      	adds	r0, r2, #0
   12494:	4798      	blx	r3
   12496:	1c03      	adds	r3, r0, #0
   12498:	1c1a      	adds	r2, r3, #0
   1249a:	4bc5      	ldr	r3, [pc, #788]	; (127b0 <main+0x2098>)
   1249c:	601a      	str	r2, [r3, #0]
					else
						output_brightness = ayKalman/kalmanAY_max;
					break;
   1249e:	e068      	b.n	12572 <main+0x1e5a>
						output_brightness = ayKalman/kalmanAY_max;
   124a0:	4bcb      	ldr	r3, [pc, #812]	; (127d0 <main+0x20b8>)
   124a2:	681a      	ldr	r2, [r3, #0]
   124a4:	4bcc      	ldr	r3, [pc, #816]	; (127d8 <main+0x20c0>)
   124a6:	6819      	ldr	r1, [r3, #0]
   124a8:	4bc5      	ldr	r3, [pc, #788]	; (127c0 <main+0x20a8>)
   124aa:	1c10      	adds	r0, r2, #0
   124ac:	4798      	blx	r3
   124ae:	1c03      	adds	r3, r0, #0
   124b0:	1c1a      	adds	r2, r3, #0
   124b2:	4bbf      	ldr	r3, [pc, #764]	; (127b0 <main+0x2098>)
   124b4:	601a      	str	r2, [r3, #0]
					break;
   124b6:	e05c      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_Z_ACCEL:
				{
					if(azKalman < 0)
   124b8:	4bc8      	ldr	r3, [pc, #800]	; (127dc <main+0x20c4>)
   124ba:	681a      	ldr	r2, [r3, #0]
   124bc:	4bbe      	ldr	r3, [pc, #760]	; (127b8 <main+0x20a0>)
   124be:	2100      	movs	r1, #0
   124c0:	1c10      	adds	r0, r2, #0
   124c2:	4798      	blx	r3
   124c4:	1e03      	subs	r3, r0, #0
   124c6:	d00b      	beq.n	124e0 <main+0x1dc8>
						output_brightness = azKalman/kalmanAZ_min;
   124c8:	4bc4      	ldr	r3, [pc, #784]	; (127dc <main+0x20c4>)
   124ca:	681a      	ldr	r2, [r3, #0]
   124cc:	4bc4      	ldr	r3, [pc, #784]	; (127e0 <main+0x20c8>)
   124ce:	6819      	ldr	r1, [r3, #0]
   124d0:	4bbb      	ldr	r3, [pc, #748]	; (127c0 <main+0x20a8>)
   124d2:	1c10      	adds	r0, r2, #0
   124d4:	4798      	blx	r3
   124d6:	1c03      	adds	r3, r0, #0
   124d8:	1c1a      	adds	r2, r3, #0
   124da:	4bb5      	ldr	r3, [pc, #724]	; (127b0 <main+0x2098>)
   124dc:	601a      	str	r2, [r3, #0]
					else
						output_brightness = azKalman/kalmanAZ_max;
						break;
   124de:	e048      	b.n	12572 <main+0x1e5a>
						output_brightness = azKalman/kalmanAZ_max;
   124e0:	4bbe      	ldr	r3, [pc, #760]	; (127dc <main+0x20c4>)
   124e2:	681a      	ldr	r2, [r3, #0]
   124e4:	4bbf      	ldr	r3, [pc, #764]	; (127e4 <main+0x20cc>)
   124e6:	6819      	ldr	r1, [r3, #0]
   124e8:	4bb5      	ldr	r3, [pc, #724]	; (127c0 <main+0x20a8>)
   124ea:	1c10      	adds	r0, r2, #0
   124ec:	4798      	blx	r3
   124ee:	1c03      	adds	r3, r0, #0
   124f0:	1c1a      	adds	r2, r3, #0
   124f2:	4baf      	ldr	r3, [pc, #700]	; (127b0 <main+0x2098>)
   124f4:	601a      	str	r2, [r3, #0]
						break;
   124f6:	e03c      	b.n	12572 <main+0x1e5a>
				}
				case BRIGHT_STROBE:
				{
					check_time(&strobe_time);
   124f8:	4bbb      	ldr	r3, [pc, #748]	; (127e8 <main+0x20d0>)
   124fa:	0018      	movs	r0, r3
   124fc:	4bbb      	ldr	r3, [pc, #748]	; (127ec <main+0x20d4>)
   124fe:	4798      	blx	r3
					if(output_brightness == 0.0 && (millis()-strobe_time > strobe_off_dur)){
   12500:	4bab      	ldr	r3, [pc, #684]	; (127b0 <main+0x2098>)
   12502:	681a      	ldr	r2, [r3, #0]
   12504:	4bba      	ldr	r3, [pc, #744]	; (127f0 <main+0x20d8>)
   12506:	2100      	movs	r1, #0
   12508:	1c10      	adds	r0, r2, #0
   1250a:	4798      	blx	r3
   1250c:	1e03      	subs	r3, r0, #0
   1250e:	d013      	beq.n	12538 <main+0x1e20>
   12510:	4bb8      	ldr	r3, [pc, #736]	; (127f4 <main+0x20dc>)
   12512:	4798      	blx	r3
   12514:	0002      	movs	r2, r0
   12516:	4bb4      	ldr	r3, [pc, #720]	; (127e8 <main+0x20d0>)
   12518:	681b      	ldr	r3, [r3, #0]
   1251a:	1ad3      	subs	r3, r2, r3
   1251c:	4ab6      	ldr	r2, [pc, #728]	; (127f8 <main+0x20e0>)
   1251e:	8812      	ldrh	r2, [r2, #0]
   12520:	4293      	cmp	r3, r2
   12522:	d909      	bls.n	12538 <main+0x1e20>
						output_brightness = 1.0;
   12524:	4ba2      	ldr	r3, [pc, #648]	; (127b0 <main+0x2098>)
   12526:	22fe      	movs	r2, #254	; 0xfe
   12528:	0592      	lsls	r2, r2, #22
   1252a:	601a      	str	r2, [r3, #0]
						strobe_time = millis();
   1252c:	4bb1      	ldr	r3, [pc, #708]	; (127f4 <main+0x20dc>)
   1252e:	4798      	blx	r3
   12530:	0002      	movs	r2, r0
   12532:	4bad      	ldr	r3, [pc, #692]	; (127e8 <main+0x20d0>)
   12534:	601a      	str	r2, [r3, #0]
					}
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
						output_brightness = 0.0;
						strobe_time = millis();
					}
					break;
   12536:	e01b      	b.n	12570 <main+0x1e58>
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
   12538:	4b9d      	ldr	r3, [pc, #628]	; (127b0 <main+0x2098>)
   1253a:	681a      	ldr	r2, [r3, #0]
   1253c:	4bac      	ldr	r3, [pc, #688]	; (127f0 <main+0x20d8>)
   1253e:	21fe      	movs	r1, #254	; 0xfe
   12540:	0589      	lsls	r1, r1, #22
   12542:	1c10      	adds	r0, r2, #0
   12544:	4798      	blx	r3
   12546:	1e03      	subs	r3, r0, #0
   12548:	d100      	bne.n	1254c <main+0x1e34>
					break;
   1254a:	e011      	b.n	12570 <main+0x1e58>
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
   1254c:	4ba9      	ldr	r3, [pc, #676]	; (127f4 <main+0x20dc>)
   1254e:	4798      	blx	r3
   12550:	0002      	movs	r2, r0
   12552:	4ba5      	ldr	r3, [pc, #660]	; (127e8 <main+0x20d0>)
   12554:	681b      	ldr	r3, [r3, #0]
   12556:	1ad3      	subs	r3, r2, r3
   12558:	4aa8      	ldr	r2, [pc, #672]	; (127fc <main+0x20e4>)
   1255a:	8812      	ldrh	r2, [r2, #0]
   1255c:	4293      	cmp	r3, r2
   1255e:	d907      	bls.n	12570 <main+0x1e58>
						output_brightness = 0.0;
   12560:	4b93      	ldr	r3, [pc, #588]	; (127b0 <main+0x2098>)
   12562:	2200      	movs	r2, #0
   12564:	601a      	str	r2, [r3, #0]
						strobe_time = millis();
   12566:	4ba3      	ldr	r3, [pc, #652]	; (127f4 <main+0x20dc>)
   12568:	4798      	blx	r3
   1256a:	0002      	movs	r2, r0
   1256c:	4b9e      	ldr	r3, [pc, #632]	; (127e8 <main+0x20d0>)
   1256e:	601a      	str	r2, [r3, #0]
					break;
   12570:	46c0      	nop			; (mov r8, r8)
				}
			}
		
			if(output_brightness < 0)
   12572:	4b8f      	ldr	r3, [pc, #572]	; (127b0 <main+0x2098>)
   12574:	681a      	ldr	r2, [r3, #0]
   12576:	4b90      	ldr	r3, [pc, #576]	; (127b8 <main+0x20a0>)
   12578:	2100      	movs	r1, #0
   1257a:	1c10      	adds	r0, r2, #0
   1257c:	4798      	blx	r3
   1257e:	1e03      	subs	r3, r0, #0
   12580:	d003      	beq.n	1258a <main+0x1e72>
				output_brightness = 0;
   12582:	4b8b      	ldr	r3, [pc, #556]	; (127b0 <main+0x2098>)
   12584:	2200      	movs	r2, #0
   12586:	601a      	str	r2, [r3, #0]
   12588:	e00c      	b.n	125a4 <main+0x1e8c>
			else if(output_brightness > 1)
   1258a:	4b89      	ldr	r3, [pc, #548]	; (127b0 <main+0x2098>)
   1258c:	681a      	ldr	r2, [r3, #0]
   1258e:	4b9c      	ldr	r3, [pc, #624]	; (12800 <main+0x20e8>)
   12590:	21fe      	movs	r1, #254	; 0xfe
   12592:	0589      	lsls	r1, r1, #22
   12594:	1c10      	adds	r0, r2, #0
   12596:	4798      	blx	r3
   12598:	1e03      	subs	r3, r0, #0
   1259a:	d003      	beq.n	125a4 <main+0x1e8c>
				output_brightness = 1;
   1259c:	4b84      	ldr	r3, [pc, #528]	; (127b0 <main+0x2098>)
   1259e:	22fe      	movs	r2, #254	; 0xfe
   125a0:	0592      	lsls	r2, r2, #22
   125a2:	601a      	str	r2, [r3, #0]

			switch(ColorBase[light_mode]){ // Set the color of the side LEDs
   125a4:	4b97      	ldr	r3, [pc, #604]	; (12804 <main+0x20ec>)
   125a6:	781b      	ldrb	r3, [r3, #0]
   125a8:	001a      	movs	r2, r3
   125aa:	4b97      	ldr	r3, [pc, #604]	; (12808 <main+0x20f0>)
   125ac:	5c9b      	ldrb	r3, [r3, r2]
   125ae:	2b0a      	cmp	r3, #10
   125b0:	d901      	bls.n	125b6 <main+0x1e9e>
   125b2:	f001 f8a3 	bl	136fc <main+0x2fe4>
   125b6:	009a      	lsls	r2, r3, #2
   125b8:	4b94      	ldr	r3, [pc, #592]	; (1280c <main+0x20f4>)
   125ba:	18d3      	adds	r3, r2, r3
   125bc:	681b      	ldr	r3, [r3, #0]
   125be:	469f      	mov	pc, r3
				case COLOR_STATIC:
				{
					if(light_mode == MODE_STATIC)
   125c0:	4b90      	ldr	r3, [pc, #576]	; (12804 <main+0x20ec>)
   125c2:	781b      	ldrb	r3, [r3, #0]
   125c4:	2b00      	cmp	r3, #0
   125c6:	d105      	bne.n	125d4 <main+0x1ebc>
						RGB_Ouptut = Static_RGB;
   125c8:	4b91      	ldr	r3, [pc, #580]	; (12810 <main+0x20f8>)
   125ca:	4a92      	ldr	r2, [pc, #584]	; (12814 <main+0x20fc>)
   125cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   125ce:	c313      	stmia	r3!, {r0, r1, r4}
					else if(light_mode == MODE_CUSTOM)
						RGB_Ouptut = Custom_RGB;
					break;
   125d0:	f001 f891 	bl	136f6 <main+0x2fde>
					else if(light_mode == MODE_CUSTOM)
   125d4:	4b8b      	ldr	r3, [pc, #556]	; (12804 <main+0x20ec>)
   125d6:	781b      	ldrb	r3, [r3, #0]
   125d8:	2b08      	cmp	r3, #8
   125da:	d001      	beq.n	125e0 <main+0x1ec8>
   125dc:	f001 f88b 	bl	136f6 <main+0x2fde>
						RGB_Ouptut = Custom_RGB;
   125e0:	4b8b      	ldr	r3, [pc, #556]	; (12810 <main+0x20f8>)
   125e2:	4a8d      	ldr	r2, [pc, #564]	; (12818 <main+0x2100>)
   125e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   125e6:	c313      	stmia	r3!, {r0, r1, r4}
					break;
   125e8:	f001 f885 	bl	136f6 <main+0x2fde>
				}
				case COLOR_COLOR_CYCLE:
				{
					upColor = cycle_index * output_brightness;
   125ec:	4b8b      	ldr	r3, [pc, #556]	; (1281c <main+0x2104>)
   125ee:	681a      	ldr	r2, [r3, #0]
   125f0:	4b8b      	ldr	r3, [pc, #556]	; (12820 <main+0x2108>)
   125f2:	0010      	movs	r0, r2
   125f4:	4798      	blx	r3
   125f6:	4b6e      	ldr	r3, [pc, #440]	; (127b0 <main+0x2098>)
   125f8:	681a      	ldr	r2, [r3, #0]
   125fa:	4b8a      	ldr	r3, [pc, #552]	; (12824 <main+0x210c>)
   125fc:	1c11      	adds	r1, r2, #0
   125fe:	4798      	blx	r3
   12600:	1c03      	adds	r3, r0, #0
   12602:	1c1a      	adds	r2, r3, #0
   12604:	4b88      	ldr	r3, [pc, #544]	; (12828 <main+0x2110>)
   12606:	1c10      	adds	r0, r2, #0
   12608:	4798      	blx	r3
   1260a:	0003      	movs	r3, r0
   1260c:	b29a      	uxth	r2, r3
   1260e:	4b87      	ldr	r3, [pc, #540]	; (1282c <main+0x2114>)
   12610:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12612:	4b82      	ldr	r3, [pc, #520]	; (1281c <main+0x2104>)
   12614:	681b      	ldr	r3, [r3, #0]
   12616:	4a86      	ldr	r2, [pc, #536]	; (12830 <main+0x2118>)
   12618:	1ad2      	subs	r2, r2, r3
   1261a:	4b81      	ldr	r3, [pc, #516]	; (12820 <main+0x2108>)
   1261c:	0010      	movs	r0, r2
   1261e:	4798      	blx	r3
   12620:	4b63      	ldr	r3, [pc, #396]	; (127b0 <main+0x2098>)
   12622:	681a      	ldr	r2, [r3, #0]
   12624:	4b7f      	ldr	r3, [pc, #508]	; (12824 <main+0x210c>)
   12626:	1c11      	adds	r1, r2, #0
   12628:	4798      	blx	r3
   1262a:	1c03      	adds	r3, r0, #0
   1262c:	1c1a      	adds	r2, r3, #0
   1262e:	4b7e      	ldr	r3, [pc, #504]	; (12828 <main+0x2110>)
   12630:	1c10      	adds	r0, r2, #0
   12632:	4798      	blx	r3
   12634:	0003      	movs	r3, r0
   12636:	b29a      	uxth	r2, r3
   12638:	4b7e      	ldr	r3, [pc, #504]	; (12834 <main+0x211c>)
   1263a:	801a      	strh	r2, [r3, #0]
					
					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   1263c:	4b7b      	ldr	r3, [pc, #492]	; (1282c <main+0x2114>)
   1263e:	8819      	ldrh	r1, [r3, #0]
   12640:	4b7c      	ldr	r3, [pc, #496]	; (12834 <main+0x211c>)
   12642:	881a      	ldrh	r2, [r3, #0]
   12644:	4b7c      	ldr	r3, [pc, #496]	; (12838 <main+0x2120>)
   12646:	781b      	ldrb	r3, [r3, #0]
   12648:	4d71      	ldr	r5, [pc, #452]	; (12810 <main+0x20f8>)
   1264a:	0038      	movs	r0, r7
   1264c:	4c7b      	ldr	r4, [pc, #492]	; (1283c <main+0x2124>)
   1264e:	47a0      	blx	r4
   12650:	003b      	movs	r3, r7
   12652:	0028      	movs	r0, r5
   12654:	0019      	movs	r1, r3
   12656:	230c      	movs	r3, #12
   12658:	001a      	movs	r2, r3
   1265a:	4b79      	ldr	r3, [pc, #484]	; (12840 <main+0x2128>)
   1265c:	4798      	blx	r3

					cycle_index += output_rate_sens*max_cycle_rate;
   1265e:	4b6f      	ldr	r3, [pc, #444]	; (1281c <main+0x2104>)
   12660:	681a      	ldr	r2, [r3, #0]
   12662:	4b6f      	ldr	r3, [pc, #444]	; (12820 <main+0x2108>)
   12664:	0010      	movs	r0, r2
   12666:	4798      	blx	r3
   12668:	1c04      	adds	r4, r0, #0
   1266a:	4b76      	ldr	r3, [pc, #472]	; (12844 <main+0x212c>)
   1266c:	681a      	ldr	r2, [r3, #0]
   1266e:	4b6d      	ldr	r3, [pc, #436]	; (12824 <main+0x210c>)
   12670:	6a39      	ldr	r1, [r7, #32]
   12672:	1c10      	adds	r0, r2, #0
   12674:	4798      	blx	r3
   12676:	1c03      	adds	r3, r0, #0
   12678:	1c1a      	adds	r2, r3, #0
   1267a:	4b73      	ldr	r3, [pc, #460]	; (12848 <main+0x2130>)
   1267c:	1c11      	adds	r1, r2, #0
   1267e:	1c20      	adds	r0, r4, #0
   12680:	4798      	blx	r3
   12682:	1c03      	adds	r3, r0, #0
   12684:	1c1a      	adds	r2, r3, #0
   12686:	4b68      	ldr	r3, [pc, #416]	; (12828 <main+0x2110>)
   12688:	1c10      	adds	r0, r2, #0
   1268a:	4798      	blx	r3
   1268c:	0002      	movs	r2, r0
   1268e:	4b63      	ldr	r3, [pc, #396]	; (1281c <main+0x2104>)
   12690:	601a      	str	r2, [r3, #0]
					if(cycle_index >= 0x0FFFF){
   12692:	4b62      	ldr	r3, [pc, #392]	; (1281c <main+0x2104>)
   12694:	681b      	ldr	r3, [r3, #0]
   12696:	4a6d      	ldr	r2, [pc, #436]	; (1284c <main+0x2134>)
   12698:	4293      	cmp	r3, r2
   1269a:	d801      	bhi.n	126a0 <main+0x1f88>
   1269c:	f001 f82d 	bl	136fa <main+0x2fe2>
						cycle_index = 0;
   126a0:	4b5e      	ldr	r3, [pc, #376]	; (1281c <main+0x2104>)
   126a2:	2200      	movs	r2, #0
   126a4:	601a      	str	r2, [r3, #0]
						cycle += 1;
   126a6:	4b64      	ldr	r3, [pc, #400]	; (12838 <main+0x2120>)
   126a8:	781b      	ldrb	r3, [r3, #0]
   126aa:	3301      	adds	r3, #1
   126ac:	b2da      	uxtb	r2, r3
   126ae:	4b62      	ldr	r3, [pc, #392]	; (12838 <main+0x2120>)
   126b0:	701a      	strb	r2, [r3, #0]
						if(cycle == 3)
   126b2:	4b61      	ldr	r3, [pc, #388]	; (12838 <main+0x2120>)
   126b4:	781b      	ldrb	r3, [r3, #0]
   126b6:	2b03      	cmp	r3, #3
   126b8:	d001      	beq.n	126be <main+0x1fa6>
   126ba:	f001 f81e 	bl	136fa <main+0x2fe2>
						cycle = 0;
   126be:	4b5e      	ldr	r3, [pc, #376]	; (12838 <main+0x2120>)
   126c0:	2200      	movs	r2, #0
   126c2:	701a      	strb	r2, [r3, #0]
					}
					break;
   126c4:	f001 f819 	bl	136fa <main+0x2fe2>
				}
				case COLOR_COMPASS:
				{
					cycle_index = (int)(((((float)0x0FFFF) * 6) / 360) *heading) % 0x0FFFF;
   126c8:	4b56      	ldr	r3, [pc, #344]	; (12824 <main+0x210c>)
   126ca:	4961      	ldr	r1, [pc, #388]	; (12850 <main+0x2138>)
   126cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   126ce:	4798      	blx	r3
   126d0:	1c03      	adds	r3, r0, #0
   126d2:	1c1a      	adds	r2, r3, #0
   126d4:	4b5f      	ldr	r3, [pc, #380]	; (12854 <main+0x213c>)
   126d6:	1c10      	adds	r0, r2, #0
   126d8:	4798      	blx	r3
   126da:	0002      	movs	r2, r0
   126dc:	4b5e      	ldr	r3, [pc, #376]	; (12858 <main+0x2140>)
   126de:	4954      	ldr	r1, [pc, #336]	; (12830 <main+0x2118>)
   126e0:	0010      	movs	r0, r2
   126e2:	4798      	blx	r3
   126e4:	000b      	movs	r3, r1
   126e6:	001a      	movs	r2, r3
   126e8:	4b4c      	ldr	r3, [pc, #304]	; (1281c <main+0x2104>)
   126ea:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 6) / 360) *heading) / 0x0FFFF;
   126ec:	4b4d      	ldr	r3, [pc, #308]	; (12824 <main+0x210c>)
   126ee:	4958      	ldr	r1, [pc, #352]	; (12850 <main+0x2138>)
   126f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   126f2:	4798      	blx	r3
   126f4:	1c03      	adds	r3, r0, #0
   126f6:	1c1a      	adds	r2, r3, #0
   126f8:	4b56      	ldr	r3, [pc, #344]	; (12854 <main+0x213c>)
   126fa:	1c10      	adds	r0, r2, #0
   126fc:	4798      	blx	r3
   126fe:	0002      	movs	r2, r0
   12700:	4b56      	ldr	r3, [pc, #344]	; (1285c <main+0x2144>)
   12702:	494b      	ldr	r1, [pc, #300]	; (12830 <main+0x2118>)
   12704:	0010      	movs	r0, r2
   12706:	4798      	blx	r3
   12708:	0003      	movs	r3, r0
   1270a:	b2da      	uxtb	r2, r3
   1270c:	4b4a      	ldr	r3, [pc, #296]	; (12838 <main+0x2120>)
   1270e:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   12710:	4b42      	ldr	r3, [pc, #264]	; (1281c <main+0x2104>)
   12712:	681a      	ldr	r2, [r3, #0]
   12714:	4b42      	ldr	r3, [pc, #264]	; (12820 <main+0x2108>)
   12716:	0010      	movs	r0, r2
   12718:	4798      	blx	r3
   1271a:	4b25      	ldr	r3, [pc, #148]	; (127b0 <main+0x2098>)
   1271c:	681a      	ldr	r2, [r3, #0]
   1271e:	4b41      	ldr	r3, [pc, #260]	; (12824 <main+0x210c>)
   12720:	1c11      	adds	r1, r2, #0
   12722:	4798      	blx	r3
   12724:	1c03      	adds	r3, r0, #0
   12726:	1c1a      	adds	r2, r3, #0
   12728:	4b3f      	ldr	r3, [pc, #252]	; (12828 <main+0x2110>)
   1272a:	1c10      	adds	r0, r2, #0
   1272c:	4798      	blx	r3
   1272e:	0003      	movs	r3, r0
   12730:	b29a      	uxth	r2, r3
   12732:	4b3e      	ldr	r3, [pc, #248]	; (1282c <main+0x2114>)
   12734:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12736:	4b39      	ldr	r3, [pc, #228]	; (1281c <main+0x2104>)
   12738:	681b      	ldr	r3, [r3, #0]
   1273a:	4a3d      	ldr	r2, [pc, #244]	; (12830 <main+0x2118>)
   1273c:	1ad2      	subs	r2, r2, r3
   1273e:	4b38      	ldr	r3, [pc, #224]	; (12820 <main+0x2108>)
   12740:	0010      	movs	r0, r2
   12742:	4798      	blx	r3
   12744:	4b1a      	ldr	r3, [pc, #104]	; (127b0 <main+0x2098>)
   12746:	681a      	ldr	r2, [r3, #0]
   12748:	4b36      	ldr	r3, [pc, #216]	; (12824 <main+0x210c>)
   1274a:	1c11      	adds	r1, r2, #0
   1274c:	4798      	blx	r3
   1274e:	1c03      	adds	r3, r0, #0
   12750:	1c1a      	adds	r2, r3, #0
   12752:	4b35      	ldr	r3, [pc, #212]	; (12828 <main+0x2110>)
   12754:	1c10      	adds	r0, r2, #0
   12756:	4798      	blx	r3
   12758:	0003      	movs	r3, r0
   1275a:	b29a      	uxth	r2, r3
   1275c:	4b35      	ldr	r3, [pc, #212]	; (12834 <main+0x211c>)
   1275e:	801a      	strh	r2, [r3, #0]

					if(cycle >= 3)
   12760:	4b35      	ldr	r3, [pc, #212]	; (12838 <main+0x2120>)
   12762:	781b      	ldrb	r3, [r3, #0]
   12764:	2b02      	cmp	r3, #2
   12766:	d905      	bls.n	12774 <main+0x205c>
					cycle -= 3;
   12768:	4b33      	ldr	r3, [pc, #204]	; (12838 <main+0x2120>)
   1276a:	781b      	ldrb	r3, [r3, #0]
   1276c:	3b03      	subs	r3, #3
   1276e:	b2da      	uxtb	r2, r3
   12770:	4b31      	ldr	r3, [pc, #196]	; (12838 <main+0x2120>)
   12772:	701a      	strb	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12774:	4b2d      	ldr	r3, [pc, #180]	; (1282c <main+0x2114>)
   12776:	8819      	ldrh	r1, [r3, #0]
   12778:	4b2e      	ldr	r3, [pc, #184]	; (12834 <main+0x211c>)
   1277a:	881a      	ldrh	r2, [r3, #0]
   1277c:	4b2e      	ldr	r3, [pc, #184]	; (12838 <main+0x2120>)
   1277e:	781b      	ldrb	r3, [r3, #0]
   12780:	4d23      	ldr	r5, [pc, #140]	; (12810 <main+0x20f8>)
   12782:	0038      	movs	r0, r7
   12784:	4c2d      	ldr	r4, [pc, #180]	; (1283c <main+0x2124>)
   12786:	47a0      	blx	r4
   12788:	003b      	movs	r3, r7
   1278a:	0028      	movs	r0, r5
   1278c:	0019      	movs	r1, r3
   1278e:	230c      	movs	r3, #12
   12790:	001a      	movs	r2, r3
   12792:	4b2b      	ldr	r3, [pc, #172]	; (12840 <main+0x2128>)
   12794:	4798      	blx	r3
					break;
   12796:	f000 ffb1 	bl	136fc <main+0x2fe4>
   1279a:	46c0      	nop			; (mov r8, r8)
   1279c:	2000030a 	.word	0x2000030a
   127a0:	00016ca9 	.word	0x00016ca9
   127a4:	000158ad 	.word	0x000158ad
   127a8:	406fe000 	.word	0x406fe000
   127ac:	00016e41 	.word	0x00016e41
   127b0:	200003ec 	.word	0x200003ec
   127b4:	200003d0 	.word	0x200003d0
   127b8:	00014395 	.word	0x00014395
   127bc:	200000b4 	.word	0x200000b4
   127c0:	000147c9 	.word	0x000147c9
   127c4:	20000320 	.word	0x20000320
   127c8:	200000b8 	.word	0x200000b8
   127cc:	20000321 	.word	0x20000321
   127d0:	200003d4 	.word	0x200003d4
   127d4:	200000bc 	.word	0x200000bc
   127d8:	200000c0 	.word	0x200000c0
   127dc:	200003d8 	.word	0x200003d8
   127e0:	200000c4 	.word	0x200000c4
   127e4:	200000c8 	.word	0x200000c8
   127e8:	20000330 	.word	0x20000330
   127ec:	0000b045 	.word	0x0000b045
   127f0:	00014389 	.word	0x00014389
   127f4:	0000b015 	.word	0x0000b015
   127f8:	200000aa 	.word	0x200000aa
   127fc:	200000a8 	.word	0x200000a8
   12800:	000143bd 	.word	0x000143bd
   12804:	2000001b 	.word	0x2000001b
   12808:	20000070 	.word	0x20000070
   1280c:	000177b4 	.word	0x000177b4
   12810:	20000314 	.word	0x20000314
   12814:	2000001c 	.word	0x2000001c
   12818:	20000094 	.word	0x20000094
   1281c:	20000328 	.word	0x20000328
   12820:	00015201 	.word	0x00015201
   12824:	00014ba9 	.word	0x00014ba9
   12828:	00014439 	.word	0x00014439
   1282c:	2000032c 	.word	0x2000032c
   12830:	0000ffff 	.word	0x0000ffff
   12834:	2000032e 	.word	0x2000032e
   12838:	20000326 	.word	0x20000326
   1283c:	0000b385 	.word	0x0000b385
   12840:	00016fe5 	.word	0x00016fe5
   12844:	200000a4 	.word	0x200000a4
   12848:	000144a5 	.word	0x000144a5
   1284c:	0000fffe 	.word	0x0000fffe
   12850:	44888800 	.word	0x44888800
   12854:	00015121 	.word	0x00015121
   12858:	000142e9 	.word	0x000142e9
   1285c:	0001411d 	.word	0x0001411d
				}
				case COLOR_YAW_RATE:
				{
					if(gzKalman < 0)
   12860:	4b7b      	ldr	r3, [pc, #492]	; (12a50 <main+0x2338>)
   12862:	681a      	ldr	r2, [r3, #0]
   12864:	4b7b      	ldr	r3, [pc, #492]	; (12a54 <main+0x233c>)
   12866:	2100      	movs	r1, #0
   12868:	1c10      	adds	r0, r2, #0
   1286a:	4798      	blx	r3
   1286c:	1e03      	subs	r3, r0, #0
   1286e:	d02a      	beq.n	128c6 <main+0x21ae>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) % 0x0FFFF;
   12870:	4b79      	ldr	r3, [pc, #484]	; (12a58 <main+0x2340>)
   12872:	681a      	ldr	r2, [r3, #0]
   12874:	4b79      	ldr	r3, [pc, #484]	; (12a5c <main+0x2344>)
   12876:	1c10      	adds	r0, r2, #0
   12878:	4798      	blx	r3
   1287a:	0002      	movs	r2, r0
   1287c:	000b      	movs	r3, r1
   1287e:	4c78      	ldr	r4, [pc, #480]	; (12a60 <main+0x2348>)
   12880:	2000      	movs	r0, #0
   12882:	4978      	ldr	r1, [pc, #480]	; (12a64 <main+0x234c>)
   12884:	47a0      	blx	r4
   12886:	0003      	movs	r3, r0
   12888:	000c      	movs	r4, r1
   1288a:	001d      	movs	r5, r3
   1288c:	0026      	movs	r6, r4
   1288e:	4b70      	ldr	r3, [pc, #448]	; (12a50 <main+0x2338>)
   12890:	681a      	ldr	r2, [r3, #0]
   12892:	4b72      	ldr	r3, [pc, #456]	; (12a5c <main+0x2344>)
   12894:	1c10      	adds	r0, r2, #0
   12896:	4798      	blx	r3
   12898:	0002      	movs	r2, r0
   1289a:	000b      	movs	r3, r1
   1289c:	4c72      	ldr	r4, [pc, #456]	; (12a68 <main+0x2350>)
   1289e:	0028      	movs	r0, r5
   128a0:	0031      	movs	r1, r6
   128a2:	47a0      	blx	r4
   128a4:	0003      	movs	r3, r0
   128a6:	000c      	movs	r4, r1
   128a8:	0019      	movs	r1, r3
   128aa:	0022      	movs	r2, r4
   128ac:	4b6f      	ldr	r3, [pc, #444]	; (12a6c <main+0x2354>)
   128ae:	0008      	movs	r0, r1
   128b0:	0011      	movs	r1, r2
   128b2:	4798      	blx	r3
   128b4:	0002      	movs	r2, r0
   128b6:	4b6e      	ldr	r3, [pc, #440]	; (12a70 <main+0x2358>)
   128b8:	496e      	ldr	r1, [pc, #440]	; (12a74 <main+0x235c>)
   128ba:	0010      	movs	r0, r2
   128bc:	4798      	blx	r3
   128be:	000b      	movs	r3, r1
   128c0:	001a      	movs	r2, r3
   128c2:	4b6d      	ldr	r3, [pc, #436]	; (12a78 <main+0x2360>)
   128c4:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) / 0x0FFFF;
   128c6:	4b64      	ldr	r3, [pc, #400]	; (12a58 <main+0x2340>)
   128c8:	681a      	ldr	r2, [r3, #0]
   128ca:	4b64      	ldr	r3, [pc, #400]	; (12a5c <main+0x2344>)
   128cc:	1c10      	adds	r0, r2, #0
   128ce:	4798      	blx	r3
   128d0:	0002      	movs	r2, r0
   128d2:	000b      	movs	r3, r1
   128d4:	4c62      	ldr	r4, [pc, #392]	; (12a60 <main+0x2348>)
   128d6:	2000      	movs	r0, #0
   128d8:	4962      	ldr	r1, [pc, #392]	; (12a64 <main+0x234c>)
   128da:	47a0      	blx	r4
   128dc:	0003      	movs	r3, r0
   128de:	000c      	movs	r4, r1
   128e0:	001d      	movs	r5, r3
   128e2:	0026      	movs	r6, r4
   128e4:	4b5a      	ldr	r3, [pc, #360]	; (12a50 <main+0x2338>)
   128e6:	681a      	ldr	r2, [r3, #0]
   128e8:	4b5c      	ldr	r3, [pc, #368]	; (12a5c <main+0x2344>)
   128ea:	1c10      	adds	r0, r2, #0
   128ec:	4798      	blx	r3
   128ee:	0002      	movs	r2, r0
   128f0:	000b      	movs	r3, r1
   128f2:	4c5d      	ldr	r4, [pc, #372]	; (12a68 <main+0x2350>)
   128f4:	0028      	movs	r0, r5
   128f6:	0031      	movs	r1, r6
   128f8:	47a0      	blx	r4
   128fa:	0003      	movs	r3, r0
   128fc:	000c      	movs	r4, r1
   128fe:	0019      	movs	r1, r3
   12900:	0022      	movs	r2, r4
   12902:	4b5a      	ldr	r3, [pc, #360]	; (12a6c <main+0x2354>)
   12904:	0008      	movs	r0, r1
   12906:	0011      	movs	r1, r2
   12908:	4798      	blx	r3
   1290a:	0002      	movs	r2, r0
   1290c:	4b5b      	ldr	r3, [pc, #364]	; (12a7c <main+0x2364>)
   1290e:	4959      	ldr	r1, [pc, #356]	; (12a74 <main+0x235c>)
   12910:	0010      	movs	r0, r2
   12912:	4798      	blx	r3
   12914:	0003      	movs	r3, r0
   12916:	b2da      	uxtb	r2, r3
   12918:	4b59      	ldr	r3, [pc, #356]	; (12a80 <main+0x2368>)
   1291a:	701a      	strb	r2, [r3, #0]
					if(gzKalman >= 0){
   1291c:	4b4c      	ldr	r3, [pc, #304]	; (12a50 <main+0x2338>)
   1291e:	681a      	ldr	r2, [r3, #0]
   12920:	4b58      	ldr	r3, [pc, #352]	; (12a84 <main+0x236c>)
   12922:	2100      	movs	r1, #0
   12924:	1c10      	adds	r0, r2, #0
   12926:	4798      	blx	r3
   12928:	1e03      	subs	r3, r0, #0
   1292a:	d055      	beq.n	129d8 <main+0x22c0>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) % 0x0FFFF;
   1292c:	4b56      	ldr	r3, [pc, #344]	; (12a88 <main+0x2370>)
   1292e:	681a      	ldr	r2, [r3, #0]
   12930:	4b4a      	ldr	r3, [pc, #296]	; (12a5c <main+0x2344>)
   12932:	1c10      	adds	r0, r2, #0
   12934:	4798      	blx	r3
   12936:	0002      	movs	r2, r0
   12938:	000b      	movs	r3, r1
   1293a:	4c49      	ldr	r4, [pc, #292]	; (12a60 <main+0x2348>)
   1293c:	2000      	movs	r0, #0
   1293e:	4949      	ldr	r1, [pc, #292]	; (12a64 <main+0x234c>)
   12940:	47a0      	blx	r4
   12942:	0003      	movs	r3, r0
   12944:	000c      	movs	r4, r1
   12946:	001d      	movs	r5, r3
   12948:	0026      	movs	r6, r4
   1294a:	4b41      	ldr	r3, [pc, #260]	; (12a50 <main+0x2338>)
   1294c:	681a      	ldr	r2, [r3, #0]
   1294e:	4b43      	ldr	r3, [pc, #268]	; (12a5c <main+0x2344>)
   12950:	1c10      	adds	r0, r2, #0
   12952:	4798      	blx	r3
   12954:	0002      	movs	r2, r0
   12956:	000b      	movs	r3, r1
   12958:	4c43      	ldr	r4, [pc, #268]	; (12a68 <main+0x2350>)
   1295a:	0028      	movs	r0, r5
   1295c:	0031      	movs	r1, r6
   1295e:	47a0      	blx	r4
   12960:	0003      	movs	r3, r0
   12962:	000c      	movs	r4, r1
   12964:	0019      	movs	r1, r3
   12966:	0022      	movs	r2, r4
   12968:	4b40      	ldr	r3, [pc, #256]	; (12a6c <main+0x2354>)
   1296a:	0008      	movs	r0, r1
   1296c:	0011      	movs	r1, r2
   1296e:	4798      	blx	r3
   12970:	0002      	movs	r2, r0
   12972:	4b3f      	ldr	r3, [pc, #252]	; (12a70 <main+0x2358>)
   12974:	493f      	ldr	r1, [pc, #252]	; (12a74 <main+0x235c>)
   12976:	0010      	movs	r0, r2
   12978:	4798      	blx	r3
   1297a:	000b      	movs	r3, r1
   1297c:	001a      	movs	r2, r3
   1297e:	4b3e      	ldr	r3, [pc, #248]	; (12a78 <main+0x2360>)
   12980:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) / 0x0FFFF;
   12982:	4b41      	ldr	r3, [pc, #260]	; (12a88 <main+0x2370>)
   12984:	681a      	ldr	r2, [r3, #0]
   12986:	4b35      	ldr	r3, [pc, #212]	; (12a5c <main+0x2344>)
   12988:	1c10      	adds	r0, r2, #0
   1298a:	4798      	blx	r3
   1298c:	0002      	movs	r2, r0
   1298e:	000b      	movs	r3, r1
   12990:	4c33      	ldr	r4, [pc, #204]	; (12a60 <main+0x2348>)
   12992:	2000      	movs	r0, #0
   12994:	4933      	ldr	r1, [pc, #204]	; (12a64 <main+0x234c>)
   12996:	47a0      	blx	r4
   12998:	0003      	movs	r3, r0
   1299a:	000c      	movs	r4, r1
   1299c:	001d      	movs	r5, r3
   1299e:	0026      	movs	r6, r4
   129a0:	4b2b      	ldr	r3, [pc, #172]	; (12a50 <main+0x2338>)
   129a2:	681a      	ldr	r2, [r3, #0]
   129a4:	4b2d      	ldr	r3, [pc, #180]	; (12a5c <main+0x2344>)
   129a6:	1c10      	adds	r0, r2, #0
   129a8:	4798      	blx	r3
   129aa:	0002      	movs	r2, r0
   129ac:	000b      	movs	r3, r1
   129ae:	4c2e      	ldr	r4, [pc, #184]	; (12a68 <main+0x2350>)
   129b0:	0028      	movs	r0, r5
   129b2:	0031      	movs	r1, r6
   129b4:	47a0      	blx	r4
   129b6:	0003      	movs	r3, r0
   129b8:	000c      	movs	r4, r1
   129ba:	0019      	movs	r1, r3
   129bc:	0022      	movs	r2, r4
   129be:	4b2b      	ldr	r3, [pc, #172]	; (12a6c <main+0x2354>)
   129c0:	0008      	movs	r0, r1
   129c2:	0011      	movs	r1, r2
   129c4:	4798      	blx	r3
   129c6:	0002      	movs	r2, r0
   129c8:	4b2c      	ldr	r3, [pc, #176]	; (12a7c <main+0x2364>)
   129ca:	492a      	ldr	r1, [pc, #168]	; (12a74 <main+0x235c>)
   129cc:	0010      	movs	r0, r2
   129ce:	4798      	blx	r3
   129d0:	0003      	movs	r3, r0
   129d2:	b2da      	uxtb	r2, r3
   129d4:	4b2a      	ldr	r3, [pc, #168]	; (12a80 <main+0x2368>)
   129d6:	701a      	strb	r2, [r3, #0]
					}
						
					upColor = cycle_index * output_brightness;
   129d8:	4b27      	ldr	r3, [pc, #156]	; (12a78 <main+0x2360>)
   129da:	681a      	ldr	r2, [r3, #0]
   129dc:	4b2b      	ldr	r3, [pc, #172]	; (12a8c <main+0x2374>)
   129de:	0010      	movs	r0, r2
   129e0:	4798      	blx	r3
   129e2:	4b2b      	ldr	r3, [pc, #172]	; (12a90 <main+0x2378>)
   129e4:	681a      	ldr	r2, [r3, #0]
   129e6:	4b2b      	ldr	r3, [pc, #172]	; (12a94 <main+0x237c>)
   129e8:	1c11      	adds	r1, r2, #0
   129ea:	4798      	blx	r3
   129ec:	1c03      	adds	r3, r0, #0
   129ee:	1c1a      	adds	r2, r3, #0
   129f0:	4b29      	ldr	r3, [pc, #164]	; (12a98 <main+0x2380>)
   129f2:	1c10      	adds	r0, r2, #0
   129f4:	4798      	blx	r3
   129f6:	0003      	movs	r3, r0
   129f8:	b29a      	uxth	r2, r3
   129fa:	4b28      	ldr	r3, [pc, #160]	; (12a9c <main+0x2384>)
   129fc:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   129fe:	4b1e      	ldr	r3, [pc, #120]	; (12a78 <main+0x2360>)
   12a00:	681b      	ldr	r3, [r3, #0]
   12a02:	4a1c      	ldr	r2, [pc, #112]	; (12a74 <main+0x235c>)
   12a04:	1ad2      	subs	r2, r2, r3
   12a06:	4b21      	ldr	r3, [pc, #132]	; (12a8c <main+0x2374>)
   12a08:	0010      	movs	r0, r2
   12a0a:	4798      	blx	r3
   12a0c:	4b20      	ldr	r3, [pc, #128]	; (12a90 <main+0x2378>)
   12a0e:	681a      	ldr	r2, [r3, #0]
   12a10:	4b20      	ldr	r3, [pc, #128]	; (12a94 <main+0x237c>)
   12a12:	1c11      	adds	r1, r2, #0
   12a14:	4798      	blx	r3
   12a16:	1c03      	adds	r3, r0, #0
   12a18:	1c1a      	adds	r2, r3, #0
   12a1a:	4b1f      	ldr	r3, [pc, #124]	; (12a98 <main+0x2380>)
   12a1c:	1c10      	adds	r0, r2, #0
   12a1e:	4798      	blx	r3
   12a20:	0003      	movs	r3, r0
   12a22:	b29a      	uxth	r2, r3
   12a24:	4b1e      	ldr	r3, [pc, #120]	; (12aa0 <main+0x2388>)
   12a26:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12a28:	4b1c      	ldr	r3, [pc, #112]	; (12a9c <main+0x2384>)
   12a2a:	8819      	ldrh	r1, [r3, #0]
   12a2c:	4b1c      	ldr	r3, [pc, #112]	; (12aa0 <main+0x2388>)
   12a2e:	881a      	ldrh	r2, [r3, #0]
   12a30:	4b13      	ldr	r3, [pc, #76]	; (12a80 <main+0x2368>)
   12a32:	781b      	ldrb	r3, [r3, #0]
   12a34:	4d1b      	ldr	r5, [pc, #108]	; (12aa4 <main+0x238c>)
   12a36:	0038      	movs	r0, r7
   12a38:	4c1b      	ldr	r4, [pc, #108]	; (12aa8 <main+0x2390>)
   12a3a:	47a0      	blx	r4
   12a3c:	003b      	movs	r3, r7
   12a3e:	0028      	movs	r0, r5
   12a40:	0019      	movs	r1, r3
   12a42:	230c      	movs	r3, #12
   12a44:	001a      	movs	r2, r3
   12a46:	4b19      	ldr	r3, [pc, #100]	; (12aac <main+0x2394>)
   12a48:	4798      	blx	r3
					break;
   12a4a:	f000 fe57 	bl	136fc <main+0x2fe4>
   12a4e:	46c0      	nop			; (mov r8, r8)
   12a50:	200003e4 	.word	0x200003e4
   12a54:	00014395 	.word	0x00014395
   12a58:	200000dc 	.word	0x200000dc
   12a5c:	00016d9d 	.word	0x00016d9d
   12a60:	000158ad 	.word	0x000158ad
   12a64:	4107ffe8 	.word	0x4107ffe8
   12a68:	00016115 	.word	0x00016115
   12a6c:	00016c41 	.word	0x00016c41
   12a70:	000142e9 	.word	0x000142e9
   12a74:	0000ffff 	.word	0x0000ffff
   12a78:	20000328 	.word	0x20000328
   12a7c:	0001411d 	.word	0x0001411d
   12a80:	20000326 	.word	0x20000326
   12a84:	000143d1 	.word	0x000143d1
   12a88:	200000e0 	.word	0x200000e0
   12a8c:	00015201 	.word	0x00015201
   12a90:	200003ec 	.word	0x200003ec
   12a94:	00014ba9 	.word	0x00014ba9
   12a98:	00014439 	.word	0x00014439
   12a9c:	2000032c 	.word	0x2000032c
   12aa0:	2000032e 	.word	0x2000032e
   12aa4:	20000314 	.word	0x20000314
   12aa8:	0000b385 	.word	0x0000b385
   12aac:	00016fe5 	.word	0x00016fe5
				}
				case COLOR_ROLL_RATE:
				{
					if(gyKalman < 0)
   12ab0:	4b7b      	ldr	r3, [pc, #492]	; (12ca0 <main+0x2588>)
   12ab2:	681a      	ldr	r2, [r3, #0]
   12ab4:	4b7b      	ldr	r3, [pc, #492]	; (12ca4 <main+0x258c>)
   12ab6:	2100      	movs	r1, #0
   12ab8:	1c10      	adds	r0, r2, #0
   12aba:	4798      	blx	r3
   12abc:	1e03      	subs	r3, r0, #0
   12abe:	d02a      	beq.n	12b16 <main+0x23fe>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) % 0x0FFFF;
   12ac0:	4b79      	ldr	r3, [pc, #484]	; (12ca8 <main+0x2590>)
   12ac2:	681a      	ldr	r2, [r3, #0]
   12ac4:	4b79      	ldr	r3, [pc, #484]	; (12cac <main+0x2594>)
   12ac6:	1c10      	adds	r0, r2, #0
   12ac8:	4798      	blx	r3
   12aca:	0002      	movs	r2, r0
   12acc:	000b      	movs	r3, r1
   12ace:	4c78      	ldr	r4, [pc, #480]	; (12cb0 <main+0x2598>)
   12ad0:	2000      	movs	r0, #0
   12ad2:	4978      	ldr	r1, [pc, #480]	; (12cb4 <main+0x259c>)
   12ad4:	47a0      	blx	r4
   12ad6:	0003      	movs	r3, r0
   12ad8:	000c      	movs	r4, r1
   12ada:	001d      	movs	r5, r3
   12adc:	0026      	movs	r6, r4
   12ade:	4b70      	ldr	r3, [pc, #448]	; (12ca0 <main+0x2588>)
   12ae0:	681a      	ldr	r2, [r3, #0]
   12ae2:	4b72      	ldr	r3, [pc, #456]	; (12cac <main+0x2594>)
   12ae4:	1c10      	adds	r0, r2, #0
   12ae6:	4798      	blx	r3
   12ae8:	0002      	movs	r2, r0
   12aea:	000b      	movs	r3, r1
   12aec:	4c72      	ldr	r4, [pc, #456]	; (12cb8 <main+0x25a0>)
   12aee:	0028      	movs	r0, r5
   12af0:	0031      	movs	r1, r6
   12af2:	47a0      	blx	r4
   12af4:	0003      	movs	r3, r0
   12af6:	000c      	movs	r4, r1
   12af8:	0019      	movs	r1, r3
   12afa:	0022      	movs	r2, r4
   12afc:	4b6f      	ldr	r3, [pc, #444]	; (12cbc <main+0x25a4>)
   12afe:	0008      	movs	r0, r1
   12b00:	0011      	movs	r1, r2
   12b02:	4798      	blx	r3
   12b04:	0002      	movs	r2, r0
   12b06:	4b6e      	ldr	r3, [pc, #440]	; (12cc0 <main+0x25a8>)
   12b08:	496e      	ldr	r1, [pc, #440]	; (12cc4 <main+0x25ac>)
   12b0a:	0010      	movs	r0, r2
   12b0c:	4798      	blx	r3
   12b0e:	000b      	movs	r3, r1
   12b10:	001a      	movs	r2, r3
   12b12:	4b6d      	ldr	r3, [pc, #436]	; (12cc8 <main+0x25b0>)
   12b14:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) / 0x0FFFF;
   12b16:	4b64      	ldr	r3, [pc, #400]	; (12ca8 <main+0x2590>)
   12b18:	681a      	ldr	r2, [r3, #0]
   12b1a:	4b64      	ldr	r3, [pc, #400]	; (12cac <main+0x2594>)
   12b1c:	1c10      	adds	r0, r2, #0
   12b1e:	4798      	blx	r3
   12b20:	0002      	movs	r2, r0
   12b22:	000b      	movs	r3, r1
   12b24:	4c62      	ldr	r4, [pc, #392]	; (12cb0 <main+0x2598>)
   12b26:	2000      	movs	r0, #0
   12b28:	4962      	ldr	r1, [pc, #392]	; (12cb4 <main+0x259c>)
   12b2a:	47a0      	blx	r4
   12b2c:	0003      	movs	r3, r0
   12b2e:	000c      	movs	r4, r1
   12b30:	001d      	movs	r5, r3
   12b32:	0026      	movs	r6, r4
   12b34:	4b5a      	ldr	r3, [pc, #360]	; (12ca0 <main+0x2588>)
   12b36:	681a      	ldr	r2, [r3, #0]
   12b38:	4b5c      	ldr	r3, [pc, #368]	; (12cac <main+0x2594>)
   12b3a:	1c10      	adds	r0, r2, #0
   12b3c:	4798      	blx	r3
   12b3e:	0002      	movs	r2, r0
   12b40:	000b      	movs	r3, r1
   12b42:	4c5d      	ldr	r4, [pc, #372]	; (12cb8 <main+0x25a0>)
   12b44:	0028      	movs	r0, r5
   12b46:	0031      	movs	r1, r6
   12b48:	47a0      	blx	r4
   12b4a:	0003      	movs	r3, r0
   12b4c:	000c      	movs	r4, r1
   12b4e:	0019      	movs	r1, r3
   12b50:	0022      	movs	r2, r4
   12b52:	4b5a      	ldr	r3, [pc, #360]	; (12cbc <main+0x25a4>)
   12b54:	0008      	movs	r0, r1
   12b56:	0011      	movs	r1, r2
   12b58:	4798      	blx	r3
   12b5a:	0002      	movs	r2, r0
   12b5c:	4b5b      	ldr	r3, [pc, #364]	; (12ccc <main+0x25b4>)
   12b5e:	4959      	ldr	r1, [pc, #356]	; (12cc4 <main+0x25ac>)
   12b60:	0010      	movs	r0, r2
   12b62:	4798      	blx	r3
   12b64:	0003      	movs	r3, r0
   12b66:	b2da      	uxtb	r2, r3
   12b68:	4b59      	ldr	r3, [pc, #356]	; (12cd0 <main+0x25b8>)
   12b6a:	701a      	strb	r2, [r3, #0]
					if(gyKalman >= 0){
   12b6c:	4b4c      	ldr	r3, [pc, #304]	; (12ca0 <main+0x2588>)
   12b6e:	681a      	ldr	r2, [r3, #0]
   12b70:	4b58      	ldr	r3, [pc, #352]	; (12cd4 <main+0x25bc>)
   12b72:	2100      	movs	r1, #0
   12b74:	1c10      	adds	r0, r2, #0
   12b76:	4798      	blx	r3
   12b78:	1e03      	subs	r3, r0, #0
   12b7a:	d055      	beq.n	12c28 <main+0x2510>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) % 0x0FFFF;
   12b7c:	4b56      	ldr	r3, [pc, #344]	; (12cd8 <main+0x25c0>)
   12b7e:	681a      	ldr	r2, [r3, #0]
   12b80:	4b4a      	ldr	r3, [pc, #296]	; (12cac <main+0x2594>)
   12b82:	1c10      	adds	r0, r2, #0
   12b84:	4798      	blx	r3
   12b86:	0002      	movs	r2, r0
   12b88:	000b      	movs	r3, r1
   12b8a:	4c49      	ldr	r4, [pc, #292]	; (12cb0 <main+0x2598>)
   12b8c:	2000      	movs	r0, #0
   12b8e:	4949      	ldr	r1, [pc, #292]	; (12cb4 <main+0x259c>)
   12b90:	47a0      	blx	r4
   12b92:	0003      	movs	r3, r0
   12b94:	000c      	movs	r4, r1
   12b96:	001d      	movs	r5, r3
   12b98:	0026      	movs	r6, r4
   12b9a:	4b41      	ldr	r3, [pc, #260]	; (12ca0 <main+0x2588>)
   12b9c:	681a      	ldr	r2, [r3, #0]
   12b9e:	4b43      	ldr	r3, [pc, #268]	; (12cac <main+0x2594>)
   12ba0:	1c10      	adds	r0, r2, #0
   12ba2:	4798      	blx	r3
   12ba4:	0002      	movs	r2, r0
   12ba6:	000b      	movs	r3, r1
   12ba8:	4c43      	ldr	r4, [pc, #268]	; (12cb8 <main+0x25a0>)
   12baa:	0028      	movs	r0, r5
   12bac:	0031      	movs	r1, r6
   12bae:	47a0      	blx	r4
   12bb0:	0003      	movs	r3, r0
   12bb2:	000c      	movs	r4, r1
   12bb4:	0019      	movs	r1, r3
   12bb6:	0022      	movs	r2, r4
   12bb8:	4b40      	ldr	r3, [pc, #256]	; (12cbc <main+0x25a4>)
   12bba:	0008      	movs	r0, r1
   12bbc:	0011      	movs	r1, r2
   12bbe:	4798      	blx	r3
   12bc0:	0002      	movs	r2, r0
   12bc2:	4b3f      	ldr	r3, [pc, #252]	; (12cc0 <main+0x25a8>)
   12bc4:	493f      	ldr	r1, [pc, #252]	; (12cc4 <main+0x25ac>)
   12bc6:	0010      	movs	r0, r2
   12bc8:	4798      	blx	r3
   12bca:	000b      	movs	r3, r1
   12bcc:	001a      	movs	r2, r3
   12bce:	4b3e      	ldr	r3, [pc, #248]	; (12cc8 <main+0x25b0>)
   12bd0:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) / 0x0FFFF;
   12bd2:	4b41      	ldr	r3, [pc, #260]	; (12cd8 <main+0x25c0>)
   12bd4:	681a      	ldr	r2, [r3, #0]
   12bd6:	4b35      	ldr	r3, [pc, #212]	; (12cac <main+0x2594>)
   12bd8:	1c10      	adds	r0, r2, #0
   12bda:	4798      	blx	r3
   12bdc:	0002      	movs	r2, r0
   12bde:	000b      	movs	r3, r1
   12be0:	4c33      	ldr	r4, [pc, #204]	; (12cb0 <main+0x2598>)
   12be2:	2000      	movs	r0, #0
   12be4:	4933      	ldr	r1, [pc, #204]	; (12cb4 <main+0x259c>)
   12be6:	47a0      	blx	r4
   12be8:	0003      	movs	r3, r0
   12bea:	000c      	movs	r4, r1
   12bec:	001d      	movs	r5, r3
   12bee:	0026      	movs	r6, r4
   12bf0:	4b2b      	ldr	r3, [pc, #172]	; (12ca0 <main+0x2588>)
   12bf2:	681a      	ldr	r2, [r3, #0]
   12bf4:	4b2d      	ldr	r3, [pc, #180]	; (12cac <main+0x2594>)
   12bf6:	1c10      	adds	r0, r2, #0
   12bf8:	4798      	blx	r3
   12bfa:	0002      	movs	r2, r0
   12bfc:	000b      	movs	r3, r1
   12bfe:	4c2e      	ldr	r4, [pc, #184]	; (12cb8 <main+0x25a0>)
   12c00:	0028      	movs	r0, r5
   12c02:	0031      	movs	r1, r6
   12c04:	47a0      	blx	r4
   12c06:	0003      	movs	r3, r0
   12c08:	000c      	movs	r4, r1
   12c0a:	0019      	movs	r1, r3
   12c0c:	0022      	movs	r2, r4
   12c0e:	4b2b      	ldr	r3, [pc, #172]	; (12cbc <main+0x25a4>)
   12c10:	0008      	movs	r0, r1
   12c12:	0011      	movs	r1, r2
   12c14:	4798      	blx	r3
   12c16:	0002      	movs	r2, r0
   12c18:	4b2c      	ldr	r3, [pc, #176]	; (12ccc <main+0x25b4>)
   12c1a:	492a      	ldr	r1, [pc, #168]	; (12cc4 <main+0x25ac>)
   12c1c:	0010      	movs	r0, r2
   12c1e:	4798      	blx	r3
   12c20:	0003      	movs	r3, r0
   12c22:	b2da      	uxtb	r2, r3
   12c24:	4b2a      	ldr	r3, [pc, #168]	; (12cd0 <main+0x25b8>)
   12c26:	701a      	strb	r2, [r3, #0]
					}
				
					upColor = cycle_index * output_brightness;
   12c28:	4b27      	ldr	r3, [pc, #156]	; (12cc8 <main+0x25b0>)
   12c2a:	681a      	ldr	r2, [r3, #0]
   12c2c:	4b2b      	ldr	r3, [pc, #172]	; (12cdc <main+0x25c4>)
   12c2e:	0010      	movs	r0, r2
   12c30:	4798      	blx	r3
   12c32:	4b2b      	ldr	r3, [pc, #172]	; (12ce0 <main+0x25c8>)
   12c34:	681a      	ldr	r2, [r3, #0]
   12c36:	4b2b      	ldr	r3, [pc, #172]	; (12ce4 <main+0x25cc>)
   12c38:	1c11      	adds	r1, r2, #0
   12c3a:	4798      	blx	r3
   12c3c:	1c03      	adds	r3, r0, #0
   12c3e:	1c1a      	adds	r2, r3, #0
   12c40:	4b29      	ldr	r3, [pc, #164]	; (12ce8 <main+0x25d0>)
   12c42:	1c10      	adds	r0, r2, #0
   12c44:	4798      	blx	r3
   12c46:	0003      	movs	r3, r0
   12c48:	b29a      	uxth	r2, r3
   12c4a:	4b28      	ldr	r3, [pc, #160]	; (12cec <main+0x25d4>)
   12c4c:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12c4e:	4b1e      	ldr	r3, [pc, #120]	; (12cc8 <main+0x25b0>)
   12c50:	681b      	ldr	r3, [r3, #0]
   12c52:	4a1c      	ldr	r2, [pc, #112]	; (12cc4 <main+0x25ac>)
   12c54:	1ad2      	subs	r2, r2, r3
   12c56:	4b21      	ldr	r3, [pc, #132]	; (12cdc <main+0x25c4>)
   12c58:	0010      	movs	r0, r2
   12c5a:	4798      	blx	r3
   12c5c:	4b20      	ldr	r3, [pc, #128]	; (12ce0 <main+0x25c8>)
   12c5e:	681a      	ldr	r2, [r3, #0]
   12c60:	4b20      	ldr	r3, [pc, #128]	; (12ce4 <main+0x25cc>)
   12c62:	1c11      	adds	r1, r2, #0
   12c64:	4798      	blx	r3
   12c66:	1c03      	adds	r3, r0, #0
   12c68:	1c1a      	adds	r2, r3, #0
   12c6a:	4b1f      	ldr	r3, [pc, #124]	; (12ce8 <main+0x25d0>)
   12c6c:	1c10      	adds	r0, r2, #0
   12c6e:	4798      	blx	r3
   12c70:	0003      	movs	r3, r0
   12c72:	b29a      	uxth	r2, r3
   12c74:	4b1e      	ldr	r3, [pc, #120]	; (12cf0 <main+0x25d8>)
   12c76:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12c78:	4b1c      	ldr	r3, [pc, #112]	; (12cec <main+0x25d4>)
   12c7a:	8819      	ldrh	r1, [r3, #0]
   12c7c:	4b1c      	ldr	r3, [pc, #112]	; (12cf0 <main+0x25d8>)
   12c7e:	881a      	ldrh	r2, [r3, #0]
   12c80:	4b13      	ldr	r3, [pc, #76]	; (12cd0 <main+0x25b8>)
   12c82:	781b      	ldrb	r3, [r3, #0]
   12c84:	4d1b      	ldr	r5, [pc, #108]	; (12cf4 <main+0x25dc>)
   12c86:	0038      	movs	r0, r7
   12c88:	4c1b      	ldr	r4, [pc, #108]	; (12cf8 <main+0x25e0>)
   12c8a:	47a0      	blx	r4
   12c8c:	003b      	movs	r3, r7
   12c8e:	0028      	movs	r0, r5
   12c90:	0019      	movs	r1, r3
   12c92:	230c      	movs	r3, #12
   12c94:	001a      	movs	r2, r3
   12c96:	4b19      	ldr	r3, [pc, #100]	; (12cfc <main+0x25e4>)
   12c98:	4798      	blx	r3
					break;
   12c9a:	f000 fd2f 	bl	136fc <main+0x2fe4>
   12c9e:	46c0      	nop			; (mov r8, r8)
   12ca0:	200003e0 	.word	0x200003e0
   12ca4:	00014395 	.word	0x00014395
   12ca8:	200000d4 	.word	0x200000d4
   12cac:	00016d9d 	.word	0x00016d9d
   12cb0:	000158ad 	.word	0x000158ad
   12cb4:	4107ffe8 	.word	0x4107ffe8
   12cb8:	00016115 	.word	0x00016115
   12cbc:	00016c41 	.word	0x00016c41
   12cc0:	000142e9 	.word	0x000142e9
   12cc4:	0000ffff 	.word	0x0000ffff
   12cc8:	20000328 	.word	0x20000328
   12ccc:	0001411d 	.word	0x0001411d
   12cd0:	20000326 	.word	0x20000326
   12cd4:	000143d1 	.word	0x000143d1
   12cd8:	200000d8 	.word	0x200000d8
   12cdc:	00015201 	.word	0x00015201
   12ce0:	200003ec 	.word	0x200003ec
   12ce4:	00014ba9 	.word	0x00014ba9
   12ce8:	00014439 	.word	0x00014439
   12cec:	2000032c 	.word	0x2000032c
   12cf0:	2000032e 	.word	0x2000032e
   12cf4:	20000314 	.word	0x20000314
   12cf8:	0000b385 	.word	0x0000b385
   12cfc:	00016fe5 	.word	0x00016fe5
				}
				case COLOR_PITCH_RATE:
				{
					if(gxKalman < 0)
   12d00:	4bec      	ldr	r3, [pc, #944]	; (130b4 <main+0x299c>)
   12d02:	681a      	ldr	r2, [r3, #0]
   12d04:	4bec      	ldr	r3, [pc, #944]	; (130b8 <main+0x29a0>)
   12d06:	2100      	movs	r1, #0
   12d08:	1c10      	adds	r0, r2, #0
   12d0a:	4798      	blx	r3
   12d0c:	1e03      	subs	r3, r0, #0
   12d0e:	d02a      	beq.n	12d66 <main+0x264e>
					cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) % 0x0FFFF;
   12d10:	4bea      	ldr	r3, [pc, #936]	; (130bc <main+0x29a4>)
   12d12:	681a      	ldr	r2, [r3, #0]
   12d14:	4bea      	ldr	r3, [pc, #936]	; (130c0 <main+0x29a8>)
   12d16:	1c10      	adds	r0, r2, #0
   12d18:	4798      	blx	r3
   12d1a:	0002      	movs	r2, r0
   12d1c:	000b      	movs	r3, r1
   12d1e:	4ce9      	ldr	r4, [pc, #932]	; (130c4 <main+0x29ac>)
   12d20:	2000      	movs	r0, #0
   12d22:	49e9      	ldr	r1, [pc, #932]	; (130c8 <main+0x29b0>)
   12d24:	47a0      	blx	r4
   12d26:	0003      	movs	r3, r0
   12d28:	000c      	movs	r4, r1
   12d2a:	001d      	movs	r5, r3
   12d2c:	0026      	movs	r6, r4
   12d2e:	4be1      	ldr	r3, [pc, #900]	; (130b4 <main+0x299c>)
   12d30:	681a      	ldr	r2, [r3, #0]
   12d32:	4be3      	ldr	r3, [pc, #908]	; (130c0 <main+0x29a8>)
   12d34:	1c10      	adds	r0, r2, #0
   12d36:	4798      	blx	r3
   12d38:	0002      	movs	r2, r0
   12d3a:	000b      	movs	r3, r1
   12d3c:	4ce3      	ldr	r4, [pc, #908]	; (130cc <main+0x29b4>)
   12d3e:	0028      	movs	r0, r5
   12d40:	0031      	movs	r1, r6
   12d42:	47a0      	blx	r4
   12d44:	0003      	movs	r3, r0
   12d46:	000c      	movs	r4, r1
   12d48:	0019      	movs	r1, r3
   12d4a:	0022      	movs	r2, r4
   12d4c:	4be0      	ldr	r3, [pc, #896]	; (130d0 <main+0x29b8>)
   12d4e:	0008      	movs	r0, r1
   12d50:	0011      	movs	r1, r2
   12d52:	4798      	blx	r3
   12d54:	0002      	movs	r2, r0
   12d56:	4bdf      	ldr	r3, [pc, #892]	; (130d4 <main+0x29bc>)
   12d58:	49df      	ldr	r1, [pc, #892]	; (130d8 <main+0x29c0>)
   12d5a:	0010      	movs	r0, r2
   12d5c:	4798      	blx	r3
   12d5e:	000b      	movs	r3, r1
   12d60:	001a      	movs	r2, r3
   12d62:	4bde      	ldr	r3, [pc, #888]	; (130dc <main+0x29c4>)
   12d64:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) / 0x0FFFF;
   12d66:	4bd5      	ldr	r3, [pc, #852]	; (130bc <main+0x29a4>)
   12d68:	681a      	ldr	r2, [r3, #0]
   12d6a:	4bd5      	ldr	r3, [pc, #852]	; (130c0 <main+0x29a8>)
   12d6c:	1c10      	adds	r0, r2, #0
   12d6e:	4798      	blx	r3
   12d70:	0002      	movs	r2, r0
   12d72:	000b      	movs	r3, r1
   12d74:	4cd3      	ldr	r4, [pc, #844]	; (130c4 <main+0x29ac>)
   12d76:	2000      	movs	r0, #0
   12d78:	49d3      	ldr	r1, [pc, #844]	; (130c8 <main+0x29b0>)
   12d7a:	47a0      	blx	r4
   12d7c:	0003      	movs	r3, r0
   12d7e:	000c      	movs	r4, r1
   12d80:	001d      	movs	r5, r3
   12d82:	0026      	movs	r6, r4
   12d84:	4bcb      	ldr	r3, [pc, #812]	; (130b4 <main+0x299c>)
   12d86:	681a      	ldr	r2, [r3, #0]
   12d88:	4bcd      	ldr	r3, [pc, #820]	; (130c0 <main+0x29a8>)
   12d8a:	1c10      	adds	r0, r2, #0
   12d8c:	4798      	blx	r3
   12d8e:	0002      	movs	r2, r0
   12d90:	000b      	movs	r3, r1
   12d92:	4cce      	ldr	r4, [pc, #824]	; (130cc <main+0x29b4>)
   12d94:	0028      	movs	r0, r5
   12d96:	0031      	movs	r1, r6
   12d98:	47a0      	blx	r4
   12d9a:	0003      	movs	r3, r0
   12d9c:	000c      	movs	r4, r1
   12d9e:	0019      	movs	r1, r3
   12da0:	0022      	movs	r2, r4
   12da2:	4bcb      	ldr	r3, [pc, #812]	; (130d0 <main+0x29b8>)
   12da4:	0008      	movs	r0, r1
   12da6:	0011      	movs	r1, r2
   12da8:	4798      	blx	r3
   12daa:	0002      	movs	r2, r0
   12dac:	4bcc      	ldr	r3, [pc, #816]	; (130e0 <main+0x29c8>)
   12dae:	49ca      	ldr	r1, [pc, #808]	; (130d8 <main+0x29c0>)
   12db0:	0010      	movs	r0, r2
   12db2:	4798      	blx	r3
   12db4:	0003      	movs	r3, r0
   12db6:	b2da      	uxtb	r2, r3
   12db8:	4bca      	ldr	r3, [pc, #808]	; (130e4 <main+0x29cc>)
   12dba:	701a      	strb	r2, [r3, #0]
					if(gxKalman >= 0){
   12dbc:	4bbd      	ldr	r3, [pc, #756]	; (130b4 <main+0x299c>)
   12dbe:	681a      	ldr	r2, [r3, #0]
   12dc0:	4bc9      	ldr	r3, [pc, #804]	; (130e8 <main+0x29d0>)
   12dc2:	2100      	movs	r1, #0
   12dc4:	1c10      	adds	r0, r2, #0
   12dc6:	4798      	blx	r3
   12dc8:	1e03      	subs	r3, r0, #0
   12dca:	d055      	beq.n	12e78 <main+0x2760>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) % 0x0FFFF;
   12dcc:	4bc7      	ldr	r3, [pc, #796]	; (130ec <main+0x29d4>)
   12dce:	681a      	ldr	r2, [r3, #0]
   12dd0:	4bbb      	ldr	r3, [pc, #748]	; (130c0 <main+0x29a8>)
   12dd2:	1c10      	adds	r0, r2, #0
   12dd4:	4798      	blx	r3
   12dd6:	0002      	movs	r2, r0
   12dd8:	000b      	movs	r3, r1
   12dda:	4cba      	ldr	r4, [pc, #744]	; (130c4 <main+0x29ac>)
   12ddc:	2000      	movs	r0, #0
   12dde:	49ba      	ldr	r1, [pc, #744]	; (130c8 <main+0x29b0>)
   12de0:	47a0      	blx	r4
   12de2:	0003      	movs	r3, r0
   12de4:	000c      	movs	r4, r1
   12de6:	001d      	movs	r5, r3
   12de8:	0026      	movs	r6, r4
   12dea:	4bb2      	ldr	r3, [pc, #712]	; (130b4 <main+0x299c>)
   12dec:	681a      	ldr	r2, [r3, #0]
   12dee:	4bb4      	ldr	r3, [pc, #720]	; (130c0 <main+0x29a8>)
   12df0:	1c10      	adds	r0, r2, #0
   12df2:	4798      	blx	r3
   12df4:	0002      	movs	r2, r0
   12df6:	000b      	movs	r3, r1
   12df8:	4cb4      	ldr	r4, [pc, #720]	; (130cc <main+0x29b4>)
   12dfa:	0028      	movs	r0, r5
   12dfc:	0031      	movs	r1, r6
   12dfe:	47a0      	blx	r4
   12e00:	0003      	movs	r3, r0
   12e02:	000c      	movs	r4, r1
   12e04:	0019      	movs	r1, r3
   12e06:	0022      	movs	r2, r4
   12e08:	4bb1      	ldr	r3, [pc, #708]	; (130d0 <main+0x29b8>)
   12e0a:	0008      	movs	r0, r1
   12e0c:	0011      	movs	r1, r2
   12e0e:	4798      	blx	r3
   12e10:	0002      	movs	r2, r0
   12e12:	4bb0      	ldr	r3, [pc, #704]	; (130d4 <main+0x29bc>)
   12e14:	49b0      	ldr	r1, [pc, #704]	; (130d8 <main+0x29c0>)
   12e16:	0010      	movs	r0, r2
   12e18:	4798      	blx	r3
   12e1a:	000b      	movs	r3, r1
   12e1c:	001a      	movs	r2, r3
   12e1e:	4baf      	ldr	r3, [pc, #700]	; (130dc <main+0x29c4>)
   12e20:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) / 0x0FFFF;
   12e22:	4bb2      	ldr	r3, [pc, #712]	; (130ec <main+0x29d4>)
   12e24:	681a      	ldr	r2, [r3, #0]
   12e26:	4ba6      	ldr	r3, [pc, #664]	; (130c0 <main+0x29a8>)
   12e28:	1c10      	adds	r0, r2, #0
   12e2a:	4798      	blx	r3
   12e2c:	0002      	movs	r2, r0
   12e2e:	000b      	movs	r3, r1
   12e30:	4ca4      	ldr	r4, [pc, #656]	; (130c4 <main+0x29ac>)
   12e32:	2000      	movs	r0, #0
   12e34:	49a4      	ldr	r1, [pc, #656]	; (130c8 <main+0x29b0>)
   12e36:	47a0      	blx	r4
   12e38:	0003      	movs	r3, r0
   12e3a:	000c      	movs	r4, r1
   12e3c:	001d      	movs	r5, r3
   12e3e:	0026      	movs	r6, r4
   12e40:	4b9c      	ldr	r3, [pc, #624]	; (130b4 <main+0x299c>)
   12e42:	681a      	ldr	r2, [r3, #0]
   12e44:	4b9e      	ldr	r3, [pc, #632]	; (130c0 <main+0x29a8>)
   12e46:	1c10      	adds	r0, r2, #0
   12e48:	4798      	blx	r3
   12e4a:	0002      	movs	r2, r0
   12e4c:	000b      	movs	r3, r1
   12e4e:	4c9f      	ldr	r4, [pc, #636]	; (130cc <main+0x29b4>)
   12e50:	0028      	movs	r0, r5
   12e52:	0031      	movs	r1, r6
   12e54:	47a0      	blx	r4
   12e56:	0003      	movs	r3, r0
   12e58:	000c      	movs	r4, r1
   12e5a:	0019      	movs	r1, r3
   12e5c:	0022      	movs	r2, r4
   12e5e:	4b9c      	ldr	r3, [pc, #624]	; (130d0 <main+0x29b8>)
   12e60:	0008      	movs	r0, r1
   12e62:	0011      	movs	r1, r2
   12e64:	4798      	blx	r3
   12e66:	0002      	movs	r2, r0
   12e68:	4b9d      	ldr	r3, [pc, #628]	; (130e0 <main+0x29c8>)
   12e6a:	499b      	ldr	r1, [pc, #620]	; (130d8 <main+0x29c0>)
   12e6c:	0010      	movs	r0, r2
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	b2da      	uxtb	r2, r3
   12e74:	4b9b      	ldr	r3, [pc, #620]	; (130e4 <main+0x29cc>)
   12e76:	701a      	strb	r2, [r3, #0]
					}
					
					upColor = cycle_index * output_brightness;
   12e78:	4b98      	ldr	r3, [pc, #608]	; (130dc <main+0x29c4>)
   12e7a:	681a      	ldr	r2, [r3, #0]
   12e7c:	4b9c      	ldr	r3, [pc, #624]	; (130f0 <main+0x29d8>)
   12e7e:	0010      	movs	r0, r2
   12e80:	4798      	blx	r3
   12e82:	4b9c      	ldr	r3, [pc, #624]	; (130f4 <main+0x29dc>)
   12e84:	681a      	ldr	r2, [r3, #0]
   12e86:	4b9c      	ldr	r3, [pc, #624]	; (130f8 <main+0x29e0>)
   12e88:	1c11      	adds	r1, r2, #0
   12e8a:	4798      	blx	r3
   12e8c:	1c03      	adds	r3, r0, #0
   12e8e:	1c1a      	adds	r2, r3, #0
   12e90:	4b9a      	ldr	r3, [pc, #616]	; (130fc <main+0x29e4>)
   12e92:	1c10      	adds	r0, r2, #0
   12e94:	4798      	blx	r3
   12e96:	0003      	movs	r3, r0
   12e98:	b29a      	uxth	r2, r3
   12e9a:	4b99      	ldr	r3, [pc, #612]	; (13100 <main+0x29e8>)
   12e9c:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12e9e:	4b8f      	ldr	r3, [pc, #572]	; (130dc <main+0x29c4>)
   12ea0:	681b      	ldr	r3, [r3, #0]
   12ea2:	4a8d      	ldr	r2, [pc, #564]	; (130d8 <main+0x29c0>)
   12ea4:	1ad2      	subs	r2, r2, r3
   12ea6:	4b92      	ldr	r3, [pc, #584]	; (130f0 <main+0x29d8>)
   12ea8:	0010      	movs	r0, r2
   12eaa:	4798      	blx	r3
   12eac:	4b91      	ldr	r3, [pc, #580]	; (130f4 <main+0x29dc>)
   12eae:	681a      	ldr	r2, [r3, #0]
   12eb0:	4b91      	ldr	r3, [pc, #580]	; (130f8 <main+0x29e0>)
   12eb2:	1c11      	adds	r1, r2, #0
   12eb4:	4798      	blx	r3
   12eb6:	1c03      	adds	r3, r0, #0
   12eb8:	1c1a      	adds	r2, r3, #0
   12eba:	4b90      	ldr	r3, [pc, #576]	; (130fc <main+0x29e4>)
   12ebc:	1c10      	adds	r0, r2, #0
   12ebe:	4798      	blx	r3
   12ec0:	0003      	movs	r3, r0
   12ec2:	b29a      	uxth	r2, r3
   12ec4:	4b8f      	ldr	r3, [pc, #572]	; (13104 <main+0x29ec>)
   12ec6:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12ec8:	4b8d      	ldr	r3, [pc, #564]	; (13100 <main+0x29e8>)
   12eca:	8819      	ldrh	r1, [r3, #0]
   12ecc:	4b8d      	ldr	r3, [pc, #564]	; (13104 <main+0x29ec>)
   12ece:	881a      	ldrh	r2, [r3, #0]
   12ed0:	4b84      	ldr	r3, [pc, #528]	; (130e4 <main+0x29cc>)
   12ed2:	781b      	ldrb	r3, [r3, #0]
   12ed4:	4d8c      	ldr	r5, [pc, #560]	; (13108 <main+0x29f0>)
   12ed6:	0038      	movs	r0, r7
   12ed8:	4c8c      	ldr	r4, [pc, #560]	; (1310c <main+0x29f4>)
   12eda:	47a0      	blx	r4
   12edc:	003b      	movs	r3, r7
   12ede:	0028      	movs	r0, r5
   12ee0:	0019      	movs	r1, r3
   12ee2:	230c      	movs	r3, #12
   12ee4:	001a      	movs	r2, r3
   12ee6:	4b8a      	ldr	r3, [pc, #552]	; (13110 <main+0x29f8>)
   12ee8:	4798      	blx	r3
					break;
   12eea:	f000 fc07 	bl	136fc <main+0x2fe4>
				}
				case COLOR_THROTTLE:
				{
					cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 256.0) * remote_y) % 0x0FFFF;
   12eee:	4b89      	ldr	r3, [pc, #548]	; (13114 <main+0x29fc>)
   12ef0:	781b      	ldrb	r3, [r3, #0]
   12ef2:	001a      	movs	r2, r3
   12ef4:	4b88      	ldr	r3, [pc, #544]	; (13118 <main+0x2a00>)
   12ef6:	0010      	movs	r0, r2
   12ef8:	4798      	blx	r3
   12efa:	4c74      	ldr	r4, [pc, #464]	; (130cc <main+0x29b4>)
   12efc:	2200      	movs	r2, #0
   12efe:	4b87      	ldr	r3, [pc, #540]	; (1311c <main+0x2a04>)
   12f00:	47a0      	blx	r4
   12f02:	0003      	movs	r3, r0
   12f04:	000c      	movs	r4, r1
   12f06:	0019      	movs	r1, r3
   12f08:	0022      	movs	r2, r4
   12f0a:	4b71      	ldr	r3, [pc, #452]	; (130d0 <main+0x29b8>)
   12f0c:	0008      	movs	r0, r1
   12f0e:	0011      	movs	r1, r2
   12f10:	4798      	blx	r3
   12f12:	0002      	movs	r2, r0
   12f14:	4b6f      	ldr	r3, [pc, #444]	; (130d4 <main+0x29bc>)
   12f16:	4970      	ldr	r1, [pc, #448]	; (130d8 <main+0x29c0>)
   12f18:	0010      	movs	r0, r2
   12f1a:	4798      	blx	r3
   12f1c:	000b      	movs	r3, r1
   12f1e:	001a      	movs	r2, r3
   12f20:	4b6e      	ldr	r3, [pc, #440]	; (130dc <main+0x29c4>)
   12f22:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 3.0) / 256.0) * remote_y) / 0x0FFFF;
   12f24:	4b7b      	ldr	r3, [pc, #492]	; (13114 <main+0x29fc>)
   12f26:	781b      	ldrb	r3, [r3, #0]
   12f28:	001a      	movs	r2, r3
   12f2a:	4b7b      	ldr	r3, [pc, #492]	; (13118 <main+0x2a00>)
   12f2c:	0010      	movs	r0, r2
   12f2e:	4798      	blx	r3
   12f30:	4c66      	ldr	r4, [pc, #408]	; (130cc <main+0x29b4>)
   12f32:	2200      	movs	r2, #0
   12f34:	4b79      	ldr	r3, [pc, #484]	; (1311c <main+0x2a04>)
   12f36:	47a0      	blx	r4
   12f38:	0003      	movs	r3, r0
   12f3a:	000c      	movs	r4, r1
   12f3c:	0019      	movs	r1, r3
   12f3e:	0022      	movs	r2, r4
   12f40:	4b63      	ldr	r3, [pc, #396]	; (130d0 <main+0x29b8>)
   12f42:	0008      	movs	r0, r1
   12f44:	0011      	movs	r1, r2
   12f46:	4798      	blx	r3
   12f48:	0002      	movs	r2, r0
   12f4a:	4b65      	ldr	r3, [pc, #404]	; (130e0 <main+0x29c8>)
   12f4c:	4962      	ldr	r1, [pc, #392]	; (130d8 <main+0x29c0>)
   12f4e:	0010      	movs	r0, r2
   12f50:	4798      	blx	r3
   12f52:	0003      	movs	r3, r0
   12f54:	b2da      	uxtb	r2, r3
   12f56:	4b63      	ldr	r3, [pc, #396]	; (130e4 <main+0x29cc>)
   12f58:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   12f5a:	4b60      	ldr	r3, [pc, #384]	; (130dc <main+0x29c4>)
   12f5c:	681a      	ldr	r2, [r3, #0]
   12f5e:	4b64      	ldr	r3, [pc, #400]	; (130f0 <main+0x29d8>)
   12f60:	0010      	movs	r0, r2
   12f62:	4798      	blx	r3
   12f64:	4b63      	ldr	r3, [pc, #396]	; (130f4 <main+0x29dc>)
   12f66:	681a      	ldr	r2, [r3, #0]
   12f68:	4b63      	ldr	r3, [pc, #396]	; (130f8 <main+0x29e0>)
   12f6a:	1c11      	adds	r1, r2, #0
   12f6c:	4798      	blx	r3
   12f6e:	1c03      	adds	r3, r0, #0
   12f70:	1c1a      	adds	r2, r3, #0
   12f72:	4b62      	ldr	r3, [pc, #392]	; (130fc <main+0x29e4>)
   12f74:	1c10      	adds	r0, r2, #0
   12f76:	4798      	blx	r3
   12f78:	0003      	movs	r3, r0
   12f7a:	b29a      	uxth	r2, r3
   12f7c:	4b60      	ldr	r3, [pc, #384]	; (13100 <main+0x29e8>)
   12f7e:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12f80:	4b56      	ldr	r3, [pc, #344]	; (130dc <main+0x29c4>)
   12f82:	681b      	ldr	r3, [r3, #0]
   12f84:	4a54      	ldr	r2, [pc, #336]	; (130d8 <main+0x29c0>)
   12f86:	1ad2      	subs	r2, r2, r3
   12f88:	4b59      	ldr	r3, [pc, #356]	; (130f0 <main+0x29d8>)
   12f8a:	0010      	movs	r0, r2
   12f8c:	4798      	blx	r3
   12f8e:	4b59      	ldr	r3, [pc, #356]	; (130f4 <main+0x29dc>)
   12f90:	681a      	ldr	r2, [r3, #0]
   12f92:	4b59      	ldr	r3, [pc, #356]	; (130f8 <main+0x29e0>)
   12f94:	1c11      	adds	r1, r2, #0
   12f96:	4798      	blx	r3
   12f98:	1c03      	adds	r3, r0, #0
   12f9a:	1c1a      	adds	r2, r3, #0
   12f9c:	4b57      	ldr	r3, [pc, #348]	; (130fc <main+0x29e4>)
   12f9e:	1c10      	adds	r0, r2, #0
   12fa0:	4798      	blx	r3
   12fa2:	0003      	movs	r3, r0
   12fa4:	b29a      	uxth	r2, r3
   12fa6:	4b57      	ldr	r3, [pc, #348]	; (13104 <main+0x29ec>)
   12fa8:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12faa:	4b55      	ldr	r3, [pc, #340]	; (13100 <main+0x29e8>)
   12fac:	8819      	ldrh	r1, [r3, #0]
   12fae:	4b55      	ldr	r3, [pc, #340]	; (13104 <main+0x29ec>)
   12fb0:	881a      	ldrh	r2, [r3, #0]
   12fb2:	4b4c      	ldr	r3, [pc, #304]	; (130e4 <main+0x29cc>)
   12fb4:	781b      	ldrb	r3, [r3, #0]
   12fb6:	4d54      	ldr	r5, [pc, #336]	; (13108 <main+0x29f0>)
   12fb8:	0038      	movs	r0, r7
   12fba:	4c54      	ldr	r4, [pc, #336]	; (1310c <main+0x29f4>)
   12fbc:	47a0      	blx	r4
   12fbe:	003b      	movs	r3, r7
   12fc0:	0028      	movs	r0, r5
   12fc2:	0019      	movs	r1, r3
   12fc4:	230c      	movs	r3, #12
   12fc6:	001a      	movs	r2, r3
   12fc8:	4b51      	ldr	r3, [pc, #324]	; (13110 <main+0x29f8>)
   12fca:	4798      	blx	r3

					break;
   12fcc:	e396      	b.n	136fc <main+0x2fe4>
				}
				case COLOR_RPM:	
				{				
					if(latest_vesc_vals.rpm != 0){
   12fce:	4b54      	ldr	r3, [pc, #336]	; (13120 <main+0x2a08>)
   12fd0:	691b      	ldr	r3, [r3, #16]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d100      	bne.n	12fd8 <main+0x28c0>
   12fd6:	e0a9      	b.n	1312c <main+0x2a14>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) % 0x0FFFF;
   12fd8:	4b52      	ldr	r3, [pc, #328]	; (13124 <main+0x2a0c>)
   12fda:	699a      	ldr	r2, [r3, #24]
   12fdc:	4b52      	ldr	r3, [pc, #328]	; (13128 <main+0x2a10>)
   12fde:	0010      	movs	r0, r2
   12fe0:	4798      	blx	r3
   12fe2:	1c02      	adds	r2, r0, #0
   12fe4:	4b36      	ldr	r3, [pc, #216]	; (130c0 <main+0x29a8>)
   12fe6:	1c10      	adds	r0, r2, #0
   12fe8:	4798      	blx	r3
   12fea:	0002      	movs	r2, r0
   12fec:	000b      	movs	r3, r1
   12fee:	4c35      	ldr	r4, [pc, #212]	; (130c4 <main+0x29ac>)
   12ff0:	2000      	movs	r0, #0
   12ff2:	4935      	ldr	r1, [pc, #212]	; (130c8 <main+0x29b0>)
   12ff4:	47a0      	blx	r4
   12ff6:	0003      	movs	r3, r0
   12ff8:	000c      	movs	r4, r1
   12ffa:	001d      	movs	r5, r3
   12ffc:	0026      	movs	r6, r4
   12ffe:	4b48      	ldr	r3, [pc, #288]	; (13120 <main+0x2a08>)
   13000:	691b      	ldr	r3, [r3, #16]
   13002:	17d9      	asrs	r1, r3, #31
   13004:	185a      	adds	r2, r3, r1
   13006:	404a      	eors	r2, r1
   13008:	4b47      	ldr	r3, [pc, #284]	; (13128 <main+0x2a10>)
   1300a:	0010      	movs	r0, r2
   1300c:	4798      	blx	r3
   1300e:	1c02      	adds	r2, r0, #0
   13010:	4b2b      	ldr	r3, [pc, #172]	; (130c0 <main+0x29a8>)
   13012:	1c10      	adds	r0, r2, #0
   13014:	4798      	blx	r3
   13016:	0002      	movs	r2, r0
   13018:	000b      	movs	r3, r1
   1301a:	4c2c      	ldr	r4, [pc, #176]	; (130cc <main+0x29b4>)
   1301c:	0028      	movs	r0, r5
   1301e:	0031      	movs	r1, r6
   13020:	47a0      	blx	r4
   13022:	0003      	movs	r3, r0
   13024:	000c      	movs	r4, r1
   13026:	0019      	movs	r1, r3
   13028:	0022      	movs	r2, r4
   1302a:	4b29      	ldr	r3, [pc, #164]	; (130d0 <main+0x29b8>)
   1302c:	0008      	movs	r0, r1
   1302e:	0011      	movs	r1, r2
   13030:	4798      	blx	r3
   13032:	0002      	movs	r2, r0
   13034:	4b27      	ldr	r3, [pc, #156]	; (130d4 <main+0x29bc>)
   13036:	4928      	ldr	r1, [pc, #160]	; (130d8 <main+0x29c0>)
   13038:	0010      	movs	r0, r2
   1303a:	4798      	blx	r3
   1303c:	000b      	movs	r3, r1
   1303e:	001a      	movs	r2, r3
   13040:	4b26      	ldr	r3, [pc, #152]	; (130dc <main+0x29c4>)
   13042:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) / 0x0FFFF;
   13044:	4b37      	ldr	r3, [pc, #220]	; (13124 <main+0x2a0c>)
   13046:	699a      	ldr	r2, [r3, #24]
   13048:	4b37      	ldr	r3, [pc, #220]	; (13128 <main+0x2a10>)
   1304a:	0010      	movs	r0, r2
   1304c:	4798      	blx	r3
   1304e:	1c02      	adds	r2, r0, #0
   13050:	4b1b      	ldr	r3, [pc, #108]	; (130c0 <main+0x29a8>)
   13052:	1c10      	adds	r0, r2, #0
   13054:	4798      	blx	r3
   13056:	0002      	movs	r2, r0
   13058:	000b      	movs	r3, r1
   1305a:	4c1a      	ldr	r4, [pc, #104]	; (130c4 <main+0x29ac>)
   1305c:	2000      	movs	r0, #0
   1305e:	491a      	ldr	r1, [pc, #104]	; (130c8 <main+0x29b0>)
   13060:	47a0      	blx	r4
   13062:	0003      	movs	r3, r0
   13064:	000c      	movs	r4, r1
   13066:	001d      	movs	r5, r3
   13068:	0026      	movs	r6, r4
   1306a:	4b2d      	ldr	r3, [pc, #180]	; (13120 <main+0x2a08>)
   1306c:	691b      	ldr	r3, [r3, #16]
   1306e:	17d9      	asrs	r1, r3, #31
   13070:	185a      	adds	r2, r3, r1
   13072:	404a      	eors	r2, r1
   13074:	4b2c      	ldr	r3, [pc, #176]	; (13128 <main+0x2a10>)
   13076:	0010      	movs	r0, r2
   13078:	4798      	blx	r3
   1307a:	1c02      	adds	r2, r0, #0
   1307c:	4b10      	ldr	r3, [pc, #64]	; (130c0 <main+0x29a8>)
   1307e:	1c10      	adds	r0, r2, #0
   13080:	4798      	blx	r3
   13082:	0002      	movs	r2, r0
   13084:	000b      	movs	r3, r1
   13086:	4c11      	ldr	r4, [pc, #68]	; (130cc <main+0x29b4>)
   13088:	0028      	movs	r0, r5
   1308a:	0031      	movs	r1, r6
   1308c:	47a0      	blx	r4
   1308e:	0003      	movs	r3, r0
   13090:	000c      	movs	r4, r1
   13092:	0019      	movs	r1, r3
   13094:	0022      	movs	r2, r4
   13096:	4b0e      	ldr	r3, [pc, #56]	; (130d0 <main+0x29b8>)
   13098:	0008      	movs	r0, r1
   1309a:	0011      	movs	r1, r2
   1309c:	4798      	blx	r3
   1309e:	0002      	movs	r2, r0
   130a0:	4b0f      	ldr	r3, [pc, #60]	; (130e0 <main+0x29c8>)
   130a2:	490d      	ldr	r1, [pc, #52]	; (130d8 <main+0x29c0>)
   130a4:	0010      	movs	r0, r2
   130a6:	4798      	blx	r3
   130a8:	0003      	movs	r3, r0
   130aa:	b2da      	uxtb	r2, r3
   130ac:	4b0d      	ldr	r3, [pc, #52]	; (130e4 <main+0x29cc>)
   130ae:	701a      	strb	r2, [r3, #0]
   130b0:	e042      	b.n	13138 <main+0x2a20>
   130b2:	46c0      	nop			; (mov r8, r8)
   130b4:	200003dc 	.word	0x200003dc
   130b8:	00014395 	.word	0x00014395
   130bc:	200000cc 	.word	0x200000cc
   130c0:	00016d9d 	.word	0x00016d9d
   130c4:	000158ad 	.word	0x000158ad
   130c8:	4107ffe8 	.word	0x4107ffe8
   130cc:	00016115 	.word	0x00016115
   130d0:	00016c41 	.word	0x00016c41
   130d4:	000142e9 	.word	0x000142e9
   130d8:	0000ffff 	.word	0x0000ffff
   130dc:	20000328 	.word	0x20000328
   130e0:	0001411d 	.word	0x0001411d
   130e4:	20000326 	.word	0x20000326
   130e8:	000143d1 	.word	0x000143d1
   130ec:	200000d0 	.word	0x200000d0
   130f0:	00015201 	.word	0x00015201
   130f4:	200003ec 	.word	0x200003ec
   130f8:	00014ba9 	.word	0x00014ba9
   130fc:	00014439 	.word	0x00014439
   13100:	2000032c 	.word	0x2000032c
   13104:	2000032e 	.word	0x2000032e
   13108:	20000314 	.word	0x20000314
   1310c:	0000b385 	.word	0x0000b385
   13110:	00016fe5 	.word	0x00016fe5
   13114:	2000030a 	.word	0x2000030a
   13118:	00016ca9 	.word	0x00016ca9
   1311c:	4087ffe8 	.word	0x4087ffe8
   13120:	20000958 	.word	0x20000958
   13124:	20000fd4 	.word	0x20000fd4
   13128:	00015161 	.word	0x00015161
					}
					else{
						cycle_index = 0;
   1312c:	4be2      	ldr	r3, [pc, #904]	; (134b8 <main+0x2da0>)
   1312e:	2200      	movs	r2, #0
   13130:	601a      	str	r2, [r3, #0]
						cycle = 0;
   13132:	4be2      	ldr	r3, [pc, #904]	; (134bc <main+0x2da4>)
   13134:	2200      	movs	r2, #0
   13136:	701a      	strb	r2, [r3, #0]
					}
					upColor = cycle_index * output_brightness;
   13138:	4bdf      	ldr	r3, [pc, #892]	; (134b8 <main+0x2da0>)
   1313a:	681a      	ldr	r2, [r3, #0]
   1313c:	4be0      	ldr	r3, [pc, #896]	; (134c0 <main+0x2da8>)
   1313e:	0010      	movs	r0, r2
   13140:	4798      	blx	r3
   13142:	4be0      	ldr	r3, [pc, #896]	; (134c4 <main+0x2dac>)
   13144:	681a      	ldr	r2, [r3, #0]
   13146:	4be0      	ldr	r3, [pc, #896]	; (134c8 <main+0x2db0>)
   13148:	1c11      	adds	r1, r2, #0
   1314a:	4798      	blx	r3
   1314c:	1c03      	adds	r3, r0, #0
   1314e:	1c1a      	adds	r2, r3, #0
   13150:	4bde      	ldr	r3, [pc, #888]	; (134cc <main+0x2db4>)
   13152:	1c10      	adds	r0, r2, #0
   13154:	4798      	blx	r3
   13156:	0003      	movs	r3, r0
   13158:	b29a      	uxth	r2, r3
   1315a:	4bdd      	ldr	r3, [pc, #884]	; (134d0 <main+0x2db8>)
   1315c:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   1315e:	4bd6      	ldr	r3, [pc, #856]	; (134b8 <main+0x2da0>)
   13160:	681b      	ldr	r3, [r3, #0]
   13162:	4adc      	ldr	r2, [pc, #880]	; (134d4 <main+0x2dbc>)
   13164:	1ad2      	subs	r2, r2, r3
   13166:	4bd6      	ldr	r3, [pc, #856]	; (134c0 <main+0x2da8>)
   13168:	0010      	movs	r0, r2
   1316a:	4798      	blx	r3
   1316c:	4bd5      	ldr	r3, [pc, #852]	; (134c4 <main+0x2dac>)
   1316e:	681a      	ldr	r2, [r3, #0]
   13170:	4bd5      	ldr	r3, [pc, #852]	; (134c8 <main+0x2db0>)
   13172:	1c11      	adds	r1, r2, #0
   13174:	4798      	blx	r3
   13176:	1c03      	adds	r3, r0, #0
   13178:	1c1a      	adds	r2, r3, #0
   1317a:	4bd4      	ldr	r3, [pc, #848]	; (134cc <main+0x2db4>)
   1317c:	1c10      	adds	r0, r2, #0
   1317e:	4798      	blx	r3
   13180:	0003      	movs	r3, r0
   13182:	b29a      	uxth	r2, r3
   13184:	4bd4      	ldr	r3, [pc, #848]	; (134d8 <main+0x2dc0>)
   13186:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   13188:	4bd1      	ldr	r3, [pc, #836]	; (134d0 <main+0x2db8>)
   1318a:	8819      	ldrh	r1, [r3, #0]
   1318c:	4bd2      	ldr	r3, [pc, #840]	; (134d8 <main+0x2dc0>)
   1318e:	881a      	ldrh	r2, [r3, #0]
   13190:	4bca      	ldr	r3, [pc, #808]	; (134bc <main+0x2da4>)
   13192:	781b      	ldrb	r3, [r3, #0]
   13194:	4dd1      	ldr	r5, [pc, #836]	; (134dc <main+0x2dc4>)
   13196:	0038      	movs	r0, r7
   13198:	4cd1      	ldr	r4, [pc, #836]	; (134e0 <main+0x2dc8>)
   1319a:	47a0      	blx	r4
   1319c:	003b      	movs	r3, r7
   1319e:	0028      	movs	r0, r5
   131a0:	0019      	movs	r1, r3
   131a2:	230c      	movs	r3, #12
   131a4:	001a      	movs	r2, r3
   131a6:	4bcf      	ldr	r3, [pc, #828]	; (134e4 <main+0x2dcc>)
   131a8:	4798      	blx	r3
					break;
   131aa:	e2a7      	b.n	136fc <main+0x2fe4>
				}
				case COLOR_X_ACCEL:
				{
					if(axKalman < 0){
   131ac:	4bce      	ldr	r3, [pc, #824]	; (134e8 <main+0x2dd0>)
   131ae:	681a      	ldr	r2, [r3, #0]
   131b0:	4bce      	ldr	r3, [pc, #824]	; (134ec <main+0x2dd4>)
   131b2:	2100      	movs	r1, #0
   131b4:	1c10      	adds	r0, r2, #0
   131b6:	4798      	blx	r3
   131b8:	1e03      	subs	r3, r0, #0
   131ba:	d040      	beq.n	1323e <main+0x2b26>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
   131bc:	4bca      	ldr	r3, [pc, #808]	; (134e8 <main+0x2dd0>)
   131be:	681a      	ldr	r2, [r3, #0]
   131c0:	4bcb      	ldr	r3, [pc, #812]	; (134f0 <main+0x2dd8>)
   131c2:	49cc      	ldr	r1, [pc, #816]	; (134f4 <main+0x2ddc>)
   131c4:	1c10      	adds	r0, r2, #0
   131c6:	4798      	blx	r3
   131c8:	1c03      	adds	r3, r0, #0
   131ca:	1c1a      	adds	r2, r3, #0
   131cc:	4bca      	ldr	r3, [pc, #808]	; (134f8 <main+0x2de0>)
   131ce:	1c10      	adds	r0, r2, #0
   131d0:	4798      	blx	r3
   131d2:	4cca      	ldr	r4, [pc, #808]	; (134fc <main+0x2de4>)
   131d4:	4aca      	ldr	r2, [pc, #808]	; (13500 <main+0x2de8>)
   131d6:	4bcb      	ldr	r3, [pc, #812]	; (13504 <main+0x2dec>)
   131d8:	47a0      	blx	r4
   131da:	0003      	movs	r3, r0
   131dc:	000c      	movs	r4, r1
   131de:	0019      	movs	r1, r3
   131e0:	0022      	movs	r2, r4
   131e2:	4bc9      	ldr	r3, [pc, #804]	; (13508 <main+0x2df0>)
   131e4:	0008      	movs	r0, r1
   131e6:	0011      	movs	r1, r2
   131e8:	4798      	blx	r3
   131ea:	0002      	movs	r2, r0
   131ec:	4bc7      	ldr	r3, [pc, #796]	; (1350c <main+0x2df4>)
   131ee:	49b9      	ldr	r1, [pc, #740]	; (134d4 <main+0x2dbc>)
   131f0:	0010      	movs	r0, r2
   131f2:	4798      	blx	r3
   131f4:	000b      	movs	r3, r1
   131f6:	001a      	movs	r2, r3
   131f8:	4baf      	ldr	r3, [pc, #700]	; (134b8 <main+0x2da0>)
   131fa:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
   131fc:	4bba      	ldr	r3, [pc, #744]	; (134e8 <main+0x2dd0>)
   131fe:	681a      	ldr	r2, [r3, #0]
   13200:	4bbb      	ldr	r3, [pc, #748]	; (134f0 <main+0x2dd8>)
   13202:	49bc      	ldr	r1, [pc, #752]	; (134f4 <main+0x2ddc>)
   13204:	1c10      	adds	r0, r2, #0
   13206:	4798      	blx	r3
   13208:	1c03      	adds	r3, r0, #0
   1320a:	1c1a      	adds	r2, r3, #0
   1320c:	4bba      	ldr	r3, [pc, #744]	; (134f8 <main+0x2de0>)
   1320e:	1c10      	adds	r0, r2, #0
   13210:	4798      	blx	r3
   13212:	4cba      	ldr	r4, [pc, #744]	; (134fc <main+0x2de4>)
   13214:	4aba      	ldr	r2, [pc, #744]	; (13500 <main+0x2de8>)
   13216:	4bbb      	ldr	r3, [pc, #748]	; (13504 <main+0x2dec>)
   13218:	47a0      	blx	r4
   1321a:	0003      	movs	r3, r0
   1321c:	000c      	movs	r4, r1
   1321e:	0019      	movs	r1, r3
   13220:	0022      	movs	r2, r4
   13222:	4bb9      	ldr	r3, [pc, #740]	; (13508 <main+0x2df0>)
   13224:	0008      	movs	r0, r1
   13226:	0011      	movs	r1, r2
   13228:	4798      	blx	r3
   1322a:	0002      	movs	r2, r0
   1322c:	4bb8      	ldr	r3, [pc, #736]	; (13510 <main+0x2df8>)
   1322e:	49a9      	ldr	r1, [pc, #676]	; (134d4 <main+0x2dbc>)
   13230:	0010      	movs	r0, r2
   13232:	4798      	blx	r3
   13234:	0003      	movs	r3, r0
   13236:	b2da      	uxtb	r2, r3
   13238:	4ba0      	ldr	r3, [pc, #640]	; (134bc <main+0x2da4>)
   1323a:	701a      	strb	r2, [r3, #0]
   1323c:	e03f      	b.n	132be <main+0x2ba6>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
   1323e:	4baa      	ldr	r3, [pc, #680]	; (134e8 <main+0x2dd0>)
   13240:	681a      	ldr	r2, [r3, #0]
   13242:	4bab      	ldr	r3, [pc, #684]	; (134f0 <main+0x2dd8>)
   13244:	49ab      	ldr	r1, [pc, #684]	; (134f4 <main+0x2ddc>)
   13246:	1c10      	adds	r0, r2, #0
   13248:	4798      	blx	r3
   1324a:	1c03      	adds	r3, r0, #0
   1324c:	1c1a      	adds	r2, r3, #0
   1324e:	4baa      	ldr	r3, [pc, #680]	; (134f8 <main+0x2de0>)
   13250:	1c10      	adds	r0, r2, #0
   13252:	4798      	blx	r3
   13254:	4ca9      	ldr	r4, [pc, #676]	; (134fc <main+0x2de4>)
   13256:	4aaa      	ldr	r2, [pc, #680]	; (13500 <main+0x2de8>)
   13258:	4baa      	ldr	r3, [pc, #680]	; (13504 <main+0x2dec>)
   1325a:	47a0      	blx	r4
   1325c:	0003      	movs	r3, r0
   1325e:	000c      	movs	r4, r1
   13260:	0019      	movs	r1, r3
   13262:	0022      	movs	r2, r4
   13264:	4ba8      	ldr	r3, [pc, #672]	; (13508 <main+0x2df0>)
   13266:	0008      	movs	r0, r1
   13268:	0011      	movs	r1, r2
   1326a:	4798      	blx	r3
   1326c:	0002      	movs	r2, r0
   1326e:	4ba7      	ldr	r3, [pc, #668]	; (1350c <main+0x2df4>)
   13270:	4998      	ldr	r1, [pc, #608]	; (134d4 <main+0x2dbc>)
   13272:	0010      	movs	r0, r2
   13274:	4798      	blx	r3
   13276:	000b      	movs	r3, r1
   13278:	001a      	movs	r2, r3
   1327a:	4b8f      	ldr	r3, [pc, #572]	; (134b8 <main+0x2da0>)
   1327c:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
   1327e:	4b9a      	ldr	r3, [pc, #616]	; (134e8 <main+0x2dd0>)
   13280:	681a      	ldr	r2, [r3, #0]
   13282:	4b9b      	ldr	r3, [pc, #620]	; (134f0 <main+0x2dd8>)
   13284:	499b      	ldr	r1, [pc, #620]	; (134f4 <main+0x2ddc>)
   13286:	1c10      	adds	r0, r2, #0
   13288:	4798      	blx	r3
   1328a:	1c03      	adds	r3, r0, #0
   1328c:	1c1a      	adds	r2, r3, #0
   1328e:	4b9a      	ldr	r3, [pc, #616]	; (134f8 <main+0x2de0>)
   13290:	1c10      	adds	r0, r2, #0
   13292:	4798      	blx	r3
   13294:	4c99      	ldr	r4, [pc, #612]	; (134fc <main+0x2de4>)
   13296:	4a9a      	ldr	r2, [pc, #616]	; (13500 <main+0x2de8>)
   13298:	4b9a      	ldr	r3, [pc, #616]	; (13504 <main+0x2dec>)
   1329a:	47a0      	blx	r4
   1329c:	0003      	movs	r3, r0
   1329e:	000c      	movs	r4, r1
   132a0:	0019      	movs	r1, r3
   132a2:	0022      	movs	r2, r4
   132a4:	4b98      	ldr	r3, [pc, #608]	; (13508 <main+0x2df0>)
   132a6:	0008      	movs	r0, r1
   132a8:	0011      	movs	r1, r2
   132aa:	4798      	blx	r3
   132ac:	0002      	movs	r2, r0
   132ae:	4b98      	ldr	r3, [pc, #608]	; (13510 <main+0x2df8>)
   132b0:	4988      	ldr	r1, [pc, #544]	; (134d4 <main+0x2dbc>)
   132b2:	0010      	movs	r0, r2
   132b4:	4798      	blx	r3
   132b6:	0003      	movs	r3, r0
   132b8:	b2da      	uxtb	r2, r3
   132ba:	4b80      	ldr	r3, [pc, #512]	; (134bc <main+0x2da4>)
   132bc:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   132be:	4b7e      	ldr	r3, [pc, #504]	; (134b8 <main+0x2da0>)
   132c0:	681a      	ldr	r2, [r3, #0]
   132c2:	4b7f      	ldr	r3, [pc, #508]	; (134c0 <main+0x2da8>)
   132c4:	0010      	movs	r0, r2
   132c6:	4798      	blx	r3
   132c8:	4b7e      	ldr	r3, [pc, #504]	; (134c4 <main+0x2dac>)
   132ca:	681a      	ldr	r2, [r3, #0]
   132cc:	4b7e      	ldr	r3, [pc, #504]	; (134c8 <main+0x2db0>)
   132ce:	1c11      	adds	r1, r2, #0
   132d0:	4798      	blx	r3
   132d2:	1c03      	adds	r3, r0, #0
   132d4:	1c1a      	adds	r2, r3, #0
   132d6:	4b7d      	ldr	r3, [pc, #500]	; (134cc <main+0x2db4>)
   132d8:	1c10      	adds	r0, r2, #0
   132da:	4798      	blx	r3
   132dc:	0003      	movs	r3, r0
   132de:	b29a      	uxth	r2, r3
   132e0:	4b7b      	ldr	r3, [pc, #492]	; (134d0 <main+0x2db8>)
   132e2:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   132e4:	4b74      	ldr	r3, [pc, #464]	; (134b8 <main+0x2da0>)
   132e6:	681b      	ldr	r3, [r3, #0]
   132e8:	4a7a      	ldr	r2, [pc, #488]	; (134d4 <main+0x2dbc>)
   132ea:	1ad2      	subs	r2, r2, r3
   132ec:	4b74      	ldr	r3, [pc, #464]	; (134c0 <main+0x2da8>)
   132ee:	0010      	movs	r0, r2
   132f0:	4798      	blx	r3
   132f2:	4b74      	ldr	r3, [pc, #464]	; (134c4 <main+0x2dac>)
   132f4:	681a      	ldr	r2, [r3, #0]
   132f6:	4b74      	ldr	r3, [pc, #464]	; (134c8 <main+0x2db0>)
   132f8:	1c11      	adds	r1, r2, #0
   132fa:	4798      	blx	r3
   132fc:	1c03      	adds	r3, r0, #0
   132fe:	1c1a      	adds	r2, r3, #0
   13300:	4b72      	ldr	r3, [pc, #456]	; (134cc <main+0x2db4>)
   13302:	1c10      	adds	r0, r2, #0
   13304:	4798      	blx	r3
   13306:	0003      	movs	r3, r0
   13308:	b29a      	uxth	r2, r3
   1330a:	4b73      	ldr	r3, [pc, #460]	; (134d8 <main+0x2dc0>)
   1330c:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   1330e:	4b70      	ldr	r3, [pc, #448]	; (134d0 <main+0x2db8>)
   13310:	8819      	ldrh	r1, [r3, #0]
   13312:	4b71      	ldr	r3, [pc, #452]	; (134d8 <main+0x2dc0>)
   13314:	881a      	ldrh	r2, [r3, #0]
   13316:	4b69      	ldr	r3, [pc, #420]	; (134bc <main+0x2da4>)
   13318:	781b      	ldrb	r3, [r3, #0]
   1331a:	4d70      	ldr	r5, [pc, #448]	; (134dc <main+0x2dc4>)
   1331c:	0038      	movs	r0, r7
   1331e:	4c70      	ldr	r4, [pc, #448]	; (134e0 <main+0x2dc8>)
   13320:	47a0      	blx	r4
   13322:	003b      	movs	r3, r7
   13324:	0028      	movs	r0, r5
   13326:	0019      	movs	r1, r3
   13328:	230c      	movs	r3, #12
   1332a:	001a      	movs	r2, r3
   1332c:	4b6d      	ldr	r3, [pc, #436]	; (134e4 <main+0x2dcc>)
   1332e:	4798      	blx	r3
					break;
   13330:	e1e4      	b.n	136fc <main+0x2fe4>
				}
				case COLOR_Y_ACCEL:
				{
					if(ayKalman < 0){
   13332:	4b78      	ldr	r3, [pc, #480]	; (13514 <main+0x2dfc>)
   13334:	681a      	ldr	r2, [r3, #0]
   13336:	4b6d      	ldr	r3, [pc, #436]	; (134ec <main+0x2dd4>)
   13338:	2100      	movs	r1, #0
   1333a:	1c10      	adds	r0, r2, #0
   1333c:	4798      	blx	r3
   1333e:	1e03      	subs	r3, r0, #0
   13340:	d040      	beq.n	133c4 <main+0x2cac>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
   13342:	4b74      	ldr	r3, [pc, #464]	; (13514 <main+0x2dfc>)
   13344:	681a      	ldr	r2, [r3, #0]
   13346:	4b6a      	ldr	r3, [pc, #424]	; (134f0 <main+0x2dd8>)
   13348:	496a      	ldr	r1, [pc, #424]	; (134f4 <main+0x2ddc>)
   1334a:	1c10      	adds	r0, r2, #0
   1334c:	4798      	blx	r3
   1334e:	1c03      	adds	r3, r0, #0
   13350:	1c1a      	adds	r2, r3, #0
   13352:	4b69      	ldr	r3, [pc, #420]	; (134f8 <main+0x2de0>)
   13354:	1c10      	adds	r0, r2, #0
   13356:	4798      	blx	r3
   13358:	4c68      	ldr	r4, [pc, #416]	; (134fc <main+0x2de4>)
   1335a:	4a69      	ldr	r2, [pc, #420]	; (13500 <main+0x2de8>)
   1335c:	4b69      	ldr	r3, [pc, #420]	; (13504 <main+0x2dec>)
   1335e:	47a0      	blx	r4
   13360:	0003      	movs	r3, r0
   13362:	000c      	movs	r4, r1
   13364:	0019      	movs	r1, r3
   13366:	0022      	movs	r2, r4
   13368:	4b67      	ldr	r3, [pc, #412]	; (13508 <main+0x2df0>)
   1336a:	0008      	movs	r0, r1
   1336c:	0011      	movs	r1, r2
   1336e:	4798      	blx	r3
   13370:	0002      	movs	r2, r0
   13372:	4b66      	ldr	r3, [pc, #408]	; (1350c <main+0x2df4>)
   13374:	4957      	ldr	r1, [pc, #348]	; (134d4 <main+0x2dbc>)
   13376:	0010      	movs	r0, r2
   13378:	4798      	blx	r3
   1337a:	000b      	movs	r3, r1
   1337c:	001a      	movs	r2, r3
   1337e:	4b4e      	ldr	r3, [pc, #312]	; (134b8 <main+0x2da0>)
   13380:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
   13382:	4b64      	ldr	r3, [pc, #400]	; (13514 <main+0x2dfc>)
   13384:	681a      	ldr	r2, [r3, #0]
   13386:	4b5a      	ldr	r3, [pc, #360]	; (134f0 <main+0x2dd8>)
   13388:	495a      	ldr	r1, [pc, #360]	; (134f4 <main+0x2ddc>)
   1338a:	1c10      	adds	r0, r2, #0
   1338c:	4798      	blx	r3
   1338e:	1c03      	adds	r3, r0, #0
   13390:	1c1a      	adds	r2, r3, #0
   13392:	4b59      	ldr	r3, [pc, #356]	; (134f8 <main+0x2de0>)
   13394:	1c10      	adds	r0, r2, #0
   13396:	4798      	blx	r3
   13398:	4c58      	ldr	r4, [pc, #352]	; (134fc <main+0x2de4>)
   1339a:	4a59      	ldr	r2, [pc, #356]	; (13500 <main+0x2de8>)
   1339c:	4b59      	ldr	r3, [pc, #356]	; (13504 <main+0x2dec>)
   1339e:	47a0      	blx	r4
   133a0:	0003      	movs	r3, r0
   133a2:	000c      	movs	r4, r1
   133a4:	0019      	movs	r1, r3
   133a6:	0022      	movs	r2, r4
   133a8:	4b57      	ldr	r3, [pc, #348]	; (13508 <main+0x2df0>)
   133aa:	0008      	movs	r0, r1
   133ac:	0011      	movs	r1, r2
   133ae:	4798      	blx	r3
   133b0:	0002      	movs	r2, r0
   133b2:	4b57      	ldr	r3, [pc, #348]	; (13510 <main+0x2df8>)
   133b4:	4947      	ldr	r1, [pc, #284]	; (134d4 <main+0x2dbc>)
   133b6:	0010      	movs	r0, r2
   133b8:	4798      	blx	r3
   133ba:	0003      	movs	r3, r0
   133bc:	b2da      	uxtb	r2, r3
   133be:	4b3f      	ldr	r3, [pc, #252]	; (134bc <main+0x2da4>)
   133c0:	701a      	strb	r2, [r3, #0]
   133c2:	e03f      	b.n	13444 <main+0x2d2c>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
   133c4:	4b53      	ldr	r3, [pc, #332]	; (13514 <main+0x2dfc>)
   133c6:	681a      	ldr	r2, [r3, #0]
   133c8:	4b49      	ldr	r3, [pc, #292]	; (134f0 <main+0x2dd8>)
   133ca:	494a      	ldr	r1, [pc, #296]	; (134f4 <main+0x2ddc>)
   133cc:	1c10      	adds	r0, r2, #0
   133ce:	4798      	blx	r3
   133d0:	1c03      	adds	r3, r0, #0
   133d2:	1c1a      	adds	r2, r3, #0
   133d4:	4b48      	ldr	r3, [pc, #288]	; (134f8 <main+0x2de0>)
   133d6:	1c10      	adds	r0, r2, #0
   133d8:	4798      	blx	r3
   133da:	4c48      	ldr	r4, [pc, #288]	; (134fc <main+0x2de4>)
   133dc:	4a48      	ldr	r2, [pc, #288]	; (13500 <main+0x2de8>)
   133de:	4b49      	ldr	r3, [pc, #292]	; (13504 <main+0x2dec>)
   133e0:	47a0      	blx	r4
   133e2:	0003      	movs	r3, r0
   133e4:	000c      	movs	r4, r1
   133e6:	0019      	movs	r1, r3
   133e8:	0022      	movs	r2, r4
   133ea:	4b47      	ldr	r3, [pc, #284]	; (13508 <main+0x2df0>)
   133ec:	0008      	movs	r0, r1
   133ee:	0011      	movs	r1, r2
   133f0:	4798      	blx	r3
   133f2:	0002      	movs	r2, r0
   133f4:	4b45      	ldr	r3, [pc, #276]	; (1350c <main+0x2df4>)
   133f6:	4937      	ldr	r1, [pc, #220]	; (134d4 <main+0x2dbc>)
   133f8:	0010      	movs	r0, r2
   133fa:	4798      	blx	r3
   133fc:	000b      	movs	r3, r1
   133fe:	001a      	movs	r2, r3
   13400:	4b2d      	ldr	r3, [pc, #180]	; (134b8 <main+0x2da0>)
   13402:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
   13404:	4b43      	ldr	r3, [pc, #268]	; (13514 <main+0x2dfc>)
   13406:	681a      	ldr	r2, [r3, #0]
   13408:	4b39      	ldr	r3, [pc, #228]	; (134f0 <main+0x2dd8>)
   1340a:	493a      	ldr	r1, [pc, #232]	; (134f4 <main+0x2ddc>)
   1340c:	1c10      	adds	r0, r2, #0
   1340e:	4798      	blx	r3
   13410:	1c03      	adds	r3, r0, #0
   13412:	1c1a      	adds	r2, r3, #0
   13414:	4b38      	ldr	r3, [pc, #224]	; (134f8 <main+0x2de0>)
   13416:	1c10      	adds	r0, r2, #0
   13418:	4798      	blx	r3
   1341a:	4c38      	ldr	r4, [pc, #224]	; (134fc <main+0x2de4>)
   1341c:	4a38      	ldr	r2, [pc, #224]	; (13500 <main+0x2de8>)
   1341e:	4b39      	ldr	r3, [pc, #228]	; (13504 <main+0x2dec>)
   13420:	47a0      	blx	r4
   13422:	0003      	movs	r3, r0
   13424:	000c      	movs	r4, r1
   13426:	0019      	movs	r1, r3
   13428:	0022      	movs	r2, r4
   1342a:	4b37      	ldr	r3, [pc, #220]	; (13508 <main+0x2df0>)
   1342c:	0008      	movs	r0, r1
   1342e:	0011      	movs	r1, r2
   13430:	4798      	blx	r3
   13432:	0002      	movs	r2, r0
   13434:	4b36      	ldr	r3, [pc, #216]	; (13510 <main+0x2df8>)
   13436:	4927      	ldr	r1, [pc, #156]	; (134d4 <main+0x2dbc>)
   13438:	0010      	movs	r0, r2
   1343a:	4798      	blx	r3
   1343c:	0003      	movs	r3, r0
   1343e:	b2da      	uxtb	r2, r3
   13440:	4b1e      	ldr	r3, [pc, #120]	; (134bc <main+0x2da4>)
   13442:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   13444:	4b1c      	ldr	r3, [pc, #112]	; (134b8 <main+0x2da0>)
   13446:	681a      	ldr	r2, [r3, #0]
   13448:	4b1d      	ldr	r3, [pc, #116]	; (134c0 <main+0x2da8>)
   1344a:	0010      	movs	r0, r2
   1344c:	4798      	blx	r3
   1344e:	4b1d      	ldr	r3, [pc, #116]	; (134c4 <main+0x2dac>)
   13450:	681a      	ldr	r2, [r3, #0]
   13452:	4b1d      	ldr	r3, [pc, #116]	; (134c8 <main+0x2db0>)
   13454:	1c11      	adds	r1, r2, #0
   13456:	4798      	blx	r3
   13458:	1c03      	adds	r3, r0, #0
   1345a:	1c1a      	adds	r2, r3, #0
   1345c:	4b1b      	ldr	r3, [pc, #108]	; (134cc <main+0x2db4>)
   1345e:	1c10      	adds	r0, r2, #0
   13460:	4798      	blx	r3
   13462:	0003      	movs	r3, r0
   13464:	b29a      	uxth	r2, r3
   13466:	4b1a      	ldr	r3, [pc, #104]	; (134d0 <main+0x2db8>)
   13468:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   1346a:	4b13      	ldr	r3, [pc, #76]	; (134b8 <main+0x2da0>)
   1346c:	681b      	ldr	r3, [r3, #0]
   1346e:	4a19      	ldr	r2, [pc, #100]	; (134d4 <main+0x2dbc>)
   13470:	1ad2      	subs	r2, r2, r3
   13472:	4b13      	ldr	r3, [pc, #76]	; (134c0 <main+0x2da8>)
   13474:	0010      	movs	r0, r2
   13476:	4798      	blx	r3
   13478:	4b12      	ldr	r3, [pc, #72]	; (134c4 <main+0x2dac>)
   1347a:	681a      	ldr	r2, [r3, #0]
   1347c:	4b12      	ldr	r3, [pc, #72]	; (134c8 <main+0x2db0>)
   1347e:	1c11      	adds	r1, r2, #0
   13480:	4798      	blx	r3
   13482:	1c03      	adds	r3, r0, #0
   13484:	1c1a      	adds	r2, r3, #0
   13486:	4b11      	ldr	r3, [pc, #68]	; (134cc <main+0x2db4>)
   13488:	1c10      	adds	r0, r2, #0
   1348a:	4798      	blx	r3
   1348c:	0003      	movs	r3, r0
   1348e:	b29a      	uxth	r2, r3
   13490:	4b11      	ldr	r3, [pc, #68]	; (134d8 <main+0x2dc0>)
   13492:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   13494:	4b0e      	ldr	r3, [pc, #56]	; (134d0 <main+0x2db8>)
   13496:	8819      	ldrh	r1, [r3, #0]
   13498:	4b0f      	ldr	r3, [pc, #60]	; (134d8 <main+0x2dc0>)
   1349a:	881a      	ldrh	r2, [r3, #0]
   1349c:	4b07      	ldr	r3, [pc, #28]	; (134bc <main+0x2da4>)
   1349e:	781b      	ldrb	r3, [r3, #0]
   134a0:	4d0e      	ldr	r5, [pc, #56]	; (134dc <main+0x2dc4>)
   134a2:	0038      	movs	r0, r7
   134a4:	4c0e      	ldr	r4, [pc, #56]	; (134e0 <main+0x2dc8>)
   134a6:	47a0      	blx	r4
   134a8:	003b      	movs	r3, r7
   134aa:	0028      	movs	r0, r5
   134ac:	0019      	movs	r1, r3
   134ae:	230c      	movs	r3, #12
   134b0:	001a      	movs	r2, r3
   134b2:	4b0c      	ldr	r3, [pc, #48]	; (134e4 <main+0x2dcc>)
   134b4:	4798      	blx	r3
					break;
   134b6:	e121      	b.n	136fc <main+0x2fe4>
   134b8:	20000328 	.word	0x20000328
   134bc:	20000326 	.word	0x20000326
   134c0:	00015201 	.word	0x00015201
   134c4:	200003ec 	.word	0x200003ec
   134c8:	00014ba9 	.word	0x00014ba9
   134cc:	00014439 	.word	0x00014439
   134d0:	2000032c 	.word	0x2000032c
   134d4:	0000ffff 	.word	0x0000ffff
   134d8:	2000032e 	.word	0x2000032e
   134dc:	20000314 	.word	0x20000314
   134e0:	0000b385 	.word	0x0000b385
   134e4:	00016fe5 	.word	0x00016fe5
   134e8:	200003d0 	.word	0x200003d0
   134ec:	00014395 	.word	0x00014395
   134f0:	000144a5 	.word	0x000144a5
   134f4:	44bb8000 	.word	0x44bb8000
   134f8:	00016d9d 	.word	0x00016d9d
   134fc:	00016115 	.word	0x00016115
   13500:	70a3d70a 	.word	0x70a3d70a
   13504:	4050623d 	.word	0x4050623d
   13508:	00016c41 	.word	0x00016c41
   1350c:	000142e9 	.word	0x000142e9
   13510:	0001411d 	.word	0x0001411d
   13514:	200003d4 	.word	0x200003d4
				}
				case COLOR_Z_ACCEL:
				{
					if(azKalman < 0){
   13518:	4bcf      	ldr	r3, [pc, #828]	; (13858 <main+0x3140>)
   1351a:	681a      	ldr	r2, [r3, #0]
   1351c:	4bcf      	ldr	r3, [pc, #828]	; (1385c <main+0x3144>)
   1351e:	2100      	movs	r1, #0
   13520:	1c10      	adds	r0, r2, #0
   13522:	4798      	blx	r3
   13524:	1e03      	subs	r3, r0, #0
   13526:	d056      	beq.n	135d6 <main+0x2ebe>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) % 0x0FFFF;
   13528:	4bcd      	ldr	r3, [pc, #820]	; (13860 <main+0x3148>)
   1352a:	681a      	ldr	r2, [r3, #0]
   1352c:	4bcd      	ldr	r3, [pc, #820]	; (13864 <main+0x314c>)
   1352e:	1c10      	adds	r0, r2, #0
   13530:	4798      	blx	r3
   13532:	0002      	movs	r2, r0
   13534:	000b      	movs	r3, r1
   13536:	4ccc      	ldr	r4, [pc, #816]	; (13868 <main+0x3150>)
   13538:	2000      	movs	r0, #0
   1353a:	49cc      	ldr	r1, [pc, #816]	; (1386c <main+0x3154>)
   1353c:	47a0      	blx	r4
   1353e:	0003      	movs	r3, r0
   13540:	000c      	movs	r4, r1
   13542:	001d      	movs	r5, r3
   13544:	0026      	movs	r6, r4
   13546:	4bc4      	ldr	r3, [pc, #784]	; (13858 <main+0x3140>)
   13548:	681a      	ldr	r2, [r3, #0]
   1354a:	4bc6      	ldr	r3, [pc, #792]	; (13864 <main+0x314c>)
   1354c:	1c10      	adds	r0, r2, #0
   1354e:	4798      	blx	r3
   13550:	0002      	movs	r2, r0
   13552:	000b      	movs	r3, r1
   13554:	4cc6      	ldr	r4, [pc, #792]	; (13870 <main+0x3158>)
   13556:	0028      	movs	r0, r5
   13558:	0031      	movs	r1, r6
   1355a:	47a0      	blx	r4
   1355c:	0003      	movs	r3, r0
   1355e:	000c      	movs	r4, r1
   13560:	0019      	movs	r1, r3
   13562:	0022      	movs	r2, r4
   13564:	4bc3      	ldr	r3, [pc, #780]	; (13874 <main+0x315c>)
   13566:	0008      	movs	r0, r1
   13568:	0011      	movs	r1, r2
   1356a:	4798      	blx	r3
   1356c:	0002      	movs	r2, r0
   1356e:	4bc2      	ldr	r3, [pc, #776]	; (13878 <main+0x3160>)
   13570:	49c2      	ldr	r1, [pc, #776]	; (1387c <main+0x3164>)
   13572:	0010      	movs	r0, r2
   13574:	4798      	blx	r3
   13576:	000b      	movs	r3, r1
   13578:	001a      	movs	r2, r3
   1357a:	4bc1      	ldr	r3, [pc, #772]	; (13880 <main+0x3168>)
   1357c:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) / 0x0FFFF;
   1357e:	4bb8      	ldr	r3, [pc, #736]	; (13860 <main+0x3148>)
   13580:	681a      	ldr	r2, [r3, #0]
   13582:	4bb8      	ldr	r3, [pc, #736]	; (13864 <main+0x314c>)
   13584:	1c10      	adds	r0, r2, #0
   13586:	4798      	blx	r3
   13588:	0002      	movs	r2, r0
   1358a:	000b      	movs	r3, r1
   1358c:	4cb6      	ldr	r4, [pc, #728]	; (13868 <main+0x3150>)
   1358e:	2000      	movs	r0, #0
   13590:	49b6      	ldr	r1, [pc, #728]	; (1386c <main+0x3154>)
   13592:	47a0      	blx	r4
   13594:	0003      	movs	r3, r0
   13596:	000c      	movs	r4, r1
   13598:	001d      	movs	r5, r3
   1359a:	0026      	movs	r6, r4
   1359c:	4bae      	ldr	r3, [pc, #696]	; (13858 <main+0x3140>)
   1359e:	681a      	ldr	r2, [r3, #0]
   135a0:	4bb0      	ldr	r3, [pc, #704]	; (13864 <main+0x314c>)
   135a2:	1c10      	adds	r0, r2, #0
   135a4:	4798      	blx	r3
   135a6:	0002      	movs	r2, r0
   135a8:	000b      	movs	r3, r1
   135aa:	4cb1      	ldr	r4, [pc, #708]	; (13870 <main+0x3158>)
   135ac:	0028      	movs	r0, r5
   135ae:	0031      	movs	r1, r6
   135b0:	47a0      	blx	r4
   135b2:	0003      	movs	r3, r0
   135b4:	000c      	movs	r4, r1
   135b6:	0019      	movs	r1, r3
   135b8:	0022      	movs	r2, r4
   135ba:	4bae      	ldr	r3, [pc, #696]	; (13874 <main+0x315c>)
   135bc:	0008      	movs	r0, r1
   135be:	0011      	movs	r1, r2
   135c0:	4798      	blx	r3
   135c2:	0002      	movs	r2, r0
   135c4:	4baf      	ldr	r3, [pc, #700]	; (13884 <main+0x316c>)
   135c6:	49ad      	ldr	r1, [pc, #692]	; (1387c <main+0x3164>)
   135c8:	0010      	movs	r0, r2
   135ca:	4798      	blx	r3
   135cc:	0003      	movs	r3, r0
   135ce:	b2da      	uxtb	r2, r3
   135d0:	4bad      	ldr	r3, [pc, #692]	; (13888 <main+0x3170>)
   135d2:	701a      	strb	r2, [r3, #0]
   135d4:	e055      	b.n	13682 <main+0x2f6a>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) % 0x0FFFF;
   135d6:	4bad      	ldr	r3, [pc, #692]	; (1388c <main+0x3174>)
   135d8:	681a      	ldr	r2, [r3, #0]
   135da:	4ba2      	ldr	r3, [pc, #648]	; (13864 <main+0x314c>)
   135dc:	1c10      	adds	r0, r2, #0
   135de:	4798      	blx	r3
   135e0:	0002      	movs	r2, r0
   135e2:	000b      	movs	r3, r1
   135e4:	4ca0      	ldr	r4, [pc, #640]	; (13868 <main+0x3150>)
   135e6:	2000      	movs	r0, #0
   135e8:	49a0      	ldr	r1, [pc, #640]	; (1386c <main+0x3154>)
   135ea:	47a0      	blx	r4
   135ec:	0003      	movs	r3, r0
   135ee:	000c      	movs	r4, r1
   135f0:	001d      	movs	r5, r3
   135f2:	0026      	movs	r6, r4
   135f4:	4b98      	ldr	r3, [pc, #608]	; (13858 <main+0x3140>)
   135f6:	681a      	ldr	r2, [r3, #0]
   135f8:	4b9a      	ldr	r3, [pc, #616]	; (13864 <main+0x314c>)
   135fa:	1c10      	adds	r0, r2, #0
   135fc:	4798      	blx	r3
   135fe:	0002      	movs	r2, r0
   13600:	000b      	movs	r3, r1
   13602:	4c9b      	ldr	r4, [pc, #620]	; (13870 <main+0x3158>)
   13604:	0028      	movs	r0, r5
   13606:	0031      	movs	r1, r6
   13608:	47a0      	blx	r4
   1360a:	0003      	movs	r3, r0
   1360c:	000c      	movs	r4, r1
   1360e:	0019      	movs	r1, r3
   13610:	0022      	movs	r2, r4
   13612:	4b98      	ldr	r3, [pc, #608]	; (13874 <main+0x315c>)
   13614:	0008      	movs	r0, r1
   13616:	0011      	movs	r1, r2
   13618:	4798      	blx	r3
   1361a:	0002      	movs	r2, r0
   1361c:	4b96      	ldr	r3, [pc, #600]	; (13878 <main+0x3160>)
   1361e:	4997      	ldr	r1, [pc, #604]	; (1387c <main+0x3164>)
   13620:	0010      	movs	r0, r2
   13622:	4798      	blx	r3
   13624:	000b      	movs	r3, r1
   13626:	001a      	movs	r2, r3
   13628:	4b95      	ldr	r3, [pc, #596]	; (13880 <main+0x3168>)
   1362a:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) / 0x0FFFF;
   1362c:	4b97      	ldr	r3, [pc, #604]	; (1388c <main+0x3174>)
   1362e:	681a      	ldr	r2, [r3, #0]
   13630:	4b8c      	ldr	r3, [pc, #560]	; (13864 <main+0x314c>)
   13632:	1c10      	adds	r0, r2, #0
   13634:	4798      	blx	r3
   13636:	0002      	movs	r2, r0
   13638:	000b      	movs	r3, r1
   1363a:	4c8b      	ldr	r4, [pc, #556]	; (13868 <main+0x3150>)
   1363c:	2000      	movs	r0, #0
   1363e:	498b      	ldr	r1, [pc, #556]	; (1386c <main+0x3154>)
   13640:	47a0      	blx	r4
   13642:	0003      	movs	r3, r0
   13644:	000c      	movs	r4, r1
   13646:	001d      	movs	r5, r3
   13648:	0026      	movs	r6, r4
   1364a:	4b83      	ldr	r3, [pc, #524]	; (13858 <main+0x3140>)
   1364c:	681a      	ldr	r2, [r3, #0]
   1364e:	4b85      	ldr	r3, [pc, #532]	; (13864 <main+0x314c>)
   13650:	1c10      	adds	r0, r2, #0
   13652:	4798      	blx	r3
   13654:	0002      	movs	r2, r0
   13656:	000b      	movs	r3, r1
   13658:	4c85      	ldr	r4, [pc, #532]	; (13870 <main+0x3158>)
   1365a:	0028      	movs	r0, r5
   1365c:	0031      	movs	r1, r6
   1365e:	47a0      	blx	r4
   13660:	0003      	movs	r3, r0
   13662:	000c      	movs	r4, r1
   13664:	0019      	movs	r1, r3
   13666:	0022      	movs	r2, r4
   13668:	4b82      	ldr	r3, [pc, #520]	; (13874 <main+0x315c>)
   1366a:	0008      	movs	r0, r1
   1366c:	0011      	movs	r1, r2
   1366e:	4798      	blx	r3
   13670:	0002      	movs	r2, r0
   13672:	4b84      	ldr	r3, [pc, #528]	; (13884 <main+0x316c>)
   13674:	4981      	ldr	r1, [pc, #516]	; (1387c <main+0x3164>)
   13676:	0010      	movs	r0, r2
   13678:	4798      	blx	r3
   1367a:	0003      	movs	r3, r0
   1367c:	b2da      	uxtb	r2, r3
   1367e:	4b82      	ldr	r3, [pc, #520]	; (13888 <main+0x3170>)
   13680:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   13682:	4b7f      	ldr	r3, [pc, #508]	; (13880 <main+0x3168>)
   13684:	681a      	ldr	r2, [r3, #0]
   13686:	4b82      	ldr	r3, [pc, #520]	; (13890 <main+0x3178>)
   13688:	0010      	movs	r0, r2
   1368a:	4798      	blx	r3
   1368c:	4b81      	ldr	r3, [pc, #516]	; (13894 <main+0x317c>)
   1368e:	681a      	ldr	r2, [r3, #0]
   13690:	4b81      	ldr	r3, [pc, #516]	; (13898 <main+0x3180>)
   13692:	1c11      	adds	r1, r2, #0
   13694:	4798      	blx	r3
   13696:	1c03      	adds	r3, r0, #0
   13698:	1c1a      	adds	r2, r3, #0
   1369a:	4b80      	ldr	r3, [pc, #512]	; (1389c <main+0x3184>)
   1369c:	1c10      	adds	r0, r2, #0
   1369e:	4798      	blx	r3
   136a0:	0003      	movs	r3, r0
   136a2:	b29a      	uxth	r2, r3
   136a4:	4b7e      	ldr	r3, [pc, #504]	; (138a0 <main+0x3188>)
   136a6:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   136a8:	4b75      	ldr	r3, [pc, #468]	; (13880 <main+0x3168>)
   136aa:	681b      	ldr	r3, [r3, #0]
   136ac:	4a73      	ldr	r2, [pc, #460]	; (1387c <main+0x3164>)
   136ae:	1ad2      	subs	r2, r2, r3
   136b0:	4b77      	ldr	r3, [pc, #476]	; (13890 <main+0x3178>)
   136b2:	0010      	movs	r0, r2
   136b4:	4798      	blx	r3
   136b6:	4b77      	ldr	r3, [pc, #476]	; (13894 <main+0x317c>)
   136b8:	681a      	ldr	r2, [r3, #0]
   136ba:	4b77      	ldr	r3, [pc, #476]	; (13898 <main+0x3180>)
   136bc:	1c11      	adds	r1, r2, #0
   136be:	4798      	blx	r3
   136c0:	1c03      	adds	r3, r0, #0
   136c2:	1c1a      	adds	r2, r3, #0
   136c4:	4b75      	ldr	r3, [pc, #468]	; (1389c <main+0x3184>)
   136c6:	1c10      	adds	r0, r2, #0
   136c8:	4798      	blx	r3
   136ca:	0003      	movs	r3, r0
   136cc:	b29a      	uxth	r2, r3
   136ce:	4b75      	ldr	r3, [pc, #468]	; (138a4 <main+0x318c>)
   136d0:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   136d2:	4b73      	ldr	r3, [pc, #460]	; (138a0 <main+0x3188>)
   136d4:	8819      	ldrh	r1, [r3, #0]
   136d6:	4b73      	ldr	r3, [pc, #460]	; (138a4 <main+0x318c>)
   136d8:	881a      	ldrh	r2, [r3, #0]
   136da:	4b6b      	ldr	r3, [pc, #428]	; (13888 <main+0x3170>)
   136dc:	781b      	ldrb	r3, [r3, #0]
   136de:	4d72      	ldr	r5, [pc, #456]	; (138a8 <main+0x3190>)
   136e0:	0038      	movs	r0, r7
   136e2:	4c72      	ldr	r4, [pc, #456]	; (138ac <main+0x3194>)
   136e4:	47a0      	blx	r4
   136e6:	003b      	movs	r3, r7
   136e8:	0028      	movs	r0, r5
   136ea:	0019      	movs	r1, r3
   136ec:	230c      	movs	r3, #12
   136ee:	001a      	movs	r2, r3
   136f0:	4b6f      	ldr	r3, [pc, #444]	; (138b0 <main+0x3198>)
   136f2:	4798      	blx	r3
					break;
   136f4:	e002      	b.n	136fc <main+0x2fe4>
					break;
   136f6:	46c0      	nop			; (mov r8, r8)
   136f8:	e000      	b.n	136fc <main+0x2fe4>
					break;
   136fa:	46c0      	nop			; (mov r8, r8)
				}
			}
			if(SUPRESS_LEFT_RGB){
   136fc:	4b6d      	ldr	r3, [pc, #436]	; (138b4 <main+0x319c>)
   136fe:	781b      	ldrb	r3, [r3, #0]
   13700:	2b00      	cmp	r3, #0
   13702:	d00b      	beq.n	1371c <main+0x3004>
				RGB_Ouptut.LR = 0;
   13704:	4b68      	ldr	r3, [pc, #416]	; (138a8 <main+0x3190>)
   13706:	2200      	movs	r2, #0
   13708:	801a      	strh	r2, [r3, #0]
				RGB_Ouptut.LG = 0;
   1370a:	4b67      	ldr	r3, [pc, #412]	; (138a8 <main+0x3190>)
   1370c:	2200      	movs	r2, #0
   1370e:	805a      	strh	r2, [r3, #2]
				RGB_Ouptut.LB = 0;
   13710:	4b65      	ldr	r3, [pc, #404]	; (138a8 <main+0x3190>)
   13712:	2200      	movs	r2, #0
   13714:	809a      	strh	r2, [r3, #4]
				SUPRESS_LEFT_RGB = false;
   13716:	4b67      	ldr	r3, [pc, #412]	; (138b4 <main+0x319c>)
   13718:	2200      	movs	r2, #0
   1371a:	701a      	strb	r2, [r3, #0]
			}
			if(SUPRESS_RIGHT_RGB){
   1371c:	4b66      	ldr	r3, [pc, #408]	; (138b8 <main+0x31a0>)
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2b00      	cmp	r3, #0
   13722:	d00b      	beq.n	1373c <main+0x3024>
				RGB_Ouptut.RR = 0;
   13724:	4b60      	ldr	r3, [pc, #384]	; (138a8 <main+0x3190>)
   13726:	2200      	movs	r2, #0
   13728:	80da      	strh	r2, [r3, #6]
				RGB_Ouptut.RG = 0;
   1372a:	4b5f      	ldr	r3, [pc, #380]	; (138a8 <main+0x3190>)
   1372c:	2200      	movs	r2, #0
   1372e:	811a      	strh	r2, [r3, #8]
				RGB_Ouptut.RB = 0;
   13730:	4b5d      	ldr	r3, [pc, #372]	; (138a8 <main+0x3190>)
   13732:	2200      	movs	r2, #0
   13734:	815a      	strh	r2, [r3, #10]
				SUPRESS_RIGHT_RGB = false;
   13736:	4b60      	ldr	r3, [pc, #384]	; (138b8 <main+0x31a0>)
   13738:	2200      	movs	r2, #0
   1373a:	701a      	strb	r2, [r3, #0]
			}
			
			setLeftRGB(RGB_Ouptut.LR,RGB_Ouptut.LG,RGB_Ouptut.LB);
   1373c:	4b5a      	ldr	r3, [pc, #360]	; (138a8 <main+0x3190>)
   1373e:	8818      	ldrh	r0, [r3, #0]
   13740:	4b59      	ldr	r3, [pc, #356]	; (138a8 <main+0x3190>)
   13742:	8859      	ldrh	r1, [r3, #2]
   13744:	4b58      	ldr	r3, [pc, #352]	; (138a8 <main+0x3190>)
   13746:	889b      	ldrh	r3, [r3, #4]
   13748:	001a      	movs	r2, r3
   1374a:	4b5c      	ldr	r3, [pc, #368]	; (138bc <main+0x31a4>)
   1374c:	4798      	blx	r3
			setRightRGB(RGB_Ouptut.RR,RGB_Ouptut.RG,RGB_Ouptut.RB);
   1374e:	4b56      	ldr	r3, [pc, #344]	; (138a8 <main+0x3190>)
   13750:	88d8      	ldrh	r0, [r3, #6]
   13752:	4b55      	ldr	r3, [pc, #340]	; (138a8 <main+0x3190>)
   13754:	8919      	ldrh	r1, [r3, #8]
   13756:	4b54      	ldr	r3, [pc, #336]	; (138a8 <main+0x3190>)
   13758:	895b      	ldrh	r3, [r3, #10]
   1375a:	001a      	movs	r2, r3
   1375c:	4b58      	ldr	r3, [pc, #352]	; (138c0 <main+0x31a8>)
   1375e:	4798      	blx	r3
			if(SIDELIGHTS && lightControlSide()){
   13760:	e010      	b.n	13784 <main+0x306c>
			}
			else {
				if(!TurnSignalOn) {
   13762:	4b58      	ldr	r3, [pc, #352]	; (138c4 <main+0x31ac>)
   13764:	781b      	ldrb	r3, [r3, #0]
   13766:	2201      	movs	r2, #1
   13768:	4053      	eors	r3, r2
   1376a:	b2db      	uxtb	r3, r3
   1376c:	2b00      	cmp	r3, #0
   1376e:	d009      	beq.n	13784 <main+0x306c>
					setLeftRGB(0, 0, 0);
   13770:	2200      	movs	r2, #0
   13772:	2100      	movs	r1, #0
   13774:	2000      	movs	r0, #0
   13776:	4b51      	ldr	r3, [pc, #324]	; (138bc <main+0x31a4>)
   13778:	4798      	blx	r3
					setRightRGB(0, 0, 0);
   1377a:	2200      	movs	r2, #0
   1377c:	2100      	movs	r1, #0
   1377e:	2000      	movs	r0, #0
   13780:	4b4f      	ldr	r3, [pc, #316]	; (138c0 <main+0x31a8>)
   13782:	4798      	blx	r3
				}
			}


			/////////////// Control the head and tail lights //////////////////
			if(HEADLIGHTS && lightControlHead()){
   13784:	4b50      	ldr	r3, [pc, #320]	; (138c8 <main+0x31b0>)
   13786:	781b      	ldrb	r3, [r3, #0]
   13788:	2b00      	cmp	r3, #0
   1378a:	d04b      	beq.n	13824 <main+0x310c>
   1378c:	4b4f      	ldr	r3, [pc, #316]	; (138cc <main+0x31b4>)
   1378e:	4798      	blx	r3
   13790:	1e03      	subs	r3, r0, #0
   13792:	d047      	beq.n	13824 <main+0x310c>
				setWhite(0xFFFF);
   13794:	4b39      	ldr	r3, [pc, #228]	; (1387c <main+0x3164>)
   13796:	0018      	movs	r0, r3
   13798:	4b4d      	ldr	r3, [pc, #308]	; (138d0 <main+0x31b8>)
   1379a:	4798      	blx	r3

				float temp_y = remote_y;
   1379c:	4b4d      	ldr	r3, [pc, #308]	; (138d4 <main+0x31bc>)
   1379e:	781a      	ldrb	r2, [r3, #0]
   137a0:	4b3b      	ldr	r3, [pc, #236]	; (13890 <main+0x3178>)
   137a2:	0010      	movs	r0, r2
   137a4:	4798      	blx	r3
   137a6:	1c03      	adds	r3, r0, #0
   137a8:	617b      	str	r3, [r7, #20]

				if(temp_y < 120){
   137aa:	4b2c      	ldr	r3, [pc, #176]	; (1385c <main+0x3144>)
   137ac:	494a      	ldr	r1, [pc, #296]	; (138d8 <main+0x31c0>)
   137ae:	6978      	ldr	r0, [r7, #20]
   137b0:	4798      	blx	r3
   137b2:	1e03      	subs	r3, r0, #0
   137b4:	d030      	beq.n	13818 <main+0x3100>
					float brake_temp = (((0xFFFF-brake_offset)/120)*(120-temp_y))+brake_offset;
   137b6:	4b49      	ldr	r3, [pc, #292]	; (138dc <main+0x31c4>)
   137b8:	881b      	ldrh	r3, [r3, #0]
   137ba:	001a      	movs	r2, r3
   137bc:	4b2f      	ldr	r3, [pc, #188]	; (1387c <main+0x3164>)
   137be:	1a9a      	subs	r2, r3, r2
   137c0:	4b30      	ldr	r3, [pc, #192]	; (13884 <main+0x316c>)
   137c2:	2178      	movs	r1, #120	; 0x78
   137c4:	0010      	movs	r0, r2
   137c6:	4798      	blx	r3
   137c8:	0003      	movs	r3, r0
   137ca:	001a      	movs	r2, r3
   137cc:	4b44      	ldr	r3, [pc, #272]	; (138e0 <main+0x31c8>)
   137ce:	0010      	movs	r0, r2
   137d0:	4798      	blx	r3
   137d2:	1c04      	adds	r4, r0, #0
   137d4:	4b43      	ldr	r3, [pc, #268]	; (138e4 <main+0x31cc>)
   137d6:	6979      	ldr	r1, [r7, #20]
   137d8:	483f      	ldr	r0, [pc, #252]	; (138d8 <main+0x31c0>)
   137da:	4798      	blx	r3
   137dc:	1c03      	adds	r3, r0, #0
   137de:	1c1a      	adds	r2, r3, #0
   137e0:	4b2d      	ldr	r3, [pc, #180]	; (13898 <main+0x3180>)
   137e2:	1c11      	adds	r1, r2, #0
   137e4:	1c20      	adds	r0, r4, #0
   137e6:	4798      	blx	r3
   137e8:	1c03      	adds	r3, r0, #0
   137ea:	1c1c      	adds	r4, r3, #0
   137ec:	4b3b      	ldr	r3, [pc, #236]	; (138dc <main+0x31c4>)
   137ee:	881b      	ldrh	r3, [r3, #0]
   137f0:	001a      	movs	r2, r3
   137f2:	4b3b      	ldr	r3, [pc, #236]	; (138e0 <main+0x31c8>)
   137f4:	0010      	movs	r0, r2
   137f6:	4798      	blx	r3
   137f8:	1c02      	adds	r2, r0, #0
   137fa:	4b3b      	ldr	r3, [pc, #236]	; (138e8 <main+0x31d0>)
   137fc:	1c11      	adds	r1, r2, #0
   137fe:	1c20      	adds	r0, r4, #0
   13800:	4798      	blx	r3
   13802:	1c03      	adds	r3, r0, #0
   13804:	613b      	str	r3, [r7, #16]
					setRed(brake_temp);
   13806:	4b25      	ldr	r3, [pc, #148]	; (1389c <main+0x3184>)
   13808:	6938      	ldr	r0, [r7, #16]
   1380a:	4798      	blx	r3
   1380c:	0003      	movs	r3, r0
   1380e:	b29b      	uxth	r3, r3
   13810:	0018      	movs	r0, r3
   13812:	4b36      	ldr	r3, [pc, #216]	; (138ec <main+0x31d4>)
   13814:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   13816:	e00c      	b.n	13832 <main+0x311a>
				}
				else
					setRed(brake_offset);
   13818:	4b30      	ldr	r3, [pc, #192]	; (138dc <main+0x31c4>)
   1381a:	881b      	ldrh	r3, [r3, #0]
   1381c:	0018      	movs	r0, r3
   1381e:	4b33      	ldr	r3, [pc, #204]	; (138ec <main+0x31d4>)
   13820:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   13822:	e006      	b.n	13832 <main+0x311a>
			}
			else{
				setWhite(0);
   13824:	2000      	movs	r0, #0
   13826:	4b2a      	ldr	r3, [pc, #168]	; (138d0 <main+0x31b8>)
   13828:	4798      	blx	r3
				setRed(0);
   1382a:	2000      	movs	r0, #0
   1382c:	4b2f      	ldr	r3, [pc, #188]	; (138ec <main+0x31d4>)
   1382e:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   13830:	e010      	b.n	13854 <main+0x313c>
   13832:	e00f      	b.n	13854 <main+0x313c>
			}
		} else {
			setWhite(0);
   13834:	2000      	movs	r0, #0
   13836:	4b26      	ldr	r3, [pc, #152]	; (138d0 <main+0x31b8>)
   13838:	4798      	blx	r3
			setRed(0);
   1383a:	2000      	movs	r0, #0
   1383c:	4b2b      	ldr	r3, [pc, #172]	; (138ec <main+0x31d4>)
   1383e:	4798      	blx	r3
			setLeftRGB(0,0,0);
   13840:	2200      	movs	r2, #0
   13842:	2100      	movs	r1, #0
   13844:	2000      	movs	r0, #0
   13846:	4b1d      	ldr	r3, [pc, #116]	; (138bc <main+0x31a4>)
   13848:	4798      	blx	r3
			setRightRGB(0,0,0);
   1384a:	2200      	movs	r2, #0
   1384c:	2100      	movs	r1, #0
   1384e:	2000      	movs	r0, #0
   13850:	4b1b      	ldr	r3, [pc, #108]	; (138c0 <main+0x31a8>)
   13852:	4798      	blx	r3
		if(configured_comms != esc_comms)
   13854:	f7fd f81d 	bl	10892 <main+0x17a>
   13858:	200003d8 	.word	0x200003d8
   1385c:	00014395 	.word	0x00014395
   13860:	200000c4 	.word	0x200000c4
   13864:	00016d9d 	.word	0x00016d9d
   13868:	000158ad 	.word	0x000158ad
   1386c:	4107ffe8 	.word	0x4107ffe8
   13870:	00016115 	.word	0x00016115
   13874:	00016c41 	.word	0x00016c41
   13878:	000142e9 	.word	0x000142e9
   1387c:	0000ffff 	.word	0x0000ffff
   13880:	20000328 	.word	0x20000328
   13884:	0001411d 	.word	0x0001411d
   13888:	20000326 	.word	0x20000326
   1388c:	200000c8 	.word	0x200000c8
   13890:	00015201 	.word	0x00015201
   13894:	200003ec 	.word	0x200003ec
   13898:	00014ba9 	.word	0x00014ba9
   1389c:	00014439 	.word	0x00014439
   138a0:	2000032c 	.word	0x2000032c
   138a4:	2000032e 	.word	0x2000032e
   138a8:	20000314 	.word	0x20000314
   138ac:	0000b385 	.word	0x0000b385
   138b0:	00016fe5 	.word	0x00016fe5
   138b4:	20000320 	.word	0x20000320
   138b8:	20000321 	.word	0x20000321
   138bc:	0000b201 	.word	0x0000b201
   138c0:	0000b27d 	.word	0x0000b27d
   138c4:	2000039c 	.word	0x2000039c
   138c8:	20000322 	.word	0x20000322
   138cc:	00013c19 	.word	0x00013c19
   138d0:	0000b2f1 	.word	0x0000b2f1
   138d4:	2000030a 	.word	0x2000030a
   138d8:	42f00000 	.word	0x42f00000
   138dc:	200000a0 	.word	0x200000a0
   138e0:	00015161 	.word	0x00015161
   138e4:	00014de9 	.word	0x00014de9
   138e8:	000144a5 	.word	0x000144a5
   138ec:	0000b329 	.word	0x0000b329

000138f0 <getLightSens>:
Tail = tcc0[1]
RB = tcc0[0]
*/


void getLightSens(uint16_t* light_val) {
   138f0:	b580      	push	{r7, lr}
   138f2:	b082      	sub	sp, #8
   138f4:	af00      	add	r7, sp, #0
   138f6:	6078      	str	r0, [r7, #4]
	adc_start_conversion(&adc1);
   138f8:	4b0d      	ldr	r3, [pc, #52]	; (13930 <getLightSens+0x40>)
   138fa:	0018      	movs	r0, r3
   138fc:	4b0d      	ldr	r3, [pc, #52]	; (13934 <getLightSens+0x44>)
   138fe:	4798      	blx	r3
	while(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY);
   13900:	46c0      	nop			; (mov r8, r8)
   13902:	4b0b      	ldr	r3, [pc, #44]	; (13930 <getLightSens+0x40>)
   13904:	0018      	movs	r0, r3
   13906:	4b0c      	ldr	r3, [pc, #48]	; (13938 <getLightSens+0x48>)
   13908:	4798      	blx	r3
   1390a:	0003      	movs	r3, r0
   1390c:	2b01      	cmp	r3, #1
   1390e:	d1f8      	bne.n	13902 <getLightSens+0x12>
	adc_read(&adc1, light_val);
   13910:	687a      	ldr	r2, [r7, #4]
   13912:	4b07      	ldr	r3, [pc, #28]	; (13930 <getLightSens+0x40>)
   13914:	0011      	movs	r1, r2
   13916:	0018      	movs	r0, r3
   13918:	4b08      	ldr	r3, [pc, #32]	; (1393c <getLightSens+0x4c>)
   1391a:	4798      	blx	r3
	adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
   1391c:	4b04      	ldr	r3, [pc, #16]	; (13930 <getLightSens+0x40>)
   1391e:	2101      	movs	r1, #1
   13920:	0018      	movs	r0, r3
   13922:	4b07      	ldr	r3, [pc, #28]	; (13940 <getLightSens+0x50>)
   13924:	4798      	blx	r3
}
   13926:	46c0      	nop			; (mov r8, r8)
   13928:	46bd      	mov	sp, r7
   1392a:	b002      	add	sp, #8
   1392c:	bd80      	pop	{r7, pc}
   1392e:	46c0      	nop			; (mov r8, r8)
   13930:	200009b4 	.word	0x200009b4
   13934:	00008bb1 	.word	0x00008bb1
   13938:	00008ac1 	.word	0x00008ac1
   1393c:	00008bf9 	.word	0x00008bf9
   13940:	00008b15 	.word	0x00008b15

00013944 <averageAX>:

int16_t averageAX(){
   13944:	b580      	push	{r7, lr}
   13946:	b082      	sub	sp, #8
   13948:	af00      	add	r7, sp, #0
	AXtotal -= AXaverage[ACCELsamples-1];
   1394a:	4b1a      	ldr	r3, [pc, #104]	; (139b4 <averageAX+0x70>)
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	4a1a      	ldr	r2, [pc, #104]	; (139b8 <averageAX+0x74>)
   13950:	211c      	movs	r1, #28
   13952:	5e52      	ldrsh	r2, [r2, r1]
   13954:	1a9a      	subs	r2, r3, r2
   13956:	4b17      	ldr	r3, [pc, #92]	; (139b4 <averageAX+0x70>)
   13958:	601a      	str	r2, [r3, #0]
	for(int i = ACCELsamples-1; i > 0; --i){
   1395a:	230e      	movs	r3, #14
   1395c:	607b      	str	r3, [r7, #4]
   1395e:	e00b      	b.n	13978 <averageAX+0x34>
		AXaverage[i] = AXaverage[i-1];
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	1e5a      	subs	r2, r3, #1
   13964:	4b14      	ldr	r3, [pc, #80]	; (139b8 <averageAX+0x74>)
   13966:	0052      	lsls	r2, r2, #1
   13968:	5ed1      	ldrsh	r1, [r2, r3]
   1396a:	4b13      	ldr	r3, [pc, #76]	; (139b8 <averageAX+0x74>)
   1396c:	687a      	ldr	r2, [r7, #4]
   1396e:	0052      	lsls	r2, r2, #1
   13970:	52d1      	strh	r1, [r2, r3]
	for(int i = ACCELsamples-1; i > 0; --i){
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	3b01      	subs	r3, #1
   13976:	607b      	str	r3, [r7, #4]
   13978:	687b      	ldr	r3, [r7, #4]
   1397a:	2b00      	cmp	r3, #0
   1397c:	dcf0      	bgt.n	13960 <averageAX+0x1c>
	}
	AXtotal += cax;
   1397e:	4b0f      	ldr	r3, [pc, #60]	; (139bc <averageAX+0x78>)
   13980:	2200      	movs	r2, #0
   13982:	5e9b      	ldrsh	r3, [r3, r2]
   13984:	001a      	movs	r2, r3
   13986:	4b0b      	ldr	r3, [pc, #44]	; (139b4 <averageAX+0x70>)
   13988:	681b      	ldr	r3, [r3, #0]
   1398a:	18d2      	adds	r2, r2, r3
   1398c:	4b09      	ldr	r3, [pc, #36]	; (139b4 <averageAX+0x70>)
   1398e:	601a      	str	r2, [r3, #0]
	AXaverage[0] = cax;
   13990:	4b0a      	ldr	r3, [pc, #40]	; (139bc <averageAX+0x78>)
   13992:	2200      	movs	r2, #0
   13994:	5e9a      	ldrsh	r2, [r3, r2]
   13996:	4b08      	ldr	r3, [pc, #32]	; (139b8 <averageAX+0x74>)
   13998:	801a      	strh	r2, [r3, #0]

	return (int16_t)(AXtotal/ACCELsamples);
   1399a:	4b06      	ldr	r3, [pc, #24]	; (139b4 <averageAX+0x70>)
   1399c:	681a      	ldr	r2, [r3, #0]
   1399e:	4b08      	ldr	r3, [pc, #32]	; (139c0 <averageAX+0x7c>)
   139a0:	210f      	movs	r1, #15
   139a2:	0010      	movs	r0, r2
   139a4:	4798      	blx	r3
   139a6:	0003      	movs	r3, r0
   139a8:	b21b      	sxth	r3, r3
}
   139aa:	0018      	movs	r0, r3
   139ac:	46bd      	mov	sp, r7
   139ae:	b002      	add	sp, #8
   139b0:	bd80      	pop	{r7, pc}
   139b2:	46c0      	nop			; (mov r8, r8)
   139b4:	200003c4 	.word	0x200003c4
   139b8:	20000a58 	.word	0x20000a58
   139bc:	200002fc 	.word	0x200002fc
   139c0:	0001411d 	.word	0x0001411d

000139c4 <averageAY>:

int16_t averageAY(){
   139c4:	b580      	push	{r7, lr}
   139c6:	b082      	sub	sp, #8
   139c8:	af00      	add	r7, sp, #0
	AYtotal -= AYaverage[ACCELsamples-1];
   139ca:	4b1a      	ldr	r3, [pc, #104]	; (13a34 <averageAY+0x70>)
   139cc:	681b      	ldr	r3, [r3, #0]
   139ce:	4a1a      	ldr	r2, [pc, #104]	; (13a38 <averageAY+0x74>)
   139d0:	211c      	movs	r1, #28
   139d2:	5e52      	ldrsh	r2, [r2, r1]
   139d4:	1a9a      	subs	r2, r3, r2
   139d6:	4b17      	ldr	r3, [pc, #92]	; (13a34 <averageAY+0x70>)
   139d8:	601a      	str	r2, [r3, #0]
	for(int i = ACCELsamples-1; i > 0; --i){
   139da:	230e      	movs	r3, #14
   139dc:	607b      	str	r3, [r7, #4]
   139de:	e00b      	b.n	139f8 <averageAY+0x34>
		AYaverage[i] = AYaverage[i-1];
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	1e5a      	subs	r2, r3, #1
   139e4:	4b14      	ldr	r3, [pc, #80]	; (13a38 <averageAY+0x74>)
   139e6:	0052      	lsls	r2, r2, #1
   139e8:	5ed1      	ldrsh	r1, [r2, r3]
   139ea:	4b13      	ldr	r3, [pc, #76]	; (13a38 <averageAY+0x74>)
   139ec:	687a      	ldr	r2, [r7, #4]
   139ee:	0052      	lsls	r2, r2, #1
   139f0:	52d1      	strh	r1, [r2, r3]
	for(int i = ACCELsamples-1; i > 0; --i){
   139f2:	687b      	ldr	r3, [r7, #4]
   139f4:	3b01      	subs	r3, #1
   139f6:	607b      	str	r3, [r7, #4]
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	2b00      	cmp	r3, #0
   139fc:	dcf0      	bgt.n	139e0 <averageAY+0x1c>
	}
	AYtotal += cay;
   139fe:	4b0f      	ldr	r3, [pc, #60]	; (13a3c <averageAY+0x78>)
   13a00:	2200      	movs	r2, #0
   13a02:	5e9b      	ldrsh	r3, [r3, r2]
   13a04:	001a      	movs	r2, r3
   13a06:	4b0b      	ldr	r3, [pc, #44]	; (13a34 <averageAY+0x70>)
   13a08:	681b      	ldr	r3, [r3, #0]
   13a0a:	18d2      	adds	r2, r2, r3
   13a0c:	4b09      	ldr	r3, [pc, #36]	; (13a34 <averageAY+0x70>)
   13a0e:	601a      	str	r2, [r3, #0]
	AYaverage[0] = cay;
   13a10:	4b0a      	ldr	r3, [pc, #40]	; (13a3c <averageAY+0x78>)
   13a12:	2200      	movs	r2, #0
   13a14:	5e9a      	ldrsh	r2, [r3, r2]
   13a16:	4b08      	ldr	r3, [pc, #32]	; (13a38 <averageAY+0x74>)
   13a18:	801a      	strh	r2, [r3, #0]

	return (int16_t)(AYtotal/ACCELsamples);
   13a1a:	4b06      	ldr	r3, [pc, #24]	; (13a34 <averageAY+0x70>)
   13a1c:	681a      	ldr	r2, [r3, #0]
   13a1e:	4b08      	ldr	r3, [pc, #32]	; (13a40 <averageAY+0x7c>)
   13a20:	210f      	movs	r1, #15
   13a22:	0010      	movs	r0, r2
   13a24:	4798      	blx	r3
   13a26:	0003      	movs	r3, r0
   13a28:	b21b      	sxth	r3, r3
}
   13a2a:	0018      	movs	r0, r3
   13a2c:	46bd      	mov	sp, r7
   13a2e:	b002      	add	sp, #8
   13a30:	bd80      	pop	{r7, pc}
   13a32:	46c0      	nop			; (mov r8, r8)
   13a34:	200003c8 	.word	0x200003c8
   13a38:	20000a1c 	.word	0x20000a1c
   13a3c:	200002fe 	.word	0x200002fe
   13a40:	0001411d 	.word	0x0001411d

00013a44 <sensorControl>:
		AZaverage[0] = azKalman;

		return (int16_t)(AZtotal/ACCELsamples);
}

char sensorControl() {
   13a44:	b580      	push	{r7, lr}
   13a46:	af00      	add	r7, sp, #0
static uint8_t off_type = 0;
static long count = 0;
static bool result = 1;
	if(IMU_CONTROLED){
   13a48:	4b60      	ldr	r3, [pc, #384]	; (13bcc <sensorControl+0x188>)
   13a4a:	781b      	ldrb	r3, [r3, #0]
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	d100      	bne.n	13a52 <sensorControl+0xe>
   13a50:	e0b7      	b.n	13bc2 <sensorControl+0x17e>
		if(result){
   13a52:	4b5f      	ldr	r3, [pc, #380]	; (13bd0 <sensorControl+0x18c>)
   13a54:	781b      	ldrb	r3, [r3, #0]
   13a56:	2b00      	cmp	r3, #0
   13a58:	d057      	beq.n	13b0a <sensorControl+0xc6>
			if(ayKalman >= 1000 && result){
   13a5a:	4b5e      	ldr	r3, [pc, #376]	; (13bd4 <sensorControl+0x190>)
   13a5c:	681a      	ldr	r2, [r3, #0]
   13a5e:	4b5e      	ldr	r3, [pc, #376]	; (13bd8 <sensorControl+0x194>)
   13a60:	495e      	ldr	r1, [pc, #376]	; (13bdc <sensorControl+0x198>)
   13a62:	1c10      	adds	r0, r2, #0
   13a64:	4798      	blx	r3
   13a66:	1e03      	subs	r3, r0, #0
   13a68:	d00c      	beq.n	13a84 <sensorControl+0x40>
   13a6a:	4b59      	ldr	r3, [pc, #356]	; (13bd0 <sensorControl+0x18c>)
   13a6c:	781b      	ldrb	r3, [r3, #0]
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d008      	beq.n	13a84 <sensorControl+0x40>
				count++;
   13a72:	4b5b      	ldr	r3, [pc, #364]	; (13be0 <sensorControl+0x19c>)
   13a74:	681b      	ldr	r3, [r3, #0]
   13a76:	1c5a      	adds	r2, r3, #1
   13a78:	4b59      	ldr	r3, [pc, #356]	; (13be0 <sensorControl+0x19c>)
   13a7a:	601a      	str	r2, [r3, #0]
				off_type = 1;
   13a7c:	4b59      	ldr	r3, [pc, #356]	; (13be4 <sensorControl+0x1a0>)
   13a7e:	2201      	movs	r2, #1
   13a80:	701a      	strb	r2, [r3, #0]
   13a82:	e082      	b.n	13b8a <sensorControl+0x146>
			}
			else if(ayKalman <= -1000 && result){
   13a84:	4b53      	ldr	r3, [pc, #332]	; (13bd4 <sensorControl+0x190>)
   13a86:	681a      	ldr	r2, [r3, #0]
   13a88:	4b57      	ldr	r3, [pc, #348]	; (13be8 <sensorControl+0x1a4>)
   13a8a:	4958      	ldr	r1, [pc, #352]	; (13bec <sensorControl+0x1a8>)
   13a8c:	1c10      	adds	r0, r2, #0
   13a8e:	4798      	blx	r3
   13a90:	1e03      	subs	r3, r0, #0
   13a92:	d00c      	beq.n	13aae <sensorControl+0x6a>
   13a94:	4b4e      	ldr	r3, [pc, #312]	; (13bd0 <sensorControl+0x18c>)
   13a96:	781b      	ldrb	r3, [r3, #0]
   13a98:	2b00      	cmp	r3, #0
   13a9a:	d008      	beq.n	13aae <sensorControl+0x6a>
				count++;
   13a9c:	4b50      	ldr	r3, [pc, #320]	; (13be0 <sensorControl+0x19c>)
   13a9e:	681b      	ldr	r3, [r3, #0]
   13aa0:	1c5a      	adds	r2, r3, #1
   13aa2:	4b4f      	ldr	r3, [pc, #316]	; (13be0 <sensorControl+0x19c>)
   13aa4:	601a      	str	r2, [r3, #0]
				off_type = 2;
   13aa6:	4b4f      	ldr	r3, [pc, #316]	; (13be4 <sensorControl+0x1a0>)
   13aa8:	2202      	movs	r2, #2
   13aaa:	701a      	strb	r2, [r3, #0]
   13aac:	e06d      	b.n	13b8a <sensorControl+0x146>
			}
			else if(axKalman >= 1250 && result){
   13aae:	4b50      	ldr	r3, [pc, #320]	; (13bf0 <sensorControl+0x1ac>)
   13ab0:	681a      	ldr	r2, [r3, #0]
   13ab2:	4b49      	ldr	r3, [pc, #292]	; (13bd8 <sensorControl+0x194>)
   13ab4:	494f      	ldr	r1, [pc, #316]	; (13bf4 <sensorControl+0x1b0>)
   13ab6:	1c10      	adds	r0, r2, #0
   13ab8:	4798      	blx	r3
   13aba:	1e03      	subs	r3, r0, #0
   13abc:	d00c      	beq.n	13ad8 <sensorControl+0x94>
   13abe:	4b44      	ldr	r3, [pc, #272]	; (13bd0 <sensorControl+0x18c>)
   13ac0:	781b      	ldrb	r3, [r3, #0]
   13ac2:	2b00      	cmp	r3, #0
   13ac4:	d008      	beq.n	13ad8 <sensorControl+0x94>
				count++;
   13ac6:	4b46      	ldr	r3, [pc, #280]	; (13be0 <sensorControl+0x19c>)
   13ac8:	681b      	ldr	r3, [r3, #0]
   13aca:	1c5a      	adds	r2, r3, #1
   13acc:	4b44      	ldr	r3, [pc, #272]	; (13be0 <sensorControl+0x19c>)
   13ace:	601a      	str	r2, [r3, #0]
				off_type = 3;
   13ad0:	4b44      	ldr	r3, [pc, #272]	; (13be4 <sensorControl+0x1a0>)
   13ad2:	2203      	movs	r2, #3
   13ad4:	701a      	strb	r2, [r3, #0]
   13ad6:	e058      	b.n	13b8a <sensorControl+0x146>
			}
			else if(axKalman <= -1250 && result){
   13ad8:	4b45      	ldr	r3, [pc, #276]	; (13bf0 <sensorControl+0x1ac>)
   13ada:	681a      	ldr	r2, [r3, #0]
   13adc:	4b42      	ldr	r3, [pc, #264]	; (13be8 <sensorControl+0x1a4>)
   13ade:	4946      	ldr	r1, [pc, #280]	; (13bf8 <sensorControl+0x1b4>)
   13ae0:	1c10      	adds	r0, r2, #0
   13ae2:	4798      	blx	r3
   13ae4:	1e03      	subs	r3, r0, #0
   13ae6:	d00c      	beq.n	13b02 <sensorControl+0xbe>
   13ae8:	4b39      	ldr	r3, [pc, #228]	; (13bd0 <sensorControl+0x18c>)
   13aea:	781b      	ldrb	r3, [r3, #0]
   13aec:	2b00      	cmp	r3, #0
   13aee:	d008      	beq.n	13b02 <sensorControl+0xbe>
				count++;
   13af0:	4b3b      	ldr	r3, [pc, #236]	; (13be0 <sensorControl+0x19c>)
   13af2:	681b      	ldr	r3, [r3, #0]
   13af4:	1c5a      	adds	r2, r3, #1
   13af6:	4b3a      	ldr	r3, [pc, #232]	; (13be0 <sensorControl+0x19c>)
   13af8:	601a      	str	r2, [r3, #0]
				off_type = 4;
   13afa:	4b3a      	ldr	r3, [pc, #232]	; (13be4 <sensorControl+0x1a0>)
   13afc:	2204      	movs	r2, #4
   13afe:	701a      	strb	r2, [r3, #0]
   13b00:	e043      	b.n	13b8a <sensorControl+0x146>
			}
			else
				count = 0;
   13b02:	4b37      	ldr	r3, [pc, #220]	; (13be0 <sensorControl+0x19c>)
   13b04:	2200      	movs	r2, #0
   13b06:	601a      	str	r2, [r3, #0]
   13b08:	e03f      	b.n	13b8a <sensorControl+0x146>
		}
		else if(!result){
   13b0a:	4b31      	ldr	r3, [pc, #196]	; (13bd0 <sensorControl+0x18c>)
   13b0c:	781b      	ldrb	r3, [r3, #0]
   13b0e:	2201      	movs	r2, #1
   13b10:	4053      	eors	r3, r2
   13b12:	b2db      	uxtb	r3, r3
   13b14:	2b00      	cmp	r3, #0
   13b16:	d038      	beq.n	13b8a <sensorControl+0x146>
			if((ayKalman < 750 && off_type == 1) || (ayKalman > -750 && off_type == 2) || (axKalman < 1000 && off_type == 3) || (axKalman > -1000 && off_type == 4)){
   13b18:	4b2e      	ldr	r3, [pc, #184]	; (13bd4 <sensorControl+0x190>)
   13b1a:	681a      	ldr	r2, [r3, #0]
   13b1c:	4b37      	ldr	r3, [pc, #220]	; (13bfc <sensorControl+0x1b8>)
   13b1e:	4938      	ldr	r1, [pc, #224]	; (13c00 <sensorControl+0x1bc>)
   13b20:	1c10      	adds	r0, r2, #0
   13b22:	4798      	blx	r3
   13b24:	1e03      	subs	r3, r0, #0
   13b26:	d003      	beq.n	13b30 <sensorControl+0xec>
   13b28:	4b2e      	ldr	r3, [pc, #184]	; (13be4 <sensorControl+0x1a0>)
   13b2a:	781b      	ldrb	r3, [r3, #0]
   13b2c:	2b01      	cmp	r3, #1
   13b2e:	d023      	beq.n	13b78 <sensorControl+0x134>
   13b30:	4b28      	ldr	r3, [pc, #160]	; (13bd4 <sensorControl+0x190>)
   13b32:	681a      	ldr	r2, [r3, #0]
   13b34:	4b33      	ldr	r3, [pc, #204]	; (13c04 <sensorControl+0x1c0>)
   13b36:	4934      	ldr	r1, [pc, #208]	; (13c08 <sensorControl+0x1c4>)
   13b38:	1c10      	adds	r0, r2, #0
   13b3a:	4798      	blx	r3
   13b3c:	1e03      	subs	r3, r0, #0
   13b3e:	d003      	beq.n	13b48 <sensorControl+0x104>
   13b40:	4b28      	ldr	r3, [pc, #160]	; (13be4 <sensorControl+0x1a0>)
   13b42:	781b      	ldrb	r3, [r3, #0]
   13b44:	2b02      	cmp	r3, #2
   13b46:	d017      	beq.n	13b78 <sensorControl+0x134>
   13b48:	4b29      	ldr	r3, [pc, #164]	; (13bf0 <sensorControl+0x1ac>)
   13b4a:	681a      	ldr	r2, [r3, #0]
   13b4c:	4b2b      	ldr	r3, [pc, #172]	; (13bfc <sensorControl+0x1b8>)
   13b4e:	4923      	ldr	r1, [pc, #140]	; (13bdc <sensorControl+0x198>)
   13b50:	1c10      	adds	r0, r2, #0
   13b52:	4798      	blx	r3
   13b54:	1e03      	subs	r3, r0, #0
   13b56:	d003      	beq.n	13b60 <sensorControl+0x11c>
   13b58:	4b22      	ldr	r3, [pc, #136]	; (13be4 <sensorControl+0x1a0>)
   13b5a:	781b      	ldrb	r3, [r3, #0]
   13b5c:	2b03      	cmp	r3, #3
   13b5e:	d00b      	beq.n	13b78 <sensorControl+0x134>
   13b60:	4b23      	ldr	r3, [pc, #140]	; (13bf0 <sensorControl+0x1ac>)
   13b62:	681a      	ldr	r2, [r3, #0]
   13b64:	4b27      	ldr	r3, [pc, #156]	; (13c04 <sensorControl+0x1c0>)
   13b66:	4921      	ldr	r1, [pc, #132]	; (13bec <sensorControl+0x1a8>)
   13b68:	1c10      	adds	r0, r2, #0
   13b6a:	4798      	blx	r3
   13b6c:	1e03      	subs	r3, r0, #0
   13b6e:	d009      	beq.n	13b84 <sensorControl+0x140>
   13b70:	4b1c      	ldr	r3, [pc, #112]	; (13be4 <sensorControl+0x1a0>)
   13b72:	781b      	ldrb	r3, [r3, #0]
   13b74:	2b04      	cmp	r3, #4
   13b76:	d105      	bne.n	13b84 <sensorControl+0x140>
				count++;
   13b78:	4b19      	ldr	r3, [pc, #100]	; (13be0 <sensorControl+0x19c>)
   13b7a:	681b      	ldr	r3, [r3, #0]
   13b7c:	1c5a      	adds	r2, r3, #1
   13b7e:	4b18      	ldr	r3, [pc, #96]	; (13be0 <sensorControl+0x19c>)
   13b80:	601a      	str	r2, [r3, #0]
   13b82:	e002      	b.n	13b8a <sensorControl+0x146>
			}
			else
				count = 0;
   13b84:	4b16      	ldr	r3, [pc, #88]	; (13be0 <sensorControl+0x19c>)
   13b86:	2200      	movs	r2, #0
   13b88:	601a      	str	r2, [r3, #0]
		}
		
		if(count > 6)
   13b8a:	4b15      	ldr	r3, [pc, #84]	; (13be0 <sensorControl+0x19c>)
   13b8c:	681b      	ldr	r3, [r3, #0]
   13b8e:	2b06      	cmp	r3, #6
   13b90:	dd0d      	ble.n	13bae <sensorControl+0x16a>
			result = !result;
   13b92:	4b0f      	ldr	r3, [pc, #60]	; (13bd0 <sensorControl+0x18c>)
   13b94:	781b      	ldrb	r3, [r3, #0]
   13b96:	1e5a      	subs	r2, r3, #1
   13b98:	4193      	sbcs	r3, r2
   13b9a:	b2db      	uxtb	r3, r3
   13b9c:	2201      	movs	r2, #1
   13b9e:	4053      	eors	r3, r2
   13ba0:	b2db      	uxtb	r3, r3
   13ba2:	1c1a      	adds	r2, r3, #0
   13ba4:	2301      	movs	r3, #1
   13ba6:	4013      	ands	r3, r2
   13ba8:	b2da      	uxtb	r2, r3
   13baa:	4b09      	ldr	r3, [pc, #36]	; (13bd0 <sensorControl+0x18c>)
   13bac:	701a      	strb	r2, [r3, #0]

		if(result)
   13bae:	4b08      	ldr	r3, [pc, #32]	; (13bd0 <sensorControl+0x18c>)
   13bb0:	781b      	ldrb	r3, [r3, #0]
   13bb2:	2b00      	cmp	r3, #0
   13bb4:	d002      	beq.n	13bbc <sensorControl+0x178>
			off_type = 0;
   13bb6:	4b0b      	ldr	r3, [pc, #44]	; (13be4 <sensorControl+0x1a0>)
   13bb8:	2200      	movs	r2, #0
   13bba:	701a      	strb	r2, [r3, #0]

		return result;
   13bbc:	4b04      	ldr	r3, [pc, #16]	; (13bd0 <sensorControl+0x18c>)
   13bbe:	781b      	ldrb	r3, [r3, #0]
   13bc0:	e000      	b.n	13bc4 <sensorControl+0x180>
	}
	else
		return 1;
   13bc2:	2301      	movs	r3, #1
}
   13bc4:	0018      	movs	r0, r3
   13bc6:	46bd      	mov	sp, r7
   13bc8:	bd80      	pop	{r7, pc}
   13bca:	46c0      	nop			; (mov r8, r8)
   13bcc:	20000324 	.word	0x20000324
   13bd0:	200000e4 	.word	0x200000e4
   13bd4:	200003d4 	.word	0x200003d4
   13bd8:	000143d1 	.word	0x000143d1
   13bdc:	447a0000 	.word	0x447a0000
   13be0:	200003f0 	.word	0x200003f0
   13be4:	200003f4 	.word	0x200003f4
   13be8:	000143a9 	.word	0x000143a9
   13bec:	c47a0000 	.word	0xc47a0000
   13bf0:	200003d0 	.word	0x200003d0
   13bf4:	449c4000 	.word	0x449c4000
   13bf8:	c49c4000 	.word	0xc49c4000
   13bfc:	00014395 	.word	0x00014395
   13c00:	443b8000 	.word	0x443b8000
   13c04:	000143bd 	.word	0x000143bd
   13c08:	c43b8000 	.word	0xc43b8000

00013c0c <lightControlSide>:



char lightControlSide() {
   13c0c:	b580      	push	{r7, lr}
   13c0e:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
   13c10:	2301      	movs	r3, #1
}
   13c12:	0018      	movs	r0, r3
   13c14:	46bd      	mov	sp, r7
   13c16:	bd80      	pop	{r7, pc}

00013c18 <lightControlHead>:

char lightControlHead() {
   13c18:	b580      	push	{r7, lr}
   13c1a:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
   13c1c:	2301      	movs	r3, #1
}
   13c1e:	0018      	movs	r0, r3
   13c20:	46bd      	mov	sp, r7
   13c22:	bd80      	pop	{r7, pc}

00013c24 <initKalman>:

void initKalman(float meas, float est, float _q)
{
   13c24:	b580      	push	{r7, lr}
   13c26:	b086      	sub	sp, #24
   13c28:	af00      	add	r7, sp, #0
   13c2a:	60f8      	str	r0, [r7, #12]
   13c2c:	60b9      	str	r1, [r7, #8]
   13c2e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < KalmanArraySize; i++){
   13c30:	2300      	movs	r3, #0
   13c32:	617b      	str	r3, [r7, #20]
   13c34:	e020      	b.n	13c78 <initKalman+0x54>
		err_measure[i] = meas;
   13c36:	4b26      	ldr	r3, [pc, #152]	; (13cd0 <initKalman+0xac>)
   13c38:	697a      	ldr	r2, [r7, #20]
   13c3a:	0092      	lsls	r2, r2, #2
   13c3c:	68f9      	ldr	r1, [r7, #12]
   13c3e:	50d1      	str	r1, [r2, r3]
		err_estimate[i] = est;
   13c40:	4b24      	ldr	r3, [pc, #144]	; (13cd4 <initKalman+0xb0>)
   13c42:	697a      	ldr	r2, [r7, #20]
   13c44:	0092      	lsls	r2, r2, #2
   13c46:	68b9      	ldr	r1, [r7, #8]
   13c48:	50d1      	str	r1, [r2, r3]
		q[i] = _q;
   13c4a:	4b23      	ldr	r3, [pc, #140]	; (13cd8 <initKalman+0xb4>)
   13c4c:	697a      	ldr	r2, [r7, #20]
   13c4e:	0092      	lsls	r2, r2, #2
   13c50:	6879      	ldr	r1, [r7, #4]
   13c52:	50d1      	str	r1, [r2, r3]
		current_estimate[i] = 0;
   13c54:	4b21      	ldr	r3, [pc, #132]	; (13cdc <initKalman+0xb8>)
   13c56:	697a      	ldr	r2, [r7, #20]
   13c58:	0092      	lsls	r2, r2, #2
   13c5a:	2100      	movs	r1, #0
   13c5c:	50d1      	str	r1, [r2, r3]
		last_estimate[i] = 0;
   13c5e:	4b20      	ldr	r3, [pc, #128]	; (13ce0 <initKalman+0xbc>)
   13c60:	697a      	ldr	r2, [r7, #20]
   13c62:	0092      	lsls	r2, r2, #2
   13c64:	2100      	movs	r1, #0
   13c66:	50d1      	str	r1, [r2, r3]
		kalman_gain[i] = 0;
   13c68:	4b1e      	ldr	r3, [pc, #120]	; (13ce4 <initKalman+0xc0>)
   13c6a:	697a      	ldr	r2, [r7, #20]
   13c6c:	0092      	lsls	r2, r2, #2
   13c6e:	2100      	movs	r1, #0
   13c70:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < KalmanArraySize; i++){
   13c72:	697b      	ldr	r3, [r7, #20]
   13c74:	3301      	adds	r3, #1
   13c76:	617b      	str	r3, [r7, #20]
   13c78:	697b      	ldr	r3, [r7, #20]
   13c7a:	2b06      	cmp	r3, #6
   13c7c:	dddb      	ble.n	13c36 <initKalman+0x12>
	}

	err_measure[ax_kalman] = 15;
   13c7e:	4b14      	ldr	r3, [pc, #80]	; (13cd0 <initKalman+0xac>)
   13c80:	4a19      	ldr	r2, [pc, #100]	; (13ce8 <initKalman+0xc4>)
   13c82:	601a      	str	r2, [r3, #0]
	err_estimate[ax_kalman] = 15;
   13c84:	4b13      	ldr	r3, [pc, #76]	; (13cd4 <initKalman+0xb0>)
   13c86:	4a18      	ldr	r2, [pc, #96]	; (13ce8 <initKalman+0xc4>)
   13c88:	601a      	str	r2, [r3, #0]
	q[ax_kalman] = 0.3;
   13c8a:	4b13      	ldr	r3, [pc, #76]	; (13cd8 <initKalman+0xb4>)
   13c8c:	4a17      	ldr	r2, [pc, #92]	; (13cec <initKalman+0xc8>)
   13c8e:	601a      	str	r2, [r3, #0]

	err_measure[ay_kalman] = 15;
   13c90:	4b0f      	ldr	r3, [pc, #60]	; (13cd0 <initKalman+0xac>)
   13c92:	4a15      	ldr	r2, [pc, #84]	; (13ce8 <initKalman+0xc4>)
   13c94:	605a      	str	r2, [r3, #4]
	err_estimate[ay_kalman] = 15;
   13c96:	4b0f      	ldr	r3, [pc, #60]	; (13cd4 <initKalman+0xb0>)
   13c98:	4a13      	ldr	r2, [pc, #76]	; (13ce8 <initKalman+0xc4>)
   13c9a:	605a      	str	r2, [r3, #4]
	q[ay_kalman] = 0.3;
   13c9c:	4b0e      	ldr	r3, [pc, #56]	; (13cd8 <initKalman+0xb4>)
   13c9e:	4a13      	ldr	r2, [pc, #76]	; (13cec <initKalman+0xc8>)
   13ca0:	605a      	str	r2, [r3, #4]

// 	err_measure[ay_kalman] = 20;
// 	err_estimate[ay_kalman] = 20;
// 	q[ay_kalman] = 0.8;

	err_measure[az_kalman] = 30;
   13ca2:	4b0b      	ldr	r3, [pc, #44]	; (13cd0 <initKalman+0xac>)
   13ca4:	4a12      	ldr	r2, [pc, #72]	; (13cf0 <initKalman+0xcc>)
   13ca6:	609a      	str	r2, [r3, #8]
	err_estimate[az_kalman] = 30;
   13ca8:	4b0a      	ldr	r3, [pc, #40]	; (13cd4 <initKalman+0xb0>)
   13caa:	4a11      	ldr	r2, [pc, #68]	; (13cf0 <initKalman+0xcc>)
   13cac:	609a      	str	r2, [r3, #8]
	q[az_kalman] = 0.3;
   13cae:	4b0a      	ldr	r3, [pc, #40]	; (13cd8 <initKalman+0xb4>)
   13cb0:	4a0e      	ldr	r2, [pc, #56]	; (13cec <initKalman+0xc8>)
   13cb2:	609a      	str	r2, [r3, #8]
// 	
// 	err_measure[gz_kalman] = 0.1;
// 	err_estimate[gz_kalman] = 1;
// 	q[gz_kalman] = 0.99;

	err_measure[light_kalman] = 200;
   13cb4:	4b06      	ldr	r3, [pc, #24]	; (13cd0 <initKalman+0xac>)
   13cb6:	4a0f      	ldr	r2, [pc, #60]	; (13cf4 <initKalman+0xd0>)
   13cb8:	619a      	str	r2, [r3, #24]
	err_estimate[light_kalman] = 200;
   13cba:	4b06      	ldr	r3, [pc, #24]	; (13cd4 <initKalman+0xb0>)
   13cbc:	4a0d      	ldr	r2, [pc, #52]	; (13cf4 <initKalman+0xd0>)
   13cbe:	619a      	str	r2, [r3, #24]
	q[light_kalman] = 0.008;
   13cc0:	4b05      	ldr	r3, [pc, #20]	; (13cd8 <initKalman+0xb4>)
   13cc2:	4a0d      	ldr	r2, [pc, #52]	; (13cf8 <initKalman+0xd4>)
   13cc4:	619a      	str	r2, [r3, #24]
}
   13cc6:	46c0      	nop			; (mov r8, r8)
   13cc8:	46bd      	mov	sp, r7
   13cca:	b006      	add	sp, #24
   13ccc:	bd80      	pop	{r7, pc}
   13cce:	46c0      	nop			; (mov r8, r8)
   13cd0:	20000c80 	.word	0x20000c80
   13cd4:	200009c4 	.word	0x200009c4
   13cd8:	20000fb8 	.word	0x20000fb8
   13cdc:	20000a3c 	.word	0x20000a3c
   13ce0:	2000090c 	.word	0x2000090c
   13ce4:	20000ee8 	.word	0x20000ee8
   13ce8:	41700000 	.word	0x41700000
   13cec:	3e99999a 	.word	0x3e99999a
   13cf0:	41f00000 	.word	0x41f00000
   13cf4:	43480000 	.word	0x43480000
   13cf8:	3c03126f 	.word	0x3c03126f

00013cfc <updateKalman>:

float updateKalman(float meas, int kalmanIndex)
{
   13cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cfe:	b083      	sub	sp, #12
   13d00:	af00      	add	r7, sp, #0
   13d02:	6078      	str	r0, [r7, #4]
   13d04:	6039      	str	r1, [r7, #0]
	  kalman_gain[kalmanIndex] = err_estimate[kalmanIndex]/(err_estimate[kalmanIndex] + err_measure[kalmanIndex]);
   13d06:	4b5e      	ldr	r3, [pc, #376]	; (13e80 <updateKalman+0x184>)
   13d08:	683a      	ldr	r2, [r7, #0]
   13d0a:	0092      	lsls	r2, r2, #2
   13d0c:	58d4      	ldr	r4, [r2, r3]
   13d0e:	4b5c      	ldr	r3, [pc, #368]	; (13e80 <updateKalman+0x184>)
   13d10:	683a      	ldr	r2, [r7, #0]
   13d12:	0092      	lsls	r2, r2, #2
   13d14:	58d0      	ldr	r0, [r2, r3]
   13d16:	4b5b      	ldr	r3, [pc, #364]	; (13e84 <updateKalman+0x188>)
   13d18:	683a      	ldr	r2, [r7, #0]
   13d1a:	0092      	lsls	r2, r2, #2
   13d1c:	58d2      	ldr	r2, [r2, r3]
   13d1e:	4b5a      	ldr	r3, [pc, #360]	; (13e88 <updateKalman+0x18c>)
   13d20:	1c11      	adds	r1, r2, #0
   13d22:	4798      	blx	r3
   13d24:	1c03      	adds	r3, r0, #0
   13d26:	1c1a      	adds	r2, r3, #0
   13d28:	4b58      	ldr	r3, [pc, #352]	; (13e8c <updateKalman+0x190>)
   13d2a:	1c11      	adds	r1, r2, #0
   13d2c:	1c20      	adds	r0, r4, #0
   13d2e:	4798      	blx	r3
   13d30:	1c03      	adds	r3, r0, #0
   13d32:	1c19      	adds	r1, r3, #0
   13d34:	4b56      	ldr	r3, [pc, #344]	; (13e90 <updateKalman+0x194>)
   13d36:	683a      	ldr	r2, [r7, #0]
   13d38:	0092      	lsls	r2, r2, #2
   13d3a:	50d1      	str	r1, [r2, r3]
	  kalman_gain[kalmanIndex] = max(kalman_gain[kalmanIndex],0.015);
   13d3c:	4b54      	ldr	r3, [pc, #336]	; (13e90 <updateKalman+0x194>)
   13d3e:	683a      	ldr	r2, [r7, #0]
   13d40:	0092      	lsls	r2, r2, #2
   13d42:	58d2      	ldr	r2, [r2, r3]
   13d44:	4b53      	ldr	r3, [pc, #332]	; (13e94 <updateKalman+0x198>)
   13d46:	1c10      	adds	r0, r2, #0
   13d48:	4798      	blx	r3
   13d4a:	4c53      	ldr	r4, [pc, #332]	; (13e98 <updateKalman+0x19c>)
   13d4c:	4a53      	ldr	r2, [pc, #332]	; (13e9c <updateKalman+0x1a0>)
   13d4e:	4b54      	ldr	r3, [pc, #336]	; (13ea0 <updateKalman+0x1a4>)
   13d50:	47a0      	blx	r4
   13d52:	1e03      	subs	r3, r0, #0
   13d54:	d004      	beq.n	13d60 <updateKalman+0x64>
   13d56:	4b4e      	ldr	r3, [pc, #312]	; (13e90 <updateKalman+0x194>)
   13d58:	683a      	ldr	r2, [r7, #0]
   13d5a:	0092      	lsls	r2, r2, #2
   13d5c:	58d3      	ldr	r3, [r2, r3]
   13d5e:	e000      	b.n	13d62 <updateKalman+0x66>
   13d60:	4b50      	ldr	r3, [pc, #320]	; (13ea4 <updateKalman+0x1a8>)
   13d62:	4a4b      	ldr	r2, [pc, #300]	; (13e90 <updateKalman+0x194>)
   13d64:	6839      	ldr	r1, [r7, #0]
   13d66:	0089      	lsls	r1, r1, #2
   13d68:	508b      	str	r3, [r1, r2]
	  current_estimate[kalmanIndex] = last_estimate[kalmanIndex] + kalman_gain[kalmanIndex] * (meas - last_estimate[kalmanIndex]);
   13d6a:	4b4f      	ldr	r3, [pc, #316]	; (13ea8 <updateKalman+0x1ac>)
   13d6c:	683a      	ldr	r2, [r7, #0]
   13d6e:	0092      	lsls	r2, r2, #2
   13d70:	58d4      	ldr	r4, [r2, r3]
   13d72:	4b47      	ldr	r3, [pc, #284]	; (13e90 <updateKalman+0x194>)
   13d74:	683a      	ldr	r2, [r7, #0]
   13d76:	0092      	lsls	r2, r2, #2
   13d78:	58d5      	ldr	r5, [r2, r3]
   13d7a:	4b4b      	ldr	r3, [pc, #300]	; (13ea8 <updateKalman+0x1ac>)
   13d7c:	683a      	ldr	r2, [r7, #0]
   13d7e:	0092      	lsls	r2, r2, #2
   13d80:	58d2      	ldr	r2, [r2, r3]
   13d82:	4b4a      	ldr	r3, [pc, #296]	; (13eac <updateKalman+0x1b0>)
   13d84:	1c11      	adds	r1, r2, #0
   13d86:	6878      	ldr	r0, [r7, #4]
   13d88:	4798      	blx	r3
   13d8a:	1c03      	adds	r3, r0, #0
   13d8c:	1c1a      	adds	r2, r3, #0
   13d8e:	4b48      	ldr	r3, [pc, #288]	; (13eb0 <updateKalman+0x1b4>)
   13d90:	1c11      	adds	r1, r2, #0
   13d92:	1c28      	adds	r0, r5, #0
   13d94:	4798      	blx	r3
   13d96:	1c03      	adds	r3, r0, #0
   13d98:	1c1a      	adds	r2, r3, #0
   13d9a:	4b3b      	ldr	r3, [pc, #236]	; (13e88 <updateKalman+0x18c>)
   13d9c:	1c11      	adds	r1, r2, #0
   13d9e:	1c20      	adds	r0, r4, #0
   13da0:	4798      	blx	r3
   13da2:	1c03      	adds	r3, r0, #0
   13da4:	1c19      	adds	r1, r3, #0
   13da6:	4b43      	ldr	r3, [pc, #268]	; (13eb4 <updateKalman+0x1b8>)
   13da8:	683a      	ldr	r2, [r7, #0]
   13daa:	0092      	lsls	r2, r2, #2
   13dac:	50d1      	str	r1, [r2, r3]
	  err_estimate[kalmanIndex] =  (1.0 - kalman_gain[kalmanIndex])*err_estimate[kalmanIndex] + abs(last_estimate[kalmanIndex]-current_estimate[kalmanIndex])*q[kalmanIndex];
   13dae:	4b38      	ldr	r3, [pc, #224]	; (13e90 <updateKalman+0x194>)
   13db0:	683a      	ldr	r2, [r7, #0]
   13db2:	0092      	lsls	r2, r2, #2
   13db4:	58d2      	ldr	r2, [r2, r3]
   13db6:	4b37      	ldr	r3, [pc, #220]	; (13e94 <updateKalman+0x198>)
   13db8:	1c10      	adds	r0, r2, #0
   13dba:	4798      	blx	r3
   13dbc:	0002      	movs	r2, r0
   13dbe:	000b      	movs	r3, r1
   13dc0:	4c3d      	ldr	r4, [pc, #244]	; (13eb8 <updateKalman+0x1bc>)
   13dc2:	2000      	movs	r0, #0
   13dc4:	493d      	ldr	r1, [pc, #244]	; (13ebc <updateKalman+0x1c0>)
   13dc6:	47a0      	blx	r4
   13dc8:	0003      	movs	r3, r0
   13dca:	000c      	movs	r4, r1
   13dcc:	001d      	movs	r5, r3
   13dce:	0026      	movs	r6, r4
   13dd0:	4b2b      	ldr	r3, [pc, #172]	; (13e80 <updateKalman+0x184>)
   13dd2:	683a      	ldr	r2, [r7, #0]
   13dd4:	0092      	lsls	r2, r2, #2
   13dd6:	58d2      	ldr	r2, [r2, r3]
   13dd8:	4b2e      	ldr	r3, [pc, #184]	; (13e94 <updateKalman+0x198>)
   13dda:	1c10      	adds	r0, r2, #0
   13ddc:	4798      	blx	r3
   13dde:	0002      	movs	r2, r0
   13de0:	000b      	movs	r3, r1
   13de2:	4c37      	ldr	r4, [pc, #220]	; (13ec0 <updateKalman+0x1c4>)
   13de4:	0028      	movs	r0, r5
   13de6:	0031      	movs	r1, r6
   13de8:	47a0      	blx	r4
   13dea:	0003      	movs	r3, r0
   13dec:	000c      	movs	r4, r1
   13dee:	001d      	movs	r5, r3
   13df0:	0026      	movs	r6, r4
   13df2:	4b2d      	ldr	r3, [pc, #180]	; (13ea8 <updateKalman+0x1ac>)
   13df4:	683a      	ldr	r2, [r7, #0]
   13df6:	0092      	lsls	r2, r2, #2
   13df8:	58d0      	ldr	r0, [r2, r3]
   13dfa:	4b2e      	ldr	r3, [pc, #184]	; (13eb4 <updateKalman+0x1b8>)
   13dfc:	683a      	ldr	r2, [r7, #0]
   13dfe:	0092      	lsls	r2, r2, #2
   13e00:	58d2      	ldr	r2, [r2, r3]
   13e02:	4b2a      	ldr	r3, [pc, #168]	; (13eac <updateKalman+0x1b0>)
   13e04:	1c11      	adds	r1, r2, #0
   13e06:	4798      	blx	r3
   13e08:	1c03      	adds	r3, r0, #0
   13e0a:	1c1a      	adds	r2, r3, #0
   13e0c:	4b2d      	ldr	r3, [pc, #180]	; (13ec4 <updateKalman+0x1c8>)
   13e0e:	1c10      	adds	r0, r2, #0
   13e10:	4798      	blx	r3
   13e12:	0003      	movs	r3, r0
   13e14:	17d9      	asrs	r1, r3, #31
   13e16:	185a      	adds	r2, r3, r1
   13e18:	404a      	eors	r2, r1
   13e1a:	4b2b      	ldr	r3, [pc, #172]	; (13ec8 <updateKalman+0x1cc>)
   13e1c:	0010      	movs	r0, r2
   13e1e:	4798      	blx	r3
   13e20:	4b2a      	ldr	r3, [pc, #168]	; (13ecc <updateKalman+0x1d0>)
   13e22:	683a      	ldr	r2, [r7, #0]
   13e24:	0092      	lsls	r2, r2, #2
   13e26:	58d2      	ldr	r2, [r2, r3]
   13e28:	4b21      	ldr	r3, [pc, #132]	; (13eb0 <updateKalman+0x1b4>)
   13e2a:	1c11      	adds	r1, r2, #0
   13e2c:	4798      	blx	r3
   13e2e:	1c03      	adds	r3, r0, #0
   13e30:	1c1a      	adds	r2, r3, #0
   13e32:	4b18      	ldr	r3, [pc, #96]	; (13e94 <updateKalman+0x198>)
   13e34:	1c10      	adds	r0, r2, #0
   13e36:	4798      	blx	r3
   13e38:	0002      	movs	r2, r0
   13e3a:	000b      	movs	r3, r1
   13e3c:	4c24      	ldr	r4, [pc, #144]	; (13ed0 <updateKalman+0x1d4>)
   13e3e:	0028      	movs	r0, r5
   13e40:	0031      	movs	r1, r6
   13e42:	47a0      	blx	r4
   13e44:	0003      	movs	r3, r0
   13e46:	000c      	movs	r4, r1
   13e48:	0019      	movs	r1, r3
   13e4a:	0022      	movs	r2, r4
   13e4c:	4b21      	ldr	r3, [pc, #132]	; (13ed4 <updateKalman+0x1d8>)
   13e4e:	0008      	movs	r0, r1
   13e50:	0011      	movs	r1, r2
   13e52:	4798      	blx	r3
   13e54:	1c01      	adds	r1, r0, #0
   13e56:	4b0a      	ldr	r3, [pc, #40]	; (13e80 <updateKalman+0x184>)
   13e58:	683a      	ldr	r2, [r7, #0]
   13e5a:	0092      	lsls	r2, r2, #2
   13e5c:	50d1      	str	r1, [r2, r3]
	  last_estimate[kalmanIndex]=current_estimate[kalmanIndex];
   13e5e:	4b15      	ldr	r3, [pc, #84]	; (13eb4 <updateKalman+0x1b8>)
   13e60:	683a      	ldr	r2, [r7, #0]
   13e62:	0092      	lsls	r2, r2, #2
   13e64:	58d1      	ldr	r1, [r2, r3]
   13e66:	4b10      	ldr	r3, [pc, #64]	; (13ea8 <updateKalman+0x1ac>)
   13e68:	683a      	ldr	r2, [r7, #0]
   13e6a:	0092      	lsls	r2, r2, #2
   13e6c:	50d1      	str	r1, [r2, r3]

	  return current_estimate[kalmanIndex];
   13e6e:	4b11      	ldr	r3, [pc, #68]	; (13eb4 <updateKalman+0x1b8>)
   13e70:	683a      	ldr	r2, [r7, #0]
   13e72:	0092      	lsls	r2, r2, #2
   13e74:	58d3      	ldr	r3, [r2, r3]
   13e76:	1c18      	adds	r0, r3, #0
   13e78:	46bd      	mov	sp, r7
   13e7a:	b003      	add	sp, #12
   13e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e7e:	46c0      	nop			; (mov r8, r8)
   13e80:	200009c4 	.word	0x200009c4
   13e84:	20000c80 	.word	0x20000c80
   13e88:	000144a5 	.word	0x000144a5
   13e8c:	000147c9 	.word	0x000147c9
   13e90:	20000ee8 	.word	0x20000ee8
   13e94:	00016d9d 	.word	0x00016d9d
   13e98:	00014349 	.word	0x00014349
   13e9c:	eb851eb8 	.word	0xeb851eb8
   13ea0:	3f8eb851 	.word	0x3f8eb851
   13ea4:	3c75c28f 	.word	0x3c75c28f
   13ea8:	2000090c 	.word	0x2000090c
   13eac:	00014de9 	.word	0x00014de9
   13eb0:	00014ba9 	.word	0x00014ba9
   13eb4:	20000a3c 	.word	0x20000a3c
   13eb8:	00016615 	.word	0x00016615
   13ebc:	3ff00000 	.word	0x3ff00000
   13ec0:	00016115 	.word	0x00016115
   13ec4:	00015121 	.word	0x00015121
   13ec8:	00015161 	.word	0x00015161
   13ecc:	20000fb8 	.word	0x20000fb8
   13ed0:	0001528d 	.word	0x0001528d
   13ed4:	00016e41 	.word	0x00016e41

00013ed8 <ldexpf>:
   13ed8:	b570      	push	{r4, r5, r6, lr}
   13eda:	1c04      	adds	r4, r0, #0
   13edc:	000d      	movs	r5, r1
   13ede:	f000 f889 	bl	13ff4 <finitef>
   13ee2:	2800      	cmp	r0, #0
   13ee4:	d005      	beq.n	13ef2 <ldexpf+0x1a>
   13ee6:	2100      	movs	r1, #0
   13ee8:	1c20      	adds	r0, r4, #0
   13eea:	f000 fa4d 	bl	14388 <__aeabi_fcmpeq>
   13eee:	2800      	cmp	r0, #0
   13ef0:	d001      	beq.n	13ef6 <ldexpf+0x1e>
   13ef2:	1c20      	adds	r0, r4, #0
   13ef4:	bd70      	pop	{r4, r5, r6, pc}
   13ef6:	1c20      	adds	r0, r4, #0
   13ef8:	0029      	movs	r1, r5
   13efa:	f000 f811 	bl	13f20 <scalbnf>
   13efe:	1c04      	adds	r4, r0, #0
   13f00:	f000 f878 	bl	13ff4 <finitef>
   13f04:	2800      	cmp	r0, #0
   13f06:	d005      	beq.n	13f14 <ldexpf+0x3c>
   13f08:	2100      	movs	r1, #0
   13f0a:	1c20      	adds	r0, r4, #0
   13f0c:	f000 fa3c 	bl	14388 <__aeabi_fcmpeq>
   13f10:	2800      	cmp	r0, #0
   13f12:	d0ee      	beq.n	13ef2 <ldexpf+0x1a>
   13f14:	f003 f83c 	bl	16f90 <__errno>
   13f18:	2322      	movs	r3, #34	; 0x22
   13f1a:	6003      	str	r3, [r0, #0]
   13f1c:	e7e9      	b.n	13ef2 <ldexpf+0x1a>
   13f1e:	46c0      	nop			; (mov r8, r8)

00013f20 <scalbnf>:
   13f20:	0043      	lsls	r3, r0, #1
   13f22:	b570      	push	{r4, r5, r6, lr}
   13f24:	1c02      	adds	r2, r0, #0
   13f26:	000c      	movs	r4, r1
   13f28:	0005      	movs	r5, r0
   13f2a:	0859      	lsrs	r1, r3, #1
   13f2c:	d00f      	beq.n	13f4e <scalbnf+0x2e>
   13f2e:	4e27      	ldr	r6, [pc, #156]	; (13fcc <scalbnf+0xac>)
   13f30:	42b1      	cmp	r1, r6
   13f32:	d80d      	bhi.n	13f50 <scalbnf+0x30>
   13f34:	4826      	ldr	r0, [pc, #152]	; (13fd0 <scalbnf+0xb0>)
   13f36:	4281      	cmp	r1, r0
   13f38:	d90e      	bls.n	13f58 <scalbnf+0x38>
   13f3a:	0e1b      	lsrs	r3, r3, #24
   13f3c:	191b      	adds	r3, r3, r4
   13f3e:	2bfe      	cmp	r3, #254	; 0xfe
   13f40:	dc2a      	bgt.n	13f98 <scalbnf+0x78>
   13f42:	2b00      	cmp	r3, #0
   13f44:	dd16      	ble.n	13f74 <scalbnf+0x54>
   13f46:	4823      	ldr	r0, [pc, #140]	; (13fd4 <scalbnf+0xb4>)
   13f48:	05db      	lsls	r3, r3, #23
   13f4a:	4028      	ands	r0, r5
   13f4c:	4318      	orrs	r0, r3
   13f4e:	bd70      	pop	{r4, r5, r6, pc}
   13f50:	1c01      	adds	r1, r0, #0
   13f52:	f000 faa7 	bl	144a4 <__aeabi_fadd>
   13f56:	e7fa      	b.n	13f4e <scalbnf+0x2e>
   13f58:	2198      	movs	r1, #152	; 0x98
   13f5a:	1c10      	adds	r0, r2, #0
   13f5c:	05c9      	lsls	r1, r1, #23
   13f5e:	f000 fe23 	bl	14ba8 <__aeabi_fmul>
   13f62:	4b1d      	ldr	r3, [pc, #116]	; (13fd8 <scalbnf+0xb8>)
   13f64:	1c02      	adds	r2, r0, #0
   13f66:	429c      	cmp	r4, r3
   13f68:	db12      	blt.n	13f90 <scalbnf+0x70>
   13f6a:	0043      	lsls	r3, r0, #1
   13f6c:	0e1b      	lsrs	r3, r3, #24
   13f6e:	0005      	movs	r5, r0
   13f70:	3b19      	subs	r3, #25
   13f72:	e7e3      	b.n	13f3c <scalbnf+0x1c>
   13f74:	0019      	movs	r1, r3
   13f76:	3116      	adds	r1, #22
   13f78:	da16      	bge.n	13fa8 <scalbnf+0x88>
   13f7a:	4b18      	ldr	r3, [pc, #96]	; (13fdc <scalbnf+0xbc>)
   13f7c:	1c11      	adds	r1, r2, #0
   13f7e:	429c      	cmp	r4, r3
   13f80:	dd1c      	ble.n	13fbc <scalbnf+0x9c>
   13f82:	4817      	ldr	r0, [pc, #92]	; (13fe0 <scalbnf+0xc0>)
   13f84:	f000 f830 	bl	13fe8 <copysignf>
   13f88:	4915      	ldr	r1, [pc, #84]	; (13fe0 <scalbnf+0xc0>)
   13f8a:	f000 fe0d 	bl	14ba8 <__aeabi_fmul>
   13f8e:	e7de      	b.n	13f4e <scalbnf+0x2e>
   13f90:	4914      	ldr	r1, [pc, #80]	; (13fe4 <scalbnf+0xc4>)
   13f92:	f000 fe09 	bl	14ba8 <__aeabi_fmul>
   13f96:	e7da      	b.n	13f4e <scalbnf+0x2e>
   13f98:	1c11      	adds	r1, r2, #0
   13f9a:	4811      	ldr	r0, [pc, #68]	; (13fe0 <scalbnf+0xc0>)
   13f9c:	f000 f824 	bl	13fe8 <copysignf>
   13fa0:	490f      	ldr	r1, [pc, #60]	; (13fe0 <scalbnf+0xc0>)
   13fa2:	f000 fe01 	bl	14ba8 <__aeabi_fmul>
   13fa6:	e7d2      	b.n	13f4e <scalbnf+0x2e>
   13fa8:	21cc      	movs	r1, #204	; 0xcc
   13faa:	3319      	adds	r3, #25
   13fac:	05d8      	lsls	r0, r3, #23
   13fae:	4b09      	ldr	r3, [pc, #36]	; (13fd4 <scalbnf+0xb4>)
   13fb0:	0589      	lsls	r1, r1, #22
   13fb2:	401d      	ands	r5, r3
   13fb4:	4328      	orrs	r0, r5
   13fb6:	f000 fdf7 	bl	14ba8 <__aeabi_fmul>
   13fba:	e7c8      	b.n	13f4e <scalbnf+0x2e>
   13fbc:	4809      	ldr	r0, [pc, #36]	; (13fe4 <scalbnf+0xc4>)
   13fbe:	f000 f813 	bl	13fe8 <copysignf>
   13fc2:	4908      	ldr	r1, [pc, #32]	; (13fe4 <scalbnf+0xc4>)
   13fc4:	f000 fdf0 	bl	14ba8 <__aeabi_fmul>
   13fc8:	e7c1      	b.n	13f4e <scalbnf+0x2e>
   13fca:	46c0      	nop			; (mov r8, r8)
   13fcc:	7f7fffff 	.word	0x7f7fffff
   13fd0:	007fffff 	.word	0x007fffff
   13fd4:	807fffff 	.word	0x807fffff
   13fd8:	ffff3cb0 	.word	0xffff3cb0
   13fdc:	0000c350 	.word	0x0000c350
   13fe0:	7149f2ca 	.word	0x7149f2ca
   13fe4:	0da24260 	.word	0x0da24260

00013fe8 <copysignf>:
   13fe8:	0040      	lsls	r0, r0, #1
   13fea:	0fc9      	lsrs	r1, r1, #31
   13fec:	07c9      	lsls	r1, r1, #31
   13fee:	0840      	lsrs	r0, r0, #1
   13ff0:	4308      	orrs	r0, r1
   13ff2:	4770      	bx	lr

00013ff4 <finitef>:
   13ff4:	0043      	lsls	r3, r0, #1
   13ff6:	2000      	movs	r0, #0
   13ff8:	4a02      	ldr	r2, [pc, #8]	; (14004 <finitef+0x10>)
   13ffa:	085b      	lsrs	r3, r3, #1
   13ffc:	429a      	cmp	r2, r3
   13ffe:	4140      	adcs	r0, r0
   14000:	4770      	bx	lr
   14002:	46c0      	nop			; (mov r8, r8)
   14004:	7f7fffff 	.word	0x7f7fffff

00014008 <__udivsi3>:
   14008:	2200      	movs	r2, #0
   1400a:	0843      	lsrs	r3, r0, #1
   1400c:	428b      	cmp	r3, r1
   1400e:	d374      	bcc.n	140fa <__udivsi3+0xf2>
   14010:	0903      	lsrs	r3, r0, #4
   14012:	428b      	cmp	r3, r1
   14014:	d35f      	bcc.n	140d6 <__udivsi3+0xce>
   14016:	0a03      	lsrs	r3, r0, #8
   14018:	428b      	cmp	r3, r1
   1401a:	d344      	bcc.n	140a6 <__udivsi3+0x9e>
   1401c:	0b03      	lsrs	r3, r0, #12
   1401e:	428b      	cmp	r3, r1
   14020:	d328      	bcc.n	14074 <__udivsi3+0x6c>
   14022:	0c03      	lsrs	r3, r0, #16
   14024:	428b      	cmp	r3, r1
   14026:	d30d      	bcc.n	14044 <__udivsi3+0x3c>
   14028:	22ff      	movs	r2, #255	; 0xff
   1402a:	0209      	lsls	r1, r1, #8
   1402c:	ba12      	rev	r2, r2
   1402e:	0c03      	lsrs	r3, r0, #16
   14030:	428b      	cmp	r3, r1
   14032:	d302      	bcc.n	1403a <__udivsi3+0x32>
   14034:	1212      	asrs	r2, r2, #8
   14036:	0209      	lsls	r1, r1, #8
   14038:	d065      	beq.n	14106 <__udivsi3+0xfe>
   1403a:	0b03      	lsrs	r3, r0, #12
   1403c:	428b      	cmp	r3, r1
   1403e:	d319      	bcc.n	14074 <__udivsi3+0x6c>
   14040:	e000      	b.n	14044 <__udivsi3+0x3c>
   14042:	0a09      	lsrs	r1, r1, #8
   14044:	0bc3      	lsrs	r3, r0, #15
   14046:	428b      	cmp	r3, r1
   14048:	d301      	bcc.n	1404e <__udivsi3+0x46>
   1404a:	03cb      	lsls	r3, r1, #15
   1404c:	1ac0      	subs	r0, r0, r3
   1404e:	4152      	adcs	r2, r2
   14050:	0b83      	lsrs	r3, r0, #14
   14052:	428b      	cmp	r3, r1
   14054:	d301      	bcc.n	1405a <__udivsi3+0x52>
   14056:	038b      	lsls	r3, r1, #14
   14058:	1ac0      	subs	r0, r0, r3
   1405a:	4152      	adcs	r2, r2
   1405c:	0b43      	lsrs	r3, r0, #13
   1405e:	428b      	cmp	r3, r1
   14060:	d301      	bcc.n	14066 <__udivsi3+0x5e>
   14062:	034b      	lsls	r3, r1, #13
   14064:	1ac0      	subs	r0, r0, r3
   14066:	4152      	adcs	r2, r2
   14068:	0b03      	lsrs	r3, r0, #12
   1406a:	428b      	cmp	r3, r1
   1406c:	d301      	bcc.n	14072 <__udivsi3+0x6a>
   1406e:	030b      	lsls	r3, r1, #12
   14070:	1ac0      	subs	r0, r0, r3
   14072:	4152      	adcs	r2, r2
   14074:	0ac3      	lsrs	r3, r0, #11
   14076:	428b      	cmp	r3, r1
   14078:	d301      	bcc.n	1407e <__udivsi3+0x76>
   1407a:	02cb      	lsls	r3, r1, #11
   1407c:	1ac0      	subs	r0, r0, r3
   1407e:	4152      	adcs	r2, r2
   14080:	0a83      	lsrs	r3, r0, #10
   14082:	428b      	cmp	r3, r1
   14084:	d301      	bcc.n	1408a <__udivsi3+0x82>
   14086:	028b      	lsls	r3, r1, #10
   14088:	1ac0      	subs	r0, r0, r3
   1408a:	4152      	adcs	r2, r2
   1408c:	0a43      	lsrs	r3, r0, #9
   1408e:	428b      	cmp	r3, r1
   14090:	d301      	bcc.n	14096 <__udivsi3+0x8e>
   14092:	024b      	lsls	r3, r1, #9
   14094:	1ac0      	subs	r0, r0, r3
   14096:	4152      	adcs	r2, r2
   14098:	0a03      	lsrs	r3, r0, #8
   1409a:	428b      	cmp	r3, r1
   1409c:	d301      	bcc.n	140a2 <__udivsi3+0x9a>
   1409e:	020b      	lsls	r3, r1, #8
   140a0:	1ac0      	subs	r0, r0, r3
   140a2:	4152      	adcs	r2, r2
   140a4:	d2cd      	bcs.n	14042 <__udivsi3+0x3a>
   140a6:	09c3      	lsrs	r3, r0, #7
   140a8:	428b      	cmp	r3, r1
   140aa:	d301      	bcc.n	140b0 <__udivsi3+0xa8>
   140ac:	01cb      	lsls	r3, r1, #7
   140ae:	1ac0      	subs	r0, r0, r3
   140b0:	4152      	adcs	r2, r2
   140b2:	0983      	lsrs	r3, r0, #6
   140b4:	428b      	cmp	r3, r1
   140b6:	d301      	bcc.n	140bc <__udivsi3+0xb4>
   140b8:	018b      	lsls	r3, r1, #6
   140ba:	1ac0      	subs	r0, r0, r3
   140bc:	4152      	adcs	r2, r2
   140be:	0943      	lsrs	r3, r0, #5
   140c0:	428b      	cmp	r3, r1
   140c2:	d301      	bcc.n	140c8 <__udivsi3+0xc0>
   140c4:	014b      	lsls	r3, r1, #5
   140c6:	1ac0      	subs	r0, r0, r3
   140c8:	4152      	adcs	r2, r2
   140ca:	0903      	lsrs	r3, r0, #4
   140cc:	428b      	cmp	r3, r1
   140ce:	d301      	bcc.n	140d4 <__udivsi3+0xcc>
   140d0:	010b      	lsls	r3, r1, #4
   140d2:	1ac0      	subs	r0, r0, r3
   140d4:	4152      	adcs	r2, r2
   140d6:	08c3      	lsrs	r3, r0, #3
   140d8:	428b      	cmp	r3, r1
   140da:	d301      	bcc.n	140e0 <__udivsi3+0xd8>
   140dc:	00cb      	lsls	r3, r1, #3
   140de:	1ac0      	subs	r0, r0, r3
   140e0:	4152      	adcs	r2, r2
   140e2:	0883      	lsrs	r3, r0, #2
   140e4:	428b      	cmp	r3, r1
   140e6:	d301      	bcc.n	140ec <__udivsi3+0xe4>
   140e8:	008b      	lsls	r3, r1, #2
   140ea:	1ac0      	subs	r0, r0, r3
   140ec:	4152      	adcs	r2, r2
   140ee:	0843      	lsrs	r3, r0, #1
   140f0:	428b      	cmp	r3, r1
   140f2:	d301      	bcc.n	140f8 <__udivsi3+0xf0>
   140f4:	004b      	lsls	r3, r1, #1
   140f6:	1ac0      	subs	r0, r0, r3
   140f8:	4152      	adcs	r2, r2
   140fa:	1a41      	subs	r1, r0, r1
   140fc:	d200      	bcs.n	14100 <__udivsi3+0xf8>
   140fe:	4601      	mov	r1, r0
   14100:	4152      	adcs	r2, r2
   14102:	4610      	mov	r0, r2
   14104:	4770      	bx	lr
   14106:	e7ff      	b.n	14108 <__udivsi3+0x100>
   14108:	b501      	push	{r0, lr}
   1410a:	2000      	movs	r0, #0
   1410c:	f000 f8f0 	bl	142f0 <__aeabi_idiv0>
   14110:	bd02      	pop	{r1, pc}
   14112:	46c0      	nop			; (mov r8, r8)

00014114 <__aeabi_uidivmod>:
   14114:	2900      	cmp	r1, #0
   14116:	d0f7      	beq.n	14108 <__udivsi3+0x100>
   14118:	e776      	b.n	14008 <__udivsi3>
   1411a:	4770      	bx	lr

0001411c <__divsi3>:
   1411c:	4603      	mov	r3, r0
   1411e:	430b      	orrs	r3, r1
   14120:	d47f      	bmi.n	14222 <__divsi3+0x106>
   14122:	2200      	movs	r2, #0
   14124:	0843      	lsrs	r3, r0, #1
   14126:	428b      	cmp	r3, r1
   14128:	d374      	bcc.n	14214 <__divsi3+0xf8>
   1412a:	0903      	lsrs	r3, r0, #4
   1412c:	428b      	cmp	r3, r1
   1412e:	d35f      	bcc.n	141f0 <__divsi3+0xd4>
   14130:	0a03      	lsrs	r3, r0, #8
   14132:	428b      	cmp	r3, r1
   14134:	d344      	bcc.n	141c0 <__divsi3+0xa4>
   14136:	0b03      	lsrs	r3, r0, #12
   14138:	428b      	cmp	r3, r1
   1413a:	d328      	bcc.n	1418e <__divsi3+0x72>
   1413c:	0c03      	lsrs	r3, r0, #16
   1413e:	428b      	cmp	r3, r1
   14140:	d30d      	bcc.n	1415e <__divsi3+0x42>
   14142:	22ff      	movs	r2, #255	; 0xff
   14144:	0209      	lsls	r1, r1, #8
   14146:	ba12      	rev	r2, r2
   14148:	0c03      	lsrs	r3, r0, #16
   1414a:	428b      	cmp	r3, r1
   1414c:	d302      	bcc.n	14154 <__divsi3+0x38>
   1414e:	1212      	asrs	r2, r2, #8
   14150:	0209      	lsls	r1, r1, #8
   14152:	d065      	beq.n	14220 <__divsi3+0x104>
   14154:	0b03      	lsrs	r3, r0, #12
   14156:	428b      	cmp	r3, r1
   14158:	d319      	bcc.n	1418e <__divsi3+0x72>
   1415a:	e000      	b.n	1415e <__divsi3+0x42>
   1415c:	0a09      	lsrs	r1, r1, #8
   1415e:	0bc3      	lsrs	r3, r0, #15
   14160:	428b      	cmp	r3, r1
   14162:	d301      	bcc.n	14168 <__divsi3+0x4c>
   14164:	03cb      	lsls	r3, r1, #15
   14166:	1ac0      	subs	r0, r0, r3
   14168:	4152      	adcs	r2, r2
   1416a:	0b83      	lsrs	r3, r0, #14
   1416c:	428b      	cmp	r3, r1
   1416e:	d301      	bcc.n	14174 <__divsi3+0x58>
   14170:	038b      	lsls	r3, r1, #14
   14172:	1ac0      	subs	r0, r0, r3
   14174:	4152      	adcs	r2, r2
   14176:	0b43      	lsrs	r3, r0, #13
   14178:	428b      	cmp	r3, r1
   1417a:	d301      	bcc.n	14180 <__divsi3+0x64>
   1417c:	034b      	lsls	r3, r1, #13
   1417e:	1ac0      	subs	r0, r0, r3
   14180:	4152      	adcs	r2, r2
   14182:	0b03      	lsrs	r3, r0, #12
   14184:	428b      	cmp	r3, r1
   14186:	d301      	bcc.n	1418c <__divsi3+0x70>
   14188:	030b      	lsls	r3, r1, #12
   1418a:	1ac0      	subs	r0, r0, r3
   1418c:	4152      	adcs	r2, r2
   1418e:	0ac3      	lsrs	r3, r0, #11
   14190:	428b      	cmp	r3, r1
   14192:	d301      	bcc.n	14198 <__divsi3+0x7c>
   14194:	02cb      	lsls	r3, r1, #11
   14196:	1ac0      	subs	r0, r0, r3
   14198:	4152      	adcs	r2, r2
   1419a:	0a83      	lsrs	r3, r0, #10
   1419c:	428b      	cmp	r3, r1
   1419e:	d301      	bcc.n	141a4 <__divsi3+0x88>
   141a0:	028b      	lsls	r3, r1, #10
   141a2:	1ac0      	subs	r0, r0, r3
   141a4:	4152      	adcs	r2, r2
   141a6:	0a43      	lsrs	r3, r0, #9
   141a8:	428b      	cmp	r3, r1
   141aa:	d301      	bcc.n	141b0 <__divsi3+0x94>
   141ac:	024b      	lsls	r3, r1, #9
   141ae:	1ac0      	subs	r0, r0, r3
   141b0:	4152      	adcs	r2, r2
   141b2:	0a03      	lsrs	r3, r0, #8
   141b4:	428b      	cmp	r3, r1
   141b6:	d301      	bcc.n	141bc <__divsi3+0xa0>
   141b8:	020b      	lsls	r3, r1, #8
   141ba:	1ac0      	subs	r0, r0, r3
   141bc:	4152      	adcs	r2, r2
   141be:	d2cd      	bcs.n	1415c <__divsi3+0x40>
   141c0:	09c3      	lsrs	r3, r0, #7
   141c2:	428b      	cmp	r3, r1
   141c4:	d301      	bcc.n	141ca <__divsi3+0xae>
   141c6:	01cb      	lsls	r3, r1, #7
   141c8:	1ac0      	subs	r0, r0, r3
   141ca:	4152      	adcs	r2, r2
   141cc:	0983      	lsrs	r3, r0, #6
   141ce:	428b      	cmp	r3, r1
   141d0:	d301      	bcc.n	141d6 <__divsi3+0xba>
   141d2:	018b      	lsls	r3, r1, #6
   141d4:	1ac0      	subs	r0, r0, r3
   141d6:	4152      	adcs	r2, r2
   141d8:	0943      	lsrs	r3, r0, #5
   141da:	428b      	cmp	r3, r1
   141dc:	d301      	bcc.n	141e2 <__divsi3+0xc6>
   141de:	014b      	lsls	r3, r1, #5
   141e0:	1ac0      	subs	r0, r0, r3
   141e2:	4152      	adcs	r2, r2
   141e4:	0903      	lsrs	r3, r0, #4
   141e6:	428b      	cmp	r3, r1
   141e8:	d301      	bcc.n	141ee <__divsi3+0xd2>
   141ea:	010b      	lsls	r3, r1, #4
   141ec:	1ac0      	subs	r0, r0, r3
   141ee:	4152      	adcs	r2, r2
   141f0:	08c3      	lsrs	r3, r0, #3
   141f2:	428b      	cmp	r3, r1
   141f4:	d301      	bcc.n	141fa <__divsi3+0xde>
   141f6:	00cb      	lsls	r3, r1, #3
   141f8:	1ac0      	subs	r0, r0, r3
   141fa:	4152      	adcs	r2, r2
   141fc:	0883      	lsrs	r3, r0, #2
   141fe:	428b      	cmp	r3, r1
   14200:	d301      	bcc.n	14206 <__divsi3+0xea>
   14202:	008b      	lsls	r3, r1, #2
   14204:	1ac0      	subs	r0, r0, r3
   14206:	4152      	adcs	r2, r2
   14208:	0843      	lsrs	r3, r0, #1
   1420a:	428b      	cmp	r3, r1
   1420c:	d301      	bcc.n	14212 <__divsi3+0xf6>
   1420e:	004b      	lsls	r3, r1, #1
   14210:	1ac0      	subs	r0, r0, r3
   14212:	4152      	adcs	r2, r2
   14214:	1a41      	subs	r1, r0, r1
   14216:	d200      	bcs.n	1421a <__divsi3+0xfe>
   14218:	4601      	mov	r1, r0
   1421a:	4152      	adcs	r2, r2
   1421c:	4610      	mov	r0, r2
   1421e:	4770      	bx	lr
   14220:	e05d      	b.n	142de <__divsi3+0x1c2>
   14222:	0fca      	lsrs	r2, r1, #31
   14224:	d000      	beq.n	14228 <__divsi3+0x10c>
   14226:	4249      	negs	r1, r1
   14228:	1003      	asrs	r3, r0, #32
   1422a:	d300      	bcc.n	1422e <__divsi3+0x112>
   1422c:	4240      	negs	r0, r0
   1422e:	4053      	eors	r3, r2
   14230:	2200      	movs	r2, #0
   14232:	469c      	mov	ip, r3
   14234:	0903      	lsrs	r3, r0, #4
   14236:	428b      	cmp	r3, r1
   14238:	d32d      	bcc.n	14296 <__divsi3+0x17a>
   1423a:	0a03      	lsrs	r3, r0, #8
   1423c:	428b      	cmp	r3, r1
   1423e:	d312      	bcc.n	14266 <__divsi3+0x14a>
   14240:	22fc      	movs	r2, #252	; 0xfc
   14242:	0189      	lsls	r1, r1, #6
   14244:	ba12      	rev	r2, r2
   14246:	0a03      	lsrs	r3, r0, #8
   14248:	428b      	cmp	r3, r1
   1424a:	d30c      	bcc.n	14266 <__divsi3+0x14a>
   1424c:	0189      	lsls	r1, r1, #6
   1424e:	1192      	asrs	r2, r2, #6
   14250:	428b      	cmp	r3, r1
   14252:	d308      	bcc.n	14266 <__divsi3+0x14a>
   14254:	0189      	lsls	r1, r1, #6
   14256:	1192      	asrs	r2, r2, #6
   14258:	428b      	cmp	r3, r1
   1425a:	d304      	bcc.n	14266 <__divsi3+0x14a>
   1425c:	0189      	lsls	r1, r1, #6
   1425e:	d03a      	beq.n	142d6 <__divsi3+0x1ba>
   14260:	1192      	asrs	r2, r2, #6
   14262:	e000      	b.n	14266 <__divsi3+0x14a>
   14264:	0989      	lsrs	r1, r1, #6
   14266:	09c3      	lsrs	r3, r0, #7
   14268:	428b      	cmp	r3, r1
   1426a:	d301      	bcc.n	14270 <__divsi3+0x154>
   1426c:	01cb      	lsls	r3, r1, #7
   1426e:	1ac0      	subs	r0, r0, r3
   14270:	4152      	adcs	r2, r2
   14272:	0983      	lsrs	r3, r0, #6
   14274:	428b      	cmp	r3, r1
   14276:	d301      	bcc.n	1427c <__divsi3+0x160>
   14278:	018b      	lsls	r3, r1, #6
   1427a:	1ac0      	subs	r0, r0, r3
   1427c:	4152      	adcs	r2, r2
   1427e:	0943      	lsrs	r3, r0, #5
   14280:	428b      	cmp	r3, r1
   14282:	d301      	bcc.n	14288 <__divsi3+0x16c>
   14284:	014b      	lsls	r3, r1, #5
   14286:	1ac0      	subs	r0, r0, r3
   14288:	4152      	adcs	r2, r2
   1428a:	0903      	lsrs	r3, r0, #4
   1428c:	428b      	cmp	r3, r1
   1428e:	d301      	bcc.n	14294 <__divsi3+0x178>
   14290:	010b      	lsls	r3, r1, #4
   14292:	1ac0      	subs	r0, r0, r3
   14294:	4152      	adcs	r2, r2
   14296:	08c3      	lsrs	r3, r0, #3
   14298:	428b      	cmp	r3, r1
   1429a:	d301      	bcc.n	142a0 <__divsi3+0x184>
   1429c:	00cb      	lsls	r3, r1, #3
   1429e:	1ac0      	subs	r0, r0, r3
   142a0:	4152      	adcs	r2, r2
   142a2:	0883      	lsrs	r3, r0, #2
   142a4:	428b      	cmp	r3, r1
   142a6:	d301      	bcc.n	142ac <__divsi3+0x190>
   142a8:	008b      	lsls	r3, r1, #2
   142aa:	1ac0      	subs	r0, r0, r3
   142ac:	4152      	adcs	r2, r2
   142ae:	d2d9      	bcs.n	14264 <__divsi3+0x148>
   142b0:	0843      	lsrs	r3, r0, #1
   142b2:	428b      	cmp	r3, r1
   142b4:	d301      	bcc.n	142ba <__divsi3+0x19e>
   142b6:	004b      	lsls	r3, r1, #1
   142b8:	1ac0      	subs	r0, r0, r3
   142ba:	4152      	adcs	r2, r2
   142bc:	1a41      	subs	r1, r0, r1
   142be:	d200      	bcs.n	142c2 <__divsi3+0x1a6>
   142c0:	4601      	mov	r1, r0
   142c2:	4663      	mov	r3, ip
   142c4:	4152      	adcs	r2, r2
   142c6:	105b      	asrs	r3, r3, #1
   142c8:	4610      	mov	r0, r2
   142ca:	d301      	bcc.n	142d0 <__divsi3+0x1b4>
   142cc:	4240      	negs	r0, r0
   142ce:	2b00      	cmp	r3, #0
   142d0:	d500      	bpl.n	142d4 <__divsi3+0x1b8>
   142d2:	4249      	negs	r1, r1
   142d4:	4770      	bx	lr
   142d6:	4663      	mov	r3, ip
   142d8:	105b      	asrs	r3, r3, #1
   142da:	d300      	bcc.n	142de <__divsi3+0x1c2>
   142dc:	4240      	negs	r0, r0
   142de:	b501      	push	{r0, lr}
   142e0:	2000      	movs	r0, #0
   142e2:	f000 f805 	bl	142f0 <__aeabi_idiv0>
   142e6:	bd02      	pop	{r1, pc}

000142e8 <__aeabi_idivmod>:
   142e8:	2900      	cmp	r1, #0
   142ea:	d0f8      	beq.n	142de <__divsi3+0x1c2>
   142ec:	e716      	b.n	1411c <__divsi3>
   142ee:	4770      	bx	lr

000142f0 <__aeabi_idiv0>:
   142f0:	4770      	bx	lr
   142f2:	46c0      	nop			; (mov r8, r8)

000142f4 <__aeabi_cdrcmple>:
   142f4:	4684      	mov	ip, r0
   142f6:	1c10      	adds	r0, r2, #0
   142f8:	4662      	mov	r2, ip
   142fa:	468c      	mov	ip, r1
   142fc:	1c19      	adds	r1, r3, #0
   142fe:	4663      	mov	r3, ip
   14300:	e000      	b.n	14304 <__aeabi_cdcmpeq>
   14302:	46c0      	nop			; (mov r8, r8)

00014304 <__aeabi_cdcmpeq>:
   14304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14306:	f001 fea3 	bl	16050 <__ledf2>
   1430a:	2800      	cmp	r0, #0
   1430c:	d401      	bmi.n	14312 <__aeabi_cdcmpeq+0xe>
   1430e:	2100      	movs	r1, #0
   14310:	42c8      	cmn	r0, r1
   14312:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014314 <__aeabi_dcmpeq>:
   14314:	b510      	push	{r4, lr}
   14316:	f001 fdfd 	bl	15f14 <__eqdf2>
   1431a:	4240      	negs	r0, r0
   1431c:	3001      	adds	r0, #1
   1431e:	bd10      	pop	{r4, pc}

00014320 <__aeabi_dcmplt>:
   14320:	b510      	push	{r4, lr}
   14322:	f001 fe95 	bl	16050 <__ledf2>
   14326:	2800      	cmp	r0, #0
   14328:	db01      	blt.n	1432e <__aeabi_dcmplt+0xe>
   1432a:	2000      	movs	r0, #0
   1432c:	bd10      	pop	{r4, pc}
   1432e:	2001      	movs	r0, #1
   14330:	bd10      	pop	{r4, pc}
   14332:	46c0      	nop			; (mov r8, r8)

00014334 <__aeabi_dcmple>:
   14334:	b510      	push	{r4, lr}
   14336:	f001 fe8b 	bl	16050 <__ledf2>
   1433a:	2800      	cmp	r0, #0
   1433c:	dd01      	ble.n	14342 <__aeabi_dcmple+0xe>
   1433e:	2000      	movs	r0, #0
   14340:	bd10      	pop	{r4, pc}
   14342:	2001      	movs	r0, #1
   14344:	bd10      	pop	{r4, pc}
   14346:	46c0      	nop			; (mov r8, r8)

00014348 <__aeabi_dcmpgt>:
   14348:	b510      	push	{r4, lr}
   1434a:	f001 fe1d 	bl	15f88 <__gedf2>
   1434e:	2800      	cmp	r0, #0
   14350:	dc01      	bgt.n	14356 <__aeabi_dcmpgt+0xe>
   14352:	2000      	movs	r0, #0
   14354:	bd10      	pop	{r4, pc}
   14356:	2001      	movs	r0, #1
   14358:	bd10      	pop	{r4, pc}
   1435a:	46c0      	nop			; (mov r8, r8)

0001435c <__aeabi_dcmpge>:
   1435c:	b510      	push	{r4, lr}
   1435e:	f001 fe13 	bl	15f88 <__gedf2>
   14362:	2800      	cmp	r0, #0
   14364:	da01      	bge.n	1436a <__aeabi_dcmpge+0xe>
   14366:	2000      	movs	r0, #0
   14368:	bd10      	pop	{r4, pc}
   1436a:	2001      	movs	r0, #1
   1436c:	bd10      	pop	{r4, pc}
   1436e:	46c0      	nop			; (mov r8, r8)

00014370 <__aeabi_cfrcmple>:
   14370:	4684      	mov	ip, r0
   14372:	1c08      	adds	r0, r1, #0
   14374:	4661      	mov	r1, ip
   14376:	e7ff      	b.n	14378 <__aeabi_cfcmpeq>

00014378 <__aeabi_cfcmpeq>:
   14378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1437a:	f000 fbd3 	bl	14b24 <__lesf2>
   1437e:	2800      	cmp	r0, #0
   14380:	d401      	bmi.n	14386 <__aeabi_cfcmpeq+0xe>
   14382:	2100      	movs	r1, #0
   14384:	42c8      	cmn	r0, r1
   14386:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014388 <__aeabi_fcmpeq>:
   14388:	b510      	push	{r4, lr}
   1438a:	f000 fb65 	bl	14a58 <__eqsf2>
   1438e:	4240      	negs	r0, r0
   14390:	3001      	adds	r0, #1
   14392:	bd10      	pop	{r4, pc}

00014394 <__aeabi_fcmplt>:
   14394:	b510      	push	{r4, lr}
   14396:	f000 fbc5 	bl	14b24 <__lesf2>
   1439a:	2800      	cmp	r0, #0
   1439c:	db01      	blt.n	143a2 <__aeabi_fcmplt+0xe>
   1439e:	2000      	movs	r0, #0
   143a0:	bd10      	pop	{r4, pc}
   143a2:	2001      	movs	r0, #1
   143a4:	bd10      	pop	{r4, pc}
   143a6:	46c0      	nop			; (mov r8, r8)

000143a8 <__aeabi_fcmple>:
   143a8:	b510      	push	{r4, lr}
   143aa:	f000 fbbb 	bl	14b24 <__lesf2>
   143ae:	2800      	cmp	r0, #0
   143b0:	dd01      	ble.n	143b6 <__aeabi_fcmple+0xe>
   143b2:	2000      	movs	r0, #0
   143b4:	bd10      	pop	{r4, pc}
   143b6:	2001      	movs	r0, #1
   143b8:	bd10      	pop	{r4, pc}
   143ba:	46c0      	nop			; (mov r8, r8)

000143bc <__aeabi_fcmpgt>:
   143bc:	b510      	push	{r4, lr}
   143be:	f000 fb71 	bl	14aa4 <__gesf2>
   143c2:	2800      	cmp	r0, #0
   143c4:	dc01      	bgt.n	143ca <__aeabi_fcmpgt+0xe>
   143c6:	2000      	movs	r0, #0
   143c8:	bd10      	pop	{r4, pc}
   143ca:	2001      	movs	r0, #1
   143cc:	bd10      	pop	{r4, pc}
   143ce:	46c0      	nop			; (mov r8, r8)

000143d0 <__aeabi_fcmpge>:
   143d0:	b510      	push	{r4, lr}
   143d2:	f000 fb67 	bl	14aa4 <__gesf2>
   143d6:	2800      	cmp	r0, #0
   143d8:	da01      	bge.n	143de <__aeabi_fcmpge+0xe>
   143da:	2000      	movs	r0, #0
   143dc:	bd10      	pop	{r4, pc}
   143de:	2001      	movs	r0, #1
   143e0:	bd10      	pop	{r4, pc}
   143e2:	46c0      	nop			; (mov r8, r8)

000143e4 <__aeabi_lmul>:
   143e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   143e6:	46ce      	mov	lr, r9
   143e8:	4647      	mov	r7, r8
   143ea:	0415      	lsls	r5, r2, #16
   143ec:	0c2d      	lsrs	r5, r5, #16
   143ee:	002e      	movs	r6, r5
   143f0:	b580      	push	{r7, lr}
   143f2:	0407      	lsls	r7, r0, #16
   143f4:	0c14      	lsrs	r4, r2, #16
   143f6:	0c3f      	lsrs	r7, r7, #16
   143f8:	4699      	mov	r9, r3
   143fa:	0c03      	lsrs	r3, r0, #16
   143fc:	437e      	muls	r6, r7
   143fe:	435d      	muls	r5, r3
   14400:	4367      	muls	r7, r4
   14402:	4363      	muls	r3, r4
   14404:	197f      	adds	r7, r7, r5
   14406:	0c34      	lsrs	r4, r6, #16
   14408:	19e4      	adds	r4, r4, r7
   1440a:	469c      	mov	ip, r3
   1440c:	42a5      	cmp	r5, r4
   1440e:	d903      	bls.n	14418 <__aeabi_lmul+0x34>
   14410:	2380      	movs	r3, #128	; 0x80
   14412:	025b      	lsls	r3, r3, #9
   14414:	4698      	mov	r8, r3
   14416:	44c4      	add	ip, r8
   14418:	464b      	mov	r3, r9
   1441a:	4351      	muls	r1, r2
   1441c:	4343      	muls	r3, r0
   1441e:	0436      	lsls	r6, r6, #16
   14420:	0c36      	lsrs	r6, r6, #16
   14422:	0c25      	lsrs	r5, r4, #16
   14424:	0424      	lsls	r4, r4, #16
   14426:	4465      	add	r5, ip
   14428:	19a4      	adds	r4, r4, r6
   1442a:	1859      	adds	r1, r3, r1
   1442c:	1949      	adds	r1, r1, r5
   1442e:	0020      	movs	r0, r4
   14430:	bc0c      	pop	{r2, r3}
   14432:	4690      	mov	r8, r2
   14434:	4699      	mov	r9, r3
   14436:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014438 <__aeabi_f2uiz>:
   14438:	219e      	movs	r1, #158	; 0x9e
   1443a:	b510      	push	{r4, lr}
   1443c:	05c9      	lsls	r1, r1, #23
   1443e:	1c04      	adds	r4, r0, #0
   14440:	f7ff ffc6 	bl	143d0 <__aeabi_fcmpge>
   14444:	2800      	cmp	r0, #0
   14446:	d103      	bne.n	14450 <__aeabi_f2uiz+0x18>
   14448:	1c20      	adds	r0, r4, #0
   1444a:	f000 fe69 	bl	15120 <__aeabi_f2iz>
   1444e:	bd10      	pop	{r4, pc}
   14450:	219e      	movs	r1, #158	; 0x9e
   14452:	1c20      	adds	r0, r4, #0
   14454:	05c9      	lsls	r1, r1, #23
   14456:	f000 fcc7 	bl	14de8 <__aeabi_fsub>
   1445a:	f000 fe61 	bl	15120 <__aeabi_f2iz>
   1445e:	2380      	movs	r3, #128	; 0x80
   14460:	061b      	lsls	r3, r3, #24
   14462:	469c      	mov	ip, r3
   14464:	4460      	add	r0, ip
   14466:	e7f2      	b.n	1444e <__aeabi_f2uiz+0x16>

00014468 <__aeabi_d2uiz>:
   14468:	b570      	push	{r4, r5, r6, lr}
   1446a:	2200      	movs	r2, #0
   1446c:	4b0c      	ldr	r3, [pc, #48]	; (144a0 <__aeabi_d2uiz+0x38>)
   1446e:	0004      	movs	r4, r0
   14470:	000d      	movs	r5, r1
   14472:	f7ff ff73 	bl	1435c <__aeabi_dcmpge>
   14476:	2800      	cmp	r0, #0
   14478:	d104      	bne.n	14484 <__aeabi_d2uiz+0x1c>
   1447a:	0020      	movs	r0, r4
   1447c:	0029      	movs	r1, r5
   1447e:	f002 fbdf 	bl	16c40 <__aeabi_d2iz>
   14482:	bd70      	pop	{r4, r5, r6, pc}
   14484:	4b06      	ldr	r3, [pc, #24]	; (144a0 <__aeabi_d2uiz+0x38>)
   14486:	2200      	movs	r2, #0
   14488:	0020      	movs	r0, r4
   1448a:	0029      	movs	r1, r5
   1448c:	f002 f8c2 	bl	16614 <__aeabi_dsub>
   14490:	f002 fbd6 	bl	16c40 <__aeabi_d2iz>
   14494:	2380      	movs	r3, #128	; 0x80
   14496:	061b      	lsls	r3, r3, #24
   14498:	469c      	mov	ip, r3
   1449a:	4460      	add	r0, ip
   1449c:	e7f1      	b.n	14482 <__aeabi_d2uiz+0x1a>
   1449e:	46c0      	nop			; (mov r8, r8)
   144a0:	41e00000 	.word	0x41e00000

000144a4 <__aeabi_fadd>:
   144a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144a6:	46c6      	mov	lr, r8
   144a8:	024e      	lsls	r6, r1, #9
   144aa:	0247      	lsls	r7, r0, #9
   144ac:	0a76      	lsrs	r6, r6, #9
   144ae:	0a7b      	lsrs	r3, r7, #9
   144b0:	0044      	lsls	r4, r0, #1
   144b2:	0fc5      	lsrs	r5, r0, #31
   144b4:	00f7      	lsls	r7, r6, #3
   144b6:	0048      	lsls	r0, r1, #1
   144b8:	4698      	mov	r8, r3
   144ba:	b500      	push	{lr}
   144bc:	0e24      	lsrs	r4, r4, #24
   144be:	002a      	movs	r2, r5
   144c0:	00db      	lsls	r3, r3, #3
   144c2:	0e00      	lsrs	r0, r0, #24
   144c4:	0fc9      	lsrs	r1, r1, #31
   144c6:	46bc      	mov	ip, r7
   144c8:	428d      	cmp	r5, r1
   144ca:	d067      	beq.n	1459c <__aeabi_fadd+0xf8>
   144cc:	1a22      	subs	r2, r4, r0
   144ce:	2a00      	cmp	r2, #0
   144d0:	dc00      	bgt.n	144d4 <__aeabi_fadd+0x30>
   144d2:	e0a5      	b.n	14620 <__aeabi_fadd+0x17c>
   144d4:	2800      	cmp	r0, #0
   144d6:	d13a      	bne.n	1454e <__aeabi_fadd+0xaa>
   144d8:	2f00      	cmp	r7, #0
   144da:	d100      	bne.n	144de <__aeabi_fadd+0x3a>
   144dc:	e093      	b.n	14606 <__aeabi_fadd+0x162>
   144de:	1e51      	subs	r1, r2, #1
   144e0:	2900      	cmp	r1, #0
   144e2:	d000      	beq.n	144e6 <__aeabi_fadd+0x42>
   144e4:	e0bc      	b.n	14660 <__aeabi_fadd+0x1bc>
   144e6:	2401      	movs	r4, #1
   144e8:	1bdb      	subs	r3, r3, r7
   144ea:	015a      	lsls	r2, r3, #5
   144ec:	d546      	bpl.n	1457c <__aeabi_fadd+0xd8>
   144ee:	019b      	lsls	r3, r3, #6
   144f0:	099e      	lsrs	r6, r3, #6
   144f2:	0030      	movs	r0, r6
   144f4:	f002 fd2e 	bl	16f54 <__clzsi2>
   144f8:	3805      	subs	r0, #5
   144fa:	4086      	lsls	r6, r0
   144fc:	4284      	cmp	r4, r0
   144fe:	dd00      	ble.n	14502 <__aeabi_fadd+0x5e>
   14500:	e09d      	b.n	1463e <__aeabi_fadd+0x19a>
   14502:	1b04      	subs	r4, r0, r4
   14504:	0032      	movs	r2, r6
   14506:	2020      	movs	r0, #32
   14508:	3401      	adds	r4, #1
   1450a:	40e2      	lsrs	r2, r4
   1450c:	1b04      	subs	r4, r0, r4
   1450e:	40a6      	lsls	r6, r4
   14510:	0033      	movs	r3, r6
   14512:	1e5e      	subs	r6, r3, #1
   14514:	41b3      	sbcs	r3, r6
   14516:	2400      	movs	r4, #0
   14518:	4313      	orrs	r3, r2
   1451a:	075a      	lsls	r2, r3, #29
   1451c:	d004      	beq.n	14528 <__aeabi_fadd+0x84>
   1451e:	220f      	movs	r2, #15
   14520:	401a      	ands	r2, r3
   14522:	2a04      	cmp	r2, #4
   14524:	d000      	beq.n	14528 <__aeabi_fadd+0x84>
   14526:	3304      	adds	r3, #4
   14528:	015a      	lsls	r2, r3, #5
   1452a:	d529      	bpl.n	14580 <__aeabi_fadd+0xdc>
   1452c:	3401      	adds	r4, #1
   1452e:	2cff      	cmp	r4, #255	; 0xff
   14530:	d100      	bne.n	14534 <__aeabi_fadd+0x90>
   14532:	e081      	b.n	14638 <__aeabi_fadd+0x194>
   14534:	002a      	movs	r2, r5
   14536:	019b      	lsls	r3, r3, #6
   14538:	0a5b      	lsrs	r3, r3, #9
   1453a:	b2e4      	uxtb	r4, r4
   1453c:	025b      	lsls	r3, r3, #9
   1453e:	05e4      	lsls	r4, r4, #23
   14540:	0a58      	lsrs	r0, r3, #9
   14542:	07d2      	lsls	r2, r2, #31
   14544:	4320      	orrs	r0, r4
   14546:	4310      	orrs	r0, r2
   14548:	bc04      	pop	{r2}
   1454a:	4690      	mov	r8, r2
   1454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1454e:	2cff      	cmp	r4, #255	; 0xff
   14550:	d0e3      	beq.n	1451a <__aeabi_fadd+0x76>
   14552:	2180      	movs	r1, #128	; 0x80
   14554:	0038      	movs	r0, r7
   14556:	04c9      	lsls	r1, r1, #19
   14558:	4308      	orrs	r0, r1
   1455a:	4684      	mov	ip, r0
   1455c:	2a1b      	cmp	r2, #27
   1455e:	dd00      	ble.n	14562 <__aeabi_fadd+0xbe>
   14560:	e082      	b.n	14668 <__aeabi_fadd+0x1c4>
   14562:	2020      	movs	r0, #32
   14564:	4661      	mov	r1, ip
   14566:	40d1      	lsrs	r1, r2
   14568:	1a82      	subs	r2, r0, r2
   1456a:	4660      	mov	r0, ip
   1456c:	4090      	lsls	r0, r2
   1456e:	0002      	movs	r2, r0
   14570:	1e50      	subs	r0, r2, #1
   14572:	4182      	sbcs	r2, r0
   14574:	430a      	orrs	r2, r1
   14576:	1a9b      	subs	r3, r3, r2
   14578:	015a      	lsls	r2, r3, #5
   1457a:	d4b8      	bmi.n	144ee <__aeabi_fadd+0x4a>
   1457c:	075a      	lsls	r2, r3, #29
   1457e:	d1ce      	bne.n	1451e <__aeabi_fadd+0x7a>
   14580:	08de      	lsrs	r6, r3, #3
   14582:	002a      	movs	r2, r5
   14584:	2cff      	cmp	r4, #255	; 0xff
   14586:	d13a      	bne.n	145fe <__aeabi_fadd+0x15a>
   14588:	2e00      	cmp	r6, #0
   1458a:	d100      	bne.n	1458e <__aeabi_fadd+0xea>
   1458c:	e0ae      	b.n	146ec <__aeabi_fadd+0x248>
   1458e:	2380      	movs	r3, #128	; 0x80
   14590:	03db      	lsls	r3, r3, #15
   14592:	4333      	orrs	r3, r6
   14594:	025b      	lsls	r3, r3, #9
   14596:	0a5b      	lsrs	r3, r3, #9
   14598:	24ff      	movs	r4, #255	; 0xff
   1459a:	e7cf      	b.n	1453c <__aeabi_fadd+0x98>
   1459c:	1a21      	subs	r1, r4, r0
   1459e:	2900      	cmp	r1, #0
   145a0:	dd52      	ble.n	14648 <__aeabi_fadd+0x1a4>
   145a2:	2800      	cmp	r0, #0
   145a4:	d031      	beq.n	1460a <__aeabi_fadd+0x166>
   145a6:	2cff      	cmp	r4, #255	; 0xff
   145a8:	d0b7      	beq.n	1451a <__aeabi_fadd+0x76>
   145aa:	2080      	movs	r0, #128	; 0x80
   145ac:	003e      	movs	r6, r7
   145ae:	04c0      	lsls	r0, r0, #19
   145b0:	4306      	orrs	r6, r0
   145b2:	46b4      	mov	ip, r6
   145b4:	291b      	cmp	r1, #27
   145b6:	dd00      	ble.n	145ba <__aeabi_fadd+0x116>
   145b8:	e0aa      	b.n	14710 <__aeabi_fadd+0x26c>
   145ba:	2620      	movs	r6, #32
   145bc:	4660      	mov	r0, ip
   145be:	40c8      	lsrs	r0, r1
   145c0:	1a71      	subs	r1, r6, r1
   145c2:	4666      	mov	r6, ip
   145c4:	408e      	lsls	r6, r1
   145c6:	0031      	movs	r1, r6
   145c8:	1e4e      	subs	r6, r1, #1
   145ca:	41b1      	sbcs	r1, r6
   145cc:	4301      	orrs	r1, r0
   145ce:	185b      	adds	r3, r3, r1
   145d0:	0159      	lsls	r1, r3, #5
   145d2:	d5d3      	bpl.n	1457c <__aeabi_fadd+0xd8>
   145d4:	3401      	adds	r4, #1
   145d6:	2cff      	cmp	r4, #255	; 0xff
   145d8:	d100      	bne.n	145dc <__aeabi_fadd+0x138>
   145da:	e087      	b.n	146ec <__aeabi_fadd+0x248>
   145dc:	2201      	movs	r2, #1
   145de:	4978      	ldr	r1, [pc, #480]	; (147c0 <__aeabi_fadd+0x31c>)
   145e0:	401a      	ands	r2, r3
   145e2:	085b      	lsrs	r3, r3, #1
   145e4:	400b      	ands	r3, r1
   145e6:	4313      	orrs	r3, r2
   145e8:	e797      	b.n	1451a <__aeabi_fadd+0x76>
   145ea:	2c00      	cmp	r4, #0
   145ec:	d000      	beq.n	145f0 <__aeabi_fadd+0x14c>
   145ee:	e0a7      	b.n	14740 <__aeabi_fadd+0x29c>
   145f0:	2b00      	cmp	r3, #0
   145f2:	d000      	beq.n	145f6 <__aeabi_fadd+0x152>
   145f4:	e0b6      	b.n	14764 <__aeabi_fadd+0x2c0>
   145f6:	1e3b      	subs	r3, r7, #0
   145f8:	d162      	bne.n	146c0 <__aeabi_fadd+0x21c>
   145fa:	2600      	movs	r6, #0
   145fc:	2200      	movs	r2, #0
   145fe:	0273      	lsls	r3, r6, #9
   14600:	0a5b      	lsrs	r3, r3, #9
   14602:	b2e4      	uxtb	r4, r4
   14604:	e79a      	b.n	1453c <__aeabi_fadd+0x98>
   14606:	0014      	movs	r4, r2
   14608:	e787      	b.n	1451a <__aeabi_fadd+0x76>
   1460a:	2f00      	cmp	r7, #0
   1460c:	d04d      	beq.n	146aa <__aeabi_fadd+0x206>
   1460e:	1e48      	subs	r0, r1, #1
   14610:	2800      	cmp	r0, #0
   14612:	d157      	bne.n	146c4 <__aeabi_fadd+0x220>
   14614:	4463      	add	r3, ip
   14616:	2401      	movs	r4, #1
   14618:	015a      	lsls	r2, r3, #5
   1461a:	d5af      	bpl.n	1457c <__aeabi_fadd+0xd8>
   1461c:	2402      	movs	r4, #2
   1461e:	e7dd      	b.n	145dc <__aeabi_fadd+0x138>
   14620:	2a00      	cmp	r2, #0
   14622:	d124      	bne.n	1466e <__aeabi_fadd+0x1ca>
   14624:	1c62      	adds	r2, r4, #1
   14626:	b2d2      	uxtb	r2, r2
   14628:	2a01      	cmp	r2, #1
   1462a:	ddde      	ble.n	145ea <__aeabi_fadd+0x146>
   1462c:	1bde      	subs	r6, r3, r7
   1462e:	0172      	lsls	r2, r6, #5
   14630:	d535      	bpl.n	1469e <__aeabi_fadd+0x1fa>
   14632:	1afe      	subs	r6, r7, r3
   14634:	000d      	movs	r5, r1
   14636:	e75c      	b.n	144f2 <__aeabi_fadd+0x4e>
   14638:	002a      	movs	r2, r5
   1463a:	2300      	movs	r3, #0
   1463c:	e77e      	b.n	1453c <__aeabi_fadd+0x98>
   1463e:	0033      	movs	r3, r6
   14640:	4a60      	ldr	r2, [pc, #384]	; (147c4 <__aeabi_fadd+0x320>)
   14642:	1a24      	subs	r4, r4, r0
   14644:	4013      	ands	r3, r2
   14646:	e768      	b.n	1451a <__aeabi_fadd+0x76>
   14648:	2900      	cmp	r1, #0
   1464a:	d163      	bne.n	14714 <__aeabi_fadd+0x270>
   1464c:	1c61      	adds	r1, r4, #1
   1464e:	b2c8      	uxtb	r0, r1
   14650:	2801      	cmp	r0, #1
   14652:	dd4e      	ble.n	146f2 <__aeabi_fadd+0x24e>
   14654:	29ff      	cmp	r1, #255	; 0xff
   14656:	d049      	beq.n	146ec <__aeabi_fadd+0x248>
   14658:	4463      	add	r3, ip
   1465a:	085b      	lsrs	r3, r3, #1
   1465c:	000c      	movs	r4, r1
   1465e:	e75c      	b.n	1451a <__aeabi_fadd+0x76>
   14660:	2aff      	cmp	r2, #255	; 0xff
   14662:	d041      	beq.n	146e8 <__aeabi_fadd+0x244>
   14664:	000a      	movs	r2, r1
   14666:	e779      	b.n	1455c <__aeabi_fadd+0xb8>
   14668:	2201      	movs	r2, #1
   1466a:	1a9b      	subs	r3, r3, r2
   1466c:	e784      	b.n	14578 <__aeabi_fadd+0xd4>
   1466e:	2c00      	cmp	r4, #0
   14670:	d01d      	beq.n	146ae <__aeabi_fadd+0x20a>
   14672:	28ff      	cmp	r0, #255	; 0xff
   14674:	d022      	beq.n	146bc <__aeabi_fadd+0x218>
   14676:	2480      	movs	r4, #128	; 0x80
   14678:	04e4      	lsls	r4, r4, #19
   1467a:	4252      	negs	r2, r2
   1467c:	4323      	orrs	r3, r4
   1467e:	2a1b      	cmp	r2, #27
   14680:	dd00      	ble.n	14684 <__aeabi_fadd+0x1e0>
   14682:	e08a      	b.n	1479a <__aeabi_fadd+0x2f6>
   14684:	001c      	movs	r4, r3
   14686:	2520      	movs	r5, #32
   14688:	40d4      	lsrs	r4, r2
   1468a:	1aaa      	subs	r2, r5, r2
   1468c:	4093      	lsls	r3, r2
   1468e:	1e5a      	subs	r2, r3, #1
   14690:	4193      	sbcs	r3, r2
   14692:	4323      	orrs	r3, r4
   14694:	4662      	mov	r2, ip
   14696:	0004      	movs	r4, r0
   14698:	1ad3      	subs	r3, r2, r3
   1469a:	000d      	movs	r5, r1
   1469c:	e725      	b.n	144ea <__aeabi_fadd+0x46>
   1469e:	2e00      	cmp	r6, #0
   146a0:	d000      	beq.n	146a4 <__aeabi_fadd+0x200>
   146a2:	e726      	b.n	144f2 <__aeabi_fadd+0x4e>
   146a4:	2200      	movs	r2, #0
   146a6:	2400      	movs	r4, #0
   146a8:	e7a9      	b.n	145fe <__aeabi_fadd+0x15a>
   146aa:	000c      	movs	r4, r1
   146ac:	e735      	b.n	1451a <__aeabi_fadd+0x76>
   146ae:	2b00      	cmp	r3, #0
   146b0:	d04d      	beq.n	1474e <__aeabi_fadd+0x2aa>
   146b2:	43d2      	mvns	r2, r2
   146b4:	2a00      	cmp	r2, #0
   146b6:	d0ed      	beq.n	14694 <__aeabi_fadd+0x1f0>
   146b8:	28ff      	cmp	r0, #255	; 0xff
   146ba:	d1e0      	bne.n	1467e <__aeabi_fadd+0x1da>
   146bc:	4663      	mov	r3, ip
   146be:	24ff      	movs	r4, #255	; 0xff
   146c0:	000d      	movs	r5, r1
   146c2:	e72a      	b.n	1451a <__aeabi_fadd+0x76>
   146c4:	29ff      	cmp	r1, #255	; 0xff
   146c6:	d00f      	beq.n	146e8 <__aeabi_fadd+0x244>
   146c8:	0001      	movs	r1, r0
   146ca:	e773      	b.n	145b4 <__aeabi_fadd+0x110>
   146cc:	2b00      	cmp	r3, #0
   146ce:	d061      	beq.n	14794 <__aeabi_fadd+0x2f0>
   146d0:	24ff      	movs	r4, #255	; 0xff
   146d2:	2f00      	cmp	r7, #0
   146d4:	d100      	bne.n	146d8 <__aeabi_fadd+0x234>
   146d6:	e720      	b.n	1451a <__aeabi_fadd+0x76>
   146d8:	2280      	movs	r2, #128	; 0x80
   146da:	4641      	mov	r1, r8
   146dc:	03d2      	lsls	r2, r2, #15
   146de:	4211      	tst	r1, r2
   146e0:	d002      	beq.n	146e8 <__aeabi_fadd+0x244>
   146e2:	4216      	tst	r6, r2
   146e4:	d100      	bne.n	146e8 <__aeabi_fadd+0x244>
   146e6:	003b      	movs	r3, r7
   146e8:	24ff      	movs	r4, #255	; 0xff
   146ea:	e716      	b.n	1451a <__aeabi_fadd+0x76>
   146ec:	24ff      	movs	r4, #255	; 0xff
   146ee:	2300      	movs	r3, #0
   146f0:	e724      	b.n	1453c <__aeabi_fadd+0x98>
   146f2:	2c00      	cmp	r4, #0
   146f4:	d1ea      	bne.n	146cc <__aeabi_fadd+0x228>
   146f6:	2b00      	cmp	r3, #0
   146f8:	d058      	beq.n	147ac <__aeabi_fadd+0x308>
   146fa:	2f00      	cmp	r7, #0
   146fc:	d100      	bne.n	14700 <__aeabi_fadd+0x25c>
   146fe:	e70c      	b.n	1451a <__aeabi_fadd+0x76>
   14700:	4463      	add	r3, ip
   14702:	015a      	lsls	r2, r3, #5
   14704:	d400      	bmi.n	14708 <__aeabi_fadd+0x264>
   14706:	e739      	b.n	1457c <__aeabi_fadd+0xd8>
   14708:	4a2e      	ldr	r2, [pc, #184]	; (147c4 <__aeabi_fadd+0x320>)
   1470a:	000c      	movs	r4, r1
   1470c:	4013      	ands	r3, r2
   1470e:	e704      	b.n	1451a <__aeabi_fadd+0x76>
   14710:	2101      	movs	r1, #1
   14712:	e75c      	b.n	145ce <__aeabi_fadd+0x12a>
   14714:	2c00      	cmp	r4, #0
   14716:	d11e      	bne.n	14756 <__aeabi_fadd+0x2b2>
   14718:	2b00      	cmp	r3, #0
   1471a:	d040      	beq.n	1479e <__aeabi_fadd+0x2fa>
   1471c:	43c9      	mvns	r1, r1
   1471e:	2900      	cmp	r1, #0
   14720:	d00b      	beq.n	1473a <__aeabi_fadd+0x296>
   14722:	28ff      	cmp	r0, #255	; 0xff
   14724:	d036      	beq.n	14794 <__aeabi_fadd+0x2f0>
   14726:	291b      	cmp	r1, #27
   14728:	dc47      	bgt.n	147ba <__aeabi_fadd+0x316>
   1472a:	001c      	movs	r4, r3
   1472c:	2620      	movs	r6, #32
   1472e:	40cc      	lsrs	r4, r1
   14730:	1a71      	subs	r1, r6, r1
   14732:	408b      	lsls	r3, r1
   14734:	1e59      	subs	r1, r3, #1
   14736:	418b      	sbcs	r3, r1
   14738:	4323      	orrs	r3, r4
   1473a:	4463      	add	r3, ip
   1473c:	0004      	movs	r4, r0
   1473e:	e747      	b.n	145d0 <__aeabi_fadd+0x12c>
   14740:	2b00      	cmp	r3, #0
   14742:	d118      	bne.n	14776 <__aeabi_fadd+0x2d2>
   14744:	1e3b      	subs	r3, r7, #0
   14746:	d02d      	beq.n	147a4 <__aeabi_fadd+0x300>
   14748:	000d      	movs	r5, r1
   1474a:	24ff      	movs	r4, #255	; 0xff
   1474c:	e6e5      	b.n	1451a <__aeabi_fadd+0x76>
   1474e:	003b      	movs	r3, r7
   14750:	0004      	movs	r4, r0
   14752:	000d      	movs	r5, r1
   14754:	e6e1      	b.n	1451a <__aeabi_fadd+0x76>
   14756:	28ff      	cmp	r0, #255	; 0xff
   14758:	d01c      	beq.n	14794 <__aeabi_fadd+0x2f0>
   1475a:	2480      	movs	r4, #128	; 0x80
   1475c:	04e4      	lsls	r4, r4, #19
   1475e:	4249      	negs	r1, r1
   14760:	4323      	orrs	r3, r4
   14762:	e7e0      	b.n	14726 <__aeabi_fadd+0x282>
   14764:	2f00      	cmp	r7, #0
   14766:	d100      	bne.n	1476a <__aeabi_fadd+0x2c6>
   14768:	e6d7      	b.n	1451a <__aeabi_fadd+0x76>
   1476a:	1bde      	subs	r6, r3, r7
   1476c:	0172      	lsls	r2, r6, #5
   1476e:	d51f      	bpl.n	147b0 <__aeabi_fadd+0x30c>
   14770:	1afb      	subs	r3, r7, r3
   14772:	000d      	movs	r5, r1
   14774:	e6d1      	b.n	1451a <__aeabi_fadd+0x76>
   14776:	24ff      	movs	r4, #255	; 0xff
   14778:	2f00      	cmp	r7, #0
   1477a:	d100      	bne.n	1477e <__aeabi_fadd+0x2da>
   1477c:	e6cd      	b.n	1451a <__aeabi_fadd+0x76>
   1477e:	2280      	movs	r2, #128	; 0x80
   14780:	4640      	mov	r0, r8
   14782:	03d2      	lsls	r2, r2, #15
   14784:	4210      	tst	r0, r2
   14786:	d0af      	beq.n	146e8 <__aeabi_fadd+0x244>
   14788:	4216      	tst	r6, r2
   1478a:	d1ad      	bne.n	146e8 <__aeabi_fadd+0x244>
   1478c:	003b      	movs	r3, r7
   1478e:	000d      	movs	r5, r1
   14790:	24ff      	movs	r4, #255	; 0xff
   14792:	e6c2      	b.n	1451a <__aeabi_fadd+0x76>
   14794:	4663      	mov	r3, ip
   14796:	24ff      	movs	r4, #255	; 0xff
   14798:	e6bf      	b.n	1451a <__aeabi_fadd+0x76>
   1479a:	2301      	movs	r3, #1
   1479c:	e77a      	b.n	14694 <__aeabi_fadd+0x1f0>
   1479e:	003b      	movs	r3, r7
   147a0:	0004      	movs	r4, r0
   147a2:	e6ba      	b.n	1451a <__aeabi_fadd+0x76>
   147a4:	2680      	movs	r6, #128	; 0x80
   147a6:	2200      	movs	r2, #0
   147a8:	03f6      	lsls	r6, r6, #15
   147aa:	e6f0      	b.n	1458e <__aeabi_fadd+0xea>
   147ac:	003b      	movs	r3, r7
   147ae:	e6b4      	b.n	1451a <__aeabi_fadd+0x76>
   147b0:	1e33      	subs	r3, r6, #0
   147b2:	d000      	beq.n	147b6 <__aeabi_fadd+0x312>
   147b4:	e6e2      	b.n	1457c <__aeabi_fadd+0xd8>
   147b6:	2200      	movs	r2, #0
   147b8:	e721      	b.n	145fe <__aeabi_fadd+0x15a>
   147ba:	2301      	movs	r3, #1
   147bc:	e7bd      	b.n	1473a <__aeabi_fadd+0x296>
   147be:	46c0      	nop			; (mov r8, r8)
   147c0:	7dffffff 	.word	0x7dffffff
   147c4:	fbffffff 	.word	0xfbffffff

000147c8 <__aeabi_fdiv>:
   147c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ca:	4657      	mov	r7, sl
   147cc:	464e      	mov	r6, r9
   147ce:	46de      	mov	lr, fp
   147d0:	4645      	mov	r5, r8
   147d2:	b5e0      	push	{r5, r6, r7, lr}
   147d4:	0244      	lsls	r4, r0, #9
   147d6:	0043      	lsls	r3, r0, #1
   147d8:	0fc6      	lsrs	r6, r0, #31
   147da:	b083      	sub	sp, #12
   147dc:	1c0f      	adds	r7, r1, #0
   147de:	0a64      	lsrs	r4, r4, #9
   147e0:	0e1b      	lsrs	r3, r3, #24
   147e2:	46b2      	mov	sl, r6
   147e4:	d053      	beq.n	1488e <__aeabi_fdiv+0xc6>
   147e6:	2bff      	cmp	r3, #255	; 0xff
   147e8:	d027      	beq.n	1483a <__aeabi_fdiv+0x72>
   147ea:	2280      	movs	r2, #128	; 0x80
   147ec:	00e4      	lsls	r4, r4, #3
   147ee:	04d2      	lsls	r2, r2, #19
   147f0:	4314      	orrs	r4, r2
   147f2:	227f      	movs	r2, #127	; 0x7f
   147f4:	4252      	negs	r2, r2
   147f6:	4690      	mov	r8, r2
   147f8:	4498      	add	r8, r3
   147fa:	2300      	movs	r3, #0
   147fc:	4699      	mov	r9, r3
   147fe:	469b      	mov	fp, r3
   14800:	027d      	lsls	r5, r7, #9
   14802:	0078      	lsls	r0, r7, #1
   14804:	0ffb      	lsrs	r3, r7, #31
   14806:	0a6d      	lsrs	r5, r5, #9
   14808:	0e00      	lsrs	r0, r0, #24
   1480a:	9300      	str	r3, [sp, #0]
   1480c:	d024      	beq.n	14858 <__aeabi_fdiv+0x90>
   1480e:	28ff      	cmp	r0, #255	; 0xff
   14810:	d046      	beq.n	148a0 <__aeabi_fdiv+0xd8>
   14812:	2380      	movs	r3, #128	; 0x80
   14814:	2100      	movs	r1, #0
   14816:	00ed      	lsls	r5, r5, #3
   14818:	04db      	lsls	r3, r3, #19
   1481a:	431d      	orrs	r5, r3
   1481c:	387f      	subs	r0, #127	; 0x7f
   1481e:	4647      	mov	r7, r8
   14820:	1a38      	subs	r0, r7, r0
   14822:	464f      	mov	r7, r9
   14824:	430f      	orrs	r7, r1
   14826:	00bf      	lsls	r7, r7, #2
   14828:	46b9      	mov	r9, r7
   1482a:	0033      	movs	r3, r6
   1482c:	9a00      	ldr	r2, [sp, #0]
   1482e:	4f87      	ldr	r7, [pc, #540]	; (14a4c <__aeabi_fdiv+0x284>)
   14830:	4053      	eors	r3, r2
   14832:	464a      	mov	r2, r9
   14834:	58ba      	ldr	r2, [r7, r2]
   14836:	9301      	str	r3, [sp, #4]
   14838:	4697      	mov	pc, r2
   1483a:	2c00      	cmp	r4, #0
   1483c:	d14e      	bne.n	148dc <__aeabi_fdiv+0x114>
   1483e:	2308      	movs	r3, #8
   14840:	4699      	mov	r9, r3
   14842:	33f7      	adds	r3, #247	; 0xf7
   14844:	4698      	mov	r8, r3
   14846:	3bfd      	subs	r3, #253	; 0xfd
   14848:	469b      	mov	fp, r3
   1484a:	027d      	lsls	r5, r7, #9
   1484c:	0078      	lsls	r0, r7, #1
   1484e:	0ffb      	lsrs	r3, r7, #31
   14850:	0a6d      	lsrs	r5, r5, #9
   14852:	0e00      	lsrs	r0, r0, #24
   14854:	9300      	str	r3, [sp, #0]
   14856:	d1da      	bne.n	1480e <__aeabi_fdiv+0x46>
   14858:	2d00      	cmp	r5, #0
   1485a:	d126      	bne.n	148aa <__aeabi_fdiv+0xe2>
   1485c:	2000      	movs	r0, #0
   1485e:	2101      	movs	r1, #1
   14860:	0033      	movs	r3, r6
   14862:	9a00      	ldr	r2, [sp, #0]
   14864:	4f7a      	ldr	r7, [pc, #488]	; (14a50 <__aeabi_fdiv+0x288>)
   14866:	4053      	eors	r3, r2
   14868:	4642      	mov	r2, r8
   1486a:	1a10      	subs	r0, r2, r0
   1486c:	464a      	mov	r2, r9
   1486e:	430a      	orrs	r2, r1
   14870:	0092      	lsls	r2, r2, #2
   14872:	58ba      	ldr	r2, [r7, r2]
   14874:	001d      	movs	r5, r3
   14876:	4697      	mov	pc, r2
   14878:	9b00      	ldr	r3, [sp, #0]
   1487a:	002c      	movs	r4, r5
   1487c:	469a      	mov	sl, r3
   1487e:	468b      	mov	fp, r1
   14880:	465b      	mov	r3, fp
   14882:	2b02      	cmp	r3, #2
   14884:	d131      	bne.n	148ea <__aeabi_fdiv+0x122>
   14886:	4653      	mov	r3, sl
   14888:	21ff      	movs	r1, #255	; 0xff
   1488a:	2400      	movs	r4, #0
   1488c:	e038      	b.n	14900 <__aeabi_fdiv+0x138>
   1488e:	2c00      	cmp	r4, #0
   14890:	d117      	bne.n	148c2 <__aeabi_fdiv+0xfa>
   14892:	2304      	movs	r3, #4
   14894:	4699      	mov	r9, r3
   14896:	2300      	movs	r3, #0
   14898:	4698      	mov	r8, r3
   1489a:	3301      	adds	r3, #1
   1489c:	469b      	mov	fp, r3
   1489e:	e7af      	b.n	14800 <__aeabi_fdiv+0x38>
   148a0:	20ff      	movs	r0, #255	; 0xff
   148a2:	2d00      	cmp	r5, #0
   148a4:	d10b      	bne.n	148be <__aeabi_fdiv+0xf6>
   148a6:	2102      	movs	r1, #2
   148a8:	e7da      	b.n	14860 <__aeabi_fdiv+0x98>
   148aa:	0028      	movs	r0, r5
   148ac:	f002 fb52 	bl	16f54 <__clzsi2>
   148b0:	1f43      	subs	r3, r0, #5
   148b2:	409d      	lsls	r5, r3
   148b4:	2376      	movs	r3, #118	; 0x76
   148b6:	425b      	negs	r3, r3
   148b8:	1a18      	subs	r0, r3, r0
   148ba:	2100      	movs	r1, #0
   148bc:	e7af      	b.n	1481e <__aeabi_fdiv+0x56>
   148be:	2103      	movs	r1, #3
   148c0:	e7ad      	b.n	1481e <__aeabi_fdiv+0x56>
   148c2:	0020      	movs	r0, r4
   148c4:	f002 fb46 	bl	16f54 <__clzsi2>
   148c8:	1f43      	subs	r3, r0, #5
   148ca:	409c      	lsls	r4, r3
   148cc:	2376      	movs	r3, #118	; 0x76
   148ce:	425b      	negs	r3, r3
   148d0:	1a1b      	subs	r3, r3, r0
   148d2:	4698      	mov	r8, r3
   148d4:	2300      	movs	r3, #0
   148d6:	4699      	mov	r9, r3
   148d8:	469b      	mov	fp, r3
   148da:	e791      	b.n	14800 <__aeabi_fdiv+0x38>
   148dc:	230c      	movs	r3, #12
   148de:	4699      	mov	r9, r3
   148e0:	33f3      	adds	r3, #243	; 0xf3
   148e2:	4698      	mov	r8, r3
   148e4:	3bfc      	subs	r3, #252	; 0xfc
   148e6:	469b      	mov	fp, r3
   148e8:	e78a      	b.n	14800 <__aeabi_fdiv+0x38>
   148ea:	2b03      	cmp	r3, #3
   148ec:	d100      	bne.n	148f0 <__aeabi_fdiv+0x128>
   148ee:	e0a5      	b.n	14a3c <__aeabi_fdiv+0x274>
   148f0:	4655      	mov	r5, sl
   148f2:	2b01      	cmp	r3, #1
   148f4:	d000      	beq.n	148f8 <__aeabi_fdiv+0x130>
   148f6:	e081      	b.n	149fc <__aeabi_fdiv+0x234>
   148f8:	2301      	movs	r3, #1
   148fa:	2100      	movs	r1, #0
   148fc:	2400      	movs	r4, #0
   148fe:	402b      	ands	r3, r5
   14900:	0264      	lsls	r4, r4, #9
   14902:	05c9      	lsls	r1, r1, #23
   14904:	0a60      	lsrs	r0, r4, #9
   14906:	07db      	lsls	r3, r3, #31
   14908:	4308      	orrs	r0, r1
   1490a:	4318      	orrs	r0, r3
   1490c:	b003      	add	sp, #12
   1490e:	bc3c      	pop	{r2, r3, r4, r5}
   14910:	4690      	mov	r8, r2
   14912:	4699      	mov	r9, r3
   14914:	46a2      	mov	sl, r4
   14916:	46ab      	mov	fp, r5
   14918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1491a:	2480      	movs	r4, #128	; 0x80
   1491c:	2300      	movs	r3, #0
   1491e:	03e4      	lsls	r4, r4, #15
   14920:	21ff      	movs	r1, #255	; 0xff
   14922:	e7ed      	b.n	14900 <__aeabi_fdiv+0x138>
   14924:	21ff      	movs	r1, #255	; 0xff
   14926:	2400      	movs	r4, #0
   14928:	e7ea      	b.n	14900 <__aeabi_fdiv+0x138>
   1492a:	2301      	movs	r3, #1
   1492c:	1a59      	subs	r1, r3, r1
   1492e:	291b      	cmp	r1, #27
   14930:	dd66      	ble.n	14a00 <__aeabi_fdiv+0x238>
   14932:	9a01      	ldr	r2, [sp, #4]
   14934:	4013      	ands	r3, r2
   14936:	2100      	movs	r1, #0
   14938:	2400      	movs	r4, #0
   1493a:	e7e1      	b.n	14900 <__aeabi_fdiv+0x138>
   1493c:	2380      	movs	r3, #128	; 0x80
   1493e:	03db      	lsls	r3, r3, #15
   14940:	421c      	tst	r4, r3
   14942:	d038      	beq.n	149b6 <__aeabi_fdiv+0x1ee>
   14944:	421d      	tst	r5, r3
   14946:	d051      	beq.n	149ec <__aeabi_fdiv+0x224>
   14948:	431c      	orrs	r4, r3
   1494a:	0264      	lsls	r4, r4, #9
   1494c:	0a64      	lsrs	r4, r4, #9
   1494e:	0033      	movs	r3, r6
   14950:	21ff      	movs	r1, #255	; 0xff
   14952:	e7d5      	b.n	14900 <__aeabi_fdiv+0x138>
   14954:	0163      	lsls	r3, r4, #5
   14956:	016c      	lsls	r4, r5, #5
   14958:	42a3      	cmp	r3, r4
   1495a:	d23b      	bcs.n	149d4 <__aeabi_fdiv+0x20c>
   1495c:	261b      	movs	r6, #27
   1495e:	2100      	movs	r1, #0
   14960:	3801      	subs	r0, #1
   14962:	2501      	movs	r5, #1
   14964:	001f      	movs	r7, r3
   14966:	0049      	lsls	r1, r1, #1
   14968:	005b      	lsls	r3, r3, #1
   1496a:	2f00      	cmp	r7, #0
   1496c:	db01      	blt.n	14972 <__aeabi_fdiv+0x1aa>
   1496e:	429c      	cmp	r4, r3
   14970:	d801      	bhi.n	14976 <__aeabi_fdiv+0x1ae>
   14972:	1b1b      	subs	r3, r3, r4
   14974:	4329      	orrs	r1, r5
   14976:	3e01      	subs	r6, #1
   14978:	2e00      	cmp	r6, #0
   1497a:	d1f3      	bne.n	14964 <__aeabi_fdiv+0x19c>
   1497c:	001c      	movs	r4, r3
   1497e:	1e63      	subs	r3, r4, #1
   14980:	419c      	sbcs	r4, r3
   14982:	430c      	orrs	r4, r1
   14984:	0001      	movs	r1, r0
   14986:	317f      	adds	r1, #127	; 0x7f
   14988:	2900      	cmp	r1, #0
   1498a:	ddce      	ble.n	1492a <__aeabi_fdiv+0x162>
   1498c:	0763      	lsls	r3, r4, #29
   1498e:	d004      	beq.n	1499a <__aeabi_fdiv+0x1d2>
   14990:	230f      	movs	r3, #15
   14992:	4023      	ands	r3, r4
   14994:	2b04      	cmp	r3, #4
   14996:	d000      	beq.n	1499a <__aeabi_fdiv+0x1d2>
   14998:	3404      	adds	r4, #4
   1499a:	0123      	lsls	r3, r4, #4
   1499c:	d503      	bpl.n	149a6 <__aeabi_fdiv+0x1de>
   1499e:	0001      	movs	r1, r0
   149a0:	4b2c      	ldr	r3, [pc, #176]	; (14a54 <__aeabi_fdiv+0x28c>)
   149a2:	3180      	adds	r1, #128	; 0x80
   149a4:	401c      	ands	r4, r3
   149a6:	29fe      	cmp	r1, #254	; 0xfe
   149a8:	dd0d      	ble.n	149c6 <__aeabi_fdiv+0x1fe>
   149aa:	2301      	movs	r3, #1
   149ac:	9a01      	ldr	r2, [sp, #4]
   149ae:	21ff      	movs	r1, #255	; 0xff
   149b0:	4013      	ands	r3, r2
   149b2:	2400      	movs	r4, #0
   149b4:	e7a4      	b.n	14900 <__aeabi_fdiv+0x138>
   149b6:	2380      	movs	r3, #128	; 0x80
   149b8:	03db      	lsls	r3, r3, #15
   149ba:	431c      	orrs	r4, r3
   149bc:	0264      	lsls	r4, r4, #9
   149be:	0a64      	lsrs	r4, r4, #9
   149c0:	0033      	movs	r3, r6
   149c2:	21ff      	movs	r1, #255	; 0xff
   149c4:	e79c      	b.n	14900 <__aeabi_fdiv+0x138>
   149c6:	2301      	movs	r3, #1
   149c8:	9a01      	ldr	r2, [sp, #4]
   149ca:	01a4      	lsls	r4, r4, #6
   149cc:	0a64      	lsrs	r4, r4, #9
   149ce:	b2c9      	uxtb	r1, r1
   149d0:	4013      	ands	r3, r2
   149d2:	e795      	b.n	14900 <__aeabi_fdiv+0x138>
   149d4:	1b1b      	subs	r3, r3, r4
   149d6:	261a      	movs	r6, #26
   149d8:	2101      	movs	r1, #1
   149da:	e7c2      	b.n	14962 <__aeabi_fdiv+0x19a>
   149dc:	9b00      	ldr	r3, [sp, #0]
   149de:	468b      	mov	fp, r1
   149e0:	469a      	mov	sl, r3
   149e2:	2400      	movs	r4, #0
   149e4:	e74c      	b.n	14880 <__aeabi_fdiv+0xb8>
   149e6:	0263      	lsls	r3, r4, #9
   149e8:	d5e5      	bpl.n	149b6 <__aeabi_fdiv+0x1ee>
   149ea:	2500      	movs	r5, #0
   149ec:	2480      	movs	r4, #128	; 0x80
   149ee:	03e4      	lsls	r4, r4, #15
   149f0:	432c      	orrs	r4, r5
   149f2:	0264      	lsls	r4, r4, #9
   149f4:	0a64      	lsrs	r4, r4, #9
   149f6:	9b00      	ldr	r3, [sp, #0]
   149f8:	21ff      	movs	r1, #255	; 0xff
   149fa:	e781      	b.n	14900 <__aeabi_fdiv+0x138>
   149fc:	9501      	str	r5, [sp, #4]
   149fe:	e7c1      	b.n	14984 <__aeabi_fdiv+0x1bc>
   14a00:	0023      	movs	r3, r4
   14a02:	2020      	movs	r0, #32
   14a04:	40cb      	lsrs	r3, r1
   14a06:	1a41      	subs	r1, r0, r1
   14a08:	408c      	lsls	r4, r1
   14a0a:	1e61      	subs	r1, r4, #1
   14a0c:	418c      	sbcs	r4, r1
   14a0e:	431c      	orrs	r4, r3
   14a10:	0763      	lsls	r3, r4, #29
   14a12:	d004      	beq.n	14a1e <__aeabi_fdiv+0x256>
   14a14:	230f      	movs	r3, #15
   14a16:	4023      	ands	r3, r4
   14a18:	2b04      	cmp	r3, #4
   14a1a:	d000      	beq.n	14a1e <__aeabi_fdiv+0x256>
   14a1c:	3404      	adds	r4, #4
   14a1e:	0163      	lsls	r3, r4, #5
   14a20:	d505      	bpl.n	14a2e <__aeabi_fdiv+0x266>
   14a22:	2301      	movs	r3, #1
   14a24:	9a01      	ldr	r2, [sp, #4]
   14a26:	2101      	movs	r1, #1
   14a28:	4013      	ands	r3, r2
   14a2a:	2400      	movs	r4, #0
   14a2c:	e768      	b.n	14900 <__aeabi_fdiv+0x138>
   14a2e:	2301      	movs	r3, #1
   14a30:	9a01      	ldr	r2, [sp, #4]
   14a32:	01a4      	lsls	r4, r4, #6
   14a34:	0a64      	lsrs	r4, r4, #9
   14a36:	4013      	ands	r3, r2
   14a38:	2100      	movs	r1, #0
   14a3a:	e761      	b.n	14900 <__aeabi_fdiv+0x138>
   14a3c:	2380      	movs	r3, #128	; 0x80
   14a3e:	03db      	lsls	r3, r3, #15
   14a40:	431c      	orrs	r4, r3
   14a42:	0264      	lsls	r4, r4, #9
   14a44:	0a64      	lsrs	r4, r4, #9
   14a46:	4653      	mov	r3, sl
   14a48:	21ff      	movs	r1, #255	; 0xff
   14a4a:	e759      	b.n	14900 <__aeabi_fdiv+0x138>
   14a4c:	000177e0 	.word	0x000177e0
   14a50:	00017820 	.word	0x00017820
   14a54:	f7ffffff 	.word	0xf7ffffff

00014a58 <__eqsf2>:
   14a58:	b570      	push	{r4, r5, r6, lr}
   14a5a:	0042      	lsls	r2, r0, #1
   14a5c:	0245      	lsls	r5, r0, #9
   14a5e:	024e      	lsls	r6, r1, #9
   14a60:	004c      	lsls	r4, r1, #1
   14a62:	0fc3      	lsrs	r3, r0, #31
   14a64:	0a6d      	lsrs	r5, r5, #9
   14a66:	0e12      	lsrs	r2, r2, #24
   14a68:	0a76      	lsrs	r6, r6, #9
   14a6a:	0e24      	lsrs	r4, r4, #24
   14a6c:	0fc9      	lsrs	r1, r1, #31
   14a6e:	2001      	movs	r0, #1
   14a70:	2aff      	cmp	r2, #255	; 0xff
   14a72:	d006      	beq.n	14a82 <__eqsf2+0x2a>
   14a74:	2cff      	cmp	r4, #255	; 0xff
   14a76:	d003      	beq.n	14a80 <__eqsf2+0x28>
   14a78:	42a2      	cmp	r2, r4
   14a7a:	d101      	bne.n	14a80 <__eqsf2+0x28>
   14a7c:	42b5      	cmp	r5, r6
   14a7e:	d006      	beq.n	14a8e <__eqsf2+0x36>
   14a80:	bd70      	pop	{r4, r5, r6, pc}
   14a82:	2d00      	cmp	r5, #0
   14a84:	d1fc      	bne.n	14a80 <__eqsf2+0x28>
   14a86:	2cff      	cmp	r4, #255	; 0xff
   14a88:	d1fa      	bne.n	14a80 <__eqsf2+0x28>
   14a8a:	2e00      	cmp	r6, #0
   14a8c:	d1f8      	bne.n	14a80 <__eqsf2+0x28>
   14a8e:	428b      	cmp	r3, r1
   14a90:	d006      	beq.n	14aa0 <__eqsf2+0x48>
   14a92:	2001      	movs	r0, #1
   14a94:	2a00      	cmp	r2, #0
   14a96:	d1f3      	bne.n	14a80 <__eqsf2+0x28>
   14a98:	0028      	movs	r0, r5
   14a9a:	1e45      	subs	r5, r0, #1
   14a9c:	41a8      	sbcs	r0, r5
   14a9e:	e7ef      	b.n	14a80 <__eqsf2+0x28>
   14aa0:	2000      	movs	r0, #0
   14aa2:	e7ed      	b.n	14a80 <__eqsf2+0x28>

00014aa4 <__gesf2>:
   14aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14aa6:	0042      	lsls	r2, r0, #1
   14aa8:	0245      	lsls	r5, r0, #9
   14aaa:	024c      	lsls	r4, r1, #9
   14aac:	0fc3      	lsrs	r3, r0, #31
   14aae:	0048      	lsls	r0, r1, #1
   14ab0:	0a6d      	lsrs	r5, r5, #9
   14ab2:	0e12      	lsrs	r2, r2, #24
   14ab4:	0a64      	lsrs	r4, r4, #9
   14ab6:	0e00      	lsrs	r0, r0, #24
   14ab8:	0fc9      	lsrs	r1, r1, #31
   14aba:	2aff      	cmp	r2, #255	; 0xff
   14abc:	d01e      	beq.n	14afc <__gesf2+0x58>
   14abe:	28ff      	cmp	r0, #255	; 0xff
   14ac0:	d021      	beq.n	14b06 <__gesf2+0x62>
   14ac2:	2a00      	cmp	r2, #0
   14ac4:	d10a      	bne.n	14adc <__gesf2+0x38>
   14ac6:	426e      	negs	r6, r5
   14ac8:	416e      	adcs	r6, r5
   14aca:	b2f6      	uxtb	r6, r6
   14acc:	2800      	cmp	r0, #0
   14ace:	d10f      	bne.n	14af0 <__gesf2+0x4c>
   14ad0:	2c00      	cmp	r4, #0
   14ad2:	d10d      	bne.n	14af0 <__gesf2+0x4c>
   14ad4:	2000      	movs	r0, #0
   14ad6:	2d00      	cmp	r5, #0
   14ad8:	d009      	beq.n	14aee <__gesf2+0x4a>
   14ada:	e005      	b.n	14ae8 <__gesf2+0x44>
   14adc:	2800      	cmp	r0, #0
   14ade:	d101      	bne.n	14ae4 <__gesf2+0x40>
   14ae0:	2c00      	cmp	r4, #0
   14ae2:	d001      	beq.n	14ae8 <__gesf2+0x44>
   14ae4:	428b      	cmp	r3, r1
   14ae6:	d011      	beq.n	14b0c <__gesf2+0x68>
   14ae8:	2101      	movs	r1, #1
   14aea:	4258      	negs	r0, r3
   14aec:	4308      	orrs	r0, r1
   14aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14af0:	2e00      	cmp	r6, #0
   14af2:	d0f7      	beq.n	14ae4 <__gesf2+0x40>
   14af4:	2001      	movs	r0, #1
   14af6:	3901      	subs	r1, #1
   14af8:	4308      	orrs	r0, r1
   14afa:	e7f8      	b.n	14aee <__gesf2+0x4a>
   14afc:	2d00      	cmp	r5, #0
   14afe:	d0de      	beq.n	14abe <__gesf2+0x1a>
   14b00:	2002      	movs	r0, #2
   14b02:	4240      	negs	r0, r0
   14b04:	e7f3      	b.n	14aee <__gesf2+0x4a>
   14b06:	2c00      	cmp	r4, #0
   14b08:	d0db      	beq.n	14ac2 <__gesf2+0x1e>
   14b0a:	e7f9      	b.n	14b00 <__gesf2+0x5c>
   14b0c:	4282      	cmp	r2, r0
   14b0e:	dceb      	bgt.n	14ae8 <__gesf2+0x44>
   14b10:	db04      	blt.n	14b1c <__gesf2+0x78>
   14b12:	42a5      	cmp	r5, r4
   14b14:	d8e8      	bhi.n	14ae8 <__gesf2+0x44>
   14b16:	2000      	movs	r0, #0
   14b18:	42a5      	cmp	r5, r4
   14b1a:	d2e8      	bcs.n	14aee <__gesf2+0x4a>
   14b1c:	2101      	movs	r1, #1
   14b1e:	1e58      	subs	r0, r3, #1
   14b20:	4308      	orrs	r0, r1
   14b22:	e7e4      	b.n	14aee <__gesf2+0x4a>

00014b24 <__lesf2>:
   14b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b26:	0042      	lsls	r2, r0, #1
   14b28:	024d      	lsls	r5, r1, #9
   14b2a:	004c      	lsls	r4, r1, #1
   14b2c:	0246      	lsls	r6, r0, #9
   14b2e:	0a76      	lsrs	r6, r6, #9
   14b30:	0e12      	lsrs	r2, r2, #24
   14b32:	0fc3      	lsrs	r3, r0, #31
   14b34:	0a6d      	lsrs	r5, r5, #9
   14b36:	0e24      	lsrs	r4, r4, #24
   14b38:	0fc9      	lsrs	r1, r1, #31
   14b3a:	2aff      	cmp	r2, #255	; 0xff
   14b3c:	d016      	beq.n	14b6c <__lesf2+0x48>
   14b3e:	2cff      	cmp	r4, #255	; 0xff
   14b40:	d018      	beq.n	14b74 <__lesf2+0x50>
   14b42:	2a00      	cmp	r2, #0
   14b44:	d10a      	bne.n	14b5c <__lesf2+0x38>
   14b46:	4270      	negs	r0, r6
   14b48:	4170      	adcs	r0, r6
   14b4a:	b2c0      	uxtb	r0, r0
   14b4c:	2c00      	cmp	r4, #0
   14b4e:	d015      	beq.n	14b7c <__lesf2+0x58>
   14b50:	2800      	cmp	r0, #0
   14b52:	d005      	beq.n	14b60 <__lesf2+0x3c>
   14b54:	2001      	movs	r0, #1
   14b56:	3901      	subs	r1, #1
   14b58:	4308      	orrs	r0, r1
   14b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b5c:	2c00      	cmp	r4, #0
   14b5e:	d013      	beq.n	14b88 <__lesf2+0x64>
   14b60:	4299      	cmp	r1, r3
   14b62:	d014      	beq.n	14b8e <__lesf2+0x6a>
   14b64:	2001      	movs	r0, #1
   14b66:	425b      	negs	r3, r3
   14b68:	4318      	orrs	r0, r3
   14b6a:	e7f6      	b.n	14b5a <__lesf2+0x36>
   14b6c:	2002      	movs	r0, #2
   14b6e:	2e00      	cmp	r6, #0
   14b70:	d1f3      	bne.n	14b5a <__lesf2+0x36>
   14b72:	e7e4      	b.n	14b3e <__lesf2+0x1a>
   14b74:	2002      	movs	r0, #2
   14b76:	2d00      	cmp	r5, #0
   14b78:	d1ef      	bne.n	14b5a <__lesf2+0x36>
   14b7a:	e7e2      	b.n	14b42 <__lesf2+0x1e>
   14b7c:	2d00      	cmp	r5, #0
   14b7e:	d1e7      	bne.n	14b50 <__lesf2+0x2c>
   14b80:	2000      	movs	r0, #0
   14b82:	2e00      	cmp	r6, #0
   14b84:	d0e9      	beq.n	14b5a <__lesf2+0x36>
   14b86:	e7ed      	b.n	14b64 <__lesf2+0x40>
   14b88:	2d00      	cmp	r5, #0
   14b8a:	d1e9      	bne.n	14b60 <__lesf2+0x3c>
   14b8c:	e7ea      	b.n	14b64 <__lesf2+0x40>
   14b8e:	42a2      	cmp	r2, r4
   14b90:	dc06      	bgt.n	14ba0 <__lesf2+0x7c>
   14b92:	dbdf      	blt.n	14b54 <__lesf2+0x30>
   14b94:	42ae      	cmp	r6, r5
   14b96:	d803      	bhi.n	14ba0 <__lesf2+0x7c>
   14b98:	2000      	movs	r0, #0
   14b9a:	42ae      	cmp	r6, r5
   14b9c:	d3da      	bcc.n	14b54 <__lesf2+0x30>
   14b9e:	e7dc      	b.n	14b5a <__lesf2+0x36>
   14ba0:	2001      	movs	r0, #1
   14ba2:	4249      	negs	r1, r1
   14ba4:	4308      	orrs	r0, r1
   14ba6:	e7d8      	b.n	14b5a <__lesf2+0x36>

00014ba8 <__aeabi_fmul>:
   14ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14baa:	4657      	mov	r7, sl
   14bac:	464e      	mov	r6, r9
   14bae:	4645      	mov	r5, r8
   14bb0:	46de      	mov	lr, fp
   14bb2:	b5e0      	push	{r5, r6, r7, lr}
   14bb4:	0247      	lsls	r7, r0, #9
   14bb6:	0046      	lsls	r6, r0, #1
   14bb8:	4688      	mov	r8, r1
   14bba:	0a7f      	lsrs	r7, r7, #9
   14bbc:	0e36      	lsrs	r6, r6, #24
   14bbe:	0fc4      	lsrs	r4, r0, #31
   14bc0:	2e00      	cmp	r6, #0
   14bc2:	d047      	beq.n	14c54 <__aeabi_fmul+0xac>
   14bc4:	2eff      	cmp	r6, #255	; 0xff
   14bc6:	d024      	beq.n	14c12 <__aeabi_fmul+0x6a>
   14bc8:	00fb      	lsls	r3, r7, #3
   14bca:	2780      	movs	r7, #128	; 0x80
   14bcc:	04ff      	lsls	r7, r7, #19
   14bce:	431f      	orrs	r7, r3
   14bd0:	2300      	movs	r3, #0
   14bd2:	4699      	mov	r9, r3
   14bd4:	469a      	mov	sl, r3
   14bd6:	3e7f      	subs	r6, #127	; 0x7f
   14bd8:	4643      	mov	r3, r8
   14bda:	025d      	lsls	r5, r3, #9
   14bdc:	0058      	lsls	r0, r3, #1
   14bde:	0fdb      	lsrs	r3, r3, #31
   14be0:	0a6d      	lsrs	r5, r5, #9
   14be2:	0e00      	lsrs	r0, r0, #24
   14be4:	4698      	mov	r8, r3
   14be6:	d043      	beq.n	14c70 <__aeabi_fmul+0xc8>
   14be8:	28ff      	cmp	r0, #255	; 0xff
   14bea:	d03b      	beq.n	14c64 <__aeabi_fmul+0xbc>
   14bec:	00eb      	lsls	r3, r5, #3
   14bee:	2580      	movs	r5, #128	; 0x80
   14bf0:	2200      	movs	r2, #0
   14bf2:	04ed      	lsls	r5, r5, #19
   14bf4:	431d      	orrs	r5, r3
   14bf6:	387f      	subs	r0, #127	; 0x7f
   14bf8:	1836      	adds	r6, r6, r0
   14bfa:	1c73      	adds	r3, r6, #1
   14bfc:	4641      	mov	r1, r8
   14bfe:	469b      	mov	fp, r3
   14c00:	464b      	mov	r3, r9
   14c02:	4061      	eors	r1, r4
   14c04:	4313      	orrs	r3, r2
   14c06:	2b0f      	cmp	r3, #15
   14c08:	d864      	bhi.n	14cd4 <__aeabi_fmul+0x12c>
   14c0a:	4875      	ldr	r0, [pc, #468]	; (14de0 <__aeabi_fmul+0x238>)
   14c0c:	009b      	lsls	r3, r3, #2
   14c0e:	58c3      	ldr	r3, [r0, r3]
   14c10:	469f      	mov	pc, r3
   14c12:	2f00      	cmp	r7, #0
   14c14:	d142      	bne.n	14c9c <__aeabi_fmul+0xf4>
   14c16:	2308      	movs	r3, #8
   14c18:	4699      	mov	r9, r3
   14c1a:	3b06      	subs	r3, #6
   14c1c:	26ff      	movs	r6, #255	; 0xff
   14c1e:	469a      	mov	sl, r3
   14c20:	e7da      	b.n	14bd8 <__aeabi_fmul+0x30>
   14c22:	4641      	mov	r1, r8
   14c24:	2a02      	cmp	r2, #2
   14c26:	d028      	beq.n	14c7a <__aeabi_fmul+0xd2>
   14c28:	2a03      	cmp	r2, #3
   14c2a:	d100      	bne.n	14c2e <__aeabi_fmul+0x86>
   14c2c:	e0ce      	b.n	14dcc <__aeabi_fmul+0x224>
   14c2e:	2a01      	cmp	r2, #1
   14c30:	d000      	beq.n	14c34 <__aeabi_fmul+0x8c>
   14c32:	e0ac      	b.n	14d8e <__aeabi_fmul+0x1e6>
   14c34:	4011      	ands	r1, r2
   14c36:	2000      	movs	r0, #0
   14c38:	2200      	movs	r2, #0
   14c3a:	b2cc      	uxtb	r4, r1
   14c3c:	0240      	lsls	r0, r0, #9
   14c3e:	05d2      	lsls	r2, r2, #23
   14c40:	0a40      	lsrs	r0, r0, #9
   14c42:	07e4      	lsls	r4, r4, #31
   14c44:	4310      	orrs	r0, r2
   14c46:	4320      	orrs	r0, r4
   14c48:	bc3c      	pop	{r2, r3, r4, r5}
   14c4a:	4690      	mov	r8, r2
   14c4c:	4699      	mov	r9, r3
   14c4e:	46a2      	mov	sl, r4
   14c50:	46ab      	mov	fp, r5
   14c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c54:	2f00      	cmp	r7, #0
   14c56:	d115      	bne.n	14c84 <__aeabi_fmul+0xdc>
   14c58:	2304      	movs	r3, #4
   14c5a:	4699      	mov	r9, r3
   14c5c:	3b03      	subs	r3, #3
   14c5e:	2600      	movs	r6, #0
   14c60:	469a      	mov	sl, r3
   14c62:	e7b9      	b.n	14bd8 <__aeabi_fmul+0x30>
   14c64:	20ff      	movs	r0, #255	; 0xff
   14c66:	2202      	movs	r2, #2
   14c68:	2d00      	cmp	r5, #0
   14c6a:	d0c5      	beq.n	14bf8 <__aeabi_fmul+0x50>
   14c6c:	2203      	movs	r2, #3
   14c6e:	e7c3      	b.n	14bf8 <__aeabi_fmul+0x50>
   14c70:	2d00      	cmp	r5, #0
   14c72:	d119      	bne.n	14ca8 <__aeabi_fmul+0x100>
   14c74:	2000      	movs	r0, #0
   14c76:	2201      	movs	r2, #1
   14c78:	e7be      	b.n	14bf8 <__aeabi_fmul+0x50>
   14c7a:	2401      	movs	r4, #1
   14c7c:	22ff      	movs	r2, #255	; 0xff
   14c7e:	400c      	ands	r4, r1
   14c80:	2000      	movs	r0, #0
   14c82:	e7db      	b.n	14c3c <__aeabi_fmul+0x94>
   14c84:	0038      	movs	r0, r7
   14c86:	f002 f965 	bl	16f54 <__clzsi2>
   14c8a:	2676      	movs	r6, #118	; 0x76
   14c8c:	1f43      	subs	r3, r0, #5
   14c8e:	409f      	lsls	r7, r3
   14c90:	2300      	movs	r3, #0
   14c92:	4276      	negs	r6, r6
   14c94:	1a36      	subs	r6, r6, r0
   14c96:	4699      	mov	r9, r3
   14c98:	469a      	mov	sl, r3
   14c9a:	e79d      	b.n	14bd8 <__aeabi_fmul+0x30>
   14c9c:	230c      	movs	r3, #12
   14c9e:	4699      	mov	r9, r3
   14ca0:	3b09      	subs	r3, #9
   14ca2:	26ff      	movs	r6, #255	; 0xff
   14ca4:	469a      	mov	sl, r3
   14ca6:	e797      	b.n	14bd8 <__aeabi_fmul+0x30>
   14ca8:	0028      	movs	r0, r5
   14caa:	f002 f953 	bl	16f54 <__clzsi2>
   14cae:	1f43      	subs	r3, r0, #5
   14cb0:	409d      	lsls	r5, r3
   14cb2:	2376      	movs	r3, #118	; 0x76
   14cb4:	425b      	negs	r3, r3
   14cb6:	1a18      	subs	r0, r3, r0
   14cb8:	2200      	movs	r2, #0
   14cba:	e79d      	b.n	14bf8 <__aeabi_fmul+0x50>
   14cbc:	2080      	movs	r0, #128	; 0x80
   14cbe:	2400      	movs	r4, #0
   14cc0:	03c0      	lsls	r0, r0, #15
   14cc2:	22ff      	movs	r2, #255	; 0xff
   14cc4:	e7ba      	b.n	14c3c <__aeabi_fmul+0x94>
   14cc6:	003d      	movs	r5, r7
   14cc8:	4652      	mov	r2, sl
   14cca:	e7ab      	b.n	14c24 <__aeabi_fmul+0x7c>
   14ccc:	003d      	movs	r5, r7
   14cce:	0021      	movs	r1, r4
   14cd0:	4652      	mov	r2, sl
   14cd2:	e7a7      	b.n	14c24 <__aeabi_fmul+0x7c>
   14cd4:	0c3b      	lsrs	r3, r7, #16
   14cd6:	469c      	mov	ip, r3
   14cd8:	042a      	lsls	r2, r5, #16
   14cda:	0c12      	lsrs	r2, r2, #16
   14cdc:	0c2b      	lsrs	r3, r5, #16
   14cde:	0014      	movs	r4, r2
   14ce0:	4660      	mov	r0, ip
   14ce2:	4665      	mov	r5, ip
   14ce4:	043f      	lsls	r7, r7, #16
   14ce6:	0c3f      	lsrs	r7, r7, #16
   14ce8:	437c      	muls	r4, r7
   14cea:	4342      	muls	r2, r0
   14cec:	435d      	muls	r5, r3
   14cee:	437b      	muls	r3, r7
   14cf0:	0c27      	lsrs	r7, r4, #16
   14cf2:	189b      	adds	r3, r3, r2
   14cf4:	18ff      	adds	r7, r7, r3
   14cf6:	42ba      	cmp	r2, r7
   14cf8:	d903      	bls.n	14d02 <__aeabi_fmul+0x15a>
   14cfa:	2380      	movs	r3, #128	; 0x80
   14cfc:	025b      	lsls	r3, r3, #9
   14cfe:	469c      	mov	ip, r3
   14d00:	4465      	add	r5, ip
   14d02:	0424      	lsls	r4, r4, #16
   14d04:	043a      	lsls	r2, r7, #16
   14d06:	0c24      	lsrs	r4, r4, #16
   14d08:	1912      	adds	r2, r2, r4
   14d0a:	0193      	lsls	r3, r2, #6
   14d0c:	1e5c      	subs	r4, r3, #1
   14d0e:	41a3      	sbcs	r3, r4
   14d10:	0c3f      	lsrs	r7, r7, #16
   14d12:	0e92      	lsrs	r2, r2, #26
   14d14:	197d      	adds	r5, r7, r5
   14d16:	431a      	orrs	r2, r3
   14d18:	01ad      	lsls	r5, r5, #6
   14d1a:	4315      	orrs	r5, r2
   14d1c:	012b      	lsls	r3, r5, #4
   14d1e:	d504      	bpl.n	14d2a <__aeabi_fmul+0x182>
   14d20:	2301      	movs	r3, #1
   14d22:	465e      	mov	r6, fp
   14d24:	086a      	lsrs	r2, r5, #1
   14d26:	401d      	ands	r5, r3
   14d28:	4315      	orrs	r5, r2
   14d2a:	0032      	movs	r2, r6
   14d2c:	327f      	adds	r2, #127	; 0x7f
   14d2e:	2a00      	cmp	r2, #0
   14d30:	dd25      	ble.n	14d7e <__aeabi_fmul+0x1d6>
   14d32:	076b      	lsls	r3, r5, #29
   14d34:	d004      	beq.n	14d40 <__aeabi_fmul+0x198>
   14d36:	230f      	movs	r3, #15
   14d38:	402b      	ands	r3, r5
   14d3a:	2b04      	cmp	r3, #4
   14d3c:	d000      	beq.n	14d40 <__aeabi_fmul+0x198>
   14d3e:	3504      	adds	r5, #4
   14d40:	012b      	lsls	r3, r5, #4
   14d42:	d503      	bpl.n	14d4c <__aeabi_fmul+0x1a4>
   14d44:	0032      	movs	r2, r6
   14d46:	4b27      	ldr	r3, [pc, #156]	; (14de4 <__aeabi_fmul+0x23c>)
   14d48:	3280      	adds	r2, #128	; 0x80
   14d4a:	401d      	ands	r5, r3
   14d4c:	2afe      	cmp	r2, #254	; 0xfe
   14d4e:	dc94      	bgt.n	14c7a <__aeabi_fmul+0xd2>
   14d50:	2401      	movs	r4, #1
   14d52:	01a8      	lsls	r0, r5, #6
   14d54:	0a40      	lsrs	r0, r0, #9
   14d56:	b2d2      	uxtb	r2, r2
   14d58:	400c      	ands	r4, r1
   14d5a:	e76f      	b.n	14c3c <__aeabi_fmul+0x94>
   14d5c:	2080      	movs	r0, #128	; 0x80
   14d5e:	03c0      	lsls	r0, r0, #15
   14d60:	4207      	tst	r7, r0
   14d62:	d007      	beq.n	14d74 <__aeabi_fmul+0x1cc>
   14d64:	4205      	tst	r5, r0
   14d66:	d105      	bne.n	14d74 <__aeabi_fmul+0x1cc>
   14d68:	4328      	orrs	r0, r5
   14d6a:	0240      	lsls	r0, r0, #9
   14d6c:	0a40      	lsrs	r0, r0, #9
   14d6e:	4644      	mov	r4, r8
   14d70:	22ff      	movs	r2, #255	; 0xff
   14d72:	e763      	b.n	14c3c <__aeabi_fmul+0x94>
   14d74:	4338      	orrs	r0, r7
   14d76:	0240      	lsls	r0, r0, #9
   14d78:	0a40      	lsrs	r0, r0, #9
   14d7a:	22ff      	movs	r2, #255	; 0xff
   14d7c:	e75e      	b.n	14c3c <__aeabi_fmul+0x94>
   14d7e:	2401      	movs	r4, #1
   14d80:	1aa3      	subs	r3, r4, r2
   14d82:	2b1b      	cmp	r3, #27
   14d84:	dd05      	ble.n	14d92 <__aeabi_fmul+0x1ea>
   14d86:	400c      	ands	r4, r1
   14d88:	2200      	movs	r2, #0
   14d8a:	2000      	movs	r0, #0
   14d8c:	e756      	b.n	14c3c <__aeabi_fmul+0x94>
   14d8e:	465e      	mov	r6, fp
   14d90:	e7cb      	b.n	14d2a <__aeabi_fmul+0x182>
   14d92:	002a      	movs	r2, r5
   14d94:	2020      	movs	r0, #32
   14d96:	40da      	lsrs	r2, r3
   14d98:	1ac3      	subs	r3, r0, r3
   14d9a:	409d      	lsls	r5, r3
   14d9c:	002b      	movs	r3, r5
   14d9e:	1e5d      	subs	r5, r3, #1
   14da0:	41ab      	sbcs	r3, r5
   14da2:	4313      	orrs	r3, r2
   14da4:	075a      	lsls	r2, r3, #29
   14da6:	d004      	beq.n	14db2 <__aeabi_fmul+0x20a>
   14da8:	220f      	movs	r2, #15
   14daa:	401a      	ands	r2, r3
   14dac:	2a04      	cmp	r2, #4
   14dae:	d000      	beq.n	14db2 <__aeabi_fmul+0x20a>
   14db0:	3304      	adds	r3, #4
   14db2:	015a      	lsls	r2, r3, #5
   14db4:	d504      	bpl.n	14dc0 <__aeabi_fmul+0x218>
   14db6:	2401      	movs	r4, #1
   14db8:	2201      	movs	r2, #1
   14dba:	400c      	ands	r4, r1
   14dbc:	2000      	movs	r0, #0
   14dbe:	e73d      	b.n	14c3c <__aeabi_fmul+0x94>
   14dc0:	2401      	movs	r4, #1
   14dc2:	019b      	lsls	r3, r3, #6
   14dc4:	0a58      	lsrs	r0, r3, #9
   14dc6:	400c      	ands	r4, r1
   14dc8:	2200      	movs	r2, #0
   14dca:	e737      	b.n	14c3c <__aeabi_fmul+0x94>
   14dcc:	2080      	movs	r0, #128	; 0x80
   14dce:	2401      	movs	r4, #1
   14dd0:	03c0      	lsls	r0, r0, #15
   14dd2:	4328      	orrs	r0, r5
   14dd4:	0240      	lsls	r0, r0, #9
   14dd6:	0a40      	lsrs	r0, r0, #9
   14dd8:	400c      	ands	r4, r1
   14dda:	22ff      	movs	r2, #255	; 0xff
   14ddc:	e72e      	b.n	14c3c <__aeabi_fmul+0x94>
   14dde:	46c0      	nop			; (mov r8, r8)
   14de0:	00017860 	.word	0x00017860
   14de4:	f7ffffff 	.word	0xf7ffffff

00014de8 <__aeabi_fsub>:
   14de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dea:	464f      	mov	r7, r9
   14dec:	46d6      	mov	lr, sl
   14dee:	4646      	mov	r6, r8
   14df0:	0044      	lsls	r4, r0, #1
   14df2:	b5c0      	push	{r6, r7, lr}
   14df4:	0fc2      	lsrs	r2, r0, #31
   14df6:	0247      	lsls	r7, r0, #9
   14df8:	0248      	lsls	r0, r1, #9
   14dfa:	0a40      	lsrs	r0, r0, #9
   14dfc:	4684      	mov	ip, r0
   14dfe:	4666      	mov	r6, ip
   14e00:	0a7b      	lsrs	r3, r7, #9
   14e02:	0048      	lsls	r0, r1, #1
   14e04:	0fc9      	lsrs	r1, r1, #31
   14e06:	469a      	mov	sl, r3
   14e08:	0e24      	lsrs	r4, r4, #24
   14e0a:	0015      	movs	r5, r2
   14e0c:	00db      	lsls	r3, r3, #3
   14e0e:	0e00      	lsrs	r0, r0, #24
   14e10:	4689      	mov	r9, r1
   14e12:	00f6      	lsls	r6, r6, #3
   14e14:	28ff      	cmp	r0, #255	; 0xff
   14e16:	d100      	bne.n	14e1a <__aeabi_fsub+0x32>
   14e18:	e08f      	b.n	14f3a <__aeabi_fsub+0x152>
   14e1a:	2101      	movs	r1, #1
   14e1c:	464f      	mov	r7, r9
   14e1e:	404f      	eors	r7, r1
   14e20:	0039      	movs	r1, r7
   14e22:	4291      	cmp	r1, r2
   14e24:	d066      	beq.n	14ef4 <__aeabi_fsub+0x10c>
   14e26:	1a22      	subs	r2, r4, r0
   14e28:	2a00      	cmp	r2, #0
   14e2a:	dc00      	bgt.n	14e2e <__aeabi_fsub+0x46>
   14e2c:	e09d      	b.n	14f6a <__aeabi_fsub+0x182>
   14e2e:	2800      	cmp	r0, #0
   14e30:	d13d      	bne.n	14eae <__aeabi_fsub+0xc6>
   14e32:	2e00      	cmp	r6, #0
   14e34:	d100      	bne.n	14e38 <__aeabi_fsub+0x50>
   14e36:	e08b      	b.n	14f50 <__aeabi_fsub+0x168>
   14e38:	1e51      	subs	r1, r2, #1
   14e3a:	2900      	cmp	r1, #0
   14e3c:	d000      	beq.n	14e40 <__aeabi_fsub+0x58>
   14e3e:	e0b5      	b.n	14fac <__aeabi_fsub+0x1c4>
   14e40:	2401      	movs	r4, #1
   14e42:	1b9b      	subs	r3, r3, r6
   14e44:	015a      	lsls	r2, r3, #5
   14e46:	d544      	bpl.n	14ed2 <__aeabi_fsub+0xea>
   14e48:	019b      	lsls	r3, r3, #6
   14e4a:	099f      	lsrs	r7, r3, #6
   14e4c:	0038      	movs	r0, r7
   14e4e:	f002 f881 	bl	16f54 <__clzsi2>
   14e52:	3805      	subs	r0, #5
   14e54:	4087      	lsls	r7, r0
   14e56:	4284      	cmp	r4, r0
   14e58:	dd00      	ble.n	14e5c <__aeabi_fsub+0x74>
   14e5a:	e096      	b.n	14f8a <__aeabi_fsub+0x1a2>
   14e5c:	1b04      	subs	r4, r0, r4
   14e5e:	003a      	movs	r2, r7
   14e60:	2020      	movs	r0, #32
   14e62:	3401      	adds	r4, #1
   14e64:	40e2      	lsrs	r2, r4
   14e66:	1b04      	subs	r4, r0, r4
   14e68:	40a7      	lsls	r7, r4
   14e6a:	003b      	movs	r3, r7
   14e6c:	1e5f      	subs	r7, r3, #1
   14e6e:	41bb      	sbcs	r3, r7
   14e70:	2400      	movs	r4, #0
   14e72:	4313      	orrs	r3, r2
   14e74:	075a      	lsls	r2, r3, #29
   14e76:	d004      	beq.n	14e82 <__aeabi_fsub+0x9a>
   14e78:	220f      	movs	r2, #15
   14e7a:	401a      	ands	r2, r3
   14e7c:	2a04      	cmp	r2, #4
   14e7e:	d000      	beq.n	14e82 <__aeabi_fsub+0x9a>
   14e80:	3304      	adds	r3, #4
   14e82:	015a      	lsls	r2, r3, #5
   14e84:	d527      	bpl.n	14ed6 <__aeabi_fsub+0xee>
   14e86:	3401      	adds	r4, #1
   14e88:	2cff      	cmp	r4, #255	; 0xff
   14e8a:	d100      	bne.n	14e8e <__aeabi_fsub+0xa6>
   14e8c:	e079      	b.n	14f82 <__aeabi_fsub+0x19a>
   14e8e:	2201      	movs	r2, #1
   14e90:	019b      	lsls	r3, r3, #6
   14e92:	0a5b      	lsrs	r3, r3, #9
   14e94:	b2e4      	uxtb	r4, r4
   14e96:	402a      	ands	r2, r5
   14e98:	025b      	lsls	r3, r3, #9
   14e9a:	05e4      	lsls	r4, r4, #23
   14e9c:	0a58      	lsrs	r0, r3, #9
   14e9e:	07d2      	lsls	r2, r2, #31
   14ea0:	4320      	orrs	r0, r4
   14ea2:	4310      	orrs	r0, r2
   14ea4:	bc1c      	pop	{r2, r3, r4}
   14ea6:	4690      	mov	r8, r2
   14ea8:	4699      	mov	r9, r3
   14eaa:	46a2      	mov	sl, r4
   14eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14eae:	2cff      	cmp	r4, #255	; 0xff
   14eb0:	d0e0      	beq.n	14e74 <__aeabi_fsub+0x8c>
   14eb2:	2180      	movs	r1, #128	; 0x80
   14eb4:	04c9      	lsls	r1, r1, #19
   14eb6:	430e      	orrs	r6, r1
   14eb8:	2a1b      	cmp	r2, #27
   14eba:	dc7b      	bgt.n	14fb4 <__aeabi_fsub+0x1cc>
   14ebc:	0031      	movs	r1, r6
   14ebe:	2020      	movs	r0, #32
   14ec0:	40d1      	lsrs	r1, r2
   14ec2:	1a82      	subs	r2, r0, r2
   14ec4:	4096      	lsls	r6, r2
   14ec6:	1e72      	subs	r2, r6, #1
   14ec8:	4196      	sbcs	r6, r2
   14eca:	430e      	orrs	r6, r1
   14ecc:	1b9b      	subs	r3, r3, r6
   14ece:	015a      	lsls	r2, r3, #5
   14ed0:	d4ba      	bmi.n	14e48 <__aeabi_fsub+0x60>
   14ed2:	075a      	lsls	r2, r3, #29
   14ed4:	d1d0      	bne.n	14e78 <__aeabi_fsub+0x90>
   14ed6:	2201      	movs	r2, #1
   14ed8:	08df      	lsrs	r7, r3, #3
   14eda:	402a      	ands	r2, r5
   14edc:	2cff      	cmp	r4, #255	; 0xff
   14ede:	d133      	bne.n	14f48 <__aeabi_fsub+0x160>
   14ee0:	2f00      	cmp	r7, #0
   14ee2:	d100      	bne.n	14ee6 <__aeabi_fsub+0xfe>
   14ee4:	e0a8      	b.n	15038 <__aeabi_fsub+0x250>
   14ee6:	2380      	movs	r3, #128	; 0x80
   14ee8:	03db      	lsls	r3, r3, #15
   14eea:	433b      	orrs	r3, r7
   14eec:	025b      	lsls	r3, r3, #9
   14eee:	0a5b      	lsrs	r3, r3, #9
   14ef0:	24ff      	movs	r4, #255	; 0xff
   14ef2:	e7d1      	b.n	14e98 <__aeabi_fsub+0xb0>
   14ef4:	1a21      	subs	r1, r4, r0
   14ef6:	2900      	cmp	r1, #0
   14ef8:	dd4c      	ble.n	14f94 <__aeabi_fsub+0x1ac>
   14efa:	2800      	cmp	r0, #0
   14efc:	d02a      	beq.n	14f54 <__aeabi_fsub+0x16c>
   14efe:	2cff      	cmp	r4, #255	; 0xff
   14f00:	d0b8      	beq.n	14e74 <__aeabi_fsub+0x8c>
   14f02:	2080      	movs	r0, #128	; 0x80
   14f04:	04c0      	lsls	r0, r0, #19
   14f06:	4306      	orrs	r6, r0
   14f08:	291b      	cmp	r1, #27
   14f0a:	dd00      	ble.n	14f0e <__aeabi_fsub+0x126>
   14f0c:	e0af      	b.n	1506e <__aeabi_fsub+0x286>
   14f0e:	0030      	movs	r0, r6
   14f10:	2720      	movs	r7, #32
   14f12:	40c8      	lsrs	r0, r1
   14f14:	1a79      	subs	r1, r7, r1
   14f16:	408e      	lsls	r6, r1
   14f18:	1e71      	subs	r1, r6, #1
   14f1a:	418e      	sbcs	r6, r1
   14f1c:	4306      	orrs	r6, r0
   14f1e:	199b      	adds	r3, r3, r6
   14f20:	0159      	lsls	r1, r3, #5
   14f22:	d5d6      	bpl.n	14ed2 <__aeabi_fsub+0xea>
   14f24:	3401      	adds	r4, #1
   14f26:	2cff      	cmp	r4, #255	; 0xff
   14f28:	d100      	bne.n	14f2c <__aeabi_fsub+0x144>
   14f2a:	e085      	b.n	15038 <__aeabi_fsub+0x250>
   14f2c:	2201      	movs	r2, #1
   14f2e:	497a      	ldr	r1, [pc, #488]	; (15118 <__aeabi_fsub+0x330>)
   14f30:	401a      	ands	r2, r3
   14f32:	085b      	lsrs	r3, r3, #1
   14f34:	400b      	ands	r3, r1
   14f36:	4313      	orrs	r3, r2
   14f38:	e79c      	b.n	14e74 <__aeabi_fsub+0x8c>
   14f3a:	2e00      	cmp	r6, #0
   14f3c:	d000      	beq.n	14f40 <__aeabi_fsub+0x158>
   14f3e:	e770      	b.n	14e22 <__aeabi_fsub+0x3a>
   14f40:	e76b      	b.n	14e1a <__aeabi_fsub+0x32>
   14f42:	1e3b      	subs	r3, r7, #0
   14f44:	d1c5      	bne.n	14ed2 <__aeabi_fsub+0xea>
   14f46:	2200      	movs	r2, #0
   14f48:	027b      	lsls	r3, r7, #9
   14f4a:	0a5b      	lsrs	r3, r3, #9
   14f4c:	b2e4      	uxtb	r4, r4
   14f4e:	e7a3      	b.n	14e98 <__aeabi_fsub+0xb0>
   14f50:	0014      	movs	r4, r2
   14f52:	e78f      	b.n	14e74 <__aeabi_fsub+0x8c>
   14f54:	2e00      	cmp	r6, #0
   14f56:	d04d      	beq.n	14ff4 <__aeabi_fsub+0x20c>
   14f58:	1e48      	subs	r0, r1, #1
   14f5a:	2800      	cmp	r0, #0
   14f5c:	d157      	bne.n	1500e <__aeabi_fsub+0x226>
   14f5e:	199b      	adds	r3, r3, r6
   14f60:	2401      	movs	r4, #1
   14f62:	015a      	lsls	r2, r3, #5
   14f64:	d5b5      	bpl.n	14ed2 <__aeabi_fsub+0xea>
   14f66:	2402      	movs	r4, #2
   14f68:	e7e0      	b.n	14f2c <__aeabi_fsub+0x144>
   14f6a:	2a00      	cmp	r2, #0
   14f6c:	d125      	bne.n	14fba <__aeabi_fsub+0x1d2>
   14f6e:	1c62      	adds	r2, r4, #1
   14f70:	b2d2      	uxtb	r2, r2
   14f72:	2a01      	cmp	r2, #1
   14f74:	dd72      	ble.n	1505c <__aeabi_fsub+0x274>
   14f76:	1b9f      	subs	r7, r3, r6
   14f78:	017a      	lsls	r2, r7, #5
   14f7a:	d535      	bpl.n	14fe8 <__aeabi_fsub+0x200>
   14f7c:	1af7      	subs	r7, r6, r3
   14f7e:	000d      	movs	r5, r1
   14f80:	e764      	b.n	14e4c <__aeabi_fsub+0x64>
   14f82:	2201      	movs	r2, #1
   14f84:	2300      	movs	r3, #0
   14f86:	402a      	ands	r2, r5
   14f88:	e786      	b.n	14e98 <__aeabi_fsub+0xb0>
   14f8a:	003b      	movs	r3, r7
   14f8c:	4a63      	ldr	r2, [pc, #396]	; (1511c <__aeabi_fsub+0x334>)
   14f8e:	1a24      	subs	r4, r4, r0
   14f90:	4013      	ands	r3, r2
   14f92:	e76f      	b.n	14e74 <__aeabi_fsub+0x8c>
   14f94:	2900      	cmp	r1, #0
   14f96:	d16c      	bne.n	15072 <__aeabi_fsub+0x28a>
   14f98:	1c61      	adds	r1, r4, #1
   14f9a:	b2c8      	uxtb	r0, r1
   14f9c:	2801      	cmp	r0, #1
   14f9e:	dd4e      	ble.n	1503e <__aeabi_fsub+0x256>
   14fa0:	29ff      	cmp	r1, #255	; 0xff
   14fa2:	d049      	beq.n	15038 <__aeabi_fsub+0x250>
   14fa4:	199b      	adds	r3, r3, r6
   14fa6:	085b      	lsrs	r3, r3, #1
   14fa8:	000c      	movs	r4, r1
   14faa:	e763      	b.n	14e74 <__aeabi_fsub+0x8c>
   14fac:	2aff      	cmp	r2, #255	; 0xff
   14fae:	d041      	beq.n	15034 <__aeabi_fsub+0x24c>
   14fb0:	000a      	movs	r2, r1
   14fb2:	e781      	b.n	14eb8 <__aeabi_fsub+0xd0>
   14fb4:	2601      	movs	r6, #1
   14fb6:	1b9b      	subs	r3, r3, r6
   14fb8:	e789      	b.n	14ece <__aeabi_fsub+0xe6>
   14fba:	2c00      	cmp	r4, #0
   14fbc:	d01c      	beq.n	14ff8 <__aeabi_fsub+0x210>
   14fbe:	28ff      	cmp	r0, #255	; 0xff
   14fc0:	d021      	beq.n	15006 <__aeabi_fsub+0x21e>
   14fc2:	2480      	movs	r4, #128	; 0x80
   14fc4:	04e4      	lsls	r4, r4, #19
   14fc6:	4252      	negs	r2, r2
   14fc8:	4323      	orrs	r3, r4
   14fca:	2a1b      	cmp	r2, #27
   14fcc:	dd00      	ble.n	14fd0 <__aeabi_fsub+0x1e8>
   14fce:	e096      	b.n	150fe <__aeabi_fsub+0x316>
   14fd0:	001c      	movs	r4, r3
   14fd2:	2520      	movs	r5, #32
   14fd4:	40d4      	lsrs	r4, r2
   14fd6:	1aaa      	subs	r2, r5, r2
   14fd8:	4093      	lsls	r3, r2
   14fda:	1e5a      	subs	r2, r3, #1
   14fdc:	4193      	sbcs	r3, r2
   14fde:	4323      	orrs	r3, r4
   14fe0:	1af3      	subs	r3, r6, r3
   14fe2:	0004      	movs	r4, r0
   14fe4:	000d      	movs	r5, r1
   14fe6:	e72d      	b.n	14e44 <__aeabi_fsub+0x5c>
   14fe8:	2f00      	cmp	r7, #0
   14fea:	d000      	beq.n	14fee <__aeabi_fsub+0x206>
   14fec:	e72e      	b.n	14e4c <__aeabi_fsub+0x64>
   14fee:	2200      	movs	r2, #0
   14ff0:	2400      	movs	r4, #0
   14ff2:	e7a9      	b.n	14f48 <__aeabi_fsub+0x160>
   14ff4:	000c      	movs	r4, r1
   14ff6:	e73d      	b.n	14e74 <__aeabi_fsub+0x8c>
   14ff8:	2b00      	cmp	r3, #0
   14ffa:	d058      	beq.n	150ae <__aeabi_fsub+0x2c6>
   14ffc:	43d2      	mvns	r2, r2
   14ffe:	2a00      	cmp	r2, #0
   15000:	d0ee      	beq.n	14fe0 <__aeabi_fsub+0x1f8>
   15002:	28ff      	cmp	r0, #255	; 0xff
   15004:	d1e1      	bne.n	14fca <__aeabi_fsub+0x1e2>
   15006:	0033      	movs	r3, r6
   15008:	24ff      	movs	r4, #255	; 0xff
   1500a:	000d      	movs	r5, r1
   1500c:	e732      	b.n	14e74 <__aeabi_fsub+0x8c>
   1500e:	29ff      	cmp	r1, #255	; 0xff
   15010:	d010      	beq.n	15034 <__aeabi_fsub+0x24c>
   15012:	0001      	movs	r1, r0
   15014:	e778      	b.n	14f08 <__aeabi_fsub+0x120>
   15016:	2b00      	cmp	r3, #0
   15018:	d06e      	beq.n	150f8 <__aeabi_fsub+0x310>
   1501a:	24ff      	movs	r4, #255	; 0xff
   1501c:	2e00      	cmp	r6, #0
   1501e:	d100      	bne.n	15022 <__aeabi_fsub+0x23a>
   15020:	e728      	b.n	14e74 <__aeabi_fsub+0x8c>
   15022:	2280      	movs	r2, #128	; 0x80
   15024:	4651      	mov	r1, sl
   15026:	03d2      	lsls	r2, r2, #15
   15028:	4211      	tst	r1, r2
   1502a:	d003      	beq.n	15034 <__aeabi_fsub+0x24c>
   1502c:	4661      	mov	r1, ip
   1502e:	4211      	tst	r1, r2
   15030:	d100      	bne.n	15034 <__aeabi_fsub+0x24c>
   15032:	0033      	movs	r3, r6
   15034:	24ff      	movs	r4, #255	; 0xff
   15036:	e71d      	b.n	14e74 <__aeabi_fsub+0x8c>
   15038:	24ff      	movs	r4, #255	; 0xff
   1503a:	2300      	movs	r3, #0
   1503c:	e72c      	b.n	14e98 <__aeabi_fsub+0xb0>
   1503e:	2c00      	cmp	r4, #0
   15040:	d1e9      	bne.n	15016 <__aeabi_fsub+0x22e>
   15042:	2b00      	cmp	r3, #0
   15044:	d063      	beq.n	1510e <__aeabi_fsub+0x326>
   15046:	2e00      	cmp	r6, #0
   15048:	d100      	bne.n	1504c <__aeabi_fsub+0x264>
   1504a:	e713      	b.n	14e74 <__aeabi_fsub+0x8c>
   1504c:	199b      	adds	r3, r3, r6
   1504e:	015a      	lsls	r2, r3, #5
   15050:	d400      	bmi.n	15054 <__aeabi_fsub+0x26c>
   15052:	e73e      	b.n	14ed2 <__aeabi_fsub+0xea>
   15054:	4a31      	ldr	r2, [pc, #196]	; (1511c <__aeabi_fsub+0x334>)
   15056:	000c      	movs	r4, r1
   15058:	4013      	ands	r3, r2
   1505a:	e70b      	b.n	14e74 <__aeabi_fsub+0x8c>
   1505c:	2c00      	cmp	r4, #0
   1505e:	d11e      	bne.n	1509e <__aeabi_fsub+0x2b6>
   15060:	2b00      	cmp	r3, #0
   15062:	d12f      	bne.n	150c4 <__aeabi_fsub+0x2dc>
   15064:	2e00      	cmp	r6, #0
   15066:	d04f      	beq.n	15108 <__aeabi_fsub+0x320>
   15068:	0033      	movs	r3, r6
   1506a:	000d      	movs	r5, r1
   1506c:	e702      	b.n	14e74 <__aeabi_fsub+0x8c>
   1506e:	2601      	movs	r6, #1
   15070:	e755      	b.n	14f1e <__aeabi_fsub+0x136>
   15072:	2c00      	cmp	r4, #0
   15074:	d11f      	bne.n	150b6 <__aeabi_fsub+0x2ce>
   15076:	2b00      	cmp	r3, #0
   15078:	d043      	beq.n	15102 <__aeabi_fsub+0x31a>
   1507a:	43c9      	mvns	r1, r1
   1507c:	2900      	cmp	r1, #0
   1507e:	d00b      	beq.n	15098 <__aeabi_fsub+0x2b0>
   15080:	28ff      	cmp	r0, #255	; 0xff
   15082:	d039      	beq.n	150f8 <__aeabi_fsub+0x310>
   15084:	291b      	cmp	r1, #27
   15086:	dc44      	bgt.n	15112 <__aeabi_fsub+0x32a>
   15088:	001c      	movs	r4, r3
   1508a:	2720      	movs	r7, #32
   1508c:	40cc      	lsrs	r4, r1
   1508e:	1a79      	subs	r1, r7, r1
   15090:	408b      	lsls	r3, r1
   15092:	1e59      	subs	r1, r3, #1
   15094:	418b      	sbcs	r3, r1
   15096:	4323      	orrs	r3, r4
   15098:	199b      	adds	r3, r3, r6
   1509a:	0004      	movs	r4, r0
   1509c:	e740      	b.n	14f20 <__aeabi_fsub+0x138>
   1509e:	2b00      	cmp	r3, #0
   150a0:	d11a      	bne.n	150d8 <__aeabi_fsub+0x2f0>
   150a2:	2e00      	cmp	r6, #0
   150a4:	d124      	bne.n	150f0 <__aeabi_fsub+0x308>
   150a6:	2780      	movs	r7, #128	; 0x80
   150a8:	2200      	movs	r2, #0
   150aa:	03ff      	lsls	r7, r7, #15
   150ac:	e71b      	b.n	14ee6 <__aeabi_fsub+0xfe>
   150ae:	0033      	movs	r3, r6
   150b0:	0004      	movs	r4, r0
   150b2:	000d      	movs	r5, r1
   150b4:	e6de      	b.n	14e74 <__aeabi_fsub+0x8c>
   150b6:	28ff      	cmp	r0, #255	; 0xff
   150b8:	d01e      	beq.n	150f8 <__aeabi_fsub+0x310>
   150ba:	2480      	movs	r4, #128	; 0x80
   150bc:	04e4      	lsls	r4, r4, #19
   150be:	4249      	negs	r1, r1
   150c0:	4323      	orrs	r3, r4
   150c2:	e7df      	b.n	15084 <__aeabi_fsub+0x29c>
   150c4:	2e00      	cmp	r6, #0
   150c6:	d100      	bne.n	150ca <__aeabi_fsub+0x2e2>
   150c8:	e6d4      	b.n	14e74 <__aeabi_fsub+0x8c>
   150ca:	1b9f      	subs	r7, r3, r6
   150cc:	017a      	lsls	r2, r7, #5
   150ce:	d400      	bmi.n	150d2 <__aeabi_fsub+0x2ea>
   150d0:	e737      	b.n	14f42 <__aeabi_fsub+0x15a>
   150d2:	1af3      	subs	r3, r6, r3
   150d4:	000d      	movs	r5, r1
   150d6:	e6cd      	b.n	14e74 <__aeabi_fsub+0x8c>
   150d8:	24ff      	movs	r4, #255	; 0xff
   150da:	2e00      	cmp	r6, #0
   150dc:	d100      	bne.n	150e0 <__aeabi_fsub+0x2f8>
   150de:	e6c9      	b.n	14e74 <__aeabi_fsub+0x8c>
   150e0:	2280      	movs	r2, #128	; 0x80
   150e2:	4650      	mov	r0, sl
   150e4:	03d2      	lsls	r2, r2, #15
   150e6:	4210      	tst	r0, r2
   150e8:	d0a4      	beq.n	15034 <__aeabi_fsub+0x24c>
   150ea:	4660      	mov	r0, ip
   150ec:	4210      	tst	r0, r2
   150ee:	d1a1      	bne.n	15034 <__aeabi_fsub+0x24c>
   150f0:	0033      	movs	r3, r6
   150f2:	000d      	movs	r5, r1
   150f4:	24ff      	movs	r4, #255	; 0xff
   150f6:	e6bd      	b.n	14e74 <__aeabi_fsub+0x8c>
   150f8:	0033      	movs	r3, r6
   150fa:	24ff      	movs	r4, #255	; 0xff
   150fc:	e6ba      	b.n	14e74 <__aeabi_fsub+0x8c>
   150fe:	2301      	movs	r3, #1
   15100:	e76e      	b.n	14fe0 <__aeabi_fsub+0x1f8>
   15102:	0033      	movs	r3, r6
   15104:	0004      	movs	r4, r0
   15106:	e6b5      	b.n	14e74 <__aeabi_fsub+0x8c>
   15108:	2700      	movs	r7, #0
   1510a:	2200      	movs	r2, #0
   1510c:	e71c      	b.n	14f48 <__aeabi_fsub+0x160>
   1510e:	0033      	movs	r3, r6
   15110:	e6b0      	b.n	14e74 <__aeabi_fsub+0x8c>
   15112:	2301      	movs	r3, #1
   15114:	e7c0      	b.n	15098 <__aeabi_fsub+0x2b0>
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	7dffffff 	.word	0x7dffffff
   1511c:	fbffffff 	.word	0xfbffffff

00015120 <__aeabi_f2iz>:
   15120:	0241      	lsls	r1, r0, #9
   15122:	0043      	lsls	r3, r0, #1
   15124:	0fc2      	lsrs	r2, r0, #31
   15126:	0a49      	lsrs	r1, r1, #9
   15128:	0e1b      	lsrs	r3, r3, #24
   1512a:	2000      	movs	r0, #0
   1512c:	2b7e      	cmp	r3, #126	; 0x7e
   1512e:	dd0d      	ble.n	1514c <__aeabi_f2iz+0x2c>
   15130:	2b9d      	cmp	r3, #157	; 0x9d
   15132:	dc0c      	bgt.n	1514e <__aeabi_f2iz+0x2e>
   15134:	2080      	movs	r0, #128	; 0x80
   15136:	0400      	lsls	r0, r0, #16
   15138:	4301      	orrs	r1, r0
   1513a:	2b95      	cmp	r3, #149	; 0x95
   1513c:	dc0a      	bgt.n	15154 <__aeabi_f2iz+0x34>
   1513e:	2096      	movs	r0, #150	; 0x96
   15140:	1ac3      	subs	r3, r0, r3
   15142:	40d9      	lsrs	r1, r3
   15144:	4248      	negs	r0, r1
   15146:	2a00      	cmp	r2, #0
   15148:	d100      	bne.n	1514c <__aeabi_f2iz+0x2c>
   1514a:	0008      	movs	r0, r1
   1514c:	4770      	bx	lr
   1514e:	4b03      	ldr	r3, [pc, #12]	; (1515c <__aeabi_f2iz+0x3c>)
   15150:	18d0      	adds	r0, r2, r3
   15152:	e7fb      	b.n	1514c <__aeabi_f2iz+0x2c>
   15154:	3b96      	subs	r3, #150	; 0x96
   15156:	4099      	lsls	r1, r3
   15158:	e7f4      	b.n	15144 <__aeabi_f2iz+0x24>
   1515a:	46c0      	nop			; (mov r8, r8)
   1515c:	7fffffff 	.word	0x7fffffff

00015160 <__aeabi_i2f>:
   15160:	b570      	push	{r4, r5, r6, lr}
   15162:	2800      	cmp	r0, #0
   15164:	d030      	beq.n	151c8 <__aeabi_i2f+0x68>
   15166:	17c3      	asrs	r3, r0, #31
   15168:	18c4      	adds	r4, r0, r3
   1516a:	405c      	eors	r4, r3
   1516c:	0fc5      	lsrs	r5, r0, #31
   1516e:	0020      	movs	r0, r4
   15170:	f001 fef0 	bl	16f54 <__clzsi2>
   15174:	239e      	movs	r3, #158	; 0x9e
   15176:	1a1b      	subs	r3, r3, r0
   15178:	2b96      	cmp	r3, #150	; 0x96
   1517a:	dc0d      	bgt.n	15198 <__aeabi_i2f+0x38>
   1517c:	2296      	movs	r2, #150	; 0x96
   1517e:	1ad2      	subs	r2, r2, r3
   15180:	4094      	lsls	r4, r2
   15182:	002a      	movs	r2, r5
   15184:	0264      	lsls	r4, r4, #9
   15186:	0a64      	lsrs	r4, r4, #9
   15188:	b2db      	uxtb	r3, r3
   1518a:	0264      	lsls	r4, r4, #9
   1518c:	05db      	lsls	r3, r3, #23
   1518e:	0a60      	lsrs	r0, r4, #9
   15190:	07d2      	lsls	r2, r2, #31
   15192:	4318      	orrs	r0, r3
   15194:	4310      	orrs	r0, r2
   15196:	bd70      	pop	{r4, r5, r6, pc}
   15198:	2b99      	cmp	r3, #153	; 0x99
   1519a:	dc19      	bgt.n	151d0 <__aeabi_i2f+0x70>
   1519c:	2299      	movs	r2, #153	; 0x99
   1519e:	1ad2      	subs	r2, r2, r3
   151a0:	2a00      	cmp	r2, #0
   151a2:	dd29      	ble.n	151f8 <__aeabi_i2f+0x98>
   151a4:	4094      	lsls	r4, r2
   151a6:	0022      	movs	r2, r4
   151a8:	4c14      	ldr	r4, [pc, #80]	; (151fc <__aeabi_i2f+0x9c>)
   151aa:	4014      	ands	r4, r2
   151ac:	0751      	lsls	r1, r2, #29
   151ae:	d004      	beq.n	151ba <__aeabi_i2f+0x5a>
   151b0:	210f      	movs	r1, #15
   151b2:	400a      	ands	r2, r1
   151b4:	2a04      	cmp	r2, #4
   151b6:	d000      	beq.n	151ba <__aeabi_i2f+0x5a>
   151b8:	3404      	adds	r4, #4
   151ba:	0162      	lsls	r2, r4, #5
   151bc:	d413      	bmi.n	151e6 <__aeabi_i2f+0x86>
   151be:	01a4      	lsls	r4, r4, #6
   151c0:	0a64      	lsrs	r4, r4, #9
   151c2:	b2db      	uxtb	r3, r3
   151c4:	002a      	movs	r2, r5
   151c6:	e7e0      	b.n	1518a <__aeabi_i2f+0x2a>
   151c8:	2200      	movs	r2, #0
   151ca:	2300      	movs	r3, #0
   151cc:	2400      	movs	r4, #0
   151ce:	e7dc      	b.n	1518a <__aeabi_i2f+0x2a>
   151d0:	2205      	movs	r2, #5
   151d2:	0021      	movs	r1, r4
   151d4:	1a12      	subs	r2, r2, r0
   151d6:	40d1      	lsrs	r1, r2
   151d8:	22b9      	movs	r2, #185	; 0xb9
   151da:	1ad2      	subs	r2, r2, r3
   151dc:	4094      	lsls	r4, r2
   151de:	1e62      	subs	r2, r4, #1
   151e0:	4194      	sbcs	r4, r2
   151e2:	430c      	orrs	r4, r1
   151e4:	e7da      	b.n	1519c <__aeabi_i2f+0x3c>
   151e6:	4b05      	ldr	r3, [pc, #20]	; (151fc <__aeabi_i2f+0x9c>)
   151e8:	002a      	movs	r2, r5
   151ea:	401c      	ands	r4, r3
   151ec:	239f      	movs	r3, #159	; 0x9f
   151ee:	01a4      	lsls	r4, r4, #6
   151f0:	1a1b      	subs	r3, r3, r0
   151f2:	0a64      	lsrs	r4, r4, #9
   151f4:	b2db      	uxtb	r3, r3
   151f6:	e7c8      	b.n	1518a <__aeabi_i2f+0x2a>
   151f8:	0022      	movs	r2, r4
   151fa:	e7d5      	b.n	151a8 <__aeabi_i2f+0x48>
   151fc:	fbffffff 	.word	0xfbffffff

00015200 <__aeabi_ui2f>:
   15200:	b510      	push	{r4, lr}
   15202:	1e04      	subs	r4, r0, #0
   15204:	d027      	beq.n	15256 <__aeabi_ui2f+0x56>
   15206:	f001 fea5 	bl	16f54 <__clzsi2>
   1520a:	239e      	movs	r3, #158	; 0x9e
   1520c:	1a1b      	subs	r3, r3, r0
   1520e:	2b96      	cmp	r3, #150	; 0x96
   15210:	dc0a      	bgt.n	15228 <__aeabi_ui2f+0x28>
   15212:	2296      	movs	r2, #150	; 0x96
   15214:	1ad2      	subs	r2, r2, r3
   15216:	4094      	lsls	r4, r2
   15218:	0264      	lsls	r4, r4, #9
   1521a:	0a64      	lsrs	r4, r4, #9
   1521c:	b2db      	uxtb	r3, r3
   1521e:	0264      	lsls	r4, r4, #9
   15220:	05db      	lsls	r3, r3, #23
   15222:	0a60      	lsrs	r0, r4, #9
   15224:	4318      	orrs	r0, r3
   15226:	bd10      	pop	{r4, pc}
   15228:	2b99      	cmp	r3, #153	; 0x99
   1522a:	dc17      	bgt.n	1525c <__aeabi_ui2f+0x5c>
   1522c:	2299      	movs	r2, #153	; 0x99
   1522e:	1ad2      	subs	r2, r2, r3
   15230:	2a00      	cmp	r2, #0
   15232:	dd27      	ble.n	15284 <__aeabi_ui2f+0x84>
   15234:	4094      	lsls	r4, r2
   15236:	0022      	movs	r2, r4
   15238:	4c13      	ldr	r4, [pc, #76]	; (15288 <__aeabi_ui2f+0x88>)
   1523a:	4014      	ands	r4, r2
   1523c:	0751      	lsls	r1, r2, #29
   1523e:	d004      	beq.n	1524a <__aeabi_ui2f+0x4a>
   15240:	210f      	movs	r1, #15
   15242:	400a      	ands	r2, r1
   15244:	2a04      	cmp	r2, #4
   15246:	d000      	beq.n	1524a <__aeabi_ui2f+0x4a>
   15248:	3404      	adds	r4, #4
   1524a:	0162      	lsls	r2, r4, #5
   1524c:	d412      	bmi.n	15274 <__aeabi_ui2f+0x74>
   1524e:	01a4      	lsls	r4, r4, #6
   15250:	0a64      	lsrs	r4, r4, #9
   15252:	b2db      	uxtb	r3, r3
   15254:	e7e3      	b.n	1521e <__aeabi_ui2f+0x1e>
   15256:	2300      	movs	r3, #0
   15258:	2400      	movs	r4, #0
   1525a:	e7e0      	b.n	1521e <__aeabi_ui2f+0x1e>
   1525c:	22b9      	movs	r2, #185	; 0xb9
   1525e:	0021      	movs	r1, r4
   15260:	1ad2      	subs	r2, r2, r3
   15262:	4091      	lsls	r1, r2
   15264:	000a      	movs	r2, r1
   15266:	1e51      	subs	r1, r2, #1
   15268:	418a      	sbcs	r2, r1
   1526a:	2105      	movs	r1, #5
   1526c:	1a09      	subs	r1, r1, r0
   1526e:	40cc      	lsrs	r4, r1
   15270:	4314      	orrs	r4, r2
   15272:	e7db      	b.n	1522c <__aeabi_ui2f+0x2c>
   15274:	4b04      	ldr	r3, [pc, #16]	; (15288 <__aeabi_ui2f+0x88>)
   15276:	401c      	ands	r4, r3
   15278:	239f      	movs	r3, #159	; 0x9f
   1527a:	01a4      	lsls	r4, r4, #6
   1527c:	1a1b      	subs	r3, r3, r0
   1527e:	0a64      	lsrs	r4, r4, #9
   15280:	b2db      	uxtb	r3, r3
   15282:	e7cc      	b.n	1521e <__aeabi_ui2f+0x1e>
   15284:	0022      	movs	r2, r4
   15286:	e7d7      	b.n	15238 <__aeabi_ui2f+0x38>
   15288:	fbffffff 	.word	0xfbffffff

0001528c <__aeabi_dadd>:
   1528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1528e:	4645      	mov	r5, r8
   15290:	46de      	mov	lr, fp
   15292:	4657      	mov	r7, sl
   15294:	464e      	mov	r6, r9
   15296:	030c      	lsls	r4, r1, #12
   15298:	b5e0      	push	{r5, r6, r7, lr}
   1529a:	004e      	lsls	r6, r1, #1
   1529c:	0fc9      	lsrs	r1, r1, #31
   1529e:	4688      	mov	r8, r1
   152a0:	000d      	movs	r5, r1
   152a2:	0a61      	lsrs	r1, r4, #9
   152a4:	0f44      	lsrs	r4, r0, #29
   152a6:	430c      	orrs	r4, r1
   152a8:	00c7      	lsls	r7, r0, #3
   152aa:	0319      	lsls	r1, r3, #12
   152ac:	0058      	lsls	r0, r3, #1
   152ae:	0fdb      	lsrs	r3, r3, #31
   152b0:	469b      	mov	fp, r3
   152b2:	0a4b      	lsrs	r3, r1, #9
   152b4:	0f51      	lsrs	r1, r2, #29
   152b6:	430b      	orrs	r3, r1
   152b8:	0d76      	lsrs	r6, r6, #21
   152ba:	0d40      	lsrs	r0, r0, #21
   152bc:	0019      	movs	r1, r3
   152be:	00d2      	lsls	r2, r2, #3
   152c0:	45d8      	cmp	r8, fp
   152c2:	d100      	bne.n	152c6 <__aeabi_dadd+0x3a>
   152c4:	e0ae      	b.n	15424 <__aeabi_dadd+0x198>
   152c6:	1a35      	subs	r5, r6, r0
   152c8:	2d00      	cmp	r5, #0
   152ca:	dc00      	bgt.n	152ce <__aeabi_dadd+0x42>
   152cc:	e0f6      	b.n	154bc <__aeabi_dadd+0x230>
   152ce:	2800      	cmp	r0, #0
   152d0:	d10f      	bne.n	152f2 <__aeabi_dadd+0x66>
   152d2:	4313      	orrs	r3, r2
   152d4:	d100      	bne.n	152d8 <__aeabi_dadd+0x4c>
   152d6:	e0db      	b.n	15490 <__aeabi_dadd+0x204>
   152d8:	1e6b      	subs	r3, r5, #1
   152da:	2b00      	cmp	r3, #0
   152dc:	d000      	beq.n	152e0 <__aeabi_dadd+0x54>
   152de:	e137      	b.n	15550 <__aeabi_dadd+0x2c4>
   152e0:	1aba      	subs	r2, r7, r2
   152e2:	4297      	cmp	r7, r2
   152e4:	41bf      	sbcs	r7, r7
   152e6:	1a64      	subs	r4, r4, r1
   152e8:	427f      	negs	r7, r7
   152ea:	1be4      	subs	r4, r4, r7
   152ec:	2601      	movs	r6, #1
   152ee:	0017      	movs	r7, r2
   152f0:	e024      	b.n	1533c <__aeabi_dadd+0xb0>
   152f2:	4bc6      	ldr	r3, [pc, #792]	; (1560c <__aeabi_dadd+0x380>)
   152f4:	429e      	cmp	r6, r3
   152f6:	d04d      	beq.n	15394 <__aeabi_dadd+0x108>
   152f8:	2380      	movs	r3, #128	; 0x80
   152fa:	041b      	lsls	r3, r3, #16
   152fc:	4319      	orrs	r1, r3
   152fe:	2d38      	cmp	r5, #56	; 0x38
   15300:	dd00      	ble.n	15304 <__aeabi_dadd+0x78>
   15302:	e107      	b.n	15514 <__aeabi_dadd+0x288>
   15304:	2d1f      	cmp	r5, #31
   15306:	dd00      	ble.n	1530a <__aeabi_dadd+0x7e>
   15308:	e138      	b.n	1557c <__aeabi_dadd+0x2f0>
   1530a:	2020      	movs	r0, #32
   1530c:	1b43      	subs	r3, r0, r5
   1530e:	469a      	mov	sl, r3
   15310:	000b      	movs	r3, r1
   15312:	4650      	mov	r0, sl
   15314:	4083      	lsls	r3, r0
   15316:	4699      	mov	r9, r3
   15318:	0013      	movs	r3, r2
   1531a:	4648      	mov	r0, r9
   1531c:	40eb      	lsrs	r3, r5
   1531e:	4318      	orrs	r0, r3
   15320:	0003      	movs	r3, r0
   15322:	4650      	mov	r0, sl
   15324:	4082      	lsls	r2, r0
   15326:	1e50      	subs	r0, r2, #1
   15328:	4182      	sbcs	r2, r0
   1532a:	40e9      	lsrs	r1, r5
   1532c:	431a      	orrs	r2, r3
   1532e:	1aba      	subs	r2, r7, r2
   15330:	1a61      	subs	r1, r4, r1
   15332:	4297      	cmp	r7, r2
   15334:	41a4      	sbcs	r4, r4
   15336:	0017      	movs	r7, r2
   15338:	4264      	negs	r4, r4
   1533a:	1b0c      	subs	r4, r1, r4
   1533c:	0223      	lsls	r3, r4, #8
   1533e:	d562      	bpl.n	15406 <__aeabi_dadd+0x17a>
   15340:	0264      	lsls	r4, r4, #9
   15342:	0a65      	lsrs	r5, r4, #9
   15344:	2d00      	cmp	r5, #0
   15346:	d100      	bne.n	1534a <__aeabi_dadd+0xbe>
   15348:	e0df      	b.n	1550a <__aeabi_dadd+0x27e>
   1534a:	0028      	movs	r0, r5
   1534c:	f001 fe02 	bl	16f54 <__clzsi2>
   15350:	0003      	movs	r3, r0
   15352:	3b08      	subs	r3, #8
   15354:	2b1f      	cmp	r3, #31
   15356:	dd00      	ble.n	1535a <__aeabi_dadd+0xce>
   15358:	e0d2      	b.n	15500 <__aeabi_dadd+0x274>
   1535a:	2220      	movs	r2, #32
   1535c:	003c      	movs	r4, r7
   1535e:	1ad2      	subs	r2, r2, r3
   15360:	409d      	lsls	r5, r3
   15362:	40d4      	lsrs	r4, r2
   15364:	409f      	lsls	r7, r3
   15366:	4325      	orrs	r5, r4
   15368:	429e      	cmp	r6, r3
   1536a:	dd00      	ble.n	1536e <__aeabi_dadd+0xe2>
   1536c:	e0c4      	b.n	154f8 <__aeabi_dadd+0x26c>
   1536e:	1b9e      	subs	r6, r3, r6
   15370:	1c73      	adds	r3, r6, #1
   15372:	2b1f      	cmp	r3, #31
   15374:	dd00      	ble.n	15378 <__aeabi_dadd+0xec>
   15376:	e0f1      	b.n	1555c <__aeabi_dadd+0x2d0>
   15378:	2220      	movs	r2, #32
   1537a:	0038      	movs	r0, r7
   1537c:	0029      	movs	r1, r5
   1537e:	1ad2      	subs	r2, r2, r3
   15380:	40d8      	lsrs	r0, r3
   15382:	4091      	lsls	r1, r2
   15384:	4097      	lsls	r7, r2
   15386:	002c      	movs	r4, r5
   15388:	4301      	orrs	r1, r0
   1538a:	1e78      	subs	r0, r7, #1
   1538c:	4187      	sbcs	r7, r0
   1538e:	40dc      	lsrs	r4, r3
   15390:	2600      	movs	r6, #0
   15392:	430f      	orrs	r7, r1
   15394:	077b      	lsls	r3, r7, #29
   15396:	d009      	beq.n	153ac <__aeabi_dadd+0x120>
   15398:	230f      	movs	r3, #15
   1539a:	403b      	ands	r3, r7
   1539c:	2b04      	cmp	r3, #4
   1539e:	d005      	beq.n	153ac <__aeabi_dadd+0x120>
   153a0:	1d3b      	adds	r3, r7, #4
   153a2:	42bb      	cmp	r3, r7
   153a4:	41bf      	sbcs	r7, r7
   153a6:	427f      	negs	r7, r7
   153a8:	19e4      	adds	r4, r4, r7
   153aa:	001f      	movs	r7, r3
   153ac:	0223      	lsls	r3, r4, #8
   153ae:	d52c      	bpl.n	1540a <__aeabi_dadd+0x17e>
   153b0:	4b96      	ldr	r3, [pc, #600]	; (1560c <__aeabi_dadd+0x380>)
   153b2:	3601      	adds	r6, #1
   153b4:	429e      	cmp	r6, r3
   153b6:	d100      	bne.n	153ba <__aeabi_dadd+0x12e>
   153b8:	e09a      	b.n	154f0 <__aeabi_dadd+0x264>
   153ba:	4645      	mov	r5, r8
   153bc:	4b94      	ldr	r3, [pc, #592]	; (15610 <__aeabi_dadd+0x384>)
   153be:	08ff      	lsrs	r7, r7, #3
   153c0:	401c      	ands	r4, r3
   153c2:	0760      	lsls	r0, r4, #29
   153c4:	0576      	lsls	r6, r6, #21
   153c6:	0264      	lsls	r4, r4, #9
   153c8:	4307      	orrs	r7, r0
   153ca:	0b24      	lsrs	r4, r4, #12
   153cc:	0d76      	lsrs	r6, r6, #21
   153ce:	2100      	movs	r1, #0
   153d0:	0324      	lsls	r4, r4, #12
   153d2:	0b23      	lsrs	r3, r4, #12
   153d4:	0d0c      	lsrs	r4, r1, #20
   153d6:	4a8f      	ldr	r2, [pc, #572]	; (15614 <__aeabi_dadd+0x388>)
   153d8:	0524      	lsls	r4, r4, #20
   153da:	431c      	orrs	r4, r3
   153dc:	4014      	ands	r4, r2
   153de:	0533      	lsls	r3, r6, #20
   153e0:	4323      	orrs	r3, r4
   153e2:	005b      	lsls	r3, r3, #1
   153e4:	07ed      	lsls	r5, r5, #31
   153e6:	085b      	lsrs	r3, r3, #1
   153e8:	432b      	orrs	r3, r5
   153ea:	0038      	movs	r0, r7
   153ec:	0019      	movs	r1, r3
   153ee:	bc3c      	pop	{r2, r3, r4, r5}
   153f0:	4690      	mov	r8, r2
   153f2:	4699      	mov	r9, r3
   153f4:	46a2      	mov	sl, r4
   153f6:	46ab      	mov	fp, r5
   153f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153fa:	4664      	mov	r4, ip
   153fc:	4304      	orrs	r4, r0
   153fe:	d100      	bne.n	15402 <__aeabi_dadd+0x176>
   15400:	e211      	b.n	15826 <__aeabi_dadd+0x59a>
   15402:	0004      	movs	r4, r0
   15404:	4667      	mov	r7, ip
   15406:	077b      	lsls	r3, r7, #29
   15408:	d1c6      	bne.n	15398 <__aeabi_dadd+0x10c>
   1540a:	4645      	mov	r5, r8
   1540c:	0760      	lsls	r0, r4, #29
   1540e:	08ff      	lsrs	r7, r7, #3
   15410:	4307      	orrs	r7, r0
   15412:	08e4      	lsrs	r4, r4, #3
   15414:	4b7d      	ldr	r3, [pc, #500]	; (1560c <__aeabi_dadd+0x380>)
   15416:	429e      	cmp	r6, r3
   15418:	d030      	beq.n	1547c <__aeabi_dadd+0x1f0>
   1541a:	0324      	lsls	r4, r4, #12
   1541c:	0576      	lsls	r6, r6, #21
   1541e:	0b24      	lsrs	r4, r4, #12
   15420:	0d76      	lsrs	r6, r6, #21
   15422:	e7d4      	b.n	153ce <__aeabi_dadd+0x142>
   15424:	1a33      	subs	r3, r6, r0
   15426:	469a      	mov	sl, r3
   15428:	2b00      	cmp	r3, #0
   1542a:	dd78      	ble.n	1551e <__aeabi_dadd+0x292>
   1542c:	2800      	cmp	r0, #0
   1542e:	d031      	beq.n	15494 <__aeabi_dadd+0x208>
   15430:	4876      	ldr	r0, [pc, #472]	; (1560c <__aeabi_dadd+0x380>)
   15432:	4286      	cmp	r6, r0
   15434:	d0ae      	beq.n	15394 <__aeabi_dadd+0x108>
   15436:	2080      	movs	r0, #128	; 0x80
   15438:	0400      	lsls	r0, r0, #16
   1543a:	4301      	orrs	r1, r0
   1543c:	4653      	mov	r3, sl
   1543e:	2b38      	cmp	r3, #56	; 0x38
   15440:	dc00      	bgt.n	15444 <__aeabi_dadd+0x1b8>
   15442:	e0e9      	b.n	15618 <__aeabi_dadd+0x38c>
   15444:	430a      	orrs	r2, r1
   15446:	1e51      	subs	r1, r2, #1
   15448:	418a      	sbcs	r2, r1
   1544a:	2100      	movs	r1, #0
   1544c:	19d2      	adds	r2, r2, r7
   1544e:	42ba      	cmp	r2, r7
   15450:	41bf      	sbcs	r7, r7
   15452:	1909      	adds	r1, r1, r4
   15454:	427c      	negs	r4, r7
   15456:	0017      	movs	r7, r2
   15458:	190c      	adds	r4, r1, r4
   1545a:	0223      	lsls	r3, r4, #8
   1545c:	d5d3      	bpl.n	15406 <__aeabi_dadd+0x17a>
   1545e:	4b6b      	ldr	r3, [pc, #428]	; (1560c <__aeabi_dadd+0x380>)
   15460:	3601      	adds	r6, #1
   15462:	429e      	cmp	r6, r3
   15464:	d100      	bne.n	15468 <__aeabi_dadd+0x1dc>
   15466:	e13a      	b.n	156de <__aeabi_dadd+0x452>
   15468:	2001      	movs	r0, #1
   1546a:	4b69      	ldr	r3, [pc, #420]	; (15610 <__aeabi_dadd+0x384>)
   1546c:	401c      	ands	r4, r3
   1546e:	087b      	lsrs	r3, r7, #1
   15470:	4007      	ands	r7, r0
   15472:	431f      	orrs	r7, r3
   15474:	07e0      	lsls	r0, r4, #31
   15476:	4307      	orrs	r7, r0
   15478:	0864      	lsrs	r4, r4, #1
   1547a:	e78b      	b.n	15394 <__aeabi_dadd+0x108>
   1547c:	0023      	movs	r3, r4
   1547e:	433b      	orrs	r3, r7
   15480:	d100      	bne.n	15484 <__aeabi_dadd+0x1f8>
   15482:	e1cb      	b.n	1581c <__aeabi_dadd+0x590>
   15484:	2280      	movs	r2, #128	; 0x80
   15486:	0312      	lsls	r2, r2, #12
   15488:	4314      	orrs	r4, r2
   1548a:	0324      	lsls	r4, r4, #12
   1548c:	0b24      	lsrs	r4, r4, #12
   1548e:	e79e      	b.n	153ce <__aeabi_dadd+0x142>
   15490:	002e      	movs	r6, r5
   15492:	e77f      	b.n	15394 <__aeabi_dadd+0x108>
   15494:	0008      	movs	r0, r1
   15496:	4310      	orrs	r0, r2
   15498:	d100      	bne.n	1549c <__aeabi_dadd+0x210>
   1549a:	e0b4      	b.n	15606 <__aeabi_dadd+0x37a>
   1549c:	1e58      	subs	r0, r3, #1
   1549e:	2800      	cmp	r0, #0
   154a0:	d000      	beq.n	154a4 <__aeabi_dadd+0x218>
   154a2:	e0de      	b.n	15662 <__aeabi_dadd+0x3d6>
   154a4:	18ba      	adds	r2, r7, r2
   154a6:	42ba      	cmp	r2, r7
   154a8:	419b      	sbcs	r3, r3
   154aa:	1864      	adds	r4, r4, r1
   154ac:	425b      	negs	r3, r3
   154ae:	18e4      	adds	r4, r4, r3
   154b0:	0017      	movs	r7, r2
   154b2:	2601      	movs	r6, #1
   154b4:	0223      	lsls	r3, r4, #8
   154b6:	d5a6      	bpl.n	15406 <__aeabi_dadd+0x17a>
   154b8:	2602      	movs	r6, #2
   154ba:	e7d5      	b.n	15468 <__aeabi_dadd+0x1dc>
   154bc:	2d00      	cmp	r5, #0
   154be:	d16e      	bne.n	1559e <__aeabi_dadd+0x312>
   154c0:	1c70      	adds	r0, r6, #1
   154c2:	0540      	lsls	r0, r0, #21
   154c4:	0d40      	lsrs	r0, r0, #21
   154c6:	2801      	cmp	r0, #1
   154c8:	dc00      	bgt.n	154cc <__aeabi_dadd+0x240>
   154ca:	e0f9      	b.n	156c0 <__aeabi_dadd+0x434>
   154cc:	1ab8      	subs	r0, r7, r2
   154ce:	4684      	mov	ip, r0
   154d0:	4287      	cmp	r7, r0
   154d2:	4180      	sbcs	r0, r0
   154d4:	1ae5      	subs	r5, r4, r3
   154d6:	4240      	negs	r0, r0
   154d8:	1a2d      	subs	r5, r5, r0
   154da:	0228      	lsls	r0, r5, #8
   154dc:	d400      	bmi.n	154e0 <__aeabi_dadd+0x254>
   154de:	e089      	b.n	155f4 <__aeabi_dadd+0x368>
   154e0:	1bd7      	subs	r7, r2, r7
   154e2:	42ba      	cmp	r2, r7
   154e4:	4192      	sbcs	r2, r2
   154e6:	1b1c      	subs	r4, r3, r4
   154e8:	4252      	negs	r2, r2
   154ea:	1aa5      	subs	r5, r4, r2
   154ec:	46d8      	mov	r8, fp
   154ee:	e729      	b.n	15344 <__aeabi_dadd+0xb8>
   154f0:	4645      	mov	r5, r8
   154f2:	2400      	movs	r4, #0
   154f4:	2700      	movs	r7, #0
   154f6:	e76a      	b.n	153ce <__aeabi_dadd+0x142>
   154f8:	4c45      	ldr	r4, [pc, #276]	; (15610 <__aeabi_dadd+0x384>)
   154fa:	1af6      	subs	r6, r6, r3
   154fc:	402c      	ands	r4, r5
   154fe:	e749      	b.n	15394 <__aeabi_dadd+0x108>
   15500:	003d      	movs	r5, r7
   15502:	3828      	subs	r0, #40	; 0x28
   15504:	4085      	lsls	r5, r0
   15506:	2700      	movs	r7, #0
   15508:	e72e      	b.n	15368 <__aeabi_dadd+0xdc>
   1550a:	0038      	movs	r0, r7
   1550c:	f001 fd22 	bl	16f54 <__clzsi2>
   15510:	3020      	adds	r0, #32
   15512:	e71d      	b.n	15350 <__aeabi_dadd+0xc4>
   15514:	430a      	orrs	r2, r1
   15516:	1e51      	subs	r1, r2, #1
   15518:	418a      	sbcs	r2, r1
   1551a:	2100      	movs	r1, #0
   1551c:	e707      	b.n	1532e <__aeabi_dadd+0xa2>
   1551e:	2b00      	cmp	r3, #0
   15520:	d000      	beq.n	15524 <__aeabi_dadd+0x298>
   15522:	e0f3      	b.n	1570c <__aeabi_dadd+0x480>
   15524:	1c70      	adds	r0, r6, #1
   15526:	0543      	lsls	r3, r0, #21
   15528:	0d5b      	lsrs	r3, r3, #21
   1552a:	2b01      	cmp	r3, #1
   1552c:	dc00      	bgt.n	15530 <__aeabi_dadd+0x2a4>
   1552e:	e0ad      	b.n	1568c <__aeabi_dadd+0x400>
   15530:	4b36      	ldr	r3, [pc, #216]	; (1560c <__aeabi_dadd+0x380>)
   15532:	4298      	cmp	r0, r3
   15534:	d100      	bne.n	15538 <__aeabi_dadd+0x2ac>
   15536:	e0d1      	b.n	156dc <__aeabi_dadd+0x450>
   15538:	18ba      	adds	r2, r7, r2
   1553a:	42ba      	cmp	r2, r7
   1553c:	41bf      	sbcs	r7, r7
   1553e:	1864      	adds	r4, r4, r1
   15540:	427f      	negs	r7, r7
   15542:	19e4      	adds	r4, r4, r7
   15544:	07e7      	lsls	r7, r4, #31
   15546:	0852      	lsrs	r2, r2, #1
   15548:	4317      	orrs	r7, r2
   1554a:	0864      	lsrs	r4, r4, #1
   1554c:	0006      	movs	r6, r0
   1554e:	e721      	b.n	15394 <__aeabi_dadd+0x108>
   15550:	482e      	ldr	r0, [pc, #184]	; (1560c <__aeabi_dadd+0x380>)
   15552:	4285      	cmp	r5, r0
   15554:	d100      	bne.n	15558 <__aeabi_dadd+0x2cc>
   15556:	e093      	b.n	15680 <__aeabi_dadd+0x3f4>
   15558:	001d      	movs	r5, r3
   1555a:	e6d0      	b.n	152fe <__aeabi_dadd+0x72>
   1555c:	0029      	movs	r1, r5
   1555e:	3e1f      	subs	r6, #31
   15560:	40f1      	lsrs	r1, r6
   15562:	2b20      	cmp	r3, #32
   15564:	d100      	bne.n	15568 <__aeabi_dadd+0x2dc>
   15566:	e08d      	b.n	15684 <__aeabi_dadd+0x3f8>
   15568:	2240      	movs	r2, #64	; 0x40
   1556a:	1ad3      	subs	r3, r2, r3
   1556c:	409d      	lsls	r5, r3
   1556e:	432f      	orrs	r7, r5
   15570:	1e7d      	subs	r5, r7, #1
   15572:	41af      	sbcs	r7, r5
   15574:	2400      	movs	r4, #0
   15576:	430f      	orrs	r7, r1
   15578:	2600      	movs	r6, #0
   1557a:	e744      	b.n	15406 <__aeabi_dadd+0x17a>
   1557c:	002b      	movs	r3, r5
   1557e:	0008      	movs	r0, r1
   15580:	3b20      	subs	r3, #32
   15582:	40d8      	lsrs	r0, r3
   15584:	0003      	movs	r3, r0
   15586:	2d20      	cmp	r5, #32
   15588:	d100      	bne.n	1558c <__aeabi_dadd+0x300>
   1558a:	e07d      	b.n	15688 <__aeabi_dadd+0x3fc>
   1558c:	2040      	movs	r0, #64	; 0x40
   1558e:	1b45      	subs	r5, r0, r5
   15590:	40a9      	lsls	r1, r5
   15592:	430a      	orrs	r2, r1
   15594:	1e51      	subs	r1, r2, #1
   15596:	418a      	sbcs	r2, r1
   15598:	2100      	movs	r1, #0
   1559a:	431a      	orrs	r2, r3
   1559c:	e6c7      	b.n	1532e <__aeabi_dadd+0xa2>
   1559e:	2e00      	cmp	r6, #0
   155a0:	d050      	beq.n	15644 <__aeabi_dadd+0x3b8>
   155a2:	4e1a      	ldr	r6, [pc, #104]	; (1560c <__aeabi_dadd+0x380>)
   155a4:	42b0      	cmp	r0, r6
   155a6:	d057      	beq.n	15658 <__aeabi_dadd+0x3cc>
   155a8:	2680      	movs	r6, #128	; 0x80
   155aa:	426b      	negs	r3, r5
   155ac:	4699      	mov	r9, r3
   155ae:	0436      	lsls	r6, r6, #16
   155b0:	4334      	orrs	r4, r6
   155b2:	464b      	mov	r3, r9
   155b4:	2b38      	cmp	r3, #56	; 0x38
   155b6:	dd00      	ble.n	155ba <__aeabi_dadd+0x32e>
   155b8:	e0d6      	b.n	15768 <__aeabi_dadd+0x4dc>
   155ba:	2b1f      	cmp	r3, #31
   155bc:	dd00      	ble.n	155c0 <__aeabi_dadd+0x334>
   155be:	e135      	b.n	1582c <__aeabi_dadd+0x5a0>
   155c0:	2620      	movs	r6, #32
   155c2:	1af5      	subs	r5, r6, r3
   155c4:	0026      	movs	r6, r4
   155c6:	40ae      	lsls	r6, r5
   155c8:	46b2      	mov	sl, r6
   155ca:	003e      	movs	r6, r7
   155cc:	40de      	lsrs	r6, r3
   155ce:	46ac      	mov	ip, r5
   155d0:	0035      	movs	r5, r6
   155d2:	4656      	mov	r6, sl
   155d4:	432e      	orrs	r6, r5
   155d6:	4665      	mov	r5, ip
   155d8:	40af      	lsls	r7, r5
   155da:	1e7d      	subs	r5, r7, #1
   155dc:	41af      	sbcs	r7, r5
   155de:	40dc      	lsrs	r4, r3
   155e0:	4337      	orrs	r7, r6
   155e2:	1bd7      	subs	r7, r2, r7
   155e4:	42ba      	cmp	r2, r7
   155e6:	4192      	sbcs	r2, r2
   155e8:	1b0c      	subs	r4, r1, r4
   155ea:	4252      	negs	r2, r2
   155ec:	1aa4      	subs	r4, r4, r2
   155ee:	0006      	movs	r6, r0
   155f0:	46d8      	mov	r8, fp
   155f2:	e6a3      	b.n	1533c <__aeabi_dadd+0xb0>
   155f4:	4664      	mov	r4, ip
   155f6:	4667      	mov	r7, ip
   155f8:	432c      	orrs	r4, r5
   155fa:	d000      	beq.n	155fe <__aeabi_dadd+0x372>
   155fc:	e6a2      	b.n	15344 <__aeabi_dadd+0xb8>
   155fe:	2500      	movs	r5, #0
   15600:	2600      	movs	r6, #0
   15602:	2700      	movs	r7, #0
   15604:	e706      	b.n	15414 <__aeabi_dadd+0x188>
   15606:	001e      	movs	r6, r3
   15608:	e6c4      	b.n	15394 <__aeabi_dadd+0x108>
   1560a:	46c0      	nop			; (mov r8, r8)
   1560c:	000007ff 	.word	0x000007ff
   15610:	ff7fffff 	.word	0xff7fffff
   15614:	800fffff 	.word	0x800fffff
   15618:	2b1f      	cmp	r3, #31
   1561a:	dc63      	bgt.n	156e4 <__aeabi_dadd+0x458>
   1561c:	2020      	movs	r0, #32
   1561e:	1ac3      	subs	r3, r0, r3
   15620:	0008      	movs	r0, r1
   15622:	4098      	lsls	r0, r3
   15624:	469c      	mov	ip, r3
   15626:	4683      	mov	fp, r0
   15628:	4653      	mov	r3, sl
   1562a:	0010      	movs	r0, r2
   1562c:	40d8      	lsrs	r0, r3
   1562e:	0003      	movs	r3, r0
   15630:	4658      	mov	r0, fp
   15632:	4318      	orrs	r0, r3
   15634:	4663      	mov	r3, ip
   15636:	409a      	lsls	r2, r3
   15638:	1e53      	subs	r3, r2, #1
   1563a:	419a      	sbcs	r2, r3
   1563c:	4653      	mov	r3, sl
   1563e:	4302      	orrs	r2, r0
   15640:	40d9      	lsrs	r1, r3
   15642:	e703      	b.n	1544c <__aeabi_dadd+0x1c0>
   15644:	0026      	movs	r6, r4
   15646:	433e      	orrs	r6, r7
   15648:	d006      	beq.n	15658 <__aeabi_dadd+0x3cc>
   1564a:	43eb      	mvns	r3, r5
   1564c:	4699      	mov	r9, r3
   1564e:	2b00      	cmp	r3, #0
   15650:	d0c7      	beq.n	155e2 <__aeabi_dadd+0x356>
   15652:	4e94      	ldr	r6, [pc, #592]	; (158a4 <__aeabi_dadd+0x618>)
   15654:	42b0      	cmp	r0, r6
   15656:	d1ac      	bne.n	155b2 <__aeabi_dadd+0x326>
   15658:	000c      	movs	r4, r1
   1565a:	0017      	movs	r7, r2
   1565c:	0006      	movs	r6, r0
   1565e:	46d8      	mov	r8, fp
   15660:	e698      	b.n	15394 <__aeabi_dadd+0x108>
   15662:	4b90      	ldr	r3, [pc, #576]	; (158a4 <__aeabi_dadd+0x618>)
   15664:	459a      	cmp	sl, r3
   15666:	d00b      	beq.n	15680 <__aeabi_dadd+0x3f4>
   15668:	4682      	mov	sl, r0
   1566a:	e6e7      	b.n	1543c <__aeabi_dadd+0x1b0>
   1566c:	2800      	cmp	r0, #0
   1566e:	d000      	beq.n	15672 <__aeabi_dadd+0x3e6>
   15670:	e09e      	b.n	157b0 <__aeabi_dadd+0x524>
   15672:	0018      	movs	r0, r3
   15674:	4310      	orrs	r0, r2
   15676:	d100      	bne.n	1567a <__aeabi_dadd+0x3ee>
   15678:	e0e9      	b.n	1584e <__aeabi_dadd+0x5c2>
   1567a:	001c      	movs	r4, r3
   1567c:	0017      	movs	r7, r2
   1567e:	46d8      	mov	r8, fp
   15680:	4e88      	ldr	r6, [pc, #544]	; (158a4 <__aeabi_dadd+0x618>)
   15682:	e687      	b.n	15394 <__aeabi_dadd+0x108>
   15684:	2500      	movs	r5, #0
   15686:	e772      	b.n	1556e <__aeabi_dadd+0x2e2>
   15688:	2100      	movs	r1, #0
   1568a:	e782      	b.n	15592 <__aeabi_dadd+0x306>
   1568c:	0023      	movs	r3, r4
   1568e:	433b      	orrs	r3, r7
   15690:	2e00      	cmp	r6, #0
   15692:	d000      	beq.n	15696 <__aeabi_dadd+0x40a>
   15694:	e0ab      	b.n	157ee <__aeabi_dadd+0x562>
   15696:	2b00      	cmp	r3, #0
   15698:	d100      	bne.n	1569c <__aeabi_dadd+0x410>
   1569a:	e0e7      	b.n	1586c <__aeabi_dadd+0x5e0>
   1569c:	000b      	movs	r3, r1
   1569e:	4313      	orrs	r3, r2
   156a0:	d100      	bne.n	156a4 <__aeabi_dadd+0x418>
   156a2:	e677      	b.n	15394 <__aeabi_dadd+0x108>
   156a4:	18ba      	adds	r2, r7, r2
   156a6:	42ba      	cmp	r2, r7
   156a8:	41bf      	sbcs	r7, r7
   156aa:	1864      	adds	r4, r4, r1
   156ac:	427f      	negs	r7, r7
   156ae:	19e4      	adds	r4, r4, r7
   156b0:	0223      	lsls	r3, r4, #8
   156b2:	d400      	bmi.n	156b6 <__aeabi_dadd+0x42a>
   156b4:	e0f2      	b.n	1589c <__aeabi_dadd+0x610>
   156b6:	4b7c      	ldr	r3, [pc, #496]	; (158a8 <__aeabi_dadd+0x61c>)
   156b8:	0017      	movs	r7, r2
   156ba:	401c      	ands	r4, r3
   156bc:	0006      	movs	r6, r0
   156be:	e669      	b.n	15394 <__aeabi_dadd+0x108>
   156c0:	0020      	movs	r0, r4
   156c2:	4338      	orrs	r0, r7
   156c4:	2e00      	cmp	r6, #0
   156c6:	d1d1      	bne.n	1566c <__aeabi_dadd+0x3e0>
   156c8:	2800      	cmp	r0, #0
   156ca:	d15b      	bne.n	15784 <__aeabi_dadd+0x4f8>
   156cc:	001c      	movs	r4, r3
   156ce:	4314      	orrs	r4, r2
   156d0:	d100      	bne.n	156d4 <__aeabi_dadd+0x448>
   156d2:	e0a8      	b.n	15826 <__aeabi_dadd+0x59a>
   156d4:	001c      	movs	r4, r3
   156d6:	0017      	movs	r7, r2
   156d8:	46d8      	mov	r8, fp
   156da:	e65b      	b.n	15394 <__aeabi_dadd+0x108>
   156dc:	0006      	movs	r6, r0
   156de:	2400      	movs	r4, #0
   156e0:	2700      	movs	r7, #0
   156e2:	e697      	b.n	15414 <__aeabi_dadd+0x188>
   156e4:	4650      	mov	r0, sl
   156e6:	000b      	movs	r3, r1
   156e8:	3820      	subs	r0, #32
   156ea:	40c3      	lsrs	r3, r0
   156ec:	4699      	mov	r9, r3
   156ee:	4653      	mov	r3, sl
   156f0:	2b20      	cmp	r3, #32
   156f2:	d100      	bne.n	156f6 <__aeabi_dadd+0x46a>
   156f4:	e095      	b.n	15822 <__aeabi_dadd+0x596>
   156f6:	2340      	movs	r3, #64	; 0x40
   156f8:	4650      	mov	r0, sl
   156fa:	1a1b      	subs	r3, r3, r0
   156fc:	4099      	lsls	r1, r3
   156fe:	430a      	orrs	r2, r1
   15700:	1e51      	subs	r1, r2, #1
   15702:	418a      	sbcs	r2, r1
   15704:	464b      	mov	r3, r9
   15706:	2100      	movs	r1, #0
   15708:	431a      	orrs	r2, r3
   1570a:	e69f      	b.n	1544c <__aeabi_dadd+0x1c0>
   1570c:	2e00      	cmp	r6, #0
   1570e:	d130      	bne.n	15772 <__aeabi_dadd+0x4e6>
   15710:	0026      	movs	r6, r4
   15712:	433e      	orrs	r6, r7
   15714:	d067      	beq.n	157e6 <__aeabi_dadd+0x55a>
   15716:	43db      	mvns	r3, r3
   15718:	469a      	mov	sl, r3
   1571a:	2b00      	cmp	r3, #0
   1571c:	d01c      	beq.n	15758 <__aeabi_dadd+0x4cc>
   1571e:	4e61      	ldr	r6, [pc, #388]	; (158a4 <__aeabi_dadd+0x618>)
   15720:	42b0      	cmp	r0, r6
   15722:	d060      	beq.n	157e6 <__aeabi_dadd+0x55a>
   15724:	4653      	mov	r3, sl
   15726:	2b38      	cmp	r3, #56	; 0x38
   15728:	dd00      	ble.n	1572c <__aeabi_dadd+0x4a0>
   1572a:	e096      	b.n	1585a <__aeabi_dadd+0x5ce>
   1572c:	2b1f      	cmp	r3, #31
   1572e:	dd00      	ble.n	15732 <__aeabi_dadd+0x4a6>
   15730:	e09f      	b.n	15872 <__aeabi_dadd+0x5e6>
   15732:	2620      	movs	r6, #32
   15734:	1af3      	subs	r3, r6, r3
   15736:	0026      	movs	r6, r4
   15738:	409e      	lsls	r6, r3
   1573a:	469c      	mov	ip, r3
   1573c:	46b3      	mov	fp, r6
   1573e:	4653      	mov	r3, sl
   15740:	003e      	movs	r6, r7
   15742:	40de      	lsrs	r6, r3
   15744:	0033      	movs	r3, r6
   15746:	465e      	mov	r6, fp
   15748:	431e      	orrs	r6, r3
   1574a:	4663      	mov	r3, ip
   1574c:	409f      	lsls	r7, r3
   1574e:	1e7b      	subs	r3, r7, #1
   15750:	419f      	sbcs	r7, r3
   15752:	4653      	mov	r3, sl
   15754:	40dc      	lsrs	r4, r3
   15756:	4337      	orrs	r7, r6
   15758:	18bf      	adds	r7, r7, r2
   1575a:	4297      	cmp	r7, r2
   1575c:	4192      	sbcs	r2, r2
   1575e:	1864      	adds	r4, r4, r1
   15760:	4252      	negs	r2, r2
   15762:	18a4      	adds	r4, r4, r2
   15764:	0006      	movs	r6, r0
   15766:	e678      	b.n	1545a <__aeabi_dadd+0x1ce>
   15768:	4327      	orrs	r7, r4
   1576a:	1e7c      	subs	r4, r7, #1
   1576c:	41a7      	sbcs	r7, r4
   1576e:	2400      	movs	r4, #0
   15770:	e737      	b.n	155e2 <__aeabi_dadd+0x356>
   15772:	4e4c      	ldr	r6, [pc, #304]	; (158a4 <__aeabi_dadd+0x618>)
   15774:	42b0      	cmp	r0, r6
   15776:	d036      	beq.n	157e6 <__aeabi_dadd+0x55a>
   15778:	2680      	movs	r6, #128	; 0x80
   1577a:	425b      	negs	r3, r3
   1577c:	0436      	lsls	r6, r6, #16
   1577e:	469a      	mov	sl, r3
   15780:	4334      	orrs	r4, r6
   15782:	e7cf      	b.n	15724 <__aeabi_dadd+0x498>
   15784:	0018      	movs	r0, r3
   15786:	4310      	orrs	r0, r2
   15788:	d100      	bne.n	1578c <__aeabi_dadd+0x500>
   1578a:	e603      	b.n	15394 <__aeabi_dadd+0x108>
   1578c:	1ab8      	subs	r0, r7, r2
   1578e:	4684      	mov	ip, r0
   15790:	4567      	cmp	r7, ip
   15792:	41ad      	sbcs	r5, r5
   15794:	1ae0      	subs	r0, r4, r3
   15796:	426d      	negs	r5, r5
   15798:	1b40      	subs	r0, r0, r5
   1579a:	0205      	lsls	r5, r0, #8
   1579c:	d400      	bmi.n	157a0 <__aeabi_dadd+0x514>
   1579e:	e62c      	b.n	153fa <__aeabi_dadd+0x16e>
   157a0:	1bd7      	subs	r7, r2, r7
   157a2:	42ba      	cmp	r2, r7
   157a4:	4192      	sbcs	r2, r2
   157a6:	1b1c      	subs	r4, r3, r4
   157a8:	4252      	negs	r2, r2
   157aa:	1aa4      	subs	r4, r4, r2
   157ac:	46d8      	mov	r8, fp
   157ae:	e5f1      	b.n	15394 <__aeabi_dadd+0x108>
   157b0:	0018      	movs	r0, r3
   157b2:	4310      	orrs	r0, r2
   157b4:	d100      	bne.n	157b8 <__aeabi_dadd+0x52c>
   157b6:	e763      	b.n	15680 <__aeabi_dadd+0x3f4>
   157b8:	08f8      	lsrs	r0, r7, #3
   157ba:	0767      	lsls	r7, r4, #29
   157bc:	4307      	orrs	r7, r0
   157be:	2080      	movs	r0, #128	; 0x80
   157c0:	08e4      	lsrs	r4, r4, #3
   157c2:	0300      	lsls	r0, r0, #12
   157c4:	4204      	tst	r4, r0
   157c6:	d008      	beq.n	157da <__aeabi_dadd+0x54e>
   157c8:	08dd      	lsrs	r5, r3, #3
   157ca:	4205      	tst	r5, r0
   157cc:	d105      	bne.n	157da <__aeabi_dadd+0x54e>
   157ce:	08d2      	lsrs	r2, r2, #3
   157d0:	0759      	lsls	r1, r3, #29
   157d2:	4311      	orrs	r1, r2
   157d4:	000f      	movs	r7, r1
   157d6:	002c      	movs	r4, r5
   157d8:	46d8      	mov	r8, fp
   157da:	0f7b      	lsrs	r3, r7, #29
   157dc:	00e4      	lsls	r4, r4, #3
   157de:	431c      	orrs	r4, r3
   157e0:	00ff      	lsls	r7, r7, #3
   157e2:	4e30      	ldr	r6, [pc, #192]	; (158a4 <__aeabi_dadd+0x618>)
   157e4:	e5d6      	b.n	15394 <__aeabi_dadd+0x108>
   157e6:	000c      	movs	r4, r1
   157e8:	0017      	movs	r7, r2
   157ea:	0006      	movs	r6, r0
   157ec:	e5d2      	b.n	15394 <__aeabi_dadd+0x108>
   157ee:	2b00      	cmp	r3, #0
   157f0:	d038      	beq.n	15864 <__aeabi_dadd+0x5d8>
   157f2:	000b      	movs	r3, r1
   157f4:	4313      	orrs	r3, r2
   157f6:	d100      	bne.n	157fa <__aeabi_dadd+0x56e>
   157f8:	e742      	b.n	15680 <__aeabi_dadd+0x3f4>
   157fa:	08f8      	lsrs	r0, r7, #3
   157fc:	0767      	lsls	r7, r4, #29
   157fe:	4307      	orrs	r7, r0
   15800:	2080      	movs	r0, #128	; 0x80
   15802:	08e4      	lsrs	r4, r4, #3
   15804:	0300      	lsls	r0, r0, #12
   15806:	4204      	tst	r4, r0
   15808:	d0e7      	beq.n	157da <__aeabi_dadd+0x54e>
   1580a:	08cb      	lsrs	r3, r1, #3
   1580c:	4203      	tst	r3, r0
   1580e:	d1e4      	bne.n	157da <__aeabi_dadd+0x54e>
   15810:	08d2      	lsrs	r2, r2, #3
   15812:	0749      	lsls	r1, r1, #29
   15814:	4311      	orrs	r1, r2
   15816:	000f      	movs	r7, r1
   15818:	001c      	movs	r4, r3
   1581a:	e7de      	b.n	157da <__aeabi_dadd+0x54e>
   1581c:	2700      	movs	r7, #0
   1581e:	2400      	movs	r4, #0
   15820:	e5d5      	b.n	153ce <__aeabi_dadd+0x142>
   15822:	2100      	movs	r1, #0
   15824:	e76b      	b.n	156fe <__aeabi_dadd+0x472>
   15826:	2500      	movs	r5, #0
   15828:	2700      	movs	r7, #0
   1582a:	e5f3      	b.n	15414 <__aeabi_dadd+0x188>
   1582c:	464e      	mov	r6, r9
   1582e:	0025      	movs	r5, r4
   15830:	3e20      	subs	r6, #32
   15832:	40f5      	lsrs	r5, r6
   15834:	464b      	mov	r3, r9
   15836:	002e      	movs	r6, r5
   15838:	2b20      	cmp	r3, #32
   1583a:	d02d      	beq.n	15898 <__aeabi_dadd+0x60c>
   1583c:	2540      	movs	r5, #64	; 0x40
   1583e:	1aed      	subs	r5, r5, r3
   15840:	40ac      	lsls	r4, r5
   15842:	4327      	orrs	r7, r4
   15844:	1e7c      	subs	r4, r7, #1
   15846:	41a7      	sbcs	r7, r4
   15848:	2400      	movs	r4, #0
   1584a:	4337      	orrs	r7, r6
   1584c:	e6c9      	b.n	155e2 <__aeabi_dadd+0x356>
   1584e:	2480      	movs	r4, #128	; 0x80
   15850:	2500      	movs	r5, #0
   15852:	0324      	lsls	r4, r4, #12
   15854:	4e13      	ldr	r6, [pc, #76]	; (158a4 <__aeabi_dadd+0x618>)
   15856:	2700      	movs	r7, #0
   15858:	e5dc      	b.n	15414 <__aeabi_dadd+0x188>
   1585a:	4327      	orrs	r7, r4
   1585c:	1e7c      	subs	r4, r7, #1
   1585e:	41a7      	sbcs	r7, r4
   15860:	2400      	movs	r4, #0
   15862:	e779      	b.n	15758 <__aeabi_dadd+0x4cc>
   15864:	000c      	movs	r4, r1
   15866:	0017      	movs	r7, r2
   15868:	4e0e      	ldr	r6, [pc, #56]	; (158a4 <__aeabi_dadd+0x618>)
   1586a:	e593      	b.n	15394 <__aeabi_dadd+0x108>
   1586c:	000c      	movs	r4, r1
   1586e:	0017      	movs	r7, r2
   15870:	e590      	b.n	15394 <__aeabi_dadd+0x108>
   15872:	4656      	mov	r6, sl
   15874:	0023      	movs	r3, r4
   15876:	3e20      	subs	r6, #32
   15878:	40f3      	lsrs	r3, r6
   1587a:	4699      	mov	r9, r3
   1587c:	4653      	mov	r3, sl
   1587e:	2b20      	cmp	r3, #32
   15880:	d00e      	beq.n	158a0 <__aeabi_dadd+0x614>
   15882:	2340      	movs	r3, #64	; 0x40
   15884:	4656      	mov	r6, sl
   15886:	1b9b      	subs	r3, r3, r6
   15888:	409c      	lsls	r4, r3
   1588a:	4327      	orrs	r7, r4
   1588c:	1e7c      	subs	r4, r7, #1
   1588e:	41a7      	sbcs	r7, r4
   15890:	464b      	mov	r3, r9
   15892:	2400      	movs	r4, #0
   15894:	431f      	orrs	r7, r3
   15896:	e75f      	b.n	15758 <__aeabi_dadd+0x4cc>
   15898:	2400      	movs	r4, #0
   1589a:	e7d2      	b.n	15842 <__aeabi_dadd+0x5b6>
   1589c:	0017      	movs	r7, r2
   1589e:	e5b2      	b.n	15406 <__aeabi_dadd+0x17a>
   158a0:	2400      	movs	r4, #0
   158a2:	e7f2      	b.n	1588a <__aeabi_dadd+0x5fe>
   158a4:	000007ff 	.word	0x000007ff
   158a8:	ff7fffff 	.word	0xff7fffff

000158ac <__aeabi_ddiv>:
   158ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   158ae:	4657      	mov	r7, sl
   158b0:	4645      	mov	r5, r8
   158b2:	46de      	mov	lr, fp
   158b4:	464e      	mov	r6, r9
   158b6:	b5e0      	push	{r5, r6, r7, lr}
   158b8:	004c      	lsls	r4, r1, #1
   158ba:	030e      	lsls	r6, r1, #12
   158bc:	b087      	sub	sp, #28
   158be:	4683      	mov	fp, r0
   158c0:	4692      	mov	sl, r2
   158c2:	001d      	movs	r5, r3
   158c4:	4680      	mov	r8, r0
   158c6:	0b36      	lsrs	r6, r6, #12
   158c8:	0d64      	lsrs	r4, r4, #21
   158ca:	0fcf      	lsrs	r7, r1, #31
   158cc:	2c00      	cmp	r4, #0
   158ce:	d04f      	beq.n	15970 <__aeabi_ddiv+0xc4>
   158d0:	4b6f      	ldr	r3, [pc, #444]	; (15a90 <__aeabi_ddiv+0x1e4>)
   158d2:	429c      	cmp	r4, r3
   158d4:	d035      	beq.n	15942 <__aeabi_ddiv+0x96>
   158d6:	2380      	movs	r3, #128	; 0x80
   158d8:	0f42      	lsrs	r2, r0, #29
   158da:	041b      	lsls	r3, r3, #16
   158dc:	00f6      	lsls	r6, r6, #3
   158de:	4313      	orrs	r3, r2
   158e0:	4333      	orrs	r3, r6
   158e2:	4699      	mov	r9, r3
   158e4:	00c3      	lsls	r3, r0, #3
   158e6:	4698      	mov	r8, r3
   158e8:	4b6a      	ldr	r3, [pc, #424]	; (15a94 <__aeabi_ddiv+0x1e8>)
   158ea:	2600      	movs	r6, #0
   158ec:	469c      	mov	ip, r3
   158ee:	2300      	movs	r3, #0
   158f0:	4464      	add	r4, ip
   158f2:	9303      	str	r3, [sp, #12]
   158f4:	032b      	lsls	r3, r5, #12
   158f6:	0b1b      	lsrs	r3, r3, #12
   158f8:	469b      	mov	fp, r3
   158fa:	006b      	lsls	r3, r5, #1
   158fc:	0fed      	lsrs	r5, r5, #31
   158fe:	4650      	mov	r0, sl
   15900:	0d5b      	lsrs	r3, r3, #21
   15902:	9501      	str	r5, [sp, #4]
   15904:	d05e      	beq.n	159c4 <__aeabi_ddiv+0x118>
   15906:	4a62      	ldr	r2, [pc, #392]	; (15a90 <__aeabi_ddiv+0x1e4>)
   15908:	4293      	cmp	r3, r2
   1590a:	d053      	beq.n	159b4 <__aeabi_ddiv+0x108>
   1590c:	465a      	mov	r2, fp
   1590e:	00d1      	lsls	r1, r2, #3
   15910:	2280      	movs	r2, #128	; 0x80
   15912:	0f40      	lsrs	r0, r0, #29
   15914:	0412      	lsls	r2, r2, #16
   15916:	4302      	orrs	r2, r0
   15918:	430a      	orrs	r2, r1
   1591a:	4693      	mov	fp, r2
   1591c:	4652      	mov	r2, sl
   1591e:	00d1      	lsls	r1, r2, #3
   15920:	4a5c      	ldr	r2, [pc, #368]	; (15a94 <__aeabi_ddiv+0x1e8>)
   15922:	4694      	mov	ip, r2
   15924:	2200      	movs	r2, #0
   15926:	4463      	add	r3, ip
   15928:	0038      	movs	r0, r7
   1592a:	4068      	eors	r0, r5
   1592c:	4684      	mov	ip, r0
   1592e:	9002      	str	r0, [sp, #8]
   15930:	1ae4      	subs	r4, r4, r3
   15932:	4316      	orrs	r6, r2
   15934:	2e0f      	cmp	r6, #15
   15936:	d900      	bls.n	1593a <__aeabi_ddiv+0x8e>
   15938:	e0b4      	b.n	15aa4 <__aeabi_ddiv+0x1f8>
   1593a:	4b57      	ldr	r3, [pc, #348]	; (15a98 <__aeabi_ddiv+0x1ec>)
   1593c:	00b6      	lsls	r6, r6, #2
   1593e:	599b      	ldr	r3, [r3, r6]
   15940:	469f      	mov	pc, r3
   15942:	0003      	movs	r3, r0
   15944:	4333      	orrs	r3, r6
   15946:	4699      	mov	r9, r3
   15948:	d16c      	bne.n	15a24 <__aeabi_ddiv+0x178>
   1594a:	2300      	movs	r3, #0
   1594c:	4698      	mov	r8, r3
   1594e:	3302      	adds	r3, #2
   15950:	2608      	movs	r6, #8
   15952:	9303      	str	r3, [sp, #12]
   15954:	e7ce      	b.n	158f4 <__aeabi_ddiv+0x48>
   15956:	46cb      	mov	fp, r9
   15958:	4641      	mov	r1, r8
   1595a:	9a03      	ldr	r2, [sp, #12]
   1595c:	9701      	str	r7, [sp, #4]
   1595e:	2a02      	cmp	r2, #2
   15960:	d165      	bne.n	15a2e <__aeabi_ddiv+0x182>
   15962:	9b01      	ldr	r3, [sp, #4]
   15964:	4c4a      	ldr	r4, [pc, #296]	; (15a90 <__aeabi_ddiv+0x1e4>)
   15966:	469c      	mov	ip, r3
   15968:	2300      	movs	r3, #0
   1596a:	2200      	movs	r2, #0
   1596c:	4698      	mov	r8, r3
   1596e:	e06b      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15970:	0003      	movs	r3, r0
   15972:	4333      	orrs	r3, r6
   15974:	4699      	mov	r9, r3
   15976:	d04e      	beq.n	15a16 <__aeabi_ddiv+0x16a>
   15978:	2e00      	cmp	r6, #0
   1597a:	d100      	bne.n	1597e <__aeabi_ddiv+0xd2>
   1597c:	e1bc      	b.n	15cf8 <__aeabi_ddiv+0x44c>
   1597e:	0030      	movs	r0, r6
   15980:	f001 fae8 	bl	16f54 <__clzsi2>
   15984:	0003      	movs	r3, r0
   15986:	3b0b      	subs	r3, #11
   15988:	2b1c      	cmp	r3, #28
   1598a:	dd00      	ble.n	1598e <__aeabi_ddiv+0xe2>
   1598c:	e1ac      	b.n	15ce8 <__aeabi_ddiv+0x43c>
   1598e:	221d      	movs	r2, #29
   15990:	1ad3      	subs	r3, r2, r3
   15992:	465a      	mov	r2, fp
   15994:	0001      	movs	r1, r0
   15996:	40da      	lsrs	r2, r3
   15998:	3908      	subs	r1, #8
   1599a:	408e      	lsls	r6, r1
   1599c:	0013      	movs	r3, r2
   1599e:	4333      	orrs	r3, r6
   159a0:	4699      	mov	r9, r3
   159a2:	465b      	mov	r3, fp
   159a4:	408b      	lsls	r3, r1
   159a6:	4698      	mov	r8, r3
   159a8:	2300      	movs	r3, #0
   159aa:	4c3c      	ldr	r4, [pc, #240]	; (15a9c <__aeabi_ddiv+0x1f0>)
   159ac:	2600      	movs	r6, #0
   159ae:	1a24      	subs	r4, r4, r0
   159b0:	9303      	str	r3, [sp, #12]
   159b2:	e79f      	b.n	158f4 <__aeabi_ddiv+0x48>
   159b4:	4651      	mov	r1, sl
   159b6:	465a      	mov	r2, fp
   159b8:	4311      	orrs	r1, r2
   159ba:	d129      	bne.n	15a10 <__aeabi_ddiv+0x164>
   159bc:	2200      	movs	r2, #0
   159be:	4693      	mov	fp, r2
   159c0:	3202      	adds	r2, #2
   159c2:	e7b1      	b.n	15928 <__aeabi_ddiv+0x7c>
   159c4:	4659      	mov	r1, fp
   159c6:	4301      	orrs	r1, r0
   159c8:	d01e      	beq.n	15a08 <__aeabi_ddiv+0x15c>
   159ca:	465b      	mov	r3, fp
   159cc:	2b00      	cmp	r3, #0
   159ce:	d100      	bne.n	159d2 <__aeabi_ddiv+0x126>
   159d0:	e19e      	b.n	15d10 <__aeabi_ddiv+0x464>
   159d2:	4658      	mov	r0, fp
   159d4:	f001 fabe 	bl	16f54 <__clzsi2>
   159d8:	0003      	movs	r3, r0
   159da:	3b0b      	subs	r3, #11
   159dc:	2b1c      	cmp	r3, #28
   159de:	dd00      	ble.n	159e2 <__aeabi_ddiv+0x136>
   159e0:	e18f      	b.n	15d02 <__aeabi_ddiv+0x456>
   159e2:	0002      	movs	r2, r0
   159e4:	4659      	mov	r1, fp
   159e6:	3a08      	subs	r2, #8
   159e8:	4091      	lsls	r1, r2
   159ea:	468b      	mov	fp, r1
   159ec:	211d      	movs	r1, #29
   159ee:	1acb      	subs	r3, r1, r3
   159f0:	4651      	mov	r1, sl
   159f2:	40d9      	lsrs	r1, r3
   159f4:	000b      	movs	r3, r1
   159f6:	4659      	mov	r1, fp
   159f8:	430b      	orrs	r3, r1
   159fa:	4651      	mov	r1, sl
   159fc:	469b      	mov	fp, r3
   159fe:	4091      	lsls	r1, r2
   15a00:	4b26      	ldr	r3, [pc, #152]	; (15a9c <__aeabi_ddiv+0x1f0>)
   15a02:	2200      	movs	r2, #0
   15a04:	1a1b      	subs	r3, r3, r0
   15a06:	e78f      	b.n	15928 <__aeabi_ddiv+0x7c>
   15a08:	2300      	movs	r3, #0
   15a0a:	2201      	movs	r2, #1
   15a0c:	469b      	mov	fp, r3
   15a0e:	e78b      	b.n	15928 <__aeabi_ddiv+0x7c>
   15a10:	4651      	mov	r1, sl
   15a12:	2203      	movs	r2, #3
   15a14:	e788      	b.n	15928 <__aeabi_ddiv+0x7c>
   15a16:	2300      	movs	r3, #0
   15a18:	4698      	mov	r8, r3
   15a1a:	3301      	adds	r3, #1
   15a1c:	2604      	movs	r6, #4
   15a1e:	2400      	movs	r4, #0
   15a20:	9303      	str	r3, [sp, #12]
   15a22:	e767      	b.n	158f4 <__aeabi_ddiv+0x48>
   15a24:	2303      	movs	r3, #3
   15a26:	46b1      	mov	r9, r6
   15a28:	9303      	str	r3, [sp, #12]
   15a2a:	260c      	movs	r6, #12
   15a2c:	e762      	b.n	158f4 <__aeabi_ddiv+0x48>
   15a2e:	2a03      	cmp	r2, #3
   15a30:	d100      	bne.n	15a34 <__aeabi_ddiv+0x188>
   15a32:	e25c      	b.n	15eee <__aeabi_ddiv+0x642>
   15a34:	9b01      	ldr	r3, [sp, #4]
   15a36:	2a01      	cmp	r2, #1
   15a38:	d000      	beq.n	15a3c <__aeabi_ddiv+0x190>
   15a3a:	e1e4      	b.n	15e06 <__aeabi_ddiv+0x55a>
   15a3c:	4013      	ands	r3, r2
   15a3e:	469c      	mov	ip, r3
   15a40:	2300      	movs	r3, #0
   15a42:	2400      	movs	r4, #0
   15a44:	2200      	movs	r2, #0
   15a46:	4698      	mov	r8, r3
   15a48:	2100      	movs	r1, #0
   15a4a:	0312      	lsls	r2, r2, #12
   15a4c:	0b13      	lsrs	r3, r2, #12
   15a4e:	0d0a      	lsrs	r2, r1, #20
   15a50:	0512      	lsls	r2, r2, #20
   15a52:	431a      	orrs	r2, r3
   15a54:	0523      	lsls	r3, r4, #20
   15a56:	4c12      	ldr	r4, [pc, #72]	; (15aa0 <__aeabi_ddiv+0x1f4>)
   15a58:	4640      	mov	r0, r8
   15a5a:	4022      	ands	r2, r4
   15a5c:	4313      	orrs	r3, r2
   15a5e:	4662      	mov	r2, ip
   15a60:	005b      	lsls	r3, r3, #1
   15a62:	07d2      	lsls	r2, r2, #31
   15a64:	085b      	lsrs	r3, r3, #1
   15a66:	4313      	orrs	r3, r2
   15a68:	0019      	movs	r1, r3
   15a6a:	b007      	add	sp, #28
   15a6c:	bc3c      	pop	{r2, r3, r4, r5}
   15a6e:	4690      	mov	r8, r2
   15a70:	4699      	mov	r9, r3
   15a72:	46a2      	mov	sl, r4
   15a74:	46ab      	mov	fp, r5
   15a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a78:	2300      	movs	r3, #0
   15a7a:	2280      	movs	r2, #128	; 0x80
   15a7c:	469c      	mov	ip, r3
   15a7e:	0312      	lsls	r2, r2, #12
   15a80:	4698      	mov	r8, r3
   15a82:	4c03      	ldr	r4, [pc, #12]	; (15a90 <__aeabi_ddiv+0x1e4>)
   15a84:	e7e0      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15a86:	2300      	movs	r3, #0
   15a88:	4c01      	ldr	r4, [pc, #4]	; (15a90 <__aeabi_ddiv+0x1e4>)
   15a8a:	2200      	movs	r2, #0
   15a8c:	4698      	mov	r8, r3
   15a8e:	e7db      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15a90:	000007ff 	.word	0x000007ff
   15a94:	fffffc01 	.word	0xfffffc01
   15a98:	000178a0 	.word	0x000178a0
   15a9c:	fffffc0d 	.word	0xfffffc0d
   15aa0:	800fffff 	.word	0x800fffff
   15aa4:	45d9      	cmp	r9, fp
   15aa6:	d900      	bls.n	15aaa <__aeabi_ddiv+0x1fe>
   15aa8:	e139      	b.n	15d1e <__aeabi_ddiv+0x472>
   15aaa:	d100      	bne.n	15aae <__aeabi_ddiv+0x202>
   15aac:	e134      	b.n	15d18 <__aeabi_ddiv+0x46c>
   15aae:	2300      	movs	r3, #0
   15ab0:	4646      	mov	r6, r8
   15ab2:	464d      	mov	r5, r9
   15ab4:	469a      	mov	sl, r3
   15ab6:	3c01      	subs	r4, #1
   15ab8:	465b      	mov	r3, fp
   15aba:	0e0a      	lsrs	r2, r1, #24
   15abc:	021b      	lsls	r3, r3, #8
   15abe:	431a      	orrs	r2, r3
   15ac0:	020b      	lsls	r3, r1, #8
   15ac2:	0c17      	lsrs	r7, r2, #16
   15ac4:	9303      	str	r3, [sp, #12]
   15ac6:	0413      	lsls	r3, r2, #16
   15ac8:	0c1b      	lsrs	r3, r3, #16
   15aca:	0039      	movs	r1, r7
   15acc:	0028      	movs	r0, r5
   15ace:	4690      	mov	r8, r2
   15ad0:	9301      	str	r3, [sp, #4]
   15ad2:	f7fe fa99 	bl	14008 <__udivsi3>
   15ad6:	0002      	movs	r2, r0
   15ad8:	9b01      	ldr	r3, [sp, #4]
   15ada:	4683      	mov	fp, r0
   15adc:	435a      	muls	r2, r3
   15ade:	0028      	movs	r0, r5
   15ae0:	0039      	movs	r1, r7
   15ae2:	4691      	mov	r9, r2
   15ae4:	f7fe fb16 	bl	14114 <__aeabi_uidivmod>
   15ae8:	0c35      	lsrs	r5, r6, #16
   15aea:	0409      	lsls	r1, r1, #16
   15aec:	430d      	orrs	r5, r1
   15aee:	45a9      	cmp	r9, r5
   15af0:	d90d      	bls.n	15b0e <__aeabi_ddiv+0x262>
   15af2:	465b      	mov	r3, fp
   15af4:	4445      	add	r5, r8
   15af6:	3b01      	subs	r3, #1
   15af8:	45a8      	cmp	r8, r5
   15afa:	d900      	bls.n	15afe <__aeabi_ddiv+0x252>
   15afc:	e13a      	b.n	15d74 <__aeabi_ddiv+0x4c8>
   15afe:	45a9      	cmp	r9, r5
   15b00:	d800      	bhi.n	15b04 <__aeabi_ddiv+0x258>
   15b02:	e137      	b.n	15d74 <__aeabi_ddiv+0x4c8>
   15b04:	2302      	movs	r3, #2
   15b06:	425b      	negs	r3, r3
   15b08:	469c      	mov	ip, r3
   15b0a:	4445      	add	r5, r8
   15b0c:	44e3      	add	fp, ip
   15b0e:	464b      	mov	r3, r9
   15b10:	1aeb      	subs	r3, r5, r3
   15b12:	0039      	movs	r1, r7
   15b14:	0018      	movs	r0, r3
   15b16:	9304      	str	r3, [sp, #16]
   15b18:	f7fe fa76 	bl	14008 <__udivsi3>
   15b1c:	9b01      	ldr	r3, [sp, #4]
   15b1e:	0005      	movs	r5, r0
   15b20:	4343      	muls	r3, r0
   15b22:	0039      	movs	r1, r7
   15b24:	9804      	ldr	r0, [sp, #16]
   15b26:	4699      	mov	r9, r3
   15b28:	f7fe faf4 	bl	14114 <__aeabi_uidivmod>
   15b2c:	0433      	lsls	r3, r6, #16
   15b2e:	0409      	lsls	r1, r1, #16
   15b30:	0c1b      	lsrs	r3, r3, #16
   15b32:	430b      	orrs	r3, r1
   15b34:	4599      	cmp	r9, r3
   15b36:	d909      	bls.n	15b4c <__aeabi_ddiv+0x2a0>
   15b38:	4443      	add	r3, r8
   15b3a:	1e6a      	subs	r2, r5, #1
   15b3c:	4598      	cmp	r8, r3
   15b3e:	d900      	bls.n	15b42 <__aeabi_ddiv+0x296>
   15b40:	e11a      	b.n	15d78 <__aeabi_ddiv+0x4cc>
   15b42:	4599      	cmp	r9, r3
   15b44:	d800      	bhi.n	15b48 <__aeabi_ddiv+0x29c>
   15b46:	e117      	b.n	15d78 <__aeabi_ddiv+0x4cc>
   15b48:	3d02      	subs	r5, #2
   15b4a:	4443      	add	r3, r8
   15b4c:	464a      	mov	r2, r9
   15b4e:	1a9b      	subs	r3, r3, r2
   15b50:	465a      	mov	r2, fp
   15b52:	0412      	lsls	r2, r2, #16
   15b54:	432a      	orrs	r2, r5
   15b56:	9903      	ldr	r1, [sp, #12]
   15b58:	4693      	mov	fp, r2
   15b5a:	0c10      	lsrs	r0, r2, #16
   15b5c:	0c0a      	lsrs	r2, r1, #16
   15b5e:	4691      	mov	r9, r2
   15b60:	0409      	lsls	r1, r1, #16
   15b62:	465a      	mov	r2, fp
   15b64:	0c09      	lsrs	r1, r1, #16
   15b66:	464e      	mov	r6, r9
   15b68:	000d      	movs	r5, r1
   15b6a:	0412      	lsls	r2, r2, #16
   15b6c:	0c12      	lsrs	r2, r2, #16
   15b6e:	4345      	muls	r5, r0
   15b70:	9105      	str	r1, [sp, #20]
   15b72:	4351      	muls	r1, r2
   15b74:	4372      	muls	r2, r6
   15b76:	4370      	muls	r0, r6
   15b78:	1952      	adds	r2, r2, r5
   15b7a:	0c0e      	lsrs	r6, r1, #16
   15b7c:	18b2      	adds	r2, r6, r2
   15b7e:	4295      	cmp	r5, r2
   15b80:	d903      	bls.n	15b8a <__aeabi_ddiv+0x2de>
   15b82:	2580      	movs	r5, #128	; 0x80
   15b84:	026d      	lsls	r5, r5, #9
   15b86:	46ac      	mov	ip, r5
   15b88:	4460      	add	r0, ip
   15b8a:	0c15      	lsrs	r5, r2, #16
   15b8c:	0409      	lsls	r1, r1, #16
   15b8e:	0412      	lsls	r2, r2, #16
   15b90:	0c09      	lsrs	r1, r1, #16
   15b92:	1828      	adds	r0, r5, r0
   15b94:	1852      	adds	r2, r2, r1
   15b96:	4283      	cmp	r3, r0
   15b98:	d200      	bcs.n	15b9c <__aeabi_ddiv+0x2f0>
   15b9a:	e0ce      	b.n	15d3a <__aeabi_ddiv+0x48e>
   15b9c:	d100      	bne.n	15ba0 <__aeabi_ddiv+0x2f4>
   15b9e:	e0c8      	b.n	15d32 <__aeabi_ddiv+0x486>
   15ba0:	1a1d      	subs	r5, r3, r0
   15ba2:	4653      	mov	r3, sl
   15ba4:	1a9e      	subs	r6, r3, r2
   15ba6:	45b2      	cmp	sl, r6
   15ba8:	4192      	sbcs	r2, r2
   15baa:	4252      	negs	r2, r2
   15bac:	1aab      	subs	r3, r5, r2
   15bae:	469a      	mov	sl, r3
   15bb0:	4598      	cmp	r8, r3
   15bb2:	d100      	bne.n	15bb6 <__aeabi_ddiv+0x30a>
   15bb4:	e117      	b.n	15de6 <__aeabi_ddiv+0x53a>
   15bb6:	0039      	movs	r1, r7
   15bb8:	0018      	movs	r0, r3
   15bba:	f7fe fa25 	bl	14008 <__udivsi3>
   15bbe:	9b01      	ldr	r3, [sp, #4]
   15bc0:	0005      	movs	r5, r0
   15bc2:	4343      	muls	r3, r0
   15bc4:	0039      	movs	r1, r7
   15bc6:	4650      	mov	r0, sl
   15bc8:	9304      	str	r3, [sp, #16]
   15bca:	f7fe faa3 	bl	14114 <__aeabi_uidivmod>
   15bce:	9804      	ldr	r0, [sp, #16]
   15bd0:	040b      	lsls	r3, r1, #16
   15bd2:	0c31      	lsrs	r1, r6, #16
   15bd4:	4319      	orrs	r1, r3
   15bd6:	4288      	cmp	r0, r1
   15bd8:	d909      	bls.n	15bee <__aeabi_ddiv+0x342>
   15bda:	4441      	add	r1, r8
   15bdc:	1e6b      	subs	r3, r5, #1
   15bde:	4588      	cmp	r8, r1
   15be0:	d900      	bls.n	15be4 <__aeabi_ddiv+0x338>
   15be2:	e107      	b.n	15df4 <__aeabi_ddiv+0x548>
   15be4:	4288      	cmp	r0, r1
   15be6:	d800      	bhi.n	15bea <__aeabi_ddiv+0x33e>
   15be8:	e104      	b.n	15df4 <__aeabi_ddiv+0x548>
   15bea:	3d02      	subs	r5, #2
   15bec:	4441      	add	r1, r8
   15bee:	9b04      	ldr	r3, [sp, #16]
   15bf0:	1acb      	subs	r3, r1, r3
   15bf2:	0018      	movs	r0, r3
   15bf4:	0039      	movs	r1, r7
   15bf6:	9304      	str	r3, [sp, #16]
   15bf8:	f7fe fa06 	bl	14008 <__udivsi3>
   15bfc:	9b01      	ldr	r3, [sp, #4]
   15bfe:	4682      	mov	sl, r0
   15c00:	4343      	muls	r3, r0
   15c02:	0039      	movs	r1, r7
   15c04:	9804      	ldr	r0, [sp, #16]
   15c06:	9301      	str	r3, [sp, #4]
   15c08:	f7fe fa84 	bl	14114 <__aeabi_uidivmod>
   15c0c:	9801      	ldr	r0, [sp, #4]
   15c0e:	040b      	lsls	r3, r1, #16
   15c10:	0431      	lsls	r1, r6, #16
   15c12:	0c09      	lsrs	r1, r1, #16
   15c14:	4319      	orrs	r1, r3
   15c16:	4288      	cmp	r0, r1
   15c18:	d90d      	bls.n	15c36 <__aeabi_ddiv+0x38a>
   15c1a:	4653      	mov	r3, sl
   15c1c:	4441      	add	r1, r8
   15c1e:	3b01      	subs	r3, #1
   15c20:	4588      	cmp	r8, r1
   15c22:	d900      	bls.n	15c26 <__aeabi_ddiv+0x37a>
   15c24:	e0e8      	b.n	15df8 <__aeabi_ddiv+0x54c>
   15c26:	4288      	cmp	r0, r1
   15c28:	d800      	bhi.n	15c2c <__aeabi_ddiv+0x380>
   15c2a:	e0e5      	b.n	15df8 <__aeabi_ddiv+0x54c>
   15c2c:	2302      	movs	r3, #2
   15c2e:	425b      	negs	r3, r3
   15c30:	469c      	mov	ip, r3
   15c32:	4441      	add	r1, r8
   15c34:	44e2      	add	sl, ip
   15c36:	9b01      	ldr	r3, [sp, #4]
   15c38:	042d      	lsls	r5, r5, #16
   15c3a:	1ace      	subs	r6, r1, r3
   15c3c:	4651      	mov	r1, sl
   15c3e:	4329      	orrs	r1, r5
   15c40:	9d05      	ldr	r5, [sp, #20]
   15c42:	464f      	mov	r7, r9
   15c44:	002a      	movs	r2, r5
   15c46:	040b      	lsls	r3, r1, #16
   15c48:	0c08      	lsrs	r0, r1, #16
   15c4a:	0c1b      	lsrs	r3, r3, #16
   15c4c:	435a      	muls	r2, r3
   15c4e:	4345      	muls	r5, r0
   15c50:	437b      	muls	r3, r7
   15c52:	4378      	muls	r0, r7
   15c54:	195b      	adds	r3, r3, r5
   15c56:	0c17      	lsrs	r7, r2, #16
   15c58:	18fb      	adds	r3, r7, r3
   15c5a:	429d      	cmp	r5, r3
   15c5c:	d903      	bls.n	15c66 <__aeabi_ddiv+0x3ba>
   15c5e:	2580      	movs	r5, #128	; 0x80
   15c60:	026d      	lsls	r5, r5, #9
   15c62:	46ac      	mov	ip, r5
   15c64:	4460      	add	r0, ip
   15c66:	0c1d      	lsrs	r5, r3, #16
   15c68:	0412      	lsls	r2, r2, #16
   15c6a:	041b      	lsls	r3, r3, #16
   15c6c:	0c12      	lsrs	r2, r2, #16
   15c6e:	1828      	adds	r0, r5, r0
   15c70:	189b      	adds	r3, r3, r2
   15c72:	4286      	cmp	r6, r0
   15c74:	d200      	bcs.n	15c78 <__aeabi_ddiv+0x3cc>
   15c76:	e093      	b.n	15da0 <__aeabi_ddiv+0x4f4>
   15c78:	d100      	bne.n	15c7c <__aeabi_ddiv+0x3d0>
   15c7a:	e08e      	b.n	15d9a <__aeabi_ddiv+0x4ee>
   15c7c:	2301      	movs	r3, #1
   15c7e:	4319      	orrs	r1, r3
   15c80:	4ba0      	ldr	r3, [pc, #640]	; (15f04 <__aeabi_ddiv+0x658>)
   15c82:	18e3      	adds	r3, r4, r3
   15c84:	2b00      	cmp	r3, #0
   15c86:	dc00      	bgt.n	15c8a <__aeabi_ddiv+0x3de>
   15c88:	e099      	b.n	15dbe <__aeabi_ddiv+0x512>
   15c8a:	074a      	lsls	r2, r1, #29
   15c8c:	d000      	beq.n	15c90 <__aeabi_ddiv+0x3e4>
   15c8e:	e09e      	b.n	15dce <__aeabi_ddiv+0x522>
   15c90:	465a      	mov	r2, fp
   15c92:	01d2      	lsls	r2, r2, #7
   15c94:	d506      	bpl.n	15ca4 <__aeabi_ddiv+0x3f8>
   15c96:	465a      	mov	r2, fp
   15c98:	4b9b      	ldr	r3, [pc, #620]	; (15f08 <__aeabi_ddiv+0x65c>)
   15c9a:	401a      	ands	r2, r3
   15c9c:	2380      	movs	r3, #128	; 0x80
   15c9e:	4693      	mov	fp, r2
   15ca0:	00db      	lsls	r3, r3, #3
   15ca2:	18e3      	adds	r3, r4, r3
   15ca4:	4a99      	ldr	r2, [pc, #612]	; (15f0c <__aeabi_ddiv+0x660>)
   15ca6:	4293      	cmp	r3, r2
   15ca8:	dd68      	ble.n	15d7c <__aeabi_ddiv+0x4d0>
   15caa:	2301      	movs	r3, #1
   15cac:	9a02      	ldr	r2, [sp, #8]
   15cae:	4c98      	ldr	r4, [pc, #608]	; (15f10 <__aeabi_ddiv+0x664>)
   15cb0:	401a      	ands	r2, r3
   15cb2:	2300      	movs	r3, #0
   15cb4:	4694      	mov	ip, r2
   15cb6:	4698      	mov	r8, r3
   15cb8:	2200      	movs	r2, #0
   15cba:	e6c5      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15cbc:	2280      	movs	r2, #128	; 0x80
   15cbe:	464b      	mov	r3, r9
   15cc0:	0312      	lsls	r2, r2, #12
   15cc2:	4213      	tst	r3, r2
   15cc4:	d00a      	beq.n	15cdc <__aeabi_ddiv+0x430>
   15cc6:	465b      	mov	r3, fp
   15cc8:	4213      	tst	r3, r2
   15cca:	d106      	bne.n	15cda <__aeabi_ddiv+0x42e>
   15ccc:	431a      	orrs	r2, r3
   15cce:	0312      	lsls	r2, r2, #12
   15cd0:	0b12      	lsrs	r2, r2, #12
   15cd2:	46ac      	mov	ip, r5
   15cd4:	4688      	mov	r8, r1
   15cd6:	4c8e      	ldr	r4, [pc, #568]	; (15f10 <__aeabi_ddiv+0x664>)
   15cd8:	e6b6      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15cda:	464b      	mov	r3, r9
   15cdc:	431a      	orrs	r2, r3
   15cde:	0312      	lsls	r2, r2, #12
   15ce0:	0b12      	lsrs	r2, r2, #12
   15ce2:	46bc      	mov	ip, r7
   15ce4:	4c8a      	ldr	r4, [pc, #552]	; (15f10 <__aeabi_ddiv+0x664>)
   15ce6:	e6af      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15ce8:	0003      	movs	r3, r0
   15cea:	465a      	mov	r2, fp
   15cec:	3b28      	subs	r3, #40	; 0x28
   15cee:	409a      	lsls	r2, r3
   15cf0:	2300      	movs	r3, #0
   15cf2:	4691      	mov	r9, r2
   15cf4:	4698      	mov	r8, r3
   15cf6:	e657      	b.n	159a8 <__aeabi_ddiv+0xfc>
   15cf8:	4658      	mov	r0, fp
   15cfa:	f001 f92b 	bl	16f54 <__clzsi2>
   15cfe:	3020      	adds	r0, #32
   15d00:	e640      	b.n	15984 <__aeabi_ddiv+0xd8>
   15d02:	0003      	movs	r3, r0
   15d04:	4652      	mov	r2, sl
   15d06:	3b28      	subs	r3, #40	; 0x28
   15d08:	409a      	lsls	r2, r3
   15d0a:	2100      	movs	r1, #0
   15d0c:	4693      	mov	fp, r2
   15d0e:	e677      	b.n	15a00 <__aeabi_ddiv+0x154>
   15d10:	f001 f920 	bl	16f54 <__clzsi2>
   15d14:	3020      	adds	r0, #32
   15d16:	e65f      	b.n	159d8 <__aeabi_ddiv+0x12c>
   15d18:	4588      	cmp	r8, r1
   15d1a:	d200      	bcs.n	15d1e <__aeabi_ddiv+0x472>
   15d1c:	e6c7      	b.n	15aae <__aeabi_ddiv+0x202>
   15d1e:	464b      	mov	r3, r9
   15d20:	07de      	lsls	r6, r3, #31
   15d22:	085d      	lsrs	r5, r3, #1
   15d24:	4643      	mov	r3, r8
   15d26:	085b      	lsrs	r3, r3, #1
   15d28:	431e      	orrs	r6, r3
   15d2a:	4643      	mov	r3, r8
   15d2c:	07db      	lsls	r3, r3, #31
   15d2e:	469a      	mov	sl, r3
   15d30:	e6c2      	b.n	15ab8 <__aeabi_ddiv+0x20c>
   15d32:	2500      	movs	r5, #0
   15d34:	4592      	cmp	sl, r2
   15d36:	d300      	bcc.n	15d3a <__aeabi_ddiv+0x48e>
   15d38:	e733      	b.n	15ba2 <__aeabi_ddiv+0x2f6>
   15d3a:	9e03      	ldr	r6, [sp, #12]
   15d3c:	4659      	mov	r1, fp
   15d3e:	46b4      	mov	ip, r6
   15d40:	44e2      	add	sl, ip
   15d42:	45b2      	cmp	sl, r6
   15d44:	41ad      	sbcs	r5, r5
   15d46:	426d      	negs	r5, r5
   15d48:	4445      	add	r5, r8
   15d4a:	18eb      	adds	r3, r5, r3
   15d4c:	3901      	subs	r1, #1
   15d4e:	4598      	cmp	r8, r3
   15d50:	d207      	bcs.n	15d62 <__aeabi_ddiv+0x4b6>
   15d52:	4298      	cmp	r0, r3
   15d54:	d900      	bls.n	15d58 <__aeabi_ddiv+0x4ac>
   15d56:	e07f      	b.n	15e58 <__aeabi_ddiv+0x5ac>
   15d58:	d100      	bne.n	15d5c <__aeabi_ddiv+0x4b0>
   15d5a:	e0bc      	b.n	15ed6 <__aeabi_ddiv+0x62a>
   15d5c:	1a1d      	subs	r5, r3, r0
   15d5e:	468b      	mov	fp, r1
   15d60:	e71f      	b.n	15ba2 <__aeabi_ddiv+0x2f6>
   15d62:	4598      	cmp	r8, r3
   15d64:	d1fa      	bne.n	15d5c <__aeabi_ddiv+0x4b0>
   15d66:	9d03      	ldr	r5, [sp, #12]
   15d68:	4555      	cmp	r5, sl
   15d6a:	d9f2      	bls.n	15d52 <__aeabi_ddiv+0x4a6>
   15d6c:	4643      	mov	r3, r8
   15d6e:	468b      	mov	fp, r1
   15d70:	1a1d      	subs	r5, r3, r0
   15d72:	e716      	b.n	15ba2 <__aeabi_ddiv+0x2f6>
   15d74:	469b      	mov	fp, r3
   15d76:	e6ca      	b.n	15b0e <__aeabi_ddiv+0x262>
   15d78:	0015      	movs	r5, r2
   15d7a:	e6e7      	b.n	15b4c <__aeabi_ddiv+0x2a0>
   15d7c:	465a      	mov	r2, fp
   15d7e:	08c9      	lsrs	r1, r1, #3
   15d80:	0752      	lsls	r2, r2, #29
   15d82:	430a      	orrs	r2, r1
   15d84:	055b      	lsls	r3, r3, #21
   15d86:	4690      	mov	r8, r2
   15d88:	0d5c      	lsrs	r4, r3, #21
   15d8a:	465a      	mov	r2, fp
   15d8c:	2301      	movs	r3, #1
   15d8e:	9902      	ldr	r1, [sp, #8]
   15d90:	0252      	lsls	r2, r2, #9
   15d92:	4019      	ands	r1, r3
   15d94:	0b12      	lsrs	r2, r2, #12
   15d96:	468c      	mov	ip, r1
   15d98:	e656      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d100      	bne.n	15da0 <__aeabi_ddiv+0x4f4>
   15d9e:	e76f      	b.n	15c80 <__aeabi_ddiv+0x3d4>
   15da0:	4446      	add	r6, r8
   15da2:	1e4a      	subs	r2, r1, #1
   15da4:	45b0      	cmp	r8, r6
   15da6:	d929      	bls.n	15dfc <__aeabi_ddiv+0x550>
   15da8:	0011      	movs	r1, r2
   15daa:	4286      	cmp	r6, r0
   15dac:	d000      	beq.n	15db0 <__aeabi_ddiv+0x504>
   15dae:	e765      	b.n	15c7c <__aeabi_ddiv+0x3d0>
   15db0:	9a03      	ldr	r2, [sp, #12]
   15db2:	4293      	cmp	r3, r2
   15db4:	d000      	beq.n	15db8 <__aeabi_ddiv+0x50c>
   15db6:	e761      	b.n	15c7c <__aeabi_ddiv+0x3d0>
   15db8:	e762      	b.n	15c80 <__aeabi_ddiv+0x3d4>
   15dba:	2101      	movs	r1, #1
   15dbc:	4249      	negs	r1, r1
   15dbe:	2001      	movs	r0, #1
   15dc0:	1ac2      	subs	r2, r0, r3
   15dc2:	2a38      	cmp	r2, #56	; 0x38
   15dc4:	dd21      	ble.n	15e0a <__aeabi_ddiv+0x55e>
   15dc6:	9b02      	ldr	r3, [sp, #8]
   15dc8:	4003      	ands	r3, r0
   15dca:	469c      	mov	ip, r3
   15dcc:	e638      	b.n	15a40 <__aeabi_ddiv+0x194>
   15dce:	220f      	movs	r2, #15
   15dd0:	400a      	ands	r2, r1
   15dd2:	2a04      	cmp	r2, #4
   15dd4:	d100      	bne.n	15dd8 <__aeabi_ddiv+0x52c>
   15dd6:	e75b      	b.n	15c90 <__aeabi_ddiv+0x3e4>
   15dd8:	000a      	movs	r2, r1
   15dda:	1d11      	adds	r1, r2, #4
   15ddc:	4291      	cmp	r1, r2
   15dde:	4192      	sbcs	r2, r2
   15de0:	4252      	negs	r2, r2
   15de2:	4493      	add	fp, r2
   15de4:	e754      	b.n	15c90 <__aeabi_ddiv+0x3e4>
   15de6:	4b47      	ldr	r3, [pc, #284]	; (15f04 <__aeabi_ddiv+0x658>)
   15de8:	18e3      	adds	r3, r4, r3
   15dea:	2b00      	cmp	r3, #0
   15dec:	dde5      	ble.n	15dba <__aeabi_ddiv+0x50e>
   15dee:	2201      	movs	r2, #1
   15df0:	4252      	negs	r2, r2
   15df2:	e7f2      	b.n	15dda <__aeabi_ddiv+0x52e>
   15df4:	001d      	movs	r5, r3
   15df6:	e6fa      	b.n	15bee <__aeabi_ddiv+0x342>
   15df8:	469a      	mov	sl, r3
   15dfa:	e71c      	b.n	15c36 <__aeabi_ddiv+0x38a>
   15dfc:	42b0      	cmp	r0, r6
   15dfe:	d839      	bhi.n	15e74 <__aeabi_ddiv+0x5c8>
   15e00:	d06e      	beq.n	15ee0 <__aeabi_ddiv+0x634>
   15e02:	0011      	movs	r1, r2
   15e04:	e73a      	b.n	15c7c <__aeabi_ddiv+0x3d0>
   15e06:	9302      	str	r3, [sp, #8]
   15e08:	e73a      	b.n	15c80 <__aeabi_ddiv+0x3d4>
   15e0a:	2a1f      	cmp	r2, #31
   15e0c:	dc3c      	bgt.n	15e88 <__aeabi_ddiv+0x5dc>
   15e0e:	2320      	movs	r3, #32
   15e10:	1a9b      	subs	r3, r3, r2
   15e12:	000c      	movs	r4, r1
   15e14:	4658      	mov	r0, fp
   15e16:	4099      	lsls	r1, r3
   15e18:	4098      	lsls	r0, r3
   15e1a:	1e4b      	subs	r3, r1, #1
   15e1c:	4199      	sbcs	r1, r3
   15e1e:	465b      	mov	r3, fp
   15e20:	40d4      	lsrs	r4, r2
   15e22:	40d3      	lsrs	r3, r2
   15e24:	4320      	orrs	r0, r4
   15e26:	4308      	orrs	r0, r1
   15e28:	001a      	movs	r2, r3
   15e2a:	0743      	lsls	r3, r0, #29
   15e2c:	d009      	beq.n	15e42 <__aeabi_ddiv+0x596>
   15e2e:	230f      	movs	r3, #15
   15e30:	4003      	ands	r3, r0
   15e32:	2b04      	cmp	r3, #4
   15e34:	d005      	beq.n	15e42 <__aeabi_ddiv+0x596>
   15e36:	0001      	movs	r1, r0
   15e38:	1d08      	adds	r0, r1, #4
   15e3a:	4288      	cmp	r0, r1
   15e3c:	419b      	sbcs	r3, r3
   15e3e:	425b      	negs	r3, r3
   15e40:	18d2      	adds	r2, r2, r3
   15e42:	0213      	lsls	r3, r2, #8
   15e44:	d53a      	bpl.n	15ebc <__aeabi_ddiv+0x610>
   15e46:	2301      	movs	r3, #1
   15e48:	9a02      	ldr	r2, [sp, #8]
   15e4a:	2401      	movs	r4, #1
   15e4c:	401a      	ands	r2, r3
   15e4e:	2300      	movs	r3, #0
   15e50:	4694      	mov	ip, r2
   15e52:	4698      	mov	r8, r3
   15e54:	2200      	movs	r2, #0
   15e56:	e5f7      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15e58:	2102      	movs	r1, #2
   15e5a:	4249      	negs	r1, r1
   15e5c:	468c      	mov	ip, r1
   15e5e:	9d03      	ldr	r5, [sp, #12]
   15e60:	44e3      	add	fp, ip
   15e62:	46ac      	mov	ip, r5
   15e64:	44e2      	add	sl, ip
   15e66:	45aa      	cmp	sl, r5
   15e68:	41ad      	sbcs	r5, r5
   15e6a:	426d      	negs	r5, r5
   15e6c:	4445      	add	r5, r8
   15e6e:	18ed      	adds	r5, r5, r3
   15e70:	1a2d      	subs	r5, r5, r0
   15e72:	e696      	b.n	15ba2 <__aeabi_ddiv+0x2f6>
   15e74:	1e8a      	subs	r2, r1, #2
   15e76:	9903      	ldr	r1, [sp, #12]
   15e78:	004d      	lsls	r5, r1, #1
   15e7a:	428d      	cmp	r5, r1
   15e7c:	4189      	sbcs	r1, r1
   15e7e:	4249      	negs	r1, r1
   15e80:	4441      	add	r1, r8
   15e82:	1876      	adds	r6, r6, r1
   15e84:	9503      	str	r5, [sp, #12]
   15e86:	e78f      	b.n	15da8 <__aeabi_ddiv+0x4fc>
   15e88:	201f      	movs	r0, #31
   15e8a:	4240      	negs	r0, r0
   15e8c:	1ac3      	subs	r3, r0, r3
   15e8e:	4658      	mov	r0, fp
   15e90:	40d8      	lsrs	r0, r3
   15e92:	0003      	movs	r3, r0
   15e94:	2a20      	cmp	r2, #32
   15e96:	d028      	beq.n	15eea <__aeabi_ddiv+0x63e>
   15e98:	2040      	movs	r0, #64	; 0x40
   15e9a:	465d      	mov	r5, fp
   15e9c:	1a82      	subs	r2, r0, r2
   15e9e:	4095      	lsls	r5, r2
   15ea0:	4329      	orrs	r1, r5
   15ea2:	1e4a      	subs	r2, r1, #1
   15ea4:	4191      	sbcs	r1, r2
   15ea6:	4319      	orrs	r1, r3
   15ea8:	2307      	movs	r3, #7
   15eaa:	2200      	movs	r2, #0
   15eac:	400b      	ands	r3, r1
   15eae:	d009      	beq.n	15ec4 <__aeabi_ddiv+0x618>
   15eb0:	230f      	movs	r3, #15
   15eb2:	2200      	movs	r2, #0
   15eb4:	400b      	ands	r3, r1
   15eb6:	0008      	movs	r0, r1
   15eb8:	2b04      	cmp	r3, #4
   15eba:	d1bd      	bne.n	15e38 <__aeabi_ddiv+0x58c>
   15ebc:	0001      	movs	r1, r0
   15ebe:	0753      	lsls	r3, r2, #29
   15ec0:	0252      	lsls	r2, r2, #9
   15ec2:	0b12      	lsrs	r2, r2, #12
   15ec4:	08c9      	lsrs	r1, r1, #3
   15ec6:	4319      	orrs	r1, r3
   15ec8:	2301      	movs	r3, #1
   15eca:	4688      	mov	r8, r1
   15ecc:	9902      	ldr	r1, [sp, #8]
   15ece:	2400      	movs	r4, #0
   15ed0:	4019      	ands	r1, r3
   15ed2:	468c      	mov	ip, r1
   15ed4:	e5b8      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15ed6:	4552      	cmp	r2, sl
   15ed8:	d8be      	bhi.n	15e58 <__aeabi_ddiv+0x5ac>
   15eda:	468b      	mov	fp, r1
   15edc:	2500      	movs	r5, #0
   15ede:	e660      	b.n	15ba2 <__aeabi_ddiv+0x2f6>
   15ee0:	9d03      	ldr	r5, [sp, #12]
   15ee2:	429d      	cmp	r5, r3
   15ee4:	d3c6      	bcc.n	15e74 <__aeabi_ddiv+0x5c8>
   15ee6:	0011      	movs	r1, r2
   15ee8:	e762      	b.n	15db0 <__aeabi_ddiv+0x504>
   15eea:	2500      	movs	r5, #0
   15eec:	e7d8      	b.n	15ea0 <__aeabi_ddiv+0x5f4>
   15eee:	2280      	movs	r2, #128	; 0x80
   15ef0:	465b      	mov	r3, fp
   15ef2:	0312      	lsls	r2, r2, #12
   15ef4:	431a      	orrs	r2, r3
   15ef6:	9b01      	ldr	r3, [sp, #4]
   15ef8:	0312      	lsls	r2, r2, #12
   15efa:	0b12      	lsrs	r2, r2, #12
   15efc:	469c      	mov	ip, r3
   15efe:	4688      	mov	r8, r1
   15f00:	4c03      	ldr	r4, [pc, #12]	; (15f10 <__aeabi_ddiv+0x664>)
   15f02:	e5a1      	b.n	15a48 <__aeabi_ddiv+0x19c>
   15f04:	000003ff 	.word	0x000003ff
   15f08:	feffffff 	.word	0xfeffffff
   15f0c:	000007fe 	.word	0x000007fe
   15f10:	000007ff 	.word	0x000007ff

00015f14 <__eqdf2>:
   15f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f16:	464f      	mov	r7, r9
   15f18:	4646      	mov	r6, r8
   15f1a:	46d6      	mov	lr, sl
   15f1c:	005c      	lsls	r4, r3, #1
   15f1e:	b5c0      	push	{r6, r7, lr}
   15f20:	031f      	lsls	r7, r3, #12
   15f22:	0fdb      	lsrs	r3, r3, #31
   15f24:	469a      	mov	sl, r3
   15f26:	4b17      	ldr	r3, [pc, #92]	; (15f84 <__eqdf2+0x70>)
   15f28:	030e      	lsls	r6, r1, #12
   15f2a:	004d      	lsls	r5, r1, #1
   15f2c:	4684      	mov	ip, r0
   15f2e:	4680      	mov	r8, r0
   15f30:	0b36      	lsrs	r6, r6, #12
   15f32:	0d6d      	lsrs	r5, r5, #21
   15f34:	0fc9      	lsrs	r1, r1, #31
   15f36:	4691      	mov	r9, r2
   15f38:	0b3f      	lsrs	r7, r7, #12
   15f3a:	0d64      	lsrs	r4, r4, #21
   15f3c:	2001      	movs	r0, #1
   15f3e:	429d      	cmp	r5, r3
   15f40:	d008      	beq.n	15f54 <__eqdf2+0x40>
   15f42:	429c      	cmp	r4, r3
   15f44:	d001      	beq.n	15f4a <__eqdf2+0x36>
   15f46:	42a5      	cmp	r5, r4
   15f48:	d00b      	beq.n	15f62 <__eqdf2+0x4e>
   15f4a:	bc1c      	pop	{r2, r3, r4}
   15f4c:	4690      	mov	r8, r2
   15f4e:	4699      	mov	r9, r3
   15f50:	46a2      	mov	sl, r4
   15f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f54:	4663      	mov	r3, ip
   15f56:	4333      	orrs	r3, r6
   15f58:	d1f7      	bne.n	15f4a <__eqdf2+0x36>
   15f5a:	42ac      	cmp	r4, r5
   15f5c:	d1f5      	bne.n	15f4a <__eqdf2+0x36>
   15f5e:	433a      	orrs	r2, r7
   15f60:	d1f3      	bne.n	15f4a <__eqdf2+0x36>
   15f62:	2001      	movs	r0, #1
   15f64:	42be      	cmp	r6, r7
   15f66:	d1f0      	bne.n	15f4a <__eqdf2+0x36>
   15f68:	45c8      	cmp	r8, r9
   15f6a:	d1ee      	bne.n	15f4a <__eqdf2+0x36>
   15f6c:	4551      	cmp	r1, sl
   15f6e:	d007      	beq.n	15f80 <__eqdf2+0x6c>
   15f70:	2d00      	cmp	r5, #0
   15f72:	d1ea      	bne.n	15f4a <__eqdf2+0x36>
   15f74:	4663      	mov	r3, ip
   15f76:	431e      	orrs	r6, r3
   15f78:	0030      	movs	r0, r6
   15f7a:	1e46      	subs	r6, r0, #1
   15f7c:	41b0      	sbcs	r0, r6
   15f7e:	e7e4      	b.n	15f4a <__eqdf2+0x36>
   15f80:	2000      	movs	r0, #0
   15f82:	e7e2      	b.n	15f4a <__eqdf2+0x36>
   15f84:	000007ff 	.word	0x000007ff

00015f88 <__gedf2>:
   15f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f8a:	4645      	mov	r5, r8
   15f8c:	46de      	mov	lr, fp
   15f8e:	4657      	mov	r7, sl
   15f90:	464e      	mov	r6, r9
   15f92:	b5e0      	push	{r5, r6, r7, lr}
   15f94:	031f      	lsls	r7, r3, #12
   15f96:	0b3d      	lsrs	r5, r7, #12
   15f98:	4f2c      	ldr	r7, [pc, #176]	; (1604c <__gedf2+0xc4>)
   15f9a:	030e      	lsls	r6, r1, #12
   15f9c:	004c      	lsls	r4, r1, #1
   15f9e:	46ab      	mov	fp, r5
   15fa0:	005d      	lsls	r5, r3, #1
   15fa2:	4684      	mov	ip, r0
   15fa4:	0b36      	lsrs	r6, r6, #12
   15fa6:	0d64      	lsrs	r4, r4, #21
   15fa8:	0fc9      	lsrs	r1, r1, #31
   15faa:	4690      	mov	r8, r2
   15fac:	0d6d      	lsrs	r5, r5, #21
   15fae:	0fdb      	lsrs	r3, r3, #31
   15fb0:	42bc      	cmp	r4, r7
   15fb2:	d02a      	beq.n	1600a <__gedf2+0x82>
   15fb4:	4f25      	ldr	r7, [pc, #148]	; (1604c <__gedf2+0xc4>)
   15fb6:	42bd      	cmp	r5, r7
   15fb8:	d02d      	beq.n	16016 <__gedf2+0x8e>
   15fba:	2c00      	cmp	r4, #0
   15fbc:	d10f      	bne.n	15fde <__gedf2+0x56>
   15fbe:	4330      	orrs	r0, r6
   15fc0:	0007      	movs	r7, r0
   15fc2:	4681      	mov	r9, r0
   15fc4:	4278      	negs	r0, r7
   15fc6:	4178      	adcs	r0, r7
   15fc8:	b2c0      	uxtb	r0, r0
   15fca:	2d00      	cmp	r5, #0
   15fcc:	d117      	bne.n	15ffe <__gedf2+0x76>
   15fce:	465f      	mov	r7, fp
   15fd0:	433a      	orrs	r2, r7
   15fd2:	d114      	bne.n	15ffe <__gedf2+0x76>
   15fd4:	464b      	mov	r3, r9
   15fd6:	2000      	movs	r0, #0
   15fd8:	2b00      	cmp	r3, #0
   15fda:	d00a      	beq.n	15ff2 <__gedf2+0x6a>
   15fdc:	e006      	b.n	15fec <__gedf2+0x64>
   15fde:	2d00      	cmp	r5, #0
   15fe0:	d102      	bne.n	15fe8 <__gedf2+0x60>
   15fe2:	4658      	mov	r0, fp
   15fe4:	4302      	orrs	r2, r0
   15fe6:	d001      	beq.n	15fec <__gedf2+0x64>
   15fe8:	4299      	cmp	r1, r3
   15fea:	d018      	beq.n	1601e <__gedf2+0x96>
   15fec:	4248      	negs	r0, r1
   15fee:	2101      	movs	r1, #1
   15ff0:	4308      	orrs	r0, r1
   15ff2:	bc3c      	pop	{r2, r3, r4, r5}
   15ff4:	4690      	mov	r8, r2
   15ff6:	4699      	mov	r9, r3
   15ff8:	46a2      	mov	sl, r4
   15ffa:	46ab      	mov	fp, r5
   15ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ffe:	2800      	cmp	r0, #0
   16000:	d0f2      	beq.n	15fe8 <__gedf2+0x60>
   16002:	2001      	movs	r0, #1
   16004:	3b01      	subs	r3, #1
   16006:	4318      	orrs	r0, r3
   16008:	e7f3      	b.n	15ff2 <__gedf2+0x6a>
   1600a:	0037      	movs	r7, r6
   1600c:	4307      	orrs	r7, r0
   1600e:	d0d1      	beq.n	15fb4 <__gedf2+0x2c>
   16010:	2002      	movs	r0, #2
   16012:	4240      	negs	r0, r0
   16014:	e7ed      	b.n	15ff2 <__gedf2+0x6a>
   16016:	465f      	mov	r7, fp
   16018:	4317      	orrs	r7, r2
   1601a:	d0ce      	beq.n	15fba <__gedf2+0x32>
   1601c:	e7f8      	b.n	16010 <__gedf2+0x88>
   1601e:	42ac      	cmp	r4, r5
   16020:	dce4      	bgt.n	15fec <__gedf2+0x64>
   16022:	da03      	bge.n	1602c <__gedf2+0xa4>
   16024:	1e48      	subs	r0, r1, #1
   16026:	2101      	movs	r1, #1
   16028:	4308      	orrs	r0, r1
   1602a:	e7e2      	b.n	15ff2 <__gedf2+0x6a>
   1602c:	455e      	cmp	r6, fp
   1602e:	d8dd      	bhi.n	15fec <__gedf2+0x64>
   16030:	d006      	beq.n	16040 <__gedf2+0xb8>
   16032:	2000      	movs	r0, #0
   16034:	455e      	cmp	r6, fp
   16036:	d2dc      	bcs.n	15ff2 <__gedf2+0x6a>
   16038:	2301      	movs	r3, #1
   1603a:	1e48      	subs	r0, r1, #1
   1603c:	4318      	orrs	r0, r3
   1603e:	e7d8      	b.n	15ff2 <__gedf2+0x6a>
   16040:	45c4      	cmp	ip, r8
   16042:	d8d3      	bhi.n	15fec <__gedf2+0x64>
   16044:	2000      	movs	r0, #0
   16046:	45c4      	cmp	ip, r8
   16048:	d3f6      	bcc.n	16038 <__gedf2+0xb0>
   1604a:	e7d2      	b.n	15ff2 <__gedf2+0x6a>
   1604c:	000007ff 	.word	0x000007ff

00016050 <__ledf2>:
   16050:	b5f0      	push	{r4, r5, r6, r7, lr}
   16052:	464e      	mov	r6, r9
   16054:	4645      	mov	r5, r8
   16056:	46de      	mov	lr, fp
   16058:	4657      	mov	r7, sl
   1605a:	005c      	lsls	r4, r3, #1
   1605c:	b5e0      	push	{r5, r6, r7, lr}
   1605e:	031f      	lsls	r7, r3, #12
   16060:	0fdb      	lsrs	r3, r3, #31
   16062:	4699      	mov	r9, r3
   16064:	4b2a      	ldr	r3, [pc, #168]	; (16110 <__ledf2+0xc0>)
   16066:	030e      	lsls	r6, r1, #12
   16068:	004d      	lsls	r5, r1, #1
   1606a:	0fc9      	lsrs	r1, r1, #31
   1606c:	4684      	mov	ip, r0
   1606e:	0b36      	lsrs	r6, r6, #12
   16070:	0d6d      	lsrs	r5, r5, #21
   16072:	468b      	mov	fp, r1
   16074:	4690      	mov	r8, r2
   16076:	0b3f      	lsrs	r7, r7, #12
   16078:	0d64      	lsrs	r4, r4, #21
   1607a:	429d      	cmp	r5, r3
   1607c:	d020      	beq.n	160c0 <__ledf2+0x70>
   1607e:	4b24      	ldr	r3, [pc, #144]	; (16110 <__ledf2+0xc0>)
   16080:	429c      	cmp	r4, r3
   16082:	d022      	beq.n	160ca <__ledf2+0x7a>
   16084:	2d00      	cmp	r5, #0
   16086:	d112      	bne.n	160ae <__ledf2+0x5e>
   16088:	4330      	orrs	r0, r6
   1608a:	4243      	negs	r3, r0
   1608c:	4143      	adcs	r3, r0
   1608e:	b2db      	uxtb	r3, r3
   16090:	2c00      	cmp	r4, #0
   16092:	d01f      	beq.n	160d4 <__ledf2+0x84>
   16094:	2b00      	cmp	r3, #0
   16096:	d00c      	beq.n	160b2 <__ledf2+0x62>
   16098:	464b      	mov	r3, r9
   1609a:	2001      	movs	r0, #1
   1609c:	3b01      	subs	r3, #1
   1609e:	4303      	orrs	r3, r0
   160a0:	0018      	movs	r0, r3
   160a2:	bc3c      	pop	{r2, r3, r4, r5}
   160a4:	4690      	mov	r8, r2
   160a6:	4699      	mov	r9, r3
   160a8:	46a2      	mov	sl, r4
   160aa:	46ab      	mov	fp, r5
   160ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160ae:	2c00      	cmp	r4, #0
   160b0:	d016      	beq.n	160e0 <__ledf2+0x90>
   160b2:	45cb      	cmp	fp, r9
   160b4:	d017      	beq.n	160e6 <__ledf2+0x96>
   160b6:	465b      	mov	r3, fp
   160b8:	4259      	negs	r1, r3
   160ba:	2301      	movs	r3, #1
   160bc:	430b      	orrs	r3, r1
   160be:	e7ef      	b.n	160a0 <__ledf2+0x50>
   160c0:	0031      	movs	r1, r6
   160c2:	2302      	movs	r3, #2
   160c4:	4301      	orrs	r1, r0
   160c6:	d1eb      	bne.n	160a0 <__ledf2+0x50>
   160c8:	e7d9      	b.n	1607e <__ledf2+0x2e>
   160ca:	0039      	movs	r1, r7
   160cc:	2302      	movs	r3, #2
   160ce:	4311      	orrs	r1, r2
   160d0:	d1e6      	bne.n	160a0 <__ledf2+0x50>
   160d2:	e7d7      	b.n	16084 <__ledf2+0x34>
   160d4:	433a      	orrs	r2, r7
   160d6:	d1dd      	bne.n	16094 <__ledf2+0x44>
   160d8:	2300      	movs	r3, #0
   160da:	2800      	cmp	r0, #0
   160dc:	d0e0      	beq.n	160a0 <__ledf2+0x50>
   160de:	e7ea      	b.n	160b6 <__ledf2+0x66>
   160e0:	433a      	orrs	r2, r7
   160e2:	d1e6      	bne.n	160b2 <__ledf2+0x62>
   160e4:	e7e7      	b.n	160b6 <__ledf2+0x66>
   160e6:	42a5      	cmp	r5, r4
   160e8:	dce5      	bgt.n	160b6 <__ledf2+0x66>
   160ea:	db05      	blt.n	160f8 <__ledf2+0xa8>
   160ec:	42be      	cmp	r6, r7
   160ee:	d8e2      	bhi.n	160b6 <__ledf2+0x66>
   160f0:	d007      	beq.n	16102 <__ledf2+0xb2>
   160f2:	2300      	movs	r3, #0
   160f4:	42be      	cmp	r6, r7
   160f6:	d2d3      	bcs.n	160a0 <__ledf2+0x50>
   160f8:	4659      	mov	r1, fp
   160fa:	2301      	movs	r3, #1
   160fc:	3901      	subs	r1, #1
   160fe:	430b      	orrs	r3, r1
   16100:	e7ce      	b.n	160a0 <__ledf2+0x50>
   16102:	45c4      	cmp	ip, r8
   16104:	d8d7      	bhi.n	160b6 <__ledf2+0x66>
   16106:	2300      	movs	r3, #0
   16108:	45c4      	cmp	ip, r8
   1610a:	d3f5      	bcc.n	160f8 <__ledf2+0xa8>
   1610c:	e7c8      	b.n	160a0 <__ledf2+0x50>
   1610e:	46c0      	nop			; (mov r8, r8)
   16110:	000007ff 	.word	0x000007ff

00016114 <__aeabi_dmul>:
   16114:	b5f0      	push	{r4, r5, r6, r7, lr}
   16116:	4657      	mov	r7, sl
   16118:	4645      	mov	r5, r8
   1611a:	46de      	mov	lr, fp
   1611c:	464e      	mov	r6, r9
   1611e:	b5e0      	push	{r5, r6, r7, lr}
   16120:	030c      	lsls	r4, r1, #12
   16122:	4698      	mov	r8, r3
   16124:	004e      	lsls	r6, r1, #1
   16126:	0b23      	lsrs	r3, r4, #12
   16128:	b087      	sub	sp, #28
   1612a:	0007      	movs	r7, r0
   1612c:	4692      	mov	sl, r2
   1612e:	469b      	mov	fp, r3
   16130:	0d76      	lsrs	r6, r6, #21
   16132:	0fcd      	lsrs	r5, r1, #31
   16134:	2e00      	cmp	r6, #0
   16136:	d06b      	beq.n	16210 <__aeabi_dmul+0xfc>
   16138:	4b6d      	ldr	r3, [pc, #436]	; (162f0 <__aeabi_dmul+0x1dc>)
   1613a:	429e      	cmp	r6, r3
   1613c:	d035      	beq.n	161aa <__aeabi_dmul+0x96>
   1613e:	2480      	movs	r4, #128	; 0x80
   16140:	465b      	mov	r3, fp
   16142:	0f42      	lsrs	r2, r0, #29
   16144:	0424      	lsls	r4, r4, #16
   16146:	00db      	lsls	r3, r3, #3
   16148:	4314      	orrs	r4, r2
   1614a:	431c      	orrs	r4, r3
   1614c:	00c3      	lsls	r3, r0, #3
   1614e:	4699      	mov	r9, r3
   16150:	4b68      	ldr	r3, [pc, #416]	; (162f4 <__aeabi_dmul+0x1e0>)
   16152:	46a3      	mov	fp, r4
   16154:	469c      	mov	ip, r3
   16156:	2300      	movs	r3, #0
   16158:	2700      	movs	r7, #0
   1615a:	4466      	add	r6, ip
   1615c:	9302      	str	r3, [sp, #8]
   1615e:	4643      	mov	r3, r8
   16160:	031c      	lsls	r4, r3, #12
   16162:	005a      	lsls	r2, r3, #1
   16164:	0fdb      	lsrs	r3, r3, #31
   16166:	4650      	mov	r0, sl
   16168:	0b24      	lsrs	r4, r4, #12
   1616a:	0d52      	lsrs	r2, r2, #21
   1616c:	4698      	mov	r8, r3
   1616e:	d100      	bne.n	16172 <__aeabi_dmul+0x5e>
   16170:	e076      	b.n	16260 <__aeabi_dmul+0x14c>
   16172:	4b5f      	ldr	r3, [pc, #380]	; (162f0 <__aeabi_dmul+0x1dc>)
   16174:	429a      	cmp	r2, r3
   16176:	d06d      	beq.n	16254 <__aeabi_dmul+0x140>
   16178:	2380      	movs	r3, #128	; 0x80
   1617a:	0f41      	lsrs	r1, r0, #29
   1617c:	041b      	lsls	r3, r3, #16
   1617e:	430b      	orrs	r3, r1
   16180:	495c      	ldr	r1, [pc, #368]	; (162f4 <__aeabi_dmul+0x1e0>)
   16182:	00e4      	lsls	r4, r4, #3
   16184:	468c      	mov	ip, r1
   16186:	431c      	orrs	r4, r3
   16188:	00c3      	lsls	r3, r0, #3
   1618a:	2000      	movs	r0, #0
   1618c:	4462      	add	r2, ip
   1618e:	4641      	mov	r1, r8
   16190:	18b6      	adds	r6, r6, r2
   16192:	4069      	eors	r1, r5
   16194:	1c72      	adds	r2, r6, #1
   16196:	9101      	str	r1, [sp, #4]
   16198:	4694      	mov	ip, r2
   1619a:	4307      	orrs	r7, r0
   1619c:	2f0f      	cmp	r7, #15
   1619e:	d900      	bls.n	161a2 <__aeabi_dmul+0x8e>
   161a0:	e0b0      	b.n	16304 <__aeabi_dmul+0x1f0>
   161a2:	4a55      	ldr	r2, [pc, #340]	; (162f8 <__aeabi_dmul+0x1e4>)
   161a4:	00bf      	lsls	r7, r7, #2
   161a6:	59d2      	ldr	r2, [r2, r7]
   161a8:	4697      	mov	pc, r2
   161aa:	465b      	mov	r3, fp
   161ac:	4303      	orrs	r3, r0
   161ae:	4699      	mov	r9, r3
   161b0:	d000      	beq.n	161b4 <__aeabi_dmul+0xa0>
   161b2:	e087      	b.n	162c4 <__aeabi_dmul+0x1b0>
   161b4:	2300      	movs	r3, #0
   161b6:	469b      	mov	fp, r3
   161b8:	3302      	adds	r3, #2
   161ba:	2708      	movs	r7, #8
   161bc:	9302      	str	r3, [sp, #8]
   161be:	e7ce      	b.n	1615e <__aeabi_dmul+0x4a>
   161c0:	4642      	mov	r2, r8
   161c2:	9201      	str	r2, [sp, #4]
   161c4:	2802      	cmp	r0, #2
   161c6:	d067      	beq.n	16298 <__aeabi_dmul+0x184>
   161c8:	2803      	cmp	r0, #3
   161ca:	d100      	bne.n	161ce <__aeabi_dmul+0xba>
   161cc:	e20e      	b.n	165ec <__aeabi_dmul+0x4d8>
   161ce:	2801      	cmp	r0, #1
   161d0:	d000      	beq.n	161d4 <__aeabi_dmul+0xc0>
   161d2:	e162      	b.n	1649a <__aeabi_dmul+0x386>
   161d4:	2300      	movs	r3, #0
   161d6:	2400      	movs	r4, #0
   161d8:	2200      	movs	r2, #0
   161da:	4699      	mov	r9, r3
   161dc:	9901      	ldr	r1, [sp, #4]
   161de:	4001      	ands	r1, r0
   161e0:	b2cd      	uxtb	r5, r1
   161e2:	2100      	movs	r1, #0
   161e4:	0312      	lsls	r2, r2, #12
   161e6:	0d0b      	lsrs	r3, r1, #20
   161e8:	0b12      	lsrs	r2, r2, #12
   161ea:	051b      	lsls	r3, r3, #20
   161ec:	4313      	orrs	r3, r2
   161ee:	4a43      	ldr	r2, [pc, #268]	; (162fc <__aeabi_dmul+0x1e8>)
   161f0:	0524      	lsls	r4, r4, #20
   161f2:	4013      	ands	r3, r2
   161f4:	431c      	orrs	r4, r3
   161f6:	0064      	lsls	r4, r4, #1
   161f8:	07ed      	lsls	r5, r5, #31
   161fa:	0864      	lsrs	r4, r4, #1
   161fc:	432c      	orrs	r4, r5
   161fe:	4648      	mov	r0, r9
   16200:	0021      	movs	r1, r4
   16202:	b007      	add	sp, #28
   16204:	bc3c      	pop	{r2, r3, r4, r5}
   16206:	4690      	mov	r8, r2
   16208:	4699      	mov	r9, r3
   1620a:	46a2      	mov	sl, r4
   1620c:	46ab      	mov	fp, r5
   1620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16210:	4303      	orrs	r3, r0
   16212:	4699      	mov	r9, r3
   16214:	d04f      	beq.n	162b6 <__aeabi_dmul+0x1a2>
   16216:	465b      	mov	r3, fp
   16218:	2b00      	cmp	r3, #0
   1621a:	d100      	bne.n	1621e <__aeabi_dmul+0x10a>
   1621c:	e189      	b.n	16532 <__aeabi_dmul+0x41e>
   1621e:	4658      	mov	r0, fp
   16220:	f000 fe98 	bl	16f54 <__clzsi2>
   16224:	0003      	movs	r3, r0
   16226:	3b0b      	subs	r3, #11
   16228:	2b1c      	cmp	r3, #28
   1622a:	dd00      	ble.n	1622e <__aeabi_dmul+0x11a>
   1622c:	e17a      	b.n	16524 <__aeabi_dmul+0x410>
   1622e:	221d      	movs	r2, #29
   16230:	1ad3      	subs	r3, r2, r3
   16232:	003a      	movs	r2, r7
   16234:	0001      	movs	r1, r0
   16236:	465c      	mov	r4, fp
   16238:	40da      	lsrs	r2, r3
   1623a:	3908      	subs	r1, #8
   1623c:	408c      	lsls	r4, r1
   1623e:	0013      	movs	r3, r2
   16240:	408f      	lsls	r7, r1
   16242:	4323      	orrs	r3, r4
   16244:	469b      	mov	fp, r3
   16246:	46b9      	mov	r9, r7
   16248:	2300      	movs	r3, #0
   1624a:	4e2d      	ldr	r6, [pc, #180]	; (16300 <__aeabi_dmul+0x1ec>)
   1624c:	2700      	movs	r7, #0
   1624e:	1a36      	subs	r6, r6, r0
   16250:	9302      	str	r3, [sp, #8]
   16252:	e784      	b.n	1615e <__aeabi_dmul+0x4a>
   16254:	4653      	mov	r3, sl
   16256:	4323      	orrs	r3, r4
   16258:	d12a      	bne.n	162b0 <__aeabi_dmul+0x19c>
   1625a:	2400      	movs	r4, #0
   1625c:	2002      	movs	r0, #2
   1625e:	e796      	b.n	1618e <__aeabi_dmul+0x7a>
   16260:	4653      	mov	r3, sl
   16262:	4323      	orrs	r3, r4
   16264:	d020      	beq.n	162a8 <__aeabi_dmul+0x194>
   16266:	2c00      	cmp	r4, #0
   16268:	d100      	bne.n	1626c <__aeabi_dmul+0x158>
   1626a:	e157      	b.n	1651c <__aeabi_dmul+0x408>
   1626c:	0020      	movs	r0, r4
   1626e:	f000 fe71 	bl	16f54 <__clzsi2>
   16272:	0003      	movs	r3, r0
   16274:	3b0b      	subs	r3, #11
   16276:	2b1c      	cmp	r3, #28
   16278:	dd00      	ble.n	1627c <__aeabi_dmul+0x168>
   1627a:	e149      	b.n	16510 <__aeabi_dmul+0x3fc>
   1627c:	211d      	movs	r1, #29
   1627e:	1acb      	subs	r3, r1, r3
   16280:	4651      	mov	r1, sl
   16282:	0002      	movs	r2, r0
   16284:	40d9      	lsrs	r1, r3
   16286:	4653      	mov	r3, sl
   16288:	3a08      	subs	r2, #8
   1628a:	4094      	lsls	r4, r2
   1628c:	4093      	lsls	r3, r2
   1628e:	430c      	orrs	r4, r1
   16290:	4a1b      	ldr	r2, [pc, #108]	; (16300 <__aeabi_dmul+0x1ec>)
   16292:	1a12      	subs	r2, r2, r0
   16294:	2000      	movs	r0, #0
   16296:	e77a      	b.n	1618e <__aeabi_dmul+0x7a>
   16298:	2501      	movs	r5, #1
   1629a:	9b01      	ldr	r3, [sp, #4]
   1629c:	4c14      	ldr	r4, [pc, #80]	; (162f0 <__aeabi_dmul+0x1dc>)
   1629e:	401d      	ands	r5, r3
   162a0:	2300      	movs	r3, #0
   162a2:	2200      	movs	r2, #0
   162a4:	4699      	mov	r9, r3
   162a6:	e79c      	b.n	161e2 <__aeabi_dmul+0xce>
   162a8:	2400      	movs	r4, #0
   162aa:	2200      	movs	r2, #0
   162ac:	2001      	movs	r0, #1
   162ae:	e76e      	b.n	1618e <__aeabi_dmul+0x7a>
   162b0:	4653      	mov	r3, sl
   162b2:	2003      	movs	r0, #3
   162b4:	e76b      	b.n	1618e <__aeabi_dmul+0x7a>
   162b6:	2300      	movs	r3, #0
   162b8:	469b      	mov	fp, r3
   162ba:	3301      	adds	r3, #1
   162bc:	2704      	movs	r7, #4
   162be:	2600      	movs	r6, #0
   162c0:	9302      	str	r3, [sp, #8]
   162c2:	e74c      	b.n	1615e <__aeabi_dmul+0x4a>
   162c4:	2303      	movs	r3, #3
   162c6:	4681      	mov	r9, r0
   162c8:	270c      	movs	r7, #12
   162ca:	9302      	str	r3, [sp, #8]
   162cc:	e747      	b.n	1615e <__aeabi_dmul+0x4a>
   162ce:	2280      	movs	r2, #128	; 0x80
   162d0:	2300      	movs	r3, #0
   162d2:	2500      	movs	r5, #0
   162d4:	0312      	lsls	r2, r2, #12
   162d6:	4699      	mov	r9, r3
   162d8:	4c05      	ldr	r4, [pc, #20]	; (162f0 <__aeabi_dmul+0x1dc>)
   162da:	e782      	b.n	161e2 <__aeabi_dmul+0xce>
   162dc:	465c      	mov	r4, fp
   162de:	464b      	mov	r3, r9
   162e0:	9802      	ldr	r0, [sp, #8]
   162e2:	e76f      	b.n	161c4 <__aeabi_dmul+0xb0>
   162e4:	465c      	mov	r4, fp
   162e6:	464b      	mov	r3, r9
   162e8:	9501      	str	r5, [sp, #4]
   162ea:	9802      	ldr	r0, [sp, #8]
   162ec:	e76a      	b.n	161c4 <__aeabi_dmul+0xb0>
   162ee:	46c0      	nop			; (mov r8, r8)
   162f0:	000007ff 	.word	0x000007ff
   162f4:	fffffc01 	.word	0xfffffc01
   162f8:	000178e0 	.word	0x000178e0
   162fc:	800fffff 	.word	0x800fffff
   16300:	fffffc0d 	.word	0xfffffc0d
   16304:	464a      	mov	r2, r9
   16306:	4649      	mov	r1, r9
   16308:	0c17      	lsrs	r7, r2, #16
   1630a:	0c1a      	lsrs	r2, r3, #16
   1630c:	041b      	lsls	r3, r3, #16
   1630e:	0c1b      	lsrs	r3, r3, #16
   16310:	0408      	lsls	r0, r1, #16
   16312:	0019      	movs	r1, r3
   16314:	0c00      	lsrs	r0, r0, #16
   16316:	4341      	muls	r1, r0
   16318:	0015      	movs	r5, r2
   1631a:	4688      	mov	r8, r1
   1631c:	0019      	movs	r1, r3
   1631e:	437d      	muls	r5, r7
   16320:	4379      	muls	r1, r7
   16322:	9503      	str	r5, [sp, #12]
   16324:	4689      	mov	r9, r1
   16326:	0029      	movs	r1, r5
   16328:	0015      	movs	r5, r2
   1632a:	4345      	muls	r5, r0
   1632c:	444d      	add	r5, r9
   1632e:	9502      	str	r5, [sp, #8]
   16330:	4645      	mov	r5, r8
   16332:	0c2d      	lsrs	r5, r5, #16
   16334:	46aa      	mov	sl, r5
   16336:	9d02      	ldr	r5, [sp, #8]
   16338:	4455      	add	r5, sl
   1633a:	45a9      	cmp	r9, r5
   1633c:	d906      	bls.n	1634c <__aeabi_dmul+0x238>
   1633e:	468a      	mov	sl, r1
   16340:	2180      	movs	r1, #128	; 0x80
   16342:	0249      	lsls	r1, r1, #9
   16344:	4689      	mov	r9, r1
   16346:	44ca      	add	sl, r9
   16348:	4651      	mov	r1, sl
   1634a:	9103      	str	r1, [sp, #12]
   1634c:	0c29      	lsrs	r1, r5, #16
   1634e:	9104      	str	r1, [sp, #16]
   16350:	4641      	mov	r1, r8
   16352:	0409      	lsls	r1, r1, #16
   16354:	042d      	lsls	r5, r5, #16
   16356:	0c09      	lsrs	r1, r1, #16
   16358:	4688      	mov	r8, r1
   1635a:	0029      	movs	r1, r5
   1635c:	0c25      	lsrs	r5, r4, #16
   1635e:	0424      	lsls	r4, r4, #16
   16360:	4441      	add	r1, r8
   16362:	0c24      	lsrs	r4, r4, #16
   16364:	9105      	str	r1, [sp, #20]
   16366:	0021      	movs	r1, r4
   16368:	4341      	muls	r1, r0
   1636a:	4688      	mov	r8, r1
   1636c:	0021      	movs	r1, r4
   1636e:	4379      	muls	r1, r7
   16370:	468a      	mov	sl, r1
   16372:	4368      	muls	r0, r5
   16374:	4641      	mov	r1, r8
   16376:	4450      	add	r0, sl
   16378:	4681      	mov	r9, r0
   1637a:	0c08      	lsrs	r0, r1, #16
   1637c:	4448      	add	r0, r9
   1637e:	436f      	muls	r7, r5
   16380:	4582      	cmp	sl, r0
   16382:	d903      	bls.n	1638c <__aeabi_dmul+0x278>
   16384:	2180      	movs	r1, #128	; 0x80
   16386:	0249      	lsls	r1, r1, #9
   16388:	4689      	mov	r9, r1
   1638a:	444f      	add	r7, r9
   1638c:	0c01      	lsrs	r1, r0, #16
   1638e:	4689      	mov	r9, r1
   16390:	0039      	movs	r1, r7
   16392:	4449      	add	r1, r9
   16394:	9102      	str	r1, [sp, #8]
   16396:	4641      	mov	r1, r8
   16398:	040f      	lsls	r7, r1, #16
   1639a:	9904      	ldr	r1, [sp, #16]
   1639c:	0c3f      	lsrs	r7, r7, #16
   1639e:	4688      	mov	r8, r1
   163a0:	0400      	lsls	r0, r0, #16
   163a2:	19c0      	adds	r0, r0, r7
   163a4:	4480      	add	r8, r0
   163a6:	4641      	mov	r1, r8
   163a8:	9104      	str	r1, [sp, #16]
   163aa:	4659      	mov	r1, fp
   163ac:	0c0f      	lsrs	r7, r1, #16
   163ae:	0409      	lsls	r1, r1, #16
   163b0:	0c09      	lsrs	r1, r1, #16
   163b2:	4688      	mov	r8, r1
   163b4:	4359      	muls	r1, r3
   163b6:	468a      	mov	sl, r1
   163b8:	0039      	movs	r1, r7
   163ba:	4351      	muls	r1, r2
   163bc:	4689      	mov	r9, r1
   163be:	4641      	mov	r1, r8
   163c0:	434a      	muls	r2, r1
   163c2:	4651      	mov	r1, sl
   163c4:	0c09      	lsrs	r1, r1, #16
   163c6:	468b      	mov	fp, r1
   163c8:	437b      	muls	r3, r7
   163ca:	18d2      	adds	r2, r2, r3
   163cc:	445a      	add	r2, fp
   163ce:	4293      	cmp	r3, r2
   163d0:	d903      	bls.n	163da <__aeabi_dmul+0x2c6>
   163d2:	2380      	movs	r3, #128	; 0x80
   163d4:	025b      	lsls	r3, r3, #9
   163d6:	469b      	mov	fp, r3
   163d8:	44d9      	add	r9, fp
   163da:	4651      	mov	r1, sl
   163dc:	0409      	lsls	r1, r1, #16
   163de:	0c09      	lsrs	r1, r1, #16
   163e0:	468a      	mov	sl, r1
   163e2:	4641      	mov	r1, r8
   163e4:	4361      	muls	r1, r4
   163e6:	437c      	muls	r4, r7
   163e8:	0c13      	lsrs	r3, r2, #16
   163ea:	0412      	lsls	r2, r2, #16
   163ec:	444b      	add	r3, r9
   163ee:	4452      	add	r2, sl
   163f0:	46a1      	mov	r9, r4
   163f2:	468a      	mov	sl, r1
   163f4:	003c      	movs	r4, r7
   163f6:	4641      	mov	r1, r8
   163f8:	436c      	muls	r4, r5
   163fa:	434d      	muls	r5, r1
   163fc:	4651      	mov	r1, sl
   163fe:	444d      	add	r5, r9
   16400:	0c0f      	lsrs	r7, r1, #16
   16402:	197d      	adds	r5, r7, r5
   16404:	45a9      	cmp	r9, r5
   16406:	d903      	bls.n	16410 <__aeabi_dmul+0x2fc>
   16408:	2180      	movs	r1, #128	; 0x80
   1640a:	0249      	lsls	r1, r1, #9
   1640c:	4688      	mov	r8, r1
   1640e:	4444      	add	r4, r8
   16410:	9f04      	ldr	r7, [sp, #16]
   16412:	9903      	ldr	r1, [sp, #12]
   16414:	46b8      	mov	r8, r7
   16416:	4441      	add	r1, r8
   16418:	468b      	mov	fp, r1
   1641a:	4583      	cmp	fp, r0
   1641c:	4180      	sbcs	r0, r0
   1641e:	4241      	negs	r1, r0
   16420:	4688      	mov	r8, r1
   16422:	4651      	mov	r1, sl
   16424:	0408      	lsls	r0, r1, #16
   16426:	042f      	lsls	r7, r5, #16
   16428:	0c00      	lsrs	r0, r0, #16
   1642a:	183f      	adds	r7, r7, r0
   1642c:	4658      	mov	r0, fp
   1642e:	9902      	ldr	r1, [sp, #8]
   16430:	1810      	adds	r0, r2, r0
   16432:	4689      	mov	r9, r1
   16434:	4290      	cmp	r0, r2
   16436:	4192      	sbcs	r2, r2
   16438:	444f      	add	r7, r9
   1643a:	46ba      	mov	sl, r7
   1643c:	4252      	negs	r2, r2
   1643e:	4699      	mov	r9, r3
   16440:	4693      	mov	fp, r2
   16442:	44c2      	add	sl, r8
   16444:	44d1      	add	r9, sl
   16446:	44cb      	add	fp, r9
   16448:	428f      	cmp	r7, r1
   1644a:	41bf      	sbcs	r7, r7
   1644c:	45c2      	cmp	sl, r8
   1644e:	4189      	sbcs	r1, r1
   16450:	4599      	cmp	r9, r3
   16452:	419b      	sbcs	r3, r3
   16454:	4593      	cmp	fp, r2
   16456:	4192      	sbcs	r2, r2
   16458:	427f      	negs	r7, r7
   1645a:	4249      	negs	r1, r1
   1645c:	0c2d      	lsrs	r5, r5, #16
   1645e:	4252      	negs	r2, r2
   16460:	430f      	orrs	r7, r1
   16462:	425b      	negs	r3, r3
   16464:	4313      	orrs	r3, r2
   16466:	197f      	adds	r7, r7, r5
   16468:	18ff      	adds	r7, r7, r3
   1646a:	465b      	mov	r3, fp
   1646c:	193c      	adds	r4, r7, r4
   1646e:	0ddb      	lsrs	r3, r3, #23
   16470:	9a05      	ldr	r2, [sp, #20]
   16472:	0264      	lsls	r4, r4, #9
   16474:	431c      	orrs	r4, r3
   16476:	0243      	lsls	r3, r0, #9
   16478:	4313      	orrs	r3, r2
   1647a:	1e5d      	subs	r5, r3, #1
   1647c:	41ab      	sbcs	r3, r5
   1647e:	465a      	mov	r2, fp
   16480:	0dc0      	lsrs	r0, r0, #23
   16482:	4303      	orrs	r3, r0
   16484:	0252      	lsls	r2, r2, #9
   16486:	4313      	orrs	r3, r2
   16488:	01e2      	lsls	r2, r4, #7
   1648a:	d556      	bpl.n	1653a <__aeabi_dmul+0x426>
   1648c:	2001      	movs	r0, #1
   1648e:	085a      	lsrs	r2, r3, #1
   16490:	4003      	ands	r3, r0
   16492:	4313      	orrs	r3, r2
   16494:	07e2      	lsls	r2, r4, #31
   16496:	4313      	orrs	r3, r2
   16498:	0864      	lsrs	r4, r4, #1
   1649a:	485a      	ldr	r0, [pc, #360]	; (16604 <__aeabi_dmul+0x4f0>)
   1649c:	4460      	add	r0, ip
   1649e:	2800      	cmp	r0, #0
   164a0:	dd4d      	ble.n	1653e <__aeabi_dmul+0x42a>
   164a2:	075a      	lsls	r2, r3, #29
   164a4:	d009      	beq.n	164ba <__aeabi_dmul+0x3a6>
   164a6:	220f      	movs	r2, #15
   164a8:	401a      	ands	r2, r3
   164aa:	2a04      	cmp	r2, #4
   164ac:	d005      	beq.n	164ba <__aeabi_dmul+0x3a6>
   164ae:	1d1a      	adds	r2, r3, #4
   164b0:	429a      	cmp	r2, r3
   164b2:	419b      	sbcs	r3, r3
   164b4:	425b      	negs	r3, r3
   164b6:	18e4      	adds	r4, r4, r3
   164b8:	0013      	movs	r3, r2
   164ba:	01e2      	lsls	r2, r4, #7
   164bc:	d504      	bpl.n	164c8 <__aeabi_dmul+0x3b4>
   164be:	2080      	movs	r0, #128	; 0x80
   164c0:	4a51      	ldr	r2, [pc, #324]	; (16608 <__aeabi_dmul+0x4f4>)
   164c2:	00c0      	lsls	r0, r0, #3
   164c4:	4014      	ands	r4, r2
   164c6:	4460      	add	r0, ip
   164c8:	4a50      	ldr	r2, [pc, #320]	; (1660c <__aeabi_dmul+0x4f8>)
   164ca:	4290      	cmp	r0, r2
   164cc:	dd00      	ble.n	164d0 <__aeabi_dmul+0x3bc>
   164ce:	e6e3      	b.n	16298 <__aeabi_dmul+0x184>
   164d0:	2501      	movs	r5, #1
   164d2:	08db      	lsrs	r3, r3, #3
   164d4:	0762      	lsls	r2, r4, #29
   164d6:	431a      	orrs	r2, r3
   164d8:	0264      	lsls	r4, r4, #9
   164da:	9b01      	ldr	r3, [sp, #4]
   164dc:	4691      	mov	r9, r2
   164de:	0b22      	lsrs	r2, r4, #12
   164e0:	0544      	lsls	r4, r0, #21
   164e2:	0d64      	lsrs	r4, r4, #21
   164e4:	401d      	ands	r5, r3
   164e6:	e67c      	b.n	161e2 <__aeabi_dmul+0xce>
   164e8:	2280      	movs	r2, #128	; 0x80
   164ea:	4659      	mov	r1, fp
   164ec:	0312      	lsls	r2, r2, #12
   164ee:	4211      	tst	r1, r2
   164f0:	d008      	beq.n	16504 <__aeabi_dmul+0x3f0>
   164f2:	4214      	tst	r4, r2
   164f4:	d106      	bne.n	16504 <__aeabi_dmul+0x3f0>
   164f6:	4322      	orrs	r2, r4
   164f8:	0312      	lsls	r2, r2, #12
   164fa:	0b12      	lsrs	r2, r2, #12
   164fc:	4645      	mov	r5, r8
   164fe:	4699      	mov	r9, r3
   16500:	4c43      	ldr	r4, [pc, #268]	; (16610 <__aeabi_dmul+0x4fc>)
   16502:	e66e      	b.n	161e2 <__aeabi_dmul+0xce>
   16504:	465b      	mov	r3, fp
   16506:	431a      	orrs	r2, r3
   16508:	0312      	lsls	r2, r2, #12
   1650a:	0b12      	lsrs	r2, r2, #12
   1650c:	4c40      	ldr	r4, [pc, #256]	; (16610 <__aeabi_dmul+0x4fc>)
   1650e:	e668      	b.n	161e2 <__aeabi_dmul+0xce>
   16510:	0003      	movs	r3, r0
   16512:	4654      	mov	r4, sl
   16514:	3b28      	subs	r3, #40	; 0x28
   16516:	409c      	lsls	r4, r3
   16518:	2300      	movs	r3, #0
   1651a:	e6b9      	b.n	16290 <__aeabi_dmul+0x17c>
   1651c:	f000 fd1a 	bl	16f54 <__clzsi2>
   16520:	3020      	adds	r0, #32
   16522:	e6a6      	b.n	16272 <__aeabi_dmul+0x15e>
   16524:	0003      	movs	r3, r0
   16526:	3b28      	subs	r3, #40	; 0x28
   16528:	409f      	lsls	r7, r3
   1652a:	2300      	movs	r3, #0
   1652c:	46bb      	mov	fp, r7
   1652e:	4699      	mov	r9, r3
   16530:	e68a      	b.n	16248 <__aeabi_dmul+0x134>
   16532:	f000 fd0f 	bl	16f54 <__clzsi2>
   16536:	3020      	adds	r0, #32
   16538:	e674      	b.n	16224 <__aeabi_dmul+0x110>
   1653a:	46b4      	mov	ip, r6
   1653c:	e7ad      	b.n	1649a <__aeabi_dmul+0x386>
   1653e:	2501      	movs	r5, #1
   16540:	1a2a      	subs	r2, r5, r0
   16542:	2a38      	cmp	r2, #56	; 0x38
   16544:	dd06      	ble.n	16554 <__aeabi_dmul+0x440>
   16546:	9b01      	ldr	r3, [sp, #4]
   16548:	2400      	movs	r4, #0
   1654a:	401d      	ands	r5, r3
   1654c:	2300      	movs	r3, #0
   1654e:	2200      	movs	r2, #0
   16550:	4699      	mov	r9, r3
   16552:	e646      	b.n	161e2 <__aeabi_dmul+0xce>
   16554:	2a1f      	cmp	r2, #31
   16556:	dc21      	bgt.n	1659c <__aeabi_dmul+0x488>
   16558:	2520      	movs	r5, #32
   1655a:	0020      	movs	r0, r4
   1655c:	1aad      	subs	r5, r5, r2
   1655e:	001e      	movs	r6, r3
   16560:	40ab      	lsls	r3, r5
   16562:	40a8      	lsls	r0, r5
   16564:	40d6      	lsrs	r6, r2
   16566:	1e5d      	subs	r5, r3, #1
   16568:	41ab      	sbcs	r3, r5
   1656a:	4330      	orrs	r0, r6
   1656c:	4318      	orrs	r0, r3
   1656e:	40d4      	lsrs	r4, r2
   16570:	0743      	lsls	r3, r0, #29
   16572:	d009      	beq.n	16588 <__aeabi_dmul+0x474>
   16574:	230f      	movs	r3, #15
   16576:	4003      	ands	r3, r0
   16578:	2b04      	cmp	r3, #4
   1657a:	d005      	beq.n	16588 <__aeabi_dmul+0x474>
   1657c:	0003      	movs	r3, r0
   1657e:	1d18      	adds	r0, r3, #4
   16580:	4298      	cmp	r0, r3
   16582:	419b      	sbcs	r3, r3
   16584:	425b      	negs	r3, r3
   16586:	18e4      	adds	r4, r4, r3
   16588:	0223      	lsls	r3, r4, #8
   1658a:	d521      	bpl.n	165d0 <__aeabi_dmul+0x4bc>
   1658c:	2501      	movs	r5, #1
   1658e:	9b01      	ldr	r3, [sp, #4]
   16590:	2401      	movs	r4, #1
   16592:	401d      	ands	r5, r3
   16594:	2300      	movs	r3, #0
   16596:	2200      	movs	r2, #0
   16598:	4699      	mov	r9, r3
   1659a:	e622      	b.n	161e2 <__aeabi_dmul+0xce>
   1659c:	251f      	movs	r5, #31
   1659e:	0021      	movs	r1, r4
   165a0:	426d      	negs	r5, r5
   165a2:	1a28      	subs	r0, r5, r0
   165a4:	40c1      	lsrs	r1, r0
   165a6:	0008      	movs	r0, r1
   165a8:	2a20      	cmp	r2, #32
   165aa:	d01d      	beq.n	165e8 <__aeabi_dmul+0x4d4>
   165ac:	355f      	adds	r5, #95	; 0x5f
   165ae:	1aaa      	subs	r2, r5, r2
   165b0:	4094      	lsls	r4, r2
   165b2:	4323      	orrs	r3, r4
   165b4:	1e5c      	subs	r4, r3, #1
   165b6:	41a3      	sbcs	r3, r4
   165b8:	2507      	movs	r5, #7
   165ba:	4303      	orrs	r3, r0
   165bc:	401d      	ands	r5, r3
   165be:	2200      	movs	r2, #0
   165c0:	2d00      	cmp	r5, #0
   165c2:	d009      	beq.n	165d8 <__aeabi_dmul+0x4c4>
   165c4:	220f      	movs	r2, #15
   165c6:	2400      	movs	r4, #0
   165c8:	401a      	ands	r2, r3
   165ca:	0018      	movs	r0, r3
   165cc:	2a04      	cmp	r2, #4
   165ce:	d1d6      	bne.n	1657e <__aeabi_dmul+0x46a>
   165d0:	0003      	movs	r3, r0
   165d2:	0765      	lsls	r5, r4, #29
   165d4:	0264      	lsls	r4, r4, #9
   165d6:	0b22      	lsrs	r2, r4, #12
   165d8:	08db      	lsrs	r3, r3, #3
   165da:	432b      	orrs	r3, r5
   165dc:	2501      	movs	r5, #1
   165de:	4699      	mov	r9, r3
   165e0:	9b01      	ldr	r3, [sp, #4]
   165e2:	2400      	movs	r4, #0
   165e4:	401d      	ands	r5, r3
   165e6:	e5fc      	b.n	161e2 <__aeabi_dmul+0xce>
   165e8:	2400      	movs	r4, #0
   165ea:	e7e2      	b.n	165b2 <__aeabi_dmul+0x49e>
   165ec:	2280      	movs	r2, #128	; 0x80
   165ee:	2501      	movs	r5, #1
   165f0:	0312      	lsls	r2, r2, #12
   165f2:	4322      	orrs	r2, r4
   165f4:	9901      	ldr	r1, [sp, #4]
   165f6:	0312      	lsls	r2, r2, #12
   165f8:	0b12      	lsrs	r2, r2, #12
   165fa:	400d      	ands	r5, r1
   165fc:	4699      	mov	r9, r3
   165fe:	4c04      	ldr	r4, [pc, #16]	; (16610 <__aeabi_dmul+0x4fc>)
   16600:	e5ef      	b.n	161e2 <__aeabi_dmul+0xce>
   16602:	46c0      	nop			; (mov r8, r8)
   16604:	000003ff 	.word	0x000003ff
   16608:	feffffff 	.word	0xfeffffff
   1660c:	000007fe 	.word	0x000007fe
   16610:	000007ff 	.word	0x000007ff

00016614 <__aeabi_dsub>:
   16614:	b5f0      	push	{r4, r5, r6, r7, lr}
   16616:	4646      	mov	r6, r8
   16618:	46d6      	mov	lr, sl
   1661a:	464f      	mov	r7, r9
   1661c:	030c      	lsls	r4, r1, #12
   1661e:	b5c0      	push	{r6, r7, lr}
   16620:	0fcd      	lsrs	r5, r1, #31
   16622:	004e      	lsls	r6, r1, #1
   16624:	0a61      	lsrs	r1, r4, #9
   16626:	0f44      	lsrs	r4, r0, #29
   16628:	430c      	orrs	r4, r1
   1662a:	00c1      	lsls	r1, r0, #3
   1662c:	0058      	lsls	r0, r3, #1
   1662e:	0d40      	lsrs	r0, r0, #21
   16630:	4684      	mov	ip, r0
   16632:	468a      	mov	sl, r1
   16634:	000f      	movs	r7, r1
   16636:	0319      	lsls	r1, r3, #12
   16638:	0f50      	lsrs	r0, r2, #29
   1663a:	0a49      	lsrs	r1, r1, #9
   1663c:	4301      	orrs	r1, r0
   1663e:	48c6      	ldr	r0, [pc, #792]	; (16958 <__aeabi_dsub+0x344>)
   16640:	0d76      	lsrs	r6, r6, #21
   16642:	46a8      	mov	r8, r5
   16644:	0fdb      	lsrs	r3, r3, #31
   16646:	00d2      	lsls	r2, r2, #3
   16648:	4584      	cmp	ip, r0
   1664a:	d100      	bne.n	1664e <__aeabi_dsub+0x3a>
   1664c:	e0d8      	b.n	16800 <__aeabi_dsub+0x1ec>
   1664e:	2001      	movs	r0, #1
   16650:	4043      	eors	r3, r0
   16652:	42ab      	cmp	r3, r5
   16654:	d100      	bne.n	16658 <__aeabi_dsub+0x44>
   16656:	e0a6      	b.n	167a6 <__aeabi_dsub+0x192>
   16658:	4660      	mov	r0, ip
   1665a:	1a35      	subs	r5, r6, r0
   1665c:	2d00      	cmp	r5, #0
   1665e:	dc00      	bgt.n	16662 <__aeabi_dsub+0x4e>
   16660:	e105      	b.n	1686e <__aeabi_dsub+0x25a>
   16662:	2800      	cmp	r0, #0
   16664:	d110      	bne.n	16688 <__aeabi_dsub+0x74>
   16666:	000b      	movs	r3, r1
   16668:	4313      	orrs	r3, r2
   1666a:	d100      	bne.n	1666e <__aeabi_dsub+0x5a>
   1666c:	e0d7      	b.n	1681e <__aeabi_dsub+0x20a>
   1666e:	1e6b      	subs	r3, r5, #1
   16670:	2b00      	cmp	r3, #0
   16672:	d000      	beq.n	16676 <__aeabi_dsub+0x62>
   16674:	e14b      	b.n	1690e <__aeabi_dsub+0x2fa>
   16676:	4653      	mov	r3, sl
   16678:	1a9f      	subs	r7, r3, r2
   1667a:	45ba      	cmp	sl, r7
   1667c:	4180      	sbcs	r0, r0
   1667e:	1a64      	subs	r4, r4, r1
   16680:	4240      	negs	r0, r0
   16682:	1a24      	subs	r4, r4, r0
   16684:	2601      	movs	r6, #1
   16686:	e01e      	b.n	166c6 <__aeabi_dsub+0xb2>
   16688:	4bb3      	ldr	r3, [pc, #716]	; (16958 <__aeabi_dsub+0x344>)
   1668a:	429e      	cmp	r6, r3
   1668c:	d048      	beq.n	16720 <__aeabi_dsub+0x10c>
   1668e:	2380      	movs	r3, #128	; 0x80
   16690:	041b      	lsls	r3, r3, #16
   16692:	4319      	orrs	r1, r3
   16694:	2d38      	cmp	r5, #56	; 0x38
   16696:	dd00      	ble.n	1669a <__aeabi_dsub+0x86>
   16698:	e119      	b.n	168ce <__aeabi_dsub+0x2ba>
   1669a:	2d1f      	cmp	r5, #31
   1669c:	dd00      	ble.n	166a0 <__aeabi_dsub+0x8c>
   1669e:	e14c      	b.n	1693a <__aeabi_dsub+0x326>
   166a0:	2320      	movs	r3, #32
   166a2:	000f      	movs	r7, r1
   166a4:	1b5b      	subs	r3, r3, r5
   166a6:	0010      	movs	r0, r2
   166a8:	409a      	lsls	r2, r3
   166aa:	409f      	lsls	r7, r3
   166ac:	40e8      	lsrs	r0, r5
   166ae:	1e53      	subs	r3, r2, #1
   166b0:	419a      	sbcs	r2, r3
   166b2:	40e9      	lsrs	r1, r5
   166b4:	4307      	orrs	r7, r0
   166b6:	4317      	orrs	r7, r2
   166b8:	4653      	mov	r3, sl
   166ba:	1bdf      	subs	r7, r3, r7
   166bc:	1a61      	subs	r1, r4, r1
   166be:	45ba      	cmp	sl, r7
   166c0:	41a4      	sbcs	r4, r4
   166c2:	4264      	negs	r4, r4
   166c4:	1b0c      	subs	r4, r1, r4
   166c6:	0223      	lsls	r3, r4, #8
   166c8:	d400      	bmi.n	166cc <__aeabi_dsub+0xb8>
   166ca:	e0c5      	b.n	16858 <__aeabi_dsub+0x244>
   166cc:	0264      	lsls	r4, r4, #9
   166ce:	0a65      	lsrs	r5, r4, #9
   166d0:	2d00      	cmp	r5, #0
   166d2:	d100      	bne.n	166d6 <__aeabi_dsub+0xc2>
   166d4:	e0f6      	b.n	168c4 <__aeabi_dsub+0x2b0>
   166d6:	0028      	movs	r0, r5
   166d8:	f000 fc3c 	bl	16f54 <__clzsi2>
   166dc:	0003      	movs	r3, r0
   166de:	3b08      	subs	r3, #8
   166e0:	2b1f      	cmp	r3, #31
   166e2:	dd00      	ble.n	166e6 <__aeabi_dsub+0xd2>
   166e4:	e0e9      	b.n	168ba <__aeabi_dsub+0x2a6>
   166e6:	2220      	movs	r2, #32
   166e8:	003c      	movs	r4, r7
   166ea:	1ad2      	subs	r2, r2, r3
   166ec:	409d      	lsls	r5, r3
   166ee:	40d4      	lsrs	r4, r2
   166f0:	409f      	lsls	r7, r3
   166f2:	4325      	orrs	r5, r4
   166f4:	429e      	cmp	r6, r3
   166f6:	dd00      	ble.n	166fa <__aeabi_dsub+0xe6>
   166f8:	e0db      	b.n	168b2 <__aeabi_dsub+0x29e>
   166fa:	1b9e      	subs	r6, r3, r6
   166fc:	1c73      	adds	r3, r6, #1
   166fe:	2b1f      	cmp	r3, #31
   16700:	dd00      	ble.n	16704 <__aeabi_dsub+0xf0>
   16702:	e10a      	b.n	1691a <__aeabi_dsub+0x306>
   16704:	2220      	movs	r2, #32
   16706:	0038      	movs	r0, r7
   16708:	1ad2      	subs	r2, r2, r3
   1670a:	0029      	movs	r1, r5
   1670c:	4097      	lsls	r7, r2
   1670e:	002c      	movs	r4, r5
   16710:	4091      	lsls	r1, r2
   16712:	40d8      	lsrs	r0, r3
   16714:	1e7a      	subs	r2, r7, #1
   16716:	4197      	sbcs	r7, r2
   16718:	40dc      	lsrs	r4, r3
   1671a:	2600      	movs	r6, #0
   1671c:	4301      	orrs	r1, r0
   1671e:	430f      	orrs	r7, r1
   16720:	077b      	lsls	r3, r7, #29
   16722:	d009      	beq.n	16738 <__aeabi_dsub+0x124>
   16724:	230f      	movs	r3, #15
   16726:	403b      	ands	r3, r7
   16728:	2b04      	cmp	r3, #4
   1672a:	d005      	beq.n	16738 <__aeabi_dsub+0x124>
   1672c:	1d3b      	adds	r3, r7, #4
   1672e:	42bb      	cmp	r3, r7
   16730:	41bf      	sbcs	r7, r7
   16732:	427f      	negs	r7, r7
   16734:	19e4      	adds	r4, r4, r7
   16736:	001f      	movs	r7, r3
   16738:	0223      	lsls	r3, r4, #8
   1673a:	d525      	bpl.n	16788 <__aeabi_dsub+0x174>
   1673c:	4b86      	ldr	r3, [pc, #536]	; (16958 <__aeabi_dsub+0x344>)
   1673e:	3601      	adds	r6, #1
   16740:	429e      	cmp	r6, r3
   16742:	d100      	bne.n	16746 <__aeabi_dsub+0x132>
   16744:	e0af      	b.n	168a6 <__aeabi_dsub+0x292>
   16746:	4b85      	ldr	r3, [pc, #532]	; (1695c <__aeabi_dsub+0x348>)
   16748:	2501      	movs	r5, #1
   1674a:	401c      	ands	r4, r3
   1674c:	4643      	mov	r3, r8
   1674e:	0762      	lsls	r2, r4, #29
   16750:	08ff      	lsrs	r7, r7, #3
   16752:	0264      	lsls	r4, r4, #9
   16754:	0576      	lsls	r6, r6, #21
   16756:	4317      	orrs	r7, r2
   16758:	0b24      	lsrs	r4, r4, #12
   1675a:	0d76      	lsrs	r6, r6, #21
   1675c:	401d      	ands	r5, r3
   1675e:	2100      	movs	r1, #0
   16760:	0324      	lsls	r4, r4, #12
   16762:	0b23      	lsrs	r3, r4, #12
   16764:	0d0c      	lsrs	r4, r1, #20
   16766:	4a7e      	ldr	r2, [pc, #504]	; (16960 <__aeabi_dsub+0x34c>)
   16768:	0524      	lsls	r4, r4, #20
   1676a:	431c      	orrs	r4, r3
   1676c:	4014      	ands	r4, r2
   1676e:	0533      	lsls	r3, r6, #20
   16770:	4323      	orrs	r3, r4
   16772:	005b      	lsls	r3, r3, #1
   16774:	07ed      	lsls	r5, r5, #31
   16776:	085b      	lsrs	r3, r3, #1
   16778:	432b      	orrs	r3, r5
   1677a:	0038      	movs	r0, r7
   1677c:	0019      	movs	r1, r3
   1677e:	bc1c      	pop	{r2, r3, r4}
   16780:	4690      	mov	r8, r2
   16782:	4699      	mov	r9, r3
   16784:	46a2      	mov	sl, r4
   16786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16788:	2501      	movs	r5, #1
   1678a:	4643      	mov	r3, r8
   1678c:	0762      	lsls	r2, r4, #29
   1678e:	08ff      	lsrs	r7, r7, #3
   16790:	4317      	orrs	r7, r2
   16792:	08e4      	lsrs	r4, r4, #3
   16794:	401d      	ands	r5, r3
   16796:	4b70      	ldr	r3, [pc, #448]	; (16958 <__aeabi_dsub+0x344>)
   16798:	429e      	cmp	r6, r3
   1679a:	d036      	beq.n	1680a <__aeabi_dsub+0x1f6>
   1679c:	0324      	lsls	r4, r4, #12
   1679e:	0576      	lsls	r6, r6, #21
   167a0:	0b24      	lsrs	r4, r4, #12
   167a2:	0d76      	lsrs	r6, r6, #21
   167a4:	e7db      	b.n	1675e <__aeabi_dsub+0x14a>
   167a6:	4663      	mov	r3, ip
   167a8:	1af3      	subs	r3, r6, r3
   167aa:	2b00      	cmp	r3, #0
   167ac:	dc00      	bgt.n	167b0 <__aeabi_dsub+0x19c>
   167ae:	e094      	b.n	168da <__aeabi_dsub+0x2c6>
   167b0:	4660      	mov	r0, ip
   167b2:	2800      	cmp	r0, #0
   167b4:	d035      	beq.n	16822 <__aeabi_dsub+0x20e>
   167b6:	4868      	ldr	r0, [pc, #416]	; (16958 <__aeabi_dsub+0x344>)
   167b8:	4286      	cmp	r6, r0
   167ba:	d0b1      	beq.n	16720 <__aeabi_dsub+0x10c>
   167bc:	2780      	movs	r7, #128	; 0x80
   167be:	043f      	lsls	r7, r7, #16
   167c0:	4339      	orrs	r1, r7
   167c2:	2b38      	cmp	r3, #56	; 0x38
   167c4:	dc00      	bgt.n	167c8 <__aeabi_dsub+0x1b4>
   167c6:	e0fd      	b.n	169c4 <__aeabi_dsub+0x3b0>
   167c8:	430a      	orrs	r2, r1
   167ca:	0017      	movs	r7, r2
   167cc:	2100      	movs	r1, #0
   167ce:	1e7a      	subs	r2, r7, #1
   167d0:	4197      	sbcs	r7, r2
   167d2:	4457      	add	r7, sl
   167d4:	4557      	cmp	r7, sl
   167d6:	4180      	sbcs	r0, r0
   167d8:	1909      	adds	r1, r1, r4
   167da:	4244      	negs	r4, r0
   167dc:	190c      	adds	r4, r1, r4
   167de:	0223      	lsls	r3, r4, #8
   167e0:	d53a      	bpl.n	16858 <__aeabi_dsub+0x244>
   167e2:	4b5d      	ldr	r3, [pc, #372]	; (16958 <__aeabi_dsub+0x344>)
   167e4:	3601      	adds	r6, #1
   167e6:	429e      	cmp	r6, r3
   167e8:	d100      	bne.n	167ec <__aeabi_dsub+0x1d8>
   167ea:	e14b      	b.n	16a84 <__aeabi_dsub+0x470>
   167ec:	2201      	movs	r2, #1
   167ee:	4b5b      	ldr	r3, [pc, #364]	; (1695c <__aeabi_dsub+0x348>)
   167f0:	401c      	ands	r4, r3
   167f2:	087b      	lsrs	r3, r7, #1
   167f4:	4017      	ands	r7, r2
   167f6:	431f      	orrs	r7, r3
   167f8:	07e2      	lsls	r2, r4, #31
   167fa:	4317      	orrs	r7, r2
   167fc:	0864      	lsrs	r4, r4, #1
   167fe:	e78f      	b.n	16720 <__aeabi_dsub+0x10c>
   16800:	0008      	movs	r0, r1
   16802:	4310      	orrs	r0, r2
   16804:	d000      	beq.n	16808 <__aeabi_dsub+0x1f4>
   16806:	e724      	b.n	16652 <__aeabi_dsub+0x3e>
   16808:	e721      	b.n	1664e <__aeabi_dsub+0x3a>
   1680a:	0023      	movs	r3, r4
   1680c:	433b      	orrs	r3, r7
   1680e:	d100      	bne.n	16812 <__aeabi_dsub+0x1fe>
   16810:	e1b9      	b.n	16b86 <__aeabi_dsub+0x572>
   16812:	2280      	movs	r2, #128	; 0x80
   16814:	0312      	lsls	r2, r2, #12
   16816:	4314      	orrs	r4, r2
   16818:	0324      	lsls	r4, r4, #12
   1681a:	0b24      	lsrs	r4, r4, #12
   1681c:	e79f      	b.n	1675e <__aeabi_dsub+0x14a>
   1681e:	002e      	movs	r6, r5
   16820:	e77e      	b.n	16720 <__aeabi_dsub+0x10c>
   16822:	0008      	movs	r0, r1
   16824:	4310      	orrs	r0, r2
   16826:	d100      	bne.n	1682a <__aeabi_dsub+0x216>
   16828:	e0ca      	b.n	169c0 <__aeabi_dsub+0x3ac>
   1682a:	1e58      	subs	r0, r3, #1
   1682c:	4684      	mov	ip, r0
   1682e:	2800      	cmp	r0, #0
   16830:	d000      	beq.n	16834 <__aeabi_dsub+0x220>
   16832:	e0e7      	b.n	16a04 <__aeabi_dsub+0x3f0>
   16834:	4452      	add	r2, sl
   16836:	4552      	cmp	r2, sl
   16838:	4180      	sbcs	r0, r0
   1683a:	1864      	adds	r4, r4, r1
   1683c:	4240      	negs	r0, r0
   1683e:	1824      	adds	r4, r4, r0
   16840:	0017      	movs	r7, r2
   16842:	2601      	movs	r6, #1
   16844:	0223      	lsls	r3, r4, #8
   16846:	d507      	bpl.n	16858 <__aeabi_dsub+0x244>
   16848:	2602      	movs	r6, #2
   1684a:	e7cf      	b.n	167ec <__aeabi_dsub+0x1d8>
   1684c:	4664      	mov	r4, ip
   1684e:	432c      	orrs	r4, r5
   16850:	d100      	bne.n	16854 <__aeabi_dsub+0x240>
   16852:	e1b3      	b.n	16bbc <__aeabi_dsub+0x5a8>
   16854:	002c      	movs	r4, r5
   16856:	4667      	mov	r7, ip
   16858:	077b      	lsls	r3, r7, #29
   1685a:	d000      	beq.n	1685e <__aeabi_dsub+0x24a>
   1685c:	e762      	b.n	16724 <__aeabi_dsub+0x110>
   1685e:	0763      	lsls	r3, r4, #29
   16860:	08ff      	lsrs	r7, r7, #3
   16862:	431f      	orrs	r7, r3
   16864:	2501      	movs	r5, #1
   16866:	4643      	mov	r3, r8
   16868:	08e4      	lsrs	r4, r4, #3
   1686a:	401d      	ands	r5, r3
   1686c:	e793      	b.n	16796 <__aeabi_dsub+0x182>
   1686e:	2d00      	cmp	r5, #0
   16870:	d178      	bne.n	16964 <__aeabi_dsub+0x350>
   16872:	1c75      	adds	r5, r6, #1
   16874:	056d      	lsls	r5, r5, #21
   16876:	0d6d      	lsrs	r5, r5, #21
   16878:	2d01      	cmp	r5, #1
   1687a:	dc00      	bgt.n	1687e <__aeabi_dsub+0x26a>
   1687c:	e0f2      	b.n	16a64 <__aeabi_dsub+0x450>
   1687e:	4650      	mov	r0, sl
   16880:	1a80      	subs	r0, r0, r2
   16882:	4582      	cmp	sl, r0
   16884:	41bf      	sbcs	r7, r7
   16886:	1a65      	subs	r5, r4, r1
   16888:	427f      	negs	r7, r7
   1688a:	1bed      	subs	r5, r5, r7
   1688c:	4684      	mov	ip, r0
   1688e:	0228      	lsls	r0, r5, #8
   16890:	d400      	bmi.n	16894 <__aeabi_dsub+0x280>
   16892:	e08c      	b.n	169ae <__aeabi_dsub+0x39a>
   16894:	4650      	mov	r0, sl
   16896:	1a17      	subs	r7, r2, r0
   16898:	42ba      	cmp	r2, r7
   1689a:	4192      	sbcs	r2, r2
   1689c:	1b0c      	subs	r4, r1, r4
   1689e:	4255      	negs	r5, r2
   168a0:	1b65      	subs	r5, r4, r5
   168a2:	4698      	mov	r8, r3
   168a4:	e714      	b.n	166d0 <__aeabi_dsub+0xbc>
   168a6:	2501      	movs	r5, #1
   168a8:	4643      	mov	r3, r8
   168aa:	2400      	movs	r4, #0
   168ac:	401d      	ands	r5, r3
   168ae:	2700      	movs	r7, #0
   168b0:	e755      	b.n	1675e <__aeabi_dsub+0x14a>
   168b2:	4c2a      	ldr	r4, [pc, #168]	; (1695c <__aeabi_dsub+0x348>)
   168b4:	1af6      	subs	r6, r6, r3
   168b6:	402c      	ands	r4, r5
   168b8:	e732      	b.n	16720 <__aeabi_dsub+0x10c>
   168ba:	003d      	movs	r5, r7
   168bc:	3828      	subs	r0, #40	; 0x28
   168be:	4085      	lsls	r5, r0
   168c0:	2700      	movs	r7, #0
   168c2:	e717      	b.n	166f4 <__aeabi_dsub+0xe0>
   168c4:	0038      	movs	r0, r7
   168c6:	f000 fb45 	bl	16f54 <__clzsi2>
   168ca:	3020      	adds	r0, #32
   168cc:	e706      	b.n	166dc <__aeabi_dsub+0xc8>
   168ce:	430a      	orrs	r2, r1
   168d0:	0017      	movs	r7, r2
   168d2:	2100      	movs	r1, #0
   168d4:	1e7a      	subs	r2, r7, #1
   168d6:	4197      	sbcs	r7, r2
   168d8:	e6ee      	b.n	166b8 <__aeabi_dsub+0xa4>
   168da:	2b00      	cmp	r3, #0
   168dc:	d000      	beq.n	168e0 <__aeabi_dsub+0x2cc>
   168de:	e0e5      	b.n	16aac <__aeabi_dsub+0x498>
   168e0:	1c73      	adds	r3, r6, #1
   168e2:	469c      	mov	ip, r3
   168e4:	055b      	lsls	r3, r3, #21
   168e6:	0d5b      	lsrs	r3, r3, #21
   168e8:	2b01      	cmp	r3, #1
   168ea:	dc00      	bgt.n	168ee <__aeabi_dsub+0x2da>
   168ec:	e09f      	b.n	16a2e <__aeabi_dsub+0x41a>
   168ee:	4b1a      	ldr	r3, [pc, #104]	; (16958 <__aeabi_dsub+0x344>)
   168f0:	459c      	cmp	ip, r3
   168f2:	d100      	bne.n	168f6 <__aeabi_dsub+0x2e2>
   168f4:	e0c5      	b.n	16a82 <__aeabi_dsub+0x46e>
   168f6:	4452      	add	r2, sl
   168f8:	4552      	cmp	r2, sl
   168fa:	4180      	sbcs	r0, r0
   168fc:	1864      	adds	r4, r4, r1
   168fe:	4240      	negs	r0, r0
   16900:	1824      	adds	r4, r4, r0
   16902:	07e7      	lsls	r7, r4, #31
   16904:	0852      	lsrs	r2, r2, #1
   16906:	4317      	orrs	r7, r2
   16908:	0864      	lsrs	r4, r4, #1
   1690a:	4666      	mov	r6, ip
   1690c:	e708      	b.n	16720 <__aeabi_dsub+0x10c>
   1690e:	4812      	ldr	r0, [pc, #72]	; (16958 <__aeabi_dsub+0x344>)
   16910:	4285      	cmp	r5, r0
   16912:	d100      	bne.n	16916 <__aeabi_dsub+0x302>
   16914:	e085      	b.n	16a22 <__aeabi_dsub+0x40e>
   16916:	001d      	movs	r5, r3
   16918:	e6bc      	b.n	16694 <__aeabi_dsub+0x80>
   1691a:	0029      	movs	r1, r5
   1691c:	3e1f      	subs	r6, #31
   1691e:	40f1      	lsrs	r1, r6
   16920:	2b20      	cmp	r3, #32
   16922:	d100      	bne.n	16926 <__aeabi_dsub+0x312>
   16924:	e07f      	b.n	16a26 <__aeabi_dsub+0x412>
   16926:	2240      	movs	r2, #64	; 0x40
   16928:	1ad3      	subs	r3, r2, r3
   1692a:	409d      	lsls	r5, r3
   1692c:	432f      	orrs	r7, r5
   1692e:	1e7d      	subs	r5, r7, #1
   16930:	41af      	sbcs	r7, r5
   16932:	2400      	movs	r4, #0
   16934:	430f      	orrs	r7, r1
   16936:	2600      	movs	r6, #0
   16938:	e78e      	b.n	16858 <__aeabi_dsub+0x244>
   1693a:	002b      	movs	r3, r5
   1693c:	000f      	movs	r7, r1
   1693e:	3b20      	subs	r3, #32
   16940:	40df      	lsrs	r7, r3
   16942:	2d20      	cmp	r5, #32
   16944:	d071      	beq.n	16a2a <__aeabi_dsub+0x416>
   16946:	2340      	movs	r3, #64	; 0x40
   16948:	1b5d      	subs	r5, r3, r5
   1694a:	40a9      	lsls	r1, r5
   1694c:	430a      	orrs	r2, r1
   1694e:	1e51      	subs	r1, r2, #1
   16950:	418a      	sbcs	r2, r1
   16952:	2100      	movs	r1, #0
   16954:	4317      	orrs	r7, r2
   16956:	e6af      	b.n	166b8 <__aeabi_dsub+0xa4>
   16958:	000007ff 	.word	0x000007ff
   1695c:	ff7fffff 	.word	0xff7fffff
   16960:	800fffff 	.word	0x800fffff
   16964:	2e00      	cmp	r6, #0
   16966:	d03e      	beq.n	169e6 <__aeabi_dsub+0x3d2>
   16968:	4eb3      	ldr	r6, [pc, #716]	; (16c38 <__aeabi_dsub+0x624>)
   1696a:	45b4      	cmp	ip, r6
   1696c:	d045      	beq.n	169fa <__aeabi_dsub+0x3e6>
   1696e:	2680      	movs	r6, #128	; 0x80
   16970:	0436      	lsls	r6, r6, #16
   16972:	426d      	negs	r5, r5
   16974:	4334      	orrs	r4, r6
   16976:	2d38      	cmp	r5, #56	; 0x38
   16978:	dd00      	ble.n	1697c <__aeabi_dsub+0x368>
   1697a:	e0a8      	b.n	16ace <__aeabi_dsub+0x4ba>
   1697c:	2d1f      	cmp	r5, #31
   1697e:	dd00      	ble.n	16982 <__aeabi_dsub+0x36e>
   16980:	e11f      	b.n	16bc2 <__aeabi_dsub+0x5ae>
   16982:	2620      	movs	r6, #32
   16984:	0027      	movs	r7, r4
   16986:	4650      	mov	r0, sl
   16988:	1b76      	subs	r6, r6, r5
   1698a:	40b7      	lsls	r7, r6
   1698c:	40e8      	lsrs	r0, r5
   1698e:	4307      	orrs	r7, r0
   16990:	4650      	mov	r0, sl
   16992:	40b0      	lsls	r0, r6
   16994:	1e46      	subs	r6, r0, #1
   16996:	41b0      	sbcs	r0, r6
   16998:	40ec      	lsrs	r4, r5
   1699a:	4338      	orrs	r0, r7
   1699c:	1a17      	subs	r7, r2, r0
   1699e:	42ba      	cmp	r2, r7
   169a0:	4192      	sbcs	r2, r2
   169a2:	1b0c      	subs	r4, r1, r4
   169a4:	4252      	negs	r2, r2
   169a6:	1aa4      	subs	r4, r4, r2
   169a8:	4666      	mov	r6, ip
   169aa:	4698      	mov	r8, r3
   169ac:	e68b      	b.n	166c6 <__aeabi_dsub+0xb2>
   169ae:	4664      	mov	r4, ip
   169b0:	4667      	mov	r7, ip
   169b2:	432c      	orrs	r4, r5
   169b4:	d000      	beq.n	169b8 <__aeabi_dsub+0x3a4>
   169b6:	e68b      	b.n	166d0 <__aeabi_dsub+0xbc>
   169b8:	2500      	movs	r5, #0
   169ba:	2600      	movs	r6, #0
   169bc:	2700      	movs	r7, #0
   169be:	e6ea      	b.n	16796 <__aeabi_dsub+0x182>
   169c0:	001e      	movs	r6, r3
   169c2:	e6ad      	b.n	16720 <__aeabi_dsub+0x10c>
   169c4:	2b1f      	cmp	r3, #31
   169c6:	dc60      	bgt.n	16a8a <__aeabi_dsub+0x476>
   169c8:	2720      	movs	r7, #32
   169ca:	1af8      	subs	r0, r7, r3
   169cc:	000f      	movs	r7, r1
   169ce:	4684      	mov	ip, r0
   169d0:	4087      	lsls	r7, r0
   169d2:	0010      	movs	r0, r2
   169d4:	40d8      	lsrs	r0, r3
   169d6:	4307      	orrs	r7, r0
   169d8:	4660      	mov	r0, ip
   169da:	4082      	lsls	r2, r0
   169dc:	1e50      	subs	r0, r2, #1
   169de:	4182      	sbcs	r2, r0
   169e0:	40d9      	lsrs	r1, r3
   169e2:	4317      	orrs	r7, r2
   169e4:	e6f5      	b.n	167d2 <__aeabi_dsub+0x1be>
   169e6:	0026      	movs	r6, r4
   169e8:	4650      	mov	r0, sl
   169ea:	4306      	orrs	r6, r0
   169ec:	d005      	beq.n	169fa <__aeabi_dsub+0x3e6>
   169ee:	43ed      	mvns	r5, r5
   169f0:	2d00      	cmp	r5, #0
   169f2:	d0d3      	beq.n	1699c <__aeabi_dsub+0x388>
   169f4:	4e90      	ldr	r6, [pc, #576]	; (16c38 <__aeabi_dsub+0x624>)
   169f6:	45b4      	cmp	ip, r6
   169f8:	d1bd      	bne.n	16976 <__aeabi_dsub+0x362>
   169fa:	000c      	movs	r4, r1
   169fc:	0017      	movs	r7, r2
   169fe:	4666      	mov	r6, ip
   16a00:	4698      	mov	r8, r3
   16a02:	e68d      	b.n	16720 <__aeabi_dsub+0x10c>
   16a04:	488c      	ldr	r0, [pc, #560]	; (16c38 <__aeabi_dsub+0x624>)
   16a06:	4283      	cmp	r3, r0
   16a08:	d00b      	beq.n	16a22 <__aeabi_dsub+0x40e>
   16a0a:	4663      	mov	r3, ip
   16a0c:	e6d9      	b.n	167c2 <__aeabi_dsub+0x1ae>
   16a0e:	2d00      	cmp	r5, #0
   16a10:	d000      	beq.n	16a14 <__aeabi_dsub+0x400>
   16a12:	e096      	b.n	16b42 <__aeabi_dsub+0x52e>
   16a14:	0008      	movs	r0, r1
   16a16:	4310      	orrs	r0, r2
   16a18:	d100      	bne.n	16a1c <__aeabi_dsub+0x408>
   16a1a:	e0e2      	b.n	16be2 <__aeabi_dsub+0x5ce>
   16a1c:	000c      	movs	r4, r1
   16a1e:	0017      	movs	r7, r2
   16a20:	4698      	mov	r8, r3
   16a22:	4e85      	ldr	r6, [pc, #532]	; (16c38 <__aeabi_dsub+0x624>)
   16a24:	e67c      	b.n	16720 <__aeabi_dsub+0x10c>
   16a26:	2500      	movs	r5, #0
   16a28:	e780      	b.n	1692c <__aeabi_dsub+0x318>
   16a2a:	2100      	movs	r1, #0
   16a2c:	e78e      	b.n	1694c <__aeabi_dsub+0x338>
   16a2e:	0023      	movs	r3, r4
   16a30:	4650      	mov	r0, sl
   16a32:	4303      	orrs	r3, r0
   16a34:	2e00      	cmp	r6, #0
   16a36:	d000      	beq.n	16a3a <__aeabi_dsub+0x426>
   16a38:	e0a8      	b.n	16b8c <__aeabi_dsub+0x578>
   16a3a:	2b00      	cmp	r3, #0
   16a3c:	d100      	bne.n	16a40 <__aeabi_dsub+0x42c>
   16a3e:	e0de      	b.n	16bfe <__aeabi_dsub+0x5ea>
   16a40:	000b      	movs	r3, r1
   16a42:	4313      	orrs	r3, r2
   16a44:	d100      	bne.n	16a48 <__aeabi_dsub+0x434>
   16a46:	e66b      	b.n	16720 <__aeabi_dsub+0x10c>
   16a48:	4452      	add	r2, sl
   16a4a:	4552      	cmp	r2, sl
   16a4c:	4180      	sbcs	r0, r0
   16a4e:	1864      	adds	r4, r4, r1
   16a50:	4240      	negs	r0, r0
   16a52:	1824      	adds	r4, r4, r0
   16a54:	0017      	movs	r7, r2
   16a56:	0223      	lsls	r3, r4, #8
   16a58:	d400      	bmi.n	16a5c <__aeabi_dsub+0x448>
   16a5a:	e6fd      	b.n	16858 <__aeabi_dsub+0x244>
   16a5c:	4b77      	ldr	r3, [pc, #476]	; (16c3c <__aeabi_dsub+0x628>)
   16a5e:	4666      	mov	r6, ip
   16a60:	401c      	ands	r4, r3
   16a62:	e65d      	b.n	16720 <__aeabi_dsub+0x10c>
   16a64:	0025      	movs	r5, r4
   16a66:	4650      	mov	r0, sl
   16a68:	4305      	orrs	r5, r0
   16a6a:	2e00      	cmp	r6, #0
   16a6c:	d1cf      	bne.n	16a0e <__aeabi_dsub+0x3fa>
   16a6e:	2d00      	cmp	r5, #0
   16a70:	d14f      	bne.n	16b12 <__aeabi_dsub+0x4fe>
   16a72:	000c      	movs	r4, r1
   16a74:	4314      	orrs	r4, r2
   16a76:	d100      	bne.n	16a7a <__aeabi_dsub+0x466>
   16a78:	e0a0      	b.n	16bbc <__aeabi_dsub+0x5a8>
   16a7a:	000c      	movs	r4, r1
   16a7c:	0017      	movs	r7, r2
   16a7e:	4698      	mov	r8, r3
   16a80:	e64e      	b.n	16720 <__aeabi_dsub+0x10c>
   16a82:	4666      	mov	r6, ip
   16a84:	2400      	movs	r4, #0
   16a86:	2700      	movs	r7, #0
   16a88:	e685      	b.n	16796 <__aeabi_dsub+0x182>
   16a8a:	001f      	movs	r7, r3
   16a8c:	0008      	movs	r0, r1
   16a8e:	3f20      	subs	r7, #32
   16a90:	40f8      	lsrs	r0, r7
   16a92:	0007      	movs	r7, r0
   16a94:	2b20      	cmp	r3, #32
   16a96:	d100      	bne.n	16a9a <__aeabi_dsub+0x486>
   16a98:	e08e      	b.n	16bb8 <__aeabi_dsub+0x5a4>
   16a9a:	2040      	movs	r0, #64	; 0x40
   16a9c:	1ac3      	subs	r3, r0, r3
   16a9e:	4099      	lsls	r1, r3
   16aa0:	430a      	orrs	r2, r1
   16aa2:	1e51      	subs	r1, r2, #1
   16aa4:	418a      	sbcs	r2, r1
   16aa6:	2100      	movs	r1, #0
   16aa8:	4317      	orrs	r7, r2
   16aaa:	e692      	b.n	167d2 <__aeabi_dsub+0x1be>
   16aac:	2e00      	cmp	r6, #0
   16aae:	d114      	bne.n	16ada <__aeabi_dsub+0x4c6>
   16ab0:	0026      	movs	r6, r4
   16ab2:	4650      	mov	r0, sl
   16ab4:	4306      	orrs	r6, r0
   16ab6:	d062      	beq.n	16b7e <__aeabi_dsub+0x56a>
   16ab8:	43db      	mvns	r3, r3
   16aba:	2b00      	cmp	r3, #0
   16abc:	d15c      	bne.n	16b78 <__aeabi_dsub+0x564>
   16abe:	1887      	adds	r7, r0, r2
   16ac0:	4297      	cmp	r7, r2
   16ac2:	4192      	sbcs	r2, r2
   16ac4:	1864      	adds	r4, r4, r1
   16ac6:	4252      	negs	r2, r2
   16ac8:	18a4      	adds	r4, r4, r2
   16aca:	4666      	mov	r6, ip
   16acc:	e687      	b.n	167de <__aeabi_dsub+0x1ca>
   16ace:	4650      	mov	r0, sl
   16ad0:	4320      	orrs	r0, r4
   16ad2:	1e44      	subs	r4, r0, #1
   16ad4:	41a0      	sbcs	r0, r4
   16ad6:	2400      	movs	r4, #0
   16ad8:	e760      	b.n	1699c <__aeabi_dsub+0x388>
   16ada:	4e57      	ldr	r6, [pc, #348]	; (16c38 <__aeabi_dsub+0x624>)
   16adc:	45b4      	cmp	ip, r6
   16ade:	d04e      	beq.n	16b7e <__aeabi_dsub+0x56a>
   16ae0:	2680      	movs	r6, #128	; 0x80
   16ae2:	0436      	lsls	r6, r6, #16
   16ae4:	425b      	negs	r3, r3
   16ae6:	4334      	orrs	r4, r6
   16ae8:	2b38      	cmp	r3, #56	; 0x38
   16aea:	dd00      	ble.n	16aee <__aeabi_dsub+0x4da>
   16aec:	e07f      	b.n	16bee <__aeabi_dsub+0x5da>
   16aee:	2b1f      	cmp	r3, #31
   16af0:	dd00      	ble.n	16af4 <__aeabi_dsub+0x4e0>
   16af2:	e08b      	b.n	16c0c <__aeabi_dsub+0x5f8>
   16af4:	2620      	movs	r6, #32
   16af6:	0027      	movs	r7, r4
   16af8:	4650      	mov	r0, sl
   16afa:	1af6      	subs	r6, r6, r3
   16afc:	40b7      	lsls	r7, r6
   16afe:	40d8      	lsrs	r0, r3
   16b00:	4307      	orrs	r7, r0
   16b02:	4650      	mov	r0, sl
   16b04:	40b0      	lsls	r0, r6
   16b06:	1e46      	subs	r6, r0, #1
   16b08:	41b0      	sbcs	r0, r6
   16b0a:	4307      	orrs	r7, r0
   16b0c:	40dc      	lsrs	r4, r3
   16b0e:	18bf      	adds	r7, r7, r2
   16b10:	e7d6      	b.n	16ac0 <__aeabi_dsub+0x4ac>
   16b12:	000d      	movs	r5, r1
   16b14:	4315      	orrs	r5, r2
   16b16:	d100      	bne.n	16b1a <__aeabi_dsub+0x506>
   16b18:	e602      	b.n	16720 <__aeabi_dsub+0x10c>
   16b1a:	4650      	mov	r0, sl
   16b1c:	1a80      	subs	r0, r0, r2
   16b1e:	4582      	cmp	sl, r0
   16b20:	41bf      	sbcs	r7, r7
   16b22:	1a65      	subs	r5, r4, r1
   16b24:	427f      	negs	r7, r7
   16b26:	1bed      	subs	r5, r5, r7
   16b28:	4684      	mov	ip, r0
   16b2a:	0228      	lsls	r0, r5, #8
   16b2c:	d400      	bmi.n	16b30 <__aeabi_dsub+0x51c>
   16b2e:	e68d      	b.n	1684c <__aeabi_dsub+0x238>
   16b30:	4650      	mov	r0, sl
   16b32:	1a17      	subs	r7, r2, r0
   16b34:	42ba      	cmp	r2, r7
   16b36:	4192      	sbcs	r2, r2
   16b38:	1b0c      	subs	r4, r1, r4
   16b3a:	4252      	negs	r2, r2
   16b3c:	1aa4      	subs	r4, r4, r2
   16b3e:	4698      	mov	r8, r3
   16b40:	e5ee      	b.n	16720 <__aeabi_dsub+0x10c>
   16b42:	000d      	movs	r5, r1
   16b44:	4315      	orrs	r5, r2
   16b46:	d100      	bne.n	16b4a <__aeabi_dsub+0x536>
   16b48:	e76b      	b.n	16a22 <__aeabi_dsub+0x40e>
   16b4a:	4650      	mov	r0, sl
   16b4c:	0767      	lsls	r7, r4, #29
   16b4e:	08c0      	lsrs	r0, r0, #3
   16b50:	4307      	orrs	r7, r0
   16b52:	2080      	movs	r0, #128	; 0x80
   16b54:	08e4      	lsrs	r4, r4, #3
   16b56:	0300      	lsls	r0, r0, #12
   16b58:	4204      	tst	r4, r0
   16b5a:	d007      	beq.n	16b6c <__aeabi_dsub+0x558>
   16b5c:	08cd      	lsrs	r5, r1, #3
   16b5e:	4205      	tst	r5, r0
   16b60:	d104      	bne.n	16b6c <__aeabi_dsub+0x558>
   16b62:	002c      	movs	r4, r5
   16b64:	4698      	mov	r8, r3
   16b66:	08d7      	lsrs	r7, r2, #3
   16b68:	0749      	lsls	r1, r1, #29
   16b6a:	430f      	orrs	r7, r1
   16b6c:	0f7b      	lsrs	r3, r7, #29
   16b6e:	00e4      	lsls	r4, r4, #3
   16b70:	431c      	orrs	r4, r3
   16b72:	00ff      	lsls	r7, r7, #3
   16b74:	4e30      	ldr	r6, [pc, #192]	; (16c38 <__aeabi_dsub+0x624>)
   16b76:	e5d3      	b.n	16720 <__aeabi_dsub+0x10c>
   16b78:	4e2f      	ldr	r6, [pc, #188]	; (16c38 <__aeabi_dsub+0x624>)
   16b7a:	45b4      	cmp	ip, r6
   16b7c:	d1b4      	bne.n	16ae8 <__aeabi_dsub+0x4d4>
   16b7e:	000c      	movs	r4, r1
   16b80:	0017      	movs	r7, r2
   16b82:	4666      	mov	r6, ip
   16b84:	e5cc      	b.n	16720 <__aeabi_dsub+0x10c>
   16b86:	2700      	movs	r7, #0
   16b88:	2400      	movs	r4, #0
   16b8a:	e5e8      	b.n	1675e <__aeabi_dsub+0x14a>
   16b8c:	2b00      	cmp	r3, #0
   16b8e:	d039      	beq.n	16c04 <__aeabi_dsub+0x5f0>
   16b90:	000b      	movs	r3, r1
   16b92:	4313      	orrs	r3, r2
   16b94:	d100      	bne.n	16b98 <__aeabi_dsub+0x584>
   16b96:	e744      	b.n	16a22 <__aeabi_dsub+0x40e>
   16b98:	08c0      	lsrs	r0, r0, #3
   16b9a:	0767      	lsls	r7, r4, #29
   16b9c:	4307      	orrs	r7, r0
   16b9e:	2080      	movs	r0, #128	; 0x80
   16ba0:	08e4      	lsrs	r4, r4, #3
   16ba2:	0300      	lsls	r0, r0, #12
   16ba4:	4204      	tst	r4, r0
   16ba6:	d0e1      	beq.n	16b6c <__aeabi_dsub+0x558>
   16ba8:	08cb      	lsrs	r3, r1, #3
   16baa:	4203      	tst	r3, r0
   16bac:	d1de      	bne.n	16b6c <__aeabi_dsub+0x558>
   16bae:	08d7      	lsrs	r7, r2, #3
   16bb0:	0749      	lsls	r1, r1, #29
   16bb2:	430f      	orrs	r7, r1
   16bb4:	001c      	movs	r4, r3
   16bb6:	e7d9      	b.n	16b6c <__aeabi_dsub+0x558>
   16bb8:	2100      	movs	r1, #0
   16bba:	e771      	b.n	16aa0 <__aeabi_dsub+0x48c>
   16bbc:	2500      	movs	r5, #0
   16bbe:	2700      	movs	r7, #0
   16bc0:	e5e9      	b.n	16796 <__aeabi_dsub+0x182>
   16bc2:	002e      	movs	r6, r5
   16bc4:	0027      	movs	r7, r4
   16bc6:	3e20      	subs	r6, #32
   16bc8:	40f7      	lsrs	r7, r6
   16bca:	2d20      	cmp	r5, #32
   16bcc:	d02f      	beq.n	16c2e <__aeabi_dsub+0x61a>
   16bce:	2640      	movs	r6, #64	; 0x40
   16bd0:	1b75      	subs	r5, r6, r5
   16bd2:	40ac      	lsls	r4, r5
   16bd4:	4650      	mov	r0, sl
   16bd6:	4320      	orrs	r0, r4
   16bd8:	1e44      	subs	r4, r0, #1
   16bda:	41a0      	sbcs	r0, r4
   16bdc:	2400      	movs	r4, #0
   16bde:	4338      	orrs	r0, r7
   16be0:	e6dc      	b.n	1699c <__aeabi_dsub+0x388>
   16be2:	2480      	movs	r4, #128	; 0x80
   16be4:	2500      	movs	r5, #0
   16be6:	0324      	lsls	r4, r4, #12
   16be8:	4e13      	ldr	r6, [pc, #76]	; (16c38 <__aeabi_dsub+0x624>)
   16bea:	2700      	movs	r7, #0
   16bec:	e5d3      	b.n	16796 <__aeabi_dsub+0x182>
   16bee:	4650      	mov	r0, sl
   16bf0:	4320      	orrs	r0, r4
   16bf2:	0007      	movs	r7, r0
   16bf4:	1e78      	subs	r0, r7, #1
   16bf6:	4187      	sbcs	r7, r0
   16bf8:	2400      	movs	r4, #0
   16bfa:	18bf      	adds	r7, r7, r2
   16bfc:	e760      	b.n	16ac0 <__aeabi_dsub+0x4ac>
   16bfe:	000c      	movs	r4, r1
   16c00:	0017      	movs	r7, r2
   16c02:	e58d      	b.n	16720 <__aeabi_dsub+0x10c>
   16c04:	000c      	movs	r4, r1
   16c06:	0017      	movs	r7, r2
   16c08:	4e0b      	ldr	r6, [pc, #44]	; (16c38 <__aeabi_dsub+0x624>)
   16c0a:	e589      	b.n	16720 <__aeabi_dsub+0x10c>
   16c0c:	001e      	movs	r6, r3
   16c0e:	0027      	movs	r7, r4
   16c10:	3e20      	subs	r6, #32
   16c12:	40f7      	lsrs	r7, r6
   16c14:	2b20      	cmp	r3, #32
   16c16:	d00c      	beq.n	16c32 <__aeabi_dsub+0x61e>
   16c18:	2640      	movs	r6, #64	; 0x40
   16c1a:	1af3      	subs	r3, r6, r3
   16c1c:	409c      	lsls	r4, r3
   16c1e:	4650      	mov	r0, sl
   16c20:	4320      	orrs	r0, r4
   16c22:	1e44      	subs	r4, r0, #1
   16c24:	41a0      	sbcs	r0, r4
   16c26:	4307      	orrs	r7, r0
   16c28:	2400      	movs	r4, #0
   16c2a:	18bf      	adds	r7, r7, r2
   16c2c:	e748      	b.n	16ac0 <__aeabi_dsub+0x4ac>
   16c2e:	2400      	movs	r4, #0
   16c30:	e7d0      	b.n	16bd4 <__aeabi_dsub+0x5c0>
   16c32:	2400      	movs	r4, #0
   16c34:	e7f3      	b.n	16c1e <__aeabi_dsub+0x60a>
   16c36:	46c0      	nop			; (mov r8, r8)
   16c38:	000007ff 	.word	0x000007ff
   16c3c:	ff7fffff 	.word	0xff7fffff

00016c40 <__aeabi_d2iz>:
   16c40:	b530      	push	{r4, r5, lr}
   16c42:	4d13      	ldr	r5, [pc, #76]	; (16c90 <__aeabi_d2iz+0x50>)
   16c44:	030a      	lsls	r2, r1, #12
   16c46:	004b      	lsls	r3, r1, #1
   16c48:	0b12      	lsrs	r2, r2, #12
   16c4a:	0d5b      	lsrs	r3, r3, #21
   16c4c:	0fc9      	lsrs	r1, r1, #31
   16c4e:	2400      	movs	r4, #0
   16c50:	42ab      	cmp	r3, r5
   16c52:	dd10      	ble.n	16c76 <__aeabi_d2iz+0x36>
   16c54:	4c0f      	ldr	r4, [pc, #60]	; (16c94 <__aeabi_d2iz+0x54>)
   16c56:	42a3      	cmp	r3, r4
   16c58:	dc0f      	bgt.n	16c7a <__aeabi_d2iz+0x3a>
   16c5a:	2480      	movs	r4, #128	; 0x80
   16c5c:	4d0e      	ldr	r5, [pc, #56]	; (16c98 <__aeabi_d2iz+0x58>)
   16c5e:	0364      	lsls	r4, r4, #13
   16c60:	4322      	orrs	r2, r4
   16c62:	1aed      	subs	r5, r5, r3
   16c64:	2d1f      	cmp	r5, #31
   16c66:	dd0b      	ble.n	16c80 <__aeabi_d2iz+0x40>
   16c68:	480c      	ldr	r0, [pc, #48]	; (16c9c <__aeabi_d2iz+0x5c>)
   16c6a:	1ac3      	subs	r3, r0, r3
   16c6c:	40da      	lsrs	r2, r3
   16c6e:	4254      	negs	r4, r2
   16c70:	2900      	cmp	r1, #0
   16c72:	d100      	bne.n	16c76 <__aeabi_d2iz+0x36>
   16c74:	0014      	movs	r4, r2
   16c76:	0020      	movs	r0, r4
   16c78:	bd30      	pop	{r4, r5, pc}
   16c7a:	4b09      	ldr	r3, [pc, #36]	; (16ca0 <__aeabi_d2iz+0x60>)
   16c7c:	18cc      	adds	r4, r1, r3
   16c7e:	e7fa      	b.n	16c76 <__aeabi_d2iz+0x36>
   16c80:	4c08      	ldr	r4, [pc, #32]	; (16ca4 <__aeabi_d2iz+0x64>)
   16c82:	40e8      	lsrs	r0, r5
   16c84:	46a4      	mov	ip, r4
   16c86:	4463      	add	r3, ip
   16c88:	409a      	lsls	r2, r3
   16c8a:	4302      	orrs	r2, r0
   16c8c:	e7ef      	b.n	16c6e <__aeabi_d2iz+0x2e>
   16c8e:	46c0      	nop			; (mov r8, r8)
   16c90:	000003fe 	.word	0x000003fe
   16c94:	0000041d 	.word	0x0000041d
   16c98:	00000433 	.word	0x00000433
   16c9c:	00000413 	.word	0x00000413
   16ca0:	7fffffff 	.word	0x7fffffff
   16ca4:	fffffbed 	.word	0xfffffbed

00016ca8 <__aeabi_i2d>:
   16ca8:	b570      	push	{r4, r5, r6, lr}
   16caa:	2800      	cmp	r0, #0
   16cac:	d030      	beq.n	16d10 <__aeabi_i2d+0x68>
   16cae:	17c3      	asrs	r3, r0, #31
   16cb0:	18c4      	adds	r4, r0, r3
   16cb2:	405c      	eors	r4, r3
   16cb4:	0fc5      	lsrs	r5, r0, #31
   16cb6:	0020      	movs	r0, r4
   16cb8:	f000 f94c 	bl	16f54 <__clzsi2>
   16cbc:	4b17      	ldr	r3, [pc, #92]	; (16d1c <__aeabi_i2d+0x74>)
   16cbe:	4a18      	ldr	r2, [pc, #96]	; (16d20 <__aeabi_i2d+0x78>)
   16cc0:	1a1b      	subs	r3, r3, r0
   16cc2:	1ad2      	subs	r2, r2, r3
   16cc4:	2a1f      	cmp	r2, #31
   16cc6:	dd18      	ble.n	16cfa <__aeabi_i2d+0x52>
   16cc8:	4a16      	ldr	r2, [pc, #88]	; (16d24 <__aeabi_i2d+0x7c>)
   16cca:	1ad2      	subs	r2, r2, r3
   16ccc:	4094      	lsls	r4, r2
   16cce:	2200      	movs	r2, #0
   16cd0:	0324      	lsls	r4, r4, #12
   16cd2:	055b      	lsls	r3, r3, #21
   16cd4:	0b24      	lsrs	r4, r4, #12
   16cd6:	0d5b      	lsrs	r3, r3, #21
   16cd8:	2100      	movs	r1, #0
   16cda:	0010      	movs	r0, r2
   16cdc:	0324      	lsls	r4, r4, #12
   16cde:	0d0a      	lsrs	r2, r1, #20
   16ce0:	0b24      	lsrs	r4, r4, #12
   16ce2:	0512      	lsls	r2, r2, #20
   16ce4:	4322      	orrs	r2, r4
   16ce6:	4c10      	ldr	r4, [pc, #64]	; (16d28 <__aeabi_i2d+0x80>)
   16ce8:	051b      	lsls	r3, r3, #20
   16cea:	4022      	ands	r2, r4
   16cec:	4313      	orrs	r3, r2
   16cee:	005b      	lsls	r3, r3, #1
   16cf0:	07ed      	lsls	r5, r5, #31
   16cf2:	085b      	lsrs	r3, r3, #1
   16cf4:	432b      	orrs	r3, r5
   16cf6:	0019      	movs	r1, r3
   16cf8:	bd70      	pop	{r4, r5, r6, pc}
   16cfa:	0021      	movs	r1, r4
   16cfc:	4091      	lsls	r1, r2
   16cfe:	000a      	movs	r2, r1
   16d00:	210b      	movs	r1, #11
   16d02:	1a08      	subs	r0, r1, r0
   16d04:	40c4      	lsrs	r4, r0
   16d06:	055b      	lsls	r3, r3, #21
   16d08:	0324      	lsls	r4, r4, #12
   16d0a:	0b24      	lsrs	r4, r4, #12
   16d0c:	0d5b      	lsrs	r3, r3, #21
   16d0e:	e7e3      	b.n	16cd8 <__aeabi_i2d+0x30>
   16d10:	2500      	movs	r5, #0
   16d12:	2300      	movs	r3, #0
   16d14:	2400      	movs	r4, #0
   16d16:	2200      	movs	r2, #0
   16d18:	e7de      	b.n	16cd8 <__aeabi_i2d+0x30>
   16d1a:	46c0      	nop			; (mov r8, r8)
   16d1c:	0000041e 	.word	0x0000041e
   16d20:	00000433 	.word	0x00000433
   16d24:	00000413 	.word	0x00000413
   16d28:	800fffff 	.word	0x800fffff

00016d2c <__aeabi_ui2d>:
   16d2c:	b510      	push	{r4, lr}
   16d2e:	1e04      	subs	r4, r0, #0
   16d30:	d028      	beq.n	16d84 <__aeabi_ui2d+0x58>
   16d32:	f000 f90f 	bl	16f54 <__clzsi2>
   16d36:	4b15      	ldr	r3, [pc, #84]	; (16d8c <__aeabi_ui2d+0x60>)
   16d38:	4a15      	ldr	r2, [pc, #84]	; (16d90 <__aeabi_ui2d+0x64>)
   16d3a:	1a1b      	subs	r3, r3, r0
   16d3c:	1ad2      	subs	r2, r2, r3
   16d3e:	2a1f      	cmp	r2, #31
   16d40:	dd15      	ble.n	16d6e <__aeabi_ui2d+0x42>
   16d42:	4a14      	ldr	r2, [pc, #80]	; (16d94 <__aeabi_ui2d+0x68>)
   16d44:	1ad2      	subs	r2, r2, r3
   16d46:	4094      	lsls	r4, r2
   16d48:	2200      	movs	r2, #0
   16d4a:	0324      	lsls	r4, r4, #12
   16d4c:	055b      	lsls	r3, r3, #21
   16d4e:	0b24      	lsrs	r4, r4, #12
   16d50:	0d5b      	lsrs	r3, r3, #21
   16d52:	2100      	movs	r1, #0
   16d54:	0010      	movs	r0, r2
   16d56:	0324      	lsls	r4, r4, #12
   16d58:	0d0a      	lsrs	r2, r1, #20
   16d5a:	0b24      	lsrs	r4, r4, #12
   16d5c:	0512      	lsls	r2, r2, #20
   16d5e:	4322      	orrs	r2, r4
   16d60:	4c0d      	ldr	r4, [pc, #52]	; (16d98 <__aeabi_ui2d+0x6c>)
   16d62:	051b      	lsls	r3, r3, #20
   16d64:	4022      	ands	r2, r4
   16d66:	4313      	orrs	r3, r2
   16d68:	005b      	lsls	r3, r3, #1
   16d6a:	0859      	lsrs	r1, r3, #1
   16d6c:	bd10      	pop	{r4, pc}
   16d6e:	0021      	movs	r1, r4
   16d70:	4091      	lsls	r1, r2
   16d72:	000a      	movs	r2, r1
   16d74:	210b      	movs	r1, #11
   16d76:	1a08      	subs	r0, r1, r0
   16d78:	40c4      	lsrs	r4, r0
   16d7a:	055b      	lsls	r3, r3, #21
   16d7c:	0324      	lsls	r4, r4, #12
   16d7e:	0b24      	lsrs	r4, r4, #12
   16d80:	0d5b      	lsrs	r3, r3, #21
   16d82:	e7e6      	b.n	16d52 <__aeabi_ui2d+0x26>
   16d84:	2300      	movs	r3, #0
   16d86:	2400      	movs	r4, #0
   16d88:	2200      	movs	r2, #0
   16d8a:	e7e2      	b.n	16d52 <__aeabi_ui2d+0x26>
   16d8c:	0000041e 	.word	0x0000041e
   16d90:	00000433 	.word	0x00000433
   16d94:	00000413 	.word	0x00000413
   16d98:	800fffff 	.word	0x800fffff

00016d9c <__aeabi_f2d>:
   16d9c:	0041      	lsls	r1, r0, #1
   16d9e:	0e09      	lsrs	r1, r1, #24
   16da0:	1c4b      	adds	r3, r1, #1
   16da2:	b570      	push	{r4, r5, r6, lr}
   16da4:	b2db      	uxtb	r3, r3
   16da6:	0246      	lsls	r6, r0, #9
   16da8:	0a75      	lsrs	r5, r6, #9
   16daa:	0fc4      	lsrs	r4, r0, #31
   16dac:	2b01      	cmp	r3, #1
   16dae:	dd14      	ble.n	16dda <__aeabi_f2d+0x3e>
   16db0:	23e0      	movs	r3, #224	; 0xe0
   16db2:	009b      	lsls	r3, r3, #2
   16db4:	076d      	lsls	r5, r5, #29
   16db6:	0b36      	lsrs	r6, r6, #12
   16db8:	18cb      	adds	r3, r1, r3
   16dba:	2100      	movs	r1, #0
   16dbc:	0d0a      	lsrs	r2, r1, #20
   16dbe:	0028      	movs	r0, r5
   16dc0:	0512      	lsls	r2, r2, #20
   16dc2:	4d1c      	ldr	r5, [pc, #112]	; (16e34 <__aeabi_f2d+0x98>)
   16dc4:	4332      	orrs	r2, r6
   16dc6:	055b      	lsls	r3, r3, #21
   16dc8:	402a      	ands	r2, r5
   16dca:	085b      	lsrs	r3, r3, #1
   16dcc:	4313      	orrs	r3, r2
   16dce:	005b      	lsls	r3, r3, #1
   16dd0:	07e4      	lsls	r4, r4, #31
   16dd2:	085b      	lsrs	r3, r3, #1
   16dd4:	4323      	orrs	r3, r4
   16dd6:	0019      	movs	r1, r3
   16dd8:	bd70      	pop	{r4, r5, r6, pc}
   16dda:	2900      	cmp	r1, #0
   16ddc:	d114      	bne.n	16e08 <__aeabi_f2d+0x6c>
   16dde:	2d00      	cmp	r5, #0
   16de0:	d01e      	beq.n	16e20 <__aeabi_f2d+0x84>
   16de2:	0028      	movs	r0, r5
   16de4:	f000 f8b6 	bl	16f54 <__clzsi2>
   16de8:	280a      	cmp	r0, #10
   16dea:	dc1c      	bgt.n	16e26 <__aeabi_f2d+0x8a>
   16dec:	230b      	movs	r3, #11
   16dee:	002a      	movs	r2, r5
   16df0:	1a1b      	subs	r3, r3, r0
   16df2:	40da      	lsrs	r2, r3
   16df4:	0003      	movs	r3, r0
   16df6:	3315      	adds	r3, #21
   16df8:	409d      	lsls	r5, r3
   16dfa:	4b0f      	ldr	r3, [pc, #60]	; (16e38 <__aeabi_f2d+0x9c>)
   16dfc:	0312      	lsls	r2, r2, #12
   16dfe:	1a1b      	subs	r3, r3, r0
   16e00:	055b      	lsls	r3, r3, #21
   16e02:	0b16      	lsrs	r6, r2, #12
   16e04:	0d5b      	lsrs	r3, r3, #21
   16e06:	e7d8      	b.n	16dba <__aeabi_f2d+0x1e>
   16e08:	2d00      	cmp	r5, #0
   16e0a:	d006      	beq.n	16e1a <__aeabi_f2d+0x7e>
   16e0c:	0b32      	lsrs	r2, r6, #12
   16e0e:	2680      	movs	r6, #128	; 0x80
   16e10:	0336      	lsls	r6, r6, #12
   16e12:	076d      	lsls	r5, r5, #29
   16e14:	4316      	orrs	r6, r2
   16e16:	4b09      	ldr	r3, [pc, #36]	; (16e3c <__aeabi_f2d+0xa0>)
   16e18:	e7cf      	b.n	16dba <__aeabi_f2d+0x1e>
   16e1a:	4b08      	ldr	r3, [pc, #32]	; (16e3c <__aeabi_f2d+0xa0>)
   16e1c:	2600      	movs	r6, #0
   16e1e:	e7cc      	b.n	16dba <__aeabi_f2d+0x1e>
   16e20:	2300      	movs	r3, #0
   16e22:	2600      	movs	r6, #0
   16e24:	e7c9      	b.n	16dba <__aeabi_f2d+0x1e>
   16e26:	0003      	movs	r3, r0
   16e28:	002a      	movs	r2, r5
   16e2a:	3b0b      	subs	r3, #11
   16e2c:	409a      	lsls	r2, r3
   16e2e:	2500      	movs	r5, #0
   16e30:	e7e3      	b.n	16dfa <__aeabi_f2d+0x5e>
   16e32:	46c0      	nop			; (mov r8, r8)
   16e34:	800fffff 	.word	0x800fffff
   16e38:	00000389 	.word	0x00000389
   16e3c:	000007ff 	.word	0x000007ff

00016e40 <__aeabi_d2f>:
   16e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e42:	004c      	lsls	r4, r1, #1
   16e44:	0d64      	lsrs	r4, r4, #21
   16e46:	030b      	lsls	r3, r1, #12
   16e48:	1c62      	adds	r2, r4, #1
   16e4a:	0f45      	lsrs	r5, r0, #29
   16e4c:	0a5b      	lsrs	r3, r3, #9
   16e4e:	0552      	lsls	r2, r2, #21
   16e50:	432b      	orrs	r3, r5
   16e52:	0fc9      	lsrs	r1, r1, #31
   16e54:	00c5      	lsls	r5, r0, #3
   16e56:	0d52      	lsrs	r2, r2, #21
   16e58:	2a01      	cmp	r2, #1
   16e5a:	dd28      	ble.n	16eae <__aeabi_d2f+0x6e>
   16e5c:	4a3a      	ldr	r2, [pc, #232]	; (16f48 <__aeabi_d2f+0x108>)
   16e5e:	18a6      	adds	r6, r4, r2
   16e60:	2efe      	cmp	r6, #254	; 0xfe
   16e62:	dc1b      	bgt.n	16e9c <__aeabi_d2f+0x5c>
   16e64:	2e00      	cmp	r6, #0
   16e66:	dd3e      	ble.n	16ee6 <__aeabi_d2f+0xa6>
   16e68:	0180      	lsls	r0, r0, #6
   16e6a:	0002      	movs	r2, r0
   16e6c:	1e50      	subs	r0, r2, #1
   16e6e:	4182      	sbcs	r2, r0
   16e70:	0f6d      	lsrs	r5, r5, #29
   16e72:	432a      	orrs	r2, r5
   16e74:	00db      	lsls	r3, r3, #3
   16e76:	4313      	orrs	r3, r2
   16e78:	075a      	lsls	r2, r3, #29
   16e7a:	d004      	beq.n	16e86 <__aeabi_d2f+0x46>
   16e7c:	220f      	movs	r2, #15
   16e7e:	401a      	ands	r2, r3
   16e80:	2a04      	cmp	r2, #4
   16e82:	d000      	beq.n	16e86 <__aeabi_d2f+0x46>
   16e84:	3304      	adds	r3, #4
   16e86:	2280      	movs	r2, #128	; 0x80
   16e88:	04d2      	lsls	r2, r2, #19
   16e8a:	401a      	ands	r2, r3
   16e8c:	d05a      	beq.n	16f44 <__aeabi_d2f+0x104>
   16e8e:	3601      	adds	r6, #1
   16e90:	2eff      	cmp	r6, #255	; 0xff
   16e92:	d003      	beq.n	16e9c <__aeabi_d2f+0x5c>
   16e94:	019b      	lsls	r3, r3, #6
   16e96:	0a5b      	lsrs	r3, r3, #9
   16e98:	b2f4      	uxtb	r4, r6
   16e9a:	e001      	b.n	16ea0 <__aeabi_d2f+0x60>
   16e9c:	24ff      	movs	r4, #255	; 0xff
   16e9e:	2300      	movs	r3, #0
   16ea0:	0258      	lsls	r0, r3, #9
   16ea2:	05e4      	lsls	r4, r4, #23
   16ea4:	0a40      	lsrs	r0, r0, #9
   16ea6:	07c9      	lsls	r1, r1, #31
   16ea8:	4320      	orrs	r0, r4
   16eaa:	4308      	orrs	r0, r1
   16eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16eae:	2c00      	cmp	r4, #0
   16eb0:	d007      	beq.n	16ec2 <__aeabi_d2f+0x82>
   16eb2:	431d      	orrs	r5, r3
   16eb4:	d0f2      	beq.n	16e9c <__aeabi_d2f+0x5c>
   16eb6:	2080      	movs	r0, #128	; 0x80
   16eb8:	00db      	lsls	r3, r3, #3
   16eba:	0480      	lsls	r0, r0, #18
   16ebc:	4303      	orrs	r3, r0
   16ebe:	26ff      	movs	r6, #255	; 0xff
   16ec0:	e7da      	b.n	16e78 <__aeabi_d2f+0x38>
   16ec2:	432b      	orrs	r3, r5
   16ec4:	d003      	beq.n	16ece <__aeabi_d2f+0x8e>
   16ec6:	2305      	movs	r3, #5
   16ec8:	08db      	lsrs	r3, r3, #3
   16eca:	2cff      	cmp	r4, #255	; 0xff
   16ecc:	d003      	beq.n	16ed6 <__aeabi_d2f+0x96>
   16ece:	025b      	lsls	r3, r3, #9
   16ed0:	0a5b      	lsrs	r3, r3, #9
   16ed2:	b2e4      	uxtb	r4, r4
   16ed4:	e7e4      	b.n	16ea0 <__aeabi_d2f+0x60>
   16ed6:	2b00      	cmp	r3, #0
   16ed8:	d032      	beq.n	16f40 <__aeabi_d2f+0x100>
   16eda:	2080      	movs	r0, #128	; 0x80
   16edc:	03c0      	lsls	r0, r0, #15
   16ede:	4303      	orrs	r3, r0
   16ee0:	025b      	lsls	r3, r3, #9
   16ee2:	0a5b      	lsrs	r3, r3, #9
   16ee4:	e7dc      	b.n	16ea0 <__aeabi_d2f+0x60>
   16ee6:	0032      	movs	r2, r6
   16ee8:	3217      	adds	r2, #23
   16eea:	db14      	blt.n	16f16 <__aeabi_d2f+0xd6>
   16eec:	2280      	movs	r2, #128	; 0x80
   16eee:	271e      	movs	r7, #30
   16ef0:	0412      	lsls	r2, r2, #16
   16ef2:	4313      	orrs	r3, r2
   16ef4:	1bbf      	subs	r7, r7, r6
   16ef6:	2f1f      	cmp	r7, #31
   16ef8:	dc0f      	bgt.n	16f1a <__aeabi_d2f+0xda>
   16efa:	4a14      	ldr	r2, [pc, #80]	; (16f4c <__aeabi_d2f+0x10c>)
   16efc:	4694      	mov	ip, r2
   16efe:	4464      	add	r4, ip
   16f00:	002a      	movs	r2, r5
   16f02:	40a5      	lsls	r5, r4
   16f04:	002e      	movs	r6, r5
   16f06:	40a3      	lsls	r3, r4
   16f08:	1e75      	subs	r5, r6, #1
   16f0a:	41ae      	sbcs	r6, r5
   16f0c:	40fa      	lsrs	r2, r7
   16f0e:	4333      	orrs	r3, r6
   16f10:	4313      	orrs	r3, r2
   16f12:	2600      	movs	r6, #0
   16f14:	e7b0      	b.n	16e78 <__aeabi_d2f+0x38>
   16f16:	2400      	movs	r4, #0
   16f18:	e7d5      	b.n	16ec6 <__aeabi_d2f+0x86>
   16f1a:	2202      	movs	r2, #2
   16f1c:	4252      	negs	r2, r2
   16f1e:	1b96      	subs	r6, r2, r6
   16f20:	001a      	movs	r2, r3
   16f22:	40f2      	lsrs	r2, r6
   16f24:	2f20      	cmp	r7, #32
   16f26:	d009      	beq.n	16f3c <__aeabi_d2f+0xfc>
   16f28:	4809      	ldr	r0, [pc, #36]	; (16f50 <__aeabi_d2f+0x110>)
   16f2a:	4684      	mov	ip, r0
   16f2c:	4464      	add	r4, ip
   16f2e:	40a3      	lsls	r3, r4
   16f30:	432b      	orrs	r3, r5
   16f32:	1e5d      	subs	r5, r3, #1
   16f34:	41ab      	sbcs	r3, r5
   16f36:	2600      	movs	r6, #0
   16f38:	4313      	orrs	r3, r2
   16f3a:	e79d      	b.n	16e78 <__aeabi_d2f+0x38>
   16f3c:	2300      	movs	r3, #0
   16f3e:	e7f7      	b.n	16f30 <__aeabi_d2f+0xf0>
   16f40:	2300      	movs	r3, #0
   16f42:	e7ad      	b.n	16ea0 <__aeabi_d2f+0x60>
   16f44:	0034      	movs	r4, r6
   16f46:	e7bf      	b.n	16ec8 <__aeabi_d2f+0x88>
   16f48:	fffffc80 	.word	0xfffffc80
   16f4c:	fffffc82 	.word	0xfffffc82
   16f50:	fffffca2 	.word	0xfffffca2

00016f54 <__clzsi2>:
   16f54:	211c      	movs	r1, #28
   16f56:	2301      	movs	r3, #1
   16f58:	041b      	lsls	r3, r3, #16
   16f5a:	4298      	cmp	r0, r3
   16f5c:	d301      	bcc.n	16f62 <__clzsi2+0xe>
   16f5e:	0c00      	lsrs	r0, r0, #16
   16f60:	3910      	subs	r1, #16
   16f62:	0a1b      	lsrs	r3, r3, #8
   16f64:	4298      	cmp	r0, r3
   16f66:	d301      	bcc.n	16f6c <__clzsi2+0x18>
   16f68:	0a00      	lsrs	r0, r0, #8
   16f6a:	3908      	subs	r1, #8
   16f6c:	091b      	lsrs	r3, r3, #4
   16f6e:	4298      	cmp	r0, r3
   16f70:	d301      	bcc.n	16f76 <__clzsi2+0x22>
   16f72:	0900      	lsrs	r0, r0, #4
   16f74:	3904      	subs	r1, #4
   16f76:	a202      	add	r2, pc, #8	; (adr r2, 16f80 <__clzsi2+0x2c>)
   16f78:	5c10      	ldrb	r0, [r2, r0]
   16f7a:	1840      	adds	r0, r0, r1
   16f7c:	4770      	bx	lr
   16f7e:	46c0      	nop			; (mov r8, r8)
   16f80:	02020304 	.word	0x02020304
   16f84:	01010101 	.word	0x01010101
	...

00016f90 <__errno>:
   16f90:	4b01      	ldr	r3, [pc, #4]	; (16f98 <__errno+0x8>)
   16f92:	6818      	ldr	r0, [r3, #0]
   16f94:	4770      	bx	lr
   16f96:	46c0      	nop			; (mov r8, r8)
   16f98:	200000e8 	.word	0x200000e8

00016f9c <__libc_init_array>:
   16f9c:	b570      	push	{r4, r5, r6, lr}
   16f9e:	2600      	movs	r6, #0
   16fa0:	4d0c      	ldr	r5, [pc, #48]	; (16fd4 <__libc_init_array+0x38>)
   16fa2:	4c0d      	ldr	r4, [pc, #52]	; (16fd8 <__libc_init_array+0x3c>)
   16fa4:	1b64      	subs	r4, r4, r5
   16fa6:	10a4      	asrs	r4, r4, #2
   16fa8:	42a6      	cmp	r6, r4
   16faa:	d109      	bne.n	16fc0 <__libc_init_array+0x24>
   16fac:	2600      	movs	r6, #0
   16fae:	f000 fce7 	bl	17980 <_init>
   16fb2:	4d0a      	ldr	r5, [pc, #40]	; (16fdc <__libc_init_array+0x40>)
   16fb4:	4c0a      	ldr	r4, [pc, #40]	; (16fe0 <__libc_init_array+0x44>)
   16fb6:	1b64      	subs	r4, r4, r5
   16fb8:	10a4      	asrs	r4, r4, #2
   16fba:	42a6      	cmp	r6, r4
   16fbc:	d105      	bne.n	16fca <__libc_init_array+0x2e>
   16fbe:	bd70      	pop	{r4, r5, r6, pc}
   16fc0:	00b3      	lsls	r3, r6, #2
   16fc2:	58eb      	ldr	r3, [r5, r3]
   16fc4:	4798      	blx	r3
   16fc6:	3601      	adds	r6, #1
   16fc8:	e7ee      	b.n	16fa8 <__libc_init_array+0xc>
   16fca:	00b3      	lsls	r3, r6, #2
   16fcc:	58eb      	ldr	r3, [r5, r3]
   16fce:	4798      	blx	r3
   16fd0:	3601      	adds	r6, #1
   16fd2:	e7f2      	b.n	16fba <__libc_init_array+0x1e>
   16fd4:	0001798c 	.word	0x0001798c
   16fd8:	0001798c 	.word	0x0001798c
   16fdc:	0001798c 	.word	0x0001798c
   16fe0:	00017990 	.word	0x00017990

00016fe4 <memcpy>:
   16fe4:	2300      	movs	r3, #0
   16fe6:	b510      	push	{r4, lr}
   16fe8:	429a      	cmp	r2, r3
   16fea:	d100      	bne.n	16fee <memcpy+0xa>
   16fec:	bd10      	pop	{r4, pc}
   16fee:	5ccc      	ldrb	r4, [r1, r3]
   16ff0:	54c4      	strb	r4, [r0, r3]
   16ff2:	3301      	adds	r3, #1
   16ff4:	e7f8      	b.n	16fe8 <memcpy+0x4>

00016ff6 <memset>:
   16ff6:	0003      	movs	r3, r0
   16ff8:	1882      	adds	r2, r0, r2
   16ffa:	4293      	cmp	r3, r2
   16ffc:	d100      	bne.n	17000 <memset+0xa>
   16ffe:	4770      	bx	lr
   17000:	7019      	strb	r1, [r3, #0]
   17002:	3301      	adds	r3, #1
   17004:	e7f9      	b.n	16ffa <memset+0x4>
   17006:	0000      	movs	r0, r0
   17008:	00000002 	.word	0x00000002
   1700c:	00000003 	.word	0x00000003
   17010:	00000028 	.word	0x00000028
   17014:	00000029 	.word	0x00000029
   17018:	00000004 	.word	0x00000004
   1701c:	00000005 	.word	0x00000005
   17020:	00000006 	.word	0x00000006
   17024:	00000007 	.word	0x00000007
   17028:	0000ffff 	.word	0x0000ffff
   1702c:	0000ffff 	.word	0x0000ffff
   17030:	00000022 	.word	0x00000022
   17034:	00000023 	.word	0x00000023
   17038:	0000ffff 	.word	0x0000ffff
   1703c:	0000ffff 	.word	0x0000ffff
   17040:	0000ffff 	.word	0x0000ffff
   17044:	0000ffff 	.word	0x0000ffff
   17048:	00000008 	.word	0x00000008
   1704c:	00000009 	.word	0x00000009
   17050:	0000000a 	.word	0x0000000a
   17054:	0000000b 	.word	0x0000000b
   17058:	000024da 	.word	0x000024da
   1705c:	000024e0 	.word	0x000024e0
   17060:	000024e0 	.word	0x000024e0
   17064:	000024e0 	.word	0x000024e0
   17068:	000024e0 	.word	0x000024e0
   1706c:	000024e0 	.word	0x000024e0
   17070:	000024e0 	.word	0x000024e0
   17074:	000024e0 	.word	0x000024e0
   17078:	000024e0 	.word	0x000024e0
   1707c:	000024e0 	.word	0x000024e0
   17080:	000024e0 	.word	0x000024e0
   17084:	000024e0 	.word	0x000024e0
   17088:	000024e0 	.word	0x000024e0
   1708c:	000024e0 	.word	0x000024e0
   17090:	000024e0 	.word	0x000024e0
   17094:	000024e0 	.word	0x000024e0
   17098:	000024b8 	.word	0x000024b8
   1709c:	000024e0 	.word	0x000024e0
   170a0:	000024e0 	.word	0x000024e0
   170a4:	000024e0 	.word	0x000024e0
   170a8:	000024e0 	.word	0x000024e0
   170ac:	000024e0 	.word	0x000024e0
   170b0:	000024e0 	.word	0x000024e0
   170b4:	000024e0 	.word	0x000024e0
   170b8:	000024e0 	.word	0x000024e0
   170bc:	000024e0 	.word	0x000024e0
   170c0:	000024e0 	.word	0x000024e0
   170c4:	000024e0 	.word	0x000024e0
   170c8:	000024e0 	.word	0x000024e0
   170cc:	000024e0 	.word	0x000024e0
   170d0:	000024e0 	.word	0x000024e0
   170d4:	000024e0 	.word	0x000024e0
   170d8:	000024d4 	.word	0x000024d4
   170dc:	000024e0 	.word	0x000024e0
   170e0:	000024e0 	.word	0x000024e0
   170e4:	000024e0 	.word	0x000024e0
   170e8:	000024e0 	.word	0x000024e0
   170ec:	000024e0 	.word	0x000024e0
   170f0:	000024e0 	.word	0x000024e0
   170f4:	000024e0 	.word	0x000024e0
   170f8:	000024e0 	.word	0x000024e0
   170fc:	000024e0 	.word	0x000024e0
   17100:	000024e0 	.word	0x000024e0
   17104:	000024e0 	.word	0x000024e0
   17108:	000024e0 	.word	0x000024e0
   1710c:	000024e0 	.word	0x000024e0
   17110:	000024e0 	.word	0x000024e0
   17114:	000024e0 	.word	0x000024e0
   17118:	000024ce 	.word	0x000024ce
   1711c:	00002476 	.word	0x00002476
   17120:	0000248c 	.word	0x0000248c
   17124:	000024a2 	.word	0x000024a2
   17128:	0000245c 	.word	0x0000245c
   1712c:	00002c64 	.word	0x00002c64
   17130:	00002c64 	.word	0x00002c64
   17134:	00002c58 	.word	0x00002c58
   17138:	00002c64 	.word	0x00002c64
   1713c:	00002c58 	.word	0x00002c58
   17140:	00002c32 	.word	0x00002c32
   17144:	00002c32 	.word	0x00002c32
   17148:	00002c64 	.word	0x00002c64
   1714c:	00002c64 	.word	0x00002c64
   17150:	00002c64 	.word	0x00002c64
   17154:	00002c64 	.word	0x00002c64
   17158:	00002c64 	.word	0x00002c64
   1715c:	00002c64 	.word	0x00002c64
   17160:	00002c64 	.word	0x00002c64
   17164:	00002c64 	.word	0x00002c64
   17168:	00002c64 	.word	0x00002c64
   1716c:	00002c64 	.word	0x00002c64
   17170:	00002c64 	.word	0x00002c64
   17174:	00002c64 	.word	0x00002c64
   17178:	00002c64 	.word	0x00002c64
   1717c:	00002c64 	.word	0x00002c64
   17180:	00002c64 	.word	0x00002c64
   17184:	00002c64 	.word	0x00002c64
   17188:	00002c64 	.word	0x00002c64
   1718c:	00002c64 	.word	0x00002c64
   17190:	00002c64 	.word	0x00002c64
   17194:	00002c64 	.word	0x00002c64
   17198:	00002c64 	.word	0x00002c64
   1719c:	00002c64 	.word	0x00002c64
   171a0:	00002c64 	.word	0x00002c64
   171a4:	00002c64 	.word	0x00002c64
   171a8:	00002c64 	.word	0x00002c64
   171ac:	00002c64 	.word	0x00002c64
   171b0:	00002c64 	.word	0x00002c64
   171b4:	00002c64 	.word	0x00002c64
   171b8:	00002c64 	.word	0x00002c64
   171bc:	00002c64 	.word	0x00002c64
   171c0:	00002c64 	.word	0x00002c64
   171c4:	00002c64 	.word	0x00002c64
   171c8:	00002c64 	.word	0x00002c64
   171cc:	00002c64 	.word	0x00002c64
   171d0:	00002c64 	.word	0x00002c64
   171d4:	00002c64 	.word	0x00002c64
   171d8:	00002c64 	.word	0x00002c64
   171dc:	00002c64 	.word	0x00002c64
   171e0:	00002c64 	.word	0x00002c64
   171e4:	00002c64 	.word	0x00002c64
   171e8:	00002c64 	.word	0x00002c64
   171ec:	00002c64 	.word	0x00002c64
   171f0:	00002c64 	.word	0x00002c64
   171f4:	00002c64 	.word	0x00002c64
   171f8:	00002c64 	.word	0x00002c64
   171fc:	00002c64 	.word	0x00002c64
   17200:	00002c64 	.word	0x00002c64
   17204:	00002c64 	.word	0x00002c64
   17208:	00002c64 	.word	0x00002c64
   1720c:	00002c64 	.word	0x00002c64
   17210:	00002c64 	.word	0x00002c64
   17214:	00002c64 	.word	0x00002c64
   17218:	00002c64 	.word	0x00002c64
   1721c:	00002c64 	.word	0x00002c64
   17220:	00002c64 	.word	0x00002c64
   17224:	00002c64 	.word	0x00002c64
   17228:	00002c64 	.word	0x00002c64
   1722c:	00002c58 	.word	0x00002c58
   17230:	00002c58 	.word	0x00002c58
   17234:	00002c6e 	.word	0x00002c6e
   17238:	00002c6e 	.word	0x00002c6e
   1723c:	00002c6e 	.word	0x00002c6e
   17240:	00002c6e 	.word	0x00002c6e

00017244 <_tcc_intflag>:
   17244:	00000001 00000002 00000004 00000008     ................
   17254:	00001000 00002000 00004000 00008000     ..... ...@......
   17264:	00010000 00020000 00040000 00080000     ................

00017274 <tcc_modules>:
   17274:	42002000 42002400 42002800              . .B.$.B.(.B

00017280 <_tcc_gclk_ids>:
   17280:	001b1a1a                                ....

00017284 <_tcc_apbcmasks>:
   17284:	00000100 00000200 00000400              ............

00017290 <_tcc_maxs>:
   17290:	00ffffff 00ffffff 0000ffff              ............

0001729c <_tcc_cc_nums>:
   1729c:	00020204                                ....

000172a0 <_tcc_ow_nums>:
   172a0:	00020408 42002c00 42003000 42003400     .....,.B.0.B.4.B
   172b0:	001c1c1b 10000800 00002000 42000800     ......... .....B
   172c0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   172d0:	42001c00 0c0b0a09 00000e0d 000073ba     ...B.........s..
   172e0:	00007432 00007432 000073d8 000073d2     2t..2t...s...s..
   172f0:	000073de 000073c0 000073e4 00007418     .s...s...s...t..
   17300:	000075d8 00007628 00007628 00007624     .u..(v..(v..$v..
   17310:	000075ca 000075ea 000075ba 000075fc     .u...u...u...u..
   17320:	0000760e 41744545 50524f4d 456d752e     .v..EEtAMORP.umE

00017330 <crc16_tab>:
   17330:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   17340:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   17350:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   17360:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   17370:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   17380:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   17390:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   173a0:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   173b0:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   173c0:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   173d0:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   173e0:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   173f0:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   17400:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   17410:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   17420:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   17430:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   17440:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   17450:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   17460:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   17470:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   17480:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   17490:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   174a0:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   174b0:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   174c0:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   174d0:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   174e0:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   174f0:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   17500:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   17510:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   17520:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
   17530:	0000d8a0 0000d8a0 0000d916 0000d916     ................
   17540:	0000d938 0000d9d0 0000d950 0000d950     8.......P...P...
   17550:	0000d960 0000d98c 0000d998 0000d9a4     `...............
   17560:	0000d9ba 07020100 0a090701 00000001     ................
   17570:	000000ff 00000303 00000002 00ff00ff     ................
   17580:	0000ff00 00000003 00000000 3f400000     ..............@?
   17590:	00000000 3f000000 3f000000 00000000     .......?...?....
   175a0:	3f000000 3f000000 3f000000 00000000     ...?...?...?....
   175b0:	3e800000 3f000000 3f000000 3f000000     ...>...?...?...?
   175c0:	3f000000 3f000000 3f000000 3f000000     ...?...?...?...?
   175d0:	422b5441 34445541 00000000 00002580     AT+BAUD4.....%..
   175e0:	00004b00 00009600 0000e100 0001c200     .K..............
   175f0:	4e2b5441 54454d41 61546c65 00006c69     AT+NAMETelTail..
   17600:	502b5441 3345574f 00000000 522b5441     AT+POWE3....AT+R
   17610:	54455345 00000000 00000030 0000f1d2     ESET....0.......
   17620:	0000f1e2 0000f130 0000f11c 0000fac0     ....0...........
   17630:	0000fac0 0000fac0 0000f920 0000fac0     ........ .......
   17640:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   17650:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   17660:	0000fac0 0000fac0 0000f1f2 0000fac0     ................
   17670:	0000fac0 0000fac0 0000fac0 0000f7b4     ................
   17680:	0000f45a 0000f482 0000fac0 0000fac0     Z...............
   17690:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   176a0:	0000fac0 0000fac0 0000f10c 0000fac0     ................
   176b0:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   176c0:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   176d0:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   176e0:	0000fac0 0000fac0 0000f0fc 0000fac0     ................
   176f0:	0000fac0 0000fac0 0000f174 0000f158     ........t...X...
   17700:	0000f140 0000fac0 0000fac0 0000f3cc     @...............
   17710:	0000f354 0000f204 0000f2dc 0000f5e0     T...............
   17720:	0000f262 0000f54c 0000f674 0000fac0     b...L...t.......
   17730:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   17740:	0000fac0 0000fac0 0000fac0 0000fac0     ................
   17750:	0000fac0 0000fac0 0000fac0 0000f1c2     ................
   17760:	0000f1b2 0000f1a2 0000f444 0000f192     ........D.......
   17770:	000120b2 000120c2 000120fa 00012132     . ... ... ..2!..
   17780:	00012158 00012182 000121ba 000121f2     X!...!...!...!..
   17790:	0001226a 0001227c 000122bc 000122fc     j"..|"..."..."..
   177a0:	00012400 0001242c 00012478 000124b8     .$..,$..x$...$..
   177b0:	000124f8 000125c0 000125ec 000126c8     .$...%...%...&..
   177c0:	00012860 00012ab0 00012d00 00012eee     `(...*...-......
   177d0:	00012fce 000131ac 00013332 00013518     ./...1..23...5..
   177e0:	00014954 00014924 00014936 00014878     TI..$I..6I..xH..
   177f0:	00014936 0001491a 00014936 00014878     6I...I..6I..xH..
   17800:	00014924 00014924 0001491a 00014878     $I..$I...I..xH..
   17810:	00014880 00014880 00014880 0001493c     .H...H...H..<I..
   17820:	00014924 00014924 000148f8 000149dc     $I..$I...H...I..
   17830:	000148f8 0001491a 000148f8 000149dc     .H...I...H...I..
   17840:	00014924 00014924 0001491a 000149dc     $I..$I...I...I..
   17850:	00014880 00014880 00014880 000149e6     .H...H...H...I..
   17860:	00014cd4 00014c24 00014c24 00014c22     .L..$L..$L.."L..
   17870:	00014cc6 00014cc6 00014cbc 00014c22     .L...L...L.."L..
   17880:	00014cc6 00014cbc 00014cc6 00014c22     .L...L...L.."L..
   17890:	00014ccc 00014ccc 00014ccc 00014d5c     .L...L...L..\M..
   178a0:	00015aa4 00015a86 00015a40 0001595e     .Z...Z..@Z..^Y..
   178b0:	00015a40 00015a78 00015a40 0001595e     @Z..xZ..@Z..^Y..
   178c0:	00015a86 00015a86 00015a78 0001595e     .Z...Z..xZ..^Y..
   178d0:	00015956 00015956 00015956 00015cbc     VY..VY..VY...\..
   178e0:	00016304 000161c4 000161c4 000161c0     .c...a...a...a..
   178f0:	000162dc 000162dc 000162ce 000161c0     .b...b...b...a..
   17900:	000162dc 000162ce 000162dc 000161c0     .b...b...b...a..
   17910:	000162e4 000162e4 000162e4 000164e8     .b...b...b...d..

00017920 <__sf_fake_stderr>:
	...

00017940 <__sf_fake_stdin>:
	...

00017960 <__sf_fake_stdout>:
	...

00017980 <_init>:
   17980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17982:	46c0      	nop			; (mov r8, r8)
   17984:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17986:	bc08      	pop	{r3}
   17988:	469e      	mov	lr, r3
   1798a:	4770      	bx	lr

0001798c <__init_array_start>:
   1798c:	000020dd 	.word	0x000020dd

00017990 <_fini>:
   17990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17992:	46c0      	nop			; (mov r8, r8)
   17994:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17996:	bc08      	pop	{r3}
   17998:	469e      	mov	lr, r3
   1799a:	4770      	bx	lr

0001799c <__fini_array_start>:
   1799c:	000020b5 	.word	0x000020b5

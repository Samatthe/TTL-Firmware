
Teltail.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001ad54  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000017c  20000000  0001cd54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000019c0  20000180  0001cee0  00020180  2**4
                  ALLOC
  3 .stack        00002000  20001b40  0001e8a0  00020180  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005fcde  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000593f  00000000  00000000  0007fedb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007791  00000000  00000000  0008581a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001438  00000000  00000000  0008cfab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000012f8  00000000  00000000  0008e3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000aecf  00000000  00000000  0008f6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000177ad  00000000  00000000  0009a5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009309f  00000000  00000000  000b1d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005054  00000000  00000000  00144df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	40 3b 00 20 f5 93 00 00 ed 94 00 00 ed 94 00 00     @;. ............
	...
    202c:	ed 94 00 00 00 00 00 00 00 00 00 00 ed 94 00 00     ................
    203c:	ed 94 00 00 ed 94 00 00 ed 94 00 00 ed 94 00 00     ................
    204c:	ed 94 00 00 ed 94 00 00 ed 94 00 00 0d 29 00 00     .............)..
    205c:	ed 94 00 00 ed 94 00 00 15 7b 00 00 2d 7b 00 00     .........{..-{..
    206c:	45 7b 00 00 5d 7b 00 00 75 7b 00 00 8d 7b 00 00     E{..]{..u{...{..
    207c:	5d 30 00 00 71 30 00 00 85 30 00 00 15 31 00 00     ]0..q0...0...1..
    208c:	29 31 00 00 3d 31 00 00 00 00 00 00 00 00 00 00     )1..=1..........
    209c:	ed 94 00 00 ed 94 00 00 ed 94 00 00 ed 94 00 00     ................
    20ac:	ed 94 00 00 00 00 00 00                             ........

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000180 	.word	0x20000180
    20d4:	00000000 	.word	0x00000000
    20d8:	0001cd54 	.word	0x0001cd54

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000184 	.word	0x20000184
    2108:	0001cd54 	.word	0x0001cd54
    210c:	0001cd54 	.word	0x0001cd54
    2110:	00000000 	.word	0x00000000

00002114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46bd      	mov	sp, r7
    2126:	b002      	add	sp, #8
    2128:	bd80      	pop	{r7, pc}
	...

0000212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    212c:	b580      	push	{r7, lr}
    212e:	b082      	sub	sp, #8
    2130:	af00      	add	r7, sp, #0
    2132:	0002      	movs	r2, r0
    2134:	6039      	str	r1, [r7, #0]
    2136:	1dfb      	adds	r3, r7, #7
    2138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    213a:	1dfb      	adds	r3, r7, #7
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b01      	cmp	r3, #1
    2140:	d00a      	beq.n	2158 <system_apb_clock_set_mask+0x2c>
    2142:	2b02      	cmp	r3, #2
    2144:	d00f      	beq.n	2166 <system_apb_clock_set_mask+0x3a>
    2146:	2b00      	cmp	r3, #0
    2148:	d114      	bne.n	2174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <system_apb_clock_set_mask+0x58>)
    214c:	4a0d      	ldr	r2, [pc, #52]	; (2184 <system_apb_clock_set_mask+0x58>)
    214e:	6991      	ldr	r1, [r2, #24]
    2150:	683a      	ldr	r2, [r7, #0]
    2152:	430a      	orrs	r2, r1
    2154:	619a      	str	r2, [r3, #24]
			break;
    2156:	e00f      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2158:	4b0a      	ldr	r3, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215a:	4a0a      	ldr	r2, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215c:	69d1      	ldr	r1, [r2, #28]
    215e:	683a      	ldr	r2, [r7, #0]
    2160:	430a      	orrs	r2, r1
    2162:	61da      	str	r2, [r3, #28]
			break;
    2164:	e008      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2166:	4b07      	ldr	r3, [pc, #28]	; (2184 <system_apb_clock_set_mask+0x58>)
    2168:	4a06      	ldr	r2, [pc, #24]	; (2184 <system_apb_clock_set_mask+0x58>)
    216a:	6a11      	ldr	r1, [r2, #32]
    216c:	683a      	ldr	r2, [r7, #0]
    216e:	430a      	orrs	r2, r1
    2170:	621a      	str	r2, [r3, #32]
			break;
    2172:	e001      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2174:	2317      	movs	r3, #23
    2176:	e000      	b.n	217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2178:	2300      	movs	r3, #0
}
    217a:	0018      	movs	r0, r3
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	40000400 	.word	0x40000400

00002188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2201      	movs	r2, #1
    21a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2200      	movs	r2, #0
    21a6:	70da      	strb	r2, [r3, #3]
}
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	0002      	movs	r2, r0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    21bc:	1dfb      	adds	r3, r7, #7
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d002      	beq.n	21ca <system_voltage_reference_enable+0x1a>
    21c4:	2b01      	cmp	r3, #1
    21c6:	d007      	beq.n	21d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    21c8:	e00d      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <system_voltage_reference_enable+0x3c>)
    21cc:	4a07      	ldr	r2, [pc, #28]	; (21ec <system_voltage_reference_enable+0x3c>)
    21ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21d0:	2102      	movs	r1, #2
    21d2:	430a      	orrs	r2, r1
    21d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21d6:	e006      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21de:	2104      	movs	r1, #4
    21e0:	430a      	orrs	r2, r1
    21e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21e4:	46c0      	nop			; (mov r8, r8)
	}
}
    21e6:	46bd      	mov	sp, r7
    21e8:	b002      	add	sp, #8
    21ea:	bd80      	pop	{r7, pc}
    21ec:	40000800 	.word	0x40000800

000021f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	7e5b      	ldrb	r3, [r3, #25]
    2202:	b2db      	uxtb	r3, r3
    2204:	b25b      	sxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	da01      	bge.n	220e <adc_is_syncing+0x1e>
		return true;
    220a:	2301      	movs	r3, #1
    220c:	e000      	b.n	2210 <adc_is_syncing+0x20>
	}

	return false;
    220e:	2300      	movs	r3, #0
}
    2210:	0018      	movs	r0, r3
    2212:	46bd      	mov	sp, r7
    2214:	b004      	add	sp, #16
    2216:	bd80      	pop	{r7, pc}

00002218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2200      	movs	r2, #0
    222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	2200      	movs	r2, #0
    223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2200      	movs	r2, #0
    2242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2200      	movs	r2, #0
    2248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2200      	movs	r2, #0
    224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2200      	movs	r2, #0
    2254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	0152      	lsls	r2, r2, #5
    225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2200      	movs	r2, #0
    2262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	2200      	movs	r2, #0
    2268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	2200      	movs	r2, #0
    226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	2200      	movs	r2, #0
    2274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2200      	movs	r2, #0
    227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	222a      	movs	r2, #42	; 0x2a
    2280:	2100      	movs	r1, #0
    2282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	2200      	movs	r2, #0
    2288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2200      	movs	r2, #0
    228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2224      	movs	r2, #36	; 0x24
    2294:	2100      	movs	r1, #0
    2296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	2200      	movs	r2, #0
    229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2200      	movs	r2, #0
    22a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	2200      	movs	r2, #0
    22a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	222b      	movs	r2, #43	; 0x2b
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	222c      	movs	r2, #44	; 0x2c
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	46bd      	mov	sp, r7
    22be:	b002      	add	sp, #8
    22c0:	bd80      	pop	{r7, pc}
	...

000022c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b098      	sub	sp, #96	; 0x60
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    22cc:	230c      	movs	r3, #12
    22ce:	18fa      	adds	r2, r7, r3
    22d0:	4b15      	ldr	r3, [pc, #84]	; (2328 <_adc_configure_ain_pin+0x64>)
    22d2:	0010      	movs	r0, r2
    22d4:	0019      	movs	r1, r3
    22d6:	2350      	movs	r3, #80	; 0x50
    22d8:	001a      	movs	r2, r3
    22da:	4b14      	ldr	r3, [pc, #80]	; (232c <_adc_configure_ain_pin+0x68>)
    22dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <_adc_configure_ain_pin+0x6c>)
    22e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2b13      	cmp	r3, #19
    22e6:	d81a      	bhi.n	231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    22e8:	230c      	movs	r3, #12
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	687a      	ldr	r2, [r7, #4]
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	58d3      	ldr	r3, [r2, r3]
    22f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    22f4:	2308      	movs	r3, #8
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	0018      	movs	r0, r3
    22fa:	4b0e      	ldr	r3, [pc, #56]	; (2334 <_adc_configure_ain_pin+0x70>)
    22fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    22fe:	2308      	movs	r3, #8
    2300:	18fb      	adds	r3, r7, r3
    2302:	2200      	movs	r2, #0
    2304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2306:	2308      	movs	r3, #8
    2308:	18fb      	adds	r3, r7, r3
    230a:	2201      	movs	r2, #1
    230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2310:	b2db      	uxtb	r3, r3
    2312:	2208      	movs	r2, #8
    2314:	18ba      	adds	r2, r7, r2
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b07      	ldr	r3, [pc, #28]	; (2338 <_adc_configure_ain_pin+0x74>)
    231c:	4798      	blx	r3
	}
}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46bd      	mov	sp, r7
    2322:	b018      	add	sp, #96	; 0x60
    2324:	bd80      	pop	{r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	0001c314 	.word	0x0001c314
    232c:	0001c15d 	.word	0x0001c15d
    2330:	0000ffff 	.word	0x0000ffff
    2334:	00002189 	.word	0x00002189
    2338:	000088d9 	.word	0x000088d9

0000233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b089      	sub	sp, #36	; 0x24
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2346:	231f      	movs	r3, #31
    2348:	18fb      	adds	r3, r7, r3
    234a:	2200      	movs	r2, #0
    234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    234e:	2310      	movs	r3, #16
    2350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2352:	2317      	movs	r3, #23
    2354:	18fb      	adds	r3, r7, r3
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2360:	230c      	movs	r3, #12
    2362:	18fb      	adds	r3, r7, r3
    2364:	0018      	movs	r0, r3
    2366:	4bce      	ldr	r3, [pc, #824]	; (26a0 <_adc_set_config+0x364>)
    2368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	781a      	ldrb	r2, [r3, #0]
    236e:	230c      	movs	r3, #12
    2370:	18fb      	adds	r3, r7, r3
    2372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2374:	230c      	movs	r3, #12
    2376:	18fb      	adds	r3, r7, r3
    2378:	0019      	movs	r1, r3
    237a:	201e      	movs	r0, #30
    237c:	4bc9      	ldr	r3, [pc, #804]	; (26a4 <_adc_set_config+0x368>)
    237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2380:	201e      	movs	r0, #30
    2382:	4bc9      	ldr	r3, [pc, #804]	; (26a8 <_adc_set_config+0x36c>)
    2384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2386:	683b      	ldr	r3, [r7, #0]
    2388:	222c      	movs	r2, #44	; 0x2c
    238a:	5c9b      	ldrb	r3, [r3, r2]
    238c:	2b00      	cmp	r3, #0
    238e:	d040      	beq.n	2412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2390:	2316      	movs	r3, #22
    2392:	18fb      	adds	r3, r7, r3
    2394:	683a      	ldr	r2, [r7, #0]
    2396:	212b      	movs	r1, #43	; 0x2b
    2398:	5c52      	ldrb	r2, [r2, r1]
    239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    23a0:	2315      	movs	r3, #21
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	2216      	movs	r2, #22
    23a6:	18ba      	adds	r2, r7, r2
    23a8:	7812      	ldrb	r2, [r2, #0]
    23aa:	188a      	adds	r2, r1, r2
    23ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	222c      	movs	r2, #44	; 0x2c
    23b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2215      	movs	r2, #21
    23ba:	18ba      	adds	r2, r7, r2
    23bc:	7812      	ldrb	r2, [r2, #0]
    23be:	188a      	adds	r2, r1, r2
    23c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    23c2:	e018      	b.n	23f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    23c4:	2316      	movs	r3, #22
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	220f      	movs	r2, #15
    23cc:	4013      	ands	r3, r2
    23ce:	683a      	ldr	r2, [r7, #0]
    23d0:	7b12      	ldrb	r2, [r2, #12]
    23d2:	189b      	adds	r3, r3, r2
    23d4:	0018      	movs	r0, r3
    23d6:	4bb5      	ldr	r3, [pc, #724]	; (26ac <_adc_set_config+0x370>)
    23d8:	4798      	blx	r3
			start_pin++;
    23da:	2315      	movs	r3, #21
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	2315      	movs	r3, #21
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	3201      	adds	r2, #1
    23e6:	701a      	strb	r2, [r3, #0]
			offset++;
    23e8:	2316      	movs	r3, #22
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781a      	ldrb	r2, [r3, #0]
    23ee:	2316      	movs	r3, #22
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	3201      	adds	r2, #1
    23f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    23f6:	2315      	movs	r3, #21
    23f8:	18fa      	adds	r2, r7, r3
    23fa:	230f      	movs	r3, #15
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	7812      	ldrb	r2, [r2, #0]
    2400:	781b      	ldrb	r3, [r3, #0]
    2402:	429a      	cmp	r2, r3
    2404:	d3de      	bcc.n	23c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2406:	683b      	ldr	r3, [r7, #0]
    2408:	89db      	ldrh	r3, [r3, #14]
    240a:	0018      	movs	r0, r3
    240c:	4ba7      	ldr	r3, [pc, #668]	; (26ac <_adc_set_config+0x370>)
    240e:	4798      	blx	r3
    2410:	e009      	b.n	2426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	7b1b      	ldrb	r3, [r3, #12]
    2416:	0018      	movs	r0, r3
    2418:	4ba4      	ldr	r3, [pc, #656]	; (26ac <_adc_set_config+0x370>)
    241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	89db      	ldrh	r3, [r3, #14]
    2420:	0018      	movs	r0, r3
    2422:	4ba2      	ldr	r3, [pc, #648]	; (26ac <_adc_set_config+0x370>)
    2424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	7d5b      	ldrb	r3, [r3, #21]
    242a:	009b      	lsls	r3, r3, #2
    242c:	b2da      	uxtb	r2, r3
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	7d9b      	ldrb	r3, [r3, #22]
    2436:	01db      	lsls	r3, r3, #7
    2438:	b25a      	sxtb	r2, r3
			(config->reference);
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	785b      	ldrb	r3, [r3, #1]
    243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2440:	4313      	orrs	r3, r2
    2442:	b25b      	sxtb	r3, r3
    2444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	791b      	ldrb	r3, [r3, #4]
    244e:	2b34      	cmp	r3, #52	; 0x34
    2450:	d846      	bhi.n	24e0 <_adc_set_config+0x1a4>
    2452:	009a      	lsls	r2, r3, #2
    2454:	4b96      	ldr	r3, [pc, #600]	; (26b0 <_adc_set_config+0x374>)
    2456:	18d3      	adds	r3, r2, r3
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    245c:	231f      	movs	r3, #31
    245e:	18fb      	adds	r3, r7, r3
    2460:	683a      	ldr	r2, [r7, #0]
    2462:	7c52      	ldrb	r2, [r2, #17]
    2464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2466:	2317      	movs	r3, #23
    2468:	18fb      	adds	r3, r7, r3
    246a:	683a      	ldr	r2, [r7, #0]
    246c:	7c12      	ldrb	r2, [r2, #16]
    246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2470:	2310      	movs	r3, #16
    2472:	61bb      	str	r3, [r7, #24]
		break;
    2474:	e036      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2476:	231f      	movs	r3, #31
    2478:	18fb      	adds	r3, r7, r3
    247a:	2201      	movs	r2, #1
    247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	2202      	movs	r2, #2
    2484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2486:	2310      	movs	r3, #16
    2488:	61bb      	str	r3, [r7, #24]
		break;
    248a:	e02b      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    248c:	231f      	movs	r3, #31
    248e:	18fb      	adds	r3, r7, r3
    2490:	2202      	movs	r2, #2
    2492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2494:	2317      	movs	r3, #23
    2496:	18fb      	adds	r3, r7, r3
    2498:	2204      	movs	r2, #4
    249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    249c:	2310      	movs	r3, #16
    249e:	61bb      	str	r3, [r7, #24]
		break;
    24a0:	e020      	b.n	24e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    24a2:	231f      	movs	r3, #31
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    24aa:	2317      	movs	r3, #23
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	2206      	movs	r2, #6
    24b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24b2:	2310      	movs	r3, #16
    24b4:	61bb      	str	r3, [r7, #24]
		break;
    24b6:	e015      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    24b8:	231f      	movs	r3, #31
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2200      	movs	r2, #0
    24be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    24c0:	2317      	movs	r3, #23
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2208      	movs	r2, #8
    24c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24c8:	2310      	movs	r3, #16
    24ca:	61bb      	str	r3, [r7, #24]
		break;
    24cc:	e00a      	b.n	24e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    24ce:	2330      	movs	r3, #48	; 0x30
    24d0:	61bb      	str	r3, [r7, #24]
		break;
    24d2:	e007      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    24d4:	2320      	movs	r3, #32
    24d6:	61bb      	str	r3, [r7, #24]
		break;
    24d8:	e004      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    24da:	2300      	movs	r3, #0
    24dc:	61bb      	str	r3, [r7, #24]
		break;
    24de:	e001      	b.n	24e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    24e0:	2317      	movs	r3, #23
    24e2:	e1ae      	b.n	2842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    24e4:	231f      	movs	r3, #31
    24e6:	18fb      	adds	r3, r7, r3
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2270      	movs	r2, #112	; 0x70
    24f0:	4013      	ands	r3, r2
    24f2:	b2da      	uxtb	r2, r3
    24f4:	2317      	movs	r3, #23
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	4313      	orrs	r3, r2
    24fc:	b2da      	uxtb	r2, r3
    24fe:	693b      	ldr	r3, [r7, #16]
    2500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	7ddb      	ldrb	r3, [r3, #23]
    2506:	2b3f      	cmp	r3, #63	; 0x3f
    2508:	d901      	bls.n	250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    250a:	2317      	movs	r3, #23
    250c:	e199      	b.n	2842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    250e:	683b      	ldr	r3, [r7, #0]
    2510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2512:	693b      	ldr	r3, [r7, #16]
    2514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	0018      	movs	r0, r3
    251c:	4b65      	ldr	r3, [pc, #404]	; (26b4 <_adc_set_config+0x378>)
    251e:	4798      	blx	r3
    2520:	1e03      	subs	r3, r0, #0
    2522:	d1f9      	bne.n	2518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	885a      	ldrh	r2, [r3, #2]
    2528:	69bb      	ldr	r3, [r7, #24]
    252a:	b29b      	uxth	r3, r3
    252c:	4313      	orrs	r3, r2
    252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	2124      	movs	r1, #36	; 0x24
    2534:	5c5b      	ldrb	r3, [r3, r1]
    2536:	b29b      	uxth	r3, r3
    2538:	00db      	lsls	r3, r3, #3
    253a:	b29b      	uxth	r3, r3
			resolution |
    253c:	4313      	orrs	r3, r2
    253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	7d1b      	ldrb	r3, [r3, #20]
    2544:	b29b      	uxth	r3, r3
    2546:	009b      	lsls	r3, r3, #2
    2548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    254a:	4313      	orrs	r3, r2
    254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	7c9b      	ldrb	r3, [r3, #18]
    2552:	b29b      	uxth	r3, r3
    2554:	18db      	adds	r3, r3, r3
    2556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2558:	4313      	orrs	r3, r2
    255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	7cdb      	ldrb	r3, [r3, #19]
    2560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2562:	4313      	orrs	r3, r2
    2564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2566:	693b      	ldr	r3, [r7, #16]
    2568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    256a:	683b      	ldr	r3, [r7, #0]
    256c:	7e1b      	ldrb	r3, [r3, #24]
    256e:	2b00      	cmp	r3, #0
    2570:	d100      	bne.n	2574 <_adc_set_config+0x238>
    2572:	e0c4      	b.n	26fe <_adc_set_config+0x3c2>
		switch (resolution) {
    2574:	69bb      	ldr	r3, [r7, #24]
    2576:	2b10      	cmp	r3, #16
    2578:	d100      	bne.n	257c <_adc_set_config+0x240>
    257a:	e076      	b.n	266a <_adc_set_config+0x32e>
    257c:	d802      	bhi.n	2584 <_adc_set_config+0x248>
    257e:	2b00      	cmp	r3, #0
    2580:	d04d      	beq.n	261e <_adc_set_config+0x2e2>
    2582:	e0bc      	b.n	26fe <_adc_set_config+0x3c2>
    2584:	2b20      	cmp	r3, #32
    2586:	d023      	beq.n	25d0 <_adc_set_config+0x294>
    2588:	2b30      	cmp	r3, #48	; 0x30
    258a:	d000      	beq.n	258e <_adc_set_config+0x252>
    258c:	e0b7      	b.n	26fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	7cdb      	ldrb	r3, [r3, #19]
    2592:	2b00      	cmp	r3, #0
    2594:	d011      	beq.n	25ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2596:	683b      	ldr	r3, [r7, #0]
    2598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    259a:	2b7f      	cmp	r3, #127	; 0x7f
    259c:	dc0b      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    25a2:	3380      	adds	r3, #128	; 0x80
    25a4:	db07      	blt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    25a6:	683b      	ldr	r3, [r7, #0]
    25a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    25aa:	2b7f      	cmp	r3, #127	; 0x7f
    25ac:	dc03      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    25ae:	683b      	ldr	r3, [r7, #0]
    25b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    25b2:	3380      	adds	r3, #128	; 0x80
    25b4:	da01      	bge.n	25ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25b6:	2317      	movs	r3, #23
    25b8:	e143      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	69db      	ldr	r3, [r3, #28]
    25be:	2bff      	cmp	r3, #255	; 0xff
    25c0:	dc04      	bgt.n	25cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    25c6:	2bff      	cmp	r3, #255	; 0xff
    25c8:	dc00      	bgt.n	25cc <_adc_set_config+0x290>
    25ca:	e091      	b.n	26f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25cc:	2317      	movs	r3, #23
    25ce:	e138      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    25d0:	683b      	ldr	r3, [r7, #0]
    25d2:	7cdb      	ldrb	r3, [r3, #19]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d015      	beq.n	2604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    25dc:	4a36      	ldr	r2, [pc, #216]	; (26b8 <_adc_set_config+0x37c>)
    25de:	4293      	cmp	r3, r2
    25e0:	dc0e      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    25e2:	683b      	ldr	r3, [r7, #0]
    25e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    25e6:	4a35      	ldr	r2, [pc, #212]	; (26bc <_adc_set_config+0x380>)
    25e8:	4293      	cmp	r3, r2
    25ea:	db09      	blt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    25ec:	683b      	ldr	r3, [r7, #0]
    25ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    25f0:	4a31      	ldr	r2, [pc, #196]	; (26b8 <_adc_set_config+0x37c>)
    25f2:	4293      	cmp	r3, r2
    25f4:	dc04      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    25fa:	4a30      	ldr	r2, [pc, #192]	; (26bc <_adc_set_config+0x380>)
    25fc:	4293      	cmp	r3, r2
    25fe:	da01      	bge.n	2604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2600:	2317      	movs	r3, #23
    2602:	e11e      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2604:	683b      	ldr	r3, [r7, #0]
    2606:	69db      	ldr	r3, [r3, #28]
    2608:	4a2d      	ldr	r2, [pc, #180]	; (26c0 <_adc_set_config+0x384>)
    260a:	4293      	cmp	r3, r2
    260c:	dc05      	bgt.n	261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2612:	4a2b      	ldr	r2, [pc, #172]	; (26c0 <_adc_set_config+0x384>)
    2614:	4293      	cmp	r3, r2
    2616:	dc00      	bgt.n	261a <_adc_set_config+0x2de>
    2618:	e06c      	b.n	26f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    261a:	2317      	movs	r3, #23
    261c:	e111      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    261e:	683b      	ldr	r3, [r7, #0]
    2620:	7cdb      	ldrb	r3, [r3, #19]
    2622:	2b00      	cmp	r3, #0
    2624:	d015      	beq.n	2652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2626:	683b      	ldr	r3, [r7, #0]
    2628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    262a:	4a26      	ldr	r2, [pc, #152]	; (26c4 <_adc_set_config+0x388>)
    262c:	4293      	cmp	r3, r2
    262e:	dc0e      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2634:	4a24      	ldr	r2, [pc, #144]	; (26c8 <_adc_set_config+0x38c>)
    2636:	4293      	cmp	r3, r2
    2638:	db09      	blt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    263e:	4a21      	ldr	r2, [pc, #132]	; (26c4 <_adc_set_config+0x388>)
    2640:	4293      	cmp	r3, r2
    2642:	dc04      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2648:	4a1f      	ldr	r2, [pc, #124]	; (26c8 <_adc_set_config+0x38c>)
    264a:	4293      	cmp	r3, r2
    264c:	da01      	bge.n	2652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    264e:	2317      	movs	r3, #23
    2650:	e0f7      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	69db      	ldr	r3, [r3, #28]
    2656:	4a1d      	ldr	r2, [pc, #116]	; (26cc <_adc_set_config+0x390>)
    2658:	4293      	cmp	r3, r2
    265a:	dc04      	bgt.n	2666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2660:	4a1a      	ldr	r2, [pc, #104]	; (26cc <_adc_set_config+0x390>)
    2662:	4293      	cmp	r3, r2
    2664:	dd48      	ble.n	26f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2666:	2317      	movs	r3, #23
    2668:	e0eb      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    266a:	683b      	ldr	r3, [r7, #0]
    266c:	7cdb      	ldrb	r3, [r3, #19]
    266e:	2b00      	cmp	r3, #0
    2670:	d032      	beq.n	26d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2672:	683b      	ldr	r3, [r7, #0]
    2674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2676:	4a16      	ldr	r2, [pc, #88]	; (26d0 <_adc_set_config+0x394>)
    2678:	4293      	cmp	r3, r2
    267a:	dc0e      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2680:	4a14      	ldr	r2, [pc, #80]	; (26d4 <_adc_set_config+0x398>)
    2682:	4293      	cmp	r3, r2
    2684:	db09      	blt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    268a:	4a11      	ldr	r2, [pc, #68]	; (26d0 <_adc_set_config+0x394>)
    268c:	4293      	cmp	r3, r2
    268e:	dc04      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2694:	4a0f      	ldr	r2, [pc, #60]	; (26d4 <_adc_set_config+0x398>)
    2696:	4293      	cmp	r3, r2
    2698:	da1e      	bge.n	26d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    269a:	2317      	movs	r3, #23
    269c:	e0d1      	b.n	2842 <_adc_set_config+0x506>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00002115 	.word	0x00002115
    26a4:	000085ed 	.word	0x000085ed
    26a8:	00008631 	.word	0x00008631
    26ac:	000022c5 	.word	0x000022c5
    26b0:	0001c364 	.word	0x0001c364
    26b4:	000021f1 	.word	0x000021f1
    26b8:	000001ff 	.word	0x000001ff
    26bc:	fffffe00 	.word	0xfffffe00
    26c0:	000003ff 	.word	0x000003ff
    26c4:	000007ff 	.word	0x000007ff
    26c8:	fffff800 	.word	0xfffff800
    26cc:	00000fff 	.word	0x00000fff
    26d0:	00007fff 	.word	0x00007fff
    26d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	69db      	ldr	r3, [r3, #28]
    26dc:	4a5b      	ldr	r2, [pc, #364]	; (284c <_adc_set_config+0x510>)
    26de:	4293      	cmp	r3, r2
    26e0:	dc04      	bgt.n	26ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    26e2:	683b      	ldr	r3, [r7, #0]
    26e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    26e6:	4a59      	ldr	r2, [pc, #356]	; (284c <_adc_set_config+0x510>)
    26e8:	4293      	cmp	r3, r2
    26ea:	dd07      	ble.n	26fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    26ec:	2317      	movs	r3, #23
    26ee:	e0a8      	b.n	2842 <_adc_set_config+0x506>
			break;
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	e004      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	e002      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	e000      	b.n	26fe <_adc_set_config+0x3c2>
			}
			break;
    26fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	0018      	movs	r0, r3
    2704:	4b52      	ldr	r3, [pc, #328]	; (2850 <_adc_set_config+0x514>)
    2706:	4798      	blx	r3
    2708:	1e03      	subs	r3, r0, #0
    270a:	d1f9      	bne.n	2700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    270c:	683b      	ldr	r3, [r7, #0]
    270e:	7e1a      	ldrb	r2, [r3, #24]
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2714:	46c0      	nop			; (mov r8, r8)
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	0018      	movs	r0, r3
    271a:	4b4d      	ldr	r3, [pc, #308]	; (2850 <_adc_set_config+0x514>)
    271c:	4798      	blx	r3
    271e:	1e03      	subs	r3, r0, #0
    2720:	d1f9      	bne.n	2716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2722:	683b      	ldr	r3, [r7, #0]
    2724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2726:	b29a      	uxth	r2, r3
    2728:	693b      	ldr	r3, [r7, #16]
    272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	0018      	movs	r0, r3
    2732:	4b47      	ldr	r3, [pc, #284]	; (2850 <_adc_set_config+0x514>)
    2734:	4798      	blx	r3
    2736:	1e03      	subs	r3, r0, #0
    2738:	d1f9      	bne.n	272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	6a1b      	ldr	r3, [r3, #32]
    273e:	b29a      	uxth	r2, r3
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2744:	2314      	movs	r3, #20
    2746:	18fb      	adds	r3, r7, r3
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	212c      	movs	r1, #44	; 0x2c
    274c:	5c52      	ldrb	r2, [r2, r1]
    274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2750:	2314      	movs	r3, #20
    2752:	18fb      	adds	r3, r7, r3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d006      	beq.n	2768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    275a:	2314      	movs	r3, #20
    275c:	18fb      	adds	r3, r7, r3
    275e:	781a      	ldrb	r2, [r3, #0]
    2760:	2314      	movs	r3, #20
    2762:	18fb      	adds	r3, r7, r3
    2764:	3a01      	subs	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2768:	2314      	movs	r3, #20
    276a:	18fb      	adds	r3, r7, r3
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	2b0f      	cmp	r3, #15
    2770:	d804      	bhi.n	277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	222b      	movs	r2, #43	; 0x2b
    2776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2778:	2b0f      	cmp	r3, #15
    277a:	d901      	bls.n	2780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    277c:	2317      	movs	r3, #23
    277e:	e060      	b.n	2842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	0018      	movs	r0, r3
    2786:	4b32      	ldr	r3, [pc, #200]	; (2850 <_adc_set_config+0x514>)
    2788:	4798      	blx	r3
    278a:	1e03      	subs	r3, r0, #0
    278c:	d1f9      	bne.n	2782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    278e:	683b      	ldr	r3, [r7, #0]
    2790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2792:	683a      	ldr	r2, [r7, #0]
    2794:	212b      	movs	r1, #43	; 0x2b
    2796:	5c52      	ldrb	r2, [r2, r1]
    2798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    279c:	2214      	movs	r2, #20
    279e:	18ba      	adds	r2, r7, r2
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    27a4:	4313      	orrs	r3, r2
			config->negative_input |
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    27aa:	4313      	orrs	r3, r2
			config->positive_input;
    27ac:	683a      	ldr	r2, [r7, #0]
    27ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    27b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    27b2:	693b      	ldr	r3, [r7, #16]
    27b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	222a      	movs	r2, #42	; 0x2a
    27ba:	5c9a      	ldrb	r2, [r3, r2]
    27bc:	693b      	ldr	r3, [r7, #16]
    27be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	220f      	movs	r2, #15
    27c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    27c6:	683b      	ldr	r3, [r7, #0]
    27c8:	2224      	movs	r2, #36	; 0x24
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d01e      	beq.n	280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    27d0:	683b      	ldr	r3, [r7, #0]
    27d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    27d4:	4a1f      	ldr	r2, [pc, #124]	; (2854 <_adc_set_config+0x518>)
    27d6:	4293      	cmp	r3, r2
    27d8:	d901      	bls.n	27de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    27da:	2317      	movs	r3, #23
    27dc:	e031      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    27de:	683b      	ldr	r3, [r7, #0]
    27e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	2228      	movs	r2, #40	; 0x28
    27ea:	5e9b      	ldrsh	r3, [r3, r2]
    27ec:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_adc_set_config+0x51c>)
    27ee:	4293      	cmp	r3, r2
    27f0:	dc05      	bgt.n	27fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    27f2:	683b      	ldr	r3, [r7, #0]
    27f4:	2228      	movs	r2, #40	; 0x28
    27f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    27f8:	4a18      	ldr	r2, [pc, #96]	; (285c <_adc_set_config+0x520>)
    27fa:	4293      	cmp	r3, r2
    27fc:	da01      	bge.n	2802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    27fe:	2317      	movs	r3, #23
    2800:	e01f      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2802:	683b      	ldr	r3, [r7, #0]
    2804:	2228      	movs	r2, #40	; 0x28
    2806:	5e9b      	ldrsh	r3, [r3, r2]
    2808:	b29a      	uxth	r2, r3
    280a:	693b      	ldr	r3, [r7, #16]
    280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    280e:	4b14      	ldr	r3, [pc, #80]	; (2860 <_adc_set_config+0x524>)
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	08db      	lsrs	r3, r3, #3
    2814:	b29b      	uxth	r3, r3
    2816:	021b      	lsls	r3, r3, #8
    2818:	b29a      	uxth	r2, r3
    281a:	23e0      	movs	r3, #224	; 0xe0
    281c:	00db      	lsls	r3, r3, #3
    281e:	4013      	ands	r3, r2
    2820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2822:	4b10      	ldr	r3, [pc, #64]	; (2864 <_adc_set_config+0x528>)
    2824:	685c      	ldr	r4, [r3, #4]
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	0161      	lsls	r1, r4, #5
    282a:	0edd      	lsrs	r5, r3, #27
    282c:	430d      	orrs	r5, r1
    282e:	0ee6      	lsrs	r6, r4, #27
    2830:	b2ab      	uxth	r3, r5
    2832:	21ff      	movs	r1, #255	; 0xff
    2834:	400b      	ands	r3, r1
    2836:	b29b      	uxth	r3, r3
			) |
    2838:	4313      	orrs	r3, r2
    283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2840:	2300      	movs	r3, #0
}
    2842:	0018      	movs	r0, r3
    2844:	46bd      	mov	sp, r7
    2846:	b009      	add	sp, #36	; 0x24
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000ffff 	.word	0x0000ffff
    2850:	000021f1 	.word	0x000021f1
    2854:	00000fff 	.word	0x00000fff
    2858:	000007ff 	.word	0x000007ff
    285c:	fffff800 	.word	0xfffff800
    2860:	00806024 	.word	0x00806024
    2864:	00806020 	.word	0x00806020

00002868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2868:	b580      	push	{r7, lr}
    286a:	b084      	sub	sp, #16
    286c:	af00      	add	r7, sp, #0
    286e:	60f8      	str	r0, [r7, #12]
    2870:	60b9      	str	r1, [r7, #8]
    2872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	68ba      	ldr	r2, [r7, #8]
    2878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	025b      	lsls	r3, r3, #9
    287e:	0019      	movs	r1, r3
    2880:	2002      	movs	r0, #2
    2882:	4b15      	ldr	r3, [pc, #84]	; (28d8 <adc_init+0x70>)
    2884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	b2db      	uxtb	r3, r3
    288c:	001a      	movs	r2, r3
    288e:	2301      	movs	r3, #1
    2890:	4013      	ands	r3, r2
    2892:	d001      	beq.n	2898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2894:	2305      	movs	r3, #5
    2896:	e01a      	b.n	28ce <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2898:	68bb      	ldr	r3, [r7, #8]
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	b2db      	uxtb	r3, r3
    289e:	001a      	movs	r2, r3
    28a0:	2302      	movs	r3, #2
    28a2:	4013      	ands	r3, r2
    28a4:	d001      	beq.n	28aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    28a6:	231c      	movs	r3, #28
    28a8:	e011      	b.n	28ce <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	785a      	ldrb	r2, [r3, #1]
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	791b      	ldrb	r3, [r3, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d102      	bne.n	28c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    28ba:	2001      	movs	r0, #1
    28bc:	4b07      	ldr	r3, [pc, #28]	; (28dc <adc_init+0x74>)
    28be:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    28c0:	687a      	ldr	r2, [r7, #4]
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	0011      	movs	r1, r2
    28c6:	0018      	movs	r0, r3
    28c8:	4b05      	ldr	r3, [pc, #20]	; (28e0 <adc_init+0x78>)
    28ca:	4798      	blx	r3
    28cc:	0003      	movs	r3, r0
}
    28ce:	0018      	movs	r0, r3
    28d0:	46bd      	mov	sp, r7
    28d2:	b004      	add	sp, #16
    28d4:	bd80      	pop	{r7, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	0000212d 	.word	0x0000212d
    28dc:	000021b1 	.word	0x000021b1
    28e0:	0000233d 	.word	0x0000233d

000028e4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    28e8:	4b02      	ldr	r3, [pc, #8]	; (28f4 <system_interrupt_enter_critical_section+0x10>)
    28ea:	4798      	blx	r3
}
    28ec:	46c0      	nop			; (mov r8, r8)
    28ee:	46bd      	mov	sp, r7
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	00007c39 	.word	0x00007c39

000028f8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    28fc:	4b02      	ldr	r3, [pc, #8]	; (2908 <system_interrupt_leave_critical_section+0x10>)
    28fe:	4798      	blx	r3
}
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46bd      	mov	sp, r7
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	00007c8d 	.word	0x00007c8d

0000290c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    290c:	b580      	push	{r7, lr}
    290e:	b086      	sub	sp, #24
    2910:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    2912:	4b49      	ldr	r3, [pc, #292]	; (2a38 <DMAC_Handler+0x12c>)
    2914:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2916:	4b49      	ldr	r3, [pc, #292]	; (2a3c <DMAC_Handler+0x130>)
    2918:	8c1b      	ldrh	r3, [r3, #32]
    291a:	b29b      	uxth	r3, r3
    291c:	b2da      	uxtb	r2, r3
    291e:	2317      	movs	r3, #23
    2920:	18fb      	adds	r3, r7, r3
    2922:	210f      	movs	r1, #15
    2924:	400a      	ands	r2, r1
    2926:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    2928:	2317      	movs	r3, #23
    292a:	18fb      	adds	r3, r7, r3
    292c:	781a      	ldrb	r2, [r3, #0]
    292e:	4b44      	ldr	r3, [pc, #272]	; (2a40 <DMAC_Handler+0x134>)
    2930:	0092      	lsls	r2, r2, #2
    2932:	58d3      	ldr	r3, [r2, r3]
    2934:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2936:	4a41      	ldr	r2, [pc, #260]	; (2a3c <DMAC_Handler+0x130>)
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	210f      	movs	r1, #15
    293e:	400b      	ands	r3, r1
    2940:	b2d9      	uxtb	r1, r3
    2942:	233f      	movs	r3, #63	; 0x3f
    2944:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    2946:	493d      	ldr	r1, [pc, #244]	; (2a3c <DMAC_Handler+0x130>)
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	224e      	movs	r2, #78	; 0x4e
    294e:	5c8a      	ldrb	r2, [r1, r2]
    2950:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2952:	693b      	ldr	r3, [r7, #16]
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	4a3b      	ldr	r2, [pc, #236]	; (2a44 <DMAC_Handler+0x138>)
    2958:	011b      	lsls	r3, r3, #4
    295a:	18d3      	adds	r3, r2, r3
    295c:	3302      	adds	r3, #2
    295e:	881b      	ldrh	r3, [r3, #0]
    2960:	b29b      	uxth	r3, r3
    2962:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	4a37      	ldr	r2, [pc, #220]	; (2a48 <DMAC_Handler+0x13c>)
    296a:	011b      	lsls	r3, r3, #4
    296c:	18d3      	adds	r3, r2, r3
    296e:	3302      	adds	r3, #2
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    2976:	68ba      	ldr	r2, [r7, #8]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	1ad2      	subs	r2, r2, r3
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    2980:	230f      	movs	r3, #15
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2201      	movs	r2, #1
    2988:	4013      	ands	r3, r2
    298a:	d016      	beq.n	29ba <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    298c:	4a2b      	ldr	r2, [pc, #172]	; (2a3c <DMAC_Handler+0x130>)
    298e:	234e      	movs	r3, #78	; 0x4e
    2990:	2101      	movs	r1, #1
    2992:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    2994:	693b      	ldr	r3, [r7, #16]
    2996:	2210      	movs	r2, #16
    2998:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    299a:	693b      	ldr	r3, [r7, #16]
    299c:	7c1b      	ldrb	r3, [r3, #16]
    299e:	001a      	movs	r2, r3
    29a0:	2301      	movs	r3, #1
    29a2:	4013      	ands	r3, r2
    29a4:	d042      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    29a6:	693b      	ldr	r3, [r7, #16]
    29a8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    29aa:	2b00      	cmp	r3, #0
    29ac:	d03e      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	693a      	ldr	r2, [r7, #16]
    29b4:	0010      	movs	r0, r2
    29b6:	4798      	blx	r3
    29b8:	e038      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    29ba:	230f      	movs	r3, #15
    29bc:	18fb      	adds	r3, r7, r3
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2202      	movs	r2, #2
    29c2:	4013      	ands	r3, r2
    29c4:	d016      	beq.n	29f4 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    29c6:	4a1d      	ldr	r2, [pc, #116]	; (2a3c <DMAC_Handler+0x130>)
    29c8:	234e      	movs	r3, #78	; 0x4e
    29ca:	2102      	movs	r1, #2
    29cc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    29ce:	693b      	ldr	r3, [r7, #16]
    29d0:	2200      	movs	r2, #0
    29d2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29d4:	693b      	ldr	r3, [r7, #16]
    29d6:	7c1b      	ldrb	r3, [r3, #16]
    29d8:	001a      	movs	r2, r3
    29da:	2302      	movs	r3, #2
    29dc:	4013      	ands	r3, r2
    29de:	d025      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    29e0:	693b      	ldr	r3, [r7, #16]
    29e2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29e4:	2b00      	cmp	r3, #0
    29e6:	d021      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	689b      	ldr	r3, [r3, #8]
    29ec:	693a      	ldr	r2, [r7, #16]
    29ee:	0010      	movs	r0, r2
    29f0:	4798      	blx	r3
    29f2:	e01b      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    29f4:	230f      	movs	r3, #15
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	2204      	movs	r2, #4
    29fc:	4013      	ands	r3, r2
    29fe:	d015      	beq.n	2a2c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    2a00:	4a0e      	ldr	r2, [pc, #56]	; (2a3c <DMAC_Handler+0x130>)
    2a02:	234e      	movs	r3, #78	; 0x4e
    2a04:	2104      	movs	r1, #4
    2a06:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    2a08:	693b      	ldr	r3, [r7, #16]
    2a0a:	2206      	movs	r2, #6
    2a0c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a0e:	693b      	ldr	r3, [r7, #16]
    2a10:	7c1b      	ldrb	r3, [r3, #16]
    2a12:	001a      	movs	r2, r3
    2a14:	2304      	movs	r3, #4
    2a16:	4013      	ands	r3, r2
    2a18:	d008      	beq.n	2a2c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d004      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	68db      	ldr	r3, [r3, #12]
    2a26:	693a      	ldr	r2, [r7, #16]
    2a28:	0010      	movs	r0, r2
    2a2a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    2a2c:	4b07      	ldr	r3, [pc, #28]	; (2a4c <DMAC_Handler+0x140>)
    2a2e:	4798      	blx	r3
}
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46bd      	mov	sp, r7
    2a34:	b006      	add	sp, #24
    2a36:	bd80      	pop	{r7, pc}
    2a38:	000028e5 	.word	0x000028e5
    2a3c:	41004800 	.word	0x41004800
    2a40:	200001f0 	.word	0x200001f0
    2a44:	200004c0 	.word	0x200004c0
    2a48:	200001a0 	.word	0x200001a0
    2a4c:	000028f9 	.word	0x000028f9

00002a50 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b082      	sub	sp, #8
    2a54:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <nvm_is_ready+0x24>)
    2a58:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	7d1b      	ldrb	r3, [r3, #20]
    2a5e:	b2db      	uxtb	r3, r3
    2a60:	001a      	movs	r2, r3
    2a62:	2301      	movs	r3, #1
    2a64:	4013      	ands	r3, r2
    2a66:	1e5a      	subs	r2, r3, #1
    2a68:	4193      	sbcs	r3, r2
    2a6a:	b2db      	uxtb	r3, r3
}
    2a6c:	0018      	movs	r0, r3
    2a6e:	46bd      	mov	sp, r7
    2a70:	b002      	add	sp, #8
    2a72:	bd80      	pop	{r7, pc}
    2a74:	41004000 	.word	0x41004000

00002a78 <system_apb_clock_set_mask>:
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	0002      	movs	r2, r0
    2a80:	6039      	str	r1, [r7, #0]
    2a82:	1dfb      	adds	r3, r7, #7
    2a84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2a86:	1dfb      	adds	r3, r7, #7
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b01      	cmp	r3, #1
    2a8c:	d00a      	beq.n	2aa4 <system_apb_clock_set_mask+0x2c>
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d00f      	beq.n	2ab2 <system_apb_clock_set_mask+0x3a>
    2a92:	2b00      	cmp	r3, #0
    2a94:	d114      	bne.n	2ac0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2a96:	4b0e      	ldr	r3, [pc, #56]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a98:	4a0d      	ldr	r2, [pc, #52]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a9a:	6991      	ldr	r1, [r2, #24]
    2a9c:	683a      	ldr	r2, [r7, #0]
    2a9e:	430a      	orrs	r2, r1
    2aa0:	619a      	str	r2, [r3, #24]
			break;
    2aa2:	e00f      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2aa4:	4b0a      	ldr	r3, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa6:	4a0a      	ldr	r2, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa8:	69d1      	ldr	r1, [r2, #28]
    2aaa:	683a      	ldr	r2, [r7, #0]
    2aac:	430a      	orrs	r2, r1
    2aae:	61da      	str	r2, [r3, #28]
			break;
    2ab0:	e008      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2ab2:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab4:	4a06      	ldr	r2, [pc, #24]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab6:	6a11      	ldr	r1, [r2, #32]
    2ab8:	683a      	ldr	r2, [r7, #0]
    2aba:	430a      	orrs	r2, r1
    2abc:	621a      	str	r2, [r3, #32]
			break;
    2abe:	e001      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2ac0:	2317      	movs	r3, #23
    2ac2:	e000      	b.n	2ac6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ac4:	2300      	movs	r3, #0
}
    2ac6:	0018      	movs	r0, r3
    2ac8:	46bd      	mov	sp, r7
    2aca:	b002      	add	sp, #8
    2acc:	bd80      	pop	{r7, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	40000400 	.word	0x40000400

00002ad4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b084      	sub	sp, #16
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2adc:	4b2f      	ldr	r3, [pc, #188]	; (2b9c <nvm_set_config+0xc8>)
    2ade:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    2ae0:	2104      	movs	r1, #4
    2ae2:	2001      	movs	r0, #1
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <nvm_set_config+0xcc>)
    2ae6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2220      	movs	r2, #32
    2aec:	32ff      	adds	r2, #255	; 0xff
    2aee:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2af0:	4b2c      	ldr	r3, [pc, #176]	; (2ba4 <nvm_set_config+0xd0>)
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	001a      	movs	r2, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4053      	eors	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d001      	beq.n	2b06 <nvm_set_config+0x32>
		return STATUS_BUSY;
    2b02:	2305      	movs	r3, #5
    2b04:	e045      	b.n	2b92 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	021b      	lsls	r3, r3, #8
    2b0c:	001a      	movs	r2, r3
    2b0e:	23c0      	movs	r3, #192	; 0xc0
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	785b      	ldrb	r3, [r3, #1]
    2b18:	01db      	lsls	r3, r3, #7
    2b1a:	0019      	movs	r1, r3
    2b1c:	23ff      	movs	r3, #255	; 0xff
    2b1e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b20:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	789b      	ldrb	r3, [r3, #2]
    2b26:	005b      	lsls	r3, r3, #1
    2b28:	0019      	movs	r1, r3
    2b2a:	231e      	movs	r3, #30
    2b2c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b2e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	78db      	ldrb	r3, [r3, #3]
    2b34:	049b      	lsls	r3, r3, #18
    2b36:	0019      	movs	r1, r3
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	02db      	lsls	r3, r3, #11
    2b3c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b3e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	791b      	ldrb	r3, [r3, #4]
    2b44:	041b      	lsls	r3, r3, #16
    2b46:	0019      	movs	r1, r3
    2b48:	23c0      	movs	r3, #192	; 0xc0
    2b4a:	029b      	lsls	r3, r3, #10
    2b4c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b4e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	689b      	ldr	r3, [r3, #8]
    2b58:	035b      	lsls	r3, r3, #13
    2b5a:	0f5b      	lsrs	r3, r3, #29
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	001a      	movs	r2, r3
    2b60:	2308      	movs	r3, #8
    2b62:	4093      	lsls	r3, r2
    2b64:	b29a      	uxth	r2, r3
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <nvm_set_config+0xd4>)
    2b68:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	689b      	ldr	r3, [r3, #8]
    2b6e:	b29a      	uxth	r2, r3
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <nvm_set_config+0xd4>)
    2b72:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	785a      	ldrb	r2, [r3, #1]
    2b78:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <nvm_set_config+0xd4>)
    2b7a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	8b1b      	ldrh	r3, [r3, #24]
    2b80:	b29b      	uxth	r3, r3
    2b82:	001a      	movs	r2, r3
    2b84:	2380      	movs	r3, #128	; 0x80
    2b86:	005b      	lsls	r3, r3, #1
    2b88:	4013      	ands	r3, r2
    2b8a:	d001      	beq.n	2b90 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    2b8c:	2310      	movs	r3, #16
    2b8e:	e000      	b.n	2b92 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    2b90:	2300      	movs	r3, #0
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	41004000 	.word	0x41004000
    2ba0:	00002a79 	.word	0x00002a79
    2ba4:	00002a51 	.word	0x00002a51
    2ba8:	20000204 	.word	0x20000204

00002bac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b086      	sub	sp, #24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60b9      	str	r1, [r7, #8]
    2bb4:	607a      	str	r2, [r7, #4]
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	1c02      	adds	r2, r0, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2bbe:	4b3a      	ldr	r3, [pc, #232]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc0:	881b      	ldrh	r3, [r3, #0]
    2bc2:	001a      	movs	r2, r3
    2bc4:	4b38      	ldr	r3, [pc, #224]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc6:	885b      	ldrh	r3, [r3, #2]
    2bc8:	435a      	muls	r2, r3
    2bca:	68bb      	ldr	r3, [r7, #8]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d209      	bcs.n	2be4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2bd0:	68bb      	ldr	r3, [r7, #8]
    2bd2:	4a36      	ldr	r2, [pc, #216]	; (2cac <nvm_execute_command+0x100>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d903      	bls.n	2be0 <nvm_execute_command+0x34>
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	4a35      	ldr	r2, [pc, #212]	; (2cb0 <nvm_execute_command+0x104>)
    2bdc:	4293      	cmp	r3, r2
    2bde:	d901      	bls.n	2be4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2be0:	2318      	movs	r3, #24
    2be2:	e05c      	b.n	2c9e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2be4:	4b33      	ldr	r3, [pc, #204]	; (2cb4 <nvm_execute_command+0x108>)
    2be6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	685b      	ldr	r3, [r3, #4]
    2bec:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	2280      	movs	r2, #128	; 0x80
    2bf2:	02d2      	lsls	r2, r2, #11
    2bf4:	431a      	orrs	r2, r3
    2bf6:	697b      	ldr	r3, [r7, #20]
    2bf8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	2220      	movs	r2, #32
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2c02:	4b2d      	ldr	r3, [pc, #180]	; (2cb8 <nvm_execute_command+0x10c>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	001a      	movs	r2, r3
    2c0a:	2301      	movs	r3, #1
    2c0c:	4053      	eors	r3, r2
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d004      	beq.n	2c1e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2c14:	697b      	ldr	r3, [r7, #20]
    2c16:	693a      	ldr	r2, [r7, #16]
    2c18:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    2c1a:	2305      	movs	r3, #5
    2c1c:	e03f      	b.n	2c9e <nvm_execute_command+0xf2>
	}

	switch (command) {
    2c1e:	230f      	movs	r3, #15
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b45      	cmp	r3, #69	; 0x45
    2c26:	d81d      	bhi.n	2c64 <nvm_execute_command+0xb8>
    2c28:	009a      	lsls	r2, r3, #2
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <nvm_execute_command+0x110>)
    2c2c:	18d3      	adds	r3, r2, r3
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2c32:	697b      	ldr	r3, [r7, #20]
    2c34:	8b1b      	ldrh	r3, [r3, #24]
    2c36:	b29b      	uxth	r3, r3
    2c38:	001a      	movs	r2, r3
    2c3a:	2380      	movs	r3, #128	; 0x80
    2c3c:	005b      	lsls	r3, r3, #1
    2c3e:	4013      	ands	r3, r2
    2c40:	d004      	beq.n	2c4c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	693a      	ldr	r2, [r7, #16]
    2c46:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    2c48:	2310      	movs	r3, #16
    2c4a:	e028      	b.n	2c9e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c4c:	68bb      	ldr	r3, [r7, #8]
    2c4e:	089b      	lsrs	r3, r3, #2
    2c50:	005a      	lsls	r2, r3, #1
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	61da      	str	r2, [r3, #28]
			break;
    2c56:	e00b      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c58:	68bb      	ldr	r3, [r7, #8]
    2c5a:	089b      	lsrs	r3, r3, #2
    2c5c:	005a      	lsls	r2, r3, #1
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	61da      	str	r2, [r3, #28]
			break;
    2c62:	e005      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	693a      	ldr	r2, [r7, #16]
    2c68:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    2c6a:	2317      	movs	r3, #23
    2c6c:	e017      	b.n	2c9e <nvm_execute_command+0xf2>
			break;
    2c6e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    2c70:	230f      	movs	r3, #15
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	b29b      	uxth	r3, r3
    2c78:	4a11      	ldr	r2, [pc, #68]	; (2cc0 <nvm_execute_command+0x114>)
    2c7a:	4313      	orrs	r3, r2
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	697b      	ldr	r3, [r7, #20]
    2c80:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <nvm_execute_command+0x10c>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	001a      	movs	r2, r3
    2c8c:	2301      	movs	r3, #1
    2c8e:	4053      	eors	r3, r2
    2c90:	b2db      	uxtb	r3, r3
    2c92:	2b00      	cmp	r3, #0
    2c94:	d1f6      	bne.n	2c84 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    2c96:	697b      	ldr	r3, [r7, #20]
    2c98:	693a      	ldr	r2, [r7, #16]
    2c9a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b006      	add	sp, #24
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	20000204 	.word	0x20000204
    2cac:	00803fff 	.word	0x00803fff
    2cb0:	00806000 	.word	0x00806000
    2cb4:	41004000 	.word	0x41004000
    2cb8:	00002a51 	.word	0x00002a51
    2cbc:	0001c438 	.word	0x0001c438
    2cc0:	ffffa500 	.word	0xffffa500

00002cc4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b088      	sub	sp, #32
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	60b9      	str	r1, [r7, #8]
    2cce:	1dbb      	adds	r3, r7, #6
    2cd0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2cd2:	4b4a      	ldr	r3, [pc, #296]	; (2dfc <nvm_write_buffer+0x138>)
    2cd4:	881b      	ldrh	r3, [r3, #0]
    2cd6:	001a      	movs	r2, r3
    2cd8:	4b48      	ldr	r3, [pc, #288]	; (2dfc <nvm_write_buffer+0x138>)
    2cda:	885b      	ldrh	r3, [r3, #2]
    2cdc:	435a      	muls	r2, r3
	if (destination_address >
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d201      	bcs.n	2ce8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2ce4:	2318      	movs	r3, #24
    2ce6:	e084      	b.n	2df2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2ce8:	4b44      	ldr	r3, [pc, #272]	; (2dfc <nvm_write_buffer+0x138>)
    2cea:	881b      	ldrh	r3, [r3, #0]
    2cec:	3b01      	subs	r3, #1
    2cee:	001a      	movs	r2, r3
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	4013      	ands	r3, r2
    2cf4:	d001      	beq.n	2cfa <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2cf6:	2318      	movs	r3, #24
    2cf8:	e07b      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2cfa:	4b40      	ldr	r3, [pc, #256]	; (2dfc <nvm_write_buffer+0x138>)
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	1dba      	adds	r2, r7, #6
    2d00:	8812      	ldrh	r2, [r2, #0]
    2d02:	429a      	cmp	r2, r3
    2d04:	d901      	bls.n	2d0a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2d06:	2317      	movs	r3, #23
    2d08:	e073      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2d0a:	4b3d      	ldr	r3, [pc, #244]	; (2e00 <nvm_write_buffer+0x13c>)
    2d0c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2d0e:	4b3d      	ldr	r3, [pc, #244]	; (2e04 <nvm_write_buffer+0x140>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	001a      	movs	r2, r3
    2d16:	2301      	movs	r3, #1
    2d18:	4053      	eors	r3, r2
    2d1a:	b2db      	uxtb	r3, r3
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d001      	beq.n	2d24 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    2d20:	2305      	movs	r3, #5
    2d22:	e066      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    2d24:	697b      	ldr	r3, [r7, #20]
    2d26:	4a38      	ldr	r2, [pc, #224]	; (2e08 <nvm_write_buffer+0x144>)
    2d28:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	4b35      	ldr	r3, [pc, #212]	; (2e04 <nvm_write_buffer+0x140>)
    2d2e:	4798      	blx	r3
    2d30:	0003      	movs	r3, r0
    2d32:	001a      	movs	r2, r3
    2d34:	2301      	movs	r3, #1
    2d36:	4053      	eors	r3, r2
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d1f6      	bne.n	2d2c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2d3e:	697b      	ldr	r3, [r7, #20]
    2d40:	2220      	movs	r2, #32
    2d42:	32ff      	adds	r2, #255	; 0xff
    2d44:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	085b      	lsrs	r3, r3, #1
    2d4a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2d4c:	231a      	movs	r3, #26
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2200      	movs	r2, #0
    2d52:	801a      	strh	r2, [r3, #0]
    2d54:	e032      	b.n	2dbc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    2d56:	231a      	movs	r3, #26
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	68ba      	ldr	r2, [r7, #8]
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	2318      	movs	r3, #24
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2d68:	231a      	movs	r3, #26
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881a      	ldrh	r2, [r3, #0]
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	3b01      	subs	r3, #1
    2d74:	429a      	cmp	r2, r3
    2d76:	da11      	bge.n	2d9c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    2d78:	231a      	movs	r3, #26
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	3301      	adds	r3, #1
    2d80:	68ba      	ldr	r2, [r7, #8]
    2d82:	18d3      	adds	r3, r2, r3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	021b      	lsls	r3, r3, #8
    2d88:	b21a      	sxth	r2, r3
    2d8a:	2318      	movs	r3, #24
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	2100      	movs	r1, #0
    2d90:	5e5b      	ldrsh	r3, [r3, r1]
    2d92:	4313      	orrs	r3, r2
    2d94:	b21a      	sxth	r2, r3
    2d96:	2318      	movs	r3, #24
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	1c5a      	adds	r2, r3, #1
    2da0:	61fa      	str	r2, [r7, #28]
    2da2:	005b      	lsls	r3, r3, #1
    2da4:	001a      	movs	r2, r3
    2da6:	2318      	movs	r3, #24
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2dae:	231a      	movs	r3, #26
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	221a      	movs	r2, #26
    2db4:	18ba      	adds	r2, r7, r2
    2db6:	8812      	ldrh	r2, [r2, #0]
    2db8:	3202      	adds	r2, #2
    2dba:	801a      	strh	r2, [r3, #0]
    2dbc:	231a      	movs	r3, #26
    2dbe:	18fa      	adds	r2, r7, r3
    2dc0:	1dbb      	adds	r3, r7, #6
    2dc2:	8812      	ldrh	r2, [r2, #0]
    2dc4:	881b      	ldrh	r3, [r3, #0]
    2dc6:	429a      	cmp	r2, r3
    2dc8:	d3c5      	bcc.n	2d56 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2dca:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <nvm_write_buffer+0x138>)
    2dcc:	791b      	ldrb	r3, [r3, #4]
    2dce:	2201      	movs	r2, #1
    2dd0:	4053      	eors	r3, r2
    2dd2:	b2db      	uxtb	r3, r3
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d00b      	beq.n	2df0 <nvm_write_buffer+0x12c>
    2dd8:	1dbb      	adds	r3, r7, #6
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	2b3f      	cmp	r3, #63	; 0x3f
    2dde:	d807      	bhi.n	2df0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	2200      	movs	r2, #0
    2de4:	0019      	movs	r1, r3
    2de6:	2004      	movs	r0, #4
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <nvm_write_buffer+0x148>)
    2dea:	4798      	blx	r3
    2dec:	0003      	movs	r3, r0
    2dee:	e000      	b.n	2df2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    2df0:	2300      	movs	r3, #0
}
    2df2:	0018      	movs	r0, r3
    2df4:	46bd      	mov	sp, r7
    2df6:	b008      	add	sp, #32
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	20000204 	.word	0x20000204
    2e00:	41004000 	.word	0x41004000
    2e04:	00002a51 	.word	0x00002a51
    2e08:	ffffa544 	.word	0xffffa544
    2e0c:	00002bad 	.word	0x00002bad

00002e10 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b088      	sub	sp, #32
    2e14:	af00      	add	r7, sp, #0
    2e16:	60f8      	str	r0, [r7, #12]
    2e18:	60b9      	str	r1, [r7, #8]
    2e1a:	1dbb      	adds	r3, r7, #6
    2e1c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2e1e:	4b38      	ldr	r3, [pc, #224]	; (2f00 <nvm_read_buffer+0xf0>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	001a      	movs	r2, r3
    2e24:	4b36      	ldr	r3, [pc, #216]	; (2f00 <nvm_read_buffer+0xf0>)
    2e26:	885b      	ldrh	r3, [r3, #2]
    2e28:	435a      	muls	r2, r3
	if (source_address >
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	429a      	cmp	r2, r3
    2e2e:	d201      	bcs.n	2e34 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2e30:	2318      	movs	r3, #24
    2e32:	e060      	b.n	2ef6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    2e34:	4b32      	ldr	r3, [pc, #200]	; (2f00 <nvm_read_buffer+0xf0>)
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	3b01      	subs	r3, #1
    2e3a:	001a      	movs	r2, r3
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	4013      	ands	r3, r2
    2e40:	d001      	beq.n	2e46 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2e42:	2318      	movs	r3, #24
    2e44:	e057      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2e46:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <nvm_read_buffer+0xf0>)
    2e48:	881b      	ldrh	r3, [r3, #0]
    2e4a:	1dba      	adds	r2, r7, #6
    2e4c:	8812      	ldrh	r2, [r2, #0]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d901      	bls.n	2e56 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2e52:	2317      	movs	r3, #23
    2e54:	e04f      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2e56:	4b2b      	ldr	r3, [pc, #172]	; (2f04 <nvm_read_buffer+0xf4>)
    2e58:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2e5a:	4b2b      	ldr	r3, [pc, #172]	; (2f08 <nvm_read_buffer+0xf8>)
    2e5c:	4798      	blx	r3
    2e5e:	0003      	movs	r3, r0
    2e60:	001a      	movs	r2, r3
    2e62:	2301      	movs	r3, #1
    2e64:	4053      	eors	r3, r2
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d001      	beq.n	2e70 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    2e6c:	2305      	movs	r3, #5
    2e6e:	e042      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	2220      	movs	r2, #32
    2e74:	32ff      	adds	r2, #255	; 0xff
    2e76:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	085b      	lsrs	r3, r3, #1
    2e7c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2e7e:	231a      	movs	r3, #26
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	2200      	movs	r2, #0
    2e84:	801a      	strh	r2, [r3, #0]
    2e86:	e02e      	b.n	2ee6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    2e88:	69fb      	ldr	r3, [r7, #28]
    2e8a:	1c5a      	adds	r2, r3, #1
    2e8c:	61fa      	str	r2, [r7, #28]
    2e8e:	005b      	lsls	r3, r3, #1
    2e90:	001a      	movs	r2, r3
    2e92:	2312      	movs	r3, #18
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	8812      	ldrh	r2, [r2, #0]
    2e98:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    2e9a:	231a      	movs	r3, #26
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	18d3      	adds	r3, r2, r3
    2ea4:	2212      	movs	r2, #18
    2ea6:	18ba      	adds	r2, r7, r2
    2ea8:	8812      	ldrh	r2, [r2, #0]
    2eaa:	b2d2      	uxtb	r2, r2
    2eac:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2eae:	231a      	movs	r3, #26
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	881a      	ldrh	r2, [r3, #0]
    2eb4:	1dbb      	adds	r3, r7, #6
    2eb6:	881b      	ldrh	r3, [r3, #0]
    2eb8:	3b01      	subs	r3, #1
    2eba:	429a      	cmp	r2, r3
    2ebc:	da0c      	bge.n	2ed8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    2ebe:	231a      	movs	r3, #26
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	881b      	ldrh	r3, [r3, #0]
    2ec4:	3301      	adds	r3, #1
    2ec6:	68ba      	ldr	r2, [r7, #8]
    2ec8:	18d3      	adds	r3, r2, r3
    2eca:	2212      	movs	r2, #18
    2ecc:	18ba      	adds	r2, r7, r2
    2ece:	8812      	ldrh	r2, [r2, #0]
    2ed0:	0a12      	lsrs	r2, r2, #8
    2ed2:	b292      	uxth	r2, r2
    2ed4:	b2d2      	uxtb	r2, r2
    2ed6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2ed8:	231a      	movs	r3, #26
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	221a      	movs	r2, #26
    2ede:	18ba      	adds	r2, r7, r2
    2ee0:	8812      	ldrh	r2, [r2, #0]
    2ee2:	3202      	adds	r2, #2
    2ee4:	801a      	strh	r2, [r3, #0]
    2ee6:	231a      	movs	r3, #26
    2ee8:	18fa      	adds	r2, r7, r3
    2eea:	1dbb      	adds	r3, r7, #6
    2eec:	8812      	ldrh	r2, [r2, #0]
    2eee:	881b      	ldrh	r3, [r3, #0]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d3c9      	bcc.n	2e88 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    2ef4:	2300      	movs	r3, #0
}
    2ef6:	0018      	movs	r0, r3
    2ef8:	46bd      	mov	sp, r7
    2efa:	b008      	add	sp, #32
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	20000204 	.word	0x20000204
    2f04:	41004000 	.word	0x41004000
    2f08:	00002a51 	.word	0x00002a51

00002f0c <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b084      	sub	sp, #16
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2f14:	4b1e      	ldr	r3, [pc, #120]	; (2f90 <nvm_erase_row+0x84>)
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	001a      	movs	r2, r3
    2f1a:	4b1d      	ldr	r3, [pc, #116]	; (2f90 <nvm_erase_row+0x84>)
    2f1c:	885b      	ldrh	r3, [r3, #2]
    2f1e:	435a      	muls	r2, r3
	if (row_address >
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	429a      	cmp	r2, r3
    2f24:	d201      	bcs.n	2f2a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2f26:	2318      	movs	r3, #24
    2f28:	e02d      	b.n	2f86 <nvm_erase_row+0x7a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2f2a:	4b19      	ldr	r3, [pc, #100]	; (2f90 <nvm_erase_row+0x84>)
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	009b      	lsls	r3, r3, #2
    2f30:	3b01      	subs	r3, #1
    2f32:	001a      	movs	r2, r3
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	4013      	ands	r3, r2
    2f38:	d001      	beq.n	2f3e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    2f3a:	2318      	movs	r3, #24
    2f3c:	e023      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2f3e:	4b15      	ldr	r3, [pc, #84]	; (2f94 <nvm_erase_row+0x88>)
    2f40:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2f42:	4b15      	ldr	r3, [pc, #84]	; (2f98 <nvm_erase_row+0x8c>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	001a      	movs	r2, r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	4053      	eors	r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d001      	beq.n	2f58 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    2f54:	2305      	movs	r3, #5
    2f56:	e016      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f58:	68fb      	ldr	r3, [r7, #12]
    2f5a:	2220      	movs	r2, #32
    2f5c:	32ff      	adds	r2, #255	; 0xff
    2f5e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	089b      	lsrs	r3, r3, #2
    2f64:	005a      	lsls	r2, r3, #1
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2f6a:	68fb      	ldr	r3, [r7, #12]
    2f6c:	4a0b      	ldr	r2, [pc, #44]	; (2f9c <nvm_erase_row+0x90>)
    2f6e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <nvm_erase_row+0x8c>)
    2f74:	4798      	blx	r3
    2f76:	0003      	movs	r3, r0
    2f78:	001a      	movs	r2, r3
    2f7a:	2301      	movs	r3, #1
    2f7c:	4053      	eors	r3, r2
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1f6      	bne.n	2f72 <nvm_erase_row+0x66>
	}

	return STATUS_OK;
    2f84:	2300      	movs	r3, #0
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b004      	add	sp, #16
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	20000204 	.word	0x20000204
    2f94:	41004000 	.word	0x41004000
    2f98:	00002a51 	.word	0x00002a51
    2f9c:	ffffa502 	.word	0xffffa502

00002fa0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b086      	sub	sp, #24
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2fa8:	4b2a      	ldr	r3, [pc, #168]	; (3054 <nvm_get_parameters+0xb4>)
    2faa:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2220      	movs	r2, #32
    2fb0:	32ff      	adds	r2, #255	; 0xff
    2fb2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	0c1b      	lsrs	r3, r3, #16
    2fbe:	2207      	movs	r2, #7
    2fc0:	4013      	ands	r3, r2
    2fc2:	2208      	movs	r2, #8
    2fc4:	409a      	lsls	r2, r3
    2fc6:	0013      	movs	r3, r2
	parameters->page_size =
    2fc8:	b2da      	uxtb	r2, r3
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    2fce:	693b      	ldr	r3, [r7, #16]
    2fd0:	b29a      	uxth	r2, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    2fd6:	4b20      	ldr	r3, [pc, #128]	; (3058 <nvm_get_parameters+0xb8>)
    2fd8:	881b      	ldrh	r3, [r3, #0]
    2fda:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    2fdc:	091b      	lsrs	r3, r3, #4
    2fde:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    2fe0:	230e      	movs	r3, #14
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2107      	movs	r1, #7
    2fe6:	400a      	ands	r2, r1
    2fe8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    2fea:	230e      	movs	r3, #14
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	881b      	ldrh	r3, [r3, #0]
    2ff0:	2b07      	cmp	r3, #7
    2ff2:	d103      	bne.n	2ffc <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2200      	movs	r2, #0
    2ff8:	605a      	str	r2, [r3, #4]
    2ffa:	e00a      	b.n	3012 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    2ffc:	230e      	movs	r3, #14
    2ffe:	18fb      	adds	r3, r7, r3
    3000:	881b      	ldrh	r3, [r3, #0]
    3002:	2206      	movs	r2, #6
    3004:	1ad3      	subs	r3, r2, r3
    3006:	2204      	movs	r2, #4
    3008:	409a      	lsls	r2, r3
    300a:	0013      	movs	r3, r2
    300c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    3012:	4b11      	ldr	r3, [pc, #68]	; (3058 <nvm_get_parameters+0xb8>)
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    3018:	230c      	movs	r3, #12
    301a:	18fb      	adds	r3, r7, r3
    301c:	2107      	movs	r1, #7
    301e:	400a      	ands	r2, r1
    3020:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    3022:	230c      	movs	r3, #12
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	2b07      	cmp	r3, #7
    302a:	d103      	bne.n	3034 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2200      	movs	r2, #0
    3030:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    3032:	e00a      	b.n	304a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    3034:	230c      	movs	r3, #12
    3036:	18fb      	adds	r3, r7, r3
    3038:	881b      	ldrh	r3, [r3, #0]
    303a:	2207      	movs	r2, #7
    303c:	1ad3      	subs	r3, r2, r3
    303e:	2204      	movs	r2, #4
    3040:	409a      	lsls	r2, r3
    3042:	0013      	movs	r3, r2
    3044:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	609a      	str	r2, [r3, #8]
}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	46bd      	mov	sp, r7
    304e:	b006      	add	sp, #24
    3050:	bd80      	pop	{r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	41004000 	.word	0x41004000
    3058:	00804000 	.word	0x00804000

0000305c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    305c:	b580      	push	{r7, lr}
    305e:	af00      	add	r7, sp, #0
    3060:	2000      	movs	r0, #0
    3062:	4b02      	ldr	r3, [pc, #8]	; (306c <TCC0_Handler+0x10>)
    3064:	4798      	blx	r3
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}
    306c:	00003099 	.word	0x00003099

00003070 <TCC1_Handler>:
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
    3074:	2001      	movs	r0, #1
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <TCC1_Handler+0x10>)
    3078:	4798      	blx	r3
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	46bd      	mov	sp, r7
    307e:	bd80      	pop	{r7, pc}
    3080:	00003099 	.word	0x00003099

00003084 <TCC2_Handler>:
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
    3088:	2002      	movs	r0, #2
    308a:	4b02      	ldr	r3, [pc, #8]	; (3094 <TCC2_Handler+0x10>)
    308c:	4798      	blx	r3
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	00003099 	.word	0x00003099

00003098 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	0002      	movs	r2, r0
    30a0:	1dfb      	adds	r3, r7, #7
    30a2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    30a8:	4b18      	ldr	r3, [pc, #96]	; (310c <_tcc_interrupt_handler+0x74>)
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	58d3      	ldr	r3, [r2, r3]
    30ae:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    30b6:	693b      	ldr	r3, [r7, #16]
    30b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30ba:	401a      	ands	r2, r3
			module->enable_callback_mask);
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30c0:	4013      	ands	r3, r2
    30c2:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30c4:	2300      	movs	r3, #0
    30c6:	617b      	str	r3, [r7, #20]
    30c8:	e019      	b.n	30fe <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    30ca:	4b11      	ldr	r3, [pc, #68]	; (3110 <_tcc_interrupt_handler+0x78>)
    30cc:	697a      	ldr	r2, [r7, #20]
    30ce:	0092      	lsls	r2, r2, #2
    30d0:	58d3      	ldr	r3, [r2, r3]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	4013      	ands	r3, r2
    30d6:	d00f      	beq.n	30f8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    30d8:	693a      	ldr	r2, [r7, #16]
    30da:	697b      	ldr	r3, [r7, #20]
    30dc:	009b      	lsls	r3, r3, #2
    30de:	18d3      	adds	r3, r2, r3
    30e0:	3304      	adds	r3, #4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	693a      	ldr	r2, [r7, #16]
    30e6:	0010      	movs	r0, r2
    30e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    30ea:	693b      	ldr	r3, [r7, #16]
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	4a08      	ldr	r2, [pc, #32]	; (3110 <_tcc_interrupt_handler+0x78>)
    30f0:	6979      	ldr	r1, [r7, #20]
    30f2:	0089      	lsls	r1, r1, #2
    30f4:	588a      	ldr	r2, [r1, r2]
    30f6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	3301      	adds	r3, #1
    30fc:	617b      	str	r3, [r7, #20]
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2b0b      	cmp	r3, #11
    3102:	dde2      	ble.n	30ca <_tcc_interrupt_handler+0x32>
		}
	}
}
    3104:	46c0      	nop			; (mov r8, r8)
    3106:	46bd      	mov	sp, r7
    3108:	b006      	add	sp, #24
    310a:	bd80      	pop	{r7, pc}
    310c:	20000510 	.word	0x20000510
    3110:	0001c550 	.word	0x0001c550

00003114 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3114:	b580      	push	{r7, lr}
    3116:	af00      	add	r7, sp, #0
    3118:	2000      	movs	r0, #0
    311a:	4b02      	ldr	r3, [pc, #8]	; (3124 <TC3_Handler+0x10>)
    311c:	4798      	blx	r3
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	00003151 	.word	0x00003151

00003128 <TC4_Handler>:
    3128:	b580      	push	{r7, lr}
    312a:	af00      	add	r7, sp, #0
    312c:	2001      	movs	r0, #1
    312e:	4b02      	ldr	r3, [pc, #8]	; (3138 <TC4_Handler+0x10>)
    3130:	4798      	blx	r3
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}
    3138:	00003151 	.word	0x00003151

0000313c <TC5_Handler>:
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
    3140:	2002      	movs	r0, #2
    3142:	4b02      	ldr	r3, [pc, #8]	; (314c <TC5_Handler+0x10>)
    3144:	4798      	blx	r3
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	46bd      	mov	sp, r7
    314a:	bd80      	pop	{r7, pc}
    314c:	00003151 	.word	0x00003151

00003150 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	0002      	movs	r2, r0
    3158:	1dfb      	adds	r3, r7, #7
    315a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    315c:	1dfb      	adds	r3, r7, #7
    315e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3160:	4b28      	ldr	r3, [pc, #160]	; (3204 <_tc_interrupt_handler+0xb4>)
    3162:	0092      	lsls	r2, r2, #2
    3164:	58d3      	ldr	r3, [r2, r3]
    3166:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	7b9b      	ldrb	r3, [r3, #14]
    316e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3174:	4013      	ands	r3, r2
    3176:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    317c:	230b      	movs	r3, #11
    317e:	18fb      	adds	r3, r7, r3
    3180:	400a      	ands	r2, r1
    3182:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3184:	230b      	movs	r3, #11
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2201      	movs	r2, #1
    318c:	4013      	ands	r3, r2
    318e:	d008      	beq.n	31a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	68fa      	ldr	r2, [r7, #12]
    3196:	0010      	movs	r0, r2
    3198:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	2201      	movs	r2, #1
    31a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    31a2:	230b      	movs	r3, #11
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2202      	movs	r2, #2
    31aa:	4013      	ands	r3, r2
    31ac:	d008      	beq.n	31c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	68db      	ldr	r3, [r3, #12]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	0010      	movs	r0, r2
    31b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2202      	movs	r2, #2
    31be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    31c0:	230b      	movs	r3, #11
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2210      	movs	r2, #16
    31c8:	4013      	ands	r3, r2
    31ca:	d008      	beq.n	31de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	691b      	ldr	r3, [r3, #16]
    31d0:	68fa      	ldr	r2, [r7, #12]
    31d2:	0010      	movs	r0, r2
    31d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31d6:	68fb      	ldr	r3, [r7, #12]
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	2210      	movs	r2, #16
    31dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    31de:	230b      	movs	r3, #11
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	2220      	movs	r2, #32
    31e6:	4013      	ands	r3, r2
    31e8:	d008      	beq.n	31fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	695b      	ldr	r3, [r3, #20]
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	0010      	movs	r0, r2
    31f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2220      	movs	r2, #32
    31fa:	739a      	strb	r2, [r3, #14]
	}
}
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46bd      	mov	sp, r7
    3200:	b004      	add	sp, #16
    3202:	bd80      	pop	{r7, pc}
    3204:	2000051c 	.word	0x2000051c

00003208 <system_gclk_chan_get_config_defaults>:
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	2200      	movs	r2, #0
    3214:	701a      	strb	r2, [r3, #0]
}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46bd      	mov	sp, r7
    321a:	b002      	add	sp, #8
    321c:	bd80      	pop	{r7, pc}
	...

00003220 <system_apb_clock_set_mask>:
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	0002      	movs	r2, r0
    3228:	6039      	str	r1, [r7, #0]
    322a:	1dfb      	adds	r3, r7, #7
    322c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    322e:	1dfb      	adds	r3, r7, #7
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b01      	cmp	r3, #1
    3234:	d00a      	beq.n	324c <system_apb_clock_set_mask+0x2c>
    3236:	2b02      	cmp	r3, #2
    3238:	d00f      	beq.n	325a <system_apb_clock_set_mask+0x3a>
    323a:	2b00      	cmp	r3, #0
    323c:	d114      	bne.n	3268 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    323e:	4b0e      	ldr	r3, [pc, #56]	; (3278 <system_apb_clock_set_mask+0x58>)
    3240:	4a0d      	ldr	r2, [pc, #52]	; (3278 <system_apb_clock_set_mask+0x58>)
    3242:	6991      	ldr	r1, [r2, #24]
    3244:	683a      	ldr	r2, [r7, #0]
    3246:	430a      	orrs	r2, r1
    3248:	619a      	str	r2, [r3, #24]
			break;
    324a:	e00f      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    324c:	4b0a      	ldr	r3, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    324e:	4a0a      	ldr	r2, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    3250:	69d1      	ldr	r1, [r2, #28]
    3252:	683a      	ldr	r2, [r7, #0]
    3254:	430a      	orrs	r2, r1
    3256:	61da      	str	r2, [r3, #28]
			break;
    3258:	e008      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <system_apb_clock_set_mask+0x58>)
    325c:	4a06      	ldr	r2, [pc, #24]	; (3278 <system_apb_clock_set_mask+0x58>)
    325e:	6a11      	ldr	r1, [r2, #32]
    3260:	683a      	ldr	r2, [r7, #0]
    3262:	430a      	orrs	r2, r1
    3264:	621a      	str	r2, [r3, #32]
			break;
    3266:	e001      	b.n	326c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3268:	2317      	movs	r3, #23
    326a:	e000      	b.n	326e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    326c:	2300      	movs	r3, #0
}
    326e:	0018      	movs	r0, r3
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	40000400 	.word	0x40000400

0000327c <system_pinmux_get_config_defaults>:
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2280      	movs	r2, #128	; 0x80
    3288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2200      	movs	r2, #0
    328e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2201      	movs	r2, #1
    3294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	2200      	movs	r2, #0
    329a:	70da      	strb	r2, [r3, #3]
}
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46bd      	mov	sp, r7
    32a0:	b002      	add	sp, #8
    32a2:	bd80      	pop	{r7, pc}

000032a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <system_is_debugger_present+0x1c>)
    32aa:	789b      	ldrb	r3, [r3, #2]
    32ac:	b2db      	uxtb	r3, r3
    32ae:	001a      	movs	r2, r3
    32b0:	2302      	movs	r3, #2
    32b2:	4013      	ands	r3, r2
    32b4:	1e5a      	subs	r2, r3, #1
    32b6:	4193      	sbcs	r3, r2
    32b8:	b2db      	uxtb	r3, r3
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	bd80      	pop	{r7, pc}
    32c0:	41002000 	.word	0x41002000

000032c4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	69db      	ldr	r3, [r3, #28]
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
    32da:	1e5a      	subs	r2, r3, #1
    32dc:	4193      	sbcs	r3, r2
    32de:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    32e0:	0018      	movs	r0, r3
    32e2:	46bd      	mov	sp, r7
    32e4:	b004      	add	sp, #16
    32e6:	bd80      	pop	{r7, pc}

000032e8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	0018      	movs	r0, r3
    32f6:	4b04      	ldr	r3, [pc, #16]	; (3308 <_i2c_master_wait_for_sync+0x20>)
    32f8:	4798      	blx	r3
    32fa:	1e03      	subs	r3, r0, #0
    32fc:	d1f9      	bne.n	32f2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46bd      	mov	sp, r7
    3302:	b002      	add	sp, #8
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	000032c5 	.word	0x000032c5

0000330c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	b095      	sub	sp, #84	; 0x54
    3310:	af00      	add	r7, sp, #0
    3312:	60f8      	str	r0, [r7, #12]
    3314:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3316:	2300      	movs	r3, #0
    3318:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    331a:	2300      	movs	r3, #0
    331c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    331e:	2300      	movs	r3, #0
    3320:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    3322:	233b      	movs	r3, #59	; 0x3b
    3324:	2208      	movs	r2, #8
    3326:	4694      	mov	ip, r2
    3328:	44bc      	add	ip, r7
    332a:	4463      	add	r3, ip
    332c:	2200      	movs	r2, #0
    332e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    3336:	68fb      	ldr	r3, [r7, #12]
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    333c:	2323      	movs	r3, #35	; 0x23
    333e:	2208      	movs	r2, #8
    3340:	18ba      	adds	r2, r7, r2
    3342:	18d4      	adds	r4, r2, r3
    3344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3346:	0018      	movs	r0, r3
    3348:	4bdb      	ldr	r3, [pc, #876]	; (36b8 <_i2c_master_set_config+0x3ac>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3350:	230c      	movs	r3, #12
    3352:	2208      	movs	r2, #8
    3354:	4694      	mov	ip, r2
    3356:	44bc      	add	ip, r7
    3358:	4463      	add	r3, ip
    335a:	0018      	movs	r0, r3
    335c:	4bd7      	ldr	r3, [pc, #860]	; (36bc <_i2c_master_set_config+0x3b0>)
    335e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3360:	68bb      	ldr	r3, [r7, #8]
    3362:	69db      	ldr	r3, [r3, #28]
    3364:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    3366:	68bb      	ldr	r3, [r7, #8]
    3368:	6a1b      	ldr	r3, [r3, #32]
    336a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    336e:	2b00      	cmp	r3, #0
    3370:	d106      	bne.n	3380 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3374:	2100      	movs	r1, #0
    3376:	0018      	movs	r0, r3
    3378:	4bd1      	ldr	r3, [pc, #836]	; (36c0 <_i2c_master_set_config+0x3b4>)
    337a:	4798      	blx	r3
    337c:	0003      	movs	r3, r0
    337e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3382:	b2da      	uxtb	r2, r3
    3384:	230c      	movs	r3, #12
    3386:	2108      	movs	r1, #8
    3388:	468c      	mov	ip, r1
    338a:	44bc      	add	ip, r7
    338c:	4463      	add	r3, ip
    338e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3390:	230c      	movs	r3, #12
    3392:	2208      	movs	r2, #8
    3394:	4694      	mov	ip, r2
    3396:	44bc      	add	ip, r7
    3398:	4463      	add	r3, ip
    339a:	2202      	movs	r2, #2
    339c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33a0:	0c1b      	lsrs	r3, r3, #16
    33a2:	b2db      	uxtb	r3, r3
    33a4:	220c      	movs	r2, #12
    33a6:	2108      	movs	r1, #8
    33a8:	468c      	mov	ip, r1
    33aa:	44bc      	add	ip, r7
    33ac:	4462      	add	r2, ip
    33ae:	0011      	movs	r1, r2
    33b0:	0018      	movs	r0, r3
    33b2:	4bc4      	ldr	r3, [pc, #784]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    33b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33b8:	2b00      	cmp	r3, #0
    33ba:	d106      	bne.n	33ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    33bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33be:	2101      	movs	r1, #1
    33c0:	0018      	movs	r0, r3
    33c2:	4bbf      	ldr	r3, [pc, #764]	; (36c0 <_i2c_master_set_config+0x3b4>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
    33c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    33ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33cc:	b2da      	uxtb	r2, r3
    33ce:	230c      	movs	r3, #12
    33d0:	2108      	movs	r1, #8
    33d2:	468c      	mov	ip, r1
    33d4:	44bc      	add	ip, r7
    33d6:	4463      	add	r3, ip
    33d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    33da:	230c      	movs	r3, #12
    33dc:	2208      	movs	r2, #8
    33de:	4694      	mov	ip, r2
    33e0:	44bc      	add	ip, r7
    33e2:	4463      	add	r3, ip
    33e4:	2202      	movs	r2, #2
    33e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    33e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33ea:	0c1b      	lsrs	r3, r3, #16
    33ec:	b2db      	uxtb	r3, r3
    33ee:	220c      	movs	r2, #12
    33f0:	2108      	movs	r1, #8
    33f2:	468c      	mov	ip, r1
    33f4:	44bc      	add	ip, r7
    33f6:	4462      	add	r2, ip
    33f8:	0011      	movs	r1, r2
    33fa:	0018      	movs	r0, r3
    33fc:	4bb1      	ldr	r3, [pc, #708]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3400:	68bb      	ldr	r3, [r7, #8]
    3402:	8a9a      	ldrh	r2, [r3, #20]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	8ada      	ldrh	r2, [r3, #22]
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	7e1b      	ldrb	r3, [r3, #24]
    3414:	2b00      	cmp	r3, #0
    3416:	d103      	bne.n	3420 <_i2c_master_set_config+0x114>
    3418:	4bab      	ldr	r3, [pc, #684]	; (36c8 <_i2c_master_set_config+0x3bc>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d002      	beq.n	3426 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	64fb      	str	r3, [r7, #76]	; 0x4c
    3424:	e001      	b.n	342a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3426:	2300      	movs	r3, #0
    3428:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    342a:	68bb      	ldr	r3, [r7, #8]
    342c:	691b      	ldr	r3, [r3, #16]
    342e:	2b00      	cmp	r3, #0
    3430:	d004      	beq.n	343c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	691b      	ldr	r3, [r3, #16]
    3436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3438:	4313      	orrs	r3, r2
    343a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	689b      	ldr	r3, [r3, #8]
    3440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3442:	4313      	orrs	r3, r2
    3444:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	2224      	movs	r2, #36	; 0x24
    344a:	5c9b      	ldrb	r3, [r3, r2]
    344c:	2b00      	cmp	r3, #0
    344e:	d004      	beq.n	345a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3452:	2280      	movs	r2, #128	; 0x80
    3454:	05d2      	lsls	r2, r2, #23
    3456:	4313      	orrs	r3, r2
    3458:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    345e:	2b00      	cmp	r3, #0
    3460:	d004      	beq.n	346c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3468:	4313      	orrs	r3, r2
    346a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    346c:	68bb      	ldr	r3, [r7, #8]
    346e:	222c      	movs	r2, #44	; 0x2c
    3470:	5c9b      	ldrb	r3, [r3, r2]
    3472:	2b00      	cmp	r3, #0
    3474:	d105      	bne.n	3482 <_i2c_master_set_config+0x176>
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	689a      	ldr	r2, [r3, #8]
    347a:	2380      	movs	r3, #128	; 0x80
    347c:	049b      	lsls	r3, r3, #18
    347e:	429a      	cmp	r2, r3
    3480:	d104      	bne.n	348c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	0512      	lsls	r2, r2, #20
    3488:	4313      	orrs	r3, r2
    348a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    348c:	68bb      	ldr	r3, [r7, #8]
    348e:	222d      	movs	r2, #45	; 0x2d
    3490:	5c9b      	ldrb	r3, [r3, r2]
    3492:	2b00      	cmp	r3, #0
    3494:	d004      	beq.n	34a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3498:	2280      	movs	r2, #128	; 0x80
    349a:	0412      	lsls	r2, r2, #16
    349c:	4313      	orrs	r3, r2
    349e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    34a0:	68bb      	ldr	r3, [r7, #8]
    34a2:	222e      	movs	r2, #46	; 0x2e
    34a4:	5c9b      	ldrb	r3, [r3, r2]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d004      	beq.n	34b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    34aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	03d2      	lsls	r2, r2, #15
    34b0:	4313      	orrs	r3, r2
    34b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    34b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ba:	431a      	orrs	r2, r3
    34bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    34c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34c2:	2280      	movs	r2, #128	; 0x80
    34c4:	0052      	lsls	r2, r2, #1
    34c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    34c8:	2323      	movs	r3, #35	; 0x23
    34ca:	2208      	movs	r2, #8
    34cc:	4694      	mov	ip, r2
    34ce:	44bc      	add	ip, r7
    34d0:	4463      	add	r3, ip
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	3314      	adds	r3, #20
    34d6:	b2db      	uxtb	r3, r3
    34d8:	0018      	movs	r0, r3
    34da:	4b7c      	ldr	r3, [pc, #496]	; (36cc <_i2c_master_set_config+0x3c0>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	22fa      	movs	r2, #250	; 0xfa
    34e8:	0092      	lsls	r2, r2, #2
    34ea:	4353      	muls	r3, r2
    34ec:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    34ee:	68bb      	ldr	r3, [r7, #8]
    34f0:	685b      	ldr	r3, [r3, #4]
    34f2:	22fa      	movs	r2, #250	; 0xfa
    34f4:	0092      	lsls	r2, r2, #2
    34f6:	4353      	muls	r3, r2
    34f8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    34fa:	68bb      	ldr	r3, [r7, #8]
    34fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    34fe:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    3500:	4b73      	ldr	r3, [pc, #460]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3502:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3504:	4798      	blx	r3
    3506:	0005      	movs	r5, r0
    3508:	000e      	movs	r6, r1
    350a:	4b71      	ldr	r3, [pc, #452]	; (36d0 <_i2c_master_set_config+0x3c4>)
    350c:	6a38      	ldr	r0, [r7, #32]
    350e:	4798      	blx	r3
    3510:	6038      	str	r0, [r7, #0]
    3512:	6079      	str	r1, [r7, #4]
    3514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3516:	69ba      	ldr	r2, [r7, #24]
    3518:	435a      	muls	r2, r3
    351a:	4b6d      	ldr	r3, [pc, #436]	; (36d0 <_i2c_master_set_config+0x3c4>)
    351c:	0010      	movs	r0, r2
    351e:	4798      	blx	r3
    3520:	4c6c      	ldr	r4, [pc, #432]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3522:	4a6d      	ldr	r2, [pc, #436]	; (36d8 <_i2c_master_set_config+0x3cc>)
    3524:	4b6d      	ldr	r3, [pc, #436]	; (36dc <_i2c_master_set_config+0x3d0>)
    3526:	47a0      	blx	r4
    3528:	0003      	movs	r3, r0
    352a:	000c      	movs	r4, r1
    352c:	0018      	movs	r0, r3
    352e:	0021      	movs	r1, r4
    3530:	4c6b      	ldr	r4, [pc, #428]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3532:	2200      	movs	r2, #0
    3534:	4b6b      	ldr	r3, [pc, #428]	; (36e4 <_i2c_master_set_config+0x3d8>)
    3536:	47a0      	blx	r4
    3538:	0003      	movs	r3, r0
    353a:	000c      	movs	r4, r1
    353c:	001a      	movs	r2, r3
    353e:	0023      	movs	r3, r4
    3540:	4c64      	ldr	r4, [pc, #400]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3542:	6838      	ldr	r0, [r7, #0]
    3544:	6879      	ldr	r1, [r7, #4]
    3546:	47a0      	blx	r4
    3548:	0003      	movs	r3, r0
    354a:	000c      	movs	r4, r1
    354c:	001a      	movs	r2, r3
    354e:	0023      	movs	r3, r4
    3550:	4c65      	ldr	r4, [pc, #404]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3552:	0028      	movs	r0, r5
    3554:	0031      	movs	r1, r6
    3556:	47a0      	blx	r4
    3558:	0003      	movs	r3, r0
    355a:	000c      	movs	r4, r1
    355c:	001d      	movs	r5, r3
    355e:	0026      	movs	r6, r4
    3560:	6a3b      	ldr	r3, [r7, #32]
    3562:	005a      	lsls	r2, r3, #1
    3564:	4b5a      	ldr	r3, [pc, #360]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3566:	0010      	movs	r0, r2
    3568:	4798      	blx	r3
    356a:	0002      	movs	r2, r0
    356c:	000b      	movs	r3, r1
    356e:	4c5c      	ldr	r4, [pc, #368]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3570:	0028      	movs	r0, r5
    3572:	0031      	movs	r1, r6
    3574:	47a0      	blx	r4
    3576:	0003      	movs	r3, r0
    3578:	000c      	movs	r4, r1
    357a:	0018      	movs	r0, r3
    357c:	0021      	movs	r1, r4
    357e:	4c5a      	ldr	r4, [pc, #360]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3580:	2200      	movs	r2, #0
    3582:	4b5a      	ldr	r3, [pc, #360]	; (36ec <_i2c_master_set_config+0x3e0>)
    3584:	47a0      	blx	r4
    3586:	0003      	movs	r3, r0
    3588:	000c      	movs	r4, r1
    358a:	001d      	movs	r5, r3
    358c:	0026      	movs	r6, r4
    358e:	6a3b      	ldr	r3, [r7, #32]
    3590:	005a      	lsls	r2, r3, #1
    3592:	4b4f      	ldr	r3, [pc, #316]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3594:	0010      	movs	r0, r2
    3596:	4798      	blx	r3
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	4c54      	ldr	r4, [pc, #336]	; (36f0 <_i2c_master_set_config+0x3e4>)
    359e:	0028      	movs	r0, r5
    35a0:	0031      	movs	r1, r6
    35a2:	47a0      	blx	r4
    35a4:	0003      	movs	r3, r0
    35a6:	000c      	movs	r4, r1
    35a8:	0019      	movs	r1, r3
    35aa:	0022      	movs	r2, r4
    35ac:	4b51      	ldr	r3, [pc, #324]	; (36f4 <_i2c_master_set_config+0x3e8>)
    35ae:	0008      	movs	r0, r1
    35b0:	0011      	movs	r1, r2
    35b2:	4798      	blx	r3
    35b4:	0003      	movs	r3, r0
    35b6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	689a      	ldr	r2, [r3, #8]
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	049b      	lsls	r3, r3, #18
    35c0:	429a      	cmp	r2, r3
    35c2:	d145      	bne.n	3650 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    35c4:	4b42      	ldr	r3, [pc, #264]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    35c8:	4798      	blx	r3
    35ca:	4c45      	ldr	r4, [pc, #276]	; (36e0 <_i2c_master_set_config+0x3d4>)
    35cc:	0002      	movs	r2, r0
    35ce:	000b      	movs	r3, r1
    35d0:	47a0      	blx	r4
    35d2:	0003      	movs	r3, r0
    35d4:	000c      	movs	r4, r1
    35d6:	001d      	movs	r5, r3
    35d8:	0026      	movs	r6, r4
    35da:	4b3d      	ldr	r3, [pc, #244]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35dc:	69f8      	ldr	r0, [r7, #28]
    35de:	4798      	blx	r3
    35e0:	4c3c      	ldr	r4, [pc, #240]	; (36d4 <_i2c_master_set_config+0x3c8>)
    35e2:	2200      	movs	r2, #0
    35e4:	4b44      	ldr	r3, [pc, #272]	; (36f8 <_i2c_master_set_config+0x3ec>)
    35e6:	47a0      	blx	r4
    35e8:	0003      	movs	r3, r0
    35ea:	000c      	movs	r4, r1
    35ec:	001a      	movs	r2, r3
    35ee:	0023      	movs	r3, r4
    35f0:	4c3f      	ldr	r4, [pc, #252]	; (36f0 <_i2c_master_set_config+0x3e4>)
    35f2:	0028      	movs	r0, r5
    35f4:	0031      	movs	r1, r6
    35f6:	47a0      	blx	r4
    35f8:	0003      	movs	r3, r0
    35fa:	000c      	movs	r4, r1
    35fc:	0018      	movs	r0, r3
    35fe:	0021      	movs	r1, r4
    3600:	4c39      	ldr	r4, [pc, #228]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3602:	2200      	movs	r2, #0
    3604:	4b39      	ldr	r3, [pc, #228]	; (36ec <_i2c_master_set_config+0x3e0>)
    3606:	47a0      	blx	r4
    3608:	0003      	movs	r3, r0
    360a:	000c      	movs	r4, r1
    360c:	0019      	movs	r1, r3
    360e:	0022      	movs	r2, r4
    3610:	4b38      	ldr	r3, [pc, #224]	; (36f4 <_i2c_master_set_config+0x3e8>)
    3612:	0008      	movs	r0, r1
    3614:	0011      	movs	r1, r2
    3616:	4798      	blx	r3
    3618:	0003      	movs	r3, r0
    361a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    361e:	2b00      	cmp	r3, #0
    3620:	d009      	beq.n	3636 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3622:	4b36      	ldr	r3, [pc, #216]	; (36fc <_i2c_master_set_config+0x3f0>)
    3624:	69f9      	ldr	r1, [r7, #28]
    3626:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
    362c:	1e9a      	subs	r2, r3, #2
    362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3630:	1ad3      	subs	r3, r2, r3
    3632:	64bb      	str	r3, [r7, #72]	; 0x48
    3634:	e00c      	b.n	3650 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3636:	69fb      	ldr	r3, [r7, #28]
    3638:	005a      	lsls	r2, r3, #1
    363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363c:	18d3      	adds	r3, r2, r3
    363e:	1e5a      	subs	r2, r3, #1
    3640:	69fb      	ldr	r3, [r7, #28]
    3642:	0059      	lsls	r1, r3, #1
    3644:	4b2d      	ldr	r3, [pc, #180]	; (36fc <_i2c_master_set_config+0x3f0>)
    3646:	0010      	movs	r0, r2
    3648:	4798      	blx	r3
    364a:	0003      	movs	r3, r0
    364c:	3b01      	subs	r3, #1
    364e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3652:	2bff      	cmp	r3, #255	; 0xff
    3654:	dc08      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3658:	2b00      	cmp	r3, #0
    365a:	db05      	blt.n	3668 <_i2c_master_set_config+0x35c>
    365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365e:	2bff      	cmp	r3, #255	; 0xff
    3660:	dc02      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3664:	2b00      	cmp	r3, #0
    3666:	da06      	bge.n	3676 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3668:	233b      	movs	r3, #59	; 0x3b
    366a:	2208      	movs	r2, #8
    366c:	4694      	mov	ip, r2
    366e:	44bc      	add	ip, r7
    3670:	4463      	add	r3, ip
    3672:	2240      	movs	r2, #64	; 0x40
    3674:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3676:	233b      	movs	r3, #59	; 0x3b
    3678:	2208      	movs	r2, #8
    367a:	4694      	mov	ip, r2
    367c:	44bc      	add	ip, r7
    367e:	4463      	add	r3, ip
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b40      	cmp	r3, #64	; 0x40
    3684:	d00e      	beq.n	36a4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3688:	22ff      	movs	r2, #255	; 0xff
    368a:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    368e:	041b      	lsls	r3, r3, #16
    3690:	0019      	movs	r1, r3
    3692:	23ff      	movs	r3, #255	; 0xff
    3694:	041b      	lsls	r3, r3, #16
    3696:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3698:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    369c:	0612      	lsls	r2, r2, #24
    369e:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    36a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36a2:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    36a4:	233b      	movs	r3, #59	; 0x3b
    36a6:	2208      	movs	r2, #8
    36a8:	4694      	mov	ip, r2
    36aa:	44bc      	add	ip, r7
    36ac:	4463      	add	r3, ip
    36ae:	781b      	ldrb	r3, [r3, #0]
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b015      	add	sp, #84	; 0x54
    36b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b8:	00007a01 	.word	0x00007a01
    36bc:	0000327d 	.word	0x0000327d
    36c0:	00007845 	.word	0x00007845
    36c4:	000088d9 	.word	0x000088d9
    36c8:	000032a5 	.word	0x000032a5
    36cc:	00008711 	.word	0x00008711
    36d0:	0001bea5 	.word	0x0001bea5
    36d4:	0001b28d 	.word	0x0001b28d
    36d8:	e826d695 	.word	0xe826d695
    36dc:	3e112e0b 	.word	0x3e112e0b
    36e0:	0001a405 	.word	0x0001a405
    36e4:	40240000 	.word	0x40240000
    36e8:	0001b78d 	.word	0x0001b78d
    36ec:	3ff00000 	.word	0x3ff00000
    36f0:	0001aa25 	.word	0x0001aa25
    36f4:	0001bdb9 	.word	0x0001bdb9
    36f8:	40080000 	.word	0x40080000
    36fc:	00019181 	.word	0x00019181

00003700 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3700:	b590      	push	{r4, r7, lr}
    3702:	b08b      	sub	sp, #44	; 0x2c
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	0018      	movs	r0, r3
    371e:	4b3b      	ldr	r3, [pc, #236]	; (380c <i2c_master_init+0x10c>)
    3720:	4798      	blx	r3
    3722:	0003      	movs	r3, r0
    3724:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3726:	6a3b      	ldr	r3, [r7, #32]
    3728:	3302      	adds	r3, #2
    372a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	3314      	adds	r3, #20
    3730:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3732:	2201      	movs	r2, #1
    3734:	69fb      	ldr	r3, [r7, #28]
    3736:	409a      	lsls	r2, r3
    3738:	0013      	movs	r3, r2
    373a:	0019      	movs	r1, r3
    373c:	2002      	movs	r0, #2
    373e:	4b34      	ldr	r3, [pc, #208]	; (3810 <i2c_master_init+0x110>)
    3740:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3742:	2314      	movs	r3, #20
    3744:	18fb      	adds	r3, r7, r3
    3746:	0018      	movs	r0, r3
    3748:	4b32      	ldr	r3, [pc, #200]	; (3814 <i2c_master_init+0x114>)
    374a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	7b1a      	ldrb	r2, [r3, #12]
    3750:	2314      	movs	r3, #20
    3752:	18fb      	adds	r3, r7, r3
    3754:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3756:	69bb      	ldr	r3, [r7, #24]
    3758:	b2db      	uxtb	r3, r3
    375a:	2214      	movs	r2, #20
    375c:	18ba      	adds	r2, r7, r2
    375e:	0011      	movs	r1, r2
    3760:	0018      	movs	r0, r3
    3762:	4b2d      	ldr	r3, [pc, #180]	; (3818 <i2c_master_init+0x118>)
    3764:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3766:	69bb      	ldr	r3, [r7, #24]
    3768:	b2db      	uxtb	r3, r3
    376a:	0018      	movs	r0, r3
    376c:	4b2b      	ldr	r3, [pc, #172]	; (381c <i2c_master_init+0x11c>)
    376e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	7b1b      	ldrb	r3, [r3, #12]
    3774:	2100      	movs	r1, #0
    3776:	0018      	movs	r0, r3
    3778:	4b29      	ldr	r3, [pc, #164]	; (3820 <i2c_master_init+0x120>)
    377a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	2202      	movs	r2, #2
    3782:	4013      	ands	r3, r2
    3784:	d001      	beq.n	378a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    3786:	231c      	movs	r3, #28
    3788:	e03b      	b.n	3802 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	2201      	movs	r2, #1
    3790:	4013      	ands	r3, r2
    3792:	d001      	beq.n	3798 <i2c_master_init+0x98>
		return STATUS_BUSY;
    3794:	2305      	movs	r3, #5
    3796:	e034      	b.n	3802 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	2217      	movs	r2, #23
    379e:	18bc      	adds	r4, r7, r2
    37a0:	0018      	movs	r0, r3
    37a2:	4b1a      	ldr	r3, [pc, #104]	; (380c <i2c_master_init+0x10c>)
    37a4:	4798      	blx	r3
    37a6:	0003      	movs	r3, r0
    37a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    37aa:	4a1e      	ldr	r2, [pc, #120]	; (3824 <i2c_master_init+0x124>)
    37ac:	2317      	movs	r3, #23
    37ae:	18fb      	adds	r3, r7, r3
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	0011      	movs	r1, r2
    37b4:	0018      	movs	r0, r3
    37b6:	4b1c      	ldr	r3, [pc, #112]	; (3828 <i2c_master_init+0x128>)
    37b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    37ba:	2317      	movs	r3, #23
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781a      	ldrb	r2, [r3, #0]
    37c0:	4b1a      	ldr	r3, [pc, #104]	; (382c <i2c_master_init+0x12c>)
    37c2:	0092      	lsls	r2, r2, #2
    37c4:	68f9      	ldr	r1, [r7, #12]
    37c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	2200      	movs	r2, #0
    37cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	2200      	movs	r2, #0
    37d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	2200      	movs	r2, #0
    37d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	2200      	movs	r2, #0
    37de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	2225      	movs	r2, #37	; 0x25
    37e4:	2100      	movs	r1, #0
    37e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	2200      	movs	r2, #0
    37ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37f0:	2214      	movs	r2, #20
    37f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	0011      	movs	r1, r2
    37fa:	0018      	movs	r0, r3
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <i2c_master_init+0x130>)
    37fe:	4798      	blx	r3
    3800:	0003      	movs	r3, r0
}
    3802:	0018      	movs	r0, r3
    3804:	46bd      	mov	sp, r7
    3806:	b00b      	add	sp, #44	; 0x2c
    3808:	bd90      	pop	{r4, r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00007a01 	.word	0x00007a01
    3810:	00003221 	.word	0x00003221
    3814:	00003209 	.word	0x00003209
    3818:	000085ed 	.word	0x000085ed
    381c:	00008631 	.word	0x00008631
    3820:	000077b9 	.word	0x000077b9
    3824:	00004021 	.word	0x00004021
    3828:	00007a65 	.word	0x00007a65
    382c:	2000052c 	.word	0x2000052c
    3830:	0000330d 	.word	0x0000330d

00003834 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	7e1b      	ldrb	r3, [r3, #24]
    3846:	b2db      	uxtb	r3, r3
    3848:	001a      	movs	r2, r3
    384a:	2302      	movs	r3, #2
    384c:	4013      	ands	r3, r2
    384e:	d00b      	beq.n	3868 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	2202      	movs	r2, #2
    3854:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	8b5b      	ldrh	r3, [r3, #26]
    385a:	b29b      	uxth	r3, r3
    385c:	001a      	movs	r2, r3
    385e:	2302      	movs	r3, #2
    3860:	4013      	ands	r3, r2
    3862:	d011      	beq.n	3888 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3864:	2341      	movs	r3, #65	; 0x41
    3866:	e010      	b.n	388a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	8b5b      	ldrh	r3, [r3, #26]
    386c:	b29b      	uxth	r3, r3
    386e:	001a      	movs	r2, r3
    3870:	2304      	movs	r3, #4
    3872:	4013      	ands	r3, r2
    3874:	d008      	beq.n	3888 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	685b      	ldr	r3, [r3, #4]
    387a:	22c0      	movs	r2, #192	; 0xc0
    387c:	0292      	lsls	r2, r2, #10
    387e:	431a      	orrs	r2, r3
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3884:	2318      	movs	r3, #24
    3886:	e000      	b.n	388a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3888:	2300      	movs	r3, #0
}
    388a:	0018      	movs	r0, r3
    388c:	46bd      	mov	sp, r7
    388e:	b004      	add	sp, #16
    3890:	bd80      	pop	{r7, pc}

00003892 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3892:	b580      	push	{r7, lr}
    3894:	b084      	sub	sp, #16
    3896:	af00      	add	r7, sp, #0
    3898:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    38a0:	230e      	movs	r3, #14
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	2200      	movs	r2, #0
    38a6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38a8:	e00f      	b.n	38ca <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    38aa:	230e      	movs	r3, #14
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	220e      	movs	r2, #14
    38b0:	18ba      	adds	r2, r7, r2
    38b2:	8812      	ldrh	r2, [r2, #0]
    38b4:	3201      	adds	r2, #1
    38b6:	801a      	strh	r2, [r3, #0]
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	891b      	ldrh	r3, [r3, #8]
    38bc:	220e      	movs	r2, #14
    38be:	18ba      	adds	r2, r7, r2
    38c0:	8812      	ldrh	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    38c6:	2312      	movs	r3, #18
    38c8:	e00e      	b.n	38e8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38ca:	68bb      	ldr	r3, [r7, #8]
    38cc:	7e1b      	ldrb	r3, [r3, #24]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	001a      	movs	r2, r3
    38d2:	2301      	movs	r3, #1
    38d4:	4013      	ands	r3, r2
    38d6:	d106      	bne.n	38e6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    38d8:	68bb      	ldr	r3, [r7, #8]
    38da:	7e1b      	ldrb	r3, [r3, #24]
    38dc:	b2db      	uxtb	r3, r3
    38de:	001a      	movs	r2, r3
    38e0:	2302      	movs	r3, #2
    38e2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38e4:	d0e1      	beq.n	38aa <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    38e6:	2300      	movs	r3, #0
}
    38e8:	0018      	movs	r0, r3
    38ea:	46bd      	mov	sp, r7
    38ec:	b004      	add	sp, #16
    38ee:	bd80      	pop	{r7, pc}

000038f0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    38f0:	b590      	push	{r4, r7, lr}
    38f2:	b085      	sub	sp, #20
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	000a      	movs	r2, r1
    38fa:	1cfb      	adds	r3, r7, #3
    38fc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	681b      	ldr	r3, [r3, #0]
    3902:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	2280      	movs	r2, #128	; 0x80
    390a:	02d2      	lsls	r2, r2, #11
    390c:	431a      	orrs	r2, r3
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3912:	1cfb      	adds	r3, r7, #3
    3914:	781a      	ldrb	r2, [r3, #0]
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    391a:	230b      	movs	r3, #11
    391c:	18fc      	adds	r4, r7, r3
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	0018      	movs	r0, r3
    3922:	4b07      	ldr	r3, [pc, #28]	; (3940 <_i2c_master_send_hs_master_code+0x50>)
    3924:	4798      	blx	r3
    3926:	0003      	movs	r3, r0
    3928:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	2201      	movs	r2, #1
    392e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    3930:	230b      	movs	r3, #11
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
}
    3936:	0018      	movs	r0, r3
    3938:	46bd      	mov	sp, r7
    393a:	b005      	add	sp, #20
    393c:	bd90      	pop	{r4, r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	00003893 	.word	0x00003893

00003944 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3944:	b590      	push	{r4, r7, lr}
    3946:	b087      	sub	sp, #28
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3954:	2314      	movs	r3, #20
    3956:	18fb      	adds	r3, r7, r3
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	8852      	ldrh	r2, [r2, #2]
    395c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    395e:	2312      	movs	r3, #18
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	011b      	lsls	r3, r3, #4
    396c:	0fdb      	lsrs	r3, r3, #31
    396e:	b2db      	uxtb	r3, r3
    3970:	001a      	movs	r2, r3
    3972:	230b      	movs	r3, #11
    3974:	18fb      	adds	r3, r7, r3
    3976:	1e51      	subs	r1, r2, #1
    3978:	418a      	sbcs	r2, r1
    397a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	7a5b      	ldrb	r3, [r3, #9]
    3980:	2b00      	cmp	r3, #0
    3982:	d006      	beq.n	3992 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7a9a      	ldrb	r2, [r3, #10]
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	0011      	movs	r1, r2
    398c:	0018      	movs	r0, r3
    398e:	4b85      	ldr	r3, [pc, #532]	; (3ba4 <_i2c_master_read_packet+0x260>)
    3990:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	4a84      	ldr	r2, [pc, #528]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3998:	401a      	ands	r2, r3
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	7a1b      	ldrb	r3, [r3, #8]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d042      	beq.n	3a2c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	881b      	ldrh	r3, [r3, #0]
    39aa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	7a5b      	ldrb	r3, [r3, #9]
    39b0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    39b2:	4313      	orrs	r3, r2
    39b4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39b6:	2380      	movs	r3, #128	; 0x80
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    39c0:	2317      	movs	r3, #23
    39c2:	18fc      	adds	r4, r7, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	0018      	movs	r0, r3
    39c8:	4b78      	ldr	r3, [pc, #480]	; (3bac <_i2c_master_read_packet+0x268>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	4a74      	ldr	r2, [pc, #464]	; (3ba8 <_i2c_master_read_packet+0x264>)
    39d6:	401a      	ands	r2, r3
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    39dc:	2317      	movs	r3, #23
    39de:	18fb      	adds	r3, r7, r3
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d107      	bne.n	39f6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    39e6:	2317      	movs	r3, #23
    39e8:	18fc      	adds	r4, r7, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0018      	movs	r0, r3
    39ee:	4b70      	ldr	r3, [pc, #448]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    39f0:	4798      	blx	r3
    39f2:	0003      	movs	r3, r0
    39f4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    39f6:	2317      	movs	r3, #23
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d111      	bne.n	3a24 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a00:	683b      	ldr	r3, [r7, #0]
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	b29b      	uxth	r3, r3
    3a08:	2278      	movs	r2, #120	; 0x78
    3a0a:	4313      	orrs	r3, r2
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	7a5b      	ldrb	r3, [r3, #9]
    3a14:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a16:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a18:	2201      	movs	r2, #1
    3a1a:	4313      	orrs	r3, r2
    3a1c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	625a      	str	r2, [r3, #36]	; 0x24
    3a22:	e00f      	b.n	3a44 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    3a24:	2317      	movs	r3, #23
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	e0b6      	b.n	3b9a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	881b      	ldrh	r3, [r3, #0]
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	2201      	movs	r2, #1
    3a34:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	7a5b      	ldrb	r3, [r3, #9]
    3a3a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a3c:	4313      	orrs	r3, r2
    3a3e:	001a      	movs	r2, r3
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a44:	2317      	movs	r3, #23
    3a46:	18fc      	adds	r4, r7, r3
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	0018      	movs	r0, r3
    3a4c:	4b57      	ldr	r3, [pc, #348]	; (3bac <_i2c_master_read_packet+0x268>)
    3a4e:	4798      	blx	r3
    3a50:	0003      	movs	r3, r0
    3a52:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3a54:	230b      	movs	r3, #11
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d00b      	beq.n	3a76 <_i2c_master_read_packet+0x132>
    3a5e:	683b      	ldr	r3, [r7, #0]
    3a60:	885b      	ldrh	r3, [r3, #2]
    3a62:	2b01      	cmp	r3, #1
    3a64:	d107      	bne.n	3a76 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2280      	movs	r2, #128	; 0x80
    3a6c:	02d2      	lsls	r2, r2, #11
    3a6e:	431a      	orrs	r2, r3
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	605a      	str	r2, [r3, #4]
    3a74:	e005      	b.n	3a82 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	685b      	ldr	r3, [r3, #4]
    3a7a:	4a4b      	ldr	r2, [pc, #300]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3a7c:	401a      	ands	r2, r3
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a82:	2317      	movs	r3, #23
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d107      	bne.n	3a9c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3a8c:	2317      	movs	r3, #23
    3a8e:	18fc      	adds	r4, r7, r3
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	0018      	movs	r0, r3
    3a94:	4b46      	ldr	r3, [pc, #280]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    3a96:	4798      	blx	r3
    3a98:	0003      	movs	r3, r0
    3a9a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a9c:	2317      	movs	r3, #23
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d000      	beq.n	3aa8 <_i2c_master_read_packet+0x164>
    3aa6:	e075      	b.n	3b94 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    3aa8:	e04b      	b.n	3b42 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	8b5b      	ldrh	r3, [r3, #26]
    3aae:	b29b      	uxth	r3, r3
    3ab0:	001a      	movs	r2, r3
    3ab2:	2320      	movs	r3, #32
    3ab4:	4013      	ands	r3, r2
    3ab6:	d101      	bne.n	3abc <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    3ab8:	2341      	movs	r3, #65	; 0x41
    3aba:	e06e      	b.n	3b9a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	7adb      	ldrb	r3, [r3, #11]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d01e      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
    3ac4:	230b      	movs	r3, #11
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d004      	beq.n	3ade <_i2c_master_read_packet+0x19a>
    3ad4:	2314      	movs	r3, #20
    3ad6:	18fb      	adds	r3, r7, r3
    3ad8:	881b      	ldrh	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d009      	beq.n	3af2 <_i2c_master_read_packet+0x1ae>
    3ade:	230b      	movs	r3, #11
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	781b      	ldrb	r3, [r3, #0]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d00c      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3ae8:	2314      	movs	r3, #20
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	881b      	ldrh	r3, [r3, #0]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d107      	bne.n	3b02 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	2280      	movs	r2, #128	; 0x80
    3af8:	02d2      	lsls	r2, r2, #11
    3afa:	431a      	orrs	r2, r3
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	605a      	str	r2, [r3, #4]
    3b00:	e01a      	b.n	3b38 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	0018      	movs	r0, r3
    3b06:	4b2b      	ldr	r3, [pc, #172]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b08:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	685a      	ldr	r2, [r3, #4]
    3b0e:	2312      	movs	r3, #18
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	2112      	movs	r1, #18
    3b16:	1879      	adds	r1, r7, r1
    3b18:	1c58      	adds	r0, r3, #1
    3b1a:	8008      	strh	r0, [r1, #0]
    3b1c:	18d3      	adds	r3, r2, r3
    3b1e:	68fa      	ldr	r2, [r7, #12]
    3b20:	2128      	movs	r1, #40	; 0x28
    3b22:	5c52      	ldrb	r2, [r2, r1]
    3b24:	b2d2      	uxtb	r2, r2
    3b26:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    3b28:	2317      	movs	r3, #23
    3b2a:	18fc      	adds	r4, r7, r3
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b1e      	ldr	r3, [pc, #120]	; (3bac <_i2c_master_read_packet+0x268>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3b38:	2317      	movs	r3, #23
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d109      	bne.n	3b56 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    3b42:	2314      	movs	r3, #20
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	881b      	ldrh	r3, [r3, #0]
    3b48:	2214      	movs	r2, #20
    3b4a:	18ba      	adds	r2, r7, r2
    3b4c:	1e59      	subs	r1, r3, #1
    3b4e:	8011      	strh	r1, [r2, #0]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1aa      	bne.n	3aaa <_i2c_master_read_packet+0x166>
    3b54:	e000      	b.n	3b58 <_i2c_master_read_packet+0x214>
				break;
    3b56:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	7a9b      	ldrb	r3, [r3, #10]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d00a      	beq.n	3b76 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	0018      	movs	r0, r3
    3b64:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b66:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	22c0      	movs	r2, #192	; 0xc0
    3b6e:	0292      	lsls	r2, r2, #10
    3b70:	431a      	orrs	r2, r3
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	0018      	movs	r0, r3
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b7c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3b7e:	683b      	ldr	r3, [r7, #0]
    3b80:	685a      	ldr	r2, [r3, #4]
    3b82:	2312      	movs	r3, #18
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	881b      	ldrh	r3, [r3, #0]
    3b88:	18d3      	adds	r3, r2, r3
    3b8a:	68fa      	ldr	r2, [r7, #12]
    3b8c:	2128      	movs	r1, #40	; 0x28
    3b8e:	5c52      	ldrb	r2, [r2, r1]
    3b90:	b2d2      	uxtb	r2, r2
    3b92:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3b94:	2317      	movs	r3, #23
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781b      	ldrb	r3, [r3, #0]
}
    3b9a:	0018      	movs	r0, r3
    3b9c:	46bd      	mov	sp, r7
    3b9e:	b007      	add	sp, #28
    3ba0:	bd90      	pop	{r4, r7, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	000038f1 	.word	0x000038f1
    3ba8:	fffbffff 	.word	0xfffbffff
    3bac:	00003893 	.word	0x00003893
    3bb0:	00003835 	.word	0x00003835
    3bb4:	000032e9 	.word	0x000032e9

00003bb8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	8b9b      	ldrh	r3, [r3, #28]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d001      	beq.n	3bd0 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3bcc:	2305      	movs	r3, #5
    3bce:	e00c      	b.n	3bea <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	2201      	movs	r2, #1
    3bd4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	2201      	movs	r2, #1
    3bda:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3bdc:	683a      	ldr	r2, [r7, #0]
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	0011      	movs	r1, r2
    3be2:	0018      	movs	r0, r3
    3be4:	4b03      	ldr	r3, [pc, #12]	; (3bf4 <i2c_master_read_packet_wait+0x3c>)
    3be6:	4798      	blx	r3
    3be8:	0003      	movs	r3, r0
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b002      	add	sp, #8
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	00003945 	.word	0x00003945

00003bf8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bf8:	b590      	push	{r4, r7, lr}
    3bfa:	b087      	sub	sp, #28
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3c08:	2314      	movs	r3, #20
    3c0a:	18fb      	adds	r3, r7, r3
    3c0c:	683a      	ldr	r2, [r7, #0]
    3c0e:	8852      	ldrh	r2, [r2, #2]
    3c10:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	0018      	movs	r0, r3
    3c16:	4b51      	ldr	r3, [pc, #324]	; (3d5c <_i2c_master_write_packet+0x164>)
    3c18:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3c1a:	683b      	ldr	r3, [r7, #0]
    3c1c:	7a5b      	ldrb	r3, [r3, #9]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d006      	beq.n	3c30 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	7a9a      	ldrb	r2, [r3, #10]
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	0011      	movs	r1, r2
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b4c      	ldr	r3, [pc, #304]	; (3d60 <_i2c_master_write_packet+0x168>)
    3c2e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	4a4b      	ldr	r2, [pc, #300]	; (3d64 <_i2c_master_write_packet+0x16c>)
    3c36:	401a      	ands	r2, r3
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3c3c:	683b      	ldr	r3, [r7, #0]
    3c3e:	7a1b      	ldrb	r3, [r3, #8]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d00d      	beq.n	3c60 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	881b      	ldrh	r3, [r3, #0]
    3c48:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c4a:	683b      	ldr	r3, [r7, #0]
    3c4c:	7a5b      	ldrb	r3, [r3, #9]
    3c4e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c50:	4313      	orrs	r3, r2
    3c52:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c54:	2380      	movs	r3, #128	; 0x80
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c5a:	68fb      	ldr	r3, [r7, #12]
    3c5c:	625a      	str	r2, [r3, #36]	; 0x24
    3c5e:	e009      	b.n	3c74 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c60:	683b      	ldr	r3, [r7, #0]
    3c62:	881b      	ldrh	r3, [r3, #0]
    3c64:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	7a5b      	ldrb	r3, [r3, #9]
    3c6a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c6c:	4313      	orrs	r3, r2
    3c6e:	001a      	movs	r2, r3
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3c74:	2317      	movs	r3, #23
    3c76:	18fc      	adds	r4, r7, r3
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b3a      	ldr	r3, [pc, #232]	; (3d68 <_i2c_master_write_packet+0x170>)
    3c7e:	4798      	blx	r3
    3c80:	0003      	movs	r3, r0
    3c82:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3c84:	2317      	movs	r3, #23
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d107      	bne.n	3c9e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3c8e:	2317      	movs	r3, #23
    3c90:	18fc      	adds	r4, r7, r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	0018      	movs	r0, r3
    3c96:	4b35      	ldr	r3, [pc, #212]	; (3d6c <_i2c_master_write_packet+0x174>)
    3c98:	4798      	blx	r3
    3c9a:	0003      	movs	r3, r0
    3c9c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3c9e:	2317      	movs	r3, #23
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d152      	bne.n	3d4e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3ca8:	2312      	movs	r3, #18
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3cb0:	e033      	b.n	3d1a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	8b5b      	ldrh	r3, [r3, #26]
    3cb6:	b29b      	uxth	r3, r3
    3cb8:	001a      	movs	r2, r3
    3cba:	2320      	movs	r3, #32
    3cbc:	4013      	ands	r3, r2
    3cbe:	d101      	bne.n	3cc4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3cc0:	2341      	movs	r3, #65	; 0x41
    3cc2:	e047      	b.n	3d54 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b24      	ldr	r3, [pc, #144]	; (3d5c <_i2c_master_write_packet+0x164>)
    3cca:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	685a      	ldr	r2, [r3, #4]
    3cd0:	2312      	movs	r3, #18
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	881b      	ldrh	r3, [r3, #0]
    3cd6:	2112      	movs	r1, #18
    3cd8:	1879      	adds	r1, r7, r1
    3cda:	1c58      	adds	r0, r3, #1
    3cdc:	8008      	strh	r0, [r1, #0]
    3cde:	18d3      	adds	r3, r2, r3
    3ce0:	7819      	ldrb	r1, [r3, #0]
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	2228      	movs	r2, #40	; 0x28
    3ce6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3ce8:	2317      	movs	r3, #23
    3cea:	18fc      	adds	r4, r7, r3
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b1d      	ldr	r3, [pc, #116]	; (3d68 <_i2c_master_write_packet+0x170>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3cf8:	2317      	movs	r3, #23
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d115      	bne.n	3d2e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	8b5b      	ldrh	r3, [r3, #26]
    3d06:	b29b      	uxth	r3, r3
    3d08:	001a      	movs	r2, r3
    3d0a:	2304      	movs	r3, #4
    3d0c:	4013      	ands	r3, r2
    3d0e:	d004      	beq.n	3d1a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3d10:	2317      	movs	r3, #23
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	221e      	movs	r2, #30
    3d16:	701a      	strb	r2, [r3, #0]
				break;
    3d18:	e00a      	b.n	3d30 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3d1a:	2314      	movs	r3, #20
    3d1c:	18fb      	adds	r3, r7, r3
    3d1e:	881b      	ldrh	r3, [r3, #0]
    3d20:	2214      	movs	r2, #20
    3d22:	18ba      	adds	r2, r7, r2
    3d24:	1e59      	subs	r1, r3, #1
    3d26:	8011      	strh	r1, [r2, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d1c2      	bne.n	3cb2 <_i2c_master_write_packet+0xba>
    3d2c:	e000      	b.n	3d30 <_i2c_master_write_packet+0x138>
				break;
    3d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	7a9b      	ldrb	r3, [r3, #10]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d00a      	beq.n	3d4e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <_i2c_master_write_packet+0x164>)
    3d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	685b      	ldr	r3, [r3, #4]
    3d44:	22c0      	movs	r2, #192	; 0xc0
    3d46:	0292      	lsls	r2, r2, #10
    3d48:	431a      	orrs	r2, r3
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3d4e:	2317      	movs	r3, #23
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	781b      	ldrb	r3, [r3, #0]
}
    3d54:	0018      	movs	r0, r3
    3d56:	46bd      	mov	sp, r7
    3d58:	b007      	add	sp, #28
    3d5a:	bd90      	pop	{r4, r7, pc}
    3d5c:	000032e9 	.word	0x000032e9
    3d60:	000038f1 	.word	0x000038f1
    3d64:	fffbffff 	.word	0xfffbffff
    3d68:	00003893 	.word	0x00003893
    3d6c:	00003835 	.word	0x00003835

00003d70 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    3d78:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	8b9b      	ldrh	r3, [r3, #28]
    3d7e:	b29b      	uxth	r3, r3
    3d80:	2b00      	cmp	r3, #0
    3d82:	d001      	beq.n	3d88 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3d84:	2305      	movs	r3, #5
    3d86:	e00c      	b.n	3da2 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2201      	movs	r2, #1
    3d8c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2201      	movs	r2, #1
    3d92:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0011      	movs	r1, r2
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b03      	ldr	r3, [pc, #12]	; (3dac <i2c_master_write_packet_wait+0x3c>)
    3d9e:	4798      	blx	r3
    3da0:	0003      	movs	r3, r0
}
    3da2:	0018      	movs	r0, r3
    3da4:	46bd      	mov	sp, r7
    3da6:	b002      	add	sp, #8
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003bf9 	.word	0x00003bf9

00003db0 <i2c_master_is_syncing>:
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	69db      	ldr	r3, [r3, #28]
    3dc2:	2207      	movs	r2, #7
    3dc4:	4013      	ands	r3, r2
    3dc6:	1e5a      	subs	r2, r3, #1
    3dc8:	4193      	sbcs	r3, r2
    3dca:	b2db      	uxtb	r3, r3
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b004      	add	sp, #16
    3dd2:	bd80      	pop	{r7, pc}

00003dd4 <_i2c_master_wait_for_sync>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3ddc:	46c0      	nop			; (mov r8, r8)
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	0018      	movs	r0, r3
    3de2:	4b04      	ldr	r3, [pc, #16]	; (3df4 <_i2c_master_wait_for_sync+0x20>)
    3de4:	4798      	blx	r3
    3de6:	1e03      	subs	r3, r0, #0
    3de8:	d1f9      	bne.n	3dde <_i2c_master_wait_for_sync+0xa>
}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46bd      	mov	sp, r7
    3dee:	b002      	add	sp, #8
    3df0:	bd80      	pop	{r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00003db1 	.word	0x00003db1

00003df8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b084      	sub	sp, #16
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	011b      	lsls	r3, r3, #4
    3e0c:	0fdb      	lsrs	r3, r3, #31
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	001a      	movs	r2, r3
    3e12:	230b      	movs	r3, #11
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	1e51      	subs	r1, r2, #1
    3e18:	418a      	sbcs	r2, r1
    3e1a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	8b52      	ldrh	r2, [r2, #26]
    3e24:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	8b9b      	ldrh	r3, [r3, #28]
    3e2a:	b29a      	uxth	r2, r3
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2108      	movs	r1, #8
    3e32:	1879      	adds	r1, r7, r1
    3e34:	8809      	ldrh	r1, [r1, #0]
    3e36:	1a8a      	subs	r2, r1, r2
    3e38:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	8b9b      	ldrh	r3, [r3, #28]
    3e3e:	b29b      	uxth	r3, r3
    3e40:	3b01      	subs	r3, #1
    3e42:	b29a      	uxth	r2, r3
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3e48:	230b      	movs	r3, #11
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d010      	beq.n	3e74 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	7adb      	ldrb	r3, [r3, #11]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d01c      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	8b9b      	ldrh	r3, [r3, #28]
    3e5e:	b29b      	uxth	r3, r3
    3e60:	2b01      	cmp	r3, #1
    3e62:	d117      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	685b      	ldr	r3, [r3, #4]
    3e68:	2280      	movs	r2, #128	; 0x80
    3e6a:	02d2      	lsls	r2, r2, #11
    3e6c:	431a      	orrs	r2, r3
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	605a      	str	r2, [r3, #4]
    3e72:	e00f      	b.n	3e94 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	7adb      	ldrb	r3, [r3, #11]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d00b      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	8b9b      	ldrh	r3, [r3, #28]
    3e80:	b29b      	uxth	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d106      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	685b      	ldr	r3, [r3, #4]
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	02d2      	lsls	r2, r2, #11
    3e8e:	431a      	orrs	r2, r3
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	8b9b      	ldrh	r3, [r3, #28]
    3e98:	b29b      	uxth	r3, r3
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d10e      	bne.n	3ebc <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	7a9b      	ldrb	r3, [r3, #10]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d00a      	beq.n	3ebc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <_i2c_master_read+0xec>)
    3eac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	22c0      	movs	r2, #192	; 0xc0
    3eb4:	0292      	lsls	r2, r2, #10
    3eb6:	431a      	orrs	r2, r3
    3eb8:	68fb      	ldr	r3, [r7, #12]
    3eba:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <_i2c_master_read+0xec>)
    3ec2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	6a1a      	ldr	r2, [r3, #32]
    3ec8:	2308      	movs	r3, #8
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	881b      	ldrh	r3, [r3, #0]
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	68fa      	ldr	r2, [r7, #12]
    3ed2:	2128      	movs	r1, #40	; 0x28
    3ed4:	5c52      	ldrb	r2, [r2, r1]
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	701a      	strb	r2, [r3, #0]
}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	00003dd5 	.word	0x00003dd5

00003ee8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	8b5b      	ldrh	r3, [r3, #26]
    3efa:	b29b      	uxth	r3, r3
    3efc:	001a      	movs	r2, r3
    3efe:	2304      	movs	r3, #4
    3f00:	4013      	ands	r3, r2
    3f02:	d004      	beq.n	3f0e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2225      	movs	r2, #37	; 0x25
    3f08:	211e      	movs	r1, #30
    3f0a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3f0c:	e024      	b.n	3f58 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3f0e:	230a      	movs	r3, #10
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	687a      	ldr	r2, [r7, #4]
    3f14:	8b52      	ldrh	r2, [r2, #26]
    3f16:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	8b9b      	ldrh	r3, [r3, #28]
    3f1c:	b29a      	uxth	r2, r3
    3f1e:	230a      	movs	r3, #10
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	210a      	movs	r1, #10
    3f24:	1879      	adds	r1, r7, r1
    3f26:	8809      	ldrh	r1, [r1, #0]
    3f28:	1a8a      	subs	r2, r1, r2
    3f2a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	8b9b      	ldrh	r3, [r3, #28]
    3f30:	b29b      	uxth	r3, r3
    3f32:	3b01      	subs	r3, #1
    3f34:	b29a      	uxth	r2, r3
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <_i2c_master_write+0x78>)
    3f40:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	6a1a      	ldr	r2, [r3, #32]
    3f46:	230a      	movs	r3, #10
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	18d3      	adds	r3, r2, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b2d9      	uxtb	r1, r3
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	2228      	movs	r2, #40	; 0x28
    3f56:	5499      	strb	r1, [r3, r2]
}
    3f58:	46bd      	mov	sp, r7
    3f5a:	b004      	add	sp, #16
    3f5c:	bd80      	pop	{r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	00003dd5 	.word	0x00003dd5

00003f64 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	7e1b      	ldrb	r3, [r3, #24]
    3f76:	b2db      	uxtb	r3, r3
    3f78:	001a      	movs	r2, r3
    3f7a:	2301      	movs	r3, #1
    3f7c:	4013      	ands	r3, r2
    3f7e:	d02b      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	2201      	movs	r2, #1
    3f84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	8b5b      	ldrh	r3, [r3, #26]
    3f8a:	b29b      	uxth	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2302      	movs	r3, #2
    3f90:	4013      	ands	r3, r2
    3f92:	d004      	beq.n	3f9e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	2225      	movs	r2, #37	; 0x25
    3f98:	2141      	movs	r1, #65	; 0x41
    3f9a:	5499      	strb	r1, [r3, r2]
    3f9c:	e01c      	b.n	3fd8 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	8b5b      	ldrh	r3, [r3, #26]
    3fa2:	b29b      	uxth	r3, r3
    3fa4:	001a      	movs	r2, r3
    3fa6:	2304      	movs	r3, #4
    3fa8:	4013      	ands	r3, r2
    3faa:	d015      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2225      	movs	r2, #37	; 0x25
    3fb0:	2118      	movs	r1, #24
    3fb2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2200      	movs	r2, #0
    3fb8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	7a9b      	ldrb	r3, [r3, #10]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d00a      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b13      	ldr	r3, [pc, #76]	; (4014 <_i2c_master_async_address_response+0xb0>)
    3fc8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	685b      	ldr	r3, [r3, #4]
    3fce:	22c0      	movs	r2, #192	; 0xc0
    3fd0:	0292      	lsls	r2, r2, #10
    3fd2:	431a      	orrs	r2, r3
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	8b9b      	ldrh	r3, [r3, #28]
    3fdc:	b29a      	uxth	r2, r3
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	2225      	movs	r2, #37	; 0x25
    3fe6:	5c9b      	ldrb	r3, [r3, r2]
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b05      	cmp	r3, #5
    3fec:	d10e      	bne.n	400c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2224      	movs	r2, #36	; 0x24
    3ff2:	5c9b      	ldrb	r3, [r3, r2]
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d104      	bne.n	4004 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	0018      	movs	r0, r3
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <_i2c_master_async_address_response+0xb4>)
    4000:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    4002:	e003      	b.n	400c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	0018      	movs	r0, r3
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <_i2c_master_async_address_response+0xb8>)
    400a:	4798      	blx	r3
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b004      	add	sp, #16
    4012:	bd80      	pop	{r7, pc}
    4014:	00003dd5 	.word	0x00003dd5
    4018:	00003ee9 	.word	0x00003ee9
    401c:	00003df9 	.word	0x00003df9

00004020 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	1dfb      	adds	r3, r7, #7
    402a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    4030:	4b93      	ldr	r3, [pc, #588]	; (4280 <_i2c_master_interrupt_handler+0x260>)
    4032:	0092      	lsls	r2, r2, #2
    4034:	58d3      	ldr	r3, [r2, r3]
    4036:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4038:	697b      	ldr	r3, [r7, #20]
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    403e:	693b      	ldr	r3, [r7, #16]
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	011b      	lsls	r3, r3, #4
    4044:	0fdb      	lsrs	r3, r3, #31
    4046:	b2db      	uxtb	r3, r3
    4048:	001a      	movs	r2, r3
    404a:	230f      	movs	r3, #15
    404c:	18fb      	adds	r3, r7, r3
    404e:	1e51      	subs	r1, r2, #1
    4050:	418a      	sbcs	r2, r1
    4052:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4054:	230e      	movs	r3, #14
    4056:	18fb      	adds	r3, r7, r3
    4058:	697a      	ldr	r2, [r7, #20]
    405a:	7e52      	ldrb	r2, [r2, #25]
    405c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	7e1b      	ldrb	r3, [r3, #24]
    4062:	b2da      	uxtb	r2, r3
    4064:	230e      	movs	r3, #14
    4066:	18fb      	adds	r3, r7, r3
    4068:	210e      	movs	r1, #14
    406a:	1879      	adds	r1, r7, r1
    406c:	7809      	ldrb	r1, [r1, #0]
    406e:	400a      	ands	r2, r1
    4070:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4072:	697b      	ldr	r3, [r7, #20]
    4074:	8b5b      	ldrh	r3, [r3, #26]
    4076:	b29b      	uxth	r3, r3
    4078:	2b00      	cmp	r3, #0
    407a:	d109      	bne.n	4090 <_i2c_master_interrupt_handler+0x70>
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	8b9b      	ldrh	r3, [r3, #28]
    4080:	b29b      	uxth	r3, r3
    4082:	2b00      	cmp	r3, #0
    4084:	d004      	beq.n	4090 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    4086:	697b      	ldr	r3, [r7, #20]
    4088:	0018      	movs	r0, r3
    408a:	4b7e      	ldr	r3, [pc, #504]	; (4284 <_i2c_master_interrupt_handler+0x264>)
    408c:	4798      	blx	r3
    408e:	e070      	b.n	4172 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4090:	697b      	ldr	r3, [r7, #20]
    4092:	8b5b      	ldrh	r3, [r3, #26]
    4094:	b29b      	uxth	r3, r3
    4096:	2b00      	cmp	r3, #0
    4098:	d039      	beq.n	410e <_i2c_master_interrupt_handler+0xee>
    409a:	697b      	ldr	r3, [r7, #20]
    409c:	8b9b      	ldrh	r3, [r3, #28]
    409e:	b29b      	uxth	r3, r3
    40a0:	2b00      	cmp	r3, #0
    40a2:	d134      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	2225      	movs	r2, #37	; 0x25
    40a8:	5c9b      	ldrb	r3, [r3, r2]
    40aa:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    40ac:	2b05      	cmp	r3, #5
    40ae:	d12e      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	2224      	movs	r2, #36	; 0x24
    40b4:	5c9b      	ldrb	r3, [r3, r2]
    40b6:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    40b8:	2b00      	cmp	r3, #0
    40ba:	d128      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    40bc:	693b      	ldr	r3, [r7, #16]
    40be:	2203      	movs	r2, #3
    40c0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    40c2:	697b      	ldr	r3, [r7, #20]
    40c4:	2200      	movs	r2, #0
    40c6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    40c8:	697b      	ldr	r3, [r7, #20]
    40ca:	2225      	movs	r2, #37	; 0x25
    40cc:	2100      	movs	r1, #0
    40ce:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    40d0:	697b      	ldr	r3, [r7, #20]
    40d2:	7a9b      	ldrb	r3, [r3, #10]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d00b      	beq.n	40f0 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	0018      	movs	r0, r3
    40dc:	4b6a      	ldr	r3, [pc, #424]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    40de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    40e0:	693b      	ldr	r3, [r7, #16]
    40e2:	685b      	ldr	r3, [r3, #4]
    40e4:	22c0      	movs	r2, #192	; 0xc0
    40e6:	0292      	lsls	r2, r2, #10
    40e8:	431a      	orrs	r2, r3
    40ea:	693b      	ldr	r3, [r7, #16]
    40ec:	605a      	str	r2, [r3, #4]
    40ee:	e002      	b.n	40f6 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    40f0:	693b      	ldr	r3, [r7, #16]
    40f2:	2201      	movs	r2, #1
    40f4:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    40f6:	230e      	movs	r3, #14
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2201      	movs	r2, #1
    40fe:	4013      	ands	r3, r2
    4100:	d037      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4102:	697b      	ldr	r3, [r7, #20]
    4104:	68db      	ldr	r3, [r3, #12]
    4106:	697a      	ldr	r2, [r7, #20]
    4108:	0010      	movs	r0, r2
    410a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    410c:	e031      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    410e:	697b      	ldr	r3, [r7, #20]
    4110:	8b5b      	ldrh	r3, [r3, #26]
    4112:	b29b      	uxth	r3, r3
    4114:	2b00      	cmp	r3, #0
    4116:	d02c      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
    4118:	697b      	ldr	r3, [r7, #20]
    411a:	8b9b      	ldrh	r3, [r3, #28]
    411c:	b29b      	uxth	r3, r3
    411e:	2b00      	cmp	r3, #0
    4120:	d027      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4122:	693b      	ldr	r3, [r7, #16]
    4124:	8b5b      	ldrh	r3, [r3, #26]
    4126:	b29b      	uxth	r3, r3
    4128:	001a      	movs	r2, r3
    412a:	2320      	movs	r3, #32
    412c:	4013      	ands	r3, r2
    412e:	d111      	bne.n	4154 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2201      	movs	r2, #1
    4138:	4053      	eors	r3, r2
    413a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    413c:	2b00      	cmp	r3, #0
    413e:	d104      	bne.n	414a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4140:	697b      	ldr	r3, [r7, #20]
    4142:	8b9b      	ldrh	r3, [r3, #28]
    4144:	b29b      	uxth	r3, r3
    4146:	2b01      	cmp	r3, #1
    4148:	d004      	beq.n	4154 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    414a:	697b      	ldr	r3, [r7, #20]
    414c:	2225      	movs	r2, #37	; 0x25
    414e:	2141      	movs	r1, #65	; 0x41
    4150:	5499      	strb	r1, [r3, r2]
    4152:	e00e      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4154:	697b      	ldr	r3, [r7, #20]
    4156:	2224      	movs	r2, #36	; 0x24
    4158:	5c9b      	ldrb	r3, [r3, r2]
    415a:	b2db      	uxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	d104      	bne.n	416a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	0018      	movs	r0, r3
    4164:	4b49      	ldr	r3, [pc, #292]	; (428c <_i2c_master_interrupt_handler+0x26c>)
    4166:	4798      	blx	r3
    4168:	e003      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	0018      	movs	r0, r3
    416e:	4b48      	ldr	r3, [pc, #288]	; (4290 <_i2c_master_interrupt_handler+0x270>)
    4170:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4172:	697b      	ldr	r3, [r7, #20]
    4174:	8b5b      	ldrh	r3, [r3, #26]
    4176:	b29b      	uxth	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d047      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
    417c:	697b      	ldr	r3, [r7, #20]
    417e:	8b9b      	ldrh	r3, [r3, #28]
    4180:	b29b      	uxth	r3, r3
    4182:	2b00      	cmp	r3, #0
    4184:	d142      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    4186:	697b      	ldr	r3, [r7, #20]
    4188:	2225      	movs	r2, #37	; 0x25
    418a:	5c9b      	ldrb	r3, [r3, r2]
    418c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    418e:	2b05      	cmp	r3, #5
    4190:	d13c      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4192:	697b      	ldr	r3, [r7, #20]
    4194:	2224      	movs	r2, #36	; 0x24
    4196:	5c9b      	ldrb	r3, [r3, r2]
    4198:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    419a:	2b01      	cmp	r3, #1
    419c:	d136      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    419e:	693b      	ldr	r3, [r7, #16]
    41a0:	7e1b      	ldrb	r3, [r3, #24]
    41a2:	b2db      	uxtb	r3, r3
    41a4:	001a      	movs	r2, r3
    41a6:	2302      	movs	r3, #2
    41a8:	4013      	ands	r3, r2
    41aa:	d002      	beq.n	41b2 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    41ac:	693b      	ldr	r3, [r7, #16]
    41ae:	2202      	movs	r2, #2
    41b0:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	2203      	movs	r2, #3
    41b6:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	2200      	movs	r2, #0
    41bc:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    41be:	697b      	ldr	r3, [r7, #20]
    41c0:	2225      	movs	r2, #37	; 0x25
    41c2:	2100      	movs	r1, #0
    41c4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    41c6:	230e      	movs	r3, #14
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2202      	movs	r2, #2
    41ce:	4013      	ands	r3, r2
    41d0:	d00b      	beq.n	41ea <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    41d2:	697b      	ldr	r3, [r7, #20]
    41d4:	2224      	movs	r2, #36	; 0x24
    41d6:	5c9b      	ldrb	r3, [r3, r2]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b01      	cmp	r3, #1
    41dc:	d105      	bne.n	41ea <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    41de:	697b      	ldr	r3, [r7, #20]
    41e0:	691b      	ldr	r3, [r3, #16]
    41e2:	697a      	ldr	r2, [r7, #20]
    41e4:	0010      	movs	r0, r2
    41e6:	4798      	blx	r3
    41e8:	e010      	b.n	420c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    41ea:	230e      	movs	r3, #14
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2201      	movs	r2, #1
    41f2:	4013      	ands	r3, r2
    41f4:	d00a      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    41f6:	697b      	ldr	r3, [r7, #20]
    41f8:	2224      	movs	r2, #36	; 0x24
    41fa:	5c9b      	ldrb	r3, [r3, r2]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	2b00      	cmp	r3, #0
    4200:	d104      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4202:	697b      	ldr	r3, [r7, #20]
    4204:	68db      	ldr	r3, [r3, #12]
    4206:	697a      	ldr	r2, [r7, #20]
    4208:	0010      	movs	r0, r2
    420a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    420c:	697b      	ldr	r3, [r7, #20]
    420e:	2225      	movs	r2, #37	; 0x25
    4210:	5c9b      	ldrb	r3, [r3, r2]
    4212:	b2db      	uxtb	r3, r3
    4214:	2b05      	cmp	r3, #5
    4216:	d02e      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	2225      	movs	r2, #37	; 0x25
    421c:	5c9b      	ldrb	r3, [r3, r2]
    421e:	b2db      	uxtb	r3, r3
    4220:	2b00      	cmp	r3, #0
    4222:	d028      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4224:	693b      	ldr	r3, [r7, #16]
    4226:	2203      	movs	r2, #3
    4228:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    422a:	697b      	ldr	r3, [r7, #20]
    422c:	2200      	movs	r2, #0
    422e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    4230:	697b      	ldr	r3, [r7, #20]
    4232:	2200      	movs	r2, #0
    4234:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	2225      	movs	r2, #37	; 0x25
    423a:	5c9b      	ldrb	r3, [r3, r2]
    423c:	b2db      	uxtb	r3, r3
    423e:	2b41      	cmp	r3, #65	; 0x41
    4240:	d00e      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4242:	697b      	ldr	r3, [r7, #20]
    4244:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4246:	2b00      	cmp	r3, #0
    4248:	d00a      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	0018      	movs	r0, r3
    424e:	4b0e      	ldr	r3, [pc, #56]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    4250:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	685b      	ldr	r3, [r3, #4]
    4256:	22e0      	movs	r2, #224	; 0xe0
    4258:	02d2      	lsls	r2, r2, #11
    425a:	431a      	orrs	r2, r3
    425c:	693b      	ldr	r3, [r7, #16]
    425e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4260:	230e      	movs	r3, #14
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2204      	movs	r2, #4
    4268:	4013      	ands	r3, r2
    426a:	d004      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    426c:	697b      	ldr	r3, [r7, #20]
    426e:	695b      	ldr	r3, [r3, #20]
    4270:	697a      	ldr	r2, [r7, #20]
    4272:	0010      	movs	r0, r2
    4274:	4798      	blx	r3
		}
	}
}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	46bd      	mov	sp, r7
    427a:	b006      	add	sp, #24
    427c:	bd80      	pop	{r7, pc}
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	2000052c 	.word	0x2000052c
    4284:	00003f65 	.word	0x00003f65
    4288:	00003dd5 	.word	0x00003dd5
    428c:	00003ee9 	.word	0x00003ee9
    4290:	00003df9 	.word	0x00003df9

00004294 <system_gclk_chan_get_config_defaults>:
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	2200      	movs	r2, #0
    42a0:	701a      	strb	r2, [r3, #0]
}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	46bd      	mov	sp, r7
    42a6:	b002      	add	sp, #8
    42a8:	bd80      	pop	{r7, pc}
	...

000042ac <system_apb_clock_set_mask>:
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b082      	sub	sp, #8
    42b0:	af00      	add	r7, sp, #0
    42b2:	0002      	movs	r2, r0
    42b4:	6039      	str	r1, [r7, #0]
    42b6:	1dfb      	adds	r3, r7, #7
    42b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42ba:	1dfb      	adds	r3, r7, #7
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	2b01      	cmp	r3, #1
    42c0:	d00a      	beq.n	42d8 <system_apb_clock_set_mask+0x2c>
    42c2:	2b02      	cmp	r3, #2
    42c4:	d00f      	beq.n	42e6 <system_apb_clock_set_mask+0x3a>
    42c6:	2b00      	cmp	r3, #0
    42c8:	d114      	bne.n	42f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    42ca:	4b0e      	ldr	r3, [pc, #56]	; (4304 <system_apb_clock_set_mask+0x58>)
    42cc:	4a0d      	ldr	r2, [pc, #52]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ce:	6991      	ldr	r1, [r2, #24]
    42d0:	683a      	ldr	r2, [r7, #0]
    42d2:	430a      	orrs	r2, r1
    42d4:	619a      	str	r2, [r3, #24]
			break;
    42d6:	e00f      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    42d8:	4b0a      	ldr	r3, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42da:	4a0a      	ldr	r2, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42dc:	69d1      	ldr	r1, [r2, #28]
    42de:	683a      	ldr	r2, [r7, #0]
    42e0:	430a      	orrs	r2, r1
    42e2:	61da      	str	r2, [r3, #28]
			break;
    42e4:	e008      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <system_apb_clock_set_mask+0x58>)
    42e8:	4a06      	ldr	r2, [pc, #24]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ea:	6a11      	ldr	r1, [r2, #32]
    42ec:	683a      	ldr	r2, [r7, #0]
    42ee:	430a      	orrs	r2, r1
    42f0:	621a      	str	r2, [r3, #32]
			break;
    42f2:	e001      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    42f4:	2317      	movs	r3, #23
    42f6:	e000      	b.n	42fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    42f8:	2300      	movs	r3, #0
}
    42fa:	0018      	movs	r0, r3
    42fc:	46bd      	mov	sp, r7
    42fe:	b002      	add	sp, #8
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	40000400 	.word	0x40000400

00004308 <system_pinmux_get_config_defaults>:
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	2200      	movs	r2, #0
    431a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	2201      	movs	r2, #1
    4320:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	2200      	movs	r2, #0
    4326:	70da      	strb	r2, [r3, #3]
}
    4328:	46c0      	nop			; (mov r8, r8)
    432a:	46bd      	mov	sp, r7
    432c:	b002      	add	sp, #8
    432e:	bd80      	pop	{r7, pc}

00004330 <system_is_debugger_present>:
{
    4330:	b580      	push	{r7, lr}
    4332:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <system_is_debugger_present+0x1c>)
    4336:	789b      	ldrb	r3, [r3, #2]
    4338:	b2db      	uxtb	r3, r3
    433a:	001a      	movs	r2, r3
    433c:	2302      	movs	r3, #2
    433e:	4013      	ands	r3, r2
    4340:	1e5a      	subs	r2, r3, #1
    4342:	4193      	sbcs	r3, r2
    4344:	b2db      	uxtb	r3, r3
}
    4346:	0018      	movs	r0, r3
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	41002000 	.word	0x41002000

00004350 <_i2c_slave_set_config>:
 *                                         previously set
 */
static enum status_code _i2c_slave_set_config(
		struct i2c_slave_module *const module,
		const struct i2c_slave_config *const config)
{
    4350:	b580      	push	{r7, lr}
    4352:	b088      	sub	sp, #32
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	613b      	str	r3, [r7, #16]
	Sercom *const sercom_hw = module->hw;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	60fb      	str	r3, [r7, #12]

	module->buffer_timeout = config->buffer_timeout;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	891a      	ldrh	r2, [r3, #8]
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	80da      	strh	r2, [r3, #6]
	module->ten_bit_address = config->ten_bit_address;
    436e:	683b      	ldr	r3, [r7, #0]
    4370:	7c1a      	ldrb	r2, [r3, #16]
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	721a      	strb	r2, [r3, #8]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4376:	2308      	movs	r3, #8
    4378:	18fb      	adds	r3, r7, r3
    437a:	0018      	movs	r0, r3
    437c:	4b49      	ldr	r3, [pc, #292]	; (44a4 <_i2c_slave_set_config+0x154>)
    437e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	69db      	ldr	r3, [r3, #28]
    4384:	61bb      	str	r3, [r7, #24]
	uint32_t pad1 = config->pinmux_pad1;
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	6a1b      	ldr	r3, [r3, #32]
    438a:	617b      	str	r3, [r7, #20]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    438c:	69bb      	ldr	r3, [r7, #24]
    438e:	2b00      	cmp	r3, #0
    4390:	d106      	bne.n	43a0 <_i2c_slave_set_config+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2100      	movs	r1, #0
    4396:	0018      	movs	r0, r3
    4398:	4b43      	ldr	r3, [pc, #268]	; (44a8 <_i2c_slave_set_config+0x158>)
    439a:	4798      	blx	r3
    439c:	0003      	movs	r3, r0
    439e:	61bb      	str	r3, [r7, #24]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    43a0:	69bb      	ldr	r3, [r7, #24]
    43a2:	b2da      	uxtb	r2, r3
    43a4:	2308      	movs	r3, #8
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43aa:	2308      	movs	r3, #8
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2202      	movs	r2, #2
    43b0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    43b2:	69bb      	ldr	r3, [r7, #24]
    43b4:	0c1b      	lsrs	r3, r3, #16
    43b6:	b2db      	uxtb	r3, r3
    43b8:	2208      	movs	r2, #8
    43ba:	18ba      	adds	r2, r7, r2
    43bc:	0011      	movs	r1, r2
    43be:	0018      	movs	r0, r3
    43c0:	4b3a      	ldr	r3, [pc, #232]	; (44ac <_i2c_slave_set_config+0x15c>)
    43c2:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    43c4:	697b      	ldr	r3, [r7, #20]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d106      	bne.n	43d8 <_i2c_slave_set_config+0x88>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2101      	movs	r1, #1
    43ce:	0018      	movs	r0, r3
    43d0:	4b35      	ldr	r3, [pc, #212]	; (44a8 <_i2c_slave_set_config+0x158>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	617b      	str	r3, [r7, #20]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    43d8:	697b      	ldr	r3, [r7, #20]
    43da:	b2da      	uxtb	r2, r3
    43dc:	2308      	movs	r3, #8
    43de:	18fb      	adds	r3, r7, r3
    43e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43e2:	2308      	movs	r3, #8
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2202      	movs	r2, #2
    43e8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    43ea:	697b      	ldr	r3, [r7, #20]
    43ec:	0c1b      	lsrs	r3, r3, #16
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2208      	movs	r2, #8
    43f2:	18ba      	adds	r2, r7, r2
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2c      	ldr	r3, [pc, #176]	; (44ac <_i2c_slave_set_config+0x15c>)
    43fa:	4798      	blx	r3

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
    43fc:	683b      	ldr	r3, [r7, #0]
    43fe:	7e9b      	ldrb	r3, [r3, #26]
    4400:	2b00      	cmp	r3, #0
    4402:	d103      	bne.n	440c <_i2c_slave_set_config+0xbc>
    4404:	4b2a      	ldr	r3, [pc, #168]	; (44b0 <_i2c_slave_set_config+0x160>)
    4406:	4798      	blx	r3
    4408:	1e03      	subs	r3, r0, #0
    440a:	d002      	beq.n	4412 <_i2c_slave_set_config+0xc2>
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
    440c:	2380      	movs	r3, #128	; 0x80
    440e:	61fb      	str	r3, [r7, #28]
    4410:	e001      	b.n	4416 <_i2c_slave_set_config+0xc6>
	} else {
		tmp_ctrla = 0;
    4412:	2300      	movs	r3, #0
    4414:	61fb      	str	r3, [r7, #28]
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	2225      	movs	r2, #37	; 0x25
    441a:	5c9b      	ldrb	r3, [r3, r2]
    441c:	2b00      	cmp	r3, #0
    441e:	d105      	bne.n	442c <_i2c_slave_set_config+0xdc>
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	695a      	ldr	r2, [r3, #20]
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	049b      	lsls	r3, r3, #18
    4428:	429a      	cmp	r2, r3
    442a:	d104      	bne.n	4436 <_i2c_slave_set_config+0xe6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    442c:	69fb      	ldr	r3, [r7, #28]
    442e:	2280      	movs	r2, #128	; 0x80
    4430:	0512      	lsls	r2, r2, #20
    4432:	4313      	orrs	r3, r2
    4434:	61fb      	str	r3, [r7, #28]
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	685a      	ldr	r2, [r3, #4]
			config->transfer_speed |
    443a:	683b      	ldr	r3, [r7, #0]
    443c:	695b      	ldr	r3, [r3, #20]
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    443e:	4313      	orrs	r3, r2
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	2124      	movs	r1, #36	; 0x24
    4444:	5c52      	ldrb	r2, [r2, r1]
    4446:	0792      	lsls	r2, r2, #30
			config->transfer_speed |
    4448:	4313      	orrs	r3, r2
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
    444a:	683a      	ldr	r2, [r7, #0]
    444c:	2126      	movs	r1, #38	; 0x26
    444e:	5c52      	ldrb	r2, [r2, r1]
    4450:	05d2      	lsls	r2, r2, #23
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4452:	4313      	orrs	r3, r2
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4454:	69fa      	ldr	r2, [r7, #28]
    4456:	4313      	orrs	r3, r2
    4458:	61fb      	str	r3, [r7, #28]

	i2c_hw->CTRLA.reg |= tmp_ctrla;
    445a:	693b      	ldr	r3, [r7, #16]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	69fb      	ldr	r3, [r7, #28]
    4460:	431a      	orrs	r2, r3
    4462:	693b      	ldr	r3, [r7, #16]
    4464:	601a      	str	r2, [r3, #0]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	895b      	ldrh	r3, [r3, #10]
    446a:	2280      	movs	r2, #128	; 0x80
    446c:	0052      	lsls	r2, r2, #1
    446e:	4313      	orrs	r3, r2
    4470:	b29b      	uxth	r3, r3
    4472:	001a      	movs	r2, r3
    4474:	693b      	ldr	r3, [r7, #16]
    4476:	605a      	str	r2, [r3, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	899b      	ldrh	r3, [r3, #12]
    447c:	005a      	lsls	r2, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	89db      	ldrh	r3, [r3, #14]
    4482:	045b      	lsls	r3, r3, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4484:	431a      	orrs	r2, r3
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	7c1b      	ldrb	r3, [r3, #16]
    448a:	03db      	lsls	r3, r3, #15
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    448c:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
    448e:	683a      	ldr	r2, [r7, #0]
    4490:	7c52      	ldrb	r2, [r2, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4492:	4313      	orrs	r3, r2
    4494:	001a      	movs	r2, r3
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4496:	693b      	ldr	r3, [r7, #16]
    4498:	625a      	str	r2, [r3, #36]	; 0x24

	return STATUS_OK;
    449a:	2300      	movs	r3, #0
}
    449c:	0018      	movs	r0, r3
    449e:	46bd      	mov	sp, r7
    44a0:	b008      	add	sp, #32
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00004309 	.word	0x00004309
    44a8:	00007845 	.word	0x00007845
    44ac:	000088d9 	.word	0x000088d9
    44b0:	00004331 	.word	0x00004331

000044b4 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
    44b4:	b590      	push	{r4, r7, lr}
    44b6:	b08b      	sub	sp, #44	; 0x2c
    44b8:	af00      	add	r7, sp, #0
    44ba:	60f8      	str	r0, [r7, #12]
    44bc:	60b9      	str	r1, [r7, #8]
    44be:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	68ba      	ldr	r2, [r7, #8]
    44c4:	601a      	str	r2, [r3, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
    44cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	2202      	movs	r2, #2
    44d2:	4013      	ands	r3, r2
    44d4:	d001      	beq.n	44da <i2c_slave_init+0x26>
		return STATUS_ERR_DENIED;
    44d6:	231c      	movs	r3, #28
    44d8:	e069      	b.n	45ae <i2c_slave_init+0xfa>
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
    44da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	2201      	movs	r2, #1
    44e0:	4013      	ands	r3, r2
    44e2:	d001      	beq.n	44e8 <i2c_slave_init+0x34>
		return STATUS_BUSY;
    44e4:	2305      	movs	r3, #5
    44e6:	e062      	b.n	45ae <i2c_slave_init+0xfa>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	0018      	movs	r0, r3
    44ee:	4b32      	ldr	r3, [pc, #200]	; (45b8 <i2c_slave_init+0x104>)
    44f0:	4798      	blx	r3
    44f2:	0003      	movs	r3, r0
    44f4:	623b      	str	r3, [r7, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    44f6:	6a3b      	ldr	r3, [r7, #32]
    44f8:	3302      	adds	r3, #2
    44fa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44fc:	6a3b      	ldr	r3, [r7, #32]
    44fe:	3314      	adds	r3, #20
    4500:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4502:	2201      	movs	r2, #1
    4504:	69fb      	ldr	r3, [r7, #28]
    4506:	409a      	lsls	r2, r3
    4508:	0013      	movs	r3, r2
    450a:	0019      	movs	r1, r3
    450c:	2002      	movs	r0, #2
    450e:	4b2b      	ldr	r3, [pc, #172]	; (45bc <i2c_slave_init+0x108>)
    4510:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4512:	2314      	movs	r3, #20
    4514:	18fb      	adds	r3, r7, r3
    4516:	0018      	movs	r0, r3
    4518:	4b29      	ldr	r3, [pc, #164]	; (45c0 <i2c_slave_init+0x10c>)
    451a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	7e5a      	ldrb	r2, [r3, #25]
    4520:	2314      	movs	r3, #20
    4522:	18fb      	adds	r3, r7, r3
    4524:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4526:	69bb      	ldr	r3, [r7, #24]
    4528:	b2db      	uxtb	r3, r3
    452a:	2214      	movs	r2, #20
    452c:	18ba      	adds	r2, r7, r2
    452e:	0011      	movs	r1, r2
    4530:	0018      	movs	r0, r3
    4532:	4b24      	ldr	r3, [pc, #144]	; (45c4 <i2c_slave_init+0x110>)
    4534:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4536:	69bb      	ldr	r3, [r7, #24]
    4538:	b2db      	uxtb	r3, r3
    453a:	0018      	movs	r0, r3
    453c:	4b22      	ldr	r3, [pc, #136]	; (45c8 <i2c_slave_init+0x114>)
    453e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	7e5b      	ldrb	r3, [r3, #25]
    4544:	2100      	movs	r1, #0
    4546:	0018      	movs	r0, r3
    4548:	4b20      	ldr	r3, [pc, #128]	; (45cc <i2c_slave_init+0x118>)
    454a:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	2217      	movs	r2, #23
    4552:	18bc      	adds	r4, r7, r2
    4554:	0018      	movs	r0, r3
    4556:	4b18      	ldr	r3, [pc, #96]	; (45b8 <i2c_slave_init+0x104>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
    455c:	7023      	strb	r3, [r4, #0]

	/* Save software module in interrupt handler */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
    455e:	4a1c      	ldr	r2, [pc, #112]	; (45d0 <i2c_slave_init+0x11c>)
    4560:	2317      	movs	r3, #23
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	0011      	movs	r1, r2
    4568:	0018      	movs	r0, r3
    456a:	4b1a      	ldr	r3, [pc, #104]	; (45d4 <i2c_slave_init+0x120>)
    456c:	4798      	blx	r3

	/* Save software module */
	_sercom_instances[instance_index] = module;
    456e:	2317      	movs	r3, #23
    4570:	18fb      	adds	r3, r7, r3
    4572:	781a      	ldrb	r2, [r3, #0]
    4574:	4b18      	ldr	r3, [pc, #96]	; (45d8 <i2c_slave_init+0x124>)
    4576:	0092      	lsls	r2, r2, #2
    4578:	68f9      	ldr	r1, [r7, #12]
    457a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module */
	module->registered_callback = 0;
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	2224      	movs	r2, #36	; 0x24
    4580:	2100      	movs	r1, #0
    4582:	5499      	strb	r1, [r3, r2]
	module->enabled_callback = 0;
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	2225      	movs	r2, #37	; 0x25
    4588:	2100      	movs	r1, #0
    458a:	5499      	strb	r1, [r3, r2]
	module->buffer_length = 0;
    458c:	68fb      	ldr	r3, [r7, #12]
    458e:	2200      	movs	r2, #0
    4590:	84da      	strh	r2, [r3, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	7e1a      	ldrb	r2, [r3, #24]
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	725a      	strb	r2, [r3, #9]
#endif

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
    459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    459c:	2210      	movs	r2, #16
    459e:	601a      	str	r2, [r3, #0]

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	0011      	movs	r1, r2
    45a6:	0018      	movs	r0, r3
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <i2c_slave_init+0x128>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
}
    45ae:	0018      	movs	r0, r3
    45b0:	46bd      	mov	sp, r7
    45b2:	b00b      	add	sp, #44	; 0x2c
    45b4:	bd90      	pop	{r4, r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00007a01 	.word	0x00007a01
    45bc:	000042ad 	.word	0x000042ad
    45c0:	00004295 	.word	0x00004295
    45c4:	000085ed 	.word	0x000085ed
    45c8:	00008631 	.word	0x00008631
    45cc:	000077b9 	.word	0x000077b9
    45d0:	000047d5 	.word	0x000047d5
    45d4:	00007a65 	.word	0x00007a65
    45d8:	2000052c 	.word	0x2000052c
    45dc:	00004351 	.word	0x00004351

000045e0 <system_interrupt_enter_critical_section>:
{
    45e0:	b580      	push	{r7, lr}
    45e2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <system_interrupt_enter_critical_section+0x10>)
    45e6:	4798      	blx	r3
}
    45e8:	46c0      	nop			; (mov r8, r8)
    45ea:	46bd      	mov	sp, r7
    45ec:	bd80      	pop	{r7, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	00007c39 	.word	0x00007c39

000045f4 <system_interrupt_leave_critical_section>:
{
    45f4:	b580      	push	{r7, lr}
    45f6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <system_interrupt_leave_critical_section+0x10>)
    45fa:	4798      	blx	r3
}
    45fc:	46c0      	nop			; (mov r8, r8)
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	00007c8d 	.word	0x00007c8d

00004608 <_i2c_slave_set_ctrlb_ackact>:
 * \param[in] send_ack true send ACK, false send NACK
 */
static inline void _i2c_slave_set_ctrlb_ackact(
		struct i2c_slave_module *const module,
		bool send_ack)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	000a      	movs	r2, r1
    4612:	1cfb      	adds	r3, r7, #3
    4614:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	60fb      	str	r3, [r7, #12]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
    461c:	4b0b      	ldr	r3, [pc, #44]	; (464c <_i2c_slave_set_ctrlb_ackact+0x44>)
    461e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	2200      	movs	r2, #0
    4624:	835a      	strh	r2, [r3, #26]

	if (send_ack == true) {
    4626:	1cfb      	adds	r3, r7, #3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d003      	beq.n	4636 <_i2c_slave_set_ctrlb_ackact+0x2e>
		i2c_hw->CTRLB.reg = 0;
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2200      	movs	r2, #0
    4632:	605a      	str	r2, [r3, #4]
    4634:	e003      	b.n	463e <_i2c_slave_set_ctrlb_ackact+0x36>
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	2280      	movs	r2, #128	; 0x80
    463a:	02d2      	lsls	r2, r2, #11
    463c:	605a      	str	r2, [r3, #4]
	}
	system_interrupt_leave_critical_section();
    463e:	4b04      	ldr	r3, [pc, #16]	; (4650 <_i2c_slave_set_ctrlb_ackact+0x48>)
    4640:	4798      	blx	r3
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
	}
#endif
	return;
    4642:	46c0      	nop			; (mov r8, r8)
}
    4644:	46bd      	mov	sp, r7
    4646:	b004      	add	sp, #16
    4648:	bd80      	pop	{r7, pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	000045e1 	.word	0x000045e1
    4650:	000045f5 	.word	0x000045f5

00004654 <_i2c_slave_set_ctrlb_cmd3>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static inline void _i2c_slave_set_ctrlb_cmd3(
		struct i2c_slave_module *const module)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	60fb      	str	r3, [r7, #12]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	7e1b      	ldrb	r3, [r3, #24]
    4666:	07db      	lsls	r3, r3, #31
    4668:	0fdb      	lsrs	r3, r3, #31
    466a:	b2db      	uxtb	r3, r3
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <_i2c_slave_set_ctrlb_cmd3+0x22>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	2201      	movs	r2, #1
    4674:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	2202      	movs	r2, #2
    467a:	761a      	strb	r2, [r3, #24]
#else
	/* Normal operation */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
#endif
	return;
    467c:	46c0      	nop			; (mov r8, r8)
}
    467e:	46bd      	mov	sp, r7
    4680:	b004      	add	sp, #16
    4682:	bd80      	pop	{r7, pc}

00004684 <_i2c_slave_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_read(
		struct i2c_slave_module *const module)
{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	60fb      	str	r3, [r7, #12]

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4696:	1c59      	adds	r1, r3, #1
    4698:	687a      	ldr	r2, [r7, #4]
    469a:	62d1      	str	r1, [r2, #44]	; 0x2c
    469c:	68fa      	ldr	r2, [r7, #12]
    469e:	2128      	movs	r1, #40	; 0x28
    46a0:	5c52      	ldrb	r2, [r2, r1]
    46a2:	b2d2      	uxtb	r2, r2
    46a4:	701a      	strb	r2, [r3, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46aa:	3b01      	subs	r3, #1
    46ac:	b29a      	uxth	r2, r3
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	46bd      	mov	sp, r7
    46b6:	b004      	add	sp, #16
    46b8:	bd80      	pop	{r7, pc}

000046ba <_i2c_slave_write>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_write(
		struct i2c_slave_module *const module)
{
    46ba:	b580      	push	{r7, lr}
    46bc:	b084      	sub	sp, #16
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	60fb      	str	r3, [r7, #12]

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46cc:	1c59      	adds	r1, r3, #1
    46ce:	687a      	ldr	r2, [r7, #4]
    46d0:	62d1      	str	r1, [r2, #44]	; 0x2c
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2d9      	uxtb	r1, r3
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2228      	movs	r2, #40	; 0x28
    46da:	5499      	strb	r1, [r3, r2]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46e0:	3b01      	subs	r3, #1
    46e2:	b29a      	uxth	r2, r3
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b004      	add	sp, #16
    46ee:	bd80      	pop	{r7, pc}

000046f0 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b084      	sub	sp, #16
    46f4:	af00      	add	r7, sp, #0
    46f6:	60f8      	str	r0, [r7, #12]
    46f8:	60b9      	str	r1, [r7, #8]
    46fa:	1dfb      	adds	r3, r7, #7
    46fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
    46fe:	1dfb      	adds	r3, r7, #7
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	68fa      	ldr	r2, [r7, #12]
    4704:	3302      	adds	r3, #2
    4706:	009b      	lsls	r3, r3, #2
    4708:	18d3      	adds	r3, r2, r3
    470a:	3304      	adds	r3, #4
    470c:	68ba      	ldr	r2, [r7, #8]
    470e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	2224      	movs	r2, #36	; 0x24
    4714:	5c9b      	ldrb	r3, [r3, r2]
    4716:	b2db      	uxtb	r3, r3
    4718:	b25a      	sxtb	r2, r3
    471a:	1dfb      	adds	r3, r7, #7
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	2101      	movs	r1, #1
    4720:	4099      	lsls	r1, r3
    4722:	000b      	movs	r3, r1
    4724:	b25b      	sxtb	r3, r3
    4726:	4313      	orrs	r3, r2
    4728:	b25b      	sxtb	r3, r3
    472a:	b2d9      	uxtb	r1, r3
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	2224      	movs	r2, #36	; 0x24
    4730:	5499      	strb	r1, [r3, r2]
}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}

0000473a <i2c_slave_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_slave_read_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    473a:	b580      	push	{r7, lr}
    473c:	b084      	sub	sp, #16
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
    4742:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4748:	2b00      	cmp	r3, #0
    474a:	d001      	beq.n	4750 <i2c_slave_read_packet_job+0x16>
		return STATUS_BUSY;
    474c:	2305      	movs	r3, #5
    474e:	e016      	b.n	477e <i2c_slave_read_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	685a      	ldr	r2, [r3, #4]
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	881a      	ldrh	r2, [r3, #0]
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    4760:	683b      	ldr	r3, [r7, #0]
    4762:	881a      	ldrh	r2, [r3, #0]
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2231      	movs	r2, #49	; 0x31
    476c:	2105      	movs	r1, #5
    476e:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	2207      	movs	r2, #7
    477a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
    477c:	2300      	movs	r3, #0
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b004      	add	sp, #16
    4784:	bd80      	pop	{r7, pc}

00004786 <i2c_slave_write_packet_job>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
enum status_code i2c_slave_write_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    4786:	b580      	push	{r7, lr}
    4788:	b084      	sub	sp, #16
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
    478e:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4794:	2b00      	cmp	r3, #0
    4796:	d001      	beq.n	479c <i2c_slave_write_packet_job+0x16>
		return STATUS_BUSY;
    4798:	2305      	movs	r3, #5
    479a:	e016      	b.n	47ca <i2c_slave_write_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	685a      	ldr	r2, [r3, #4]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    47a4:	683b      	ldr	r3, [r7, #0]
    47a6:	881a      	ldrh	r2, [r3, #0]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    47ac:	683b      	ldr	r3, [r7, #0]
    47ae:	881a      	ldrh	r2, [r3, #0]
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	2231      	movs	r2, #49	; 0x31
    47b8:	2105      	movs	r1, #5
    47ba:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2207      	movs	r2, #7
    47c6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
    47c8:	2300      	movs	r3, #0
}
    47ca:	0018      	movs	r0, r3
    47cc:	46bd      	mov	sp, r7
    47ce:	b004      	add	sp, #16
    47d0:	bd80      	pop	{r7, pc}
	...

000047d4 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b086      	sub	sp, #24
    47d8:	af00      	add	r7, sp, #0
    47da:	0002      	movs	r2, r0
    47dc:	1dfb      	adds	r3, r7, #7
    47de:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
			(struct i2c_slave_module*)_sercom_instances[instance];
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_slave_module *module =
    47e4:	4bc6      	ldr	r3, [pc, #792]	; (4b00 <_i2c_slave_interrupt_handler+0x32c>)
    47e6:	0092      	lsls	r2, r2, #2
    47e8:	58d3      	ldr	r3, [r2, r3]
    47ea:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	697a      	ldr	r2, [r7, #20]
    47f8:	2125      	movs	r1, #37	; 0x25
    47fa:	5c52      	ldrb	r2, [r2, r1]
    47fc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	2224      	movs	r2, #36	; 0x24
    4802:	5c9b      	ldrb	r3, [r3, r2]
    4804:	b2da      	uxtb	r2, r3
    4806:	230f      	movs	r3, #15
    4808:	18fb      	adds	r3, r7, r3
    480a:	210f      	movs	r1, #15
    480c:	1879      	adds	r1, r7, r1
    480e:	7809      	ldrb	r1, [r1, #0]
    4810:	400a      	ands	r2, r1
    4812:	701a      	strb	r2, [r3, #0]


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    4814:	693b      	ldr	r3, [r7, #16]
    4816:	7e1b      	ldrb	r3, [r3, #24]
    4818:	b2db      	uxtb	r3, r3
    481a:	001a      	movs	r2, r3
    481c:	2302      	movs	r3, #2
    481e:	4013      	ands	r3, r2
    4820:	d100      	bne.n	4824 <_i2c_slave_interrupt_handler+0x50>
    4822:	e0b4      	b.n	498e <_i2c_slave_interrupt_handler+0x1ba>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4828:	b29a      	uxth	r2, r3
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    482e:	429a      	cmp	r2, r3
    4830:	d01b      	beq.n	486a <_i2c_slave_interrupt_handler+0x96>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    4832:	697b      	ldr	r3, [r7, #20]
    4834:	2230      	movs	r2, #48	; 0x30
    4836:	5c9b      	ldrb	r3, [r3, r2]
    4838:	b2db      	uxtb	r3, r3
		if (module->buffer_length != module->buffer_remaining &&
    483a:	2b00      	cmp	r3, #0
    483c:	d115      	bne.n	486a <_i2c_slave_interrupt_handler+0x96>

			module->status = STATUS_OK;
    483e:	697b      	ldr	r3, [r7, #20]
    4840:	2231      	movs	r2, #49	; 0x31
    4842:	2100      	movs	r1, #0
    4844:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    4846:	697b      	ldr	r3, [r7, #20]
    4848:	2200      	movs	r2, #0
    484a:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    484c:	697b      	ldr	r3, [r7, #20]
    484e:	2200      	movs	r2, #0
    4850:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4852:	230f      	movs	r3, #15
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	2202      	movs	r2, #2
    485a:	4013      	ands	r3, r2
    485c:	d027      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    485e:	697b      	ldr	r3, [r7, #20]
    4860:	691b      	ldr	r3, [r3, #16]
    4862:	697a      	ldr	r2, [r7, #20]
    4864:	0010      	movs	r0, r2
    4866:	4798      	blx	r3
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4868:	e021      	b.n	48ae <_i2c_slave_interrupt_handler+0xda>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    486a:	697b      	ldr	r3, [r7, #20]
    486c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    486e:	b29a      	uxth	r2, r3
    4870:	697b      	ldr	r3, [r7, #20]
    4872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4874:	429a      	cmp	r2, r3
    4876:	d01a      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->transfer_direction == I2C_TRANSFER_READ) {
    4878:	697b      	ldr	r3, [r7, #20]
    487a:	2230      	movs	r2, #48	; 0x30
    487c:	5c9b      	ldrb	r3, [r3, r2]
    487e:	b2db      	uxtb	r3, r3
		} else if (module->buffer_length != module->buffer_remaining &&
    4880:	2b01      	cmp	r3, #1
    4882:	d114      	bne.n	48ae <_i2c_slave_interrupt_handler+0xda>
			module->status = STATUS_OK;
    4884:	697b      	ldr	r3, [r7, #20]
    4886:	2231      	movs	r2, #49	; 0x31
    4888:	2100      	movs	r1, #0
    488a:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    488c:	697b      	ldr	r3, [r7, #20]
    488e:	2200      	movs	r2, #0
    4890:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    4892:	697b      	ldr	r3, [r7, #20]
    4894:	2200      	movs	r2, #0
    4896:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    4898:	230f      	movs	r3, #15
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2201      	movs	r2, #1
    48a0:	4013      	ands	r3, r2
    48a2:	d004      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    48a4:	697b      	ldr	r3, [r7, #20]
    48a6:	68db      	ldr	r3, [r3, #12]
    48a8:	697a      	ldr	r2, [r7, #20]
    48aa:	0010      	movs	r0, r2
    48ac:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    48ae:	693b      	ldr	r3, [r7, #16]
    48b0:	8b5b      	ldrh	r3, [r3, #26]
    48b2:	b29b      	uxth	r3, r3
    48b4:	001a      	movs	r2, r3
    48b6:	2343      	movs	r3, #67	; 0x43
    48b8:	4013      	ands	r3, r2
    48ba:	d00e      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    48bc:	697b      	ldr	r3, [r7, #20]
    48be:	2231      	movs	r2, #49	; 0x31
    48c0:	2110      	movs	r1, #16
    48c2:	5499      	strb	r1, [r3, r2]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    48c4:	230f      	movs	r3, #15
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	2220      	movs	r2, #32
    48cc:	4013      	ands	r3, r2
    48ce:	d004      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    48d0:	697b      	ldr	r3, [r7, #20]
    48d2:	6a1b      	ldr	r3, [r3, #32]
    48d4:	697a      	ldr	r2, [r7, #20]
    48d6:	0010      	movs	r0, r2
    48d8:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	7a5b      	ldrb	r3, [r3, #9]
    48de:	2b00      	cmp	r3, #0
    48e0:	d005      	beq.n	48ee <_i2c_slave_interrupt_handler+0x11a>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
    48e2:	697b      	ldr	r3, [r7, #20]
    48e4:	2100      	movs	r1, #0
    48e6:	0018      	movs	r0, r3
    48e8:	4b86      	ldr	r3, [pc, #536]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    48ea:	4798      	blx	r3
    48ec:	e045      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	8b5b      	ldrh	r3, [r3, #26]
    48f2:	b29b      	uxth	r3, r3
    48f4:	001a      	movs	r2, r3
    48f6:	2308      	movs	r3, #8
    48f8:	4013      	ands	r3, r2
    48fa:	d01f      	beq.n	493c <_i2c_slave_interrupt_handler+0x168>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    48fc:	697b      	ldr	r3, [r7, #20]
    48fe:	2230      	movs	r2, #48	; 0x30
    4900:	2101      	movs	r1, #1
    4902:	5499      	strb	r1, [r3, r2]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2204      	movs	r2, #4
    490c:	4013      	ands	r3, r2
    490e:	d004      	beq.n	491a <_i2c_slave_interrupt_handler+0x146>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	695b      	ldr	r3, [r3, #20]
    4914:	697a      	ldr	r2, [r7, #20]
    4916:	0010      	movs	r0, r2
    4918:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    491a:	697b      	ldr	r3, [r7, #20]
    491c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    491e:	b29b      	uxth	r3, r3
    4920:	2b00      	cmp	r3, #0
    4922:	d105      	bne.n	4930 <_i2c_slave_interrupt_handler+0x15c>
				/* Data buffer not set up, NACK address, workaround 13574*/
				_i2c_slave_set_ctrlb_ackact(module, false);
    4924:	697b      	ldr	r3, [r7, #20]
    4926:	2100      	movs	r1, #0
    4928:	0018      	movs	r0, r3
    492a:	4b76      	ldr	r3, [pc, #472]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    492c:	4798      	blx	r3
    492e:	e024      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4930:	697b      	ldr	r3, [r7, #20]
    4932:	2101      	movs	r1, #1
    4934:	0018      	movs	r0, r3
    4936:	4b73      	ldr	r3, [pc, #460]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4938:	4798      	blx	r3
    493a:	e01e      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = I2C_TRANSFER_WRITE;
    493c:	697b      	ldr	r3, [r7, #20]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	2100      	movs	r1, #0
    4942:	5499      	strb	r1, [r3, r2]

			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    4944:	230f      	movs	r3, #15
    4946:	18fb      	adds	r3, r7, r3
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2208      	movs	r2, #8
    494c:	4013      	ands	r3, r2
    494e:	d004      	beq.n	495a <_i2c_slave_interrupt_handler+0x186>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    4950:	697b      	ldr	r3, [r7, #20]
    4952:	699b      	ldr	r3, [r3, #24]
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	0010      	movs	r0, r2
    4958:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    495e:	b29b      	uxth	r3, r3
    4960:	2b00      	cmp	r3, #0
    4962:	d105      	bne.n	4970 <_i2c_slave_interrupt_handler+0x19c>
				/* Data buffer not set up, NACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, false);
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	2100      	movs	r1, #0
    4968:	0018      	movs	r0, r3
    496a:	4b66      	ldr	r3, [pc, #408]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    496c:	4798      	blx	r3
    496e:	e004      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2101      	movs	r1, #1
    4974:	0018      	movs	r0, r3
    4976:	4b63      	ldr	r3, [pc, #396]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4978:	4798      	blx	r3
			}
		}

		/* ACK or NACK address, Workaround 13574 */
		_i2c_slave_set_ctrlb_cmd3(module);
    497a:	697b      	ldr	r3, [r7, #20]
    497c:	0018      	movs	r0, r3
    497e:	4b62      	ldr	r3, [pc, #392]	; (4b08 <_i2c_slave_interrupt_handler+0x334>)
    4980:	4798      	blx	r3

		/* ACK next incoming packet, workaround 13574 */
		_i2c_slave_set_ctrlb_ackact(module, true);
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	2101      	movs	r1, #1
    4986:	0018      	movs	r0, r3
    4988:	4b5e      	ldr	r3, [pc, #376]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    498a:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    498c:	e0d8      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	7e1b      	ldrb	r3, [r3, #24]
    4992:	b2db      	uxtb	r3, r3
    4994:	001a      	movs	r2, r3
    4996:	2301      	movs	r3, #1
    4998:	4013      	ands	r3, r2
    499a:	d054      	beq.n	4a46 <_i2c_slave_interrupt_handler+0x272>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	2201      	movs	r2, #1
    49a0:	761a      	strb	r2, [r3, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	2205      	movs	r2, #5
    49a6:	751a      	strb	r2, [r3, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49a8:	697b      	ldr	r3, [r7, #20]
    49aa:	2225      	movs	r2, #37	; 0x25
    49ac:	5c9b      	ldrb	r3, [r3, r2]
    49ae:	b2db      	uxtb	r3, r3
    49b0:	001a      	movs	r2, r3
    49b2:	2304      	movs	r3, #4
    49b4:	4013      	ands	r3, r2
    49b6:	d108      	bne.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    49b8:	697b      	ldr	r3, [r7, #20]
    49ba:	2225      	movs	r2, #37	; 0x25
    49bc:	5c9b      	ldrb	r3, [r3, r2]
    49be:	b2db      	uxtb	r3, r3
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49c0:	2b08      	cmp	r3, #8
    49c2:	d002      	beq.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    49c4:	693b      	ldr	r3, [r7, #16]
    49c6:	2202      	movs	r2, #2
    49c8:	751a      	strb	r2, [r3, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2231      	movs	r2, #49	; 0x31
    49ce:	5c9b      	ldrb	r3, [r3, r2]
    49d0:	b2db      	uxtb	r3, r3
    49d2:	2b1e      	cmp	r3, #30
    49d4:	d100      	bne.n	49d8 <_i2c_slave_interrupt_handler+0x204>
    49d6:	e0b3      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    49d8:	697b      	ldr	r3, [r7, #20]
    49da:	2231      	movs	r2, #49	; 0x31
    49dc:	5c9b      	ldrb	r3, [r3, r2]
    49de:	b2db      	uxtb	r3, r3
    49e0:	2b10      	cmp	r3, #16
    49e2:	d100      	bne.n	49e6 <_i2c_slave_interrupt_handler+0x212>
    49e4:	e0ac      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			module->status = STATUS_OK;
    49e6:	697b      	ldr	r3, [r7, #20]
    49e8:	2231      	movs	r2, #49	; 0x31
    49ea:	2100      	movs	r1, #0
    49ec:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    49ee:	697b      	ldr	r3, [r7, #20]
    49f0:	2200      	movs	r2, #0
    49f2:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    49f4:	697b      	ldr	r3, [r7, #20]
    49f6:	2200      	movs	r2, #0
    49f8:	851a      	strh	r2, [r3, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    49fa:	230f      	movs	r3, #15
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2202      	movs	r2, #2
    4a02:	4013      	ands	r3, r2
    4a04:	d00b      	beq.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	2230      	movs	r2, #48	; 0x30
    4a0a:	5c9b      	ldrb	r3, [r3, r2]
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d105      	bne.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	691b      	ldr	r3, [r3, #16]
    4a16:	697a      	ldr	r2, [r7, #20]
    4a18:	0010      	movs	r0, r2
    4a1a:	4798      	blx	r3
    4a1c:	e090      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    4a1e:	230f      	movs	r3, #15
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	4013      	ands	r3, r2
    4a28:	d100      	bne.n	4a2c <_i2c_slave_interrupt_handler+0x258>
    4a2a:	e089      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4a2c:	697b      	ldr	r3, [r7, #20]
    4a2e:	2230      	movs	r2, #48	; 0x30
    4a30:	5c9b      	ldrb	r3, [r3, r2]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b01      	cmp	r3, #1
    4a36:	d000      	beq.n	4a3a <_i2c_slave_interrupt_handler+0x266>
    4a38:	e082      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	68db      	ldr	r3, [r3, #12]
    4a3e:	697a      	ldr	r2, [r7, #20]
    4a40:	0010      	movs	r0, r2
    4a42:	4798      	blx	r3
}
    4a44:	e07c      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	7e1b      	ldrb	r3, [r3, #24]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	001a      	movs	r2, r3
    4a4e:	2304      	movs	r3, #4
    4a50:	4013      	ands	r3, r2
    4a52:	d100      	bne.n	4a56 <_i2c_slave_interrupt_handler+0x282>
    4a54:	e074      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
		if (module->buffer_remaining <= 0 ||
    4a56:	697b      	ldr	r3, [r7, #20]
    4a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d013      	beq.n	4a86 <_i2c_slave_interrupt_handler+0x2b2>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2230      	movs	r2, #48	; 0x30
    4a62:	5c9b      	ldrb	r3, [r3, r2]
    4a64:	b2db      	uxtb	r3, r3
		if (module->buffer_remaining <= 0 ||
    4a66:	2b01      	cmp	r3, #1
    4a68:	d150      	bne.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(module->buffer_length > module->buffer_remaining) &&
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a6e:	b29a      	uxth	r2, r3
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a74:	429a      	cmp	r2, r3
    4a76:	d949      	bls.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    4a78:	693b      	ldr	r3, [r7, #16]
    4a7a:	8b5b      	ldrh	r3, [r3, #26]
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	001a      	movs	r2, r3
    4a80:	2304      	movs	r3, #4
    4a82:	4013      	ands	r3, r2
				(module->buffer_length > module->buffer_remaining) &&
    4a84:	d042      	beq.n	4b0c <_i2c_slave_interrupt_handler+0x338>
			module->buffer_remaining = 0;
    4a86:	697b      	ldr	r3, [r7, #20]
    4a88:	2200      	movs	r2, #0
    4a8a:	851a      	strh	r2, [r3, #40]	; 0x28
			module->buffer_length = 0;
    4a8c:	697b      	ldr	r3, [r7, #20]
    4a8e:	2200      	movs	r2, #0
    4a90:	84da      	strh	r2, [r3, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	2230      	movs	r2, #48	; 0x30
    4a96:	5c9b      	ldrb	r3, [r3, r2]
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d11b      	bne.n	4ad6 <_i2c_slave_interrupt_handler+0x302>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	2100      	movs	r1, #0
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b17      	ldr	r3, [pc, #92]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4aa6:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4aa8:	693b      	ldr	r3, [r7, #16]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	0292      	lsls	r2, r2, #10
    4ab0:	431a      	orrs	r2, r3
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	605a      	str	r2, [r3, #4]
				module->status = STATUS_ERR_OVERFLOW;
    4ab6:	697b      	ldr	r3, [r7, #20]
    4ab8:	2231      	movs	r2, #49	; 0x31
    4aba:	211e      	movs	r1, #30
    4abc:	5499      	strb	r1, [r3, r2]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    4abe:	230f      	movs	r3, #15
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	2210      	movs	r2, #16
    4ac6:	4013      	ands	r3, r2
    4ac8:	d039      	beq.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	69db      	ldr	r3, [r3, #28]
    4ace:	697a      	ldr	r2, [r7, #20]
    4ad0:	0010      	movs	r0, r2
    4ad2:	4798      	blx	r3
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4ad4:	e033      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	2100      	movs	r1, #0
    4ada:	0018      	movs	r0, r3
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4ade:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4ae0:	693b      	ldr	r3, [r7, #16]
    4ae2:	685b      	ldr	r3, [r3, #4]
    4ae4:	2280      	movs	r2, #128	; 0x80
    4ae6:	0292      	lsls	r2, r2, #10
    4ae8:	431a      	orrs	r2, r3
    4aea:	693b      	ldr	r3, [r7, #16]
    4aec:	605a      	str	r2, [r3, #4]
				module->status = STATUS_OK;
    4aee:	697b      	ldr	r3, [r7, #20]
    4af0:	2231      	movs	r2, #49	; 0x31
    4af2:	2100      	movs	r1, #0
    4af4:	5499      	strb	r1, [r3, r2]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    4af6:	693b      	ldr	r3, [r7, #16]
    4af8:	2204      	movs	r2, #4
    4afa:	751a      	strb	r2, [r3, #20]
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4afc:	e01f      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	2000052c 	.word	0x2000052c
    4b04:	00004609 	.word	0x00004609
    4b08:	00004655 	.word	0x00004655
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b10:	b29b      	uxth	r3, r3
    4b12:	2b00      	cmp	r3, #0
    4b14:	d014      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    4b16:	697b      	ldr	r3, [r7, #20]
    4b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d010      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b1e:	697b      	ldr	r3, [r7, #20]
    4b20:	2230      	movs	r2, #48	; 0x30
    4b22:	5c9b      	ldrb	r3, [r3, r2]
    4b24:	b2db      	uxtb	r3, r3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d104      	bne.n	4b34 <_i2c_slave_interrupt_handler+0x360>
				_i2c_slave_read(module);
    4b2a:	697b      	ldr	r3, [r7, #20]
    4b2c:	0018      	movs	r0, r3
    4b2e:	4b06      	ldr	r3, [pc, #24]	; (4b48 <_i2c_slave_interrupt_handler+0x374>)
    4b30:	4798      	blx	r3
}
    4b32:	e005      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				_i2c_slave_write(module);
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	0018      	movs	r0, r3
    4b38:	4b04      	ldr	r3, [pc, #16]	; (4b4c <_i2c_slave_interrupt_handler+0x378>)
    4b3a:	4798      	blx	r3
}
    4b3c:	e000      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b3e:	46c0      	nop			; (mov r8, r8)
}
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	46bd      	mov	sp, r7
    4b44:	b006      	add	sp, #24
    4b46:	bd80      	pop	{r7, pc}
    4b48:	00004685 	.word	0x00004685
    4b4c:	000046bb 	.word	0x000046bb

00004b50 <system_gclk_chan_get_config_defaults>:
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	2200      	movs	r2, #0
    4b5c:	701a      	strb	r2, [r3, #0]
}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	46bd      	mov	sp, r7
    4b62:	b002      	add	sp, #8
    4b64:	bd80      	pop	{r7, pc}
	...

00004b68 <system_apb_clock_set_mask>:
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b082      	sub	sp, #8
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	0002      	movs	r2, r0
    4b70:	6039      	str	r1, [r7, #0]
    4b72:	1dfb      	adds	r3, r7, #7
    4b74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d00a      	beq.n	4b94 <system_apb_clock_set_mask+0x2c>
    4b7e:	2b02      	cmp	r3, #2
    4b80:	d00f      	beq.n	4ba2 <system_apb_clock_set_mask+0x3a>
    4b82:	2b00      	cmp	r3, #0
    4b84:	d114      	bne.n	4bb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b8a:	6991      	ldr	r1, [r2, #24]
    4b8c:	683a      	ldr	r2, [r7, #0]
    4b8e:	430a      	orrs	r2, r1
    4b90:	619a      	str	r2, [r3, #24]
			break;
    4b92:	e00f      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4b94:	4b0a      	ldr	r3, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b96:	4a0a      	ldr	r2, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b98:	69d1      	ldr	r1, [r2, #28]
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	430a      	orrs	r2, r1
    4b9e:	61da      	str	r2, [r3, #28]
			break;
    4ba0:	e008      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba4:	4a06      	ldr	r2, [pc, #24]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba6:	6a11      	ldr	r1, [r2, #32]
    4ba8:	683a      	ldr	r2, [r7, #0]
    4baa:	430a      	orrs	r2, r1
    4bac:	621a      	str	r2, [r3, #32]
			break;
    4bae:	e001      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bb0:	2317      	movs	r3, #23
    4bb2:	e000      	b.n	4bb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bb4:	2300      	movs	r3, #0
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b002      	add	sp, #8
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	40000400 	.word	0x40000400

00004bc4 <system_pinmux_get_config_defaults>:
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	2280      	movs	r2, #128	; 0x80
    4bd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	2200      	movs	r2, #0
    4bd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	2201      	movs	r2, #1
    4bdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	2200      	movs	r2, #0
    4be2:	70da      	strb	r2, [r3, #3]
}
    4be4:	46c0      	nop			; (mov r8, r8)
    4be6:	46bd      	mov	sp, r7
    4be8:	b002      	add	sp, #8
    4bea:	bd80      	pop	{r7, pc}

00004bec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4bf4:	2300      	movs	r3, #0
    4bf6:	60fb      	str	r3, [r7, #12]
    4bf8:	e00c      	b.n	4c14 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    4bfa:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_tcc_get_inst_index+0x38>)
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	0092      	lsls	r2, r2, #2
    4c00:	58d2      	ldr	r2, [r2, r3]
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	429a      	cmp	r2, r3
    4c06:	d102      	bne.n	4c0e <_tcc_get_inst_index+0x22>
			return i;
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	e006      	b.n	4c1c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	3301      	adds	r3, #1
    4c12:	60fb      	str	r3, [r7, #12]
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	2b02      	cmp	r3, #2
    4c18:	d9ef      	bls.n	4bfa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c1a:	2300      	movs	r3, #0
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	46bd      	mov	sp, r7
    4c20:	b004      	add	sp, #16
    4c22:	bd80      	pop	{r7, pc}
    4c24:	0001c580 	.word	0x0001c580

00004c28 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c28:	b590      	push	{r4, r7, lr}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c32:	230f      	movs	r3, #15
    4c34:	18fc      	adds	r4, r7, r3
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	0018      	movs	r0, r3
    4c3a:	4bad      	ldr	r3, [pc, #692]	; (4ef0 <tcc_get_config_defaults+0x2c8>)
    4c3c:	4798      	blx	r3
    4c3e:	0003      	movs	r3, r0
    4c40:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	2200      	movs	r2, #0
    4c46:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c48:	230f      	movs	r3, #15
    4c4a:	18fb      	adds	r3, r7, r3
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4ba9      	ldr	r3, [pc, #676]	; (4ef4 <tcc_get_config_defaults+0x2cc>)
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	58d2      	ldr	r2, [r2, r3]
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	2200      	movs	r2, #0
    4c5c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	2200      	movs	r2, #0
    4c62:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	2200      	movs	r2, #0
    4c68:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2200      	movs	r2, #0
    4c6e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	2200      	movs	r2, #0
    4c74:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2200      	movs	r2, #0
    4c7a:	61da      	str	r2, [r3, #28]
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	2200      	movs	r2, #0
    4c80:	621a      	str	r2, [r3, #32]
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	2200      	movs	r2, #0
    4c86:	625a      	str	r2, [r3, #36]	; 0x24
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2200      	movs	r2, #0
    4c8c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	2200      	movs	r2, #0
    4c92:	751a      	strb	r2, [r3, #20]
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	2200      	movs	r2, #0
    4c98:	755a      	strb	r2, [r3, #21]
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	2200      	movs	r2, #0
    4c9e:	759a      	strb	r2, [r3, #22]
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2200      	movs	r2, #0
    4ca4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2200      	movs	r2, #0
    4caa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	2200      	movs	r2, #0
    4cb0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	2200      	movs	r2, #0
    4cb6:	741a      	strb	r2, [r3, #16]
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2200      	movs	r2, #0
    4cbc:	745a      	strb	r2, [r3, #17]
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2200      	movs	r2, #0
    4cc2:	749a      	strb	r2, [r3, #18]
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	222c      	movs	r2, #44	; 0x2c
    4cce:	2100      	movs	r1, #0
    4cd0:	5499      	strb	r1, [r3, r2]
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	222d      	movs	r2, #45	; 0x2d
    4cd6:	2100      	movs	r1, #0
    4cd8:	5499      	strb	r1, [r3, r2]
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	222e      	movs	r2, #46	; 0x2e
    4cde:	2100      	movs	r1, #0
    4ce0:	5499      	strb	r1, [r3, r2]
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	222f      	movs	r2, #47	; 0x2f
    4ce6:	2100      	movs	r1, #0
    4ce8:	5499      	strb	r1, [r3, r2]
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	2230      	movs	r2, #48	; 0x30
    4cee:	2100      	movs	r1, #0
    4cf0:	5499      	strb	r1, [r3, r2]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	2231      	movs	r2, #49	; 0x31
    4cf6:	2100      	movs	r1, #0
    4cf8:	5499      	strb	r1, [r3, r2]
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	2232      	movs	r2, #50	; 0x32
    4cfe:	2100      	movs	r1, #0
    4d00:	5499      	strb	r1, [r3, r2]
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	2233      	movs	r2, #51	; 0x33
    4d06:	2100      	movs	r1, #0
    4d08:	5499      	strb	r1, [r3, r2]
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2234      	movs	r2, #52	; 0x34
    4d0e:	2100      	movs	r1, #0
    4d10:	5499      	strb	r1, [r3, r2]
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2235      	movs	r2, #53	; 0x35
    4d16:	2100      	movs	r1, #0
    4d18:	5499      	strb	r1, [r3, r2]
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	2236      	movs	r2, #54	; 0x36
    4d1e:	2100      	movs	r1, #0
    4d20:	5499      	strb	r1, [r3, r2]
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	2237      	movs	r2, #55	; 0x37
    4d26:	2100      	movs	r1, #0
    4d28:	5499      	strb	r1, [r3, r2]
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	2238      	movs	r2, #56	; 0x38
    4d2e:	2100      	movs	r1, #0
    4d30:	5499      	strb	r1, [r3, r2]
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	2239      	movs	r2, #57	; 0x39
    4d36:	2100      	movs	r1, #0
    4d38:	5499      	strb	r1, [r3, r2]
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	223a      	movs	r2, #58	; 0x3a
    4d3e:	2100      	movs	r1, #0
    4d40:	5499      	strb	r1, [r3, r2]
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	223b      	movs	r2, #59	; 0x3b
    4d46:	2100      	movs	r1, #0
    4d48:	5499      	strb	r1, [r3, r2]
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	223c      	movs	r2, #60	; 0x3c
    4d4e:	2100      	movs	r1, #0
    4d50:	5499      	strb	r1, [r3, r2]
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	223d      	movs	r2, #61	; 0x3d
    4d56:	2100      	movs	r1, #0
    4d58:	5499      	strb	r1, [r3, r2]
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	223e      	movs	r2, #62	; 0x3e
    4d5e:	2100      	movs	r1, #0
    4d60:	5499      	strb	r1, [r3, r2]
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	223f      	movs	r2, #63	; 0x3f
    4d66:	2100      	movs	r1, #0
    4d68:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	2240      	movs	r2, #64	; 0x40
    4d6e:	2100      	movs	r1, #0
    4d70:	5499      	strb	r1, [r3, r2]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	2241      	movs	r2, #65	; 0x41
    4d76:	2100      	movs	r1, #0
    4d78:	5499      	strb	r1, [r3, r2]
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	2242      	movs	r2, #66	; 0x42
    4d7e:	2100      	movs	r1, #0
    4d80:	5499      	strb	r1, [r3, r2]
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	2243      	movs	r2, #67	; 0x43
    4d86:	2100      	movs	r1, #0
    4d88:	5499      	strb	r1, [r3, r2]
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	2244      	movs	r2, #68	; 0x44
    4d8e:	2100      	movs	r1, #0
    4d90:	5499      	strb	r1, [r3, r2]
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	2245      	movs	r2, #69	; 0x45
    4d96:	2100      	movs	r1, #0
    4d98:	5499      	strb	r1, [r3, r2]
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	2246      	movs	r2, #70	; 0x46
    4d9e:	2100      	movs	r1, #0
    4da0:	5499      	strb	r1, [r3, r2]
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2247      	movs	r2, #71	; 0x47
    4da6:	2100      	movs	r1, #0
    4da8:	5499      	strb	r1, [r3, r2]
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	2248      	movs	r2, #72	; 0x48
    4dae:	2100      	movs	r1, #0
    4db0:	5499      	strb	r1, [r3, r2]
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	2249      	movs	r2, #73	; 0x49
    4db6:	2100      	movs	r1, #0
    4db8:	5499      	strb	r1, [r3, r2]
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	224a      	movs	r2, #74	; 0x4a
    4dbe:	2100      	movs	r1, #0
    4dc0:	5499      	strb	r1, [r3, r2]
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	224b      	movs	r2, #75	; 0x4b
    4dc6:	2100      	movs	r1, #0
    4dc8:	5499      	strb	r1, [r3, r2]
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	224c      	movs	r2, #76	; 0x4c
    4dce:	2100      	movs	r1, #0
    4dd0:	5499      	strb	r1, [r3, r2]
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	224d      	movs	r2, #77	; 0x4d
    4dd6:	2100      	movs	r1, #0
    4dd8:	5499      	strb	r1, [r3, r2]
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	224e      	movs	r2, #78	; 0x4e
    4dde:	2100      	movs	r1, #0
    4de0:	5499      	strb	r1, [r3, r2]
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	224f      	movs	r2, #79	; 0x4f
    4de6:	2100      	movs	r1, #0
    4de8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	2250      	movs	r2, #80	; 0x50
    4dee:	2100      	movs	r1, #0
    4df0:	5499      	strb	r1, [r3, r2]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	2251      	movs	r2, #81	; 0x51
    4df6:	2100      	movs	r1, #0
    4df8:	5499      	strb	r1, [r3, r2]
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	2252      	movs	r2, #82	; 0x52
    4dfe:	2100      	movs	r1, #0
    4e00:	5499      	strb	r1, [r3, r2]
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	2253      	movs	r2, #83	; 0x53
    4e06:	2100      	movs	r1, #0
    4e08:	5499      	strb	r1, [r3, r2]
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	2254      	movs	r2, #84	; 0x54
    4e0e:	2100      	movs	r1, #0
    4e10:	5499      	strb	r1, [r3, r2]
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	2255      	movs	r2, #85	; 0x55
    4e16:	2100      	movs	r1, #0
    4e18:	5499      	strb	r1, [r3, r2]
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	2256      	movs	r2, #86	; 0x56
    4e1e:	2100      	movs	r1, #0
    4e20:	5499      	strb	r1, [r3, r2]
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	2257      	movs	r2, #87	; 0x57
    4e26:	2100      	movs	r1, #0
    4e28:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	2298      	movs	r2, #152	; 0x98
    4e2e:	2100      	movs	r1, #0
    4e30:	5499      	strb	r1, [r3, r2]
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	2200      	movs	r2, #0
    4e36:	659a      	str	r2, [r3, #88]	; 0x58
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2200      	movs	r2, #0
    4e3c:	679a      	str	r2, [r3, #120]	; 0x78
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	2299      	movs	r2, #153	; 0x99
    4e42:	2100      	movs	r1, #0
    4e44:	5499      	strb	r1, [r3, r2]
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	2200      	movs	r2, #0
    4e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	2200      	movs	r2, #0
    4e50:	67da      	str	r2, [r3, #124]	; 0x7c
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	229a      	movs	r2, #154	; 0x9a
    4e56:	2100      	movs	r1, #0
    4e58:	5499      	strb	r1, [r3, r2]
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2200      	movs	r2, #0
    4e5e:	661a      	str	r2, [r3, #96]	; 0x60
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2280      	movs	r2, #128	; 0x80
    4e64:	2100      	movs	r1, #0
    4e66:	5099      	str	r1, [r3, r2]
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	229b      	movs	r2, #155	; 0x9b
    4e6c:	2100      	movs	r1, #0
    4e6e:	5499      	strb	r1, [r3, r2]
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2200      	movs	r2, #0
    4e74:	665a      	str	r2, [r3, #100]	; 0x64
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	2284      	movs	r2, #132	; 0x84
    4e7a:	2100      	movs	r1, #0
    4e7c:	5099      	str	r1, [r3, r2]
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	229c      	movs	r2, #156	; 0x9c
    4e82:	2100      	movs	r1, #0
    4e84:	5499      	strb	r1, [r3, r2]
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	2200      	movs	r2, #0
    4e8a:	669a      	str	r2, [r3, #104]	; 0x68
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2288      	movs	r2, #136	; 0x88
    4e90:	2100      	movs	r1, #0
    4e92:	5099      	str	r1, [r3, r2]
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	229d      	movs	r2, #157	; 0x9d
    4e98:	2100      	movs	r1, #0
    4e9a:	5499      	strb	r1, [r3, r2]
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	2200      	movs	r2, #0
    4ea0:	66da      	str	r2, [r3, #108]	; 0x6c
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	228c      	movs	r2, #140	; 0x8c
    4ea6:	2100      	movs	r1, #0
    4ea8:	5099      	str	r1, [r3, r2]
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	229e      	movs	r2, #158	; 0x9e
    4eae:	2100      	movs	r1, #0
    4eb0:	5499      	strb	r1, [r3, r2]
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	2200      	movs	r2, #0
    4eb6:	671a      	str	r2, [r3, #112]	; 0x70
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	2290      	movs	r2, #144	; 0x90
    4ebc:	2100      	movs	r1, #0
    4ebe:	5099      	str	r1, [r3, r2]
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	229f      	movs	r2, #159	; 0x9f
    4ec4:	2100      	movs	r1, #0
    4ec6:	5499      	strb	r1, [r3, r2]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2200      	movs	r2, #0
    4ecc:	675a      	str	r2, [r3, #116]	; 0x74
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	2294      	movs	r2, #148	; 0x94
    4ed2:	2100      	movs	r1, #0
    4ed4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	22a0      	movs	r2, #160	; 0xa0
    4eda:	2101      	movs	r1, #1
    4edc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	22a1      	movs	r2, #161	; 0xa1
    4ee2:	2100      	movs	r1, #0
    4ee4:	5499      	strb	r1, [r3, r2]
}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	46bd      	mov	sp, r7
    4eea:	b005      	add	sp, #20
    4eec:	bd90      	pop	{r4, r7, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00004bed 	.word	0x00004bed
    4ef4:	0001c59c 	.word	0x0001c59c

00004ef8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b086      	sub	sp, #24
    4efc:	af00      	add	r7, sp, #0
    4efe:	60b9      	str	r1, [r7, #8]
    4f00:	607a      	str	r2, [r7, #4]
    4f02:	230f      	movs	r3, #15
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	1c02      	adds	r2, r0, #0
    4f08:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    4f0a:	2300      	movs	r3, #0
    4f0c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f0e:	2300      	movs	r3, #0
    4f10:	613b      	str	r3, [r7, #16]
    4f12:	e01d      	b.n	4f50 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    4f14:	68ba      	ldr	r2, [r7, #8]
    4f16:	693b      	ldr	r3, [r7, #16]
    4f18:	18d3      	adds	r3, r2, r3
    4f1a:	3310      	adds	r3, #16
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	2b01      	cmp	r3, #1
    4f20:	d113      	bne.n	4f4a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    4f22:	230f      	movs	r3, #15
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	4a1b      	ldr	r2, [pc, #108]	; (4f98 <_tcc_build_ctrla+0xa0>)
    4f2a:	5cd3      	ldrb	r3, [r2, r3]
    4f2c:	001a      	movs	r2, r3
    4f2e:	693b      	ldr	r3, [r7, #16]
    4f30:	429a      	cmp	r2, r3
    4f32:	da01      	bge.n	4f38 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    4f34:	2317      	movs	r3, #23
    4f36:	e02a      	b.n	4f8e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	045a      	lsls	r2, r3, #17
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	409a      	lsls	r2, r3
    4f40:	0013      	movs	r3, r2
    4f42:	001a      	movs	r2, r3
    4f44:	697b      	ldr	r3, [r7, #20]
    4f46:	4313      	orrs	r3, r2
    4f48:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	3301      	adds	r3, #1
    4f4e:	613b      	str	r3, [r7, #16]
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2b03      	cmp	r3, #3
    4f54:	ddde      	ble.n	4f14 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    4f56:	68bb      	ldr	r3, [r7, #8]
    4f58:	22a1      	movs	r2, #161	; 0xa1
    4f5a:	5c9b      	ldrb	r3, [r3, r2]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d004      	beq.n	4f6a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2280      	movs	r2, #128	; 0x80
    4f64:	0112      	lsls	r2, r2, #4
    4f66:	4313      	orrs	r3, r2
    4f68:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	7b1b      	ldrb	r3, [r3, #12]
    4f6e:	031b      	lsls	r3, r3, #12
    4f70:	001a      	movs	r2, r3
    4f72:	697b      	ldr	r3, [r7, #20]
    4f74:	4313      	orrs	r3, r2
    4f76:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	7adb      	ldrb	r3, [r3, #11]
    4f7c:	021b      	lsls	r3, r3, #8
    4f7e:	001a      	movs	r2, r3
    4f80:	697b      	ldr	r3, [r7, #20]
    4f82:	4313      	orrs	r3, r2
    4f84:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	697a      	ldr	r2, [r7, #20]
    4f8a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    4f8c:	2300      	movs	r3, #0
}
    4f8e:	0018      	movs	r0, r3
    4f90:	46bd      	mov	sp, r7
    4f92:	b006      	add	sp, #24
    4f94:	bd80      	pop	{r7, pc}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	0001c5a8 	.word	0x0001c5a8

00004f9c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b086      	sub	sp, #24
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	60b9      	str	r1, [r7, #8]
    4fa4:	607a      	str	r2, [r7, #4]
    4fa6:	230f      	movs	r3, #15
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	1c02      	adds	r2, r0, #0
    4fac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    4fae:	2317      	movs	r3, #23
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	2200      	movs	r2, #0
    4fb4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    4fb6:	68bb      	ldr	r3, [r7, #8]
    4fb8:	7a1b      	ldrb	r3, [r3, #8]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d007      	beq.n	4fce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4fbe:	2317      	movs	r3, #23
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	2217      	movs	r2, #23
    4fc4:	18ba      	adds	r2, r7, r2
    4fc6:	7812      	ldrb	r2, [r2, #0]
    4fc8:	2104      	movs	r1, #4
    4fca:	430a      	orrs	r2, r1
    4fcc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4fce:	68bb      	ldr	r3, [r7, #8]
    4fd0:	7a5b      	ldrb	r3, [r3, #9]
    4fd2:	2b01      	cmp	r3, #1
    4fd4:	d107      	bne.n	4fe6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    4fd6:	2317      	movs	r3, #23
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	2217      	movs	r2, #23
    4fdc:	18ba      	adds	r2, r7, r2
    4fde:	7812      	ldrb	r2, [r2, #0]
    4fe0:	2101      	movs	r1, #1
    4fe2:	430a      	orrs	r2, r1
    4fe4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	2217      	movs	r2, #23
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	7812      	ldrb	r2, [r2, #0]
    4fee:	701a      	strb	r2, [r3, #0]
}
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	46bd      	mov	sp, r7
    4ff4:	b006      	add	sp, #24
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b088      	sub	sp, #32
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	60b9      	str	r1, [r7, #8]
    5000:	607a      	str	r2, [r7, #4]
    5002:	230f      	movs	r3, #15
    5004:	18fb      	adds	r3, r7, r3
    5006:	1c02      	adds	r2, r0, #0
    5008:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    500a:	230f      	movs	r3, #15
    500c:	18fb      	adds	r3, r7, r3
    500e:	781a      	ldrb	r2, [r3, #0]
    5010:	231b      	movs	r3, #27
    5012:	18fb      	adds	r3, r7, r3
    5014:	493e      	ldr	r1, [pc, #248]	; (5110 <_tcc_build_faults+0x118>)
    5016:	5c8a      	ldrb	r2, [r1, r2]
    5018:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    501a:	2300      	movs	r3, #0
    501c:	61fb      	str	r3, [r7, #28]
    501e:	e06e      	b.n	50fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    5020:	69fa      	ldr	r2, [r7, #28]
    5022:	0013      	movs	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	189b      	adds	r3, r3, r2
    5028:	005b      	lsls	r3, r3, #1
    502a:	3328      	adds	r3, #40	; 0x28
    502c:	68ba      	ldr	r2, [r7, #8]
    502e:	18d3      	adds	r3, r2, r3
    5030:	3304      	adds	r3, #4
    5032:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	7a5b      	ldrb	r3, [r3, #9]
    5038:	221b      	movs	r2, #27
    503a:	18ba      	adds	r2, r7, r2
    503c:	7812      	ldrb	r2, [r2, #0]
    503e:	429a      	cmp	r2, r3
    5040:	d801      	bhi.n	5046 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    5042:	2317      	movs	r3, #23
    5044:	e05f      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    5046:	697b      	ldr	r3, [r7, #20]
    5048:	781b      	ldrb	r3, [r3, #0]
    504a:	2b0f      	cmp	r3, #15
    504c:	d901      	bls.n	5052 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    504e:	2317      	movs	r3, #23
    5050:	e059      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5052:	697b      	ldr	r3, [r7, #20]
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	061b      	lsls	r3, r3, #24
    5058:	001a      	movs	r2, r3
    505a:	23f0      	movs	r3, #240	; 0xf0
    505c:	051b      	lsls	r3, r3, #20
    505e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5060:	697b      	ldr	r3, [r7, #20]
    5062:	785b      	ldrb	r3, [r3, #1]
    5064:	041b      	lsls	r3, r3, #16
    5066:	0019      	movs	r1, r3
    5068:	23ff      	movs	r3, #255	; 0xff
    506a:	041b      	lsls	r3, r3, #16
    506c:	400b      	ands	r3, r1
    506e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	2b00      	cmp	r3, #0
    5076:	d001      	beq.n	507c <_tcc_build_faults+0x84>
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	e000      	b.n	507e <_tcc_build_faults+0x86>
    507c:	2300      	movs	r3, #0
    507e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5080:	697b      	ldr	r3, [r7, #20]
    5082:	78db      	ldrb	r3, [r3, #3]
    5084:	2b00      	cmp	r3, #0
    5086:	d001      	beq.n	508c <_tcc_build_faults+0x94>
    5088:	2308      	movs	r3, #8
    508a:	e000      	b.n	508e <_tcc_build_faults+0x96>
    508c:	2300      	movs	r3, #0
    508e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	791b      	ldrb	r3, [r3, #4]
    5094:	2b00      	cmp	r3, #0
    5096:	d001      	beq.n	509c <_tcc_build_faults+0xa4>
    5098:	2310      	movs	r3, #16
    509a:	e000      	b.n	509e <_tcc_build_faults+0xa6>
    509c:	2300      	movs	r3, #0
    509e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    50a0:	697b      	ldr	r3, [r7, #20]
    50a2:	795b      	ldrb	r3, [r3, #5]
    50a4:	0019      	movs	r1, r3
    50a6:	2303      	movs	r3, #3
    50a8:	400b      	ands	r3, r1
    50aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    50ac:	697b      	ldr	r3, [r7, #20]
    50ae:	799b      	ldrb	r3, [r3, #6]
    50b0:	015b      	lsls	r3, r3, #5
    50b2:	0019      	movs	r1, r3
    50b4:	2360      	movs	r3, #96	; 0x60
    50b6:	400b      	ands	r3, r1
    50b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    50ba:	697b      	ldr	r3, [r7, #20]
    50bc:	79db      	ldrb	r3, [r3, #7]
    50be:	021b      	lsls	r3, r3, #8
    50c0:	0019      	movs	r1, r3
    50c2:	23c0      	movs	r3, #192	; 0xc0
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	400b      	ands	r3, r1
    50c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    50ca:	697b      	ldr	r3, [r7, #20]
    50cc:	7a1b      	ldrb	r3, [r3, #8]
    50ce:	031b      	lsls	r3, r3, #12
    50d0:	0019      	movs	r1, r3
    50d2:	23e0      	movs	r3, #224	; 0xe0
    50d4:	01db      	lsls	r3, r3, #7
    50d6:	400b      	ands	r3, r1
    50d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    50da:	697b      	ldr	r3, [r7, #20]
    50dc:	7a5b      	ldrb	r3, [r3, #9]
    50de:	029b      	lsls	r3, r3, #10
    50e0:	0019      	movs	r1, r3
    50e2:	23c0      	movs	r3, #192	; 0xc0
    50e4:	011b      	lsls	r3, r3, #4
    50e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    50e8:	4313      	orrs	r3, r2
    50ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    50ec:	69fb      	ldr	r3, [r7, #28]
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	693a      	ldr	r2, [r7, #16]
    50f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    50f8:	69fb      	ldr	r3, [r7, #28]
    50fa:	3301      	adds	r3, #1
    50fc:	61fb      	str	r3, [r7, #28]
    50fe:	69fb      	ldr	r3, [r7, #28]
    5100:	2b01      	cmp	r3, #1
    5102:	dd8d      	ble.n	5020 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    5104:	2300      	movs	r3, #0
}
    5106:	0018      	movs	r0, r3
    5108:	46bd      	mov	sp, r7
    510a:	b008      	add	sp, #32
    510c:	bd80      	pop	{r7, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	0001c5a8 	.word	0x0001c5a8

00005114 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    5114:	b580      	push	{r7, lr}
    5116:	b088      	sub	sp, #32
    5118:	af00      	add	r7, sp, #0
    511a:	60b9      	str	r1, [r7, #8]
    511c:	607a      	str	r2, [r7, #4]
    511e:	230f      	movs	r3, #15
    5120:	18fb      	adds	r3, r7, r3
    5122:	1c02      	adds	r2, r0, #0
    5124:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5126:	230f      	movs	r3, #15
    5128:	18fb      	adds	r3, r7, r3
    512a:	781a      	ldrb	r2, [r3, #0]
    512c:	2317      	movs	r3, #23
    512e:	18fb      	adds	r3, r7, r3
    5130:	492d      	ldr	r1, [pc, #180]	; (51e8 <_tcc_build_drvctrl+0xd4>)
    5132:	5c8a      	ldrb	r2, [r1, r2]
    5134:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    5136:	2300      	movs	r3, #0
    5138:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    513a:	2300      	movs	r3, #0
    513c:	61fb      	str	r3, [r7, #28]
    513e:	e048      	b.n	51d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    5140:	68ba      	ldr	r2, [r7, #8]
    5142:	2150      	movs	r1, #80	; 0x50
    5144:	69fb      	ldr	r3, [r7, #28]
    5146:	18d3      	adds	r3, r2, r3
    5148:	185b      	adds	r3, r3, r1
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d010      	beq.n	5172 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    5150:	2317      	movs	r3, #23
    5152:	18fb      	adds	r3, r7, r3
    5154:	781a      	ldrb	r2, [r3, #0]
    5156:	69fb      	ldr	r3, [r7, #28]
    5158:	429a      	cmp	r2, r3
    515a:	d801      	bhi.n	5160 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    515c:	2317      	movs	r3, #23
    515e:	e03f      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	025a      	lsls	r2, r3, #9
    5164:	69fb      	ldr	r3, [r7, #28]
    5166:	409a      	lsls	r2, r3
    5168:	0013      	movs	r3, r2
    516a:	001a      	movs	r2, r3
    516c:	69bb      	ldr	r3, [r7, #24]
    516e:	4313      	orrs	r3, r2
    5170:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5172:	68ba      	ldr	r2, [r7, #8]
    5174:	69fb      	ldr	r3, [r7, #28]
    5176:	331c      	adds	r3, #28
    5178:	005b      	lsls	r3, r3, #1
    517a:	18d3      	adds	r3, r2, r3
    517c:	3309      	adds	r3, #9
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d023      	beq.n	51cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5184:	2317      	movs	r3, #23
    5186:	18fb      	adds	r3, r7, r3
    5188:	781a      	ldrb	r2, [r3, #0]
    518a:	69fb      	ldr	r3, [r7, #28]
    518c:	429a      	cmp	r2, r3
    518e:	d801      	bhi.n	5194 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    5190:	2317      	movs	r3, #23
    5192:	e025      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5194:	68ba      	ldr	r2, [r7, #8]
    5196:	69fb      	ldr	r3, [r7, #28]
    5198:	331c      	adds	r3, #28
    519a:	005b      	lsls	r3, r3, #1
    519c:	18d3      	adds	r3, r2, r3
    519e:	3309      	adds	r3, #9
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	2b02      	cmp	r3, #2
    51a4:	d10a      	bne.n	51bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    51a6:	2302      	movs	r3, #2
    51a8:	33ff      	adds	r3, #255	; 0xff
    51aa:	001a      	movs	r2, r3
    51ac:	69fb      	ldr	r3, [r7, #28]
    51ae:	409a      	lsls	r2, r3
    51b0:	0013      	movs	r3, r2
    51b2:	001a      	movs	r2, r3
    51b4:	69bb      	ldr	r3, [r7, #24]
    51b6:	4313      	orrs	r3, r2
    51b8:	61bb      	str	r3, [r7, #24]
    51ba:	e007      	b.n	51cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    51bc:	2201      	movs	r2, #1
    51be:	69fb      	ldr	r3, [r7, #28]
    51c0:	409a      	lsls	r2, r3
    51c2:	0013      	movs	r3, r2
    51c4:	001a      	movs	r2, r3
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	4313      	orrs	r3, r2
    51ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    51cc:	69fb      	ldr	r3, [r7, #28]
    51ce:	3301      	adds	r3, #1
    51d0:	61fb      	str	r3, [r7, #28]
    51d2:	69fb      	ldr	r3, [r7, #28]
    51d4:	2b07      	cmp	r3, #7
    51d6:	d9b3      	bls.n	5140 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	69ba      	ldr	r2, [r7, #24]
    51dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    51de:	2300      	movs	r3, #0
}
    51e0:	0018      	movs	r0, r3
    51e2:	46bd      	mov	sp, r7
    51e4:	b008      	add	sp, #32
    51e6:	bd80      	pop	{r7, pc}
    51e8:	0001c5ac 	.word	0x0001c5ac

000051ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    51ec:	b580      	push	{r7, lr}
    51ee:	b088      	sub	sp, #32
    51f0:	af00      	add	r7, sp, #0
    51f2:	60b9      	str	r1, [r7, #8]
    51f4:	607a      	str	r2, [r7, #4]
    51f6:	230f      	movs	r3, #15
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	1c02      	adds	r2, r0, #0
    51fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    51fe:	230f      	movs	r3, #15
    5200:	18fb      	adds	r3, r7, r3
    5202:	781a      	ldrb	r2, [r3, #0]
    5204:	2317      	movs	r3, #23
    5206:	18fb      	adds	r3, r7, r3
    5208:	491d      	ldr	r1, [pc, #116]	; (5280 <_tcc_build_waves+0x94>)
    520a:	5c8a      	ldrb	r2, [r1, r2]
    520c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	3310      	adds	r3, #16
    5212:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5214:	693b      	ldr	r3, [r7, #16]
    5216:	7a5b      	ldrb	r3, [r3, #9]
    5218:	011b      	lsls	r3, r3, #4
    521a:	001a      	movs	r2, r3
    521c:	2330      	movs	r3, #48	; 0x30
    521e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5220:	693b      	ldr	r3, [r7, #16]
    5222:	7a1b      	ldrb	r3, [r3, #8]
    5224:	0019      	movs	r1, r3
    5226:	2307      	movs	r3, #7
    5228:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    522a:	4313      	orrs	r3, r2
    522c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    522e:	2300      	movs	r3, #0
    5230:	61fb      	str	r3, [r7, #28]
    5232:	e01a      	b.n	526a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    5234:	693a      	ldr	r2, [r7, #16]
    5236:	69fb      	ldr	r3, [r7, #28]
    5238:	18d3      	adds	r3, r2, r3
    523a:	3304      	adds	r3, #4
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d010      	beq.n	5264 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    5242:	2317      	movs	r3, #23
    5244:	18fb      	adds	r3, r7, r3
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	69fb      	ldr	r3, [r7, #28]
    524a:	429a      	cmp	r2, r3
    524c:	dc01      	bgt.n	5252 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    524e:	2317      	movs	r3, #23
    5250:	e012      	b.n	5278 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    5252:	2380      	movs	r3, #128	; 0x80
    5254:	025a      	lsls	r2, r3, #9
    5256:	69fb      	ldr	r3, [r7, #28]
    5258:	409a      	lsls	r2, r3
    525a:	0013      	movs	r3, r2
    525c:	001a      	movs	r2, r3
    525e:	69bb      	ldr	r3, [r7, #24]
    5260:	4313      	orrs	r3, r2
    5262:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5264:	69fb      	ldr	r3, [r7, #28]
    5266:	3301      	adds	r3, #1
    5268:	61fb      	str	r3, [r7, #28]
    526a:	69fb      	ldr	r3, [r7, #28]
    526c:	2b03      	cmp	r3, #3
    526e:	dde1      	ble.n	5234 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	69ba      	ldr	r2, [r7, #24]
    5274:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    5276:	2300      	movs	r3, #0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b008      	add	sp, #32
    527e:	bd80      	pop	{r7, pc}
    5280:	0001c5a8 	.word	0x0001c5a8

00005284 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5284:	b590      	push	{r4, r7, lr}
    5286:	b091      	sub	sp, #68	; 0x44
    5288:	af00      	add	r7, sp, #0
    528a:	60f8      	str	r0, [r7, #12]
    528c:	60b9      	str	r1, [r7, #8]
    528e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5290:	233b      	movs	r3, #59	; 0x3b
    5292:	18fc      	adds	r4, r7, r3
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	0018      	movs	r0, r3
    5298:	4bc4      	ldr	r3, [pc, #784]	; (55ac <tcc_init+0x328>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    52a0:	233b      	movs	r3, #59	; 0x3b
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	781a      	ldrb	r2, [r3, #0]
    52a6:	4bc2      	ldr	r3, [pc, #776]	; (55b0 <tcc_init+0x32c>)
    52a8:	0092      	lsls	r2, r2, #2
    52aa:	58d3      	ldr	r3, [r2, r3]
    52ac:	0019      	movs	r1, r3
    52ae:	2002      	movs	r0, #2
    52b0:	4bc0      	ldr	r3, [pc, #768]	; (55b4 <tcc_init+0x330>)
    52b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52b4:	68bb      	ldr	r3, [r7, #8]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2202      	movs	r2, #2
    52ba:	4013      	ands	r3, r2
    52bc:	d001      	beq.n	52c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    52be:	231c      	movs	r3, #28
    52c0:	e1be      	b.n	5640 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2201      	movs	r2, #1
    52c8:	4013      	ands	r3, r2
    52ca:	d001      	beq.n	52d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    52cc:	231c      	movs	r3, #28
    52ce:	e1b7      	b.n	5640 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    52d0:	233b      	movs	r3, #59	; 0x3b
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	4bb8      	ldr	r3, [pc, #736]	; (55b8 <tcc_init+0x334>)
    52d8:	0092      	lsls	r2, r2, #2
    52da:	58d3      	ldr	r3, [r2, r3]
    52dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52e4:	429a      	cmp	r2, r3
    52e6:	d804      	bhi.n	52f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ee:	429a      	cmp	r2, r3
    52f0:	d901      	bls.n	52f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    52f2:	2317      	movs	r3, #23
    52f4:	e1a4      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    52f6:	2300      	movs	r3, #0
    52f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    52fa:	e00e      	b.n	531a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    52fc:	687a      	ldr	r2, [r7, #4]
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	3306      	adds	r3, #6
    5302:	009b      	lsls	r3, r3, #2
    5304:	18d3      	adds	r3, r2, r3
    5306:	3304      	adds	r3, #4
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    530c:	429a      	cmp	r2, r3
    530e:	d901      	bls.n	5314 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    5310:	2317      	movs	r3, #23
    5312:	e195      	b.n	5640 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5316:	3301      	adds	r3, #1
    5318:	63fb      	str	r3, [r7, #60]	; 0x3c
    531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    531c:	2b03      	cmp	r3, #3
    531e:	dded      	ble.n	52fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5320:	2300      	movs	r3, #0
    5322:	63fb      	str	r3, [r7, #60]	; 0x3c
    5324:	e019      	b.n	535a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	2198      	movs	r1, #152	; 0x98
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	18d3      	adds	r3, r2, r3
    532e:	185b      	adds	r3, r3, r1
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2201      	movs	r2, #1
    5334:	4053      	eors	r3, r2
    5336:	b2db      	uxtb	r3, r3
    5338:	2b00      	cmp	r3, #0
    533a:	d10a      	bne.n	5352 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    533c:	233b      	movs	r3, #59	; 0x3b
    533e:	18fb      	adds	r3, r7, r3
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	4a9e      	ldr	r2, [pc, #632]	; (55bc <tcc_init+0x338>)
    5344:	5cd3      	ldrb	r3, [r2, r3]
    5346:	001a      	movs	r2, r3
    5348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    534a:	429a      	cmp	r2, r3
    534c:	dc02      	bgt.n	5354 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    534e:	2317      	movs	r3, #23
    5350:	e176      	b.n	5640 <tcc_init+0x3bc>
			continue;
    5352:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5356:	3301      	adds	r3, #1
    5358:	63fb      	str	r3, [r7, #60]	; 0x3c
    535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    535c:	2b07      	cmp	r3, #7
    535e:	dde2      	ble.n	5326 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    5360:	2300      	movs	r3, #0
    5362:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    5364:	2333      	movs	r3, #51	; 0x33
    5366:	18fc      	adds	r4, r7, r3
    5368:	232c      	movs	r3, #44	; 0x2c
    536a:	18fa      	adds	r2, r7, r3
    536c:	6879      	ldr	r1, [r7, #4]
    536e:	233b      	movs	r3, #59	; 0x3b
    5370:	18fb      	adds	r3, r7, r3
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	0018      	movs	r0, r3
    5376:	4b92      	ldr	r3, [pc, #584]	; (55c0 <tcc_init+0x33c>)
    5378:	4798      	blx	r3
    537a:	0003      	movs	r3, r0
    537c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    537e:	2333      	movs	r3, #51	; 0x33
    5380:	18fb      	adds	r3, r7, r3
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	d003      	beq.n	5390 <tcc_init+0x10c>
		return status;
    5388:	2333      	movs	r3, #51	; 0x33
    538a:	18fb      	adds	r3, r7, r3
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	e157      	b.n	5640 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    5390:	232b      	movs	r3, #43	; 0x2b
    5392:	18fa      	adds	r2, r7, r3
    5394:	6879      	ldr	r1, [r7, #4]
    5396:	233b      	movs	r3, #59	; 0x3b
    5398:	18fb      	adds	r3, r7, r3
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	0018      	movs	r0, r3
    539e:	4b89      	ldr	r3, [pc, #548]	; (55c4 <tcc_init+0x340>)
    53a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    53a2:	2333      	movs	r3, #51	; 0x33
    53a4:	18fc      	adds	r4, r7, r3
    53a6:	2320      	movs	r3, #32
    53a8:	18fa      	adds	r2, r7, r3
    53aa:	6879      	ldr	r1, [r7, #4]
    53ac:	233b      	movs	r3, #59	; 0x3b
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	0018      	movs	r0, r3
    53b4:	4b84      	ldr	r3, [pc, #528]	; (55c8 <tcc_init+0x344>)
    53b6:	4798      	blx	r3
    53b8:	0003      	movs	r3, r0
    53ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53bc:	2333      	movs	r3, #51	; 0x33
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <tcc_init+0x14a>
		return status;
    53c6:	2333      	movs	r3, #51	; 0x33
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	e138      	b.n	5640 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    53ce:	2300      	movs	r3, #0
    53d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    53d2:	2333      	movs	r3, #51	; 0x33
    53d4:	18fc      	adds	r4, r7, r3
    53d6:	231c      	movs	r3, #28
    53d8:	18fa      	adds	r2, r7, r3
    53da:	6879      	ldr	r1, [r7, #4]
    53dc:	233b      	movs	r3, #59	; 0x3b
    53de:	18fb      	adds	r3, r7, r3
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	0018      	movs	r0, r3
    53e4:	4b79      	ldr	r3, [pc, #484]	; (55cc <tcc_init+0x348>)
    53e6:	4798      	blx	r3
    53e8:	0003      	movs	r3, r0
    53ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53ec:	2333      	movs	r3, #51	; 0x33
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d003      	beq.n	53fe <tcc_init+0x17a>
		return status;
    53f6:	2333      	movs	r3, #51	; 0x33
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	e120      	b.n	5640 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    53fe:	2333      	movs	r3, #51	; 0x33
    5400:	18fc      	adds	r4, r7, r3
    5402:	2318      	movs	r3, #24
    5404:	18fa      	adds	r2, r7, r3
    5406:	6879      	ldr	r1, [r7, #4]
    5408:	233b      	movs	r3, #59	; 0x3b
    540a:	18fb      	adds	r3, r7, r3
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	0018      	movs	r0, r3
    5410:	4b6f      	ldr	r3, [pc, #444]	; (55d0 <tcc_init+0x34c>)
    5412:	4798      	blx	r3
    5414:	0003      	movs	r3, r0
    5416:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    5418:	2333      	movs	r3, #51	; 0x33
    541a:	18fb      	adds	r3, r7, r3
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d003      	beq.n	542a <tcc_init+0x1a6>
		return status;
    5422:	2333      	movs	r3, #51	; 0x33
    5424:	18fb      	adds	r3, r7, r3
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	e10a      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    542a:	2300      	movs	r3, #0
    542c:	63fb      	str	r3, [r7, #60]	; 0x3c
    542e:	e009      	b.n	5444 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    5430:	68fa      	ldr	r2, [r7, #12]
    5432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5434:	009b      	lsls	r3, r3, #2
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
    543a:	2200      	movs	r2, #0
    543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5440:	3301      	adds	r3, #1
    5442:	63fb      	str	r3, [r7, #60]	; 0x3c
    5444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5446:	2b0b      	cmp	r3, #11
    5448:	ddf2      	ble.n	5430 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    544a:	68fb      	ldr	r3, [r7, #12]
    544c:	2200      	movs	r2, #0
    544e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	2200      	movs	r2, #0
    5454:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5456:	233b      	movs	r3, #59	; 0x3b
    5458:	18fb      	adds	r3, r7, r3
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	4b5d      	ldr	r3, [pc, #372]	; (55d4 <tcc_init+0x350>)
    545e:	0092      	lsls	r2, r2, #2
    5460:	68f9      	ldr	r1, [r7, #12]
    5462:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	68ba      	ldr	r2, [r7, #8]
    5468:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	22a0      	movs	r2, #160	; 0xa0
    546e:	5c99      	ldrb	r1, [r3, r2]
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	223c      	movs	r2, #60	; 0x3c
    5474:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5476:	2314      	movs	r3, #20
    5478:	18fb      	adds	r3, r7, r3
    547a:	0018      	movs	r0, r3
    547c:	4b56      	ldr	r3, [pc, #344]	; (55d8 <tcc_init+0x354>)
    547e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	7a9a      	ldrb	r2, [r3, #10]
    5484:	2314      	movs	r3, #20
    5486:	18fb      	adds	r3, r7, r3
    5488:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    548a:	233b      	movs	r3, #59	; 0x3b
    548c:	18fb      	adds	r3, r7, r3
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	4a52      	ldr	r2, [pc, #328]	; (55dc <tcc_init+0x358>)
    5492:	5cd3      	ldrb	r3, [r2, r3]
    5494:	2214      	movs	r2, #20
    5496:	18ba      	adds	r2, r7, r2
    5498:	0011      	movs	r1, r2
    549a:	0018      	movs	r0, r3
    549c:	4b50      	ldr	r3, [pc, #320]	; (55e0 <tcc_init+0x35c>)
    549e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    54a0:	233b      	movs	r3, #59	; 0x3b
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	4a4d      	ldr	r2, [pc, #308]	; (55dc <tcc_init+0x358>)
    54a8:	5cd3      	ldrb	r3, [r2, r3]
    54aa:	0018      	movs	r0, r3
    54ac:	4b4d      	ldr	r3, [pc, #308]	; (55e4 <tcc_init+0x360>)
    54ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    54b0:	2300      	movs	r3, #0
    54b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    54b4:	e02d      	b.n	5512 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    54b6:	687a      	ldr	r2, [r7, #4]
    54b8:	2198      	movs	r1, #152	; 0x98
    54ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54bc:	18d3      	adds	r3, r2, r3
    54be:	185b      	adds	r3, r3, r1
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	2201      	movs	r2, #1
    54c4:	4053      	eors	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	2b00      	cmp	r3, #0
    54ca:	d11e      	bne.n	550a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    54cc:	2310      	movs	r3, #16
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	0018      	movs	r0, r3
    54d2:	4b45      	ldr	r3, [pc, #276]	; (55e8 <tcc_init+0x364>)
    54d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54da:	321e      	adds	r2, #30
    54dc:	0092      	lsls	r2, r2, #2
    54de:	58d3      	ldr	r3, [r2, r3]
    54e0:	b2da      	uxtb	r2, r3
    54e2:	2310      	movs	r3, #16
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54e8:	2310      	movs	r3, #16
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	2201      	movs	r2, #1
    54ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f4:	3216      	adds	r2, #22
    54f6:	0092      	lsls	r2, r2, #2
    54f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2210      	movs	r2, #16
    54fe:	18ba      	adds	r2, r7, r2
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b39      	ldr	r3, [pc, #228]	; (55ec <tcc_init+0x368>)
    5506:	4798      	blx	r3
    5508:	e000      	b.n	550c <tcc_init+0x288>
			continue;
    550a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    550e:	3301      	adds	r3, #1
    5510:	63fb      	str	r3, [r7, #60]	; 0x3c
    5512:	233b      	movs	r3, #59	; 0x3b
    5514:	18fb      	adds	r3, r7, r3
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	4a28      	ldr	r2, [pc, #160]	; (55bc <tcc_init+0x338>)
    551a:	5cd3      	ldrb	r3, [r2, r3]
    551c:	001a      	movs	r2, r3
    551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5520:	429a      	cmp	r2, r3
    5522:	dcc8      	bgt.n	54b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    5524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	68bb      	ldr	r3, [r7, #8]
    552e:	689b      	ldr	r3, [r3, #8]
    5530:	2204      	movs	r2, #4
    5532:	4013      	ands	r3, r2
    5534:	d1fa      	bne.n	552c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    5536:	68bb      	ldr	r3, [r7, #8]
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    553c:	46c0      	nop			; (mov r8, r8)
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	689b      	ldr	r3, [r3, #8]
    5542:	2204      	movs	r2, #4
    5544:	4013      	ands	r3, r2
    5546:	d1fa      	bne.n	553e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    5548:	232b      	movs	r3, #43	; 0x2b
    554a:	18fb      	adds	r3, r7, r3
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    5552:	2320      	movs	r3, #32
    5554:	18fb      	adds	r3, r7, r3
    5556:	681a      	ldr	r2, [r3, #0]
    5558:	68bb      	ldr	r3, [r7, #8]
    555a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    555c:	2320      	movs	r3, #32
    555e:	18fb      	adds	r3, r7, r3
    5560:	685a      	ldr	r2, [r3, #4]
    5562:	68bb      	ldr	r3, [r7, #8]
    5564:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    5566:	69fa      	ldr	r2, [r7, #28]
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    556c:	46c0      	nop			; (mov r8, r8)
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	689b      	ldr	r3, [r3, #8]
    5572:	4a1f      	ldr	r2, [pc, #124]	; (55f0 <tcc_init+0x36c>)
    5574:	4013      	ands	r3, r2
    5576:	d1fa      	bne.n	556e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    5578:	69ba      	ldr	r2, [r7, #24]
    557a:	68bb      	ldr	r3, [r7, #8]
    557c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	68bb      	ldr	r3, [r7, #8]
    5582:	689b      	ldr	r3, [r3, #8]
    5584:	2210      	movs	r2, #16
    5586:	4013      	ands	r3, r2
    5588:	d1fa      	bne.n	5580 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	689b      	ldr	r3, [r3, #8]
    5598:	4a16      	ldr	r2, [pc, #88]	; (55f4 <tcc_init+0x370>)
    559a:	4013      	ands	r3, r2
    559c:	d1fa      	bne.n	5594 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685a      	ldr	r2, [r3, #4]
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    55a6:	2300      	movs	r3, #0
    55a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    55aa:	e03f      	b.n	562c <tcc_init+0x3a8>
    55ac:	00004bed 	.word	0x00004bed
    55b0:	0001c590 	.word	0x0001c590
    55b4:	00004b69 	.word	0x00004b69
    55b8:	0001c59c 	.word	0x0001c59c
    55bc:	0001c5ac 	.word	0x0001c5ac
    55c0:	00004ef9 	.word	0x00004ef9
    55c4:	00004f9d 	.word	0x00004f9d
    55c8:	00004ff9 	.word	0x00004ff9
    55cc:	00005115 	.word	0x00005115
    55d0:	000051ed 	.word	0x000051ed
    55d4:	20000510 	.word	0x20000510
    55d8:	00004b51 	.word	0x00004b51
    55dc:	0001c58c 	.word	0x0001c58c
    55e0:	000085ed 	.word	0x000085ed
    55e4:	00008631 	.word	0x00008631
    55e8:	00004bc5 	.word	0x00004bc5
    55ec:	000088d9 	.word	0x000088d9
    55f0:	00020040 	.word	0x00020040
    55f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    55f8:	46c0      	nop			; (mov r8, r8)
    55fa:	68bb      	ldr	r3, [r7, #8]
    55fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    55fe:	4912      	ldr	r1, [pc, #72]	; (5648 <tcc_init+0x3c4>)
    5600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5602:	4091      	lsls	r1, r2
    5604:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    5606:	4013      	ands	r3, r2
    5608:	d1f7      	bne.n	55fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    560e:	3306      	adds	r3, #6
    5610:	009b      	lsls	r3, r3, #2
    5612:	18d3      	adds	r3, r2, r3
    5614:	3304      	adds	r3, #4
    5616:	681a      	ldr	r2, [r3, #0]
    5618:	68b9      	ldr	r1, [r7, #8]
    561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    561c:	3310      	adds	r3, #16
    561e:	009b      	lsls	r3, r3, #2
    5620:	18cb      	adds	r3, r1, r3
    5622:	3304      	adds	r3, #4
    5624:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5628:	3301      	adds	r3, #1
    562a:	63fb      	str	r3, [r7, #60]	; 0x3c
    562c:	233b      	movs	r3, #59	; 0x3b
    562e:	18fb      	adds	r3, r7, r3
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	4a06      	ldr	r2, [pc, #24]	; (564c <tcc_init+0x3c8>)
    5634:	5cd3      	ldrb	r3, [r2, r3]
    5636:	001a      	movs	r2, r3
    5638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    563a:	429a      	cmp	r2, r3
    563c:	dcdc      	bgt.n	55f8 <tcc_init+0x374>
	}

	return STATUS_OK;
    563e:	2300      	movs	r3, #0
}
    5640:	0018      	movs	r0, r3
    5642:	46bd      	mov	sp, r7
    5644:	b011      	add	sp, #68	; 0x44
    5646:	bd90      	pop	{r4, r7, pc}
    5648:	00080100 	.word	0x00080100
    564c:	0001c5a8 	.word	0x0001c5a8

00005650 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    5650:	b590      	push	{r4, r7, lr}
    5652:	b089      	sub	sp, #36	; 0x24
    5654:	af00      	add	r7, sp, #0
    5656:	60f8      	str	r0, [r7, #12]
    5658:	0008      	movs	r0, r1
    565a:	607a      	str	r2, [r7, #4]
    565c:	0019      	movs	r1, r3
    565e:	230b      	movs	r3, #11
    5660:	18fb      	adds	r3, r7, r3
    5662:	1c02      	adds	r2, r0, #0
    5664:	701a      	strb	r2, [r3, #0]
    5666:	230a      	movs	r3, #10
    5668:	18fb      	adds	r3, r7, r3
    566a:	1c0a      	adds	r2, r1, #0
    566c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    5674:	231b      	movs	r3, #27
    5676:	18fc      	adds	r4, r7, r3
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	0018      	movs	r0, r3
    567c:	4b28      	ldr	r3, [pc, #160]	; (5720 <_tcc_set_compare_value+0xd0>)
    567e:	4798      	blx	r3
    5680:	0003      	movs	r3, r0
    5682:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    5684:	231b      	movs	r3, #27
    5686:	18fb      	adds	r3, r7, r3
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	4a26      	ldr	r2, [pc, #152]	; (5724 <_tcc_set_compare_value+0xd4>)
    568c:	5cd3      	ldrb	r3, [r2, r3]
    568e:	220b      	movs	r2, #11
    5690:	18ba      	adds	r2, r7, r2
    5692:	7812      	ldrb	r2, [r2, #0]
    5694:	429a      	cmp	r2, r3
    5696:	d301      	bcc.n	569c <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    5698:	2317      	movs	r3, #23
    569a:	e03d      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    569c:	231b      	movs	r3, #27
    569e:	18fb      	adds	r3, r7, r3
    56a0:	781a      	ldrb	r2, [r3, #0]
    56a2:	4b21      	ldr	r3, [pc, #132]	; (5728 <_tcc_set_compare_value+0xd8>)
    56a4:	0092      	lsls	r2, r2, #2
    56a6:	58d3      	ldr	r3, [r2, r3]
    56a8:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	697b      	ldr	r3, [r7, #20]
    56ae:	429a      	cmp	r2, r3
    56b0:	d901      	bls.n	56b6 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    56b2:	2317      	movs	r3, #23
    56b4:	e030      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    56b6:	230a      	movs	r3, #10
    56b8:	18fb      	adds	r3, r7, r3
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d014      	beq.n	56ea <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    56c0:	46c0      	nop			; (mov r8, r8)
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    56c6:	220b      	movs	r2, #11
    56c8:	18ba      	adds	r2, r7, r2
    56ca:	7812      	ldrb	r2, [r2, #0]
    56cc:	2180      	movs	r1, #128	; 0x80
    56ce:	0309      	lsls	r1, r1, #12
    56d0:	4091      	lsls	r1, r2
    56d2:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
    56d4:	4013      	ands	r3, r2
    56d6:	d1f4      	bne.n	56c2 <_tcc_set_compare_value+0x72>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    56d8:	230b      	movs	r3, #11
    56da:	18fb      	adds	r3, r7, r3
    56dc:	781a      	ldrb	r2, [r3, #0]
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	321c      	adds	r2, #28
    56e2:	0092      	lsls	r2, r2, #2
    56e4:	6879      	ldr	r1, [r7, #4]
    56e6:	50d1      	str	r1, [r2, r3]
    56e8:	e015      	b.n	5716 <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	69fb      	ldr	r3, [r7, #28]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	220b      	movs	r2, #11
    56f2:	18ba      	adds	r2, r7, r2
    56f4:	7812      	ldrb	r2, [r2, #0]
    56f6:	2180      	movs	r1, #128	; 0x80
    56f8:	0049      	lsls	r1, r1, #1
    56fa:	4091      	lsls	r1, r2
    56fc:	000a      	movs	r2, r1
    56fe:	4013      	ands	r3, r2
    5700:	d1f4      	bne.n	56ec <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    5702:	230b      	movs	r3, #11
    5704:	18fb      	adds	r3, r7, r3
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	69fa      	ldr	r2, [r7, #28]
    570a:	3310      	adds	r3, #16
    570c:	009b      	lsls	r3, r3, #2
    570e:	18d3      	adds	r3, r2, r3
    5710:	3304      	adds	r3, #4
    5712:	687a      	ldr	r2, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    5716:	2300      	movs	r3, #0
}
    5718:	0018      	movs	r0, r3
    571a:	46bd      	mov	sp, r7
    571c:	b009      	add	sp, #36	; 0x24
    571e:	bd90      	pop	{r4, r7, pc}
    5720:	00004bed 	.word	0x00004bed
    5724:	0001c5a8 	.word	0x0001c5a8
    5728:	0001c59c 	.word	0x0001c59c

0000572c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    572c:	b590      	push	{r4, r7, lr}
    572e:	b085      	sub	sp, #20
    5730:	af00      	add	r7, sp, #0
    5732:	60f8      	str	r0, [r7, #12]
    5734:	607a      	str	r2, [r7, #4]
    5736:	230b      	movs	r3, #11
    5738:	18fb      	adds	r3, r7, r3
    573a:	1c0a      	adds	r2, r1, #0
    573c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	223c      	movs	r2, #60	; 0x3c
    5742:	5c9c      	ldrb	r4, [r3, r2]
    5744:	687a      	ldr	r2, [r7, #4]
    5746:	230b      	movs	r3, #11
    5748:	18fb      	adds	r3, r7, r3
    574a:	7819      	ldrb	r1, [r3, #0]
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	0023      	movs	r3, r4
    5750:	4c03      	ldr	r4, [pc, #12]	; (5760 <tcc_set_compare_value+0x34>)
    5752:	47a0      	blx	r4
    5754:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    5756:	0018      	movs	r0, r3
    5758:	46bd      	mov	sp, r7
    575a:	b005      	add	sp, #20
    575c:	bd90      	pop	{r4, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	00005651 	.word	0x00005651

00005764 <system_gclk_chan_get_config_defaults>:
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	2200      	movs	r2, #0
    5770:	701a      	strb	r2, [r3, #0]
}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	46bd      	mov	sp, r7
    5776:	b002      	add	sp, #8
    5778:	bd80      	pop	{r7, pc}
	...

0000577c <system_apb_clock_set_mask>:
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	0002      	movs	r2, r0
    5784:	6039      	str	r1, [r7, #0]
    5786:	1dfb      	adds	r3, r7, #7
    5788:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    578a:	1dfb      	adds	r3, r7, #7
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	2b01      	cmp	r3, #1
    5790:	d00a      	beq.n	57a8 <system_apb_clock_set_mask+0x2c>
    5792:	2b02      	cmp	r3, #2
    5794:	d00f      	beq.n	57b6 <system_apb_clock_set_mask+0x3a>
    5796:	2b00      	cmp	r3, #0
    5798:	d114      	bne.n	57c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579c:	4a0d      	ldr	r2, [pc, #52]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579e:	6991      	ldr	r1, [r2, #24]
    57a0:	683a      	ldr	r2, [r7, #0]
    57a2:	430a      	orrs	r2, r1
    57a4:	619a      	str	r2, [r3, #24]
			break;
    57a6:	e00f      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57aa:	4a0a      	ldr	r2, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ac:	69d1      	ldr	r1, [r2, #28]
    57ae:	683a      	ldr	r2, [r7, #0]
    57b0:	430a      	orrs	r2, r1
    57b2:	61da      	str	r2, [r3, #28]
			break;
    57b4:	e008      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    57b6:	4b07      	ldr	r3, [pc, #28]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57b8:	4a06      	ldr	r2, [pc, #24]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ba:	6a11      	ldr	r1, [r2, #32]
    57bc:	683a      	ldr	r2, [r7, #0]
    57be:	430a      	orrs	r2, r1
    57c0:	621a      	str	r2, [r3, #32]
			break;
    57c2:	e001      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    57c4:	2317      	movs	r3, #23
    57c6:	e000      	b.n	57ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    57c8:	2300      	movs	r3, #0
}
    57ca:	0018      	movs	r0, r3
    57cc:	46bd      	mov	sp, r7
    57ce:	b002      	add	sp, #8
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	40000400 	.word	0x40000400

000057d8 <system_pinmux_get_config_defaults>:
{
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2280      	movs	r2, #128	; 0x80
    57e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2200      	movs	r2, #0
    57ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	2201      	movs	r2, #1
    57f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	2200      	movs	r2, #0
    57f6:	70da      	strb	r2, [r3, #3]
}
    57f8:	46c0      	nop			; (mov r8, r8)
    57fa:	46bd      	mov	sp, r7
    57fc:	b002      	add	sp, #8
    57fe:	bd80      	pop	{r7, pc}

00005800 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5800:	b580      	push	{r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	7bdb      	ldrb	r3, [r3, #15]
    5812:	b2db      	uxtb	r3, r3
    5814:	001a      	movs	r2, r3
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	4013      	ands	r3, r2
    581a:	1e5a      	subs	r2, r3, #1
    581c:	4193      	sbcs	r3, r2
    581e:	b2db      	uxtb	r3, r3
#endif
}
    5820:	0018      	movs	r0, r3
    5822:	46bd      	mov	sp, r7
    5824:	b004      	add	sp, #16
    5826:	bd80      	pop	{r7, pc}

00005828 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5828:	b590      	push	{r4, r7, lr}
    582a:	b087      	sub	sp, #28
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5830:	2308      	movs	r3, #8
    5832:	18fb      	adds	r3, r7, r3
    5834:	4a0d      	ldr	r2, [pc, #52]	; (586c <_tc_get_inst_index+0x44>)
    5836:	ca13      	ldmia	r2!, {r0, r1, r4}
    5838:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    583a:	2300      	movs	r3, #0
    583c:	617b      	str	r3, [r7, #20]
    583e:	e00d      	b.n	585c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    5840:	2308      	movs	r3, #8
    5842:	18fb      	adds	r3, r7, r3
    5844:	697a      	ldr	r2, [r7, #20]
    5846:	0092      	lsls	r2, r2, #2
    5848:	58d2      	ldr	r2, [r2, r3]
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	429a      	cmp	r2, r3
    584e:	d102      	bne.n	5856 <_tc_get_inst_index+0x2e>
			return i;
    5850:	697b      	ldr	r3, [r7, #20]
    5852:	b2db      	uxtb	r3, r3
    5854:	e006      	b.n	5864 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5856:	697b      	ldr	r3, [r7, #20]
    5858:	3301      	adds	r3, #1
    585a:	617b      	str	r3, [r7, #20]
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2b02      	cmp	r3, #2
    5860:	d9ee      	bls.n	5840 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5862:	2300      	movs	r3, #0
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b007      	add	sp, #28
    586a:	bd90      	pop	{r4, r7, pc}
    586c:	0001c5b0 	.word	0x0001c5b0

00005870 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5870:	b590      	push	{r4, r7, lr}
    5872:	b08d      	sub	sp, #52	; 0x34
    5874:	af00      	add	r7, sp, #0
    5876:	60f8      	str	r0, [r7, #12]
    5878:	60b9      	str	r1, [r7, #8]
    587a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    587c:	232e      	movs	r3, #46	; 0x2e
    587e:	18fb      	adds	r3, r7, r3
    5880:	2200      	movs	r2, #0
    5882:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5884:	232d      	movs	r3, #45	; 0x2d
    5886:	18fb      	adds	r3, r7, r3
    5888:	2200      	movs	r2, #0
    588a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    588c:	232c      	movs	r3, #44	; 0x2c
    588e:	18fb      	adds	r3, r7, r3
    5890:	2200      	movs	r2, #0
    5892:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5894:	2329      	movs	r3, #41	; 0x29
    5896:	18fc      	adds	r4, r7, r3
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	0018      	movs	r0, r3
    589c:	4bbd      	ldr	r3, [pc, #756]	; (5b94 <tc_init+0x324>)
    589e:	4798      	blx	r3
    58a0:	0003      	movs	r3, r0
    58a2:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    58a4:	2324      	movs	r3, #36	; 0x24
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	4abb      	ldr	r2, [pc, #748]	; (5b98 <tc_init+0x328>)
    58aa:	8811      	ldrh	r1, [r2, #0]
    58ac:	8019      	strh	r1, [r3, #0]
    58ae:	7892      	ldrb	r2, [r2, #2]
    58b0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    58b2:	231c      	movs	r3, #28
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	4ab9      	ldr	r2, [pc, #740]	; (5b9c <tc_init+0x32c>)
    58b8:	6811      	ldr	r1, [r2, #0]
    58ba:	6019      	str	r1, [r3, #0]
    58bc:	8892      	ldrh	r2, [r2, #4]
    58be:	809a      	strh	r2, [r3, #4]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58c0:	232b      	movs	r3, #43	; 0x2b
    58c2:	18fb      	adds	r3, r7, r3
    58c4:	2200      	movs	r2, #0
    58c6:	701a      	strb	r2, [r3, #0]
    58c8:	e00e      	b.n	58e8 <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    58ca:	232b      	movs	r3, #43	; 0x2b
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	781a      	ldrb	r2, [r3, #0]
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	3202      	adds	r2, #2
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	2100      	movs	r1, #0
    58d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58da:	232b      	movs	r3, #43	; 0x2b
    58dc:	18fb      	adds	r3, r7, r3
    58de:	781a      	ldrb	r2, [r3, #0]
    58e0:	232b      	movs	r3, #43	; 0x2b
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	3201      	adds	r2, #1
    58e6:	701a      	strb	r2, [r3, #0]
    58e8:	232b      	movs	r3, #43	; 0x2b
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	2b03      	cmp	r3, #3
    58f0:	d9eb      	bls.n	58ca <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	2200      	movs	r2, #0
    58f6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	2200      	movs	r2, #0
    58fc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    58fe:	2329      	movs	r3, #41	; 0x29
    5900:	18fb      	adds	r3, r7, r3
    5902:	781a      	ldrb	r2, [r3, #0]
    5904:	4ba6      	ldr	r3, [pc, #664]	; (5ba0 <tc_init+0x330>)
    5906:	0092      	lsls	r2, r2, #2
    5908:	68f9      	ldr	r1, [r7, #12]
    590a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	68ba      	ldr	r2, [r7, #8]
    5910:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	789b      	ldrb	r3, [r3, #2]
    5916:	2b08      	cmp	r3, #8
    5918:	d108      	bne.n	592c <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    591a:	2329      	movs	r3, #41	; 0x29
    591c:	18fb      	adds	r3, r7, r3
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	3303      	adds	r3, #3
    5922:	2201      	movs	r2, #1
    5924:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5926:	d001      	beq.n	592c <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5928:	2317      	movs	r3, #23
    592a:	e1c2      	b.n	5cb2 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	789a      	ldrb	r2, [r3, #2]
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5934:	68bb      	ldr	r3, [r7, #8]
    5936:	881b      	ldrh	r3, [r3, #0]
    5938:	b29b      	uxth	r3, r3
    593a:	001a      	movs	r2, r3
    593c:	2301      	movs	r3, #1
    593e:	4013      	ands	r3, r2
    5940:	d001      	beq.n	5946 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5942:	2305      	movs	r3, #5
    5944:	e1b5      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5946:	68bb      	ldr	r3, [r7, #8]
    5948:	7bdb      	ldrb	r3, [r3, #15]
    594a:	b2db      	uxtb	r3, r3
    594c:	001a      	movs	r2, r3
    594e:	2310      	movs	r3, #16
    5950:	4013      	ands	r3, r2
    5952:	d001      	beq.n	5958 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5954:	231c      	movs	r3, #28
    5956:	e1ac      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5958:	68bb      	ldr	r3, [r7, #8]
    595a:	881b      	ldrh	r3, [r3, #0]
    595c:	b29b      	uxth	r3, r3
    595e:	001a      	movs	r2, r3
    5960:	2302      	movs	r3, #2
    5962:	4013      	ands	r3, r2
    5964:	d001      	beq.n	596a <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5966:	231c      	movs	r3, #28
    5968:	e1a3      	b.n	5cb2 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	7c1b      	ldrb	r3, [r3, #16]
    596e:	2b00      	cmp	r3, #0
    5970:	d017      	beq.n	59a2 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    5972:	2318      	movs	r3, #24
    5974:	18fb      	adds	r3, r7, r3
    5976:	0018      	movs	r0, r3
    5978:	4b8a      	ldr	r3, [pc, #552]	; (5ba4 <tc_init+0x334>)
    597a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	699b      	ldr	r3, [r3, #24]
    5980:	b2da      	uxtb	r2, r3
    5982:	2318      	movs	r3, #24
    5984:	18fb      	adds	r3, r7, r3
    5986:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5988:	2318      	movs	r3, #24
    598a:	18fb      	adds	r3, r7, r3
    598c:	2201      	movs	r2, #1
    598e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    5994:	b2db      	uxtb	r3, r3
    5996:	2218      	movs	r2, #24
    5998:	18ba      	adds	r2, r7, r2
    599a:	0011      	movs	r1, r2
    599c:	0018      	movs	r0, r3
    599e:	4b82      	ldr	r3, [pc, #520]	; (5ba8 <tc_init+0x338>)
    59a0:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	7f1b      	ldrb	r3, [r3, #28]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d017      	beq.n	59da <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    59aa:	2318      	movs	r3, #24
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	0018      	movs	r0, r3
    59b0:	4b7c      	ldr	r3, [pc, #496]	; (5ba4 <tc_init+0x334>)
    59b2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59b8:	b2da      	uxtb	r2, r3
    59ba:	2318      	movs	r3, #24
    59bc:	18fb      	adds	r3, r7, r3
    59be:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    59c0:	2318      	movs	r3, #24
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	2201      	movs	r2, #1
    59c6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    59cc:	b2db      	uxtb	r3, r3
    59ce:	2218      	movs	r2, #24
    59d0:	18ba      	adds	r2, r7, r2
    59d2:	0011      	movs	r1, r2
    59d4:	0018      	movs	r0, r3
    59d6:	4b74      	ldr	r3, [pc, #464]	; (5ba8 <tc_init+0x338>)
    59d8:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    59da:	2329      	movs	r3, #41	; 0x29
    59dc:	18fb      	adds	r3, r7, r3
    59de:	781a      	ldrb	r2, [r3, #0]
    59e0:	231c      	movs	r3, #28
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	0052      	lsls	r2, r2, #1
    59e6:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    59e8:	0019      	movs	r1, r3
    59ea:	2002      	movs	r0, #2
    59ec:	4b6f      	ldr	r3, [pc, #444]	; (5bac <tc_init+0x33c>)
    59ee:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	789b      	ldrb	r3, [r3, #2]
    59f4:	2b08      	cmp	r3, #8
    59f6:	d10b      	bne.n	5a10 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    59f8:	2329      	movs	r3, #41	; 0x29
    59fa:	18fb      	adds	r3, r7, r3
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	1c5a      	adds	r2, r3, #1
    5a00:	231c      	movs	r3, #28
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	0052      	lsls	r2, r2, #1
    5a06:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5a08:	0019      	movs	r1, r3
    5a0a:	2002      	movs	r0, #2
    5a0c:	4b67      	ldr	r3, [pc, #412]	; (5bac <tc_init+0x33c>)
    5a0e:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5a10:	2314      	movs	r3, #20
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	0018      	movs	r0, r3
    5a16:	4b66      	ldr	r3, [pc, #408]	; (5bb0 <tc_init+0x340>)
    5a18:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	2314      	movs	r3, #20
    5a20:	18fb      	adds	r3, r7, r3
    5a22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5a24:	2329      	movs	r3, #41	; 0x29
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	2224      	movs	r2, #36	; 0x24
    5a2c:	18ba      	adds	r2, r7, r2
    5a2e:	5cd3      	ldrb	r3, [r2, r3]
    5a30:	2214      	movs	r2, #20
    5a32:	18ba      	adds	r2, r7, r2
    5a34:	0011      	movs	r1, r2
    5a36:	0018      	movs	r0, r3
    5a38:	4b5e      	ldr	r3, [pc, #376]	; (5bb4 <tc_init+0x344>)
    5a3a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5a3c:	2329      	movs	r3, #41	; 0x29
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	781b      	ldrb	r3, [r3, #0]
    5a42:	2224      	movs	r2, #36	; 0x24
    5a44:	18ba      	adds	r2, r7, r2
    5a46:	5cd3      	ldrb	r3, [r2, r3]
    5a48:	0018      	movs	r0, r3
    5a4a:	4b5b      	ldr	r3, [pc, #364]	; (5bb8 <tc_init+0x348>)
    5a4c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	799b      	ldrb	r3, [r3, #6]
    5a56:	4313      	orrs	r3, r2
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    5a60:	4313      	orrs	r3, r2
    5a62:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    5a68:	232e      	movs	r3, #46	; 0x2e
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	430a      	orrs	r2, r1
    5a6e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	785b      	ldrb	r3, [r3, #1]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d008      	beq.n	5a8a <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5a78:	232e      	movs	r3, #46	; 0x2e
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	222e      	movs	r2, #46	; 0x2e
    5a7e:	18ba      	adds	r2, r7, r2
    5a80:	8812      	ldrh	r2, [r2, #0]
    5a82:	2180      	movs	r1, #128	; 0x80
    5a84:	0109      	lsls	r1, r1, #4
    5a86:	430a      	orrs	r2, r1
    5a88:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	0018      	movs	r0, r3
    5a90:	4b4a      	ldr	r3, [pc, #296]	; (5bbc <tc_init+0x34c>)
    5a92:	4798      	blx	r3
    5a94:	1e03      	subs	r3, r0, #0
    5a96:	d1f9      	bne.n	5a8c <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5a98:	68bb      	ldr	r3, [r7, #8]
    5a9a:	222e      	movs	r2, #46	; 0x2e
    5a9c:	18ba      	adds	r2, r7, r2
    5a9e:	8812      	ldrh	r2, [r2, #0]
    5aa0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	7b5b      	ldrb	r3, [r3, #13]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d003      	beq.n	5ab2 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5aaa:	232d      	movs	r3, #45	; 0x2d
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	2204      	movs	r2, #4
    5ab0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	7b9b      	ldrb	r3, [r3, #14]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d007      	beq.n	5aca <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5aba:	232d      	movs	r3, #45	; 0x2d
    5abc:	18fb      	adds	r3, r7, r3
    5abe:	222d      	movs	r2, #45	; 0x2d
    5ac0:	18ba      	adds	r2, r7, r2
    5ac2:	7812      	ldrb	r2, [r2, #0]
    5ac4:	2101      	movs	r1, #1
    5ac6:	430a      	orrs	r2, r1
    5ac8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	0018      	movs	r0, r3
    5ad0:	4b3a      	ldr	r3, [pc, #232]	; (5bbc <tc_init+0x34c>)
    5ad2:	4798      	blx	r3
    5ad4:	1e03      	subs	r3, r0, #0
    5ad6:	d1f9      	bne.n	5acc <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5ad8:	68bb      	ldr	r3, [r7, #8]
    5ada:	22ff      	movs	r2, #255	; 0xff
    5adc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5ade:	232d      	movs	r3, #45	; 0x2d
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d00b      	beq.n	5b00 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    5ae8:	46c0      	nop			; (mov r8, r8)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	0018      	movs	r0, r3
    5aee:	4b33      	ldr	r3, [pc, #204]	; (5bbc <tc_init+0x34c>)
    5af0:	4798      	blx	r3
    5af2:	1e03      	subs	r3, r0, #0
    5af4:	d1f9      	bne.n	5aea <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5af6:	68bb      	ldr	r3, [r7, #8]
    5af8:	222d      	movs	r2, #45	; 0x2d
    5afa:	18ba      	adds	r2, r7, r2
    5afc:	7812      	ldrb	r2, [r2, #0]
    5afe:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5b00:	232c      	movs	r3, #44	; 0x2c
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	687a      	ldr	r2, [r7, #4]
    5b06:	7a92      	ldrb	r2, [r2, #10]
    5b08:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b0a:	232a      	movs	r3, #42	; 0x2a
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	2200      	movs	r2, #0
    5b10:	701a      	strb	r2, [r3, #0]
    5b12:	e01c      	b.n	5b4e <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    5b14:	232a      	movs	r3, #42	; 0x2a
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	687a      	ldr	r2, [r7, #4]
    5b1c:	18d3      	adds	r3, r2, r3
    5b1e:	7adb      	ldrb	r3, [r3, #11]
    5b20:	2b00      	cmp	r3, #0
    5b22:	d00d      	beq.n	5b40 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5b24:	232a      	movs	r3, #42	; 0x2a
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2210      	movs	r2, #16
    5b2c:	409a      	lsls	r2, r3
    5b2e:	0013      	movs	r3, r2
    5b30:	b2d9      	uxtb	r1, r3
    5b32:	232c      	movs	r3, #44	; 0x2c
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	222c      	movs	r2, #44	; 0x2c
    5b38:	18ba      	adds	r2, r7, r2
    5b3a:	7812      	ldrb	r2, [r2, #0]
    5b3c:	430a      	orrs	r2, r1
    5b3e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b40:	232a      	movs	r3, #42	; 0x2a
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	781a      	ldrb	r2, [r3, #0]
    5b46:	232a      	movs	r3, #42	; 0x2a
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	3201      	adds	r2, #1
    5b4c:	701a      	strb	r2, [r3, #0]
    5b4e:	232a      	movs	r3, #42	; 0x2a
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	2b01      	cmp	r3, #1
    5b56:	d9dd      	bls.n	5b14 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b58:	46c0      	nop			; (mov r8, r8)
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b17      	ldr	r3, [pc, #92]	; (5bbc <tc_init+0x34c>)
    5b60:	4798      	blx	r3
    5b62:	1e03      	subs	r3, r0, #0
    5b64:	d1f9      	bne.n	5b5a <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5b66:	68bb      	ldr	r3, [r7, #8]
    5b68:	222c      	movs	r2, #44	; 0x2c
    5b6a:	18ba      	adds	r2, r7, r2
    5b6c:	7812      	ldrb	r2, [r2, #0]
    5b6e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b70:	46c0      	nop			; (mov r8, r8)
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	0018      	movs	r0, r3
    5b76:	4b11      	ldr	r3, [pc, #68]	; (5bbc <tc_init+0x34c>)
    5b78:	4798      	blx	r3
    5b7a:	1e03      	subs	r3, r0, #0
    5b7c:	d1f9      	bne.n	5b72 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	791b      	ldrb	r3, [r3, #4]
    5b82:	2b04      	cmp	r3, #4
    5b84:	d01c      	beq.n	5bc0 <tc_init+0x350>
    5b86:	2b08      	cmp	r3, #8
    5b88:	d100      	bne.n	5b8c <tc_init+0x31c>
    5b8a:	e06e      	b.n	5c6a <tc_init+0x3fa>
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d049      	beq.n	5c24 <tc_init+0x3b4>
    5b90:	e08e      	b.n	5cb0 <tc_init+0x440>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005829 	.word	0x00005829
    5b98:	0001c5bc 	.word	0x0001c5bc
    5b9c:	0001c5c0 	.word	0x0001c5c0
    5ba0:	2000051c 	.word	0x2000051c
    5ba4:	000057d9 	.word	0x000057d9
    5ba8:	000088d9 	.word	0x000088d9
    5bac:	0000577d 	.word	0x0000577d
    5bb0:	00005765 	.word	0x00005765
    5bb4:	000085ed 	.word	0x000085ed
    5bb8:	00008631 	.word	0x00008631
    5bbc:	00005801 	.word	0x00005801
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b3d      	ldr	r3, [pc, #244]	; (5cbc <tc_init+0x44c>)
    5bc8:	4798      	blx	r3
    5bca:	1e03      	subs	r3, r0, #0
    5bcc:	d1f9      	bne.n	5bc2 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	2228      	movs	r2, #40	; 0x28
    5bd2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    5bd4:	68bb      	ldr	r3, [r7, #8]
    5bd6:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    5bd8:	46c0      	nop			; (mov r8, r8)
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	0018      	movs	r0, r3
    5bde:	4b37      	ldr	r3, [pc, #220]	; (5cbc <tc_init+0x44c>)
    5be0:	4798      	blx	r3
    5be2:	1e03      	subs	r3, r0, #0
    5be4:	d1f9      	bne.n	5bda <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	2229      	movs	r2, #41	; 0x29
    5bea:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    5bec:	68bb      	ldr	r3, [r7, #8]
    5bee:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5bf0:	46c0      	nop			; (mov r8, r8)
    5bf2:	68fb      	ldr	r3, [r7, #12]
    5bf4:	0018      	movs	r0, r3
    5bf6:	4b31      	ldr	r3, [pc, #196]	; (5cbc <tc_init+0x44c>)
    5bf8:	4798      	blx	r3
    5bfa:	1e03      	subs	r3, r0, #0
    5bfc:	d1f9      	bne.n	5bf2 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	222a      	movs	r2, #42	; 0x2a
    5c02:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    5c04:	68bb      	ldr	r3, [r7, #8]
    5c06:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c08:	46c0      	nop			; (mov r8, r8)
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b2b      	ldr	r3, [pc, #172]	; (5cbc <tc_init+0x44c>)
    5c10:	4798      	blx	r3
    5c12:	1e03      	subs	r3, r0, #0
    5c14:	d1f9      	bne.n	5c0a <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	222b      	movs	r2, #43	; 0x2b
    5c1a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    5c20:	2300      	movs	r3, #0
    5c22:	e046      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    5c24:	46c0      	nop			; (mov r8, r8)
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b24      	ldr	r3, [pc, #144]	; (5cbc <tc_init+0x44c>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d1f9      	bne.n	5c26 <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	0018      	movs	r0, r3
    5c40:	4b1e      	ldr	r3, [pc, #120]	; (5cbc <tc_init+0x44c>)
    5c42:	4798      	blx	r3
    5c44:	1e03      	subs	r3, r0, #0
    5c46:	d1f9      	bne.n	5c3c <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5c4c:	68bb      	ldr	r3, [r7, #8]
    5c4e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c50:	46c0      	nop			; (mov r8, r8)
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	0018      	movs	r0, r3
    5c56:	4b19      	ldr	r3, [pc, #100]	; (5cbc <tc_init+0x44c>)
    5c58:	4798      	blx	r3
    5c5a:	1e03      	subs	r3, r0, #0
    5c5c:	d1f9      	bne.n	5c52 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    5c66:	2300      	movs	r3, #0
    5c68:	e023      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	0018      	movs	r0, r3
    5c70:	4b12      	ldr	r3, [pc, #72]	; (5cbc <tc_init+0x44c>)
    5c72:	4798      	blx	r3
    5c74:	1e03      	subs	r3, r0, #0
    5c76:	d1f9      	bne.n	5c6c <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c7c:	68bb      	ldr	r3, [r7, #8]
    5c7e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c80:	46c0      	nop			; (mov r8, r8)
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	0018      	movs	r0, r3
    5c86:	4b0d      	ldr	r3, [pc, #52]	; (5cbc <tc_init+0x44c>)
    5c88:	4798      	blx	r3
    5c8a:	1e03      	subs	r3, r0, #0
    5c8c:	d1f9      	bne.n	5c82 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    5c92:	68bb      	ldr	r3, [r7, #8]
    5c94:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0018      	movs	r0, r3
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <tc_init+0x44c>)
    5c9e:	4798      	blx	r3
    5ca0:	1e03      	subs	r3, r0, #0
    5ca2:	d1f9      	bne.n	5c98 <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5ca8:	68bb      	ldr	r3, [r7, #8]
    5caa:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    5cac:	2300      	movs	r3, #0
    5cae:	e000      	b.n	5cb2 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5cb0:	2317      	movs	r3, #23
}
    5cb2:	0018      	movs	r0, r3
    5cb4:	46bd      	mov	sp, r7
    5cb6:	b00d      	add	sp, #52	; 0x34
    5cb8:	bd90      	pop	{r4, r7, pc}
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	00005801 	.word	0x00005801

00005cc0 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b084      	sub	sp, #16
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b0e      	ldr	r3, [pc, #56]	; (5d10 <tc_get_count_value+0x50>)
    5cd6:	4798      	blx	r3
    5cd8:	1e03      	subs	r3, r0, #0
    5cda:	d1f9      	bne.n	5cd0 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	791b      	ldrb	r3, [r3, #4]
    5ce0:	2b04      	cmp	r3, #4
    5ce2:	d004      	beq.n	5cee <tc_get_count_value+0x2e>
    5ce4:	2b08      	cmp	r3, #8
    5ce6:	d00a      	beq.n	5cfe <tc_get_count_value+0x3e>
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d004      	beq.n	5cf6 <tc_get_count_value+0x36>
    5cec:	e00a      	b.n	5d04 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5cee:	68fb      	ldr	r3, [r7, #12]
    5cf0:	7c1b      	ldrb	r3, [r3, #16]
    5cf2:	b2db      	uxtb	r3, r3
    5cf4:	e007      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	8a1b      	ldrh	r3, [r3, #16]
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	e003      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    5cfe:	68fb      	ldr	r3, [r7, #12]
    5d00:	691b      	ldr	r3, [r3, #16]
    5d02:	e000      	b.n	5d06 <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    5d04:	2300      	movs	r3, #0
}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	b004      	add	sp, #16
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00005801 	.word	0x00005801

00005d14 <system_gclk_chan_get_config_defaults>:
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	2200      	movs	r2, #0
    5d20:	701a      	strb	r2, [r3, #0]
}
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	46bd      	mov	sp, r7
    5d26:	b002      	add	sp, #8
    5d28:	bd80      	pop	{r7, pc}
	...

00005d2c <system_apb_clock_set_mask>:
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	af00      	add	r7, sp, #0
    5d32:	0002      	movs	r2, r0
    5d34:	6039      	str	r1, [r7, #0]
    5d36:	1dfb      	adds	r3, r7, #7
    5d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d3a:	1dfb      	adds	r3, r7, #7
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	2b01      	cmp	r3, #1
    5d40:	d00a      	beq.n	5d58 <system_apb_clock_set_mask+0x2c>
    5d42:	2b02      	cmp	r3, #2
    5d44:	d00f      	beq.n	5d66 <system_apb_clock_set_mask+0x3a>
    5d46:	2b00      	cmp	r3, #0
    5d48:	d114      	bne.n	5d74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4c:	4a0d      	ldr	r2, [pc, #52]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4e:	6991      	ldr	r1, [r2, #24]
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	430a      	orrs	r2, r1
    5d54:	619a      	str	r2, [r3, #24]
			break;
    5d56:	e00f      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5d58:	4b0a      	ldr	r3, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5a:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5c:	69d1      	ldr	r1, [r2, #28]
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	430a      	orrs	r2, r1
    5d62:	61da      	str	r2, [r3, #28]
			break;
    5d64:	e008      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5d66:	4b07      	ldr	r3, [pc, #28]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d68:	4a06      	ldr	r2, [pc, #24]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d6a:	6a11      	ldr	r1, [r2, #32]
    5d6c:	683a      	ldr	r2, [r7, #0]
    5d6e:	430a      	orrs	r2, r1
    5d70:	621a      	str	r2, [r3, #32]
			break;
    5d72:	e001      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5d74:	2317      	movs	r3, #23
    5d76:	e000      	b.n	5d7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5d78:	2300      	movs	r3, #0
}
    5d7a:	0018      	movs	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b002      	add	sp, #8
    5d80:	bd80      	pop	{r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	40000400 	.word	0x40000400

00005d88 <system_pinmux_get_config_defaults>:
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	2280      	movs	r2, #128	; 0x80
    5d94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	2200      	movs	r2, #0
    5d9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	2201      	movs	r2, #1
    5da0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2200      	movs	r2, #0
    5da6:	70da      	strb	r2, [r3, #3]
}
    5da8:	46c0      	nop			; (mov r8, r8)
    5daa:	46bd      	mov	sp, r7
    5dac:	b002      	add	sp, #8
    5dae:	bd80      	pop	{r7, pc}

00005db0 <system_is_debugger_present>:
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5db4:	4b05      	ldr	r3, [pc, #20]	; (5dcc <system_is_debugger_present+0x1c>)
    5db6:	789b      	ldrb	r3, [r3, #2]
    5db8:	b2db      	uxtb	r3, r3
    5dba:	001a      	movs	r2, r3
    5dbc:	2302      	movs	r3, #2
    5dbe:	4013      	ands	r3, r2
    5dc0:	1e5a      	subs	r2, r3, #1
    5dc2:	4193      	sbcs	r3, r2
    5dc4:	b2db      	uxtb	r3, r3
}
    5dc6:	0018      	movs	r0, r3
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	41002000 	.word	0x41002000

00005dd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5dd0:	b580      	push	{r7, lr}
    5dd2:	b084      	sub	sp, #16
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	69db      	ldr	r3, [r3, #28]
    5de2:	1e5a      	subs	r2, r3, #1
    5de4:	4193      	sbcs	r3, r2
    5de6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5de8:	0018      	movs	r0, r3
    5dea:	46bd      	mov	sp, r7
    5dec:	b004      	add	sp, #16
    5dee:	bd80      	pop	{r7, pc}

00005df0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5df8:	46c0      	nop			; (mov r8, r8)
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b04      	ldr	r3, [pc, #16]	; (5e10 <_usart_wait_for_sync+0x20>)
    5e00:	4798      	blx	r3
    5e02:	1e03      	subs	r3, r0, #0
    5e04:	d1f9      	bne.n	5dfa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	46bd      	mov	sp, r7
    5e0a:	b002      	add	sp, #8
    5e0c:	bd80      	pop	{r7, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	00005dd1 	.word	0x00005dd1

00005e14 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5e14:	b5b0      	push	{r4, r5, r7, lr}
    5e16:	b08c      	sub	sp, #48	; 0x30
    5e18:	af02      	add	r7, sp, #8
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	0018      	movs	r0, r3
    5e2a:	4ba8      	ldr	r3, [pc, #672]	; (60cc <_usart_set_config+0x2b8>)
    5e2c:	4798      	blx	r3
    5e2e:	0003      	movs	r3, r0
    5e30:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5e32:	697b      	ldr	r3, [r7, #20]
    5e34:	3314      	adds	r3, #20
    5e36:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5e38:	2300      	movs	r3, #0
    5e3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5e3c:	2300      	movs	r3, #0
    5e3e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	2200      	movs	r2, #0
    5e46:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e48:	231f      	movs	r3, #31
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	2200      	movs	r2, #0
    5e4e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e50:	231e      	movs	r3, #30
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	2210      	movs	r2, #16
    5e56:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5e58:	683b      	ldr	r3, [r7, #0]
    5e5a:	8a1b      	ldrh	r3, [r3, #16]
    5e5c:	2280      	movs	r2, #128	; 0x80
    5e5e:	01d2      	lsls	r2, r2, #7
    5e60:	4293      	cmp	r3, r2
    5e62:	d01c      	beq.n	5e9e <_usart_set_config+0x8a>
    5e64:	2280      	movs	r2, #128	; 0x80
    5e66:	01d2      	lsls	r2, r2, #7
    5e68:	4293      	cmp	r3, r2
    5e6a:	dc06      	bgt.n	5e7a <_usart_set_config+0x66>
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d00d      	beq.n	5e8c <_usart_set_config+0x78>
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0192      	lsls	r2, r2, #6
    5e74:	4293      	cmp	r3, r2
    5e76:	d024      	beq.n	5ec2 <_usart_set_config+0xae>
    5e78:	e035      	b.n	5ee6 <_usart_set_config+0xd2>
    5e7a:	22c0      	movs	r2, #192	; 0xc0
    5e7c:	01d2      	lsls	r2, r2, #7
    5e7e:	4293      	cmp	r3, r2
    5e80:	d028      	beq.n	5ed4 <_usart_set_config+0xc0>
    5e82:	2280      	movs	r2, #128	; 0x80
    5e84:	0212      	lsls	r2, r2, #8
    5e86:	4293      	cmp	r3, r2
    5e88:	d012      	beq.n	5eb0 <_usart_set_config+0x9c>
    5e8a:	e02c      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e8c:	231f      	movs	r3, #31
    5e8e:	18fb      	adds	r3, r7, r3
    5e90:	2200      	movs	r2, #0
    5e92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e94:	231e      	movs	r3, #30
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	2210      	movs	r2, #16
    5e9a:	701a      	strb	r2, [r3, #0]
			break;
    5e9c:	e023      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e9e:	231f      	movs	r3, #31
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	2200      	movs	r2, #0
    5ea4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ea6:	231e      	movs	r3, #30
    5ea8:	18fb      	adds	r3, r7, r3
    5eaa:	2208      	movs	r2, #8
    5eac:	701a      	strb	r2, [r3, #0]
			break;
    5eae:	e01a      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eb0:	231f      	movs	r3, #31
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2200      	movs	r2, #0
    5eb6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5eb8:	231e      	movs	r3, #30
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	2203      	movs	r2, #3
    5ebe:	701a      	strb	r2, [r3, #0]
			break;
    5ec0:	e011      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec2:	231f      	movs	r3, #31
    5ec4:	18fb      	adds	r3, r7, r3
    5ec6:	2201      	movs	r2, #1
    5ec8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5eca:	231e      	movs	r3, #30
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	2210      	movs	r2, #16
    5ed0:	701a      	strb	r2, [r3, #0]
			break;
    5ed2:	e008      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ed4:	231f      	movs	r3, #31
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	2201      	movs	r2, #1
    5eda:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5edc:	231e      	movs	r3, #30
    5ede:	18fb      	adds	r3, r7, r3
    5ee0:	2208      	movs	r2, #8
    5ee2:	701a      	strb	r2, [r3, #0]
			break;
    5ee4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5ee6:	683b      	ldr	r3, [r7, #0]
    5ee8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5eea:	683b      	ldr	r3, [r7, #0]
    5eec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5eee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5ef4:	4313      	orrs	r3, r2
		config->sample_rate |
    5ef6:	683a      	ldr	r2, [r7, #0]
    5ef8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    5efa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	7e12      	ldrb	r2, [r2, #24]
    5f00:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5f02:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f04:	683a      	ldr	r2, [r7, #0]
    5f06:	2126      	movs	r1, #38	; 0x26
    5f08:	5c52      	ldrb	r2, [r2, r1]
    5f0a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5f0c:	4313      	orrs	r3, r2
    5f0e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5f10:	231d      	movs	r3, #29
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	2200      	movs	r2, #0
    5f16:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	685b      	ldr	r3, [r3, #4]
    5f1c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5f1e:	68fb      	ldr	r3, [r7, #12]
    5f20:	2b00      	cmp	r3, #0
    5f22:	d01e      	beq.n	5f62 <_usart_set_config+0x14e>
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	0552      	lsls	r2, r2, #21
    5f28:	4293      	cmp	r3, r2
    5f2a:	d14f      	bne.n	5fcc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	2227      	movs	r2, #39	; 0x27
    5f30:	5c9b      	ldrb	r3, [r3, r2]
    5f32:	2201      	movs	r2, #1
    5f34:	4053      	eors	r3, r2
    5f36:	b2db      	uxtb	r3, r3
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d046      	beq.n	5fca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	6a1d      	ldr	r5, [r3, #32]
    5f40:	693b      	ldr	r3, [r7, #16]
    5f42:	b2db      	uxtb	r3, r3
    5f44:	0018      	movs	r0, r3
    5f46:	4b62      	ldr	r3, [pc, #392]	; (60d0 <_usart_set_config+0x2bc>)
    5f48:	4798      	blx	r3
    5f4a:	0001      	movs	r1, r0
    5f4c:	231d      	movs	r3, #29
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	230a      	movs	r3, #10
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	001a      	movs	r2, r3
    5f56:	0028      	movs	r0, r5
    5f58:	4b5e      	ldr	r3, [pc, #376]	; (60d4 <_usart_set_config+0x2c0>)
    5f5a:	4798      	blx	r3
    5f5c:	0003      	movs	r3, r0
    5f5e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5f60:	e033      	b.n	5fca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	2227      	movs	r2, #39	; 0x27
    5f66:	5c9b      	ldrb	r3, [r3, r2]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d014      	beq.n	5f96 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	6a18      	ldr	r0, [r3, #32]
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5f74:	231d      	movs	r3, #29
    5f76:	18fc      	adds	r4, r7, r3
    5f78:	231f      	movs	r3, #31
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	781d      	ldrb	r5, [r3, #0]
    5f7e:	230a      	movs	r3, #10
    5f80:	18fa      	adds	r2, r7, r3
    5f82:	231e      	movs	r3, #30
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	9300      	str	r3, [sp, #0]
    5f8a:	002b      	movs	r3, r5
    5f8c:	4d52      	ldr	r5, [pc, #328]	; (60d8 <_usart_set_config+0x2c4>)
    5f8e:	47a8      	blx	r5
    5f90:	0003      	movs	r3, r0
    5f92:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5f94:	e01a      	b.n	5fcc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5f96:	683b      	ldr	r3, [r7, #0]
    5f98:	6a1d      	ldr	r5, [r3, #32]
    5f9a:	693b      	ldr	r3, [r7, #16]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	0018      	movs	r0, r3
    5fa0:	4b4b      	ldr	r3, [pc, #300]	; (60d0 <_usart_set_config+0x2bc>)
    5fa2:	4798      	blx	r3
				status_code =
    5fa4:	231d      	movs	r3, #29
    5fa6:	18fc      	adds	r4, r7, r3
    5fa8:	231f      	movs	r3, #31
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	7819      	ldrb	r1, [r3, #0]
    5fae:	230a      	movs	r3, #10
    5fb0:	18fa      	adds	r2, r7, r3
    5fb2:	231e      	movs	r3, #30
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	9300      	str	r3, [sp, #0]
    5fba:	000b      	movs	r3, r1
    5fbc:	0001      	movs	r1, r0
    5fbe:	0028      	movs	r0, r5
    5fc0:	4d45      	ldr	r5, [pc, #276]	; (60d8 <_usart_set_config+0x2c4>)
    5fc2:	47a8      	blx	r5
    5fc4:	0003      	movs	r3, r0
    5fc6:	7023      	strb	r3, [r4, #0]
			break;
    5fc8:	e000      	b.n	5fcc <_usart_set_config+0x1b8>
			break;
    5fca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5fcc:	231d      	movs	r3, #29
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d003      	beq.n	5fde <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5fd6:	231d      	movs	r3, #29
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	e071      	b.n	60c2 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5fde:	683b      	ldr	r3, [r7, #0]
    5fe0:	7e5b      	ldrb	r3, [r3, #25]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d003      	beq.n	5fee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	7e9a      	ldrb	r2, [r3, #26]
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	0018      	movs	r0, r3
    5ff2:	4b3a      	ldr	r3, [pc, #232]	; (60dc <_usart_set_config+0x2c8>)
    5ff4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5ff6:	230a      	movs	r3, #10
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	881a      	ldrh	r2, [r3, #0]
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	4313      	orrs	r3, r2
    6006:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6008:	683b      	ldr	r3, [r7, #0]
    600a:	2227      	movs	r2, #39	; 0x27
    600c:	5c9b      	ldrb	r3, [r3, r2]
    600e:	2201      	movs	r2, #1
    6010:	4053      	eors	r3, r2
    6012:	b2db      	uxtb	r3, r3
    6014:	2b00      	cmp	r3, #0
    6016:	d003      	beq.n	6020 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    601a:	2204      	movs	r2, #4
    601c:	4313      	orrs	r3, r2
    601e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	7e5b      	ldrb	r3, [r3, #25]
    6024:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	7f1b      	ldrb	r3, [r3, #28]
    602a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    602c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    602e:	683b      	ldr	r3, [r7, #0]
    6030:	7f5b      	ldrb	r3, [r3, #29]
    6032:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6034:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	2124      	movs	r1, #36	; 0x24
    603a:	5c5b      	ldrb	r3, [r3, r1]
    603c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    603e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	2125      	movs	r1, #37	; 0x25
    6044:	5c5b      	ldrb	r3, [r3, r1]
    6046:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6048:	4313      	orrs	r3, r2
	ctrlb =  
    604a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    604c:	683b      	ldr	r3, [r7, #0]
    604e:	7adb      	ldrb	r3, [r3, #11]
    6050:	001a      	movs	r2, r3
    6052:	6a3b      	ldr	r3, [r7, #32]
    6054:	4313      	orrs	r3, r2
    6056:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	891b      	ldrh	r3, [r3, #8]
    605c:	2bff      	cmp	r3, #255	; 0xff
    605e:	d00b      	beq.n	6078 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6062:	2280      	movs	r2, #128	; 0x80
    6064:	0452      	lsls	r2, r2, #17
    6066:	4313      	orrs	r3, r2
    6068:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	891b      	ldrh	r3, [r3, #8]
    606e:	001a      	movs	r2, r3
    6070:	6a3b      	ldr	r3, [r7, #32]
    6072:	4313      	orrs	r3, r2
    6074:	623b      	str	r3, [r7, #32]
    6076:	e008      	b.n	608a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    6078:	683b      	ldr	r3, [r7, #0]
    607a:	7edb      	ldrb	r3, [r3, #27]
    607c:	2b00      	cmp	r3, #0
    607e:	d004      	beq.n	608a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6082:	2280      	movs	r2, #128	; 0x80
    6084:	04d2      	lsls	r2, r2, #19
    6086:	4313      	orrs	r3, r2
    6088:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    608a:	683b      	ldr	r3, [r7, #0]
    608c:	222c      	movs	r2, #44	; 0x2c
    608e:	5c9b      	ldrb	r3, [r3, r2]
    6090:	2b00      	cmp	r3, #0
    6092:	d103      	bne.n	609c <_usart_set_config+0x288>
    6094:	4b12      	ldr	r3, [pc, #72]	; (60e0 <_usart_set_config+0x2cc>)
    6096:	4798      	blx	r3
    6098:	1e03      	subs	r3, r0, #0
    609a:	d003      	beq.n	60a4 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609e:	2280      	movs	r2, #128	; 0x80
    60a0:	4313      	orrs	r3, r2
    60a2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	0018      	movs	r0, r3
    60a8:	4b0c      	ldr	r3, [pc, #48]	; (60dc <_usart_set_config+0x2c8>)
    60aa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    60ac:	69bb      	ldr	r3, [r7, #24]
    60ae:	6a3a      	ldr	r2, [r7, #32]
    60b0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	0018      	movs	r0, r3
    60b6:	4b09      	ldr	r3, [pc, #36]	; (60dc <_usart_set_config+0x2c8>)
    60b8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    60ba:	69bb      	ldr	r3, [r7, #24]
    60bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60be:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    60c0:	2300      	movs	r3, #0
}
    60c2:	0018      	movs	r0, r3
    60c4:	46bd      	mov	sp, r7
    60c6:	b00a      	add	sp, #40	; 0x28
    60c8:	bdb0      	pop	{r4, r5, r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	00007a01 	.word	0x00007a01
    60d0:	00008711 	.word	0x00008711
    60d4:	0000754f 	.word	0x0000754f
    60d8:	000075cd 	.word	0x000075cd
    60dc:	00005df1 	.word	0x00005df1
    60e0:	00005db1 	.word	0x00005db1

000060e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    60e4:	b590      	push	{r4, r7, lr}
    60e6:	b093      	sub	sp, #76	; 0x4c
    60e8:	af00      	add	r7, sp, #0
    60ea:	60f8      	str	r0, [r7, #12]
    60ec:	60b9      	str	r1, [r7, #8]
    60ee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    60f0:	233b      	movs	r3, #59	; 0x3b
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	2200      	movs	r2, #0
    60f6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	68ba      	ldr	r2, [r7, #8]
    60fc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	0018      	movs	r0, r3
    610a:	4b86      	ldr	r3, [pc, #536]	; (6324 <usart_init+0x240>)
    610c:	4798      	blx	r3
    610e:	0003      	movs	r3, r0
    6110:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6114:	3302      	adds	r3, #2
    6116:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    611a:	3314      	adds	r3, #20
    611c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	2201      	movs	r2, #1
    6124:	4013      	ands	r3, r2
    6126:	d001      	beq.n	612c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6128:	2305      	movs	r3, #5
    612a:	e0f6      	b.n	631a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	2202      	movs	r2, #2
    6132:	4013      	ands	r3, r2
    6134:	d001      	beq.n	613a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6136:	231c      	movs	r3, #28
    6138:	e0ef      	b.n	631a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    613a:	2201      	movs	r2, #1
    613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    613e:	409a      	lsls	r2, r3
    6140:	0013      	movs	r3, r2
    6142:	0019      	movs	r1, r3
    6144:	2002      	movs	r0, #2
    6146:	4b78      	ldr	r3, [pc, #480]	; (6328 <usart_init+0x244>)
    6148:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    614a:	2324      	movs	r3, #36	; 0x24
    614c:	18fb      	adds	r3, r7, r3
    614e:	0018      	movs	r0, r3
    6150:	4b76      	ldr	r3, [pc, #472]	; (632c <usart_init+0x248>)
    6152:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	222d      	movs	r2, #45	; 0x2d
    6158:	5c9a      	ldrb	r2, [r3, r2]
    615a:	2324      	movs	r3, #36	; 0x24
    615c:	18fb      	adds	r3, r7, r3
    615e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6162:	b2db      	uxtb	r3, r3
    6164:	2224      	movs	r2, #36	; 0x24
    6166:	18ba      	adds	r2, r7, r2
    6168:	0011      	movs	r1, r2
    616a:	0018      	movs	r0, r3
    616c:	4b70      	ldr	r3, [pc, #448]	; (6330 <usart_init+0x24c>)
    616e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6170:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6172:	b2db      	uxtb	r3, r3
    6174:	0018      	movs	r0, r3
    6176:	4b6f      	ldr	r3, [pc, #444]	; (6334 <usart_init+0x250>)
    6178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	222d      	movs	r2, #45	; 0x2d
    617e:	5c9b      	ldrb	r3, [r3, r2]
    6180:	2100      	movs	r1, #0
    6182:	0018      	movs	r0, r3
    6184:	4b6c      	ldr	r3, [pc, #432]	; (6338 <usart_init+0x254>)
    6186:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	7ada      	ldrb	r2, [r3, #11]
    618c:	68fb      	ldr	r3, [r7, #12]
    618e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	2224      	movs	r2, #36	; 0x24
    6194:	5c9a      	ldrb	r2, [r3, r2]
    6196:	68fb      	ldr	r3, [r7, #12]
    6198:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	2225      	movs	r2, #37	; 0x25
    619e:	5c9a      	ldrb	r2, [r3, r2]
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	7eda      	ldrb	r2, [r3, #27]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	7f1a      	ldrb	r2, [r3, #28]
    61b0:	68fb      	ldr	r3, [r7, #12]
    61b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    61b4:	233b      	movs	r3, #59	; 0x3b
    61b6:	18fc      	adds	r4, r7, r3
    61b8:	687a      	ldr	r2, [r7, #4]
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	0011      	movs	r1, r2
    61be:	0018      	movs	r0, r3
    61c0:	4b5e      	ldr	r3, [pc, #376]	; (633c <usart_init+0x258>)
    61c2:	4798      	blx	r3
    61c4:	0003      	movs	r3, r0
    61c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    61c8:	233b      	movs	r3, #59	; 0x3b
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <usart_init+0xf6>
		return status_code;
    61d2:	233b      	movs	r3, #59	; 0x3b
    61d4:	18fb      	adds	r3, r7, r3
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	e09f      	b.n	631a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    61da:	2320      	movs	r3, #32
    61dc:	18fb      	adds	r3, r7, r3
    61de:	0018      	movs	r0, r3
    61e0:	4b57      	ldr	r3, [pc, #348]	; (6340 <usart_init+0x25c>)
    61e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    61e4:	2320      	movs	r3, #32
    61e6:	18fb      	adds	r3, r7, r3
    61e8:	2200      	movs	r2, #0
    61ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    61ec:	2320      	movs	r3, #32
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2200      	movs	r2, #0
    61f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    61f8:	2310      	movs	r3, #16
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6202:	2310      	movs	r3, #16
    6204:	18fb      	adds	r3, r7, r3
    6206:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    620c:	2310      	movs	r3, #16
    620e:	18fb      	adds	r3, r7, r3
    6210:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6216:	2310      	movs	r3, #16
    6218:	18fb      	adds	r3, r7, r3
    621a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    621c:	2347      	movs	r3, #71	; 0x47
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	701a      	strb	r2, [r3, #0]
    6224:	e02c      	b.n	6280 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6226:	2347      	movs	r3, #71	; 0x47
    6228:	18fb      	adds	r3, r7, r3
    622a:	781a      	ldrb	r2, [r3, #0]
    622c:	2310      	movs	r3, #16
    622e:	18fb      	adds	r3, r7, r3
    6230:	0092      	lsls	r2, r2, #2
    6232:	58d3      	ldr	r3, [r2, r3]
    6234:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6238:	2b00      	cmp	r3, #0
    623a:	d109      	bne.n	6250 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    623c:	2347      	movs	r3, #71	; 0x47
    623e:	18fb      	adds	r3, r7, r3
    6240:	781a      	ldrb	r2, [r3, #0]
    6242:	68bb      	ldr	r3, [r7, #8]
    6244:	0011      	movs	r1, r2
    6246:	0018      	movs	r0, r3
    6248:	4b3e      	ldr	r3, [pc, #248]	; (6344 <usart_init+0x260>)
    624a:	4798      	blx	r3
    624c:	0003      	movs	r3, r0
    624e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6252:	3301      	adds	r3, #1
    6254:	d00d      	beq.n	6272 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6258:	b2da      	uxtb	r2, r3
    625a:	2320      	movs	r3, #32
    625c:	18fb      	adds	r3, r7, r3
    625e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6262:	0c1b      	lsrs	r3, r3, #16
    6264:	b2db      	uxtb	r3, r3
    6266:	2220      	movs	r2, #32
    6268:	18ba      	adds	r2, r7, r2
    626a:	0011      	movs	r1, r2
    626c:	0018      	movs	r0, r3
    626e:	4b36      	ldr	r3, [pc, #216]	; (6348 <usart_init+0x264>)
    6270:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6272:	2347      	movs	r3, #71	; 0x47
    6274:	18fb      	adds	r3, r7, r3
    6276:	781a      	ldrb	r2, [r3, #0]
    6278:	2347      	movs	r3, #71	; 0x47
    627a:	18fb      	adds	r3, r7, r3
    627c:	3201      	adds	r2, #1
    627e:	701a      	strb	r2, [r3, #0]
    6280:	2347      	movs	r3, #71	; 0x47
    6282:	18fb      	adds	r3, r7, r3
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	2b03      	cmp	r3, #3
    6288:	d9cd      	bls.n	6226 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    628a:	2300      	movs	r3, #0
    628c:	63fb      	str	r3, [r7, #60]	; 0x3c
    628e:	e00a      	b.n	62a6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    6290:	68fa      	ldr	r2, [r7, #12]
    6292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6294:	3302      	adds	r3, #2
    6296:	009b      	lsls	r3, r3, #2
    6298:	18d3      	adds	r3, r2, r3
    629a:	3304      	adds	r3, #4
    629c:	2200      	movs	r2, #0
    629e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    62a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a2:	3301      	adds	r3, #1
    62a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    62a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a8:	2b05      	cmp	r3, #5
    62aa:	d9f1      	bls.n	6290 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	2200      	movs	r2, #0
    62b0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	2200      	movs	r2, #0
    62b6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	2200      	movs	r2, #0
    62bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	2200      	movs	r2, #0
    62c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	2230      	movs	r2, #48	; 0x30
    62c8:	2100      	movs	r1, #0
    62ca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	2231      	movs	r2, #49	; 0x31
    62d0:	2100      	movs	r1, #0
    62d2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	2232      	movs	r2, #50	; 0x32
    62d8:	2100      	movs	r1, #0
    62da:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	2233      	movs	r2, #51	; 0x33
    62e0:	2100      	movs	r1, #0
    62e2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	2227      	movs	r2, #39	; 0x27
    62ea:	18bc      	adds	r4, r7, r2
    62ec:	0018      	movs	r0, r3
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <usart_init+0x240>)
    62f0:	4798      	blx	r3
    62f2:	0003      	movs	r3, r0
    62f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    62f6:	4a15      	ldr	r2, [pc, #84]	; (634c <usart_init+0x268>)
    62f8:	2327      	movs	r3, #39	; 0x27
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	0011      	movs	r1, r2
    6300:	0018      	movs	r0, r3
    6302:	4b13      	ldr	r3, [pc, #76]	; (6350 <usart_init+0x26c>)
    6304:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6306:	2327      	movs	r3, #39	; 0x27
    6308:	18fb      	adds	r3, r7, r3
    630a:	781a      	ldrb	r2, [r3, #0]
    630c:	4b11      	ldr	r3, [pc, #68]	; (6354 <usart_init+0x270>)
    630e:	0092      	lsls	r2, r2, #2
    6310:	68f9      	ldr	r1, [r7, #12]
    6312:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6314:	233b      	movs	r3, #59	; 0x3b
    6316:	18fb      	adds	r3, r7, r3
    6318:	781b      	ldrb	r3, [r3, #0]
}
    631a:	0018      	movs	r0, r3
    631c:	46bd      	mov	sp, r7
    631e:	b013      	add	sp, #76	; 0x4c
    6320:	bd90      	pop	{r4, r7, pc}
    6322:	46c0      	nop			; (mov r8, r8)
    6324:	00007a01 	.word	0x00007a01
    6328:	00005d2d 	.word	0x00005d2d
    632c:	00005d15 	.word	0x00005d15
    6330:	000085ed 	.word	0x000085ed
    6334:	00008631 	.word	0x00008631
    6338:	000077b9 	.word	0x000077b9
    633c:	00005e15 	.word	0x00005e15
    6340:	00005d89 	.word	0x00005d89
    6344:	00007845 	.word	0x00007845
    6348:	000088d9 	.word	0x000088d9
    634c:	00006751 	.word	0x00006751
    6350:	00007a65 	.word	0x00007a65
    6354:	2000052c 	.word	0x2000052c

00006358 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6358:	b580      	push	{r7, lr}
    635a:	b084      	sub	sp, #16
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
    6360:	000a      	movs	r2, r1
    6362:	1cbb      	adds	r3, r7, #2
    6364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	79db      	ldrb	r3, [r3, #7]
    6370:	2201      	movs	r2, #1
    6372:	4053      	eors	r3, r2
    6374:	b2db      	uxtb	r3, r3
    6376:	2b00      	cmp	r3, #0
    6378:	d001      	beq.n	637e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    637a:	231c      	movs	r3, #28
    637c:	e017      	b.n	63ae <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6382:	b29b      	uxth	r3, r3
    6384:	2b00      	cmp	r3, #0
    6386:	d001      	beq.n	638c <usart_write_wait+0x34>
		return STATUS_BUSY;
    6388:	2305      	movs	r3, #5
    638a:	e010      	b.n	63ae <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	0018      	movs	r0, r3
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <usart_write_wait+0x60>)
    6392:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6394:	68fb      	ldr	r3, [r7, #12]
    6396:	1cba      	adds	r2, r7, #2
    6398:	8812      	ldrh	r2, [r2, #0]
    639a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    639c:	46c0      	nop			; (mov r8, r8)
    639e:	68fb      	ldr	r3, [r7, #12]
    63a0:	7e1b      	ldrb	r3, [r3, #24]
    63a2:	b2db      	uxtb	r3, r3
    63a4:	001a      	movs	r2, r3
    63a6:	2302      	movs	r3, #2
    63a8:	4013      	ands	r3, r2
    63aa:	d0f8      	beq.n	639e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    63ac:	2300      	movs	r3, #0
}
    63ae:	0018      	movs	r0, r3
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00005df1 	.word	0x00005df1

000063bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b08a      	sub	sp, #40	; 0x28
    63c0:	af00      	add	r7, sp, #0
    63c2:	60f8      	str	r0, [r7, #12]
    63c4:	60b9      	str	r1, [r7, #8]
    63c6:	1dbb      	adds	r3, r7, #6
    63c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    63ca:	1dbb      	adds	r3, r7, #6
    63cc:	881b      	ldrh	r3, [r3, #0]
    63ce:	2b00      	cmp	r3, #0
    63d0:	d101      	bne.n	63d6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    63d2:	2317      	movs	r3, #23
    63d4:	e07e      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	79db      	ldrb	r3, [r3, #7]
    63da:	2201      	movs	r2, #1
    63dc:	4053      	eors	r3, r2
    63de:	b2db      	uxtb	r3, r3
    63e0:	2b00      	cmp	r3, #0
    63e2:	d001      	beq.n	63e8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    63e4:	231c      	movs	r3, #28
    63e6:	e075      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    63e8:	68fb      	ldr	r3, [r7, #12]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	0018      	movs	r0, r3
    63f2:	4b3a      	ldr	r3, [pc, #232]	; (64dc <usart_write_buffer_wait+0x120>)
    63f4:	4798      	blx	r3

	uint16_t tx_pos = 0;
    63f6:	2326      	movs	r3, #38	; 0x26
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    63fe:	e048      	b.n	6492 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6400:	2300      	movs	r3, #0
    6402:	623b      	str	r3, [r7, #32]
    6404:	e00f      	b.n	6426 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6406:	697b      	ldr	r3, [r7, #20]
    6408:	7e1b      	ldrb	r3, [r3, #24]
    640a:	b2db      	uxtb	r3, r3
    640c:	001a      	movs	r2, r3
    640e:	2301      	movs	r3, #1
    6410:	4013      	ands	r3, r2
    6412:	d10d      	bne.n	6430 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    6414:	6a3b      	ldr	r3, [r7, #32]
    6416:	4a32      	ldr	r2, [pc, #200]	; (64e0 <usart_write_buffer_wait+0x124>)
    6418:	4293      	cmp	r3, r2
    641a:	d101      	bne.n	6420 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    641c:	2312      	movs	r3, #18
    641e:	e059      	b.n	64d4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6420:	6a3b      	ldr	r3, [r7, #32]
    6422:	3301      	adds	r3, #1
    6424:	623b      	str	r3, [r7, #32]
    6426:	6a3b      	ldr	r3, [r7, #32]
    6428:	4a2d      	ldr	r2, [pc, #180]	; (64e0 <usart_write_buffer_wait+0x124>)
    642a:	4293      	cmp	r3, r2
    642c:	d9eb      	bls.n	6406 <usart_write_buffer_wait+0x4a>
    642e:	e000      	b.n	6432 <usart_write_buffer_wait+0x76>
				break;
    6430:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    6432:	2326      	movs	r3, #38	; 0x26
    6434:	18fb      	adds	r3, r7, r3
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	2226      	movs	r2, #38	; 0x26
    643a:	18ba      	adds	r2, r7, r2
    643c:	1c59      	adds	r1, r3, #1
    643e:	8011      	strh	r1, [r2, #0]
    6440:	001a      	movs	r2, r3
    6442:	68bb      	ldr	r3, [r7, #8]
    6444:	189b      	adds	r3, r3, r2
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	231e      	movs	r3, #30
    644a:	18fb      	adds	r3, r7, r3
    644c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	795b      	ldrb	r3, [r3, #5]
    6452:	2b01      	cmp	r3, #1
    6454:	d115      	bne.n	6482 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6456:	2326      	movs	r3, #38	; 0x26
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	2226      	movs	r2, #38	; 0x26
    645e:	18ba      	adds	r2, r7, r2
    6460:	1c59      	adds	r1, r3, #1
    6462:	8011      	strh	r1, [r2, #0]
    6464:	001a      	movs	r2, r3
    6466:	68bb      	ldr	r3, [r7, #8]
    6468:	189b      	adds	r3, r3, r2
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	021b      	lsls	r3, r3, #8
    646e:	b21a      	sxth	r2, r3
    6470:	231e      	movs	r3, #30
    6472:	18fb      	adds	r3, r7, r3
    6474:	2100      	movs	r1, #0
    6476:	5e5b      	ldrsh	r3, [r3, r1]
    6478:	4313      	orrs	r3, r2
    647a:	b21a      	sxth	r2, r3
    647c:	231e      	movs	r3, #30
    647e:	18fb      	adds	r3, r7, r3
    6480:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    6482:	231e      	movs	r3, #30
    6484:	18fb      	adds	r3, r7, r3
    6486:	881a      	ldrh	r2, [r3, #0]
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	0011      	movs	r1, r2
    648c:	0018      	movs	r0, r3
    648e:	4b15      	ldr	r3, [pc, #84]	; (64e4 <usart_write_buffer_wait+0x128>)
    6490:	4798      	blx	r3
	while (length--) {
    6492:	1dbb      	adds	r3, r7, #6
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	1dba      	adds	r2, r7, #6
    6498:	1e59      	subs	r1, r3, #1
    649a:	8011      	strh	r1, [r2, #0]
    649c:	2b00      	cmp	r3, #0
    649e:	d1af      	bne.n	6400 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	61bb      	str	r3, [r7, #24]
    64a4:	e00f      	b.n	64c6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    64a6:	697b      	ldr	r3, [r7, #20]
    64a8:	7e1b      	ldrb	r3, [r3, #24]
    64aa:	b2db      	uxtb	r3, r3
    64ac:	001a      	movs	r2, r3
    64ae:	2302      	movs	r3, #2
    64b0:	4013      	ands	r3, r2
    64b2:	d10d      	bne.n	64d0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    64b4:	69bb      	ldr	r3, [r7, #24]
    64b6:	4a0a      	ldr	r2, [pc, #40]	; (64e0 <usart_write_buffer_wait+0x124>)
    64b8:	4293      	cmp	r3, r2
    64ba:	d101      	bne.n	64c0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    64bc:	2312      	movs	r3, #18
    64be:	e009      	b.n	64d4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64c0:	69bb      	ldr	r3, [r7, #24]
    64c2:	3301      	adds	r3, #1
    64c4:	61bb      	str	r3, [r7, #24]
    64c6:	69bb      	ldr	r3, [r7, #24]
    64c8:	4a05      	ldr	r2, [pc, #20]	; (64e0 <usart_write_buffer_wait+0x124>)
    64ca:	4293      	cmp	r3, r2
    64cc:	d9eb      	bls.n	64a6 <usart_write_buffer_wait+0xea>
    64ce:	e000      	b.n	64d2 <usart_write_buffer_wait+0x116>
			break;
    64d0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    64d2:	2300      	movs	r3, #0
}
    64d4:	0018      	movs	r0, r3
    64d6:	46bd      	mov	sp, r7
    64d8:	b00a      	add	sp, #40	; 0x28
    64da:	bd80      	pop	{r7, pc}
    64dc:	00005df1 	.word	0x00005df1
    64e0:	0000ffff 	.word	0x0000ffff
    64e4:	00006359 	.word	0x00006359

000064e8 <system_interrupt_enter_critical_section>:
{
    64e8:	b580      	push	{r7, lr}
    64ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <system_interrupt_enter_critical_section+0x10>)
    64ee:	4798      	blx	r3
}
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	00007c39 	.word	0x00007c39

000064fc <system_interrupt_leave_critical_section>:
{
    64fc:	b580      	push	{r7, lr}
    64fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6500:	4b02      	ldr	r3, [pc, #8]	; (650c <system_interrupt_leave_critical_section+0x10>)
    6502:	4798      	blx	r3
}
    6504:	46c0      	nop			; (mov r8, r8)
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	00007c8d 	.word	0x00007c8d

00006510 <usart_is_syncing>:
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	69db      	ldr	r3, [r3, #28]
    6522:	1e5a      	subs	r2, r3, #1
    6524:	4193      	sbcs	r3, r2
    6526:	b2db      	uxtb	r3, r3
}
    6528:	0018      	movs	r0, r3
    652a:	46bd      	mov	sp, r7
    652c:	b004      	add	sp, #16
    652e:	bd80      	pop	{r7, pc}

00006530 <_usart_wait_for_sync>:
{
    6530:	b580      	push	{r7, lr}
    6532:	b082      	sub	sp, #8
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	0018      	movs	r0, r3
    653e:	4b04      	ldr	r3, [pc, #16]	; (6550 <_usart_wait_for_sync+0x20>)
    6540:	4798      	blx	r3
    6542:	1e03      	subs	r3, r0, #0
    6544:	d1f9      	bne.n	653a <_usart_wait_for_sync+0xa>
}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	46bd      	mov	sp, r7
    654a:	b002      	add	sp, #8
    654c:	bd80      	pop	{r7, pc}
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	00006511 	.word	0x00006511

00006554 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6554:	b580      	push	{r7, lr}
    6556:	b086      	sub	sp, #24
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	60b9      	str	r1, [r7, #8]
    655e:	1dbb      	adds	r3, r7, #6
    6560:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6568:	4b0f      	ldr	r3, [pc, #60]	; (65a8 <_usart_write_buffer+0x54>)
    656a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6570:	b29b      	uxth	r3, r3
    6572:	2b00      	cmp	r3, #0
    6574:	d003      	beq.n	657e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    6576:	4b0d      	ldr	r3, [pc, #52]	; (65ac <_usart_write_buffer+0x58>)
    6578:	4798      	blx	r3
		return STATUS_BUSY;
    657a:	2305      	movs	r3, #5
    657c:	e010      	b.n	65a0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	1dba      	adds	r2, r7, #6
    6582:	8812      	ldrh	r2, [r2, #0]
    6584:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    6586:	4b09      	ldr	r3, [pc, #36]	; (65ac <_usart_write_buffer+0x58>)
    6588:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    658a:	68fb      	ldr	r3, [r7, #12]
    658c:	68ba      	ldr	r2, [r7, #8]
    658e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	2233      	movs	r2, #51	; 0x33
    6594:	2105      	movs	r1, #5
    6596:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    6598:	697b      	ldr	r3, [r7, #20]
    659a:	2201      	movs	r2, #1
    659c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    659e:	2300      	movs	r3, #0
}
    65a0:	0018      	movs	r0, r3
    65a2:	46bd      	mov	sp, r7
    65a4:	b006      	add	sp, #24
    65a6:	bd80      	pop	{r7, pc}
    65a8:	000064e9 	.word	0x000064e9
    65ac:	000064fd 	.word	0x000064fd

000065b0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    65b0:	b580      	push	{r7, lr}
    65b2:	b086      	sub	sp, #24
    65b4:	af00      	add	r7, sp, #0
    65b6:	60f8      	str	r0, [r7, #12]
    65b8:	60b9      	str	r1, [r7, #8]
    65ba:	1dbb      	adds	r3, r7, #6
    65bc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    65be:	68fb      	ldr	r3, [r7, #12]
    65c0:	681b      	ldr	r3, [r3, #0]
    65c2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    65c4:	4b16      	ldr	r3, [pc, #88]	; (6620 <_usart_read_buffer+0x70>)
    65c6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    65c8:	68fb      	ldr	r3, [r7, #12]
    65ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    65cc:	b29b      	uxth	r3, r3
    65ce:	2b00      	cmp	r3, #0
    65d0:	d003      	beq.n	65da <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    65d2:	4b14      	ldr	r3, [pc, #80]	; (6624 <_usart_read_buffer+0x74>)
    65d4:	4798      	blx	r3
		return STATUS_BUSY;
    65d6:	2305      	movs	r3, #5
    65d8:	e01e      	b.n	6618 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    65da:	68fb      	ldr	r3, [r7, #12]
    65dc:	1dba      	adds	r2, r7, #6
    65de:	8812      	ldrh	r2, [r2, #0]
    65e0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    65e2:	4b10      	ldr	r3, [pc, #64]	; (6624 <_usart_read_buffer+0x74>)
    65e4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    65e6:	68fb      	ldr	r3, [r7, #12]
    65e8:	68ba      	ldr	r2, [r7, #8]
    65ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	2232      	movs	r2, #50	; 0x32
    65f0:	2105      	movs	r1, #5
    65f2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    65f4:	697b      	ldr	r3, [r7, #20]
    65f6:	2204      	movs	r2, #4
    65f8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    65fa:	68fb      	ldr	r3, [r7, #12]
    65fc:	7a1b      	ldrb	r3, [r3, #8]
    65fe:	2b00      	cmp	r3, #0
    6600:	d002      	beq.n	6608 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    6602:	697b      	ldr	r3, [r7, #20]
    6604:	2220      	movs	r2, #32
    6606:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	7a5b      	ldrb	r3, [r3, #9]
    660c:	2b00      	cmp	r3, #0
    660e:	d002      	beq.n	6616 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6610:	697b      	ldr	r3, [r7, #20]
    6612:	2208      	movs	r2, #8
    6614:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    6616:	2300      	movs	r3, #0
}
    6618:	0018      	movs	r0, r3
    661a:	46bd      	mov	sp, r7
    661c:	b006      	add	sp, #24
    661e:	bd80      	pop	{r7, pc}
    6620:	000064e9 	.word	0x000064e9
    6624:	000064fd 	.word	0x000064fd

00006628 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6628:	b580      	push	{r7, lr}
    662a:	b084      	sub	sp, #16
    662c:	af00      	add	r7, sp, #0
    662e:	60f8      	str	r0, [r7, #12]
    6630:	60b9      	str	r1, [r7, #8]
    6632:	1dbb      	adds	r3, r7, #6
    6634:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    6636:	1dbb      	adds	r3, r7, #6
    6638:	881b      	ldrh	r3, [r3, #0]
    663a:	2b00      	cmp	r3, #0
    663c:	d101      	bne.n	6642 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    663e:	2317      	movs	r3, #23
    6640:	e010      	b.n	6664 <usart_write_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    6642:	68fb      	ldr	r3, [r7, #12]
    6644:	79db      	ldrb	r3, [r3, #7]
    6646:	2201      	movs	r2, #1
    6648:	4053      	eors	r3, r2
    664a:	b2db      	uxtb	r3, r3
    664c:	2b00      	cmp	r3, #0
    664e:	d001      	beq.n	6654 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6650:	231c      	movs	r3, #28
    6652:	e007      	b.n	6664 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    6654:	1dbb      	adds	r3, r7, #6
    6656:	881a      	ldrh	r2, [r3, #0]
    6658:	68b9      	ldr	r1, [r7, #8]
    665a:	68fb      	ldr	r3, [r7, #12]
    665c:	0018      	movs	r0, r3
    665e:	4b03      	ldr	r3, [pc, #12]	; (666c <usart_write_buffer_job+0x44>)
    6660:	4798      	blx	r3
    6662:	0003      	movs	r3, r0
}
    6664:	0018      	movs	r0, r3
    6666:	46bd      	mov	sp, r7
    6668:	b004      	add	sp, #16
    666a:	bd80      	pop	{r7, pc}
    666c:	00006555 	.word	0x00006555

00006670 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6670:	b580      	push	{r7, lr}
    6672:	b084      	sub	sp, #16
    6674:	af00      	add	r7, sp, #0
    6676:	60f8      	str	r0, [r7, #12]
    6678:	60b9      	str	r1, [r7, #8]
    667a:	1dbb      	adds	r3, r7, #6
    667c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    667e:	1dbb      	adds	r3, r7, #6
    6680:	881b      	ldrh	r3, [r3, #0]
    6682:	2b00      	cmp	r3, #0
    6684:	d101      	bne.n	668a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6686:	2317      	movs	r3, #23
    6688:	e010      	b.n	66ac <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    668a:	68fb      	ldr	r3, [r7, #12]
    668c:	799b      	ldrb	r3, [r3, #6]
    668e:	2201      	movs	r2, #1
    6690:	4053      	eors	r3, r2
    6692:	b2db      	uxtb	r3, r3
    6694:	2b00      	cmp	r3, #0
    6696:	d001      	beq.n	669c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6698:	231c      	movs	r3, #28
    669a:	e007      	b.n	66ac <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    669c:	1dbb      	adds	r3, r7, #6
    669e:	881a      	ldrh	r2, [r3, #0]
    66a0:	68b9      	ldr	r1, [r7, #8]
    66a2:	68fb      	ldr	r3, [r7, #12]
    66a4:	0018      	movs	r0, r3
    66a6:	4b03      	ldr	r3, [pc, #12]	; (66b4 <usart_read_buffer_job+0x44>)
    66a8:	4798      	blx	r3
    66aa:	0003      	movs	r3, r0
}
    66ac:	0018      	movs	r0, r3
    66ae:	46bd      	mov	sp, r7
    66b0:	b004      	add	sp, #16
    66b2:	bd80      	pop	{r7, pc}
    66b4:	000065b1 	.word	0x000065b1

000066b8 <usart_abort_job>:
 * \param[in]  transceiver_type  Transfer type to cancel
 */
void usart_abort_job(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b084      	sub	sp, #16
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
    66c0:	000a      	movs	r2, r1
    66c2:	1cfb      	adds	r3, r7, #3
    66c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	681b      	ldr	r3, [r3, #0]
    66ca:	60fb      	str	r3, [r7, #12]

	switch(transceiver_type) {
    66cc:	1cfb      	adds	r3, r7, #3
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	2b00      	cmp	r3, #0
    66d2:	d002      	beq.n	66da <usart_abort_job+0x22>
    66d4:	2b01      	cmp	r3, #1
    66d6:	d007      	beq.n	66e8 <usart_abort_job+0x30>
			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;

			break;
	}
}
    66d8:	e00d      	b.n	66f6 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    66da:	68fb      	ldr	r3, [r7, #12]
    66dc:	2204      	movs	r2, #4
    66de:	761a      	strb	r2, [r3, #24]
			module->remaining_rx_buffer_length = 0;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	2200      	movs	r2, #0
    66e4:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
    66e6:	e006      	b.n	66f6 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    66e8:	68fb      	ldr	r3, [r7, #12]
    66ea:	2202      	movs	r2, #2
    66ec:	761a      	strb	r2, [r3, #24]
			module->remaining_tx_buffer_length = 0;
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	2200      	movs	r2, #0
    66f2:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
    66f4:	46c0      	nop			; (mov r8, r8)
}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	46bd      	mov	sp, r7
    66fa:	b004      	add	sp, #16
    66fc:	bd80      	pop	{r7, pc}

000066fe <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    66fe:	b580      	push	{r7, lr}
    6700:	b084      	sub	sp, #16
    6702:	af00      	add	r7, sp, #0
    6704:	6078      	str	r0, [r7, #4]
    6706:	000a      	movs	r2, r1
    6708:	1cfb      	adds	r3, r7, #3
    670a:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    670c:	1cfb      	adds	r3, r7, #3
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	2b00      	cmp	r3, #0
    6712:	d002      	beq.n	671a <usart_get_job_status+0x1c>
    6714:	2b01      	cmp	r3, #1
    6716:	d007      	beq.n	6728 <usart_get_job_status+0x2a>
    6718:	e00d      	b.n	6736 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    671a:	230f      	movs	r3, #15
    671c:	18fb      	adds	r3, r7, r3
    671e:	687a      	ldr	r2, [r7, #4]
    6720:	2132      	movs	r1, #50	; 0x32
    6722:	5c52      	ldrb	r2, [r2, r1]
    6724:	701a      	strb	r2, [r3, #0]
			break;
    6726:	e00b      	b.n	6740 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    6728:	230f      	movs	r3, #15
    672a:	18fb      	adds	r3, r7, r3
    672c:	687a      	ldr	r2, [r7, #4]
    672e:	2133      	movs	r1, #51	; 0x33
    6730:	5c52      	ldrb	r2, [r2, r1]
    6732:	701a      	strb	r2, [r3, #0]
			break;
    6734:	e004      	b.n	6740 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    6736:	230f      	movs	r3, #15
    6738:	18fb      	adds	r3, r7, r3
    673a:	2217      	movs	r2, #23
    673c:	701a      	strb	r2, [r3, #0]
			break;
    673e:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    6740:	230f      	movs	r3, #15
    6742:	18fb      	adds	r3, r7, r3
    6744:	781b      	ldrb	r3, [r3, #0]
}
    6746:	0018      	movs	r0, r3
    6748:	46bd      	mov	sp, r7
    674a:	b004      	add	sp, #16
    674c:	bd80      	pop	{r7, pc}
	...

00006750 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6750:	b580      	push	{r7, lr}
    6752:	b088      	sub	sp, #32
    6754:	af00      	add	r7, sp, #0
    6756:	0002      	movs	r2, r0
    6758:	1dfb      	adds	r3, r7, #7
    675a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    675c:	1dfb      	adds	r3, r7, #7
    675e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    6760:	4ba3      	ldr	r3, [pc, #652]	; (69f0 <_usart_interrupt_handler+0x2a0>)
    6762:	0092      	lsls	r2, r2, #2
    6764:	58d3      	ldr	r3, [r2, r3]
    6766:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6768:	69bb      	ldr	r3, [r7, #24]
    676a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    676c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    676e:	69bb      	ldr	r3, [r7, #24]
    6770:	0018      	movs	r0, r3
    6772:	4ba0      	ldr	r3, [pc, #640]	; (69f4 <_usart_interrupt_handler+0x2a4>)
    6774:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6776:	697b      	ldr	r3, [r7, #20]
    6778:	7e1b      	ldrb	r3, [r3, #24]
    677a:	b2da      	uxtb	r2, r3
    677c:	2312      	movs	r3, #18
    677e:	18fb      	adds	r3, r7, r3
    6780:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    6782:	697b      	ldr	r3, [r7, #20]
    6784:	7d9b      	ldrb	r3, [r3, #22]
    6786:	b2db      	uxtb	r3, r3
    6788:	b29a      	uxth	r2, r3
    678a:	2312      	movs	r3, #18
    678c:	18fb      	adds	r3, r7, r3
    678e:	2112      	movs	r1, #18
    6790:	1879      	adds	r1, r7, r1
    6792:	8809      	ldrh	r1, [r1, #0]
    6794:	400a      	ands	r2, r1
    6796:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    6798:	69bb      	ldr	r3, [r7, #24]
    679a:	2230      	movs	r2, #48	; 0x30
    679c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    679e:	69ba      	ldr	r2, [r7, #24]
    67a0:	2131      	movs	r1, #49	; 0x31
    67a2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    67a4:	4013      	ands	r3, r2
    67a6:	b2da      	uxtb	r2, r3
    67a8:	2310      	movs	r3, #16
    67aa:	18fb      	adds	r3, r7, r3
    67ac:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    67ae:	2312      	movs	r3, #18
    67b0:	18fb      	adds	r3, r7, r3
    67b2:	881b      	ldrh	r3, [r3, #0]
    67b4:	2201      	movs	r2, #1
    67b6:	4013      	ands	r3, r2
    67b8:	d044      	beq.n	6844 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    67ba:	69bb      	ldr	r3, [r7, #24]
    67bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    67be:	b29b      	uxth	r3, r3
    67c0:	2b00      	cmp	r3, #0
    67c2:	d03c      	beq.n	683e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    67c4:	69bb      	ldr	r3, [r7, #24]
    67c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	b2da      	uxtb	r2, r3
    67cc:	231c      	movs	r3, #28
    67ce:	18fb      	adds	r3, r7, r3
    67d0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    67d2:	69bb      	ldr	r3, [r7, #24]
    67d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d6:	1c5a      	adds	r2, r3, #1
    67d8:	69bb      	ldr	r3, [r7, #24]
    67da:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67dc:	69bb      	ldr	r3, [r7, #24]
    67de:	795b      	ldrb	r3, [r3, #5]
    67e0:	2b01      	cmp	r3, #1
    67e2:	d113      	bne.n	680c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    67e4:	69bb      	ldr	r3, [r7, #24]
    67e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	b2db      	uxtb	r3, r3
    67ec:	021b      	lsls	r3, r3, #8
    67ee:	b21a      	sxth	r2, r3
    67f0:	231c      	movs	r3, #28
    67f2:	18fb      	adds	r3, r7, r3
    67f4:	2100      	movs	r1, #0
    67f6:	5e5b      	ldrsh	r3, [r3, r1]
    67f8:	4313      	orrs	r3, r2
    67fa:	b21a      	sxth	r2, r3
    67fc:	231c      	movs	r3, #28
    67fe:	18fb      	adds	r3, r7, r3
    6800:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    6802:	69bb      	ldr	r3, [r7, #24]
    6804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6806:	1c5a      	adds	r2, r3, #1
    6808:	69bb      	ldr	r3, [r7, #24]
    680a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    680c:	231c      	movs	r3, #28
    680e:	18fb      	adds	r3, r7, r3
    6810:	881b      	ldrh	r3, [r3, #0]
    6812:	05db      	lsls	r3, r3, #23
    6814:	0ddb      	lsrs	r3, r3, #23
    6816:	b29a      	uxth	r2, r3
    6818:	697b      	ldr	r3, [r7, #20]
    681a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    681c:	69bb      	ldr	r3, [r7, #24]
    681e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6820:	b29b      	uxth	r3, r3
    6822:	3b01      	subs	r3, #1
    6824:	b29b      	uxth	r3, r3
    6826:	69ba      	ldr	r2, [r7, #24]
    6828:	1c19      	adds	r1, r3, #0
    682a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    682c:	2b00      	cmp	r3, #0
    682e:	d109      	bne.n	6844 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6830:	697b      	ldr	r3, [r7, #20]
    6832:	2201      	movs	r2, #1
    6834:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6836:	697b      	ldr	r3, [r7, #20]
    6838:	2202      	movs	r2, #2
    683a:	759a      	strb	r2, [r3, #22]
    683c:	e002      	b.n	6844 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    683e:	697b      	ldr	r3, [r7, #20]
    6840:	2201      	movs	r2, #1
    6842:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6844:	2312      	movs	r3, #18
    6846:	18fb      	adds	r3, r7, r3
    6848:	881b      	ldrh	r3, [r3, #0]
    684a:	2202      	movs	r2, #2
    684c:	4013      	ands	r3, r2
    684e:	d011      	beq.n	6874 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6850:	697b      	ldr	r3, [r7, #20]
    6852:	2202      	movs	r2, #2
    6854:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    6856:	69bb      	ldr	r3, [r7, #24]
    6858:	2233      	movs	r2, #51	; 0x33
    685a:	2100      	movs	r1, #0
    685c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    685e:	2310      	movs	r3, #16
    6860:	18fb      	adds	r3, r7, r3
    6862:	881b      	ldrh	r3, [r3, #0]
    6864:	2201      	movs	r2, #1
    6866:	4013      	ands	r3, r2
    6868:	d004      	beq.n	6874 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    686a:	69bb      	ldr	r3, [r7, #24]
    686c:	68db      	ldr	r3, [r3, #12]
    686e:	69ba      	ldr	r2, [r7, #24]
    6870:	0010      	movs	r0, r2
    6872:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6874:	2312      	movs	r3, #18
    6876:	18fb      	adds	r3, r7, r3
    6878:	881b      	ldrh	r3, [r3, #0]
    687a:	2204      	movs	r2, #4
    687c:	4013      	ands	r3, r2
    687e:	d100      	bne.n	6882 <_usart_interrupt_handler+0x132>
    6880:	e0bd      	b.n	69fe <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    6882:	69bb      	ldr	r3, [r7, #24]
    6884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6886:	b29b      	uxth	r3, r3
    6888:	2b00      	cmp	r3, #0
    688a:	d100      	bne.n	688e <_usart_interrupt_handler+0x13e>
    688c:	e0b4      	b.n	69f8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    688e:	697b      	ldr	r3, [r7, #20]
    6890:	8b5b      	ldrh	r3, [r3, #26]
    6892:	b29b      	uxth	r3, r3
    6894:	b2da      	uxtb	r2, r3
    6896:	231f      	movs	r3, #31
    6898:	18fb      	adds	r3, r7, r3
    689a:	213f      	movs	r1, #63	; 0x3f
    689c:	400a      	ands	r2, r1
    689e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    68a0:	231f      	movs	r3, #31
    68a2:	18fb      	adds	r3, r7, r3
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	2208      	movs	r2, #8
    68a8:	4013      	ands	r3, r2
    68aa:	d007      	beq.n	68bc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    68ac:	231f      	movs	r3, #31
    68ae:	18fb      	adds	r3, r7, r3
    68b0:	221f      	movs	r2, #31
    68b2:	18ba      	adds	r2, r7, r2
    68b4:	7812      	ldrb	r2, [r2, #0]
    68b6:	2108      	movs	r1, #8
    68b8:	438a      	bics	r2, r1
    68ba:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    68bc:	231f      	movs	r3, #31
    68be:	18fb      	adds	r3, r7, r3
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d050      	beq.n	6968 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    68c6:	231f      	movs	r3, #31
    68c8:	18fb      	adds	r3, r7, r3
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	2202      	movs	r2, #2
    68ce:	4013      	ands	r3, r2
    68d0:	d007      	beq.n	68e2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    68d2:	69bb      	ldr	r3, [r7, #24]
    68d4:	2232      	movs	r2, #50	; 0x32
    68d6:	211a      	movs	r1, #26
    68d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    68da:	697b      	ldr	r3, [r7, #20]
    68dc:	2202      	movs	r2, #2
    68de:	835a      	strh	r2, [r3, #26]
    68e0:	e036      	b.n	6950 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    68e2:	231f      	movs	r3, #31
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	2204      	movs	r2, #4
    68ea:	4013      	ands	r3, r2
    68ec:	d007      	beq.n	68fe <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    68ee:	69bb      	ldr	r3, [r7, #24]
    68f0:	2232      	movs	r2, #50	; 0x32
    68f2:	211e      	movs	r1, #30
    68f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    68f6:	697b      	ldr	r3, [r7, #20]
    68f8:	2204      	movs	r2, #4
    68fa:	835a      	strh	r2, [r3, #26]
    68fc:	e028      	b.n	6950 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    68fe:	231f      	movs	r3, #31
    6900:	18fb      	adds	r3, r7, r3
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	2201      	movs	r2, #1
    6906:	4013      	ands	r3, r2
    6908:	d007      	beq.n	691a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    690a:	69bb      	ldr	r3, [r7, #24]
    690c:	2232      	movs	r2, #50	; 0x32
    690e:	2113      	movs	r1, #19
    6910:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6912:	697b      	ldr	r3, [r7, #20]
    6914:	2201      	movs	r2, #1
    6916:	835a      	strh	r2, [r3, #26]
    6918:	e01a      	b.n	6950 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    691a:	231f      	movs	r3, #31
    691c:	18fb      	adds	r3, r7, r3
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	2210      	movs	r2, #16
    6922:	4013      	ands	r3, r2
    6924:	d007      	beq.n	6936 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    6926:	69bb      	ldr	r3, [r7, #24]
    6928:	2232      	movs	r2, #50	; 0x32
    692a:	2142      	movs	r1, #66	; 0x42
    692c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    692e:	697b      	ldr	r3, [r7, #20]
    6930:	2210      	movs	r2, #16
    6932:	835a      	strh	r2, [r3, #26]
    6934:	e00c      	b.n	6950 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6936:	231f      	movs	r3, #31
    6938:	18fb      	adds	r3, r7, r3
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	2220      	movs	r2, #32
    693e:	4013      	ands	r3, r2
    6940:	d006      	beq.n	6950 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6942:	69bb      	ldr	r3, [r7, #24]
    6944:	2232      	movs	r2, #50	; 0x32
    6946:	2141      	movs	r1, #65	; 0x41
    6948:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    694a:	697b      	ldr	r3, [r7, #20]
    694c:	2220      	movs	r2, #32
    694e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6950:	2310      	movs	r3, #16
    6952:	18fb      	adds	r3, r7, r3
    6954:	881b      	ldrh	r3, [r3, #0]
    6956:	2204      	movs	r2, #4
    6958:	4013      	ands	r3, r2
				if (callback_status
    695a:	d050      	beq.n	69fe <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    695c:	69bb      	ldr	r3, [r7, #24]
    695e:	695b      	ldr	r3, [r3, #20]
    6960:	69ba      	ldr	r2, [r7, #24]
    6962:	0010      	movs	r0, r2
    6964:	4798      	blx	r3
    6966:	e04a      	b.n	69fe <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6968:	697b      	ldr	r3, [r7, #20]
    696a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    696c:	b29a      	uxth	r2, r3
    696e:	230e      	movs	r3, #14
    6970:	18fb      	adds	r3, r7, r3
    6972:	05d2      	lsls	r2, r2, #23
    6974:	0dd2      	lsrs	r2, r2, #23
    6976:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6978:	69bb      	ldr	r3, [r7, #24]
    697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    697c:	220e      	movs	r2, #14
    697e:	18ba      	adds	r2, r7, r2
    6980:	8812      	ldrh	r2, [r2, #0]
    6982:	b2d2      	uxtb	r2, r2
    6984:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6986:	69bb      	ldr	r3, [r7, #24]
    6988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    698a:	1c5a      	adds	r2, r3, #1
    698c:	69bb      	ldr	r3, [r7, #24]
    698e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6990:	69bb      	ldr	r3, [r7, #24]
    6992:	795b      	ldrb	r3, [r3, #5]
    6994:	2b01      	cmp	r3, #1
    6996:	d10d      	bne.n	69b4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6998:	69bb      	ldr	r3, [r7, #24]
    699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    699c:	220e      	movs	r2, #14
    699e:	18ba      	adds	r2, r7, r2
    69a0:	8812      	ldrh	r2, [r2, #0]
    69a2:	0a12      	lsrs	r2, r2, #8
    69a4:	b292      	uxth	r2, r2
    69a6:	b2d2      	uxtb	r2, r2
    69a8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    69aa:	69bb      	ldr	r3, [r7, #24]
    69ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69ae:	1c5a      	adds	r2, r3, #1
    69b0:	69bb      	ldr	r3, [r7, #24]
    69b2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    69b4:	69bb      	ldr	r3, [r7, #24]
    69b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    69b8:	b29b      	uxth	r3, r3
    69ba:	3b01      	subs	r3, #1
    69bc:	b29b      	uxth	r3, r3
    69be:	69ba      	ldr	r2, [r7, #24]
    69c0:	1c19      	adds	r1, r3, #0
    69c2:	8591      	strh	r1, [r2, #44]	; 0x2c
    69c4:	2b00      	cmp	r3, #0
    69c6:	d11a      	bne.n	69fe <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69c8:	697b      	ldr	r3, [r7, #20]
    69ca:	2204      	movs	r2, #4
    69cc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    69ce:	69bb      	ldr	r3, [r7, #24]
    69d0:	2232      	movs	r2, #50	; 0x32
    69d2:	2100      	movs	r1, #0
    69d4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    69d6:	2310      	movs	r3, #16
    69d8:	18fb      	adds	r3, r7, r3
    69da:	881b      	ldrh	r3, [r3, #0]
    69dc:	2202      	movs	r2, #2
    69de:	4013      	ands	r3, r2
					if (callback_status
    69e0:	d00d      	beq.n	69fe <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    69e2:	69bb      	ldr	r3, [r7, #24]
    69e4:	691b      	ldr	r3, [r3, #16]
    69e6:	69ba      	ldr	r2, [r7, #24]
    69e8:	0010      	movs	r0, r2
    69ea:	4798      	blx	r3
    69ec:	e007      	b.n	69fe <_usart_interrupt_handler+0x2ae>
    69ee:	46c0      	nop			; (mov r8, r8)
    69f0:	2000052c 	.word	0x2000052c
    69f4:	00006531 	.word	0x00006531
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69f8:	697b      	ldr	r3, [r7, #20]
    69fa:	2204      	movs	r2, #4
    69fc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    69fe:	2312      	movs	r3, #18
    6a00:	18fb      	adds	r3, r7, r3
    6a02:	881b      	ldrh	r3, [r3, #0]
    6a04:	2210      	movs	r2, #16
    6a06:	4013      	ands	r3, r2
    6a08:	d010      	beq.n	6a2c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a0a:	697b      	ldr	r3, [r7, #20]
    6a0c:	2210      	movs	r2, #16
    6a0e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a10:	697b      	ldr	r3, [r7, #20]
    6a12:	2210      	movs	r2, #16
    6a14:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a16:	2310      	movs	r3, #16
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	881b      	ldrh	r3, [r3, #0]
    6a1c:	2210      	movs	r2, #16
    6a1e:	4013      	ands	r3, r2
    6a20:	d004      	beq.n	6a2c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a22:	69bb      	ldr	r3, [r7, #24]
    6a24:	69db      	ldr	r3, [r3, #28]
    6a26:	69ba      	ldr	r2, [r7, #24]
    6a28:	0010      	movs	r0, r2
    6a2a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a2c:	2312      	movs	r3, #18
    6a2e:	18fb      	adds	r3, r7, r3
    6a30:	881b      	ldrh	r3, [r3, #0]
    6a32:	2220      	movs	r2, #32
    6a34:	4013      	ands	r3, r2
    6a36:	d010      	beq.n	6a5a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a38:	697b      	ldr	r3, [r7, #20]
    6a3a:	2220      	movs	r2, #32
    6a3c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a3e:	697b      	ldr	r3, [r7, #20]
    6a40:	2220      	movs	r2, #32
    6a42:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a44:	2310      	movs	r3, #16
    6a46:	18fb      	adds	r3, r7, r3
    6a48:	881b      	ldrh	r3, [r3, #0]
    6a4a:	2208      	movs	r2, #8
    6a4c:	4013      	ands	r3, r2
    6a4e:	d004      	beq.n	6a5a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a50:	69bb      	ldr	r3, [r7, #24]
    6a52:	699b      	ldr	r3, [r3, #24]
    6a54:	69ba      	ldr	r2, [r7, #24]
    6a56:	0010      	movs	r0, r2
    6a58:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a5a:	2312      	movs	r3, #18
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	881b      	ldrh	r3, [r3, #0]
    6a60:	2208      	movs	r2, #8
    6a62:	4013      	ands	r3, r2
    6a64:	d010      	beq.n	6a88 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a66:	697b      	ldr	r3, [r7, #20]
    6a68:	2208      	movs	r2, #8
    6a6a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a6c:	697b      	ldr	r3, [r7, #20]
    6a6e:	2208      	movs	r2, #8
    6a70:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a72:	2310      	movs	r3, #16
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	881b      	ldrh	r3, [r3, #0]
    6a78:	2220      	movs	r2, #32
    6a7a:	4013      	ands	r3, r2
    6a7c:	d004      	beq.n	6a88 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a7e:	69bb      	ldr	r3, [r7, #24]
    6a80:	6a1b      	ldr	r3, [r3, #32]
    6a82:	69ba      	ldr	r2, [r7, #24]
    6a84:	0010      	movs	r0, r2
    6a86:	4798      	blx	r3
		}
	}
#endif
}
    6a88:	46c0      	nop			; (mov r8, r8)
    6a8a:	46bd      	mov	sp, r7
    6a8c:	b008      	add	sp, #32
    6a8e:	bd80      	pop	{r7, pc}

00006a90 <system_pinmux_get_config_defaults>:
{
    6a90:	b580      	push	{r7, lr}
    6a92:	b082      	sub	sp, #8
    6a94:	af00      	add	r7, sp, #0
    6a96:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	2280      	movs	r2, #128	; 0x80
    6a9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	2200      	movs	r2, #0
    6aa2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6aa4:	687b      	ldr	r3, [r7, #4]
    6aa6:	2201      	movs	r2, #1
    6aa8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	2200      	movs	r2, #0
    6aae:	70da      	strb	r2, [r3, #3]
}
    6ab0:	46c0      	nop			; (mov r8, r8)
    6ab2:	46bd      	mov	sp, r7
    6ab4:	b002      	add	sp, #8
    6ab6:	bd80      	pop	{r7, pc}

00006ab8 <system_gclk_chan_get_config_defaults>:
{
    6ab8:	b580      	push	{r7, lr}
    6aba:	b082      	sub	sp, #8
    6abc:	af00      	add	r7, sp, #0
    6abe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	2200      	movs	r2, #0
    6ac4:	701a      	strb	r2, [r3, #0]
}
    6ac6:	46c0      	nop			; (mov r8, r8)
    6ac8:	46bd      	mov	sp, r7
    6aca:	b002      	add	sp, #8
    6acc:	bd80      	pop	{r7, pc}
	...

00006ad0 <system_apb_clock_set_mask>:
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b082      	sub	sp, #8
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	0002      	movs	r2, r0
    6ad8:	6039      	str	r1, [r7, #0]
    6ada:	1dfb      	adds	r3, r7, #7
    6adc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6ade:	1dfb      	adds	r3, r7, #7
    6ae0:	781b      	ldrb	r3, [r3, #0]
    6ae2:	2b01      	cmp	r3, #1
    6ae4:	d00a      	beq.n	6afc <system_apb_clock_set_mask+0x2c>
    6ae6:	2b02      	cmp	r3, #2
    6ae8:	d00f      	beq.n	6b0a <system_apb_clock_set_mask+0x3a>
    6aea:	2b00      	cmp	r3, #0
    6aec:	d114      	bne.n	6b18 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6aee:	4b0e      	ldr	r3, [pc, #56]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6af0:	4a0d      	ldr	r2, [pc, #52]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6af2:	6991      	ldr	r1, [r2, #24]
    6af4:	683a      	ldr	r2, [r7, #0]
    6af6:	430a      	orrs	r2, r1
    6af8:	619a      	str	r2, [r3, #24]
			break;
    6afa:	e00f      	b.n	6b1c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6afc:	4b0a      	ldr	r3, [pc, #40]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6afe:	4a0a      	ldr	r2, [pc, #40]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6b00:	69d1      	ldr	r1, [r2, #28]
    6b02:	683a      	ldr	r2, [r7, #0]
    6b04:	430a      	orrs	r2, r1
    6b06:	61da      	str	r2, [r3, #28]
			break;
    6b08:	e008      	b.n	6b1c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6b0a:	4b07      	ldr	r3, [pc, #28]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6b0c:	4a06      	ldr	r2, [pc, #24]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6b0e:	6a11      	ldr	r1, [r2, #32]
    6b10:	683a      	ldr	r2, [r7, #0]
    6b12:	430a      	orrs	r2, r1
    6b14:	621a      	str	r2, [r3, #32]
			break;
    6b16:	e001      	b.n	6b1c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6b18:	2317      	movs	r3, #23
    6b1a:	e000      	b.n	6b1e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6b1c:	2300      	movs	r3, #0
}
    6b1e:	0018      	movs	r0, r3
    6b20:	46bd      	mov	sp, r7
    6b22:	b002      	add	sp, #8
    6b24:	bd80      	pop	{r7, pc}
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	40000400 	.word	0x40000400

00006b2c <system_is_debugger_present>:
{
    6b2c:	b580      	push	{r7, lr}
    6b2e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6b30:	4b05      	ldr	r3, [pc, #20]	; (6b48 <system_is_debugger_present+0x1c>)
    6b32:	789b      	ldrb	r3, [r3, #2]
    6b34:	b2db      	uxtb	r3, r3
    6b36:	001a      	movs	r2, r3
    6b38:	2302      	movs	r3, #2
    6b3a:	4013      	ands	r3, r2
    6b3c:	1e5a      	subs	r2, r3, #1
    6b3e:	4193      	sbcs	r3, r2
    6b40:	b2db      	uxtb	r3, r3
}
    6b42:	0018      	movs	r0, r3
    6b44:	46bd      	mov	sp, r7
    6b46:	bd80      	pop	{r7, pc}
    6b48:	41002000 	.word	0x41002000

00006b4c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6b4c:	b590      	push	{r4, r7, lr}
    6b4e:	b093      	sub	sp, #76	; 0x4c
    6b50:	af00      	add	r7, sp, #0
    6b52:	6078      	str	r0, [r7, #4]
    6b54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6b62:	231c      	movs	r3, #28
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	0018      	movs	r0, r3
    6b68:	4b85      	ldr	r3, [pc, #532]	; (6d80 <_spi_set_config+0x234>)
    6b6a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6b6c:	231c      	movs	r3, #28
    6b6e:	18fb      	adds	r3, r7, r3
    6b70:	2200      	movs	r2, #0
    6b72:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6b74:	683b      	ldr	r3, [r7, #0]
    6b76:	781b      	ldrb	r3, [r3, #0]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d103      	bne.n	6b84 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6b7c:	231c      	movs	r3, #28
    6b7e:	18fb      	adds	r3, r7, r3
    6b80:	2200      	movs	r2, #0
    6b82:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6b84:	683b      	ldr	r3, [r7, #0]
    6b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    6b88:	230c      	movs	r3, #12
    6b8a:	18fb      	adds	r3, r7, r3
    6b8c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6b8e:	683b      	ldr	r3, [r7, #0]
    6b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    6b92:	230c      	movs	r3, #12
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6b98:	683b      	ldr	r3, [r7, #0]
    6b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6b9c:	230c      	movs	r3, #12
    6b9e:	18fb      	adds	r3, r7, r3
    6ba0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6ba2:	683b      	ldr	r3, [r7, #0]
    6ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6ba6:	230c      	movs	r3, #12
    6ba8:	18fb      	adds	r3, r7, r3
    6baa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6bac:	2347      	movs	r3, #71	; 0x47
    6bae:	18fb      	adds	r3, r7, r3
    6bb0:	2200      	movs	r2, #0
    6bb2:	701a      	strb	r2, [r3, #0]
    6bb4:	e02c      	b.n	6c10 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6bb6:	2347      	movs	r3, #71	; 0x47
    6bb8:	18fb      	adds	r3, r7, r3
    6bba:	781a      	ldrb	r2, [r3, #0]
    6bbc:	230c      	movs	r3, #12
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	0092      	lsls	r2, r2, #2
    6bc2:	58d3      	ldr	r3, [r2, r3]
    6bc4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d109      	bne.n	6be0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6bcc:	2347      	movs	r3, #71	; 0x47
    6bce:	18fb      	adds	r3, r7, r3
    6bd0:	781a      	ldrb	r2, [r3, #0]
    6bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6bd4:	0011      	movs	r1, r2
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b6a      	ldr	r3, [pc, #424]	; (6d84 <_spi_set_config+0x238>)
    6bda:	4798      	blx	r3
    6bdc:	0003      	movs	r3, r0
    6bde:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6be2:	3301      	adds	r3, #1
    6be4:	d00d      	beq.n	6c02 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6be8:	b2da      	uxtb	r2, r3
    6bea:	231c      	movs	r3, #28
    6bec:	18fb      	adds	r3, r7, r3
    6bee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bf2:	0c1b      	lsrs	r3, r3, #16
    6bf4:	b2db      	uxtb	r3, r3
    6bf6:	221c      	movs	r2, #28
    6bf8:	18ba      	adds	r2, r7, r2
    6bfa:	0011      	movs	r1, r2
    6bfc:	0018      	movs	r0, r3
    6bfe:	4b62      	ldr	r3, [pc, #392]	; (6d88 <_spi_set_config+0x23c>)
    6c00:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6c02:	2347      	movs	r3, #71	; 0x47
    6c04:	18fb      	adds	r3, r7, r3
    6c06:	781a      	ldrb	r2, [r3, #0]
    6c08:	2347      	movs	r3, #71	; 0x47
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	3201      	adds	r2, #1
    6c0e:	701a      	strb	r2, [r3, #0]
    6c10:	2347      	movs	r3, #71	; 0x47
    6c12:	18fb      	adds	r3, r7, r3
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	2b03      	cmp	r3, #3
    6c18:	d9cd      	bls.n	6bb6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    6c1a:	683b      	ldr	r3, [r7, #0]
    6c1c:	781a      	ldrb	r2, [r3, #0]
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    6c22:	683b      	ldr	r3, [r7, #0]
    6c24:	7c1a      	ldrb	r2, [r3, #16]
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    6c2a:	683b      	ldr	r3, [r7, #0]
    6c2c:	7c9a      	ldrb	r2, [r3, #18]
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    6c32:	683b      	ldr	r3, [r7, #0]
    6c34:	7d1a      	ldrb	r2, [r3, #20]
    6c36:	687b      	ldr	r3, [r7, #4]
    6c38:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    6c3a:	230a      	movs	r3, #10
    6c3c:	18fb      	adds	r3, r7, r3
    6c3e:	2200      	movs	r2, #0
    6c40:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    6c42:	2300      	movs	r3, #0
    6c44:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6c46:	2300      	movs	r3, #0
    6c48:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6c4a:	683b      	ldr	r3, [r7, #0]
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	2b01      	cmp	r3, #1
    6c50:	d129      	bne.n	6ca6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	681b      	ldr	r3, [r3, #0]
    6c56:	0018      	movs	r0, r3
    6c58:	4b4c      	ldr	r3, [pc, #304]	; (6d8c <_spi_set_config+0x240>)
    6c5a:	4798      	blx	r3
    6c5c:	0003      	movs	r3, r0
    6c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c62:	3314      	adds	r3, #20
    6c64:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c68:	b2db      	uxtb	r3, r3
    6c6a:	0018      	movs	r0, r3
    6c6c:	4b48      	ldr	r3, [pc, #288]	; (6d90 <_spi_set_config+0x244>)
    6c6e:	4798      	blx	r3
    6c70:	0003      	movs	r3, r0
    6c72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6c74:	683b      	ldr	r3, [r7, #0]
    6c76:	699b      	ldr	r3, [r3, #24]
    6c78:	2223      	movs	r2, #35	; 0x23
    6c7a:	18bc      	adds	r4, r7, r2
    6c7c:	220a      	movs	r2, #10
    6c7e:	18ba      	adds	r2, r7, r2
    6c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c82:	0018      	movs	r0, r3
    6c84:	4b43      	ldr	r3, [pc, #268]	; (6d94 <_spi_set_config+0x248>)
    6c86:	4798      	blx	r3
    6c88:	0003      	movs	r3, r0
    6c8a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6c8c:	2323      	movs	r3, #35	; 0x23
    6c8e:	18fb      	adds	r3, r7, r3
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d001      	beq.n	6c9a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6c96:	2317      	movs	r3, #23
    6c98:	e06d      	b.n	6d76 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6c9a:	230a      	movs	r3, #10
    6c9c:	18fb      	adds	r3, r7, r3
    6c9e:	881b      	ldrh	r3, [r3, #0]
    6ca0:	b2da      	uxtb	r2, r3
    6ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ca4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    6ca6:	683b      	ldr	r3, [r7, #0]
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	2b00      	cmp	r3, #0
    6cac:	d11a      	bne.n	6ce4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    6cae:	683b      	ldr	r3, [r7, #0]
    6cb0:	699b      	ldr	r3, [r3, #24]
    6cb2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    6cb4:	683b      	ldr	r3, [r7, #0]
    6cb6:	8b9b      	ldrh	r3, [r3, #28]
    6cb8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    6cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    6cbe:	683a      	ldr	r2, [r7, #0]
    6cc0:	7f92      	ldrb	r2, [r2, #30]
    6cc2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    6cc4:	683a      	ldr	r2, [r7, #0]
    6cc6:	7fd2      	ldrb	r2, [r2, #31]
    6cc8:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    6cca:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    6ccc:	431a      	orrs	r2, r3
    6cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6cd0:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    6cd2:	683b      	ldr	r3, [r7, #0]
    6cd4:	2220      	movs	r2, #32
    6cd6:	5c9b      	ldrb	r3, [r3, r2]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d003      	beq.n	6ce4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    6cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6cde:	2240      	movs	r2, #64	; 0x40
    6ce0:	4313      	orrs	r3, r2
    6ce2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6ce4:	683b      	ldr	r3, [r7, #0]
    6ce6:	685b      	ldr	r3, [r3, #4]
    6ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6cea:	4313      	orrs	r3, r2
    6cec:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    6cee:	683b      	ldr	r3, [r7, #0]
    6cf0:	689b      	ldr	r3, [r3, #8]
    6cf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6cf4:	4313      	orrs	r3, r2
    6cf6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6cf8:	683b      	ldr	r3, [r7, #0]
    6cfa:	68db      	ldr	r3, [r3, #12]
    6cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6cfe:	4313      	orrs	r3, r2
    6d00:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6d02:	683b      	ldr	r3, [r7, #0]
    6d04:	7c1b      	ldrb	r3, [r3, #16]
    6d06:	001a      	movs	r2, r3
    6d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d0a:	4313      	orrs	r3, r2
    6d0c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6d0e:	683b      	ldr	r3, [r7, #0]
    6d10:	7c5b      	ldrb	r3, [r3, #17]
    6d12:	2b00      	cmp	r3, #0
    6d14:	d103      	bne.n	6d1e <_spi_set_config+0x1d2>
    6d16:	4b20      	ldr	r3, [pc, #128]	; (6d98 <_spi_set_config+0x24c>)
    6d18:	4798      	blx	r3
    6d1a:	1e03      	subs	r3, r0, #0
    6d1c:	d003      	beq.n	6d26 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d20:	2280      	movs	r2, #128	; 0x80
    6d22:	4313      	orrs	r3, r2
    6d24:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    6d26:	683b      	ldr	r3, [r7, #0]
    6d28:	7c9b      	ldrb	r3, [r3, #18]
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d004      	beq.n	6d38 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d30:	2280      	movs	r2, #128	; 0x80
    6d32:	0292      	lsls	r2, r2, #10
    6d34:	4313      	orrs	r3, r2
    6d36:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    6d38:	683b      	ldr	r3, [r7, #0]
    6d3a:	7cdb      	ldrb	r3, [r3, #19]
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d004      	beq.n	6d4a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d42:	2280      	movs	r2, #128	; 0x80
    6d44:	0092      	lsls	r2, r2, #2
    6d46:	4313      	orrs	r3, r2
    6d48:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    6d4a:	683b      	ldr	r3, [r7, #0]
    6d4c:	7d1b      	ldrb	r3, [r3, #20]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d004      	beq.n	6d5c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d54:	2280      	movs	r2, #128	; 0x80
    6d56:	0192      	lsls	r2, r2, #6
    6d58:	4313      	orrs	r3, r2
    6d5a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    6d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d5e:	681a      	ldr	r2, [r3, #0]
    6d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d62:	431a      	orrs	r2, r3
    6d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d66:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    6d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d6a:	685a      	ldr	r2, [r3, #4]
    6d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d6e:	431a      	orrs	r2, r3
    6d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d72:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    6d74:	2300      	movs	r3, #0
}
    6d76:	0018      	movs	r0, r3
    6d78:	46bd      	mov	sp, r7
    6d7a:	b013      	add	sp, #76	; 0x4c
    6d7c:	bd90      	pop	{r4, r7, pc}
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	00006a91 	.word	0x00006a91
    6d84:	00007845 	.word	0x00007845
    6d88:	000088d9 	.word	0x000088d9
    6d8c:	00007a01 	.word	0x00007a01
    6d90:	00008711 	.word	0x00008711
    6d94:	0000754f 	.word	0x0000754f
    6d98:	00006b2d 	.word	0x00006b2d

00006d9c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6d9c:	b590      	push	{r4, r7, lr}
    6d9e:	b08b      	sub	sp, #44	; 0x2c
    6da0:	af00      	add	r7, sp, #0
    6da2:	60f8      	str	r0, [r7, #12]
    6da4:	60b9      	str	r1, [r7, #8]
    6da6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	68ba      	ldr	r2, [r7, #8]
    6dac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    6dae:	68fb      	ldr	r3, [r7, #12]
    6db0:	681b      	ldr	r3, [r3, #0]
    6db2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6db4:	6a3b      	ldr	r3, [r7, #32]
    6db6:	681b      	ldr	r3, [r3, #0]
    6db8:	2202      	movs	r2, #2
    6dba:	4013      	ands	r3, r2
    6dbc:	d001      	beq.n	6dc2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    6dbe:	231c      	movs	r3, #28
    6dc0:	e0a6      	b.n	6f10 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6dc2:	6a3b      	ldr	r3, [r7, #32]
    6dc4:	681b      	ldr	r3, [r3, #0]
    6dc6:	2201      	movs	r2, #1
    6dc8:	4013      	ands	r3, r2
    6dca:	d001      	beq.n	6dd0 <spi_init+0x34>
		return STATUS_BUSY;
    6dcc:	2305      	movs	r3, #5
    6dce:	e09f      	b.n	6f10 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6dd0:	68fb      	ldr	r3, [r7, #12]
    6dd2:	681b      	ldr	r3, [r3, #0]
    6dd4:	0018      	movs	r0, r3
    6dd6:	4b50      	ldr	r3, [pc, #320]	; (6f18 <spi_init+0x17c>)
    6dd8:	4798      	blx	r3
    6dda:	0003      	movs	r3, r0
    6ddc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6dde:	69fb      	ldr	r3, [r7, #28]
    6de0:	3302      	adds	r3, #2
    6de2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6de4:	69fb      	ldr	r3, [r7, #28]
    6de6:	3314      	adds	r3, #20
    6de8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6dea:	2201      	movs	r2, #1
    6dec:	69bb      	ldr	r3, [r7, #24]
    6dee:	409a      	lsls	r2, r3
    6df0:	0013      	movs	r3, r2
    6df2:	0019      	movs	r1, r3
    6df4:	2002      	movs	r0, #2
    6df6:	4b49      	ldr	r3, [pc, #292]	; (6f1c <spi_init+0x180>)
    6df8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6dfa:	2310      	movs	r3, #16
    6dfc:	18fb      	adds	r3, r7, r3
    6dfe:	0018      	movs	r0, r3
    6e00:	4b47      	ldr	r3, [pc, #284]	; (6f20 <spi_init+0x184>)
    6e02:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	2224      	movs	r2, #36	; 0x24
    6e08:	5c9a      	ldrb	r2, [r3, r2]
    6e0a:	2310      	movs	r3, #16
    6e0c:	18fb      	adds	r3, r7, r3
    6e0e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6e10:	697b      	ldr	r3, [r7, #20]
    6e12:	b2db      	uxtb	r3, r3
    6e14:	2210      	movs	r2, #16
    6e16:	18ba      	adds	r2, r7, r2
    6e18:	0011      	movs	r1, r2
    6e1a:	0018      	movs	r0, r3
    6e1c:	4b41      	ldr	r3, [pc, #260]	; (6f24 <spi_init+0x188>)
    6e1e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6e20:	697b      	ldr	r3, [r7, #20]
    6e22:	b2db      	uxtb	r3, r3
    6e24:	0018      	movs	r0, r3
    6e26:	4b40      	ldr	r3, [pc, #256]	; (6f28 <spi_init+0x18c>)
    6e28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	2224      	movs	r2, #36	; 0x24
    6e2e:	5c9b      	ldrb	r3, [r3, r2]
    6e30:	2100      	movs	r1, #0
    6e32:	0018      	movs	r0, r3
    6e34:	4b3d      	ldr	r3, [pc, #244]	; (6f2c <spi_init+0x190>)
    6e36:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	781b      	ldrb	r3, [r3, #0]
    6e3c:	2b01      	cmp	r3, #1
    6e3e:	d105      	bne.n	6e4c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6e40:	6a3b      	ldr	r3, [r7, #32]
    6e42:	681b      	ldr	r3, [r3, #0]
    6e44:	220c      	movs	r2, #12
    6e46:	431a      	orrs	r2, r3
    6e48:	6a3b      	ldr	r3, [r7, #32]
    6e4a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d105      	bne.n	6e60 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    6e54:	6a3b      	ldr	r3, [r7, #32]
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	2208      	movs	r2, #8
    6e5a:	431a      	orrs	r2, r3
    6e5c:	6a3b      	ldr	r3, [r7, #32]
    6e5e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    6e60:	2327      	movs	r3, #39	; 0x27
    6e62:	18fb      	adds	r3, r7, r3
    6e64:	2200      	movs	r2, #0
    6e66:	701a      	strb	r2, [r3, #0]
    6e68:	e010      	b.n	6e8c <spi_init+0xf0>
		module->callback[i]        = NULL;
    6e6a:	2327      	movs	r3, #39	; 0x27
    6e6c:	18fb      	adds	r3, r7, r3
    6e6e:	781b      	ldrb	r3, [r3, #0]
    6e70:	68fa      	ldr	r2, [r7, #12]
    6e72:	3302      	adds	r3, #2
    6e74:	009b      	lsls	r3, r3, #2
    6e76:	18d3      	adds	r3, r2, r3
    6e78:	3304      	adds	r3, #4
    6e7a:	2200      	movs	r2, #0
    6e7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    6e7e:	2327      	movs	r3, #39	; 0x27
    6e80:	18fb      	adds	r3, r7, r3
    6e82:	781a      	ldrb	r2, [r3, #0]
    6e84:	2327      	movs	r3, #39	; 0x27
    6e86:	18fb      	adds	r3, r7, r3
    6e88:	3201      	adds	r2, #1
    6e8a:	701a      	strb	r2, [r3, #0]
    6e8c:	2327      	movs	r3, #39	; 0x27
    6e8e:	18fb      	adds	r3, r7, r3
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	2b06      	cmp	r3, #6
    6e94:	d9e9      	bls.n	6e6a <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    6e96:	68fb      	ldr	r3, [r7, #12]
    6e98:	2200      	movs	r2, #0
    6e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    6e9c:	68fb      	ldr	r3, [r7, #12]
    6e9e:	2200      	movs	r2, #0
    6ea0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    6ea2:	68fb      	ldr	r3, [r7, #12]
    6ea4:	2200      	movs	r2, #0
    6ea6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    6ea8:	68fb      	ldr	r3, [r7, #12]
    6eaa:	2200      	movs	r2, #0
    6eac:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	2236      	movs	r2, #54	; 0x36
    6eb2:	2100      	movs	r1, #0
    6eb4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    6eb6:	68fb      	ldr	r3, [r7, #12]
    6eb8:	2237      	movs	r2, #55	; 0x37
    6eba:	2100      	movs	r1, #0
    6ebc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    6ebe:	68fb      	ldr	r3, [r7, #12]
    6ec0:	2238      	movs	r2, #56	; 0x38
    6ec2:	2100      	movs	r1, #0
    6ec4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    6ec6:	68fb      	ldr	r3, [r7, #12]
    6ec8:	2203      	movs	r2, #3
    6eca:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    6ecc:	68fb      	ldr	r3, [r7, #12]
    6ece:	2200      	movs	r2, #0
    6ed0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    6ed2:	68fb      	ldr	r3, [r7, #12]
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	2213      	movs	r2, #19
    6ed8:	18bc      	adds	r4, r7, r2
    6eda:	0018      	movs	r0, r3
    6edc:	4b0e      	ldr	r3, [pc, #56]	; (6f18 <spi_init+0x17c>)
    6ede:	4798      	blx	r3
    6ee0:	0003      	movs	r3, r0
    6ee2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    6ee4:	4a12      	ldr	r2, [pc, #72]	; (6f30 <spi_init+0x194>)
    6ee6:	2313      	movs	r3, #19
    6ee8:	18fb      	adds	r3, r7, r3
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	0011      	movs	r1, r2
    6eee:	0018      	movs	r0, r3
    6ef0:	4b10      	ldr	r3, [pc, #64]	; (6f34 <spi_init+0x198>)
    6ef2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6ef4:	2313      	movs	r3, #19
    6ef6:	18fb      	adds	r3, r7, r3
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	4b0f      	ldr	r3, [pc, #60]	; (6f38 <spi_init+0x19c>)
    6efc:	0092      	lsls	r2, r2, #2
    6efe:	68f9      	ldr	r1, [r7, #12]
    6f00:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    6f02:	687a      	ldr	r2, [r7, #4]
    6f04:	68fb      	ldr	r3, [r7, #12]
    6f06:	0011      	movs	r1, r2
    6f08:	0018      	movs	r0, r3
    6f0a:	4b0c      	ldr	r3, [pc, #48]	; (6f3c <spi_init+0x1a0>)
    6f0c:	4798      	blx	r3
    6f0e:	0003      	movs	r3, r0
}
    6f10:	0018      	movs	r0, r3
    6f12:	46bd      	mov	sp, r7
    6f14:	b00b      	add	sp, #44	; 0x2c
    6f16:	bd90      	pop	{r4, r7, pc}
    6f18:	00007a01 	.word	0x00007a01
    6f1c:	00006ad1 	.word	0x00006ad1
    6f20:	00006ab9 	.word	0x00006ab9
    6f24:	000085ed 	.word	0x000085ed
    6f28:	00008631 	.word	0x00008631
    6f2c:	000077b9 	.word	0x000077b9
    6f30:	0000714d 	.word	0x0000714d
    6f34:	00007a65 	.word	0x00007a65
    6f38:	2000052c 	.word	0x2000052c
    6f3c:	00006b4d 	.word	0x00006b4d

00006f40 <_spi_write_buffer>:
 */
static void _spi_write_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b086      	sub	sp, #24
    6f44:	af00      	add	r7, sp, #0
    6f46:	60f8      	str	r0, [r7, #12]
    6f48:	60b9      	str	r1, [r7, #8]
    6f4a:	1dbb      	adds	r3, r7, #6
    6f4c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    6f4e:	68fb      	ldr	r3, [r7, #12]
    6f50:	1dba      	adds	r2, r7, #6
    6f52:	8812      	ldrh	r2, [r2, #0]
    6f54:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	1dba      	adds	r2, r7, #6
    6f5a:	8812      	ldrh	r2, [r2, #0]
    6f5c:	865a      	strh	r2, [r3, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	68ba      	ldr	r2, [r7, #8]
    6f62:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	2238      	movs	r2, #56	; 0x38
    6f68:	2105      	movs	r1, #5
    6f6a:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_WRITE;
    6f6c:	68fb      	ldr	r3, [r7, #12]
    6f6e:	2201      	movs	r2, #1
    6f70:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    6f72:	68fb      	ldr	r3, [r7, #12]
    6f74:	681b      	ldr	r3, [r3, #0]
    6f76:	617b      	str	r3, [r7, #20]

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    6f78:	68fb      	ldr	r3, [r7, #12]
    6f7a:	795b      	ldrb	r3, [r3, #5]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d105      	bne.n	6f8c <_spi_write_buffer+0x4c>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6f80:	697b      	ldr	r3, [r7, #20]
    6f82:	2202      	movs	r2, #2
    6f84:	761a      	strb	r2, [r3, #24]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6f86:	697b      	ldr	r3, [r7, #20]
    6f88:	2202      	movs	r2, #2
    6f8a:	759a      	strb	r2, [r3, #22]
	}
#  endif

	if (module->receiver_enabled) {
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	79db      	ldrb	r3, [r3, #7]
    6f90:	2b00      	cmp	r3, #0
    6f92:	d003      	beq.n	6f9c <_spi_write_buffer+0x5c>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    6f94:	697b      	ldr	r3, [r7, #20]
    6f96:	2205      	movs	r2, #5
    6f98:	759a      	strb	r2, [r3, #22]
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
}
    6f9a:	e002      	b.n	6fa2 <_spi_write_buffer+0x62>
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    6f9c:	697b      	ldr	r3, [r7, #20]
    6f9e:	2201      	movs	r2, #1
    6fa0:	759a      	strb	r2, [r3, #22]
}
    6fa2:	46c0      	nop			; (mov r8, r8)
    6fa4:	46bd      	mov	sp, r7
    6fa6:	b006      	add	sp, #24
    6fa8:	bd80      	pop	{r7, pc}
	...

00006fac <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6fac:	b580      	push	{r7, lr}
    6fae:	b084      	sub	sp, #16
    6fb0:	af00      	add	r7, sp, #0
    6fb2:	60f8      	str	r0, [r7, #12]
    6fb4:	60b9      	str	r1, [r7, #8]
    6fb6:	1dbb      	adds	r3, r7, #6
    6fb8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    6fba:	1dbb      	adds	r3, r7, #6
    6fbc:	881b      	ldrh	r3, [r3, #0]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d101      	bne.n	6fc6 <spi_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6fc2:	2317      	movs	r3, #23
    6fc4:	e00f      	b.n	6fe6 <spi_write_buffer_job+0x3a>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    6fc6:	68fb      	ldr	r3, [r7, #12]
    6fc8:	2238      	movs	r2, #56	; 0x38
    6fca:	5c9b      	ldrb	r3, [r3, r2]
    6fcc:	b2db      	uxtb	r3, r3
    6fce:	2b05      	cmp	r3, #5
    6fd0:	d101      	bne.n	6fd6 <spi_write_buffer_job+0x2a>
		return STATUS_BUSY;
    6fd2:	2305      	movs	r3, #5
    6fd4:	e007      	b.n	6fe6 <spi_write_buffer_job+0x3a>
	}

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);
    6fd6:	1dbb      	adds	r3, r7, #6
    6fd8:	881a      	ldrh	r2, [r3, #0]
    6fda:	68b9      	ldr	r1, [r7, #8]
    6fdc:	68fb      	ldr	r3, [r7, #12]
    6fde:	0018      	movs	r0, r3
    6fe0:	4b03      	ldr	r3, [pc, #12]	; (6ff0 <spi_write_buffer_job+0x44>)
    6fe2:	4798      	blx	r3

	return STATUS_OK;
    6fe4:	2300      	movs	r3, #0
}
    6fe6:	0018      	movs	r0, r3
    6fe8:	46bd      	mov	sp, r7
    6fea:	b004      	add	sp, #16
    6fec:	bd80      	pop	{r7, pc}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	00006f41 	.word	0x00006f41

00006ff4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b084      	sub	sp, #16
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	681b      	ldr	r3, [r3, #0]
    7000:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	b2da      	uxtb	r2, r3
    700a:	230e      	movs	r3, #14
    700c:	18fb      	adds	r3, r7, r3
    700e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7014:	1c5a      	adds	r2, r3, #1
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	799b      	ldrb	r3, [r3, #6]
    701e:	2b01      	cmp	r3, #1
    7020:	d113      	bne.n	704a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    7022:	687b      	ldr	r3, [r7, #4]
    7024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	b2db      	uxtb	r3, r3
    702a:	021b      	lsls	r3, r3, #8
    702c:	b21a      	sxth	r2, r3
    702e:	230e      	movs	r3, #14
    7030:	18fb      	adds	r3, r7, r3
    7032:	2100      	movs	r1, #0
    7034:	5e5b      	ldrsh	r3, [r3, r1]
    7036:	4313      	orrs	r3, r2
    7038:	b21a      	sxth	r2, r3
    703a:	230e      	movs	r3, #14
    703c:	18fb      	adds	r3, r7, r3
    703e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7044:	1c5a      	adds	r2, r3, #1
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    704a:	230e      	movs	r3, #14
    704c:	18fb      	adds	r3, r7, r3
    704e:	881b      	ldrh	r3, [r3, #0]
    7050:	05db      	lsls	r3, r3, #23
    7052:	0dda      	lsrs	r2, r3, #23
    7054:	68bb      	ldr	r3, [r7, #8]
    7056:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    705c:	b29b      	uxth	r3, r3
    705e:	3b01      	subs	r3, #1
    7060:	b29a      	uxth	r2, r3
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7066:	46c0      	nop			; (mov r8, r8)
    7068:	46bd      	mov	sp, r7
    706a:	b004      	add	sp, #16
    706c:	bd80      	pop	{r7, pc}
	...

00007070 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    7070:	b580      	push	{r7, lr}
    7072:	b084      	sub	sp, #16
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    707e:	4b08      	ldr	r3, [pc, #32]	; (70a0 <_spi_write_dummy+0x30>)
    7080:	881b      	ldrh	r3, [r3, #0]
    7082:	001a      	movs	r2, r3
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    708c:	b29b      	uxth	r3, r3
    708e:	3b01      	subs	r3, #1
    7090:	b29a      	uxth	r2, r3
    7092:	687b      	ldr	r3, [r7, #4]
    7094:	865a      	strh	r2, [r3, #50]	; 0x32
}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	46bd      	mov	sp, r7
    709a:	b004      	add	sp, #16
    709c:	bd80      	pop	{r7, pc}
    709e:	46c0      	nop			; (mov r8, r8)
    70a0:	20000528 	.word	0x20000528

000070a4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    70a4:	b580      	push	{r7, lr}
    70a6:	b084      	sub	sp, #16
    70a8:	af00      	add	r7, sp, #0
    70aa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	681b      	ldr	r3, [r3, #0]
    70b0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    70b2:	230a      	movs	r3, #10
    70b4:	18fb      	adds	r3, r7, r3
    70b6:	2200      	movs	r2, #0
    70b8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    70be:	230a      	movs	r3, #10
    70c0:	18fb      	adds	r3, r7, r3
    70c2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    70c8:	b29b      	uxth	r3, r3
    70ca:	3b01      	subs	r3, #1
    70cc:	b29a      	uxth	r2, r3
    70ce:	687b      	ldr	r3, [r7, #4]
    70d0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	46bd      	mov	sp, r7
    70d6:	b004      	add	sp, #16
    70d8:	bd80      	pop	{r7, pc}

000070da <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    70da:	b580      	push	{r7, lr}
    70dc:	b084      	sub	sp, #16
    70de:	af00      	add	r7, sp, #0
    70e0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	681b      	ldr	r3, [r3, #0]
    70e6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    70e8:	68fb      	ldr	r3, [r7, #12]
    70ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ec:	b29a      	uxth	r2, r3
    70ee:	230a      	movs	r3, #10
    70f0:	18fb      	adds	r3, r7, r3
    70f2:	05d2      	lsls	r2, r2, #23
    70f4:	0dd2      	lsrs	r2, r2, #23
    70f6:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70fc:	220a      	movs	r2, #10
    70fe:	18ba      	adds	r2, r7, r2
    7100:	8812      	ldrh	r2, [r2, #0]
    7102:	b2d2      	uxtb	r2, r2
    7104:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    710a:	1c5a      	adds	r2, r3, #1
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7110:	687b      	ldr	r3, [r7, #4]
    7112:	799b      	ldrb	r3, [r3, #6]
    7114:	2b01      	cmp	r3, #1
    7116:	d10d      	bne.n	7134 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    711c:	220a      	movs	r2, #10
    711e:	18ba      	adds	r2, r7, r2
    7120:	8812      	ldrh	r2, [r2, #0]
    7122:	0a12      	lsrs	r2, r2, #8
    7124:	b292      	uxth	r2, r2
    7126:	b2d2      	uxtb	r2, r2
    7128:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    712e:	1c5a      	adds	r2, r3, #1
    7130:	687b      	ldr	r3, [r7, #4]
    7132:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    7138:	b29b      	uxth	r3, r3
    713a:	3b01      	subs	r3, #1
    713c:	b29a      	uxth	r2, r3
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	861a      	strh	r2, [r3, #48]	; 0x30
}
    7142:	46c0      	nop			; (mov r8, r8)
    7144:	46bd      	mov	sp, r7
    7146:	b004      	add	sp, #16
    7148:	bd80      	pop	{r7, pc}
	...

0000714c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    714c:	b580      	push	{r7, lr}
    714e:	b086      	sub	sp, #24
    7150:	af00      	add	r7, sp, #0
    7152:	0002      	movs	r2, r0
    7154:	1dfb      	adds	r3, r7, #7
    7156:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    7158:	1dfb      	adds	r3, r7, #7
    715a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    715c:	4bb9      	ldr	r3, [pc, #740]	; (7444 <_spi_interrupt_handler+0x2f8>)
    715e:	0092      	lsls	r2, r2, #2
    7160:	58d3      	ldr	r3, [r2, r3]
    7162:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7164:	697b      	ldr	r3, [r7, #20]
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    716a:	697b      	ldr	r3, [r7, #20]
    716c:	2237      	movs	r2, #55	; 0x37
    716e:	5c9a      	ldrb	r2, [r3, r2]
    7170:	697b      	ldr	r3, [r7, #20]
    7172:	2136      	movs	r1, #54	; 0x36
    7174:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    7176:	230f      	movs	r3, #15
    7178:	18fb      	adds	r3, r7, r3
    717a:	400a      	ands	r2, r1
    717c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    717e:	693b      	ldr	r3, [r7, #16]
    7180:	7e1b      	ldrb	r3, [r3, #24]
    7182:	b2da      	uxtb	r2, r3
    7184:	230c      	movs	r3, #12
    7186:	18fb      	adds	r3, r7, r3
    7188:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    718a:	693b      	ldr	r3, [r7, #16]
    718c:	7d9b      	ldrb	r3, [r3, #22]
    718e:	b2db      	uxtb	r3, r3
    7190:	b29a      	uxth	r2, r3
    7192:	230c      	movs	r3, #12
    7194:	18fb      	adds	r3, r7, r3
    7196:	210c      	movs	r1, #12
    7198:	1879      	adds	r1, r7, r1
    719a:	8809      	ldrh	r1, [r1, #0]
    719c:	400a      	ands	r2, r1
    719e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    71a0:	230c      	movs	r3, #12
    71a2:	18fb      	adds	r3, r7, r3
    71a4:	881b      	ldrh	r3, [r3, #0]
    71a6:	2201      	movs	r2, #1
    71a8:	4013      	ands	r3, r2
    71aa:	d041      	beq.n	7230 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    71ac:	697b      	ldr	r3, [r7, #20]
    71ae:	795b      	ldrb	r3, [r3, #5]
    71b0:	2b01      	cmp	r3, #1
    71b2:	d110      	bne.n	71d6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    71b4:	697b      	ldr	r3, [r7, #20]
    71b6:	7a5b      	ldrb	r3, [r3, #9]
    71b8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    71ba:	2b00      	cmp	r3, #0
    71bc:	d10b      	bne.n	71d6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    71be:	697b      	ldr	r3, [r7, #20]
    71c0:	0018      	movs	r0, r3
    71c2:	4ba1      	ldr	r3, [pc, #644]	; (7448 <_spi_interrupt_handler+0x2fc>)
    71c4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    71c6:	697b      	ldr	r3, [r7, #20]
    71c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    71ca:	b29b      	uxth	r3, r3
    71cc:	2b00      	cmp	r3, #0
    71ce:	d102      	bne.n	71d6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    71d0:	693b      	ldr	r3, [r7, #16]
    71d2:	2201      	movs	r2, #1
    71d4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    71d6:	697b      	ldr	r3, [r7, #20]
    71d8:	795b      	ldrb	r3, [r3, #5]
		if (0
    71da:	2b01      	cmp	r3, #1
    71dc:	d104      	bne.n	71e8 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    71de:	697b      	ldr	r3, [r7, #20]
    71e0:	7a5b      	ldrb	r3, [r3, #9]
    71e2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    71e4:	2b00      	cmp	r3, #0
    71e6:	d108      	bne.n	71fa <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    71e8:	697b      	ldr	r3, [r7, #20]
    71ea:	795b      	ldrb	r3, [r3, #5]
    71ec:	2b00      	cmp	r3, #0
    71ee:	d11f      	bne.n	7230 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    71f0:	697b      	ldr	r3, [r7, #20]
    71f2:	7a5b      	ldrb	r3, [r3, #9]
    71f4:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    71f6:	2b00      	cmp	r3, #0
    71f8:	d01a      	beq.n	7230 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    71fa:	697b      	ldr	r3, [r7, #20]
    71fc:	0018      	movs	r0, r3
    71fe:	4b93      	ldr	r3, [pc, #588]	; (744c <_spi_interrupt_handler+0x300>)
    7200:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    7202:	697b      	ldr	r3, [r7, #20]
    7204:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7206:	b29b      	uxth	r3, r3
    7208:	2b00      	cmp	r3, #0
    720a:	d111      	bne.n	7230 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    720c:	693b      	ldr	r3, [r7, #16]
    720e:	2201      	movs	r2, #1
    7210:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    7212:	697b      	ldr	r3, [r7, #20]
    7214:	7a5b      	ldrb	r3, [r3, #9]
    7216:	b2db      	uxtb	r3, r3
    7218:	2b01      	cmp	r3, #1
    721a:	d109      	bne.n	7230 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    721c:	697b      	ldr	r3, [r7, #20]
    721e:	79db      	ldrb	r3, [r3, #7]
    7220:	2201      	movs	r2, #1
    7222:	4053      	eors	r3, r2
    7224:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    7226:	2b00      	cmp	r3, #0
    7228:	d002      	beq.n	7230 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    722a:	693b      	ldr	r3, [r7, #16]
    722c:	2202      	movs	r2, #2
    722e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    7230:	230c      	movs	r3, #12
    7232:	18fb      	adds	r3, r7, r3
    7234:	881b      	ldrh	r3, [r3, #0]
    7236:	2204      	movs	r2, #4
    7238:	4013      	ands	r3, r2
    723a:	d100      	bne.n	723e <_spi_interrupt_handler+0xf2>
    723c:	e07e      	b.n	733c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    723e:	693b      	ldr	r3, [r7, #16]
    7240:	8b5b      	ldrh	r3, [r3, #26]
    7242:	b29b      	uxth	r3, r3
    7244:	001a      	movs	r2, r3
    7246:	2304      	movs	r3, #4
    7248:	4013      	ands	r3, r2
    724a:	d022      	beq.n	7292 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    724c:	697b      	ldr	r3, [r7, #20]
    724e:	7a5b      	ldrb	r3, [r3, #9]
    7250:	b2db      	uxtb	r3, r3
    7252:	2b01      	cmp	r3, #1
    7254:	d014      	beq.n	7280 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7256:	697b      	ldr	r3, [r7, #20]
    7258:	2238      	movs	r2, #56	; 0x38
    725a:	211e      	movs	r1, #30
    725c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    725e:	697b      	ldr	r3, [r7, #20]
    7260:	2203      	movs	r2, #3
    7262:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    7264:	693b      	ldr	r3, [r7, #16]
    7266:	2205      	movs	r2, #5
    7268:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    726a:	230f      	movs	r3, #15
    726c:	18fb      	adds	r3, r7, r3
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	2208      	movs	r2, #8
    7272:	4013      	ands	r3, r2
    7274:	d004      	beq.n	7280 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7276:	697b      	ldr	r3, [r7, #20]
    7278:	699b      	ldr	r3, [r3, #24]
    727a:	697a      	ldr	r2, [r7, #20]
    727c:	0010      	movs	r0, r2
    727e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    7280:	693b      	ldr	r3, [r7, #16]
    7282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7284:	230a      	movs	r3, #10
    7286:	18fb      	adds	r3, r7, r3
    7288:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    728a:	693b      	ldr	r3, [r7, #16]
    728c:	2204      	movs	r2, #4
    728e:	835a      	strh	r2, [r3, #26]
    7290:	e054      	b.n	733c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    7292:	697b      	ldr	r3, [r7, #20]
    7294:	7a5b      	ldrb	r3, [r3, #9]
    7296:	b2db      	uxtb	r3, r3
    7298:	2b01      	cmp	r3, #1
    729a:	d11e      	bne.n	72da <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    729c:	697b      	ldr	r3, [r7, #20]
    729e:	0018      	movs	r0, r3
    72a0:	4b6b      	ldr	r3, [pc, #428]	; (7450 <_spi_interrupt_handler+0x304>)
    72a2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    72a4:	697b      	ldr	r3, [r7, #20]
    72a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    72a8:	b29b      	uxth	r3, r3
    72aa:	2b00      	cmp	r3, #0
    72ac:	d146      	bne.n	733c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    72ae:	693b      	ldr	r3, [r7, #16]
    72b0:	2204      	movs	r2, #4
    72b2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    72b4:	697b      	ldr	r3, [r7, #20]
    72b6:	2238      	movs	r2, #56	; 0x38
    72b8:	2100      	movs	r1, #0
    72ba:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    72bc:	697b      	ldr	r3, [r7, #20]
    72be:	2203      	movs	r2, #3
    72c0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    72c2:	230f      	movs	r3, #15
    72c4:	18fb      	adds	r3, r7, r3
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	2201      	movs	r2, #1
    72ca:	4013      	ands	r3, r2
    72cc:	d036      	beq.n	733c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    72ce:	697b      	ldr	r3, [r7, #20]
    72d0:	68db      	ldr	r3, [r3, #12]
    72d2:	697a      	ldr	r2, [r7, #20]
    72d4:	0010      	movs	r0, r2
    72d6:	4798      	blx	r3
    72d8:	e030      	b.n	733c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    72da:	697b      	ldr	r3, [r7, #20]
    72dc:	0018      	movs	r0, r3
    72de:	4b5d      	ldr	r3, [pc, #372]	; (7454 <_spi_interrupt_handler+0x308>)
    72e0:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    72e2:	697b      	ldr	r3, [r7, #20]
    72e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    72e6:	b29b      	uxth	r3, r3
    72e8:	2b00      	cmp	r3, #0
    72ea:	d127      	bne.n	733c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    72ec:	697b      	ldr	r3, [r7, #20]
    72ee:	2238      	movs	r2, #56	; 0x38
    72f0:	2100      	movs	r1, #0
    72f2:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    72f4:	693b      	ldr	r3, [r7, #16]
    72f6:	2204      	movs	r2, #4
    72f8:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    72fa:	697b      	ldr	r3, [r7, #20]
    72fc:	7a5b      	ldrb	r3, [r3, #9]
    72fe:	b2db      	uxtb	r3, r3
    7300:	2b02      	cmp	r3, #2
    7302:	d10b      	bne.n	731c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    7304:	230f      	movs	r3, #15
    7306:	18fb      	adds	r3, r7, r3
    7308:	781b      	ldrb	r3, [r3, #0]
    730a:	2204      	movs	r2, #4
    730c:	4013      	ands	r3, r2
    730e:	d015      	beq.n	733c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    7310:	697b      	ldr	r3, [r7, #20]
    7312:	695b      	ldr	r3, [r3, #20]
    7314:	697a      	ldr	r2, [r7, #20]
    7316:	0010      	movs	r0, r2
    7318:	4798      	blx	r3
    731a:	e00f      	b.n	733c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    731c:	697b      	ldr	r3, [r7, #20]
    731e:	7a5b      	ldrb	r3, [r3, #9]
    7320:	b2db      	uxtb	r3, r3
    7322:	2b00      	cmp	r3, #0
    7324:	d10a      	bne.n	733c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    7326:	230f      	movs	r3, #15
    7328:	18fb      	adds	r3, r7, r3
    732a:	781b      	ldrb	r3, [r3, #0]
    732c:	2202      	movs	r2, #2
    732e:	4013      	ands	r3, r2
    7330:	d004      	beq.n	733c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    7332:	697b      	ldr	r3, [r7, #20]
    7334:	691b      	ldr	r3, [r3, #16]
    7336:	697a      	ldr	r2, [r7, #20]
    7338:	0010      	movs	r0, r2
    733a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    733c:	230c      	movs	r3, #12
    733e:	18fb      	adds	r3, r7, r3
    7340:	881b      	ldrh	r3, [r3, #0]
    7342:	2202      	movs	r2, #2
    7344:	4013      	ands	r3, r2
    7346:	d046      	beq.n	73d6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    7348:	697b      	ldr	r3, [r7, #20]
    734a:	795b      	ldrb	r3, [r3, #5]
    734c:	2b00      	cmp	r3, #0
    734e:	d11d      	bne.n	738c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    7350:	693b      	ldr	r3, [r7, #16]
    7352:	2207      	movs	r2, #7
    7354:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7356:	693b      	ldr	r3, [r7, #16]
    7358:	2202      	movs	r2, #2
    735a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    735c:	697b      	ldr	r3, [r7, #20]
    735e:	2203      	movs	r2, #3
    7360:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    7362:	697b      	ldr	r3, [r7, #20]
    7364:	2200      	movs	r2, #0
    7366:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    7368:	697b      	ldr	r3, [r7, #20]
    736a:	2200      	movs	r2, #0
    736c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    736e:	697b      	ldr	r3, [r7, #20]
    7370:	2238      	movs	r2, #56	; 0x38
    7372:	2100      	movs	r1, #0
    7374:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    7376:	230f      	movs	r3, #15
    7378:	18fb      	adds	r3, r7, r3
    737a:	781b      	ldrb	r3, [r3, #0]
    737c:	2210      	movs	r2, #16
    737e:	4013      	ands	r3, r2
    7380:	d004      	beq.n	738c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    7382:	697b      	ldr	r3, [r7, #20]
    7384:	69db      	ldr	r3, [r3, #28]
    7386:	697a      	ldr	r2, [r7, #20]
    7388:	0010      	movs	r0, r2
    738a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    738c:	697b      	ldr	r3, [r7, #20]
    738e:	795b      	ldrb	r3, [r3, #5]
    7390:	2b01      	cmp	r3, #1
    7392:	d120      	bne.n	73d6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    7394:	697b      	ldr	r3, [r7, #20]
    7396:	7a5b      	ldrb	r3, [r3, #9]
    7398:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    739a:	2b01      	cmp	r3, #1
    739c:	d11b      	bne.n	73d6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    739e:	697b      	ldr	r3, [r7, #20]
    73a0:	79db      	ldrb	r3, [r3, #7]
    73a2:	2201      	movs	r2, #1
    73a4:	4053      	eors	r3, r2
    73a6:	b2db      	uxtb	r3, r3
    73a8:	2b00      	cmp	r3, #0
    73aa:	d014      	beq.n	73d6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    73ac:	693b      	ldr	r3, [r7, #16]
    73ae:	2202      	movs	r2, #2
    73b0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    73b2:	697b      	ldr	r3, [r7, #20]
    73b4:	2203      	movs	r2, #3
    73b6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    73b8:	697b      	ldr	r3, [r7, #20]
    73ba:	2238      	movs	r2, #56	; 0x38
    73bc:	2100      	movs	r1, #0
    73be:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    73c0:	230f      	movs	r3, #15
    73c2:	18fb      	adds	r3, r7, r3
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	2201      	movs	r2, #1
    73c8:	4013      	ands	r3, r2
    73ca:	d004      	beq.n	73d6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    73cc:	697b      	ldr	r3, [r7, #20]
    73ce:	68db      	ldr	r3, [r3, #12]
    73d0:	697a      	ldr	r2, [r7, #20]
    73d2:	0010      	movs	r0, r2
    73d4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    73d6:	230c      	movs	r3, #12
    73d8:	18fb      	adds	r3, r7, r3
    73da:	881b      	ldrh	r3, [r3, #0]
    73dc:	2208      	movs	r2, #8
    73de:	4013      	ands	r3, r2
    73e0:	d014      	beq.n	740c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    73e2:	697b      	ldr	r3, [r7, #20]
    73e4:	795b      	ldrb	r3, [r3, #5]
    73e6:	2b00      	cmp	r3, #0
    73e8:	d110      	bne.n	740c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    73ea:	693b      	ldr	r3, [r7, #16]
    73ec:	2208      	movs	r2, #8
    73ee:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    73f0:	693b      	ldr	r3, [r7, #16]
    73f2:	2208      	movs	r2, #8
    73f4:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    73f6:	230f      	movs	r3, #15
    73f8:	18fb      	adds	r3, r7, r3
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	2220      	movs	r2, #32
    73fe:	4013      	ands	r3, r2
    7400:	d004      	beq.n	740c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    7402:	697b      	ldr	r3, [r7, #20]
    7404:	6a1b      	ldr	r3, [r3, #32]
    7406:	697a      	ldr	r2, [r7, #20]
    7408:	0010      	movs	r0, r2
    740a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    740c:	230c      	movs	r3, #12
    740e:	18fb      	adds	r3, r7, r3
    7410:	881b      	ldrh	r3, [r3, #0]
    7412:	2280      	movs	r2, #128	; 0x80
    7414:	4013      	ands	r3, r2
    7416:	d010      	beq.n	743a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7418:	693b      	ldr	r3, [r7, #16]
    741a:	2280      	movs	r2, #128	; 0x80
    741c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    741e:	693b      	ldr	r3, [r7, #16]
    7420:	2280      	movs	r2, #128	; 0x80
    7422:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    7424:	230f      	movs	r3, #15
    7426:	18fb      	adds	r3, r7, r3
    7428:	781b      	ldrb	r3, [r3, #0]
    742a:	2240      	movs	r2, #64	; 0x40
    742c:	4013      	ands	r3, r2
    742e:	d004      	beq.n	743a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    7430:	697b      	ldr	r3, [r7, #20]
    7432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7434:	697a      	ldr	r2, [r7, #20]
    7436:	0010      	movs	r0, r2
    7438:	4798      	blx	r3
		}
	}
#  endif
}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	46bd      	mov	sp, r7
    743e:	b006      	add	sp, #24
    7440:	bd80      	pop	{r7, pc}
    7442:	46c0      	nop			; (mov r8, r8)
    7444:	2000052c 	.word	0x2000052c
    7448:	00007071 	.word	0x00007071
    744c:	00006ff5 	.word	0x00006ff5
    7450:	000070a5 	.word	0x000070a5
    7454:	000070db 	.word	0x000070db

00007458 <system_gclk_chan_get_config_defaults>:
{
    7458:	b580      	push	{r7, lr}
    745a:	b082      	sub	sp, #8
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	2200      	movs	r2, #0
    7464:	701a      	strb	r2, [r3, #0]
}
    7466:	46c0      	nop			; (mov r8, r8)
    7468:	46bd      	mov	sp, r7
    746a:	b002      	add	sp, #8
    746c:	bd80      	pop	{r7, pc}

0000746e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    746e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7470:	b08d      	sub	sp, #52	; 0x34
    7472:	af00      	add	r7, sp, #0
    7474:	60b8      	str	r0, [r7, #8]
    7476:	60f9      	str	r1, [r7, #12]
    7478:	603a      	str	r2, [r7, #0]
    747a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    747c:	2300      	movs	r3, #0
    747e:	2400      	movs	r4, #0
    7480:	623b      	str	r3, [r7, #32]
    7482:	627c      	str	r4, [r7, #36]	; 0x24
    7484:	2300      	movs	r3, #0
    7486:	2400      	movs	r4, #0
    7488:	61bb      	str	r3, [r7, #24]
    748a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    748c:	233f      	movs	r3, #63	; 0x3f
    748e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7490:	e053      	b.n	753a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    7492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7494:	3b20      	subs	r3, #32
    7496:	2b00      	cmp	r3, #0
    7498:	db04      	blt.n	74a4 <long_division+0x36>
    749a:	2201      	movs	r2, #1
    749c:	409a      	lsls	r2, r3
    749e:	0013      	movs	r3, r2
    74a0:	617b      	str	r3, [r7, #20]
    74a2:	e00b      	b.n	74bc <long_division+0x4e>
    74a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74a6:	2220      	movs	r2, #32
    74a8:	1ad3      	subs	r3, r2, r3
    74aa:	2201      	movs	r2, #1
    74ac:	40da      	lsrs	r2, r3
    74ae:	0013      	movs	r3, r2
    74b0:	2100      	movs	r1, #0
    74b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    74b4:	4091      	lsls	r1, r2
    74b6:	000a      	movs	r2, r1
    74b8:	4313      	orrs	r3, r2
    74ba:	617b      	str	r3, [r7, #20]
    74bc:	2201      	movs	r2, #1
    74be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74c0:	409a      	lsls	r2, r3
    74c2:	0013      	movs	r3, r2
    74c4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    74c6:	69bb      	ldr	r3, [r7, #24]
    74c8:	69fc      	ldr	r4, [r7, #28]
    74ca:	18db      	adds	r3, r3, r3
    74cc:	4164      	adcs	r4, r4
    74ce:	61bb      	str	r3, [r7, #24]
    74d0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    74d2:	68bb      	ldr	r3, [r7, #8]
    74d4:	693a      	ldr	r2, [r7, #16]
    74d6:	401a      	ands	r2, r3
    74d8:	0015      	movs	r5, r2
    74da:	68fb      	ldr	r3, [r7, #12]
    74dc:	697a      	ldr	r2, [r7, #20]
    74de:	401a      	ands	r2, r3
    74e0:	0016      	movs	r6, r2
    74e2:	002b      	movs	r3, r5
    74e4:	4333      	orrs	r3, r6
    74e6:	d007      	beq.n	74f8 <long_division+0x8a>
			r |= 0x01;
    74e8:	69bb      	ldr	r3, [r7, #24]
    74ea:	2201      	movs	r2, #1
    74ec:	4313      	orrs	r3, r2
    74ee:	61bb      	str	r3, [r7, #24]
    74f0:	69fb      	ldr	r3, [r7, #28]
    74f2:	2200      	movs	r2, #0
    74f4:	4313      	orrs	r3, r2
    74f6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    74f8:	687a      	ldr	r2, [r7, #4]
    74fa:	69fb      	ldr	r3, [r7, #28]
    74fc:	429a      	cmp	r2, r3
    74fe:	d819      	bhi.n	7534 <long_division+0xc6>
    7500:	687a      	ldr	r2, [r7, #4]
    7502:	69fb      	ldr	r3, [r7, #28]
    7504:	429a      	cmp	r2, r3
    7506:	d103      	bne.n	7510 <long_division+0xa2>
    7508:	683a      	ldr	r2, [r7, #0]
    750a:	69bb      	ldr	r3, [r7, #24]
    750c:	429a      	cmp	r2, r3
    750e:	d811      	bhi.n	7534 <long_division+0xc6>
			r = r - d;
    7510:	69b9      	ldr	r1, [r7, #24]
    7512:	69fa      	ldr	r2, [r7, #28]
    7514:	683b      	ldr	r3, [r7, #0]
    7516:	687c      	ldr	r4, [r7, #4]
    7518:	1ac9      	subs	r1, r1, r3
    751a:	41a2      	sbcs	r2, r4
    751c:	000b      	movs	r3, r1
    751e:	0014      	movs	r4, r2
    7520:	61bb      	str	r3, [r7, #24]
    7522:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    7524:	6a3a      	ldr	r2, [r7, #32]
    7526:	693b      	ldr	r3, [r7, #16]
    7528:	4313      	orrs	r3, r2
    752a:	623b      	str	r3, [r7, #32]
    752c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    752e:	697b      	ldr	r3, [r7, #20]
    7530:	4313      	orrs	r3, r2
    7532:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    7534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7536:	3b01      	subs	r3, #1
    7538:	62fb      	str	r3, [r7, #44]	; 0x2c
    753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    753c:	2b00      	cmp	r3, #0
    753e:	daa8      	bge.n	7492 <long_division+0x24>
		}
	}

	return q;
    7540:	6a3b      	ldr	r3, [r7, #32]
    7542:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    7544:	0018      	movs	r0, r3
    7546:	0021      	movs	r1, r4
    7548:	46bd      	mov	sp, r7
    754a:	b00d      	add	sp, #52	; 0x34
    754c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000754e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    754e:	b580      	push	{r7, lr}
    7550:	b086      	sub	sp, #24
    7552:	af00      	add	r7, sp, #0
    7554:	60f8      	str	r0, [r7, #12]
    7556:	60b9      	str	r1, [r7, #8]
    7558:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    755a:	2316      	movs	r3, #22
    755c:	18fb      	adds	r3, r7, r3
    755e:	2200      	movs	r2, #0
    7560:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    7562:	68bb      	ldr	r3, [r7, #8]
    7564:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7566:	68bb      	ldr	r3, [r7, #8]
    7568:	085a      	lsrs	r2, r3, #1
    756a:	68fb      	ldr	r3, [r7, #12]
    756c:	429a      	cmp	r2, r3
    756e:	d201      	bcs.n	7574 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7570:	2340      	movs	r3, #64	; 0x40
    7572:	e026      	b.n	75c2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    7574:	68bb      	ldr	r3, [r7, #8]
    7576:	085b      	lsrs	r3, r3, #1
    7578:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    757a:	e00a      	b.n	7592 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    757c:	693a      	ldr	r2, [r7, #16]
    757e:	68fb      	ldr	r3, [r7, #12]
    7580:	1ad3      	subs	r3, r2, r3
    7582:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    7584:	2316      	movs	r3, #22
    7586:	18fb      	adds	r3, r7, r3
    7588:	881a      	ldrh	r2, [r3, #0]
    758a:	2316      	movs	r3, #22
    758c:	18fb      	adds	r3, r7, r3
    758e:	3201      	adds	r2, #1
    7590:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    7592:	693a      	ldr	r2, [r7, #16]
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	429a      	cmp	r2, r3
    7598:	d2f0      	bcs.n	757c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    759a:	2316      	movs	r3, #22
    759c:	18fb      	adds	r3, r7, r3
    759e:	2216      	movs	r2, #22
    75a0:	18ba      	adds	r2, r7, r2
    75a2:	8812      	ldrh	r2, [r2, #0]
    75a4:	3a01      	subs	r2, #1
    75a6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    75a8:	2316      	movs	r3, #22
    75aa:	18fb      	adds	r3, r7, r3
    75ac:	881b      	ldrh	r3, [r3, #0]
    75ae:	2bff      	cmp	r3, #255	; 0xff
    75b0:	d901      	bls.n	75b6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    75b2:	2340      	movs	r3, #64	; 0x40
    75b4:	e005      	b.n	75c2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	2216      	movs	r2, #22
    75ba:	18ba      	adds	r2, r7, r2
    75bc:	8812      	ldrh	r2, [r2, #0]
    75be:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    75c0:	2300      	movs	r3, #0
	}
}
    75c2:	0018      	movs	r0, r3
    75c4:	46bd      	mov	sp, r7
    75c6:	b006      	add	sp, #24
    75c8:	bd80      	pop	{r7, pc}
	...

000075cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ce:	b09d      	sub	sp, #116	; 0x74
    75d0:	af00      	add	r7, sp, #0
    75d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    75d4:	63b9      	str	r1, [r7, #56]	; 0x38
    75d6:	637a      	str	r2, [r7, #52]	; 0x34
    75d8:	2233      	movs	r2, #51	; 0x33
    75da:	18ba      	adds	r2, r7, r2
    75dc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    75de:	2300      	movs	r3, #0
    75e0:	2400      	movs	r4, #0
    75e2:	65bb      	str	r3, [r7, #88]	; 0x58
    75e4:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    75e6:	2300      	movs	r3, #0
    75e8:	2400      	movs	r4, #0
    75ea:	653b      	str	r3, [r7, #80]	; 0x50
    75ec:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    75ee:	2300      	movs	r3, #0
    75f0:	2400      	movs	r4, #0
    75f2:	66bb      	str	r3, [r7, #104]	; 0x68
    75f4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    75f6:	2300      	movs	r3, #0
    75f8:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    75fa:	2358      	movs	r3, #88	; 0x58
    75fc:	2230      	movs	r2, #48	; 0x30
    75fe:	4694      	mov	ip, r2
    7600:	44bc      	add	ip, r7
    7602:	4463      	add	r3, ip
    7604:	781a      	ldrb	r2, [r3, #0]
    7606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7608:	435a      	muls	r2, r3
    760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    760c:	429a      	cmp	r2, r3
    760e:	d901      	bls.n	7614 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7610:	2340      	movs	r3, #64	; 0x40
    7612:	e0c6      	b.n	77a2 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7614:	2333      	movs	r3, #51	; 0x33
    7616:	18fb      	adds	r3, r7, r3
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	2b00      	cmp	r3, #0
    761c:	d13d      	bne.n	769a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    761e:	2358      	movs	r3, #88	; 0x58
    7620:	2230      	movs	r2, #48	; 0x30
    7622:	4694      	mov	ip, r2
    7624:	44bc      	add	ip, r7
    7626:	4463      	add	r3, ip
    7628:	781b      	ldrb	r3, [r3, #0]
    762a:	b2db      	uxtb	r3, r3
    762c:	613b      	str	r3, [r7, #16]
    762e:	2300      	movs	r3, #0
    7630:	617b      	str	r3, [r7, #20]
    7632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7634:	60bb      	str	r3, [r7, #8]
    7636:	2300      	movs	r3, #0
    7638:	60fb      	str	r3, [r7, #12]
    763a:	4c5c      	ldr	r4, [pc, #368]	; (77ac <_sercom_get_async_baud_val+0x1e0>)
    763c:	68ba      	ldr	r2, [r7, #8]
    763e:	68fb      	ldr	r3, [r7, #12]
    7640:	6938      	ldr	r0, [r7, #16]
    7642:	6979      	ldr	r1, [r7, #20]
    7644:	47a0      	blx	r4
    7646:	0003      	movs	r3, r0
    7648:	000c      	movs	r4, r1
    764a:	001b      	movs	r3, r3
    764c:	64fb      	str	r3, [r7, #76]	; 0x4c
    764e:	2300      	movs	r3, #0
    7650:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    7652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7654:	603b      	str	r3, [r7, #0]
    7656:	2300      	movs	r3, #0
    7658:	607b      	str	r3, [r7, #4]
    765a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    765c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    765e:	683a      	ldr	r2, [r7, #0]
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	4c53      	ldr	r4, [pc, #332]	; (77b0 <_sercom_get_async_baud_val+0x1e4>)
    7664:	47a0      	blx	r4
    7666:	0003      	movs	r3, r0
    7668:	000c      	movs	r4, r1
    766a:	65bb      	str	r3, [r7, #88]	; 0x58
    766c:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    766e:	2100      	movs	r1, #0
    7670:	2201      	movs	r2, #1
    7672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7674:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    7676:	1ac9      	subs	r1, r1, r3
    7678:	41a2      	sbcs	r2, r4
    767a:	000b      	movs	r3, r1
    767c:	0014      	movs	r4, r2
    767e:	653b      	str	r3, [r7, #80]	; 0x50
    7680:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    7682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7684:	0c1b      	lsrs	r3, r3, #16
    7686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7688:	0416      	lsls	r6, r2, #16
    768a:	431e      	orrs	r6, r3
    768c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    768e:	041d      	lsls	r5, r3, #16
    7690:	0033      	movs	r3, r6
    7692:	66bb      	str	r3, [r7, #104]	; 0x68
    7694:	2300      	movs	r3, #0
    7696:	66fb      	str	r3, [r7, #108]	; 0x6c
    7698:	e07d      	b.n	7796 <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    769a:	2333      	movs	r3, #51	; 0x33
    769c:	18fb      	adds	r3, r7, r3
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	2b01      	cmp	r3, #1
    76a2:	d000      	beq.n	76a6 <_sercom_get_async_baud_val+0xda>
    76a4:	e077      	b.n	7796 <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    76a6:	2337      	movs	r3, #55	; 0x37
    76a8:	2230      	movs	r2, #48	; 0x30
    76aa:	4694      	mov	ip, r2
    76ac:	44bc      	add	ip, r7
    76ae:	4463      	add	r3, ip
    76b0:	2200      	movs	r2, #0
    76b2:	701a      	strb	r2, [r3, #0]
    76b4:	e04e      	b.n	7754 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    76b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    76b8:	62bb      	str	r3, [r7, #40]	; 0x28
    76ba:	2300      	movs	r3, #0
    76bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    76be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    76c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    76c2:	0003      	movs	r3, r0
    76c4:	0f5b      	lsrs	r3, r3, #29
    76c6:	000a      	movs	r2, r1
    76c8:	00d2      	lsls	r2, r2, #3
    76ca:	4313      	orrs	r3, r2
    76cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    76ce:	0003      	movs	r3, r0
    76d0:	00db      	lsls	r3, r3, #3
    76d2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    76d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    76d6:	623b      	str	r3, [r7, #32]
    76d8:	2300      	movs	r3, #0
    76da:	627b      	str	r3, [r7, #36]	; 0x24
    76dc:	2358      	movs	r3, #88	; 0x58
    76de:	2230      	movs	r2, #48	; 0x30
    76e0:	4694      	mov	ip, r2
    76e2:	44bc      	add	ip, r7
    76e4:	4463      	add	r3, ip
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	b2db      	uxtb	r3, r3
    76ea:	61bb      	str	r3, [r7, #24]
    76ec:	2300      	movs	r3, #0
    76ee:	61fb      	str	r3, [r7, #28]
    76f0:	4c2e      	ldr	r4, [pc, #184]	; (77ac <_sercom_get_async_baud_val+0x1e0>)
    76f2:	69ba      	ldr	r2, [r7, #24]
    76f4:	69fb      	ldr	r3, [r7, #28]
    76f6:	6a38      	ldr	r0, [r7, #32]
    76f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    76fa:	47a0      	blx	r4
    76fc:	0003      	movs	r3, r0
    76fe:	000c      	movs	r4, r1
    7700:	643b      	str	r3, [r7, #64]	; 0x40
    7702:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    7704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7706:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    7708:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    770a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    770c:	001a      	movs	r2, r3
    770e:	0023      	movs	r3, r4
    7710:	4c27      	ldr	r4, [pc, #156]	; (77b0 <_sercom_get_async_baud_val+0x1e4>)
    7712:	47a0      	blx	r4
    7714:	0003      	movs	r3, r0
    7716:	000c      	movs	r4, r1
    7718:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    771a:	2337      	movs	r3, #55	; 0x37
    771c:	2230      	movs	r2, #48	; 0x30
    771e:	4694      	mov	ip, r2
    7720:	44bc      	add	ip, r7
    7722:	4463      	add	r3, ip
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7728:	1ad3      	subs	r3, r2, r3
    772a:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    772c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    772e:	08db      	lsrs	r3, r3, #3
    7730:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    7732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7734:	4a1f      	ldr	r2, [pc, #124]	; (77b4 <_sercom_get_async_baud_val+0x1e8>)
    7736:	4293      	cmp	r3, r2
    7738:	d915      	bls.n	7766 <_sercom_get_async_baud_val+0x19a>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    773a:	2337      	movs	r3, #55	; 0x37
    773c:	2230      	movs	r2, #48	; 0x30
    773e:	4694      	mov	ip, r2
    7740:	44bc      	add	ip, r7
    7742:	4463      	add	r3, ip
    7744:	781a      	ldrb	r2, [r3, #0]
    7746:	2337      	movs	r3, #55	; 0x37
    7748:	2130      	movs	r1, #48	; 0x30
    774a:	468c      	mov	ip, r1
    774c:	44bc      	add	ip, r7
    774e:	4463      	add	r3, ip
    7750:	3201      	adds	r2, #1
    7752:	701a      	strb	r2, [r3, #0]
    7754:	2337      	movs	r3, #55	; 0x37
    7756:	2230      	movs	r2, #48	; 0x30
    7758:	4694      	mov	ip, r2
    775a:	44bc      	add	ip, r7
    775c:	4463      	add	r3, ip
    775e:	781b      	ldrb	r3, [r3, #0]
    7760:	2b07      	cmp	r3, #7
    7762:	d9a8      	bls.n	76b6 <_sercom_get_async_baud_val+0xea>
    7764:	e000      	b.n	7768 <_sercom_get_async_baud_val+0x19c>
				break;
    7766:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    7768:	2337      	movs	r3, #55	; 0x37
    776a:	2230      	movs	r2, #48	; 0x30
    776c:	4694      	mov	ip, r2
    776e:	44bc      	add	ip, r7
    7770:	4463      	add	r3, ip
    7772:	781b      	ldrb	r3, [r3, #0]
    7774:	2b08      	cmp	r3, #8
    7776:	d101      	bne.n	777c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7778:	2340      	movs	r3, #64	; 0x40
    777a:	e012      	b.n	77a2 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    777c:	2337      	movs	r3, #55	; 0x37
    777e:	2230      	movs	r2, #48	; 0x30
    7780:	4694      	mov	ip, r2
    7782:	44bc      	add	ip, r7
    7784:	4463      	add	r3, ip
    7786:	781b      	ldrb	r3, [r3, #0]
    7788:	035b      	lsls	r3, r3, #13
    778a:	001a      	movs	r2, r3
    778c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    778e:	4313      	orrs	r3, r2
    7790:	66bb      	str	r3, [r7, #104]	; 0x68
    7792:	2300      	movs	r3, #0
    7794:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    7796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7798:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    779a:	b29a      	uxth	r2, r3
    779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    779e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    77a0:	2300      	movs	r3, #0
}
    77a2:	0018      	movs	r0, r3
    77a4:	46bd      	mov	sp, r7
    77a6:	b01d      	add	sp, #116	; 0x74
    77a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77aa:	46c0      	nop			; (mov r8, r8)
    77ac:	0001955d 	.word	0x0001955d
    77b0:	0000746f 	.word	0x0000746f
    77b4:	00001fff 	.word	0x00001fff

000077b8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    77b8:	b580      	push	{r7, lr}
    77ba:	b084      	sub	sp, #16
    77bc:	af00      	add	r7, sp, #0
    77be:	0002      	movs	r2, r0
    77c0:	1dfb      	adds	r3, r7, #7
    77c2:	701a      	strb	r2, [r3, #0]
    77c4:	1dbb      	adds	r3, r7, #6
    77c6:	1c0a      	adds	r2, r1, #0
    77c8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    77ca:	4b1a      	ldr	r3, [pc, #104]	; (7834 <sercom_set_gclk_generator+0x7c>)
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	2201      	movs	r2, #1
    77d0:	4053      	eors	r3, r2
    77d2:	b2db      	uxtb	r3, r3
    77d4:	2b00      	cmp	r3, #0
    77d6:	d103      	bne.n	77e0 <sercom_set_gclk_generator+0x28>
    77d8:	1dbb      	adds	r3, r7, #6
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	2b00      	cmp	r3, #0
    77de:	d01b      	beq.n	7818 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    77e0:	230c      	movs	r3, #12
    77e2:	18fb      	adds	r3, r7, r3
    77e4:	0018      	movs	r0, r3
    77e6:	4b14      	ldr	r3, [pc, #80]	; (7838 <sercom_set_gclk_generator+0x80>)
    77e8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    77ea:	230c      	movs	r3, #12
    77ec:	18fb      	adds	r3, r7, r3
    77ee:	1dfa      	adds	r2, r7, #7
    77f0:	7812      	ldrb	r2, [r2, #0]
    77f2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    77f4:	230c      	movs	r3, #12
    77f6:	18fb      	adds	r3, r7, r3
    77f8:	0019      	movs	r1, r3
    77fa:	2013      	movs	r0, #19
    77fc:	4b0f      	ldr	r3, [pc, #60]	; (783c <sercom_set_gclk_generator+0x84>)
    77fe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7800:	2013      	movs	r0, #19
    7802:	4b0f      	ldr	r3, [pc, #60]	; (7840 <sercom_set_gclk_generator+0x88>)
    7804:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    7806:	4b0b      	ldr	r3, [pc, #44]	; (7834 <sercom_set_gclk_generator+0x7c>)
    7808:	1dfa      	adds	r2, r7, #7
    780a:	7812      	ldrb	r2, [r2, #0]
    780c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    780e:	4b09      	ldr	r3, [pc, #36]	; (7834 <sercom_set_gclk_generator+0x7c>)
    7810:	2201      	movs	r2, #1
    7812:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    7814:	2300      	movs	r3, #0
    7816:	e008      	b.n	782a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    7818:	4b06      	ldr	r3, [pc, #24]	; (7834 <sercom_set_gclk_generator+0x7c>)
    781a:	785b      	ldrb	r3, [r3, #1]
    781c:	1dfa      	adds	r2, r7, #7
    781e:	7812      	ldrb	r2, [r2, #0]
    7820:	429a      	cmp	r2, r3
    7822:	d101      	bne.n	7828 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    7824:	2300      	movs	r3, #0
    7826:	e000      	b.n	782a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7828:	231d      	movs	r3, #29
}
    782a:	0018      	movs	r0, r3
    782c:	46bd      	mov	sp, r7
    782e:	b004      	add	sp, #16
    7830:	bd80      	pop	{r7, pc}
    7832:	46c0      	nop			; (mov r8, r8)
    7834:	2000020c 	.word	0x2000020c
    7838:	00007459 	.word	0x00007459
    783c:	000085ed 	.word	0x000085ed
    7840:	00008631 	.word	0x00008631

00007844 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    7844:	b580      	push	{r7, lr}
    7846:	b082      	sub	sp, #8
    7848:	af00      	add	r7, sp, #0
    784a:	6078      	str	r0, [r7, #4]
    784c:	000a      	movs	r2, r1
    784e:	1cfb      	adds	r3, r7, #3
    7850:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	4a4d      	ldr	r2, [pc, #308]	; (798c <_sercom_get_default_pad+0x148>)
    7856:	4293      	cmp	r3, r2
    7858:	d03f      	beq.n	78da <_sercom_get_default_pad+0x96>
    785a:	4a4c      	ldr	r2, [pc, #304]	; (798c <_sercom_get_default_pad+0x148>)
    785c:	4293      	cmp	r3, r2
    785e:	d806      	bhi.n	786e <_sercom_get_default_pad+0x2a>
    7860:	4a4b      	ldr	r2, [pc, #300]	; (7990 <_sercom_get_default_pad+0x14c>)
    7862:	4293      	cmp	r3, r2
    7864:	d00f      	beq.n	7886 <_sercom_get_default_pad+0x42>
    7866:	4a4b      	ldr	r2, [pc, #300]	; (7994 <_sercom_get_default_pad+0x150>)
    7868:	4293      	cmp	r3, r2
    786a:	d021      	beq.n	78b0 <_sercom_get_default_pad+0x6c>
    786c:	e089      	b.n	7982 <_sercom_get_default_pad+0x13e>
    786e:	4a4a      	ldr	r2, [pc, #296]	; (7998 <_sercom_get_default_pad+0x154>)
    7870:	4293      	cmp	r3, r2
    7872:	d100      	bne.n	7876 <_sercom_get_default_pad+0x32>
    7874:	e05b      	b.n	792e <_sercom_get_default_pad+0xea>
    7876:	4a49      	ldr	r2, [pc, #292]	; (799c <_sercom_get_default_pad+0x158>)
    7878:	4293      	cmp	r3, r2
    787a:	d100      	bne.n	787e <_sercom_get_default_pad+0x3a>
    787c:	e06c      	b.n	7958 <_sercom_get_default_pad+0x114>
    787e:	4a48      	ldr	r2, [pc, #288]	; (79a0 <_sercom_get_default_pad+0x15c>)
    7880:	4293      	cmp	r3, r2
    7882:	d03f      	beq.n	7904 <_sercom_get_default_pad+0xc0>
    7884:	e07d      	b.n	7982 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7886:	1cfb      	adds	r3, r7, #3
    7888:	781b      	ldrb	r3, [r3, #0]
    788a:	2b01      	cmp	r3, #1
    788c:	d00a      	beq.n	78a4 <_sercom_get_default_pad+0x60>
    788e:	dc02      	bgt.n	7896 <_sercom_get_default_pad+0x52>
    7890:	2b00      	cmp	r3, #0
    7892:	d005      	beq.n	78a0 <_sercom_get_default_pad+0x5c>
    7894:	e075      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7896:	2b02      	cmp	r3, #2
    7898:	d006      	beq.n	78a8 <_sercom_get_default_pad+0x64>
    789a:	2b03      	cmp	r3, #3
    789c:	d006      	beq.n	78ac <_sercom_get_default_pad+0x68>
    789e:	e070      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78a0:	4b40      	ldr	r3, [pc, #256]	; (79a4 <_sercom_get_default_pad+0x160>)
    78a2:	e06f      	b.n	7984 <_sercom_get_default_pad+0x140>
    78a4:	4b40      	ldr	r3, [pc, #256]	; (79a8 <_sercom_get_default_pad+0x164>)
    78a6:	e06d      	b.n	7984 <_sercom_get_default_pad+0x140>
    78a8:	4b40      	ldr	r3, [pc, #256]	; (79ac <_sercom_get_default_pad+0x168>)
    78aa:	e06b      	b.n	7984 <_sercom_get_default_pad+0x140>
    78ac:	4b40      	ldr	r3, [pc, #256]	; (79b0 <_sercom_get_default_pad+0x16c>)
    78ae:	e069      	b.n	7984 <_sercom_get_default_pad+0x140>
    78b0:	1cfb      	adds	r3, r7, #3
    78b2:	781b      	ldrb	r3, [r3, #0]
    78b4:	2b01      	cmp	r3, #1
    78b6:	d00a      	beq.n	78ce <_sercom_get_default_pad+0x8a>
    78b8:	dc02      	bgt.n	78c0 <_sercom_get_default_pad+0x7c>
    78ba:	2b00      	cmp	r3, #0
    78bc:	d005      	beq.n	78ca <_sercom_get_default_pad+0x86>
    78be:	e060      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78c0:	2b02      	cmp	r3, #2
    78c2:	d006      	beq.n	78d2 <_sercom_get_default_pad+0x8e>
    78c4:	2b03      	cmp	r3, #3
    78c6:	d006      	beq.n	78d6 <_sercom_get_default_pad+0x92>
    78c8:	e05b      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78ca:	2303      	movs	r3, #3
    78cc:	e05a      	b.n	7984 <_sercom_get_default_pad+0x140>
    78ce:	4b39      	ldr	r3, [pc, #228]	; (79b4 <_sercom_get_default_pad+0x170>)
    78d0:	e058      	b.n	7984 <_sercom_get_default_pad+0x140>
    78d2:	4b39      	ldr	r3, [pc, #228]	; (79b8 <_sercom_get_default_pad+0x174>)
    78d4:	e056      	b.n	7984 <_sercom_get_default_pad+0x140>
    78d6:	4b39      	ldr	r3, [pc, #228]	; (79bc <_sercom_get_default_pad+0x178>)
    78d8:	e054      	b.n	7984 <_sercom_get_default_pad+0x140>
    78da:	1cfb      	adds	r3, r7, #3
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	2b01      	cmp	r3, #1
    78e0:	d00a      	beq.n	78f8 <_sercom_get_default_pad+0xb4>
    78e2:	dc02      	bgt.n	78ea <_sercom_get_default_pad+0xa6>
    78e4:	2b00      	cmp	r3, #0
    78e6:	d005      	beq.n	78f4 <_sercom_get_default_pad+0xb0>
    78e8:	e04b      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78ea:	2b02      	cmp	r3, #2
    78ec:	d006      	beq.n	78fc <_sercom_get_default_pad+0xb8>
    78ee:	2b03      	cmp	r3, #3
    78f0:	d006      	beq.n	7900 <_sercom_get_default_pad+0xbc>
    78f2:	e046      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78f4:	4b32      	ldr	r3, [pc, #200]	; (79c0 <_sercom_get_default_pad+0x17c>)
    78f6:	e045      	b.n	7984 <_sercom_get_default_pad+0x140>
    78f8:	4b32      	ldr	r3, [pc, #200]	; (79c4 <_sercom_get_default_pad+0x180>)
    78fa:	e043      	b.n	7984 <_sercom_get_default_pad+0x140>
    78fc:	4b32      	ldr	r3, [pc, #200]	; (79c8 <_sercom_get_default_pad+0x184>)
    78fe:	e041      	b.n	7984 <_sercom_get_default_pad+0x140>
    7900:	4b32      	ldr	r3, [pc, #200]	; (79cc <_sercom_get_default_pad+0x188>)
    7902:	e03f      	b.n	7984 <_sercom_get_default_pad+0x140>
    7904:	1cfb      	adds	r3, r7, #3
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	2b01      	cmp	r3, #1
    790a:	d00a      	beq.n	7922 <_sercom_get_default_pad+0xde>
    790c:	dc02      	bgt.n	7914 <_sercom_get_default_pad+0xd0>
    790e:	2b00      	cmp	r3, #0
    7910:	d005      	beq.n	791e <_sercom_get_default_pad+0xda>
    7912:	e036      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7914:	2b02      	cmp	r3, #2
    7916:	d006      	beq.n	7926 <_sercom_get_default_pad+0xe2>
    7918:	2b03      	cmp	r3, #3
    791a:	d006      	beq.n	792a <_sercom_get_default_pad+0xe6>
    791c:	e031      	b.n	7982 <_sercom_get_default_pad+0x13e>
    791e:	4b2c      	ldr	r3, [pc, #176]	; (79d0 <_sercom_get_default_pad+0x18c>)
    7920:	e030      	b.n	7984 <_sercom_get_default_pad+0x140>
    7922:	4b2c      	ldr	r3, [pc, #176]	; (79d4 <_sercom_get_default_pad+0x190>)
    7924:	e02e      	b.n	7984 <_sercom_get_default_pad+0x140>
    7926:	4b2c      	ldr	r3, [pc, #176]	; (79d8 <_sercom_get_default_pad+0x194>)
    7928:	e02c      	b.n	7984 <_sercom_get_default_pad+0x140>
    792a:	4b2c      	ldr	r3, [pc, #176]	; (79dc <_sercom_get_default_pad+0x198>)
    792c:	e02a      	b.n	7984 <_sercom_get_default_pad+0x140>
    792e:	1cfb      	adds	r3, r7, #3
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	2b01      	cmp	r3, #1
    7934:	d00a      	beq.n	794c <_sercom_get_default_pad+0x108>
    7936:	dc02      	bgt.n	793e <_sercom_get_default_pad+0xfa>
    7938:	2b00      	cmp	r3, #0
    793a:	d005      	beq.n	7948 <_sercom_get_default_pad+0x104>
    793c:	e021      	b.n	7982 <_sercom_get_default_pad+0x13e>
    793e:	2b02      	cmp	r3, #2
    7940:	d006      	beq.n	7950 <_sercom_get_default_pad+0x10c>
    7942:	2b03      	cmp	r3, #3
    7944:	d006      	beq.n	7954 <_sercom_get_default_pad+0x110>
    7946:	e01c      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7948:	4b25      	ldr	r3, [pc, #148]	; (79e0 <_sercom_get_default_pad+0x19c>)
    794a:	e01b      	b.n	7984 <_sercom_get_default_pad+0x140>
    794c:	4b25      	ldr	r3, [pc, #148]	; (79e4 <_sercom_get_default_pad+0x1a0>)
    794e:	e019      	b.n	7984 <_sercom_get_default_pad+0x140>
    7950:	4b25      	ldr	r3, [pc, #148]	; (79e8 <_sercom_get_default_pad+0x1a4>)
    7952:	e017      	b.n	7984 <_sercom_get_default_pad+0x140>
    7954:	4b25      	ldr	r3, [pc, #148]	; (79ec <_sercom_get_default_pad+0x1a8>)
    7956:	e015      	b.n	7984 <_sercom_get_default_pad+0x140>
    7958:	1cfb      	adds	r3, r7, #3
    795a:	781b      	ldrb	r3, [r3, #0]
    795c:	2b01      	cmp	r3, #1
    795e:	d00a      	beq.n	7976 <_sercom_get_default_pad+0x132>
    7960:	dc02      	bgt.n	7968 <_sercom_get_default_pad+0x124>
    7962:	2b00      	cmp	r3, #0
    7964:	d005      	beq.n	7972 <_sercom_get_default_pad+0x12e>
    7966:	e00c      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7968:	2b02      	cmp	r3, #2
    796a:	d006      	beq.n	797a <_sercom_get_default_pad+0x136>
    796c:	2b03      	cmp	r3, #3
    796e:	d006      	beq.n	797e <_sercom_get_default_pad+0x13a>
    7970:	e007      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7972:	4b1f      	ldr	r3, [pc, #124]	; (79f0 <_sercom_get_default_pad+0x1ac>)
    7974:	e006      	b.n	7984 <_sercom_get_default_pad+0x140>
    7976:	4b1f      	ldr	r3, [pc, #124]	; (79f4 <_sercom_get_default_pad+0x1b0>)
    7978:	e004      	b.n	7984 <_sercom_get_default_pad+0x140>
    797a:	4b1f      	ldr	r3, [pc, #124]	; (79f8 <_sercom_get_default_pad+0x1b4>)
    797c:	e002      	b.n	7984 <_sercom_get_default_pad+0x140>
    797e:	4b1f      	ldr	r3, [pc, #124]	; (79fc <_sercom_get_default_pad+0x1b8>)
    7980:	e000      	b.n	7984 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    7982:	2300      	movs	r3, #0
}
    7984:	0018      	movs	r0, r3
    7986:	46bd      	mov	sp, r7
    7988:	b002      	add	sp, #8
    798a:	bd80      	pop	{r7, pc}
    798c:	42001000 	.word	0x42001000
    7990:	42000800 	.word	0x42000800
    7994:	42000c00 	.word	0x42000c00
    7998:	42001800 	.word	0x42001800
    799c:	42001c00 	.word	0x42001c00
    79a0:	42001400 	.word	0x42001400
    79a4:	00040003 	.word	0x00040003
    79a8:	00050003 	.word	0x00050003
    79ac:	00060003 	.word	0x00060003
    79b0:	00070003 	.word	0x00070003
    79b4:	00010003 	.word	0x00010003
    79b8:	001e0003 	.word	0x001e0003
    79bc:	001f0003 	.word	0x001f0003
    79c0:	00080003 	.word	0x00080003
    79c4:	00090003 	.word	0x00090003
    79c8:	000a0003 	.word	0x000a0003
    79cc:	000b0003 	.word	0x000b0003
    79d0:	00100003 	.word	0x00100003
    79d4:	00110003 	.word	0x00110003
    79d8:	00120003 	.word	0x00120003
    79dc:	00130003 	.word	0x00130003
    79e0:	000c0003 	.word	0x000c0003
    79e4:	000d0003 	.word	0x000d0003
    79e8:	000e0003 	.word	0x000e0003
    79ec:	000f0003 	.word	0x000f0003
    79f0:	00160003 	.word	0x00160003
    79f4:	00170003 	.word	0x00170003
    79f8:	00180003 	.word	0x00180003
    79fc:	00190003 	.word	0x00190003

00007a00 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7a00:	b590      	push	{r4, r7, lr}
    7a02:	b08b      	sub	sp, #44	; 0x2c
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7a08:	230c      	movs	r3, #12
    7a0a:	18fb      	adds	r3, r7, r3
    7a0c:	4a0f      	ldr	r2, [pc, #60]	; (7a4c <_sercom_get_sercom_inst_index+0x4c>)
    7a0e:	ca13      	ldmia	r2!, {r0, r1, r4}
    7a10:	c313      	stmia	r3!, {r0, r1, r4}
    7a12:	ca13      	ldmia	r2!, {r0, r1, r4}
    7a14:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a16:	2300      	movs	r3, #0
    7a18:	627b      	str	r3, [r7, #36]	; 0x24
    7a1a:	e00e      	b.n	7a3a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7a1c:	230c      	movs	r3, #12
    7a1e:	18fb      	adds	r3, r7, r3
    7a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7a22:	0092      	lsls	r2, r2, #2
    7a24:	58d3      	ldr	r3, [r2, r3]
    7a26:	001a      	movs	r2, r3
    7a28:	687b      	ldr	r3, [r7, #4]
    7a2a:	429a      	cmp	r2, r3
    7a2c:	d102      	bne.n	7a34 <_sercom_get_sercom_inst_index+0x34>
			return i;
    7a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a30:	b2db      	uxtb	r3, r3
    7a32:	e006      	b.n	7a42 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a36:	3301      	adds	r3, #1
    7a38:	627b      	str	r3, [r7, #36]	; 0x24
    7a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a3c:	2b05      	cmp	r3, #5
    7a3e:	d9ed      	bls.n	7a1c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    7a40:	2300      	movs	r3, #0
}
    7a42:	0018      	movs	r0, r3
    7a44:	46bd      	mov	sp, r7
    7a46:	b00b      	add	sp, #44	; 0x2c
    7a48:	bd90      	pop	{r4, r7, pc}
    7a4a:	46c0      	nop			; (mov r8, r8)
    7a4c:	0001c5c8 	.word	0x0001c5c8

00007a50 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b082      	sub	sp, #8
    7a54:	af00      	add	r7, sp, #0
    7a56:	0002      	movs	r2, r0
    7a58:	1dfb      	adds	r3, r7, #7
    7a5a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    7a5c:	46c0      	nop			; (mov r8, r8)
    7a5e:	46bd      	mov	sp, r7
    7a60:	b002      	add	sp, #8
    7a62:	bd80      	pop	{r7, pc}

00007a64 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    7a64:	b580      	push	{r7, lr}
    7a66:	b084      	sub	sp, #16
    7a68:	af00      	add	r7, sp, #0
    7a6a:	0002      	movs	r2, r0
    7a6c:	6039      	str	r1, [r7, #0]
    7a6e:	1dfb      	adds	r3, r7, #7
    7a70:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    7a72:	4b13      	ldr	r3, [pc, #76]	; (7ac0 <_sercom_set_handler+0x5c>)
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	2201      	movs	r2, #1
    7a78:	4053      	eors	r3, r2
    7a7a:	b2db      	uxtb	r3, r3
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d015      	beq.n	7aac <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a80:	2300      	movs	r3, #0
    7a82:	60fb      	str	r3, [r7, #12]
    7a84:	e00c      	b.n	7aa0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7a86:	4b0f      	ldr	r3, [pc, #60]	; (7ac4 <_sercom_set_handler+0x60>)
    7a88:	68fa      	ldr	r2, [r7, #12]
    7a8a:	0092      	lsls	r2, r2, #2
    7a8c:	490e      	ldr	r1, [pc, #56]	; (7ac8 <_sercom_set_handler+0x64>)
    7a8e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    7a90:	4b0e      	ldr	r3, [pc, #56]	; (7acc <_sercom_set_handler+0x68>)
    7a92:	68fa      	ldr	r2, [r7, #12]
    7a94:	0092      	lsls	r2, r2, #2
    7a96:	2100      	movs	r1, #0
    7a98:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a9a:	68fb      	ldr	r3, [r7, #12]
    7a9c:	3301      	adds	r3, #1
    7a9e:	60fb      	str	r3, [r7, #12]
    7aa0:	68fb      	ldr	r3, [r7, #12]
    7aa2:	2b05      	cmp	r3, #5
    7aa4:	d9ef      	bls.n	7a86 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    7aa6:	4b06      	ldr	r3, [pc, #24]	; (7ac0 <_sercom_set_handler+0x5c>)
    7aa8:	2201      	movs	r2, #1
    7aaa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7aac:	1dfb      	adds	r3, r7, #7
    7aae:	781a      	ldrb	r2, [r3, #0]
    7ab0:	4b04      	ldr	r3, [pc, #16]	; (7ac4 <_sercom_set_handler+0x60>)
    7ab2:	0092      	lsls	r2, r2, #2
    7ab4:	6839      	ldr	r1, [r7, #0]
    7ab6:	50d1      	str	r1, [r2, r3]
}
    7ab8:	46c0      	nop			; (mov r8, r8)
    7aba:	46bd      	mov	sp, r7
    7abc:	b004      	add	sp, #16
    7abe:	bd80      	pop	{r7, pc}
    7ac0:	2000020e 	.word	0x2000020e
    7ac4:	20000210 	.word	0x20000210
    7ac8:	00007a51 	.word	0x00007a51
    7acc:	2000052c 	.word	0x2000052c

00007ad0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7ad0:	b590      	push	{r4, r7, lr}
    7ad2:	b085      	sub	sp, #20
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7ad8:	2308      	movs	r3, #8
    7ada:	18fb      	adds	r3, r7, r3
    7adc:	4a0b      	ldr	r2, [pc, #44]	; (7b0c <_sercom_get_interrupt_vector+0x3c>)
    7ade:	6811      	ldr	r1, [r2, #0]
    7ae0:	6019      	str	r1, [r3, #0]
    7ae2:	8892      	ldrh	r2, [r2, #4]
    7ae4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7ae6:	230f      	movs	r3, #15
    7ae8:	18fc      	adds	r4, r7, r3
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	0018      	movs	r0, r3
    7aee:	4b08      	ldr	r3, [pc, #32]	; (7b10 <_sercom_get_interrupt_vector+0x40>)
    7af0:	4798      	blx	r3
    7af2:	0003      	movs	r3, r0
    7af4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7af6:	230f      	movs	r3, #15
    7af8:	18fb      	adds	r3, r7, r3
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	2208      	movs	r2, #8
    7afe:	18ba      	adds	r2, r7, r2
    7b00:	5cd3      	ldrb	r3, [r2, r3]
    7b02:	b25b      	sxtb	r3, r3
}
    7b04:	0018      	movs	r0, r3
    7b06:	46bd      	mov	sp, r7
    7b08:	b005      	add	sp, #20
    7b0a:	bd90      	pop	{r4, r7, pc}
    7b0c:	0001c5e0 	.word	0x0001c5e0
    7b10:	00007a01 	.word	0x00007a01

00007b14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7b14:	b580      	push	{r7, lr}
    7b16:	af00      	add	r7, sp, #0
    7b18:	4b03      	ldr	r3, [pc, #12]	; (7b28 <SERCOM0_Handler+0x14>)
    7b1a:	681b      	ldr	r3, [r3, #0]
    7b1c:	2000      	movs	r0, #0
    7b1e:	4798      	blx	r3
    7b20:	46c0      	nop			; (mov r8, r8)
    7b22:	46bd      	mov	sp, r7
    7b24:	bd80      	pop	{r7, pc}
    7b26:	46c0      	nop			; (mov r8, r8)
    7b28:	20000210 	.word	0x20000210

00007b2c <SERCOM1_Handler>:
    7b2c:	b580      	push	{r7, lr}
    7b2e:	af00      	add	r7, sp, #0
    7b30:	4b03      	ldr	r3, [pc, #12]	; (7b40 <SERCOM1_Handler+0x14>)
    7b32:	685b      	ldr	r3, [r3, #4]
    7b34:	2001      	movs	r0, #1
    7b36:	4798      	blx	r3
    7b38:	46c0      	nop			; (mov r8, r8)
    7b3a:	46bd      	mov	sp, r7
    7b3c:	bd80      	pop	{r7, pc}
    7b3e:	46c0      	nop			; (mov r8, r8)
    7b40:	20000210 	.word	0x20000210

00007b44 <SERCOM2_Handler>:
    7b44:	b580      	push	{r7, lr}
    7b46:	af00      	add	r7, sp, #0
    7b48:	4b03      	ldr	r3, [pc, #12]	; (7b58 <SERCOM2_Handler+0x14>)
    7b4a:	689b      	ldr	r3, [r3, #8]
    7b4c:	2002      	movs	r0, #2
    7b4e:	4798      	blx	r3
    7b50:	46c0      	nop			; (mov r8, r8)
    7b52:	46bd      	mov	sp, r7
    7b54:	bd80      	pop	{r7, pc}
    7b56:	46c0      	nop			; (mov r8, r8)
    7b58:	20000210 	.word	0x20000210

00007b5c <SERCOM3_Handler>:
    7b5c:	b580      	push	{r7, lr}
    7b5e:	af00      	add	r7, sp, #0
    7b60:	4b03      	ldr	r3, [pc, #12]	; (7b70 <SERCOM3_Handler+0x14>)
    7b62:	68db      	ldr	r3, [r3, #12]
    7b64:	2003      	movs	r0, #3
    7b66:	4798      	blx	r3
    7b68:	46c0      	nop			; (mov r8, r8)
    7b6a:	46bd      	mov	sp, r7
    7b6c:	bd80      	pop	{r7, pc}
    7b6e:	46c0      	nop			; (mov r8, r8)
    7b70:	20000210 	.word	0x20000210

00007b74 <SERCOM4_Handler>:
    7b74:	b580      	push	{r7, lr}
    7b76:	af00      	add	r7, sp, #0
    7b78:	4b03      	ldr	r3, [pc, #12]	; (7b88 <SERCOM4_Handler+0x14>)
    7b7a:	691b      	ldr	r3, [r3, #16]
    7b7c:	2004      	movs	r0, #4
    7b7e:	4798      	blx	r3
    7b80:	46c0      	nop			; (mov r8, r8)
    7b82:	46bd      	mov	sp, r7
    7b84:	bd80      	pop	{r7, pc}
    7b86:	46c0      	nop			; (mov r8, r8)
    7b88:	20000210 	.word	0x20000210

00007b8c <SERCOM5_Handler>:
    7b8c:	b580      	push	{r7, lr}
    7b8e:	af00      	add	r7, sp, #0
    7b90:	4b03      	ldr	r3, [pc, #12]	; (7ba0 <SERCOM5_Handler+0x14>)
    7b92:	695b      	ldr	r3, [r3, #20]
    7b94:	2005      	movs	r0, #5
    7b96:	4798      	blx	r3
    7b98:	46c0      	nop			; (mov r8, r8)
    7b9a:	46bd      	mov	sp, r7
    7b9c:	bd80      	pop	{r7, pc}
    7b9e:	46c0      	nop			; (mov r8, r8)
    7ba0:	20000210 	.word	0x20000210

00007ba4 <system_pinmux_get_config_defaults>:
{
    7ba4:	b580      	push	{r7, lr}
    7ba6:	b082      	sub	sp, #8
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	2280      	movs	r2, #128	; 0x80
    7bb0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	2200      	movs	r2, #0
    7bb6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	2201      	movs	r2, #1
    7bbc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	2200      	movs	r2, #0
    7bc2:	70da      	strb	r2, [r3, #3]
}
    7bc4:	46c0      	nop			; (mov r8, r8)
    7bc6:	46bd      	mov	sp, r7
    7bc8:	b002      	add	sp, #8
    7bca:	bd80      	pop	{r7, pc}

00007bcc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b084      	sub	sp, #16
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	0002      	movs	r2, r0
    7bd4:	6039      	str	r1, [r7, #0]
    7bd6:	1dfb      	adds	r3, r7, #7
    7bd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7bda:	230c      	movs	r3, #12
    7bdc:	18fb      	adds	r3, r7, r3
    7bde:	0018      	movs	r0, r3
    7be0:	4b10      	ldr	r3, [pc, #64]	; (7c24 <port_pin_set_config+0x58>)
    7be2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7be4:	230c      	movs	r3, #12
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	2280      	movs	r2, #128	; 0x80
    7bea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7bec:	683b      	ldr	r3, [r7, #0]
    7bee:	781a      	ldrb	r2, [r3, #0]
    7bf0:	230c      	movs	r3, #12
    7bf2:	18fb      	adds	r3, r7, r3
    7bf4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    7bf6:	683b      	ldr	r3, [r7, #0]
    7bf8:	785a      	ldrb	r2, [r3, #1]
    7bfa:	230c      	movs	r3, #12
    7bfc:	18fb      	adds	r3, r7, r3
    7bfe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7c00:	683b      	ldr	r3, [r7, #0]
    7c02:	789a      	ldrb	r2, [r3, #2]
    7c04:	230c      	movs	r3, #12
    7c06:	18fb      	adds	r3, r7, r3
    7c08:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7c0a:	230c      	movs	r3, #12
    7c0c:	18fa      	adds	r2, r7, r3
    7c0e:	1dfb      	adds	r3, r7, #7
    7c10:	781b      	ldrb	r3, [r3, #0]
    7c12:	0011      	movs	r1, r2
    7c14:	0018      	movs	r0, r3
    7c16:	4b04      	ldr	r3, [pc, #16]	; (7c28 <port_pin_set_config+0x5c>)
    7c18:	4798      	blx	r3
}
    7c1a:	46c0      	nop			; (mov r8, r8)
    7c1c:	46bd      	mov	sp, r7
    7c1e:	b004      	add	sp, #16
    7c20:	bd80      	pop	{r7, pc}
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	00007ba5 	.word	0x00007ba5
    7c28:	000088d9 	.word	0x000088d9

00007c2c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7c2c:	b580      	push	{r7, lr}
    7c2e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7c30:	46c0      	nop			; (mov r8, r8)
    7c32:	46bd      	mov	sp, r7
    7c34:	bd80      	pop	{r7, pc}
	...

00007c38 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    7c38:	b580      	push	{r7, lr}
    7c3a:	b082      	sub	sp, #8
    7c3c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7c3e:	4b10      	ldr	r3, [pc, #64]	; (7c80 <cpu_irq_enter_critical+0x48>)
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d112      	bne.n	7c6c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7c46:	f3ef 8310 	mrs	r3, PRIMASK
    7c4a:	607b      	str	r3, [r7, #4]
  return(result);
    7c4c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d109      	bne.n	7c66 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    7c52:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    7c54:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    7c58:	4b0a      	ldr	r3, [pc, #40]	; (7c84 <cpu_irq_enter_critical+0x4c>)
    7c5a:	2200      	movs	r2, #0
    7c5c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7c5e:	4b0a      	ldr	r3, [pc, #40]	; (7c88 <cpu_irq_enter_critical+0x50>)
    7c60:	2201      	movs	r2, #1
    7c62:	701a      	strb	r2, [r3, #0]
    7c64:	e002      	b.n	7c6c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    7c66:	4b08      	ldr	r3, [pc, #32]	; (7c88 <cpu_irq_enter_critical+0x50>)
    7c68:	2200      	movs	r2, #0
    7c6a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    7c6c:	4b04      	ldr	r3, [pc, #16]	; (7c80 <cpu_irq_enter_critical+0x48>)
    7c6e:	681b      	ldr	r3, [r3, #0]
    7c70:	1c5a      	adds	r2, r3, #1
    7c72:	4b03      	ldr	r3, [pc, #12]	; (7c80 <cpu_irq_enter_critical+0x48>)
    7c74:	601a      	str	r2, [r3, #0]
}
    7c76:	46c0      	nop			; (mov r8, r8)
    7c78:	46bd      	mov	sp, r7
    7c7a:	b002      	add	sp, #8
    7c7c:	bd80      	pop	{r7, pc}
    7c7e:	46c0      	nop			; (mov r8, r8)
    7c80:	20000228 	.word	0x20000228
    7c84:	20000000 	.word	0x20000000
    7c88:	2000022c 	.word	0x2000022c

00007c8c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7c90:	4b0b      	ldr	r3, [pc, #44]	; (7cc0 <cpu_irq_leave_critical+0x34>)
    7c92:	681b      	ldr	r3, [r3, #0]
    7c94:	1e5a      	subs	r2, r3, #1
    7c96:	4b0a      	ldr	r3, [pc, #40]	; (7cc0 <cpu_irq_leave_critical+0x34>)
    7c98:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    7c9a:	4b09      	ldr	r3, [pc, #36]	; (7cc0 <cpu_irq_leave_critical+0x34>)
    7c9c:	681b      	ldr	r3, [r3, #0]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d10a      	bne.n	7cb8 <cpu_irq_leave_critical+0x2c>
    7ca2:	4b08      	ldr	r3, [pc, #32]	; (7cc4 <cpu_irq_leave_critical+0x38>)
    7ca4:	781b      	ldrb	r3, [r3, #0]
    7ca6:	b2db      	uxtb	r3, r3
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d005      	beq.n	7cb8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    7cac:	4b06      	ldr	r3, [pc, #24]	; (7cc8 <cpu_irq_leave_critical+0x3c>)
    7cae:	2201      	movs	r2, #1
    7cb0:	701a      	strb	r2, [r3, #0]
    7cb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7cb6:	b662      	cpsie	i
	}
}
    7cb8:	46c0      	nop			; (mov r8, r8)
    7cba:	46bd      	mov	sp, r7
    7cbc:	bd80      	pop	{r7, pc}
    7cbe:	46c0      	nop			; (mov r8, r8)
    7cc0:	20000228 	.word	0x20000228
    7cc4:	2000022c 	.word	0x2000022c
    7cc8:	20000000 	.word	0x20000000

00007ccc <system_gclk_gen_get_config_defaults>:
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b082      	sub	sp, #8
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	2201      	movs	r2, #1
    7cd8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	2200      	movs	r2, #0
    7cde:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7ce0:	687b      	ldr	r3, [r7, #4]
    7ce2:	2206      	movs	r2, #6
    7ce4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    7ce6:	687b      	ldr	r3, [r7, #4]
    7ce8:	2200      	movs	r2, #0
    7cea:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	2200      	movs	r2, #0
    7cf0:	725a      	strb	r2, [r3, #9]
}
    7cf2:	46c0      	nop			; (mov r8, r8)
    7cf4:	46bd      	mov	sp, r7
    7cf6:	b002      	add	sp, #8
    7cf8:	bd80      	pop	{r7, pc}

00007cfa <system_clock_source_osc32k_get_config_defaults>:
{
    7cfa:	b580      	push	{r7, lr}
    7cfc:	b082      	sub	sp, #8
    7cfe:	af00      	add	r7, sp, #0
    7d00:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	2201      	movs	r2, #1
    7d06:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	2201      	movs	r2, #1
    7d0c:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	2200      	movs	r2, #0
    7d12:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	2201      	movs	r2, #1
    7d18:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    7d1a:	687b      	ldr	r3, [r7, #4]
    7d1c:	2207      	movs	r2, #7
    7d1e:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	2200      	movs	r2, #0
    7d24:	715a      	strb	r2, [r3, #5]
}
    7d26:	46c0      	nop			; (mov r8, r8)
    7d28:	46bd      	mov	sp, r7
    7d2a:	b002      	add	sp, #8
    7d2c:	bd80      	pop	{r7, pc}

00007d2e <system_clock_source_osc8m_get_config_defaults>:
{
    7d2e:	b580      	push	{r7, lr}
    7d30:	b082      	sub	sp, #8
    7d32:	af00      	add	r7, sp, #0
    7d34:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    7d36:	687b      	ldr	r3, [r7, #4]
    7d38:	2203      	movs	r2, #3
    7d3a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	2200      	movs	r2, #0
    7d40:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	2201      	movs	r2, #1
    7d46:	709a      	strb	r2, [r3, #2]
}
    7d48:	46c0      	nop			; (mov r8, r8)
    7d4a:	46bd      	mov	sp, r7
    7d4c:	b002      	add	sp, #8
    7d4e:	bd80      	pop	{r7, pc}

00007d50 <system_cpu_clock_set_divider>:
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b082      	sub	sp, #8
    7d54:	af00      	add	r7, sp, #0
    7d56:	0002      	movs	r2, r0
    7d58:	1dfb      	adds	r3, r7, #7
    7d5a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    7d5c:	4a03      	ldr	r2, [pc, #12]	; (7d6c <system_cpu_clock_set_divider+0x1c>)
    7d5e:	1dfb      	adds	r3, r7, #7
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	7213      	strb	r3, [r2, #8]
}
    7d64:	46c0      	nop			; (mov r8, r8)
    7d66:	46bd      	mov	sp, r7
    7d68:	b002      	add	sp, #8
    7d6a:	bd80      	pop	{r7, pc}
    7d6c:	40000400 	.word	0x40000400

00007d70 <system_apb_clock_set_divider>:
{
    7d70:	b580      	push	{r7, lr}
    7d72:	b082      	sub	sp, #8
    7d74:	af00      	add	r7, sp, #0
    7d76:	0002      	movs	r2, r0
    7d78:	1dfb      	adds	r3, r7, #7
    7d7a:	701a      	strb	r2, [r3, #0]
    7d7c:	1dbb      	adds	r3, r7, #6
    7d7e:	1c0a      	adds	r2, r1, #0
    7d80:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7d82:	1dfb      	adds	r3, r7, #7
    7d84:	781b      	ldrb	r3, [r3, #0]
    7d86:	2b01      	cmp	r3, #1
    7d88:	d008      	beq.n	7d9c <system_apb_clock_set_divider+0x2c>
    7d8a:	2b02      	cmp	r3, #2
    7d8c:	d00b      	beq.n	7da6 <system_apb_clock_set_divider+0x36>
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d10e      	bne.n	7db0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    7d92:	4a0b      	ldr	r2, [pc, #44]	; (7dc0 <system_apb_clock_set_divider+0x50>)
    7d94:	1dbb      	adds	r3, r7, #6
    7d96:	781b      	ldrb	r3, [r3, #0]
    7d98:	7253      	strb	r3, [r2, #9]
			break;
    7d9a:	e00b      	b.n	7db4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    7d9c:	4a08      	ldr	r2, [pc, #32]	; (7dc0 <system_apb_clock_set_divider+0x50>)
    7d9e:	1dbb      	adds	r3, r7, #6
    7da0:	781b      	ldrb	r3, [r3, #0]
    7da2:	7293      	strb	r3, [r2, #10]
			break;
    7da4:	e006      	b.n	7db4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    7da6:	4a06      	ldr	r2, [pc, #24]	; (7dc0 <system_apb_clock_set_divider+0x50>)
    7da8:	1dbb      	adds	r3, r7, #6
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	72d3      	strb	r3, [r2, #11]
			break;
    7dae:	e001      	b.n	7db4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    7db0:	2317      	movs	r3, #23
    7db2:	e000      	b.n	7db6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    7db4:	2300      	movs	r3, #0
}
    7db6:	0018      	movs	r0, r3
    7db8:	46bd      	mov	sp, r7
    7dba:	b002      	add	sp, #8
    7dbc:	bd80      	pop	{r7, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	40000400 	.word	0x40000400

00007dc4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b082      	sub	sp, #8
    7dc8:	af00      	add	r7, sp, #0
    7dca:	0002      	movs	r2, r0
    7dcc:	1dfb      	adds	r3, r7, #7
    7dce:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7dd0:	4a08      	ldr	r2, [pc, #32]	; (7df4 <system_flash_set_waitstates+0x30>)
    7dd2:	1dfb      	adds	r3, r7, #7
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	210f      	movs	r1, #15
    7dd8:	400b      	ands	r3, r1
    7dda:	b2d9      	uxtb	r1, r3
    7ddc:	6853      	ldr	r3, [r2, #4]
    7dde:	200f      	movs	r0, #15
    7de0:	4001      	ands	r1, r0
    7de2:	0049      	lsls	r1, r1, #1
    7de4:	201e      	movs	r0, #30
    7de6:	4383      	bics	r3, r0
    7de8:	430b      	orrs	r3, r1
    7dea:	6053      	str	r3, [r2, #4]
}
    7dec:	46c0      	nop			; (mov r8, r8)
    7dee:	46bd      	mov	sp, r7
    7df0:	b002      	add	sp, #8
    7df2:	bd80      	pop	{r7, pc}
    7df4:	41004000 	.word	0x41004000

00007df8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    7df8:	b580      	push	{r7, lr}
    7dfa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7dfc:	46c0      	nop			; (mov r8, r8)
    7dfe:	4b04      	ldr	r3, [pc, #16]	; (7e10 <_system_dfll_wait_for_sync+0x18>)
    7e00:	68db      	ldr	r3, [r3, #12]
    7e02:	2210      	movs	r2, #16
    7e04:	4013      	ands	r3, r2
    7e06:	d0fa      	beq.n	7dfe <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    7e08:	46c0      	nop			; (mov r8, r8)
    7e0a:	46bd      	mov	sp, r7
    7e0c:	bd80      	pop	{r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	40000800 	.word	0x40000800

00007e14 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    7e14:	b580      	push	{r7, lr}
    7e16:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7e18:	4b0c      	ldr	r3, [pc, #48]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e1a:	2202      	movs	r2, #2
    7e1c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7e1e:	4b0c      	ldr	r3, [pc, #48]	; (7e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7e20:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7e22:	4a0a      	ldr	r2, [pc, #40]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e24:	4b0b      	ldr	r3, [pc, #44]	; (7e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7e26:	689b      	ldr	r3, [r3, #8]
    7e28:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7e2a:	4a08      	ldr	r2, [pc, #32]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e2c:	4b09      	ldr	r3, [pc, #36]	; (7e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7e2e:	685b      	ldr	r3, [r3, #4]
    7e30:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    7e32:	4b06      	ldr	r3, [pc, #24]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e34:	2200      	movs	r2, #0
    7e36:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7e38:	4b05      	ldr	r3, [pc, #20]	; (7e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7e3a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7e3c:	4a03      	ldr	r2, [pc, #12]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e3e:	4b05      	ldr	r3, [pc, #20]	; (7e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7e40:	681b      	ldr	r3, [r3, #0]
    7e42:	b29b      	uxth	r3, r3
    7e44:	8493      	strh	r3, [r2, #36]	; 0x24
}
    7e46:	46c0      	nop			; (mov r8, r8)
    7e48:	46bd      	mov	sp, r7
    7e4a:	bd80      	pop	{r7, pc}
    7e4c:	40000800 	.word	0x40000800
    7e50:	00007df9 	.word	0x00007df9
    7e54:	20000230 	.word	0x20000230

00007e58 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7e58:	b580      	push	{r7, lr}
    7e5a:	b082      	sub	sp, #8
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	0002      	movs	r2, r0
    7e60:	1dfb      	adds	r3, r7, #7
    7e62:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7e64:	1dfb      	adds	r3, r7, #7
    7e66:	781b      	ldrb	r3, [r3, #0]
    7e68:	2b08      	cmp	r3, #8
    7e6a:	d840      	bhi.n	7eee <system_clock_source_get_hz+0x96>
    7e6c:	009a      	lsls	r2, r3, #2
    7e6e:	4b22      	ldr	r3, [pc, #136]	; (7ef8 <system_clock_source_get_hz+0xa0>)
    7e70:	18d3      	adds	r3, r2, r3
    7e72:	681b      	ldr	r3, [r3, #0]
    7e74:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    7e76:	4b21      	ldr	r3, [pc, #132]	; (7efc <system_clock_source_get_hz+0xa4>)
    7e78:	691b      	ldr	r3, [r3, #16]
    7e7a:	e039      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7e7c:	4b20      	ldr	r3, [pc, #128]	; (7f00 <system_clock_source_get_hz+0xa8>)
    7e7e:	6a1b      	ldr	r3, [r3, #32]
    7e80:	059b      	lsls	r3, r3, #22
    7e82:	0f9b      	lsrs	r3, r3, #30
    7e84:	b2db      	uxtb	r3, r3
    7e86:	001a      	movs	r2, r3
    7e88:	4b1e      	ldr	r3, [pc, #120]	; (7f04 <system_clock_source_get_hz+0xac>)
    7e8a:	40d3      	lsrs	r3, r2
    7e8c:	e030      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    7e8e:	2380      	movs	r3, #128	; 0x80
    7e90:	021b      	lsls	r3, r3, #8
    7e92:	e02d      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    7e94:	2380      	movs	r3, #128	; 0x80
    7e96:	021b      	lsls	r3, r3, #8
    7e98:	e02a      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    7e9a:	4b18      	ldr	r3, [pc, #96]	; (7efc <system_clock_source_get_hz+0xa4>)
    7e9c:	695b      	ldr	r3, [r3, #20]
    7e9e:	e027      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7ea0:	4b16      	ldr	r3, [pc, #88]	; (7efc <system_clock_source_get_hz+0xa4>)
    7ea2:	681b      	ldr	r3, [r3, #0]
    7ea4:	2202      	movs	r2, #2
    7ea6:	4013      	ands	r3, r2
    7ea8:	d101      	bne.n	7eae <system_clock_source_get_hz+0x56>
			return 0;
    7eaa:	2300      	movs	r3, #0
    7eac:	e020      	b.n	7ef0 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    7eae:	4b16      	ldr	r3, [pc, #88]	; (7f08 <system_clock_source_get_hz+0xb0>)
    7eb0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    7eb2:	4b12      	ldr	r3, [pc, #72]	; (7efc <system_clock_source_get_hz+0xa4>)
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	2204      	movs	r2, #4
    7eb8:	4013      	ands	r3, r2
    7eba:	d009      	beq.n	7ed0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ebc:	2000      	movs	r0, #0
    7ebe:	4b13      	ldr	r3, [pc, #76]	; (7f0c <system_clock_source_get_hz+0xb4>)
    7ec0:	4798      	blx	r3
    7ec2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    7ec4:	4b0d      	ldr	r3, [pc, #52]	; (7efc <system_clock_source_get_hz+0xa4>)
    7ec6:	689b      	ldr	r3, [r3, #8]
    7ec8:	041b      	lsls	r3, r3, #16
    7eca:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ecc:	4353      	muls	r3, r2
    7ece:	e00f      	b.n	7ef0 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    7ed0:	4b0f      	ldr	r3, [pc, #60]	; (7f10 <system_clock_source_get_hz+0xb8>)
    7ed2:	e00d      	b.n	7ef0 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7ed4:	4a0a      	ldr	r2, [pc, #40]	; (7f00 <system_clock_source_get_hz+0xa8>)
    7ed6:	2350      	movs	r3, #80	; 0x50
    7ed8:	5cd3      	ldrb	r3, [r2, r3]
    7eda:	b2db      	uxtb	r3, r3
    7edc:	001a      	movs	r2, r3
    7ede:	2304      	movs	r3, #4
    7ee0:	4013      	ands	r3, r2
    7ee2:	d101      	bne.n	7ee8 <system_clock_source_get_hz+0x90>
			return 0;
    7ee4:	2300      	movs	r3, #0
    7ee6:	e003      	b.n	7ef0 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    7ee8:	4b04      	ldr	r3, [pc, #16]	; (7efc <system_clock_source_get_hz+0xa4>)
    7eea:	68db      	ldr	r3, [r3, #12]
    7eec:	e000      	b.n	7ef0 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    7eee:	2300      	movs	r3, #0
	}
}
    7ef0:	0018      	movs	r0, r3
    7ef2:	46bd      	mov	sp, r7
    7ef4:	b002      	add	sp, #8
    7ef6:	bd80      	pop	{r7, pc}
    7ef8:	0001c5e8 	.word	0x0001c5e8
    7efc:	20000230 	.word	0x20000230
    7f00:	40000800 	.word	0x40000800
    7f04:	007a1200 	.word	0x007a1200
    7f08:	00007df9 	.word	0x00007df9
    7f0c:	00008711 	.word	0x00008711
    7f10:	02dc6c00 	.word	0x02dc6c00

00007f14 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b084      	sub	sp, #16
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7f1c:	4b1a      	ldr	r3, [pc, #104]	; (7f88 <system_clock_source_osc8m_set_config+0x74>)
    7f1e:	6a1b      	ldr	r3, [r3, #32]
    7f20:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	1c1a      	adds	r2, r3, #0
    7f28:	2303      	movs	r3, #3
    7f2a:	4013      	ands	r3, r2
    7f2c:	b2da      	uxtb	r2, r3
    7f2e:	230d      	movs	r3, #13
    7f30:	18fb      	adds	r3, r7, r3
    7f32:	2103      	movs	r1, #3
    7f34:	400a      	ands	r2, r1
    7f36:	0010      	movs	r0, r2
    7f38:	781a      	ldrb	r2, [r3, #0]
    7f3a:	2103      	movs	r1, #3
    7f3c:	438a      	bics	r2, r1
    7f3e:	1c11      	adds	r1, r2, #0
    7f40:	1c02      	adds	r2, r0, #0
    7f42:	430a      	orrs	r2, r1
    7f44:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	789a      	ldrb	r2, [r3, #2]
    7f4a:	230c      	movs	r3, #12
    7f4c:	18fb      	adds	r3, r7, r3
    7f4e:	01d0      	lsls	r0, r2, #7
    7f50:	781a      	ldrb	r2, [r3, #0]
    7f52:	217f      	movs	r1, #127	; 0x7f
    7f54:	400a      	ands	r2, r1
    7f56:	1c11      	adds	r1, r2, #0
    7f58:	1c02      	adds	r2, r0, #0
    7f5a:	430a      	orrs	r2, r1
    7f5c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	785a      	ldrb	r2, [r3, #1]
    7f62:	230c      	movs	r3, #12
    7f64:	18fb      	adds	r3, r7, r3
    7f66:	2101      	movs	r1, #1
    7f68:	400a      	ands	r2, r1
    7f6a:	0190      	lsls	r0, r2, #6
    7f6c:	781a      	ldrb	r2, [r3, #0]
    7f6e:	2140      	movs	r1, #64	; 0x40
    7f70:	438a      	bics	r2, r1
    7f72:	1c11      	adds	r1, r2, #0
    7f74:	1c02      	adds	r2, r0, #0
    7f76:	430a      	orrs	r2, r1
    7f78:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    7f7a:	4b03      	ldr	r3, [pc, #12]	; (7f88 <system_clock_source_osc8m_set_config+0x74>)
    7f7c:	68fa      	ldr	r2, [r7, #12]
    7f7e:	621a      	str	r2, [r3, #32]
}
    7f80:	46c0      	nop			; (mov r8, r8)
    7f82:	46bd      	mov	sp, r7
    7f84:	b004      	add	sp, #16
    7f86:	bd80      	pop	{r7, pc}
    7f88:	40000800 	.word	0x40000800

00007f8c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b084      	sub	sp, #16
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    7f94:	4b2f      	ldr	r3, [pc, #188]	; (8054 <system_clock_source_osc32k_set_config+0xc8>)
    7f96:	699b      	ldr	r3, [r3, #24]
    7f98:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	785a      	ldrb	r2, [r3, #1]
    7f9e:	230c      	movs	r3, #12
    7fa0:	18fb      	adds	r3, r7, r3
    7fa2:	2101      	movs	r1, #1
    7fa4:	400a      	ands	r2, r1
    7fa6:	00d0      	lsls	r0, r2, #3
    7fa8:	781a      	ldrb	r2, [r3, #0]
    7faa:	2108      	movs	r1, #8
    7fac:	438a      	bics	r2, r1
    7fae:	1c11      	adds	r1, r2, #0
    7fb0:	1c02      	adds	r2, r0, #0
    7fb2:	430a      	orrs	r2, r1
    7fb4:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	789a      	ldrb	r2, [r3, #2]
    7fba:	230c      	movs	r3, #12
    7fbc:	18fb      	adds	r3, r7, r3
    7fbe:	2101      	movs	r1, #1
    7fc0:	400a      	ands	r2, r1
    7fc2:	0090      	lsls	r0, r2, #2
    7fc4:	781a      	ldrb	r2, [r3, #0]
    7fc6:	2104      	movs	r1, #4
    7fc8:	438a      	bics	r2, r1
    7fca:	1c11      	adds	r1, r2, #0
    7fcc:	1c02      	adds	r2, r0, #0
    7fce:	430a      	orrs	r2, r1
    7fd0:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	781b      	ldrb	r3, [r3, #0]
    7fd6:	1c1a      	adds	r2, r3, #0
    7fd8:	2307      	movs	r3, #7
    7fda:	4013      	ands	r3, r2
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	230d      	movs	r3, #13
    7fe0:	18fb      	adds	r3, r7, r3
    7fe2:	2107      	movs	r1, #7
    7fe4:	400a      	ands	r2, r1
    7fe6:	0010      	movs	r0, r2
    7fe8:	781a      	ldrb	r2, [r3, #0]
    7fea:	2107      	movs	r1, #7
    7fec:	438a      	bics	r2, r1
    7fee:	1c11      	adds	r1, r2, #0
    7ff0:	1c02      	adds	r2, r0, #0
    7ff2:	430a      	orrs	r2, r1
    7ff4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7ff6:	687b      	ldr	r3, [r7, #4]
    7ff8:	791a      	ldrb	r2, [r3, #4]
    7ffa:	230c      	movs	r3, #12
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	01d0      	lsls	r0, r2, #7
    8000:	781a      	ldrb	r2, [r3, #0]
    8002:	217f      	movs	r1, #127	; 0x7f
    8004:	400a      	ands	r2, r1
    8006:	1c11      	adds	r1, r2, #0
    8008:	1c02      	adds	r2, r0, #0
    800a:	430a      	orrs	r2, r1
    800c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    800e:	687b      	ldr	r3, [r7, #4]
    8010:	78da      	ldrb	r2, [r3, #3]
    8012:	230c      	movs	r3, #12
    8014:	18fb      	adds	r3, r7, r3
    8016:	2101      	movs	r1, #1
    8018:	400a      	ands	r2, r1
    801a:	0190      	lsls	r0, r2, #6
    801c:	781a      	ldrb	r2, [r3, #0]
    801e:	2140      	movs	r1, #64	; 0x40
    8020:	438a      	bics	r2, r1
    8022:	1c11      	adds	r1, r2, #0
    8024:	1c02      	adds	r2, r0, #0
    8026:	430a      	orrs	r2, r1
    8028:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	795a      	ldrb	r2, [r3, #5]
    802e:	230d      	movs	r3, #13
    8030:	18fb      	adds	r3, r7, r3
    8032:	2101      	movs	r1, #1
    8034:	400a      	ands	r2, r1
    8036:	0110      	lsls	r0, r2, #4
    8038:	781a      	ldrb	r2, [r3, #0]
    803a:	2110      	movs	r1, #16
    803c:	438a      	bics	r2, r1
    803e:	1c11      	adds	r1, r2, #0
    8040:	1c02      	adds	r2, r0, #0
    8042:	430a      	orrs	r2, r1
    8044:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    8046:	4b03      	ldr	r3, [pc, #12]	; (8054 <system_clock_source_osc32k_set_config+0xc8>)
    8048:	68fa      	ldr	r2, [r7, #12]
    804a:	619a      	str	r2, [r3, #24]
}
    804c:	46c0      	nop			; (mov r8, r8)
    804e:	46bd      	mov	sp, r7
    8050:	b004      	add	sp, #16
    8052:	bd80      	pop	{r7, pc}
    8054:	40000800 	.word	0x40000800

00008058 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    8058:	b580      	push	{r7, lr}
    805a:	b082      	sub	sp, #8
    805c:	af00      	add	r7, sp, #0
    805e:	0002      	movs	r2, r0
    8060:	1dfb      	adds	r3, r7, #7
    8062:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8064:	1dfb      	adds	r3, r7, #7
    8066:	781b      	ldrb	r3, [r3, #0]
    8068:	2b08      	cmp	r3, #8
    806a:	d83b      	bhi.n	80e4 <system_clock_source_enable+0x8c>
    806c:	009a      	lsls	r2, r3, #2
    806e:	4b21      	ldr	r3, [pc, #132]	; (80f4 <system_clock_source_enable+0x9c>)
    8070:	18d3      	adds	r3, r2, r3
    8072:	681b      	ldr	r3, [r3, #0]
    8074:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8076:	4b20      	ldr	r3, [pc, #128]	; (80f8 <system_clock_source_enable+0xa0>)
    8078:	4a1f      	ldr	r2, [pc, #124]	; (80f8 <system_clock_source_enable+0xa0>)
    807a:	6a12      	ldr	r2, [r2, #32]
    807c:	2102      	movs	r1, #2
    807e:	430a      	orrs	r2, r1
    8080:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    8082:	2300      	movs	r3, #0
    8084:	e031      	b.n	80ea <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8086:	4b1c      	ldr	r3, [pc, #112]	; (80f8 <system_clock_source_enable+0xa0>)
    8088:	4a1b      	ldr	r2, [pc, #108]	; (80f8 <system_clock_source_enable+0xa0>)
    808a:	6992      	ldr	r2, [r2, #24]
    808c:	2102      	movs	r1, #2
    808e:	430a      	orrs	r2, r1
    8090:	619a      	str	r2, [r3, #24]
		break;
    8092:	e029      	b.n	80e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8094:	4a18      	ldr	r2, [pc, #96]	; (80f8 <system_clock_source_enable+0xa0>)
    8096:	4b18      	ldr	r3, [pc, #96]	; (80f8 <system_clock_source_enable+0xa0>)
    8098:	8a1b      	ldrh	r3, [r3, #16]
    809a:	b29b      	uxth	r3, r3
    809c:	2102      	movs	r1, #2
    809e:	430b      	orrs	r3, r1
    80a0:	b29b      	uxth	r3, r3
    80a2:	8213      	strh	r3, [r2, #16]
		break;
    80a4:	e020      	b.n	80e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    80a6:	4a14      	ldr	r2, [pc, #80]	; (80f8 <system_clock_source_enable+0xa0>)
    80a8:	4b13      	ldr	r3, [pc, #76]	; (80f8 <system_clock_source_enable+0xa0>)
    80aa:	8a9b      	ldrh	r3, [r3, #20]
    80ac:	b29b      	uxth	r3, r3
    80ae:	2102      	movs	r1, #2
    80b0:	430b      	orrs	r3, r1
    80b2:	b29b      	uxth	r3, r3
    80b4:	8293      	strh	r3, [r2, #20]
		break;
    80b6:	e017      	b.n	80e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    80b8:	4b10      	ldr	r3, [pc, #64]	; (80fc <system_clock_source_enable+0xa4>)
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	2202      	movs	r2, #2
    80be:	431a      	orrs	r2, r3
    80c0:	4b0e      	ldr	r3, [pc, #56]	; (80fc <system_clock_source_enable+0xa4>)
    80c2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    80c4:	4b0e      	ldr	r3, [pc, #56]	; (8100 <system_clock_source_enable+0xa8>)
    80c6:	4798      	blx	r3
		break;
    80c8:	e00e      	b.n	80e8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    80ca:	4a0b      	ldr	r2, [pc, #44]	; (80f8 <system_clock_source_enable+0xa0>)
    80cc:	490a      	ldr	r1, [pc, #40]	; (80f8 <system_clock_source_enable+0xa0>)
    80ce:	2344      	movs	r3, #68	; 0x44
    80d0:	5ccb      	ldrb	r3, [r1, r3]
    80d2:	b2db      	uxtb	r3, r3
    80d4:	2102      	movs	r1, #2
    80d6:	430b      	orrs	r3, r1
    80d8:	b2d9      	uxtb	r1, r3
    80da:	2344      	movs	r3, #68	; 0x44
    80dc:	54d1      	strb	r1, [r2, r3]
		break;
    80de:	e003      	b.n	80e8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    80e0:	2300      	movs	r3, #0
    80e2:	e002      	b.n	80ea <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    80e4:	2317      	movs	r3, #23
    80e6:	e000      	b.n	80ea <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    80e8:	2300      	movs	r3, #0
}
    80ea:	0018      	movs	r0, r3
    80ec:	46bd      	mov	sp, r7
    80ee:	b002      	add	sp, #8
    80f0:	bd80      	pop	{r7, pc}
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	0001c60c 	.word	0x0001c60c
    80f8:	40000800 	.word	0x40000800
    80fc:	20000230 	.word	0x20000230
    8100:	00007e15 	.word	0x00007e15

00008104 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    8104:	b580      	push	{r7, lr}
    8106:	b082      	sub	sp, #8
    8108:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    810a:	003b      	movs	r3, r7
    810c:	2201      	movs	r2, #1
    810e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8110:	2300      	movs	r3, #0
    8112:	607b      	str	r3, [r7, #4]
    8114:	e009      	b.n	812a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	b2db      	uxtb	r3, r3
    811a:	003a      	movs	r2, r7
    811c:	0011      	movs	r1, r2
    811e:	0018      	movs	r0, r3
    8120:	4b05      	ldr	r3, [pc, #20]	; (8138 <_switch_peripheral_gclk+0x34>)
    8122:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	3301      	adds	r3, #1
    8128:	607b      	str	r3, [r7, #4]
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	2b24      	cmp	r3, #36	; 0x24
    812e:	d9f2      	bls.n	8116 <_switch_peripheral_gclk+0x12>
	}
}
    8130:	46c0      	nop			; (mov r8, r8)
    8132:	46bd      	mov	sp, r7
    8134:	b002      	add	sp, #8
    8136:	bd80      	pop	{r7, pc}
    8138:	000085ed 	.word	0x000085ed

0000813c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    813c:	b580      	push	{r7, lr}
    813e:	b0a2      	sub	sp, #136	; 0x88
    8140:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    8142:	4b4f      	ldr	r3, [pc, #316]	; (8280 <system_clock_init+0x144>)
    8144:	22c2      	movs	r2, #194	; 0xc2
    8146:	00d2      	lsls	r2, r2, #3
    8148:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    814a:	2000      	movs	r0, #0
    814c:	4b4d      	ldr	r3, [pc, #308]	; (8284 <system_clock_init+0x148>)
    814e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    8150:	4b4d      	ldr	r3, [pc, #308]	; (8288 <system_clock_init+0x14c>)
    8152:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    8154:	4a4a      	ldr	r2, [pc, #296]	; (8280 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    8156:	4b4d      	ldr	r3, [pc, #308]	; (828c <system_clock_init+0x150>)
    8158:	681b      	ldr	r3, [r3, #0]
    815a:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    815c:	b2db      	uxtb	r3, r3
    815e:	1c19      	adds	r1, r3, #0
    8160:	237f      	movs	r3, #127	; 0x7f
    8162:	400b      	ands	r3, r1
    8164:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    8166:	6993      	ldr	r3, [r2, #24]
    8168:	207f      	movs	r0, #127	; 0x7f
    816a:	4001      	ands	r1, r0
    816c:	0409      	lsls	r1, r1, #16
    816e:	4848      	ldr	r0, [pc, #288]	; (8290 <system_clock_init+0x154>)
    8170:	4003      	ands	r3, r0
    8172:	430b      	orrs	r3, r1
    8174:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    8176:	2380      	movs	r3, #128	; 0x80
    8178:	18fb      	adds	r3, r7, r3
    817a:	0018      	movs	r0, r3
    817c:	4b45      	ldr	r3, [pc, #276]	; (8294 <system_clock_init+0x158>)
    817e:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    8180:	2380      	movs	r3, #128	; 0x80
    8182:	18fb      	adds	r3, r7, r3
    8184:	2207      	movs	r2, #7
    8186:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    8188:	2380      	movs	r3, #128	; 0x80
    818a:	18fb      	adds	r3, r7, r3
    818c:	2201      	movs	r2, #1
    818e:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    8190:	2380      	movs	r3, #128	; 0x80
    8192:	18fb      	adds	r3, r7, r3
    8194:	2201      	movs	r2, #1
    8196:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    8198:	2380      	movs	r3, #128	; 0x80
    819a:	18fb      	adds	r3, r7, r3
    819c:	2201      	movs	r2, #1
    819e:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    81a0:	2380      	movs	r3, #128	; 0x80
    81a2:	18fb      	adds	r3, r7, r3
    81a4:	2200      	movs	r2, #0
    81a6:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    81a8:	2380      	movs	r3, #128	; 0x80
    81aa:	18fb      	adds	r3, r7, r3
    81ac:	0018      	movs	r0, r3
    81ae:	4b3a      	ldr	r3, [pc, #232]	; (8298 <system_clock_init+0x15c>)
    81b0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    81b2:	2004      	movs	r0, #4
    81b4:	4b39      	ldr	r3, [pc, #228]	; (829c <system_clock_init+0x160>)
    81b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    81b8:	237c      	movs	r3, #124	; 0x7c
    81ba:	18fb      	adds	r3, r7, r3
    81bc:	0018      	movs	r0, r3
    81be:	4b38      	ldr	r3, [pc, #224]	; (82a0 <system_clock_init+0x164>)
    81c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    81c2:	237c      	movs	r3, #124	; 0x7c
    81c4:	18fb      	adds	r3, r7, r3
    81c6:	2200      	movs	r2, #0
    81c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    81ca:	237c      	movs	r3, #124	; 0x7c
    81cc:	18fb      	adds	r3, r7, r3
    81ce:	2201      	movs	r2, #1
    81d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    81d2:	237c      	movs	r3, #124	; 0x7c
    81d4:	18fb      	adds	r3, r7, r3
    81d6:	2200      	movs	r2, #0
    81d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    81da:	237c      	movs	r3, #124	; 0x7c
    81dc:	18fb      	adds	r3, r7, r3
    81de:	0018      	movs	r0, r3
    81e0:	4b30      	ldr	r3, [pc, #192]	; (82a4 <system_clock_init+0x168>)
    81e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    81e4:	2006      	movs	r0, #6
    81e6:	4b2d      	ldr	r3, [pc, #180]	; (829c <system_clock_init+0x160>)
    81e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    81ea:	4b2f      	ldr	r3, [pc, #188]	; (82a8 <system_clock_init+0x16c>)
    81ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    81ee:	2358      	movs	r3, #88	; 0x58
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	0018      	movs	r0, r3
    81f4:	4b2d      	ldr	r3, [pc, #180]	; (82ac <system_clock_init+0x170>)
    81f6:	4798      	blx	r3
    81f8:	2358      	movs	r3, #88	; 0x58
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	2204      	movs	r2, #4
    81fe:	701a      	strb	r2, [r3, #0]
    8200:	2358      	movs	r3, #88	; 0x58
    8202:	18fb      	adds	r3, r7, r3
    8204:	2220      	movs	r2, #32
    8206:	605a      	str	r2, [r3, #4]
    8208:	2358      	movs	r3, #88	; 0x58
    820a:	18fb      	adds	r3, r7, r3
    820c:	2200      	movs	r2, #0
    820e:	721a      	strb	r2, [r3, #8]
    8210:	2358      	movs	r3, #88	; 0x58
    8212:	18fb      	adds	r3, r7, r3
    8214:	2200      	movs	r2, #0
    8216:	725a      	strb	r2, [r3, #9]
    8218:	2358      	movs	r3, #88	; 0x58
    821a:	18fb      	adds	r3, r7, r3
    821c:	0019      	movs	r1, r3
    821e:	2002      	movs	r0, #2
    8220:	4b23      	ldr	r3, [pc, #140]	; (82b0 <system_clock_init+0x174>)
    8222:	4798      	blx	r3
    8224:	2002      	movs	r0, #2
    8226:	4b23      	ldr	r3, [pc, #140]	; (82b4 <system_clock_init+0x178>)
    8228:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    822a:	2000      	movs	r0, #0
    822c:	4b22      	ldr	r3, [pc, #136]	; (82b8 <system_clock_init+0x17c>)
    822e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    8230:	2100      	movs	r1, #0
    8232:	2000      	movs	r0, #0
    8234:	4b21      	ldr	r3, [pc, #132]	; (82bc <system_clock_init+0x180>)
    8236:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    8238:	2100      	movs	r1, #0
    823a:	2001      	movs	r0, #1
    823c:	4b1f      	ldr	r3, [pc, #124]	; (82bc <system_clock_init+0x180>)
    823e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    8240:	2100      	movs	r1, #0
    8242:	2002      	movs	r0, #2
    8244:	4b1d      	ldr	r3, [pc, #116]	; (82bc <system_clock_init+0x180>)
    8246:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8248:	1d3b      	adds	r3, r7, #4
    824a:	0018      	movs	r0, r3
    824c:	4b17      	ldr	r3, [pc, #92]	; (82ac <system_clock_init+0x170>)
    824e:	4798      	blx	r3
    8250:	1d3b      	adds	r3, r7, #4
    8252:	2206      	movs	r2, #6
    8254:	701a      	strb	r2, [r3, #0]
    8256:	1d3b      	adds	r3, r7, #4
    8258:	2201      	movs	r2, #1
    825a:	605a      	str	r2, [r3, #4]
    825c:	1d3b      	adds	r3, r7, #4
    825e:	2200      	movs	r2, #0
    8260:	721a      	strb	r2, [r3, #8]
    8262:	1d3b      	adds	r3, r7, #4
    8264:	2200      	movs	r2, #0
    8266:	725a      	strb	r2, [r3, #9]
    8268:	1d3b      	adds	r3, r7, #4
    826a:	0019      	movs	r1, r3
    826c:	2000      	movs	r0, #0
    826e:	4b10      	ldr	r3, [pc, #64]	; (82b0 <system_clock_init+0x174>)
    8270:	4798      	blx	r3
    8272:	2000      	movs	r0, #0
    8274:	4b0f      	ldr	r3, [pc, #60]	; (82b4 <system_clock_init+0x178>)
    8276:	4798      	blx	r3
#endif
}
    8278:	46c0      	nop			; (mov r8, r8)
    827a:	46bd      	mov	sp, r7
    827c:	b022      	add	sp, #136	; 0x88
    827e:	bd80      	pop	{r7, pc}
    8280:	40000800 	.word	0x40000800
    8284:	00007dc5 	.word	0x00007dc5
    8288:	00008105 	.word	0x00008105
    828c:	00806024 	.word	0x00806024
    8290:	ff80ffff 	.word	0xff80ffff
    8294:	00007cfb 	.word	0x00007cfb
    8298:	00007f8d 	.word	0x00007f8d
    829c:	00008059 	.word	0x00008059
    82a0:	00007d2f 	.word	0x00007d2f
    82a4:	00007f15 	.word	0x00007f15
    82a8:	00008365 	.word	0x00008365
    82ac:	00007ccd 	.word	0x00007ccd
    82b0:	00008395 	.word	0x00008395
    82b4:	000084b9 	.word	0x000084b9
    82b8:	00007d51 	.word	0x00007d51
    82bc:	00007d71 	.word	0x00007d71

000082c0 <system_apb_clock_set_mask>:
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b082      	sub	sp, #8
    82c4:	af00      	add	r7, sp, #0
    82c6:	0002      	movs	r2, r0
    82c8:	6039      	str	r1, [r7, #0]
    82ca:	1dfb      	adds	r3, r7, #7
    82cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    82ce:	1dfb      	adds	r3, r7, #7
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	2b01      	cmp	r3, #1
    82d4:	d00a      	beq.n	82ec <system_apb_clock_set_mask+0x2c>
    82d6:	2b02      	cmp	r3, #2
    82d8:	d00f      	beq.n	82fa <system_apb_clock_set_mask+0x3a>
    82da:	2b00      	cmp	r3, #0
    82dc:	d114      	bne.n	8308 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    82de:	4b0e      	ldr	r3, [pc, #56]	; (8318 <system_apb_clock_set_mask+0x58>)
    82e0:	4a0d      	ldr	r2, [pc, #52]	; (8318 <system_apb_clock_set_mask+0x58>)
    82e2:	6991      	ldr	r1, [r2, #24]
    82e4:	683a      	ldr	r2, [r7, #0]
    82e6:	430a      	orrs	r2, r1
    82e8:	619a      	str	r2, [r3, #24]
			break;
    82ea:	e00f      	b.n	830c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    82ec:	4b0a      	ldr	r3, [pc, #40]	; (8318 <system_apb_clock_set_mask+0x58>)
    82ee:	4a0a      	ldr	r2, [pc, #40]	; (8318 <system_apb_clock_set_mask+0x58>)
    82f0:	69d1      	ldr	r1, [r2, #28]
    82f2:	683a      	ldr	r2, [r7, #0]
    82f4:	430a      	orrs	r2, r1
    82f6:	61da      	str	r2, [r3, #28]
			break;
    82f8:	e008      	b.n	830c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    82fa:	4b07      	ldr	r3, [pc, #28]	; (8318 <system_apb_clock_set_mask+0x58>)
    82fc:	4a06      	ldr	r2, [pc, #24]	; (8318 <system_apb_clock_set_mask+0x58>)
    82fe:	6a11      	ldr	r1, [r2, #32]
    8300:	683a      	ldr	r2, [r7, #0]
    8302:	430a      	orrs	r2, r1
    8304:	621a      	str	r2, [r3, #32]
			break;
    8306:	e001      	b.n	830c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8308:	2317      	movs	r3, #23
    830a:	e000      	b.n	830e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    830c:	2300      	movs	r3, #0
}
    830e:	0018      	movs	r0, r3
    8310:	46bd      	mov	sp, r7
    8312:	b002      	add	sp, #8
    8314:	bd80      	pop	{r7, pc}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	40000400 	.word	0x40000400

0000831c <system_interrupt_enter_critical_section>:
{
    831c:	b580      	push	{r7, lr}
    831e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8320:	4b02      	ldr	r3, [pc, #8]	; (832c <system_interrupt_enter_critical_section+0x10>)
    8322:	4798      	blx	r3
}
    8324:	46c0      	nop			; (mov r8, r8)
    8326:	46bd      	mov	sp, r7
    8328:	bd80      	pop	{r7, pc}
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	00007c39 	.word	0x00007c39

00008330 <system_interrupt_leave_critical_section>:
{
    8330:	b580      	push	{r7, lr}
    8332:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8334:	4b02      	ldr	r3, [pc, #8]	; (8340 <system_interrupt_leave_critical_section+0x10>)
    8336:	4798      	blx	r3
}
    8338:	46c0      	nop			; (mov r8, r8)
    833a:	46bd      	mov	sp, r7
    833c:	bd80      	pop	{r7, pc}
    833e:	46c0      	nop			; (mov r8, r8)
    8340:	00007c8d 	.word	0x00007c8d

00008344 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    8344:	b580      	push	{r7, lr}
    8346:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8348:	4b05      	ldr	r3, [pc, #20]	; (8360 <system_gclk_is_syncing+0x1c>)
    834a:	785b      	ldrb	r3, [r3, #1]
    834c:	b2db      	uxtb	r3, r3
    834e:	b25b      	sxtb	r3, r3
    8350:	2b00      	cmp	r3, #0
    8352:	da01      	bge.n	8358 <system_gclk_is_syncing+0x14>
		return true;
    8354:	2301      	movs	r3, #1
    8356:	e000      	b.n	835a <system_gclk_is_syncing+0x16>
	}

	return false;
    8358:	2300      	movs	r3, #0
}
    835a:	0018      	movs	r0, r3
    835c:	46bd      	mov	sp, r7
    835e:	bd80      	pop	{r7, pc}
    8360:	40000c00 	.word	0x40000c00

00008364 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    8364:	b580      	push	{r7, lr}
    8366:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    8368:	2108      	movs	r1, #8
    836a:	2000      	movs	r0, #0
    836c:	4b07      	ldr	r3, [pc, #28]	; (838c <system_gclk_init+0x28>)
    836e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8370:	4b07      	ldr	r3, [pc, #28]	; (8390 <system_gclk_init+0x2c>)
    8372:	2201      	movs	r2, #1
    8374:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8376:	46c0      	nop			; (mov r8, r8)
    8378:	4b05      	ldr	r3, [pc, #20]	; (8390 <system_gclk_init+0x2c>)
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	b2db      	uxtb	r3, r3
    837e:	001a      	movs	r2, r3
    8380:	2301      	movs	r3, #1
    8382:	4013      	ands	r3, r2
    8384:	d1f8      	bne.n	8378 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    8386:	46c0      	nop			; (mov r8, r8)
    8388:	46bd      	mov	sp, r7
    838a:	bd80      	pop	{r7, pc}
    838c:	000082c1 	.word	0x000082c1
    8390:	40000c00 	.word	0x40000c00

00008394 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8394:	b580      	push	{r7, lr}
    8396:	b086      	sub	sp, #24
    8398:	af00      	add	r7, sp, #0
    839a:	0002      	movs	r2, r0
    839c:	6039      	str	r1, [r7, #0]
    839e:	1dfb      	adds	r3, r7, #7
    83a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    83a2:	1dfb      	adds	r3, r7, #7
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    83a8:	1dfb      	adds	r3, r7, #7
    83aa:	781b      	ldrb	r3, [r3, #0]
    83ac:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    83ae:	683b      	ldr	r3, [r7, #0]
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	021b      	lsls	r3, r3, #8
    83b4:	001a      	movs	r2, r3
    83b6:	697b      	ldr	r3, [r7, #20]
    83b8:	4313      	orrs	r3, r2
    83ba:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    83bc:	683b      	ldr	r3, [r7, #0]
    83be:	785b      	ldrb	r3, [r3, #1]
    83c0:	2b00      	cmp	r3, #0
    83c2:	d004      	beq.n	83ce <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    83c4:	697b      	ldr	r3, [r7, #20]
    83c6:	2280      	movs	r2, #128	; 0x80
    83c8:	02d2      	lsls	r2, r2, #11
    83ca:	4313      	orrs	r3, r2
    83cc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    83ce:	683b      	ldr	r3, [r7, #0]
    83d0:	7a5b      	ldrb	r3, [r3, #9]
    83d2:	2b00      	cmp	r3, #0
    83d4:	d004      	beq.n	83e0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    83d6:	697b      	ldr	r3, [r7, #20]
    83d8:	2280      	movs	r2, #128	; 0x80
    83da:	0312      	lsls	r2, r2, #12
    83dc:	4313      	orrs	r3, r2
    83de:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    83e0:	683b      	ldr	r3, [r7, #0]
    83e2:	685b      	ldr	r3, [r3, #4]
    83e4:	2b01      	cmp	r3, #1
    83e6:	d92c      	bls.n	8442 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    83e8:	683b      	ldr	r3, [r7, #0]
    83ea:	685a      	ldr	r2, [r3, #4]
    83ec:	683b      	ldr	r3, [r7, #0]
    83ee:	685b      	ldr	r3, [r3, #4]
    83f0:	3b01      	subs	r3, #1
    83f2:	4013      	ands	r3, r2
    83f4:	d11a      	bne.n	842c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    83f6:	2300      	movs	r3, #0
    83f8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    83fa:	2302      	movs	r3, #2
    83fc:	60bb      	str	r3, [r7, #8]
    83fe:	e005      	b.n	840c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    8400:	68fb      	ldr	r3, [r7, #12]
    8402:	3301      	adds	r3, #1
    8404:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    8406:	68bb      	ldr	r3, [r7, #8]
    8408:	005b      	lsls	r3, r3, #1
    840a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    840c:	683b      	ldr	r3, [r7, #0]
    840e:	685a      	ldr	r2, [r3, #4]
    8410:	68bb      	ldr	r3, [r7, #8]
    8412:	429a      	cmp	r2, r3
    8414:	d8f4      	bhi.n	8400 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	021b      	lsls	r3, r3, #8
    841a:	693a      	ldr	r2, [r7, #16]
    841c:	4313      	orrs	r3, r2
    841e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8420:	697b      	ldr	r3, [r7, #20]
    8422:	2280      	movs	r2, #128	; 0x80
    8424:	0352      	lsls	r2, r2, #13
    8426:	4313      	orrs	r3, r2
    8428:	617b      	str	r3, [r7, #20]
    842a:	e00a      	b.n	8442 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    842c:	683b      	ldr	r3, [r7, #0]
    842e:	685b      	ldr	r3, [r3, #4]
    8430:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    8432:	693a      	ldr	r2, [r7, #16]
    8434:	4313      	orrs	r3, r2
    8436:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8438:	697b      	ldr	r3, [r7, #20]
    843a:	2280      	movs	r2, #128	; 0x80
    843c:	0292      	lsls	r2, r2, #10
    843e:	4313      	orrs	r3, r2
    8440:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8442:	683b      	ldr	r3, [r7, #0]
    8444:	7a1b      	ldrb	r3, [r3, #8]
    8446:	2b00      	cmp	r3, #0
    8448:	d004      	beq.n	8454 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    844a:	697b      	ldr	r3, [r7, #20]
    844c:	2280      	movs	r2, #128	; 0x80
    844e:	0392      	lsls	r2, r2, #14
    8450:	4313      	orrs	r3, r2
    8452:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    8454:	46c0      	nop			; (mov r8, r8)
    8456:	4b13      	ldr	r3, [pc, #76]	; (84a4 <system_gclk_gen_set_config+0x110>)
    8458:	4798      	blx	r3
    845a:	1e03      	subs	r3, r0, #0
    845c:	d1fb      	bne.n	8456 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    845e:	4b12      	ldr	r3, [pc, #72]	; (84a8 <system_gclk_gen_set_config+0x114>)
    8460:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8462:	4a12      	ldr	r2, [pc, #72]	; (84ac <system_gclk_gen_set_config+0x118>)
    8464:	1dfb      	adds	r3, r7, #7
    8466:	781b      	ldrb	r3, [r3, #0]
    8468:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	4b0d      	ldr	r3, [pc, #52]	; (84a4 <system_gclk_gen_set_config+0x110>)
    846e:	4798      	blx	r3
    8470:	1e03      	subs	r3, r0, #0
    8472:	d1fb      	bne.n	846c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8474:	4b0e      	ldr	r3, [pc, #56]	; (84b0 <system_gclk_gen_set_config+0x11c>)
    8476:	693a      	ldr	r2, [r7, #16]
    8478:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    847a:	46c0      	nop			; (mov r8, r8)
    847c:	4b09      	ldr	r3, [pc, #36]	; (84a4 <system_gclk_gen_set_config+0x110>)
    847e:	4798      	blx	r3
    8480:	1e03      	subs	r3, r0, #0
    8482:	d1fb      	bne.n	847c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8484:	4b0a      	ldr	r3, [pc, #40]	; (84b0 <system_gclk_gen_set_config+0x11c>)
    8486:	4a0a      	ldr	r2, [pc, #40]	; (84b0 <system_gclk_gen_set_config+0x11c>)
    8488:	6851      	ldr	r1, [r2, #4]
    848a:	2280      	movs	r2, #128	; 0x80
    848c:	0252      	lsls	r2, r2, #9
    848e:	4011      	ands	r1, r2
    8490:	697a      	ldr	r2, [r7, #20]
    8492:	430a      	orrs	r2, r1
    8494:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8496:	4b07      	ldr	r3, [pc, #28]	; (84b4 <system_gclk_gen_set_config+0x120>)
    8498:	4798      	blx	r3
}
    849a:	46c0      	nop			; (mov r8, r8)
    849c:	46bd      	mov	sp, r7
    849e:	b006      	add	sp, #24
    84a0:	bd80      	pop	{r7, pc}
    84a2:	46c0      	nop			; (mov r8, r8)
    84a4:	00008345 	.word	0x00008345
    84a8:	0000831d 	.word	0x0000831d
    84ac:	40000c08 	.word	0x40000c08
    84b0:	40000c00 	.word	0x40000c00
    84b4:	00008331 	.word	0x00008331

000084b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b082      	sub	sp, #8
    84bc:	af00      	add	r7, sp, #0
    84be:	0002      	movs	r2, r0
    84c0:	1dfb      	adds	r3, r7, #7
    84c2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    84c4:	46c0      	nop			; (mov r8, r8)
    84c6:	4b0e      	ldr	r3, [pc, #56]	; (8500 <system_gclk_gen_enable+0x48>)
    84c8:	4798      	blx	r3
    84ca:	1e03      	subs	r3, r0, #0
    84cc:	d1fb      	bne.n	84c6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    84ce:	4b0d      	ldr	r3, [pc, #52]	; (8504 <system_gclk_gen_enable+0x4c>)
    84d0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    84d2:	4a0d      	ldr	r2, [pc, #52]	; (8508 <system_gclk_gen_enable+0x50>)
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    84da:	46c0      	nop			; (mov r8, r8)
    84dc:	4b08      	ldr	r3, [pc, #32]	; (8500 <system_gclk_gen_enable+0x48>)
    84de:	4798      	blx	r3
    84e0:	1e03      	subs	r3, r0, #0
    84e2:	d1fb      	bne.n	84dc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    84e4:	4b09      	ldr	r3, [pc, #36]	; (850c <system_gclk_gen_enable+0x54>)
    84e6:	4a09      	ldr	r2, [pc, #36]	; (850c <system_gclk_gen_enable+0x54>)
    84e8:	6852      	ldr	r2, [r2, #4]
    84ea:	2180      	movs	r1, #128	; 0x80
    84ec:	0249      	lsls	r1, r1, #9
    84ee:	430a      	orrs	r2, r1
    84f0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    84f2:	4b07      	ldr	r3, [pc, #28]	; (8510 <system_gclk_gen_enable+0x58>)
    84f4:	4798      	blx	r3
}
    84f6:	46c0      	nop			; (mov r8, r8)
    84f8:	46bd      	mov	sp, r7
    84fa:	b002      	add	sp, #8
    84fc:	bd80      	pop	{r7, pc}
    84fe:	46c0      	nop			; (mov r8, r8)
    8500:	00008345 	.word	0x00008345
    8504:	0000831d 	.word	0x0000831d
    8508:	40000c04 	.word	0x40000c04
    850c:	40000c00 	.word	0x40000c00
    8510:	00008331 	.word	0x00008331

00008514 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8514:	b580      	push	{r7, lr}
    8516:	b086      	sub	sp, #24
    8518:	af00      	add	r7, sp, #0
    851a:	0002      	movs	r2, r0
    851c:	1dfb      	adds	r3, r7, #7
    851e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8520:	46c0      	nop			; (mov r8, r8)
    8522:	4b2a      	ldr	r3, [pc, #168]	; (85cc <system_gclk_gen_get_hz+0xb8>)
    8524:	4798      	blx	r3
    8526:	1e03      	subs	r3, r0, #0
    8528:	d1fb      	bne.n	8522 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    852a:	4b29      	ldr	r3, [pc, #164]	; (85d0 <system_gclk_gen_get_hz+0xbc>)
    852c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    852e:	4a29      	ldr	r2, [pc, #164]	; (85d4 <system_gclk_gen_get_hz+0xc0>)
    8530:	1dfb      	adds	r3, r7, #7
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	4b24      	ldr	r3, [pc, #144]	; (85cc <system_gclk_gen_get_hz+0xb8>)
    853a:	4798      	blx	r3
    853c:	1e03      	subs	r3, r0, #0
    853e:	d1fb      	bne.n	8538 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8540:	4b25      	ldr	r3, [pc, #148]	; (85d8 <system_gclk_gen_get_hz+0xc4>)
    8542:	685b      	ldr	r3, [r3, #4]
    8544:	04db      	lsls	r3, r3, #19
    8546:	0edb      	lsrs	r3, r3, #27
    8548:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    854a:	0018      	movs	r0, r3
    854c:	4b23      	ldr	r3, [pc, #140]	; (85dc <system_gclk_gen_get_hz+0xc8>)
    854e:	4798      	blx	r3
    8550:	0003      	movs	r3, r0
    8552:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8554:	4a1f      	ldr	r2, [pc, #124]	; (85d4 <system_gclk_gen_get_hz+0xc0>)
    8556:	1dfb      	adds	r3, r7, #7
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    855c:	4b1e      	ldr	r3, [pc, #120]	; (85d8 <system_gclk_gen_get_hz+0xc4>)
    855e:	685b      	ldr	r3, [r3, #4]
    8560:	02db      	lsls	r3, r3, #11
    8562:	0fdb      	lsrs	r3, r3, #31
    8564:	b2da      	uxtb	r2, r3
    8566:	2313      	movs	r3, #19
    8568:	18fb      	adds	r3, r7, r3
    856a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    856c:	4a1c      	ldr	r2, [pc, #112]	; (85e0 <system_gclk_gen_get_hz+0xcc>)
    856e:	1dfb      	adds	r3, r7, #7
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8574:	46c0      	nop			; (mov r8, r8)
    8576:	4b15      	ldr	r3, [pc, #84]	; (85cc <system_gclk_gen_get_hz+0xb8>)
    8578:	4798      	blx	r3
    857a:	1e03      	subs	r3, r0, #0
    857c:	d1fb      	bne.n	8576 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    857e:	4b16      	ldr	r3, [pc, #88]	; (85d8 <system_gclk_gen_get_hz+0xc4>)
    8580:	689b      	ldr	r3, [r3, #8]
    8582:	021b      	lsls	r3, r3, #8
    8584:	0c1b      	lsrs	r3, r3, #16
    8586:	b29b      	uxth	r3, r3
    8588:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    858a:	4b16      	ldr	r3, [pc, #88]	; (85e4 <system_gclk_gen_get_hz+0xd0>)
    858c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    858e:	2313      	movs	r3, #19
    8590:	18fb      	adds	r3, r7, r3
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	2b00      	cmp	r3, #0
    8596:	d109      	bne.n	85ac <system_gclk_gen_get_hz+0x98>
    8598:	68fb      	ldr	r3, [r7, #12]
    859a:	2b01      	cmp	r3, #1
    859c:	d906      	bls.n	85ac <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    859e:	4b12      	ldr	r3, [pc, #72]	; (85e8 <system_gclk_gen_get_hz+0xd4>)
    85a0:	68f9      	ldr	r1, [r7, #12]
    85a2:	6978      	ldr	r0, [r7, #20]
    85a4:	4798      	blx	r3
    85a6:	0003      	movs	r3, r0
    85a8:	617b      	str	r3, [r7, #20]
    85aa:	e00a      	b.n	85c2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    85ac:	2313      	movs	r3, #19
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	781b      	ldrb	r3, [r3, #0]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d005      	beq.n	85c2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    85b6:	68fb      	ldr	r3, [r7, #12]
    85b8:	3301      	adds	r3, #1
    85ba:	697a      	ldr	r2, [r7, #20]
    85bc:	40da      	lsrs	r2, r3
    85be:	0013      	movs	r3, r2
    85c0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    85c2:	697b      	ldr	r3, [r7, #20]
}
    85c4:	0018      	movs	r0, r3
    85c6:	46bd      	mov	sp, r7
    85c8:	b006      	add	sp, #24
    85ca:	bd80      	pop	{r7, pc}
    85cc:	00008345 	.word	0x00008345
    85d0:	0000831d 	.word	0x0000831d
    85d4:	40000c04 	.word	0x40000c04
    85d8:	40000c00 	.word	0x40000c00
    85dc:	00007e59 	.word	0x00007e59
    85e0:	40000c08 	.word	0x40000c08
    85e4:	00008331 	.word	0x00008331
    85e8:	00019181 	.word	0x00019181

000085ec <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    85ec:	b580      	push	{r7, lr}
    85ee:	b084      	sub	sp, #16
    85f0:	af00      	add	r7, sp, #0
    85f2:	0002      	movs	r2, r0
    85f4:	6039      	str	r1, [r7, #0]
    85f6:	1dfb      	adds	r3, r7, #7
    85f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    85fa:	1dfb      	adds	r3, r7, #7
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8600:	683b      	ldr	r3, [r7, #0]
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	021b      	lsls	r3, r3, #8
    8606:	001a      	movs	r2, r3
    8608:	68fb      	ldr	r3, [r7, #12]
    860a:	4313      	orrs	r3, r2
    860c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    860e:	1dfb      	adds	r3, r7, #7
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	0018      	movs	r0, r3
    8614:	4b04      	ldr	r3, [pc, #16]	; (8628 <system_gclk_chan_set_config+0x3c>)
    8616:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8618:	4b04      	ldr	r3, [pc, #16]	; (862c <system_gclk_chan_set_config+0x40>)
    861a:	68fa      	ldr	r2, [r7, #12]
    861c:	b292      	uxth	r2, r2
    861e:	805a      	strh	r2, [r3, #2]
}
    8620:	46c0      	nop			; (mov r8, r8)
    8622:	46bd      	mov	sp, r7
    8624:	b004      	add	sp, #16
    8626:	bd80      	pop	{r7, pc}
    8628:	00008679 	.word	0x00008679
    862c:	40000c00 	.word	0x40000c00

00008630 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8630:	b580      	push	{r7, lr}
    8632:	b082      	sub	sp, #8
    8634:	af00      	add	r7, sp, #0
    8636:	0002      	movs	r2, r0
    8638:	1dfb      	adds	r3, r7, #7
    863a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    863c:	4b0a      	ldr	r3, [pc, #40]	; (8668 <system_gclk_chan_enable+0x38>)
    863e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8640:	4a0a      	ldr	r2, [pc, #40]	; (866c <system_gclk_chan_enable+0x3c>)
    8642:	1dfb      	adds	r3, r7, #7
    8644:	781b      	ldrb	r3, [r3, #0]
    8646:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8648:	4909      	ldr	r1, [pc, #36]	; (8670 <system_gclk_chan_enable+0x40>)
    864a:	4b09      	ldr	r3, [pc, #36]	; (8670 <system_gclk_chan_enable+0x40>)
    864c:	885b      	ldrh	r3, [r3, #2]
    864e:	b29b      	uxth	r3, r3
    8650:	2280      	movs	r2, #128	; 0x80
    8652:	01d2      	lsls	r2, r2, #7
    8654:	4313      	orrs	r3, r2
    8656:	b29b      	uxth	r3, r3
    8658:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    865a:	4b06      	ldr	r3, [pc, #24]	; (8674 <system_gclk_chan_enable+0x44>)
    865c:	4798      	blx	r3
}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	46bd      	mov	sp, r7
    8662:	b002      	add	sp, #8
    8664:	bd80      	pop	{r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	0000831d 	.word	0x0000831d
    866c:	40000c02 	.word	0x40000c02
    8670:	40000c00 	.word	0x40000c00
    8674:	00008331 	.word	0x00008331

00008678 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8678:	b580      	push	{r7, lr}
    867a:	b084      	sub	sp, #16
    867c:	af00      	add	r7, sp, #0
    867e:	0002      	movs	r2, r0
    8680:	1dfb      	adds	r3, r7, #7
    8682:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8684:	4b1c      	ldr	r3, [pc, #112]	; (86f8 <system_gclk_chan_disable+0x80>)
    8686:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8688:	4a1c      	ldr	r2, [pc, #112]	; (86fc <system_gclk_chan_disable+0x84>)
    868a:	1dfb      	adds	r3, r7, #7
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8690:	4b1b      	ldr	r3, [pc, #108]	; (8700 <system_gclk_chan_disable+0x88>)
    8692:	885b      	ldrh	r3, [r3, #2]
    8694:	051b      	lsls	r3, r3, #20
    8696:	0f1b      	lsrs	r3, r3, #28
    8698:	b2db      	uxtb	r3, r3
    869a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    869c:	4a18      	ldr	r2, [pc, #96]	; (8700 <system_gclk_chan_disable+0x88>)
    869e:	8853      	ldrh	r3, [r2, #2]
    86a0:	4918      	ldr	r1, [pc, #96]	; (8704 <system_gclk_chan_disable+0x8c>)
    86a2:	400b      	ands	r3, r1
    86a4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    86a6:	4a16      	ldr	r2, [pc, #88]	; (8700 <system_gclk_chan_disable+0x88>)
    86a8:	4b15      	ldr	r3, [pc, #84]	; (8700 <system_gclk_chan_disable+0x88>)
    86aa:	885b      	ldrh	r3, [r3, #2]
    86ac:	b29b      	uxth	r3, r3
    86ae:	4916      	ldr	r1, [pc, #88]	; (8708 <system_gclk_chan_disable+0x90>)
    86b0:	400b      	ands	r3, r1
    86b2:	b29b      	uxth	r3, r3
    86b4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    86b6:	46c0      	nop			; (mov r8, r8)
    86b8:	4b11      	ldr	r3, [pc, #68]	; (8700 <system_gclk_chan_disable+0x88>)
    86ba:	885b      	ldrh	r3, [r3, #2]
    86bc:	b29b      	uxth	r3, r3
    86be:	001a      	movs	r2, r3
    86c0:	2380      	movs	r3, #128	; 0x80
    86c2:	01db      	lsls	r3, r3, #7
    86c4:	4013      	ands	r3, r2
    86c6:	d1f7      	bne.n	86b8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    86c8:	4a0d      	ldr	r2, [pc, #52]	; (8700 <system_gclk_chan_disable+0x88>)
    86ca:	68fb      	ldr	r3, [r7, #12]
    86cc:	b2db      	uxtb	r3, r3
    86ce:	1c19      	adds	r1, r3, #0
    86d0:	230f      	movs	r3, #15
    86d2:	400b      	ands	r3, r1
    86d4:	b2d9      	uxtb	r1, r3
    86d6:	8853      	ldrh	r3, [r2, #2]
    86d8:	1c08      	adds	r0, r1, #0
    86da:	210f      	movs	r1, #15
    86dc:	4001      	ands	r1, r0
    86de:	0208      	lsls	r0, r1, #8
    86e0:	4908      	ldr	r1, [pc, #32]	; (8704 <system_gclk_chan_disable+0x8c>)
    86e2:	400b      	ands	r3, r1
    86e4:	1c19      	adds	r1, r3, #0
    86e6:	1c03      	adds	r3, r0, #0
    86e8:	430b      	orrs	r3, r1
    86ea:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    86ec:	4b07      	ldr	r3, [pc, #28]	; (870c <system_gclk_chan_disable+0x94>)
    86ee:	4798      	blx	r3
}
    86f0:	46c0      	nop			; (mov r8, r8)
    86f2:	46bd      	mov	sp, r7
    86f4:	b004      	add	sp, #16
    86f6:	bd80      	pop	{r7, pc}
    86f8:	0000831d 	.word	0x0000831d
    86fc:	40000c02 	.word	0x40000c02
    8700:	40000c00 	.word	0x40000c00
    8704:	fffff0ff 	.word	0xfffff0ff
    8708:	ffffbfff 	.word	0xffffbfff
    870c:	00008331 	.word	0x00008331

00008710 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8710:	b580      	push	{r7, lr}
    8712:	b084      	sub	sp, #16
    8714:	af00      	add	r7, sp, #0
    8716:	0002      	movs	r2, r0
    8718:	1dfb      	adds	r3, r7, #7
    871a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    871c:	4b0d      	ldr	r3, [pc, #52]	; (8754 <system_gclk_chan_get_hz+0x44>)
    871e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8720:	4a0d      	ldr	r2, [pc, #52]	; (8758 <system_gclk_chan_get_hz+0x48>)
    8722:	1dfb      	adds	r3, r7, #7
    8724:	781b      	ldrb	r3, [r3, #0]
    8726:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8728:	4b0c      	ldr	r3, [pc, #48]	; (875c <system_gclk_chan_get_hz+0x4c>)
    872a:	885b      	ldrh	r3, [r3, #2]
    872c:	051b      	lsls	r3, r3, #20
    872e:	0f1b      	lsrs	r3, r3, #28
    8730:	b2da      	uxtb	r2, r3
    8732:	230f      	movs	r3, #15
    8734:	18fb      	adds	r3, r7, r3
    8736:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    8738:	4b09      	ldr	r3, [pc, #36]	; (8760 <system_gclk_chan_get_hz+0x50>)
    873a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    873c:	230f      	movs	r3, #15
    873e:	18fb      	adds	r3, r7, r3
    8740:	781b      	ldrb	r3, [r3, #0]
    8742:	0018      	movs	r0, r3
    8744:	4b07      	ldr	r3, [pc, #28]	; (8764 <system_gclk_chan_get_hz+0x54>)
    8746:	4798      	blx	r3
    8748:	0003      	movs	r3, r0
}
    874a:	0018      	movs	r0, r3
    874c:	46bd      	mov	sp, r7
    874e:	b004      	add	sp, #16
    8750:	bd80      	pop	{r7, pc}
    8752:	46c0      	nop			; (mov r8, r8)
    8754:	0000831d 	.word	0x0000831d
    8758:	40000c02 	.word	0x40000c02
    875c:	40000c00 	.word	0x40000c00
    8760:	00008331 	.word	0x00008331
    8764:	00008515 	.word	0x00008515

00008768 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8768:	b580      	push	{r7, lr}
    876a:	b084      	sub	sp, #16
    876c:	af00      	add	r7, sp, #0
    876e:	0002      	movs	r2, r0
    8770:	1dfb      	adds	r3, r7, #7
    8772:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8774:	230f      	movs	r3, #15
    8776:	18fb      	adds	r3, r7, r3
    8778:	1dfa      	adds	r2, r7, #7
    877a:	7812      	ldrb	r2, [r2, #0]
    877c:	09d2      	lsrs	r2, r2, #7
    877e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8780:	230e      	movs	r3, #14
    8782:	18fb      	adds	r3, r7, r3
    8784:	1dfa      	adds	r2, r7, #7
    8786:	7812      	ldrb	r2, [r2, #0]
    8788:	0952      	lsrs	r2, r2, #5
    878a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    878c:	4b0d      	ldr	r3, [pc, #52]	; (87c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    878e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8790:	230f      	movs	r3, #15
    8792:	18fb      	adds	r3, r7, r3
    8794:	781b      	ldrb	r3, [r3, #0]
    8796:	2b00      	cmp	r3, #0
    8798:	d10f      	bne.n	87ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    879a:	230f      	movs	r3, #15
    879c:	18fb      	adds	r3, r7, r3
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	009b      	lsls	r3, r3, #2
    87a2:	2210      	movs	r2, #16
    87a4:	4694      	mov	ip, r2
    87a6:	44bc      	add	ip, r7
    87a8:	4463      	add	r3, ip
    87aa:	3b08      	subs	r3, #8
    87ac:	681a      	ldr	r2, [r3, #0]
    87ae:	230e      	movs	r3, #14
    87b0:	18fb      	adds	r3, r7, r3
    87b2:	781b      	ldrb	r3, [r3, #0]
    87b4:	01db      	lsls	r3, r3, #7
    87b6:	18d3      	adds	r3, r2, r3
    87b8:	e000      	b.n	87bc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    87ba:	2300      	movs	r3, #0
	}
}
    87bc:	0018      	movs	r0, r3
    87be:	46bd      	mov	sp, r7
    87c0:	b004      	add	sp, #16
    87c2:	bd80      	pop	{r7, pc}
    87c4:	41004400 	.word	0x41004400

000087c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	b088      	sub	sp, #32
    87cc:	af00      	add	r7, sp, #0
    87ce:	60f8      	str	r0, [r7, #12]
    87d0:	60b9      	str	r1, [r7, #8]
    87d2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    87d4:	2300      	movs	r3, #0
    87d6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	78db      	ldrb	r3, [r3, #3]
    87dc:	2201      	movs	r2, #1
    87de:	4053      	eors	r3, r2
    87e0:	b2db      	uxtb	r3, r3
    87e2:	2b00      	cmp	r3, #0
    87e4:	d035      	beq.n	8852 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	781b      	ldrb	r3, [r3, #0]
    87ea:	2b80      	cmp	r3, #128	; 0x80
    87ec:	d00b      	beq.n	8806 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    87ee:	69fb      	ldr	r3, [r7, #28]
    87f0:	2280      	movs	r2, #128	; 0x80
    87f2:	0252      	lsls	r2, r2, #9
    87f4:	4313      	orrs	r3, r2
    87f6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    87f8:	687b      	ldr	r3, [r7, #4]
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	061b      	lsls	r3, r3, #24
    87fe:	001a      	movs	r2, r3
    8800:	69fb      	ldr	r3, [r7, #28]
    8802:	4313      	orrs	r3, r2
    8804:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	785b      	ldrb	r3, [r3, #1]
    880a:	2b00      	cmp	r3, #0
    880c:	d003      	beq.n	8816 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8812:	2b02      	cmp	r3, #2
    8814:	d110      	bne.n	8838 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    8816:	69fb      	ldr	r3, [r7, #28]
    8818:	2280      	movs	r2, #128	; 0x80
    881a:	0292      	lsls	r2, r2, #10
    881c:	4313      	orrs	r3, r2
    881e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	789b      	ldrb	r3, [r3, #2]
    8824:	2b00      	cmp	r3, #0
    8826:	d004      	beq.n	8832 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8828:	69fb      	ldr	r3, [r7, #28]
    882a:	2280      	movs	r2, #128	; 0x80
    882c:	02d2      	lsls	r2, r2, #11
    882e:	4313      	orrs	r3, r2
    8830:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8832:	68fb      	ldr	r3, [r7, #12]
    8834:	68ba      	ldr	r2, [r7, #8]
    8836:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	785b      	ldrb	r3, [r3, #1]
    883c:	2b01      	cmp	r3, #1
    883e:	d003      	beq.n	8848 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8844:	2b02      	cmp	r3, #2
    8846:	d107      	bne.n	8858 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8848:	69fb      	ldr	r3, [r7, #28]
    884a:	4a22      	ldr	r2, [pc, #136]	; (88d4 <_system_pinmux_config+0x10c>)
    884c:	4013      	ands	r3, r2
    884e:	61fb      	str	r3, [r7, #28]
    8850:	e002      	b.n	8858 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    8852:	68fb      	ldr	r3, [r7, #12]
    8854:	68ba      	ldr	r2, [r7, #8]
    8856:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8858:	68bb      	ldr	r3, [r7, #8]
    885a:	041b      	lsls	r3, r3, #16
    885c:	0c1b      	lsrs	r3, r3, #16
    885e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8860:	68bb      	ldr	r3, [r7, #8]
    8862:	0c1b      	lsrs	r3, r3, #16
    8864:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8866:	69ba      	ldr	r2, [r7, #24]
    8868:	69fb      	ldr	r3, [r7, #28]
    886a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    886c:	22a0      	movs	r2, #160	; 0xa0
    886e:	05d2      	lsls	r2, r2, #23
    8870:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8872:	68fb      	ldr	r3, [r7, #12]
    8874:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8876:	697a      	ldr	r2, [r7, #20]
    8878:	69fb      	ldr	r3, [r7, #28]
    887a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    887c:	22d0      	movs	r2, #208	; 0xd0
    887e:	0612      	lsls	r2, r2, #24
    8880:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8882:	68fb      	ldr	r3, [r7, #12]
    8884:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	78db      	ldrb	r3, [r3, #3]
    888a:	2201      	movs	r2, #1
    888c:	4053      	eors	r3, r2
    888e:	b2db      	uxtb	r3, r3
    8890:	2b00      	cmp	r3, #0
    8892:	d01a      	beq.n	88ca <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8894:	69fa      	ldr	r2, [r7, #28]
    8896:	2380      	movs	r3, #128	; 0x80
    8898:	02db      	lsls	r3, r3, #11
    889a:	4013      	ands	r3, r2
    889c:	d00a      	beq.n	88b4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    889e:	687b      	ldr	r3, [r7, #4]
    88a0:	789b      	ldrb	r3, [r3, #2]
    88a2:	2b01      	cmp	r3, #1
    88a4:	d103      	bne.n	88ae <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    88a6:	68fb      	ldr	r3, [r7, #12]
    88a8:	68ba      	ldr	r2, [r7, #8]
    88aa:	619a      	str	r2, [r3, #24]
    88ac:	e002      	b.n	88b4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    88ae:	68fb      	ldr	r3, [r7, #12]
    88b0:	68ba      	ldr	r2, [r7, #8]
    88b2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	785b      	ldrb	r3, [r3, #1]
    88b8:	2b01      	cmp	r3, #1
    88ba:	d003      	beq.n	88c4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    88bc:	687b      	ldr	r3, [r7, #4]
    88be:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    88c0:	2b02      	cmp	r3, #2
    88c2:	d102      	bne.n	88ca <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    88c4:	68fb      	ldr	r3, [r7, #12]
    88c6:	68ba      	ldr	r2, [r7, #8]
    88c8:	609a      	str	r2, [r3, #8]
		}
	}
}
    88ca:	46c0      	nop			; (mov r8, r8)
    88cc:	46bd      	mov	sp, r7
    88ce:	b008      	add	sp, #32
    88d0:	bd80      	pop	{r7, pc}
    88d2:	46c0      	nop			; (mov r8, r8)
    88d4:	fffbffff 	.word	0xfffbffff

000088d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    88d8:	b580      	push	{r7, lr}
    88da:	b084      	sub	sp, #16
    88dc:	af00      	add	r7, sp, #0
    88de:	0002      	movs	r2, r0
    88e0:	6039      	str	r1, [r7, #0]
    88e2:	1dfb      	adds	r3, r7, #7
    88e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    88e6:	1dfb      	adds	r3, r7, #7
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	0018      	movs	r0, r3
    88ec:	4b0a      	ldr	r3, [pc, #40]	; (8918 <system_pinmux_pin_set_config+0x40>)
    88ee:	4798      	blx	r3
    88f0:	0003      	movs	r3, r0
    88f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    88f4:	1dfb      	adds	r3, r7, #7
    88f6:	781b      	ldrb	r3, [r3, #0]
    88f8:	221f      	movs	r2, #31
    88fa:	4013      	ands	r3, r2
    88fc:	2201      	movs	r2, #1
    88fe:	409a      	lsls	r2, r3
    8900:	0013      	movs	r3, r2
    8902:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    8904:	683a      	ldr	r2, [r7, #0]
    8906:	68b9      	ldr	r1, [r7, #8]
    8908:	68fb      	ldr	r3, [r7, #12]
    890a:	0018      	movs	r0, r3
    890c:	4b03      	ldr	r3, [pc, #12]	; (891c <system_pinmux_pin_set_config+0x44>)
    890e:	4798      	blx	r3
}
    8910:	46c0      	nop			; (mov r8, r8)
    8912:	46bd      	mov	sp, r7
    8914:	b004      	add	sp, #16
    8916:	bd80      	pop	{r7, pc}
    8918:	00008769 	.word	0x00008769
    891c:	000087c9 	.word	0x000087c9

00008920 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    8920:	b580      	push	{r7, lr}
    8922:	af00      	add	r7, sp, #0
	return;
    8924:	46c0      	nop			; (mov r8, r8)
}
    8926:	46bd      	mov	sp, r7
    8928:	bd80      	pop	{r7, pc}
	...

0000892c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    892c:	b580      	push	{r7, lr}
    892e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8930:	4b06      	ldr	r3, [pc, #24]	; (894c <system_init+0x20>)
    8932:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8934:	4b06      	ldr	r3, [pc, #24]	; (8950 <system_init+0x24>)
    8936:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8938:	4b06      	ldr	r3, [pc, #24]	; (8954 <system_init+0x28>)
    893a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    893c:	4b06      	ldr	r3, [pc, #24]	; (8958 <system_init+0x2c>)
    893e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8940:	4b06      	ldr	r3, [pc, #24]	; (895c <system_init+0x30>)
    8942:	4798      	blx	r3
}
    8944:	46c0      	nop			; (mov r8, r8)
    8946:	46bd      	mov	sp, r7
    8948:	bd80      	pop	{r7, pc}
    894a:	46c0      	nop			; (mov r8, r8)
    894c:	0000813d 	.word	0x0000813d
    8950:	00007c2d 	.word	0x00007c2d
    8954:	00008921 	.word	0x00008921
    8958:	00008921 	.word	0x00008921
    895c:	00008921 	.word	0x00008921

00008960 <nvm_get_config_defaults>:
{
    8960:	b580      	push	{r7, lr}
    8962:	b082      	sub	sp, #8
    8964:	af00      	add	r7, sp, #0
    8966:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	2200      	movs	r2, #0
    896c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	2201      	movs	r2, #1
    8972:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    8974:	4b08      	ldr	r3, [pc, #32]	; (8998 <nvm_get_config_defaults+0x38>)
    8976:	685b      	ldr	r3, [r3, #4]
    8978:	06db      	lsls	r3, r3, #27
    897a:	0f1b      	lsrs	r3, r3, #28
    897c:	b2db      	uxtb	r3, r3
    897e:	001a      	movs	r2, r3
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	2200      	movs	r2, #0
    8988:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    898a:	687b      	ldr	r3, [r7, #4]
    898c:	2200      	movs	r2, #0
    898e:	711a      	strb	r2, [r3, #4]
}
    8990:	46c0      	nop			; (mov r8, r8)
    8992:	46bd      	mov	sp, r7
    8994:	b002      	add	sp, #8
    8996:	bd80      	pop	{r7, pc}
    8998:	41004000 	.word	0x41004000

0000899c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    899c:	b590      	push	{r4, r7, lr}
    899e:	b085      	sub	sp, #20
    89a0:	af00      	add	r7, sp, #0
    89a2:	0002      	movs	r2, r0
    89a4:	1dfb      	adds	r3, r7, #7
    89a6:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    89a8:	230f      	movs	r3, #15
    89aa:	18fb      	adds	r3, r7, r3
    89ac:	2200      	movs	r2, #0
    89ae:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    89b0:	4b0a      	ldr	r3, [pc, #40]	; (89dc <_eeprom_emulator_nvm_erase_row+0x40>)
    89b2:	685b      	ldr	r3, [r3, #4]
    89b4:	1dfa      	adds	r2, r7, #7
    89b6:	7812      	ldrb	r2, [r2, #0]
    89b8:	0212      	lsls	r2, r2, #8
    89ba:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
    89bc:	220f      	movs	r2, #15
    89be:	18bc      	adds	r4, r7, r2
    89c0:	0018      	movs	r0, r3
    89c2:	4b07      	ldr	r3, [pc, #28]	; (89e0 <_eeprom_emulator_nvm_erase_row+0x44>)
    89c4:	4798      	blx	r3
    89c6:	0003      	movs	r3, r0
    89c8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    89ca:	230f      	movs	r3, #15
    89cc:	18fb      	adds	r3, r7, r3
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	2b05      	cmp	r3, #5
    89d2:	d0ed      	beq.n	89b0 <_eeprom_emulator_nvm_erase_row+0x14>
}
    89d4:	46c0      	nop			; (mov r8, r8)
    89d6:	46bd      	mov	sp, r7
    89d8:	b005      	add	sp, #20
    89da:	bd90      	pop	{r4, r7, pc}
    89dc:	20000248 	.word	0x20000248
    89e0:	00002f0d 	.word	0x00002f0d

000089e4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
    89e4:	b590      	push	{r4, r7, lr}
    89e6:	b085      	sub	sp, #20
    89e8:	af00      	add	r7, sp, #0
    89ea:	0002      	movs	r2, r0
    89ec:	6039      	str	r1, [r7, #0]
    89ee:	1dbb      	adds	r3, r7, #6
    89f0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    89f2:	230f      	movs	r3, #15
    89f4:	18fb      	adds	r3, r7, r3
    89f6:	2200      	movs	r2, #0
    89f8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    89fa:	4b0c      	ldr	r3, [pc, #48]	; (8a2c <_eeprom_emulator_nvm_fill_cache+0x48>)
    89fc:	685a      	ldr	r2, [r3, #4]
    89fe:	1dbb      	adds	r3, r7, #6
    8a00:	881b      	ldrh	r3, [r3, #0]
    8a02:	019b      	lsls	r3, r3, #6
    8a04:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
    8a06:	0018      	movs	r0, r3
    8a08:	230f      	movs	r3, #15
    8a0a:	18fc      	adds	r4, r7, r3
    8a0c:	683b      	ldr	r3, [r7, #0]
    8a0e:	2240      	movs	r2, #64	; 0x40
    8a10:	0019      	movs	r1, r3
    8a12:	4b07      	ldr	r3, [pc, #28]	; (8a30 <_eeprom_emulator_nvm_fill_cache+0x4c>)
    8a14:	4798      	blx	r3
    8a16:	0003      	movs	r3, r0
    8a18:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    8a1a:	230f      	movs	r3, #15
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	2b05      	cmp	r3, #5
    8a22:	d0ea      	beq.n	89fa <_eeprom_emulator_nvm_fill_cache+0x16>
}
    8a24:	46c0      	nop			; (mov r8, r8)
    8a26:	46bd      	mov	sp, r7
    8a28:	b005      	add	sp, #20
    8a2a:	bd90      	pop	{r4, r7, pc}
    8a2c:	20000248 	.word	0x20000248
    8a30:	00002cc5 	.word	0x00002cc5

00008a34 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
    8a34:	b590      	push	{r4, r7, lr}
    8a36:	b085      	sub	sp, #20
    8a38:	af00      	add	r7, sp, #0
    8a3a:	0002      	movs	r2, r0
    8a3c:	1dbb      	adds	r3, r7, #6
    8a3e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8a40:	230f      	movs	r3, #15
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	2200      	movs	r2, #0
    8a46:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    8a48:	4b0b      	ldr	r3, [pc, #44]	; (8a78 <_eeprom_emulator_nvm_commit_cache+0x44>)
    8a4a:	685a      	ldr	r2, [r3, #4]
    8a4c:	1dbb      	adds	r3, r7, #6
    8a4e:	881b      	ldrh	r3, [r3, #0]
    8a50:	019b      	lsls	r3, r3, #6
    8a52:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
    8a54:	220f      	movs	r2, #15
    8a56:	18bc      	adds	r4, r7, r2
    8a58:	2200      	movs	r2, #0
    8a5a:	0019      	movs	r1, r3
    8a5c:	2004      	movs	r0, #4
    8a5e:	4b07      	ldr	r3, [pc, #28]	; (8a7c <_eeprom_emulator_nvm_commit_cache+0x48>)
    8a60:	4798      	blx	r3
    8a62:	0003      	movs	r3, r0
    8a64:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    8a66:	230f      	movs	r3, #15
    8a68:	18fb      	adds	r3, r7, r3
    8a6a:	781b      	ldrb	r3, [r3, #0]
    8a6c:	2b05      	cmp	r3, #5
    8a6e:	d0eb      	beq.n	8a48 <_eeprom_emulator_nvm_commit_cache+0x14>
}
    8a70:	46c0      	nop			; (mov r8, r8)
    8a72:	46bd      	mov	sp, r7
    8a74:	b005      	add	sp, #20
    8a76:	bd90      	pop	{r4, r7, pc}
    8a78:	20000248 	.word	0x20000248
    8a7c:	00002bad 	.word	0x00002bad

00008a80 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
    8a80:	b590      	push	{r4, r7, lr}
    8a82:	b085      	sub	sp, #20
    8a84:	af00      	add	r7, sp, #0
    8a86:	0002      	movs	r2, r0
    8a88:	6039      	str	r1, [r7, #0]
    8a8a:	1dbb      	adds	r3, r7, #6
    8a8c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8a8e:	230f      	movs	r3, #15
    8a90:	18fb      	adds	r3, r7, r3
    8a92:	2200      	movs	r2, #0
    8a94:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    8a96:	4b0c      	ldr	r3, [pc, #48]	; (8ac8 <_eeprom_emulator_nvm_read_page+0x48>)
    8a98:	685a      	ldr	r2, [r3, #4]
    8a9a:	1dbb      	adds	r3, r7, #6
    8a9c:	881b      	ldrh	r3, [r3, #0]
    8a9e:	019b      	lsls	r3, r3, #6
    8aa0:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
    8aa2:	0018      	movs	r0, r3
    8aa4:	230f      	movs	r3, #15
    8aa6:	18fc      	adds	r4, r7, r3
    8aa8:	683b      	ldr	r3, [r7, #0]
    8aaa:	2240      	movs	r2, #64	; 0x40
    8aac:	0019      	movs	r1, r3
    8aae:	4b07      	ldr	r3, [pc, #28]	; (8acc <_eeprom_emulator_nvm_read_page+0x4c>)
    8ab0:	4798      	blx	r3
    8ab2:	0003      	movs	r3, r0
    8ab4:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    8ab6:	230f      	movs	r3, #15
    8ab8:	18fb      	adds	r3, r7, r3
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	2b05      	cmp	r3, #5
    8abe:	d0ea      	beq.n	8a96 <_eeprom_emulator_nvm_read_page+0x16>
}
    8ac0:	46c0      	nop			; (mov r8, r8)
    8ac2:	46bd      	mov	sp, r7
    8ac4:	b005      	add	sp, #20
    8ac6:	bd90      	pop	{r4, r7, pc}
    8ac8:	20000248 	.word	0x20000248
    8acc:	00002e11 	.word	0x00002e11

00008ad0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b092      	sub	sp, #72	; 0x48
    8ad4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
    8ad6:	2346      	movs	r3, #70	; 0x46
    8ad8:	18fb      	adds	r3, r7, r3
    8ada:	2200      	movs	r2, #0
    8adc:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
    8ade:	4b32      	ldr	r3, [pc, #200]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8ae0:	2287      	movs	r2, #135	; 0x87
    8ae2:	2100      	movs	r1, #0
    8ae4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    8ae6:	4b30      	ldr	r3, [pc, #192]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8ae8:	2287      	movs	r2, #135	; 0x87
    8aea:	5c9b      	ldrb	r3, [r3, r2]
    8aec:	0018      	movs	r0, r3
    8aee:	4b2f      	ldr	r3, [pc, #188]	; (8bac <_eeprom_emulator_format_memory+0xdc>)
    8af0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    8af2:	2344      	movs	r3, #68	; 0x44
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	2204      	movs	r2, #4
    8af8:	801a      	strh	r2, [r3, #0]
    8afa:	e04a      	b.n	8b92 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8afc:	2344      	movs	r3, #68	; 0x44
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	881a      	ldrh	r2, [r3, #0]
    8b02:	4b29      	ldr	r3, [pc, #164]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8b04:	891b      	ldrh	r3, [r3, #8]
    8b06:	3b01      	subs	r3, #1
    8b08:	429a      	cmp	r2, r3
    8b0a:	d03a      	beq.n	8b82 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    8b0c:	2344      	movs	r3, #68	; 0x44
    8b0e:	18fb      	adds	r3, r7, r3
    8b10:	881b      	ldrh	r3, [r3, #0]
    8b12:	2203      	movs	r2, #3
    8b14:	4013      	ands	r3, r2
    8b16:	b29b      	uxth	r3, r3
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d108      	bne.n	8b2e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    8b1c:	2344      	movs	r3, #68	; 0x44
    8b1e:	18fb      	adds	r3, r7, r3
    8b20:	881b      	ldrh	r3, [r3, #0]
    8b22:	089b      	lsrs	r3, r3, #2
    8b24:	b29b      	uxth	r3, r3
    8b26:	b2db      	uxtb	r3, r3
    8b28:	0018      	movs	r0, r3
    8b2a:	4b20      	ldr	r3, [pc, #128]	; (8bac <_eeprom_emulator_format_memory+0xdc>)
    8b2c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    8b2e:	2344      	movs	r3, #68	; 0x44
    8b30:	18fb      	adds	r3, r7, r3
    8b32:	881b      	ldrh	r3, [r3, #0]
    8b34:	2203      	movs	r2, #3
    8b36:	4013      	ands	r3, r2
    8b38:	b29b      	uxth	r3, r3
    8b3a:	2b01      	cmp	r3, #1
    8b3c:	d822      	bhi.n	8b84 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
    8b3e:	1d3b      	adds	r3, r7, #4
    8b40:	2240      	movs	r2, #64	; 0x40
    8b42:	21ff      	movs	r1, #255	; 0xff
    8b44:	0018      	movs	r0, r3
    8b46:	4b1a      	ldr	r3, [pc, #104]	; (8bb0 <_eeprom_emulator_format_memory+0xe0>)
    8b48:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
    8b4a:	2346      	movs	r3, #70	; 0x46
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	881b      	ldrh	r3, [r3, #0]
    8b50:	b2da      	uxtb	r2, r3
    8b52:	1d3b      	adds	r3, r7, #4
    8b54:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    8b56:	1d3a      	adds	r2, r7, #4
    8b58:	2344      	movs	r3, #68	; 0x44
    8b5a:	18fb      	adds	r3, r7, r3
    8b5c:	881b      	ldrh	r3, [r3, #0]
    8b5e:	0011      	movs	r1, r2
    8b60:	0018      	movs	r0, r3
    8b62:	4b14      	ldr	r3, [pc, #80]	; (8bb4 <_eeprom_emulator_format_memory+0xe4>)
    8b64:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    8b66:	2344      	movs	r3, #68	; 0x44
    8b68:	18fb      	adds	r3, r7, r3
    8b6a:	881b      	ldrh	r3, [r3, #0]
    8b6c:	0018      	movs	r0, r3
    8b6e:	4b12      	ldr	r3, [pc, #72]	; (8bb8 <_eeprom_emulator_format_memory+0xe8>)
    8b70:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
    8b72:	2346      	movs	r3, #70	; 0x46
    8b74:	18fb      	adds	r3, r7, r3
    8b76:	881a      	ldrh	r2, [r3, #0]
    8b78:	2346      	movs	r3, #70	; 0x46
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	3201      	adds	r2, #1
    8b7e:	801a      	strh	r2, [r3, #0]
    8b80:	e000      	b.n	8b84 <_eeprom_emulator_format_memory+0xb4>
			continue;
    8b82:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    8b84:	2344      	movs	r3, #68	; 0x44
    8b86:	18fb      	adds	r3, r7, r3
    8b88:	881a      	ldrh	r2, [r3, #0]
    8b8a:	2344      	movs	r3, #68	; 0x44
    8b8c:	18fb      	adds	r3, r7, r3
    8b8e:	3201      	adds	r2, #1
    8b90:	801a      	strh	r2, [r3, #0]
    8b92:	4b05      	ldr	r3, [pc, #20]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8b94:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    8b96:	2244      	movs	r2, #68	; 0x44
    8b98:	18ba      	adds	r2, r7, r2
    8b9a:	8812      	ldrh	r2, [r2, #0]
    8b9c:	429a      	cmp	r2, r3
    8b9e:	d3ad      	bcc.n	8afc <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
    8ba0:	46c0      	nop			; (mov r8, r8)
    8ba2:	46bd      	mov	sp, r7
    8ba4:	b012      	add	sp, #72	; 0x48
    8ba6:	bd80      	pop	{r7, pc}
    8ba8:	20000248 	.word	0x20000248
    8bac:	0000899d 	.word	0x0000899d
    8bb0:	0001c193 	.word	0x0001c193
    8bb4:	000089e5 	.word	0x000089e5
    8bb8:	00008a35 	.word	0x00008a35

00008bbc <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    8bbc:	b580      	push	{r7, lr}
    8bbe:	b084      	sub	sp, #16
    8bc0:	af00      	add	r7, sp, #0
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    8bc2:	230e      	movs	r3, #14
    8bc4:	18fb      	adds	r3, r7, r3
    8bc6:	2200      	movs	r2, #0
    8bc8:	801a      	strh	r2, [r3, #0]
    8bca:	e033      	b.n	8c34 <_eeprom_emulator_update_page_mapping+0x78>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    8bcc:	230e      	movs	r3, #14
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	881a      	ldrh	r2, [r3, #0]
    8bd2:	4b4c      	ldr	r3, [pc, #304]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8bd4:	891b      	ldrh	r3, [r3, #8]
    8bd6:	3b01      	subs	r3, #1
    8bd8:	429a      	cmp	r2, r3
    8bda:	d023      	beq.n	8c24 <_eeprom_emulator_update_page_mapping+0x68>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    8bdc:	4b49      	ldr	r3, [pc, #292]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8bde:	685a      	ldr	r2, [r3, #4]
    8be0:	230e      	movs	r3, #14
    8be2:	18fb      	adds	r3, r7, r3
    8be4:	881b      	ldrh	r3, [r3, #0]
    8be6:	019b      	lsls	r3, r3, #6
    8be8:	18d3      	adds	r3, r2, r3
    8bea:	781a      	ldrb	r2, [r3, #0]
    8bec:	2308      	movs	r3, #8
    8bee:	18fb      	adds	r3, r7, r3
    8bf0:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8bf2:	2308      	movs	r3, #8
    8bf4:	18fb      	adds	r3, r7, r3
    8bf6:	881b      	ldrh	r3, [r3, #0]
    8bf8:	2bff      	cmp	r3, #255	; 0xff
    8bfa:	d014      	beq.n	8c26 <_eeprom_emulator_update_page_mapping+0x6a>
				(logical_page < _eeprom_instance.logical_pages)) {
    8bfc:	4b41      	ldr	r3, [pc, #260]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8bfe:	7a9b      	ldrb	r3, [r3, #10]
    8c00:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8c02:	2208      	movs	r2, #8
    8c04:	18ba      	adds	r2, r7, r2
    8c06:	8812      	ldrh	r2, [r2, #0]
    8c08:	429a      	cmp	r2, r3
    8c0a:	d20c      	bcs.n	8c26 <_eeprom_emulator_update_page_mapping+0x6a>
			_eeprom_instance.page_map[logical_page] = c;
    8c0c:	2308      	movs	r3, #8
    8c0e:	18fb      	adds	r3, r7, r3
    8c10:	881b      	ldrh	r3, [r3, #0]
    8c12:	220e      	movs	r2, #14
    8c14:	18ba      	adds	r2, r7, r2
    8c16:	8812      	ldrh	r2, [r2, #0]
    8c18:	b2d1      	uxtb	r1, r2
    8c1a:	4a3a      	ldr	r2, [pc, #232]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c1c:	18d3      	adds	r3, r2, r3
    8c1e:	1c0a      	adds	r2, r1, #0
    8c20:	72da      	strb	r2, [r3, #11]
    8c22:	e000      	b.n	8c26 <_eeprom_emulator_update_page_mapping+0x6a>
			continue;
    8c24:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    8c26:	230e      	movs	r3, #14
    8c28:	18fb      	adds	r3, r7, r3
    8c2a:	881a      	ldrh	r2, [r3, #0]
    8c2c:	230e      	movs	r3, #14
    8c2e:	18fb      	adds	r3, r7, r3
    8c30:	3201      	adds	r2, #1
    8c32:	801a      	strh	r2, [r3, #0]
    8c34:	4b33      	ldr	r3, [pc, #204]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c36:	891b      	ldrh	r3, [r3, #8]
    8c38:	220e      	movs	r2, #14
    8c3a:	18ba      	adds	r2, r7, r2
    8c3c:	8812      	ldrh	r2, [r2, #0]
    8c3e:	429a      	cmp	r2, r3
    8c40:	d3c4      	bcc.n	8bcc <_eeprom_emulator_update_page_mapping+0x10>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    8c42:	4b30      	ldr	r3, [pc, #192]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c44:	2287      	movs	r2, #135	; 0x87
    8c46:	213f      	movs	r1, #63	; 0x3f
    8c48:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8c4a:	230c      	movs	r3, #12
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	2200      	movs	r2, #0
    8c50:	801a      	strh	r2, [r3, #0]
    8c52:	e04a      	b.n	8cea <_eeprom_emulator_update_page_mapping+0x12e>
		bool spare_row_found = true;
    8c54:	230b      	movs	r3, #11
    8c56:	18fb      	adds	r3, r7, r3
    8c58:	2201      	movs	r2, #1
    8c5a:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8c5c:	230a      	movs	r3, #10
    8c5e:	18fb      	adds	r3, r7, r3
    8c60:	2200      	movs	r2, #0
    8c62:	701a      	strb	r2, [r3, #0]
    8c64:	e028      	b.n	8cb8 <_eeprom_emulator_update_page_mapping+0xfc>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    8c66:	230c      	movs	r3, #12
    8c68:	18fb      	adds	r3, r7, r3
    8c6a:	881b      	ldrh	r3, [r3, #0]
    8c6c:	009b      	lsls	r3, r3, #2
    8c6e:	b299      	uxth	r1, r3
    8c70:	230a      	movs	r3, #10
    8c72:	18fb      	adds	r3, r7, r3
    8c74:	781b      	ldrb	r3, [r3, #0]
    8c76:	b29a      	uxth	r2, r3
    8c78:	1dbb      	adds	r3, r7, #6
    8c7a:	188a      	adds	r2, r1, r2
    8c7c:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8c7e:	1dbb      	adds	r3, r7, #6
    8c80:	881a      	ldrh	r2, [r3, #0]
    8c82:	4b20      	ldr	r3, [pc, #128]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c84:	891b      	ldrh	r3, [r3, #8]
    8c86:	3b01      	subs	r3, #1
    8c88:	429a      	cmp	r2, r3
    8c8a:	d00d      	beq.n	8ca8 <_eeprom_emulator_update_page_mapping+0xec>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    8c8c:	4b1d      	ldr	r3, [pc, #116]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c8e:	685a      	ldr	r2, [r3, #4]
    8c90:	1dbb      	adds	r3, r7, #6
    8c92:	881b      	ldrh	r3, [r3, #0]
    8c94:	019b      	lsls	r3, r3, #6
    8c96:	18d3      	adds	r3, r2, r3
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	2bff      	cmp	r3, #255	; 0xff
    8c9c:	d005      	beq.n	8caa <_eeprom_emulator_update_page_mapping+0xee>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    8c9e:	230b      	movs	r3, #11
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	2200      	movs	r2, #0
    8ca4:	701a      	strb	r2, [r3, #0]
    8ca6:	e000      	b.n	8caa <_eeprom_emulator_update_page_mapping+0xee>
				continue;
    8ca8:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8caa:	230a      	movs	r3, #10
    8cac:	18fb      	adds	r3, r7, r3
    8cae:	781a      	ldrb	r2, [r3, #0]
    8cb0:	230a      	movs	r3, #10
    8cb2:	18fb      	adds	r3, r7, r3
    8cb4:	3201      	adds	r2, #1
    8cb6:	701a      	strb	r2, [r3, #0]
    8cb8:	230a      	movs	r3, #10
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	781b      	ldrb	r3, [r3, #0]
    8cbe:	2b03      	cmp	r3, #3
    8cc0:	d9d1      	bls.n	8c66 <_eeprom_emulator_update_page_mapping+0xaa>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    8cc2:	230b      	movs	r3, #11
    8cc4:	18fb      	adds	r3, r7, r3
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	2b00      	cmp	r3, #0
    8cca:	d007      	beq.n	8cdc <_eeprom_emulator_update_page_mapping+0x120>
			_eeprom_instance.spare_row = c;
    8ccc:	230c      	movs	r3, #12
    8cce:	18fb      	adds	r3, r7, r3
    8cd0:	881b      	ldrh	r3, [r3, #0]
    8cd2:	b2d9      	uxtb	r1, r3
    8cd4:	4b0b      	ldr	r3, [pc, #44]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8cd6:	2287      	movs	r2, #135	; 0x87
    8cd8:	5499      	strb	r1, [r3, r2]
			break;
    8cda:	e00f      	b.n	8cfc <_eeprom_emulator_update_page_mapping+0x140>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8cdc:	230c      	movs	r3, #12
    8cde:	18fb      	adds	r3, r7, r3
    8ce0:	881a      	ldrh	r2, [r3, #0]
    8ce2:	230c      	movs	r3, #12
    8ce4:	18fb      	adds	r3, r7, r3
    8ce6:	3201      	adds	r2, #1
    8ce8:	801a      	strh	r2, [r3, #0]
    8cea:	4b06      	ldr	r3, [pc, #24]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8cec:	891b      	ldrh	r3, [r3, #8]
    8cee:	089b      	lsrs	r3, r3, #2
    8cf0:	b29b      	uxth	r3, r3
    8cf2:	220c      	movs	r2, #12
    8cf4:	18ba      	adds	r2, r7, r2
    8cf6:	8812      	ldrh	r2, [r2, #0]
    8cf8:	429a      	cmp	r2, r3
    8cfa:	d3ab      	bcc.n	8c54 <_eeprom_emulator_update_page_mapping+0x98>
		}
	}
}
    8cfc:	46c0      	nop			; (mov r8, r8)
    8cfe:	46bd      	mov	sp, r7
    8d00:	b004      	add	sp, #16
    8d02:	bd80      	pop	{r7, pc}
    8d04:	20000248 	.word	0x20000248

00008d08 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b084      	sub	sp, #16
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	0002      	movs	r2, r0
    8d10:	6039      	str	r1, [r7, #0]
    8d12:	1dfb      	adds	r3, r7, #7
    8d14:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
    8d16:	230e      	movs	r3, #14
    8d18:	18fb      	adds	r3, r7, r3
    8d1a:	1dfa      	adds	r2, r7, #7
    8d1c:	7812      	ldrb	r2, [r2, #0]
    8d1e:	0892      	lsrs	r2, r2, #2
    8d20:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    8d22:	230d      	movs	r3, #13
    8d24:	18fb      	adds	r3, r7, r3
    8d26:	1dfa      	adds	r2, r7, #7
    8d28:	7812      	ldrb	r2, [r2, #0]
    8d2a:	2103      	movs	r1, #3
    8d2c:	400a      	ands	r2, r1
    8d2e:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8d30:	230f      	movs	r3, #15
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	220d      	movs	r2, #13
    8d36:	18ba      	adds	r2, r7, r2
    8d38:	7812      	ldrb	r2, [r2, #0]
    8d3a:	701a      	strb	r2, [r3, #0]
    8d3c:	e023      	b.n	8d86 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    8d3e:	230e      	movs	r3, #14
    8d40:	18fb      	adds	r3, r7, r3
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	009b      	lsls	r3, r3, #2
    8d46:	b2d9      	uxtb	r1, r3
    8d48:	230c      	movs	r3, #12
    8d4a:	18fb      	adds	r3, r7, r3
    8d4c:	220f      	movs	r2, #15
    8d4e:	18ba      	adds	r2, r7, r2
    8d50:	7812      	ldrb	r2, [r2, #0]
    8d52:	188a      	adds	r2, r1, r2
    8d54:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
    8d56:	4b11      	ldr	r3, [pc, #68]	; (8d9c <_eeprom_emulator_is_page_free_on_row+0x94>)
    8d58:	685a      	ldr	r2, [r3, #4]
    8d5a:	230c      	movs	r3, #12
    8d5c:	18fb      	adds	r3, r7, r3
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	019b      	lsls	r3, r3, #6
    8d62:	18d3      	adds	r3, r2, r3
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	2bff      	cmp	r3, #255	; 0xff
    8d68:	d106      	bne.n	8d78 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
    8d6a:	683b      	ldr	r3, [r7, #0]
    8d6c:	220c      	movs	r2, #12
    8d6e:	18ba      	adds	r2, r7, r2
    8d70:	7812      	ldrb	r2, [r2, #0]
    8d72:	701a      	strb	r2, [r3, #0]
			return true;
    8d74:	2301      	movs	r3, #1
    8d76:	e00c      	b.n	8d92 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8d78:	230f      	movs	r3, #15
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	781a      	ldrb	r2, [r3, #0]
    8d7e:	230f      	movs	r3, #15
    8d80:	18fb      	adds	r3, r7, r3
    8d82:	3201      	adds	r2, #1
    8d84:	701a      	strb	r2, [r3, #0]
    8d86:	230f      	movs	r3, #15
    8d88:	18fb      	adds	r3, r7, r3
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	2b03      	cmp	r3, #3
    8d8e:	d9d6      	bls.n	8d3e <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
    8d90:	2300      	movs	r3, #0
}
    8d92:	0018      	movs	r0, r3
    8d94:	46bd      	mov	sp, r7
    8d96:	b004      	add	sp, #16
    8d98:	bd80      	pop	{r7, pc}
    8d9a:	46c0      	nop			; (mov r8, r8)
    8d9c:	20000248 	.word	0x20000248

00008da0 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
    8da0:	b580      	push	{r7, lr}
    8da2:	b086      	sub	sp, #24
    8da4:	af00      	add	r7, sp, #0
    8da6:	603a      	str	r2, [r7, #0]
    8da8:	1dfb      	adds	r3, r7, #7
    8daa:	1c02      	adds	r2, r0, #0
    8dac:	701a      	strb	r2, [r3, #0]
    8dae:	1dbb      	adds	r3, r7, #6
    8db0:	1c0a      	adds	r2, r1, #0
    8db2:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8db4:	2314      	movs	r3, #20
    8db6:	18fb      	adds	r3, r7, r3
    8db8:	2200      	movs	r2, #0
    8dba:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    8dbc:	4b69      	ldr	r3, [pc, #420]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8dbe:	685b      	ldr	r3, [r3, #4]
    8dc0:	1dfa      	adds	r2, r7, #7
    8dc2:	7812      	ldrb	r2, [r2, #0]
    8dc4:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
    8dc6:	189b      	adds	r3, r3, r2
    8dc8:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    8dca:	693b      	ldr	r3, [r7, #16]
    8dcc:	781a      	ldrb	r2, [r3, #0]
    8dce:	2308      	movs	r3, #8
    8dd0:	18fb      	adds	r3, r7, r3
    8dd2:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    8dd4:	1dfb      	adds	r3, r7, #7
    8dd6:	781b      	ldrb	r3, [r3, #0]
    8dd8:	009b      	lsls	r3, r3, #2
    8dda:	b2da      	uxtb	r2, r3
    8ddc:	2308      	movs	r3, #8
    8dde:	18fb      	adds	r3, r7, r3
    8de0:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
    8de2:	693b      	ldr	r3, [r7, #16]
    8de4:	3340      	adds	r3, #64	; 0x40
    8de6:	781a      	ldrb	r2, [r3, #0]
    8de8:	2308      	movs	r3, #8
    8dea:	18fb      	adds	r3, r7, r3
    8dec:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    8dee:	1dfb      	adds	r3, r7, #7
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	009b      	lsls	r3, r3, #2
    8df4:	b2db      	uxtb	r3, r3
    8df6:	3301      	adds	r3, #1
    8df8:	b2da      	uxtb	r2, r3
    8dfa:	2308      	movs	r3, #8
    8dfc:	18fb      	adds	r3, r7, r3
    8dfe:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
    8e00:	2317      	movs	r3, #23
    8e02:	18fb      	adds	r3, r7, r3
    8e04:	2200      	movs	r2, #0
    8e06:	701a      	strb	r2, [r3, #0]
    8e08:	e03a      	b.n	8e80 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8e0a:	2316      	movs	r3, #22
    8e0c:	18fb      	adds	r3, r7, r3
    8e0e:	2202      	movs	r2, #2
    8e10:	701a      	strb	r2, [r3, #0]
    8e12:	e029      	b.n	8e68 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    8e14:	2317      	movs	r3, #23
    8e16:	18fb      	adds	r3, r7, r3
    8e18:	781a      	ldrb	r2, [r3, #0]
    8e1a:	2308      	movs	r3, #8
    8e1c:	18fb      	adds	r3, r7, r3
    8e1e:	0052      	lsls	r2, r2, #1
    8e20:	5cd2      	ldrb	r2, [r2, r3]
    8e22:	2316      	movs	r3, #22
    8e24:	18fb      	adds	r3, r7, r3
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	019b      	lsls	r3, r3, #6
    8e2a:	6939      	ldr	r1, [r7, #16]
    8e2c:	18cb      	adds	r3, r1, r3
    8e2e:	781b      	ldrb	r3, [r3, #0]
    8e30:	429a      	cmp	r2, r3
    8e32:	d112      	bne.n	8e5a <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
    8e34:	2317      	movs	r3, #23
    8e36:	18fb      	adds	r3, r7, r3
    8e38:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    8e3a:	1dfa      	adds	r2, r7, #7
    8e3c:	7812      	ldrb	r2, [r2, #0]
    8e3e:	0092      	lsls	r2, r2, #2
    8e40:	b2d1      	uxtb	r1, r2
    8e42:	2216      	movs	r2, #22
    8e44:	18ba      	adds	r2, r7, r2
    8e46:	7812      	ldrb	r2, [r2, #0]
    8e48:	188a      	adds	r2, r1, r2
    8e4a:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
    8e4c:	2208      	movs	r2, #8
    8e4e:	18ba      	adds	r2, r7, r2
    8e50:	005b      	lsls	r3, r3, #1
    8e52:	18d3      	adds	r3, r2, r3
    8e54:	3301      	adds	r3, #1
    8e56:	1c0a      	adds	r2, r1, #0
    8e58:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8e5a:	2316      	movs	r3, #22
    8e5c:	18fb      	adds	r3, r7, r3
    8e5e:	781a      	ldrb	r2, [r3, #0]
    8e60:	2316      	movs	r3, #22
    8e62:	18fb      	adds	r3, r7, r3
    8e64:	3201      	adds	r2, #1
    8e66:	701a      	strb	r2, [r3, #0]
    8e68:	2316      	movs	r3, #22
    8e6a:	18fb      	adds	r3, r7, r3
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	2b03      	cmp	r3, #3
    8e70:	d9d0      	bls.n	8e14 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
    8e72:	2317      	movs	r3, #23
    8e74:	18fb      	adds	r3, r7, r3
    8e76:	781a      	ldrb	r2, [r3, #0]
    8e78:	2317      	movs	r3, #23
    8e7a:	18fb      	adds	r3, r7, r3
    8e7c:	3201      	adds	r2, #1
    8e7e:	701a      	strb	r2, [r3, #0]
    8e80:	2317      	movs	r3, #23
    8e82:	18fb      	adds	r3, r7, r3
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	2b01      	cmp	r3, #1
    8e88:	d9bf      	bls.n	8e0a <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
    8e8a:	2315      	movs	r3, #21
    8e8c:	18fb      	adds	r3, r7, r3
    8e8e:	2200      	movs	r2, #0
    8e90:	701a      	strb	r2, [r3, #0]
    8e92:	e051      	b.n	8f38 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    8e94:	4b33      	ldr	r3, [pc, #204]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8e96:	2287      	movs	r2, #135	; 0x87
    8e98:	5c9b      	ldrb	r3, [r3, r2]
    8e9a:	009a      	lsls	r2, r3, #2
    8e9c:	2315      	movs	r3, #21
    8e9e:	18fb      	adds	r3, r7, r3
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
    8ea4:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    8ea6:	4b30      	ldr	r3, [pc, #192]	; (8f68 <_eeprom_emulator_move_data_to_spare+0x1c8>)
    8ea8:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
    8eaa:	2315      	movs	r3, #21
    8eac:	18fb      	adds	r3, r7, r3
    8eae:	781a      	ldrb	r2, [r3, #0]
    8eb0:	2308      	movs	r3, #8
    8eb2:	18fb      	adds	r3, r7, r3
    8eb4:	0052      	lsls	r2, r2, #1
    8eb6:	5cd3      	ldrb	r3, [r2, r3]
    8eb8:	1dba      	adds	r2, r7, #6
    8eba:	7812      	ldrb	r2, [r2, #0]
    8ebc:	429a      	cmp	r2, r3
    8ebe:	d10d      	bne.n	8edc <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
    8ec0:	4b28      	ldr	r3, [pc, #160]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8ec2:	1dba      	adds	r2, r7, #6
    8ec4:	2188      	movs	r1, #136	; 0x88
    8ec6:	7812      	ldrb	r2, [r2, #0]
    8ec8:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    8eca:	4b26      	ldr	r3, [pc, #152]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8ecc:	228c      	movs	r2, #140	; 0x8c
    8ece:	6839      	ldr	r1, [r7, #0]
    8ed0:	189b      	adds	r3, r3, r2
    8ed2:	223c      	movs	r2, #60	; 0x3c
    8ed4:	0018      	movs	r0, r3
    8ed6:	4b25      	ldr	r3, [pc, #148]	; (8f6c <_eeprom_emulator_move_data_to_spare+0x1cc>)
    8ed8:	4798      	blx	r3
    8eda:	e00e      	b.n	8efa <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
    8edc:	2315      	movs	r3, #21
    8ede:	18fb      	adds	r3, r7, r3
    8ee0:	781b      	ldrb	r3, [r3, #0]
    8ee2:	2208      	movs	r2, #8
    8ee4:	18ba      	adds	r2, r7, r2
    8ee6:	005b      	lsls	r3, r3, #1
    8ee8:	18d3      	adds	r3, r2, r3
    8eea:	3301      	adds	r3, #1
    8eec:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
    8eee:	b29b      	uxth	r3, r3
    8ef0:	4a1f      	ldr	r2, [pc, #124]	; (8f70 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8ef2:	0011      	movs	r1, r2
    8ef4:	0018      	movs	r0, r3
    8ef6:	4b1f      	ldr	r3, [pc, #124]	; (8f74 <_eeprom_emulator_move_data_to_spare+0x1d4>)
    8ef8:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    8efa:	68fb      	ldr	r3, [r7, #12]
    8efc:	b29b      	uxth	r3, r3
    8efe:	4a1c      	ldr	r2, [pc, #112]	; (8f70 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8f00:	0011      	movs	r1, r2
    8f02:	0018      	movs	r0, r3
    8f04:	4b1c      	ldr	r3, [pc, #112]	; (8f78 <_eeprom_emulator_move_data_to_spare+0x1d8>)
    8f06:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    8f08:	2315      	movs	r3, #21
    8f0a:	18fb      	adds	r3, r7, r3
    8f0c:	781a      	ldrb	r2, [r3, #0]
    8f0e:	2308      	movs	r3, #8
    8f10:	18fb      	adds	r3, r7, r3
    8f12:	0052      	lsls	r2, r2, #1
    8f14:	5cd3      	ldrb	r3, [r2, r3]
    8f16:	0019      	movs	r1, r3
    8f18:	68fb      	ldr	r3, [r7, #12]
    8f1a:	b2da      	uxtb	r2, r3
    8f1c:	4b11      	ldr	r3, [pc, #68]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8f1e:	185b      	adds	r3, r3, r1
    8f20:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
    8f22:	4b10      	ldr	r3, [pc, #64]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8f24:	22c8      	movs	r2, #200	; 0xc8
    8f26:	2101      	movs	r1, #1
    8f28:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
    8f2a:	2315      	movs	r3, #21
    8f2c:	18fb      	adds	r3, r7, r3
    8f2e:	781a      	ldrb	r2, [r3, #0]
    8f30:	2315      	movs	r3, #21
    8f32:	18fb      	adds	r3, r7, r3
    8f34:	3201      	adds	r2, #1
    8f36:	701a      	strb	r2, [r3, #0]
    8f38:	2315      	movs	r3, #21
    8f3a:	18fb      	adds	r3, r7, r3
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	2b01      	cmp	r3, #1
    8f40:	d9a8      	bls.n	8e94 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
    8f42:	1dfb      	adds	r3, r7, #7
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	0018      	movs	r0, r3
    8f48:	4b0c      	ldr	r3, [pc, #48]	; (8f7c <_eeprom_emulator_move_data_to_spare+0x1dc>)
    8f4a:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
    8f4c:	4b05      	ldr	r3, [pc, #20]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8f4e:	1dfa      	adds	r2, r7, #7
    8f50:	2187      	movs	r1, #135	; 0x87
    8f52:	7812      	ldrb	r2, [r2, #0]
    8f54:	545a      	strb	r2, [r3, r1]

	return error_code;
    8f56:	2314      	movs	r3, #20
    8f58:	18fb      	adds	r3, r7, r3
    8f5a:	781b      	ldrb	r3, [r3, #0]
}
    8f5c:	0018      	movs	r0, r3
    8f5e:	46bd      	mov	sp, r7
    8f60:	b006      	add	sp, #24
    8f62:	bd80      	pop	{r7, pc}
    8f64:	20000248 	.word	0x20000248
    8f68:	0000939d 	.word	0x0000939d
    8f6c:	0001c15d 	.word	0x0001c15d
    8f70:	200002d0 	.word	0x200002d0
    8f74:	00008a81 	.word	0x00008a81
    8f78:	000089e5 	.word	0x000089e5
    8f7c:	0000899d 	.word	0x0000899d

00008f80 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
    8f80:	b590      	push	{r4, r7, lr}
    8f82:	b095      	sub	sp, #84	; 0x54
    8f84:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    8f86:	2340      	movs	r3, #64	; 0x40
    8f88:	18fb      	adds	r3, r7, r3
    8f8a:	4a29      	ldr	r2, [pc, #164]	; (9030 <_eeprom_emulator_create_master_page+0xb0>)
    8f8c:	ca13      	ldmia	r2!, {r0, r1, r4}
    8f8e:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
    8f90:	003b      	movs	r3, r7
    8f92:	2240      	movs	r2, #64	; 0x40
    8f94:	21ff      	movs	r1, #255	; 0xff
    8f96:	0018      	movs	r0, r3
    8f98:	4b26      	ldr	r3, [pc, #152]	; (9034 <_eeprom_emulator_create_master_page+0xb4>)
    8f9a:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    8f9c:	234f      	movs	r3, #79	; 0x4f
    8f9e:	18fb      	adds	r3, r7, r3
    8fa0:	2200      	movs	r2, #0
    8fa2:	701a      	strb	r2, [r3, #0]
    8fa4:	e013      	b.n	8fce <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
    8fa6:	234f      	movs	r3, #79	; 0x4f
    8fa8:	18fb      	adds	r3, r7, r3
    8faa:	781a      	ldrb	r2, [r3, #0]
    8fac:	234f      	movs	r3, #79	; 0x4f
    8fae:	18fb      	adds	r3, r7, r3
    8fb0:	7819      	ldrb	r1, [r3, #0]
    8fb2:	2340      	movs	r3, #64	; 0x40
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	0089      	lsls	r1, r1, #2
    8fb8:	58c9      	ldr	r1, [r1, r3]
    8fba:	003b      	movs	r3, r7
    8fbc:	0092      	lsls	r2, r2, #2
    8fbe:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    8fc0:	234f      	movs	r3, #79	; 0x4f
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	781a      	ldrb	r2, [r3, #0]
    8fc6:	234f      	movs	r3, #79	; 0x4f
    8fc8:	18fb      	adds	r3, r7, r3
    8fca:	3201      	adds	r2, #1
    8fcc:	701a      	strb	r2, [r3, #0]
    8fce:	234f      	movs	r3, #79	; 0x4f
    8fd0:	18fb      	adds	r3, r7, r3
    8fd2:	781b      	ldrb	r3, [r3, #0]
    8fd4:	2b02      	cmp	r3, #2
    8fd6:	d9e6      	bls.n	8fa6 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    8fd8:	003b      	movs	r3, r7
    8fda:	2201      	movs	r2, #1
    8fdc:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    8fde:	003b      	movs	r3, r7
    8fe0:	2201      	movs	r2, #1
    8fe2:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    8fe4:	003b      	movs	r3, r7
    8fe6:	2200      	movs	r2, #0
    8fe8:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
    8fea:	003b      	movs	r3, r7
    8fec:	2200      	movs	r2, #0
    8fee:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    8ff0:	4b11      	ldr	r3, [pc, #68]	; (9038 <_eeprom_emulator_create_master_page+0xb8>)
    8ff2:	891b      	ldrh	r3, [r3, #8]
    8ff4:	3b01      	subs	r3, #1
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	da00      	bge.n	8ffc <_eeprom_emulator_create_master_page+0x7c>
    8ffa:	3303      	adds	r3, #3
    8ffc:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
    8ffe:	b2db      	uxtb	r3, r3
    9000:	0018      	movs	r0, r3
    9002:	4b0e      	ldr	r3, [pc, #56]	; (903c <_eeprom_emulator_create_master_page+0xbc>)
    9004:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    9006:	4b0c      	ldr	r3, [pc, #48]	; (9038 <_eeprom_emulator_create_master_page+0xb8>)
    9008:	891b      	ldrh	r3, [r3, #8]
    900a:	3b01      	subs	r3, #1
    900c:	b29b      	uxth	r3, r3
    900e:	003a      	movs	r2, r7
    9010:	0011      	movs	r1, r2
    9012:	0018      	movs	r0, r3
    9014:	4b0a      	ldr	r3, [pc, #40]	; (9040 <_eeprom_emulator_create_master_page+0xc0>)
    9016:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    9018:	4b07      	ldr	r3, [pc, #28]	; (9038 <_eeprom_emulator_create_master_page+0xb8>)
    901a:	891b      	ldrh	r3, [r3, #8]
    901c:	3b01      	subs	r3, #1
    901e:	b29b      	uxth	r3, r3
    9020:	0018      	movs	r0, r3
    9022:	4b08      	ldr	r3, [pc, #32]	; (9044 <_eeprom_emulator_create_master_page+0xc4>)
    9024:	4798      	blx	r3
}
    9026:	46c0      	nop			; (mov r8, r8)
    9028:	46bd      	mov	sp, r7
    902a:	b015      	add	sp, #84	; 0x54
    902c:	bd90      	pop	{r4, r7, pc}
    902e:	46c0      	nop			; (mov r8, r8)
    9030:	0001c630 	.word	0x0001c630
    9034:	0001c193 	.word	0x0001c193
    9038:	20000248 	.word	0x20000248
    903c:	0000899d 	.word	0x0000899d
    9040:	000089e5 	.word	0x000089e5
    9044:	00008a35 	.word	0x00008a35

00009048 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
    9048:	b590      	push	{r4, r7, lr}
    904a:	b095      	sub	sp, #84	; 0x54
    904c:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    904e:	2340      	movs	r3, #64	; 0x40
    9050:	18fb      	adds	r3, r7, r3
    9052:	4a22      	ldr	r2, [pc, #136]	; (90dc <_eeprom_emulator_verify_master_page+0x94>)
    9054:	ca13      	ldmia	r2!, {r0, r1, r4}
    9056:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    9058:	4b21      	ldr	r3, [pc, #132]	; (90e0 <_eeprom_emulator_verify_master_page+0x98>)
    905a:	891b      	ldrh	r3, [r3, #8]
    905c:	3b01      	subs	r3, #1
    905e:	b29b      	uxth	r3, r3
    9060:	003a      	movs	r2, r7
    9062:	0011      	movs	r1, r2
    9064:	0018      	movs	r0, r3
    9066:	4b1f      	ldr	r3, [pc, #124]	; (90e4 <_eeprom_emulator_verify_master_page+0x9c>)
    9068:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    906a:	234f      	movs	r3, #79	; 0x4f
    906c:	18fb      	adds	r3, r7, r3
    906e:	2200      	movs	r2, #0
    9070:	701a      	strb	r2, [r3, #0]
    9072:	e017      	b.n	90a4 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
    9074:	234f      	movs	r3, #79	; 0x4f
    9076:	18fb      	adds	r3, r7, r3
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	003b      	movs	r3, r7
    907c:	0092      	lsls	r2, r2, #2
    907e:	58d2      	ldr	r2, [r2, r3]
    9080:	234f      	movs	r3, #79	; 0x4f
    9082:	18fb      	adds	r3, r7, r3
    9084:	7819      	ldrb	r1, [r3, #0]
    9086:	2340      	movs	r3, #64	; 0x40
    9088:	18fb      	adds	r3, r7, r3
    908a:	0089      	lsls	r1, r1, #2
    908c:	58cb      	ldr	r3, [r1, r3]
    908e:	429a      	cmp	r2, r3
    9090:	d001      	beq.n	9096 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
    9092:	231a      	movs	r3, #26
    9094:	e01e      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    9096:	234f      	movs	r3, #79	; 0x4f
    9098:	18fb      	adds	r3, r7, r3
    909a:	781a      	ldrb	r2, [r3, #0]
    909c:	234f      	movs	r3, #79	; 0x4f
    909e:	18fb      	adds	r3, r7, r3
    90a0:	3201      	adds	r2, #1
    90a2:	701a      	strb	r2, [r3, #0]
    90a4:	234f      	movs	r3, #79	; 0x4f
    90a6:	18fb      	adds	r3, r7, r3
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	2b02      	cmp	r3, #2
    90ac:	d9e2      	bls.n	9074 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    90ae:	003b      	movs	r3, r7
    90b0:	7bdb      	ldrb	r3, [r3, #15]
    90b2:	2b01      	cmp	r3, #1
    90b4:	d001      	beq.n	90ba <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
    90b6:	2310      	movs	r3, #16
    90b8:	e00c      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    90ba:	003b      	movs	r3, r7
    90bc:	7b1b      	ldrb	r3, [r3, #12]
    90be:	2b01      	cmp	r3, #1
    90c0:	d001      	beq.n	90c6 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
    90c2:	2310      	movs	r3, #16
    90c4:	e006      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    90c6:	003b      	movs	r3, r7
    90c8:	7b5b      	ldrb	r3, [r3, #13]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d001      	beq.n	90d2 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
    90ce:	2310      	movs	r3, #16
    90d0:	e000      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
    90d2:	2300      	movs	r3, #0
}
    90d4:	0018      	movs	r0, r3
    90d6:	46bd      	mov	sp, r7
    90d8:	b015      	add	sp, #84	; 0x54
    90da:	bd90      	pop	{r4, r7, pc}
    90dc:	0001c630 	.word	0x0001c630
    90e0:	20000248 	.word	0x20000248
    90e4:	00008a81 	.word	0x00008a81

000090e8 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    90e8:	b590      	push	{r4, r7, lr}
    90ea:	b087      	sub	sp, #28
    90ec:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    90ee:	2317      	movs	r3, #23
    90f0:	18fb      	adds	r3, r7, r3
    90f2:	2200      	movs	r2, #0
    90f4:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
    90f6:	2310      	movs	r3, #16
    90f8:	18fb      	adds	r3, r7, r3
    90fa:	0018      	movs	r0, r3
    90fc:	4b2e      	ldr	r3, [pc, #184]	; (91b8 <eeprom_emulator_init+0xd0>)
    90fe:	4798      	blx	r3
	config.manual_page_write = true;
    9100:	2310      	movs	r3, #16
    9102:	18fb      	adds	r3, r7, r3
    9104:	2201      	movs	r2, #1
    9106:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    9108:	2317      	movs	r3, #23
    910a:	18fc      	adds	r4, r7, r3
    910c:	2310      	movs	r3, #16
    910e:	18fb      	adds	r3, r7, r3
    9110:	0018      	movs	r0, r3
    9112:	4b2a      	ldr	r3, [pc, #168]	; (91bc <eeprom_emulator_init+0xd4>)
    9114:	4798      	blx	r3
    9116:	0003      	movs	r3, r0
    9118:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    911a:	2317      	movs	r3, #23
    911c:	18fb      	adds	r3, r7, r3
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	2b05      	cmp	r3, #5
    9122:	d0f1      	beq.n	9108 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    9124:	1d3b      	adds	r3, r7, #4
    9126:	0018      	movs	r0, r3
    9128:	4b25      	ldr	r3, [pc, #148]	; (91c0 <eeprom_emulator_init+0xd8>)
    912a:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    912c:	1d3b      	adds	r3, r7, #4
    912e:	685b      	ldr	r3, [r3, #4]
    9130:	2b0b      	cmp	r3, #11
    9132:	d801      	bhi.n	9138 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
    9134:	2316      	movs	r3, #22
    9136:	e03b      	b.n	91b0 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
    9138:	1d3b      	adds	r3, r7, #4
    913a:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
    913c:	b29a      	uxth	r2, r3
    913e:	4b21      	ldr	r3, [pc, #132]	; (91c4 <eeprom_emulator_init+0xdc>)
    9140:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    9142:	1d3b      	adds	r3, r7, #4
    9144:	685b      	ldr	r3, [r3, #4]
    9146:	3b08      	subs	r3, #8
    9148:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
    914a:	b2da      	uxtb	r2, r3
    914c:	4b1d      	ldr	r3, [pc, #116]	; (91c4 <eeprom_emulator_init+0xdc>)
    914e:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
    9150:	4b1c      	ldr	r3, [pc, #112]	; (91c4 <eeprom_emulator_init+0xdc>)
    9152:	891b      	ldrh	r3, [r3, #8]
    9154:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
    9156:	0013      	movs	r3, r2
    9158:	069b      	lsls	r3, r3, #26
    915a:	1a9b      	subs	r3, r3, r2
    915c:	019b      	lsls	r3, r3, #6
    915e:	2280      	movs	r2, #128	; 0x80
    9160:	02d2      	lsls	r2, r2, #11
    9162:	4694      	mov	ip, r2
    9164:	4463      	add	r3, ip
    9166:	001a      	movs	r2, r3
	_eeprom_instance.flash =
    9168:	4b16      	ldr	r3, [pc, #88]	; (91c4 <eeprom_emulator_init+0xdc>)
    916a:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    916c:	4b15      	ldr	r3, [pc, #84]	; (91c4 <eeprom_emulator_init+0xdc>)
    916e:	22c8      	movs	r2, #200	; 0xc8
    9170:	2100      	movs	r1, #0
    9172:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    9174:	4b14      	ldr	r3, [pc, #80]	; (91c8 <eeprom_emulator_init+0xe0>)
    9176:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    9178:	4b12      	ldr	r3, [pc, #72]	; (91c4 <eeprom_emulator_init+0xdc>)
    917a:	2287      	movs	r2, #135	; 0x87
    917c:	5c9b      	ldrb	r3, [r3, r2]
    917e:	2b3f      	cmp	r3, #63	; 0x3f
    9180:	d101      	bne.n	9186 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
    9182:	231a      	movs	r3, #26
    9184:	e014      	b.n	91b0 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
    9186:	2317      	movs	r3, #23
    9188:	18fc      	adds	r4, r7, r3
    918a:	4b10      	ldr	r3, [pc, #64]	; (91cc <eeprom_emulator_init+0xe4>)
    918c:	4798      	blx	r3
    918e:	0003      	movs	r3, r0
    9190:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
    9192:	2317      	movs	r3, #23
    9194:	18fb      	adds	r3, r7, r3
    9196:	781b      	ldrb	r3, [r3, #0]
    9198:	2b00      	cmp	r3, #0
    919a:	d003      	beq.n	91a4 <eeprom_emulator_init+0xbc>
		return error_code;
    919c:	2317      	movs	r3, #23
    919e:	18fb      	adds	r3, r7, r3
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	e005      	b.n	91b0 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
    91a4:	4b07      	ldr	r3, [pc, #28]	; (91c4 <eeprom_emulator_init+0xdc>)
    91a6:	2201      	movs	r2, #1
    91a8:	701a      	strb	r2, [r3, #0]

	return error_code;
    91aa:	2317      	movs	r3, #23
    91ac:	18fb      	adds	r3, r7, r3
    91ae:	781b      	ldrb	r3, [r3, #0]
}
    91b0:	0018      	movs	r0, r3
    91b2:	46bd      	mov	sp, r7
    91b4:	b007      	add	sp, #28
    91b6:	bd90      	pop	{r4, r7, pc}
    91b8:	00008961 	.word	0x00008961
    91bc:	00002ad5 	.word	0x00002ad5
    91c0:	00002fa1 	.word	0x00002fa1
    91c4:	20000248 	.word	0x20000248
    91c8:	00008bbd 	.word	0x00008bbd
    91cc:	00009049 	.word	0x00009049

000091d0 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    91d0:	b580      	push	{r7, lr}
    91d2:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
    91d4:	4b04      	ldr	r3, [pc, #16]	; (91e8 <eeprom_emulator_erase_memory+0x18>)
    91d6:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
    91d8:	4b04      	ldr	r3, [pc, #16]	; (91ec <eeprom_emulator_erase_memory+0x1c>)
    91da:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    91dc:	4b04      	ldr	r3, [pc, #16]	; (91f0 <eeprom_emulator_erase_memory+0x20>)
    91de:	4798      	blx	r3
}
    91e0:	46c0      	nop			; (mov r8, r8)
    91e2:	46bd      	mov	sp, r7
    91e4:	bd80      	pop	{r7, pc}
    91e6:	46c0      	nop			; (mov r8, r8)
    91e8:	00008ad1 	.word	0x00008ad1
    91ec:	00008f81 	.word	0x00008f81
    91f0:	00008bbd 	.word	0x00008bbd

000091f4 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
    91f4:	b590      	push	{r4, r7, lr}
    91f6:	b085      	sub	sp, #20
    91f8:	af00      	add	r7, sp, #0
    91fa:	0002      	movs	r2, r0
    91fc:	6039      	str	r1, [r7, #0]
    91fe:	1dfb      	adds	r3, r7, #7
    9200:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    9202:	4b38      	ldr	r3, [pc, #224]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9204:	781b      	ldrb	r3, [r3, #0]
    9206:	2201      	movs	r2, #1
    9208:	4053      	eors	r3, r2
    920a:	b2db      	uxtb	r3, r3
    920c:	2b00      	cmp	r3, #0
    920e:	d001      	beq.n	9214 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    9210:	231f      	movs	r3, #31
    9212:	e063      	b.n	92dc <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    9214:	4b33      	ldr	r3, [pc, #204]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9216:	7a9b      	ldrb	r3, [r3, #10]
    9218:	1dfa      	adds	r2, r7, #7
    921a:	7812      	ldrb	r2, [r2, #0]
    921c:	429a      	cmp	r2, r3
    921e:	d301      	bcc.n	9224 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    9220:	2318      	movs	r3, #24
    9222:	e05b      	b.n	92dc <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
    9224:	4b2f      	ldr	r3, [pc, #188]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9226:	22c8      	movs	r2, #200	; 0xc8
    9228:	5c9b      	ldrb	r3, [r3, r2]
    922a:	2b00      	cmp	r3, #0
    922c:	d008      	beq.n	9240 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    922e:	4b2d      	ldr	r3, [pc, #180]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9230:	2288      	movs	r2, #136	; 0x88
    9232:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    9234:	1dfa      	adds	r2, r7, #7
    9236:	7812      	ldrb	r2, [r2, #0]
    9238:	429a      	cmp	r2, r3
    923a:	d001      	beq.n	9240 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    923c:	4b2a      	ldr	r3, [pc, #168]	; (92e8 <eeprom_emulator_write_page+0xf4>)
    923e:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
    9240:	230e      	movs	r3, #14
    9242:	18fb      	adds	r3, r7, r3
    9244:	2200      	movs	r2, #0
    9246:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    9248:	1dfb      	adds	r3, r7, #7
    924a:	781b      	ldrb	r3, [r3, #0]
    924c:	4a25      	ldr	r2, [pc, #148]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    924e:	18d3      	adds	r3, r2, r3
    9250:	7adb      	ldrb	r3, [r3, #11]
    9252:	220f      	movs	r2, #15
    9254:	18bc      	adds	r4, r7, r2
    9256:	220e      	movs	r2, #14
    9258:	18ba      	adds	r2, r7, r2
    925a:	0011      	movs	r1, r2
    925c:	0018      	movs	r0, r3
    925e:	4b23      	ldr	r3, [pc, #140]	; (92ec <eeprom_emulator_write_page+0xf8>)
    9260:	4798      	blx	r3
    9262:	0003      	movs	r3, r0
    9264:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
    9266:	230f      	movs	r3, #15
    9268:	18fb      	adds	r3, r7, r3
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	2201      	movs	r2, #1
    926e:	4053      	eors	r3, r2
    9270:	b2db      	uxtb	r3, r3
    9272:	2b00      	cmp	r3, #0
    9274:	d00e      	beq.n	9294 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
    9276:	1dfb      	adds	r3, r7, #7
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	4a1a      	ldr	r2, [pc, #104]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    927c:	18d3      	adds	r3, r2, r3
    927e:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
    9280:	089b      	lsrs	r3, r3, #2
    9282:	b2d8      	uxtb	r0, r3
    9284:	683a      	ldr	r2, [r7, #0]
    9286:	1dfb      	adds	r3, r7, #7
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	0019      	movs	r1, r3
    928c:	4b18      	ldr	r3, [pc, #96]	; (92f0 <eeprom_emulator_write_page+0xfc>)
    928e:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
    9290:	2300      	movs	r3, #0
    9292:	e023      	b.n	92dc <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
    9294:	4b13      	ldr	r3, [pc, #76]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9296:	1dfa      	adds	r2, r7, #7
    9298:	2188      	movs	r1, #136	; 0x88
    929a:	7812      	ldrb	r2, [r2, #0]
    929c:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
    929e:	4b11      	ldr	r3, [pc, #68]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    92a0:	228c      	movs	r2, #140	; 0x8c
    92a2:	6839      	ldr	r1, [r7, #0]
    92a4:	189b      	adds	r3, r3, r2
    92a6:	223c      	movs	r2, #60	; 0x3c
    92a8:	0018      	movs	r0, r3
    92aa:	4b12      	ldr	r3, [pc, #72]	; (92f4 <eeprom_emulator_write_page+0x100>)
    92ac:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    92ae:	230e      	movs	r3, #14
    92b0:	18fb      	adds	r3, r7, r3
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	b29b      	uxth	r3, r3
    92b6:	4a10      	ldr	r2, [pc, #64]	; (92f8 <eeprom_emulator_write_page+0x104>)
    92b8:	0011      	movs	r1, r2
    92ba:	0018      	movs	r0, r3
    92bc:	4b0f      	ldr	r3, [pc, #60]	; (92fc <eeprom_emulator_write_page+0x108>)
    92be:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
    92c0:	1dfb      	adds	r3, r7, #7
    92c2:	781b      	ldrb	r3, [r3, #0]
    92c4:	220e      	movs	r2, #14
    92c6:	18ba      	adds	r2, r7, r2
    92c8:	7811      	ldrb	r1, [r2, #0]
    92ca:	4a06      	ldr	r2, [pc, #24]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    92cc:	18d3      	adds	r3, r2, r3
    92ce:	1c0a      	adds	r2, r1, #0
    92d0:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
    92d2:	4b04      	ldr	r3, [pc, #16]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    92d4:	22c8      	movs	r2, #200	; 0xc8
    92d6:	2101      	movs	r1, #1
    92d8:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
    92da:	2300      	movs	r3, #0
}
    92dc:	0018      	movs	r0, r3
    92de:	46bd      	mov	sp, r7
    92e0:	b005      	add	sp, #20
    92e2:	bd90      	pop	{r4, r7, pc}
    92e4:	20000248 	.word	0x20000248
    92e8:	0000939d 	.word	0x0000939d
    92ec:	00008d09 	.word	0x00008d09
    92f0:	00008da1 	.word	0x00008da1
    92f4:	0001c15d 	.word	0x0001c15d
    92f8:	200002d0 	.word	0x200002d0
    92fc:	000089e5 	.word	0x000089e5

00009300 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    9300:	b580      	push	{r7, lr}
    9302:	b092      	sub	sp, #72	; 0x48
    9304:	af00      	add	r7, sp, #0
    9306:	0002      	movs	r2, r0
    9308:	6039      	str	r1, [r7, #0]
    930a:	1dfb      	adds	r3, r7, #7
    930c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    930e:	4b20      	ldr	r3, [pc, #128]	; (9390 <eeprom_emulator_read_page+0x90>)
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	2201      	movs	r2, #1
    9314:	4053      	eors	r3, r2
    9316:	b2db      	uxtb	r3, r3
    9318:	2b00      	cmp	r3, #0
    931a:	d001      	beq.n	9320 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    931c:	231f      	movs	r3, #31
    931e:	e033      	b.n	9388 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    9320:	4b1b      	ldr	r3, [pc, #108]	; (9390 <eeprom_emulator_read_page+0x90>)
    9322:	7a9b      	ldrb	r3, [r3, #10]
    9324:	1dfa      	adds	r2, r7, #7
    9326:	7812      	ldrb	r2, [r2, #0]
    9328:	429a      	cmp	r2, r3
    932a:	d301      	bcc.n	9330 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    932c:	2318      	movs	r3, #24
    932e:	e02b      	b.n	9388 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    9330:	4b17      	ldr	r3, [pc, #92]	; (9390 <eeprom_emulator_read_page+0x90>)
    9332:	22c8      	movs	r2, #200	; 0xc8
    9334:	5c9b      	ldrb	r3, [r3, r2]
    9336:	2b00      	cmp	r3, #0
    9338:	d010      	beq.n	935c <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    933a:	4b15      	ldr	r3, [pc, #84]	; (9390 <eeprom_emulator_read_page+0x90>)
    933c:	2288      	movs	r2, #136	; 0x88
    933e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    9340:	1dfa      	adds	r2, r7, #7
    9342:	7812      	ldrb	r2, [r2, #0]
    9344:	429a      	cmp	r2, r3
    9346:	d109      	bne.n	935c <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    9348:	6839      	ldr	r1, [r7, #0]
    934a:	4b11      	ldr	r3, [pc, #68]	; (9390 <eeprom_emulator_read_page+0x90>)
    934c:	228c      	movs	r2, #140	; 0x8c
    934e:	0008      	movs	r0, r1
    9350:	189b      	adds	r3, r3, r2
    9352:	223c      	movs	r2, #60	; 0x3c
    9354:	0019      	movs	r1, r3
    9356:	4b0f      	ldr	r3, [pc, #60]	; (9394 <eeprom_emulator_read_page+0x94>)
    9358:	4798      	blx	r3
    935a:	e014      	b.n	9386 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
    935c:	1dfb      	adds	r3, r7, #7
    935e:	781b      	ldrb	r3, [r3, #0]
    9360:	4a0b      	ldr	r2, [pc, #44]	; (9390 <eeprom_emulator_read_page+0x90>)
    9362:	18d3      	adds	r3, r2, r3
    9364:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
    9366:	b29b      	uxth	r3, r3
    9368:	2208      	movs	r2, #8
    936a:	18ba      	adds	r2, r7, r2
    936c:	0011      	movs	r1, r2
    936e:	0018      	movs	r0, r3
    9370:	4b09      	ldr	r3, [pc, #36]	; (9398 <eeprom_emulator_read_page+0x98>)
    9372:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    9374:	683a      	ldr	r2, [r7, #0]
    9376:	2308      	movs	r3, #8
    9378:	18fb      	adds	r3, r7, r3
    937a:	0010      	movs	r0, r2
    937c:	3304      	adds	r3, #4
    937e:	223c      	movs	r2, #60	; 0x3c
    9380:	0019      	movs	r1, r3
    9382:	4b04      	ldr	r3, [pc, #16]	; (9394 <eeprom_emulator_read_page+0x94>)
    9384:	4798      	blx	r3
	}

	return STATUS_OK;
    9386:	2300      	movs	r3, #0
}
    9388:	0018      	movs	r0, r3
    938a:	46bd      	mov	sp, r7
    938c:	b012      	add	sp, #72	; 0x48
    938e:	bd80      	pop	{r7, pc}
    9390:	20000248 	.word	0x20000248
    9394:	0001c15d 	.word	0x0001c15d
    9398:	00008a81 	.word	0x00008a81

0000939c <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    939c:	b580      	push	{r7, lr}
    939e:	b082      	sub	sp, #8
    93a0:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    93a2:	1dfb      	adds	r3, r7, #7
    93a4:	2200      	movs	r2, #0
    93a6:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    93a8:	4b10      	ldr	r3, [pc, #64]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93aa:	22c8      	movs	r2, #200	; 0xc8
    93ac:	5c9b      	ldrb	r3, [r3, r2]
    93ae:	2201      	movs	r2, #1
    93b0:	4053      	eors	r3, r2
    93b2:	b2db      	uxtb	r3, r3
    93b4:	2b00      	cmp	r3, #0
    93b6:	d001      	beq.n	93bc <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
    93b8:	2300      	movs	r3, #0
    93ba:	e013      	b.n	93e4 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    93bc:	1dbb      	adds	r3, r7, #6
    93be:	4a0b      	ldr	r2, [pc, #44]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93c0:	2188      	movs	r1, #136	; 0x88
    93c2:	5c52      	ldrb	r2, [r2, r1]
    93c4:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    93c6:	1dbb      	adds	r3, r7, #6
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	4a08      	ldr	r2, [pc, #32]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93cc:	18d3      	adds	r3, r2, r3
    93ce:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
    93d0:	b29b      	uxth	r3, r3
    93d2:	0018      	movs	r0, r3
    93d4:	4b06      	ldr	r3, [pc, #24]	; (93f0 <eeprom_emulator_commit_page_buffer+0x54>)
    93d6:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    93d8:	4b04      	ldr	r3, [pc, #16]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93da:	22c8      	movs	r2, #200	; 0xc8
    93dc:	2100      	movs	r1, #0
    93de:	5499      	strb	r1, [r3, r2]

	return error_code;
    93e0:	1dfb      	adds	r3, r7, #7
    93e2:	781b      	ldrb	r3, [r3, #0]
}
    93e4:	0018      	movs	r0, r3
    93e6:	46bd      	mov	sp, r7
    93e8:	b002      	add	sp, #8
    93ea:	bd80      	pop	{r7, pc}
    93ec:	20000248 	.word	0x20000248
    93f0:	00008a35 	.word	0x00008a35

000093f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    93f4:	b580      	push	{r7, lr}
    93f6:	b082      	sub	sp, #8
    93f8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    93fa:	4b2f      	ldr	r3, [pc, #188]	; (94b8 <Reset_Handler+0xc4>)
    93fc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    93fe:	4b2f      	ldr	r3, [pc, #188]	; (94bc <Reset_Handler+0xc8>)
    9400:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9402:	687a      	ldr	r2, [r7, #4]
    9404:	683b      	ldr	r3, [r7, #0]
    9406:	429a      	cmp	r2, r3
    9408:	d00c      	beq.n	9424 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    940a:	e007      	b.n	941c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    940c:	683b      	ldr	r3, [r7, #0]
    940e:	1d1a      	adds	r2, r3, #4
    9410:	603a      	str	r2, [r7, #0]
    9412:	687a      	ldr	r2, [r7, #4]
    9414:	1d11      	adds	r1, r2, #4
    9416:	6079      	str	r1, [r7, #4]
    9418:	6812      	ldr	r2, [r2, #0]
    941a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    941c:	683a      	ldr	r2, [r7, #0]
    941e:	4b28      	ldr	r3, [pc, #160]	; (94c0 <Reset_Handler+0xcc>)
    9420:	429a      	cmp	r2, r3
    9422:	d3f3      	bcc.n	940c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9424:	4b27      	ldr	r3, [pc, #156]	; (94c4 <Reset_Handler+0xd0>)
    9426:	603b      	str	r3, [r7, #0]
    9428:	e004      	b.n	9434 <Reset_Handler+0x40>
                *pDest++ = 0;
    942a:	683b      	ldr	r3, [r7, #0]
    942c:	1d1a      	adds	r2, r3, #4
    942e:	603a      	str	r2, [r7, #0]
    9430:	2200      	movs	r2, #0
    9432:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    9434:	683a      	ldr	r2, [r7, #0]
    9436:	4b24      	ldr	r3, [pc, #144]	; (94c8 <Reset_Handler+0xd4>)
    9438:	429a      	cmp	r2, r3
    943a:	d3f6      	bcc.n	942a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    943c:	4b23      	ldr	r3, [pc, #140]	; (94cc <Reset_Handler+0xd8>)
    943e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9440:	4b23      	ldr	r3, [pc, #140]	; (94d0 <Reset_Handler+0xdc>)
    9442:	687a      	ldr	r2, [r7, #4]
    9444:	21ff      	movs	r1, #255	; 0xff
    9446:	438a      	bics	r2, r1
    9448:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    944a:	4a22      	ldr	r2, [pc, #136]	; (94d4 <Reset_Handler+0xe0>)
    944c:	2390      	movs	r3, #144	; 0x90
    944e:	005b      	lsls	r3, r3, #1
    9450:	2102      	movs	r1, #2
    9452:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9454:	4a20      	ldr	r2, [pc, #128]	; (94d8 <Reset_Handler+0xe4>)
    9456:	78d3      	ldrb	r3, [r2, #3]
    9458:	2103      	movs	r1, #3
    945a:	438b      	bics	r3, r1
    945c:	1c19      	adds	r1, r3, #0
    945e:	2302      	movs	r3, #2
    9460:	430b      	orrs	r3, r1
    9462:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9464:	4a1c      	ldr	r2, [pc, #112]	; (94d8 <Reset_Handler+0xe4>)
    9466:	78d3      	ldrb	r3, [r2, #3]
    9468:	210c      	movs	r1, #12
    946a:	438b      	bics	r3, r1
    946c:	1c19      	adds	r1, r3, #0
    946e:	2308      	movs	r3, #8
    9470:	430b      	orrs	r3, r1
    9472:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9474:	4a19      	ldr	r2, [pc, #100]	; (94dc <Reset_Handler+0xe8>)
    9476:	7b93      	ldrb	r3, [r2, #14]
    9478:	2130      	movs	r1, #48	; 0x30
    947a:	438b      	bics	r3, r1
    947c:	1c19      	adds	r1, r3, #0
    947e:	2320      	movs	r3, #32
    9480:	430b      	orrs	r3, r1
    9482:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9484:	4a15      	ldr	r2, [pc, #84]	; (94dc <Reset_Handler+0xe8>)
    9486:	7b93      	ldrb	r3, [r2, #14]
    9488:	210c      	movs	r1, #12
    948a:	438b      	bics	r3, r1
    948c:	1c19      	adds	r1, r3, #0
    948e:	2308      	movs	r3, #8
    9490:	430b      	orrs	r3, r1
    9492:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9494:	4a11      	ldr	r2, [pc, #68]	; (94dc <Reset_Handler+0xe8>)
    9496:	7b93      	ldrb	r3, [r2, #14]
    9498:	2103      	movs	r1, #3
    949a:	438b      	bics	r3, r1
    949c:	1c19      	adds	r1, r3, #0
    949e:	2302      	movs	r3, #2
    94a0:	430b      	orrs	r3, r1
    94a2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    94a4:	4a0e      	ldr	r2, [pc, #56]	; (94e0 <Reset_Handler+0xec>)
    94a6:	6853      	ldr	r3, [r2, #4]
    94a8:	2180      	movs	r1, #128	; 0x80
    94aa:	430b      	orrs	r3, r1
    94ac:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    94ae:	4b0d      	ldr	r3, [pc, #52]	; (94e4 <Reset_Handler+0xf0>)
    94b0:	4798      	blx	r3

        /* Branch to main function */
        main();
    94b2:	4b0d      	ldr	r3, [pc, #52]	; (94e8 <Reset_Handler+0xf4>)
    94b4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    94b6:	e7fe      	b.n	94b6 <Reset_Handler+0xc2>
    94b8:	0001cd54 	.word	0x0001cd54
    94bc:	20000000 	.word	0x20000000
    94c0:	2000017c 	.word	0x2000017c
    94c4:	20000180 	.word	0x20000180
    94c8:	20001b40 	.word	0x20001b40
    94cc:	00002000 	.word	0x00002000
    94d0:	e000ed00 	.word	0xe000ed00
    94d4:	41007000 	.word	0x41007000
    94d8:	41005000 	.word	0x41005000
    94dc:	41004800 	.word	0x41004800
    94e0:	41004000 	.word	0x41004000
    94e4:	0001c115 	.word	0x0001c115
    94e8:	00017419 	.word	0x00017419

000094ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    94ec:	b580      	push	{r7, lr}
    94ee:	af00      	add	r7, sp, #0
        while (1) {
    94f0:	e7fe      	b.n	94f0 <Dummy_Handler+0x4>
	...

000094f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    94f4:	b580      	push	{r7, lr}
    94f6:	b084      	sub	sp, #16
    94f8:	af00      	add	r7, sp, #0
    94fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    94fc:	4b0a      	ldr	r3, [pc, #40]	; (9528 <_sbrk+0x34>)
    94fe:	681b      	ldr	r3, [r3, #0]
    9500:	2b00      	cmp	r3, #0
    9502:	d102      	bne.n	950a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    9504:	4b08      	ldr	r3, [pc, #32]	; (9528 <_sbrk+0x34>)
    9506:	4a09      	ldr	r2, [pc, #36]	; (952c <_sbrk+0x38>)
    9508:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    950a:	4b07      	ldr	r3, [pc, #28]	; (9528 <_sbrk+0x34>)
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    9510:	4b05      	ldr	r3, [pc, #20]	; (9528 <_sbrk+0x34>)
    9512:	681a      	ldr	r2, [r3, #0]
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	18d2      	adds	r2, r2, r3
    9518:	4b03      	ldr	r3, [pc, #12]	; (9528 <_sbrk+0x34>)
    951a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    951c:	68fb      	ldr	r3, [r7, #12]
}
    951e:	0018      	movs	r0, r3
    9520:	46bd      	mov	sp, r7
    9522:	b004      	add	sp, #16
    9524:	bd80      	pop	{r7, pc}
    9526:	46c0      	nop			; (mov r8, r8)
    9528:	20000314 	.word	0x20000314
    952c:	20003b40 	.word	0x20003b40

00009530 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    9530:	b580      	push	{r7, lr}
    9532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    9534:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    9538:	4b02      	ldr	r3, [pc, #8]	; (9544 <NVIC_SystemReset+0x14>)
    953a:	4a03      	ldr	r2, [pc, #12]	; (9548 <NVIC_SystemReset+0x18>)
    953c:	60da      	str	r2, [r3, #12]
    953e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    9542:	e7fe      	b.n	9542 <NVIC_SystemReset+0x12>
    9544:	e000ed00 	.word	0xe000ed00
    9548:	05fa0004 	.word	0x05fa0004

0000954c <system_pinmux_get_group_from_gpio_pin>:
{
    954c:	b580      	push	{r7, lr}
    954e:	b084      	sub	sp, #16
    9550:	af00      	add	r7, sp, #0
    9552:	0002      	movs	r2, r0
    9554:	1dfb      	adds	r3, r7, #7
    9556:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9558:	230f      	movs	r3, #15
    955a:	18fb      	adds	r3, r7, r3
    955c:	1dfa      	adds	r2, r7, #7
    955e:	7812      	ldrb	r2, [r2, #0]
    9560:	09d2      	lsrs	r2, r2, #7
    9562:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9564:	230e      	movs	r3, #14
    9566:	18fb      	adds	r3, r7, r3
    9568:	1dfa      	adds	r2, r7, #7
    956a:	7812      	ldrb	r2, [r2, #0]
    956c:	0952      	lsrs	r2, r2, #5
    956e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9570:	4b0d      	ldr	r3, [pc, #52]	; (95a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9572:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9574:	230f      	movs	r3, #15
    9576:	18fb      	adds	r3, r7, r3
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	2b00      	cmp	r3, #0
    957c:	d10f      	bne.n	959e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    957e:	230f      	movs	r3, #15
    9580:	18fb      	adds	r3, r7, r3
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	009b      	lsls	r3, r3, #2
    9586:	2210      	movs	r2, #16
    9588:	4694      	mov	ip, r2
    958a:	44bc      	add	ip, r7
    958c:	4463      	add	r3, ip
    958e:	3b08      	subs	r3, #8
    9590:	681a      	ldr	r2, [r3, #0]
    9592:	230e      	movs	r3, #14
    9594:	18fb      	adds	r3, r7, r3
    9596:	781b      	ldrb	r3, [r3, #0]
    9598:	01db      	lsls	r3, r3, #7
    959a:	18d3      	adds	r3, r2, r3
    959c:	e000      	b.n	95a0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    959e:	2300      	movs	r3, #0
}
    95a0:	0018      	movs	r0, r3
    95a2:	46bd      	mov	sp, r7
    95a4:	b004      	add	sp, #16
    95a6:	bd80      	pop	{r7, pc}
    95a8:	41004400 	.word	0x41004400

000095ac <adc_is_syncing>:
{
    95ac:	b580      	push	{r7, lr}
    95ae:	b084      	sub	sp, #16
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	681b      	ldr	r3, [r3, #0]
    95b8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    95ba:	68fb      	ldr	r3, [r7, #12]
    95bc:	7e5b      	ldrb	r3, [r3, #25]
    95be:	b2db      	uxtb	r3, r3
    95c0:	b25b      	sxtb	r3, r3
    95c2:	2b00      	cmp	r3, #0
    95c4:	da01      	bge.n	95ca <adc_is_syncing+0x1e>
		return true;
    95c6:	2301      	movs	r3, #1
    95c8:	e000      	b.n	95cc <adc_is_syncing+0x20>
	return false;
    95ca:	2300      	movs	r3, #0
}
    95cc:	0018      	movs	r0, r3
    95ce:	46bd      	mov	sp, r7
    95d0:	b004      	add	sp, #16
    95d2:	bd80      	pop	{r7, pc}

000095d4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    95d4:	b580      	push	{r7, lr}
    95d6:	b086      	sub	sp, #24
    95d8:	af00      	add	r7, sp, #0
    95da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    95dc:	687b      	ldr	r3, [r7, #4]
    95de:	681b      	ldr	r3, [r3, #0]
    95e0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    95e2:	693b      	ldr	r3, [r7, #16]
    95e4:	7e1b      	ldrb	r3, [r3, #24]
    95e6:	b2db      	uxtb	r3, r3
    95e8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    95ea:	2300      	movs	r3, #0
    95ec:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    95ee:	68fb      	ldr	r3, [r7, #12]
    95f0:	2201      	movs	r2, #1
    95f2:	4013      	ands	r3, r2
    95f4:	d003      	beq.n	95fe <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    95f6:	697b      	ldr	r3, [r7, #20]
    95f8:	2201      	movs	r2, #1
    95fa:	4313      	orrs	r3, r2
    95fc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    95fe:	68fb      	ldr	r3, [r7, #12]
    9600:	2204      	movs	r2, #4
    9602:	4013      	ands	r3, r2
    9604:	d003      	beq.n	960e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    9606:	697b      	ldr	r3, [r7, #20]
    9608:	2202      	movs	r2, #2
    960a:	4313      	orrs	r3, r2
    960c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    960e:	68fb      	ldr	r3, [r7, #12]
    9610:	2202      	movs	r2, #2
    9612:	4013      	ands	r3, r2
    9614:	d003      	beq.n	961e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    9616:	697b      	ldr	r3, [r7, #20]
    9618:	2204      	movs	r2, #4
    961a:	4313      	orrs	r3, r2
    961c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    961e:	697b      	ldr	r3, [r7, #20]
}
    9620:	0018      	movs	r0, r3
    9622:	46bd      	mov	sp, r7
    9624:	b006      	add	sp, #24
    9626:	bd80      	pop	{r7, pc}

00009628 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    9628:	b580      	push	{r7, lr}
    962a:	b084      	sub	sp, #16
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
    9630:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	681b      	ldr	r3, [r3, #0]
    9636:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    9638:	2300      	movs	r3, #0
    963a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    963c:	683b      	ldr	r3, [r7, #0]
    963e:	2201      	movs	r2, #1
    9640:	4013      	ands	r3, r2
    9642:	d003      	beq.n	964c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    9644:	68fb      	ldr	r3, [r7, #12]
    9646:	2201      	movs	r2, #1
    9648:	4313      	orrs	r3, r2
    964a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    964c:	683b      	ldr	r3, [r7, #0]
    964e:	2202      	movs	r2, #2
    9650:	4013      	ands	r3, r2
    9652:	d003      	beq.n	965c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    9654:	68fb      	ldr	r3, [r7, #12]
    9656:	2204      	movs	r2, #4
    9658:	4313      	orrs	r3, r2
    965a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    965c:	683b      	ldr	r3, [r7, #0]
    965e:	2204      	movs	r2, #4
    9660:	4013      	ands	r3, r2
    9662:	d003      	beq.n	966c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	2202      	movs	r2, #2
    9668:	4313      	orrs	r3, r2
    966a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    966c:	68fb      	ldr	r3, [r7, #12]
    966e:	b2da      	uxtb	r2, r3
    9670:	68bb      	ldr	r3, [r7, #8]
    9672:	761a      	strb	r2, [r3, #24]
}
    9674:	46c0      	nop			; (mov r8, r8)
    9676:	46bd      	mov	sp, r7
    9678:	b004      	add	sp, #16
    967a:	bd80      	pop	{r7, pc}

0000967c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    967c:	b580      	push	{r7, lr}
    967e:	b084      	sub	sp, #16
    9680:	af00      	add	r7, sp, #0
    9682:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	681b      	ldr	r3, [r3, #0]
    9688:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	687b      	ldr	r3, [r7, #4]
    968e:	0018      	movs	r0, r3
    9690:	4b0b      	ldr	r3, [pc, #44]	; (96c0 <adc_enable+0x44>)
    9692:	4798      	blx	r3
    9694:	1e03      	subs	r3, r0, #0
    9696:	d1f9      	bne.n	968c <adc_enable+0x10>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    9698:	68fb      	ldr	r3, [r7, #12]
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	b2db      	uxtb	r3, r3
    969e:	2202      	movs	r2, #2
    96a0:	4313      	orrs	r3, r2
    96a2:	b2da      	uxtb	r2, r3
    96a4:	68fb      	ldr	r3, [r7, #12]
    96a6:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    96a8:	46c0      	nop			; (mov r8, r8)
    96aa:	687b      	ldr	r3, [r7, #4]
    96ac:	0018      	movs	r0, r3
    96ae:	4b04      	ldr	r3, [pc, #16]	; (96c0 <adc_enable+0x44>)
    96b0:	4798      	blx	r3
    96b2:	1e03      	subs	r3, r0, #0
    96b4:	d1f9      	bne.n	96aa <adc_enable+0x2e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    96b6:	2300      	movs	r3, #0
}
    96b8:	0018      	movs	r0, r3
    96ba:	46bd      	mov	sp, r7
    96bc:	b004      	add	sp, #16
    96be:	bd80      	pop	{r7, pc}
    96c0:	000095ad 	.word	0x000095ad

000096c4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    96c4:	b580      	push	{r7, lr}
    96c6:	b084      	sub	sp, #16
    96c8:	af00      	add	r7, sp, #0
    96ca:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    96cc:	687b      	ldr	r3, [r7, #4]
    96ce:	681b      	ldr	r3, [r3, #0]
    96d0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    96d2:	46c0      	nop			; (mov r8, r8)
    96d4:	687b      	ldr	r3, [r7, #4]
    96d6:	0018      	movs	r0, r3
    96d8:	4b0b      	ldr	r3, [pc, #44]	; (9708 <adc_start_conversion+0x44>)
    96da:	4798      	blx	r3
    96dc:	1e03      	subs	r3, r0, #0
    96de:	d1f9      	bne.n	96d4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    96e0:	68fb      	ldr	r3, [r7, #12]
    96e2:	7b1b      	ldrb	r3, [r3, #12]
    96e4:	b2db      	uxtb	r3, r3
    96e6:	2202      	movs	r2, #2
    96e8:	4313      	orrs	r3, r2
    96ea:	b2da      	uxtb	r2, r3
    96ec:	68fb      	ldr	r3, [r7, #12]
    96ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    96f0:	46c0      	nop			; (mov r8, r8)
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	0018      	movs	r0, r3
    96f6:	4b04      	ldr	r3, [pc, #16]	; (9708 <adc_start_conversion+0x44>)
    96f8:	4798      	blx	r3
    96fa:	1e03      	subs	r3, r0, #0
    96fc:	d1f9      	bne.n	96f2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    96fe:	46c0      	nop			; (mov r8, r8)
    9700:	46bd      	mov	sp, r7
    9702:	b004      	add	sp, #16
    9704:	bd80      	pop	{r7, pc}
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	000095ad 	.word	0x000095ad

0000970c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    970c:	b580      	push	{r7, lr}
    970e:	b084      	sub	sp, #16
    9710:	af00      	add	r7, sp, #0
    9712:	6078      	str	r0, [r7, #4]
    9714:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	0018      	movs	r0, r3
    971a:	4b18      	ldr	r3, [pc, #96]	; (977c <adc_read+0x70>)
    971c:	4798      	blx	r3
    971e:	0002      	movs	r2, r0
    9720:	2301      	movs	r3, #1
    9722:	4013      	ands	r3, r2
    9724:	d101      	bne.n	972a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    9726:	2305      	movs	r3, #5
    9728:	e023      	b.n	9772 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    972a:	687b      	ldr	r3, [r7, #4]
    972c:	681b      	ldr	r3, [r3, #0]
    972e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    9730:	46c0      	nop			; (mov r8, r8)
    9732:	687b      	ldr	r3, [r7, #4]
    9734:	0018      	movs	r0, r3
    9736:	4b12      	ldr	r3, [pc, #72]	; (9780 <adc_read+0x74>)
    9738:	4798      	blx	r3
    973a:	1e03      	subs	r3, r0, #0
    973c:	d1f9      	bne.n	9732 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    973e:	68fb      	ldr	r3, [r7, #12]
    9740:	8b5b      	ldrh	r3, [r3, #26]
    9742:	b29a      	uxth	r2, r3
    9744:	683b      	ldr	r3, [r7, #0]
    9746:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    9748:	687b      	ldr	r3, [r7, #4]
    974a:	2101      	movs	r1, #1
    974c:	0018      	movs	r0, r3
    974e:	4b0d      	ldr	r3, [pc, #52]	; (9784 <adc_read+0x78>)
    9750:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    9752:	687b      	ldr	r3, [r7, #4]
    9754:	0018      	movs	r0, r3
    9756:	4b09      	ldr	r3, [pc, #36]	; (977c <adc_read+0x70>)
    9758:	4798      	blx	r3
    975a:	0002      	movs	r2, r0
    975c:	2304      	movs	r3, #4
    975e:	4013      	ands	r3, r2
    9760:	d006      	beq.n	9770 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    9762:	687b      	ldr	r3, [r7, #4]
    9764:	2104      	movs	r1, #4
    9766:	0018      	movs	r0, r3
    9768:	4b06      	ldr	r3, [pc, #24]	; (9784 <adc_read+0x78>)
    976a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    976c:	231e      	movs	r3, #30
    976e:	e000      	b.n	9772 <adc_read+0x66>
	}

	return STATUS_OK;
    9770:	2300      	movs	r3, #0
}
    9772:	0018      	movs	r0, r3
    9774:	46bd      	mov	sp, r7
    9776:	b004      	add	sp, #16
    9778:	bd80      	pop	{r7, pc}
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	000095d5 	.word	0x000095d5
    9780:	000095ad 	.word	0x000095ad
    9784:	00009629 	.word	0x00009629

00009788 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9788:	b580      	push	{r7, lr}
    978a:	b082      	sub	sp, #8
    978c:	af00      	add	r7, sp, #0
    978e:	0002      	movs	r2, r0
    9790:	1dfb      	adds	r3, r7, #7
    9792:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9794:	1dfb      	adds	r3, r7, #7
    9796:	781b      	ldrb	r3, [r3, #0]
    9798:	0018      	movs	r0, r3
    979a:	4b03      	ldr	r3, [pc, #12]	; (97a8 <port_get_group_from_gpio_pin+0x20>)
    979c:	4798      	blx	r3
    979e:	0003      	movs	r3, r0
}
    97a0:	0018      	movs	r0, r3
    97a2:	46bd      	mov	sp, r7
    97a4:	b002      	add	sp, #8
    97a6:	bd80      	pop	{r7, pc}
    97a8:	0000954d 	.word	0x0000954d

000097ac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    97ac:	b580      	push	{r7, lr}
    97ae:	b082      	sub	sp, #8
    97b0:	af00      	add	r7, sp, #0
    97b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    97b4:	687b      	ldr	r3, [r7, #4]
    97b6:	2200      	movs	r2, #0
    97b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    97ba:	687b      	ldr	r3, [r7, #4]
    97bc:	2201      	movs	r2, #1
    97be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    97c0:	687b      	ldr	r3, [r7, #4]
    97c2:	2200      	movs	r2, #0
    97c4:	709a      	strb	r2, [r3, #2]
}
    97c6:	46c0      	nop			; (mov r8, r8)
    97c8:	46bd      	mov	sp, r7
    97ca:	b002      	add	sp, #8
    97cc:	bd80      	pop	{r7, pc}
	...

000097d0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    97d0:	b580      	push	{r7, lr}
    97d2:	b084      	sub	sp, #16
    97d4:	af00      	add	r7, sp, #0
    97d6:	0002      	movs	r2, r0
    97d8:	1dfb      	adds	r3, r7, #7
    97da:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    97dc:	1dfb      	adds	r3, r7, #7
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	0018      	movs	r0, r3
    97e2:	4b0b      	ldr	r3, [pc, #44]	; (9810 <port_pin_get_input_level+0x40>)
    97e4:	4798      	blx	r3
    97e6:	0003      	movs	r3, r0
    97e8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    97ea:	1dfb      	adds	r3, r7, #7
    97ec:	781b      	ldrb	r3, [r3, #0]
    97ee:	221f      	movs	r2, #31
    97f0:	4013      	ands	r3, r2
    97f2:	2201      	movs	r2, #1
    97f4:	409a      	lsls	r2, r3
    97f6:	0013      	movs	r3, r2
    97f8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    97fa:	68fb      	ldr	r3, [r7, #12]
    97fc:	6a1b      	ldr	r3, [r3, #32]
    97fe:	68ba      	ldr	r2, [r7, #8]
    9800:	4013      	ands	r3, r2
    9802:	1e5a      	subs	r2, r3, #1
    9804:	4193      	sbcs	r3, r2
    9806:	b2db      	uxtb	r3, r3
}
    9808:	0018      	movs	r0, r3
    980a:	46bd      	mov	sp, r7
    980c:	b004      	add	sp, #16
    980e:	bd80      	pop	{r7, pc}
    9810:	00009789 	.word	0x00009789

00009814 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9814:	b580      	push	{r7, lr}
    9816:	b084      	sub	sp, #16
    9818:	af00      	add	r7, sp, #0
    981a:	0002      	movs	r2, r0
    981c:	1dfb      	adds	r3, r7, #7
    981e:	701a      	strb	r2, [r3, #0]
    9820:	1dbb      	adds	r3, r7, #6
    9822:	1c0a      	adds	r2, r1, #0
    9824:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9826:	1dfb      	adds	r3, r7, #7
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	0018      	movs	r0, r3
    982c:	4b0d      	ldr	r3, [pc, #52]	; (9864 <port_pin_set_output_level+0x50>)
    982e:	4798      	blx	r3
    9830:	0003      	movs	r3, r0
    9832:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9834:	1dfb      	adds	r3, r7, #7
    9836:	781b      	ldrb	r3, [r3, #0]
    9838:	221f      	movs	r2, #31
    983a:	4013      	ands	r3, r2
    983c:	2201      	movs	r2, #1
    983e:	409a      	lsls	r2, r3
    9840:	0013      	movs	r3, r2
    9842:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9844:	1dbb      	adds	r3, r7, #6
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	2b00      	cmp	r3, #0
    984a:	d003      	beq.n	9854 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    984c:	68fb      	ldr	r3, [r7, #12]
    984e:	68ba      	ldr	r2, [r7, #8]
    9850:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9852:	e002      	b.n	985a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    9854:	68fb      	ldr	r3, [r7, #12]
    9856:	68ba      	ldr	r2, [r7, #8]
    9858:	615a      	str	r2, [r3, #20]
}
    985a:	46c0      	nop			; (mov r8, r8)
    985c:	46bd      	mov	sp, r7
    985e:	b004      	add	sp, #16
    9860:	bd80      	pop	{r7, pc}
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	00009789 	.word	0x00009789

00009868 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    9868:	b580      	push	{r7, lr}
    986a:	b082      	sub	sp, #8
    986c:	af00      	add	r7, sp, #0
    986e:	0002      	movs	r2, r0
    9870:	1dfb      	adds	r3, r7, #7
    9872:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9874:	4b06      	ldr	r3, [pc, #24]	; (9890 <system_interrupt_enable+0x28>)
    9876:	1dfa      	adds	r2, r7, #7
    9878:	7812      	ldrb	r2, [r2, #0]
    987a:	0011      	movs	r1, r2
    987c:	221f      	movs	r2, #31
    987e:	400a      	ands	r2, r1
    9880:	2101      	movs	r1, #1
    9882:	4091      	lsls	r1, r2
    9884:	000a      	movs	r2, r1
    9886:	601a      	str	r2, [r3, #0]
}
    9888:	46c0      	nop			; (mov r8, r8)
    988a:	46bd      	mov	sp, r7
    988c:	b002      	add	sp, #8
    988e:	bd80      	pop	{r7, pc}
    9890:	e000e100 	.word	0xe000e100

00009894 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    9894:	b580      	push	{r7, lr}
    9896:	b082      	sub	sp, #8
    9898:	af00      	add	r7, sp, #0
    989a:	0002      	movs	r2, r0
    989c:	1dfb      	adds	r3, r7, #7
    989e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    98a0:	4a07      	ldr	r2, [pc, #28]	; (98c0 <system_interrupt_disable+0x2c>)
    98a2:	1dfb      	adds	r3, r7, #7
    98a4:	781b      	ldrb	r3, [r3, #0]
    98a6:	0019      	movs	r1, r3
    98a8:	231f      	movs	r3, #31
    98aa:	400b      	ands	r3, r1
    98ac:	2101      	movs	r1, #1
    98ae:	4099      	lsls	r1, r3
    98b0:	000b      	movs	r3, r1
    98b2:	0019      	movs	r1, r3
    98b4:	2380      	movs	r3, #128	; 0x80
    98b6:	50d1      	str	r1, [r2, r3]
}
    98b8:	46c0      	nop			; (mov r8, r8)
    98ba:	46bd      	mov	sp, r7
    98bc:	b002      	add	sp, #8
    98be:	bd80      	pop	{r7, pc}
    98c0:	e000e100 	.word	0xe000e100

000098c4 <i2c_master_is_syncing>:
{
    98c4:	b580      	push	{r7, lr}
    98c6:	b084      	sub	sp, #16
    98c8:	af00      	add	r7, sp, #0
    98ca:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    98cc:	687b      	ldr	r3, [r7, #4]
    98ce:	681b      	ldr	r3, [r3, #0]
    98d0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    98d2:	68fb      	ldr	r3, [r7, #12]
    98d4:	69db      	ldr	r3, [r3, #28]
    98d6:	2207      	movs	r2, #7
    98d8:	4013      	ands	r3, r2
    98da:	1e5a      	subs	r2, r3, #1
    98dc:	4193      	sbcs	r3, r2
    98de:	b2db      	uxtb	r3, r3
}
    98e0:	0018      	movs	r0, r3
    98e2:	46bd      	mov	sp, r7
    98e4:	b004      	add	sp, #16
    98e6:	bd80      	pop	{r7, pc}

000098e8 <_i2c_master_wait_for_sync>:
{
    98e8:	b580      	push	{r7, lr}
    98ea:	b082      	sub	sp, #8
    98ec:	af00      	add	r7, sp, #0
    98ee:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    98f0:	46c0      	nop			; (mov r8, r8)
    98f2:	687b      	ldr	r3, [r7, #4]
    98f4:	0018      	movs	r0, r3
    98f6:	4b04      	ldr	r3, [pc, #16]	; (9908 <_i2c_master_wait_for_sync+0x20>)
    98f8:	4798      	blx	r3
    98fa:	1e03      	subs	r3, r0, #0
    98fc:	d1f9      	bne.n	98f2 <_i2c_master_wait_for_sync+0xa>
}
    98fe:	46c0      	nop			; (mov r8, r8)
    9900:	46bd      	mov	sp, r7
    9902:	b002      	add	sp, #8
    9904:	bd80      	pop	{r7, pc}
    9906:	46c0      	nop			; (mov r8, r8)
    9908:	000098c5 	.word	0x000098c5

0000990c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    990c:	b580      	push	{r7, lr}
    990e:	b082      	sub	sp, #8
    9910:	af00      	add	r7, sp, #0
    9912:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	2264      	movs	r2, #100	; 0x64
    9918:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    991a:	687b      	ldr	r3, [r7, #4]
    991c:	4a1b      	ldr	r2, [pc, #108]	; (998c <i2c_master_get_config_defaults+0x80>)
    991e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	2200      	movs	r2, #0
    9924:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	2200      	movs	r2, #0
    992a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    992c:	687b      	ldr	r3, [r7, #4]
    992e:	2200      	movs	r2, #0
    9930:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    9932:	687b      	ldr	r3, [r7, #4]
    9934:	2280      	movs	r2, #128	; 0x80
    9936:	0392      	lsls	r2, r2, #14
    9938:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	2201      	movs	r2, #1
    993e:	4252      	negs	r2, r2
    9940:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	2201      	movs	r2, #1
    9946:	4252      	negs	r2, r2
    9948:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	2200      	movs	r2, #0
    994e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	2200      	movs	r2, #0
    9954:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	2224      	movs	r2, #36	; 0x24
    995a:	2100      	movs	r1, #0
    995c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    995e:	687b      	ldr	r3, [r7, #4]
    9960:	2200      	movs	r2, #0
    9962:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    9964:	687b      	ldr	r3, [r7, #4]
    9966:	222c      	movs	r2, #44	; 0x2c
    9968:	2100      	movs	r1, #0
    996a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	222d      	movs	r2, #45	; 0x2d
    9970:	2100      	movs	r1, #0
    9972:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    9974:	687b      	ldr	r3, [r7, #4]
    9976:	222e      	movs	r2, #46	; 0x2e
    9978:	2100      	movs	r1, #0
    997a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    997c:	687b      	ldr	r3, [r7, #4]
    997e:	22d7      	movs	r2, #215	; 0xd7
    9980:	861a      	strh	r2, [r3, #48]	; 0x30
}
    9982:	46c0      	nop			; (mov r8, r8)
    9984:	46bd      	mov	sp, r7
    9986:	b002      	add	sp, #8
    9988:	bd80      	pop	{r7, pc}
    998a:	46c0      	nop			; (mov r8, r8)
    998c:	00000d48 	.word	0x00000d48

00009990 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    9990:	b580      	push	{r7, lr}
    9992:	b084      	sub	sp, #16
    9994:	af00      	add	r7, sp, #0
    9996:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9998:	687b      	ldr	r3, [r7, #4]
    999a:	681b      	ldr	r3, [r3, #0]
    999c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    999e:	2300      	movs	r3, #0
    99a0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    99a2:	687b      	ldr	r3, [r7, #4]
    99a4:	0018      	movs	r0, r3
    99a6:	4b14      	ldr	r3, [pc, #80]	; (99f8 <i2c_master_enable+0x68>)
    99a8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    99aa:	68bb      	ldr	r3, [r7, #8]
    99ac:	681b      	ldr	r3, [r3, #0]
    99ae:	2202      	movs	r2, #2
    99b0:	431a      	orrs	r2, r3
    99b2:	68bb      	ldr	r3, [r7, #8]
    99b4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    99b6:	687b      	ldr	r3, [r7, #4]
    99b8:	681b      	ldr	r3, [r3, #0]
    99ba:	0018      	movs	r0, r3
    99bc:	4b0f      	ldr	r3, [pc, #60]	; (99fc <i2c_master_enable+0x6c>)
    99be:	4798      	blx	r3
    99c0:	0003      	movs	r3, r0
    99c2:	0018      	movs	r0, r3
    99c4:	4b0e      	ldr	r3, [pc, #56]	; (9a00 <i2c_master_enable+0x70>)
    99c6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    99c8:	e00c      	b.n	99e4 <i2c_master_enable+0x54>
		timeout_counter++;
    99ca:	68fb      	ldr	r3, [r7, #12]
    99cc:	3301      	adds	r3, #1
    99ce:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	88db      	ldrh	r3, [r3, #6]
    99d4:	001a      	movs	r2, r3
    99d6:	68fb      	ldr	r3, [r7, #12]
    99d8:	429a      	cmp	r2, r3
    99da:	d803      	bhi.n	99e4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    99dc:	68bb      	ldr	r3, [r7, #8]
    99de:	2210      	movs	r2, #16
    99e0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    99e2:	e006      	b.n	99f2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    99e4:	68bb      	ldr	r3, [r7, #8]
    99e6:	8b5b      	ldrh	r3, [r3, #26]
    99e8:	b29b      	uxth	r3, r3
    99ea:	001a      	movs	r2, r3
    99ec:	2310      	movs	r3, #16
    99ee:	4013      	ands	r3, r2
    99f0:	d0eb      	beq.n	99ca <i2c_master_enable+0x3a>
		}
	}
}
    99f2:	46bd      	mov	sp, r7
    99f4:	b004      	add	sp, #16
    99f6:	bd80      	pop	{r7, pc}
    99f8:	000098e9 	.word	0x000098e9
    99fc:	00007ad1 	.word	0x00007ad1
    9a00:	00009869 	.word	0x00009869

00009a04 <i2c_slave_is_syncing>:
{
    9a04:	b580      	push	{r7, lr}
    9a06:	b084      	sub	sp, #16
    9a08:	af00      	add	r7, sp, #0
    9a0a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9a0c:	687b      	ldr	r3, [r7, #4]
    9a0e:	681b      	ldr	r3, [r3, #0]
    9a10:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    9a12:	68fb      	ldr	r3, [r7, #12]
    9a14:	69db      	ldr	r3, [r3, #28]
    9a16:	2203      	movs	r2, #3
    9a18:	4013      	ands	r3, r2
    9a1a:	1e5a      	subs	r2, r3, #1
    9a1c:	4193      	sbcs	r3, r2
    9a1e:	b2db      	uxtb	r3, r3
}
    9a20:	0018      	movs	r0, r3
    9a22:	46bd      	mov	sp, r7
    9a24:	b004      	add	sp, #16
    9a26:	bd80      	pop	{r7, pc}

00009a28 <_i2c_slave_wait_for_sync>:
{
    9a28:	b580      	push	{r7, lr}
    9a2a:	b082      	sub	sp, #8
    9a2c:	af00      	add	r7, sp, #0
    9a2e:	6078      	str	r0, [r7, #4]
	while (i2c_slave_is_syncing(module)) {
    9a30:	46c0      	nop			; (mov r8, r8)
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	0018      	movs	r0, r3
    9a36:	4b04      	ldr	r3, [pc, #16]	; (9a48 <_i2c_slave_wait_for_sync+0x20>)
    9a38:	4798      	blx	r3
    9a3a:	1e03      	subs	r3, r0, #0
    9a3c:	d1f9      	bne.n	9a32 <_i2c_slave_wait_for_sync+0xa>
}
    9a3e:	46c0      	nop			; (mov r8, r8)
    9a40:	46bd      	mov	sp, r7
    9a42:	b002      	add	sp, #8
    9a44:	bd80      	pop	{r7, pc}
    9a46:	46c0      	nop			; (mov r8, r8)
    9a48:	00009a05 	.word	0x00009a05

00009a4c <i2c_slave_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initialized
 */
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b082      	sub	sp, #8
    9a50:	af00      	add	r7, sp, #0
    9a52:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	2200      	movs	r2, #0
    9a58:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	2280      	movs	r2, #128	; 0x80
    9a5e:	0392      	lsls	r2, r2, #14
    9a60:	605a      	str	r2, [r3, #4]
	config->buffer_timeout = 65535;
    9a62:	687b      	ldr	r3, [r7, #4]
    9a64:	2201      	movs	r2, #1
    9a66:	4252      	negs	r2, r2
    9a68:	811a      	strh	r2, [r3, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    9a6a:	687b      	ldr	r3, [r7, #4]
    9a6c:	2200      	movs	r2, #0
    9a6e:	815a      	strh	r2, [r3, #10]
	config->address = 0;
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	2200      	movs	r2, #0
    9a74:	819a      	strh	r2, [r3, #12]
	config->address_mask = 0;
    9a76:	687b      	ldr	r3, [r7, #4]
    9a78:	2200      	movs	r2, #0
    9a7a:	81da      	strh	r2, [r3, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	2200      	movs	r2, #0
    9a80:	741a      	strb	r2, [r3, #16]
#endif
	config->enable_general_call_address = false;
    9a82:	687b      	ldr	r3, [r7, #4]
    9a84:	2200      	movs	r2, #0
    9a86:	745a      	strb	r2, [r3, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	2200      	movs	r2, #0
    9a8c:	615a      	str	r2, [r3, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	2200      	movs	r2, #0
    9a92:	761a      	strb	r2, [r3, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	2200      	movs	r2, #0
    9a98:	765a      	strb	r2, [r3, #25]
	config->run_in_standby = false;
    9a9a:	687b      	ldr	r3, [r7, #4]
    9a9c:	2200      	movs	r2, #0
    9a9e:	769a      	strb	r2, [r3, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9aa0:	687b      	ldr	r3, [r7, #4]
    9aa2:	2200      	movs	r2, #0
    9aa4:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9aa6:	687b      	ldr	r3, [r7, #4]
    9aa8:	2200      	movs	r2, #0
    9aaa:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	2224      	movs	r2, #36	; 0x24
    9ab0:	2100      	movs	r1, #0
    9ab2:	5499      	strb	r1, [r3, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    9ab4:	687b      	ldr	r3, [r7, #4]
    9ab6:	2225      	movs	r2, #37	; 0x25
    9ab8:	2100      	movs	r1, #0
    9aba:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	2226      	movs	r2, #38	; 0x26
    9ac0:	2100      	movs	r1, #0
    9ac2:	5499      	strb	r1, [r3, r2]
#endif
}
    9ac4:	46c0      	nop			; (mov r8, r8)
    9ac6:	46bd      	mov	sp, r7
    9ac8:	b002      	add	sp, #8
    9aca:	bd80      	pop	{r7, pc}

00009acc <i2c_slave_enable>:
 *
 * \param[in]  module Pointer to the software module struct
 */
static inline void i2c_slave_enable(
		const struct i2c_slave_module *const module)
{
    9acc:	b580      	push	{r7, lr}
    9ace:	b084      	sub	sp, #16
    9ad0:	af00      	add	r7, sp, #0
    9ad2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9ad4:	687b      	ldr	r3, [r7, #4]
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	60fb      	str	r3, [r7, #12]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9ada:	687b      	ldr	r3, [r7, #4]
    9adc:	681b      	ldr	r3, [r3, #0]
    9ade:	0018      	movs	r0, r3
    9ae0:	4b09      	ldr	r3, [pc, #36]	; (9b08 <i2c_slave_enable+0x3c>)
    9ae2:	4798      	blx	r3
    9ae4:	0003      	movs	r3, r0
    9ae6:	0018      	movs	r0, r3
    9ae8:	4b08      	ldr	r3, [pc, #32]	; (9b0c <i2c_slave_enable+0x40>)
    9aea:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
    9aec:	687b      	ldr	r3, [r7, #4]
    9aee:	0018      	movs	r0, r3
    9af0:	4b07      	ldr	r3, [pc, #28]	; (9b10 <i2c_slave_enable+0x44>)
    9af2:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    9af4:	68fb      	ldr	r3, [r7, #12]
    9af6:	681b      	ldr	r3, [r3, #0]
    9af8:	2202      	movs	r2, #2
    9afa:	431a      	orrs	r2, r3
    9afc:	68fb      	ldr	r3, [r7, #12]
    9afe:	601a      	str	r2, [r3, #0]
}
    9b00:	46c0      	nop			; (mov r8, r8)
    9b02:	46bd      	mov	sp, r7
    9b04:	b004      	add	sp, #16
    9b06:	bd80      	pop	{r7, pc}
    9b08:	00007ad1 	.word	0x00007ad1
    9b0c:	00009869 	.word	0x00009869
    9b10:	00009a29 	.word	0x00009a29

00009b14 <i2c_slave_enable_callback>:
 * \param[in]      callback_type  Callback type to enable
 */
static inline void i2c_slave_enable_callback(
		struct i2c_slave_module *const module,
		enum i2c_slave_callback callback_type)
{
    9b14:	b580      	push	{r7, lr}
    9b16:	b084      	sub	sp, #16
    9b18:	af00      	add	r7, sp, #0
    9b1a:	6078      	str	r0, [r7, #4]
    9b1c:	000a      	movs	r2, r1
    9b1e:	1cfb      	adds	r3, r7, #3
    9b20:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	2225      	movs	r2, #37	; 0x25
    9b26:	5c9b      	ldrb	r3, [r3, r2]
    9b28:	b2db      	uxtb	r3, r3
    9b2a:	b25a      	sxtb	r2, r3
    9b2c:	1cfb      	adds	r3, r7, #3
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	2101      	movs	r1, #1
    9b32:	4099      	lsls	r1, r3
    9b34:	000b      	movs	r3, r1
    9b36:	b25b      	sxtb	r3, r3
    9b38:	4313      	orrs	r3, r2
    9b3a:	b25b      	sxtb	r3, r3
    9b3c:	b2d9      	uxtb	r1, r3
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	2225      	movs	r2, #37	; 0x25
    9b42:	5499      	strb	r1, [r3, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9b44:	687b      	ldr	r3, [r7, #4]
    9b46:	681b      	ldr	r3, [r3, #0]
    9b48:	60fb      	str	r3, [r7, #12]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
    9b4a:	1cfb      	adds	r3, r7, #3
    9b4c:	781b      	ldrb	r3, [r3, #0]
    9b4e:	2b02      	cmp	r3, #2
    9b50:	d003      	beq.n	9b5a <i2c_slave_enable_callback+0x46>
    9b52:	1cfb      	adds	r3, r7, #3
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	2b03      	cmp	r3, #3
    9b58:	d102      	bne.n	9b60 <i2c_slave_enable_callback+0x4c>
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    9b5a:	68fb      	ldr	r3, [r7, #12]
    9b5c:	2202      	movs	r2, #2
    9b5e:	759a      	strb	r2, [r3, #22]
	}
}
    9b60:	46c0      	nop			; (mov r8, r8)
    9b62:	46bd      	mov	sp, r7
    9b64:	b004      	add	sp, #16
    9b66:	bd80      	pop	{r7, pc}

00009b68 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    9b68:	b580      	push	{r7, lr}
    9b6a:	b084      	sub	sp, #16
    9b6c:	af00      	add	r7, sp, #0
    9b6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9b70:	687b      	ldr	r3, [r7, #4]
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    9b76:	68fb      	ldr	r3, [r7, #12]
    9b78:	69db      	ldr	r3, [r3, #28]
    9b7a:	1e5a      	subs	r2, r3, #1
    9b7c:	4193      	sbcs	r3, r2
    9b7e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    9b80:	0018      	movs	r0, r3
    9b82:	46bd      	mov	sp, r7
    9b84:	b004      	add	sp, #16
    9b86:	bd80      	pop	{r7, pc}

00009b88 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    9b88:	b580      	push	{r7, lr}
    9b8a:	b082      	sub	sp, #8
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	2201      	movs	r2, #1
    9b94:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9b96:	687b      	ldr	r3, [r7, #4]
    9b98:	2200      	movs	r2, #0
    9b9a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9b9c:	687b      	ldr	r3, [r7, #4]
    9b9e:	2200      	movs	r2, #0
    9ba0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	22c0      	movs	r2, #192	; 0xc0
    9ba6:	0392      	lsls	r2, r2, #14
    9ba8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	2200      	movs	r2, #0
    9bae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    9bb0:	687b      	ldr	r3, [r7, #4]
    9bb2:	2200      	movs	r2, #0
    9bb4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	2201      	movs	r2, #1
    9bba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    9bbc:	687b      	ldr	r3, [r7, #4]
    9bbe:	2201      	movs	r2, #1
    9bc0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	2200      	movs	r2, #0
    9bc6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	2224      	movs	r2, #36	; 0x24
    9bcc:	2100      	movs	r1, #0
    9bce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    9bd0:	687b      	ldr	r3, [r7, #4]
    9bd2:	3318      	adds	r3, #24
    9bd4:	220c      	movs	r2, #12
    9bd6:	2100      	movs	r1, #0
    9bd8:	0018      	movs	r0, r3
    9bda:	4b0a      	ldr	r3, [pc, #40]	; (9c04 <spi_get_config_defaults+0x7c>)
    9bdc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    9bde:	687b      	ldr	r3, [r7, #4]
    9be0:	4a09      	ldr	r2, [pc, #36]	; (9c08 <spi_get_config_defaults+0x80>)
    9be2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9be4:	687b      	ldr	r3, [r7, #4]
    9be6:	2200      	movs	r2, #0
    9be8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	2200      	movs	r2, #0
    9bee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	2200      	movs	r2, #0
    9bf4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	2200      	movs	r2, #0
    9bfa:	635a      	str	r2, [r3, #52]	; 0x34

};
    9bfc:	46c0      	nop			; (mov r8, r8)
    9bfe:	46bd      	mov	sp, r7
    9c00:	b002      	add	sp, #8
    9c02:	bd80      	pop	{r7, pc}
    9c04:	0001c193 	.word	0x0001c193
    9c08:	000186a0 	.word	0x000186a0

00009c0c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    9c0c:	b580      	push	{r7, lr}
    9c0e:	b084      	sub	sp, #16
    9c10:	af00      	add	r7, sp, #0
    9c12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	681b      	ldr	r3, [r3, #0]
    9c18:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	681b      	ldr	r3, [r3, #0]
    9c1e:	0018      	movs	r0, r3
    9c20:	4b0b      	ldr	r3, [pc, #44]	; (9c50 <spi_enable+0x44>)
    9c22:	4798      	blx	r3
    9c24:	0003      	movs	r3, r0
    9c26:	0018      	movs	r0, r3
    9c28:	4b0a      	ldr	r3, [pc, #40]	; (9c54 <spi_enable+0x48>)
    9c2a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    9c2c:	46c0      	nop			; (mov r8, r8)
    9c2e:	687b      	ldr	r3, [r7, #4]
    9c30:	0018      	movs	r0, r3
    9c32:	4b09      	ldr	r3, [pc, #36]	; (9c58 <spi_enable+0x4c>)
    9c34:	4798      	blx	r3
    9c36:	1e03      	subs	r3, r0, #0
    9c38:	d1f9      	bne.n	9c2e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	681b      	ldr	r3, [r3, #0]
    9c3e:	2202      	movs	r2, #2
    9c40:	431a      	orrs	r2, r3
    9c42:	68fb      	ldr	r3, [r7, #12]
    9c44:	601a      	str	r2, [r3, #0]
}
    9c46:	46c0      	nop			; (mov r8, r8)
    9c48:	46bd      	mov	sp, r7
    9c4a:	b004      	add	sp, #16
    9c4c:	bd80      	pop	{r7, pc}
    9c4e:	46c0      	nop			; (mov r8, r8)
    9c50:	00007ad1 	.word	0x00007ad1
    9c54:	00009869 	.word	0x00009869
    9c58:	00009b69 	.word	0x00009b69

00009c5c <usart_is_syncing>:
{
    9c5c:	b580      	push	{r7, lr}
    9c5e:	b084      	sub	sp, #16
    9c60:	af00      	add	r7, sp, #0
    9c62:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    9c64:	687b      	ldr	r3, [r7, #4]
    9c66:	681b      	ldr	r3, [r3, #0]
    9c68:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    9c6a:	68fb      	ldr	r3, [r7, #12]
    9c6c:	69db      	ldr	r3, [r3, #28]
    9c6e:	1e5a      	subs	r2, r3, #1
    9c70:	4193      	sbcs	r3, r2
    9c72:	b2db      	uxtb	r3, r3
}
    9c74:	0018      	movs	r0, r3
    9c76:	46bd      	mov	sp, r7
    9c78:	b004      	add	sp, #16
    9c7a:	bd80      	pop	{r7, pc}

00009c7c <_usart_wait_for_sync>:
{
    9c7c:	b580      	push	{r7, lr}
    9c7e:	b082      	sub	sp, #8
    9c80:	af00      	add	r7, sp, #0
    9c82:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    9c84:	46c0      	nop			; (mov r8, r8)
    9c86:	687b      	ldr	r3, [r7, #4]
    9c88:	0018      	movs	r0, r3
    9c8a:	4b04      	ldr	r3, [pc, #16]	; (9c9c <_usart_wait_for_sync+0x20>)
    9c8c:	4798      	blx	r3
    9c8e:	1e03      	subs	r3, r0, #0
    9c90:	d1f9      	bne.n	9c86 <_usart_wait_for_sync+0xa>
}
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	46bd      	mov	sp, r7
    9c96:	b002      	add	sp, #8
    9c98:	bd80      	pop	{r7, pc}
    9c9a:	46c0      	nop			; (mov r8, r8)
    9c9c:	00009c5d 	.word	0x00009c5d

00009ca0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b082      	sub	sp, #8
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	2280      	movs	r2, #128	; 0x80
    9cac:	05d2      	lsls	r2, r2, #23
    9cae:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	2200      	movs	r2, #0
    9cb4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	22ff      	movs	r2, #255	; 0xff
    9cba:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	2200      	movs	r2, #0
    9cc0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    9cc2:	687b      	ldr	r3, [r7, #4]
    9cc4:	2200      	movs	r2, #0
    9cc6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	2296      	movs	r2, #150	; 0x96
    9ccc:	0192      	lsls	r2, r2, #6
    9cce:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	2224      	movs	r2, #36	; 0x24
    9cd4:	2101      	movs	r1, #1
    9cd6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	2225      	movs	r2, #37	; 0x25
    9cdc:	2101      	movs	r1, #1
    9cde:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	2226      	movs	r2, #38	; 0x26
    9ce4:	2100      	movs	r1, #0
    9ce6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    9ce8:	687b      	ldr	r3, [r7, #4]
    9cea:	2227      	movs	r2, #39	; 0x27
    9cec:	2100      	movs	r1, #0
    9cee:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	2200      	movs	r2, #0
    9cf4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	2288      	movs	r2, #136	; 0x88
    9cfa:	0352      	lsls	r2, r2, #13
    9cfc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    9cfe:	687b      	ldr	r3, [r7, #4]
    9d00:	222c      	movs	r2, #44	; 0x2c
    9d02:	2100      	movs	r1, #0
    9d04:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	222d      	movs	r2, #45	; 0x2d
    9d0a:	2100      	movs	r1, #0
    9d0c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    9d0e:	687b      	ldr	r3, [r7, #4]
    9d10:	2200      	movs	r2, #0
    9d12:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	2200      	movs	r2, #0
    9d18:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	2200      	movs	r2, #0
    9d1e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	2200      	movs	r2, #0
    9d24:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	2200      	movs	r2, #0
    9d2a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	2200      	movs	r2, #0
    9d30:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    9d32:	687b      	ldr	r3, [r7, #4]
    9d34:	2200      	movs	r2, #0
    9d36:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	2200      	movs	r2, #0
    9d3c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	2200      	movs	r2, #0
    9d42:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	2200      	movs	r2, #0
    9d48:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	2213      	movs	r2, #19
    9d4e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    9d50:	687b      	ldr	r3, [r7, #4]
    9d52:	2200      	movs	r2, #0
    9d54:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	46bd      	mov	sp, r7
    9d5a:	b002      	add	sp, #8
    9d5c:	bd80      	pop	{r7, pc}
	...

00009d60 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    9d60:	b580      	push	{r7, lr}
    9d62:	b084      	sub	sp, #16
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	681b      	ldr	r3, [r3, #0]
    9d6c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	681b      	ldr	r3, [r3, #0]
    9d72:	0018      	movs	r0, r3
    9d74:	4b09      	ldr	r3, [pc, #36]	; (9d9c <usart_enable+0x3c>)
    9d76:	4798      	blx	r3
    9d78:	0003      	movs	r3, r0
    9d7a:	0018      	movs	r0, r3
    9d7c:	4b08      	ldr	r3, [pc, #32]	; (9da0 <usart_enable+0x40>)
    9d7e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9d80:	687b      	ldr	r3, [r7, #4]
    9d82:	0018      	movs	r0, r3
    9d84:	4b07      	ldr	r3, [pc, #28]	; (9da4 <usart_enable+0x44>)
    9d86:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9d88:	68fb      	ldr	r3, [r7, #12]
    9d8a:	681b      	ldr	r3, [r3, #0]
    9d8c:	2202      	movs	r2, #2
    9d8e:	431a      	orrs	r2, r3
    9d90:	68fb      	ldr	r3, [r7, #12]
    9d92:	601a      	str	r2, [r3, #0]
}
    9d94:	46c0      	nop			; (mov r8, r8)
    9d96:	46bd      	mov	sp, r7
    9d98:	b004      	add	sp, #16
    9d9a:	bd80      	pop	{r7, pc}
    9d9c:	00007ad1 	.word	0x00007ad1
    9da0:	00009869 	.word	0x00009869
    9da4:	00009c7d 	.word	0x00009c7d

00009da8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b084      	sub	sp, #16
    9dac:	af00      	add	r7, sp, #0
    9dae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	681b      	ldr	r3, [r3, #0]
    9db4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	681b      	ldr	r3, [r3, #0]
    9dba:	0018      	movs	r0, r3
    9dbc:	4b0a      	ldr	r3, [pc, #40]	; (9de8 <usart_disable+0x40>)
    9dbe:	4798      	blx	r3
    9dc0:	0003      	movs	r3, r0
    9dc2:	0018      	movs	r0, r3
    9dc4:	4b09      	ldr	r3, [pc, #36]	; (9dec <usart_disable+0x44>)
    9dc6:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	0018      	movs	r0, r3
    9dcc:	4b08      	ldr	r3, [pc, #32]	; (9df0 <usart_disable+0x48>)
    9dce:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    9dd0:	68fb      	ldr	r3, [r7, #12]
    9dd2:	681b      	ldr	r3, [r3, #0]
    9dd4:	2202      	movs	r2, #2
    9dd6:	4393      	bics	r3, r2
    9dd8:	001a      	movs	r2, r3
    9dda:	68fb      	ldr	r3, [r7, #12]
    9ddc:	601a      	str	r2, [r3, #0]
}
    9dde:	46c0      	nop			; (mov r8, r8)
    9de0:	46bd      	mov	sp, r7
    9de2:	b004      	add	sp, #16
    9de4:	bd80      	pop	{r7, pc}
    9de6:	46c0      	nop			; (mov r8, r8)
    9de8:	00007ad1 	.word	0x00007ad1
    9dec:	00009895 	.word	0x00009895
    9df0:	00009c7d 	.word	0x00009c7d

00009df4 <tc_is_syncing>:
{
    9df4:	b580      	push	{r7, lr}
    9df6:	b084      	sub	sp, #16
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	681b      	ldr	r3, [r3, #0]
    9e00:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    9e02:	68fb      	ldr	r3, [r7, #12]
    9e04:	7bdb      	ldrb	r3, [r3, #15]
    9e06:	b2db      	uxtb	r3, r3
    9e08:	001a      	movs	r2, r3
    9e0a:	2380      	movs	r3, #128	; 0x80
    9e0c:	4013      	ands	r3, r2
    9e0e:	1e5a      	subs	r2, r3, #1
    9e10:	4193      	sbcs	r3, r2
    9e12:	b2db      	uxtb	r3, r3
}
    9e14:	0018      	movs	r0, r3
    9e16:	46bd      	mov	sp, r7
    9e18:	b004      	add	sp, #16
    9e1a:	bd80      	pop	{r7, pc}

00009e1c <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b082      	sub	sp, #8
    9e20:	af00      	add	r7, sp, #0
    9e22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	2200      	movs	r2, #0
    9e28:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    9e2a:	687b      	ldr	r3, [r7, #4]
    9e2c:	2200      	movs	r2, #0
    9e2e:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    9e30:	687b      	ldr	r3, [r7, #4]
    9e32:	2200      	movs	r2, #0
    9e34:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	2200      	movs	r2, #0
    9e3a:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	2200      	movs	r2, #0
    9e40:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    9e42:	687b      	ldr	r3, [r7, #4]
    9e44:	2200      	movs	r2, #0
    9e46:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	2200      	movs	r2, #0
    9e4c:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9e4e:	687b      	ldr	r3, [r7, #4]
    9e50:	2200      	movs	r2, #0
    9e52:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	2200      	movs	r2, #0
    9e58:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    9e5a:	687b      	ldr	r3, [r7, #4]
    9e5c:	2200      	movs	r2, #0
    9e5e:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	2200      	movs	r2, #0
    9e64:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	2200      	movs	r2, #0
    9e6a:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    9e6c:	687b      	ldr	r3, [r7, #4]
    9e6e:	2200      	movs	r2, #0
    9e70:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	2200      	movs	r2, #0
    9e76:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	2200      	movs	r2, #0
    9e7c:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	2200      	movs	r2, #0
    9e82:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    9e84:	687b      	ldr	r3, [r7, #4]
    9e86:	2200      	movs	r2, #0
    9e88:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	2200      	movs	r2, #0
    9e8e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	2200      	movs	r2, #0
    9e94:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	2200      	movs	r2, #0
    9e9a:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    9e9c:	46c0      	nop			; (mov r8, r8)
    9e9e:	46bd      	mov	sp, r7
    9ea0:	b002      	add	sp, #8
    9ea2:	bd80      	pop	{r7, pc}

00009ea4 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	b084      	sub	sp, #16
    9ea8:	af00      	add	r7, sp, #0
    9eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    9eb2:	46c0      	nop			; (mov r8, r8)
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	0018      	movs	r0, r3
    9eb8:	4b07      	ldr	r3, [pc, #28]	; (9ed8 <tc_enable+0x34>)
    9eba:	4798      	blx	r3
    9ebc:	1e03      	subs	r3, r0, #0
    9ebe:	d1f9      	bne.n	9eb4 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    9ec0:	68fb      	ldr	r3, [r7, #12]
    9ec2:	881b      	ldrh	r3, [r3, #0]
    9ec4:	b29b      	uxth	r3, r3
    9ec6:	2202      	movs	r2, #2
    9ec8:	4313      	orrs	r3, r2
    9eca:	b29a      	uxth	r2, r3
    9ecc:	68fb      	ldr	r3, [r7, #12]
    9ece:	801a      	strh	r2, [r3, #0]
}
    9ed0:	46c0      	nop			; (mov r8, r8)
    9ed2:	46bd      	mov	sp, r7
    9ed4:	b004      	add	sp, #16
    9ed6:	bd80      	pop	{r7, pc}
    9ed8:	00009df5 	.word	0x00009df5

00009edc <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b084      	sub	sp, #16
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    9eea:	46c0      	nop			; (mov r8, r8)
    9eec:	68fb      	ldr	r3, [r7, #12]
    9eee:	689b      	ldr	r3, [r3, #8]
    9ef0:	2202      	movs	r2, #2
    9ef2:	4013      	ands	r3, r2
    9ef4:	d1fa      	bne.n	9eec <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9ef6:	68fb      	ldr	r3, [r7, #12]
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	2202      	movs	r2, #2
    9efc:	431a      	orrs	r2, r3
    9efe:	68fb      	ldr	r3, [r7, #12]
    9f00:	601a      	str	r2, [r3, #0]
}
    9f02:	46c0      	nop			; (mov r8, r8)
    9f04:	46bd      	mov	sp, r7
    9f06:	b004      	add	sp, #16
    9f08:	bd80      	pop	{r7, pc}
	...

00009f0c <configure_tc>:
void check_time(uint32_t* time_var);
void check_time_micros(uint32_t* time_var);
bool check_timer_expired(uint32_t* time_var, uint32_t dur);

void configure_tc(void)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b08e      	sub	sp, #56	; 0x38
    9f10:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
    9f12:	1d3b      	adds	r3, r7, #4
    9f14:	0018      	movs	r0, r3
    9f16:	4b0e      	ldr	r3, [pc, #56]	; (9f50 <configure_tc+0x44>)
    9f18:	4798      	blx	r3
	
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    9f1a:	1d3b      	adds	r3, r7, #4
    9f1c:	2208      	movs	r2, #8
    9f1e:	709a      	strb	r2, [r3, #2]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    9f20:	1d3b      	adds	r3, r7, #4
    9f22:	2200      	movs	r2, #0
    9f24:	739a      	strb	r2, [r3, #14]
	config_tc.clock_source =  GCLK_CLKCTRL_GEN_GCLK0;
    9f26:	1d3b      	adds	r3, r7, #4
    9f28:	2200      	movs	r2, #0
    9f2a:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    9f2c:	1d3b      	adds	r3, r7, #4
    9f2e:	2200      	movs	r2, #0
    9f30:	809a      	strh	r2, [r3, #4]

	tc_init(&tc0, TC4, &config_tc);
    9f32:	1d3a      	adds	r2, r7, #4
    9f34:	4907      	ldr	r1, [pc, #28]	; (9f54 <configure_tc+0x48>)
    9f36:	4b08      	ldr	r3, [pc, #32]	; (9f58 <configure_tc+0x4c>)
    9f38:	0018      	movs	r0, r3
    9f3a:	4b08      	ldr	r3, [pc, #32]	; (9f5c <configure_tc+0x50>)
    9f3c:	4798      	blx	r3
	tc_enable(&tc0);
    9f3e:	4b06      	ldr	r3, [pc, #24]	; (9f58 <configure_tc+0x4c>)
    9f40:	0018      	movs	r0, r3
    9f42:	4b07      	ldr	r3, [pc, #28]	; (9f60 <configure_tc+0x54>)
    9f44:	4798      	blx	r3
}
    9f46:	46c0      	nop			; (mov r8, r8)
    9f48:	46bd      	mov	sp, r7
    9f4a:	b00e      	add	sp, #56	; 0x38
    9f4c:	bd80      	pop	{r7, pc}
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	00009e1d 	.word	0x00009e1d
    9f54:	42003000 	.word	0x42003000
    9f58:	20000b80 	.word	0x20000b80
    9f5c:	00005871 	.word	0x00005871
    9f60:	00009ea5 	.word	0x00009ea5

00009f64 <millis>:



uint32_t millis()
{
    9f64:	b580      	push	{r7, lr}
    9f66:	af00      	add	r7, sp, #0
	return (tc_get_count_value(&tc0)/7500); //Overflows every 9.5m
    9f68:	4b06      	ldr	r3, [pc, #24]	; (9f84 <millis+0x20>)
    9f6a:	0018      	movs	r0, r3
    9f6c:	4b06      	ldr	r3, [pc, #24]	; (9f88 <millis+0x24>)
    9f6e:	4798      	blx	r3
    9f70:	0002      	movs	r2, r0
    9f72:	4b06      	ldr	r3, [pc, #24]	; (9f8c <millis+0x28>)
    9f74:	4906      	ldr	r1, [pc, #24]	; (9f90 <millis+0x2c>)
    9f76:	0010      	movs	r0, r2
    9f78:	4798      	blx	r3
    9f7a:	0003      	movs	r3, r0
}
    9f7c:	0018      	movs	r0, r3
    9f7e:	46bd      	mov	sp, r7
    9f80:	bd80      	pop	{r7, pc}
    9f82:	46c0      	nop			; (mov r8, r8)
    9f84:	20000b80 	.word	0x20000b80
    9f88:	00005cc1 	.word	0x00005cc1
    9f8c:	00019181 	.word	0x00019181
    9f90:	00001d4c 	.word	0x00001d4c

00009f94 <check_time>:
uint32_t micros()
{
	return (tc_get_count_value(&tc0)/7.5);
}

void check_time(uint32_t* time_var){
    9f94:	b590      	push	{r4, r7, lr}
    9f96:	b083      	sub	sp, #12
    9f98:	af00      	add	r7, sp, #0
    9f9a:	6078      	str	r0, [r7, #4]
	if(*time_var > millis())
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	681c      	ldr	r4, [r3, #0]
    9fa0:	4b05      	ldr	r3, [pc, #20]	; (9fb8 <check_time+0x24>)
    9fa2:	4798      	blx	r3
    9fa4:	0003      	movs	r3, r0
    9fa6:	429c      	cmp	r4, r3
    9fa8:	d902      	bls.n	9fb0 <check_time+0x1c>
		*time_var = 0;
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	2200      	movs	r2, #0
    9fae:	601a      	str	r2, [r3, #0]
}
    9fb0:	46c0      	nop			; (mov r8, r8)
    9fb2:	46bd      	mov	sp, r7
    9fb4:	b003      	add	sp, #12
    9fb6:	bd90      	pop	{r4, r7, pc}
    9fb8:	00009f65 	.word	0x00009f65

00009fbc <check_timer_expired>:
void check_time_micros(uint32_t* time_var){
	if(*time_var > micros())
	*time_var = 0;
}

bool check_timer_expired(uint32_t* time_var, uint32_t dur){
    9fbc:	b580      	push	{r7, lr}
    9fbe:	b082      	sub	sp, #8
    9fc0:	af00      	add	r7, sp, #0
    9fc2:	6078      	str	r0, [r7, #4]
    9fc4:	6039      	str	r1, [r7, #0]
	check_time(time_var);
    9fc6:	687b      	ldr	r3, [r7, #4]
    9fc8:	0018      	movs	r0, r3
    9fca:	4b08      	ldr	r3, [pc, #32]	; (9fec <check_timer_expired+0x30>)
    9fcc:	4798      	blx	r3
	return (millis() - *time_var) > dur;
    9fce:	4b08      	ldr	r3, [pc, #32]	; (9ff0 <check_timer_expired+0x34>)
    9fd0:	4798      	blx	r3
    9fd2:	0002      	movs	r2, r0
    9fd4:	687b      	ldr	r3, [r7, #4]
    9fd6:	681b      	ldr	r3, [r3, #0]
    9fd8:	1ad3      	subs	r3, r2, r3
    9fda:	683a      	ldr	r2, [r7, #0]
    9fdc:	429a      	cmp	r2, r3
    9fde:	419b      	sbcs	r3, r3
    9fe0:	425b      	negs	r3, r3
    9fe2:	b2db      	uxtb	r3, r3
}
    9fe4:	0018      	movs	r0, r3
    9fe6:	46bd      	mov	sp, r7
    9fe8:	b002      	add	sp, #8
    9fea:	bd80      	pop	{r7, pc}
    9fec:	00009f95 	.word	0x00009f95
    9ff0:	00009f65 	.word	0x00009f65

00009ff4 <configure_APA_SPI>:
void configure_APA_SPI(void);
enum status_code L_APA_BUSY(void);
enum status_code R_APA_BUSY(void);

void configure_APA_SPI(void)
{
    9ff4:	b580      	push	{r7, lr}
    9ff6:	b090      	sub	sp, #64	; 0x40
    9ff8:	af00      	add	r7, sp, #0
    struct spi_config config_spi_master;
	
	/* Configure, initialize and enable Left APA SPI module (SERCOM4)*/
	spi_get_config_defaults(&config_spi_master);
    9ffa:	003b      	movs	r3, r7
    9ffc:	0018      	movs	r0, r3
    9ffe:	4b51      	ldr	r3, [pc, #324]	; (a144 <configure_APA_SPI+0x150>)
    a000:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = APA_BAUD;
    a002:	003b      	movs	r3, r7
    a004:	4a50      	ldr	r2, [pc, #320]	; (a148 <configure_APA_SPI+0x154>)
    a006:	619a      	str	r2, [r3, #24]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    a008:	003b      	movs	r3, r7
    a00a:	2280      	movs	r2, #128	; 0x80
    a00c:	0292      	lsls	r2, r2, #10
    a00e:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PA13D_SERCOM4_PAD1; //CLK
    a010:	003b      	movs	r3, r7
    a012:	4a4e      	ldr	r2, [pc, #312]	; (a14c <configure_APA_SPI+0x158>)
    a014:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    a016:	003b      	movs	r3, r7
    a018:	2201      	movs	r2, #1
    a01a:	4252      	negs	r2, r2
    a01c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_PB11D_SERCOM4_PAD3; //DATA
    a01e:	003b      	movs	r3, r7
    a020:	4a4b      	ldr	r2, [pc, #300]	; (a150 <configure_APA_SPI+0x15c>)
    a022:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
    a024:	003b      	movs	r3, r7
    a026:	2201      	movs	r2, #1
    a028:	4252      	negs	r2, r2
    a02a:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&L_LED_SPI_instance, SERCOM4, &config_spi_master);
    a02c:	003a      	movs	r2, r7
    a02e:	4949      	ldr	r1, [pc, #292]	; (a154 <configure_APA_SPI+0x160>)
    a030:	4b49      	ldr	r3, [pc, #292]	; (a158 <configure_APA_SPI+0x164>)
    a032:	0018      	movs	r0, r3
    a034:	4b49      	ldr	r3, [pc, #292]	; (a15c <configure_APA_SPI+0x168>)
    a036:	4798      	blx	r3
	spi_enable(&L_LED_SPI_instance);
    a038:	4b47      	ldr	r3, [pc, #284]	; (a158 <configure_APA_SPI+0x164>)
    a03a:	0018      	movs	r0, r3
    a03c:	4b48      	ldr	r3, [pc, #288]	; (a160 <configure_APA_SPI+0x16c>)
    a03e:	4798      	blx	r3

    /* Configure, initialize and enable Right APA SPI module (SERCOM0)*/
    spi_get_config_defaults(&config_spi_master);
    a040:	003b      	movs	r3, r7
    a042:	0018      	movs	r0, r3
    a044:	4b3f      	ldr	r3, [pc, #252]	; (a144 <configure_APA_SPI+0x150>)
    a046:	4798      	blx	r3
    config_spi_master.mode_specific.master.baudrate = APA_BAUD;
    a048:	003b      	movs	r3, r7
    a04a:	4a3f      	ldr	r2, [pc, #252]	; (a148 <configure_APA_SPI+0x154>)
    a04c:	619a      	str	r2, [r3, #24]
    config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_F;
    a04e:	003b      	movs	r3, r7
    a050:	2288      	movs	r2, #136	; 0x88
    a052:	0352      	lsls	r2, r2, #13
    a054:	60da      	str	r2, [r3, #12]
    config_spi_master.pinmux_pad0 = PINMUX_UNUSED;
    a056:	003b      	movs	r3, r7
    a058:	2201      	movs	r2, #1
    a05a:	4252      	negs	r2, r2
    a05c:	629a      	str	r2, [r3, #40]	; 0x28
    config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    a05e:	003b      	movs	r3, r7
    a060:	2201      	movs	r2, #1
    a062:	4252      	negs	r2, r2
    a064:	62da      	str	r2, [r3, #44]	; 0x2c
    config_spi_master.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2; //DATA
    a066:	003b      	movs	r3, r7
    a068:	4a3e      	ldr	r2, [pc, #248]	; (a164 <configure_APA_SPI+0x170>)
    a06a:	631a      	str	r2, [r3, #48]	; 0x30
    config_spi_master.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3; //CLK
    a06c:	003b      	movs	r3, r7
    a06e:	4a3e      	ldr	r2, [pc, #248]	; (a168 <configure_APA_SPI+0x174>)
    a070:	635a      	str	r2, [r3, #52]	; 0x34
    spi_init(&R_LED_SPI_instance, SERCOM2, &config_spi_master);
    a072:	003a      	movs	r2, r7
    a074:	493d      	ldr	r1, [pc, #244]	; (a16c <configure_APA_SPI+0x178>)
    a076:	4b3e      	ldr	r3, [pc, #248]	; (a170 <configure_APA_SPI+0x17c>)
    a078:	0018      	movs	r0, r3
    a07a:	4b38      	ldr	r3, [pc, #224]	; (a15c <configure_APA_SPI+0x168>)
    a07c:	4798      	blx	r3
    spi_enable(&R_LED_SPI_instance);
    a07e:	4b3c      	ldr	r3, [pc, #240]	; (a170 <configure_APA_SPI+0x17c>)
    a080:	0018      	movs	r0, r3
    a082:	4b37      	ldr	r3, [pc, #220]	; (a160 <configure_APA_SPI+0x16c>)
    a084:	4798      	blx	r3

	// TODO: Replace with memcpy
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a086:	2300      	movs	r3, #0
    a088:	63fb      	str	r3, [r7, #60]	; 0x3c
    a08a:	e01a      	b.n	a0c2 <configure_APA_SPI+0xce>
		L_SPI_send_buf[(i*4)+4] = (0b11100000 | 0x0A);
    a08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a08e:	3301      	adds	r3, #1
    a090:	009b      	lsls	r3, r3, #2
    a092:	4a38      	ldr	r2, [pc, #224]	; (a174 <configure_APA_SPI+0x180>)
    a094:	21ea      	movs	r1, #234	; 0xea
    a096:	54d1      	strb	r1, [r2, r3]
		L_SPI_send_buf[(i*4)+5] = 0x00;
    a098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a09a:	009b      	lsls	r3, r3, #2
    a09c:	3305      	adds	r3, #5
    a09e:	4a35      	ldr	r2, [pc, #212]	; (a174 <configure_APA_SPI+0x180>)
    a0a0:	2100      	movs	r1, #0
    a0a2:	54d1      	strb	r1, [r2, r3]
		L_SPI_send_buf[(i*4)+6] = 0x00;
    a0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a0a6:	009b      	lsls	r3, r3, #2
    a0a8:	3306      	adds	r3, #6
    a0aa:	4a32      	ldr	r2, [pc, #200]	; (a174 <configure_APA_SPI+0x180>)
    a0ac:	2100      	movs	r1, #0
    a0ae:	54d1      	strb	r1, [r2, r3]
		L_SPI_send_buf[(i*4)+7] = 0x00;
    a0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a0b2:	009b      	lsls	r3, r3, #2
    a0b4:	3307      	adds	r3, #7
    a0b6:	4a2f      	ldr	r2, [pc, #188]	; (a174 <configure_APA_SPI+0x180>)
    a0b8:	2100      	movs	r1, #0
    a0ba:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a0be:	3301      	adds	r3, #1
    a0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    a0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a0c4:	2b47      	cmp	r3, #71	; 0x47
    a0c6:	dde1      	ble.n	a08c <configure_APA_SPI+0x98>
	}

	
	// TODO: Replace with memcpy
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a0c8:	2300      	movs	r3, #0
    a0ca:	63bb      	str	r3, [r7, #56]	; 0x38
    a0cc:	e01a      	b.n	a104 <configure_APA_SPI+0x110>
		R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0x0A);
    a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0d0:	3301      	adds	r3, #1
    a0d2:	009b      	lsls	r3, r3, #2
    a0d4:	4a28      	ldr	r2, [pc, #160]	; (a178 <configure_APA_SPI+0x184>)
    a0d6:	21ea      	movs	r1, #234	; 0xea
    a0d8:	54d1      	strb	r1, [r2, r3]
		R_SPI_send_buf[(i*4)+5] = 0x00;
    a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0dc:	009b      	lsls	r3, r3, #2
    a0de:	3305      	adds	r3, #5
    a0e0:	4a25      	ldr	r2, [pc, #148]	; (a178 <configure_APA_SPI+0x184>)
    a0e2:	2100      	movs	r1, #0
    a0e4:	54d1      	strb	r1, [r2, r3]
		R_SPI_send_buf[(i*4)+6] = 0x00;
    a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0e8:	009b      	lsls	r3, r3, #2
    a0ea:	3306      	adds	r3, #6
    a0ec:	4a22      	ldr	r2, [pc, #136]	; (a178 <configure_APA_SPI+0x184>)
    a0ee:	2100      	movs	r1, #0
    a0f0:	54d1      	strb	r1, [r2, r3]
		R_SPI_send_buf[(i*4)+7] = 0x00;
    a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0f4:	009b      	lsls	r3, r3, #2
    a0f6:	3307      	adds	r3, #7
    a0f8:	4a1f      	ldr	r2, [pc, #124]	; (a178 <configure_APA_SPI+0x184>)
    a0fa:	2100      	movs	r1, #0
    a0fc:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a100:	3301      	adds	r3, #1
    a102:	63bb      	str	r3, [r7, #56]	; 0x38
    a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a106:	2b47      	cmp	r3, #71	; 0x47
    a108:	dde1      	ble.n	a0ce <configure_APA_SPI+0xda>
	}
	
	// TODO: Replace with memcpy
	L_SPI_send_buf[0] = 0x00;
    a10a:	4b1a      	ldr	r3, [pc, #104]	; (a174 <configure_APA_SPI+0x180>)
    a10c:	2200      	movs	r2, #0
    a10e:	701a      	strb	r2, [r3, #0]
	L_SPI_send_buf[1] = 0x00;
    a110:	4b18      	ldr	r3, [pc, #96]	; (a174 <configure_APA_SPI+0x180>)
    a112:	2200      	movs	r2, #0
    a114:	705a      	strb	r2, [r3, #1]
	L_SPI_send_buf[2] = 0x00;
    a116:	4b17      	ldr	r3, [pc, #92]	; (a174 <configure_APA_SPI+0x180>)
    a118:	2200      	movs	r2, #0
    a11a:	709a      	strb	r2, [r3, #2]
	L_SPI_send_buf[3] = 0x00;
    a11c:	4b15      	ldr	r3, [pc, #84]	; (a174 <configure_APA_SPI+0x180>)
    a11e:	2200      	movs	r2, #0
    a120:	70da      	strb	r2, [r3, #3]
	R_SPI_send_buf[0] = 0x00;
    a122:	4b15      	ldr	r3, [pc, #84]	; (a178 <configure_APA_SPI+0x184>)
    a124:	2200      	movs	r2, #0
    a126:	701a      	strb	r2, [r3, #0]
	R_SPI_send_buf[1] = 0x00;
    a128:	4b13      	ldr	r3, [pc, #76]	; (a178 <configure_APA_SPI+0x184>)
    a12a:	2200      	movs	r2, #0
    a12c:	705a      	strb	r2, [r3, #1]
	R_SPI_send_buf[2] = 0x00;
    a12e:	4b12      	ldr	r3, [pc, #72]	; (a178 <configure_APA_SPI+0x184>)
    a130:	2200      	movs	r2, #0
    a132:	709a      	strb	r2, [r3, #2]
	R_SPI_send_buf[3] = 0x00;
    a134:	4b10      	ldr	r3, [pc, #64]	; (a178 <configure_APA_SPI+0x184>)
    a136:	2200      	movs	r2, #0
    a138:	70da      	strb	r2, [r3, #3]
}
    a13a:	46c0      	nop			; (mov r8, r8)
    a13c:	46bd      	mov	sp, r7
    a13e:	b010      	add	sp, #64	; 0x40
    a140:	bd80      	pop	{r7, pc}
    a142:	46c0      	nop			; (mov r8, r8)
    a144:	00009b89 	.word	0x00009b89
    a148:	00027100 	.word	0x00027100
    a14c:	000d0003 	.word	0x000d0003
    a150:	002b0003 	.word	0x002b0003
    a154:	42001800 	.word	0x42001800
    a158:	20000fe4 	.word	0x20000fe4
    a15c:	00006d9d 	.word	0x00006d9d
    a160:	00009c0d 	.word	0x00009c0d
    a164:	000a0003 	.word	0x000a0003
    a168:	000b0003 	.word	0x000b0003
    a16c:	42001000 	.word	0x42001000
    a170:	20000544 	.word	0x20000544
    a174:	20001440 	.word	0x20001440
    a178:	20000598 	.word	0x20000598

0000a17c <set_left_gnd>:
void set_left_gnd(void);
void set_right_gnd(void);
void L_APA_write(uint16_t count);
void R_APA_write(uint16_t count);

void set_left_gnd(void){
    a17c:	b580      	push	{r7, lr}
    a17e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(L_GND,1);
    a180:	2101      	movs	r1, #1
    a182:	2007      	movs	r0, #7
    a184:	4b02      	ldr	r3, [pc, #8]	; (a190 <set_left_gnd+0x14>)
    a186:	4798      	blx	r3
}
    a188:	46c0      	nop			; (mov r8, r8)
    a18a:	46bd      	mov	sp, r7
    a18c:	bd80      	pop	{r7, pc}
    a18e:	46c0      	nop			; (mov r8, r8)
    a190:	00009815 	.word	0x00009815

0000a194 <set_right_gnd>:

void set_right_gnd(void){
    a194:	b580      	push	{r7, lr}
    a196:	af00      	add	r7, sp, #0
	port_pin_set_output_level(R_GND,1);
    a198:	2101      	movs	r1, #1
    a19a:	200e      	movs	r0, #14
    a19c:	4b02      	ldr	r3, [pc, #8]	; (a1a8 <set_right_gnd+0x14>)
    a19e:	4798      	blx	r3
}
    a1a0:	46c0      	nop			; (mov r8, r8)
    a1a2:	46bd      	mov	sp, r7
    a1a4:	bd80      	pop	{r7, pc}
    a1a6:	46c0      	nop			; (mov r8, r8)
    a1a8:	00009815 	.word	0x00009815

0000a1ac <L_APA_write>:

void L_APA_write(uint16_t count)
{
    a1ac:	b580      	push	{r7, lr}
    a1ae:	b082      	sub	sp, #8
    a1b0:	af00      	add	r7, sp, #0
    a1b2:	0002      	movs	r2, r0
    a1b4:	1dbb      	adds	r3, r7, #6
    a1b6:	801a      	strh	r2, [r3, #0]
	// Set the stop frame
	L_SPI_send_buf[count*4+4] = 0xFF;
    a1b8:	1dbb      	adds	r3, r7, #6
    a1ba:	881b      	ldrh	r3, [r3, #0]
    a1bc:	3301      	adds	r3, #1
    a1be:	009b      	lsls	r3, r3, #2
    a1c0:	4a13      	ldr	r2, [pc, #76]	; (a210 <L_APA_write+0x64>)
    a1c2:	21ff      	movs	r1, #255	; 0xff
    a1c4:	54d1      	strb	r1, [r2, r3]
	L_SPI_send_buf[count*4+5] = 0xFF;
    a1c6:	1dbb      	adds	r3, r7, #6
    a1c8:	881b      	ldrh	r3, [r3, #0]
    a1ca:	009b      	lsls	r3, r3, #2
    a1cc:	3305      	adds	r3, #5
    a1ce:	4a10      	ldr	r2, [pc, #64]	; (a210 <L_APA_write+0x64>)
    a1d0:	21ff      	movs	r1, #255	; 0xff
    a1d2:	54d1      	strb	r1, [r2, r3]
	L_SPI_send_buf[count*4+6] = 0xFF;
    a1d4:	1dbb      	adds	r3, r7, #6
    a1d6:	881b      	ldrh	r3, [r3, #0]
    a1d8:	009b      	lsls	r3, r3, #2
    a1da:	3306      	adds	r3, #6
    a1dc:	4a0c      	ldr	r2, [pc, #48]	; (a210 <L_APA_write+0x64>)
    a1de:	21ff      	movs	r1, #255	; 0xff
    a1e0:	54d1      	strb	r1, [r2, r3]
	L_SPI_send_buf[count*4+7] = 0xFF;
    a1e2:	1dbb      	adds	r3, r7, #6
    a1e4:	881b      	ldrh	r3, [r3, #0]
    a1e6:	009b      	lsls	r3, r3, #2
    a1e8:	3307      	adds	r3, #7
    a1ea:	4a09      	ldr	r2, [pc, #36]	; (a210 <L_APA_write+0x64>)
    a1ec:	21ff      	movs	r1, #255	; 0xff
    a1ee:	54d1      	strb	r1, [r2, r3]
	spi_write_buffer_job(&L_LED_SPI_instance, L_SPI_send_buf, (count*4)+8);
    a1f0:	1dbb      	adds	r3, r7, #6
    a1f2:	881b      	ldrh	r3, [r3, #0]
    a1f4:	3302      	adds	r3, #2
    a1f6:	b29b      	uxth	r3, r3
    a1f8:	009b      	lsls	r3, r3, #2
    a1fa:	b29a      	uxth	r2, r3
    a1fc:	4904      	ldr	r1, [pc, #16]	; (a210 <L_APA_write+0x64>)
    a1fe:	4b05      	ldr	r3, [pc, #20]	; (a214 <L_APA_write+0x68>)
    a200:	0018      	movs	r0, r3
    a202:	4b05      	ldr	r3, [pc, #20]	; (a218 <L_APA_write+0x6c>)
    a204:	4798      	blx	r3
}
    a206:	46c0      	nop			; (mov r8, r8)
    a208:	46bd      	mov	sp, r7
    a20a:	b002      	add	sp, #8
    a20c:	bd80      	pop	{r7, pc}
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	20001440 	.word	0x20001440
    a214:	20000fe4 	.word	0x20000fe4
    a218:	00006fad 	.word	0x00006fad

0000a21c <R_APA_write>:
enum status_code L_APA_BUSY(){
	return spi_get_job_status(&L_LED_SPI_instance);
}

void R_APA_write(uint16_t count)
{
    a21c:	b580      	push	{r7, lr}
    a21e:	b082      	sub	sp, #8
    a220:	af00      	add	r7, sp, #0
    a222:	0002      	movs	r2, r0
    a224:	1dbb      	adds	r3, r7, #6
    a226:	801a      	strh	r2, [r3, #0]
	// Set the stop frame
	R_SPI_send_buf[count*4+4] = 0xFF;
    a228:	1dbb      	adds	r3, r7, #6
    a22a:	881b      	ldrh	r3, [r3, #0]
    a22c:	3301      	adds	r3, #1
    a22e:	009b      	lsls	r3, r3, #2
    a230:	4a13      	ldr	r2, [pc, #76]	; (a280 <R_APA_write+0x64>)
    a232:	21ff      	movs	r1, #255	; 0xff
    a234:	54d1      	strb	r1, [r2, r3]
	R_SPI_send_buf[count*4+5] = 0xFF;
    a236:	1dbb      	adds	r3, r7, #6
    a238:	881b      	ldrh	r3, [r3, #0]
    a23a:	009b      	lsls	r3, r3, #2
    a23c:	3305      	adds	r3, #5
    a23e:	4a10      	ldr	r2, [pc, #64]	; (a280 <R_APA_write+0x64>)
    a240:	21ff      	movs	r1, #255	; 0xff
    a242:	54d1      	strb	r1, [r2, r3]
	R_SPI_send_buf[count*4+6] = 0xFF;
    a244:	1dbb      	adds	r3, r7, #6
    a246:	881b      	ldrh	r3, [r3, #0]
    a248:	009b      	lsls	r3, r3, #2
    a24a:	3306      	adds	r3, #6
    a24c:	4a0c      	ldr	r2, [pc, #48]	; (a280 <R_APA_write+0x64>)
    a24e:	21ff      	movs	r1, #255	; 0xff
    a250:	54d1      	strb	r1, [r2, r3]
	R_SPI_send_buf[count*4+7] = 0xFF;
    a252:	1dbb      	adds	r3, r7, #6
    a254:	881b      	ldrh	r3, [r3, #0]
    a256:	009b      	lsls	r3, r3, #2
    a258:	3307      	adds	r3, #7
    a25a:	4a09      	ldr	r2, [pc, #36]	; (a280 <R_APA_write+0x64>)
    a25c:	21ff      	movs	r1, #255	; 0xff
    a25e:	54d1      	strb	r1, [r2, r3]
	spi_write_buffer_job(&R_LED_SPI_instance, R_SPI_send_buf, (count*4)+8);
    a260:	1dbb      	adds	r3, r7, #6
    a262:	881b      	ldrh	r3, [r3, #0]
    a264:	3302      	adds	r3, #2
    a266:	b29b      	uxth	r3, r3
    a268:	009b      	lsls	r3, r3, #2
    a26a:	b29a      	uxth	r2, r3
    a26c:	4904      	ldr	r1, [pc, #16]	; (a280 <R_APA_write+0x64>)
    a26e:	4b05      	ldr	r3, [pc, #20]	; (a284 <R_APA_write+0x68>)
    a270:	0018      	movs	r0, r3
    a272:	4b05      	ldr	r3, [pc, #20]	; (a288 <R_APA_write+0x6c>)
    a274:	4798      	blx	r3
}
    a276:	46c0      	nop			; (mov r8, r8)
    a278:	46bd      	mov	sp, r7
    a27a:	b002      	add	sp, #8
    a27c:	bd80      	pop	{r7, pc}
    a27e:	46c0      	nop			; (mov r8, r8)
    a280:	20000598 	.word	0x20000598
    a284:	20000544 	.word	0x20000544
    a288:	00006fad 	.word	0x00006fad

0000a28c <configure_LED_PWM>:



// Configure all of the LED ports as PWM outputs
void configure_LED_PWM(void)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	b0aa      	sub	sp, #168	; 0xa8
    a290:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    a292:	4a5e      	ldr	r2, [pc, #376]	; (a40c <configure_LED_PWM+0x180>)
    a294:	1d3b      	adds	r3, r7, #4
    a296:	0011      	movs	r1, r2
    a298:	0018      	movs	r0, r3
    a29a:	4b5d      	ldr	r3, [pc, #372]	; (a410 <configure_LED_PWM+0x184>)
    a29c:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    a29e:	1d3b      	adds	r3, r7, #4
    a2a0:	4a5c      	ldr	r2, [pc, #368]	; (a414 <configure_LED_PWM+0x188>)
    a2a2:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    a2a4:	1d3b      	adds	r3, r7, #4
    a2a6:	2202      	movs	r2, #2
    a2a8:	761a      	strb	r2, [r3, #24]

	if(RGB_led_type == RGB_ANALOG){
    a2aa:	4b5b      	ldr	r3, [pc, #364]	; (a418 <configure_LED_PWM+0x18c>)
    a2ac:	781b      	ldrb	r3, [r3, #0]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d13f      	bne.n	a332 <configure_LED_PWM+0xa6>
		config_tcc.compare.match[0] = 0;
    a2b2:	1d3b      	adds	r3, r7, #4
    a2b4:	2200      	movs	r2, #0
    a2b6:	61da      	str	r2, [r3, #28]
		config_tcc.compare.match[1] = 0;
    a2b8:	1d3b      	adds	r3, r7, #4
    a2ba:	2200      	movs	r2, #0
    a2bc:	621a      	str	r2, [r3, #32]
		config_tcc.compare.match[2] = 0;
    a2be:	1d3b      	adds	r3, r7, #4
    a2c0:	2200      	movs	r2, #0
    a2c2:	625a      	str	r2, [r3, #36]	; 0x24
		config_tcc.compare.match[3] = 0;
    a2c4:	1d3b      	adds	r3, r7, #4
    a2c6:	2200      	movs	r2, #0
    a2c8:	629a      	str	r2, [r3, #40]	; 0x28
		config_tcc.pins.enable_wave_out_pin[0] = true;
    a2ca:	1d3b      	adds	r3, r7, #4
    a2cc:	2298      	movs	r2, #152	; 0x98
    a2ce:	2101      	movs	r1, #1
    a2d0:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.enable_wave_out_pin[1] = true;
    a2d2:	1d3b      	adds	r3, r7, #4
    a2d4:	2299      	movs	r2, #153	; 0x99
    a2d6:	2101      	movs	r1, #1
    a2d8:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.enable_wave_out_pin[2] = true;
    a2da:	1d3b      	adds	r3, r7, #4
    a2dc:	229a      	movs	r2, #154	; 0x9a
    a2de:	2101      	movs	r1, #1
    a2e0:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.enable_wave_out_pin[3] = true;
    a2e2:	1d3b      	adds	r3, r7, #4
    a2e4:	229b      	movs	r2, #155	; 0x9b
    a2e6:	2101      	movs	r1, #1
    a2e8:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.wave_out_pin[0]        = PIN_PA14F_TCC0_WO4;
    a2ea:	1d3b      	adds	r3, r7, #4
    a2ec:	220e      	movs	r2, #14
    a2ee:	659a      	str	r2, [r3, #88]	; 0x58
		config_tcc.pins.wave_out_pin[1]        = PIN_PB11F_TCC0_WO5;
    a2f0:	1d3b      	adds	r3, r7, #4
    a2f2:	222b      	movs	r2, #43	; 0x2b
    a2f4:	65da      	str	r2, [r3, #92]	; 0x5c
		config_tcc.pins.wave_out_pin[2]        = PIN_PA10F_TCC0_WO2;
    a2f6:	1d3b      	adds	r3, r7, #4
    a2f8:	220a      	movs	r2, #10
    a2fa:	661a      	str	r2, [r3, #96]	; 0x60
		config_tcc.pins.wave_out_pin[3]        = PIN_PA11F_TCC0_WO3;
    a2fc:	1d3b      	adds	r3, r7, #4
    a2fe:	220b      	movs	r2, #11
    a300:	665a      	str	r2, [r3, #100]	; 0x64
		config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA14F_TCC0_WO4;
    a302:	1d3b      	adds	r3, r7, #4
    a304:	2205      	movs	r2, #5
    a306:	679a      	str	r2, [r3, #120]	; 0x78
		config_tcc.pins.wave_out_pin_mux[1]    = MUX_PB11F_TCC0_WO5;
    a308:	1d3b      	adds	r3, r7, #4
    a30a:	2205      	movs	r2, #5
    a30c:	67da      	str	r2, [r3, #124]	; 0x7c
		config_tcc.pins.wave_out_pin_mux[2]    = MUX_PA10F_TCC0_WO2;
    a30e:	1d3b      	adds	r3, r7, #4
    a310:	2280      	movs	r2, #128	; 0x80
    a312:	2105      	movs	r1, #5
    a314:	5099      	str	r1, [r3, r2]
		config_tcc.pins.wave_out_pin_mux[3]    = MUX_PA11F_TCC0_WO3;
    a316:	1d3b      	adds	r3, r7, #4
    a318:	2284      	movs	r2, #132	; 0x84
    a31a:	2105      	movs	r1, #5
    a31c:	5099      	str	r1, [r3, r2]
		tcc_init(&tcc0, TCC0, &config_tcc);
    a31e:	1d3a      	adds	r2, r7, #4
    a320:	493a      	ldr	r1, [pc, #232]	; (a40c <configure_LED_PWM+0x180>)
    a322:	4b3e      	ldr	r3, [pc, #248]	; (a41c <configure_LED_PWM+0x190>)
    a324:	0018      	movs	r0, r3
    a326:	4b3e      	ldr	r3, [pc, #248]	; (a420 <configure_LED_PWM+0x194>)
    a328:	4798      	blx	r3
		tcc_enable(&tcc0);
    a32a:	4b3c      	ldr	r3, [pc, #240]	; (a41c <configure_LED_PWM+0x190>)
    a32c:	0018      	movs	r0, r3
    a32e:	4b3d      	ldr	r3, [pc, #244]	; (a424 <configure_LED_PWM+0x198>)
    a330:	4798      	blx	r3
	}

	tcc_get_config_defaults(&config_tcc, TCC1);
    a332:	4a3d      	ldr	r2, [pc, #244]	; (a428 <configure_LED_PWM+0x19c>)
    a334:	1d3b      	adds	r3, r7, #4
    a336:	0011      	movs	r1, r2
    a338:	0018      	movs	r0, r3
    a33a:	4b35      	ldr	r3, [pc, #212]	; (a410 <configure_LED_PWM+0x184>)
    a33c:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    a33e:	1d3b      	adds	r3, r7, #4
    a340:	4a34      	ldr	r2, [pc, #208]	; (a414 <configure_LED_PWM+0x188>)
    a342:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    a344:	1d3b      	adds	r3, r7, #4
    a346:	2202      	movs	r2, #2
    a348:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    a34a:	1d3b      	adds	r3, r7, #4
    a34c:	2200      	movs	r2, #0
    a34e:	61da      	str	r2, [r3, #28]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    a350:	1d3b      	adds	r3, r7, #4
    a352:	2298      	movs	r2, #152	; 0x98
    a354:	2101      	movs	r1, #1
    a356:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
    a358:	1d3b      	adds	r3, r7, #4
    a35a:	2206      	movs	r2, #6
    a35c:	659a      	str	r2, [r3, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
    a35e:	1d3b      	adds	r3, r7, #4
    a360:	2204      	movs	r2, #4
    a362:	679a      	str	r2, [r3, #120]	; 0x78
	if(RGB_led_type == RGB_ANALOG){
    a364:	4b2c      	ldr	r3, [pc, #176]	; (a418 <configure_LED_PWM+0x18c>)
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	2b00      	cmp	r3, #0
    a36a:	d10c      	bne.n	a386 <configure_LED_PWM+0xfa>
		config_tcc.compare.match[1] = 0;
    a36c:	1d3b      	adds	r3, r7, #4
    a36e:	2200      	movs	r2, #0
    a370:	621a      	str	r2, [r3, #32]
		config_tcc.pins.enable_wave_out_pin[1] = true;
    a372:	1d3b      	adds	r3, r7, #4
    a374:	2299      	movs	r2, #153	; 0x99
    a376:	2101      	movs	r1, #1
    a378:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    a37a:	1d3b      	adds	r3, r7, #4
    a37c:	2207      	movs	r2, #7
    a37e:	65da      	str	r2, [r3, #92]	; 0x5c
		config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    a380:	1d3b      	adds	r3, r7, #4
    a382:	2204      	movs	r2, #4
    a384:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	tcc_init(&tcc1, TCC1, &config_tcc);
    a386:	1d3a      	adds	r2, r7, #4
    a388:	4927      	ldr	r1, [pc, #156]	; (a428 <configure_LED_PWM+0x19c>)
    a38a:	4b28      	ldr	r3, [pc, #160]	; (a42c <configure_LED_PWM+0x1a0>)
    a38c:	0018      	movs	r0, r3
    a38e:	4b24      	ldr	r3, [pc, #144]	; (a420 <configure_LED_PWM+0x194>)
    a390:	4798      	blx	r3
	tcc_enable(&tcc1);
    a392:	4b26      	ldr	r3, [pc, #152]	; (a42c <configure_LED_PWM+0x1a0>)
    a394:	0018      	movs	r0, r3
    a396:	4b23      	ldr	r3, [pc, #140]	; (a424 <configure_LED_PWM+0x198>)
    a398:	4798      	blx	r3


	tcc_get_config_defaults(&config_tcc, TCC2);
    a39a:	4a25      	ldr	r2, [pc, #148]	; (a430 <configure_LED_PWM+0x1a4>)
    a39c:	1d3b      	adds	r3, r7, #4
    a39e:	0011      	movs	r1, r2
    a3a0:	0018      	movs	r0, r3
    a3a2:	4b1b      	ldr	r3, [pc, #108]	; (a410 <configure_LED_PWM+0x184>)
    a3a4:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    a3a6:	1d3b      	adds	r3, r7, #4
    a3a8:	4a1a      	ldr	r2, [pc, #104]	; (a414 <configure_LED_PWM+0x188>)
    a3aa:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    a3ac:	1d3b      	adds	r3, r7, #4
    a3ae:	2202      	movs	r2, #2
    a3b0:	761a      	strb	r2, [r3, #24]

	config_tcc.compare.match[0] = 0;
    a3b2:	1d3b      	adds	r3, r7, #4
    a3b4:	2200      	movs	r2, #0
    a3b6:	61da      	str	r2, [r3, #28]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    a3b8:	1d3b      	adds	r3, r7, #4
    a3ba:	2298      	movs	r2, #152	; 0x98
    a3bc:	2101      	movs	r1, #1
    a3be:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[0]        = PIN_PA12E_TCC2_WO0;
    a3c0:	1d3b      	adds	r3, r7, #4
    a3c2:	220c      	movs	r2, #12
    a3c4:	659a      	str	r2, [r3, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA12E_TCC2_WO0;
    a3c6:	1d3b      	adds	r3, r7, #4
    a3c8:	2204      	movs	r2, #4
    a3ca:	679a      	str	r2, [r3, #120]	; 0x78
	if(RGB_led_type == RGB_ANALOG){
    a3cc:	4b12      	ldr	r3, [pc, #72]	; (a418 <configure_LED_PWM+0x18c>)
    a3ce:	781b      	ldrb	r3, [r3, #0]
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d10c      	bne.n	a3ee <configure_LED_PWM+0x162>
		config_tcc.pins.enable_wave_out_pin[1] = true;
    a3d4:	1d3b      	adds	r3, r7, #4
    a3d6:	2299      	movs	r2, #153	; 0x99
    a3d8:	2101      	movs	r1, #1
    a3da:	5499      	strb	r1, [r3, r2]
		config_tcc.compare.match[1] = 0;
    a3dc:	1d3b      	adds	r3, r7, #4
    a3de:	2200      	movs	r2, #0
    a3e0:	621a      	str	r2, [r3, #32]
		config_tcc.pins.wave_out_pin[1]        = PIN_PA13E_TCC2_WO1;
    a3e2:	1d3b      	adds	r3, r7, #4
    a3e4:	220d      	movs	r2, #13
    a3e6:	65da      	str	r2, [r3, #92]	; 0x5c
		config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA13E_TCC2_WO1;
    a3e8:	1d3b      	adds	r3, r7, #4
    a3ea:	2204      	movs	r2, #4
    a3ec:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	tcc_init(&tcc2, TCC2, &config_tcc);
    a3ee:	1d3a      	adds	r2, r7, #4
    a3f0:	490f      	ldr	r1, [pc, #60]	; (a430 <configure_LED_PWM+0x1a4>)
    a3f2:	4b10      	ldr	r3, [pc, #64]	; (a434 <configure_LED_PWM+0x1a8>)
    a3f4:	0018      	movs	r0, r3
    a3f6:	4b0a      	ldr	r3, [pc, #40]	; (a420 <configure_LED_PWM+0x194>)
    a3f8:	4798      	blx	r3
	tcc_enable(&tcc2);
    a3fa:	4b0e      	ldr	r3, [pc, #56]	; (a434 <configure_LED_PWM+0x1a8>)
    a3fc:	0018      	movs	r0, r3
    a3fe:	4b09      	ldr	r3, [pc, #36]	; (a424 <configure_LED_PWM+0x198>)
    a400:	4798      	blx	r3
}
    a402:	46c0      	nop			; (mov r8, r8)
    a404:	46bd      	mov	sp, r7
    a406:	b02a      	add	sp, #168	; 0xa8
    a408:	bd80      	pop	{r7, pc}
    a40a:	46c0      	nop			; (mov r8, r8)
    a40c:	42002000 	.word	0x42002000
    a410:	00004c29 	.word	0x00004c29
    a414:	0000ffff 	.word	0x0000ffff
    a418:	20001a88 	.word	0x20001a88
    a41c:	20000b40 	.word	0x20000b40
    a420:	00005285 	.word	0x00005285
    a424:	00009edd 	.word	0x00009edd
    a428:	42002400 	.word	0x42002400
    a42c:	20001a10 	.word	0x20001a10
    a430:	42002800 	.word	0x42002800
    a434:	200018f8 	.word	0x200018f8

0000a438 <setLeftRGB>:

void setLeftRGB(uint16_t red, uint16_t green, uint16_t blue) {
    a438:	b590      	push	{r4, r7, lr}
    a43a:	b083      	sub	sp, #12
    a43c:	af00      	add	r7, sp, #0
    a43e:	0004      	movs	r4, r0
    a440:	0008      	movs	r0, r1
    a442:	0011      	movs	r1, r2
    a444:	1dbb      	adds	r3, r7, #6
    a446:	1c22      	adds	r2, r4, #0
    a448:	801a      	strh	r2, [r3, #0]
    a44a:	1d3b      	adds	r3, r7, #4
    a44c:	1c02      	adds	r2, r0, #0
    a44e:	801a      	strh	r2, [r3, #0]
    a450:	1cbb      	adds	r3, r7, #2
    a452:	1c0a      	adds	r2, r1, #0
    a454:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.LB = blue;
    a456:	4b12      	ldr	r3, [pc, #72]	; (a4a0 <setLeftRGB+0x68>)
    a458:	1cba      	adds	r2, r7, #2
    a45a:	8812      	ldrh	r2, [r2, #0]
    a45c:	809a      	strh	r2, [r3, #4]
	RGB_Ouptut.LG = green;
    a45e:	4b10      	ldr	r3, [pc, #64]	; (a4a0 <setLeftRGB+0x68>)
    a460:	1d3a      	adds	r2, r7, #4
    a462:	8812      	ldrh	r2, [r2, #0]
    a464:	805a      	strh	r2, [r3, #2]
	RGB_Ouptut.LR = red;
    a466:	4b0e      	ldr	r3, [pc, #56]	; (a4a0 <setLeftRGB+0x68>)
    a468:	1dba      	adds	r2, r7, #6
    a46a:	8812      	ldrh	r2, [r2, #0]
    a46c:	801a      	strh	r2, [r3, #0]
#if defined(HW_3v4) || defined(HW_4v0)
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), red);
    a46e:	1dbb      	adds	r3, r7, #6
    a470:	881a      	ldrh	r2, [r3, #0]
    a472:	4b0c      	ldr	r3, [pc, #48]	; (a4a4 <setLeftRGB+0x6c>)
    a474:	2100      	movs	r1, #0
    a476:	0018      	movs	r0, r3
    a478:	4b0b      	ldr	r3, [pc, #44]	; (a4a8 <setLeftRGB+0x70>)
    a47a:	4798      	blx	r3
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
    a47c:	1d3b      	adds	r3, r7, #4
    a47e:	881a      	ldrh	r2, [r3, #0]
    a480:	4b0a      	ldr	r3, [pc, #40]	; (a4ac <setLeftRGB+0x74>)
    a482:	2101      	movs	r1, #1
    a484:	0018      	movs	r0, r3
    a486:	4b08      	ldr	r3, [pc, #32]	; (a4a8 <setLeftRGB+0x70>)
    a488:	4798      	blx	r3
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
    a48a:	1cbb      	adds	r3, r7, #2
    a48c:	881a      	ldrh	r2, [r3, #0]
    a48e:	4b08      	ldr	r3, [pc, #32]	; (a4b0 <setLeftRGB+0x78>)
    a490:	2101      	movs	r1, #1
    a492:	0018      	movs	r0, r3
    a494:	4b04      	ldr	r3, [pc, #16]	; (a4a8 <setLeftRGB+0x70>)
    a496:	4798      	blx	r3
#if defined(HW_4v1)
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), red); 
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
#endif
}
    a498:	46c0      	nop			; (mov r8, r8)
    a49a:	46bd      	mov	sp, r7
    a49c:	b003      	add	sp, #12
    a49e:	bd90      	pop	{r4, r7, pc}
    a4a0:	20000394 	.word	0x20000394
    a4a4:	20000b40 	.word	0x20000b40
    a4a8:	0000572d 	.word	0x0000572d
    a4ac:	200018f8 	.word	0x200018f8
    a4b0:	20001a10 	.word	0x20001a10

0000a4b4 <setRightRGB>:

void setRightRGB(uint16_t red, uint16_t green, uint16_t blue) {
    a4b4:	b590      	push	{r4, r7, lr}
    a4b6:	b083      	sub	sp, #12
    a4b8:	af00      	add	r7, sp, #0
    a4ba:	0004      	movs	r4, r0
    a4bc:	0008      	movs	r0, r1
    a4be:	0011      	movs	r1, r2
    a4c0:	1dbb      	adds	r3, r7, #6
    a4c2:	1c22      	adds	r2, r4, #0
    a4c4:	801a      	strh	r2, [r3, #0]
    a4c6:	1d3b      	adds	r3, r7, #4
    a4c8:	1c02      	adds	r2, r0, #0
    a4ca:	801a      	strh	r2, [r3, #0]
    a4cc:	1cbb      	adds	r3, r7, #2
    a4ce:	1c0a      	adds	r2, r1, #0
    a4d0:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.RB = blue;
    a4d2:	4b12      	ldr	r3, [pc, #72]	; (a51c <setRightRGB+0x68>)
    a4d4:	1cba      	adds	r2, r7, #2
    a4d6:	8812      	ldrh	r2, [r2, #0]
    a4d8:	815a      	strh	r2, [r3, #10]
	RGB_Ouptut.RG = green;
    a4da:	4b10      	ldr	r3, [pc, #64]	; (a51c <setRightRGB+0x68>)
    a4dc:	1d3a      	adds	r2, r7, #4
    a4de:	8812      	ldrh	r2, [r2, #0]
    a4e0:	811a      	strh	r2, [r3, #8]
	RGB_Ouptut.RR = red;
    a4e2:	4b0e      	ldr	r3, [pc, #56]	; (a51c <setRightRGB+0x68>)
    a4e4:	1dba      	adds	r2, r7, #6
    a4e6:	8812      	ldrh	r2, [r2, #0]
    a4e8:	80da      	strh	r2, [r3, #6]
#if defined(HW_3v4) || defined(HW_4v0)
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), red);
    a4ea:	1dbb      	adds	r3, r7, #6
    a4ec:	881a      	ldrh	r2, [r3, #0]
    a4ee:	4b0c      	ldr	r3, [pc, #48]	; (a520 <setRightRGB+0x6c>)
    a4f0:	2103      	movs	r1, #3
    a4f2:	0018      	movs	r0, r3
    a4f4:	4b0b      	ldr	r3, [pc, #44]	; (a524 <setRightRGB+0x70>)
    a4f6:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), green);
    a4f8:	1d3b      	adds	r3, r7, #4
    a4fa:	881a      	ldrh	r2, [r3, #0]
    a4fc:	4b08      	ldr	r3, [pc, #32]	; (a520 <setRightRGB+0x6c>)
    a4fe:	2101      	movs	r1, #1
    a500:	0018      	movs	r0, r3
    a502:	4b08      	ldr	r3, [pc, #32]	; (a524 <setRightRGB+0x70>)
    a504:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), blue);
    a506:	1cbb      	adds	r3, r7, #2
    a508:	881a      	ldrh	r2, [r3, #0]
    a50a:	4b05      	ldr	r3, [pc, #20]	; (a520 <setRightRGB+0x6c>)
    a50c:	2102      	movs	r1, #2
    a50e:	0018      	movs	r0, r3
    a510:	4b04      	ldr	r3, [pc, #16]	; (a524 <setRightRGB+0x70>)
    a512:	4798      	blx	r3
#if defined(HW_4v1)
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), red);
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), blue);
#endif
}
    a514:	46c0      	nop			; (mov r8, r8)
    a516:	46bd      	mov	sp, r7
    a518:	b003      	add	sp, #12
    a51a:	bd90      	pop	{r4, r7, pc}
    a51c:	20000394 	.word	0x20000394
    a520:	20000b40 	.word	0x20000b40
    a524:	0000572d 	.word	0x0000572d

0000a528 <setWhite>:

void setWhite(uint16_t white) {
    a528:	b580      	push	{r7, lr}
    a52a:	b082      	sub	sp, #8
    a52c:	af00      	add	r7, sp, #0
    a52e:	0002      	movs	r2, r0
    a530:	1dbb      	adds	r3, r7, #6
    a532:	801a      	strh	r2, [r3, #0]
	head = white;
    a534:	4b07      	ldr	r3, [pc, #28]	; (a554 <setWhite+0x2c>)
    a536:	1dba      	adds	r2, r7, #6
    a538:	8812      	ldrh	r2, [r2, #0]
    a53a:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), white);
    a53c:	1dbb      	adds	r3, r7, #6
    a53e:	881a      	ldrh	r2, [r3, #0]
    a540:	4b05      	ldr	r3, [pc, #20]	; (a558 <setWhite+0x30>)
    a542:	2100      	movs	r1, #0
    a544:	0018      	movs	r0, r3
    a546:	4b05      	ldr	r3, [pc, #20]	; (a55c <setWhite+0x34>)
    a548:	4798      	blx	r3
}
    a54a:	46c0      	nop			; (mov r8, r8)
    a54c:	46bd      	mov	sp, r7
    a54e:	b002      	add	sp, #8
    a550:	bd80      	pop	{r7, pc}
    a552:	46c0      	nop			; (mov r8, r8)
    a554:	20000fb2 	.word	0x20000fb2
    a558:	20001a10 	.word	0x20001a10
    a55c:	0000572d 	.word	0x0000572d

0000a560 <setRed>:

void setRed(uint16_t red) {
    a560:	b580      	push	{r7, lr}
    a562:	b082      	sub	sp, #8
    a564:	af00      	add	r7, sp, #0
    a566:	0002      	movs	r2, r0
    a568:	1dbb      	adds	r3, r7, #6
    a56a:	801a      	strh	r2, [r3, #0]
	brake = red;
    a56c:	4b07      	ldr	r3, [pc, #28]	; (a58c <setRed+0x2c>)
    a56e:	1dba      	adds	r2, r7, #6
    a570:	8812      	ldrh	r2, [r2, #0]
    a572:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (0), red);
    a574:	1dbb      	adds	r3, r7, #6
    a576:	881a      	ldrh	r2, [r3, #0]
    a578:	4b05      	ldr	r3, [pc, #20]	; (a590 <setRed+0x30>)
    a57a:	2100      	movs	r1, #0
    a57c:	0018      	movs	r0, r3
    a57e:	4b05      	ldr	r3, [pc, #20]	; (a594 <setRed+0x34>)
    a580:	4798      	blx	r3
}
    a582:	46c0      	nop			; (mov r8, r8)
    a584:	46bd      	mov	sp, r7
    a586:	b002      	add	sp, #8
    a588:	bd80      	pop	{r7, pc}
    a58a:	46c0      	nop			; (mov r8, r8)
    a58c:	20000390 	.word	0x20000390
    a590:	200018f8 	.word	0x200018f8
    a594:	0000572d 	.word	0x0000572d

0000a598 <setAux>:

void setAux(bool aux) {
    a598:	b580      	push	{r7, lr}
    a59a:	b082      	sub	sp, #8
    a59c:	af00      	add	r7, sp, #0
    a59e:	0002      	movs	r2, r0
    a5a0:	1dfb      	adds	r3, r7, #7
    a5a2:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(HORN_PIN,!aux);
    a5a4:	1dfb      	adds	r3, r7, #7
    a5a6:	781b      	ldrb	r3, [r3, #0]
    a5a8:	1e5a      	subs	r2, r3, #1
    a5aa:	4193      	sbcs	r3, r2
    a5ac:	b2db      	uxtb	r3, r3
    a5ae:	2201      	movs	r2, #1
    a5b0:	4053      	eors	r3, r2
    a5b2:	b2db      	uxtb	r3, r3
    a5b4:	1c1a      	adds	r2, r3, #0
    a5b6:	2301      	movs	r3, #1
    a5b8:	4013      	ands	r3, r2
    a5ba:	b2db      	uxtb	r3, r3
    a5bc:	0019      	movs	r1, r3
    a5be:	2008      	movs	r0, #8
    a5c0:	4b02      	ldr	r3, [pc, #8]	; (a5cc <setAux+0x34>)
    a5c2:	4798      	blx	r3
}
    a5c4:	46c0      	nop			; (mov r8, r8)
    a5c6:	46bd      	mov	sp, r7
    a5c8:	b002      	add	sp, #8
    a5ca:	bd80      	pop	{r7, pc}
    a5cc:	00009815 	.word	0x00009815

0000a5d0 <setCycleColor>:

struct RGB_Vals setCycleColor(uint16_t _upColor, uint16_t _downColor, int _cycle){
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b088      	sub	sp, #32
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	60f8      	str	r0, [r7, #12]
    a5d8:	0008      	movs	r0, r1
    a5da:	0011      	movs	r1, r2
    a5dc:	607b      	str	r3, [r7, #4]
    a5de:	230a      	movs	r3, #10
    a5e0:	18fb      	adds	r3, r7, r3
    a5e2:	1c02      	adds	r2, r0, #0
    a5e4:	801a      	strh	r2, [r3, #0]
    a5e6:	2308      	movs	r3, #8
    a5e8:	18fb      	adds	r3, r7, r3
    a5ea:	1c0a      	adds	r2, r1, #0
    a5ec:	801a      	strh	r2, [r3, #0]
	struct RGB_Vals color;
	if(_cycle == 0){
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d11f      	bne.n	a634 <setCycleColor+0x64>
		color.LR=_upColor;
    a5f4:	2314      	movs	r3, #20
    a5f6:	18fb      	adds	r3, r7, r3
    a5f8:	220a      	movs	r2, #10
    a5fa:	18ba      	adds	r2, r7, r2
    a5fc:	8812      	ldrh	r2, [r2, #0]
    a5fe:	801a      	strh	r2, [r3, #0]
		color.LG = 0;
    a600:	2314      	movs	r3, #20
    a602:	18fb      	adds	r3, r7, r3
    a604:	2200      	movs	r2, #0
    a606:	805a      	strh	r2, [r3, #2]
		color.LB = _downColor;
    a608:	2314      	movs	r3, #20
    a60a:	18fb      	adds	r3, r7, r3
    a60c:	2208      	movs	r2, #8
    a60e:	18ba      	adds	r2, r7, r2
    a610:	8812      	ldrh	r2, [r2, #0]
    a612:	809a      	strh	r2, [r3, #4]
		color.RR=_upColor;
    a614:	2314      	movs	r3, #20
    a616:	18fb      	adds	r3, r7, r3
    a618:	220a      	movs	r2, #10
    a61a:	18ba      	adds	r2, r7, r2
    a61c:	8812      	ldrh	r2, [r2, #0]
    a61e:	80da      	strh	r2, [r3, #6]
		color.RG = 0;
    a620:	2314      	movs	r3, #20
    a622:	18fb      	adds	r3, r7, r3
    a624:	2200      	movs	r2, #0
    a626:	811a      	strh	r2, [r3, #8]
		color.RB = _downColor;
    a628:	2314      	movs	r3, #20
    a62a:	18fb      	adds	r3, r7, r3
    a62c:	2208      	movs	r2, #8
    a62e:	18ba      	adds	r2, r7, r2
    a630:	8812      	ldrh	r2, [r2, #0]
    a632:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 1){
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	2b01      	cmp	r3, #1
    a638:	d11f      	bne.n	a67a <setCycleColor+0xaa>
		color.LR=_downColor;
    a63a:	2314      	movs	r3, #20
    a63c:	18fb      	adds	r3, r7, r3
    a63e:	2208      	movs	r2, #8
    a640:	18ba      	adds	r2, r7, r2
    a642:	8812      	ldrh	r2, [r2, #0]
    a644:	801a      	strh	r2, [r3, #0]
		color.LG = _upColor;
    a646:	2314      	movs	r3, #20
    a648:	18fb      	adds	r3, r7, r3
    a64a:	220a      	movs	r2, #10
    a64c:	18ba      	adds	r2, r7, r2
    a64e:	8812      	ldrh	r2, [r2, #0]
    a650:	805a      	strh	r2, [r3, #2]
		color.LB = 0;
    a652:	2314      	movs	r3, #20
    a654:	18fb      	adds	r3, r7, r3
    a656:	2200      	movs	r2, #0
    a658:	809a      	strh	r2, [r3, #4]
		color.RR=_downColor;
    a65a:	2314      	movs	r3, #20
    a65c:	18fb      	adds	r3, r7, r3
    a65e:	2208      	movs	r2, #8
    a660:	18ba      	adds	r2, r7, r2
    a662:	8812      	ldrh	r2, [r2, #0]
    a664:	80da      	strh	r2, [r3, #6]
		color.RG = _upColor;
    a666:	2314      	movs	r3, #20
    a668:	18fb      	adds	r3, r7, r3
    a66a:	220a      	movs	r2, #10
    a66c:	18ba      	adds	r2, r7, r2
    a66e:	8812      	ldrh	r2, [r2, #0]
    a670:	811a      	strh	r2, [r3, #8]
		color.RB = 0;
    a672:	2314      	movs	r3, #20
    a674:	18fb      	adds	r3, r7, r3
    a676:	2200      	movs	r2, #0
    a678:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 2){
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	2b02      	cmp	r3, #2
    a67e:	d11f      	bne.n	a6c0 <setCycleColor+0xf0>
		color.LR=0;
    a680:	2314      	movs	r3, #20
    a682:	18fb      	adds	r3, r7, r3
    a684:	2200      	movs	r2, #0
    a686:	801a      	strh	r2, [r3, #0]
		color.LG = _downColor;
    a688:	2314      	movs	r3, #20
    a68a:	18fb      	adds	r3, r7, r3
    a68c:	2208      	movs	r2, #8
    a68e:	18ba      	adds	r2, r7, r2
    a690:	8812      	ldrh	r2, [r2, #0]
    a692:	805a      	strh	r2, [r3, #2]
		color.LB = _upColor;
    a694:	2314      	movs	r3, #20
    a696:	18fb      	adds	r3, r7, r3
    a698:	220a      	movs	r2, #10
    a69a:	18ba      	adds	r2, r7, r2
    a69c:	8812      	ldrh	r2, [r2, #0]
    a69e:	809a      	strh	r2, [r3, #4]
		color.RR=0;
    a6a0:	2314      	movs	r3, #20
    a6a2:	18fb      	adds	r3, r7, r3
    a6a4:	2200      	movs	r2, #0
    a6a6:	80da      	strh	r2, [r3, #6]
		color.RG = _downColor;
    a6a8:	2314      	movs	r3, #20
    a6aa:	18fb      	adds	r3, r7, r3
    a6ac:	2208      	movs	r2, #8
    a6ae:	18ba      	adds	r2, r7, r2
    a6b0:	8812      	ldrh	r2, [r2, #0]
    a6b2:	811a      	strh	r2, [r3, #8]
		color.RB = _upColor;
    a6b4:	2314      	movs	r3, #20
    a6b6:	18fb      	adds	r3, r7, r3
    a6b8:	220a      	movs	r2, #10
    a6ba:	18ba      	adds	r2, r7, r2
    a6bc:	8812      	ldrh	r2, [r2, #0]
    a6be:	815a      	strh	r2, [r3, #10]
	}
	return color;
    a6c0:	68fa      	ldr	r2, [r7, #12]
    a6c2:	2314      	movs	r3, #20
    a6c4:	18fb      	adds	r3, r7, r3
    a6c6:	0010      	movs	r0, r2
    a6c8:	0019      	movs	r1, r3
    a6ca:	230c      	movs	r3, #12
    a6cc:	001a      	movs	r2, r3
    a6ce:	4b03      	ldr	r3, [pc, #12]	; (a6dc <setCycleColor+0x10c>)
    a6d0:	4798      	blx	r3
}
    a6d2:	68f8      	ldr	r0, [r7, #12]
    a6d4:	46bd      	mov	sp, r7
    a6d6:	b008      	add	sp, #32
    a6d8:	bd80      	pop	{r7, pc}
    a6da:	46c0      	nop			; (mov r8, r8)
    a6dc:	0001c15d 	.word	0x0001c15d

0000a6e0 <setConstBases>:

void setConstBases(){
    a6e0:	b580      	push	{r7, lr}
    a6e2:	af00      	add	r7, sp, #0
	ColorBase[MODE_ANALOG_STATIC] = COLOR_STATIC;
    a6e4:	4b25      	ldr	r3, [pc, #148]	; (a77c <setConstBases+0x9c>)
    a6e6:	2200      	movs	r2, #0
    a6e8:	701a      	strb	r2, [r3, #0]
	RateBase[MODE_ANALOG_STATIC] = RATE_STATIC;
    a6ea:	4b25      	ldr	r3, [pc, #148]	; (a780 <setConstBases+0xa0>)
    a6ec:	2200      	movs	r2, #0
    a6ee:	701a      	strb	r2, [r3, #0]
	BrightBase[MODE_ANALOG_STATIC] = BRIGHT_STATIC;
    a6f0:	4b24      	ldr	r3, [pc, #144]	; (a784 <setConstBases+0xa4>)
    a6f2:	2200      	movs	r2, #0
    a6f4:	701a      	strb	r2, [r3, #0]
	
	ColorBase[MODE_ANALOG_COLOR_CYCLE] = COLOR_COLOR_CYCLE;
    a6f6:	4b21      	ldr	r3, [pc, #132]	; (a77c <setConstBases+0x9c>)
    a6f8:	2201      	movs	r2, #1
    a6fa:	705a      	strb	r2, [r3, #1]
	RateBase[MODE_ANALOG_COLOR_CYCLE] = RATE_STATIC;
    a6fc:	4b20      	ldr	r3, [pc, #128]	; (a780 <setConstBases+0xa0>)
    a6fe:	2200      	movs	r2, #0
    a700:	705a      	strb	r2, [r3, #1]
	BrightBase[MODE_ANALOG_COLOR_CYCLE] = BRIGHT_STATIC;
    a702:	4b20      	ldr	r3, [pc, #128]	; (a784 <setConstBases+0xa4>)
    a704:	2200      	movs	r2, #0
    a706:	705a      	strb	r2, [r3, #1]
	
	ColorBase[MODE_ANALOG_COMPASS_CYCLE] = COLOR_COMPASS;
    a708:	4b1c      	ldr	r3, [pc, #112]	; (a77c <setConstBases+0x9c>)
    a70a:	2202      	movs	r2, #2
    a70c:	709a      	strb	r2, [r3, #2]
	RateBase[MODE_ANALOG_COMPASS_CYCLE] = RATE_STATIC;
    a70e:	4b1c      	ldr	r3, [pc, #112]	; (a780 <setConstBases+0xa0>)
    a710:	2200      	movs	r2, #0
    a712:	709a      	strb	r2, [r3, #2]
	BrightBase[MODE_ANALOG_COMPASS_CYCLE] = BRIGHT_STATIC;
    a714:	4b1b      	ldr	r3, [pc, #108]	; (a784 <setConstBases+0xa4>)
    a716:	2200      	movs	r2, #0
    a718:	709a      	strb	r2, [r3, #2]
	
	ColorBase[MODE_ANALOG_THROTTLE] = COLOR_THROTTLE;
    a71a:	4b18      	ldr	r3, [pc, #96]	; (a77c <setConstBases+0x9c>)
    a71c:	2206      	movs	r2, #6
    a71e:	70da      	strb	r2, [r3, #3]
	RateBase[MODE_ANALOG_THROTTLE] = RATE_STATIC;
    a720:	4b17      	ldr	r3, [pc, #92]	; (a780 <setConstBases+0xa0>)
    a722:	2200      	movs	r2, #0
    a724:	70da      	strb	r2, [r3, #3]
	BrightBase[MODE_ANALOG_THROTTLE] = BRIGHT_STATIC;
    a726:	4b17      	ldr	r3, [pc, #92]	; (a784 <setConstBases+0xa4>)
    a728:	2200      	movs	r2, #0
    a72a:	70da      	strb	r2, [r3, #3]
	
	ColorBase[MODE_ANALOG_RPM_CYCLE] = COLOR_COLOR_CYCLE;
    a72c:	4b13      	ldr	r3, [pc, #76]	; (a77c <setConstBases+0x9c>)
    a72e:	2201      	movs	r2, #1
    a730:	711a      	strb	r2, [r3, #4]
	RateBase[MODE_ANALOG_RPM_CYCLE] = RATE_RPM;
    a732:	4b13      	ldr	r3, [pc, #76]	; (a780 <setConstBases+0xa0>)
    a734:	2203      	movs	r2, #3
    a736:	711a      	strb	r2, [r3, #4]
	BrightBase[MODE_ANALOG_RPM_CYCLE] = BRIGHT_RPM;
    a738:	4b12      	ldr	r3, [pc, #72]	; (a784 <setConstBases+0xa4>)
    a73a:	2203      	movs	r2, #3
    a73c:	711a      	strb	r2, [r3, #4]
	
	ColorBase[MODE_ANALOG_RPM_THROTTLE] = COLOR_THROTTLE;
    a73e:	4b0f      	ldr	r3, [pc, #60]	; (a77c <setConstBases+0x9c>)
    a740:	2206      	movs	r2, #6
    a742:	715a      	strb	r2, [r3, #5]
	RateBase[MODE_ANALOG_RPM_THROTTLE] = RATE_STATIC;
    a744:	4b0e      	ldr	r3, [pc, #56]	; (a780 <setConstBases+0xa0>)
    a746:	2200      	movs	r2, #0
    a748:	715a      	strb	r2, [r3, #5]
	BrightBase[MODE_ANALOG_RPM_THROTTLE] = BRIGHT_RPM;
    a74a:	4b0e      	ldr	r3, [pc, #56]	; (a784 <setConstBases+0xa4>)
    a74c:	2203      	movs	r2, #3
    a74e:	715a      	strb	r2, [r3, #5]
	
	ColorBase[MODE_ANALOG_X_ACCEL] = COLOR_COLOR_CYCLE;
    a750:	4b0a      	ldr	r3, [pc, #40]	; (a77c <setConstBases+0x9c>)
    a752:	2201      	movs	r2, #1
    a754:	719a      	strb	r2, [r3, #6]
	RateBase[MODE_ANALOG_X_ACCEL] = RATE_STATIC;
    a756:	4b0a      	ldr	r3, [pc, #40]	; (a780 <setConstBases+0xa0>)
    a758:	2200      	movs	r2, #0
    a75a:	719a      	strb	r2, [r3, #6]
	BrightBase[MODE_ANALOG_X_ACCEL] = BRIGHT_X_ACCEL;
    a75c:	4b09      	ldr	r3, [pc, #36]	; (a784 <setConstBases+0xa4>)
    a75e:	2205      	movs	r2, #5
    a760:	719a      	strb	r2, [r3, #6]
	
	ColorBase[MODE_ANALOG_Y_ACCEL] = COLOR_Y_ACCEL;
    a762:	4b06      	ldr	r3, [pc, #24]	; (a77c <setConstBases+0x9c>)
    a764:	2209      	movs	r2, #9
    a766:	71da      	strb	r2, [r3, #7]
	RateBase[MODE_ANALOG_Y_ACCEL] = RATE_STATIC;
    a768:	4b05      	ldr	r3, [pc, #20]	; (a780 <setConstBases+0xa0>)
    a76a:	2200      	movs	r2, #0
    a76c:	71da      	strb	r2, [r3, #7]
	BrightBase[MODE_ANALOG_Y_ACCEL] = BRIGHT_STATIC;
    a76e:	4b05      	ldr	r3, [pc, #20]	; (a784 <setConstBases+0xa4>)
    a770:	2200      	movs	r2, #0
    a772:	71da      	strb	r2, [r3, #7]
}
    a774:	46c0      	nop			; (mov r8, r8)
    a776:	46bd      	mov	sp, r7
    a778:	bd80      	pop	{r7, pc}
    a77a:	46c0      	nop			; (mov r8, r8)
    a77c:	20000094 	.word	0x20000094
    a780:	200000ac 	.word	0x200000ac
    a784:	200000a0 	.word	0x200000a0

0000a788 <ERROR_LEDs>:

// Flash the side LEDs red until restart
// 0: Red, 1: Blue, 2:Green, 3: Teal, 4: Yellow, 5:Purple
void ERROR_LEDs(uint8_t error_type, uint8_t duration){
    a788:	b590      	push	{r4, r7, lr}
    a78a:	b08b      	sub	sp, #44	; 0x2c
    a78c:	af02      	add	r7, sp, #8
    a78e:	0002      	movs	r2, r0
    a790:	1dfb      	adds	r3, r7, #7
    a792:	701a      	strb	r2, [r3, #0]
    a794:	1dbb      	adds	r3, r7, #6
    a796:	1c0a      	adds	r2, r1, #0
    a798:	701a      	strb	r2, [r3, #0]
	uint32_t error_timer = millis();
    a79a:	4b92      	ldr	r3, [pc, #584]	; (a9e4 <ERROR_LEDs+0x25c>)
    a79c:	4798      	blx	r3
    a79e:	0003      	movs	r3, r0
    a7a0:	613b      	str	r3, [r7, #16]
	uint32_t flash_timer = millis();
    a7a2:	4b90      	ldr	r3, [pc, #576]	; (a9e4 <ERROR_LEDs+0x25c>)
    a7a4:	4798      	blx	r3
    a7a6:	0003      	movs	r3, r0
    a7a8:	60fb      	str	r3, [r7, #12]
	uint32_t dur;
	switch(duration){
    a7aa:	1dbb      	adds	r3, r7, #6
    a7ac:	781b      	ldrb	r3, [r3, #0]
    a7ae:	2b01      	cmp	r3, #1
    a7b0:	d007      	beq.n	a7c2 <ERROR_LEDs+0x3a>
    a7b2:	2b02      	cmp	r3, #2
    a7b4:	d008      	beq.n	a7c8 <ERROR_LEDs+0x40>
    a7b6:	2b00      	cmp	r3, #0
    a7b8:	d10a      	bne.n	a7d0 <ERROR_LEDs+0x48>
		case SHORT_ERROR:
			dur = 2000;
    a7ba:	23fa      	movs	r3, #250	; 0xfa
    a7bc:	00db      	lsls	r3, r3, #3
    a7be:	61fb      	str	r3, [r7, #28]
			break;
    a7c0:	e006      	b.n	a7d0 <ERROR_LEDs+0x48>
		case LONG_ERROR:
			dur = 5000;
    a7c2:	4b89      	ldr	r3, [pc, #548]	; (a9e8 <ERROR_LEDs+0x260>)
    a7c4:	61fb      	str	r3, [r7, #28]
			break;
    a7c6:	e003      	b.n	a7d0 <ERROR_LEDs+0x48>
		case PERMINENT_ERROR:
			dur = UINT32_MAX;
    a7c8:	2301      	movs	r3, #1
    a7ca:	425b      	negs	r3, r3
    a7cc:	61fb      	str	r3, [r7, #28]
			break;
    a7ce:	46c0      	nop			; (mov r8, r8)
	}

	uint16_t tempR = 0, tempG = 0, tempB = 0;
    a7d0:	231a      	movs	r3, #26
    a7d2:	18fb      	adds	r3, r7, r3
    a7d4:	2200      	movs	r2, #0
    a7d6:	801a      	strh	r2, [r3, #0]
    a7d8:	2318      	movs	r3, #24
    a7da:	18fb      	adds	r3, r7, r3
    a7dc:	2200      	movs	r2, #0
    a7de:	801a      	strh	r2, [r3, #0]
    a7e0:	2316      	movs	r3, #22
    a7e2:	18fb      	adds	r3, r7, r3
    a7e4:	2200      	movs	r2, #0
    a7e6:	801a      	strh	r2, [r3, #0]
	if(error_type == 0 || error_type == 4  || error_type == 5)
    a7e8:	1dfb      	adds	r3, r7, #7
    a7ea:	781b      	ldrb	r3, [r3, #0]
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d007      	beq.n	a800 <ERROR_LEDs+0x78>
    a7f0:	1dfb      	adds	r3, r7, #7
    a7f2:	781b      	ldrb	r3, [r3, #0]
    a7f4:	2b04      	cmp	r3, #4
    a7f6:	d003      	beq.n	a800 <ERROR_LEDs+0x78>
    a7f8:	1dfb      	adds	r3, r7, #7
    a7fa:	781b      	ldrb	r3, [r3, #0]
    a7fc:	2b05      	cmp	r3, #5
    a7fe:	d104      	bne.n	a80a <ERROR_LEDs+0x82>
		tempR = 0xFFFF;
    a800:	231a      	movs	r3, #26
    a802:	18fb      	adds	r3, r7, r3
    a804:	2201      	movs	r2, #1
    a806:	4252      	negs	r2, r2
    a808:	801a      	strh	r2, [r3, #0]
	if(error_type >= 2 && error_type <= 4)
    a80a:	1dfb      	adds	r3, r7, #7
    a80c:	781b      	ldrb	r3, [r3, #0]
    a80e:	2b01      	cmp	r3, #1
    a810:	d908      	bls.n	a824 <ERROR_LEDs+0x9c>
    a812:	1dfb      	adds	r3, r7, #7
    a814:	781b      	ldrb	r3, [r3, #0]
    a816:	2b04      	cmp	r3, #4
    a818:	d804      	bhi.n	a824 <ERROR_LEDs+0x9c>
		tempG = 0xFFFF;
    a81a:	2318      	movs	r3, #24
    a81c:	18fb      	adds	r3, r7, r3
    a81e:	2201      	movs	r2, #1
    a820:	4252      	negs	r2, r2
    a822:	801a      	strh	r2, [r3, #0]
	if(error_type == 1 || error_type == 3 || error_type == 5)
    a824:	1dfb      	adds	r3, r7, #7
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	2b01      	cmp	r3, #1
    a82a:	d008      	beq.n	a83e <ERROR_LEDs+0xb6>
    a82c:	1dfb      	adds	r3, r7, #7
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2b03      	cmp	r3, #3
    a832:	d004      	beq.n	a83e <ERROR_LEDs+0xb6>
    a834:	1dfb      	adds	r3, r7, #7
    a836:	781b      	ldrb	r3, [r3, #0]
    a838:	2b05      	cmp	r3, #5
    a83a:	d000      	beq.n	a83e <ERROR_LEDs+0xb6>
    a83c:	e0be      	b.n	a9bc <ERROR_LEDs+0x234>
		tempB = 0xFFFF;
    a83e:	2316      	movs	r3, #22
    a840:	18fb      	adds	r3, r7, r3
    a842:	2201      	movs	r2, #1
    a844:	4252      	negs	r2, r2
    a846:	801a      	strh	r2, [r3, #0]

	while(!check_timer_expired(&error_timer, dur)){
    a848:	e0b8      	b.n	a9bc <ERROR_LEDs+0x234>
		if(configured_RGB_led_type == RGB_ANALOG){
    a84a:	4b68      	ldr	r3, [pc, #416]	; (a9ec <ERROR_LEDs+0x264>)
    a84c:	781b      	ldrb	r3, [r3, #0]
    a84e:	2b00      	cmp	r3, #0
    a850:	d10a      	bne.n	a868 <ERROR_LEDs+0xe0>
			setLeftRGB(0,0,0);
    a852:	2200      	movs	r2, #0
    a854:	2100      	movs	r1, #0
    a856:	2000      	movs	r0, #0
    a858:	4b65      	ldr	r3, [pc, #404]	; (a9f0 <ERROR_LEDs+0x268>)
    a85a:	4798      	blx	r3
			setRightRGB(0,0,0);
    a85c:	2200      	movs	r2, #0
    a85e:	2100      	movs	r1, #0
    a860:	2000      	movs	r0, #0
    a862:	4b64      	ldr	r3, [pc, #400]	; (a9f4 <ERROR_LEDs+0x26c>)
    a864:	4798      	blx	r3
    a866:	e017      	b.n	a898 <ERROR_LEDs+0x110>
		} else {
			setDigitalHue(0,10,0,0,0);
    a868:	2300      	movs	r3, #0
    a86a:	9300      	str	r3, [sp, #0]
    a86c:	2300      	movs	r3, #0
    a86e:	2200      	movs	r2, #0
    a870:	210a      	movs	r1, #10
    a872:	2000      	movs	r0, #0
    a874:	4c60      	ldr	r4, [pc, #384]	; (a9f8 <ERROR_LEDs+0x270>)
    a876:	47a0      	blx	r4
			set_left_gnd();
    a878:	4b60      	ldr	r3, [pc, #384]	; (a9fc <ERROR_LEDs+0x274>)
    a87a:	4798      	blx	r3
			set_right_gnd();
    a87c:	4b60      	ldr	r3, [pc, #384]	; (aa00 <ERROR_LEDs+0x278>)
    a87e:	4798      	blx	r3
			L_digital_write(led_num);
    a880:	4b60      	ldr	r3, [pc, #384]	; (aa04 <ERROR_LEDs+0x27c>)
    a882:	781b      	ldrb	r3, [r3, #0]
    a884:	b29b      	uxth	r3, r3
    a886:	0018      	movs	r0, r3
    a888:	4b5f      	ldr	r3, [pc, #380]	; (aa08 <ERROR_LEDs+0x280>)
    a88a:	4798      	blx	r3
			L_digital_write(led_num);
    a88c:	4b5d      	ldr	r3, [pc, #372]	; (aa04 <ERROR_LEDs+0x27c>)
    a88e:	781b      	ldrb	r3, [r3, #0]
    a890:	b29b      	uxth	r3, r3
    a892:	0018      	movs	r0, r3
    a894:	4b5c      	ldr	r3, [pc, #368]	; (aa08 <ERROR_LEDs+0x280>)
    a896:	4798      	blx	r3
		//setWhite(0);
#if  defined(HW_4v0) || defined(HW_4v1)
		port_pin_set_output_level(STAT_LED, false);
#endif

		while(!check_timer_expired(&flash_timer, 500)) {}
    a898:	46c0      	nop			; (mov r8, r8)
    a89a:	23fa      	movs	r3, #250	; 0xfa
    a89c:	005a      	lsls	r2, r3, #1
    a89e:	230c      	movs	r3, #12
    a8a0:	18fb      	adds	r3, r7, r3
    a8a2:	0011      	movs	r1, r2
    a8a4:	0018      	movs	r0, r3
    a8a6:	4b59      	ldr	r3, [pc, #356]	; (aa0c <ERROR_LEDs+0x284>)
    a8a8:	4798      	blx	r3
    a8aa:	0003      	movs	r3, r0
    a8ac:	001a      	movs	r2, r3
    a8ae:	2301      	movs	r3, #1
    a8b0:	4053      	eors	r3, r2
    a8b2:	b2db      	uxtb	r3, r3
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	d1f0      	bne.n	a89a <ERROR_LEDs+0x112>
		flash_timer = millis();
    a8b8:	4b4a      	ldr	r3, [pc, #296]	; (a9e4 <ERROR_LEDs+0x25c>)
    a8ba:	4798      	blx	r3
    a8bc:	0003      	movs	r3, r0
    a8be:	60fb      	str	r3, [r7, #12]
		
		if(configured_RGB_led_type == RGB_ANALOG){
    a8c0:	4b4a      	ldr	r3, [pc, #296]	; (a9ec <ERROR_LEDs+0x264>)
    a8c2:	781b      	ldrb	r3, [r3, #0]
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d118      	bne.n	a8fa <ERROR_LEDs+0x172>
			setLeftRGB(tempR,tempG,tempB);
    a8c8:	2316      	movs	r3, #22
    a8ca:	18fb      	adds	r3, r7, r3
    a8cc:	881a      	ldrh	r2, [r3, #0]
    a8ce:	2318      	movs	r3, #24
    a8d0:	18fb      	adds	r3, r7, r3
    a8d2:	8819      	ldrh	r1, [r3, #0]
    a8d4:	231a      	movs	r3, #26
    a8d6:	18fb      	adds	r3, r7, r3
    a8d8:	881b      	ldrh	r3, [r3, #0]
    a8da:	0018      	movs	r0, r3
    a8dc:	4b44      	ldr	r3, [pc, #272]	; (a9f0 <ERROR_LEDs+0x268>)
    a8de:	4798      	blx	r3
			setRightRGB(tempR,tempG,tempB);
    a8e0:	2316      	movs	r3, #22
    a8e2:	18fb      	adds	r3, r7, r3
    a8e4:	881a      	ldrh	r2, [r3, #0]
    a8e6:	2318      	movs	r3, #24
    a8e8:	18fb      	adds	r3, r7, r3
    a8ea:	8819      	ldrh	r1, [r3, #0]
    a8ec:	231a      	movs	r3, #26
    a8ee:	18fb      	adds	r3, r7, r3
    a8f0:	881b      	ldrh	r3, [r3, #0]
    a8f2:	0018      	movs	r0, r3
    a8f4:	4b3f      	ldr	r3, [pc, #252]	; (a9f4 <ERROR_LEDs+0x26c>)
    a8f6:	4798      	blx	r3
    a8f8:	e04e      	b.n	a998 <ERROR_LEDs+0x210>
		} else {
			switch(error_type){
    a8fa:	1dfb      	adds	r3, r7, #7
    a8fc:	781b      	ldrb	r3, [r3, #0]
    a8fe:	2b05      	cmp	r3, #5
    a900:	d83a      	bhi.n	a978 <ERROR_LEDs+0x1f0>
    a902:	009a      	lsls	r2, r3, #2
    a904:	4b42      	ldr	r3, [pc, #264]	; (aa10 <ERROR_LEDs+0x288>)
    a906:	18d3      	adds	r3, r2, r3
    a908:	681b      	ldr	r3, [r3, #0]
    a90a:	469f      	mov	pc, r3
				case 2:
					setDigitalHue(0,15,0,31,0);// Green
    a90c:	2300      	movs	r3, #0
    a90e:	9300      	str	r3, [sp, #0]
    a910:	231f      	movs	r3, #31
    a912:	2200      	movs	r2, #0
    a914:	210f      	movs	r1, #15
    a916:	2000      	movs	r0, #0
    a918:	4c37      	ldr	r4, [pc, #220]	; (a9f8 <ERROR_LEDs+0x270>)
    a91a:	47a0      	blx	r4
					break;
    a91c:	e02c      	b.n	a978 <ERROR_LEDs+0x1f0>
				case 4:
					setDigitalHue(1910,15,0,31,0);// Yellow
    a91e:	483d      	ldr	r0, [pc, #244]	; (aa14 <ERROR_LEDs+0x28c>)
    a920:	2300      	movs	r3, #0
    a922:	9300      	str	r3, [sp, #0]
    a924:	231f      	movs	r3, #31
    a926:	2200      	movs	r2, #0
    a928:	210f      	movs	r1, #15
    a92a:	4c33      	ldr	r4, [pc, #204]	; (a9f8 <ERROR_LEDs+0x270>)
    a92c:	47a0      	blx	r4
					break;
    a92e:	e023      	b.n	a978 <ERROR_LEDs+0x1f0>
				case 0:
					setDigitalHue(3820,15,0,31,0);// Red
    a930:	4839      	ldr	r0, [pc, #228]	; (aa18 <ERROR_LEDs+0x290>)
    a932:	2300      	movs	r3, #0
    a934:	9300      	str	r3, [sp, #0]
    a936:	231f      	movs	r3, #31
    a938:	2200      	movs	r2, #0
    a93a:	210f      	movs	r1, #15
    a93c:	4c2e      	ldr	r4, [pc, #184]	; (a9f8 <ERROR_LEDs+0x270>)
    a93e:	47a0      	blx	r4
					break;
    a940:	e01a      	b.n	a978 <ERROR_LEDs+0x1f0>
				case 5:
					setDigitalHue(5730,15,0,31,0);// Purple
    a942:	4836      	ldr	r0, [pc, #216]	; (aa1c <ERROR_LEDs+0x294>)
    a944:	2300      	movs	r3, #0
    a946:	9300      	str	r3, [sp, #0]
    a948:	231f      	movs	r3, #31
    a94a:	2200      	movs	r2, #0
    a94c:	210f      	movs	r1, #15
    a94e:	4c2a      	ldr	r4, [pc, #168]	; (a9f8 <ERROR_LEDs+0x270>)
    a950:	47a0      	blx	r4
					break;
    a952:	e011      	b.n	a978 <ERROR_LEDs+0x1f0>
				case 1:
					setDigitalHue(7640,15,0,31,0);// Blue
    a954:	4832      	ldr	r0, [pc, #200]	; (aa20 <ERROR_LEDs+0x298>)
    a956:	2300      	movs	r3, #0
    a958:	9300      	str	r3, [sp, #0]
    a95a:	231f      	movs	r3, #31
    a95c:	2200      	movs	r2, #0
    a95e:	210f      	movs	r1, #15
    a960:	4c25      	ldr	r4, [pc, #148]	; (a9f8 <ERROR_LEDs+0x270>)
    a962:	47a0      	blx	r4
					break;
    a964:	e008      	b.n	a978 <ERROR_LEDs+0x1f0>
				case 3:
					setDigitalHue(9550,15,0,31,0);// Teal
    a966:	482f      	ldr	r0, [pc, #188]	; (aa24 <ERROR_LEDs+0x29c>)
    a968:	2300      	movs	r3, #0
    a96a:	9300      	str	r3, [sp, #0]
    a96c:	231f      	movs	r3, #31
    a96e:	2200      	movs	r2, #0
    a970:	210f      	movs	r1, #15
    a972:	4c21      	ldr	r4, [pc, #132]	; (a9f8 <ERROR_LEDs+0x270>)
    a974:	47a0      	blx	r4
					break;
    a976:	46c0      	nop			; (mov r8, r8)
	}
		set_left_gnd();
    a978:	4b20      	ldr	r3, [pc, #128]	; (a9fc <ERROR_LEDs+0x274>)
    a97a:	4798      	blx	r3
		set_right_gnd();
    a97c:	4b20      	ldr	r3, [pc, #128]	; (aa00 <ERROR_LEDs+0x278>)
    a97e:	4798      	blx	r3
		L_digital_write(led_num);
    a980:	4b20      	ldr	r3, [pc, #128]	; (aa04 <ERROR_LEDs+0x27c>)
    a982:	781b      	ldrb	r3, [r3, #0]
    a984:	b29b      	uxth	r3, r3
    a986:	0018      	movs	r0, r3
    a988:	4b1f      	ldr	r3, [pc, #124]	; (aa08 <ERROR_LEDs+0x280>)
    a98a:	4798      	blx	r3
		R_digital_write(led_num);
    a98c:	4b1d      	ldr	r3, [pc, #116]	; (aa04 <ERROR_LEDs+0x27c>)
    a98e:	781b      	ldrb	r3, [r3, #0]
    a990:	b29b      	uxth	r3, r3
    a992:	0018      	movs	r0, r3
    a994:	4b24      	ldr	r3, [pc, #144]	; (aa28 <ERROR_LEDs+0x2a0>)
    a996:	4798      	blx	r3
		//setWhite(0xFFFF);
#if  defined(HW_4v0) || defined(HW_4v1)
		port_pin_set_output_level(STAT_LED, true);
#endif

		while(!check_timer_expired(&flash_timer, 250)) {}
    a998:	46c0      	nop			; (mov r8, r8)
    a99a:	230c      	movs	r3, #12
    a99c:	18fb      	adds	r3, r7, r3
    a99e:	21fa      	movs	r1, #250	; 0xfa
    a9a0:	0018      	movs	r0, r3
    a9a2:	4b1a      	ldr	r3, [pc, #104]	; (aa0c <ERROR_LEDs+0x284>)
    a9a4:	4798      	blx	r3
    a9a6:	0003      	movs	r3, r0
    a9a8:	001a      	movs	r2, r3
    a9aa:	2301      	movs	r3, #1
    a9ac:	4053      	eors	r3, r2
    a9ae:	b2db      	uxtb	r3, r3
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d1f2      	bne.n	a99a <ERROR_LEDs+0x212>
		flash_timer = millis();
    a9b4:	4b0b      	ldr	r3, [pc, #44]	; (a9e4 <ERROR_LEDs+0x25c>)
    a9b6:	4798      	blx	r3
    a9b8:	0003      	movs	r3, r0
    a9ba:	60fb      	str	r3, [r7, #12]
	while(!check_timer_expired(&error_timer, dur)){
    a9bc:	69fa      	ldr	r2, [r7, #28]
    a9be:	2310      	movs	r3, #16
    a9c0:	18fb      	adds	r3, r7, r3
    a9c2:	0011      	movs	r1, r2
    a9c4:	0018      	movs	r0, r3
    a9c6:	4b11      	ldr	r3, [pc, #68]	; (aa0c <ERROR_LEDs+0x284>)
    a9c8:	4798      	blx	r3
    a9ca:	0003      	movs	r3, r0
    a9cc:	001a      	movs	r2, r3
    a9ce:	2301      	movs	r3, #1
    a9d0:	4053      	eors	r3, r2
    a9d2:	b2db      	uxtb	r3, r3
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d000      	beq.n	a9da <ERROR_LEDs+0x252>
    a9d8:	e737      	b.n	a84a <ERROR_LEDs+0xc2>
	}
}
    a9da:	46c0      	nop			; (mov r8, r8)
    a9dc:	46bd      	mov	sp, r7
    a9de:	b009      	add	sp, #36	; 0x24
    a9e0:	bd90      	pop	{r4, r7, pc}
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	00009f65 	.word	0x00009f65
    a9e8:	00001388 	.word	0x00001388
    a9ec:	200006c0 	.word	0x200006c0
    a9f0:	0000a439 	.word	0x0000a439
    a9f4:	0000a4b5 	.word	0x0000a4b5
    a9f8:	0000e1d9 	.word	0x0000e1d9
    a9fc:	0000a17d 	.word	0x0000a17d
    aa00:	0000a195 	.word	0x0000a195
    aa04:	200000e0 	.word	0x200000e0
    aa08:	0000e7cd 	.word	0x0000e7cd
    aa0c:	00009fbd 	.word	0x00009fbd
    aa10:	0001c63c 	.word	0x0001c63c
    aa14:	00000776 	.word	0x00000776
    aa18:	00000eec 	.word	0x00000eec
    aa1c:	00001662 	.word	0x00001662
    aa20:	00001dd8 	.word	0x00001dd8
    aa24:	0000254e 	.word	0x0000254e
    aa28:	0000e7fd 	.word	0x0000e7fd

0000aa2c <BlinkTail>:

//brightnes: 0 - 0xFFFF
//rate: 1-10
uint32_t blink_off_time = 0;
uint32_t blink_on_time = 0;
void BlinkTail(uint16_t tail_brightness, float rate){
    aa2c:	b580      	push	{r7, lr}
    aa2e:	b082      	sub	sp, #8
    aa30:	af00      	add	r7, sp, #0
    aa32:	0002      	movs	r2, r0
    aa34:	6039      	str	r1, [r7, #0]
    aa36:	1dbb      	adds	r3, r7, #6
    aa38:	801a      	strh	r2, [r3, #0]
	blink_off_time = 300/(rate/3);
    aa3a:	4b32      	ldr	r3, [pc, #200]	; (ab04 <BlinkTail+0xd8>)
    aa3c:	4932      	ldr	r1, [pc, #200]	; (ab08 <BlinkTail+0xdc>)
    aa3e:	6838      	ldr	r0, [r7, #0]
    aa40:	4798      	blx	r3
    aa42:	1c03      	adds	r3, r0, #0
    aa44:	1c1a      	adds	r2, r3, #0
    aa46:	4b2f      	ldr	r3, [pc, #188]	; (ab04 <BlinkTail+0xd8>)
    aa48:	1c11      	adds	r1, r2, #0
    aa4a:	4830      	ldr	r0, [pc, #192]	; (ab0c <BlinkTail+0xe0>)
    aa4c:	4798      	blx	r3
    aa4e:	1c03      	adds	r3, r0, #0
    aa50:	1c1a      	adds	r2, r3, #0
    aa52:	4b2f      	ldr	r3, [pc, #188]	; (ab10 <BlinkTail+0xe4>)
    aa54:	1c10      	adds	r0, r2, #0
    aa56:	4798      	blx	r3
    aa58:	0002      	movs	r2, r0
    aa5a:	4b2e      	ldr	r3, [pc, #184]	; (ab14 <BlinkTail+0xe8>)
    aa5c:	601a      	str	r2, [r3, #0]
	blink_on_time = 100/(rate/3);
    aa5e:	4b29      	ldr	r3, [pc, #164]	; (ab04 <BlinkTail+0xd8>)
    aa60:	4929      	ldr	r1, [pc, #164]	; (ab08 <BlinkTail+0xdc>)
    aa62:	6838      	ldr	r0, [r7, #0]
    aa64:	4798      	blx	r3
    aa66:	1c03      	adds	r3, r0, #0
    aa68:	1c1a      	adds	r2, r3, #0
    aa6a:	4b26      	ldr	r3, [pc, #152]	; (ab04 <BlinkTail+0xd8>)
    aa6c:	1c11      	adds	r1, r2, #0
    aa6e:	482a      	ldr	r0, [pc, #168]	; (ab18 <BlinkTail+0xec>)
    aa70:	4798      	blx	r3
    aa72:	1c03      	adds	r3, r0, #0
    aa74:	1c1a      	adds	r2, r3, #0
    aa76:	4b26      	ldr	r3, [pc, #152]	; (ab10 <BlinkTail+0xe4>)
    aa78:	1c10      	adds	r0, r2, #0
    aa7a:	4798      	blx	r3
    aa7c:	0002      	movs	r2, r0
    aa7e:	4b27      	ldr	r3, [pc, #156]	; (ab1c <BlinkTail+0xf0>)
    aa80:	601a      	str	r2, [r3, #0]
	static bool tail_on = false;
	static uint32_t timer = 0;
	if((tail_on && check_timer_expired(&timer, blink_on_time)) ||
    aa82:	4b27      	ldr	r3, [pc, #156]	; (ab20 <BlinkTail+0xf4>)
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	2b00      	cmp	r3, #0
    aa88:	d008      	beq.n	aa9c <BlinkTail+0x70>
    aa8a:	4b24      	ldr	r3, [pc, #144]	; (ab1c <BlinkTail+0xf0>)
    aa8c:	681a      	ldr	r2, [r3, #0]
    aa8e:	4b25      	ldr	r3, [pc, #148]	; (ab24 <BlinkTail+0xf8>)
    aa90:	0011      	movs	r1, r2
    aa92:	0018      	movs	r0, r3
    aa94:	4b24      	ldr	r3, [pc, #144]	; (ab28 <BlinkTail+0xfc>)
    aa96:	4798      	blx	r3
    aa98:	1e03      	subs	r3, r0, #0
    aa9a:	d10f      	bne.n	aabc <BlinkTail+0x90>
		(!tail_on && check_timer_expired(&timer, blink_off_time))){
    aa9c:	4b20      	ldr	r3, [pc, #128]	; (ab20 <BlinkTail+0xf4>)
    aa9e:	781b      	ldrb	r3, [r3, #0]
    aaa0:	2201      	movs	r2, #1
    aaa2:	4053      	eors	r3, r2
    aaa4:	b2db      	uxtb	r3, r3
	if((tail_on && check_timer_expired(&timer, blink_on_time)) ||
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d01b      	beq.n	aae2 <BlinkTail+0xb6>
		(!tail_on && check_timer_expired(&timer, blink_off_time))){
    aaaa:	4b1a      	ldr	r3, [pc, #104]	; (ab14 <BlinkTail+0xe8>)
    aaac:	681a      	ldr	r2, [r3, #0]
    aaae:	4b1d      	ldr	r3, [pc, #116]	; (ab24 <BlinkTail+0xf8>)
    aab0:	0011      	movs	r1, r2
    aab2:	0018      	movs	r0, r3
    aab4:	4b1c      	ldr	r3, [pc, #112]	; (ab28 <BlinkTail+0xfc>)
    aab6:	4798      	blx	r3
    aab8:	1e03      	subs	r3, r0, #0
    aaba:	d012      	beq.n	aae2 <BlinkTail+0xb6>
		tail_on = !tail_on;
    aabc:	4b18      	ldr	r3, [pc, #96]	; (ab20 <BlinkTail+0xf4>)
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	1e5a      	subs	r2, r3, #1
    aac2:	4193      	sbcs	r3, r2
    aac4:	b2db      	uxtb	r3, r3
    aac6:	2201      	movs	r2, #1
    aac8:	4053      	eors	r3, r2
    aaca:	b2db      	uxtb	r3, r3
    aacc:	1c1a      	adds	r2, r3, #0
    aace:	2301      	movs	r3, #1
    aad0:	4013      	ands	r3, r2
    aad2:	b2da      	uxtb	r2, r3
    aad4:	4b12      	ldr	r3, [pc, #72]	; (ab20 <BlinkTail+0xf4>)
    aad6:	701a      	strb	r2, [r3, #0]
		timer = millis();
    aad8:	4b14      	ldr	r3, [pc, #80]	; (ab2c <BlinkTail+0x100>)
    aada:	4798      	blx	r3
    aadc:	0002      	movs	r2, r0
    aade:	4b11      	ldr	r3, [pc, #68]	; (ab24 <BlinkTail+0xf8>)
    aae0:	601a      	str	r2, [r3, #0]
	}

	if(tail_on){
    aae2:	4b0f      	ldr	r3, [pc, #60]	; (ab20 <BlinkTail+0xf4>)
    aae4:	781b      	ldrb	r3, [r3, #0]
    aae6:	2b00      	cmp	r3, #0
    aae8:	d005      	beq.n	aaf6 <BlinkTail+0xca>
		setRed(tail_brightness);
    aaea:	1dbb      	adds	r3, r7, #6
    aaec:	881b      	ldrh	r3, [r3, #0]
    aaee:	0018      	movs	r0, r3
    aaf0:	4b0f      	ldr	r3, [pc, #60]	; (ab30 <BlinkTail+0x104>)
    aaf2:	4798      	blx	r3
	}else{
		setRed(0);
	}
}
    aaf4:	e002      	b.n	aafc <BlinkTail+0xd0>
		setRed(0);
    aaf6:	2000      	movs	r0, #0
    aaf8:	4b0d      	ldr	r3, [pc, #52]	; (ab30 <BlinkTail+0x104>)
    aafa:	4798      	blx	r3
}
    aafc:	46c0      	nop			; (mov r8, r8)
    aafe:	46bd      	mov	sp, r7
    ab00:	b002      	add	sp, #8
    ab02:	bd80      	pop	{r7, pc}
    ab04:	00019941 	.word	0x00019941
    ab08:	40400000 	.word	0x40400000
    ab0c:	43960000 	.word	0x43960000
    ab10:	000195b1 	.word	0x000195b1
    ab14:	200003d4 	.word	0x200003d4
    ab18:	42c80000 	.word	0x42c80000
    ab1c:	200003d8 	.word	0x200003d8
    ab20:	2000045d 	.word	0x2000045d
    ab24:	20000460 	.word	0x20000460
    ab28:	00009fbd 	.word	0x00009fbd
    ab2c:	00009f65 	.word	0x00009f65
    ab30:	0000a561 	.word	0x0000a561

0000ab34 <AnalogSideLights>:

void AnalogSideLights(){
    ab34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab36:	b087      	sub	sp, #28
    ab38:	af00      	add	r7, sp, #0
	// brightness is a value from 0 to 1
	static float output_brightness = 0;

	// Variable for controlling the rate or sensitivity in applicable modes
	// brightness is a value from 0 to 1
	float output_rate_sens = 0;
    ab3a:	2300      	movs	r3, #0
    ab3c:	617b      	str	r3, [r7, #20]

	switch(RateBase[light_mode]){ // Set the value to be used for rate or sensitivity in the side LED algorithm
    ab3e:	4bd7      	ldr	r3, [pc, #860]	; (ae9c <AnalogSideLights+0x368>)
    ab40:	781b      	ldrb	r3, [r3, #0]
    ab42:	001a      	movs	r2, r3
    ab44:	4bd6      	ldr	r3, [pc, #856]	; (aea0 <AnalogSideLights+0x36c>)
    ab46:	5c9b      	ldrb	r3, [r3, r2]
    ab48:	2b07      	cmp	r3, #7
    ab4a:	d900      	bls.n	ab4e <AnalogSideLights+0x1a>
    ab4c:	e0c0      	b.n	acd0 <AnalogSideLights+0x19c>
    ab4e:	009a      	lsls	r2, r3, #2
    ab50:	4bd4      	ldr	r3, [pc, #848]	; (aea4 <AnalogSideLights+0x370>)
    ab52:	18d3      	adds	r3, r2, r3
    ab54:	681b      	ldr	r3, [r3, #0]
    ab56:	469f      	mov	pc, r3
		case RATE_STATIC:
		{
			output_rate_sens = RateSens[light_mode];
    ab58:	4bd0      	ldr	r3, [pc, #832]	; (ae9c <AnalogSideLights+0x368>)
    ab5a:	781b      	ldrb	r3, [r3, #0]
    ab5c:	001a      	movs	r2, r3
    ab5e:	4bd2      	ldr	r3, [pc, #840]	; (aea8 <AnalogSideLights+0x374>)
    ab60:	0092      	lsls	r2, r2, #2
    ab62:	58d3      	ldr	r3, [r2, r3]
    ab64:	617b      	str	r3, [r7, #20]
			break;
    ab66:	e0b3      	b.n	acd0 <AnalogSideLights+0x19c>
		}
		case RATE_YAW_RATE:
		{
			if(gzKalman < 0)
    ab68:	4bd0      	ldr	r3, [pc, #832]	; (aeac <AnalogSideLights+0x378>)
    ab6a:	681a      	ldr	r2, [r3, #0]
    ab6c:	4bd0      	ldr	r3, [pc, #832]	; (aeb0 <AnalogSideLights+0x37c>)
    ab6e:	2100      	movs	r1, #0
    ab70:	1c10      	adds	r0, r2, #0
    ab72:	4798      	blx	r3
    ab74:	1e03      	subs	r3, r0, #0
    ab76:	d009      	beq.n	ab8c <AnalogSideLights+0x58>
			output_rate_sens = gzKalman/kalmanGZ_min;
    ab78:	4bcc      	ldr	r3, [pc, #816]	; (aeac <AnalogSideLights+0x378>)
    ab7a:	681a      	ldr	r2, [r3, #0]
    ab7c:	4bcd      	ldr	r3, [pc, #820]	; (aeb4 <AnalogSideLights+0x380>)
    ab7e:	6819      	ldr	r1, [r3, #0]
    ab80:	4bcd      	ldr	r3, [pc, #820]	; (aeb8 <AnalogSideLights+0x384>)
    ab82:	1c10      	adds	r0, r2, #0
    ab84:	4798      	blx	r3
    ab86:	1c03      	adds	r3, r0, #0
    ab88:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = gzKalman/kalmanGZ_max;
			break;
    ab8a:	e0a1      	b.n	acd0 <AnalogSideLights+0x19c>
			output_rate_sens = gzKalman/kalmanGZ_max;
    ab8c:	4bc7      	ldr	r3, [pc, #796]	; (aeac <AnalogSideLights+0x378>)
    ab8e:	681a      	ldr	r2, [r3, #0]
    ab90:	4bca      	ldr	r3, [pc, #808]	; (aebc <AnalogSideLights+0x388>)
    ab92:	6819      	ldr	r1, [r3, #0]
    ab94:	4bc8      	ldr	r3, [pc, #800]	; (aeb8 <AnalogSideLights+0x384>)
    ab96:	1c10      	adds	r0, r2, #0
    ab98:	4798      	blx	r3
    ab9a:	1c03      	adds	r3, r0, #0
    ab9c:	617b      	str	r3, [r7, #20]
			break;
    ab9e:	e097      	b.n	acd0 <AnalogSideLights+0x19c>
		}
		case RATE_ROLL_RATE:
		{
			if(gyKalman < 0)
    aba0:	4bc7      	ldr	r3, [pc, #796]	; (aec0 <AnalogSideLights+0x38c>)
    aba2:	681a      	ldr	r2, [r3, #0]
    aba4:	4bc2      	ldr	r3, [pc, #776]	; (aeb0 <AnalogSideLights+0x37c>)
    aba6:	2100      	movs	r1, #0
    aba8:	1c10      	adds	r0, r2, #0
    abaa:	4798      	blx	r3
    abac:	1e03      	subs	r3, r0, #0
    abae:	d009      	beq.n	abc4 <AnalogSideLights+0x90>
			output_rate_sens = gyKalman/kalmanGY_min;
    abb0:	4bc3      	ldr	r3, [pc, #780]	; (aec0 <AnalogSideLights+0x38c>)
    abb2:	681a      	ldr	r2, [r3, #0]
    abb4:	4bc3      	ldr	r3, [pc, #780]	; (aec4 <AnalogSideLights+0x390>)
    abb6:	6819      	ldr	r1, [r3, #0]
    abb8:	4bbf      	ldr	r3, [pc, #764]	; (aeb8 <AnalogSideLights+0x384>)
    abba:	1c10      	adds	r0, r2, #0
    abbc:	4798      	blx	r3
    abbe:	1c03      	adds	r3, r0, #0
    abc0:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = gyKalman/kalmanGY_max;
			break;
    abc2:	e085      	b.n	acd0 <AnalogSideLights+0x19c>
			output_rate_sens = gyKalman/kalmanGY_max;
    abc4:	4bbe      	ldr	r3, [pc, #760]	; (aec0 <AnalogSideLights+0x38c>)
    abc6:	681a      	ldr	r2, [r3, #0]
    abc8:	4bbf      	ldr	r3, [pc, #764]	; (aec8 <AnalogSideLights+0x394>)
    abca:	6819      	ldr	r1, [r3, #0]
    abcc:	4bba      	ldr	r3, [pc, #744]	; (aeb8 <AnalogSideLights+0x384>)
    abce:	1c10      	adds	r0, r2, #0
    abd0:	4798      	blx	r3
    abd2:	1c03      	adds	r3, r0, #0
    abd4:	617b      	str	r3, [r7, #20]
			break;
    abd6:	e07b      	b.n	acd0 <AnalogSideLights+0x19c>
		}
		case RATE_RPM:
		{
			output_rate_sens = (((float)latest_vesc_vals.rpm)/mcconf_limits.max_erpm);
    abd8:	4bbc      	ldr	r3, [pc, #752]	; (aecc <AnalogSideLights+0x398>)
    abda:	691a      	ldr	r2, [r3, #16]
    abdc:	4bbc      	ldr	r3, [pc, #752]	; (aed0 <AnalogSideLights+0x39c>)
    abde:	0010      	movs	r0, r2
    abe0:	4798      	blx	r3
    abe2:	1c04      	adds	r4, r0, #0
    abe4:	4bbb      	ldr	r3, [pc, #748]	; (aed4 <AnalogSideLights+0x3a0>)
    abe6:	699a      	ldr	r2, [r3, #24]
    abe8:	4bb9      	ldr	r3, [pc, #740]	; (aed0 <AnalogSideLights+0x39c>)
    abea:	0010      	movs	r0, r2
    abec:	4798      	blx	r3
    abee:	1c02      	adds	r2, r0, #0
    abf0:	4bb1      	ldr	r3, [pc, #708]	; (aeb8 <AnalogSideLights+0x384>)
    abf2:	1c11      	adds	r1, r2, #0
    abf4:	1c20      	adds	r0, r4, #0
    abf6:	4798      	blx	r3
    abf8:	1c03      	adds	r3, r0, #0
    abfa:	617b      	str	r3, [r7, #20]
			break;
    abfc:	e068      	b.n	acd0 <AnalogSideLights+0x19c>
		}
		case RATE_THROTTLE:
		{
			output_rate_sens = remote_y/255.0;
    abfe:	4bb6      	ldr	r3, [pc, #728]	; (aed8 <AnalogSideLights+0x3a4>)
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	001a      	movs	r2, r3
    ac04:	4bb5      	ldr	r3, [pc, #724]	; (aedc <AnalogSideLights+0x3a8>)
    ac06:	0010      	movs	r0, r2
    ac08:	4798      	blx	r3
    ac0a:	4cb5      	ldr	r4, [pc, #724]	; (aee0 <AnalogSideLights+0x3ac>)
    ac0c:	2200      	movs	r2, #0
    ac0e:	4bb5      	ldr	r3, [pc, #724]	; (aee4 <AnalogSideLights+0x3b0>)
    ac10:	47a0      	blx	r4
    ac12:	0003      	movs	r3, r0
    ac14:	000c      	movs	r4, r1
    ac16:	0019      	movs	r1, r3
    ac18:	0022      	movs	r2, r4
    ac1a:	4bb3      	ldr	r3, [pc, #716]	; (aee8 <AnalogSideLights+0x3b4>)
    ac1c:	0008      	movs	r0, r1
    ac1e:	0011      	movs	r1, r2
    ac20:	4798      	blx	r3
    ac22:	1c03      	adds	r3, r0, #0
    ac24:	617b      	str	r3, [r7, #20]
		}
		break;
    ac26:	e053      	b.n	acd0 <AnalogSideLights+0x19c>
		case RATE_X_ACCEL:
		{
			if(axKalman < 0)
    ac28:	4bb0      	ldr	r3, [pc, #704]	; (aeec <AnalogSideLights+0x3b8>)
    ac2a:	681a      	ldr	r2, [r3, #0]
    ac2c:	4ba0      	ldr	r3, [pc, #640]	; (aeb0 <AnalogSideLights+0x37c>)
    ac2e:	2100      	movs	r1, #0
    ac30:	1c10      	adds	r0, r2, #0
    ac32:	4798      	blx	r3
    ac34:	1e03      	subs	r3, r0, #0
    ac36:	d009      	beq.n	ac4c <AnalogSideLights+0x118>
			output_rate_sens = axKalman/kalmanAX_min;
    ac38:	4bac      	ldr	r3, [pc, #688]	; (aeec <AnalogSideLights+0x3b8>)
    ac3a:	681a      	ldr	r2, [r3, #0]
    ac3c:	4bac      	ldr	r3, [pc, #688]	; (aef0 <AnalogSideLights+0x3bc>)
    ac3e:	6819      	ldr	r1, [r3, #0]
    ac40:	4b9d      	ldr	r3, [pc, #628]	; (aeb8 <AnalogSideLights+0x384>)
    ac42:	1c10      	adds	r0, r2, #0
    ac44:	4798      	blx	r3
    ac46:	1c03      	adds	r3, r0, #0
    ac48:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = axKalman/kalmanAX_max;
			break;
    ac4a:	e041      	b.n	acd0 <AnalogSideLights+0x19c>
			output_rate_sens = axKalman/kalmanAX_max;
    ac4c:	4ba7      	ldr	r3, [pc, #668]	; (aeec <AnalogSideLights+0x3b8>)
    ac4e:	681a      	ldr	r2, [r3, #0]
    ac50:	4ba8      	ldr	r3, [pc, #672]	; (aef4 <AnalogSideLights+0x3c0>)
    ac52:	6819      	ldr	r1, [r3, #0]
    ac54:	4b98      	ldr	r3, [pc, #608]	; (aeb8 <AnalogSideLights+0x384>)
    ac56:	1c10      	adds	r0, r2, #0
    ac58:	4798      	blx	r3
    ac5a:	1c03      	adds	r3, r0, #0
    ac5c:	617b      	str	r3, [r7, #20]
			break;
    ac5e:	e037      	b.n	acd0 <AnalogSideLights+0x19c>
		}
		case RATE_Y_ACCEL:
		{
			if(ayKalman < 0)
    ac60:	4ba5      	ldr	r3, [pc, #660]	; (aef8 <AnalogSideLights+0x3c4>)
    ac62:	681a      	ldr	r2, [r3, #0]
    ac64:	4b92      	ldr	r3, [pc, #584]	; (aeb0 <AnalogSideLights+0x37c>)
    ac66:	2100      	movs	r1, #0
    ac68:	1c10      	adds	r0, r2, #0
    ac6a:	4798      	blx	r3
    ac6c:	1e03      	subs	r3, r0, #0
    ac6e:	d009      	beq.n	ac84 <AnalogSideLights+0x150>
			output_rate_sens = ayKalman/kalmanAY_min;
    ac70:	4ba1      	ldr	r3, [pc, #644]	; (aef8 <AnalogSideLights+0x3c4>)
    ac72:	681a      	ldr	r2, [r3, #0]
    ac74:	4ba1      	ldr	r3, [pc, #644]	; (aefc <AnalogSideLights+0x3c8>)
    ac76:	6819      	ldr	r1, [r3, #0]
    ac78:	4b8f      	ldr	r3, [pc, #572]	; (aeb8 <AnalogSideLights+0x384>)
    ac7a:	1c10      	adds	r0, r2, #0
    ac7c:	4798      	blx	r3
    ac7e:	1c03      	adds	r3, r0, #0
    ac80:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = ayKalman/kalmanAY_max;
			break;
    ac82:	e025      	b.n	acd0 <AnalogSideLights+0x19c>
			output_rate_sens = ayKalman/kalmanAY_max;
    ac84:	4b9c      	ldr	r3, [pc, #624]	; (aef8 <AnalogSideLights+0x3c4>)
    ac86:	681a      	ldr	r2, [r3, #0]
    ac88:	4b9d      	ldr	r3, [pc, #628]	; (af00 <AnalogSideLights+0x3cc>)
    ac8a:	6819      	ldr	r1, [r3, #0]
    ac8c:	4b8a      	ldr	r3, [pc, #552]	; (aeb8 <AnalogSideLights+0x384>)
    ac8e:	1c10      	adds	r0, r2, #0
    ac90:	4798      	blx	r3
    ac92:	1c03      	adds	r3, r0, #0
    ac94:	617b      	str	r3, [r7, #20]
			break;
    ac96:	e01b      	b.n	acd0 <AnalogSideLights+0x19c>
		}
		case RATE_Z_ACCEL:
		{
			if(azKalman < 0)
    ac98:	4b9a      	ldr	r3, [pc, #616]	; (af04 <AnalogSideLights+0x3d0>)
    ac9a:	681a      	ldr	r2, [r3, #0]
    ac9c:	4b84      	ldr	r3, [pc, #528]	; (aeb0 <AnalogSideLights+0x37c>)
    ac9e:	2100      	movs	r1, #0
    aca0:	1c10      	adds	r0, r2, #0
    aca2:	4798      	blx	r3
    aca4:	1e03      	subs	r3, r0, #0
    aca6:	d009      	beq.n	acbc <AnalogSideLights+0x188>
			output_rate_sens = azKalman/kalmanAZ_min;
    aca8:	4b96      	ldr	r3, [pc, #600]	; (af04 <AnalogSideLights+0x3d0>)
    acaa:	681a      	ldr	r2, [r3, #0]
    acac:	4b96      	ldr	r3, [pc, #600]	; (af08 <AnalogSideLights+0x3d4>)
    acae:	6819      	ldr	r1, [r3, #0]
    acb0:	4b81      	ldr	r3, [pc, #516]	; (aeb8 <AnalogSideLights+0x384>)
    acb2:	1c10      	adds	r0, r2, #0
    acb4:	4798      	blx	r3
    acb6:	1c03      	adds	r3, r0, #0
    acb8:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = azKalman/kalmanAZ_max;
			break;
    acba:	e008      	b.n	acce <AnalogSideLights+0x19a>
			output_rate_sens = azKalman/kalmanAZ_max;
    acbc:	4b91      	ldr	r3, [pc, #580]	; (af04 <AnalogSideLights+0x3d0>)
    acbe:	681a      	ldr	r2, [r3, #0]
    acc0:	4b92      	ldr	r3, [pc, #584]	; (af0c <AnalogSideLights+0x3d8>)
    acc2:	6819      	ldr	r1, [r3, #0]
    acc4:	4b7c      	ldr	r3, [pc, #496]	; (aeb8 <AnalogSideLights+0x384>)
    acc6:	1c10      	adds	r0, r2, #0
    acc8:	4798      	blx	r3
    acca:	1c03      	adds	r3, r0, #0
    accc:	617b      	str	r3, [r7, #20]
			break;
    acce:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	if(output_rate_sens < 0)
    acd0:	4b77      	ldr	r3, [pc, #476]	; (aeb0 <AnalogSideLights+0x37c>)
    acd2:	2100      	movs	r1, #0
    acd4:	6978      	ldr	r0, [r7, #20]
    acd6:	4798      	blx	r3
    acd8:	1e03      	subs	r3, r0, #0
    acda:	d002      	beq.n	ace2 <AnalogSideLights+0x1ae>
	output_rate_sens = 0;
    acdc:	2300      	movs	r3, #0
    acde:	617b      	str	r3, [r7, #20]
    ace0:	e009      	b.n	acf6 <AnalogSideLights+0x1c2>
	else if(output_rate_sens > 1)
    ace2:	4b8b      	ldr	r3, [pc, #556]	; (af10 <AnalogSideLights+0x3dc>)
    ace4:	21fe      	movs	r1, #254	; 0xfe
    ace6:	0589      	lsls	r1, r1, #22
    ace8:	6978      	ldr	r0, [r7, #20]
    acea:	4798      	blx	r3
    acec:	1e03      	subs	r3, r0, #0
    acee:	d002      	beq.n	acf6 <AnalogSideLights+0x1c2>
	output_rate_sens = 1;
    acf0:	23fe      	movs	r3, #254	; 0xfe
    acf2:	059b      	lsls	r3, r3, #22
    acf4:	617b      	str	r3, [r7, #20]

	switch(BrightBase[light_mode]){ // Set the Brightness of the side LEDs
    acf6:	4b69      	ldr	r3, [pc, #420]	; (ae9c <AnalogSideLights+0x368>)
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	001a      	movs	r2, r3
    acfc:	4b85      	ldr	r3, [pc, #532]	; (af14 <AnalogSideLights+0x3e0>)
    acfe:	5c9b      	ldrb	r3, [r3, r2]
    ad00:	2b08      	cmp	r3, #8
    ad02:	d900      	bls.n	ad06 <AnalogSideLights+0x1d2>
    ad04:	e16b      	b.n	afde <AnalogSideLights+0x4aa>
    ad06:	009a      	lsls	r2, r3, #2
    ad08:	4b83      	ldr	r3, [pc, #524]	; (af18 <AnalogSideLights+0x3e4>)
    ad0a:	18d3      	adds	r3, r2, r3
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	469f      	mov	pc, r3
		case BRIGHT_STATIC:
		{
			output_brightness = Brightness[light_mode];
    ad10:	4b62      	ldr	r3, [pc, #392]	; (ae9c <AnalogSideLights+0x368>)
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	001a      	movs	r2, r3
    ad16:	4b81      	ldr	r3, [pc, #516]	; (af1c <AnalogSideLights+0x3e8>)
    ad18:	0092      	lsls	r2, r2, #2
    ad1a:	58d2      	ldr	r2, [r2, r3]
    ad1c:	4b80      	ldr	r3, [pc, #512]	; (af20 <AnalogSideLights+0x3ec>)
    ad1e:	601a      	str	r2, [r3, #0]
			break;
    ad20:	e15d      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_YAW_RATE:
		{
			if(gzKalman < 0)
    ad22:	4b62      	ldr	r3, [pc, #392]	; (aeac <AnalogSideLights+0x378>)
    ad24:	681a      	ldr	r2, [r3, #0]
    ad26:	4b62      	ldr	r3, [pc, #392]	; (aeb0 <AnalogSideLights+0x37c>)
    ad28:	2100      	movs	r1, #0
    ad2a:	1c10      	adds	r0, r2, #0
    ad2c:	4798      	blx	r3
    ad2e:	1e03      	subs	r3, r0, #0
    ad30:	d00b      	beq.n	ad4a <AnalogSideLights+0x216>
			output_brightness = gzKalman/kalmanGZ_min;
    ad32:	4b5e      	ldr	r3, [pc, #376]	; (aeac <AnalogSideLights+0x378>)
    ad34:	681a      	ldr	r2, [r3, #0]
    ad36:	4b5f      	ldr	r3, [pc, #380]	; (aeb4 <AnalogSideLights+0x380>)
    ad38:	6819      	ldr	r1, [r3, #0]
    ad3a:	4b5f      	ldr	r3, [pc, #380]	; (aeb8 <AnalogSideLights+0x384>)
    ad3c:	1c10      	adds	r0, r2, #0
    ad3e:	4798      	blx	r3
    ad40:	1c03      	adds	r3, r0, #0
    ad42:	1c1a      	adds	r2, r3, #0
    ad44:	4b76      	ldr	r3, [pc, #472]	; (af20 <AnalogSideLights+0x3ec>)
    ad46:	601a      	str	r2, [r3, #0]
			else
			output_brightness = gzKalman/kalmanGZ_max;
			break;
    ad48:	e149      	b.n	afde <AnalogSideLights+0x4aa>
			output_brightness = gzKalman/kalmanGZ_max;
    ad4a:	4b58      	ldr	r3, [pc, #352]	; (aeac <AnalogSideLights+0x378>)
    ad4c:	681a      	ldr	r2, [r3, #0]
    ad4e:	4b5b      	ldr	r3, [pc, #364]	; (aebc <AnalogSideLights+0x388>)
    ad50:	6819      	ldr	r1, [r3, #0]
    ad52:	4b59      	ldr	r3, [pc, #356]	; (aeb8 <AnalogSideLights+0x384>)
    ad54:	1c10      	adds	r0, r2, #0
    ad56:	4798      	blx	r3
    ad58:	1c03      	adds	r3, r0, #0
    ad5a:	1c1a      	adds	r2, r3, #0
    ad5c:	4b70      	ldr	r3, [pc, #448]	; (af20 <AnalogSideLights+0x3ec>)
    ad5e:	601a      	str	r2, [r3, #0]
			break;
    ad60:	e13d      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_ROLL_RATE:
		{
			if(gyKalman < 0)
    ad62:	4b57      	ldr	r3, [pc, #348]	; (aec0 <AnalogSideLights+0x38c>)
    ad64:	681a      	ldr	r2, [r3, #0]
    ad66:	4b52      	ldr	r3, [pc, #328]	; (aeb0 <AnalogSideLights+0x37c>)
    ad68:	2100      	movs	r1, #0
    ad6a:	1c10      	adds	r0, r2, #0
    ad6c:	4798      	blx	r3
    ad6e:	1e03      	subs	r3, r0, #0
    ad70:	d00b      	beq.n	ad8a <AnalogSideLights+0x256>
			output_brightness = gyKalman/kalmanGY_min;
    ad72:	4b53      	ldr	r3, [pc, #332]	; (aec0 <AnalogSideLights+0x38c>)
    ad74:	681a      	ldr	r2, [r3, #0]
    ad76:	4b53      	ldr	r3, [pc, #332]	; (aec4 <AnalogSideLights+0x390>)
    ad78:	6819      	ldr	r1, [r3, #0]
    ad7a:	4b4f      	ldr	r3, [pc, #316]	; (aeb8 <AnalogSideLights+0x384>)
    ad7c:	1c10      	adds	r0, r2, #0
    ad7e:	4798      	blx	r3
    ad80:	1c03      	adds	r3, r0, #0
    ad82:	1c1a      	adds	r2, r3, #0
    ad84:	4b66      	ldr	r3, [pc, #408]	; (af20 <AnalogSideLights+0x3ec>)
    ad86:	601a      	str	r2, [r3, #0]
			else
			output_brightness = gyKalman/kalmanGY_max;
			break;
    ad88:	e129      	b.n	afde <AnalogSideLights+0x4aa>
			output_brightness = gyKalman/kalmanGY_max;
    ad8a:	4b4d      	ldr	r3, [pc, #308]	; (aec0 <AnalogSideLights+0x38c>)
    ad8c:	681a      	ldr	r2, [r3, #0]
    ad8e:	4b4e      	ldr	r3, [pc, #312]	; (aec8 <AnalogSideLights+0x394>)
    ad90:	6819      	ldr	r1, [r3, #0]
    ad92:	4b49      	ldr	r3, [pc, #292]	; (aeb8 <AnalogSideLights+0x384>)
    ad94:	1c10      	adds	r0, r2, #0
    ad96:	4798      	blx	r3
    ad98:	1c03      	adds	r3, r0, #0
    ad9a:	1c1a      	adds	r2, r3, #0
    ad9c:	4b60      	ldr	r3, [pc, #384]	; (af20 <AnalogSideLights+0x3ec>)
    ad9e:	601a      	str	r2, [r3, #0]
			break;
    ada0:	e11d      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_RPM:
		{
			if(latest_vesc_vals.rpm != 0)
    ada2:	4b4a      	ldr	r3, [pc, #296]	; (aecc <AnalogSideLights+0x398>)
    ada4:	691b      	ldr	r3, [r3, #16]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d017      	beq.n	adda <AnalogSideLights+0x2a6>
			output_brightness = ((float)abs(latest_vesc_vals.rpm))/(float)mcconf_limits.max_erpm;
    adaa:	4b48      	ldr	r3, [pc, #288]	; (aecc <AnalogSideLights+0x398>)
    adac:	691b      	ldr	r3, [r3, #16]
    adae:	17d9      	asrs	r1, r3, #31
    adb0:	185a      	adds	r2, r3, r1
    adb2:	404a      	eors	r2, r1
    adb4:	4b46      	ldr	r3, [pc, #280]	; (aed0 <AnalogSideLights+0x39c>)
    adb6:	0010      	movs	r0, r2
    adb8:	4798      	blx	r3
    adba:	1c04      	adds	r4, r0, #0
    adbc:	4b45      	ldr	r3, [pc, #276]	; (aed4 <AnalogSideLights+0x3a0>)
    adbe:	699a      	ldr	r2, [r3, #24]
    adc0:	4b43      	ldr	r3, [pc, #268]	; (aed0 <AnalogSideLights+0x39c>)
    adc2:	0010      	movs	r0, r2
    adc4:	4798      	blx	r3
    adc6:	1c02      	adds	r2, r0, #0
    adc8:	4b3b      	ldr	r3, [pc, #236]	; (aeb8 <AnalogSideLights+0x384>)
    adca:	1c11      	adds	r1, r2, #0
    adcc:	1c20      	adds	r0, r4, #0
    adce:	4798      	blx	r3
    add0:	1c03      	adds	r3, r0, #0
    add2:	1c1a      	adds	r2, r3, #0
    add4:	4b52      	ldr	r3, [pc, #328]	; (af20 <AnalogSideLights+0x3ec>)
    add6:	601a      	str	r2, [r3, #0]
			else
			output_brightness = 0;
			break;
    add8:	e101      	b.n	afde <AnalogSideLights+0x4aa>
			output_brightness = 0;
    adda:	4b51      	ldr	r3, [pc, #324]	; (af20 <AnalogSideLights+0x3ec>)
    addc:	2200      	movs	r2, #0
    adde:	601a      	str	r2, [r3, #0]
			break;
    ade0:	e0fd      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_THROTTLE:
		{
			output_brightness = remote_y/255.0;
    ade2:	4b3d      	ldr	r3, [pc, #244]	; (aed8 <AnalogSideLights+0x3a4>)
    ade4:	781b      	ldrb	r3, [r3, #0]
    ade6:	001a      	movs	r2, r3
    ade8:	4b3c      	ldr	r3, [pc, #240]	; (aedc <AnalogSideLights+0x3a8>)
    adea:	0010      	movs	r0, r2
    adec:	4798      	blx	r3
    adee:	4c3c      	ldr	r4, [pc, #240]	; (aee0 <AnalogSideLights+0x3ac>)
    adf0:	2200      	movs	r2, #0
    adf2:	4b3c      	ldr	r3, [pc, #240]	; (aee4 <AnalogSideLights+0x3b0>)
    adf4:	47a0      	blx	r4
    adf6:	0003      	movs	r3, r0
    adf8:	000c      	movs	r4, r1
    adfa:	0019      	movs	r1, r3
    adfc:	0022      	movs	r2, r4
    adfe:	4b3a      	ldr	r3, [pc, #232]	; (aee8 <AnalogSideLights+0x3b4>)
    ae00:	0008      	movs	r0, r1
    ae02:	0011      	movs	r1, r2
    ae04:	4798      	blx	r3
    ae06:	1c02      	adds	r2, r0, #0
    ae08:	4b45      	ldr	r3, [pc, #276]	; (af20 <AnalogSideLights+0x3ec>)
    ae0a:	601a      	str	r2, [r3, #0]
			break;
    ae0c:	e0e7      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_X_ACCEL:
		{
			if(axKalman < 0){
    ae0e:	4b37      	ldr	r3, [pc, #220]	; (aeec <AnalogSideLights+0x3b8>)
    ae10:	681a      	ldr	r2, [r3, #0]
    ae12:	4b27      	ldr	r3, [pc, #156]	; (aeb0 <AnalogSideLights+0x37c>)
    ae14:	2100      	movs	r1, #0
    ae16:	1c10      	adds	r0, r2, #0
    ae18:	4798      	blx	r3
    ae1a:	1e03      	subs	r3, r0, #0
    ae1c:	d00e      	beq.n	ae3c <AnalogSideLights+0x308>
				output_brightness = axKalman/kalmanAX_min;
    ae1e:	4b33      	ldr	r3, [pc, #204]	; (aeec <AnalogSideLights+0x3b8>)
    ae20:	681a      	ldr	r2, [r3, #0]
    ae22:	4b33      	ldr	r3, [pc, #204]	; (aef0 <AnalogSideLights+0x3bc>)
    ae24:	6819      	ldr	r1, [r3, #0]
    ae26:	4b24      	ldr	r3, [pc, #144]	; (aeb8 <AnalogSideLights+0x384>)
    ae28:	1c10      	adds	r0, r2, #0
    ae2a:	4798      	blx	r3
    ae2c:	1c03      	adds	r3, r0, #0
    ae2e:	1c1a      	adds	r2, r3, #0
    ae30:	4b3b      	ldr	r3, [pc, #236]	; (af20 <AnalogSideLights+0x3ec>)
    ae32:	601a      	str	r2, [r3, #0]
				SUPRESS_RIGHT_RGB = true;
    ae34:	4b3b      	ldr	r3, [pc, #236]	; (af24 <AnalogSideLights+0x3f0>)
    ae36:	2201      	movs	r2, #1
    ae38:	701a      	strb	r2, [r3, #0]
				} else{
				output_brightness = axKalman/kalmanAX_max;
				SUPRESS_LEFT_RGB = true;
			}
			break;
    ae3a:	e0d0      	b.n	afde <AnalogSideLights+0x4aa>
				output_brightness = axKalman/kalmanAX_max;
    ae3c:	4b2b      	ldr	r3, [pc, #172]	; (aeec <AnalogSideLights+0x3b8>)
    ae3e:	681a      	ldr	r2, [r3, #0]
    ae40:	4b2c      	ldr	r3, [pc, #176]	; (aef4 <AnalogSideLights+0x3c0>)
    ae42:	6819      	ldr	r1, [r3, #0]
    ae44:	4b1c      	ldr	r3, [pc, #112]	; (aeb8 <AnalogSideLights+0x384>)
    ae46:	1c10      	adds	r0, r2, #0
    ae48:	4798      	blx	r3
    ae4a:	1c03      	adds	r3, r0, #0
    ae4c:	1c1a      	adds	r2, r3, #0
    ae4e:	4b34      	ldr	r3, [pc, #208]	; (af20 <AnalogSideLights+0x3ec>)
    ae50:	601a      	str	r2, [r3, #0]
				SUPRESS_LEFT_RGB = true;
    ae52:	4b35      	ldr	r3, [pc, #212]	; (af28 <AnalogSideLights+0x3f4>)
    ae54:	2201      	movs	r2, #1
    ae56:	701a      	strb	r2, [r3, #0]
			break;
    ae58:	e0c1      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_Y_ACCEL:
		{
			if(ayKalman < 0)
    ae5a:	4b27      	ldr	r3, [pc, #156]	; (aef8 <AnalogSideLights+0x3c4>)
    ae5c:	681a      	ldr	r2, [r3, #0]
    ae5e:	4b14      	ldr	r3, [pc, #80]	; (aeb0 <AnalogSideLights+0x37c>)
    ae60:	2100      	movs	r1, #0
    ae62:	1c10      	adds	r0, r2, #0
    ae64:	4798      	blx	r3
    ae66:	1e03      	subs	r3, r0, #0
    ae68:	d00b      	beq.n	ae82 <AnalogSideLights+0x34e>
			output_brightness = ayKalman/kalmanAY_min;
    ae6a:	4b23      	ldr	r3, [pc, #140]	; (aef8 <AnalogSideLights+0x3c4>)
    ae6c:	681a      	ldr	r2, [r3, #0]
    ae6e:	4b23      	ldr	r3, [pc, #140]	; (aefc <AnalogSideLights+0x3c8>)
    ae70:	6819      	ldr	r1, [r3, #0]
    ae72:	4b11      	ldr	r3, [pc, #68]	; (aeb8 <AnalogSideLights+0x384>)
    ae74:	1c10      	adds	r0, r2, #0
    ae76:	4798      	blx	r3
    ae78:	1c03      	adds	r3, r0, #0
    ae7a:	1c1a      	adds	r2, r3, #0
    ae7c:	4b28      	ldr	r3, [pc, #160]	; (af20 <AnalogSideLights+0x3ec>)
    ae7e:	601a      	str	r2, [r3, #0]
			else
			output_brightness = ayKalman/kalmanAY_max;
			break;
    ae80:	e0ad      	b.n	afde <AnalogSideLights+0x4aa>
			output_brightness = ayKalman/kalmanAY_max;
    ae82:	4b1d      	ldr	r3, [pc, #116]	; (aef8 <AnalogSideLights+0x3c4>)
    ae84:	681a      	ldr	r2, [r3, #0]
    ae86:	4b1e      	ldr	r3, [pc, #120]	; (af00 <AnalogSideLights+0x3cc>)
    ae88:	6819      	ldr	r1, [r3, #0]
    ae8a:	4b0b      	ldr	r3, [pc, #44]	; (aeb8 <AnalogSideLights+0x384>)
    ae8c:	1c10      	adds	r0, r2, #0
    ae8e:	4798      	blx	r3
    ae90:	1c03      	adds	r3, r0, #0
    ae92:	1c1a      	adds	r2, r3, #0
    ae94:	4b22      	ldr	r3, [pc, #136]	; (af20 <AnalogSideLights+0x3ec>)
    ae96:	601a      	str	r2, [r3, #0]
			break;
    ae98:	e0a1      	b.n	afde <AnalogSideLights+0x4aa>
    ae9a:	46c0      	nop			; (mov r8, r8)
    ae9c:	2000003c 	.word	0x2000003c
    aea0:	200000ac 	.word	0x200000ac
    aea4:	0001c654 	.word	0x0001c654
    aea8:	2000004c 	.word	0x2000004c
    aeac:	20000380 	.word	0x20000380
    aeb0:	0001950d 	.word	0x0001950d
    aeb4:	20000034 	.word	0x20000034
    aeb8:	00019941 	.word	0x00019941
    aebc:	20000038 	.word	0x20000038
    aec0:	2000037c 	.word	0x2000037c
    aec4:	2000002c 	.word	0x2000002c
    aec8:	20000030 	.word	0x20000030
    aecc:	20000e38 	.word	0x20000e38
    aed0:	0001a2d9 	.word	0x0001a2d9
    aed4:	20001a8c 	.word	0x20001a8c
    aed8:	200003ce 	.word	0x200003ce
    aedc:	0001be21 	.word	0x0001be21
    aee0:	0001aa25 	.word	0x0001aa25
    aee4:	406fe000 	.word	0x406fe000
    aee8:	0001bfb9 	.word	0x0001bfb9
    aeec:	2000036c 	.word	0x2000036c
    aef0:	2000000c 	.word	0x2000000c
    aef4:	20000010 	.word	0x20000010
    aef8:	20000370 	.word	0x20000370
    aefc:	20000014 	.word	0x20000014
    af00:	20000018 	.word	0x20000018
    af04:	20000374 	.word	0x20000374
    af08:	2000001c 	.word	0x2000001c
    af0c:	20000020 	.word	0x20000020
    af10:	00019535 	.word	0x00019535
    af14:	200000a0 	.word	0x200000a0
    af18:	0001c674 	.word	0x0001c674
    af1c:	20000070 	.word	0x20000070
    af20:	20000464 	.word	0x20000464
    af24:	200003a1 	.word	0x200003a1
    af28:	200003a0 	.word	0x200003a0
		}
		case BRIGHT_Z_ACCEL:
		{
			if(azKalman < 0)
    af2c:	4bb8      	ldr	r3, [pc, #736]	; (b210 <AnalogSideLights+0x6dc>)
    af2e:	681a      	ldr	r2, [r3, #0]
    af30:	4bb8      	ldr	r3, [pc, #736]	; (b214 <AnalogSideLights+0x6e0>)
    af32:	2100      	movs	r1, #0
    af34:	1c10      	adds	r0, r2, #0
    af36:	4798      	blx	r3
    af38:	1e03      	subs	r3, r0, #0
    af3a:	d00b      	beq.n	af54 <AnalogSideLights+0x420>
			output_brightness = azKalman/kalmanAZ_min;
    af3c:	4bb4      	ldr	r3, [pc, #720]	; (b210 <AnalogSideLights+0x6dc>)
    af3e:	681a      	ldr	r2, [r3, #0]
    af40:	4bb5      	ldr	r3, [pc, #724]	; (b218 <AnalogSideLights+0x6e4>)
    af42:	6819      	ldr	r1, [r3, #0]
    af44:	4bb5      	ldr	r3, [pc, #724]	; (b21c <AnalogSideLights+0x6e8>)
    af46:	1c10      	adds	r0, r2, #0
    af48:	4798      	blx	r3
    af4a:	1c03      	adds	r3, r0, #0
    af4c:	1c1a      	adds	r2, r3, #0
    af4e:	4bb4      	ldr	r3, [pc, #720]	; (b220 <AnalogSideLights+0x6ec>)
    af50:	601a      	str	r2, [r3, #0]
			else
			output_brightness = azKalman/kalmanAZ_max;
			break;
    af52:	e044      	b.n	afde <AnalogSideLights+0x4aa>
			output_brightness = azKalman/kalmanAZ_max;
    af54:	4bae      	ldr	r3, [pc, #696]	; (b210 <AnalogSideLights+0x6dc>)
    af56:	681a      	ldr	r2, [r3, #0]
    af58:	4bb2      	ldr	r3, [pc, #712]	; (b224 <AnalogSideLights+0x6f0>)
    af5a:	6819      	ldr	r1, [r3, #0]
    af5c:	4baf      	ldr	r3, [pc, #700]	; (b21c <AnalogSideLights+0x6e8>)
    af5e:	1c10      	adds	r0, r2, #0
    af60:	4798      	blx	r3
    af62:	1c03      	adds	r3, r0, #0
    af64:	1c1a      	adds	r2, r3, #0
    af66:	4bae      	ldr	r3, [pc, #696]	; (b220 <AnalogSideLights+0x6ec>)
    af68:	601a      	str	r2, [r3, #0]
			break;
    af6a:	e038      	b.n	afde <AnalogSideLights+0x4aa>
		}
		case BRIGHT_STROBE:
		{
			if(output_brightness == 0.0 && check_timer_expired(&strobe_time, strobe_off_dur)){
    af6c:	4bac      	ldr	r3, [pc, #688]	; (b220 <AnalogSideLights+0x6ec>)
    af6e:	681a      	ldr	r2, [r3, #0]
    af70:	4bad      	ldr	r3, [pc, #692]	; (b228 <AnalogSideLights+0x6f4>)
    af72:	2100      	movs	r1, #0
    af74:	1c10      	adds	r0, r2, #0
    af76:	4798      	blx	r3
    af78:	1e03      	subs	r3, r0, #0
    af7a:	d013      	beq.n	afa4 <AnalogSideLights+0x470>
    af7c:	4bab      	ldr	r3, [pc, #684]	; (b22c <AnalogSideLights+0x6f8>)
    af7e:	881b      	ldrh	r3, [r3, #0]
    af80:	001a      	movs	r2, r3
    af82:	4bab      	ldr	r3, [pc, #684]	; (b230 <AnalogSideLights+0x6fc>)
    af84:	0011      	movs	r1, r2
    af86:	0018      	movs	r0, r3
    af88:	4baa      	ldr	r3, [pc, #680]	; (b234 <AnalogSideLights+0x700>)
    af8a:	4798      	blx	r3
    af8c:	1e03      	subs	r3, r0, #0
    af8e:	d009      	beq.n	afa4 <AnalogSideLights+0x470>
				output_brightness = 1.0;
    af90:	4ba3      	ldr	r3, [pc, #652]	; (b220 <AnalogSideLights+0x6ec>)
    af92:	22fe      	movs	r2, #254	; 0xfe
    af94:	0592      	lsls	r2, r2, #22
    af96:	601a      	str	r2, [r3, #0]
				strobe_time = millis();
    af98:	4ba7      	ldr	r3, [pc, #668]	; (b238 <AnalogSideLights+0x704>)
    af9a:	4798      	blx	r3
    af9c:	0002      	movs	r2, r0
    af9e:	4ba4      	ldr	r3, [pc, #656]	; (b230 <AnalogSideLights+0x6fc>)
    afa0:	601a      	str	r2, [r3, #0]
			}
			else if(output_brightness == 1.0 && check_timer_expired(&strobe_time, strobe_on_dur)){
				output_brightness = 0.0;
				strobe_time = millis();
			}
			break;
    afa2:	e01b      	b.n	afdc <AnalogSideLights+0x4a8>
			else if(output_brightness == 1.0 && check_timer_expired(&strobe_time, strobe_on_dur)){
    afa4:	4b9e      	ldr	r3, [pc, #632]	; (b220 <AnalogSideLights+0x6ec>)
    afa6:	681a      	ldr	r2, [r3, #0]
    afa8:	4b9f      	ldr	r3, [pc, #636]	; (b228 <AnalogSideLights+0x6f4>)
    afaa:	21fe      	movs	r1, #254	; 0xfe
    afac:	0589      	lsls	r1, r1, #22
    afae:	1c10      	adds	r0, r2, #0
    afb0:	4798      	blx	r3
    afb2:	1e03      	subs	r3, r0, #0
    afb4:	d100      	bne.n	afb8 <AnalogSideLights+0x484>
			break;
    afb6:	e011      	b.n	afdc <AnalogSideLights+0x4a8>
			else if(output_brightness == 1.0 && check_timer_expired(&strobe_time, strobe_on_dur)){
    afb8:	4ba0      	ldr	r3, [pc, #640]	; (b23c <AnalogSideLights+0x708>)
    afba:	881b      	ldrh	r3, [r3, #0]
    afbc:	001a      	movs	r2, r3
    afbe:	4b9c      	ldr	r3, [pc, #624]	; (b230 <AnalogSideLights+0x6fc>)
    afc0:	0011      	movs	r1, r2
    afc2:	0018      	movs	r0, r3
    afc4:	4b9b      	ldr	r3, [pc, #620]	; (b234 <AnalogSideLights+0x700>)
    afc6:	4798      	blx	r3
    afc8:	1e03      	subs	r3, r0, #0
    afca:	d007      	beq.n	afdc <AnalogSideLights+0x4a8>
				output_brightness = 0.0;
    afcc:	4b94      	ldr	r3, [pc, #592]	; (b220 <AnalogSideLights+0x6ec>)
    afce:	2200      	movs	r2, #0
    afd0:	601a      	str	r2, [r3, #0]
				strobe_time = millis();
    afd2:	4b99      	ldr	r3, [pc, #612]	; (b238 <AnalogSideLights+0x704>)
    afd4:	4798      	blx	r3
    afd6:	0002      	movs	r2, r0
    afd8:	4b95      	ldr	r3, [pc, #596]	; (b230 <AnalogSideLights+0x6fc>)
    afda:	601a      	str	r2, [r3, #0]
			break;
    afdc:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	if(output_brightness < 0)
    afde:	4b90      	ldr	r3, [pc, #576]	; (b220 <AnalogSideLights+0x6ec>)
    afe0:	681a      	ldr	r2, [r3, #0]
    afe2:	4b8c      	ldr	r3, [pc, #560]	; (b214 <AnalogSideLights+0x6e0>)
    afe4:	2100      	movs	r1, #0
    afe6:	1c10      	adds	r0, r2, #0
    afe8:	4798      	blx	r3
    afea:	1e03      	subs	r3, r0, #0
    afec:	d003      	beq.n	aff6 <AnalogSideLights+0x4c2>
	output_brightness = 0;
    afee:	4b8c      	ldr	r3, [pc, #560]	; (b220 <AnalogSideLights+0x6ec>)
    aff0:	2200      	movs	r2, #0
    aff2:	601a      	str	r2, [r3, #0]
    aff4:	e00c      	b.n	b010 <AnalogSideLights+0x4dc>
	else if(output_brightness > 1)
    aff6:	4b8a      	ldr	r3, [pc, #552]	; (b220 <AnalogSideLights+0x6ec>)
    aff8:	681a      	ldr	r2, [r3, #0]
    affa:	4b91      	ldr	r3, [pc, #580]	; (b240 <AnalogSideLights+0x70c>)
    affc:	21fe      	movs	r1, #254	; 0xfe
    affe:	0589      	lsls	r1, r1, #22
    b000:	1c10      	adds	r0, r2, #0
    b002:	4798      	blx	r3
    b004:	1e03      	subs	r3, r0, #0
    b006:	d003      	beq.n	b010 <AnalogSideLights+0x4dc>
	output_brightness = 1;
    b008:	4b85      	ldr	r3, [pc, #532]	; (b220 <AnalogSideLights+0x6ec>)
    b00a:	22fe      	movs	r2, #254	; 0xfe
    b00c:	0592      	lsls	r2, r2, #22
    b00e:	601a      	str	r2, [r3, #0]

	switch(ColorBase[light_mode]){ // Set the color of the side LEDs
    b010:	4b8c      	ldr	r3, [pc, #560]	; (b244 <AnalogSideLights+0x710>)
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	001a      	movs	r2, r3
    b016:	4b8c      	ldr	r3, [pc, #560]	; (b248 <AnalogSideLights+0x714>)
    b018:	5c9b      	ldrb	r3, [r3, r2]
    b01a:	2b0a      	cmp	r3, #10
    b01c:	d901      	bls.n	b022 <AnalogSideLights+0x4ee>
    b01e:	f001 f8a3 	bl	c168 <AnalogSideLights+0x1634>
    b022:	009a      	lsls	r2, r3, #2
    b024:	4b89      	ldr	r3, [pc, #548]	; (b24c <AnalogSideLights+0x718>)
    b026:	18d3      	adds	r3, r2, r3
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	469f      	mov	pc, r3
		case COLOR_STATIC:
		{
			if(light_mode == MODE_ANALOG_STATIC)
    b02c:	4b85      	ldr	r3, [pc, #532]	; (b244 <AnalogSideLights+0x710>)
    b02e:	781b      	ldrb	r3, [r3, #0]
    b030:	2b00      	cmp	r3, #0
    b032:	d105      	bne.n	b040 <AnalogSideLights+0x50c>
			RGB_Ouptut = Static_RGB;
    b034:	4b86      	ldr	r3, [pc, #536]	; (b250 <AnalogSideLights+0x71c>)
    b036:	4a87      	ldr	r2, [pc, #540]	; (b254 <AnalogSideLights+0x720>)
    b038:	ca13      	ldmia	r2!, {r0, r1, r4}
    b03a:	c313      	stmia	r3!, {r0, r1, r4}
			else if(light_mode == MODE_ANALOG_CUSTOM)
			RGB_Ouptut = Custom_RGB;
			break;
    b03c:	f001 f891 	bl	c162 <AnalogSideLights+0x162e>
			else if(light_mode == MODE_ANALOG_CUSTOM)
    b040:	4b80      	ldr	r3, [pc, #512]	; (b244 <AnalogSideLights+0x710>)
    b042:	781b      	ldrb	r3, [r3, #0]
    b044:	2b08      	cmp	r3, #8
    b046:	d001      	beq.n	b04c <AnalogSideLights+0x518>
    b048:	f001 f88b 	bl	c162 <AnalogSideLights+0x162e>
			RGB_Ouptut = Custom_RGB;
    b04c:	4b80      	ldr	r3, [pc, #512]	; (b250 <AnalogSideLights+0x71c>)
    b04e:	4a82      	ldr	r2, [pc, #520]	; (b258 <AnalogSideLights+0x724>)
    b050:	ca13      	ldmia	r2!, {r0, r1, r4}
    b052:	c313      	stmia	r3!, {r0, r1, r4}
			break;
    b054:	f001 f885 	bl	c162 <AnalogSideLights+0x162e>
		}
		case COLOR_COLOR_CYCLE:
		{
			upColor = cycle_index * output_brightness;
    b058:	4b80      	ldr	r3, [pc, #512]	; (b25c <AnalogSideLights+0x728>)
    b05a:	681a      	ldr	r2, [r3, #0]
    b05c:	4b80      	ldr	r3, [pc, #512]	; (b260 <AnalogSideLights+0x72c>)
    b05e:	0010      	movs	r0, r2
    b060:	4798      	blx	r3
    b062:	4b6f      	ldr	r3, [pc, #444]	; (b220 <AnalogSideLights+0x6ec>)
    b064:	681a      	ldr	r2, [r3, #0]
    b066:	4b7f      	ldr	r3, [pc, #508]	; (b264 <AnalogSideLights+0x730>)
    b068:	1c11      	adds	r1, r2, #0
    b06a:	4798      	blx	r3
    b06c:	1c03      	adds	r3, r0, #0
    b06e:	1c1a      	adds	r2, r3, #0
    b070:	4b7d      	ldr	r3, [pc, #500]	; (b268 <AnalogSideLights+0x734>)
    b072:	1c10      	adds	r0, r2, #0
    b074:	4798      	blx	r3
    b076:	0003      	movs	r3, r0
    b078:	b29a      	uxth	r2, r3
    b07a:	4b7c      	ldr	r3, [pc, #496]	; (b26c <AnalogSideLights+0x738>)
    b07c:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b07e:	4b77      	ldr	r3, [pc, #476]	; (b25c <AnalogSideLights+0x728>)
    b080:	681b      	ldr	r3, [r3, #0]
    b082:	4a7b      	ldr	r2, [pc, #492]	; (b270 <AnalogSideLights+0x73c>)
    b084:	1ad2      	subs	r2, r2, r3
    b086:	4b76      	ldr	r3, [pc, #472]	; (b260 <AnalogSideLights+0x72c>)
    b088:	0010      	movs	r0, r2
    b08a:	4798      	blx	r3
    b08c:	4b64      	ldr	r3, [pc, #400]	; (b220 <AnalogSideLights+0x6ec>)
    b08e:	681a      	ldr	r2, [r3, #0]
    b090:	4b74      	ldr	r3, [pc, #464]	; (b264 <AnalogSideLights+0x730>)
    b092:	1c11      	adds	r1, r2, #0
    b094:	4798      	blx	r3
    b096:	1c03      	adds	r3, r0, #0
    b098:	1c1a      	adds	r2, r3, #0
    b09a:	4b73      	ldr	r3, [pc, #460]	; (b268 <AnalogSideLights+0x734>)
    b09c:	1c10      	adds	r0, r2, #0
    b09e:	4798      	blx	r3
    b0a0:	0003      	movs	r3, r0
    b0a2:	b29a      	uxth	r2, r3
    b0a4:	4b73      	ldr	r3, [pc, #460]	; (b274 <AnalogSideLights+0x740>)
    b0a6:	801a      	strh	r2, [r3, #0]
			
			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b0a8:	4b70      	ldr	r3, [pc, #448]	; (b26c <AnalogSideLights+0x738>)
    b0aa:	8819      	ldrh	r1, [r3, #0]
    b0ac:	4b71      	ldr	r3, [pc, #452]	; (b274 <AnalogSideLights+0x740>)
    b0ae:	881a      	ldrh	r2, [r3, #0]
    b0b0:	4b71      	ldr	r3, [pc, #452]	; (b278 <AnalogSideLights+0x744>)
    b0b2:	781b      	ldrb	r3, [r3, #0]
    b0b4:	4d66      	ldr	r5, [pc, #408]	; (b250 <AnalogSideLights+0x71c>)
    b0b6:	0038      	movs	r0, r7
    b0b8:	4c70      	ldr	r4, [pc, #448]	; (b27c <AnalogSideLights+0x748>)
    b0ba:	47a0      	blx	r4
    b0bc:	003b      	movs	r3, r7
    b0be:	0028      	movs	r0, r5
    b0c0:	0019      	movs	r1, r3
    b0c2:	230c      	movs	r3, #12
    b0c4:	001a      	movs	r2, r3
    b0c6:	4b6e      	ldr	r3, [pc, #440]	; (b280 <AnalogSideLights+0x74c>)
    b0c8:	4798      	blx	r3

			cycle_index += output_rate_sens*max_cycle_rate;
    b0ca:	4b64      	ldr	r3, [pc, #400]	; (b25c <AnalogSideLights+0x728>)
    b0cc:	681a      	ldr	r2, [r3, #0]
    b0ce:	4b64      	ldr	r3, [pc, #400]	; (b260 <AnalogSideLights+0x72c>)
    b0d0:	0010      	movs	r0, r2
    b0d2:	4798      	blx	r3
    b0d4:	1c04      	adds	r4, r0, #0
    b0d6:	4b6b      	ldr	r3, [pc, #428]	; (b284 <AnalogSideLights+0x750>)
    b0d8:	681a      	ldr	r2, [r3, #0]
    b0da:	4b62      	ldr	r3, [pc, #392]	; (b264 <AnalogSideLights+0x730>)
    b0dc:	6979      	ldr	r1, [r7, #20]
    b0de:	1c10      	adds	r0, r2, #0
    b0e0:	4798      	blx	r3
    b0e2:	1c03      	adds	r3, r0, #0
    b0e4:	1c1a      	adds	r2, r3, #0
    b0e6:	4b68      	ldr	r3, [pc, #416]	; (b288 <AnalogSideLights+0x754>)
    b0e8:	1c11      	adds	r1, r2, #0
    b0ea:	1c20      	adds	r0, r4, #0
    b0ec:	4798      	blx	r3
    b0ee:	1c03      	adds	r3, r0, #0
    b0f0:	1c1a      	adds	r2, r3, #0
    b0f2:	4b5d      	ldr	r3, [pc, #372]	; (b268 <AnalogSideLights+0x734>)
    b0f4:	1c10      	adds	r0, r2, #0
    b0f6:	4798      	blx	r3
    b0f8:	0002      	movs	r2, r0
    b0fa:	4b58      	ldr	r3, [pc, #352]	; (b25c <AnalogSideLights+0x728>)
    b0fc:	601a      	str	r2, [r3, #0]
			if(cycle_index >= 0x0FFFF){
    b0fe:	4b57      	ldr	r3, [pc, #348]	; (b25c <AnalogSideLights+0x728>)
    b100:	681b      	ldr	r3, [r3, #0]
    b102:	4a62      	ldr	r2, [pc, #392]	; (b28c <AnalogSideLights+0x758>)
    b104:	4293      	cmp	r3, r2
    b106:	d801      	bhi.n	b10c <AnalogSideLights+0x5d8>
    b108:	f001 f82d 	bl	c166 <AnalogSideLights+0x1632>
				cycle_index = 0;
    b10c:	4b53      	ldr	r3, [pc, #332]	; (b25c <AnalogSideLights+0x728>)
    b10e:	2200      	movs	r2, #0
    b110:	601a      	str	r2, [r3, #0]
				cycle += 1;
    b112:	4b59      	ldr	r3, [pc, #356]	; (b278 <AnalogSideLights+0x744>)
    b114:	781b      	ldrb	r3, [r3, #0]
    b116:	3301      	adds	r3, #1
    b118:	b2da      	uxtb	r2, r3
    b11a:	4b57      	ldr	r3, [pc, #348]	; (b278 <AnalogSideLights+0x744>)
    b11c:	701a      	strb	r2, [r3, #0]
				if(cycle == 3)
    b11e:	4b56      	ldr	r3, [pc, #344]	; (b278 <AnalogSideLights+0x744>)
    b120:	781b      	ldrb	r3, [r3, #0]
    b122:	2b03      	cmp	r3, #3
    b124:	d001      	beq.n	b12a <AnalogSideLights+0x5f6>
    b126:	f001 f81e 	bl	c166 <AnalogSideLights+0x1632>
				cycle = 0;
    b12a:	4b53      	ldr	r3, [pc, #332]	; (b278 <AnalogSideLights+0x744>)
    b12c:	2200      	movs	r2, #0
    b12e:	701a      	strb	r2, [r3, #0]
			}
			break;
    b130:	f001 f819 	bl	c166 <AnalogSideLights+0x1632>
		}
		case COLOR_COMPASS:
		{
			cycle_index = (int)(((((float)0x0FFFF) * 6) / 360) *heading) % 0x0FFFF;
    b134:	4b56      	ldr	r3, [pc, #344]	; (b290 <AnalogSideLights+0x75c>)
    b136:	681a      	ldr	r2, [r3, #0]
    b138:	4b4a      	ldr	r3, [pc, #296]	; (b264 <AnalogSideLights+0x730>)
    b13a:	4956      	ldr	r1, [pc, #344]	; (b294 <AnalogSideLights+0x760>)
    b13c:	1c10      	adds	r0, r2, #0
    b13e:	4798      	blx	r3
    b140:	1c03      	adds	r3, r0, #0
    b142:	1c1a      	adds	r2, r3, #0
    b144:	4b54      	ldr	r3, [pc, #336]	; (b298 <AnalogSideLights+0x764>)
    b146:	1c10      	adds	r0, r2, #0
    b148:	4798      	blx	r3
    b14a:	0002      	movs	r2, r0
    b14c:	4b53      	ldr	r3, [pc, #332]	; (b29c <AnalogSideLights+0x768>)
    b14e:	4948      	ldr	r1, [pc, #288]	; (b270 <AnalogSideLights+0x73c>)
    b150:	0010      	movs	r0, r2
    b152:	4798      	blx	r3
    b154:	000b      	movs	r3, r1
    b156:	001a      	movs	r2, r3
    b158:	4b40      	ldr	r3, [pc, #256]	; (b25c <AnalogSideLights+0x728>)
    b15a:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 6) / 360) *heading) / 0x0FFFF;
    b15c:	4b4c      	ldr	r3, [pc, #304]	; (b290 <AnalogSideLights+0x75c>)
    b15e:	681a      	ldr	r2, [r3, #0]
    b160:	4b40      	ldr	r3, [pc, #256]	; (b264 <AnalogSideLights+0x730>)
    b162:	494c      	ldr	r1, [pc, #304]	; (b294 <AnalogSideLights+0x760>)
    b164:	1c10      	adds	r0, r2, #0
    b166:	4798      	blx	r3
    b168:	1c03      	adds	r3, r0, #0
    b16a:	1c1a      	adds	r2, r3, #0
    b16c:	4b4a      	ldr	r3, [pc, #296]	; (b298 <AnalogSideLights+0x764>)
    b16e:	1c10      	adds	r0, r2, #0
    b170:	4798      	blx	r3
    b172:	0002      	movs	r2, r0
    b174:	4b4a      	ldr	r3, [pc, #296]	; (b2a0 <AnalogSideLights+0x76c>)
    b176:	493e      	ldr	r1, [pc, #248]	; (b270 <AnalogSideLights+0x73c>)
    b178:	0010      	movs	r0, r2
    b17a:	4798      	blx	r3
    b17c:	0003      	movs	r3, r0
    b17e:	b2da      	uxtb	r2, r3
    b180:	4b3d      	ldr	r3, [pc, #244]	; (b278 <AnalogSideLights+0x744>)
    b182:	701a      	strb	r2, [r3, #0]
			upColor = cycle_index * output_brightness;
    b184:	4b35      	ldr	r3, [pc, #212]	; (b25c <AnalogSideLights+0x728>)
    b186:	681a      	ldr	r2, [r3, #0]
    b188:	4b35      	ldr	r3, [pc, #212]	; (b260 <AnalogSideLights+0x72c>)
    b18a:	0010      	movs	r0, r2
    b18c:	4798      	blx	r3
    b18e:	4b24      	ldr	r3, [pc, #144]	; (b220 <AnalogSideLights+0x6ec>)
    b190:	681a      	ldr	r2, [r3, #0]
    b192:	4b34      	ldr	r3, [pc, #208]	; (b264 <AnalogSideLights+0x730>)
    b194:	1c11      	adds	r1, r2, #0
    b196:	4798      	blx	r3
    b198:	1c03      	adds	r3, r0, #0
    b19a:	1c1a      	adds	r2, r3, #0
    b19c:	4b32      	ldr	r3, [pc, #200]	; (b268 <AnalogSideLights+0x734>)
    b19e:	1c10      	adds	r0, r2, #0
    b1a0:	4798      	blx	r3
    b1a2:	0003      	movs	r3, r0
    b1a4:	b29a      	uxth	r2, r3
    b1a6:	4b31      	ldr	r3, [pc, #196]	; (b26c <AnalogSideLights+0x738>)
    b1a8:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b1aa:	4b2c      	ldr	r3, [pc, #176]	; (b25c <AnalogSideLights+0x728>)
    b1ac:	681b      	ldr	r3, [r3, #0]
    b1ae:	4a30      	ldr	r2, [pc, #192]	; (b270 <AnalogSideLights+0x73c>)
    b1b0:	1ad2      	subs	r2, r2, r3
    b1b2:	4b2b      	ldr	r3, [pc, #172]	; (b260 <AnalogSideLights+0x72c>)
    b1b4:	0010      	movs	r0, r2
    b1b6:	4798      	blx	r3
    b1b8:	4b19      	ldr	r3, [pc, #100]	; (b220 <AnalogSideLights+0x6ec>)
    b1ba:	681a      	ldr	r2, [r3, #0]
    b1bc:	4b29      	ldr	r3, [pc, #164]	; (b264 <AnalogSideLights+0x730>)
    b1be:	1c11      	adds	r1, r2, #0
    b1c0:	4798      	blx	r3
    b1c2:	1c03      	adds	r3, r0, #0
    b1c4:	1c1a      	adds	r2, r3, #0
    b1c6:	4b28      	ldr	r3, [pc, #160]	; (b268 <AnalogSideLights+0x734>)
    b1c8:	1c10      	adds	r0, r2, #0
    b1ca:	4798      	blx	r3
    b1cc:	0003      	movs	r3, r0
    b1ce:	b29a      	uxth	r2, r3
    b1d0:	4b28      	ldr	r3, [pc, #160]	; (b274 <AnalogSideLights+0x740>)
    b1d2:	801a      	strh	r2, [r3, #0]

			if(cycle >= 3)
    b1d4:	4b28      	ldr	r3, [pc, #160]	; (b278 <AnalogSideLights+0x744>)
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	2b02      	cmp	r3, #2
    b1da:	d905      	bls.n	b1e8 <AnalogSideLights+0x6b4>
			cycle -= 3;
    b1dc:	4b26      	ldr	r3, [pc, #152]	; (b278 <AnalogSideLights+0x744>)
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	3b03      	subs	r3, #3
    b1e2:	b2da      	uxtb	r2, r3
    b1e4:	4b24      	ldr	r3, [pc, #144]	; (b278 <AnalogSideLights+0x744>)
    b1e6:	701a      	strb	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b1e8:	4b20      	ldr	r3, [pc, #128]	; (b26c <AnalogSideLights+0x738>)
    b1ea:	8819      	ldrh	r1, [r3, #0]
    b1ec:	4b21      	ldr	r3, [pc, #132]	; (b274 <AnalogSideLights+0x740>)
    b1ee:	881a      	ldrh	r2, [r3, #0]
    b1f0:	4b21      	ldr	r3, [pc, #132]	; (b278 <AnalogSideLights+0x744>)
    b1f2:	781b      	ldrb	r3, [r3, #0]
    b1f4:	4d16      	ldr	r5, [pc, #88]	; (b250 <AnalogSideLights+0x71c>)
    b1f6:	0038      	movs	r0, r7
    b1f8:	4c20      	ldr	r4, [pc, #128]	; (b27c <AnalogSideLights+0x748>)
    b1fa:	47a0      	blx	r4
    b1fc:	003b      	movs	r3, r7
    b1fe:	0028      	movs	r0, r5
    b200:	0019      	movs	r1, r3
    b202:	230c      	movs	r3, #12
    b204:	001a      	movs	r2, r3
    b206:	4b1e      	ldr	r3, [pc, #120]	; (b280 <AnalogSideLights+0x74c>)
    b208:	4798      	blx	r3
			break;
    b20a:	f000 ffad 	bl	c168 <AnalogSideLights+0x1634>
    b20e:	46c0      	nop			; (mov r8, r8)
    b210:	20000374 	.word	0x20000374
    b214:	0001950d 	.word	0x0001950d
    b218:	2000001c 	.word	0x2000001c
    b21c:	00019941 	.word	0x00019941
    b220:	20000464 	.word	0x20000464
    b224:	20000020 	.word	0x20000020
    b228:	00019501 	.word	0x00019501
    b22c:	200000de 	.word	0x200000de
    b230:	200003bc 	.word	0x200003bc
    b234:	00009fbd 	.word	0x00009fbd
    b238:	00009f65 	.word	0x00009f65
    b23c:	200000dc 	.word	0x200000dc
    b240:	00019535 	.word	0x00019535
    b244:	2000003c 	.word	0x2000003c
    b248:	20000094 	.word	0x20000094
    b24c:	0001c698 	.word	0x0001c698
    b250:	20000394 	.word	0x20000394
    b254:	20000040 	.word	0x20000040
    b258:	200000c4 	.word	0x200000c4
    b25c:	200003b4 	.word	0x200003b4
    b260:	0001a379 	.word	0x0001a379
    b264:	00019d21 	.word	0x00019d21
    b268:	000195b1 	.word	0x000195b1
    b26c:	200003b8 	.word	0x200003b8
    b270:	0000ffff 	.word	0x0000ffff
    b274:	200003ba 	.word	0x200003ba
    b278:	200003b2 	.word	0x200003b2
    b27c:	0000a5d1 	.word	0x0000a5d1
    b280:	0001c15d 	.word	0x0001c15d
    b284:	200000d8 	.word	0x200000d8
    b288:	0001961d 	.word	0x0001961d
    b28c:	0000fffe 	.word	0x0000fffe
    b290:	20000384 	.word	0x20000384
    b294:	44888800 	.word	0x44888800
    b298:	0001a299 	.word	0x0001a299
    b29c:	00019461 	.word	0x00019461
    b2a0:	00019295 	.word	0x00019295
		}
		case COLOR_YAW_RATE:
		{
			if(gzKalman < 0)
    b2a4:	4b7b      	ldr	r3, [pc, #492]	; (b494 <AnalogSideLights+0x960>)
    b2a6:	681a      	ldr	r2, [r3, #0]
    b2a8:	4b7b      	ldr	r3, [pc, #492]	; (b498 <AnalogSideLights+0x964>)
    b2aa:	2100      	movs	r1, #0
    b2ac:	1c10      	adds	r0, r2, #0
    b2ae:	4798      	blx	r3
    b2b0:	1e03      	subs	r3, r0, #0
    b2b2:	d02a      	beq.n	b30a <AnalogSideLights+0x7d6>
			cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) % 0x0FFFF;
    b2b4:	4b79      	ldr	r3, [pc, #484]	; (b49c <AnalogSideLights+0x968>)
    b2b6:	681a      	ldr	r2, [r3, #0]
    b2b8:	4b79      	ldr	r3, [pc, #484]	; (b4a0 <AnalogSideLights+0x96c>)
    b2ba:	1c10      	adds	r0, r2, #0
    b2bc:	4798      	blx	r3
    b2be:	0002      	movs	r2, r0
    b2c0:	000b      	movs	r3, r1
    b2c2:	4c78      	ldr	r4, [pc, #480]	; (b4a4 <AnalogSideLights+0x970>)
    b2c4:	2000      	movs	r0, #0
    b2c6:	4978      	ldr	r1, [pc, #480]	; (b4a8 <AnalogSideLights+0x974>)
    b2c8:	47a0      	blx	r4
    b2ca:	0003      	movs	r3, r0
    b2cc:	000c      	movs	r4, r1
    b2ce:	001d      	movs	r5, r3
    b2d0:	0026      	movs	r6, r4
    b2d2:	4b70      	ldr	r3, [pc, #448]	; (b494 <AnalogSideLights+0x960>)
    b2d4:	681a      	ldr	r2, [r3, #0]
    b2d6:	4b72      	ldr	r3, [pc, #456]	; (b4a0 <AnalogSideLights+0x96c>)
    b2d8:	1c10      	adds	r0, r2, #0
    b2da:	4798      	blx	r3
    b2dc:	0002      	movs	r2, r0
    b2de:	000b      	movs	r3, r1
    b2e0:	4c72      	ldr	r4, [pc, #456]	; (b4ac <AnalogSideLights+0x978>)
    b2e2:	0028      	movs	r0, r5
    b2e4:	0031      	movs	r1, r6
    b2e6:	47a0      	blx	r4
    b2e8:	0003      	movs	r3, r0
    b2ea:	000c      	movs	r4, r1
    b2ec:	0019      	movs	r1, r3
    b2ee:	0022      	movs	r2, r4
    b2f0:	4b6f      	ldr	r3, [pc, #444]	; (b4b0 <AnalogSideLights+0x97c>)
    b2f2:	0008      	movs	r0, r1
    b2f4:	0011      	movs	r1, r2
    b2f6:	4798      	blx	r3
    b2f8:	0002      	movs	r2, r0
    b2fa:	4b6e      	ldr	r3, [pc, #440]	; (b4b4 <AnalogSideLights+0x980>)
    b2fc:	496e      	ldr	r1, [pc, #440]	; (b4b8 <AnalogSideLights+0x984>)
    b2fe:	0010      	movs	r0, r2
    b300:	4798      	blx	r3
    b302:	000b      	movs	r3, r1
    b304:	001a      	movs	r2, r3
    b306:	4b6d      	ldr	r3, [pc, #436]	; (b4bc <AnalogSideLights+0x988>)
    b308:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) / 0x0FFFF;
    b30a:	4b64      	ldr	r3, [pc, #400]	; (b49c <AnalogSideLights+0x968>)
    b30c:	681a      	ldr	r2, [r3, #0]
    b30e:	4b64      	ldr	r3, [pc, #400]	; (b4a0 <AnalogSideLights+0x96c>)
    b310:	1c10      	adds	r0, r2, #0
    b312:	4798      	blx	r3
    b314:	0002      	movs	r2, r0
    b316:	000b      	movs	r3, r1
    b318:	4c62      	ldr	r4, [pc, #392]	; (b4a4 <AnalogSideLights+0x970>)
    b31a:	2000      	movs	r0, #0
    b31c:	4962      	ldr	r1, [pc, #392]	; (b4a8 <AnalogSideLights+0x974>)
    b31e:	47a0      	blx	r4
    b320:	0003      	movs	r3, r0
    b322:	000c      	movs	r4, r1
    b324:	001d      	movs	r5, r3
    b326:	0026      	movs	r6, r4
    b328:	4b5a      	ldr	r3, [pc, #360]	; (b494 <AnalogSideLights+0x960>)
    b32a:	681a      	ldr	r2, [r3, #0]
    b32c:	4b5c      	ldr	r3, [pc, #368]	; (b4a0 <AnalogSideLights+0x96c>)
    b32e:	1c10      	adds	r0, r2, #0
    b330:	4798      	blx	r3
    b332:	0002      	movs	r2, r0
    b334:	000b      	movs	r3, r1
    b336:	4c5d      	ldr	r4, [pc, #372]	; (b4ac <AnalogSideLights+0x978>)
    b338:	0028      	movs	r0, r5
    b33a:	0031      	movs	r1, r6
    b33c:	47a0      	blx	r4
    b33e:	0003      	movs	r3, r0
    b340:	000c      	movs	r4, r1
    b342:	0019      	movs	r1, r3
    b344:	0022      	movs	r2, r4
    b346:	4b5a      	ldr	r3, [pc, #360]	; (b4b0 <AnalogSideLights+0x97c>)
    b348:	0008      	movs	r0, r1
    b34a:	0011      	movs	r1, r2
    b34c:	4798      	blx	r3
    b34e:	0002      	movs	r2, r0
    b350:	4b5b      	ldr	r3, [pc, #364]	; (b4c0 <AnalogSideLights+0x98c>)
    b352:	4959      	ldr	r1, [pc, #356]	; (b4b8 <AnalogSideLights+0x984>)
    b354:	0010      	movs	r0, r2
    b356:	4798      	blx	r3
    b358:	0003      	movs	r3, r0
    b35a:	b2da      	uxtb	r2, r3
    b35c:	4b59      	ldr	r3, [pc, #356]	; (b4c4 <AnalogSideLights+0x990>)
    b35e:	701a      	strb	r2, [r3, #0]
			if(gzKalman >= 0){
    b360:	4b4c      	ldr	r3, [pc, #304]	; (b494 <AnalogSideLights+0x960>)
    b362:	681a      	ldr	r2, [r3, #0]
    b364:	4b58      	ldr	r3, [pc, #352]	; (b4c8 <AnalogSideLights+0x994>)
    b366:	2100      	movs	r1, #0
    b368:	1c10      	adds	r0, r2, #0
    b36a:	4798      	blx	r3
    b36c:	1e03      	subs	r3, r0, #0
    b36e:	d055      	beq.n	b41c <AnalogSideLights+0x8e8>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) % 0x0FFFF;
    b370:	4b56      	ldr	r3, [pc, #344]	; (b4cc <AnalogSideLights+0x998>)
    b372:	681a      	ldr	r2, [r3, #0]
    b374:	4b4a      	ldr	r3, [pc, #296]	; (b4a0 <AnalogSideLights+0x96c>)
    b376:	1c10      	adds	r0, r2, #0
    b378:	4798      	blx	r3
    b37a:	0002      	movs	r2, r0
    b37c:	000b      	movs	r3, r1
    b37e:	4c49      	ldr	r4, [pc, #292]	; (b4a4 <AnalogSideLights+0x970>)
    b380:	2000      	movs	r0, #0
    b382:	4949      	ldr	r1, [pc, #292]	; (b4a8 <AnalogSideLights+0x974>)
    b384:	47a0      	blx	r4
    b386:	0003      	movs	r3, r0
    b388:	000c      	movs	r4, r1
    b38a:	001d      	movs	r5, r3
    b38c:	0026      	movs	r6, r4
    b38e:	4b41      	ldr	r3, [pc, #260]	; (b494 <AnalogSideLights+0x960>)
    b390:	681a      	ldr	r2, [r3, #0]
    b392:	4b43      	ldr	r3, [pc, #268]	; (b4a0 <AnalogSideLights+0x96c>)
    b394:	1c10      	adds	r0, r2, #0
    b396:	4798      	blx	r3
    b398:	0002      	movs	r2, r0
    b39a:	000b      	movs	r3, r1
    b39c:	4c43      	ldr	r4, [pc, #268]	; (b4ac <AnalogSideLights+0x978>)
    b39e:	0028      	movs	r0, r5
    b3a0:	0031      	movs	r1, r6
    b3a2:	47a0      	blx	r4
    b3a4:	0003      	movs	r3, r0
    b3a6:	000c      	movs	r4, r1
    b3a8:	0019      	movs	r1, r3
    b3aa:	0022      	movs	r2, r4
    b3ac:	4b40      	ldr	r3, [pc, #256]	; (b4b0 <AnalogSideLights+0x97c>)
    b3ae:	0008      	movs	r0, r1
    b3b0:	0011      	movs	r1, r2
    b3b2:	4798      	blx	r3
    b3b4:	0002      	movs	r2, r0
    b3b6:	4b3f      	ldr	r3, [pc, #252]	; (b4b4 <AnalogSideLights+0x980>)
    b3b8:	493f      	ldr	r1, [pc, #252]	; (b4b8 <AnalogSideLights+0x984>)
    b3ba:	0010      	movs	r0, r2
    b3bc:	4798      	blx	r3
    b3be:	000b      	movs	r3, r1
    b3c0:	001a      	movs	r2, r3
    b3c2:	4b3e      	ldr	r3, [pc, #248]	; (b4bc <AnalogSideLights+0x988>)
    b3c4:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) / 0x0FFFF;
    b3c6:	4b41      	ldr	r3, [pc, #260]	; (b4cc <AnalogSideLights+0x998>)
    b3c8:	681a      	ldr	r2, [r3, #0]
    b3ca:	4b35      	ldr	r3, [pc, #212]	; (b4a0 <AnalogSideLights+0x96c>)
    b3cc:	1c10      	adds	r0, r2, #0
    b3ce:	4798      	blx	r3
    b3d0:	0002      	movs	r2, r0
    b3d2:	000b      	movs	r3, r1
    b3d4:	4c33      	ldr	r4, [pc, #204]	; (b4a4 <AnalogSideLights+0x970>)
    b3d6:	2000      	movs	r0, #0
    b3d8:	4933      	ldr	r1, [pc, #204]	; (b4a8 <AnalogSideLights+0x974>)
    b3da:	47a0      	blx	r4
    b3dc:	0003      	movs	r3, r0
    b3de:	000c      	movs	r4, r1
    b3e0:	001d      	movs	r5, r3
    b3e2:	0026      	movs	r6, r4
    b3e4:	4b2b      	ldr	r3, [pc, #172]	; (b494 <AnalogSideLights+0x960>)
    b3e6:	681a      	ldr	r2, [r3, #0]
    b3e8:	4b2d      	ldr	r3, [pc, #180]	; (b4a0 <AnalogSideLights+0x96c>)
    b3ea:	1c10      	adds	r0, r2, #0
    b3ec:	4798      	blx	r3
    b3ee:	0002      	movs	r2, r0
    b3f0:	000b      	movs	r3, r1
    b3f2:	4c2e      	ldr	r4, [pc, #184]	; (b4ac <AnalogSideLights+0x978>)
    b3f4:	0028      	movs	r0, r5
    b3f6:	0031      	movs	r1, r6
    b3f8:	47a0      	blx	r4
    b3fa:	0003      	movs	r3, r0
    b3fc:	000c      	movs	r4, r1
    b3fe:	0019      	movs	r1, r3
    b400:	0022      	movs	r2, r4
    b402:	4b2b      	ldr	r3, [pc, #172]	; (b4b0 <AnalogSideLights+0x97c>)
    b404:	0008      	movs	r0, r1
    b406:	0011      	movs	r1, r2
    b408:	4798      	blx	r3
    b40a:	0002      	movs	r2, r0
    b40c:	4b2c      	ldr	r3, [pc, #176]	; (b4c0 <AnalogSideLights+0x98c>)
    b40e:	492a      	ldr	r1, [pc, #168]	; (b4b8 <AnalogSideLights+0x984>)
    b410:	0010      	movs	r0, r2
    b412:	4798      	blx	r3
    b414:	0003      	movs	r3, r0
    b416:	b2da      	uxtb	r2, r3
    b418:	4b2a      	ldr	r3, [pc, #168]	; (b4c4 <AnalogSideLights+0x990>)
    b41a:	701a      	strb	r2, [r3, #0]
			}
			
			upColor = cycle_index * output_brightness;
    b41c:	4b27      	ldr	r3, [pc, #156]	; (b4bc <AnalogSideLights+0x988>)
    b41e:	681a      	ldr	r2, [r3, #0]
    b420:	4b2b      	ldr	r3, [pc, #172]	; (b4d0 <AnalogSideLights+0x99c>)
    b422:	0010      	movs	r0, r2
    b424:	4798      	blx	r3
    b426:	4b2b      	ldr	r3, [pc, #172]	; (b4d4 <AnalogSideLights+0x9a0>)
    b428:	681a      	ldr	r2, [r3, #0]
    b42a:	4b2b      	ldr	r3, [pc, #172]	; (b4d8 <AnalogSideLights+0x9a4>)
    b42c:	1c11      	adds	r1, r2, #0
    b42e:	4798      	blx	r3
    b430:	1c03      	adds	r3, r0, #0
    b432:	1c1a      	adds	r2, r3, #0
    b434:	4b29      	ldr	r3, [pc, #164]	; (b4dc <AnalogSideLights+0x9a8>)
    b436:	1c10      	adds	r0, r2, #0
    b438:	4798      	blx	r3
    b43a:	0003      	movs	r3, r0
    b43c:	b29a      	uxth	r2, r3
    b43e:	4b28      	ldr	r3, [pc, #160]	; (b4e0 <AnalogSideLights+0x9ac>)
    b440:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b442:	4b1e      	ldr	r3, [pc, #120]	; (b4bc <AnalogSideLights+0x988>)
    b444:	681b      	ldr	r3, [r3, #0]
    b446:	4a1c      	ldr	r2, [pc, #112]	; (b4b8 <AnalogSideLights+0x984>)
    b448:	1ad2      	subs	r2, r2, r3
    b44a:	4b21      	ldr	r3, [pc, #132]	; (b4d0 <AnalogSideLights+0x99c>)
    b44c:	0010      	movs	r0, r2
    b44e:	4798      	blx	r3
    b450:	4b20      	ldr	r3, [pc, #128]	; (b4d4 <AnalogSideLights+0x9a0>)
    b452:	681a      	ldr	r2, [r3, #0]
    b454:	4b20      	ldr	r3, [pc, #128]	; (b4d8 <AnalogSideLights+0x9a4>)
    b456:	1c11      	adds	r1, r2, #0
    b458:	4798      	blx	r3
    b45a:	1c03      	adds	r3, r0, #0
    b45c:	1c1a      	adds	r2, r3, #0
    b45e:	4b1f      	ldr	r3, [pc, #124]	; (b4dc <AnalogSideLights+0x9a8>)
    b460:	1c10      	adds	r0, r2, #0
    b462:	4798      	blx	r3
    b464:	0003      	movs	r3, r0
    b466:	b29a      	uxth	r2, r3
    b468:	4b1e      	ldr	r3, [pc, #120]	; (b4e4 <AnalogSideLights+0x9b0>)
    b46a:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b46c:	4b1c      	ldr	r3, [pc, #112]	; (b4e0 <AnalogSideLights+0x9ac>)
    b46e:	8819      	ldrh	r1, [r3, #0]
    b470:	4b1c      	ldr	r3, [pc, #112]	; (b4e4 <AnalogSideLights+0x9b0>)
    b472:	881a      	ldrh	r2, [r3, #0]
    b474:	4b13      	ldr	r3, [pc, #76]	; (b4c4 <AnalogSideLights+0x990>)
    b476:	781b      	ldrb	r3, [r3, #0]
    b478:	4d1b      	ldr	r5, [pc, #108]	; (b4e8 <AnalogSideLights+0x9b4>)
    b47a:	0038      	movs	r0, r7
    b47c:	4c1b      	ldr	r4, [pc, #108]	; (b4ec <AnalogSideLights+0x9b8>)
    b47e:	47a0      	blx	r4
    b480:	003b      	movs	r3, r7
    b482:	0028      	movs	r0, r5
    b484:	0019      	movs	r1, r3
    b486:	230c      	movs	r3, #12
    b488:	001a      	movs	r2, r3
    b48a:	4b19      	ldr	r3, [pc, #100]	; (b4f0 <AnalogSideLights+0x9bc>)
    b48c:	4798      	blx	r3
			break;
    b48e:	f000 fe6b 	bl	c168 <AnalogSideLights+0x1634>
    b492:	46c0      	nop			; (mov r8, r8)
    b494:	20000380 	.word	0x20000380
    b498:	0001950d 	.word	0x0001950d
    b49c:	20000034 	.word	0x20000034
    b4a0:	0001bf15 	.word	0x0001bf15
    b4a4:	0001aa25 	.word	0x0001aa25
    b4a8:	4107ffe8 	.word	0x4107ffe8
    b4ac:	0001b28d 	.word	0x0001b28d
    b4b0:	0001bdb9 	.word	0x0001bdb9
    b4b4:	00019461 	.word	0x00019461
    b4b8:	0000ffff 	.word	0x0000ffff
    b4bc:	200003b4 	.word	0x200003b4
    b4c0:	00019295 	.word	0x00019295
    b4c4:	200003b2 	.word	0x200003b2
    b4c8:	00019549 	.word	0x00019549
    b4cc:	20000038 	.word	0x20000038
    b4d0:	0001a379 	.word	0x0001a379
    b4d4:	20000464 	.word	0x20000464
    b4d8:	00019d21 	.word	0x00019d21
    b4dc:	000195b1 	.word	0x000195b1
    b4e0:	200003b8 	.word	0x200003b8
    b4e4:	200003ba 	.word	0x200003ba
    b4e8:	20000394 	.word	0x20000394
    b4ec:	0000a5d1 	.word	0x0000a5d1
    b4f0:	0001c15d 	.word	0x0001c15d
		}
		case COLOR_ROLL_RATE:
		{
			if(gyKalman < 0)
    b4f4:	4b7b      	ldr	r3, [pc, #492]	; (b6e4 <AnalogSideLights+0xbb0>)
    b4f6:	681a      	ldr	r2, [r3, #0]
    b4f8:	4b7b      	ldr	r3, [pc, #492]	; (b6e8 <AnalogSideLights+0xbb4>)
    b4fa:	2100      	movs	r1, #0
    b4fc:	1c10      	adds	r0, r2, #0
    b4fe:	4798      	blx	r3
    b500:	1e03      	subs	r3, r0, #0
    b502:	d02a      	beq.n	b55a <AnalogSideLights+0xa26>
			cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) % 0x0FFFF;
    b504:	4b79      	ldr	r3, [pc, #484]	; (b6ec <AnalogSideLights+0xbb8>)
    b506:	681a      	ldr	r2, [r3, #0]
    b508:	4b79      	ldr	r3, [pc, #484]	; (b6f0 <AnalogSideLights+0xbbc>)
    b50a:	1c10      	adds	r0, r2, #0
    b50c:	4798      	blx	r3
    b50e:	0002      	movs	r2, r0
    b510:	000b      	movs	r3, r1
    b512:	4c78      	ldr	r4, [pc, #480]	; (b6f4 <AnalogSideLights+0xbc0>)
    b514:	2000      	movs	r0, #0
    b516:	4978      	ldr	r1, [pc, #480]	; (b6f8 <AnalogSideLights+0xbc4>)
    b518:	47a0      	blx	r4
    b51a:	0003      	movs	r3, r0
    b51c:	000c      	movs	r4, r1
    b51e:	001d      	movs	r5, r3
    b520:	0026      	movs	r6, r4
    b522:	4b70      	ldr	r3, [pc, #448]	; (b6e4 <AnalogSideLights+0xbb0>)
    b524:	681a      	ldr	r2, [r3, #0]
    b526:	4b72      	ldr	r3, [pc, #456]	; (b6f0 <AnalogSideLights+0xbbc>)
    b528:	1c10      	adds	r0, r2, #0
    b52a:	4798      	blx	r3
    b52c:	0002      	movs	r2, r0
    b52e:	000b      	movs	r3, r1
    b530:	4c72      	ldr	r4, [pc, #456]	; (b6fc <AnalogSideLights+0xbc8>)
    b532:	0028      	movs	r0, r5
    b534:	0031      	movs	r1, r6
    b536:	47a0      	blx	r4
    b538:	0003      	movs	r3, r0
    b53a:	000c      	movs	r4, r1
    b53c:	0019      	movs	r1, r3
    b53e:	0022      	movs	r2, r4
    b540:	4b6f      	ldr	r3, [pc, #444]	; (b700 <AnalogSideLights+0xbcc>)
    b542:	0008      	movs	r0, r1
    b544:	0011      	movs	r1, r2
    b546:	4798      	blx	r3
    b548:	0002      	movs	r2, r0
    b54a:	4b6e      	ldr	r3, [pc, #440]	; (b704 <AnalogSideLights+0xbd0>)
    b54c:	496e      	ldr	r1, [pc, #440]	; (b708 <AnalogSideLights+0xbd4>)
    b54e:	0010      	movs	r0, r2
    b550:	4798      	blx	r3
    b552:	000b      	movs	r3, r1
    b554:	001a      	movs	r2, r3
    b556:	4b6d      	ldr	r3, [pc, #436]	; (b70c <AnalogSideLights+0xbd8>)
    b558:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) / 0x0FFFF;
    b55a:	4b64      	ldr	r3, [pc, #400]	; (b6ec <AnalogSideLights+0xbb8>)
    b55c:	681a      	ldr	r2, [r3, #0]
    b55e:	4b64      	ldr	r3, [pc, #400]	; (b6f0 <AnalogSideLights+0xbbc>)
    b560:	1c10      	adds	r0, r2, #0
    b562:	4798      	blx	r3
    b564:	0002      	movs	r2, r0
    b566:	000b      	movs	r3, r1
    b568:	4c62      	ldr	r4, [pc, #392]	; (b6f4 <AnalogSideLights+0xbc0>)
    b56a:	2000      	movs	r0, #0
    b56c:	4962      	ldr	r1, [pc, #392]	; (b6f8 <AnalogSideLights+0xbc4>)
    b56e:	47a0      	blx	r4
    b570:	0003      	movs	r3, r0
    b572:	000c      	movs	r4, r1
    b574:	001d      	movs	r5, r3
    b576:	0026      	movs	r6, r4
    b578:	4b5a      	ldr	r3, [pc, #360]	; (b6e4 <AnalogSideLights+0xbb0>)
    b57a:	681a      	ldr	r2, [r3, #0]
    b57c:	4b5c      	ldr	r3, [pc, #368]	; (b6f0 <AnalogSideLights+0xbbc>)
    b57e:	1c10      	adds	r0, r2, #0
    b580:	4798      	blx	r3
    b582:	0002      	movs	r2, r0
    b584:	000b      	movs	r3, r1
    b586:	4c5d      	ldr	r4, [pc, #372]	; (b6fc <AnalogSideLights+0xbc8>)
    b588:	0028      	movs	r0, r5
    b58a:	0031      	movs	r1, r6
    b58c:	47a0      	blx	r4
    b58e:	0003      	movs	r3, r0
    b590:	000c      	movs	r4, r1
    b592:	0019      	movs	r1, r3
    b594:	0022      	movs	r2, r4
    b596:	4b5a      	ldr	r3, [pc, #360]	; (b700 <AnalogSideLights+0xbcc>)
    b598:	0008      	movs	r0, r1
    b59a:	0011      	movs	r1, r2
    b59c:	4798      	blx	r3
    b59e:	0002      	movs	r2, r0
    b5a0:	4b5b      	ldr	r3, [pc, #364]	; (b710 <AnalogSideLights+0xbdc>)
    b5a2:	4959      	ldr	r1, [pc, #356]	; (b708 <AnalogSideLights+0xbd4>)
    b5a4:	0010      	movs	r0, r2
    b5a6:	4798      	blx	r3
    b5a8:	0003      	movs	r3, r0
    b5aa:	b2da      	uxtb	r2, r3
    b5ac:	4b59      	ldr	r3, [pc, #356]	; (b714 <AnalogSideLights+0xbe0>)
    b5ae:	701a      	strb	r2, [r3, #0]
			if(gyKalman >= 0){
    b5b0:	4b4c      	ldr	r3, [pc, #304]	; (b6e4 <AnalogSideLights+0xbb0>)
    b5b2:	681a      	ldr	r2, [r3, #0]
    b5b4:	4b58      	ldr	r3, [pc, #352]	; (b718 <AnalogSideLights+0xbe4>)
    b5b6:	2100      	movs	r1, #0
    b5b8:	1c10      	adds	r0, r2, #0
    b5ba:	4798      	blx	r3
    b5bc:	1e03      	subs	r3, r0, #0
    b5be:	d055      	beq.n	b66c <AnalogSideLights+0xb38>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) % 0x0FFFF;
    b5c0:	4b56      	ldr	r3, [pc, #344]	; (b71c <AnalogSideLights+0xbe8>)
    b5c2:	681a      	ldr	r2, [r3, #0]
    b5c4:	4b4a      	ldr	r3, [pc, #296]	; (b6f0 <AnalogSideLights+0xbbc>)
    b5c6:	1c10      	adds	r0, r2, #0
    b5c8:	4798      	blx	r3
    b5ca:	0002      	movs	r2, r0
    b5cc:	000b      	movs	r3, r1
    b5ce:	4c49      	ldr	r4, [pc, #292]	; (b6f4 <AnalogSideLights+0xbc0>)
    b5d0:	2000      	movs	r0, #0
    b5d2:	4949      	ldr	r1, [pc, #292]	; (b6f8 <AnalogSideLights+0xbc4>)
    b5d4:	47a0      	blx	r4
    b5d6:	0003      	movs	r3, r0
    b5d8:	000c      	movs	r4, r1
    b5da:	001d      	movs	r5, r3
    b5dc:	0026      	movs	r6, r4
    b5de:	4b41      	ldr	r3, [pc, #260]	; (b6e4 <AnalogSideLights+0xbb0>)
    b5e0:	681a      	ldr	r2, [r3, #0]
    b5e2:	4b43      	ldr	r3, [pc, #268]	; (b6f0 <AnalogSideLights+0xbbc>)
    b5e4:	1c10      	adds	r0, r2, #0
    b5e6:	4798      	blx	r3
    b5e8:	0002      	movs	r2, r0
    b5ea:	000b      	movs	r3, r1
    b5ec:	4c43      	ldr	r4, [pc, #268]	; (b6fc <AnalogSideLights+0xbc8>)
    b5ee:	0028      	movs	r0, r5
    b5f0:	0031      	movs	r1, r6
    b5f2:	47a0      	blx	r4
    b5f4:	0003      	movs	r3, r0
    b5f6:	000c      	movs	r4, r1
    b5f8:	0019      	movs	r1, r3
    b5fa:	0022      	movs	r2, r4
    b5fc:	4b40      	ldr	r3, [pc, #256]	; (b700 <AnalogSideLights+0xbcc>)
    b5fe:	0008      	movs	r0, r1
    b600:	0011      	movs	r1, r2
    b602:	4798      	blx	r3
    b604:	0002      	movs	r2, r0
    b606:	4b3f      	ldr	r3, [pc, #252]	; (b704 <AnalogSideLights+0xbd0>)
    b608:	493f      	ldr	r1, [pc, #252]	; (b708 <AnalogSideLights+0xbd4>)
    b60a:	0010      	movs	r0, r2
    b60c:	4798      	blx	r3
    b60e:	000b      	movs	r3, r1
    b610:	001a      	movs	r2, r3
    b612:	4b3e      	ldr	r3, [pc, #248]	; (b70c <AnalogSideLights+0xbd8>)
    b614:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) / 0x0FFFF;
    b616:	4b41      	ldr	r3, [pc, #260]	; (b71c <AnalogSideLights+0xbe8>)
    b618:	681a      	ldr	r2, [r3, #0]
    b61a:	4b35      	ldr	r3, [pc, #212]	; (b6f0 <AnalogSideLights+0xbbc>)
    b61c:	1c10      	adds	r0, r2, #0
    b61e:	4798      	blx	r3
    b620:	0002      	movs	r2, r0
    b622:	000b      	movs	r3, r1
    b624:	4c33      	ldr	r4, [pc, #204]	; (b6f4 <AnalogSideLights+0xbc0>)
    b626:	2000      	movs	r0, #0
    b628:	4933      	ldr	r1, [pc, #204]	; (b6f8 <AnalogSideLights+0xbc4>)
    b62a:	47a0      	blx	r4
    b62c:	0003      	movs	r3, r0
    b62e:	000c      	movs	r4, r1
    b630:	001d      	movs	r5, r3
    b632:	0026      	movs	r6, r4
    b634:	4b2b      	ldr	r3, [pc, #172]	; (b6e4 <AnalogSideLights+0xbb0>)
    b636:	681a      	ldr	r2, [r3, #0]
    b638:	4b2d      	ldr	r3, [pc, #180]	; (b6f0 <AnalogSideLights+0xbbc>)
    b63a:	1c10      	adds	r0, r2, #0
    b63c:	4798      	blx	r3
    b63e:	0002      	movs	r2, r0
    b640:	000b      	movs	r3, r1
    b642:	4c2e      	ldr	r4, [pc, #184]	; (b6fc <AnalogSideLights+0xbc8>)
    b644:	0028      	movs	r0, r5
    b646:	0031      	movs	r1, r6
    b648:	47a0      	blx	r4
    b64a:	0003      	movs	r3, r0
    b64c:	000c      	movs	r4, r1
    b64e:	0019      	movs	r1, r3
    b650:	0022      	movs	r2, r4
    b652:	4b2b      	ldr	r3, [pc, #172]	; (b700 <AnalogSideLights+0xbcc>)
    b654:	0008      	movs	r0, r1
    b656:	0011      	movs	r1, r2
    b658:	4798      	blx	r3
    b65a:	0002      	movs	r2, r0
    b65c:	4b2c      	ldr	r3, [pc, #176]	; (b710 <AnalogSideLights+0xbdc>)
    b65e:	492a      	ldr	r1, [pc, #168]	; (b708 <AnalogSideLights+0xbd4>)
    b660:	0010      	movs	r0, r2
    b662:	4798      	blx	r3
    b664:	0003      	movs	r3, r0
    b666:	b2da      	uxtb	r2, r3
    b668:	4b2a      	ldr	r3, [pc, #168]	; (b714 <AnalogSideLights+0xbe0>)
    b66a:	701a      	strb	r2, [r3, #0]
			}
			
			upColor = cycle_index * output_brightness;
    b66c:	4b27      	ldr	r3, [pc, #156]	; (b70c <AnalogSideLights+0xbd8>)
    b66e:	681a      	ldr	r2, [r3, #0]
    b670:	4b2b      	ldr	r3, [pc, #172]	; (b720 <AnalogSideLights+0xbec>)
    b672:	0010      	movs	r0, r2
    b674:	4798      	blx	r3
    b676:	4b2b      	ldr	r3, [pc, #172]	; (b724 <AnalogSideLights+0xbf0>)
    b678:	681a      	ldr	r2, [r3, #0]
    b67a:	4b2b      	ldr	r3, [pc, #172]	; (b728 <AnalogSideLights+0xbf4>)
    b67c:	1c11      	adds	r1, r2, #0
    b67e:	4798      	blx	r3
    b680:	1c03      	adds	r3, r0, #0
    b682:	1c1a      	adds	r2, r3, #0
    b684:	4b29      	ldr	r3, [pc, #164]	; (b72c <AnalogSideLights+0xbf8>)
    b686:	1c10      	adds	r0, r2, #0
    b688:	4798      	blx	r3
    b68a:	0003      	movs	r3, r0
    b68c:	b29a      	uxth	r2, r3
    b68e:	4b28      	ldr	r3, [pc, #160]	; (b730 <AnalogSideLights+0xbfc>)
    b690:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b692:	4b1e      	ldr	r3, [pc, #120]	; (b70c <AnalogSideLights+0xbd8>)
    b694:	681b      	ldr	r3, [r3, #0]
    b696:	4a1c      	ldr	r2, [pc, #112]	; (b708 <AnalogSideLights+0xbd4>)
    b698:	1ad2      	subs	r2, r2, r3
    b69a:	4b21      	ldr	r3, [pc, #132]	; (b720 <AnalogSideLights+0xbec>)
    b69c:	0010      	movs	r0, r2
    b69e:	4798      	blx	r3
    b6a0:	4b20      	ldr	r3, [pc, #128]	; (b724 <AnalogSideLights+0xbf0>)
    b6a2:	681a      	ldr	r2, [r3, #0]
    b6a4:	4b20      	ldr	r3, [pc, #128]	; (b728 <AnalogSideLights+0xbf4>)
    b6a6:	1c11      	adds	r1, r2, #0
    b6a8:	4798      	blx	r3
    b6aa:	1c03      	adds	r3, r0, #0
    b6ac:	1c1a      	adds	r2, r3, #0
    b6ae:	4b1f      	ldr	r3, [pc, #124]	; (b72c <AnalogSideLights+0xbf8>)
    b6b0:	1c10      	adds	r0, r2, #0
    b6b2:	4798      	blx	r3
    b6b4:	0003      	movs	r3, r0
    b6b6:	b29a      	uxth	r2, r3
    b6b8:	4b1e      	ldr	r3, [pc, #120]	; (b734 <AnalogSideLights+0xc00>)
    b6ba:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b6bc:	4b1c      	ldr	r3, [pc, #112]	; (b730 <AnalogSideLights+0xbfc>)
    b6be:	8819      	ldrh	r1, [r3, #0]
    b6c0:	4b1c      	ldr	r3, [pc, #112]	; (b734 <AnalogSideLights+0xc00>)
    b6c2:	881a      	ldrh	r2, [r3, #0]
    b6c4:	4b13      	ldr	r3, [pc, #76]	; (b714 <AnalogSideLights+0xbe0>)
    b6c6:	781b      	ldrb	r3, [r3, #0]
    b6c8:	4d1b      	ldr	r5, [pc, #108]	; (b738 <AnalogSideLights+0xc04>)
    b6ca:	0038      	movs	r0, r7
    b6cc:	4c1b      	ldr	r4, [pc, #108]	; (b73c <AnalogSideLights+0xc08>)
    b6ce:	47a0      	blx	r4
    b6d0:	003b      	movs	r3, r7
    b6d2:	0028      	movs	r0, r5
    b6d4:	0019      	movs	r1, r3
    b6d6:	230c      	movs	r3, #12
    b6d8:	001a      	movs	r2, r3
    b6da:	4b19      	ldr	r3, [pc, #100]	; (b740 <AnalogSideLights+0xc0c>)
    b6dc:	4798      	blx	r3
			break;
    b6de:	f000 fd43 	bl	c168 <AnalogSideLights+0x1634>
    b6e2:	46c0      	nop			; (mov r8, r8)
    b6e4:	2000037c 	.word	0x2000037c
    b6e8:	0001950d 	.word	0x0001950d
    b6ec:	2000002c 	.word	0x2000002c
    b6f0:	0001bf15 	.word	0x0001bf15
    b6f4:	0001aa25 	.word	0x0001aa25
    b6f8:	4107ffe8 	.word	0x4107ffe8
    b6fc:	0001b28d 	.word	0x0001b28d
    b700:	0001bdb9 	.word	0x0001bdb9
    b704:	00019461 	.word	0x00019461
    b708:	0000ffff 	.word	0x0000ffff
    b70c:	200003b4 	.word	0x200003b4
    b710:	00019295 	.word	0x00019295
    b714:	200003b2 	.word	0x200003b2
    b718:	00019549 	.word	0x00019549
    b71c:	20000030 	.word	0x20000030
    b720:	0001a379 	.word	0x0001a379
    b724:	20000464 	.word	0x20000464
    b728:	00019d21 	.word	0x00019d21
    b72c:	000195b1 	.word	0x000195b1
    b730:	200003b8 	.word	0x200003b8
    b734:	200003ba 	.word	0x200003ba
    b738:	20000394 	.word	0x20000394
    b73c:	0000a5d1 	.word	0x0000a5d1
    b740:	0001c15d 	.word	0x0001c15d
		}
		case COLOR_PITCH_RATE:
		{
			if(gxKalman < 0)
    b744:	4bf6      	ldr	r3, [pc, #984]	; (bb20 <AnalogSideLights+0xfec>)
    b746:	681a      	ldr	r2, [r3, #0]
    b748:	4bf6      	ldr	r3, [pc, #984]	; (bb24 <AnalogSideLights+0xff0>)
    b74a:	2100      	movs	r1, #0
    b74c:	1c10      	adds	r0, r2, #0
    b74e:	4798      	blx	r3
    b750:	1e03      	subs	r3, r0, #0
    b752:	d02a      	beq.n	b7aa <AnalogSideLights+0xc76>
			cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) % 0x0FFFF;
    b754:	4bf4      	ldr	r3, [pc, #976]	; (bb28 <AnalogSideLights+0xff4>)
    b756:	681a      	ldr	r2, [r3, #0]
    b758:	4bf4      	ldr	r3, [pc, #976]	; (bb2c <AnalogSideLights+0xff8>)
    b75a:	1c10      	adds	r0, r2, #0
    b75c:	4798      	blx	r3
    b75e:	0002      	movs	r2, r0
    b760:	000b      	movs	r3, r1
    b762:	4cf3      	ldr	r4, [pc, #972]	; (bb30 <AnalogSideLights+0xffc>)
    b764:	2000      	movs	r0, #0
    b766:	49f3      	ldr	r1, [pc, #972]	; (bb34 <AnalogSideLights+0x1000>)
    b768:	47a0      	blx	r4
    b76a:	0003      	movs	r3, r0
    b76c:	000c      	movs	r4, r1
    b76e:	001d      	movs	r5, r3
    b770:	0026      	movs	r6, r4
    b772:	4beb      	ldr	r3, [pc, #940]	; (bb20 <AnalogSideLights+0xfec>)
    b774:	681a      	ldr	r2, [r3, #0]
    b776:	4bed      	ldr	r3, [pc, #948]	; (bb2c <AnalogSideLights+0xff8>)
    b778:	1c10      	adds	r0, r2, #0
    b77a:	4798      	blx	r3
    b77c:	0002      	movs	r2, r0
    b77e:	000b      	movs	r3, r1
    b780:	4ced      	ldr	r4, [pc, #948]	; (bb38 <AnalogSideLights+0x1004>)
    b782:	0028      	movs	r0, r5
    b784:	0031      	movs	r1, r6
    b786:	47a0      	blx	r4
    b788:	0003      	movs	r3, r0
    b78a:	000c      	movs	r4, r1
    b78c:	0019      	movs	r1, r3
    b78e:	0022      	movs	r2, r4
    b790:	4bea      	ldr	r3, [pc, #936]	; (bb3c <AnalogSideLights+0x1008>)
    b792:	0008      	movs	r0, r1
    b794:	0011      	movs	r1, r2
    b796:	4798      	blx	r3
    b798:	0002      	movs	r2, r0
    b79a:	4be9      	ldr	r3, [pc, #932]	; (bb40 <AnalogSideLights+0x100c>)
    b79c:	49e9      	ldr	r1, [pc, #932]	; (bb44 <AnalogSideLights+0x1010>)
    b79e:	0010      	movs	r0, r2
    b7a0:	4798      	blx	r3
    b7a2:	000b      	movs	r3, r1
    b7a4:	001a      	movs	r2, r3
    b7a6:	4be8      	ldr	r3, [pc, #928]	; (bb48 <AnalogSideLights+0x1014>)
    b7a8:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) / 0x0FFFF;
    b7aa:	4bdf      	ldr	r3, [pc, #892]	; (bb28 <AnalogSideLights+0xff4>)
    b7ac:	681a      	ldr	r2, [r3, #0]
    b7ae:	4bdf      	ldr	r3, [pc, #892]	; (bb2c <AnalogSideLights+0xff8>)
    b7b0:	1c10      	adds	r0, r2, #0
    b7b2:	4798      	blx	r3
    b7b4:	0002      	movs	r2, r0
    b7b6:	000b      	movs	r3, r1
    b7b8:	4cdd      	ldr	r4, [pc, #884]	; (bb30 <AnalogSideLights+0xffc>)
    b7ba:	2000      	movs	r0, #0
    b7bc:	49dd      	ldr	r1, [pc, #884]	; (bb34 <AnalogSideLights+0x1000>)
    b7be:	47a0      	blx	r4
    b7c0:	0003      	movs	r3, r0
    b7c2:	000c      	movs	r4, r1
    b7c4:	001d      	movs	r5, r3
    b7c6:	0026      	movs	r6, r4
    b7c8:	4bd5      	ldr	r3, [pc, #852]	; (bb20 <AnalogSideLights+0xfec>)
    b7ca:	681a      	ldr	r2, [r3, #0]
    b7cc:	4bd7      	ldr	r3, [pc, #860]	; (bb2c <AnalogSideLights+0xff8>)
    b7ce:	1c10      	adds	r0, r2, #0
    b7d0:	4798      	blx	r3
    b7d2:	0002      	movs	r2, r0
    b7d4:	000b      	movs	r3, r1
    b7d6:	4cd8      	ldr	r4, [pc, #864]	; (bb38 <AnalogSideLights+0x1004>)
    b7d8:	0028      	movs	r0, r5
    b7da:	0031      	movs	r1, r6
    b7dc:	47a0      	blx	r4
    b7de:	0003      	movs	r3, r0
    b7e0:	000c      	movs	r4, r1
    b7e2:	0019      	movs	r1, r3
    b7e4:	0022      	movs	r2, r4
    b7e6:	4bd5      	ldr	r3, [pc, #852]	; (bb3c <AnalogSideLights+0x1008>)
    b7e8:	0008      	movs	r0, r1
    b7ea:	0011      	movs	r1, r2
    b7ec:	4798      	blx	r3
    b7ee:	0002      	movs	r2, r0
    b7f0:	4bd6      	ldr	r3, [pc, #856]	; (bb4c <AnalogSideLights+0x1018>)
    b7f2:	49d4      	ldr	r1, [pc, #848]	; (bb44 <AnalogSideLights+0x1010>)
    b7f4:	0010      	movs	r0, r2
    b7f6:	4798      	blx	r3
    b7f8:	0003      	movs	r3, r0
    b7fa:	b2da      	uxtb	r2, r3
    b7fc:	4bd4      	ldr	r3, [pc, #848]	; (bb50 <AnalogSideLights+0x101c>)
    b7fe:	701a      	strb	r2, [r3, #0]
			if(gxKalman >= 0){
    b800:	4bc7      	ldr	r3, [pc, #796]	; (bb20 <AnalogSideLights+0xfec>)
    b802:	681a      	ldr	r2, [r3, #0]
    b804:	4bd3      	ldr	r3, [pc, #844]	; (bb54 <AnalogSideLights+0x1020>)
    b806:	2100      	movs	r1, #0
    b808:	1c10      	adds	r0, r2, #0
    b80a:	4798      	blx	r3
    b80c:	1e03      	subs	r3, r0, #0
    b80e:	d055      	beq.n	b8bc <AnalogSideLights+0xd88>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) % 0x0FFFF;
    b810:	4bd1      	ldr	r3, [pc, #836]	; (bb58 <AnalogSideLights+0x1024>)
    b812:	681a      	ldr	r2, [r3, #0]
    b814:	4bc5      	ldr	r3, [pc, #788]	; (bb2c <AnalogSideLights+0xff8>)
    b816:	1c10      	adds	r0, r2, #0
    b818:	4798      	blx	r3
    b81a:	0002      	movs	r2, r0
    b81c:	000b      	movs	r3, r1
    b81e:	4cc4      	ldr	r4, [pc, #784]	; (bb30 <AnalogSideLights+0xffc>)
    b820:	2000      	movs	r0, #0
    b822:	49c4      	ldr	r1, [pc, #784]	; (bb34 <AnalogSideLights+0x1000>)
    b824:	47a0      	blx	r4
    b826:	0003      	movs	r3, r0
    b828:	000c      	movs	r4, r1
    b82a:	001d      	movs	r5, r3
    b82c:	0026      	movs	r6, r4
    b82e:	4bbc      	ldr	r3, [pc, #752]	; (bb20 <AnalogSideLights+0xfec>)
    b830:	681a      	ldr	r2, [r3, #0]
    b832:	4bbe      	ldr	r3, [pc, #760]	; (bb2c <AnalogSideLights+0xff8>)
    b834:	1c10      	adds	r0, r2, #0
    b836:	4798      	blx	r3
    b838:	0002      	movs	r2, r0
    b83a:	000b      	movs	r3, r1
    b83c:	4cbe      	ldr	r4, [pc, #760]	; (bb38 <AnalogSideLights+0x1004>)
    b83e:	0028      	movs	r0, r5
    b840:	0031      	movs	r1, r6
    b842:	47a0      	blx	r4
    b844:	0003      	movs	r3, r0
    b846:	000c      	movs	r4, r1
    b848:	0019      	movs	r1, r3
    b84a:	0022      	movs	r2, r4
    b84c:	4bbb      	ldr	r3, [pc, #748]	; (bb3c <AnalogSideLights+0x1008>)
    b84e:	0008      	movs	r0, r1
    b850:	0011      	movs	r1, r2
    b852:	4798      	blx	r3
    b854:	0002      	movs	r2, r0
    b856:	4bba      	ldr	r3, [pc, #744]	; (bb40 <AnalogSideLights+0x100c>)
    b858:	49ba      	ldr	r1, [pc, #744]	; (bb44 <AnalogSideLights+0x1010>)
    b85a:	0010      	movs	r0, r2
    b85c:	4798      	blx	r3
    b85e:	000b      	movs	r3, r1
    b860:	001a      	movs	r2, r3
    b862:	4bb9      	ldr	r3, [pc, #740]	; (bb48 <AnalogSideLights+0x1014>)
    b864:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) / 0x0FFFF;
    b866:	4bbc      	ldr	r3, [pc, #752]	; (bb58 <AnalogSideLights+0x1024>)
    b868:	681a      	ldr	r2, [r3, #0]
    b86a:	4bb0      	ldr	r3, [pc, #704]	; (bb2c <AnalogSideLights+0xff8>)
    b86c:	1c10      	adds	r0, r2, #0
    b86e:	4798      	blx	r3
    b870:	0002      	movs	r2, r0
    b872:	000b      	movs	r3, r1
    b874:	4cae      	ldr	r4, [pc, #696]	; (bb30 <AnalogSideLights+0xffc>)
    b876:	2000      	movs	r0, #0
    b878:	49ae      	ldr	r1, [pc, #696]	; (bb34 <AnalogSideLights+0x1000>)
    b87a:	47a0      	blx	r4
    b87c:	0003      	movs	r3, r0
    b87e:	000c      	movs	r4, r1
    b880:	001d      	movs	r5, r3
    b882:	0026      	movs	r6, r4
    b884:	4ba6      	ldr	r3, [pc, #664]	; (bb20 <AnalogSideLights+0xfec>)
    b886:	681a      	ldr	r2, [r3, #0]
    b888:	4ba8      	ldr	r3, [pc, #672]	; (bb2c <AnalogSideLights+0xff8>)
    b88a:	1c10      	adds	r0, r2, #0
    b88c:	4798      	blx	r3
    b88e:	0002      	movs	r2, r0
    b890:	000b      	movs	r3, r1
    b892:	4ca9      	ldr	r4, [pc, #676]	; (bb38 <AnalogSideLights+0x1004>)
    b894:	0028      	movs	r0, r5
    b896:	0031      	movs	r1, r6
    b898:	47a0      	blx	r4
    b89a:	0003      	movs	r3, r0
    b89c:	000c      	movs	r4, r1
    b89e:	0019      	movs	r1, r3
    b8a0:	0022      	movs	r2, r4
    b8a2:	4ba6      	ldr	r3, [pc, #664]	; (bb3c <AnalogSideLights+0x1008>)
    b8a4:	0008      	movs	r0, r1
    b8a6:	0011      	movs	r1, r2
    b8a8:	4798      	blx	r3
    b8aa:	0002      	movs	r2, r0
    b8ac:	4ba7      	ldr	r3, [pc, #668]	; (bb4c <AnalogSideLights+0x1018>)
    b8ae:	49a5      	ldr	r1, [pc, #660]	; (bb44 <AnalogSideLights+0x1010>)
    b8b0:	0010      	movs	r0, r2
    b8b2:	4798      	blx	r3
    b8b4:	0003      	movs	r3, r0
    b8b6:	b2da      	uxtb	r2, r3
    b8b8:	4ba5      	ldr	r3, [pc, #660]	; (bb50 <AnalogSideLights+0x101c>)
    b8ba:	701a      	strb	r2, [r3, #0]
			}
			
			upColor = cycle_index * output_brightness;
    b8bc:	4ba2      	ldr	r3, [pc, #648]	; (bb48 <AnalogSideLights+0x1014>)
    b8be:	681a      	ldr	r2, [r3, #0]
    b8c0:	4ba6      	ldr	r3, [pc, #664]	; (bb5c <AnalogSideLights+0x1028>)
    b8c2:	0010      	movs	r0, r2
    b8c4:	4798      	blx	r3
    b8c6:	4ba6      	ldr	r3, [pc, #664]	; (bb60 <AnalogSideLights+0x102c>)
    b8c8:	681a      	ldr	r2, [r3, #0]
    b8ca:	4ba6      	ldr	r3, [pc, #664]	; (bb64 <AnalogSideLights+0x1030>)
    b8cc:	1c11      	adds	r1, r2, #0
    b8ce:	4798      	blx	r3
    b8d0:	1c03      	adds	r3, r0, #0
    b8d2:	1c1a      	adds	r2, r3, #0
    b8d4:	4ba4      	ldr	r3, [pc, #656]	; (bb68 <AnalogSideLights+0x1034>)
    b8d6:	1c10      	adds	r0, r2, #0
    b8d8:	4798      	blx	r3
    b8da:	0003      	movs	r3, r0
    b8dc:	b29a      	uxth	r2, r3
    b8de:	4ba3      	ldr	r3, [pc, #652]	; (bb6c <AnalogSideLights+0x1038>)
    b8e0:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b8e2:	4b99      	ldr	r3, [pc, #612]	; (bb48 <AnalogSideLights+0x1014>)
    b8e4:	681b      	ldr	r3, [r3, #0]
    b8e6:	4a97      	ldr	r2, [pc, #604]	; (bb44 <AnalogSideLights+0x1010>)
    b8e8:	1ad2      	subs	r2, r2, r3
    b8ea:	4b9c      	ldr	r3, [pc, #624]	; (bb5c <AnalogSideLights+0x1028>)
    b8ec:	0010      	movs	r0, r2
    b8ee:	4798      	blx	r3
    b8f0:	4b9b      	ldr	r3, [pc, #620]	; (bb60 <AnalogSideLights+0x102c>)
    b8f2:	681a      	ldr	r2, [r3, #0]
    b8f4:	4b9b      	ldr	r3, [pc, #620]	; (bb64 <AnalogSideLights+0x1030>)
    b8f6:	1c11      	adds	r1, r2, #0
    b8f8:	4798      	blx	r3
    b8fa:	1c03      	adds	r3, r0, #0
    b8fc:	1c1a      	adds	r2, r3, #0
    b8fe:	4b9a      	ldr	r3, [pc, #616]	; (bb68 <AnalogSideLights+0x1034>)
    b900:	1c10      	adds	r0, r2, #0
    b902:	4798      	blx	r3
    b904:	0003      	movs	r3, r0
    b906:	b29a      	uxth	r2, r3
    b908:	4b99      	ldr	r3, [pc, #612]	; (bb70 <AnalogSideLights+0x103c>)
    b90a:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b90c:	4b97      	ldr	r3, [pc, #604]	; (bb6c <AnalogSideLights+0x1038>)
    b90e:	8819      	ldrh	r1, [r3, #0]
    b910:	4b97      	ldr	r3, [pc, #604]	; (bb70 <AnalogSideLights+0x103c>)
    b912:	881a      	ldrh	r2, [r3, #0]
    b914:	4b8e      	ldr	r3, [pc, #568]	; (bb50 <AnalogSideLights+0x101c>)
    b916:	781b      	ldrb	r3, [r3, #0]
    b918:	4d96      	ldr	r5, [pc, #600]	; (bb74 <AnalogSideLights+0x1040>)
    b91a:	0038      	movs	r0, r7
    b91c:	4c96      	ldr	r4, [pc, #600]	; (bb78 <AnalogSideLights+0x1044>)
    b91e:	47a0      	blx	r4
    b920:	003b      	movs	r3, r7
    b922:	0028      	movs	r0, r5
    b924:	0019      	movs	r1, r3
    b926:	230c      	movs	r3, #12
    b928:	001a      	movs	r2, r3
    b92a:	4b94      	ldr	r3, [pc, #592]	; (bb7c <AnalogSideLights+0x1048>)
    b92c:	4798      	blx	r3
			break;
    b92e:	f000 fc1b 	bl	c168 <AnalogSideLights+0x1634>
		}
		case COLOR_THROTTLE:
		{
			cycle_index = (int)(((((float)0x0FFFF) * 2.0) / 256.0) * (255-remote_y)) % 0x0FFFF;
    b932:	4b93      	ldr	r3, [pc, #588]	; (bb80 <AnalogSideLights+0x104c>)
    b934:	781b      	ldrb	r3, [r3, #0]
    b936:	001a      	movs	r2, r3
    b938:	23ff      	movs	r3, #255	; 0xff
    b93a:	1a9a      	subs	r2, r3, r2
    b93c:	4b91      	ldr	r3, [pc, #580]	; (bb84 <AnalogSideLights+0x1050>)
    b93e:	0010      	movs	r0, r2
    b940:	4798      	blx	r3
    b942:	4c7d      	ldr	r4, [pc, #500]	; (bb38 <AnalogSideLights+0x1004>)
    b944:	2200      	movs	r2, #0
    b946:	4b90      	ldr	r3, [pc, #576]	; (bb88 <AnalogSideLights+0x1054>)
    b948:	47a0      	blx	r4
    b94a:	0003      	movs	r3, r0
    b94c:	000c      	movs	r4, r1
    b94e:	0019      	movs	r1, r3
    b950:	0022      	movs	r2, r4
    b952:	4b7a      	ldr	r3, [pc, #488]	; (bb3c <AnalogSideLights+0x1008>)
    b954:	0008      	movs	r0, r1
    b956:	0011      	movs	r1, r2
    b958:	4798      	blx	r3
    b95a:	0002      	movs	r2, r0
    b95c:	4b78      	ldr	r3, [pc, #480]	; (bb40 <AnalogSideLights+0x100c>)
    b95e:	4979      	ldr	r1, [pc, #484]	; (bb44 <AnalogSideLights+0x1010>)
    b960:	0010      	movs	r0, r2
    b962:	4798      	blx	r3
    b964:	000b      	movs	r3, r1
    b966:	001a      	movs	r2, r3
    b968:	4b77      	ldr	r3, [pc, #476]	; (bb48 <AnalogSideLights+0x1014>)
    b96a:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 2.0) / 256.0) * (255-remote_y)) / 0x0FFFF;
    b96c:	4b84      	ldr	r3, [pc, #528]	; (bb80 <AnalogSideLights+0x104c>)
    b96e:	781b      	ldrb	r3, [r3, #0]
    b970:	001a      	movs	r2, r3
    b972:	23ff      	movs	r3, #255	; 0xff
    b974:	1a9a      	subs	r2, r3, r2
    b976:	4b83      	ldr	r3, [pc, #524]	; (bb84 <AnalogSideLights+0x1050>)
    b978:	0010      	movs	r0, r2
    b97a:	4798      	blx	r3
    b97c:	4c6e      	ldr	r4, [pc, #440]	; (bb38 <AnalogSideLights+0x1004>)
    b97e:	2200      	movs	r2, #0
    b980:	4b81      	ldr	r3, [pc, #516]	; (bb88 <AnalogSideLights+0x1054>)
    b982:	47a0      	blx	r4
    b984:	0003      	movs	r3, r0
    b986:	000c      	movs	r4, r1
    b988:	0019      	movs	r1, r3
    b98a:	0022      	movs	r2, r4
    b98c:	4b6b      	ldr	r3, [pc, #428]	; (bb3c <AnalogSideLights+0x1008>)
    b98e:	0008      	movs	r0, r1
    b990:	0011      	movs	r1, r2
    b992:	4798      	blx	r3
    b994:	0002      	movs	r2, r0
    b996:	4b6d      	ldr	r3, [pc, #436]	; (bb4c <AnalogSideLights+0x1018>)
    b998:	496a      	ldr	r1, [pc, #424]	; (bb44 <AnalogSideLights+0x1010>)
    b99a:	0010      	movs	r0, r2
    b99c:	4798      	blx	r3
    b99e:	0003      	movs	r3, r0
    b9a0:	b2da      	uxtb	r2, r3
    b9a2:	4b6b      	ldr	r3, [pc, #428]	; (bb50 <AnalogSideLights+0x101c>)
    b9a4:	701a      	strb	r2, [r3, #0]
			upColor = cycle_index * output_brightness;
    b9a6:	4b68      	ldr	r3, [pc, #416]	; (bb48 <AnalogSideLights+0x1014>)
    b9a8:	681a      	ldr	r2, [r3, #0]
    b9aa:	4b6c      	ldr	r3, [pc, #432]	; (bb5c <AnalogSideLights+0x1028>)
    b9ac:	0010      	movs	r0, r2
    b9ae:	4798      	blx	r3
    b9b0:	4b6b      	ldr	r3, [pc, #428]	; (bb60 <AnalogSideLights+0x102c>)
    b9b2:	681a      	ldr	r2, [r3, #0]
    b9b4:	4b6b      	ldr	r3, [pc, #428]	; (bb64 <AnalogSideLights+0x1030>)
    b9b6:	1c11      	adds	r1, r2, #0
    b9b8:	4798      	blx	r3
    b9ba:	1c03      	adds	r3, r0, #0
    b9bc:	1c1a      	adds	r2, r3, #0
    b9be:	4b6a      	ldr	r3, [pc, #424]	; (bb68 <AnalogSideLights+0x1034>)
    b9c0:	1c10      	adds	r0, r2, #0
    b9c2:	4798      	blx	r3
    b9c4:	0003      	movs	r3, r0
    b9c6:	b29a      	uxth	r2, r3
    b9c8:	4b68      	ldr	r3, [pc, #416]	; (bb6c <AnalogSideLights+0x1038>)
    b9ca:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b9cc:	4b5e      	ldr	r3, [pc, #376]	; (bb48 <AnalogSideLights+0x1014>)
    b9ce:	681b      	ldr	r3, [r3, #0]
    b9d0:	4a5c      	ldr	r2, [pc, #368]	; (bb44 <AnalogSideLights+0x1010>)
    b9d2:	1ad2      	subs	r2, r2, r3
    b9d4:	4b61      	ldr	r3, [pc, #388]	; (bb5c <AnalogSideLights+0x1028>)
    b9d6:	0010      	movs	r0, r2
    b9d8:	4798      	blx	r3
    b9da:	4b61      	ldr	r3, [pc, #388]	; (bb60 <AnalogSideLights+0x102c>)
    b9dc:	681a      	ldr	r2, [r3, #0]
    b9de:	4b61      	ldr	r3, [pc, #388]	; (bb64 <AnalogSideLights+0x1030>)
    b9e0:	1c11      	adds	r1, r2, #0
    b9e2:	4798      	blx	r3
    b9e4:	1c03      	adds	r3, r0, #0
    b9e6:	1c1a      	adds	r2, r3, #0
    b9e8:	4b5f      	ldr	r3, [pc, #380]	; (bb68 <AnalogSideLights+0x1034>)
    b9ea:	1c10      	adds	r0, r2, #0
    b9ec:	4798      	blx	r3
    b9ee:	0003      	movs	r3, r0
    b9f0:	b29a      	uxth	r2, r3
    b9f2:	4b5f      	ldr	r3, [pc, #380]	; (bb70 <AnalogSideLights+0x103c>)
    b9f4:	801a      	strh	r2, [r3, #0]

			cycle = cycle+2;
    b9f6:	4b56      	ldr	r3, [pc, #344]	; (bb50 <AnalogSideLights+0x101c>)
    b9f8:	781b      	ldrb	r3, [r3, #0]
    b9fa:	3302      	adds	r3, #2
    b9fc:	b2da      	uxtb	r2, r3
    b9fe:	4b54      	ldr	r3, [pc, #336]	; (bb50 <AnalogSideLights+0x101c>)
    ba00:	701a      	strb	r2, [r3, #0]
			if(cycle > 2)
    ba02:	4b53      	ldr	r3, [pc, #332]	; (bb50 <AnalogSideLights+0x101c>)
    ba04:	781b      	ldrb	r3, [r3, #0]
    ba06:	2b02      	cmp	r3, #2
    ba08:	d905      	bls.n	ba16 <AnalogSideLights+0xee2>
			cycle = cycle - 3;
    ba0a:	4b51      	ldr	r3, [pc, #324]	; (bb50 <AnalogSideLights+0x101c>)
    ba0c:	781b      	ldrb	r3, [r3, #0]
    ba0e:	3b03      	subs	r3, #3
    ba10:	b2da      	uxtb	r2, r3
    ba12:	4b4f      	ldr	r3, [pc, #316]	; (bb50 <AnalogSideLights+0x101c>)
    ba14:	701a      	strb	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    ba16:	4b55      	ldr	r3, [pc, #340]	; (bb6c <AnalogSideLights+0x1038>)
    ba18:	8819      	ldrh	r1, [r3, #0]
    ba1a:	4b55      	ldr	r3, [pc, #340]	; (bb70 <AnalogSideLights+0x103c>)
    ba1c:	881a      	ldrh	r2, [r3, #0]
    ba1e:	4b4c      	ldr	r3, [pc, #304]	; (bb50 <AnalogSideLights+0x101c>)
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	4d54      	ldr	r5, [pc, #336]	; (bb74 <AnalogSideLights+0x1040>)
    ba24:	0038      	movs	r0, r7
    ba26:	4c54      	ldr	r4, [pc, #336]	; (bb78 <AnalogSideLights+0x1044>)
    ba28:	47a0      	blx	r4
    ba2a:	003b      	movs	r3, r7
    ba2c:	0028      	movs	r0, r5
    ba2e:	0019      	movs	r1, r3
    ba30:	230c      	movs	r3, #12
    ba32:	001a      	movs	r2, r3
    ba34:	4b51      	ldr	r3, [pc, #324]	; (bb7c <AnalogSideLights+0x1048>)
    ba36:	4798      	blx	r3

			break;
    ba38:	e396      	b.n	c168 <AnalogSideLights+0x1634>
		}
		case COLOR_RPM:
		{
			if(latest_vesc_vals.rpm != 0){
    ba3a:	4b54      	ldr	r3, [pc, #336]	; (bb8c <AnalogSideLights+0x1058>)
    ba3c:	691b      	ldr	r3, [r3, #16]
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d100      	bne.n	ba44 <AnalogSideLights+0xf10>
    ba42:	e0a9      	b.n	bb98 <AnalogSideLights+0x1064>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) % 0x0FFFF;
    ba44:	4b52      	ldr	r3, [pc, #328]	; (bb90 <AnalogSideLights+0x105c>)
    ba46:	699a      	ldr	r2, [r3, #24]
    ba48:	4b52      	ldr	r3, [pc, #328]	; (bb94 <AnalogSideLights+0x1060>)
    ba4a:	0010      	movs	r0, r2
    ba4c:	4798      	blx	r3
    ba4e:	1c02      	adds	r2, r0, #0
    ba50:	4b36      	ldr	r3, [pc, #216]	; (bb2c <AnalogSideLights+0xff8>)
    ba52:	1c10      	adds	r0, r2, #0
    ba54:	4798      	blx	r3
    ba56:	0002      	movs	r2, r0
    ba58:	000b      	movs	r3, r1
    ba5a:	4c35      	ldr	r4, [pc, #212]	; (bb30 <AnalogSideLights+0xffc>)
    ba5c:	2000      	movs	r0, #0
    ba5e:	4935      	ldr	r1, [pc, #212]	; (bb34 <AnalogSideLights+0x1000>)
    ba60:	47a0      	blx	r4
    ba62:	0003      	movs	r3, r0
    ba64:	000c      	movs	r4, r1
    ba66:	001d      	movs	r5, r3
    ba68:	0026      	movs	r6, r4
    ba6a:	4b48      	ldr	r3, [pc, #288]	; (bb8c <AnalogSideLights+0x1058>)
    ba6c:	691b      	ldr	r3, [r3, #16]
    ba6e:	17d9      	asrs	r1, r3, #31
    ba70:	185a      	adds	r2, r3, r1
    ba72:	404a      	eors	r2, r1
    ba74:	4b47      	ldr	r3, [pc, #284]	; (bb94 <AnalogSideLights+0x1060>)
    ba76:	0010      	movs	r0, r2
    ba78:	4798      	blx	r3
    ba7a:	1c02      	adds	r2, r0, #0
    ba7c:	4b2b      	ldr	r3, [pc, #172]	; (bb2c <AnalogSideLights+0xff8>)
    ba7e:	1c10      	adds	r0, r2, #0
    ba80:	4798      	blx	r3
    ba82:	0002      	movs	r2, r0
    ba84:	000b      	movs	r3, r1
    ba86:	4c2c      	ldr	r4, [pc, #176]	; (bb38 <AnalogSideLights+0x1004>)
    ba88:	0028      	movs	r0, r5
    ba8a:	0031      	movs	r1, r6
    ba8c:	47a0      	blx	r4
    ba8e:	0003      	movs	r3, r0
    ba90:	000c      	movs	r4, r1
    ba92:	0019      	movs	r1, r3
    ba94:	0022      	movs	r2, r4
    ba96:	4b29      	ldr	r3, [pc, #164]	; (bb3c <AnalogSideLights+0x1008>)
    ba98:	0008      	movs	r0, r1
    ba9a:	0011      	movs	r1, r2
    ba9c:	4798      	blx	r3
    ba9e:	0002      	movs	r2, r0
    baa0:	4b27      	ldr	r3, [pc, #156]	; (bb40 <AnalogSideLights+0x100c>)
    baa2:	4928      	ldr	r1, [pc, #160]	; (bb44 <AnalogSideLights+0x1010>)
    baa4:	0010      	movs	r0, r2
    baa6:	4798      	blx	r3
    baa8:	000b      	movs	r3, r1
    baaa:	001a      	movs	r2, r3
    baac:	4b26      	ldr	r3, [pc, #152]	; (bb48 <AnalogSideLights+0x1014>)
    baae:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) / 0x0FFFF;
    bab0:	4b37      	ldr	r3, [pc, #220]	; (bb90 <AnalogSideLights+0x105c>)
    bab2:	699a      	ldr	r2, [r3, #24]
    bab4:	4b37      	ldr	r3, [pc, #220]	; (bb94 <AnalogSideLights+0x1060>)
    bab6:	0010      	movs	r0, r2
    bab8:	4798      	blx	r3
    baba:	1c02      	adds	r2, r0, #0
    babc:	4b1b      	ldr	r3, [pc, #108]	; (bb2c <AnalogSideLights+0xff8>)
    babe:	1c10      	adds	r0, r2, #0
    bac0:	4798      	blx	r3
    bac2:	0002      	movs	r2, r0
    bac4:	000b      	movs	r3, r1
    bac6:	4c1a      	ldr	r4, [pc, #104]	; (bb30 <AnalogSideLights+0xffc>)
    bac8:	2000      	movs	r0, #0
    baca:	491a      	ldr	r1, [pc, #104]	; (bb34 <AnalogSideLights+0x1000>)
    bacc:	47a0      	blx	r4
    bace:	0003      	movs	r3, r0
    bad0:	000c      	movs	r4, r1
    bad2:	001d      	movs	r5, r3
    bad4:	0026      	movs	r6, r4
    bad6:	4b2d      	ldr	r3, [pc, #180]	; (bb8c <AnalogSideLights+0x1058>)
    bad8:	691b      	ldr	r3, [r3, #16]
    bada:	17d9      	asrs	r1, r3, #31
    badc:	185a      	adds	r2, r3, r1
    bade:	404a      	eors	r2, r1
    bae0:	4b2c      	ldr	r3, [pc, #176]	; (bb94 <AnalogSideLights+0x1060>)
    bae2:	0010      	movs	r0, r2
    bae4:	4798      	blx	r3
    bae6:	1c02      	adds	r2, r0, #0
    bae8:	4b10      	ldr	r3, [pc, #64]	; (bb2c <AnalogSideLights+0xff8>)
    baea:	1c10      	adds	r0, r2, #0
    baec:	4798      	blx	r3
    baee:	0002      	movs	r2, r0
    baf0:	000b      	movs	r3, r1
    baf2:	4c11      	ldr	r4, [pc, #68]	; (bb38 <AnalogSideLights+0x1004>)
    baf4:	0028      	movs	r0, r5
    baf6:	0031      	movs	r1, r6
    baf8:	47a0      	blx	r4
    bafa:	0003      	movs	r3, r0
    bafc:	000c      	movs	r4, r1
    bafe:	0019      	movs	r1, r3
    bb00:	0022      	movs	r2, r4
    bb02:	4b0e      	ldr	r3, [pc, #56]	; (bb3c <AnalogSideLights+0x1008>)
    bb04:	0008      	movs	r0, r1
    bb06:	0011      	movs	r1, r2
    bb08:	4798      	blx	r3
    bb0a:	0002      	movs	r2, r0
    bb0c:	4b0f      	ldr	r3, [pc, #60]	; (bb4c <AnalogSideLights+0x1018>)
    bb0e:	490d      	ldr	r1, [pc, #52]	; (bb44 <AnalogSideLights+0x1010>)
    bb10:	0010      	movs	r0, r2
    bb12:	4798      	blx	r3
    bb14:	0003      	movs	r3, r0
    bb16:	b2da      	uxtb	r2, r3
    bb18:	4b0d      	ldr	r3, [pc, #52]	; (bb50 <AnalogSideLights+0x101c>)
    bb1a:	701a      	strb	r2, [r3, #0]
    bb1c:	e042      	b.n	bba4 <AnalogSideLights+0x1070>
    bb1e:	46c0      	nop			; (mov r8, r8)
    bb20:	20000378 	.word	0x20000378
    bb24:	0001950d 	.word	0x0001950d
    bb28:	20000024 	.word	0x20000024
    bb2c:	0001bf15 	.word	0x0001bf15
    bb30:	0001aa25 	.word	0x0001aa25
    bb34:	4107ffe8 	.word	0x4107ffe8
    bb38:	0001b28d 	.word	0x0001b28d
    bb3c:	0001bdb9 	.word	0x0001bdb9
    bb40:	00019461 	.word	0x00019461
    bb44:	0000ffff 	.word	0x0000ffff
    bb48:	200003b4 	.word	0x200003b4
    bb4c:	00019295 	.word	0x00019295
    bb50:	200003b2 	.word	0x200003b2
    bb54:	00019549 	.word	0x00019549
    bb58:	20000028 	.word	0x20000028
    bb5c:	0001a379 	.word	0x0001a379
    bb60:	20000464 	.word	0x20000464
    bb64:	00019d21 	.word	0x00019d21
    bb68:	000195b1 	.word	0x000195b1
    bb6c:	200003b8 	.word	0x200003b8
    bb70:	200003ba 	.word	0x200003ba
    bb74:	20000394 	.word	0x20000394
    bb78:	0000a5d1 	.word	0x0000a5d1
    bb7c:	0001c15d 	.word	0x0001c15d
    bb80:	200003ce 	.word	0x200003ce
    bb84:	0001be21 	.word	0x0001be21
    bb88:	407fffe0 	.word	0x407fffe0
    bb8c:	20000e38 	.word	0x20000e38
    bb90:	20001a8c 	.word	0x20001a8c
    bb94:	0001a2d9 	.word	0x0001a2d9
			}
			else{
				cycle_index = 0;
    bb98:	4be2      	ldr	r3, [pc, #904]	; (bf24 <AnalogSideLights+0x13f0>)
    bb9a:	2200      	movs	r2, #0
    bb9c:	601a      	str	r2, [r3, #0]
				cycle = 0;
    bb9e:	4be2      	ldr	r3, [pc, #904]	; (bf28 <AnalogSideLights+0x13f4>)
    bba0:	2200      	movs	r2, #0
    bba2:	701a      	strb	r2, [r3, #0]
			}
			upColor = cycle_index * output_brightness;
    bba4:	4bdf      	ldr	r3, [pc, #892]	; (bf24 <AnalogSideLights+0x13f0>)
    bba6:	681a      	ldr	r2, [r3, #0]
    bba8:	4be0      	ldr	r3, [pc, #896]	; (bf2c <AnalogSideLights+0x13f8>)
    bbaa:	0010      	movs	r0, r2
    bbac:	4798      	blx	r3
    bbae:	4be0      	ldr	r3, [pc, #896]	; (bf30 <AnalogSideLights+0x13fc>)
    bbb0:	681a      	ldr	r2, [r3, #0]
    bbb2:	4be0      	ldr	r3, [pc, #896]	; (bf34 <AnalogSideLights+0x1400>)
    bbb4:	1c11      	adds	r1, r2, #0
    bbb6:	4798      	blx	r3
    bbb8:	1c03      	adds	r3, r0, #0
    bbba:	1c1a      	adds	r2, r3, #0
    bbbc:	4bde      	ldr	r3, [pc, #888]	; (bf38 <AnalogSideLights+0x1404>)
    bbbe:	1c10      	adds	r0, r2, #0
    bbc0:	4798      	blx	r3
    bbc2:	0003      	movs	r3, r0
    bbc4:	b29a      	uxth	r2, r3
    bbc6:	4bdd      	ldr	r3, [pc, #884]	; (bf3c <AnalogSideLights+0x1408>)
    bbc8:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    bbca:	4bd6      	ldr	r3, [pc, #856]	; (bf24 <AnalogSideLights+0x13f0>)
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	4adc      	ldr	r2, [pc, #880]	; (bf40 <AnalogSideLights+0x140c>)
    bbd0:	1ad2      	subs	r2, r2, r3
    bbd2:	4bd6      	ldr	r3, [pc, #856]	; (bf2c <AnalogSideLights+0x13f8>)
    bbd4:	0010      	movs	r0, r2
    bbd6:	4798      	blx	r3
    bbd8:	4bd5      	ldr	r3, [pc, #852]	; (bf30 <AnalogSideLights+0x13fc>)
    bbda:	681a      	ldr	r2, [r3, #0]
    bbdc:	4bd5      	ldr	r3, [pc, #852]	; (bf34 <AnalogSideLights+0x1400>)
    bbde:	1c11      	adds	r1, r2, #0
    bbe0:	4798      	blx	r3
    bbe2:	1c03      	adds	r3, r0, #0
    bbe4:	1c1a      	adds	r2, r3, #0
    bbe6:	4bd4      	ldr	r3, [pc, #848]	; (bf38 <AnalogSideLights+0x1404>)
    bbe8:	1c10      	adds	r0, r2, #0
    bbea:	4798      	blx	r3
    bbec:	0003      	movs	r3, r0
    bbee:	b29a      	uxth	r2, r3
    bbf0:	4bd4      	ldr	r3, [pc, #848]	; (bf44 <AnalogSideLights+0x1410>)
    bbf2:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    bbf4:	4bd1      	ldr	r3, [pc, #836]	; (bf3c <AnalogSideLights+0x1408>)
    bbf6:	8819      	ldrh	r1, [r3, #0]
    bbf8:	4bd2      	ldr	r3, [pc, #840]	; (bf44 <AnalogSideLights+0x1410>)
    bbfa:	881a      	ldrh	r2, [r3, #0]
    bbfc:	4bca      	ldr	r3, [pc, #808]	; (bf28 <AnalogSideLights+0x13f4>)
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	4dd1      	ldr	r5, [pc, #836]	; (bf48 <AnalogSideLights+0x1414>)
    bc02:	0038      	movs	r0, r7
    bc04:	4cd1      	ldr	r4, [pc, #836]	; (bf4c <AnalogSideLights+0x1418>)
    bc06:	47a0      	blx	r4
    bc08:	003b      	movs	r3, r7
    bc0a:	0028      	movs	r0, r5
    bc0c:	0019      	movs	r1, r3
    bc0e:	230c      	movs	r3, #12
    bc10:	001a      	movs	r2, r3
    bc12:	4bcf      	ldr	r3, [pc, #828]	; (bf50 <AnalogSideLights+0x141c>)
    bc14:	4798      	blx	r3
			break;
    bc16:	e2a7      	b.n	c168 <AnalogSideLights+0x1634>
		}
		case COLOR_X_ACCEL:
		{
			if(axKalman < 0){
    bc18:	4bce      	ldr	r3, [pc, #824]	; (bf54 <AnalogSideLights+0x1420>)
    bc1a:	681a      	ldr	r2, [r3, #0]
    bc1c:	4bce      	ldr	r3, [pc, #824]	; (bf58 <AnalogSideLights+0x1424>)
    bc1e:	2100      	movs	r1, #0
    bc20:	1c10      	adds	r0, r2, #0
    bc22:	4798      	blx	r3
    bc24:	1e03      	subs	r3, r0, #0
    bc26:	d040      	beq.n	bcaa <AnalogSideLights+0x1176>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
    bc28:	4bca      	ldr	r3, [pc, #808]	; (bf54 <AnalogSideLights+0x1420>)
    bc2a:	681a      	ldr	r2, [r3, #0]
    bc2c:	4bcb      	ldr	r3, [pc, #812]	; (bf5c <AnalogSideLights+0x1428>)
    bc2e:	49cc      	ldr	r1, [pc, #816]	; (bf60 <AnalogSideLights+0x142c>)
    bc30:	1c10      	adds	r0, r2, #0
    bc32:	4798      	blx	r3
    bc34:	1c03      	adds	r3, r0, #0
    bc36:	1c1a      	adds	r2, r3, #0
    bc38:	4bca      	ldr	r3, [pc, #808]	; (bf64 <AnalogSideLights+0x1430>)
    bc3a:	1c10      	adds	r0, r2, #0
    bc3c:	4798      	blx	r3
    bc3e:	4cca      	ldr	r4, [pc, #808]	; (bf68 <AnalogSideLights+0x1434>)
    bc40:	4aca      	ldr	r2, [pc, #808]	; (bf6c <AnalogSideLights+0x1438>)
    bc42:	4bcb      	ldr	r3, [pc, #812]	; (bf70 <AnalogSideLights+0x143c>)
    bc44:	47a0      	blx	r4
    bc46:	0003      	movs	r3, r0
    bc48:	000c      	movs	r4, r1
    bc4a:	0019      	movs	r1, r3
    bc4c:	0022      	movs	r2, r4
    bc4e:	4bc9      	ldr	r3, [pc, #804]	; (bf74 <AnalogSideLights+0x1440>)
    bc50:	0008      	movs	r0, r1
    bc52:	0011      	movs	r1, r2
    bc54:	4798      	blx	r3
    bc56:	0002      	movs	r2, r0
    bc58:	4bc7      	ldr	r3, [pc, #796]	; (bf78 <AnalogSideLights+0x1444>)
    bc5a:	49b9      	ldr	r1, [pc, #740]	; (bf40 <AnalogSideLights+0x140c>)
    bc5c:	0010      	movs	r0, r2
    bc5e:	4798      	blx	r3
    bc60:	000b      	movs	r3, r1
    bc62:	001a      	movs	r2, r3
    bc64:	4baf      	ldr	r3, [pc, #700]	; (bf24 <AnalogSideLights+0x13f0>)
    bc66:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
    bc68:	4bba      	ldr	r3, [pc, #744]	; (bf54 <AnalogSideLights+0x1420>)
    bc6a:	681a      	ldr	r2, [r3, #0]
    bc6c:	4bbb      	ldr	r3, [pc, #748]	; (bf5c <AnalogSideLights+0x1428>)
    bc6e:	49bc      	ldr	r1, [pc, #752]	; (bf60 <AnalogSideLights+0x142c>)
    bc70:	1c10      	adds	r0, r2, #0
    bc72:	4798      	blx	r3
    bc74:	1c03      	adds	r3, r0, #0
    bc76:	1c1a      	adds	r2, r3, #0
    bc78:	4bba      	ldr	r3, [pc, #744]	; (bf64 <AnalogSideLights+0x1430>)
    bc7a:	1c10      	adds	r0, r2, #0
    bc7c:	4798      	blx	r3
    bc7e:	4cba      	ldr	r4, [pc, #744]	; (bf68 <AnalogSideLights+0x1434>)
    bc80:	4aba      	ldr	r2, [pc, #744]	; (bf6c <AnalogSideLights+0x1438>)
    bc82:	4bbb      	ldr	r3, [pc, #748]	; (bf70 <AnalogSideLights+0x143c>)
    bc84:	47a0      	blx	r4
    bc86:	0003      	movs	r3, r0
    bc88:	000c      	movs	r4, r1
    bc8a:	0019      	movs	r1, r3
    bc8c:	0022      	movs	r2, r4
    bc8e:	4bb9      	ldr	r3, [pc, #740]	; (bf74 <AnalogSideLights+0x1440>)
    bc90:	0008      	movs	r0, r1
    bc92:	0011      	movs	r1, r2
    bc94:	4798      	blx	r3
    bc96:	0002      	movs	r2, r0
    bc98:	4bb8      	ldr	r3, [pc, #736]	; (bf7c <AnalogSideLights+0x1448>)
    bc9a:	49a9      	ldr	r1, [pc, #676]	; (bf40 <AnalogSideLights+0x140c>)
    bc9c:	0010      	movs	r0, r2
    bc9e:	4798      	blx	r3
    bca0:	0003      	movs	r3, r0
    bca2:	b2da      	uxtb	r2, r3
    bca4:	4ba0      	ldr	r3, [pc, #640]	; (bf28 <AnalogSideLights+0x13f4>)
    bca6:	701a      	strb	r2, [r3, #0]
    bca8:	e03f      	b.n	bd2a <AnalogSideLights+0x11f6>
				} else {
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
    bcaa:	4baa      	ldr	r3, [pc, #680]	; (bf54 <AnalogSideLights+0x1420>)
    bcac:	681a      	ldr	r2, [r3, #0]
    bcae:	4bab      	ldr	r3, [pc, #684]	; (bf5c <AnalogSideLights+0x1428>)
    bcb0:	49ab      	ldr	r1, [pc, #684]	; (bf60 <AnalogSideLights+0x142c>)
    bcb2:	1c10      	adds	r0, r2, #0
    bcb4:	4798      	blx	r3
    bcb6:	1c03      	adds	r3, r0, #0
    bcb8:	1c1a      	adds	r2, r3, #0
    bcba:	4baa      	ldr	r3, [pc, #680]	; (bf64 <AnalogSideLights+0x1430>)
    bcbc:	1c10      	adds	r0, r2, #0
    bcbe:	4798      	blx	r3
    bcc0:	4ca9      	ldr	r4, [pc, #676]	; (bf68 <AnalogSideLights+0x1434>)
    bcc2:	4aaa      	ldr	r2, [pc, #680]	; (bf6c <AnalogSideLights+0x1438>)
    bcc4:	4baa      	ldr	r3, [pc, #680]	; (bf70 <AnalogSideLights+0x143c>)
    bcc6:	47a0      	blx	r4
    bcc8:	0003      	movs	r3, r0
    bcca:	000c      	movs	r4, r1
    bccc:	0019      	movs	r1, r3
    bcce:	0022      	movs	r2, r4
    bcd0:	4ba8      	ldr	r3, [pc, #672]	; (bf74 <AnalogSideLights+0x1440>)
    bcd2:	0008      	movs	r0, r1
    bcd4:	0011      	movs	r1, r2
    bcd6:	4798      	blx	r3
    bcd8:	0002      	movs	r2, r0
    bcda:	4ba7      	ldr	r3, [pc, #668]	; (bf78 <AnalogSideLights+0x1444>)
    bcdc:	4998      	ldr	r1, [pc, #608]	; (bf40 <AnalogSideLights+0x140c>)
    bcde:	0010      	movs	r0, r2
    bce0:	4798      	blx	r3
    bce2:	000b      	movs	r3, r1
    bce4:	001a      	movs	r2, r3
    bce6:	4b8f      	ldr	r3, [pc, #572]	; (bf24 <AnalogSideLights+0x13f0>)
    bce8:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
    bcea:	4b9a      	ldr	r3, [pc, #616]	; (bf54 <AnalogSideLights+0x1420>)
    bcec:	681a      	ldr	r2, [r3, #0]
    bcee:	4b9b      	ldr	r3, [pc, #620]	; (bf5c <AnalogSideLights+0x1428>)
    bcf0:	499b      	ldr	r1, [pc, #620]	; (bf60 <AnalogSideLights+0x142c>)
    bcf2:	1c10      	adds	r0, r2, #0
    bcf4:	4798      	blx	r3
    bcf6:	1c03      	adds	r3, r0, #0
    bcf8:	1c1a      	adds	r2, r3, #0
    bcfa:	4b9a      	ldr	r3, [pc, #616]	; (bf64 <AnalogSideLights+0x1430>)
    bcfc:	1c10      	adds	r0, r2, #0
    bcfe:	4798      	blx	r3
    bd00:	4c99      	ldr	r4, [pc, #612]	; (bf68 <AnalogSideLights+0x1434>)
    bd02:	4a9a      	ldr	r2, [pc, #616]	; (bf6c <AnalogSideLights+0x1438>)
    bd04:	4b9a      	ldr	r3, [pc, #616]	; (bf70 <AnalogSideLights+0x143c>)
    bd06:	47a0      	blx	r4
    bd08:	0003      	movs	r3, r0
    bd0a:	000c      	movs	r4, r1
    bd0c:	0019      	movs	r1, r3
    bd0e:	0022      	movs	r2, r4
    bd10:	4b98      	ldr	r3, [pc, #608]	; (bf74 <AnalogSideLights+0x1440>)
    bd12:	0008      	movs	r0, r1
    bd14:	0011      	movs	r1, r2
    bd16:	4798      	blx	r3
    bd18:	0002      	movs	r2, r0
    bd1a:	4b98      	ldr	r3, [pc, #608]	; (bf7c <AnalogSideLights+0x1448>)
    bd1c:	4988      	ldr	r1, [pc, #544]	; (bf40 <AnalogSideLights+0x140c>)
    bd1e:	0010      	movs	r0, r2
    bd20:	4798      	blx	r3
    bd22:	0003      	movs	r3, r0
    bd24:	b2da      	uxtb	r2, r3
    bd26:	4b80      	ldr	r3, [pc, #512]	; (bf28 <AnalogSideLights+0x13f4>)
    bd28:	701a      	strb	r2, [r3, #0]
			}

			upColor = cycle_index * output_brightness;
    bd2a:	4b7e      	ldr	r3, [pc, #504]	; (bf24 <AnalogSideLights+0x13f0>)
    bd2c:	681a      	ldr	r2, [r3, #0]
    bd2e:	4b7f      	ldr	r3, [pc, #508]	; (bf2c <AnalogSideLights+0x13f8>)
    bd30:	0010      	movs	r0, r2
    bd32:	4798      	blx	r3
    bd34:	4b7e      	ldr	r3, [pc, #504]	; (bf30 <AnalogSideLights+0x13fc>)
    bd36:	681a      	ldr	r2, [r3, #0]
    bd38:	4b7e      	ldr	r3, [pc, #504]	; (bf34 <AnalogSideLights+0x1400>)
    bd3a:	1c11      	adds	r1, r2, #0
    bd3c:	4798      	blx	r3
    bd3e:	1c03      	adds	r3, r0, #0
    bd40:	1c1a      	adds	r2, r3, #0
    bd42:	4b7d      	ldr	r3, [pc, #500]	; (bf38 <AnalogSideLights+0x1404>)
    bd44:	1c10      	adds	r0, r2, #0
    bd46:	4798      	blx	r3
    bd48:	0003      	movs	r3, r0
    bd4a:	b29a      	uxth	r2, r3
    bd4c:	4b7b      	ldr	r3, [pc, #492]	; (bf3c <AnalogSideLights+0x1408>)
    bd4e:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    bd50:	4b74      	ldr	r3, [pc, #464]	; (bf24 <AnalogSideLights+0x13f0>)
    bd52:	681b      	ldr	r3, [r3, #0]
    bd54:	4a7a      	ldr	r2, [pc, #488]	; (bf40 <AnalogSideLights+0x140c>)
    bd56:	1ad2      	subs	r2, r2, r3
    bd58:	4b74      	ldr	r3, [pc, #464]	; (bf2c <AnalogSideLights+0x13f8>)
    bd5a:	0010      	movs	r0, r2
    bd5c:	4798      	blx	r3
    bd5e:	4b74      	ldr	r3, [pc, #464]	; (bf30 <AnalogSideLights+0x13fc>)
    bd60:	681a      	ldr	r2, [r3, #0]
    bd62:	4b74      	ldr	r3, [pc, #464]	; (bf34 <AnalogSideLights+0x1400>)
    bd64:	1c11      	adds	r1, r2, #0
    bd66:	4798      	blx	r3
    bd68:	1c03      	adds	r3, r0, #0
    bd6a:	1c1a      	adds	r2, r3, #0
    bd6c:	4b72      	ldr	r3, [pc, #456]	; (bf38 <AnalogSideLights+0x1404>)
    bd6e:	1c10      	adds	r0, r2, #0
    bd70:	4798      	blx	r3
    bd72:	0003      	movs	r3, r0
    bd74:	b29a      	uxth	r2, r3
    bd76:	4b73      	ldr	r3, [pc, #460]	; (bf44 <AnalogSideLights+0x1410>)
    bd78:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    bd7a:	4b70      	ldr	r3, [pc, #448]	; (bf3c <AnalogSideLights+0x1408>)
    bd7c:	8819      	ldrh	r1, [r3, #0]
    bd7e:	4b71      	ldr	r3, [pc, #452]	; (bf44 <AnalogSideLights+0x1410>)
    bd80:	881a      	ldrh	r2, [r3, #0]
    bd82:	4b69      	ldr	r3, [pc, #420]	; (bf28 <AnalogSideLights+0x13f4>)
    bd84:	781b      	ldrb	r3, [r3, #0]
    bd86:	4d70      	ldr	r5, [pc, #448]	; (bf48 <AnalogSideLights+0x1414>)
    bd88:	0038      	movs	r0, r7
    bd8a:	4c70      	ldr	r4, [pc, #448]	; (bf4c <AnalogSideLights+0x1418>)
    bd8c:	47a0      	blx	r4
    bd8e:	003b      	movs	r3, r7
    bd90:	0028      	movs	r0, r5
    bd92:	0019      	movs	r1, r3
    bd94:	230c      	movs	r3, #12
    bd96:	001a      	movs	r2, r3
    bd98:	4b6d      	ldr	r3, [pc, #436]	; (bf50 <AnalogSideLights+0x141c>)
    bd9a:	4798      	blx	r3
			break;
    bd9c:	e1e4      	b.n	c168 <AnalogSideLights+0x1634>
		}
		case COLOR_Y_ACCEL:
		{
			if(ayKalman < 0){
    bd9e:	4b78      	ldr	r3, [pc, #480]	; (bf80 <AnalogSideLights+0x144c>)
    bda0:	681a      	ldr	r2, [r3, #0]
    bda2:	4b6d      	ldr	r3, [pc, #436]	; (bf58 <AnalogSideLights+0x1424>)
    bda4:	2100      	movs	r1, #0
    bda6:	1c10      	adds	r0, r2, #0
    bda8:	4798      	blx	r3
    bdaa:	1e03      	subs	r3, r0, #0
    bdac:	d040      	beq.n	be30 <AnalogSideLights+0x12fc>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
    bdae:	4b74      	ldr	r3, [pc, #464]	; (bf80 <AnalogSideLights+0x144c>)
    bdb0:	681a      	ldr	r2, [r3, #0]
    bdb2:	4b6a      	ldr	r3, [pc, #424]	; (bf5c <AnalogSideLights+0x1428>)
    bdb4:	496a      	ldr	r1, [pc, #424]	; (bf60 <AnalogSideLights+0x142c>)
    bdb6:	1c10      	adds	r0, r2, #0
    bdb8:	4798      	blx	r3
    bdba:	1c03      	adds	r3, r0, #0
    bdbc:	1c1a      	adds	r2, r3, #0
    bdbe:	4b69      	ldr	r3, [pc, #420]	; (bf64 <AnalogSideLights+0x1430>)
    bdc0:	1c10      	adds	r0, r2, #0
    bdc2:	4798      	blx	r3
    bdc4:	4c68      	ldr	r4, [pc, #416]	; (bf68 <AnalogSideLights+0x1434>)
    bdc6:	4a69      	ldr	r2, [pc, #420]	; (bf6c <AnalogSideLights+0x1438>)
    bdc8:	4b69      	ldr	r3, [pc, #420]	; (bf70 <AnalogSideLights+0x143c>)
    bdca:	47a0      	blx	r4
    bdcc:	0003      	movs	r3, r0
    bdce:	000c      	movs	r4, r1
    bdd0:	0019      	movs	r1, r3
    bdd2:	0022      	movs	r2, r4
    bdd4:	4b67      	ldr	r3, [pc, #412]	; (bf74 <AnalogSideLights+0x1440>)
    bdd6:	0008      	movs	r0, r1
    bdd8:	0011      	movs	r1, r2
    bdda:	4798      	blx	r3
    bddc:	0002      	movs	r2, r0
    bdde:	4b66      	ldr	r3, [pc, #408]	; (bf78 <AnalogSideLights+0x1444>)
    bde0:	4957      	ldr	r1, [pc, #348]	; (bf40 <AnalogSideLights+0x140c>)
    bde2:	0010      	movs	r0, r2
    bde4:	4798      	blx	r3
    bde6:	000b      	movs	r3, r1
    bde8:	001a      	movs	r2, r3
    bdea:	4b4e      	ldr	r3, [pc, #312]	; (bf24 <AnalogSideLights+0x13f0>)
    bdec:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
    bdee:	4b64      	ldr	r3, [pc, #400]	; (bf80 <AnalogSideLights+0x144c>)
    bdf0:	681a      	ldr	r2, [r3, #0]
    bdf2:	4b5a      	ldr	r3, [pc, #360]	; (bf5c <AnalogSideLights+0x1428>)
    bdf4:	495a      	ldr	r1, [pc, #360]	; (bf60 <AnalogSideLights+0x142c>)
    bdf6:	1c10      	adds	r0, r2, #0
    bdf8:	4798      	blx	r3
    bdfa:	1c03      	adds	r3, r0, #0
    bdfc:	1c1a      	adds	r2, r3, #0
    bdfe:	4b59      	ldr	r3, [pc, #356]	; (bf64 <AnalogSideLights+0x1430>)
    be00:	1c10      	adds	r0, r2, #0
    be02:	4798      	blx	r3
    be04:	4c58      	ldr	r4, [pc, #352]	; (bf68 <AnalogSideLights+0x1434>)
    be06:	4a59      	ldr	r2, [pc, #356]	; (bf6c <AnalogSideLights+0x1438>)
    be08:	4b59      	ldr	r3, [pc, #356]	; (bf70 <AnalogSideLights+0x143c>)
    be0a:	47a0      	blx	r4
    be0c:	0003      	movs	r3, r0
    be0e:	000c      	movs	r4, r1
    be10:	0019      	movs	r1, r3
    be12:	0022      	movs	r2, r4
    be14:	4b57      	ldr	r3, [pc, #348]	; (bf74 <AnalogSideLights+0x1440>)
    be16:	0008      	movs	r0, r1
    be18:	0011      	movs	r1, r2
    be1a:	4798      	blx	r3
    be1c:	0002      	movs	r2, r0
    be1e:	4b57      	ldr	r3, [pc, #348]	; (bf7c <AnalogSideLights+0x1448>)
    be20:	4947      	ldr	r1, [pc, #284]	; (bf40 <AnalogSideLights+0x140c>)
    be22:	0010      	movs	r0, r2
    be24:	4798      	blx	r3
    be26:	0003      	movs	r3, r0
    be28:	b2da      	uxtb	r2, r3
    be2a:	4b3f      	ldr	r3, [pc, #252]	; (bf28 <AnalogSideLights+0x13f4>)
    be2c:	701a      	strb	r2, [r3, #0]
    be2e:	e03f      	b.n	beb0 <AnalogSideLights+0x137c>
				} else {
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
    be30:	4b53      	ldr	r3, [pc, #332]	; (bf80 <AnalogSideLights+0x144c>)
    be32:	681a      	ldr	r2, [r3, #0]
    be34:	4b49      	ldr	r3, [pc, #292]	; (bf5c <AnalogSideLights+0x1428>)
    be36:	494a      	ldr	r1, [pc, #296]	; (bf60 <AnalogSideLights+0x142c>)
    be38:	1c10      	adds	r0, r2, #0
    be3a:	4798      	blx	r3
    be3c:	1c03      	adds	r3, r0, #0
    be3e:	1c1a      	adds	r2, r3, #0
    be40:	4b48      	ldr	r3, [pc, #288]	; (bf64 <AnalogSideLights+0x1430>)
    be42:	1c10      	adds	r0, r2, #0
    be44:	4798      	blx	r3
    be46:	4c48      	ldr	r4, [pc, #288]	; (bf68 <AnalogSideLights+0x1434>)
    be48:	4a48      	ldr	r2, [pc, #288]	; (bf6c <AnalogSideLights+0x1438>)
    be4a:	4b49      	ldr	r3, [pc, #292]	; (bf70 <AnalogSideLights+0x143c>)
    be4c:	47a0      	blx	r4
    be4e:	0003      	movs	r3, r0
    be50:	000c      	movs	r4, r1
    be52:	0019      	movs	r1, r3
    be54:	0022      	movs	r2, r4
    be56:	4b47      	ldr	r3, [pc, #284]	; (bf74 <AnalogSideLights+0x1440>)
    be58:	0008      	movs	r0, r1
    be5a:	0011      	movs	r1, r2
    be5c:	4798      	blx	r3
    be5e:	0002      	movs	r2, r0
    be60:	4b45      	ldr	r3, [pc, #276]	; (bf78 <AnalogSideLights+0x1444>)
    be62:	4937      	ldr	r1, [pc, #220]	; (bf40 <AnalogSideLights+0x140c>)
    be64:	0010      	movs	r0, r2
    be66:	4798      	blx	r3
    be68:	000b      	movs	r3, r1
    be6a:	001a      	movs	r2, r3
    be6c:	4b2d      	ldr	r3, [pc, #180]	; (bf24 <AnalogSideLights+0x13f0>)
    be6e:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
    be70:	4b43      	ldr	r3, [pc, #268]	; (bf80 <AnalogSideLights+0x144c>)
    be72:	681a      	ldr	r2, [r3, #0]
    be74:	4b39      	ldr	r3, [pc, #228]	; (bf5c <AnalogSideLights+0x1428>)
    be76:	493a      	ldr	r1, [pc, #232]	; (bf60 <AnalogSideLights+0x142c>)
    be78:	1c10      	adds	r0, r2, #0
    be7a:	4798      	blx	r3
    be7c:	1c03      	adds	r3, r0, #0
    be7e:	1c1a      	adds	r2, r3, #0
    be80:	4b38      	ldr	r3, [pc, #224]	; (bf64 <AnalogSideLights+0x1430>)
    be82:	1c10      	adds	r0, r2, #0
    be84:	4798      	blx	r3
    be86:	4c38      	ldr	r4, [pc, #224]	; (bf68 <AnalogSideLights+0x1434>)
    be88:	4a38      	ldr	r2, [pc, #224]	; (bf6c <AnalogSideLights+0x1438>)
    be8a:	4b39      	ldr	r3, [pc, #228]	; (bf70 <AnalogSideLights+0x143c>)
    be8c:	47a0      	blx	r4
    be8e:	0003      	movs	r3, r0
    be90:	000c      	movs	r4, r1
    be92:	0019      	movs	r1, r3
    be94:	0022      	movs	r2, r4
    be96:	4b37      	ldr	r3, [pc, #220]	; (bf74 <AnalogSideLights+0x1440>)
    be98:	0008      	movs	r0, r1
    be9a:	0011      	movs	r1, r2
    be9c:	4798      	blx	r3
    be9e:	0002      	movs	r2, r0
    bea0:	4b36      	ldr	r3, [pc, #216]	; (bf7c <AnalogSideLights+0x1448>)
    bea2:	4927      	ldr	r1, [pc, #156]	; (bf40 <AnalogSideLights+0x140c>)
    bea4:	0010      	movs	r0, r2
    bea6:	4798      	blx	r3
    bea8:	0003      	movs	r3, r0
    beaa:	b2da      	uxtb	r2, r3
    beac:	4b1e      	ldr	r3, [pc, #120]	; (bf28 <AnalogSideLights+0x13f4>)
    beae:	701a      	strb	r2, [r3, #0]
			}

			upColor = cycle_index * output_brightness;
    beb0:	4b1c      	ldr	r3, [pc, #112]	; (bf24 <AnalogSideLights+0x13f0>)
    beb2:	681a      	ldr	r2, [r3, #0]
    beb4:	4b1d      	ldr	r3, [pc, #116]	; (bf2c <AnalogSideLights+0x13f8>)
    beb6:	0010      	movs	r0, r2
    beb8:	4798      	blx	r3
    beba:	4b1d      	ldr	r3, [pc, #116]	; (bf30 <AnalogSideLights+0x13fc>)
    bebc:	681a      	ldr	r2, [r3, #0]
    bebe:	4b1d      	ldr	r3, [pc, #116]	; (bf34 <AnalogSideLights+0x1400>)
    bec0:	1c11      	adds	r1, r2, #0
    bec2:	4798      	blx	r3
    bec4:	1c03      	adds	r3, r0, #0
    bec6:	1c1a      	adds	r2, r3, #0
    bec8:	4b1b      	ldr	r3, [pc, #108]	; (bf38 <AnalogSideLights+0x1404>)
    beca:	1c10      	adds	r0, r2, #0
    becc:	4798      	blx	r3
    bece:	0003      	movs	r3, r0
    bed0:	b29a      	uxth	r2, r3
    bed2:	4b1a      	ldr	r3, [pc, #104]	; (bf3c <AnalogSideLights+0x1408>)
    bed4:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    bed6:	4b13      	ldr	r3, [pc, #76]	; (bf24 <AnalogSideLights+0x13f0>)
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	4a19      	ldr	r2, [pc, #100]	; (bf40 <AnalogSideLights+0x140c>)
    bedc:	1ad2      	subs	r2, r2, r3
    bede:	4b13      	ldr	r3, [pc, #76]	; (bf2c <AnalogSideLights+0x13f8>)
    bee0:	0010      	movs	r0, r2
    bee2:	4798      	blx	r3
    bee4:	4b12      	ldr	r3, [pc, #72]	; (bf30 <AnalogSideLights+0x13fc>)
    bee6:	681a      	ldr	r2, [r3, #0]
    bee8:	4b12      	ldr	r3, [pc, #72]	; (bf34 <AnalogSideLights+0x1400>)
    beea:	1c11      	adds	r1, r2, #0
    beec:	4798      	blx	r3
    beee:	1c03      	adds	r3, r0, #0
    bef0:	1c1a      	adds	r2, r3, #0
    bef2:	4b11      	ldr	r3, [pc, #68]	; (bf38 <AnalogSideLights+0x1404>)
    bef4:	1c10      	adds	r0, r2, #0
    bef6:	4798      	blx	r3
    bef8:	0003      	movs	r3, r0
    befa:	b29a      	uxth	r2, r3
    befc:	4b11      	ldr	r3, [pc, #68]	; (bf44 <AnalogSideLights+0x1410>)
    befe:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    bf00:	4b0e      	ldr	r3, [pc, #56]	; (bf3c <AnalogSideLights+0x1408>)
    bf02:	8819      	ldrh	r1, [r3, #0]
    bf04:	4b0f      	ldr	r3, [pc, #60]	; (bf44 <AnalogSideLights+0x1410>)
    bf06:	881a      	ldrh	r2, [r3, #0]
    bf08:	4b07      	ldr	r3, [pc, #28]	; (bf28 <AnalogSideLights+0x13f4>)
    bf0a:	781b      	ldrb	r3, [r3, #0]
    bf0c:	4d0e      	ldr	r5, [pc, #56]	; (bf48 <AnalogSideLights+0x1414>)
    bf0e:	0038      	movs	r0, r7
    bf10:	4c0e      	ldr	r4, [pc, #56]	; (bf4c <AnalogSideLights+0x1418>)
    bf12:	47a0      	blx	r4
    bf14:	003b      	movs	r3, r7
    bf16:	0028      	movs	r0, r5
    bf18:	0019      	movs	r1, r3
    bf1a:	230c      	movs	r3, #12
    bf1c:	001a      	movs	r2, r3
    bf1e:	4b0c      	ldr	r3, [pc, #48]	; (bf50 <AnalogSideLights+0x141c>)
    bf20:	4798      	blx	r3
			break;
    bf22:	e121      	b.n	c168 <AnalogSideLights+0x1634>
    bf24:	200003b4 	.word	0x200003b4
    bf28:	200003b2 	.word	0x200003b2
    bf2c:	0001a379 	.word	0x0001a379
    bf30:	20000464 	.word	0x20000464
    bf34:	00019d21 	.word	0x00019d21
    bf38:	000195b1 	.word	0x000195b1
    bf3c:	200003b8 	.word	0x200003b8
    bf40:	0000ffff 	.word	0x0000ffff
    bf44:	200003ba 	.word	0x200003ba
    bf48:	20000394 	.word	0x20000394
    bf4c:	0000a5d1 	.word	0x0000a5d1
    bf50:	0001c15d 	.word	0x0001c15d
    bf54:	2000036c 	.word	0x2000036c
    bf58:	0001950d 	.word	0x0001950d
    bf5c:	0001961d 	.word	0x0001961d
    bf60:	44bb8000 	.word	0x44bb8000
    bf64:	0001bf15 	.word	0x0001bf15
    bf68:	0001b28d 	.word	0x0001b28d
    bf6c:	70a3d70a 	.word	0x70a3d70a
    bf70:	4050623d 	.word	0x4050623d
    bf74:	0001bdb9 	.word	0x0001bdb9
    bf78:	00019461 	.word	0x00019461
    bf7c:	00019295 	.word	0x00019295
    bf80:	20000370 	.word	0x20000370
		}
		case COLOR_Z_ACCEL:
		{
			if(azKalman < 0){
    bf84:	4b9a      	ldr	r3, [pc, #616]	; (c1f0 <AnalogSideLights+0x16bc>)
    bf86:	681a      	ldr	r2, [r3, #0]
    bf88:	4b9a      	ldr	r3, [pc, #616]	; (c1f4 <AnalogSideLights+0x16c0>)
    bf8a:	2100      	movs	r1, #0
    bf8c:	1c10      	adds	r0, r2, #0
    bf8e:	4798      	blx	r3
    bf90:	1e03      	subs	r3, r0, #0
    bf92:	d056      	beq.n	c042 <AnalogSideLights+0x150e>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) % 0x0FFFF;
    bf94:	4b98      	ldr	r3, [pc, #608]	; (c1f8 <AnalogSideLights+0x16c4>)
    bf96:	681a      	ldr	r2, [r3, #0]
    bf98:	4b98      	ldr	r3, [pc, #608]	; (c1fc <AnalogSideLights+0x16c8>)
    bf9a:	1c10      	adds	r0, r2, #0
    bf9c:	4798      	blx	r3
    bf9e:	0002      	movs	r2, r0
    bfa0:	000b      	movs	r3, r1
    bfa2:	4c97      	ldr	r4, [pc, #604]	; (c200 <AnalogSideLights+0x16cc>)
    bfa4:	2000      	movs	r0, #0
    bfa6:	4997      	ldr	r1, [pc, #604]	; (c204 <AnalogSideLights+0x16d0>)
    bfa8:	47a0      	blx	r4
    bfaa:	0003      	movs	r3, r0
    bfac:	000c      	movs	r4, r1
    bfae:	001d      	movs	r5, r3
    bfb0:	0026      	movs	r6, r4
    bfb2:	4b8f      	ldr	r3, [pc, #572]	; (c1f0 <AnalogSideLights+0x16bc>)
    bfb4:	681a      	ldr	r2, [r3, #0]
    bfb6:	4b91      	ldr	r3, [pc, #580]	; (c1fc <AnalogSideLights+0x16c8>)
    bfb8:	1c10      	adds	r0, r2, #0
    bfba:	4798      	blx	r3
    bfbc:	0002      	movs	r2, r0
    bfbe:	000b      	movs	r3, r1
    bfc0:	4c91      	ldr	r4, [pc, #580]	; (c208 <AnalogSideLights+0x16d4>)
    bfc2:	0028      	movs	r0, r5
    bfc4:	0031      	movs	r1, r6
    bfc6:	47a0      	blx	r4
    bfc8:	0003      	movs	r3, r0
    bfca:	000c      	movs	r4, r1
    bfcc:	0019      	movs	r1, r3
    bfce:	0022      	movs	r2, r4
    bfd0:	4b8e      	ldr	r3, [pc, #568]	; (c20c <AnalogSideLights+0x16d8>)
    bfd2:	0008      	movs	r0, r1
    bfd4:	0011      	movs	r1, r2
    bfd6:	4798      	blx	r3
    bfd8:	0002      	movs	r2, r0
    bfda:	4b8d      	ldr	r3, [pc, #564]	; (c210 <AnalogSideLights+0x16dc>)
    bfdc:	498d      	ldr	r1, [pc, #564]	; (c214 <AnalogSideLights+0x16e0>)
    bfde:	0010      	movs	r0, r2
    bfe0:	4798      	blx	r3
    bfe2:	000b      	movs	r3, r1
    bfe4:	001a      	movs	r2, r3
    bfe6:	4b8c      	ldr	r3, [pc, #560]	; (c218 <AnalogSideLights+0x16e4>)
    bfe8:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) / 0x0FFFF;
    bfea:	4b83      	ldr	r3, [pc, #524]	; (c1f8 <AnalogSideLights+0x16c4>)
    bfec:	681a      	ldr	r2, [r3, #0]
    bfee:	4b83      	ldr	r3, [pc, #524]	; (c1fc <AnalogSideLights+0x16c8>)
    bff0:	1c10      	adds	r0, r2, #0
    bff2:	4798      	blx	r3
    bff4:	0002      	movs	r2, r0
    bff6:	000b      	movs	r3, r1
    bff8:	4c81      	ldr	r4, [pc, #516]	; (c200 <AnalogSideLights+0x16cc>)
    bffa:	2000      	movs	r0, #0
    bffc:	4981      	ldr	r1, [pc, #516]	; (c204 <AnalogSideLights+0x16d0>)
    bffe:	47a0      	blx	r4
    c000:	0003      	movs	r3, r0
    c002:	000c      	movs	r4, r1
    c004:	001d      	movs	r5, r3
    c006:	0026      	movs	r6, r4
    c008:	4b79      	ldr	r3, [pc, #484]	; (c1f0 <AnalogSideLights+0x16bc>)
    c00a:	681a      	ldr	r2, [r3, #0]
    c00c:	4b7b      	ldr	r3, [pc, #492]	; (c1fc <AnalogSideLights+0x16c8>)
    c00e:	1c10      	adds	r0, r2, #0
    c010:	4798      	blx	r3
    c012:	0002      	movs	r2, r0
    c014:	000b      	movs	r3, r1
    c016:	4c7c      	ldr	r4, [pc, #496]	; (c208 <AnalogSideLights+0x16d4>)
    c018:	0028      	movs	r0, r5
    c01a:	0031      	movs	r1, r6
    c01c:	47a0      	blx	r4
    c01e:	0003      	movs	r3, r0
    c020:	000c      	movs	r4, r1
    c022:	0019      	movs	r1, r3
    c024:	0022      	movs	r2, r4
    c026:	4b79      	ldr	r3, [pc, #484]	; (c20c <AnalogSideLights+0x16d8>)
    c028:	0008      	movs	r0, r1
    c02a:	0011      	movs	r1, r2
    c02c:	4798      	blx	r3
    c02e:	0002      	movs	r2, r0
    c030:	4b7a      	ldr	r3, [pc, #488]	; (c21c <AnalogSideLights+0x16e8>)
    c032:	4978      	ldr	r1, [pc, #480]	; (c214 <AnalogSideLights+0x16e0>)
    c034:	0010      	movs	r0, r2
    c036:	4798      	blx	r3
    c038:	0003      	movs	r3, r0
    c03a:	b2da      	uxtb	r2, r3
    c03c:	4b78      	ldr	r3, [pc, #480]	; (c220 <AnalogSideLights+0x16ec>)
    c03e:	701a      	strb	r2, [r3, #0]
    c040:	e055      	b.n	c0ee <AnalogSideLights+0x15ba>
				} else {
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) % 0x0FFFF;
    c042:	4b78      	ldr	r3, [pc, #480]	; (c224 <AnalogSideLights+0x16f0>)
    c044:	681a      	ldr	r2, [r3, #0]
    c046:	4b6d      	ldr	r3, [pc, #436]	; (c1fc <AnalogSideLights+0x16c8>)
    c048:	1c10      	adds	r0, r2, #0
    c04a:	4798      	blx	r3
    c04c:	0002      	movs	r2, r0
    c04e:	000b      	movs	r3, r1
    c050:	4c6b      	ldr	r4, [pc, #428]	; (c200 <AnalogSideLights+0x16cc>)
    c052:	2000      	movs	r0, #0
    c054:	496b      	ldr	r1, [pc, #428]	; (c204 <AnalogSideLights+0x16d0>)
    c056:	47a0      	blx	r4
    c058:	0003      	movs	r3, r0
    c05a:	000c      	movs	r4, r1
    c05c:	001d      	movs	r5, r3
    c05e:	0026      	movs	r6, r4
    c060:	4b63      	ldr	r3, [pc, #396]	; (c1f0 <AnalogSideLights+0x16bc>)
    c062:	681a      	ldr	r2, [r3, #0]
    c064:	4b65      	ldr	r3, [pc, #404]	; (c1fc <AnalogSideLights+0x16c8>)
    c066:	1c10      	adds	r0, r2, #0
    c068:	4798      	blx	r3
    c06a:	0002      	movs	r2, r0
    c06c:	000b      	movs	r3, r1
    c06e:	4c66      	ldr	r4, [pc, #408]	; (c208 <AnalogSideLights+0x16d4>)
    c070:	0028      	movs	r0, r5
    c072:	0031      	movs	r1, r6
    c074:	47a0      	blx	r4
    c076:	0003      	movs	r3, r0
    c078:	000c      	movs	r4, r1
    c07a:	0019      	movs	r1, r3
    c07c:	0022      	movs	r2, r4
    c07e:	4b63      	ldr	r3, [pc, #396]	; (c20c <AnalogSideLights+0x16d8>)
    c080:	0008      	movs	r0, r1
    c082:	0011      	movs	r1, r2
    c084:	4798      	blx	r3
    c086:	0002      	movs	r2, r0
    c088:	4b61      	ldr	r3, [pc, #388]	; (c210 <AnalogSideLights+0x16dc>)
    c08a:	4962      	ldr	r1, [pc, #392]	; (c214 <AnalogSideLights+0x16e0>)
    c08c:	0010      	movs	r0, r2
    c08e:	4798      	blx	r3
    c090:	000b      	movs	r3, r1
    c092:	001a      	movs	r2, r3
    c094:	4b60      	ldr	r3, [pc, #384]	; (c218 <AnalogSideLights+0x16e4>)
    c096:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) / 0x0FFFF;
    c098:	4b62      	ldr	r3, [pc, #392]	; (c224 <AnalogSideLights+0x16f0>)
    c09a:	681a      	ldr	r2, [r3, #0]
    c09c:	4b57      	ldr	r3, [pc, #348]	; (c1fc <AnalogSideLights+0x16c8>)
    c09e:	1c10      	adds	r0, r2, #0
    c0a0:	4798      	blx	r3
    c0a2:	0002      	movs	r2, r0
    c0a4:	000b      	movs	r3, r1
    c0a6:	4c56      	ldr	r4, [pc, #344]	; (c200 <AnalogSideLights+0x16cc>)
    c0a8:	2000      	movs	r0, #0
    c0aa:	4956      	ldr	r1, [pc, #344]	; (c204 <AnalogSideLights+0x16d0>)
    c0ac:	47a0      	blx	r4
    c0ae:	0003      	movs	r3, r0
    c0b0:	000c      	movs	r4, r1
    c0b2:	001d      	movs	r5, r3
    c0b4:	0026      	movs	r6, r4
    c0b6:	4b4e      	ldr	r3, [pc, #312]	; (c1f0 <AnalogSideLights+0x16bc>)
    c0b8:	681a      	ldr	r2, [r3, #0]
    c0ba:	4b50      	ldr	r3, [pc, #320]	; (c1fc <AnalogSideLights+0x16c8>)
    c0bc:	1c10      	adds	r0, r2, #0
    c0be:	4798      	blx	r3
    c0c0:	0002      	movs	r2, r0
    c0c2:	000b      	movs	r3, r1
    c0c4:	4c50      	ldr	r4, [pc, #320]	; (c208 <AnalogSideLights+0x16d4>)
    c0c6:	0028      	movs	r0, r5
    c0c8:	0031      	movs	r1, r6
    c0ca:	47a0      	blx	r4
    c0cc:	0003      	movs	r3, r0
    c0ce:	000c      	movs	r4, r1
    c0d0:	0019      	movs	r1, r3
    c0d2:	0022      	movs	r2, r4
    c0d4:	4b4d      	ldr	r3, [pc, #308]	; (c20c <AnalogSideLights+0x16d8>)
    c0d6:	0008      	movs	r0, r1
    c0d8:	0011      	movs	r1, r2
    c0da:	4798      	blx	r3
    c0dc:	0002      	movs	r2, r0
    c0de:	4b4f      	ldr	r3, [pc, #316]	; (c21c <AnalogSideLights+0x16e8>)
    c0e0:	494c      	ldr	r1, [pc, #304]	; (c214 <AnalogSideLights+0x16e0>)
    c0e2:	0010      	movs	r0, r2
    c0e4:	4798      	blx	r3
    c0e6:	0003      	movs	r3, r0
    c0e8:	b2da      	uxtb	r2, r3
    c0ea:	4b4d      	ldr	r3, [pc, #308]	; (c220 <AnalogSideLights+0x16ec>)
    c0ec:	701a      	strb	r2, [r3, #0]
			}

			upColor = cycle_index * output_brightness;
    c0ee:	4b4a      	ldr	r3, [pc, #296]	; (c218 <AnalogSideLights+0x16e4>)
    c0f0:	681a      	ldr	r2, [r3, #0]
    c0f2:	4b4d      	ldr	r3, [pc, #308]	; (c228 <AnalogSideLights+0x16f4>)
    c0f4:	0010      	movs	r0, r2
    c0f6:	4798      	blx	r3
    c0f8:	4b4c      	ldr	r3, [pc, #304]	; (c22c <AnalogSideLights+0x16f8>)
    c0fa:	681a      	ldr	r2, [r3, #0]
    c0fc:	4b4c      	ldr	r3, [pc, #304]	; (c230 <AnalogSideLights+0x16fc>)
    c0fe:	1c11      	adds	r1, r2, #0
    c100:	4798      	blx	r3
    c102:	1c03      	adds	r3, r0, #0
    c104:	1c1a      	adds	r2, r3, #0
    c106:	4b4b      	ldr	r3, [pc, #300]	; (c234 <AnalogSideLights+0x1700>)
    c108:	1c10      	adds	r0, r2, #0
    c10a:	4798      	blx	r3
    c10c:	0003      	movs	r3, r0
    c10e:	b29a      	uxth	r2, r3
    c110:	4b49      	ldr	r3, [pc, #292]	; (c238 <AnalogSideLights+0x1704>)
    c112:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    c114:	4b40      	ldr	r3, [pc, #256]	; (c218 <AnalogSideLights+0x16e4>)
    c116:	681b      	ldr	r3, [r3, #0]
    c118:	4a3e      	ldr	r2, [pc, #248]	; (c214 <AnalogSideLights+0x16e0>)
    c11a:	1ad2      	subs	r2, r2, r3
    c11c:	4b42      	ldr	r3, [pc, #264]	; (c228 <AnalogSideLights+0x16f4>)
    c11e:	0010      	movs	r0, r2
    c120:	4798      	blx	r3
    c122:	4b42      	ldr	r3, [pc, #264]	; (c22c <AnalogSideLights+0x16f8>)
    c124:	681a      	ldr	r2, [r3, #0]
    c126:	4b42      	ldr	r3, [pc, #264]	; (c230 <AnalogSideLights+0x16fc>)
    c128:	1c11      	adds	r1, r2, #0
    c12a:	4798      	blx	r3
    c12c:	1c03      	adds	r3, r0, #0
    c12e:	1c1a      	adds	r2, r3, #0
    c130:	4b40      	ldr	r3, [pc, #256]	; (c234 <AnalogSideLights+0x1700>)
    c132:	1c10      	adds	r0, r2, #0
    c134:	4798      	blx	r3
    c136:	0003      	movs	r3, r0
    c138:	b29a      	uxth	r2, r3
    c13a:	4b40      	ldr	r3, [pc, #256]	; (c23c <AnalogSideLights+0x1708>)
    c13c:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    c13e:	4b3e      	ldr	r3, [pc, #248]	; (c238 <AnalogSideLights+0x1704>)
    c140:	8819      	ldrh	r1, [r3, #0]
    c142:	4b3e      	ldr	r3, [pc, #248]	; (c23c <AnalogSideLights+0x1708>)
    c144:	881a      	ldrh	r2, [r3, #0]
    c146:	4b36      	ldr	r3, [pc, #216]	; (c220 <AnalogSideLights+0x16ec>)
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	4d3d      	ldr	r5, [pc, #244]	; (c240 <AnalogSideLights+0x170c>)
    c14c:	0038      	movs	r0, r7
    c14e:	4c3d      	ldr	r4, [pc, #244]	; (c244 <AnalogSideLights+0x1710>)
    c150:	47a0      	blx	r4
    c152:	003b      	movs	r3, r7
    c154:	0028      	movs	r0, r5
    c156:	0019      	movs	r1, r3
    c158:	230c      	movs	r3, #12
    c15a:	001a      	movs	r2, r3
    c15c:	4b3a      	ldr	r3, [pc, #232]	; (c248 <AnalogSideLights+0x1714>)
    c15e:	4798      	blx	r3
			break;
    c160:	e002      	b.n	c168 <AnalogSideLights+0x1634>
			break;
    c162:	46c0      	nop			; (mov r8, r8)
    c164:	e000      	b.n	c168 <AnalogSideLights+0x1634>
			break;
    c166:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(SUPRESS_LEFT_RGB){
    c168:	4b38      	ldr	r3, [pc, #224]	; (c24c <AnalogSideLights+0x1718>)
    c16a:	781b      	ldrb	r3, [r3, #0]
    c16c:	2b00      	cmp	r3, #0
    c16e:	d00b      	beq.n	c188 <AnalogSideLights+0x1654>
		RGB_Ouptut.LR = 0;
    c170:	4b33      	ldr	r3, [pc, #204]	; (c240 <AnalogSideLights+0x170c>)
    c172:	2200      	movs	r2, #0
    c174:	801a      	strh	r2, [r3, #0]
		RGB_Ouptut.LG = 0;
    c176:	4b32      	ldr	r3, [pc, #200]	; (c240 <AnalogSideLights+0x170c>)
    c178:	2200      	movs	r2, #0
    c17a:	805a      	strh	r2, [r3, #2]
		RGB_Ouptut.LB = 0;
    c17c:	4b30      	ldr	r3, [pc, #192]	; (c240 <AnalogSideLights+0x170c>)
    c17e:	2200      	movs	r2, #0
    c180:	809a      	strh	r2, [r3, #4]
		SUPRESS_LEFT_RGB = false;
    c182:	4b32      	ldr	r3, [pc, #200]	; (c24c <AnalogSideLights+0x1718>)
    c184:	2200      	movs	r2, #0
    c186:	701a      	strb	r2, [r3, #0]
	}
	if(SUPRESS_RIGHT_RGB){
    c188:	4b31      	ldr	r3, [pc, #196]	; (c250 <AnalogSideLights+0x171c>)
    c18a:	781b      	ldrb	r3, [r3, #0]
    c18c:	2b00      	cmp	r3, #0
    c18e:	d00b      	beq.n	c1a8 <AnalogSideLights+0x1674>
		RGB_Ouptut.RR = 0;
    c190:	4b2b      	ldr	r3, [pc, #172]	; (c240 <AnalogSideLights+0x170c>)
    c192:	2200      	movs	r2, #0
    c194:	80da      	strh	r2, [r3, #6]
		RGB_Ouptut.RG = 0;
    c196:	4b2a      	ldr	r3, [pc, #168]	; (c240 <AnalogSideLights+0x170c>)
    c198:	2200      	movs	r2, #0
    c19a:	811a      	strh	r2, [r3, #8]
		RGB_Ouptut.RB = 0;
    c19c:	4b28      	ldr	r3, [pc, #160]	; (c240 <AnalogSideLights+0x170c>)
    c19e:	2200      	movs	r2, #0
    c1a0:	815a      	strh	r2, [r3, #10]
		SUPRESS_RIGHT_RGB = false;
    c1a2:	4b2b      	ldr	r3, [pc, #172]	; (c250 <AnalogSideLights+0x171c>)
    c1a4:	2200      	movs	r2, #0
    c1a6:	701a      	strb	r2, [r3, #0]
	}
	
	if(SYNC_RGB)
    c1a8:	4b2a      	ldr	r3, [pc, #168]	; (c254 <AnalogSideLights+0x1720>)
    c1aa:	781b      	ldrb	r3, [r3, #0]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d009      	beq.n	c1c4 <AnalogSideLights+0x1690>
	setLeftRGB(RGB_Ouptut.LR,RGB_Ouptut.LG,RGB_Ouptut.LB);
    c1b0:	4b23      	ldr	r3, [pc, #140]	; (c240 <AnalogSideLights+0x170c>)
    c1b2:	8818      	ldrh	r0, [r3, #0]
    c1b4:	4b22      	ldr	r3, [pc, #136]	; (c240 <AnalogSideLights+0x170c>)
    c1b6:	8859      	ldrh	r1, [r3, #2]
    c1b8:	4b21      	ldr	r3, [pc, #132]	; (c240 <AnalogSideLights+0x170c>)
    c1ba:	889b      	ldrh	r3, [r3, #4]
    c1bc:	001a      	movs	r2, r3
    c1be:	4b26      	ldr	r3, [pc, #152]	; (c258 <AnalogSideLights+0x1724>)
    c1c0:	4798      	blx	r3
    c1c2:	e008      	b.n	c1d6 <AnalogSideLights+0x16a2>
	else
	setLeftRGB(RGB_Ouptut.LG, RGB_Ouptut.LB, RGB_Ouptut.LR);
    c1c4:	4b1e      	ldr	r3, [pc, #120]	; (c240 <AnalogSideLights+0x170c>)
    c1c6:	8858      	ldrh	r0, [r3, #2]
    c1c8:	4b1d      	ldr	r3, [pc, #116]	; (c240 <AnalogSideLights+0x170c>)
    c1ca:	8899      	ldrh	r1, [r3, #4]
    c1cc:	4b1c      	ldr	r3, [pc, #112]	; (c240 <AnalogSideLights+0x170c>)
    c1ce:	881b      	ldrh	r3, [r3, #0]
    c1d0:	001a      	movs	r2, r3
    c1d2:	4b21      	ldr	r3, [pc, #132]	; (c258 <AnalogSideLights+0x1724>)
    c1d4:	4798      	blx	r3
	setRightRGB(RGB_Ouptut.RR,RGB_Ouptut.RG,RGB_Ouptut.RB);
    c1d6:	4b1a      	ldr	r3, [pc, #104]	; (c240 <AnalogSideLights+0x170c>)
    c1d8:	88d8      	ldrh	r0, [r3, #6]
    c1da:	4b19      	ldr	r3, [pc, #100]	; (c240 <AnalogSideLights+0x170c>)
    c1dc:	8919      	ldrh	r1, [r3, #8]
    c1de:	4b18      	ldr	r3, [pc, #96]	; (c240 <AnalogSideLights+0x170c>)
    c1e0:	895b      	ldrh	r3, [r3, #10]
    c1e2:	001a      	movs	r2, r3
    c1e4:	4b1d      	ldr	r3, [pc, #116]	; (c25c <AnalogSideLights+0x1728>)
    c1e6:	4798      	blx	r3
}
    c1e8:	46c0      	nop			; (mov r8, r8)
    c1ea:	46bd      	mov	sp, r7
    c1ec:	b007      	add	sp, #28
    c1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1f0:	20000374 	.word	0x20000374
    c1f4:	0001950d 	.word	0x0001950d
    c1f8:	2000001c 	.word	0x2000001c
    c1fc:	0001bf15 	.word	0x0001bf15
    c200:	0001aa25 	.word	0x0001aa25
    c204:	4107ffe8 	.word	0x4107ffe8
    c208:	0001b28d 	.word	0x0001b28d
    c20c:	0001bdb9 	.word	0x0001bdb9
    c210:	00019461 	.word	0x00019461
    c214:	0000ffff 	.word	0x0000ffff
    c218:	200003b4 	.word	0x200003b4
    c21c:	00019295 	.word	0x00019295
    c220:	200003b2 	.word	0x200003b2
    c224:	20000020 	.word	0x20000020
    c228:	0001a379 	.word	0x0001a379
    c22c:	20000464 	.word	0x20000464
    c230:	00019d21 	.word	0x00019d21
    c234:	000195b1 	.word	0x000195b1
    c238:	200003b8 	.word	0x200003b8
    c23c:	200003ba 	.word	0x200003ba
    c240:	20000394 	.word	0x20000394
    c244:	0000a5d1 	.word	0x0000a5d1
    c248:	0001c15d 	.word	0x0001c15d
    c24c:	200003a0 	.word	0x200003a0
    c250:	200003a1 	.word	0x200003a1
    c254:	200000d2 	.word	0x200000d2
    c258:	0000a439 	.word	0x0000a439
    c25c:	0000a4b5 	.word	0x0000a4b5

0000c260 <DigitalSideLights>:

void DigitalSideLights(){
    c260:	b5f0      	push	{r4, r5, r6, r7, lr}
    c262:	46c6      	mov	lr, r8
    c264:	b500      	push	{lr}
    c266:	b090      	sub	sp, #64	; 0x40
    c268:	af02      	add	r7, sp, #8
	if(check_timer_expired(&digital_refresh_time, (1000/digital_refresh_rate))){
    c26a:	4bdb      	ldr	r3, [pc, #876]	; (c5d8 <DigitalSideLights+0x378>)
    c26c:	781b      	ldrb	r3, [r3, #0]
    c26e:	001a      	movs	r2, r3
    c270:	4bda      	ldr	r3, [pc, #872]	; (c5dc <DigitalSideLights+0x37c>)
    c272:	0011      	movs	r1, r2
    c274:	22fa      	movs	r2, #250	; 0xfa
    c276:	0090      	lsls	r0, r2, #2
    c278:	4798      	blx	r3
    c27a:	0003      	movs	r3, r0
    c27c:	001a      	movs	r2, r3
    c27e:	4bd8      	ldr	r3, [pc, #864]	; (c5e0 <DigitalSideLights+0x380>)
    c280:	0011      	movs	r1, r2
    c282:	0018      	movs	r0, r3
    c284:	4bd7      	ldr	r3, [pc, #860]	; (c5e4 <DigitalSideLights+0x384>)
    c286:	4798      	blx	r3
    c288:	1e03      	subs	r3, r0, #0
    c28a:	d101      	bne.n	c290 <DigitalSideLights+0x30>
    c28c:	f001 f83c 	bl	d308 <DigitalSideLights+0x10a8>
		if(led_num <= MAX_LEDCOUNT && led_num > 0){
    c290:	4bd5      	ldr	r3, [pc, #852]	; (c5e8 <DigitalSideLights+0x388>)
    c292:	781b      	ldrb	r3, [r3, #0]
    c294:	2b48      	cmp	r3, #72	; 0x48
    c296:	d901      	bls.n	c29c <DigitalSideLights+0x3c>
    c298:	f001 f831 	bl	d2fe <DigitalSideLights+0x109e>
    c29c:	4bd2      	ldr	r3, [pc, #840]	; (c5e8 <DigitalSideLights+0x388>)
    c29e:	781b      	ldrb	r3, [r3, #0]
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d101      	bne.n	c2a8 <DigitalSideLights+0x48>
    c2a4:	f001 f82b 	bl	d2fe <DigitalSideLights+0x109e>
			// Set the color frames
			switch(light_mode){
    c2a8:	4bd0      	ldr	r3, [pc, #832]	; (c5ec <DigitalSideLights+0x38c>)
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	2b08      	cmp	r3, #8
    c2ae:	d901      	bls.n	c2b4 <DigitalSideLights+0x54>
    c2b0:	f001 f816 	bl	d2e0 <DigitalSideLights+0x1080>
    c2b4:	009a      	lsls	r2, r3, #2
    c2b6:	4bce      	ldr	r3, [pc, #824]	; (c5f0 <DigitalSideLights+0x390>)
    c2b8:	18d3      	adds	r3, r2, r3
    c2ba:	681b      	ldr	r3, [r3, #0]
    c2bc:	469f      	mov	pc, r3
				case MODE_DIGITAL_STATIC:
					// Slider 1 controls gradient zoom
					// Slider 2 controls gradient position 
					// slider 3 controls brightness
					setDigitalHue(0, Digital_Static_Zoom, Digital_Static_Shift*(764/100)*Digital_Static_Zoom, (uint16_t)(Digital_Static_Brightness*(31.0/100.0)), false);
    c2be:	4bcd      	ldr	r3, [pc, #820]	; (c5f4 <DigitalSideLights+0x394>)
    c2c0:	781d      	ldrb	r5, [r3, #0]
    c2c2:	4bcd      	ldr	r3, [pc, #820]	; (c5f8 <DigitalSideLights+0x398>)
    c2c4:	781b      	ldrb	r3, [r3, #0]
    c2c6:	b29b      	uxth	r3, r3
    c2c8:	4aca      	ldr	r2, [pc, #808]	; (c5f4 <DigitalSideLights+0x394>)
    c2ca:	7812      	ldrb	r2, [r2, #0]
    c2cc:	b292      	uxth	r2, r2
    c2ce:	4353      	muls	r3, r2
    c2d0:	b29b      	uxth	r3, r3
    c2d2:	1c1a      	adds	r2, r3, #0
    c2d4:	00d2      	lsls	r2, r2, #3
    c2d6:	1ad3      	subs	r3, r2, r3
    c2d8:	b29e      	uxth	r6, r3
    c2da:	4bc8      	ldr	r3, [pc, #800]	; (c5fc <DigitalSideLights+0x39c>)
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	001a      	movs	r2, r3
    c2e0:	4bc7      	ldr	r3, [pc, #796]	; (c600 <DigitalSideLights+0x3a0>)
    c2e2:	0010      	movs	r0, r2
    c2e4:	4798      	blx	r3
    c2e6:	4cc7      	ldr	r4, [pc, #796]	; (c604 <DigitalSideLights+0x3a4>)
    c2e8:	4ac7      	ldr	r2, [pc, #796]	; (c608 <DigitalSideLights+0x3a8>)
    c2ea:	4bc8      	ldr	r3, [pc, #800]	; (c60c <DigitalSideLights+0x3ac>)
    c2ec:	47a0      	blx	r4
    c2ee:	0003      	movs	r3, r0
    c2f0:	000c      	movs	r4, r1
    c2f2:	0019      	movs	r1, r3
    c2f4:	0022      	movs	r2, r4
    c2f6:	4bc6      	ldr	r3, [pc, #792]	; (c610 <DigitalSideLights+0x3b0>)
    c2f8:	0008      	movs	r0, r1
    c2fa:	0011      	movs	r1, r2
    c2fc:	4798      	blx	r3
    c2fe:	0003      	movs	r3, r0
    c300:	b29b      	uxth	r3, r3
    c302:	b2da      	uxtb	r2, r3
    c304:	2300      	movs	r3, #0
    c306:	9300      	str	r3, [sp, #0]
    c308:	0013      	movs	r3, r2
    c30a:	0032      	movs	r2, r6
    c30c:	0029      	movs	r1, r5
    c30e:	2000      	movs	r0, #0
    c310:	4cc0      	ldr	r4, [pc, #768]	; (c614 <DigitalSideLights+0x3b4>)
    c312:	47a0      	blx	r4
					break;
    c314:	f000 ffe4 	bl	d2e0 <DigitalSideLights+0x1080>
				case MODE_DIGITAL_SKITTLES:
				{
					static uint8_t skittles_refresh_counter = 0;
					skittles_refresh_counter++;
    c318:	4bbf      	ldr	r3, [pc, #764]	; (c618 <DigitalSideLights+0x3b8>)
    c31a:	781b      	ldrb	r3, [r3, #0]
    c31c:	3301      	adds	r3, #1
    c31e:	b2da      	uxtb	r2, r3
    c320:	4bbd      	ldr	r3, [pc, #756]	; (c618 <DigitalSideLights+0x3b8>)
    c322:	701a      	strb	r2, [r3, #0]
					if(digital_refresh_rate/skittles_refresh_counter <= 20){
    c324:	4bac      	ldr	r3, [pc, #688]	; (c5d8 <DigitalSideLights+0x378>)
    c326:	781a      	ldrb	r2, [r3, #0]
    c328:	4bbb      	ldr	r3, [pc, #748]	; (c618 <DigitalSideLights+0x3b8>)
    c32a:	7819      	ldrb	r1, [r3, #0]
    c32c:	4bbb      	ldr	r3, [pc, #748]	; (c61c <DigitalSideLights+0x3bc>)
    c32e:	0010      	movs	r0, r2
    c330:	4798      	blx	r3
    c332:	0003      	movs	r3, r0
    c334:	b2db      	uxtb	r3, r3
    c336:	2b14      	cmp	r3, #20
    c338:	d901      	bls.n	c33e <DigitalSideLights+0xde>
    c33a:	f000 ffcc 	bl	d2d6 <DigitalSideLights+0x1076>
						skittles_refresh_counter = 0;
    c33e:	4bb6      	ldr	r3, [pc, #728]	; (c618 <DigitalSideLights+0x3b8>)
    c340:	2200      	movs	r2, #0
    c342:	701a      	strb	r2, [r3, #0]
						for(uint16_t i = 0; i < led_num; i++)
    c344:	2326      	movs	r3, #38	; 0x26
    c346:	2210      	movs	r2, #16
    c348:	4694      	mov	ip, r2
    c34a:	44bc      	add	ip, r7
    c34c:	4463      	add	r3, ip
    c34e:	2200      	movs	r2, #0
    c350:	801a      	strh	r2, [r3, #0]
    c352:	e274      	b.n	c83e <DigitalSideLights+0x5de>
						{
							uint8_t weighted_index = (rand() / (RAND_MAX/6));
    c354:	4bb2      	ldr	r3, [pc, #712]	; (c620 <DigitalSideLights+0x3c0>)
    c356:	4798      	blx	r3
    c358:	0002      	movs	r2, r0
    c35a:	4ba0      	ldr	r3, [pc, #640]	; (c5dc <DigitalSideLights+0x37c>)
    c35c:	49b1      	ldr	r1, [pc, #708]	; (c624 <DigitalSideLights+0x3c4>)
    c35e:	0010      	movs	r0, r2
    c360:	4798      	blx	r3
    c362:	0003      	movs	r3, r0
    c364:	001a      	movs	r2, r3
    c366:	230b      	movs	r3, #11
    c368:	2110      	movs	r1, #16
    c36a:	468c      	mov	ip, r1
    c36c:	44bc      	add	ip, r7
    c36e:	4463      	add	r3, ip
    c370:	701a      	strb	r2, [r3, #0]
							L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | (uint16_t)(Digital_Skittles_Brightness*(31.0/100.0)));
    c372:	2326      	movs	r3, #38	; 0x26
    c374:	2210      	movs	r2, #16
    c376:	4694      	mov	ip, r2
    c378:	44bc      	add	ip, r7
    c37a:	4463      	add	r3, ip
    c37c:	881b      	ldrh	r3, [r3, #0]
    c37e:	3301      	adds	r3, #1
    c380:	009d      	lsls	r5, r3, #2
    c382:	2326      	movs	r3, #38	; 0x26
    c384:	2210      	movs	r2, #16
    c386:	4694      	mov	ip, r2
    c388:	44bc      	add	ip, r7
    c38a:	4463      	add	r3, ip
    c38c:	881b      	ldrh	r3, [r3, #0]
    c38e:	3301      	adds	r3, #1
    c390:	009c      	lsls	r4, r3, #2
    c392:	4ba5      	ldr	r3, [pc, #660]	; (c628 <DigitalSideLights+0x3c8>)
    c394:	781b      	ldrb	r3, [r3, #0]
    c396:	001a      	movs	r2, r3
    c398:	4b99      	ldr	r3, [pc, #612]	; (c600 <DigitalSideLights+0x3a0>)
    c39a:	0010      	movs	r0, r2
    c39c:	4798      	blx	r3
    c39e:	4e99      	ldr	r6, [pc, #612]	; (c604 <DigitalSideLights+0x3a4>)
    c3a0:	4a99      	ldr	r2, [pc, #612]	; (c608 <DigitalSideLights+0x3a8>)
    c3a2:	4b9a      	ldr	r3, [pc, #616]	; (c60c <DigitalSideLights+0x3ac>)
    c3a4:	47b0      	blx	r6
    c3a6:	0002      	movs	r2, r0
    c3a8:	000b      	movs	r3, r1
    c3aa:	0011      	movs	r1, r2
    c3ac:	001a      	movs	r2, r3
    c3ae:	4b98      	ldr	r3, [pc, #608]	; (c610 <DigitalSideLights+0x3b0>)
    c3b0:	0008      	movs	r0, r1
    c3b2:	0011      	movs	r1, r2
    c3b4:	4798      	blx	r3
    c3b6:	0003      	movs	r3, r0
    c3b8:	b29b      	uxth	r3, r3
    c3ba:	b2db      	uxtb	r3, r3
    c3bc:	2220      	movs	r2, #32
    c3be:	4252      	negs	r2, r2
    c3c0:	4313      	orrs	r3, r2
    c3c2:	b2da      	uxtb	r2, r3
    c3c4:	4b99      	ldr	r3, [pc, #612]	; (c62c <DigitalSideLights+0x3cc>)
    c3c6:	551a      	strb	r2, [r3, r4]
    c3c8:	4b98      	ldr	r3, [pc, #608]	; (c62c <DigitalSideLights+0x3cc>)
    c3ca:	5d1a      	ldrb	r2, [r3, r4]
    c3cc:	4b98      	ldr	r3, [pc, #608]	; (c630 <DigitalSideLights+0x3d0>)
    c3ce:	555a      	strb	r2, [r3, r5]
							switch(weighted_index){
    c3d0:	230b      	movs	r3, #11
    c3d2:	2210      	movs	r2, #16
    c3d4:	4694      	mov	ip, r2
    c3d6:	44bc      	add	ip, r7
    c3d8:	4463      	add	r3, ip
    c3da:	781b      	ldrb	r3, [r3, #0]
    c3dc:	2b05      	cmp	r3, #5
    c3de:	d900      	bls.n	c3e2 <DigitalSideLights+0x182>
    c3e0:	e220      	b.n	c824 <DigitalSideLights+0x5c4>
    c3e2:	009a      	lsls	r2, r3, #2
    c3e4:	4b93      	ldr	r3, [pc, #588]	; (c634 <DigitalSideLights+0x3d4>)
    c3e6:	18d3      	adds	r3, r2, r3
    c3e8:	681b      	ldr	r3, [r3, #0]
    c3ea:	469f      	mov	pc, r3
								case 0:
									L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 31);
    c3ec:	2326      	movs	r3, #38	; 0x26
    c3ee:	2210      	movs	r2, #16
    c3f0:	4694      	mov	ip, r2
    c3f2:	44bc      	add	ip, r7
    c3f4:	4463      	add	r3, ip
    c3f6:	881b      	ldrh	r3, [r3, #0]
    c3f8:	009b      	lsls	r3, r3, #2
    c3fa:	1d5d      	adds	r5, r3, #5
    c3fc:	2326      	movs	r3, #38	; 0x26
    c3fe:	2210      	movs	r2, #16
    c400:	4694      	mov	ip, r2
    c402:	44bc      	add	ip, r7
    c404:	4463      	add	r3, ip
    c406:	881b      	ldrh	r3, [r3, #0]
    c408:	009b      	lsls	r3, r3, #2
    c40a:	1d5c      	adds	r4, r3, #5
    c40c:	4b84      	ldr	r3, [pc, #528]	; (c620 <DigitalSideLights+0x3c0>)
    c40e:	4798      	blx	r3
    c410:	0003      	movs	r3, r0
    c412:	17db      	asrs	r3, r3, #31
    c414:	b2da      	uxtb	r2, r3
    c416:	4b85      	ldr	r3, [pc, #532]	; (c62c <DigitalSideLights+0x3cc>)
    c418:	551a      	strb	r2, [r3, r4]
    c41a:	4b84      	ldr	r3, [pc, #528]	; (c62c <DigitalSideLights+0x3cc>)
    c41c:	5d1a      	ldrb	r2, [r3, r4]
    c41e:	4b84      	ldr	r3, [pc, #528]	; (c630 <DigitalSideLights+0x3d0>)
    c420:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 23);
    c422:	2326      	movs	r3, #38	; 0x26
    c424:	2210      	movs	r2, #16
    c426:	4694      	mov	ip, r2
    c428:	44bc      	add	ip, r7
    c42a:	4463      	add	r3, ip
    c42c:	881b      	ldrh	r3, [r3, #0]
    c42e:	009b      	lsls	r3, r3, #2
    c430:	1d9d      	adds	r5, r3, #6
    c432:	2326      	movs	r3, #38	; 0x26
    c434:	2210      	movs	r2, #16
    c436:	4694      	mov	ip, r2
    c438:	44bc      	add	ip, r7
    c43a:	4463      	add	r3, ip
    c43c:	881b      	ldrh	r3, [r3, #0]
    c43e:	009b      	lsls	r3, r3, #2
    c440:	1d9c      	adds	r4, r3, #6
    c442:	4b77      	ldr	r3, [pc, #476]	; (c620 <DigitalSideLights+0x3c0>)
    c444:	4798      	blx	r3
    c446:	0003      	movs	r3, r0
    c448:	15db      	asrs	r3, r3, #23
    c44a:	b2da      	uxtb	r2, r3
    c44c:	4b77      	ldr	r3, [pc, #476]	; (c62c <DigitalSideLights+0x3cc>)
    c44e:	551a      	strb	r2, [r3, r4]
    c450:	4b76      	ldr	r3, [pc, #472]	; (c62c <DigitalSideLights+0x3cc>)
    c452:	5d1a      	ldrb	r2, [r3, r4]
    c454:	4b76      	ldr	r3, [pc, #472]	; (c630 <DigitalSideLights+0x3d0>)
    c456:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 23);
    c458:	2326      	movs	r3, #38	; 0x26
    c45a:	2210      	movs	r2, #16
    c45c:	4694      	mov	ip, r2
    c45e:	44bc      	add	ip, r7
    c460:	4463      	add	r3, ip
    c462:	881b      	ldrh	r3, [r3, #0]
    c464:	009b      	lsls	r3, r3, #2
    c466:	1ddd      	adds	r5, r3, #7
    c468:	2326      	movs	r3, #38	; 0x26
    c46a:	2210      	movs	r2, #16
    c46c:	4694      	mov	ip, r2
    c46e:	44bc      	add	ip, r7
    c470:	4463      	add	r3, ip
    c472:	881b      	ldrh	r3, [r3, #0]
    c474:	009b      	lsls	r3, r3, #2
    c476:	1ddc      	adds	r4, r3, #7
    c478:	4b69      	ldr	r3, [pc, #420]	; (c620 <DigitalSideLights+0x3c0>)
    c47a:	4798      	blx	r3
    c47c:	0003      	movs	r3, r0
    c47e:	15db      	asrs	r3, r3, #23
    c480:	b2da      	uxtb	r2, r3
    c482:	4b6a      	ldr	r3, [pc, #424]	; (c62c <DigitalSideLights+0x3cc>)
    c484:	551a      	strb	r2, [r3, r4]
    c486:	4b69      	ldr	r3, [pc, #420]	; (c62c <DigitalSideLights+0x3cc>)
    c488:	5d1a      	ldrb	r2, [r3, r4]
    c48a:	4b69      	ldr	r3, [pc, #420]	; (c630 <DigitalSideLights+0x3d0>)
    c48c:	555a      	strb	r2, [r3, r5]
									break;
    c48e:	e1c9      	b.n	c824 <DigitalSideLights+0x5c4>
								case 1:
									L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 23);
    c490:	2326      	movs	r3, #38	; 0x26
    c492:	2210      	movs	r2, #16
    c494:	4694      	mov	ip, r2
    c496:	44bc      	add	ip, r7
    c498:	4463      	add	r3, ip
    c49a:	881b      	ldrh	r3, [r3, #0]
    c49c:	009b      	lsls	r3, r3, #2
    c49e:	1d5d      	adds	r5, r3, #5
    c4a0:	2326      	movs	r3, #38	; 0x26
    c4a2:	2210      	movs	r2, #16
    c4a4:	4694      	mov	ip, r2
    c4a6:	44bc      	add	ip, r7
    c4a8:	4463      	add	r3, ip
    c4aa:	881b      	ldrh	r3, [r3, #0]
    c4ac:	009b      	lsls	r3, r3, #2
    c4ae:	1d5c      	adds	r4, r3, #5
    c4b0:	4b5b      	ldr	r3, [pc, #364]	; (c620 <DigitalSideLights+0x3c0>)
    c4b2:	4798      	blx	r3
    c4b4:	0003      	movs	r3, r0
    c4b6:	15db      	asrs	r3, r3, #23
    c4b8:	b2da      	uxtb	r2, r3
    c4ba:	4b5c      	ldr	r3, [pc, #368]	; (c62c <DigitalSideLights+0x3cc>)
    c4bc:	551a      	strb	r2, [r3, r4]
    c4be:	4b5b      	ldr	r3, [pc, #364]	; (c62c <DigitalSideLights+0x3cc>)
    c4c0:	5d1a      	ldrb	r2, [r3, r4]
    c4c2:	4b5b      	ldr	r3, [pc, #364]	; (c630 <DigitalSideLights+0x3d0>)
    c4c4:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 31);
    c4c6:	2326      	movs	r3, #38	; 0x26
    c4c8:	2210      	movs	r2, #16
    c4ca:	4694      	mov	ip, r2
    c4cc:	44bc      	add	ip, r7
    c4ce:	4463      	add	r3, ip
    c4d0:	881b      	ldrh	r3, [r3, #0]
    c4d2:	009b      	lsls	r3, r3, #2
    c4d4:	1d9d      	adds	r5, r3, #6
    c4d6:	2326      	movs	r3, #38	; 0x26
    c4d8:	2210      	movs	r2, #16
    c4da:	4694      	mov	ip, r2
    c4dc:	44bc      	add	ip, r7
    c4de:	4463      	add	r3, ip
    c4e0:	881b      	ldrh	r3, [r3, #0]
    c4e2:	009b      	lsls	r3, r3, #2
    c4e4:	1d9c      	adds	r4, r3, #6
    c4e6:	4b4e      	ldr	r3, [pc, #312]	; (c620 <DigitalSideLights+0x3c0>)
    c4e8:	4798      	blx	r3
    c4ea:	0003      	movs	r3, r0
    c4ec:	17db      	asrs	r3, r3, #31
    c4ee:	b2da      	uxtb	r2, r3
    c4f0:	4b4e      	ldr	r3, [pc, #312]	; (c62c <DigitalSideLights+0x3cc>)
    c4f2:	551a      	strb	r2, [r3, r4]
    c4f4:	4b4d      	ldr	r3, [pc, #308]	; (c62c <DigitalSideLights+0x3cc>)
    c4f6:	5d1a      	ldrb	r2, [r3, r4]
    c4f8:	4b4d      	ldr	r3, [pc, #308]	; (c630 <DigitalSideLights+0x3d0>)
    c4fa:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 23);
    c4fc:	2326      	movs	r3, #38	; 0x26
    c4fe:	2210      	movs	r2, #16
    c500:	4694      	mov	ip, r2
    c502:	44bc      	add	ip, r7
    c504:	4463      	add	r3, ip
    c506:	881b      	ldrh	r3, [r3, #0]
    c508:	009b      	lsls	r3, r3, #2
    c50a:	1ddd      	adds	r5, r3, #7
    c50c:	2326      	movs	r3, #38	; 0x26
    c50e:	2210      	movs	r2, #16
    c510:	4694      	mov	ip, r2
    c512:	44bc      	add	ip, r7
    c514:	4463      	add	r3, ip
    c516:	881b      	ldrh	r3, [r3, #0]
    c518:	009b      	lsls	r3, r3, #2
    c51a:	1ddc      	adds	r4, r3, #7
    c51c:	4b40      	ldr	r3, [pc, #256]	; (c620 <DigitalSideLights+0x3c0>)
    c51e:	4798      	blx	r3
    c520:	0003      	movs	r3, r0
    c522:	15db      	asrs	r3, r3, #23
    c524:	b2da      	uxtb	r2, r3
    c526:	4b41      	ldr	r3, [pc, #260]	; (c62c <DigitalSideLights+0x3cc>)
    c528:	551a      	strb	r2, [r3, r4]
    c52a:	4b40      	ldr	r3, [pc, #256]	; (c62c <DigitalSideLights+0x3cc>)
    c52c:	5d1a      	ldrb	r2, [r3, r4]
    c52e:	4b40      	ldr	r3, [pc, #256]	; (c630 <DigitalSideLights+0x3d0>)
    c530:	555a      	strb	r2, [r3, r5]
									break;
    c532:	e177      	b.n	c824 <DigitalSideLights+0x5c4>
								case 2:
									L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 23);
    c534:	2326      	movs	r3, #38	; 0x26
    c536:	2210      	movs	r2, #16
    c538:	4694      	mov	ip, r2
    c53a:	44bc      	add	ip, r7
    c53c:	4463      	add	r3, ip
    c53e:	881b      	ldrh	r3, [r3, #0]
    c540:	009b      	lsls	r3, r3, #2
    c542:	1d5d      	adds	r5, r3, #5
    c544:	2326      	movs	r3, #38	; 0x26
    c546:	2210      	movs	r2, #16
    c548:	4694      	mov	ip, r2
    c54a:	44bc      	add	ip, r7
    c54c:	4463      	add	r3, ip
    c54e:	881b      	ldrh	r3, [r3, #0]
    c550:	009b      	lsls	r3, r3, #2
    c552:	1d5c      	adds	r4, r3, #5
    c554:	4b32      	ldr	r3, [pc, #200]	; (c620 <DigitalSideLights+0x3c0>)
    c556:	4798      	blx	r3
    c558:	0003      	movs	r3, r0
    c55a:	15db      	asrs	r3, r3, #23
    c55c:	b2da      	uxtb	r2, r3
    c55e:	4b33      	ldr	r3, [pc, #204]	; (c62c <DigitalSideLights+0x3cc>)
    c560:	551a      	strb	r2, [r3, r4]
    c562:	4b32      	ldr	r3, [pc, #200]	; (c62c <DigitalSideLights+0x3cc>)
    c564:	5d1a      	ldrb	r2, [r3, r4]
    c566:	4b32      	ldr	r3, [pc, #200]	; (c630 <DigitalSideLights+0x3d0>)
    c568:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 23);
    c56a:	2326      	movs	r3, #38	; 0x26
    c56c:	2210      	movs	r2, #16
    c56e:	4694      	mov	ip, r2
    c570:	44bc      	add	ip, r7
    c572:	4463      	add	r3, ip
    c574:	881b      	ldrh	r3, [r3, #0]
    c576:	009b      	lsls	r3, r3, #2
    c578:	1d9d      	adds	r5, r3, #6
    c57a:	2326      	movs	r3, #38	; 0x26
    c57c:	2210      	movs	r2, #16
    c57e:	4694      	mov	ip, r2
    c580:	44bc      	add	ip, r7
    c582:	4463      	add	r3, ip
    c584:	881b      	ldrh	r3, [r3, #0]
    c586:	009b      	lsls	r3, r3, #2
    c588:	1d9c      	adds	r4, r3, #6
    c58a:	4b25      	ldr	r3, [pc, #148]	; (c620 <DigitalSideLights+0x3c0>)
    c58c:	4798      	blx	r3
    c58e:	0003      	movs	r3, r0
    c590:	15db      	asrs	r3, r3, #23
    c592:	b2da      	uxtb	r2, r3
    c594:	4b25      	ldr	r3, [pc, #148]	; (c62c <DigitalSideLights+0x3cc>)
    c596:	551a      	strb	r2, [r3, r4]
    c598:	4b24      	ldr	r3, [pc, #144]	; (c62c <DigitalSideLights+0x3cc>)
    c59a:	5d1a      	ldrb	r2, [r3, r4]
    c59c:	4b24      	ldr	r3, [pc, #144]	; (c630 <DigitalSideLights+0x3d0>)
    c59e:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 31);
    c5a0:	2326      	movs	r3, #38	; 0x26
    c5a2:	2210      	movs	r2, #16
    c5a4:	4694      	mov	ip, r2
    c5a6:	44bc      	add	ip, r7
    c5a8:	4463      	add	r3, ip
    c5aa:	881b      	ldrh	r3, [r3, #0]
    c5ac:	009b      	lsls	r3, r3, #2
    c5ae:	1ddd      	adds	r5, r3, #7
    c5b0:	2326      	movs	r3, #38	; 0x26
    c5b2:	2210      	movs	r2, #16
    c5b4:	4694      	mov	ip, r2
    c5b6:	44bc      	add	ip, r7
    c5b8:	4463      	add	r3, ip
    c5ba:	881b      	ldrh	r3, [r3, #0]
    c5bc:	009b      	lsls	r3, r3, #2
    c5be:	1ddc      	adds	r4, r3, #7
    c5c0:	4b17      	ldr	r3, [pc, #92]	; (c620 <DigitalSideLights+0x3c0>)
    c5c2:	4798      	blx	r3
    c5c4:	0003      	movs	r3, r0
    c5c6:	17db      	asrs	r3, r3, #31
    c5c8:	b2da      	uxtb	r2, r3
    c5ca:	4b18      	ldr	r3, [pc, #96]	; (c62c <DigitalSideLights+0x3cc>)
    c5cc:	551a      	strb	r2, [r3, r4]
    c5ce:	4b17      	ldr	r3, [pc, #92]	; (c62c <DigitalSideLights+0x3cc>)
    c5d0:	5d1a      	ldrb	r2, [r3, r4]
    c5d2:	4b17      	ldr	r3, [pc, #92]	; (c630 <DigitalSideLights+0x3d0>)
    c5d4:	555a      	strb	r2, [r3, r5]
									break;
    c5d6:	e125      	b.n	c824 <DigitalSideLights+0x5c4>
    c5d8:	200000e1 	.word	0x200000e1
    c5dc:	00019295 	.word	0x00019295
    c5e0:	200003c4 	.word	0x200003c4
    c5e4:	00009fbd 	.word	0x00009fbd
    c5e8:	200000e0 	.word	0x200000e0
    c5ec:	2000003c 	.word	0x2000003c
    c5f0:	0001c6c4 	.word	0x0001c6c4
    c5f4:	200000b5 	.word	0x200000b5
    c5f8:	200000b6 	.word	0x200000b6
    c5fc:	200000b7 	.word	0x200000b7
    c600:	0001be21 	.word	0x0001be21
    c604:	0001b28d 	.word	0x0001b28d
    c608:	3d70a3d7 	.word	0x3d70a3d7
    c60c:	3fd3d70a 	.word	0x3fd3d70a
    c610:	000195e1 	.word	0x000195e1
    c614:	0000e1d9 	.word	0x0000e1d9
    c618:	20000468 	.word	0x20000468
    c61c:	00019181 	.word	0x00019181
    c620:	0001c1a5 	.word	0x0001c1a5
    c624:	15555555 	.word	0x15555555
    c628:	200000b8 	.word	0x200000b8
    c62c:	20000598 	.word	0x20000598
    c630:	20001440 	.word	0x20001440
    c634:	0001c6e8 	.word	0x0001c6e8
								case 3:
									L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 23);
    c638:	2326      	movs	r3, #38	; 0x26
    c63a:	2210      	movs	r2, #16
    c63c:	4694      	mov	ip, r2
    c63e:	44bc      	add	ip, r7
    c640:	4463      	add	r3, ip
    c642:	881b      	ldrh	r3, [r3, #0]
    c644:	009b      	lsls	r3, r3, #2
    c646:	1d5d      	adds	r5, r3, #5
    c648:	2326      	movs	r3, #38	; 0x26
    c64a:	2210      	movs	r2, #16
    c64c:	4694      	mov	ip, r2
    c64e:	44bc      	add	ip, r7
    c650:	4463      	add	r3, ip
    c652:	881b      	ldrh	r3, [r3, #0]
    c654:	009b      	lsls	r3, r3, #2
    c656:	1d5c      	adds	r4, r3, #5
    c658:	4be1      	ldr	r3, [pc, #900]	; (c9e0 <DigitalSideLights+0x780>)
    c65a:	4798      	blx	r3
    c65c:	0003      	movs	r3, r0
    c65e:	15db      	asrs	r3, r3, #23
    c660:	b2da      	uxtb	r2, r3
    c662:	4be0      	ldr	r3, [pc, #896]	; (c9e4 <DigitalSideLights+0x784>)
    c664:	551a      	strb	r2, [r3, r4]
    c666:	4bdf      	ldr	r3, [pc, #892]	; (c9e4 <DigitalSideLights+0x784>)
    c668:	5d1a      	ldrb	r2, [r3, r4]
    c66a:	4bdf      	ldr	r3, [pc, #892]	; (c9e8 <DigitalSideLights+0x788>)
    c66c:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 27);
    c66e:	2326      	movs	r3, #38	; 0x26
    c670:	2210      	movs	r2, #16
    c672:	4694      	mov	ip, r2
    c674:	44bc      	add	ip, r7
    c676:	4463      	add	r3, ip
    c678:	881b      	ldrh	r3, [r3, #0]
    c67a:	009b      	lsls	r3, r3, #2
    c67c:	1d9d      	adds	r5, r3, #6
    c67e:	2326      	movs	r3, #38	; 0x26
    c680:	2210      	movs	r2, #16
    c682:	4694      	mov	ip, r2
    c684:	44bc      	add	ip, r7
    c686:	4463      	add	r3, ip
    c688:	881b      	ldrh	r3, [r3, #0]
    c68a:	009b      	lsls	r3, r3, #2
    c68c:	1d9c      	adds	r4, r3, #6
    c68e:	4bd4      	ldr	r3, [pc, #848]	; (c9e0 <DigitalSideLights+0x780>)
    c690:	4798      	blx	r3
    c692:	0003      	movs	r3, r0
    c694:	16db      	asrs	r3, r3, #27
    c696:	b2da      	uxtb	r2, r3
    c698:	4bd2      	ldr	r3, [pc, #840]	; (c9e4 <DigitalSideLights+0x784>)
    c69a:	551a      	strb	r2, [r3, r4]
    c69c:	4bd1      	ldr	r3, [pc, #836]	; (c9e4 <DigitalSideLights+0x784>)
    c69e:	5d1a      	ldrb	r2, [r3, r4]
    c6a0:	4bd1      	ldr	r3, [pc, #836]	; (c9e8 <DigitalSideLights+0x788>)
    c6a2:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 27);
    c6a4:	2326      	movs	r3, #38	; 0x26
    c6a6:	2210      	movs	r2, #16
    c6a8:	4694      	mov	ip, r2
    c6aa:	44bc      	add	ip, r7
    c6ac:	4463      	add	r3, ip
    c6ae:	881b      	ldrh	r3, [r3, #0]
    c6b0:	009b      	lsls	r3, r3, #2
    c6b2:	1ddd      	adds	r5, r3, #7
    c6b4:	2326      	movs	r3, #38	; 0x26
    c6b6:	2210      	movs	r2, #16
    c6b8:	4694      	mov	ip, r2
    c6ba:	44bc      	add	ip, r7
    c6bc:	4463      	add	r3, ip
    c6be:	881b      	ldrh	r3, [r3, #0]
    c6c0:	009b      	lsls	r3, r3, #2
    c6c2:	1ddc      	adds	r4, r3, #7
    c6c4:	4bc6      	ldr	r3, [pc, #792]	; (c9e0 <DigitalSideLights+0x780>)
    c6c6:	4798      	blx	r3
    c6c8:	0003      	movs	r3, r0
    c6ca:	16db      	asrs	r3, r3, #27
    c6cc:	b2da      	uxtb	r2, r3
    c6ce:	4bc5      	ldr	r3, [pc, #788]	; (c9e4 <DigitalSideLights+0x784>)
    c6d0:	551a      	strb	r2, [r3, r4]
    c6d2:	4bc4      	ldr	r3, [pc, #784]	; (c9e4 <DigitalSideLights+0x784>)
    c6d4:	5d1a      	ldrb	r2, [r3, r4]
    c6d6:	4bc4      	ldr	r3, [pc, #784]	; (c9e8 <DigitalSideLights+0x788>)
    c6d8:	555a      	strb	r2, [r3, r5]
									break;
    c6da:	e0a3      	b.n	c824 <DigitalSideLights+0x5c4>
								case 4:
									L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 27);
    c6dc:	2326      	movs	r3, #38	; 0x26
    c6de:	2210      	movs	r2, #16
    c6e0:	4694      	mov	ip, r2
    c6e2:	44bc      	add	ip, r7
    c6e4:	4463      	add	r3, ip
    c6e6:	881b      	ldrh	r3, [r3, #0]
    c6e8:	009b      	lsls	r3, r3, #2
    c6ea:	1d5d      	adds	r5, r3, #5
    c6ec:	2326      	movs	r3, #38	; 0x26
    c6ee:	2210      	movs	r2, #16
    c6f0:	4694      	mov	ip, r2
    c6f2:	44bc      	add	ip, r7
    c6f4:	4463      	add	r3, ip
    c6f6:	881b      	ldrh	r3, [r3, #0]
    c6f8:	009b      	lsls	r3, r3, #2
    c6fa:	1d5c      	adds	r4, r3, #5
    c6fc:	4bb8      	ldr	r3, [pc, #736]	; (c9e0 <DigitalSideLights+0x780>)
    c6fe:	4798      	blx	r3
    c700:	0003      	movs	r3, r0
    c702:	16db      	asrs	r3, r3, #27
    c704:	b2da      	uxtb	r2, r3
    c706:	4bb7      	ldr	r3, [pc, #732]	; (c9e4 <DigitalSideLights+0x784>)
    c708:	551a      	strb	r2, [r3, r4]
    c70a:	4bb6      	ldr	r3, [pc, #728]	; (c9e4 <DigitalSideLights+0x784>)
    c70c:	5d1a      	ldrb	r2, [r3, r4]
    c70e:	4bb6      	ldr	r3, [pc, #728]	; (c9e8 <DigitalSideLights+0x788>)
    c710:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 23);
    c712:	2326      	movs	r3, #38	; 0x26
    c714:	2210      	movs	r2, #16
    c716:	4694      	mov	ip, r2
    c718:	44bc      	add	ip, r7
    c71a:	4463      	add	r3, ip
    c71c:	881b      	ldrh	r3, [r3, #0]
    c71e:	009b      	lsls	r3, r3, #2
    c720:	1d9d      	adds	r5, r3, #6
    c722:	2326      	movs	r3, #38	; 0x26
    c724:	2210      	movs	r2, #16
    c726:	4694      	mov	ip, r2
    c728:	44bc      	add	ip, r7
    c72a:	4463      	add	r3, ip
    c72c:	881b      	ldrh	r3, [r3, #0]
    c72e:	009b      	lsls	r3, r3, #2
    c730:	1d9c      	adds	r4, r3, #6
    c732:	4bab      	ldr	r3, [pc, #684]	; (c9e0 <DigitalSideLights+0x780>)
    c734:	4798      	blx	r3
    c736:	0003      	movs	r3, r0
    c738:	15db      	asrs	r3, r3, #23
    c73a:	b2da      	uxtb	r2, r3
    c73c:	4ba9      	ldr	r3, [pc, #676]	; (c9e4 <DigitalSideLights+0x784>)
    c73e:	551a      	strb	r2, [r3, r4]
    c740:	4ba8      	ldr	r3, [pc, #672]	; (c9e4 <DigitalSideLights+0x784>)
    c742:	5d1a      	ldrb	r2, [r3, r4]
    c744:	4ba8      	ldr	r3, [pc, #672]	; (c9e8 <DigitalSideLights+0x788>)
    c746:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 27);
    c748:	2326      	movs	r3, #38	; 0x26
    c74a:	2210      	movs	r2, #16
    c74c:	4694      	mov	ip, r2
    c74e:	44bc      	add	ip, r7
    c750:	4463      	add	r3, ip
    c752:	881b      	ldrh	r3, [r3, #0]
    c754:	009b      	lsls	r3, r3, #2
    c756:	1ddd      	adds	r5, r3, #7
    c758:	2326      	movs	r3, #38	; 0x26
    c75a:	2210      	movs	r2, #16
    c75c:	4694      	mov	ip, r2
    c75e:	44bc      	add	ip, r7
    c760:	4463      	add	r3, ip
    c762:	881b      	ldrh	r3, [r3, #0]
    c764:	009b      	lsls	r3, r3, #2
    c766:	1ddc      	adds	r4, r3, #7
    c768:	4b9d      	ldr	r3, [pc, #628]	; (c9e0 <DigitalSideLights+0x780>)
    c76a:	4798      	blx	r3
    c76c:	0003      	movs	r3, r0
    c76e:	16db      	asrs	r3, r3, #27
    c770:	b2da      	uxtb	r2, r3
    c772:	4b9c      	ldr	r3, [pc, #624]	; (c9e4 <DigitalSideLights+0x784>)
    c774:	551a      	strb	r2, [r3, r4]
    c776:	4b9b      	ldr	r3, [pc, #620]	; (c9e4 <DigitalSideLights+0x784>)
    c778:	5d1a      	ldrb	r2, [r3, r4]
    c77a:	4b9b      	ldr	r3, [pc, #620]	; (c9e8 <DigitalSideLights+0x788>)
    c77c:	555a      	strb	r2, [r3, r5]
									break;
    c77e:	e051      	b.n	c824 <DigitalSideLights+0x5c4>
								case 5:
									L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 27);
    c780:	2326      	movs	r3, #38	; 0x26
    c782:	2210      	movs	r2, #16
    c784:	4694      	mov	ip, r2
    c786:	44bc      	add	ip, r7
    c788:	4463      	add	r3, ip
    c78a:	881b      	ldrh	r3, [r3, #0]
    c78c:	009b      	lsls	r3, r3, #2
    c78e:	1d5d      	adds	r5, r3, #5
    c790:	2326      	movs	r3, #38	; 0x26
    c792:	2210      	movs	r2, #16
    c794:	4694      	mov	ip, r2
    c796:	44bc      	add	ip, r7
    c798:	4463      	add	r3, ip
    c79a:	881b      	ldrh	r3, [r3, #0]
    c79c:	009b      	lsls	r3, r3, #2
    c79e:	1d5c      	adds	r4, r3, #5
    c7a0:	4b8f      	ldr	r3, [pc, #572]	; (c9e0 <DigitalSideLights+0x780>)
    c7a2:	4798      	blx	r3
    c7a4:	0003      	movs	r3, r0
    c7a6:	16db      	asrs	r3, r3, #27
    c7a8:	b2da      	uxtb	r2, r3
    c7aa:	4b8e      	ldr	r3, [pc, #568]	; (c9e4 <DigitalSideLights+0x784>)
    c7ac:	551a      	strb	r2, [r3, r4]
    c7ae:	4b8d      	ldr	r3, [pc, #564]	; (c9e4 <DigitalSideLights+0x784>)
    c7b0:	5d1a      	ldrb	r2, [r3, r4]
    c7b2:	4b8d      	ldr	r3, [pc, #564]	; (c9e8 <DigitalSideLights+0x788>)
    c7b4:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 27);
    c7b6:	2326      	movs	r3, #38	; 0x26
    c7b8:	2210      	movs	r2, #16
    c7ba:	4694      	mov	ip, r2
    c7bc:	44bc      	add	ip, r7
    c7be:	4463      	add	r3, ip
    c7c0:	881b      	ldrh	r3, [r3, #0]
    c7c2:	009b      	lsls	r3, r3, #2
    c7c4:	1d9d      	adds	r5, r3, #6
    c7c6:	2326      	movs	r3, #38	; 0x26
    c7c8:	2210      	movs	r2, #16
    c7ca:	4694      	mov	ip, r2
    c7cc:	44bc      	add	ip, r7
    c7ce:	4463      	add	r3, ip
    c7d0:	881b      	ldrh	r3, [r3, #0]
    c7d2:	009b      	lsls	r3, r3, #2
    c7d4:	1d9c      	adds	r4, r3, #6
    c7d6:	4b82      	ldr	r3, [pc, #520]	; (c9e0 <DigitalSideLights+0x780>)
    c7d8:	4798      	blx	r3
    c7da:	0003      	movs	r3, r0
    c7dc:	16db      	asrs	r3, r3, #27
    c7de:	b2da      	uxtb	r2, r3
    c7e0:	4b80      	ldr	r3, [pc, #512]	; (c9e4 <DigitalSideLights+0x784>)
    c7e2:	551a      	strb	r2, [r3, r4]
    c7e4:	4b7f      	ldr	r3, [pc, #508]	; (c9e4 <DigitalSideLights+0x784>)
    c7e6:	5d1a      	ldrb	r2, [r3, r4]
    c7e8:	4b7f      	ldr	r3, [pc, #508]	; (c9e8 <DigitalSideLights+0x788>)
    c7ea:	555a      	strb	r2, [r3, r5]
									L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 23);
    c7ec:	2326      	movs	r3, #38	; 0x26
    c7ee:	2210      	movs	r2, #16
    c7f0:	4694      	mov	ip, r2
    c7f2:	44bc      	add	ip, r7
    c7f4:	4463      	add	r3, ip
    c7f6:	881b      	ldrh	r3, [r3, #0]
    c7f8:	009b      	lsls	r3, r3, #2
    c7fa:	1ddd      	adds	r5, r3, #7
    c7fc:	2326      	movs	r3, #38	; 0x26
    c7fe:	2210      	movs	r2, #16
    c800:	4694      	mov	ip, r2
    c802:	44bc      	add	ip, r7
    c804:	4463      	add	r3, ip
    c806:	881b      	ldrh	r3, [r3, #0]
    c808:	009b      	lsls	r3, r3, #2
    c80a:	1ddc      	adds	r4, r3, #7
    c80c:	4b74      	ldr	r3, [pc, #464]	; (c9e0 <DigitalSideLights+0x780>)
    c80e:	4798      	blx	r3
    c810:	0003      	movs	r3, r0
    c812:	15db      	asrs	r3, r3, #23
    c814:	b2da      	uxtb	r2, r3
    c816:	4b73      	ldr	r3, [pc, #460]	; (c9e4 <DigitalSideLights+0x784>)
    c818:	551a      	strb	r2, [r3, r4]
    c81a:	4b72      	ldr	r3, [pc, #456]	; (c9e4 <DigitalSideLights+0x784>)
    c81c:	5d1a      	ldrb	r2, [r3, r4]
    c81e:	4b72      	ldr	r3, [pc, #456]	; (c9e8 <DigitalSideLights+0x788>)
    c820:	555a      	strb	r2, [r3, r5]
									break;
    c822:	46c0      	nop			; (mov r8, r8)
						for(uint16_t i = 0; i < led_num; i++)
    c824:	2326      	movs	r3, #38	; 0x26
    c826:	2210      	movs	r2, #16
    c828:	4694      	mov	ip, r2
    c82a:	44bc      	add	ip, r7
    c82c:	4463      	add	r3, ip
    c82e:	881a      	ldrh	r2, [r3, #0]
    c830:	2326      	movs	r3, #38	; 0x26
    c832:	2110      	movs	r1, #16
    c834:	468c      	mov	ip, r1
    c836:	44bc      	add	ip, r7
    c838:	4463      	add	r3, ip
    c83a:	3201      	adds	r2, #1
    c83c:	801a      	strh	r2, [r3, #0]
    c83e:	4b6b      	ldr	r3, [pc, #428]	; (c9ec <DigitalSideLights+0x78c>)
    c840:	781b      	ldrb	r3, [r3, #0]
    c842:	b29b      	uxth	r3, r3
    c844:	2226      	movs	r2, #38	; 0x26
    c846:	2110      	movs	r1, #16
    c848:	468c      	mov	ip, r1
    c84a:	44bc      	add	ip, r7
    c84c:	4462      	add	r2, ip
    c84e:	8812      	ldrh	r2, [r2, #0]
    c850:	429a      	cmp	r2, r3
    c852:	d200      	bcs.n	c856 <DigitalSideLights+0x5f6>
    c854:	e57e      	b.n	c354 <DigitalSideLights+0xf4>
							}
						}
					}
					break;
    c856:	f000 fd3e 	bl	d2d6 <DigitalSideLights+0x1076>
				}
				case MODE_DIGITAL_GRADIENT_CYCLE:
				{
					uint16_t x = (uint16_t)(millis()/((101.0-Digital_Cycle_Rate)/20.0))%(764*Digital_Cycle_Zoom);
    c85a:	4b65      	ldr	r3, [pc, #404]	; (c9f0 <DigitalSideLights+0x790>)
    c85c:	4798      	blx	r3
    c85e:	0002      	movs	r2, r0
    c860:	4b64      	ldr	r3, [pc, #400]	; (c9f4 <DigitalSideLights+0x794>)
    c862:	0010      	movs	r0, r2
    c864:	4798      	blx	r3
    c866:	0005      	movs	r5, r0
    c868:	000e      	movs	r6, r1
    c86a:	4b63      	ldr	r3, [pc, #396]	; (c9f8 <DigitalSideLights+0x798>)
    c86c:	781b      	ldrb	r3, [r3, #0]
    c86e:	001a      	movs	r2, r3
    c870:	4b62      	ldr	r3, [pc, #392]	; (c9fc <DigitalSideLights+0x79c>)
    c872:	0010      	movs	r0, r2
    c874:	4798      	blx	r3
    c876:	0002      	movs	r2, r0
    c878:	000b      	movs	r3, r1
    c87a:	4c61      	ldr	r4, [pc, #388]	; (ca00 <DigitalSideLights+0x7a0>)
    c87c:	2000      	movs	r0, #0
    c87e:	4961      	ldr	r1, [pc, #388]	; (ca04 <DigitalSideLights+0x7a4>)
    c880:	47a0      	blx	r4
    c882:	0003      	movs	r3, r0
    c884:	000c      	movs	r4, r1
    c886:	0018      	movs	r0, r3
    c888:	0021      	movs	r1, r4
    c88a:	4c5f      	ldr	r4, [pc, #380]	; (ca08 <DigitalSideLights+0x7a8>)
    c88c:	2200      	movs	r2, #0
    c88e:	4b5f      	ldr	r3, [pc, #380]	; (ca0c <DigitalSideLights+0x7ac>)
    c890:	47a0      	blx	r4
    c892:	0003      	movs	r3, r0
    c894:	000c      	movs	r4, r1
    c896:	001a      	movs	r2, r3
    c898:	0023      	movs	r3, r4
    c89a:	4c5b      	ldr	r4, [pc, #364]	; (ca08 <DigitalSideLights+0x7a8>)
    c89c:	0028      	movs	r0, r5
    c89e:	0031      	movs	r1, r6
    c8a0:	47a0      	blx	r4
    c8a2:	0003      	movs	r3, r0
    c8a4:	000c      	movs	r4, r1
    c8a6:	0019      	movs	r1, r3
    c8a8:	0022      	movs	r2, r4
    c8aa:	4b59      	ldr	r3, [pc, #356]	; (ca10 <DigitalSideLights+0x7b0>)
    c8ac:	0008      	movs	r0, r1
    c8ae:	0011      	movs	r1, r2
    c8b0:	4798      	blx	r3
    c8b2:	0003      	movs	r3, r0
    c8b4:	b29b      	uxth	r3, r3
    c8b6:	0018      	movs	r0, r3
    c8b8:	4b56      	ldr	r3, [pc, #344]	; (ca14 <DigitalSideLights+0x7b4>)
    c8ba:	781b      	ldrb	r3, [r3, #0]
    c8bc:	001a      	movs	r2, r3
    c8be:	23bf      	movs	r3, #191	; 0xbf
    c8c0:	009b      	lsls	r3, r3, #2
    c8c2:	435a      	muls	r2, r3
    c8c4:	4b54      	ldr	r3, [pc, #336]	; (ca18 <DigitalSideLights+0x7b8>)
    c8c6:	0011      	movs	r1, r2
    c8c8:	4798      	blx	r3
    c8ca:	000b      	movs	r3, r1
    c8cc:	001a      	movs	r2, r3
    c8ce:	2308      	movs	r3, #8
    c8d0:	2110      	movs	r1, #16
    c8d2:	468c      	mov	ip, r1
    c8d4:	44bc      	add	ip, r7
    c8d6:	4463      	add	r3, ip
    c8d8:	801a      	strh	r2, [r3, #0]
					setDigitalHue(x, Digital_Cycle_Zoom, 0, (uint16_t)(Digital_Cycle_Brightness*(31.0/100.0)), false);
    c8da:	4b4e      	ldr	r3, [pc, #312]	; (ca14 <DigitalSideLights+0x7b4>)
    c8dc:	781d      	ldrb	r5, [r3, #0]
    c8de:	4b4f      	ldr	r3, [pc, #316]	; (ca1c <DigitalSideLights+0x7bc>)
    c8e0:	781b      	ldrb	r3, [r3, #0]
    c8e2:	001a      	movs	r2, r3
    c8e4:	4b45      	ldr	r3, [pc, #276]	; (c9fc <DigitalSideLights+0x79c>)
    c8e6:	0010      	movs	r0, r2
    c8e8:	4798      	blx	r3
    c8ea:	4c4d      	ldr	r4, [pc, #308]	; (ca20 <DigitalSideLights+0x7c0>)
    c8ec:	4a4d      	ldr	r2, [pc, #308]	; (ca24 <DigitalSideLights+0x7c4>)
    c8ee:	4b4e      	ldr	r3, [pc, #312]	; (ca28 <DigitalSideLights+0x7c8>)
    c8f0:	47a0      	blx	r4
    c8f2:	0003      	movs	r3, r0
    c8f4:	000c      	movs	r4, r1
    c8f6:	0019      	movs	r1, r3
    c8f8:	0022      	movs	r2, r4
    c8fa:	4b45      	ldr	r3, [pc, #276]	; (ca10 <DigitalSideLights+0x7b0>)
    c8fc:	0008      	movs	r0, r1
    c8fe:	0011      	movs	r1, r2
    c900:	4798      	blx	r3
    c902:	0003      	movs	r3, r0
    c904:	b29b      	uxth	r3, r3
    c906:	b2da      	uxtb	r2, r3
    c908:	2308      	movs	r3, #8
    c90a:	2110      	movs	r1, #16
    c90c:	468c      	mov	ip, r1
    c90e:	44bc      	add	ip, r7
    c910:	4463      	add	r3, ip
    c912:	8818      	ldrh	r0, [r3, #0]
    c914:	2300      	movs	r3, #0
    c916:	9300      	str	r3, [sp, #0]
    c918:	0013      	movs	r3, r2
    c91a:	2200      	movs	r2, #0
    c91c:	0029      	movs	r1, r5
    c91e:	4c43      	ldr	r4, [pc, #268]	; (ca2c <DigitalSideLights+0x7cc>)
    c920:	47a0      	blx	r4
					break;
    c922:	f000 fcdd 	bl	d2e0 <DigitalSideLights+0x1080>
				}
				case MODE_DIGITAL_COMPASS_CYCLE:
				{
					uint8_t temp_zoom = 2;
    c926:	2317      	movs	r3, #23
    c928:	18fb      	adds	r3, r7, r3
    c92a:	2202      	movs	r2, #2
    c92c:	701a      	strb	r2, [r3, #0]
					setDigitalHue((2*temp_zoom)*(heading/360.0)*(764*temp_zoom), temp_zoom, 0, (uint16_t)(Digital_Compass_Brightness*(31.0/100.0)), false);
    c92e:	2317      	movs	r3, #23
    c930:	18fb      	adds	r3, r7, r3
    c932:	781b      	ldrb	r3, [r3, #0]
    c934:	005a      	lsls	r2, r3, #1
    c936:	4b31      	ldr	r3, [pc, #196]	; (c9fc <DigitalSideLights+0x79c>)
    c938:	0010      	movs	r0, r2
    c93a:	4798      	blx	r3
    c93c:	0005      	movs	r5, r0
    c93e:	000e      	movs	r6, r1
    c940:	4b3b      	ldr	r3, [pc, #236]	; (ca30 <DigitalSideLights+0x7d0>)
    c942:	681a      	ldr	r2, [r3, #0]
    c944:	4b3b      	ldr	r3, [pc, #236]	; (ca34 <DigitalSideLights+0x7d4>)
    c946:	1c10      	adds	r0, r2, #0
    c948:	4798      	blx	r3
    c94a:	4c2f      	ldr	r4, [pc, #188]	; (ca08 <DigitalSideLights+0x7a8>)
    c94c:	2200      	movs	r2, #0
    c94e:	4b3a      	ldr	r3, [pc, #232]	; (ca38 <DigitalSideLights+0x7d8>)
    c950:	47a0      	blx	r4
    c952:	0003      	movs	r3, r0
    c954:	000c      	movs	r4, r1
    c956:	001a      	movs	r2, r3
    c958:	0023      	movs	r3, r4
    c95a:	4c31      	ldr	r4, [pc, #196]	; (ca20 <DigitalSideLights+0x7c0>)
    c95c:	0028      	movs	r0, r5
    c95e:	0031      	movs	r1, r6
    c960:	47a0      	blx	r4
    c962:	0003      	movs	r3, r0
    c964:	000c      	movs	r4, r1
    c966:	001d      	movs	r5, r3
    c968:	0026      	movs	r6, r4
    c96a:	2317      	movs	r3, #23
    c96c:	18fb      	adds	r3, r7, r3
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	22bf      	movs	r2, #191	; 0xbf
    c972:	0092      	lsls	r2, r2, #2
    c974:	435a      	muls	r2, r3
    c976:	4b21      	ldr	r3, [pc, #132]	; (c9fc <DigitalSideLights+0x79c>)
    c978:	0010      	movs	r0, r2
    c97a:	4798      	blx	r3
    c97c:	0002      	movs	r2, r0
    c97e:	000b      	movs	r3, r1
    c980:	4c27      	ldr	r4, [pc, #156]	; (ca20 <DigitalSideLights+0x7c0>)
    c982:	0028      	movs	r0, r5
    c984:	0031      	movs	r1, r6
    c986:	47a0      	blx	r4
    c988:	0003      	movs	r3, r0
    c98a:	000c      	movs	r4, r1
    c98c:	0019      	movs	r1, r3
    c98e:	0022      	movs	r2, r4
    c990:	4b1f      	ldr	r3, [pc, #124]	; (ca10 <DigitalSideLights+0x7b0>)
    c992:	0008      	movs	r0, r1
    c994:	0011      	movs	r1, r2
    c996:	4798      	blx	r3
    c998:	0003      	movs	r3, r0
    c99a:	b29d      	uxth	r5, r3
    c99c:	4b27      	ldr	r3, [pc, #156]	; (ca3c <DigitalSideLights+0x7dc>)
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	001a      	movs	r2, r3
    c9a2:	4b16      	ldr	r3, [pc, #88]	; (c9fc <DigitalSideLights+0x79c>)
    c9a4:	0010      	movs	r0, r2
    c9a6:	4798      	blx	r3
    c9a8:	4c1d      	ldr	r4, [pc, #116]	; (ca20 <DigitalSideLights+0x7c0>)
    c9aa:	4a1e      	ldr	r2, [pc, #120]	; (ca24 <DigitalSideLights+0x7c4>)
    c9ac:	4b1e      	ldr	r3, [pc, #120]	; (ca28 <DigitalSideLights+0x7c8>)
    c9ae:	47a0      	blx	r4
    c9b0:	0003      	movs	r3, r0
    c9b2:	000c      	movs	r4, r1
    c9b4:	0019      	movs	r1, r3
    c9b6:	0022      	movs	r2, r4
    c9b8:	4b15      	ldr	r3, [pc, #84]	; (ca10 <DigitalSideLights+0x7b0>)
    c9ba:	0008      	movs	r0, r1
    c9bc:	0011      	movs	r1, r2
    c9be:	4798      	blx	r3
    c9c0:	0003      	movs	r3, r0
    c9c2:	b29b      	uxth	r3, r3
    c9c4:	b2da      	uxtb	r2, r3
    c9c6:	2317      	movs	r3, #23
    c9c8:	18fb      	adds	r3, r7, r3
    c9ca:	7819      	ldrb	r1, [r3, #0]
    c9cc:	2300      	movs	r3, #0
    c9ce:	9300      	str	r3, [sp, #0]
    c9d0:	0013      	movs	r3, r2
    c9d2:	2200      	movs	r2, #0
    c9d4:	0028      	movs	r0, r5
    c9d6:	4c15      	ldr	r4, [pc, #84]	; (ca2c <DigitalSideLights+0x7cc>)
    c9d8:	47a0      	blx	r4
					break;
    c9da:	f000 fc81 	bl	d2e0 <DigitalSideLights+0x1080>
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	0001c1a5 	.word	0x0001c1a5
    c9e4:	20000598 	.word	0x20000598
    c9e8:	20001440 	.word	0x20001440
    c9ec:	200000e0 	.word	0x200000e0
    c9f0:	00009f65 	.word	0x00009f65
    c9f4:	0001bea5 	.word	0x0001bea5
    c9f8:	200000ba 	.word	0x200000ba
    c9fc:	0001be21 	.word	0x0001be21
    ca00:	0001b78d 	.word	0x0001b78d
    ca04:	40594000 	.word	0x40594000
    ca08:	0001aa25 	.word	0x0001aa25
    ca0c:	40340000 	.word	0x40340000
    ca10:	000195e1 	.word	0x000195e1
    ca14:	200000b9 	.word	0x200000b9
    ca18:	00019461 	.word	0x00019461
    ca1c:	200000bb 	.word	0x200000bb
    ca20:	0001b28d 	.word	0x0001b28d
    ca24:	3d70a3d7 	.word	0x3d70a3d7
    ca28:	3fd3d70a 	.word	0x3fd3d70a
    ca2c:	0000e1d9 	.word	0x0000e1d9
    ca30:	20000384 	.word	0x20000384
    ca34:	0001bf15 	.word	0x0001bf15
    ca38:	40768000 	.word	0x40768000
    ca3c:	200000bc 	.word	0x200000bc
				}
				case MODE_DIGITAL_THROTTLE:
				{
					setDigitalHue((remote_y)*(Digital_Throttle_Sens/10.0), Digital_Throttle_Zoom, Digital_Throttle_Shift*(764/100)*Digital_Throttle_Zoom, (uint16_t)(Digital_Throttle_Brightness*(31.0/100.0)), true);
    ca40:	4be2      	ldr	r3, [pc, #904]	; (cdcc <DigitalSideLights+0xb6c>)
    ca42:	781b      	ldrb	r3, [r3, #0]
    ca44:	001a      	movs	r2, r3
    ca46:	4be2      	ldr	r3, [pc, #904]	; (cdd0 <DigitalSideLights+0xb70>)
    ca48:	0010      	movs	r0, r2
    ca4a:	4798      	blx	r3
    ca4c:	0005      	movs	r5, r0
    ca4e:	000e      	movs	r6, r1
    ca50:	4be0      	ldr	r3, [pc, #896]	; (cdd4 <DigitalSideLights+0xb74>)
    ca52:	781b      	ldrb	r3, [r3, #0]
    ca54:	001a      	movs	r2, r3
    ca56:	4bde      	ldr	r3, [pc, #888]	; (cdd0 <DigitalSideLights+0xb70>)
    ca58:	0010      	movs	r0, r2
    ca5a:	4798      	blx	r3
    ca5c:	4cde      	ldr	r4, [pc, #888]	; (cdd8 <DigitalSideLights+0xb78>)
    ca5e:	2200      	movs	r2, #0
    ca60:	4bde      	ldr	r3, [pc, #888]	; (cddc <DigitalSideLights+0xb7c>)
    ca62:	47a0      	blx	r4
    ca64:	0003      	movs	r3, r0
    ca66:	000c      	movs	r4, r1
    ca68:	001a      	movs	r2, r3
    ca6a:	0023      	movs	r3, r4
    ca6c:	4cdc      	ldr	r4, [pc, #880]	; (cde0 <DigitalSideLights+0xb80>)
    ca6e:	0028      	movs	r0, r5
    ca70:	0031      	movs	r1, r6
    ca72:	47a0      	blx	r4
    ca74:	0003      	movs	r3, r0
    ca76:	000c      	movs	r4, r1
    ca78:	0019      	movs	r1, r3
    ca7a:	0022      	movs	r2, r4
    ca7c:	4bd9      	ldr	r3, [pc, #868]	; (cde4 <DigitalSideLights+0xb84>)
    ca7e:	0008      	movs	r0, r1
    ca80:	0011      	movs	r1, r2
    ca82:	4798      	blx	r3
    ca84:	0003      	movs	r3, r0
    ca86:	b29d      	uxth	r5, r3
    ca88:	4bd7      	ldr	r3, [pc, #860]	; (cde8 <DigitalSideLights+0xb88>)
    ca8a:	781e      	ldrb	r6, [r3, #0]
    ca8c:	4bd7      	ldr	r3, [pc, #860]	; (cdec <DigitalSideLights+0xb8c>)
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	b29b      	uxth	r3, r3
    ca92:	4ad5      	ldr	r2, [pc, #852]	; (cde8 <DigitalSideLights+0xb88>)
    ca94:	7812      	ldrb	r2, [r2, #0]
    ca96:	b292      	uxth	r2, r2
    ca98:	4353      	muls	r3, r2
    ca9a:	b29b      	uxth	r3, r3
    ca9c:	1c1a      	adds	r2, r3, #0
    ca9e:	00d2      	lsls	r2, r2, #3
    caa0:	1ad3      	subs	r3, r2, r3
    caa2:	b29b      	uxth	r3, r3
    caa4:	4698      	mov	r8, r3
    caa6:	4bd2      	ldr	r3, [pc, #840]	; (cdf0 <DigitalSideLights+0xb90>)
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	001a      	movs	r2, r3
    caac:	4bc8      	ldr	r3, [pc, #800]	; (cdd0 <DigitalSideLights+0xb70>)
    caae:	0010      	movs	r0, r2
    cab0:	4798      	blx	r3
    cab2:	4ccb      	ldr	r4, [pc, #812]	; (cde0 <DigitalSideLights+0xb80>)
    cab4:	4acf      	ldr	r2, [pc, #828]	; (cdf4 <DigitalSideLights+0xb94>)
    cab6:	4bd0      	ldr	r3, [pc, #832]	; (cdf8 <DigitalSideLights+0xb98>)
    cab8:	47a0      	blx	r4
    caba:	0003      	movs	r3, r0
    cabc:	000c      	movs	r4, r1
    cabe:	0019      	movs	r1, r3
    cac0:	0022      	movs	r2, r4
    cac2:	4bc8      	ldr	r3, [pc, #800]	; (cde4 <DigitalSideLights+0xb84>)
    cac4:	0008      	movs	r0, r1
    cac6:	0011      	movs	r1, r2
    cac8:	4798      	blx	r3
    caca:	0003      	movs	r3, r0
    cacc:	b29b      	uxth	r3, r3
    cace:	b2da      	uxtb	r2, r3
    cad0:	2301      	movs	r3, #1
    cad2:	9300      	str	r3, [sp, #0]
    cad4:	0013      	movs	r3, r2
    cad6:	4642      	mov	r2, r8
    cad8:	0031      	movs	r1, r6
    cada:	0028      	movs	r0, r5
    cadc:	4cc7      	ldr	r4, [pc, #796]	; (cdfc <DigitalSideLights+0xb9c>)
    cade:	47a0      	blx	r4
					break;
    cae0:	f000 fbfe 	bl	d2e0 <DigitalSideLights+0x1080>
				case MODE_DIGITAL_RPM_CYCLE:
				{
					//Slider 1 rate
					//Slider 2 zoom
					static uint16_t pos = 0;
					pos = pos+((latest_vesc_vals.rpm/50)*((1.0*Digital_RPM_Zoom)/(101.0-Digital_RPM_Rate)));
    cae4:	4bc6      	ldr	r3, [pc, #792]	; (ce00 <DigitalSideLights+0xba0>)
    cae6:	881b      	ldrh	r3, [r3, #0]
    cae8:	001a      	movs	r2, r3
    caea:	4bb9      	ldr	r3, [pc, #740]	; (cdd0 <DigitalSideLights+0xb70>)
    caec:	0010      	movs	r0, r2
    caee:	4798      	blx	r3
    caf0:	0005      	movs	r5, r0
    caf2:	000e      	movs	r6, r1
    caf4:	4bc3      	ldr	r3, [pc, #780]	; (ce04 <DigitalSideLights+0xba4>)
    caf6:	691a      	ldr	r2, [r3, #16]
    caf8:	4bc3      	ldr	r3, [pc, #780]	; (ce08 <DigitalSideLights+0xba8>)
    cafa:	2132      	movs	r1, #50	; 0x32
    cafc:	0010      	movs	r0, r2
    cafe:	4798      	blx	r3
    cb00:	0003      	movs	r3, r0
    cb02:	001a      	movs	r2, r3
    cb04:	4bb2      	ldr	r3, [pc, #712]	; (cdd0 <DigitalSideLights+0xb70>)
    cb06:	0010      	movs	r0, r2
    cb08:	4798      	blx	r3
    cb0a:	60b8      	str	r0, [r7, #8]
    cb0c:	60f9      	str	r1, [r7, #12]
    cb0e:	4bbf      	ldr	r3, [pc, #764]	; (ce0c <DigitalSideLights+0xbac>)
    cb10:	781b      	ldrb	r3, [r3, #0]
    cb12:	001a      	movs	r2, r3
    cb14:	4bae      	ldr	r3, [pc, #696]	; (cdd0 <DigitalSideLights+0xb70>)
    cb16:	0010      	movs	r0, r2
    cb18:	4798      	blx	r3
    cb1a:	6038      	str	r0, [r7, #0]
    cb1c:	6079      	str	r1, [r7, #4]
    cb1e:	4bbc      	ldr	r3, [pc, #752]	; (ce10 <DigitalSideLights+0xbb0>)
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	001a      	movs	r2, r3
    cb24:	4baa      	ldr	r3, [pc, #680]	; (cdd0 <DigitalSideLights+0xb70>)
    cb26:	0010      	movs	r0, r2
    cb28:	4798      	blx	r3
    cb2a:	0002      	movs	r2, r0
    cb2c:	000b      	movs	r3, r1
    cb2e:	4cb9      	ldr	r4, [pc, #740]	; (ce14 <DigitalSideLights+0xbb4>)
    cb30:	2000      	movs	r0, #0
    cb32:	49b9      	ldr	r1, [pc, #740]	; (ce18 <DigitalSideLights+0xbb8>)
    cb34:	47a0      	blx	r4
    cb36:	0003      	movs	r3, r0
    cb38:	000c      	movs	r4, r1
    cb3a:	001a      	movs	r2, r3
    cb3c:	0023      	movs	r3, r4
    cb3e:	4ca6      	ldr	r4, [pc, #664]	; (cdd8 <DigitalSideLights+0xb78>)
    cb40:	6838      	ldr	r0, [r7, #0]
    cb42:	6879      	ldr	r1, [r7, #4]
    cb44:	47a0      	blx	r4
    cb46:	0003      	movs	r3, r0
    cb48:	000c      	movs	r4, r1
    cb4a:	001a      	movs	r2, r3
    cb4c:	0023      	movs	r3, r4
    cb4e:	4ca4      	ldr	r4, [pc, #656]	; (cde0 <DigitalSideLights+0xb80>)
    cb50:	68b8      	ldr	r0, [r7, #8]
    cb52:	68f9      	ldr	r1, [r7, #12]
    cb54:	47a0      	blx	r4
    cb56:	0003      	movs	r3, r0
    cb58:	000c      	movs	r4, r1
    cb5a:	001a      	movs	r2, r3
    cb5c:	0023      	movs	r3, r4
    cb5e:	4caf      	ldr	r4, [pc, #700]	; (ce1c <DigitalSideLights+0xbbc>)
    cb60:	0028      	movs	r0, r5
    cb62:	0031      	movs	r1, r6
    cb64:	47a0      	blx	r4
    cb66:	0003      	movs	r3, r0
    cb68:	000c      	movs	r4, r1
    cb6a:	0019      	movs	r1, r3
    cb6c:	0022      	movs	r2, r4
    cb6e:	4b9d      	ldr	r3, [pc, #628]	; (cde4 <DigitalSideLights+0xb84>)
    cb70:	0008      	movs	r0, r1
    cb72:	0011      	movs	r1, r2
    cb74:	4798      	blx	r3
    cb76:	0003      	movs	r3, r0
    cb78:	b29a      	uxth	r2, r3
    cb7a:	4ba1      	ldr	r3, [pc, #644]	; (ce00 <DigitalSideLights+0xba0>)
    cb7c:	801a      	strh	r2, [r3, #0]
					if(pos >= (Digital_RPM_Zoom * 764))
    cb7e:	4ba0      	ldr	r3, [pc, #640]	; (ce00 <DigitalSideLights+0xba0>)
    cb80:	881b      	ldrh	r3, [r3, #0]
    cb82:	001a      	movs	r2, r3
    cb84:	4ba1      	ldr	r3, [pc, #644]	; (ce0c <DigitalSideLights+0xbac>)
    cb86:	781b      	ldrb	r3, [r3, #0]
    cb88:	0019      	movs	r1, r3
    cb8a:	23bf      	movs	r3, #191	; 0xbf
    cb8c:	009b      	lsls	r3, r3, #2
    cb8e:	434b      	muls	r3, r1
    cb90:	429a      	cmp	r2, r3
    cb92:	db02      	blt.n	cb9a <DigitalSideLights+0x93a>
						pos = 0;
    cb94:	4b9a      	ldr	r3, [pc, #616]	; (ce00 <DigitalSideLights+0xba0>)
    cb96:	2200      	movs	r2, #0
    cb98:	801a      	strh	r2, [r3, #0]
					setDigitalHue(pos, Digital_RPM_Zoom, 0, (uint16_t)(Digital_RPM_Brightness*(31.0/100.0)), false);
    cb9a:	4b99      	ldr	r3, [pc, #612]	; (ce00 <DigitalSideLights+0xba0>)
    cb9c:	881d      	ldrh	r5, [r3, #0]
    cb9e:	4b9b      	ldr	r3, [pc, #620]	; (ce0c <DigitalSideLights+0xbac>)
    cba0:	781e      	ldrb	r6, [r3, #0]
    cba2:	4b9f      	ldr	r3, [pc, #636]	; (ce20 <DigitalSideLights+0xbc0>)
    cba4:	781b      	ldrb	r3, [r3, #0]
    cba6:	001a      	movs	r2, r3
    cba8:	4b89      	ldr	r3, [pc, #548]	; (cdd0 <DigitalSideLights+0xb70>)
    cbaa:	0010      	movs	r0, r2
    cbac:	4798      	blx	r3
    cbae:	4c8c      	ldr	r4, [pc, #560]	; (cde0 <DigitalSideLights+0xb80>)
    cbb0:	4a90      	ldr	r2, [pc, #576]	; (cdf4 <DigitalSideLights+0xb94>)
    cbb2:	4b91      	ldr	r3, [pc, #580]	; (cdf8 <DigitalSideLights+0xb98>)
    cbb4:	47a0      	blx	r4
    cbb6:	0003      	movs	r3, r0
    cbb8:	000c      	movs	r4, r1
    cbba:	0019      	movs	r1, r3
    cbbc:	0022      	movs	r2, r4
    cbbe:	4b89      	ldr	r3, [pc, #548]	; (cde4 <DigitalSideLights+0xb84>)
    cbc0:	0008      	movs	r0, r1
    cbc2:	0011      	movs	r1, r2
    cbc4:	4798      	blx	r3
    cbc6:	0003      	movs	r3, r0
    cbc8:	b29b      	uxth	r3, r3
    cbca:	b2da      	uxtb	r2, r3
    cbcc:	2300      	movs	r3, #0
    cbce:	9300      	str	r3, [sp, #0]
    cbd0:	0013      	movs	r3, r2
    cbd2:	2200      	movs	r2, #0
    cbd4:	0031      	movs	r1, r6
    cbd6:	0028      	movs	r0, r5
    cbd8:	4c88      	ldr	r4, [pc, #544]	; (cdfc <DigitalSideLights+0xb9c>)
    cbda:	47a0      	blx	r4
					break;
    cbdc:	e380      	b.n	d2e0 <DigitalSideLights+0x1080>
				{
					// New color is chosen by throttle position
					// old colors get pushed back at a rate set by the RPM
					// brightness is set by slider
					static uint32_t shift_rate_timer = 0;
					if(latest_vesc_vals.rpm > 200 && check_timer_expired(&shift_rate_timer, ((500)*(1.0-min((float)latest_vesc_vals.rpm/(mcconf_limits.max_erpm/4.0), 1.0))))){
    cbde:	4b89      	ldr	r3, [pc, #548]	; (ce04 <DigitalSideLights+0xba4>)
    cbe0:	691b      	ldr	r3, [r3, #16]
    cbe2:	2bc8      	cmp	r3, #200	; 0xc8
    cbe4:	dc00      	bgt.n	cbe8 <DigitalSideLights+0x988>
    cbe6:	e378      	b.n	d2da <DigitalSideLights+0x107a>
    cbe8:	4b86      	ldr	r3, [pc, #536]	; (ce04 <DigitalSideLights+0xba4>)
    cbea:	691a      	ldr	r2, [r3, #16]
    cbec:	4b8d      	ldr	r3, [pc, #564]	; (ce24 <DigitalSideLights+0xbc4>)
    cbee:	0010      	movs	r0, r2
    cbf0:	4798      	blx	r3
    cbf2:	1c02      	adds	r2, r0, #0
    cbf4:	4b8c      	ldr	r3, [pc, #560]	; (ce28 <DigitalSideLights+0xbc8>)
    cbf6:	1c10      	adds	r0, r2, #0
    cbf8:	4798      	blx	r3
    cbfa:	0005      	movs	r5, r0
    cbfc:	000e      	movs	r6, r1
    cbfe:	4b8b      	ldr	r3, [pc, #556]	; (ce2c <DigitalSideLights+0xbcc>)
    cc00:	699a      	ldr	r2, [r3, #24]
    cc02:	4b73      	ldr	r3, [pc, #460]	; (cdd0 <DigitalSideLights+0xb70>)
    cc04:	0010      	movs	r0, r2
    cc06:	4798      	blx	r3
    cc08:	4c73      	ldr	r4, [pc, #460]	; (cdd8 <DigitalSideLights+0xb78>)
    cc0a:	2200      	movs	r2, #0
    cc0c:	4b88      	ldr	r3, [pc, #544]	; (ce30 <DigitalSideLights+0xbd0>)
    cc0e:	47a0      	blx	r4
    cc10:	0003      	movs	r3, r0
    cc12:	000c      	movs	r4, r1
    cc14:	001a      	movs	r2, r3
    cc16:	0023      	movs	r3, r4
    cc18:	4c6f      	ldr	r4, [pc, #444]	; (cdd8 <DigitalSideLights+0xb78>)
    cc1a:	0028      	movs	r0, r5
    cc1c:	0031      	movs	r1, r6
    cc1e:	47a0      	blx	r4
    cc20:	0003      	movs	r3, r0
    cc22:	000c      	movs	r4, r1
    cc24:	0018      	movs	r0, r3
    cc26:	0021      	movs	r1, r4
    cc28:	4c82      	ldr	r4, [pc, #520]	; (ce34 <DigitalSideLights+0xbd4>)
    cc2a:	2200      	movs	r2, #0
    cc2c:	4b82      	ldr	r3, [pc, #520]	; (ce38 <DigitalSideLights+0xbd8>)
    cc2e:	47a0      	blx	r4
    cc30:	1e03      	subs	r3, r0, #0
    cc32:	d035      	beq.n	cca0 <DigitalSideLights+0xa40>
    cc34:	4b73      	ldr	r3, [pc, #460]	; (ce04 <DigitalSideLights+0xba4>)
    cc36:	691a      	ldr	r2, [r3, #16]
    cc38:	4b7a      	ldr	r3, [pc, #488]	; (ce24 <DigitalSideLights+0xbc4>)
    cc3a:	0010      	movs	r0, r2
    cc3c:	4798      	blx	r3
    cc3e:	1c02      	adds	r2, r0, #0
    cc40:	4b79      	ldr	r3, [pc, #484]	; (ce28 <DigitalSideLights+0xbc8>)
    cc42:	1c10      	adds	r0, r2, #0
    cc44:	4798      	blx	r3
    cc46:	0005      	movs	r5, r0
    cc48:	000e      	movs	r6, r1
    cc4a:	4b78      	ldr	r3, [pc, #480]	; (ce2c <DigitalSideLights+0xbcc>)
    cc4c:	699a      	ldr	r2, [r3, #24]
    cc4e:	4b60      	ldr	r3, [pc, #384]	; (cdd0 <DigitalSideLights+0xb70>)
    cc50:	0010      	movs	r0, r2
    cc52:	4798      	blx	r3
    cc54:	4c60      	ldr	r4, [pc, #384]	; (cdd8 <DigitalSideLights+0xb78>)
    cc56:	2200      	movs	r2, #0
    cc58:	4b75      	ldr	r3, [pc, #468]	; (ce30 <DigitalSideLights+0xbd0>)
    cc5a:	47a0      	blx	r4
    cc5c:	0003      	movs	r3, r0
    cc5e:	000c      	movs	r4, r1
    cc60:	001a      	movs	r2, r3
    cc62:	0023      	movs	r3, r4
    cc64:	4c5c      	ldr	r4, [pc, #368]	; (cdd8 <DigitalSideLights+0xb78>)
    cc66:	0028      	movs	r0, r5
    cc68:	0031      	movs	r1, r6
    cc6a:	47a0      	blx	r4
    cc6c:	0003      	movs	r3, r0
    cc6e:	000c      	movs	r4, r1
    cc70:	001a      	movs	r2, r3
    cc72:	0023      	movs	r3, r4
    cc74:	4c67      	ldr	r4, [pc, #412]	; (ce14 <DigitalSideLights+0xbb4>)
    cc76:	2000      	movs	r0, #0
    cc78:	496f      	ldr	r1, [pc, #444]	; (ce38 <DigitalSideLights+0xbd8>)
    cc7a:	47a0      	blx	r4
    cc7c:	0003      	movs	r3, r0
    cc7e:	000c      	movs	r4, r1
    cc80:	0018      	movs	r0, r3
    cc82:	0021      	movs	r1, r4
    cc84:	4c56      	ldr	r4, [pc, #344]	; (cde0 <DigitalSideLights+0xb80>)
    cc86:	2200      	movs	r2, #0
    cc88:	4b6c      	ldr	r3, [pc, #432]	; (ce3c <DigitalSideLights+0xbdc>)
    cc8a:	47a0      	blx	r4
    cc8c:	0003      	movs	r3, r0
    cc8e:	000c      	movs	r4, r1
    cc90:	0019      	movs	r1, r3
    cc92:	0022      	movs	r2, r4
    cc94:	4b53      	ldr	r3, [pc, #332]	; (cde4 <DigitalSideLights+0xb84>)
    cc96:	0008      	movs	r0, r1
    cc98:	0011      	movs	r1, r2
    cc9a:	4798      	blx	r3
    cc9c:	0002      	movs	r2, r0
    cc9e:	e000      	b.n	cca2 <DigitalSideLights+0xa42>
    cca0:	2200      	movs	r2, #0
    cca2:	4b67      	ldr	r3, [pc, #412]	; (ce40 <DigitalSideLights+0xbe0>)
    cca4:	0011      	movs	r1, r2
    cca6:	0018      	movs	r0, r3
    cca8:	4b66      	ldr	r3, [pc, #408]	; (ce44 <DigitalSideLights+0xbe4>)
    ccaa:	4798      	blx	r3
    ccac:	1e03      	subs	r3, r0, #0
    ccae:	d100      	bne.n	ccb2 <DigitalSideLights+0xa52>
    ccb0:	e313      	b.n	d2da <DigitalSideLights+0x107a>
						shift_rate_timer = millis();
    ccb2:	4b65      	ldr	r3, [pc, #404]	; (ce48 <DigitalSideLights+0xbe8>)
    ccb4:	4798      	blx	r3
    ccb6:	0002      	movs	r2, r0
    ccb8:	4b61      	ldr	r3, [pc, #388]	; (ce40 <DigitalSideLights+0xbe0>)
    ccba:	601a      	str	r2, [r3, #0]
						memmove(L_SPI_send_buf+8,L_SPI_send_buf+4,(led_num-1)*4);
    ccbc:	4863      	ldr	r0, [pc, #396]	; (ce4c <DigitalSideLights+0xbec>)
    ccbe:	4964      	ldr	r1, [pc, #400]	; (ce50 <DigitalSideLights+0xbf0>)
    ccc0:	4b64      	ldr	r3, [pc, #400]	; (ce54 <DigitalSideLights+0xbf4>)
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	3b01      	subs	r3, #1
    ccc6:	009b      	lsls	r3, r3, #2
    ccc8:	001a      	movs	r2, r3
    ccca:	4b63      	ldr	r3, [pc, #396]	; (ce58 <DigitalSideLights+0xbf8>)
    cccc:	4798      	blx	r3
						memmove(R_SPI_send_buf+8,R_SPI_send_buf+4,(led_num-1)*4);
    ccce:	4863      	ldr	r0, [pc, #396]	; (ce5c <DigitalSideLights+0xbfc>)
    ccd0:	4963      	ldr	r1, [pc, #396]	; (ce60 <DigitalSideLights+0xc00>)
    ccd2:	4b60      	ldr	r3, [pc, #384]	; (ce54 <DigitalSideLights+0xbf4>)
    ccd4:	781b      	ldrb	r3, [r3, #0]
    ccd6:	3b01      	subs	r3, #1
    ccd8:	009b      	lsls	r3, r3, #2
    ccda:	001a      	movs	r2, r3
    ccdc:	4b5e      	ldr	r3, [pc, #376]	; (ce58 <DigitalSideLights+0xbf8>)
    ccde:	4798      	blx	r3
						
						uint16_t x = (remote_y*3);
    cce0:	4b3a      	ldr	r3, [pc, #232]	; (cdcc <DigitalSideLights+0xb6c>)
    cce2:	781b      	ldrb	r3, [r3, #0]
    cce4:	b29b      	uxth	r3, r3
    cce6:	2214      	movs	r2, #20
    cce8:	18ba      	adds	r2, r7, r2
    ccea:	1c19      	adds	r1, r3, #0
    ccec:	1c0b      	adds	r3, r1, #0
    ccee:	18db      	adds	r3, r3, r3
    ccf0:	185b      	adds	r3, r3, r1
    ccf2:	8013      	strh	r3, [r2, #0]

						L_SPI_send_buf[4] = R_SPI_send_buf[4] = (0b11100000 | brightness);
    ccf4:	221f      	movs	r2, #31
    ccf6:	2320      	movs	r3, #32
    ccf8:	425b      	negs	r3, r3
    ccfa:	4313      	orrs	r3, r2
    ccfc:	b2da      	uxtb	r2, r3
    ccfe:	4b59      	ldr	r3, [pc, #356]	; (ce64 <DigitalSideLights+0xc04>)
    cd00:	711a      	strb	r2, [r3, #4]
    cd02:	4b58      	ldr	r3, [pc, #352]	; (ce64 <DigitalSideLights+0xc04>)
    cd04:	791a      	ldrb	r2, [r3, #4]
    cd06:	4b58      	ldr	r3, [pc, #352]	; (ce68 <DigitalSideLights+0xc08>)
    cd08:	711a      	strb	r2, [r3, #4]
						if(x/255 == 0){
    cd0a:	2314      	movs	r3, #20
    cd0c:	18fb      	adds	r3, r7, r3
    cd0e:	881b      	ldrh	r3, [r3, #0]
    cd10:	2bfe      	cmp	r3, #254	; 0xfe
    cd12:	d829      	bhi.n	cd68 <DigitalSideLights+0xb08>
							L_SPI_send_buf[5] = R_SPI_send_buf[5] = 0;
    cd14:	4b53      	ldr	r3, [pc, #332]	; (ce64 <DigitalSideLights+0xc04>)
    cd16:	2200      	movs	r2, #0
    cd18:	715a      	strb	r2, [r3, #5]
    cd1a:	4b52      	ldr	r3, [pc, #328]	; (ce64 <DigitalSideLights+0xc04>)
    cd1c:	795a      	ldrb	r2, [r3, #5]
    cd1e:	4b52      	ldr	r3, [pc, #328]	; (ce68 <DigitalSideLights+0xc08>)
    cd20:	715a      	strb	r2, [r3, #5]
							L_SPI_send_buf[6] = R_SPI_send_buf[6] = 255-(x%255);
    cd22:	2314      	movs	r3, #20
    cd24:	18fb      	adds	r3, r7, r3
    cd26:	881a      	ldrh	r2, [r3, #0]
    cd28:	4b50      	ldr	r3, [pc, #320]	; (ce6c <DigitalSideLights+0xc0c>)
    cd2a:	21ff      	movs	r1, #255	; 0xff
    cd2c:	0010      	movs	r0, r2
    cd2e:	4798      	blx	r3
    cd30:	000b      	movs	r3, r1
    cd32:	b29b      	uxth	r3, r3
    cd34:	b2db      	uxtb	r3, r3
    cd36:	43db      	mvns	r3, r3
    cd38:	b2da      	uxtb	r2, r3
    cd3a:	4b4a      	ldr	r3, [pc, #296]	; (ce64 <DigitalSideLights+0xc04>)
    cd3c:	719a      	strb	r2, [r3, #6]
    cd3e:	4b49      	ldr	r3, [pc, #292]	; (ce64 <DigitalSideLights+0xc04>)
    cd40:	799a      	ldrb	r2, [r3, #6]
    cd42:	4b49      	ldr	r3, [pc, #292]	; (ce68 <DigitalSideLights+0xc08>)
    cd44:	719a      	strb	r2, [r3, #6]
							L_SPI_send_buf[7] = R_SPI_send_buf[7] = (x%255);
    cd46:	2314      	movs	r3, #20
    cd48:	18fb      	adds	r3, r7, r3
    cd4a:	881a      	ldrh	r2, [r3, #0]
    cd4c:	4b47      	ldr	r3, [pc, #284]	; (ce6c <DigitalSideLights+0xc0c>)
    cd4e:	21ff      	movs	r1, #255	; 0xff
    cd50:	0010      	movs	r0, r2
    cd52:	4798      	blx	r3
    cd54:	000b      	movs	r3, r1
    cd56:	b29b      	uxth	r3, r3
    cd58:	b2da      	uxtb	r2, r3
    cd5a:	4b42      	ldr	r3, [pc, #264]	; (ce64 <DigitalSideLights+0xc04>)
    cd5c:	71da      	strb	r2, [r3, #7]
    cd5e:	4b41      	ldr	r3, [pc, #260]	; (ce64 <DigitalSideLights+0xc04>)
    cd60:	79da      	ldrb	r2, [r3, #7]
    cd62:	4b41      	ldr	r3, [pc, #260]	; (ce68 <DigitalSideLights+0xc08>)
    cd64:	71da      	strb	r2, [r3, #7]
							L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
							L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
							L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
						}
					}
					break;
    cd66:	e2b8      	b.n	d2da <DigitalSideLights+0x107a>
							} else if(x/255 == 1){
    cd68:	2314      	movs	r3, #20
    cd6a:	18fb      	adds	r3, r7, r3
    cd6c:	881b      	ldrh	r3, [r3, #0]
    cd6e:	3bff      	subs	r3, #255	; 0xff
    cd70:	b29b      	uxth	r3, r3
    cd72:	2bfe      	cmp	r3, #254	; 0xfe
    cd74:	d900      	bls.n	cd78 <DigitalSideLights+0xb18>
    cd76:	e07b      	b.n	ce70 <DigitalSideLights+0xc10>
							L_SPI_send_buf[5] = R_SPI_send_buf[5] = (x%255);
    cd78:	2314      	movs	r3, #20
    cd7a:	18fb      	adds	r3, r7, r3
    cd7c:	881a      	ldrh	r2, [r3, #0]
    cd7e:	4b3b      	ldr	r3, [pc, #236]	; (ce6c <DigitalSideLights+0xc0c>)
    cd80:	21ff      	movs	r1, #255	; 0xff
    cd82:	0010      	movs	r0, r2
    cd84:	4798      	blx	r3
    cd86:	000b      	movs	r3, r1
    cd88:	b29b      	uxth	r3, r3
    cd8a:	b2da      	uxtb	r2, r3
    cd8c:	4b35      	ldr	r3, [pc, #212]	; (ce64 <DigitalSideLights+0xc04>)
    cd8e:	715a      	strb	r2, [r3, #5]
    cd90:	4b34      	ldr	r3, [pc, #208]	; (ce64 <DigitalSideLights+0xc04>)
    cd92:	795a      	ldrb	r2, [r3, #5]
    cd94:	4b34      	ldr	r3, [pc, #208]	; (ce68 <DigitalSideLights+0xc08>)
    cd96:	715a      	strb	r2, [r3, #5]
							L_SPI_send_buf[6] = R_SPI_send_buf[6] = 0;
    cd98:	4b32      	ldr	r3, [pc, #200]	; (ce64 <DigitalSideLights+0xc04>)
    cd9a:	2200      	movs	r2, #0
    cd9c:	719a      	strb	r2, [r3, #6]
    cd9e:	4b31      	ldr	r3, [pc, #196]	; (ce64 <DigitalSideLights+0xc04>)
    cda0:	799a      	ldrb	r2, [r3, #6]
    cda2:	4b31      	ldr	r3, [pc, #196]	; (ce68 <DigitalSideLights+0xc08>)
    cda4:	719a      	strb	r2, [r3, #6]
							L_SPI_send_buf[7] = R_SPI_send_buf[7] = 255-(x%255);
    cda6:	2314      	movs	r3, #20
    cda8:	18fb      	adds	r3, r7, r3
    cdaa:	881a      	ldrh	r2, [r3, #0]
    cdac:	4b2f      	ldr	r3, [pc, #188]	; (ce6c <DigitalSideLights+0xc0c>)
    cdae:	21ff      	movs	r1, #255	; 0xff
    cdb0:	0010      	movs	r0, r2
    cdb2:	4798      	blx	r3
    cdb4:	000b      	movs	r3, r1
    cdb6:	b29b      	uxth	r3, r3
    cdb8:	b2db      	uxtb	r3, r3
    cdba:	43db      	mvns	r3, r3
    cdbc:	b2da      	uxtb	r2, r3
    cdbe:	4b29      	ldr	r3, [pc, #164]	; (ce64 <DigitalSideLights+0xc04>)
    cdc0:	71da      	strb	r2, [r3, #7]
    cdc2:	4b28      	ldr	r3, [pc, #160]	; (ce64 <DigitalSideLights+0xc04>)
    cdc4:	79da      	ldrb	r2, [r3, #7]
    cdc6:	4b28      	ldr	r3, [pc, #160]	; (ce68 <DigitalSideLights+0xc08>)
    cdc8:	71da      	strb	r2, [r3, #7]
					break;
    cdca:	e286      	b.n	d2da <DigitalSideLights+0x107a>
    cdcc:	200003ce 	.word	0x200003ce
    cdd0:	0001be21 	.word	0x0001be21
    cdd4:	200000bf 	.word	0x200000bf
    cdd8:	0001aa25 	.word	0x0001aa25
    cddc:	40240000 	.word	0x40240000
    cde0:	0001b28d 	.word	0x0001b28d
    cde4:	000195e1 	.word	0x000195e1
    cde8:	200000bd 	.word	0x200000bd
    cdec:	200000be 	.word	0x200000be
    cdf0:	200000c0 	.word	0x200000c0
    cdf4:	3d70a3d7 	.word	0x3d70a3d7
    cdf8:	3fd3d70a 	.word	0x3fd3d70a
    cdfc:	0000e1d9 	.word	0x0000e1d9
    ce00:	2000046a 	.word	0x2000046a
    ce04:	20000e38 	.word	0x20000e38
    ce08:	00019295 	.word	0x00019295
    ce0c:	200000c1 	.word	0x200000c1
    ce10:	200000c2 	.word	0x200000c2
    ce14:	0001b78d 	.word	0x0001b78d
    ce18:	40594000 	.word	0x40594000
    ce1c:	0001a405 	.word	0x0001a405
    ce20:	200000c3 	.word	0x200000c3
    ce24:	0001a2d9 	.word	0x0001a2d9
    ce28:	0001bf15 	.word	0x0001bf15
    ce2c:	20001a8c 	.word	0x20001a8c
    ce30:	40100000 	.word	0x40100000
    ce34:	00019499 	.word	0x00019499
    ce38:	3ff00000 	.word	0x3ff00000
    ce3c:	407f4000 	.word	0x407f4000
    ce40:	2000046c 	.word	0x2000046c
    ce44:	00009fbd 	.word	0x00009fbd
    ce48:	00009f65 	.word	0x00009f65
    ce4c:	20001448 	.word	0x20001448
    ce50:	20001444 	.word	0x20001444
    ce54:	200000e0 	.word	0x200000e0
    ce58:	0001c16f 	.word	0x0001c16f
    ce5c:	200005a0 	.word	0x200005a0
    ce60:	2000059c 	.word	0x2000059c
    ce64:	20000598 	.word	0x20000598
    ce68:	20001440 	.word	0x20001440
    ce6c:	0001928d 	.word	0x0001928d
							} else if(x/255 == 2){
    ce70:	2314      	movs	r3, #20
    ce72:	18fb      	adds	r3, r7, r3
    ce74:	881b      	ldrh	r3, [r3, #0]
    ce76:	3bff      	subs	r3, #255	; 0xff
    ce78:	3bff      	subs	r3, #255	; 0xff
    ce7a:	b29b      	uxth	r3, r3
    ce7c:	2bfe      	cmp	r3, #254	; 0xfe
    ce7e:	d900      	bls.n	ce82 <DigitalSideLights+0xc22>
    ce80:	e22b      	b.n	d2da <DigitalSideLights+0x107a>
							L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
    ce82:	2314      	movs	r3, #20
    ce84:	18fb      	adds	r3, r7, r3
    ce86:	881a      	ldrh	r2, [r3, #0]
    ce88:	4bdd      	ldr	r3, [pc, #884]	; (d200 <DigitalSideLights+0xfa0>)
    ce8a:	21ff      	movs	r1, #255	; 0xff
    ce8c:	0010      	movs	r0, r2
    ce8e:	4798      	blx	r3
    ce90:	000b      	movs	r3, r1
    ce92:	b29b      	uxth	r3, r3
    ce94:	b2db      	uxtb	r3, r3
    ce96:	43db      	mvns	r3, r3
    ce98:	b2da      	uxtb	r2, r3
    ce9a:	4bda      	ldr	r3, [pc, #872]	; (d204 <DigitalSideLights+0xfa4>)
    ce9c:	715a      	strb	r2, [r3, #5]
    ce9e:	4bd9      	ldr	r3, [pc, #868]	; (d204 <DigitalSideLights+0xfa4>)
    cea0:	795a      	ldrb	r2, [r3, #5]
    cea2:	4bd9      	ldr	r3, [pc, #868]	; (d208 <DigitalSideLights+0xfa8>)
    cea4:	715a      	strb	r2, [r3, #5]
							L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
    cea6:	2314      	movs	r3, #20
    cea8:	18fb      	adds	r3, r7, r3
    ceaa:	881a      	ldrh	r2, [r3, #0]
    ceac:	4bd4      	ldr	r3, [pc, #848]	; (d200 <DigitalSideLights+0xfa0>)
    ceae:	21ff      	movs	r1, #255	; 0xff
    ceb0:	0010      	movs	r0, r2
    ceb2:	4798      	blx	r3
    ceb4:	000b      	movs	r3, r1
    ceb6:	b29b      	uxth	r3, r3
    ceb8:	b2da      	uxtb	r2, r3
    ceba:	4bd2      	ldr	r3, [pc, #840]	; (d204 <DigitalSideLights+0xfa4>)
    cebc:	719a      	strb	r2, [r3, #6]
    cebe:	4bd1      	ldr	r3, [pc, #836]	; (d204 <DigitalSideLights+0xfa4>)
    cec0:	799a      	ldrb	r2, [r3, #6]
    cec2:	4bd1      	ldr	r3, [pc, #836]	; (d208 <DigitalSideLights+0xfa8>)
    cec4:	719a      	strb	r2, [r3, #6]
							L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
    cec6:	4bcf      	ldr	r3, [pc, #828]	; (d204 <DigitalSideLights+0xfa4>)
    cec8:	2200      	movs	r2, #0
    ceca:	71da      	strb	r2, [r3, #7]
    cecc:	4bcd      	ldr	r3, [pc, #820]	; (d204 <DigitalSideLights+0xfa4>)
    cece:	79da      	ldrb	r2, [r3, #7]
    ced0:	4bcd      	ldr	r3, [pc, #820]	; (d208 <DigitalSideLights+0xfa8>)
    ced2:	71da      	strb	r2, [r3, #7]
					break;
    ced4:	e201      	b.n	d2da <DigitalSideLights+0x107a>
				}
				case MODE_DIGITAL_COMPASS_WHEEL:
				{
					//use digital hue logic for each pixel
					//extend the gradient for further LEDs
					float zoom_delta = 0.2;
    ced6:	4bcd      	ldr	r3, [pc, #820]	; (d20c <DigitalSideLights+0xfac>)
    ced8:	633b      	str	r3, [r7, #48]	; 0x30
					float pos_delta = 50;
    ceda:	4bcd      	ldr	r3, [pc, #820]	; (d210 <DigitalSideLights+0xfb0>)
    cedc:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(led_num > 35){
    cede:	4bcd      	ldr	r3, [pc, #820]	; (d214 <DigitalSideLights+0xfb4>)
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	2b23      	cmp	r3, #35	; 0x23
    cee4:	d903      	bls.n	ceee <DigitalSideLights+0xc8e>
						zoom_delta = 0.1;
    cee6:	4bcc      	ldr	r3, [pc, #816]	; (d218 <DigitalSideLights+0xfb8>)
    cee8:	633b      	str	r3, [r7, #48]	; 0x30
						pos_delta = 25;
    ceea:	4bcc      	ldr	r3, [pc, #816]	; (d21c <DigitalSideLights+0xfbc>)
    ceec:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
						
					float temp_zoom = 1+(zoom_delta*(led_num/2));
    ceee:	4bc9      	ldr	r3, [pc, #804]	; (d214 <DigitalSideLights+0xfb4>)
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	085b      	lsrs	r3, r3, #1
    cef4:	b2db      	uxtb	r3, r3
    cef6:	001a      	movs	r2, r3
    cef8:	4bc9      	ldr	r3, [pc, #804]	; (d220 <DigitalSideLights+0xfc0>)
    cefa:	0010      	movs	r0, r2
    cefc:	4798      	blx	r3
    cefe:	1c02      	adds	r2, r0, #0
    cf00:	4bc8      	ldr	r3, [pc, #800]	; (d224 <DigitalSideLights+0xfc4>)
    cf02:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cf04:	1c10      	adds	r0, r2, #0
    cf06:	4798      	blx	r3
    cf08:	1c03      	adds	r3, r0, #0
    cf0a:	1c1a      	adds	r2, r3, #0
    cf0c:	4bc6      	ldr	r3, [pc, #792]	; (d228 <DigitalSideLights+0xfc8>)
    cf0e:	21fe      	movs	r1, #254	; 0xfe
    cf10:	0589      	lsls	r1, r1, #22
    cf12:	1c10      	adds	r0, r2, #0
    cf14:	4798      	blx	r3
    cf16:	1c03      	adds	r3, r0, #0
    cf18:	62bb      	str	r3, [r7, #40]	; 0x28

					int x = (heading/360.0)*764*4;
    cf1a:	4bc4      	ldr	r3, [pc, #784]	; (d22c <DigitalSideLights+0xfcc>)
    cf1c:	681a      	ldr	r2, [r3, #0]
    cf1e:	4bc4      	ldr	r3, [pc, #784]	; (d230 <DigitalSideLights+0xfd0>)
    cf20:	1c10      	adds	r0, r2, #0
    cf22:	4798      	blx	r3
    cf24:	4cc3      	ldr	r4, [pc, #780]	; (d234 <DigitalSideLights+0xfd4>)
    cf26:	2200      	movs	r2, #0
    cf28:	4bc3      	ldr	r3, [pc, #780]	; (d238 <DigitalSideLights+0xfd8>)
    cf2a:	47a0      	blx	r4
    cf2c:	0003      	movs	r3, r0
    cf2e:	000c      	movs	r4, r1
    cf30:	0018      	movs	r0, r3
    cf32:	0021      	movs	r1, r4
    cf34:	4cc1      	ldr	r4, [pc, #772]	; (d23c <DigitalSideLights+0xfdc>)
    cf36:	2200      	movs	r2, #0
    cf38:	4bc1      	ldr	r3, [pc, #772]	; (d240 <DigitalSideLights+0xfe0>)
    cf3a:	47a0      	blx	r4
    cf3c:	0003      	movs	r3, r0
    cf3e:	000c      	movs	r4, r1
    cf40:	0018      	movs	r0, r3
    cf42:	0021      	movs	r1, r4
    cf44:	4cbd      	ldr	r4, [pc, #756]	; (d23c <DigitalSideLights+0xfdc>)
    cf46:	2200      	movs	r2, #0
    cf48:	4bbe      	ldr	r3, [pc, #760]	; (d244 <DigitalSideLights+0xfe4>)
    cf4a:	47a0      	blx	r4
    cf4c:	0003      	movs	r3, r0
    cf4e:	000c      	movs	r4, r1
    cf50:	0019      	movs	r1, r3
    cf52:	0022      	movs	r2, r4
    cf54:	4bbc      	ldr	r3, [pc, #752]	; (d248 <DigitalSideLights+0xfe8>)
    cf56:	0008      	movs	r0, r1
    cf58:	0011      	movs	r1, r2
    cf5a:	4798      	blx	r3
    cf5c:	0003      	movs	r3, r0
    cf5e:	627b      	str	r3, [r7, #36]	; 0x24
					while(x<0)
    cf60:	e005      	b.n	cf6e <DigitalSideLights+0xd0e>
						x += (764);
    cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf64:	22bf      	movs	r2, #191	; 0xbf
    cf66:	0092      	lsls	r2, r2, #2
    cf68:	4694      	mov	ip, r2
    cf6a:	4463      	add	r3, ip
    cf6c:	627b      	str	r3, [r7, #36]	; 0x24
					while(x<0)
    cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf70:	2b00      	cmp	r3, #0
    cf72:	dbf6      	blt.n	cf62 <DigitalSideLights+0xd02>
					while(x>(764))
    cf74:	e004      	b.n	cf80 <DigitalSideLights+0xd20>
						x -= (764);
    cf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf78:	4ab4      	ldr	r2, [pc, #720]	; (d24c <DigitalSideLights+0xfec>)
    cf7a:	4694      	mov	ip, r2
    cf7c:	4463      	add	r3, ip
    cf7e:	627b      	str	r3, [r7, #36]	; 0x24
					while(x>(764))
    cf80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf82:	23bf      	movs	r3, #191	; 0xbf
    cf84:	009b      	lsls	r3, r3, #2
    cf86:	429a      	cmp	r2, r3
    cf88:	dcf5      	bgt.n	cf76 <DigitalSideLights+0xd16>

					x = x-(pos_delta*(led_num/2));
    cf8a:	4ba5      	ldr	r3, [pc, #660]	; (d220 <DigitalSideLights+0xfc0>)
    cf8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf8e:	4798      	blx	r3
    cf90:	1c04      	adds	r4, r0, #0
    cf92:	4ba0      	ldr	r3, [pc, #640]	; (d214 <DigitalSideLights+0xfb4>)
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	085b      	lsrs	r3, r3, #1
    cf98:	b2db      	uxtb	r3, r3
    cf9a:	001a      	movs	r2, r3
    cf9c:	4ba0      	ldr	r3, [pc, #640]	; (d220 <DigitalSideLights+0xfc0>)
    cf9e:	0010      	movs	r0, r2
    cfa0:	4798      	blx	r3
    cfa2:	1c02      	adds	r2, r0, #0
    cfa4:	4b9f      	ldr	r3, [pc, #636]	; (d224 <DigitalSideLights+0xfc4>)
    cfa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    cfa8:	1c10      	adds	r0, r2, #0
    cfaa:	4798      	blx	r3
    cfac:	1c03      	adds	r3, r0, #0
    cfae:	1c1a      	adds	r2, r3, #0
    cfb0:	4ba7      	ldr	r3, [pc, #668]	; (d250 <DigitalSideLights+0xff0>)
    cfb2:	1c11      	adds	r1, r2, #0
    cfb4:	1c20      	adds	r0, r4, #0
    cfb6:	4798      	blx	r3
    cfb8:	1c03      	adds	r3, r0, #0
    cfba:	1c1a      	adds	r2, r3, #0
    cfbc:	4ba5      	ldr	r3, [pc, #660]	; (d254 <DigitalSideLights+0xff4>)
    cfbe:	1c10      	adds	r0, r2, #0
    cfc0:	4798      	blx	r3
    cfc2:	0003      	movs	r3, r0
    cfc4:	627b      	str	r3, [r7, #36]	; 0x24

					for(int i = 0; i < led_num; i++){
    cfc6:	2300      	movs	r3, #0
    cfc8:	623b      	str	r3, [r7, #32]
    cfca:	e05e      	b.n	d08a <DigitalSideLights+0xe2a>
						setDigitalLEDHue(x, temp_zoom, brightness, i);
    cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfce:	b29c      	uxth	r4, r3
    cfd0:	4ba1      	ldr	r3, [pc, #644]	; (d258 <DigitalSideLights+0xff8>)
    cfd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cfd4:	4798      	blx	r3
    cfd6:	0003      	movs	r3, r0
    cfd8:	b2d9      	uxtb	r1, r3
    cfda:	221f      	movs	r2, #31
    cfdc:	6a3b      	ldr	r3, [r7, #32]
    cfde:	b2db      	uxtb	r3, r3
    cfe0:	0020      	movs	r0, r4
    cfe2:	4c9e      	ldr	r4, [pc, #632]	; (d25c <DigitalSideLights+0xffc>)
    cfe4:	47a0      	blx	r4
						if(i < (led_num/2)-1){
    cfe6:	4b8b      	ldr	r3, [pc, #556]	; (d214 <DigitalSideLights+0xfb4>)
    cfe8:	781b      	ldrb	r3, [r3, #0]
    cfea:	085b      	lsrs	r3, r3, #1
    cfec:	b2db      	uxtb	r3, r3
    cfee:	1e5a      	subs	r2, r3, #1
    cff0:	6a3b      	ldr	r3, [r7, #32]
    cff2:	429a      	cmp	r2, r3
    cff4:	dd14      	ble.n	d020 <DigitalSideLights+0xdc0>
							x = x + pos_delta;
    cff6:	4b8a      	ldr	r3, [pc, #552]	; (d220 <DigitalSideLights+0xfc0>)
    cff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cffa:	4798      	blx	r3
    cffc:	1c02      	adds	r2, r0, #0
    cffe:	4b8a      	ldr	r3, [pc, #552]	; (d228 <DigitalSideLights+0xfc8>)
    d000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    d002:	1c10      	adds	r0, r2, #0
    d004:	4798      	blx	r3
    d006:	1c03      	adds	r3, r0, #0
    d008:	1c1a      	adds	r2, r3, #0
    d00a:	4b92      	ldr	r3, [pc, #584]	; (d254 <DigitalSideLights+0xff4>)
    d00c:	1c10      	adds	r0, r2, #0
    d00e:	4798      	blx	r3
    d010:	0003      	movs	r3, r0
    d012:	627b      	str	r3, [r7, #36]	; 0x24
							temp_zoom = temp_zoom - zoom_delta;
    d014:	4b8e      	ldr	r3, [pc, #568]	; (d250 <DigitalSideLights+0xff0>)
    d016:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d01a:	4798      	blx	r3
    d01c:	1c03      	adds	r3, r0, #0
    d01e:	62bb      	str	r3, [r7, #40]	; 0x28
						}
						if(i > (led_num/2)-1){
    d020:	4b7c      	ldr	r3, [pc, #496]	; (d214 <DigitalSideLights+0xfb4>)
    d022:	781b      	ldrb	r3, [r3, #0]
    d024:	085b      	lsrs	r3, r3, #1
    d026:	b2db      	uxtb	r3, r3
    d028:	1e5a      	subs	r2, r3, #1
    d02a:	6a3b      	ldr	r3, [r7, #32]
    d02c:	429a      	cmp	r2, r3
    d02e:	da1b      	bge.n	d068 <DigitalSideLights+0xe08>
							x = x - pos_delta;
    d030:	4b7b      	ldr	r3, [pc, #492]	; (d220 <DigitalSideLights+0xfc0>)
    d032:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d034:	4798      	blx	r3
    d036:	1c02      	adds	r2, r0, #0
    d038:	4b85      	ldr	r3, [pc, #532]	; (d250 <DigitalSideLights+0xff0>)
    d03a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    d03c:	1c10      	adds	r0, r2, #0
    d03e:	4798      	blx	r3
    d040:	1c03      	adds	r3, r0, #0
    d042:	1c1a      	adds	r2, r3, #0
    d044:	4b83      	ldr	r3, [pc, #524]	; (d254 <DigitalSideLights+0xff4>)
    d046:	1c10      	adds	r0, r2, #0
    d048:	4798      	blx	r3
    d04a:	0003      	movs	r3, r0
    d04c:	627b      	str	r3, [r7, #36]	; 0x24
							temp_zoom = temp_zoom +zoom_delta;
    d04e:	4b76      	ldr	r3, [pc, #472]	; (d228 <DigitalSideLights+0xfc8>)
    d050:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d054:	4798      	blx	r3
    d056:	1c03      	adds	r3, r0, #0
    d058:	62bb      	str	r3, [r7, #40]	; 0x28
						}
						while(x<0)
    d05a:	e005      	b.n	d068 <DigitalSideLights+0xe08>
							x += (764);
    d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d05e:	22bf      	movs	r2, #191	; 0xbf
    d060:	0092      	lsls	r2, r2, #2
    d062:	4694      	mov	ip, r2
    d064:	4463      	add	r3, ip
    d066:	627b      	str	r3, [r7, #36]	; 0x24
						while(x<0)
    d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d06a:	2b00      	cmp	r3, #0
    d06c:	dbf6      	blt.n	d05c <DigitalSideLights+0xdfc>
						while(x>(764))
    d06e:	e004      	b.n	d07a <DigitalSideLights+0xe1a>
							x -= (764);
    d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d072:	4a76      	ldr	r2, [pc, #472]	; (d24c <DigitalSideLights+0xfec>)
    d074:	4694      	mov	ip, r2
    d076:	4463      	add	r3, ip
    d078:	627b      	str	r3, [r7, #36]	; 0x24
						while(x>(764))
    d07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d07c:	23bf      	movs	r3, #191	; 0xbf
    d07e:	009b      	lsls	r3, r3, #2
    d080:	429a      	cmp	r2, r3
    d082:	dcf5      	bgt.n	d070 <DigitalSideLights+0xe10>
					for(int i = 0; i < led_num; i++){
    d084:	6a3b      	ldr	r3, [r7, #32]
    d086:	3301      	adds	r3, #1
    d088:	623b      	str	r3, [r7, #32]
    d08a:	4b62      	ldr	r3, [pc, #392]	; (d214 <DigitalSideLights+0xfb4>)
    d08c:	781b      	ldrb	r3, [r3, #0]
    d08e:	001a      	movs	r2, r3
    d090:	6a3b      	ldr	r3, [r7, #32]
    d092:	429a      	cmp	r2, r3
    d094:	dc9a      	bgt.n	cfcc <DigitalSideLights+0xd6c>
					}
					break;
    d096:	e123      	b.n	d2e0 <DigitalSideLights+0x1080>
				}
				case MODE_DIGITAL_COMPASS_SNAKE:
				{
					static uint32_t shift_rate_timer = 0;
					if(check_timer_expired(&shift_rate_timer, 10)){
    d098:	4b71      	ldr	r3, [pc, #452]	; (d260 <DigitalSideLights+0x1000>)
    d09a:	210a      	movs	r1, #10
    d09c:	0018      	movs	r0, r3
    d09e:	4b71      	ldr	r3, [pc, #452]	; (d264 <DigitalSideLights+0x1004>)
    d0a0:	4798      	blx	r3
    d0a2:	1e03      	subs	r3, r0, #0
    d0a4:	d016      	beq.n	d0d4 <DigitalSideLights+0xe74>
						shift_rate_timer = millis();
    d0a6:	4b70      	ldr	r3, [pc, #448]	; (d268 <DigitalSideLights+0x1008>)
    d0a8:	4798      	blx	r3
    d0aa:	0002      	movs	r2, r0
    d0ac:	4b6c      	ldr	r3, [pc, #432]	; (d260 <DigitalSideLights+0x1000>)
    d0ae:	601a      	str	r2, [r3, #0]
						memmove(L_SPI_send_buf+8,L_SPI_send_buf+4,(led_num-1)*4);
    d0b0:	486e      	ldr	r0, [pc, #440]	; (d26c <DigitalSideLights+0x100c>)
    d0b2:	496f      	ldr	r1, [pc, #444]	; (d270 <DigitalSideLights+0x1010>)
    d0b4:	4b57      	ldr	r3, [pc, #348]	; (d214 <DigitalSideLights+0xfb4>)
    d0b6:	781b      	ldrb	r3, [r3, #0]
    d0b8:	3b01      	subs	r3, #1
    d0ba:	009b      	lsls	r3, r3, #2
    d0bc:	001a      	movs	r2, r3
    d0be:	4b6d      	ldr	r3, [pc, #436]	; (d274 <DigitalSideLights+0x1014>)
    d0c0:	4798      	blx	r3
						memmove(R_SPI_send_buf+8,R_SPI_send_buf+4,(led_num-1)*4);
    d0c2:	486d      	ldr	r0, [pc, #436]	; (d278 <DigitalSideLights+0x1018>)
    d0c4:	496d      	ldr	r1, [pc, #436]	; (d27c <DigitalSideLights+0x101c>)
    d0c6:	4b53      	ldr	r3, [pc, #332]	; (d214 <DigitalSideLights+0xfb4>)
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	3b01      	subs	r3, #1
    d0cc:	009b      	lsls	r3, r3, #2
    d0ce:	001a      	movs	r2, r3
    d0d0:	4b68      	ldr	r3, [pc, #416]	; (d274 <DigitalSideLights+0x1014>)
    d0d2:	4798      	blx	r3
					}

					int x = (heading/360.0)*764*4;
    d0d4:	4b55      	ldr	r3, [pc, #340]	; (d22c <DigitalSideLights+0xfcc>)
    d0d6:	681a      	ldr	r2, [r3, #0]
    d0d8:	4b55      	ldr	r3, [pc, #340]	; (d230 <DigitalSideLights+0xfd0>)
    d0da:	1c10      	adds	r0, r2, #0
    d0dc:	4798      	blx	r3
    d0de:	4c55      	ldr	r4, [pc, #340]	; (d234 <DigitalSideLights+0xfd4>)
    d0e0:	2200      	movs	r2, #0
    d0e2:	4b55      	ldr	r3, [pc, #340]	; (d238 <DigitalSideLights+0xfd8>)
    d0e4:	47a0      	blx	r4
    d0e6:	0003      	movs	r3, r0
    d0e8:	000c      	movs	r4, r1
    d0ea:	0018      	movs	r0, r3
    d0ec:	0021      	movs	r1, r4
    d0ee:	4c53      	ldr	r4, [pc, #332]	; (d23c <DigitalSideLights+0xfdc>)
    d0f0:	2200      	movs	r2, #0
    d0f2:	4b53      	ldr	r3, [pc, #332]	; (d240 <DigitalSideLights+0xfe0>)
    d0f4:	47a0      	blx	r4
    d0f6:	0003      	movs	r3, r0
    d0f8:	000c      	movs	r4, r1
    d0fa:	0018      	movs	r0, r3
    d0fc:	0021      	movs	r1, r4
    d0fe:	4c4f      	ldr	r4, [pc, #316]	; (d23c <DigitalSideLights+0xfdc>)
    d100:	2200      	movs	r2, #0
    d102:	4b50      	ldr	r3, [pc, #320]	; (d244 <DigitalSideLights+0xfe4>)
    d104:	47a0      	blx	r4
    d106:	0003      	movs	r3, r0
    d108:	000c      	movs	r4, r1
    d10a:	0019      	movs	r1, r3
    d10c:	0022      	movs	r2, r4
    d10e:	4b4e      	ldr	r3, [pc, #312]	; (d248 <DigitalSideLights+0xfe8>)
    d110:	0008      	movs	r0, r1
    d112:	0011      	movs	r1, r2
    d114:	4798      	blx	r3
    d116:	0003      	movs	r3, r0
    d118:	61fb      	str	r3, [r7, #28]
					while(x<0)
    d11a:	e005      	b.n	d128 <DigitalSideLights+0xec8>
						x += (764);
    d11c:	69fb      	ldr	r3, [r7, #28]
    d11e:	22bf      	movs	r2, #191	; 0xbf
    d120:	0092      	lsls	r2, r2, #2
    d122:	4694      	mov	ip, r2
    d124:	4463      	add	r3, ip
    d126:	61fb      	str	r3, [r7, #28]
					while(x<0)
    d128:	69fb      	ldr	r3, [r7, #28]
    d12a:	2b00      	cmp	r3, #0
    d12c:	dbf6      	blt.n	d11c <DigitalSideLights+0xebc>
					while(x>(764))
    d12e:	e004      	b.n	d13a <DigitalSideLights+0xeda>
						x -= (764);
    d130:	69fb      	ldr	r3, [r7, #28]
    d132:	4a46      	ldr	r2, [pc, #280]	; (d24c <DigitalSideLights+0xfec>)
    d134:	4694      	mov	ip, r2
    d136:	4463      	add	r3, ip
    d138:	61fb      	str	r3, [r7, #28]
					while(x>(764))
    d13a:	69fa      	ldr	r2, [r7, #28]
    d13c:	23bf      	movs	r3, #191	; 0xbf
    d13e:	009b      	lsls	r3, r3, #2
    d140:	429a      	cmp	r2, r3
    d142:	dcf5      	bgt.n	d130 <DigitalSideLights+0xed0>

					L_SPI_send_buf[4] = R_SPI_send_buf[4] = (0b11100000 | brightness);
    d144:	221f      	movs	r2, #31
    d146:	2320      	movs	r3, #32
    d148:	425b      	negs	r3, r3
    d14a:	4313      	orrs	r3, r2
    d14c:	b2da      	uxtb	r2, r3
    d14e:	4b2d      	ldr	r3, [pc, #180]	; (d204 <DigitalSideLights+0xfa4>)
    d150:	711a      	strb	r2, [r3, #4]
    d152:	4b2c      	ldr	r3, [pc, #176]	; (d204 <DigitalSideLights+0xfa4>)
    d154:	791a      	ldrb	r2, [r3, #4]
    d156:	4b2c      	ldr	r3, [pc, #176]	; (d208 <DigitalSideLights+0xfa8>)
    d158:	711a      	strb	r2, [r3, #4]
					if(x/255 == 0){
    d15a:	69fb      	ldr	r3, [r7, #28]
    d15c:	33fe      	adds	r3, #254	; 0xfe
    d15e:	001a      	movs	r2, r3
    d160:	23fe      	movs	r3, #254	; 0xfe
    d162:	005b      	lsls	r3, r3, #1
    d164:	429a      	cmp	r2, r3
    d166:	d823      	bhi.n	d1b0 <DigitalSideLights+0xf50>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 0;
    d168:	4b26      	ldr	r3, [pc, #152]	; (d204 <DigitalSideLights+0xfa4>)
    d16a:	2200      	movs	r2, #0
    d16c:	715a      	strb	r2, [r3, #5]
    d16e:	4b25      	ldr	r3, [pc, #148]	; (d204 <DigitalSideLights+0xfa4>)
    d170:	795a      	ldrb	r2, [r3, #5]
    d172:	4b25      	ldr	r3, [pc, #148]	; (d208 <DigitalSideLights+0xfa8>)
    d174:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = 255-(x%255);
    d176:	69fa      	ldr	r2, [r7, #28]
    d178:	4b41      	ldr	r3, [pc, #260]	; (d280 <DigitalSideLights+0x1020>)
    d17a:	21ff      	movs	r1, #255	; 0xff
    d17c:	0010      	movs	r0, r2
    d17e:	4798      	blx	r3
    d180:	000b      	movs	r3, r1
    d182:	b2db      	uxtb	r3, r3
    d184:	43db      	mvns	r3, r3
    d186:	b2da      	uxtb	r2, r3
    d188:	4b1e      	ldr	r3, [pc, #120]	; (d204 <DigitalSideLights+0xfa4>)
    d18a:	719a      	strb	r2, [r3, #6]
    d18c:	4b1d      	ldr	r3, [pc, #116]	; (d204 <DigitalSideLights+0xfa4>)
    d18e:	799a      	ldrb	r2, [r3, #6]
    d190:	4b1d      	ldr	r3, [pc, #116]	; (d208 <DigitalSideLights+0xfa8>)
    d192:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = (x%255);
    d194:	69fa      	ldr	r2, [r7, #28]
    d196:	4b3a      	ldr	r3, [pc, #232]	; (d280 <DigitalSideLights+0x1020>)
    d198:	21ff      	movs	r1, #255	; 0xff
    d19a:	0010      	movs	r0, r2
    d19c:	4798      	blx	r3
    d19e:	000b      	movs	r3, r1
    d1a0:	b2da      	uxtb	r2, r3
    d1a2:	4b18      	ldr	r3, [pc, #96]	; (d204 <DigitalSideLights+0xfa4>)
    d1a4:	71da      	strb	r2, [r3, #7]
    d1a6:	4b17      	ldr	r3, [pc, #92]	; (d204 <DigitalSideLights+0xfa4>)
    d1a8:	79da      	ldrb	r2, [r3, #7]
    d1aa:	4b17      	ldr	r3, [pc, #92]	; (d208 <DigitalSideLights+0xfa8>)
    d1ac:	71da      	strb	r2, [r3, #7]
						} else if(x/255 == 2){
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
					}
					break;
    d1ae:	e096      	b.n	d2de <DigitalSideLights+0x107e>
						} else if(x/255 == 1){
    d1b0:	69fb      	ldr	r3, [r7, #28]
    d1b2:	3bff      	subs	r3, #255	; 0xff
    d1b4:	2bfe      	cmp	r3, #254	; 0xfe
    d1b6:	d865      	bhi.n	d284 <DigitalSideLights+0x1024>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = (x%255);
    d1b8:	69fa      	ldr	r2, [r7, #28]
    d1ba:	4b31      	ldr	r3, [pc, #196]	; (d280 <DigitalSideLights+0x1020>)
    d1bc:	21ff      	movs	r1, #255	; 0xff
    d1be:	0010      	movs	r0, r2
    d1c0:	4798      	blx	r3
    d1c2:	000b      	movs	r3, r1
    d1c4:	b2da      	uxtb	r2, r3
    d1c6:	4b0f      	ldr	r3, [pc, #60]	; (d204 <DigitalSideLights+0xfa4>)
    d1c8:	715a      	strb	r2, [r3, #5]
    d1ca:	4b0e      	ldr	r3, [pc, #56]	; (d204 <DigitalSideLights+0xfa4>)
    d1cc:	795a      	ldrb	r2, [r3, #5]
    d1ce:	4b0e      	ldr	r3, [pc, #56]	; (d208 <DigitalSideLights+0xfa8>)
    d1d0:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = 0;
    d1d2:	4b0c      	ldr	r3, [pc, #48]	; (d204 <DigitalSideLights+0xfa4>)
    d1d4:	2200      	movs	r2, #0
    d1d6:	719a      	strb	r2, [r3, #6]
    d1d8:	4b0a      	ldr	r3, [pc, #40]	; (d204 <DigitalSideLights+0xfa4>)
    d1da:	799a      	ldrb	r2, [r3, #6]
    d1dc:	4b0a      	ldr	r3, [pc, #40]	; (d208 <DigitalSideLights+0xfa8>)
    d1de:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 255-(x%255);
    d1e0:	69fa      	ldr	r2, [r7, #28]
    d1e2:	4b27      	ldr	r3, [pc, #156]	; (d280 <DigitalSideLights+0x1020>)
    d1e4:	21ff      	movs	r1, #255	; 0xff
    d1e6:	0010      	movs	r0, r2
    d1e8:	4798      	blx	r3
    d1ea:	000b      	movs	r3, r1
    d1ec:	b2db      	uxtb	r3, r3
    d1ee:	43db      	mvns	r3, r3
    d1f0:	b2da      	uxtb	r2, r3
    d1f2:	4b04      	ldr	r3, [pc, #16]	; (d204 <DigitalSideLights+0xfa4>)
    d1f4:	71da      	strb	r2, [r3, #7]
    d1f6:	4b03      	ldr	r3, [pc, #12]	; (d204 <DigitalSideLights+0xfa4>)
    d1f8:	79da      	ldrb	r2, [r3, #7]
    d1fa:	4b03      	ldr	r3, [pc, #12]	; (d208 <DigitalSideLights+0xfa8>)
    d1fc:	71da      	strb	r2, [r3, #7]
					break;
    d1fe:	e06e      	b.n	d2de <DigitalSideLights+0x107e>
    d200:	0001928d 	.word	0x0001928d
    d204:	20000598 	.word	0x20000598
    d208:	20001440 	.word	0x20001440
    d20c:	3e4ccccd 	.word	0x3e4ccccd
    d210:	42480000 	.word	0x42480000
    d214:	200000e0 	.word	0x200000e0
    d218:	3dcccccd 	.word	0x3dcccccd
    d21c:	41c80000 	.word	0x41c80000
    d220:	0001a2d9 	.word	0x0001a2d9
    d224:	00019d21 	.word	0x00019d21
    d228:	0001961d 	.word	0x0001961d
    d22c:	20000384 	.word	0x20000384
    d230:	0001bf15 	.word	0x0001bf15
    d234:	0001aa25 	.word	0x0001aa25
    d238:	40768000 	.word	0x40768000
    d23c:	0001b28d 	.word	0x0001b28d
    d240:	4087e000 	.word	0x4087e000
    d244:	40100000 	.word	0x40100000
    d248:	0001bdb9 	.word	0x0001bdb9
    d24c:	fffffd04 	.word	0xfffffd04
    d250:	00019f61 	.word	0x00019f61
    d254:	0001a299 	.word	0x0001a299
    d258:	000195b1 	.word	0x000195b1
    d25c:	0000e52d 	.word	0x0000e52d
    d260:	20000470 	.word	0x20000470
    d264:	00009fbd 	.word	0x00009fbd
    d268:	00009f65 	.word	0x00009f65
    d26c:	20001448 	.word	0x20001448
    d270:	20001444 	.word	0x20001444
    d274:	0001c16f 	.word	0x0001c16f
    d278:	200005a0 	.word	0x200005a0
    d27c:	2000059c 	.word	0x2000059c
    d280:	00019461 	.word	0x00019461
						} else if(x/255 == 2){
    d284:	69fb      	ldr	r3, [r7, #28]
    d286:	3bff      	subs	r3, #255	; 0xff
    d288:	3bff      	subs	r3, #255	; 0xff
    d28a:	2bfe      	cmp	r3, #254	; 0xfe
    d28c:	d827      	bhi.n	d2de <DigitalSideLights+0x107e>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
    d28e:	69fa      	ldr	r2, [r7, #28]
    d290:	4b20      	ldr	r3, [pc, #128]	; (d314 <DigitalSideLights+0x10b4>)
    d292:	21ff      	movs	r1, #255	; 0xff
    d294:	0010      	movs	r0, r2
    d296:	4798      	blx	r3
    d298:	000b      	movs	r3, r1
    d29a:	b2db      	uxtb	r3, r3
    d29c:	43db      	mvns	r3, r3
    d29e:	b2da      	uxtb	r2, r3
    d2a0:	4b1d      	ldr	r3, [pc, #116]	; (d318 <DigitalSideLights+0x10b8>)
    d2a2:	715a      	strb	r2, [r3, #5]
    d2a4:	4b1c      	ldr	r3, [pc, #112]	; (d318 <DigitalSideLights+0x10b8>)
    d2a6:	795a      	ldrb	r2, [r3, #5]
    d2a8:	4b1c      	ldr	r3, [pc, #112]	; (d31c <DigitalSideLights+0x10bc>)
    d2aa:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
    d2ac:	69fa      	ldr	r2, [r7, #28]
    d2ae:	4b19      	ldr	r3, [pc, #100]	; (d314 <DigitalSideLights+0x10b4>)
    d2b0:	21ff      	movs	r1, #255	; 0xff
    d2b2:	0010      	movs	r0, r2
    d2b4:	4798      	blx	r3
    d2b6:	000b      	movs	r3, r1
    d2b8:	b2da      	uxtb	r2, r3
    d2ba:	4b17      	ldr	r3, [pc, #92]	; (d318 <DigitalSideLights+0x10b8>)
    d2bc:	719a      	strb	r2, [r3, #6]
    d2be:	4b16      	ldr	r3, [pc, #88]	; (d318 <DigitalSideLights+0x10b8>)
    d2c0:	799a      	ldrb	r2, [r3, #6]
    d2c2:	4b16      	ldr	r3, [pc, #88]	; (d31c <DigitalSideLights+0x10bc>)
    d2c4:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
    d2c6:	4b14      	ldr	r3, [pc, #80]	; (d318 <DigitalSideLights+0x10b8>)
    d2c8:	2200      	movs	r2, #0
    d2ca:	71da      	strb	r2, [r3, #7]
    d2cc:	4b12      	ldr	r3, [pc, #72]	; (d318 <DigitalSideLights+0x10b8>)
    d2ce:	79da      	ldrb	r2, [r3, #7]
    d2d0:	4b12      	ldr	r3, [pc, #72]	; (d31c <DigitalSideLights+0x10bc>)
    d2d2:	71da      	strb	r2, [r3, #7]
					break;
    d2d4:	e003      	b.n	d2de <DigitalSideLights+0x107e>
					break;
    d2d6:	46c0      	nop			; (mov r8, r8)
    d2d8:	e002      	b.n	d2e0 <DigitalSideLights+0x1080>
					break;
    d2da:	46c0      	nop			; (mov r8, r8)
    d2dc:	e000      	b.n	d2e0 <DigitalSideLights+0x1080>
					break;
    d2de:	46c0      	nop			; (mov r8, r8)
				}
			}
		
			L_digital_write(led_num);
    d2e0:	4b0f      	ldr	r3, [pc, #60]	; (d320 <DigitalSideLights+0x10c0>)
    d2e2:	781b      	ldrb	r3, [r3, #0]
    d2e4:	b29b      	uxth	r3, r3
    d2e6:	0018      	movs	r0, r3
    d2e8:	4b0e      	ldr	r3, [pc, #56]	; (d324 <DigitalSideLights+0x10c4>)
    d2ea:	4798      	blx	r3
			R_digital_write(led_num);
    d2ec:	4b0c      	ldr	r3, [pc, #48]	; (d320 <DigitalSideLights+0x10c0>)
    d2ee:	781b      	ldrb	r3, [r3, #0]
    d2f0:	b29b      	uxth	r3, r3
    d2f2:	0018      	movs	r0, r3
    d2f4:	4b0c      	ldr	r3, [pc, #48]	; (d328 <DigitalSideLights+0x10c8>)
    d2f6:	4798      	blx	r3

			DIGITAL_OFF = false;
    d2f8:	4b0c      	ldr	r3, [pc, #48]	; (d32c <DigitalSideLights+0x10cc>)
    d2fa:	2200      	movs	r2, #0
    d2fc:	701a      	strb	r2, [r3, #0]
		}
		digital_refresh_time = millis();
    d2fe:	4b0c      	ldr	r3, [pc, #48]	; (d330 <DigitalSideLights+0x10d0>)
    d300:	4798      	blx	r3
    d302:	0002      	movs	r2, r0
    d304:	4b0b      	ldr	r3, [pc, #44]	; (d334 <DigitalSideLights+0x10d4>)
    d306:	601a      	str	r2, [r3, #0]
	}
}
    d308:	46c0      	nop			; (mov r8, r8)
    d30a:	46bd      	mov	sp, r7
    d30c:	b00e      	add	sp, #56	; 0x38
    d30e:	bc04      	pop	{r2}
    d310:	4690      	mov	r8, r2
    d312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d314:	00019461 	.word	0x00019461
    d318:	20000598 	.word	0x20000598
    d31c:	20001440 	.word	0x20001440
    d320:	200000e0 	.word	0x200000e0
    d324:	0000e7cd 	.word	0x0000e7cd
    d328:	0000e7fd 	.word	0x0000e7fd
    d32c:	200003c0 	.word	0x200003c0
    d330:	00009f65 	.word	0x00009f65
    d334:	200003c4 	.word	0x200003c4

0000d338 <BrakeLight>:

void BrakeLight(){
    d338:	b5f0      	push	{r4, r5, r6, r7, lr}
    d33a:	b087      	sub	sp, #28
    d33c:	af00      	add	r7, sp, #0
	if(((HEADLIGHTS && lightControlHead() && LIGHTS_ON) | (BRAKE_ALWAYS_ON)) && sensorControl() && !is_standby_active()){
    d33e:	4bdc      	ldr	r3, [pc, #880]	; (d6b0 <BrakeLight+0x378>)
    d340:	781b      	ldrb	r3, [r3, #0]
    d342:	2b00      	cmp	r3, #0
    d344:	d009      	beq.n	d35a <BrakeLight+0x22>
    d346:	4bdb      	ldr	r3, [pc, #876]	; (d6b4 <BrakeLight+0x37c>)
    d348:	4798      	blx	r3
    d34a:	1e03      	subs	r3, r0, #0
    d34c:	d005      	beq.n	d35a <BrakeLight+0x22>
    d34e:	4bda      	ldr	r3, [pc, #872]	; (d6b8 <BrakeLight+0x380>)
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	2b00      	cmp	r3, #0
    d354:	d001      	beq.n	d35a <BrakeLight+0x22>
    d356:	2301      	movs	r3, #1
    d358:	e000      	b.n	d35c <BrakeLight+0x24>
    d35a:	2300      	movs	r3, #0
    d35c:	4ad7      	ldr	r2, [pc, #860]	; (d6bc <BrakeLight+0x384>)
    d35e:	7812      	ldrb	r2, [r2, #0]
    d360:	4313      	orrs	r3, r2
    d362:	d101      	bne.n	d368 <BrakeLight+0x30>
    d364:	f000 fc53 	bl	dc0e <BrakeLight+0x8d6>
    d368:	4bd5      	ldr	r3, [pc, #852]	; (d6c0 <BrakeLight+0x388>)
    d36a:	4798      	blx	r3
    d36c:	1e03      	subs	r3, r0, #0
    d36e:	d101      	bne.n	d374 <BrakeLight+0x3c>
    d370:	f000 fc4d 	bl	dc0e <BrakeLight+0x8d6>
    d374:	4bd3      	ldr	r3, [pc, #844]	; (d6c4 <BrakeLight+0x38c>)
    d376:	4798      	blx	r3
    d378:	0003      	movs	r3, r0
    d37a:	001a      	movs	r2, r3
    d37c:	2301      	movs	r3, #1
    d37e:	4053      	eors	r3, r2
    d380:	b2db      	uxtb	r3, r3
    d382:	2b00      	cmp	r3, #0
    d384:	d101      	bne.n	d38a <BrakeLight+0x52>
    d386:	f000 fc42 	bl	dc0e <BrakeLight+0x8d6>
		float temp_y = remote_y;
    d38a:	4bcf      	ldr	r3, [pc, #828]	; (d6c8 <BrakeLight+0x390>)
    d38c:	781a      	ldrb	r2, [r3, #0]
    d38e:	4bcf      	ldr	r3, [pc, #828]	; (d6cc <BrakeLight+0x394>)
    d390:	0010      	movs	r0, r2
    d392:	4798      	blx	r3
    d394:	1c03      	adds	r3, r0, #0
    d396:	617b      	str	r3, [r7, #20]
		float brake_temp;

		if(temp_y < 128-(128*((float)deadzone/100.0))){
    d398:	4bcd      	ldr	r3, [pc, #820]	; (d6d0 <BrakeLight+0x398>)
    d39a:	6978      	ldr	r0, [r7, #20]
    d39c:	4798      	blx	r3
    d39e:	0005      	movs	r5, r0
    d3a0:	000e      	movs	r6, r1
    d3a2:	4bcc      	ldr	r3, [pc, #816]	; (d6d4 <BrakeLight+0x39c>)
    d3a4:	781a      	ldrb	r2, [r3, #0]
    d3a6:	4bc9      	ldr	r3, [pc, #804]	; (d6cc <BrakeLight+0x394>)
    d3a8:	0010      	movs	r0, r2
    d3aa:	4798      	blx	r3
    d3ac:	1c02      	adds	r2, r0, #0
    d3ae:	4bc8      	ldr	r3, [pc, #800]	; (d6d0 <BrakeLight+0x398>)
    d3b0:	1c10      	adds	r0, r2, #0
    d3b2:	4798      	blx	r3
    d3b4:	4cc8      	ldr	r4, [pc, #800]	; (d6d8 <BrakeLight+0x3a0>)
    d3b6:	2200      	movs	r2, #0
    d3b8:	4bc8      	ldr	r3, [pc, #800]	; (d6dc <BrakeLight+0x3a4>)
    d3ba:	47a0      	blx	r4
    d3bc:	0003      	movs	r3, r0
    d3be:	000c      	movs	r4, r1
    d3c0:	0018      	movs	r0, r3
    d3c2:	0021      	movs	r1, r4
    d3c4:	4cc6      	ldr	r4, [pc, #792]	; (d6e0 <BrakeLight+0x3a8>)
    d3c6:	2200      	movs	r2, #0
    d3c8:	4bc6      	ldr	r3, [pc, #792]	; (d6e4 <BrakeLight+0x3ac>)
    d3ca:	47a0      	blx	r4
    d3cc:	0003      	movs	r3, r0
    d3ce:	000c      	movs	r4, r1
    d3d0:	001a      	movs	r2, r3
    d3d2:	0023      	movs	r3, r4
    d3d4:	4cc4      	ldr	r4, [pc, #784]	; (d6e8 <BrakeLight+0x3b0>)
    d3d6:	2000      	movs	r0, #0
    d3d8:	49c2      	ldr	r1, [pc, #776]	; (d6e4 <BrakeLight+0x3ac>)
    d3da:	47a0      	blx	r4
    d3dc:	0003      	movs	r3, r0
    d3de:	000c      	movs	r4, r1
    d3e0:	001a      	movs	r2, r3
    d3e2:	0023      	movs	r3, r4
    d3e4:	4cc1      	ldr	r4, [pc, #772]	; (d6ec <BrakeLight+0x3b4>)
    d3e6:	0028      	movs	r0, r5
    d3e8:	0031      	movs	r1, r6
    d3ea:	47a0      	blx	r4
    d3ec:	1e03      	subs	r3, r0, #0
    d3ee:	d101      	bne.n	d3f4 <BrakeLight+0xbc>
    d3f0:	f000 fc06 	bl	dc00 <BrakeLight+0x8c8>
			switch(brake_light_mode){
    d3f4:	4bbe      	ldr	r3, [pc, #760]	; (d6f0 <BrakeLight+0x3b8>)
    d3f6:	781b      	ldrb	r3, [r3, #0]
    d3f8:	2b05      	cmp	r3, #5
    d3fa:	d901      	bls.n	d400 <BrakeLight+0xc8>
    d3fc:	f000 fc0b 	bl	dc16 <BrakeLight+0x8de>
    d400:	009a      	lsls	r2, r3, #2
    d402:	4bbc      	ldr	r3, [pc, #752]	; (d6f4 <BrakeLight+0x3bc>)
    d404:	18d3      	adds	r3, r2, r3
    d406:	681b      	ldr	r3, [r3, #0]
    d408:	469f      	mov	pc, r3
				case BRAKE_FADE:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d40a:	4bbb      	ldr	r3, [pc, #748]	; (d6f8 <BrakeLight+0x3c0>)
    d40c:	881b      	ldrh	r3, [r3, #0]
    d40e:	001a      	movs	r2, r3
    d410:	4bba      	ldr	r3, [pc, #744]	; (d6fc <BrakeLight+0x3c4>)
    d412:	1a9a      	subs	r2, r3, r2
    d414:	4bba      	ldr	r3, [pc, #744]	; (d700 <BrakeLight+0x3c8>)
    d416:	0010      	movs	r0, r2
    d418:	4798      	blx	r3
    d41a:	0005      	movs	r5, r0
    d41c:	000e      	movs	r6, r1
    d41e:	4bad      	ldr	r3, [pc, #692]	; (d6d4 <BrakeLight+0x39c>)
    d420:	781a      	ldrb	r2, [r3, #0]
    d422:	4baa      	ldr	r3, [pc, #680]	; (d6cc <BrakeLight+0x394>)
    d424:	0010      	movs	r0, r2
    d426:	4798      	blx	r3
    d428:	1c02      	adds	r2, r0, #0
    d42a:	4ba9      	ldr	r3, [pc, #676]	; (d6d0 <BrakeLight+0x398>)
    d42c:	1c10      	adds	r0, r2, #0
    d42e:	4798      	blx	r3
    d430:	4ca9      	ldr	r4, [pc, #676]	; (d6d8 <BrakeLight+0x3a0>)
    d432:	2200      	movs	r2, #0
    d434:	4ba9      	ldr	r3, [pc, #676]	; (d6dc <BrakeLight+0x3a4>)
    d436:	47a0      	blx	r4
    d438:	0003      	movs	r3, r0
    d43a:	000c      	movs	r4, r1
    d43c:	0018      	movs	r0, r3
    d43e:	0021      	movs	r1, r4
    d440:	4ca7      	ldr	r4, [pc, #668]	; (d6e0 <BrakeLight+0x3a8>)
    d442:	2200      	movs	r2, #0
    d444:	4ba7      	ldr	r3, [pc, #668]	; (d6e4 <BrakeLight+0x3ac>)
    d446:	47a0      	blx	r4
    d448:	0003      	movs	r3, r0
    d44a:	000c      	movs	r4, r1
    d44c:	001a      	movs	r2, r3
    d44e:	0023      	movs	r3, r4
    d450:	4ca5      	ldr	r4, [pc, #660]	; (d6e8 <BrakeLight+0x3b0>)
    d452:	2000      	movs	r0, #0
    d454:	49a3      	ldr	r1, [pc, #652]	; (d6e4 <BrakeLight+0x3ac>)
    d456:	47a0      	blx	r4
    d458:	0003      	movs	r3, r0
    d45a:	000c      	movs	r4, r1
    d45c:	001a      	movs	r2, r3
    d45e:	0023      	movs	r3, r4
    d460:	4c9d      	ldr	r4, [pc, #628]	; (d6d8 <BrakeLight+0x3a0>)
    d462:	0028      	movs	r0, r5
    d464:	0031      	movs	r1, r6
    d466:	47a0      	blx	r4
    d468:	0003      	movs	r3, r0
    d46a:	000c      	movs	r4, r1
    d46c:	001d      	movs	r5, r3
    d46e:	0026      	movs	r6, r4
    d470:	4b98      	ldr	r3, [pc, #608]	; (d6d4 <BrakeLight+0x39c>)
    d472:	781a      	ldrb	r2, [r3, #0]
    d474:	4b95      	ldr	r3, [pc, #596]	; (d6cc <BrakeLight+0x394>)
    d476:	0010      	movs	r0, r2
    d478:	4798      	blx	r3
    d47a:	1c02      	adds	r2, r0, #0
    d47c:	4b94      	ldr	r3, [pc, #592]	; (d6d0 <BrakeLight+0x398>)
    d47e:	1c10      	adds	r0, r2, #0
    d480:	4798      	blx	r3
    d482:	4c95      	ldr	r4, [pc, #596]	; (d6d8 <BrakeLight+0x3a0>)
    d484:	2200      	movs	r2, #0
    d486:	4b95      	ldr	r3, [pc, #596]	; (d6dc <BrakeLight+0x3a4>)
    d488:	47a0      	blx	r4
    d48a:	0003      	movs	r3, r0
    d48c:	000c      	movs	r4, r1
    d48e:	0018      	movs	r0, r3
    d490:	0021      	movs	r1, r4
    d492:	4c93      	ldr	r4, [pc, #588]	; (d6e0 <BrakeLight+0x3a8>)
    d494:	2200      	movs	r2, #0
    d496:	4b93      	ldr	r3, [pc, #588]	; (d6e4 <BrakeLight+0x3ac>)
    d498:	47a0      	blx	r4
    d49a:	0003      	movs	r3, r0
    d49c:	000c      	movs	r4, r1
    d49e:	001a      	movs	r2, r3
    d4a0:	0023      	movs	r3, r4
    d4a2:	4c91      	ldr	r4, [pc, #580]	; (d6e8 <BrakeLight+0x3b0>)
    d4a4:	2000      	movs	r0, #0
    d4a6:	498f      	ldr	r1, [pc, #572]	; (d6e4 <BrakeLight+0x3ac>)
    d4a8:	47a0      	blx	r4
    d4aa:	0003      	movs	r3, r0
    d4ac:	000c      	movs	r4, r1
    d4ae:	60bb      	str	r3, [r7, #8]
    d4b0:	60fc      	str	r4, [r7, #12]
    d4b2:	4b87      	ldr	r3, [pc, #540]	; (d6d0 <BrakeLight+0x398>)
    d4b4:	6978      	ldr	r0, [r7, #20]
    d4b6:	4798      	blx	r3
    d4b8:	0002      	movs	r2, r0
    d4ba:	000b      	movs	r3, r1
    d4bc:	4c8a      	ldr	r4, [pc, #552]	; (d6e8 <BrakeLight+0x3b0>)
    d4be:	68b8      	ldr	r0, [r7, #8]
    d4c0:	68f9      	ldr	r1, [r7, #12]
    d4c2:	47a0      	blx	r4
    d4c4:	0003      	movs	r3, r0
    d4c6:	000c      	movs	r4, r1
    d4c8:	001a      	movs	r2, r3
    d4ca:	0023      	movs	r3, r4
    d4cc:	4c84      	ldr	r4, [pc, #528]	; (d6e0 <BrakeLight+0x3a8>)
    d4ce:	0028      	movs	r0, r5
    d4d0:	0031      	movs	r1, r6
    d4d2:	47a0      	blx	r4
    d4d4:	0003      	movs	r3, r0
    d4d6:	000c      	movs	r4, r1
    d4d8:	001d      	movs	r5, r3
    d4da:	0026      	movs	r6, r4
    d4dc:	4b86      	ldr	r3, [pc, #536]	; (d6f8 <BrakeLight+0x3c0>)
    d4de:	881b      	ldrh	r3, [r3, #0]
    d4e0:	001a      	movs	r2, r3
    d4e2:	4b87      	ldr	r3, [pc, #540]	; (d700 <BrakeLight+0x3c8>)
    d4e4:	0010      	movs	r0, r2
    d4e6:	4798      	blx	r3
    d4e8:	0002      	movs	r2, r0
    d4ea:	000b      	movs	r3, r1
    d4ec:	4c85      	ldr	r4, [pc, #532]	; (d704 <BrakeLight+0x3cc>)
    d4ee:	0028      	movs	r0, r5
    d4f0:	0031      	movs	r1, r6
    d4f2:	47a0      	blx	r4
    d4f4:	0003      	movs	r3, r0
    d4f6:	000c      	movs	r4, r1
    d4f8:	0019      	movs	r1, r3
    d4fa:	0022      	movs	r2, r4
    d4fc:	4b82      	ldr	r3, [pc, #520]	; (d708 <BrakeLight+0x3d0>)
    d4fe:	0008      	movs	r0, r1
    d500:	0011      	movs	r1, r2
    d502:	4798      	blx	r3
    d504:	1c03      	adds	r3, r0, #0
    d506:	613b      	str	r3, [r7, #16]
				setRed(brake_temp);
    d508:	4b80      	ldr	r3, [pc, #512]	; (d70c <BrakeLight+0x3d4>)
    d50a:	6938      	ldr	r0, [r7, #16]
    d50c:	4798      	blx	r3
    d50e:	0003      	movs	r3, r0
    d510:	b29b      	uxth	r3, r3
    d512:	0018      	movs	r0, r3
    d514:	4b7e      	ldr	r3, [pc, #504]	; (d710 <BrakeLight+0x3d8>)
    d516:	4798      	blx	r3
				break;
    d518:	e378      	b.n	dc0c <BrakeLight+0x8d4>
				case BRAKE_BLINK:
				BlinkTail(0xFFFF, 7);
    d51a:	4a7e      	ldr	r2, [pc, #504]	; (d714 <BrakeLight+0x3dc>)
    d51c:	4b77      	ldr	r3, [pc, #476]	; (d6fc <BrakeLight+0x3c4>)
    d51e:	1c11      	adds	r1, r2, #0
    d520:	0018      	movs	r0, r3
    d522:	4b7d      	ldr	r3, [pc, #500]	; (d718 <BrakeLight+0x3e0>)
    d524:	4798      	blx	r3
				break;
    d526:	e371      	b.n	dc0c <BrakeLight+0x8d4>
				case BRAKE_FADE_BLINK:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d528:	4b73      	ldr	r3, [pc, #460]	; (d6f8 <BrakeLight+0x3c0>)
    d52a:	881b      	ldrh	r3, [r3, #0]
    d52c:	001a      	movs	r2, r3
    d52e:	4b73      	ldr	r3, [pc, #460]	; (d6fc <BrakeLight+0x3c4>)
    d530:	1a9a      	subs	r2, r3, r2
    d532:	4b73      	ldr	r3, [pc, #460]	; (d700 <BrakeLight+0x3c8>)
    d534:	0010      	movs	r0, r2
    d536:	4798      	blx	r3
    d538:	0005      	movs	r5, r0
    d53a:	000e      	movs	r6, r1
    d53c:	4b65      	ldr	r3, [pc, #404]	; (d6d4 <BrakeLight+0x39c>)
    d53e:	781a      	ldrb	r2, [r3, #0]
    d540:	4b62      	ldr	r3, [pc, #392]	; (d6cc <BrakeLight+0x394>)
    d542:	0010      	movs	r0, r2
    d544:	4798      	blx	r3
    d546:	1c02      	adds	r2, r0, #0
    d548:	4b61      	ldr	r3, [pc, #388]	; (d6d0 <BrakeLight+0x398>)
    d54a:	1c10      	adds	r0, r2, #0
    d54c:	4798      	blx	r3
    d54e:	4c62      	ldr	r4, [pc, #392]	; (d6d8 <BrakeLight+0x3a0>)
    d550:	2200      	movs	r2, #0
    d552:	4b62      	ldr	r3, [pc, #392]	; (d6dc <BrakeLight+0x3a4>)
    d554:	47a0      	blx	r4
    d556:	0003      	movs	r3, r0
    d558:	000c      	movs	r4, r1
    d55a:	0018      	movs	r0, r3
    d55c:	0021      	movs	r1, r4
    d55e:	4c60      	ldr	r4, [pc, #384]	; (d6e0 <BrakeLight+0x3a8>)
    d560:	2200      	movs	r2, #0
    d562:	4b60      	ldr	r3, [pc, #384]	; (d6e4 <BrakeLight+0x3ac>)
    d564:	47a0      	blx	r4
    d566:	0003      	movs	r3, r0
    d568:	000c      	movs	r4, r1
    d56a:	001a      	movs	r2, r3
    d56c:	0023      	movs	r3, r4
    d56e:	4c5e      	ldr	r4, [pc, #376]	; (d6e8 <BrakeLight+0x3b0>)
    d570:	2000      	movs	r0, #0
    d572:	495c      	ldr	r1, [pc, #368]	; (d6e4 <BrakeLight+0x3ac>)
    d574:	47a0      	blx	r4
    d576:	0003      	movs	r3, r0
    d578:	000c      	movs	r4, r1
    d57a:	001a      	movs	r2, r3
    d57c:	0023      	movs	r3, r4
    d57e:	4c56      	ldr	r4, [pc, #344]	; (d6d8 <BrakeLight+0x3a0>)
    d580:	0028      	movs	r0, r5
    d582:	0031      	movs	r1, r6
    d584:	47a0      	blx	r4
    d586:	0003      	movs	r3, r0
    d588:	000c      	movs	r4, r1
    d58a:	001d      	movs	r5, r3
    d58c:	0026      	movs	r6, r4
    d58e:	4b51      	ldr	r3, [pc, #324]	; (d6d4 <BrakeLight+0x39c>)
    d590:	781a      	ldrb	r2, [r3, #0]
    d592:	4b4e      	ldr	r3, [pc, #312]	; (d6cc <BrakeLight+0x394>)
    d594:	0010      	movs	r0, r2
    d596:	4798      	blx	r3
    d598:	1c02      	adds	r2, r0, #0
    d59a:	4b4d      	ldr	r3, [pc, #308]	; (d6d0 <BrakeLight+0x398>)
    d59c:	1c10      	adds	r0, r2, #0
    d59e:	4798      	blx	r3
    d5a0:	4c4d      	ldr	r4, [pc, #308]	; (d6d8 <BrakeLight+0x3a0>)
    d5a2:	2200      	movs	r2, #0
    d5a4:	4b4d      	ldr	r3, [pc, #308]	; (d6dc <BrakeLight+0x3a4>)
    d5a6:	47a0      	blx	r4
    d5a8:	0003      	movs	r3, r0
    d5aa:	000c      	movs	r4, r1
    d5ac:	0018      	movs	r0, r3
    d5ae:	0021      	movs	r1, r4
    d5b0:	4c4b      	ldr	r4, [pc, #300]	; (d6e0 <BrakeLight+0x3a8>)
    d5b2:	2200      	movs	r2, #0
    d5b4:	4b4b      	ldr	r3, [pc, #300]	; (d6e4 <BrakeLight+0x3ac>)
    d5b6:	47a0      	blx	r4
    d5b8:	0003      	movs	r3, r0
    d5ba:	000c      	movs	r4, r1
    d5bc:	001a      	movs	r2, r3
    d5be:	0023      	movs	r3, r4
    d5c0:	4c49      	ldr	r4, [pc, #292]	; (d6e8 <BrakeLight+0x3b0>)
    d5c2:	2000      	movs	r0, #0
    d5c4:	4947      	ldr	r1, [pc, #284]	; (d6e4 <BrakeLight+0x3ac>)
    d5c6:	47a0      	blx	r4
    d5c8:	0003      	movs	r3, r0
    d5ca:	000c      	movs	r4, r1
    d5cc:	60bb      	str	r3, [r7, #8]
    d5ce:	60fc      	str	r4, [r7, #12]
    d5d0:	4b3f      	ldr	r3, [pc, #252]	; (d6d0 <BrakeLight+0x398>)
    d5d2:	6978      	ldr	r0, [r7, #20]
    d5d4:	4798      	blx	r3
    d5d6:	0002      	movs	r2, r0
    d5d8:	000b      	movs	r3, r1
    d5da:	4c43      	ldr	r4, [pc, #268]	; (d6e8 <BrakeLight+0x3b0>)
    d5dc:	68b8      	ldr	r0, [r7, #8]
    d5de:	68f9      	ldr	r1, [r7, #12]
    d5e0:	47a0      	blx	r4
    d5e2:	0003      	movs	r3, r0
    d5e4:	000c      	movs	r4, r1
    d5e6:	001a      	movs	r2, r3
    d5e8:	0023      	movs	r3, r4
    d5ea:	4c3d      	ldr	r4, [pc, #244]	; (d6e0 <BrakeLight+0x3a8>)
    d5ec:	0028      	movs	r0, r5
    d5ee:	0031      	movs	r1, r6
    d5f0:	47a0      	blx	r4
    d5f2:	0003      	movs	r3, r0
    d5f4:	000c      	movs	r4, r1
    d5f6:	001d      	movs	r5, r3
    d5f8:	0026      	movs	r6, r4
    d5fa:	4b3f      	ldr	r3, [pc, #252]	; (d6f8 <BrakeLight+0x3c0>)
    d5fc:	881b      	ldrh	r3, [r3, #0]
    d5fe:	001a      	movs	r2, r3
    d600:	4b3f      	ldr	r3, [pc, #252]	; (d700 <BrakeLight+0x3c8>)
    d602:	0010      	movs	r0, r2
    d604:	4798      	blx	r3
    d606:	0002      	movs	r2, r0
    d608:	000b      	movs	r3, r1
    d60a:	4c3e      	ldr	r4, [pc, #248]	; (d704 <BrakeLight+0x3cc>)
    d60c:	0028      	movs	r0, r5
    d60e:	0031      	movs	r1, r6
    d610:	47a0      	blx	r4
    d612:	0003      	movs	r3, r0
    d614:	000c      	movs	r4, r1
    d616:	0019      	movs	r1, r3
    d618:	0022      	movs	r2, r4
    d61a:	4b3b      	ldr	r3, [pc, #236]	; (d708 <BrakeLight+0x3d0>)
    d61c:	0008      	movs	r0, r1
    d61e:	0011      	movs	r1, r2
    d620:	4798      	blx	r3
    d622:	1c03      	adds	r3, r0, #0
    d624:	613b      	str	r3, [r7, #16]
				if(temp_y > (128-(128*((float)deadzone/100.0)))*0.1)
    d626:	4b2a      	ldr	r3, [pc, #168]	; (d6d0 <BrakeLight+0x398>)
    d628:	6978      	ldr	r0, [r7, #20]
    d62a:	4798      	blx	r3
    d62c:	0005      	movs	r5, r0
    d62e:	000e      	movs	r6, r1
    d630:	4b28      	ldr	r3, [pc, #160]	; (d6d4 <BrakeLight+0x39c>)
    d632:	781a      	ldrb	r2, [r3, #0]
    d634:	4b25      	ldr	r3, [pc, #148]	; (d6cc <BrakeLight+0x394>)
    d636:	0010      	movs	r0, r2
    d638:	4798      	blx	r3
    d63a:	1c02      	adds	r2, r0, #0
    d63c:	4b24      	ldr	r3, [pc, #144]	; (d6d0 <BrakeLight+0x398>)
    d63e:	1c10      	adds	r0, r2, #0
    d640:	4798      	blx	r3
    d642:	4c25      	ldr	r4, [pc, #148]	; (d6d8 <BrakeLight+0x3a0>)
    d644:	2200      	movs	r2, #0
    d646:	4b25      	ldr	r3, [pc, #148]	; (d6dc <BrakeLight+0x3a4>)
    d648:	47a0      	blx	r4
    d64a:	0003      	movs	r3, r0
    d64c:	000c      	movs	r4, r1
    d64e:	0018      	movs	r0, r3
    d650:	0021      	movs	r1, r4
    d652:	4c23      	ldr	r4, [pc, #140]	; (d6e0 <BrakeLight+0x3a8>)
    d654:	2200      	movs	r2, #0
    d656:	4b23      	ldr	r3, [pc, #140]	; (d6e4 <BrakeLight+0x3ac>)
    d658:	47a0      	blx	r4
    d65a:	0003      	movs	r3, r0
    d65c:	000c      	movs	r4, r1
    d65e:	001a      	movs	r2, r3
    d660:	0023      	movs	r3, r4
    d662:	4c21      	ldr	r4, [pc, #132]	; (d6e8 <BrakeLight+0x3b0>)
    d664:	2000      	movs	r0, #0
    d666:	491f      	ldr	r1, [pc, #124]	; (d6e4 <BrakeLight+0x3ac>)
    d668:	47a0      	blx	r4
    d66a:	0003      	movs	r3, r0
    d66c:	000c      	movs	r4, r1
    d66e:	0018      	movs	r0, r3
    d670:	0021      	movs	r1, r4
    d672:	4c1b      	ldr	r4, [pc, #108]	; (d6e0 <BrakeLight+0x3a8>)
    d674:	4a29      	ldr	r2, [pc, #164]	; (d71c <BrakeLight+0x3e4>)
    d676:	4b2a      	ldr	r3, [pc, #168]	; (d720 <BrakeLight+0x3e8>)
    d678:	47a0      	blx	r4
    d67a:	0003      	movs	r3, r0
    d67c:	000c      	movs	r4, r1
    d67e:	001a      	movs	r2, r3
    d680:	0023      	movs	r3, r4
    d682:	4c28      	ldr	r4, [pc, #160]	; (d724 <BrakeLight+0x3ec>)
    d684:	0028      	movs	r0, r5
    d686:	0031      	movs	r1, r6
    d688:	47a0      	blx	r4
    d68a:	1e03      	subs	r3, r0, #0
    d68c:	d008      	beq.n	d6a0 <BrakeLight+0x368>
				setRed(brake_temp);
    d68e:	4b1f      	ldr	r3, [pc, #124]	; (d70c <BrakeLight+0x3d4>)
    d690:	6938      	ldr	r0, [r7, #16]
    d692:	4798      	blx	r3
    d694:	0003      	movs	r3, r0
    d696:	b29b      	uxth	r3, r3
    d698:	0018      	movs	r0, r3
    d69a:	4b1d      	ldr	r3, [pc, #116]	; (d710 <BrakeLight+0x3d8>)
    d69c:	4798      	blx	r3
				else
				BlinkTail(0xFFFF, 7);
				break;
    d69e:	e2b5      	b.n	dc0c <BrakeLight+0x8d4>
				BlinkTail(0xFFFF, 7);
    d6a0:	4a1c      	ldr	r2, [pc, #112]	; (d714 <BrakeLight+0x3dc>)
    d6a2:	4b16      	ldr	r3, [pc, #88]	; (d6fc <BrakeLight+0x3c4>)
    d6a4:	1c11      	adds	r1, r2, #0
    d6a6:	0018      	movs	r0, r3
    d6a8:	4b1b      	ldr	r3, [pc, #108]	; (d718 <BrakeLight+0x3e0>)
    d6aa:	4798      	blx	r3
				break;
    d6ac:	e2ae      	b.n	dc0c <BrakeLight+0x8d4>
    d6ae:	46c0      	nop			; (mov r8, r8)
    d6b0:	200003ad 	.word	0x200003ad
    d6b4:	0000df99 	.word	0x0000df99
    d6b8:	200000d6 	.word	0x200000d6
    d6bc:	200000d3 	.word	0x200000d3
    d6c0:	0000dfa5 	.word	0x0000dfa5
    d6c4:	0000ef8d 	.word	0x0000ef8d
    d6c8:	200003ce 	.word	0x200003ce
    d6cc:	0001a379 	.word	0x0001a379
    d6d0:	0001bf15 	.word	0x0001bf15
    d6d4:	200000e4 	.word	0x200000e4
    d6d8:	0001aa25 	.word	0x0001aa25
    d6dc:	40590000 	.word	0x40590000
    d6e0:	0001b28d 	.word	0x0001b28d
    d6e4:	40600000 	.word	0x40600000
    d6e8:	0001b78d 	.word	0x0001b78d
    d6ec:	00019499 	.word	0x00019499
    d6f0:	200003a2 	.word	0x200003a2
    d6f4:	0001c700 	.word	0x0001c700
    d6f8:	200000d0 	.word	0x200000d0
    d6fc:	0000ffff 	.word	0x0000ffff
    d700:	0001be21 	.word	0x0001be21
    d704:	0001a405 	.word	0x0001a405
    d708:	0001bfb9 	.word	0x0001bfb9
    d70c:	000195b1 	.word	0x000195b1
    d710:	0000a561 	.word	0x0000a561
    d714:	40e00000 	.word	0x40e00000
    d718:	0000aa2d 	.word	0x0000aa2d
    d71c:	9999999a 	.word	0x9999999a
    d720:	3fb99999 	.word	0x3fb99999
    d724:	000194c1 	.word	0x000194c1
				case BRAKE_BLINK_FADE:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d728:	4ba6      	ldr	r3, [pc, #664]	; (d9c4 <BrakeLight+0x68c>)
    d72a:	881b      	ldrh	r3, [r3, #0]
    d72c:	001a      	movs	r2, r3
    d72e:	4ba6      	ldr	r3, [pc, #664]	; (d9c8 <BrakeLight+0x690>)
    d730:	1a9a      	subs	r2, r3, r2
    d732:	4ba6      	ldr	r3, [pc, #664]	; (d9cc <BrakeLight+0x694>)
    d734:	0010      	movs	r0, r2
    d736:	4798      	blx	r3
    d738:	0005      	movs	r5, r0
    d73a:	000e      	movs	r6, r1
    d73c:	4ba4      	ldr	r3, [pc, #656]	; (d9d0 <BrakeLight+0x698>)
    d73e:	781a      	ldrb	r2, [r3, #0]
    d740:	4ba4      	ldr	r3, [pc, #656]	; (d9d4 <BrakeLight+0x69c>)
    d742:	0010      	movs	r0, r2
    d744:	4798      	blx	r3
    d746:	1c02      	adds	r2, r0, #0
    d748:	4ba3      	ldr	r3, [pc, #652]	; (d9d8 <BrakeLight+0x6a0>)
    d74a:	1c10      	adds	r0, r2, #0
    d74c:	4798      	blx	r3
    d74e:	4ca3      	ldr	r4, [pc, #652]	; (d9dc <BrakeLight+0x6a4>)
    d750:	2200      	movs	r2, #0
    d752:	4ba3      	ldr	r3, [pc, #652]	; (d9e0 <BrakeLight+0x6a8>)
    d754:	47a0      	blx	r4
    d756:	0003      	movs	r3, r0
    d758:	000c      	movs	r4, r1
    d75a:	0018      	movs	r0, r3
    d75c:	0021      	movs	r1, r4
    d75e:	4ca1      	ldr	r4, [pc, #644]	; (d9e4 <BrakeLight+0x6ac>)
    d760:	2200      	movs	r2, #0
    d762:	4ba1      	ldr	r3, [pc, #644]	; (d9e8 <BrakeLight+0x6b0>)
    d764:	47a0      	blx	r4
    d766:	0003      	movs	r3, r0
    d768:	000c      	movs	r4, r1
    d76a:	001a      	movs	r2, r3
    d76c:	0023      	movs	r3, r4
    d76e:	4c9f      	ldr	r4, [pc, #636]	; (d9ec <BrakeLight+0x6b4>)
    d770:	2000      	movs	r0, #0
    d772:	499d      	ldr	r1, [pc, #628]	; (d9e8 <BrakeLight+0x6b0>)
    d774:	47a0      	blx	r4
    d776:	0003      	movs	r3, r0
    d778:	000c      	movs	r4, r1
    d77a:	001a      	movs	r2, r3
    d77c:	0023      	movs	r3, r4
    d77e:	4c97      	ldr	r4, [pc, #604]	; (d9dc <BrakeLight+0x6a4>)
    d780:	0028      	movs	r0, r5
    d782:	0031      	movs	r1, r6
    d784:	47a0      	blx	r4
    d786:	0003      	movs	r3, r0
    d788:	000c      	movs	r4, r1
    d78a:	001d      	movs	r5, r3
    d78c:	0026      	movs	r6, r4
    d78e:	4b90      	ldr	r3, [pc, #576]	; (d9d0 <BrakeLight+0x698>)
    d790:	781a      	ldrb	r2, [r3, #0]
    d792:	4b90      	ldr	r3, [pc, #576]	; (d9d4 <BrakeLight+0x69c>)
    d794:	0010      	movs	r0, r2
    d796:	4798      	blx	r3
    d798:	1c02      	adds	r2, r0, #0
    d79a:	4b8f      	ldr	r3, [pc, #572]	; (d9d8 <BrakeLight+0x6a0>)
    d79c:	1c10      	adds	r0, r2, #0
    d79e:	4798      	blx	r3
    d7a0:	4c8e      	ldr	r4, [pc, #568]	; (d9dc <BrakeLight+0x6a4>)
    d7a2:	2200      	movs	r2, #0
    d7a4:	4b8e      	ldr	r3, [pc, #568]	; (d9e0 <BrakeLight+0x6a8>)
    d7a6:	47a0      	blx	r4
    d7a8:	0003      	movs	r3, r0
    d7aa:	000c      	movs	r4, r1
    d7ac:	0018      	movs	r0, r3
    d7ae:	0021      	movs	r1, r4
    d7b0:	4c8c      	ldr	r4, [pc, #560]	; (d9e4 <BrakeLight+0x6ac>)
    d7b2:	2200      	movs	r2, #0
    d7b4:	4b8c      	ldr	r3, [pc, #560]	; (d9e8 <BrakeLight+0x6b0>)
    d7b6:	47a0      	blx	r4
    d7b8:	0003      	movs	r3, r0
    d7ba:	000c      	movs	r4, r1
    d7bc:	001a      	movs	r2, r3
    d7be:	0023      	movs	r3, r4
    d7c0:	4c8a      	ldr	r4, [pc, #552]	; (d9ec <BrakeLight+0x6b4>)
    d7c2:	2000      	movs	r0, #0
    d7c4:	4988      	ldr	r1, [pc, #544]	; (d9e8 <BrakeLight+0x6b0>)
    d7c6:	47a0      	blx	r4
    d7c8:	0003      	movs	r3, r0
    d7ca:	000c      	movs	r4, r1
    d7cc:	60bb      	str	r3, [r7, #8]
    d7ce:	60fc      	str	r4, [r7, #12]
    d7d0:	4b81      	ldr	r3, [pc, #516]	; (d9d8 <BrakeLight+0x6a0>)
    d7d2:	6978      	ldr	r0, [r7, #20]
    d7d4:	4798      	blx	r3
    d7d6:	0002      	movs	r2, r0
    d7d8:	000b      	movs	r3, r1
    d7da:	4c84      	ldr	r4, [pc, #528]	; (d9ec <BrakeLight+0x6b4>)
    d7dc:	68b8      	ldr	r0, [r7, #8]
    d7de:	68f9      	ldr	r1, [r7, #12]
    d7e0:	47a0      	blx	r4
    d7e2:	0003      	movs	r3, r0
    d7e4:	000c      	movs	r4, r1
    d7e6:	001a      	movs	r2, r3
    d7e8:	0023      	movs	r3, r4
    d7ea:	4c7e      	ldr	r4, [pc, #504]	; (d9e4 <BrakeLight+0x6ac>)
    d7ec:	0028      	movs	r0, r5
    d7ee:	0031      	movs	r1, r6
    d7f0:	47a0      	blx	r4
    d7f2:	0003      	movs	r3, r0
    d7f4:	000c      	movs	r4, r1
    d7f6:	001d      	movs	r5, r3
    d7f8:	0026      	movs	r6, r4
    d7fa:	4b72      	ldr	r3, [pc, #456]	; (d9c4 <BrakeLight+0x68c>)
    d7fc:	881b      	ldrh	r3, [r3, #0]
    d7fe:	001a      	movs	r2, r3
    d800:	4b72      	ldr	r3, [pc, #456]	; (d9cc <BrakeLight+0x694>)
    d802:	0010      	movs	r0, r2
    d804:	4798      	blx	r3
    d806:	0002      	movs	r2, r0
    d808:	000b      	movs	r3, r1
    d80a:	4c79      	ldr	r4, [pc, #484]	; (d9f0 <BrakeLight+0x6b8>)
    d80c:	0028      	movs	r0, r5
    d80e:	0031      	movs	r1, r6
    d810:	47a0      	blx	r4
    d812:	0003      	movs	r3, r0
    d814:	000c      	movs	r4, r1
    d816:	0019      	movs	r1, r3
    d818:	0022      	movs	r2, r4
    d81a:	4b76      	ldr	r3, [pc, #472]	; (d9f4 <BrakeLight+0x6bc>)
    d81c:	0008      	movs	r0, r1
    d81e:	0011      	movs	r1, r2
    d820:	4798      	blx	r3
    d822:	1c03      	adds	r3, r0, #0
    d824:	613b      	str	r3, [r7, #16]
				if(temp_y > (128-(128*((float)deadzone/100.0)))*0.1)
    d826:	4b6c      	ldr	r3, [pc, #432]	; (d9d8 <BrakeLight+0x6a0>)
    d828:	6978      	ldr	r0, [r7, #20]
    d82a:	4798      	blx	r3
    d82c:	0005      	movs	r5, r0
    d82e:	000e      	movs	r6, r1
    d830:	4b67      	ldr	r3, [pc, #412]	; (d9d0 <BrakeLight+0x698>)
    d832:	781a      	ldrb	r2, [r3, #0]
    d834:	4b67      	ldr	r3, [pc, #412]	; (d9d4 <BrakeLight+0x69c>)
    d836:	0010      	movs	r0, r2
    d838:	4798      	blx	r3
    d83a:	1c02      	adds	r2, r0, #0
    d83c:	4b66      	ldr	r3, [pc, #408]	; (d9d8 <BrakeLight+0x6a0>)
    d83e:	1c10      	adds	r0, r2, #0
    d840:	4798      	blx	r3
    d842:	4c66      	ldr	r4, [pc, #408]	; (d9dc <BrakeLight+0x6a4>)
    d844:	2200      	movs	r2, #0
    d846:	4b66      	ldr	r3, [pc, #408]	; (d9e0 <BrakeLight+0x6a8>)
    d848:	47a0      	blx	r4
    d84a:	0003      	movs	r3, r0
    d84c:	000c      	movs	r4, r1
    d84e:	0018      	movs	r0, r3
    d850:	0021      	movs	r1, r4
    d852:	4c64      	ldr	r4, [pc, #400]	; (d9e4 <BrakeLight+0x6ac>)
    d854:	2200      	movs	r2, #0
    d856:	4b64      	ldr	r3, [pc, #400]	; (d9e8 <BrakeLight+0x6b0>)
    d858:	47a0      	blx	r4
    d85a:	0003      	movs	r3, r0
    d85c:	000c      	movs	r4, r1
    d85e:	001a      	movs	r2, r3
    d860:	0023      	movs	r3, r4
    d862:	4c62      	ldr	r4, [pc, #392]	; (d9ec <BrakeLight+0x6b4>)
    d864:	2000      	movs	r0, #0
    d866:	4960      	ldr	r1, [pc, #384]	; (d9e8 <BrakeLight+0x6b0>)
    d868:	47a0      	blx	r4
    d86a:	0003      	movs	r3, r0
    d86c:	000c      	movs	r4, r1
    d86e:	0018      	movs	r0, r3
    d870:	0021      	movs	r1, r4
    d872:	4c5c      	ldr	r4, [pc, #368]	; (d9e4 <BrakeLight+0x6ac>)
    d874:	4a60      	ldr	r2, [pc, #384]	; (d9f8 <BrakeLight+0x6c0>)
    d876:	4b61      	ldr	r3, [pc, #388]	; (d9fc <BrakeLight+0x6c4>)
    d878:	47a0      	blx	r4
    d87a:	0003      	movs	r3, r0
    d87c:	000c      	movs	r4, r1
    d87e:	001a      	movs	r2, r3
    d880:	0023      	movs	r3, r4
    d882:	4c5f      	ldr	r4, [pc, #380]	; (da00 <BrakeLight+0x6c8>)
    d884:	0028      	movs	r0, r5
    d886:	0031      	movs	r1, r6
    d888:	47a0      	blx	r4
    d88a:	1e03      	subs	r3, r0, #0
    d88c:	d006      	beq.n	d89c <BrakeLight+0x564>
				BlinkTail(0xFFFF, 7);
    d88e:	4a5d      	ldr	r2, [pc, #372]	; (da04 <BrakeLight+0x6cc>)
    d890:	4b4d      	ldr	r3, [pc, #308]	; (d9c8 <BrakeLight+0x690>)
    d892:	1c11      	adds	r1, r2, #0
    d894:	0018      	movs	r0, r3
    d896:	4b5c      	ldr	r3, [pc, #368]	; (da08 <BrakeLight+0x6d0>)
    d898:	4798      	blx	r3
				else
				setRed(brake_temp);
				break;
    d89a:	e1b7      	b.n	dc0c <BrakeLight+0x8d4>
				setRed(brake_temp);
    d89c:	4b5b      	ldr	r3, [pc, #364]	; (da0c <BrakeLight+0x6d4>)
    d89e:	6938      	ldr	r0, [r7, #16]
    d8a0:	4798      	blx	r3
    d8a2:	0003      	movs	r3, r0
    d8a4:	b29b      	uxth	r3, r3
    d8a6:	0018      	movs	r0, r3
    d8a8:	4b59      	ldr	r3, [pc, #356]	; (da10 <BrakeLight+0x6d8>)
    d8aa:	4798      	blx	r3
				break;
    d8ac:	e1ae      	b.n	dc0c <BrakeLight+0x8d4>
				case BRAKE_FADING_BLINK:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d8ae:	4b45      	ldr	r3, [pc, #276]	; (d9c4 <BrakeLight+0x68c>)
    d8b0:	881b      	ldrh	r3, [r3, #0]
    d8b2:	001a      	movs	r2, r3
    d8b4:	4b44      	ldr	r3, [pc, #272]	; (d9c8 <BrakeLight+0x690>)
    d8b6:	1a9a      	subs	r2, r3, r2
    d8b8:	4b44      	ldr	r3, [pc, #272]	; (d9cc <BrakeLight+0x694>)
    d8ba:	0010      	movs	r0, r2
    d8bc:	4798      	blx	r3
    d8be:	0005      	movs	r5, r0
    d8c0:	000e      	movs	r6, r1
    d8c2:	4b43      	ldr	r3, [pc, #268]	; (d9d0 <BrakeLight+0x698>)
    d8c4:	781a      	ldrb	r2, [r3, #0]
    d8c6:	4b43      	ldr	r3, [pc, #268]	; (d9d4 <BrakeLight+0x69c>)
    d8c8:	0010      	movs	r0, r2
    d8ca:	4798      	blx	r3
    d8cc:	1c02      	adds	r2, r0, #0
    d8ce:	4b42      	ldr	r3, [pc, #264]	; (d9d8 <BrakeLight+0x6a0>)
    d8d0:	1c10      	adds	r0, r2, #0
    d8d2:	4798      	blx	r3
    d8d4:	4c41      	ldr	r4, [pc, #260]	; (d9dc <BrakeLight+0x6a4>)
    d8d6:	2200      	movs	r2, #0
    d8d8:	4b41      	ldr	r3, [pc, #260]	; (d9e0 <BrakeLight+0x6a8>)
    d8da:	47a0      	blx	r4
    d8dc:	0003      	movs	r3, r0
    d8de:	000c      	movs	r4, r1
    d8e0:	0018      	movs	r0, r3
    d8e2:	0021      	movs	r1, r4
    d8e4:	4c3f      	ldr	r4, [pc, #252]	; (d9e4 <BrakeLight+0x6ac>)
    d8e6:	2200      	movs	r2, #0
    d8e8:	4b3f      	ldr	r3, [pc, #252]	; (d9e8 <BrakeLight+0x6b0>)
    d8ea:	47a0      	blx	r4
    d8ec:	0003      	movs	r3, r0
    d8ee:	000c      	movs	r4, r1
    d8f0:	001a      	movs	r2, r3
    d8f2:	0023      	movs	r3, r4
    d8f4:	4c3d      	ldr	r4, [pc, #244]	; (d9ec <BrakeLight+0x6b4>)
    d8f6:	2000      	movs	r0, #0
    d8f8:	493b      	ldr	r1, [pc, #236]	; (d9e8 <BrakeLight+0x6b0>)
    d8fa:	47a0      	blx	r4
    d8fc:	0003      	movs	r3, r0
    d8fe:	000c      	movs	r4, r1
    d900:	001a      	movs	r2, r3
    d902:	0023      	movs	r3, r4
    d904:	4c35      	ldr	r4, [pc, #212]	; (d9dc <BrakeLight+0x6a4>)
    d906:	0028      	movs	r0, r5
    d908:	0031      	movs	r1, r6
    d90a:	47a0      	blx	r4
    d90c:	0003      	movs	r3, r0
    d90e:	000c      	movs	r4, r1
    d910:	001d      	movs	r5, r3
    d912:	0026      	movs	r6, r4
    d914:	4b2e      	ldr	r3, [pc, #184]	; (d9d0 <BrakeLight+0x698>)
    d916:	781a      	ldrb	r2, [r3, #0]
    d918:	4b2e      	ldr	r3, [pc, #184]	; (d9d4 <BrakeLight+0x69c>)
    d91a:	0010      	movs	r0, r2
    d91c:	4798      	blx	r3
    d91e:	1c02      	adds	r2, r0, #0
    d920:	4b2d      	ldr	r3, [pc, #180]	; (d9d8 <BrakeLight+0x6a0>)
    d922:	1c10      	adds	r0, r2, #0
    d924:	4798      	blx	r3
    d926:	4c2d      	ldr	r4, [pc, #180]	; (d9dc <BrakeLight+0x6a4>)
    d928:	2200      	movs	r2, #0
    d92a:	4b2d      	ldr	r3, [pc, #180]	; (d9e0 <BrakeLight+0x6a8>)
    d92c:	47a0      	blx	r4
    d92e:	0003      	movs	r3, r0
    d930:	000c      	movs	r4, r1
    d932:	0018      	movs	r0, r3
    d934:	0021      	movs	r1, r4
    d936:	4c2b      	ldr	r4, [pc, #172]	; (d9e4 <BrakeLight+0x6ac>)
    d938:	2200      	movs	r2, #0
    d93a:	4b2b      	ldr	r3, [pc, #172]	; (d9e8 <BrakeLight+0x6b0>)
    d93c:	47a0      	blx	r4
    d93e:	0003      	movs	r3, r0
    d940:	000c      	movs	r4, r1
    d942:	001a      	movs	r2, r3
    d944:	0023      	movs	r3, r4
    d946:	4c29      	ldr	r4, [pc, #164]	; (d9ec <BrakeLight+0x6b4>)
    d948:	2000      	movs	r0, #0
    d94a:	4927      	ldr	r1, [pc, #156]	; (d9e8 <BrakeLight+0x6b0>)
    d94c:	47a0      	blx	r4
    d94e:	0003      	movs	r3, r0
    d950:	000c      	movs	r4, r1
    d952:	60bb      	str	r3, [r7, #8]
    d954:	60fc      	str	r4, [r7, #12]
    d956:	4b20      	ldr	r3, [pc, #128]	; (d9d8 <BrakeLight+0x6a0>)
    d958:	6978      	ldr	r0, [r7, #20]
    d95a:	4798      	blx	r3
    d95c:	0002      	movs	r2, r0
    d95e:	000b      	movs	r3, r1
    d960:	4c22      	ldr	r4, [pc, #136]	; (d9ec <BrakeLight+0x6b4>)
    d962:	68b8      	ldr	r0, [r7, #8]
    d964:	68f9      	ldr	r1, [r7, #12]
    d966:	47a0      	blx	r4
    d968:	0003      	movs	r3, r0
    d96a:	000c      	movs	r4, r1
    d96c:	001a      	movs	r2, r3
    d96e:	0023      	movs	r3, r4
    d970:	4c1c      	ldr	r4, [pc, #112]	; (d9e4 <BrakeLight+0x6ac>)
    d972:	0028      	movs	r0, r5
    d974:	0031      	movs	r1, r6
    d976:	47a0      	blx	r4
    d978:	0003      	movs	r3, r0
    d97a:	000c      	movs	r4, r1
    d97c:	001d      	movs	r5, r3
    d97e:	0026      	movs	r6, r4
    d980:	4b10      	ldr	r3, [pc, #64]	; (d9c4 <BrakeLight+0x68c>)
    d982:	881b      	ldrh	r3, [r3, #0]
    d984:	001a      	movs	r2, r3
    d986:	4b11      	ldr	r3, [pc, #68]	; (d9cc <BrakeLight+0x694>)
    d988:	0010      	movs	r0, r2
    d98a:	4798      	blx	r3
    d98c:	0002      	movs	r2, r0
    d98e:	000b      	movs	r3, r1
    d990:	4c17      	ldr	r4, [pc, #92]	; (d9f0 <BrakeLight+0x6b8>)
    d992:	0028      	movs	r0, r5
    d994:	0031      	movs	r1, r6
    d996:	47a0      	blx	r4
    d998:	0003      	movs	r3, r0
    d99a:	000c      	movs	r4, r1
    d99c:	0019      	movs	r1, r3
    d99e:	0022      	movs	r2, r4
    d9a0:	4b14      	ldr	r3, [pc, #80]	; (d9f4 <BrakeLight+0x6bc>)
    d9a2:	0008      	movs	r0, r1
    d9a4:	0011      	movs	r1, r2
    d9a6:	4798      	blx	r3
    d9a8:	1c03      	adds	r3, r0, #0
    d9aa:	613b      	str	r3, [r7, #16]
				BlinkTail(brake_temp, 7);
    d9ac:	4b17      	ldr	r3, [pc, #92]	; (da0c <BrakeLight+0x6d4>)
    d9ae:	6938      	ldr	r0, [r7, #16]
    d9b0:	4798      	blx	r3
    d9b2:	0003      	movs	r3, r0
    d9b4:	b29b      	uxth	r3, r3
    d9b6:	4a13      	ldr	r2, [pc, #76]	; (da04 <BrakeLight+0x6cc>)
    d9b8:	1c11      	adds	r1, r2, #0
    d9ba:	0018      	movs	r0, r3
    d9bc:	4b12      	ldr	r3, [pc, #72]	; (da08 <BrakeLight+0x6d0>)
    d9be:	4798      	blx	r3
				break;
    d9c0:	e124      	b.n	dc0c <BrakeLight+0x8d4>
    d9c2:	46c0      	nop			; (mov r8, r8)
    d9c4:	200000d0 	.word	0x200000d0
    d9c8:	0000ffff 	.word	0x0000ffff
    d9cc:	0001be21 	.word	0x0001be21
    d9d0:	200000e4 	.word	0x200000e4
    d9d4:	0001a379 	.word	0x0001a379
    d9d8:	0001bf15 	.word	0x0001bf15
    d9dc:	0001aa25 	.word	0x0001aa25
    d9e0:	40590000 	.word	0x40590000
    d9e4:	0001b28d 	.word	0x0001b28d
    d9e8:	40600000 	.word	0x40600000
    d9ec:	0001b78d 	.word	0x0001b78d
    d9f0:	0001a405 	.word	0x0001a405
    d9f4:	0001bfb9 	.word	0x0001bfb9
    d9f8:	9999999a 	.word	0x9999999a
    d9fc:	3fb99999 	.word	0x3fb99999
    da00:	000194c1 	.word	0x000194c1
    da04:	40e00000 	.word	0x40e00000
    da08:	0000aa2d 	.word	0x0000aa2d
    da0c:	000195b1 	.word	0x000195b1
    da10:	0000a561 	.word	0x0000a561
				case BRAKE_PACED_BLINK:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    da14:	4b82      	ldr	r3, [pc, #520]	; (dc20 <BrakeLight+0x8e8>)
    da16:	881b      	ldrh	r3, [r3, #0]
    da18:	001a      	movs	r2, r3
    da1a:	4b82      	ldr	r3, [pc, #520]	; (dc24 <BrakeLight+0x8ec>)
    da1c:	1a9a      	subs	r2, r3, r2
    da1e:	4b82      	ldr	r3, [pc, #520]	; (dc28 <BrakeLight+0x8f0>)
    da20:	0010      	movs	r0, r2
    da22:	4798      	blx	r3
    da24:	0005      	movs	r5, r0
    da26:	000e      	movs	r6, r1
    da28:	4b80      	ldr	r3, [pc, #512]	; (dc2c <BrakeLight+0x8f4>)
    da2a:	781a      	ldrb	r2, [r3, #0]
    da2c:	4b80      	ldr	r3, [pc, #512]	; (dc30 <BrakeLight+0x8f8>)
    da2e:	0010      	movs	r0, r2
    da30:	4798      	blx	r3
    da32:	1c02      	adds	r2, r0, #0
    da34:	4b7f      	ldr	r3, [pc, #508]	; (dc34 <BrakeLight+0x8fc>)
    da36:	1c10      	adds	r0, r2, #0
    da38:	4798      	blx	r3
    da3a:	4c7f      	ldr	r4, [pc, #508]	; (dc38 <BrakeLight+0x900>)
    da3c:	2200      	movs	r2, #0
    da3e:	4b7f      	ldr	r3, [pc, #508]	; (dc3c <BrakeLight+0x904>)
    da40:	47a0      	blx	r4
    da42:	0003      	movs	r3, r0
    da44:	000c      	movs	r4, r1
    da46:	0018      	movs	r0, r3
    da48:	0021      	movs	r1, r4
    da4a:	4c7d      	ldr	r4, [pc, #500]	; (dc40 <BrakeLight+0x908>)
    da4c:	2200      	movs	r2, #0
    da4e:	4b7d      	ldr	r3, [pc, #500]	; (dc44 <BrakeLight+0x90c>)
    da50:	47a0      	blx	r4
    da52:	0003      	movs	r3, r0
    da54:	000c      	movs	r4, r1
    da56:	001a      	movs	r2, r3
    da58:	0023      	movs	r3, r4
    da5a:	4c7b      	ldr	r4, [pc, #492]	; (dc48 <BrakeLight+0x910>)
    da5c:	2000      	movs	r0, #0
    da5e:	4979      	ldr	r1, [pc, #484]	; (dc44 <BrakeLight+0x90c>)
    da60:	47a0      	blx	r4
    da62:	0003      	movs	r3, r0
    da64:	000c      	movs	r4, r1
    da66:	001a      	movs	r2, r3
    da68:	0023      	movs	r3, r4
    da6a:	4c73      	ldr	r4, [pc, #460]	; (dc38 <BrakeLight+0x900>)
    da6c:	0028      	movs	r0, r5
    da6e:	0031      	movs	r1, r6
    da70:	47a0      	blx	r4
    da72:	0003      	movs	r3, r0
    da74:	000c      	movs	r4, r1
    da76:	001d      	movs	r5, r3
    da78:	0026      	movs	r6, r4
    da7a:	4b6c      	ldr	r3, [pc, #432]	; (dc2c <BrakeLight+0x8f4>)
    da7c:	781a      	ldrb	r2, [r3, #0]
    da7e:	4b6c      	ldr	r3, [pc, #432]	; (dc30 <BrakeLight+0x8f8>)
    da80:	0010      	movs	r0, r2
    da82:	4798      	blx	r3
    da84:	1c02      	adds	r2, r0, #0
    da86:	4b6b      	ldr	r3, [pc, #428]	; (dc34 <BrakeLight+0x8fc>)
    da88:	1c10      	adds	r0, r2, #0
    da8a:	4798      	blx	r3
    da8c:	4c6a      	ldr	r4, [pc, #424]	; (dc38 <BrakeLight+0x900>)
    da8e:	2200      	movs	r2, #0
    da90:	4b6a      	ldr	r3, [pc, #424]	; (dc3c <BrakeLight+0x904>)
    da92:	47a0      	blx	r4
    da94:	0003      	movs	r3, r0
    da96:	000c      	movs	r4, r1
    da98:	0018      	movs	r0, r3
    da9a:	0021      	movs	r1, r4
    da9c:	4c68      	ldr	r4, [pc, #416]	; (dc40 <BrakeLight+0x908>)
    da9e:	2200      	movs	r2, #0
    daa0:	4b68      	ldr	r3, [pc, #416]	; (dc44 <BrakeLight+0x90c>)
    daa2:	47a0      	blx	r4
    daa4:	0003      	movs	r3, r0
    daa6:	000c      	movs	r4, r1
    daa8:	001a      	movs	r2, r3
    daaa:	0023      	movs	r3, r4
    daac:	4c66      	ldr	r4, [pc, #408]	; (dc48 <BrakeLight+0x910>)
    daae:	2000      	movs	r0, #0
    dab0:	4964      	ldr	r1, [pc, #400]	; (dc44 <BrakeLight+0x90c>)
    dab2:	47a0      	blx	r4
    dab4:	0003      	movs	r3, r0
    dab6:	000c      	movs	r4, r1
    dab8:	60bb      	str	r3, [r7, #8]
    daba:	60fc      	str	r4, [r7, #12]
    dabc:	4b5d      	ldr	r3, [pc, #372]	; (dc34 <BrakeLight+0x8fc>)
    dabe:	6978      	ldr	r0, [r7, #20]
    dac0:	4798      	blx	r3
    dac2:	0002      	movs	r2, r0
    dac4:	000b      	movs	r3, r1
    dac6:	4c60      	ldr	r4, [pc, #384]	; (dc48 <BrakeLight+0x910>)
    dac8:	68b8      	ldr	r0, [r7, #8]
    daca:	68f9      	ldr	r1, [r7, #12]
    dacc:	47a0      	blx	r4
    dace:	0003      	movs	r3, r0
    dad0:	000c      	movs	r4, r1
    dad2:	001a      	movs	r2, r3
    dad4:	0023      	movs	r3, r4
    dad6:	4c5a      	ldr	r4, [pc, #360]	; (dc40 <BrakeLight+0x908>)
    dad8:	0028      	movs	r0, r5
    dada:	0031      	movs	r1, r6
    dadc:	47a0      	blx	r4
    dade:	0003      	movs	r3, r0
    dae0:	000c      	movs	r4, r1
    dae2:	001d      	movs	r5, r3
    dae4:	0026      	movs	r6, r4
    dae6:	4b4e      	ldr	r3, [pc, #312]	; (dc20 <BrakeLight+0x8e8>)
    dae8:	881b      	ldrh	r3, [r3, #0]
    daea:	001a      	movs	r2, r3
    daec:	4b4e      	ldr	r3, [pc, #312]	; (dc28 <BrakeLight+0x8f0>)
    daee:	0010      	movs	r0, r2
    daf0:	4798      	blx	r3
    daf2:	0002      	movs	r2, r0
    daf4:	000b      	movs	r3, r1
    daf6:	4c55      	ldr	r4, [pc, #340]	; (dc4c <BrakeLight+0x914>)
    daf8:	0028      	movs	r0, r5
    dafa:	0031      	movs	r1, r6
    dafc:	47a0      	blx	r4
    dafe:	0003      	movs	r3, r0
    db00:	000c      	movs	r4, r1
    db02:	0019      	movs	r1, r3
    db04:	0022      	movs	r2, r4
    db06:	4b52      	ldr	r3, [pc, #328]	; (dc50 <BrakeLight+0x918>)
    db08:	0008      	movs	r0, r1
    db0a:	0011      	movs	r1, r2
    db0c:	4798      	blx	r3
    db0e:	1c03      	adds	r3, r0, #0
    db10:	613b      	str	r3, [r7, #16]
				BlinkTail(brake_temp, (3+(7/(128-(128*((float)deadzone/100.0))))*((128-(128*((float)deadzone/100.0)))-temp_y)));
    db12:	4b50      	ldr	r3, [pc, #320]	; (dc54 <BrakeLight+0x91c>)
    db14:	6938      	ldr	r0, [r7, #16]
    db16:	4798      	blx	r3
    db18:	0003      	movs	r3, r0
    db1a:	b29d      	uxth	r5, r3
    db1c:	4b43      	ldr	r3, [pc, #268]	; (dc2c <BrakeLight+0x8f4>)
    db1e:	781a      	ldrb	r2, [r3, #0]
    db20:	4b43      	ldr	r3, [pc, #268]	; (dc30 <BrakeLight+0x8f8>)
    db22:	0010      	movs	r0, r2
    db24:	4798      	blx	r3
    db26:	1c02      	adds	r2, r0, #0
    db28:	4b42      	ldr	r3, [pc, #264]	; (dc34 <BrakeLight+0x8fc>)
    db2a:	1c10      	adds	r0, r2, #0
    db2c:	4798      	blx	r3
    db2e:	4c42      	ldr	r4, [pc, #264]	; (dc38 <BrakeLight+0x900>)
    db30:	2200      	movs	r2, #0
    db32:	4b42      	ldr	r3, [pc, #264]	; (dc3c <BrakeLight+0x904>)
    db34:	47a0      	blx	r4
    db36:	0003      	movs	r3, r0
    db38:	000c      	movs	r4, r1
    db3a:	0018      	movs	r0, r3
    db3c:	0021      	movs	r1, r4
    db3e:	4c40      	ldr	r4, [pc, #256]	; (dc40 <BrakeLight+0x908>)
    db40:	2200      	movs	r2, #0
    db42:	4b40      	ldr	r3, [pc, #256]	; (dc44 <BrakeLight+0x90c>)
    db44:	47a0      	blx	r4
    db46:	0003      	movs	r3, r0
    db48:	000c      	movs	r4, r1
    db4a:	001a      	movs	r2, r3
    db4c:	0023      	movs	r3, r4
    db4e:	4c3e      	ldr	r4, [pc, #248]	; (dc48 <BrakeLight+0x910>)
    db50:	2000      	movs	r0, #0
    db52:	493c      	ldr	r1, [pc, #240]	; (dc44 <BrakeLight+0x90c>)
    db54:	47a0      	blx	r4
    db56:	0003      	movs	r3, r0
    db58:	000c      	movs	r4, r1
    db5a:	001a      	movs	r2, r3
    db5c:	0023      	movs	r3, r4
    db5e:	4c36      	ldr	r4, [pc, #216]	; (dc38 <BrakeLight+0x900>)
    db60:	2000      	movs	r0, #0
    db62:	493d      	ldr	r1, [pc, #244]	; (dc58 <BrakeLight+0x920>)
    db64:	47a0      	blx	r4
    db66:	0003      	movs	r3, r0
    db68:	000c      	movs	r4, r1
    db6a:	60bb      	str	r3, [r7, #8]
    db6c:	60fc      	str	r4, [r7, #12]
    db6e:	4b2f      	ldr	r3, [pc, #188]	; (dc2c <BrakeLight+0x8f4>)
    db70:	781a      	ldrb	r2, [r3, #0]
    db72:	4b2f      	ldr	r3, [pc, #188]	; (dc30 <BrakeLight+0x8f8>)
    db74:	0010      	movs	r0, r2
    db76:	4798      	blx	r3
    db78:	1c02      	adds	r2, r0, #0
    db7a:	4b2e      	ldr	r3, [pc, #184]	; (dc34 <BrakeLight+0x8fc>)
    db7c:	1c10      	adds	r0, r2, #0
    db7e:	4798      	blx	r3
    db80:	4c2d      	ldr	r4, [pc, #180]	; (dc38 <BrakeLight+0x900>)
    db82:	2200      	movs	r2, #0
    db84:	4b2d      	ldr	r3, [pc, #180]	; (dc3c <BrakeLight+0x904>)
    db86:	47a0      	blx	r4
    db88:	0003      	movs	r3, r0
    db8a:	000c      	movs	r4, r1
    db8c:	0018      	movs	r0, r3
    db8e:	0021      	movs	r1, r4
    db90:	4c2b      	ldr	r4, [pc, #172]	; (dc40 <BrakeLight+0x908>)
    db92:	2200      	movs	r2, #0
    db94:	4b2b      	ldr	r3, [pc, #172]	; (dc44 <BrakeLight+0x90c>)
    db96:	47a0      	blx	r4
    db98:	0003      	movs	r3, r0
    db9a:	000c      	movs	r4, r1
    db9c:	001a      	movs	r2, r3
    db9e:	0023      	movs	r3, r4
    dba0:	4c29      	ldr	r4, [pc, #164]	; (dc48 <BrakeLight+0x910>)
    dba2:	2000      	movs	r0, #0
    dba4:	4927      	ldr	r1, [pc, #156]	; (dc44 <BrakeLight+0x90c>)
    dba6:	47a0      	blx	r4
    dba8:	0003      	movs	r3, r0
    dbaa:	000c      	movs	r4, r1
    dbac:	603b      	str	r3, [r7, #0]
    dbae:	607c      	str	r4, [r7, #4]
    dbb0:	4b20      	ldr	r3, [pc, #128]	; (dc34 <BrakeLight+0x8fc>)
    dbb2:	6978      	ldr	r0, [r7, #20]
    dbb4:	4798      	blx	r3
    dbb6:	0002      	movs	r2, r0
    dbb8:	000b      	movs	r3, r1
    dbba:	4c23      	ldr	r4, [pc, #140]	; (dc48 <BrakeLight+0x910>)
    dbbc:	6838      	ldr	r0, [r7, #0]
    dbbe:	6879      	ldr	r1, [r7, #4]
    dbc0:	47a0      	blx	r4
    dbc2:	0003      	movs	r3, r0
    dbc4:	000c      	movs	r4, r1
    dbc6:	001a      	movs	r2, r3
    dbc8:	0023      	movs	r3, r4
    dbca:	4c1d      	ldr	r4, [pc, #116]	; (dc40 <BrakeLight+0x908>)
    dbcc:	68b8      	ldr	r0, [r7, #8]
    dbce:	68f9      	ldr	r1, [r7, #12]
    dbd0:	47a0      	blx	r4
    dbd2:	0003      	movs	r3, r0
    dbd4:	000c      	movs	r4, r1
    dbd6:	0018      	movs	r0, r3
    dbd8:	0021      	movs	r1, r4
    dbda:	4c1c      	ldr	r4, [pc, #112]	; (dc4c <BrakeLight+0x914>)
    dbdc:	2200      	movs	r2, #0
    dbde:	4b1f      	ldr	r3, [pc, #124]	; (dc5c <BrakeLight+0x924>)
    dbe0:	47a0      	blx	r4
    dbe2:	0003      	movs	r3, r0
    dbe4:	000c      	movs	r4, r1
    dbe6:	0019      	movs	r1, r3
    dbe8:	0022      	movs	r2, r4
    dbea:	4b19      	ldr	r3, [pc, #100]	; (dc50 <BrakeLight+0x918>)
    dbec:	0008      	movs	r0, r1
    dbee:	0011      	movs	r1, r2
    dbf0:	4798      	blx	r3
    dbf2:	1c03      	adds	r3, r0, #0
    dbf4:	1c19      	adds	r1, r3, #0
    dbf6:	0028      	movs	r0, r5
    dbf8:	4b19      	ldr	r3, [pc, #100]	; (dc60 <BrakeLight+0x928>)
    dbfa:	4798      	blx	r3
				break;
    dbfc:	46c0      	nop			; (mov r8, r8)
    dbfe:	e005      	b.n	dc0c <BrakeLight+0x8d4>
			}
		}
		else {
			setRed(brake_offset);
    dc00:	4b07      	ldr	r3, [pc, #28]	; (dc20 <BrakeLight+0x8e8>)
    dc02:	881b      	ldrh	r3, [r3, #0]
    dc04:	0018      	movs	r0, r3
    dc06:	4b17      	ldr	r3, [pc, #92]	; (dc64 <BrakeLight+0x92c>)
    dc08:	4798      	blx	r3
	if(((HEADLIGHTS && lightControlHead() && LIGHTS_ON) | (BRAKE_ALWAYS_ON)) && sensorControl() && !is_standby_active()){
    dc0a:	e004      	b.n	dc16 <BrakeLight+0x8de>
    dc0c:	e003      	b.n	dc16 <BrakeLight+0x8de>
		}
	}
	else{
		setRed(0);
    dc0e:	2000      	movs	r0, #0
    dc10:	4b14      	ldr	r3, [pc, #80]	; (dc64 <BrakeLight+0x92c>)
    dc12:	4798      	blx	r3
	}
}
    dc14:	e000      	b.n	dc18 <BrakeLight+0x8e0>
	if(((HEADLIGHTS && lightControlHead() && LIGHTS_ON) | (BRAKE_ALWAYS_ON)) && sensorControl() && !is_standby_active()){
    dc16:	46c0      	nop			; (mov r8, r8)
}
    dc18:	46c0      	nop			; (mov r8, r8)
    dc1a:	46bd      	mov	sp, r7
    dc1c:	b007      	add	sp, #28
    dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc20:	200000d0 	.word	0x200000d0
    dc24:	0000ffff 	.word	0x0000ffff
    dc28:	0001be21 	.word	0x0001be21
    dc2c:	200000e4 	.word	0x200000e4
    dc30:	0001a379 	.word	0x0001a379
    dc34:	0001bf15 	.word	0x0001bf15
    dc38:	0001aa25 	.word	0x0001aa25
    dc3c:	40590000 	.word	0x40590000
    dc40:	0001b28d 	.word	0x0001b28d
    dc44:	40600000 	.word	0x40600000
    dc48:	0001b78d 	.word	0x0001b78d
    dc4c:	0001a405 	.word	0x0001a405
    dc50:	0001bfb9 	.word	0x0001bfb9
    dc54:	000195b1 	.word	0x000195b1
    dc58:	401c0000 	.word	0x401c0000
    dc5c:	40080000 	.word	0x40080000
    dc60:	0000aa2d 	.word	0x0000aa2d
    dc64:	0000a561 	.word	0x0000a561

0000dc68 <HeadLight>:

#define  BRIGHTS_TIMEOUT 600000 // 10min
void HeadLight(){
    dc68:	b580      	push	{r7, lr}
    dc6a:	af00      	add	r7, sp, #0
	static uint32_t brights_timer = 0;
	
	if(HEADLIGHTS && lightControlHead() && sensorControl() && LIGHTS_ON && !is_standby_active()){
    dc6c:	4b86      	ldr	r3, [pc, #536]	; (de88 <HeadLight+0x220>)
    dc6e:	781b      	ldrb	r3, [r3, #0]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d100      	bne.n	dc76 <HeadLight+0xe>
    dc74:	e102      	b.n	de7c <HeadLight+0x214>
    dc76:	4b85      	ldr	r3, [pc, #532]	; (de8c <HeadLight+0x224>)
    dc78:	4798      	blx	r3
    dc7a:	1e03      	subs	r3, r0, #0
    dc7c:	d100      	bne.n	dc80 <HeadLight+0x18>
    dc7e:	e0fd      	b.n	de7c <HeadLight+0x214>
    dc80:	4b83      	ldr	r3, [pc, #524]	; (de90 <HeadLight+0x228>)
    dc82:	4798      	blx	r3
    dc84:	1e03      	subs	r3, r0, #0
    dc86:	d100      	bne.n	dc8a <HeadLight+0x22>
    dc88:	e0f8      	b.n	de7c <HeadLight+0x214>
    dc8a:	4b82      	ldr	r3, [pc, #520]	; (de94 <HeadLight+0x22c>)
    dc8c:	781b      	ldrb	r3, [r3, #0]
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d100      	bne.n	dc94 <HeadLight+0x2c>
    dc92:	e0f3      	b.n	de7c <HeadLight+0x214>
    dc94:	4b80      	ldr	r3, [pc, #512]	; (de98 <HeadLight+0x230>)
    dc96:	4798      	blx	r3
    dc98:	0003      	movs	r3, r0
    dc9a:	001a      	movs	r2, r3
    dc9c:	2301      	movs	r3, #1
    dc9e:	4053      	eors	r3, r2
    dca0:	b2db      	uxtb	r3, r3
    dca2:	2b00      	cmp	r3, #0
    dca4:	d100      	bne.n	dca8 <HeadLight+0x40>
    dca6:	e0e9      	b.n	de7c <HeadLight+0x214>
		if(BRIGHTS_ENABLED){
    dca8:	4b7c      	ldr	r3, [pc, #496]	; (de9c <HeadLight+0x234>)
    dcaa:	781b      	ldrb	r3, [r3, #0]
    dcac:	2b00      	cmp	r3, #0
    dcae:	d100      	bne.n	dcb2 <HeadLight+0x4a>
    dcb0:	e0df      	b.n	de72 <HeadLight+0x20a>
			if(BRIGHTS && IMU_temp > 60.0){
    dcb2:	4b7b      	ldr	r3, [pc, #492]	; (dea0 <HeadLight+0x238>)
    dcb4:	781b      	ldrb	r3, [r3, #0]
    dcb6:	2b00      	cmp	r3, #0
    dcb8:	d100      	bne.n	dcbc <HeadLight+0x54>
    dcba:	e0b1      	b.n	de20 <HeadLight+0x1b8>
    dcbc:	4b79      	ldr	r3, [pc, #484]	; (dea4 <HeadLight+0x23c>)
    dcbe:	681a      	ldr	r2, [r3, #0]
    dcc0:	4b79      	ldr	r3, [pc, #484]	; (dea8 <HeadLight+0x240>)
    dcc2:	497a      	ldr	r1, [pc, #488]	; (deac <HeadLight+0x244>)
    dcc4:	1c10      	adds	r0, r2, #0
    dcc6:	4798      	blx	r3
    dcc8:	1e03      	subs	r3, r0, #0
    dcca:	d100      	bne.n	dcce <HeadLight+0x66>
    dccc:	e0a8      	b.n	de20 <HeadLight+0x1b8>
				setWhite(0xFFFF*((float)lowbeam_level/100));
    dcce:	4b78      	ldr	r3, [pc, #480]	; (deb0 <HeadLight+0x248>)
    dcd0:	781a      	ldrb	r2, [r3, #0]
    dcd2:	4b78      	ldr	r3, [pc, #480]	; (deb4 <HeadLight+0x24c>)
    dcd4:	0010      	movs	r0, r2
    dcd6:	4798      	blx	r3
    dcd8:	1c02      	adds	r2, r0, #0
    dcda:	4b77      	ldr	r3, [pc, #476]	; (deb8 <HeadLight+0x250>)
    dcdc:	4977      	ldr	r1, [pc, #476]	; (debc <HeadLight+0x254>)
    dcde:	1c10      	adds	r0, r2, #0
    dce0:	4798      	blx	r3
    dce2:	1c03      	adds	r3, r0, #0
    dce4:	1c1a      	adds	r2, r3, #0
    dce6:	4b76      	ldr	r3, [pc, #472]	; (dec0 <HeadLight+0x258>)
    dce8:	4976      	ldr	r1, [pc, #472]	; (dec4 <HeadLight+0x25c>)
    dcea:	1c10      	adds	r0, r2, #0
    dcec:	4798      	blx	r3
    dcee:	1c03      	adds	r3, r0, #0
    dcf0:	1c1a      	adds	r2, r3, #0
    dcf2:	4b75      	ldr	r3, [pc, #468]	; (dec8 <HeadLight+0x260>)
    dcf4:	1c10      	adds	r0, r2, #0
    dcf6:	4798      	blx	r3
    dcf8:	0003      	movs	r3, r0
    dcfa:	b29b      	uxth	r3, r3
    dcfc:	0018      	movs	r0, r3
    dcfe:	4b73      	ldr	r3, [pc, #460]	; (decc <HeadLight+0x264>)
    dd00:	4798      	blx	r3
				brights_timer = millis();
    dd02:	4b73      	ldr	r3, [pc, #460]	; (ded0 <HeadLight+0x268>)
    dd04:	4798      	blx	r3
    dd06:	0002      	movs	r2, r0
    dd08:	4b72      	ldr	r3, [pc, #456]	; (ded4 <HeadLight+0x26c>)
    dd0a:	601a      	str	r2, [r3, #0]
				while(!check_timer_expired(&brights_timer,500)){}
    dd0c:	46c0      	nop			; (mov r8, r8)
    dd0e:	23fa      	movs	r3, #250	; 0xfa
    dd10:	005a      	lsls	r2, r3, #1
    dd12:	4b70      	ldr	r3, [pc, #448]	; (ded4 <HeadLight+0x26c>)
    dd14:	0011      	movs	r1, r2
    dd16:	0018      	movs	r0, r3
    dd18:	4b6f      	ldr	r3, [pc, #444]	; (ded8 <HeadLight+0x270>)
    dd1a:	4798      	blx	r3
    dd1c:	0003      	movs	r3, r0
    dd1e:	001a      	movs	r2, r3
    dd20:	2301      	movs	r3, #1
    dd22:	4053      	eors	r3, r2
    dd24:	b2db      	uxtb	r3, r3
    dd26:	2b00      	cmp	r3, #0
    dd28:	d1f1      	bne.n	dd0e <HeadLight+0xa6>
				setWhite(0xFFFF); // 100%
    dd2a:	4b6c      	ldr	r3, [pc, #432]	; (dedc <HeadLight+0x274>)
    dd2c:	0018      	movs	r0, r3
    dd2e:	4b67      	ldr	r3, [pc, #412]	; (decc <HeadLight+0x264>)
    dd30:	4798      	blx	r3
				brights_timer = millis();
    dd32:	4b67      	ldr	r3, [pc, #412]	; (ded0 <HeadLight+0x268>)
    dd34:	4798      	blx	r3
    dd36:	0002      	movs	r2, r0
    dd38:	4b66      	ldr	r3, [pc, #408]	; (ded4 <HeadLight+0x26c>)
    dd3a:	601a      	str	r2, [r3, #0]
				while(!check_timer_expired(&brights_timer,1000)){}
    dd3c:	46c0      	nop			; (mov r8, r8)
    dd3e:	23fa      	movs	r3, #250	; 0xfa
    dd40:	009a      	lsls	r2, r3, #2
    dd42:	4b64      	ldr	r3, [pc, #400]	; (ded4 <HeadLight+0x26c>)
    dd44:	0011      	movs	r1, r2
    dd46:	0018      	movs	r0, r3
    dd48:	4b63      	ldr	r3, [pc, #396]	; (ded8 <HeadLight+0x270>)
    dd4a:	4798      	blx	r3
    dd4c:	0003      	movs	r3, r0
    dd4e:	001a      	movs	r2, r3
    dd50:	2301      	movs	r3, #1
    dd52:	4053      	eors	r3, r2
    dd54:	b2db      	uxtb	r3, r3
    dd56:	2b00      	cmp	r3, #0
    dd58:	d1f1      	bne.n	dd3e <HeadLight+0xd6>
				setWhite(0xFFFF*((float)lowbeam_level/100));
    dd5a:	4b55      	ldr	r3, [pc, #340]	; (deb0 <HeadLight+0x248>)
    dd5c:	781a      	ldrb	r2, [r3, #0]
    dd5e:	4b55      	ldr	r3, [pc, #340]	; (deb4 <HeadLight+0x24c>)
    dd60:	0010      	movs	r0, r2
    dd62:	4798      	blx	r3
    dd64:	1c02      	adds	r2, r0, #0
    dd66:	4b54      	ldr	r3, [pc, #336]	; (deb8 <HeadLight+0x250>)
    dd68:	4954      	ldr	r1, [pc, #336]	; (debc <HeadLight+0x254>)
    dd6a:	1c10      	adds	r0, r2, #0
    dd6c:	4798      	blx	r3
    dd6e:	1c03      	adds	r3, r0, #0
    dd70:	1c1a      	adds	r2, r3, #0
    dd72:	4b53      	ldr	r3, [pc, #332]	; (dec0 <HeadLight+0x258>)
    dd74:	4953      	ldr	r1, [pc, #332]	; (dec4 <HeadLight+0x25c>)
    dd76:	1c10      	adds	r0, r2, #0
    dd78:	4798      	blx	r3
    dd7a:	1c03      	adds	r3, r0, #0
    dd7c:	1c1a      	adds	r2, r3, #0
    dd7e:	4b52      	ldr	r3, [pc, #328]	; (dec8 <HeadLight+0x260>)
    dd80:	1c10      	adds	r0, r2, #0
    dd82:	4798      	blx	r3
    dd84:	0003      	movs	r3, r0
    dd86:	b29b      	uxth	r3, r3
    dd88:	0018      	movs	r0, r3
    dd8a:	4b50      	ldr	r3, [pc, #320]	; (decc <HeadLight+0x264>)
    dd8c:	4798      	blx	r3
				brights_timer = millis();
    dd8e:	4b50      	ldr	r3, [pc, #320]	; (ded0 <HeadLight+0x268>)
    dd90:	4798      	blx	r3
    dd92:	0002      	movs	r2, r0
    dd94:	4b4f      	ldr	r3, [pc, #316]	; (ded4 <HeadLight+0x26c>)
    dd96:	601a      	str	r2, [r3, #0]
				while(!check_timer_expired(&brights_timer,500)){}
    dd98:	46c0      	nop			; (mov r8, r8)
    dd9a:	23fa      	movs	r3, #250	; 0xfa
    dd9c:	005a      	lsls	r2, r3, #1
    dd9e:	4b4d      	ldr	r3, [pc, #308]	; (ded4 <HeadLight+0x26c>)
    dda0:	0011      	movs	r1, r2
    dda2:	0018      	movs	r0, r3
    dda4:	4b4c      	ldr	r3, [pc, #304]	; (ded8 <HeadLight+0x270>)
    dda6:	4798      	blx	r3
    dda8:	0003      	movs	r3, r0
    ddaa:	001a      	movs	r2, r3
    ddac:	2301      	movs	r3, #1
    ddae:	4053      	eors	r3, r2
    ddb0:	b2db      	uxtb	r3, r3
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d1f1      	bne.n	dd9a <HeadLight+0x132>
				setWhite(0xFFFF); // 100%
    ddb6:	4b49      	ldr	r3, [pc, #292]	; (dedc <HeadLight+0x274>)
    ddb8:	0018      	movs	r0, r3
    ddba:	4b44      	ldr	r3, [pc, #272]	; (decc <HeadLight+0x264>)
    ddbc:	4798      	blx	r3
				brights_timer = millis();
    ddbe:	4b44      	ldr	r3, [pc, #272]	; (ded0 <HeadLight+0x268>)
    ddc0:	4798      	blx	r3
    ddc2:	0002      	movs	r2, r0
    ddc4:	4b43      	ldr	r3, [pc, #268]	; (ded4 <HeadLight+0x26c>)
    ddc6:	601a      	str	r2, [r3, #0]
				while(!check_timer_expired(&brights_timer,1000)){}
    ddc8:	46c0      	nop			; (mov r8, r8)
    ddca:	23fa      	movs	r3, #250	; 0xfa
    ddcc:	009a      	lsls	r2, r3, #2
    ddce:	4b41      	ldr	r3, [pc, #260]	; (ded4 <HeadLight+0x26c>)
    ddd0:	0011      	movs	r1, r2
    ddd2:	0018      	movs	r0, r3
    ddd4:	4b40      	ldr	r3, [pc, #256]	; (ded8 <HeadLight+0x270>)
    ddd6:	4798      	blx	r3
    ddd8:	0003      	movs	r3, r0
    ddda:	001a      	movs	r2, r3
    dddc:	2301      	movs	r3, #1
    ddde:	4053      	eors	r3, r2
    dde0:	b2db      	uxtb	r3, r3
    dde2:	2b00      	cmp	r3, #0
    dde4:	d1f1      	bne.n	ddca <HeadLight+0x162>
				setWhite(0xFFFF*((float)lowbeam_level/100));
    dde6:	4b32      	ldr	r3, [pc, #200]	; (deb0 <HeadLight+0x248>)
    dde8:	781a      	ldrb	r2, [r3, #0]
    ddea:	4b32      	ldr	r3, [pc, #200]	; (deb4 <HeadLight+0x24c>)
    ddec:	0010      	movs	r0, r2
    ddee:	4798      	blx	r3
    ddf0:	1c02      	adds	r2, r0, #0
    ddf2:	4b31      	ldr	r3, [pc, #196]	; (deb8 <HeadLight+0x250>)
    ddf4:	4931      	ldr	r1, [pc, #196]	; (debc <HeadLight+0x254>)
    ddf6:	1c10      	adds	r0, r2, #0
    ddf8:	4798      	blx	r3
    ddfa:	1c03      	adds	r3, r0, #0
    ddfc:	1c1a      	adds	r2, r3, #0
    ddfe:	4b30      	ldr	r3, [pc, #192]	; (dec0 <HeadLight+0x258>)
    de00:	4930      	ldr	r1, [pc, #192]	; (dec4 <HeadLight+0x25c>)
    de02:	1c10      	adds	r0, r2, #0
    de04:	4798      	blx	r3
    de06:	1c03      	adds	r3, r0, #0
    de08:	1c1a      	adds	r2, r3, #0
    de0a:	4b2f      	ldr	r3, [pc, #188]	; (dec8 <HeadLight+0x260>)
    de0c:	1c10      	adds	r0, r2, #0
    de0e:	4798      	blx	r3
    de10:	0003      	movs	r3, r0
    de12:	b29b      	uxth	r3, r3
    de14:	0018      	movs	r0, r3
    de16:	4b2d      	ldr	r3, [pc, #180]	; (decc <HeadLight+0x264>)
    de18:	4798      	blx	r3
				BRIGHTS = false;
    de1a:	4b21      	ldr	r3, [pc, #132]	; (dea0 <HeadLight+0x238>)
    de1c:	2200      	movs	r2, #0
    de1e:	701a      	strb	r2, [r3, #0]
			}

			if(BRIGHTS) {
    de20:	4b1f      	ldr	r3, [pc, #124]	; (dea0 <HeadLight+0x238>)
    de22:	781b      	ldrb	r3, [r3, #0]
    de24:	2b00      	cmp	r3, #0
    de26:	d004      	beq.n	de32 <HeadLight+0x1ca>
				setWhite(0xFFFF); // 100%
    de28:	4b2c      	ldr	r3, [pc, #176]	; (dedc <HeadLight+0x274>)
    de2a:	0018      	movs	r0, r3
    de2c:	4b27      	ldr	r3, [pc, #156]	; (decc <HeadLight+0x264>)
    de2e:	4798      	blx	r3
		if(BRIGHTS_ENABLED){
    de30:	e027      	b.n	de82 <HeadLight+0x21a>
			} else {
				brights_timer = millis(); // reset the timer when low
    de32:	4b27      	ldr	r3, [pc, #156]	; (ded0 <HeadLight+0x268>)
    de34:	4798      	blx	r3
    de36:	0002      	movs	r2, r0
    de38:	4b26      	ldr	r3, [pc, #152]	; (ded4 <HeadLight+0x26c>)
    de3a:	601a      	str	r2, [r3, #0]
				setWhite(0xFFFF*((float)lowbeam_level/100));
    de3c:	4b1c      	ldr	r3, [pc, #112]	; (deb0 <HeadLight+0x248>)
    de3e:	781a      	ldrb	r2, [r3, #0]
    de40:	4b1c      	ldr	r3, [pc, #112]	; (deb4 <HeadLight+0x24c>)
    de42:	0010      	movs	r0, r2
    de44:	4798      	blx	r3
    de46:	1c02      	adds	r2, r0, #0
    de48:	4b1b      	ldr	r3, [pc, #108]	; (deb8 <HeadLight+0x250>)
    de4a:	491c      	ldr	r1, [pc, #112]	; (debc <HeadLight+0x254>)
    de4c:	1c10      	adds	r0, r2, #0
    de4e:	4798      	blx	r3
    de50:	1c03      	adds	r3, r0, #0
    de52:	1c1a      	adds	r2, r3, #0
    de54:	4b1a      	ldr	r3, [pc, #104]	; (dec0 <HeadLight+0x258>)
    de56:	491b      	ldr	r1, [pc, #108]	; (dec4 <HeadLight+0x25c>)
    de58:	1c10      	adds	r0, r2, #0
    de5a:	4798      	blx	r3
    de5c:	1c03      	adds	r3, r0, #0
    de5e:	1c1a      	adds	r2, r3, #0
    de60:	4b19      	ldr	r3, [pc, #100]	; (dec8 <HeadLight+0x260>)
    de62:	1c10      	adds	r0, r2, #0
    de64:	4798      	blx	r3
    de66:	0003      	movs	r3, r0
    de68:	b29b      	uxth	r3, r3
    de6a:	0018      	movs	r0, r3
    de6c:	4b17      	ldr	r3, [pc, #92]	; (decc <HeadLight+0x264>)
    de6e:	4798      	blx	r3
		if(BRIGHTS_ENABLED){
    de70:	e007      	b.n	de82 <HeadLight+0x21a>
			}
		} else {
			setWhite(0xFFFF);
    de72:	4b1a      	ldr	r3, [pc, #104]	; (dedc <HeadLight+0x274>)
    de74:	0018      	movs	r0, r3
    de76:	4b15      	ldr	r3, [pc, #84]	; (decc <HeadLight+0x264>)
    de78:	4798      	blx	r3
		if(BRIGHTS_ENABLED){
    de7a:	e002      	b.n	de82 <HeadLight+0x21a>
		}
	} else {
		setWhite(0);
    de7c:	2000      	movs	r0, #0
    de7e:	4b13      	ldr	r3, [pc, #76]	; (decc <HeadLight+0x264>)
    de80:	4798      	blx	r3
	}
}
    de82:	46c0      	nop			; (mov r8, r8)
    de84:	46bd      	mov	sp, r7
    de86:	bd80      	pop	{r7, pc}
    de88:	200003ad 	.word	0x200003ad
    de8c:	0000df99 	.word	0x0000df99
    de90:	0000dfa5 	.word	0x0000dfa5
    de94:	200000d6 	.word	0x200000d6
    de98:	0000ef8d 	.word	0x0000ef8d
    de9c:	200003a4 	.word	0x200003a4
    dea0:	200003b1 	.word	0x200003b1
    dea4:	20001ad8 	.word	0x20001ad8
    dea8:	00019535 	.word	0x00019535
    deac:	42700000 	.word	0x42700000
    deb0:	200000d4 	.word	0x200000d4
    deb4:	0001a379 	.word	0x0001a379
    deb8:	00019941 	.word	0x00019941
    debc:	42c80000 	.word	0x42c80000
    dec0:	00019d21 	.word	0x00019d21
    dec4:	477fff00 	.word	0x477fff00
    dec8:	000195b1 	.word	0x000195b1
    decc:	0000a529 	.word	0x0000a529
    ded0:	00009f65 	.word	0x00009f65
    ded4:	20000474 	.word	0x20000474
    ded8:	00009fbd 	.word	0x00009fbd
    dedc:	0000ffff 	.word	0x0000ffff

0000dee0 <SideLights>:

void SideLights(void){
    dee0:	b580      	push	{r7, lr}
    dee2:	af00      	add	r7, sp, #0
	if(sensorControl() && LIGHTS_ON && SIDELIGHTS && lightControlSide() && !is_standby_active()){
    dee4:	4b1d      	ldr	r3, [pc, #116]	; (df5c <SideLights+0x7c>)
    dee6:	4798      	blx	r3
    dee8:	1e03      	subs	r3, r0, #0
    deea:	d028      	beq.n	df3e <SideLights+0x5e>
    deec:	4b1c      	ldr	r3, [pc, #112]	; (df60 <SideLights+0x80>)
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	2b00      	cmp	r3, #0
    def2:	d024      	beq.n	df3e <SideLights+0x5e>
    def4:	4b1b      	ldr	r3, [pc, #108]	; (df64 <SideLights+0x84>)
    def6:	781b      	ldrb	r3, [r3, #0]
    def8:	2b00      	cmp	r3, #0
    defa:	d020      	beq.n	df3e <SideLights+0x5e>
    defc:	4b1a      	ldr	r3, [pc, #104]	; (df68 <SideLights+0x88>)
    defe:	4798      	blx	r3
    df00:	1e03      	subs	r3, r0, #0
    df02:	d01c      	beq.n	df3e <SideLights+0x5e>
    df04:	4b19      	ldr	r3, [pc, #100]	; (df6c <SideLights+0x8c>)
    df06:	4798      	blx	r3
    df08:	0003      	movs	r3, r0
    df0a:	001a      	movs	r2, r3
    df0c:	2301      	movs	r3, #1
    df0e:	4053      	eors	r3, r2
    df10:	b2db      	uxtb	r3, r3
    df12:	2b00      	cmp	r3, #0
    df14:	d013      	beq.n	df3e <SideLights+0x5e>
		if(SHUFFLE_ENABLED){
    df16:	4b16      	ldr	r3, [pc, #88]	; (df70 <SideLights+0x90>)
    df18:	781b      	ldrb	r3, [r3, #0]
    df1a:	2b00      	cmp	r3, #0
    df1c:	d001      	beq.n	df22 <SideLights+0x42>
			shuffle_light_modes();
    df1e:	4b15      	ldr	r3, [pc, #84]	; (df74 <SideLights+0x94>)
    df20:	4798      	blx	r3
		}
		if(RGB_led_type == RGB_ANALOG){
    df22:	4b15      	ldr	r3, [pc, #84]	; (df78 <SideLights+0x98>)
    df24:	781b      	ldrb	r3, [r3, #0]
    df26:	2b00      	cmp	r3, #0
    df28:	d102      	bne.n	df30 <SideLights+0x50>
			AnalogSideLights();
    df2a:	4b14      	ldr	r3, [pc, #80]	; (df7c <SideLights+0x9c>)
    df2c:	4798      	blx	r3
		if(RGB_led_type == RGB_ANALOG){
    df2e:	e010      	b.n	df52 <SideLights+0x72>
		}else if(RGB_led_type == RGB_DIGITAL_APA102){// || RGB_led_type == RGB_DIGITAL_WS2815) { // Digital LED Functions
    df30:	4b11      	ldr	r3, [pc, #68]	; (df78 <SideLights+0x98>)
    df32:	781b      	ldrb	r3, [r3, #0]
    df34:	2b01      	cmp	r3, #1
    df36:	d10c      	bne.n	df52 <SideLights+0x72>
			DigitalSideLights();
    df38:	4b11      	ldr	r3, [pc, #68]	; (df80 <SideLights+0xa0>)
    df3a:	4798      	blx	r3
		if(RGB_led_type == RGB_ANALOG){
    df3c:	e009      	b.n	df52 <SideLights+0x72>
		} else{
			//No RGB LEDs
		}
	} else {
		if(!TurnSignalOn) {
    df3e:	4b11      	ldr	r3, [pc, #68]	; (df84 <SideLights+0xa4>)
    df40:	781b      	ldrb	r3, [r3, #0]
    df42:	2201      	movs	r2, #1
    df44:	4053      	eors	r3, r2
    df46:	b2db      	uxtb	r3, r3
    df48:	2b00      	cmp	r3, #0
    df4a:	d003      	beq.n	df54 <SideLights+0x74>
			turn_off_side_lights();
    df4c:	4b0e      	ldr	r3, [pc, #56]	; (df88 <SideLights+0xa8>)
    df4e:	4798      	blx	r3
		}
	}
}
    df50:	e000      	b.n	df54 <SideLights+0x74>
		if(RGB_led_type == RGB_ANALOG){
    df52:	46c0      	nop			; (mov r8, r8)
}
    df54:	46c0      	nop			; (mov r8, r8)
    df56:	46bd      	mov	sp, r7
    df58:	bd80      	pop	{r7, pc}
    df5a:	46c0      	nop			; (mov r8, r8)
    df5c:	0000dfa5 	.word	0x0000dfa5
    df60:	200000d6 	.word	0x200000d6
    df64:	200000d5 	.word	0x200000d5
    df68:	0000df8d 	.word	0x0000df8d
    df6c:	0000ef8d 	.word	0x0000ef8d
    df70:	200003a6 	.word	0x200003a6
    df74:	0000f1bd 	.word	0x0000f1bd
    df78:	20001a88 	.word	0x20001a88
    df7c:	0000ab35 	.word	0x0000ab35
    df80:	0000c261 	.word	0x0000c261
    df84:	200003ac 	.word	0x200003ac
    df88:	0000f039 	.word	0x0000f039

0000df8c <lightControlSide>:


char lightControlSide() {
    df8c:	b580      	push	{r7, lr}
    df8e:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
    df90:	2301      	movs	r3, #1
}
    df92:	0018      	movs	r0, r3
    df94:	46bd      	mov	sp, r7
    df96:	bd80      	pop	{r7, pc}

0000df98 <lightControlHead>:

char lightControlHead() {
    df98:	b580      	push	{r7, lr}
    df9a:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
    df9c:	2301      	movs	r3, #1
}
    df9e:	0018      	movs	r0, r3
    dfa0:	46bd      	mov	sp, r7
    dfa2:	bd80      	pop	{r7, pc}

0000dfa4 <sensorControl>:

char sensorControl() {
    dfa4:	b580      	push	{r7, lr}
    dfa6:	af00      	add	r7, sp, #0
	static uint8_t off_type = 0;
	static long count = 0;
	static bool result = 1;
	if(IMU_CONTROLED){
    dfa8:	4b60      	ldr	r3, [pc, #384]	; (e12c <sensorControl+0x188>)
    dfaa:	781b      	ldrb	r3, [r3, #0]
    dfac:	2b00      	cmp	r3, #0
    dfae:	d100      	bne.n	dfb2 <sensorControl+0xe>
    dfb0:	e0b7      	b.n	e122 <sensorControl+0x17e>
		if(result){
    dfb2:	4b5f      	ldr	r3, [pc, #380]	; (e130 <sensorControl+0x18c>)
    dfb4:	781b      	ldrb	r3, [r3, #0]
    dfb6:	2b00      	cmp	r3, #0
    dfb8:	d057      	beq.n	e06a <sensorControl+0xc6>
			if(ayKalman >= 1000 && result){
    dfba:	4b5e      	ldr	r3, [pc, #376]	; (e134 <sensorControl+0x190>)
    dfbc:	681a      	ldr	r2, [r3, #0]
    dfbe:	4b5e      	ldr	r3, [pc, #376]	; (e138 <sensorControl+0x194>)
    dfc0:	495e      	ldr	r1, [pc, #376]	; (e13c <sensorControl+0x198>)
    dfc2:	1c10      	adds	r0, r2, #0
    dfc4:	4798      	blx	r3
    dfc6:	1e03      	subs	r3, r0, #0
    dfc8:	d00c      	beq.n	dfe4 <sensorControl+0x40>
    dfca:	4b59      	ldr	r3, [pc, #356]	; (e130 <sensorControl+0x18c>)
    dfcc:	781b      	ldrb	r3, [r3, #0]
    dfce:	2b00      	cmp	r3, #0
    dfd0:	d008      	beq.n	dfe4 <sensorControl+0x40>
				count++;
    dfd2:	4b5b      	ldr	r3, [pc, #364]	; (e140 <sensorControl+0x19c>)
    dfd4:	681b      	ldr	r3, [r3, #0]
    dfd6:	1c5a      	adds	r2, r3, #1
    dfd8:	4b59      	ldr	r3, [pc, #356]	; (e140 <sensorControl+0x19c>)
    dfda:	601a      	str	r2, [r3, #0]
				off_type = 1;
    dfdc:	4b59      	ldr	r3, [pc, #356]	; (e144 <sensorControl+0x1a0>)
    dfde:	2201      	movs	r2, #1
    dfe0:	701a      	strb	r2, [r3, #0]
    dfe2:	e082      	b.n	e0ea <sensorControl+0x146>
			}
			else if(ayKalman <= -1000 && result){
    dfe4:	4b53      	ldr	r3, [pc, #332]	; (e134 <sensorControl+0x190>)
    dfe6:	681a      	ldr	r2, [r3, #0]
    dfe8:	4b57      	ldr	r3, [pc, #348]	; (e148 <sensorControl+0x1a4>)
    dfea:	4958      	ldr	r1, [pc, #352]	; (e14c <sensorControl+0x1a8>)
    dfec:	1c10      	adds	r0, r2, #0
    dfee:	4798      	blx	r3
    dff0:	1e03      	subs	r3, r0, #0
    dff2:	d00c      	beq.n	e00e <sensorControl+0x6a>
    dff4:	4b4e      	ldr	r3, [pc, #312]	; (e130 <sensorControl+0x18c>)
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	2b00      	cmp	r3, #0
    dffa:	d008      	beq.n	e00e <sensorControl+0x6a>
				count++;
    dffc:	4b50      	ldr	r3, [pc, #320]	; (e140 <sensorControl+0x19c>)
    dffe:	681b      	ldr	r3, [r3, #0]
    e000:	1c5a      	adds	r2, r3, #1
    e002:	4b4f      	ldr	r3, [pc, #316]	; (e140 <sensorControl+0x19c>)
    e004:	601a      	str	r2, [r3, #0]
				off_type = 2;
    e006:	4b4f      	ldr	r3, [pc, #316]	; (e144 <sensorControl+0x1a0>)
    e008:	2202      	movs	r2, #2
    e00a:	701a      	strb	r2, [r3, #0]
    e00c:	e06d      	b.n	e0ea <sensorControl+0x146>
			}
			else if(axKalman >= 1250 && result){
    e00e:	4b50      	ldr	r3, [pc, #320]	; (e150 <sensorControl+0x1ac>)
    e010:	681a      	ldr	r2, [r3, #0]
    e012:	4b49      	ldr	r3, [pc, #292]	; (e138 <sensorControl+0x194>)
    e014:	494f      	ldr	r1, [pc, #316]	; (e154 <sensorControl+0x1b0>)
    e016:	1c10      	adds	r0, r2, #0
    e018:	4798      	blx	r3
    e01a:	1e03      	subs	r3, r0, #0
    e01c:	d00c      	beq.n	e038 <sensorControl+0x94>
    e01e:	4b44      	ldr	r3, [pc, #272]	; (e130 <sensorControl+0x18c>)
    e020:	781b      	ldrb	r3, [r3, #0]
    e022:	2b00      	cmp	r3, #0
    e024:	d008      	beq.n	e038 <sensorControl+0x94>
				count++;
    e026:	4b46      	ldr	r3, [pc, #280]	; (e140 <sensorControl+0x19c>)
    e028:	681b      	ldr	r3, [r3, #0]
    e02a:	1c5a      	adds	r2, r3, #1
    e02c:	4b44      	ldr	r3, [pc, #272]	; (e140 <sensorControl+0x19c>)
    e02e:	601a      	str	r2, [r3, #0]
				off_type = 3;
    e030:	4b44      	ldr	r3, [pc, #272]	; (e144 <sensorControl+0x1a0>)
    e032:	2203      	movs	r2, #3
    e034:	701a      	strb	r2, [r3, #0]
    e036:	e058      	b.n	e0ea <sensorControl+0x146>
			}
			else if(axKalman <= -1250 && result){
    e038:	4b45      	ldr	r3, [pc, #276]	; (e150 <sensorControl+0x1ac>)
    e03a:	681a      	ldr	r2, [r3, #0]
    e03c:	4b42      	ldr	r3, [pc, #264]	; (e148 <sensorControl+0x1a4>)
    e03e:	4946      	ldr	r1, [pc, #280]	; (e158 <sensorControl+0x1b4>)
    e040:	1c10      	adds	r0, r2, #0
    e042:	4798      	blx	r3
    e044:	1e03      	subs	r3, r0, #0
    e046:	d00c      	beq.n	e062 <sensorControl+0xbe>
    e048:	4b39      	ldr	r3, [pc, #228]	; (e130 <sensorControl+0x18c>)
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	2b00      	cmp	r3, #0
    e04e:	d008      	beq.n	e062 <sensorControl+0xbe>
				count++;
    e050:	4b3b      	ldr	r3, [pc, #236]	; (e140 <sensorControl+0x19c>)
    e052:	681b      	ldr	r3, [r3, #0]
    e054:	1c5a      	adds	r2, r3, #1
    e056:	4b3a      	ldr	r3, [pc, #232]	; (e140 <sensorControl+0x19c>)
    e058:	601a      	str	r2, [r3, #0]
				off_type = 4;
    e05a:	4b3a      	ldr	r3, [pc, #232]	; (e144 <sensorControl+0x1a0>)
    e05c:	2204      	movs	r2, #4
    e05e:	701a      	strb	r2, [r3, #0]
    e060:	e043      	b.n	e0ea <sensorControl+0x146>
			}
			else
			count = 0;
    e062:	4b37      	ldr	r3, [pc, #220]	; (e140 <sensorControl+0x19c>)
    e064:	2200      	movs	r2, #0
    e066:	601a      	str	r2, [r3, #0]
    e068:	e03f      	b.n	e0ea <sensorControl+0x146>
		}
		else if(!result){
    e06a:	4b31      	ldr	r3, [pc, #196]	; (e130 <sensorControl+0x18c>)
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	2201      	movs	r2, #1
    e070:	4053      	eors	r3, r2
    e072:	b2db      	uxtb	r3, r3
    e074:	2b00      	cmp	r3, #0
    e076:	d038      	beq.n	e0ea <sensorControl+0x146>
			if((ayKalman < 750 && off_type == 1) || (ayKalman > -750 && off_type == 2) || (axKalman < 1000 && off_type == 3) || (axKalman > -1000 && off_type == 4)){
    e078:	4b2e      	ldr	r3, [pc, #184]	; (e134 <sensorControl+0x190>)
    e07a:	681a      	ldr	r2, [r3, #0]
    e07c:	4b37      	ldr	r3, [pc, #220]	; (e15c <sensorControl+0x1b8>)
    e07e:	4938      	ldr	r1, [pc, #224]	; (e160 <sensorControl+0x1bc>)
    e080:	1c10      	adds	r0, r2, #0
    e082:	4798      	blx	r3
    e084:	1e03      	subs	r3, r0, #0
    e086:	d003      	beq.n	e090 <sensorControl+0xec>
    e088:	4b2e      	ldr	r3, [pc, #184]	; (e144 <sensorControl+0x1a0>)
    e08a:	781b      	ldrb	r3, [r3, #0]
    e08c:	2b01      	cmp	r3, #1
    e08e:	d023      	beq.n	e0d8 <sensorControl+0x134>
    e090:	4b28      	ldr	r3, [pc, #160]	; (e134 <sensorControl+0x190>)
    e092:	681a      	ldr	r2, [r3, #0]
    e094:	4b33      	ldr	r3, [pc, #204]	; (e164 <sensorControl+0x1c0>)
    e096:	4934      	ldr	r1, [pc, #208]	; (e168 <sensorControl+0x1c4>)
    e098:	1c10      	adds	r0, r2, #0
    e09a:	4798      	blx	r3
    e09c:	1e03      	subs	r3, r0, #0
    e09e:	d003      	beq.n	e0a8 <sensorControl+0x104>
    e0a0:	4b28      	ldr	r3, [pc, #160]	; (e144 <sensorControl+0x1a0>)
    e0a2:	781b      	ldrb	r3, [r3, #0]
    e0a4:	2b02      	cmp	r3, #2
    e0a6:	d017      	beq.n	e0d8 <sensorControl+0x134>
    e0a8:	4b29      	ldr	r3, [pc, #164]	; (e150 <sensorControl+0x1ac>)
    e0aa:	681a      	ldr	r2, [r3, #0]
    e0ac:	4b2b      	ldr	r3, [pc, #172]	; (e15c <sensorControl+0x1b8>)
    e0ae:	4923      	ldr	r1, [pc, #140]	; (e13c <sensorControl+0x198>)
    e0b0:	1c10      	adds	r0, r2, #0
    e0b2:	4798      	blx	r3
    e0b4:	1e03      	subs	r3, r0, #0
    e0b6:	d003      	beq.n	e0c0 <sensorControl+0x11c>
    e0b8:	4b22      	ldr	r3, [pc, #136]	; (e144 <sensorControl+0x1a0>)
    e0ba:	781b      	ldrb	r3, [r3, #0]
    e0bc:	2b03      	cmp	r3, #3
    e0be:	d00b      	beq.n	e0d8 <sensorControl+0x134>
    e0c0:	4b23      	ldr	r3, [pc, #140]	; (e150 <sensorControl+0x1ac>)
    e0c2:	681a      	ldr	r2, [r3, #0]
    e0c4:	4b27      	ldr	r3, [pc, #156]	; (e164 <sensorControl+0x1c0>)
    e0c6:	4921      	ldr	r1, [pc, #132]	; (e14c <sensorControl+0x1a8>)
    e0c8:	1c10      	adds	r0, r2, #0
    e0ca:	4798      	blx	r3
    e0cc:	1e03      	subs	r3, r0, #0
    e0ce:	d009      	beq.n	e0e4 <sensorControl+0x140>
    e0d0:	4b1c      	ldr	r3, [pc, #112]	; (e144 <sensorControl+0x1a0>)
    e0d2:	781b      	ldrb	r3, [r3, #0]
    e0d4:	2b04      	cmp	r3, #4
    e0d6:	d105      	bne.n	e0e4 <sensorControl+0x140>
				count++;
    e0d8:	4b19      	ldr	r3, [pc, #100]	; (e140 <sensorControl+0x19c>)
    e0da:	681b      	ldr	r3, [r3, #0]
    e0dc:	1c5a      	adds	r2, r3, #1
    e0de:	4b18      	ldr	r3, [pc, #96]	; (e140 <sensorControl+0x19c>)
    e0e0:	601a      	str	r2, [r3, #0]
    e0e2:	e002      	b.n	e0ea <sensorControl+0x146>
			}
			else
			count = 0;
    e0e4:	4b16      	ldr	r3, [pc, #88]	; (e140 <sensorControl+0x19c>)
    e0e6:	2200      	movs	r2, #0
    e0e8:	601a      	str	r2, [r3, #0]
		}
		
		if(count > 6)
    e0ea:	4b15      	ldr	r3, [pc, #84]	; (e140 <sensorControl+0x19c>)
    e0ec:	681b      	ldr	r3, [r3, #0]
    e0ee:	2b06      	cmp	r3, #6
    e0f0:	dd0d      	ble.n	e10e <sensorControl+0x16a>
		result = !result;
    e0f2:	4b0f      	ldr	r3, [pc, #60]	; (e130 <sensorControl+0x18c>)
    e0f4:	781b      	ldrb	r3, [r3, #0]
    e0f6:	1e5a      	subs	r2, r3, #1
    e0f8:	4193      	sbcs	r3, r2
    e0fa:	b2db      	uxtb	r3, r3
    e0fc:	2201      	movs	r2, #1
    e0fe:	4053      	eors	r3, r2
    e100:	b2db      	uxtb	r3, r3
    e102:	1c1a      	adds	r2, r3, #0
    e104:	2301      	movs	r3, #1
    e106:	4013      	ands	r3, r2
    e108:	b2da      	uxtb	r2, r3
    e10a:	4b09      	ldr	r3, [pc, #36]	; (e130 <sensorControl+0x18c>)
    e10c:	701a      	strb	r2, [r3, #0]

		if(result)
    e10e:	4b08      	ldr	r3, [pc, #32]	; (e130 <sensorControl+0x18c>)
    e110:	781b      	ldrb	r3, [r3, #0]
    e112:	2b00      	cmp	r3, #0
    e114:	d002      	beq.n	e11c <sensorControl+0x178>
		off_type = 0;
    e116:	4b0b      	ldr	r3, [pc, #44]	; (e144 <sensorControl+0x1a0>)
    e118:	2200      	movs	r2, #0
    e11a:	701a      	strb	r2, [r3, #0]

		return result;
    e11c:	4b04      	ldr	r3, [pc, #16]	; (e130 <sensorControl+0x18c>)
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	e000      	b.n	e124 <sensorControl+0x180>
	}
	else
	return 1;
    e122:	2301      	movs	r3, #1
}
    e124:	0018      	movs	r0, r3
    e126:	46bd      	mov	sp, r7
    e128:	bd80      	pop	{r7, pc}
    e12a:	46c0      	nop			; (mov r8, r8)
    e12c:	200003af 	.word	0x200003af
    e130:	20000103 	.word	0x20000103
    e134:	20000370 	.word	0x20000370
    e138:	00019549 	.word	0x00019549
    e13c:	447a0000 	.word	0x447a0000
    e140:	20000478 	.word	0x20000478
    e144:	2000047c 	.word	0x2000047c
    e148:	00019521 	.word	0x00019521
    e14c:	c47a0000 	.word	0xc47a0000
    e150:	2000036c 	.word	0x2000036c
    e154:	449c4000 	.word	0x449c4000
    e158:	c49c4000 	.word	0xc49c4000
    e15c:	0001950d 	.word	0x0001950d
    e160:	443b8000 	.word	0x443b8000
    e164:	00019535 	.word	0x00019535
    e168:	c43b8000 	.word	0xc43b8000

0000e16c <getLightSens>:


struct adc_module adc1;
void getLightSens(uint16_t* light_val) {
    e16c:	b580      	push	{r7, lr}
    e16e:	b082      	sub	sp, #8
    e170:	af00      	add	r7, sp, #0
    e172:	6078      	str	r0, [r7, #4]
	static bool START_NEW_CONVERSION = true;
	if(START_NEW_CONVERSION){
    e174:	4b12      	ldr	r3, [pc, #72]	; (e1c0 <getLightSens+0x54>)
    e176:	781b      	ldrb	r3, [r3, #0]
    e178:	2b00      	cmp	r3, #0
    e17a:	d007      	beq.n	e18c <getLightSens+0x20>
		adc_start_conversion(&adc1);
    e17c:	4b11      	ldr	r3, [pc, #68]	; (e1c4 <getLightSens+0x58>)
    e17e:	0018      	movs	r0, r3
    e180:	4b11      	ldr	r3, [pc, #68]	; (e1c8 <getLightSens+0x5c>)
    e182:	4798      	blx	r3
		START_NEW_CONVERSION = false;
    e184:	4b0e      	ldr	r3, [pc, #56]	; (e1c0 <getLightSens+0x54>)
    e186:	2200      	movs	r2, #0
    e188:	701a      	strb	r2, [r3, #0]
		} else if(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY){
		adc_read(&adc1, light_val);
		adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
		START_NEW_CONVERSION = true;
	}
}
    e18a:	e014      	b.n	e1b6 <getLightSens+0x4a>
		} else if(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY){
    e18c:	4b0d      	ldr	r3, [pc, #52]	; (e1c4 <getLightSens+0x58>)
    e18e:	0018      	movs	r0, r3
    e190:	4b0e      	ldr	r3, [pc, #56]	; (e1cc <getLightSens+0x60>)
    e192:	4798      	blx	r3
    e194:	0003      	movs	r3, r0
    e196:	2b01      	cmp	r3, #1
    e198:	d00d      	beq.n	e1b6 <getLightSens+0x4a>
		adc_read(&adc1, light_val);
    e19a:	687a      	ldr	r2, [r7, #4]
    e19c:	4b09      	ldr	r3, [pc, #36]	; (e1c4 <getLightSens+0x58>)
    e19e:	0011      	movs	r1, r2
    e1a0:	0018      	movs	r0, r3
    e1a2:	4b0b      	ldr	r3, [pc, #44]	; (e1d0 <getLightSens+0x64>)
    e1a4:	4798      	blx	r3
		adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
    e1a6:	4b07      	ldr	r3, [pc, #28]	; (e1c4 <getLightSens+0x58>)
    e1a8:	2101      	movs	r1, #1
    e1aa:	0018      	movs	r0, r3
    e1ac:	4b09      	ldr	r3, [pc, #36]	; (e1d4 <getLightSens+0x68>)
    e1ae:	4798      	blx	r3
		START_NEW_CONVERSION = true;
    e1b0:	4b03      	ldr	r3, [pc, #12]	; (e1c0 <getLightSens+0x54>)
    e1b2:	2201      	movs	r2, #1
    e1b4:	701a      	strb	r2, [r3, #0]
}
    e1b6:	46c0      	nop			; (mov r8, r8)
    e1b8:	46bd      	mov	sp, r7
    e1ba:	b002      	add	sp, #8
    e1bc:	bd80      	pop	{r7, pc}
    e1be:	46c0      	nop			; (mov r8, r8)
    e1c0:	20000104 	.word	0x20000104
    e1c4:	20000fa4 	.word	0x20000fa4
    e1c8:	000096c5 	.word	0x000096c5
    e1cc:	000095d5 	.word	0x000095d5
    e1d0:	0000970d 	.word	0x0000970d
    e1d4:	00009629 	.word	0x00009629

0000e1d8 <setDigitalHue>:

// Start: 0-764*zoom
// Zoom: 1-10
// Brightness: 1-31
void setDigitalHue(uint16_t start, uint8_t zoom, uint16_t offset, uint8_t hue_brightness, bool reverse_direction){
    e1d8:	b5b0      	push	{r4, r5, r7, lr}
    e1da:	b084      	sub	sp, #16
    e1dc:	af00      	add	r7, sp, #0
    e1de:	0005      	movs	r5, r0
    e1e0:	000c      	movs	r4, r1
    e1e2:	0010      	movs	r0, r2
    e1e4:	0019      	movs	r1, r3
    e1e6:	1dbb      	adds	r3, r7, #6
    e1e8:	1c2a      	adds	r2, r5, #0
    e1ea:	801a      	strh	r2, [r3, #0]
    e1ec:	1d7b      	adds	r3, r7, #5
    e1ee:	1c22      	adds	r2, r4, #0
    e1f0:	701a      	strb	r2, [r3, #0]
    e1f2:	1cbb      	adds	r3, r7, #2
    e1f4:	1c02      	adds	r2, r0, #0
    e1f6:	801a      	strh	r2, [r3, #0]
    e1f8:	1d3b      	adds	r3, r7, #4
    e1fa:	1c0a      	adds	r2, r1, #0
    e1fc:	701a      	strb	r2, [r3, #0]
	int x = 0;
    e1fe:	2300      	movs	r3, #0
    e200:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0; i < led_num; i++)
    e202:	230a      	movs	r3, #10
    e204:	18fb      	adds	r3, r7, r3
    e206:	2200      	movs	r2, #0
    e208:	801a      	strh	r2, [r3, #0]
    e20a:	e176      	b.n	e4fa <setDigitalHue+0x322>
	{
		//if(reverse_direction)
		//	start= -start+255*6;
		x = (start+offset) - (i*((764)/led_num));
    e20c:	1dbb      	adds	r3, r7, #6
    e20e:	881a      	ldrh	r2, [r3, #0]
    e210:	1cbb      	adds	r3, r7, #2
    e212:	881b      	ldrh	r3, [r3, #0]
    e214:	18d4      	adds	r4, r2, r3
    e216:	230a      	movs	r3, #10
    e218:	18fb      	adds	r3, r7, r3
    e21a:	881d      	ldrh	r5, [r3, #0]
    e21c:	4bbd      	ldr	r3, [pc, #756]	; (e514 <setDigitalHue+0x33c>)
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	001a      	movs	r2, r3
    e222:	4bbd      	ldr	r3, [pc, #756]	; (e518 <setDigitalHue+0x340>)
    e224:	0011      	movs	r1, r2
    e226:	22bf      	movs	r2, #191	; 0xbf
    e228:	0090      	lsls	r0, r2, #2
    e22a:	4798      	blx	r3
    e22c:	0003      	movs	r3, r0
    e22e:	436b      	muls	r3, r5
    e230:	1ae3      	subs	r3, r4, r3
    e232:	60fb      	str	r3, [r7, #12]
		while(x<0)
    e234:	e007      	b.n	e246 <setDigitalHue+0x6e>
			x += (764*zoom);
    e236:	1d7b      	adds	r3, r7, #5
    e238:	781b      	ldrb	r3, [r3, #0]
    e23a:	22bf      	movs	r2, #191	; 0xbf
    e23c:	0092      	lsls	r2, r2, #2
    e23e:	4353      	muls	r3, r2
    e240:	68fa      	ldr	r2, [r7, #12]
    e242:	18d3      	adds	r3, r2, r3
    e244:	60fb      	str	r3, [r7, #12]
		while(x<0)
    e246:	68fb      	ldr	r3, [r7, #12]
    e248:	2b00      	cmp	r3, #0
    e24a:	dbf4      	blt.n	e236 <setDigitalHue+0x5e>
		while(x>(764*zoom))
    e24c:	e006      	b.n	e25c <setDigitalHue+0x84>
			x -= (764*zoom);
    e24e:	1d7b      	adds	r3, r7, #5
    e250:	781b      	ldrb	r3, [r3, #0]
    e252:	4ab2      	ldr	r2, [pc, #712]	; (e51c <setDigitalHue+0x344>)
    e254:	4353      	muls	r3, r2
    e256:	68fa      	ldr	r2, [r7, #12]
    e258:	18d3      	adds	r3, r2, r3
    e25a:	60fb      	str	r3, [r7, #12]
		while(x>(764*zoom))
    e25c:	1d7b      	adds	r3, r7, #5
    e25e:	781b      	ldrb	r3, [r3, #0]
    e260:	22bf      	movs	r2, #191	; 0xbf
    e262:	0092      	lsls	r2, r2, #2
    e264:	435a      	muls	r2, r3
    e266:	68fb      	ldr	r3, [r7, #12]
    e268:	429a      	cmp	r2, r3
    e26a:	dbf0      	blt.n	e24e <setDigitalHue+0x76>
			
		L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | hue_brightness);
    e26c:	230a      	movs	r3, #10
    e26e:	18fb      	adds	r3, r7, r3
    e270:	881b      	ldrh	r3, [r3, #0]
    e272:	3301      	adds	r3, #1
    e274:	009a      	lsls	r2, r3, #2
    e276:	230a      	movs	r3, #10
    e278:	18fb      	adds	r3, r7, r3
    e27a:	881b      	ldrh	r3, [r3, #0]
    e27c:	3301      	adds	r3, #1
    e27e:	009b      	lsls	r3, r3, #2
    e280:	1d39      	adds	r1, r7, #4
    e282:	7809      	ldrb	r1, [r1, #0]
    e284:	2020      	movs	r0, #32
    e286:	4240      	negs	r0, r0
    e288:	4301      	orrs	r1, r0
    e28a:	b2c8      	uxtb	r0, r1
    e28c:	49a4      	ldr	r1, [pc, #656]	; (e520 <setDigitalHue+0x348>)
    e28e:	54c8      	strb	r0, [r1, r3]
    e290:	49a3      	ldr	r1, [pc, #652]	; (e520 <setDigitalHue+0x348>)
    e292:	5cc9      	ldrb	r1, [r1, r3]
    e294:	4ba3      	ldr	r3, [pc, #652]	; (e524 <setDigitalHue+0x34c>)
    e296:	5499      	strb	r1, [r3, r2]
		if(x/(255*zoom) == 0){
    e298:	1d7b      	adds	r3, r7, #5
    e29a:	781a      	ldrb	r2, [r3, #0]
    e29c:	0013      	movs	r3, r2
    e29e:	021b      	lsls	r3, r3, #8
    e2a0:	1a9a      	subs	r2, r3, r2
    e2a2:	4b9d      	ldr	r3, [pc, #628]	; (e518 <setDigitalHue+0x340>)
    e2a4:	0011      	movs	r1, r2
    e2a6:	68f8      	ldr	r0, [r7, #12]
    e2a8:	4798      	blx	r3
    e2aa:	1e03      	subs	r3, r0, #0
    e2ac:	d157      	bne.n	e35e <setDigitalHue+0x186>
			L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
    e2ae:	230a      	movs	r3, #10
    e2b0:	18fb      	adds	r3, r7, r3
    e2b2:	881b      	ldrh	r3, [r3, #0]
    e2b4:	009b      	lsls	r3, r3, #2
    e2b6:	1d5a      	adds	r2, r3, #5
    e2b8:	230a      	movs	r3, #10
    e2ba:	18fb      	adds	r3, r7, r3
    e2bc:	881b      	ldrh	r3, [r3, #0]
    e2be:	009b      	lsls	r3, r3, #2
    e2c0:	3305      	adds	r3, #5
    e2c2:	4997      	ldr	r1, [pc, #604]	; (e520 <setDigitalHue+0x348>)
    e2c4:	2000      	movs	r0, #0
    e2c6:	54c8      	strb	r0, [r1, r3]
    e2c8:	4995      	ldr	r1, [pc, #596]	; (e520 <setDigitalHue+0x348>)
    e2ca:	5cc9      	ldrb	r1, [r1, r3]
    e2cc:	4b95      	ldr	r3, [pc, #596]	; (e524 <setDigitalHue+0x34c>)
    e2ce:	5499      	strb	r1, [r3, r2]
			L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 255-(x%(255*zoom))/zoom;
    e2d0:	230a      	movs	r3, #10
    e2d2:	18fb      	adds	r3, r7, r3
    e2d4:	881b      	ldrh	r3, [r3, #0]
    e2d6:	009b      	lsls	r3, r3, #2
    e2d8:	1d9d      	adds	r5, r3, #6
    e2da:	230a      	movs	r3, #10
    e2dc:	18fb      	adds	r3, r7, r3
    e2de:	881b      	ldrh	r3, [r3, #0]
    e2e0:	009b      	lsls	r3, r3, #2
    e2e2:	1d9c      	adds	r4, r3, #6
    e2e4:	1d7b      	adds	r3, r7, #5
    e2e6:	781a      	ldrb	r2, [r3, #0]
    e2e8:	0013      	movs	r3, r2
    e2ea:	021b      	lsls	r3, r3, #8
    e2ec:	1a99      	subs	r1, r3, r2
    e2ee:	68fa      	ldr	r2, [r7, #12]
    e2f0:	4b8d      	ldr	r3, [pc, #564]	; (e528 <setDigitalHue+0x350>)
    e2f2:	0010      	movs	r0, r2
    e2f4:	4798      	blx	r3
    e2f6:	000b      	movs	r3, r1
    e2f8:	0018      	movs	r0, r3
    e2fa:	1d7b      	adds	r3, r7, #5
    e2fc:	781a      	ldrb	r2, [r3, #0]
    e2fe:	4b86      	ldr	r3, [pc, #536]	; (e518 <setDigitalHue+0x340>)
    e300:	0011      	movs	r1, r2
    e302:	4798      	blx	r3
    e304:	0003      	movs	r3, r0
    e306:	b2db      	uxtb	r3, r3
    e308:	43db      	mvns	r3, r3
    e30a:	b2da      	uxtb	r2, r3
    e30c:	4b84      	ldr	r3, [pc, #528]	; (e520 <setDigitalHue+0x348>)
    e30e:	551a      	strb	r2, [r3, r4]
    e310:	4b83      	ldr	r3, [pc, #524]	; (e520 <setDigitalHue+0x348>)
    e312:	5d1a      	ldrb	r2, [r3, r4]
    e314:	4b83      	ldr	r3, [pc, #524]	; (e524 <setDigitalHue+0x34c>)
    e316:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (x%(255*zoom))/zoom;
    e318:	230a      	movs	r3, #10
    e31a:	18fb      	adds	r3, r7, r3
    e31c:	881b      	ldrh	r3, [r3, #0]
    e31e:	009b      	lsls	r3, r3, #2
    e320:	1ddd      	adds	r5, r3, #7
    e322:	230a      	movs	r3, #10
    e324:	18fb      	adds	r3, r7, r3
    e326:	881b      	ldrh	r3, [r3, #0]
    e328:	009b      	lsls	r3, r3, #2
    e32a:	1ddc      	adds	r4, r3, #7
    e32c:	1d7b      	adds	r3, r7, #5
    e32e:	781a      	ldrb	r2, [r3, #0]
    e330:	0013      	movs	r3, r2
    e332:	021b      	lsls	r3, r3, #8
    e334:	1a99      	subs	r1, r3, r2
    e336:	68fa      	ldr	r2, [r7, #12]
    e338:	4b7b      	ldr	r3, [pc, #492]	; (e528 <setDigitalHue+0x350>)
    e33a:	0010      	movs	r0, r2
    e33c:	4798      	blx	r3
    e33e:	000b      	movs	r3, r1
    e340:	0018      	movs	r0, r3
    e342:	1d7b      	adds	r3, r7, #5
    e344:	781a      	ldrb	r2, [r3, #0]
    e346:	4b74      	ldr	r3, [pc, #464]	; (e518 <setDigitalHue+0x340>)
    e348:	0011      	movs	r1, r2
    e34a:	4798      	blx	r3
    e34c:	0003      	movs	r3, r0
    e34e:	b2da      	uxtb	r2, r3
    e350:	4b73      	ldr	r3, [pc, #460]	; (e520 <setDigitalHue+0x348>)
    e352:	551a      	strb	r2, [r3, r4]
    e354:	4b72      	ldr	r3, [pc, #456]	; (e520 <setDigitalHue+0x348>)
    e356:	5d1a      	ldrb	r2, [r3, r4]
    e358:	4b72      	ldr	r3, [pc, #456]	; (e524 <setDigitalHue+0x34c>)
    e35a:	555a      	strb	r2, [r3, r5]
    e35c:	e0c6      	b.n	e4ec <setDigitalHue+0x314>
		} else if(x/(255*zoom) == 1){
    e35e:	1d7b      	adds	r3, r7, #5
    e360:	781a      	ldrb	r2, [r3, #0]
    e362:	0013      	movs	r3, r2
    e364:	021b      	lsls	r3, r3, #8
    e366:	1a9a      	subs	r2, r3, r2
    e368:	4b6b      	ldr	r3, [pc, #428]	; (e518 <setDigitalHue+0x340>)
    e36a:	0011      	movs	r1, r2
    e36c:	68f8      	ldr	r0, [r7, #12]
    e36e:	4798      	blx	r3
    e370:	0003      	movs	r3, r0
    e372:	2b01      	cmp	r3, #1
    e374:	d157      	bne.n	e426 <setDigitalHue+0x24e>
			L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (x%(255*zoom))/zoom;
    e376:	230a      	movs	r3, #10
    e378:	18fb      	adds	r3, r7, r3
    e37a:	881b      	ldrh	r3, [r3, #0]
    e37c:	009b      	lsls	r3, r3, #2
    e37e:	1d5d      	adds	r5, r3, #5
    e380:	230a      	movs	r3, #10
    e382:	18fb      	adds	r3, r7, r3
    e384:	881b      	ldrh	r3, [r3, #0]
    e386:	009b      	lsls	r3, r3, #2
    e388:	1d5c      	adds	r4, r3, #5
    e38a:	1d7b      	adds	r3, r7, #5
    e38c:	781a      	ldrb	r2, [r3, #0]
    e38e:	0013      	movs	r3, r2
    e390:	021b      	lsls	r3, r3, #8
    e392:	1a99      	subs	r1, r3, r2
    e394:	68fa      	ldr	r2, [r7, #12]
    e396:	4b64      	ldr	r3, [pc, #400]	; (e528 <setDigitalHue+0x350>)
    e398:	0010      	movs	r0, r2
    e39a:	4798      	blx	r3
    e39c:	000b      	movs	r3, r1
    e39e:	0018      	movs	r0, r3
    e3a0:	1d7b      	adds	r3, r7, #5
    e3a2:	781a      	ldrb	r2, [r3, #0]
    e3a4:	4b5c      	ldr	r3, [pc, #368]	; (e518 <setDigitalHue+0x340>)
    e3a6:	0011      	movs	r1, r2
    e3a8:	4798      	blx	r3
    e3aa:	0003      	movs	r3, r0
    e3ac:	b2da      	uxtb	r2, r3
    e3ae:	4b5c      	ldr	r3, [pc, #368]	; (e520 <setDigitalHue+0x348>)
    e3b0:	551a      	strb	r2, [r3, r4]
    e3b2:	4b5b      	ldr	r3, [pc, #364]	; (e520 <setDigitalHue+0x348>)
    e3b4:	5d1a      	ldrb	r2, [r3, r4]
    e3b6:	4b5b      	ldr	r3, [pc, #364]	; (e524 <setDigitalHue+0x34c>)
    e3b8:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
    e3ba:	230a      	movs	r3, #10
    e3bc:	18fb      	adds	r3, r7, r3
    e3be:	881b      	ldrh	r3, [r3, #0]
    e3c0:	009b      	lsls	r3, r3, #2
    e3c2:	1d9a      	adds	r2, r3, #6
    e3c4:	230a      	movs	r3, #10
    e3c6:	18fb      	adds	r3, r7, r3
    e3c8:	881b      	ldrh	r3, [r3, #0]
    e3ca:	009b      	lsls	r3, r3, #2
    e3cc:	3306      	adds	r3, #6
    e3ce:	4954      	ldr	r1, [pc, #336]	; (e520 <setDigitalHue+0x348>)
    e3d0:	2000      	movs	r0, #0
    e3d2:	54c8      	strb	r0, [r1, r3]
    e3d4:	4952      	ldr	r1, [pc, #328]	; (e520 <setDigitalHue+0x348>)
    e3d6:	5cc9      	ldrb	r1, [r1, r3]
    e3d8:	4b52      	ldr	r3, [pc, #328]	; (e524 <setDigitalHue+0x34c>)
    e3da:	5499      	strb	r1, [r3, r2]
			L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 255-(x%(255*zoom))/zoom;
    e3dc:	230a      	movs	r3, #10
    e3de:	18fb      	adds	r3, r7, r3
    e3e0:	881b      	ldrh	r3, [r3, #0]
    e3e2:	009b      	lsls	r3, r3, #2
    e3e4:	1ddd      	adds	r5, r3, #7
    e3e6:	230a      	movs	r3, #10
    e3e8:	18fb      	adds	r3, r7, r3
    e3ea:	881b      	ldrh	r3, [r3, #0]
    e3ec:	009b      	lsls	r3, r3, #2
    e3ee:	1ddc      	adds	r4, r3, #7
    e3f0:	1d7b      	adds	r3, r7, #5
    e3f2:	781a      	ldrb	r2, [r3, #0]
    e3f4:	0013      	movs	r3, r2
    e3f6:	021b      	lsls	r3, r3, #8
    e3f8:	1a99      	subs	r1, r3, r2
    e3fa:	68fa      	ldr	r2, [r7, #12]
    e3fc:	4b4a      	ldr	r3, [pc, #296]	; (e528 <setDigitalHue+0x350>)
    e3fe:	0010      	movs	r0, r2
    e400:	4798      	blx	r3
    e402:	000b      	movs	r3, r1
    e404:	0018      	movs	r0, r3
    e406:	1d7b      	adds	r3, r7, #5
    e408:	781a      	ldrb	r2, [r3, #0]
    e40a:	4b43      	ldr	r3, [pc, #268]	; (e518 <setDigitalHue+0x340>)
    e40c:	0011      	movs	r1, r2
    e40e:	4798      	blx	r3
    e410:	0003      	movs	r3, r0
    e412:	b2db      	uxtb	r3, r3
    e414:	43db      	mvns	r3, r3
    e416:	b2da      	uxtb	r2, r3
    e418:	4b41      	ldr	r3, [pc, #260]	; (e520 <setDigitalHue+0x348>)
    e41a:	551a      	strb	r2, [r3, r4]
    e41c:	4b40      	ldr	r3, [pc, #256]	; (e520 <setDigitalHue+0x348>)
    e41e:	5d1a      	ldrb	r2, [r3, r4]
    e420:	4b40      	ldr	r3, [pc, #256]	; (e524 <setDigitalHue+0x34c>)
    e422:	555a      	strb	r2, [r3, r5]
    e424:	e062      	b.n	e4ec <setDigitalHue+0x314>
		} else if(x/(255*zoom) == 2){
    e426:	1d7b      	adds	r3, r7, #5
    e428:	781a      	ldrb	r2, [r3, #0]
    e42a:	0013      	movs	r3, r2
    e42c:	021b      	lsls	r3, r3, #8
    e42e:	1a9a      	subs	r2, r3, r2
    e430:	4b39      	ldr	r3, [pc, #228]	; (e518 <setDigitalHue+0x340>)
    e432:	0011      	movs	r1, r2
    e434:	68f8      	ldr	r0, [r7, #12]
    e436:	4798      	blx	r3
    e438:	0003      	movs	r3, r0
    e43a:	2b02      	cmp	r3, #2
    e43c:	d156      	bne.n	e4ec <setDigitalHue+0x314>
			L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 255-(x%(255*zoom))/zoom;
    e43e:	230a      	movs	r3, #10
    e440:	18fb      	adds	r3, r7, r3
    e442:	881b      	ldrh	r3, [r3, #0]
    e444:	009b      	lsls	r3, r3, #2
    e446:	1d5d      	adds	r5, r3, #5
    e448:	230a      	movs	r3, #10
    e44a:	18fb      	adds	r3, r7, r3
    e44c:	881b      	ldrh	r3, [r3, #0]
    e44e:	009b      	lsls	r3, r3, #2
    e450:	1d5c      	adds	r4, r3, #5
    e452:	1d7b      	adds	r3, r7, #5
    e454:	781a      	ldrb	r2, [r3, #0]
    e456:	0013      	movs	r3, r2
    e458:	021b      	lsls	r3, r3, #8
    e45a:	1a99      	subs	r1, r3, r2
    e45c:	68fa      	ldr	r2, [r7, #12]
    e45e:	4b32      	ldr	r3, [pc, #200]	; (e528 <setDigitalHue+0x350>)
    e460:	0010      	movs	r0, r2
    e462:	4798      	blx	r3
    e464:	000b      	movs	r3, r1
    e466:	0018      	movs	r0, r3
    e468:	1d7b      	adds	r3, r7, #5
    e46a:	781a      	ldrb	r2, [r3, #0]
    e46c:	4b2a      	ldr	r3, [pc, #168]	; (e518 <setDigitalHue+0x340>)
    e46e:	0011      	movs	r1, r2
    e470:	4798      	blx	r3
    e472:	0003      	movs	r3, r0
    e474:	b2db      	uxtb	r3, r3
    e476:	43db      	mvns	r3, r3
    e478:	b2da      	uxtb	r2, r3
    e47a:	4b29      	ldr	r3, [pc, #164]	; (e520 <setDigitalHue+0x348>)
    e47c:	551a      	strb	r2, [r3, r4]
    e47e:	4b28      	ldr	r3, [pc, #160]	; (e520 <setDigitalHue+0x348>)
    e480:	5d1a      	ldrb	r2, [r3, r4]
    e482:	4b28      	ldr	r3, [pc, #160]	; (e524 <setDigitalHue+0x34c>)
    e484:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (x%(255*zoom))/zoom;
    e486:	230a      	movs	r3, #10
    e488:	18fb      	adds	r3, r7, r3
    e48a:	881b      	ldrh	r3, [r3, #0]
    e48c:	009b      	lsls	r3, r3, #2
    e48e:	1d9d      	adds	r5, r3, #6
    e490:	230a      	movs	r3, #10
    e492:	18fb      	adds	r3, r7, r3
    e494:	881b      	ldrh	r3, [r3, #0]
    e496:	009b      	lsls	r3, r3, #2
    e498:	1d9c      	adds	r4, r3, #6
    e49a:	1d7b      	adds	r3, r7, #5
    e49c:	781a      	ldrb	r2, [r3, #0]
    e49e:	0013      	movs	r3, r2
    e4a0:	021b      	lsls	r3, r3, #8
    e4a2:	1a99      	subs	r1, r3, r2
    e4a4:	68fa      	ldr	r2, [r7, #12]
    e4a6:	4b20      	ldr	r3, [pc, #128]	; (e528 <setDigitalHue+0x350>)
    e4a8:	0010      	movs	r0, r2
    e4aa:	4798      	blx	r3
    e4ac:	000b      	movs	r3, r1
    e4ae:	0018      	movs	r0, r3
    e4b0:	1d7b      	adds	r3, r7, #5
    e4b2:	781a      	ldrb	r2, [r3, #0]
    e4b4:	4b18      	ldr	r3, [pc, #96]	; (e518 <setDigitalHue+0x340>)
    e4b6:	0011      	movs	r1, r2
    e4b8:	4798      	blx	r3
    e4ba:	0003      	movs	r3, r0
    e4bc:	b2da      	uxtb	r2, r3
    e4be:	4b18      	ldr	r3, [pc, #96]	; (e520 <setDigitalHue+0x348>)
    e4c0:	551a      	strb	r2, [r3, r4]
    e4c2:	4b17      	ldr	r3, [pc, #92]	; (e520 <setDigitalHue+0x348>)
    e4c4:	5d1a      	ldrb	r2, [r3, r4]
    e4c6:	4b17      	ldr	r3, [pc, #92]	; (e524 <setDigitalHue+0x34c>)
    e4c8:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
    e4ca:	230a      	movs	r3, #10
    e4cc:	18fb      	adds	r3, r7, r3
    e4ce:	881b      	ldrh	r3, [r3, #0]
    e4d0:	009b      	lsls	r3, r3, #2
    e4d2:	1dda      	adds	r2, r3, #7
    e4d4:	230a      	movs	r3, #10
    e4d6:	18fb      	adds	r3, r7, r3
    e4d8:	881b      	ldrh	r3, [r3, #0]
    e4da:	009b      	lsls	r3, r3, #2
    e4dc:	3307      	adds	r3, #7
    e4de:	4910      	ldr	r1, [pc, #64]	; (e520 <setDigitalHue+0x348>)
    e4e0:	2000      	movs	r0, #0
    e4e2:	54c8      	strb	r0, [r1, r3]
    e4e4:	490e      	ldr	r1, [pc, #56]	; (e520 <setDigitalHue+0x348>)
    e4e6:	5cc9      	ldrb	r1, [r1, r3]
    e4e8:	4b0e      	ldr	r3, [pc, #56]	; (e524 <setDigitalHue+0x34c>)
    e4ea:	5499      	strb	r1, [r3, r2]
	for(uint16_t i = 0; i < led_num; i++)
    e4ec:	230a      	movs	r3, #10
    e4ee:	18fb      	adds	r3, r7, r3
    e4f0:	881a      	ldrh	r2, [r3, #0]
    e4f2:	230a      	movs	r3, #10
    e4f4:	18fb      	adds	r3, r7, r3
    e4f6:	3201      	adds	r2, #1
    e4f8:	801a      	strh	r2, [r3, #0]
    e4fa:	4b06      	ldr	r3, [pc, #24]	; (e514 <setDigitalHue+0x33c>)
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	b29b      	uxth	r3, r3
    e500:	220a      	movs	r2, #10
    e502:	18ba      	adds	r2, r7, r2
    e504:	8812      	ldrh	r2, [r2, #0]
    e506:	429a      	cmp	r2, r3
    e508:	d200      	bcs.n	e50c <setDigitalHue+0x334>
    e50a:	e67f      	b.n	e20c <setDigitalHue+0x34>
		}
	}
}
    e50c:	46c0      	nop			; (mov r8, r8)
    e50e:	46bd      	mov	sp, r7
    e510:	b004      	add	sp, #16
    e512:	bdb0      	pop	{r4, r5, r7, pc}
    e514:	200000e0 	.word	0x200000e0
    e518:	00019295 	.word	0x00019295
    e51c:	fffffd04 	.word	0xfffffd04
    e520:	20000598 	.word	0x20000598
    e524:	20001440 	.word	0x20001440
    e528:	00019461 	.word	0x00019461

0000e52c <setDigitalLEDHue>:

void setDigitalLEDHue(uint16_t pos, uint8_t zoom, uint8_t hue_brightness, uint8_t led){
    e52c:	b5b0      	push	{r4, r5, r7, lr}
    e52e:	b084      	sub	sp, #16
    e530:	af00      	add	r7, sp, #0
    e532:	0005      	movs	r5, r0
    e534:	000c      	movs	r4, r1
    e536:	0010      	movs	r0, r2
    e538:	0019      	movs	r1, r3
    e53a:	1dbb      	adds	r3, r7, #6
    e53c:	1c2a      	adds	r2, r5, #0
    e53e:	801a      	strh	r2, [r3, #0]
    e540:	1d7b      	adds	r3, r7, #5
    e542:	1c22      	adds	r2, r4, #0
    e544:	701a      	strb	r2, [r3, #0]
    e546:	1d3b      	adds	r3, r7, #4
    e548:	1c02      	adds	r2, r0, #0
    e54a:	701a      	strb	r2, [r3, #0]
    e54c:	1cfb      	adds	r3, r7, #3
    e54e:	1c0a      	adds	r2, r1, #0
    e550:	701a      	strb	r2, [r3, #0]
	int x = 0;
    e552:	2300      	movs	r3, #0
    e554:	60fb      	str	r3, [r7, #12]

	x = pos;
    e556:	1dbb      	adds	r3, r7, #6
    e558:	881b      	ldrh	r3, [r3, #0]
    e55a:	60fb      	str	r3, [r7, #12]
	
	L_SPI_send_buf[(led*4)+4] = R_SPI_send_buf[(led*4)+4] = (0b11100000 | hue_brightness);
    e55c:	1cfb      	adds	r3, r7, #3
    e55e:	781b      	ldrb	r3, [r3, #0]
    e560:	3301      	adds	r3, #1
    e562:	009a      	lsls	r2, r3, #2
    e564:	1cfb      	adds	r3, r7, #3
    e566:	781b      	ldrb	r3, [r3, #0]
    e568:	3301      	adds	r3, #1
    e56a:	009b      	lsls	r3, r3, #2
    e56c:	1d39      	adds	r1, r7, #4
    e56e:	7809      	ldrb	r1, [r1, #0]
    e570:	2020      	movs	r0, #32
    e572:	4240      	negs	r0, r0
    e574:	4301      	orrs	r1, r0
    e576:	b2c8      	uxtb	r0, r1
    e578:	4990      	ldr	r1, [pc, #576]	; (e7bc <setDigitalLEDHue+0x290>)
    e57a:	54c8      	strb	r0, [r1, r3]
    e57c:	498f      	ldr	r1, [pc, #572]	; (e7bc <setDigitalLEDHue+0x290>)
    e57e:	5cc9      	ldrb	r1, [r1, r3]
    e580:	4b8f      	ldr	r3, [pc, #572]	; (e7c0 <setDigitalLEDHue+0x294>)
    e582:	5499      	strb	r1, [r3, r2]
	if(x/(255*zoom) == 0){
    e584:	1d7b      	adds	r3, r7, #5
    e586:	781a      	ldrb	r2, [r3, #0]
    e588:	0013      	movs	r3, r2
    e58a:	021b      	lsls	r3, r3, #8
    e58c:	1a9a      	subs	r2, r3, r2
    e58e:	4b8d      	ldr	r3, [pc, #564]	; (e7c4 <setDigitalLEDHue+0x298>)
    e590:	0011      	movs	r1, r2
    e592:	68f8      	ldr	r0, [r7, #12]
    e594:	4798      	blx	r3
    e596:	1e03      	subs	r3, r0, #0
    e598:	d151      	bne.n	e63e <setDigitalLEDHue+0x112>
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = 0;
    e59a:	1cfb      	adds	r3, r7, #3
    e59c:	781b      	ldrb	r3, [r3, #0]
    e59e:	009b      	lsls	r3, r3, #2
    e5a0:	1d5a      	adds	r2, r3, #5
    e5a2:	1cfb      	adds	r3, r7, #3
    e5a4:	781b      	ldrb	r3, [r3, #0]
    e5a6:	009b      	lsls	r3, r3, #2
    e5a8:	3305      	adds	r3, #5
    e5aa:	4984      	ldr	r1, [pc, #528]	; (e7bc <setDigitalLEDHue+0x290>)
    e5ac:	2000      	movs	r0, #0
    e5ae:	54c8      	strb	r0, [r1, r3]
    e5b0:	4982      	ldr	r1, [pc, #520]	; (e7bc <setDigitalLEDHue+0x290>)
    e5b2:	5cc9      	ldrb	r1, [r1, r3]
    e5b4:	4b82      	ldr	r3, [pc, #520]	; (e7c0 <setDigitalLEDHue+0x294>)
    e5b6:	5499      	strb	r1, [r3, r2]
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = 255-(x%(255*zoom))/zoom;
    e5b8:	1cfb      	adds	r3, r7, #3
    e5ba:	781b      	ldrb	r3, [r3, #0]
    e5bc:	009b      	lsls	r3, r3, #2
    e5be:	1d9d      	adds	r5, r3, #6
    e5c0:	1cfb      	adds	r3, r7, #3
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	009b      	lsls	r3, r3, #2
    e5c6:	1d9c      	adds	r4, r3, #6
    e5c8:	1d7b      	adds	r3, r7, #5
    e5ca:	781a      	ldrb	r2, [r3, #0]
    e5cc:	0013      	movs	r3, r2
    e5ce:	021b      	lsls	r3, r3, #8
    e5d0:	1a99      	subs	r1, r3, r2
    e5d2:	68fa      	ldr	r2, [r7, #12]
    e5d4:	4b7c      	ldr	r3, [pc, #496]	; (e7c8 <setDigitalLEDHue+0x29c>)
    e5d6:	0010      	movs	r0, r2
    e5d8:	4798      	blx	r3
    e5da:	000b      	movs	r3, r1
    e5dc:	0018      	movs	r0, r3
    e5de:	1d7b      	adds	r3, r7, #5
    e5e0:	781a      	ldrb	r2, [r3, #0]
    e5e2:	4b78      	ldr	r3, [pc, #480]	; (e7c4 <setDigitalLEDHue+0x298>)
    e5e4:	0011      	movs	r1, r2
    e5e6:	4798      	blx	r3
    e5e8:	0003      	movs	r3, r0
    e5ea:	b2db      	uxtb	r3, r3
    e5ec:	43db      	mvns	r3, r3
    e5ee:	b2da      	uxtb	r2, r3
    e5f0:	4b72      	ldr	r3, [pc, #456]	; (e7bc <setDigitalLEDHue+0x290>)
    e5f2:	551a      	strb	r2, [r3, r4]
    e5f4:	4b71      	ldr	r3, [pc, #452]	; (e7bc <setDigitalLEDHue+0x290>)
    e5f6:	5d1a      	ldrb	r2, [r3, r4]
    e5f8:	4b71      	ldr	r3, [pc, #452]	; (e7c0 <setDigitalLEDHue+0x294>)
    e5fa:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = (x%(255*zoom))/zoom;
    e5fc:	1cfb      	adds	r3, r7, #3
    e5fe:	781b      	ldrb	r3, [r3, #0]
    e600:	009b      	lsls	r3, r3, #2
    e602:	1ddd      	adds	r5, r3, #7
    e604:	1cfb      	adds	r3, r7, #3
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	009b      	lsls	r3, r3, #2
    e60a:	1ddc      	adds	r4, r3, #7
    e60c:	1d7b      	adds	r3, r7, #5
    e60e:	781a      	ldrb	r2, [r3, #0]
    e610:	0013      	movs	r3, r2
    e612:	021b      	lsls	r3, r3, #8
    e614:	1a99      	subs	r1, r3, r2
    e616:	68fa      	ldr	r2, [r7, #12]
    e618:	4b6b      	ldr	r3, [pc, #428]	; (e7c8 <setDigitalLEDHue+0x29c>)
    e61a:	0010      	movs	r0, r2
    e61c:	4798      	blx	r3
    e61e:	000b      	movs	r3, r1
    e620:	0018      	movs	r0, r3
    e622:	1d7b      	adds	r3, r7, #5
    e624:	781a      	ldrb	r2, [r3, #0]
    e626:	4b67      	ldr	r3, [pc, #412]	; (e7c4 <setDigitalLEDHue+0x298>)
    e628:	0011      	movs	r1, r2
    e62a:	4798      	blx	r3
    e62c:	0003      	movs	r3, r0
    e62e:	b2da      	uxtb	r2, r3
    e630:	4b62      	ldr	r3, [pc, #392]	; (e7bc <setDigitalLEDHue+0x290>)
    e632:	551a      	strb	r2, [r3, r4]
    e634:	4b61      	ldr	r3, [pc, #388]	; (e7bc <setDigitalLEDHue+0x290>)
    e636:	5d1a      	ldrb	r2, [r3, r4]
    e638:	4b61      	ldr	r3, [pc, #388]	; (e7c0 <setDigitalLEDHue+0x294>)
    e63a:	555a      	strb	r2, [r3, r5]
		} else if(x/(255*zoom) == 2){
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = 255-(x%(255*zoom))/zoom;
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = (x%(255*zoom))/zoom;
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = 0;
	}
}
    e63c:	e0ba      	b.n	e7b4 <setDigitalLEDHue+0x288>
		} else if(x/(255*zoom) == 1){
    e63e:	1d7b      	adds	r3, r7, #5
    e640:	781a      	ldrb	r2, [r3, #0]
    e642:	0013      	movs	r3, r2
    e644:	021b      	lsls	r3, r3, #8
    e646:	1a9a      	subs	r2, r3, r2
    e648:	4b5e      	ldr	r3, [pc, #376]	; (e7c4 <setDigitalLEDHue+0x298>)
    e64a:	0011      	movs	r1, r2
    e64c:	68f8      	ldr	r0, [r7, #12]
    e64e:	4798      	blx	r3
    e650:	0003      	movs	r3, r0
    e652:	2b01      	cmp	r3, #1
    e654:	d151      	bne.n	e6fa <setDigitalLEDHue+0x1ce>
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = (x%(255*zoom))/zoom;
    e656:	1cfb      	adds	r3, r7, #3
    e658:	781b      	ldrb	r3, [r3, #0]
    e65a:	009b      	lsls	r3, r3, #2
    e65c:	1d5d      	adds	r5, r3, #5
    e65e:	1cfb      	adds	r3, r7, #3
    e660:	781b      	ldrb	r3, [r3, #0]
    e662:	009b      	lsls	r3, r3, #2
    e664:	1d5c      	adds	r4, r3, #5
    e666:	1d7b      	adds	r3, r7, #5
    e668:	781a      	ldrb	r2, [r3, #0]
    e66a:	0013      	movs	r3, r2
    e66c:	021b      	lsls	r3, r3, #8
    e66e:	1a99      	subs	r1, r3, r2
    e670:	68fa      	ldr	r2, [r7, #12]
    e672:	4b55      	ldr	r3, [pc, #340]	; (e7c8 <setDigitalLEDHue+0x29c>)
    e674:	0010      	movs	r0, r2
    e676:	4798      	blx	r3
    e678:	000b      	movs	r3, r1
    e67a:	0018      	movs	r0, r3
    e67c:	1d7b      	adds	r3, r7, #5
    e67e:	781a      	ldrb	r2, [r3, #0]
    e680:	4b50      	ldr	r3, [pc, #320]	; (e7c4 <setDigitalLEDHue+0x298>)
    e682:	0011      	movs	r1, r2
    e684:	4798      	blx	r3
    e686:	0003      	movs	r3, r0
    e688:	b2da      	uxtb	r2, r3
    e68a:	4b4c      	ldr	r3, [pc, #304]	; (e7bc <setDigitalLEDHue+0x290>)
    e68c:	551a      	strb	r2, [r3, r4]
    e68e:	4b4b      	ldr	r3, [pc, #300]	; (e7bc <setDigitalLEDHue+0x290>)
    e690:	5d1a      	ldrb	r2, [r3, r4]
    e692:	4b4b      	ldr	r3, [pc, #300]	; (e7c0 <setDigitalLEDHue+0x294>)
    e694:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = 0;
    e696:	1cfb      	adds	r3, r7, #3
    e698:	781b      	ldrb	r3, [r3, #0]
    e69a:	009b      	lsls	r3, r3, #2
    e69c:	1d9a      	adds	r2, r3, #6
    e69e:	1cfb      	adds	r3, r7, #3
    e6a0:	781b      	ldrb	r3, [r3, #0]
    e6a2:	009b      	lsls	r3, r3, #2
    e6a4:	3306      	adds	r3, #6
    e6a6:	4945      	ldr	r1, [pc, #276]	; (e7bc <setDigitalLEDHue+0x290>)
    e6a8:	2000      	movs	r0, #0
    e6aa:	54c8      	strb	r0, [r1, r3]
    e6ac:	4943      	ldr	r1, [pc, #268]	; (e7bc <setDigitalLEDHue+0x290>)
    e6ae:	5cc9      	ldrb	r1, [r1, r3]
    e6b0:	4b43      	ldr	r3, [pc, #268]	; (e7c0 <setDigitalLEDHue+0x294>)
    e6b2:	5499      	strb	r1, [r3, r2]
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = 255-(x%(255*zoom))/zoom;
    e6b4:	1cfb      	adds	r3, r7, #3
    e6b6:	781b      	ldrb	r3, [r3, #0]
    e6b8:	009b      	lsls	r3, r3, #2
    e6ba:	1ddd      	adds	r5, r3, #7
    e6bc:	1cfb      	adds	r3, r7, #3
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	009b      	lsls	r3, r3, #2
    e6c2:	1ddc      	adds	r4, r3, #7
    e6c4:	1d7b      	adds	r3, r7, #5
    e6c6:	781a      	ldrb	r2, [r3, #0]
    e6c8:	0013      	movs	r3, r2
    e6ca:	021b      	lsls	r3, r3, #8
    e6cc:	1a99      	subs	r1, r3, r2
    e6ce:	68fa      	ldr	r2, [r7, #12]
    e6d0:	4b3d      	ldr	r3, [pc, #244]	; (e7c8 <setDigitalLEDHue+0x29c>)
    e6d2:	0010      	movs	r0, r2
    e6d4:	4798      	blx	r3
    e6d6:	000b      	movs	r3, r1
    e6d8:	0018      	movs	r0, r3
    e6da:	1d7b      	adds	r3, r7, #5
    e6dc:	781a      	ldrb	r2, [r3, #0]
    e6de:	4b39      	ldr	r3, [pc, #228]	; (e7c4 <setDigitalLEDHue+0x298>)
    e6e0:	0011      	movs	r1, r2
    e6e2:	4798      	blx	r3
    e6e4:	0003      	movs	r3, r0
    e6e6:	b2db      	uxtb	r3, r3
    e6e8:	43db      	mvns	r3, r3
    e6ea:	b2da      	uxtb	r2, r3
    e6ec:	4b33      	ldr	r3, [pc, #204]	; (e7bc <setDigitalLEDHue+0x290>)
    e6ee:	551a      	strb	r2, [r3, r4]
    e6f0:	4b32      	ldr	r3, [pc, #200]	; (e7bc <setDigitalLEDHue+0x290>)
    e6f2:	5d1a      	ldrb	r2, [r3, r4]
    e6f4:	4b32      	ldr	r3, [pc, #200]	; (e7c0 <setDigitalLEDHue+0x294>)
    e6f6:	555a      	strb	r2, [r3, r5]
}
    e6f8:	e05c      	b.n	e7b4 <setDigitalLEDHue+0x288>
		} else if(x/(255*zoom) == 2){
    e6fa:	1d7b      	adds	r3, r7, #5
    e6fc:	781a      	ldrb	r2, [r3, #0]
    e6fe:	0013      	movs	r3, r2
    e700:	021b      	lsls	r3, r3, #8
    e702:	1a9a      	subs	r2, r3, r2
    e704:	4b2f      	ldr	r3, [pc, #188]	; (e7c4 <setDigitalLEDHue+0x298>)
    e706:	0011      	movs	r1, r2
    e708:	68f8      	ldr	r0, [r7, #12]
    e70a:	4798      	blx	r3
    e70c:	0003      	movs	r3, r0
    e70e:	2b02      	cmp	r3, #2
    e710:	d150      	bne.n	e7b4 <setDigitalLEDHue+0x288>
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = 255-(x%(255*zoom))/zoom;
    e712:	1cfb      	adds	r3, r7, #3
    e714:	781b      	ldrb	r3, [r3, #0]
    e716:	009b      	lsls	r3, r3, #2
    e718:	1d5d      	adds	r5, r3, #5
    e71a:	1cfb      	adds	r3, r7, #3
    e71c:	781b      	ldrb	r3, [r3, #0]
    e71e:	009b      	lsls	r3, r3, #2
    e720:	1d5c      	adds	r4, r3, #5
    e722:	1d7b      	adds	r3, r7, #5
    e724:	781a      	ldrb	r2, [r3, #0]
    e726:	0013      	movs	r3, r2
    e728:	021b      	lsls	r3, r3, #8
    e72a:	1a99      	subs	r1, r3, r2
    e72c:	68fa      	ldr	r2, [r7, #12]
    e72e:	4b26      	ldr	r3, [pc, #152]	; (e7c8 <setDigitalLEDHue+0x29c>)
    e730:	0010      	movs	r0, r2
    e732:	4798      	blx	r3
    e734:	000b      	movs	r3, r1
    e736:	0018      	movs	r0, r3
    e738:	1d7b      	adds	r3, r7, #5
    e73a:	781a      	ldrb	r2, [r3, #0]
    e73c:	4b21      	ldr	r3, [pc, #132]	; (e7c4 <setDigitalLEDHue+0x298>)
    e73e:	0011      	movs	r1, r2
    e740:	4798      	blx	r3
    e742:	0003      	movs	r3, r0
    e744:	b2db      	uxtb	r3, r3
    e746:	43db      	mvns	r3, r3
    e748:	b2da      	uxtb	r2, r3
    e74a:	4b1c      	ldr	r3, [pc, #112]	; (e7bc <setDigitalLEDHue+0x290>)
    e74c:	551a      	strb	r2, [r3, r4]
    e74e:	4b1b      	ldr	r3, [pc, #108]	; (e7bc <setDigitalLEDHue+0x290>)
    e750:	5d1a      	ldrb	r2, [r3, r4]
    e752:	4b1b      	ldr	r3, [pc, #108]	; (e7c0 <setDigitalLEDHue+0x294>)
    e754:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = (x%(255*zoom))/zoom;
    e756:	1cfb      	adds	r3, r7, #3
    e758:	781b      	ldrb	r3, [r3, #0]
    e75a:	009b      	lsls	r3, r3, #2
    e75c:	1d9d      	adds	r5, r3, #6
    e75e:	1cfb      	adds	r3, r7, #3
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	009b      	lsls	r3, r3, #2
    e764:	1d9c      	adds	r4, r3, #6
    e766:	1d7b      	adds	r3, r7, #5
    e768:	781a      	ldrb	r2, [r3, #0]
    e76a:	0013      	movs	r3, r2
    e76c:	021b      	lsls	r3, r3, #8
    e76e:	1a99      	subs	r1, r3, r2
    e770:	68fa      	ldr	r2, [r7, #12]
    e772:	4b15      	ldr	r3, [pc, #84]	; (e7c8 <setDigitalLEDHue+0x29c>)
    e774:	0010      	movs	r0, r2
    e776:	4798      	blx	r3
    e778:	000b      	movs	r3, r1
    e77a:	0018      	movs	r0, r3
    e77c:	1d7b      	adds	r3, r7, #5
    e77e:	781a      	ldrb	r2, [r3, #0]
    e780:	4b10      	ldr	r3, [pc, #64]	; (e7c4 <setDigitalLEDHue+0x298>)
    e782:	0011      	movs	r1, r2
    e784:	4798      	blx	r3
    e786:	0003      	movs	r3, r0
    e788:	b2da      	uxtb	r2, r3
    e78a:	4b0c      	ldr	r3, [pc, #48]	; (e7bc <setDigitalLEDHue+0x290>)
    e78c:	551a      	strb	r2, [r3, r4]
    e78e:	4b0b      	ldr	r3, [pc, #44]	; (e7bc <setDigitalLEDHue+0x290>)
    e790:	5d1a      	ldrb	r2, [r3, r4]
    e792:	4b0b      	ldr	r3, [pc, #44]	; (e7c0 <setDigitalLEDHue+0x294>)
    e794:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = 0;
    e796:	1cfb      	adds	r3, r7, #3
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	009b      	lsls	r3, r3, #2
    e79c:	1dda      	adds	r2, r3, #7
    e79e:	1cfb      	adds	r3, r7, #3
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	009b      	lsls	r3, r3, #2
    e7a4:	3307      	adds	r3, #7
    e7a6:	4905      	ldr	r1, [pc, #20]	; (e7bc <setDigitalLEDHue+0x290>)
    e7a8:	2000      	movs	r0, #0
    e7aa:	54c8      	strb	r0, [r1, r3]
    e7ac:	4903      	ldr	r1, [pc, #12]	; (e7bc <setDigitalLEDHue+0x290>)
    e7ae:	5cc9      	ldrb	r1, [r1, r3]
    e7b0:	4b03      	ldr	r3, [pc, #12]	; (e7c0 <setDigitalLEDHue+0x294>)
    e7b2:	5499      	strb	r1, [r3, r2]
}
    e7b4:	46c0      	nop			; (mov r8, r8)
    e7b6:	46bd      	mov	sp, r7
    e7b8:	b004      	add	sp, #16
    e7ba:	bdb0      	pop	{r4, r5, r7, pc}
    e7bc:	20000598 	.word	0x20000598
    e7c0:	20001440 	.word	0x20001440
    e7c4:	00019295 	.word	0x00019295
    e7c8:	00019461 	.word	0x00019461

0000e7cc <L_digital_write>:

void L_digital_write(uint16_t led_count){
    e7cc:	b580      	push	{r7, lr}
    e7ce:	b082      	sub	sp, #8
    e7d0:	af00      	add	r7, sp, #0
    e7d2:	0002      	movs	r2, r0
    e7d4:	1dbb      	adds	r3, r7, #6
    e7d6:	801a      	strh	r2, [r3, #0]
	if(RGB_led_type == RGB_DIGITAL_APA102){
    e7d8:	4b06      	ldr	r3, [pc, #24]	; (e7f4 <L_digital_write+0x28>)
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	2b01      	cmp	r3, #1
    e7de:	d104      	bne.n	e7ea <L_digital_write+0x1e>
		L_APA_write(led_count);
    e7e0:	1dbb      	adds	r3, r7, #6
    e7e2:	881b      	ldrh	r3, [r3, #0]
    e7e4:	0018      	movs	r0, r3
    e7e6:	4b04      	ldr	r3, [pc, #16]	; (e7f8 <L_digital_write+0x2c>)
    e7e8:	4798      	blx	r3
	}/*else if(RGB_led_type == RGB_DIGITAL_WS2815){
		L_WS_write(led_count);
	}*/
}
    e7ea:	46c0      	nop			; (mov r8, r8)
    e7ec:	46bd      	mov	sp, r7
    e7ee:	b002      	add	sp, #8
    e7f0:	bd80      	pop	{r7, pc}
    e7f2:	46c0      	nop			; (mov r8, r8)
    e7f4:	20001a88 	.word	0x20001a88
    e7f8:	0000a1ad 	.word	0x0000a1ad

0000e7fc <R_digital_write>:

void R_digital_write(uint16_t led_count){
    e7fc:	b580      	push	{r7, lr}
    e7fe:	b082      	sub	sp, #8
    e800:	af00      	add	r7, sp, #0
    e802:	0002      	movs	r2, r0
    e804:	1dbb      	adds	r3, r7, #6
    e806:	801a      	strh	r2, [r3, #0]
	if(RGB_led_type == RGB_DIGITAL_APA102){
    e808:	4b06      	ldr	r3, [pc, #24]	; (e824 <R_digital_write+0x28>)
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	2b01      	cmp	r3, #1
    e80e:	d104      	bne.n	e81a <R_digital_write+0x1e>
		R_APA_write(led_count);
    e810:	1dbb      	adds	r3, r7, #6
    e812:	881b      	ldrh	r3, [r3, #0]
    e814:	0018      	movs	r0, r3
    e816:	4b04      	ldr	r3, [pc, #16]	; (e828 <R_digital_write+0x2c>)
    e818:	4798      	blx	r3
	}/*else if(RGB_led_type == RGB_DIGITAL_WS2815){
		R_WS_write(led_count);
	}*/
}
    e81a:	46c0      	nop			; (mov r8, r8)
    e81c:	46bd      	mov	sp, r7
    e81e:	b002      	add	sp, #8
    e820:	bd80      	pop	{r7, pc}
    e822:	46c0      	nop			; (mov r8, r8)
    e824:	20001a88 	.word	0x20001a88
    e828:	0000a21d 	.word	0x0000a21d

0000e82c <testOutputs>:

void testOutputs(void){
    e82c:	b580      	push	{r7, lr}
    e82e:	b08c      	sub	sp, #48	; 0x30
    e830:	af00      	add	r7, sp, #0
	uint32_t timer = millis();
    e832:	4bb9      	ldr	r3, [pc, #740]	; (eb18 <testOutputs+0x2ec>)
    e834:	4798      	blx	r3
    e836:	0003      	movs	r3, r0
    e838:	603b      	str	r3, [r7, #0]
	setRed(0);
    e83a:	2000      	movs	r0, #0
    e83c:	4bb7      	ldr	r3, [pc, #732]	; (eb1c <testOutputs+0x2f0>)
    e83e:	4798      	blx	r3
	setWhite(0);
    e840:	2000      	movs	r0, #0
    e842:	4bb7      	ldr	r3, [pc, #732]	; (eb20 <testOutputs+0x2f4>)
    e844:	4798      	blx	r3
	setAux(false);
    e846:	2000      	movs	r0, #0
    e848:	4bb6      	ldr	r3, [pc, #728]	; (eb24 <testOutputs+0x2f8>)
    e84a:	4798      	blx	r3
	turn_off_side_lights();
    e84c:	4bb6      	ldr	r3, [pc, #728]	; (eb28 <testOutputs+0x2fc>)
    e84e:	4798      	blx	r3

	if(configured_RGB_led_type == RGB_ANALOG){
    e850:	4bb6      	ldr	r3, [pc, #728]	; (eb2c <testOutputs+0x300>)
    e852:	781b      	ldrb	r3, [r3, #0]
    e854:	2b00      	cmp	r3, #0
    e856:	d000      	beq.n	e85a <testOutputs+0x2e>
    e858:	e14e      	b.n	eaf8 <testOutputs+0x2cc>
		for(int i = 0; i < 0xFFFF; i+=256){
    e85a:	2300      	movs	r3, #0
    e85c:	62fb      	str	r3, [r7, #44]	; 0x2c
    e85e:	e01b      	b.n	e898 <testOutputs+0x6c>
			setLeftRGB(i,0,0);
    e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e862:	b29b      	uxth	r3, r3
    e864:	2200      	movs	r2, #0
    e866:	2100      	movs	r1, #0
    e868:	0018      	movs	r0, r3
    e86a:	4bb1      	ldr	r3, [pc, #708]	; (eb30 <testOutputs+0x304>)
    e86c:	4798      	blx	r3
			while(!check_timer_expired(&timer, 3)){}
    e86e:	46c0      	nop			; (mov r8, r8)
    e870:	003b      	movs	r3, r7
    e872:	2103      	movs	r1, #3
    e874:	0018      	movs	r0, r3
    e876:	4baf      	ldr	r3, [pc, #700]	; (eb34 <testOutputs+0x308>)
    e878:	4798      	blx	r3
    e87a:	0003      	movs	r3, r0
    e87c:	001a      	movs	r2, r3
    e87e:	2301      	movs	r3, #1
    e880:	4053      	eors	r3, r2
    e882:	b2db      	uxtb	r3, r3
    e884:	2b00      	cmp	r3, #0
    e886:	d1f3      	bne.n	e870 <testOutputs+0x44>
			timer = millis();
    e888:	4ba3      	ldr	r3, [pc, #652]	; (eb18 <testOutputs+0x2ec>)
    e88a:	4798      	blx	r3
    e88c:	0003      	movs	r3, r0
    e88e:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 0xFFFF; i+=256){
    e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e892:	3301      	adds	r3, #1
    e894:	33ff      	adds	r3, #255	; 0xff
    e896:	62fb      	str	r3, [r7, #44]	; 0x2c
    e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e89a:	4aa7      	ldr	r2, [pc, #668]	; (eb38 <testOutputs+0x30c>)
    e89c:	4293      	cmp	r3, r2
    e89e:	dddf      	ble.n	e860 <testOutputs+0x34>
		}
	
		while(!check_timer_expired(&timer, 500)){}
    e8a0:	46c0      	nop			; (mov r8, r8)
    e8a2:	23fa      	movs	r3, #250	; 0xfa
    e8a4:	005a      	lsls	r2, r3, #1
    e8a6:	003b      	movs	r3, r7
    e8a8:	0011      	movs	r1, r2
    e8aa:	0018      	movs	r0, r3
    e8ac:	4ba1      	ldr	r3, [pc, #644]	; (eb34 <testOutputs+0x308>)
    e8ae:	4798      	blx	r3
    e8b0:	0003      	movs	r3, r0
    e8b2:	001a      	movs	r2, r3
    e8b4:	2301      	movs	r3, #1
    e8b6:	4053      	eors	r3, r2
    e8b8:	b2db      	uxtb	r3, r3
    e8ba:	2b00      	cmp	r3, #0
    e8bc:	d1f1      	bne.n	e8a2 <testOutputs+0x76>
		timer = millis();
    e8be:	4b96      	ldr	r3, [pc, #600]	; (eb18 <testOutputs+0x2ec>)
    e8c0:	4798      	blx	r3
    e8c2:	0003      	movs	r3, r0
    e8c4:	603b      	str	r3, [r7, #0]

		for(int i = 0; i < 0xFFFF; i+=256){
    e8c6:	2300      	movs	r3, #0
    e8c8:	62bb      	str	r3, [r7, #40]	; 0x28
    e8ca:	e01b      	b.n	e904 <testOutputs+0xd8>
			setLeftRGB(0,i,0);
    e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e8ce:	b29b      	uxth	r3, r3
    e8d0:	2200      	movs	r2, #0
    e8d2:	0019      	movs	r1, r3
    e8d4:	2000      	movs	r0, #0
    e8d6:	4b96      	ldr	r3, [pc, #600]	; (eb30 <testOutputs+0x304>)
    e8d8:	4798      	blx	r3
			while(!check_timer_expired(&timer, 3)){}
    e8da:	46c0      	nop			; (mov r8, r8)
    e8dc:	003b      	movs	r3, r7
    e8de:	2103      	movs	r1, #3
    e8e0:	0018      	movs	r0, r3
    e8e2:	4b94      	ldr	r3, [pc, #592]	; (eb34 <testOutputs+0x308>)
    e8e4:	4798      	blx	r3
    e8e6:	0003      	movs	r3, r0
    e8e8:	001a      	movs	r2, r3
    e8ea:	2301      	movs	r3, #1
    e8ec:	4053      	eors	r3, r2
    e8ee:	b2db      	uxtb	r3, r3
    e8f0:	2b00      	cmp	r3, #0
    e8f2:	d1f3      	bne.n	e8dc <testOutputs+0xb0>
			timer = millis();
    e8f4:	4b88      	ldr	r3, [pc, #544]	; (eb18 <testOutputs+0x2ec>)
    e8f6:	4798      	blx	r3
    e8f8:	0003      	movs	r3, r0
    e8fa:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 0xFFFF; i+=256){
    e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e8fe:	3301      	adds	r3, #1
    e900:	33ff      	adds	r3, #255	; 0xff
    e902:	62bb      	str	r3, [r7, #40]	; 0x28
    e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e906:	4a8c      	ldr	r2, [pc, #560]	; (eb38 <testOutputs+0x30c>)
    e908:	4293      	cmp	r3, r2
    e90a:	dddf      	ble.n	e8cc <testOutputs+0xa0>
		}
	
		while(!check_timer_expired(&timer, 500)){}
    e90c:	46c0      	nop			; (mov r8, r8)
    e90e:	23fa      	movs	r3, #250	; 0xfa
    e910:	005a      	lsls	r2, r3, #1
    e912:	003b      	movs	r3, r7
    e914:	0011      	movs	r1, r2
    e916:	0018      	movs	r0, r3
    e918:	4b86      	ldr	r3, [pc, #536]	; (eb34 <testOutputs+0x308>)
    e91a:	4798      	blx	r3
    e91c:	0003      	movs	r3, r0
    e91e:	001a      	movs	r2, r3
    e920:	2301      	movs	r3, #1
    e922:	4053      	eors	r3, r2
    e924:	b2db      	uxtb	r3, r3
    e926:	2b00      	cmp	r3, #0
    e928:	d1f1      	bne.n	e90e <testOutputs+0xe2>
		timer = millis();
    e92a:	4b7b      	ldr	r3, [pc, #492]	; (eb18 <testOutputs+0x2ec>)
    e92c:	4798      	blx	r3
    e92e:	0003      	movs	r3, r0
    e930:	603b      	str	r3, [r7, #0]

		for(int i = 0; i < 0xFFFF; i+=256){
    e932:	2300      	movs	r3, #0
    e934:	627b      	str	r3, [r7, #36]	; 0x24
    e936:	e01b      	b.n	e970 <testOutputs+0x144>
			setLeftRGB(0,0,i);
    e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e93a:	b29b      	uxth	r3, r3
    e93c:	001a      	movs	r2, r3
    e93e:	2100      	movs	r1, #0
    e940:	2000      	movs	r0, #0
    e942:	4b7b      	ldr	r3, [pc, #492]	; (eb30 <testOutputs+0x304>)
    e944:	4798      	blx	r3
			while(!check_timer_expired(&timer, 3)){}
    e946:	46c0      	nop			; (mov r8, r8)
    e948:	003b      	movs	r3, r7
    e94a:	2103      	movs	r1, #3
    e94c:	0018      	movs	r0, r3
    e94e:	4b79      	ldr	r3, [pc, #484]	; (eb34 <testOutputs+0x308>)
    e950:	4798      	blx	r3
    e952:	0003      	movs	r3, r0
    e954:	001a      	movs	r2, r3
    e956:	2301      	movs	r3, #1
    e958:	4053      	eors	r3, r2
    e95a:	b2db      	uxtb	r3, r3
    e95c:	2b00      	cmp	r3, #0
    e95e:	d1f3      	bne.n	e948 <testOutputs+0x11c>
			timer = millis();
    e960:	4b6d      	ldr	r3, [pc, #436]	; (eb18 <testOutputs+0x2ec>)
    e962:	4798      	blx	r3
    e964:	0003      	movs	r3, r0
    e966:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 0xFFFF; i+=256){
    e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e96a:	3301      	adds	r3, #1
    e96c:	33ff      	adds	r3, #255	; 0xff
    e96e:	627b      	str	r3, [r7, #36]	; 0x24
    e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e972:	4a71      	ldr	r2, [pc, #452]	; (eb38 <testOutputs+0x30c>)
    e974:	4293      	cmp	r3, r2
    e976:	dddf      	ble.n	e938 <testOutputs+0x10c>
		}
	
		while(!check_timer_expired(&timer, 500)){}
    e978:	46c0      	nop			; (mov r8, r8)
    e97a:	23fa      	movs	r3, #250	; 0xfa
    e97c:	005a      	lsls	r2, r3, #1
    e97e:	003b      	movs	r3, r7
    e980:	0011      	movs	r1, r2
    e982:	0018      	movs	r0, r3
    e984:	4b6b      	ldr	r3, [pc, #428]	; (eb34 <testOutputs+0x308>)
    e986:	4798      	blx	r3
    e988:	0003      	movs	r3, r0
    e98a:	001a      	movs	r2, r3
    e98c:	2301      	movs	r3, #1
    e98e:	4053      	eors	r3, r2
    e990:	b2db      	uxtb	r3, r3
    e992:	2b00      	cmp	r3, #0
    e994:	d1f1      	bne.n	e97a <testOutputs+0x14e>
		timer = millis();
    e996:	4b60      	ldr	r3, [pc, #384]	; (eb18 <testOutputs+0x2ec>)
    e998:	4798      	blx	r3
    e99a:	0003      	movs	r3, r0
    e99c:	603b      	str	r3, [r7, #0]
		setLeftRGB(0,0,0);
    e99e:	2200      	movs	r2, #0
    e9a0:	2100      	movs	r1, #0
    e9a2:	2000      	movs	r0, #0
    e9a4:	4b62      	ldr	r3, [pc, #392]	; (eb30 <testOutputs+0x304>)
    e9a6:	4798      	blx	r3

		for(int i = 0; i < 0xFFFF; i+=256){
    e9a8:	2300      	movs	r3, #0
    e9aa:	623b      	str	r3, [r7, #32]
    e9ac:	e01b      	b.n	e9e6 <testOutputs+0x1ba>
			setRightRGB(i,0,0);
    e9ae:	6a3b      	ldr	r3, [r7, #32]
    e9b0:	b29b      	uxth	r3, r3
    e9b2:	2200      	movs	r2, #0
    e9b4:	2100      	movs	r1, #0
    e9b6:	0018      	movs	r0, r3
    e9b8:	4b60      	ldr	r3, [pc, #384]	; (eb3c <testOutputs+0x310>)
    e9ba:	4798      	blx	r3
			while(!check_timer_expired(&timer, 3)){}
    e9bc:	46c0      	nop			; (mov r8, r8)
    e9be:	003b      	movs	r3, r7
    e9c0:	2103      	movs	r1, #3
    e9c2:	0018      	movs	r0, r3
    e9c4:	4b5b      	ldr	r3, [pc, #364]	; (eb34 <testOutputs+0x308>)
    e9c6:	4798      	blx	r3
    e9c8:	0003      	movs	r3, r0
    e9ca:	001a      	movs	r2, r3
    e9cc:	2301      	movs	r3, #1
    e9ce:	4053      	eors	r3, r2
    e9d0:	b2db      	uxtb	r3, r3
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d1f3      	bne.n	e9be <testOutputs+0x192>
			timer = millis();
    e9d6:	4b50      	ldr	r3, [pc, #320]	; (eb18 <testOutputs+0x2ec>)
    e9d8:	4798      	blx	r3
    e9da:	0003      	movs	r3, r0
    e9dc:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 0xFFFF; i+=256){
    e9de:	6a3b      	ldr	r3, [r7, #32]
    e9e0:	3301      	adds	r3, #1
    e9e2:	33ff      	adds	r3, #255	; 0xff
    e9e4:	623b      	str	r3, [r7, #32]
    e9e6:	6a3b      	ldr	r3, [r7, #32]
    e9e8:	4a53      	ldr	r2, [pc, #332]	; (eb38 <testOutputs+0x30c>)
    e9ea:	4293      	cmp	r3, r2
    e9ec:	dddf      	ble.n	e9ae <testOutputs+0x182>
		}
	
		while(!check_timer_expired(&timer, 500)){}
    e9ee:	46c0      	nop			; (mov r8, r8)
    e9f0:	23fa      	movs	r3, #250	; 0xfa
    e9f2:	005a      	lsls	r2, r3, #1
    e9f4:	003b      	movs	r3, r7
    e9f6:	0011      	movs	r1, r2
    e9f8:	0018      	movs	r0, r3
    e9fa:	4b4e      	ldr	r3, [pc, #312]	; (eb34 <testOutputs+0x308>)
    e9fc:	4798      	blx	r3
    e9fe:	0003      	movs	r3, r0
    ea00:	001a      	movs	r2, r3
    ea02:	2301      	movs	r3, #1
    ea04:	4053      	eors	r3, r2
    ea06:	b2db      	uxtb	r3, r3
    ea08:	2b00      	cmp	r3, #0
    ea0a:	d1f1      	bne.n	e9f0 <testOutputs+0x1c4>
		timer = millis();
    ea0c:	4b42      	ldr	r3, [pc, #264]	; (eb18 <testOutputs+0x2ec>)
    ea0e:	4798      	blx	r3
    ea10:	0003      	movs	r3, r0
    ea12:	603b      	str	r3, [r7, #0]

		for(int i = 0; i < 0xFFFF; i+=256){
    ea14:	2300      	movs	r3, #0
    ea16:	61fb      	str	r3, [r7, #28]
    ea18:	e01b      	b.n	ea52 <testOutputs+0x226>
			setRightRGB(0,i,0);
    ea1a:	69fb      	ldr	r3, [r7, #28]
    ea1c:	b29b      	uxth	r3, r3
    ea1e:	2200      	movs	r2, #0
    ea20:	0019      	movs	r1, r3
    ea22:	2000      	movs	r0, #0
    ea24:	4b45      	ldr	r3, [pc, #276]	; (eb3c <testOutputs+0x310>)
    ea26:	4798      	blx	r3
			while(!check_timer_expired(&timer, 3)){}
    ea28:	46c0      	nop			; (mov r8, r8)
    ea2a:	003b      	movs	r3, r7
    ea2c:	2103      	movs	r1, #3
    ea2e:	0018      	movs	r0, r3
    ea30:	4b40      	ldr	r3, [pc, #256]	; (eb34 <testOutputs+0x308>)
    ea32:	4798      	blx	r3
    ea34:	0003      	movs	r3, r0
    ea36:	001a      	movs	r2, r3
    ea38:	2301      	movs	r3, #1
    ea3a:	4053      	eors	r3, r2
    ea3c:	b2db      	uxtb	r3, r3
    ea3e:	2b00      	cmp	r3, #0
    ea40:	d1f3      	bne.n	ea2a <testOutputs+0x1fe>
			timer = millis();
    ea42:	4b35      	ldr	r3, [pc, #212]	; (eb18 <testOutputs+0x2ec>)
    ea44:	4798      	blx	r3
    ea46:	0003      	movs	r3, r0
    ea48:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 0xFFFF; i+=256){
    ea4a:	69fb      	ldr	r3, [r7, #28]
    ea4c:	3301      	adds	r3, #1
    ea4e:	33ff      	adds	r3, #255	; 0xff
    ea50:	61fb      	str	r3, [r7, #28]
    ea52:	69fb      	ldr	r3, [r7, #28]
    ea54:	4a38      	ldr	r2, [pc, #224]	; (eb38 <testOutputs+0x30c>)
    ea56:	4293      	cmp	r3, r2
    ea58:	dddf      	ble.n	ea1a <testOutputs+0x1ee>
		}
	
		while(!check_timer_expired(&timer, 500)){}
    ea5a:	46c0      	nop			; (mov r8, r8)
    ea5c:	23fa      	movs	r3, #250	; 0xfa
    ea5e:	005a      	lsls	r2, r3, #1
    ea60:	003b      	movs	r3, r7
    ea62:	0011      	movs	r1, r2
    ea64:	0018      	movs	r0, r3
    ea66:	4b33      	ldr	r3, [pc, #204]	; (eb34 <testOutputs+0x308>)
    ea68:	4798      	blx	r3
    ea6a:	0003      	movs	r3, r0
    ea6c:	001a      	movs	r2, r3
    ea6e:	2301      	movs	r3, #1
    ea70:	4053      	eors	r3, r2
    ea72:	b2db      	uxtb	r3, r3
    ea74:	2b00      	cmp	r3, #0
    ea76:	d1f1      	bne.n	ea5c <testOutputs+0x230>
		timer = millis();
    ea78:	4b27      	ldr	r3, [pc, #156]	; (eb18 <testOutputs+0x2ec>)
    ea7a:	4798      	blx	r3
    ea7c:	0003      	movs	r3, r0
    ea7e:	603b      	str	r3, [r7, #0]

		for(int i = 0; i < 0xFFFF; i+=256){
    ea80:	2300      	movs	r3, #0
    ea82:	61bb      	str	r3, [r7, #24]
    ea84:	e01b      	b.n	eabe <testOutputs+0x292>
			setRightRGB(0,0,i);
    ea86:	69bb      	ldr	r3, [r7, #24]
    ea88:	b29b      	uxth	r3, r3
    ea8a:	001a      	movs	r2, r3
    ea8c:	2100      	movs	r1, #0
    ea8e:	2000      	movs	r0, #0
    ea90:	4b2a      	ldr	r3, [pc, #168]	; (eb3c <testOutputs+0x310>)
    ea92:	4798      	blx	r3
			while(!check_timer_expired(&timer, 3)){}
    ea94:	46c0      	nop			; (mov r8, r8)
    ea96:	003b      	movs	r3, r7
    ea98:	2103      	movs	r1, #3
    ea9a:	0018      	movs	r0, r3
    ea9c:	4b25      	ldr	r3, [pc, #148]	; (eb34 <testOutputs+0x308>)
    ea9e:	4798      	blx	r3
    eaa0:	0003      	movs	r3, r0
    eaa2:	001a      	movs	r2, r3
    eaa4:	2301      	movs	r3, #1
    eaa6:	4053      	eors	r3, r2
    eaa8:	b2db      	uxtb	r3, r3
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d1f3      	bne.n	ea96 <testOutputs+0x26a>
			timer = millis();
    eaae:	4b1a      	ldr	r3, [pc, #104]	; (eb18 <testOutputs+0x2ec>)
    eab0:	4798      	blx	r3
    eab2:	0003      	movs	r3, r0
    eab4:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 0xFFFF; i+=256){
    eab6:	69bb      	ldr	r3, [r7, #24]
    eab8:	3301      	adds	r3, #1
    eaba:	33ff      	adds	r3, #255	; 0xff
    eabc:	61bb      	str	r3, [r7, #24]
    eabe:	69bb      	ldr	r3, [r7, #24]
    eac0:	4a1d      	ldr	r2, [pc, #116]	; (eb38 <testOutputs+0x30c>)
    eac2:	4293      	cmp	r3, r2
    eac4:	dddf      	ble.n	ea86 <testOutputs+0x25a>
		}
	
		while(!check_timer_expired(&timer, 500)){}
    eac6:	46c0      	nop			; (mov r8, r8)
    eac8:	23fa      	movs	r3, #250	; 0xfa
    eaca:	005a      	lsls	r2, r3, #1
    eacc:	003b      	movs	r3, r7
    eace:	0011      	movs	r1, r2
    ead0:	0018      	movs	r0, r3
    ead2:	4b18      	ldr	r3, [pc, #96]	; (eb34 <testOutputs+0x308>)
    ead4:	4798      	blx	r3
    ead6:	0003      	movs	r3, r0
    ead8:	001a      	movs	r2, r3
    eada:	2301      	movs	r3, #1
    eadc:	4053      	eors	r3, r2
    eade:	b2db      	uxtb	r3, r3
    eae0:	2b00      	cmp	r3, #0
    eae2:	d1f1      	bne.n	eac8 <testOutputs+0x29c>
		timer = millis();
    eae4:	4b0c      	ldr	r3, [pc, #48]	; (eb18 <testOutputs+0x2ec>)
    eae6:	4798      	blx	r3
    eae8:	0003      	movs	r3, r0
    eaea:	603b      	str	r3, [r7, #0]
		setRightRGB(0,0,0);
    eaec:	2200      	movs	r2, #0
    eaee:	2100      	movs	r1, #0
    eaf0:	2000      	movs	r0, #0
    eaf2:	4b12      	ldr	r3, [pc, #72]	; (eb3c <testOutputs+0x310>)
    eaf4:	4798      	blx	r3
    eaf6:	e19c      	b.n	ee32 <testOutputs+0x606>
	} else if(configured_RGB_led_type == RGB_DIGITAL_APA102){
    eaf8:	4b0c      	ldr	r3, [pc, #48]	; (eb2c <testOutputs+0x300>)
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	2b01      	cmp	r3, #1
    eafe:	d000      	beq.n	eb02 <testOutputs+0x2d6>
    eb00:	e197      	b.n	ee32 <testOutputs+0x606>
		for(uint8_t j = 0; j < 255; j++){
    eb02:	2317      	movs	r3, #23
    eb04:	18fb      	adds	r3, r7, r3
    eb06:	2200      	movs	r2, #0
    eb08:	701a      	strb	r2, [r3, #0]
    eb0a:	e085      	b.n	ec18 <testOutputs+0x3ec>
			for(uint16_t i = 0; i < led_num; i++)
    eb0c:	2314      	movs	r3, #20
    eb0e:	18fb      	adds	r3, r7, r3
    eb10:	2200      	movs	r2, #0
    eb12:	801a      	strh	r2, [r3, #0]
    eb14:	e065      	b.n	ebe2 <testOutputs+0x3b6>
    eb16:	46c0      	nop			; (mov r8, r8)
    eb18:	00009f65 	.word	0x00009f65
    eb1c:	0000a561 	.word	0x0000a561
    eb20:	0000a529 	.word	0x0000a529
    eb24:	0000a599 	.word	0x0000a599
    eb28:	0000f039 	.word	0x0000f039
    eb2c:	200006c0 	.word	0x200006c0
    eb30:	0000a439 	.word	0x0000a439
    eb34:	00009fbd 	.word	0x00009fbd
    eb38:	0000fffe 	.word	0x0000fffe
    eb3c:	0000a4b5 	.word	0x0000a4b5
			{
				L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | brightness);
    eb40:	2314      	movs	r3, #20
    eb42:	18fb      	adds	r3, r7, r3
    eb44:	881b      	ldrh	r3, [r3, #0]
    eb46:	3301      	adds	r3, #1
    eb48:	009a      	lsls	r2, r3, #2
    eb4a:	2314      	movs	r3, #20
    eb4c:	18fb      	adds	r3, r7, r3
    eb4e:	881b      	ldrh	r3, [r3, #0]
    eb50:	3301      	adds	r3, #1
    eb52:	009b      	lsls	r3, r3, #2
    eb54:	201f      	movs	r0, #31
    eb56:	2120      	movs	r1, #32
    eb58:	4249      	negs	r1, r1
    eb5a:	4301      	orrs	r1, r0
    eb5c:	b2c8      	uxtb	r0, r1
    eb5e:	49d2      	ldr	r1, [pc, #840]	; (eea8 <testOutputs+0x67c>)
    eb60:	54c8      	strb	r0, [r1, r3]
    eb62:	49d1      	ldr	r1, [pc, #836]	; (eea8 <testOutputs+0x67c>)
    eb64:	5cc9      	ldrb	r1, [r1, r3]
    eb66:	4bd1      	ldr	r3, [pc, #836]	; (eeac <testOutputs+0x680>)
    eb68:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = j;
    eb6a:	2314      	movs	r3, #20
    eb6c:	18fb      	adds	r3, r7, r3
    eb6e:	881b      	ldrh	r3, [r3, #0]
    eb70:	009b      	lsls	r3, r3, #2
    eb72:	1d5a      	adds	r2, r3, #5
    eb74:	2314      	movs	r3, #20
    eb76:	18fb      	adds	r3, r7, r3
    eb78:	881b      	ldrh	r3, [r3, #0]
    eb7a:	009b      	lsls	r3, r3, #2
    eb7c:	3305      	adds	r3, #5
    eb7e:	49ca      	ldr	r1, [pc, #808]	; (eea8 <testOutputs+0x67c>)
    eb80:	2017      	movs	r0, #23
    eb82:	1838      	adds	r0, r7, r0
    eb84:	7800      	ldrb	r0, [r0, #0]
    eb86:	54c8      	strb	r0, [r1, r3]
    eb88:	49c7      	ldr	r1, [pc, #796]	; (eea8 <testOutputs+0x67c>)
    eb8a:	5cc9      	ldrb	r1, [r1, r3]
    eb8c:	4bc7      	ldr	r3, [pc, #796]	; (eeac <testOutputs+0x680>)
    eb8e:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
    eb90:	2314      	movs	r3, #20
    eb92:	18fb      	adds	r3, r7, r3
    eb94:	881b      	ldrh	r3, [r3, #0]
    eb96:	009b      	lsls	r3, r3, #2
    eb98:	1d9a      	adds	r2, r3, #6
    eb9a:	2314      	movs	r3, #20
    eb9c:	18fb      	adds	r3, r7, r3
    eb9e:	881b      	ldrh	r3, [r3, #0]
    eba0:	009b      	lsls	r3, r3, #2
    eba2:	3306      	adds	r3, #6
    eba4:	49c0      	ldr	r1, [pc, #768]	; (eea8 <testOutputs+0x67c>)
    eba6:	2000      	movs	r0, #0
    eba8:	54c8      	strb	r0, [r1, r3]
    ebaa:	49bf      	ldr	r1, [pc, #764]	; (eea8 <testOutputs+0x67c>)
    ebac:	5cc9      	ldrb	r1, [r1, r3]
    ebae:	4bbf      	ldr	r3, [pc, #764]	; (eeac <testOutputs+0x680>)
    ebb0:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
    ebb2:	2314      	movs	r3, #20
    ebb4:	18fb      	adds	r3, r7, r3
    ebb6:	881b      	ldrh	r3, [r3, #0]
    ebb8:	009b      	lsls	r3, r3, #2
    ebba:	1dda      	adds	r2, r3, #7
    ebbc:	2314      	movs	r3, #20
    ebbe:	18fb      	adds	r3, r7, r3
    ebc0:	881b      	ldrh	r3, [r3, #0]
    ebc2:	009b      	lsls	r3, r3, #2
    ebc4:	3307      	adds	r3, #7
    ebc6:	49b8      	ldr	r1, [pc, #736]	; (eea8 <testOutputs+0x67c>)
    ebc8:	2000      	movs	r0, #0
    ebca:	54c8      	strb	r0, [r1, r3]
    ebcc:	49b6      	ldr	r1, [pc, #728]	; (eea8 <testOutputs+0x67c>)
    ebce:	5cc9      	ldrb	r1, [r1, r3]
    ebd0:	4bb6      	ldr	r3, [pc, #728]	; (eeac <testOutputs+0x680>)
    ebd2:	5499      	strb	r1, [r3, r2]
			for(uint16_t i = 0; i < led_num; i++)
    ebd4:	2314      	movs	r3, #20
    ebd6:	18fb      	adds	r3, r7, r3
    ebd8:	881a      	ldrh	r2, [r3, #0]
    ebda:	2314      	movs	r3, #20
    ebdc:	18fb      	adds	r3, r7, r3
    ebde:	3201      	adds	r2, #1
    ebe0:	801a      	strh	r2, [r3, #0]
    ebe2:	4bb3      	ldr	r3, [pc, #716]	; (eeb0 <testOutputs+0x684>)
    ebe4:	781b      	ldrb	r3, [r3, #0]
    ebe6:	b29b      	uxth	r3, r3
    ebe8:	2214      	movs	r2, #20
    ebea:	18ba      	adds	r2, r7, r2
    ebec:	8812      	ldrh	r2, [r2, #0]
    ebee:	429a      	cmp	r2, r3
    ebf0:	d3a6      	bcc.n	eb40 <testOutputs+0x314>
			}
			L_digital_write(led_num);
    ebf2:	4baf      	ldr	r3, [pc, #700]	; (eeb0 <testOutputs+0x684>)
    ebf4:	781b      	ldrb	r3, [r3, #0]
    ebf6:	b29b      	uxth	r3, r3
    ebf8:	0018      	movs	r0, r3
    ebfa:	4bae      	ldr	r3, [pc, #696]	; (eeb4 <testOutputs+0x688>)
    ebfc:	4798      	blx	r3
			R_digital_write(led_num);
    ebfe:	4bac      	ldr	r3, [pc, #688]	; (eeb0 <testOutputs+0x684>)
    ec00:	781b      	ldrb	r3, [r3, #0]
    ec02:	b29b      	uxth	r3, r3
    ec04:	0018      	movs	r0, r3
    ec06:	4bac      	ldr	r3, [pc, #688]	; (eeb8 <testOutputs+0x68c>)
    ec08:	4798      	blx	r3
		for(uint8_t j = 0; j < 255; j++){
    ec0a:	2317      	movs	r3, #23
    ec0c:	18fb      	adds	r3, r7, r3
    ec0e:	781a      	ldrb	r2, [r3, #0]
    ec10:	2317      	movs	r3, #23
    ec12:	18fb      	adds	r3, r7, r3
    ec14:	3201      	adds	r2, #1
    ec16:	701a      	strb	r2, [r3, #0]
    ec18:	2317      	movs	r3, #23
    ec1a:	18fb      	adds	r3, r7, r3
    ec1c:	781b      	ldrb	r3, [r3, #0]
    ec1e:	2bff      	cmp	r3, #255	; 0xff
    ec20:	d000      	beq.n	ec24 <testOutputs+0x3f8>
    ec22:	e773      	b.n	eb0c <testOutputs+0x2e0>
		}
		for(uint8_t j = 0; j < 255; j++){
    ec24:	2313      	movs	r3, #19
    ec26:	18fb      	adds	r3, r7, r3
    ec28:	2200      	movs	r2, #0
    ec2a:	701a      	strb	r2, [r3, #0]
    ec2c:	e070      	b.n	ed10 <testOutputs+0x4e4>
			for(uint16_t i = 0; i < led_num; i++)
    ec2e:	2310      	movs	r3, #16
    ec30:	18fb      	adds	r3, r7, r3
    ec32:	2200      	movs	r2, #0
    ec34:	801a      	strh	r2, [r3, #0]
    ec36:	e050      	b.n	ecda <testOutputs+0x4ae>
			{
				L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | brightness);
    ec38:	2310      	movs	r3, #16
    ec3a:	18fb      	adds	r3, r7, r3
    ec3c:	881b      	ldrh	r3, [r3, #0]
    ec3e:	3301      	adds	r3, #1
    ec40:	009a      	lsls	r2, r3, #2
    ec42:	2310      	movs	r3, #16
    ec44:	18fb      	adds	r3, r7, r3
    ec46:	881b      	ldrh	r3, [r3, #0]
    ec48:	3301      	adds	r3, #1
    ec4a:	009b      	lsls	r3, r3, #2
    ec4c:	201f      	movs	r0, #31
    ec4e:	2120      	movs	r1, #32
    ec50:	4249      	negs	r1, r1
    ec52:	4301      	orrs	r1, r0
    ec54:	b2c8      	uxtb	r0, r1
    ec56:	4994      	ldr	r1, [pc, #592]	; (eea8 <testOutputs+0x67c>)
    ec58:	54c8      	strb	r0, [r1, r3]
    ec5a:	4993      	ldr	r1, [pc, #588]	; (eea8 <testOutputs+0x67c>)
    ec5c:	5cc9      	ldrb	r1, [r1, r3]
    ec5e:	4b93      	ldr	r3, [pc, #588]	; (eeac <testOutputs+0x680>)
    ec60:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
    ec62:	2310      	movs	r3, #16
    ec64:	18fb      	adds	r3, r7, r3
    ec66:	881b      	ldrh	r3, [r3, #0]
    ec68:	009b      	lsls	r3, r3, #2
    ec6a:	1d5a      	adds	r2, r3, #5
    ec6c:	2310      	movs	r3, #16
    ec6e:	18fb      	adds	r3, r7, r3
    ec70:	881b      	ldrh	r3, [r3, #0]
    ec72:	009b      	lsls	r3, r3, #2
    ec74:	3305      	adds	r3, #5
    ec76:	498c      	ldr	r1, [pc, #560]	; (eea8 <testOutputs+0x67c>)
    ec78:	2000      	movs	r0, #0
    ec7a:	54c8      	strb	r0, [r1, r3]
    ec7c:	498a      	ldr	r1, [pc, #552]	; (eea8 <testOutputs+0x67c>)
    ec7e:	5cc9      	ldrb	r1, [r1, r3]
    ec80:	4b8a      	ldr	r3, [pc, #552]	; (eeac <testOutputs+0x680>)
    ec82:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = j;
    ec84:	2310      	movs	r3, #16
    ec86:	18fb      	adds	r3, r7, r3
    ec88:	881b      	ldrh	r3, [r3, #0]
    ec8a:	009b      	lsls	r3, r3, #2
    ec8c:	1d9a      	adds	r2, r3, #6
    ec8e:	2310      	movs	r3, #16
    ec90:	18fb      	adds	r3, r7, r3
    ec92:	881b      	ldrh	r3, [r3, #0]
    ec94:	009b      	lsls	r3, r3, #2
    ec96:	3306      	adds	r3, #6
    ec98:	4983      	ldr	r1, [pc, #524]	; (eea8 <testOutputs+0x67c>)
    ec9a:	2013      	movs	r0, #19
    ec9c:	1838      	adds	r0, r7, r0
    ec9e:	7800      	ldrb	r0, [r0, #0]
    eca0:	54c8      	strb	r0, [r1, r3]
    eca2:	4981      	ldr	r1, [pc, #516]	; (eea8 <testOutputs+0x67c>)
    eca4:	5cc9      	ldrb	r1, [r1, r3]
    eca6:	4b81      	ldr	r3, [pc, #516]	; (eeac <testOutputs+0x680>)
    eca8:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
    ecaa:	2310      	movs	r3, #16
    ecac:	18fb      	adds	r3, r7, r3
    ecae:	881b      	ldrh	r3, [r3, #0]
    ecb0:	009b      	lsls	r3, r3, #2
    ecb2:	1dda      	adds	r2, r3, #7
    ecb4:	2310      	movs	r3, #16
    ecb6:	18fb      	adds	r3, r7, r3
    ecb8:	881b      	ldrh	r3, [r3, #0]
    ecba:	009b      	lsls	r3, r3, #2
    ecbc:	3307      	adds	r3, #7
    ecbe:	497a      	ldr	r1, [pc, #488]	; (eea8 <testOutputs+0x67c>)
    ecc0:	2000      	movs	r0, #0
    ecc2:	54c8      	strb	r0, [r1, r3]
    ecc4:	4978      	ldr	r1, [pc, #480]	; (eea8 <testOutputs+0x67c>)
    ecc6:	5cc9      	ldrb	r1, [r1, r3]
    ecc8:	4b78      	ldr	r3, [pc, #480]	; (eeac <testOutputs+0x680>)
    ecca:	5499      	strb	r1, [r3, r2]
			for(uint16_t i = 0; i < led_num; i++)
    eccc:	2310      	movs	r3, #16
    ecce:	18fb      	adds	r3, r7, r3
    ecd0:	881a      	ldrh	r2, [r3, #0]
    ecd2:	2310      	movs	r3, #16
    ecd4:	18fb      	adds	r3, r7, r3
    ecd6:	3201      	adds	r2, #1
    ecd8:	801a      	strh	r2, [r3, #0]
    ecda:	4b75      	ldr	r3, [pc, #468]	; (eeb0 <testOutputs+0x684>)
    ecdc:	781b      	ldrb	r3, [r3, #0]
    ecde:	b29b      	uxth	r3, r3
    ece0:	2210      	movs	r2, #16
    ece2:	18ba      	adds	r2, r7, r2
    ece4:	8812      	ldrh	r2, [r2, #0]
    ece6:	429a      	cmp	r2, r3
    ece8:	d3a6      	bcc.n	ec38 <testOutputs+0x40c>
			}
			L_digital_write(led_num);
    ecea:	4b71      	ldr	r3, [pc, #452]	; (eeb0 <testOutputs+0x684>)
    ecec:	781b      	ldrb	r3, [r3, #0]
    ecee:	b29b      	uxth	r3, r3
    ecf0:	0018      	movs	r0, r3
    ecf2:	4b70      	ldr	r3, [pc, #448]	; (eeb4 <testOutputs+0x688>)
    ecf4:	4798      	blx	r3
			R_digital_write(led_num);
    ecf6:	4b6e      	ldr	r3, [pc, #440]	; (eeb0 <testOutputs+0x684>)
    ecf8:	781b      	ldrb	r3, [r3, #0]
    ecfa:	b29b      	uxth	r3, r3
    ecfc:	0018      	movs	r0, r3
    ecfe:	4b6e      	ldr	r3, [pc, #440]	; (eeb8 <testOutputs+0x68c>)
    ed00:	4798      	blx	r3
		for(uint8_t j = 0; j < 255; j++){
    ed02:	2313      	movs	r3, #19
    ed04:	18fb      	adds	r3, r7, r3
    ed06:	781a      	ldrb	r2, [r3, #0]
    ed08:	2313      	movs	r3, #19
    ed0a:	18fb      	adds	r3, r7, r3
    ed0c:	3201      	adds	r2, #1
    ed0e:	701a      	strb	r2, [r3, #0]
    ed10:	2313      	movs	r3, #19
    ed12:	18fb      	adds	r3, r7, r3
    ed14:	781b      	ldrb	r3, [r3, #0]
    ed16:	2bff      	cmp	r3, #255	; 0xff
    ed18:	d000      	beq.n	ed1c <testOutputs+0x4f0>
    ed1a:	e788      	b.n	ec2e <testOutputs+0x402>
		}
		for(uint8_t j = 0; j < 255; j++){
    ed1c:	230f      	movs	r3, #15
    ed1e:	18fb      	adds	r3, r7, r3
    ed20:	2200      	movs	r2, #0
    ed22:	701a      	strb	r2, [r3, #0]
    ed24:	e070      	b.n	ee08 <testOutputs+0x5dc>
			for(uint16_t i = 0; i < led_num; i++)
    ed26:	230c      	movs	r3, #12
    ed28:	18fb      	adds	r3, r7, r3
    ed2a:	2200      	movs	r2, #0
    ed2c:	801a      	strh	r2, [r3, #0]
    ed2e:	e050      	b.n	edd2 <testOutputs+0x5a6>
			{
				L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | brightness);
    ed30:	230c      	movs	r3, #12
    ed32:	18fb      	adds	r3, r7, r3
    ed34:	881b      	ldrh	r3, [r3, #0]
    ed36:	3301      	adds	r3, #1
    ed38:	009a      	lsls	r2, r3, #2
    ed3a:	230c      	movs	r3, #12
    ed3c:	18fb      	adds	r3, r7, r3
    ed3e:	881b      	ldrh	r3, [r3, #0]
    ed40:	3301      	adds	r3, #1
    ed42:	009b      	lsls	r3, r3, #2
    ed44:	201f      	movs	r0, #31
    ed46:	2120      	movs	r1, #32
    ed48:	4249      	negs	r1, r1
    ed4a:	4301      	orrs	r1, r0
    ed4c:	b2c8      	uxtb	r0, r1
    ed4e:	4956      	ldr	r1, [pc, #344]	; (eea8 <testOutputs+0x67c>)
    ed50:	54c8      	strb	r0, [r1, r3]
    ed52:	4955      	ldr	r1, [pc, #340]	; (eea8 <testOutputs+0x67c>)
    ed54:	5cc9      	ldrb	r1, [r1, r3]
    ed56:	4b55      	ldr	r3, [pc, #340]	; (eeac <testOutputs+0x680>)
    ed58:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
    ed5a:	230c      	movs	r3, #12
    ed5c:	18fb      	adds	r3, r7, r3
    ed5e:	881b      	ldrh	r3, [r3, #0]
    ed60:	009b      	lsls	r3, r3, #2
    ed62:	1d5a      	adds	r2, r3, #5
    ed64:	230c      	movs	r3, #12
    ed66:	18fb      	adds	r3, r7, r3
    ed68:	881b      	ldrh	r3, [r3, #0]
    ed6a:	009b      	lsls	r3, r3, #2
    ed6c:	3305      	adds	r3, #5
    ed6e:	494e      	ldr	r1, [pc, #312]	; (eea8 <testOutputs+0x67c>)
    ed70:	2000      	movs	r0, #0
    ed72:	54c8      	strb	r0, [r1, r3]
    ed74:	494c      	ldr	r1, [pc, #304]	; (eea8 <testOutputs+0x67c>)
    ed76:	5cc9      	ldrb	r1, [r1, r3]
    ed78:	4b4c      	ldr	r3, [pc, #304]	; (eeac <testOutputs+0x680>)
    ed7a:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
    ed7c:	230c      	movs	r3, #12
    ed7e:	18fb      	adds	r3, r7, r3
    ed80:	881b      	ldrh	r3, [r3, #0]
    ed82:	009b      	lsls	r3, r3, #2
    ed84:	1d9a      	adds	r2, r3, #6
    ed86:	230c      	movs	r3, #12
    ed88:	18fb      	adds	r3, r7, r3
    ed8a:	881b      	ldrh	r3, [r3, #0]
    ed8c:	009b      	lsls	r3, r3, #2
    ed8e:	3306      	adds	r3, #6
    ed90:	4945      	ldr	r1, [pc, #276]	; (eea8 <testOutputs+0x67c>)
    ed92:	2000      	movs	r0, #0
    ed94:	54c8      	strb	r0, [r1, r3]
    ed96:	4944      	ldr	r1, [pc, #272]	; (eea8 <testOutputs+0x67c>)
    ed98:	5cc9      	ldrb	r1, [r1, r3]
    ed9a:	4b44      	ldr	r3, [pc, #272]	; (eeac <testOutputs+0x680>)
    ed9c:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = j;
    ed9e:	230c      	movs	r3, #12
    eda0:	18fb      	adds	r3, r7, r3
    eda2:	881b      	ldrh	r3, [r3, #0]
    eda4:	009b      	lsls	r3, r3, #2
    eda6:	1dda      	adds	r2, r3, #7
    eda8:	230c      	movs	r3, #12
    edaa:	18fb      	adds	r3, r7, r3
    edac:	881b      	ldrh	r3, [r3, #0]
    edae:	009b      	lsls	r3, r3, #2
    edb0:	3307      	adds	r3, #7
    edb2:	493d      	ldr	r1, [pc, #244]	; (eea8 <testOutputs+0x67c>)
    edb4:	200f      	movs	r0, #15
    edb6:	1838      	adds	r0, r7, r0
    edb8:	7800      	ldrb	r0, [r0, #0]
    edba:	54c8      	strb	r0, [r1, r3]
    edbc:	493a      	ldr	r1, [pc, #232]	; (eea8 <testOutputs+0x67c>)
    edbe:	5cc9      	ldrb	r1, [r1, r3]
    edc0:	4b3a      	ldr	r3, [pc, #232]	; (eeac <testOutputs+0x680>)
    edc2:	5499      	strb	r1, [r3, r2]
			for(uint16_t i = 0; i < led_num; i++)
    edc4:	230c      	movs	r3, #12
    edc6:	18fb      	adds	r3, r7, r3
    edc8:	881a      	ldrh	r2, [r3, #0]
    edca:	230c      	movs	r3, #12
    edcc:	18fb      	adds	r3, r7, r3
    edce:	3201      	adds	r2, #1
    edd0:	801a      	strh	r2, [r3, #0]
    edd2:	4b37      	ldr	r3, [pc, #220]	; (eeb0 <testOutputs+0x684>)
    edd4:	781b      	ldrb	r3, [r3, #0]
    edd6:	b29b      	uxth	r3, r3
    edd8:	220c      	movs	r2, #12
    edda:	18ba      	adds	r2, r7, r2
    eddc:	8812      	ldrh	r2, [r2, #0]
    edde:	429a      	cmp	r2, r3
    ede0:	d3a6      	bcc.n	ed30 <testOutputs+0x504>
			}
			L_digital_write(led_num);
    ede2:	4b33      	ldr	r3, [pc, #204]	; (eeb0 <testOutputs+0x684>)
    ede4:	781b      	ldrb	r3, [r3, #0]
    ede6:	b29b      	uxth	r3, r3
    ede8:	0018      	movs	r0, r3
    edea:	4b32      	ldr	r3, [pc, #200]	; (eeb4 <testOutputs+0x688>)
    edec:	4798      	blx	r3
			R_digital_write(led_num);
    edee:	4b30      	ldr	r3, [pc, #192]	; (eeb0 <testOutputs+0x684>)
    edf0:	781b      	ldrb	r3, [r3, #0]
    edf2:	b29b      	uxth	r3, r3
    edf4:	0018      	movs	r0, r3
    edf6:	4b30      	ldr	r3, [pc, #192]	; (eeb8 <testOutputs+0x68c>)
    edf8:	4798      	blx	r3
		for(uint8_t j = 0; j < 255; j++){
    edfa:	230f      	movs	r3, #15
    edfc:	18fb      	adds	r3, r7, r3
    edfe:	781a      	ldrb	r2, [r3, #0]
    ee00:	230f      	movs	r3, #15
    ee02:	18fb      	adds	r3, r7, r3
    ee04:	3201      	adds	r2, #1
    ee06:	701a      	strb	r2, [r3, #0]
    ee08:	230f      	movs	r3, #15
    ee0a:	18fb      	adds	r3, r7, r3
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	2bff      	cmp	r3, #255	; 0xff
    ee10:	d000      	beq.n	ee14 <testOutputs+0x5e8>
    ee12:	e788      	b.n	ed26 <testOutputs+0x4fa>
		}
		DIGITAL_OFF = false;
    ee14:	4b29      	ldr	r3, [pc, #164]	; (eebc <testOutputs+0x690>)
    ee16:	2200      	movs	r2, #0
    ee18:	701a      	strb	r2, [r3, #0]
		turn_off_side_lights();
    ee1a:	4b29      	ldr	r3, [pc, #164]	; (eec0 <testOutputs+0x694>)
    ee1c:	4798      	blx	r3
		DIGITAL_OFF = false;
    ee1e:	4b27      	ldr	r3, [pc, #156]	; (eebc <testOutputs+0x690>)
    ee20:	2200      	movs	r2, #0
    ee22:	701a      	strb	r2, [r3, #0]
		turn_off_side_lights();
    ee24:	4b26      	ldr	r3, [pc, #152]	; (eec0 <testOutputs+0x694>)
    ee26:	4798      	blx	r3
		DIGITAL_OFF = false;
    ee28:	4b24      	ldr	r3, [pc, #144]	; (eebc <testOutputs+0x690>)
    ee2a:	2200      	movs	r2, #0
    ee2c:	701a      	strb	r2, [r3, #0]
		turn_off_side_lights();
    ee2e:	4b24      	ldr	r3, [pc, #144]	; (eec0 <testOutputs+0x694>)
    ee30:	4798      	blx	r3
	}

	for(int i = 0; i < 0xFFFF; i+=256){
    ee32:	2300      	movs	r3, #0
    ee34:	60bb      	str	r3, [r7, #8]
    ee36:	e019      	b.n	ee6c <testOutputs+0x640>
		setRed(i);
    ee38:	68bb      	ldr	r3, [r7, #8]
    ee3a:	b29b      	uxth	r3, r3
    ee3c:	0018      	movs	r0, r3
    ee3e:	4b21      	ldr	r3, [pc, #132]	; (eec4 <testOutputs+0x698>)
    ee40:	4798      	blx	r3
		while(!check_timer_expired(&timer, 3)){}
    ee42:	46c0      	nop			; (mov r8, r8)
    ee44:	003b      	movs	r3, r7
    ee46:	2103      	movs	r1, #3
    ee48:	0018      	movs	r0, r3
    ee4a:	4b1f      	ldr	r3, [pc, #124]	; (eec8 <testOutputs+0x69c>)
    ee4c:	4798      	blx	r3
    ee4e:	0003      	movs	r3, r0
    ee50:	001a      	movs	r2, r3
    ee52:	2301      	movs	r3, #1
    ee54:	4053      	eors	r3, r2
    ee56:	b2db      	uxtb	r3, r3
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d1f3      	bne.n	ee44 <testOutputs+0x618>
		timer = millis();
    ee5c:	4b1b      	ldr	r3, [pc, #108]	; (eecc <testOutputs+0x6a0>)
    ee5e:	4798      	blx	r3
    ee60:	0003      	movs	r3, r0
    ee62:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 0xFFFF; i+=256){
    ee64:	68bb      	ldr	r3, [r7, #8]
    ee66:	3301      	adds	r3, #1
    ee68:	33ff      	adds	r3, #255	; 0xff
    ee6a:	60bb      	str	r3, [r7, #8]
    ee6c:	68bb      	ldr	r3, [r7, #8]
    ee6e:	4a18      	ldr	r2, [pc, #96]	; (eed0 <testOutputs+0x6a4>)
    ee70:	4293      	cmp	r3, r2
    ee72:	dde1      	ble.n	ee38 <testOutputs+0x60c>
	}

	while(!check_timer_expired(&timer, 500)){}
    ee74:	46c0      	nop			; (mov r8, r8)
    ee76:	23fa      	movs	r3, #250	; 0xfa
    ee78:	005a      	lsls	r2, r3, #1
    ee7a:	003b      	movs	r3, r7
    ee7c:	0011      	movs	r1, r2
    ee7e:	0018      	movs	r0, r3
    ee80:	4b11      	ldr	r3, [pc, #68]	; (eec8 <testOutputs+0x69c>)
    ee82:	4798      	blx	r3
    ee84:	0003      	movs	r3, r0
    ee86:	001a      	movs	r2, r3
    ee88:	2301      	movs	r3, #1
    ee8a:	4053      	eors	r3, r2
    ee8c:	b2db      	uxtb	r3, r3
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d1f1      	bne.n	ee76 <testOutputs+0x64a>
	timer = millis();
    ee92:	4b0e      	ldr	r3, [pc, #56]	; (eecc <testOutputs+0x6a0>)
    ee94:	4798      	blx	r3
    ee96:	0003      	movs	r3, r0
    ee98:	603b      	str	r3, [r7, #0]
	setRed(0);
    ee9a:	2000      	movs	r0, #0
    ee9c:	4b09      	ldr	r3, [pc, #36]	; (eec4 <testOutputs+0x698>)
    ee9e:	4798      	blx	r3

	for(int i = 0; i < 0xFFFF; i+=256){
    eea0:	2300      	movs	r3, #0
    eea2:	607b      	str	r3, [r7, #4]
    eea4:	e030      	b.n	ef08 <testOutputs+0x6dc>
    eea6:	46c0      	nop			; (mov r8, r8)
    eea8:	20000598 	.word	0x20000598
    eeac:	20001440 	.word	0x20001440
    eeb0:	200000e0 	.word	0x200000e0
    eeb4:	0000e7cd 	.word	0x0000e7cd
    eeb8:	0000e7fd 	.word	0x0000e7fd
    eebc:	200003c0 	.word	0x200003c0
    eec0:	0000f039 	.word	0x0000f039
    eec4:	0000a561 	.word	0x0000a561
    eec8:	00009fbd 	.word	0x00009fbd
    eecc:	00009f65 	.word	0x00009f65
    eed0:	0000fffe 	.word	0x0000fffe
		setWhite(i);
    eed4:	687b      	ldr	r3, [r7, #4]
    eed6:	b29b      	uxth	r3, r3
    eed8:	0018      	movs	r0, r3
    eeda:	4b26      	ldr	r3, [pc, #152]	; (ef74 <testOutputs+0x748>)
    eedc:	4798      	blx	r3
		while(!check_timer_expired(&timer, 3)){}
    eede:	46c0      	nop			; (mov r8, r8)
    eee0:	003b      	movs	r3, r7
    eee2:	2103      	movs	r1, #3
    eee4:	0018      	movs	r0, r3
    eee6:	4b24      	ldr	r3, [pc, #144]	; (ef78 <testOutputs+0x74c>)
    eee8:	4798      	blx	r3
    eeea:	0003      	movs	r3, r0
    eeec:	001a      	movs	r2, r3
    eeee:	2301      	movs	r3, #1
    eef0:	4053      	eors	r3, r2
    eef2:	b2db      	uxtb	r3, r3
    eef4:	2b00      	cmp	r3, #0
    eef6:	d1f3      	bne.n	eee0 <testOutputs+0x6b4>
		timer = millis();
    eef8:	4b20      	ldr	r3, [pc, #128]	; (ef7c <testOutputs+0x750>)
    eefa:	4798      	blx	r3
    eefc:	0003      	movs	r3, r0
    eefe:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 0xFFFF; i+=256){
    ef00:	687b      	ldr	r3, [r7, #4]
    ef02:	3301      	adds	r3, #1
    ef04:	33ff      	adds	r3, #255	; 0xff
    ef06:	607b      	str	r3, [r7, #4]
    ef08:	687b      	ldr	r3, [r7, #4]
    ef0a:	4a1d      	ldr	r2, [pc, #116]	; (ef80 <testOutputs+0x754>)
    ef0c:	4293      	cmp	r3, r2
    ef0e:	dde1      	ble.n	eed4 <testOutputs+0x6a8>
	}
	
	while(!check_timer_expired(&timer, 500)){}
    ef10:	46c0      	nop			; (mov r8, r8)
    ef12:	23fa      	movs	r3, #250	; 0xfa
    ef14:	005a      	lsls	r2, r3, #1
    ef16:	003b      	movs	r3, r7
    ef18:	0011      	movs	r1, r2
    ef1a:	0018      	movs	r0, r3
    ef1c:	4b16      	ldr	r3, [pc, #88]	; (ef78 <testOutputs+0x74c>)
    ef1e:	4798      	blx	r3
    ef20:	0003      	movs	r3, r0
    ef22:	001a      	movs	r2, r3
    ef24:	2301      	movs	r3, #1
    ef26:	4053      	eors	r3, r2
    ef28:	b2db      	uxtb	r3, r3
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	d1f1      	bne.n	ef12 <testOutputs+0x6e6>
	timer = millis();
    ef2e:	4b13      	ldr	r3, [pc, #76]	; (ef7c <testOutputs+0x750>)
    ef30:	4798      	blx	r3
    ef32:	0003      	movs	r3, r0
    ef34:	603b      	str	r3, [r7, #0]

	setWhite(0);
    ef36:	2000      	movs	r0, #0
    ef38:	4b0e      	ldr	r3, [pc, #56]	; (ef74 <testOutputs+0x748>)
    ef3a:	4798      	blx	r3
	setAux(true);
    ef3c:	2001      	movs	r0, #1
    ef3e:	4b11      	ldr	r3, [pc, #68]	; (ef84 <testOutputs+0x758>)
    ef40:	4798      	blx	r3
	
	while(!check_timer_expired(&timer, 1500)){}
    ef42:	46c0      	nop			; (mov r8, r8)
    ef44:	4a10      	ldr	r2, [pc, #64]	; (ef88 <testOutputs+0x75c>)
    ef46:	003b      	movs	r3, r7
    ef48:	0011      	movs	r1, r2
    ef4a:	0018      	movs	r0, r3
    ef4c:	4b0a      	ldr	r3, [pc, #40]	; (ef78 <testOutputs+0x74c>)
    ef4e:	4798      	blx	r3
    ef50:	0003      	movs	r3, r0
    ef52:	001a      	movs	r2, r3
    ef54:	2301      	movs	r3, #1
    ef56:	4053      	eors	r3, r2
    ef58:	b2db      	uxtb	r3, r3
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d1f2      	bne.n	ef44 <testOutputs+0x718>
	timer = millis();
    ef5e:	4b07      	ldr	r3, [pc, #28]	; (ef7c <testOutputs+0x750>)
    ef60:	4798      	blx	r3
    ef62:	0003      	movs	r3, r0
    ef64:	603b      	str	r3, [r7, #0]
	setAux(0);
    ef66:	2000      	movs	r0, #0
    ef68:	4b06      	ldr	r3, [pc, #24]	; (ef84 <testOutputs+0x758>)
    ef6a:	4798      	blx	r3
}
    ef6c:	46c0      	nop			; (mov r8, r8)
    ef6e:	46bd      	mov	sp, r7
    ef70:	b00c      	add	sp, #48	; 0x30
    ef72:	bd80      	pop	{r7, pc}
    ef74:	0000a529 	.word	0x0000a529
    ef78:	00009fbd 	.word	0x00009fbd
    ef7c:	00009f65 	.word	0x00009f65
    ef80:	0000fffe 	.word	0x0000fffe
    ef84:	0000a599 	.word	0x0000a599
    ef88:	000005dc 	.word	0x000005dc

0000ef8c <is_standby_active>:

#define STANDBY_LEAVE_DELAY 1500
#define STANDBY_ENTER_DELAY 3000
#define STANDBY_RPM_LIMIT 200
bool is_standby_active(void){
    ef8c:	b580      	push	{r7, lr}
    ef8e:	af00      	add	r7, sp, #0
	static uint32_t standby_timer = 0;
	static standby_active = false;
	
	if(STANDBY_ENABLED){
    ef90:	4b21      	ldr	r3, [pc, #132]	; (f018 <is_standby_active+0x8c>)
    ef92:	781b      	ldrb	r3, [r3, #0]
    ef94:	2b00      	cmp	r3, #0
    ef96:	d034      	beq.n	f002 <is_standby_active+0x76>
		if((standby_active && latest_vesc_vals.rpm < STANDBY_RPM_LIMIT) || (!standby_active && latest_vesc_vals.rpm > STANDBY_RPM_LIMIT)){
    ef98:	4b20      	ldr	r3, [pc, #128]	; (f01c <is_standby_active+0x90>)
    ef9a:	681b      	ldr	r3, [r3, #0]
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d003      	beq.n	efa8 <is_standby_active+0x1c>
    efa0:	4b1f      	ldr	r3, [pc, #124]	; (f020 <is_standby_active+0x94>)
    efa2:	691b      	ldr	r3, [r3, #16]
    efa4:	2bc7      	cmp	r3, #199	; 0xc7
    efa6:	dd07      	ble.n	efb8 <is_standby_active+0x2c>
    efa8:	4b1c      	ldr	r3, [pc, #112]	; (f01c <is_standby_active+0x90>)
    efaa:	681b      	ldr	r3, [r3, #0]
    efac:	2b00      	cmp	r3, #0
    efae:	d108      	bne.n	efc2 <is_standby_active+0x36>
    efb0:	4b1b      	ldr	r3, [pc, #108]	; (f020 <is_standby_active+0x94>)
    efb2:	691b      	ldr	r3, [r3, #16]
    efb4:	2bc8      	cmp	r3, #200	; 0xc8
    efb6:	dd04      	ble.n	efc2 <is_standby_active+0x36>
			standby_timer = millis();
    efb8:	4b1a      	ldr	r3, [pc, #104]	; (f024 <is_standby_active+0x98>)
    efba:	4798      	blx	r3
    efbc:	0002      	movs	r2, r0
    efbe:	4b1a      	ldr	r3, [pc, #104]	; (f028 <is_standby_active+0x9c>)
    efc0:	601a      	str	r2, [r3, #0]
		}

		if(!standby_active && check_timer_expired(&standby_timer, STANDBY_ENTER_DELAY)){
    efc2:	4b16      	ldr	r3, [pc, #88]	; (f01c <is_standby_active+0x90>)
    efc4:	681b      	ldr	r3, [r3, #0]
    efc6:	2b00      	cmp	r3, #0
    efc8:	d10b      	bne.n	efe2 <is_standby_active+0x56>
    efca:	4a18      	ldr	r2, [pc, #96]	; (f02c <is_standby_active+0xa0>)
    efcc:	4b16      	ldr	r3, [pc, #88]	; (f028 <is_standby_active+0x9c>)
    efce:	0011      	movs	r1, r2
    efd0:	0018      	movs	r0, r3
    efd2:	4b17      	ldr	r3, [pc, #92]	; (f030 <is_standby_active+0xa4>)
    efd4:	4798      	blx	r3
    efd6:	1e03      	subs	r3, r0, #0
    efd8:	d003      	beq.n	efe2 <is_standby_active+0x56>
			standby_active = true;
    efda:	4b10      	ldr	r3, [pc, #64]	; (f01c <is_standby_active+0x90>)
    efdc:	2201      	movs	r2, #1
    efde:	601a      	str	r2, [r3, #0]
    efe0:	e012      	b.n	f008 <is_standby_active+0x7c>
		} else if(standby_active && check_timer_expired(&standby_timer, STANDBY_LEAVE_DELAY)){
    efe2:	4b0e      	ldr	r3, [pc, #56]	; (f01c <is_standby_active+0x90>)
    efe4:	681b      	ldr	r3, [r3, #0]
    efe6:	2b00      	cmp	r3, #0
    efe8:	d00e      	beq.n	f008 <is_standby_active+0x7c>
    efea:	4a12      	ldr	r2, [pc, #72]	; (f034 <is_standby_active+0xa8>)
    efec:	4b0e      	ldr	r3, [pc, #56]	; (f028 <is_standby_active+0x9c>)
    efee:	0011      	movs	r1, r2
    eff0:	0018      	movs	r0, r3
    eff2:	4b0f      	ldr	r3, [pc, #60]	; (f030 <is_standby_active+0xa4>)
    eff4:	4798      	blx	r3
    eff6:	1e03      	subs	r3, r0, #0
    eff8:	d006      	beq.n	f008 <is_standby_active+0x7c>
			standby_active = false;
    effa:	4b08      	ldr	r3, [pc, #32]	; (f01c <is_standby_active+0x90>)
    effc:	2200      	movs	r2, #0
    effe:	601a      	str	r2, [r3, #0]
    f000:	e002      	b.n	f008 <is_standby_active+0x7c>
		}
	} else {
		standby_active = false;
    f002:	4b06      	ldr	r3, [pc, #24]	; (f01c <is_standby_active+0x90>)
    f004:	2200      	movs	r2, #0
    f006:	601a      	str	r2, [r3, #0]
	}
	return standby_active;
    f008:	4b04      	ldr	r3, [pc, #16]	; (f01c <is_standby_active+0x90>)
    f00a:	681b      	ldr	r3, [r3, #0]
    f00c:	1e5a      	subs	r2, r3, #1
    f00e:	4193      	sbcs	r3, r2
    f010:	b2db      	uxtb	r3, r3
}
    f012:	0018      	movs	r0, r3
    f014:	46bd      	mov	sp, r7
    f016:	bd80      	pop	{r7, pc}
    f018:	200003a5 	.word	0x200003a5
    f01c:	20000480 	.word	0x20000480
    f020:	20000e38 	.word	0x20000e38
    f024:	00009f65 	.word	0x00009f65
    f028:	20000484 	.word	0x20000484
    f02c:	00000bb8 	.word	0x00000bb8
    f030:	00009fbd 	.word	0x00009fbd
    f034:	000005dc 	.word	0x000005dc

0000f038 <turn_off_side_lights>:


void turn_off_side_lights(void){
    f038:	b580      	push	{r7, lr}
    f03a:	b082      	sub	sp, #8
    f03c:	af00      	add	r7, sp, #0
	if(RGB_led_type == RGB_ANALOG){
    f03e:	4b3c      	ldr	r3, [pc, #240]	; (f130 <turn_off_side_lights+0xf8>)
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	2b00      	cmp	r3, #0
    f044:	d10a      	bne.n	f05c <turn_off_side_lights+0x24>
		setLeftRGB(0, 0, 0);
    f046:	2200      	movs	r2, #0
    f048:	2100      	movs	r1, #0
    f04a:	2000      	movs	r0, #0
    f04c:	4b39      	ldr	r3, [pc, #228]	; (f134 <turn_off_side_lights+0xfc>)
    f04e:	4798      	blx	r3
		setRightRGB(0, 0, 0);
    f050:	2200      	movs	r2, #0
    f052:	2100      	movs	r1, #0
    f054:	2000      	movs	r0, #0
    f056:	4b38      	ldr	r3, [pc, #224]	; (f138 <turn_off_side_lights+0x100>)
    f058:	4798      	blx	r3
			DIGITAL_OFF = true;
		}
	} else {

	}
}
    f05a:	e065      	b.n	f128 <turn_off_side_lights+0xf0>
	} else if(RGB_led_type == RGB_DIGITAL_APA102){// || RGB_led_type == RGB_DIGITAL_WS2815) {
    f05c:	4b34      	ldr	r3, [pc, #208]	; (f130 <turn_off_side_lights+0xf8>)
    f05e:	781b      	ldrb	r3, [r3, #0]
    f060:	2b01      	cmp	r3, #1
    f062:	d161      	bne.n	f128 <turn_off_side_lights+0xf0>
		if(!DIGITAL_OFF){
    f064:	4b35      	ldr	r3, [pc, #212]	; (f13c <turn_off_side_lights+0x104>)
    f066:	781b      	ldrb	r3, [r3, #0]
    f068:	2201      	movs	r2, #1
    f06a:	4053      	eors	r3, r2
    f06c:	b2db      	uxtb	r3, r3
    f06e:	2b00      	cmp	r3, #0
    f070:	d05a      	beq.n	f128 <turn_off_side_lights+0xf0>
			for(uint16_t i = 0; i < led_num; i++)
    f072:	1dbb      	adds	r3, r7, #6
    f074:	2200      	movs	r2, #0
    f076:	801a      	strh	r2, [r3, #0]
    f078:	e040      	b.n	f0fc <turn_off_side_lights+0xc4>
				L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0);
    f07a:	1dbb      	adds	r3, r7, #6
    f07c:	881b      	ldrh	r3, [r3, #0]
    f07e:	3301      	adds	r3, #1
    f080:	009a      	lsls	r2, r3, #2
    f082:	1dbb      	adds	r3, r7, #6
    f084:	881b      	ldrh	r3, [r3, #0]
    f086:	3301      	adds	r3, #1
    f088:	009b      	lsls	r3, r3, #2
    f08a:	492d      	ldr	r1, [pc, #180]	; (f140 <turn_off_side_lights+0x108>)
    f08c:	20e0      	movs	r0, #224	; 0xe0
    f08e:	54c8      	strb	r0, [r1, r3]
    f090:	492b      	ldr	r1, [pc, #172]	; (f140 <turn_off_side_lights+0x108>)
    f092:	5cc9      	ldrb	r1, [r1, r3]
    f094:	4b2b      	ldr	r3, [pc, #172]	; (f144 <turn_off_side_lights+0x10c>)
    f096:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
    f098:	1dbb      	adds	r3, r7, #6
    f09a:	881b      	ldrh	r3, [r3, #0]
    f09c:	009b      	lsls	r3, r3, #2
    f09e:	1d5a      	adds	r2, r3, #5
    f0a0:	1dbb      	adds	r3, r7, #6
    f0a2:	881b      	ldrh	r3, [r3, #0]
    f0a4:	009b      	lsls	r3, r3, #2
    f0a6:	3305      	adds	r3, #5
    f0a8:	4925      	ldr	r1, [pc, #148]	; (f140 <turn_off_side_lights+0x108>)
    f0aa:	2000      	movs	r0, #0
    f0ac:	54c8      	strb	r0, [r1, r3]
    f0ae:	4924      	ldr	r1, [pc, #144]	; (f140 <turn_off_side_lights+0x108>)
    f0b0:	5cc9      	ldrb	r1, [r1, r3]
    f0b2:	4b24      	ldr	r3, [pc, #144]	; (f144 <turn_off_side_lights+0x10c>)
    f0b4:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
    f0b6:	1dbb      	adds	r3, r7, #6
    f0b8:	881b      	ldrh	r3, [r3, #0]
    f0ba:	009b      	lsls	r3, r3, #2
    f0bc:	1d9a      	adds	r2, r3, #6
    f0be:	1dbb      	adds	r3, r7, #6
    f0c0:	881b      	ldrh	r3, [r3, #0]
    f0c2:	009b      	lsls	r3, r3, #2
    f0c4:	3306      	adds	r3, #6
    f0c6:	491e      	ldr	r1, [pc, #120]	; (f140 <turn_off_side_lights+0x108>)
    f0c8:	2000      	movs	r0, #0
    f0ca:	54c8      	strb	r0, [r1, r3]
    f0cc:	491c      	ldr	r1, [pc, #112]	; (f140 <turn_off_side_lights+0x108>)
    f0ce:	5cc9      	ldrb	r1, [r1, r3]
    f0d0:	4b1c      	ldr	r3, [pc, #112]	; (f144 <turn_off_side_lights+0x10c>)
    f0d2:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
    f0d4:	1dbb      	adds	r3, r7, #6
    f0d6:	881b      	ldrh	r3, [r3, #0]
    f0d8:	009b      	lsls	r3, r3, #2
    f0da:	1dda      	adds	r2, r3, #7
    f0dc:	1dbb      	adds	r3, r7, #6
    f0de:	881b      	ldrh	r3, [r3, #0]
    f0e0:	009b      	lsls	r3, r3, #2
    f0e2:	3307      	adds	r3, #7
    f0e4:	4916      	ldr	r1, [pc, #88]	; (f140 <turn_off_side_lights+0x108>)
    f0e6:	2000      	movs	r0, #0
    f0e8:	54c8      	strb	r0, [r1, r3]
    f0ea:	4915      	ldr	r1, [pc, #84]	; (f140 <turn_off_side_lights+0x108>)
    f0ec:	5cc9      	ldrb	r1, [r1, r3]
    f0ee:	4b15      	ldr	r3, [pc, #84]	; (f144 <turn_off_side_lights+0x10c>)
    f0f0:	5499      	strb	r1, [r3, r2]
			for(uint16_t i = 0; i < led_num; i++)
    f0f2:	1dbb      	adds	r3, r7, #6
    f0f4:	881a      	ldrh	r2, [r3, #0]
    f0f6:	1dbb      	adds	r3, r7, #6
    f0f8:	3201      	adds	r2, #1
    f0fa:	801a      	strh	r2, [r3, #0]
    f0fc:	4b12      	ldr	r3, [pc, #72]	; (f148 <turn_off_side_lights+0x110>)
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	b29b      	uxth	r3, r3
    f102:	1dba      	adds	r2, r7, #6
    f104:	8812      	ldrh	r2, [r2, #0]
    f106:	429a      	cmp	r2, r3
    f108:	d3b7      	bcc.n	f07a <turn_off_side_lights+0x42>
			L_digital_write(led_num);
    f10a:	4b0f      	ldr	r3, [pc, #60]	; (f148 <turn_off_side_lights+0x110>)
    f10c:	781b      	ldrb	r3, [r3, #0]
    f10e:	b29b      	uxth	r3, r3
    f110:	0018      	movs	r0, r3
    f112:	4b0e      	ldr	r3, [pc, #56]	; (f14c <turn_off_side_lights+0x114>)
    f114:	4798      	blx	r3
			R_digital_write(led_num);
    f116:	4b0c      	ldr	r3, [pc, #48]	; (f148 <turn_off_side_lights+0x110>)
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	b29b      	uxth	r3, r3
    f11c:	0018      	movs	r0, r3
    f11e:	4b0c      	ldr	r3, [pc, #48]	; (f150 <turn_off_side_lights+0x118>)
    f120:	4798      	blx	r3
			DIGITAL_OFF = true;
    f122:	4b06      	ldr	r3, [pc, #24]	; (f13c <turn_off_side_lights+0x104>)
    f124:	2201      	movs	r2, #1
    f126:	701a      	strb	r2, [r3, #0]
}
    f128:	46c0      	nop			; (mov r8, r8)
    f12a:	46bd      	mov	sp, r7
    f12c:	b002      	add	sp, #8
    f12e:	bd80      	pop	{r7, pc}
    f130:	20001a88 	.word	0x20001a88
    f134:	0000a439 	.word	0x0000a439
    f138:	0000a4b5 	.word	0x0000a4b5
    f13c:	200003c0 	.word	0x200003c0
    f140:	20000598 	.word	0x20000598
    f144:	20001440 	.word	0x20001440
    f148:	200000e0 	.word	0x200000e0
    f14c:	0000e7cd 	.word	0x0000e7cd
    f150:	0000e7fd 	.word	0x0000e7fd

0000f154 <set_mode_shuffle_state>:

void set_mode_shuffle_state(uint16_t* shuffled_modes, bool state, uint16_t mode){
    f154:	b580      	push	{r7, lr}
    f156:	b082      	sub	sp, #8
    f158:	af00      	add	r7, sp, #0
    f15a:	6078      	str	r0, [r7, #4]
    f15c:	0008      	movs	r0, r1
    f15e:	0011      	movs	r1, r2
    f160:	1cfb      	adds	r3, r7, #3
    f162:	1c02      	adds	r2, r0, #0
    f164:	701a      	strb	r2, [r3, #0]
    f166:	003b      	movs	r3, r7
    f168:	1c0a      	adds	r2, r1, #0
    f16a:	801a      	strh	r2, [r3, #0]
	if(state){
    f16c:	1cfb      	adds	r3, r7, #3
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	2b00      	cmp	r3, #0
    f172:	d00e      	beq.n	f192 <set_mode_shuffle_state+0x3e>
		*shuffled_modes |= (0x0001 << mode);
    f174:	687b      	ldr	r3, [r7, #4]
    f176:	881b      	ldrh	r3, [r3, #0]
    f178:	b21a      	sxth	r2, r3
    f17a:	003b      	movs	r3, r7
    f17c:	881b      	ldrh	r3, [r3, #0]
    f17e:	2101      	movs	r1, #1
    f180:	4099      	lsls	r1, r3
    f182:	000b      	movs	r3, r1
    f184:	b21b      	sxth	r3, r3
    f186:	4313      	orrs	r3, r2
    f188:	b21b      	sxth	r3, r3
    f18a:	b29a      	uxth	r2, r3
    f18c:	687b      	ldr	r3, [r7, #4]
    f18e:	801a      	strh	r2, [r3, #0]
	} else{
		*shuffled_modes &= (0x0001 << mode)^0xFFFF;
	}
}
    f190:	e00f      	b.n	f1b2 <set_mode_shuffle_state+0x5e>
		*shuffled_modes &= (0x0001 << mode)^0xFFFF;
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	881b      	ldrh	r3, [r3, #0]
    f196:	b21b      	sxth	r3, r3
    f198:	003a      	movs	r2, r7
    f19a:	8812      	ldrh	r2, [r2, #0]
    f19c:	2101      	movs	r1, #1
    f19e:	4091      	lsls	r1, r2
    f1a0:	000a      	movs	r2, r1
    f1a2:	b212      	sxth	r2, r2
    f1a4:	43d2      	mvns	r2, r2
    f1a6:	b212      	sxth	r2, r2
    f1a8:	4013      	ands	r3, r2
    f1aa:	b21b      	sxth	r3, r3
    f1ac:	b29a      	uxth	r2, r3
    f1ae:	687b      	ldr	r3, [r7, #4]
    f1b0:	801a      	strh	r2, [r3, #0]
}
    f1b2:	46c0      	nop			; (mov r8, r8)
    f1b4:	46bd      	mov	sp, r7
    f1b6:	b002      	add	sp, #8
    f1b8:	bd80      	pop	{r7, pc}
	...

0000f1bc <shuffle_light_modes>:

void shuffle_light_modes(void){
    f1bc:	b580      	push	{r7, lr}
    f1be:	b082      	sub	sp, #8
    f1c0:	af00      	add	r7, sp, #0
	static long shuffle_timer = 0;
	if(check_timer_expired(&shuffle_timer, 5000)){
    f1c2:	4a28      	ldr	r2, [pc, #160]	; (f264 <shuffle_light_modes+0xa8>)
    f1c4:	4b28      	ldr	r3, [pc, #160]	; (f268 <shuffle_light_modes+0xac>)
    f1c6:	0011      	movs	r1, r2
    f1c8:	0018      	movs	r0, r3
    f1ca:	4b28      	ldr	r3, [pc, #160]	; (f26c <shuffle_light_modes+0xb0>)
    f1cc:	4798      	blx	r3
    f1ce:	1e03      	subs	r3, r0, #0
    f1d0:	d044      	beq.n	f25c <shuffle_light_modes+0xa0>
		int temp_mode = light_mode;
    f1d2:	4b27      	ldr	r3, [pc, #156]	; (f270 <shuffle_light_modes+0xb4>)
    f1d4:	781b      	ldrb	r3, [r3, #0]
    f1d6:	603b      	str	r3, [r7, #0]
		uint16_t temp_shuffle_bits;
		uint8_t same_index = 0;
    f1d8:	1d7b      	adds	r3, r7, #5
    f1da:	2200      	movs	r2, #0
    f1dc:	701a      	strb	r2, [r3, #0]
		if(RGB_led_type == RGB_ANALOG){
    f1de:	4b25      	ldr	r3, [pc, #148]	; (f274 <shuffle_light_modes+0xb8>)
    f1e0:	781b      	ldrb	r3, [r3, #0]
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	d104      	bne.n	f1f0 <shuffle_light_modes+0x34>
			temp_shuffle_bits = shuffled_analog_modes;
    f1e6:	1dbb      	adds	r3, r7, #6
    f1e8:	4a23      	ldr	r2, [pc, #140]	; (f278 <shuffle_light_modes+0xbc>)
    f1ea:	8812      	ldrh	r2, [r2, #0]
    f1ec:	801a      	strh	r2, [r3, #0]
    f1ee:	e01f      	b.n	f230 <shuffle_light_modes+0x74>
		} else {
			temp_shuffle_bits = shuffled_digital_modes;
    f1f0:	1dbb      	adds	r3, r7, #6
    f1f2:	4a22      	ldr	r2, [pc, #136]	; (f27c <shuffle_light_modes+0xc0>)
    f1f4:	8812      	ldrh	r2, [r2, #0]
    f1f6:	801a      	strh	r2, [r3, #0]
		}
		while(temp_mode == light_mode || !((0x1 << light_mode)&temp_shuffle_bits)) {
    f1f8:	e01a      	b.n	f230 <shuffle_light_modes+0x74>
			light_mode = (rand() % light_modes);
    f1fa:	4b21      	ldr	r3, [pc, #132]	; (f280 <shuffle_light_modes+0xc4>)
    f1fc:	4798      	blx	r3
    f1fe:	0002      	movs	r2, r0
    f200:	2309      	movs	r3, #9
    f202:	0019      	movs	r1, r3
    f204:	4b1f      	ldr	r3, [pc, #124]	; (f284 <shuffle_light_modes+0xc8>)
    f206:	0010      	movs	r0, r2
    f208:	4798      	blx	r3
    f20a:	000b      	movs	r3, r1
    f20c:	b2da      	uxtb	r2, r3
    f20e:	4b18      	ldr	r3, [pc, #96]	; (f270 <shuffle_light_modes+0xb4>)
    f210:	701a      	strb	r2, [r3, #0]
			if(temp_mode == light_mode){
    f212:	4b17      	ldr	r3, [pc, #92]	; (f270 <shuffle_light_modes+0xb4>)
    f214:	781b      	ldrb	r3, [r3, #0]
    f216:	001a      	movs	r2, r3
    f218:	683b      	ldr	r3, [r7, #0]
    f21a:	429a      	cmp	r2, r3
    f21c:	d104      	bne.n	f228 <shuffle_light_modes+0x6c>
				same_index++;
    f21e:	1d7b      	adds	r3, r7, #5
    f220:	781a      	ldrb	r2, [r3, #0]
    f222:	1d7b      	adds	r3, r7, #5
    f224:	3201      	adds	r2, #1
    f226:	701a      	strb	r2, [r3, #0]
			}
			if(same_index > 2){
    f228:	1d7b      	adds	r3, r7, #5
    f22a:	781b      	ldrb	r3, [r3, #0]
    f22c:	2b02      	cmp	r3, #2
    f22e:	d80e      	bhi.n	f24e <shuffle_light_modes+0x92>
		while(temp_mode == light_mode || !((0x1 << light_mode)&temp_shuffle_bits)) {
    f230:	4b0f      	ldr	r3, [pc, #60]	; (f270 <shuffle_light_modes+0xb4>)
    f232:	781b      	ldrb	r3, [r3, #0]
    f234:	001a      	movs	r2, r3
    f236:	683b      	ldr	r3, [r7, #0]
    f238:	429a      	cmp	r2, r3
    f23a:	d0de      	beq.n	f1fa <shuffle_light_modes+0x3e>
    f23c:	1dbb      	adds	r3, r7, #6
    f23e:	881b      	ldrh	r3, [r3, #0]
    f240:	4a0b      	ldr	r2, [pc, #44]	; (f270 <shuffle_light_modes+0xb4>)
    f242:	7812      	ldrb	r2, [r2, #0]
    f244:	4113      	asrs	r3, r2
    f246:	2201      	movs	r2, #1
    f248:	4013      	ands	r3, r2
    f24a:	d0d6      	beq.n	f1fa <shuffle_light_modes+0x3e>
    f24c:	e000      	b.n	f250 <shuffle_light_modes+0x94>
				break;
    f24e:	46c0      	nop			; (mov r8, r8)
			}
		}
		shuffle_timer = millis();
    f250:	4b0d      	ldr	r3, [pc, #52]	; (f288 <shuffle_light_modes+0xcc>)
    f252:	4798      	blx	r3
    f254:	0003      	movs	r3, r0
    f256:	001a      	movs	r2, r3
    f258:	4b03      	ldr	r3, [pc, #12]	; (f268 <shuffle_light_modes+0xac>)
    f25a:	601a      	str	r2, [r3, #0]
	}
}
    f25c:	46c0      	nop			; (mov r8, r8)
    f25e:	46bd      	mov	sp, r7
    f260:	b002      	add	sp, #8
    f262:	bd80      	pop	{r7, pc}
    f264:	00001388 	.word	0x00001388
    f268:	20000488 	.word	0x20000488
    f26c:	00009fbd 	.word	0x00009fbd
    f270:	2000003c 	.word	0x2000003c
    f274:	20001a88 	.word	0x20001a88
    f278:	200003a8 	.word	0x200003a8
    f27c:	200003aa 	.word	0x200003aa
    f280:	0001c1a5 	.word	0x0001c1a5
    f284:	00019461 	.word	0x00019461
    f288:	00009f65 	.word	0x00009f65

0000f28c <initIMU>:


float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

void initIMU()
{
    f28c:	b580      	push	{r7, lr}
    f28e:	b082      	sub	sp, #8
    f290:	af00      	add	r7, sp, #0
	settings.device.agAddress = LSMXD_AG_ADDR;
    f292:	4b4f      	ldr	r3, [pc, #316]	; (f3d0 <initIMU+0x144>)
    f294:	226b      	movs	r2, #107	; 0x6b
    f296:	705a      	strb	r2, [r3, #1]
	settings.device.mAddress = LSM9D_M_ADDR;
    f298:	4b4d      	ldr	r3, [pc, #308]	; (f3d0 <initIMU+0x144>)
    f29a:	221e      	movs	r2, #30
    f29c:	709a      	strb	r2, [r3, #2]

	settings.gyro.enabled = true;
    f29e:	4b4c      	ldr	r3, [pc, #304]	; (f3d0 <initIMU+0x144>)
    f2a0:	2201      	movs	r2, #1
    f2a2:	711a      	strb	r2, [r3, #4]
	settings.gyro.enableX = true;
    f2a4:	4b4a      	ldr	r3, [pc, #296]	; (f3d0 <initIMU+0x144>)
    f2a6:	2201      	movs	r2, #1
    f2a8:	745a      	strb	r2, [r3, #17]
	settings.gyro.enableY = true;
    f2aa:	4b49      	ldr	r3, [pc, #292]	; (f3d0 <initIMU+0x144>)
    f2ac:	2201      	movs	r2, #1
    f2ae:	749a      	strb	r2, [r3, #18]
	settings.gyro.enableZ = true;
    f2b0:	4b47      	ldr	r3, [pc, #284]	; (f3d0 <initIMU+0x144>)
    f2b2:	2201      	movs	r2, #1
    f2b4:	74da      	strb	r2, [r3, #19]
	settings.gyro.lowPowerEnable = false;
    f2b6:	4b46      	ldr	r3, [pc, #280]	; (f3d0 <initIMU+0x144>)
    f2b8:	2200      	movs	r2, #0
    f2ba:	729a      	strb	r2, [r3, #10]
	settings.gyro.HPFEnable = false;
    f2bc:	4b44      	ldr	r3, [pc, #272]	; (f3d0 <initIMU+0x144>)
    f2be:	2200      	movs	r2, #0
    f2c0:	72da      	strb	r2, [r3, #11]
	settings.gyro.flipX = false;
    f2c2:	4b43      	ldr	r3, [pc, #268]	; (f3d0 <initIMU+0x144>)
    f2c4:	2200      	movs	r2, #0
    f2c6:	735a      	strb	r2, [r3, #13]
	settings.gyro.flipY = false; // LSM6D inverted from LSM9D, corrected in init func
    f2c8:	4b41      	ldr	r3, [pc, #260]	; (f3d0 <initIMU+0x144>)
    f2ca:	2200      	movs	r2, #0
    f2cc:	739a      	strb	r2, [r3, #14]
	settings.gyro.flipZ = false;
    f2ce:	4b40      	ldr	r3, [pc, #256]	; (f3d0 <initIMU+0x144>)
    f2d0:	2200      	movs	r2, #0
    f2d2:	73da      	strb	r2, [r3, #15]
	settings.gyro.latchInterrupt = true;
    f2d4:	4b3e      	ldr	r3, [pc, #248]	; (f3d0 <initIMU+0x144>)
    f2d6:	2201      	movs	r2, #1
    f2d8:	751a      	strb	r2, [r3, #20]
	
	settings.accel.enabled = true;
    f2da:	4b3d      	ldr	r3, [pc, #244]	; (f3d0 <initIMU+0x144>)
    f2dc:	2201      	movs	r2, #1
    f2de:	759a      	strb	r2, [r3, #22]
	settings.accel.enableX = true;
    f2e0:	4b3b      	ldr	r3, [pc, #236]	; (f3d0 <initIMU+0x144>)
    f2e2:	2201      	movs	r2, #1
    f2e4:	765a      	strb	r2, [r3, #25]
	settings.accel.enableY = true;
    f2e6:	4b3a      	ldr	r3, [pc, #232]	; (f3d0 <initIMU+0x144>)
    f2e8:	2201      	movs	r2, #1
    f2ea:	769a      	strb	r2, [r3, #26]
	settings.accel.enableZ = true;
    f2ec:	4b38      	ldr	r3, [pc, #224]	; (f3d0 <initIMU+0x144>)
    f2ee:	2201      	movs	r2, #1
    f2f0:	76da      	strb	r2, [r3, #27]
	settings.accel.highResEnable = false;
    f2f2:	4b37      	ldr	r3, [pc, #220]	; (f3d0 <initIMU+0x144>)
    f2f4:	2200      	movs	r2, #0
    f2f6:	775a      	strb	r2, [r3, #29]

	settings.temp.enabled = true;
    f2f8:	4b35      	ldr	r3, [pc, #212]	; (f3d0 <initIMU+0x144>)
    f2fa:	2227      	movs	r2, #39	; 0x27
    f2fc:	2101      	movs	r1, #1
    f2fe:	5499      	strb	r1, [r3, r2]

#ifdef HW_3v4
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;//245
    f300:	4b33      	ldr	r3, [pc, #204]	; (f3d0 <initIMU+0x144>)
    f302:	22f5      	movs	r2, #245	; 0xf5
    f304:	80da      	strh	r2, [r3, #6]
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
    f306:	4b32      	ldr	r3, [pc, #200]	; (f3d0 <initIMU+0x144>)
    f308:	2206      	movs	r2, #6
    f30a:	721a      	strb	r2, [r3, #8]
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
    f30c:	4b30      	ldr	r3, [pc, #192]	; (f3d0 <initIMU+0x144>)
    f30e:	2200      	movs	r2, #0
    f310:	725a      	strb	r2, [r3, #9]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
    f312:	4b2f      	ldr	r3, [pc, #188]	; (f3d0 <initIMU+0x144>)
    f314:	2200      	movs	r2, #0
    f316:	731a      	strb	r2, [r3, #12]
	settings.gyro.orientation = 0;
    f318:	4b2d      	ldr	r3, [pc, #180]	; (f3d0 <initIMU+0x144>)
    f31a:	2200      	movs	r2, #0
    f31c:	741a      	strb	r2, [r3, #16]

	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 16;//8
    f31e:	4b2c      	ldr	r3, [pc, #176]	; (f3d0 <initIMU+0x144>)
    f320:	2210      	movs	r2, #16
    f322:	75da      	strb	r2, [r3, #23]
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
    f324:	4b2a      	ldr	r3, [pc, #168]	; (f3d0 <initIMU+0x144>)
    f326:	2206      	movs	r2, #6
    f328:	761a      	strb	r2, [r3, #24]
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = -1;
    f32a:	4b29      	ldr	r3, [pc, #164]	; (f3d0 <initIMU+0x144>)
    f32c:	22ff      	movs	r2, #255	; 0xff
    f32e:	771a      	strb	r2, [r3, #28]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
    f330:	4b27      	ldr	r3, [pc, #156]	; (f3d0 <initIMU+0x144>)
    f332:	2200      	movs	r2, #0
    f334:	779a      	strb	r2, [r3, #30]

	settings.mag.enabled = true;
    f336:	4b26      	ldr	r3, [pc, #152]	; (f3d0 <initIMU+0x144>)
    f338:	2201      	movs	r2, #1
    f33a:	77da      	strb	r2, [r3, #31]
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 8;
    f33c:	4b24      	ldr	r3, [pc, #144]	; (f3d0 <initIMU+0x144>)
    f33e:	2220      	movs	r2, #32
    f340:	2108      	movs	r1, #8
    f342:	5499      	strb	r1, [r3, r2]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
    f344:	4b22      	ldr	r3, [pc, #136]	; (f3d0 <initIMU+0x144>)
    f346:	2221      	movs	r2, #33	; 0x21
    f348:	2107      	movs	r1, #7
    f34a:	5499      	strb	r1, [r3, r2]
	settings.mag.tempCompensationEnable = true;
    f34c:	4b20      	ldr	r3, [pc, #128]	; (f3d0 <initIMU+0x144>)
    f34e:	2222      	movs	r2, #34	; 0x22
    f350:	2101      	movs	r1, #1
    f352:	5499      	strb	r1, [r3, r2]
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 1;
    f354:	4b1e      	ldr	r3, [pc, #120]	; (f3d0 <initIMU+0x144>)
    f356:	2223      	movs	r2, #35	; 0x23
    f358:	2101      	movs	r1, #1
    f35a:	5499      	strb	r1, [r3, r2]
	settings.mag.ZPerformance = 1;
    f35c:	4b1c      	ldr	r3, [pc, #112]	; (f3d0 <initIMU+0x144>)
    f35e:	2224      	movs	r2, #36	; 0x24
    f360:	2101      	movs	r1, #1
    f362:	5499      	strb	r1, [r3, r2]
	settings.mag.lowPowerEnable = false;
    f364:	4b1a      	ldr	r3, [pc, #104]	; (f3d0 <initIMU+0x144>)
    f366:	2225      	movs	r2, #37	; 0x25
    f368:	2100      	movs	r1, #0
    f36a:	5499      	strb	r1, [r3, r2]
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
    f36c:	4b18      	ldr	r3, [pc, #96]	; (f3d0 <initIMU+0x144>)
    f36e:	2226      	movs	r2, #38	; 0x26
    f370:	2100      	movs	r1, #0
    f372:	5499      	strb	r1, [r3, r2]
	// 0 = ODR/4    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
#endif

	for (int i=0; i<3; i++)
    f374:	2300      	movs	r3, #0
    f376:	607b      	str	r3, [r7, #4]
    f378:	e020      	b.n	f3bc <initIMU+0x130>
	{
		gBias[i] = 0;
    f37a:	4b16      	ldr	r3, [pc, #88]	; (f3d4 <initIMU+0x148>)
    f37c:	687a      	ldr	r2, [r7, #4]
    f37e:	0092      	lsls	r2, r2, #2
    f380:	2100      	movs	r1, #0
    f382:	50d1      	str	r1, [r2, r3]
		aBias[i] = 0;
    f384:	4b14      	ldr	r3, [pc, #80]	; (f3d8 <initIMU+0x14c>)
    f386:	687a      	ldr	r2, [r7, #4]
    f388:	0092      	lsls	r2, r2, #2
    f38a:	2100      	movs	r1, #0
    f38c:	50d1      	str	r1, [r2, r3]
		mBias[i] = 0;
    f38e:	4b13      	ldr	r3, [pc, #76]	; (f3dc <initIMU+0x150>)
    f390:	687a      	ldr	r2, [r7, #4]
    f392:	0092      	lsls	r2, r2, #2
    f394:	2100      	movs	r1, #0
    f396:	50d1      	str	r1, [r2, r3]
		gBiasRaw[i] = 0;
    f398:	4b11      	ldr	r3, [pc, #68]	; (f3e0 <initIMU+0x154>)
    f39a:	687a      	ldr	r2, [r7, #4]
    f39c:	0052      	lsls	r2, r2, #1
    f39e:	2100      	movs	r1, #0
    f3a0:	52d1      	strh	r1, [r2, r3]
		aBiasRaw[i] = 0;
    f3a2:	4b10      	ldr	r3, [pc, #64]	; (f3e4 <initIMU+0x158>)
    f3a4:	687a      	ldr	r2, [r7, #4]
    f3a6:	0052      	lsls	r2, r2, #1
    f3a8:	2100      	movs	r1, #0
    f3aa:	52d1      	strh	r1, [r2, r3]
		mBiasRaw[i] = 0;
    f3ac:	4b0e      	ldr	r3, [pc, #56]	; (f3e8 <initIMU+0x15c>)
    f3ae:	687a      	ldr	r2, [r7, #4]
    f3b0:	0052      	lsls	r2, r2, #1
    f3b2:	2100      	movs	r1, #0
    f3b4:	52d1      	strh	r1, [r2, r3]
	for (int i=0; i<3; i++)
    f3b6:	687b      	ldr	r3, [r7, #4]
    f3b8:	3301      	adds	r3, #1
    f3ba:	607b      	str	r3, [r7, #4]
    f3bc:	687b      	ldr	r3, [r7, #4]
    f3be:	2b02      	cmp	r3, #2
    f3c0:	dddb      	ble.n	f37a <initIMU+0xee>
	}
	_autoCalc = false;
    f3c2:	4b0a      	ldr	r3, [pc, #40]	; (f3ec <initIMU+0x160>)
    f3c4:	2200      	movs	r2, #0
    f3c6:	701a      	strb	r2, [r3, #0]
}
    f3c8:	46c0      	nop			; (mov r8, r8)
    f3ca:	46bd      	mov	sp, r7
    f3cc:	b002      	add	sp, #8
    f3ce:	bd80      	pop	{r7, pc}
    f3d0:	200008dc 	.word	0x200008dc
    f3d4:	20001a50 	.word	0x20001a50
    f3d8:	20000580 	.word	0x20000580
    f3dc:	20001b30 	.word	0x20001b30
    f3e0:	20001430 	.word	0x20001430
    f3e4:	20001438 	.word	0x20001438
    f3e8:	200006c4 	.word	0x200006c4
    f3ec:	20000dec 	.word	0x20000dec

0000f3f0 <beginIMU>:


uint16_t beginIMU()
{
    f3f0:	b590      	push	{r4, r7, lr}
    f3f2:	b083      	sub	sp, #12
    f3f4:	af00      	add	r7, sp, #0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
    f3f6:	4b1e      	ldr	r3, [pc, #120]	; (f470 <beginIMU+0x80>)
    f3f8:	785a      	ldrb	r2, [r3, #1]
    f3fa:	4b1e      	ldr	r3, [pc, #120]	; (f474 <beginIMU+0x84>)
    f3fc:	701a      	strb	r2, [r3, #0]
	_mAddress = settings.device.mAddress;
    f3fe:	4b1c      	ldr	r3, [pc, #112]	; (f470 <beginIMU+0x80>)
    f400:	789a      	ldrb	r2, [r3, #2]
    f402:	4b1d      	ldr	r3, [pc, #116]	; (f478 <beginIMU+0x88>)
    f404:	701a      	strb	r2, [r3, #0]
	
	constrainScales();
    f406:	4b1d      	ldr	r3, [pc, #116]	; (f47c <beginIMU+0x8c>)
    f408:	4798      	blx	r3
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
    f40a:	4b1d      	ldr	r3, [pc, #116]	; (f480 <beginIMU+0x90>)
    f40c:	4798      	blx	r3
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
    f40e:	4b1d      	ldr	r3, [pc, #116]	; (f484 <beginIMU+0x94>)
    f410:	4798      	blx	r3
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
    f412:	4b1d      	ldr	r3, [pc, #116]	; (f488 <beginIMU+0x98>)
    f414:	4798      	blx	r3
	
	initI2C();	// Initialize I2C
    f416:	4b1d      	ldr	r3, [pc, #116]	; (f48c <beginIMU+0x9c>)
    f418:	4798      	blx	r3
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
    f41a:	1dfc      	adds	r4, r7, #7
    f41c:	200f      	movs	r0, #15
    f41e:	4b1c      	ldr	r3, [pc, #112]	; (f490 <beginIMU+0xa0>)
    f420:	4798      	blx	r3
    f422:	0003      	movs	r3, r0
    f424:	7023      	strb	r3, [r4, #0]
	
#ifdef HW_3v4
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
    f426:	1dbc      	adds	r4, r7, #6
    f428:	200f      	movs	r0, #15
    f42a:	4b1a      	ldr	r3, [pc, #104]	; (f494 <beginIMU+0xa4>)
    f42c:	4798      	blx	r3
    f42e:	0003      	movs	r3, r0
    f430:	7023      	strb	r3, [r4, #0]
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
    f432:	1dfb      	adds	r3, r7, #7
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	021b      	lsls	r3, r3, #8
    f438:	b21a      	sxth	r2, r3
    f43a:	1dbb      	adds	r3, r7, #6
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	b21b      	sxth	r3, r3
    f440:	4313      	orrs	r3, r2
    f442:	b21a      	sxth	r2, r3
    f444:	1d3b      	adds	r3, r7, #4
    f446:	801a      	strh	r2, [r3, #0]
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
    f448:	1d3b      	adds	r3, r7, #4
    f44a:	881b      	ldrh	r3, [r3, #0]
    f44c:	4a12      	ldr	r2, [pc, #72]	; (f498 <beginIMU+0xa8>)
    f44e:	4293      	cmp	r3, r2
    f450:	d001      	beq.n	f456 <beginIMU+0x66>
		return 0;
    f452:	2300      	movs	r3, #0
    f454:	e007      	b.n	f466 <beginIMU+0x76>
	uint16_t whoAmICombined = xgTest;
	if (xgTest != 0x69 && xgTest != 0x6A && xgTest != 0x6B && xgTest != 0x6C)//WHO_AM_I_AG_RSP) // A work around to protect for the use of al LSM6DS parts
		return 0;
#endif
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
    f456:	4b11      	ldr	r3, [pc, #68]	; (f49c <beginIMU+0xac>)
    f458:	4798      	blx	r3
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
    f45a:	4b11      	ldr	r3, [pc, #68]	; (f4a0 <beginIMU+0xb0>)
    f45c:	4798      	blx	r3
	
	// Magnetometer initialization stuff:
#ifdef HW_3v4
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
    f45e:	4b11      	ldr	r3, [pc, #68]	; (f4a4 <beginIMU+0xb4>)
    f460:	4798      	blx	r3
#endif

	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
    f462:	1d3b      	adds	r3, r7, #4
    f464:	881b      	ldrh	r3, [r3, #0]
}
    f466:	0018      	movs	r0, r3
    f468:	46bd      	mov	sp, r7
    f46a:	b003      	add	sp, #12
    f46c:	bd90      	pop	{r4, r7, pc}
    f46e:	46c0      	nop			; (mov r8, r8)
    f470:	200008dc 	.word	0x200008dc
    f474:	20001124 	.word	0x20001124
    f478:	20000fb0 	.word	0x20000fb0
    f47c:	0000fefd 	.word	0x0000fefd
    f480:	0000fd79 	.word	0x0000fd79
    f484:	0000fde9 	.word	0x0000fde9
    f488:	0000fdb1 	.word	0x0000fdb1
    f48c:	0001008d 	.word	0x0001008d
    f490:	0000fff1 	.word	0x0000fff1
    f494:	0001005d 	.word	0x0001005d
    f498:	0000683d 	.word	0x0000683d
    f49c:	0000f4a9 	.word	0x0000f4a9
    f4a0:	0000f629 	.word	0x0000f629
    f4a4:	0000f9b5 	.word	0x0000f9b5

0000f4a8 <initGyro>:

void initGyro()
{
    f4a8:	b580      	push	{r7, lr}
    f4aa:	b082      	sub	sp, #8
    f4ac:	af00      	add	r7, sp, #0
#ifdef HW_3v4
	uint8_t tempRegValue = 0;
    f4ae:	1dfb      	adds	r3, r7, #7
    f4b0:	2200      	movs	r2, #0
    f4b2:	701a      	strb	r2, [r3, #0]
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection

	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
    f4b4:	4b5a      	ldr	r3, [pc, #360]	; (f620 <initGyro+0x178>)
    f4b6:	791b      	ldrb	r3, [r3, #4]
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	d004      	beq.n	f4c6 <initGyro+0x1e>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
    f4bc:	4b58      	ldr	r3, [pc, #352]	; (f620 <initGyro+0x178>)
    f4be:	7a1b      	ldrb	r3, [r3, #8]
    f4c0:	015a      	lsls	r2, r3, #5
    f4c2:	1dfb      	adds	r3, r7, #7
    f4c4:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.gyro.scale)
    f4c6:	4b56      	ldr	r3, [pc, #344]	; (f620 <initGyro+0x178>)
    f4c8:	88db      	ldrh	r3, [r3, #6]
    f4ca:	22fa      	movs	r2, #250	; 0xfa
    f4cc:	0052      	lsls	r2, r2, #1
    f4ce:	4293      	cmp	r3, r2
    f4d0:	d004      	beq.n	f4dc <initGyro+0x34>
    f4d2:	22fa      	movs	r2, #250	; 0xfa
    f4d4:	00d2      	lsls	r2, r2, #3
    f4d6:	4293      	cmp	r3, r2
    f4d8:	d007      	beq.n	f4ea <initGyro+0x42>
    f4da:	e00d      	b.n	f4f8 <initGyro+0x50>
	{
		case 500:
		tempRegValue |= (0x1 << 3);
    f4dc:	1dfb      	adds	r3, r7, #7
    f4de:	1dfa      	adds	r2, r7, #7
    f4e0:	7812      	ldrb	r2, [r2, #0]
    f4e2:	2108      	movs	r1, #8
    f4e4:	430a      	orrs	r2, r1
    f4e6:	701a      	strb	r2, [r3, #0]
		break;
    f4e8:	e006      	b.n	f4f8 <initGyro+0x50>
		case 2000:
		tempRegValue |= (0x3 << 3);
    f4ea:	1dfb      	adds	r3, r7, #7
    f4ec:	1dfa      	adds	r2, r7, #7
    f4ee:	7812      	ldrb	r2, [r2, #0]
    f4f0:	2118      	movs	r1, #24
    f4f2:	430a      	orrs	r2, r1
    f4f4:	701a      	strb	r2, [r3, #0]
		break;
    f4f6:	46c0      	nop			; (mov r8, r8)
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
    f4f8:	4b49      	ldr	r3, [pc, #292]	; (f620 <initGyro+0x178>)
    f4fa:	7a5b      	ldrb	r3, [r3, #9]
    f4fc:	b25b      	sxtb	r3, r3
    f4fe:	2203      	movs	r2, #3
    f500:	4013      	ands	r3, r2
    f502:	b25a      	sxtb	r2, r3
    f504:	1dfb      	adds	r3, r7, #7
    f506:	781b      	ldrb	r3, [r3, #0]
    f508:	b25b      	sxtb	r3, r3
    f50a:	4313      	orrs	r3, r2
    f50c:	b25a      	sxtb	r2, r3
    f50e:	1dfb      	adds	r3, r7, #7
    f510:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
    f512:	1dfb      	adds	r3, r7, #7
    f514:	781b      	ldrb	r3, [r3, #0]
    f516:	0019      	movs	r1, r3
    f518:	2010      	movs	r0, #16
    f51a:	4b42      	ldr	r3, [pc, #264]	; (f624 <initGyro+0x17c>)
    f51c:	4798      	blx	r3

	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);
    f51e:	2100      	movs	r1, #0
    f520:	2011      	movs	r0, #17
    f522:	4b40      	ldr	r3, [pc, #256]	; (f624 <initGyro+0x17c>)
    f524:	4798      	blx	r3
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
    f526:	4b3e      	ldr	r3, [pc, #248]	; (f620 <initGyro+0x178>)
    f528:	7a9b      	ldrb	r3, [r3, #10]
    f52a:	2b00      	cmp	r3, #0
    f52c:	d001      	beq.n	f532 <initGyro+0x8a>
    f52e:	2280      	movs	r2, #128	; 0x80
    f530:	e000      	b.n	f534 <initGyro+0x8c>
    f532:	2200      	movs	r2, #0
    f534:	1dfb      	adds	r3, r7, #7
    f536:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.HPFEnable)
    f538:	4b39      	ldr	r3, [pc, #228]	; (f620 <initGyro+0x178>)
    f53a:	7adb      	ldrb	r3, [r3, #11]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d00c      	beq.n	f55a <initGyro+0xb2>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
    f540:	4b37      	ldr	r3, [pc, #220]	; (f620 <initGyro+0x178>)
    f542:	7b1b      	ldrb	r3, [r3, #12]
    f544:	220f      	movs	r2, #15
    f546:	4013      	ands	r3, r2
    f548:	b2da      	uxtb	r2, r3
    f54a:	1dfb      	adds	r3, r7, #7
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	4313      	orrs	r3, r2
    f550:	b2da      	uxtb	r2, r3
    f552:	1dfb      	adds	r3, r7, #7
    f554:	2140      	movs	r1, #64	; 0x40
    f556:	430a      	orrs	r2, r1
    f558:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
    f55a:	1dfb      	adds	r3, r7, #7
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	0019      	movs	r1, r3
    f560:	2012      	movs	r0, #18
    f562:	4b30      	ldr	r3, [pc, #192]	; (f624 <initGyro+0x17c>)
    f564:	4798      	blx	r3
	// Zen_G - Z-axis output enable (0:disable, 1:enable)
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
    f566:	1dfb      	adds	r3, r7, #7
    f568:	2200      	movs	r2, #0
    f56a:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
    f56c:	4b2c      	ldr	r3, [pc, #176]	; (f620 <initGyro+0x178>)
    f56e:	7cdb      	ldrb	r3, [r3, #19]
    f570:	2b00      	cmp	r3, #0
    f572:	d005      	beq.n	f580 <initGyro+0xd8>
    f574:	1dfb      	adds	r3, r7, #7
    f576:	1dfa      	adds	r2, r7, #7
    f578:	7812      	ldrb	r2, [r2, #0]
    f57a:	2120      	movs	r1, #32
    f57c:	430a      	orrs	r2, r1
    f57e:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
    f580:	4b27      	ldr	r3, [pc, #156]	; (f620 <initGyro+0x178>)
    f582:	7c9b      	ldrb	r3, [r3, #18]
    f584:	2b00      	cmp	r3, #0
    f586:	d005      	beq.n	f594 <initGyro+0xec>
    f588:	1dfb      	adds	r3, r7, #7
    f58a:	1dfa      	adds	r2, r7, #7
    f58c:	7812      	ldrb	r2, [r2, #0]
    f58e:	2110      	movs	r1, #16
    f590:	430a      	orrs	r2, r1
    f592:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
    f594:	4b22      	ldr	r3, [pc, #136]	; (f620 <initGyro+0x178>)
    f596:	7c5b      	ldrb	r3, [r3, #17]
    f598:	2b00      	cmp	r3, #0
    f59a:	d005      	beq.n	f5a8 <initGyro+0x100>
    f59c:	1dfb      	adds	r3, r7, #7
    f59e:	1dfa      	adds	r2, r7, #7
    f5a0:	7812      	ldrb	r2, [r2, #0]
    f5a2:	2108      	movs	r1, #8
    f5a4:	430a      	orrs	r2, r1
    f5a6:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
    f5a8:	4b1d      	ldr	r3, [pc, #116]	; (f620 <initGyro+0x178>)
    f5aa:	7d1b      	ldrb	r3, [r3, #20]
    f5ac:	2b00      	cmp	r3, #0
    f5ae:	d005      	beq.n	f5bc <initGyro+0x114>
    f5b0:	1dfb      	adds	r3, r7, #7
    f5b2:	1dfa      	adds	r2, r7, #7
    f5b4:	7812      	ldrb	r2, [r2, #0]
    f5b6:	2102      	movs	r1, #2
    f5b8:	430a      	orrs	r2, r1
    f5ba:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG4, tempRegValue);
    f5bc:	1dfb      	adds	r3, r7, #7
    f5be:	781b      	ldrb	r3, [r3, #0]
    f5c0:	0019      	movs	r1, r3
    f5c2:	201e      	movs	r0, #30
    f5c4:	4b17      	ldr	r3, [pc, #92]	; (f624 <initGyro+0x17c>)
    f5c6:	4798      	blx	r3

	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
    f5c8:	1dfb      	adds	r3, r7, #7
    f5ca:	2200      	movs	r2, #0
    f5cc:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
    f5ce:	4b14      	ldr	r3, [pc, #80]	; (f620 <initGyro+0x178>)
    f5d0:	7b5b      	ldrb	r3, [r3, #13]
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d005      	beq.n	f5e2 <initGyro+0x13a>
    f5d6:	1dfb      	adds	r3, r7, #7
    f5d8:	1dfa      	adds	r2, r7, #7
    f5da:	7812      	ldrb	r2, [r2, #0]
    f5dc:	2120      	movs	r1, #32
    f5de:	430a      	orrs	r2, r1
    f5e0:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
    f5e2:	4b0f      	ldr	r3, [pc, #60]	; (f620 <initGyro+0x178>)
    f5e4:	7b9b      	ldrb	r3, [r3, #14]
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	d005      	beq.n	f5f6 <initGyro+0x14e>
    f5ea:	1dfb      	adds	r3, r7, #7
    f5ec:	1dfa      	adds	r2, r7, #7
    f5ee:	7812      	ldrb	r2, [r2, #0]
    f5f0:	2110      	movs	r1, #16
    f5f2:	430a      	orrs	r2, r1
    f5f4:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
    f5f6:	4b0a      	ldr	r3, [pc, #40]	; (f620 <initGyro+0x178>)
    f5f8:	7bdb      	ldrb	r3, [r3, #15]
    f5fa:	2b00      	cmp	r3, #0
    f5fc:	d005      	beq.n	f60a <initGyro+0x162>
    f5fe:	1dfb      	adds	r3, r7, #7
    f600:	1dfa      	adds	r2, r7, #7
    f602:	7812      	ldrb	r2, [r2, #0]
    f604:	2108      	movs	r1, #8
    f606:	430a      	orrs	r2, r1
    f608:	701a      	strb	r2, [r3, #0]
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
    f60a:	1dfb      	adds	r3, r7, #7
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	0019      	movs	r1, r3
    f610:	2013      	movs	r0, #19
    f612:	4b04      	ldr	r3, [pc, #16]	; (f624 <initGyro+0x17c>)
    f614:	4798      	blx	r3
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (!settings.gyro.flipY) tempRegValue |= (1<<4); // Flip to align with LSM9D
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
#endif
}
    f616:	46c0      	nop			; (mov r8, r8)
    f618:	46bd      	mov	sp, r7
    f61a:	b002      	add	sp, #8
    f61c:	bd80      	pop	{r7, pc}
    f61e:	46c0      	nop			; (mov r8, r8)
    f620:	200008dc 	.word	0x200008dc
    f624:	0000ff89 	.word	0x0000ff89

0000f628 <initAccel>:

void initAccel()
{
    f628:	b580      	push	{r7, lr}
    f62a:	b082      	sub	sp, #8
    f62c:	af00      	add	r7, sp, #0
#ifdef HW_3v4
	uint8_t tempRegValue = 0;
    f62e:	1dfb      	adds	r3, r7, #7
    f630:	2200      	movs	r2, #0
    f632:	701a      	strb	r2, [r3, #0]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
    f634:	4b4b      	ldr	r3, [pc, #300]	; (f764 <initAccel+0x13c>)
    f636:	7edb      	ldrb	r3, [r3, #27]
    f638:	2b00      	cmp	r3, #0
    f63a:	d005      	beq.n	f648 <initAccel+0x20>
    f63c:	1dfb      	adds	r3, r7, #7
    f63e:	1dfa      	adds	r2, r7, #7
    f640:	7812      	ldrb	r2, [r2, #0]
    f642:	2120      	movs	r1, #32
    f644:	430a      	orrs	r2, r1
    f646:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableY) tempRegValue |= (1<<4);
    f648:	4b46      	ldr	r3, [pc, #280]	; (f764 <initAccel+0x13c>)
    f64a:	7e9b      	ldrb	r3, [r3, #26]
    f64c:	2b00      	cmp	r3, #0
    f64e:	d005      	beq.n	f65c <initAccel+0x34>
    f650:	1dfb      	adds	r3, r7, #7
    f652:	1dfa      	adds	r2, r7, #7
    f654:	7812      	ldrb	r2, [r2, #0]
    f656:	2110      	movs	r1, #16
    f658:	430a      	orrs	r2, r1
    f65a:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableX) tempRegValue |= (1<<3);
    f65c:	4b41      	ldr	r3, [pc, #260]	; (f764 <initAccel+0x13c>)
    f65e:	7e5b      	ldrb	r3, [r3, #25]
    f660:	2b00      	cmp	r3, #0
    f662:	d005      	beq.n	f670 <initAccel+0x48>
    f664:	1dfb      	adds	r3, r7, #7
    f666:	1dfa      	adds	r2, r7, #7
    f668:	7812      	ldrb	r2, [r2, #0]
    f66a:	2108      	movs	r1, #8
    f66c:	430a      	orrs	r2, r1
    f66e:	701a      	strb	r2, [r3, #0]
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
    f670:	1dfb      	adds	r3, r7, #7
    f672:	781b      	ldrb	r3, [r3, #0]
    f674:	0019      	movs	r1, r3
    f676:	201f      	movs	r0, #31
    f678:	4b3b      	ldr	r3, [pc, #236]	; (f768 <initAccel+0x140>)
    f67a:	4798      	blx	r3
	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
	// ODR_XL[2:0] - Output data rate & power mode selection
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
    f67c:	1dfb      	adds	r3, r7, #7
    f67e:	2200      	movs	r2, #0
    f680:	701a      	strb	r2, [r3, #0]
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
    f682:	4b38      	ldr	r3, [pc, #224]	; (f764 <initAccel+0x13c>)
    f684:	7d9b      	ldrb	r3, [r3, #22]
    f686:	2b00      	cmp	r3, #0
    f688:	d00a      	beq.n	f6a0 <initAccel+0x78>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
    f68a:	4b36      	ldr	r3, [pc, #216]	; (f764 <initAccel+0x13c>)
    f68c:	7e1b      	ldrb	r3, [r3, #24]
    f68e:	015b      	lsls	r3, r3, #5
    f690:	b25a      	sxtb	r2, r3
    f692:	1dfb      	adds	r3, r7, #7
    f694:	781b      	ldrb	r3, [r3, #0]
    f696:	b25b      	sxtb	r3, r3
    f698:	4313      	orrs	r3, r2
    f69a:	b25a      	sxtb	r2, r3
    f69c:	1dfb      	adds	r3, r7, #7
    f69e:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.accel.scale)
    f6a0:	4b30      	ldr	r3, [pc, #192]	; (f764 <initAccel+0x13c>)
    f6a2:	7ddb      	ldrb	r3, [r3, #23]
    f6a4:	2b08      	cmp	r3, #8
    f6a6:	d00a      	beq.n	f6be <initAccel+0x96>
    f6a8:	2b10      	cmp	r3, #16
    f6aa:	d00f      	beq.n	f6cc <initAccel+0xa4>
    f6ac:	2b04      	cmp	r3, #4
    f6ae:	d114      	bne.n	f6da <initAccel+0xb2>
	{
		case 4:
		tempRegValue |= (0x2 << 3);
    f6b0:	1dfb      	adds	r3, r7, #7
    f6b2:	1dfa      	adds	r2, r7, #7
    f6b4:	7812      	ldrb	r2, [r2, #0]
    f6b6:	2110      	movs	r1, #16
    f6b8:	430a      	orrs	r2, r1
    f6ba:	701a      	strb	r2, [r3, #0]
		break;
    f6bc:	e00d      	b.n	f6da <initAccel+0xb2>
		case 8:
		tempRegValue |= (0x3 << 3);
    f6be:	1dfb      	adds	r3, r7, #7
    f6c0:	1dfa      	adds	r2, r7, #7
    f6c2:	7812      	ldrb	r2, [r2, #0]
    f6c4:	2118      	movs	r1, #24
    f6c6:	430a      	orrs	r2, r1
    f6c8:	701a      	strb	r2, [r3, #0]
		break;
    f6ca:	e006      	b.n	f6da <initAccel+0xb2>
		case 16:
		tempRegValue |= (0x1 << 3);
    f6cc:	1dfb      	adds	r3, r7, #7
    f6ce:	1dfa      	adds	r2, r7, #7
    f6d0:	7812      	ldrb	r2, [r2, #0]
    f6d2:	2108      	movs	r1, #8
    f6d4:	430a      	orrs	r2, r1
    f6d6:	701a      	strb	r2, [r3, #0]
		break;
    f6d8:	46c0      	nop			; (mov r8, r8)
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
    f6da:	4b22      	ldr	r3, [pc, #136]	; (f764 <initAccel+0x13c>)
    f6dc:	7f1b      	ldrb	r3, [r3, #28]
    f6de:	b25b      	sxtb	r3, r3
    f6e0:	2b00      	cmp	r3, #0
    f6e2:	db12      	blt.n	f70a <initAccel+0xe2>
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
    f6e4:	1dfb      	adds	r3, r7, #7
    f6e6:	1dfa      	adds	r2, r7, #7
    f6e8:	7812      	ldrb	r2, [r2, #0]
    f6ea:	2104      	movs	r1, #4
    f6ec:	430a      	orrs	r2, r1
    f6ee:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.bandwidth & 0x03);
    f6f0:	4b1c      	ldr	r3, [pc, #112]	; (f764 <initAccel+0x13c>)
    f6f2:	7f1b      	ldrb	r3, [r3, #28]
    f6f4:	b25b      	sxtb	r3, r3
    f6f6:	2203      	movs	r2, #3
    f6f8:	4013      	ands	r3, r2
    f6fa:	b25a      	sxtb	r2, r3
    f6fc:	1dfb      	adds	r3, r7, #7
    f6fe:	781b      	ldrb	r3, [r3, #0]
    f700:	b25b      	sxtb	r3, r3
    f702:	4313      	orrs	r3, r2
    f704:	b25a      	sxtb	r2, r3
    f706:	1dfb      	adds	r3, r7, #7
    f708:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
    f70a:	1dfb      	adds	r3, r7, #7
    f70c:	781b      	ldrb	r3, [r3, #0]
    f70e:	0019      	movs	r1, r3
    f710:	2020      	movs	r0, #32
    f712:	4b15      	ldr	r3, [pc, #84]	; (f768 <initAccel+0x140>)
    f714:	4798      	blx	r3
	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
    f716:	1dfb      	adds	r3, r7, #7
    f718:	2200      	movs	r2, #0
    f71a:	701a      	strb	r2, [r3, #0]
	if (settings.accel.highResEnable)
    f71c:	4b11      	ldr	r3, [pc, #68]	; (f764 <initAccel+0x13c>)
    f71e:	7f5b      	ldrb	r3, [r3, #29]
    f720:	2b00      	cmp	r3, #0
    f722:	d014      	beq.n	f74e <initAccel+0x126>
	{
		tempRegValue |= (1<<7); // Set HR bit
    f724:	1dfb      	adds	r3, r7, #7
    f726:	1dfa      	adds	r2, r7, #7
    f728:	7812      	ldrb	r2, [r2, #0]
    f72a:	2180      	movs	r1, #128	; 0x80
    f72c:	4249      	negs	r1, r1
    f72e:	430a      	orrs	r2, r1
    f730:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
    f732:	4b0c      	ldr	r3, [pc, #48]	; (f764 <initAccel+0x13c>)
    f734:	7f9b      	ldrb	r3, [r3, #30]
    f736:	015b      	lsls	r3, r3, #5
    f738:	b25b      	sxtb	r3, r3
    f73a:	2260      	movs	r2, #96	; 0x60
    f73c:	4013      	ands	r3, r2
    f73e:	b25a      	sxtb	r2, r3
    f740:	1dfb      	adds	r3, r7, #7
    f742:	781b      	ldrb	r3, [r3, #0]
    f744:	b25b      	sxtb	r3, r3
    f746:	4313      	orrs	r3, r2
    f748:	b25a      	sxtb	r2, r3
    f74a:	1dfb      	adds	r3, r7, #7
    f74c:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
    f74e:	1dfb      	adds	r3, r7, #7
    f750:	781b      	ldrb	r3, [r3, #0]
    f752:	0019      	movs	r1, r3
    f754:	2021      	movs	r0, #33	; 0x21
    f756:	4b04      	ldr	r3, [pc, #16]	; (f768 <initAccel+0x140>)
    f758:	4798      	blx	r3
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL8_XL, tempRegValue);
#endif
}
    f75a:	46c0      	nop			; (mov r8, r8)
    f75c:	46bd      	mov	sp, r7
    f75e:	b002      	add	sp, #8
    f760:	bd80      	pop	{r7, pc}
    f762:	46c0      	nop			; (mov r8, r8)
    f764:	200008dc 	.word	0x200008dc
    f768:	0000ff89 	.word	0x0000ff89

0000f76c <calibrate>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void calibrate(bool autoCalc)
{
    f76c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f76e:	b08b      	sub	sp, #44	; 0x2c
    f770:	af00      	add	r7, sp, #0
    f772:	0002      	movs	r2, r0
    f774:	1dfb      	adds	r3, r7, #7
    f776:	701a      	strb	r2, [r3, #0]
	_autoCalc = false; // Workaround so that calibrate doesnt include the current offset
    f778:	4b76      	ldr	r3, [pc, #472]	; (f954 <calibrate+0x1e8>)
    f77a:	2200      	movs	r2, #0
    f77c:	701a      	strb	r2, [r3, #0]
	//uint8_t data[6] = {0, 0, 0, 0, 0, 0};
	uint16_t samples = 0;
    f77e:	2326      	movs	r3, #38	; 0x26
    f780:	18fb      	adds	r3, r7, r3
    f782:	2200      	movs	r2, #0
    f784:	801a      	strh	r2, [r3, #0]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
    f786:	2314      	movs	r3, #20
    f788:	18fb      	adds	r3, r7, r3
    f78a:	2200      	movs	r2, #0
    f78c:	601a      	str	r2, [r3, #0]
    f78e:	2314      	movs	r3, #20
    f790:	18fb      	adds	r3, r7, r3
    f792:	2200      	movs	r2, #0
    f794:	605a      	str	r2, [r3, #4]
    f796:	2314      	movs	r3, #20
    f798:	18fb      	adds	r3, r7, r3
    f79a:	2200      	movs	r2, #0
    f79c:	609a      	str	r2, [r3, #8]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
    f79e:	2308      	movs	r3, #8
    f7a0:	18fb      	adds	r3, r7, r3
    f7a2:	2200      	movs	r2, #0
    f7a4:	601a      	str	r2, [r3, #0]
    f7a6:	2308      	movs	r3, #8
    f7a8:	18fb      	adds	r3, r7, r3
    f7aa:	2200      	movs	r2, #0
    f7ac:	605a      	str	r2, [r3, #4]
    f7ae:	2308      	movs	r3, #8
    f7b0:	18fb      	adds	r3, r7, r3
    f7b2:	2200      	movs	r2, #0
    f7b4:	609a      	str	r2, [r3, #8]
	
	// Turn on FIFO and set threshold to 32 samples
#ifdef HW_3v4
	enableFIFO(true);
    f7b6:	2001      	movs	r0, #1
    f7b8:	4b67      	ldr	r3, [pc, #412]	; (f958 <calibrate+0x1ec>)
    f7ba:	4798      	blx	r3
	setFIFO(FIFO_THS, 0x1F);
    f7bc:	211f      	movs	r1, #31
    f7be:	2001      	movs	r0, #1
    f7c0:	4b66      	ldr	r3, [pc, #408]	; (f95c <calibrate+0x1f0>)
    f7c2:	4798      	blx	r3
	while (samples < 0x1F)
    f7c4:	e009      	b.n	f7da <calibrate+0x6e>
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
    f7c6:	202f      	movs	r0, #47	; 0x2f
    f7c8:	4b65      	ldr	r3, [pc, #404]	; (f960 <calibrate+0x1f4>)
    f7ca:	4798      	blx	r3
    f7cc:	0003      	movs	r3, r0
    f7ce:	b29a      	uxth	r2, r3
    f7d0:	2326      	movs	r3, #38	; 0x26
    f7d2:	18fb      	adds	r3, r7, r3
    f7d4:	213f      	movs	r1, #63	; 0x3f
    f7d6:	400a      	ands	r2, r1
    f7d8:	801a      	strh	r2, [r3, #0]
	while (samples < 0x1F)
    f7da:	2326      	movs	r3, #38	; 0x26
    f7dc:	18fb      	adds	r3, r7, r3
    f7de:	881b      	ldrh	r3, [r3, #0]
    f7e0:	2b1e      	cmp	r3, #30
    f7e2:	d9f0      	bls.n	f7c6 <calibrate+0x5a>
	while (samples < 0x003C)
	{
		samples = (((xgReadByte(FIFO_STATUS2) & 0x0F)<<8)|(xgReadByte(FIFO_STATUS1))); // Read number of stored samples
	}
#endif
	for(ii = 0; ii < samples ; ii++) 
    f7e4:	2300      	movs	r3, #0
    f7e6:	623b      	str	r3, [r7, #32]
    f7e8:	e059      	b.n	f89e <calibrate+0x132>
	{	// Read the gyro data stored in the FIFO
		readGyro();
    f7ea:	4b5e      	ldr	r3, [pc, #376]	; (f964 <calibrate+0x1f8>)
    f7ec:	4798      	blx	r3
		gBiasRawTemp[0] += gx;
    f7ee:	2308      	movs	r3, #8
    f7f0:	18fb      	adds	r3, r7, r3
    f7f2:	681b      	ldr	r3, [r3, #0]
    f7f4:	4a5c      	ldr	r2, [pc, #368]	; (f968 <calibrate+0x1fc>)
    f7f6:	2100      	movs	r1, #0
    f7f8:	5e52      	ldrsh	r2, [r2, r1]
    f7fa:	189a      	adds	r2, r3, r2
    f7fc:	2308      	movs	r3, #8
    f7fe:	18fb      	adds	r3, r7, r3
    f800:	601a      	str	r2, [r3, #0]
		gBiasRawTemp[1] += gy;
    f802:	2308      	movs	r3, #8
    f804:	18fb      	adds	r3, r7, r3
    f806:	685b      	ldr	r3, [r3, #4]
    f808:	4a58      	ldr	r2, [pc, #352]	; (f96c <calibrate+0x200>)
    f80a:	2100      	movs	r1, #0
    f80c:	5e52      	ldrsh	r2, [r2, r1]
    f80e:	189a      	adds	r2, r3, r2
    f810:	2308      	movs	r3, #8
    f812:	18fb      	adds	r3, r7, r3
    f814:	605a      	str	r2, [r3, #4]
		gBiasRawTemp[2] += gz;
    f816:	2308      	movs	r3, #8
    f818:	18fb      	adds	r3, r7, r3
    f81a:	689b      	ldr	r3, [r3, #8]
    f81c:	4a54      	ldr	r2, [pc, #336]	; (f970 <calibrate+0x204>)
    f81e:	2100      	movs	r1, #0
    f820:	5e52      	ldrsh	r2, [r2, r1]
    f822:	189a      	adds	r2, r3, r2
    f824:	2308      	movs	r3, #8
    f826:	18fb      	adds	r3, r7, r3
    f828:	609a      	str	r2, [r3, #8]
		readAccel();
    f82a:	4b52      	ldr	r3, [pc, #328]	; (f974 <calibrate+0x208>)
    f82c:	4798      	blx	r3
		aBiasRawTemp[0] += ax;
    f82e:	2314      	movs	r3, #20
    f830:	18fb      	adds	r3, r7, r3
    f832:	681b      	ldr	r3, [r3, #0]
    f834:	4a50      	ldr	r2, [pc, #320]	; (f978 <calibrate+0x20c>)
    f836:	2100      	movs	r1, #0
    f838:	5e52      	ldrsh	r2, [r2, r1]
    f83a:	189a      	adds	r2, r3, r2
    f83c:	2314      	movs	r3, #20
    f83e:	18fb      	adds	r3, r7, r3
    f840:	601a      	str	r2, [r3, #0]
		aBiasRawTemp[1] += ay;
    f842:	2314      	movs	r3, #20
    f844:	18fb      	adds	r3, r7, r3
    f846:	685b      	ldr	r3, [r3, #4]
    f848:	4a4c      	ldr	r2, [pc, #304]	; (f97c <calibrate+0x210>)
    f84a:	2100      	movs	r1, #0
    f84c:	5e52      	ldrsh	r2, [r2, r1]
    f84e:	189a      	adds	r2, r3, r2
    f850:	2314      	movs	r3, #20
    f852:	18fb      	adds	r3, r7, r3
    f854:	605a      	str	r2, [r3, #4]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
    f856:	2314      	movs	r3, #20
    f858:	18fb      	adds	r3, r7, r3
    f85a:	689c      	ldr	r4, [r3, #8]
    f85c:	4b48      	ldr	r3, [pc, #288]	; (f980 <calibrate+0x214>)
    f85e:	2200      	movs	r2, #0
    f860:	5e9b      	ldrsh	r3, [r3, r2]
    f862:	001e      	movs	r6, r3
    f864:	4b47      	ldr	r3, [pc, #284]	; (f984 <calibrate+0x218>)
    f866:	681a      	ldr	r2, [r3, #0]
    f868:	4b47      	ldr	r3, [pc, #284]	; (f988 <calibrate+0x21c>)
    f86a:	1c10      	adds	r0, r2, #0
    f86c:	4798      	blx	r3
    f86e:	0002      	movs	r2, r0
    f870:	000b      	movs	r3, r1
    f872:	4d46      	ldr	r5, [pc, #280]	; (f98c <calibrate+0x220>)
    f874:	2000      	movs	r0, #0
    f876:	4946      	ldr	r1, [pc, #280]	; (f990 <calibrate+0x224>)
    f878:	47a8      	blx	r5
    f87a:	0002      	movs	r2, r0
    f87c:	000b      	movs	r3, r1
    f87e:	0011      	movs	r1, r2
    f880:	001a      	movs	r2, r3
    f882:	4b44      	ldr	r3, [pc, #272]	; (f994 <calibrate+0x228>)
    f884:	0008      	movs	r0, r1
    f886:	0011      	movs	r1, r2
    f888:	4798      	blx	r3
    f88a:	0003      	movs	r3, r0
    f88c:	b21b      	sxth	r3, r3
    f88e:	1af3      	subs	r3, r6, r3
    f890:	18e2      	adds	r2, r4, r3
    f892:	2314      	movs	r3, #20
    f894:	18fb      	adds	r3, r7, r3
    f896:	609a      	str	r2, [r3, #8]
	for(ii = 0; ii < samples ; ii++) 
    f898:	6a3b      	ldr	r3, [r7, #32]
    f89a:	3301      	adds	r3, #1
    f89c:	623b      	str	r3, [r7, #32]
    f89e:	2326      	movs	r3, #38	; 0x26
    f8a0:	18fb      	adds	r3, r7, r3
    f8a2:	881a      	ldrh	r2, [r3, #0]
    f8a4:	6a3b      	ldr	r3, [r7, #32]
    f8a6:	429a      	cmp	r2, r3
    f8a8:	dc9f      	bgt.n	f7ea <calibrate+0x7e>
	}  
	for (ii = 0; ii < 3; ii++)
    f8aa:	2300      	movs	r3, #0
    f8ac:	623b      	str	r3, [r7, #32]
    f8ae:	e03c      	b.n	f92a <calibrate+0x1be>
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
    f8b0:	2308      	movs	r3, #8
    f8b2:	18fb      	adds	r3, r7, r3
    f8b4:	6a3a      	ldr	r2, [r7, #32]
    f8b6:	0092      	lsls	r2, r2, #2
    f8b8:	58d2      	ldr	r2, [r2, r3]
    f8ba:	2326      	movs	r3, #38	; 0x26
    f8bc:	18fb      	adds	r3, r7, r3
    f8be:	8819      	ldrh	r1, [r3, #0]
    f8c0:	4b35      	ldr	r3, [pc, #212]	; (f998 <calibrate+0x22c>)
    f8c2:	0010      	movs	r0, r2
    f8c4:	4798      	blx	r3
    f8c6:	0003      	movs	r3, r0
    f8c8:	b219      	sxth	r1, r3
    f8ca:	4b34      	ldr	r3, [pc, #208]	; (f99c <calibrate+0x230>)
    f8cc:	6a3a      	ldr	r2, [r7, #32]
    f8ce:	0052      	lsls	r2, r2, #1
    f8d0:	52d1      	strh	r1, [r2, r3]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
    f8d2:	4b32      	ldr	r3, [pc, #200]	; (f99c <calibrate+0x230>)
    f8d4:	6a3a      	ldr	r2, [r7, #32]
    f8d6:	0052      	lsls	r2, r2, #1
    f8d8:	5ed3      	ldrsh	r3, [r2, r3]
    f8da:	0018      	movs	r0, r3
    f8dc:	4b30      	ldr	r3, [pc, #192]	; (f9a0 <calibrate+0x234>)
    f8de:	4798      	blx	r3
    f8e0:	1c01      	adds	r1, r0, #0
    f8e2:	4b30      	ldr	r3, [pc, #192]	; (f9a4 <calibrate+0x238>)
    f8e4:	6a3a      	ldr	r2, [r7, #32]
    f8e6:	0092      	lsls	r2, r2, #2
    f8e8:	50d1      	str	r1, [r2, r3]
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
    f8ea:	2314      	movs	r3, #20
    f8ec:	18fb      	adds	r3, r7, r3
    f8ee:	6a3a      	ldr	r2, [r7, #32]
    f8f0:	0092      	lsls	r2, r2, #2
    f8f2:	58d2      	ldr	r2, [r2, r3]
    f8f4:	2326      	movs	r3, #38	; 0x26
    f8f6:	18fb      	adds	r3, r7, r3
    f8f8:	8819      	ldrh	r1, [r3, #0]
    f8fa:	4b27      	ldr	r3, [pc, #156]	; (f998 <calibrate+0x22c>)
    f8fc:	0010      	movs	r0, r2
    f8fe:	4798      	blx	r3
    f900:	0003      	movs	r3, r0
    f902:	b219      	sxth	r1, r3
    f904:	4b28      	ldr	r3, [pc, #160]	; (f9a8 <calibrate+0x23c>)
    f906:	6a3a      	ldr	r2, [r7, #32]
    f908:	0052      	lsls	r2, r2, #1
    f90a:	52d1      	strh	r1, [r2, r3]
		aBias[ii] = calcAccel(aBiasRaw[ii]);
    f90c:	4b26      	ldr	r3, [pc, #152]	; (f9a8 <calibrate+0x23c>)
    f90e:	6a3a      	ldr	r2, [r7, #32]
    f910:	0052      	lsls	r2, r2, #1
    f912:	5ed3      	ldrsh	r3, [r2, r3]
    f914:	0018      	movs	r0, r3
    f916:	4b25      	ldr	r3, [pc, #148]	; (f9ac <calibrate+0x240>)
    f918:	4798      	blx	r3
    f91a:	1c01      	adds	r1, r0, #0
    f91c:	4b24      	ldr	r3, [pc, #144]	; (f9b0 <calibrate+0x244>)
    f91e:	6a3a      	ldr	r2, [r7, #32]
    f920:	0092      	lsls	r2, r2, #2
    f922:	50d1      	str	r1, [r2, r3]
	for (ii = 0; ii < 3; ii++)
    f924:	6a3b      	ldr	r3, [r7, #32]
    f926:	3301      	adds	r3, #1
    f928:	623b      	str	r3, [r7, #32]
    f92a:	6a3b      	ldr	r3, [r7, #32]
    f92c:	2b02      	cmp	r3, #2
    f92e:	ddbf      	ble.n	f8b0 <calibrate+0x144>
	}

#ifdef HW_3v4
	enableFIFO(false);
    f930:	2000      	movs	r0, #0
    f932:	4b09      	ldr	r3, [pc, #36]	; (f958 <calibrate+0x1ec>)
    f934:	4798      	blx	r3
#endif
	setFIFO(FIFO_OFF, 0x00);
    f936:	2100      	movs	r1, #0
    f938:	2000      	movs	r0, #0
    f93a:	4b08      	ldr	r3, [pc, #32]	; (f95c <calibrate+0x1f0>)
    f93c:	4798      	blx	r3
	
	if (autoCalc) _autoCalc = true;
    f93e:	1dfb      	adds	r3, r7, #7
    f940:	781b      	ldrb	r3, [r3, #0]
    f942:	2b00      	cmp	r3, #0
    f944:	d002      	beq.n	f94c <calibrate+0x1e0>
    f946:	4b03      	ldr	r3, [pc, #12]	; (f954 <calibrate+0x1e8>)
    f948:	2201      	movs	r2, #1
    f94a:	701a      	strb	r2, [r3, #0]
}
    f94c:	46c0      	nop			; (mov r8, r8)
    f94e:	46bd      	mov	sp, r7
    f950:	b00b      	add	sp, #44	; 0x2c
    f952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f954:	20000dec 	.word	0x20000dec
    f958:	0000fe45 	.word	0x0000fe45
    f95c:	0000fea9 	.word	0x0000fea9
    f960:	0000fff1 	.word	0x0000fff1
    f964:	0000fc3d 	.word	0x0000fc3d
    f968:	20000318 	.word	0x20000318
    f96c:	2000031a 	.word	0x2000031a
    f970:	2000031c 	.word	0x2000031c
    f974:	0000faf9 	.word	0x0000faf9
    f978:	2000031e 	.word	0x2000031e
    f97c:	20000320 	.word	0x20000320
    f980:	20000322 	.word	0x20000322
    f984:	20000fac 	.word	0x20000fac
    f988:	0001bf15 	.word	0x0001bf15
    f98c:	0001aa25 	.word	0x0001aa25
    f990:	3ff00000 	.word	0x3ff00000
    f994:	0001bdb9 	.word	0x0001bdb9
    f998:	00019295 	.word	0x00019295
    f99c:	20001430 	.word	0x20001430
    f9a0:	0000fd09 	.word	0x0000fd09
    f9a4:	20001a50 	.word	0x20001a50
    f9a8:	20001438 	.word	0x20001438
    f9ac:	0000fd41 	.word	0x0000fd41
    f9b0:	20000580 	.word	0x20000580

0000f9b4 <initMag>:
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
	#endif
}

void initMag()
{
    f9b4:	b580      	push	{r7, lr}
    f9b6:	b082      	sub	sp, #8
    f9b8:	af00      	add	r7, sp, #0
#ifdef HW_3v4
	uint8_t tempRegValue = 0;
    f9ba:	1dfb      	adds	r3, r7, #7
    f9bc:	2200      	movs	r2, #0
    f9be:	701a      	strb	r2, [r3, #0]
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
    f9c0:	4b4b      	ldr	r3, [pc, #300]	; (faf0 <initMag+0x13c>)
    f9c2:	2222      	movs	r2, #34	; 0x22
    f9c4:	5c9b      	ldrb	r3, [r3, r2]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d006      	beq.n	f9d8 <initMag+0x24>
    f9ca:	1dfb      	adds	r3, r7, #7
    f9cc:	1dfa      	adds	r2, r7, #7
    f9ce:	7812      	ldrb	r2, [r2, #0]
    f9d0:	2180      	movs	r1, #128	; 0x80
    f9d2:	4249      	negs	r1, r1
    f9d4:	430a      	orrs	r2, r1
    f9d6:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
    f9d8:	4b45      	ldr	r3, [pc, #276]	; (faf0 <initMag+0x13c>)
    f9da:	2223      	movs	r2, #35	; 0x23
    f9dc:	5c9b      	ldrb	r3, [r3, r2]
    f9de:	015b      	lsls	r3, r3, #5
    f9e0:	b25b      	sxtb	r3, r3
    f9e2:	2260      	movs	r2, #96	; 0x60
    f9e4:	4013      	ands	r3, r2
    f9e6:	b25a      	sxtb	r2, r3
    f9e8:	1dfb      	adds	r3, r7, #7
    f9ea:	781b      	ldrb	r3, [r3, #0]
    f9ec:	b25b      	sxtb	r3, r3
    f9ee:	4313      	orrs	r3, r2
    f9f0:	b25a      	sxtb	r2, r3
    f9f2:	1dfb      	adds	r3, r7, #7
    f9f4:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
    f9f6:	4b3e      	ldr	r3, [pc, #248]	; (faf0 <initMag+0x13c>)
    f9f8:	2221      	movs	r2, #33	; 0x21
    f9fa:	5c9b      	ldrb	r3, [r3, r2]
    f9fc:	009b      	lsls	r3, r3, #2
    f9fe:	b25b      	sxtb	r3, r3
    fa00:	221c      	movs	r2, #28
    fa02:	4013      	ands	r3, r2
    fa04:	b25a      	sxtb	r2, r3
    fa06:	1dfb      	adds	r3, r7, #7
    fa08:	781b      	ldrb	r3, [r3, #0]
    fa0a:	b25b      	sxtb	r3, r3
    fa0c:	4313      	orrs	r3, r2
    fa0e:	b25a      	sxtb	r2, r3
    fa10:	1dfb      	adds	r3, r7, #7
    fa12:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG1_M, tempRegValue);
    fa14:	1dfb      	adds	r3, r7, #7
    fa16:	781b      	ldrb	r3, [r3, #0]
    fa18:	0019      	movs	r1, r3
    fa1a:	2020      	movs	r0, #32
    fa1c:	4b35      	ldr	r3, [pc, #212]	; (faf4 <initMag+0x140>)
    fa1e:	4798      	blx	r3
	// CTRL_REG2_M (Default value 0x00)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
    fa20:	1dfb      	adds	r3, r7, #7
    fa22:	2200      	movs	r2, #0
    fa24:	701a      	strb	r2, [r3, #0]
	switch (settings.mag.scale)
    fa26:	4b32      	ldr	r3, [pc, #200]	; (faf0 <initMag+0x13c>)
    fa28:	2220      	movs	r2, #32
    fa2a:	5c9b      	ldrb	r3, [r3, r2]
    fa2c:	2b0c      	cmp	r3, #12
    fa2e:	d00a      	beq.n	fa46 <initMag+0x92>
    fa30:	2b10      	cmp	r3, #16
    fa32:	d00f      	beq.n	fa54 <initMag+0xa0>
    fa34:	2b08      	cmp	r3, #8
    fa36:	d114      	bne.n	fa62 <initMag+0xae>
	{
	case 8:
		tempRegValue |= (0x1 << 5);
    fa38:	1dfb      	adds	r3, r7, #7
    fa3a:	1dfa      	adds	r2, r7, #7
    fa3c:	7812      	ldrb	r2, [r2, #0]
    fa3e:	2120      	movs	r1, #32
    fa40:	430a      	orrs	r2, r1
    fa42:	701a      	strb	r2, [r3, #0]
		break;
    fa44:	e00d      	b.n	fa62 <initMag+0xae>
	case 12:
		tempRegValue |= (0x2 << 5);
    fa46:	1dfb      	adds	r3, r7, #7
    fa48:	1dfa      	adds	r2, r7, #7
    fa4a:	7812      	ldrb	r2, [r2, #0]
    fa4c:	2140      	movs	r1, #64	; 0x40
    fa4e:	430a      	orrs	r2, r1
    fa50:	701a      	strb	r2, [r3, #0]
		break;
    fa52:	e006      	b.n	fa62 <initMag+0xae>
	case 16:
		tempRegValue |= (0x3 << 5);
    fa54:	1dfb      	adds	r3, r7, #7
    fa56:	1dfa      	adds	r2, r7, #7
    fa58:	7812      	ldrb	r2, [r2, #0]
    fa5a:	2160      	movs	r1, #96	; 0x60
    fa5c:	430a      	orrs	r2, r1
    fa5e:	701a      	strb	r2, [r3, #0]
		break;
    fa60:	46c0      	nop			; (mov r8, r8)
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
    fa62:	1dfb      	adds	r3, r7, #7
    fa64:	781b      	ldrb	r3, [r3, #0]
    fa66:	0019      	movs	r1, r3
    fa68:	2021      	movs	r0, #33	; 0x21
    fa6a:	4b22      	ldr	r3, [pc, #136]	; (faf4 <initMag+0x140>)
    fa6c:	4798      	blx	r3
	// LP - Low-power mode cofiguration (1:enable)
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
    fa6e:	1dfb      	adds	r3, r7, #7
    fa70:	2200      	movs	r2, #0
    fa72:	701a      	strb	r2, [r3, #0]
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
    fa74:	4b1e      	ldr	r3, [pc, #120]	; (faf0 <initMag+0x13c>)
    fa76:	2225      	movs	r2, #37	; 0x25
    fa78:	5c9b      	ldrb	r3, [r3, r2]
    fa7a:	2b00      	cmp	r3, #0
    fa7c:	d005      	beq.n	fa8a <initMag+0xd6>
    fa7e:	1dfb      	adds	r3, r7, #7
    fa80:	1dfa      	adds	r2, r7, #7
    fa82:	7812      	ldrb	r2, [r2, #0]
    fa84:	2120      	movs	r1, #32
    fa86:	430a      	orrs	r2, r1
    fa88:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.operatingMode & 0x3);
    fa8a:	4b19      	ldr	r3, [pc, #100]	; (faf0 <initMag+0x13c>)
    fa8c:	2226      	movs	r2, #38	; 0x26
    fa8e:	5c9b      	ldrb	r3, [r3, r2]
    fa90:	b25b      	sxtb	r3, r3
    fa92:	2203      	movs	r2, #3
    fa94:	4013      	ands	r3, r2
    fa96:	b25a      	sxtb	r2, r3
    fa98:	1dfb      	adds	r3, r7, #7
    fa9a:	781b      	ldrb	r3, [r3, #0]
    fa9c:	b25b      	sxtb	r3, r3
    fa9e:	4313      	orrs	r3, r2
    faa0:	b25a      	sxtb	r2, r3
    faa2:	1dfb      	adds	r3, r7, #7
    faa4:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
    faa6:	1dfb      	adds	r3, r7, #7
    faa8:	781b      	ldrb	r3, [r3, #0]
    faaa:	0019      	movs	r1, r3
    faac:	2022      	movs	r0, #34	; 0x22
    faae:	4b11      	ldr	r3, [pc, #68]	; (faf4 <initMag+0x140>)
    fab0:	4798      	blx	r3
	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
	// OMZ[1:0] - Z-axis operative mode selection
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
    fab2:	1dfb      	adds	r3, r7, #7
    fab4:	2200      	movs	r2, #0
    fab6:	701a      	strb	r2, [r3, #0]
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
    fab8:	4b0d      	ldr	r3, [pc, #52]	; (faf0 <initMag+0x13c>)
    faba:	2224      	movs	r2, #36	; 0x24
    fabc:	5c9b      	ldrb	r3, [r3, r2]
    fabe:	009b      	lsls	r3, r3, #2
    fac0:	b2da      	uxtb	r2, r3
    fac2:	1dfb      	adds	r3, r7, #7
    fac4:	210c      	movs	r1, #12
    fac6:	400a      	ands	r2, r1
    fac8:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG4_M, tempRegValue);
    faca:	1dfb      	adds	r3, r7, #7
    facc:	781b      	ldrb	r3, [r3, #0]
    face:	0019      	movs	r1, r3
    fad0:	2023      	movs	r0, #35	; 0x23
    fad2:	4b08      	ldr	r3, [pc, #32]	; (faf4 <initMag+0x140>)
    fad4:	4798      	blx	r3
	
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
    fad6:	1dfb      	adds	r3, r7, #7
    fad8:	2200      	movs	r2, #0
    fada:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG5_M, tempRegValue);
    fadc:	1dfb      	adds	r3, r7, #7
    fade:	781b      	ldrb	r3, [r3, #0]
    fae0:	0019      	movs	r1, r3
    fae2:	2024      	movs	r0, #36	; 0x24
    fae4:	4b03      	ldr	r3, [pc, #12]	; (faf4 <initMag+0x140>)
    fae6:	4798      	blx	r3
#endif
}
    fae8:	46c0      	nop			; (mov r8, r8)
    faea:	46bd      	mov	sp, r7
    faec:	b002      	add	sp, #8
    faee:	bd80      	pop	{r7, pc}
    faf0:	200008dc 	.word	0x200008dc
    faf4:	0000ffbd 	.word	0x0000ffbd

0000faf8 <readAccel>:
#endif
	return 0;
}

void readAccel()
{
    faf8:	b580      	push	{r7, lr}
    fafa:	b082      	sub	sp, #8
    fafc:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
#ifdef HW_3v4
	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
    fafe:	003b      	movs	r3, r7
    fb00:	2206      	movs	r2, #6
    fb02:	0019      	movs	r1, r3
    fb04:	2028      	movs	r0, #40	; 0x28
    fb06:	4b29      	ldr	r3, [pc, #164]	; (fbac <readAccel+0xb4>)
    fb08:	4798      	blx	r3
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	xgReadBytes(OUTX_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
#endif
	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
    fb0a:	003b      	movs	r3, r7
    fb0c:	785b      	ldrb	r3, [r3, #1]
    fb0e:	021b      	lsls	r3, r3, #8
    fb10:	b21a      	sxth	r2, r3
    fb12:	003b      	movs	r3, r7
    fb14:	781b      	ldrb	r3, [r3, #0]
    fb16:	b21b      	sxth	r3, r3
    fb18:	4313      	orrs	r3, r2
    fb1a:	b21a      	sxth	r2, r3
    fb1c:	4b24      	ldr	r3, [pc, #144]	; (fbb0 <readAccel+0xb8>)
    fb1e:	801a      	strh	r2, [r3, #0]
	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
    fb20:	003b      	movs	r3, r7
    fb22:	78db      	ldrb	r3, [r3, #3]
    fb24:	021b      	lsls	r3, r3, #8
    fb26:	b21a      	sxth	r2, r3
    fb28:	003b      	movs	r3, r7
    fb2a:	789b      	ldrb	r3, [r3, #2]
    fb2c:	b21b      	sxth	r3, r3
    fb2e:	4313      	orrs	r3, r2
    fb30:	b21a      	sxth	r2, r3
    fb32:	4b20      	ldr	r3, [pc, #128]	; (fbb4 <readAccel+0xbc>)
    fb34:	801a      	strh	r2, [r3, #0]
	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
    fb36:	003b      	movs	r3, r7
    fb38:	795b      	ldrb	r3, [r3, #5]
    fb3a:	021b      	lsls	r3, r3, #8
    fb3c:	b21a      	sxth	r2, r3
    fb3e:	003b      	movs	r3, r7
    fb40:	791b      	ldrb	r3, [r3, #4]
    fb42:	b21b      	sxth	r3, r3
    fb44:	4313      	orrs	r3, r2
    fb46:	b21a      	sxth	r2, r3
    fb48:	4b1b      	ldr	r3, [pc, #108]	; (fbb8 <readAccel+0xc0>)
    fb4a:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    fb4c:	4b1b      	ldr	r3, [pc, #108]	; (fbbc <readAccel+0xc4>)
    fb4e:	781b      	ldrb	r3, [r3, #0]
    fb50:	2b00      	cmp	r3, #0
    fb52:	d026      	beq.n	fba2 <readAccel+0xaa>
	{
		ax -= aBiasRaw[X_AXIS];
    fb54:	4b16      	ldr	r3, [pc, #88]	; (fbb0 <readAccel+0xb8>)
    fb56:	2200      	movs	r2, #0
    fb58:	5e9b      	ldrsh	r3, [r3, r2]
    fb5a:	b29a      	uxth	r2, r3
    fb5c:	4b18      	ldr	r3, [pc, #96]	; (fbc0 <readAccel+0xc8>)
    fb5e:	2100      	movs	r1, #0
    fb60:	5e5b      	ldrsh	r3, [r3, r1]
    fb62:	b29b      	uxth	r3, r3
    fb64:	1ad3      	subs	r3, r2, r3
    fb66:	b29b      	uxth	r3, r3
    fb68:	b21a      	sxth	r2, r3
    fb6a:	4b11      	ldr	r3, [pc, #68]	; (fbb0 <readAccel+0xb8>)
    fb6c:	801a      	strh	r2, [r3, #0]
		ay -= aBiasRaw[Y_AXIS];
    fb6e:	4b11      	ldr	r3, [pc, #68]	; (fbb4 <readAccel+0xbc>)
    fb70:	2200      	movs	r2, #0
    fb72:	5e9b      	ldrsh	r3, [r3, r2]
    fb74:	b29a      	uxth	r2, r3
    fb76:	4b12      	ldr	r3, [pc, #72]	; (fbc0 <readAccel+0xc8>)
    fb78:	2102      	movs	r1, #2
    fb7a:	5e5b      	ldrsh	r3, [r3, r1]
    fb7c:	b29b      	uxth	r3, r3
    fb7e:	1ad3      	subs	r3, r2, r3
    fb80:	b29b      	uxth	r3, r3
    fb82:	b21a      	sxth	r2, r3
    fb84:	4b0b      	ldr	r3, [pc, #44]	; (fbb4 <readAccel+0xbc>)
    fb86:	801a      	strh	r2, [r3, #0]
		az -= aBiasRaw[Z_AXIS];
    fb88:	4b0b      	ldr	r3, [pc, #44]	; (fbb8 <readAccel+0xc0>)
    fb8a:	2200      	movs	r2, #0
    fb8c:	5e9b      	ldrsh	r3, [r3, r2]
    fb8e:	b29a      	uxth	r2, r3
    fb90:	4b0b      	ldr	r3, [pc, #44]	; (fbc0 <readAccel+0xc8>)
    fb92:	2104      	movs	r1, #4
    fb94:	5e5b      	ldrsh	r3, [r3, r1]
    fb96:	b29b      	uxth	r3, r3
    fb98:	1ad3      	subs	r3, r2, r3
    fb9a:	b29b      	uxth	r3, r3
    fb9c:	b21a      	sxth	r2, r3
    fb9e:	4b06      	ldr	r3, [pc, #24]	; (fbb8 <readAccel+0xc0>)
    fba0:	801a      	strh	r2, [r3, #0]
	}
}
    fba2:	46c0      	nop			; (mov r8, r8)
    fba4:	46bd      	mov	sp, r7
    fba6:	b002      	add	sp, #8
    fba8:	bd80      	pop	{r7, pc}
    fbaa:	46c0      	nop			; (mov r8, r8)
    fbac:	00010021 	.word	0x00010021
    fbb0:	2000031e 	.word	0x2000031e
    fbb4:	20000320 	.word	0x20000320
    fbb8:	20000322 	.word	0x20000322
    fbbc:	20000dec 	.word	0x20000dec
    fbc0:	20001438 	.word	0x20001438

0000fbc4 <readTemp>:
/*#define TEMP_AVG_NUM 5
float IMU_temp_total = 0;
float IMU_temp_buf[TEMP_AVG_NUM] = 0;
float IMU_temp_avg = 25;*/
void readTemp()
{
    fbc4:	b580      	push	{r7, lr}
    fbc6:	b082      	sub	sp, #8
    fbc8:	af00      	add	r7, sp, #0
	static uint8_t temp_avg_index = 0;
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
    fbca:	1d3b      	adds	r3, r7, #4
    fbcc:	2202      	movs	r2, #2
    fbce:	0019      	movs	r1, r3
    fbd0:	2015      	movs	r0, #21
    fbd2:	4b15      	ldr	r3, [pc, #84]	; (fc28 <readTemp+0x64>)
    fbd4:	4798      	blx	r3
	temperature_raw = ((int16_t)temp[1] << 8) | temp[0];
    fbd6:	1d3b      	adds	r3, r7, #4
    fbd8:	785b      	ldrb	r3, [r3, #1]
    fbda:	021b      	lsls	r3, r3, #8
    fbdc:	b21a      	sxth	r2, r3
    fbde:	1d3b      	adds	r3, r7, #4
    fbe0:	781b      	ldrb	r3, [r3, #0]
    fbe2:	b21b      	sxth	r3, r3
    fbe4:	4313      	orrs	r3, r2
    fbe6:	b21a      	sxth	r2, r3
    fbe8:	4b10      	ldr	r3, [pc, #64]	; (fc2c <readTemp+0x68>)
    fbea:	801a      	strh	r2, [r3, #0]
	temperature_raw += 400; // Adjust for the 25 deg offset of the sensor
    fbec:	4b0f      	ldr	r3, [pc, #60]	; (fc2c <readTemp+0x68>)
    fbee:	2200      	movs	r2, #0
    fbf0:	5e9b      	ldrsh	r3, [r3, r2]
    fbf2:	b29b      	uxth	r3, r3
    fbf4:	3391      	adds	r3, #145	; 0x91
    fbf6:	33ff      	adds	r3, #255	; 0xff
    fbf8:	b29b      	uxth	r3, r3
    fbfa:	b21a      	sxth	r2, r3
    fbfc:	4b0b      	ldr	r3, [pc, #44]	; (fc2c <readTemp+0x68>)
    fbfe:	801a      	strh	r2, [r3, #0]
	IMU_temp = (((float)temperature_raw)/16.0);
    fc00:	4b0a      	ldr	r3, [pc, #40]	; (fc2c <readTemp+0x68>)
    fc02:	2200      	movs	r2, #0
    fc04:	5e9a      	ldrsh	r2, [r3, r2]
    fc06:	4b0a      	ldr	r3, [pc, #40]	; (fc30 <readTemp+0x6c>)
    fc08:	0010      	movs	r0, r2
    fc0a:	4798      	blx	r3
    fc0c:	1c02      	adds	r2, r0, #0
    fc0e:	4b09      	ldr	r3, [pc, #36]	; (fc34 <readTemp+0x70>)
    fc10:	2183      	movs	r1, #131	; 0x83
    fc12:	05c9      	lsls	r1, r1, #23
    fc14:	1c10      	adds	r0, r2, #0
    fc16:	4798      	blx	r3
    fc18:	1c03      	adds	r3, r0, #0
    fc1a:	1c1a      	adds	r2, r3, #0
    fc1c:	4b06      	ldr	r3, [pc, #24]	; (fc38 <readTemp+0x74>)
    fc1e:	601a      	str	r2, [r3, #0]
	IMU_temp_buf[temp_avg_index] = IMU_temp;
	IMU_temp_avg = IMU_temp_total/TEMP_AVG_NUM;
	temp_avg_index++;
	if(temp_avg_index >= TEMP_AVG_NUM)
	temp_avg_index = 0;*/
}
    fc20:	46c0      	nop			; (mov r8, r8)
    fc22:	46bd      	mov	sp, r7
    fc24:	b002      	add	sp, #8
    fc26:	bd80      	pop	{r7, pc}
    fc28:	00010021 	.word	0x00010021
    fc2c:	20000e70 	.word	0x20000e70
    fc30:	0001a2d9 	.word	0x0001a2d9
    fc34:	00019941 	.word	0x00019941
    fc38:	20001ad8 	.word	0x20001ad8

0000fc3c <readGyro>:

void readGyro()
{
    fc3c:	b580      	push	{r7, lr}
    fc3e:	b082      	sub	sp, #8
    fc40:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp#ifdef HW_3v4
#ifdef HW_3v4
	xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
    fc42:	003b      	movs	r3, r7
    fc44:	2206      	movs	r2, #6
    fc46:	0019      	movs	r1, r3
    fc48:	2018      	movs	r0, #24
    fc4a:	4b29      	ldr	r3, [pc, #164]	; (fcf0 <readGyro+0xb4>)
    fc4c:	4798      	blx	r3
#endif
#if defined(HW_4v0) || defined(HW_4v1)
	xgReadBytes(OUTX_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
#endif
	gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
    fc4e:	003b      	movs	r3, r7
    fc50:	785b      	ldrb	r3, [r3, #1]
    fc52:	021b      	lsls	r3, r3, #8
    fc54:	b21a      	sxth	r2, r3
    fc56:	003b      	movs	r3, r7
    fc58:	781b      	ldrb	r3, [r3, #0]
    fc5a:	b21b      	sxth	r3, r3
    fc5c:	4313      	orrs	r3, r2
    fc5e:	b21a      	sxth	r2, r3
    fc60:	4b24      	ldr	r3, [pc, #144]	; (fcf4 <readGyro+0xb8>)
    fc62:	801a      	strh	r2, [r3, #0]
	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
    fc64:	003b      	movs	r3, r7
    fc66:	78db      	ldrb	r3, [r3, #3]
    fc68:	021b      	lsls	r3, r3, #8
    fc6a:	b21a      	sxth	r2, r3
    fc6c:	003b      	movs	r3, r7
    fc6e:	789b      	ldrb	r3, [r3, #2]
    fc70:	b21b      	sxth	r3, r3
    fc72:	4313      	orrs	r3, r2
    fc74:	b21a      	sxth	r2, r3
    fc76:	4b20      	ldr	r3, [pc, #128]	; (fcf8 <readGyro+0xbc>)
    fc78:	801a      	strh	r2, [r3, #0]
	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
    fc7a:	003b      	movs	r3, r7
    fc7c:	795b      	ldrb	r3, [r3, #5]
    fc7e:	021b      	lsls	r3, r3, #8
    fc80:	b21a      	sxth	r2, r3
    fc82:	003b      	movs	r3, r7
    fc84:	791b      	ldrb	r3, [r3, #4]
    fc86:	b21b      	sxth	r3, r3
    fc88:	4313      	orrs	r3, r2
    fc8a:	b21a      	sxth	r2, r3
    fc8c:	4b1b      	ldr	r3, [pc, #108]	; (fcfc <readGyro+0xc0>)
    fc8e:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    fc90:	4b1b      	ldr	r3, [pc, #108]	; (fd00 <readGyro+0xc4>)
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	2b00      	cmp	r3, #0
    fc96:	d026      	beq.n	fce6 <readGyro+0xaa>
	{
		gx -= gBiasRaw[X_AXIS];
    fc98:	4b16      	ldr	r3, [pc, #88]	; (fcf4 <readGyro+0xb8>)
    fc9a:	2200      	movs	r2, #0
    fc9c:	5e9b      	ldrsh	r3, [r3, r2]
    fc9e:	b29a      	uxth	r2, r3
    fca0:	4b18      	ldr	r3, [pc, #96]	; (fd04 <readGyro+0xc8>)
    fca2:	2100      	movs	r1, #0
    fca4:	5e5b      	ldrsh	r3, [r3, r1]
    fca6:	b29b      	uxth	r3, r3
    fca8:	1ad3      	subs	r3, r2, r3
    fcaa:	b29b      	uxth	r3, r3
    fcac:	b21a      	sxth	r2, r3
    fcae:	4b11      	ldr	r3, [pc, #68]	; (fcf4 <readGyro+0xb8>)
    fcb0:	801a      	strh	r2, [r3, #0]
		gy -= gBiasRaw[Y_AXIS];
    fcb2:	4b11      	ldr	r3, [pc, #68]	; (fcf8 <readGyro+0xbc>)
    fcb4:	2200      	movs	r2, #0
    fcb6:	5e9b      	ldrsh	r3, [r3, r2]
    fcb8:	b29a      	uxth	r2, r3
    fcba:	4b12      	ldr	r3, [pc, #72]	; (fd04 <readGyro+0xc8>)
    fcbc:	2102      	movs	r1, #2
    fcbe:	5e5b      	ldrsh	r3, [r3, r1]
    fcc0:	b29b      	uxth	r3, r3
    fcc2:	1ad3      	subs	r3, r2, r3
    fcc4:	b29b      	uxth	r3, r3
    fcc6:	b21a      	sxth	r2, r3
    fcc8:	4b0b      	ldr	r3, [pc, #44]	; (fcf8 <readGyro+0xbc>)
    fcca:	801a      	strh	r2, [r3, #0]
		gz -= gBiasRaw[Z_AXIS];
    fccc:	4b0b      	ldr	r3, [pc, #44]	; (fcfc <readGyro+0xc0>)
    fcce:	2200      	movs	r2, #0
    fcd0:	5e9b      	ldrsh	r3, [r3, r2]
    fcd2:	b29a      	uxth	r2, r3
    fcd4:	4b0b      	ldr	r3, [pc, #44]	; (fd04 <readGyro+0xc8>)
    fcd6:	2104      	movs	r1, #4
    fcd8:	5e5b      	ldrsh	r3, [r3, r1]
    fcda:	b29b      	uxth	r3, r3
    fcdc:	1ad3      	subs	r3, r2, r3
    fcde:	b29b      	uxth	r3, r3
    fce0:	b21a      	sxth	r2, r3
    fce2:	4b06      	ldr	r3, [pc, #24]	; (fcfc <readGyro+0xc0>)
    fce4:	801a      	strh	r2, [r3, #0]
	}
}
    fce6:	46c0      	nop			; (mov r8, r8)
    fce8:	46bd      	mov	sp, r7
    fcea:	b002      	add	sp, #8
    fcec:	bd80      	pop	{r7, pc}
    fcee:	46c0      	nop			; (mov r8, r8)
    fcf0:	00010021 	.word	0x00010021
    fcf4:	20000318 	.word	0x20000318
    fcf8:	2000031a 	.word	0x2000031a
    fcfc:	2000031c 	.word	0x2000031c
    fd00:	20000dec 	.word	0x20000dec
    fd04:	20001430 	.word	0x20001430

0000fd08 <calcGyro>:
#endif
	return 0;
}

float calcGyro(int16_t gyro)
{
    fd08:	b580      	push	{r7, lr}
    fd0a:	b082      	sub	sp, #8
    fd0c:	af00      	add	r7, sp, #0
    fd0e:	0002      	movs	r2, r0
    fd10:	1dbb      	adds	r3, r7, #6
    fd12:	801a      	strh	r2, [r3, #0]
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
    fd14:	1dbb      	adds	r3, r7, #6
    fd16:	2200      	movs	r2, #0
    fd18:	5e9a      	ldrsh	r2, [r3, r2]
    fd1a:	4b06      	ldr	r3, [pc, #24]	; (fd34 <calcGyro+0x2c>)
    fd1c:	0010      	movs	r0, r2
    fd1e:	4798      	blx	r3
    fd20:	4b05      	ldr	r3, [pc, #20]	; (fd38 <calcGyro+0x30>)
    fd22:	681a      	ldr	r2, [r3, #0]
    fd24:	4b05      	ldr	r3, [pc, #20]	; (fd3c <calcGyro+0x34>)
    fd26:	1c11      	adds	r1, r2, #0
    fd28:	4798      	blx	r3
    fd2a:	1c03      	adds	r3, r0, #0
}
    fd2c:	1c18      	adds	r0, r3, #0
    fd2e:	46bd      	mov	sp, r7
    fd30:	b002      	add	sp, #8
    fd32:	bd80      	pop	{r7, pc}
    fd34:	0001a2d9 	.word	0x0001a2d9
    fd38:	200017f0 	.word	0x200017f0
    fd3c:	00019d21 	.word	0x00019d21

0000fd40 <calcAccel>:

float calcAccel(int16_t accel)
{
    fd40:	b580      	push	{r7, lr}
    fd42:	b082      	sub	sp, #8
    fd44:	af00      	add	r7, sp, #0
    fd46:	0002      	movs	r2, r0
    fd48:	1dbb      	adds	r3, r7, #6
    fd4a:	801a      	strh	r2, [r3, #0]
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
    fd4c:	1dbb      	adds	r3, r7, #6
    fd4e:	2200      	movs	r2, #0
    fd50:	5e9a      	ldrsh	r2, [r3, r2]
    fd52:	4b06      	ldr	r3, [pc, #24]	; (fd6c <calcAccel+0x2c>)
    fd54:	0010      	movs	r0, r2
    fd56:	4798      	blx	r3
    fd58:	4b05      	ldr	r3, [pc, #20]	; (fd70 <calcAccel+0x30>)
    fd5a:	681a      	ldr	r2, [r3, #0]
    fd5c:	4b05      	ldr	r3, [pc, #20]	; (fd74 <calcAccel+0x34>)
    fd5e:	1c11      	adds	r1, r2, #0
    fd60:	4798      	blx	r3
    fd62:	1c03      	adds	r3, r0, #0
}
    fd64:	1c18      	adds	r0, r3, #0
    fd66:	46bd      	mov	sp, r7
    fd68:	b002      	add	sp, #8
    fd6a:	bd80      	pop	{r7, pc}
    fd6c:	0001a2d9 	.word	0x0001a2d9
    fd70:	20000fac 	.word	0x20000fac
    fd74:	00019d21 	.word	0x00019d21

0000fd78 <calcgRes>:
	mWriteByte(CTRL_REG1_M, temp);
#endif
}

void calcgRes()
{
    fd78:	b580      	push	{r7, lr}
    fd7a:	af00      	add	r7, sp, #0
	gRes = ((float) settings.gyro.scale) / 32768.0;
    fd7c:	4b08      	ldr	r3, [pc, #32]	; (fda0 <calcgRes+0x28>)
    fd7e:	88da      	ldrh	r2, [r3, #6]
    fd80:	4b08      	ldr	r3, [pc, #32]	; (fda4 <calcgRes+0x2c>)
    fd82:	0010      	movs	r0, r2
    fd84:	4798      	blx	r3
    fd86:	1c02      	adds	r2, r0, #0
    fd88:	4b07      	ldr	r3, [pc, #28]	; (fda8 <calcgRes+0x30>)
    fd8a:	218e      	movs	r1, #142	; 0x8e
    fd8c:	05c9      	lsls	r1, r1, #23
    fd8e:	1c10      	adds	r0, r2, #0
    fd90:	4798      	blx	r3
    fd92:	1c03      	adds	r3, r0, #0
    fd94:	1c1a      	adds	r2, r3, #0
    fd96:	4b05      	ldr	r3, [pc, #20]	; (fdac <calcgRes+0x34>)
    fd98:	601a      	str	r2, [r3, #0]
}
    fd9a:	46c0      	nop			; (mov r8, r8)
    fd9c:	46bd      	mov	sp, r7
    fd9e:	bd80      	pop	{r7, pc}
    fda0:	200008dc 	.word	0x200008dc
    fda4:	0001a379 	.word	0x0001a379
    fda8:	00019941 	.word	0x00019941
    fdac:	200017f0 	.word	0x200017f0

0000fdb0 <calcaRes>:

void calcaRes()
{
    fdb0:	b580      	push	{r7, lr}
    fdb2:	af00      	add	r7, sp, #0
	aRes = ((float) settings.accel.scale) / 32768.0;
    fdb4:	4b08      	ldr	r3, [pc, #32]	; (fdd8 <calcaRes+0x28>)
    fdb6:	7dda      	ldrb	r2, [r3, #23]
    fdb8:	4b08      	ldr	r3, [pc, #32]	; (fddc <calcaRes+0x2c>)
    fdba:	0010      	movs	r0, r2
    fdbc:	4798      	blx	r3
    fdbe:	1c02      	adds	r2, r0, #0
    fdc0:	4b07      	ldr	r3, [pc, #28]	; (fde0 <calcaRes+0x30>)
    fdc2:	218e      	movs	r1, #142	; 0x8e
    fdc4:	05c9      	lsls	r1, r1, #23
    fdc6:	1c10      	adds	r0, r2, #0
    fdc8:	4798      	blx	r3
    fdca:	1c03      	adds	r3, r0, #0
    fdcc:	1c1a      	adds	r2, r3, #0
    fdce:	4b05      	ldr	r3, [pc, #20]	; (fde4 <calcaRes+0x34>)
    fdd0:	601a      	str	r2, [r3, #0]
}
    fdd2:	46c0      	nop			; (mov r8, r8)
    fdd4:	46bd      	mov	sp, r7
    fdd6:	bd80      	pop	{r7, pc}
    fdd8:	200008dc 	.word	0x200008dc
    fddc:	0001a379 	.word	0x0001a379
    fde0:	00019941 	.word	0x00019941
    fde4:	20000fac 	.word	0x20000fac

0000fde8 <calcmRes>:

void calcmRes()
{
    fde8:	b580      	push	{r7, lr}
    fdea:	af00      	add	r7, sp, #0
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
    fdec:	4b12      	ldr	r3, [pc, #72]	; (fe38 <calcmRes+0x50>)
    fdee:	2220      	movs	r2, #32
    fdf0:	5c9b      	ldrb	r3, [r3, r2]
    fdf2:	2b08      	cmp	r3, #8
    fdf4:	d00d      	beq.n	fe12 <calcmRes+0x2a>
    fdf6:	dc02      	bgt.n	fdfe <calcmRes+0x16>
    fdf8:	2b04      	cmp	r3, #4
    fdfa:	d005      	beq.n	fe08 <calcmRes+0x20>
	case 16:
		mRes = magSensitivity[3];
		break;
	}
	
}
    fdfc:	e018      	b.n	fe30 <calcmRes+0x48>
	switch (settings.mag.scale)
    fdfe:	2b0c      	cmp	r3, #12
    fe00:	d00c      	beq.n	fe1c <calcmRes+0x34>
    fe02:	2b10      	cmp	r3, #16
    fe04:	d00f      	beq.n	fe26 <calcmRes+0x3e>
}
    fe06:	e013      	b.n	fe30 <calcmRes+0x48>
		mRes = magSensitivity[0];
    fe08:	4b0c      	ldr	r3, [pc, #48]	; (fe3c <calcmRes+0x54>)
    fe0a:	681a      	ldr	r2, [r3, #0]
    fe0c:	4b0c      	ldr	r3, [pc, #48]	; (fe40 <calcmRes+0x58>)
    fe0e:	601a      	str	r2, [r3, #0]
		break;
    fe10:	e00e      	b.n	fe30 <calcmRes+0x48>
		mRes = magSensitivity[1];
    fe12:	4b0a      	ldr	r3, [pc, #40]	; (fe3c <calcmRes+0x54>)
    fe14:	685a      	ldr	r2, [r3, #4]
    fe16:	4b0a      	ldr	r3, [pc, #40]	; (fe40 <calcmRes+0x58>)
    fe18:	601a      	str	r2, [r3, #0]
		break;
    fe1a:	e009      	b.n	fe30 <calcmRes+0x48>
		mRes = magSensitivity[2];
    fe1c:	4b07      	ldr	r3, [pc, #28]	; (fe3c <calcmRes+0x54>)
    fe1e:	689a      	ldr	r2, [r3, #8]
    fe20:	4b07      	ldr	r3, [pc, #28]	; (fe40 <calcmRes+0x58>)
    fe22:	601a      	str	r2, [r3, #0]
		break;
    fe24:	e004      	b.n	fe30 <calcmRes+0x48>
		mRes = magSensitivity[3];
    fe26:	4b05      	ldr	r3, [pc, #20]	; (fe3c <calcmRes+0x54>)
    fe28:	68da      	ldr	r2, [r3, #12]
    fe2a:	4b05      	ldr	r3, [pc, #20]	; (fe40 <calcmRes+0x58>)
    fe2c:	601a      	str	r2, [r3, #0]
		break;
    fe2e:	46c0      	nop			; (mov r8, r8)
}
    fe30:	46c0      	nop			; (mov r8, r8)
    fe32:	46bd      	mov	sp, r7
    fe34:	bd80      	pop	{r7, pc}
    fe36:	46c0      	nop			; (mov r8, r8)
    fe38:	200008dc 	.word	0x200008dc
    fe3c:	200000e8 	.word	0x200000e8
    fe40:	20001a5c 	.word	0x20001a5c

0000fe44 <enableFIFO>:
	xgWriteByte(CTRL_REG9, temp);
#endif
}

void enableFIFO(bool enable)
{
    fe44:	b590      	push	{r4, r7, lr}
    fe46:	b085      	sub	sp, #20
    fe48:	af00      	add	r7, sp, #0
    fe4a:	0002      	movs	r2, r0
    fe4c:	1dfb      	adds	r3, r7, #7
    fe4e:	701a      	strb	r2, [r3, #0]
#ifdef HW_3v4
	uint8_t temp = xgReadByte(CTRL_REG9);
    fe50:	230f      	movs	r3, #15
    fe52:	18fc      	adds	r4, r7, r3
    fe54:	2023      	movs	r0, #35	; 0x23
    fe56:	4b12      	ldr	r3, [pc, #72]	; (fea0 <enableFIFO+0x5c>)
    fe58:	4798      	blx	r3
    fe5a:	0003      	movs	r3, r0
    fe5c:	7023      	strb	r3, [r4, #0]
	if (enable) temp |= (1<<1);
    fe5e:	1dfb      	adds	r3, r7, #7
    fe60:	781b      	ldrb	r3, [r3, #0]
    fe62:	2b00      	cmp	r3, #0
    fe64:	d008      	beq.n	fe78 <enableFIFO+0x34>
    fe66:	230f      	movs	r3, #15
    fe68:	18fb      	adds	r3, r7, r3
    fe6a:	220f      	movs	r2, #15
    fe6c:	18ba      	adds	r2, r7, r2
    fe6e:	7812      	ldrb	r2, [r2, #0]
    fe70:	2102      	movs	r1, #2
    fe72:	430a      	orrs	r2, r1
    fe74:	701a      	strb	r2, [r3, #0]
    fe76:	e007      	b.n	fe88 <enableFIFO+0x44>
	else temp &= ~(1<<1);
    fe78:	230f      	movs	r3, #15
    fe7a:	18fb      	adds	r3, r7, r3
    fe7c:	220f      	movs	r2, #15
    fe7e:	18ba      	adds	r2, r7, r2
    fe80:	7812      	ldrb	r2, [r2, #0]
    fe82:	2102      	movs	r1, #2
    fe84:	438a      	bics	r2, r1
    fe86:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG9, temp);
    fe88:	230f      	movs	r3, #15
    fe8a:	18fb      	adds	r3, r7, r3
    fe8c:	781b      	ldrb	r3, [r3, #0]
    fe8e:	0019      	movs	r1, r3
    fe90:	2023      	movs	r0, #35	; 0x23
    fe92:	4b04      	ldr	r3, [pc, #16]	; (fea4 <enableFIFO+0x60>)
    fe94:	4798      	blx	r3
#endif
}
    fe96:	46c0      	nop			; (mov r8, r8)
    fe98:	46bd      	mov	sp, r7
    fe9a:	b005      	add	sp, #20
    fe9c:	bd90      	pop	{r4, r7, pc}
    fe9e:	46c0      	nop			; (mov r8, r8)
    fea0:	0000fff1 	.word	0x0000fff1
    fea4:	0000ff89 	.word	0x0000ff89

0000fea8 <setFIFO>:

void setFIFO(enum fifoMode_type fifoMode, uint16_t fifoThs)
{
    fea8:	b580      	push	{r7, lr}
    feaa:	b084      	sub	sp, #16
    feac:	af00      	add	r7, sp, #0
    feae:	0002      	movs	r2, r0
    feb0:	1dfb      	adds	r3, r7, #7
    feb2:	701a      	strb	r2, [r3, #0]
    feb4:	1d3b      	adds	r3, r7, #4
    feb6:	1c0a      	adds	r2, r1, #0
    feb8:	801a      	strh	r2, [r3, #0]
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
#ifdef HW_3v4
	uint16_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
    feba:	230e      	movs	r3, #14
    febc:	18fa      	adds	r2, r7, r3
    febe:	1d3b      	adds	r3, r7, #4
    fec0:	881b      	ldrh	r3, [r3, #0]
    fec2:	b299      	uxth	r1, r3
    fec4:	291f      	cmp	r1, #31
    fec6:	d900      	bls.n	feca <setFIFO+0x22>
    fec8:	231f      	movs	r3, #31
    feca:	8013      	strh	r3, [r2, #0]
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
    fecc:	1dfb      	adds	r3, r7, #7
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	015b      	lsls	r3, r3, #5
    fed2:	b25a      	sxtb	r2, r3
    fed4:	230e      	movs	r3, #14
    fed6:	18fb      	adds	r3, r7, r3
    fed8:	881b      	ldrh	r3, [r3, #0]
    feda:	b25b      	sxtb	r3, r3
    fedc:	211f      	movs	r1, #31
    fede:	400b      	ands	r3, r1
    fee0:	b25b      	sxtb	r3, r3
    fee2:	4313      	orrs	r3, r2
    fee4:	b25b      	sxtb	r3, r3
    fee6:	b2db      	uxtb	r3, r3
    fee8:	0019      	movs	r1, r3
    feea:	202e      	movs	r0, #46	; 0x2e
    feec:	4b02      	ldr	r3, [pc, #8]	; (fef8 <setFIFO+0x50>)
    feee:	4798      	blx	r3
	xgWriteByte(FIFO_CTRL2, (threshold & 0x0F00)>>8);
	xgWriteByte(FIFO_CTRL3, 0x09);//Set the FIFO to no accel or gyro decimation
	xgWriteByte(FIFO_CTRL4, 0x09);//Set the FIFO to no accel or gyro decimation
	xgWriteByte(FIFO_CTRL5, (fifoMode & 0x07)|0x40);//Set FIFO ODR to 6.66kHZ to enable FIFO
#endif
}
    fef0:	46c0      	nop			; (mov r8, r8)
    fef2:	46bd      	mov	sp, r7
    fef4:	b004      	add	sp, #16
    fef6:	bd80      	pop	{r7, pc}
    fef8:	0000ff89 	.word	0x0000ff89

0000fefc <constrainScales>:
#endif
	return 0;
}

void constrainScales()
{
    fefc:	b580      	push	{r7, lr}
    fefe:	af00      	add	r7, sp, #0
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    ff00:	4b20      	ldr	r3, [pc, #128]	; (ff84 <constrainScales+0x88>)
    ff02:	88db      	ldrh	r3, [r3, #6]
    ff04:	2bf5      	cmp	r3, #245	; 0xf5
    ff06:	d00e      	beq.n	ff26 <constrainScales+0x2a>
    ff08:	4b1e      	ldr	r3, [pc, #120]	; (ff84 <constrainScales+0x88>)
    ff0a:	88da      	ldrh	r2, [r3, #6]
    ff0c:	23fa      	movs	r3, #250	; 0xfa
    ff0e:	005b      	lsls	r3, r3, #1
    ff10:	429a      	cmp	r2, r3
    ff12:	d008      	beq.n	ff26 <constrainScales+0x2a>
		(settings.gyro.scale != 2000))
    ff14:	4b1b      	ldr	r3, [pc, #108]	; (ff84 <constrainScales+0x88>)
    ff16:	88da      	ldrh	r2, [r3, #6]
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    ff18:	23fa      	movs	r3, #250	; 0xfa
    ff1a:	00db      	lsls	r3, r3, #3
    ff1c:	429a      	cmp	r2, r3
    ff1e:	d002      	beq.n	ff26 <constrainScales+0x2a>
	{
		settings.gyro.scale = 245;
    ff20:	4b18      	ldr	r3, [pc, #96]	; (ff84 <constrainScales+0x88>)
    ff22:	22f5      	movs	r2, #245	; 0xf5
    ff24:	80da      	strh	r2, [r3, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    ff26:	4b17      	ldr	r3, [pc, #92]	; (ff84 <constrainScales+0x88>)
    ff28:	7ddb      	ldrb	r3, [r3, #23]
    ff2a:	2b02      	cmp	r3, #2
    ff2c:	d00e      	beq.n	ff4c <constrainScales+0x50>
    ff2e:	4b15      	ldr	r3, [pc, #84]	; (ff84 <constrainScales+0x88>)
    ff30:	7ddb      	ldrb	r3, [r3, #23]
    ff32:	2b04      	cmp	r3, #4
    ff34:	d00a      	beq.n	ff4c <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    ff36:	4b13      	ldr	r3, [pc, #76]	; (ff84 <constrainScales+0x88>)
    ff38:	7ddb      	ldrb	r3, [r3, #23]
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    ff3a:	2b08      	cmp	r3, #8
    ff3c:	d006      	beq.n	ff4c <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    ff3e:	4b11      	ldr	r3, [pc, #68]	; (ff84 <constrainScales+0x88>)
    ff40:	7ddb      	ldrb	r3, [r3, #23]
    ff42:	2b10      	cmp	r3, #16
    ff44:	d002      	beq.n	ff4c <constrainScales+0x50>
	{
		settings.accel.scale = 2;
    ff46:	4b0f      	ldr	r3, [pc, #60]	; (ff84 <constrainScales+0x88>)
    ff48:	2202      	movs	r2, #2
    ff4a:	75da      	strb	r2, [r3, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    ff4c:	4b0d      	ldr	r3, [pc, #52]	; (ff84 <constrainScales+0x88>)
    ff4e:	2220      	movs	r2, #32
    ff50:	5c9b      	ldrb	r3, [r3, r2]
    ff52:	2b04      	cmp	r3, #4
    ff54:	d012      	beq.n	ff7c <constrainScales+0x80>
    ff56:	4b0b      	ldr	r3, [pc, #44]	; (ff84 <constrainScales+0x88>)
    ff58:	2220      	movs	r2, #32
    ff5a:	5c9b      	ldrb	r3, [r3, r2]
    ff5c:	2b08      	cmp	r3, #8
    ff5e:	d00d      	beq.n	ff7c <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    ff60:	4b08      	ldr	r3, [pc, #32]	; (ff84 <constrainScales+0x88>)
    ff62:	2220      	movs	r2, #32
    ff64:	5c9b      	ldrb	r3, [r3, r2]
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    ff66:	2b0c      	cmp	r3, #12
    ff68:	d008      	beq.n	ff7c <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    ff6a:	4b06      	ldr	r3, [pc, #24]	; (ff84 <constrainScales+0x88>)
    ff6c:	2220      	movs	r2, #32
    ff6e:	5c9b      	ldrb	r3, [r3, r2]
    ff70:	2b10      	cmp	r3, #16
    ff72:	d003      	beq.n	ff7c <constrainScales+0x80>
	{
		settings.mag.scale = 4;
    ff74:	4b03      	ldr	r3, [pc, #12]	; (ff84 <constrainScales+0x88>)
    ff76:	2220      	movs	r2, #32
    ff78:	2104      	movs	r1, #4
    ff7a:	5499      	strb	r1, [r3, r2]
	}
}
    ff7c:	46c0      	nop			; (mov r8, r8)
    ff7e:	46bd      	mov	sp, r7
    ff80:	bd80      	pop	{r7, pc}
    ff82:	46c0      	nop			; (mov r8, r8)
    ff84:	200008dc 	.word	0x200008dc

0000ff88 <xgWriteByte>:

void xgWriteByte(uint8_t subAddress, uint8_t data)
{
    ff88:	b580      	push	{r7, lr}
    ff8a:	b082      	sub	sp, #8
    ff8c:	af00      	add	r7, sp, #0
    ff8e:	0002      	movs	r2, r0
    ff90:	1dfb      	adds	r3, r7, #7
    ff92:	701a      	strb	r2, [r3, #0]
    ff94:	1dbb      	adds	r3, r7, #6
    ff96:	1c0a      	adds	r2, r1, #0
    ff98:	701a      	strb	r2, [r3, #0]
		writeByte(_xgAddress, subAddress, data);
    ff9a:	4b06      	ldr	r3, [pc, #24]	; (ffb4 <xgWriteByte+0x2c>)
    ff9c:	7818      	ldrb	r0, [r3, #0]
    ff9e:	1dbb      	adds	r3, r7, #6
    ffa0:	781a      	ldrb	r2, [r3, #0]
    ffa2:	1dfb      	adds	r3, r7, #7
    ffa4:	781b      	ldrb	r3, [r3, #0]
    ffa6:	0019      	movs	r1, r3
    ffa8:	4b03      	ldr	r3, [pc, #12]	; (ffb8 <xgWriteByte+0x30>)
    ffaa:	4798      	blx	r3
}
    ffac:	46c0      	nop			; (mov r8, r8)
    ffae:	46bd      	mov	sp, r7
    ffb0:	b002      	add	sp, #8
    ffb2:	bd80      	pop	{r7, pc}
    ffb4:	20001124 	.word	0x20001124
    ffb8:	000100ed 	.word	0x000100ed

0000ffbc <mWriteByte>:

void mWriteByte(uint8_t subAddress, uint8_t data)
{
    ffbc:	b580      	push	{r7, lr}
    ffbe:	b082      	sub	sp, #8
    ffc0:	af00      	add	r7, sp, #0
    ffc2:	0002      	movs	r2, r0
    ffc4:	1dfb      	adds	r3, r7, #7
    ffc6:	701a      	strb	r2, [r3, #0]
    ffc8:	1dbb      	adds	r3, r7, #6
    ffca:	1c0a      	adds	r2, r1, #0
    ffcc:	701a      	strb	r2, [r3, #0]
		return writeByte(_mAddress, subAddress, data);
    ffce:	4b06      	ldr	r3, [pc, #24]	; (ffe8 <mWriteByte+0x2c>)
    ffd0:	7818      	ldrb	r0, [r3, #0]
    ffd2:	1dbb      	adds	r3, r7, #6
    ffd4:	781a      	ldrb	r2, [r3, #0]
    ffd6:	1dfb      	adds	r3, r7, #7
    ffd8:	781b      	ldrb	r3, [r3, #0]
    ffda:	0019      	movs	r1, r3
    ffdc:	4b03      	ldr	r3, [pc, #12]	; (ffec <mWriteByte+0x30>)
    ffde:	4798      	blx	r3
}
    ffe0:	46bd      	mov	sp, r7
    ffe2:	b002      	add	sp, #8
    ffe4:	bd80      	pop	{r7, pc}
    ffe6:	46c0      	nop			; (mov r8, r8)
    ffe8:	20000fb0 	.word	0x20000fb0
    ffec:	000100ed 	.word	0x000100ed

0000fff0 <xgReadByte>:

uint8_t xgReadByte(uint8_t subAddress)
{
    fff0:	b580      	push	{r7, lr}
    fff2:	b082      	sub	sp, #8
    fff4:	af00      	add	r7, sp, #0
    fff6:	0002      	movs	r2, r0
    fff8:	1dfb      	adds	r3, r7, #7
    fffa:	701a      	strb	r2, [r3, #0]
		return readByte(_xgAddress, subAddress);
    fffc:	4b06      	ldr	r3, [pc, #24]	; (10018 <xgReadByte+0x28>)
    fffe:	781a      	ldrb	r2, [r3, #0]
   10000:	1dfb      	adds	r3, r7, #7
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	0019      	movs	r1, r3
   10006:	0010      	movs	r0, r2
   10008:	4b04      	ldr	r3, [pc, #16]	; (1001c <xgReadByte+0x2c>)
   1000a:	4798      	blx	r3
   1000c:	0003      	movs	r3, r0
}
   1000e:	0018      	movs	r0, r3
   10010:	46bd      	mov	sp, r7
   10012:	b002      	add	sp, #8
   10014:	bd80      	pop	{r7, pc}
   10016:	46c0      	nop			; (mov r8, r8)
   10018:	20001124 	.word	0x20001124
   1001c:	00010195 	.word	0x00010195

00010020 <xgReadBytes>:

void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
   10020:	b590      	push	{r4, r7, lr}
   10022:	b083      	sub	sp, #12
   10024:	af00      	add	r7, sp, #0
   10026:	6039      	str	r1, [r7, #0]
   10028:	0011      	movs	r1, r2
   1002a:	1dfb      	adds	r3, r7, #7
   1002c:	1c02      	adds	r2, r0, #0
   1002e:	701a      	strb	r2, [r3, #0]
   10030:	1dbb      	adds	r3, r7, #6
   10032:	1c0a      	adds	r2, r1, #0
   10034:	701a      	strb	r2, [r3, #0]
		readBytes(_xgAddress, subAddress, dest, count);
   10036:	4b07      	ldr	r3, [pc, #28]	; (10054 <xgReadBytes+0x34>)
   10038:	7818      	ldrb	r0, [r3, #0]
   1003a:	1dbb      	adds	r3, r7, #6
   1003c:	781c      	ldrb	r4, [r3, #0]
   1003e:	683a      	ldr	r2, [r7, #0]
   10040:	1dfb      	adds	r3, r7, #7
   10042:	7819      	ldrb	r1, [r3, #0]
   10044:	0023      	movs	r3, r4
   10046:	4c04      	ldr	r4, [pc, #16]	; (10058 <xgReadBytes+0x38>)
   10048:	47a0      	blx	r4
}
   1004a:	46c0      	nop			; (mov r8, r8)
   1004c:	46bd      	mov	sp, r7
   1004e:	b003      	add	sp, #12
   10050:	bd90      	pop	{r4, r7, pc}
   10052:	46c0      	nop			; (mov r8, r8)
   10054:	20001124 	.word	0x20001124
   10058:	00010265 	.word	0x00010265

0001005c <mReadByte>:

uint8_t mReadByte(uint8_t subAddress)
{
   1005c:	b580      	push	{r7, lr}
   1005e:	b082      	sub	sp, #8
   10060:	af00      	add	r7, sp, #0
   10062:	0002      	movs	r2, r0
   10064:	1dfb      	adds	r3, r7, #7
   10066:	701a      	strb	r2, [r3, #0]
		return readByte(_mAddress, subAddress);
   10068:	4b06      	ldr	r3, [pc, #24]	; (10084 <mReadByte+0x28>)
   1006a:	781a      	ldrb	r2, [r3, #0]
   1006c:	1dfb      	adds	r3, r7, #7
   1006e:	781b      	ldrb	r3, [r3, #0]
   10070:	0019      	movs	r1, r3
   10072:	0010      	movs	r0, r2
   10074:	4b04      	ldr	r3, [pc, #16]	; (10088 <mReadByte+0x2c>)
   10076:	4798      	blx	r3
   10078:	0003      	movs	r3, r0
}
   1007a:	0018      	movs	r0, r3
   1007c:	46bd      	mov	sp, r7
   1007e:	b002      	add	sp, #8
   10080:	bd80      	pop	{r7, pc}
   10082:	46c0      	nop			; (mov r8, r8)
   10084:	20000fb0 	.word	0x20000fb0
   10088:	00010195 	.word	0x00010195

0001008c <initI2C>:
		readBytes(_mAddress, subAddress, dest, count);
}

// Configure SERCOM channel 3 as I2C master for IMU communication
void initI2C()
{
   1008c:	b580      	push	{r7, lr}
   1008e:	b08e      	sub	sp, #56	; 0x38
   10090:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
   10092:	1d3b      	adds	r3, r7, #4
   10094:	0018      	movs	r0, r3
   10096:	4b0e      	ldr	r3, [pc, #56]	; (100d0 <initI2C+0x44>)
   10098:	4798      	blx	r3
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
   1009a:	1d3b      	adds	r3, r7, #4
   1009c:	22c8      	movs	r2, #200	; 0xc8
   1009e:	0052      	lsls	r2, r2, #1
   100a0:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = MASTER_TIMEOUT;
   100a2:	1d3b      	adds	r3, r7, #4
   100a4:	22fa      	movs	r2, #250	; 0xfa
   100a6:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
   100a8:	1d3b      	adds	r3, r7, #4
   100aa:	4a0a      	ldr	r2, [pc, #40]	; (100d4 <initI2C+0x48>)
   100ac:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
   100ae:	1d3b      	adds	r3, r7, #4
   100b0:	4a09      	ldr	r2, [pc, #36]	; (100d8 <initI2C+0x4c>)
   100b2:	621a      	str	r2, [r3, #32]
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
   100b4:	1d3a      	adds	r2, r7, #4
   100b6:	4909      	ldr	r1, [pc, #36]	; (100dc <initI2C+0x50>)
   100b8:	4b09      	ldr	r3, [pc, #36]	; (100e0 <initI2C+0x54>)
   100ba:	0018      	movs	r0, r3
   100bc:	4b09      	ldr	r3, [pc, #36]	; (100e4 <initI2C+0x58>)
   100be:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
   100c0:	4b07      	ldr	r3, [pc, #28]	; (100e0 <initI2C+0x54>)
   100c2:	0018      	movs	r0, r3
   100c4:	4b08      	ldr	r3, [pc, #32]	; (100e8 <initI2C+0x5c>)
   100c6:	4798      	blx	r3
}
   100c8:	46c0      	nop			; (mov r8, r8)
   100ca:	46bd      	mov	sp, r7
   100cc:	b00e      	add	sp, #56	; 0x38
   100ce:	bd80      	pop	{r7, pc}
   100d0:	0000990d 	.word	0x0000990d
   100d4:	00160002 	.word	0x00160002
   100d8:	00170002 	.word	0x00170002
   100dc:	42001400 	.word	0x42001400
   100e0:	20001568 	.word	0x20001568
   100e4:	00003701 	.word	0x00003701
   100e8:	00009991 	.word	0x00009991

000100ec <writeByte>:

// Wire.h read and write protocols
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
   100ec:	b590      	push	{r4, r7, lr}
   100ee:	b087      	sub	sp, #28
   100f0:	af00      	add	r7, sp, #0
   100f2:	0004      	movs	r4, r0
   100f4:	0008      	movs	r0, r1
   100f6:	0011      	movs	r1, r2
   100f8:	1dfb      	adds	r3, r7, #7
   100fa:	1c22      	adds	r2, r4, #0
   100fc:	701a      	strb	r2, [r3, #0]
   100fe:	1dbb      	adds	r3, r7, #6
   10100:	1c02      	adds	r2, r0, #0
   10102:	701a      	strb	r2, [r3, #0]
   10104:	1d7b      	adds	r3, r7, #5
   10106:	1c0a      	adds	r2, r1, #0
   10108:	701a      	strb	r2, [r3, #0]
	/* Timeout counter. */
	uint16_t timeout = 0;
   1010a:	2316      	movs	r3, #22
   1010c:	18fb      	adds	r3, r7, r3
   1010e:	2200      	movs	r2, #0
   10110:	801a      	strh	r2, [r3, #0]
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
   10112:	4b1d      	ldr	r3, [pc, #116]	; (10188 <writeByte+0x9c>)
   10114:	1dba      	adds	r2, r7, #6
   10116:	7812      	ldrb	r2, [r2, #0]
   10118:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = data;
   1011a:	4b1b      	ldr	r3, [pc, #108]	; (10188 <writeByte+0x9c>)
   1011c:	1d7a      	adds	r2, r7, #5
   1011e:	7812      	ldrb	r2, [r2, #0]
   10120:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
   10122:	1dfb      	adds	r3, r7, #7
   10124:	781b      	ldrb	r3, [r3, #0]
   10126:	b29a      	uxth	r2, r3
   10128:	2308      	movs	r3, #8
   1012a:	18fb      	adds	r3, r7, r3
   1012c:	801a      	strh	r2, [r3, #0]
   1012e:	2308      	movs	r3, #8
   10130:	18fb      	adds	r3, r7, r3
   10132:	2202      	movs	r2, #2
   10134:	805a      	strh	r2, [r3, #2]
   10136:	2308      	movs	r3, #8
   10138:	18fb      	adds	r3, r7, r3
   1013a:	4a13      	ldr	r2, [pc, #76]	; (10188 <writeByte+0x9c>)
   1013c:	605a      	str	r2, [r3, #4]
   1013e:	2308      	movs	r3, #8
   10140:	18fb      	adds	r3, r7, r3
   10142:	2200      	movs	r2, #0
   10144:	721a      	strb	r2, [r3, #8]
   10146:	2308      	movs	r3, #8
   10148:	18fb      	adds	r3, r7, r3
   1014a:	2200      	movs	r2, #0
   1014c:	725a      	strb	r2, [r3, #9]
   1014e:	2308      	movs	r3, #8
   10150:	18fb      	adds	r3, r7, r3
   10152:	2200      	movs	r2, #0
   10154:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

    /* Write buffer to slave until success. */
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
   10156:	e008      	b.n	1016a <writeByte+0x7e>
    STATUS_OK) {
	    /* Increment timeout counter and check if timed out. */
	    if (timeout++ == MASTER_TIMEOUT) {
   10158:	2316      	movs	r3, #22
   1015a:	18fb      	adds	r3, r7, r3
   1015c:	881b      	ldrh	r3, [r3, #0]
   1015e:	2216      	movs	r2, #22
   10160:	18ba      	adds	r2, r7, r2
   10162:	1c59      	adds	r1, r3, #1
   10164:	8011      	strh	r1, [r2, #0]
   10166:	2bfa      	cmp	r3, #250	; 0xfa
   10168:	d009      	beq.n	1017e <writeByte+0x92>
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
   1016a:	2308      	movs	r3, #8
   1016c:	18fa      	adds	r2, r7, r3
   1016e:	4b07      	ldr	r3, [pc, #28]	; (1018c <writeByte+0xa0>)
   10170:	0011      	movs	r1, r2
   10172:	0018      	movs	r0, r3
   10174:	4b06      	ldr	r3, [pc, #24]	; (10190 <writeByte+0xa4>)
   10176:	4798      	blx	r3
   10178:	1e03      	subs	r3, r0, #0
   1017a:	d1ed      	bne.n	10158 <writeByte+0x6c>
		    break;
	    }
    }
}
   1017c:	e000      	b.n	10180 <writeByte+0x94>
		    break;
   1017e:	46c0      	nop			; (mov r8, r8)
}
   10180:	46c0      	nop			; (mov r8, r8)
   10182:	46bd      	mov	sp, r7
   10184:	b007      	add	sp, #28
   10186:	bd90      	pop	{r4, r7, pc}
   10188:	20001a60 	.word	0x20001a60
   1018c:	20001568 	.word	0x20001568
   10190:	00003d71 	.word	0x00003d71

00010194 <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
   10194:	b580      	push	{r7, lr}
   10196:	b088      	sub	sp, #32
   10198:	af00      	add	r7, sp, #0
   1019a:	0002      	movs	r2, r0
   1019c:	1dfb      	adds	r3, r7, #7
   1019e:	701a      	strb	r2, [r3, #0]
   101a0:	1dbb      	adds	r3, r7, #6
   101a2:	1c0a      	adds	r2, r1, #0
   101a4:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
   101a6:	2300      	movs	r3, #0
   101a8:	61fb      	str	r3, [r7, #28]
	uint8_t data; // `data` will store the register data	
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
   101aa:	4b29      	ldr	r3, [pc, #164]	; (10250 <readByte+0xbc>)
   101ac:	1dba      	adds	r2, r7, #6
   101ae:	7812      	ldrb	r2, [r2, #0]
   101b0:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
   101b2:	1dfb      	adds	r3, r7, #7
   101b4:	781b      	ldrb	r3, [r3, #0]
   101b6:	b29a      	uxth	r2, r3
   101b8:	230c      	movs	r3, #12
   101ba:	18fb      	adds	r3, r7, r3
   101bc:	801a      	strh	r2, [r3, #0]
   101be:	230c      	movs	r3, #12
   101c0:	18fb      	adds	r3, r7, r3
   101c2:	2201      	movs	r2, #1
   101c4:	805a      	strh	r2, [r3, #2]
   101c6:	230c      	movs	r3, #12
   101c8:	18fb      	adds	r3, r7, r3
   101ca:	4a21      	ldr	r2, [pc, #132]	; (10250 <readByte+0xbc>)
   101cc:	605a      	str	r2, [r3, #4]
   101ce:	230c      	movs	r3, #12
   101d0:	18fb      	adds	r3, r7, r3
   101d2:	2200      	movs	r2, #0
   101d4:	721a      	strb	r2, [r3, #8]
   101d6:	230c      	movs	r3, #12
   101d8:	18fb      	adds	r3, r7, r3
   101da:	2200      	movs	r2, #0
   101dc:	725a      	strb	r2, [r3, #9]
   101de:	230c      	movs	r3, #12
   101e0:	18fb      	adds	r3, r7, r3
   101e2:	2200      	movs	r2, #0
   101e4:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
   101e6:	e004      	b.n	101f2 <readByte+0x5e>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
   101e8:	69fb      	ldr	r3, [r7, #28]
   101ea:	1c5a      	adds	r2, r3, #1
   101ec:	61fa      	str	r2, [r7, #28]
   101ee:	2bfa      	cmp	r3, #250	; 0xfa
   101f0:	d009      	beq.n	10206 <readByte+0x72>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
   101f2:	230c      	movs	r3, #12
   101f4:	18fa      	adds	r2, r7, r3
   101f6:	4b17      	ldr	r3, [pc, #92]	; (10254 <readByte+0xc0>)
   101f8:	0011      	movs	r1, r2
   101fa:	0018      	movs	r0, r3
   101fc:	4b16      	ldr	r3, [pc, #88]	; (10258 <readByte+0xc4>)
   101fe:	4798      	blx	r3
   10200:	1e03      	subs	r3, r0, #0
   10202:	d1f1      	bne.n	101e8 <readByte+0x54>
   10204:	e000      	b.n	10208 <readByte+0x74>
			break;
   10206:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
   10208:	2300      	movs	r3, #0
   1020a:	61fb      	str	r3, [r7, #28]
	packet.data = read_buffer;
   1020c:	230c      	movs	r3, #12
   1020e:	18fb      	adds	r3, r7, r3
   10210:	4a12      	ldr	r2, [pc, #72]	; (1025c <readByte+0xc8>)
   10212:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
   10214:	e004      	b.n	10220 <readByte+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
   10216:	69fb      	ldr	r3, [r7, #28]
   10218:	1c5a      	adds	r2, r3, #1
   1021a:	61fa      	str	r2, [r7, #28]
   1021c:	2bfa      	cmp	r3, #250	; 0xfa
   1021e:	d009      	beq.n	10234 <readByte+0xa0>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
   10220:	230c      	movs	r3, #12
   10222:	18fa      	adds	r2, r7, r3
   10224:	4b0b      	ldr	r3, [pc, #44]	; (10254 <readByte+0xc0>)
   10226:	0011      	movs	r1, r2
   10228:	0018      	movs	r0, r3
   1022a:	4b0d      	ldr	r3, [pc, #52]	; (10260 <readByte+0xcc>)
   1022c:	4798      	blx	r3
   1022e:	1e03      	subs	r3, r0, #0
   10230:	d1f1      	bne.n	10216 <readByte+0x82>
   10232:	e000      	b.n	10236 <readByte+0xa2>
			break;
   10234:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	data = read_buffer[0];                      // Fill Rx buffer with result
   10236:	231b      	movs	r3, #27
   10238:	18fb      	adds	r3, r7, r3
   1023a:	4a08      	ldr	r2, [pc, #32]	; (1025c <readByte+0xc8>)
   1023c:	7812      	ldrb	r2, [r2, #0]
   1023e:	701a      	strb	r2, [r3, #0]
	return data;                             // Return data read from slave register
   10240:	231b      	movs	r3, #27
   10242:	18fb      	adds	r3, r7, r3
   10244:	781b      	ldrb	r3, [r3, #0]
}
   10246:	0018      	movs	r0, r3
   10248:	46bd      	mov	sp, r7
   1024a:	b008      	add	sp, #32
   1024c:	bd80      	pop	{r7, pc}
   1024e:	46c0      	nop			; (mov r8, r8)
   10250:	20001a60 	.word	0x20001a60
   10254:	20001568 	.word	0x20001568
   10258:	00003d71 	.word	0x00003d71
   1025c:	200015a4 	.word	0x200015a4
   10260:	00003bb9 	.word	0x00003bb9

00010264 <readBytes>:

uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
   10264:	b590      	push	{r4, r7, lr}
   10266:	b089      	sub	sp, #36	; 0x24
   10268:	af00      	add	r7, sp, #0
   1026a:	0004      	movs	r4, r0
   1026c:	0008      	movs	r0, r1
   1026e:	603a      	str	r2, [r7, #0]
   10270:	0019      	movs	r1, r3
   10272:	1dfb      	adds	r3, r7, #7
   10274:	1c22      	adds	r2, r4, #0
   10276:	701a      	strb	r2, [r3, #0]
   10278:	1dbb      	adds	r3, r7, #6
   1027a:	1c02      	adds	r2, r0, #0
   1027c:	701a      	strb	r2, [r3, #0]
   1027e:	1d7b      	adds	r3, r7, #5
   10280:	1c0a      	adds	r2, r1, #0
   10282:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
   10284:	2300      	movs	r3, #0
   10286:	61fb      	str	r3, [r7, #28]
	
	/* Init i2c packet. */
#ifdef HW_3v4
	write_buffer[0] = subAddress | 0x80;
   10288:	1dbb      	adds	r3, r7, #6
   1028a:	781b      	ldrb	r3, [r3, #0]
   1028c:	2280      	movs	r2, #128	; 0x80
   1028e:	4252      	negs	r2, r2
   10290:	4313      	orrs	r3, r2
   10292:	b2da      	uxtb	r2, r3
   10294:	4b38      	ldr	r3, [pc, #224]	; (10378 <readBytes+0x114>)
   10296:	701a      	strb	r2, [r3, #0]
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	write_buffer[0] = subAddress;
#endif
	struct i2c_master_packet packet = {
   10298:	1dfb      	adds	r3, r7, #7
   1029a:	781b      	ldrb	r3, [r3, #0]
   1029c:	b29a      	uxth	r2, r3
   1029e:	230c      	movs	r3, #12
   102a0:	18fb      	adds	r3, r7, r3
   102a2:	801a      	strh	r2, [r3, #0]
   102a4:	230c      	movs	r3, #12
   102a6:	18fb      	adds	r3, r7, r3
   102a8:	2201      	movs	r2, #1
   102aa:	805a      	strh	r2, [r3, #2]
   102ac:	230c      	movs	r3, #12
   102ae:	18fb      	adds	r3, r7, r3
   102b0:	4a31      	ldr	r2, [pc, #196]	; (10378 <readBytes+0x114>)
   102b2:	605a      	str	r2, [r3, #4]
   102b4:	230c      	movs	r3, #12
   102b6:	18fb      	adds	r3, r7, r3
   102b8:	2200      	movs	r2, #0
   102ba:	721a      	strb	r2, [r3, #8]
   102bc:	230c      	movs	r3, #12
   102be:	18fb      	adds	r3, r7, r3
   102c0:	2200      	movs	r2, #0
   102c2:	725a      	strb	r2, [r3, #9]
   102c4:	230c      	movs	r3, #12
   102c6:	18fb      	adds	r3, r7, r3
   102c8:	2200      	movs	r2, #0
   102ca:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
   102cc:	e004      	b.n	102d8 <readBytes+0x74>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
   102ce:	69fb      	ldr	r3, [r7, #28]
   102d0:	1c5a      	adds	r2, r3, #1
   102d2:	61fa      	str	r2, [r7, #28]
   102d4:	2bfa      	cmp	r3, #250	; 0xfa
   102d6:	d009      	beq.n	102ec <readBytes+0x88>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
   102d8:	230c      	movs	r3, #12
   102da:	18fa      	adds	r2, r7, r3
   102dc:	4b27      	ldr	r3, [pc, #156]	; (1037c <readBytes+0x118>)
   102de:	0011      	movs	r1, r2
   102e0:	0018      	movs	r0, r3
   102e2:	4b27      	ldr	r3, [pc, #156]	; (10380 <readBytes+0x11c>)
   102e4:	4798      	blx	r3
   102e6:	1e03      	subs	r3, r0, #0
   102e8:	d1f1      	bne.n	102ce <readBytes+0x6a>
   102ea:	e000      	b.n	102ee <readBytes+0x8a>
			break;
   102ec:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
   102ee:	2300      	movs	r3, #0
   102f0:	61fb      	str	r3, [r7, #28]
	packet.data_length = count;
   102f2:	1d7b      	adds	r3, r7, #5
   102f4:	781b      	ldrb	r3, [r3, #0]
   102f6:	b29a      	uxth	r2, r3
   102f8:	230c      	movs	r3, #12
   102fa:	18fb      	adds	r3, r7, r3
   102fc:	805a      	strh	r2, [r3, #2]
	packet.data = read_buffer;
   102fe:	230c      	movs	r3, #12
   10300:	18fb      	adds	r3, r7, r3
   10302:	4a20      	ldr	r2, [pc, #128]	; (10384 <readBytes+0x120>)
   10304:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
   10306:	e004      	b.n	10312 <readBytes+0xae>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
   10308:	69fb      	ldr	r3, [r7, #28]
   1030a:	1c5a      	adds	r2, r3, #1
   1030c:	61fa      	str	r2, [r7, #28]
   1030e:	2bfa      	cmp	r3, #250	; 0xfa
   10310:	d009      	beq.n	10326 <readBytes+0xc2>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
   10312:	230c      	movs	r3, #12
   10314:	18fa      	adds	r2, r7, r3
   10316:	4b19      	ldr	r3, [pc, #100]	; (1037c <readBytes+0x118>)
   10318:	0011      	movs	r1, r2
   1031a:	0018      	movs	r0, r3
   1031c:	4b1a      	ldr	r3, [pc, #104]	; (10388 <readBytes+0x124>)
   1031e:	4798      	blx	r3
   10320:	1e03      	subs	r3, r0, #0
   10322:	d1f1      	bne.n	10308 <readBytes+0xa4>
   10324:	e000      	b.n	10328 <readBytes+0xc4>
			break;
   10326:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	uint8_t i = 0;
   10328:	231b      	movs	r3, #27
   1032a:	18fb      	adds	r3, r7, r3
   1032c:	2200      	movs	r2, #0
   1032e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
   10330:	231b      	movs	r3, #27
   10332:	18fb      	adds	r3, r7, r3
   10334:	2200      	movs	r2, #0
   10336:	701a      	strb	r2, [r3, #0]
   10338:	e011      	b.n	1035e <readBytes+0xfa>
	{
		dest[i] = read_buffer[i];
   1033a:	231b      	movs	r3, #27
   1033c:	18fb      	adds	r3, r7, r3
   1033e:	781b      	ldrb	r3, [r3, #0]
   10340:	683a      	ldr	r2, [r7, #0]
   10342:	18d3      	adds	r3, r2, r3
   10344:	221b      	movs	r2, #27
   10346:	18ba      	adds	r2, r7, r2
   10348:	7812      	ldrb	r2, [r2, #0]
   1034a:	490e      	ldr	r1, [pc, #56]	; (10384 <readBytes+0x120>)
   1034c:	5c8a      	ldrb	r2, [r1, r2]
   1034e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
   10350:	231b      	movs	r3, #27
   10352:	18fb      	adds	r3, r7, r3
   10354:	781a      	ldrb	r2, [r3, #0]
   10356:	231b      	movs	r3, #27
   10358:	18fb      	adds	r3, r7, r3
   1035a:	3201      	adds	r2, #1
   1035c:	701a      	strb	r2, [r3, #0]
   1035e:	231b      	movs	r3, #27
   10360:	18fa      	adds	r2, r7, r3
   10362:	1d7b      	adds	r3, r7, #5
   10364:	7812      	ldrb	r2, [r2, #0]
   10366:	781b      	ldrb	r3, [r3, #0]
   10368:	429a      	cmp	r2, r3
   1036a:	d3e6      	bcc.n	1033a <readBytes+0xd6>
	}
	return count;
   1036c:	1d7b      	adds	r3, r7, #5
   1036e:	781b      	ldrb	r3, [r3, #0]
}
   10370:	0018      	movs	r0, r3
   10372:	46bd      	mov	sp, r7
   10374:	b009      	add	sp, #36	; 0x24
   10376:	bd90      	pop	{r4, r7, pc}
   10378:	20001a60 	.word	0x20001a60
   1037c:	20001568 	.word	0x20001568
   10380:	00003d71 	.word	0x00003d71
   10384:	200015a4 	.word	0x200015a4
   10388:	00003bb9 	.word	0x00003bb9

0001038c <CorrectIMUvalues>:

void CorrectIMUvalues(uint8_t connector_orient, uint8_t power_orient){
   1038c:	b580      	push	{r7, lr}
   1038e:	b082      	sub	sp, #8
   10390:	af00      	add	r7, sp, #0
   10392:	0002      	movs	r2, r0
   10394:	1dfb      	adds	r3, r7, #7
   10396:	701a      	strb	r2, [r3, #0]
   10398:	1dbb      	adds	r3, r7, #6
   1039a:	1c0a      	adds	r2, r1, #0
   1039c:	701a      	strb	r2, [r3, #0]
	if((connector_orient == 0 || power_orient == 0)||(connector_orient > 6 || power_orient > 6)){
   1039e:	1dfb      	adds	r3, r7, #7
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	2b00      	cmp	r3, #0
   103a4:	d00b      	beq.n	103be <CorrectIMUvalues+0x32>
   103a6:	1dbb      	adds	r3, r7, #6
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	2b00      	cmp	r3, #0
   103ac:	d007      	beq.n	103be <CorrectIMUvalues+0x32>
   103ae:	1dfb      	adds	r3, r7, #7
   103b0:	781b      	ldrb	r3, [r3, #0]
   103b2:	2b06      	cmp	r3, #6
   103b4:	d803      	bhi.n	103be <CorrectIMUvalues+0x32>
   103b6:	1dbb      	adds	r3, r7, #6
   103b8:	781b      	ldrb	r3, [r3, #0]
   103ba:	2b06      	cmp	r3, #6
   103bc:	d92e      	bls.n	1041c <CorrectIMUvalues+0x90>
		caz = az;
   103be:	4bf3      	ldr	r3, [pc, #972]	; (1078c <CorrectIMUvalues+0x400>)
   103c0:	2200      	movs	r2, #0
   103c2:	5e9a      	ldrsh	r2, [r3, r2]
   103c4:	4bf2      	ldr	r3, [pc, #968]	; (10790 <CorrectIMUvalues+0x404>)
   103c6:	801a      	strh	r2, [r3, #0]
		cgz = gz;
   103c8:	4bf2      	ldr	r3, [pc, #968]	; (10794 <CorrectIMUvalues+0x408>)
   103ca:	2200      	movs	r2, #0
   103cc:	5e9a      	ldrsh	r2, [r3, r2]
   103ce:	4bf2      	ldr	r3, [pc, #968]	; (10798 <CorrectIMUvalues+0x40c>)
   103d0:	801a      	strh	r2, [r3, #0]
		cmz = mz;
   103d2:	4bf2      	ldr	r3, [pc, #968]	; (1079c <CorrectIMUvalues+0x410>)
   103d4:	2200      	movs	r2, #0
   103d6:	5e9a      	ldrsh	r2, [r3, r2]
   103d8:	4bf1      	ldr	r3, [pc, #964]	; (107a0 <CorrectIMUvalues+0x414>)
   103da:	801a      	strh	r2, [r3, #0]
		cax = ax;
   103dc:	4bf1      	ldr	r3, [pc, #964]	; (107a4 <CorrectIMUvalues+0x418>)
   103de:	2200      	movs	r2, #0
   103e0:	5e9a      	ldrsh	r2, [r3, r2]
   103e2:	4bf1      	ldr	r3, [pc, #964]	; (107a8 <CorrectIMUvalues+0x41c>)
   103e4:	801a      	strh	r2, [r3, #0]
		cay = ay;
   103e6:	4bf1      	ldr	r3, [pc, #964]	; (107ac <CorrectIMUvalues+0x420>)
   103e8:	2200      	movs	r2, #0
   103ea:	5e9a      	ldrsh	r2, [r3, r2]
   103ec:	4bf0      	ldr	r3, [pc, #960]	; (107b0 <CorrectIMUvalues+0x424>)
   103ee:	801a      	strh	r2, [r3, #0]
		cgx = gx;
   103f0:	4bf0      	ldr	r3, [pc, #960]	; (107b4 <CorrectIMUvalues+0x428>)
   103f2:	2200      	movs	r2, #0
   103f4:	5e9a      	ldrsh	r2, [r3, r2]
   103f6:	4bf0      	ldr	r3, [pc, #960]	; (107b8 <CorrectIMUvalues+0x42c>)
   103f8:	801a      	strh	r2, [r3, #0]
		cgy = gy;
   103fa:	4bf0      	ldr	r3, [pc, #960]	; (107bc <CorrectIMUvalues+0x430>)
   103fc:	2200      	movs	r2, #0
   103fe:	5e9a      	ldrsh	r2, [r3, r2]
   10400:	4bef      	ldr	r3, [pc, #956]	; (107c0 <CorrectIMUvalues+0x434>)
   10402:	801a      	strh	r2, [r3, #0]
		cmx = mx;
   10404:	4bef      	ldr	r3, [pc, #956]	; (107c4 <CorrectIMUvalues+0x438>)
   10406:	2200      	movs	r2, #0
   10408:	5e9a      	ldrsh	r2, [r3, r2]
   1040a:	4bef      	ldr	r3, [pc, #956]	; (107c8 <CorrectIMUvalues+0x43c>)
   1040c:	801a      	strh	r2, [r3, #0]
		cmy = my;
   1040e:	4bef      	ldr	r3, [pc, #956]	; (107cc <CorrectIMUvalues+0x440>)
   10410:	2200      	movs	r2, #0
   10412:	5e9a      	ldrsh	r2, [r3, r2]
   10414:	4bee      	ldr	r3, [pc, #952]	; (107d0 <CorrectIMUvalues+0x444>)
   10416:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
			cmx = mz;
			cmy = mx;
		}
	}
}
   10418:	f000 fd5a 	bl	10ed0 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_UP){ // Connectors Up
   1041c:	1dfb      	adds	r3, r7, #7
   1041e:	781b      	ldrb	r3, [r3, #0]
   10420:	2b01      	cmp	r3, #1
   10422:	d000      	beq.n	10426 <CorrectIMUvalues+0x9a>
   10424:	e0d0      	b.n	105c8 <CorrectIMUvalues+0x23c>
		caz = az;
   10426:	4bd9      	ldr	r3, [pc, #868]	; (1078c <CorrectIMUvalues+0x400>)
   10428:	2200      	movs	r2, #0
   1042a:	5e9a      	ldrsh	r2, [r3, r2]
   1042c:	4bd8      	ldr	r3, [pc, #864]	; (10790 <CorrectIMUvalues+0x404>)
   1042e:	801a      	strh	r2, [r3, #0]
		cgz = gz;
   10430:	4bd8      	ldr	r3, [pc, #864]	; (10794 <CorrectIMUvalues+0x408>)
   10432:	2200      	movs	r2, #0
   10434:	5e9a      	ldrsh	r2, [r3, r2]
   10436:	4bd8      	ldr	r3, [pc, #864]	; (10798 <CorrectIMUvalues+0x40c>)
   10438:	801a      	strh	r2, [r3, #0]
		cmz = mz;
   1043a:	4bd8      	ldr	r3, [pc, #864]	; (1079c <CorrectIMUvalues+0x410>)
   1043c:	2200      	movs	r2, #0
   1043e:	5e9a      	ldrsh	r2, [r3, r2]
   10440:	4bd7      	ldr	r3, [pc, #860]	; (107a0 <CorrectIMUvalues+0x414>)
   10442:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
   10444:	1dbb      	adds	r3, r7, #6
   10446:	781b      	ldrb	r3, [r3, #0]
   10448:	2b03      	cmp	r3, #3
   1044a:	d12b      	bne.n	104a4 <CorrectIMUvalues+0x118>
			cax = -ay;
   1044c:	4bd7      	ldr	r3, [pc, #860]	; (107ac <CorrectIMUvalues+0x420>)
   1044e:	2200      	movs	r2, #0
   10450:	5e9b      	ldrsh	r3, [r3, r2]
   10452:	b29b      	uxth	r3, r3
   10454:	425b      	negs	r3, r3
   10456:	b29b      	uxth	r3, r3
   10458:	b21a      	sxth	r2, r3
   1045a:	4bd3      	ldr	r3, [pc, #844]	; (107a8 <CorrectIMUvalues+0x41c>)
   1045c:	801a      	strh	r2, [r3, #0]
			cay = ax;
   1045e:	4bd1      	ldr	r3, [pc, #836]	; (107a4 <CorrectIMUvalues+0x418>)
   10460:	2200      	movs	r2, #0
   10462:	5e9a      	ldrsh	r2, [r3, r2]
   10464:	4bd2      	ldr	r3, [pc, #840]	; (107b0 <CorrectIMUvalues+0x424>)
   10466:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
   10468:	4bd4      	ldr	r3, [pc, #848]	; (107bc <CorrectIMUvalues+0x430>)
   1046a:	2200      	movs	r2, #0
   1046c:	5e9b      	ldrsh	r3, [r3, r2]
   1046e:	b29b      	uxth	r3, r3
   10470:	425b      	negs	r3, r3
   10472:	b29b      	uxth	r3, r3
   10474:	b21a      	sxth	r2, r3
   10476:	4bd0      	ldr	r3, [pc, #832]	; (107b8 <CorrectIMUvalues+0x42c>)
   10478:	801a      	strh	r2, [r3, #0]
			cgy = gx;
   1047a:	4bce      	ldr	r3, [pc, #824]	; (107b4 <CorrectIMUvalues+0x428>)
   1047c:	2200      	movs	r2, #0
   1047e:	5e9a      	ldrsh	r2, [r3, r2]
   10480:	4bcf      	ldr	r3, [pc, #828]	; (107c0 <CorrectIMUvalues+0x434>)
   10482:	801a      	strh	r2, [r3, #0]
			cmx = my;
   10484:	4bd1      	ldr	r3, [pc, #836]	; (107cc <CorrectIMUvalues+0x440>)
   10486:	2200      	movs	r2, #0
   10488:	5e9a      	ldrsh	r2, [r3, r2]
   1048a:	4bcf      	ldr	r3, [pc, #828]	; (107c8 <CorrectIMUvalues+0x43c>)
   1048c:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
   1048e:	4bcd      	ldr	r3, [pc, #820]	; (107c4 <CorrectIMUvalues+0x438>)
   10490:	2200      	movs	r2, #0
   10492:	5e9b      	ldrsh	r3, [r3, r2]
   10494:	b29b      	uxth	r3, r3
   10496:	425b      	negs	r3, r3
   10498:	b29b      	uxth	r3, r3
   1049a:	b21a      	sxth	r2, r3
   1049c:	4bcc      	ldr	r3, [pc, #816]	; (107d0 <CorrectIMUvalues+0x444>)
   1049e:	801a      	strh	r2, [r3, #0]
}
   104a0:	f000 fd16 	bl	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
   104a4:	1dbb      	adds	r3, r7, #6
   104a6:	781b      	ldrb	r3, [r3, #0]
   104a8:	2b04      	cmp	r3, #4
   104aa:	d12b      	bne.n	10504 <CorrectIMUvalues+0x178>
			cax = ay;
   104ac:	4bbf      	ldr	r3, [pc, #764]	; (107ac <CorrectIMUvalues+0x420>)
   104ae:	2200      	movs	r2, #0
   104b0:	5e9a      	ldrsh	r2, [r3, r2]
   104b2:	4bbd      	ldr	r3, [pc, #756]	; (107a8 <CorrectIMUvalues+0x41c>)
   104b4:	801a      	strh	r2, [r3, #0]
			cay = -ax;
   104b6:	4bbb      	ldr	r3, [pc, #748]	; (107a4 <CorrectIMUvalues+0x418>)
   104b8:	2200      	movs	r2, #0
   104ba:	5e9b      	ldrsh	r3, [r3, r2]
   104bc:	b29b      	uxth	r3, r3
   104be:	425b      	negs	r3, r3
   104c0:	b29b      	uxth	r3, r3
   104c2:	b21a      	sxth	r2, r3
   104c4:	4bba      	ldr	r3, [pc, #744]	; (107b0 <CorrectIMUvalues+0x424>)
   104c6:	801a      	strh	r2, [r3, #0]
			cgx = gy;
   104c8:	4bbc      	ldr	r3, [pc, #752]	; (107bc <CorrectIMUvalues+0x430>)
   104ca:	2200      	movs	r2, #0
   104cc:	5e9a      	ldrsh	r2, [r3, r2]
   104ce:	4bba      	ldr	r3, [pc, #744]	; (107b8 <CorrectIMUvalues+0x42c>)
   104d0:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
   104d2:	4bb8      	ldr	r3, [pc, #736]	; (107b4 <CorrectIMUvalues+0x428>)
   104d4:	2200      	movs	r2, #0
   104d6:	5e9b      	ldrsh	r3, [r3, r2]
   104d8:	b29b      	uxth	r3, r3
   104da:	425b      	negs	r3, r3
   104dc:	b29b      	uxth	r3, r3
   104de:	b21a      	sxth	r2, r3
   104e0:	4bb7      	ldr	r3, [pc, #732]	; (107c0 <CorrectIMUvalues+0x434>)
   104e2:	801a      	strh	r2, [r3, #0]
			cmx = -my;
   104e4:	4bb9      	ldr	r3, [pc, #740]	; (107cc <CorrectIMUvalues+0x440>)
   104e6:	2200      	movs	r2, #0
   104e8:	5e9b      	ldrsh	r3, [r3, r2]
   104ea:	b29b      	uxth	r3, r3
   104ec:	425b      	negs	r3, r3
   104ee:	b29b      	uxth	r3, r3
   104f0:	b21a      	sxth	r2, r3
   104f2:	4bb5      	ldr	r3, [pc, #724]	; (107c8 <CorrectIMUvalues+0x43c>)
   104f4:	801a      	strh	r2, [r3, #0]
			cmy = mx;
   104f6:	4bb3      	ldr	r3, [pc, #716]	; (107c4 <CorrectIMUvalues+0x438>)
   104f8:	2200      	movs	r2, #0
   104fa:	5e9a      	ldrsh	r2, [r3, r2]
   104fc:	4bb4      	ldr	r3, [pc, #720]	; (107d0 <CorrectIMUvalues+0x444>)
   104fe:	801a      	strh	r2, [r3, #0]
}
   10500:	f000 fce6 	bl	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
   10504:	1dbb      	adds	r3, r7, #6
   10506:	781b      	ldrb	r3, [r3, #0]
   10508:	2b05      	cmp	r3, #5
   1050a:	d137      	bne.n	1057c <CorrectIMUvalues+0x1f0>
			cax = -ax;
   1050c:	4ba5      	ldr	r3, [pc, #660]	; (107a4 <CorrectIMUvalues+0x418>)
   1050e:	2200      	movs	r2, #0
   10510:	5e9b      	ldrsh	r3, [r3, r2]
   10512:	b29b      	uxth	r3, r3
   10514:	425b      	negs	r3, r3
   10516:	b29b      	uxth	r3, r3
   10518:	b21a      	sxth	r2, r3
   1051a:	4ba3      	ldr	r3, [pc, #652]	; (107a8 <CorrectIMUvalues+0x41c>)
   1051c:	801a      	strh	r2, [r3, #0]
			cay = -ay;
   1051e:	4ba3      	ldr	r3, [pc, #652]	; (107ac <CorrectIMUvalues+0x420>)
   10520:	2200      	movs	r2, #0
   10522:	5e9b      	ldrsh	r3, [r3, r2]
   10524:	b29b      	uxth	r3, r3
   10526:	425b      	negs	r3, r3
   10528:	b29b      	uxth	r3, r3
   1052a:	b21a      	sxth	r2, r3
   1052c:	4ba0      	ldr	r3, [pc, #640]	; (107b0 <CorrectIMUvalues+0x424>)
   1052e:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
   10530:	4ba0      	ldr	r3, [pc, #640]	; (107b4 <CorrectIMUvalues+0x428>)
   10532:	2200      	movs	r2, #0
   10534:	5e9b      	ldrsh	r3, [r3, r2]
   10536:	b29b      	uxth	r3, r3
   10538:	425b      	negs	r3, r3
   1053a:	b29b      	uxth	r3, r3
   1053c:	b21a      	sxth	r2, r3
   1053e:	4b9e      	ldr	r3, [pc, #632]	; (107b8 <CorrectIMUvalues+0x42c>)
   10540:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
   10542:	4b9e      	ldr	r3, [pc, #632]	; (107bc <CorrectIMUvalues+0x430>)
   10544:	2200      	movs	r2, #0
   10546:	5e9b      	ldrsh	r3, [r3, r2]
   10548:	b29b      	uxth	r3, r3
   1054a:	425b      	negs	r3, r3
   1054c:	b29b      	uxth	r3, r3
   1054e:	b21a      	sxth	r2, r3
   10550:	4b9b      	ldr	r3, [pc, #620]	; (107c0 <CorrectIMUvalues+0x434>)
   10552:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
   10554:	4b9b      	ldr	r3, [pc, #620]	; (107c4 <CorrectIMUvalues+0x438>)
   10556:	2200      	movs	r2, #0
   10558:	5e9b      	ldrsh	r3, [r3, r2]
   1055a:	b29b      	uxth	r3, r3
   1055c:	425b      	negs	r3, r3
   1055e:	b29b      	uxth	r3, r3
   10560:	b21a      	sxth	r2, r3
   10562:	4b99      	ldr	r3, [pc, #612]	; (107c8 <CorrectIMUvalues+0x43c>)
   10564:	801a      	strh	r2, [r3, #0]
			cmy = -my;
   10566:	4b99      	ldr	r3, [pc, #612]	; (107cc <CorrectIMUvalues+0x440>)
   10568:	2200      	movs	r2, #0
   1056a:	5e9b      	ldrsh	r3, [r3, r2]
   1056c:	b29b      	uxth	r3, r3
   1056e:	425b      	negs	r3, r3
   10570:	b29b      	uxth	r3, r3
   10572:	b21a      	sxth	r2, r3
   10574:	4b96      	ldr	r3, [pc, #600]	; (107d0 <CorrectIMUvalues+0x444>)
   10576:	801a      	strh	r2, [r3, #0]
}
   10578:	f000 fcaa 	bl	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
   1057c:	1dbb      	adds	r3, r7, #6
   1057e:	781b      	ldrb	r3, [r3, #0]
   10580:	2b06      	cmp	r3, #6
   10582:	d001      	beq.n	10588 <CorrectIMUvalues+0x1fc>
   10584:	f000 fca4 	bl	10ed0 <CorrectIMUvalues+0xb44>
			cax = ax;
   10588:	4b86      	ldr	r3, [pc, #536]	; (107a4 <CorrectIMUvalues+0x418>)
   1058a:	2200      	movs	r2, #0
   1058c:	5e9a      	ldrsh	r2, [r3, r2]
   1058e:	4b86      	ldr	r3, [pc, #536]	; (107a8 <CorrectIMUvalues+0x41c>)
   10590:	801a      	strh	r2, [r3, #0]
			cay = ay;
   10592:	4b86      	ldr	r3, [pc, #536]	; (107ac <CorrectIMUvalues+0x420>)
   10594:	2200      	movs	r2, #0
   10596:	5e9a      	ldrsh	r2, [r3, r2]
   10598:	4b85      	ldr	r3, [pc, #532]	; (107b0 <CorrectIMUvalues+0x424>)
   1059a:	801a      	strh	r2, [r3, #0]
			cgx = gx;
   1059c:	4b85      	ldr	r3, [pc, #532]	; (107b4 <CorrectIMUvalues+0x428>)
   1059e:	2200      	movs	r2, #0
   105a0:	5e9a      	ldrsh	r2, [r3, r2]
   105a2:	4b85      	ldr	r3, [pc, #532]	; (107b8 <CorrectIMUvalues+0x42c>)
   105a4:	801a      	strh	r2, [r3, #0]
			cgy = gy;
   105a6:	4b85      	ldr	r3, [pc, #532]	; (107bc <CorrectIMUvalues+0x430>)
   105a8:	2200      	movs	r2, #0
   105aa:	5e9a      	ldrsh	r2, [r3, r2]
   105ac:	4b84      	ldr	r3, [pc, #528]	; (107c0 <CorrectIMUvalues+0x434>)
   105ae:	801a      	strh	r2, [r3, #0]
			cmx = mx;
   105b0:	4b84      	ldr	r3, [pc, #528]	; (107c4 <CorrectIMUvalues+0x438>)
   105b2:	2200      	movs	r2, #0
   105b4:	5e9a      	ldrsh	r2, [r3, r2]
   105b6:	4b84      	ldr	r3, [pc, #528]	; (107c8 <CorrectIMUvalues+0x43c>)
   105b8:	801a      	strh	r2, [r3, #0]
			cmy = my;
   105ba:	4b84      	ldr	r3, [pc, #528]	; (107cc <CorrectIMUvalues+0x440>)
   105bc:	2200      	movs	r2, #0
   105be:	5e9a      	ldrsh	r2, [r3, r2]
   105c0:	4b83      	ldr	r3, [pc, #524]	; (107d0 <CorrectIMUvalues+0x444>)
   105c2:	801a      	strh	r2, [r3, #0]
}
   105c4:	f000 fc84 	bl	10ed0 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_DOWN){ // Connectors Down
   105c8:	1dfb      	adds	r3, r7, #7
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	2b02      	cmp	r3, #2
   105ce:	d000      	beq.n	105d2 <CorrectIMUvalues+0x246>
   105d0:	e100      	b.n	107d4 <CorrectIMUvalues+0x448>
		caz = -az;
   105d2:	4b6e      	ldr	r3, [pc, #440]	; (1078c <CorrectIMUvalues+0x400>)
   105d4:	2200      	movs	r2, #0
   105d6:	5e9b      	ldrsh	r3, [r3, r2]
   105d8:	b29b      	uxth	r3, r3
   105da:	425b      	negs	r3, r3
   105dc:	b29b      	uxth	r3, r3
   105de:	b21a      	sxth	r2, r3
   105e0:	4b6b      	ldr	r3, [pc, #428]	; (10790 <CorrectIMUvalues+0x404>)
   105e2:	801a      	strh	r2, [r3, #0]
		cgz = -gz;
   105e4:	4b6b      	ldr	r3, [pc, #428]	; (10794 <CorrectIMUvalues+0x408>)
   105e6:	2200      	movs	r2, #0
   105e8:	5e9b      	ldrsh	r3, [r3, r2]
   105ea:	b29b      	uxth	r3, r3
   105ec:	425b      	negs	r3, r3
   105ee:	b29b      	uxth	r3, r3
   105f0:	b21a      	sxth	r2, r3
   105f2:	4b69      	ldr	r3, [pc, #420]	; (10798 <CorrectIMUvalues+0x40c>)
   105f4:	801a      	strh	r2, [r3, #0]
		cmz = -mz;
   105f6:	4b69      	ldr	r3, [pc, #420]	; (1079c <CorrectIMUvalues+0x410>)
   105f8:	2200      	movs	r2, #0
   105fa:	5e9b      	ldrsh	r3, [r3, r2]
   105fc:	b29b      	uxth	r3, r3
   105fe:	425b      	negs	r3, r3
   10600:	b29b      	uxth	r3, r3
   10602:	b21a      	sxth	r2, r3
   10604:	4b66      	ldr	r3, [pc, #408]	; (107a0 <CorrectIMUvalues+0x414>)
   10606:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
   10608:	1dbb      	adds	r3, r7, #6
   1060a:	781b      	ldrb	r3, [r3, #0]
   1060c:	2b03      	cmp	r3, #3
   1060e:	d127      	bne.n	10660 <CorrectIMUvalues+0x2d4>
			cax = ay;
   10610:	4b66      	ldr	r3, [pc, #408]	; (107ac <CorrectIMUvalues+0x420>)
   10612:	2200      	movs	r2, #0
   10614:	5e9a      	ldrsh	r2, [r3, r2]
   10616:	4b64      	ldr	r3, [pc, #400]	; (107a8 <CorrectIMUvalues+0x41c>)
   10618:	801a      	strh	r2, [r3, #0]
			cay = ax;
   1061a:	4b62      	ldr	r3, [pc, #392]	; (107a4 <CorrectIMUvalues+0x418>)
   1061c:	2200      	movs	r2, #0
   1061e:	5e9a      	ldrsh	r2, [r3, r2]
   10620:	4b63      	ldr	r3, [pc, #396]	; (107b0 <CorrectIMUvalues+0x424>)
   10622:	801a      	strh	r2, [r3, #0]
			cgx = gy;
   10624:	4b65      	ldr	r3, [pc, #404]	; (107bc <CorrectIMUvalues+0x430>)
   10626:	2200      	movs	r2, #0
   10628:	5e9a      	ldrsh	r2, [r3, r2]
   1062a:	4b63      	ldr	r3, [pc, #396]	; (107b8 <CorrectIMUvalues+0x42c>)
   1062c:	801a      	strh	r2, [r3, #0]
			cgy = gx;
   1062e:	4b61      	ldr	r3, [pc, #388]	; (107b4 <CorrectIMUvalues+0x428>)
   10630:	2200      	movs	r2, #0
   10632:	5e9a      	ldrsh	r2, [r3, r2]
   10634:	4b62      	ldr	r3, [pc, #392]	; (107c0 <CorrectIMUvalues+0x434>)
   10636:	801a      	strh	r2, [r3, #0]
			cmx = -my;
   10638:	4b64      	ldr	r3, [pc, #400]	; (107cc <CorrectIMUvalues+0x440>)
   1063a:	2200      	movs	r2, #0
   1063c:	5e9b      	ldrsh	r3, [r3, r2]
   1063e:	b29b      	uxth	r3, r3
   10640:	425b      	negs	r3, r3
   10642:	b29b      	uxth	r3, r3
   10644:	b21a      	sxth	r2, r3
   10646:	4b60      	ldr	r3, [pc, #384]	; (107c8 <CorrectIMUvalues+0x43c>)
   10648:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
   1064a:	4b5e      	ldr	r3, [pc, #376]	; (107c4 <CorrectIMUvalues+0x438>)
   1064c:	2200      	movs	r2, #0
   1064e:	5e9b      	ldrsh	r3, [r3, r2]
   10650:	b29b      	uxth	r3, r3
   10652:	425b      	negs	r3, r3
   10654:	b29b      	uxth	r3, r3
   10656:	b21a      	sxth	r2, r3
   10658:	4b5d      	ldr	r3, [pc, #372]	; (107d0 <CorrectIMUvalues+0x444>)
   1065a:	801a      	strh	r2, [r3, #0]
}
   1065c:	f000 fc38 	bl	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
   10660:	1dbb      	adds	r3, r7, #6
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	2b04      	cmp	r3, #4
   10666:	d12f      	bne.n	106c8 <CorrectIMUvalues+0x33c>
			cax = -ay;
   10668:	4b50      	ldr	r3, [pc, #320]	; (107ac <CorrectIMUvalues+0x420>)
   1066a:	2200      	movs	r2, #0
   1066c:	5e9b      	ldrsh	r3, [r3, r2]
   1066e:	b29b      	uxth	r3, r3
   10670:	425b      	negs	r3, r3
   10672:	b29b      	uxth	r3, r3
   10674:	b21a      	sxth	r2, r3
   10676:	4b4c      	ldr	r3, [pc, #304]	; (107a8 <CorrectIMUvalues+0x41c>)
   10678:	801a      	strh	r2, [r3, #0]
			cay = -ax;
   1067a:	4b4a      	ldr	r3, [pc, #296]	; (107a4 <CorrectIMUvalues+0x418>)
   1067c:	2200      	movs	r2, #0
   1067e:	5e9b      	ldrsh	r3, [r3, r2]
   10680:	b29b      	uxth	r3, r3
   10682:	425b      	negs	r3, r3
   10684:	b29b      	uxth	r3, r3
   10686:	b21a      	sxth	r2, r3
   10688:	4b49      	ldr	r3, [pc, #292]	; (107b0 <CorrectIMUvalues+0x424>)
   1068a:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
   1068c:	4b4b      	ldr	r3, [pc, #300]	; (107bc <CorrectIMUvalues+0x430>)
   1068e:	2200      	movs	r2, #0
   10690:	5e9b      	ldrsh	r3, [r3, r2]
   10692:	b29b      	uxth	r3, r3
   10694:	425b      	negs	r3, r3
   10696:	b29b      	uxth	r3, r3
   10698:	b21a      	sxth	r2, r3
   1069a:	4b47      	ldr	r3, [pc, #284]	; (107b8 <CorrectIMUvalues+0x42c>)
   1069c:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
   1069e:	4b45      	ldr	r3, [pc, #276]	; (107b4 <CorrectIMUvalues+0x428>)
   106a0:	2200      	movs	r2, #0
   106a2:	5e9b      	ldrsh	r3, [r3, r2]
   106a4:	b29b      	uxth	r3, r3
   106a6:	425b      	negs	r3, r3
   106a8:	b29b      	uxth	r3, r3
   106aa:	b21a      	sxth	r2, r3
   106ac:	4b44      	ldr	r3, [pc, #272]	; (107c0 <CorrectIMUvalues+0x434>)
   106ae:	801a      	strh	r2, [r3, #0]
			cmx = my;
   106b0:	4b46      	ldr	r3, [pc, #280]	; (107cc <CorrectIMUvalues+0x440>)
   106b2:	2200      	movs	r2, #0
   106b4:	5e9a      	ldrsh	r2, [r3, r2]
   106b6:	4b44      	ldr	r3, [pc, #272]	; (107c8 <CorrectIMUvalues+0x43c>)
   106b8:	801a      	strh	r2, [r3, #0]
			cmy = mx;
   106ba:	4b42      	ldr	r3, [pc, #264]	; (107c4 <CorrectIMUvalues+0x438>)
   106bc:	2200      	movs	r2, #0
   106be:	5e9a      	ldrsh	r2, [r3, r2]
   106c0:	4b43      	ldr	r3, [pc, #268]	; (107d0 <CorrectIMUvalues+0x444>)
   106c2:	801a      	strh	r2, [r3, #0]
}
   106c4:	f000 fc04 	bl	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
   106c8:	1dbb      	adds	r3, r7, #6
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	2b05      	cmp	r3, #5
   106ce:	d12b      	bne.n	10728 <CorrectIMUvalues+0x39c>
			cax = ax;
   106d0:	4b34      	ldr	r3, [pc, #208]	; (107a4 <CorrectIMUvalues+0x418>)
   106d2:	2200      	movs	r2, #0
   106d4:	5e9a      	ldrsh	r2, [r3, r2]
   106d6:	4b34      	ldr	r3, [pc, #208]	; (107a8 <CorrectIMUvalues+0x41c>)
   106d8:	801a      	strh	r2, [r3, #0]
			cay = -ay;
   106da:	4b34      	ldr	r3, [pc, #208]	; (107ac <CorrectIMUvalues+0x420>)
   106dc:	2200      	movs	r2, #0
   106de:	5e9b      	ldrsh	r3, [r3, r2]
   106e0:	b29b      	uxth	r3, r3
   106e2:	425b      	negs	r3, r3
   106e4:	b29b      	uxth	r3, r3
   106e6:	b21a      	sxth	r2, r3
   106e8:	4b31      	ldr	r3, [pc, #196]	; (107b0 <CorrectIMUvalues+0x424>)
   106ea:	801a      	strh	r2, [r3, #0]
			cgx = gx;
   106ec:	4b31      	ldr	r3, [pc, #196]	; (107b4 <CorrectIMUvalues+0x428>)
   106ee:	2200      	movs	r2, #0
   106f0:	5e9a      	ldrsh	r2, [r3, r2]
   106f2:	4b31      	ldr	r3, [pc, #196]	; (107b8 <CorrectIMUvalues+0x42c>)
   106f4:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
   106f6:	4b31      	ldr	r3, [pc, #196]	; (107bc <CorrectIMUvalues+0x430>)
   106f8:	2200      	movs	r2, #0
   106fa:	5e9b      	ldrsh	r3, [r3, r2]
   106fc:	b29b      	uxth	r3, r3
   106fe:	425b      	negs	r3, r3
   10700:	b29b      	uxth	r3, r3
   10702:	b21a      	sxth	r2, r3
   10704:	4b2e      	ldr	r3, [pc, #184]	; (107c0 <CorrectIMUvalues+0x434>)
   10706:	801a      	strh	r2, [r3, #0]
			cmx = mx;
   10708:	4b2e      	ldr	r3, [pc, #184]	; (107c4 <CorrectIMUvalues+0x438>)
   1070a:	2200      	movs	r2, #0
   1070c:	5e9a      	ldrsh	r2, [r3, r2]
   1070e:	4b2e      	ldr	r3, [pc, #184]	; (107c8 <CorrectIMUvalues+0x43c>)
   10710:	801a      	strh	r2, [r3, #0]
			cmy = -my;
   10712:	4b2e      	ldr	r3, [pc, #184]	; (107cc <CorrectIMUvalues+0x440>)
   10714:	2200      	movs	r2, #0
   10716:	5e9b      	ldrsh	r3, [r3, r2]
   10718:	b29b      	uxth	r3, r3
   1071a:	425b      	negs	r3, r3
   1071c:	b29b      	uxth	r3, r3
   1071e:	b21a      	sxth	r2, r3
   10720:	4b2b      	ldr	r3, [pc, #172]	; (107d0 <CorrectIMUvalues+0x444>)
   10722:	801a      	strh	r2, [r3, #0]
}
   10724:	f000 fbd4 	bl	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
   10728:	1dbb      	adds	r3, r7, #6
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	2b06      	cmp	r3, #6
   1072e:	d001      	beq.n	10734 <CorrectIMUvalues+0x3a8>
   10730:	f000 fbce 	bl	10ed0 <CorrectIMUvalues+0xb44>
			cax = -ax;
   10734:	4b1b      	ldr	r3, [pc, #108]	; (107a4 <CorrectIMUvalues+0x418>)
   10736:	2200      	movs	r2, #0
   10738:	5e9b      	ldrsh	r3, [r3, r2]
   1073a:	b29b      	uxth	r3, r3
   1073c:	425b      	negs	r3, r3
   1073e:	b29b      	uxth	r3, r3
   10740:	b21a      	sxth	r2, r3
   10742:	4b19      	ldr	r3, [pc, #100]	; (107a8 <CorrectIMUvalues+0x41c>)
   10744:	801a      	strh	r2, [r3, #0]
			cay = ay;
   10746:	4b19      	ldr	r3, [pc, #100]	; (107ac <CorrectIMUvalues+0x420>)
   10748:	2200      	movs	r2, #0
   1074a:	5e9a      	ldrsh	r2, [r3, r2]
   1074c:	4b18      	ldr	r3, [pc, #96]	; (107b0 <CorrectIMUvalues+0x424>)
   1074e:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
   10750:	4b18      	ldr	r3, [pc, #96]	; (107b4 <CorrectIMUvalues+0x428>)
   10752:	2200      	movs	r2, #0
   10754:	5e9b      	ldrsh	r3, [r3, r2]
   10756:	b29b      	uxth	r3, r3
   10758:	425b      	negs	r3, r3
   1075a:	b29b      	uxth	r3, r3
   1075c:	b21a      	sxth	r2, r3
   1075e:	4b16      	ldr	r3, [pc, #88]	; (107b8 <CorrectIMUvalues+0x42c>)
   10760:	801a      	strh	r2, [r3, #0]
			cgy = gy;
   10762:	4b16      	ldr	r3, [pc, #88]	; (107bc <CorrectIMUvalues+0x430>)
   10764:	2200      	movs	r2, #0
   10766:	5e9a      	ldrsh	r2, [r3, r2]
   10768:	4b15      	ldr	r3, [pc, #84]	; (107c0 <CorrectIMUvalues+0x434>)
   1076a:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
   1076c:	4b15      	ldr	r3, [pc, #84]	; (107c4 <CorrectIMUvalues+0x438>)
   1076e:	2200      	movs	r2, #0
   10770:	5e9b      	ldrsh	r3, [r3, r2]
   10772:	b29b      	uxth	r3, r3
   10774:	425b      	negs	r3, r3
   10776:	b29b      	uxth	r3, r3
   10778:	b21a      	sxth	r2, r3
   1077a:	4b13      	ldr	r3, [pc, #76]	; (107c8 <CorrectIMUvalues+0x43c>)
   1077c:	801a      	strh	r2, [r3, #0]
			cmy = my;
   1077e:	4b13      	ldr	r3, [pc, #76]	; (107cc <CorrectIMUvalues+0x440>)
   10780:	2200      	movs	r2, #0
   10782:	5e9a      	ldrsh	r2, [r3, r2]
   10784:	4b12      	ldr	r3, [pc, #72]	; (107d0 <CorrectIMUvalues+0x444>)
   10786:	801a      	strh	r2, [r3, #0]
}
   10788:	e3a2      	b.n	10ed0 <CorrectIMUvalues+0xb44>
   1078a:	46c0      	nop			; (mov r8, r8)
   1078c:	20000322 	.word	0x20000322
   10790:	20000334 	.word	0x20000334
   10794:	2000031c 	.word	0x2000031c
   10798:	2000032e 	.word	0x2000032e
   1079c:	20000328 	.word	0x20000328
   107a0:	2000033a 	.word	0x2000033a
   107a4:	2000031e 	.word	0x2000031e
   107a8:	20000330 	.word	0x20000330
   107ac:	20000320 	.word	0x20000320
   107b0:	20000332 	.word	0x20000332
   107b4:	20000318 	.word	0x20000318
   107b8:	2000032a 	.word	0x2000032a
   107bc:	2000031a 	.word	0x2000031a
   107c0:	2000032c 	.word	0x2000032c
   107c4:	20000324 	.word	0x20000324
   107c8:	20000336 	.word	0x20000336
   107cc:	20000326 	.word	0x20000326
   107d0:	20000338 	.word	0x20000338
	} else if(connector_orient == ORIENT_LEFT){ // Connectors Left
   107d4:	1dfb      	adds	r3, r7, #7
   107d6:	781b      	ldrb	r3, [r3, #0]
   107d8:	2b03      	cmp	r3, #3
   107da:	d000      	beq.n	107de <CorrectIMUvalues+0x452>
   107dc:	e0cf      	b.n	1097e <CorrectIMUvalues+0x5f2>
		caz = ax;
   107de:	4bd4      	ldr	r3, [pc, #848]	; (10b30 <CorrectIMUvalues+0x7a4>)
   107e0:	2200      	movs	r2, #0
   107e2:	5e9a      	ldrsh	r2, [r3, r2]
   107e4:	4bd3      	ldr	r3, [pc, #844]	; (10b34 <CorrectIMUvalues+0x7a8>)
   107e6:	801a      	strh	r2, [r3, #0]
		cgz = gx;
   107e8:	4bd3      	ldr	r3, [pc, #844]	; (10b38 <CorrectIMUvalues+0x7ac>)
   107ea:	2200      	movs	r2, #0
   107ec:	5e9a      	ldrsh	r2, [r3, r2]
   107ee:	4bd3      	ldr	r3, [pc, #844]	; (10b3c <CorrectIMUvalues+0x7b0>)
   107f0:	801a      	strh	r2, [r3, #0]
		cmz = -mx;
   107f2:	4bd3      	ldr	r3, [pc, #844]	; (10b40 <CorrectIMUvalues+0x7b4>)
   107f4:	2200      	movs	r2, #0
   107f6:	5e9b      	ldrsh	r3, [r3, r2]
   107f8:	b29b      	uxth	r3, r3
   107fa:	425b      	negs	r3, r3
   107fc:	b29b      	uxth	r3, r3
   107fe:	b21a      	sxth	r2, r3
   10800:	4bd0      	ldr	r3, [pc, #832]	; (10b44 <CorrectIMUvalues+0x7b8>)
   10802:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
   10804:	1dbb      	adds	r3, r7, #6
   10806:	781b      	ldrb	r3, [r3, #0]
   10808:	2b01      	cmp	r3, #1
   1080a:	d122      	bne.n	10852 <CorrectIMUvalues+0x4c6>
			cax = ay;
   1080c:	4bce      	ldr	r3, [pc, #824]	; (10b48 <CorrectIMUvalues+0x7bc>)
   1080e:	2200      	movs	r2, #0
   10810:	5e9a      	ldrsh	r2, [r3, r2]
   10812:	4bce      	ldr	r3, [pc, #824]	; (10b4c <CorrectIMUvalues+0x7c0>)
   10814:	801a      	strh	r2, [r3, #0]
			cay = az;
   10816:	4bce      	ldr	r3, [pc, #824]	; (10b50 <CorrectIMUvalues+0x7c4>)
   10818:	2200      	movs	r2, #0
   1081a:	5e9a      	ldrsh	r2, [r3, r2]
   1081c:	4bcd      	ldr	r3, [pc, #820]	; (10b54 <CorrectIMUvalues+0x7c8>)
   1081e:	801a      	strh	r2, [r3, #0]
			cgx = gy;
   10820:	4bcd      	ldr	r3, [pc, #820]	; (10b58 <CorrectIMUvalues+0x7cc>)
   10822:	2200      	movs	r2, #0
   10824:	5e9a      	ldrsh	r2, [r3, r2]
   10826:	4bcd      	ldr	r3, [pc, #820]	; (10b5c <CorrectIMUvalues+0x7d0>)
   10828:	801a      	strh	r2, [r3, #0]
			cgy = gz;
   1082a:	4bcd      	ldr	r3, [pc, #820]	; (10b60 <CorrectIMUvalues+0x7d4>)
   1082c:	2200      	movs	r2, #0
   1082e:	5e9a      	ldrsh	r2, [r3, r2]
   10830:	4bcc      	ldr	r3, [pc, #816]	; (10b64 <CorrectIMUvalues+0x7d8>)
   10832:	801a      	strh	r2, [r3, #0]
			cmx = -my;
   10834:	4bcc      	ldr	r3, [pc, #816]	; (10b68 <CorrectIMUvalues+0x7dc>)
   10836:	2200      	movs	r2, #0
   10838:	5e9b      	ldrsh	r3, [r3, r2]
   1083a:	b29b      	uxth	r3, r3
   1083c:	425b      	negs	r3, r3
   1083e:	b29b      	uxth	r3, r3
   10840:	b21a      	sxth	r2, r3
   10842:	4bca      	ldr	r3, [pc, #808]	; (10b6c <CorrectIMUvalues+0x7e0>)
   10844:	801a      	strh	r2, [r3, #0]
			cmy = mz;
   10846:	4bca      	ldr	r3, [pc, #808]	; (10b70 <CorrectIMUvalues+0x7e4>)
   10848:	2200      	movs	r2, #0
   1084a:	5e9a      	ldrsh	r2, [r3, r2]
   1084c:	4bc9      	ldr	r3, [pc, #804]	; (10b74 <CorrectIMUvalues+0x7e8>)
   1084e:	801a      	strh	r2, [r3, #0]
}
   10850:	e33e      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
   10852:	1dbb      	adds	r3, r7, #6
   10854:	781b      	ldrb	r3, [r3, #0]
   10856:	2b02      	cmp	r3, #2
   10858:	d132      	bne.n	108c0 <CorrectIMUvalues+0x534>
			cax = -ay;
   1085a:	4bbb      	ldr	r3, [pc, #748]	; (10b48 <CorrectIMUvalues+0x7bc>)
   1085c:	2200      	movs	r2, #0
   1085e:	5e9b      	ldrsh	r3, [r3, r2]
   10860:	b29b      	uxth	r3, r3
   10862:	425b      	negs	r3, r3
   10864:	b29b      	uxth	r3, r3
   10866:	b21a      	sxth	r2, r3
   10868:	4bb8      	ldr	r3, [pc, #736]	; (10b4c <CorrectIMUvalues+0x7c0>)
   1086a:	801a      	strh	r2, [r3, #0]
			cay = -az;
   1086c:	4bb8      	ldr	r3, [pc, #736]	; (10b50 <CorrectIMUvalues+0x7c4>)
   1086e:	2200      	movs	r2, #0
   10870:	5e9b      	ldrsh	r3, [r3, r2]
   10872:	b29b      	uxth	r3, r3
   10874:	425b      	negs	r3, r3
   10876:	b29b      	uxth	r3, r3
   10878:	b21a      	sxth	r2, r3
   1087a:	4bb6      	ldr	r3, [pc, #728]	; (10b54 <CorrectIMUvalues+0x7c8>)
   1087c:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
   1087e:	4bb6      	ldr	r3, [pc, #728]	; (10b58 <CorrectIMUvalues+0x7cc>)
   10880:	2200      	movs	r2, #0
   10882:	5e9b      	ldrsh	r3, [r3, r2]
   10884:	b29b      	uxth	r3, r3
   10886:	425b      	negs	r3, r3
   10888:	b29b      	uxth	r3, r3
   1088a:	b21a      	sxth	r2, r3
   1088c:	4bb3      	ldr	r3, [pc, #716]	; (10b5c <CorrectIMUvalues+0x7d0>)
   1088e:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
   10890:	4bb3      	ldr	r3, [pc, #716]	; (10b60 <CorrectIMUvalues+0x7d4>)
   10892:	2200      	movs	r2, #0
   10894:	5e9b      	ldrsh	r3, [r3, r2]
   10896:	b29b      	uxth	r3, r3
   10898:	425b      	negs	r3, r3
   1089a:	b29b      	uxth	r3, r3
   1089c:	b21a      	sxth	r2, r3
   1089e:	4bb1      	ldr	r3, [pc, #708]	; (10b64 <CorrectIMUvalues+0x7d8>)
   108a0:	801a      	strh	r2, [r3, #0]
			cmx = my;
   108a2:	4bb1      	ldr	r3, [pc, #708]	; (10b68 <CorrectIMUvalues+0x7dc>)
   108a4:	2200      	movs	r2, #0
   108a6:	5e9a      	ldrsh	r2, [r3, r2]
   108a8:	4bb0      	ldr	r3, [pc, #704]	; (10b6c <CorrectIMUvalues+0x7e0>)
   108aa:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
   108ac:	4bb0      	ldr	r3, [pc, #704]	; (10b70 <CorrectIMUvalues+0x7e4>)
   108ae:	2200      	movs	r2, #0
   108b0:	5e9b      	ldrsh	r3, [r3, r2]
   108b2:	b29b      	uxth	r3, r3
   108b4:	425b      	negs	r3, r3
   108b6:	b29b      	uxth	r3, r3
   108b8:	b21a      	sxth	r2, r3
   108ba:	4bae      	ldr	r3, [pc, #696]	; (10b74 <CorrectIMUvalues+0x7e8>)
   108bc:	801a      	strh	r2, [r3, #0]
}
   108be:	e307      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
   108c0:	1dbb      	adds	r3, r7, #6
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	2b05      	cmp	r3, #5
   108c6:	d12e      	bne.n	10926 <CorrectIMUvalues+0x59a>
			cax = az;
   108c8:	4ba1      	ldr	r3, [pc, #644]	; (10b50 <CorrectIMUvalues+0x7c4>)
   108ca:	2200      	movs	r2, #0
   108cc:	5e9a      	ldrsh	r2, [r3, r2]
   108ce:	4b9f      	ldr	r3, [pc, #636]	; (10b4c <CorrectIMUvalues+0x7c0>)
   108d0:	801a      	strh	r2, [r3, #0]
			cay = -ay;
   108d2:	4b9d      	ldr	r3, [pc, #628]	; (10b48 <CorrectIMUvalues+0x7bc>)
   108d4:	2200      	movs	r2, #0
   108d6:	5e9b      	ldrsh	r3, [r3, r2]
   108d8:	b29b      	uxth	r3, r3
   108da:	425b      	negs	r3, r3
   108dc:	b29b      	uxth	r3, r3
   108de:	b21a      	sxth	r2, r3
   108e0:	4b9c      	ldr	r3, [pc, #624]	; (10b54 <CorrectIMUvalues+0x7c8>)
   108e2:	801a      	strh	r2, [r3, #0]
			cgx = gz;
   108e4:	4b9e      	ldr	r3, [pc, #632]	; (10b60 <CorrectIMUvalues+0x7d4>)
   108e6:	2200      	movs	r2, #0
   108e8:	5e9a      	ldrsh	r2, [r3, r2]
   108ea:	4b9c      	ldr	r3, [pc, #624]	; (10b5c <CorrectIMUvalues+0x7d0>)
   108ec:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
   108ee:	4b9a      	ldr	r3, [pc, #616]	; (10b58 <CorrectIMUvalues+0x7cc>)
   108f0:	2200      	movs	r2, #0
   108f2:	5e9b      	ldrsh	r3, [r3, r2]
   108f4:	b29b      	uxth	r3, r3
   108f6:	425b      	negs	r3, r3
   108f8:	b29b      	uxth	r3, r3
   108fa:	b21a      	sxth	r2, r3
   108fc:	4b99      	ldr	r3, [pc, #612]	; (10b64 <CorrectIMUvalues+0x7d8>)
   108fe:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
   10900:	4b9b      	ldr	r3, [pc, #620]	; (10b70 <CorrectIMUvalues+0x7e4>)
   10902:	2200      	movs	r2, #0
   10904:	5e9b      	ldrsh	r3, [r3, r2]
   10906:	b29b      	uxth	r3, r3
   10908:	425b      	negs	r3, r3
   1090a:	b29b      	uxth	r3, r3
   1090c:	b21a      	sxth	r2, r3
   1090e:	4b97      	ldr	r3, [pc, #604]	; (10b6c <CorrectIMUvalues+0x7e0>)
   10910:	801a      	strh	r2, [r3, #0]
			cmy = -my;
   10912:	4b95      	ldr	r3, [pc, #596]	; (10b68 <CorrectIMUvalues+0x7dc>)
   10914:	2200      	movs	r2, #0
   10916:	5e9b      	ldrsh	r3, [r3, r2]
   10918:	b29b      	uxth	r3, r3
   1091a:	425b      	negs	r3, r3
   1091c:	b29b      	uxth	r3, r3
   1091e:	b21a      	sxth	r2, r3
   10920:	4b94      	ldr	r3, [pc, #592]	; (10b74 <CorrectIMUvalues+0x7e8>)
   10922:	801a      	strh	r2, [r3, #0]
}
   10924:	e2d4      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
   10926:	1dbb      	adds	r3, r7, #6
   10928:	781b      	ldrb	r3, [r3, #0]
   1092a:	2b06      	cmp	r3, #6
   1092c:	d000      	beq.n	10930 <CorrectIMUvalues+0x5a4>
   1092e:	e2cf      	b.n	10ed0 <CorrectIMUvalues+0xb44>
			cax = -az;
   10930:	4b87      	ldr	r3, [pc, #540]	; (10b50 <CorrectIMUvalues+0x7c4>)
   10932:	2200      	movs	r2, #0
   10934:	5e9b      	ldrsh	r3, [r3, r2]
   10936:	b29b      	uxth	r3, r3
   10938:	425b      	negs	r3, r3
   1093a:	b29b      	uxth	r3, r3
   1093c:	b21a      	sxth	r2, r3
   1093e:	4b83      	ldr	r3, [pc, #524]	; (10b4c <CorrectIMUvalues+0x7c0>)
   10940:	801a      	strh	r2, [r3, #0]
			cay = ay;
   10942:	4b81      	ldr	r3, [pc, #516]	; (10b48 <CorrectIMUvalues+0x7bc>)
   10944:	2200      	movs	r2, #0
   10946:	5e9a      	ldrsh	r2, [r3, r2]
   10948:	4b82      	ldr	r3, [pc, #520]	; (10b54 <CorrectIMUvalues+0x7c8>)
   1094a:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
   1094c:	4b84      	ldr	r3, [pc, #528]	; (10b60 <CorrectIMUvalues+0x7d4>)
   1094e:	2200      	movs	r2, #0
   10950:	5e9b      	ldrsh	r3, [r3, r2]
   10952:	b29b      	uxth	r3, r3
   10954:	425b      	negs	r3, r3
   10956:	b29b      	uxth	r3, r3
   10958:	b21a      	sxth	r2, r3
   1095a:	4b80      	ldr	r3, [pc, #512]	; (10b5c <CorrectIMUvalues+0x7d0>)
   1095c:	801a      	strh	r2, [r3, #0]
			cgy = gy;
   1095e:	4b7e      	ldr	r3, [pc, #504]	; (10b58 <CorrectIMUvalues+0x7cc>)
   10960:	2200      	movs	r2, #0
   10962:	5e9a      	ldrsh	r2, [r3, r2]
   10964:	4b7f      	ldr	r3, [pc, #508]	; (10b64 <CorrectIMUvalues+0x7d8>)
   10966:	801a      	strh	r2, [r3, #0]
			cmx = mz;
   10968:	4b81      	ldr	r3, [pc, #516]	; (10b70 <CorrectIMUvalues+0x7e4>)
   1096a:	2200      	movs	r2, #0
   1096c:	5e9a      	ldrsh	r2, [r3, r2]
   1096e:	4b7f      	ldr	r3, [pc, #508]	; (10b6c <CorrectIMUvalues+0x7e0>)
   10970:	801a      	strh	r2, [r3, #0]
			cmy = my;
   10972:	4b7d      	ldr	r3, [pc, #500]	; (10b68 <CorrectIMUvalues+0x7dc>)
   10974:	2200      	movs	r2, #0
   10976:	5e9a      	ldrsh	r2, [r3, r2]
   10978:	4b7e      	ldr	r3, [pc, #504]	; (10b74 <CorrectIMUvalues+0x7e8>)
   1097a:	801a      	strh	r2, [r3, #0]
}
   1097c:	e2a8      	b.n	10ed0 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_RIGHT){ // Connectors Right
   1097e:	1dfb      	adds	r3, r7, #7
   10980:	781b      	ldrb	r3, [r3, #0]
   10982:	2b04      	cmp	r3, #4
   10984:	d000      	beq.n	10988 <CorrectIMUvalues+0x5fc>
   10986:	e0f7      	b.n	10b78 <CorrectIMUvalues+0x7ec>
		caz = -ax;
   10988:	4b69      	ldr	r3, [pc, #420]	; (10b30 <CorrectIMUvalues+0x7a4>)
   1098a:	2200      	movs	r2, #0
   1098c:	5e9b      	ldrsh	r3, [r3, r2]
   1098e:	b29b      	uxth	r3, r3
   10990:	425b      	negs	r3, r3
   10992:	b29b      	uxth	r3, r3
   10994:	b21a      	sxth	r2, r3
   10996:	4b67      	ldr	r3, [pc, #412]	; (10b34 <CorrectIMUvalues+0x7a8>)
   10998:	801a      	strh	r2, [r3, #0]
		cgz = -gx;
   1099a:	4b67      	ldr	r3, [pc, #412]	; (10b38 <CorrectIMUvalues+0x7ac>)
   1099c:	2200      	movs	r2, #0
   1099e:	5e9b      	ldrsh	r3, [r3, r2]
   109a0:	b29b      	uxth	r3, r3
   109a2:	425b      	negs	r3, r3
   109a4:	b29b      	uxth	r3, r3
   109a6:	b21a      	sxth	r2, r3
   109a8:	4b64      	ldr	r3, [pc, #400]	; (10b3c <CorrectIMUvalues+0x7b0>)
   109aa:	801a      	strh	r2, [r3, #0]
		cmz = mx;
   109ac:	4b64      	ldr	r3, [pc, #400]	; (10b40 <CorrectIMUvalues+0x7b4>)
   109ae:	2200      	movs	r2, #0
   109b0:	5e9a      	ldrsh	r2, [r3, r2]
   109b2:	4b64      	ldr	r3, [pc, #400]	; (10b44 <CorrectIMUvalues+0x7b8>)
   109b4:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
   109b6:	1dbb      	adds	r3, r7, #6
   109b8:	781b      	ldrb	r3, [r3, #0]
   109ba:	2b01      	cmp	r3, #1
   109bc:	d126      	bne.n	10a0c <CorrectIMUvalues+0x680>
			cax = -ay;
   109be:	4b62      	ldr	r3, [pc, #392]	; (10b48 <CorrectIMUvalues+0x7bc>)
   109c0:	2200      	movs	r2, #0
   109c2:	5e9b      	ldrsh	r3, [r3, r2]
   109c4:	b29b      	uxth	r3, r3
   109c6:	425b      	negs	r3, r3
   109c8:	b29b      	uxth	r3, r3
   109ca:	b21a      	sxth	r2, r3
   109cc:	4b5f      	ldr	r3, [pc, #380]	; (10b4c <CorrectIMUvalues+0x7c0>)
   109ce:	801a      	strh	r2, [r3, #0]
			cay = az;
   109d0:	4b5f      	ldr	r3, [pc, #380]	; (10b50 <CorrectIMUvalues+0x7c4>)
   109d2:	2200      	movs	r2, #0
   109d4:	5e9a      	ldrsh	r2, [r3, r2]
   109d6:	4b5f      	ldr	r3, [pc, #380]	; (10b54 <CorrectIMUvalues+0x7c8>)
   109d8:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
   109da:	4b5f      	ldr	r3, [pc, #380]	; (10b58 <CorrectIMUvalues+0x7cc>)
   109dc:	2200      	movs	r2, #0
   109de:	5e9b      	ldrsh	r3, [r3, r2]
   109e0:	b29b      	uxth	r3, r3
   109e2:	425b      	negs	r3, r3
   109e4:	b29b      	uxth	r3, r3
   109e6:	b21a      	sxth	r2, r3
   109e8:	4b5c      	ldr	r3, [pc, #368]	; (10b5c <CorrectIMUvalues+0x7d0>)
   109ea:	801a      	strh	r2, [r3, #0]
			cgy = gz;
   109ec:	4b5c      	ldr	r3, [pc, #368]	; (10b60 <CorrectIMUvalues+0x7d4>)
   109ee:	2200      	movs	r2, #0
   109f0:	5e9a      	ldrsh	r2, [r3, r2]
   109f2:	4b5c      	ldr	r3, [pc, #368]	; (10b64 <CorrectIMUvalues+0x7d8>)
   109f4:	801a      	strh	r2, [r3, #0]
			cmx = my;
   109f6:	4b5c      	ldr	r3, [pc, #368]	; (10b68 <CorrectIMUvalues+0x7dc>)
   109f8:	2200      	movs	r2, #0
   109fa:	5e9a      	ldrsh	r2, [r3, r2]
   109fc:	4b5b      	ldr	r3, [pc, #364]	; (10b6c <CorrectIMUvalues+0x7e0>)
   109fe:	801a      	strh	r2, [r3, #0]
			cmy = mz;
   10a00:	4b5b      	ldr	r3, [pc, #364]	; (10b70 <CorrectIMUvalues+0x7e4>)
   10a02:	2200      	movs	r2, #0
   10a04:	5e9a      	ldrsh	r2, [r3, r2]
   10a06:	4b5b      	ldr	r3, [pc, #364]	; (10b74 <CorrectIMUvalues+0x7e8>)
   10a08:	801a      	strh	r2, [r3, #0]
}
   10a0a:	e261      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
   10a0c:	1dbb      	adds	r3, r7, #6
   10a0e:	781b      	ldrb	r3, [r3, #0]
   10a10:	2b02      	cmp	r3, #2
   10a12:	d12e      	bne.n	10a72 <CorrectIMUvalues+0x6e6>
			cax = ay;
   10a14:	4b4c      	ldr	r3, [pc, #304]	; (10b48 <CorrectIMUvalues+0x7bc>)
   10a16:	2200      	movs	r2, #0
   10a18:	5e9a      	ldrsh	r2, [r3, r2]
   10a1a:	4b4c      	ldr	r3, [pc, #304]	; (10b4c <CorrectIMUvalues+0x7c0>)
   10a1c:	801a      	strh	r2, [r3, #0]
			cay = -az;
   10a1e:	4b4c      	ldr	r3, [pc, #304]	; (10b50 <CorrectIMUvalues+0x7c4>)
   10a20:	2200      	movs	r2, #0
   10a22:	5e9b      	ldrsh	r3, [r3, r2]
   10a24:	b29b      	uxth	r3, r3
   10a26:	425b      	negs	r3, r3
   10a28:	b29b      	uxth	r3, r3
   10a2a:	b21a      	sxth	r2, r3
   10a2c:	4b49      	ldr	r3, [pc, #292]	; (10b54 <CorrectIMUvalues+0x7c8>)
   10a2e:	801a      	strh	r2, [r3, #0]
			cgx = gy;
   10a30:	4b49      	ldr	r3, [pc, #292]	; (10b58 <CorrectIMUvalues+0x7cc>)
   10a32:	2200      	movs	r2, #0
   10a34:	5e9a      	ldrsh	r2, [r3, r2]
   10a36:	4b49      	ldr	r3, [pc, #292]	; (10b5c <CorrectIMUvalues+0x7d0>)
   10a38:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
   10a3a:	4b49      	ldr	r3, [pc, #292]	; (10b60 <CorrectIMUvalues+0x7d4>)
   10a3c:	2200      	movs	r2, #0
   10a3e:	5e9b      	ldrsh	r3, [r3, r2]
   10a40:	b29b      	uxth	r3, r3
   10a42:	425b      	negs	r3, r3
   10a44:	b29b      	uxth	r3, r3
   10a46:	b21a      	sxth	r2, r3
   10a48:	4b46      	ldr	r3, [pc, #280]	; (10b64 <CorrectIMUvalues+0x7d8>)
   10a4a:	801a      	strh	r2, [r3, #0]
			cmx = -my;
   10a4c:	4b46      	ldr	r3, [pc, #280]	; (10b68 <CorrectIMUvalues+0x7dc>)
   10a4e:	2200      	movs	r2, #0
   10a50:	5e9b      	ldrsh	r3, [r3, r2]
   10a52:	b29b      	uxth	r3, r3
   10a54:	425b      	negs	r3, r3
   10a56:	b29b      	uxth	r3, r3
   10a58:	b21a      	sxth	r2, r3
   10a5a:	4b44      	ldr	r3, [pc, #272]	; (10b6c <CorrectIMUvalues+0x7e0>)
   10a5c:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
   10a5e:	4b44      	ldr	r3, [pc, #272]	; (10b70 <CorrectIMUvalues+0x7e4>)
   10a60:	2200      	movs	r2, #0
   10a62:	5e9b      	ldrsh	r3, [r3, r2]
   10a64:	b29b      	uxth	r3, r3
   10a66:	425b      	negs	r3, r3
   10a68:	b29b      	uxth	r3, r3
   10a6a:	b21a      	sxth	r2, r3
   10a6c:	4b41      	ldr	r3, [pc, #260]	; (10b74 <CorrectIMUvalues+0x7e8>)
   10a6e:	801a      	strh	r2, [r3, #0]
}
   10a70:	e22e      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
   10a72:	1dbb      	adds	r3, r7, #6
   10a74:	781b      	ldrb	r3, [r3, #0]
   10a76:	2b05      	cmp	r3, #5
   10a78:	d132      	bne.n	10ae0 <CorrectIMUvalues+0x754>
			cax = -az;
   10a7a:	4b35      	ldr	r3, [pc, #212]	; (10b50 <CorrectIMUvalues+0x7c4>)
   10a7c:	2200      	movs	r2, #0
   10a7e:	5e9b      	ldrsh	r3, [r3, r2]
   10a80:	b29b      	uxth	r3, r3
   10a82:	425b      	negs	r3, r3
   10a84:	b29b      	uxth	r3, r3
   10a86:	b21a      	sxth	r2, r3
   10a88:	4b30      	ldr	r3, [pc, #192]	; (10b4c <CorrectIMUvalues+0x7c0>)
   10a8a:	801a      	strh	r2, [r3, #0]
			cay = -ay;
   10a8c:	4b2e      	ldr	r3, [pc, #184]	; (10b48 <CorrectIMUvalues+0x7bc>)
   10a8e:	2200      	movs	r2, #0
   10a90:	5e9b      	ldrsh	r3, [r3, r2]
   10a92:	b29b      	uxth	r3, r3
   10a94:	425b      	negs	r3, r3
   10a96:	b29b      	uxth	r3, r3
   10a98:	b21a      	sxth	r2, r3
   10a9a:	4b2e      	ldr	r3, [pc, #184]	; (10b54 <CorrectIMUvalues+0x7c8>)
   10a9c:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
   10a9e:	4b30      	ldr	r3, [pc, #192]	; (10b60 <CorrectIMUvalues+0x7d4>)
   10aa0:	2200      	movs	r2, #0
   10aa2:	5e9b      	ldrsh	r3, [r3, r2]
   10aa4:	b29b      	uxth	r3, r3
   10aa6:	425b      	negs	r3, r3
   10aa8:	b29b      	uxth	r3, r3
   10aaa:	b21a      	sxth	r2, r3
   10aac:	4b2b      	ldr	r3, [pc, #172]	; (10b5c <CorrectIMUvalues+0x7d0>)
   10aae:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
   10ab0:	4b29      	ldr	r3, [pc, #164]	; (10b58 <CorrectIMUvalues+0x7cc>)
   10ab2:	2200      	movs	r2, #0
   10ab4:	5e9b      	ldrsh	r3, [r3, r2]
   10ab6:	b29b      	uxth	r3, r3
   10ab8:	425b      	negs	r3, r3
   10aba:	b29b      	uxth	r3, r3
   10abc:	b21a      	sxth	r2, r3
   10abe:	4b29      	ldr	r3, [pc, #164]	; (10b64 <CorrectIMUvalues+0x7d8>)
   10ac0:	801a      	strh	r2, [r3, #0]
			cmx = mz;
   10ac2:	4b2b      	ldr	r3, [pc, #172]	; (10b70 <CorrectIMUvalues+0x7e4>)
   10ac4:	2200      	movs	r2, #0
   10ac6:	5e9a      	ldrsh	r2, [r3, r2]
   10ac8:	4b28      	ldr	r3, [pc, #160]	; (10b6c <CorrectIMUvalues+0x7e0>)
   10aca:	801a      	strh	r2, [r3, #0]
			cmy = -my;
   10acc:	4b26      	ldr	r3, [pc, #152]	; (10b68 <CorrectIMUvalues+0x7dc>)
   10ace:	2200      	movs	r2, #0
   10ad0:	5e9b      	ldrsh	r3, [r3, r2]
   10ad2:	b29b      	uxth	r3, r3
   10ad4:	425b      	negs	r3, r3
   10ad6:	b29b      	uxth	r3, r3
   10ad8:	b21a      	sxth	r2, r3
   10ada:	4b26      	ldr	r3, [pc, #152]	; (10b74 <CorrectIMUvalues+0x7e8>)
   10adc:	801a      	strh	r2, [r3, #0]
}
   10ade:	e1f7      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
   10ae0:	1dbb      	adds	r3, r7, #6
   10ae2:	781b      	ldrb	r3, [r3, #0]
   10ae4:	2b06      	cmp	r3, #6
   10ae6:	d000      	beq.n	10aea <CorrectIMUvalues+0x75e>
   10ae8:	e1f2      	b.n	10ed0 <CorrectIMUvalues+0xb44>
			cax = az;
   10aea:	4b19      	ldr	r3, [pc, #100]	; (10b50 <CorrectIMUvalues+0x7c4>)
   10aec:	2200      	movs	r2, #0
   10aee:	5e9a      	ldrsh	r2, [r3, r2]
   10af0:	4b16      	ldr	r3, [pc, #88]	; (10b4c <CorrectIMUvalues+0x7c0>)
   10af2:	801a      	strh	r2, [r3, #0]
			cay = ay;
   10af4:	4b14      	ldr	r3, [pc, #80]	; (10b48 <CorrectIMUvalues+0x7bc>)
   10af6:	2200      	movs	r2, #0
   10af8:	5e9a      	ldrsh	r2, [r3, r2]
   10afa:	4b16      	ldr	r3, [pc, #88]	; (10b54 <CorrectIMUvalues+0x7c8>)
   10afc:	801a      	strh	r2, [r3, #0]
			cgx = gz;
   10afe:	4b18      	ldr	r3, [pc, #96]	; (10b60 <CorrectIMUvalues+0x7d4>)
   10b00:	2200      	movs	r2, #0
   10b02:	5e9a      	ldrsh	r2, [r3, r2]
   10b04:	4b15      	ldr	r3, [pc, #84]	; (10b5c <CorrectIMUvalues+0x7d0>)
   10b06:	801a      	strh	r2, [r3, #0]
			cgy = gy;
   10b08:	4b13      	ldr	r3, [pc, #76]	; (10b58 <CorrectIMUvalues+0x7cc>)
   10b0a:	2200      	movs	r2, #0
   10b0c:	5e9a      	ldrsh	r2, [r3, r2]
   10b0e:	4b15      	ldr	r3, [pc, #84]	; (10b64 <CorrectIMUvalues+0x7d8>)
   10b10:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
   10b12:	4b17      	ldr	r3, [pc, #92]	; (10b70 <CorrectIMUvalues+0x7e4>)
   10b14:	2200      	movs	r2, #0
   10b16:	5e9b      	ldrsh	r3, [r3, r2]
   10b18:	b29b      	uxth	r3, r3
   10b1a:	425b      	negs	r3, r3
   10b1c:	b29b      	uxth	r3, r3
   10b1e:	b21a      	sxth	r2, r3
   10b20:	4b12      	ldr	r3, [pc, #72]	; (10b6c <CorrectIMUvalues+0x7e0>)
   10b22:	801a      	strh	r2, [r3, #0]
			cmy = my;
   10b24:	4b10      	ldr	r3, [pc, #64]	; (10b68 <CorrectIMUvalues+0x7dc>)
   10b26:	2200      	movs	r2, #0
   10b28:	5e9a      	ldrsh	r2, [r3, r2]
   10b2a:	4b12      	ldr	r3, [pc, #72]	; (10b74 <CorrectIMUvalues+0x7e8>)
   10b2c:	801a      	strh	r2, [r3, #0]
}
   10b2e:	e1cf      	b.n	10ed0 <CorrectIMUvalues+0xb44>
   10b30:	2000031e 	.word	0x2000031e
   10b34:	20000334 	.word	0x20000334
   10b38:	20000318 	.word	0x20000318
   10b3c:	2000032e 	.word	0x2000032e
   10b40:	20000324 	.word	0x20000324
   10b44:	2000033a 	.word	0x2000033a
   10b48:	20000320 	.word	0x20000320
   10b4c:	20000330 	.word	0x20000330
   10b50:	20000322 	.word	0x20000322
   10b54:	20000332 	.word	0x20000332
   10b58:	2000031a 	.word	0x2000031a
   10b5c:	2000032a 	.word	0x2000032a
   10b60:	2000031c 	.word	0x2000031c
   10b64:	2000032c 	.word	0x2000032c
   10b68:	20000326 	.word	0x20000326
   10b6c:	20000336 	.word	0x20000336
   10b70:	20000328 	.word	0x20000328
   10b74:	20000338 	.word	0x20000338
	} else if(connector_orient == ORIENT_REAR){ // Connectors Rear
   10b78:	1dfb      	adds	r3, r7, #7
   10b7a:	781b      	ldrb	r3, [r3, #0]
   10b7c:	2b05      	cmp	r3, #5
   10b7e:	d000      	beq.n	10b82 <CorrectIMUvalues+0x7f6>
   10b80:	e0d7      	b.n	10d32 <CorrectIMUvalues+0x9a6>
		caz = -ay;
   10b82:	4bd5      	ldr	r3, [pc, #852]	; (10ed8 <CorrectIMUvalues+0xb4c>)
   10b84:	2200      	movs	r2, #0
   10b86:	5e9b      	ldrsh	r3, [r3, r2]
   10b88:	b29b      	uxth	r3, r3
   10b8a:	425b      	negs	r3, r3
   10b8c:	b29b      	uxth	r3, r3
   10b8e:	b21a      	sxth	r2, r3
   10b90:	4bd2      	ldr	r3, [pc, #840]	; (10edc <CorrectIMUvalues+0xb50>)
   10b92:	801a      	strh	r2, [r3, #0]
		cgz = -gy;
   10b94:	4bd2      	ldr	r3, [pc, #840]	; (10ee0 <CorrectIMUvalues+0xb54>)
   10b96:	2200      	movs	r2, #0
   10b98:	5e9b      	ldrsh	r3, [r3, r2]
   10b9a:	b29b      	uxth	r3, r3
   10b9c:	425b      	negs	r3, r3
   10b9e:	b29b      	uxth	r3, r3
   10ba0:	b21a      	sxth	r2, r3
   10ba2:	4bd0      	ldr	r3, [pc, #832]	; (10ee4 <CorrectIMUvalues+0xb58>)
   10ba4:	801a      	strh	r2, [r3, #0]
		cmz = -my;
   10ba6:	4bd0      	ldr	r3, [pc, #832]	; (10ee8 <CorrectIMUvalues+0xb5c>)
   10ba8:	2200      	movs	r2, #0
   10baa:	5e9b      	ldrsh	r3, [r3, r2]
   10bac:	b29b      	uxth	r3, r3
   10bae:	425b      	negs	r3, r3
   10bb0:	b29b      	uxth	r3, r3
   10bb2:	b21a      	sxth	r2, r3
   10bb4:	4bcd      	ldr	r3, [pc, #820]	; (10eec <CorrectIMUvalues+0xb60>)
   10bb6:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
   10bb8:	1dbb      	adds	r3, r7, #6
   10bba:	781b      	ldrb	r3, [r3, #0]
   10bbc:	2b01      	cmp	r3, #1
   10bbe:	d11e      	bne.n	10bfe <CorrectIMUvalues+0x872>
			cax = ax;
   10bc0:	4bcb      	ldr	r3, [pc, #812]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10bc2:	2200      	movs	r2, #0
   10bc4:	5e9a      	ldrsh	r2, [r3, r2]
   10bc6:	4bcb      	ldr	r3, [pc, #812]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10bc8:	801a      	strh	r2, [r3, #0]
			cay = az;
   10bca:	4bcb      	ldr	r3, [pc, #812]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10bcc:	2200      	movs	r2, #0
   10bce:	5e9a      	ldrsh	r2, [r3, r2]
   10bd0:	4bca      	ldr	r3, [pc, #808]	; (10efc <CorrectIMUvalues+0xb70>)
   10bd2:	801a      	strh	r2, [r3, #0]
			cgx = gx;
   10bd4:	4bca      	ldr	r3, [pc, #808]	; (10f00 <CorrectIMUvalues+0xb74>)
   10bd6:	2200      	movs	r2, #0
   10bd8:	5e9a      	ldrsh	r2, [r3, r2]
   10bda:	4bca      	ldr	r3, [pc, #808]	; (10f04 <CorrectIMUvalues+0xb78>)
   10bdc:	801a      	strh	r2, [r3, #0]
			cgy = gz;
   10bde:	4bca      	ldr	r3, [pc, #808]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10be0:	2200      	movs	r2, #0
   10be2:	5e9a      	ldrsh	r2, [r3, r2]
   10be4:	4bc9      	ldr	r3, [pc, #804]	; (10f0c <CorrectIMUvalues+0xb80>)
   10be6:	801a      	strh	r2, [r3, #0]
			cmx = mx;
   10be8:	4bc9      	ldr	r3, [pc, #804]	; (10f10 <CorrectIMUvalues+0xb84>)
   10bea:	2200      	movs	r2, #0
   10bec:	5e9a      	ldrsh	r2, [r3, r2]
   10bee:	4bc9      	ldr	r3, [pc, #804]	; (10f14 <CorrectIMUvalues+0xb88>)
   10bf0:	801a      	strh	r2, [r3, #0]
			cmy = mz;
   10bf2:	4bc9      	ldr	r3, [pc, #804]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10bf4:	2200      	movs	r2, #0
   10bf6:	5e9a      	ldrsh	r2, [r3, r2]
   10bf8:	4bc8      	ldr	r3, [pc, #800]	; (10f1c <CorrectIMUvalues+0xb90>)
   10bfa:	801a      	strh	r2, [r3, #0]
}
   10bfc:	e168      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
   10bfe:	1dbb      	adds	r3, r7, #6
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	2b02      	cmp	r3, #2
   10c04:	d136      	bne.n	10c74 <CorrectIMUvalues+0x8e8>
			cax = -ax;
   10c06:	4bba      	ldr	r3, [pc, #744]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10c08:	2200      	movs	r2, #0
   10c0a:	5e9b      	ldrsh	r3, [r3, r2]
   10c0c:	b29b      	uxth	r3, r3
   10c0e:	425b      	negs	r3, r3
   10c10:	b29b      	uxth	r3, r3
   10c12:	b21a      	sxth	r2, r3
   10c14:	4bb7      	ldr	r3, [pc, #732]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10c16:	801a      	strh	r2, [r3, #0]
			cay = -az;
   10c18:	4bb7      	ldr	r3, [pc, #732]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10c1a:	2200      	movs	r2, #0
   10c1c:	5e9b      	ldrsh	r3, [r3, r2]
   10c1e:	b29b      	uxth	r3, r3
   10c20:	425b      	negs	r3, r3
   10c22:	b29b      	uxth	r3, r3
   10c24:	b21a      	sxth	r2, r3
   10c26:	4bb5      	ldr	r3, [pc, #724]	; (10efc <CorrectIMUvalues+0xb70>)
   10c28:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
   10c2a:	4bb5      	ldr	r3, [pc, #724]	; (10f00 <CorrectIMUvalues+0xb74>)
   10c2c:	2200      	movs	r2, #0
   10c2e:	5e9b      	ldrsh	r3, [r3, r2]
   10c30:	b29b      	uxth	r3, r3
   10c32:	425b      	negs	r3, r3
   10c34:	b29b      	uxth	r3, r3
   10c36:	b21a      	sxth	r2, r3
   10c38:	4bb2      	ldr	r3, [pc, #712]	; (10f04 <CorrectIMUvalues+0xb78>)
   10c3a:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
   10c3c:	4bb2      	ldr	r3, [pc, #712]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10c3e:	2200      	movs	r2, #0
   10c40:	5e9b      	ldrsh	r3, [r3, r2]
   10c42:	b29b      	uxth	r3, r3
   10c44:	425b      	negs	r3, r3
   10c46:	b29b      	uxth	r3, r3
   10c48:	b21a      	sxth	r2, r3
   10c4a:	4bb0      	ldr	r3, [pc, #704]	; (10f0c <CorrectIMUvalues+0xb80>)
   10c4c:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
   10c4e:	4bb0      	ldr	r3, [pc, #704]	; (10f10 <CorrectIMUvalues+0xb84>)
   10c50:	2200      	movs	r2, #0
   10c52:	5e9b      	ldrsh	r3, [r3, r2]
   10c54:	b29b      	uxth	r3, r3
   10c56:	425b      	negs	r3, r3
   10c58:	b29b      	uxth	r3, r3
   10c5a:	b21a      	sxth	r2, r3
   10c5c:	4bad      	ldr	r3, [pc, #692]	; (10f14 <CorrectIMUvalues+0xb88>)
   10c5e:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
   10c60:	4bad      	ldr	r3, [pc, #692]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10c62:	2200      	movs	r2, #0
   10c64:	5e9b      	ldrsh	r3, [r3, r2]
   10c66:	b29b      	uxth	r3, r3
   10c68:	425b      	negs	r3, r3
   10c6a:	b29b      	uxth	r3, r3
   10c6c:	b21a      	sxth	r2, r3
   10c6e:	4bab      	ldr	r3, [pc, #684]	; (10f1c <CorrectIMUvalues+0xb90>)
   10c70:	801a      	strh	r2, [r3, #0]
}
   10c72:	e12d      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
   10c74:	1dbb      	adds	r3, r7, #6
   10c76:	781b      	ldrb	r3, [r3, #0]
   10c78:	2b03      	cmp	r3, #3
   10c7a:	d12a      	bne.n	10cd2 <CorrectIMUvalues+0x946>
			cax = -az;
   10c7c:	4b9e      	ldr	r3, [pc, #632]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10c7e:	2200      	movs	r2, #0
   10c80:	5e9b      	ldrsh	r3, [r3, r2]
   10c82:	b29b      	uxth	r3, r3
   10c84:	425b      	negs	r3, r3
   10c86:	b29b      	uxth	r3, r3
   10c88:	b21a      	sxth	r2, r3
   10c8a:	4b9a      	ldr	r3, [pc, #616]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10c8c:	801a      	strh	r2, [r3, #0]
			cay = ax;
   10c8e:	4b98      	ldr	r3, [pc, #608]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10c90:	2200      	movs	r2, #0
   10c92:	5e9a      	ldrsh	r2, [r3, r2]
   10c94:	4b99      	ldr	r3, [pc, #612]	; (10efc <CorrectIMUvalues+0xb70>)
   10c96:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
   10c98:	4b9b      	ldr	r3, [pc, #620]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10c9a:	2200      	movs	r2, #0
   10c9c:	5e9b      	ldrsh	r3, [r3, r2]
   10c9e:	b29b      	uxth	r3, r3
   10ca0:	425b      	negs	r3, r3
   10ca2:	b29b      	uxth	r3, r3
   10ca4:	b21a      	sxth	r2, r3
   10ca6:	4b97      	ldr	r3, [pc, #604]	; (10f04 <CorrectIMUvalues+0xb78>)
   10ca8:	801a      	strh	r2, [r3, #0]
			cgy = gx;
   10caa:	4b95      	ldr	r3, [pc, #596]	; (10f00 <CorrectIMUvalues+0xb74>)
   10cac:	2200      	movs	r2, #0
   10cae:	5e9a      	ldrsh	r2, [r3, r2]
   10cb0:	4b96      	ldr	r3, [pc, #600]	; (10f0c <CorrectIMUvalues+0xb80>)
   10cb2:	801a      	strh	r2, [r3, #0]
			cmx = mz;
   10cb4:	4b98      	ldr	r3, [pc, #608]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10cb6:	2200      	movs	r2, #0
   10cb8:	5e9a      	ldrsh	r2, [r3, r2]
   10cba:	4b96      	ldr	r3, [pc, #600]	; (10f14 <CorrectIMUvalues+0xb88>)
   10cbc:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
   10cbe:	4b94      	ldr	r3, [pc, #592]	; (10f10 <CorrectIMUvalues+0xb84>)
   10cc0:	2200      	movs	r2, #0
   10cc2:	5e9b      	ldrsh	r3, [r3, r2]
   10cc4:	b29b      	uxth	r3, r3
   10cc6:	425b      	negs	r3, r3
   10cc8:	b29b      	uxth	r3, r3
   10cca:	b21a      	sxth	r2, r3
   10ccc:	4b93      	ldr	r3, [pc, #588]	; (10f1c <CorrectIMUvalues+0xb90>)
   10cce:	801a      	strh	r2, [r3, #0]
}
   10cd0:	e0fe      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
   10cd2:	1dbb      	adds	r3, r7, #6
   10cd4:	781b      	ldrb	r3, [r3, #0]
   10cd6:	2b04      	cmp	r3, #4
   10cd8:	d000      	beq.n	10cdc <CorrectIMUvalues+0x950>
   10cda:	e0f9      	b.n	10ed0 <CorrectIMUvalues+0xb44>
			cax = az;
   10cdc:	4b86      	ldr	r3, [pc, #536]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10cde:	2200      	movs	r2, #0
   10ce0:	5e9a      	ldrsh	r2, [r3, r2]
   10ce2:	4b84      	ldr	r3, [pc, #528]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10ce4:	801a      	strh	r2, [r3, #0]
			cay = -ax;
   10ce6:	4b82      	ldr	r3, [pc, #520]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10ce8:	2200      	movs	r2, #0
   10cea:	5e9b      	ldrsh	r3, [r3, r2]
   10cec:	b29b      	uxth	r3, r3
   10cee:	425b      	negs	r3, r3
   10cf0:	b29b      	uxth	r3, r3
   10cf2:	b21a      	sxth	r2, r3
   10cf4:	4b81      	ldr	r3, [pc, #516]	; (10efc <CorrectIMUvalues+0xb70>)
   10cf6:	801a      	strh	r2, [r3, #0]
			cgx = gz;
   10cf8:	4b83      	ldr	r3, [pc, #524]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10cfa:	2200      	movs	r2, #0
   10cfc:	5e9a      	ldrsh	r2, [r3, r2]
   10cfe:	4b81      	ldr	r3, [pc, #516]	; (10f04 <CorrectIMUvalues+0xb78>)
   10d00:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
   10d02:	4b7f      	ldr	r3, [pc, #508]	; (10f00 <CorrectIMUvalues+0xb74>)
   10d04:	2200      	movs	r2, #0
   10d06:	5e9b      	ldrsh	r3, [r3, r2]
   10d08:	b29b      	uxth	r3, r3
   10d0a:	425b      	negs	r3, r3
   10d0c:	b29b      	uxth	r3, r3
   10d0e:	b21a      	sxth	r2, r3
   10d10:	4b7e      	ldr	r3, [pc, #504]	; (10f0c <CorrectIMUvalues+0xb80>)
   10d12:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
   10d14:	4b80      	ldr	r3, [pc, #512]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10d16:	2200      	movs	r2, #0
   10d18:	5e9b      	ldrsh	r3, [r3, r2]
   10d1a:	b29b      	uxth	r3, r3
   10d1c:	425b      	negs	r3, r3
   10d1e:	b29b      	uxth	r3, r3
   10d20:	b21a      	sxth	r2, r3
   10d22:	4b7c      	ldr	r3, [pc, #496]	; (10f14 <CorrectIMUvalues+0xb88>)
   10d24:	801a      	strh	r2, [r3, #0]
			cmy = mx;
   10d26:	4b7a      	ldr	r3, [pc, #488]	; (10f10 <CorrectIMUvalues+0xb84>)
   10d28:	2200      	movs	r2, #0
   10d2a:	5e9a      	ldrsh	r2, [r3, r2]
   10d2c:	4b7b      	ldr	r3, [pc, #492]	; (10f1c <CorrectIMUvalues+0xb90>)
   10d2e:	801a      	strh	r2, [r3, #0]
}
   10d30:	e0ce      	b.n	10ed0 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_FRONT){ // Connectors Front
   10d32:	1dfb      	adds	r3, r7, #7
   10d34:	781b      	ldrb	r3, [r3, #0]
   10d36:	2b06      	cmp	r3, #6
   10d38:	d000      	beq.n	10d3c <CorrectIMUvalues+0x9b0>
   10d3a:	e0c9      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		caz = ay;
   10d3c:	4b66      	ldr	r3, [pc, #408]	; (10ed8 <CorrectIMUvalues+0xb4c>)
   10d3e:	2200      	movs	r2, #0
   10d40:	5e9a      	ldrsh	r2, [r3, r2]
   10d42:	4b66      	ldr	r3, [pc, #408]	; (10edc <CorrectIMUvalues+0xb50>)
   10d44:	801a      	strh	r2, [r3, #0]
		cgz = gy;
   10d46:	4b66      	ldr	r3, [pc, #408]	; (10ee0 <CorrectIMUvalues+0xb54>)
   10d48:	2200      	movs	r2, #0
   10d4a:	5e9a      	ldrsh	r2, [r3, r2]
   10d4c:	4b65      	ldr	r3, [pc, #404]	; (10ee4 <CorrectIMUvalues+0xb58>)
   10d4e:	801a      	strh	r2, [r3, #0]
		cgz = my;
   10d50:	4b65      	ldr	r3, [pc, #404]	; (10ee8 <CorrectIMUvalues+0xb5c>)
   10d52:	2200      	movs	r2, #0
   10d54:	5e9a      	ldrsh	r2, [r3, r2]
   10d56:	4b63      	ldr	r3, [pc, #396]	; (10ee4 <CorrectIMUvalues+0xb58>)
   10d58:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
   10d5a:	1dbb      	adds	r3, r7, #6
   10d5c:	781b      	ldrb	r3, [r3, #0]
   10d5e:	2b01      	cmp	r3, #1
   10d60:	d12a      	bne.n	10db8 <CorrectIMUvalues+0xa2c>
			cax = -ax;
   10d62:	4b63      	ldr	r3, [pc, #396]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10d64:	2200      	movs	r2, #0
   10d66:	5e9b      	ldrsh	r3, [r3, r2]
   10d68:	b29b      	uxth	r3, r3
   10d6a:	425b      	negs	r3, r3
   10d6c:	b29b      	uxth	r3, r3
   10d6e:	b21a      	sxth	r2, r3
   10d70:	4b60      	ldr	r3, [pc, #384]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10d72:	801a      	strh	r2, [r3, #0]
			cay = az;
   10d74:	4b60      	ldr	r3, [pc, #384]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10d76:	2200      	movs	r2, #0
   10d78:	5e9a      	ldrsh	r2, [r3, r2]
   10d7a:	4b60      	ldr	r3, [pc, #384]	; (10efc <CorrectIMUvalues+0xb70>)
   10d7c:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
   10d7e:	4b60      	ldr	r3, [pc, #384]	; (10f00 <CorrectIMUvalues+0xb74>)
   10d80:	2200      	movs	r2, #0
   10d82:	5e9b      	ldrsh	r3, [r3, r2]
   10d84:	b29b      	uxth	r3, r3
   10d86:	425b      	negs	r3, r3
   10d88:	b29b      	uxth	r3, r3
   10d8a:	b21a      	sxth	r2, r3
   10d8c:	4b5d      	ldr	r3, [pc, #372]	; (10f04 <CorrectIMUvalues+0xb78>)
   10d8e:	801a      	strh	r2, [r3, #0]
			cgy = gz;
   10d90:	4b5d      	ldr	r3, [pc, #372]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10d92:	2200      	movs	r2, #0
   10d94:	5e9a      	ldrsh	r2, [r3, r2]
   10d96:	4b5d      	ldr	r3, [pc, #372]	; (10f0c <CorrectIMUvalues+0xb80>)
   10d98:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
   10d9a:	4b5d      	ldr	r3, [pc, #372]	; (10f10 <CorrectIMUvalues+0xb84>)
   10d9c:	2200      	movs	r2, #0
   10d9e:	5e9b      	ldrsh	r3, [r3, r2]
   10da0:	b29b      	uxth	r3, r3
   10da2:	425b      	negs	r3, r3
   10da4:	b29b      	uxth	r3, r3
   10da6:	b21a      	sxth	r2, r3
   10da8:	4b5a      	ldr	r3, [pc, #360]	; (10f14 <CorrectIMUvalues+0xb88>)
   10daa:	801a      	strh	r2, [r3, #0]
			cmy = mz;
   10dac:	4b5a      	ldr	r3, [pc, #360]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10dae:	2200      	movs	r2, #0
   10db0:	5e9a      	ldrsh	r2, [r3, r2]
   10db2:	4b5a      	ldr	r3, [pc, #360]	; (10f1c <CorrectIMUvalues+0xb90>)
   10db4:	801a      	strh	r2, [r3, #0]
}
   10db6:	e08b      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
   10db8:	1dbb      	adds	r3, r7, #6
   10dba:	781b      	ldrb	r3, [r3, #0]
   10dbc:	2b02      	cmp	r3, #2
   10dbe:	d12a      	bne.n	10e16 <CorrectIMUvalues+0xa8a>
			cax = ax;
   10dc0:	4b4b      	ldr	r3, [pc, #300]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10dc2:	2200      	movs	r2, #0
   10dc4:	5e9a      	ldrsh	r2, [r3, r2]
   10dc6:	4b4b      	ldr	r3, [pc, #300]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10dc8:	801a      	strh	r2, [r3, #0]
			cay = -az;
   10dca:	4b4b      	ldr	r3, [pc, #300]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10dcc:	2200      	movs	r2, #0
   10dce:	5e9b      	ldrsh	r3, [r3, r2]
   10dd0:	b29b      	uxth	r3, r3
   10dd2:	425b      	negs	r3, r3
   10dd4:	b29b      	uxth	r3, r3
   10dd6:	b21a      	sxth	r2, r3
   10dd8:	4b48      	ldr	r3, [pc, #288]	; (10efc <CorrectIMUvalues+0xb70>)
   10dda:	801a      	strh	r2, [r3, #0]
			cgx = gx;
   10ddc:	4b48      	ldr	r3, [pc, #288]	; (10f00 <CorrectIMUvalues+0xb74>)
   10dde:	2200      	movs	r2, #0
   10de0:	5e9a      	ldrsh	r2, [r3, r2]
   10de2:	4b48      	ldr	r3, [pc, #288]	; (10f04 <CorrectIMUvalues+0xb78>)
   10de4:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
   10de6:	4b48      	ldr	r3, [pc, #288]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10de8:	2200      	movs	r2, #0
   10dea:	5e9b      	ldrsh	r3, [r3, r2]
   10dec:	b29b      	uxth	r3, r3
   10dee:	425b      	negs	r3, r3
   10df0:	b29b      	uxth	r3, r3
   10df2:	b21a      	sxth	r2, r3
   10df4:	4b45      	ldr	r3, [pc, #276]	; (10f0c <CorrectIMUvalues+0xb80>)
   10df6:	801a      	strh	r2, [r3, #0]
			cmx = mx;
   10df8:	4b45      	ldr	r3, [pc, #276]	; (10f10 <CorrectIMUvalues+0xb84>)
   10dfa:	2200      	movs	r2, #0
   10dfc:	5e9a      	ldrsh	r2, [r3, r2]
   10dfe:	4b45      	ldr	r3, [pc, #276]	; (10f14 <CorrectIMUvalues+0xb88>)
   10e00:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
   10e02:	4b45      	ldr	r3, [pc, #276]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10e04:	2200      	movs	r2, #0
   10e06:	5e9b      	ldrsh	r3, [r3, r2]
   10e08:	b29b      	uxth	r3, r3
   10e0a:	425b      	negs	r3, r3
   10e0c:	b29b      	uxth	r3, r3
   10e0e:	b21a      	sxth	r2, r3
   10e10:	4b42      	ldr	r3, [pc, #264]	; (10f1c <CorrectIMUvalues+0xb90>)
   10e12:	801a      	strh	r2, [r3, #0]
}
   10e14:	e05c      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
   10e16:	1dbb      	adds	r3, r7, #6
   10e18:	781b      	ldrb	r3, [r3, #0]
   10e1a:	2b03      	cmp	r3, #3
   10e1c:	d126      	bne.n	10e6c <CorrectIMUvalues+0xae0>
			cax = az;
   10e1e:	4b36      	ldr	r3, [pc, #216]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10e20:	2200      	movs	r2, #0
   10e22:	5e9a      	ldrsh	r2, [r3, r2]
   10e24:	4b33      	ldr	r3, [pc, #204]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10e26:	801a      	strh	r2, [r3, #0]
			cay = ax;
   10e28:	4b31      	ldr	r3, [pc, #196]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10e2a:	2200      	movs	r2, #0
   10e2c:	5e9a      	ldrsh	r2, [r3, r2]
   10e2e:	4b33      	ldr	r3, [pc, #204]	; (10efc <CorrectIMUvalues+0xb70>)
   10e30:	801a      	strh	r2, [r3, #0]
			cgx = gz;
   10e32:	4b35      	ldr	r3, [pc, #212]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10e34:	2200      	movs	r2, #0
   10e36:	5e9a      	ldrsh	r2, [r3, r2]
   10e38:	4b32      	ldr	r3, [pc, #200]	; (10f04 <CorrectIMUvalues+0xb78>)
   10e3a:	801a      	strh	r2, [r3, #0]
			cgy = gx;
   10e3c:	4b30      	ldr	r3, [pc, #192]	; (10f00 <CorrectIMUvalues+0xb74>)
   10e3e:	2200      	movs	r2, #0
   10e40:	5e9a      	ldrsh	r2, [r3, r2]
   10e42:	4b32      	ldr	r3, [pc, #200]	; (10f0c <CorrectIMUvalues+0xb80>)
   10e44:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
   10e46:	4b34      	ldr	r3, [pc, #208]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10e48:	2200      	movs	r2, #0
   10e4a:	5e9b      	ldrsh	r3, [r3, r2]
   10e4c:	b29b      	uxth	r3, r3
   10e4e:	425b      	negs	r3, r3
   10e50:	b29b      	uxth	r3, r3
   10e52:	b21a      	sxth	r2, r3
   10e54:	4b2f      	ldr	r3, [pc, #188]	; (10f14 <CorrectIMUvalues+0xb88>)
   10e56:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
   10e58:	4b2d      	ldr	r3, [pc, #180]	; (10f10 <CorrectIMUvalues+0xb84>)
   10e5a:	2200      	movs	r2, #0
   10e5c:	5e9b      	ldrsh	r3, [r3, r2]
   10e5e:	b29b      	uxth	r3, r3
   10e60:	425b      	negs	r3, r3
   10e62:	b29b      	uxth	r3, r3
   10e64:	b21a      	sxth	r2, r3
   10e66:	4b2d      	ldr	r3, [pc, #180]	; (10f1c <CorrectIMUvalues+0xb90>)
   10e68:	801a      	strh	r2, [r3, #0]
}
   10e6a:	e031      	b.n	10ed0 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
   10e6c:	1dbb      	adds	r3, r7, #6
   10e6e:	781b      	ldrb	r3, [r3, #0]
   10e70:	2b04      	cmp	r3, #4
   10e72:	d12d      	bne.n	10ed0 <CorrectIMUvalues+0xb44>
			cax = -az;
   10e74:	4b20      	ldr	r3, [pc, #128]	; (10ef8 <CorrectIMUvalues+0xb6c>)
   10e76:	2200      	movs	r2, #0
   10e78:	5e9b      	ldrsh	r3, [r3, r2]
   10e7a:	b29b      	uxth	r3, r3
   10e7c:	425b      	negs	r3, r3
   10e7e:	b29b      	uxth	r3, r3
   10e80:	b21a      	sxth	r2, r3
   10e82:	4b1c      	ldr	r3, [pc, #112]	; (10ef4 <CorrectIMUvalues+0xb68>)
   10e84:	801a      	strh	r2, [r3, #0]
			cay = -ax;
   10e86:	4b1a      	ldr	r3, [pc, #104]	; (10ef0 <CorrectIMUvalues+0xb64>)
   10e88:	2200      	movs	r2, #0
   10e8a:	5e9b      	ldrsh	r3, [r3, r2]
   10e8c:	b29b      	uxth	r3, r3
   10e8e:	425b      	negs	r3, r3
   10e90:	b29b      	uxth	r3, r3
   10e92:	b21a      	sxth	r2, r3
   10e94:	4b19      	ldr	r3, [pc, #100]	; (10efc <CorrectIMUvalues+0xb70>)
   10e96:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
   10e98:	4b1b      	ldr	r3, [pc, #108]	; (10f08 <CorrectIMUvalues+0xb7c>)
   10e9a:	2200      	movs	r2, #0
   10e9c:	5e9b      	ldrsh	r3, [r3, r2]
   10e9e:	b29b      	uxth	r3, r3
   10ea0:	425b      	negs	r3, r3
   10ea2:	b29b      	uxth	r3, r3
   10ea4:	b21a      	sxth	r2, r3
   10ea6:	4b17      	ldr	r3, [pc, #92]	; (10f04 <CorrectIMUvalues+0xb78>)
   10ea8:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
   10eaa:	4b15      	ldr	r3, [pc, #84]	; (10f00 <CorrectIMUvalues+0xb74>)
   10eac:	2200      	movs	r2, #0
   10eae:	5e9b      	ldrsh	r3, [r3, r2]
   10eb0:	b29b      	uxth	r3, r3
   10eb2:	425b      	negs	r3, r3
   10eb4:	b29b      	uxth	r3, r3
   10eb6:	b21a      	sxth	r2, r3
   10eb8:	4b14      	ldr	r3, [pc, #80]	; (10f0c <CorrectIMUvalues+0xb80>)
   10eba:	801a      	strh	r2, [r3, #0]
			cmx = mz;
   10ebc:	4b16      	ldr	r3, [pc, #88]	; (10f18 <CorrectIMUvalues+0xb8c>)
   10ebe:	2200      	movs	r2, #0
   10ec0:	5e9a      	ldrsh	r2, [r3, r2]
   10ec2:	4b14      	ldr	r3, [pc, #80]	; (10f14 <CorrectIMUvalues+0xb88>)
   10ec4:	801a      	strh	r2, [r3, #0]
			cmy = mx;
   10ec6:	4b12      	ldr	r3, [pc, #72]	; (10f10 <CorrectIMUvalues+0xb84>)
   10ec8:	2200      	movs	r2, #0
   10eca:	5e9a      	ldrsh	r2, [r3, r2]
   10ecc:	4b13      	ldr	r3, [pc, #76]	; (10f1c <CorrectIMUvalues+0xb90>)
   10ece:	801a      	strh	r2, [r3, #0]
}
   10ed0:	46c0      	nop			; (mov r8, r8)
   10ed2:	46bd      	mov	sp, r7
   10ed4:	b002      	add	sp, #8
   10ed6:	bd80      	pop	{r7, pc}
   10ed8:	20000320 	.word	0x20000320
   10edc:	20000334 	.word	0x20000334
   10ee0:	2000031a 	.word	0x2000031a
   10ee4:	2000032e 	.word	0x2000032e
   10ee8:	20000326 	.word	0x20000326
   10eec:	2000033a 	.word	0x2000033a
   10ef0:	2000031e 	.word	0x2000031e
   10ef4:	20000330 	.word	0x20000330
   10ef8:	20000322 	.word	0x20000322
   10efc:	20000332 	.word	0x20000332
   10f00:	20000318 	.word	0x20000318
   10f04:	2000032a 	.word	0x2000032a
   10f08:	2000031c 	.word	0x2000031c
   10f0c:	2000032c 	.word	0x2000032c
   10f10:	20000324 	.word	0x20000324
   10f14:	20000336 	.word	0x20000336
   10f18:	20000328 	.word	0x20000328
   10f1c:	20000338 	.word	0x20000338

00010f20 <calculate_heading>:

void calculate_heading(){
   10f20:	b5b0      	push	{r4, r5, r7, lr}
   10f22:	af00      	add	r7, sp, #0
	headingTime = millis();
   10f24:	4b45      	ldr	r3, [pc, #276]	; (1103c <calculate_heading+0x11c>)
   10f26:	4798      	blx	r3
   10f28:	0002      	movs	r2, r0
   10f2a:	4b45      	ldr	r3, [pc, #276]	; (11040 <calculate_heading+0x120>)
   10f2c:	601a      	str	r2, [r3, #0]
	if(abs(gzKalman) >= 0.5){
   10f2e:	4b45      	ldr	r3, [pc, #276]	; (11044 <calculate_heading+0x124>)
   10f30:	681a      	ldr	r2, [r3, #0]
   10f32:	4b45      	ldr	r3, [pc, #276]	; (11048 <calculate_heading+0x128>)
   10f34:	1c10      	adds	r0, r2, #0
   10f36:	4798      	blx	r3
   10f38:	0003      	movs	r3, r0
   10f3a:	17d9      	asrs	r1, r3, #31
   10f3c:	185a      	adds	r2, r3, r1
   10f3e:	404a      	eors	r2, r1
   10f40:	4b42      	ldr	r3, [pc, #264]	; (1104c <calculate_heading+0x12c>)
   10f42:	0010      	movs	r0, r2
   10f44:	4798      	blx	r3
   10f46:	4c42      	ldr	r4, [pc, #264]	; (11050 <calculate_heading+0x130>)
   10f48:	2200      	movs	r2, #0
   10f4a:	4b42      	ldr	r3, [pc, #264]	; (11054 <calculate_heading+0x134>)
   10f4c:	47a0      	blx	r4
   10f4e:	1e03      	subs	r3, r0, #0
   10f50:	d046      	beq.n	10fe0 <calculate_heading+0xc0>
		if(headingTime < lheadingTime){
   10f52:	4b3b      	ldr	r3, [pc, #236]	; (11040 <calculate_heading+0x120>)
   10f54:	681a      	ldr	r2, [r3, #0]
   10f56:	4b40      	ldr	r3, [pc, #256]	; (11058 <calculate_heading+0x138>)
   10f58:	681b      	ldr	r3, [r3, #0]
   10f5a:	429a      	cmp	r2, r3
   10f5c:	d221      	bcs.n	10fa2 <calculate_heading+0x82>
			heading += (gzKalman) * (((float)(headingTime + ((0xFFFFFFFF/7500) - lheadingTime)))/1000);
   10f5e:	4b38      	ldr	r3, [pc, #224]	; (11040 <calculate_heading+0x120>)
   10f60:	681a      	ldr	r2, [r3, #0]
   10f62:	4b3d      	ldr	r3, [pc, #244]	; (11058 <calculate_heading+0x138>)
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	1ad3      	subs	r3, r2, r3
   10f68:	4a3c      	ldr	r2, [pc, #240]	; (1105c <calculate_heading+0x13c>)
   10f6a:	189a      	adds	r2, r3, r2
   10f6c:	4b3c      	ldr	r3, [pc, #240]	; (11060 <calculate_heading+0x140>)
   10f6e:	0010      	movs	r0, r2
   10f70:	4798      	blx	r3
   10f72:	1c02      	adds	r2, r0, #0
   10f74:	4b3b      	ldr	r3, [pc, #236]	; (11064 <calculate_heading+0x144>)
   10f76:	493c      	ldr	r1, [pc, #240]	; (11068 <calculate_heading+0x148>)
   10f78:	1c10      	adds	r0, r2, #0
   10f7a:	4798      	blx	r3
   10f7c:	1c03      	adds	r3, r0, #0
   10f7e:	1c18      	adds	r0, r3, #0
   10f80:	4b30      	ldr	r3, [pc, #192]	; (11044 <calculate_heading+0x124>)
   10f82:	681a      	ldr	r2, [r3, #0]
   10f84:	4b39      	ldr	r3, [pc, #228]	; (1106c <calculate_heading+0x14c>)
   10f86:	1c11      	adds	r1, r2, #0
   10f88:	4798      	blx	r3
   10f8a:	1c03      	adds	r3, r0, #0
   10f8c:	1c18      	adds	r0, r3, #0
   10f8e:	4b38      	ldr	r3, [pc, #224]	; (11070 <calculate_heading+0x150>)
   10f90:	681a      	ldr	r2, [r3, #0]
   10f92:	4b38      	ldr	r3, [pc, #224]	; (11074 <calculate_heading+0x154>)
   10f94:	1c11      	adds	r1, r2, #0
   10f96:	4798      	blx	r3
   10f98:	1c03      	adds	r3, r0, #0
   10f9a:	1c1a      	adds	r2, r3, #0
   10f9c:	4b34      	ldr	r3, [pc, #208]	; (11070 <calculate_heading+0x150>)
   10f9e:	601a      	str	r2, [r3, #0]
   10fa0:	e01e      	b.n	10fe0 <calculate_heading+0xc0>
		}
		else
			heading += (gzKalman) * (((float)(headingTime - lheadingTime))/1000);
   10fa2:	4b27      	ldr	r3, [pc, #156]	; (11040 <calculate_heading+0x120>)
   10fa4:	681a      	ldr	r2, [r3, #0]
   10fa6:	4b2c      	ldr	r3, [pc, #176]	; (11058 <calculate_heading+0x138>)
   10fa8:	681b      	ldr	r3, [r3, #0]
   10faa:	1ad2      	subs	r2, r2, r3
   10fac:	4b2c      	ldr	r3, [pc, #176]	; (11060 <calculate_heading+0x140>)
   10fae:	0010      	movs	r0, r2
   10fb0:	4798      	blx	r3
   10fb2:	1c02      	adds	r2, r0, #0
   10fb4:	4b2b      	ldr	r3, [pc, #172]	; (11064 <calculate_heading+0x144>)
   10fb6:	492c      	ldr	r1, [pc, #176]	; (11068 <calculate_heading+0x148>)
   10fb8:	1c10      	adds	r0, r2, #0
   10fba:	4798      	blx	r3
   10fbc:	1c03      	adds	r3, r0, #0
   10fbe:	1c18      	adds	r0, r3, #0
   10fc0:	4b20      	ldr	r3, [pc, #128]	; (11044 <calculate_heading+0x124>)
   10fc2:	681a      	ldr	r2, [r3, #0]
   10fc4:	4b29      	ldr	r3, [pc, #164]	; (1106c <calculate_heading+0x14c>)
   10fc6:	1c11      	adds	r1, r2, #0
   10fc8:	4798      	blx	r3
   10fca:	1c03      	adds	r3, r0, #0
   10fcc:	1c18      	adds	r0, r3, #0
   10fce:	4b28      	ldr	r3, [pc, #160]	; (11070 <calculate_heading+0x150>)
   10fd0:	681a      	ldr	r2, [r3, #0]
   10fd2:	4b28      	ldr	r3, [pc, #160]	; (11074 <calculate_heading+0x154>)
   10fd4:	1c11      	adds	r1, r2, #0
   10fd6:	4798      	blx	r3
   10fd8:	1c03      	adds	r3, r0, #0
   10fda:	1c1a      	adds	r2, r3, #0
   10fdc:	4b24      	ldr	r3, [pc, #144]	; (11070 <calculate_heading+0x150>)
   10fde:	601a      	str	r2, [r3, #0]
	}
	lheadingTime = headingTime;
   10fe0:	4b17      	ldr	r3, [pc, #92]	; (11040 <calculate_heading+0x120>)
   10fe2:	681a      	ldr	r2, [r3, #0]
   10fe4:	4b1c      	ldr	r3, [pc, #112]	; (11058 <calculate_heading+0x138>)
   10fe6:	601a      	str	r2, [r3, #0]
	while(heading < 0){	heading = 360 + heading; }
   10fe8:	e009      	b.n	10ffe <calculate_heading+0xde>
   10fea:	4b21      	ldr	r3, [pc, #132]	; (11070 <calculate_heading+0x150>)
   10fec:	681a      	ldr	r2, [r3, #0]
   10fee:	4b21      	ldr	r3, [pc, #132]	; (11074 <calculate_heading+0x154>)
   10ff0:	4921      	ldr	r1, [pc, #132]	; (11078 <calculate_heading+0x158>)
   10ff2:	1c10      	adds	r0, r2, #0
   10ff4:	4798      	blx	r3
   10ff6:	1c03      	adds	r3, r0, #0
   10ff8:	1c1a      	adds	r2, r3, #0
   10ffa:	4b1d      	ldr	r3, [pc, #116]	; (11070 <calculate_heading+0x150>)
   10ffc:	601a      	str	r2, [r3, #0]
   10ffe:	4b1c      	ldr	r3, [pc, #112]	; (11070 <calculate_heading+0x150>)
   11000:	681a      	ldr	r2, [r3, #0]
   11002:	4b1e      	ldr	r3, [pc, #120]	; (1107c <calculate_heading+0x15c>)
   11004:	2100      	movs	r1, #0
   11006:	1c10      	adds	r0, r2, #0
   11008:	4798      	blx	r3
   1100a:	1e03      	subs	r3, r0, #0
   1100c:	d1ed      	bne.n	10fea <calculate_heading+0xca>
	while(heading > 360){ heading = heading - 360; }
   1100e:	e009      	b.n	11024 <calculate_heading+0x104>
   11010:	4b17      	ldr	r3, [pc, #92]	; (11070 <calculate_heading+0x150>)
   11012:	681a      	ldr	r2, [r3, #0]
   11014:	4b1a      	ldr	r3, [pc, #104]	; (11080 <calculate_heading+0x160>)
   11016:	4918      	ldr	r1, [pc, #96]	; (11078 <calculate_heading+0x158>)
   11018:	1c10      	adds	r0, r2, #0
   1101a:	4798      	blx	r3
   1101c:	1c03      	adds	r3, r0, #0
   1101e:	1c1a      	adds	r2, r3, #0
   11020:	4b13      	ldr	r3, [pc, #76]	; (11070 <calculate_heading+0x150>)
   11022:	601a      	str	r2, [r3, #0]
   11024:	4b12      	ldr	r3, [pc, #72]	; (11070 <calculate_heading+0x150>)
   11026:	681a      	ldr	r2, [r3, #0]
   11028:	4b16      	ldr	r3, [pc, #88]	; (11084 <calculate_heading+0x164>)
   1102a:	4913      	ldr	r1, [pc, #76]	; (11078 <calculate_heading+0x158>)
   1102c:	1c10      	adds	r0, r2, #0
   1102e:	4798      	blx	r3
   11030:	1e03      	subs	r3, r0, #0
   11032:	d1ed      	bne.n	11010 <calculate_heading+0xf0>
}
   11034:	46c0      	nop			; (mov r8, r8)
   11036:	46bd      	mov	sp, r7
   11038:	bdb0      	pop	{r4, r5, r7, pc}
   1103a:	46c0      	nop			; (mov r8, r8)
   1103c:	00009f65 	.word	0x00009f65
   11040:	20000388 	.word	0x20000388
   11044:	20000380 	.word	0x20000380
   11048:	0001a299 	.word	0x0001a299
   1104c:	0001be21 	.word	0x0001be21
   11050:	000194d5 	.word	0x000194d5
   11054:	3fe00000 	.word	0x3fe00000
   11058:	2000038c 	.word	0x2000038c
   1105c:	0008bcf6 	.word	0x0008bcf6
   11060:	0001a379 	.word	0x0001a379
   11064:	00019941 	.word	0x00019941
   11068:	447a0000 	.word	0x447a0000
   1106c:	00019d21 	.word	0x00019d21
   11070:	20000384 	.word	0x20000384
   11074:	0001961d 	.word	0x0001961d
   11078:	43b40000 	.word	0x43b40000
   1107c:	0001950d 	.word	0x0001950d
   11080:	00019f61 	.word	0x00019f61
   11084:	00019535 	.word	0x00019535

00011088 <update_kalman_limits>:
		setRightRGB(0,0,0);
		ERROR_LEDs()
	}
}*/

void update_kalman_limits(){
   11088:	b580      	push	{r7, lr}
   1108a:	af00      	add	r7, sp, #0
	if(axKalman > kalmanAX_max)
   1108c:	4b52      	ldr	r3, [pc, #328]	; (111d8 <update_kalman_limits+0x150>)
   1108e:	681a      	ldr	r2, [r3, #0]
   11090:	4b52      	ldr	r3, [pc, #328]	; (111dc <update_kalman_limits+0x154>)
   11092:	6819      	ldr	r1, [r3, #0]
   11094:	4b52      	ldr	r3, [pc, #328]	; (111e0 <update_kalman_limits+0x158>)
   11096:	1c10      	adds	r0, r2, #0
   11098:	4798      	blx	r3
   1109a:	1e03      	subs	r3, r0, #0
   1109c:	d004      	beq.n	110a8 <update_kalman_limits+0x20>
		kalmanAX_max = axKalman;
   1109e:	4b4e      	ldr	r3, [pc, #312]	; (111d8 <update_kalman_limits+0x150>)
   110a0:	681a      	ldr	r2, [r3, #0]
   110a2:	4b4e      	ldr	r3, [pc, #312]	; (111dc <update_kalman_limits+0x154>)
   110a4:	601a      	str	r2, [r3, #0]
   110a6:	e00c      	b.n	110c2 <update_kalman_limits+0x3a>
	else if(axKalman < kalmanAX_min)
   110a8:	4b4b      	ldr	r3, [pc, #300]	; (111d8 <update_kalman_limits+0x150>)
   110aa:	681a      	ldr	r2, [r3, #0]
   110ac:	4b4d      	ldr	r3, [pc, #308]	; (111e4 <update_kalman_limits+0x15c>)
   110ae:	6819      	ldr	r1, [r3, #0]
   110b0:	4b4d      	ldr	r3, [pc, #308]	; (111e8 <update_kalman_limits+0x160>)
   110b2:	1c10      	adds	r0, r2, #0
   110b4:	4798      	blx	r3
   110b6:	1e03      	subs	r3, r0, #0
   110b8:	d003      	beq.n	110c2 <update_kalman_limits+0x3a>
		kalmanAX_min = axKalman;
   110ba:	4b47      	ldr	r3, [pc, #284]	; (111d8 <update_kalman_limits+0x150>)
   110bc:	681a      	ldr	r2, [r3, #0]
   110be:	4b49      	ldr	r3, [pc, #292]	; (111e4 <update_kalman_limits+0x15c>)
   110c0:	601a      	str	r2, [r3, #0]

	if(ayKalman > kalmanAY_max)
   110c2:	4b4a      	ldr	r3, [pc, #296]	; (111ec <update_kalman_limits+0x164>)
   110c4:	681a      	ldr	r2, [r3, #0]
   110c6:	4b4a      	ldr	r3, [pc, #296]	; (111f0 <update_kalman_limits+0x168>)
   110c8:	6819      	ldr	r1, [r3, #0]
   110ca:	4b45      	ldr	r3, [pc, #276]	; (111e0 <update_kalman_limits+0x158>)
   110cc:	1c10      	adds	r0, r2, #0
   110ce:	4798      	blx	r3
   110d0:	1e03      	subs	r3, r0, #0
   110d2:	d004      	beq.n	110de <update_kalman_limits+0x56>
		kalmanAY_max = ayKalman;
   110d4:	4b45      	ldr	r3, [pc, #276]	; (111ec <update_kalman_limits+0x164>)
   110d6:	681a      	ldr	r2, [r3, #0]
   110d8:	4b45      	ldr	r3, [pc, #276]	; (111f0 <update_kalman_limits+0x168>)
   110da:	601a      	str	r2, [r3, #0]
   110dc:	e00c      	b.n	110f8 <update_kalman_limits+0x70>
	else if(ayKalman < kalmanAY_min)
   110de:	4b43      	ldr	r3, [pc, #268]	; (111ec <update_kalman_limits+0x164>)
   110e0:	681a      	ldr	r2, [r3, #0]
   110e2:	4b44      	ldr	r3, [pc, #272]	; (111f4 <update_kalman_limits+0x16c>)
   110e4:	6819      	ldr	r1, [r3, #0]
   110e6:	4b40      	ldr	r3, [pc, #256]	; (111e8 <update_kalman_limits+0x160>)
   110e8:	1c10      	adds	r0, r2, #0
   110ea:	4798      	blx	r3
   110ec:	1e03      	subs	r3, r0, #0
   110ee:	d003      	beq.n	110f8 <update_kalman_limits+0x70>
		kalmanAY_min = ayKalman;
   110f0:	4b3e      	ldr	r3, [pc, #248]	; (111ec <update_kalman_limits+0x164>)
   110f2:	681a      	ldr	r2, [r3, #0]
   110f4:	4b3f      	ldr	r3, [pc, #252]	; (111f4 <update_kalman_limits+0x16c>)
   110f6:	601a      	str	r2, [r3, #0]

	if(azKalman > kalmanAZ_max)
   110f8:	4b3f      	ldr	r3, [pc, #252]	; (111f8 <update_kalman_limits+0x170>)
   110fa:	681a      	ldr	r2, [r3, #0]
   110fc:	4b3f      	ldr	r3, [pc, #252]	; (111fc <update_kalman_limits+0x174>)
   110fe:	6819      	ldr	r1, [r3, #0]
   11100:	4b37      	ldr	r3, [pc, #220]	; (111e0 <update_kalman_limits+0x158>)
   11102:	1c10      	adds	r0, r2, #0
   11104:	4798      	blx	r3
   11106:	1e03      	subs	r3, r0, #0
   11108:	d004      	beq.n	11114 <update_kalman_limits+0x8c>
		kalmanAZ_max = azKalman;
   1110a:	4b3b      	ldr	r3, [pc, #236]	; (111f8 <update_kalman_limits+0x170>)
   1110c:	681a      	ldr	r2, [r3, #0]
   1110e:	4b3b      	ldr	r3, [pc, #236]	; (111fc <update_kalman_limits+0x174>)
   11110:	601a      	str	r2, [r3, #0]
   11112:	e00c      	b.n	1112e <update_kalman_limits+0xa6>
	else if(azKalman < kalmanAZ_min)
   11114:	4b38      	ldr	r3, [pc, #224]	; (111f8 <update_kalman_limits+0x170>)
   11116:	681a      	ldr	r2, [r3, #0]
   11118:	4b39      	ldr	r3, [pc, #228]	; (11200 <update_kalman_limits+0x178>)
   1111a:	6819      	ldr	r1, [r3, #0]
   1111c:	4b32      	ldr	r3, [pc, #200]	; (111e8 <update_kalman_limits+0x160>)
   1111e:	1c10      	adds	r0, r2, #0
   11120:	4798      	blx	r3
   11122:	1e03      	subs	r3, r0, #0
   11124:	d003      	beq.n	1112e <update_kalman_limits+0xa6>
		kalmanAZ_min = azKalman;
   11126:	4b34      	ldr	r3, [pc, #208]	; (111f8 <update_kalman_limits+0x170>)
   11128:	681a      	ldr	r2, [r3, #0]
   1112a:	4b35      	ldr	r3, [pc, #212]	; (11200 <update_kalman_limits+0x178>)
   1112c:	601a      	str	r2, [r3, #0]
	
	if(gxKalman > kalmanGX_max)
   1112e:	4b35      	ldr	r3, [pc, #212]	; (11204 <update_kalman_limits+0x17c>)
   11130:	681a      	ldr	r2, [r3, #0]
   11132:	4b35      	ldr	r3, [pc, #212]	; (11208 <update_kalman_limits+0x180>)
   11134:	6819      	ldr	r1, [r3, #0]
   11136:	4b2a      	ldr	r3, [pc, #168]	; (111e0 <update_kalman_limits+0x158>)
   11138:	1c10      	adds	r0, r2, #0
   1113a:	4798      	blx	r3
   1113c:	1e03      	subs	r3, r0, #0
   1113e:	d004      	beq.n	1114a <update_kalman_limits+0xc2>
		kalmanGX_max = gxKalman;
   11140:	4b30      	ldr	r3, [pc, #192]	; (11204 <update_kalman_limits+0x17c>)
   11142:	681a      	ldr	r2, [r3, #0]
   11144:	4b30      	ldr	r3, [pc, #192]	; (11208 <update_kalman_limits+0x180>)
   11146:	601a      	str	r2, [r3, #0]
   11148:	e00c      	b.n	11164 <update_kalman_limits+0xdc>
	else if(gxKalman < kalmanGX_min)
   1114a:	4b2e      	ldr	r3, [pc, #184]	; (11204 <update_kalman_limits+0x17c>)
   1114c:	681a      	ldr	r2, [r3, #0]
   1114e:	4b2f      	ldr	r3, [pc, #188]	; (1120c <update_kalman_limits+0x184>)
   11150:	6819      	ldr	r1, [r3, #0]
   11152:	4b25      	ldr	r3, [pc, #148]	; (111e8 <update_kalman_limits+0x160>)
   11154:	1c10      	adds	r0, r2, #0
   11156:	4798      	blx	r3
   11158:	1e03      	subs	r3, r0, #0
   1115a:	d003      	beq.n	11164 <update_kalman_limits+0xdc>
		kalmanGX_min = gxKalman;
   1115c:	4b29      	ldr	r3, [pc, #164]	; (11204 <update_kalman_limits+0x17c>)
   1115e:	681a      	ldr	r2, [r3, #0]
   11160:	4b2a      	ldr	r3, [pc, #168]	; (1120c <update_kalman_limits+0x184>)
   11162:	601a      	str	r2, [r3, #0]

	if(gyKalman > kalmanGY_max)
   11164:	4b2a      	ldr	r3, [pc, #168]	; (11210 <update_kalman_limits+0x188>)
   11166:	681a      	ldr	r2, [r3, #0]
   11168:	4b2a      	ldr	r3, [pc, #168]	; (11214 <update_kalman_limits+0x18c>)
   1116a:	6819      	ldr	r1, [r3, #0]
   1116c:	4b1c      	ldr	r3, [pc, #112]	; (111e0 <update_kalman_limits+0x158>)
   1116e:	1c10      	adds	r0, r2, #0
   11170:	4798      	blx	r3
   11172:	1e03      	subs	r3, r0, #0
   11174:	d004      	beq.n	11180 <update_kalman_limits+0xf8>
		kalmanGY_max = gyKalman;
   11176:	4b26      	ldr	r3, [pc, #152]	; (11210 <update_kalman_limits+0x188>)
   11178:	681a      	ldr	r2, [r3, #0]
   1117a:	4b26      	ldr	r3, [pc, #152]	; (11214 <update_kalman_limits+0x18c>)
   1117c:	601a      	str	r2, [r3, #0]
   1117e:	e00c      	b.n	1119a <update_kalman_limits+0x112>
	else if(gyKalman < kalmanGY_min)
   11180:	4b23      	ldr	r3, [pc, #140]	; (11210 <update_kalman_limits+0x188>)
   11182:	681a      	ldr	r2, [r3, #0]
   11184:	4b24      	ldr	r3, [pc, #144]	; (11218 <update_kalman_limits+0x190>)
   11186:	6819      	ldr	r1, [r3, #0]
   11188:	4b17      	ldr	r3, [pc, #92]	; (111e8 <update_kalman_limits+0x160>)
   1118a:	1c10      	adds	r0, r2, #0
   1118c:	4798      	blx	r3
   1118e:	1e03      	subs	r3, r0, #0
   11190:	d003      	beq.n	1119a <update_kalman_limits+0x112>
		kalmanGY_min = gyKalman;
   11192:	4b1f      	ldr	r3, [pc, #124]	; (11210 <update_kalman_limits+0x188>)
   11194:	681a      	ldr	r2, [r3, #0]
   11196:	4b20      	ldr	r3, [pc, #128]	; (11218 <update_kalman_limits+0x190>)
   11198:	601a      	str	r2, [r3, #0]

	if(gzKalman > kalmanAZ_max)
   1119a:	4b20      	ldr	r3, [pc, #128]	; (1121c <update_kalman_limits+0x194>)
   1119c:	681a      	ldr	r2, [r3, #0]
   1119e:	4b17      	ldr	r3, [pc, #92]	; (111fc <update_kalman_limits+0x174>)
   111a0:	6819      	ldr	r1, [r3, #0]
   111a2:	4b0f      	ldr	r3, [pc, #60]	; (111e0 <update_kalman_limits+0x158>)
   111a4:	1c10      	adds	r0, r2, #0
   111a6:	4798      	blx	r3
   111a8:	1e03      	subs	r3, r0, #0
   111aa:	d004      	beq.n	111b6 <update_kalman_limits+0x12e>
		kalmanGZ_max = gzKalman;
   111ac:	4b1b      	ldr	r3, [pc, #108]	; (1121c <update_kalman_limits+0x194>)
   111ae:	681a      	ldr	r2, [r3, #0]
   111b0:	4b1b      	ldr	r3, [pc, #108]	; (11220 <update_kalman_limits+0x198>)
   111b2:	601a      	str	r2, [r3, #0]
	else if(gzKalman < kalmanGZ_min)
		kalmanGZ_min = gzKalman;
}
   111b4:	e00d      	b.n	111d2 <update_kalman_limits+0x14a>
	else if(gzKalman < kalmanGZ_min)
   111b6:	4b19      	ldr	r3, [pc, #100]	; (1121c <update_kalman_limits+0x194>)
   111b8:	681a      	ldr	r2, [r3, #0]
   111ba:	4b1a      	ldr	r3, [pc, #104]	; (11224 <update_kalman_limits+0x19c>)
   111bc:	6819      	ldr	r1, [r3, #0]
   111be:	4b0a      	ldr	r3, [pc, #40]	; (111e8 <update_kalman_limits+0x160>)
   111c0:	1c10      	adds	r0, r2, #0
   111c2:	4798      	blx	r3
   111c4:	1e03      	subs	r3, r0, #0
   111c6:	d100      	bne.n	111ca <update_kalman_limits+0x142>
}
   111c8:	e003      	b.n	111d2 <update_kalman_limits+0x14a>
		kalmanGZ_min = gzKalman;
   111ca:	4b14      	ldr	r3, [pc, #80]	; (1121c <update_kalman_limits+0x194>)
   111cc:	681a      	ldr	r2, [r3, #0]
   111ce:	4b15      	ldr	r3, [pc, #84]	; (11224 <update_kalman_limits+0x19c>)
   111d0:	601a      	str	r2, [r3, #0]
}
   111d2:	46c0      	nop			; (mov r8, r8)
   111d4:	46bd      	mov	sp, r7
   111d6:	bd80      	pop	{r7, pc}
   111d8:	2000036c 	.word	0x2000036c
   111dc:	20000010 	.word	0x20000010
   111e0:	00019535 	.word	0x00019535
   111e4:	2000000c 	.word	0x2000000c
   111e8:	0001950d 	.word	0x0001950d
   111ec:	20000370 	.word	0x20000370
   111f0:	20000018 	.word	0x20000018
   111f4:	20000014 	.word	0x20000014
   111f8:	20000374 	.word	0x20000374
   111fc:	20000020 	.word	0x20000020
   11200:	2000001c 	.word	0x2000001c
   11204:	20000378 	.word	0x20000378
   11208:	20000028 	.word	0x20000028
   1120c:	20000024 	.word	0x20000024
   11210:	2000037c 	.word	0x2000037c
   11214:	20000030 	.word	0x20000030
   11218:	2000002c 	.word	0x2000002c
   1121c:	20000380 	.word	0x20000380
   11220:	20000038 	.word	0x20000038
   11224:	20000034 	.word	0x20000034

00011228 <averageAX>:

int16_t averageAX(){
   11228:	b580      	push	{r7, lr}
   1122a:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	AXtotal -= AXaverage[sample_index];
   1122c:	4b18      	ldr	r3, [pc, #96]	; (11290 <averageAX+0x68>)
   1122e:	681a      	ldr	r2, [r3, #0]
   11230:	4b18      	ldr	r3, [pc, #96]	; (11294 <averageAX+0x6c>)
   11232:	6819      	ldr	r1, [r3, #0]
   11234:	4b18      	ldr	r3, [pc, #96]	; (11298 <averageAX+0x70>)
   11236:	0049      	lsls	r1, r1, #1
   11238:	5ecb      	ldrsh	r3, [r1, r3]
   1123a:	1ad2      	subs	r2, r2, r3
   1123c:	4b14      	ldr	r3, [pc, #80]	; (11290 <averageAX+0x68>)
   1123e:	601a      	str	r2, [r3, #0]
	AXtotal += cax;
   11240:	4b16      	ldr	r3, [pc, #88]	; (1129c <averageAX+0x74>)
   11242:	2200      	movs	r2, #0
   11244:	5e9b      	ldrsh	r3, [r3, r2]
   11246:	001a      	movs	r2, r3
   11248:	4b11      	ldr	r3, [pc, #68]	; (11290 <averageAX+0x68>)
   1124a:	681b      	ldr	r3, [r3, #0]
   1124c:	18d2      	adds	r2, r2, r3
   1124e:	4b10      	ldr	r3, [pc, #64]	; (11290 <averageAX+0x68>)
   11250:	601a      	str	r2, [r3, #0]
	AXaverage[sample_index] = cax;
   11252:	4b10      	ldr	r3, [pc, #64]	; (11294 <averageAX+0x6c>)
   11254:	681a      	ldr	r2, [r3, #0]
   11256:	4b11      	ldr	r3, [pc, #68]	; (1129c <averageAX+0x74>)
   11258:	2100      	movs	r1, #0
   1125a:	5e59      	ldrsh	r1, [r3, r1]
   1125c:	4b0e      	ldr	r3, [pc, #56]	; (11298 <averageAX+0x70>)
   1125e:	0052      	lsls	r2, r2, #1
   11260:	52d1      	strh	r1, [r2, r3]
	
	sample_index++;
   11262:	4b0c      	ldr	r3, [pc, #48]	; (11294 <averageAX+0x6c>)
   11264:	681b      	ldr	r3, [r3, #0]
   11266:	1c5a      	adds	r2, r3, #1
   11268:	4b0a      	ldr	r3, [pc, #40]	; (11294 <averageAX+0x6c>)
   1126a:	601a      	str	r2, [r3, #0]
	if(sample_index == ACCELXYsamples)
   1126c:	4b09      	ldr	r3, [pc, #36]	; (11294 <averageAX+0x6c>)
   1126e:	681b      	ldr	r3, [r3, #0]
   11270:	2b64      	cmp	r3, #100	; 0x64
   11272:	d102      	bne.n	1127a <averageAX+0x52>
	sample_index = 0;
   11274:	4b07      	ldr	r3, [pc, #28]	; (11294 <averageAX+0x6c>)
   11276:	2200      	movs	r2, #0
   11278:	601a      	str	r2, [r3, #0]

	return (int16_t)(AXtotal/ACCELXYsamples);
   1127a:	4b05      	ldr	r3, [pc, #20]	; (11290 <averageAX+0x68>)
   1127c:	681a      	ldr	r2, [r3, #0]
   1127e:	4b08      	ldr	r3, [pc, #32]	; (112a0 <averageAX+0x78>)
   11280:	2164      	movs	r1, #100	; 0x64
   11282:	0010      	movs	r0, r2
   11284:	4798      	blx	r3
   11286:	0003      	movs	r3, r0
   11288:	b21b      	sxth	r3, r3
}
   1128a:	0018      	movs	r0, r3
   1128c:	46bd      	mov	sp, r7
   1128e:	bd80      	pop	{r7, pc}
   11290:	20000340 	.word	0x20000340
   11294:	2000048c 	.word	0x2000048c
   11298:	20001144 	.word	0x20001144
   1129c:	20000330 	.word	0x20000330
   112a0:	00019295 	.word	0x00019295

000112a4 <averageAY>:

int16_t averageAY(){
   112a4:	b580      	push	{r7, lr}
   112a6:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	AYtotal -= AYaverage[sample_index];
   112a8:	4b18      	ldr	r3, [pc, #96]	; (1130c <averageAY+0x68>)
   112aa:	681a      	ldr	r2, [r3, #0]
   112ac:	4b18      	ldr	r3, [pc, #96]	; (11310 <averageAY+0x6c>)
   112ae:	6819      	ldr	r1, [r3, #0]
   112b0:	4b18      	ldr	r3, [pc, #96]	; (11314 <averageAY+0x70>)
   112b2:	0049      	lsls	r1, r1, #1
   112b4:	5ecb      	ldrsh	r3, [r1, r3]
   112b6:	1ad2      	subs	r2, r2, r3
   112b8:	4b14      	ldr	r3, [pc, #80]	; (1130c <averageAY+0x68>)
   112ba:	601a      	str	r2, [r3, #0]
	AYtotal += cay;
   112bc:	4b16      	ldr	r3, [pc, #88]	; (11318 <averageAY+0x74>)
   112be:	2200      	movs	r2, #0
   112c0:	5e9b      	ldrsh	r3, [r3, r2]
   112c2:	001a      	movs	r2, r3
   112c4:	4b11      	ldr	r3, [pc, #68]	; (1130c <averageAY+0x68>)
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	18d2      	adds	r2, r2, r3
   112ca:	4b10      	ldr	r3, [pc, #64]	; (1130c <averageAY+0x68>)
   112cc:	601a      	str	r2, [r3, #0]
	AYaverage[sample_index] = cay;
   112ce:	4b10      	ldr	r3, [pc, #64]	; (11310 <averageAY+0x6c>)
   112d0:	681a      	ldr	r2, [r3, #0]
   112d2:	4b11      	ldr	r3, [pc, #68]	; (11318 <averageAY+0x74>)
   112d4:	2100      	movs	r1, #0
   112d6:	5e59      	ldrsh	r1, [r3, r1]
   112d8:	4b0e      	ldr	r3, [pc, #56]	; (11314 <averageAY+0x70>)
   112da:	0052      	lsls	r2, r2, #1
   112dc:	52d1      	strh	r1, [r2, r3]
	
	sample_index++;
   112de:	4b0c      	ldr	r3, [pc, #48]	; (11310 <averageAY+0x6c>)
   112e0:	681b      	ldr	r3, [r3, #0]
   112e2:	1c5a      	adds	r2, r3, #1
   112e4:	4b0a      	ldr	r3, [pc, #40]	; (11310 <averageAY+0x6c>)
   112e6:	601a      	str	r2, [r3, #0]
	if(sample_index == ACCELXYsamples)
   112e8:	4b09      	ldr	r3, [pc, #36]	; (11310 <averageAY+0x6c>)
   112ea:	681b      	ldr	r3, [r3, #0]
   112ec:	2b64      	cmp	r3, #100	; 0x64
   112ee:	d102      	bne.n	112f6 <averageAY+0x52>
	sample_index = 0;
   112f0:	4b07      	ldr	r3, [pc, #28]	; (11310 <averageAY+0x6c>)
   112f2:	2200      	movs	r2, #0
   112f4:	601a      	str	r2, [r3, #0]

	return (int16_t)(AYtotal/ACCELXYsamples);
   112f6:	4b05      	ldr	r3, [pc, #20]	; (1130c <averageAY+0x68>)
   112f8:	681a      	ldr	r2, [r3, #0]
   112fa:	4b08      	ldr	r3, [pc, #32]	; (1131c <averageAY+0x78>)
   112fc:	2164      	movs	r1, #100	; 0x64
   112fe:	0010      	movs	r0, r2
   11300:	4798      	blx	r3
   11302:	0003      	movs	r3, r0
   11304:	b21b      	sxth	r3, r3
}
   11306:	0018      	movs	r0, r3
   11308:	46bd      	mov	sp, r7
   1130a:	bd80      	pop	{r7, pc}
   1130c:	20000344 	.word	0x20000344
   11310:	20000490 	.word	0x20000490
   11314:	2000105c 	.word	0x2000105c
   11318:	20000332 	.word	0x20000332
   1131c:	00019295 	.word	0x00019295

00011320 <averageAZ>:

int16_t averageAZ(){
   11320:	b580      	push	{r7, lr}
   11322:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	AZtotal -= AZaverage[sample_index];
   11324:	4b18      	ldr	r3, [pc, #96]	; (11388 <averageAZ+0x68>)
   11326:	681a      	ldr	r2, [r3, #0]
   11328:	4b18      	ldr	r3, [pc, #96]	; (1138c <averageAZ+0x6c>)
   1132a:	6819      	ldr	r1, [r3, #0]
   1132c:	4b18      	ldr	r3, [pc, #96]	; (11390 <averageAZ+0x70>)
   1132e:	0049      	lsls	r1, r1, #1
   11330:	5ecb      	ldrsh	r3, [r1, r3]
   11332:	1ad2      	subs	r2, r2, r3
   11334:	4b14      	ldr	r3, [pc, #80]	; (11388 <averageAZ+0x68>)
   11336:	601a      	str	r2, [r3, #0]
	AZtotal += caz;
   11338:	4b16      	ldr	r3, [pc, #88]	; (11394 <averageAZ+0x74>)
   1133a:	2200      	movs	r2, #0
   1133c:	5e9b      	ldrsh	r3, [r3, r2]
   1133e:	001a      	movs	r2, r3
   11340:	4b11      	ldr	r3, [pc, #68]	; (11388 <averageAZ+0x68>)
   11342:	681b      	ldr	r3, [r3, #0]
   11344:	18d2      	adds	r2, r2, r3
   11346:	4b10      	ldr	r3, [pc, #64]	; (11388 <averageAZ+0x68>)
   11348:	601a      	str	r2, [r3, #0]
	AZaverage[sample_index] = caz;
   1134a:	4b10      	ldr	r3, [pc, #64]	; (1138c <averageAZ+0x6c>)
   1134c:	681a      	ldr	r2, [r3, #0]
   1134e:	4b11      	ldr	r3, [pc, #68]	; (11394 <averageAZ+0x74>)
   11350:	2100      	movs	r1, #0
   11352:	5e59      	ldrsh	r1, [r3, r1]
   11354:	4b0e      	ldr	r3, [pc, #56]	; (11390 <averageAZ+0x70>)
   11356:	0052      	lsls	r2, r2, #1
   11358:	52d1      	strh	r1, [r2, r3]

	sample_index++;
   1135a:	4b0c      	ldr	r3, [pc, #48]	; (1138c <averageAZ+0x6c>)
   1135c:	681b      	ldr	r3, [r3, #0]
   1135e:	1c5a      	adds	r2, r3, #1
   11360:	4b0a      	ldr	r3, [pc, #40]	; (1138c <averageAZ+0x6c>)
   11362:	601a      	str	r2, [r3, #0]
	if(sample_index == ACCELZsamples)
   11364:	4b09      	ldr	r3, [pc, #36]	; (1138c <averageAZ+0x6c>)
   11366:	681b      	ldr	r3, [r3, #0]
   11368:	2b96      	cmp	r3, #150	; 0x96
   1136a:	d102      	bne.n	11372 <averageAZ+0x52>
	sample_index = 0;
   1136c:	4b07      	ldr	r3, [pc, #28]	; (1138c <averageAZ+0x6c>)
   1136e:	2200      	movs	r2, #0
   11370:	601a      	str	r2, [r3, #0]

	return (int16_t)(AZtotal/ACCELZsamples);
   11372:	4b05      	ldr	r3, [pc, #20]	; (11388 <averageAZ+0x68>)
   11374:	681a      	ldr	r2, [r3, #0]
   11376:	4b08      	ldr	r3, [pc, #32]	; (11398 <averageAZ+0x78>)
   11378:	2196      	movs	r1, #150	; 0x96
   1137a:	0010      	movs	r0, r2
   1137c:	4798      	blx	r3
   1137e:	0003      	movs	r3, r0
   11380:	b21b      	sxth	r3, r3
}
   11382:	0018      	movs	r0, r3
   11384:	46bd      	mov	sp, r7
   11386:	bd80      	pop	{r7, pc}
   11388:	20000348 	.word	0x20000348
   1138c:	20000494 	.word	0x20000494
   11390:	20000e78 	.word	0x20000e78
   11394:	20000334 	.word	0x20000334
   11398:	00019295 	.word	0x00019295

0001139c <averageGX>:

float averageGX(){
   1139c:	b5b0      	push	{r4, r5, r7, lr}
   1139e:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	GXtotal -= GXaverage[sample_index];
   113a0:	4b1f      	ldr	r3, [pc, #124]	; (11420 <averageGX+0x84>)
   113a2:	6818      	ldr	r0, [r3, #0]
   113a4:	4b1f      	ldr	r3, [pc, #124]	; (11424 <averageGX+0x88>)
   113a6:	681a      	ldr	r2, [r3, #0]
   113a8:	4b1f      	ldr	r3, [pc, #124]	; (11428 <averageGX+0x8c>)
   113aa:	0092      	lsls	r2, r2, #2
   113ac:	58d2      	ldr	r2, [r2, r3]
   113ae:	4b1f      	ldr	r3, [pc, #124]	; (1142c <averageGX+0x90>)
   113b0:	1c11      	adds	r1, r2, #0
   113b2:	4798      	blx	r3
   113b4:	1c03      	adds	r3, r0, #0
   113b6:	1c1a      	adds	r2, r3, #0
   113b8:	4b19      	ldr	r3, [pc, #100]	; (11420 <averageGX+0x84>)
   113ba:	601a      	str	r2, [r3, #0]
	GXtotal += calcGyro(cgx);
   113bc:	4b1c      	ldr	r3, [pc, #112]	; (11430 <averageGX+0x94>)
   113be:	2200      	movs	r2, #0
   113c0:	5e9b      	ldrsh	r3, [r3, r2]
   113c2:	0018      	movs	r0, r3
   113c4:	4b1b      	ldr	r3, [pc, #108]	; (11434 <averageGX+0x98>)
   113c6:	4798      	blx	r3
   113c8:	4b15      	ldr	r3, [pc, #84]	; (11420 <averageGX+0x84>)
   113ca:	681a      	ldr	r2, [r3, #0]
   113cc:	4b1a      	ldr	r3, [pc, #104]	; (11438 <averageGX+0x9c>)
   113ce:	1c11      	adds	r1, r2, #0
   113d0:	4798      	blx	r3
   113d2:	1c03      	adds	r3, r0, #0
   113d4:	1c1a      	adds	r2, r3, #0
   113d6:	4b12      	ldr	r3, [pc, #72]	; (11420 <averageGX+0x84>)
   113d8:	601a      	str	r2, [r3, #0]
	GXaverage[sample_index] = calcGyro(cgx);
   113da:	4b12      	ldr	r3, [pc, #72]	; (11424 <averageGX+0x88>)
   113dc:	681c      	ldr	r4, [r3, #0]
   113de:	4b14      	ldr	r3, [pc, #80]	; (11430 <averageGX+0x94>)
   113e0:	2200      	movs	r2, #0
   113e2:	5e9b      	ldrsh	r3, [r3, r2]
   113e4:	0018      	movs	r0, r3
   113e6:	4b13      	ldr	r3, [pc, #76]	; (11434 <averageGX+0x98>)
   113e8:	4798      	blx	r3
   113ea:	1c01      	adds	r1, r0, #0
   113ec:	4b0e      	ldr	r3, [pc, #56]	; (11428 <averageGX+0x8c>)
   113ee:	00a2      	lsls	r2, r4, #2
   113f0:	50d1      	str	r1, [r2, r3]

	sample_index++;
   113f2:	4b0c      	ldr	r3, [pc, #48]	; (11424 <averageGX+0x88>)
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	1c5a      	adds	r2, r3, #1
   113f8:	4b0a      	ldr	r3, [pc, #40]	; (11424 <averageGX+0x88>)
   113fa:	601a      	str	r2, [r3, #0]
	if(sample_index == GYROsamples)
   113fc:	4b09      	ldr	r3, [pc, #36]	; (11424 <averageGX+0x88>)
   113fe:	681b      	ldr	r3, [r3, #0]
   11400:	2b05      	cmp	r3, #5
   11402:	d102      	bne.n	1140a <averageGX+0x6e>
	sample_index = 0;
   11404:	4b07      	ldr	r3, [pc, #28]	; (11424 <averageGX+0x88>)
   11406:	2200      	movs	r2, #0
   11408:	601a      	str	r2, [r3, #0]

	return (GXtotal/GYROsamples);
   1140a:	4b05      	ldr	r3, [pc, #20]	; (11420 <averageGX+0x84>)
   1140c:	681a      	ldr	r2, [r3, #0]
   1140e:	4b0b      	ldr	r3, [pc, #44]	; (1143c <averageGX+0xa0>)
   11410:	490b      	ldr	r1, [pc, #44]	; (11440 <averageGX+0xa4>)
   11412:	1c10      	adds	r0, r2, #0
   11414:	4798      	blx	r3
   11416:	1c03      	adds	r3, r0, #0
}
   11418:	1c18      	adds	r0, r3, #0
   1141a:	46bd      	mov	sp, r7
   1141c:	bdb0      	pop	{r4, r5, r7, pc}
   1141e:	46c0      	nop			; (mov r8, r8)
   11420:	2000034c 	.word	0x2000034c
   11424:	20000498 	.word	0x20000498
   11428:	20001adc 	.word	0x20001adc
   1142c:	00019f61 	.word	0x00019f61
   11430:	2000032a 	.word	0x2000032a
   11434:	0000fd09 	.word	0x0000fd09
   11438:	0001961d 	.word	0x0001961d
   1143c:	00019941 	.word	0x00019941
   11440:	40a00000 	.word	0x40a00000

00011444 <averageGY>:

float averageGY(){
   11444:	b5b0      	push	{r4, r5, r7, lr}
   11446:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	GYtotal -= GYaverage[sample_index];
   11448:	4b1f      	ldr	r3, [pc, #124]	; (114c8 <averageGY+0x84>)
   1144a:	6818      	ldr	r0, [r3, #0]
   1144c:	4b1f      	ldr	r3, [pc, #124]	; (114cc <averageGY+0x88>)
   1144e:	681a      	ldr	r2, [r3, #0]
   11450:	4b1f      	ldr	r3, [pc, #124]	; (114d0 <averageGY+0x8c>)
   11452:	0092      	lsls	r2, r2, #2
   11454:	58d2      	ldr	r2, [r2, r3]
   11456:	4b1f      	ldr	r3, [pc, #124]	; (114d4 <averageGY+0x90>)
   11458:	1c11      	adds	r1, r2, #0
   1145a:	4798      	blx	r3
   1145c:	1c03      	adds	r3, r0, #0
   1145e:	1c1a      	adds	r2, r3, #0
   11460:	4b19      	ldr	r3, [pc, #100]	; (114c8 <averageGY+0x84>)
   11462:	601a      	str	r2, [r3, #0]
	GYtotal += calcGyro(cgy);
   11464:	4b1c      	ldr	r3, [pc, #112]	; (114d8 <averageGY+0x94>)
   11466:	2200      	movs	r2, #0
   11468:	5e9b      	ldrsh	r3, [r3, r2]
   1146a:	0018      	movs	r0, r3
   1146c:	4b1b      	ldr	r3, [pc, #108]	; (114dc <averageGY+0x98>)
   1146e:	4798      	blx	r3
   11470:	4b15      	ldr	r3, [pc, #84]	; (114c8 <averageGY+0x84>)
   11472:	681a      	ldr	r2, [r3, #0]
   11474:	4b1a      	ldr	r3, [pc, #104]	; (114e0 <averageGY+0x9c>)
   11476:	1c11      	adds	r1, r2, #0
   11478:	4798      	blx	r3
   1147a:	1c03      	adds	r3, r0, #0
   1147c:	1c1a      	adds	r2, r3, #0
   1147e:	4b12      	ldr	r3, [pc, #72]	; (114c8 <averageGY+0x84>)
   11480:	601a      	str	r2, [r3, #0]
	GYaverage[sample_index] = calcGyro(cgy);
   11482:	4b12      	ldr	r3, [pc, #72]	; (114cc <averageGY+0x88>)
   11484:	681c      	ldr	r4, [r3, #0]
   11486:	4b14      	ldr	r3, [pc, #80]	; (114d8 <averageGY+0x94>)
   11488:	2200      	movs	r2, #0
   1148a:	5e9b      	ldrsh	r3, [r3, r2]
   1148c:	0018      	movs	r0, r3
   1148e:	4b13      	ldr	r3, [pc, #76]	; (114dc <averageGY+0x98>)
   11490:	4798      	blx	r3
   11492:	1c01      	adds	r1, r0, #0
   11494:	4b0e      	ldr	r3, [pc, #56]	; (114d0 <averageGY+0x8c>)
   11496:	00a2      	lsls	r2, r4, #2
   11498:	50d1      	str	r1, [r2, r3]

	sample_index++;
   1149a:	4b0c      	ldr	r3, [pc, #48]	; (114cc <averageGY+0x88>)
   1149c:	681b      	ldr	r3, [r3, #0]
   1149e:	1c5a      	adds	r2, r3, #1
   114a0:	4b0a      	ldr	r3, [pc, #40]	; (114cc <averageGY+0x88>)
   114a2:	601a      	str	r2, [r3, #0]
	if(sample_index == GYROsamples)
   114a4:	4b09      	ldr	r3, [pc, #36]	; (114cc <averageGY+0x88>)
   114a6:	681b      	ldr	r3, [r3, #0]
   114a8:	2b05      	cmp	r3, #5
   114aa:	d102      	bne.n	114b2 <averageGY+0x6e>
	sample_index = 0;
   114ac:	4b07      	ldr	r3, [pc, #28]	; (114cc <averageGY+0x88>)
   114ae:	2200      	movs	r2, #0
   114b0:	601a      	str	r2, [r3, #0]

	return (GYtotal/GYROsamples);
   114b2:	4b05      	ldr	r3, [pc, #20]	; (114c8 <averageGY+0x84>)
   114b4:	681a      	ldr	r2, [r3, #0]
   114b6:	4b0b      	ldr	r3, [pc, #44]	; (114e4 <averageGY+0xa0>)
   114b8:	490b      	ldr	r1, [pc, #44]	; (114e8 <averageGY+0xa4>)
   114ba:	1c10      	adds	r0, r2, #0
   114bc:	4798      	blx	r3
   114be:	1c03      	adds	r3, r0, #0
}
   114c0:	1c18      	adds	r0, r3, #0
   114c2:	46bd      	mov	sp, r7
   114c4:	bdb0      	pop	{r4, r5, r7, pc}
   114c6:	46c0      	nop			; (mov r8, r8)
   114c8:	20000350 	.word	0x20000350
   114cc:	2000049c 	.word	0x2000049c
   114d0:	20000fd0 	.word	0x20000fd0
   114d4:	00019f61 	.word	0x00019f61
   114d8:	2000032c 	.word	0x2000032c
   114dc:	0000fd09 	.word	0x0000fd09
   114e0:	0001961d 	.word	0x0001961d
   114e4:	00019941 	.word	0x00019941
   114e8:	40a00000 	.word	0x40a00000

000114ec <averageGZ>:

float averageGZ(){
   114ec:	b5b0      	push	{r4, r5, r7, lr}
   114ee:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	GZtotal -= GZaverage[sample_index];
   114f0:	4b1f      	ldr	r3, [pc, #124]	; (11570 <averageGZ+0x84>)
   114f2:	6818      	ldr	r0, [r3, #0]
   114f4:	4b1f      	ldr	r3, [pc, #124]	; (11574 <averageGZ+0x88>)
   114f6:	681a      	ldr	r2, [r3, #0]
   114f8:	4b1f      	ldr	r3, [pc, #124]	; (11578 <averageGZ+0x8c>)
   114fa:	0092      	lsls	r2, r2, #2
   114fc:	58d2      	ldr	r2, [r2, r3]
   114fe:	4b1f      	ldr	r3, [pc, #124]	; (1157c <averageGZ+0x90>)
   11500:	1c11      	adds	r1, r2, #0
   11502:	4798      	blx	r3
   11504:	1c03      	adds	r3, r0, #0
   11506:	1c1a      	adds	r2, r3, #0
   11508:	4b19      	ldr	r3, [pc, #100]	; (11570 <averageGZ+0x84>)
   1150a:	601a      	str	r2, [r3, #0]
	GZtotal += calcGyro(cgz);
   1150c:	4b1c      	ldr	r3, [pc, #112]	; (11580 <averageGZ+0x94>)
   1150e:	2200      	movs	r2, #0
   11510:	5e9b      	ldrsh	r3, [r3, r2]
   11512:	0018      	movs	r0, r3
   11514:	4b1b      	ldr	r3, [pc, #108]	; (11584 <averageGZ+0x98>)
   11516:	4798      	blx	r3
   11518:	4b15      	ldr	r3, [pc, #84]	; (11570 <averageGZ+0x84>)
   1151a:	681a      	ldr	r2, [r3, #0]
   1151c:	4b1a      	ldr	r3, [pc, #104]	; (11588 <averageGZ+0x9c>)
   1151e:	1c11      	adds	r1, r2, #0
   11520:	4798      	blx	r3
   11522:	1c03      	adds	r3, r0, #0
   11524:	1c1a      	adds	r2, r3, #0
   11526:	4b12      	ldr	r3, [pc, #72]	; (11570 <averageGZ+0x84>)
   11528:	601a      	str	r2, [r3, #0]
	GZaverage[sample_index] = calcGyro(cgz);
   1152a:	4b12      	ldr	r3, [pc, #72]	; (11574 <averageGZ+0x88>)
   1152c:	681c      	ldr	r4, [r3, #0]
   1152e:	4b14      	ldr	r3, [pc, #80]	; (11580 <averageGZ+0x94>)
   11530:	2200      	movs	r2, #0
   11532:	5e9b      	ldrsh	r3, [r3, r2]
   11534:	0018      	movs	r0, r3
   11536:	4b13      	ldr	r3, [pc, #76]	; (11584 <averageGZ+0x98>)
   11538:	4798      	blx	r3
   1153a:	1c01      	adds	r1, r0, #0
   1153c:	4b0e      	ldr	r3, [pc, #56]	; (11578 <averageGZ+0x8c>)
   1153e:	00a2      	lsls	r2, r4, #2
   11540:	50d1      	str	r1, [r2, r3]

	sample_index++;
   11542:	4b0c      	ldr	r3, [pc, #48]	; (11574 <averageGZ+0x88>)
   11544:	681b      	ldr	r3, [r3, #0]
   11546:	1c5a      	adds	r2, r3, #1
   11548:	4b0a      	ldr	r3, [pc, #40]	; (11574 <averageGZ+0x88>)
   1154a:	601a      	str	r2, [r3, #0]
	if(sample_index == GYROsamples)
   1154c:	4b09      	ldr	r3, [pc, #36]	; (11574 <averageGZ+0x88>)
   1154e:	681b      	ldr	r3, [r3, #0]
   11550:	2b05      	cmp	r3, #5
   11552:	d102      	bne.n	1155a <averageGZ+0x6e>
	sample_index = 0;
   11554:	4b07      	ldr	r3, [pc, #28]	; (11574 <averageGZ+0x88>)
   11556:	2200      	movs	r2, #0
   11558:	601a      	str	r2, [r3, #0]

	return (GZtotal/GYROsamples);
   1155a:	4b05      	ldr	r3, [pc, #20]	; (11570 <averageGZ+0x84>)
   1155c:	681a      	ldr	r2, [r3, #0]
   1155e:	4b0b      	ldr	r3, [pc, #44]	; (1158c <averageGZ+0xa0>)
   11560:	490b      	ldr	r1, [pc, #44]	; (11590 <averageGZ+0xa4>)
   11562:	1c10      	adds	r0, r2, #0
   11564:	4798      	blx	r3
   11566:	1c03      	adds	r3, r0, #0
}
   11568:	1c18      	adds	r0, r3, #0
   1156a:	46bd      	mov	sp, r7
   1156c:	bdb0      	pop	{r4, r5, r7, pc}
   1156e:	46c0      	nop			; (mov r8, r8)
   11570:	20000354 	.word	0x20000354
   11574:	200004a0 	.word	0x200004a0
   11578:	20001590 	.word	0x20001590
   1157c:	00019f61 	.word	0x00019f61
   11580:	2000032e 	.word	0x2000032e
   11584:	0000fd09 	.word	0x0000fd09
   11588:	0001961d 	.word	0x0001961d
   1158c:	00019941 	.word	0x00019941
   11590:	40a00000 	.word	0x40a00000

00011594 <initKalman>:

void initKalman(float meas, float est, float _q)
{
   11594:	b580      	push	{r7, lr}
   11596:	b086      	sub	sp, #24
   11598:	af00      	add	r7, sp, #0
   1159a:	60f8      	str	r0, [r7, #12]
   1159c:	60b9      	str	r1, [r7, #8]
   1159e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < KalmanArraySize; i++){
   115a0:	2300      	movs	r3, #0
   115a2:	617b      	str	r3, [r7, #20]
   115a4:	e020      	b.n	115e8 <initKalman+0x54>
		err_measure[i] = meas;
   115a6:	4b26      	ldr	r3, [pc, #152]	; (11640 <initKalman+0xac>)
   115a8:	697a      	ldr	r2, [r7, #20]
   115aa:	0092      	lsls	r2, r2, #2
   115ac:	68f9      	ldr	r1, [r7, #12]
   115ae:	50d1      	str	r1, [r2, r3]
		err_estimate[i] = est;
   115b0:	4b24      	ldr	r3, [pc, #144]	; (11644 <initKalman+0xb0>)
   115b2:	697a      	ldr	r2, [r7, #20]
   115b4:	0092      	lsls	r2, r2, #2
   115b6:	68b9      	ldr	r1, [r7, #8]
   115b8:	50d1      	str	r1, [r2, r3]
		q[i] = _q;
   115ba:	4b23      	ldr	r3, [pc, #140]	; (11648 <initKalman+0xb4>)
   115bc:	697a      	ldr	r2, [r7, #20]
   115be:	0092      	lsls	r2, r2, #2
   115c0:	6879      	ldr	r1, [r7, #4]
   115c2:	50d1      	str	r1, [r2, r3]
		current_estimate[i] = 0;
   115c4:	4b21      	ldr	r3, [pc, #132]	; (1164c <initKalman+0xb8>)
   115c6:	697a      	ldr	r2, [r7, #20]
   115c8:	0092      	lsls	r2, r2, #2
   115ca:	2100      	movs	r1, #0
   115cc:	50d1      	str	r1, [r2, r3]
		last_estimate[i] = 0;
   115ce:	4b20      	ldr	r3, [pc, #128]	; (11650 <initKalman+0xbc>)
   115d0:	697a      	ldr	r2, [r7, #20]
   115d2:	0092      	lsls	r2, r2, #2
   115d4:	2100      	movs	r1, #0
   115d6:	50d1      	str	r1, [r2, r3]
		kalman_gain[i] = 0;
   115d8:	4b1e      	ldr	r3, [pc, #120]	; (11654 <initKalman+0xc0>)
   115da:	697a      	ldr	r2, [r7, #20]
   115dc:	0092      	lsls	r2, r2, #2
   115de:	2100      	movs	r1, #0
   115e0:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < KalmanArraySize; i++){
   115e2:	697b      	ldr	r3, [r7, #20]
   115e4:	3301      	adds	r3, #1
   115e6:	617b      	str	r3, [r7, #20]
   115e8:	697b      	ldr	r3, [r7, #20]
   115ea:	2b06      	cmp	r3, #6
   115ec:	dddb      	ble.n	115a6 <initKalman+0x12>
	}

	err_measure[ax_kalman] = 15;
   115ee:	4b14      	ldr	r3, [pc, #80]	; (11640 <initKalman+0xac>)
   115f0:	4a19      	ldr	r2, [pc, #100]	; (11658 <initKalman+0xc4>)
   115f2:	601a      	str	r2, [r3, #0]
	err_estimate[ax_kalman] = 15;
   115f4:	4b13      	ldr	r3, [pc, #76]	; (11644 <initKalman+0xb0>)
   115f6:	4a18      	ldr	r2, [pc, #96]	; (11658 <initKalman+0xc4>)
   115f8:	601a      	str	r2, [r3, #0]
	q[ax_kalman] = 0.3;
   115fa:	4b13      	ldr	r3, [pc, #76]	; (11648 <initKalman+0xb4>)
   115fc:	4a17      	ldr	r2, [pc, #92]	; (1165c <initKalman+0xc8>)
   115fe:	601a      	str	r2, [r3, #0]

	err_measure[ay_kalman] = 15;
   11600:	4b0f      	ldr	r3, [pc, #60]	; (11640 <initKalman+0xac>)
   11602:	4a15      	ldr	r2, [pc, #84]	; (11658 <initKalman+0xc4>)
   11604:	605a      	str	r2, [r3, #4]
	err_estimate[ay_kalman] = 15;
   11606:	4b0f      	ldr	r3, [pc, #60]	; (11644 <initKalman+0xb0>)
   11608:	4a13      	ldr	r2, [pc, #76]	; (11658 <initKalman+0xc4>)
   1160a:	605a      	str	r2, [r3, #4]
	q[ay_kalman] = 0.3;
   1160c:	4b0e      	ldr	r3, [pc, #56]	; (11648 <initKalman+0xb4>)
   1160e:	4a13      	ldr	r2, [pc, #76]	; (1165c <initKalman+0xc8>)
   11610:	605a      	str	r2, [r3, #4]

	// 	err_measure[ay_kalman] = 20;
	// 	err_estimate[ay_kalman] = 20;
	// 	q[ay_kalman] = 0.8;

	err_measure[az_kalman] = 30;
   11612:	4b0b      	ldr	r3, [pc, #44]	; (11640 <initKalman+0xac>)
   11614:	4a12      	ldr	r2, [pc, #72]	; (11660 <initKalman+0xcc>)
   11616:	609a      	str	r2, [r3, #8]
	err_estimate[az_kalman] = 30;
   11618:	4b0a      	ldr	r3, [pc, #40]	; (11644 <initKalman+0xb0>)
   1161a:	4a11      	ldr	r2, [pc, #68]	; (11660 <initKalman+0xcc>)
   1161c:	609a      	str	r2, [r3, #8]
	q[az_kalman] = 0.3;
   1161e:	4b0a      	ldr	r3, [pc, #40]	; (11648 <initKalman+0xb4>)
   11620:	4a0e      	ldr	r2, [pc, #56]	; (1165c <initKalman+0xc8>)
   11622:	609a      	str	r2, [r3, #8]
	//
	// 	err_measure[gz_kalman] = 0.1;
	// 	err_estimate[gz_kalman] = 1;
	// 	q[gz_kalman] = 0.99;

	err_measure[light_kalman] = 200;
   11624:	4b06      	ldr	r3, [pc, #24]	; (11640 <initKalman+0xac>)
   11626:	4a0f      	ldr	r2, [pc, #60]	; (11664 <initKalman+0xd0>)
   11628:	619a      	str	r2, [r3, #24]
	err_estimate[light_kalman] = 200;
   1162a:	4b06      	ldr	r3, [pc, #24]	; (11644 <initKalman+0xb0>)
   1162c:	4a0d      	ldr	r2, [pc, #52]	; (11664 <initKalman+0xd0>)
   1162e:	619a      	str	r2, [r3, #24]
	q[light_kalman] = 0.008;
   11630:	4b05      	ldr	r3, [pc, #20]	; (11648 <initKalman+0xb4>)
   11632:	4a0d      	ldr	r2, [pc, #52]	; (11668 <initKalman+0xd4>)
   11634:	619a      	str	r2, [r3, #24]
}
   11636:	46c0      	nop			; (mov r8, r8)
   11638:	46bd      	mov	sp, r7
   1163a:	b006      	add	sp, #24
   1163c:	bd80      	pop	{r7, pc}
   1163e:	46c0      	nop			; (mov r8, r8)
   11640:	20001414 	.word	0x20001414
   11644:	20000fb4 	.word	0x20000fb4
   11648:	20001a6c 	.word	0x20001a6c
   1164c:	20001128 	.word	0x20001128
   11650:	20000df0 	.word	0x20000df0
   11654:	200017d4 	.word	0x200017d4
   11658:	41700000 	.word	0x41700000
   1165c:	3e99999a 	.word	0x3e99999a
   11660:	41f00000 	.word	0x41f00000
   11664:	43480000 	.word	0x43480000
   11668:	3c03126f 	.word	0x3c03126f

0001166c <updateKalman>:

float updateKalman(float meas, int kalmanIndex)
{
   1166c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1166e:	b083      	sub	sp, #12
   11670:	af00      	add	r7, sp, #0
   11672:	6078      	str	r0, [r7, #4]
   11674:	6039      	str	r1, [r7, #0]
	kalman_gain[kalmanIndex] = err_estimate[kalmanIndex]/(err_estimate[kalmanIndex] + err_measure[kalmanIndex]);
   11676:	4b5e      	ldr	r3, [pc, #376]	; (117f0 <updateKalman+0x184>)
   11678:	683a      	ldr	r2, [r7, #0]
   1167a:	0092      	lsls	r2, r2, #2
   1167c:	58d4      	ldr	r4, [r2, r3]
   1167e:	4b5c      	ldr	r3, [pc, #368]	; (117f0 <updateKalman+0x184>)
   11680:	683a      	ldr	r2, [r7, #0]
   11682:	0092      	lsls	r2, r2, #2
   11684:	58d0      	ldr	r0, [r2, r3]
   11686:	4b5b      	ldr	r3, [pc, #364]	; (117f4 <updateKalman+0x188>)
   11688:	683a      	ldr	r2, [r7, #0]
   1168a:	0092      	lsls	r2, r2, #2
   1168c:	58d2      	ldr	r2, [r2, r3]
   1168e:	4b5a      	ldr	r3, [pc, #360]	; (117f8 <updateKalman+0x18c>)
   11690:	1c11      	adds	r1, r2, #0
   11692:	4798      	blx	r3
   11694:	1c03      	adds	r3, r0, #0
   11696:	1c1a      	adds	r2, r3, #0
   11698:	4b58      	ldr	r3, [pc, #352]	; (117fc <updateKalman+0x190>)
   1169a:	1c11      	adds	r1, r2, #0
   1169c:	1c20      	adds	r0, r4, #0
   1169e:	4798      	blx	r3
   116a0:	1c03      	adds	r3, r0, #0
   116a2:	1c19      	adds	r1, r3, #0
   116a4:	4b56      	ldr	r3, [pc, #344]	; (11800 <updateKalman+0x194>)
   116a6:	683a      	ldr	r2, [r7, #0]
   116a8:	0092      	lsls	r2, r2, #2
   116aa:	50d1      	str	r1, [r2, r3]
	kalman_gain[kalmanIndex] = max(kalman_gain[kalmanIndex],0.015);
   116ac:	4b54      	ldr	r3, [pc, #336]	; (11800 <updateKalman+0x194>)
   116ae:	683a      	ldr	r2, [r7, #0]
   116b0:	0092      	lsls	r2, r2, #2
   116b2:	58d2      	ldr	r2, [r2, r3]
   116b4:	4b53      	ldr	r3, [pc, #332]	; (11804 <updateKalman+0x198>)
   116b6:	1c10      	adds	r0, r2, #0
   116b8:	4798      	blx	r3
   116ba:	4c53      	ldr	r4, [pc, #332]	; (11808 <updateKalman+0x19c>)
   116bc:	4a53      	ldr	r2, [pc, #332]	; (1180c <updateKalman+0x1a0>)
   116be:	4b54      	ldr	r3, [pc, #336]	; (11810 <updateKalman+0x1a4>)
   116c0:	47a0      	blx	r4
   116c2:	1e03      	subs	r3, r0, #0
   116c4:	d004      	beq.n	116d0 <updateKalman+0x64>
   116c6:	4b4e      	ldr	r3, [pc, #312]	; (11800 <updateKalman+0x194>)
   116c8:	683a      	ldr	r2, [r7, #0]
   116ca:	0092      	lsls	r2, r2, #2
   116cc:	58d3      	ldr	r3, [r2, r3]
   116ce:	e000      	b.n	116d2 <updateKalman+0x66>
   116d0:	4b50      	ldr	r3, [pc, #320]	; (11814 <updateKalman+0x1a8>)
   116d2:	4a4b      	ldr	r2, [pc, #300]	; (11800 <updateKalman+0x194>)
   116d4:	6839      	ldr	r1, [r7, #0]
   116d6:	0089      	lsls	r1, r1, #2
   116d8:	508b      	str	r3, [r1, r2]
	current_estimate[kalmanIndex] = last_estimate[kalmanIndex] + kalman_gain[kalmanIndex] * (meas - last_estimate[kalmanIndex]);
   116da:	4b4f      	ldr	r3, [pc, #316]	; (11818 <updateKalman+0x1ac>)
   116dc:	683a      	ldr	r2, [r7, #0]
   116de:	0092      	lsls	r2, r2, #2
   116e0:	58d4      	ldr	r4, [r2, r3]
   116e2:	4b47      	ldr	r3, [pc, #284]	; (11800 <updateKalman+0x194>)
   116e4:	683a      	ldr	r2, [r7, #0]
   116e6:	0092      	lsls	r2, r2, #2
   116e8:	58d5      	ldr	r5, [r2, r3]
   116ea:	4b4b      	ldr	r3, [pc, #300]	; (11818 <updateKalman+0x1ac>)
   116ec:	683a      	ldr	r2, [r7, #0]
   116ee:	0092      	lsls	r2, r2, #2
   116f0:	58d2      	ldr	r2, [r2, r3]
   116f2:	4b4a      	ldr	r3, [pc, #296]	; (1181c <updateKalman+0x1b0>)
   116f4:	1c11      	adds	r1, r2, #0
   116f6:	6878      	ldr	r0, [r7, #4]
   116f8:	4798      	blx	r3
   116fa:	1c03      	adds	r3, r0, #0
   116fc:	1c1a      	adds	r2, r3, #0
   116fe:	4b48      	ldr	r3, [pc, #288]	; (11820 <updateKalman+0x1b4>)
   11700:	1c11      	adds	r1, r2, #0
   11702:	1c28      	adds	r0, r5, #0
   11704:	4798      	blx	r3
   11706:	1c03      	adds	r3, r0, #0
   11708:	1c1a      	adds	r2, r3, #0
   1170a:	4b3b      	ldr	r3, [pc, #236]	; (117f8 <updateKalman+0x18c>)
   1170c:	1c11      	adds	r1, r2, #0
   1170e:	1c20      	adds	r0, r4, #0
   11710:	4798      	blx	r3
   11712:	1c03      	adds	r3, r0, #0
   11714:	1c19      	adds	r1, r3, #0
   11716:	4b43      	ldr	r3, [pc, #268]	; (11824 <updateKalman+0x1b8>)
   11718:	683a      	ldr	r2, [r7, #0]
   1171a:	0092      	lsls	r2, r2, #2
   1171c:	50d1      	str	r1, [r2, r3]
	err_estimate[kalmanIndex] =  (1.0 - kalman_gain[kalmanIndex])*err_estimate[kalmanIndex] + abs(last_estimate[kalmanIndex]-current_estimate[kalmanIndex])*q[kalmanIndex];
   1171e:	4b38      	ldr	r3, [pc, #224]	; (11800 <updateKalman+0x194>)
   11720:	683a      	ldr	r2, [r7, #0]
   11722:	0092      	lsls	r2, r2, #2
   11724:	58d2      	ldr	r2, [r2, r3]
   11726:	4b37      	ldr	r3, [pc, #220]	; (11804 <updateKalman+0x198>)
   11728:	1c10      	adds	r0, r2, #0
   1172a:	4798      	blx	r3
   1172c:	0002      	movs	r2, r0
   1172e:	000b      	movs	r3, r1
   11730:	4c3d      	ldr	r4, [pc, #244]	; (11828 <updateKalman+0x1bc>)
   11732:	2000      	movs	r0, #0
   11734:	493d      	ldr	r1, [pc, #244]	; (1182c <updateKalman+0x1c0>)
   11736:	47a0      	blx	r4
   11738:	0003      	movs	r3, r0
   1173a:	000c      	movs	r4, r1
   1173c:	001d      	movs	r5, r3
   1173e:	0026      	movs	r6, r4
   11740:	4b2b      	ldr	r3, [pc, #172]	; (117f0 <updateKalman+0x184>)
   11742:	683a      	ldr	r2, [r7, #0]
   11744:	0092      	lsls	r2, r2, #2
   11746:	58d2      	ldr	r2, [r2, r3]
   11748:	4b2e      	ldr	r3, [pc, #184]	; (11804 <updateKalman+0x198>)
   1174a:	1c10      	adds	r0, r2, #0
   1174c:	4798      	blx	r3
   1174e:	0002      	movs	r2, r0
   11750:	000b      	movs	r3, r1
   11752:	4c37      	ldr	r4, [pc, #220]	; (11830 <updateKalman+0x1c4>)
   11754:	0028      	movs	r0, r5
   11756:	0031      	movs	r1, r6
   11758:	47a0      	blx	r4
   1175a:	0003      	movs	r3, r0
   1175c:	000c      	movs	r4, r1
   1175e:	001d      	movs	r5, r3
   11760:	0026      	movs	r6, r4
   11762:	4b2d      	ldr	r3, [pc, #180]	; (11818 <updateKalman+0x1ac>)
   11764:	683a      	ldr	r2, [r7, #0]
   11766:	0092      	lsls	r2, r2, #2
   11768:	58d0      	ldr	r0, [r2, r3]
   1176a:	4b2e      	ldr	r3, [pc, #184]	; (11824 <updateKalman+0x1b8>)
   1176c:	683a      	ldr	r2, [r7, #0]
   1176e:	0092      	lsls	r2, r2, #2
   11770:	58d2      	ldr	r2, [r2, r3]
   11772:	4b2a      	ldr	r3, [pc, #168]	; (1181c <updateKalman+0x1b0>)
   11774:	1c11      	adds	r1, r2, #0
   11776:	4798      	blx	r3
   11778:	1c03      	adds	r3, r0, #0
   1177a:	1c1a      	adds	r2, r3, #0
   1177c:	4b2d      	ldr	r3, [pc, #180]	; (11834 <updateKalman+0x1c8>)
   1177e:	1c10      	adds	r0, r2, #0
   11780:	4798      	blx	r3
   11782:	0003      	movs	r3, r0
   11784:	17d9      	asrs	r1, r3, #31
   11786:	185a      	adds	r2, r3, r1
   11788:	404a      	eors	r2, r1
   1178a:	4b2b      	ldr	r3, [pc, #172]	; (11838 <updateKalman+0x1cc>)
   1178c:	0010      	movs	r0, r2
   1178e:	4798      	blx	r3
   11790:	4b2a      	ldr	r3, [pc, #168]	; (1183c <updateKalman+0x1d0>)
   11792:	683a      	ldr	r2, [r7, #0]
   11794:	0092      	lsls	r2, r2, #2
   11796:	58d2      	ldr	r2, [r2, r3]
   11798:	4b21      	ldr	r3, [pc, #132]	; (11820 <updateKalman+0x1b4>)
   1179a:	1c11      	adds	r1, r2, #0
   1179c:	4798      	blx	r3
   1179e:	1c03      	adds	r3, r0, #0
   117a0:	1c1a      	adds	r2, r3, #0
   117a2:	4b18      	ldr	r3, [pc, #96]	; (11804 <updateKalman+0x198>)
   117a4:	1c10      	adds	r0, r2, #0
   117a6:	4798      	blx	r3
   117a8:	0002      	movs	r2, r0
   117aa:	000b      	movs	r3, r1
   117ac:	4c24      	ldr	r4, [pc, #144]	; (11840 <updateKalman+0x1d4>)
   117ae:	0028      	movs	r0, r5
   117b0:	0031      	movs	r1, r6
   117b2:	47a0      	blx	r4
   117b4:	0003      	movs	r3, r0
   117b6:	000c      	movs	r4, r1
   117b8:	0019      	movs	r1, r3
   117ba:	0022      	movs	r2, r4
   117bc:	4b21      	ldr	r3, [pc, #132]	; (11844 <updateKalman+0x1d8>)
   117be:	0008      	movs	r0, r1
   117c0:	0011      	movs	r1, r2
   117c2:	4798      	blx	r3
   117c4:	1c01      	adds	r1, r0, #0
   117c6:	4b0a      	ldr	r3, [pc, #40]	; (117f0 <updateKalman+0x184>)
   117c8:	683a      	ldr	r2, [r7, #0]
   117ca:	0092      	lsls	r2, r2, #2
   117cc:	50d1      	str	r1, [r2, r3]
	last_estimate[kalmanIndex]=current_estimate[kalmanIndex];
   117ce:	4b15      	ldr	r3, [pc, #84]	; (11824 <updateKalman+0x1b8>)
   117d0:	683a      	ldr	r2, [r7, #0]
   117d2:	0092      	lsls	r2, r2, #2
   117d4:	58d1      	ldr	r1, [r2, r3]
   117d6:	4b10      	ldr	r3, [pc, #64]	; (11818 <updateKalman+0x1ac>)
   117d8:	683a      	ldr	r2, [r7, #0]
   117da:	0092      	lsls	r2, r2, #2
   117dc:	50d1      	str	r1, [r2, r3]

	return current_estimate[kalmanIndex];
   117de:	4b11      	ldr	r3, [pc, #68]	; (11824 <updateKalman+0x1b8>)
   117e0:	683a      	ldr	r2, [r7, #0]
   117e2:	0092      	lsls	r2, r2, #2
   117e4:	58d3      	ldr	r3, [r2, r3]
}
   117e6:	1c18      	adds	r0, r3, #0
   117e8:	46bd      	mov	sp, r7
   117ea:	b003      	add	sp, #12
   117ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117ee:	46c0      	nop			; (mov r8, r8)
   117f0:	20000fb4 	.word	0x20000fb4
   117f4:	20001414 	.word	0x20001414
   117f8:	0001961d 	.word	0x0001961d
   117fc:	00019941 	.word	0x00019941
   11800:	200017d4 	.word	0x200017d4
   11804:	0001bf15 	.word	0x0001bf15
   11808:	000194c1 	.word	0x000194c1
   1180c:	eb851eb8 	.word	0xeb851eb8
   11810:	3f8eb851 	.word	0x3f8eb851
   11814:	3c75c28f 	.word	0x3c75c28f
   11818:	20000df0 	.word	0x20000df0
   1181c:	00019f61 	.word	0x00019f61
   11820:	00019d21 	.word	0x00019d21
   11824:	20001128 	.word	0x20001128
   11828:	0001b78d 	.word	0x0001b78d
   1182c:	3ff00000 	.word	0x3ff00000
   11830:	0001b28d 	.word	0x0001b28d
   11834:	0001a299 	.word	0x0001a299
   11838:	0001a2d9 	.word	0x0001a2d9
   1183c:	20001a6c 	.word	0x20001a6c
   11840:	0001a405 	.word	0x0001a405
   11844:	0001bfb9 	.word	0x0001bfb9

00011848 <crc16>:
	0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
	0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
	0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

uint16_t crc16(uint8_t *buf, uint16_t len) {
   11848:	b580      	push	{r7, lr}
   1184a:	b084      	sub	sp, #16
   1184c:	af00      	add	r7, sp, #0
   1184e:	6078      	str	r0, [r7, #4]
   11850:	000a      	movs	r2, r1
   11852:	1cbb      	adds	r3, r7, #2
   11854:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint16_t cksum = 0;
   11856:	230c      	movs	r3, #12
   11858:	18fb      	adds	r3, r7, r3
   1185a:	2200      	movs	r2, #0
   1185c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
   1185e:	230e      	movs	r3, #14
   11860:	18fb      	adds	r3, r7, r3
   11862:	2200      	movs	r2, #0
   11864:	801a      	strh	r2, [r3, #0]
   11866:	e021      	b.n	118ac <crc16+0x64>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
   11868:	230c      	movs	r3, #12
   1186a:	18fb      	adds	r3, r7, r3
   1186c:	881b      	ldrh	r3, [r3, #0]
   1186e:	0a1b      	lsrs	r3, r3, #8
   11870:	b29b      	uxth	r3, r3
   11872:	0019      	movs	r1, r3
   11874:	687b      	ldr	r3, [r7, #4]
   11876:	1c5a      	adds	r2, r3, #1
   11878:	607a      	str	r2, [r7, #4]
   1187a:	781b      	ldrb	r3, [r3, #0]
   1187c:	404b      	eors	r3, r1
   1187e:	22ff      	movs	r2, #255	; 0xff
   11880:	401a      	ands	r2, r3
   11882:	4b11      	ldr	r3, [pc, #68]	; (118c8 <crc16+0x80>)
   11884:	0052      	lsls	r2, r2, #1
   11886:	5ad3      	ldrh	r3, [r2, r3]
   11888:	b21a      	sxth	r2, r3
   1188a:	230c      	movs	r3, #12
   1188c:	18fb      	adds	r3, r7, r3
   1188e:	881b      	ldrh	r3, [r3, #0]
   11890:	021b      	lsls	r3, r3, #8
   11892:	b21b      	sxth	r3, r3
   11894:	4053      	eors	r3, r2
   11896:	b21a      	sxth	r2, r3
   11898:	230c      	movs	r3, #12
   1189a:	18fb      	adds	r3, r7, r3
   1189c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
   1189e:	230e      	movs	r3, #14
   118a0:	18fb      	adds	r3, r7, r3
   118a2:	881a      	ldrh	r2, [r3, #0]
   118a4:	230e      	movs	r3, #14
   118a6:	18fb      	adds	r3, r7, r3
   118a8:	3201      	adds	r2, #1
   118aa:	801a      	strh	r2, [r3, #0]
   118ac:	230e      	movs	r3, #14
   118ae:	18fa      	adds	r2, r7, r3
   118b0:	1cbb      	adds	r3, r7, #2
   118b2:	8812      	ldrh	r2, [r2, #0]
   118b4:	881b      	ldrh	r3, [r3, #0]
   118b6:	429a      	cmp	r2, r3
   118b8:	d3d6      	bcc.n	11868 <crc16+0x20>
	}
	return cksum;
   118ba:	230c      	movs	r3, #12
   118bc:	18fb      	adds	r3, r7, r3
   118be:	881b      	ldrh	r3, [r3, #0]
}
   118c0:	0018      	movs	r0, r3
   118c2:	46bd      	mov	sp, r7
   118c4:	b004      	add	sp, #16
   118c6:	bd80      	pop	{r7, pc}
   118c8:	0001c718 	.word	0x0001c718

000118cc <configure_vesc_usart>:
float buffer_get_float32_auto(uint8_t *buffer, int8_t index);


// Configure SERCOM5 as USART for VESC
void configure_vesc_usart()
{
   118cc:	b580      	push	{r7, lr}
   118ce:	b092      	sub	sp, #72	; 0x48
   118d0:	af00      	add	r7, sp, #0
	uint32_t baud = 0;
   118d2:	2300      	movs	r3, #0
   118d4:	647b      	str	r3, [r7, #68]	; 0x44
	if(UART_baud == BAUD_9600)
   118d6:	4b28      	ldr	r3, [pc, #160]	; (11978 <configure_vesc_usart+0xac>)
   118d8:	781b      	ldrb	r3, [r3, #0]
   118da:	2b00      	cmp	r3, #0
   118dc:	d103      	bne.n	118e6 <configure_vesc_usart+0x1a>
		baud = 9600;
   118de:	2396      	movs	r3, #150	; 0x96
   118e0:	019b      	lsls	r3, r3, #6
   118e2:	647b      	str	r3, [r7, #68]	; 0x44
   118e4:	e016      	b.n	11914 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_38400)
   118e6:	4b24      	ldr	r3, [pc, #144]	; (11978 <configure_vesc_usart+0xac>)
   118e8:	781b      	ldrb	r3, [r3, #0]
   118ea:	2b01      	cmp	r3, #1
   118ec:	d103      	bne.n	118f6 <configure_vesc_usart+0x2a>
		baud = 38400;
   118ee:	2396      	movs	r3, #150	; 0x96
   118f0:	021b      	lsls	r3, r3, #8
   118f2:	647b      	str	r3, [r7, #68]	; 0x44
   118f4:	e00e      	b.n	11914 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_57600)
   118f6:	4b20      	ldr	r3, [pc, #128]	; (11978 <configure_vesc_usart+0xac>)
   118f8:	781b      	ldrb	r3, [r3, #0]
   118fa:	2b02      	cmp	r3, #2
   118fc:	d103      	bne.n	11906 <configure_vesc_usart+0x3a>
		baud = 57600;
   118fe:	23e1      	movs	r3, #225	; 0xe1
   11900:	021b      	lsls	r3, r3, #8
   11902:	647b      	str	r3, [r7, #68]	; 0x44
   11904:	e006      	b.n	11914 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_115200)
   11906:	4b1c      	ldr	r3, [pc, #112]	; (11978 <configure_vesc_usart+0xac>)
   11908:	781b      	ldrb	r3, [r3, #0]
   1190a:	2b03      	cmp	r3, #3
   1190c:	d102      	bne.n	11914 <configure_vesc_usart+0x48>
		baud = 115200;
   1190e:	23e1      	movs	r3, #225	; 0xe1
   11910:	025b      	lsls	r3, r3, #9
   11912:	647b      	str	r3, [r7, #68]	; 0x44

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   11914:	1d3b      	adds	r3, r7, #4
   11916:	0018      	movs	r0, r3
   11918:	4b18      	ldr	r3, [pc, #96]	; (1197c <configure_vesc_usart+0xb0>)
   1191a:	4798      	blx	r3
	config_usart.baudrate    = baud;
   1191c:	1d3b      	adds	r3, r7, #4
   1191e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   11920:	621a      	str	r2, [r3, #32]
#ifdef HW_3v4
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   11922:	1d3b      	adds	r3, r7, #4
   11924:	2280      	movs	r2, #128	; 0x80
   11926:	0352      	lsls	r2, r2, #13
   11928:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   1192a:	1d3b      	adds	r3, r7, #4
   1192c:	4a14      	ldr	r2, [pc, #80]	; (11980 <configure_vesc_usart+0xb4>)
   1192e:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   11930:	1d3b      	adds	r3, r7, #4
   11932:	4a14      	ldr	r2, [pc, #80]	; (11984 <configure_vesc_usart+0xb8>)
   11934:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
   11936:	1d3b      	adds	r3, r7, #4
   11938:	2201      	movs	r2, #1
   1193a:	4252      	negs	r2, r2
   1193c:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   1193e:	1d3b      	adds	r3, r7, #4
   11940:	2201      	movs	r2, #1
   11942:	4252      	negs	r2, r2
   11944:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
	config_usart.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
#endif
	while (usart_init(&vesc_usart,SERCOM1, &config_usart) != STATUS_OK)
   11946:	46c0      	nop			; (mov r8, r8)
   11948:	1d3a      	adds	r2, r7, #4
   1194a:	490f      	ldr	r1, [pc, #60]	; (11988 <configure_vesc_usart+0xbc>)
   1194c:	4b0f      	ldr	r3, [pc, #60]	; (1198c <configure_vesc_usart+0xc0>)
   1194e:	0018      	movs	r0, r3
   11950:	4b0f      	ldr	r3, [pc, #60]	; (11990 <configure_vesc_usart+0xc4>)
   11952:	4798      	blx	r3
   11954:	1e03      	subs	r3, r0, #0
   11956:	d1f7      	bne.n	11948 <configure_vesc_usart+0x7c>
	{}
	usart_enable(&vesc_usart);
   11958:	4b0c      	ldr	r3, [pc, #48]	; (1198c <configure_vesc_usart+0xc0>)
   1195a:	0018      	movs	r0, r3
   1195c:	4b0d      	ldr	r3, [pc, #52]	; (11994 <configure_vesc_usart+0xc8>)
   1195e:	4798      	blx	r3

	latest_vesc_vals.FW_VERSION_MAJOR = 0;
   11960:	4b0d      	ldr	r3, [pc, #52]	; (11998 <configure_vesc_usart+0xcc>)
   11962:	2234      	movs	r2, #52	; 0x34
   11964:	2100      	movs	r1, #0
   11966:	5499      	strb	r1, [r3, r2]
	latest_vesc_vals.FW_VERSION_MINOR = 0;
   11968:	4b0b      	ldr	r3, [pc, #44]	; (11998 <configure_vesc_usart+0xcc>)
   1196a:	2235      	movs	r2, #53	; 0x35
   1196c:	2100      	movs	r1, #0
   1196e:	5499      	strb	r1, [r3, r2]
}
   11970:	46c0      	nop			; (mov r8, r8)
   11972:	46bd      	mov	sp, r7
   11974:	b012      	add	sp, #72	; 0x48
   11976:	bd80      	pop	{r7, pc}
   11978:	200003cb 	.word	0x200003cb
   1197c:	00009ca1 	.word	0x00009ca1
   11980:	00100002 	.word	0x00100002
   11984:	00110002 	.word	0x00110002
   11988:	42000c00 	.word	0x42000c00
   1198c:	20000b0c 	.word	0x20000b0c
   11990:	000060e5 	.word	0x000060e5
   11994:	00009d61 	.word	0x00009d61
   11998:	20000e38 	.word	0x20000e38

0001199c <send_packet>:
	VESC_UART_BYTES_CRC,
	VESC_UART_BYTES_STOP,
};

uint8_t vesc_tx_buff[MAX_PAYLOAD_LEN+6];
void send_packet(struct uart_packet send_pak){
   1199c:	b084      	sub	sp, #16
   1199e:	b590      	push	{r4, r7, lr}
   119a0:	b085      	sub	sp, #20
   119a2:	af00      	add	r7, sp, #0
   119a4:	2420      	movs	r4, #32
   119a6:	193c      	adds	r4, r7, r4
   119a8:	6020      	str	r0, [r4, #0]
   119aa:	6061      	str	r1, [r4, #4]
   119ac:	60a2      	str	r2, [r4, #8]
   119ae:	60e3      	str	r3, [r4, #12]
	if(check_timer_expired(&vesc_usart_time, vesc_usart_timeout))
   119b0:	4b48      	ldr	r3, [pc, #288]	; (11ad4 <send_packet+0x138>)
   119b2:	681a      	ldr	r2, [r3, #0]
   119b4:	4b48      	ldr	r3, [pc, #288]	; (11ad8 <send_packet+0x13c>)
   119b6:	0011      	movs	r1, r2
   119b8:	0018      	movs	r0, r3
   119ba:	4b48      	ldr	r3, [pc, #288]	; (11adc <send_packet+0x140>)
   119bc:	4798      	blx	r3
   119be:	1e03      	subs	r3, r0, #0
   119c0:	d002      	beq.n	119c8 <send_packet+0x2c>
		HOLD_FOR_REPLY = false;
   119c2:	4b47      	ldr	r3, [pc, #284]	; (11ae0 <send_packet+0x144>)
   119c4:	2200      	movs	r2, #0
   119c6:	701a      	strb	r2, [r3, #0]

	send_pak.stop = 0x03;
   119c8:	2320      	movs	r3, #32
   119ca:	18fa      	adds	r2, r7, r3
   119cc:	4b45      	ldr	r3, [pc, #276]	; (11ae4 <send_packet+0x148>)
   119ce:	2103      	movs	r1, #3
   119d0:	54d1      	strb	r1, [r2, r3]

	if(!HOLD_FOR_REPLY){
   119d2:	4b43      	ldr	r3, [pc, #268]	; (11ae0 <send_packet+0x144>)
   119d4:	781b      	ldrb	r3, [r3, #0]
   119d6:	2201      	movs	r2, #1
   119d8:	4053      	eors	r3, r2
   119da:	b2db      	uxtb	r3, r3
   119dc:	2b00      	cmp	r3, #0
   119de:	d100      	bne.n	119e2 <send_packet+0x46>
   119e0:	e071      	b.n	11ac6 <send_packet+0x12a>
		uint16_t payload_len = 0;
   119e2:	230e      	movs	r3, #14
   119e4:	18fb      	adds	r3, r7, r3
   119e6:	2200      	movs	r2, #0
   119e8:	801a      	strh	r2, [r3, #0]
		if(send_pak.start == 0x03)
   119ea:	2320      	movs	r3, #32
   119ec:	18fb      	adds	r3, r7, r3
   119ee:	781b      	ldrb	r3, [r3, #0]
   119f0:	2b03      	cmp	r3, #3
   119f2:	d10e      	bne.n	11a12 <send_packet+0x76>
			payload_len = ((send_pak.len[0]<<8)|send_pak.len[1]);
   119f4:	2320      	movs	r3, #32
   119f6:	18fb      	adds	r3, r7, r3
   119f8:	785b      	ldrb	r3, [r3, #1]
   119fa:	021b      	lsls	r3, r3, #8
   119fc:	b21a      	sxth	r2, r3
   119fe:	2320      	movs	r3, #32
   11a00:	18fb      	adds	r3, r7, r3
   11a02:	789b      	ldrb	r3, [r3, #2]
   11a04:	b21b      	sxth	r3, r3
   11a06:	4313      	orrs	r3, r2
   11a08:	b21a      	sxth	r2, r3
   11a0a:	230e      	movs	r3, #14
   11a0c:	18fb      	adds	r3, r7, r3
   11a0e:	801a      	strh	r2, [r3, #0]
   11a10:	e005      	b.n	11a1e <send_packet+0x82>
		else
			payload_len = send_pak.len[0];
   11a12:	2320      	movs	r3, #32
   11a14:	18fb      	adds	r3, r7, r3
   11a16:	785a      	ldrb	r2, [r3, #1]
   11a18:	230e      	movs	r3, #14
   11a1a:	18fb      	adds	r3, r7, r3
   11a1c:	801a      	strh	r2, [r3, #0]
		
		uint16_t message_len = (send_pak.start+payload_len+3);
   11a1e:	2320      	movs	r3, #32
   11a20:	18fb      	adds	r3, r7, r3
   11a22:	781b      	ldrb	r3, [r3, #0]
   11a24:	b29a      	uxth	r2, r3
   11a26:	230e      	movs	r3, #14
   11a28:	18fb      	adds	r3, r7, r3
   11a2a:	881b      	ldrh	r3, [r3, #0]
   11a2c:	18d3      	adds	r3, r2, r3
   11a2e:	b29a      	uxth	r2, r3
   11a30:	1cbb      	adds	r3, r7, #2
   11a32:	3203      	adds	r2, #3
   11a34:	801a      	strh	r2, [r3, #0]
		uint8_t *send_ptr = &(send_pak.start);
   11a36:	2320      	movs	r3, #32
   11a38:	18fb      	adds	r3, r7, r3
   11a3a:	60bb      	str	r3, [r7, #8]

		for(size_t i=0;i<message_len;i++){
   11a3c:	2300      	movs	r3, #0
   11a3e:	607b      	str	r3, [r7, #4]
   11a40:	e02d      	b.n	11a9e <send_packet+0x102>
			if(send_pak.start==0x02 && i==2)
   11a42:	2320      	movs	r3, #32
   11a44:	18fb      	adds	r3, r7, r3
   11a46:	781b      	ldrb	r3, [r3, #0]
   11a48:	2b02      	cmp	r3, #2
   11a4a:	d106      	bne.n	11a5a <send_packet+0xbe>
   11a4c:	687b      	ldr	r3, [r7, #4]
   11a4e:	2b02      	cmp	r3, #2
   11a50:	d103      	bne.n	11a5a <send_packet+0xbe>
			send_ptr+=1;
   11a52:	68bb      	ldr	r3, [r7, #8]
   11a54:	3301      	adds	r3, #1
   11a56:	60bb      	str	r3, [r7, #8]
   11a58:	e014      	b.n	11a84 <send_packet+0xe8>
			else if(i==payload_len+send_pak.start)
   11a5a:	230e      	movs	r3, #14
   11a5c:	18fb      	adds	r3, r7, r3
   11a5e:	881b      	ldrh	r3, [r3, #0]
   11a60:	2220      	movs	r2, #32
   11a62:	18ba      	adds	r2, r7, r2
   11a64:	7812      	ldrb	r2, [r2, #0]
   11a66:	189b      	adds	r3, r3, r2
   11a68:	001a      	movs	r2, r3
   11a6a:	687b      	ldr	r3, [r7, #4]
   11a6c:	429a      	cmp	r2, r3
   11a6e:	d109      	bne.n	11a84 <send_packet+0xe8>
			send_ptr+=(MAX_PAYLOAD_LEN-payload_len);
   11a70:	230e      	movs	r3, #14
   11a72:	18fb      	adds	r3, r7, r3
   11a74:	881b      	ldrh	r3, [r3, #0]
   11a76:	2280      	movs	r2, #128	; 0x80
   11a78:	0092      	lsls	r2, r2, #2
   11a7a:	1ad3      	subs	r3, r2, r3
   11a7c:	001a      	movs	r2, r3
   11a7e:	68bb      	ldr	r3, [r7, #8]
   11a80:	189b      	adds	r3, r3, r2
   11a82:	60bb      	str	r3, [r7, #8]

			vesc_tx_buff[i] = *send_ptr;
   11a84:	68bb      	ldr	r3, [r7, #8]
   11a86:	7819      	ldrb	r1, [r3, #0]
   11a88:	4a17      	ldr	r2, [pc, #92]	; (11ae8 <send_packet+0x14c>)
   11a8a:	687b      	ldr	r3, [r7, #4]
   11a8c:	18d3      	adds	r3, r2, r3
   11a8e:	1c0a      	adds	r2, r1, #0
   11a90:	701a      	strb	r2, [r3, #0]

			send_ptr++;
   11a92:	68bb      	ldr	r3, [r7, #8]
   11a94:	3301      	adds	r3, #1
   11a96:	60bb      	str	r3, [r7, #8]
		for(size_t i=0;i<message_len;i++){
   11a98:	687b      	ldr	r3, [r7, #4]
   11a9a:	3301      	adds	r3, #1
   11a9c:	607b      	str	r3, [r7, #4]
   11a9e:	1cbb      	adds	r3, r7, #2
   11aa0:	881a      	ldrh	r2, [r3, #0]
   11aa2:	687b      	ldr	r3, [r7, #4]
   11aa4:	429a      	cmp	r2, r3
   11aa6:	d8cc      	bhi.n	11a42 <send_packet+0xa6>
		}
		
		HOLD_FOR_REPLY = true;
   11aa8:	4b0d      	ldr	r3, [pc, #52]	; (11ae0 <send_packet+0x144>)
   11aaa:	2201      	movs	r2, #1
   11aac:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_job(&vesc_usart, vesc_tx_buff, message_len);
   11aae:	1cbb      	adds	r3, r7, #2
   11ab0:	881a      	ldrh	r2, [r3, #0]
   11ab2:	490d      	ldr	r1, [pc, #52]	; (11ae8 <send_packet+0x14c>)
   11ab4:	4b0d      	ldr	r3, [pc, #52]	; (11aec <send_packet+0x150>)
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b0d      	ldr	r3, [pc, #52]	; (11af0 <send_packet+0x154>)
   11aba:	4798      	blx	r3
		vesc_usart_time = millis();
   11abc:	4b0d      	ldr	r3, [pc, #52]	; (11af4 <send_packet+0x158>)
   11abe:	4798      	blx	r3
   11ac0:	0002      	movs	r2, r0
   11ac2:	4b05      	ldr	r3, [pc, #20]	; (11ad8 <send_packet+0x13c>)
   11ac4:	601a      	str	r2, [r3, #0]
	}
}
   11ac6:	46c0      	nop			; (mov r8, r8)
   11ac8:	46bd      	mov	sp, r7
   11aca:	b005      	add	sp, #20
   11acc:	bc90      	pop	{r4, r7}
   11ace:	bc08      	pop	{r3}
   11ad0:	b004      	add	sp, #16
   11ad2:	4718      	bx	r3
   11ad4:	200000fc 	.word	0x200000fc
   11ad8:	2000042c 	.word	0x2000042c
   11adc:	00009fbd 	.word	0x00009fbd
   11ae0:	20000430 	.word	0x20000430
   11ae4:	00000205 	.word	0x00000205
   11ae8:	20000904 	.word	0x20000904
   11aec:	20000b0c 	.word	0x20000b0c
   11af0:	00006629 	.word	0x00006629
   11af4:	00009f65 	.word	0x00009f65

00011af8 <process_recieved_packet>:

void process_recieved_packet(){
   11af8:	b580      	push	{r7, lr}
   11afa:	b082      	sub	sp, #8
   11afc:	af00      	add	r7, sp, #0
	uint8_t packet_id = vesc_revieve_packet.payload[0];
   11afe:	1dfb      	adds	r3, r7, #7
   11b00:	4abc      	ldr	r2, [pc, #752]	; (11df4 <process_recieved_packet+0x2fc>)
   11b02:	78d2      	ldrb	r2, [r2, #3]
   11b04:	701a      	strb	r2, [r3, #0]
	if(packet_id == COMM_FW_VERSION){ // Bytes are the same for all FW's
   11b06:	4bbc      	ldr	r3, [pc, #752]	; (11df8 <process_recieved_packet+0x300>)
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	1dfa      	adds	r2, r7, #7
   11b0c:	7812      	ldrb	r2, [r2, #0]
   11b0e:	429a      	cmp	r2, r3
   11b10:	d10b      	bne.n	11b2a <process_recieved_packet+0x32>
		latest_vesc_vals.FW_VERSION_MAJOR = (uint16_t)vesc_revieve_packet.payload[1];
   11b12:	4bb8      	ldr	r3, [pc, #736]	; (11df4 <process_recieved_packet+0x2fc>)
   11b14:	7919      	ldrb	r1, [r3, #4]
   11b16:	4bb9      	ldr	r3, [pc, #740]	; (11dfc <process_recieved_packet+0x304>)
   11b18:	2234      	movs	r2, #52	; 0x34
   11b1a:	5499      	strb	r1, [r3, r2]
		latest_vesc_vals.FW_VERSION_MINOR = (uint16_t)vesc_revieve_packet.payload[2];
   11b1c:	4bb5      	ldr	r3, [pc, #724]	; (11df4 <process_recieved_packet+0x2fc>)
   11b1e:	7959      	ldrb	r1, [r3, #5]
   11b20:	4bb6      	ldr	r3, [pc, #728]	; (11dfc <process_recieved_packet+0x304>)
   11b22:	2235      	movs	r2, #53	; 0x35
   11b24:	5499      	strb	r1, [r3, r2]
		latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
		latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
	} else if(packet_id == COMM_GET_IMU_DATA){ 
		// TODO
	}*/
}
   11b26:	f000 fe2b 	bl	12780 <process_recieved_packet+0xc88>
	} else if(packet_id == COMM_GET_VALUES){
   11b2a:	4bb5      	ldr	r3, [pc, #724]	; (11e00 <process_recieved_packet+0x308>)
   11b2c:	781b      	ldrb	r3, [r3, #0]
   11b2e:	1dfa      	adds	r2, r7, #7
   11b30:	7812      	ldrb	r2, [r2, #0]
   11b32:	429a      	cmp	r2, r3
   11b34:	d000      	beq.n	11b38 <process_recieved_packet+0x40>
   11b36:	e17f      	b.n	11e38 <process_recieved_packet+0x340>
		latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[GET_VALUES_FET_TEMP] << 8) | vesc_revieve_packet.payload[GET_VALUES_FET_TEMP+1];
   11b38:	4bb2      	ldr	r3, [pc, #712]	; (11e04 <process_recieved_packet+0x30c>)
   11b3a:	781b      	ldrb	r3, [r3, #0]
   11b3c:	001a      	movs	r2, r3
   11b3e:	4bad      	ldr	r3, [pc, #692]	; (11df4 <process_recieved_packet+0x2fc>)
   11b40:	189b      	adds	r3, r3, r2
   11b42:	78db      	ldrb	r3, [r3, #3]
   11b44:	021b      	lsls	r3, r3, #8
   11b46:	b21a      	sxth	r2, r3
   11b48:	4bae      	ldr	r3, [pc, #696]	; (11e04 <process_recieved_packet+0x30c>)
   11b4a:	781b      	ldrb	r3, [r3, #0]
   11b4c:	3301      	adds	r3, #1
   11b4e:	49a9      	ldr	r1, [pc, #676]	; (11df4 <process_recieved_packet+0x2fc>)
   11b50:	18cb      	adds	r3, r1, r3
   11b52:	78db      	ldrb	r3, [r3, #3]
   11b54:	b21b      	sxth	r3, r3
   11b56:	4313      	orrs	r3, r2
   11b58:	b21a      	sxth	r2, r3
   11b5a:	4ba8      	ldr	r3, [pc, #672]	; (11dfc <process_recieved_packet+0x304>)
   11b5c:	801a      	strh	r2, [r3, #0]
		latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+3];
   11b5e:	4baa      	ldr	r3, [pc, #680]	; (11e08 <process_recieved_packet+0x310>)
   11b60:	781b      	ldrb	r3, [r3, #0]
   11b62:	001a      	movs	r2, r3
   11b64:	4ba3      	ldr	r3, [pc, #652]	; (11df4 <process_recieved_packet+0x2fc>)
   11b66:	189b      	adds	r3, r3, r2
   11b68:	78db      	ldrb	r3, [r3, #3]
   11b6a:	061a      	lsls	r2, r3, #24
   11b6c:	4ba6      	ldr	r3, [pc, #664]	; (11e08 <process_recieved_packet+0x310>)
   11b6e:	781b      	ldrb	r3, [r3, #0]
   11b70:	3301      	adds	r3, #1
   11b72:	49a0      	ldr	r1, [pc, #640]	; (11df4 <process_recieved_packet+0x2fc>)
   11b74:	18cb      	adds	r3, r1, r3
   11b76:	78db      	ldrb	r3, [r3, #3]
   11b78:	041b      	lsls	r3, r3, #16
   11b7a:	431a      	orrs	r2, r3
   11b7c:	4ba2      	ldr	r3, [pc, #648]	; (11e08 <process_recieved_packet+0x310>)
   11b7e:	781b      	ldrb	r3, [r3, #0]
   11b80:	3302      	adds	r3, #2
   11b82:	499c      	ldr	r1, [pc, #624]	; (11df4 <process_recieved_packet+0x2fc>)
   11b84:	18cb      	adds	r3, r1, r3
   11b86:	78db      	ldrb	r3, [r3, #3]
   11b88:	021b      	lsls	r3, r3, #8
   11b8a:	4313      	orrs	r3, r2
   11b8c:	4a9e      	ldr	r2, [pc, #632]	; (11e08 <process_recieved_packet+0x310>)
   11b8e:	7812      	ldrb	r2, [r2, #0]
   11b90:	3203      	adds	r2, #3
   11b92:	4998      	ldr	r1, [pc, #608]	; (11df4 <process_recieved_packet+0x2fc>)
   11b94:	188a      	adds	r2, r1, r2
   11b96:	78d2      	ldrb	r2, [r2, #3]
   11b98:	431a      	orrs	r2, r3
   11b9a:	4b98      	ldr	r3, [pc, #608]	; (11dfc <process_recieved_packet+0x304>)
   11b9c:	605a      	str	r2, [r3, #4]
		latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[GET_VALUES_IN_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_CURR+3];
   11b9e:	4b9b      	ldr	r3, [pc, #620]	; (11e0c <process_recieved_packet+0x314>)
   11ba0:	781b      	ldrb	r3, [r3, #0]
   11ba2:	001a      	movs	r2, r3
   11ba4:	4b93      	ldr	r3, [pc, #588]	; (11df4 <process_recieved_packet+0x2fc>)
   11ba6:	189b      	adds	r3, r3, r2
   11ba8:	78db      	ldrb	r3, [r3, #3]
   11baa:	061a      	lsls	r2, r3, #24
   11bac:	4b97      	ldr	r3, [pc, #604]	; (11e0c <process_recieved_packet+0x314>)
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	3301      	adds	r3, #1
   11bb2:	4990      	ldr	r1, [pc, #576]	; (11df4 <process_recieved_packet+0x2fc>)
   11bb4:	18cb      	adds	r3, r1, r3
   11bb6:	78db      	ldrb	r3, [r3, #3]
   11bb8:	041b      	lsls	r3, r3, #16
   11bba:	431a      	orrs	r2, r3
   11bbc:	4b93      	ldr	r3, [pc, #588]	; (11e0c <process_recieved_packet+0x314>)
   11bbe:	781b      	ldrb	r3, [r3, #0]
   11bc0:	3302      	adds	r3, #2
   11bc2:	498c      	ldr	r1, [pc, #560]	; (11df4 <process_recieved_packet+0x2fc>)
   11bc4:	18cb      	adds	r3, r1, r3
   11bc6:	78db      	ldrb	r3, [r3, #3]
   11bc8:	021b      	lsls	r3, r3, #8
   11bca:	4313      	orrs	r3, r2
   11bcc:	4a8f      	ldr	r2, [pc, #572]	; (11e0c <process_recieved_packet+0x314>)
   11bce:	7812      	ldrb	r2, [r2, #0]
   11bd0:	3203      	adds	r2, #3
   11bd2:	4988      	ldr	r1, [pc, #544]	; (11df4 <process_recieved_packet+0x2fc>)
   11bd4:	188a      	adds	r2, r1, r2
   11bd6:	78d2      	ldrb	r2, [r2, #3]
   11bd8:	431a      	orrs	r2, r3
   11bda:	4b88      	ldr	r3, [pc, #544]	; (11dfc <process_recieved_packet+0x304>)
   11bdc:	609a      	str	r2, [r3, #8]
		latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[GET_VALUES_DUTY] << 8) | vesc_revieve_packet.payload[GET_VALUES_DUTY+1];
   11bde:	4b8c      	ldr	r3, [pc, #560]	; (11e10 <process_recieved_packet+0x318>)
   11be0:	781b      	ldrb	r3, [r3, #0]
   11be2:	001a      	movs	r2, r3
   11be4:	4b83      	ldr	r3, [pc, #524]	; (11df4 <process_recieved_packet+0x2fc>)
   11be6:	189b      	adds	r3, r3, r2
   11be8:	78db      	ldrb	r3, [r3, #3]
   11bea:	021b      	lsls	r3, r3, #8
   11bec:	b21a      	sxth	r2, r3
   11bee:	4b88      	ldr	r3, [pc, #544]	; (11e10 <process_recieved_packet+0x318>)
   11bf0:	781b      	ldrb	r3, [r3, #0]
   11bf2:	3301      	adds	r3, #1
   11bf4:	497f      	ldr	r1, [pc, #508]	; (11df4 <process_recieved_packet+0x2fc>)
   11bf6:	18cb      	adds	r3, r1, r3
   11bf8:	78db      	ldrb	r3, [r3, #3]
   11bfa:	b21b      	sxth	r3, r3
   11bfc:	4313      	orrs	r3, r2
   11bfe:	b21a      	sxth	r2, r3
   11c00:	4b7e      	ldr	r3, [pc, #504]	; (11dfc <process_recieved_packet+0x304>)
   11c02:	819a      	strh	r2, [r3, #12]
		latest_vesc_vals.rpm = (vesc_revieve_packet.payload[GET_VALUES_RPM] << 24) | (vesc_revieve_packet.payload[GET_VALUES_RPM+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_RPM+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_RPM+3];
   11c04:	4b83      	ldr	r3, [pc, #524]	; (11e14 <process_recieved_packet+0x31c>)
   11c06:	781b      	ldrb	r3, [r3, #0]
   11c08:	001a      	movs	r2, r3
   11c0a:	4b7a      	ldr	r3, [pc, #488]	; (11df4 <process_recieved_packet+0x2fc>)
   11c0c:	189b      	adds	r3, r3, r2
   11c0e:	78db      	ldrb	r3, [r3, #3]
   11c10:	061a      	lsls	r2, r3, #24
   11c12:	4b80      	ldr	r3, [pc, #512]	; (11e14 <process_recieved_packet+0x31c>)
   11c14:	781b      	ldrb	r3, [r3, #0]
   11c16:	3301      	adds	r3, #1
   11c18:	4976      	ldr	r1, [pc, #472]	; (11df4 <process_recieved_packet+0x2fc>)
   11c1a:	18cb      	adds	r3, r1, r3
   11c1c:	78db      	ldrb	r3, [r3, #3]
   11c1e:	041b      	lsls	r3, r3, #16
   11c20:	431a      	orrs	r2, r3
   11c22:	4b7c      	ldr	r3, [pc, #496]	; (11e14 <process_recieved_packet+0x31c>)
   11c24:	781b      	ldrb	r3, [r3, #0]
   11c26:	3302      	adds	r3, #2
   11c28:	4972      	ldr	r1, [pc, #456]	; (11df4 <process_recieved_packet+0x2fc>)
   11c2a:	18cb      	adds	r3, r1, r3
   11c2c:	78db      	ldrb	r3, [r3, #3]
   11c2e:	021b      	lsls	r3, r3, #8
   11c30:	4313      	orrs	r3, r2
   11c32:	4a78      	ldr	r2, [pc, #480]	; (11e14 <process_recieved_packet+0x31c>)
   11c34:	7812      	ldrb	r2, [r2, #0]
   11c36:	3203      	adds	r2, #3
   11c38:	496e      	ldr	r1, [pc, #440]	; (11df4 <process_recieved_packet+0x2fc>)
   11c3a:	188a      	adds	r2, r1, r2
   11c3c:	78d2      	ldrb	r2, [r2, #3]
   11c3e:	431a      	orrs	r2, r3
   11c40:	4b6e      	ldr	r3, [pc, #440]	; (11dfc <process_recieved_packet+0x304>)
   11c42:	611a      	str	r2, [r3, #16]
		latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[GET_VALUES_IN_VOLT] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_VOLT+1];
   11c44:	4b74      	ldr	r3, [pc, #464]	; (11e18 <process_recieved_packet+0x320>)
   11c46:	781b      	ldrb	r3, [r3, #0]
   11c48:	001a      	movs	r2, r3
   11c4a:	4b6a      	ldr	r3, [pc, #424]	; (11df4 <process_recieved_packet+0x2fc>)
   11c4c:	189b      	adds	r3, r3, r2
   11c4e:	78db      	ldrb	r3, [r3, #3]
   11c50:	021b      	lsls	r3, r3, #8
   11c52:	b21a      	sxth	r2, r3
   11c54:	4b70      	ldr	r3, [pc, #448]	; (11e18 <process_recieved_packet+0x320>)
   11c56:	781b      	ldrb	r3, [r3, #0]
   11c58:	3301      	adds	r3, #1
   11c5a:	4966      	ldr	r1, [pc, #408]	; (11df4 <process_recieved_packet+0x2fc>)
   11c5c:	18cb      	adds	r3, r1, r3
   11c5e:	78db      	ldrb	r3, [r3, #3]
   11c60:	b21b      	sxth	r3, r3
   11c62:	4313      	orrs	r3, r2
   11c64:	b21a      	sxth	r2, r3
   11c66:	4b65      	ldr	r3, [pc, #404]	; (11dfc <process_recieved_packet+0x304>)
   11c68:	829a      	strh	r2, [r3, #20]
		latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[GET_VALUES_AH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_USED+3])/100;
   11c6a:	4b6c      	ldr	r3, [pc, #432]	; (11e1c <process_recieved_packet+0x324>)
   11c6c:	781b      	ldrb	r3, [r3, #0]
   11c6e:	001a      	movs	r2, r3
   11c70:	4b60      	ldr	r3, [pc, #384]	; (11df4 <process_recieved_packet+0x2fc>)
   11c72:	189b      	adds	r3, r3, r2
   11c74:	78db      	ldrb	r3, [r3, #3]
   11c76:	061a      	lsls	r2, r3, #24
   11c78:	4b68      	ldr	r3, [pc, #416]	; (11e1c <process_recieved_packet+0x324>)
   11c7a:	781b      	ldrb	r3, [r3, #0]
   11c7c:	3301      	adds	r3, #1
   11c7e:	495d      	ldr	r1, [pc, #372]	; (11df4 <process_recieved_packet+0x2fc>)
   11c80:	18cb      	adds	r3, r1, r3
   11c82:	78db      	ldrb	r3, [r3, #3]
   11c84:	041b      	lsls	r3, r3, #16
   11c86:	431a      	orrs	r2, r3
   11c88:	4b64      	ldr	r3, [pc, #400]	; (11e1c <process_recieved_packet+0x324>)
   11c8a:	781b      	ldrb	r3, [r3, #0]
   11c8c:	3302      	adds	r3, #2
   11c8e:	4959      	ldr	r1, [pc, #356]	; (11df4 <process_recieved_packet+0x2fc>)
   11c90:	18cb      	adds	r3, r1, r3
   11c92:	78db      	ldrb	r3, [r3, #3]
   11c94:	021b      	lsls	r3, r3, #8
   11c96:	4313      	orrs	r3, r2
   11c98:	4a60      	ldr	r2, [pc, #384]	; (11e1c <process_recieved_packet+0x324>)
   11c9a:	7812      	ldrb	r2, [r2, #0]
   11c9c:	3203      	adds	r2, #3
   11c9e:	4955      	ldr	r1, [pc, #340]	; (11df4 <process_recieved_packet+0x2fc>)
   11ca0:	188a      	adds	r2, r1, r2
   11ca2:	78d2      	ldrb	r2, [r2, #3]
   11ca4:	431a      	orrs	r2, r3
   11ca6:	4b5e      	ldr	r3, [pc, #376]	; (11e20 <process_recieved_packet+0x328>)
   11ca8:	2164      	movs	r1, #100	; 0x64
   11caa:	0010      	movs	r0, r2
   11cac:	4798      	blx	r3
   11cae:	0003      	movs	r3, r0
   11cb0:	001a      	movs	r2, r3
   11cb2:	4b52      	ldr	r3, [pc, #328]	; (11dfc <process_recieved_packet+0x304>)
   11cb4:	619a      	str	r2, [r3, #24]
		latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_AH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+3])/100;
   11cb6:	4b5b      	ldr	r3, [pc, #364]	; (11e24 <process_recieved_packet+0x32c>)
   11cb8:	781b      	ldrb	r3, [r3, #0]
   11cba:	001a      	movs	r2, r3
   11cbc:	4b4d      	ldr	r3, [pc, #308]	; (11df4 <process_recieved_packet+0x2fc>)
   11cbe:	189b      	adds	r3, r3, r2
   11cc0:	78db      	ldrb	r3, [r3, #3]
   11cc2:	061a      	lsls	r2, r3, #24
   11cc4:	4b57      	ldr	r3, [pc, #348]	; (11e24 <process_recieved_packet+0x32c>)
   11cc6:	781b      	ldrb	r3, [r3, #0]
   11cc8:	3301      	adds	r3, #1
   11cca:	494a      	ldr	r1, [pc, #296]	; (11df4 <process_recieved_packet+0x2fc>)
   11ccc:	18cb      	adds	r3, r1, r3
   11cce:	78db      	ldrb	r3, [r3, #3]
   11cd0:	041b      	lsls	r3, r3, #16
   11cd2:	431a      	orrs	r2, r3
   11cd4:	4b53      	ldr	r3, [pc, #332]	; (11e24 <process_recieved_packet+0x32c>)
   11cd6:	781b      	ldrb	r3, [r3, #0]
   11cd8:	3302      	adds	r3, #2
   11cda:	4946      	ldr	r1, [pc, #280]	; (11df4 <process_recieved_packet+0x2fc>)
   11cdc:	18cb      	adds	r3, r1, r3
   11cde:	78db      	ldrb	r3, [r3, #3]
   11ce0:	021b      	lsls	r3, r3, #8
   11ce2:	4313      	orrs	r3, r2
   11ce4:	4a4f      	ldr	r2, [pc, #316]	; (11e24 <process_recieved_packet+0x32c>)
   11ce6:	7812      	ldrb	r2, [r2, #0]
   11ce8:	3203      	adds	r2, #3
   11cea:	4942      	ldr	r1, [pc, #264]	; (11df4 <process_recieved_packet+0x2fc>)
   11cec:	188a      	adds	r2, r1, r2
   11cee:	78d2      	ldrb	r2, [r2, #3]
   11cf0:	431a      	orrs	r2, r3
   11cf2:	4b4b      	ldr	r3, [pc, #300]	; (11e20 <process_recieved_packet+0x328>)
   11cf4:	2164      	movs	r1, #100	; 0x64
   11cf6:	0010      	movs	r0, r2
   11cf8:	4798      	blx	r3
   11cfa:	0003      	movs	r3, r0
   11cfc:	001a      	movs	r2, r3
   11cfe:	4b3f      	ldr	r3, [pc, #252]	; (11dfc <process_recieved_packet+0x304>)
   11d00:	61da      	str	r2, [r3, #28]
		latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[GET_VALUES_WH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_USED+3])/100;
   11d02:	4b49      	ldr	r3, [pc, #292]	; (11e28 <process_recieved_packet+0x330>)
   11d04:	781b      	ldrb	r3, [r3, #0]
   11d06:	001a      	movs	r2, r3
   11d08:	4b3a      	ldr	r3, [pc, #232]	; (11df4 <process_recieved_packet+0x2fc>)
   11d0a:	189b      	adds	r3, r3, r2
   11d0c:	78db      	ldrb	r3, [r3, #3]
   11d0e:	061a      	lsls	r2, r3, #24
   11d10:	4b45      	ldr	r3, [pc, #276]	; (11e28 <process_recieved_packet+0x330>)
   11d12:	781b      	ldrb	r3, [r3, #0]
   11d14:	3301      	adds	r3, #1
   11d16:	4937      	ldr	r1, [pc, #220]	; (11df4 <process_recieved_packet+0x2fc>)
   11d18:	18cb      	adds	r3, r1, r3
   11d1a:	78db      	ldrb	r3, [r3, #3]
   11d1c:	041b      	lsls	r3, r3, #16
   11d1e:	431a      	orrs	r2, r3
   11d20:	4b41      	ldr	r3, [pc, #260]	; (11e28 <process_recieved_packet+0x330>)
   11d22:	781b      	ldrb	r3, [r3, #0]
   11d24:	3302      	adds	r3, #2
   11d26:	4933      	ldr	r1, [pc, #204]	; (11df4 <process_recieved_packet+0x2fc>)
   11d28:	18cb      	adds	r3, r1, r3
   11d2a:	78db      	ldrb	r3, [r3, #3]
   11d2c:	021b      	lsls	r3, r3, #8
   11d2e:	4313      	orrs	r3, r2
   11d30:	4a3d      	ldr	r2, [pc, #244]	; (11e28 <process_recieved_packet+0x330>)
   11d32:	7812      	ldrb	r2, [r2, #0]
   11d34:	3203      	adds	r2, #3
   11d36:	492f      	ldr	r1, [pc, #188]	; (11df4 <process_recieved_packet+0x2fc>)
   11d38:	188a      	adds	r2, r1, r2
   11d3a:	78d2      	ldrb	r2, [r2, #3]
   11d3c:	431a      	orrs	r2, r3
   11d3e:	4b38      	ldr	r3, [pc, #224]	; (11e20 <process_recieved_packet+0x328>)
   11d40:	2164      	movs	r1, #100	; 0x64
   11d42:	0010      	movs	r0, r2
   11d44:	4798      	blx	r3
   11d46:	0003      	movs	r3, r0
   11d48:	001a      	movs	r2, r3
   11d4a:	4b2c      	ldr	r3, [pc, #176]	; (11dfc <process_recieved_packet+0x304>)
   11d4c:	621a      	str	r2, [r3, #32]
		latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_WH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+3])/100;
   11d4e:	4b37      	ldr	r3, [pc, #220]	; (11e2c <process_recieved_packet+0x334>)
   11d50:	781b      	ldrb	r3, [r3, #0]
   11d52:	001a      	movs	r2, r3
   11d54:	4b27      	ldr	r3, [pc, #156]	; (11df4 <process_recieved_packet+0x2fc>)
   11d56:	189b      	adds	r3, r3, r2
   11d58:	78db      	ldrb	r3, [r3, #3]
   11d5a:	061a      	lsls	r2, r3, #24
   11d5c:	4b33      	ldr	r3, [pc, #204]	; (11e2c <process_recieved_packet+0x334>)
   11d5e:	781b      	ldrb	r3, [r3, #0]
   11d60:	3301      	adds	r3, #1
   11d62:	4924      	ldr	r1, [pc, #144]	; (11df4 <process_recieved_packet+0x2fc>)
   11d64:	18cb      	adds	r3, r1, r3
   11d66:	78db      	ldrb	r3, [r3, #3]
   11d68:	041b      	lsls	r3, r3, #16
   11d6a:	431a      	orrs	r2, r3
   11d6c:	4b2f      	ldr	r3, [pc, #188]	; (11e2c <process_recieved_packet+0x334>)
   11d6e:	781b      	ldrb	r3, [r3, #0]
   11d70:	3302      	adds	r3, #2
   11d72:	4920      	ldr	r1, [pc, #128]	; (11df4 <process_recieved_packet+0x2fc>)
   11d74:	18cb      	adds	r3, r1, r3
   11d76:	78db      	ldrb	r3, [r3, #3]
   11d78:	021b      	lsls	r3, r3, #8
   11d7a:	4313      	orrs	r3, r2
   11d7c:	4a2b      	ldr	r2, [pc, #172]	; (11e2c <process_recieved_packet+0x334>)
   11d7e:	7812      	ldrb	r2, [r2, #0]
   11d80:	3203      	adds	r2, #3
   11d82:	491c      	ldr	r1, [pc, #112]	; (11df4 <process_recieved_packet+0x2fc>)
   11d84:	188a      	adds	r2, r1, r2
   11d86:	78d2      	ldrb	r2, [r2, #3]
   11d88:	431a      	orrs	r2, r3
   11d8a:	4b25      	ldr	r3, [pc, #148]	; (11e20 <process_recieved_packet+0x328>)
   11d8c:	2164      	movs	r1, #100	; 0x64
   11d8e:	0010      	movs	r0, r2
   11d90:	4798      	blx	r3
   11d92:	0003      	movs	r3, r0
   11d94:	001a      	movs	r2, r3
   11d96:	4b19      	ldr	r3, [pc, #100]	; (11dfc <process_recieved_packet+0x304>)
   11d98:	625a      	str	r2, [r3, #36]	; 0x24
		latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[GET_VALUES_TACH] << 24) | (vesc_revieve_packet.payload[GET_VALUES_TACH+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_TACH+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_TACH+2];
   11d9a:	4b25      	ldr	r3, [pc, #148]	; (11e30 <process_recieved_packet+0x338>)
   11d9c:	781b      	ldrb	r3, [r3, #0]
   11d9e:	001a      	movs	r2, r3
   11da0:	4b14      	ldr	r3, [pc, #80]	; (11df4 <process_recieved_packet+0x2fc>)
   11da2:	189b      	adds	r3, r3, r2
   11da4:	78db      	ldrb	r3, [r3, #3]
   11da6:	061a      	lsls	r2, r3, #24
   11da8:	4b21      	ldr	r3, [pc, #132]	; (11e30 <process_recieved_packet+0x338>)
   11daa:	781b      	ldrb	r3, [r3, #0]
   11dac:	3301      	adds	r3, #1
   11dae:	4911      	ldr	r1, [pc, #68]	; (11df4 <process_recieved_packet+0x2fc>)
   11db0:	18cb      	adds	r3, r1, r3
   11db2:	78db      	ldrb	r3, [r3, #3]
   11db4:	041b      	lsls	r3, r3, #16
   11db6:	431a      	orrs	r2, r3
   11db8:	4b1d      	ldr	r3, [pc, #116]	; (11e30 <process_recieved_packet+0x338>)
   11dba:	781b      	ldrb	r3, [r3, #0]
   11dbc:	3302      	adds	r3, #2
   11dbe:	490d      	ldr	r1, [pc, #52]	; (11df4 <process_recieved_packet+0x2fc>)
   11dc0:	18cb      	adds	r3, r1, r3
   11dc2:	78db      	ldrb	r3, [r3, #3]
   11dc4:	021b      	lsls	r3, r3, #8
   11dc6:	4313      	orrs	r3, r2
   11dc8:	4a19      	ldr	r2, [pc, #100]	; (11e30 <process_recieved_packet+0x338>)
   11dca:	7812      	ldrb	r2, [r2, #0]
   11dcc:	3202      	adds	r2, #2
   11dce:	4909      	ldr	r1, [pc, #36]	; (11df4 <process_recieved_packet+0x2fc>)
   11dd0:	188a      	adds	r2, r1, r2
   11dd2:	78d2      	ldrb	r2, [r2, #3]
   11dd4:	431a      	orrs	r2, r3
   11dd6:	4b09      	ldr	r3, [pc, #36]	; (11dfc <process_recieved_packet+0x304>)
   11dd8:	629a      	str	r2, [r3, #40]	; 0x28
		latest_vesc_vals.fault = vesc_revieve_packet.payload[GET_VALUES_FAULT];
   11dda:	4b16      	ldr	r3, [pc, #88]	; (11e34 <process_recieved_packet+0x33c>)
   11ddc:	781b      	ldrb	r3, [r3, #0]
   11dde:	001a      	movs	r2, r3
   11de0:	4b04      	ldr	r3, [pc, #16]	; (11df4 <process_recieved_packet+0x2fc>)
   11de2:	189b      	adds	r3, r3, r2
   11de4:	78db      	ldrb	r3, [r3, #3]
   11de6:	b259      	sxtb	r1, r3
   11de8:	4b04      	ldr	r3, [pc, #16]	; (11dfc <process_recieved_packet+0x304>)
   11dea:	222c      	movs	r2, #44	; 0x2c
   11dec:	5499      	strb	r1, [r3, r2]
}
   11dee:	f000 fcc7 	bl	12780 <process_recieved_packet+0xc88>
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	200015cc 	.word	0x200015cc
   11df8:	20000404 	.word	0x20000404
   11dfc:	20000e38 	.word	0x20000e38
   11e00:	20000405 	.word	0x20000405
   11e04:	2000040b 	.word	0x2000040b
   11e08:	2000040c 	.word	0x2000040c
   11e0c:	2000040d 	.word	0x2000040d
   11e10:	2000040e 	.word	0x2000040e
   11e14:	2000040f 	.word	0x2000040f
   11e18:	20000410 	.word	0x20000410
   11e1c:	20000411 	.word	0x20000411
   11e20:	00019295 	.word	0x00019295
   11e24:	20000412 	.word	0x20000412
   11e28:	20000413 	.word	0x20000413
   11e2c:	20000414 	.word	0x20000414
   11e30:	20000415 	.word	0x20000415
   11e34:	20000416 	.word	0x20000416
	} else if(packet_id == COMM_GET_MCCONF){
   11e38:	4bfd      	ldr	r3, [pc, #1012]	; (12230 <process_recieved_packet+0x738>)
   11e3a:	781b      	ldrb	r3, [r3, #0]
   11e3c:	1dfa      	adds	r2, r7, #7
   11e3e:	7812      	ldrb	r2, [r2, #0]
   11e40:	429a      	cmp	r2, r3
   11e42:	d001      	beq.n	11e48 <process_recieved_packet+0x350>
   11e44:	f000 fc65 	bl	12712 <process_recieved_packet+0xc1a>
		if(esc_fw == FW_3v6){
   11e48:	4bfa      	ldr	r3, [pc, #1000]	; (12234 <process_recieved_packet+0x73c>)
   11e4a:	781b      	ldrb	r3, [r3, #0]
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d000      	beq.n	11e52 <process_recieved_packet+0x35a>
   11e50:	e32a      	b.n	124a8 <process_recieved_packet+0x9b0>
			mcconf_limits.motor_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+3])/1000;
   11e52:	4bf9      	ldr	r3, [pc, #996]	; (12238 <process_recieved_packet+0x740>)
   11e54:	781b      	ldrb	r3, [r3, #0]
   11e56:	001a      	movs	r2, r3
   11e58:	4bf8      	ldr	r3, [pc, #992]	; (1223c <process_recieved_packet+0x744>)
   11e5a:	189b      	adds	r3, r3, r2
   11e5c:	78db      	ldrb	r3, [r3, #3]
   11e5e:	061a      	lsls	r2, r3, #24
   11e60:	4bf5      	ldr	r3, [pc, #980]	; (12238 <process_recieved_packet+0x740>)
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	3301      	adds	r3, #1
   11e66:	49f5      	ldr	r1, [pc, #980]	; (1223c <process_recieved_packet+0x744>)
   11e68:	18cb      	adds	r3, r1, r3
   11e6a:	78db      	ldrb	r3, [r3, #3]
   11e6c:	041b      	lsls	r3, r3, #16
   11e6e:	431a      	orrs	r2, r3
   11e70:	4bf1      	ldr	r3, [pc, #964]	; (12238 <process_recieved_packet+0x740>)
   11e72:	781b      	ldrb	r3, [r3, #0]
   11e74:	3302      	adds	r3, #2
   11e76:	49f1      	ldr	r1, [pc, #964]	; (1223c <process_recieved_packet+0x744>)
   11e78:	18cb      	adds	r3, r1, r3
   11e7a:	78db      	ldrb	r3, [r3, #3]
   11e7c:	021b      	lsls	r3, r3, #8
   11e7e:	4313      	orrs	r3, r2
   11e80:	4aed      	ldr	r2, [pc, #948]	; (12238 <process_recieved_packet+0x740>)
   11e82:	7812      	ldrb	r2, [r2, #0]
   11e84:	3203      	adds	r2, #3
   11e86:	49ed      	ldr	r1, [pc, #948]	; (1223c <process_recieved_packet+0x744>)
   11e88:	188a      	adds	r2, r1, r2
   11e8a:	78d2      	ldrb	r2, [r2, #3]
   11e8c:	4313      	orrs	r3, r2
   11e8e:	0018      	movs	r0, r3
   11e90:	4beb      	ldr	r3, [pc, #940]	; (12240 <process_recieved_packet+0x748>)
   11e92:	22fa      	movs	r2, #250	; 0xfa
   11e94:	0091      	lsls	r1, r2, #2
   11e96:	4798      	blx	r3
   11e98:	0003      	movs	r3, r0
   11e9a:	001a      	movs	r2, r3
   11e9c:	4be9      	ldr	r3, [pc, #932]	; (12244 <process_recieved_packet+0x74c>)
   11e9e:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+3])/1000;
   11ea0:	4be9      	ldr	r3, [pc, #932]	; (12248 <process_recieved_packet+0x750>)
   11ea2:	781b      	ldrb	r3, [r3, #0]
   11ea4:	001a      	movs	r2, r3
   11ea6:	4be5      	ldr	r3, [pc, #916]	; (1223c <process_recieved_packet+0x744>)
   11ea8:	189b      	adds	r3, r3, r2
   11eaa:	78db      	ldrb	r3, [r3, #3]
   11eac:	061a      	lsls	r2, r3, #24
   11eae:	4be6      	ldr	r3, [pc, #920]	; (12248 <process_recieved_packet+0x750>)
   11eb0:	781b      	ldrb	r3, [r3, #0]
   11eb2:	3301      	adds	r3, #1
   11eb4:	49e1      	ldr	r1, [pc, #900]	; (1223c <process_recieved_packet+0x744>)
   11eb6:	18cb      	adds	r3, r1, r3
   11eb8:	78db      	ldrb	r3, [r3, #3]
   11eba:	041b      	lsls	r3, r3, #16
   11ebc:	431a      	orrs	r2, r3
   11ebe:	4be2      	ldr	r3, [pc, #904]	; (12248 <process_recieved_packet+0x750>)
   11ec0:	781b      	ldrb	r3, [r3, #0]
   11ec2:	3302      	adds	r3, #2
   11ec4:	49dd      	ldr	r1, [pc, #884]	; (1223c <process_recieved_packet+0x744>)
   11ec6:	18cb      	adds	r3, r1, r3
   11ec8:	78db      	ldrb	r3, [r3, #3]
   11eca:	021b      	lsls	r3, r3, #8
   11ecc:	4313      	orrs	r3, r2
   11ece:	4ade      	ldr	r2, [pc, #888]	; (12248 <process_recieved_packet+0x750>)
   11ed0:	7812      	ldrb	r2, [r2, #0]
   11ed2:	3203      	adds	r2, #3
   11ed4:	49d9      	ldr	r1, [pc, #868]	; (1223c <process_recieved_packet+0x744>)
   11ed6:	188a      	adds	r2, r1, r2
   11ed8:	78d2      	ldrb	r2, [r2, #3]
   11eda:	4313      	orrs	r3, r2
   11edc:	0018      	movs	r0, r3
   11ede:	4bd8      	ldr	r3, [pc, #864]	; (12240 <process_recieved_packet+0x748>)
   11ee0:	22fa      	movs	r2, #250	; 0xfa
   11ee2:	0091      	lsls	r1, r2, #2
   11ee4:	4798      	blx	r3
   11ee6:	0003      	movs	r3, r0
   11ee8:	001a      	movs	r2, r3
   11eea:	4bd6      	ldr	r3, [pc, #856]	; (12244 <process_recieved_packet+0x74c>)
   11eec:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+3])/1000;
   11eee:	4bd7      	ldr	r3, [pc, #860]	; (1224c <process_recieved_packet+0x754>)
   11ef0:	781b      	ldrb	r3, [r3, #0]
   11ef2:	001a      	movs	r2, r3
   11ef4:	4bd1      	ldr	r3, [pc, #836]	; (1223c <process_recieved_packet+0x744>)
   11ef6:	189b      	adds	r3, r3, r2
   11ef8:	78db      	ldrb	r3, [r3, #3]
   11efa:	061a      	lsls	r2, r3, #24
   11efc:	4bd3      	ldr	r3, [pc, #844]	; (1224c <process_recieved_packet+0x754>)
   11efe:	781b      	ldrb	r3, [r3, #0]
   11f00:	3301      	adds	r3, #1
   11f02:	49ce      	ldr	r1, [pc, #824]	; (1223c <process_recieved_packet+0x744>)
   11f04:	18cb      	adds	r3, r1, r3
   11f06:	78db      	ldrb	r3, [r3, #3]
   11f08:	041b      	lsls	r3, r3, #16
   11f0a:	431a      	orrs	r2, r3
   11f0c:	4bcf      	ldr	r3, [pc, #828]	; (1224c <process_recieved_packet+0x754>)
   11f0e:	781b      	ldrb	r3, [r3, #0]
   11f10:	3302      	adds	r3, #2
   11f12:	49ca      	ldr	r1, [pc, #808]	; (1223c <process_recieved_packet+0x744>)
   11f14:	18cb      	adds	r3, r1, r3
   11f16:	78db      	ldrb	r3, [r3, #3]
   11f18:	021b      	lsls	r3, r3, #8
   11f1a:	4313      	orrs	r3, r2
   11f1c:	4acb      	ldr	r2, [pc, #812]	; (1224c <process_recieved_packet+0x754>)
   11f1e:	7812      	ldrb	r2, [r2, #0]
   11f20:	3203      	adds	r2, #3
   11f22:	49c6      	ldr	r1, [pc, #792]	; (1223c <process_recieved_packet+0x744>)
   11f24:	188a      	adds	r2, r1, r2
   11f26:	78d2      	ldrb	r2, [r2, #3]
   11f28:	4313      	orrs	r3, r2
   11f2a:	0018      	movs	r0, r3
   11f2c:	4bc4      	ldr	r3, [pc, #784]	; (12240 <process_recieved_packet+0x748>)
   11f2e:	22fa      	movs	r2, #250	; 0xfa
   11f30:	0091      	lsls	r1, r2, #2
   11f32:	4798      	blx	r3
   11f34:	0003      	movs	r3, r0
   11f36:	001a      	movs	r2, r3
   11f38:	4bc2      	ldr	r3, [pc, #776]	; (12244 <process_recieved_packet+0x74c>)
   11f3a:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+3])/1000;
   11f3c:	4bc4      	ldr	r3, [pc, #784]	; (12250 <process_recieved_packet+0x758>)
   11f3e:	781b      	ldrb	r3, [r3, #0]
   11f40:	001a      	movs	r2, r3
   11f42:	4bbe      	ldr	r3, [pc, #760]	; (1223c <process_recieved_packet+0x744>)
   11f44:	189b      	adds	r3, r3, r2
   11f46:	78db      	ldrb	r3, [r3, #3]
   11f48:	061a      	lsls	r2, r3, #24
   11f4a:	4bc1      	ldr	r3, [pc, #772]	; (12250 <process_recieved_packet+0x758>)
   11f4c:	781b      	ldrb	r3, [r3, #0]
   11f4e:	3301      	adds	r3, #1
   11f50:	49ba      	ldr	r1, [pc, #744]	; (1223c <process_recieved_packet+0x744>)
   11f52:	18cb      	adds	r3, r1, r3
   11f54:	78db      	ldrb	r3, [r3, #3]
   11f56:	041b      	lsls	r3, r3, #16
   11f58:	431a      	orrs	r2, r3
   11f5a:	4bbd      	ldr	r3, [pc, #756]	; (12250 <process_recieved_packet+0x758>)
   11f5c:	781b      	ldrb	r3, [r3, #0]
   11f5e:	3302      	adds	r3, #2
   11f60:	49b6      	ldr	r1, [pc, #728]	; (1223c <process_recieved_packet+0x744>)
   11f62:	18cb      	adds	r3, r1, r3
   11f64:	78db      	ldrb	r3, [r3, #3]
   11f66:	021b      	lsls	r3, r3, #8
   11f68:	4313      	orrs	r3, r2
   11f6a:	4ab9      	ldr	r2, [pc, #740]	; (12250 <process_recieved_packet+0x758>)
   11f6c:	7812      	ldrb	r2, [r2, #0]
   11f6e:	3203      	adds	r2, #3
   11f70:	49b2      	ldr	r1, [pc, #712]	; (1223c <process_recieved_packet+0x744>)
   11f72:	188a      	adds	r2, r1, r2
   11f74:	78d2      	ldrb	r2, [r2, #3]
   11f76:	4313      	orrs	r3, r2
   11f78:	0018      	movs	r0, r3
   11f7a:	4bb1      	ldr	r3, [pc, #708]	; (12240 <process_recieved_packet+0x748>)
   11f7c:	22fa      	movs	r2, #250	; 0xfa
   11f7e:	0091      	lsls	r1, r2, #2
   11f80:	4798      	blx	r3
   11f82:	0003      	movs	r3, r0
   11f84:	001a      	movs	r2, r3
   11f86:	4baf      	ldr	r3, [pc, #700]	; (12244 <process_recieved_packet+0x74c>)
   11f88:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+3])/1000;
   11f8a:	4bb2      	ldr	r3, [pc, #712]	; (12254 <process_recieved_packet+0x75c>)
   11f8c:	781b      	ldrb	r3, [r3, #0]
   11f8e:	001a      	movs	r2, r3
   11f90:	4baa      	ldr	r3, [pc, #680]	; (1223c <process_recieved_packet+0x744>)
   11f92:	189b      	adds	r3, r3, r2
   11f94:	78db      	ldrb	r3, [r3, #3]
   11f96:	061a      	lsls	r2, r3, #24
   11f98:	4bae      	ldr	r3, [pc, #696]	; (12254 <process_recieved_packet+0x75c>)
   11f9a:	781b      	ldrb	r3, [r3, #0]
   11f9c:	3301      	adds	r3, #1
   11f9e:	49a7      	ldr	r1, [pc, #668]	; (1223c <process_recieved_packet+0x744>)
   11fa0:	18cb      	adds	r3, r1, r3
   11fa2:	78db      	ldrb	r3, [r3, #3]
   11fa4:	041b      	lsls	r3, r3, #16
   11fa6:	431a      	orrs	r2, r3
   11fa8:	4baa      	ldr	r3, [pc, #680]	; (12254 <process_recieved_packet+0x75c>)
   11faa:	781b      	ldrb	r3, [r3, #0]
   11fac:	3302      	adds	r3, #2
   11fae:	49a3      	ldr	r1, [pc, #652]	; (1223c <process_recieved_packet+0x744>)
   11fb0:	18cb      	adds	r3, r1, r3
   11fb2:	78db      	ldrb	r3, [r3, #3]
   11fb4:	021b      	lsls	r3, r3, #8
   11fb6:	4313      	orrs	r3, r2
   11fb8:	4aa6      	ldr	r2, [pc, #664]	; (12254 <process_recieved_packet+0x75c>)
   11fba:	7812      	ldrb	r2, [r2, #0]
   11fbc:	3203      	adds	r2, #3
   11fbe:	499f      	ldr	r1, [pc, #636]	; (1223c <process_recieved_packet+0x744>)
   11fc0:	188a      	adds	r2, r1, r2
   11fc2:	78d2      	ldrb	r2, [r2, #3]
   11fc4:	4313      	orrs	r3, r2
   11fc6:	0018      	movs	r0, r3
   11fc8:	4b9d      	ldr	r3, [pc, #628]	; (12240 <process_recieved_packet+0x748>)
   11fca:	22fa      	movs	r2, #250	; 0xfa
   11fcc:	0091      	lsls	r1, r2, #2
   11fce:	4798      	blx	r3
   11fd0:	0003      	movs	r3, r0
   11fd2:	001a      	movs	r2, r3
   11fd4:	4b9b      	ldr	r3, [pc, #620]	; (12244 <process_recieved_packet+0x74c>)
   11fd6:	611a      	str	r2, [r3, #16]
			mcconf_limits.min_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+3])/1000;
   11fd8:	4b9f      	ldr	r3, [pc, #636]	; (12258 <process_recieved_packet+0x760>)
   11fda:	781b      	ldrb	r3, [r3, #0]
   11fdc:	001a      	movs	r2, r3
   11fde:	4b97      	ldr	r3, [pc, #604]	; (1223c <process_recieved_packet+0x744>)
   11fe0:	189b      	adds	r3, r3, r2
   11fe2:	78db      	ldrb	r3, [r3, #3]
   11fe4:	061a      	lsls	r2, r3, #24
   11fe6:	4b9c      	ldr	r3, [pc, #624]	; (12258 <process_recieved_packet+0x760>)
   11fe8:	781b      	ldrb	r3, [r3, #0]
   11fea:	3301      	adds	r3, #1
   11fec:	4993      	ldr	r1, [pc, #588]	; (1223c <process_recieved_packet+0x744>)
   11fee:	18cb      	adds	r3, r1, r3
   11ff0:	78db      	ldrb	r3, [r3, #3]
   11ff2:	041b      	lsls	r3, r3, #16
   11ff4:	431a      	orrs	r2, r3
   11ff6:	4b98      	ldr	r3, [pc, #608]	; (12258 <process_recieved_packet+0x760>)
   11ff8:	781b      	ldrb	r3, [r3, #0]
   11ffa:	3302      	adds	r3, #2
   11ffc:	498f      	ldr	r1, [pc, #572]	; (1223c <process_recieved_packet+0x744>)
   11ffe:	18cb      	adds	r3, r1, r3
   12000:	78db      	ldrb	r3, [r3, #3]
   12002:	021b      	lsls	r3, r3, #8
   12004:	4313      	orrs	r3, r2
   12006:	4a94      	ldr	r2, [pc, #592]	; (12258 <process_recieved_packet+0x760>)
   12008:	7812      	ldrb	r2, [r2, #0]
   1200a:	3203      	adds	r2, #3
   1200c:	498b      	ldr	r1, [pc, #556]	; (1223c <process_recieved_packet+0x744>)
   1200e:	188a      	adds	r2, r1, r2
   12010:	78d2      	ldrb	r2, [r2, #3]
   12012:	4313      	orrs	r3, r2
   12014:	0018      	movs	r0, r3
   12016:	4b8a      	ldr	r3, [pc, #552]	; (12240 <process_recieved_packet+0x748>)
   12018:	22fa      	movs	r2, #250	; 0xfa
   1201a:	0091      	lsls	r1, r2, #2
   1201c:	4798      	blx	r3
   1201e:	0003      	movs	r3, r0
   12020:	001a      	movs	r2, r3
   12022:	4b88      	ldr	r3, [pc, #544]	; (12244 <process_recieved_packet+0x74c>)
   12024:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+3])/1000;
   12026:	4b8d      	ldr	r3, [pc, #564]	; (1225c <process_recieved_packet+0x764>)
   12028:	781b      	ldrb	r3, [r3, #0]
   1202a:	001a      	movs	r2, r3
   1202c:	4b83      	ldr	r3, [pc, #524]	; (1223c <process_recieved_packet+0x744>)
   1202e:	189b      	adds	r3, r3, r2
   12030:	78db      	ldrb	r3, [r3, #3]
   12032:	061a      	lsls	r2, r3, #24
   12034:	4b89      	ldr	r3, [pc, #548]	; (1225c <process_recieved_packet+0x764>)
   12036:	781b      	ldrb	r3, [r3, #0]
   12038:	3301      	adds	r3, #1
   1203a:	4980      	ldr	r1, [pc, #512]	; (1223c <process_recieved_packet+0x744>)
   1203c:	18cb      	adds	r3, r1, r3
   1203e:	78db      	ldrb	r3, [r3, #3]
   12040:	041b      	lsls	r3, r3, #16
   12042:	431a      	orrs	r2, r3
   12044:	4b85      	ldr	r3, [pc, #532]	; (1225c <process_recieved_packet+0x764>)
   12046:	781b      	ldrb	r3, [r3, #0]
   12048:	3302      	adds	r3, #2
   1204a:	497c      	ldr	r1, [pc, #496]	; (1223c <process_recieved_packet+0x744>)
   1204c:	18cb      	adds	r3, r1, r3
   1204e:	78db      	ldrb	r3, [r3, #3]
   12050:	021b      	lsls	r3, r3, #8
   12052:	4313      	orrs	r3, r2
   12054:	4a81      	ldr	r2, [pc, #516]	; (1225c <process_recieved_packet+0x764>)
   12056:	7812      	ldrb	r2, [r2, #0]
   12058:	3203      	adds	r2, #3
   1205a:	4978      	ldr	r1, [pc, #480]	; (1223c <process_recieved_packet+0x744>)
   1205c:	188a      	adds	r2, r1, r2
   1205e:	78d2      	ldrb	r2, [r2, #3]
   12060:	4313      	orrs	r3, r2
   12062:	0018      	movs	r0, r3
   12064:	4b76      	ldr	r3, [pc, #472]	; (12240 <process_recieved_packet+0x748>)
   12066:	22fa      	movs	r2, #250	; 0xfa
   12068:	0091      	lsls	r1, r2, #2
   1206a:	4798      	blx	r3
   1206c:	0003      	movs	r3, r0
   1206e:	001a      	movs	r2, r3
   12070:	4b74      	ldr	r3, [pc, #464]	; (12244 <process_recieved_packet+0x74c>)
   12072:	619a      	str	r2, [r3, #24]
			mcconf_limits.max_erpm_fbrake = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+3])/1000;
   12074:	4b7a      	ldr	r3, [pc, #488]	; (12260 <process_recieved_packet+0x768>)
   12076:	781b      	ldrb	r3, [r3, #0]
   12078:	001a      	movs	r2, r3
   1207a:	4b70      	ldr	r3, [pc, #448]	; (1223c <process_recieved_packet+0x744>)
   1207c:	189b      	adds	r3, r3, r2
   1207e:	78db      	ldrb	r3, [r3, #3]
   12080:	061a      	lsls	r2, r3, #24
   12082:	4b77      	ldr	r3, [pc, #476]	; (12260 <process_recieved_packet+0x768>)
   12084:	781b      	ldrb	r3, [r3, #0]
   12086:	3301      	adds	r3, #1
   12088:	496c      	ldr	r1, [pc, #432]	; (1223c <process_recieved_packet+0x744>)
   1208a:	18cb      	adds	r3, r1, r3
   1208c:	78db      	ldrb	r3, [r3, #3]
   1208e:	041b      	lsls	r3, r3, #16
   12090:	431a      	orrs	r2, r3
   12092:	4b73      	ldr	r3, [pc, #460]	; (12260 <process_recieved_packet+0x768>)
   12094:	781b      	ldrb	r3, [r3, #0]
   12096:	3302      	adds	r3, #2
   12098:	4968      	ldr	r1, [pc, #416]	; (1223c <process_recieved_packet+0x744>)
   1209a:	18cb      	adds	r3, r1, r3
   1209c:	78db      	ldrb	r3, [r3, #3]
   1209e:	021b      	lsls	r3, r3, #8
   120a0:	4313      	orrs	r3, r2
   120a2:	4a6f      	ldr	r2, [pc, #444]	; (12260 <process_recieved_packet+0x768>)
   120a4:	7812      	ldrb	r2, [r2, #0]
   120a6:	3203      	adds	r2, #3
   120a8:	4964      	ldr	r1, [pc, #400]	; (1223c <process_recieved_packet+0x744>)
   120aa:	188a      	adds	r2, r1, r2
   120ac:	78d2      	ldrb	r2, [r2, #3]
   120ae:	4313      	orrs	r3, r2
   120b0:	0018      	movs	r0, r3
   120b2:	4b63      	ldr	r3, [pc, #396]	; (12240 <process_recieved_packet+0x748>)
   120b4:	22fa      	movs	r2, #250	; 0xfa
   120b6:	0091      	lsls	r1, r2, #2
   120b8:	4798      	blx	r3
   120ba:	0003      	movs	r3, r0
   120bc:	001a      	movs	r2, r3
   120be:	4b61      	ldr	r3, [pc, #388]	; (12244 <process_recieved_packet+0x74c>)
   120c0:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+3])/1000;
   120c2:	4b68      	ldr	r3, [pc, #416]	; (12264 <process_recieved_packet+0x76c>)
   120c4:	781b      	ldrb	r3, [r3, #0]
   120c6:	001a      	movs	r2, r3
   120c8:	4b5c      	ldr	r3, [pc, #368]	; (1223c <process_recieved_packet+0x744>)
   120ca:	189b      	adds	r3, r3, r2
   120cc:	78db      	ldrb	r3, [r3, #3]
   120ce:	061a      	lsls	r2, r3, #24
   120d0:	4b64      	ldr	r3, [pc, #400]	; (12264 <process_recieved_packet+0x76c>)
   120d2:	781b      	ldrb	r3, [r3, #0]
   120d4:	3301      	adds	r3, #1
   120d6:	4959      	ldr	r1, [pc, #356]	; (1223c <process_recieved_packet+0x744>)
   120d8:	18cb      	adds	r3, r1, r3
   120da:	78db      	ldrb	r3, [r3, #3]
   120dc:	041b      	lsls	r3, r3, #16
   120de:	431a      	orrs	r2, r3
   120e0:	4b60      	ldr	r3, [pc, #384]	; (12264 <process_recieved_packet+0x76c>)
   120e2:	781b      	ldrb	r3, [r3, #0]
   120e4:	3302      	adds	r3, #2
   120e6:	4955      	ldr	r1, [pc, #340]	; (1223c <process_recieved_packet+0x744>)
   120e8:	18cb      	adds	r3, r1, r3
   120ea:	78db      	ldrb	r3, [r3, #3]
   120ec:	021b      	lsls	r3, r3, #8
   120ee:	4313      	orrs	r3, r2
   120f0:	4a5c      	ldr	r2, [pc, #368]	; (12264 <process_recieved_packet+0x76c>)
   120f2:	7812      	ldrb	r2, [r2, #0]
   120f4:	3203      	adds	r2, #3
   120f6:	4951      	ldr	r1, [pc, #324]	; (1223c <process_recieved_packet+0x744>)
   120f8:	188a      	adds	r2, r1, r2
   120fa:	78d2      	ldrb	r2, [r2, #3]
   120fc:	4313      	orrs	r3, r2
   120fe:	0018      	movs	r0, r3
   12100:	4b4f      	ldr	r3, [pc, #316]	; (12240 <process_recieved_packet+0x748>)
   12102:	22fa      	movs	r2, #250	; 0xfa
   12104:	0091      	lsls	r1, r2, #2
   12106:	4798      	blx	r3
   12108:	0003      	movs	r3, r0
   1210a:	001a      	movs	r2, r3
   1210c:	4b4d      	ldr	r3, [pc, #308]	; (12244 <process_recieved_packet+0x74c>)
   1210e:	621a      	str	r2, [r3, #32]
			mcconf_limits.min_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+3])/1000;
   12110:	4b55      	ldr	r3, [pc, #340]	; (12268 <process_recieved_packet+0x770>)
   12112:	781b      	ldrb	r3, [r3, #0]
   12114:	001a      	movs	r2, r3
   12116:	4b49      	ldr	r3, [pc, #292]	; (1223c <process_recieved_packet+0x744>)
   12118:	189b      	adds	r3, r3, r2
   1211a:	78db      	ldrb	r3, [r3, #3]
   1211c:	061a      	lsls	r2, r3, #24
   1211e:	4b52      	ldr	r3, [pc, #328]	; (12268 <process_recieved_packet+0x770>)
   12120:	781b      	ldrb	r3, [r3, #0]
   12122:	3301      	adds	r3, #1
   12124:	4945      	ldr	r1, [pc, #276]	; (1223c <process_recieved_packet+0x744>)
   12126:	18cb      	adds	r3, r1, r3
   12128:	78db      	ldrb	r3, [r3, #3]
   1212a:	041b      	lsls	r3, r3, #16
   1212c:	431a      	orrs	r2, r3
   1212e:	4b4e      	ldr	r3, [pc, #312]	; (12268 <process_recieved_packet+0x770>)
   12130:	781b      	ldrb	r3, [r3, #0]
   12132:	3302      	adds	r3, #2
   12134:	4941      	ldr	r1, [pc, #260]	; (1223c <process_recieved_packet+0x744>)
   12136:	18cb      	adds	r3, r1, r3
   12138:	78db      	ldrb	r3, [r3, #3]
   1213a:	021b      	lsls	r3, r3, #8
   1213c:	4313      	orrs	r3, r2
   1213e:	4a4a      	ldr	r2, [pc, #296]	; (12268 <process_recieved_packet+0x770>)
   12140:	7812      	ldrb	r2, [r2, #0]
   12142:	3203      	adds	r2, #3
   12144:	493d      	ldr	r1, [pc, #244]	; (1223c <process_recieved_packet+0x744>)
   12146:	188a      	adds	r2, r1, r2
   12148:	78d2      	ldrb	r2, [r2, #3]
   1214a:	4313      	orrs	r3, r2
   1214c:	0018      	movs	r0, r3
   1214e:	4b3c      	ldr	r3, [pc, #240]	; (12240 <process_recieved_packet+0x748>)
   12150:	22fa      	movs	r2, #250	; 0xfa
   12152:	0091      	lsls	r1, r2, #2
   12154:	4798      	blx	r3
   12156:	0003      	movs	r3, r0
   12158:	001a      	movs	r2, r3
   1215a:	4b3a      	ldr	r3, [pc, #232]	; (12244 <process_recieved_packet+0x74c>)
   1215c:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.max_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+3])/1000;
   1215e:	4b43      	ldr	r3, [pc, #268]	; (1226c <process_recieved_packet+0x774>)
   12160:	781b      	ldrb	r3, [r3, #0]
   12162:	001a      	movs	r2, r3
   12164:	4b35      	ldr	r3, [pc, #212]	; (1223c <process_recieved_packet+0x744>)
   12166:	189b      	adds	r3, r3, r2
   12168:	78db      	ldrb	r3, [r3, #3]
   1216a:	061a      	lsls	r2, r3, #24
   1216c:	4b3f      	ldr	r3, [pc, #252]	; (1226c <process_recieved_packet+0x774>)
   1216e:	781b      	ldrb	r3, [r3, #0]
   12170:	3301      	adds	r3, #1
   12172:	4932      	ldr	r1, [pc, #200]	; (1223c <process_recieved_packet+0x744>)
   12174:	18cb      	adds	r3, r1, r3
   12176:	78db      	ldrb	r3, [r3, #3]
   12178:	041b      	lsls	r3, r3, #16
   1217a:	431a      	orrs	r2, r3
   1217c:	4b3b      	ldr	r3, [pc, #236]	; (1226c <process_recieved_packet+0x774>)
   1217e:	781b      	ldrb	r3, [r3, #0]
   12180:	3302      	adds	r3, #2
   12182:	492e      	ldr	r1, [pc, #184]	; (1223c <process_recieved_packet+0x744>)
   12184:	18cb      	adds	r3, r1, r3
   12186:	78db      	ldrb	r3, [r3, #3]
   12188:	021b      	lsls	r3, r3, #8
   1218a:	4313      	orrs	r3, r2
   1218c:	4a37      	ldr	r2, [pc, #220]	; (1226c <process_recieved_packet+0x774>)
   1218e:	7812      	ldrb	r2, [r2, #0]
   12190:	3203      	adds	r2, #3
   12192:	492a      	ldr	r1, [pc, #168]	; (1223c <process_recieved_packet+0x744>)
   12194:	188a      	adds	r2, r1, r2
   12196:	78d2      	ldrb	r2, [r2, #3]
   12198:	4313      	orrs	r3, r2
   1219a:	0018      	movs	r0, r3
   1219c:	4b28      	ldr	r3, [pc, #160]	; (12240 <process_recieved_packet+0x748>)
   1219e:	22fa      	movs	r2, #250	; 0xfa
   121a0:	0091      	lsls	r1, r2, #2
   121a2:	4798      	blx	r3
   121a4:	0003      	movs	r3, r0
   121a6:	001a      	movs	r2, r3
   121a8:	4b26      	ldr	r3, [pc, #152]	; (12244 <process_recieved_packet+0x74c>)
   121aa:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.battery_cut_start = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+3])/1000;
   121ac:	4b30      	ldr	r3, [pc, #192]	; (12270 <process_recieved_packet+0x778>)
   121ae:	781b      	ldrb	r3, [r3, #0]
   121b0:	001a      	movs	r2, r3
   121b2:	4b22      	ldr	r3, [pc, #136]	; (1223c <process_recieved_packet+0x744>)
   121b4:	189b      	adds	r3, r3, r2
   121b6:	78db      	ldrb	r3, [r3, #3]
   121b8:	061a      	lsls	r2, r3, #24
   121ba:	4b2d      	ldr	r3, [pc, #180]	; (12270 <process_recieved_packet+0x778>)
   121bc:	781b      	ldrb	r3, [r3, #0]
   121be:	3301      	adds	r3, #1
   121c0:	491e      	ldr	r1, [pc, #120]	; (1223c <process_recieved_packet+0x744>)
   121c2:	18cb      	adds	r3, r1, r3
   121c4:	78db      	ldrb	r3, [r3, #3]
   121c6:	041b      	lsls	r3, r3, #16
   121c8:	431a      	orrs	r2, r3
   121ca:	4b29      	ldr	r3, [pc, #164]	; (12270 <process_recieved_packet+0x778>)
   121cc:	781b      	ldrb	r3, [r3, #0]
   121ce:	3302      	adds	r3, #2
   121d0:	491a      	ldr	r1, [pc, #104]	; (1223c <process_recieved_packet+0x744>)
   121d2:	18cb      	adds	r3, r1, r3
   121d4:	78db      	ldrb	r3, [r3, #3]
   121d6:	021b      	lsls	r3, r3, #8
   121d8:	4313      	orrs	r3, r2
   121da:	4a25      	ldr	r2, [pc, #148]	; (12270 <process_recieved_packet+0x778>)
   121dc:	7812      	ldrb	r2, [r2, #0]
   121de:	3203      	adds	r2, #3
   121e0:	4916      	ldr	r1, [pc, #88]	; (1223c <process_recieved_packet+0x744>)
   121e2:	188a      	adds	r2, r1, r2
   121e4:	78d2      	ldrb	r2, [r2, #3]
   121e6:	4313      	orrs	r3, r2
   121e8:	0018      	movs	r0, r3
   121ea:	4b15      	ldr	r3, [pc, #84]	; (12240 <process_recieved_packet+0x748>)
   121ec:	22fa      	movs	r2, #250	; 0xfa
   121ee:	0091      	lsls	r1, r2, #2
   121f0:	4798      	blx	r3
   121f2:	0003      	movs	r3, r0
   121f4:	001a      	movs	r2, r3
   121f6:	4b1f      	ldr	r3, [pc, #124]	; (12274 <process_recieved_packet+0x77c>)
   121f8:	0010      	movs	r0, r2
   121fa:	4798      	blx	r3
   121fc:	1c02      	adds	r2, r0, #0
   121fe:	4b11      	ldr	r3, [pc, #68]	; (12244 <process_recieved_packet+0x74c>)
   12200:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+3])/1000;
   12202:	4b1d      	ldr	r3, [pc, #116]	; (12278 <process_recieved_packet+0x780>)
   12204:	781b      	ldrb	r3, [r3, #0]
   12206:	001a      	movs	r2, r3
   12208:	4b0c      	ldr	r3, [pc, #48]	; (1223c <process_recieved_packet+0x744>)
   1220a:	189b      	adds	r3, r3, r2
   1220c:	78db      	ldrb	r3, [r3, #3]
   1220e:	061a      	lsls	r2, r3, #24
   12210:	4b19      	ldr	r3, [pc, #100]	; (12278 <process_recieved_packet+0x780>)
   12212:	781b      	ldrb	r3, [r3, #0]
   12214:	3301      	adds	r3, #1
   12216:	4909      	ldr	r1, [pc, #36]	; (1223c <process_recieved_packet+0x744>)
   12218:	18cb      	adds	r3, r1, r3
   1221a:	78db      	ldrb	r3, [r3, #3]
   1221c:	041b      	lsls	r3, r3, #16
   1221e:	431a      	orrs	r2, r3
   12220:	4b15      	ldr	r3, [pc, #84]	; (12278 <process_recieved_packet+0x780>)
   12222:	781b      	ldrb	r3, [r3, #0]
   12224:	3302      	adds	r3, #2
   12226:	4905      	ldr	r1, [pc, #20]	; (1223c <process_recieved_packet+0x744>)
   12228:	18cb      	adds	r3, r1, r3
   1222a:	78db      	ldrb	r3, [r3, #3]
   1222c:	021b      	lsls	r3, r3, #8
   1222e:	e025      	b.n	1227c <process_recieved_packet+0x784>
   12230:	20000406 	.word	0x20000406
   12234:	200000e3 	.word	0x200000e3
   12238:	20000417 	.word	0x20000417
   1223c:	200015cc 	.word	0x200015cc
   12240:	00019295 	.word	0x00019295
   12244:	20001a8c 	.word	0x20001a8c
   12248:	20000418 	.word	0x20000418
   1224c:	20000419 	.word	0x20000419
   12250:	2000041a 	.word	0x2000041a
   12254:	2000041b 	.word	0x2000041b
   12258:	2000041c 	.word	0x2000041c
   1225c:	2000041d 	.word	0x2000041d
   12260:	2000041e 	.word	0x2000041e
   12264:	2000041f 	.word	0x2000041f
   12268:	20000420 	.word	0x20000420
   1226c:	20000421 	.word	0x20000421
   12270:	20000422 	.word	0x20000422
   12274:	0001a2d9 	.word	0x0001a2d9
   12278:	20000423 	.word	0x20000423
   1227c:	4313      	orrs	r3, r2
   1227e:	4a7f      	ldr	r2, [pc, #508]	; (1247c <process_recieved_packet+0x984>)
   12280:	7812      	ldrb	r2, [r2, #0]
   12282:	3203      	adds	r2, #3
   12284:	497e      	ldr	r1, [pc, #504]	; (12480 <process_recieved_packet+0x988>)
   12286:	188a      	adds	r2, r1, r2
   12288:	78d2      	ldrb	r2, [r2, #3]
   1228a:	4313      	orrs	r3, r2
   1228c:	0018      	movs	r0, r3
   1228e:	4b7d      	ldr	r3, [pc, #500]	; (12484 <process_recieved_packet+0x98c>)
   12290:	22fa      	movs	r2, #250	; 0xfa
   12292:	0091      	lsls	r1, r2, #2
   12294:	4798      	blx	r3
   12296:	0003      	movs	r3, r0
   12298:	001a      	movs	r2, r3
   1229a:	4b7b      	ldr	r3, [pc, #492]	; (12488 <process_recieved_packet+0x990>)
   1229c:	0010      	movs	r0, r2
   1229e:	4798      	blx	r3
   122a0:	1c02      	adds	r2, r0, #0
   122a2:	4b7a      	ldr	r3, [pc, #488]	; (1248c <process_recieved_packet+0x994>)
   122a4:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.temp_fet_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+3])/1000;
   122a6:	4b7a      	ldr	r3, [pc, #488]	; (12490 <process_recieved_packet+0x998>)
   122a8:	781b      	ldrb	r3, [r3, #0]
   122aa:	001a      	movs	r2, r3
   122ac:	4b74      	ldr	r3, [pc, #464]	; (12480 <process_recieved_packet+0x988>)
   122ae:	189b      	adds	r3, r3, r2
   122b0:	78db      	ldrb	r3, [r3, #3]
   122b2:	061a      	lsls	r2, r3, #24
   122b4:	4b76      	ldr	r3, [pc, #472]	; (12490 <process_recieved_packet+0x998>)
   122b6:	781b      	ldrb	r3, [r3, #0]
   122b8:	3301      	adds	r3, #1
   122ba:	4971      	ldr	r1, [pc, #452]	; (12480 <process_recieved_packet+0x988>)
   122bc:	18cb      	adds	r3, r1, r3
   122be:	78db      	ldrb	r3, [r3, #3]
   122c0:	041b      	lsls	r3, r3, #16
   122c2:	431a      	orrs	r2, r3
   122c4:	4b72      	ldr	r3, [pc, #456]	; (12490 <process_recieved_packet+0x998>)
   122c6:	781b      	ldrb	r3, [r3, #0]
   122c8:	3302      	adds	r3, #2
   122ca:	496d      	ldr	r1, [pc, #436]	; (12480 <process_recieved_packet+0x988>)
   122cc:	18cb      	adds	r3, r1, r3
   122ce:	78db      	ldrb	r3, [r3, #3]
   122d0:	021b      	lsls	r3, r3, #8
   122d2:	4313      	orrs	r3, r2
   122d4:	4a6e      	ldr	r2, [pc, #440]	; (12490 <process_recieved_packet+0x998>)
   122d6:	7812      	ldrb	r2, [r2, #0]
   122d8:	3203      	adds	r2, #3
   122da:	4969      	ldr	r1, [pc, #420]	; (12480 <process_recieved_packet+0x988>)
   122dc:	188a      	adds	r2, r1, r2
   122de:	78d2      	ldrb	r2, [r2, #3]
   122e0:	4313      	orrs	r3, r2
   122e2:	0018      	movs	r0, r3
   122e4:	4b67      	ldr	r3, [pc, #412]	; (12484 <process_recieved_packet+0x98c>)
   122e6:	22fa      	movs	r2, #250	; 0xfa
   122e8:	0091      	lsls	r1, r2, #2
   122ea:	4798      	blx	r3
   122ec:	0003      	movs	r3, r0
   122ee:	001a      	movs	r2, r3
   122f0:	4b66      	ldr	r3, [pc, #408]	; (1248c <process_recieved_packet+0x994>)
   122f2:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+3])/1000;
   122f4:	4b67      	ldr	r3, [pc, #412]	; (12494 <process_recieved_packet+0x99c>)
   122f6:	781b      	ldrb	r3, [r3, #0]
   122f8:	001a      	movs	r2, r3
   122fa:	4b61      	ldr	r3, [pc, #388]	; (12480 <process_recieved_packet+0x988>)
   122fc:	189b      	adds	r3, r3, r2
   122fe:	78db      	ldrb	r3, [r3, #3]
   12300:	061a      	lsls	r2, r3, #24
   12302:	4b64      	ldr	r3, [pc, #400]	; (12494 <process_recieved_packet+0x99c>)
   12304:	781b      	ldrb	r3, [r3, #0]
   12306:	3301      	adds	r3, #1
   12308:	495d      	ldr	r1, [pc, #372]	; (12480 <process_recieved_packet+0x988>)
   1230a:	18cb      	adds	r3, r1, r3
   1230c:	78db      	ldrb	r3, [r3, #3]
   1230e:	041b      	lsls	r3, r3, #16
   12310:	431a      	orrs	r2, r3
   12312:	4b60      	ldr	r3, [pc, #384]	; (12494 <process_recieved_packet+0x99c>)
   12314:	781b      	ldrb	r3, [r3, #0]
   12316:	3302      	adds	r3, #2
   12318:	4959      	ldr	r1, [pc, #356]	; (12480 <process_recieved_packet+0x988>)
   1231a:	18cb      	adds	r3, r1, r3
   1231c:	78db      	ldrb	r3, [r3, #3]
   1231e:	021b      	lsls	r3, r3, #8
   12320:	4313      	orrs	r3, r2
   12322:	4a5c      	ldr	r2, [pc, #368]	; (12494 <process_recieved_packet+0x99c>)
   12324:	7812      	ldrb	r2, [r2, #0]
   12326:	3203      	adds	r2, #3
   12328:	4955      	ldr	r1, [pc, #340]	; (12480 <process_recieved_packet+0x988>)
   1232a:	188a      	adds	r2, r1, r2
   1232c:	78d2      	ldrb	r2, [r2, #3]
   1232e:	4313      	orrs	r3, r2
   12330:	0018      	movs	r0, r3
   12332:	4b54      	ldr	r3, [pc, #336]	; (12484 <process_recieved_packet+0x98c>)
   12334:	22fa      	movs	r2, #250	; 0xfa
   12336:	0091      	lsls	r1, r2, #2
   12338:	4798      	blx	r3
   1233a:	0003      	movs	r3, r0
   1233c:	001a      	movs	r2, r3
   1233e:	4b53      	ldr	r3, [pc, #332]	; (1248c <process_recieved_packet+0x994>)
   12340:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2])/1000;
   12342:	4b55      	ldr	r3, [pc, #340]	; (12498 <process_recieved_packet+0x9a0>)
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	001a      	movs	r2, r3
   12348:	4b4d      	ldr	r3, [pc, #308]	; (12480 <process_recieved_packet+0x988>)
   1234a:	189b      	adds	r3, r3, r2
   1234c:	78db      	ldrb	r3, [r3, #3]
   1234e:	061a      	lsls	r2, r3, #24
   12350:	4b51      	ldr	r3, [pc, #324]	; (12498 <process_recieved_packet+0x9a0>)
   12352:	781b      	ldrb	r3, [r3, #0]
   12354:	3301      	adds	r3, #1
   12356:	494a      	ldr	r1, [pc, #296]	; (12480 <process_recieved_packet+0x988>)
   12358:	18cb      	adds	r3, r1, r3
   1235a:	78db      	ldrb	r3, [r3, #3]
   1235c:	041b      	lsls	r3, r3, #16
   1235e:	431a      	orrs	r2, r3
   12360:	4b4d      	ldr	r3, [pc, #308]	; (12498 <process_recieved_packet+0x9a0>)
   12362:	781b      	ldrb	r3, [r3, #0]
   12364:	3302      	adds	r3, #2
   12366:	4946      	ldr	r1, [pc, #280]	; (12480 <process_recieved_packet+0x988>)
   12368:	18cb      	adds	r3, r1, r3
   1236a:	78db      	ldrb	r3, [r3, #3]
   1236c:	021b      	lsls	r3, r3, #8
   1236e:	4313      	orrs	r3, r2
   12370:	4a49      	ldr	r2, [pc, #292]	; (12498 <process_recieved_packet+0x9a0>)
   12372:	7812      	ldrb	r2, [r2, #0]
   12374:	3202      	adds	r2, #2
   12376:	4942      	ldr	r1, [pc, #264]	; (12480 <process_recieved_packet+0x988>)
   12378:	188a      	adds	r2, r1, r2
   1237a:	78d2      	ldrb	r2, [r2, #3]
   1237c:	4313      	orrs	r3, r2
   1237e:	0018      	movs	r0, r3
   12380:	4b40      	ldr	r3, [pc, #256]	; (12484 <process_recieved_packet+0x98c>)
   12382:	22fa      	movs	r2, #250	; 0xfa
   12384:	0091      	lsls	r1, r2, #2
   12386:	4798      	blx	r3
   12388:	0003      	movs	r3, r0
   1238a:	001a      	movs	r2, r3
   1238c:	4b3f      	ldr	r3, [pc, #252]	; (1248c <process_recieved_packet+0x994>)
   1238e:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+3])/1000;
   12390:	4b42      	ldr	r3, [pc, #264]	; (1249c <process_recieved_packet+0x9a4>)
   12392:	781b      	ldrb	r3, [r3, #0]
   12394:	001a      	movs	r2, r3
   12396:	4b3a      	ldr	r3, [pc, #232]	; (12480 <process_recieved_packet+0x988>)
   12398:	189b      	adds	r3, r3, r2
   1239a:	78db      	ldrb	r3, [r3, #3]
   1239c:	061a      	lsls	r2, r3, #24
   1239e:	4b3f      	ldr	r3, [pc, #252]	; (1249c <process_recieved_packet+0x9a4>)
   123a0:	781b      	ldrb	r3, [r3, #0]
   123a2:	3301      	adds	r3, #1
   123a4:	4936      	ldr	r1, [pc, #216]	; (12480 <process_recieved_packet+0x988>)
   123a6:	18cb      	adds	r3, r1, r3
   123a8:	78db      	ldrb	r3, [r3, #3]
   123aa:	041b      	lsls	r3, r3, #16
   123ac:	431a      	orrs	r2, r3
   123ae:	4b3b      	ldr	r3, [pc, #236]	; (1249c <process_recieved_packet+0x9a4>)
   123b0:	781b      	ldrb	r3, [r3, #0]
   123b2:	3302      	adds	r3, #2
   123b4:	4932      	ldr	r1, [pc, #200]	; (12480 <process_recieved_packet+0x988>)
   123b6:	18cb      	adds	r3, r1, r3
   123b8:	78db      	ldrb	r3, [r3, #3]
   123ba:	021b      	lsls	r3, r3, #8
   123bc:	4313      	orrs	r3, r2
   123be:	4a37      	ldr	r2, [pc, #220]	; (1249c <process_recieved_packet+0x9a4>)
   123c0:	7812      	ldrb	r2, [r2, #0]
   123c2:	3203      	adds	r2, #3
   123c4:	492e      	ldr	r1, [pc, #184]	; (12480 <process_recieved_packet+0x988>)
   123c6:	188a      	adds	r2, r1, r2
   123c8:	78d2      	ldrb	r2, [r2, #3]
   123ca:	4313      	orrs	r3, r2
   123cc:	0018      	movs	r0, r3
   123ce:	4b2d      	ldr	r3, [pc, #180]	; (12484 <process_recieved_packet+0x98c>)
   123d0:	22fa      	movs	r2, #250	; 0xfa
   123d2:	0091      	lsls	r1, r2, #2
   123d4:	4798      	blx	r3
   123d6:	0003      	movs	r3, r0
   123d8:	001a      	movs	r2, r3
   123da:	4b2c      	ldr	r3, [pc, #176]	; (1248c <process_recieved_packet+0x994>)
   123dc:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.min_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+3])/1000;
   123de:	4b30      	ldr	r3, [pc, #192]	; (124a0 <process_recieved_packet+0x9a8>)
   123e0:	781b      	ldrb	r3, [r3, #0]
   123e2:	001a      	movs	r2, r3
   123e4:	4b26      	ldr	r3, [pc, #152]	; (12480 <process_recieved_packet+0x988>)
   123e6:	189b      	adds	r3, r3, r2
   123e8:	78db      	ldrb	r3, [r3, #3]
   123ea:	061a      	lsls	r2, r3, #24
   123ec:	4b2c      	ldr	r3, [pc, #176]	; (124a0 <process_recieved_packet+0x9a8>)
   123ee:	781b      	ldrb	r3, [r3, #0]
   123f0:	3301      	adds	r3, #1
   123f2:	4923      	ldr	r1, [pc, #140]	; (12480 <process_recieved_packet+0x988>)
   123f4:	18cb      	adds	r3, r1, r3
   123f6:	78db      	ldrb	r3, [r3, #3]
   123f8:	041b      	lsls	r3, r3, #16
   123fa:	431a      	orrs	r2, r3
   123fc:	4b28      	ldr	r3, [pc, #160]	; (124a0 <process_recieved_packet+0x9a8>)
   123fe:	781b      	ldrb	r3, [r3, #0]
   12400:	3302      	adds	r3, #2
   12402:	491f      	ldr	r1, [pc, #124]	; (12480 <process_recieved_packet+0x988>)
   12404:	18cb      	adds	r3, r1, r3
   12406:	78db      	ldrb	r3, [r3, #3]
   12408:	021b      	lsls	r3, r3, #8
   1240a:	4313      	orrs	r3, r2
   1240c:	4a24      	ldr	r2, [pc, #144]	; (124a0 <process_recieved_packet+0x9a8>)
   1240e:	7812      	ldrb	r2, [r2, #0]
   12410:	3203      	adds	r2, #3
   12412:	491b      	ldr	r1, [pc, #108]	; (12480 <process_recieved_packet+0x988>)
   12414:	188a      	adds	r2, r1, r2
   12416:	78d2      	ldrb	r2, [r2, #3]
   12418:	4313      	orrs	r3, r2
   1241a:	0018      	movs	r0, r3
   1241c:	4b19      	ldr	r3, [pc, #100]	; (12484 <process_recieved_packet+0x98c>)
   1241e:	22fa      	movs	r2, #250	; 0xfa
   12420:	0091      	lsls	r1, r2, #2
   12422:	4798      	blx	r3
   12424:	0003      	movs	r3, r0
   12426:	001a      	movs	r2, r3
   12428:	4b18      	ldr	r3, [pc, #96]	; (1248c <process_recieved_packet+0x994>)
   1242a:	645a      	str	r2, [r3, #68]	; 0x44
			mcconf_limits.max_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+3])/1000;
   1242c:	4b1d      	ldr	r3, [pc, #116]	; (124a4 <process_recieved_packet+0x9ac>)
   1242e:	781b      	ldrb	r3, [r3, #0]
   12430:	001a      	movs	r2, r3
   12432:	4b13      	ldr	r3, [pc, #76]	; (12480 <process_recieved_packet+0x988>)
   12434:	189b      	adds	r3, r3, r2
   12436:	78db      	ldrb	r3, [r3, #3]
   12438:	061a      	lsls	r2, r3, #24
   1243a:	4b1a      	ldr	r3, [pc, #104]	; (124a4 <process_recieved_packet+0x9ac>)
   1243c:	781b      	ldrb	r3, [r3, #0]
   1243e:	3301      	adds	r3, #1
   12440:	490f      	ldr	r1, [pc, #60]	; (12480 <process_recieved_packet+0x988>)
   12442:	18cb      	adds	r3, r1, r3
   12444:	78db      	ldrb	r3, [r3, #3]
   12446:	041b      	lsls	r3, r3, #16
   12448:	431a      	orrs	r2, r3
   1244a:	4b16      	ldr	r3, [pc, #88]	; (124a4 <process_recieved_packet+0x9ac>)
   1244c:	781b      	ldrb	r3, [r3, #0]
   1244e:	3302      	adds	r3, #2
   12450:	490b      	ldr	r1, [pc, #44]	; (12480 <process_recieved_packet+0x988>)
   12452:	18cb      	adds	r3, r1, r3
   12454:	78db      	ldrb	r3, [r3, #3]
   12456:	021b      	lsls	r3, r3, #8
   12458:	4313      	orrs	r3, r2
   1245a:	4a12      	ldr	r2, [pc, #72]	; (124a4 <process_recieved_packet+0x9ac>)
   1245c:	7812      	ldrb	r2, [r2, #0]
   1245e:	3203      	adds	r2, #3
   12460:	4907      	ldr	r1, [pc, #28]	; (12480 <process_recieved_packet+0x988>)
   12462:	188a      	adds	r2, r1, r2
   12464:	78d2      	ldrb	r2, [r2, #3]
   12466:	4313      	orrs	r3, r2
   12468:	0018      	movs	r0, r3
   1246a:	4b06      	ldr	r3, [pc, #24]	; (12484 <process_recieved_packet+0x98c>)
   1246c:	22fa      	movs	r2, #250	; 0xfa
   1246e:	0091      	lsls	r1, r2, #2
   12470:	4798      	blx	r3
   12472:	0003      	movs	r3, r0
   12474:	001a      	movs	r2, r3
   12476:	4b05      	ldr	r3, [pc, #20]	; (1248c <process_recieved_packet+0x994>)
   12478:	649a      	str	r2, [r3, #72]	; 0x48
   1247a:	e143      	b.n	12704 <process_recieved_packet+0xc0c>
   1247c:	20000423 	.word	0x20000423
   12480:	200015cc 	.word	0x200015cc
   12484:	00019295 	.word	0x00019295
   12488:	0001a2d9 	.word	0x0001a2d9
   1248c:	20001a8c 	.word	0x20001a8c
   12490:	20000424 	.word	0x20000424
   12494:	20000425 	.word	0x20000425
   12498:	20000426 	.word	0x20000426
   1249c:	20000427 	.word	0x20000427
   124a0:	20000428 	.word	0x20000428
   124a4:	20000429 	.word	0x20000429
		} else if (esc_fw == FW_3v7 || esc_fw == FW_UNITY || esc_fw == FW_ACKMANIAC){
   124a8:	4bb7      	ldr	r3, [pc, #732]	; (12788 <process_recieved_packet+0xc90>)
   124aa:	781b      	ldrb	r3, [r3, #0]
   124ac:	2b01      	cmp	r3, #1
   124ae:	d008      	beq.n	124c2 <process_recieved_packet+0x9ca>
   124b0:	4bb5      	ldr	r3, [pc, #724]	; (12788 <process_recieved_packet+0xc90>)
   124b2:	781b      	ldrb	r3, [r3, #0]
   124b4:	2b02      	cmp	r3, #2
   124b6:	d004      	beq.n	124c2 <process_recieved_packet+0x9ca>
   124b8:	4bb3      	ldr	r3, [pc, #716]	; (12788 <process_recieved_packet+0xc90>)
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	2b03      	cmp	r3, #3
   124be:	d000      	beq.n	124c2 <process_recieved_packet+0x9ca>
   124c0:	e120      	b.n	12704 <process_recieved_packet+0xc0c>
			mcconf_limits.motor_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MAX);
   124c2:	4bb2      	ldr	r3, [pc, #712]	; (1278c <process_recieved_packet+0xc94>)
   124c4:	781b      	ldrb	r3, [r3, #0]
   124c6:	b25a      	sxtb	r2, r3
   124c8:	4bb1      	ldr	r3, [pc, #708]	; (12790 <process_recieved_packet+0xc98>)
   124ca:	0011      	movs	r1, r2
   124cc:	0018      	movs	r0, r3
   124ce:	4bb1      	ldr	r3, [pc, #708]	; (12794 <process_recieved_packet+0xc9c>)
   124d0:	4798      	blx	r3
   124d2:	1c02      	adds	r2, r0, #0
   124d4:	4bb0      	ldr	r3, [pc, #704]	; (12798 <process_recieved_packet+0xca0>)
   124d6:	1c10      	adds	r0, r2, #0
   124d8:	4798      	blx	r3
   124da:	0002      	movs	r2, r0
   124dc:	4baf      	ldr	r3, [pc, #700]	; (1279c <process_recieved_packet+0xca4>)
   124de:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MIN);
   124e0:	4baf      	ldr	r3, [pc, #700]	; (127a0 <process_recieved_packet+0xca8>)
   124e2:	781b      	ldrb	r3, [r3, #0]
   124e4:	b25a      	sxtb	r2, r3
   124e6:	4baa      	ldr	r3, [pc, #680]	; (12790 <process_recieved_packet+0xc98>)
   124e8:	0011      	movs	r1, r2
   124ea:	0018      	movs	r0, r3
   124ec:	4ba9      	ldr	r3, [pc, #676]	; (12794 <process_recieved_packet+0xc9c>)
   124ee:	4798      	blx	r3
   124f0:	1c02      	adds	r2, r0, #0
   124f2:	4ba9      	ldr	r3, [pc, #676]	; (12798 <process_recieved_packet+0xca0>)
   124f4:	1c10      	adds	r0, r2, #0
   124f6:	4798      	blx	r3
   124f8:	0002      	movs	r2, r0
   124fa:	4ba8      	ldr	r3, [pc, #672]	; (1279c <process_recieved_packet+0xca4>)
   124fc:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MAX);
   124fe:	4ba9      	ldr	r3, [pc, #676]	; (127a4 <process_recieved_packet+0xcac>)
   12500:	781b      	ldrb	r3, [r3, #0]
   12502:	b25a      	sxtb	r2, r3
   12504:	4ba2      	ldr	r3, [pc, #648]	; (12790 <process_recieved_packet+0xc98>)
   12506:	0011      	movs	r1, r2
   12508:	0018      	movs	r0, r3
   1250a:	4ba2      	ldr	r3, [pc, #648]	; (12794 <process_recieved_packet+0xc9c>)
   1250c:	4798      	blx	r3
   1250e:	1c02      	adds	r2, r0, #0
   12510:	4ba1      	ldr	r3, [pc, #644]	; (12798 <process_recieved_packet+0xca0>)
   12512:	1c10      	adds	r0, r2, #0
   12514:	4798      	blx	r3
   12516:	0002      	movs	r2, r0
   12518:	4ba0      	ldr	r3, [pc, #640]	; (1279c <process_recieved_packet+0xca4>)
   1251a:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MIN);
   1251c:	4ba2      	ldr	r3, [pc, #648]	; (127a8 <process_recieved_packet+0xcb0>)
   1251e:	781b      	ldrb	r3, [r3, #0]
   12520:	b25a      	sxtb	r2, r3
   12522:	4b9b      	ldr	r3, [pc, #620]	; (12790 <process_recieved_packet+0xc98>)
   12524:	0011      	movs	r1, r2
   12526:	0018      	movs	r0, r3
   12528:	4b9a      	ldr	r3, [pc, #616]	; (12794 <process_recieved_packet+0xc9c>)
   1252a:	4798      	blx	r3
   1252c:	1c02      	adds	r2, r0, #0
   1252e:	4b9a      	ldr	r3, [pc, #616]	; (12798 <process_recieved_packet+0xca0>)
   12530:	1c10      	adds	r0, r2, #0
   12532:	4798      	blx	r3
   12534:	0002      	movs	r2, r0
   12536:	4b99      	ldr	r3, [pc, #612]	; (1279c <process_recieved_packet+0xca4>)
   12538:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ABS_CURR_MAX);
   1253a:	4b9c      	ldr	r3, [pc, #624]	; (127ac <process_recieved_packet+0xcb4>)
   1253c:	781b      	ldrb	r3, [r3, #0]
   1253e:	b25a      	sxtb	r2, r3
   12540:	4b93      	ldr	r3, [pc, #588]	; (12790 <process_recieved_packet+0xc98>)
   12542:	0011      	movs	r1, r2
   12544:	0018      	movs	r0, r3
   12546:	4b93      	ldr	r3, [pc, #588]	; (12794 <process_recieved_packet+0xc9c>)
   12548:	4798      	blx	r3
   1254a:	1c02      	adds	r2, r0, #0
   1254c:	4b92      	ldr	r3, [pc, #584]	; (12798 <process_recieved_packet+0xca0>)
   1254e:	1c10      	adds	r0, r2, #0
   12550:	4798      	blx	r3
   12552:	0002      	movs	r2, r0
   12554:	4b91      	ldr	r3, [pc, #580]	; (1279c <process_recieved_packet+0xca4>)
   12556:	611a      	str	r2, [r3, #16]
			mcconf_limits.min_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MIN);
   12558:	4b95      	ldr	r3, [pc, #596]	; (127b0 <process_recieved_packet+0xcb8>)
   1255a:	781b      	ldrb	r3, [r3, #0]
   1255c:	b25a      	sxtb	r2, r3
   1255e:	4b8c      	ldr	r3, [pc, #560]	; (12790 <process_recieved_packet+0xc98>)
   12560:	0011      	movs	r1, r2
   12562:	0018      	movs	r0, r3
   12564:	4b8b      	ldr	r3, [pc, #556]	; (12794 <process_recieved_packet+0xc9c>)
   12566:	4798      	blx	r3
   12568:	1c02      	adds	r2, r0, #0
   1256a:	4b8b      	ldr	r3, [pc, #556]	; (12798 <process_recieved_packet+0xca0>)
   1256c:	1c10      	adds	r0, r2, #0
   1256e:	4798      	blx	r3
   12570:	0002      	movs	r2, r0
   12572:	4b8a      	ldr	r3, [pc, #552]	; (1279c <process_recieved_packet+0xca4>)
   12574:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MAX);
   12576:	4b8f      	ldr	r3, [pc, #572]	; (127b4 <process_recieved_packet+0xcbc>)
   12578:	781b      	ldrb	r3, [r3, #0]
   1257a:	b25a      	sxtb	r2, r3
   1257c:	4b84      	ldr	r3, [pc, #528]	; (12790 <process_recieved_packet+0xc98>)
   1257e:	0011      	movs	r1, r2
   12580:	0018      	movs	r0, r3
   12582:	4b84      	ldr	r3, [pc, #528]	; (12794 <process_recieved_packet+0xc9c>)
   12584:	4798      	blx	r3
   12586:	1c02      	adds	r2, r0, #0
   12588:	4b83      	ldr	r3, [pc, #524]	; (12798 <process_recieved_packet+0xca0>)
   1258a:	1c10      	adds	r0, r2, #0
   1258c:	4798      	blx	r3
   1258e:	0002      	movs	r2, r0
   12590:	4b82      	ldr	r3, [pc, #520]	; (1279c <process_recieved_packet+0xca4>)
   12592:	619a      	str	r2, [r3, #24]
			mcconf_limits.max_erpm_fbrake = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_MAX);
   12594:	4b88      	ldr	r3, [pc, #544]	; (127b8 <process_recieved_packet+0xcc0>)
   12596:	781b      	ldrb	r3, [r3, #0]
   12598:	b25a      	sxtb	r2, r3
   1259a:	4b7d      	ldr	r3, [pc, #500]	; (12790 <process_recieved_packet+0xc98>)
   1259c:	0011      	movs	r1, r2
   1259e:	0018      	movs	r0, r3
   125a0:	4b7c      	ldr	r3, [pc, #496]	; (12794 <process_recieved_packet+0xc9c>)
   125a2:	4798      	blx	r3
   125a4:	1c02      	adds	r2, r0, #0
   125a6:	4b7c      	ldr	r3, [pc, #496]	; (12798 <process_recieved_packet+0xca0>)
   125a8:	1c10      	adds	r0, r2, #0
   125aa:	4798      	blx	r3
   125ac:	0002      	movs	r2, r0
   125ae:	4b7b      	ldr	r3, [pc, #492]	; (1279c <process_recieved_packet+0xca4>)
   125b0:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_CC_MAX);
   125b2:	4b82      	ldr	r3, [pc, #520]	; (127bc <process_recieved_packet+0xcc4>)
   125b4:	781b      	ldrb	r3, [r3, #0]
   125b6:	b25a      	sxtb	r2, r3
   125b8:	4b75      	ldr	r3, [pc, #468]	; (12790 <process_recieved_packet+0xc98>)
   125ba:	0011      	movs	r1, r2
   125bc:	0018      	movs	r0, r3
   125be:	4b75      	ldr	r3, [pc, #468]	; (12794 <process_recieved_packet+0xc9c>)
   125c0:	4798      	blx	r3
   125c2:	1c02      	adds	r2, r0, #0
   125c4:	4b74      	ldr	r3, [pc, #464]	; (12798 <process_recieved_packet+0xca0>)
   125c6:	1c10      	adds	r0, r2, #0
   125c8:	4798      	blx	r3
   125ca:	0002      	movs	r2, r0
   125cc:	4b73      	ldr	r3, [pc, #460]	; (1279c <process_recieved_packet+0xca4>)
   125ce:	621a      	str	r2, [r3, #32]
			mcconf_limits.min_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MIN);
   125d0:	4b7b      	ldr	r3, [pc, #492]	; (127c0 <process_recieved_packet+0xcc8>)
   125d2:	781b      	ldrb	r3, [r3, #0]
   125d4:	b25a      	sxtb	r2, r3
   125d6:	4b6e      	ldr	r3, [pc, #440]	; (12790 <process_recieved_packet+0xc98>)
   125d8:	0011      	movs	r1, r2
   125da:	0018      	movs	r0, r3
   125dc:	4b6d      	ldr	r3, [pc, #436]	; (12794 <process_recieved_packet+0xc9c>)
   125de:	4798      	blx	r3
   125e0:	1c02      	adds	r2, r0, #0
   125e2:	4b6d      	ldr	r3, [pc, #436]	; (12798 <process_recieved_packet+0xca0>)
   125e4:	1c10      	adds	r0, r2, #0
   125e6:	4798      	blx	r3
   125e8:	0002      	movs	r2, r0
   125ea:	4b6c      	ldr	r3, [pc, #432]	; (1279c <process_recieved_packet+0xca4>)
   125ec:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.max_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MAX);
   125ee:	4b75      	ldr	r3, [pc, #468]	; (127c4 <process_recieved_packet+0xccc>)
   125f0:	781b      	ldrb	r3, [r3, #0]
   125f2:	b25a      	sxtb	r2, r3
   125f4:	4b66      	ldr	r3, [pc, #408]	; (12790 <process_recieved_packet+0xc98>)
   125f6:	0011      	movs	r1, r2
   125f8:	0018      	movs	r0, r3
   125fa:	4b66      	ldr	r3, [pc, #408]	; (12794 <process_recieved_packet+0xc9c>)
   125fc:	4798      	blx	r3
   125fe:	1c02      	adds	r2, r0, #0
   12600:	4b65      	ldr	r3, [pc, #404]	; (12798 <process_recieved_packet+0xca0>)
   12602:	1c10      	adds	r0, r2, #0
   12604:	4798      	blx	r3
   12606:	0002      	movs	r2, r0
   12608:	4b64      	ldr	r3, [pc, #400]	; (1279c <process_recieved_packet+0xca4>)
   1260a:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.battery_cut_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_STRT);
   1260c:	4b6e      	ldr	r3, [pc, #440]	; (127c8 <process_recieved_packet+0xcd0>)
   1260e:	781b      	ldrb	r3, [r3, #0]
   12610:	b25a      	sxtb	r2, r3
   12612:	4b5f      	ldr	r3, [pc, #380]	; (12790 <process_recieved_packet+0xc98>)
   12614:	0011      	movs	r1, r2
   12616:	0018      	movs	r0, r3
   12618:	4b5e      	ldr	r3, [pc, #376]	; (12794 <process_recieved_packet+0xc9c>)
   1261a:	4798      	blx	r3
   1261c:	1c02      	adds	r2, r0, #0
   1261e:	4b5f      	ldr	r3, [pc, #380]	; (1279c <process_recieved_packet+0xca4>)
   12620:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_END);
   12622:	4b6a      	ldr	r3, [pc, #424]	; (127cc <process_recieved_packet+0xcd4>)
   12624:	781b      	ldrb	r3, [r3, #0]
   12626:	b25a      	sxtb	r2, r3
   12628:	4b59      	ldr	r3, [pc, #356]	; (12790 <process_recieved_packet+0xc98>)
   1262a:	0011      	movs	r1, r2
   1262c:	0018      	movs	r0, r3
   1262e:	4b59      	ldr	r3, [pc, #356]	; (12794 <process_recieved_packet+0xc9c>)
   12630:	4798      	blx	r3
   12632:	1c02      	adds	r2, r0, #0
   12634:	4b59      	ldr	r3, [pc, #356]	; (1279c <process_recieved_packet+0xca4>)
   12636:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.temp_fet_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_STRT);
   12638:	4b65      	ldr	r3, [pc, #404]	; (127d0 <process_recieved_packet+0xcd8>)
   1263a:	781b      	ldrb	r3, [r3, #0]
   1263c:	b25a      	sxtb	r2, r3
   1263e:	4b54      	ldr	r3, [pc, #336]	; (12790 <process_recieved_packet+0xc98>)
   12640:	0011      	movs	r1, r2
   12642:	0018      	movs	r0, r3
   12644:	4b53      	ldr	r3, [pc, #332]	; (12794 <process_recieved_packet+0xc9c>)
   12646:	4798      	blx	r3
   12648:	1c02      	adds	r2, r0, #0
   1264a:	4b53      	ldr	r3, [pc, #332]	; (12798 <process_recieved_packet+0xca0>)
   1264c:	1c10      	adds	r0, r2, #0
   1264e:	4798      	blx	r3
   12650:	0002      	movs	r2, r0
   12652:	4b52      	ldr	r3, [pc, #328]	; (1279c <process_recieved_packet+0xca4>)
   12654:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_END);
   12656:	4b5f      	ldr	r3, [pc, #380]	; (127d4 <process_recieved_packet+0xcdc>)
   12658:	781b      	ldrb	r3, [r3, #0]
   1265a:	b25a      	sxtb	r2, r3
   1265c:	4b4c      	ldr	r3, [pc, #304]	; (12790 <process_recieved_packet+0xc98>)
   1265e:	0011      	movs	r1, r2
   12660:	0018      	movs	r0, r3
   12662:	4b4c      	ldr	r3, [pc, #304]	; (12794 <process_recieved_packet+0xc9c>)
   12664:	4798      	blx	r3
   12666:	1c02      	adds	r2, r0, #0
   12668:	4b4b      	ldr	r3, [pc, #300]	; (12798 <process_recieved_packet+0xca0>)
   1266a:	1c10      	adds	r0, r2, #0
   1266c:	4798      	blx	r3
   1266e:	0002      	movs	r2, r0
   12670:	4b4a      	ldr	r3, [pc, #296]	; (1279c <process_recieved_packet+0xca4>)
   12672:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_STRT);
   12674:	4b58      	ldr	r3, [pc, #352]	; (127d8 <process_recieved_packet+0xce0>)
   12676:	781b      	ldrb	r3, [r3, #0]
   12678:	b25a      	sxtb	r2, r3
   1267a:	4b45      	ldr	r3, [pc, #276]	; (12790 <process_recieved_packet+0xc98>)
   1267c:	0011      	movs	r1, r2
   1267e:	0018      	movs	r0, r3
   12680:	4b44      	ldr	r3, [pc, #272]	; (12794 <process_recieved_packet+0xc9c>)
   12682:	4798      	blx	r3
   12684:	1c02      	adds	r2, r0, #0
   12686:	4b44      	ldr	r3, [pc, #272]	; (12798 <process_recieved_packet+0xca0>)
   12688:	1c10      	adds	r0, r2, #0
   1268a:	4798      	blx	r3
   1268c:	0002      	movs	r2, r0
   1268e:	4b43      	ldr	r3, [pc, #268]	; (1279c <process_recieved_packet+0xca4>)
   12690:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_END);
   12692:	4b52      	ldr	r3, [pc, #328]	; (127dc <process_recieved_packet+0xce4>)
   12694:	781b      	ldrb	r3, [r3, #0]
   12696:	b25a      	sxtb	r2, r3
   12698:	4b3d      	ldr	r3, [pc, #244]	; (12790 <process_recieved_packet+0xc98>)
   1269a:	0011      	movs	r1, r2
   1269c:	0018      	movs	r0, r3
   1269e:	4b3d      	ldr	r3, [pc, #244]	; (12794 <process_recieved_packet+0xc9c>)
   126a0:	4798      	blx	r3
   126a2:	1c02      	adds	r2, r0, #0
   126a4:	4b3c      	ldr	r3, [pc, #240]	; (12798 <process_recieved_packet+0xca0>)
   126a6:	1c10      	adds	r0, r2, #0
   126a8:	4798      	blx	r3
   126aa:	0002      	movs	r2, r0
   126ac:	4b3b      	ldr	r3, [pc, #236]	; (1279c <process_recieved_packet+0xca4>)
   126ae:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.min_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MIN)*100);
   126b0:	4b4b      	ldr	r3, [pc, #300]	; (127e0 <process_recieved_packet+0xce8>)
   126b2:	781b      	ldrb	r3, [r3, #0]
   126b4:	b25a      	sxtb	r2, r3
   126b6:	4b36      	ldr	r3, [pc, #216]	; (12790 <process_recieved_packet+0xc98>)
   126b8:	0011      	movs	r1, r2
   126ba:	0018      	movs	r0, r3
   126bc:	4b35      	ldr	r3, [pc, #212]	; (12794 <process_recieved_packet+0xc9c>)
   126be:	4798      	blx	r3
   126c0:	1c02      	adds	r2, r0, #0
   126c2:	4b48      	ldr	r3, [pc, #288]	; (127e4 <process_recieved_packet+0xcec>)
   126c4:	4948      	ldr	r1, [pc, #288]	; (127e8 <process_recieved_packet+0xcf0>)
   126c6:	1c10      	adds	r0, r2, #0
   126c8:	4798      	blx	r3
   126ca:	1c03      	adds	r3, r0, #0
   126cc:	1c1a      	adds	r2, r3, #0
   126ce:	4b32      	ldr	r3, [pc, #200]	; (12798 <process_recieved_packet+0xca0>)
   126d0:	1c10      	adds	r0, r2, #0
   126d2:	4798      	blx	r3
   126d4:	0002      	movs	r2, r0
   126d6:	4b31      	ldr	r3, [pc, #196]	; (1279c <process_recieved_packet+0xca4>)
   126d8:	645a      	str	r2, [r3, #68]	; 0x44
			mcconf_limits.max_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MAX)*100);
   126da:	4b44      	ldr	r3, [pc, #272]	; (127ec <process_recieved_packet+0xcf4>)
   126dc:	781b      	ldrb	r3, [r3, #0]
   126de:	b25a      	sxtb	r2, r3
   126e0:	4b2b      	ldr	r3, [pc, #172]	; (12790 <process_recieved_packet+0xc98>)
   126e2:	0011      	movs	r1, r2
   126e4:	0018      	movs	r0, r3
   126e6:	4b2b      	ldr	r3, [pc, #172]	; (12794 <process_recieved_packet+0xc9c>)
   126e8:	4798      	blx	r3
   126ea:	1c02      	adds	r2, r0, #0
   126ec:	4b3d      	ldr	r3, [pc, #244]	; (127e4 <process_recieved_packet+0xcec>)
   126ee:	493e      	ldr	r1, [pc, #248]	; (127e8 <process_recieved_packet+0xcf0>)
   126f0:	1c10      	adds	r0, r2, #0
   126f2:	4798      	blx	r3
   126f4:	1c03      	adds	r3, r0, #0
   126f6:	1c1a      	adds	r2, r3, #0
   126f8:	4b27      	ldr	r3, [pc, #156]	; (12798 <process_recieved_packet+0xca0>)
   126fa:	1c10      	adds	r0, r2, #0
   126fc:	4798      	blx	r3
   126fe:	0002      	movs	r2, r0
   12700:	4b26      	ldr	r3, [pc, #152]	; (1279c <process_recieved_packet+0xca4>)
   12702:	649a      	str	r2, [r3, #72]	; 0x48
		SEND_LIMITS = 1;
   12704:	4b3a      	ldr	r3, [pc, #232]	; (127f0 <process_recieved_packet+0xcf8>)
   12706:	2201      	movs	r2, #1
   12708:	701a      	strb	r2, [r3, #0]
		GET_LIMITS = 0;
   1270a:	4b3a      	ldr	r3, [pc, #232]	; (127f4 <process_recieved_packet+0xcfc>)
   1270c:	2200      	movs	r2, #0
   1270e:	701a      	strb	r2, [r3, #0]
}
   12710:	e036      	b.n	12780 <process_recieved_packet+0xc88>
	} else if(packet_id == COMM_GET_DECODED_PPM){
   12712:	4b39      	ldr	r3, [pc, #228]	; (127f8 <process_recieved_packet+0xd00>)
   12714:	781b      	ldrb	r3, [r3, #0]
   12716:	1dfa      	adds	r2, r7, #7
   12718:	7812      	ldrb	r2, [r2, #0]
   1271a:	429a      	cmp	r2, r3
   1271c:	d110      	bne.n	12740 <process_recieved_packet+0xc48>
		latest_vesc_vals.pwm_val = (int32_t)(((vesc_revieve_packet.payload[1]&0x00FF)<<24)|((vesc_revieve_packet.payload[2]&0x00FF)<<16)|((vesc_revieve_packet.payload[3]&0x00FF)<<8)|(vesc_revieve_packet.payload[4]&0x00FF));
   1271e:	4b37      	ldr	r3, [pc, #220]	; (127fc <process_recieved_packet+0xd04>)
   12720:	791b      	ldrb	r3, [r3, #4]
   12722:	061a      	lsls	r2, r3, #24
   12724:	4b35      	ldr	r3, [pc, #212]	; (127fc <process_recieved_packet+0xd04>)
   12726:	795b      	ldrb	r3, [r3, #5]
   12728:	041b      	lsls	r3, r3, #16
   1272a:	431a      	orrs	r2, r3
   1272c:	4b33      	ldr	r3, [pc, #204]	; (127fc <process_recieved_packet+0xd04>)
   1272e:	799b      	ldrb	r3, [r3, #6]
   12730:	021b      	lsls	r3, r3, #8
   12732:	4313      	orrs	r3, r2
   12734:	4a31      	ldr	r2, [pc, #196]	; (127fc <process_recieved_packet+0xd04>)
   12736:	79d2      	ldrb	r2, [r2, #7]
   12738:	431a      	orrs	r2, r3
   1273a:	4b31      	ldr	r3, [pc, #196]	; (12800 <process_recieved_packet+0xd08>)
   1273c:	631a      	str	r2, [r3, #48]	; 0x30
}
   1273e:	e01f      	b.n	12780 <process_recieved_packet+0xc88>
	} else if(packet_id == COMM_GET_DECODED_CHUK){
   12740:	4b30      	ldr	r3, [pc, #192]	; (12804 <process_recieved_packet+0xd0c>)
   12742:	781b      	ldrb	r3, [r3, #0]
   12744:	1dfa      	adds	r2, r7, #7
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	429a      	cmp	r2, r3
   1274a:	d119      	bne.n	12780 <process_recieved_packet+0xc88>
			rec_chuck_struct.bt_c = ((((vesc_revieve_packet.payload[1] & 0x000000FF) << 24)|((vesc_revieve_packet.payload[2] & 0x000000FF) << 16)|((vesc_revieve_packet.payload[3] & 0x000000FF) << 8)|(vesc_revieve_packet.payload[4] & 0x000000FF)) == 0xFFF0DC45); //-992187
   1274c:	4b2b      	ldr	r3, [pc, #172]	; (127fc <process_recieved_packet+0xd04>)
   1274e:	791b      	ldrb	r3, [r3, #4]
   12750:	061a      	lsls	r2, r3, #24
   12752:	4b2a      	ldr	r3, [pc, #168]	; (127fc <process_recieved_packet+0xd04>)
   12754:	795b      	ldrb	r3, [r3, #5]
   12756:	041b      	lsls	r3, r3, #16
   12758:	431a      	orrs	r2, r3
   1275a:	4b28      	ldr	r3, [pc, #160]	; (127fc <process_recieved_packet+0xd04>)
   1275c:	799b      	ldrb	r3, [r3, #6]
   1275e:	021b      	lsls	r3, r3, #8
   12760:	4313      	orrs	r3, r2
   12762:	4a26      	ldr	r2, [pc, #152]	; (127fc <process_recieved_packet+0xd04>)
   12764:	79d2      	ldrb	r2, [r2, #7]
   12766:	4313      	orrs	r3, r2
   12768:	4a27      	ldr	r2, [pc, #156]	; (12808 <process_recieved_packet+0xd10>)
   1276a:	4694      	mov	ip, r2
   1276c:	4463      	add	r3, ip
   1276e:	425a      	negs	r2, r3
   12770:	4153      	adcs	r3, r2
   12772:	b2da      	uxtb	r2, r3
   12774:	4b25      	ldr	r3, [pc, #148]	; (1280c <process_recieved_packet+0xd14>)
   12776:	721a      	strb	r2, [r3, #8]
			rec_chuck_struct.bt_z = rec_chuck_struct.bt_c;
   12778:	4b24      	ldr	r3, [pc, #144]	; (1280c <process_recieved_packet+0xd14>)
   1277a:	7a1a      	ldrb	r2, [r3, #8]
   1277c:	4b23      	ldr	r3, [pc, #140]	; (1280c <process_recieved_packet+0xd14>)
   1277e:	725a      	strb	r2, [r3, #9]
}
   12780:	46c0      	nop			; (mov r8, r8)
   12782:	46bd      	mov	sp, r7
   12784:	b002      	add	sp, #8
   12786:	bd80      	pop	{r7, pc}
   12788:	200000e3 	.word	0x200000e3
   1278c:	20000417 	.word	0x20000417
   12790:	200015cf 	.word	0x200015cf
   12794:	00012811 	.word	0x00012811
   12798:	0001a299 	.word	0x0001a299
   1279c:	20001a8c 	.word	0x20001a8c
   127a0:	20000418 	.word	0x20000418
   127a4:	20000419 	.word	0x20000419
   127a8:	2000041a 	.word	0x2000041a
   127ac:	2000041b 	.word	0x2000041b
   127b0:	2000041c 	.word	0x2000041c
   127b4:	2000041d 	.word	0x2000041d
   127b8:	2000041e 	.word	0x2000041e
   127bc:	2000041f 	.word	0x2000041f
   127c0:	20000420 	.word	0x20000420
   127c4:	20000421 	.word	0x20000421
   127c8:	20000422 	.word	0x20000422
   127cc:	20000423 	.word	0x20000423
   127d0:	20000424 	.word	0x20000424
   127d4:	20000425 	.word	0x20000425
   127d8:	20000426 	.word	0x20000426
   127dc:	20000427 	.word	0x20000427
   127e0:	20000428 	.word	0x20000428
   127e4:	00019d21 	.word	0x00019d21
   127e8:	42c80000 	.word	0x42c80000
   127ec:	20000429 	.word	0x20000429
   127f0:	200003c8 	.word	0x200003c8
   127f4:	200000e2 	.word	0x200000e2
   127f8:	20000408 	.word	0x20000408
   127fc:	200015cc 	.word	0x200015cc
   12800:	20000e38 	.word	0x20000e38
   12804:	20000409 	.word	0x20000409
   12808:	000f23bb 	.word	0x000f23bb
   1280c:	20001b24 	.word	0x20001b24

00012810 <buffer_get_float32_auto>:

float buffer_get_float32_auto(uint8_t *buffer, int8_t index) {
   12810:	b590      	push	{r4, r7, lr}
   12812:	b089      	sub	sp, #36	; 0x24
   12814:	af00      	add	r7, sp, #0
   12816:	6078      	str	r0, [r7, #4]
   12818:	000a      	movs	r2, r1
   1281a:	1cfb      	adds	r3, r7, #3
   1281c:	701a      	strb	r2, [r3, #0]
	uint32_t res = ((uint32_t) buffer[index]) << 24 | ((uint32_t) buffer[index+1]) << 16 | ((uint32_t) buffer[index+2]) << 8 | ((uint32_t) buffer[index+3]);
   1281e:	1cfb      	adds	r3, r7, #3
   12820:	781b      	ldrb	r3, [r3, #0]
   12822:	b25b      	sxtb	r3, r3
   12824:	687a      	ldr	r2, [r7, #4]
   12826:	18d3      	adds	r3, r2, r3
   12828:	781b      	ldrb	r3, [r3, #0]
   1282a:	061a      	lsls	r2, r3, #24
   1282c:	1cfb      	adds	r3, r7, #3
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	b25b      	sxtb	r3, r3
   12832:	3301      	adds	r3, #1
   12834:	6879      	ldr	r1, [r7, #4]
   12836:	18cb      	adds	r3, r1, r3
   12838:	781b      	ldrb	r3, [r3, #0]
   1283a:	041b      	lsls	r3, r3, #16
   1283c:	431a      	orrs	r2, r3
   1283e:	1cfb      	adds	r3, r7, #3
   12840:	781b      	ldrb	r3, [r3, #0]
   12842:	b25b      	sxtb	r3, r3
   12844:	3302      	adds	r3, #2
   12846:	6879      	ldr	r1, [r7, #4]
   12848:	18cb      	adds	r3, r1, r3
   1284a:	781b      	ldrb	r3, [r3, #0]
   1284c:	021b      	lsls	r3, r3, #8
   1284e:	4313      	orrs	r3, r2
   12850:	1cfa      	adds	r2, r7, #3
   12852:	7812      	ldrb	r2, [r2, #0]
   12854:	b252      	sxtb	r2, r2
   12856:	3203      	adds	r2, #3
   12858:	6879      	ldr	r1, [r7, #4]
   1285a:	188a      	adds	r2, r1, r2
   1285c:	7812      	ldrb	r2, [r2, #0]
   1285e:	4313      	orrs	r3, r2
   12860:	617b      	str	r3, [r7, #20]

	int e = (res >> 23) & 0xFF;
   12862:	697b      	ldr	r3, [r7, #20]
   12864:	0ddb      	lsrs	r3, r3, #23
   12866:	001a      	movs	r2, r3
   12868:	23ff      	movs	r3, #255	; 0xff
   1286a:	4013      	ands	r3, r2
   1286c:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
   1286e:	697b      	ldr	r3, [r7, #20]
   12870:	025b      	lsls	r3, r3, #9
   12872:	0a5b      	lsrs	r3, r3, #9
   12874:	613b      	str	r3, [r7, #16]
	bool neg = res & (1U << 31);
   12876:	697b      	ldr	r3, [r7, #20]
   12878:	0fdb      	lsrs	r3, r3, #31
   1287a:	07da      	lsls	r2, r3, #31
   1287c:	230f      	movs	r3, #15
   1287e:	18fb      	adds	r3, r7, r3
   12880:	1e51      	subs	r1, r2, #1
   12882:	418a      	sbcs	r2, r1
   12884:	701a      	strb	r2, [r3, #0]

	float sig = 0.0;
   12886:	2300      	movs	r3, #0
   12888:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
   1288a:	69fb      	ldr	r3, [r7, #28]
   1288c:	2b00      	cmp	r3, #0
   1288e:	d102      	bne.n	12896 <buffer_get_float32_auto+0x86>
   12890:	693b      	ldr	r3, [r7, #16]
   12892:	2b00      	cmp	r3, #0
   12894:	d01f      	beq.n	128d6 <buffer_get_float32_auto+0xc6>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
   12896:	4b1a      	ldr	r3, [pc, #104]	; (12900 <buffer_get_float32_auto+0xf0>)
   12898:	6938      	ldr	r0, [r7, #16]
   1289a:	4798      	blx	r3
   1289c:	1c02      	adds	r2, r0, #0
   1289e:	4b19      	ldr	r3, [pc, #100]	; (12904 <buffer_get_float32_auto+0xf4>)
   128a0:	1c10      	adds	r0, r2, #0
   128a2:	4798      	blx	r3
   128a4:	4c18      	ldr	r4, [pc, #96]	; (12908 <buffer_get_float32_auto+0xf8>)
   128a6:	2200      	movs	r2, #0
   128a8:	4b18      	ldr	r3, [pc, #96]	; (1290c <buffer_get_float32_auto+0xfc>)
   128aa:	47a0      	blx	r4
   128ac:	0003      	movs	r3, r0
   128ae:	000c      	movs	r4, r1
   128b0:	0018      	movs	r0, r3
   128b2:	0021      	movs	r1, r4
   128b4:	4c16      	ldr	r4, [pc, #88]	; (12910 <buffer_get_float32_auto+0x100>)
   128b6:	2200      	movs	r2, #0
   128b8:	4b16      	ldr	r3, [pc, #88]	; (12914 <buffer_get_float32_auto+0x104>)
   128ba:	47a0      	blx	r4
   128bc:	0003      	movs	r3, r0
   128be:	000c      	movs	r4, r1
   128c0:	0019      	movs	r1, r3
   128c2:	0022      	movs	r2, r4
   128c4:	4b14      	ldr	r3, [pc, #80]	; (12918 <buffer_get_float32_auto+0x108>)
   128c6:	0008      	movs	r0, r1
   128c8:	0011      	movs	r1, r2
   128ca:	4798      	blx	r3
   128cc:	1c03      	adds	r3, r0, #0
   128ce:	61bb      	str	r3, [r7, #24]
		e -= 126;
   128d0:	69fb      	ldr	r3, [r7, #28]
   128d2:	3b7e      	subs	r3, #126	; 0x7e
   128d4:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
   128d6:	230f      	movs	r3, #15
   128d8:	18fb      	adds	r3, r7, r3
   128da:	781b      	ldrb	r3, [r3, #0]
   128dc:	2b00      	cmp	r3, #0
   128de:	d004      	beq.n	128ea <buffer_get_float32_auto+0xda>
		sig = -sig;
   128e0:	69bb      	ldr	r3, [r7, #24]
   128e2:	2280      	movs	r2, #128	; 0x80
   128e4:	0612      	lsls	r2, r2, #24
   128e6:	4053      	eors	r3, r2
   128e8:	61bb      	str	r3, [r7, #24]
	}
	
	return ldexpf(sig, e);
   128ea:	69fa      	ldr	r2, [r7, #28]
   128ec:	69bb      	ldr	r3, [r7, #24]
   128ee:	0011      	movs	r1, r2
   128f0:	1c18      	adds	r0, r3, #0
   128f2:	4b0a      	ldr	r3, [pc, #40]	; (1291c <buffer_get_float32_auto+0x10c>)
   128f4:	4798      	blx	r3
   128f6:	1c03      	adds	r3, r0, #0
}
   128f8:	1c18      	adds	r0, r3, #0
   128fa:	46bd      	mov	sp, r7
   128fc:	b009      	add	sp, #36	; 0x24
   128fe:	bd90      	pop	{r4, r7, pc}
   12900:	0001a379 	.word	0x0001a379
   12904:	0001bf15 	.word	0x0001bf15
   12908:	0001aa25 	.word	0x0001aa25
   1290c:	41700000 	.word	0x41700000
   12910:	0001a405 	.word	0x0001a405
   12914:	3fe00000 	.word	0x3fe00000
   12918:	0001bfb9 	.word	0x0001bfb9
   1291c:	00019051 	.word	0x00019051

00012920 <vesc_get_fw_version>:


void vesc_get_fw_version(){
   12920:	b590      	push	{r4, r7, lr}
   12922:	4c2d      	ldr	r4, [pc, #180]	; (129d8 <vesc_get_fw_version+0xb8>)
   12924:	44a5      	add	sp, r4
   12926:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   12928:	4b2c      	ldr	r3, [pc, #176]	; (129dc <vesc_get_fw_version+0xbc>)
   1292a:	2282      	movs	r2, #130	; 0x82
   1292c:	0092      	lsls	r2, r2, #2
   1292e:	4694      	mov	ip, r2
   12930:	44bc      	add	ip, r7
   12932:	4463      	add	r3, ip
   12934:	2202      	movs	r2, #2
   12936:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
   12938:	4b28      	ldr	r3, [pc, #160]	; (129dc <vesc_get_fw_version+0xbc>)
   1293a:	2282      	movs	r2, #130	; 0x82
   1293c:	0092      	lsls	r2, r2, #2
   1293e:	4694      	mov	ip, r2
   12940:	44bc      	add	ip, r7
   12942:	4463      	add	r3, ip
   12944:	2201      	movs	r2, #1
   12946:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_FW_VERSION;
   12948:	4b25      	ldr	r3, [pc, #148]	; (129e0 <vesc_get_fw_version+0xc0>)
   1294a:	781a      	ldrb	r2, [r3, #0]
   1294c:	4b23      	ldr	r3, [pc, #140]	; (129dc <vesc_get_fw_version+0xbc>)
   1294e:	2182      	movs	r1, #130	; 0x82
   12950:	0089      	lsls	r1, r1, #2
   12952:	468c      	mov	ip, r1
   12954:	44bc      	add	ip, r7
   12956:	4463      	add	r3, ip
   12958:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
   1295a:	4b22      	ldr	r3, [pc, #136]	; (129e4 <vesc_get_fw_version+0xc4>)
   1295c:	18fc      	adds	r4, r7, r3
   1295e:	003b      	movs	r3, r7
   12960:	3303      	adds	r3, #3
   12962:	2101      	movs	r1, #1
   12964:	0018      	movs	r0, r3
   12966:	4b20      	ldr	r3, [pc, #128]	; (129e8 <vesc_get_fw_version+0xc8>)
   12968:	4798      	blx	r3
   1296a:	0003      	movs	r3, r0
   1296c:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   1296e:	4b1d      	ldr	r3, [pc, #116]	; (129e4 <vesc_get_fw_version+0xc4>)
   12970:	18fb      	adds	r3, r7, r3
   12972:	881b      	ldrh	r3, [r3, #0]
   12974:	0a1b      	lsrs	r3, r3, #8
   12976:	b29b      	uxth	r3, r3
   12978:	b2d9      	uxtb	r1, r3
   1297a:	4b18      	ldr	r3, [pc, #96]	; (129dc <vesc_get_fw_version+0xbc>)
   1297c:	2282      	movs	r2, #130	; 0x82
   1297e:	0092      	lsls	r2, r2, #2
   12980:	4694      	mov	ip, r2
   12982:	44bc      	add	ip, r7
   12984:	4463      	add	r3, ip
   12986:	4a19      	ldr	r2, [pc, #100]	; (129ec <vesc_get_fw_version+0xcc>)
   12988:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   1298a:	4b16      	ldr	r3, [pc, #88]	; (129e4 <vesc_get_fw_version+0xc4>)
   1298c:	18fb      	adds	r3, r7, r3
   1298e:	881b      	ldrh	r3, [r3, #0]
   12990:	b2d9      	uxtb	r1, r3
   12992:	4b12      	ldr	r3, [pc, #72]	; (129dc <vesc_get_fw_version+0xbc>)
   12994:	2282      	movs	r2, #130	; 0x82
   12996:	0092      	lsls	r2, r2, #2
   12998:	18ba      	adds	r2, r7, r2
   1299a:	18d2      	adds	r2, r2, r3
   1299c:	2381      	movs	r3, #129	; 0x81
   1299e:	009b      	lsls	r3, r3, #2
   129a0:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   129a2:	4b0e      	ldr	r3, [pc, #56]	; (129dc <vesc_get_fw_version+0xbc>)
   129a4:	2282      	movs	r2, #130	; 0x82
   129a6:	0092      	lsls	r2, r2, #2
   129a8:	18ba      	adds	r2, r7, r2
   129aa:	18d4      	adds	r4, r2, r3
   129ac:	466b      	mov	r3, sp
   129ae:	0018      	movs	r0, r3
   129b0:	0021      	movs	r1, r4
   129b2:	3110      	adds	r1, #16
   129b4:	23fb      	movs	r3, #251	; 0xfb
   129b6:	005b      	lsls	r3, r3, #1
   129b8:	001a      	movs	r2, r3
   129ba:	4b0d      	ldr	r3, [pc, #52]	; (129f0 <vesc_get_fw_version+0xd0>)
   129bc:	4798      	blx	r3
   129be:	6820      	ldr	r0, [r4, #0]
   129c0:	6861      	ldr	r1, [r4, #4]
   129c2:	68a2      	ldr	r2, [r4, #8]
   129c4:	68e3      	ldr	r3, [r4, #12]
   129c6:	4c0b      	ldr	r4, [pc, #44]	; (129f4 <vesc_get_fw_version+0xd4>)
   129c8:	47a0      	blx	r4
}
   129ca:	46c0      	nop			; (mov r8, r8)
   129cc:	46bd      	mov	sp, r7
   129ce:	2383      	movs	r3, #131	; 0x83
   129d0:	009b      	lsls	r3, r3, #2
   129d2:	449d      	add	sp, r3
   129d4:	bd90      	pop	{r4, r7, pc}
   129d6:	46c0      	nop			; (mov r8, r8)
   129d8:	fffffbfc 	.word	0xfffffbfc
   129dc:	fffffdf8 	.word	0xfffffdf8
   129e0:	20000404 	.word	0x20000404
   129e4:	00000206 	.word	0x00000206
   129e8:	00011849 	.word	0x00011849
   129ec:	00000203 	.word	0x00000203
   129f0:	0001c15d 	.word	0x0001c15d
   129f4:	0001199d 	.word	0x0001199d

000129f8 <vesc_get_vals>:

void vesc_get_vals(){
   129f8:	b590      	push	{r4, r7, lr}
   129fa:	4c2d      	ldr	r4, [pc, #180]	; (12ab0 <vesc_get_vals+0xb8>)
   129fc:	44a5      	add	sp, r4
   129fe:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;
	
	send_pack.start = 0x02;
   12a00:	4b2c      	ldr	r3, [pc, #176]	; (12ab4 <vesc_get_vals+0xbc>)
   12a02:	2282      	movs	r2, #130	; 0x82
   12a04:	0092      	lsls	r2, r2, #2
   12a06:	4694      	mov	ip, r2
   12a08:	44bc      	add	ip, r7
   12a0a:	4463      	add	r3, ip
   12a0c:	2202      	movs	r2, #2
   12a0e:	701a      	strb	r2, [r3, #0]
		send_pack.payload[4] = (mask&0xFF);
		uint16_t crc = crc16(send_pack.payload, 5);
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
	} else {*/
		send_pack.len[0] = 0x01;
   12a10:	4b28      	ldr	r3, [pc, #160]	; (12ab4 <vesc_get_vals+0xbc>)
   12a12:	2282      	movs	r2, #130	; 0x82
   12a14:	0092      	lsls	r2, r2, #2
   12a16:	4694      	mov	ip, r2
   12a18:	44bc      	add	ip, r7
   12a1a:	4463      	add	r3, ip
   12a1c:	2201      	movs	r2, #1
   12a1e:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES;
   12a20:	4b25      	ldr	r3, [pc, #148]	; (12ab8 <vesc_get_vals+0xc0>)
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	4b23      	ldr	r3, [pc, #140]	; (12ab4 <vesc_get_vals+0xbc>)
   12a26:	2182      	movs	r1, #130	; 0x82
   12a28:	0089      	lsls	r1, r1, #2
   12a2a:	468c      	mov	ip, r1
   12a2c:	44bc      	add	ip, r7
   12a2e:	4463      	add	r3, ip
   12a30:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
   12a32:	4b22      	ldr	r3, [pc, #136]	; (12abc <vesc_get_vals+0xc4>)
   12a34:	18fc      	adds	r4, r7, r3
   12a36:	003b      	movs	r3, r7
   12a38:	3303      	adds	r3, #3
   12a3a:	2101      	movs	r1, #1
   12a3c:	0018      	movs	r0, r3
   12a3e:	4b20      	ldr	r3, [pc, #128]	; (12ac0 <vesc_get_vals+0xc8>)
   12a40:	4798      	blx	r3
   12a42:	0003      	movs	r3, r0
   12a44:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   12a46:	4b1d      	ldr	r3, [pc, #116]	; (12abc <vesc_get_vals+0xc4>)
   12a48:	18fb      	adds	r3, r7, r3
   12a4a:	881b      	ldrh	r3, [r3, #0]
   12a4c:	0a1b      	lsrs	r3, r3, #8
   12a4e:	b29b      	uxth	r3, r3
   12a50:	b2d9      	uxtb	r1, r3
   12a52:	4b18      	ldr	r3, [pc, #96]	; (12ab4 <vesc_get_vals+0xbc>)
   12a54:	2282      	movs	r2, #130	; 0x82
   12a56:	0092      	lsls	r2, r2, #2
   12a58:	4694      	mov	ip, r2
   12a5a:	44bc      	add	ip, r7
   12a5c:	4463      	add	r3, ip
   12a5e:	4a19      	ldr	r2, [pc, #100]	; (12ac4 <vesc_get_vals+0xcc>)
   12a60:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   12a62:	4b16      	ldr	r3, [pc, #88]	; (12abc <vesc_get_vals+0xc4>)
   12a64:	18fb      	adds	r3, r7, r3
   12a66:	881b      	ldrh	r3, [r3, #0]
   12a68:	b2d9      	uxtb	r1, r3
   12a6a:	4b12      	ldr	r3, [pc, #72]	; (12ab4 <vesc_get_vals+0xbc>)
   12a6c:	2282      	movs	r2, #130	; 0x82
   12a6e:	0092      	lsls	r2, r2, #2
   12a70:	18ba      	adds	r2, r7, r2
   12a72:	18d2      	adds	r2, r2, r3
   12a74:	2381      	movs	r3, #129	; 0x81
   12a76:	009b      	lsls	r3, r3, #2
   12a78:	54d1      	strb	r1, [r2, r3]
	//}

	send_packet(send_pack);
   12a7a:	4b0e      	ldr	r3, [pc, #56]	; (12ab4 <vesc_get_vals+0xbc>)
   12a7c:	2282      	movs	r2, #130	; 0x82
   12a7e:	0092      	lsls	r2, r2, #2
   12a80:	18ba      	adds	r2, r7, r2
   12a82:	18d4      	adds	r4, r2, r3
   12a84:	466b      	mov	r3, sp
   12a86:	0018      	movs	r0, r3
   12a88:	0021      	movs	r1, r4
   12a8a:	3110      	adds	r1, #16
   12a8c:	23fb      	movs	r3, #251	; 0xfb
   12a8e:	005b      	lsls	r3, r3, #1
   12a90:	001a      	movs	r2, r3
   12a92:	4b0d      	ldr	r3, [pc, #52]	; (12ac8 <vesc_get_vals+0xd0>)
   12a94:	4798      	blx	r3
   12a96:	6820      	ldr	r0, [r4, #0]
   12a98:	6861      	ldr	r1, [r4, #4]
   12a9a:	68a2      	ldr	r2, [r4, #8]
   12a9c:	68e3      	ldr	r3, [r4, #12]
   12a9e:	4c0b      	ldr	r4, [pc, #44]	; (12acc <vesc_get_vals+0xd4>)
   12aa0:	47a0      	blx	r4
}
   12aa2:	46c0      	nop			; (mov r8, r8)
   12aa4:	46bd      	mov	sp, r7
   12aa6:	2383      	movs	r3, #131	; 0x83
   12aa8:	009b      	lsls	r3, r3, #2
   12aaa:	449d      	add	sp, r3
   12aac:	bd90      	pop	{r4, r7, pc}
   12aae:	46c0      	nop			; (mov r8, r8)
   12ab0:	fffffbfc 	.word	0xfffffbfc
   12ab4:	fffffdf8 	.word	0xfffffdf8
   12ab8:	20000405 	.word	0x20000405
   12abc:	00000206 	.word	0x00000206
   12ac0:	00011849 	.word	0x00011849
   12ac4:	00000203 	.word	0x00000203
   12ac8:	0001c15d 	.word	0x0001c15d
   12acc:	0001199d 	.word	0x0001199d

00012ad0 <vesc_get_mcconf>:

void vesc_get_mcconf(){
   12ad0:	b590      	push	{r4, r7, lr}
   12ad2:	4c2d      	ldr	r4, [pc, #180]	; (12b88 <vesc_get_mcconf+0xb8>)
   12ad4:	44a5      	add	sp, r4
   12ad6:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   12ad8:	4b2c      	ldr	r3, [pc, #176]	; (12b8c <vesc_get_mcconf+0xbc>)
   12ada:	2282      	movs	r2, #130	; 0x82
   12adc:	0092      	lsls	r2, r2, #2
   12ade:	4694      	mov	ip, r2
   12ae0:	44bc      	add	ip, r7
   12ae2:	4463      	add	r3, ip
   12ae4:	2202      	movs	r2, #2
   12ae6:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
   12ae8:	4b28      	ldr	r3, [pc, #160]	; (12b8c <vesc_get_mcconf+0xbc>)
   12aea:	2282      	movs	r2, #130	; 0x82
   12aec:	0092      	lsls	r2, r2, #2
   12aee:	4694      	mov	ip, r2
   12af0:	44bc      	add	ip, r7
   12af2:	4463      	add	r3, ip
   12af4:	2201      	movs	r2, #1
   12af6:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_MCCONF;
   12af8:	4b25      	ldr	r3, [pc, #148]	; (12b90 <vesc_get_mcconf+0xc0>)
   12afa:	781a      	ldrb	r2, [r3, #0]
   12afc:	4b23      	ldr	r3, [pc, #140]	; (12b8c <vesc_get_mcconf+0xbc>)
   12afe:	2182      	movs	r1, #130	; 0x82
   12b00:	0089      	lsls	r1, r1, #2
   12b02:	468c      	mov	ip, r1
   12b04:	44bc      	add	ip, r7
   12b06:	4463      	add	r3, ip
   12b08:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
   12b0a:	4b22      	ldr	r3, [pc, #136]	; (12b94 <vesc_get_mcconf+0xc4>)
   12b0c:	18fc      	adds	r4, r7, r3
   12b0e:	003b      	movs	r3, r7
   12b10:	3303      	adds	r3, #3
   12b12:	2101      	movs	r1, #1
   12b14:	0018      	movs	r0, r3
   12b16:	4b20      	ldr	r3, [pc, #128]	; (12b98 <vesc_get_mcconf+0xc8>)
   12b18:	4798      	blx	r3
   12b1a:	0003      	movs	r3, r0
   12b1c:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   12b1e:	4b1d      	ldr	r3, [pc, #116]	; (12b94 <vesc_get_mcconf+0xc4>)
   12b20:	18fb      	adds	r3, r7, r3
   12b22:	881b      	ldrh	r3, [r3, #0]
   12b24:	0a1b      	lsrs	r3, r3, #8
   12b26:	b29b      	uxth	r3, r3
   12b28:	b2d9      	uxtb	r1, r3
   12b2a:	4b18      	ldr	r3, [pc, #96]	; (12b8c <vesc_get_mcconf+0xbc>)
   12b2c:	2282      	movs	r2, #130	; 0x82
   12b2e:	0092      	lsls	r2, r2, #2
   12b30:	4694      	mov	ip, r2
   12b32:	44bc      	add	ip, r7
   12b34:	4463      	add	r3, ip
   12b36:	4a19      	ldr	r2, [pc, #100]	; (12b9c <vesc_get_mcconf+0xcc>)
   12b38:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   12b3a:	4b16      	ldr	r3, [pc, #88]	; (12b94 <vesc_get_mcconf+0xc4>)
   12b3c:	18fb      	adds	r3, r7, r3
   12b3e:	881b      	ldrh	r3, [r3, #0]
   12b40:	b2d9      	uxtb	r1, r3
   12b42:	4b12      	ldr	r3, [pc, #72]	; (12b8c <vesc_get_mcconf+0xbc>)
   12b44:	2282      	movs	r2, #130	; 0x82
   12b46:	0092      	lsls	r2, r2, #2
   12b48:	18ba      	adds	r2, r7, r2
   12b4a:	18d2      	adds	r2, r2, r3
   12b4c:	2381      	movs	r3, #129	; 0x81
   12b4e:	009b      	lsls	r3, r3, #2
   12b50:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   12b52:	4b0e      	ldr	r3, [pc, #56]	; (12b8c <vesc_get_mcconf+0xbc>)
   12b54:	2282      	movs	r2, #130	; 0x82
   12b56:	0092      	lsls	r2, r2, #2
   12b58:	18ba      	adds	r2, r7, r2
   12b5a:	18d4      	adds	r4, r2, r3
   12b5c:	466b      	mov	r3, sp
   12b5e:	0018      	movs	r0, r3
   12b60:	0021      	movs	r1, r4
   12b62:	3110      	adds	r1, #16
   12b64:	23fb      	movs	r3, #251	; 0xfb
   12b66:	005b      	lsls	r3, r3, #1
   12b68:	001a      	movs	r2, r3
   12b6a:	4b0d      	ldr	r3, [pc, #52]	; (12ba0 <vesc_get_mcconf+0xd0>)
   12b6c:	4798      	blx	r3
   12b6e:	6820      	ldr	r0, [r4, #0]
   12b70:	6861      	ldr	r1, [r4, #4]
   12b72:	68a2      	ldr	r2, [r4, #8]
   12b74:	68e3      	ldr	r3, [r4, #12]
   12b76:	4c0b      	ldr	r4, [pc, #44]	; (12ba4 <vesc_get_mcconf+0xd4>)
   12b78:	47a0      	blx	r4
}
   12b7a:	46c0      	nop			; (mov r8, r8)
   12b7c:	46bd      	mov	sp, r7
   12b7e:	2383      	movs	r3, #131	; 0x83
   12b80:	009b      	lsls	r3, r3, #2
   12b82:	449d      	add	sp, r3
   12b84:	bd90      	pop	{r4, r7, pc}
   12b86:	46c0      	nop			; (mov r8, r8)
   12b88:	fffffbfc 	.word	0xfffffbfc
   12b8c:	fffffdf8 	.word	0xfffffdf8
   12b90:	20000406 	.word	0x20000406
   12b94:	00000206 	.word	0x00000206
   12b98:	00011849 	.word	0x00011849
   12b9c:	00000203 	.word	0x00000203
   12ba0:	0001c15d 	.word	0x0001c15d
   12ba4:	0001199d 	.word	0x0001199d

00012ba8 <vesc_get_pwm>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_get_pwm(){
   12ba8:	b590      	push	{r4, r7, lr}
   12baa:	4c30      	ldr	r4, [pc, #192]	; (12c6c <vesc_get_pwm+0xc4>)
   12bac:	44a5      	add	sp, r4
   12bae:	af7e      	add	r7, sp, #504	; 0x1f8
	if(!SEND_VESC_CHUCK)
   12bb0:	4b2f      	ldr	r3, [pc, #188]	; (12c70 <vesc_get_pwm+0xc8>)
   12bb2:	781b      	ldrb	r3, [r3, #0]
   12bb4:	2201      	movs	r2, #1
   12bb6:	4053      	eors	r3, r2
   12bb8:	b2db      	uxtb	r3, r3
   12bba:	2b00      	cmp	r3, #0
   12bbc:	d050      	beq.n	12c60 <vesc_get_pwm+0xb8>
	{
		struct uart_packet send_pack;

		send_pack.start = 0x02;
   12bbe:	4b2d      	ldr	r3, [pc, #180]	; (12c74 <vesc_get_pwm+0xcc>)
   12bc0:	2282      	movs	r2, #130	; 0x82
   12bc2:	0092      	lsls	r2, r2, #2
   12bc4:	4694      	mov	ip, r2
   12bc6:	44bc      	add	ip, r7
   12bc8:	4463      	add	r3, ip
   12bca:	2202      	movs	r2, #2
   12bcc:	701a      	strb	r2, [r3, #0]
		send_pack.len[0] = 0x01;
   12bce:	4b29      	ldr	r3, [pc, #164]	; (12c74 <vesc_get_pwm+0xcc>)
   12bd0:	2282      	movs	r2, #130	; 0x82
   12bd2:	0092      	lsls	r2, r2, #2
   12bd4:	4694      	mov	ip, r2
   12bd6:	44bc      	add	ip, r7
   12bd8:	4463      	add	r3, ip
   12bda:	2201      	movs	r2, #1
   12bdc:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_DECODED_PPM;
   12bde:	4b26      	ldr	r3, [pc, #152]	; (12c78 <vesc_get_pwm+0xd0>)
   12be0:	781a      	ldrb	r2, [r3, #0]
   12be2:	4b24      	ldr	r3, [pc, #144]	; (12c74 <vesc_get_pwm+0xcc>)
   12be4:	2182      	movs	r1, #130	; 0x82
   12be6:	0089      	lsls	r1, r1, #2
   12be8:	468c      	mov	ip, r1
   12bea:	44bc      	add	ip, r7
   12bec:	4463      	add	r3, ip
   12bee:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
   12bf0:	4b22      	ldr	r3, [pc, #136]	; (12c7c <vesc_get_pwm+0xd4>)
   12bf2:	18fc      	adds	r4, r7, r3
   12bf4:	003b      	movs	r3, r7
   12bf6:	3303      	adds	r3, #3
   12bf8:	2101      	movs	r1, #1
   12bfa:	0018      	movs	r0, r3
   12bfc:	4b20      	ldr	r3, [pc, #128]	; (12c80 <vesc_get_pwm+0xd8>)
   12bfe:	4798      	blx	r3
   12c00:	0003      	movs	r3, r0
   12c02:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   12c04:	4b1d      	ldr	r3, [pc, #116]	; (12c7c <vesc_get_pwm+0xd4>)
   12c06:	18fb      	adds	r3, r7, r3
   12c08:	881b      	ldrh	r3, [r3, #0]
   12c0a:	0a1b      	lsrs	r3, r3, #8
   12c0c:	b29b      	uxth	r3, r3
   12c0e:	b2d9      	uxtb	r1, r3
   12c10:	4b18      	ldr	r3, [pc, #96]	; (12c74 <vesc_get_pwm+0xcc>)
   12c12:	2282      	movs	r2, #130	; 0x82
   12c14:	0092      	lsls	r2, r2, #2
   12c16:	4694      	mov	ip, r2
   12c18:	44bc      	add	ip, r7
   12c1a:	4463      	add	r3, ip
   12c1c:	4a19      	ldr	r2, [pc, #100]	; (12c84 <vesc_get_pwm+0xdc>)
   12c1e:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   12c20:	4b16      	ldr	r3, [pc, #88]	; (12c7c <vesc_get_pwm+0xd4>)
   12c22:	18fb      	adds	r3, r7, r3
   12c24:	881b      	ldrh	r3, [r3, #0]
   12c26:	b2d9      	uxtb	r1, r3
   12c28:	4b12      	ldr	r3, [pc, #72]	; (12c74 <vesc_get_pwm+0xcc>)
   12c2a:	2282      	movs	r2, #130	; 0x82
   12c2c:	0092      	lsls	r2, r2, #2
   12c2e:	18ba      	adds	r2, r7, r2
   12c30:	18d2      	adds	r2, r2, r3
   12c32:	2381      	movs	r3, #129	; 0x81
   12c34:	009b      	lsls	r3, r3, #2
   12c36:	54d1      	strb	r1, [r2, r3]

		send_packet(send_pack);
   12c38:	4b0e      	ldr	r3, [pc, #56]	; (12c74 <vesc_get_pwm+0xcc>)
   12c3a:	2282      	movs	r2, #130	; 0x82
   12c3c:	0092      	lsls	r2, r2, #2
   12c3e:	18ba      	adds	r2, r7, r2
   12c40:	18d4      	adds	r4, r2, r3
   12c42:	466b      	mov	r3, sp
   12c44:	0018      	movs	r0, r3
   12c46:	0021      	movs	r1, r4
   12c48:	3110      	adds	r1, #16
   12c4a:	23fb      	movs	r3, #251	; 0xfb
   12c4c:	005b      	lsls	r3, r3, #1
   12c4e:	001a      	movs	r2, r3
   12c50:	4b0d      	ldr	r3, [pc, #52]	; (12c88 <vesc_get_pwm+0xe0>)
   12c52:	4798      	blx	r3
   12c54:	6820      	ldr	r0, [r4, #0]
   12c56:	6861      	ldr	r1, [r4, #4]
   12c58:	68a2      	ldr	r2, [r4, #8]
   12c5a:	68e3      	ldr	r3, [r4, #12]
   12c5c:	4c0b      	ldr	r4, [pc, #44]	; (12c8c <vesc_get_pwm+0xe4>)
   12c5e:	47a0      	blx	r4
	}
}
   12c60:	46c0      	nop			; (mov r8, r8)
   12c62:	46bd      	mov	sp, r7
   12c64:	2383      	movs	r3, #131	; 0x83
   12c66:	009b      	lsls	r3, r3, #2
   12c68:	449d      	add	sp, r3
   12c6a:	bd90      	pop	{r4, r7, pc}
   12c6c:	fffffbfc 	.word	0xfffffbfc
   12c70:	20000433 	.word	0x20000433
   12c74:	fffffdf8 	.word	0xfffffdf8
   12c78:	20000408 	.word	0x20000408
   12c7c:	00000206 	.word	0x00000206
   12c80:	00011849 	.word	0x00011849
   12c84:	00000203 	.word	0x00000203
   12c88:	0001c15d 	.word	0x0001c15d
   12c8c:	0001199d 	.word	0x0001199d

00012c90 <vesc_get_chuck>:

void vesc_get_chuck(){
   12c90:	b590      	push	{r4, r7, lr}
   12c92:	4c2d      	ldr	r4, [pc, #180]	; (12d48 <vesc_get_chuck+0xb8>)
   12c94:	44a5      	add	sp, r4
   12c96:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   12c98:	4b2c      	ldr	r3, [pc, #176]	; (12d4c <vesc_get_chuck+0xbc>)
   12c9a:	2282      	movs	r2, #130	; 0x82
   12c9c:	0092      	lsls	r2, r2, #2
   12c9e:	4694      	mov	ip, r2
   12ca0:	44bc      	add	ip, r7
   12ca2:	4463      	add	r3, ip
   12ca4:	2202      	movs	r2, #2
   12ca6:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
   12ca8:	4b28      	ldr	r3, [pc, #160]	; (12d4c <vesc_get_chuck+0xbc>)
   12caa:	2282      	movs	r2, #130	; 0x82
   12cac:	0092      	lsls	r2, r2, #2
   12cae:	4694      	mov	ip, r2
   12cb0:	44bc      	add	ip, r7
   12cb2:	4463      	add	r3, ip
   12cb4:	2201      	movs	r2, #1
   12cb6:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_CHUK;
   12cb8:	4b25      	ldr	r3, [pc, #148]	; (12d50 <vesc_get_chuck+0xc0>)
   12cba:	781a      	ldrb	r2, [r3, #0]
   12cbc:	4b23      	ldr	r3, [pc, #140]	; (12d4c <vesc_get_chuck+0xbc>)
   12cbe:	2182      	movs	r1, #130	; 0x82
   12cc0:	0089      	lsls	r1, r1, #2
   12cc2:	468c      	mov	ip, r1
   12cc4:	44bc      	add	ip, r7
   12cc6:	4463      	add	r3, ip
   12cc8:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
   12cca:	4b22      	ldr	r3, [pc, #136]	; (12d54 <vesc_get_chuck+0xc4>)
   12ccc:	18fc      	adds	r4, r7, r3
   12cce:	003b      	movs	r3, r7
   12cd0:	3303      	adds	r3, #3
   12cd2:	2101      	movs	r1, #1
   12cd4:	0018      	movs	r0, r3
   12cd6:	4b20      	ldr	r3, [pc, #128]	; (12d58 <vesc_get_chuck+0xc8>)
   12cd8:	4798      	blx	r3
   12cda:	0003      	movs	r3, r0
   12cdc:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   12cde:	4b1d      	ldr	r3, [pc, #116]	; (12d54 <vesc_get_chuck+0xc4>)
   12ce0:	18fb      	adds	r3, r7, r3
   12ce2:	881b      	ldrh	r3, [r3, #0]
   12ce4:	0a1b      	lsrs	r3, r3, #8
   12ce6:	b29b      	uxth	r3, r3
   12ce8:	b2d9      	uxtb	r1, r3
   12cea:	4b18      	ldr	r3, [pc, #96]	; (12d4c <vesc_get_chuck+0xbc>)
   12cec:	2282      	movs	r2, #130	; 0x82
   12cee:	0092      	lsls	r2, r2, #2
   12cf0:	4694      	mov	ip, r2
   12cf2:	44bc      	add	ip, r7
   12cf4:	4463      	add	r3, ip
   12cf6:	4a19      	ldr	r2, [pc, #100]	; (12d5c <vesc_get_chuck+0xcc>)
   12cf8:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   12cfa:	4b16      	ldr	r3, [pc, #88]	; (12d54 <vesc_get_chuck+0xc4>)
   12cfc:	18fb      	adds	r3, r7, r3
   12cfe:	881b      	ldrh	r3, [r3, #0]
   12d00:	b2d9      	uxtb	r1, r3
   12d02:	4b12      	ldr	r3, [pc, #72]	; (12d4c <vesc_get_chuck+0xbc>)
   12d04:	2282      	movs	r2, #130	; 0x82
   12d06:	0092      	lsls	r2, r2, #2
   12d08:	18ba      	adds	r2, r7, r2
   12d0a:	18d2      	adds	r2, r2, r3
   12d0c:	2381      	movs	r3, #129	; 0x81
   12d0e:	009b      	lsls	r3, r3, #2
   12d10:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   12d12:	4b0e      	ldr	r3, [pc, #56]	; (12d4c <vesc_get_chuck+0xbc>)
   12d14:	2282      	movs	r2, #130	; 0x82
   12d16:	0092      	lsls	r2, r2, #2
   12d18:	18ba      	adds	r2, r7, r2
   12d1a:	18d4      	adds	r4, r2, r3
   12d1c:	466b      	mov	r3, sp
   12d1e:	0018      	movs	r0, r3
   12d20:	0021      	movs	r1, r4
   12d22:	3110      	adds	r1, #16
   12d24:	23fb      	movs	r3, #251	; 0xfb
   12d26:	005b      	lsls	r3, r3, #1
   12d28:	001a      	movs	r2, r3
   12d2a:	4b0d      	ldr	r3, [pc, #52]	; (12d60 <vesc_get_chuck+0xd0>)
   12d2c:	4798      	blx	r3
   12d2e:	6820      	ldr	r0, [r4, #0]
   12d30:	6861      	ldr	r1, [r4, #4]
   12d32:	68a2      	ldr	r2, [r4, #8]
   12d34:	68e3      	ldr	r3, [r4, #12]
   12d36:	4c0b      	ldr	r4, [pc, #44]	; (12d64 <vesc_get_chuck+0xd4>)
   12d38:	47a0      	blx	r4
}
   12d3a:	46c0      	nop			; (mov r8, r8)
   12d3c:	46bd      	mov	sp, r7
   12d3e:	2383      	movs	r3, #131	; 0x83
   12d40:	009b      	lsls	r3, r3, #2
   12d42:	449d      	add	sp, r3
   12d44:	bd90      	pop	{r4, r7, pc}
   12d46:	46c0      	nop			; (mov r8, r8)
   12d48:	fffffbfc 	.word	0xfffffbfc
   12d4c:	fffffdf8 	.word	0xfffffdf8
   12d50:	20000409 	.word	0x20000409
   12d54:	00000206 	.word	0x00000206
   12d58:	00011849 	.word	0x00011849
   12d5c:	00000203 	.word	0x00000203
   12d60:	0001c15d 	.word	0x0001c15d
   12d64:	0001199d 	.word	0x0001199d

00012d68 <vesc_set_chuck>:

void vesc_set_chuck(){
   12d68:	b590      	push	{r4, r7, lr}
   12d6a:	4c64      	ldr	r4, [pc, #400]	; (12efc <vesc_set_chuck+0x194>)
   12d6c:	44a5      	add	sp, r4
   12d6e:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   12d70:	4b63      	ldr	r3, [pc, #396]	; (12f00 <vesc_set_chuck+0x198>)
   12d72:	2282      	movs	r2, #130	; 0x82
   12d74:	0092      	lsls	r2, r2, #2
   12d76:	4694      	mov	ip, r2
   12d78:	44bc      	add	ip, r7
   12d7a:	4463      	add	r3, ip
   12d7c:	2202      	movs	r2, #2
   12d7e:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x0B;
   12d80:	4b5f      	ldr	r3, [pc, #380]	; (12f00 <vesc_set_chuck+0x198>)
   12d82:	2282      	movs	r2, #130	; 0x82
   12d84:	0092      	lsls	r2, r2, #2
   12d86:	4694      	mov	ip, r2
   12d88:	44bc      	add	ip, r7
   12d8a:	4463      	add	r3, ip
   12d8c:	220b      	movs	r2, #11
   12d8e:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_SET_CHUCK_DATA;
   12d90:	4b5c      	ldr	r3, [pc, #368]	; (12f04 <vesc_set_chuck+0x19c>)
   12d92:	781a      	ldrb	r2, [r3, #0]
   12d94:	4b5a      	ldr	r3, [pc, #360]	; (12f00 <vesc_set_chuck+0x198>)
   12d96:	2182      	movs	r1, #130	; 0x82
   12d98:	0089      	lsls	r1, r1, #2
   12d9a:	468c      	mov	ip, r1
   12d9c:	44bc      	add	ip, r7
   12d9e:	4463      	add	r3, ip
   12da0:	70da      	strb	r2, [r3, #3]
	send_pack.payload[1] = send_chuck_struct.js_x;
   12da2:	4b59      	ldr	r3, [pc, #356]	; (12f08 <vesc_set_chuck+0x1a0>)
   12da4:	781b      	ldrb	r3, [r3, #0]
   12da6:	b25b      	sxtb	r3, r3
   12da8:	b2da      	uxtb	r2, r3
   12daa:	4b55      	ldr	r3, [pc, #340]	; (12f00 <vesc_set_chuck+0x198>)
   12dac:	2182      	movs	r1, #130	; 0x82
   12dae:	0089      	lsls	r1, r1, #2
   12db0:	468c      	mov	ip, r1
   12db2:	44bc      	add	ip, r7
   12db4:	4463      	add	r3, ip
   12db6:	711a      	strb	r2, [r3, #4]
	send_pack.payload[2] = send_chuck_struct.js_y;
   12db8:	4b53      	ldr	r3, [pc, #332]	; (12f08 <vesc_set_chuck+0x1a0>)
   12dba:	785b      	ldrb	r3, [r3, #1]
   12dbc:	b25b      	sxtb	r3, r3
   12dbe:	b2da      	uxtb	r2, r3
   12dc0:	4b4f      	ldr	r3, [pc, #316]	; (12f00 <vesc_set_chuck+0x198>)
   12dc2:	2182      	movs	r1, #130	; 0x82
   12dc4:	0089      	lsls	r1, r1, #2
   12dc6:	468c      	mov	ip, r1
   12dc8:	44bc      	add	ip, r7
   12dca:	4463      	add	r3, ip
   12dcc:	715a      	strb	r2, [r3, #5]
	send_pack.payload[3] = send_chuck_struct.bt_c;
   12dce:	4b4e      	ldr	r3, [pc, #312]	; (12f08 <vesc_set_chuck+0x1a0>)
   12dd0:	7a1b      	ldrb	r3, [r3, #8]
   12dd2:	001a      	movs	r2, r3
   12dd4:	4b4a      	ldr	r3, [pc, #296]	; (12f00 <vesc_set_chuck+0x198>)
   12dd6:	2182      	movs	r1, #130	; 0x82
   12dd8:	0089      	lsls	r1, r1, #2
   12dda:	468c      	mov	ip, r1
   12ddc:	44bc      	add	ip, r7
   12dde:	4463      	add	r3, ip
   12de0:	719a      	strb	r2, [r3, #6]
	send_pack.payload[4] = send_chuck_struct.bt_z;
   12de2:	4b49      	ldr	r3, [pc, #292]	; (12f08 <vesc_set_chuck+0x1a0>)
   12de4:	7a5b      	ldrb	r3, [r3, #9]
   12de6:	001a      	movs	r2, r3
   12de8:	4b45      	ldr	r3, [pc, #276]	; (12f00 <vesc_set_chuck+0x198>)
   12dea:	2182      	movs	r1, #130	; 0x82
   12dec:	0089      	lsls	r1, r1, #2
   12dee:	468c      	mov	ip, r1
   12df0:	44bc      	add	ip, r7
   12df2:	4463      	add	r3, ip
   12df4:	71da      	strb	r2, [r3, #7]
	send_pack.payload[5] = (send_chuck_struct.acc_x & 0xF0) >> 8;
   12df6:	4b42      	ldr	r3, [pc, #264]	; (12f00 <vesc_set_chuck+0x198>)
   12df8:	2282      	movs	r2, #130	; 0x82
   12dfa:	0092      	lsls	r2, r2, #2
   12dfc:	4694      	mov	ip, r2
   12dfe:	44bc      	add	ip, r7
   12e00:	4463      	add	r3, ip
   12e02:	2200      	movs	r2, #0
   12e04:	721a      	strb	r2, [r3, #8]
	send_pack.payload[6] = (send_chuck_struct.acc_x & 0x0F);
   12e06:	4b40      	ldr	r3, [pc, #256]	; (12f08 <vesc_set_chuck+0x1a0>)
   12e08:	2202      	movs	r2, #2
   12e0a:	5e9b      	ldrsh	r3, [r3, r2]
   12e0c:	b2db      	uxtb	r3, r3
   12e0e:	220f      	movs	r2, #15
   12e10:	4013      	ands	r3, r2
   12e12:	b2da      	uxtb	r2, r3
   12e14:	4b3a      	ldr	r3, [pc, #232]	; (12f00 <vesc_set_chuck+0x198>)
   12e16:	2182      	movs	r1, #130	; 0x82
   12e18:	0089      	lsls	r1, r1, #2
   12e1a:	468c      	mov	ip, r1
   12e1c:	44bc      	add	ip, r7
   12e1e:	4463      	add	r3, ip
   12e20:	725a      	strb	r2, [r3, #9]
	send_pack.payload[7] = (send_chuck_struct.acc_y & 0xF0) >> 8;
   12e22:	4b37      	ldr	r3, [pc, #220]	; (12f00 <vesc_set_chuck+0x198>)
   12e24:	2282      	movs	r2, #130	; 0x82
   12e26:	0092      	lsls	r2, r2, #2
   12e28:	4694      	mov	ip, r2
   12e2a:	44bc      	add	ip, r7
   12e2c:	4463      	add	r3, ip
   12e2e:	2200      	movs	r2, #0
   12e30:	729a      	strb	r2, [r3, #10]
	send_pack.payload[8] = (send_chuck_struct.acc_y & 0x0F);
   12e32:	4b35      	ldr	r3, [pc, #212]	; (12f08 <vesc_set_chuck+0x1a0>)
   12e34:	2204      	movs	r2, #4
   12e36:	5e9b      	ldrsh	r3, [r3, r2]
   12e38:	b2db      	uxtb	r3, r3
   12e3a:	220f      	movs	r2, #15
   12e3c:	4013      	ands	r3, r2
   12e3e:	b2da      	uxtb	r2, r3
   12e40:	4b2f      	ldr	r3, [pc, #188]	; (12f00 <vesc_set_chuck+0x198>)
   12e42:	2182      	movs	r1, #130	; 0x82
   12e44:	0089      	lsls	r1, r1, #2
   12e46:	468c      	mov	ip, r1
   12e48:	44bc      	add	ip, r7
   12e4a:	4463      	add	r3, ip
   12e4c:	72da      	strb	r2, [r3, #11]
	send_pack.payload[9] = (send_chuck_struct.acc_z & 0xF0) >> 8;
   12e4e:	4b2c      	ldr	r3, [pc, #176]	; (12f00 <vesc_set_chuck+0x198>)
   12e50:	2282      	movs	r2, #130	; 0x82
   12e52:	0092      	lsls	r2, r2, #2
   12e54:	4694      	mov	ip, r2
   12e56:	44bc      	add	ip, r7
   12e58:	4463      	add	r3, ip
   12e5a:	2200      	movs	r2, #0
   12e5c:	731a      	strb	r2, [r3, #12]
	send_pack.payload[10] = (send_chuck_struct.acc_z & 0x0F);
   12e5e:	4b2a      	ldr	r3, [pc, #168]	; (12f08 <vesc_set_chuck+0x1a0>)
   12e60:	2206      	movs	r2, #6
   12e62:	5e9b      	ldrsh	r3, [r3, r2]
   12e64:	b2db      	uxtb	r3, r3
   12e66:	220f      	movs	r2, #15
   12e68:	4013      	ands	r3, r2
   12e6a:	b2da      	uxtb	r2, r3
   12e6c:	4b24      	ldr	r3, [pc, #144]	; (12f00 <vesc_set_chuck+0x198>)
   12e6e:	2182      	movs	r1, #130	; 0x82
   12e70:	0089      	lsls	r1, r1, #2
   12e72:	468c      	mov	ip, r1
   12e74:	44bc      	add	ip, r7
   12e76:	4463      	add	r3, ip
   12e78:	735a      	strb	r2, [r3, #13]
	uint16_t crc = crc16(send_pack.payload, 11);
   12e7a:	4b24      	ldr	r3, [pc, #144]	; (12f0c <vesc_set_chuck+0x1a4>)
   12e7c:	18fc      	adds	r4, r7, r3
   12e7e:	003b      	movs	r3, r7
   12e80:	3303      	adds	r3, #3
   12e82:	210b      	movs	r1, #11
   12e84:	0018      	movs	r0, r3
   12e86:	4b22      	ldr	r3, [pc, #136]	; (12f10 <vesc_set_chuck+0x1a8>)
   12e88:	4798      	blx	r3
   12e8a:	0003      	movs	r3, r0
   12e8c:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   12e8e:	4b1f      	ldr	r3, [pc, #124]	; (12f0c <vesc_set_chuck+0x1a4>)
   12e90:	18fb      	adds	r3, r7, r3
   12e92:	881b      	ldrh	r3, [r3, #0]
   12e94:	0a1b      	lsrs	r3, r3, #8
   12e96:	b29b      	uxth	r3, r3
   12e98:	b2d9      	uxtb	r1, r3
   12e9a:	4b19      	ldr	r3, [pc, #100]	; (12f00 <vesc_set_chuck+0x198>)
   12e9c:	2282      	movs	r2, #130	; 0x82
   12e9e:	0092      	lsls	r2, r2, #2
   12ea0:	4694      	mov	ip, r2
   12ea2:	44bc      	add	ip, r7
   12ea4:	4463      	add	r3, ip
   12ea6:	4a1b      	ldr	r2, [pc, #108]	; (12f14 <vesc_set_chuck+0x1ac>)
   12ea8:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   12eaa:	4b18      	ldr	r3, [pc, #96]	; (12f0c <vesc_set_chuck+0x1a4>)
   12eac:	18fb      	adds	r3, r7, r3
   12eae:	881b      	ldrh	r3, [r3, #0]
   12eb0:	b2d9      	uxtb	r1, r3
   12eb2:	4b13      	ldr	r3, [pc, #76]	; (12f00 <vesc_set_chuck+0x198>)
   12eb4:	2282      	movs	r2, #130	; 0x82
   12eb6:	0092      	lsls	r2, r2, #2
   12eb8:	18ba      	adds	r2, r7, r2
   12eba:	18d2      	adds	r2, r2, r3
   12ebc:	2381      	movs	r3, #129	; 0x81
   12ebe:	009b      	lsls	r3, r3, #2
   12ec0:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   12ec2:	4b0f      	ldr	r3, [pc, #60]	; (12f00 <vesc_set_chuck+0x198>)
   12ec4:	2282      	movs	r2, #130	; 0x82
   12ec6:	0092      	lsls	r2, r2, #2
   12ec8:	18ba      	adds	r2, r7, r2
   12eca:	18d4      	adds	r4, r2, r3
   12ecc:	466b      	mov	r3, sp
   12ece:	0018      	movs	r0, r3
   12ed0:	0021      	movs	r1, r4
   12ed2:	3110      	adds	r1, #16
   12ed4:	23fb      	movs	r3, #251	; 0xfb
   12ed6:	005b      	lsls	r3, r3, #1
   12ed8:	001a      	movs	r2, r3
   12eda:	4b0f      	ldr	r3, [pc, #60]	; (12f18 <vesc_set_chuck+0x1b0>)
   12edc:	4798      	blx	r3
   12ede:	6820      	ldr	r0, [r4, #0]
   12ee0:	6861      	ldr	r1, [r4, #4]
   12ee2:	68a2      	ldr	r2, [r4, #8]
   12ee4:	68e3      	ldr	r3, [r4, #12]
   12ee6:	4c0d      	ldr	r4, [pc, #52]	; (12f1c <vesc_set_chuck+0x1b4>)
   12ee8:	47a0      	blx	r4
	HOLD_FOR_REPLY = false;
   12eea:	4b0d      	ldr	r3, [pc, #52]	; (12f20 <vesc_set_chuck+0x1b8>)
   12eec:	2200      	movs	r2, #0
   12eee:	701a      	strb	r2, [r3, #0]
}
   12ef0:	46c0      	nop			; (mov r8, r8)
   12ef2:	46bd      	mov	sp, r7
   12ef4:	2383      	movs	r3, #131	; 0x83
   12ef6:	009b      	lsls	r3, r3, #2
   12ef8:	449d      	add	sp, r3
   12efa:	bd90      	pop	{r4, r7, pc}
   12efc:	fffffbfc 	.word	0xfffffbfc
   12f00:	fffffdf8 	.word	0xfffffdf8
   12f04:	2000040a 	.word	0x2000040a
   12f08:	2000058c 	.word	0x2000058c
   12f0c:	00000206 	.word	0x00000206
   12f10:	00011849 	.word	0x00011849
   12f14:	00000203 	.word	0x00000203
   12f18:	0001c15d 	.word	0x0001c15d
   12f1c:	0001199d 	.word	0x0001199d
   12f20:	20000430 	.word	0x20000430

00012f24 <vesc_read_all>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_read_all(){
   12f24:	b580      	push	{r7, lr}
   12f26:	af00      	add	r7, sp, #0
	static uint8_t read_index = 0;
	if(HOLD_FOR_REPLY && check_timer_expired(&vesc_usart_time, vesc_usart_timeout))
   12f28:	4b52      	ldr	r3, [pc, #328]	; (13074 <vesc_read_all+0x150>)
   12f2a:	781b      	ldrb	r3, [r3, #0]
   12f2c:	2b00      	cmp	r3, #0
   12f2e:	d00b      	beq.n	12f48 <vesc_read_all+0x24>
   12f30:	4b51      	ldr	r3, [pc, #324]	; (13078 <vesc_read_all+0x154>)
   12f32:	681a      	ldr	r2, [r3, #0]
   12f34:	4b51      	ldr	r3, [pc, #324]	; (1307c <vesc_read_all+0x158>)
   12f36:	0011      	movs	r1, r2
   12f38:	0018      	movs	r0, r3
   12f3a:	4b51      	ldr	r3, [pc, #324]	; (13080 <vesc_read_all+0x15c>)
   12f3c:	4798      	blx	r3
   12f3e:	1e03      	subs	r3, r0, #0
   12f40:	d002      	beq.n	12f48 <vesc_read_all+0x24>
		HOLD_FOR_REPLY = false;
   12f42:	4b4c      	ldr	r3, [pc, #304]	; (13074 <vesc_read_all+0x150>)
   12f44:	2200      	movs	r2, #0
   12f46:	701a      	strb	r2, [r3, #0]
	
	if(!HOLD_FOR_REPLY){
   12f48:	4b4a      	ldr	r3, [pc, #296]	; (13074 <vesc_read_all+0x150>)
   12f4a:	781b      	ldrb	r3, [r3, #0]
   12f4c:	2201      	movs	r2, #1
   12f4e:	4053      	eors	r3, r2
   12f50:	b2db      	uxtb	r3, r3
   12f52:	2b00      	cmp	r3, #0
   12f54:	d100      	bne.n	12f58 <vesc_read_all+0x34>
   12f56:	e07d      	b.n	13054 <vesc_read_all+0x130>
		if(check_timer_expired(&vesc_usart_time, VESC_UART_PERIOD)){
   12f58:	4b48      	ldr	r3, [pc, #288]	; (1307c <vesc_read_all+0x158>)
   12f5a:	210a      	movs	r1, #10
   12f5c:	0018      	movs	r0, r3
   12f5e:	4b48      	ldr	r3, [pc, #288]	; (13080 <vesc_read_all+0x15c>)
   12f60:	4798      	blx	r3
   12f62:	1e03      	subs	r3, r0, #0
   12f64:	d100      	bne.n	12f68 <vesc_read_all+0x44>
   12f66:	e075      	b.n	13054 <vesc_read_all+0x130>
			switch(read_index){
   12f68:	4b46      	ldr	r3, [pc, #280]	; (13084 <vesc_read_all+0x160>)
   12f6a:	781b      	ldrb	r3, [r3, #0]
   12f6c:	2b04      	cmp	r3, #4
   12f6e:	d900      	bls.n	12f72 <vesc_read_all+0x4e>
   12f70:	e070      	b.n	13054 <vesc_read_all+0x130>
   12f72:	009a      	lsls	r2, r3, #2
   12f74:	4b44      	ldr	r3, [pc, #272]	; (13088 <vesc_read_all+0x164>)
   12f76:	18d3      	adds	r3, r2, r3
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	469f      	mov	pc, r3
				case 0:
				if(!READ_VESC_PWM){
   12f7c:	4b43      	ldr	r3, [pc, #268]	; (1308c <vesc_read_all+0x168>)
   12f7e:	781b      	ldrb	r3, [r3, #0]
   12f80:	2201      	movs	r2, #1
   12f82:	4053      	eors	r3, r2
   12f84:	b2db      	uxtb	r3, r3
   12f86:	2b00      	cmp	r3, #0
   12f88:	d006      	beq.n	12f98 <vesc_read_all+0x74>
					read_index++;
   12f8a:	4b3e      	ldr	r3, [pc, #248]	; (13084 <vesc_read_all+0x160>)
   12f8c:	781b      	ldrb	r3, [r3, #0]
   12f8e:	3301      	adds	r3, #1
   12f90:	b2da      	uxtb	r2, r3
   12f92:	4b3c      	ldr	r3, [pc, #240]	; (13084 <vesc_read_all+0x160>)
   12f94:	701a      	strb	r2, [r3, #0]
				} else {
					read_index++;
					vesc_get_pwm();
				}
				break;
   12f96:	e05d      	b.n	13054 <vesc_read_all+0x130>
					read_index++;
   12f98:	4b3a      	ldr	r3, [pc, #232]	; (13084 <vesc_read_all+0x160>)
   12f9a:	781b      	ldrb	r3, [r3, #0]
   12f9c:	3301      	adds	r3, #1
   12f9e:	b2da      	uxtb	r2, r3
   12fa0:	4b38      	ldr	r3, [pc, #224]	; (13084 <vesc_read_all+0x160>)
   12fa2:	701a      	strb	r2, [r3, #0]
					vesc_get_pwm();
   12fa4:	4b3a      	ldr	r3, [pc, #232]	; (13090 <vesc_read_all+0x16c>)
   12fa6:	4798      	blx	r3
				break;
   12fa8:	e054      	b.n	13054 <vesc_read_all+0x130>
				case 1:
				if(!READ_VESC_FW){
   12faa:	4b3a      	ldr	r3, [pc, #232]	; (13094 <vesc_read_all+0x170>)
   12fac:	781b      	ldrb	r3, [r3, #0]
   12fae:	2201      	movs	r2, #1
   12fb0:	4053      	eors	r3, r2
   12fb2:	b2db      	uxtb	r3, r3
   12fb4:	2b00      	cmp	r3, #0
   12fb6:	d006      	beq.n	12fc6 <vesc_read_all+0xa2>
					read_index++;
   12fb8:	4b32      	ldr	r3, [pc, #200]	; (13084 <vesc_read_all+0x160>)
   12fba:	781b      	ldrb	r3, [r3, #0]
   12fbc:	3301      	adds	r3, #1
   12fbe:	b2da      	uxtb	r2, r3
   12fc0:	4b30      	ldr	r3, [pc, #192]	; (13084 <vesc_read_all+0x160>)
   12fc2:	701a      	strb	r2, [r3, #0]
				} else {
					read_index++;
					vesc_get_fw_version();
				}
				break;
   12fc4:	e046      	b.n	13054 <vesc_read_all+0x130>
					read_index++;
   12fc6:	4b2f      	ldr	r3, [pc, #188]	; (13084 <vesc_read_all+0x160>)
   12fc8:	781b      	ldrb	r3, [r3, #0]
   12fca:	3301      	adds	r3, #1
   12fcc:	b2da      	uxtb	r2, r3
   12fce:	4b2d      	ldr	r3, [pc, #180]	; (13084 <vesc_read_all+0x160>)
   12fd0:	701a      	strb	r2, [r3, #0]
					vesc_get_fw_version();
   12fd2:	4b31      	ldr	r3, [pc, #196]	; (13098 <vesc_read_all+0x174>)
   12fd4:	4798      	blx	r3
				break;
   12fd6:	e03d      	b.n	13054 <vesc_read_all+0x130>
				case 2:
				if(!READ_VESC_VALS){
   12fd8:	4b30      	ldr	r3, [pc, #192]	; (1309c <vesc_read_all+0x178>)
   12fda:	781b      	ldrb	r3, [r3, #0]
   12fdc:	2201      	movs	r2, #1
   12fde:	4053      	eors	r3, r2
   12fe0:	b2db      	uxtb	r3, r3
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	d006      	beq.n	12ff4 <vesc_read_all+0xd0>
					read_index++;
   12fe6:	4b27      	ldr	r3, [pc, #156]	; (13084 <vesc_read_all+0x160>)
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	3301      	adds	r3, #1
   12fec:	b2da      	uxtb	r2, r3
   12fee:	4b25      	ldr	r3, [pc, #148]	; (13084 <vesc_read_all+0x160>)
   12ff0:	701a      	strb	r2, [r3, #0]
				} else {
					read_index++;
					vesc_get_vals();
				}
				break;
   12ff2:	e02f      	b.n	13054 <vesc_read_all+0x130>
					read_index++;
   12ff4:	4b23      	ldr	r3, [pc, #140]	; (13084 <vesc_read_all+0x160>)
   12ff6:	781b      	ldrb	r3, [r3, #0]
   12ff8:	3301      	adds	r3, #1
   12ffa:	b2da      	uxtb	r2, r3
   12ffc:	4b21      	ldr	r3, [pc, #132]	; (13084 <vesc_read_all+0x160>)
   12ffe:	701a      	strb	r2, [r3, #0]
					vesc_get_vals();
   13000:	4b27      	ldr	r3, [pc, #156]	; (130a0 <vesc_read_all+0x17c>)
   13002:	4798      	blx	r3
				break;
   13004:	e026      	b.n	13054 <vesc_read_all+0x130>
				case 3:
				if(!READ_VESC_CHUCK){
   13006:	4b27      	ldr	r3, [pc, #156]	; (130a4 <vesc_read_all+0x180>)
   13008:	781b      	ldrb	r3, [r3, #0]
   1300a:	2201      	movs	r2, #1
   1300c:	4053      	eors	r3, r2
   1300e:	b2db      	uxtb	r3, r3
   13010:	2b00      	cmp	r3, #0
   13012:	d006      	beq.n	13022 <vesc_read_all+0xfe>
					read_index++;
   13014:	4b1b      	ldr	r3, [pc, #108]	; (13084 <vesc_read_all+0x160>)
   13016:	781b      	ldrb	r3, [r3, #0]
   13018:	3301      	adds	r3, #1
   1301a:	b2da      	uxtb	r2, r3
   1301c:	4b19      	ldr	r3, [pc, #100]	; (13084 <vesc_read_all+0x160>)
   1301e:	701a      	strb	r2, [r3, #0]
   13020:	e007      	b.n	13032 <vesc_read_all+0x10e>
				} else {
					read_index++;
   13022:	4b18      	ldr	r3, [pc, #96]	; (13084 <vesc_read_all+0x160>)
   13024:	781b      	ldrb	r3, [r3, #0]
   13026:	3301      	adds	r3, #1
   13028:	b2da      	uxtb	r2, r3
   1302a:	4b16      	ldr	r3, [pc, #88]	; (13084 <vesc_read_all+0x160>)
   1302c:	701a      	strb	r2, [r3, #0]
					vesc_get_chuck();
   1302e:	4b1e      	ldr	r3, [pc, #120]	; (130a8 <vesc_read_all+0x184>)
   13030:	4798      	blx	r3
				}
				case 4:
				if(!SEND_VESC_CHUCK){
   13032:	4b1e      	ldr	r3, [pc, #120]	; (130ac <vesc_read_all+0x188>)
   13034:	781b      	ldrb	r3, [r3, #0]
   13036:	2201      	movs	r2, #1
   13038:	4053      	eors	r3, r2
   1303a:	b2db      	uxtb	r3, r3
   1303c:	2b00      	cmp	r3, #0
   1303e:	d003      	beq.n	13048 <vesc_read_all+0x124>
					read_index=0;
   13040:	4b10      	ldr	r3, [pc, #64]	; (13084 <vesc_read_all+0x160>)
   13042:	2200      	movs	r2, #0
   13044:	701a      	strb	r2, [r3, #0]
				} else {
					read_index=0;
					vesc_set_chuck();
				}
				break;
   13046:	e004      	b.n	13052 <vesc_read_all+0x12e>
					read_index=0;
   13048:	4b0e      	ldr	r3, [pc, #56]	; (13084 <vesc_read_all+0x160>)
   1304a:	2200      	movs	r2, #0
   1304c:	701a      	strb	r2, [r3, #0]
					vesc_set_chuck();
   1304e:	4b18      	ldr	r3, [pc, #96]	; (130b0 <vesc_read_all+0x18c>)
   13050:	4798      	blx	r3
				break;
   13052:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	READ_VESC_PWM = false;
   13054:	4b0d      	ldr	r3, [pc, #52]	; (1308c <vesc_read_all+0x168>)
   13056:	2200      	movs	r2, #0
   13058:	701a      	strb	r2, [r3, #0]
	READ_VESC_FW = false;
   1305a:	4b0e      	ldr	r3, [pc, #56]	; (13094 <vesc_read_all+0x170>)
   1305c:	2200      	movs	r2, #0
   1305e:	701a      	strb	r2, [r3, #0]
	READ_VESC_VALS = false;
   13060:	4b0e      	ldr	r3, [pc, #56]	; (1309c <vesc_read_all+0x178>)
   13062:	2200      	movs	r2, #0
   13064:	701a      	strb	r2, [r3, #0]
	READ_VESC_CHUCK = false;
   13066:	4b0f      	ldr	r3, [pc, #60]	; (130a4 <vesc_read_all+0x180>)
   13068:	2200      	movs	r2, #0
   1306a:	701a      	strb	r2, [r3, #0]
}
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	46bd      	mov	sp, r7
   13070:	bd80      	pop	{r7, pc}
   13072:	46c0      	nop			; (mov r8, r8)
   13074:	20000430 	.word	0x20000430
   13078:	200000fc 	.word	0x200000fc
   1307c:	2000042c 	.word	0x2000042c
   13080:	00009fbd 	.word	0x00009fbd
   13084:	200004a4 	.word	0x200004a4
   13088:	0001c918 	.word	0x0001c918
   1308c:	20000431 	.word	0x20000431
   13090:	00012ba9 	.word	0x00012ba9
   13094:	20000435 	.word	0x20000435
   13098:	00012921 	.word	0x00012921
   1309c:	20000434 	.word	0x20000434
   130a0:	000129f9 	.word	0x000129f9
   130a4:	20000432 	.word	0x20000432
   130a8:	00012c91 	.word	0x00012c91
   130ac:	20000433 	.word	0x20000433
   130b0:	00012d69 	.word	0x00012d69

000130b4 <detect_vesc_firmware>:


void detect_vesc_firmware(){
   130b4:	b580      	push	{r7, lr}
   130b6:	af00      	add	r7, sp, #0
	vesc_get_fw_version();
   130b8:	4bc5      	ldr	r3, [pc, #788]	; (133d0 <detect_vesc_firmware+0x31c>)
   130ba:	4798      	blx	r3

	if(latest_vesc_vals.FW_VERSION_MAJOR != 0 || latest_vesc_vals.FW_VERSION_MINOR != 0)
   130bc:	4bc5      	ldr	r3, [pc, #788]	; (133d4 <detect_vesc_firmware+0x320>)
   130be:	2234      	movs	r2, #52	; 0x34
   130c0:	5c9b      	ldrb	r3, [r3, r2]
   130c2:	2b00      	cmp	r3, #0
   130c4:	d105      	bne.n	130d2 <detect_vesc_firmware+0x1e>
   130c6:	4bc3      	ldr	r3, [pc, #780]	; (133d4 <detect_vesc_firmware+0x320>)
   130c8:	2235      	movs	r2, #53	; 0x35
   130ca:	5c9b      	ldrb	r3, [r3, r2]
   130cc:	2b00      	cmp	r3, #0
   130ce:	d100      	bne.n	130d2 <detect_vesc_firmware+0x1e>
   130d0:	e17b      	b.n	133ca <detect_vesc_firmware+0x316>
	{
		ESC_FW_READ = true;
   130d2:	4bc1      	ldr	r3, [pc, #772]	; (133d8 <detect_vesc_firmware+0x324>)
   130d4:	2201      	movs	r2, #1
   130d6:	701a      	strb	r2, [r3, #0]

		// Define the location in which particular values can be found in COMM messages used by each FW
		if((latest_vesc_vals.FW_VERSION_MAJOR == 2 && latest_vesc_vals.FW_VERSION_MINOR <= 18)||
   130d8:	4bbe      	ldr	r3, [pc, #760]	; (133d4 <detect_vesc_firmware+0x320>)
   130da:	2234      	movs	r2, #52	; 0x34
   130dc:	5c9b      	ldrb	r3, [r3, r2]
   130de:	2b02      	cmp	r3, #2
   130e0:	d104      	bne.n	130ec <detect_vesc_firmware+0x38>
   130e2:	4bbc      	ldr	r3, [pc, #752]	; (133d4 <detect_vesc_firmware+0x320>)
   130e4:	2235      	movs	r2, #53	; 0x35
   130e6:	5c9b      	ldrb	r3, [r3, r2]
   130e8:	2b12      	cmp	r3, #18
   130ea:	d909      	bls.n	13100 <detect_vesc_firmware+0x4c>
			(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR <= 6)){ // <= v2.18 || < 3.7
   130ec:	4bb9      	ldr	r3, [pc, #740]	; (133d4 <detect_vesc_firmware+0x320>)
   130ee:	2234      	movs	r2, #52	; 0x34
   130f0:	5c9b      	ldrb	r3, [r3, r2]
		if((latest_vesc_vals.FW_VERSION_MAJOR == 2 && latest_vesc_vals.FW_VERSION_MINOR <= 18)||
   130f2:	2b03      	cmp	r3, #3
   130f4:	d108      	bne.n	13108 <detect_vesc_firmware+0x54>
			(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR <= 6)){ // <= v2.18 || < 3.7
   130f6:	4bb7      	ldr	r3, [pc, #732]	; (133d4 <detect_vesc_firmware+0x320>)
   130f8:	2235      	movs	r2, #53	; 0x35
   130fa:	5c9b      	ldrb	r3, [r3, r2]
   130fc:	2b06      	cmp	r3, #6
   130fe:	d803      	bhi.n	13108 <detect_vesc_firmware+0x54>
			esc_fw = FW_3v6;
   13100:	4bb6      	ldr	r3, [pc, #728]	; (133dc <detect_vesc_firmware+0x328>)
   13102:	2200      	movs	r2, #0
   13104:	701a      	strb	r2, [r3, #0]
   13106:	e03c      	b.n	13182 <detect_vesc_firmware+0xce>
		} else if((latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 7 && latest_vesc_vals.FW_VERSION_MINOR <= 67)||
   13108:	4bb2      	ldr	r3, [pc, #712]	; (133d4 <detect_vesc_firmware+0x320>)
   1310a:	2234      	movs	r2, #52	; 0x34
   1310c:	5c9b      	ldrb	r3, [r3, r2]
   1310e:	2b03      	cmp	r3, #3
   13110:	d109      	bne.n	13126 <detect_vesc_firmware+0x72>
   13112:	4bb0      	ldr	r3, [pc, #704]	; (133d4 <detect_vesc_firmware+0x320>)
   13114:	2235      	movs	r2, #53	; 0x35
   13116:	5c9b      	ldrb	r3, [r3, r2]
   13118:	2b06      	cmp	r3, #6
   1311a:	d904      	bls.n	13126 <detect_vesc_firmware+0x72>
   1311c:	4bad      	ldr	r3, [pc, #692]	; (133d4 <detect_vesc_firmware+0x320>)
   1311e:	2235      	movs	r2, #53	; 0x35
   13120:	5c9b      	ldrb	r3, [r3, r2]
   13122:	2b43      	cmp	r3, #67	; 0x43
   13124:	d913      	bls.n	1314e <detect_vesc_firmware+0x9a>
				(latest_vesc_vals.FW_VERSION_MAJOR == 4 && latest_vesc_vals.FW_VERSION_MINOR >= 0 && latest_vesc_vals.FW_VERSION_MINOR <= 2)||
   13126:	4bab      	ldr	r3, [pc, #684]	; (133d4 <detect_vesc_firmware+0x320>)
   13128:	2234      	movs	r2, #52	; 0x34
   1312a:	5c9b      	ldrb	r3, [r3, r2]
		} else if((latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 7 && latest_vesc_vals.FW_VERSION_MINOR <= 67)||
   1312c:	2b04      	cmp	r3, #4
   1312e:	d104      	bne.n	1313a <detect_vesc_firmware+0x86>
				(latest_vesc_vals.FW_VERSION_MAJOR == 4 && latest_vesc_vals.FW_VERSION_MINOR >= 0 && latest_vesc_vals.FW_VERSION_MINOR <= 2)||
   13130:	4ba8      	ldr	r3, [pc, #672]	; (133d4 <detect_vesc_firmware+0x320>)
   13132:	2235      	movs	r2, #53	; 0x35
   13134:	5c9b      	ldrb	r3, [r3, r2]
   13136:	2b02      	cmp	r3, #2
   13138:	d909      	bls.n	1314e <detect_vesc_firmware+0x9a>
				(latest_vesc_vals.FW_VERSION_MAJOR == 5 && latest_vesc_vals.FW_VERSION_MINOR >= 0 && latest_vesc_vals.FW_VERSION_MINOR <= 2)){ // >= 3.7 && <= 5.1
   1313a:	4ba6      	ldr	r3, [pc, #664]	; (133d4 <detect_vesc_firmware+0x320>)
   1313c:	2234      	movs	r2, #52	; 0x34
   1313e:	5c9b      	ldrb	r3, [r3, r2]
				(latest_vesc_vals.FW_VERSION_MAJOR == 4 && latest_vesc_vals.FW_VERSION_MINOR >= 0 && latest_vesc_vals.FW_VERSION_MINOR <= 2)||
   13140:	2b05      	cmp	r3, #5
   13142:	d108      	bne.n	13156 <detect_vesc_firmware+0xa2>
				(latest_vesc_vals.FW_VERSION_MAJOR == 5 && latest_vesc_vals.FW_VERSION_MINOR >= 0 && latest_vesc_vals.FW_VERSION_MINOR <= 2)){ // >= 3.7 && <= 5.1
   13144:	4ba3      	ldr	r3, [pc, #652]	; (133d4 <detect_vesc_firmware+0x320>)
   13146:	2235      	movs	r2, #53	; 0x35
   13148:	5c9b      	ldrb	r3, [r3, r2]
   1314a:	2b02      	cmp	r3, #2
   1314c:	d803      	bhi.n	13156 <detect_vesc_firmware+0xa2>
			esc_fw = FW_3v7;
   1314e:	4ba3      	ldr	r3, [pc, #652]	; (133dc <detect_vesc_firmware+0x328>)
   13150:	2201      	movs	r2, #1
   13152:	701a      	strb	r2, [r3, #0]
   13154:	e015      	b.n	13182 <detect_vesc_firmware+0xce>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 23){ // Unity
   13156:	4b9f      	ldr	r3, [pc, #636]	; (133d4 <detect_vesc_firmware+0x320>)
   13158:	2234      	movs	r2, #52	; 0x34
   1315a:	5c9b      	ldrb	r3, [r3, r2]
   1315c:	2b17      	cmp	r3, #23
   1315e:	d103      	bne.n	13168 <detect_vesc_firmware+0xb4>
			esc_fw = FW_UNITY;
   13160:	4b9e      	ldr	r3, [pc, #632]	; (133dc <detect_vesc_firmware+0x328>)
   13162:	2202      	movs	r2, #2
   13164:	701a      	strb	r2, [r3, #0]
   13166:	e00c      	b.n	13182 <detect_vesc_firmware+0xce>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 100){ // Ackmaniac
   13168:	4b9a      	ldr	r3, [pc, #616]	; (133d4 <detect_vesc_firmware+0x320>)
   1316a:	2234      	movs	r2, #52	; 0x34
   1316c:	5c9b      	ldrb	r3, [r3, r2]
   1316e:	2b03      	cmp	r3, #3
   13170:	d107      	bne.n	13182 <detect_vesc_firmware+0xce>
   13172:	4b98      	ldr	r3, [pc, #608]	; (133d4 <detect_vesc_firmware+0x320>)
   13174:	2235      	movs	r2, #53	; 0x35
   13176:	5c9b      	ldrb	r3, [r3, r2]
   13178:	2b63      	cmp	r3, #99	; 0x63
   1317a:	d902      	bls.n	13182 <detect_vesc_firmware+0xce>
			esc_fw = FW_ACKMANIAC;
   1317c:	4b97      	ldr	r3, [pc, #604]	; (133dc <detect_vesc_firmware+0x328>)
   1317e:	2203      	movs	r2, #3
   13180:	701a      	strb	r2, [r3, #0]
		}

		if(esc_fw == FW_3v6){ // <= v3.6
   13182:	4b96      	ldr	r3, [pc, #600]	; (133dc <detect_vesc_firmware+0x328>)
   13184:	781b      	ldrb	r3, [r3, #0]
   13186:	2b00      	cmp	r3, #0
   13188:	d171      	bne.n	1326e <detect_vesc_firmware+0x1ba>
			COMM_FW_VERSION = 0;
   1318a:	4b95      	ldr	r3, [pc, #596]	; (133e0 <detect_vesc_firmware+0x32c>)
   1318c:	2200      	movs	r2, #0
   1318e:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
   13190:	4b94      	ldr	r3, [pc, #592]	; (133e4 <detect_vesc_firmware+0x330>)
   13192:	2204      	movs	r2, #4
   13194:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 13;
   13196:	4b94      	ldr	r3, [pc, #592]	; (133e8 <detect_vesc_firmware+0x334>)
   13198:	220d      	movs	r2, #13
   1319a:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 29;
   1319c:	4b93      	ldr	r3, [pc, #588]	; (133ec <detect_vesc_firmware+0x338>)
   1319e:	221d      	movs	r2, #29
   131a0:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 30;
   131a2:	4b93      	ldr	r3, [pc, #588]	; (133f0 <detect_vesc_firmware+0x33c>)
   131a4:	221e      	movs	r2, #30
   131a6:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 32;
   131a8:	4b92      	ldr	r3, [pc, #584]	; (133f4 <detect_vesc_firmware+0x340>)
   131aa:	2220      	movs	r2, #32
   131ac:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 34;
   131ae:	4b92      	ldr	r3, [pc, #584]	; (133f8 <detect_vesc_firmware+0x344>)
   131b0:	2222      	movs	r2, #34	; 0x22
   131b2:	701a      	strb	r2, [r3, #0]
			
			GET_VALUES_FET_TEMP = 1;
   131b4:	4b91      	ldr	r3, [pc, #580]	; (133fc <detect_vesc_firmware+0x348>)
   131b6:	2201      	movs	r2, #1
   131b8:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 15;
   131ba:	4b91      	ldr	r3, [pc, #580]	; (13400 <detect_vesc_firmware+0x34c>)
   131bc:	220f      	movs	r2, #15
   131be:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 19;
   131c0:	4b90      	ldr	r3, [pc, #576]	; (13404 <detect_vesc_firmware+0x350>)
   131c2:	2213      	movs	r2, #19
   131c4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 23;
   131c6:	4b90      	ldr	r3, [pc, #576]	; (13408 <detect_vesc_firmware+0x354>)
   131c8:	2217      	movs	r2, #23
   131ca:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 25;
   131cc:	4b8f      	ldr	r3, [pc, #572]	; (1340c <detect_vesc_firmware+0x358>)
   131ce:	2219      	movs	r2, #25
   131d0:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 29;
   131d2:	4b8f      	ldr	r3, [pc, #572]	; (13410 <detect_vesc_firmware+0x35c>)
   131d4:	221d      	movs	r2, #29
   131d6:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 31;
   131d8:	4b8e      	ldr	r3, [pc, #568]	; (13414 <detect_vesc_firmware+0x360>)
   131da:	221f      	movs	r2, #31
   131dc:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 35;
   131de:	4b8e      	ldr	r3, [pc, #568]	; (13418 <detect_vesc_firmware+0x364>)
   131e0:	2223      	movs	r2, #35	; 0x23
   131e2:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 39;
   131e4:	4b8d      	ldr	r3, [pc, #564]	; (1341c <detect_vesc_firmware+0x368>)
   131e6:	2227      	movs	r2, #39	; 0x27
   131e8:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 43;
   131ea:	4b8d      	ldr	r3, [pc, #564]	; (13420 <detect_vesc_firmware+0x36c>)
   131ec:	222b      	movs	r2, #43	; 0x2b
   131ee:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 47;
   131f0:	4b8c      	ldr	r3, [pc, #560]	; (13424 <detect_vesc_firmware+0x370>)
   131f2:	222f      	movs	r2, #47	; 0x2f
   131f4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 55;
   131f6:	4b8c      	ldr	r3, [pc, #560]	; (13428 <detect_vesc_firmware+0x374>)
   131f8:	2237      	movs	r2, #55	; 0x37
   131fa:	701a      	strb	r2, [r3, #0]
			
			GET_MCCONF_MTR_CURR_MAX = 5;
   131fc:	4b8b      	ldr	r3, [pc, #556]	; (1342c <detect_vesc_firmware+0x378>)
   131fe:	2205      	movs	r2, #5
   13200:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
   13202:	4b8b      	ldr	r3, [pc, #556]	; (13430 <detect_vesc_firmware+0x37c>)
   13204:	2209      	movs	r2, #9
   13206:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
   13208:	4b8a      	ldr	r3, [pc, #552]	; (13434 <detect_vesc_firmware+0x380>)
   1320a:	220d      	movs	r2, #13
   1320c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
   1320e:	4b8a      	ldr	r3, [pc, #552]	; (13438 <detect_vesc_firmware+0x384>)
   13210:	2211      	movs	r2, #17
   13212:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
   13214:	4b89      	ldr	r3, [pc, #548]	; (1343c <detect_vesc_firmware+0x388>)
   13216:	2215      	movs	r2, #21
   13218:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
   1321a:	4b89      	ldr	r3, [pc, #548]	; (13440 <detect_vesc_firmware+0x38c>)
   1321c:	2219      	movs	r2, #25
   1321e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
   13220:	4b88      	ldr	r3, [pc, #544]	; (13444 <detect_vesc_firmware+0x390>)
   13222:	221d      	movs	r2, #29
   13224:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 33;
   13226:	4b88      	ldr	r3, [pc, #544]	; (13448 <detect_vesc_firmware+0x394>)
   13228:	2221      	movs	r2, #33	; 0x21
   1322a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 37;
   1322c:	4b87      	ldr	r3, [pc, #540]	; (1344c <detect_vesc_firmware+0x398>)
   1322e:	2225      	movs	r2, #37	; 0x25
   13230:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 41;
   13232:	4b87      	ldr	r3, [pc, #540]	; (13450 <detect_vesc_firmware+0x39c>)
   13234:	2229      	movs	r2, #41	; 0x29
   13236:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 45;
   13238:	4b86      	ldr	r3, [pc, #536]	; (13454 <detect_vesc_firmware+0x3a0>)
   1323a:	222d      	movs	r2, #45	; 0x2d
   1323c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 49;
   1323e:	4b86      	ldr	r3, [pc, #536]	; (13458 <detect_vesc_firmware+0x3a4>)
   13240:	2231      	movs	r2, #49	; 0x31
   13242:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 53;
   13244:	4b85      	ldr	r3, [pc, #532]	; (1345c <detect_vesc_firmware+0x3a8>)
   13246:	2235      	movs	r2, #53	; 0x35
   13248:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 59;
   1324a:	4b85      	ldr	r3, [pc, #532]	; (13460 <detect_vesc_firmware+0x3ac>)
   1324c:	223b      	movs	r2, #59	; 0x3b
   1324e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 63;
   13250:	4b84      	ldr	r3, [pc, #528]	; (13464 <detect_vesc_firmware+0x3b0>)
   13252:	223f      	movs	r2, #63	; 0x3f
   13254:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 67;
   13256:	4b84      	ldr	r3, [pc, #528]	; (13468 <detect_vesc_firmware+0x3b4>)
   13258:	2243      	movs	r2, #67	; 0x43
   1325a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 71;
   1325c:	4b83      	ldr	r3, [pc, #524]	; (1346c <detect_vesc_firmware+0x3b8>)
   1325e:	2247      	movs	r2, #71	; 0x47
   13260:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 75;
   13262:	4b83      	ldr	r3, [pc, #524]	; (13470 <detect_vesc_firmware+0x3bc>)
   13264:	224b      	movs	r2, #75	; 0x4b
   13266:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 79;
   13268:	4b82      	ldr	r3, [pc, #520]	; (13474 <detect_vesc_firmware+0x3c0>)
   1326a:	224f      	movs	r2, #79	; 0x4f
   1326c:	701a      	strb	r2, [r3, #0]
		}
		if(esc_fw == FW_3v7 || esc_fw == FW_UNITY || esc_fw == FW_ACKMANIAC){ // >= 3.7 && <= 5.2 || AckManiac || Unity
   1326e:	4b5b      	ldr	r3, [pc, #364]	; (133dc <detect_vesc_firmware+0x328>)
   13270:	781b      	ldrb	r3, [r3, #0]
   13272:	2b01      	cmp	r3, #1
   13274:	d007      	beq.n	13286 <detect_vesc_firmware+0x1d2>
   13276:	4b59      	ldr	r3, [pc, #356]	; (133dc <detect_vesc_firmware+0x328>)
   13278:	781b      	ldrb	r3, [r3, #0]
   1327a:	2b02      	cmp	r3, #2
   1327c:	d003      	beq.n	13286 <detect_vesc_firmware+0x1d2>
   1327e:	4b57      	ldr	r3, [pc, #348]	; (133dc <detect_vesc_firmware+0x328>)
   13280:	781b      	ldrb	r3, [r3, #0]
   13282:	2b03      	cmp	r3, #3
   13284:	d14d      	bne.n	13322 <detect_vesc_firmware+0x26e>
			COMM_FW_VERSION = 0;
   13286:	4b56      	ldr	r3, [pc, #344]	; (133e0 <detect_vesc_firmware+0x32c>)
   13288:	2200      	movs	r2, #0
   1328a:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
   1328c:	4b55      	ldr	r3, [pc, #340]	; (133e4 <detect_vesc_firmware+0x330>)
   1328e:	2204      	movs	r2, #4
   13290:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
   13292:	4b55      	ldr	r3, [pc, #340]	; (133e8 <detect_vesc_firmware+0x334>)
   13294:	220e      	movs	r2, #14
   13296:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
   13298:	4b54      	ldr	r3, [pc, #336]	; (133ec <detect_vesc_firmware+0x338>)
   1329a:	221e      	movs	r2, #30
   1329c:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
   1329e:	4b54      	ldr	r3, [pc, #336]	; (133f0 <detect_vesc_firmware+0x33c>)
   132a0:	221f      	movs	r2, #31
   132a2:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
   132a4:	4b53      	ldr	r3, [pc, #332]	; (133f4 <detect_vesc_firmware+0x340>)
   132a6:	2221      	movs	r2, #33	; 0x21
   132a8:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
   132aa:	4b53      	ldr	r3, [pc, #332]	; (133f8 <detect_vesc_firmware+0x344>)
   132ac:	2223      	movs	r2, #35	; 0x23
   132ae:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
   132b0:	4b5e      	ldr	r3, [pc, #376]	; (1342c <detect_vesc_firmware+0x378>)
   132b2:	2205      	movs	r2, #5
   132b4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
   132b6:	4b5e      	ldr	r3, [pc, #376]	; (13430 <detect_vesc_firmware+0x37c>)
   132b8:	2209      	movs	r2, #9
   132ba:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
   132bc:	4b5d      	ldr	r3, [pc, #372]	; (13434 <detect_vesc_firmware+0x380>)
   132be:	220d      	movs	r2, #13
   132c0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
   132c2:	4b5d      	ldr	r3, [pc, #372]	; (13438 <detect_vesc_firmware+0x384>)
   132c4:	2211      	movs	r2, #17
   132c6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
   132c8:	4b5c      	ldr	r3, [pc, #368]	; (1343c <detect_vesc_firmware+0x388>)
   132ca:	2215      	movs	r2, #21
   132cc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
   132ce:	4b5c      	ldr	r3, [pc, #368]	; (13440 <detect_vesc_firmware+0x38c>)
   132d0:	2219      	movs	r2, #25
   132d2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
   132d4:	4b5b      	ldr	r3, [pc, #364]	; (13444 <detect_vesc_firmware+0x390>)
   132d6:	221d      	movs	r2, #29
   132d8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
   132da:	4b5b      	ldr	r3, [pc, #364]	; (13448 <detect_vesc_firmware+0x394>)
   132dc:	2225      	movs	r2, #37	; 0x25
   132de:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
   132e0:	4b5a      	ldr	r3, [pc, #360]	; (1344c <detect_vesc_firmware+0x398>)
   132e2:	2229      	movs	r2, #41	; 0x29
   132e4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
   132e6:	4b5a      	ldr	r3, [pc, #360]	; (13450 <detect_vesc_firmware+0x39c>)
   132e8:	222d      	movs	r2, #45	; 0x2d
   132ea:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
   132ec:	4b59      	ldr	r3, [pc, #356]	; (13454 <detect_vesc_firmware+0x3a0>)
   132ee:	2231      	movs	r2, #49	; 0x31
   132f0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
   132f2:	4b59      	ldr	r3, [pc, #356]	; (13458 <detect_vesc_firmware+0x3a4>)
   132f4:	2235      	movs	r2, #53	; 0x35
   132f6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
   132f8:	4b58      	ldr	r3, [pc, #352]	; (1345c <detect_vesc_firmware+0x3a8>)
   132fa:	2239      	movs	r2, #57	; 0x39
   132fc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
   132fe:	4b58      	ldr	r3, [pc, #352]	; (13460 <detect_vesc_firmware+0x3ac>)
   13300:	223e      	movs	r2, #62	; 0x3e
   13302:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
   13304:	4b57      	ldr	r3, [pc, #348]	; (13464 <detect_vesc_firmware+0x3b0>)
   13306:	2242      	movs	r2, #66	; 0x42
   13308:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
   1330a:	4b57      	ldr	r3, [pc, #348]	; (13468 <detect_vesc_firmware+0x3b4>)
   1330c:	2246      	movs	r2, #70	; 0x46
   1330e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
   13310:	4b56      	ldr	r3, [pc, #344]	; (1346c <detect_vesc_firmware+0x3b8>)
   13312:	224a      	movs	r2, #74	; 0x4a
   13314:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
   13316:	4b56      	ldr	r3, [pc, #344]	; (13470 <detect_vesc_firmware+0x3bc>)
   13318:	2252      	movs	r2, #82	; 0x52
   1331a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
   1331c:	4b55      	ldr	r3, [pc, #340]	; (13474 <detect_vesc_firmware+0x3c0>)
   1331e:	2256      	movs	r2, #86	; 0x56
   13320:	701a      	strb	r2, [r3, #0]
		}
		
		if(esc_fw == FW_3v7 || esc_fw == FW_ACKMANIAC){ // >= 3.7 && <= 5.2 || AckManiac
   13322:	4b2e      	ldr	r3, [pc, #184]	; (133dc <detect_vesc_firmware+0x328>)
   13324:	781b      	ldrb	r3, [r3, #0]
   13326:	2b01      	cmp	r3, #1
   13328:	d003      	beq.n	13332 <detect_vesc_firmware+0x27e>
   1332a:	4b2c      	ldr	r3, [pc, #176]	; (133dc <detect_vesc_firmware+0x328>)
   1332c:	781b      	ldrb	r3, [r3, #0]
   1332e:	2b03      	cmp	r3, #3
   13330:	d123      	bne.n	1337a <detect_vesc_firmware+0x2c6>
			GET_VALUES_FET_TEMP = 1;
   13332:	4b32      	ldr	r3, [pc, #200]	; (133fc <detect_vesc_firmware+0x348>)
   13334:	2201      	movs	r2, #1
   13336:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
   13338:	4b31      	ldr	r3, [pc, #196]	; (13400 <detect_vesc_firmware+0x34c>)
   1333a:	2205      	movs	r2, #5
   1333c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
   1333e:	4b31      	ldr	r3, [pc, #196]	; (13404 <detect_vesc_firmware+0x350>)
   13340:	2209      	movs	r2, #9
   13342:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
   13344:	4b30      	ldr	r3, [pc, #192]	; (13408 <detect_vesc_firmware+0x354>)
   13346:	2215      	movs	r2, #21
   13348:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
   1334a:	4b30      	ldr	r3, [pc, #192]	; (1340c <detect_vesc_firmware+0x358>)
   1334c:	2217      	movs	r2, #23
   1334e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
   13350:	4b2f      	ldr	r3, [pc, #188]	; (13410 <detect_vesc_firmware+0x35c>)
   13352:	221b      	movs	r2, #27
   13354:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
   13356:	4b2f      	ldr	r3, [pc, #188]	; (13414 <detect_vesc_firmware+0x360>)
   13358:	221d      	movs	r2, #29
   1335a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
   1335c:	4b2e      	ldr	r3, [pc, #184]	; (13418 <detect_vesc_firmware+0x364>)
   1335e:	2221      	movs	r2, #33	; 0x21
   13360:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
   13362:	4b2e      	ldr	r3, [pc, #184]	; (1341c <detect_vesc_firmware+0x368>)
   13364:	2225      	movs	r2, #37	; 0x25
   13366:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
   13368:	4b2d      	ldr	r3, [pc, #180]	; (13420 <detect_vesc_firmware+0x36c>)
   1336a:	2229      	movs	r2, #41	; 0x29
   1336c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
   1336e:	4b2d      	ldr	r3, [pc, #180]	; (13424 <detect_vesc_firmware+0x370>)
   13370:	222d      	movs	r2, #45	; 0x2d
   13372:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
   13374:	4b2c      	ldr	r3, [pc, #176]	; (13428 <detect_vesc_firmware+0x374>)
   13376:	2235      	movs	r2, #53	; 0x35
   13378:	701a      	strb	r2, [r3, #0]
		}
		
		if(esc_fw == FW_UNITY){ // Unity
   1337a:	4b18      	ldr	r3, [pc, #96]	; (133dc <detect_vesc_firmware+0x328>)
   1337c:	781b      	ldrb	r3, [r3, #0]
   1337e:	2b02      	cmp	r3, #2
   13380:	d123      	bne.n	133ca <detect_vesc_firmware+0x316>
			GET_VALUES_FET_TEMP = 1;
   13382:	4b1e      	ldr	r3, [pc, #120]	; (133fc <detect_vesc_firmware+0x348>)
   13384:	2201      	movs	r2, #1
   13386:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 9;
   13388:	4b1d      	ldr	r3, [pc, #116]	; (13400 <detect_vesc_firmware+0x34c>)
   1338a:	2209      	movs	r2, #9
   1338c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 17;
   1338e:	4b1d      	ldr	r3, [pc, #116]	; (13404 <detect_vesc_firmware+0x350>)
   13390:	2211      	movs	r2, #17
   13392:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 37;
   13394:	4b1c      	ldr	r3, [pc, #112]	; (13408 <detect_vesc_firmware+0x354>)
   13396:	2225      	movs	r2, #37	; 0x25
   13398:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 41;
   1339a:	4b1c      	ldr	r3, [pc, #112]	; (1340c <detect_vesc_firmware+0x358>)
   1339c:	2229      	movs	r2, #41	; 0x29
   1339e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 49;
   133a0:	4b1b      	ldr	r3, [pc, #108]	; (13410 <detect_vesc_firmware+0x35c>)
   133a2:	2231      	movs	r2, #49	; 0x31
   133a4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 51;
   133a6:	4b1b      	ldr	r3, [pc, #108]	; (13414 <detect_vesc_firmware+0x360>)
   133a8:	2233      	movs	r2, #51	; 0x33
   133aa:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 55;
   133ac:	4b1a      	ldr	r3, [pc, #104]	; (13418 <detect_vesc_firmware+0x364>)
   133ae:	2237      	movs	r2, #55	; 0x37
   133b0:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 59;
   133b2:	4b1a      	ldr	r3, [pc, #104]	; (1341c <detect_vesc_firmware+0x368>)
   133b4:	223b      	movs	r2, #59	; 0x3b
   133b6:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 63;
   133b8:	4b19      	ldr	r3, [pc, #100]	; (13420 <detect_vesc_firmware+0x36c>)
   133ba:	223f      	movs	r2, #63	; 0x3f
   133bc:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 67;
   133be:	4b19      	ldr	r3, [pc, #100]	; (13424 <detect_vesc_firmware+0x370>)
   133c0:	2243      	movs	r2, #67	; 0x43
   133c2:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 83;
   133c4:	4b18      	ldr	r3, [pc, #96]	; (13428 <detect_vesc_firmware+0x374>)
   133c6:	2253      	movs	r2, #83	; 0x53
   133c8:	701a      	strb	r2, [r3, #0]
		}
	}
}
   133ca:	46c0      	nop			; (mov r8, r8)
   133cc:	46bd      	mov	sp, r7
   133ce:	bd80      	pop	{r7, pc}
   133d0:	00012921 	.word	0x00012921
   133d4:	20000e38 	.word	0x20000e38
   133d8:	200003c9 	.word	0x200003c9
   133dc:	200000e3 	.word	0x200000e3
   133e0:	20000404 	.word	0x20000404
   133e4:	20000405 	.word	0x20000405
   133e8:	20000406 	.word	0x20000406
   133ec:	20000407 	.word	0x20000407
   133f0:	20000408 	.word	0x20000408
   133f4:	20000409 	.word	0x20000409
   133f8:	2000040a 	.word	0x2000040a
   133fc:	2000040b 	.word	0x2000040b
   13400:	2000040c 	.word	0x2000040c
   13404:	2000040d 	.word	0x2000040d
   13408:	2000040e 	.word	0x2000040e
   1340c:	2000040f 	.word	0x2000040f
   13410:	20000410 	.word	0x20000410
   13414:	20000411 	.word	0x20000411
   13418:	20000412 	.word	0x20000412
   1341c:	20000413 	.word	0x20000413
   13420:	20000414 	.word	0x20000414
   13424:	20000415 	.word	0x20000415
   13428:	20000416 	.word	0x20000416
   1342c:	20000417 	.word	0x20000417
   13430:	20000418 	.word	0x20000418
   13434:	20000419 	.word	0x20000419
   13438:	2000041a 	.word	0x2000041a
   1343c:	2000041b 	.word	0x2000041b
   13440:	2000041c 	.word	0x2000041c
   13444:	2000041d 	.word	0x2000041d
   13448:	2000041e 	.word	0x2000041e
   1344c:	2000041f 	.word	0x2000041f
   13450:	20000420 	.word	0x20000420
   13454:	20000421 	.word	0x20000421
   13458:	20000422 	.word	0x20000422
   1345c:	20000423 	.word	0x20000423
   13460:	20000424 	.word	0x20000424
   13464:	20000425 	.word	0x20000425
   13468:	20000426 	.word	0x20000426
   1346c:	20000427 	.word	0x20000427
   13470:	20000428 	.word	0x20000428
   13474:	20000429 	.word	0x20000429

00013478 <CHECK_BUFFER>:

inline bool CHECK_BUFFER(uint8_t *buf){
   13478:	b580      	push	{r7, lr}
   1347a:	b082      	sub	sp, #8
   1347c:	af00      	add	r7, sp, #0
   1347e:	6078      	str	r0, [r7, #4]
	return (((buf[0] == 0x2) && (buf[buf[1]+4] == 0x3)) || ((buf[0] == 0x3) && (buf[((buf[1]<<8)|buf[2])+5] == 0x3)));
   13480:	687b      	ldr	r3, [r7, #4]
   13482:	781b      	ldrb	r3, [r3, #0]
   13484:	2b02      	cmp	r3, #2
   13486:	d108      	bne.n	1349a <CHECK_BUFFER+0x22>
   13488:	687b      	ldr	r3, [r7, #4]
   1348a:	3301      	adds	r3, #1
   1348c:	781b      	ldrb	r3, [r3, #0]
   1348e:	3304      	adds	r3, #4
   13490:	687a      	ldr	r2, [r7, #4]
   13492:	18d3      	adds	r3, r2, r3
   13494:	781b      	ldrb	r3, [r3, #0]
   13496:	2b03      	cmp	r3, #3
   13498:	d011      	beq.n	134be <CHECK_BUFFER+0x46>
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	781b      	ldrb	r3, [r3, #0]
   1349e:	2b03      	cmp	r3, #3
   134a0:	d10f      	bne.n	134c2 <CHECK_BUFFER+0x4a>
   134a2:	687b      	ldr	r3, [r7, #4]
   134a4:	3301      	adds	r3, #1
   134a6:	781b      	ldrb	r3, [r3, #0]
   134a8:	021b      	lsls	r3, r3, #8
   134aa:	687a      	ldr	r2, [r7, #4]
   134ac:	3202      	adds	r2, #2
   134ae:	7812      	ldrb	r2, [r2, #0]
   134b0:	4313      	orrs	r3, r2
   134b2:	3305      	adds	r3, #5
   134b4:	687a      	ldr	r2, [r7, #4]
   134b6:	18d3      	adds	r3, r2, r3
   134b8:	781b      	ldrb	r3, [r3, #0]
   134ba:	2b03      	cmp	r3, #3
   134bc:	d101      	bne.n	134c2 <CHECK_BUFFER+0x4a>
   134be:	2301      	movs	r3, #1
   134c0:	e000      	b.n	134c4 <CHECK_BUFFER+0x4c>
   134c2:	2300      	movs	r3, #0
   134c4:	1c1a      	adds	r2, r3, #0
   134c6:	2301      	movs	r3, #1
   134c8:	4013      	ands	r3, r2
   134ca:	b2db      	uxtb	r3, r3
}
   134cc:	0018      	movs	r0, r3
   134ce:	46bd      	mov	sp, r7
   134d0:	b002      	add	sp, #8
   134d2:	bd80      	pop	{r7, pc}

000134d4 <read_vesc_packet>:

void read_vesc_packet(void){
   134d4:	b590      	push	{r4, r7, lr}
   134d6:	b083      	sub	sp, #12
   134d8:	af00      	add	r7, sp, #0
	if(CHECK_BUFFER(vesc_USART_read_buffer)){
   134da:	4b5f      	ldr	r3, [pc, #380]	; (13658 <read_vesc_packet+0x184>)
   134dc:	0018      	movs	r0, r3
   134de:	4b5f      	ldr	r3, [pc, #380]	; (1365c <read_vesc_packet+0x188>)
   134e0:	4798      	blx	r3
   134e2:	1e03      	subs	r3, r0, #0
   134e4:	d100      	bne.n	134e8 <read_vesc_packet+0x14>
   134e6:	e082      	b.n	135ee <read_vesc_packet+0x11a>
		VESC_PACKET_RECIEVED = true;
   134e8:	4b5d      	ldr	r3, [pc, #372]	; (13660 <read_vesc_packet+0x18c>)
   134ea:	2201      	movs	r2, #1
   134ec:	701a      	strb	r2, [r3, #0]

		if(vesc_USART_read_buffer[0] == 0x2){
   134ee:	4b5a      	ldr	r3, [pc, #360]	; (13658 <read_vesc_packet+0x184>)
   134f0:	781b      	ldrb	r3, [r3, #0]
   134f2:	2b02      	cmp	r3, #2
   134f4:	d11e      	bne.n	13534 <read_vesc_packet+0x60>
			packet_len = vesc_USART_read_buffer[1];
   134f6:	4b58      	ldr	r3, [pc, #352]	; (13658 <read_vesc_packet+0x184>)
   134f8:	785b      	ldrb	r3, [r3, #1]
   134fa:	b29a      	uxth	r2, r3
   134fc:	4b59      	ldr	r3, [pc, #356]	; (13664 <read_vesc_packet+0x190>)
   134fe:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+2,packet_len);
   13500:	4959      	ldr	r1, [pc, #356]	; (13668 <read_vesc_packet+0x194>)
   13502:	4b58      	ldr	r3, [pc, #352]	; (13664 <read_vesc_packet+0x190>)
   13504:	881b      	ldrh	r3, [r3, #0]
   13506:	001a      	movs	r2, r3
   13508:	4b58      	ldr	r3, [pc, #352]	; (1366c <read_vesc_packet+0x198>)
   1350a:	0018      	movs	r0, r3
   1350c:	4b58      	ldr	r3, [pc, #352]	; (13670 <read_vesc_packet+0x19c>)
   1350e:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+2];
   13510:	4b54      	ldr	r3, [pc, #336]	; (13664 <read_vesc_packet+0x190>)
   13512:	881b      	ldrh	r3, [r3, #0]
   13514:	3302      	adds	r3, #2
   13516:	4a50      	ldr	r2, [pc, #320]	; (13658 <read_vesc_packet+0x184>)
   13518:	5cd1      	ldrb	r1, [r2, r3]
   1351a:	4b56      	ldr	r3, [pc, #344]	; (13674 <read_vesc_packet+0x1a0>)
   1351c:	4a56      	ldr	r2, [pc, #344]	; (13678 <read_vesc_packet+0x1a4>)
   1351e:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+3];
   13520:	4b50      	ldr	r3, [pc, #320]	; (13664 <read_vesc_packet+0x190>)
   13522:	881b      	ldrh	r3, [r3, #0]
   13524:	3303      	adds	r3, #3
   13526:	4a4c      	ldr	r2, [pc, #304]	; (13658 <read_vesc_packet+0x184>)
   13528:	5cd1      	ldrb	r1, [r2, r3]
   1352a:	4a52      	ldr	r2, [pc, #328]	; (13674 <read_vesc_packet+0x1a0>)
   1352c:	2381      	movs	r3, #129	; 0x81
   1352e:	009b      	lsls	r3, r3, #2
   13530:	54d1      	strb	r1, [r2, r3]
   13532:	e024      	b.n	1357e <read_vesc_packet+0xaa>
		} else{
			packet_len = ((vesc_USART_read_buffer[1]<<8)|vesc_USART_read_buffer[2]);
   13534:	4b48      	ldr	r3, [pc, #288]	; (13658 <read_vesc_packet+0x184>)
   13536:	785b      	ldrb	r3, [r3, #1]
   13538:	021b      	lsls	r3, r3, #8
   1353a:	b21a      	sxth	r2, r3
   1353c:	4b46      	ldr	r3, [pc, #280]	; (13658 <read_vesc_packet+0x184>)
   1353e:	789b      	ldrb	r3, [r3, #2]
   13540:	b21b      	sxth	r3, r3
   13542:	4313      	orrs	r3, r2
   13544:	b21b      	sxth	r3, r3
   13546:	b29a      	uxth	r2, r3
   13548:	4b46      	ldr	r3, [pc, #280]	; (13664 <read_vesc_packet+0x190>)
   1354a:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+3,packet_len);
   1354c:	494b      	ldr	r1, [pc, #300]	; (1367c <read_vesc_packet+0x1a8>)
   1354e:	4b45      	ldr	r3, [pc, #276]	; (13664 <read_vesc_packet+0x190>)
   13550:	881b      	ldrh	r3, [r3, #0]
   13552:	001a      	movs	r2, r3
   13554:	4b45      	ldr	r3, [pc, #276]	; (1366c <read_vesc_packet+0x198>)
   13556:	0018      	movs	r0, r3
   13558:	4b45      	ldr	r3, [pc, #276]	; (13670 <read_vesc_packet+0x19c>)
   1355a:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+3];
   1355c:	4b41      	ldr	r3, [pc, #260]	; (13664 <read_vesc_packet+0x190>)
   1355e:	881b      	ldrh	r3, [r3, #0]
   13560:	3303      	adds	r3, #3
   13562:	4a3d      	ldr	r2, [pc, #244]	; (13658 <read_vesc_packet+0x184>)
   13564:	5cd1      	ldrb	r1, [r2, r3]
   13566:	4b43      	ldr	r3, [pc, #268]	; (13674 <read_vesc_packet+0x1a0>)
   13568:	4a43      	ldr	r2, [pc, #268]	; (13678 <read_vesc_packet+0x1a4>)
   1356a:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+4];
   1356c:	4b3d      	ldr	r3, [pc, #244]	; (13664 <read_vesc_packet+0x190>)
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	3304      	adds	r3, #4
   13572:	4a39      	ldr	r2, [pc, #228]	; (13658 <read_vesc_packet+0x184>)
   13574:	5cd1      	ldrb	r1, [r2, r3]
   13576:	4a3f      	ldr	r2, [pc, #252]	; (13674 <read_vesc_packet+0x1a0>)
   13578:	2381      	movs	r3, #129	; 0x81
   1357a:	009b      	lsls	r3, r3, #2
   1357c:	54d1      	strb	r1, [r2, r3]
		}
		
		// Check if the message was corrupted
		uint16_t crc_check = crc16(vesc_revieve_packet.payload, packet_len);
   1357e:	4b39      	ldr	r3, [pc, #228]	; (13664 <read_vesc_packet+0x190>)
   13580:	881a      	ldrh	r2, [r3, #0]
   13582:	1dbc      	adds	r4, r7, #6
   13584:	4b39      	ldr	r3, [pc, #228]	; (1366c <read_vesc_packet+0x198>)
   13586:	0011      	movs	r1, r2
   13588:	0018      	movs	r0, r3
   1358a:	4b3d      	ldr	r3, [pc, #244]	; (13680 <read_vesc_packet+0x1ac>)
   1358c:	4798      	blx	r3
   1358e:	0003      	movs	r3, r0
   13590:	8023      	strh	r3, [r4, #0]
		if(crc_check != (uint16_t)((vesc_revieve_packet.crc[0]<<8)|vesc_revieve_packet.crc[1])){
   13592:	4b38      	ldr	r3, [pc, #224]	; (13674 <read_vesc_packet+0x1a0>)
   13594:	4a38      	ldr	r2, [pc, #224]	; (13678 <read_vesc_packet+0x1a4>)
   13596:	5c9b      	ldrb	r3, [r3, r2]
   13598:	021b      	lsls	r3, r3, #8
   1359a:	b21a      	sxth	r2, r3
   1359c:	4935      	ldr	r1, [pc, #212]	; (13674 <read_vesc_packet+0x1a0>)
   1359e:	2381      	movs	r3, #129	; 0x81
   135a0:	009b      	lsls	r3, r3, #2
   135a2:	5ccb      	ldrb	r3, [r1, r3]
   135a4:	b21b      	sxth	r3, r3
   135a6:	4313      	orrs	r3, r2
   135a8:	b21b      	sxth	r3, r3
   135aa:	b29b      	uxth	r3, r3
   135ac:	1dba      	adds	r2, r7, #6
   135ae:	8812      	ldrh	r2, [r2, #0]
   135b0:	429a      	cmp	r2, r3
   135b2:	d002      	beq.n	135ba <read_vesc_packet+0xe6>
			//ERROR_LEDs(ERROR_TEAL);
			VESC_PACKET_RECIEVED = false; // dont handle the packet if it was
   135b4:	4b2a      	ldr	r3, [pc, #168]	; (13660 <read_vesc_packet+0x18c>)
   135b6:	2200      	movs	r2, #0
   135b8:	701a      	strb	r2, [r3, #0]
		}
		
		vesc_usart_time = millis();
   135ba:	4b32      	ldr	r3, [pc, #200]	; (13684 <read_vesc_packet+0x1b0>)
   135bc:	4798      	blx	r3
   135be:	0002      	movs	r2, r0
   135c0:	4b31      	ldr	r3, [pc, #196]	; (13688 <read_vesc_packet+0x1b4>)
   135c2:	601a      	str	r2, [r3, #0]
		HOLD_FOR_REPLY = false;
   135c4:	4b31      	ldr	r3, [pc, #196]	; (1368c <read_vesc_packet+0x1b8>)
   135c6:	2200      	movs	r2, #0
   135c8:	701a      	strb	r2, [r3, #0]
		
		memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6);
   135ca:	4a31      	ldr	r2, [pc, #196]	; (13690 <read_vesc_packet+0x1bc>)
   135cc:	4b22      	ldr	r3, [pc, #136]	; (13658 <read_vesc_packet+0x184>)
   135ce:	2100      	movs	r1, #0
   135d0:	0018      	movs	r0, r3
   135d2:	4b30      	ldr	r3, [pc, #192]	; (13694 <read_vesc_packet+0x1c0>)
   135d4:	4798      	blx	r3
		//Stop listening to the ESC UART
		usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
   135d6:	4b30      	ldr	r3, [pc, #192]	; (13698 <read_vesc_packet+0x1c4>)
   135d8:	2100      	movs	r1, #0
   135da:	0018      	movs	r0, r3
   135dc:	4b2f      	ldr	r3, [pc, #188]	; (1369c <read_vesc_packet+0x1c8>)
   135de:	4798      	blx	r3
		// Start listening to the ESC UART
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   135e0:	4a2b      	ldr	r2, [pc, #172]	; (13690 <read_vesc_packet+0x1bc>)
   135e2:	491d      	ldr	r1, [pc, #116]	; (13658 <read_vesc_packet+0x184>)
   135e4:	4b2c      	ldr	r3, [pc, #176]	; (13698 <read_vesc_packet+0x1c4>)
   135e6:	0018      	movs	r0, r3
   135e8:	4b2d      	ldr	r3, [pc, #180]	; (136a0 <read_vesc_packet+0x1cc>)
   135ea:	4798      	blx	r3
   135ec:	e029      	b.n	13642 <read_vesc_packet+0x16e>
	} else if(CHECK_FOR_NOISE_ESC(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6, &ESC_noise_timer)){
   135ee:	4b2d      	ldr	r3, [pc, #180]	; (136a4 <read_vesc_packet+0x1d0>)
   135f0:	4a27      	ldr	r2, [pc, #156]	; (13690 <read_vesc_packet+0x1bc>)
   135f2:	4919      	ldr	r1, [pc, #100]	; (13658 <read_vesc_packet+0x184>)
   135f4:	4828      	ldr	r0, [pc, #160]	; (13698 <read_vesc_packet+0x1c4>)
   135f6:	4c2c      	ldr	r4, [pc, #176]	; (136a8 <read_vesc_packet+0x1d4>)
   135f8:	47a0      	blx	r4
   135fa:	1e03      	subs	r3, r0, #0
   135fc:	d021      	beq.n	13642 <read_vesc_packet+0x16e>
		//Stop listening to the BLE UART
		usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
   135fe:	4b26      	ldr	r3, [pc, #152]	; (13698 <read_vesc_packet+0x1c4>)
   13600:	2100      	movs	r1, #0
   13602:	0018      	movs	r0, r3
   13604:	4b25      	ldr	r3, [pc, #148]	; (1369c <read_vesc_packet+0x1c8>)
   13606:	4798      	blx	r3
		memset(vesc_USART_read_buffer, 0, MAX_PAYLOAD_LEN+6);
   13608:	4a21      	ldr	r2, [pc, #132]	; (13690 <read_vesc_packet+0x1bc>)
   1360a:	4b13      	ldr	r3, [pc, #76]	; (13658 <read_vesc_packet+0x184>)
   1360c:	2100      	movs	r1, #0
   1360e:	0018      	movs	r0, r3
   13610:	4b20      	ldr	r3, [pc, #128]	; (13694 <read_vesc_packet+0x1c0>)
   13612:	4798      	blx	r3
		uint32_t temp_timer = millis();
   13614:	4b1b      	ldr	r3, [pc, #108]	; (13684 <read_vesc_packet+0x1b0>)
   13616:	4798      	blx	r3
   13618:	0003      	movs	r3, r0
   1361a:	603b      	str	r3, [r7, #0]
		while(!check_timer_expired(&temp_timer, 10)){}
   1361c:	46c0      	nop			; (mov r8, r8)
   1361e:	003b      	movs	r3, r7
   13620:	210a      	movs	r1, #10
   13622:	0018      	movs	r0, r3
   13624:	4b21      	ldr	r3, [pc, #132]	; (136ac <read_vesc_packet+0x1d8>)
   13626:	4798      	blx	r3
   13628:	0003      	movs	r3, r0
   1362a:	001a      	movs	r2, r3
   1362c:	2301      	movs	r3, #1
   1362e:	4053      	eors	r3, r2
   13630:	b2db      	uxtb	r3, r3
   13632:	2b00      	cmp	r3, #0
   13634:	d1f3      	bne.n	1361e <read_vesc_packet+0x14a>
		// Start listening to the BLE UART
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   13636:	4a16      	ldr	r2, [pc, #88]	; (13690 <read_vesc_packet+0x1bc>)
   13638:	4907      	ldr	r1, [pc, #28]	; (13658 <read_vesc_packet+0x184>)
   1363a:	4b17      	ldr	r3, [pc, #92]	; (13698 <read_vesc_packet+0x1c4>)
   1363c:	0018      	movs	r0, r3
   1363e:	4b18      	ldr	r3, [pc, #96]	; (136a0 <read_vesc_packet+0x1cc>)
   13640:	4798      	blx	r3
	}

	if(VESC_PACKET_RECIEVED){
   13642:	4b07      	ldr	r3, [pc, #28]	; (13660 <read_vesc_packet+0x18c>)
   13644:	781b      	ldrb	r3, [r3, #0]
   13646:	2b00      	cmp	r3, #0
   13648:	d001      	beq.n	1364e <read_vesc_packet+0x17a>
		process_recieved_packet();
   1364a:	4b19      	ldr	r3, [pc, #100]	; (136b0 <read_vesc_packet+0x1dc>)
   1364c:	4798      	blx	r3
	}
}
   1364e:	46c0      	nop			; (mov r8, r8)
   13650:	46bd      	mov	sp, r7
   13652:	b003      	add	sp, #12
   13654:	bd90      	pop	{r4, r7, pc}
   13656:	46c0      	nop			; (mov r8, r8)
   13658:	2000120c 	.word	0x2000120c
   1365c:	00013479 	.word	0x00013479
   13660:	20000436 	.word	0x20000436
   13664:	20000440 	.word	0x20000440
   13668:	2000120e 	.word	0x2000120e
   1366c:	200015cf 	.word	0x200015cf
   13670:	0001c15d 	.word	0x0001c15d
   13674:	200015cc 	.word	0x200015cc
   13678:	00000203 	.word	0x00000203
   1367c:	2000120f 	.word	0x2000120f
   13680:	00011849 	.word	0x00011849
   13684:	00009f65 	.word	0x00009f65
   13688:	2000042c 	.word	0x2000042c
   1368c:	20000430 	.word	0x20000430
   13690:	00000206 	.word	0x00000206
   13694:	0001c193 	.word	0x0001c193
   13698:	20000b0c 	.word	0x20000b0c
   1369c:	000066b9 	.word	0x000066b9
   136a0:	00006671 	.word	0x00006671
   136a4:	2000043c 	.word	0x2000043c
   136a8:	0001382d 	.word	0x0001382d
   136ac:	00009fbd 	.word	0x00009fbd
   136b0:	00011af9 	.word	0x00011af9

000136b4 <detect_esc_baud_pins>:

void detect_esc_baud_pins(void){
   136b4:	b580      	push	{r7, lr}
   136b6:	af00      	add	r7, sp, #0
	static uint32_t send_delay = 15;
	static uint32_t recieve_delay = 50;
	static bool CONFIG_PACKET_SENT = false;
	static bool DISABLE_UART = true;

	if(!ESC_UART_CONFIGED){
   136b8:	4b47      	ldr	r3, [pc, #284]	; (137d8 <detect_esc_baud_pins+0x124>)
   136ba:	781b      	ldrb	r3, [r3, #0]
   136bc:	2201      	movs	r2, #1
   136be:	4053      	eors	r3, r2
   136c0:	b2db      	uxtb	r3, r3
   136c2:	2b00      	cmp	r3, #0
   136c4:	d100      	bne.n	136c8 <detect_esc_baud_pins+0x14>
   136c6:	e084      	b.n	137d2 <detect_esc_baud_pins+0x11e>
		if(DISABLE_UART){
   136c8:	4b44      	ldr	r3, [pc, #272]	; (137dc <detect_esc_baud_pins+0x128>)
   136ca:	781b      	ldrb	r3, [r3, #0]
   136cc:	2b00      	cmp	r3, #0
   136ce:	d00b      	beq.n	136e8 <detect_esc_baud_pins+0x34>
			usart_disable(&vesc_usart);
   136d0:	4b43      	ldr	r3, [pc, #268]	; (137e0 <detect_esc_baud_pins+0x12c>)
   136d2:	0018      	movs	r0, r3
   136d4:	4b43      	ldr	r3, [pc, #268]	; (137e4 <detect_esc_baud_pins+0x130>)
   136d6:	4798      	blx	r3
			wait_time = millis();
   136d8:	4b43      	ldr	r3, [pc, #268]	; (137e8 <detect_esc_baud_pins+0x134>)
   136da:	4798      	blx	r3
   136dc:	0002      	movs	r2, r0
   136de:	4b43      	ldr	r3, [pc, #268]	; (137ec <detect_esc_baud_pins+0x138>)
   136e0:	601a      	str	r2, [r3, #0]
			DISABLE_UART = false;
   136e2:	4b3e      	ldr	r3, [pc, #248]	; (137dc <detect_esc_baud_pins+0x128>)
   136e4:	2200      	movs	r2, #0
   136e6:	701a      	strb	r2, [r3, #0]
		}

		if(!CONFIG_PACKET_SENT && check_timer_expired(&wait_time, send_delay)){ // Pause 5ms
   136e8:	4b41      	ldr	r3, [pc, #260]	; (137f0 <detect_esc_baud_pins+0x13c>)
   136ea:	781b      	ldrb	r3, [r3, #0]
   136ec:	2201      	movs	r2, #1
   136ee:	4053      	eors	r3, r2
   136f0:	b2db      	uxtb	r3, r3
   136f2:	2b00      	cmp	r3, #0
   136f4:	d039      	beq.n	1376a <detect_esc_baud_pins+0xb6>
   136f6:	4b3f      	ldr	r3, [pc, #252]	; (137f4 <detect_esc_baud_pins+0x140>)
   136f8:	681a      	ldr	r2, [r3, #0]
   136fa:	4b3c      	ldr	r3, [pc, #240]	; (137ec <detect_esc_baud_pins+0x138>)
   136fc:	0011      	movs	r1, r2
   136fe:	0018      	movs	r0, r3
   13700:	4b3d      	ldr	r3, [pc, #244]	; (137f8 <detect_esc_baud_pins+0x144>)
   13702:	4798      	blx	r3
   13704:	1e03      	subs	r3, r0, #0
   13706:	d030      	beq.n	1376a <detect_esc_baud_pins+0xb6>

			// Configure the VESC UART with a new buad rate
			UART_baud++;
   13708:	4b3c      	ldr	r3, [pc, #240]	; (137fc <detect_esc_baud_pins+0x148>)
   1370a:	781b      	ldrb	r3, [r3, #0]
   1370c:	3301      	adds	r3, #1
   1370e:	b2da      	uxtb	r2, r3
   13710:	4b3a      	ldr	r3, [pc, #232]	; (137fc <detect_esc_baud_pins+0x148>)
   13712:	701a      	strb	r2, [r3, #0]
			if(UART_baud > BAUD_115200){
   13714:	4b39      	ldr	r3, [pc, #228]	; (137fc <detect_esc_baud_pins+0x148>)
   13716:	781b      	ldrb	r3, [r3, #0]
   13718:	2b03      	cmp	r3, #3
   1371a:	d910      	bls.n	1373e <detect_esc_baud_pins+0x8a>
				UART_baud = BAUD_9600;
   1371c:	4b37      	ldr	r3, [pc, #220]	; (137fc <detect_esc_baud_pins+0x148>)
   1371e:	2200      	movs	r2, #0
   13720:	701a      	strb	r2, [r3, #0]
				ESC_UART_PIN_CONFIG = !ESC_UART_PIN_CONFIG;
   13722:	4b37      	ldr	r3, [pc, #220]	; (13800 <detect_esc_baud_pins+0x14c>)
   13724:	781b      	ldrb	r3, [r3, #0]
   13726:	1e5a      	subs	r2, r3, #1
   13728:	4193      	sbcs	r3, r2
   1372a:	b2db      	uxtb	r3, r3
   1372c:	2201      	movs	r2, #1
   1372e:	4053      	eors	r3, r2
   13730:	b2db      	uxtb	r3, r3
   13732:	1c1a      	adds	r2, r3, #0
   13734:	2301      	movs	r3, #1
   13736:	4013      	ands	r3, r2
   13738:	b2da      	uxtb	r2, r3
   1373a:	4b31      	ldr	r3, [pc, #196]	; (13800 <detect_esc_baud_pins+0x14c>)
   1373c:	701a      	strb	r2, [r3, #0]
			}
			configure_vesc_usart();
   1373e:	4b31      	ldr	r3, [pc, #196]	; (13804 <detect_esc_baud_pins+0x150>)
   13740:	4798      	blx	r3

			//port_pin_set_output_level(STATUS_LED, true); // TODO: Add status LED

			// Start listening for responses
			usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   13742:	4a31      	ldr	r2, [pc, #196]	; (13808 <detect_esc_baud_pins+0x154>)
   13744:	4931      	ldr	r1, [pc, #196]	; (1380c <detect_esc_baud_pins+0x158>)
   13746:	4b26      	ldr	r3, [pc, #152]	; (137e0 <detect_esc_baud_pins+0x12c>)
   13748:	0018      	movs	r0, r3
   1374a:	4b31      	ldr	r3, [pc, #196]	; (13810 <detect_esc_baud_pins+0x15c>)
   1374c:	4798      	blx	r3

			// Dont wait for the normal send timeout to expire
			HOLD_FOR_REPLY = false;
   1374e:	4b31      	ldr	r3, [pc, #196]	; (13814 <detect_esc_baud_pins+0x160>)
   13750:	2200      	movs	r2, #0
   13752:	701a      	strb	r2, [r3, #0]
			// Request FW version
			vesc_get_fw_version();
   13754:	4b30      	ldr	r3, [pc, #192]	; (13818 <detect_esc_baud_pins+0x164>)
   13756:	4798      	blx	r3

			CONFIG_PACKET_SENT = true;
   13758:	4b25      	ldr	r3, [pc, #148]	; (137f0 <detect_esc_baud_pins+0x13c>)
   1375a:	2201      	movs	r2, #1
   1375c:	701a      	strb	r2, [r3, #0]

			wait_time = millis();
   1375e:	4b22      	ldr	r3, [pc, #136]	; (137e8 <detect_esc_baud_pins+0x134>)
   13760:	4798      	blx	r3
   13762:	0002      	movs	r2, r0
   13764:	4b21      	ldr	r3, [pc, #132]	; (137ec <detect_esc_baud_pins+0x138>)
   13766:	601a      	str	r2, [r3, #0]

			CONFIG_PACKET_SENT = false;
			DISABLE_UART = true;
		}
	}
}
   13768:	e033      	b.n	137d2 <detect_esc_baud_pins+0x11e>
		else if(CONFIG_PACKET_SENT && check_timer_expired(&wait_time, recieve_delay)){
   1376a:	4b21      	ldr	r3, [pc, #132]	; (137f0 <detect_esc_baud_pins+0x13c>)
   1376c:	781b      	ldrb	r3, [r3, #0]
   1376e:	2b00      	cmp	r3, #0
   13770:	d02f      	beq.n	137d2 <detect_esc_baud_pins+0x11e>
   13772:	4b2a      	ldr	r3, [pc, #168]	; (1381c <detect_esc_baud_pins+0x168>)
   13774:	681a      	ldr	r2, [r3, #0]
   13776:	4b1d      	ldr	r3, [pc, #116]	; (137ec <detect_esc_baud_pins+0x138>)
   13778:	0011      	movs	r1, r2
   1377a:	0018      	movs	r0, r3
   1377c:	4b1e      	ldr	r3, [pc, #120]	; (137f8 <detect_esc_baud_pins+0x144>)
   1377e:	4798      	blx	r3
   13780:	1e03      	subs	r3, r0, #0
   13782:	d026      	beq.n	137d2 <detect_esc_baud_pins+0x11e>
			if(CHECK_BUFFER(vesc_USART_read_buffer)){
   13784:	4b21      	ldr	r3, [pc, #132]	; (1380c <detect_esc_baud_pins+0x158>)
   13786:	0018      	movs	r0, r3
   13788:	4b25      	ldr	r3, [pc, #148]	; (13820 <detect_esc_baud_pins+0x16c>)
   1378a:	4798      	blx	r3
   1378c:	1e03      	subs	r3, r0, #0
   1378e:	d014      	beq.n	137ba <detect_esc_baud_pins+0x106>
				ESC_UART_CONFIGED = true;
   13790:	4b11      	ldr	r3, [pc, #68]	; (137d8 <detect_esc_baud_pins+0x124>)
   13792:	2201      	movs	r2, #1
   13794:	701a      	strb	r2, [r3, #0]
				memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6);
   13796:	4a1c      	ldr	r2, [pc, #112]	; (13808 <detect_esc_baud_pins+0x154>)
   13798:	4b1c      	ldr	r3, [pc, #112]	; (1380c <detect_esc_baud_pins+0x158>)
   1379a:	2100      	movs	r1, #0
   1379c:	0018      	movs	r0, r3
   1379e:	4b21      	ldr	r3, [pc, #132]	; (13824 <detect_esc_baud_pins+0x170>)
   137a0:	4798      	blx	r3
				usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
   137a2:	4b0f      	ldr	r3, [pc, #60]	; (137e0 <detect_esc_baud_pins+0x12c>)
   137a4:	2100      	movs	r1, #0
   137a6:	0018      	movs	r0, r3
   137a8:	4b1f      	ldr	r3, [pc, #124]	; (13828 <detect_esc_baud_pins+0x174>)
   137aa:	4798      	blx	r3
				usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   137ac:	4a16      	ldr	r2, [pc, #88]	; (13808 <detect_esc_baud_pins+0x154>)
   137ae:	4917      	ldr	r1, [pc, #92]	; (1380c <detect_esc_baud_pins+0x158>)
   137b0:	4b0b      	ldr	r3, [pc, #44]	; (137e0 <detect_esc_baud_pins+0x12c>)
   137b2:	0018      	movs	r0, r3
   137b4:	4b16      	ldr	r3, [pc, #88]	; (13810 <detect_esc_baud_pins+0x15c>)
   137b6:	4798      	blx	r3
   137b8:	e005      	b.n	137c6 <detect_esc_baud_pins+0x112>
				memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6); // Clear the VESC receive buffer
   137ba:	4a13      	ldr	r2, [pc, #76]	; (13808 <detect_esc_baud_pins+0x154>)
   137bc:	4b13      	ldr	r3, [pc, #76]	; (1380c <detect_esc_baud_pins+0x158>)
   137be:	2100      	movs	r1, #0
   137c0:	0018      	movs	r0, r3
   137c2:	4b18      	ldr	r3, [pc, #96]	; (13824 <detect_esc_baud_pins+0x170>)
   137c4:	4798      	blx	r3
			CONFIG_PACKET_SENT = false;
   137c6:	4b0a      	ldr	r3, [pc, #40]	; (137f0 <detect_esc_baud_pins+0x13c>)
   137c8:	2200      	movs	r2, #0
   137ca:	701a      	strb	r2, [r3, #0]
			DISABLE_UART = true;
   137cc:	4b03      	ldr	r3, [pc, #12]	; (137dc <detect_esc_baud_pins+0x128>)
   137ce:	2201      	movs	r2, #1
   137d0:	701a      	strb	r2, [r3, #0]
}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	46bd      	mov	sp, r7
   137d6:	bd80      	pop	{r7, pc}
   137d8:	20000437 	.word	0x20000437
   137dc:	20000105 	.word	0x20000105
   137e0:	20000b0c 	.word	0x20000b0c
   137e4:	00009da9 	.word	0x00009da9
   137e8:	00009f65 	.word	0x00009f65
   137ec:	200004a8 	.word	0x200004a8
   137f0:	200004ac 	.word	0x200004ac
   137f4:	20000108 	.word	0x20000108
   137f8:	00009fbd 	.word	0x00009fbd
   137fc:	200003cb 	.word	0x200003cb
   13800:	20000439 	.word	0x20000439
   13804:	000118cd 	.word	0x000118cd
   13808:	00000206 	.word	0x00000206
   1380c:	2000120c 	.word	0x2000120c
   13810:	00006671 	.word	0x00006671
   13814:	20000430 	.word	0x20000430
   13818:	00012921 	.word	0x00012921
   1381c:	2000010c 	.word	0x2000010c
   13820:	00013479 	.word	0x00013479
   13824:	0001c193 	.word	0x0001c193
   13828:	000066b9 	.word	0x000066b9

0001382c <CHECK_FOR_NOISE_ESC>:

bool CHECK_FOR_NOISE_ESC(struct usart_module *const module, uint8_t buf[MAX_PAYLOAD_LEN+6], uint16_t max_size, uint32_t *noise_timer){
   1382c:	b580      	push	{r7, lr}
   1382e:	b084      	sub	sp, #16
   13830:	af00      	add	r7, sp, #0
   13832:	60f8      	str	r0, [r7, #12]
   13834:	60b9      	str	r1, [r7, #8]
   13836:	603b      	str	r3, [r7, #0]
   13838:	1dbb      	adds	r3, r7, #6
   1383a:	801a      	strh	r2, [r3, #0]
	if(buf[0] != 0x02 && buf[0] != 0x03 && module->remaining_rx_buffer_length != max_size){
   1383c:	68bb      	ldr	r3, [r7, #8]
   1383e:	781b      	ldrb	r3, [r3, #0]
   13840:	2b02      	cmp	r3, #2
   13842:	d00c      	beq.n	1385e <CHECK_FOR_NOISE_ESC+0x32>
   13844:	68bb      	ldr	r3, [r7, #8]
   13846:	781b      	ldrb	r3, [r3, #0]
   13848:	2b03      	cmp	r3, #3
   1384a:	d008      	beq.n	1385e <CHECK_FOR_NOISE_ESC+0x32>
   1384c:	68fb      	ldr	r3, [r7, #12]
   1384e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   13850:	b29b      	uxth	r3, r3
   13852:	1dba      	adds	r2, r7, #6
   13854:	8812      	ldrh	r2, [r2, #0]
   13856:	429a      	cmp	r2, r3
   13858:	d001      	beq.n	1385e <CHECK_FOR_NOISE_ESC+0x32>
		return true;
   1385a:	2301      	movs	r3, #1
   1385c:	e01a      	b.n	13894 <CHECK_FOR_NOISE_ESC+0x68>
	} else if(buf[0] == 0x02 || buf[0] == 0x03){
   1385e:	68bb      	ldr	r3, [r7, #8]
   13860:	781b      	ldrb	r3, [r3, #0]
   13862:	2b02      	cmp	r3, #2
   13864:	d003      	beq.n	1386e <CHECK_FOR_NOISE_ESC+0x42>
   13866:	68bb      	ldr	r3, [r7, #8]
   13868:	781b      	ldrb	r3, [r3, #0]
   1386a:	2b03      	cmp	r3, #3
   1386c:	d10c      	bne.n	13888 <CHECK_FOR_NOISE_ESC+0x5c>
		if(check_timer_expired(noise_timer,500)){
   1386e:	23fa      	movs	r3, #250	; 0xfa
   13870:	005a      	lsls	r2, r3, #1
   13872:	683b      	ldr	r3, [r7, #0]
   13874:	0011      	movs	r1, r2
   13876:	0018      	movs	r0, r3
   13878:	4b08      	ldr	r3, [pc, #32]	; (1389c <CHECK_FOR_NOISE_ESC+0x70>)
   1387a:	4798      	blx	r3
   1387c:	1e03      	subs	r3, r0, #0
   1387e:	d001      	beq.n	13884 <CHECK_FOR_NOISE_ESC+0x58>
			return true;
   13880:	2301      	movs	r3, #1
   13882:	e007      	b.n	13894 <CHECK_FOR_NOISE_ESC+0x68>
		}else{
			return false;
   13884:	2300      	movs	r3, #0
   13886:	e005      	b.n	13894 <CHECK_FOR_NOISE_ESC+0x68>
		}
	} else {
		*noise_timer = millis();
   13888:	4b05      	ldr	r3, [pc, #20]	; (138a0 <CHECK_FOR_NOISE_ESC+0x74>)
   1388a:	4798      	blx	r3
   1388c:	0002      	movs	r2, r0
   1388e:	683b      	ldr	r3, [r7, #0]
   13890:	601a      	str	r2, [r3, #0]
		return false;
   13892:	2300      	movs	r3, #0
	}
}
   13894:	0018      	movs	r0, r3
   13896:	46bd      	mov	sp, r7
   13898:	b004      	add	sp, #16
   1389a:	bd80      	pop	{r7, pc}
   1389c:	00009fbd 	.word	0x00009fbd
   138a0:	00009f65 	.word	0x00009f65

000138a4 <detect_esc_uart_connected>:


void detect_esc_uart_connected(void){
   138a4:	b580      	push	{r7, lr}
   138a6:	af00      	add	r7, sp, #0
	if(port_pin_get_input_level(ESC_UART_RXTX_1) && port_pin_get_input_level(ESC_UART_RXTX_2)){
   138a8:	2010      	movs	r0, #16
   138aa:	4b07      	ldr	r3, [pc, #28]	; (138c8 <detect_esc_uart_connected+0x24>)
   138ac:	4798      	blx	r3
   138ae:	1e03      	subs	r3, r0, #0
   138b0:	d007      	beq.n	138c2 <detect_esc_uart_connected+0x1e>
   138b2:	2011      	movs	r0, #17
   138b4:	4b04      	ldr	r3, [pc, #16]	; (138c8 <detect_esc_uart_connected+0x24>)
   138b6:	4798      	blx	r3
   138b8:	1e03      	subs	r3, r0, #0
   138ba:	d002      	beq.n	138c2 <detect_esc_uart_connected+0x1e>
		ESC_UART_DETECTED = true;
   138bc:	4b03      	ldr	r3, [pc, #12]	; (138cc <detect_esc_uart_connected+0x28>)
   138be:	2201      	movs	r2, #1
   138c0:	701a      	strb	r2, [r3, #0]
	}
}
   138c2:	46c0      	nop			; (mov r8, r8)
   138c4:	46bd      	mov	sp, r7
   138c6:	bd80      	pop	{r7, pc}
   138c8:	000097d1 	.word	0x000097d1
   138cc:	20000438 	.word	0x20000438

000138d0 <save_led_data>:


// EEPROM size needs to be set to 0x02


void save_led_data(){
   138d0:	b590      	push	{r4, r7, lr}
   138d2:	b085      	sub	sp, #20
   138d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   138d6:	2300      	movs	r3, #0
   138d8:	60fb      	str	r3, [r7, #12]
   138da:	e005      	b.n	138e8 <save_led_data+0x18>
		eeprom_data[0] = 0;
   138dc:	4bd0      	ldr	r3, [pc, #832]	; (13c20 <save_led_data+0x350>)
   138de:	2200      	movs	r2, #0
   138e0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   138e2:	68fb      	ldr	r3, [r7, #12]
   138e4:	3301      	adds	r3, #1
   138e6:	60fb      	str	r3, [r7, #12]
   138e8:	68fb      	ldr	r3, [r7, #12]
   138ea:	2b3b      	cmp	r3, #59	; 0x3b
   138ec:	ddf6      	ble.n	138dc <save_led_data+0xc>
	}

	eeprom_data[0] = SWITCHES;
   138ee:	4bcd      	ldr	r3, [pc, #820]	; (13c24 <save_led_data+0x354>)
   138f0:	781a      	ldrb	r2, [r3, #0]
   138f2:	4bcb      	ldr	r3, [pc, #812]	; (13c20 <save_led_data+0x350>)
   138f4:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = light_mode;
   138f6:	4bcc      	ldr	r3, [pc, #816]	; (13c28 <save_led_data+0x358>)
   138f8:	781a      	ldrb	r2, [r3, #0]
   138fa:	4bc9      	ldr	r3, [pc, #804]	; (13c20 <save_led_data+0x350>)
   138fc:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = (Static_RGB.LR & 0xFF);
   138fe:	4bcb      	ldr	r3, [pc, #812]	; (13c2c <save_led_data+0x35c>)
   13900:	881b      	ldrh	r3, [r3, #0]
   13902:	b2da      	uxtb	r2, r3
   13904:	4bc6      	ldr	r3, [pc, #792]	; (13c20 <save_led_data+0x350>)
   13906:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (Static_RGB.LR & 0xFF00) >> 8;
   13908:	4bc8      	ldr	r3, [pc, #800]	; (13c2c <save_led_data+0x35c>)
   1390a:	881b      	ldrh	r3, [r3, #0]
   1390c:	0a1b      	lsrs	r3, r3, #8
   1390e:	b29b      	uxth	r3, r3
   13910:	b2da      	uxtb	r2, r3
   13912:	4bc3      	ldr	r3, [pc, #780]	; (13c20 <save_led_data+0x350>)
   13914:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (Static_RGB.LG & 0xFF);
   13916:	4bc5      	ldr	r3, [pc, #788]	; (13c2c <save_led_data+0x35c>)
   13918:	885b      	ldrh	r3, [r3, #2]
   1391a:	b2da      	uxtb	r2, r3
   1391c:	4bc0      	ldr	r3, [pc, #768]	; (13c20 <save_led_data+0x350>)
   1391e:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Static_RGB.LG & 0xFF00) >> 8;
   13920:	4bc2      	ldr	r3, [pc, #776]	; (13c2c <save_led_data+0x35c>)
   13922:	885b      	ldrh	r3, [r3, #2]
   13924:	0a1b      	lsrs	r3, r3, #8
   13926:	b29b      	uxth	r3, r3
   13928:	b2da      	uxtb	r2, r3
   1392a:	4bbd      	ldr	r3, [pc, #756]	; (13c20 <save_led_data+0x350>)
   1392c:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Static_RGB.LB & 0xFF);
   1392e:	4bbf      	ldr	r3, [pc, #764]	; (13c2c <save_led_data+0x35c>)
   13930:	889b      	ldrh	r3, [r3, #4]
   13932:	b2da      	uxtb	r2, r3
   13934:	4bba      	ldr	r3, [pc, #744]	; (13c20 <save_led_data+0x350>)
   13936:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Static_RGB.LB & 0xFF00) >> 8;
   13938:	4bbc      	ldr	r3, [pc, #752]	; (13c2c <save_led_data+0x35c>)
   1393a:	889b      	ldrh	r3, [r3, #4]
   1393c:	0a1b      	lsrs	r3, r3, #8
   1393e:	b29b      	uxth	r3, r3
   13940:	b2da      	uxtb	r2, r3
   13942:	4bb7      	ldr	r3, [pc, #732]	; (13c20 <save_led_data+0x350>)
   13944:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Static_RGB.RR & 0xFF);
   13946:	4bb9      	ldr	r3, [pc, #740]	; (13c2c <save_led_data+0x35c>)
   13948:	88db      	ldrh	r3, [r3, #6]
   1394a:	b2da      	uxtb	r2, r3
   1394c:	4bb4      	ldr	r3, [pc, #720]	; (13c20 <save_led_data+0x350>)
   1394e:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Static_RGB.RR & 0xFF00) >> 8;
   13950:	4bb6      	ldr	r3, [pc, #728]	; (13c2c <save_led_data+0x35c>)
   13952:	88db      	ldrh	r3, [r3, #6]
   13954:	0a1b      	lsrs	r3, r3, #8
   13956:	b29b      	uxth	r3, r3
   13958:	b2da      	uxtb	r2, r3
   1395a:	4bb1      	ldr	r3, [pc, #708]	; (13c20 <save_led_data+0x350>)
   1395c:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Static_RGB.RG & 0xFF);
   1395e:	4bb3      	ldr	r3, [pc, #716]	; (13c2c <save_led_data+0x35c>)
   13960:	891b      	ldrh	r3, [r3, #8]
   13962:	b2da      	uxtb	r2, r3
   13964:	4bae      	ldr	r3, [pc, #696]	; (13c20 <save_led_data+0x350>)
   13966:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Static_RGB.RG & 0xFF00) >> 8;
   13968:	4bb0      	ldr	r3, [pc, #704]	; (13c2c <save_led_data+0x35c>)
   1396a:	891b      	ldrh	r3, [r3, #8]
   1396c:	0a1b      	lsrs	r3, r3, #8
   1396e:	b29b      	uxth	r3, r3
   13970:	b2da      	uxtb	r2, r3
   13972:	4bab      	ldr	r3, [pc, #684]	; (13c20 <save_led_data+0x350>)
   13974:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Static_RGB.RB & 0xFF);
   13976:	4bad      	ldr	r3, [pc, #692]	; (13c2c <save_led_data+0x35c>)
   13978:	895b      	ldrh	r3, [r3, #10]
   1397a:	b2da      	uxtb	r2, r3
   1397c:	4ba8      	ldr	r3, [pc, #672]	; (13c20 <save_led_data+0x350>)
   1397e:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Static_RGB.RB & 0xFF00) >> 8;
   13980:	4baa      	ldr	r3, [pc, #680]	; (13c2c <save_led_data+0x35c>)
   13982:	895b      	ldrh	r3, [r3, #10]
   13984:	0a1b      	lsrs	r3, r3, #8
   13986:	b29b      	uxth	r3, r3
   13988:	b2da      	uxtb	r2, r3
   1398a:	4ba5      	ldr	r3, [pc, #660]	; (13c20 <save_led_data+0x350>)
   1398c:	735a      	strb	r2, [r3, #13]
	int dataOffset = 14;
   1398e:	230e      	movs	r3, #14
   13990:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++){
   13992:	2300      	movs	r3, #0
   13994:	60bb      	str	r3, [r7, #8]
   13996:	e058      	b.n	13a4a <save_led_data+0x17a>
		eeprom_data[dataOffset + (i*5)] = ColorBase[i];
   13998:	68ba      	ldr	r2, [r7, #8]
   1399a:	0013      	movs	r3, r2
   1399c:	009b      	lsls	r3, r3, #2
   1399e:	189a      	adds	r2, r3, r2
   139a0:	683b      	ldr	r3, [r7, #0]
   139a2:	18d3      	adds	r3, r2, r3
   139a4:	49a2      	ldr	r1, [pc, #648]	; (13c30 <save_led_data+0x360>)
   139a6:	68ba      	ldr	r2, [r7, #8]
   139a8:	188a      	adds	r2, r1, r2
   139aa:	7811      	ldrb	r1, [r2, #0]
   139ac:	4a9c      	ldr	r2, [pc, #624]	; (13c20 <save_led_data+0x350>)
   139ae:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+1] = BrightBase[i];
   139b0:	68ba      	ldr	r2, [r7, #8]
   139b2:	0013      	movs	r3, r2
   139b4:	009b      	lsls	r3, r3, #2
   139b6:	189a      	adds	r2, r3, r2
   139b8:	683b      	ldr	r3, [r7, #0]
   139ba:	18d3      	adds	r3, r2, r3
   139bc:	3301      	adds	r3, #1
   139be:	499d      	ldr	r1, [pc, #628]	; (13c34 <save_led_data+0x364>)
   139c0:	68ba      	ldr	r2, [r7, #8]
   139c2:	188a      	adds	r2, r1, r2
   139c4:	7811      	ldrb	r1, [r2, #0]
   139c6:	4a96      	ldr	r2, [pc, #600]	; (13c20 <save_led_data+0x350>)
   139c8:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+2] = RateBase[i];
   139ca:	68ba      	ldr	r2, [r7, #8]
   139cc:	0013      	movs	r3, r2
   139ce:	009b      	lsls	r3, r3, #2
   139d0:	189a      	adds	r2, r3, r2
   139d2:	683b      	ldr	r3, [r7, #0]
   139d4:	18d3      	adds	r3, r2, r3
   139d6:	3302      	adds	r3, #2
   139d8:	4997      	ldr	r1, [pc, #604]	; (13c38 <save_led_data+0x368>)
   139da:	68ba      	ldr	r2, [r7, #8]
   139dc:	188a      	adds	r2, r1, r2
   139de:	7811      	ldrb	r1, [r2, #0]
   139e0:	4a8f      	ldr	r2, [pc, #572]	; (13c20 <save_led_data+0x350>)
   139e2:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+3] = (uint8_t)(RateSens[i]*100);
   139e4:	68ba      	ldr	r2, [r7, #8]
   139e6:	0013      	movs	r3, r2
   139e8:	009b      	lsls	r3, r3, #2
   139ea:	189a      	adds	r2, r3, r2
   139ec:	683b      	ldr	r3, [r7, #0]
   139ee:	18d3      	adds	r3, r2, r3
   139f0:	1cdc      	adds	r4, r3, #3
   139f2:	4b92      	ldr	r3, [pc, #584]	; (13c3c <save_led_data+0x36c>)
   139f4:	68ba      	ldr	r2, [r7, #8]
   139f6:	0092      	lsls	r2, r2, #2
   139f8:	58d2      	ldr	r2, [r2, r3]
   139fa:	4b91      	ldr	r3, [pc, #580]	; (13c40 <save_led_data+0x370>)
   139fc:	4991      	ldr	r1, [pc, #580]	; (13c44 <save_led_data+0x374>)
   139fe:	1c10      	adds	r0, r2, #0
   13a00:	4798      	blx	r3
   13a02:	1c03      	adds	r3, r0, #0
   13a04:	1c1a      	adds	r2, r3, #0
   13a06:	4b90      	ldr	r3, [pc, #576]	; (13c48 <save_led_data+0x378>)
   13a08:	1c10      	adds	r0, r2, #0
   13a0a:	4798      	blx	r3
   13a0c:	0003      	movs	r3, r0
   13a0e:	b2da      	uxtb	r2, r3
   13a10:	4b83      	ldr	r3, [pc, #524]	; (13c20 <save_led_data+0x350>)
   13a12:	551a      	strb	r2, [r3, r4]
		eeprom_data[dataOffset + (i*5)+4] = (uint8_t)(Brightness[i]*100);
   13a14:	68ba      	ldr	r2, [r7, #8]
   13a16:	0013      	movs	r3, r2
   13a18:	009b      	lsls	r3, r3, #2
   13a1a:	189a      	adds	r2, r3, r2
   13a1c:	683b      	ldr	r3, [r7, #0]
   13a1e:	18d3      	adds	r3, r2, r3
   13a20:	1d1c      	adds	r4, r3, #4
   13a22:	4b8a      	ldr	r3, [pc, #552]	; (13c4c <save_led_data+0x37c>)
   13a24:	68ba      	ldr	r2, [r7, #8]
   13a26:	0092      	lsls	r2, r2, #2
   13a28:	58d2      	ldr	r2, [r2, r3]
   13a2a:	4b85      	ldr	r3, [pc, #532]	; (13c40 <save_led_data+0x370>)
   13a2c:	4985      	ldr	r1, [pc, #532]	; (13c44 <save_led_data+0x374>)
   13a2e:	1c10      	adds	r0, r2, #0
   13a30:	4798      	blx	r3
   13a32:	1c03      	adds	r3, r0, #0
   13a34:	1c1a      	adds	r2, r3, #0
   13a36:	4b84      	ldr	r3, [pc, #528]	; (13c48 <save_led_data+0x378>)
   13a38:	1c10      	adds	r0, r2, #0
   13a3a:	4798      	blx	r3
   13a3c:	0003      	movs	r3, r0
   13a3e:	b2da      	uxtb	r2, r3
   13a40:	4b77      	ldr	r3, [pc, #476]	; (13c20 <save_led_data+0x350>)
   13a42:	551a      	strb	r2, [r3, r4]
	for(int i = 0; i < 8; i++){
   13a44:	68bb      	ldr	r3, [r7, #8]
   13a46:	3301      	adds	r3, #1
   13a48:	60bb      	str	r3, [r7, #8]
   13a4a:	68bb      	ldr	r3, [r7, #8]
   13a4c:	2b07      	cmp	r3, #7
   13a4e:	dda3      	ble.n	13998 <save_led_data+0xc8>
	}

	eeprom_emulator_write_page(0, eeprom_data);
   13a50:	4b73      	ldr	r3, [pc, #460]	; (13c20 <save_led_data+0x350>)
   13a52:	0019      	movs	r1, r3
   13a54:	2000      	movs	r0, #0
   13a56:	4b7e      	ldr	r3, [pc, #504]	; (13c50 <save_led_data+0x380>)
   13a58:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   13a5a:	4b7e      	ldr	r3, [pc, #504]	; (13c54 <save_led_data+0x384>)
   13a5c:	4798      	blx	r3

	
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   13a5e:	2300      	movs	r3, #0
   13a60:	607b      	str	r3, [r7, #4]
   13a62:	e005      	b.n	13a70 <save_led_data+0x1a0>
		eeprom_data[0] = 0;
   13a64:	4b6e      	ldr	r3, [pc, #440]	; (13c20 <save_led_data+0x350>)
   13a66:	2200      	movs	r2, #0
   13a68:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   13a6a:	687b      	ldr	r3, [r7, #4]
   13a6c:	3301      	adds	r3, #1
   13a6e:	607b      	str	r3, [r7, #4]
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	2b3b      	cmp	r3, #59	; 0x3b
   13a74:	ddf6      	ble.n	13a64 <save_led_data+0x194>
	}
	
	eeprom_data[0] = ColorBase[8];
   13a76:	4b6e      	ldr	r3, [pc, #440]	; (13c30 <save_led_data+0x360>)
   13a78:	7a1a      	ldrb	r2, [r3, #8]
   13a7a:	4b69      	ldr	r3, [pc, #420]	; (13c20 <save_led_data+0x350>)
   13a7c:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = BrightBase[8];
   13a7e:	4b6d      	ldr	r3, [pc, #436]	; (13c34 <save_led_data+0x364>)
   13a80:	7a1a      	ldrb	r2, [r3, #8]
   13a82:	4b67      	ldr	r3, [pc, #412]	; (13c20 <save_led_data+0x350>)
   13a84:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = RateBase[8];
   13a86:	4b6c      	ldr	r3, [pc, #432]	; (13c38 <save_led_data+0x368>)
   13a88:	7a1a      	ldrb	r2, [r3, #8]
   13a8a:	4b65      	ldr	r3, [pc, #404]	; (13c20 <save_led_data+0x350>)
   13a8c:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (uint8_t)(RateSens[8]*100);
   13a8e:	4b6b      	ldr	r3, [pc, #428]	; (13c3c <save_led_data+0x36c>)
   13a90:	6a1a      	ldr	r2, [r3, #32]
   13a92:	4b6b      	ldr	r3, [pc, #428]	; (13c40 <save_led_data+0x370>)
   13a94:	496b      	ldr	r1, [pc, #428]	; (13c44 <save_led_data+0x374>)
   13a96:	1c10      	adds	r0, r2, #0
   13a98:	4798      	blx	r3
   13a9a:	1c03      	adds	r3, r0, #0
   13a9c:	1c1a      	adds	r2, r3, #0
   13a9e:	4b6a      	ldr	r3, [pc, #424]	; (13c48 <save_led_data+0x378>)
   13aa0:	1c10      	adds	r0, r2, #0
   13aa2:	4798      	blx	r3
   13aa4:	0003      	movs	r3, r0
   13aa6:	b2da      	uxtb	r2, r3
   13aa8:	4b5d      	ldr	r3, [pc, #372]	; (13c20 <save_led_data+0x350>)
   13aaa:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (uint8_t)(Brightness[8]*100);
   13aac:	4b67      	ldr	r3, [pc, #412]	; (13c4c <save_led_data+0x37c>)
   13aae:	6a1a      	ldr	r2, [r3, #32]
   13ab0:	4b63      	ldr	r3, [pc, #396]	; (13c40 <save_led_data+0x370>)
   13ab2:	4964      	ldr	r1, [pc, #400]	; (13c44 <save_led_data+0x374>)
   13ab4:	1c10      	adds	r0, r2, #0
   13ab6:	4798      	blx	r3
   13ab8:	1c03      	adds	r3, r0, #0
   13aba:	1c1a      	adds	r2, r3, #0
   13abc:	4b62      	ldr	r3, [pc, #392]	; (13c48 <save_led_data+0x378>)
   13abe:	1c10      	adds	r0, r2, #0
   13ac0:	4798      	blx	r3
   13ac2:	0003      	movs	r3, r0
   13ac4:	b2da      	uxtb	r2, r3
   13ac6:	4b56      	ldr	r3, [pc, #344]	; (13c20 <save_led_data+0x350>)
   13ac8:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Custom_RGB.LR & 0xFF);
   13aca:	4b63      	ldr	r3, [pc, #396]	; (13c58 <save_led_data+0x388>)
   13acc:	881b      	ldrh	r3, [r3, #0]
   13ace:	b2da      	uxtb	r2, r3
   13ad0:	4b53      	ldr	r3, [pc, #332]	; (13c20 <save_led_data+0x350>)
   13ad2:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Custom_RGB.LR & 0xFF00) >> 8;
   13ad4:	4b60      	ldr	r3, [pc, #384]	; (13c58 <save_led_data+0x388>)
   13ad6:	881b      	ldrh	r3, [r3, #0]
   13ad8:	0a1b      	lsrs	r3, r3, #8
   13ada:	b29b      	uxth	r3, r3
   13adc:	b2da      	uxtb	r2, r3
   13ade:	4b50      	ldr	r3, [pc, #320]	; (13c20 <save_led_data+0x350>)
   13ae0:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Custom_RGB.LG & 0xFF);
   13ae2:	4b5d      	ldr	r3, [pc, #372]	; (13c58 <save_led_data+0x388>)
   13ae4:	885b      	ldrh	r3, [r3, #2]
   13ae6:	b2da      	uxtb	r2, r3
   13ae8:	4b4d      	ldr	r3, [pc, #308]	; (13c20 <save_led_data+0x350>)
   13aea:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Custom_RGB.LG & 0xFF00) >> 8;
   13aec:	4b5a      	ldr	r3, [pc, #360]	; (13c58 <save_led_data+0x388>)
   13aee:	885b      	ldrh	r3, [r3, #2]
   13af0:	0a1b      	lsrs	r3, r3, #8
   13af2:	b29b      	uxth	r3, r3
   13af4:	b2da      	uxtb	r2, r3
   13af6:	4b4a      	ldr	r3, [pc, #296]	; (13c20 <save_led_data+0x350>)
   13af8:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Custom_RGB.LB & 0xFF);
   13afa:	4b57      	ldr	r3, [pc, #348]	; (13c58 <save_led_data+0x388>)
   13afc:	889b      	ldrh	r3, [r3, #4]
   13afe:	b2da      	uxtb	r2, r3
   13b00:	4b47      	ldr	r3, [pc, #284]	; (13c20 <save_led_data+0x350>)
   13b02:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Custom_RGB.LB & 0xFF00) >> 8;
   13b04:	4b54      	ldr	r3, [pc, #336]	; (13c58 <save_led_data+0x388>)
   13b06:	889b      	ldrh	r3, [r3, #4]
   13b08:	0a1b      	lsrs	r3, r3, #8
   13b0a:	b29b      	uxth	r3, r3
   13b0c:	b2da      	uxtb	r2, r3
   13b0e:	4b44      	ldr	r3, [pc, #272]	; (13c20 <save_led_data+0x350>)
   13b10:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Custom_RGB.RR & 0xFF);
   13b12:	4b51      	ldr	r3, [pc, #324]	; (13c58 <save_led_data+0x388>)
   13b14:	88db      	ldrh	r3, [r3, #6]
   13b16:	b2da      	uxtb	r2, r3
   13b18:	4b41      	ldr	r3, [pc, #260]	; (13c20 <save_led_data+0x350>)
   13b1a:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Custom_RGB.RR & 0xFF00) >> 8;
   13b1c:	4b4e      	ldr	r3, [pc, #312]	; (13c58 <save_led_data+0x388>)
   13b1e:	88db      	ldrh	r3, [r3, #6]
   13b20:	0a1b      	lsrs	r3, r3, #8
   13b22:	b29b      	uxth	r3, r3
   13b24:	b2da      	uxtb	r2, r3
   13b26:	4b3e      	ldr	r3, [pc, #248]	; (13c20 <save_led_data+0x350>)
   13b28:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Custom_RGB.RG & 0xFF);
   13b2a:	4b4b      	ldr	r3, [pc, #300]	; (13c58 <save_led_data+0x388>)
   13b2c:	891b      	ldrh	r3, [r3, #8]
   13b2e:	b2da      	uxtb	r2, r3
   13b30:	4b3b      	ldr	r3, [pc, #236]	; (13c20 <save_led_data+0x350>)
   13b32:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = (Custom_RGB.RG & 0xFF00) >> 8;
   13b34:	4b48      	ldr	r3, [pc, #288]	; (13c58 <save_led_data+0x388>)
   13b36:	891b      	ldrh	r3, [r3, #8]
   13b38:	0a1b      	lsrs	r3, r3, #8
   13b3a:	b29b      	uxth	r3, r3
   13b3c:	b2da      	uxtb	r2, r3
   13b3e:	4b38      	ldr	r3, [pc, #224]	; (13c20 <save_led_data+0x350>)
   13b40:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = (Custom_RGB.RB & 0xFF);
   13b42:	4b45      	ldr	r3, [pc, #276]	; (13c58 <save_led_data+0x388>)
   13b44:	895b      	ldrh	r3, [r3, #10]
   13b46:	b2da      	uxtb	r2, r3
   13b48:	4b35      	ldr	r3, [pc, #212]	; (13c20 <save_led_data+0x350>)
   13b4a:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = (Custom_RGB.RB & 0xFF00) >> 8;
   13b4c:	4b42      	ldr	r3, [pc, #264]	; (13c58 <save_led_data+0x388>)
   13b4e:	895b      	ldrh	r3, [r3, #10]
   13b50:	0a1b      	lsrs	r3, r3, #8
   13b52:	b29b      	uxth	r3, r3
   13b54:	b2da      	uxtb	r2, r3
   13b56:	4b32      	ldr	r3, [pc, #200]	; (13c20 <save_led_data+0x350>)
   13b58:	741a      	strb	r2, [r3, #16]

	eeprom_data[17] = Digital_Static_Zoom;
   13b5a:	4b40      	ldr	r3, [pc, #256]	; (13c5c <save_led_data+0x38c>)
   13b5c:	781a      	ldrb	r2, [r3, #0]
   13b5e:	4b30      	ldr	r3, [pc, #192]	; (13c20 <save_led_data+0x350>)
   13b60:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = Digital_Static_Shift;
   13b62:	4b3f      	ldr	r3, [pc, #252]	; (13c60 <save_led_data+0x390>)
   13b64:	781a      	ldrb	r2, [r3, #0]
   13b66:	4b2e      	ldr	r3, [pc, #184]	; (13c20 <save_led_data+0x350>)
   13b68:	749a      	strb	r2, [r3, #18]
	eeprom_data[19] = Digital_Static_Brightness;
   13b6a:	4b3e      	ldr	r3, [pc, #248]	; (13c64 <save_led_data+0x394>)
   13b6c:	781a      	ldrb	r2, [r3, #0]
   13b6e:	4b2c      	ldr	r3, [pc, #176]	; (13c20 <save_led_data+0x350>)
   13b70:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = Digital_Skittles_Brightness;
   13b72:	4b3d      	ldr	r3, [pc, #244]	; (13c68 <save_led_data+0x398>)
   13b74:	781a      	ldrb	r2, [r3, #0]
   13b76:	4b2a      	ldr	r3, [pc, #168]	; (13c20 <save_led_data+0x350>)
   13b78:	751a      	strb	r2, [r3, #20]
	eeprom_data[21] = Digital_Cycle_Zoom;
   13b7a:	4b3c      	ldr	r3, [pc, #240]	; (13c6c <save_led_data+0x39c>)
   13b7c:	781a      	ldrb	r2, [r3, #0]
   13b7e:	4b28      	ldr	r3, [pc, #160]	; (13c20 <save_led_data+0x350>)
   13b80:	755a      	strb	r2, [r3, #21]
	eeprom_data[22] = Digital_Cycle_Rate;
   13b82:	4b3b      	ldr	r3, [pc, #236]	; (13c70 <save_led_data+0x3a0>)
   13b84:	781a      	ldrb	r2, [r3, #0]
   13b86:	4b26      	ldr	r3, [pc, #152]	; (13c20 <save_led_data+0x350>)
   13b88:	759a      	strb	r2, [r3, #22]
	eeprom_data[23] = Digital_Cycle_Brightness;
   13b8a:	4b3a      	ldr	r3, [pc, #232]	; (13c74 <save_led_data+0x3a4>)
   13b8c:	781a      	ldrb	r2, [r3, #0]
   13b8e:	4b24      	ldr	r3, [pc, #144]	; (13c20 <save_led_data+0x350>)
   13b90:	75da      	strb	r2, [r3, #23]
	eeprom_data[24] = Digital_Compass_Brightness;
   13b92:	4b39      	ldr	r3, [pc, #228]	; (13c78 <save_led_data+0x3a8>)
   13b94:	781a      	ldrb	r2, [r3, #0]
   13b96:	4b22      	ldr	r3, [pc, #136]	; (13c20 <save_led_data+0x350>)
   13b98:	761a      	strb	r2, [r3, #24]
	eeprom_data[25] = Digital_Throttle_Zoom;
   13b9a:	4b38      	ldr	r3, [pc, #224]	; (13c7c <save_led_data+0x3ac>)
   13b9c:	781a      	ldrb	r2, [r3, #0]
   13b9e:	4b20      	ldr	r3, [pc, #128]	; (13c20 <save_led_data+0x350>)
   13ba0:	765a      	strb	r2, [r3, #25]
	eeprom_data[26] = Digital_Throttle_Shift;
   13ba2:	4b37      	ldr	r3, [pc, #220]	; (13c80 <save_led_data+0x3b0>)
   13ba4:	781a      	ldrb	r2, [r3, #0]
   13ba6:	4b1e      	ldr	r3, [pc, #120]	; (13c20 <save_led_data+0x350>)
   13ba8:	769a      	strb	r2, [r3, #26]
	eeprom_data[27] = Digital_Throttle_Sens;
   13baa:	4b36      	ldr	r3, [pc, #216]	; (13c84 <save_led_data+0x3b4>)
   13bac:	781a      	ldrb	r2, [r3, #0]
   13bae:	4b1c      	ldr	r3, [pc, #112]	; (13c20 <save_led_data+0x350>)
   13bb0:	76da      	strb	r2, [r3, #27]
	eeprom_data[28] = Digital_Throttle_Brightness;
   13bb2:	4b35      	ldr	r3, [pc, #212]	; (13c88 <save_led_data+0x3b8>)
   13bb4:	781a      	ldrb	r2, [r3, #0]
   13bb6:	4b1a      	ldr	r3, [pc, #104]	; (13c20 <save_led_data+0x350>)
   13bb8:	771a      	strb	r2, [r3, #28]
	eeprom_data[29] = Digital_RPM_Zoom;
   13bba:	4b34      	ldr	r3, [pc, #208]	; (13c8c <save_led_data+0x3bc>)
   13bbc:	781a      	ldrb	r2, [r3, #0]
   13bbe:	4b18      	ldr	r3, [pc, #96]	; (13c20 <save_led_data+0x350>)
   13bc0:	775a      	strb	r2, [r3, #29]
	eeprom_data[30] = Digital_RPM_Rate;
   13bc2:	4b33      	ldr	r3, [pc, #204]	; (13c90 <save_led_data+0x3c0>)
   13bc4:	781a      	ldrb	r2, [r3, #0]
   13bc6:	4b16      	ldr	r3, [pc, #88]	; (13c20 <save_led_data+0x350>)
   13bc8:	779a      	strb	r2, [r3, #30]
	eeprom_data[31] = Digital_RPM_Brightness;
   13bca:	4b32      	ldr	r3, [pc, #200]	; (13c94 <save_led_data+0x3c4>)
   13bcc:	781a      	ldrb	r2, [r3, #0]
   13bce:	4b14      	ldr	r3, [pc, #80]	; (13c20 <save_led_data+0x350>)
   13bd0:	77da      	strb	r2, [r3, #31]
	eeprom_data[32] = (shuffled_analog_modes & 0xFF);
   13bd2:	4b31      	ldr	r3, [pc, #196]	; (13c98 <save_led_data+0x3c8>)
   13bd4:	881b      	ldrh	r3, [r3, #0]
   13bd6:	b2d9      	uxtb	r1, r3
   13bd8:	4b11      	ldr	r3, [pc, #68]	; (13c20 <save_led_data+0x350>)
   13bda:	2220      	movs	r2, #32
   13bdc:	5499      	strb	r1, [r3, r2]
	eeprom_data[33] = (shuffled_analog_modes & 0xFF00) >> 8;
   13bde:	4b2e      	ldr	r3, [pc, #184]	; (13c98 <save_led_data+0x3c8>)
   13be0:	881b      	ldrh	r3, [r3, #0]
   13be2:	0a1b      	lsrs	r3, r3, #8
   13be4:	b29b      	uxth	r3, r3
   13be6:	b2d9      	uxtb	r1, r3
   13be8:	4b0d      	ldr	r3, [pc, #52]	; (13c20 <save_led_data+0x350>)
   13bea:	2221      	movs	r2, #33	; 0x21
   13bec:	5499      	strb	r1, [r3, r2]
	eeprom_data[34] = (shuffled_digital_modes & 0xFF);
   13bee:	4b2b      	ldr	r3, [pc, #172]	; (13c9c <save_led_data+0x3cc>)
   13bf0:	881b      	ldrh	r3, [r3, #0]
   13bf2:	b2d9      	uxtb	r1, r3
   13bf4:	4b0a      	ldr	r3, [pc, #40]	; (13c20 <save_led_data+0x350>)
   13bf6:	2222      	movs	r2, #34	; 0x22
   13bf8:	5499      	strb	r1, [r3, r2]
	eeprom_data[35] = (shuffled_digital_modes & 0xFF00) >> 8;
   13bfa:	4b28      	ldr	r3, [pc, #160]	; (13c9c <save_led_data+0x3cc>)
   13bfc:	881b      	ldrh	r3, [r3, #0]
   13bfe:	0a1b      	lsrs	r3, r3, #8
   13c00:	b29b      	uxth	r3, r3
   13c02:	b2d9      	uxtb	r1, r3
   13c04:	4b06      	ldr	r3, [pc, #24]	; (13c20 <save_led_data+0x350>)
   13c06:	2223      	movs	r2, #35	; 0x23
   13c08:	5499      	strb	r1, [r3, r2]

	eeprom_emulator_write_page(1, eeprom_data);
   13c0a:	4b05      	ldr	r3, [pc, #20]	; (13c20 <save_led_data+0x350>)
   13c0c:	0019      	movs	r1, r3
   13c0e:	2001      	movs	r0, #1
   13c10:	4b0f      	ldr	r3, [pc, #60]	; (13c50 <save_led_data+0x380>)
   13c12:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   13c14:	4b0f      	ldr	r3, [pc, #60]	; (13c54 <save_led_data+0x384>)
   13c16:	4798      	blx	r3
}
   13c18:	46c0      	nop			; (mov r8, r8)
   13c1a:	46bd      	mov	sp, r7
   13c1c:	b005      	add	sp, #20
   13c1e:	bd90      	pop	{r4, r7, pc}
   13c20:	20001020 	.word	0x20001020
   13c24:	200003b0 	.word	0x200003b0
   13c28:	2000003c 	.word	0x2000003c
   13c2c:	20000040 	.word	0x20000040
   13c30:	20000094 	.word	0x20000094
   13c34:	200000a0 	.word	0x200000a0
   13c38:	200000ac 	.word	0x200000ac
   13c3c:	2000004c 	.word	0x2000004c
   13c40:	00019d21 	.word	0x00019d21
   13c44:	42c80000 	.word	0x42c80000
   13c48:	000195b1 	.word	0x000195b1
   13c4c:	20000070 	.word	0x20000070
   13c50:	000091f5 	.word	0x000091f5
   13c54:	0000939d 	.word	0x0000939d
   13c58:	200000c4 	.word	0x200000c4
   13c5c:	200000b5 	.word	0x200000b5
   13c60:	200000b6 	.word	0x200000b6
   13c64:	200000b7 	.word	0x200000b7
   13c68:	200000b8 	.word	0x200000b8
   13c6c:	200000b9 	.word	0x200000b9
   13c70:	200000ba 	.word	0x200000ba
   13c74:	200000bb 	.word	0x200000bb
   13c78:	200000bc 	.word	0x200000bc
   13c7c:	200000bd 	.word	0x200000bd
   13c80:	200000be 	.word	0x200000be
   13c84:	200000bf 	.word	0x200000bf
   13c88:	200000c0 	.word	0x200000c0
   13c8c:	200000c1 	.word	0x200000c1
   13c90:	200000c2 	.word	0x200000c2
   13c94:	200000c3 	.word	0x200000c3
   13c98:	200003a8 	.word	0x200003a8
   13c9c:	200003aa 	.word	0x200003aa

00013ca0 <restore_led_data>:

void restore_led_data(){
   13ca0:	b590      	push	{r4, r7, lr}
   13ca2:	b09f      	sub	sp, #124	; 0x7c
   13ca4:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(0, eeprom_data);
   13ca6:	4bc3      	ldr	r3, [pc, #780]	; (13fb4 <restore_led_data+0x314>)
   13ca8:	0019      	movs	r1, r3
   13caa:	2000      	movs	r0, #0
   13cac:	4bc2      	ldr	r3, [pc, #776]	; (13fb8 <restore_led_data+0x318>)
   13cae:	4798      	blx	r3
	
	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   13cb0:	4bc0      	ldr	r3, [pc, #768]	; (13fb4 <restore_led_data+0x314>)
   13cb2:	781b      	ldrb	r3, [r3, #0]
   13cb4:	2bff      	cmp	r3, #255	; 0xff
   13cb6:	d000      	beq.n	13cba <restore_led_data+0x1a>
   13cb8:	e0e7      	b.n	13e8a <restore_led_data+0x1ea>
   13cba:	4bbe      	ldr	r3, [pc, #760]	; (13fb4 <restore_led_data+0x314>)
   13cbc:	785b      	ldrb	r3, [r3, #1]
   13cbe:	2bff      	cmp	r3, #255	; 0xff
   13cc0:	d000      	beq.n	13cc4 <restore_led_data+0x24>
   13cc2:	e0e2      	b.n	13e8a <restore_led_data+0x1ea>
		SWITCHES = 0x30; // SIDE: on	HEAD: on	LIGHT: disable	IMU: disable
   13cc4:	4bbd      	ldr	r3, [pc, #756]	; (13fbc <restore_led_data+0x31c>)
   13cc6:	2230      	movs	r2, #48	; 0x30
   13cc8:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   13cca:	4bbc      	ldr	r3, [pc, #752]	; (13fbc <restore_led_data+0x31c>)
   13ccc:	781b      	ldrb	r3, [r3, #0]
   13cce:	111b      	asrs	r3, r3, #4
   13cd0:	b2db      	uxtb	r3, r3
   13cd2:	2201      	movs	r2, #1
   13cd4:	4013      	ands	r3, r2
   13cd6:	b2da      	uxtb	r2, r3
   13cd8:	4bb9      	ldr	r3, [pc, #740]	; (13fc0 <restore_led_data+0x320>)
   13cda:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   13cdc:	4bb7      	ldr	r3, [pc, #732]	; (13fbc <restore_led_data+0x31c>)
   13cde:	781b      	ldrb	r3, [r3, #0]
   13ce0:	115b      	asrs	r3, r3, #5
   13ce2:	b2db      	uxtb	r3, r3
   13ce4:	2201      	movs	r2, #1
   13ce6:	4013      	ands	r3, r2
   13ce8:	b2da      	uxtb	r2, r3
   13cea:	4bb6      	ldr	r3, [pc, #728]	; (13fc4 <restore_led_data+0x324>)
   13cec:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   13cee:	4bb3      	ldr	r3, [pc, #716]	; (13fbc <restore_led_data+0x31c>)
   13cf0:	781b      	ldrb	r3, [r3, #0]
   13cf2:	119b      	asrs	r3, r3, #6
   13cf4:	b2db      	uxtb	r3, r3
   13cf6:	2201      	movs	r2, #1
   13cf8:	4013      	ands	r3, r2
   13cfa:	b2da      	uxtb	r2, r3
   13cfc:	4bb2      	ldr	r3, [pc, #712]	; (13fc8 <restore_led_data+0x328>)
   13cfe:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   13d00:	4bae      	ldr	r3, [pc, #696]	; (13fbc <restore_led_data+0x31c>)
   13d02:	781b      	ldrb	r3, [r3, #0]
   13d04:	09db      	lsrs	r3, r3, #7
   13d06:	b2da      	uxtb	r2, r3
   13d08:	4bb0      	ldr	r3, [pc, #704]	; (13fcc <restore_led_data+0x32c>)
   13d0a:	701a      	strb	r2, [r3, #0]
		light_mode = MODE_ANALOG_COLOR_CYCLE;
   13d0c:	4bb0      	ldr	r3, [pc, #704]	; (13fd0 <restore_led_data+0x330>)
   13d0e:	2201      	movs	r2, #1
   13d10:	701a      	strb	r2, [r3, #0]

		Static_RGB.LR = 0;
   13d12:	4bb0      	ldr	r3, [pc, #704]	; (13fd4 <restore_led_data+0x334>)
   13d14:	2200      	movs	r2, #0
   13d16:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = 0xFFFF;
   13d18:	4bae      	ldr	r3, [pc, #696]	; (13fd4 <restore_led_data+0x334>)
   13d1a:	2201      	movs	r2, #1
   13d1c:	4252      	negs	r2, r2
   13d1e:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = 0;
   13d20:	4bac      	ldr	r3, [pc, #688]	; (13fd4 <restore_led_data+0x334>)
   13d22:	2200      	movs	r2, #0
   13d24:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = 0;
   13d26:	4bab      	ldr	r3, [pc, #684]	; (13fd4 <restore_led_data+0x334>)
   13d28:	2200      	movs	r2, #0
   13d2a:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = 0;
   13d2c:	4ba9      	ldr	r3, [pc, #676]	; (13fd4 <restore_led_data+0x334>)
   13d2e:	2200      	movs	r2, #0
   13d30:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = 0xFFFF;
   13d32:	4ba8      	ldr	r3, [pc, #672]	; (13fd4 <restore_led_data+0x334>)
   13d34:	2201      	movs	r2, #1
   13d36:	4252      	negs	r2, r2
   13d38:	815a      	strh	r2, [r3, #10]

		
		uint8_t default_ColorBase[9] = {0,1,2,7,1,7,9,10,1};
   13d3a:	2360      	movs	r3, #96	; 0x60
   13d3c:	18fb      	adds	r3, r7, r3
   13d3e:	4aa6      	ldr	r2, [pc, #664]	; (13fd8 <restore_led_data+0x338>)
   13d40:	ca03      	ldmia	r2!, {r0, r1}
   13d42:	c303      	stmia	r3!, {r0, r1}
   13d44:	7812      	ldrb	r2, [r2, #0]
   13d46:	701a      	strb	r2, [r3, #0]
		uint8_t default_BrightBase[9] = {255,0,0,0,3,3,0,0,2};
   13d48:	2354      	movs	r3, #84	; 0x54
   13d4a:	18fb      	adds	r3, r7, r3
   13d4c:	4aa3      	ldr	r2, [pc, #652]	; (13fdc <restore_led_data+0x33c>)
   13d4e:	ca03      	ldmia	r2!, {r0, r1}
   13d50:	c303      	stmia	r3!, {r0, r1}
   13d52:	7812      	ldrb	r2, [r2, #0]
   13d54:	701a      	strb	r2, [r3, #0]
		uint8_t default_RateBase[9] = {255,0,255,0,0,255,0,0,3};
   13d56:	2348      	movs	r3, #72	; 0x48
   13d58:	18fb      	adds	r3, r7, r3
   13d5a:	4aa1      	ldr	r2, [pc, #644]	; (13fe0 <restore_led_data+0x340>)
   13d5c:	ca03      	ldmia	r2!, {r0, r1}
   13d5e:	c303      	stmia	r3!, {r0, r1}
   13d60:	7812      	ldrb	r2, [r2, #0]
   13d62:	701a      	strb	r2, [r3, #0]
		float default_RateSens[9] = {0,0.75,0,0.5,0.5,0,0.5,0.5,0.5};
   13d64:	003b      	movs	r3, r7
   13d66:	4a9f      	ldr	r2, [pc, #636]	; (13fe4 <restore_led_data+0x344>)
   13d68:	ca13      	ldmia	r2!, {r0, r1, r4}
   13d6a:	c313      	stmia	r3!, {r0, r1, r4}
   13d6c:	ca13      	ldmia	r2!, {r0, r1, r4}
   13d6e:	c313      	stmia	r3!, {r0, r1, r4}
   13d70:	ca13      	ldmia	r2!, {r0, r1, r4}
   13d72:	c313      	stmia	r3!, {r0, r1, r4}
		float default_Brightness[9] = {0,0.25,0.5,0.5,0.5,0.5,0.5,0.5,0.5};
   13d74:	2324      	movs	r3, #36	; 0x24
   13d76:	18fb      	adds	r3, r7, r3
   13d78:	4a9b      	ldr	r2, [pc, #620]	; (13fe8 <restore_led_data+0x348>)
   13d7a:	ca13      	ldmia	r2!, {r0, r1, r4}
   13d7c:	c313      	stmia	r3!, {r0, r1, r4}
   13d7e:	ca13      	ldmia	r2!, {r0, r1, r4}
   13d80:	c313      	stmia	r3!, {r0, r1, r4}
   13d82:	ca13      	ldmia	r2!, {r0, r1, r4}
   13d84:	c313      	stmia	r3!, {r0, r1, r4}

		for(int i = 0; i < 9; i++){
   13d86:	2300      	movs	r3, #0
   13d88:	677b      	str	r3, [r7, #116]	; 0x74
   13d8a:	e031      	b.n	13df0 <restore_led_data+0x150>
			ColorBase[i] = default_ColorBase[i];
   13d8c:	2360      	movs	r3, #96	; 0x60
   13d8e:	18fa      	adds	r2, r7, r3
   13d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d92:	18d3      	adds	r3, r2, r3
   13d94:	7819      	ldrb	r1, [r3, #0]
   13d96:	4a95      	ldr	r2, [pc, #596]	; (13fec <restore_led_data+0x34c>)
   13d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d9a:	18d3      	adds	r3, r2, r3
   13d9c:	1c0a      	adds	r2, r1, #0
   13d9e:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = default_BrightBase[i];
   13da0:	2354      	movs	r3, #84	; 0x54
   13da2:	18fa      	adds	r2, r7, r3
   13da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13da6:	18d3      	adds	r3, r2, r3
   13da8:	7819      	ldrb	r1, [r3, #0]
   13daa:	4a91      	ldr	r2, [pc, #580]	; (13ff0 <restore_led_data+0x350>)
   13dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dae:	18d3      	adds	r3, r2, r3
   13db0:	1c0a      	adds	r2, r1, #0
   13db2:	701a      	strb	r2, [r3, #0]
			RateBase[i] = default_RateBase[i];
   13db4:	2348      	movs	r3, #72	; 0x48
   13db6:	18fa      	adds	r2, r7, r3
   13db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dba:	18d3      	adds	r3, r2, r3
   13dbc:	7819      	ldrb	r1, [r3, #0]
   13dbe:	4a8d      	ldr	r2, [pc, #564]	; (13ff4 <restore_led_data+0x354>)
   13dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dc2:	18d3      	adds	r3, r2, r3
   13dc4:	1c0a      	adds	r2, r1, #0
   13dc6:	701a      	strb	r2, [r3, #0]
			RateSens[i] = default_RateSens[i];
   13dc8:	003b      	movs	r3, r7
   13dca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13dcc:	0092      	lsls	r2, r2, #2
   13dce:	58d1      	ldr	r1, [r2, r3]
   13dd0:	4b89      	ldr	r3, [pc, #548]	; (13ff8 <restore_led_data+0x358>)
   13dd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13dd4:	0092      	lsls	r2, r2, #2
   13dd6:	50d1      	str	r1, [r2, r3]
			Brightness[i] = default_Brightness[i];
   13dd8:	2324      	movs	r3, #36	; 0x24
   13dda:	18fb      	adds	r3, r7, r3
   13ddc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13dde:	0092      	lsls	r2, r2, #2
   13de0:	58d1      	ldr	r1, [r2, r3]
   13de2:	4b86      	ldr	r3, [pc, #536]	; (13ffc <restore_led_data+0x35c>)
   13de4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13de6:	0092      	lsls	r2, r2, #2
   13de8:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 9; i++){
   13dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dec:	3301      	adds	r3, #1
   13dee:	677b      	str	r3, [r7, #116]	; 0x74
   13df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13df2:	2b08      	cmp	r3, #8
   13df4:	ddca      	ble.n	13d8c <restore_led_data+0xec>
		}

		Custom_RGB.LR = 0;
   13df6:	4b82      	ldr	r3, [pc, #520]	; (14000 <restore_led_data+0x360>)
   13df8:	2200      	movs	r2, #0
   13dfa:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = 0;
   13dfc:	4b80      	ldr	r3, [pc, #512]	; (14000 <restore_led_data+0x360>)
   13dfe:	2200      	movs	r2, #0
   13e00:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = 0xFFFF;
   13e02:	4b7f      	ldr	r3, [pc, #508]	; (14000 <restore_led_data+0x360>)
   13e04:	2201      	movs	r2, #1
   13e06:	4252      	negs	r2, r2
   13e08:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = 0;
   13e0a:	4b7d      	ldr	r3, [pc, #500]	; (14000 <restore_led_data+0x360>)
   13e0c:	2200      	movs	r2, #0
   13e0e:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = 0xFFFF;
   13e10:	4b7b      	ldr	r3, [pc, #492]	; (14000 <restore_led_data+0x360>)
   13e12:	2201      	movs	r2, #1
   13e14:	4252      	negs	r2, r2
   13e16:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = 0;
   13e18:	4b79      	ldr	r3, [pc, #484]	; (14000 <restore_led_data+0x360>)
   13e1a:	2200      	movs	r2, #0
   13e1c:	815a      	strh	r2, [r3, #10]

		Digital_Static_Zoom = 1;
   13e1e:	4b79      	ldr	r3, [pc, #484]	; (14004 <restore_led_data+0x364>)
   13e20:	2201      	movs	r2, #1
   13e22:	701a      	strb	r2, [r3, #0]
		Digital_Static_Shift = 50;
   13e24:	4b78      	ldr	r3, [pc, #480]	; (14008 <restore_led_data+0x368>)
   13e26:	2232      	movs	r2, #50	; 0x32
   13e28:	701a      	strb	r2, [r3, #0]
		Digital_Static_Brightness = 50;
   13e2a:	4b78      	ldr	r3, [pc, #480]	; (1400c <restore_led_data+0x36c>)
   13e2c:	2232      	movs	r2, #50	; 0x32
   13e2e:	701a      	strb	r2, [r3, #0]
		Digital_Skittles_Brightness = 50;
   13e30:	4b77      	ldr	r3, [pc, #476]	; (14010 <restore_led_data+0x370>)
   13e32:	2232      	movs	r2, #50	; 0x32
   13e34:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Zoom = 1;
   13e36:	4b77      	ldr	r3, [pc, #476]	; (14014 <restore_led_data+0x374>)
   13e38:	2201      	movs	r2, #1
   13e3a:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Rate = 50;
   13e3c:	4b76      	ldr	r3, [pc, #472]	; (14018 <restore_led_data+0x378>)
   13e3e:	2232      	movs	r2, #50	; 0x32
   13e40:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Brightness = 50;
   13e42:	4b76      	ldr	r3, [pc, #472]	; (1401c <restore_led_data+0x37c>)
   13e44:	2232      	movs	r2, #50	; 0x32
   13e46:	701a      	strb	r2, [r3, #0]
		Digital_Compass_Brightness = 50;
   13e48:	4b75      	ldr	r3, [pc, #468]	; (14020 <restore_led_data+0x380>)
   13e4a:	2232      	movs	r2, #50	; 0x32
   13e4c:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Zoom = 1;
   13e4e:	4b75      	ldr	r3, [pc, #468]	; (14024 <restore_led_data+0x384>)
   13e50:	2201      	movs	r2, #1
   13e52:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Shift = 50;
   13e54:	4b74      	ldr	r3, [pc, #464]	; (14028 <restore_led_data+0x388>)
   13e56:	2232      	movs	r2, #50	; 0x32
   13e58:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Sens = 50;
   13e5a:	4b74      	ldr	r3, [pc, #464]	; (1402c <restore_led_data+0x38c>)
   13e5c:	2232      	movs	r2, #50	; 0x32
   13e5e:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Brightness = 50;
   13e60:	4b73      	ldr	r3, [pc, #460]	; (14030 <restore_led_data+0x390>)
   13e62:	2232      	movs	r2, #50	; 0x32
   13e64:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Zoom = 7;
   13e66:	4b73      	ldr	r3, [pc, #460]	; (14034 <restore_led_data+0x394>)
   13e68:	2207      	movs	r2, #7
   13e6a:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Rate = 50;
   13e6c:	4b72      	ldr	r3, [pc, #456]	; (14038 <restore_led_data+0x398>)
   13e6e:	2232      	movs	r2, #50	; 0x32
   13e70:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Brightness = 50;
   13e72:	4b72      	ldr	r3, [pc, #456]	; (1403c <restore_led_data+0x39c>)
   13e74:	2232      	movs	r2, #50	; 0x32
   13e76:	701a      	strb	r2, [r3, #0]
		shuffled_analog_modes = 0;
   13e78:	4b71      	ldr	r3, [pc, #452]	; (14040 <restore_led_data+0x3a0>)
   13e7a:	2200      	movs	r2, #0
   13e7c:	801a      	strh	r2, [r3, #0]
		shuffled_digital_modes = 0;
   13e7e:	4b71      	ldr	r3, [pc, #452]	; (14044 <restore_led_data+0x3a4>)
   13e80:	2200      	movs	r2, #0
   13e82:	801a      	strh	r2, [r3, #0]

		save_led_data();
   13e84:	4b70      	ldr	r3, [pc, #448]	; (14048 <restore_led_data+0x3a8>)
   13e86:	4798      	blx	r3
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   13e88:	e232      	b.n	142f0 <restore_led_data+0x650>
	}
	else{ // else restore the stored data
		SWITCHES = eeprom_data[0];
   13e8a:	4b4a      	ldr	r3, [pc, #296]	; (13fb4 <restore_led_data+0x314>)
   13e8c:	781a      	ldrb	r2, [r3, #0]
   13e8e:	4b4b      	ldr	r3, [pc, #300]	; (13fbc <restore_led_data+0x31c>)
   13e90:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   13e92:	4b4a      	ldr	r3, [pc, #296]	; (13fbc <restore_led_data+0x31c>)
   13e94:	781b      	ldrb	r3, [r3, #0]
   13e96:	111b      	asrs	r3, r3, #4
   13e98:	b2db      	uxtb	r3, r3
   13e9a:	2201      	movs	r2, #1
   13e9c:	4013      	ands	r3, r2
   13e9e:	b2da      	uxtb	r2, r3
   13ea0:	4b47      	ldr	r3, [pc, #284]	; (13fc0 <restore_led_data+0x320>)
   13ea2:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   13ea4:	4b45      	ldr	r3, [pc, #276]	; (13fbc <restore_led_data+0x31c>)
   13ea6:	781b      	ldrb	r3, [r3, #0]
   13ea8:	115b      	asrs	r3, r3, #5
   13eaa:	b2db      	uxtb	r3, r3
   13eac:	2201      	movs	r2, #1
   13eae:	4013      	ands	r3, r2
   13eb0:	b2da      	uxtb	r2, r3
   13eb2:	4b44      	ldr	r3, [pc, #272]	; (13fc4 <restore_led_data+0x324>)
   13eb4:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   13eb6:	4b41      	ldr	r3, [pc, #260]	; (13fbc <restore_led_data+0x31c>)
   13eb8:	781b      	ldrb	r3, [r3, #0]
   13eba:	119b      	asrs	r3, r3, #6
   13ebc:	b2db      	uxtb	r3, r3
   13ebe:	2201      	movs	r2, #1
   13ec0:	4013      	ands	r3, r2
   13ec2:	b2da      	uxtb	r2, r3
   13ec4:	4b40      	ldr	r3, [pc, #256]	; (13fc8 <restore_led_data+0x328>)
   13ec6:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   13ec8:	4b3c      	ldr	r3, [pc, #240]	; (13fbc <restore_led_data+0x31c>)
   13eca:	781b      	ldrb	r3, [r3, #0]
   13ecc:	09db      	lsrs	r3, r3, #7
   13ece:	b2da      	uxtb	r2, r3
   13ed0:	4b3e      	ldr	r3, [pc, #248]	; (13fcc <restore_led_data+0x32c>)
   13ed2:	701a      	strb	r2, [r3, #0]
		light_mode = eeprom_data[1];
   13ed4:	4b37      	ldr	r3, [pc, #220]	; (13fb4 <restore_led_data+0x314>)
   13ed6:	785a      	ldrb	r2, [r3, #1]
   13ed8:	4b3d      	ldr	r3, [pc, #244]	; (13fd0 <restore_led_data+0x330>)
   13eda:	701a      	strb	r2, [r3, #0]
		Static_RGB.LR = eeprom_data[2];
   13edc:	4b35      	ldr	r3, [pc, #212]	; (13fb4 <restore_led_data+0x314>)
   13ede:	789b      	ldrb	r3, [r3, #2]
   13ee0:	b29a      	uxth	r2, r3
   13ee2:	4b3c      	ldr	r3, [pc, #240]	; (13fd4 <restore_led_data+0x334>)
   13ee4:	801a      	strh	r2, [r3, #0]
		Static_RGB.LR = (Static_RGB.LR | (eeprom_data[3] << 8));
   13ee6:	4b3b      	ldr	r3, [pc, #236]	; (13fd4 <restore_led_data+0x334>)
   13ee8:	881b      	ldrh	r3, [r3, #0]
   13eea:	b21a      	sxth	r2, r3
   13eec:	4b31      	ldr	r3, [pc, #196]	; (13fb4 <restore_led_data+0x314>)
   13eee:	78db      	ldrb	r3, [r3, #3]
   13ef0:	021b      	lsls	r3, r3, #8
   13ef2:	b21b      	sxth	r3, r3
   13ef4:	4313      	orrs	r3, r2
   13ef6:	b21b      	sxth	r3, r3
   13ef8:	b29a      	uxth	r2, r3
   13efa:	4b36      	ldr	r3, [pc, #216]	; (13fd4 <restore_led_data+0x334>)
   13efc:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = eeprom_data[4];
   13efe:	4b2d      	ldr	r3, [pc, #180]	; (13fb4 <restore_led_data+0x314>)
   13f00:	791b      	ldrb	r3, [r3, #4]
   13f02:	b29a      	uxth	r2, r3
   13f04:	4b33      	ldr	r3, [pc, #204]	; (13fd4 <restore_led_data+0x334>)
   13f06:	805a      	strh	r2, [r3, #2]
		Static_RGB.LG = (Static_RGB.LG | (eeprom_data[5] << 8));
   13f08:	4b32      	ldr	r3, [pc, #200]	; (13fd4 <restore_led_data+0x334>)
   13f0a:	885b      	ldrh	r3, [r3, #2]
   13f0c:	b21a      	sxth	r2, r3
   13f0e:	4b29      	ldr	r3, [pc, #164]	; (13fb4 <restore_led_data+0x314>)
   13f10:	795b      	ldrb	r3, [r3, #5]
   13f12:	021b      	lsls	r3, r3, #8
   13f14:	b21b      	sxth	r3, r3
   13f16:	4313      	orrs	r3, r2
   13f18:	b21b      	sxth	r3, r3
   13f1a:	b29a      	uxth	r2, r3
   13f1c:	4b2d      	ldr	r3, [pc, #180]	; (13fd4 <restore_led_data+0x334>)
   13f1e:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = eeprom_data[6];
   13f20:	4b24      	ldr	r3, [pc, #144]	; (13fb4 <restore_led_data+0x314>)
   13f22:	799b      	ldrb	r3, [r3, #6]
   13f24:	b29a      	uxth	r2, r3
   13f26:	4b2b      	ldr	r3, [pc, #172]	; (13fd4 <restore_led_data+0x334>)
   13f28:	809a      	strh	r2, [r3, #4]
		Static_RGB.LB = (Static_RGB.LB | (eeprom_data[7] << 8));
   13f2a:	4b2a      	ldr	r3, [pc, #168]	; (13fd4 <restore_led_data+0x334>)
   13f2c:	889b      	ldrh	r3, [r3, #4]
   13f2e:	b21a      	sxth	r2, r3
   13f30:	4b20      	ldr	r3, [pc, #128]	; (13fb4 <restore_led_data+0x314>)
   13f32:	79db      	ldrb	r3, [r3, #7]
   13f34:	021b      	lsls	r3, r3, #8
   13f36:	b21b      	sxth	r3, r3
   13f38:	4313      	orrs	r3, r2
   13f3a:	b21b      	sxth	r3, r3
   13f3c:	b29a      	uxth	r2, r3
   13f3e:	4b25      	ldr	r3, [pc, #148]	; (13fd4 <restore_led_data+0x334>)
   13f40:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = eeprom_data[8];
   13f42:	4b1c      	ldr	r3, [pc, #112]	; (13fb4 <restore_led_data+0x314>)
   13f44:	7a1b      	ldrb	r3, [r3, #8]
   13f46:	b29a      	uxth	r2, r3
   13f48:	4b22      	ldr	r3, [pc, #136]	; (13fd4 <restore_led_data+0x334>)
   13f4a:	80da      	strh	r2, [r3, #6]
		Static_RGB.RR = (Static_RGB.RR | (eeprom_data[9] << 8));
   13f4c:	4b21      	ldr	r3, [pc, #132]	; (13fd4 <restore_led_data+0x334>)
   13f4e:	88db      	ldrh	r3, [r3, #6]
   13f50:	b21a      	sxth	r2, r3
   13f52:	4b18      	ldr	r3, [pc, #96]	; (13fb4 <restore_led_data+0x314>)
   13f54:	7a5b      	ldrb	r3, [r3, #9]
   13f56:	021b      	lsls	r3, r3, #8
   13f58:	b21b      	sxth	r3, r3
   13f5a:	4313      	orrs	r3, r2
   13f5c:	b21b      	sxth	r3, r3
   13f5e:	b29a      	uxth	r2, r3
   13f60:	4b1c      	ldr	r3, [pc, #112]	; (13fd4 <restore_led_data+0x334>)
   13f62:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = eeprom_data[10];
   13f64:	4b13      	ldr	r3, [pc, #76]	; (13fb4 <restore_led_data+0x314>)
   13f66:	7a9b      	ldrb	r3, [r3, #10]
   13f68:	b29a      	uxth	r2, r3
   13f6a:	4b1a      	ldr	r3, [pc, #104]	; (13fd4 <restore_led_data+0x334>)
   13f6c:	811a      	strh	r2, [r3, #8]
		Static_RGB.RG = (Static_RGB.RG | (eeprom_data[11] << 8));
   13f6e:	4b19      	ldr	r3, [pc, #100]	; (13fd4 <restore_led_data+0x334>)
   13f70:	891b      	ldrh	r3, [r3, #8]
   13f72:	b21a      	sxth	r2, r3
   13f74:	4b0f      	ldr	r3, [pc, #60]	; (13fb4 <restore_led_data+0x314>)
   13f76:	7adb      	ldrb	r3, [r3, #11]
   13f78:	021b      	lsls	r3, r3, #8
   13f7a:	b21b      	sxth	r3, r3
   13f7c:	4313      	orrs	r3, r2
   13f7e:	b21b      	sxth	r3, r3
   13f80:	b29a      	uxth	r2, r3
   13f82:	4b14      	ldr	r3, [pc, #80]	; (13fd4 <restore_led_data+0x334>)
   13f84:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = eeprom_data[12];
   13f86:	4b0b      	ldr	r3, [pc, #44]	; (13fb4 <restore_led_data+0x314>)
   13f88:	7b1b      	ldrb	r3, [r3, #12]
   13f8a:	b29a      	uxth	r2, r3
   13f8c:	4b11      	ldr	r3, [pc, #68]	; (13fd4 <restore_led_data+0x334>)
   13f8e:	815a      	strh	r2, [r3, #10]
		Static_RGB.RB = (Static_RGB.RB | (eeprom_data[13] << 8));
   13f90:	4b10      	ldr	r3, [pc, #64]	; (13fd4 <restore_led_data+0x334>)
   13f92:	895b      	ldrh	r3, [r3, #10]
   13f94:	b21a      	sxth	r2, r3
   13f96:	4b07      	ldr	r3, [pc, #28]	; (13fb4 <restore_led_data+0x314>)
   13f98:	7b5b      	ldrb	r3, [r3, #13]
   13f9a:	021b      	lsls	r3, r3, #8
   13f9c:	b21b      	sxth	r3, r3
   13f9e:	4313      	orrs	r3, r2
   13fa0:	b21b      	sxth	r3, r3
   13fa2:	b29a      	uxth	r2, r3
   13fa4:	4b0b      	ldr	r3, [pc, #44]	; (13fd4 <restore_led_data+0x334>)
   13fa6:	815a      	strh	r2, [r3, #10]
		int dataOffset = 14;
   13fa8:	230e      	movs	r3, #14
   13faa:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < 8; i++){
   13fac:	2300      	movs	r3, #0
   13fae:	673b      	str	r3, [r7, #112]	; 0x70
   13fb0:	e0a6      	b.n	14100 <restore_led_data+0x460>
   13fb2:	46c0      	nop			; (mov r8, r8)
   13fb4:	20001020 	.word	0x20001020
   13fb8:	00009301 	.word	0x00009301
   13fbc:	200003b0 	.word	0x200003b0
   13fc0:	200000d5 	.word	0x200000d5
   13fc4:	200003ad 	.word	0x200003ad
   13fc8:	200003ae 	.word	0x200003ae
   13fcc:	200003af 	.word	0x200003af
   13fd0:	2000003c 	.word	0x2000003c
   13fd4:	20000040 	.word	0x20000040
   13fd8:	0001c92c 	.word	0x0001c92c
   13fdc:	0001c938 	.word	0x0001c938
   13fe0:	0001c944 	.word	0x0001c944
   13fe4:	0001c950 	.word	0x0001c950
   13fe8:	0001c974 	.word	0x0001c974
   13fec:	20000094 	.word	0x20000094
   13ff0:	200000a0 	.word	0x200000a0
   13ff4:	200000ac 	.word	0x200000ac
   13ff8:	2000004c 	.word	0x2000004c
   13ffc:	20000070 	.word	0x20000070
   14000:	200000c4 	.word	0x200000c4
   14004:	200000b5 	.word	0x200000b5
   14008:	200000b6 	.word	0x200000b6
   1400c:	200000b7 	.word	0x200000b7
   14010:	200000b8 	.word	0x200000b8
   14014:	200000b9 	.word	0x200000b9
   14018:	200000ba 	.word	0x200000ba
   1401c:	200000bb 	.word	0x200000bb
   14020:	200000bc 	.word	0x200000bc
   14024:	200000bd 	.word	0x200000bd
   14028:	200000be 	.word	0x200000be
   1402c:	200000bf 	.word	0x200000bf
   14030:	200000c0 	.word	0x200000c0
   14034:	200000c1 	.word	0x200000c1
   14038:	200000c2 	.word	0x200000c2
   1403c:	200000c3 	.word	0x200000c3
   14040:	200003a8 	.word	0x200003a8
   14044:	200003aa 	.word	0x200003aa
   14048:	000138d1 	.word	0x000138d1
			ColorBase[i] = eeprom_data[dataOffset + (i*5)];
   1404c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1404e:	0013      	movs	r3, r2
   14050:	009b      	lsls	r3, r3, #2
   14052:	189a      	adds	r2, r3, r2
   14054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14056:	18d3      	adds	r3, r2, r3
   14058:	4aa7      	ldr	r2, [pc, #668]	; (142f8 <restore_led_data+0x658>)
   1405a:	5cd1      	ldrb	r1, [r2, r3]
   1405c:	4aa7      	ldr	r2, [pc, #668]	; (142fc <restore_led_data+0x65c>)
   1405e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14060:	18d3      	adds	r3, r2, r3
   14062:	1c0a      	adds	r2, r1, #0
   14064:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = eeprom_data[dataOffset + (i*5) + 1];
   14066:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14068:	0013      	movs	r3, r2
   1406a:	009b      	lsls	r3, r3, #2
   1406c:	189a      	adds	r2, r3, r2
   1406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14070:	18d3      	adds	r3, r2, r3
   14072:	3301      	adds	r3, #1
   14074:	4aa0      	ldr	r2, [pc, #640]	; (142f8 <restore_led_data+0x658>)
   14076:	5cd1      	ldrb	r1, [r2, r3]
   14078:	4aa1      	ldr	r2, [pc, #644]	; (14300 <restore_led_data+0x660>)
   1407a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1407c:	18d3      	adds	r3, r2, r3
   1407e:	1c0a      	adds	r2, r1, #0
   14080:	701a      	strb	r2, [r3, #0]
			RateBase[i] = eeprom_data[dataOffset + (i*5) + 2];
   14082:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14084:	0013      	movs	r3, r2
   14086:	009b      	lsls	r3, r3, #2
   14088:	189a      	adds	r2, r3, r2
   1408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1408c:	18d3      	adds	r3, r2, r3
   1408e:	3302      	adds	r3, #2
   14090:	4a99      	ldr	r2, [pc, #612]	; (142f8 <restore_led_data+0x658>)
   14092:	5cd1      	ldrb	r1, [r2, r3]
   14094:	4a9b      	ldr	r2, [pc, #620]	; (14304 <restore_led_data+0x664>)
   14096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14098:	18d3      	adds	r3, r2, r3
   1409a:	1c0a      	adds	r2, r1, #0
   1409c:	701a      	strb	r2, [r3, #0]
			RateSens[i] = ((float)eeprom_data[dataOffset + (i*5) + 3])/100;
   1409e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   140a0:	0013      	movs	r3, r2
   140a2:	009b      	lsls	r3, r3, #2
   140a4:	189a      	adds	r2, r3, r2
   140a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   140a8:	18d3      	adds	r3, r2, r3
   140aa:	3303      	adds	r3, #3
   140ac:	4a92      	ldr	r2, [pc, #584]	; (142f8 <restore_led_data+0x658>)
   140ae:	5cd2      	ldrb	r2, [r2, r3]
   140b0:	4b95      	ldr	r3, [pc, #596]	; (14308 <restore_led_data+0x668>)
   140b2:	0010      	movs	r0, r2
   140b4:	4798      	blx	r3
   140b6:	1c02      	adds	r2, r0, #0
   140b8:	4b94      	ldr	r3, [pc, #592]	; (1430c <restore_led_data+0x66c>)
   140ba:	4995      	ldr	r1, [pc, #596]	; (14310 <restore_led_data+0x670>)
   140bc:	1c10      	adds	r0, r2, #0
   140be:	4798      	blx	r3
   140c0:	1c03      	adds	r3, r0, #0
   140c2:	1c19      	adds	r1, r3, #0
   140c4:	4b93      	ldr	r3, [pc, #588]	; (14314 <restore_led_data+0x674>)
   140c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   140c8:	0092      	lsls	r2, r2, #2
   140ca:	50d1      	str	r1, [r2, r3]
			Brightness[i] = ((float)eeprom_data[dataOffset + (i*5) + 4])/100;
   140cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   140ce:	0013      	movs	r3, r2
   140d0:	009b      	lsls	r3, r3, #2
   140d2:	189a      	adds	r2, r3, r2
   140d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   140d6:	18d3      	adds	r3, r2, r3
   140d8:	3304      	adds	r3, #4
   140da:	4a87      	ldr	r2, [pc, #540]	; (142f8 <restore_led_data+0x658>)
   140dc:	5cd2      	ldrb	r2, [r2, r3]
   140de:	4b8a      	ldr	r3, [pc, #552]	; (14308 <restore_led_data+0x668>)
   140e0:	0010      	movs	r0, r2
   140e2:	4798      	blx	r3
   140e4:	1c02      	adds	r2, r0, #0
   140e6:	4b89      	ldr	r3, [pc, #548]	; (1430c <restore_led_data+0x66c>)
   140e8:	4989      	ldr	r1, [pc, #548]	; (14310 <restore_led_data+0x670>)
   140ea:	1c10      	adds	r0, r2, #0
   140ec:	4798      	blx	r3
   140ee:	1c03      	adds	r3, r0, #0
   140f0:	1c19      	adds	r1, r3, #0
   140f2:	4b89      	ldr	r3, [pc, #548]	; (14318 <restore_led_data+0x678>)
   140f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   140f6:	0092      	lsls	r2, r2, #2
   140f8:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 8; i++){
   140fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   140fc:	3301      	adds	r3, #1
   140fe:	673b      	str	r3, [r7, #112]	; 0x70
   14100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14102:	2b07      	cmp	r3, #7
   14104:	dda2      	ble.n	1404c <restore_led_data+0x3ac>
		}

		eeprom_emulator_read_page(1, eeprom_data);
   14106:	4b7c      	ldr	r3, [pc, #496]	; (142f8 <restore_led_data+0x658>)
   14108:	0019      	movs	r1, r3
   1410a:	2001      	movs	r0, #1
   1410c:	4b83      	ldr	r3, [pc, #524]	; (1431c <restore_led_data+0x67c>)
   1410e:	4798      	blx	r3

		ColorBase[8] = eeprom_data[0];
   14110:	4b79      	ldr	r3, [pc, #484]	; (142f8 <restore_led_data+0x658>)
   14112:	781a      	ldrb	r2, [r3, #0]
   14114:	4b79      	ldr	r3, [pc, #484]	; (142fc <restore_led_data+0x65c>)
   14116:	721a      	strb	r2, [r3, #8]
		BrightBase[8] = eeprom_data[1];
   14118:	4b77      	ldr	r3, [pc, #476]	; (142f8 <restore_led_data+0x658>)
   1411a:	785a      	ldrb	r2, [r3, #1]
   1411c:	4b78      	ldr	r3, [pc, #480]	; (14300 <restore_led_data+0x660>)
   1411e:	721a      	strb	r2, [r3, #8]
		RateBase[8] = eeprom_data[2];
   14120:	4b75      	ldr	r3, [pc, #468]	; (142f8 <restore_led_data+0x658>)
   14122:	789a      	ldrb	r2, [r3, #2]
   14124:	4b77      	ldr	r3, [pc, #476]	; (14304 <restore_led_data+0x664>)
   14126:	721a      	strb	r2, [r3, #8]
		RateSens[8] = ((float)eeprom_data[3])/100;
   14128:	4b73      	ldr	r3, [pc, #460]	; (142f8 <restore_led_data+0x658>)
   1412a:	78da      	ldrb	r2, [r3, #3]
   1412c:	4b76      	ldr	r3, [pc, #472]	; (14308 <restore_led_data+0x668>)
   1412e:	0010      	movs	r0, r2
   14130:	4798      	blx	r3
   14132:	1c02      	adds	r2, r0, #0
   14134:	4b75      	ldr	r3, [pc, #468]	; (1430c <restore_led_data+0x66c>)
   14136:	4976      	ldr	r1, [pc, #472]	; (14310 <restore_led_data+0x670>)
   14138:	1c10      	adds	r0, r2, #0
   1413a:	4798      	blx	r3
   1413c:	1c03      	adds	r3, r0, #0
   1413e:	1c1a      	adds	r2, r3, #0
   14140:	4b74      	ldr	r3, [pc, #464]	; (14314 <restore_led_data+0x674>)
   14142:	621a      	str	r2, [r3, #32]
		Brightness[8] = ((float)eeprom_data[4])/100;
   14144:	4b6c      	ldr	r3, [pc, #432]	; (142f8 <restore_led_data+0x658>)
   14146:	791a      	ldrb	r2, [r3, #4]
   14148:	4b6f      	ldr	r3, [pc, #444]	; (14308 <restore_led_data+0x668>)
   1414a:	0010      	movs	r0, r2
   1414c:	4798      	blx	r3
   1414e:	1c02      	adds	r2, r0, #0
   14150:	4b6e      	ldr	r3, [pc, #440]	; (1430c <restore_led_data+0x66c>)
   14152:	496f      	ldr	r1, [pc, #444]	; (14310 <restore_led_data+0x670>)
   14154:	1c10      	adds	r0, r2, #0
   14156:	4798      	blx	r3
   14158:	1c03      	adds	r3, r0, #0
   1415a:	1c1a      	adds	r2, r3, #0
   1415c:	4b6e      	ldr	r3, [pc, #440]	; (14318 <restore_led_data+0x678>)
   1415e:	621a      	str	r2, [r3, #32]
		Custom_RGB.LR = eeprom_data[5];
   14160:	4b65      	ldr	r3, [pc, #404]	; (142f8 <restore_led_data+0x658>)
   14162:	795b      	ldrb	r3, [r3, #5]
   14164:	b29a      	uxth	r2, r3
   14166:	4b6e      	ldr	r3, [pc, #440]	; (14320 <restore_led_data+0x680>)
   14168:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LR = (Custom_RGB.LR | (eeprom_data[6] << 8));
   1416a:	4b6d      	ldr	r3, [pc, #436]	; (14320 <restore_led_data+0x680>)
   1416c:	881b      	ldrh	r3, [r3, #0]
   1416e:	b21a      	sxth	r2, r3
   14170:	4b61      	ldr	r3, [pc, #388]	; (142f8 <restore_led_data+0x658>)
   14172:	799b      	ldrb	r3, [r3, #6]
   14174:	021b      	lsls	r3, r3, #8
   14176:	b21b      	sxth	r3, r3
   14178:	4313      	orrs	r3, r2
   1417a:	b21b      	sxth	r3, r3
   1417c:	b29a      	uxth	r2, r3
   1417e:	4b68      	ldr	r3, [pc, #416]	; (14320 <restore_led_data+0x680>)
   14180:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = eeprom_data[7];
   14182:	4b5d      	ldr	r3, [pc, #372]	; (142f8 <restore_led_data+0x658>)
   14184:	79db      	ldrb	r3, [r3, #7]
   14186:	b29a      	uxth	r2, r3
   14188:	4b65      	ldr	r3, [pc, #404]	; (14320 <restore_led_data+0x680>)
   1418a:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LG = (Custom_RGB.LG | (eeprom_data[8] << 8));
   1418c:	4b64      	ldr	r3, [pc, #400]	; (14320 <restore_led_data+0x680>)
   1418e:	885b      	ldrh	r3, [r3, #2]
   14190:	b21a      	sxth	r2, r3
   14192:	4b59      	ldr	r3, [pc, #356]	; (142f8 <restore_led_data+0x658>)
   14194:	7a1b      	ldrb	r3, [r3, #8]
   14196:	021b      	lsls	r3, r3, #8
   14198:	b21b      	sxth	r3, r3
   1419a:	4313      	orrs	r3, r2
   1419c:	b21b      	sxth	r3, r3
   1419e:	b29a      	uxth	r2, r3
   141a0:	4b5f      	ldr	r3, [pc, #380]	; (14320 <restore_led_data+0x680>)
   141a2:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = eeprom_data[9];
   141a4:	4b54      	ldr	r3, [pc, #336]	; (142f8 <restore_led_data+0x658>)
   141a6:	7a5b      	ldrb	r3, [r3, #9]
   141a8:	b29a      	uxth	r2, r3
   141aa:	4b5d      	ldr	r3, [pc, #372]	; (14320 <restore_led_data+0x680>)
   141ac:	809a      	strh	r2, [r3, #4]
		Custom_RGB.LB = (Custom_RGB.LB | (eeprom_data[10] << 8));
   141ae:	4b5c      	ldr	r3, [pc, #368]	; (14320 <restore_led_data+0x680>)
   141b0:	889b      	ldrh	r3, [r3, #4]
   141b2:	b21a      	sxth	r2, r3
   141b4:	4b50      	ldr	r3, [pc, #320]	; (142f8 <restore_led_data+0x658>)
   141b6:	7a9b      	ldrb	r3, [r3, #10]
   141b8:	021b      	lsls	r3, r3, #8
   141ba:	b21b      	sxth	r3, r3
   141bc:	4313      	orrs	r3, r2
   141be:	b21b      	sxth	r3, r3
   141c0:	b29a      	uxth	r2, r3
   141c2:	4b57      	ldr	r3, [pc, #348]	; (14320 <restore_led_data+0x680>)
   141c4:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = eeprom_data[11];
   141c6:	4b4c      	ldr	r3, [pc, #304]	; (142f8 <restore_led_data+0x658>)
   141c8:	7adb      	ldrb	r3, [r3, #11]
   141ca:	b29a      	uxth	r2, r3
   141cc:	4b54      	ldr	r3, [pc, #336]	; (14320 <restore_led_data+0x680>)
   141ce:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RR = (Custom_RGB.RR | (eeprom_data[12] << 8));
   141d0:	4b53      	ldr	r3, [pc, #332]	; (14320 <restore_led_data+0x680>)
   141d2:	88db      	ldrh	r3, [r3, #6]
   141d4:	b21a      	sxth	r2, r3
   141d6:	4b48      	ldr	r3, [pc, #288]	; (142f8 <restore_led_data+0x658>)
   141d8:	7b1b      	ldrb	r3, [r3, #12]
   141da:	021b      	lsls	r3, r3, #8
   141dc:	b21b      	sxth	r3, r3
   141de:	4313      	orrs	r3, r2
   141e0:	b21b      	sxth	r3, r3
   141e2:	b29a      	uxth	r2, r3
   141e4:	4b4e      	ldr	r3, [pc, #312]	; (14320 <restore_led_data+0x680>)
   141e6:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = eeprom_data[13];
   141e8:	4b43      	ldr	r3, [pc, #268]	; (142f8 <restore_led_data+0x658>)
   141ea:	7b5b      	ldrb	r3, [r3, #13]
   141ec:	b29a      	uxth	r2, r3
   141ee:	4b4c      	ldr	r3, [pc, #304]	; (14320 <restore_led_data+0x680>)
   141f0:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RG = (Custom_RGB.RG | (eeprom_data[14] << 8));
   141f2:	4b4b      	ldr	r3, [pc, #300]	; (14320 <restore_led_data+0x680>)
   141f4:	891b      	ldrh	r3, [r3, #8]
   141f6:	b21a      	sxth	r2, r3
   141f8:	4b3f      	ldr	r3, [pc, #252]	; (142f8 <restore_led_data+0x658>)
   141fa:	7b9b      	ldrb	r3, [r3, #14]
   141fc:	021b      	lsls	r3, r3, #8
   141fe:	b21b      	sxth	r3, r3
   14200:	4313      	orrs	r3, r2
   14202:	b21b      	sxth	r3, r3
   14204:	b29a      	uxth	r2, r3
   14206:	4b46      	ldr	r3, [pc, #280]	; (14320 <restore_led_data+0x680>)
   14208:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = eeprom_data[15];
   1420a:	4b3b      	ldr	r3, [pc, #236]	; (142f8 <restore_led_data+0x658>)
   1420c:	7bdb      	ldrb	r3, [r3, #15]
   1420e:	b29a      	uxth	r2, r3
   14210:	4b43      	ldr	r3, [pc, #268]	; (14320 <restore_led_data+0x680>)
   14212:	815a      	strh	r2, [r3, #10]
		Custom_RGB.RB = (Custom_RGB.RB | (eeprom_data[16] << 8));
   14214:	4b42      	ldr	r3, [pc, #264]	; (14320 <restore_led_data+0x680>)
   14216:	895b      	ldrh	r3, [r3, #10]
   14218:	b21a      	sxth	r2, r3
   1421a:	4b37      	ldr	r3, [pc, #220]	; (142f8 <restore_led_data+0x658>)
   1421c:	7c1b      	ldrb	r3, [r3, #16]
   1421e:	021b      	lsls	r3, r3, #8
   14220:	b21b      	sxth	r3, r3
   14222:	4313      	orrs	r3, r2
   14224:	b21b      	sxth	r3, r3
   14226:	b29a      	uxth	r2, r3
   14228:	4b3d      	ldr	r3, [pc, #244]	; (14320 <restore_led_data+0x680>)
   1422a:	815a      	strh	r2, [r3, #10]

		Digital_Static_Zoom = eeprom_data[17];
   1422c:	4b32      	ldr	r3, [pc, #200]	; (142f8 <restore_led_data+0x658>)
   1422e:	7c5a      	ldrb	r2, [r3, #17]
   14230:	4b3c      	ldr	r3, [pc, #240]	; (14324 <restore_led_data+0x684>)
   14232:	701a      	strb	r2, [r3, #0]
		Digital_Static_Shift = eeprom_data[18];
   14234:	4b30      	ldr	r3, [pc, #192]	; (142f8 <restore_led_data+0x658>)
   14236:	7c9a      	ldrb	r2, [r3, #18]
   14238:	4b3b      	ldr	r3, [pc, #236]	; (14328 <restore_led_data+0x688>)
   1423a:	701a      	strb	r2, [r3, #0]
		Digital_Static_Brightness = eeprom_data[19];
   1423c:	4b2e      	ldr	r3, [pc, #184]	; (142f8 <restore_led_data+0x658>)
   1423e:	7cda      	ldrb	r2, [r3, #19]
   14240:	4b3a      	ldr	r3, [pc, #232]	; (1432c <restore_led_data+0x68c>)
   14242:	701a      	strb	r2, [r3, #0]
		Digital_Skittles_Brightness = eeprom_data[20];
   14244:	4b2c      	ldr	r3, [pc, #176]	; (142f8 <restore_led_data+0x658>)
   14246:	7d1a      	ldrb	r2, [r3, #20]
   14248:	4b39      	ldr	r3, [pc, #228]	; (14330 <restore_led_data+0x690>)
   1424a:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Zoom = eeprom_data[21];
   1424c:	4b2a      	ldr	r3, [pc, #168]	; (142f8 <restore_led_data+0x658>)
   1424e:	7d5a      	ldrb	r2, [r3, #21]
   14250:	4b38      	ldr	r3, [pc, #224]	; (14334 <restore_led_data+0x694>)
   14252:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Rate = eeprom_data[22];
   14254:	4b28      	ldr	r3, [pc, #160]	; (142f8 <restore_led_data+0x658>)
   14256:	7d9a      	ldrb	r2, [r3, #22]
   14258:	4b37      	ldr	r3, [pc, #220]	; (14338 <restore_led_data+0x698>)
   1425a:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Brightness = eeprom_data[23];
   1425c:	4b26      	ldr	r3, [pc, #152]	; (142f8 <restore_led_data+0x658>)
   1425e:	7dda      	ldrb	r2, [r3, #23]
   14260:	4b36      	ldr	r3, [pc, #216]	; (1433c <restore_led_data+0x69c>)
   14262:	701a      	strb	r2, [r3, #0]
		Digital_Compass_Brightness = eeprom_data[24];
   14264:	4b24      	ldr	r3, [pc, #144]	; (142f8 <restore_led_data+0x658>)
   14266:	7e1a      	ldrb	r2, [r3, #24]
   14268:	4b35      	ldr	r3, [pc, #212]	; (14340 <restore_led_data+0x6a0>)
   1426a:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Zoom = eeprom_data[25];
   1426c:	4b22      	ldr	r3, [pc, #136]	; (142f8 <restore_led_data+0x658>)
   1426e:	7e5a      	ldrb	r2, [r3, #25]
   14270:	4b34      	ldr	r3, [pc, #208]	; (14344 <restore_led_data+0x6a4>)
   14272:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Shift = eeprom_data[26];
   14274:	4b20      	ldr	r3, [pc, #128]	; (142f8 <restore_led_data+0x658>)
   14276:	7e9a      	ldrb	r2, [r3, #26]
   14278:	4b33      	ldr	r3, [pc, #204]	; (14348 <restore_led_data+0x6a8>)
   1427a:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Sens = eeprom_data[27];
   1427c:	4b1e      	ldr	r3, [pc, #120]	; (142f8 <restore_led_data+0x658>)
   1427e:	7eda      	ldrb	r2, [r3, #27]
   14280:	4b32      	ldr	r3, [pc, #200]	; (1434c <restore_led_data+0x6ac>)
   14282:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Brightness = eeprom_data[28];
   14284:	4b1c      	ldr	r3, [pc, #112]	; (142f8 <restore_led_data+0x658>)
   14286:	7f1a      	ldrb	r2, [r3, #28]
   14288:	4b31      	ldr	r3, [pc, #196]	; (14350 <restore_led_data+0x6b0>)
   1428a:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Zoom = eeprom_data[29];
   1428c:	4b1a      	ldr	r3, [pc, #104]	; (142f8 <restore_led_data+0x658>)
   1428e:	7f5a      	ldrb	r2, [r3, #29]
   14290:	4b30      	ldr	r3, [pc, #192]	; (14354 <restore_led_data+0x6b4>)
   14292:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Rate = eeprom_data[30];
   14294:	4b18      	ldr	r3, [pc, #96]	; (142f8 <restore_led_data+0x658>)
   14296:	7f9a      	ldrb	r2, [r3, #30]
   14298:	4b2f      	ldr	r3, [pc, #188]	; (14358 <restore_led_data+0x6b8>)
   1429a:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Brightness = eeprom_data[31];
   1429c:	4b16      	ldr	r3, [pc, #88]	; (142f8 <restore_led_data+0x658>)
   1429e:	7fda      	ldrb	r2, [r3, #31]
   142a0:	4b2e      	ldr	r3, [pc, #184]	; (1435c <restore_led_data+0x6bc>)
   142a2:	701a      	strb	r2, [r3, #0]
		shuffled_analog_modes = eeprom_data[32];
   142a4:	4b14      	ldr	r3, [pc, #80]	; (142f8 <restore_led_data+0x658>)
   142a6:	2220      	movs	r2, #32
   142a8:	5c9b      	ldrb	r3, [r3, r2]
   142aa:	b29a      	uxth	r2, r3
   142ac:	4b2c      	ldr	r3, [pc, #176]	; (14360 <restore_led_data+0x6c0>)
   142ae:	801a      	strh	r2, [r3, #0]
		shuffled_analog_modes |= (eeprom_data[33] << 8);
   142b0:	4b11      	ldr	r3, [pc, #68]	; (142f8 <restore_led_data+0x658>)
   142b2:	2221      	movs	r2, #33	; 0x21
   142b4:	5c9b      	ldrb	r3, [r3, r2]
   142b6:	021b      	lsls	r3, r3, #8
   142b8:	b21a      	sxth	r2, r3
   142ba:	4b29      	ldr	r3, [pc, #164]	; (14360 <restore_led_data+0x6c0>)
   142bc:	881b      	ldrh	r3, [r3, #0]
   142be:	b21b      	sxth	r3, r3
   142c0:	4313      	orrs	r3, r2
   142c2:	b21b      	sxth	r3, r3
   142c4:	b29a      	uxth	r2, r3
   142c6:	4b26      	ldr	r3, [pc, #152]	; (14360 <restore_led_data+0x6c0>)
   142c8:	801a      	strh	r2, [r3, #0]
		shuffled_digital_modes = eeprom_data[34];
   142ca:	4b0b      	ldr	r3, [pc, #44]	; (142f8 <restore_led_data+0x658>)
   142cc:	2222      	movs	r2, #34	; 0x22
   142ce:	5c9b      	ldrb	r3, [r3, r2]
   142d0:	b29a      	uxth	r2, r3
   142d2:	4b24      	ldr	r3, [pc, #144]	; (14364 <restore_led_data+0x6c4>)
   142d4:	801a      	strh	r2, [r3, #0]
		shuffled_digital_modes |= (eeprom_data[35] << 8);
   142d6:	4b08      	ldr	r3, [pc, #32]	; (142f8 <restore_led_data+0x658>)
   142d8:	2223      	movs	r2, #35	; 0x23
   142da:	5c9b      	ldrb	r3, [r3, r2]
   142dc:	021b      	lsls	r3, r3, #8
   142de:	b21a      	sxth	r2, r3
   142e0:	4b20      	ldr	r3, [pc, #128]	; (14364 <restore_led_data+0x6c4>)
   142e2:	881b      	ldrh	r3, [r3, #0]
   142e4:	b21b      	sxth	r3, r3
   142e6:	4313      	orrs	r3, r2
   142e8:	b21b      	sxth	r3, r3
   142ea:	b29a      	uxth	r2, r3
   142ec:	4b1d      	ldr	r3, [pc, #116]	; (14364 <restore_led_data+0x6c4>)
   142ee:	801a      	strh	r2, [r3, #0]
	}
}
   142f0:	46c0      	nop			; (mov r8, r8)
   142f2:	46bd      	mov	sp, r7
   142f4:	b01f      	add	sp, #124	; 0x7c
   142f6:	bd90      	pop	{r4, r7, pc}
   142f8:	20001020 	.word	0x20001020
   142fc:	20000094 	.word	0x20000094
   14300:	200000a0 	.word	0x200000a0
   14304:	200000ac 	.word	0x200000ac
   14308:	0001a379 	.word	0x0001a379
   1430c:	00019941 	.word	0x00019941
   14310:	42c80000 	.word	0x42c80000
   14314:	2000004c 	.word	0x2000004c
   14318:	20000070 	.word	0x20000070
   1431c:	00009301 	.word	0x00009301
   14320:	200000c4 	.word	0x200000c4
   14324:	200000b5 	.word	0x200000b5
   14328:	200000b6 	.word	0x200000b6
   1432c:	200000b7 	.word	0x200000b7
   14330:	200000b8 	.word	0x200000b8
   14334:	200000b9 	.word	0x200000b9
   14338:	200000ba 	.word	0x200000ba
   1433c:	200000bb 	.word	0x200000bb
   14340:	200000bc 	.word	0x200000bc
   14344:	200000bd 	.word	0x200000bd
   14348:	200000be 	.word	0x200000be
   1434c:	200000bf 	.word	0x200000bf
   14350:	200000c0 	.word	0x200000c0
   14354:	200000c1 	.word	0x200000c1
   14358:	200000c2 	.word	0x200000c2
   1435c:	200000c3 	.word	0x200000c3
   14360:	200003a8 	.word	0x200003a8
   14364:	200003aa 	.word	0x200003aa

00014368 <save_cal_data>:

void save_cal_data()
{
   14368:	b580      	push	{r7, lr}
   1436a:	b082      	sub	sp, #8
   1436c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   1436e:	2300      	movs	r3, #0
   14370:	607b      	str	r3, [r7, #4]
   14372:	e005      	b.n	14380 <save_cal_data+0x18>
		eeprom_data[0] = 0;
   14374:	4b44      	ldr	r3, [pc, #272]	; (14488 <save_cal_data+0x120>)
   14376:	2200      	movs	r2, #0
   14378:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   1437a:	687b      	ldr	r3, [r7, #4]
   1437c:	3301      	adds	r3, #1
   1437e:	607b      	str	r3, [r7, #4]
   14380:	687b      	ldr	r3, [r7, #4]
   14382:	2b3b      	cmp	r3, #59	; 0x3b
   14384:	ddf6      	ble.n	14374 <save_cal_data+0xc>
	}

	eeprom_data[0] = ((gBiasRaw[0]) & 0xFF00) >> 8;
   14386:	4b41      	ldr	r3, [pc, #260]	; (1448c <save_cal_data+0x124>)
   14388:	2200      	movs	r2, #0
   1438a:	5e9b      	ldrsh	r3, [r3, r2]
   1438c:	121b      	asrs	r3, r3, #8
   1438e:	b2da      	uxtb	r2, r3
   14390:	4b3d      	ldr	r3, [pc, #244]	; (14488 <save_cal_data+0x120>)
   14392:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ((gBiasRaw[0]) & 0xFF);
   14394:	4b3d      	ldr	r3, [pc, #244]	; (1448c <save_cal_data+0x124>)
   14396:	2200      	movs	r2, #0
   14398:	5e9b      	ldrsh	r3, [r3, r2]
   1439a:	b2da      	uxtb	r2, r3
   1439c:	4b3a      	ldr	r3, [pc, #232]	; (14488 <save_cal_data+0x120>)
   1439e:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = ((gBiasRaw[1]) & 0xFF00) >> 8;
   143a0:	4b3a      	ldr	r3, [pc, #232]	; (1448c <save_cal_data+0x124>)
   143a2:	2202      	movs	r2, #2
   143a4:	5e9b      	ldrsh	r3, [r3, r2]
   143a6:	121b      	asrs	r3, r3, #8
   143a8:	b2da      	uxtb	r2, r3
   143aa:	4b37      	ldr	r3, [pc, #220]	; (14488 <save_cal_data+0x120>)
   143ac:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = ((gBiasRaw[1]) & 0xFF);
   143ae:	4b37      	ldr	r3, [pc, #220]	; (1448c <save_cal_data+0x124>)
   143b0:	2202      	movs	r2, #2
   143b2:	5e9b      	ldrsh	r3, [r3, r2]
   143b4:	b2da      	uxtb	r2, r3
   143b6:	4b34      	ldr	r3, [pc, #208]	; (14488 <save_cal_data+0x120>)
   143b8:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = ((gBiasRaw[2]) & 0xFF00) >> 8;
   143ba:	4b34      	ldr	r3, [pc, #208]	; (1448c <save_cal_data+0x124>)
   143bc:	2204      	movs	r2, #4
   143be:	5e9b      	ldrsh	r3, [r3, r2]
   143c0:	121b      	asrs	r3, r3, #8
   143c2:	b2da      	uxtb	r2, r3
   143c4:	4b30      	ldr	r3, [pc, #192]	; (14488 <save_cal_data+0x120>)
   143c6:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = ((gBiasRaw[2]) & 0xFF);
   143c8:	4b30      	ldr	r3, [pc, #192]	; (1448c <save_cal_data+0x124>)
   143ca:	2204      	movs	r2, #4
   143cc:	5e9b      	ldrsh	r3, [r3, r2]
   143ce:	b2da      	uxtb	r2, r3
   143d0:	4b2d      	ldr	r3, [pc, #180]	; (14488 <save_cal_data+0x120>)
   143d2:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = ((aBiasRaw[0]) & 0xFF00) >> 8;
   143d4:	4b2e      	ldr	r3, [pc, #184]	; (14490 <save_cal_data+0x128>)
   143d6:	2200      	movs	r2, #0
   143d8:	5e9b      	ldrsh	r3, [r3, r2]
   143da:	121b      	asrs	r3, r3, #8
   143dc:	b2da      	uxtb	r2, r3
   143de:	4b2a      	ldr	r3, [pc, #168]	; (14488 <save_cal_data+0x120>)
   143e0:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = ((aBiasRaw[0]) & 0xFF);
   143e2:	4b2b      	ldr	r3, [pc, #172]	; (14490 <save_cal_data+0x128>)
   143e4:	2200      	movs	r2, #0
   143e6:	5e9b      	ldrsh	r3, [r3, r2]
   143e8:	b2da      	uxtb	r2, r3
   143ea:	4b27      	ldr	r3, [pc, #156]	; (14488 <save_cal_data+0x120>)
   143ec:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = ((aBiasRaw[1]) & 0xFF00) >> 8;
   143ee:	4b28      	ldr	r3, [pc, #160]	; (14490 <save_cal_data+0x128>)
   143f0:	2202      	movs	r2, #2
   143f2:	5e9b      	ldrsh	r3, [r3, r2]
   143f4:	121b      	asrs	r3, r3, #8
   143f6:	b2da      	uxtb	r2, r3
   143f8:	4b23      	ldr	r3, [pc, #140]	; (14488 <save_cal_data+0x120>)
   143fa:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = ((aBiasRaw[1]) & 0xFF);
   143fc:	4b24      	ldr	r3, [pc, #144]	; (14490 <save_cal_data+0x128>)
   143fe:	2202      	movs	r2, #2
   14400:	5e9b      	ldrsh	r3, [r3, r2]
   14402:	b2da      	uxtb	r2, r3
   14404:	4b20      	ldr	r3, [pc, #128]	; (14488 <save_cal_data+0x120>)
   14406:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = ((aBiasRaw[2]) & 0xFF00) >> 8;
   14408:	4b21      	ldr	r3, [pc, #132]	; (14490 <save_cal_data+0x128>)
   1440a:	2204      	movs	r2, #4
   1440c:	5e9b      	ldrsh	r3, [r3, r2]
   1440e:	121b      	asrs	r3, r3, #8
   14410:	b2da      	uxtb	r2, r3
   14412:	4b1d      	ldr	r3, [pc, #116]	; (14488 <save_cal_data+0x120>)
   14414:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = ((aBiasRaw[2]) & 0xFF);
   14416:	4b1e      	ldr	r3, [pc, #120]	; (14490 <save_cal_data+0x128>)
   14418:	2204      	movs	r2, #4
   1441a:	5e9b      	ldrsh	r3, [r3, r2]
   1441c:	b2da      	uxtb	r2, r3
   1441e:	4b1a      	ldr	r3, [pc, #104]	; (14488 <save_cal_data+0x120>)
   14420:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = ((mBiasRaw[0]) & 0xFF00) >> 8;
   14422:	4b1c      	ldr	r3, [pc, #112]	; (14494 <save_cal_data+0x12c>)
   14424:	2200      	movs	r2, #0
   14426:	5e9b      	ldrsh	r3, [r3, r2]
   14428:	121b      	asrs	r3, r3, #8
   1442a:	b2da      	uxtb	r2, r3
   1442c:	4b16      	ldr	r3, [pc, #88]	; (14488 <save_cal_data+0x120>)
   1442e:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = ((mBiasRaw[0]) & 0xFF);
   14430:	4b18      	ldr	r3, [pc, #96]	; (14494 <save_cal_data+0x12c>)
   14432:	2200      	movs	r2, #0
   14434:	5e9b      	ldrsh	r3, [r3, r2]
   14436:	b2da      	uxtb	r2, r3
   14438:	4b13      	ldr	r3, [pc, #76]	; (14488 <save_cal_data+0x120>)
   1443a:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = ((mBiasRaw[1]) & 0xFF00) >> 8;
   1443c:	4b15      	ldr	r3, [pc, #84]	; (14494 <save_cal_data+0x12c>)
   1443e:	2202      	movs	r2, #2
   14440:	5e9b      	ldrsh	r3, [r3, r2]
   14442:	121b      	asrs	r3, r3, #8
   14444:	b2da      	uxtb	r2, r3
   14446:	4b10      	ldr	r3, [pc, #64]	; (14488 <save_cal_data+0x120>)
   14448:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = ((mBiasRaw[1]) & 0xFF);
   1444a:	4b12      	ldr	r3, [pc, #72]	; (14494 <save_cal_data+0x12c>)
   1444c:	2202      	movs	r2, #2
   1444e:	5e9b      	ldrsh	r3, [r3, r2]
   14450:	b2da      	uxtb	r2, r3
   14452:	4b0d      	ldr	r3, [pc, #52]	; (14488 <save_cal_data+0x120>)
   14454:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = ((mBiasRaw[2]) & 0xFF00) >> 8;
   14456:	4b0f      	ldr	r3, [pc, #60]	; (14494 <save_cal_data+0x12c>)
   14458:	2204      	movs	r2, #4
   1445a:	5e9b      	ldrsh	r3, [r3, r2]
   1445c:	121b      	asrs	r3, r3, #8
   1445e:	b2da      	uxtb	r2, r3
   14460:	4b09      	ldr	r3, [pc, #36]	; (14488 <save_cal_data+0x120>)
   14462:	741a      	strb	r2, [r3, #16]
	eeprom_data[17] = ((mBiasRaw[2]) & 0xFF);
   14464:	4b0b      	ldr	r3, [pc, #44]	; (14494 <save_cal_data+0x12c>)
   14466:	2204      	movs	r2, #4
   14468:	5e9b      	ldrsh	r3, [r3, r2]
   1446a:	b2da      	uxtb	r2, r3
   1446c:	4b06      	ldr	r3, [pc, #24]	; (14488 <save_cal_data+0x120>)
   1446e:	745a      	strb	r2, [r3, #17]

	//Write EEPROM data
	eeprom_emulator_write_page(2, eeprom_data);
   14470:	4b05      	ldr	r3, [pc, #20]	; (14488 <save_cal_data+0x120>)
   14472:	0019      	movs	r1, r3
   14474:	2002      	movs	r0, #2
   14476:	4b08      	ldr	r3, [pc, #32]	; (14498 <save_cal_data+0x130>)
   14478:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1447a:	4b08      	ldr	r3, [pc, #32]	; (1449c <save_cal_data+0x134>)
   1447c:	4798      	blx	r3
}
   1447e:	46c0      	nop			; (mov r8, r8)
   14480:	46bd      	mov	sp, r7
   14482:	b002      	add	sp, #8
   14484:	bd80      	pop	{r7, pc}
   14486:	46c0      	nop			; (mov r8, r8)
   14488:	20001020 	.word	0x20001020
   1448c:	20001430 	.word	0x20001430
   14490:	20001438 	.word	0x20001438
   14494:	200006c4 	.word	0x200006c4
   14498:	000091f5 	.word	0x000091f5
   1449c:	0000939d 	.word	0x0000939d

000144a0 <restore_cal_data>:

void restore_cal_data(bool autoCal)
{
   144a0:	b580      	push	{r7, lr}
   144a2:	b084      	sub	sp, #16
   144a4:	af00      	add	r7, sp, #0
   144a6:	0002      	movs	r2, r0
   144a8:	1dfb      	adds	r3, r7, #7
   144aa:	701a      	strb	r2, [r3, #0]
	eeprom_emulator_read_page(2, eeprom_data);
   144ac:	4b63      	ldr	r3, [pc, #396]	; (1463c <restore_cal_data+0x19c>)
   144ae:	0019      	movs	r1, r3
   144b0:	2002      	movs	r0, #2
   144b2:	4b63      	ldr	r3, [pc, #396]	; (14640 <restore_cal_data+0x1a0>)
   144b4:	4798      	blx	r3
	int16_t temp = 0;
   144b6:	230e      	movs	r3, #14
   144b8:	18fb      	adds	r3, r7, r3
   144ba:	2200      	movs	r2, #0
   144bc:	801a      	strh	r2, [r3, #0]

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   144be:	4b5f      	ldr	r3, [pc, #380]	; (1463c <restore_cal_data+0x19c>)
   144c0:	781b      	ldrb	r3, [r3, #0]
   144c2:	2bff      	cmp	r3, #255	; 0xff
   144c4:	d121      	bne.n	1450a <restore_cal_data+0x6a>
   144c6:	4b5d      	ldr	r3, [pc, #372]	; (1463c <restore_cal_data+0x19c>)
   144c8:	785b      	ldrb	r3, [r3, #1]
   144ca:	2bff      	cmp	r3, #255	; 0xff
   144cc:	d11d      	bne.n	1450a <restore_cal_data+0x6a>
		gBiasRaw[0] = 0;
   144ce:	4b5d      	ldr	r3, [pc, #372]	; (14644 <restore_cal_data+0x1a4>)
   144d0:	2200      	movs	r2, #0
   144d2:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = 0;
   144d4:	4b5b      	ldr	r3, [pc, #364]	; (14644 <restore_cal_data+0x1a4>)
   144d6:	2200      	movs	r2, #0
   144d8:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = 0;
   144da:	4b5a      	ldr	r3, [pc, #360]	; (14644 <restore_cal_data+0x1a4>)
   144dc:	2200      	movs	r2, #0
   144de:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = 0;
   144e0:	4b59      	ldr	r3, [pc, #356]	; (14648 <restore_cal_data+0x1a8>)
   144e2:	2200      	movs	r2, #0
   144e4:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = 0;
   144e6:	4b58      	ldr	r3, [pc, #352]	; (14648 <restore_cal_data+0x1a8>)
   144e8:	2200      	movs	r2, #0
   144ea:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = 0;
   144ec:	4b56      	ldr	r3, [pc, #344]	; (14648 <restore_cal_data+0x1a8>)
   144ee:	2200      	movs	r2, #0
   144f0:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = 0;
   144f2:	4b56      	ldr	r3, [pc, #344]	; (1464c <restore_cal_data+0x1ac>)
   144f4:	2200      	movs	r2, #0
   144f6:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = 0;
   144f8:	4b54      	ldr	r3, [pc, #336]	; (1464c <restore_cal_data+0x1ac>)
   144fa:	2200      	movs	r2, #0
   144fc:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = 0;
   144fe:	4b53      	ldr	r3, [pc, #332]	; (1464c <restore_cal_data+0x1ac>)
   14500:	2200      	movs	r2, #0
   14502:	809a      	strh	r2, [r3, #4]

		save_cal_data();
   14504:	4b52      	ldr	r3, [pc, #328]	; (14650 <restore_cal_data+0x1b0>)
   14506:	4798      	blx	r3
   14508:	e08f      	b.n	1462a <restore_cal_data+0x18a>
	}
	else{ // else restore the stored data
		gBiasRaw[0] = (temp | (eeprom_data[0] << 8) | eeprom_data[1]);
   1450a:	4b4c      	ldr	r3, [pc, #304]	; (1463c <restore_cal_data+0x19c>)
   1450c:	781b      	ldrb	r3, [r3, #0]
   1450e:	021b      	lsls	r3, r3, #8
   14510:	b21a      	sxth	r2, r3
   14512:	230e      	movs	r3, #14
   14514:	18fb      	adds	r3, r7, r3
   14516:	881b      	ldrh	r3, [r3, #0]
   14518:	4313      	orrs	r3, r2
   1451a:	b21a      	sxth	r2, r3
   1451c:	4b47      	ldr	r3, [pc, #284]	; (1463c <restore_cal_data+0x19c>)
   1451e:	785b      	ldrb	r3, [r3, #1]
   14520:	b21b      	sxth	r3, r3
   14522:	4313      	orrs	r3, r2
   14524:	b21a      	sxth	r2, r3
   14526:	4b47      	ldr	r3, [pc, #284]	; (14644 <restore_cal_data+0x1a4>)
   14528:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = (temp | (eeprom_data[2] << 8) | eeprom_data[3]);
   1452a:	4b44      	ldr	r3, [pc, #272]	; (1463c <restore_cal_data+0x19c>)
   1452c:	789b      	ldrb	r3, [r3, #2]
   1452e:	021b      	lsls	r3, r3, #8
   14530:	b21a      	sxth	r2, r3
   14532:	230e      	movs	r3, #14
   14534:	18fb      	adds	r3, r7, r3
   14536:	881b      	ldrh	r3, [r3, #0]
   14538:	4313      	orrs	r3, r2
   1453a:	b21a      	sxth	r2, r3
   1453c:	4b3f      	ldr	r3, [pc, #252]	; (1463c <restore_cal_data+0x19c>)
   1453e:	78db      	ldrb	r3, [r3, #3]
   14540:	b21b      	sxth	r3, r3
   14542:	4313      	orrs	r3, r2
   14544:	b21a      	sxth	r2, r3
   14546:	4b3f      	ldr	r3, [pc, #252]	; (14644 <restore_cal_data+0x1a4>)
   14548:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = (temp | (eeprom_data[4] << 8) | eeprom_data[5]);
   1454a:	4b3c      	ldr	r3, [pc, #240]	; (1463c <restore_cal_data+0x19c>)
   1454c:	791b      	ldrb	r3, [r3, #4]
   1454e:	021b      	lsls	r3, r3, #8
   14550:	b21a      	sxth	r2, r3
   14552:	230e      	movs	r3, #14
   14554:	18fb      	adds	r3, r7, r3
   14556:	881b      	ldrh	r3, [r3, #0]
   14558:	4313      	orrs	r3, r2
   1455a:	b21a      	sxth	r2, r3
   1455c:	4b37      	ldr	r3, [pc, #220]	; (1463c <restore_cal_data+0x19c>)
   1455e:	795b      	ldrb	r3, [r3, #5]
   14560:	b21b      	sxth	r3, r3
   14562:	4313      	orrs	r3, r2
   14564:	b21a      	sxth	r2, r3
   14566:	4b37      	ldr	r3, [pc, #220]	; (14644 <restore_cal_data+0x1a4>)
   14568:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = (temp | (eeprom_data[6] << 8) | eeprom_data[7]);
   1456a:	4b34      	ldr	r3, [pc, #208]	; (1463c <restore_cal_data+0x19c>)
   1456c:	799b      	ldrb	r3, [r3, #6]
   1456e:	021b      	lsls	r3, r3, #8
   14570:	b21a      	sxth	r2, r3
   14572:	230e      	movs	r3, #14
   14574:	18fb      	adds	r3, r7, r3
   14576:	881b      	ldrh	r3, [r3, #0]
   14578:	4313      	orrs	r3, r2
   1457a:	b21a      	sxth	r2, r3
   1457c:	4b2f      	ldr	r3, [pc, #188]	; (1463c <restore_cal_data+0x19c>)
   1457e:	79db      	ldrb	r3, [r3, #7]
   14580:	b21b      	sxth	r3, r3
   14582:	4313      	orrs	r3, r2
   14584:	b21a      	sxth	r2, r3
   14586:	4b30      	ldr	r3, [pc, #192]	; (14648 <restore_cal_data+0x1a8>)
   14588:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = (temp | (eeprom_data[8] << 8) | eeprom_data[9]);
   1458a:	4b2c      	ldr	r3, [pc, #176]	; (1463c <restore_cal_data+0x19c>)
   1458c:	7a1b      	ldrb	r3, [r3, #8]
   1458e:	021b      	lsls	r3, r3, #8
   14590:	b21a      	sxth	r2, r3
   14592:	230e      	movs	r3, #14
   14594:	18fb      	adds	r3, r7, r3
   14596:	881b      	ldrh	r3, [r3, #0]
   14598:	4313      	orrs	r3, r2
   1459a:	b21a      	sxth	r2, r3
   1459c:	4b27      	ldr	r3, [pc, #156]	; (1463c <restore_cal_data+0x19c>)
   1459e:	7a5b      	ldrb	r3, [r3, #9]
   145a0:	b21b      	sxth	r3, r3
   145a2:	4313      	orrs	r3, r2
   145a4:	b21a      	sxth	r2, r3
   145a6:	4b28      	ldr	r3, [pc, #160]	; (14648 <restore_cal_data+0x1a8>)
   145a8:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = (temp | (eeprom_data[10] << 8) | eeprom_data[11]);
   145aa:	4b24      	ldr	r3, [pc, #144]	; (1463c <restore_cal_data+0x19c>)
   145ac:	7a9b      	ldrb	r3, [r3, #10]
   145ae:	021b      	lsls	r3, r3, #8
   145b0:	b21a      	sxth	r2, r3
   145b2:	230e      	movs	r3, #14
   145b4:	18fb      	adds	r3, r7, r3
   145b6:	881b      	ldrh	r3, [r3, #0]
   145b8:	4313      	orrs	r3, r2
   145ba:	b21a      	sxth	r2, r3
   145bc:	4b1f      	ldr	r3, [pc, #124]	; (1463c <restore_cal_data+0x19c>)
   145be:	7adb      	ldrb	r3, [r3, #11]
   145c0:	b21b      	sxth	r3, r3
   145c2:	4313      	orrs	r3, r2
   145c4:	b21a      	sxth	r2, r3
   145c6:	4b20      	ldr	r3, [pc, #128]	; (14648 <restore_cal_data+0x1a8>)
   145c8:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = (temp | (eeprom_data[12] << 8) | eeprom_data[13]);
   145ca:	4b1c      	ldr	r3, [pc, #112]	; (1463c <restore_cal_data+0x19c>)
   145cc:	7b1b      	ldrb	r3, [r3, #12]
   145ce:	021b      	lsls	r3, r3, #8
   145d0:	b21a      	sxth	r2, r3
   145d2:	230e      	movs	r3, #14
   145d4:	18fb      	adds	r3, r7, r3
   145d6:	881b      	ldrh	r3, [r3, #0]
   145d8:	4313      	orrs	r3, r2
   145da:	b21a      	sxth	r2, r3
   145dc:	4b17      	ldr	r3, [pc, #92]	; (1463c <restore_cal_data+0x19c>)
   145de:	7b5b      	ldrb	r3, [r3, #13]
   145e0:	b21b      	sxth	r3, r3
   145e2:	4313      	orrs	r3, r2
   145e4:	b21a      	sxth	r2, r3
   145e6:	4b19      	ldr	r3, [pc, #100]	; (1464c <restore_cal_data+0x1ac>)
   145e8:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = (temp | (eeprom_data[14] << 8) | eeprom_data[15]);
   145ea:	4b14      	ldr	r3, [pc, #80]	; (1463c <restore_cal_data+0x19c>)
   145ec:	7b9b      	ldrb	r3, [r3, #14]
   145ee:	021b      	lsls	r3, r3, #8
   145f0:	b21a      	sxth	r2, r3
   145f2:	230e      	movs	r3, #14
   145f4:	18fb      	adds	r3, r7, r3
   145f6:	881b      	ldrh	r3, [r3, #0]
   145f8:	4313      	orrs	r3, r2
   145fa:	b21a      	sxth	r2, r3
   145fc:	4b0f      	ldr	r3, [pc, #60]	; (1463c <restore_cal_data+0x19c>)
   145fe:	7bdb      	ldrb	r3, [r3, #15]
   14600:	b21b      	sxth	r3, r3
   14602:	4313      	orrs	r3, r2
   14604:	b21a      	sxth	r2, r3
   14606:	4b11      	ldr	r3, [pc, #68]	; (1464c <restore_cal_data+0x1ac>)
   14608:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = (temp | (eeprom_data[16] << 8) | eeprom_data[17]);
   1460a:	4b0c      	ldr	r3, [pc, #48]	; (1463c <restore_cal_data+0x19c>)
   1460c:	7c1b      	ldrb	r3, [r3, #16]
   1460e:	021b      	lsls	r3, r3, #8
   14610:	b21a      	sxth	r2, r3
   14612:	230e      	movs	r3, #14
   14614:	18fb      	adds	r3, r7, r3
   14616:	881b      	ldrh	r3, [r3, #0]
   14618:	4313      	orrs	r3, r2
   1461a:	b21a      	sxth	r2, r3
   1461c:	4b07      	ldr	r3, [pc, #28]	; (1463c <restore_cal_data+0x19c>)
   1461e:	7c5b      	ldrb	r3, [r3, #17]
   14620:	b21b      	sxth	r3, r3
   14622:	4313      	orrs	r3, r2
   14624:	b21a      	sxth	r2, r3
   14626:	4b09      	ldr	r3, [pc, #36]	; (1464c <restore_cal_data+0x1ac>)
   14628:	809a      	strh	r2, [r3, #4]
	}
	
	_autoCalc = autoCal;
   1462a:	4b0a      	ldr	r3, [pc, #40]	; (14654 <restore_cal_data+0x1b4>)
   1462c:	1dfa      	adds	r2, r7, #7
   1462e:	7812      	ldrb	r2, [r2, #0]
   14630:	701a      	strb	r2, [r3, #0]
}
   14632:	46c0      	nop			; (mov r8, r8)
   14634:	46bd      	mov	sp, r7
   14636:	b004      	add	sp, #16
   14638:	bd80      	pop	{r7, pc}
   1463a:	46c0      	nop			; (mov r8, r8)
   1463c:	20001020 	.word	0x20001020
   14640:	00009301 	.word	0x00009301
   14644:	20001430 	.word	0x20001430
   14648:	20001438 	.word	0x20001438
   1464c:	200006c4 	.word	0x200006c4
   14650:	00014369 	.word	0x00014369
   14654:	20000dec 	.word	0x20000dec

00014658 <save_orientation_controls_remote_esc_lights>:

void save_orientation_controls_remote_esc_lights()
{
   14658:	b580      	push	{r7, lr}
   1465a:	b082      	sub	sp, #8
   1465c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   1465e:	2300      	movs	r3, #0
   14660:	607b      	str	r3, [r7, #4]
   14662:	e005      	b.n	14670 <save_orientation_controls_remote_esc_lights+0x18>
		eeprom_data[0] = 0;
   14664:	4b5a      	ldr	r3, [pc, #360]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   14666:	2200      	movs	r2, #0
   14668:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   1466a:	687b      	ldr	r3, [r7, #4]
   1466c:	3301      	adds	r3, #1
   1466e:	607b      	str	r3, [r7, #4]
   14670:	687b      	ldr	r3, [r7, #4]
   14672:	2b3b      	cmp	r3, #59	; 0x3b
   14674:	ddf6      	ble.n	14664 <save_orientation_controls_remote_esc_lights+0xc>
	}

	eeprom_data[0] = ORIENTATION[0];
   14676:	4b57      	ldr	r3, [pc, #348]	; (147d4 <save_orientation_controls_remote_esc_lights+0x17c>)
   14678:	781a      	ldrb	r2, [r3, #0]
   1467a:	4b55      	ldr	r3, [pc, #340]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   1467c:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ORIENTATION[1];
   1467e:	4b55      	ldr	r3, [pc, #340]	; (147d4 <save_orientation_controls_remote_esc_lights+0x17c>)
   14680:	785a      	ldrb	r2, [r3, #1]
   14682:	4b53      	ldr	r3, [pc, #332]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   14684:	705a      	strb	r2, [r3, #1]

	eeprom_data[2] = ((BRIGHTS_ENABLED << 2) | (AUX_ENABLED << 1) | TURN_ENABLED);
   14686:	4b54      	ldr	r3, [pc, #336]	; (147d8 <save_orientation_controls_remote_esc_lights+0x180>)
   14688:	781b      	ldrb	r3, [r3, #0]
   1468a:	009b      	lsls	r3, r3, #2
   1468c:	b25a      	sxtb	r2, r3
   1468e:	4b53      	ldr	r3, [pc, #332]	; (147dc <save_orientation_controls_remote_esc_lights+0x184>)
   14690:	781b      	ldrb	r3, [r3, #0]
   14692:	005b      	lsls	r3, r3, #1
   14694:	b25b      	sxtb	r3, r3
   14696:	4313      	orrs	r3, r2
   14698:	b25a      	sxtb	r2, r3
   1469a:	4b51      	ldr	r3, [pc, #324]	; (147e0 <save_orientation_controls_remote_esc_lights+0x188>)
   1469c:	781b      	ldrb	r3, [r3, #0]
   1469e:	b25b      	sxtb	r3, r3
   146a0:	4313      	orrs	r3, r2
   146a2:	b25b      	sxtb	r3, r3
   146a4:	b2da      	uxtb	r2, r3
   146a6:	4b4a      	ldr	r3, [pc, #296]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146a8:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = auxControlType;
   146aa:	4b4e      	ldr	r3, [pc, #312]	; (147e4 <save_orientation_controls_remote_esc_lights+0x18c>)
   146ac:	781a      	ldrb	r2, [r3, #0]
   146ae:	4b48      	ldr	r3, [pc, #288]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146b0:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = auxTimedDuration;
   146b2:	4b4d      	ldr	r3, [pc, #308]	; (147e8 <save_orientation_controls_remote_esc_lights+0x190>)
   146b4:	781a      	ldrb	r2, [r3, #0]
   146b6:	4b46      	ldr	r3, [pc, #280]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146b8:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = single_aux_control;
   146ba:	4b4c      	ldr	r3, [pc, #304]	; (147ec <save_orientation_controls_remote_esc_lights+0x194>)
   146bc:	781a      	ldrb	r2, [r3, #0]
   146be:	4b44      	ldr	r3, [pc, #272]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146c0:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = single_all_control;
   146c2:	4b4b      	ldr	r3, [pc, #300]	; (147f0 <save_orientation_controls_remote_esc_lights+0x198>)
   146c4:	781a      	ldrb	r2, [r3, #0]
   146c6:	4b42      	ldr	r3, [pc, #264]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146c8:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = single_head_control;
   146ca:	4b4a      	ldr	r3, [pc, #296]	; (147f4 <save_orientation_controls_remote_esc_lights+0x19c>)
   146cc:	781a      	ldrb	r2, [r3, #0]
   146ce:	4b40      	ldr	r3, [pc, #256]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146d0:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = single_side_control;
   146d2:	4b49      	ldr	r3, [pc, #292]	; (147f8 <save_orientation_controls_remote_esc_lights+0x1a0>)
   146d4:	781a      	ldrb	r2, [r3, #0]
   146d6:	4b3e      	ldr	r3, [pc, #248]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146d8:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = single_up_control;
   146da:	4b48      	ldr	r3, [pc, #288]	; (147fc <save_orientation_controls_remote_esc_lights+0x1a4>)
   146dc:	781a      	ldrb	r2, [r3, #0]
   146de:	4b3c      	ldr	r3, [pc, #240]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146e0:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = single_down_control;
   146e2:	4b47      	ldr	r3, [pc, #284]	; (14800 <save_orientation_controls_remote_esc_lights+0x1a8>)
   146e4:	781a      	ldrb	r2, [r3, #0]
   146e6:	4b3a      	ldr	r3, [pc, #232]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146e8:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = single_brights_control;
   146ea:	4b46      	ldr	r3, [pc, #280]	; (14804 <save_orientation_controls_remote_esc_lights+0x1ac>)
   146ec:	781a      	ldrb	r2, [r3, #0]
   146ee:	4b38      	ldr	r3, [pc, #224]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146f0:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = lowbeam_level;
   146f2:	4b45      	ldr	r3, [pc, #276]	; (14808 <save_orientation_controls_remote_esc_lights+0x1b0>)
   146f4:	781a      	ldrb	r2, [r3, #0]
   146f6:	4b36      	ldr	r3, [pc, #216]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   146f8:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = dual_head_control;
	eeprom_data[14] = dual_side_control;
	eeprom_data[15] = dual_up_control;
	eeprom_data[16] = dual_down_control;*/

	eeprom_data[17] = ((remote_type << 4) | (button_type & 0x0F));
   146fa:	4b44      	ldr	r3, [pc, #272]	; (1480c <save_orientation_controls_remote_esc_lights+0x1b4>)
   146fc:	781b      	ldrb	r3, [r3, #0]
   146fe:	011b      	lsls	r3, r3, #4
   14700:	b25a      	sxtb	r2, r3
   14702:	4b43      	ldr	r3, [pc, #268]	; (14810 <save_orientation_controls_remote_esc_lights+0x1b8>)
   14704:	781b      	ldrb	r3, [r3, #0]
   14706:	b25b      	sxtb	r3, r3
   14708:	210f      	movs	r1, #15
   1470a:	400b      	ands	r3, r1
   1470c:	b25b      	sxtb	r3, r3
   1470e:	4313      	orrs	r3, r2
   14710:	b25b      	sxtb	r3, r3
   14712:	b2da      	uxtb	r2, r3
   14714:	4b2e      	ldr	r3, [pc, #184]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   14716:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = deadzone;
   14718:	4b3e      	ldr	r3, [pc, #248]	; (14814 <save_orientation_controls_remote_esc_lights+0x1bc>)
   1471a:	781a      	ldrb	r2, [r3, #0]
   1471c:	4b2c      	ldr	r3, [pc, #176]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   1471e:	749a      	strb	r2, [r3, #18]
	
	eeprom_data[19] = esc_fw;
   14720:	4b3d      	ldr	r3, [pc, #244]	; (14818 <save_orientation_controls_remote_esc_lights+0x1c0>)
   14722:	781a      	ldrb	r2, [r3, #0]
   14724:	4b2a      	ldr	r3, [pc, #168]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   14726:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = ((esc_comms << 4) | (UART_baud & 0x0F));//*/
   14728:	4b3c      	ldr	r3, [pc, #240]	; (1481c <save_orientation_controls_remote_esc_lights+0x1c4>)
   1472a:	781b      	ldrb	r3, [r3, #0]
   1472c:	011b      	lsls	r3, r3, #4
   1472e:	b25a      	sxtb	r2, r3
   14730:	4b3b      	ldr	r3, [pc, #236]	; (14820 <save_orientation_controls_remote_esc_lights+0x1c8>)
   14732:	781b      	ldrb	r3, [r3, #0]
   14734:	b25b      	sxtb	r3, r3
   14736:	210f      	movs	r1, #15
   14738:	400b      	ands	r3, r1
   1473a:	b25b      	sxtb	r3, r3
   1473c:	4313      	orrs	r3, r2
   1473e:	b25b      	sxtb	r3, r3
   14740:	b2da      	uxtb	r2, r3
   14742:	4b23      	ldr	r3, [pc, #140]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   14744:	751a      	strb	r2, [r3, #20]
	
	eeprom_data[21] = (RGB_led_type << 4) | brake_light_mode;
   14746:	4b37      	ldr	r3, [pc, #220]	; (14824 <save_orientation_controls_remote_esc_lights+0x1cc>)
   14748:	781b      	ldrb	r3, [r3, #0]
   1474a:	011b      	lsls	r3, r3, #4
   1474c:	b25a      	sxtb	r2, r3
   1474e:	4b36      	ldr	r3, [pc, #216]	; (14828 <save_orientation_controls_remote_esc_lights+0x1d0>)
   14750:	781b      	ldrb	r3, [r3, #0]
   14752:	b25b      	sxtb	r3, r3
   14754:	4313      	orrs	r3, r2
   14756:	b25b      	sxtb	r3, r3
   14758:	b2da      	uxtb	r2, r3
   1475a:	4b1d      	ldr	r3, [pc, #116]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   1475c:	755a      	strb	r2, [r3, #21]
	eeprom_data[22] = deadzone;
   1475e:	4b2d      	ldr	r3, [pc, #180]	; (14814 <save_orientation_controls_remote_esc_lights+0x1bc>)
   14760:	781a      	ldrb	r2, [r3, #0]
   14762:	4b1b      	ldr	r3, [pc, #108]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   14764:	759a      	strb	r2, [r3, #22]
	eeprom_data[23] = led_num;
   14766:	4b31      	ldr	r3, [pc, #196]	; (1482c <save_orientation_controls_remote_esc_lights+0x1d4>)
   14768:	781a      	ldrb	r2, [r3, #0]
   1476a:	4b19      	ldr	r3, [pc, #100]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   1476c:	75da      	strb	r2, [r3, #23]
	eeprom_data[24] = (SYNC_RGB << 7) | (BRAKE_ALWAYS_ON << 6) | (DEFAULT_STATE << 5) | (STANDBY_ENABLED << 4) | (SHUFFLE_ENABLED << 3) | (AUTO_DETECT_ESC << 2);
   1476e:	4b30      	ldr	r3, [pc, #192]	; (14830 <save_orientation_controls_remote_esc_lights+0x1d8>)
   14770:	781b      	ldrb	r3, [r3, #0]
   14772:	01db      	lsls	r3, r3, #7
   14774:	b25a      	sxtb	r2, r3
   14776:	4b2f      	ldr	r3, [pc, #188]	; (14834 <save_orientation_controls_remote_esc_lights+0x1dc>)
   14778:	781b      	ldrb	r3, [r3, #0]
   1477a:	019b      	lsls	r3, r3, #6
   1477c:	b25b      	sxtb	r3, r3
   1477e:	4313      	orrs	r3, r2
   14780:	b25a      	sxtb	r2, r3
   14782:	4b2d      	ldr	r3, [pc, #180]	; (14838 <save_orientation_controls_remote_esc_lights+0x1e0>)
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	015b      	lsls	r3, r3, #5
   14788:	b25b      	sxtb	r3, r3
   1478a:	4313      	orrs	r3, r2
   1478c:	b25a      	sxtb	r2, r3
   1478e:	4b2b      	ldr	r3, [pc, #172]	; (1483c <save_orientation_controls_remote_esc_lights+0x1e4>)
   14790:	781b      	ldrb	r3, [r3, #0]
   14792:	011b      	lsls	r3, r3, #4
   14794:	b25b      	sxtb	r3, r3
   14796:	4313      	orrs	r3, r2
   14798:	b25a      	sxtb	r2, r3
   1479a:	4b29      	ldr	r3, [pc, #164]	; (14840 <save_orientation_controls_remote_esc_lights+0x1e8>)
   1479c:	781b      	ldrb	r3, [r3, #0]
   1479e:	00db      	lsls	r3, r3, #3
   147a0:	b25b      	sxtb	r3, r3
   147a2:	4313      	orrs	r3, r2
   147a4:	b25a      	sxtb	r2, r3
   147a6:	4b27      	ldr	r3, [pc, #156]	; (14844 <save_orientation_controls_remote_esc_lights+0x1ec>)
   147a8:	781b      	ldrb	r3, [r3, #0]
   147aa:	009b      	lsls	r3, r3, #2
   147ac:	b25b      	sxtb	r3, r3
   147ae:	4313      	orrs	r3, r2
   147b0:	b25b      	sxtb	r3, r3
   147b2:	b2da      	uxtb	r2, r3
   147b4:	4b06      	ldr	r3, [pc, #24]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   147b6:	761a      	strb	r2, [r3, #24]

	//Write EEPROM data
	eeprom_emulator_write_page(3, eeprom_data);
   147b8:	4b05      	ldr	r3, [pc, #20]	; (147d0 <save_orientation_controls_remote_esc_lights+0x178>)
   147ba:	0019      	movs	r1, r3
   147bc:	2003      	movs	r0, #3
   147be:	4b22      	ldr	r3, [pc, #136]	; (14848 <save_orientation_controls_remote_esc_lights+0x1f0>)
   147c0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   147c2:	4b22      	ldr	r3, [pc, #136]	; (1484c <save_orientation_controls_remote_esc_lights+0x1f4>)
   147c4:	4798      	blx	r3
}
   147c6:	46c0      	nop			; (mov r8, r8)
   147c8:	46bd      	mov	sp, r7
   147ca:	b002      	add	sp, #8
   147cc:	bd80      	pop	{r7, pc}
   147ce:	46c0      	nop			; (mov r8, r8)
   147d0:	20001020 	.word	0x20001020
   147d4:	20000008 	.word	0x20000008
   147d8:	200003a4 	.word	0x200003a4
   147dc:	200003de 	.word	0x200003de
   147e0:	200003df 	.word	0x200003df
   147e4:	200003e2 	.word	0x200003e2
   147e8:	200003e3 	.word	0x200003e3
   147ec:	200003e4 	.word	0x200003e4
   147f0:	200003e5 	.word	0x200003e5
   147f4:	200003e6 	.word	0x200003e6
   147f8:	200003e7 	.word	0x200003e7
   147fc:	200003e8 	.word	0x200003e8
   14800:	200003e9 	.word	0x200003e9
   14804:	200003ea 	.word	0x200003ea
   14808:	200000d4 	.word	0x200000d4
   1480c:	200003cc 	.word	0x200003cc
   14810:	200003cd 	.word	0x200003cd
   14814:	200000e4 	.word	0x200000e4
   14818:	200000e3 	.word	0x200000e3
   1481c:	200003ca 	.word	0x200003ca
   14820:	200003cb 	.word	0x200003cb
   14824:	20001a88 	.word	0x20001a88
   14828:	200003a2 	.word	0x200003a2
   1482c:	200000e0 	.word	0x200000e0
   14830:	200000d2 	.word	0x200000d2
   14834:	200000d3 	.word	0x200000d3
   14838:	200003a3 	.word	0x200003a3
   1483c:	200003a5 	.word	0x200003a5
   14840:	200003a6 	.word	0x200003a6
   14844:	20000100 	.word	0x20000100
   14848:	000091f5 	.word	0x000091f5
   1484c:	0000939d 	.word	0x0000939d

00014850 <restore_orientation_controls_remote_esc_lights>:

void restore_orientation_controls_remote_esc_lights()
{
   14850:	b580      	push	{r7, lr}
   14852:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(3, eeprom_data);
   14854:	4b97      	ldr	r3, [pc, #604]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14856:	0019      	movs	r1, r3
   14858:	2003      	movs	r0, #3
   1485a:	4b97      	ldr	r3, [pc, #604]	; (14ab8 <restore_orientation_controls_remote_esc_lights+0x268>)
   1485c:	4798      	blx	r3

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   1485e:	4b95      	ldr	r3, [pc, #596]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14860:	781b      	ldrb	r3, [r3, #0]
   14862:	2bff      	cmp	r3, #255	; 0xff
   14864:	d163      	bne.n	1492e <restore_orientation_controls_remote_esc_lights+0xde>
   14866:	4b93      	ldr	r3, [pc, #588]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14868:	785b      	ldrb	r3, [r3, #1]
   1486a:	2bff      	cmp	r3, #255	; 0xff
   1486c:	d15f      	bne.n	1492e <restore_orientation_controls_remote_esc_lights+0xde>
		ORIENTATION[0] = 1; // Connectors up
   1486e:	4b93      	ldr	r3, [pc, #588]	; (14abc <restore_orientation_controls_remote_esc_lights+0x26c>)
   14870:	2201      	movs	r2, #1
   14872:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = 6; // Power front
   14874:	4b91      	ldr	r3, [pc, #580]	; (14abc <restore_orientation_controls_remote_esc_lights+0x26c>)
   14876:	2206      	movs	r2, #6
   14878:	705a      	strb	r2, [r3, #1]

		BRIGHTS_ENABLED = false;
   1487a:	4b91      	ldr	r3, [pc, #580]	; (14ac0 <restore_orientation_controls_remote_esc_lights+0x270>)
   1487c:	2200      	movs	r2, #0
   1487e:	701a      	strb	r2, [r3, #0]
		AUX_ENABLED = false; // Aux disabled
   14880:	4b90      	ldr	r3, [pc, #576]	; (14ac4 <restore_orientation_controls_remote_esc_lights+0x274>)
   14882:	2200      	movs	r2, #0
   14884:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = false; // Turn disabled
   14886:	4b90      	ldr	r3, [pc, #576]	; (14ac8 <restore_orientation_controls_remote_esc_lights+0x278>)
   14888:	2200      	movs	r2, #0
   1488a:	701a      	strb	r2, [r3, #0]
		auxControlType = AUX_MOMENTARY;
   1488c:	4b8f      	ldr	r3, [pc, #572]	; (14acc <restore_orientation_controls_remote_esc_lights+0x27c>)
   1488e:	2200      	movs	r2, #0
   14890:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = 10; // 1 second
   14892:	4b8f      	ldr	r3, [pc, #572]	; (14ad0 <restore_orientation_controls_remote_esc_lights+0x280>)
   14894:	220a      	movs	r2, #10
   14896:	701a      	strb	r2, [r3, #0]
		single_aux_control = PRESS_NONE;
   14898:	4b8e      	ldr	r3, [pc, #568]	; (14ad4 <restore_orientation_controls_remote_esc_lights+0x284>)
   1489a:	2200      	movs	r2, #0
   1489c:	701a      	strb	r2, [r3, #0]
		single_all_control = SINGLE_TAP;
   1489e:	4b8e      	ldr	r3, [pc, #568]	; (14ad8 <restore_orientation_controls_remote_esc_lights+0x288>)
   148a0:	2201      	movs	r2, #1
   148a2:	701a      	strb	r2, [r3, #0]
		single_head_control = MEDIUM_PRESS;
   148a4:	4b8d      	ldr	r3, [pc, #564]	; (14adc <restore_orientation_controls_remote_esc_lights+0x28c>)
   148a6:	2206      	movs	r2, #6
   148a8:	701a      	strb	r2, [r3, #0]
		single_side_control = LONG_PRESS;
   148aa:	4b8d      	ldr	r3, [pc, #564]	; (14ae0 <restore_orientation_controls_remote_esc_lights+0x290>)
   148ac:	2207      	movs	r2, #7
   148ae:	701a      	strb	r2, [r3, #0]
		single_up_control = DOUBLE_TAP;
   148b0:	4b8c      	ldr	r3, [pc, #560]	; (14ae4 <restore_orientation_controls_remote_esc_lights+0x294>)
   148b2:	2202      	movs	r2, #2
   148b4:	701a      	strb	r2, [r3, #0]
		single_down_control = TRIPLE_TAP;
   148b6:	4b8c      	ldr	r3, [pc, #560]	; (14ae8 <restore_orientation_controls_remote_esc_lights+0x298>)
   148b8:	2203      	movs	r2, #3
   148ba:	701a      	strb	r2, [r3, #0]
		single_brights_control = PRESS_NONE;
   148bc:	4b8b      	ldr	r3, [pc, #556]	; (14aec <restore_orientation_controls_remote_esc_lights+0x29c>)
   148be:	2200      	movs	r2, #0
   148c0:	701a      	strb	r2, [r3, #0]
		lowbeam_level = 70;
   148c2:	4b8b      	ldr	r3, [pc, #556]	; (14af0 <restore_orientation_controls_remote_esc_lights+0x2a0>)
   148c4:	2246      	movs	r2, #70	; 0x46
   148c6:	701a      	strb	r2, [r3, #0]
		dual_head_control = MEDIUM_PRESS;
		dual_side_control = LONG_PRESS;
		dual_up_control =  RIGHT_TAP;
		dual_down_control = LEFT_TAP;*/

		remote_type = 0;
   148c8:	4b8a      	ldr	r3, [pc, #552]	; (14af4 <restore_orientation_controls_remote_esc_lights+0x2a4>)
   148ca:	2200      	movs	r2, #0
   148cc:	701a      	strb	r2, [r3, #0]
		deadzone = 10;
   148ce:	4b8a      	ldr	r3, [pc, #552]	; (14af8 <restore_orientation_controls_remote_esc_lights+0x2a8>)
   148d0:	220a      	movs	r2, #10
   148d2:	701a      	strb	r2, [r3, #0]
		button_type = 1;
   148d4:	4b89      	ldr	r3, [pc, #548]	; (14afc <restore_orientation_controls_remote_esc_lights+0x2ac>)
   148d6:	2201      	movs	r2, #1
   148d8:	701a      	strb	r2, [r3, #0]

		esc_fw = FW_3v7; // Set v3.7-v5.1 as the default FW to prevent bricking any ESCs
   148da:	4b89      	ldr	r3, [pc, #548]	; (14b00 <restore_orientation_controls_remote_esc_lights+0x2b0>)
   148dc:	2201      	movs	r2, #1
   148de:	701a      	strb	r2, [r3, #0]
		esc_comms = COMMS_UART;
   148e0:	4b88      	ldr	r3, [pc, #544]	; (14b04 <restore_orientation_controls_remote_esc_lights+0x2b4>)
   148e2:	2202      	movs	r2, #2
   148e4:	701a      	strb	r2, [r3, #0]
		UART_baud = BAUD_9600;
   148e6:	4b88      	ldr	r3, [pc, #544]	; (14b08 <restore_orientation_controls_remote_esc_lights+0x2b8>)
   148e8:	2200      	movs	r2, #0
   148ea:	701a      	strb	r2, [r3, #0]

		RGB_led_type = RGB_ANALOG;
   148ec:	4b87      	ldr	r3, [pc, #540]	; (14b0c <restore_orientation_controls_remote_esc_lights+0x2bc>)
   148ee:	2200      	movs	r2, #0
   148f0:	701a      	strb	r2, [r3, #0]
		brake_light_mode = BRAKE_FADE;
   148f2:	4b87      	ldr	r3, [pc, #540]	; (14b10 <restore_orientation_controls_remote_esc_lights+0x2c0>)
   148f4:	2200      	movs	r2, #0
   148f6:	701a      	strb	r2, [r3, #0]
		deadzone = 20;
   148f8:	4b7f      	ldr	r3, [pc, #508]	; (14af8 <restore_orientation_controls_remote_esc_lights+0x2a8>)
   148fa:	2214      	movs	r2, #20
   148fc:	701a      	strb	r2, [r3, #0]
		led_num = 30;
   148fe:	4b85      	ldr	r3, [pc, #532]	; (14b14 <restore_orientation_controls_remote_esc_lights+0x2c4>)
   14900:	221e      	movs	r2, #30
   14902:	701a      	strb	r2, [r3, #0]
		SYNC_RGB = true;
   14904:	4b84      	ldr	r3, [pc, #528]	; (14b18 <restore_orientation_controls_remote_esc_lights+0x2c8>)
   14906:	2201      	movs	r2, #1
   14908:	701a      	strb	r2, [r3, #0]
		BRAKE_ALWAYS_ON = false;
   1490a:	4b84      	ldr	r3, [pc, #528]	; (14b1c <restore_orientation_controls_remote_esc_lights+0x2cc>)
   1490c:	2200      	movs	r2, #0
   1490e:	701a      	strb	r2, [r3, #0]
		DEFAULT_STATE = false;
   14910:	4b83      	ldr	r3, [pc, #524]	; (14b20 <restore_orientation_controls_remote_esc_lights+0x2d0>)
   14912:	2200      	movs	r2, #0
   14914:	701a      	strb	r2, [r3, #0]
		STANDBY_ENABLED = false;
   14916:	4b83      	ldr	r3, [pc, #524]	; (14b24 <restore_orientation_controls_remote_esc_lights+0x2d4>)
   14918:	2200      	movs	r2, #0
   1491a:	701a      	strb	r2, [r3, #0]
		SHUFFLE_ENABLED = false;
   1491c:	4b82      	ldr	r3, [pc, #520]	; (14b28 <restore_orientation_controls_remote_esc_lights+0x2d8>)
   1491e:	2200      	movs	r2, #0
   14920:	701a      	strb	r2, [r3, #0]
		AUTO_DETECT_ESC = true;
   14922:	4b82      	ldr	r3, [pc, #520]	; (14b2c <restore_orientation_controls_remote_esc_lights+0x2dc>)
   14924:	2201      	movs	r2, #1
   14926:	701a      	strb	r2, [r3, #0]

		save_orientation_controls_remote_esc_lights();
   14928:	4b81      	ldr	r3, [pc, #516]	; (14b30 <restore_orientation_controls_remote_esc_lights+0x2e0>)
   1492a:	4798      	blx	r3
   1492c:	e0bf      	b.n	14aae <restore_orientation_controls_remote_esc_lights+0x25e>
	}
	else { // else restore the stored data
		ORIENTATION[0] = eeprom_data[0];
   1492e:	4b61      	ldr	r3, [pc, #388]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14930:	781a      	ldrb	r2, [r3, #0]
   14932:	4b62      	ldr	r3, [pc, #392]	; (14abc <restore_orientation_controls_remote_esc_lights+0x26c>)
   14934:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = eeprom_data[1];
   14936:	4b5f      	ldr	r3, [pc, #380]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14938:	785a      	ldrb	r2, [r3, #1]
   1493a:	4b60      	ldr	r3, [pc, #384]	; (14abc <restore_orientation_controls_remote_esc_lights+0x26c>)
   1493c:	705a      	strb	r2, [r3, #1]
		
		BRIGHTS_ENABLED = (eeprom_data[2] & 0x04) >> 2;
   1493e:	4b5d      	ldr	r3, [pc, #372]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14940:	789b      	ldrb	r3, [r3, #2]
   14942:	109b      	asrs	r3, r3, #2
   14944:	2201      	movs	r2, #1
   14946:	4013      	ands	r3, r2
   14948:	1e5a      	subs	r2, r3, #1
   1494a:	4193      	sbcs	r3, r2
   1494c:	b2da      	uxtb	r2, r3
   1494e:	4b5c      	ldr	r3, [pc, #368]	; (14ac0 <restore_orientation_controls_remote_esc_lights+0x270>)
   14950:	701a      	strb	r2, [r3, #0]
		AUX_ENABLED = (eeprom_data[2] & 0x02) >> 1;
   14952:	4b58      	ldr	r3, [pc, #352]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14954:	789b      	ldrb	r3, [r3, #2]
   14956:	105b      	asrs	r3, r3, #1
   14958:	2201      	movs	r2, #1
   1495a:	4013      	ands	r3, r2
   1495c:	1e5a      	subs	r2, r3, #1
   1495e:	4193      	sbcs	r3, r2
   14960:	b2da      	uxtb	r2, r3
   14962:	4b58      	ldr	r3, [pc, #352]	; (14ac4 <restore_orientation_controls_remote_esc_lights+0x274>)
   14964:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = (eeprom_data[2] & 0x01);
   14966:	4b53      	ldr	r3, [pc, #332]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14968:	789b      	ldrb	r3, [r3, #2]
   1496a:	001a      	movs	r2, r3
   1496c:	2301      	movs	r3, #1
   1496e:	4013      	ands	r3, r2
   14970:	1e5a      	subs	r2, r3, #1
   14972:	4193      	sbcs	r3, r2
   14974:	b2da      	uxtb	r2, r3
   14976:	4b54      	ldr	r3, [pc, #336]	; (14ac8 <restore_orientation_controls_remote_esc_lights+0x278>)
   14978:	701a      	strb	r2, [r3, #0]
		auxControlType = eeprom_data[3];
   1497a:	4b4e      	ldr	r3, [pc, #312]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   1497c:	78da      	ldrb	r2, [r3, #3]
   1497e:	4b53      	ldr	r3, [pc, #332]	; (14acc <restore_orientation_controls_remote_esc_lights+0x27c>)
   14980:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = eeprom_data[4];
   14982:	4b4c      	ldr	r3, [pc, #304]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14984:	791a      	ldrb	r2, [r3, #4]
   14986:	4b52      	ldr	r3, [pc, #328]	; (14ad0 <restore_orientation_controls_remote_esc_lights+0x280>)
   14988:	701a      	strb	r2, [r3, #0]
		single_aux_control = eeprom_data[5];
   1498a:	4b4a      	ldr	r3, [pc, #296]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   1498c:	795a      	ldrb	r2, [r3, #5]
   1498e:	4b51      	ldr	r3, [pc, #324]	; (14ad4 <restore_orientation_controls_remote_esc_lights+0x284>)
   14990:	701a      	strb	r2, [r3, #0]
		single_all_control = eeprom_data[6];
   14992:	4b48      	ldr	r3, [pc, #288]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14994:	799a      	ldrb	r2, [r3, #6]
   14996:	4b50      	ldr	r3, [pc, #320]	; (14ad8 <restore_orientation_controls_remote_esc_lights+0x288>)
   14998:	701a      	strb	r2, [r3, #0]
		single_head_control = eeprom_data[7];
   1499a:	4b46      	ldr	r3, [pc, #280]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   1499c:	79da      	ldrb	r2, [r3, #7]
   1499e:	4b4f      	ldr	r3, [pc, #316]	; (14adc <restore_orientation_controls_remote_esc_lights+0x28c>)
   149a0:	701a      	strb	r2, [r3, #0]
		single_side_control = eeprom_data[8];
   149a2:	4b44      	ldr	r3, [pc, #272]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149a4:	7a1a      	ldrb	r2, [r3, #8]
   149a6:	4b4e      	ldr	r3, [pc, #312]	; (14ae0 <restore_orientation_controls_remote_esc_lights+0x290>)
   149a8:	701a      	strb	r2, [r3, #0]
		single_up_control = eeprom_data[9];
   149aa:	4b42      	ldr	r3, [pc, #264]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149ac:	7a5a      	ldrb	r2, [r3, #9]
   149ae:	4b4d      	ldr	r3, [pc, #308]	; (14ae4 <restore_orientation_controls_remote_esc_lights+0x294>)
   149b0:	701a      	strb	r2, [r3, #0]
		single_down_control = eeprom_data[10];
   149b2:	4b40      	ldr	r3, [pc, #256]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149b4:	7a9a      	ldrb	r2, [r3, #10]
   149b6:	4b4c      	ldr	r3, [pc, #304]	; (14ae8 <restore_orientation_controls_remote_esc_lights+0x298>)
   149b8:	701a      	strb	r2, [r3, #0]
		single_brights_control = eeprom_data[11];
   149ba:	4b3e      	ldr	r3, [pc, #248]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149bc:	7ada      	ldrb	r2, [r3, #11]
   149be:	4b4b      	ldr	r3, [pc, #300]	; (14aec <restore_orientation_controls_remote_esc_lights+0x29c>)
   149c0:	701a      	strb	r2, [r3, #0]
		lowbeam_level = eeprom_data[12];
   149c2:	4b3c      	ldr	r3, [pc, #240]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149c4:	7b1a      	ldrb	r2, [r3, #12]
   149c6:	4b4a      	ldr	r3, [pc, #296]	; (14af0 <restore_orientation_controls_remote_esc_lights+0x2a0>)
   149c8:	701a      	strb	r2, [r3, #0]
		dual_head_control = eeprom_data[13];
		dual_side_control = eeprom_data[14];
		dual_up_control = eeprom_data[15];
		dual_down_control = eeprom_data[16];*/

		remote_type = ((eeprom_data[17]&0xF0)>>4);
   149ca:	4b3a      	ldr	r3, [pc, #232]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149cc:	7c5b      	ldrb	r3, [r3, #17]
   149ce:	091b      	lsrs	r3, r3, #4
   149d0:	b2da      	uxtb	r2, r3
   149d2:	4b48      	ldr	r3, [pc, #288]	; (14af4 <restore_orientation_controls_remote_esc_lights+0x2a4>)
   149d4:	701a      	strb	r2, [r3, #0]
		button_type = (eeprom_data[17]&0x0F);
   149d6:	4b37      	ldr	r3, [pc, #220]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149d8:	7c5b      	ldrb	r3, [r3, #17]
   149da:	220f      	movs	r2, #15
   149dc:	4013      	ands	r3, r2
   149de:	b2da      	uxtb	r2, r3
   149e0:	4b46      	ldr	r3, [pc, #280]	; (14afc <restore_orientation_controls_remote_esc_lights+0x2ac>)
   149e2:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[18];
   149e4:	4b33      	ldr	r3, [pc, #204]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149e6:	7c9a      	ldrb	r2, [r3, #18]
   149e8:	4b43      	ldr	r3, [pc, #268]	; (14af8 <restore_orientation_controls_remote_esc_lights+0x2a8>)
   149ea:	701a      	strb	r2, [r3, #0]

		esc_fw = eeprom_data[19];
   149ec:	4b31      	ldr	r3, [pc, #196]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149ee:	7cda      	ldrb	r2, [r3, #19]
   149f0:	4b43      	ldr	r3, [pc, #268]	; (14b00 <restore_orientation_controls_remote_esc_lights+0x2b0>)
   149f2:	701a      	strb	r2, [r3, #0]
		esc_comms = ((eeprom_data[20]&0xF0)>>4);
   149f4:	4b2f      	ldr	r3, [pc, #188]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   149f6:	7d1b      	ldrb	r3, [r3, #20]
   149f8:	091b      	lsrs	r3, r3, #4
   149fa:	b2da      	uxtb	r2, r3
   149fc:	4b41      	ldr	r3, [pc, #260]	; (14b04 <restore_orientation_controls_remote_esc_lights+0x2b4>)
   149fe:	701a      	strb	r2, [r3, #0]
		UART_baud = (eeprom_data[20]&0x0F);//*/
   14a00:	4b2c      	ldr	r3, [pc, #176]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a02:	7d1b      	ldrb	r3, [r3, #20]
   14a04:	220f      	movs	r2, #15
   14a06:	4013      	ands	r3, r2
   14a08:	b2da      	uxtb	r2, r3
   14a0a:	4b3f      	ldr	r3, [pc, #252]	; (14b08 <restore_orientation_controls_remote_esc_lights+0x2b8>)
   14a0c:	701a      	strb	r2, [r3, #0]
		
		RGB_led_type = ((eeprom_data[21]&0xF0)>>4);
   14a0e:	4b29      	ldr	r3, [pc, #164]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a10:	7d5b      	ldrb	r3, [r3, #21]
   14a12:	091b      	lsrs	r3, r3, #4
   14a14:	b2da      	uxtb	r2, r3
   14a16:	4b3d      	ldr	r3, [pc, #244]	; (14b0c <restore_orientation_controls_remote_esc_lights+0x2bc>)
   14a18:	701a      	strb	r2, [r3, #0]
		brake_light_mode = (eeprom_data[21]&0x0F);
   14a1a:	4b26      	ldr	r3, [pc, #152]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a1c:	7d5b      	ldrb	r3, [r3, #21]
   14a1e:	220f      	movs	r2, #15
   14a20:	4013      	ands	r3, r2
   14a22:	b2da      	uxtb	r2, r3
   14a24:	4b3a      	ldr	r3, [pc, #232]	; (14b10 <restore_orientation_controls_remote_esc_lights+0x2c0>)
   14a26:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[22];
   14a28:	4b22      	ldr	r3, [pc, #136]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a2a:	7d9a      	ldrb	r2, [r3, #22]
   14a2c:	4b32      	ldr	r3, [pc, #200]	; (14af8 <restore_orientation_controls_remote_esc_lights+0x2a8>)
   14a2e:	701a      	strb	r2, [r3, #0]
		led_num = eeprom_data[23];
   14a30:	4b20      	ldr	r3, [pc, #128]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a32:	7dda      	ldrb	r2, [r3, #23]
   14a34:	4b37      	ldr	r3, [pc, #220]	; (14b14 <restore_orientation_controls_remote_esc_lights+0x2c4>)
   14a36:	701a      	strb	r2, [r3, #0]
		SYNC_RGB = ((eeprom_data[24]&0x80)>>7);
   14a38:	4b1e      	ldr	r3, [pc, #120]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a3a:	7e1b      	ldrb	r3, [r3, #24]
   14a3c:	09db      	lsrs	r3, r3, #7
   14a3e:	b2db      	uxtb	r3, r3
   14a40:	1e5a      	subs	r2, r3, #1
   14a42:	4193      	sbcs	r3, r2
   14a44:	b2da      	uxtb	r2, r3
   14a46:	4b34      	ldr	r3, [pc, #208]	; (14b18 <restore_orientation_controls_remote_esc_lights+0x2c8>)
   14a48:	701a      	strb	r2, [r3, #0]
		BRAKE_ALWAYS_ON = ((eeprom_data[24]&0x40)>>6);
   14a4a:	4b1a      	ldr	r3, [pc, #104]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a4c:	7e1b      	ldrb	r3, [r3, #24]
   14a4e:	119b      	asrs	r3, r3, #6
   14a50:	2201      	movs	r2, #1
   14a52:	4013      	ands	r3, r2
   14a54:	1e5a      	subs	r2, r3, #1
   14a56:	4193      	sbcs	r3, r2
   14a58:	b2da      	uxtb	r2, r3
   14a5a:	4b30      	ldr	r3, [pc, #192]	; (14b1c <restore_orientation_controls_remote_esc_lights+0x2cc>)
   14a5c:	701a      	strb	r2, [r3, #0]
		DEFAULT_STATE = ((eeprom_data[24]&0x20)>>5);
   14a5e:	4b15      	ldr	r3, [pc, #84]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a60:	7e1b      	ldrb	r3, [r3, #24]
   14a62:	115b      	asrs	r3, r3, #5
   14a64:	2201      	movs	r2, #1
   14a66:	4013      	ands	r3, r2
   14a68:	1e5a      	subs	r2, r3, #1
   14a6a:	4193      	sbcs	r3, r2
   14a6c:	b2da      	uxtb	r2, r3
   14a6e:	4b2c      	ldr	r3, [pc, #176]	; (14b20 <restore_orientation_controls_remote_esc_lights+0x2d0>)
   14a70:	701a      	strb	r2, [r3, #0]
		STANDBY_ENABLED = ((eeprom_data[24]&0x10)>>4);
   14a72:	4b10      	ldr	r3, [pc, #64]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a74:	7e1b      	ldrb	r3, [r3, #24]
   14a76:	111b      	asrs	r3, r3, #4
   14a78:	2201      	movs	r2, #1
   14a7a:	4013      	ands	r3, r2
   14a7c:	1e5a      	subs	r2, r3, #1
   14a7e:	4193      	sbcs	r3, r2
   14a80:	b2da      	uxtb	r2, r3
   14a82:	4b28      	ldr	r3, [pc, #160]	; (14b24 <restore_orientation_controls_remote_esc_lights+0x2d4>)
   14a84:	701a      	strb	r2, [r3, #0]
		SHUFFLE_ENABLED = ((eeprom_data[24]&0x08)>>3);
   14a86:	4b0b      	ldr	r3, [pc, #44]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a88:	7e1b      	ldrb	r3, [r3, #24]
   14a8a:	10db      	asrs	r3, r3, #3
   14a8c:	2201      	movs	r2, #1
   14a8e:	4013      	ands	r3, r2
   14a90:	1e5a      	subs	r2, r3, #1
   14a92:	4193      	sbcs	r3, r2
   14a94:	b2da      	uxtb	r2, r3
   14a96:	4b24      	ldr	r3, [pc, #144]	; (14b28 <restore_orientation_controls_remote_esc_lights+0x2d8>)
   14a98:	701a      	strb	r2, [r3, #0]
		AUTO_DETECT_ESC = ((eeprom_data[24]&0x04)>>2);
   14a9a:	4b06      	ldr	r3, [pc, #24]	; (14ab4 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a9c:	7e1b      	ldrb	r3, [r3, #24]
   14a9e:	109b      	asrs	r3, r3, #2
   14aa0:	2201      	movs	r2, #1
   14aa2:	4013      	ands	r3, r2
   14aa4:	1e5a      	subs	r2, r3, #1
   14aa6:	4193      	sbcs	r3, r2
   14aa8:	b2da      	uxtb	r2, r3
   14aaa:	4b20      	ldr	r3, [pc, #128]	; (14b2c <restore_orientation_controls_remote_esc_lights+0x2dc>)
   14aac:	701a      	strb	r2, [r3, #0]
	}
}
   14aae:	46c0      	nop			; (mov r8, r8)
   14ab0:	46bd      	mov	sp, r7
   14ab2:	bd80      	pop	{r7, pc}
   14ab4:	20001020 	.word	0x20001020
   14ab8:	00009301 	.word	0x00009301
   14abc:	20000008 	.word	0x20000008
   14ac0:	200003a4 	.word	0x200003a4
   14ac4:	200003de 	.word	0x200003de
   14ac8:	200003df 	.word	0x200003df
   14acc:	200003e2 	.word	0x200003e2
   14ad0:	200003e3 	.word	0x200003e3
   14ad4:	200003e4 	.word	0x200003e4
   14ad8:	200003e5 	.word	0x200003e5
   14adc:	200003e6 	.word	0x200003e6
   14ae0:	200003e7 	.word	0x200003e7
   14ae4:	200003e8 	.word	0x200003e8
   14ae8:	200003e9 	.word	0x200003e9
   14aec:	200003ea 	.word	0x200003ea
   14af0:	200000d4 	.word	0x200000d4
   14af4:	200003cc 	.word	0x200003cc
   14af8:	200000e4 	.word	0x200000e4
   14afc:	200003cd 	.word	0x200003cd
   14b00:	200000e3 	.word	0x200000e3
   14b04:	200003ca 	.word	0x200003ca
   14b08:	200003cb 	.word	0x200003cb
   14b0c:	20001a88 	.word	0x20001a88
   14b10:	200003a2 	.word	0x200003a2
   14b14:	200000e0 	.word	0x200000e0
   14b18:	200000d2 	.word	0x200000d2
   14b1c:	200000d3 	.word	0x200000d3
   14b20:	200003a3 	.word	0x200003a3
   14b24:	200003a5 	.word	0x200003a5
   14b28:	200003a6 	.word	0x200003a6
   14b2c:	20000100 	.word	0x20000100
   14b30:	00014659 	.word	0x00014659

00014b34 <configure_pw_tc>:
void HandleAppRemote(void);
void configure_pw_tc(void);

struct tc_module pw_timer;
void configure_pw_tc(void)
{
   14b34:	b580      	push	{r7, lr}
   14b36:	b08e      	sub	sp, #56	; 0x38
   14b38:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
   14b3a:	1d3b      	adds	r3, r7, #4
   14b3c:	0018      	movs	r0, r3
   14b3e:	4b11      	ldr	r3, [pc, #68]	; (14b84 <configure_pw_tc+0x50>)
   14b40:	4798      	blx	r3
	config_tc.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
   14b42:	1d3b      	adds	r3, r7, #4
   14b44:	2201      	movs	r2, #1
   14b46:	72da      	strb	r2, [r3, #11]
	//config_tc.counter_16_bit = true;
	tc_init(&pw_timer, TC3, &config_tc);
   14b48:	1d3a      	adds	r2, r7, #4
   14b4a:	490f      	ldr	r1, [pc, #60]	; (14b88 <configure_pw_tc+0x54>)
   14b4c:	4b0f      	ldr	r3, [pc, #60]	; (14b8c <configure_pw_tc+0x58>)
   14b4e:	0018      	movs	r0, r3
   14b50:	4b0f      	ldr	r3, [pc, #60]	; (14b90 <configure_pw_tc+0x5c>)
   14b52:	4798      	blx	r3
	TC3->COUNT16.CTRLC.reg  |= TC_CTRLC_CPTEN0;
   14b54:	4a0c      	ldr	r2, [pc, #48]	; (14b88 <configure_pw_tc+0x54>)
   14b56:	4b0c      	ldr	r3, [pc, #48]	; (14b88 <configure_pw_tc+0x54>)
   14b58:	799b      	ldrb	r3, [r3, #6]
   14b5a:	b2db      	uxtb	r3, r3
   14b5c:	2110      	movs	r1, #16
   14b5e:	430b      	orrs	r3, r1
   14b60:	b2db      	uxtb	r3, r3
   14b62:	7193      	strb	r3, [r2, #6]
	TC3->COUNT16.EVCTRL.reg |= TC_EVCTRL_TCEI | TC_EVCTRL_EVACT_PWP;
   14b64:	4a08      	ldr	r2, [pc, #32]	; (14b88 <configure_pw_tc+0x54>)
   14b66:	4b08      	ldr	r3, [pc, #32]	; (14b88 <configure_pw_tc+0x54>)
   14b68:	895b      	ldrh	r3, [r3, #10]
   14b6a:	b29b      	uxth	r3, r3
   14b6c:	2126      	movs	r1, #38	; 0x26
   14b6e:	430b      	orrs	r3, r1
   14b70:	b29b      	uxth	r3, r3
   14b72:	8153      	strh	r3, [r2, #10]
	tc_enable(&pw_timer);
   14b74:	4b05      	ldr	r3, [pc, #20]	; (14b8c <configure_pw_tc+0x58>)
   14b76:	0018      	movs	r0, r3
   14b78:	4b06      	ldr	r3, [pc, #24]	; (14b94 <configure_pw_tc+0x60>)
   14b7a:	4798      	blx	r3
}//*/
   14b7c:	46c0      	nop			; (mov r8, r8)
   14b7e:	46bd      	mov	sp, r7
   14b80:	b00e      	add	sp, #56	; 0x38
   14b82:	bd80      	pop	{r7, pc}
   14b84:	00009e1d 	.word	0x00009e1d
   14b88:	42002c00 	.word	0x42002c00
   14b8c:	200015b0 	.word	0x200015b0
   14b90:	00005871 	.word	0x00005871
   14b94:	00009ea5 	.word	0x00009ea5

00014b98 <config_eic_channel>:

/* Sense: 
 * None, Rise, Fall, Both, High, Low
 * 0x0	 0x1   0x2	 0x3   0x4   0x5
 */
void config_eic_channel(int ch, int sense, bool filt) {
   14b98:	b5b0      	push	{r4, r5, r7, lr}
   14b9a:	b084      	sub	sp, #16
   14b9c:	af00      	add	r7, sp, #0
   14b9e:	60f8      	str	r0, [r7, #12]
   14ba0:	60b9      	str	r1, [r7, #8]
   14ba2:	1dfb      	adds	r3, r7, #7
   14ba4:	701a      	strb	r2, [r3, #0]
	// Config channel
	EIC->CONFIG[ch/8].reg &= ~(0xF << 4*(ch%8));
   14ba6:	4c32      	ldr	r4, [pc, #200]	; (14c70 <config_eic_channel+0xd8>)
   14ba8:	68fb      	ldr	r3, [r7, #12]
   14baa:	2b00      	cmp	r3, #0
   14bac:	da00      	bge.n	14bb0 <config_eic_channel+0x18>
   14bae:	3307      	adds	r3, #7
   14bb0:	10db      	asrs	r3, r3, #3
   14bb2:	001a      	movs	r2, r3
   14bb4:	492e      	ldr	r1, [pc, #184]	; (14c70 <config_eic_channel+0xd8>)
   14bb6:	1d93      	adds	r3, r2, #6
   14bb8:	009b      	lsls	r3, r3, #2
   14bba:	5859      	ldr	r1, [r3, r1]
   14bbc:	68fb      	ldr	r3, [r7, #12]
   14bbe:	482d      	ldr	r0, [pc, #180]	; (14c74 <config_eic_channel+0xdc>)
   14bc0:	4003      	ands	r3, r0
   14bc2:	d504      	bpl.n	14bce <config_eic_channel+0x36>
   14bc4:	3b01      	subs	r3, #1
   14bc6:	2008      	movs	r0, #8
   14bc8:	4240      	negs	r0, r0
   14bca:	4303      	orrs	r3, r0
   14bcc:	3301      	adds	r3, #1
   14bce:	009b      	lsls	r3, r3, #2
   14bd0:	200f      	movs	r0, #15
   14bd2:	4098      	lsls	r0, r3
   14bd4:	0003      	movs	r3, r0
   14bd6:	43db      	mvns	r3, r3
   14bd8:	4019      	ands	r1, r3
   14bda:	1d93      	adds	r3, r2, #6
   14bdc:	009b      	lsls	r3, r3, #2
   14bde:	5119      	str	r1, [r3, r4]
	EIC->CONFIG[ch/8].reg |= (0xF & ((filt? 0x8 : 0) | (0x7 & sense))) << 4*(ch%8);
   14be0:	4d23      	ldr	r5, [pc, #140]	; (14c70 <config_eic_channel+0xd8>)
   14be2:	68fb      	ldr	r3, [r7, #12]
   14be4:	2b00      	cmp	r3, #0
   14be6:	da00      	bge.n	14bea <config_eic_channel+0x52>
   14be8:	3307      	adds	r3, #7
   14bea:	10db      	asrs	r3, r3, #3
   14bec:	001a      	movs	r2, r3
   14bee:	4920      	ldr	r1, [pc, #128]	; (14c70 <config_eic_channel+0xd8>)
   14bf0:	1d93      	adds	r3, r2, #6
   14bf2:	009b      	lsls	r3, r3, #2
   14bf4:	5859      	ldr	r1, [r3, r1]
   14bf6:	1dfb      	adds	r3, r7, #7
   14bf8:	781b      	ldrb	r3, [r3, #0]
   14bfa:	2b00      	cmp	r3, #0
   14bfc:	d001      	beq.n	14c02 <config_eic_channel+0x6a>
   14bfe:	2308      	movs	r3, #8
   14c00:	e000      	b.n	14c04 <config_eic_channel+0x6c>
   14c02:	2300      	movs	r3, #0
   14c04:	68b8      	ldr	r0, [r7, #8]
   14c06:	2407      	movs	r4, #7
   14c08:	4020      	ands	r0, r4
   14c0a:	4303      	orrs	r3, r0
   14c0c:	200f      	movs	r0, #15
   14c0e:	4018      	ands	r0, r3
   14c10:	68fb      	ldr	r3, [r7, #12]
   14c12:	4c18      	ldr	r4, [pc, #96]	; (14c74 <config_eic_channel+0xdc>)
   14c14:	4023      	ands	r3, r4
   14c16:	d504      	bpl.n	14c22 <config_eic_channel+0x8a>
   14c18:	3b01      	subs	r3, #1
   14c1a:	2408      	movs	r4, #8
   14c1c:	4264      	negs	r4, r4
   14c1e:	4323      	orrs	r3, r4
   14c20:	3301      	adds	r3, #1
   14c22:	009b      	lsls	r3, r3, #2
   14c24:	4098      	lsls	r0, r3
   14c26:	0003      	movs	r3, r0
   14c28:	4319      	orrs	r1, r3
   14c2a:	1d93      	adds	r3, r2, #6
   14c2c:	009b      	lsls	r3, r3, #2
   14c2e:	5159      	str	r1, [r3, r5]
	// No wake-up
	EIC->WAKEUP.reg &= ~(1 << ch);	
   14c30:	4b0f      	ldr	r3, [pc, #60]	; (14c70 <config_eic_channel+0xd8>)
   14c32:	4a0f      	ldr	r2, [pc, #60]	; (14c70 <config_eic_channel+0xd8>)
   14c34:	6952      	ldr	r2, [r2, #20]
   14c36:	2001      	movs	r0, #1
   14c38:	68f9      	ldr	r1, [r7, #12]
   14c3a:	4088      	lsls	r0, r1
   14c3c:	0001      	movs	r1, r0
   14c3e:	43c9      	mvns	r1, r1
   14c40:	400a      	ands	r2, r1
   14c42:	615a      	str	r2, [r3, #20]
	// No interrupt
	EIC->INTENCLR.reg |= 1<<ch;
   14c44:	4b0a      	ldr	r3, [pc, #40]	; (14c70 <config_eic_channel+0xd8>)
   14c46:	4a0a      	ldr	r2, [pc, #40]	; (14c70 <config_eic_channel+0xd8>)
   14c48:	6892      	ldr	r2, [r2, #8]
   14c4a:	2001      	movs	r0, #1
   14c4c:	68f9      	ldr	r1, [r7, #12]
   14c4e:	4088      	lsls	r0, r1
   14c50:	0001      	movs	r1, r0
   14c52:	430a      	orrs	r2, r1
   14c54:	609a      	str	r2, [r3, #8]
	// Generate Event 
	EIC->EVCTRL.reg |= 1<<ch;
   14c56:	4b06      	ldr	r3, [pc, #24]	; (14c70 <config_eic_channel+0xd8>)
   14c58:	4a05      	ldr	r2, [pc, #20]	; (14c70 <config_eic_channel+0xd8>)
   14c5a:	6852      	ldr	r2, [r2, #4]
   14c5c:	2001      	movs	r0, #1
   14c5e:	68f9      	ldr	r1, [r7, #12]
   14c60:	4088      	lsls	r0, r1
   14c62:	0001      	movs	r1, r0
   14c64:	430a      	orrs	r2, r1
   14c66:	605a      	str	r2, [r3, #4]
}
   14c68:	46c0      	nop			; (mov r8, r8)
   14c6a:	46bd      	mov	sp, r7
   14c6c:	b004      	add	sp, #16
   14c6e:	bdb0      	pop	{r4, r5, r7, pc}
   14c70:	40001800 	.word	0x40001800
   14c74:	80000007 	.word	0x80000007

00014c78 <config_eic>:

void config_eic() {
   14c78:	b580      	push	{r7, lr}
   14c7a:	af00      	add	r7, sp, #0
PM->APBAMASK.reg |= PM_APBAMASK_EIC;
   14c7c:	4b17      	ldr	r3, [pc, #92]	; (14cdc <config_eic+0x64>)
   14c7e:	4a17      	ldr	r2, [pc, #92]	; (14cdc <config_eic+0x64>)
   14c80:	6992      	ldr	r2, [r2, #24]
   14c82:	2140      	movs	r1, #64	; 0x40
   14c84:	430a      	orrs	r2, r1
   14c86:	619a      	str	r2, [r3, #24]
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EIC_GCLK_ID) |
   14c88:	4b15      	ldr	r3, [pc, #84]	; (14ce0 <config_eic+0x68>)
   14c8a:	4a16      	ldr	r2, [pc, #88]	; (14ce4 <config_eic+0x6c>)
   14c8c:	805a      	strh	r2, [r3, #2]
GCLK_CLKCTRL_CLKEN |
GCLK_CLKCTRL_GEN(0);
EIC->CTRL.reg = EIC_CTRL_SWRST;
   14c8e:	4b16      	ldr	r3, [pc, #88]	; (14ce8 <config_eic+0x70>)
   14c90:	2201      	movs	r2, #1
   14c92:	701a      	strb	r2, [r3, #0]
while(EIC->CTRL.bit.SWRST && EIC->STATUS.bit.SYNCBUSY);
   14c94:	46c0      	nop			; (mov r8, r8)
   14c96:	4b14      	ldr	r3, [pc, #80]	; (14ce8 <config_eic+0x70>)
   14c98:	781b      	ldrb	r3, [r3, #0]
   14c9a:	07db      	lsls	r3, r3, #31
   14c9c:	0fdb      	lsrs	r3, r3, #31
   14c9e:	b2db      	uxtb	r3, r3
   14ca0:	2b00      	cmp	r3, #0
   14ca2:	d006      	beq.n	14cb2 <config_eic+0x3a>
   14ca4:	4b10      	ldr	r3, [pc, #64]	; (14ce8 <config_eic+0x70>)
   14ca6:	785b      	ldrb	r3, [r3, #1]
   14ca8:	061b      	lsls	r3, r3, #24
   14caa:	0fdb      	lsrs	r3, r3, #31
   14cac:	b2db      	uxtb	r3, r3
   14cae:	2b00      	cmp	r3, #0
   14cb0:	d1f1      	bne.n	14c96 <config_eic+0x1e>
config_eic_channel(2, 4, false);
   14cb2:	2200      	movs	r2, #0
   14cb4:	2104      	movs	r1, #4
   14cb6:	2002      	movs	r0, #2
   14cb8:	4b0c      	ldr	r3, [pc, #48]	; (14cec <config_eic+0x74>)
   14cba:	4798      	blx	r3

EIC->CTRL.bit.ENABLE = 1;
   14cbc:	4a0a      	ldr	r2, [pc, #40]	; (14ce8 <config_eic+0x70>)
   14cbe:	7813      	ldrb	r3, [r2, #0]
   14cc0:	2102      	movs	r1, #2
   14cc2:	430b      	orrs	r3, r1
   14cc4:	7013      	strb	r3, [r2, #0]
while(EIC->STATUS.bit.SYNCBUSY);
   14cc6:	46c0      	nop			; (mov r8, r8)
   14cc8:	4b07      	ldr	r3, [pc, #28]	; (14ce8 <config_eic+0x70>)
   14cca:	785b      	ldrb	r3, [r3, #1]
   14ccc:	061b      	lsls	r3, r3, #24
   14cce:	0fdb      	lsrs	r3, r3, #31
   14cd0:	b2db      	uxtb	r3, r3
   14cd2:	2b00      	cmp	r3, #0
   14cd4:	d1f8      	bne.n	14cc8 <config_eic+0x50>
}
   14cd6:	46c0      	nop			; (mov r8, r8)
   14cd8:	46bd      	mov	sp, r7
   14cda:	bd80      	pop	{r7, pc}
   14cdc:	40000400 	.word	0x40000400
   14ce0:	40000c00 	.word	0x40000c00
   14ce4:	00004005 	.word	0x00004005
   14ce8:	40001800 	.word	0x40001800
   14cec:	00014b99 	.word	0x00014b99

00014cf0 <config_evsys>:

void config_evsys() {
   14cf0:	b580      	push	{r7, lr}
   14cf2:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_EVSYS;
   14cf4:	4b17      	ldr	r3, [pc, #92]	; (14d54 <config_evsys+0x64>)
   14cf6:	4a17      	ldr	r2, [pc, #92]	; (14d54 <config_evsys+0x64>)
   14cf8:	6a12      	ldr	r2, [r2, #32]
   14cfa:	2102      	movs	r1, #2
   14cfc:	430a      	orrs	r2, r1
   14cfe:	621a      	str	r2, [r3, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EVSYS_GCLK_ID_0) |
   14d00:	4b15      	ldr	r3, [pc, #84]	; (14d58 <config_evsys+0x68>)
   14d02:	4a16      	ldr	r2, [pc, #88]	; (14d5c <config_evsys+0x6c>)
   14d04:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN |
	GCLK_CLKCTRL_GEN(0);
	while(GCLK->STATUS.bit.SYNCBUSY);
   14d06:	46c0      	nop			; (mov r8, r8)
   14d08:	4b13      	ldr	r3, [pc, #76]	; (14d58 <config_evsys+0x68>)
   14d0a:	785b      	ldrb	r3, [r3, #1]
   14d0c:	061b      	lsls	r3, r3, #24
   14d0e:	0fdb      	lsrs	r3, r3, #31
   14d10:	b2db      	uxtb	r3, r3
   14d12:	2b00      	cmp	r3, #0
   14d14:	d1f8      	bne.n	14d08 <config_evsys+0x18>

	EVSYS->CTRL.bit.SWRST = 1;
   14d16:	4a12      	ldr	r2, [pc, #72]	; (14d60 <config_evsys+0x70>)
   14d18:	7813      	ldrb	r3, [r2, #0]
   14d1a:	2101      	movs	r1, #1
   14d1c:	430b      	orrs	r3, r1
   14d1e:	7013      	strb	r3, [r2, #0]
	while(EVSYS->CTRL.bit.SWRST);
   14d20:	46c0      	nop			; (mov r8, r8)
   14d22:	4b0f      	ldr	r3, [pc, #60]	; (14d60 <config_evsys+0x70>)
   14d24:	781b      	ldrb	r3, [r3, #0]
   14d26:	07db      	lsls	r3, r3, #31
   14d28:	0fdb      	lsrs	r3, r3, #31
   14d2a:	b2db      	uxtb	r3, r3
   14d2c:	2b00      	cmp	r3, #0
   14d2e:	d1f8      	bne.n	14d22 <config_evsys+0x32>

	// Event receiver
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(1) | // Set channel n-1
   14d30:	4b0b      	ldr	r3, [pc, #44]	; (14d60 <config_evsys+0x70>)
   14d32:	2289      	movs	r2, #137	; 0x89
   14d34:	0052      	lsls	r2, r2, #1
   14d36:	811a      	strh	r2, [r3, #8]
	//EVSYS_USER_USER(EVSYS_ID_USER_TCC1_EV_1); // Match/Capture 1 on TCC1
	EVSYS_USER_USER(EVSYS_ID_USER_TC3_EVU); // Match/Capture on TC3
	// Event channel
	EVSYS->CHANNEL.reg = EVSYS_CHANNEL_CHANNEL(0) | // Set channel n
   14d38:	4b09      	ldr	r3, [pc, #36]	; (14d60 <config_evsys+0x70>)
   14d3a:	4a0a      	ldr	r2, [pc, #40]	; (14d64 <config_evsys+0x74>)
   14d3c:	605a      	str	r2, [r3, #4]
	EVSYS_CHANNEL_PATH_ASYNCHRONOUS |
	EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_2) |
	EVSYS_CHANNEL_EDGSEL_BOTH_EDGES; // Detect both edges
	// Wait channel to be ready
	while(!EVSYS->CHSTATUS.bit.USRRDY0);
   14d3e:	46c0      	nop			; (mov r8, r8)
   14d40:	4b07      	ldr	r3, [pc, #28]	; (14d60 <config_evsys+0x70>)
   14d42:	68db      	ldr	r3, [r3, #12]
   14d44:	07db      	lsls	r3, r3, #31
   14d46:	0fdb      	lsrs	r3, r3, #31
   14d48:	b2db      	uxtb	r3, r3
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d0f8      	beq.n	14d40 <config_evsys+0x50>
	// EVSYS is always enabled
}
   14d4e:	46c0      	nop			; (mov r8, r8)
   14d50:	46bd      	mov	sp, r7
   14d52:	bd80      	pop	{r7, pc}
   14d54:	40000400 	.word	0x40000400
   14d58:	40000c00 	.word	0x40000c00
   14d5c:	00004007 	.word	0x00004007
   14d60:	42000400 	.word	0x42000400
   14d64:	0e0e0000 	.word	0x0e0e0000

00014d68 <gpio_in>:

void gpio_in(int port, int pin)	{
   14d68:	b590      	push	{r4, r7, lr}
   14d6a:	b083      	sub	sp, #12
   14d6c:	af00      	add	r7, sp, #0
   14d6e:	6078      	str	r0, [r7, #4]
   14d70:	6039      	str	r1, [r7, #0]
	PORT->Group[port].DIRCLR.reg = (1 << pin);
   14d72:	4a13      	ldr	r2, [pc, #76]	; (14dc0 <gpio_in+0x58>)
   14d74:	2101      	movs	r1, #1
   14d76:	683b      	ldr	r3, [r7, #0]
   14d78:	4099      	lsls	r1, r3
   14d7a:	000b      	movs	r3, r1
   14d7c:	0019      	movs	r1, r3
   14d7e:	687b      	ldr	r3, [r7, #4]
   14d80:	01db      	lsls	r3, r3, #7
   14d82:	18d3      	adds	r3, r2, r3
   14d84:	3304      	adds	r3, #4
   14d86:	6019      	str	r1, [r3, #0]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_INEN;
   14d88:	480d      	ldr	r0, [pc, #52]	; (14dc0 <gpio_in+0x58>)
   14d8a:	4a0d      	ldr	r2, [pc, #52]	; (14dc0 <gpio_in+0x58>)
   14d8c:	687b      	ldr	r3, [r7, #4]
   14d8e:	2140      	movs	r1, #64	; 0x40
   14d90:	01db      	lsls	r3, r3, #7
   14d92:	18d2      	adds	r2, r2, r3
   14d94:	683b      	ldr	r3, [r7, #0]
   14d96:	18d3      	adds	r3, r2, r3
   14d98:	185b      	adds	r3, r3, r1
   14d9a:	781b      	ldrb	r3, [r3, #0]
   14d9c:	b2db      	uxtb	r3, r3
   14d9e:	2202      	movs	r2, #2
   14da0:	4313      	orrs	r3, r2
   14da2:	b2dc      	uxtb	r4, r3
   14da4:	687b      	ldr	r3, [r7, #4]
   14da6:	2140      	movs	r1, #64	; 0x40
   14da8:	01db      	lsls	r3, r3, #7
   14daa:	18c2      	adds	r2, r0, r3
   14dac:	683b      	ldr	r3, [r7, #0]
   14dae:	18d3      	adds	r3, r2, r3
   14db0:	185b      	adds	r3, r3, r1
   14db2:	1c22      	adds	r2, r4, #0
   14db4:	701a      	strb	r2, [r3, #0]
}
   14db6:	46c0      	nop			; (mov r8, r8)
   14db8:	46bd      	mov	sp, r7
   14dba:	b003      	add	sp, #12
   14dbc:	bd90      	pop	{r4, r7, pc}
   14dbe:	46c0      	nop			; (mov r8, r8)
   14dc0:	41004400 	.word	0x41004400

00014dc4 <gpio_pmuxen>:

void gpio_pmuxen(int port, int pin, int mux) {
   14dc4:	b590      	push	{r4, r7, lr}
   14dc6:	b085      	sub	sp, #20
   14dc8:	af00      	add	r7, sp, #0
   14dca:	60f8      	str	r0, [r7, #12]
   14dcc:	60b9      	str	r1, [r7, #8]
   14dce:	607a      	str	r2, [r7, #4]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_PMUXEN;
   14dd0:	4827      	ldr	r0, [pc, #156]	; (14e70 <gpio_pmuxen+0xac>)
   14dd2:	4a27      	ldr	r2, [pc, #156]	; (14e70 <gpio_pmuxen+0xac>)
   14dd4:	68fb      	ldr	r3, [r7, #12]
   14dd6:	2140      	movs	r1, #64	; 0x40
   14dd8:	01db      	lsls	r3, r3, #7
   14dda:	18d2      	adds	r2, r2, r3
   14ddc:	68bb      	ldr	r3, [r7, #8]
   14dde:	18d3      	adds	r3, r2, r3
   14de0:	185b      	adds	r3, r3, r1
   14de2:	781b      	ldrb	r3, [r3, #0]
   14de4:	b2db      	uxtb	r3, r3
   14de6:	2201      	movs	r2, #1
   14de8:	4313      	orrs	r3, r2
   14dea:	b2dc      	uxtb	r4, r3
   14dec:	68fb      	ldr	r3, [r7, #12]
   14dee:	2140      	movs	r1, #64	; 0x40
   14df0:	01db      	lsls	r3, r3, #7
   14df2:	18c2      	adds	r2, r0, r3
   14df4:	68bb      	ldr	r3, [r7, #8]
   14df6:	18d3      	adds	r3, r2, r3
   14df8:	185b      	adds	r3, r3, r1
   14dfa:	1c22      	adds	r2, r4, #0
   14dfc:	701a      	strb	r2, [r3, #0]
	if (pin & 1)
   14dfe:	68bb      	ldr	r3, [r7, #8]
   14e00:	2201      	movs	r2, #1
   14e02:	4013      	ands	r3, r2
   14e04:	d017      	beq.n	14e36 <gpio_pmuxen+0x72>
	PORT->Group[port].PMUX[pin>>1].bit.PMUXO = mux;
   14e06:	4c1a      	ldr	r4, [pc, #104]	; (14e70 <gpio_pmuxen+0xac>)
   14e08:	68bb      	ldr	r3, [r7, #8]
   14e0a:	105b      	asrs	r3, r3, #1
   14e0c:	687a      	ldr	r2, [r7, #4]
   14e0e:	b2d2      	uxtb	r2, r2
   14e10:	1c11      	adds	r1, r2, #0
   14e12:	220f      	movs	r2, #15
   14e14:	400a      	ands	r2, r1
   14e16:	b2d1      	uxtb	r1, r2
   14e18:	68fa      	ldr	r2, [r7, #12]
   14e1a:	2030      	movs	r0, #48	; 0x30
   14e1c:	01d2      	lsls	r2, r2, #7
   14e1e:	18a2      	adds	r2, r4, r2
   14e20:	18d3      	adds	r3, r2, r3
   14e22:	181a      	adds	r2, r3, r0
   14e24:	7813      	ldrb	r3, [r2, #0]
   14e26:	0108      	lsls	r0, r1, #4
   14e28:	210f      	movs	r1, #15
   14e2a:	400b      	ands	r3, r1
   14e2c:	1c19      	adds	r1, r3, #0
   14e2e:	1c03      	adds	r3, r0, #0
   14e30:	430b      	orrs	r3, r1
   14e32:	7013      	strb	r3, [r2, #0]
	else
	PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
}
   14e34:	e017      	b.n	14e66 <gpio_pmuxen+0xa2>
	PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
   14e36:	4c0e      	ldr	r4, [pc, #56]	; (14e70 <gpio_pmuxen+0xac>)
   14e38:	68bb      	ldr	r3, [r7, #8]
   14e3a:	105b      	asrs	r3, r3, #1
   14e3c:	687a      	ldr	r2, [r7, #4]
   14e3e:	b2d2      	uxtb	r2, r2
   14e40:	1c11      	adds	r1, r2, #0
   14e42:	220f      	movs	r2, #15
   14e44:	400a      	ands	r2, r1
   14e46:	b2d1      	uxtb	r1, r2
   14e48:	68fa      	ldr	r2, [r7, #12]
   14e4a:	2030      	movs	r0, #48	; 0x30
   14e4c:	01d2      	lsls	r2, r2, #7
   14e4e:	18a2      	adds	r2, r4, r2
   14e50:	18d3      	adds	r3, r2, r3
   14e52:	181a      	adds	r2, r3, r0
   14e54:	7813      	ldrb	r3, [r2, #0]
   14e56:	200f      	movs	r0, #15
   14e58:	4008      	ands	r0, r1
   14e5a:	210f      	movs	r1, #15
   14e5c:	438b      	bics	r3, r1
   14e5e:	1c19      	adds	r1, r3, #0
   14e60:	1c03      	adds	r3, r0, #0
   14e62:	430b      	orrs	r3, r1
   14e64:	7013      	strb	r3, [r2, #0]
}
   14e66:	46c0      	nop			; (mov r8, r8)
   14e68:	46bd      	mov	sp, r7
   14e6a:	b005      	add	sp, #20
   14e6c:	bd90      	pop	{r4, r7, pc}
   14e6e:	46c0      	nop			; (mov r8, r8)
   14e70:	41004400 	.word	0x41004400

00014e74 <config_gpio>:

void config_gpio() {
   14e74:	b580      	push	{r7, lr}
   14e76:	af00      	add	r7, sp, #0
	gpio_in(1, 2);
   14e78:	2102      	movs	r1, #2
   14e7a:	2001      	movs	r0, #1
   14e7c:	4b05      	ldr	r3, [pc, #20]	; (14e94 <config_gpio+0x20>)
   14e7e:	4798      	blx	r3
	gpio_pmuxen(1, 2, PINMUX_PB02A_EIC_EXTINT2);
   14e80:	2388      	movs	r3, #136	; 0x88
   14e82:	039b      	lsls	r3, r3, #14
   14e84:	001a      	movs	r2, r3
   14e86:	2102      	movs	r1, #2
   14e88:	2001      	movs	r0, #1
   14e8a:	4b03      	ldr	r3, [pc, #12]	; (14e98 <config_gpio+0x24>)
   14e8c:	4798      	blx	r3
}
   14e8e:	46c0      	nop			; (mov r8, r8)
   14e90:	46bd      	mov	sp, r7
   14e92:	bd80      	pop	{r7, pc}
   14e94:	00014d69 	.word	0x00014d69
   14e98:	00014dc5 	.word	0x00014dc5

00014e9c <get_pulse_width>:

//uint16_t light_sens = 0; // for PWM debugging
inline int get_pulse_width() {
   14e9c:	b580      	push	{r7, lr}
   14e9e:	af00      	add	r7, sp, #0
	return TC3->COUNT16.CC[0].bit.CC;
   14ea0:	4b02      	ldr	r3, [pc, #8]	; (14eac <get_pulse_width+0x10>)
   14ea2:	8b1b      	ldrh	r3, [r3, #24]
   14ea4:	b29b      	uxth	r3, r3
}
   14ea6:	0018      	movs	r0, r3
   14ea8:	46bd      	mov	sp, r7
   14eaa:	bd80      	pop	{r7, pc}
   14eac:	42002c00 	.word	0x42002c00

00014eb0 <HandleUserInput>:

void HandleUserInput()
{
   14eb0:	b590      	push	{r4, r7, lr}
   14eb2:	b083      	sub	sp, #12
   14eb4:	af00      	add	r7, sp, #0
	///////////////   Use the appropriate throttle input   ///////////////
	//////////////////////////////////////////////////////////////////////
	switch(remote_type){
   14eb6:	4bcb      	ldr	r3, [pc, #812]	; (151e4 <HandleUserInput+0x334>)
   14eb8:	781b      	ldrb	r3, [r3, #0]
   14eba:	2b02      	cmp	r3, #2
   14ebc:	d03d      	beq.n	14f3a <HandleUserInput+0x8a>
   14ebe:	dc49      	bgt.n	14f54 <HandleUserInput+0xa4>
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	db48      	blt.n	14f56 <HandleUserInput+0xa6>
		case REMOTE_PPM:
		case REMOTE_UART_PPM:{
			READ_VESC_PWM = true;
   14ec4:	4bc8      	ldr	r3, [pc, #800]	; (151e8 <HandleUserInput+0x338>)
   14ec6:	2201      	movs	r2, #1
   14ec8:	701a      	strb	r2, [r3, #0]
			float temp = (((float)latest_vesc_vals.pwm_val + 595000.0)*(255.0/1495000.0));
   14eca:	4bc8      	ldr	r3, [pc, #800]	; (151ec <HandleUserInput+0x33c>)
   14ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14ece:	4bc8      	ldr	r3, [pc, #800]	; (151f0 <HandleUserInput+0x340>)
   14ed0:	0010      	movs	r0, r2
   14ed2:	4798      	blx	r3
   14ed4:	1c02      	adds	r2, r0, #0
   14ed6:	4bc7      	ldr	r3, [pc, #796]	; (151f4 <HandleUserInput+0x344>)
   14ed8:	1c10      	adds	r0, r2, #0
   14eda:	4798      	blx	r3
   14edc:	4cc6      	ldr	r4, [pc, #792]	; (151f8 <HandleUserInput+0x348>)
   14ede:	2200      	movs	r2, #0
   14ee0:	4bc6      	ldr	r3, [pc, #792]	; (151fc <HandleUserInput+0x34c>)
   14ee2:	47a0      	blx	r4
   14ee4:	0003      	movs	r3, r0
   14ee6:	000c      	movs	r4, r1
   14ee8:	0018      	movs	r0, r3
   14eea:	0021      	movs	r1, r4
   14eec:	4cc4      	ldr	r4, [pc, #784]	; (15200 <HandleUserInput+0x350>)
   14eee:	4ac5      	ldr	r2, [pc, #788]	; (15204 <HandleUserInput+0x354>)
   14ef0:	4bc5      	ldr	r3, [pc, #788]	; (15208 <HandleUserInput+0x358>)
   14ef2:	47a0      	blx	r4
   14ef4:	0003      	movs	r3, r0
   14ef6:	000c      	movs	r4, r1
   14ef8:	0019      	movs	r1, r3
   14efa:	0022      	movs	r2, r4
   14efc:	4bc3      	ldr	r3, [pc, #780]	; (1520c <HandleUserInput+0x35c>)
   14efe:	0008      	movs	r0, r1
   14f00:	0011      	movs	r1, r2
   14f02:	4798      	blx	r3
   14f04:	1c03      	adds	r3, r0, #0
   14f06:	607b      	str	r3, [r7, #4]
			//temp = -temp + 255;
			if(temp < 0)
   14f08:	4bc1      	ldr	r3, [pc, #772]	; (15210 <HandleUserInput+0x360>)
   14f0a:	2100      	movs	r1, #0
   14f0c:	6878      	ldr	r0, [r7, #4]
   14f0e:	4798      	blx	r3
   14f10:	1e03      	subs	r3, r0, #0
   14f12:	d002      	beq.n	14f1a <HandleUserInput+0x6a>
				temp = 0;
   14f14:	2300      	movs	r3, #0
   14f16:	607b      	str	r3, [r7, #4]
   14f18:	e007      	b.n	14f2a <HandleUserInput+0x7a>
			else if(temp > 255)
   14f1a:	4bbe      	ldr	r3, [pc, #760]	; (15214 <HandleUserInput+0x364>)
   14f1c:	49be      	ldr	r1, [pc, #760]	; (15218 <HandleUserInput+0x368>)
   14f1e:	6878      	ldr	r0, [r7, #4]
   14f20:	4798      	blx	r3
   14f22:	1e03      	subs	r3, r0, #0
   14f24:	d001      	beq.n	14f2a <HandleUserInput+0x7a>
				temp = 255;
   14f26:	4bbc      	ldr	r3, [pc, #752]	; (15218 <HandleUserInput+0x368>)
   14f28:	607b      	str	r3, [r7, #4]
			remote_y = (uint8_t)(temp);
   14f2a:	4bbc      	ldr	r3, [pc, #752]	; (1521c <HandleUserInput+0x36c>)
   14f2c:	6878      	ldr	r0, [r7, #4]
   14f2e:	4798      	blx	r3
   14f30:	0003      	movs	r3, r0
   14f32:	b2da      	uxtb	r2, r3
   14f34:	4bba      	ldr	r3, [pc, #744]	; (15220 <HandleUserInput+0x370>)
   14f36:	701a      	strb	r2, [r3, #0]
			break;}
   14f38:	e00d      	b.n	14f56 <HandleUserInput+0xa6>
		case REMOTE_UART_SINGLE:
		//case REMOTE_UART_DUAL:
			READ_VESC_CHUCK = true;
   14f3a:	4bba      	ldr	r3, [pc, #744]	; (15224 <HandleUserInput+0x374>)
   14f3c:	2201      	movs	r2, #1
   14f3e:	701a      	strb	r2, [r3, #0]
			remote_y = rec_chuck_struct.js_y;
   14f40:	4bb9      	ldr	r3, [pc, #740]	; (15228 <HandleUserInput+0x378>)
   14f42:	785b      	ldrb	r3, [r3, #1]
   14f44:	b25b      	sxtb	r3, r3
   14f46:	b2da      	uxtb	r2, r3
   14f48:	4bb5      	ldr	r3, [pc, #724]	; (15220 <HandleUserInput+0x370>)
   14f4a:	701a      	strb	r2, [r3, #0]
			//if(remote_type == REMOTE_UART_DUAL)
			//	remote_x = rec_chuck_struct.js_x;
			//else
				remote_x = 255/2;
   14f4c:	4bb7      	ldr	r3, [pc, #732]	; (1522c <HandleUserInput+0x37c>)
   14f4e:	227f      	movs	r2, #127	; 0x7f
   14f50:	701a      	strb	r2, [r3, #0]
			break;
   14f52:	e000      	b.n	14f56 <HandleUserInput+0xa6>
		case REMOTE_APP:
			//if(app_remote_check && REMOTE_TYPE < 2)
				//temp_y = AppRemoteY;
			//else
				//temp_y = VescRemoteY;
			break;
   14f54:	46c0      	nop			; (mov r8, r8)
	}


	////////////////   Use the appropriate button input   ////////////////
	//////////////////////////////////////////////////////////////////////
	switch(button_type){
   14f56:	4bb6      	ldr	r3, [pc, #728]	; (15230 <HandleUserInput+0x380>)
   14f58:	781b      	ldrb	r3, [r3, #0]
   14f5a:	2b07      	cmp	r3, #7
   14f5c:	d84d      	bhi.n	14ffa <HandleUserInput+0x14a>
   14f5e:	009a      	lsls	r2, r3, #2
   14f60:	4bb4      	ldr	r3, [pc, #720]	; (15234 <HandleUserInput+0x384>)
   14f62:	18d3      	adds	r3, r2, r3
   14f64:	681b      	ldr	r3, [r3, #0]
   14f66:	469f      	mov	pc, r3
		case BTN_MOMENTARY: 
		case BTN_LATCHED:
			remote_btn_state = port_pin_get_input_level(PPM_IN);
   14f68:	2022      	movs	r0, #34	; 0x22
   14f6a:	4bb3      	ldr	r3, [pc, #716]	; (15238 <HandleUserInput+0x388>)
   14f6c:	4798      	blx	r3
   14f6e:	0003      	movs	r3, r0
   14f70:	001a      	movs	r2, r3
   14f72:	4bb2      	ldr	r3, [pc, #712]	; (1523c <HandleUserInput+0x38c>)
   14f74:	701a      	strb	r2, [r3, #0]
			break;
   14f76:	e045      	b.n	15004 <HandleUserInput+0x154>
		case BTN_LATCHED_PPM:{
				static bool FIRST_READ = true;
				//static int pulse_width = 0;		// For debugging pulse width
				//pulse_width = get_pulse_width();	// For debugging pulse width
				if(get_pulse_width() > 9000)
   14f78:	4bb1      	ldr	r3, [pc, #708]	; (15240 <HandleUserInput+0x390>)
   14f7a:	4798      	blx	r3
   14f7c:	0002      	movs	r2, r0
   14f7e:	4bb1      	ldr	r3, [pc, #708]	; (15244 <HandleUserInput+0x394>)
   14f80:	429a      	cmp	r2, r3
   14f82:	dd03      	ble.n	14f8c <HandleUserInput+0xdc>
					remote_btn_state = false;
   14f84:	4bad      	ldr	r3, [pc, #692]	; (1523c <HandleUserInput+0x38c>)
   14f86:	2200      	movs	r2, #0
   14f88:	701a      	strb	r2, [r3, #0]
   14f8a:	e002      	b.n	14f92 <HandleUserInput+0xe2>
				else
					remote_btn_state = true;
   14f8c:	4bab      	ldr	r3, [pc, #684]	; (1523c <HandleUserInput+0x38c>)
   14f8e:	2201      	movs	r2, #1
   14f90:	701a      	strb	r2, [r3, #0]
				if(FIRST_READ){
   14f92:	4bad      	ldr	r3, [pc, #692]	; (15248 <HandleUserInput+0x398>)
   14f94:	781b      	ldrb	r3, [r3, #0]
   14f96:	2b00      	cmp	r3, #0
   14f98:	d033      	beq.n	15002 <HandleUserInput+0x152>
					lremote_btn_state = remote_btn_state;
   14f9a:	4ba8      	ldr	r3, [pc, #672]	; (1523c <HandleUserInput+0x38c>)
   14f9c:	781a      	ldrb	r2, [r3, #0]
   14f9e:	4bab      	ldr	r3, [pc, #684]	; (1524c <HandleUserInput+0x39c>)
   14fa0:	701a      	strb	r2, [r3, #0]
					FIRST_READ = false;
   14fa2:	4ba9      	ldr	r3, [pc, #676]	; (15248 <HandleUserInput+0x398>)
   14fa4:	2200      	movs	r2, #0
   14fa6:	701a      	strb	r2, [r3, #0]
				}
				//light_sens = pulse_width; // for debugging pulse width reading
			}
			break;
   14fa8:	e02b      	b.n	15002 <HandleUserInput+0x152>
		case BTN_UART_C:
			READ_VESC_CHUCK = true;
   14faa:	4b9e      	ldr	r3, [pc, #632]	; (15224 <HandleUserInput+0x374>)
   14fac:	2201      	movs	r2, #1
   14fae:	701a      	strb	r2, [r3, #0]
			remote_btn_state = rec_chuck_struct.bt_c;
   14fb0:	4b9d      	ldr	r3, [pc, #628]	; (15228 <HandleUserInput+0x378>)
   14fb2:	7a1b      	ldrb	r3, [r3, #8]
   14fb4:	001a      	movs	r2, r3
   14fb6:	4ba1      	ldr	r3, [pc, #644]	; (1523c <HandleUserInput+0x38c>)
   14fb8:	701a      	strb	r2, [r3, #0]
			break;	
   14fba:	e023      	b.n	15004 <HandleUserInput+0x154>
		case BTN_UART_Z:
			READ_VESC_CHUCK = true;
   14fbc:	4b99      	ldr	r3, [pc, #612]	; (15224 <HandleUserInput+0x374>)
   14fbe:	2201      	movs	r2, #1
   14fc0:	701a      	strb	r2, [r3, #0]
			remote_btn_state = rec_chuck_struct.bt_z;
   14fc2:	4b99      	ldr	r3, [pc, #612]	; (15228 <HandleUserInput+0x378>)
   14fc4:	7a5b      	ldrb	r3, [r3, #9]
   14fc6:	001a      	movs	r2, r3
   14fc8:	4b9c      	ldr	r3, [pc, #624]	; (1523c <HandleUserInput+0x38c>)
   14fca:	701a      	strb	r2, [r3, #0]
			break;
   14fcc:	e01a      	b.n	15004 <HandleUserInput+0x154>
		case BTN_THROTTLE_DWN:
			remote_btn_state = (remote_y < (127 - DWN_THRESH));
   14fce:	4b94      	ldr	r3, [pc, #592]	; (15220 <HandleUserInput+0x370>)
   14fd0:	781a      	ldrb	r2, [r3, #0]
   14fd2:	2174      	movs	r1, #116	; 0x74
   14fd4:	2300      	movs	r3, #0
   14fd6:	4291      	cmp	r1, r2
   14fd8:	415b      	adcs	r3, r3
   14fda:	b2db      	uxtb	r3, r3
   14fdc:	001a      	movs	r2, r3
   14fde:	4b97      	ldr	r3, [pc, #604]	; (1523c <HandleUserInput+0x38c>)
   14fe0:	701a      	strb	r2, [r3, #0]
			break;
   14fe2:	e00f      	b.n	15004 <HandleUserInput+0x154>
		case BTN_THROTTLE_UP:
			remote_btn_state = (remote_y > (127 + UP_THRESH));
   14fe4:	4b8e      	ldr	r3, [pc, #568]	; (15220 <HandleUserInput+0x370>)
   14fe6:	781b      	ldrb	r3, [r3, #0]
   14fe8:	2289      	movs	r2, #137	; 0x89
   14fea:	429a      	cmp	r2, r3
   14fec:	419b      	sbcs	r3, r3
   14fee:	425b      	negs	r3, r3
   14ff0:	b2db      	uxtb	r3, r3
   14ff2:	001a      	movs	r2, r3
   14ff4:	4b91      	ldr	r3, [pc, #580]	; (1523c <HandleUserInput+0x38c>)
   14ff6:	701a      	strb	r2, [r3, #0]
			break;
   14ff8:	e004      	b.n	15004 <HandleUserInput+0x154>
		default:
			remote_btn_state = 0;
   14ffa:	4b90      	ldr	r3, [pc, #576]	; (1523c <HandleUserInput+0x38c>)
   14ffc:	2200      	movs	r2, #0
   14ffe:	701a      	strb	r2, [r3, #0]
			break;
   15000:	e000      	b.n	15004 <HandleUserInput+0x154>
			break;
   15002:	46c0      	nop			; (mov r8, r8)
	}

	////   Determine the time the button was held down and released   ////
	//////////////////////////////////////////////////////////////////////
	if(button_type != BTN_LATCHED && button_type != BTN_LATCHED_PPM){
   15004:	4b8a      	ldr	r3, [pc, #552]	; (15230 <HandleUserInput+0x380>)
   15006:	781b      	ldrb	r3, [r3, #0]
   15008:	2b02      	cmp	r3, #2
   1500a:	d063      	beq.n	150d4 <HandleUserInput+0x224>
   1500c:	4b88      	ldr	r3, [pc, #544]	; (15230 <HandleUserInput+0x380>)
   1500e:	781b      	ldrb	r3, [r3, #0]
   15010:	2b03      	cmp	r3, #3
   15012:	d05f      	beq.n	150d4 <HandleUserInput+0x224>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   15014:	4b89      	ldr	r3, [pc, #548]	; (1523c <HandleUserInput+0x38c>)
   15016:	781b      	ldrb	r3, [r3, #0]
   15018:	2b01      	cmp	r3, #1
   1501a:	d10c      	bne.n	15036 <HandleUserInput+0x186>
   1501c:	4b8b      	ldr	r3, [pc, #556]	; (1524c <HandleUserInput+0x39c>)
   1501e:	781b      	ldrb	r3, [r3, #0]
   15020:	2b00      	cmp	r3, #0
   15022:	d108      	bne.n	15036 <HandleUserInput+0x186>
			lButtonTime = millis(); // Mark the time of button state transition
   15024:	4b8a      	ldr	r3, [pc, #552]	; (15250 <HandleUserInput+0x3a0>)
   15026:	4798      	blx	r3
   15028:	0002      	movs	r2, r0
   1502a:	4b8a      	ldr	r3, [pc, #552]	; (15254 <HandleUserInput+0x3a4>)
   1502c:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
   1502e:	4b8a      	ldr	r3, [pc, #552]	; (15258 <HandleUserInput+0x3a8>)
   15030:	2200      	movs	r2, #0
   15032:	601a      	str	r2, [r3, #0]
   15034:	e04d      	b.n	150d2 <HandleUserInput+0x222>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
   15036:	4b81      	ldr	r3, [pc, #516]	; (1523c <HandleUserInput+0x38c>)
   15038:	781b      	ldrb	r3, [r3, #0]
   1503a:	2b00      	cmp	r3, #0
   1503c:	d118      	bne.n	15070 <HandleUserInput+0x1c0>
   1503e:	4b83      	ldr	r3, [pc, #524]	; (1524c <HandleUserInput+0x39c>)
   15040:	781b      	ldrb	r3, [r3, #0]
   15042:	2b01      	cmp	r3, #1
   15044:	d114      	bne.n	15070 <HandleUserInput+0x1c0>
			check_time(&lButtonTime);
   15046:	4b83      	ldr	r3, [pc, #524]	; (15254 <HandleUserInput+0x3a4>)
   15048:	0018      	movs	r0, r3
   1504a:	4b84      	ldr	r3, [pc, #528]	; (1525c <HandleUserInput+0x3ac>)
   1504c:	4798      	blx	r3
			ButtonDownTime = millis() - lButtonTime;  // Track time button was pressed
   1504e:	4b80      	ldr	r3, [pc, #512]	; (15250 <HandleUserInput+0x3a0>)
   15050:	4798      	blx	r3
   15052:	0002      	movs	r2, r0
   15054:	4b7f      	ldr	r3, [pc, #508]	; (15254 <HandleUserInput+0x3a4>)
   15056:	681b      	ldr	r3, [r3, #0]
   15058:	1ad2      	subs	r2, r2, r3
   1505a:	4b81      	ldr	r3, [pc, #516]	; (15260 <HandleUserInput+0x3b0>)
   1505c:	601a      	str	r2, [r3, #0]

			lButtonTime = millis();  // Mark the time of button state transition
   1505e:	4b7c      	ldr	r3, [pc, #496]	; (15250 <HandleUserInput+0x3a0>)
   15060:	4798      	blx	r3
   15062:	0002      	movs	r2, r0
   15064:	4b7b      	ldr	r3, [pc, #492]	; (15254 <HandleUserInput+0x3a4>)
   15066:	601a      	str	r2, [r3, #0]
			ButtonHeldTime = 0;
   15068:	4b7e      	ldr	r3, [pc, #504]	; (15264 <HandleUserInput+0x3b4>)
   1506a:	2200      	movs	r2, #0
   1506c:	601a      	str	r2, [r3, #0]
   1506e:	e030      	b.n	150d2 <HandleUserInput+0x222>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
   15070:	4b72      	ldr	r3, [pc, #456]	; (1523c <HandleUserInput+0x38c>)
   15072:	781b      	ldrb	r3, [r3, #0]
   15074:	2b00      	cmp	r3, #0
   15076:	d116      	bne.n	150a6 <HandleUserInput+0x1f6>
   15078:	4b74      	ldr	r3, [pc, #464]	; (1524c <HandleUserInput+0x39c>)
   1507a:	781b      	ldrb	r3, [r3, #0]
   1507c:	2b00      	cmp	r3, #0
   1507e:	d112      	bne.n	150a6 <HandleUserInput+0x1f6>
			check_time(&lButtonTime);
   15080:	4b74      	ldr	r3, [pc, #464]	; (15254 <HandleUserInput+0x3a4>)
   15082:	0018      	movs	r0, r3
   15084:	4b75      	ldr	r3, [pc, #468]	; (1525c <HandleUserInput+0x3ac>)
   15086:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
   15088:	4b71      	ldr	r3, [pc, #452]	; (15250 <HandleUserInput+0x3a0>)
   1508a:	4798      	blx	r3
   1508c:	0002      	movs	r2, r0
   1508e:	4b71      	ldr	r3, [pc, #452]	; (15254 <HandleUserInput+0x3a4>)
   15090:	681b      	ldr	r3, [r3, #0]
   15092:	1ad2      	subs	r2, r2, r3
   15094:	4b70      	ldr	r3, [pc, #448]	; (15258 <HandleUserInput+0x3a8>)
   15096:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
   15098:	4b71      	ldr	r3, [pc, #452]	; (15260 <HandleUserInput+0x3b0>)
   1509a:	2200      	movs	r2, #0
   1509c:	601a      	str	r2, [r3, #0]
			TurnSignalOn = false;
   1509e:	4b72      	ldr	r3, [pc, #456]	; (15268 <HandleUserInput+0x3b8>)
   150a0:	2200      	movs	r2, #0
   150a2:	701a      	strb	r2, [r3, #0]
   150a4:	e015      	b.n	150d2 <HandleUserInput+0x222>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
   150a6:	4b65      	ldr	r3, [pc, #404]	; (1523c <HandleUserInput+0x38c>)
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	2b01      	cmp	r3, #1
   150ac:	d000      	beq.n	150b0 <HandleUserInput+0x200>
   150ae:	e06c      	b.n	1518a <HandleUserInput+0x2da>
   150b0:	4b66      	ldr	r3, [pc, #408]	; (1524c <HandleUserInput+0x39c>)
   150b2:	781b      	ldrb	r3, [r3, #0]
   150b4:	2b01      	cmp	r3, #1
   150b6:	d168      	bne.n	1518a <HandleUserInput+0x2da>
			check_time(&lButtonTime);
   150b8:	4b66      	ldr	r3, [pc, #408]	; (15254 <HandleUserInput+0x3a4>)
   150ba:	0018      	movs	r0, r3
   150bc:	4b67      	ldr	r3, [pc, #412]	; (1525c <HandleUserInput+0x3ac>)
   150be:	4798      	blx	r3
			ButtonHeldTime = millis() - lButtonTime; // Track time button is not pressed
   150c0:	4b63      	ldr	r3, [pc, #396]	; (15250 <HandleUserInput+0x3a0>)
   150c2:	4798      	blx	r3
   150c4:	0002      	movs	r2, r0
   150c6:	4b63      	ldr	r3, [pc, #396]	; (15254 <HandleUserInput+0x3a4>)
   150c8:	681b      	ldr	r3, [r3, #0]
   150ca:	1ad2      	subs	r2, r2, r3
   150cc:	4b65      	ldr	r3, [pc, #404]	; (15264 <HandleUserInput+0x3b4>)
   150ce:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   150d0:	e05b      	b.n	1518a <HandleUserInput+0x2da>
   150d2:	e05a      	b.n	1518a <HandleUserInput+0x2da>
		}
	} else {
		ButtonHeldTime = 0;
   150d4:	4b63      	ldr	r3, [pc, #396]	; (15264 <HandleUserInput+0x3b4>)
   150d6:	2200      	movs	r2, #0
   150d8:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   150da:	4b58      	ldr	r3, [pc, #352]	; (1523c <HandleUserInput+0x38c>)
   150dc:	781b      	ldrb	r3, [r3, #0]
   150de:	2b01      	cmp	r3, #1
   150e0:	d10f      	bne.n	15102 <HandleUserInput+0x252>
   150e2:	4b5a      	ldr	r3, [pc, #360]	; (1524c <HandleUserInput+0x39c>)
   150e4:	781b      	ldrb	r3, [r3, #0]
   150e6:	2b00      	cmp	r3, #0
   150e8:	d10b      	bne.n	15102 <HandleUserInput+0x252>
			ButtonDownTime = 250;  // Track time button was pressed
   150ea:	4b5d      	ldr	r3, [pc, #372]	; (15260 <HandleUserInput+0x3b0>)
   150ec:	22fa      	movs	r2, #250	; 0xfa
   150ee:	601a      	str	r2, [r3, #0]
			lButtonTime = millis(); // Mark the time of button state transition
   150f0:	4b57      	ldr	r3, [pc, #348]	; (15250 <HandleUserInput+0x3a0>)
   150f2:	4798      	blx	r3
   150f4:	0002      	movs	r2, r0
   150f6:	4b57      	ldr	r3, [pc, #348]	; (15254 <HandleUserInput+0x3a4>)
   150f8:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
   150fa:	4b57      	ldr	r3, [pc, #348]	; (15258 <HandleUserInput+0x3a8>)
   150fc:	2200      	movs	r2, #0
   150fe:	601a      	str	r2, [r3, #0]
   15100:	e044      	b.n	1518c <HandleUserInput+0x2dc>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
   15102:	4b4e      	ldr	r3, [pc, #312]	; (1523c <HandleUserInput+0x38c>)
   15104:	781b      	ldrb	r3, [r3, #0]
   15106:	2b00      	cmp	r3, #0
   15108:	d10f      	bne.n	1512a <HandleUserInput+0x27a>
   1510a:	4b50      	ldr	r3, [pc, #320]	; (1524c <HandleUserInput+0x39c>)
   1510c:	781b      	ldrb	r3, [r3, #0]
   1510e:	2b01      	cmp	r3, #1
   15110:	d10b      	bne.n	1512a <HandleUserInput+0x27a>
			ButtonDownTime = 250;  // Track time button was pressed
   15112:	4b53      	ldr	r3, [pc, #332]	; (15260 <HandleUserInput+0x3b0>)
   15114:	22fa      	movs	r2, #250	; 0xfa
   15116:	601a      	str	r2, [r3, #0]
			lButtonTime = millis();  // Mark the time of button state transition
   15118:	4b4d      	ldr	r3, [pc, #308]	; (15250 <HandleUserInput+0x3a0>)
   1511a:	4798      	blx	r3
   1511c:	0002      	movs	r2, r0
   1511e:	4b4d      	ldr	r3, [pc, #308]	; (15254 <HandleUserInput+0x3a4>)
   15120:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
   15122:	4b4d      	ldr	r3, [pc, #308]	; (15258 <HandleUserInput+0x3a8>)
   15124:	2200      	movs	r2, #0
   15126:	601a      	str	r2, [r3, #0]
   15128:	e030      	b.n	1518c <HandleUserInput+0x2dc>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
   1512a:	4b44      	ldr	r3, [pc, #272]	; (1523c <HandleUserInput+0x38c>)
   1512c:	781b      	ldrb	r3, [r3, #0]
   1512e:	2b00      	cmp	r3, #0
   15130:	d113      	bne.n	1515a <HandleUserInput+0x2aa>
   15132:	4b46      	ldr	r3, [pc, #280]	; (1524c <HandleUserInput+0x39c>)
   15134:	781b      	ldrb	r3, [r3, #0]
   15136:	2b00      	cmp	r3, #0
   15138:	d10f      	bne.n	1515a <HandleUserInput+0x2aa>
			check_time(&lButtonTime);
   1513a:	4b46      	ldr	r3, [pc, #280]	; (15254 <HandleUserInput+0x3a4>)
   1513c:	0018      	movs	r0, r3
   1513e:	4b47      	ldr	r3, [pc, #284]	; (1525c <HandleUserInput+0x3ac>)
   15140:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
   15142:	4b43      	ldr	r3, [pc, #268]	; (15250 <HandleUserInput+0x3a0>)
   15144:	4798      	blx	r3
   15146:	0002      	movs	r2, r0
   15148:	4b42      	ldr	r3, [pc, #264]	; (15254 <HandleUserInput+0x3a4>)
   1514a:	681b      	ldr	r3, [r3, #0]
   1514c:	1ad2      	subs	r2, r2, r3
   1514e:	4b42      	ldr	r3, [pc, #264]	; (15258 <HandleUserInput+0x3a8>)
   15150:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
   15152:	4b43      	ldr	r3, [pc, #268]	; (15260 <HandleUserInput+0x3b0>)
   15154:	2200      	movs	r2, #0
   15156:	601a      	str	r2, [r3, #0]
   15158:	e018      	b.n	1518c <HandleUserInput+0x2dc>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
   1515a:	4b38      	ldr	r3, [pc, #224]	; (1523c <HandleUserInput+0x38c>)
   1515c:	781b      	ldrb	r3, [r3, #0]
   1515e:	2b01      	cmp	r3, #1
   15160:	d114      	bne.n	1518c <HandleUserInput+0x2dc>
   15162:	4b3a      	ldr	r3, [pc, #232]	; (1524c <HandleUserInput+0x39c>)
   15164:	781b      	ldrb	r3, [r3, #0]
   15166:	2b01      	cmp	r3, #1
   15168:	d110      	bne.n	1518c <HandleUserInput+0x2dc>
			check_time(&lButtonTime);
   1516a:	4b3a      	ldr	r3, [pc, #232]	; (15254 <HandleUserInput+0x3a4>)
   1516c:	0018      	movs	r0, r3
   1516e:	4b3b      	ldr	r3, [pc, #236]	; (1525c <HandleUserInput+0x3ac>)
   15170:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
   15172:	4b37      	ldr	r3, [pc, #220]	; (15250 <HandleUserInput+0x3a0>)
   15174:	4798      	blx	r3
   15176:	0002      	movs	r2, r0
   15178:	4b36      	ldr	r3, [pc, #216]	; (15254 <HandleUserInput+0x3a4>)
   1517a:	681b      	ldr	r3, [r3, #0]
   1517c:	1ad2      	subs	r2, r2, r3
   1517e:	4b36      	ldr	r3, [pc, #216]	; (15258 <HandleUserInput+0x3a8>)
   15180:	601a      	str	r2, [r3, #0]
			
			ButtonDownTime = 0;
   15182:	4b37      	ldr	r3, [pc, #220]	; (15260 <HandleUserInput+0x3b0>)
   15184:	2200      	movs	r2, #0
   15186:	601a      	str	r2, [r3, #0]
   15188:	e000      	b.n	1518c <HandleUserInput+0x2dc>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   1518a:	46c0      	nop			; (mov r8, r8)
		}
	}
	lremote_btn_state = remote_btn_state;
   1518c:	4b2b      	ldr	r3, [pc, #172]	; (1523c <HandleUserInput+0x38c>)
   1518e:	781a      	ldrb	r2, [r3, #0]
   15190:	4b2e      	ldr	r3, [pc, #184]	; (1524c <HandleUserInput+0x39c>)
   15192:	701a      	strb	r2, [r3, #0]

	////////   Determine the type of button press that occurred   ////////
	//////////////////////////////////////////////////////////////////////
	ButtonPressType = PRESS_NONE;
   15194:	4b35      	ldr	r3, [pc, #212]	; (1526c <HandleUserInput+0x3bc>)
   15196:	2200      	movs	r2, #0
   15198:	701a      	strb	r2, [r3, #0]
	if(ButtonDownTime > 0 && ButtonDownTime < BUTTON_TAP_TIME){ // Button Tap
   1519a:	4b31      	ldr	r3, [pc, #196]	; (15260 <HandleUserInput+0x3b0>)
   1519c:	681b      	ldr	r3, [r3, #0]
   1519e:	2b00      	cmp	r3, #0
   151a0:	d00b      	beq.n	151ba <HandleUserInput+0x30a>
   151a2:	4b2f      	ldr	r3, [pc, #188]	; (15260 <HandleUserInput+0x3b0>)
   151a4:	681b      	ldr	r3, [r3, #0]
   151a6:	4a32      	ldr	r2, [pc, #200]	; (15270 <HandleUserInput+0x3c0>)
   151a8:	4293      	cmp	r3, r2
   151aa:	d806      	bhi.n	151ba <HandleUserInput+0x30a>
		tapIndex++;
   151ac:	4b31      	ldr	r3, [pc, #196]	; (15274 <HandleUserInput+0x3c4>)
   151ae:	781b      	ldrb	r3, [r3, #0]
   151b0:	3301      	adds	r3, #1
   151b2:	b2da      	uxtb	r2, r3
   151b4:	4b2f      	ldr	r3, [pc, #188]	; (15274 <HandleUserInput+0x3c4>)
   151b6:	701a      	strb	r2, [r3, #0]
   151b8:	e071      	b.n	1529e <HandleUserInput+0x3ee>
	} else if(ButtonDownTime > BUTTON_TAP_TIME && ButtonDownTime < BUTTON_LONG_HOLD_TIME && !TurnSignalOn){ // Medium Press
   151ba:	4b29      	ldr	r3, [pc, #164]	; (15260 <HandleUserInput+0x3b0>)
   151bc:	681b      	ldr	r3, [r3, #0]
   151be:	4a2e      	ldr	r2, [pc, #184]	; (15278 <HandleUserInput+0x3c8>)
   151c0:	4293      	cmp	r3, r2
   151c2:	d95d      	bls.n	15280 <HandleUserInput+0x3d0>
   151c4:	4b26      	ldr	r3, [pc, #152]	; (15260 <HandleUserInput+0x3b0>)
   151c6:	681b      	ldr	r3, [r3, #0]
   151c8:	4a2c      	ldr	r2, [pc, #176]	; (1527c <HandleUserInput+0x3cc>)
   151ca:	4293      	cmp	r3, r2
   151cc:	d858      	bhi.n	15280 <HandleUserInput+0x3d0>
   151ce:	4b26      	ldr	r3, [pc, #152]	; (15268 <HandleUserInput+0x3b8>)
   151d0:	781b      	ldrb	r3, [r3, #0]
   151d2:	2201      	movs	r2, #1
   151d4:	4053      	eors	r3, r2
   151d6:	b2db      	uxtb	r3, r3
   151d8:	2b00      	cmp	r3, #0
   151da:	d051      	beq.n	15280 <HandleUserInput+0x3d0>
		ButtonPressType = MEDIUM_PRESS;
   151dc:	4b23      	ldr	r3, [pc, #140]	; (1526c <HandleUserInput+0x3bc>)
   151de:	2206      	movs	r2, #6
   151e0:	701a      	strb	r2, [r3, #0]
   151e2:	e05c      	b.n	1529e <HandleUserInput+0x3ee>
   151e4:	200003cc 	.word	0x200003cc
   151e8:	20000431 	.word	0x20000431
   151ec:	20000e38 	.word	0x20000e38
   151f0:	0001a2d9 	.word	0x0001a2d9
   151f4:	0001bf15 	.word	0x0001bf15
   151f8:	0001a405 	.word	0x0001a405
   151fc:	41222870 	.word	0x41222870
   15200:	0001b28d 	.word	0x0001b28d
   15204:	ca397ea4 	.word	0xca397ea4
   15208:	3f265b54 	.word	0x3f265b54
   1520c:	0001bfb9 	.word	0x0001bfb9
   15210:	0001950d 	.word	0x0001950d
   15214:	00019535 	.word	0x00019535
   15218:	437f0000 	.word	0x437f0000
   1521c:	000195b1 	.word	0x000195b1
   15220:	200003ce 	.word	0x200003ce
   15224:	20000432 	.word	0x20000432
   15228:	20001b24 	.word	0x20001b24
   1522c:	200003cf 	.word	0x200003cf
   15230:	200003cd 	.word	0x200003cd
   15234:	0001c9e4 	.word	0x0001c9e4
   15238:	000097d1 	.word	0x000097d1
   1523c:	200003d0 	.word	0x200003d0
   15240:	00014e9d 	.word	0x00014e9d
   15244:	00002328 	.word	0x00002328
   15248:	20000110 	.word	0x20000110
   1524c:	200003d1 	.word	0x200003d1
   15250:	00009f65 	.word	0x00009f65
   15254:	200003fc 	.word	0x200003fc
   15258:	200003f8 	.word	0x200003f8
   1525c:	00009f95 	.word	0x00009f95
   15260:	200003f4 	.word	0x200003f4
   15264:	200003f0 	.word	0x200003f0
   15268:	200003ac 	.word	0x200003ac
   1526c:	200003ed 	.word	0x200003ed
   15270:	000002ed 	.word	0x000002ed
   15274:	200003ef 	.word	0x200003ef
   15278:	000002ee 	.word	0x000002ee
   1527c:	000005db 	.word	0x000005db
	} else if(ButtonDownTime >= BUTTON_LONG_HOLD_TIME && !TurnSignalOn){ // Long Press
   15280:	4bb9      	ldr	r3, [pc, #740]	; (15568 <HandleUserInput+0x6b8>)
   15282:	681b      	ldr	r3, [r3, #0]
   15284:	4ab9      	ldr	r2, [pc, #740]	; (1556c <HandleUserInput+0x6bc>)
   15286:	4293      	cmp	r3, r2
   15288:	d909      	bls.n	1529e <HandleUserInput+0x3ee>
   1528a:	4bb9      	ldr	r3, [pc, #740]	; (15570 <HandleUserInput+0x6c0>)
   1528c:	781b      	ldrb	r3, [r3, #0]
   1528e:	2201      	movs	r2, #1
   15290:	4053      	eors	r3, r2
   15292:	b2db      	uxtb	r3, r3
   15294:	2b00      	cmp	r3, #0
   15296:	d002      	beq.n	1529e <HandleUserInput+0x3ee>
		ButtonPressType = LONG_PRESS;
   15298:	4bb6      	ldr	r3, [pc, #728]	; (15574 <HandleUserInput+0x6c4>)
   1529a:	2207      	movs	r2, #7
   1529c:	701a      	strb	r2, [r3, #0]
	}
	if(tapIndex > 0 && ButtonUpTime > 200){
   1529e:	4bb6      	ldr	r3, [pc, #728]	; (15578 <HandleUserInput+0x6c8>)
   152a0:	781b      	ldrb	r3, [r3, #0]
   152a2:	2b00      	cmp	r3, #0
   152a4:	d006      	beq.n	152b4 <HandleUserInput+0x404>
   152a6:	4bb5      	ldr	r3, [pc, #724]	; (1557c <HandleUserInput+0x6cc>)
   152a8:	681b      	ldr	r3, [r3, #0]
   152aa:	2bc8      	cmp	r3, #200	; 0xc8
   152ac:	d902      	bls.n	152b4 <HandleUserInput+0x404>
		tapSequence = 1;
   152ae:	4bb4      	ldr	r3, [pc, #720]	; (15580 <HandleUserInput+0x6d0>)
   152b0:	2201      	movs	r2, #1
   152b2:	701a      	strb	r2, [r3, #0]
	}
	if(tapSequence){
   152b4:	4bb2      	ldr	r3, [pc, #712]	; (15580 <HandleUserInput+0x6d0>)
   152b6:	781b      	ldrb	r3, [r3, #0]
   152b8:	2b00      	cmp	r3, #0
   152ba:	d01c      	beq.n	152f6 <HandleUserInput+0x446>
		/*if(remote_type == REMOTE_UART_DUAL && VescRemoteX <= 110 && tapIndex == 1)
			ButtonPressType = LEFT_TAP;
		else if(remote_type == REMOTE_UART_DUAL && VescRemoteX >= 150 && tapIndex == 1)
		ButtonPressType = RIGHT_TAP;
		else*/ if(tapIndex == 1){
   152bc:	4bae      	ldr	r3, [pc, #696]	; (15578 <HandleUserInput+0x6c8>)
   152be:	781b      	ldrb	r3, [r3, #0]
   152c0:	2b01      	cmp	r3, #1
   152c2:	d103      	bne.n	152cc <HandleUserInput+0x41c>
			ButtonPressType = SINGLE_TAP;
   152c4:	4bab      	ldr	r3, [pc, #684]	; (15574 <HandleUserInput+0x6c4>)
   152c6:	2201      	movs	r2, #1
   152c8:	701a      	strb	r2, [r3, #0]
   152ca:	e00e      	b.n	152ea <HandleUserInput+0x43a>
		}
		else if(tapIndex == 2)
   152cc:	4baa      	ldr	r3, [pc, #680]	; (15578 <HandleUserInput+0x6c8>)
   152ce:	781b      	ldrb	r3, [r3, #0]
   152d0:	2b02      	cmp	r3, #2
   152d2:	d103      	bne.n	152dc <HandleUserInput+0x42c>
			ButtonPressType = DOUBLE_TAP;
   152d4:	4ba7      	ldr	r3, [pc, #668]	; (15574 <HandleUserInput+0x6c4>)
   152d6:	2202      	movs	r2, #2
   152d8:	701a      	strb	r2, [r3, #0]
   152da:	e006      	b.n	152ea <HandleUserInput+0x43a>
		else if(tapIndex == 3)
   152dc:	4ba6      	ldr	r3, [pc, #664]	; (15578 <HandleUserInput+0x6c8>)
   152de:	781b      	ldrb	r3, [r3, #0]
   152e0:	2b03      	cmp	r3, #3
   152e2:	d102      	bne.n	152ea <HandleUserInput+0x43a>
			ButtonPressType = TRIPLE_TAP;
   152e4:	4ba3      	ldr	r3, [pc, #652]	; (15574 <HandleUserInput+0x6c4>)
   152e6:	2203      	movs	r2, #3
   152e8:	701a      	strb	r2, [r3, #0]
		
		tapSequence = 0;
   152ea:	4ba5      	ldr	r3, [pc, #660]	; (15580 <HandleUserInput+0x6d0>)
   152ec:	2200      	movs	r2, #0
   152ee:	701a      	strb	r2, [r3, #0]
		tapIndex = 0;
   152f0:	4ba1      	ldr	r3, [pc, #644]	; (15578 <HandleUserInput+0x6c8>)
   152f2:	2200      	movs	r2, #0
   152f4:	701a      	strb	r2, [r3, #0]
	}
	
	//////////////////////   Handle the aux output   /////////////////////
	//////////////////////////////////////////////////////////////////////
	if(AUX_ENABLED){
   152f6:	4ba3      	ldr	r3, [pc, #652]	; (15584 <HandleUserInput+0x6d4>)
   152f8:	781b      	ldrb	r3, [r3, #0]
   152fa:	2b00      	cmp	r3, #0
   152fc:	d100      	bne.n	15300 <HandleUserInput+0x450>
   152fe:	e085      	b.n	1540c <HandleUserInput+0x55c>
		if(AppAuxButton && !lAppAuxButton) {
   15300:	4ba1      	ldr	r3, [pc, #644]	; (15588 <HandleUserInput+0x6d8>)
   15302:	781b      	ldrb	r3, [r3, #0]
   15304:	2b00      	cmp	r3, #0
   15306:	d007      	beq.n	15318 <HandleUserInput+0x468>
   15308:	4ba0      	ldr	r3, [pc, #640]	; (1558c <HandleUserInput+0x6dc>)
   1530a:	781b      	ldrb	r3, [r3, #0]
   1530c:	2b00      	cmp	r3, #0
   1530e:	d103      	bne.n	15318 <HandleUserInput+0x468>
			 AUX_OUTPUT = true;
   15310:	4b9f      	ldr	r3, [pc, #636]	; (15590 <HandleUserInput+0x6e0>)
   15312:	2201      	movs	r2, #1
   15314:	701a      	strb	r2, [r3, #0]
   15316:	e06f      	b.n	153f8 <HandleUserInput+0x548>
		} else if(!AppAuxButton && lAppAuxButton){
   15318:	4b9b      	ldr	r3, [pc, #620]	; (15588 <HandleUserInput+0x6d8>)
   1531a:	781b      	ldrb	r3, [r3, #0]
   1531c:	2b00      	cmp	r3, #0
   1531e:	d107      	bne.n	15330 <HandleUserInput+0x480>
   15320:	4b9a      	ldr	r3, [pc, #616]	; (1558c <HandleUserInput+0x6dc>)
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	2b00      	cmp	r3, #0
   15326:	d003      	beq.n	15330 <HandleUserInput+0x480>
			 AUX_OUTPUT = false;
   15328:	4b99      	ldr	r3, [pc, #612]	; (15590 <HandleUserInput+0x6e0>)
   1532a:	2200      	movs	r2, #0
   1532c:	701a      	strb	r2, [r3, #0]
   1532e:	e063      	b.n	153f8 <HandleUserInput+0x548>
		} else {
			switch(auxControlType){
   15330:	4b98      	ldr	r3, [pc, #608]	; (15594 <HandleUserInput+0x6e4>)
   15332:	781b      	ldrb	r3, [r3, #0]
   15334:	2b01      	cmp	r3, #1
   15336:	d018      	beq.n	1536a <HandleUserInput+0x4ba>
   15338:	dc02      	bgt.n	15340 <HandleUserInput+0x490>
   1533a:	2b00      	cmp	r3, #0
   1533c:	d003      	beq.n	15346 <HandleUserInput+0x496>
   1533e:	e05b      	b.n	153f8 <HandleUserInput+0x548>
   15340:	2b02      	cmp	r3, #2
   15342:	d02b      	beq.n	1539c <HandleUserInput+0x4ec>

				if(AUX_OUTPUT == true && check_timer_expired(&AuxOnTime, (auxTimedDuration * 100)) && !lAppAuxButton)
					AUX_OUTPUT = false;
				break;
				case AUX_PATTERN:
				break;
   15344:	e058      	b.n	153f8 <HandleUserInput+0x548>
				if(ButtonHeldTime > 500 && single_aux_control != PRESS_NONE){
   15346:	4b94      	ldr	r3, [pc, #592]	; (15598 <HandleUserInput+0x6e8>)
   15348:	681a      	ldr	r2, [r3, #0]
   1534a:	23fa      	movs	r3, #250	; 0xfa
   1534c:	005b      	lsls	r3, r3, #1
   1534e:	429a      	cmp	r2, r3
   15350:	d907      	bls.n	15362 <HandleUserInput+0x4b2>
   15352:	4b92      	ldr	r3, [pc, #584]	; (1559c <HandleUserInput+0x6ec>)
   15354:	781b      	ldrb	r3, [r3, #0]
   15356:	2b00      	cmp	r3, #0
   15358:	d003      	beq.n	15362 <HandleUserInput+0x4b2>
					AUX_OUTPUT = true;
   1535a:	4b8d      	ldr	r3, [pc, #564]	; (15590 <HandleUserInput+0x6e0>)
   1535c:	2201      	movs	r2, #1
   1535e:	701a      	strb	r2, [r3, #0]
				break;
   15360:	e04a      	b.n	153f8 <HandleUserInput+0x548>
					AUX_OUTPUT = false;
   15362:	4b8b      	ldr	r3, [pc, #556]	; (15590 <HandleUserInput+0x6e0>)
   15364:	2200      	movs	r2, #0
   15366:	701a      	strb	r2, [r3, #0]
				break;
   15368:	e046      	b.n	153f8 <HandleUserInput+0x548>
				if(single_aux_control == ButtonPressType && single_aux_control != PRESS_NONE){
   1536a:	4b8c      	ldr	r3, [pc, #560]	; (1559c <HandleUserInput+0x6ec>)
   1536c:	781a      	ldrb	r2, [r3, #0]
   1536e:	4b81      	ldr	r3, [pc, #516]	; (15574 <HandleUserInput+0x6c4>)
   15370:	781b      	ldrb	r3, [r3, #0]
   15372:	429a      	cmp	r2, r3
   15374:	d13d      	bne.n	153f2 <HandleUserInput+0x542>
   15376:	4b89      	ldr	r3, [pc, #548]	; (1559c <HandleUserInput+0x6ec>)
   15378:	781b      	ldrb	r3, [r3, #0]
   1537a:	2b00      	cmp	r3, #0
   1537c:	d039      	beq.n	153f2 <HandleUserInput+0x542>
					AUX_OUTPUT = !AUX_OUTPUT;
   1537e:	4b84      	ldr	r3, [pc, #528]	; (15590 <HandleUserInput+0x6e0>)
   15380:	781b      	ldrb	r3, [r3, #0]
   15382:	1e5a      	subs	r2, r3, #1
   15384:	4193      	sbcs	r3, r2
   15386:	b2db      	uxtb	r3, r3
   15388:	2201      	movs	r2, #1
   1538a:	4053      	eors	r3, r2
   1538c:	b2db      	uxtb	r3, r3
   1538e:	1c1a      	adds	r2, r3, #0
   15390:	2301      	movs	r3, #1
   15392:	4013      	ands	r3, r2
   15394:	b2da      	uxtb	r2, r3
   15396:	4b7e      	ldr	r3, [pc, #504]	; (15590 <HandleUserInput+0x6e0>)
   15398:	701a      	strb	r2, [r3, #0]
				break;
   1539a:	e02a      	b.n	153f2 <HandleUserInput+0x542>
				if((single_aux_control == ButtonPressType && single_aux_control != PRESS_NONE)){
   1539c:	4b7f      	ldr	r3, [pc, #508]	; (1559c <HandleUserInput+0x6ec>)
   1539e:	781a      	ldrb	r2, [r3, #0]
   153a0:	4b74      	ldr	r3, [pc, #464]	; (15574 <HandleUserInput+0x6c4>)
   153a2:	781b      	ldrb	r3, [r3, #0]
   153a4:	429a      	cmp	r2, r3
   153a6:	d10b      	bne.n	153c0 <HandleUserInput+0x510>
   153a8:	4b7c      	ldr	r3, [pc, #496]	; (1559c <HandleUserInput+0x6ec>)
   153aa:	781b      	ldrb	r3, [r3, #0]
   153ac:	2b00      	cmp	r3, #0
   153ae:	d007      	beq.n	153c0 <HandleUserInput+0x510>
					AUX_OUTPUT = true;
   153b0:	4b77      	ldr	r3, [pc, #476]	; (15590 <HandleUserInput+0x6e0>)
   153b2:	2201      	movs	r2, #1
   153b4:	701a      	strb	r2, [r3, #0]
					AuxOnTime = millis();
   153b6:	4b7a      	ldr	r3, [pc, #488]	; (155a0 <HandleUserInput+0x6f0>)
   153b8:	4798      	blx	r3
   153ba:	0002      	movs	r2, r0
   153bc:	4b79      	ldr	r3, [pc, #484]	; (155a4 <HandleUserInput+0x6f4>)
   153be:	601a      	str	r2, [r3, #0]
				if(AUX_OUTPUT == true && check_timer_expired(&AuxOnTime, (auxTimedDuration * 100)) && !lAppAuxButton)
   153c0:	4b73      	ldr	r3, [pc, #460]	; (15590 <HandleUserInput+0x6e0>)
   153c2:	781b      	ldrb	r3, [r3, #0]
   153c4:	2b00      	cmp	r3, #0
   153c6:	d016      	beq.n	153f6 <HandleUserInput+0x546>
   153c8:	4b77      	ldr	r3, [pc, #476]	; (155a8 <HandleUserInput+0x6f8>)
   153ca:	781b      	ldrb	r3, [r3, #0]
   153cc:	001a      	movs	r2, r3
   153ce:	2364      	movs	r3, #100	; 0x64
   153d0:	4353      	muls	r3, r2
   153d2:	001a      	movs	r2, r3
   153d4:	4b73      	ldr	r3, [pc, #460]	; (155a4 <HandleUserInput+0x6f4>)
   153d6:	0011      	movs	r1, r2
   153d8:	0018      	movs	r0, r3
   153da:	4b74      	ldr	r3, [pc, #464]	; (155ac <HandleUserInput+0x6fc>)
   153dc:	4798      	blx	r3
   153de:	1e03      	subs	r3, r0, #0
   153e0:	d009      	beq.n	153f6 <HandleUserInput+0x546>
   153e2:	4b6a      	ldr	r3, [pc, #424]	; (1558c <HandleUserInput+0x6dc>)
   153e4:	781b      	ldrb	r3, [r3, #0]
   153e6:	2b00      	cmp	r3, #0
   153e8:	d105      	bne.n	153f6 <HandleUserInput+0x546>
					AUX_OUTPUT = false;
   153ea:	4b69      	ldr	r3, [pc, #420]	; (15590 <HandleUserInput+0x6e0>)
   153ec:	2200      	movs	r2, #0
   153ee:	701a      	strb	r2, [r3, #0]
				break;
   153f0:	e001      	b.n	153f6 <HandleUserInput+0x546>
				break;
   153f2:	46c0      	nop			; (mov r8, r8)
   153f4:	e000      	b.n	153f8 <HandleUserInput+0x548>
				break;
   153f6:	46c0      	nop			; (mov r8, r8)
			}
		}
		lAppAuxButton = AppAuxButton;
   153f8:	4b63      	ldr	r3, [pc, #396]	; (15588 <HandleUserInput+0x6d8>)
   153fa:	781a      	ldrb	r2, [r3, #0]
   153fc:	4b63      	ldr	r3, [pc, #396]	; (1558c <HandleUserInput+0x6dc>)
   153fe:	701a      	strb	r2, [r3, #0]

		setAux(AUX_OUTPUT);
   15400:	4b63      	ldr	r3, [pc, #396]	; (15590 <HandleUserInput+0x6e0>)
   15402:	781b      	ldrb	r3, [r3, #0]
   15404:	0018      	movs	r0, r3
   15406:	4b6a      	ldr	r3, [pc, #424]	; (155b0 <HandleUserInput+0x700>)
   15408:	4798      	blx	r3
   1540a:	e002      	b.n	15412 <HandleUserInput+0x562>
	}
	else{
		setAux(false);
   1540c:	2000      	movs	r0, #0
   1540e:	4b68      	ldr	r3, [pc, #416]	; (155b0 <HandleUserInput+0x700>)
   15410:	4798      	blx	r3
	}

	/////////////   Handle the side, head, and tail lights   /////////////
	//////////////////////////////////////////////////////////////////////
	if(ButtonPressType != PRESS_NONE){
   15412:	4b58      	ldr	r3, [pc, #352]	; (15574 <HandleUserInput+0x6c4>)
   15414:	781b      	ldrb	r3, [r3, #0]
   15416:	2b00      	cmp	r3, #0
   15418:	d100      	bne.n	1541c <HandleUserInput+0x56c>
   1541a:	e0a0      	b.n	1555e <HandleUserInput+0x6ae>
		//if(remote_type != REMOTE_UART_DUAL){ // If single axis remote is connected
			if(single_brights_control == ButtonPressType){
   1541c:	4b65      	ldr	r3, [pc, #404]	; (155b4 <HandleUserInput+0x704>)
   1541e:	781a      	ldrb	r2, [r3, #0]
   15420:	4b54      	ldr	r3, [pc, #336]	; (15574 <HandleUserInput+0x6c4>)
   15422:	781b      	ldrb	r3, [r3, #0]
   15424:	429a      	cmp	r2, r3
   15426:	d108      	bne.n	1543a <HandleUserInput+0x58a>
				BRIGHTS = !BRIGHTS;
   15428:	4b63      	ldr	r3, [pc, #396]	; (155b8 <HandleUserInput+0x708>)
   1542a:	781b      	ldrb	r3, [r3, #0]
   1542c:	425a      	negs	r2, r3
   1542e:	4153      	adcs	r3, r2
   15430:	b2db      	uxtb	r3, r3
   15432:	001a      	movs	r2, r3
   15434:	4b60      	ldr	r3, [pc, #384]	; (155b8 <HandleUserInput+0x708>)
   15436:	701a      	strb	r2, [r3, #0]
				SIDELIGHTS = true;
				RestoreTurnLights = false;
			}
		}*/
	}
}
   15438:	e091      	b.n	1555e <HandleUserInput+0x6ae>
			else if(single_all_control == ButtonPressType){
   1543a:	4b60      	ldr	r3, [pc, #384]	; (155bc <HandleUserInput+0x70c>)
   1543c:	781a      	ldrb	r2, [r3, #0]
   1543e:	4b4d      	ldr	r3, [pc, #308]	; (15574 <HandleUserInput+0x6c4>)
   15440:	781b      	ldrb	r3, [r3, #0]
   15442:	429a      	cmp	r2, r3
   15444:	d108      	bne.n	15458 <HandleUserInput+0x5a8>
				LIGHTS_ON = !LIGHTS_ON;
   15446:	4b5e      	ldr	r3, [pc, #376]	; (155c0 <HandleUserInput+0x710>)
   15448:	781b      	ldrb	r3, [r3, #0]
   1544a:	425a      	negs	r2, r3
   1544c:	4153      	adcs	r3, r2
   1544e:	b2db      	uxtb	r3, r3
   15450:	001a      	movs	r2, r3
   15452:	4b5b      	ldr	r3, [pc, #364]	; (155c0 <HandleUserInput+0x710>)
   15454:	701a      	strb	r2, [r3, #0]
}
   15456:	e082      	b.n	1555e <HandleUserInput+0x6ae>
			else if(single_head_control == ButtonPressType){
   15458:	4b5a      	ldr	r3, [pc, #360]	; (155c4 <HandleUserInput+0x714>)
   1545a:	781a      	ldrb	r2, [r3, #0]
   1545c:	4b45      	ldr	r3, [pc, #276]	; (15574 <HandleUserInput+0x6c4>)
   1545e:	781b      	ldrb	r3, [r3, #0]
   15460:	429a      	cmp	r2, r3
   15462:	d123      	bne.n	154ac <HandleUserInput+0x5fc>
				if(!LIGHTS_ON){
   15464:	4b56      	ldr	r3, [pc, #344]	; (155c0 <HandleUserInput+0x710>)
   15466:	781b      	ldrb	r3, [r3, #0]
   15468:	2b00      	cmp	r3, #0
   1546a:	d109      	bne.n	15480 <HandleUserInput+0x5d0>
					HEADLIGHTS = true;
   1546c:	4b56      	ldr	r3, [pc, #344]	; (155c8 <HandleUserInput+0x718>)
   1546e:	2201      	movs	r2, #1
   15470:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
   15472:	4b56      	ldr	r3, [pc, #344]	; (155cc <HandleUserInput+0x71c>)
   15474:	2200      	movs	r2, #0
   15476:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
   15478:	4b51      	ldr	r3, [pc, #324]	; (155c0 <HandleUserInput+0x710>)
   1547a:	2201      	movs	r2, #1
   1547c:	701a      	strb	r2, [r3, #0]
}
   1547e:	e06e      	b.n	1555e <HandleUserInput+0x6ae>
				else if(SIDELIGHTS)
   15480:	4b52      	ldr	r3, [pc, #328]	; (155cc <HandleUserInput+0x71c>)
   15482:	781b      	ldrb	r3, [r3, #0]
   15484:	2b00      	cmp	r3, #0
   15486:	d008      	beq.n	1549a <HandleUserInput+0x5ea>
				HEADLIGHTS = !HEADLIGHTS;
   15488:	4b4f      	ldr	r3, [pc, #316]	; (155c8 <HandleUserInput+0x718>)
   1548a:	781b      	ldrb	r3, [r3, #0]
   1548c:	425a      	negs	r2, r3
   1548e:	4153      	adcs	r3, r2
   15490:	b2db      	uxtb	r3, r3
   15492:	001a      	movs	r2, r3
   15494:	4b4c      	ldr	r3, [pc, #304]	; (155c8 <HandleUserInput+0x718>)
   15496:	701a      	strb	r2, [r3, #0]
}
   15498:	e061      	b.n	1555e <HandleUserInput+0x6ae>
				LIGHTS_ON = !LIGHTS_ON;
   1549a:	4b49      	ldr	r3, [pc, #292]	; (155c0 <HandleUserInput+0x710>)
   1549c:	781b      	ldrb	r3, [r3, #0]
   1549e:	425a      	negs	r2, r3
   154a0:	4153      	adcs	r3, r2
   154a2:	b2db      	uxtb	r3, r3
   154a4:	001a      	movs	r2, r3
   154a6:	4b46      	ldr	r3, [pc, #280]	; (155c0 <HandleUserInput+0x710>)
   154a8:	701a      	strb	r2, [r3, #0]
}
   154aa:	e058      	b.n	1555e <HandleUserInput+0x6ae>
			else if(single_side_control == ButtonPressType){
   154ac:	4b48      	ldr	r3, [pc, #288]	; (155d0 <HandleUserInput+0x720>)
   154ae:	781a      	ldrb	r2, [r3, #0]
   154b0:	4b30      	ldr	r3, [pc, #192]	; (15574 <HandleUserInput+0x6c4>)
   154b2:	781b      	ldrb	r3, [r3, #0]
   154b4:	429a      	cmp	r2, r3
   154b6:	d123      	bne.n	15500 <HandleUserInput+0x650>
				if(!LIGHTS_ON){
   154b8:	4b41      	ldr	r3, [pc, #260]	; (155c0 <HandleUserInput+0x710>)
   154ba:	781b      	ldrb	r3, [r3, #0]
   154bc:	2b00      	cmp	r3, #0
   154be:	d109      	bne.n	154d4 <HandleUserInput+0x624>
					HEADLIGHTS = false;
   154c0:	4b41      	ldr	r3, [pc, #260]	; (155c8 <HandleUserInput+0x718>)
   154c2:	2200      	movs	r2, #0
   154c4:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
   154c6:	4b41      	ldr	r3, [pc, #260]	; (155cc <HandleUserInput+0x71c>)
   154c8:	2201      	movs	r2, #1
   154ca:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
   154cc:	4b3c      	ldr	r3, [pc, #240]	; (155c0 <HandleUserInput+0x710>)
   154ce:	2201      	movs	r2, #1
   154d0:	701a      	strb	r2, [r3, #0]
}
   154d2:	e044      	b.n	1555e <HandleUserInput+0x6ae>
				else if(HEADLIGHTS)
   154d4:	4b3c      	ldr	r3, [pc, #240]	; (155c8 <HandleUserInput+0x718>)
   154d6:	781b      	ldrb	r3, [r3, #0]
   154d8:	2b00      	cmp	r3, #0
   154da:	d008      	beq.n	154ee <HandleUserInput+0x63e>
				SIDELIGHTS = !SIDELIGHTS;
   154dc:	4b3b      	ldr	r3, [pc, #236]	; (155cc <HandleUserInput+0x71c>)
   154de:	781b      	ldrb	r3, [r3, #0]
   154e0:	425a      	negs	r2, r3
   154e2:	4153      	adcs	r3, r2
   154e4:	b2db      	uxtb	r3, r3
   154e6:	001a      	movs	r2, r3
   154e8:	4b38      	ldr	r3, [pc, #224]	; (155cc <HandleUserInput+0x71c>)
   154ea:	701a      	strb	r2, [r3, #0]
}
   154ec:	e037      	b.n	1555e <HandleUserInput+0x6ae>
				LIGHTS_ON = !LIGHTS_ON;
   154ee:	4b34      	ldr	r3, [pc, #208]	; (155c0 <HandleUserInput+0x710>)
   154f0:	781b      	ldrb	r3, [r3, #0]
   154f2:	425a      	negs	r2, r3
   154f4:	4153      	adcs	r3, r2
   154f6:	b2db      	uxtb	r3, r3
   154f8:	001a      	movs	r2, r3
   154fa:	4b31      	ldr	r3, [pc, #196]	; (155c0 <HandleUserInput+0x710>)
   154fc:	701a      	strb	r2, [r3, #0]
}
   154fe:	e02e      	b.n	1555e <HandleUserInput+0x6ae>
			else if(single_down_control == ButtonPressType){
   15500:	4b34      	ldr	r3, [pc, #208]	; (155d4 <HandleUserInput+0x724>)
   15502:	781a      	ldrb	r2, [r3, #0]
   15504:	4b1b      	ldr	r3, [pc, #108]	; (15574 <HandleUserInput+0x6c4>)
   15506:	781b      	ldrb	r3, [r3, #0]
   15508:	429a      	cmp	r2, r3
   1550a:	d112      	bne.n	15532 <HandleUserInput+0x682>
				if(light_mode == 0)
   1550c:	4b32      	ldr	r3, [pc, #200]	; (155d8 <HandleUserInput+0x728>)
   1550e:	781b      	ldrb	r3, [r3, #0]
   15510:	2b00      	cmp	r3, #0
   15512:	d105      	bne.n	15520 <HandleUserInput+0x670>
					light_mode = light_modes - 1;
   15514:	2309      	movs	r3, #9
   15516:	3b01      	subs	r3, #1
   15518:	b2da      	uxtb	r2, r3
   1551a:	4b2f      	ldr	r3, [pc, #188]	; (155d8 <HandleUserInput+0x728>)
   1551c:	701a      	strb	r2, [r3, #0]
   1551e:	e005      	b.n	1552c <HandleUserInput+0x67c>
					light_mode--;
   15520:	4b2d      	ldr	r3, [pc, #180]	; (155d8 <HandleUserInput+0x728>)
   15522:	781b      	ldrb	r3, [r3, #0]
   15524:	3b01      	subs	r3, #1
   15526:	b2da      	uxtb	r2, r3
   15528:	4b2b      	ldr	r3, [pc, #172]	; (155d8 <HandleUserInput+0x728>)
   1552a:	701a      	strb	r2, [r3, #0]
				save_led_data();
   1552c:	4b2b      	ldr	r3, [pc, #172]	; (155dc <HandleUserInput+0x72c>)
   1552e:	4798      	blx	r3
}
   15530:	e015      	b.n	1555e <HandleUserInput+0x6ae>
			else if(single_up_control == ButtonPressType){
   15532:	4b2b      	ldr	r3, [pc, #172]	; (155e0 <HandleUserInput+0x730>)
   15534:	781a      	ldrb	r2, [r3, #0]
   15536:	4b0f      	ldr	r3, [pc, #60]	; (15574 <HandleUserInput+0x6c4>)
   15538:	781b      	ldrb	r3, [r3, #0]
   1553a:	429a      	cmp	r2, r3
   1553c:	d10f      	bne.n	1555e <HandleUserInput+0x6ae>
				light_mode++;
   1553e:	4b26      	ldr	r3, [pc, #152]	; (155d8 <HandleUserInput+0x728>)
   15540:	781b      	ldrb	r3, [r3, #0]
   15542:	3301      	adds	r3, #1
   15544:	b2da      	uxtb	r2, r3
   15546:	4b24      	ldr	r3, [pc, #144]	; (155d8 <HandleUserInput+0x728>)
   15548:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
   1554a:	4b23      	ldr	r3, [pc, #140]	; (155d8 <HandleUserInput+0x728>)
   1554c:	781b      	ldrb	r3, [r3, #0]
   1554e:	2209      	movs	r2, #9
   15550:	4293      	cmp	r3, r2
   15552:	d302      	bcc.n	1555a <HandleUserInput+0x6aa>
					light_mode = 0;
   15554:	4b20      	ldr	r3, [pc, #128]	; (155d8 <HandleUserInput+0x728>)
   15556:	2200      	movs	r2, #0
   15558:	701a      	strb	r2, [r3, #0]
				save_led_data();
   1555a:	4b20      	ldr	r3, [pc, #128]	; (155dc <HandleUserInput+0x72c>)
   1555c:	4798      	blx	r3
}
   1555e:	46c0      	nop			; (mov r8, r8)
   15560:	46bd      	mov	sp, r7
   15562:	b003      	add	sp, #12
   15564:	bd90      	pop	{r4, r7, pc}
   15566:	46c0      	nop			; (mov r8, r8)
   15568:	200003f4 	.word	0x200003f4
   1556c:	000005db 	.word	0x000005db
   15570:	200003ac 	.word	0x200003ac
   15574:	200003ed 	.word	0x200003ed
   15578:	200003ef 	.word	0x200003ef
   1557c:	200003f8 	.word	0x200003f8
   15580:	200003ee 	.word	0x200003ee
   15584:	200003de 	.word	0x200003de
   15588:	200003eb 	.word	0x200003eb
   1558c:	200003ec 	.word	0x200003ec
   15590:	200003e0 	.word	0x200003e0
   15594:	200003e2 	.word	0x200003e2
   15598:	200003f0 	.word	0x200003f0
   1559c:	200003e4 	.word	0x200003e4
   155a0:	00009f65 	.word	0x00009f65
   155a4:	20000400 	.word	0x20000400
   155a8:	200003e3 	.word	0x200003e3
   155ac:	00009fbd 	.word	0x00009fbd
   155b0:	0000a599 	.word	0x0000a599
   155b4:	200003ea 	.word	0x200003ea
   155b8:	200003b1 	.word	0x200003b1
   155bc:	200003e5 	.word	0x200003e5
   155c0:	200000d6 	.word	0x200000d6
   155c4:	200003e6 	.word	0x200003e6
   155c8:	200003ad 	.word	0x200003ad
   155cc:	200000d5 	.word	0x200000d5
   155d0:	200003e7 	.word	0x200003e7
   155d4:	200003e9 	.word	0x200003e9
   155d8:	2000003c 	.word	0x2000003c
   155dc:	000138d1 	.word	0x000138d1
   155e0:	200003e8 	.word	0x200003e8

000155e4 <HandleAppRemote>:

void HandleAppRemote(){
   155e4:	b580      	push	{r7, lr}
   155e6:	b082      	sub	sp, #8
   155e8:	af00      	add	r7, sp, #0
	send_chuck_struct.js_x = 0xFF/2;
   155ea:	4b38      	ldr	r3, [pc, #224]	; (156cc <HandleAppRemote+0xe8>)
   155ec:	227f      	movs	r2, #127	; 0x7f
   155ee:	701a      	strb	r2, [r3, #0]
	send_chuck_struct.bt_z = false;
   155f0:	4b36      	ldr	r3, [pc, #216]	; (156cc <HandleAppRemote+0xe8>)
   155f2:	2200      	movs	r2, #0
   155f4:	725a      	strb	r2, [r3, #9]
	send_chuck_struct.bt_c = false;
   155f6:	4b35      	ldr	r3, [pc, #212]	; (156cc <HandleAppRemote+0xe8>)
   155f8:	2200      	movs	r2, #0
   155fa:	721a      	strb	r2, [r3, #8]
	send_chuck_struct.acc_x = 0;
   155fc:	4b33      	ldr	r3, [pc, #204]	; (156cc <HandleAppRemote+0xe8>)
   155fe:	2200      	movs	r2, #0
   15600:	805a      	strh	r2, [r3, #2]
	send_chuck_struct.acc_y = 0;
   15602:	4b32      	ldr	r3, [pc, #200]	; (156cc <HandleAppRemote+0xe8>)
   15604:	2200      	movs	r2, #0
   15606:	809a      	strh	r2, [r3, #4]
	send_chuck_struct.acc_z = 0;
   15608:	4b30      	ldr	r3, [pc, #192]	; (156cc <HandleAppRemote+0xe8>)
   1560a:	2200      	movs	r2, #0
   1560c:	80da      	strh	r2, [r3, #6]
	
	uint32_t app_remote_soft_timeout = 100;
   1560e:	2364      	movs	r3, #100	; 0x64
   15610:	607b      	str	r3, [r7, #4]
	uint32_t app_remote_hard_timeout = 500;
   15612:	23fa      	movs	r3, #250	; 0xfa
   15614:	005b      	lsls	r3, r3, #1
   15616:	603b      	str	r3, [r7, #0]
	static uint32_t app_remote_time = 0;

	if(NEW_REMOTE_DATA){
   15618:	4b2d      	ldr	r3, [pc, #180]	; (156d0 <HandleAppRemote+0xec>)
   1561a:	781b      	ldrb	r3, [r3, #0]
   1561c:	2b00      	cmp	r3, #0
   1561e:	d014      	beq.n	1564a <HandleAppRemote+0x66>
		send_chuck_struct.js_y = remote_y = AppRemoteY;
   15620:	4b2c      	ldr	r3, [pc, #176]	; (156d4 <HandleAppRemote+0xf0>)
   15622:	781a      	ldrb	r2, [r3, #0]
   15624:	4b2c      	ldr	r3, [pc, #176]	; (156d8 <HandleAppRemote+0xf4>)
   15626:	701a      	strb	r2, [r3, #0]
   15628:	4b2b      	ldr	r3, [pc, #172]	; (156d8 <HandleAppRemote+0xf4>)
   1562a:	781b      	ldrb	r3, [r3, #0]
   1562c:	b25a      	sxtb	r2, r3
   1562e:	4b27      	ldr	r3, [pc, #156]	; (156cc <HandleAppRemote+0xe8>)
   15630:	705a      	strb	r2, [r3, #1]
		app_remote_time = millis();
   15632:	4b2a      	ldr	r3, [pc, #168]	; (156dc <HandleAppRemote+0xf8>)
   15634:	4798      	blx	r3
   15636:	0002      	movs	r2, r0
   15638:	4b29      	ldr	r3, [pc, #164]	; (156e0 <HandleAppRemote+0xfc>)
   1563a:	601a      	str	r2, [r3, #0]
		NEW_REMOTE_DATA = false;
   1563c:	4b24      	ldr	r3, [pc, #144]	; (156d0 <HandleAppRemote+0xec>)
   1563e:	2200      	movs	r2, #0
   15640:	701a      	strb	r2, [r3, #0]
		SEND_VESC_CHUCK = true;
   15642:	4b28      	ldr	r3, [pc, #160]	; (156e4 <HandleAppRemote+0x100>)
   15644:	2201      	movs	r2, #1
   15646:	701a      	strb	r2, [r3, #0]
		SEND_VESC_CHUCK = true;
	}
	else{
		SEND_VESC_CHUCK = false;
	}
}
   15648:	e03c      	b.n	156c4 <HandleAppRemote+0xe0>
	} else if(SEND_VESC_CHUCK && !check_timer_expired(&app_remote_time, app_remote_soft_timeout)){
   1564a:	4b26      	ldr	r3, [pc, #152]	; (156e4 <HandleAppRemote+0x100>)
   1564c:	781b      	ldrb	r3, [r3, #0]
   1564e:	2b00      	cmp	r3, #0
   15650:	d019      	beq.n	15686 <HandleAppRemote+0xa2>
   15652:	687a      	ldr	r2, [r7, #4]
   15654:	4b22      	ldr	r3, [pc, #136]	; (156e0 <HandleAppRemote+0xfc>)
   15656:	0011      	movs	r1, r2
   15658:	0018      	movs	r0, r3
   1565a:	4b23      	ldr	r3, [pc, #140]	; (156e8 <HandleAppRemote+0x104>)
   1565c:	4798      	blx	r3
   1565e:	0003      	movs	r3, r0
   15660:	001a      	movs	r2, r3
   15662:	2301      	movs	r3, #1
   15664:	4053      	eors	r3, r2
   15666:	b2db      	uxtb	r3, r3
   15668:	2b00      	cmp	r3, #0
   1566a:	d00c      	beq.n	15686 <HandleAppRemote+0xa2>
		send_chuck_struct.js_y = remote_y = AppRemoteY;
   1566c:	4b19      	ldr	r3, [pc, #100]	; (156d4 <HandleAppRemote+0xf0>)
   1566e:	781a      	ldrb	r2, [r3, #0]
   15670:	4b19      	ldr	r3, [pc, #100]	; (156d8 <HandleAppRemote+0xf4>)
   15672:	701a      	strb	r2, [r3, #0]
   15674:	4b18      	ldr	r3, [pc, #96]	; (156d8 <HandleAppRemote+0xf4>)
   15676:	781b      	ldrb	r3, [r3, #0]
   15678:	b25a      	sxtb	r2, r3
   1567a:	4b14      	ldr	r3, [pc, #80]	; (156cc <HandleAppRemote+0xe8>)
   1567c:	705a      	strb	r2, [r3, #1]
		SEND_VESC_CHUCK = true;
   1567e:	4b19      	ldr	r3, [pc, #100]	; (156e4 <HandleAppRemote+0x100>)
   15680:	2201      	movs	r2, #1
   15682:	701a      	strb	r2, [r3, #0]
   15684:	e01e      	b.n	156c4 <HandleAppRemote+0xe0>
	} else if(SEND_VESC_CHUCK && !check_timer_expired(&app_remote_time, app_remote_hard_timeout)){
   15686:	4b17      	ldr	r3, [pc, #92]	; (156e4 <HandleAppRemote+0x100>)
   15688:	781b      	ldrb	r3, [r3, #0]
   1568a:	2b00      	cmp	r3, #0
   1568c:	d016      	beq.n	156bc <HandleAppRemote+0xd8>
   1568e:	683a      	ldr	r2, [r7, #0]
   15690:	4b13      	ldr	r3, [pc, #76]	; (156e0 <HandleAppRemote+0xfc>)
   15692:	0011      	movs	r1, r2
   15694:	0018      	movs	r0, r3
   15696:	4b14      	ldr	r3, [pc, #80]	; (156e8 <HandleAppRemote+0x104>)
   15698:	4798      	blx	r3
   1569a:	0003      	movs	r3, r0
   1569c:	001a      	movs	r2, r3
   1569e:	2301      	movs	r3, #1
   156a0:	4053      	eors	r3, r2
   156a2:	b2db      	uxtb	r3, r3
   156a4:	2b00      	cmp	r3, #0
   156a6:	d009      	beq.n	156bc <HandleAppRemote+0xd8>
		send_chuck_struct.js_y = remote_y = 0xFF/2;
   156a8:	4b0b      	ldr	r3, [pc, #44]	; (156d8 <HandleAppRemote+0xf4>)
   156aa:	227f      	movs	r2, #127	; 0x7f
   156ac:	701a      	strb	r2, [r3, #0]
   156ae:	4b07      	ldr	r3, [pc, #28]	; (156cc <HandleAppRemote+0xe8>)
   156b0:	227f      	movs	r2, #127	; 0x7f
   156b2:	705a      	strb	r2, [r3, #1]
		SEND_VESC_CHUCK = true;
   156b4:	4b0b      	ldr	r3, [pc, #44]	; (156e4 <HandleAppRemote+0x100>)
   156b6:	2201      	movs	r2, #1
   156b8:	701a      	strb	r2, [r3, #0]
   156ba:	e003      	b.n	156c4 <HandleAppRemote+0xe0>
		SEND_VESC_CHUCK = false;
   156bc:	4b09      	ldr	r3, [pc, #36]	; (156e4 <HandleAppRemote+0x100>)
   156be:	2200      	movs	r2, #0
   156c0:	701a      	strb	r2, [r3, #0]
}
   156c2:	e7ff      	b.n	156c4 <HandleAppRemote+0xe0>
   156c4:	46c0      	nop			; (mov r8, r8)
   156c6:	46bd      	mov	sp, r7
   156c8:	b002      	add	sp, #8
   156ca:	bd80      	pop	{r7, pc}
   156cc:	2000058c 	.word	0x2000058c
   156d0:	200003e1 	.word	0x200003e1
   156d4:	200000f9 	.word	0x200000f9
   156d8:	200003ce 	.word	0x200003ce
   156dc:	00009f65 	.word	0x00009f65
   156e0:	200004b0 	.word	0x200004b0
   156e4:	20000433 	.word	0x20000433
   156e8:	00009fbd 	.word	0x00009fbd

000156ec <configure_ble_usart>:
struct ble_packet ble_recieve_packet;


// Configure SERCOM5 as USART for BLE module
void configure_ble_usart(int baud)
{
   156ec:	b580      	push	{r7, lr}
   156ee:	b092      	sub	sp, #72	; 0x48
   156f0:	af00      	add	r7, sp, #0
   156f2:	6078      	str	r0, [r7, #4]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   156f4:	2308      	movs	r3, #8
   156f6:	18fb      	adds	r3, r7, r3
   156f8:	0018      	movs	r0, r3
   156fa:	4b17      	ldr	r3, [pc, #92]	; (15758 <configure_ble_usart+0x6c>)
   156fc:	4798      	blx	r3
	config_usart.baudrate    = baud;
   156fe:	687a      	ldr	r2, [r7, #4]
   15700:	2308      	movs	r3, #8
   15702:	18fb      	adds	r3, r7, r3
   15704:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
   15706:	2308      	movs	r3, #8
   15708:	18fb      	adds	r3, r7, r3
   1570a:	22c4      	movs	r2, #196	; 0xc4
   1570c:	0392      	lsls	r2, r2, #14
   1570e:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
   15710:	2308      	movs	r3, #8
   15712:	18fb      	adds	r3, r7, r3
   15714:	2201      	movs	r2, #1
   15716:	4252      	negs	r2, r2
   15718:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
   1571a:	2308      	movs	r3, #8
   1571c:	18fb      	adds	r3, r7, r3
   1571e:	2201      	movs	r2, #1
   15720:	4252      	negs	r2, r2
   15722:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20C_SERCOM5_PAD2;
   15724:	2308      	movs	r3, #8
   15726:	18fb      	adds	r3, r7, r3
   15728:	4a0c      	ldr	r2, [pc, #48]	; (1575c <configure_ble_usart+0x70>)
   1572a:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21C_SERCOM5_PAD3;
   1572c:	2308      	movs	r3, #8
   1572e:	18fb      	adds	r3, r7, r3
   15730:	4a0b      	ldr	r2, [pc, #44]	; (15760 <configure_ble_usart+0x74>)
   15732:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&ble_usart,SERCOM5, &config_usart) != STATUS_OK)
   15734:	46c0      	nop			; (mov r8, r8)
   15736:	2308      	movs	r3, #8
   15738:	18fa      	adds	r2, r7, r3
   1573a:	490a      	ldr	r1, [pc, #40]	; (15764 <configure_ble_usart+0x78>)
   1573c:	4b0a      	ldr	r3, [pc, #40]	; (15768 <configure_ble_usart+0x7c>)
   1573e:	0018      	movs	r0, r3
   15740:	4b0a      	ldr	r3, [pc, #40]	; (1576c <configure_ble_usart+0x80>)
   15742:	4798      	blx	r3
   15744:	1e03      	subs	r3, r0, #0
   15746:	d1f6      	bne.n	15736 <configure_ble_usart+0x4a>
	{}
	usart_enable(&ble_usart);
   15748:	4b07      	ldr	r3, [pc, #28]	; (15768 <configure_ble_usart+0x7c>)
   1574a:	0018      	movs	r0, r3
   1574c:	4b08      	ldr	r3, [pc, #32]	; (15770 <configure_ble_usart+0x84>)
   1574e:	4798      	blx	r3
}
   15750:	46c0      	nop			; (mov r8, r8)
   15752:	46bd      	mov	sp, r7
   15754:	b012      	add	sp, #72	; 0x48
   15756:	bd80      	pop	{r7, pc}
   15758:	00009ca1 	.word	0x00009ca1
   1575c:	00140002 	.word	0x00140002
   15760:	00150002 	.word	0x00150002
   15764:	42001c00 	.word	0x42001c00
   15768:	200006cc 	.word	0x200006cc
   1576c:	000060e5 	.word	0x000060e5
   15770:	00009d61 	.word	0x00009d61

00015774 <configure_BLE_module>:

void configure_BLE_module()
{
   15774:	b590      	push	{r4, r7, lr}
   15776:	b09d      	sub	sp, #116	; 0x74
   15778:	af00      	add	r7, sp, #0
	int baud = 0;
   1577a:	2300      	movs	r3, #0
   1577c:	66fb      	str	r3, [r7, #108]	; 0x6c
	int bauds[5] = {9600, 19200, 38400, 57600, 115200};
   1577e:	2330      	movs	r3, #48	; 0x30
   15780:	18fb      	adds	r3, r7, r3
   15782:	4a8a      	ldr	r2, [pc, #552]	; (159ac <configure_BLE_module+0x238>)
   15784:	ca13      	ldmia	r2!, {r0, r1, r4}
   15786:	c313      	stmia	r3!, {r0, r1, r4}
   15788:	ca03      	ldmia	r2!, {r0, r1}
   1578a:	c303      	stmia	r3!, {r0, r1}
	uint32_t ble_config_time = millis();
   1578c:	4b88      	ldr	r3, [pc, #544]	; (159b0 <configure_BLE_module+0x23c>)
   1578e:	4798      	blx	r3
   15790:	0003      	movs	r3, r0
   15792:	62fb      	str	r3, [r7, #44]	; 0x2c
	static uint32_t ble_config_timeout = 2000;

	while(1){
		if(check_timer_expired(&ble_config_time, ble_config_timeout)){
   15794:	4b87      	ldr	r3, [pc, #540]	; (159b4 <configure_BLE_module+0x240>)
   15796:	681a      	ldr	r2, [r3, #0]
   15798:	232c      	movs	r3, #44	; 0x2c
   1579a:	18fb      	adds	r3, r7, r3
   1579c:	0011      	movs	r1, r2
   1579e:	0018      	movs	r0, r3
   157a0:	4b85      	ldr	r3, [pc, #532]	; (159b8 <configure_BLE_module+0x244>)
   157a2:	4798      	blx	r3
   157a4:	1e03      	subs	r3, r0, #0
   157a6:	d017      	beq.n	157d8 <configure_BLE_module+0x64>
			configure_ble_usart(BLE_BAUD);
   157a8:	23e1      	movs	r3, #225	; 0xe1
   157aa:	025b      	lsls	r3, r3, #9
   157ac:	0018      	movs	r0, r3
   157ae:	4b83      	ldr	r3, [pc, #524]	; (159bc <configure_BLE_module+0x248>)
   157b0:	4798      	blx	r3
			for(int i = 0; i < 5000; ++i);
   157b2:	2300      	movs	r3, #0
   157b4:	66bb      	str	r3, [r7, #104]	; 0x68
   157b6:	e002      	b.n	157be <configure_BLE_module+0x4a>
   157b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   157ba:	3301      	adds	r3, #1
   157bc:	66bb      	str	r3, [r7, #104]	; 0x68
   157be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   157c0:	4a7f      	ldr	r2, [pc, #508]	; (159c0 <configure_BLE_module+0x24c>)
   157c2:	4293      	cmp	r3, r2
   157c4:	ddf8      	ble.n	157b8 <configure_BLE_module+0x44>
			usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   157c6:	2304      	movs	r3, #4
   157c8:	33ff      	adds	r3, #255	; 0xff
   157ca:	001a      	movs	r2, r3
   157cc:	497d      	ldr	r1, [pc, #500]	; (159c4 <configure_BLE_module+0x250>)
   157ce:	4b7e      	ldr	r3, [pc, #504]	; (159c8 <configure_BLE_module+0x254>)
   157d0:	0018      	movs	r0, r3
   157d2:	4b7e      	ldr	r3, [pc, #504]	; (159cc <configure_BLE_module+0x258>)
   157d4:	4798      	blx	r3
			break;
   157d6:	e0e4      	b.n	159a2 <configure_BLE_module+0x22e>
		}
		
		configure_ble_usart(bauds[baud]);
   157d8:	2330      	movs	r3, #48	; 0x30
   157da:	18fb      	adds	r3, r7, r3
   157dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   157de:	0092      	lsls	r2, r2, #2
   157e0:	58d3      	ldr	r3, [r2, r3]
   157e2:	0018      	movs	r0, r3
   157e4:	4b75      	ldr	r3, [pc, #468]	; (159bc <configure_BLE_module+0x248>)
   157e6:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   157e8:	2304      	movs	r3, #4
   157ea:	33ff      	adds	r3, #255	; 0xff
   157ec:	001a      	movs	r2, r3
   157ee:	4975      	ldr	r1, [pc, #468]	; (159c4 <configure_BLE_module+0x250>)
   157f0:	4b75      	ldr	r3, [pc, #468]	; (159c8 <configure_BLE_module+0x254>)
   157f2:	0018      	movs	r0, r3
   157f4:	4b75      	ldr	r3, [pc, #468]	; (159cc <configure_BLE_module+0x258>)
   157f6:	4798      	blx	r3

		baud += 1;
   157f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   157fa:	3301      	adds	r3, #1
   157fc:	66fb      	str	r3, [r7, #108]	; 0x6c
		if(baud > 4)
   157fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   15800:	2b04      	cmp	r3, #4
   15802:	dd01      	ble.n	15808 <configure_BLE_module+0x94>
		baud = 0;
   15804:	2300      	movs	r3, #0
   15806:	66fb      	str	r3, [r7, #108]	; 0x6c
		
		for(int i = 0; i < 10000; ++i);
   15808:	2300      	movs	r3, #0
   1580a:	667b      	str	r3, [r7, #100]	; 0x64
   1580c:	e002      	b.n	15814 <configure_BLE_module+0xa0>
   1580e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   15810:	3301      	adds	r3, #1
   15812:	667b      	str	r3, [r7, #100]	; 0x64
   15814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   15816:	4a6e      	ldr	r2, [pc, #440]	; (159d0 <configure_BLE_module+0x25c>)
   15818:	4293      	cmp	r3, r2
   1581a:	ddf8      	ble.n	1580e <configure_BLE_module+0x9a>
		else if(BLE_BAUD == 38400)
		strcpy(string1,"AT+BAUD2");
		else if(BLE_BAUD == 57600)
		strcpy(string1,"AT+BAUD3");
		else if(BLE_BAUD == 115200)
		strcpy(string1,"AT+BAUD4");
   1581c:	2324      	movs	r3, #36	; 0x24
   1581e:	18fb      	adds	r3, r7, r3
   15820:	4a6c      	ldr	r2, [pc, #432]	; (159d4 <configure_BLE_module+0x260>)
   15822:	ca03      	ldmia	r2!, {r0, r1}
   15824:	c303      	stmia	r3!, {r0, r1}
   15826:	7812      	ldrb	r2, [r2, #0]
   15828:	701a      	strb	r2, [r3, #0]
		OK_EXPECTED = true;
   1582a:	4b6b      	ldr	r3, [pc, #428]	; (159d8 <configure_BLE_module+0x264>)
   1582c:	2201      	movs	r2, #1
   1582e:	701a      	strb	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string1, sizeof(string1))!=STATUS_OK){}
   15830:	46c0      	nop			; (mov r8, r8)
   15832:	2324      	movs	r3, #36	; 0x24
   15834:	18f9      	adds	r1, r7, r3
   15836:	4b64      	ldr	r3, [pc, #400]	; (159c8 <configure_BLE_module+0x254>)
   15838:	2208      	movs	r2, #8
   1583a:	0018      	movs	r0, r3
   1583c:	4b67      	ldr	r3, [pc, #412]	; (159dc <configure_BLE_module+0x268>)
   1583e:	4798      	blx	r3
   15840:	1e03      	subs	r3, r0, #0
   15842:	d1f6      	bne.n	15832 <configure_BLE_module+0xbe>
		for(int i = 0; i < 25000; ++i);
   15844:	2300      	movs	r3, #0
   15846:	663b      	str	r3, [r7, #96]	; 0x60
   15848:	e002      	b.n	15850 <configure_BLE_module+0xdc>
   1584a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1584c:	3301      	adds	r3, #1
   1584e:	663b      	str	r3, [r7, #96]	; 0x60
   15850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   15852:	4a63      	ldr	r2, [pc, #396]	; (159e0 <configure_BLE_module+0x26c>)
   15854:	4293      	cmp	r3, r2
   15856:	ddf8      	ble.n	1584a <configure_BLE_module+0xd6>
		
		OK_EXPECTED = true;
   15858:	4b5f      	ldr	r3, [pc, #380]	; (159d8 <configure_BLE_module+0x264>)
   1585a:	2201      	movs	r2, #1
   1585c:	701a      	strb	r2, [r3, #0]
		uint8_t string2[14] = "AT+NAMETelTail";
   1585e:	2314      	movs	r3, #20
   15860:	18fb      	adds	r3, r7, r3
   15862:	4a60      	ldr	r2, [pc, #384]	; (159e4 <configure_BLE_module+0x270>)
   15864:	ca13      	ldmia	r2!, {r0, r1, r4}
   15866:	c313      	stmia	r3!, {r0, r1, r4}
   15868:	8812      	ldrh	r2, [r2, #0]
   1586a:	801a      	strh	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string2, sizeof(string2))!=STATUS_OK){}
   1586c:	46c0      	nop			; (mov r8, r8)
   1586e:	2314      	movs	r3, #20
   15870:	18f9      	adds	r1, r7, r3
   15872:	4b55      	ldr	r3, [pc, #340]	; (159c8 <configure_BLE_module+0x254>)
   15874:	220e      	movs	r2, #14
   15876:	0018      	movs	r0, r3
   15878:	4b58      	ldr	r3, [pc, #352]	; (159dc <configure_BLE_module+0x268>)
   1587a:	4798      	blx	r3
   1587c:	1e03      	subs	r3, r0, #0
   1587e:	d1f6      	bne.n	1586e <configure_BLE_module+0xfa>
		for(int i = 0; i < 25000; ++i);
   15880:	2300      	movs	r3, #0
   15882:	65fb      	str	r3, [r7, #92]	; 0x5c
   15884:	e002      	b.n	1588c <configure_BLE_module+0x118>
   15886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   15888:	3301      	adds	r3, #1
   1588a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1588c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1588e:	4a54      	ldr	r2, [pc, #336]	; (159e0 <configure_BLE_module+0x26c>)
   15890:	4293      	cmp	r3, r2
   15892:	ddf8      	ble.n	15886 <configure_BLE_module+0x112>
		
		OK_EXPECTED = true;
   15894:	4b50      	ldr	r3, [pc, #320]	; (159d8 <configure_BLE_module+0x264>)
   15896:	2201      	movs	r2, #1
   15898:	701a      	strb	r2, [r3, #0]
		uint8_t string3[8] = "AT+POWE3"; // Default = 2
   1589a:	230c      	movs	r3, #12
   1589c:	18fb      	adds	r3, r7, r3
   1589e:	4a52      	ldr	r2, [pc, #328]	; (159e8 <configure_BLE_module+0x274>)
   158a0:	ca03      	ldmia	r2!, {r0, r1}
   158a2:	c303      	stmia	r3!, {r0, r1}
		while(usart_write_buffer_wait(&ble_usart, string3, sizeof(string3))!=STATUS_OK){}
   158a4:	46c0      	nop			; (mov r8, r8)
   158a6:	230c      	movs	r3, #12
   158a8:	18f9      	adds	r1, r7, r3
   158aa:	4b47      	ldr	r3, [pc, #284]	; (159c8 <configure_BLE_module+0x254>)
   158ac:	2208      	movs	r2, #8
   158ae:	0018      	movs	r0, r3
   158b0:	4b4a      	ldr	r3, [pc, #296]	; (159dc <configure_BLE_module+0x268>)
   158b2:	4798      	blx	r3
   158b4:	1e03      	subs	r3, r0, #0
   158b6:	d1f6      	bne.n	158a6 <configure_BLE_module+0x132>
		for(int i = 0; i < 25000; ++i);
   158b8:	2300      	movs	r3, #0
   158ba:	65bb      	str	r3, [r7, #88]	; 0x58
   158bc:	e002      	b.n	158c4 <configure_BLE_module+0x150>
   158be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   158c0:	3301      	adds	r3, #1
   158c2:	65bb      	str	r3, [r7, #88]	; 0x58
   158c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   158c6:	4a46      	ldr	r2, [pc, #280]	; (159e0 <configure_BLE_module+0x26c>)
   158c8:	4293      	cmp	r3, r2
   158ca:	ddf8      	ble.n	158be <configure_BLE_module+0x14a>
		
		read_ble_packet();
   158cc:	4b47      	ldr	r3, [pc, #284]	; (159ec <configure_BLE_module+0x278>)
   158ce:	4798      	blx	r3
		if(!BLE_CONFIGURED){
   158d0:	4b47      	ldr	r3, [pc, #284]	; (159f0 <configure_BLE_module+0x27c>)
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	2201      	movs	r2, #1
   158d6:	4053      	eors	r3, r2
   158d8:	b2db      	uxtb	r3, r3
   158da:	2b00      	cmp	r3, #0
   158dc:	d00e      	beq.n	158fc <configure_BLE_module+0x188>
			usart_disable(&ble_usart);
   158de:	4b3a      	ldr	r3, [pc, #232]	; (159c8 <configure_BLE_module+0x254>)
   158e0:	0018      	movs	r0, r3
   158e2:	4b44      	ldr	r3, [pc, #272]	; (159f4 <configure_BLE_module+0x280>)
   158e4:	4798      	blx	r3
			for(int i = 0; i < 10000; ++i);
   158e6:	2300      	movs	r3, #0
   158e8:	657b      	str	r3, [r7, #84]	; 0x54
   158ea:	e002      	b.n	158f2 <configure_BLE_module+0x17e>
   158ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   158ee:	3301      	adds	r3, #1
   158f0:	657b      	str	r3, [r7, #84]	; 0x54
   158f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   158f4:	4a36      	ldr	r2, [pc, #216]	; (159d0 <configure_BLE_module+0x25c>)
   158f6:	4293      	cmp	r3, r2
   158f8:	ddf8      	ble.n	158ec <configure_BLE_module+0x178>
	while(1){
   158fa:	e74b      	b.n	15794 <configure_BLE_module+0x20>
		}
		else{
			uint8_t string4[8] = "AT+RESET";
   158fc:	1d3b      	adds	r3, r7, #4
   158fe:	4a3e      	ldr	r2, [pc, #248]	; (159f8 <configure_BLE_module+0x284>)
   15900:	ca03      	ldmia	r2!, {r0, r1}
   15902:	c303      	stmia	r3!, {r0, r1}
			while(usart_write_buffer_wait(&ble_usart, string4, sizeof(string4))!=STATUS_OK){}
   15904:	46c0      	nop			; (mov r8, r8)
   15906:	1d39      	adds	r1, r7, #4
   15908:	4b2f      	ldr	r3, [pc, #188]	; (159c8 <configure_BLE_module+0x254>)
   1590a:	2208      	movs	r2, #8
   1590c:	0018      	movs	r0, r3
   1590e:	4b33      	ldr	r3, [pc, #204]	; (159dc <configure_BLE_module+0x268>)
   15910:	4798      	blx	r3
   15912:	1e03      	subs	r3, r0, #0
   15914:	d1f7      	bne.n	15906 <configure_BLE_module+0x192>
			for(int i = 0; i < 25000; ++i);
   15916:	2300      	movs	r3, #0
   15918:	653b      	str	r3, [r7, #80]	; 0x50
   1591a:	e002      	b.n	15922 <configure_BLE_module+0x1ae>
   1591c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1591e:	3301      	adds	r3, #1
   15920:	653b      	str	r3, [r7, #80]	; 0x50
   15922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15924:	4a2e      	ldr	r2, [pc, #184]	; (159e0 <configure_BLE_module+0x26c>)
   15926:	4293      	cmp	r3, r2
   15928:	ddf8      	ble.n	1591c <configure_BLE_module+0x1a8>
			usart_disable(&ble_usart);
   1592a:	4b27      	ldr	r3, [pc, #156]	; (159c8 <configure_BLE_module+0x254>)
   1592c:	0018      	movs	r0, r3
   1592e:	4b31      	ldr	r3, [pc, #196]	; (159f4 <configure_BLE_module+0x280>)
   15930:	4798      	blx	r3
			for(int i = 0; i < 500000; ++i);
   15932:	2300      	movs	r3, #0
   15934:	64fb      	str	r3, [r7, #76]	; 0x4c
   15936:	e002      	b.n	1593e <configure_BLE_module+0x1ca>
   15938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1593a:	3301      	adds	r3, #1
   1593c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15940:	4a2e      	ldr	r2, [pc, #184]	; (159fc <configure_BLE_module+0x288>)
   15942:	4293      	cmp	r3, r2
   15944:	ddf8      	ble.n	15938 <configure_BLE_module+0x1c4>
			configure_ble_usart(BLE_BAUD);
   15946:	23e1      	movs	r3, #225	; 0xe1
   15948:	025b      	lsls	r3, r3, #9
   1594a:	0018      	movs	r0, r3
   1594c:	4b1b      	ldr	r3, [pc, #108]	; (159bc <configure_BLE_module+0x248>)
   1594e:	4798      	blx	r3
			for(int i = 0; i < 5000; ++i);
   15950:	2300      	movs	r3, #0
   15952:	64bb      	str	r3, [r7, #72]	; 0x48
   15954:	e002      	b.n	1595c <configure_BLE_module+0x1e8>
   15956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15958:	3301      	adds	r3, #1
   1595a:	64bb      	str	r3, [r7, #72]	; 0x48
   1595c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1595e:	4a18      	ldr	r2, [pc, #96]	; (159c0 <configure_BLE_module+0x24c>)
   15960:	4293      	cmp	r3, r2
   15962:	ddf8      	ble.n	15956 <configure_BLE_module+0x1e2>
			uint8_t string5[2] = "AT";
   15964:	003b      	movs	r3, r7
   15966:	4a26      	ldr	r2, [pc, #152]	; (15a00 <configure_BLE_module+0x28c>)
   15968:	801a      	strh	r2, [r3, #0]
			while(usart_write_buffer_wait(&ble_usart, string5, sizeof(string5))!=STATUS_OK){}
   1596a:	46c0      	nop			; (mov r8, r8)
   1596c:	0039      	movs	r1, r7
   1596e:	4b16      	ldr	r3, [pc, #88]	; (159c8 <configure_BLE_module+0x254>)
   15970:	2202      	movs	r2, #2
   15972:	0018      	movs	r0, r3
   15974:	4b19      	ldr	r3, [pc, #100]	; (159dc <configure_BLE_module+0x268>)
   15976:	4798      	blx	r3
   15978:	1e03      	subs	r3, r0, #0
   1597a:	d1f7      	bne.n	1596c <configure_BLE_module+0x1f8>
			for(int i = 0; i < 10000; ++i);
   1597c:	2300      	movs	r3, #0
   1597e:	647b      	str	r3, [r7, #68]	; 0x44
   15980:	e002      	b.n	15988 <configure_BLE_module+0x214>
   15982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15984:	3301      	adds	r3, #1
   15986:	647b      	str	r3, [r7, #68]	; 0x44
   15988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1598a:	4a11      	ldr	r2, [pc, #68]	; (159d0 <configure_BLE_module+0x25c>)
   1598c:	4293      	cmp	r3, r2
   1598e:	ddf8      	ble.n	15982 <configure_BLE_module+0x20e>
			usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   15990:	2304      	movs	r3, #4
   15992:	33ff      	adds	r3, #255	; 0xff
   15994:	001a      	movs	r2, r3
   15996:	490b      	ldr	r1, [pc, #44]	; (159c4 <configure_BLE_module+0x250>)
   15998:	4b0b      	ldr	r3, [pc, #44]	; (159c8 <configure_BLE_module+0x254>)
   1599a:	0018      	movs	r0, r3
   1599c:	4b0b      	ldr	r3, [pc, #44]	; (159cc <configure_BLE_module+0x258>)
   1599e:	4798      	blx	r3
			break;
   159a0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   159a2:	46c0      	nop			; (mov r8, r8)
   159a4:	46bd      	mov	sp, r7
   159a6:	b01d      	add	sp, #116	; 0x74
   159a8:	bd90      	pop	{r4, r7, pc}
   159aa:	46c0      	nop			; (mov r8, r8)
   159ac:	0001c9a4 	.word	0x0001c9a4
   159b0:	00009f65 	.word	0x00009f65
   159b4:	20000114 	.word	0x20000114
   159b8:	00009fbd 	.word	0x00009fbd
   159bc:	000156ed 	.word	0x000156ed
   159c0:	00001387 	.word	0x00001387
   159c4:	200017f4 	.word	0x200017f4
   159c8:	200006cc 	.word	0x200006cc
   159cc:	00006671 	.word	0x00006671
   159d0:	0000270f 	.word	0x0000270f
   159d4:	0001c998 	.word	0x0001c998
   159d8:	2000044b 	.word	0x2000044b
   159dc:	000063bd 	.word	0x000063bd
   159e0:	000061a7 	.word	0x000061a7
   159e4:	0001c9b8 	.word	0x0001c9b8
   159e8:	0001c9c8 	.word	0x0001c9c8
   159ec:	00016c61 	.word	0x00016c61
   159f0:	20000443 	.word	0x20000443
   159f4:	00009da9 	.word	0x00009da9
   159f8:	0001c9d4 	.word	0x0001c9d4
   159fc:	0007a11f 	.word	0x0007a11f
   15a00:	00005441 	.word	0x00005441

00015a04 <check_ble_AT_recieved>:

inline bool check_ble_AT_recieved(){
   15a04:	b580      	push	{r7, lr}
   15a06:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == 'O' && ble_USART_read_buffer[1] == 'K');
   15a08:	4b08      	ldr	r3, [pc, #32]	; (15a2c <check_ble_AT_recieved+0x28>)
   15a0a:	781b      	ldrb	r3, [r3, #0]
   15a0c:	2b4f      	cmp	r3, #79	; 0x4f
   15a0e:	d105      	bne.n	15a1c <check_ble_AT_recieved+0x18>
   15a10:	4b06      	ldr	r3, [pc, #24]	; (15a2c <check_ble_AT_recieved+0x28>)
   15a12:	785b      	ldrb	r3, [r3, #1]
   15a14:	2b4b      	cmp	r3, #75	; 0x4b
   15a16:	d101      	bne.n	15a1c <check_ble_AT_recieved+0x18>
   15a18:	2301      	movs	r3, #1
   15a1a:	e000      	b.n	15a1e <check_ble_AT_recieved+0x1a>
   15a1c:	2300      	movs	r3, #0
   15a1e:	1c1a      	adds	r2, r3, #0
   15a20:	2301      	movs	r3, #1
   15a22:	4013      	ands	r3, r2
   15a24:	b2db      	uxtb	r3, r3
}
   15a26:	0018      	movs	r0, r3
   15a28:	46bd      	mov	sp, r7
   15a2a:	bd80      	pop	{r7, pc}
   15a2c:	200017f4 	.word	0x200017f4

00015a30 <check_ble_packet_recieved>:

inline bool check_ble_packet_recieved(){
   15a30:	b580      	push	{r7, lr}
   15a32:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == BLE_START_BYTE && ble_USART_read_buffer[ble_USART_read_buffer[1]+3] == BLE_STOP_BYTE);
   15a34:	4b0a      	ldr	r3, [pc, #40]	; (15a60 <check_ble_packet_recieved+0x30>)
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	2ba5      	cmp	r3, #165	; 0xa5
   15a3a:	d108      	bne.n	15a4e <check_ble_packet_recieved+0x1e>
   15a3c:	4b08      	ldr	r3, [pc, #32]	; (15a60 <check_ble_packet_recieved+0x30>)
   15a3e:	785b      	ldrb	r3, [r3, #1]
   15a40:	3303      	adds	r3, #3
   15a42:	4a07      	ldr	r2, [pc, #28]	; (15a60 <check_ble_packet_recieved+0x30>)
   15a44:	5cd3      	ldrb	r3, [r2, r3]
   15a46:	2b5a      	cmp	r3, #90	; 0x5a
   15a48:	d101      	bne.n	15a4e <check_ble_packet_recieved+0x1e>
   15a4a:	2301      	movs	r3, #1
   15a4c:	e000      	b.n	15a50 <check_ble_packet_recieved+0x20>
   15a4e:	2300      	movs	r3, #0
   15a50:	1c1a      	adds	r2, r3, #0
   15a52:	2301      	movs	r3, #1
   15a54:	4013      	ands	r3, r2
   15a56:	b2db      	uxtb	r3, r3
}
   15a58:	0018      	movs	r0, r3
   15a5a:	46bd      	mov	sp, r7
   15a5c:	bd80      	pop	{r7, pc}
   15a5e:	46c0      	nop			; (mov r8, r8)
   15a60:	200017f4 	.word	0x200017f4

00015a64 <process_ble_packet>:

void process_ble_packet(){
   15a64:	b580      	push	{r7, lr}
   15a66:	af00      	add	r7, sp, #0
	switch(ble_recieve_packet.ID){
   15a68:	4bf2      	ldr	r3, [pc, #968]	; (15e34 <process_ble_packet+0x3d0>)
   15a6a:	781b      	ldrb	r3, [r3, #0]
   15a6c:	3ba1      	subs	r3, #161	; 0xa1
   15a6e:	2b5e      	cmp	r3, #94	; 0x5e
   15a70:	d901      	bls.n	15a76 <process_ble_packet+0x12>
   15a72:	f001 f8dc 	bl	16c2e <process_ble_packet+0x11ca>
   15a76:	009a      	lsls	r2, r3, #2
   15a78:	4bef      	ldr	r3, [pc, #956]	; (15e38 <process_ble_packet+0x3d4>)
   15a7a:	18d3      	adds	r3, r2, r3
   15a7c:	681b      	ldr	r3, [r3, #0]
   15a7e:	469f      	mov	pc, r3
		case Read_Motor_Limits:
			GET_LIMITS = 1;
   15a80:	4bee      	ldr	r3, [pc, #952]	; (15e3c <process_ble_packet+0x3d8>)
   15a82:	2201      	movs	r2, #1
   15a84:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15a86:	4bee      	ldr	r3, [pc, #952]	; (15e40 <process_ble_packet+0x3dc>)
   15a88:	2200      	movs	r2, #0
   15a8a:	701a      	strb	r2, [r3, #0]
			break;
   15a8c:	f001 f8cf 	bl	16c2e <process_ble_packet+0x11ca>
		case (int)Read_LED_Vars:
			SEND_LED_CHARS = 1;
   15a90:	4bec      	ldr	r3, [pc, #944]	; (15e44 <process_ble_packet+0x3e0>)
   15a92:	2201      	movs	r2, #1
   15a94:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15a96:	4bea      	ldr	r3, [pc, #936]	; (15e40 <process_ble_packet+0x3dc>)
   15a98:	2200      	movs	r2, #0
   15a9a:	701a      	strb	r2, [r3, #0]
			break;
   15a9c:	f001 f8c7 	bl	16c2e <process_ble_packet+0x11ca>
		case Calibrate_All:
			calibrate(true);
   15aa0:	2001      	movs	r0, #1
   15aa2:	4be9      	ldr	r3, [pc, #932]	; (15e48 <process_ble_packet+0x3e4>)
   15aa4:	4798      	blx	r3
			save_cal_data();
   15aa6:	4be9      	ldr	r3, [pc, #932]	; (15e4c <process_ble_packet+0x3e8>)
   15aa8:	4798      	blx	r3
			break;
   15aaa:	f001 f8c0 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_Sensor_Vars:
			SEND_SENSORS = 1;
   15aae:	4be8      	ldr	r3, [pc, #928]	; (15e50 <process_ble_packet+0x3ec>)
   15ab0:	2201      	movs	r2, #1
   15ab2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15ab4:	4be2      	ldr	r3, [pc, #904]	; (15e40 <process_ble_packet+0x3dc>)
   15ab6:	2200      	movs	r2, #0
   15ab8:	701a      	strb	r2, [r3, #0]
			break;
   15aba:	f001 f8b8 	bl	16c2e <process_ble_packet+0x11ca>
		case LED_Toggle:
			LIGHTS_ON = !LIGHTS_ON;
   15abe:	4be5      	ldr	r3, [pc, #916]	; (15e54 <process_ble_packet+0x3f0>)
   15ac0:	781b      	ldrb	r3, [r3, #0]
   15ac2:	425a      	negs	r2, r3
   15ac4:	4153      	adcs	r3, r2
   15ac6:	b2db      	uxtb	r3, r3
   15ac8:	001a      	movs	r2, r3
   15aca:	4be2      	ldr	r3, [pc, #904]	; (15e54 <process_ble_packet+0x3f0>)
   15acc:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15ace:	4be2      	ldr	r3, [pc, #904]	; (15e58 <process_ble_packet+0x3f4>)
   15ad0:	4798      	blx	r3
			break;
   15ad2:	f001 f8ac 	bl	16c2e <process_ble_packet+0x11ca>
		case LED_Mode_Down:
			if(light_mode == 0)
   15ad6:	4be1      	ldr	r3, [pc, #900]	; (15e5c <process_ble_packet+0x3f8>)
   15ad8:	781b      	ldrb	r3, [r3, #0]
   15ada:	2b00      	cmp	r3, #0
   15adc:	d105      	bne.n	15aea <process_ble_packet+0x86>
				light_mode = light_modes - 1;
   15ade:	2309      	movs	r3, #9
   15ae0:	3b01      	subs	r3, #1
   15ae2:	b2da      	uxtb	r2, r3
   15ae4:	4bdd      	ldr	r3, [pc, #884]	; (15e5c <process_ble_packet+0x3f8>)
   15ae6:	701a      	strb	r2, [r3, #0]
   15ae8:	e005      	b.n	15af6 <process_ble_packet+0x92>
			else
				light_mode--;
   15aea:	4bdc      	ldr	r3, [pc, #880]	; (15e5c <process_ble_packet+0x3f8>)
   15aec:	781b      	ldrb	r3, [r3, #0]
   15aee:	3b01      	subs	r3, #1
   15af0:	b2da      	uxtb	r2, r3
   15af2:	4bda      	ldr	r3, [pc, #872]	; (15e5c <process_ble_packet+0x3f8>)
   15af4:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15af6:	4bd8      	ldr	r3, [pc, #864]	; (15e58 <process_ble_packet+0x3f4>)
   15af8:	4798      	blx	r3
			break;
   15afa:	f001 f898 	bl	16c2e <process_ble_packet+0x11ca>
		case LED_Mode_Up:
			light_mode++;
   15afe:	4bd7      	ldr	r3, [pc, #860]	; (15e5c <process_ble_packet+0x3f8>)
   15b00:	781b      	ldrb	r3, [r3, #0]
   15b02:	3301      	adds	r3, #1
   15b04:	b2da      	uxtb	r2, r3
   15b06:	4bd5      	ldr	r3, [pc, #852]	; (15e5c <process_ble_packet+0x3f8>)
   15b08:	701a      	strb	r2, [r3, #0]
			if(light_mode >= light_modes)
   15b0a:	4bd4      	ldr	r3, [pc, #848]	; (15e5c <process_ble_packet+0x3f8>)
   15b0c:	781b      	ldrb	r3, [r3, #0]
   15b0e:	2209      	movs	r2, #9
   15b10:	4293      	cmp	r3, r2
   15b12:	d302      	bcc.n	15b1a <process_ble_packet+0xb6>
				light_mode = 0;
   15b14:	4bd1      	ldr	r3, [pc, #836]	; (15e5c <process_ble_packet+0x3f8>)
   15b16:	2200      	movs	r2, #0
   15b18:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15b1a:	4bcf      	ldr	r3, [pc, #828]	; (15e58 <process_ble_packet+0x3f4>)
   15b1c:	4798      	blx	r3
			break;
   15b1e:	f001 f886 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_Orientaion:
			SEND_ORIENTAION_CONFIG = 1;
   15b22:	4bcf      	ldr	r3, [pc, #828]	; (15e60 <process_ble_packet+0x3fc>)
   15b24:	2201      	movs	r2, #1
   15b26:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15b28:	4bc5      	ldr	r3, [pc, #788]	; (15e40 <process_ble_packet+0x3dc>)
   15b2a:	2200      	movs	r2, #0
   15b2c:	701a      	strb	r2, [r3, #0]
			break;
   15b2e:	f001 f87e 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_Controls:
			SEND_CONTROLS_CONFIG = 1;
   15b32:	4bcc      	ldr	r3, [pc, #816]	; (15e64 <process_ble_packet+0x400>)
   15b34:	2201      	movs	r2, #1
   15b36:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15b38:	4bc1      	ldr	r3, [pc, #772]	; (15e40 <process_ble_packet+0x3dc>)
   15b3a:	2200      	movs	r2, #0
   15b3c:	701a      	strb	r2, [r3, #0]
			break;
   15b3e:	f001 f876 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_Remote_Config:
			SEND_REMOTE_CONFIG = 1;
   15b42:	4bc9      	ldr	r3, [pc, #804]	; (15e68 <process_ble_packet+0x404>)
   15b44:	2201      	movs	r2, #1
   15b46:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15b48:	4bbd      	ldr	r3, [pc, #756]	; (15e40 <process_ble_packet+0x3dc>)
   15b4a:	2200      	movs	r2, #0
   15b4c:	701a      	strb	r2, [r3, #0]
			break;
   15b4e:	f001 f86e 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_ESC_Config:
			SEND_ESC_CONFIG = 1;
   15b52:	4bc6      	ldr	r3, [pc, #792]	; (15e6c <process_ble_packet+0x408>)
   15b54:	2201      	movs	r2, #1
   15b56:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15b58:	4bb9      	ldr	r3, [pc, #740]	; (15e40 <process_ble_packet+0x3dc>)
   15b5a:	2200      	movs	r2, #0
   15b5c:	701a      	strb	r2, [r3, #0]
			break;
   15b5e:	f001 f866 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_Lights_Config:
			SEND_Lights_CONFIG = 1;
   15b62:	4bc3      	ldr	r3, [pc, #780]	; (15e70 <process_ble_packet+0x40c>)
   15b64:	2201      	movs	r2, #1
   15b66:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15b68:	4bb5      	ldr	r3, [pc, #724]	; (15e40 <process_ble_packet+0x3dc>)
   15b6a:	2200      	movs	r2, #0
   15b6c:	701a      	strb	r2, [r3, #0]
			break;
   15b6e:	f001 f85e 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_TTL_FW_HW:
			SEND_TTL_FW_HW = 1;
   15b72:	4bc0      	ldr	r3, [pc, #768]	; (15e74 <process_ble_packet+0x410>)
   15b74:	2201      	movs	r2, #1
   15b76:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15b78:	4bb1      	ldr	r3, [pc, #708]	; (15e40 <process_ble_packet+0x3dc>)
   15b7a:	2200      	movs	r2, #0
   15b7c:	701a      	strb	r2, [r3, #0]
			break;
   15b7e:	f001 f856 	bl	16c2e <process_ble_packet+0x11ca>
		case Update_TTL_FW:
			NVIC_SystemReset();
   15b82:	4bbd      	ldr	r3, [pc, #756]	; (15e78 <process_ble_packet+0x414>)
   15b84:	4798      	blx	r3
			break;
   15b86:	f001 f852 	bl	16c2e <process_ble_packet+0x11ca>
		case Aux_Pressed:
			AppAuxButton = 1;
   15b8a:	4bbc      	ldr	r3, [pc, #752]	; (15e7c <process_ble_packet+0x418>)
   15b8c:	2201      	movs	r2, #1
   15b8e:	701a      	strb	r2, [r3, #0]
			break;
   15b90:	f001 f84d 	bl	16c2e <process_ble_packet+0x11ca>
		case Aux_Released:
			AppAuxButton = 0;
   15b94:	4bb9      	ldr	r3, [pc, #740]	; (15e7c <process_ble_packet+0x418>)
   15b96:	2200      	movs	r2, #0
   15b98:	701a      	strb	r2, [r3, #0]
			break;
   15b9a:	f001 f848 	bl	16c2e <process_ble_packet+0x11ca>
		case Test_Outputs:
			TEST_TTL_OUTPUTS = 1;
   15b9e:	4bb8      	ldr	r3, [pc, #736]	; (15e80 <process_ble_packet+0x41c>)
   15ba0:	2201      	movs	r2, #1
   15ba2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15ba4:	4ba6      	ldr	r3, [pc, #664]	; (15e40 <process_ble_packet+0x3dc>)
   15ba6:	2200      	movs	r2, #0
   15ba8:	701a      	strb	r2, [r3, #0]
			break;
   15baa:	f001 f840 	bl	16c2e <process_ble_packet+0x11ca>
		case Read_ESC_Detection:
			SEND_ESC_DETECTION = 1;
   15bae:	4bb5      	ldr	r3, [pc, #724]	; (15e84 <process_ble_packet+0x420>)
   15bb0:	2201      	movs	r2, #1
   15bb2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15bb4:	4ba2      	ldr	r3, [pc, #648]	; (15e40 <process_ble_packet+0x3dc>)
   15bb6:	2200      	movs	r2, #0
   15bb8:	701a      	strb	r2, [r3, #0]
			break;
   15bba:	f001 f838 	bl	16c2e <process_ble_packet+0x11ca>
		case Set_ESC_Detection:
			AUTO_DETECT_ESC = (ble_recieve_packet.payload[0] == 0x01);
   15bbe:	4b9d      	ldr	r3, [pc, #628]	; (15e34 <process_ble_packet+0x3d0>)
   15bc0:	789b      	ldrb	r3, [r3, #2]
   15bc2:	3b01      	subs	r3, #1
   15bc4:	425a      	negs	r2, r3
   15bc6:	4153      	adcs	r3, r2
   15bc8:	b2da      	uxtb	r2, r3
   15bca:	4baf      	ldr	r3, [pc, #700]	; (15e88 <process_ble_packet+0x424>)
   15bcc:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   15bce:	4baf      	ldr	r3, [pc, #700]	; (15e8c <process_ble_packet+0x428>)
   15bd0:	4798      	blx	r3
			break;
   15bd2:	f001 f82c 	bl	16c2e <process_ble_packet+0x11ca>
		case Remote_Data:
			AppRemoteY = (ble_recieve_packet.payload[0] & 0x0FF);
   15bd6:	4b97      	ldr	r3, [pc, #604]	; (15e34 <process_ble_packet+0x3d0>)
   15bd8:	789a      	ldrb	r2, [r3, #2]
   15bda:	4bad      	ldr	r3, [pc, #692]	; (15e90 <process_ble_packet+0x42c>)
   15bdc:	701a      	strb	r2, [r3, #0]
			NEW_REMOTE_DATA = true;
   15bde:	4bad      	ldr	r3, [pc, #692]	; (15e94 <process_ble_packet+0x430>)
   15be0:	2201      	movs	r2, #1
   15be2:	701a      	strb	r2, [r3, #0]
			break;
   15be4:	f001 f823 	bl	16c2e <process_ble_packet+0x11ca>
		case RPM_Throttle_Values:
			LIGHTS_ON = 1;
   15be8:	4b9a      	ldr	r3, [pc, #616]	; (15e54 <process_ble_packet+0x3f0>)
   15bea:	2201      	movs	r2, #1
   15bec:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_RPM_THROTTLE;
   15bee:	4b9b      	ldr	r3, [pc, #620]	; (15e5c <process_ble_packet+0x3f8>)
   15bf0:	2205      	movs	r2, #5
   15bf2:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15bf4:	4b8f      	ldr	r3, [pc, #572]	; (15e34 <process_ble_packet+0x3d0>)
   15bf6:	789b      	ldrb	r3, [r3, #2]
   15bf8:	220f      	movs	r2, #15
   15bfa:	4393      	bics	r3, r2
   15bfc:	b2da      	uxtb	r2, r3
   15bfe:	4ba6      	ldr	r3, [pc, #664]	; (15e98 <process_ble_packet+0x434>)
   15c00:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15c02:	4ba5      	ldr	r3, [pc, #660]	; (15e98 <process_ble_packet+0x434>)
   15c04:	781b      	ldrb	r3, [r3, #0]
   15c06:	111b      	asrs	r3, r3, #4
   15c08:	b2db      	uxtb	r3, r3
   15c0a:	2201      	movs	r2, #1
   15c0c:	4013      	ands	r3, r2
   15c0e:	b2da      	uxtb	r2, r3
   15c10:	4ba2      	ldr	r3, [pc, #648]	; (15e9c <process_ble_packet+0x438>)
   15c12:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15c14:	4ba0      	ldr	r3, [pc, #640]	; (15e98 <process_ble_packet+0x434>)
   15c16:	781b      	ldrb	r3, [r3, #0]
   15c18:	115b      	asrs	r3, r3, #5
   15c1a:	b2db      	uxtb	r3, r3
   15c1c:	2201      	movs	r2, #1
   15c1e:	4013      	ands	r3, r2
   15c20:	b2da      	uxtb	r2, r3
   15c22:	4b9f      	ldr	r3, [pc, #636]	; (15ea0 <process_ble_packet+0x43c>)
   15c24:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15c26:	4b9c      	ldr	r3, [pc, #624]	; (15e98 <process_ble_packet+0x434>)
   15c28:	781b      	ldrb	r3, [r3, #0]
   15c2a:	119b      	asrs	r3, r3, #6
   15c2c:	b2db      	uxtb	r3, r3
   15c2e:	2201      	movs	r2, #1
   15c30:	4013      	ands	r3, r2
   15c32:	b2da      	uxtb	r2, r3
   15c34:	4b9b      	ldr	r3, [pc, #620]	; (15ea4 <process_ble_packet+0x440>)
   15c36:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15c38:	4b97      	ldr	r3, [pc, #604]	; (15e98 <process_ble_packet+0x434>)
   15c3a:	781b      	ldrb	r3, [r3, #0]
   15c3c:	09db      	lsrs	r3, r3, #7
   15c3e:	b2da      	uxtb	r2, r3
   15c40:	4b99      	ldr	r3, [pc, #612]	; (15ea8 <process_ble_packet+0x444>)
   15c42:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[1])>>7)==0x1, MODE_ANALOG_RPM_THROTTLE);
   15c44:	4b7b      	ldr	r3, [pc, #492]	; (15e34 <process_ble_packet+0x3d0>)
   15c46:	78db      	ldrb	r3, [r3, #3]
   15c48:	09db      	lsrs	r3, r3, #7
   15c4a:	b2db      	uxtb	r3, r3
   15c4c:	3b01      	subs	r3, #1
   15c4e:	425a      	negs	r2, r3
   15c50:	4153      	adcs	r3, r2
   15c52:	b2d9      	uxtb	r1, r3
   15c54:	4b95      	ldr	r3, [pc, #596]	; (15eac <process_ble_packet+0x448>)
   15c56:	2205      	movs	r2, #5
   15c58:	0018      	movs	r0, r3
   15c5a:	4b95      	ldr	r3, [pc, #596]	; (15eb0 <process_ble_packet+0x44c>)
   15c5c:	4798      	blx	r3
			save_led_data();
   15c5e:	4b7e      	ldr	r3, [pc, #504]	; (15e58 <process_ble_packet+0x3f4>)
   15c60:	4798      	blx	r3
			break;
   15c62:	f000 ffe4 	bl	16c2e <process_ble_packet+0x11ca>
		case Compass_Cycle_Values:
			LIGHTS_ON = 1;
   15c66:	4b7b      	ldr	r3, [pc, #492]	; (15e54 <process_ble_packet+0x3f0>)
   15c68:	2201      	movs	r2, #1
   15c6a:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_COMPASS_CYCLE;
   15c6c:	4b7b      	ldr	r3, [pc, #492]	; (15e5c <process_ble_packet+0x3f8>)
   15c6e:	2202      	movs	r2, #2
   15c70:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15c72:	4b70      	ldr	r3, [pc, #448]	; (15e34 <process_ble_packet+0x3d0>)
   15c74:	789b      	ldrb	r3, [r3, #2]
   15c76:	220f      	movs	r2, #15
   15c78:	4393      	bics	r3, r2
   15c7a:	b2da      	uxtb	r2, r3
   15c7c:	4b86      	ldr	r3, [pc, #536]	; (15e98 <process_ble_packet+0x434>)
   15c7e:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15c80:	4b85      	ldr	r3, [pc, #532]	; (15e98 <process_ble_packet+0x434>)
   15c82:	781b      	ldrb	r3, [r3, #0]
   15c84:	111b      	asrs	r3, r3, #4
   15c86:	b2db      	uxtb	r3, r3
   15c88:	2201      	movs	r2, #1
   15c8a:	4013      	ands	r3, r2
   15c8c:	b2da      	uxtb	r2, r3
   15c8e:	4b83      	ldr	r3, [pc, #524]	; (15e9c <process_ble_packet+0x438>)
   15c90:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15c92:	4b81      	ldr	r3, [pc, #516]	; (15e98 <process_ble_packet+0x434>)
   15c94:	781b      	ldrb	r3, [r3, #0]
   15c96:	115b      	asrs	r3, r3, #5
   15c98:	b2db      	uxtb	r3, r3
   15c9a:	2201      	movs	r2, #1
   15c9c:	4013      	ands	r3, r2
   15c9e:	b2da      	uxtb	r2, r3
   15ca0:	4b7f      	ldr	r3, [pc, #508]	; (15ea0 <process_ble_packet+0x43c>)
   15ca2:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15ca4:	4b7c      	ldr	r3, [pc, #496]	; (15e98 <process_ble_packet+0x434>)
   15ca6:	781b      	ldrb	r3, [r3, #0]
   15ca8:	119b      	asrs	r3, r3, #6
   15caa:	b2db      	uxtb	r3, r3
   15cac:	2201      	movs	r2, #1
   15cae:	4013      	ands	r3, r2
   15cb0:	b2da      	uxtb	r2, r3
   15cb2:	4b7c      	ldr	r3, [pc, #496]	; (15ea4 <process_ble_packet+0x440>)
   15cb4:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15cb6:	4b78      	ldr	r3, [pc, #480]	; (15e98 <process_ble_packet+0x434>)
   15cb8:	781b      	ldrb	r3, [r3, #0]
   15cba:	09db      	lsrs	r3, r3, #7
   15cbc:	b2da      	uxtb	r2, r3
   15cbe:	4b7a      	ldr	r3, [pc, #488]	; (15ea8 <process_ble_packet+0x444>)
   15cc0:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_ANALOG_COMPASS_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   15cc2:	4b5c      	ldr	r3, [pc, #368]	; (15e34 <process_ble_packet+0x3d0>)
   15cc4:	78da      	ldrb	r2, [r3, #3]
   15cc6:	4b7b      	ldr	r3, [pc, #492]	; (15eb4 <process_ble_packet+0x450>)
   15cc8:	0010      	movs	r0, r2
   15cca:	4798      	blx	r3
   15ccc:	1c02      	adds	r2, r0, #0
   15cce:	4b7a      	ldr	r3, [pc, #488]	; (15eb8 <process_ble_packet+0x454>)
   15cd0:	497a      	ldr	r1, [pc, #488]	; (15ebc <process_ble_packet+0x458>)
   15cd2:	1c10      	adds	r0, r2, #0
   15cd4:	4798      	blx	r3
   15cd6:	1c03      	adds	r3, r0, #0
   15cd8:	1c1a      	adds	r2, r3, #0
   15cda:	4b79      	ldr	r3, [pc, #484]	; (15ec0 <process_ble_packet+0x45c>)
   15cdc:	609a      	str	r2, [r3, #8]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[2])>>7)==0x1, MODE_ANALOG_COMPASS_CYCLE);
   15cde:	4b55      	ldr	r3, [pc, #340]	; (15e34 <process_ble_packet+0x3d0>)
   15ce0:	791b      	ldrb	r3, [r3, #4]
   15ce2:	09db      	lsrs	r3, r3, #7
   15ce4:	b2db      	uxtb	r3, r3
   15ce6:	3b01      	subs	r3, #1
   15ce8:	425a      	negs	r2, r3
   15cea:	4153      	adcs	r3, r2
   15cec:	b2d9      	uxtb	r1, r3
   15cee:	4b6f      	ldr	r3, [pc, #444]	; (15eac <process_ble_packet+0x448>)
   15cf0:	2202      	movs	r2, #2
   15cf2:	0018      	movs	r0, r3
   15cf4:	4b6e      	ldr	r3, [pc, #440]	; (15eb0 <process_ble_packet+0x44c>)
   15cf6:	4798      	blx	r3
			save_led_data();
   15cf8:	4b57      	ldr	r3, [pc, #348]	; (15e58 <process_ble_packet+0x3f4>)
   15cfa:	4798      	blx	r3
			break;
   15cfc:	f000 ff97 	bl	16c2e <process_ble_packet+0x11ca>
		case RPM_Values:
			LIGHTS_ON = 1;
   15d00:	4b54      	ldr	r3, [pc, #336]	; (15e54 <process_ble_packet+0x3f0>)
   15d02:	2201      	movs	r2, #1
   15d04:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_RPM_CYCLE;
   15d06:	4b55      	ldr	r3, [pc, #340]	; (15e5c <process_ble_packet+0x3f8>)
   15d08:	2204      	movs	r2, #4
   15d0a:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15d0c:	4b49      	ldr	r3, [pc, #292]	; (15e34 <process_ble_packet+0x3d0>)
   15d0e:	789b      	ldrb	r3, [r3, #2]
   15d10:	220f      	movs	r2, #15
   15d12:	4393      	bics	r3, r2
   15d14:	b2da      	uxtb	r2, r3
   15d16:	4b60      	ldr	r3, [pc, #384]	; (15e98 <process_ble_packet+0x434>)
   15d18:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15d1a:	4b5f      	ldr	r3, [pc, #380]	; (15e98 <process_ble_packet+0x434>)
   15d1c:	781b      	ldrb	r3, [r3, #0]
   15d1e:	111b      	asrs	r3, r3, #4
   15d20:	b2db      	uxtb	r3, r3
   15d22:	2201      	movs	r2, #1
   15d24:	4013      	ands	r3, r2
   15d26:	b2da      	uxtb	r2, r3
   15d28:	4b5c      	ldr	r3, [pc, #368]	; (15e9c <process_ble_packet+0x438>)
   15d2a:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15d2c:	4b5a      	ldr	r3, [pc, #360]	; (15e98 <process_ble_packet+0x434>)
   15d2e:	781b      	ldrb	r3, [r3, #0]
   15d30:	115b      	asrs	r3, r3, #5
   15d32:	b2db      	uxtb	r3, r3
   15d34:	2201      	movs	r2, #1
   15d36:	4013      	ands	r3, r2
   15d38:	b2da      	uxtb	r2, r3
   15d3a:	4b59      	ldr	r3, [pc, #356]	; (15ea0 <process_ble_packet+0x43c>)
   15d3c:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15d3e:	4b56      	ldr	r3, [pc, #344]	; (15e98 <process_ble_packet+0x434>)
   15d40:	781b      	ldrb	r3, [r3, #0]
   15d42:	119b      	asrs	r3, r3, #6
   15d44:	b2db      	uxtb	r3, r3
   15d46:	2201      	movs	r2, #1
   15d48:	4013      	ands	r3, r2
   15d4a:	b2da      	uxtb	r2, r3
   15d4c:	4b55      	ldr	r3, [pc, #340]	; (15ea4 <process_ble_packet+0x440>)
   15d4e:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15d50:	4b51      	ldr	r3, [pc, #324]	; (15e98 <process_ble_packet+0x434>)
   15d52:	781b      	ldrb	r3, [r3, #0]
   15d54:	09db      	lsrs	r3, r3, #7
   15d56:	b2da      	uxtb	r2, r3
   15d58:	4b53      	ldr	r3, [pc, #332]	; (15ea8 <process_ble_packet+0x444>)
   15d5a:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_RPM_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   15d5c:	4b35      	ldr	r3, [pc, #212]	; (15e34 <process_ble_packet+0x3d0>)
   15d5e:	78da      	ldrb	r2, [r3, #3]
   15d60:	4b54      	ldr	r3, [pc, #336]	; (15eb4 <process_ble_packet+0x450>)
   15d62:	0010      	movs	r0, r2
   15d64:	4798      	blx	r3
   15d66:	1c02      	adds	r2, r0, #0
   15d68:	4b53      	ldr	r3, [pc, #332]	; (15eb8 <process_ble_packet+0x454>)
   15d6a:	4954      	ldr	r1, [pc, #336]	; (15ebc <process_ble_packet+0x458>)
   15d6c:	1c10      	adds	r0, r2, #0
   15d6e:	4798      	blx	r3
   15d70:	1c03      	adds	r3, r0, #0
   15d72:	1c1a      	adds	r2, r3, #0
   15d74:	4b53      	ldr	r3, [pc, #332]	; (15ec4 <process_ble_packet+0x460>)
   15d76:	611a      	str	r2, [r3, #16]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[2])>>7)==0x1, MODE_ANALOG_RPM_CYCLE);
   15d78:	4b2e      	ldr	r3, [pc, #184]	; (15e34 <process_ble_packet+0x3d0>)
   15d7a:	791b      	ldrb	r3, [r3, #4]
   15d7c:	09db      	lsrs	r3, r3, #7
   15d7e:	b2db      	uxtb	r3, r3
   15d80:	3b01      	subs	r3, #1
   15d82:	425a      	negs	r2, r3
   15d84:	4153      	adcs	r3, r2
   15d86:	b2d9      	uxtb	r1, r3
   15d88:	4b48      	ldr	r3, [pc, #288]	; (15eac <process_ble_packet+0x448>)
   15d8a:	2204      	movs	r2, #4
   15d8c:	0018      	movs	r0, r3
   15d8e:	4b48      	ldr	r3, [pc, #288]	; (15eb0 <process_ble_packet+0x44c>)
   15d90:	4798      	blx	r3
			save_led_data();
   15d92:	4b31      	ldr	r3, [pc, #196]	; (15e58 <process_ble_packet+0x3f4>)
   15d94:	4798      	blx	r3
			break;
   15d96:	f000 ff4a 	bl	16c2e <process_ble_packet+0x11ca>
		case X_Accel_Values:
			LIGHTS_ON = 1;
   15d9a:	4b2e      	ldr	r3, [pc, #184]	; (15e54 <process_ble_packet+0x3f0>)
   15d9c:	2201      	movs	r2, #1
   15d9e:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_X_ACCEL;
   15da0:	4b2e      	ldr	r3, [pc, #184]	; (15e5c <process_ble_packet+0x3f8>)
   15da2:	2206      	movs	r2, #6
   15da4:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15da6:	4b23      	ldr	r3, [pc, #140]	; (15e34 <process_ble_packet+0x3d0>)
   15da8:	789b      	ldrb	r3, [r3, #2]
   15daa:	220f      	movs	r2, #15
   15dac:	4393      	bics	r3, r2
   15dae:	b2da      	uxtb	r2, r3
   15db0:	4b39      	ldr	r3, [pc, #228]	; (15e98 <process_ble_packet+0x434>)
   15db2:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15db4:	4b38      	ldr	r3, [pc, #224]	; (15e98 <process_ble_packet+0x434>)
   15db6:	781b      	ldrb	r3, [r3, #0]
   15db8:	111b      	asrs	r3, r3, #4
   15dba:	b2db      	uxtb	r3, r3
   15dbc:	2201      	movs	r2, #1
   15dbe:	4013      	ands	r3, r2
   15dc0:	b2da      	uxtb	r2, r3
   15dc2:	4b36      	ldr	r3, [pc, #216]	; (15e9c <process_ble_packet+0x438>)
   15dc4:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15dc6:	4b34      	ldr	r3, [pc, #208]	; (15e98 <process_ble_packet+0x434>)
   15dc8:	781b      	ldrb	r3, [r3, #0]
   15dca:	115b      	asrs	r3, r3, #5
   15dcc:	b2db      	uxtb	r3, r3
   15dce:	2201      	movs	r2, #1
   15dd0:	4013      	ands	r3, r2
   15dd2:	b2da      	uxtb	r2, r3
   15dd4:	4b32      	ldr	r3, [pc, #200]	; (15ea0 <process_ble_packet+0x43c>)
   15dd6:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15dd8:	4b2f      	ldr	r3, [pc, #188]	; (15e98 <process_ble_packet+0x434>)
   15dda:	781b      	ldrb	r3, [r3, #0]
   15ddc:	119b      	asrs	r3, r3, #6
   15dde:	b2db      	uxtb	r3, r3
   15de0:	2201      	movs	r2, #1
   15de2:	4013      	ands	r3, r2
   15de4:	b2da      	uxtb	r2, r3
   15de6:	4b2f      	ldr	r3, [pc, #188]	; (15ea4 <process_ble_packet+0x440>)
   15de8:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15dea:	4b2b      	ldr	r3, [pc, #172]	; (15e98 <process_ble_packet+0x434>)
   15dec:	781b      	ldrb	r3, [r3, #0]
   15dee:	09db      	lsrs	r3, r3, #7
   15df0:	b2da      	uxtb	r2, r3
   15df2:	4b2d      	ldr	r3, [pc, #180]	; (15ea8 <process_ble_packet+0x444>)
   15df4:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_X_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
   15df6:	4b0f      	ldr	r3, [pc, #60]	; (15e34 <process_ble_packet+0x3d0>)
   15df8:	78da      	ldrb	r2, [r3, #3]
   15dfa:	4b2e      	ldr	r3, [pc, #184]	; (15eb4 <process_ble_packet+0x450>)
   15dfc:	0010      	movs	r0, r2
   15dfe:	4798      	blx	r3
   15e00:	1c02      	adds	r2, r0, #0
   15e02:	4b2d      	ldr	r3, [pc, #180]	; (15eb8 <process_ble_packet+0x454>)
   15e04:	492d      	ldr	r1, [pc, #180]	; (15ebc <process_ble_packet+0x458>)
   15e06:	1c10      	adds	r0, r2, #0
   15e08:	4798      	blx	r3
   15e0a:	1c03      	adds	r3, r0, #0
   15e0c:	1c1a      	adds	r2, r3, #0
   15e0e:	4b2d      	ldr	r3, [pc, #180]	; (15ec4 <process_ble_packet+0x460>)
   15e10:	619a      	str	r2, [r3, #24]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[2])>>7)==0x1, MODE_ANALOG_X_ACCEL);
   15e12:	4b08      	ldr	r3, [pc, #32]	; (15e34 <process_ble_packet+0x3d0>)
   15e14:	791b      	ldrb	r3, [r3, #4]
   15e16:	09db      	lsrs	r3, r3, #7
   15e18:	b2db      	uxtb	r3, r3
   15e1a:	3b01      	subs	r3, #1
   15e1c:	425a      	negs	r2, r3
   15e1e:	4153      	adcs	r3, r2
   15e20:	b2d9      	uxtb	r1, r3
   15e22:	4b22      	ldr	r3, [pc, #136]	; (15eac <process_ble_packet+0x448>)
   15e24:	2206      	movs	r2, #6
   15e26:	0018      	movs	r0, r3
   15e28:	4b21      	ldr	r3, [pc, #132]	; (15eb0 <process_ble_packet+0x44c>)
   15e2a:	4798      	blx	r3
			save_led_data();
   15e2c:	4b0a      	ldr	r3, [pc, #40]	; (15e58 <process_ble_packet+0x3f4>)
   15e2e:	4798      	blx	r3
			break;
   15e30:	f000 fefd 	bl	16c2e <process_ble_packet+0x11ca>
   15e34:	20000700 	.word	0x20000700
   15e38:	0001ca04 	.word	0x0001ca04
   15e3c:	200000e2 	.word	0x200000e2
   15e40:	20000101 	.word	0x20000101
   15e44:	20000442 	.word	0x20000442
   15e48:	0000f76d 	.word	0x0000f76d
   15e4c:	00014369 	.word	0x00014369
   15e50:	20000444 	.word	0x20000444
   15e54:	200000d6 	.word	0x200000d6
   15e58:	000138d1 	.word	0x000138d1
   15e5c:	2000003c 	.word	0x2000003c
   15e60:	20000445 	.word	0x20000445
   15e64:	20000446 	.word	0x20000446
   15e68:	20000447 	.word	0x20000447
   15e6c:	20000448 	.word	0x20000448
   15e70:	20000449 	.word	0x20000449
   15e74:	2000044a 	.word	0x2000044a
   15e78:	00009531 	.word	0x00009531
   15e7c:	200003eb 	.word	0x200003eb
   15e80:	2000044c 	.word	0x2000044c
   15e84:	2000044d 	.word	0x2000044d
   15e88:	20000100 	.word	0x20000100
   15e8c:	00014659 	.word	0x00014659
   15e90:	200000f9 	.word	0x200000f9
   15e94:	200003e1 	.word	0x200003e1
   15e98:	200003b0 	.word	0x200003b0
   15e9c:	200000d5 	.word	0x200000d5
   15ea0:	200003ad 	.word	0x200003ad
   15ea4:	200003ae 	.word	0x200003ae
   15ea8:	200003af 	.word	0x200003af
   15eac:	200003a8 	.word	0x200003a8
   15eb0:	0000f155 	.word	0x0000f155
   15eb4:	0001a379 	.word	0x0001a379
   15eb8:	00019941 	.word	0x00019941
   15ebc:	42c80000 	.word	0x42c80000
   15ec0:	20000070 	.word	0x20000070
   15ec4:	2000004c 	.word	0x2000004c
		case Y_Accel_Values:
			LIGHTS_ON = 1;
   15ec8:	4bd0      	ldr	r3, [pc, #832]	; (1620c <process_ble_packet+0x7a8>)
   15eca:	2201      	movs	r2, #1
   15ecc:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_Y_ACCEL;
   15ece:	4bd0      	ldr	r3, [pc, #832]	; (16210 <process_ble_packet+0x7ac>)
   15ed0:	2207      	movs	r2, #7
   15ed2:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15ed4:	4bcf      	ldr	r3, [pc, #828]	; (16214 <process_ble_packet+0x7b0>)
   15ed6:	789b      	ldrb	r3, [r3, #2]
   15ed8:	220f      	movs	r2, #15
   15eda:	4393      	bics	r3, r2
   15edc:	b2da      	uxtb	r2, r3
   15ede:	4bce      	ldr	r3, [pc, #824]	; (16218 <process_ble_packet+0x7b4>)
   15ee0:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15ee2:	4bcd      	ldr	r3, [pc, #820]	; (16218 <process_ble_packet+0x7b4>)
   15ee4:	781b      	ldrb	r3, [r3, #0]
   15ee6:	111b      	asrs	r3, r3, #4
   15ee8:	b2db      	uxtb	r3, r3
   15eea:	2201      	movs	r2, #1
   15eec:	4013      	ands	r3, r2
   15eee:	b2da      	uxtb	r2, r3
   15ef0:	4bca      	ldr	r3, [pc, #808]	; (1621c <process_ble_packet+0x7b8>)
   15ef2:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15ef4:	4bc8      	ldr	r3, [pc, #800]	; (16218 <process_ble_packet+0x7b4>)
   15ef6:	781b      	ldrb	r3, [r3, #0]
   15ef8:	115b      	asrs	r3, r3, #5
   15efa:	b2db      	uxtb	r3, r3
   15efc:	2201      	movs	r2, #1
   15efe:	4013      	ands	r3, r2
   15f00:	b2da      	uxtb	r2, r3
   15f02:	4bc7      	ldr	r3, [pc, #796]	; (16220 <process_ble_packet+0x7bc>)
   15f04:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15f06:	4bc4      	ldr	r3, [pc, #784]	; (16218 <process_ble_packet+0x7b4>)
   15f08:	781b      	ldrb	r3, [r3, #0]
   15f0a:	119b      	asrs	r3, r3, #6
   15f0c:	b2db      	uxtb	r3, r3
   15f0e:	2201      	movs	r2, #1
   15f10:	4013      	ands	r3, r2
   15f12:	b2da      	uxtb	r2, r3
   15f14:	4bc3      	ldr	r3, [pc, #780]	; (16224 <process_ble_packet+0x7c0>)
   15f16:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15f18:	4bbf      	ldr	r3, [pc, #764]	; (16218 <process_ble_packet+0x7b4>)
   15f1a:	781b      	ldrb	r3, [r3, #0]
   15f1c:	09db      	lsrs	r3, r3, #7
   15f1e:	b2da      	uxtb	r2, r3
   15f20:	4bc1      	ldr	r3, [pc, #772]	; (16228 <process_ble_packet+0x7c4>)
   15f22:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_ANALOG_Y_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
   15f24:	4bbb      	ldr	r3, [pc, #748]	; (16214 <process_ble_packet+0x7b0>)
   15f26:	78da      	ldrb	r2, [r3, #3]
   15f28:	4bc0      	ldr	r3, [pc, #768]	; (1622c <process_ble_packet+0x7c8>)
   15f2a:	0010      	movs	r0, r2
   15f2c:	4798      	blx	r3
   15f2e:	1c02      	adds	r2, r0, #0
   15f30:	4bbf      	ldr	r3, [pc, #764]	; (16230 <process_ble_packet+0x7cc>)
   15f32:	49c0      	ldr	r1, [pc, #768]	; (16234 <process_ble_packet+0x7d0>)
   15f34:	1c10      	adds	r0, r2, #0
   15f36:	4798      	blx	r3
   15f38:	1c03      	adds	r3, r0, #0
   15f3a:	1c1a      	adds	r2, r3, #0
   15f3c:	4bbe      	ldr	r3, [pc, #760]	; (16238 <process_ble_packet+0x7d4>)
   15f3e:	61da      	str	r2, [r3, #28]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[2])>>7)==0x1, MODE_ANALOG_Y_ACCEL);
   15f40:	4bb4      	ldr	r3, [pc, #720]	; (16214 <process_ble_packet+0x7b0>)
   15f42:	791b      	ldrb	r3, [r3, #4]
   15f44:	09db      	lsrs	r3, r3, #7
   15f46:	b2db      	uxtb	r3, r3
   15f48:	3b01      	subs	r3, #1
   15f4a:	425a      	negs	r2, r3
   15f4c:	4153      	adcs	r3, r2
   15f4e:	b2d9      	uxtb	r1, r3
   15f50:	4bba      	ldr	r3, [pc, #744]	; (1623c <process_ble_packet+0x7d8>)
   15f52:	2207      	movs	r2, #7
   15f54:	0018      	movs	r0, r3
   15f56:	4bba      	ldr	r3, [pc, #744]	; (16240 <process_ble_packet+0x7dc>)
   15f58:	4798      	blx	r3
			save_led_data();
   15f5a:	4bba      	ldr	r3, [pc, #744]	; (16244 <process_ble_packet+0x7e0>)
   15f5c:	4798      	blx	r3
			break;
   15f5e:	f000 fe66 	bl	16c2e <process_ble_packet+0x11ca>
		case Apply_Orientation:
			ORIENTATION[0] = ble_recieve_packet.payload[0];
   15f62:	4bac      	ldr	r3, [pc, #688]	; (16214 <process_ble_packet+0x7b0>)
   15f64:	789a      	ldrb	r2, [r3, #2]
   15f66:	4bb8      	ldr	r3, [pc, #736]	; (16248 <process_ble_packet+0x7e4>)
   15f68:	701a      	strb	r2, [r3, #0]
			ORIENTATION[1] = ble_recieve_packet.payload[1];
   15f6a:	4baa      	ldr	r3, [pc, #680]	; (16214 <process_ble_packet+0x7b0>)
   15f6c:	78da      	ldrb	r2, [r3, #3]
   15f6e:	4bb6      	ldr	r3, [pc, #728]	; (16248 <process_ble_packet+0x7e4>)
   15f70:	705a      	strb	r2, [r3, #1]
			save_orientation_controls_remote_esc_lights();
   15f72:	4bb6      	ldr	r3, [pc, #728]	; (1624c <process_ble_packet+0x7e8>)
   15f74:	4798      	blx	r3
			break;
   15f76:	f000 fe5a 	bl	16c2e <process_ble_packet+0x11ca>
		case Apply_Remote_Config:
			remote_type = (ble_recieve_packet.payload[0]&0x0F0)>>4;
   15f7a:	4ba6      	ldr	r3, [pc, #664]	; (16214 <process_ble_packet+0x7b0>)
   15f7c:	789b      	ldrb	r3, [r3, #2]
   15f7e:	091b      	lsrs	r3, r3, #4
   15f80:	b2da      	uxtb	r2, r3
   15f82:	4bb3      	ldr	r3, [pc, #716]	; (16250 <process_ble_packet+0x7ec>)
   15f84:	701a      	strb	r2, [r3, #0]
			button_type = (ble_recieve_packet.payload[0]&0x0F);
   15f86:	4ba3      	ldr	r3, [pc, #652]	; (16214 <process_ble_packet+0x7b0>)
   15f88:	789b      	ldrb	r3, [r3, #2]
   15f8a:	220f      	movs	r2, #15
   15f8c:	4013      	ands	r3, r2
   15f8e:	b2da      	uxtb	r2, r3
   15f90:	4bb0      	ldr	r3, [pc, #704]	; (16254 <process_ble_packet+0x7f0>)
   15f92:	701a      	strb	r2, [r3, #0]
			deadzone = ble_recieve_packet.payload[1];
   15f94:	4b9f      	ldr	r3, [pc, #636]	; (16214 <process_ble_packet+0x7b0>)
   15f96:	78da      	ldrb	r2, [r3, #3]
   15f98:	4baf      	ldr	r3, [pc, #700]	; (16258 <process_ble_packet+0x7f4>)
   15f9a:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   15f9c:	4bab      	ldr	r3, [pc, #684]	; (1624c <process_ble_packet+0x7e8>)
   15f9e:	4798      	blx	r3
			break;
   15fa0:	f000 fe45 	bl	16c2e <process_ble_packet+0x11ca>
		case Apply_ESC_Config:
			esc_fw = ble_recieve_packet.payload[0];
   15fa4:	4b9b      	ldr	r3, [pc, #620]	; (16214 <process_ble_packet+0x7b0>)
   15fa6:	789a      	ldrb	r2, [r3, #2]
   15fa8:	4bac      	ldr	r3, [pc, #688]	; (1625c <process_ble_packet+0x7f8>)
   15faa:	701a      	strb	r2, [r3, #0]
			esc_comms = (ble_recieve_packet.payload[1]&0x0F0)>>4;
   15fac:	4b99      	ldr	r3, [pc, #612]	; (16214 <process_ble_packet+0x7b0>)
   15fae:	78db      	ldrb	r3, [r3, #3]
   15fb0:	091b      	lsrs	r3, r3, #4
   15fb2:	b2da      	uxtb	r2, r3
   15fb4:	4baa      	ldr	r3, [pc, #680]	; (16260 <process_ble_packet+0x7fc>)
   15fb6:	701a      	strb	r2, [r3, #0]
			UART_baud = (ble_recieve_packet.payload[1]&0x0F);
   15fb8:	4b96      	ldr	r3, [pc, #600]	; (16214 <process_ble_packet+0x7b0>)
   15fba:	78db      	ldrb	r3, [r3, #3]
   15fbc:	220f      	movs	r2, #15
   15fbe:	4013      	ands	r3, r2
   15fc0:	b2da      	uxtb	r2, r3
   15fc2:	4ba8      	ldr	r3, [pc, #672]	; (16264 <process_ble_packet+0x800>)
   15fc4:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   15fc6:	4ba1      	ldr	r3, [pc, #644]	; (1624c <process_ble_packet+0x7e8>)
   15fc8:	4798      	blx	r3
			configured_comms = esc_comms;
   15fca:	4ba5      	ldr	r3, [pc, #660]	; (16260 <process_ble_packet+0x7fc>)
   15fcc:	781a      	ldrb	r2, [r3, #0]
   15fce:	4ba6      	ldr	r3, [pc, #664]	; (16268 <process_ble_packet+0x804>)
   15fd0:	701a      	strb	r2, [r3, #0]
			break;
   15fd2:	f000 fe2c 	bl	16c2e <process_ble_packet+0x11ca>
		case Apply_Lights_Config:
			RGB_led_type = (ble_recieve_packet.payload[0]&0x0F0)>>4;
   15fd6:	4b8f      	ldr	r3, [pc, #572]	; (16214 <process_ble_packet+0x7b0>)
   15fd8:	789b      	ldrb	r3, [r3, #2]
   15fda:	091b      	lsrs	r3, r3, #4
   15fdc:	b2da      	uxtb	r2, r3
   15fde:	4ba3      	ldr	r3, [pc, #652]	; (1626c <process_ble_packet+0x808>)
   15fe0:	701a      	strb	r2, [r3, #0]
			brake_light_mode = (ble_recieve_packet.payload[0]&0x0F);
   15fe2:	4b8c      	ldr	r3, [pc, #560]	; (16214 <process_ble_packet+0x7b0>)
   15fe4:	789b      	ldrb	r3, [r3, #2]
   15fe6:	220f      	movs	r2, #15
   15fe8:	4013      	ands	r3, r2
   15fea:	b2da      	uxtb	r2, r3
   15fec:	4ba0      	ldr	r3, [pc, #640]	; (16270 <process_ble_packet+0x80c>)
   15fee:	701a      	strb	r2, [r3, #0]
			deadzone = (ble_recieve_packet.payload[1]);
   15ff0:	4b88      	ldr	r3, [pc, #544]	; (16214 <process_ble_packet+0x7b0>)
   15ff2:	78da      	ldrb	r2, [r3, #3]
   15ff4:	4b98      	ldr	r3, [pc, #608]	; (16258 <process_ble_packet+0x7f4>)
   15ff6:	701a      	strb	r2, [r3, #0]
			led_num = (ble_recieve_packet.payload[2]);
   15ff8:	4b86      	ldr	r3, [pc, #536]	; (16214 <process_ble_packet+0x7b0>)
   15ffa:	791a      	ldrb	r2, [r3, #4]
   15ffc:	4b9d      	ldr	r3, [pc, #628]	; (16274 <process_ble_packet+0x810>)
   15ffe:	701a      	strb	r2, [r3, #0]
			SYNC_RGB = (ble_recieve_packet.payload[3]&0x80)==0x80;
   16000:	4b84      	ldr	r3, [pc, #528]	; (16214 <process_ble_packet+0x7b0>)
   16002:	795b      	ldrb	r3, [r3, #5]
   16004:	b25b      	sxtb	r3, r3
   16006:	b2db      	uxtb	r3, r3
   16008:	09db      	lsrs	r3, r3, #7
   1600a:	b2da      	uxtb	r2, r3
   1600c:	4b9a      	ldr	r3, [pc, #616]	; (16278 <process_ble_packet+0x814>)
   1600e:	701a      	strb	r2, [r3, #0]
			BRAKE_ALWAYS_ON = (ble_recieve_packet.payload[3]&0x40)==0x40;
   16010:	4b80      	ldr	r3, [pc, #512]	; (16214 <process_ble_packet+0x7b0>)
   16012:	795b      	ldrb	r3, [r3, #5]
   16014:	001a      	movs	r2, r3
   16016:	2340      	movs	r3, #64	; 0x40
   16018:	4013      	ands	r3, r2
   1601a:	1e5a      	subs	r2, r3, #1
   1601c:	4193      	sbcs	r3, r2
   1601e:	b2da      	uxtb	r2, r3
   16020:	4b96      	ldr	r3, [pc, #600]	; (1627c <process_ble_packet+0x818>)
   16022:	701a      	strb	r2, [r3, #0]
			DEFAULT_STATE = (ble_recieve_packet.payload[3]&0x20)==0x20;
   16024:	4b7b      	ldr	r3, [pc, #492]	; (16214 <process_ble_packet+0x7b0>)
   16026:	795b      	ldrb	r3, [r3, #5]
   16028:	001a      	movs	r2, r3
   1602a:	2320      	movs	r3, #32
   1602c:	4013      	ands	r3, r2
   1602e:	1e5a      	subs	r2, r3, #1
   16030:	4193      	sbcs	r3, r2
   16032:	b2da      	uxtb	r2, r3
   16034:	4b92      	ldr	r3, [pc, #584]	; (16280 <process_ble_packet+0x81c>)
   16036:	701a      	strb	r2, [r3, #0]
			BRIGHTS_ENABLED = (ble_recieve_packet.payload[3]&0x10)==0x10;
   16038:	4b76      	ldr	r3, [pc, #472]	; (16214 <process_ble_packet+0x7b0>)
   1603a:	795b      	ldrb	r3, [r3, #5]
   1603c:	001a      	movs	r2, r3
   1603e:	2310      	movs	r3, #16
   16040:	4013      	ands	r3, r2
   16042:	1e5a      	subs	r2, r3, #1
   16044:	4193      	sbcs	r3, r2
   16046:	b2da      	uxtb	r2, r3
   16048:	4b8e      	ldr	r3, [pc, #568]	; (16284 <process_ble_packet+0x820>)
   1604a:	701a      	strb	r2, [r3, #0]
			STANDBY_ENABLED = (ble_recieve_packet.payload[3]&0x08)==0x08;
   1604c:	4b71      	ldr	r3, [pc, #452]	; (16214 <process_ble_packet+0x7b0>)
   1604e:	795b      	ldrb	r3, [r3, #5]
   16050:	001a      	movs	r2, r3
   16052:	2308      	movs	r3, #8
   16054:	4013      	ands	r3, r2
   16056:	1e5a      	subs	r2, r3, #1
   16058:	4193      	sbcs	r3, r2
   1605a:	b2da      	uxtb	r2, r3
   1605c:	4b8a      	ldr	r3, [pc, #552]	; (16288 <process_ble_packet+0x824>)
   1605e:	701a      	strb	r2, [r3, #0]
			SHUFFLE_ENABLED = (ble_recieve_packet.payload[3]&0x04)==0x04;
   16060:	4b6c      	ldr	r3, [pc, #432]	; (16214 <process_ble_packet+0x7b0>)
   16062:	795b      	ldrb	r3, [r3, #5]
   16064:	001a      	movs	r2, r3
   16066:	2304      	movs	r3, #4
   16068:	4013      	ands	r3, r2
   1606a:	1e5a      	subs	r2, r3, #1
   1606c:	4193      	sbcs	r3, r2
   1606e:	b2da      	uxtb	r2, r3
   16070:	4b86      	ldr	r3, [pc, #536]	; (1628c <process_ble_packet+0x828>)
   16072:	701a      	strb	r2, [r3, #0]
			lowbeam_level = (ble_recieve_packet.payload[4]);
   16074:	4b67      	ldr	r3, [pc, #412]	; (16214 <process_ble_packet+0x7b0>)
   16076:	799a      	ldrb	r2, [r3, #6]
   16078:	4b85      	ldr	r3, [pc, #532]	; (16290 <process_ble_packet+0x82c>)
   1607a:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   1607c:	4b73      	ldr	r3, [pc, #460]	; (1624c <process_ble_packet+0x7e8>)
   1607e:	4798      	blx	r3
			if(configured_RGB_led_type != RGB_led_type){
   16080:	4b84      	ldr	r3, [pc, #528]	; (16294 <process_ble_packet+0x830>)
   16082:	781a      	ldrb	r2, [r3, #0]
   16084:	4b79      	ldr	r3, [pc, #484]	; (1626c <process_ble_packet+0x808>)
   16086:	781b      	ldrb	r3, [r3, #0]
   16088:	429a      	cmp	r2, r3
   1608a:	d101      	bne.n	16090 <process_ble_packet+0x62c>
   1608c:	f000 fdce 	bl	16c2c <process_ble_packet+0x11c8>
				ERROR_LEDs(ERROR_PURPLE, SHORT_ERROR);
   16090:	2100      	movs	r1, #0
   16092:	2005      	movs	r0, #5
   16094:	4b80      	ldr	r3, [pc, #512]	; (16298 <process_ble_packet+0x834>)
   16096:	4798      	blx	r3
				NVIC_SystemReset();
   16098:	4b80      	ldr	r3, [pc, #512]	; (1629c <process_ble_packet+0x838>)
   1609a:	4798      	blx	r3
			}
			break;
   1609c:	f000 fdc6 	bl	16c2c <process_ble_packet+0x11c8>
		case Color_Cycle_Values:
			LIGHTS_ON = 1;
   160a0:	4b5a      	ldr	r3, [pc, #360]	; (1620c <process_ble_packet+0x7a8>)
   160a2:	2201      	movs	r2, #1
   160a4:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_COLOR_CYCLE;
   160a6:	4b5a      	ldr	r3, [pc, #360]	; (16210 <process_ble_packet+0x7ac>)
   160a8:	2201      	movs	r2, #1
   160aa:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   160ac:	4b59      	ldr	r3, [pc, #356]	; (16214 <process_ble_packet+0x7b0>)
   160ae:	789b      	ldrb	r3, [r3, #2]
   160b0:	220f      	movs	r2, #15
   160b2:	4393      	bics	r3, r2
   160b4:	b2da      	uxtb	r2, r3
   160b6:	4b58      	ldr	r3, [pc, #352]	; (16218 <process_ble_packet+0x7b4>)
   160b8:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   160ba:	4b57      	ldr	r3, [pc, #348]	; (16218 <process_ble_packet+0x7b4>)
   160bc:	781b      	ldrb	r3, [r3, #0]
   160be:	111b      	asrs	r3, r3, #4
   160c0:	b2db      	uxtb	r3, r3
   160c2:	2201      	movs	r2, #1
   160c4:	4013      	ands	r3, r2
   160c6:	b2da      	uxtb	r2, r3
   160c8:	4b54      	ldr	r3, [pc, #336]	; (1621c <process_ble_packet+0x7b8>)
   160ca:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   160cc:	4b52      	ldr	r3, [pc, #328]	; (16218 <process_ble_packet+0x7b4>)
   160ce:	781b      	ldrb	r3, [r3, #0]
   160d0:	115b      	asrs	r3, r3, #5
   160d2:	b2db      	uxtb	r3, r3
   160d4:	2201      	movs	r2, #1
   160d6:	4013      	ands	r3, r2
   160d8:	b2da      	uxtb	r2, r3
   160da:	4b51      	ldr	r3, [pc, #324]	; (16220 <process_ble_packet+0x7bc>)
   160dc:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   160de:	4b4e      	ldr	r3, [pc, #312]	; (16218 <process_ble_packet+0x7b4>)
   160e0:	781b      	ldrb	r3, [r3, #0]
   160e2:	119b      	asrs	r3, r3, #6
   160e4:	b2db      	uxtb	r3, r3
   160e6:	2201      	movs	r2, #1
   160e8:	4013      	ands	r3, r2
   160ea:	b2da      	uxtb	r2, r3
   160ec:	4b4d      	ldr	r3, [pc, #308]	; (16224 <process_ble_packet+0x7c0>)
   160ee:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   160f0:	4b49      	ldr	r3, [pc, #292]	; (16218 <process_ble_packet+0x7b4>)
   160f2:	781b      	ldrb	r3, [r3, #0]
   160f4:	09db      	lsrs	r3, r3, #7
   160f6:	b2da      	uxtb	r2, r3
   160f8:	4b4b      	ldr	r3, [pc, #300]	; (16228 <process_ble_packet+0x7c4>)
   160fa:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   160fc:	4b45      	ldr	r3, [pc, #276]	; (16214 <process_ble_packet+0x7b0>)
   160fe:	78da      	ldrb	r2, [r3, #3]
   16100:	4b4a      	ldr	r3, [pc, #296]	; (1622c <process_ble_packet+0x7c8>)
   16102:	0010      	movs	r0, r2
   16104:	4798      	blx	r3
   16106:	1c02      	adds	r2, r0, #0
   16108:	4b49      	ldr	r3, [pc, #292]	; (16230 <process_ble_packet+0x7cc>)
   1610a:	494a      	ldr	r1, [pc, #296]	; (16234 <process_ble_packet+0x7d0>)
   1610c:	1c10      	adds	r0, r2, #0
   1610e:	4798      	blx	r3
   16110:	1c03      	adds	r3, r0, #0
   16112:	1c1a      	adds	r2, r3, #0
   16114:	4b62      	ldr	r3, [pc, #392]	; (162a0 <process_ble_packet+0x83c>)
   16116:	605a      	str	r2, [r3, #4]
			Brightness[MODE_ANALOG_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[2]))/100;
   16118:	4b3e      	ldr	r3, [pc, #248]	; (16214 <process_ble_packet+0x7b0>)
   1611a:	791a      	ldrb	r2, [r3, #4]
   1611c:	4b43      	ldr	r3, [pc, #268]	; (1622c <process_ble_packet+0x7c8>)
   1611e:	0010      	movs	r0, r2
   16120:	4798      	blx	r3
   16122:	1c02      	adds	r2, r0, #0
   16124:	4b42      	ldr	r3, [pc, #264]	; (16230 <process_ble_packet+0x7cc>)
   16126:	4943      	ldr	r1, [pc, #268]	; (16234 <process_ble_packet+0x7d0>)
   16128:	1c10      	adds	r0, r2, #0
   1612a:	4798      	blx	r3
   1612c:	1c03      	adds	r3, r0, #0
   1612e:	1c1a      	adds	r2, r3, #0
   16130:	4b41      	ldr	r3, [pc, #260]	; (16238 <process_ble_packet+0x7d4>)
   16132:	605a      	str	r2, [r3, #4]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[3])>>7)==0x1, MODE_ANALOG_COLOR_CYCLE);
   16134:	4b37      	ldr	r3, [pc, #220]	; (16214 <process_ble_packet+0x7b0>)
   16136:	795b      	ldrb	r3, [r3, #5]
   16138:	09db      	lsrs	r3, r3, #7
   1613a:	b2db      	uxtb	r3, r3
   1613c:	3b01      	subs	r3, #1
   1613e:	425a      	negs	r2, r3
   16140:	4153      	adcs	r3, r2
   16142:	b2d9      	uxtb	r1, r3
   16144:	4b3d      	ldr	r3, [pc, #244]	; (1623c <process_ble_packet+0x7d8>)
   16146:	2201      	movs	r2, #1
   16148:	0018      	movs	r0, r3
   1614a:	4b3d      	ldr	r3, [pc, #244]	; (16240 <process_ble_packet+0x7dc>)
   1614c:	4798      	blx	r3
			save_led_data();
   1614e:	4b3d      	ldr	r3, [pc, #244]	; (16244 <process_ble_packet+0x7e0>)
   16150:	4798      	blx	r3
			break;
   16152:	f000 fd6c 	bl	16c2e <process_ble_packet+0x11ca>
		case Throttle_Values:
			LIGHTS_ON = 1;
   16156:	4b2d      	ldr	r3, [pc, #180]	; (1620c <process_ble_packet+0x7a8>)
   16158:	2201      	movs	r2, #1
   1615a:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_THROTTLE;
   1615c:	4b2c      	ldr	r3, [pc, #176]	; (16210 <process_ble_packet+0x7ac>)
   1615e:	2203      	movs	r2, #3
   16160:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   16162:	4b2c      	ldr	r3, [pc, #176]	; (16214 <process_ble_packet+0x7b0>)
   16164:	789b      	ldrb	r3, [r3, #2]
   16166:	220f      	movs	r2, #15
   16168:	4393      	bics	r3, r2
   1616a:	b2da      	uxtb	r2, r3
   1616c:	4b2a      	ldr	r3, [pc, #168]	; (16218 <process_ble_packet+0x7b4>)
   1616e:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   16170:	4b29      	ldr	r3, [pc, #164]	; (16218 <process_ble_packet+0x7b4>)
   16172:	781b      	ldrb	r3, [r3, #0]
   16174:	111b      	asrs	r3, r3, #4
   16176:	b2db      	uxtb	r3, r3
   16178:	2201      	movs	r2, #1
   1617a:	4013      	ands	r3, r2
   1617c:	b2da      	uxtb	r2, r3
   1617e:	4b27      	ldr	r3, [pc, #156]	; (1621c <process_ble_packet+0x7b8>)
   16180:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   16182:	4b25      	ldr	r3, [pc, #148]	; (16218 <process_ble_packet+0x7b4>)
   16184:	781b      	ldrb	r3, [r3, #0]
   16186:	115b      	asrs	r3, r3, #5
   16188:	b2db      	uxtb	r3, r3
   1618a:	2201      	movs	r2, #1
   1618c:	4013      	ands	r3, r2
   1618e:	b2da      	uxtb	r2, r3
   16190:	4b23      	ldr	r3, [pc, #140]	; (16220 <process_ble_packet+0x7bc>)
   16192:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   16194:	4b20      	ldr	r3, [pc, #128]	; (16218 <process_ble_packet+0x7b4>)
   16196:	781b      	ldrb	r3, [r3, #0]
   16198:	119b      	asrs	r3, r3, #6
   1619a:	b2db      	uxtb	r3, r3
   1619c:	2201      	movs	r2, #1
   1619e:	4013      	ands	r3, r2
   161a0:	b2da      	uxtb	r2, r3
   161a2:	4b20      	ldr	r3, [pc, #128]	; (16224 <process_ble_packet+0x7c0>)
   161a4:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   161a6:	4b1c      	ldr	r3, [pc, #112]	; (16218 <process_ble_packet+0x7b4>)
   161a8:	781b      	ldrb	r3, [r3, #0]
   161aa:	09db      	lsrs	r3, r3, #7
   161ac:	b2da      	uxtb	r2, r3
   161ae:	4b1e      	ldr	r3, [pc, #120]	; (16228 <process_ble_packet+0x7c4>)
   161b0:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_THROTTLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   161b2:	4b18      	ldr	r3, [pc, #96]	; (16214 <process_ble_packet+0x7b0>)
   161b4:	78da      	ldrb	r2, [r3, #3]
   161b6:	4b1d      	ldr	r3, [pc, #116]	; (1622c <process_ble_packet+0x7c8>)
   161b8:	0010      	movs	r0, r2
   161ba:	4798      	blx	r3
   161bc:	1c02      	adds	r2, r0, #0
   161be:	4b1c      	ldr	r3, [pc, #112]	; (16230 <process_ble_packet+0x7cc>)
   161c0:	491c      	ldr	r1, [pc, #112]	; (16234 <process_ble_packet+0x7d0>)
   161c2:	1c10      	adds	r0, r2, #0
   161c4:	4798      	blx	r3
   161c6:	1c03      	adds	r3, r0, #0
   161c8:	1c1a      	adds	r2, r3, #0
   161ca:	4b35      	ldr	r3, [pc, #212]	; (162a0 <process_ble_packet+0x83c>)
   161cc:	60da      	str	r2, [r3, #12]
			Brightness[MODE_ANALOG_THROTTLE] = ((float)(ble_recieve_packet.payload[2]))/100;
   161ce:	4b11      	ldr	r3, [pc, #68]	; (16214 <process_ble_packet+0x7b0>)
   161d0:	791a      	ldrb	r2, [r3, #4]
   161d2:	4b16      	ldr	r3, [pc, #88]	; (1622c <process_ble_packet+0x7c8>)
   161d4:	0010      	movs	r0, r2
   161d6:	4798      	blx	r3
   161d8:	1c02      	adds	r2, r0, #0
   161da:	4b15      	ldr	r3, [pc, #84]	; (16230 <process_ble_packet+0x7cc>)
   161dc:	4915      	ldr	r1, [pc, #84]	; (16234 <process_ble_packet+0x7d0>)
   161de:	1c10      	adds	r0, r2, #0
   161e0:	4798      	blx	r3
   161e2:	1c03      	adds	r3, r0, #0
   161e4:	1c1a      	adds	r2, r3, #0
   161e6:	4b14      	ldr	r3, [pc, #80]	; (16238 <process_ble_packet+0x7d4>)
   161e8:	60da      	str	r2, [r3, #12]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[3])>>7)==0x1, MODE_ANALOG_THROTTLE);
   161ea:	4b0a      	ldr	r3, [pc, #40]	; (16214 <process_ble_packet+0x7b0>)
   161ec:	795b      	ldrb	r3, [r3, #5]
   161ee:	09db      	lsrs	r3, r3, #7
   161f0:	b2db      	uxtb	r3, r3
   161f2:	3b01      	subs	r3, #1
   161f4:	425a      	negs	r2, r3
   161f6:	4153      	adcs	r3, r2
   161f8:	b2d9      	uxtb	r1, r3
   161fa:	4b10      	ldr	r3, [pc, #64]	; (1623c <process_ble_packet+0x7d8>)
   161fc:	2203      	movs	r2, #3
   161fe:	0018      	movs	r0, r3
   16200:	4b0f      	ldr	r3, [pc, #60]	; (16240 <process_ble_packet+0x7dc>)
   16202:	4798      	blx	r3
			save_led_data();
   16204:	4b0f      	ldr	r3, [pc, #60]	; (16244 <process_ble_packet+0x7e0>)
   16206:	4798      	blx	r3
			break;
   16208:	f000 fd11 	bl	16c2e <process_ble_packet+0x11ca>
   1620c:	200000d6 	.word	0x200000d6
   16210:	2000003c 	.word	0x2000003c
   16214:	20000700 	.word	0x20000700
   16218:	200003b0 	.word	0x200003b0
   1621c:	200000d5 	.word	0x200000d5
   16220:	200003ad 	.word	0x200003ad
   16224:	200003ae 	.word	0x200003ae
   16228:	200003af 	.word	0x200003af
   1622c:	0001a379 	.word	0x0001a379
   16230:	00019941 	.word	0x00019941
   16234:	42c80000 	.word	0x42c80000
   16238:	20000070 	.word	0x20000070
   1623c:	200003a8 	.word	0x200003a8
   16240:	0000f155 	.word	0x0000f155
   16244:	000138d1 	.word	0x000138d1
   16248:	20000008 	.word	0x20000008
   1624c:	00014659 	.word	0x00014659
   16250:	200003cc 	.word	0x200003cc
   16254:	200003cd 	.word	0x200003cd
   16258:	200000e4 	.word	0x200000e4
   1625c:	200000e3 	.word	0x200000e3
   16260:	200003ca 	.word	0x200003ca
   16264:	200003cb 	.word	0x200003cb
   16268:	2000043a 	.word	0x2000043a
   1626c:	20001a88 	.word	0x20001a88
   16270:	200003a2 	.word	0x200003a2
   16274:	200000e0 	.word	0x200000e0
   16278:	200000d2 	.word	0x200000d2
   1627c:	200000d3 	.word	0x200000d3
   16280:	200003a3 	.word	0x200003a3
   16284:	200003a4 	.word	0x200003a4
   16288:	200003a5 	.word	0x200003a5
   1628c:	200003a6 	.word	0x200003a6
   16290:	200000d4 	.word	0x200000d4
   16294:	200006c0 	.word	0x200006c0
   16298:	0000a789 	.word	0x0000a789
   1629c:	00009531 	.word	0x00009531
   162a0:	2000004c 	.word	0x2000004c
		case Static_Values:
			LIGHTS_ON = 1;
   162a4:	4bee      	ldr	r3, [pc, #952]	; (16660 <process_ble_packet+0xbfc>)
   162a6:	2201      	movs	r2, #1
   162a8:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_STATIC;
   162aa:	4bee      	ldr	r3, [pc, #952]	; (16664 <process_ble_packet+0xc00>)
   162ac:	2200      	movs	r2, #0
   162ae:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   162b0:	4bed      	ldr	r3, [pc, #948]	; (16668 <process_ble_packet+0xc04>)
   162b2:	789b      	ldrb	r3, [r3, #2]
   162b4:	220f      	movs	r2, #15
   162b6:	4393      	bics	r3, r2
   162b8:	b2da      	uxtb	r2, r3
   162ba:	4bec      	ldr	r3, [pc, #944]	; (1666c <process_ble_packet+0xc08>)
   162bc:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   162be:	4beb      	ldr	r3, [pc, #940]	; (1666c <process_ble_packet+0xc08>)
   162c0:	781b      	ldrb	r3, [r3, #0]
   162c2:	111b      	asrs	r3, r3, #4
   162c4:	b2db      	uxtb	r3, r3
   162c6:	2201      	movs	r2, #1
   162c8:	4013      	ands	r3, r2
   162ca:	b2da      	uxtb	r2, r3
   162cc:	4be8      	ldr	r3, [pc, #928]	; (16670 <process_ble_packet+0xc0c>)
   162ce:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   162d0:	4be6      	ldr	r3, [pc, #920]	; (1666c <process_ble_packet+0xc08>)
   162d2:	781b      	ldrb	r3, [r3, #0]
   162d4:	115b      	asrs	r3, r3, #5
   162d6:	b2db      	uxtb	r3, r3
   162d8:	2201      	movs	r2, #1
   162da:	4013      	ands	r3, r2
   162dc:	b2da      	uxtb	r2, r3
   162de:	4be5      	ldr	r3, [pc, #916]	; (16674 <process_ble_packet+0xc10>)
   162e0:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   162e2:	4be2      	ldr	r3, [pc, #904]	; (1666c <process_ble_packet+0xc08>)
   162e4:	781b      	ldrb	r3, [r3, #0]
   162e6:	119b      	asrs	r3, r3, #6
   162e8:	b2db      	uxtb	r3, r3
   162ea:	2201      	movs	r2, #1
   162ec:	4013      	ands	r3, r2
   162ee:	b2da      	uxtb	r2, r3
   162f0:	4be1      	ldr	r3, [pc, #900]	; (16678 <process_ble_packet+0xc14>)
   162f2:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   162f4:	4bdd      	ldr	r3, [pc, #884]	; (1666c <process_ble_packet+0xc08>)
   162f6:	781b      	ldrb	r3, [r3, #0]
   162f8:	09db      	lsrs	r3, r3, #7
   162fa:	b2da      	uxtb	r2, r3
   162fc:	4bdf      	ldr	r3, [pc, #892]	; (1667c <process_ble_packet+0xc18>)
   162fe:	701a      	strb	r2, [r3, #0]
			Static_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[1] * 257);
   16300:	4bd9      	ldr	r3, [pc, #868]	; (16668 <process_ble_packet+0xc04>)
   16302:	78da      	ldrb	r2, [r3, #3]
   16304:	4bde      	ldr	r3, [pc, #888]	; (16680 <process_ble_packet+0xc1c>)
   16306:	0010      	movs	r0, r2
   16308:	4798      	blx	r3
   1630a:	1c02      	adds	r2, r0, #0
   1630c:	4bdd      	ldr	r3, [pc, #884]	; (16684 <process_ble_packet+0xc20>)
   1630e:	49de      	ldr	r1, [pc, #888]	; (16688 <process_ble_packet+0xc24>)
   16310:	1c10      	adds	r0, r2, #0
   16312:	4798      	blx	r3
   16314:	1c03      	adds	r3, r0, #0
   16316:	1c1a      	adds	r2, r3, #0
   16318:	4bdc      	ldr	r3, [pc, #880]	; (1668c <process_ble_packet+0xc28>)
   1631a:	1c10      	adds	r0, r2, #0
   1631c:	4798      	blx	r3
   1631e:	0003      	movs	r3, r0
   16320:	b29a      	uxth	r2, r3
   16322:	4bdb      	ldr	r3, [pc, #876]	; (16690 <process_ble_packet+0xc2c>)
   16324:	801a      	strh	r2, [r3, #0]
			Static_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[2] * 257);
   16326:	4bd0      	ldr	r3, [pc, #832]	; (16668 <process_ble_packet+0xc04>)
   16328:	791a      	ldrb	r2, [r3, #4]
   1632a:	4bd5      	ldr	r3, [pc, #852]	; (16680 <process_ble_packet+0xc1c>)
   1632c:	0010      	movs	r0, r2
   1632e:	4798      	blx	r3
   16330:	1c02      	adds	r2, r0, #0
   16332:	4bd4      	ldr	r3, [pc, #848]	; (16684 <process_ble_packet+0xc20>)
   16334:	49d4      	ldr	r1, [pc, #848]	; (16688 <process_ble_packet+0xc24>)
   16336:	1c10      	adds	r0, r2, #0
   16338:	4798      	blx	r3
   1633a:	1c03      	adds	r3, r0, #0
   1633c:	1c1a      	adds	r2, r3, #0
   1633e:	4bd3      	ldr	r3, [pc, #844]	; (1668c <process_ble_packet+0xc28>)
   16340:	1c10      	adds	r0, r2, #0
   16342:	4798      	blx	r3
   16344:	0003      	movs	r3, r0
   16346:	b29a      	uxth	r2, r3
   16348:	4bd1      	ldr	r3, [pc, #836]	; (16690 <process_ble_packet+0xc2c>)
   1634a:	805a      	strh	r2, [r3, #2]
			Static_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
   1634c:	4bc6      	ldr	r3, [pc, #792]	; (16668 <process_ble_packet+0xc04>)
   1634e:	795a      	ldrb	r2, [r3, #5]
   16350:	4bcb      	ldr	r3, [pc, #812]	; (16680 <process_ble_packet+0xc1c>)
   16352:	0010      	movs	r0, r2
   16354:	4798      	blx	r3
   16356:	1c02      	adds	r2, r0, #0
   16358:	4bca      	ldr	r3, [pc, #808]	; (16684 <process_ble_packet+0xc20>)
   1635a:	49cb      	ldr	r1, [pc, #812]	; (16688 <process_ble_packet+0xc24>)
   1635c:	1c10      	adds	r0, r2, #0
   1635e:	4798      	blx	r3
   16360:	1c03      	adds	r3, r0, #0
   16362:	1c1a      	adds	r2, r3, #0
   16364:	4bc9      	ldr	r3, [pc, #804]	; (1668c <process_ble_packet+0xc28>)
   16366:	1c10      	adds	r0, r2, #0
   16368:	4798      	blx	r3
   1636a:	0003      	movs	r3, r0
   1636c:	b29a      	uxth	r2, r3
   1636e:	4bc8      	ldr	r3, [pc, #800]	; (16690 <process_ble_packet+0xc2c>)
   16370:	809a      	strh	r2, [r3, #4]
			Static_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
   16372:	4bbd      	ldr	r3, [pc, #756]	; (16668 <process_ble_packet+0xc04>)
   16374:	799a      	ldrb	r2, [r3, #6]
   16376:	4bc2      	ldr	r3, [pc, #776]	; (16680 <process_ble_packet+0xc1c>)
   16378:	0010      	movs	r0, r2
   1637a:	4798      	blx	r3
   1637c:	1c02      	adds	r2, r0, #0
   1637e:	4bc1      	ldr	r3, [pc, #772]	; (16684 <process_ble_packet+0xc20>)
   16380:	49c1      	ldr	r1, [pc, #772]	; (16688 <process_ble_packet+0xc24>)
   16382:	1c10      	adds	r0, r2, #0
   16384:	4798      	blx	r3
   16386:	1c03      	adds	r3, r0, #0
   16388:	1c1a      	adds	r2, r3, #0
   1638a:	4bc0      	ldr	r3, [pc, #768]	; (1668c <process_ble_packet+0xc28>)
   1638c:	1c10      	adds	r0, r2, #0
   1638e:	4798      	blx	r3
   16390:	0003      	movs	r3, r0
   16392:	b29a      	uxth	r2, r3
   16394:	4bbe      	ldr	r3, [pc, #760]	; (16690 <process_ble_packet+0xc2c>)
   16396:	80da      	strh	r2, [r3, #6]
			Static_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
   16398:	4bb3      	ldr	r3, [pc, #716]	; (16668 <process_ble_packet+0xc04>)
   1639a:	79da      	ldrb	r2, [r3, #7]
   1639c:	4bb8      	ldr	r3, [pc, #736]	; (16680 <process_ble_packet+0xc1c>)
   1639e:	0010      	movs	r0, r2
   163a0:	4798      	blx	r3
   163a2:	1c02      	adds	r2, r0, #0
   163a4:	4bb7      	ldr	r3, [pc, #732]	; (16684 <process_ble_packet+0xc20>)
   163a6:	49b8      	ldr	r1, [pc, #736]	; (16688 <process_ble_packet+0xc24>)
   163a8:	1c10      	adds	r0, r2, #0
   163aa:	4798      	blx	r3
   163ac:	1c03      	adds	r3, r0, #0
   163ae:	1c1a      	adds	r2, r3, #0
   163b0:	4bb6      	ldr	r3, [pc, #728]	; (1668c <process_ble_packet+0xc28>)
   163b2:	1c10      	adds	r0, r2, #0
   163b4:	4798      	blx	r3
   163b6:	0003      	movs	r3, r0
   163b8:	b29a      	uxth	r2, r3
   163ba:	4bb5      	ldr	r3, [pc, #724]	; (16690 <process_ble_packet+0xc2c>)
   163bc:	811a      	strh	r2, [r3, #8]
			Static_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
   163be:	4baa      	ldr	r3, [pc, #680]	; (16668 <process_ble_packet+0xc04>)
   163c0:	7a1a      	ldrb	r2, [r3, #8]
   163c2:	4baf      	ldr	r3, [pc, #700]	; (16680 <process_ble_packet+0xc1c>)
   163c4:	0010      	movs	r0, r2
   163c6:	4798      	blx	r3
   163c8:	1c02      	adds	r2, r0, #0
   163ca:	4bae      	ldr	r3, [pc, #696]	; (16684 <process_ble_packet+0xc20>)
   163cc:	49ae      	ldr	r1, [pc, #696]	; (16688 <process_ble_packet+0xc24>)
   163ce:	1c10      	adds	r0, r2, #0
   163d0:	4798      	blx	r3
   163d2:	1c03      	adds	r3, r0, #0
   163d4:	1c1a      	adds	r2, r3, #0
   163d6:	4bad      	ldr	r3, [pc, #692]	; (1668c <process_ble_packet+0xc28>)
   163d8:	1c10      	adds	r0, r2, #0
   163da:	4798      	blx	r3
   163dc:	0003      	movs	r3, r0
   163de:	b29a      	uxth	r2, r3
   163e0:	4bab      	ldr	r3, [pc, #684]	; (16690 <process_ble_packet+0xc2c>)
   163e2:	815a      	strh	r2, [r3, #10]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[7])>>7)==0x1, MODE_ANALOG_STATIC);
   163e4:	4ba0      	ldr	r3, [pc, #640]	; (16668 <process_ble_packet+0xc04>)
   163e6:	7a5b      	ldrb	r3, [r3, #9]
   163e8:	09db      	lsrs	r3, r3, #7
   163ea:	b2db      	uxtb	r3, r3
   163ec:	3b01      	subs	r3, #1
   163ee:	425a      	negs	r2, r3
   163f0:	4153      	adcs	r3, r2
   163f2:	b2d9      	uxtb	r1, r3
   163f4:	4ba7      	ldr	r3, [pc, #668]	; (16694 <process_ble_packet+0xc30>)
   163f6:	2200      	movs	r2, #0
   163f8:	0018      	movs	r0, r3
   163fa:	4ba7      	ldr	r3, [pc, #668]	; (16698 <process_ble_packet+0xc34>)
   163fc:	4798      	blx	r3
			save_led_data();
   163fe:	4ba7      	ldr	r3, [pc, #668]	; (1669c <process_ble_packet+0xc38>)
   16400:	4798      	blx	r3
			//save_orientation_controls_remote_esc_lights();
			break;
   16402:	f000 fc14 	bl	16c2e <process_ble_packet+0x11ca>
		case Apply_Control_Settings:
			AUX_ENABLED = (ble_recieve_packet.payload[0]&0x80)>>7;
   16406:	4b98      	ldr	r3, [pc, #608]	; (16668 <process_ble_packet+0xc04>)
   16408:	789b      	ldrb	r3, [r3, #2]
   1640a:	09db      	lsrs	r3, r3, #7
   1640c:	b2db      	uxtb	r3, r3
   1640e:	1e5a      	subs	r2, r3, #1
   16410:	4193      	sbcs	r3, r2
   16412:	b2da      	uxtb	r2, r3
   16414:	4ba2      	ldr	r3, [pc, #648]	; (166a0 <process_ble_packet+0xc3c>)
   16416:	701a      	strb	r2, [r3, #0]
			TURN_ENABLED = (ble_recieve_packet.payload[0]&0x40)>>6;
   16418:	4b93      	ldr	r3, [pc, #588]	; (16668 <process_ble_packet+0xc04>)
   1641a:	789b      	ldrb	r3, [r3, #2]
   1641c:	119b      	asrs	r3, r3, #6
   1641e:	2201      	movs	r2, #1
   16420:	4013      	ands	r3, r2
   16422:	1e5a      	subs	r2, r3, #1
   16424:	4193      	sbcs	r3, r2
   16426:	b2da      	uxtb	r2, r3
   16428:	4b9e      	ldr	r3, [pc, #632]	; (166a4 <process_ble_packet+0xc40>)
   1642a:	701a      	strb	r2, [r3, #0]
			auxControlType = (ble_recieve_packet.payload[0]&0x0F);
   1642c:	4b8e      	ldr	r3, [pc, #568]	; (16668 <process_ble_packet+0xc04>)
   1642e:	789b      	ldrb	r3, [r3, #2]
   16430:	220f      	movs	r2, #15
   16432:	4013      	ands	r3, r2
   16434:	b2da      	uxtb	r2, r3
   16436:	4b9c      	ldr	r3, [pc, #624]	; (166a8 <process_ble_packet+0xc44>)
   16438:	701a      	strb	r2, [r3, #0]
			auxTimedDuration = (ble_recieve_packet.payload[1]&0xFF);
   1643a:	4b8b      	ldr	r3, [pc, #556]	; (16668 <process_ble_packet+0xc04>)
   1643c:	78da      	ldrb	r2, [r3, #3]
   1643e:	4b9b      	ldr	r3, [pc, #620]	; (166ac <process_ble_packet+0xc48>)
   16440:	701a      	strb	r2, [r3, #0]
			single_aux_control = (ble_recieve_packet.payload[2]&0xF0)>>4;
   16442:	4b89      	ldr	r3, [pc, #548]	; (16668 <process_ble_packet+0xc04>)
   16444:	791b      	ldrb	r3, [r3, #4]
   16446:	091b      	lsrs	r3, r3, #4
   16448:	b2da      	uxtb	r2, r3
   1644a:	4b99      	ldr	r3, [pc, #612]	; (166b0 <process_ble_packet+0xc4c>)
   1644c:	701a      	strb	r2, [r3, #0]
			single_all_control = (ble_recieve_packet.payload[2]&0x0F);
   1644e:	4b86      	ldr	r3, [pc, #536]	; (16668 <process_ble_packet+0xc04>)
   16450:	791b      	ldrb	r3, [r3, #4]
   16452:	220f      	movs	r2, #15
   16454:	4013      	ands	r3, r2
   16456:	b2da      	uxtb	r2, r3
   16458:	4b96      	ldr	r3, [pc, #600]	; (166b4 <process_ble_packet+0xc50>)
   1645a:	701a      	strb	r2, [r3, #0]
			single_head_control = (ble_recieve_packet.payload[3]&0xF0)>>4;
   1645c:	4b82      	ldr	r3, [pc, #520]	; (16668 <process_ble_packet+0xc04>)
   1645e:	795b      	ldrb	r3, [r3, #5]
   16460:	091b      	lsrs	r3, r3, #4
   16462:	b2da      	uxtb	r2, r3
   16464:	4b94      	ldr	r3, [pc, #592]	; (166b8 <process_ble_packet+0xc54>)
   16466:	701a      	strb	r2, [r3, #0]
			single_side_control = (ble_recieve_packet.payload[3]&0x0F);
   16468:	4b7f      	ldr	r3, [pc, #508]	; (16668 <process_ble_packet+0xc04>)
   1646a:	795b      	ldrb	r3, [r3, #5]
   1646c:	220f      	movs	r2, #15
   1646e:	4013      	ands	r3, r2
   16470:	b2da      	uxtb	r2, r3
   16472:	4b92      	ldr	r3, [pc, #584]	; (166bc <process_ble_packet+0xc58>)
   16474:	701a      	strb	r2, [r3, #0]
			single_down_control = (ble_recieve_packet.payload[4]&0xF0)>>4;
   16476:	4b7c      	ldr	r3, [pc, #496]	; (16668 <process_ble_packet+0xc04>)
   16478:	799b      	ldrb	r3, [r3, #6]
   1647a:	091b      	lsrs	r3, r3, #4
   1647c:	b2da      	uxtb	r2, r3
   1647e:	4b90      	ldr	r3, [pc, #576]	; (166c0 <process_ble_packet+0xc5c>)
   16480:	701a      	strb	r2, [r3, #0]
			single_up_control = (ble_recieve_packet.payload[4]&0x0F);
   16482:	4b79      	ldr	r3, [pc, #484]	; (16668 <process_ble_packet+0xc04>)
   16484:	799b      	ldrb	r3, [r3, #6]
   16486:	220f      	movs	r2, #15
   16488:	4013      	ands	r3, r2
   1648a:	b2da      	uxtb	r2, r3
   1648c:	4b8d      	ldr	r3, [pc, #564]	; (166c4 <process_ble_packet+0xc60>)
   1648e:	701a      	strb	r2, [r3, #0]
			single_brights_control = (ble_recieve_packet.payload[5]&0x0F);
   16490:	4b75      	ldr	r3, [pc, #468]	; (16668 <process_ble_packet+0xc04>)
   16492:	79db      	ldrb	r3, [r3, #7]
   16494:	220f      	movs	r2, #15
   16496:	4013      	ands	r3, r2
   16498:	b2da      	uxtb	r2, r3
   1649a:	4b8b      	ldr	r3, [pc, #556]	; (166c8 <process_ble_packet+0xc64>)
   1649c:	701a      	strb	r2, [r3, #0]
			dual_all_control = (ble_recieve_packet.payload[5]&0x0F);
			dual_head_control = (ble_recieve_packet.payload[6]&0xF0)>>4;
			dual_side_control = (ble_recieve_packet.payload[6]&0x0F);
			dual_down_control = (ble_recieve_packet.payload[7]&0xF0)>>4;
			dual_up_control = (ble_recieve_packet.payload[7]&0x0F);*/
			save_orientation_controls_remote_esc_lights();
   1649e:	4b8b      	ldr	r3, [pc, #556]	; (166cc <process_ble_packet+0xc68>)
   164a0:	4798      	blx	r3
			break;
   164a2:	e3c4      	b.n	16c2e <process_ble_packet+0x11ca>
		case Custom_Values:
			LIGHTS_ON = 1;
   164a4:	4b6e      	ldr	r3, [pc, #440]	; (16660 <process_ble_packet+0xbfc>)
   164a6:	2201      	movs	r2, #1
   164a8:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_CUSTOM;
   164aa:	4b6e      	ldr	r3, [pc, #440]	; (16664 <process_ble_packet+0xc00>)
   164ac:	2208      	movs	r2, #8
   164ae:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   164b0:	4b6d      	ldr	r3, [pc, #436]	; (16668 <process_ble_packet+0xc04>)
   164b2:	789b      	ldrb	r3, [r3, #2]
   164b4:	220f      	movs	r2, #15
   164b6:	4393      	bics	r3, r2
   164b8:	b2da      	uxtb	r2, r3
   164ba:	4b6c      	ldr	r3, [pc, #432]	; (1666c <process_ble_packet+0xc08>)
   164bc:	701a      	strb	r2, [r3, #0]
			//RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   164be:	4b6b      	ldr	r3, [pc, #428]	; (1666c <process_ble_packet+0xc08>)
   164c0:	781b      	ldrb	r3, [r3, #0]
   164c2:	111b      	asrs	r3, r3, #4
   164c4:	b2db      	uxtb	r3, r3
   164c6:	2201      	movs	r2, #1
   164c8:	4013      	ands	r3, r2
   164ca:	b2da      	uxtb	r2, r3
   164cc:	4b68      	ldr	r3, [pc, #416]	; (16670 <process_ble_packet+0xc0c>)
   164ce:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   164d0:	4b66      	ldr	r3, [pc, #408]	; (1666c <process_ble_packet+0xc08>)
   164d2:	781b      	ldrb	r3, [r3, #0]
   164d4:	115b      	asrs	r3, r3, #5
   164d6:	b2db      	uxtb	r3, r3
   164d8:	2201      	movs	r2, #1
   164da:	4013      	ands	r3, r2
   164dc:	b2da      	uxtb	r2, r3
   164de:	4b65      	ldr	r3, [pc, #404]	; (16674 <process_ble_packet+0xc10>)
   164e0:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   164e2:	4b62      	ldr	r3, [pc, #392]	; (1666c <process_ble_packet+0xc08>)
   164e4:	781b      	ldrb	r3, [r3, #0]
   164e6:	119b      	asrs	r3, r3, #6
   164e8:	b2db      	uxtb	r3, r3
   164ea:	2201      	movs	r2, #1
   164ec:	4013      	ands	r3, r2
   164ee:	b2da      	uxtb	r2, r3
   164f0:	4b61      	ldr	r3, [pc, #388]	; (16678 <process_ble_packet+0xc14>)
   164f2:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   164f4:	4b5d      	ldr	r3, [pc, #372]	; (1666c <process_ble_packet+0xc08>)
   164f6:	781b      	ldrb	r3, [r3, #0]
   164f8:	09db      	lsrs	r3, r3, #7
   164fa:	b2da      	uxtb	r2, r3
   164fc:	4b5f      	ldr	r3, [pc, #380]	; (1667c <process_ble_packet+0xc18>)
   164fe:	701a      	strb	r2, [r3, #0]
			ColorBase[MODE_ANALOG_CUSTOM] = (ble_recieve_packet.payload[1] & 0x0FF);
   16500:	4b59      	ldr	r3, [pc, #356]	; (16668 <process_ble_packet+0xc04>)
   16502:	78da      	ldrb	r2, [r3, #3]
   16504:	4b72      	ldr	r3, [pc, #456]	; (166d0 <process_ble_packet+0xc6c>)
   16506:	721a      	strb	r2, [r3, #8]
			RateBase[MODE_ANALOG_CUSTOM] = (ble_recieve_packet.payload[2] & 0xF0) >> 4;
   16508:	4b57      	ldr	r3, [pc, #348]	; (16668 <process_ble_packet+0xc04>)
   1650a:	791b      	ldrb	r3, [r3, #4]
   1650c:	091b      	lsrs	r3, r3, #4
   1650e:	b2da      	uxtb	r2, r3
   16510:	4b70      	ldr	r3, [pc, #448]	; (166d4 <process_ble_packet+0xc70>)
   16512:	721a      	strb	r2, [r3, #8]
			BrightBase[MODE_ANALOG_CUSTOM] = (ble_recieve_packet.payload[2] & 0x0F);
   16514:	4b54      	ldr	r3, [pc, #336]	; (16668 <process_ble_packet+0xc04>)
   16516:	791b      	ldrb	r3, [r3, #4]
   16518:	220f      	movs	r2, #15
   1651a:	4013      	ands	r3, r2
   1651c:	b2da      	uxtb	r2, r3
   1651e:	4b6e      	ldr	r3, [pc, #440]	; (166d8 <process_ble_packet+0xc74>)
   16520:	721a      	strb	r2, [r3, #8]
			Custom_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
   16522:	4b51      	ldr	r3, [pc, #324]	; (16668 <process_ble_packet+0xc04>)
   16524:	795a      	ldrb	r2, [r3, #5]
   16526:	4b56      	ldr	r3, [pc, #344]	; (16680 <process_ble_packet+0xc1c>)
   16528:	0010      	movs	r0, r2
   1652a:	4798      	blx	r3
   1652c:	1c02      	adds	r2, r0, #0
   1652e:	4b55      	ldr	r3, [pc, #340]	; (16684 <process_ble_packet+0xc20>)
   16530:	4955      	ldr	r1, [pc, #340]	; (16688 <process_ble_packet+0xc24>)
   16532:	1c10      	adds	r0, r2, #0
   16534:	4798      	blx	r3
   16536:	1c03      	adds	r3, r0, #0
   16538:	1c1a      	adds	r2, r3, #0
   1653a:	4b54      	ldr	r3, [pc, #336]	; (1668c <process_ble_packet+0xc28>)
   1653c:	1c10      	adds	r0, r2, #0
   1653e:	4798      	blx	r3
   16540:	0003      	movs	r3, r0
   16542:	b29a      	uxth	r2, r3
   16544:	4b65      	ldr	r3, [pc, #404]	; (166dc <process_ble_packet+0xc78>)
   16546:	801a      	strh	r2, [r3, #0]
			Custom_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
   16548:	4b47      	ldr	r3, [pc, #284]	; (16668 <process_ble_packet+0xc04>)
   1654a:	799a      	ldrb	r2, [r3, #6]
   1654c:	4b4c      	ldr	r3, [pc, #304]	; (16680 <process_ble_packet+0xc1c>)
   1654e:	0010      	movs	r0, r2
   16550:	4798      	blx	r3
   16552:	1c02      	adds	r2, r0, #0
   16554:	4b4b      	ldr	r3, [pc, #300]	; (16684 <process_ble_packet+0xc20>)
   16556:	494c      	ldr	r1, [pc, #304]	; (16688 <process_ble_packet+0xc24>)
   16558:	1c10      	adds	r0, r2, #0
   1655a:	4798      	blx	r3
   1655c:	1c03      	adds	r3, r0, #0
   1655e:	1c1a      	adds	r2, r3, #0
   16560:	4b4a      	ldr	r3, [pc, #296]	; (1668c <process_ble_packet+0xc28>)
   16562:	1c10      	adds	r0, r2, #0
   16564:	4798      	blx	r3
   16566:	0003      	movs	r3, r0
   16568:	b29a      	uxth	r2, r3
   1656a:	4b5c      	ldr	r3, [pc, #368]	; (166dc <process_ble_packet+0xc78>)
   1656c:	805a      	strh	r2, [r3, #2]
			Custom_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
   1656e:	4b3e      	ldr	r3, [pc, #248]	; (16668 <process_ble_packet+0xc04>)
   16570:	79da      	ldrb	r2, [r3, #7]
   16572:	4b43      	ldr	r3, [pc, #268]	; (16680 <process_ble_packet+0xc1c>)
   16574:	0010      	movs	r0, r2
   16576:	4798      	blx	r3
   16578:	1c02      	adds	r2, r0, #0
   1657a:	4b42      	ldr	r3, [pc, #264]	; (16684 <process_ble_packet+0xc20>)
   1657c:	4942      	ldr	r1, [pc, #264]	; (16688 <process_ble_packet+0xc24>)
   1657e:	1c10      	adds	r0, r2, #0
   16580:	4798      	blx	r3
   16582:	1c03      	adds	r3, r0, #0
   16584:	1c1a      	adds	r2, r3, #0
   16586:	4b41      	ldr	r3, [pc, #260]	; (1668c <process_ble_packet+0xc28>)
   16588:	1c10      	adds	r0, r2, #0
   1658a:	4798      	blx	r3
   1658c:	0003      	movs	r3, r0
   1658e:	b29a      	uxth	r2, r3
   16590:	4b52      	ldr	r3, [pc, #328]	; (166dc <process_ble_packet+0xc78>)
   16592:	809a      	strh	r2, [r3, #4]
			Custom_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
   16594:	4b34      	ldr	r3, [pc, #208]	; (16668 <process_ble_packet+0xc04>)
   16596:	7a1a      	ldrb	r2, [r3, #8]
   16598:	4b39      	ldr	r3, [pc, #228]	; (16680 <process_ble_packet+0xc1c>)
   1659a:	0010      	movs	r0, r2
   1659c:	4798      	blx	r3
   1659e:	1c02      	adds	r2, r0, #0
   165a0:	4b38      	ldr	r3, [pc, #224]	; (16684 <process_ble_packet+0xc20>)
   165a2:	4939      	ldr	r1, [pc, #228]	; (16688 <process_ble_packet+0xc24>)
   165a4:	1c10      	adds	r0, r2, #0
   165a6:	4798      	blx	r3
   165a8:	1c03      	adds	r3, r0, #0
   165aa:	1c1a      	adds	r2, r3, #0
   165ac:	4b37      	ldr	r3, [pc, #220]	; (1668c <process_ble_packet+0xc28>)
   165ae:	1c10      	adds	r0, r2, #0
   165b0:	4798      	blx	r3
   165b2:	0003      	movs	r3, r0
   165b4:	b29a      	uxth	r2, r3
   165b6:	4b49      	ldr	r3, [pc, #292]	; (166dc <process_ble_packet+0xc78>)
   165b8:	80da      	strh	r2, [r3, #6]
			Custom_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[7] * 257);
   165ba:	4b2b      	ldr	r3, [pc, #172]	; (16668 <process_ble_packet+0xc04>)
   165bc:	7a5a      	ldrb	r2, [r3, #9]
   165be:	4b30      	ldr	r3, [pc, #192]	; (16680 <process_ble_packet+0xc1c>)
   165c0:	0010      	movs	r0, r2
   165c2:	4798      	blx	r3
   165c4:	1c02      	adds	r2, r0, #0
   165c6:	4b2f      	ldr	r3, [pc, #188]	; (16684 <process_ble_packet+0xc20>)
   165c8:	492f      	ldr	r1, [pc, #188]	; (16688 <process_ble_packet+0xc24>)
   165ca:	1c10      	adds	r0, r2, #0
   165cc:	4798      	blx	r3
   165ce:	1c03      	adds	r3, r0, #0
   165d0:	1c1a      	adds	r2, r3, #0
   165d2:	4b2e      	ldr	r3, [pc, #184]	; (1668c <process_ble_packet+0xc28>)
   165d4:	1c10      	adds	r0, r2, #0
   165d6:	4798      	blx	r3
   165d8:	0003      	movs	r3, r0
   165da:	b29a      	uxth	r2, r3
   165dc:	4b3f      	ldr	r3, [pc, #252]	; (166dc <process_ble_packet+0xc78>)
   165de:	811a      	strh	r2, [r3, #8]
			Custom_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[8] * 257);
   165e0:	4b21      	ldr	r3, [pc, #132]	; (16668 <process_ble_packet+0xc04>)
   165e2:	7a9a      	ldrb	r2, [r3, #10]
   165e4:	4b26      	ldr	r3, [pc, #152]	; (16680 <process_ble_packet+0xc1c>)
   165e6:	0010      	movs	r0, r2
   165e8:	4798      	blx	r3
   165ea:	1c02      	adds	r2, r0, #0
   165ec:	4b25      	ldr	r3, [pc, #148]	; (16684 <process_ble_packet+0xc20>)
   165ee:	4926      	ldr	r1, [pc, #152]	; (16688 <process_ble_packet+0xc24>)
   165f0:	1c10      	adds	r0, r2, #0
   165f2:	4798      	blx	r3
   165f4:	1c03      	adds	r3, r0, #0
   165f6:	1c1a      	adds	r2, r3, #0
   165f8:	4b24      	ldr	r3, [pc, #144]	; (1668c <process_ble_packet+0xc28>)
   165fa:	1c10      	adds	r0, r2, #0
   165fc:	4798      	blx	r3
   165fe:	0003      	movs	r3, r0
   16600:	b29a      	uxth	r2, r3
   16602:	4b36      	ldr	r3, [pc, #216]	; (166dc <process_ble_packet+0xc78>)
   16604:	815a      	strh	r2, [r3, #10]
			RateSens[MODE_ANALOG_CUSTOM] = ((float)(ble_recieve_packet.payload[9]))/100;
   16606:	4b18      	ldr	r3, [pc, #96]	; (16668 <process_ble_packet+0xc04>)
   16608:	7ada      	ldrb	r2, [r3, #11]
   1660a:	4b1d      	ldr	r3, [pc, #116]	; (16680 <process_ble_packet+0xc1c>)
   1660c:	0010      	movs	r0, r2
   1660e:	4798      	blx	r3
   16610:	1c02      	adds	r2, r0, #0
   16612:	4b33      	ldr	r3, [pc, #204]	; (166e0 <process_ble_packet+0xc7c>)
   16614:	4933      	ldr	r1, [pc, #204]	; (166e4 <process_ble_packet+0xc80>)
   16616:	1c10      	adds	r0, r2, #0
   16618:	4798      	blx	r3
   1661a:	1c03      	adds	r3, r0, #0
   1661c:	1c1a      	adds	r2, r3, #0
   1661e:	4b32      	ldr	r3, [pc, #200]	; (166e8 <process_ble_packet+0xc84>)
   16620:	621a      	str	r2, [r3, #32]
			Brightness[MODE_ANALOG_CUSTOM] = ((float)(ble_recieve_packet.payload[10]))/100;
   16622:	4b11      	ldr	r3, [pc, #68]	; (16668 <process_ble_packet+0xc04>)
   16624:	7b1a      	ldrb	r2, [r3, #12]
   16626:	4b16      	ldr	r3, [pc, #88]	; (16680 <process_ble_packet+0xc1c>)
   16628:	0010      	movs	r0, r2
   1662a:	4798      	blx	r3
   1662c:	1c02      	adds	r2, r0, #0
   1662e:	4b2c      	ldr	r3, [pc, #176]	; (166e0 <process_ble_packet+0xc7c>)
   16630:	492c      	ldr	r1, [pc, #176]	; (166e4 <process_ble_packet+0xc80>)
   16632:	1c10      	adds	r0, r2, #0
   16634:	4798      	blx	r3
   16636:	1c03      	adds	r3, r0, #0
   16638:	1c1a      	adds	r2, r3, #0
   1663a:	4b2c      	ldr	r3, [pc, #176]	; (166ec <process_ble_packet+0xc88>)
   1663c:	621a      	str	r2, [r3, #32]
			set_mode_shuffle_state(&shuffled_analog_modes, ((0x80 & ble_recieve_packet.payload[11])>>7)==0x1, MODE_ANALOG_CUSTOM);
   1663e:	4b0a      	ldr	r3, [pc, #40]	; (16668 <process_ble_packet+0xc04>)
   16640:	7b5b      	ldrb	r3, [r3, #13]
   16642:	09db      	lsrs	r3, r3, #7
   16644:	b2db      	uxtb	r3, r3
   16646:	3b01      	subs	r3, #1
   16648:	425a      	negs	r2, r3
   1664a:	4153      	adcs	r3, r2
   1664c:	b2d9      	uxtb	r1, r3
   1664e:	4b11      	ldr	r3, [pc, #68]	; (16694 <process_ble_packet+0xc30>)
   16650:	2208      	movs	r2, #8
   16652:	0018      	movs	r0, r3
   16654:	4b10      	ldr	r3, [pc, #64]	; (16698 <process_ble_packet+0xc34>)
   16656:	4798      	blx	r3
			save_led_data();
   16658:	4b10      	ldr	r3, [pc, #64]	; (1669c <process_ble_packet+0xc38>)
   1665a:	4798      	blx	r3
			break;
   1665c:	e2e7      	b.n	16c2e <process_ble_packet+0x11ca>
   1665e:	46c0      	nop			; (mov r8, r8)
   16660:	200000d6 	.word	0x200000d6
   16664:	2000003c 	.word	0x2000003c
   16668:	20000700 	.word	0x20000700
   1666c:	200003b0 	.word	0x200003b0
   16670:	200000d5 	.word	0x200000d5
   16674:	200003ad 	.word	0x200003ad
   16678:	200003ae 	.word	0x200003ae
   1667c:	200003af 	.word	0x200003af
   16680:	0001a379 	.word	0x0001a379
   16684:	00019d21 	.word	0x00019d21
   16688:	43808000 	.word	0x43808000
   1668c:	000195b1 	.word	0x000195b1
   16690:	20000040 	.word	0x20000040
   16694:	200003a8 	.word	0x200003a8
   16698:	0000f155 	.word	0x0000f155
   1669c:	000138d1 	.word	0x000138d1
   166a0:	200003de 	.word	0x200003de
   166a4:	200003df 	.word	0x200003df
   166a8:	200003e2 	.word	0x200003e2
   166ac:	200003e3 	.word	0x200003e3
   166b0:	200003e4 	.word	0x200003e4
   166b4:	200003e5 	.word	0x200003e5
   166b8:	200003e6 	.word	0x200003e6
   166bc:	200003e7 	.word	0x200003e7
   166c0:	200003e9 	.word	0x200003e9
   166c4:	200003e8 	.word	0x200003e8
   166c8:	200003ea 	.word	0x200003ea
   166cc:	00014659 	.word	0x00014659
   166d0:	20000094 	.word	0x20000094
   166d4:	200000ac 	.word	0x200000ac
   166d8:	200000a0 	.word	0x200000a0
   166dc:	200000c4 	.word	0x200000c4
   166e0:	00019941 	.word	0x00019941
   166e4:	42c80000 	.word	0x42c80000
   166e8:	2000004c 	.word	0x2000004c
   166ec:	20000070 	.word	0x20000070
		case Digital_Static_Values:
			LIGHTS_ON = 1;
   166f0:	4bf6      	ldr	r3, [pc, #984]	; (16acc <process_ble_packet+0x1068>)
   166f2:	2201      	movs	r2, #1
   166f4:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_STATIC;
   166f6:	4bf6      	ldr	r3, [pc, #984]	; (16ad0 <process_ble_packet+0x106c>)
   166f8:	2200      	movs	r2, #0
   166fa:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   166fc:	4bf5      	ldr	r3, [pc, #980]	; (16ad4 <process_ble_packet+0x1070>)
   166fe:	789b      	ldrb	r3, [r3, #2]
   16700:	220f      	movs	r2, #15
   16702:	4393      	bics	r3, r2
   16704:	b2da      	uxtb	r2, r3
   16706:	4bf4      	ldr	r3, [pc, #976]	; (16ad8 <process_ble_packet+0x1074>)
   16708:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1670a:	4bf3      	ldr	r3, [pc, #972]	; (16ad8 <process_ble_packet+0x1074>)
   1670c:	781b      	ldrb	r3, [r3, #0]
   1670e:	111b      	asrs	r3, r3, #4
   16710:	b2db      	uxtb	r3, r3
   16712:	2201      	movs	r2, #1
   16714:	4013      	ands	r3, r2
   16716:	b2da      	uxtb	r2, r3
   16718:	4bf0      	ldr	r3, [pc, #960]	; (16adc <process_ble_packet+0x1078>)
   1671a:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   1671c:	4bee      	ldr	r3, [pc, #952]	; (16ad8 <process_ble_packet+0x1074>)
   1671e:	781b      	ldrb	r3, [r3, #0]
   16720:	115b      	asrs	r3, r3, #5
   16722:	b2db      	uxtb	r3, r3
   16724:	2201      	movs	r2, #1
   16726:	4013      	ands	r3, r2
   16728:	b2da      	uxtb	r2, r3
   1672a:	4bed      	ldr	r3, [pc, #948]	; (16ae0 <process_ble_packet+0x107c>)
   1672c:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   1672e:	4bea      	ldr	r3, [pc, #936]	; (16ad8 <process_ble_packet+0x1074>)
   16730:	781b      	ldrb	r3, [r3, #0]
   16732:	119b      	asrs	r3, r3, #6
   16734:	b2db      	uxtb	r3, r3
   16736:	2201      	movs	r2, #1
   16738:	4013      	ands	r3, r2
   1673a:	b2da      	uxtb	r2, r3
   1673c:	4be9      	ldr	r3, [pc, #932]	; (16ae4 <process_ble_packet+0x1080>)
   1673e:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16740:	4be5      	ldr	r3, [pc, #916]	; (16ad8 <process_ble_packet+0x1074>)
   16742:	781b      	ldrb	r3, [r3, #0]
   16744:	09db      	lsrs	r3, r3, #7
   16746:	b2da      	uxtb	r2, r3
   16748:	4be7      	ldr	r3, [pc, #924]	; (16ae8 <process_ble_packet+0x1084>)
   1674a:	701a      	strb	r2, [r3, #0]
			Digital_Static_Zoom = ble_recieve_packet.payload[1];
   1674c:	4be1      	ldr	r3, [pc, #900]	; (16ad4 <process_ble_packet+0x1070>)
   1674e:	78da      	ldrb	r2, [r3, #3]
   16750:	4be6      	ldr	r3, [pc, #920]	; (16aec <process_ble_packet+0x1088>)
   16752:	701a      	strb	r2, [r3, #0]
			Digital_Static_Shift = ble_recieve_packet.payload[2];
   16754:	4bdf      	ldr	r3, [pc, #892]	; (16ad4 <process_ble_packet+0x1070>)
   16756:	791a      	ldrb	r2, [r3, #4]
   16758:	4be5      	ldr	r3, [pc, #916]	; (16af0 <process_ble_packet+0x108c>)
   1675a:	701a      	strb	r2, [r3, #0]
			Digital_Static_Brightness = ble_recieve_packet.payload[3];
   1675c:	4bdd      	ldr	r3, [pc, #884]	; (16ad4 <process_ble_packet+0x1070>)
   1675e:	795a      	ldrb	r2, [r3, #5]
   16760:	4be4      	ldr	r3, [pc, #912]	; (16af4 <process_ble_packet+0x1090>)
   16762:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[4])>>7)==0x1, MODE_DIGITAL_STATIC);
   16764:	4bdb      	ldr	r3, [pc, #876]	; (16ad4 <process_ble_packet+0x1070>)
   16766:	799b      	ldrb	r3, [r3, #6]
   16768:	09db      	lsrs	r3, r3, #7
   1676a:	b2db      	uxtb	r3, r3
   1676c:	3b01      	subs	r3, #1
   1676e:	425a      	negs	r2, r3
   16770:	4153      	adcs	r3, r2
   16772:	b2d9      	uxtb	r1, r3
   16774:	4be0      	ldr	r3, [pc, #896]	; (16af8 <process_ble_packet+0x1094>)
   16776:	2200      	movs	r2, #0
   16778:	0018      	movs	r0, r3
   1677a:	4be0      	ldr	r3, [pc, #896]	; (16afc <process_ble_packet+0x1098>)
   1677c:	4798      	blx	r3
			save_led_data();
   1677e:	4be0      	ldr	r3, [pc, #896]	; (16b00 <process_ble_packet+0x109c>)
   16780:	4798      	blx	r3
			break;
   16782:	e254      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_Skittles_Values:
			LIGHTS_ON = 1;
   16784:	4bd1      	ldr	r3, [pc, #836]	; (16acc <process_ble_packet+0x1068>)
   16786:	2201      	movs	r2, #1
   16788:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_SKITTLES;
   1678a:	4bd1      	ldr	r3, [pc, #836]	; (16ad0 <process_ble_packet+0x106c>)
   1678c:	2201      	movs	r2, #1
   1678e:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   16790:	4bd0      	ldr	r3, [pc, #832]	; (16ad4 <process_ble_packet+0x1070>)
   16792:	789b      	ldrb	r3, [r3, #2]
   16794:	220f      	movs	r2, #15
   16796:	4393      	bics	r3, r2
   16798:	b2da      	uxtb	r2, r3
   1679a:	4bcf      	ldr	r3, [pc, #828]	; (16ad8 <process_ble_packet+0x1074>)
   1679c:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1679e:	4bce      	ldr	r3, [pc, #824]	; (16ad8 <process_ble_packet+0x1074>)
   167a0:	781b      	ldrb	r3, [r3, #0]
   167a2:	111b      	asrs	r3, r3, #4
   167a4:	b2db      	uxtb	r3, r3
   167a6:	2201      	movs	r2, #1
   167a8:	4013      	ands	r3, r2
   167aa:	b2da      	uxtb	r2, r3
   167ac:	4bcb      	ldr	r3, [pc, #812]	; (16adc <process_ble_packet+0x1078>)
   167ae:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   167b0:	4bc9      	ldr	r3, [pc, #804]	; (16ad8 <process_ble_packet+0x1074>)
   167b2:	781b      	ldrb	r3, [r3, #0]
   167b4:	115b      	asrs	r3, r3, #5
   167b6:	b2db      	uxtb	r3, r3
   167b8:	2201      	movs	r2, #1
   167ba:	4013      	ands	r3, r2
   167bc:	b2da      	uxtb	r2, r3
   167be:	4bc8      	ldr	r3, [pc, #800]	; (16ae0 <process_ble_packet+0x107c>)
   167c0:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   167c2:	4bc5      	ldr	r3, [pc, #788]	; (16ad8 <process_ble_packet+0x1074>)
   167c4:	781b      	ldrb	r3, [r3, #0]
   167c6:	119b      	asrs	r3, r3, #6
   167c8:	b2db      	uxtb	r3, r3
   167ca:	2201      	movs	r2, #1
   167cc:	4013      	ands	r3, r2
   167ce:	b2da      	uxtb	r2, r3
   167d0:	4bc4      	ldr	r3, [pc, #784]	; (16ae4 <process_ble_packet+0x1080>)
   167d2:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   167d4:	4bc0      	ldr	r3, [pc, #768]	; (16ad8 <process_ble_packet+0x1074>)
   167d6:	781b      	ldrb	r3, [r3, #0]
   167d8:	09db      	lsrs	r3, r3, #7
   167da:	b2da      	uxtb	r2, r3
   167dc:	4bc2      	ldr	r3, [pc, #776]	; (16ae8 <process_ble_packet+0x1084>)
   167de:	701a      	strb	r2, [r3, #0]
			Digital_Skittles_Brightness = ble_recieve_packet.payload[1];
   167e0:	4bbc      	ldr	r3, [pc, #752]	; (16ad4 <process_ble_packet+0x1070>)
   167e2:	78da      	ldrb	r2, [r3, #3]
   167e4:	4bc7      	ldr	r3, [pc, #796]	; (16b04 <process_ble_packet+0x10a0>)
   167e6:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[2])>>7)==0x1, MODE_DIGITAL_SKITTLES);
   167e8:	4bba      	ldr	r3, [pc, #744]	; (16ad4 <process_ble_packet+0x1070>)
   167ea:	791b      	ldrb	r3, [r3, #4]
   167ec:	09db      	lsrs	r3, r3, #7
   167ee:	b2db      	uxtb	r3, r3
   167f0:	3b01      	subs	r3, #1
   167f2:	425a      	negs	r2, r3
   167f4:	4153      	adcs	r3, r2
   167f6:	b2d9      	uxtb	r1, r3
   167f8:	4bbf      	ldr	r3, [pc, #764]	; (16af8 <process_ble_packet+0x1094>)
   167fa:	2201      	movs	r2, #1
   167fc:	0018      	movs	r0, r3
   167fe:	4bbf      	ldr	r3, [pc, #764]	; (16afc <process_ble_packet+0x1098>)
   16800:	4798      	blx	r3
			save_led_data();
   16802:	4bbf      	ldr	r3, [pc, #764]	; (16b00 <process_ble_packet+0x109c>)
   16804:	4798      	blx	r3
			break;
   16806:	e212      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_Cycle_Values:
			LIGHTS_ON = 1;
   16808:	4bb0      	ldr	r3, [pc, #704]	; (16acc <process_ble_packet+0x1068>)
   1680a:	2201      	movs	r2, #1
   1680c:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_GRADIENT_CYCLE;
   1680e:	4bb0      	ldr	r3, [pc, #704]	; (16ad0 <process_ble_packet+0x106c>)
   16810:	2202      	movs	r2, #2
   16812:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   16814:	4baf      	ldr	r3, [pc, #700]	; (16ad4 <process_ble_packet+0x1070>)
   16816:	789b      	ldrb	r3, [r3, #2]
   16818:	220f      	movs	r2, #15
   1681a:	4393      	bics	r3, r2
   1681c:	b2da      	uxtb	r2, r3
   1681e:	4bae      	ldr	r3, [pc, #696]	; (16ad8 <process_ble_packet+0x1074>)
   16820:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   16822:	4bad      	ldr	r3, [pc, #692]	; (16ad8 <process_ble_packet+0x1074>)
   16824:	781b      	ldrb	r3, [r3, #0]
   16826:	111b      	asrs	r3, r3, #4
   16828:	b2db      	uxtb	r3, r3
   1682a:	2201      	movs	r2, #1
   1682c:	4013      	ands	r3, r2
   1682e:	b2da      	uxtb	r2, r3
   16830:	4baa      	ldr	r3, [pc, #680]	; (16adc <process_ble_packet+0x1078>)
   16832:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   16834:	4ba8      	ldr	r3, [pc, #672]	; (16ad8 <process_ble_packet+0x1074>)
   16836:	781b      	ldrb	r3, [r3, #0]
   16838:	115b      	asrs	r3, r3, #5
   1683a:	b2db      	uxtb	r3, r3
   1683c:	2201      	movs	r2, #1
   1683e:	4013      	ands	r3, r2
   16840:	b2da      	uxtb	r2, r3
   16842:	4ba7      	ldr	r3, [pc, #668]	; (16ae0 <process_ble_packet+0x107c>)
   16844:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   16846:	4ba4      	ldr	r3, [pc, #656]	; (16ad8 <process_ble_packet+0x1074>)
   16848:	781b      	ldrb	r3, [r3, #0]
   1684a:	119b      	asrs	r3, r3, #6
   1684c:	b2db      	uxtb	r3, r3
   1684e:	2201      	movs	r2, #1
   16850:	4013      	ands	r3, r2
   16852:	b2da      	uxtb	r2, r3
   16854:	4ba3      	ldr	r3, [pc, #652]	; (16ae4 <process_ble_packet+0x1080>)
   16856:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16858:	4b9f      	ldr	r3, [pc, #636]	; (16ad8 <process_ble_packet+0x1074>)
   1685a:	781b      	ldrb	r3, [r3, #0]
   1685c:	09db      	lsrs	r3, r3, #7
   1685e:	b2da      	uxtb	r2, r3
   16860:	4ba1      	ldr	r3, [pc, #644]	; (16ae8 <process_ble_packet+0x1084>)
   16862:	701a      	strb	r2, [r3, #0]
			Digital_Cycle_Zoom = ble_recieve_packet.payload[1];
   16864:	4b9b      	ldr	r3, [pc, #620]	; (16ad4 <process_ble_packet+0x1070>)
   16866:	78da      	ldrb	r2, [r3, #3]
   16868:	4ba7      	ldr	r3, [pc, #668]	; (16b08 <process_ble_packet+0x10a4>)
   1686a:	701a      	strb	r2, [r3, #0]
			Digital_Cycle_Rate = ble_recieve_packet.payload[2];
   1686c:	4b99      	ldr	r3, [pc, #612]	; (16ad4 <process_ble_packet+0x1070>)
   1686e:	791a      	ldrb	r2, [r3, #4]
   16870:	4ba6      	ldr	r3, [pc, #664]	; (16b0c <process_ble_packet+0x10a8>)
   16872:	701a      	strb	r2, [r3, #0]
			Digital_Cycle_Brightness = ble_recieve_packet.payload[3];
   16874:	4b97      	ldr	r3, [pc, #604]	; (16ad4 <process_ble_packet+0x1070>)
   16876:	795a      	ldrb	r2, [r3, #5]
   16878:	4ba5      	ldr	r3, [pc, #660]	; (16b10 <process_ble_packet+0x10ac>)
   1687a:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[4])>>7)==0x1, MODE_DIGITAL_GRADIENT_CYCLE);
   1687c:	4b95      	ldr	r3, [pc, #596]	; (16ad4 <process_ble_packet+0x1070>)
   1687e:	799b      	ldrb	r3, [r3, #6]
   16880:	09db      	lsrs	r3, r3, #7
   16882:	b2db      	uxtb	r3, r3
   16884:	3b01      	subs	r3, #1
   16886:	425a      	negs	r2, r3
   16888:	4153      	adcs	r3, r2
   1688a:	b2d9      	uxtb	r1, r3
   1688c:	4b9a      	ldr	r3, [pc, #616]	; (16af8 <process_ble_packet+0x1094>)
   1688e:	2202      	movs	r2, #2
   16890:	0018      	movs	r0, r3
   16892:	4b9a      	ldr	r3, [pc, #616]	; (16afc <process_ble_packet+0x1098>)
   16894:	4798      	blx	r3
			save_led_data();
   16896:	4b9a      	ldr	r3, [pc, #616]	; (16b00 <process_ble_packet+0x109c>)
   16898:	4798      	blx	r3
			break;
   1689a:	e1c8      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_Compass_Values:
			LIGHTS_ON = 1;
   1689c:	4b8b      	ldr	r3, [pc, #556]	; (16acc <process_ble_packet+0x1068>)
   1689e:	2201      	movs	r2, #1
   168a0:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_COMPASS_CYCLE;
   168a2:	4b8b      	ldr	r3, [pc, #556]	; (16ad0 <process_ble_packet+0x106c>)
   168a4:	2203      	movs	r2, #3
   168a6:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   168a8:	4b8a      	ldr	r3, [pc, #552]	; (16ad4 <process_ble_packet+0x1070>)
   168aa:	789b      	ldrb	r3, [r3, #2]
   168ac:	220f      	movs	r2, #15
   168ae:	4393      	bics	r3, r2
   168b0:	b2da      	uxtb	r2, r3
   168b2:	4b89      	ldr	r3, [pc, #548]	; (16ad8 <process_ble_packet+0x1074>)
   168b4:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   168b6:	4b88      	ldr	r3, [pc, #544]	; (16ad8 <process_ble_packet+0x1074>)
   168b8:	781b      	ldrb	r3, [r3, #0]
   168ba:	111b      	asrs	r3, r3, #4
   168bc:	b2db      	uxtb	r3, r3
   168be:	2201      	movs	r2, #1
   168c0:	4013      	ands	r3, r2
   168c2:	b2da      	uxtb	r2, r3
   168c4:	4b85      	ldr	r3, [pc, #532]	; (16adc <process_ble_packet+0x1078>)
   168c6:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   168c8:	4b83      	ldr	r3, [pc, #524]	; (16ad8 <process_ble_packet+0x1074>)
   168ca:	781b      	ldrb	r3, [r3, #0]
   168cc:	115b      	asrs	r3, r3, #5
   168ce:	b2db      	uxtb	r3, r3
   168d0:	2201      	movs	r2, #1
   168d2:	4013      	ands	r3, r2
   168d4:	b2da      	uxtb	r2, r3
   168d6:	4b82      	ldr	r3, [pc, #520]	; (16ae0 <process_ble_packet+0x107c>)
   168d8:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   168da:	4b7f      	ldr	r3, [pc, #508]	; (16ad8 <process_ble_packet+0x1074>)
   168dc:	781b      	ldrb	r3, [r3, #0]
   168de:	119b      	asrs	r3, r3, #6
   168e0:	b2db      	uxtb	r3, r3
   168e2:	2201      	movs	r2, #1
   168e4:	4013      	ands	r3, r2
   168e6:	b2da      	uxtb	r2, r3
   168e8:	4b7e      	ldr	r3, [pc, #504]	; (16ae4 <process_ble_packet+0x1080>)
   168ea:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   168ec:	4b7a      	ldr	r3, [pc, #488]	; (16ad8 <process_ble_packet+0x1074>)
   168ee:	781b      	ldrb	r3, [r3, #0]
   168f0:	09db      	lsrs	r3, r3, #7
   168f2:	b2da      	uxtb	r2, r3
   168f4:	4b7c      	ldr	r3, [pc, #496]	; (16ae8 <process_ble_packet+0x1084>)
   168f6:	701a      	strb	r2, [r3, #0]
			Digital_Compass_Brightness = ble_recieve_packet.payload[1];
   168f8:	4b76      	ldr	r3, [pc, #472]	; (16ad4 <process_ble_packet+0x1070>)
   168fa:	78da      	ldrb	r2, [r3, #3]
   168fc:	4b85      	ldr	r3, [pc, #532]	; (16b14 <process_ble_packet+0x10b0>)
   168fe:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[2])>>7)==0x1, MODE_DIGITAL_COMPASS_CYCLE);
   16900:	4b74      	ldr	r3, [pc, #464]	; (16ad4 <process_ble_packet+0x1070>)
   16902:	791b      	ldrb	r3, [r3, #4]
   16904:	09db      	lsrs	r3, r3, #7
   16906:	b2db      	uxtb	r3, r3
   16908:	3b01      	subs	r3, #1
   1690a:	425a      	negs	r2, r3
   1690c:	4153      	adcs	r3, r2
   1690e:	b2d9      	uxtb	r1, r3
   16910:	4b79      	ldr	r3, [pc, #484]	; (16af8 <process_ble_packet+0x1094>)
   16912:	2203      	movs	r2, #3
   16914:	0018      	movs	r0, r3
   16916:	4b79      	ldr	r3, [pc, #484]	; (16afc <process_ble_packet+0x1098>)
   16918:	4798      	blx	r3
			save_led_data();
   1691a:	4b79      	ldr	r3, [pc, #484]	; (16b00 <process_ble_packet+0x109c>)
   1691c:	4798      	blx	r3
			break;
   1691e:	e186      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_Throttle_Values:
			LIGHTS_ON = 1;
   16920:	4b6a      	ldr	r3, [pc, #424]	; (16acc <process_ble_packet+0x1068>)
   16922:	2201      	movs	r2, #1
   16924:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_THROTTLE;
   16926:	4b6a      	ldr	r3, [pc, #424]	; (16ad0 <process_ble_packet+0x106c>)
   16928:	2204      	movs	r2, #4
   1692a:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   1692c:	4b69      	ldr	r3, [pc, #420]	; (16ad4 <process_ble_packet+0x1070>)
   1692e:	789b      	ldrb	r3, [r3, #2]
   16930:	220f      	movs	r2, #15
   16932:	4393      	bics	r3, r2
   16934:	b2da      	uxtb	r2, r3
   16936:	4b68      	ldr	r3, [pc, #416]	; (16ad8 <process_ble_packet+0x1074>)
   16938:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1693a:	4b67      	ldr	r3, [pc, #412]	; (16ad8 <process_ble_packet+0x1074>)
   1693c:	781b      	ldrb	r3, [r3, #0]
   1693e:	111b      	asrs	r3, r3, #4
   16940:	b2db      	uxtb	r3, r3
   16942:	2201      	movs	r2, #1
   16944:	4013      	ands	r3, r2
   16946:	b2da      	uxtb	r2, r3
   16948:	4b64      	ldr	r3, [pc, #400]	; (16adc <process_ble_packet+0x1078>)
   1694a:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   1694c:	4b62      	ldr	r3, [pc, #392]	; (16ad8 <process_ble_packet+0x1074>)
   1694e:	781b      	ldrb	r3, [r3, #0]
   16950:	115b      	asrs	r3, r3, #5
   16952:	b2db      	uxtb	r3, r3
   16954:	2201      	movs	r2, #1
   16956:	4013      	ands	r3, r2
   16958:	b2da      	uxtb	r2, r3
   1695a:	4b61      	ldr	r3, [pc, #388]	; (16ae0 <process_ble_packet+0x107c>)
   1695c:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   1695e:	4b5e      	ldr	r3, [pc, #376]	; (16ad8 <process_ble_packet+0x1074>)
   16960:	781b      	ldrb	r3, [r3, #0]
   16962:	119b      	asrs	r3, r3, #6
   16964:	b2db      	uxtb	r3, r3
   16966:	2201      	movs	r2, #1
   16968:	4013      	ands	r3, r2
   1696a:	b2da      	uxtb	r2, r3
   1696c:	4b5d      	ldr	r3, [pc, #372]	; (16ae4 <process_ble_packet+0x1080>)
   1696e:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16970:	4b59      	ldr	r3, [pc, #356]	; (16ad8 <process_ble_packet+0x1074>)
   16972:	781b      	ldrb	r3, [r3, #0]
   16974:	09db      	lsrs	r3, r3, #7
   16976:	b2da      	uxtb	r2, r3
   16978:	4b5b      	ldr	r3, [pc, #364]	; (16ae8 <process_ble_packet+0x1084>)
   1697a:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Zoom = ble_recieve_packet.payload[1];
   1697c:	4b55      	ldr	r3, [pc, #340]	; (16ad4 <process_ble_packet+0x1070>)
   1697e:	78da      	ldrb	r2, [r3, #3]
   16980:	4b65      	ldr	r3, [pc, #404]	; (16b18 <process_ble_packet+0x10b4>)
   16982:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Shift = ble_recieve_packet.payload[2];
   16984:	4b53      	ldr	r3, [pc, #332]	; (16ad4 <process_ble_packet+0x1070>)
   16986:	791a      	ldrb	r2, [r3, #4]
   16988:	4b64      	ldr	r3, [pc, #400]	; (16b1c <process_ble_packet+0x10b8>)
   1698a:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Sens = ble_recieve_packet.payload[3];
   1698c:	4b51      	ldr	r3, [pc, #324]	; (16ad4 <process_ble_packet+0x1070>)
   1698e:	795a      	ldrb	r2, [r3, #5]
   16990:	4b63      	ldr	r3, [pc, #396]	; (16b20 <process_ble_packet+0x10bc>)
   16992:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Brightness = ble_recieve_packet.payload[4];
   16994:	4b4f      	ldr	r3, [pc, #316]	; (16ad4 <process_ble_packet+0x1070>)
   16996:	799a      	ldrb	r2, [r3, #6]
   16998:	4b62      	ldr	r3, [pc, #392]	; (16b24 <process_ble_packet+0x10c0>)
   1699a:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[5])>>7)==0x1, MODE_DIGITAL_THROTTLE);
   1699c:	4b4d      	ldr	r3, [pc, #308]	; (16ad4 <process_ble_packet+0x1070>)
   1699e:	79db      	ldrb	r3, [r3, #7]
   169a0:	09db      	lsrs	r3, r3, #7
   169a2:	b2db      	uxtb	r3, r3
   169a4:	3b01      	subs	r3, #1
   169a6:	425a      	negs	r2, r3
   169a8:	4153      	adcs	r3, r2
   169aa:	b2d9      	uxtb	r1, r3
   169ac:	4b52      	ldr	r3, [pc, #328]	; (16af8 <process_ble_packet+0x1094>)
   169ae:	2204      	movs	r2, #4
   169b0:	0018      	movs	r0, r3
   169b2:	4b52      	ldr	r3, [pc, #328]	; (16afc <process_ble_packet+0x1098>)
   169b4:	4798      	blx	r3
			save_led_data();
   169b6:	4b52      	ldr	r3, [pc, #328]	; (16b00 <process_ble_packet+0x109c>)
   169b8:	4798      	blx	r3
			break;
   169ba:	e138      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_RPM_Values:
			LIGHTS_ON = 1;
   169bc:	4b43      	ldr	r3, [pc, #268]	; (16acc <process_ble_packet+0x1068>)
   169be:	2201      	movs	r2, #1
   169c0:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_RPM_CYCLE;
   169c2:	4b43      	ldr	r3, [pc, #268]	; (16ad0 <process_ble_packet+0x106c>)
   169c4:	2205      	movs	r2, #5
   169c6:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   169c8:	4b42      	ldr	r3, [pc, #264]	; (16ad4 <process_ble_packet+0x1070>)
   169ca:	789b      	ldrb	r3, [r3, #2]
   169cc:	220f      	movs	r2, #15
   169ce:	4393      	bics	r3, r2
   169d0:	b2da      	uxtb	r2, r3
   169d2:	4b41      	ldr	r3, [pc, #260]	; (16ad8 <process_ble_packet+0x1074>)
   169d4:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   169d6:	4b40      	ldr	r3, [pc, #256]	; (16ad8 <process_ble_packet+0x1074>)
   169d8:	781b      	ldrb	r3, [r3, #0]
   169da:	111b      	asrs	r3, r3, #4
   169dc:	b2db      	uxtb	r3, r3
   169de:	2201      	movs	r2, #1
   169e0:	4013      	ands	r3, r2
   169e2:	b2da      	uxtb	r2, r3
   169e4:	4b3d      	ldr	r3, [pc, #244]	; (16adc <process_ble_packet+0x1078>)
   169e6:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   169e8:	4b3b      	ldr	r3, [pc, #236]	; (16ad8 <process_ble_packet+0x1074>)
   169ea:	781b      	ldrb	r3, [r3, #0]
   169ec:	115b      	asrs	r3, r3, #5
   169ee:	b2db      	uxtb	r3, r3
   169f0:	2201      	movs	r2, #1
   169f2:	4013      	ands	r3, r2
   169f4:	b2da      	uxtb	r2, r3
   169f6:	4b3a      	ldr	r3, [pc, #232]	; (16ae0 <process_ble_packet+0x107c>)
   169f8:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   169fa:	4b37      	ldr	r3, [pc, #220]	; (16ad8 <process_ble_packet+0x1074>)
   169fc:	781b      	ldrb	r3, [r3, #0]
   169fe:	119b      	asrs	r3, r3, #6
   16a00:	b2db      	uxtb	r3, r3
   16a02:	2201      	movs	r2, #1
   16a04:	4013      	ands	r3, r2
   16a06:	b2da      	uxtb	r2, r3
   16a08:	4b36      	ldr	r3, [pc, #216]	; (16ae4 <process_ble_packet+0x1080>)
   16a0a:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16a0c:	4b32      	ldr	r3, [pc, #200]	; (16ad8 <process_ble_packet+0x1074>)
   16a0e:	781b      	ldrb	r3, [r3, #0]
   16a10:	09db      	lsrs	r3, r3, #7
   16a12:	b2da      	uxtb	r2, r3
   16a14:	4b34      	ldr	r3, [pc, #208]	; (16ae8 <process_ble_packet+0x1084>)
   16a16:	701a      	strb	r2, [r3, #0]
			Digital_RPM_Zoom = ble_recieve_packet.payload[1];
   16a18:	4b2e      	ldr	r3, [pc, #184]	; (16ad4 <process_ble_packet+0x1070>)
   16a1a:	78da      	ldrb	r2, [r3, #3]
   16a1c:	4b42      	ldr	r3, [pc, #264]	; (16b28 <process_ble_packet+0x10c4>)
   16a1e:	701a      	strb	r2, [r3, #0]
			Digital_RPM_Rate = ble_recieve_packet.payload[2];
   16a20:	4b2c      	ldr	r3, [pc, #176]	; (16ad4 <process_ble_packet+0x1070>)
   16a22:	791a      	ldrb	r2, [r3, #4]
   16a24:	4b41      	ldr	r3, [pc, #260]	; (16b2c <process_ble_packet+0x10c8>)
   16a26:	701a      	strb	r2, [r3, #0]
			Digital_RPM_Brightness = ble_recieve_packet.payload[3];
   16a28:	4b2a      	ldr	r3, [pc, #168]	; (16ad4 <process_ble_packet+0x1070>)
   16a2a:	795a      	ldrb	r2, [r3, #5]
   16a2c:	4b40      	ldr	r3, [pc, #256]	; (16b30 <process_ble_packet+0x10cc>)
   16a2e:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[4])>>7)==0x1, MODE_DIGITAL_RPM_CYCLE);
   16a30:	4b28      	ldr	r3, [pc, #160]	; (16ad4 <process_ble_packet+0x1070>)
   16a32:	799b      	ldrb	r3, [r3, #6]
   16a34:	09db      	lsrs	r3, r3, #7
   16a36:	b2db      	uxtb	r3, r3
   16a38:	3b01      	subs	r3, #1
   16a3a:	425a      	negs	r2, r3
   16a3c:	4153      	adcs	r3, r2
   16a3e:	b2d9      	uxtb	r1, r3
   16a40:	4b2d      	ldr	r3, [pc, #180]	; (16af8 <process_ble_packet+0x1094>)
   16a42:	2205      	movs	r2, #5
   16a44:	0018      	movs	r0, r3
   16a46:	4b2d      	ldr	r3, [pc, #180]	; (16afc <process_ble_packet+0x1098>)
   16a48:	4798      	blx	r3
			save_led_data();
   16a4a:	4b2d      	ldr	r3, [pc, #180]	; (16b00 <process_ble_packet+0x109c>)
   16a4c:	4798      	blx	r3
			break;
   16a4e:	e0ee      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_RPM_Throttle_Values:
			LIGHTS_ON = 1;
   16a50:	4b1e      	ldr	r3, [pc, #120]	; (16acc <process_ble_packet+0x1068>)
   16a52:	2201      	movs	r2, #1
   16a54:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_RPM_THROTTLE;
   16a56:	4b1e      	ldr	r3, [pc, #120]	; (16ad0 <process_ble_packet+0x106c>)
   16a58:	2206      	movs	r2, #6
   16a5a:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   16a5c:	4b1d      	ldr	r3, [pc, #116]	; (16ad4 <process_ble_packet+0x1070>)
   16a5e:	789b      	ldrb	r3, [r3, #2]
   16a60:	220f      	movs	r2, #15
   16a62:	4393      	bics	r3, r2
   16a64:	b2da      	uxtb	r2, r3
   16a66:	4b1c      	ldr	r3, [pc, #112]	; (16ad8 <process_ble_packet+0x1074>)
   16a68:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   16a6a:	4b1b      	ldr	r3, [pc, #108]	; (16ad8 <process_ble_packet+0x1074>)
   16a6c:	781b      	ldrb	r3, [r3, #0]
   16a6e:	111b      	asrs	r3, r3, #4
   16a70:	b2db      	uxtb	r3, r3
   16a72:	2201      	movs	r2, #1
   16a74:	4013      	ands	r3, r2
   16a76:	b2da      	uxtb	r2, r3
   16a78:	4b18      	ldr	r3, [pc, #96]	; (16adc <process_ble_packet+0x1078>)
   16a7a:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   16a7c:	4b16      	ldr	r3, [pc, #88]	; (16ad8 <process_ble_packet+0x1074>)
   16a7e:	781b      	ldrb	r3, [r3, #0]
   16a80:	115b      	asrs	r3, r3, #5
   16a82:	b2db      	uxtb	r3, r3
   16a84:	2201      	movs	r2, #1
   16a86:	4013      	ands	r3, r2
   16a88:	b2da      	uxtb	r2, r3
   16a8a:	4b15      	ldr	r3, [pc, #84]	; (16ae0 <process_ble_packet+0x107c>)
   16a8c:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   16a8e:	4b12      	ldr	r3, [pc, #72]	; (16ad8 <process_ble_packet+0x1074>)
   16a90:	781b      	ldrb	r3, [r3, #0]
   16a92:	119b      	asrs	r3, r3, #6
   16a94:	b2db      	uxtb	r3, r3
   16a96:	2201      	movs	r2, #1
   16a98:	4013      	ands	r3, r2
   16a9a:	b2da      	uxtb	r2, r3
   16a9c:	4b11      	ldr	r3, [pc, #68]	; (16ae4 <process_ble_packet+0x1080>)
   16a9e:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16aa0:	4b0d      	ldr	r3, [pc, #52]	; (16ad8 <process_ble_packet+0x1074>)
   16aa2:	781b      	ldrb	r3, [r3, #0]
   16aa4:	09db      	lsrs	r3, r3, #7
   16aa6:	b2da      	uxtb	r2, r3
   16aa8:	4b0f      	ldr	r3, [pc, #60]	; (16ae8 <process_ble_packet+0x1084>)
   16aaa:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[1])>>7)==0x1, MODE_DIGITAL_RPM_THROTTLE);
   16aac:	4b09      	ldr	r3, [pc, #36]	; (16ad4 <process_ble_packet+0x1070>)
   16aae:	78db      	ldrb	r3, [r3, #3]
   16ab0:	09db      	lsrs	r3, r3, #7
   16ab2:	b2db      	uxtb	r3, r3
   16ab4:	3b01      	subs	r3, #1
   16ab6:	425a      	negs	r2, r3
   16ab8:	4153      	adcs	r3, r2
   16aba:	b2d9      	uxtb	r1, r3
   16abc:	4b0e      	ldr	r3, [pc, #56]	; (16af8 <process_ble_packet+0x1094>)
   16abe:	2206      	movs	r2, #6
   16ac0:	0018      	movs	r0, r3
   16ac2:	4b0e      	ldr	r3, [pc, #56]	; (16afc <process_ble_packet+0x1098>)
   16ac4:	4798      	blx	r3
			save_led_data();
   16ac6:	4b0e      	ldr	r3, [pc, #56]	; (16b00 <process_ble_packet+0x109c>)
   16ac8:	4798      	blx	r3
			break;
   16aca:	e0b0      	b.n	16c2e <process_ble_packet+0x11ca>
   16acc:	200000d6 	.word	0x200000d6
   16ad0:	2000003c 	.word	0x2000003c
   16ad4:	20000700 	.word	0x20000700
   16ad8:	200003b0 	.word	0x200003b0
   16adc:	200000d5 	.word	0x200000d5
   16ae0:	200003ad 	.word	0x200003ad
   16ae4:	200003ae 	.word	0x200003ae
   16ae8:	200003af 	.word	0x200003af
   16aec:	200000b5 	.word	0x200000b5
   16af0:	200000b6 	.word	0x200000b6
   16af4:	200000b7 	.word	0x200000b7
   16af8:	200003aa 	.word	0x200003aa
   16afc:	0000f155 	.word	0x0000f155
   16b00:	000138d1 	.word	0x000138d1
   16b04:	200000b8 	.word	0x200000b8
   16b08:	200000b9 	.word	0x200000b9
   16b0c:	200000ba 	.word	0x200000ba
   16b10:	200000bb 	.word	0x200000bb
   16b14:	200000bc 	.word	0x200000bc
   16b18:	200000bd 	.word	0x200000bd
   16b1c:	200000be 	.word	0x200000be
   16b20:	200000bf 	.word	0x200000bf
   16b24:	200000c0 	.word	0x200000c0
   16b28:	200000c1 	.word	0x200000c1
   16b2c:	200000c2 	.word	0x200000c2
   16b30:	200000c3 	.word	0x200000c3
		case Digital_Compass_Wheel_Values:
			LIGHTS_ON = 1;
   16b34:	4b3f      	ldr	r3, [pc, #252]	; (16c34 <process_ble_packet+0x11d0>)
   16b36:	2201      	movs	r2, #1
   16b38:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_COMPASS_WHEEL;
   16b3a:	4b3f      	ldr	r3, [pc, #252]	; (16c38 <process_ble_packet+0x11d4>)
   16b3c:	2207      	movs	r2, #7
   16b3e:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   16b40:	4b3e      	ldr	r3, [pc, #248]	; (16c3c <process_ble_packet+0x11d8>)
   16b42:	789b      	ldrb	r3, [r3, #2]
   16b44:	220f      	movs	r2, #15
   16b46:	4393      	bics	r3, r2
   16b48:	b2da      	uxtb	r2, r3
   16b4a:	4b3d      	ldr	r3, [pc, #244]	; (16c40 <process_ble_packet+0x11dc>)
   16b4c:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   16b4e:	4b3c      	ldr	r3, [pc, #240]	; (16c40 <process_ble_packet+0x11dc>)
   16b50:	781b      	ldrb	r3, [r3, #0]
   16b52:	111b      	asrs	r3, r3, #4
   16b54:	b2db      	uxtb	r3, r3
   16b56:	2201      	movs	r2, #1
   16b58:	4013      	ands	r3, r2
   16b5a:	b2da      	uxtb	r2, r3
   16b5c:	4b39      	ldr	r3, [pc, #228]	; (16c44 <process_ble_packet+0x11e0>)
   16b5e:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   16b60:	4b37      	ldr	r3, [pc, #220]	; (16c40 <process_ble_packet+0x11dc>)
   16b62:	781b      	ldrb	r3, [r3, #0]
   16b64:	115b      	asrs	r3, r3, #5
   16b66:	b2db      	uxtb	r3, r3
   16b68:	2201      	movs	r2, #1
   16b6a:	4013      	ands	r3, r2
   16b6c:	b2da      	uxtb	r2, r3
   16b6e:	4b36      	ldr	r3, [pc, #216]	; (16c48 <process_ble_packet+0x11e4>)
   16b70:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   16b72:	4b33      	ldr	r3, [pc, #204]	; (16c40 <process_ble_packet+0x11dc>)
   16b74:	781b      	ldrb	r3, [r3, #0]
   16b76:	119b      	asrs	r3, r3, #6
   16b78:	b2db      	uxtb	r3, r3
   16b7a:	2201      	movs	r2, #1
   16b7c:	4013      	ands	r3, r2
   16b7e:	b2da      	uxtb	r2, r3
   16b80:	4b32      	ldr	r3, [pc, #200]	; (16c4c <process_ble_packet+0x11e8>)
   16b82:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16b84:	4b2e      	ldr	r3, [pc, #184]	; (16c40 <process_ble_packet+0x11dc>)
   16b86:	781b      	ldrb	r3, [r3, #0]
   16b88:	09db      	lsrs	r3, r3, #7
   16b8a:	b2da      	uxtb	r2, r3
   16b8c:	4b30      	ldr	r3, [pc, #192]	; (16c50 <process_ble_packet+0x11ec>)
   16b8e:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[1])>>7)==0x1, MODE_DIGITAL_COMPASS_WHEEL);
   16b90:	4b2a      	ldr	r3, [pc, #168]	; (16c3c <process_ble_packet+0x11d8>)
   16b92:	78db      	ldrb	r3, [r3, #3]
   16b94:	09db      	lsrs	r3, r3, #7
   16b96:	b2db      	uxtb	r3, r3
   16b98:	3b01      	subs	r3, #1
   16b9a:	425a      	negs	r2, r3
   16b9c:	4153      	adcs	r3, r2
   16b9e:	b2d9      	uxtb	r1, r3
   16ba0:	4b2c      	ldr	r3, [pc, #176]	; (16c54 <process_ble_packet+0x11f0>)
   16ba2:	2207      	movs	r2, #7
   16ba4:	0018      	movs	r0, r3
   16ba6:	4b2c      	ldr	r3, [pc, #176]	; (16c58 <process_ble_packet+0x11f4>)
   16ba8:	4798      	blx	r3
			save_led_data();
   16baa:	4b2c      	ldr	r3, [pc, #176]	; (16c5c <process_ble_packet+0x11f8>)
   16bac:	4798      	blx	r3
			break;
   16bae:	e03e      	b.n	16c2e <process_ble_packet+0x11ca>
		case Digital_Compass_Snake_Values:
			LIGHTS_ON = 1;
   16bb0:	4b20      	ldr	r3, [pc, #128]	; (16c34 <process_ble_packet+0x11d0>)
   16bb2:	2201      	movs	r2, #1
   16bb4:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_COMPASS_SNAKE;
   16bb6:	4b20      	ldr	r3, [pc, #128]	; (16c38 <process_ble_packet+0x11d4>)
   16bb8:	2208      	movs	r2, #8
   16bba:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   16bbc:	4b1f      	ldr	r3, [pc, #124]	; (16c3c <process_ble_packet+0x11d8>)
   16bbe:	789b      	ldrb	r3, [r3, #2]
   16bc0:	220f      	movs	r2, #15
   16bc2:	4393      	bics	r3, r2
   16bc4:	b2da      	uxtb	r2, r3
   16bc6:	4b1e      	ldr	r3, [pc, #120]	; (16c40 <process_ble_packet+0x11dc>)
   16bc8:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   16bca:	4b1d      	ldr	r3, [pc, #116]	; (16c40 <process_ble_packet+0x11dc>)
   16bcc:	781b      	ldrb	r3, [r3, #0]
   16bce:	111b      	asrs	r3, r3, #4
   16bd0:	b2db      	uxtb	r3, r3
   16bd2:	2201      	movs	r2, #1
   16bd4:	4013      	ands	r3, r2
   16bd6:	b2da      	uxtb	r2, r3
   16bd8:	4b1a      	ldr	r3, [pc, #104]	; (16c44 <process_ble_packet+0x11e0>)
   16bda:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   16bdc:	4b18      	ldr	r3, [pc, #96]	; (16c40 <process_ble_packet+0x11dc>)
   16bde:	781b      	ldrb	r3, [r3, #0]
   16be0:	115b      	asrs	r3, r3, #5
   16be2:	b2db      	uxtb	r3, r3
   16be4:	2201      	movs	r2, #1
   16be6:	4013      	ands	r3, r2
   16be8:	b2da      	uxtb	r2, r3
   16bea:	4b17      	ldr	r3, [pc, #92]	; (16c48 <process_ble_packet+0x11e4>)
   16bec:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   16bee:	4b14      	ldr	r3, [pc, #80]	; (16c40 <process_ble_packet+0x11dc>)
   16bf0:	781b      	ldrb	r3, [r3, #0]
   16bf2:	119b      	asrs	r3, r3, #6
   16bf4:	b2db      	uxtb	r3, r3
   16bf6:	2201      	movs	r2, #1
   16bf8:	4013      	ands	r3, r2
   16bfa:	b2da      	uxtb	r2, r3
   16bfc:	4b13      	ldr	r3, [pc, #76]	; (16c4c <process_ble_packet+0x11e8>)
   16bfe:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   16c00:	4b0f      	ldr	r3, [pc, #60]	; (16c40 <process_ble_packet+0x11dc>)
   16c02:	781b      	ldrb	r3, [r3, #0]
   16c04:	09db      	lsrs	r3, r3, #7
   16c06:	b2da      	uxtb	r2, r3
   16c08:	4b11      	ldr	r3, [pc, #68]	; (16c50 <process_ble_packet+0x11ec>)
   16c0a:	701a      	strb	r2, [r3, #0]
			set_mode_shuffle_state(&shuffled_digital_modes, ((0x80 & ble_recieve_packet.payload[1])>>7)==0x1, MODE_DIGITAL_COMPASS_SNAKE);
   16c0c:	4b0b      	ldr	r3, [pc, #44]	; (16c3c <process_ble_packet+0x11d8>)
   16c0e:	78db      	ldrb	r3, [r3, #3]
   16c10:	09db      	lsrs	r3, r3, #7
   16c12:	b2db      	uxtb	r3, r3
   16c14:	3b01      	subs	r3, #1
   16c16:	425a      	negs	r2, r3
   16c18:	4153      	adcs	r3, r2
   16c1a:	b2d9      	uxtb	r1, r3
   16c1c:	4b0d      	ldr	r3, [pc, #52]	; (16c54 <process_ble_packet+0x11f0>)
   16c1e:	2208      	movs	r2, #8
   16c20:	0018      	movs	r0, r3
   16c22:	4b0d      	ldr	r3, [pc, #52]	; (16c58 <process_ble_packet+0x11f4>)
   16c24:	4798      	blx	r3
			save_led_data();
   16c26:	4b0d      	ldr	r3, [pc, #52]	; (16c5c <process_ble_packet+0x11f8>)
   16c28:	4798      	blx	r3
			break;
   16c2a:	e000      	b.n	16c2e <process_ble_packet+0x11ca>
			break;
   16c2c:	46c0      	nop			; (mov r8, r8)
	}
}
   16c2e:	46c0      	nop			; (mov r8, r8)
   16c30:	46bd      	mov	sp, r7
   16c32:	bd80      	pop	{r7, pc}
   16c34:	200000d6 	.word	0x200000d6
   16c38:	2000003c 	.word	0x2000003c
   16c3c:	20000700 	.word	0x20000700
   16c40:	200003b0 	.word	0x200003b0
   16c44:	200000d5 	.word	0x200000d5
   16c48:	200003ad 	.word	0x200003ad
   16c4c:	200003ae 	.word	0x200003ae
   16c50:	200003af 	.word	0x200003af
   16c54:	200003aa 	.word	0x200003aa
   16c58:	0000f155 	.word	0x0000f155
   16c5c:	000138d1 	.word	0x000138d1

00016c60 <read_ble_packet>:

void read_ble_packet(){
   16c60:	b590      	push	{r4, r7, lr}
   16c62:	b083      	sub	sp, #12
   16c64:	af00      	add	r7, sp, #0
	if(check_ble_packet_recieved()){
   16c66:	4b46      	ldr	r3, [pc, #280]	; (16d80 <read_ble_packet+0x120>)
   16c68:	4798      	blx	r3
   16c6a:	1e03      	subs	r3, r0, #0
   16c6c:	d027      	beq.n	16cbe <read_ble_packet+0x5e>
		ble_recieve_packet.size = ble_USART_read_buffer[1];
   16c6e:	4b45      	ldr	r3, [pc, #276]	; (16d84 <read_ble_packet+0x124>)
   16c70:	785a      	ldrb	r2, [r3, #1]
   16c72:	4b45      	ldr	r3, [pc, #276]	; (16d88 <read_ble_packet+0x128>)
   16c74:	705a      	strb	r2, [r3, #1]
		ble_recieve_packet.ID = ble_USART_read_buffer[2];
   16c76:	4b43      	ldr	r3, [pc, #268]	; (16d84 <read_ble_packet+0x124>)
   16c78:	789a      	ldrb	r2, [r3, #2]
   16c7a:	4b43      	ldr	r3, [pc, #268]	; (16d88 <read_ble_packet+0x128>)
   16c7c:	701a      	strb	r2, [r3, #0]
		memcpy(ble_recieve_packet.payload, ble_USART_read_buffer+3, ble_recieve_packet.size);
   16c7e:	4943      	ldr	r1, [pc, #268]	; (16d8c <read_ble_packet+0x12c>)
   16c80:	4b41      	ldr	r3, [pc, #260]	; (16d88 <read_ble_packet+0x128>)
   16c82:	785b      	ldrb	r3, [r3, #1]
   16c84:	001a      	movs	r2, r3
   16c86:	4b42      	ldr	r3, [pc, #264]	; (16d90 <read_ble_packet+0x130>)
   16c88:	0018      	movs	r0, r3
   16c8a:	4b42      	ldr	r3, [pc, #264]	; (16d94 <read_ble_packet+0x134>)
   16c8c:	4798      	blx	r3

		process_ble_packet();
   16c8e:	4b42      	ldr	r3, [pc, #264]	; (16d98 <read_ble_packet+0x138>)
   16c90:	4798      	blx	r3
			
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX); //Stop listening to the BLE UART
   16c92:	4b42      	ldr	r3, [pc, #264]	; (16d9c <read_ble_packet+0x13c>)
   16c94:	2100      	movs	r1, #0
   16c96:	0018      	movs	r0, r3
   16c98:	4b41      	ldr	r3, [pc, #260]	; (16da0 <read_ble_packet+0x140>)
   16c9a:	4798      	blx	r3
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE); // Clear BLE read buffer
   16c9c:	2304      	movs	r3, #4
   16c9e:	33ff      	adds	r3, #255	; 0xff
   16ca0:	001a      	movs	r2, r3
   16ca2:	4b38      	ldr	r3, [pc, #224]	; (16d84 <read_ble_packet+0x124>)
   16ca4:	2100      	movs	r1, #0
   16ca6:	0018      	movs	r0, r3
   16ca8:	4b3e      	ldr	r3, [pc, #248]	; (16da4 <read_ble_packet+0x144>)
   16caa:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE); // Start listening to the BLE UART
   16cac:	2304      	movs	r3, #4
   16cae:	33ff      	adds	r3, #255	; 0xff
   16cb0:	001a      	movs	r2, r3
   16cb2:	4934      	ldr	r1, [pc, #208]	; (16d84 <read_ble_packet+0x124>)
   16cb4:	4b39      	ldr	r3, [pc, #228]	; (16d9c <read_ble_packet+0x13c>)
   16cb6:	0018      	movs	r0, r3
   16cb8:	4b3b      	ldr	r3, [pc, #236]	; (16da8 <read_ble_packet+0x148>)
   16cba:	4798      	blx	r3
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
		uint32_t temp_timer = millis();
		while(!check_timer_expired(&temp_timer,10)){}
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);// Start listening to the BLE UART
	}
}
   16cbc:	e05b      	b.n	16d76 <read_ble_packet+0x116>
	} else if(check_ble_AT_recieved()){
   16cbe:	4b3b      	ldr	r3, [pc, #236]	; (16dac <read_ble_packet+0x14c>)
   16cc0:	4798      	blx	r3
   16cc2:	1e03      	subs	r3, r0, #0
   16cc4:	d026      	beq.n	16d14 <read_ble_packet+0xb4>
		if(!BLE_CONFIGURED && OK_EXPECTED){
   16cc6:	4b3a      	ldr	r3, [pc, #232]	; (16db0 <read_ble_packet+0x150>)
   16cc8:	781b      	ldrb	r3, [r3, #0]
   16cca:	2201      	movs	r2, #1
   16ccc:	4053      	eors	r3, r2
   16cce:	b2db      	uxtb	r3, r3
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d009      	beq.n	16ce8 <read_ble_packet+0x88>
   16cd4:	4b37      	ldr	r3, [pc, #220]	; (16db4 <read_ble_packet+0x154>)
   16cd6:	781b      	ldrb	r3, [r3, #0]
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d005      	beq.n	16ce8 <read_ble_packet+0x88>
			BLE_CONFIGURED = true;
   16cdc:	4b34      	ldr	r3, [pc, #208]	; (16db0 <read_ble_packet+0x150>)
   16cde:	2201      	movs	r2, #1
   16ce0:	701a      	strb	r2, [r3, #0]
			OK_EXPECTED = false;
   16ce2:	4b34      	ldr	r3, [pc, #208]	; (16db4 <read_ble_packet+0x154>)
   16ce4:	2200      	movs	r2, #0
   16ce6:	701a      	strb	r2, [r3, #0]
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX); //Stop listening to the BLE UART
   16ce8:	4b2c      	ldr	r3, [pc, #176]	; (16d9c <read_ble_packet+0x13c>)
   16cea:	2100      	movs	r1, #0
   16cec:	0018      	movs	r0, r3
   16cee:	4b2c      	ldr	r3, [pc, #176]	; (16da0 <read_ble_packet+0x140>)
   16cf0:	4798      	blx	r3
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE); // Clear BLE read buffer
   16cf2:	2304      	movs	r3, #4
   16cf4:	33ff      	adds	r3, #255	; 0xff
   16cf6:	001a      	movs	r2, r3
   16cf8:	4b22      	ldr	r3, [pc, #136]	; (16d84 <read_ble_packet+0x124>)
   16cfa:	2100      	movs	r1, #0
   16cfc:	0018      	movs	r0, r3
   16cfe:	4b29      	ldr	r3, [pc, #164]	; (16da4 <read_ble_packet+0x144>)
   16d00:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE); // Start listening to the BLE UART
   16d02:	2304      	movs	r3, #4
   16d04:	33ff      	adds	r3, #255	; 0xff
   16d06:	001a      	movs	r2, r3
   16d08:	491e      	ldr	r1, [pc, #120]	; (16d84 <read_ble_packet+0x124>)
   16d0a:	4b24      	ldr	r3, [pc, #144]	; (16d9c <read_ble_packet+0x13c>)
   16d0c:	0018      	movs	r0, r3
   16d0e:	4b26      	ldr	r3, [pc, #152]	; (16da8 <read_ble_packet+0x148>)
   16d10:	4798      	blx	r3
}
   16d12:	e030      	b.n	16d76 <read_ble_packet+0x116>
	} else if(CHECK_FOR_NOISE_BLE(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE, &ble_noise_timer)){
   16d14:	4c28      	ldr	r4, [pc, #160]	; (16db8 <read_ble_packet+0x158>)
   16d16:	2304      	movs	r3, #4
   16d18:	33ff      	adds	r3, #255	; 0xff
   16d1a:	001a      	movs	r2, r3
   16d1c:	4919      	ldr	r1, [pc, #100]	; (16d84 <read_ble_packet+0x124>)
   16d1e:	481f      	ldr	r0, [pc, #124]	; (16d9c <read_ble_packet+0x13c>)
   16d20:	0023      	movs	r3, r4
   16d22:	4c26      	ldr	r4, [pc, #152]	; (16dbc <read_ble_packet+0x15c>)
   16d24:	47a0      	blx	r4
   16d26:	1e03      	subs	r3, r0, #0
   16d28:	d025      	beq.n	16d76 <read_ble_packet+0x116>
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX); //Stop listening to the BLE UART
   16d2a:	4b1c      	ldr	r3, [pc, #112]	; (16d9c <read_ble_packet+0x13c>)
   16d2c:	2100      	movs	r1, #0
   16d2e:	0018      	movs	r0, r3
   16d30:	4b1b      	ldr	r3, [pc, #108]	; (16da0 <read_ble_packet+0x140>)
   16d32:	4798      	blx	r3
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
   16d34:	2304      	movs	r3, #4
   16d36:	33ff      	adds	r3, #255	; 0xff
   16d38:	001a      	movs	r2, r3
   16d3a:	4b12      	ldr	r3, [pc, #72]	; (16d84 <read_ble_packet+0x124>)
   16d3c:	2100      	movs	r1, #0
   16d3e:	0018      	movs	r0, r3
   16d40:	4b18      	ldr	r3, [pc, #96]	; (16da4 <read_ble_packet+0x144>)
   16d42:	4798      	blx	r3
		uint32_t temp_timer = millis();
   16d44:	4b1e      	ldr	r3, [pc, #120]	; (16dc0 <read_ble_packet+0x160>)
   16d46:	4798      	blx	r3
   16d48:	0003      	movs	r3, r0
   16d4a:	607b      	str	r3, [r7, #4]
		while(!check_timer_expired(&temp_timer,10)){}
   16d4c:	46c0      	nop			; (mov r8, r8)
   16d4e:	1d3b      	adds	r3, r7, #4
   16d50:	210a      	movs	r1, #10
   16d52:	0018      	movs	r0, r3
   16d54:	4b1b      	ldr	r3, [pc, #108]	; (16dc4 <read_ble_packet+0x164>)
   16d56:	4798      	blx	r3
   16d58:	0003      	movs	r3, r0
   16d5a:	001a      	movs	r2, r3
   16d5c:	2301      	movs	r3, #1
   16d5e:	4053      	eors	r3, r2
   16d60:	b2db      	uxtb	r3, r3
   16d62:	2b00      	cmp	r3, #0
   16d64:	d1f3      	bne.n	16d4e <read_ble_packet+0xee>
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);// Start listening to the BLE UART
   16d66:	2304      	movs	r3, #4
   16d68:	33ff      	adds	r3, #255	; 0xff
   16d6a:	001a      	movs	r2, r3
   16d6c:	4905      	ldr	r1, [pc, #20]	; (16d84 <read_ble_packet+0x124>)
   16d6e:	4b0b      	ldr	r3, [pc, #44]	; (16d9c <read_ble_packet+0x13c>)
   16d70:	0018      	movs	r0, r3
   16d72:	4b0d      	ldr	r3, [pc, #52]	; (16da8 <read_ble_packet+0x148>)
   16d74:	4798      	blx	r3
}
   16d76:	46c0      	nop			; (mov r8, r8)
   16d78:	46bd      	mov	sp, r7
   16d7a:	b003      	add	sp, #12
   16d7c:	bd90      	pop	{r4, r7, pc}
   16d7e:	46c0      	nop			; (mov r8, r8)
   16d80:	00015a31 	.word	0x00015a31
   16d84:	200017f4 	.word	0x200017f4
   16d88:	20000700 	.word	0x20000700
   16d8c:	200017f7 	.word	0x200017f7
   16d90:	20000702 	.word	0x20000702
   16d94:	0001c15d 	.word	0x0001c15d
   16d98:	00015a65 	.word	0x00015a65
   16d9c:	200006cc 	.word	0x200006cc
   16da0:	000066b9 	.word	0x000066b9
   16da4:	0001c193 	.word	0x0001c193
   16da8:	00006671 	.word	0x00006671
   16dac:	00015a05 	.word	0x00015a05
   16db0:	20000443 	.word	0x20000443
   16db4:	2000044b 	.word	0x2000044b
   16db8:	20000450 	.word	0x20000450
   16dbc:	00016dc9 	.word	0x00016dc9
   16dc0:	00009f65 	.word	0x00009f65
   16dc4:	00009fbd 	.word	0x00009fbd

00016dc8 <CHECK_FOR_NOISE_BLE>:
		}
	}
	usart_write_buffer_wait(&ble_usart, txbuf, 20);
}

bool CHECK_FOR_NOISE_BLE(struct usart_module *const module, uint8_t buf[MAX_PAYLOAD_LEN+6], uint16_t max_size, uint32_t *noise_timer){
   16dc8:	b580      	push	{r7, lr}
   16dca:	b084      	sub	sp, #16
   16dcc:	af00      	add	r7, sp, #0
   16dce:	60f8      	str	r0, [r7, #12]
   16dd0:	60b9      	str	r1, [r7, #8]
   16dd2:	603b      	str	r3, [r7, #0]
   16dd4:	1dbb      	adds	r3, r7, #6
   16dd6:	801a      	strh	r2, [r3, #0]
	if(buf[0] != BLE_START_BYTE && module->remaining_rx_buffer_length != max_size){
   16dd8:	68bb      	ldr	r3, [r7, #8]
   16dda:	781b      	ldrb	r3, [r3, #0]
   16ddc:	2ba5      	cmp	r3, #165	; 0xa5
   16dde:	d008      	beq.n	16df2 <CHECK_FOR_NOISE_BLE+0x2a>
   16de0:	68fb      	ldr	r3, [r7, #12]
   16de2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   16de4:	b29b      	uxth	r3, r3
   16de6:	1dba      	adds	r2, r7, #6
   16de8:	8812      	ldrh	r2, [r2, #0]
   16dea:	429a      	cmp	r2, r3
   16dec:	d001      	beq.n	16df2 <CHECK_FOR_NOISE_BLE+0x2a>
		return true;
   16dee:	2301      	movs	r3, #1
   16df0:	e01f      	b.n	16e32 <CHECK_FOR_NOISE_BLE+0x6a>
	} else if(buf[0] == BLE_START_BYTE && !check_ble_packet_recieved()){
   16df2:	68bb      	ldr	r3, [r7, #8]
   16df4:	781b      	ldrb	r3, [r3, #0]
   16df6:	2ba5      	cmp	r3, #165	; 0xa5
   16df8:	d115      	bne.n	16e26 <CHECK_FOR_NOISE_BLE+0x5e>
   16dfa:	4b10      	ldr	r3, [pc, #64]	; (16e3c <CHECK_FOR_NOISE_BLE+0x74>)
   16dfc:	4798      	blx	r3
   16dfe:	0003      	movs	r3, r0
   16e00:	001a      	movs	r2, r3
   16e02:	2301      	movs	r3, #1
   16e04:	4053      	eors	r3, r2
   16e06:	b2db      	uxtb	r3, r3
   16e08:	2b00      	cmp	r3, #0
   16e0a:	d00c      	beq.n	16e26 <CHECK_FOR_NOISE_BLE+0x5e>
		if(check_timer_expired(noise_timer,500)){
   16e0c:	23fa      	movs	r3, #250	; 0xfa
   16e0e:	005a      	lsls	r2, r3, #1
   16e10:	683b      	ldr	r3, [r7, #0]
   16e12:	0011      	movs	r1, r2
   16e14:	0018      	movs	r0, r3
   16e16:	4b0a      	ldr	r3, [pc, #40]	; (16e40 <CHECK_FOR_NOISE_BLE+0x78>)
   16e18:	4798      	blx	r3
   16e1a:	1e03      	subs	r3, r0, #0
   16e1c:	d001      	beq.n	16e22 <CHECK_FOR_NOISE_BLE+0x5a>
			return true;
   16e1e:	2301      	movs	r3, #1
   16e20:	e007      	b.n	16e32 <CHECK_FOR_NOISE_BLE+0x6a>
		}else{
			return false;
   16e22:	2300      	movs	r3, #0
   16e24:	e005      	b.n	16e32 <CHECK_FOR_NOISE_BLE+0x6a>
		}
	} else {
		*noise_timer = millis();
   16e26:	4b07      	ldr	r3, [pc, #28]	; (16e44 <CHECK_FOR_NOISE_BLE+0x7c>)
   16e28:	4798      	blx	r3
   16e2a:	0002      	movs	r2, r0
   16e2c:	683b      	ldr	r3, [r7, #0]
   16e2e:	601a      	str	r2, [r3, #0]
		return false;
   16e30:	2300      	movs	r3, #0
	}
}
   16e32:	0018      	movs	r0, r3
   16e34:	46bd      	mov	sp, r7
   16e36:	b004      	add	sp, #16
   16e38:	bd80      	pop	{r7, pc}
   16e3a:	46c0      	nop			; (mov r8, r8)
   16e3c:	00015a31 	.word	0x00015a31
   16e40:	00009fbd 	.word	0x00009fbd
   16e44:	00009f65 	.word	0x00009f65

00016e48 <configure_ADC>:
void configure_eeprom(void);


// Configure the light sensor port as an input
void configure_ADC(void)
{
   16e48:	b580      	push	{r7, lr}
   16e4a:	b08e      	sub	sp, #56	; 0x38
   16e4c:	af00      	add	r7, sp, #0
	for(int i = 0; i < LGHTsamples; ++i){
   16e4e:	2300      	movs	r3, #0
   16e50:	637b      	str	r3, [r7, #52]	; 0x34
   16e52:	e007      	b.n	16e64 <configure_ADC+0x1c>
		LGHTaverage[i] = 0;
   16e54:	4b1a      	ldr	r3, [pc, #104]	; (16ec0 <configure_ADC+0x78>)
   16e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16e58:	0052      	lsls	r2, r2, #1
   16e5a:	2100      	movs	r1, #0
   16e5c:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < LGHTsamples; ++i){
   16e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e60:	3301      	adds	r3, #1
   16e62:	637b      	str	r3, [r7, #52]	; 0x34
   16e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e66:	2b95      	cmp	r3, #149	; 0x95
   16e68:	ddf4      	ble.n	16e54 <configure_ADC+0xc>
	}

	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
   16e6a:	1d3b      	adds	r3, r7, #4
   16e6c:	0018      	movs	r0, r3
   16e6e:	4b15      	ldr	r3, [pc, #84]	; (16ec4 <configure_ADC+0x7c>)
   16e70:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INTVCC1;
   16e72:	1d3b      	adds	r3, r7, #4
   16e74:	2202      	movs	r2, #2
   16e76:	705a      	strb	r2, [r3, #1]
	config_adc.resolution = ADC_RESOLUTION_16BIT;
   16e78:	1d3b      	adds	r3, r7, #4
   16e7a:	2210      	movs	r2, #16
   16e7c:	711a      	strb	r2, [r3, #4]
	config_adc.differential_mode = DISABLE;
   16e7e:	1d3b      	adds	r3, r7, #4
   16e80:	2200      	movs	r2, #0
   16e82:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
   16e84:	1d3b      	adds	r3, r7, #4
   16e86:	22c0      	movs	r2, #192	; 0xc0
   16e88:	0152      	lsls	r2, r2, #5
   16e8a:	81da      	strh	r2, [r3, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN17;
   16e8c:	1d3b      	adds	r3, r7, #4
   16e8e:	2211      	movs	r2, #17
   16e90:	731a      	strb	r2, [r3, #12]
	config_adc.freerunning = DISABLE;
   16e92:	1d3b      	adds	r3, r7, #4
   16e94:	2200      	movs	r2, #0
   16e96:	751a      	strb	r2, [r3, #20]
	config_adc.run_in_standby = true;
   16e98:	1d3b      	adds	r3, r7, #4
   16e9a:	2201      	movs	r2, #1
   16e9c:	755a      	strb	r2, [r3, #21]
	config_adc.left_adjust = false;
   16e9e:	1d3b      	adds	r3, r7, #4
   16ea0:	2200      	movs	r2, #0
   16ea2:	749a      	strb	r2, [r3, #18]
	adc_init(&adc1, ADC, &config_adc);
   16ea4:	1d3a      	adds	r2, r7, #4
   16ea6:	4908      	ldr	r1, [pc, #32]	; (16ec8 <configure_ADC+0x80>)
   16ea8:	4b08      	ldr	r3, [pc, #32]	; (16ecc <configure_ADC+0x84>)
   16eaa:	0018      	movs	r0, r3
   16eac:	4b08      	ldr	r3, [pc, #32]	; (16ed0 <configure_ADC+0x88>)
   16eae:	4798      	blx	r3
	adc_enable(&adc1);
   16eb0:	4b06      	ldr	r3, [pc, #24]	; (16ecc <configure_ADC+0x84>)
   16eb2:	0018      	movs	r0, r3
   16eb4:	4b07      	ldr	r3, [pc, #28]	; (16ed4 <configure_ADC+0x8c>)
   16eb6:	4798      	blx	r3
}
   16eb8:	46c0      	nop			; (mov r8, r8)
   16eba:	46bd      	mov	sp, r7
   16ebc:	b00e      	add	sp, #56	; 0x38
   16ebe:	bd80      	pop	{r7, pc}
   16ec0:	20000cc0 	.word	0x20000cc0
   16ec4:	00002219 	.word	0x00002219
   16ec8:	42004000 	.word	0x42004000
   16ecc:	20000fa4 	.word	0x20000fa4
   16ed0:	00002869 	.word	0x00002869
   16ed4:	0000967d 	.word	0x0000967d

00016ed8 <configure_port_pins>:

// Configure the LED selection port as output
void configure_port_pins(void)
{
   16ed8:	b580      	push	{r7, lr}
   16eda:	b082      	sub	sp, #8
   16edc:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16ede:	1d3b      	adds	r3, r7, #4
   16ee0:	0018      	movs	r0, r3
   16ee2:	4b35      	ldr	r3, [pc, #212]	; (16fb8 <configure_port_pins+0xe0>)
   16ee4:	4798      	blx	r3
	
	if(RGB_led_type == RGB_DIGITAL_APA102){// || RGB_led_type == RGB_DIGITAL_WS2815){
   16ee6:	4b35      	ldr	r3, [pc, #212]	; (16fbc <configure_port_pins+0xe4>)
   16ee8:	781b      	ldrb	r3, [r3, #0]
   16eea:	2b01      	cmp	r3, #1
   16eec:	d11d      	bne.n	16f2a <configure_port_pins+0x52>
		config_port_pin.powersave = false;
   16eee:	1d3b      	adds	r3, r7, #4
   16ef0:	2200      	movs	r2, #0
   16ef2:	709a      	strb	r2, [r3, #2]
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16ef4:	1d3b      	adds	r3, r7, #4
   16ef6:	2201      	movs	r2, #1
   16ef8:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(L_GND, &config_port_pin);
   16efa:	1d3b      	adds	r3, r7, #4
   16efc:	0019      	movs	r1, r3
   16efe:	2007      	movs	r0, #7
   16f00:	4b2f      	ldr	r3, [pc, #188]	; (16fc0 <configure_port_pins+0xe8>)
   16f02:	4798      	blx	r3
		port_pin_set_output_level(L_GND,false);
   16f04:	2100      	movs	r1, #0
   16f06:	2007      	movs	r0, #7
   16f08:	4b2e      	ldr	r3, [pc, #184]	; (16fc4 <configure_port_pins+0xec>)
   16f0a:	4798      	blx	r3

		config_port_pin.powersave = false;
   16f0c:	1d3b      	adds	r3, r7, #4
   16f0e:	2200      	movs	r2, #0
   16f10:	709a      	strb	r2, [r3, #2]
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16f12:	1d3b      	adds	r3, r7, #4
   16f14:	2201      	movs	r2, #1
   16f16:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(R_GND, &config_port_pin);
   16f18:	1d3b      	adds	r3, r7, #4
   16f1a:	0019      	movs	r1, r3
   16f1c:	200e      	movs	r0, #14
   16f1e:	4b28      	ldr	r3, [pc, #160]	; (16fc0 <configure_port_pins+0xe8>)
   16f20:	4798      	blx	r3
		port_pin_set_output_level(L_GND,false);
   16f22:	2100      	movs	r1, #0
   16f24:	2007      	movs	r0, #7
   16f26:	4b27      	ldr	r3, [pc, #156]	; (16fc4 <configure_port_pins+0xec>)
   16f28:	4798      	blx	r3
	}
	
	config_port_pin.powersave = false;
   16f2a:	1d3b      	adds	r3, r7, #4
   16f2c:	2200      	movs	r2, #0
   16f2e:	709a      	strb	r2, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16f30:	1d3b      	adds	r3, r7, #4
   16f32:	2201      	movs	r2, #1
   16f34:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA06E_TCC1_WO0, &config_port_pin);
   16f36:	1d3b      	adds	r3, r7, #4
   16f38:	0019      	movs	r1, r3
   16f3a:	2006      	movs	r0, #6
   16f3c:	4b20      	ldr	r3, [pc, #128]	; (16fc0 <configure_port_pins+0xe8>)
   16f3e:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0,false);
   16f40:	2100      	movs	r1, #0
   16f42:	2006      	movs	r0, #6
   16f44:	4b1f      	ldr	r3, [pc, #124]	; (16fc4 <configure_port_pins+0xec>)
   16f46:	4798      	blx	r3

	config_port_pin.powersave = false;
   16f48:	1d3b      	adds	r3, r7, #4
   16f4a:	2200      	movs	r2, #0
   16f4c:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
   16f4e:	1d3b      	adds	r3, r7, #4
   16f50:	2201      	movs	r2, #1
   16f52:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   16f54:	1d3b      	adds	r3, r7, #4
   16f56:	2200      	movs	r2, #0
   16f58:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PPM_IN, &config_port_pin);
   16f5a:	1d3b      	adds	r3, r7, #4
   16f5c:	0019      	movs	r1, r3
   16f5e:	2022      	movs	r0, #34	; 0x22
   16f60:	4b17      	ldr	r3, [pc, #92]	; (16fc0 <configure_port_pins+0xe8>)
   16f62:	4798      	blx	r3
	
	// Set the ESC UART pins as inputs to detect of the ESC was connected
	config_port_pin.powersave = false;
   16f64:	1d3b      	adds	r3, r7, #4
   16f66:	2200      	movs	r2, #0
   16f68:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
   16f6a:	1d3b      	adds	r3, r7, #4
   16f6c:	2202      	movs	r2, #2
   16f6e:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   16f70:	1d3b      	adds	r3, r7, #4
   16f72:	2200      	movs	r2, #0
   16f74:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ESC_UART_RXTX_1, &config_port_pin);
   16f76:	1d3b      	adds	r3, r7, #4
   16f78:	0019      	movs	r1, r3
   16f7a:	2010      	movs	r0, #16
   16f7c:	4b10      	ldr	r3, [pc, #64]	; (16fc0 <configure_port_pins+0xe8>)
   16f7e:	4798      	blx	r3
	port_pin_set_config(ESC_UART_RXTX_2, &config_port_pin);
   16f80:	1d3b      	adds	r3, r7, #4
   16f82:	0019      	movs	r1, r3
   16f84:	2011      	movs	r0, #17
   16f86:	4b0e      	ldr	r3, [pc, #56]	; (16fc0 <configure_port_pins+0xe8>)
   16f88:	4798      	blx	r3
	
	config_port_pin.powersave = false;
   16f8a:	1d3b      	adds	r3, r7, #4
   16f8c:	2200      	movs	r2, #0
   16f8e:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
   16f90:	1d3b      	adds	r3, r7, #4
   16f92:	2200      	movs	r2, #0
   16f94:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16f96:	1d3b      	adds	r3, r7, #4
   16f98:	2201      	movs	r2, #1
   16f9a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(HORN_PIN, &config_port_pin);
   16f9c:	1d3b      	adds	r3, r7, #4
   16f9e:	0019      	movs	r1, r3
   16fa0:	2008      	movs	r0, #8
   16fa2:	4b07      	ldr	r3, [pc, #28]	; (16fc0 <configure_port_pins+0xe8>)
   16fa4:	4798      	blx	r3
	port_pin_set_output_level(HORN_PIN,true);
   16fa6:	2101      	movs	r1, #1
   16fa8:	2008      	movs	r0, #8
   16faa:	4b06      	ldr	r3, [pc, #24]	; (16fc4 <configure_port_pins+0xec>)
   16fac:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(STAT_LED, &config_port_pin);
	port_pin_set_output_level(STAT_LED,false);
#endif
}
   16fae:	46c0      	nop			; (mov r8, r8)
   16fb0:	46bd      	mov	sp, r7
   16fb2:	b002      	add	sp, #8
   16fb4:	bd80      	pop	{r7, pc}
   16fb6:	46c0      	nop			; (mov r8, r8)
   16fb8:	000097ad 	.word	0x000097ad
   16fbc:	20001a88 	.word	0x20001a88
   16fc0:	00007bcd 	.word	0x00007bcd
   16fc4:	00009815 	.word	0x00009815

00016fc8 <configure_i2c_slave>:
	}
}

// Configure SERCOM1 as I2C slave for VESC communication
void configure_i2c_slave(void)
{	
   16fc8:	b580      	push	{r7, lr}
   16fca:	b08a      	sub	sp, #40	; 0x28
   16fcc:	af00      	add	r7, sp, #0
	/* Create and initialize config_i2c_slave structure */
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
   16fce:	003b      	movs	r3, r7
   16fd0:	0018      	movs	r0, r3
   16fd2:	4b0f      	ldr	r3, [pc, #60]	; (17010 <configure_i2c_slave+0x48>)
   16fd4:	4798      	blx	r3
	/* Change address and address_mode */
	config_i2c_slave.address        = SLAVE_ADDRESS;
   16fd6:	003b      	movs	r3, r7
   16fd8:	2212      	movs	r2, #18
   16fda:	819a      	strh	r2, [r3, #12]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_MASK;
   16fdc:	003b      	movs	r3, r7
   16fde:	2200      	movs	r2, #0
   16fe0:	815a      	strh	r2, [r3, #10]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   16fe2:	003b      	movs	r3, r7
   16fe4:	4a0b      	ldr	r2, [pc, #44]	; (17014 <configure_i2c_slave+0x4c>)
   16fe6:	61da      	str	r2, [r3, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   16fe8:	003b      	movs	r3, r7
   16fea:	4a0b      	ldr	r2, [pc, #44]	; (17018 <configure_i2c_slave+0x50>)
   16fec:	621a      	str	r2, [r3, #32]
	config_i2c_slave.generator_source = GCLK_GENERATOR_0;
   16fee:	003b      	movs	r3, r7
   16ff0:	2200      	movs	r2, #0
   16ff2:	765a      	strb	r2, [r3, #25]
	/* Initialize and enable device with config_i2c_slave */
	i2c_slave_init(&i2c_slave_instance, SERCOM1, &config_i2c_slave);
   16ff4:	003a      	movs	r2, r7
   16ff6:	4909      	ldr	r1, [pc, #36]	; (1701c <configure_i2c_slave+0x54>)
   16ff8:	4b09      	ldr	r3, [pc, #36]	; (17020 <configure_i2c_slave+0x58>)
   16ffa:	0018      	movs	r0, r3
   16ffc:	4b09      	ldr	r3, [pc, #36]	; (17024 <configure_i2c_slave+0x5c>)
   16ffe:	4798      	blx	r3
	i2c_slave_enable(&i2c_slave_instance);
   17000:	4b07      	ldr	r3, [pc, #28]	; (17020 <configure_i2c_slave+0x58>)
   17002:	0018      	movs	r0, r3
   17004:	4b08      	ldr	r3, [pc, #32]	; (17028 <configure_i2c_slave+0x60>)
   17006:	4798      	blx	r3
}
   17008:	46c0      	nop			; (mov r8, r8)
   1700a:	46bd      	mov	sp, r7
   1700c:	b00a      	add	sp, #40	; 0x28
   1700e:	bd80      	pop	{r7, pc}
   17010:	00009a4d 	.word	0x00009a4d
   17014:	00100002 	.word	0x00100002
   17018:	00110002 	.word	0x00110002
   1701c:	42000c00 	.word	0x42000c00
   17020:	20001af0 	.word	0x20001af0
   17024:	000044b5 	.word	0x000044b5
   17028:	00009acd 	.word	0x00009acd

0001702c <i2c_write_request_callback>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
   1702c:	b580      	push	{r7, lr}
   1702e:	b082      	sub	sp, #8
   17030:	af00      	add	r7, sp, #0
   17032:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	packet.data_length = SLAVE_READ_DATA_LENGTH;
   17034:	4bae      	ldr	r3, [pc, #696]	; (172f0 <i2c_write_request_callback+0x2c4>)
   17036:	221e      	movs	r2, #30
   17038:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_read_buffer;
   1703a:	4bad      	ldr	r3, [pc, #692]	; (172f0 <i2c_write_request_callback+0x2c4>)
   1703c:	4aad      	ldr	r2, [pc, #692]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1703e:	605a      	str	r2, [r3, #4]
	
	if(FIRST_MESSAGE == 1){
   17040:	4bad      	ldr	r3, [pc, #692]	; (172f8 <i2c_write_request_callback+0x2cc>)
   17042:	781b      	ldrb	r3, [r3, #0]
   17044:	2b01      	cmp	r3, #1
   17046:	d105      	bne.n	17054 <i2c_write_request_callback+0x28>
		FIRST_MESSAGE = 0;
   17048:	4bab      	ldr	r3, [pc, #684]	; (172f8 <i2c_write_request_callback+0x2cc>)
   1704a:	2200      	movs	r2, #0
   1704c:	701a      	strb	r2, [r3, #0]
		GET_LIMITS = 1; // Read the limits on first message to set lighting variables
   1704e:	4bab      	ldr	r3, [pc, #684]	; (172fc <i2c_write_request_callback+0x2d0>)
   17050:	2201      	movs	r2, #1
   17052:	701a      	strb	r2, [r3, #0]
	}
	i2c_slave_read_packet_job(module, &packet);
   17054:	4aa6      	ldr	r2, [pc, #664]	; (172f0 <i2c_write_request_callback+0x2c4>)
   17056:	687b      	ldr	r3, [r7, #4]
   17058:	0011      	movs	r1, r2
   1705a:	0018      	movs	r0, r3
   1705c:	4ba8      	ldr	r3, [pc, #672]	; (17300 <i2c_write_request_callback+0x2d4>)
   1705e:	4798      	blx	r3
		if(I2C_slave_read_buffer[0] == 0x8D && I2C_slave_read_buffer[28] == 0xAD) {
   17060:	4ba4      	ldr	r3, [pc, #656]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17062:	781b      	ldrb	r3, [r3, #0]
   17064:	2b8d      	cmp	r3, #141	; 0x8d
   17066:	d000      	beq.n	1706a <i2c_write_request_callback+0x3e>
   17068:	e090      	b.n	1718c <i2c_write_request_callback+0x160>
   1706a:	4ba2      	ldr	r3, [pc, #648]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1706c:	7f1b      	ldrb	r3, [r3, #28]
   1706e:	2bad      	cmp	r3, #173	; 0xad
   17070:	d000      	beq.n	17074 <i2c_write_request_callback+0x48>
   17072:	e08b      	b.n	1718c <i2c_write_request_callback+0x160>
			mcconf_limits.motor_current_max = I2C_slave_read_buffer[1];
   17074:	4b9f      	ldr	r3, [pc, #636]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17076:	785b      	ldrb	r3, [r3, #1]
   17078:	001a      	movs	r2, r3
   1707a:	4ba2      	ldr	r3, [pc, #648]	; (17304 <i2c_write_request_callback+0x2d8>)
   1707c:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = I2C_slave_read_buffer[2];
   1707e:	4b9d      	ldr	r3, [pc, #628]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17080:	789b      	ldrb	r3, [r3, #2]
   17082:	001a      	movs	r2, r3
   17084:	4b9f      	ldr	r3, [pc, #636]	; (17304 <i2c_write_request_callback+0x2d8>)
   17086:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = I2C_slave_read_buffer[3];
   17088:	4b9a      	ldr	r3, [pc, #616]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1708a:	78db      	ldrb	r3, [r3, #3]
   1708c:	001a      	movs	r2, r3
   1708e:	4b9d      	ldr	r3, [pc, #628]	; (17304 <i2c_write_request_callback+0x2d8>)
   17090:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = I2C_slave_read_buffer[4];
   17092:	4b98      	ldr	r3, [pc, #608]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17094:	791b      	ldrb	r3, [r3, #4]
   17096:	001a      	movs	r2, r3
   17098:	4b9a      	ldr	r3, [pc, #616]	; (17304 <i2c_write_request_callback+0x2d8>)
   1709a:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = I2C_slave_read_buffer[5];
   1709c:	4b95      	ldr	r3, [pc, #596]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1709e:	795b      	ldrb	r3, [r3, #5]
   170a0:	001a      	movs	r2, r3
   170a2:	4b98      	ldr	r3, [pc, #608]	; (17304 <i2c_write_request_callback+0x2d8>)
   170a4:	611a      	str	r2, [r3, #16]
			mcconf_limits.max_vin = I2C_slave_read_buffer[6];
   170a6:	4b93      	ldr	r3, [pc, #588]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170a8:	799b      	ldrb	r3, [r3, #6]
   170aa:	001a      	movs	r2, r3
   170ac:	4b95      	ldr	r3, [pc, #596]	; (17304 <i2c_write_request_callback+0x2d8>)
   170ae:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.min_vin = I2C_slave_read_buffer[7];
   170b0:	4b90      	ldr	r3, [pc, #576]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170b2:	79db      	ldrb	r3, [r3, #7]
   170b4:	001a      	movs	r2, r3
   170b6:	4b93      	ldr	r3, [pc, #588]	; (17304 <i2c_write_request_callback+0x2d8>)
   170b8:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.battery_cut_start = I2C_slave_read_buffer[8];
   170ba:	4b8e      	ldr	r3, [pc, #568]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170bc:	7a1a      	ldrb	r2, [r3, #8]
   170be:	4b92      	ldr	r3, [pc, #584]	; (17308 <i2c_write_request_callback+0x2dc>)
   170c0:	0010      	movs	r0, r2
   170c2:	4798      	blx	r3
   170c4:	1c02      	adds	r2, r0, #0
   170c6:	4b8f      	ldr	r3, [pc, #572]	; (17304 <i2c_write_request_callback+0x2d8>)
   170c8:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = I2C_slave_read_buffer[9];
   170ca:	4b8a      	ldr	r3, [pc, #552]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170cc:	7a5a      	ldrb	r2, [r3, #9]
   170ce:	4b8e      	ldr	r3, [pc, #568]	; (17308 <i2c_write_request_callback+0x2dc>)
   170d0:	0010      	movs	r0, r2
   170d2:	4798      	blx	r3
   170d4:	1c02      	adds	r2, r0, #0
   170d6:	4b8b      	ldr	r3, [pc, #556]	; (17304 <i2c_write_request_callback+0x2d8>)
   170d8:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.max_erpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   170da:	4b86      	ldr	r3, [pc, #536]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170dc:	7a9b      	ldrb	r3, [r3, #10]
   170de:	001a      	movs	r2, r3
   170e0:	4b84      	ldr	r3, [pc, #528]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170e2:	7adb      	ldrb	r3, [r3, #11]
   170e4:	021b      	lsls	r3, r3, #8
   170e6:	431a      	orrs	r2, r3
   170e8:	4b82      	ldr	r3, [pc, #520]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170ea:	7b1b      	ldrb	r3, [r3, #12]
   170ec:	041b      	lsls	r3, r3, #16
   170ee:	431a      	orrs	r2, r3
   170f0:	4b84      	ldr	r3, [pc, #528]	; (17304 <i2c_write_request_callback+0x2d8>)
   170f2:	619a      	str	r2, [r3, #24]
			mcconf_limits.min_erpm = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   170f4:	4b7f      	ldr	r3, [pc, #508]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170f6:	7b5b      	ldrb	r3, [r3, #13]
   170f8:	001a      	movs	r2, r3
   170fa:	4b7e      	ldr	r3, [pc, #504]	; (172f4 <i2c_write_request_callback+0x2c8>)
   170fc:	7b9b      	ldrb	r3, [r3, #14]
   170fe:	021b      	lsls	r3, r3, #8
   17100:	431a      	orrs	r2, r3
   17102:	4b7c      	ldr	r3, [pc, #496]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17104:	7bdb      	ldrb	r3, [r3, #15]
   17106:	041b      	lsls	r3, r3, #16
   17108:	431a      	orrs	r2, r3
   1710a:	4b7e      	ldr	r3, [pc, #504]	; (17304 <i2c_write_request_callback+0x2d8>)
   1710c:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm_fbrake = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   1710e:	4b79      	ldr	r3, [pc, #484]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17110:	7c1b      	ldrb	r3, [r3, #16]
   17112:	001a      	movs	r2, r3
   17114:	4b77      	ldr	r3, [pc, #476]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17116:	7c5b      	ldrb	r3, [r3, #17]
   17118:	021b      	lsls	r3, r3, #8
   1711a:	431a      	orrs	r2, r3
   1711c:	4b75      	ldr	r3, [pc, #468]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1711e:	7c9b      	ldrb	r3, [r3, #18]
   17120:	041b      	lsls	r3, r3, #16
   17122:	431a      	orrs	r2, r3
   17124:	4b77      	ldr	r3, [pc, #476]	; (17304 <i2c_write_request_callback+0x2d8>)
   17126:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   17128:	4b72      	ldr	r3, [pc, #456]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1712a:	7cdb      	ldrb	r3, [r3, #19]
   1712c:	001a      	movs	r2, r3
   1712e:	4b71      	ldr	r3, [pc, #452]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17130:	7d1b      	ldrb	r3, [r3, #20]
   17132:	021b      	lsls	r3, r3, #8
   17134:	431a      	orrs	r2, r3
   17136:	4b6f      	ldr	r3, [pc, #444]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17138:	7d5b      	ldrb	r3, [r3, #21]
   1713a:	041b      	lsls	r3, r3, #16
   1713c:	431a      	orrs	r2, r3
   1713e:	4b71      	ldr	r3, [pc, #452]	; (17304 <i2c_write_request_callback+0x2d8>)
   17140:	621a      	str	r2, [r3, #32]
			mcconf_limits.temp_fet_start = I2C_slave_read_buffer[22];
   17142:	4b6c      	ldr	r3, [pc, #432]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17144:	7d9b      	ldrb	r3, [r3, #22]
   17146:	001a      	movs	r2, r3
   17148:	4b6e      	ldr	r3, [pc, #440]	; (17304 <i2c_write_request_callback+0x2d8>)
   1714a:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = I2C_slave_read_buffer[23];
   1714c:	4b69      	ldr	r3, [pc, #420]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1714e:	7ddb      	ldrb	r3, [r3, #23]
   17150:	001a      	movs	r2, r3
   17152:	4b6c      	ldr	r3, [pc, #432]	; (17304 <i2c_write_request_callback+0x2d8>)
   17154:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = I2C_slave_read_buffer[24];
   17156:	4b67      	ldr	r3, [pc, #412]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17158:	7e1b      	ldrb	r3, [r3, #24]
   1715a:	001a      	movs	r2, r3
   1715c:	4b69      	ldr	r3, [pc, #420]	; (17304 <i2c_write_request_callback+0x2d8>)
   1715e:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = I2C_slave_read_buffer[25];
   17160:	4b64      	ldr	r3, [pc, #400]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17162:	7e5b      	ldrb	r3, [r3, #25]
   17164:	001a      	movs	r2, r3
   17166:	4b67      	ldr	r3, [pc, #412]	; (17304 <i2c_write_request_callback+0x2d8>)
   17168:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.max_duty = I2C_slave_read_buffer[26];
   1716a:	4b62      	ldr	r3, [pc, #392]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1716c:	7e9b      	ldrb	r3, [r3, #26]
   1716e:	001a      	movs	r2, r3
   17170:	4b64      	ldr	r3, [pc, #400]	; (17304 <i2c_write_request_callback+0x2d8>)
   17172:	649a      	str	r2, [r3, #72]	; 0x48
			mcconf_limits.min_duty = I2C_slave_read_buffer[27];
   17174:	4b5f      	ldr	r3, [pc, #380]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17176:	7edb      	ldrb	r3, [r3, #27]
   17178:	001a      	movs	r2, r3
   1717a:	4b62      	ldr	r3, [pc, #392]	; (17304 <i2c_write_request_callback+0x2d8>)
   1717c:	645a      	str	r2, [r3, #68]	; 0x44
			SEND_LIMITS = 1;
   1717e:	4b63      	ldr	r3, [pc, #396]	; (1730c <i2c_write_request_callback+0x2e0>)
   17180:	2201      	movs	r2, #1
   17182:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   17184:	4b62      	ldr	r3, [pc, #392]	; (17310 <i2c_write_request_callback+0x2e4>)
   17186:	2200      	movs	r2, #0
   17188:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
		}
}
   1718a:	e0ad      	b.n	172e8 <i2c_write_request_callback+0x2bc>
		} else if(I2C_slave_read_buffer[0] == 0xDD && I2C_slave_read_buffer[29] == 0xAD) {
   1718c:	4b59      	ldr	r3, [pc, #356]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1718e:	781b      	ldrb	r3, [r3, #0]
   17190:	2bdd      	cmp	r3, #221	; 0xdd
   17192:	d000      	beq.n	17196 <i2c_write_request_callback+0x16a>
   17194:	e0a8      	b.n	172e8 <i2c_write_request_callback+0x2bc>
   17196:	4b57      	ldr	r3, [pc, #348]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17198:	7f5b      	ldrb	r3, [r3, #29]
   1719a:	2bad      	cmp	r3, #173	; 0xad
   1719c:	d000      	beq.n	171a0 <i2c_write_request_callback+0x174>
   1719e:	e0a3      	b.n	172e8 <i2c_write_request_callback+0x2bc>
			latest_vesc_vals.avg_input_current = I2C_slave_read_buffer[1];
   171a0:	4b54      	ldr	r3, [pc, #336]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171a2:	785b      	ldrb	r3, [r3, #1]
   171a4:	001a      	movs	r2, r3
   171a6:	4b5b      	ldr	r3, [pc, #364]	; (17314 <i2c_write_request_callback+0x2e8>)
   171a8:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.avg_input_current += (I2C_slave_read_buffer[2] << 8);
   171aa:	4b5a      	ldr	r3, [pc, #360]	; (17314 <i2c_write_request_callback+0x2e8>)
   171ac:	689a      	ldr	r2, [r3, #8]
   171ae:	4b51      	ldr	r3, [pc, #324]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171b0:	789b      	ldrb	r3, [r3, #2]
   171b2:	021b      	lsls	r3, r3, #8
   171b4:	18d2      	adds	r2, r2, r3
   171b6:	4b57      	ldr	r3, [pc, #348]	; (17314 <i2c_write_request_callback+0x2e8>)
   171b8:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.INPUT_VOLTAGE = I2C_slave_read_buffer[3];
   171ba:	4b4e      	ldr	r3, [pc, #312]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171bc:	78db      	ldrb	r3, [r3, #3]
   171be:	b21a      	sxth	r2, r3
   171c0:	4b54      	ldr	r3, [pc, #336]	; (17314 <i2c_write_request_callback+0x2e8>)
   171c2:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.INPUT_VOLTAGE += (I2C_slave_read_buffer[4] << 8);
   171c4:	4b53      	ldr	r3, [pc, #332]	; (17314 <i2c_write_request_callback+0x2e8>)
   171c6:	2214      	movs	r2, #20
   171c8:	5e9b      	ldrsh	r3, [r3, r2]
   171ca:	b29a      	uxth	r2, r3
   171cc:	4b49      	ldr	r3, [pc, #292]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171ce:	791b      	ldrb	r3, [r3, #4]
   171d0:	b29b      	uxth	r3, r3
   171d2:	021b      	lsls	r3, r3, #8
   171d4:	b29b      	uxth	r3, r3
   171d6:	18d3      	adds	r3, r2, r3
   171d8:	b29b      	uxth	r3, r3
   171da:	b21a      	sxth	r2, r3
   171dc:	4b4d      	ldr	r3, [pc, #308]	; (17314 <i2c_write_request_callback+0x2e8>)
   171de:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.avg_motor_current = I2C_slave_read_buffer[5];
   171e0:	4b44      	ldr	r3, [pc, #272]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171e2:	795b      	ldrb	r3, [r3, #5]
   171e4:	001a      	movs	r2, r3
   171e6:	4b4b      	ldr	r3, [pc, #300]	; (17314 <i2c_write_request_callback+0x2e8>)
   171e8:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_motor_current += (I2C_slave_read_buffer[6] << 8);
   171ea:	4b4a      	ldr	r3, [pc, #296]	; (17314 <i2c_write_request_callback+0x2e8>)
   171ec:	685a      	ldr	r2, [r3, #4]
   171ee:	4b41      	ldr	r3, [pc, #260]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171f0:	799b      	ldrb	r3, [r3, #6]
   171f2:	021b      	lsls	r3, r3, #8
   171f4:	18d2      	adds	r2, r2, r3
   171f6:	4b47      	ldr	r3, [pc, #284]	; (17314 <i2c_write_request_callback+0x2e8>)
   171f8:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.temp_fet_filtered = I2C_slave_read_buffer[7];
   171fa:	4b3e      	ldr	r3, [pc, #248]	; (172f4 <i2c_write_request_callback+0x2c8>)
   171fc:	79db      	ldrb	r3, [r3, #7]
   171fe:	b21a      	sxth	r2, r3
   17200:	4b44      	ldr	r3, [pc, #272]	; (17314 <i2c_write_request_callback+0x2e8>)
   17202:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.temp_fet_filtered += (I2C_slave_read_buffer[8] << 8);
   17204:	4b43      	ldr	r3, [pc, #268]	; (17314 <i2c_write_request_callback+0x2e8>)
   17206:	2200      	movs	r2, #0
   17208:	5e9b      	ldrsh	r3, [r3, r2]
   1720a:	b29a      	uxth	r2, r3
   1720c:	4b39      	ldr	r3, [pc, #228]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1720e:	7a1b      	ldrb	r3, [r3, #8]
   17210:	b29b      	uxth	r3, r3
   17212:	021b      	lsls	r3, r3, #8
   17214:	b29b      	uxth	r3, r3
   17216:	18d3      	adds	r3, r2, r3
   17218:	b29b      	uxth	r3, r3
   1721a:	b21a      	sxth	r2, r3
   1721c:	4b3d      	ldr	r3, [pc, #244]	; (17314 <i2c_write_request_callback+0x2e8>)
   1721e:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.duty_cycle = I2C_slave_read_buffer[9];
   17220:	4b34      	ldr	r3, [pc, #208]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17222:	7a5b      	ldrb	r3, [r3, #9]
   17224:	b21a      	sxth	r2, r3
   17226:	4b3b      	ldr	r3, [pc, #236]	; (17314 <i2c_write_request_callback+0x2e8>)
   17228:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   1722a:	4b32      	ldr	r3, [pc, #200]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1722c:	7a9b      	ldrb	r3, [r3, #10]
   1722e:	001a      	movs	r2, r3
   17230:	4b30      	ldr	r3, [pc, #192]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17232:	7adb      	ldrb	r3, [r3, #11]
   17234:	021b      	lsls	r3, r3, #8
   17236:	431a      	orrs	r2, r3
   17238:	4b2e      	ldr	r3, [pc, #184]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1723a:	7b1b      	ldrb	r3, [r3, #12]
   1723c:	041b      	lsls	r3, r3, #16
   1723e:	431a      	orrs	r2, r3
   17240:	4b34      	ldr	r3, [pc, #208]	; (17314 <i2c_write_request_callback+0x2e8>)
   17242:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.amp_hours = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   17244:	4b2b      	ldr	r3, [pc, #172]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17246:	7b5b      	ldrb	r3, [r3, #13]
   17248:	001a      	movs	r2, r3
   1724a:	4b2a      	ldr	r3, [pc, #168]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1724c:	7b9b      	ldrb	r3, [r3, #14]
   1724e:	021b      	lsls	r3, r3, #8
   17250:	431a      	orrs	r2, r3
   17252:	4b28      	ldr	r3, [pc, #160]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17254:	7bdb      	ldrb	r3, [r3, #15]
   17256:	041b      	lsls	r3, r3, #16
   17258:	431a      	orrs	r2, r3
   1725a:	4b2e      	ldr	r3, [pc, #184]	; (17314 <i2c_write_request_callback+0x2e8>)
   1725c:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   1725e:	4b25      	ldr	r3, [pc, #148]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17260:	7c1b      	ldrb	r3, [r3, #16]
   17262:	001a      	movs	r2, r3
   17264:	4b23      	ldr	r3, [pc, #140]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17266:	7c5b      	ldrb	r3, [r3, #17]
   17268:	021b      	lsls	r3, r3, #8
   1726a:	431a      	orrs	r2, r3
   1726c:	4b21      	ldr	r3, [pc, #132]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1726e:	7c9b      	ldrb	r3, [r3, #18]
   17270:	041b      	lsls	r3, r3, #16
   17272:	431a      	orrs	r2, r3
   17274:	4b27      	ldr	r3, [pc, #156]	; (17314 <i2c_write_request_callback+0x2e8>)
   17276:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   17278:	4b1e      	ldr	r3, [pc, #120]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1727a:	7cdb      	ldrb	r3, [r3, #19]
   1727c:	001a      	movs	r2, r3
   1727e:	4b1d      	ldr	r3, [pc, #116]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17280:	7d1b      	ldrb	r3, [r3, #20]
   17282:	021b      	lsls	r3, r3, #8
   17284:	431a      	orrs	r2, r3
   17286:	4b1b      	ldr	r3, [pc, #108]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17288:	7d5b      	ldrb	r3, [r3, #21]
   1728a:	041b      	lsls	r3, r3, #16
   1728c:	431a      	orrs	r2, r3
   1728e:	4b21      	ldr	r3, [pc, #132]	; (17314 <i2c_write_request_callback+0x2e8>)
   17290:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = (I2C_slave_read_buffer[22] | (I2C_slave_read_buffer[23] << 8) | (I2C_slave_read_buffer[24] << 16));
   17292:	4b18      	ldr	r3, [pc, #96]	; (172f4 <i2c_write_request_callback+0x2c8>)
   17294:	7d9b      	ldrb	r3, [r3, #22]
   17296:	001a      	movs	r2, r3
   17298:	4b16      	ldr	r3, [pc, #88]	; (172f4 <i2c_write_request_callback+0x2c8>)
   1729a:	7ddb      	ldrb	r3, [r3, #23]
   1729c:	021b      	lsls	r3, r3, #8
   1729e:	431a      	orrs	r2, r3
   172a0:	4b14      	ldr	r3, [pc, #80]	; (172f4 <i2c_write_request_callback+0x2c8>)
   172a2:	7e1b      	ldrb	r3, [r3, #24]
   172a4:	041b      	lsls	r3, r3, #16
   172a6:	431a      	orrs	r2, r3
   172a8:	4b1a      	ldr	r3, [pc, #104]	; (17314 <i2c_write_request_callback+0x2e8>)
   172aa:	625a      	str	r2, [r3, #36]	; 0x24
			remote_x = I2C_slave_read_buffer[25];
   172ac:	4b11      	ldr	r3, [pc, #68]	; (172f4 <i2c_write_request_callback+0x2c8>)
   172ae:	7e5a      	ldrb	r2, [r3, #25]
   172b0:	4b19      	ldr	r3, [pc, #100]	; (17318 <i2c_write_request_callback+0x2ec>)
   172b2:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
   172b4:	4b0f      	ldr	r3, [pc, #60]	; (172f4 <i2c_write_request_callback+0x2c8>)
   172b6:	7e9a      	ldrb	r2, [r3, #26]
   172b8:	4b18      	ldr	r3, [pc, #96]	; (1731c <i2c_write_request_callback+0x2f0>)
   172ba:	701a      	strb	r2, [r3, #0]
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
   172bc:	4b0d      	ldr	r3, [pc, #52]	; (172f4 <i2c_write_request_callback+0x2c8>)
   172be:	7edb      	ldrb	r3, [r3, #27]
   172c0:	105b      	asrs	r3, r3, #1
   172c2:	b2db      	uxtb	r3, r3
   172c4:	2203      	movs	r2, #3
   172c6:	4013      	ands	r3, r2
   172c8:	b2da      	uxtb	r2, r3
   172ca:	4b15      	ldr	r3, [pc, #84]	; (17320 <i2c_write_request_callback+0x2f4>)
   172cc:	701a      	strb	r2, [r3, #0]
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
   172ce:	4b09      	ldr	r3, [pc, #36]	; (172f4 <i2c_write_request_callback+0x2c8>)
   172d0:	7edb      	ldrb	r3, [r3, #27]
   172d2:	2201      	movs	r2, #1
   172d4:	4013      	ands	r3, r2
   172d6:	b2da      	uxtb	r2, r3
   172d8:	4b12      	ldr	r3, [pc, #72]	; (17324 <i2c_write_request_callback+0x2f8>)
   172da:	701a      	strb	r2, [r3, #0]
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
   172dc:	4b05      	ldr	r3, [pc, #20]	; (172f4 <i2c_write_request_callback+0x2c8>)
   172de:	7f1b      	ldrb	r3, [r3, #28]
   172e0:	b259      	sxtb	r1, r3
   172e2:	4b0c      	ldr	r3, [pc, #48]	; (17314 <i2c_write_request_callback+0x2e8>)
   172e4:	222c      	movs	r2, #44	; 0x2c
   172e6:	5499      	strb	r1, [r3, r2]
}
   172e8:	46c0      	nop			; (mov r8, r8)
   172ea:	46bd      	mov	sp, r7
   172ec:	b002      	add	sp, #8
   172ee:	bd80      	pop	{r7, pc}
   172f0:	20000454 	.word	0x20000454
   172f4:	20000b9c 	.word	0x20000b9c
   172f8:	20000102 	.word	0x20000102
   172fc:	200000e2 	.word	0x200000e2
   17300:	0000473b 	.word	0x0000473b
   17304:	20001a8c 	.word	0x20001a8c
   17308:	0001a379 	.word	0x0001a379
   1730c:	200003c8 	.word	0x200003c8
   17310:	20000101 	.word	0x20000101
   17314:	20000e38 	.word	0x20000e38
   17318:	200003cf 	.word	0x200003cf
   1731c:	200003ce 	.word	0x200003ce
   17320:	200003cc 	.word	0x200003cc
   17324:	200003d0 	.word	0x200003d0

00017328 <i2c_read_request_callback>:

uint8_t app_remote_check = 0;
void i2c_read_request_callback(struct i2c_slave_module *const module)
{
   17328:	b580      	push	{r7, lr}
   1732a:	b082      	sub	sp, #8
   1732c:	af00      	add	r7, sp, #0
   1732e:	6078      	str	r0, [r7, #4]
	I2C_slave_write_buffer[0] = AppRemoteY;
   17330:	4b10      	ldr	r3, [pc, #64]	; (17374 <i2c_read_request_callback+0x4c>)
   17332:	781a      	ldrb	r2, [r3, #0]
   17334:	4b10      	ldr	r3, [pc, #64]	; (17378 <i2c_read_request_callback+0x50>)
   17336:	701a      	strb	r2, [r3, #0]
	I2C_slave_write_buffer[1] = GET_LIMITS;
   17338:	4b10      	ldr	r3, [pc, #64]	; (1737c <i2c_read_request_callback+0x54>)
   1733a:	781a      	ldrb	r2, [r3, #0]
   1733c:	4b0e      	ldr	r3, [pc, #56]	; (17378 <i2c_read_request_callback+0x50>)
   1733e:	705a      	strb	r2, [r3, #1]
	I2C_slave_write_buffer[2] = app_remote_check;
   17340:	4b0f      	ldr	r3, [pc, #60]	; (17380 <i2c_read_request_callback+0x58>)
   17342:	781a      	ldrb	r2, [r3, #0]
   17344:	4b0c      	ldr	r3, [pc, #48]	; (17378 <i2c_read_request_callback+0x50>)
   17346:	709a      	strb	r2, [r3, #2]

	/* Init i2c packet. */
	packet.data_length = SLAVE_WRITE_DATA_LENGTH;
   17348:	4b0e      	ldr	r3, [pc, #56]	; (17384 <i2c_read_request_callback+0x5c>)
   1734a:	2203      	movs	r2, #3
   1734c:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_write_buffer;
   1734e:	4b0d      	ldr	r3, [pc, #52]	; (17384 <i2c_read_request_callback+0x5c>)
   17350:	4a09      	ldr	r2, [pc, #36]	; (17378 <i2c_read_request_callback+0x50>)
   17352:	605a      	str	r2, [r3, #4]
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
   17354:	4a0b      	ldr	r2, [pc, #44]	; (17384 <i2c_read_request_callback+0x5c>)
   17356:	687b      	ldr	r3, [r7, #4]
   17358:	0011      	movs	r1, r2
   1735a:	0018      	movs	r0, r3
   1735c:	4b0a      	ldr	r3, [pc, #40]	; (17388 <i2c_read_request_callback+0x60>)
   1735e:	4798      	blx	r3
	NEW_REMOTE_DATA = false;
   17360:	4b0a      	ldr	r3, [pc, #40]	; (1738c <i2c_read_request_callback+0x64>)
   17362:	2200      	movs	r2, #0
   17364:	701a      	strb	r2, [r3, #0]

	GET_LIMITS = 0;
   17366:	4b05      	ldr	r3, [pc, #20]	; (1737c <i2c_read_request_callback+0x54>)
   17368:	2200      	movs	r2, #0
   1736a:	701a      	strb	r2, [r3, #0]
}
   1736c:	46c0      	nop			; (mov r8, r8)
   1736e:	46bd      	mov	sp, r7
   17370:	b002      	add	sp, #8
   17372:	bd80      	pop	{r7, pc}
   17374:	200000f9 	.word	0x200000f9
   17378:	20000e74 	.word	0x20000e74
   1737c:	200000e2 	.word	0x200000e2
   17380:	2000045c 	.word	0x2000045c
   17384:	20000454 	.word	0x20000454
   17388:	00004787 	.word	0x00004787
   1738c:	200003e1 	.word	0x200003e1

00017390 <configure_i2c_slave_callbacks>:


void configure_i2c_slave_callbacks(void)
{
   17390:	b580      	push	{r7, lr}
   17392:	af00      	add	r7, sp, #0
	/* Register and enable callback functions */
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback, I2C_SLAVE_CALLBACK_READ_REQUEST);
   17394:	490c      	ldr	r1, [pc, #48]	; (173c8 <configure_i2c_slave_callbacks+0x38>)
   17396:	4b0d      	ldr	r3, [pc, #52]	; (173cc <configure_i2c_slave_callbacks+0x3c>)
   17398:	2202      	movs	r2, #2
   1739a:	0018      	movs	r0, r3
   1739c:	4b0c      	ldr	r3, [pc, #48]	; (173d0 <configure_i2c_slave_callbacks+0x40>)
   1739e:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_READ_REQUEST);
   173a0:	4b0a      	ldr	r3, [pc, #40]	; (173cc <configure_i2c_slave_callbacks+0x3c>)
   173a2:	2102      	movs	r1, #2
   173a4:	0018      	movs	r0, r3
   173a6:	4b0b      	ldr	r3, [pc, #44]	; (173d4 <configure_i2c_slave_callbacks+0x44>)
   173a8:	4798      	blx	r3

	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   173aa:	490b      	ldr	r1, [pc, #44]	; (173d8 <configure_i2c_slave_callbacks+0x48>)
   173ac:	4b07      	ldr	r3, [pc, #28]	; (173cc <configure_i2c_slave_callbacks+0x3c>)
   173ae:	2203      	movs	r2, #3
   173b0:	0018      	movs	r0, r3
   173b2:	4b07      	ldr	r3, [pc, #28]	; (173d0 <configure_i2c_slave_callbacks+0x40>)
   173b4:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   173b6:	4b05      	ldr	r3, [pc, #20]	; (173cc <configure_i2c_slave_callbacks+0x3c>)
   173b8:	2103      	movs	r1, #3
   173ba:	0018      	movs	r0, r3
   173bc:	4b05      	ldr	r3, [pc, #20]	; (173d4 <configure_i2c_slave_callbacks+0x44>)
   173be:	4798      	blx	r3
}
   173c0:	46c0      	nop			; (mov r8, r8)
   173c2:	46bd      	mov	sp, r7
   173c4:	bd80      	pop	{r7, pc}
   173c6:	46c0      	nop			; (mov r8, r8)
   173c8:	00017329 	.word	0x00017329
   173cc:	20001af0 	.word	0x20001af0
   173d0:	000046f1 	.word	0x000046f1
   173d4:	00009b15 	.word	0x00009b15
   173d8:	0001702d 	.word	0x0001702d

000173dc <configure_eeprom>:

void configure_eeprom(void)
{
   173dc:	b590      	push	{r4, r7, lr}
   173de:	b083      	sub	sp, #12
   173e0:	af00      	add	r7, sp, #0
	/* Setup EEPROM emulator service */
	enum status_code error_code = eeprom_emulator_init();
   173e2:	1dfc      	adds	r4, r7, #7
   173e4:	4b0a      	ldr	r3, [pc, #40]	; (17410 <configure_eeprom+0x34>)
   173e6:	4798      	blx	r3
   173e8:	0003      	movs	r3, r0
   173ea:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY) {
   173ec:	1dfb      	adds	r3, r7, #7
   173ee:	781b      	ldrb	r3, [r3, #0]
   173f0:	2b16      	cmp	r3, #22
   173f2:	d100      	bne.n	173f6 <configure_eeprom+0x1a>
		while (true) {
   173f4:	e7fe      	b.n	173f4 <configure_eeprom+0x18>
			/* No EEPROM section has been set in the device's fuses */
		}
	}
	else if (error_code != STATUS_OK) {
   173f6:	1dfb      	adds	r3, r7, #7
   173f8:	781b      	ldrb	r3, [r3, #0]
   173fa:	2b00      	cmp	r3, #0
   173fc:	d003      	beq.n	17406 <configure_eeprom+0x2a>
		/* Erase the emulated EEPROM memory (assume it is unformatted or
		 * irrecoverably corrupt) */
		eeprom_emulator_erase_memory();
   173fe:	4b05      	ldr	r3, [pc, #20]	; (17414 <configure_eeprom+0x38>)
   17400:	4798      	blx	r3
		eeprom_emulator_init();
   17402:	4b03      	ldr	r3, [pc, #12]	; (17410 <configure_eeprom+0x34>)
   17404:	4798      	blx	r3
	}
}
   17406:	46c0      	nop			; (mov r8, r8)
   17408:	46bd      	mov	sp, r7
   1740a:	b003      	add	sp, #12
   1740c:	bd90      	pop	{r4, r7, pc}
   1740e:	46c0      	nop			; (mov r8, r8)
   17410:	000090e9 	.word	0x000090e9
   17414:	000091d1 	.word	0x000091d1

00017418 <main>:
	PM->APBCMASK.bit.SERCOM0_ = 1;                         // enable SERCOM0 interface
}


int main (void)
{
   17418:	b590      	push	{r4, r7, lr}
   1741a:	b085      	sub	sp, #20
   1741c:	af00      	add	r7, sp, #0
	system_init();
   1741e:	4ba3      	ldr	r3, [pc, #652]	; (176ac <main+0x294>)
   17420:	4798      	blx	r3
	//clockInit();
	configure_tc(); // Configure millis timer
   17422:	4ba3      	ldr	r3, [pc, #652]	; (176b0 <main+0x298>)
   17424:	4798      	blx	r3
	
	// Configure Devices
	configure_ADC();
   17426:	4ba3      	ldr	r3, [pc, #652]	; (176b4 <main+0x29c>)
   17428:	4798      	blx	r3

	configure_eeprom();
   1742a:	4ba3      	ldr	r3, [pc, #652]	; (176b8 <main+0x2a0>)
   1742c:	4798      	blx	r3
	restore_led_data();
   1742e:	4ba3      	ldr	r3, [pc, #652]	; (176bc <main+0x2a4>)
   17430:	4798      	blx	r3
	restore_orientation_controls_remote_esc_lights();
   17432:	4ba3      	ldr	r3, [pc, #652]	; (176c0 <main+0x2a8>)
   17434:	4798      	blx	r3
	
	// Configure The button input pin and interrupt handlers for pulse width measurement
	configure_port_pins();
   17436:	4ba3      	ldr	r3, [pc, #652]	; (176c4 <main+0x2ac>)
   17438:	4798      	blx	r3
	configure_pw_tc();
   1743a:	4ba3      	ldr	r3, [pc, #652]	; (176c8 <main+0x2b0>)
   1743c:	4798      	blx	r3
	config_eic();    // Configure the external interruption
   1743e:	4ba3      	ldr	r3, [pc, #652]	; (176cc <main+0x2b4>)
   17440:	4798      	blx	r3
	config_evsys();  // Configure the event system
   17442:	4ba3      	ldr	r3, [pc, #652]	; (176d0 <main+0x2b8>)
   17444:	4798      	blx	r3
	config_gpio();   // Configure the dedicated pin
   17446:	4ba3      	ldr	r3, [pc, #652]	; (176d4 <main+0x2bc>)
   17448:	4798      	blx	r3
	
	configure_LED_PWM();
   1744a:	4ba3      	ldr	r3, [pc, #652]	; (176d8 <main+0x2c0>)
   1744c:	4798      	blx	r3
	if(RGB_led_type == RGB_DIGITAL_APA102){
   1744e:	4ba3      	ldr	r3, [pc, #652]	; (176dc <main+0x2c4>)
   17450:	781b      	ldrb	r3, [r3, #0]
   17452:	2b01      	cmp	r3, #1
   17454:	d105      	bne.n	17462 <main+0x4a>
		configure_APA_SPI();
   17456:	4ba2      	ldr	r3, [pc, #648]	; (176e0 <main+0x2c8>)
   17458:	4798      	blx	r3
		set_left_gnd();
   1745a:	4ba2      	ldr	r3, [pc, #648]	; (176e4 <main+0x2cc>)
   1745c:	4798      	blx	r3
		set_right_gnd();
   1745e:	4ba2      	ldr	r3, [pc, #648]	; (176e8 <main+0x2d0>)
   17460:	4798      	blx	r3

	//ERROR_LEDs(ERROR_GREEN, LONG_ERROR);
#if  defined(HW_4v0) || defined(HW_4v1)
	port_pin_set_output_level(STAT_LED, true);
#endif
	configure_BLE_module();
   17462:	4ba2      	ldr	r3, [pc, #648]	; (176ec <main+0x2d4>)
   17464:	4798      	blx	r3
	initIMU();
   17466:	4ba2      	ldr	r3, [pc, #648]	; (176f0 <main+0x2d8>)
   17468:	4798      	blx	r3
	restore_cal_data(true);
   1746a:	2001      	movs	r0, #1
   1746c:	4ba1      	ldr	r3, [pc, #644]	; (176f4 <main+0x2dc>)
   1746e:	4798      	blx	r3
	if(!beginIMU()){ERROR_LEDs(ERROR_RED, LONG_ERROR);}
   17470:	4ba1      	ldr	r3, [pc, #644]	; (176f8 <main+0x2e0>)
   17472:	4798      	blx	r3
   17474:	1e03      	subs	r3, r0, #0
   17476:	d103      	bne.n	17480 <main+0x68>
   17478:	2101      	movs	r1, #1
   1747a:	2000      	movs	r0, #0
   1747c:	4b9f      	ldr	r3, [pc, #636]	; (176fc <main+0x2e4>)
   1747e:	4798      	blx	r3
#if  defined(HW_4v0) || defined(HW_4v1)
	port_pin_set_output_level(STAT_LED, false);
#endif

	initKalman(0.1, 0.1, 0.5);
   17480:	22fc      	movs	r2, #252	; 0xfc
   17482:	0592      	lsls	r2, r2, #22
   17484:	499e      	ldr	r1, [pc, #632]	; (17700 <main+0x2e8>)
   17486:	4b9e      	ldr	r3, [pc, #632]	; (17700 <main+0x2e8>)
   17488:	1c18      	adds	r0, r3, #0
   1748a:	4b9e      	ldr	r3, [pc, #632]	; (17704 <main+0x2ec>)
   1748c:	4798      	blx	r3
	setConstBases();
   1748e:	4b9e      	ldr	r3, [pc, #632]	; (17708 <main+0x2f0>)
   17490:	4798      	blx	r3

	if(esc_comms == COMMS_I2C){
   17492:	4b9e      	ldr	r3, [pc, #632]	; (1770c <main+0x2f4>)
   17494:	781b      	ldrb	r3, [r3, #0]
   17496:	2b01      	cmp	r3, #1
   17498:	d103      	bne.n	174a2 <main+0x8a>
		configure_i2c_slave();
   1749a:	4b9d      	ldr	r3, [pc, #628]	; (17710 <main+0x2f8>)
   1749c:	4798      	blx	r3
		configure_i2c_slave_callbacks();
   1749e:	4b9d      	ldr	r3, [pc, #628]	; (17714 <main+0x2fc>)
   174a0:	4798      	blx	r3
	
	//ERROR_LEDs(ERROR_BLUE, SHORT_ERROR); // Uncomment for testing SAM-BA and LED output functionality
	
	////////////////////////////////////////////

	configured_comms = esc_comms;
   174a2:	4b9a      	ldr	r3, [pc, #616]	; (1770c <main+0x2f4>)
   174a4:	781a      	ldrb	r2, [r3, #0]
   174a6:	4b9c      	ldr	r3, [pc, #624]	; (17718 <main+0x300>)
   174a8:	701a      	strb	r2, [r3, #0]
	configured_RGB_led_type = RGB_led_type;
   174aa:	4b8c      	ldr	r3, [pc, #560]	; (176dc <main+0x2c4>)
   174ac:	781a      	ldrb	r2, [r3, #0]
   174ae:	4b9b      	ldr	r3, [pc, #620]	; (1771c <main+0x304>)
   174b0:	701a      	strb	r2, [r3, #0]
	current_led_num = led_num;
   174b2:	4b9b      	ldr	r3, [pc, #620]	; (17720 <main+0x308>)
   174b4:	781a      	ldrb	r2, [r3, #0]
   174b6:	4b9b      	ldr	r3, [pc, #620]	; (17724 <main+0x30c>)
   174b8:	701a      	strb	r2, [r3, #0]

	memset(AXaverage, 0, ACCELXYsamples);
   174ba:	4b9b      	ldr	r3, [pc, #620]	; (17728 <main+0x310>)
   174bc:	2264      	movs	r2, #100	; 0x64
   174be:	2100      	movs	r1, #0
   174c0:	0018      	movs	r0, r3
   174c2:	4b9a      	ldr	r3, [pc, #616]	; (1772c <main+0x314>)
   174c4:	4798      	blx	r3
	memset(AYaverage, 0, ACCELXYsamples);
   174c6:	4b9a      	ldr	r3, [pc, #616]	; (17730 <main+0x318>)
   174c8:	2264      	movs	r2, #100	; 0x64
   174ca:	2100      	movs	r1, #0
   174cc:	0018      	movs	r0, r3
   174ce:	4b97      	ldr	r3, [pc, #604]	; (1772c <main+0x314>)
   174d0:	4798      	blx	r3
	memset(AZaverage, 0, ACCELZsamples);
   174d2:	4b98      	ldr	r3, [pc, #608]	; (17734 <main+0x31c>)
   174d4:	2296      	movs	r2, #150	; 0x96
   174d6:	2100      	movs	r1, #0
   174d8:	0018      	movs	r0, r3
   174da:	4b94      	ldr	r3, [pc, #592]	; (1772c <main+0x314>)
   174dc:	4798      	blx	r3

	memset(I2C_slave_read_buffer, 0, SLAVE_READ_DATA_LENGTH);
   174de:	4b96      	ldr	r3, [pc, #600]	; (17738 <main+0x320>)
   174e0:	221e      	movs	r2, #30
   174e2:	2100      	movs	r1, #0
   174e4:	0018      	movs	r0, r3
   174e6:	4b91      	ldr	r3, [pc, #580]	; (1772c <main+0x314>)
   174e8:	4798      	blx	r3
	memset(I2C_slave_write_buffer, 0, SLAVE_WRITE_DATA_LENGTH);
   174ea:	4b94      	ldr	r3, [pc, #592]	; (1773c <main+0x324>)
   174ec:	2203      	movs	r2, #3
   174ee:	2100      	movs	r1, #0
   174f0:	0018      	movs	r0, r3
   174f2:	4b8e      	ldr	r3, [pc, #568]	; (1772c <main+0x314>)
   174f4:	4798      	blx	r3
	
	memset(ble_write_buffer, 0, BLE_WRITE_BUF_SIZE);
   174f6:	4b92      	ldr	r3, [pc, #584]	; (17740 <main+0x328>)
   174f8:	222c      	movs	r2, #44	; 0x2c
   174fa:	2100      	movs	r1, #0
   174fc:	0018      	movs	r0, r3
   174fe:	4b8b      	ldr	r3, [pc, #556]	; (1772c <main+0x314>)
   17500:	4798      	blx	r3

	// Initialize local variables used in main
	VescRemoteX = VescRemoteY = 128;
   17502:	4b90      	ldr	r3, [pc, #576]	; (17744 <main+0x32c>)
   17504:	2280      	movs	r2, #128	; 0x80
   17506:	701a      	strb	r2, [r3, #0]
   17508:	4b8e      	ldr	r3, [pc, #568]	; (17744 <main+0x32c>)
   1750a:	781a      	ldrb	r2, [r3, #0]
   1750c:	4b8e      	ldr	r3, [pc, #568]	; (17748 <main+0x330>)
   1750e:	701a      	strb	r2, [r3, #0]

	int BLE_TX_INDEX = 0;
   17510:	2300      	movs	r3, #0
   17512:	60fb      	str	r3, [r7, #12]
	uint16_t BLE_TX_DELAY = 15;
   17514:	2308      	movs	r3, #8
   17516:	18fb      	adds	r3, r7, r3
   17518:	220f      	movs	r2, #15
   1751a:	801a      	strh	r2, [r3, #0]
	uint32_t BLE_TX_TIME = 0;
   1751c:	2300      	movs	r3, #0
   1751e:	603b      	str	r3, [r7, #0]
	//uint32_t BLE_DUMMY_TIME = 0;

	mcconf_limits.max_erpm = 1000000;
   17520:	4b8a      	ldr	r3, [pc, #552]	; (1774c <main+0x334>)
   17522:	4a8b      	ldr	r2, [pc, #556]	; (17750 <main+0x338>)
   17524:	619a      	str	r2, [r3, #24]
	mcconf_limits.min_erpm = -1000000;
   17526:	4b89      	ldr	r3, [pc, #548]	; (1774c <main+0x334>)
   17528:	4a8a      	ldr	r2, [pc, #552]	; (17754 <main+0x33c>)
   1752a:	615a      	str	r2, [r3, #20]

	////////////////////////////////////////////
	LIGHTS_ON = DEFAULT_STATE;
   1752c:	4b8a      	ldr	r3, [pc, #552]	; (17758 <main+0x340>)
   1752e:	781b      	ldrb	r3, [r3, #0]
   17530:	001a      	movs	r2, r3
   17532:	4b8a      	ldr	r3, [pc, #552]	; (1775c <main+0x344>)
   17534:	701a      	strb	r2, [r3, #0]
	//testLEDs();
#endif
	while(1)
	{
		// Reset the module if PA15 is pulled low
		if(port_pin_get_input_level(BOOT_BTN)==false)
   17536:	200f      	movs	r0, #15
   17538:	4b89      	ldr	r3, [pc, #548]	; (17760 <main+0x348>)
   1753a:	4798      	blx	r3
   1753c:	0003      	movs	r3, r0
   1753e:	001a      	movs	r2, r3
   17540:	2301      	movs	r3, #1
   17542:	4053      	eors	r3, r2
   17544:	b2db      	uxtb	r3, r3
   17546:	2b00      	cmp	r3, #0
   17548:	d001      	beq.n	1754e <main+0x136>
			NVIC_SystemReset();
   1754a:	4b86      	ldr	r3, [pc, #536]	; (17764 <main+0x34c>)
   1754c:	4798      	blx	r3

		// Handle BLE Communication
		read_ble_packet(); // Blocks when BLE is not configured
   1754e:	4b86      	ldr	r3, [pc, #536]	; (17768 <main+0x350>)
   17550:	4798      	blx	r3

		if(configured_comms != esc_comms)
   17552:	4b71      	ldr	r3, [pc, #452]	; (17718 <main+0x300>)
   17554:	781a      	ldrb	r2, [r3, #0]
   17556:	4b6d      	ldr	r3, [pc, #436]	; (1770c <main+0x2f4>)
   17558:	781b      	ldrb	r3, [r3, #0]
   1755a:	429a      	cmp	r2, r3
   1755c:	d003      	beq.n	17566 <main+0x14e>
		{
			// TODO: Deconfigure old comms and configure new comms
			ERROR_LEDs(ERROR_YELLOW, PERMINENT_ERROR);
   1755e:	2102      	movs	r1, #2
   17560:	2004      	movs	r0, #4
   17562:	4b66      	ldr	r3, [pc, #408]	; (176fc <main+0x2e4>)
   17564:	4798      	blx	r3
		}

		if((configured_RGB_led_type == RGB_DIGITAL_APA102 || configured_RGB_led_type == RGB_DIGITAL_APA102) && current_led_num != led_num){
   17566:	4b6d      	ldr	r3, [pc, #436]	; (1771c <main+0x304>)
   17568:	781b      	ldrb	r3, [r3, #0]
   1756a:	2b01      	cmp	r3, #1
   1756c:	d003      	beq.n	17576 <main+0x15e>
   1756e:	4b6b      	ldr	r3, [pc, #428]	; (1771c <main+0x304>)
   17570:	781b      	ldrb	r3, [r3, #0]
   17572:	2b01      	cmp	r3, #1
   17574:	d164      	bne.n	17640 <main+0x228>
   17576:	4b6b      	ldr	r3, [pc, #428]	; (17724 <main+0x30c>)
   17578:	781a      	ldrb	r2, [r3, #0]
   1757a:	4b69      	ldr	r3, [pc, #420]	; (17720 <main+0x308>)
   1757c:	781b      	ldrb	r3, [r3, #0]
   1757e:	429a      	cmp	r2, r3
   17580:	d05e      	beq.n	17640 <main+0x228>
			for(uint16_t i = 0; i < MAX_LEDCOUNT; i++)
   17582:	230a      	movs	r3, #10
   17584:	18fb      	adds	r3, r7, r3
   17586:	2200      	movs	r2, #0
   17588:	801a      	strh	r2, [r3, #0]
   1758a:	e04a      	b.n	17622 <main+0x20a>
			{
				L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0);
   1758c:	230a      	movs	r3, #10
   1758e:	18fb      	adds	r3, r7, r3
   17590:	881b      	ldrh	r3, [r3, #0]
   17592:	3301      	adds	r3, #1
   17594:	009a      	lsls	r2, r3, #2
   17596:	230a      	movs	r3, #10
   17598:	18fb      	adds	r3, r7, r3
   1759a:	881b      	ldrh	r3, [r3, #0]
   1759c:	3301      	adds	r3, #1
   1759e:	009b      	lsls	r3, r3, #2
   175a0:	4972      	ldr	r1, [pc, #456]	; (1776c <main+0x354>)
   175a2:	20e0      	movs	r0, #224	; 0xe0
   175a4:	54c8      	strb	r0, [r1, r3]
   175a6:	4971      	ldr	r1, [pc, #452]	; (1776c <main+0x354>)
   175a8:	5cc9      	ldrb	r1, [r1, r3]
   175aa:	4b71      	ldr	r3, [pc, #452]	; (17770 <main+0x358>)
   175ac:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
   175ae:	230a      	movs	r3, #10
   175b0:	18fb      	adds	r3, r7, r3
   175b2:	881b      	ldrh	r3, [r3, #0]
   175b4:	009b      	lsls	r3, r3, #2
   175b6:	1d5a      	adds	r2, r3, #5
   175b8:	230a      	movs	r3, #10
   175ba:	18fb      	adds	r3, r7, r3
   175bc:	881b      	ldrh	r3, [r3, #0]
   175be:	009b      	lsls	r3, r3, #2
   175c0:	3305      	adds	r3, #5
   175c2:	496a      	ldr	r1, [pc, #424]	; (1776c <main+0x354>)
   175c4:	2000      	movs	r0, #0
   175c6:	54c8      	strb	r0, [r1, r3]
   175c8:	4968      	ldr	r1, [pc, #416]	; (1776c <main+0x354>)
   175ca:	5cc9      	ldrb	r1, [r1, r3]
   175cc:	4b68      	ldr	r3, [pc, #416]	; (17770 <main+0x358>)
   175ce:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
   175d0:	230a      	movs	r3, #10
   175d2:	18fb      	adds	r3, r7, r3
   175d4:	881b      	ldrh	r3, [r3, #0]
   175d6:	009b      	lsls	r3, r3, #2
   175d8:	1d9a      	adds	r2, r3, #6
   175da:	230a      	movs	r3, #10
   175dc:	18fb      	adds	r3, r7, r3
   175de:	881b      	ldrh	r3, [r3, #0]
   175e0:	009b      	lsls	r3, r3, #2
   175e2:	3306      	adds	r3, #6
   175e4:	4961      	ldr	r1, [pc, #388]	; (1776c <main+0x354>)
   175e6:	2000      	movs	r0, #0
   175e8:	54c8      	strb	r0, [r1, r3]
   175ea:	4960      	ldr	r1, [pc, #384]	; (1776c <main+0x354>)
   175ec:	5cc9      	ldrb	r1, [r1, r3]
   175ee:	4b60      	ldr	r3, [pc, #384]	; (17770 <main+0x358>)
   175f0:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
   175f2:	230a      	movs	r3, #10
   175f4:	18fb      	adds	r3, r7, r3
   175f6:	881b      	ldrh	r3, [r3, #0]
   175f8:	009b      	lsls	r3, r3, #2
   175fa:	1dda      	adds	r2, r3, #7
   175fc:	230a      	movs	r3, #10
   175fe:	18fb      	adds	r3, r7, r3
   17600:	881b      	ldrh	r3, [r3, #0]
   17602:	009b      	lsls	r3, r3, #2
   17604:	3307      	adds	r3, #7
   17606:	4959      	ldr	r1, [pc, #356]	; (1776c <main+0x354>)
   17608:	2000      	movs	r0, #0
   1760a:	54c8      	strb	r0, [r1, r3]
   1760c:	4957      	ldr	r1, [pc, #348]	; (1776c <main+0x354>)
   1760e:	5cc9      	ldrb	r1, [r1, r3]
   17610:	4b57      	ldr	r3, [pc, #348]	; (17770 <main+0x358>)
   17612:	5499      	strb	r1, [r3, r2]
			for(uint16_t i = 0; i < MAX_LEDCOUNT; i++)
   17614:	230a      	movs	r3, #10
   17616:	18fb      	adds	r3, r7, r3
   17618:	881a      	ldrh	r2, [r3, #0]
   1761a:	230a      	movs	r3, #10
   1761c:	18fb      	adds	r3, r7, r3
   1761e:	3201      	adds	r2, #1
   17620:	801a      	strh	r2, [r3, #0]
   17622:	230a      	movs	r3, #10
   17624:	18fb      	adds	r3, r7, r3
   17626:	881b      	ldrh	r3, [r3, #0]
   17628:	2b47      	cmp	r3, #71	; 0x47
   1762a:	d9af      	bls.n	1758c <main+0x174>
			}
			L_digital_write(MAX_LEDCOUNT);
   1762c:	2048      	movs	r0, #72	; 0x48
   1762e:	4b51      	ldr	r3, [pc, #324]	; (17774 <main+0x35c>)
   17630:	4798      	blx	r3
			R_digital_write(MAX_LEDCOUNT);
   17632:	2048      	movs	r0, #72	; 0x48
   17634:	4b50      	ldr	r3, [pc, #320]	; (17778 <main+0x360>)
   17636:	4798      	blx	r3
			current_led_num = led_num;
   17638:	4b39      	ldr	r3, [pc, #228]	; (17720 <main+0x308>)
   1763a:	781a      	ldrb	r2, [r3, #0]
   1763c:	4b39      	ldr	r3, [pc, #228]	; (17724 <main+0x30c>)
   1763e:	701a      	strb	r2, [r3, #0]
		}

		
		////////////////////////////   Communicate with ESC   /////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(esc_comms == COMMS_UART){
   17640:	4b32      	ldr	r3, [pc, #200]	; (1770c <main+0x2f4>)
   17642:	781b      	ldrb	r3, [r3, #0]
   17644:	2b02      	cmp	r3, #2
   17646:	d000      	beq.n	1764a <main+0x232>
   17648:	e0b3      	b.n	177b2 <main+0x39a>
			if(ESC_UART_DETECTED || !AUTO_DETECT_ESC){
   1764a:	4b4c      	ldr	r3, [pc, #304]	; (1777c <main+0x364>)
   1764c:	781b      	ldrb	r3, [r3, #0]
   1764e:	2b00      	cmp	r3, #0
   17650:	d106      	bne.n	17660 <main+0x248>
   17652:	4b4b      	ldr	r3, [pc, #300]	; (17780 <main+0x368>)
   17654:	781b      	ldrb	r3, [r3, #0]
   17656:	2201      	movs	r2, #1
   17658:	4053      	eors	r3, r2
   1765a:	b2db      	uxtb	r3, r3
   1765c:	2b00      	cmp	r3, #0
   1765e:	d021      	beq.n	176a4 <main+0x28c>
				if(ESC_UART_CONFIGED){
   17660:	4b48      	ldr	r3, [pc, #288]	; (17784 <main+0x36c>)
   17662:	781b      	ldrb	r3, [r3, #0]
   17664:	2b00      	cmp	r3, #0
   17666:	d01a      	beq.n	1769e <main+0x286>
					read_vesc_packet();
   17668:	4b47      	ldr	r3, [pc, #284]	; (17788 <main+0x370>)
   1766a:	4798      	blx	r3
					if(ESC_FW_READ){
   1766c:	4b47      	ldr	r3, [pc, #284]	; (1778c <main+0x374>)
   1766e:	781b      	ldrb	r3, [r3, #0]
   17670:	2b00      	cmp	r3, #0
   17672:	d011      	beq.n	17698 <main+0x280>
						if(GET_LIMITS) {
   17674:	4b46      	ldr	r3, [pc, #280]	; (17790 <main+0x378>)
   17676:	781b      	ldrb	r3, [r3, #0]
   17678:	2b00      	cmp	r3, #0
   1767a:	d002      	beq.n	17682 <main+0x26a>
							vesc_get_mcconf();
   1767c:	4b45      	ldr	r3, [pc, #276]	; (17794 <main+0x37c>)
   1767e:	4798      	blx	r3
				if(ESC_UART_CONFIGED){
   17680:	e096      	b.n	177b0 <main+0x398>
							} else if(SEND_CONTINUOUS){
   17682:	4b45      	ldr	r3, [pc, #276]	; (17798 <main+0x380>)
   17684:	781b      	ldrb	r3, [r3, #0]
   17686:	2b00      	cmp	r3, #0
   17688:	d100      	bne.n	1768c <main+0x274>
   1768a:	e091      	b.n	177b0 <main+0x398>
							READ_VESC_VALS = true;
   1768c:	4b43      	ldr	r3, [pc, #268]	; (1779c <main+0x384>)
   1768e:	2201      	movs	r2, #1
   17690:	701a      	strb	r2, [r3, #0]
							vesc_read_all();
   17692:	4b43      	ldr	r3, [pc, #268]	; (177a0 <main+0x388>)
   17694:	4798      	blx	r3
				if(ESC_UART_CONFIGED){
   17696:	e08b      	b.n	177b0 <main+0x398>
						}
						} else{
						detect_vesc_firmware();
   17698:	4b42      	ldr	r3, [pc, #264]	; (177a4 <main+0x38c>)
   1769a:	4798      	blx	r3
				if(ESC_UART_CONFIGED){
   1769c:	e088      	b.n	177b0 <main+0x398>
					}
					} else{
					detect_esc_baud_pins();
   1769e:	4b42      	ldr	r3, [pc, #264]	; (177a8 <main+0x390>)
   176a0:	4798      	blx	r3
				if(ESC_UART_CONFIGED){
   176a2:	e085      	b.n	177b0 <main+0x398>
				}
			} else{
				detect_esc_uart_connected();
   176a4:	4b41      	ldr	r3, [pc, #260]	; (177ac <main+0x394>)
   176a6:	4798      	blx	r3
   176a8:	e083      	b.n	177b2 <main+0x39a>
   176aa:	46c0      	nop			; (mov r8, r8)
   176ac:	0000892d 	.word	0x0000892d
   176b0:	00009f0d 	.word	0x00009f0d
   176b4:	00016e49 	.word	0x00016e49
   176b8:	000173dd 	.word	0x000173dd
   176bc:	00013ca1 	.word	0x00013ca1
   176c0:	00014851 	.word	0x00014851
   176c4:	00016ed9 	.word	0x00016ed9
   176c8:	00014b35 	.word	0x00014b35
   176cc:	00014c79 	.word	0x00014c79
   176d0:	00014cf1 	.word	0x00014cf1
   176d4:	00014e75 	.word	0x00014e75
   176d8:	0000a28d 	.word	0x0000a28d
   176dc:	20001a88 	.word	0x20001a88
   176e0:	00009ff5 	.word	0x00009ff5
   176e4:	0000a17d 	.word	0x0000a17d
   176e8:	0000a195 	.word	0x0000a195
   176ec:	00015775 	.word	0x00015775
   176f0:	0000f28d 	.word	0x0000f28d
   176f4:	000144a1 	.word	0x000144a1
   176f8:	0000f3f1 	.word	0x0000f3f1
   176fc:	0000a789 	.word	0x0000a789
   17700:	3dcccccd 	.word	0x3dcccccd
   17704:	00011595 	.word	0x00011595
   17708:	0000a6e1 	.word	0x0000a6e1
   1770c:	200003ca 	.word	0x200003ca
   17710:	00016fc9 	.word	0x00016fc9
   17714:	00017391 	.word	0x00017391
   17718:	2000043a 	.word	0x2000043a
   1771c:	200006c0 	.word	0x200006c0
   17720:	200000e0 	.word	0x200000e0
   17724:	200003c1 	.word	0x200003c1
   17728:	20001144 	.word	0x20001144
   1772c:	0001c193 	.word	0x0001c193
   17730:	2000105c 	.word	0x2000105c
   17734:	20000e78 	.word	0x20000e78
   17738:	20000b9c 	.word	0x20000b9c
   1773c:	20000e74 	.word	0x20000e74
   17740:	20000e0c 	.word	0x20000e0c
   17744:	200003dd 	.word	0x200003dd
   17748:	200003dc 	.word	0x200003dc
   1774c:	20001a8c 	.word	0x20001a8c
   17750:	000f4240 	.word	0x000f4240
   17754:	fff0bdc0 	.word	0xfff0bdc0
   17758:	200003a3 	.word	0x200003a3
   1775c:	200000d6 	.word	0x200000d6
   17760:	000097d1 	.word	0x000097d1
   17764:	00009531 	.word	0x00009531
   17768:	00016c61 	.word	0x00016c61
   1776c:	20000598 	.word	0x20000598
   17770:	20001440 	.word	0x20001440
   17774:	0000e7cd 	.word	0x0000e7cd
   17778:	0000e7fd 	.word	0x0000e7fd
   1777c:	20000438 	.word	0x20000438
   17780:	20000100 	.word	0x20000100
   17784:	20000437 	.word	0x20000437
   17788:	000134d5 	.word	0x000134d5
   1778c:	200003c9 	.word	0x200003c9
   17790:	200000e2 	.word	0x200000e2
   17794:	00012ad1 	.word	0x00012ad1
   17798:	20000101 	.word	0x20000101
   1779c:	20000434 	.word	0x20000434
   177a0:	00012f25 	.word	0x00012f25
   177a4:	000130b5 	.word	0x000130b5
   177a8:	000136b5 	.word	0x000136b5
   177ac:	000138a5 	.word	0x000138a5
				if(ESC_UART_CONFIGED){
   177b0:	46c0      	nop			; (mov r8, r8)
		}
		
		///////////////////////////////   Process Sensor data   //////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////

		readAccel(); // ~5ms combined
   177b2:	4bd0      	ldr	r3, [pc, #832]	; (17af4 <main+0x6dc>)
   177b4:	4798      	blx	r3
		readGyro();
   177b6:	4bd0      	ldr	r3, [pc, #832]	; (17af8 <main+0x6e0>)
   177b8:	4798      	blx	r3
		readTemp();
   177ba:	4bd0      	ldr	r3, [pc, #832]	; (17afc <main+0x6e4>)
   177bc:	4798      	blx	r3

		// All IMU measurements are corrected to orient power to front and connectors up
		CorrectIMUvalues(ORIENTATION[0], ORIENTATION[1]);
   177be:	4bd0      	ldr	r3, [pc, #832]	; (17b00 <main+0x6e8>)
   177c0:	781a      	ldrb	r2, [r3, #0]
   177c2:	4bcf      	ldr	r3, [pc, #828]	; (17b00 <main+0x6e8>)
   177c4:	785b      	ldrb	r3, [r3, #1]
   177c6:	0019      	movs	r1, r3
   177c8:	0010      	movs	r0, r2
   177ca:	4bce      	ldr	r3, [pc, #824]	; (17b04 <main+0x6ec>)
   177cc:	4798      	blx	r3

		if(abs(axKalman - cax) < 10000)
   177ce:	4bce      	ldr	r3, [pc, #824]	; (17b08 <main+0x6f0>)
   177d0:	681c      	ldr	r4, [r3, #0]
   177d2:	4bce      	ldr	r3, [pc, #824]	; (17b0c <main+0x6f4>)
   177d4:	2200      	movs	r2, #0
   177d6:	5e9a      	ldrsh	r2, [r3, r2]
   177d8:	4bcd      	ldr	r3, [pc, #820]	; (17b10 <main+0x6f8>)
   177da:	0010      	movs	r0, r2
   177dc:	4798      	blx	r3
   177de:	1c02      	adds	r2, r0, #0
   177e0:	4bcc      	ldr	r3, [pc, #816]	; (17b14 <main+0x6fc>)
   177e2:	1c11      	adds	r1, r2, #0
   177e4:	1c20      	adds	r0, r4, #0
   177e6:	4798      	blx	r3
   177e8:	1c03      	adds	r3, r0, #0
   177ea:	1c1a      	adds	r2, r3, #0
   177ec:	4bca      	ldr	r3, [pc, #808]	; (17b18 <main+0x700>)
   177ee:	1c10      	adds	r0, r2, #0
   177f0:	4798      	blx	r3
   177f2:	0002      	movs	r2, r0
   177f4:	4bc9      	ldr	r3, [pc, #804]	; (17b1c <main+0x704>)
   177f6:	429a      	cmp	r2, r3
   177f8:	db29      	blt.n	1784e <main+0x436>
   177fa:	4bc3      	ldr	r3, [pc, #780]	; (17b08 <main+0x6f0>)
   177fc:	681c      	ldr	r4, [r3, #0]
   177fe:	4bc3      	ldr	r3, [pc, #780]	; (17b0c <main+0x6f4>)
   17800:	2200      	movs	r2, #0
   17802:	5e9a      	ldrsh	r2, [r3, r2]
   17804:	4bc2      	ldr	r3, [pc, #776]	; (17b10 <main+0x6f8>)
   17806:	0010      	movs	r0, r2
   17808:	4798      	blx	r3
   1780a:	1c02      	adds	r2, r0, #0
   1780c:	4bc1      	ldr	r3, [pc, #772]	; (17b14 <main+0x6fc>)
   1780e:	1c11      	adds	r1, r2, #0
   17810:	1c20      	adds	r0, r4, #0
   17812:	4798      	blx	r3
   17814:	1c03      	adds	r3, r0, #0
   17816:	1c1a      	adds	r2, r3, #0
   17818:	4bbf      	ldr	r3, [pc, #764]	; (17b18 <main+0x700>)
   1781a:	1c10      	adds	r0, r2, #0
   1781c:	4798      	blx	r3
   1781e:	0002      	movs	r2, r0
   17820:	4bbf      	ldr	r3, [pc, #764]	; (17b20 <main+0x708>)
   17822:	429a      	cmp	r2, r3
   17824:	dc13      	bgt.n	1784e <main+0x436>
		{
			avgAX = averageAX();
   17826:	4bbf      	ldr	r3, [pc, #764]	; (17b24 <main+0x70c>)
   17828:	4798      	blx	r3
   1782a:	0003      	movs	r3, r0
   1782c:	001a      	movs	r2, r3
   1782e:	4bbe      	ldr	r3, [pc, #760]	; (17b28 <main+0x710>)
   17830:	801a      	strh	r2, [r3, #0]
			axKalman = updateKalman(avgAX, ax_kalman);
   17832:	4bbd      	ldr	r3, [pc, #756]	; (17b28 <main+0x710>)
   17834:	2200      	movs	r2, #0
   17836:	5e9a      	ldrsh	r2, [r3, r2]
   17838:	4bb5      	ldr	r3, [pc, #724]	; (17b10 <main+0x6f8>)
   1783a:	0010      	movs	r0, r2
   1783c:	4798      	blx	r3
   1783e:	1c03      	adds	r3, r0, #0
   17840:	2100      	movs	r1, #0
   17842:	1c18      	adds	r0, r3, #0
   17844:	4bb9      	ldr	r3, [pc, #740]	; (17b2c <main+0x714>)
   17846:	4798      	blx	r3
   17848:	1c02      	adds	r2, r0, #0
   1784a:	4baf      	ldr	r3, [pc, #700]	; (17b08 <main+0x6f0>)
   1784c:	601a      	str	r2, [r3, #0]
		}
		avgAY = averageAY();
   1784e:	4bb8      	ldr	r3, [pc, #736]	; (17b30 <main+0x718>)
   17850:	4798      	blx	r3
   17852:	0003      	movs	r3, r0
   17854:	001a      	movs	r2, r3
   17856:	4bb7      	ldr	r3, [pc, #732]	; (17b34 <main+0x71c>)
   17858:	801a      	strh	r2, [r3, #0]
		avgAZ = averageAZ();
   1785a:	4bb7      	ldr	r3, [pc, #732]	; (17b38 <main+0x720>)
   1785c:	4798      	blx	r3
   1785e:	0003      	movs	r3, r0
   17860:	001a      	movs	r2, r3
   17862:	4bb6      	ldr	r3, [pc, #728]	; (17b3c <main+0x724>)
   17864:	801a      	strh	r2, [r3, #0]
		ayKalman = updateKalman(avgAY, ay_kalman);
   17866:	4bb3      	ldr	r3, [pc, #716]	; (17b34 <main+0x71c>)
   17868:	2200      	movs	r2, #0
   1786a:	5e9a      	ldrsh	r2, [r3, r2]
   1786c:	4ba8      	ldr	r3, [pc, #672]	; (17b10 <main+0x6f8>)
   1786e:	0010      	movs	r0, r2
   17870:	4798      	blx	r3
   17872:	1c03      	adds	r3, r0, #0
   17874:	2101      	movs	r1, #1
   17876:	1c18      	adds	r0, r3, #0
   17878:	4bac      	ldr	r3, [pc, #688]	; (17b2c <main+0x714>)
   1787a:	4798      	blx	r3
   1787c:	1c02      	adds	r2, r0, #0
   1787e:	4bb0      	ldr	r3, [pc, #704]	; (17b40 <main+0x728>)
   17880:	601a      	str	r2, [r3, #0]
		azKalman = updateKalman(avgAZ, az_kalman);
   17882:	4bae      	ldr	r3, [pc, #696]	; (17b3c <main+0x724>)
   17884:	2200      	movs	r2, #0
   17886:	5e9a      	ldrsh	r2, [r3, r2]
   17888:	4ba1      	ldr	r3, [pc, #644]	; (17b10 <main+0x6f8>)
   1788a:	0010      	movs	r0, r2
   1788c:	4798      	blx	r3
   1788e:	1c03      	adds	r3, r0, #0
   17890:	2102      	movs	r1, #2
   17892:	1c18      	adds	r0, r3, #0
   17894:	4ba5      	ldr	r3, [pc, #660]	; (17b2c <main+0x714>)
   17896:	4798      	blx	r3
   17898:	1c02      	adds	r2, r0, #0
   1789a:	4baa      	ldr	r3, [pc, #680]	; (17b44 <main+0x72c>)
   1789c:	601a      	str	r2, [r3, #0]
		
		avgGX = averageGX();
   1789e:	4baa      	ldr	r3, [pc, #680]	; (17b48 <main+0x730>)
   178a0:	4798      	blx	r3
   178a2:	1c02      	adds	r2, r0, #0
   178a4:	4ba9      	ldr	r3, [pc, #676]	; (17b4c <main+0x734>)
   178a6:	601a      	str	r2, [r3, #0]
		avgGY = averageGY();
   178a8:	4ba9      	ldr	r3, [pc, #676]	; (17b50 <main+0x738>)
   178aa:	4798      	blx	r3
   178ac:	1c02      	adds	r2, r0, #0
   178ae:	4ba9      	ldr	r3, [pc, #676]	; (17b54 <main+0x73c>)
   178b0:	601a      	str	r2, [r3, #0]
		avgGZ = averageGZ();
   178b2:	4ba9      	ldr	r3, [pc, #676]	; (17b58 <main+0x740>)
   178b4:	4798      	blx	r3
   178b6:	1c02      	adds	r2, r0, #0
   178b8:	4ba8      	ldr	r3, [pc, #672]	; (17b5c <main+0x744>)
   178ba:	601a      	str	r2, [r3, #0]
		// TODO: Re-implement gyro kalman
		gxKalman = avgGX;
   178bc:	4ba3      	ldr	r3, [pc, #652]	; (17b4c <main+0x734>)
   178be:	681a      	ldr	r2, [r3, #0]
   178c0:	4ba7      	ldr	r3, [pc, #668]	; (17b60 <main+0x748>)
   178c2:	601a      	str	r2, [r3, #0]
		gyKalman = avgGY;
   178c4:	4ba3      	ldr	r3, [pc, #652]	; (17b54 <main+0x73c>)
   178c6:	681a      	ldr	r2, [r3, #0]
   178c8:	4ba6      	ldr	r3, [pc, #664]	; (17b64 <main+0x74c>)
   178ca:	601a      	str	r2, [r3, #0]
		gzKalman = avgGZ;
   178cc:	4ba3      	ldr	r3, [pc, #652]	; (17b5c <main+0x744>)
   178ce:	681a      	ldr	r2, [r3, #0]
   178d0:	4ba5      	ldr	r3, [pc, #660]	; (17b68 <main+0x750>)
   178d2:	601a      	str	r2, [r3, #0]
		
		update_kalman_limits();
   178d4:	4ba5      	ldr	r3, [pc, #660]	; (17b6c <main+0x754>)
   178d6:	4798      	blx	r3
		calculate_heading();
   178d8:	4ba5      	ldr	r3, [pc, #660]	; (17b70 <main+0x758>)
   178da:	4798      	blx	r3
		
		getLightSens(&light_sens);
   178dc:	4ba5      	ldr	r3, [pc, #660]	; (17b74 <main+0x75c>)
   178de:	0018      	movs	r0, r3
   178e0:	4ba5      	ldr	r3, [pc, #660]	; (17b78 <main+0x760>)
   178e2:	4798      	blx	r3
		light_sens = updateKalman(light_sens, light_kalman);
   178e4:	4ba3      	ldr	r3, [pc, #652]	; (17b74 <main+0x75c>)
   178e6:	881a      	ldrh	r2, [r3, #0]
   178e8:	4ba4      	ldr	r3, [pc, #656]	; (17b7c <main+0x764>)
   178ea:	0010      	movs	r0, r2
   178ec:	4798      	blx	r3
   178ee:	1c03      	adds	r3, r0, #0
   178f0:	2106      	movs	r1, #6
   178f2:	1c18      	adds	r0, r3, #0
   178f4:	4b8d      	ldr	r3, [pc, #564]	; (17b2c <main+0x714>)
   178f6:	4798      	blx	r3
   178f8:	1c02      	adds	r2, r0, #0
   178fa:	4ba1      	ldr	r3, [pc, #644]	; (17b80 <main+0x768>)
   178fc:	1c10      	adds	r0, r2, #0
   178fe:	4798      	blx	r3
   17900:	0003      	movs	r3, r0
   17902:	b29a      	uxth	r2, r3
   17904:	4b9b      	ldr	r3, [pc, #620]	; (17b74 <main+0x75c>)
   17906:	801a      	strh	r2, [r3, #0]
		
		//////////////////////////////   Send Realtime Data   /////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_CONTINUOUS && app_remote_check == 0 && check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY) && usart_get_job_status(&ble_usart, USART_TRANSCEIVER_TX) != STATUS_BUSY)
   17908:	4b9e      	ldr	r3, [pc, #632]	; (17b84 <main+0x76c>)
   1790a:	781b      	ldrb	r3, [r3, #0]
   1790c:	2b00      	cmp	r3, #0
   1790e:	d100      	bne.n	17912 <main+0x4fa>
   17910:	e2dc      	b.n	17ecc <main+0xab4>
   17912:	4b9d      	ldr	r3, [pc, #628]	; (17b88 <main+0x770>)
   17914:	781b      	ldrb	r3, [r3, #0]
   17916:	2b00      	cmp	r3, #0
   17918:	d000      	beq.n	1791c <main+0x504>
   1791a:	e2d7      	b.n	17ecc <main+0xab4>
   1791c:	2308      	movs	r3, #8
   1791e:	18fb      	adds	r3, r7, r3
   17920:	881a      	ldrh	r2, [r3, #0]
   17922:	003b      	movs	r3, r7
   17924:	0011      	movs	r1, r2
   17926:	0018      	movs	r0, r3
   17928:	4b98      	ldr	r3, [pc, #608]	; (17b8c <main+0x774>)
   1792a:	4798      	blx	r3
   1792c:	1e03      	subs	r3, r0, #0
   1792e:	d100      	bne.n	17932 <main+0x51a>
   17930:	e2cc      	b.n	17ecc <main+0xab4>
   17932:	4b97      	ldr	r3, [pc, #604]	; (17b90 <main+0x778>)
   17934:	2101      	movs	r1, #1
   17936:	0018      	movs	r0, r3
   17938:	4b96      	ldr	r3, [pc, #600]	; (17b94 <main+0x77c>)
   1793a:	4798      	blx	r3
   1793c:	0003      	movs	r3, r0
   1793e:	2b05      	cmp	r3, #5
   17940:	d100      	bne.n	17944 <main+0x52c>
   17942:	e2c3      	b.n	17ecc <main+0xab4>
		{
#if  defined(HW_4v0) || defined(HW_4v1)
			port_pin_set_output_level(STAT_LED,true);
#endif
			switch(BLE_TX_INDEX){
   17944:	68fb      	ldr	r3, [r7, #12]
   17946:	2b04      	cmp	r3, #4
   17948:	d900      	bls.n	1794c <main+0x534>
   1794a:	e2b3      	b.n	17eb4 <main+0xa9c>
   1794c:	68fb      	ldr	r3, [r7, #12]
   1794e:	009a      	lsls	r2, r3, #2
   17950:	4b91      	ldr	r3, [pc, #580]	; (17b98 <main+0x780>)
   17952:	18d3      	adds	r3, r2, r3
   17954:	681b      	ldr	r3, [r3, #0]
   17956:	469f      	mov	pc, r3
				case 0:
					ble_write_buffer[0] = 0x11;
   17958:	4b90      	ldr	r3, [pc, #576]	; (17b9c <main+0x784>)
   1795a:	2211      	movs	r2, #17
   1795c:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = latest_vesc_vals.avg_input_current & 0xFF;
   1795e:	4b90      	ldr	r3, [pc, #576]	; (17ba0 <main+0x788>)
   17960:	689b      	ldr	r3, [r3, #8]
   17962:	b2da      	uxtb	r2, r3
   17964:	4b8d      	ldr	r3, [pc, #564]	; (17b9c <main+0x784>)
   17966:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.avg_input_current & 0xFF00) >> 8;
   17968:	4b8d      	ldr	r3, [pc, #564]	; (17ba0 <main+0x788>)
   1796a:	689b      	ldr	r3, [r3, #8]
   1796c:	121b      	asrs	r3, r3, #8
   1796e:	b2da      	uxtb	r2, r3
   17970:	4b8a      	ldr	r3, [pc, #552]	; (17b9c <main+0x784>)
   17972:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x12;
   17974:	4b89      	ldr	r3, [pc, #548]	; (17b9c <main+0x784>)
   17976:	2212      	movs	r2, #18
   17978:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = latest_vesc_vals.INPUT_VOLTAGE;
   1797a:	4b89      	ldr	r3, [pc, #548]	; (17ba0 <main+0x788>)
   1797c:	2214      	movs	r2, #20
   1797e:	5e9b      	ldrsh	r3, [r3, r2]
   17980:	b2da      	uxtb	r2, r3
   17982:	4b86      	ldr	r3, [pc, #536]	; (17b9c <main+0x784>)
   17984:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.INPUT_VOLTAGE & 0xFF00) >> 8;
   17986:	4b86      	ldr	r3, [pc, #536]	; (17ba0 <main+0x788>)
   17988:	2214      	movs	r2, #20
   1798a:	5e9b      	ldrsh	r3, [r3, r2]
   1798c:	121b      	asrs	r3, r3, #8
   1798e:	b2da      	uxtb	r2, r3
   17990:	4b82      	ldr	r3, [pc, #520]	; (17b9c <main+0x784>)
   17992:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x13;
   17994:	4b81      	ldr	r3, [pc, #516]	; (17b9c <main+0x784>)
   17996:	2213      	movs	r2, #19
   17998:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = latest_vesc_vals.avg_motor_current;
   1799a:	4b81      	ldr	r3, [pc, #516]	; (17ba0 <main+0x788>)
   1799c:	685b      	ldr	r3, [r3, #4]
   1799e:	b2da      	uxtb	r2, r3
   179a0:	4b7e      	ldr	r3, [pc, #504]	; (17b9c <main+0x784>)
   179a2:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (latest_vesc_vals.avg_motor_current & 0xFF00) >> 8;
   179a4:	4b7e      	ldr	r3, [pc, #504]	; (17ba0 <main+0x788>)
   179a6:	685b      	ldr	r3, [r3, #4]
   179a8:	121b      	asrs	r3, r3, #8
   179aa:	b2da      	uxtb	r2, r3
   179ac:	4b7b      	ldr	r3, [pc, #492]	; (17b9c <main+0x784>)
   179ae:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x14;
   179b0:	4b7a      	ldr	r3, [pc, #488]	; (17b9c <main+0x784>)
   179b2:	2214      	movs	r2, #20
   179b4:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = latest_vesc_vals.temp_fet_filtered;
   179b6:	4b7a      	ldr	r3, [pc, #488]	; (17ba0 <main+0x788>)
   179b8:	2200      	movs	r2, #0
   179ba:	5e9b      	ldrsh	r3, [r3, r2]
   179bc:	b2da      	uxtb	r2, r3
   179be:	4b77      	ldr	r3, [pc, #476]	; (17b9c <main+0x784>)
   179c0:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.temp_fet_filtered & 0xFF00) >> 8;
   179c2:	4b77      	ldr	r3, [pc, #476]	; (17ba0 <main+0x788>)
   179c4:	2200      	movs	r2, #0
   179c6:	5e9b      	ldrsh	r3, [r3, r2]
   179c8:	121b      	asrs	r3, r3, #8
   179ca:	b2da      	uxtb	r2, r3
   179cc:	4b73      	ldr	r3, [pc, #460]	; (17b9c <main+0x784>)
   179ce:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x15;
   179d0:	4b72      	ldr	r3, [pc, #456]	; (17b9c <main+0x784>)
   179d2:	2215      	movs	r2, #21
   179d4:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = latest_vesc_vals.duty_cycle;
   179d6:	4b72      	ldr	r3, [pc, #456]	; (17ba0 <main+0x788>)
   179d8:	220c      	movs	r2, #12
   179da:	5e9b      	ldrsh	r3, [r3, r2]
   179dc:	b2da      	uxtb	r2, r3
   179de:	4b6f      	ldr	r3, [pc, #444]	; (17b9c <main+0x784>)
   179e0:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.duty_cycle & 0xFF00) >> 8;
   179e2:	4b6f      	ldr	r3, [pc, #444]	; (17ba0 <main+0x788>)
   179e4:	220c      	movs	r2, #12
   179e6:	5e9b      	ldrsh	r3, [r3, r2]
   179e8:	121b      	asrs	r3, r3, #8
   179ea:	b2da      	uxtb	r2, r3
   179ec:	4b6b      	ldr	r3, [pc, #428]	; (17b9c <main+0x784>)
   179ee:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x16;
   179f0:	4b6a      	ldr	r3, [pc, #424]	; (17b9c <main+0x784>)
   179f2:	2216      	movs	r2, #22
   179f4:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = (latest_vesc_vals.rpm & 0xFF);
   179f6:	4b6a      	ldr	r3, [pc, #424]	; (17ba0 <main+0x788>)
   179f8:	691b      	ldr	r3, [r3, #16]
   179fa:	b2da      	uxtb	r2, r3
   179fc:	4b67      	ldr	r3, [pc, #412]	; (17b9c <main+0x784>)
   179fe:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = (latest_vesc_vals.rpm & 0xFF00) >> 8;
   17a00:	4b67      	ldr	r3, [pc, #412]	; (17ba0 <main+0x788>)
   17a02:	691b      	ldr	r3, [r3, #16]
   17a04:	121b      	asrs	r3, r3, #8
   17a06:	b2da      	uxtb	r2, r3
   17a08:	4b64      	ldr	r3, [pc, #400]	; (17b9c <main+0x784>)
   17a0a:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = (latest_vesc_vals.rpm & 0xFF0000) >> 16;
   17a0c:	4b64      	ldr	r3, [pc, #400]	; (17ba0 <main+0x788>)
   17a0e:	691b      	ldr	r3, [r3, #16]
   17a10:	141b      	asrs	r3, r3, #16
   17a12:	b2da      	uxtb	r2, r3
   17a14:	4b61      	ldr	r3, [pc, #388]	; (17b9c <main+0x784>)
   17a16:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   17a18:	4960      	ldr	r1, [pc, #384]	; (17b9c <main+0x784>)
   17a1a:	4b5d      	ldr	r3, [pc, #372]	; (17b90 <main+0x778>)
   17a1c:	2213      	movs	r2, #19
   17a1e:	0018      	movs	r0, r3
   17a20:	4b60      	ldr	r3, [pc, #384]	; (17ba4 <main+0x78c>)
   17a22:	4798      	blx	r3
					break;
   17a24:	e246      	b.n	17eb4 <main+0xa9c>
				case 1:
					ble_write_buffer[0] = 0x17;
   17a26:	4b5d      	ldr	r3, [pc, #372]	; (17b9c <main+0x784>)
   17a28:	2217      	movs	r2, #23
   17a2a:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = (latest_vesc_vals.amp_hours & 0xFF);
   17a2c:	4b5c      	ldr	r3, [pc, #368]	; (17ba0 <main+0x788>)
   17a2e:	699b      	ldr	r3, [r3, #24]
   17a30:	b2da      	uxtb	r2, r3
   17a32:	4b5a      	ldr	r3, [pc, #360]	; (17b9c <main+0x784>)
   17a34:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.amp_hours & 0xFF00) >> 8;
   17a36:	4b5a      	ldr	r3, [pc, #360]	; (17ba0 <main+0x788>)
   17a38:	699b      	ldr	r3, [r3, #24]
   17a3a:	121b      	asrs	r3, r3, #8
   17a3c:	b2da      	uxtb	r2, r3
   17a3e:	4b57      	ldr	r3, [pc, #348]	; (17b9c <main+0x784>)
   17a40:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = (latest_vesc_vals.amp_hours & 0xFF0000) >> 16;
   17a42:	4b57      	ldr	r3, [pc, #348]	; (17ba0 <main+0x788>)
   17a44:	699b      	ldr	r3, [r3, #24]
   17a46:	141b      	asrs	r3, r3, #16
   17a48:	b2da      	uxtb	r2, r3
   17a4a:	4b54      	ldr	r3, [pc, #336]	; (17b9c <main+0x784>)
   17a4c:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = 0x18;
   17a4e:	4b53      	ldr	r3, [pc, #332]	; (17b9c <main+0x784>)
   17a50:	2218      	movs	r2, #24
   17a52:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.amp_hours_charged & 0xFF);
   17a54:	4b52      	ldr	r3, [pc, #328]	; (17ba0 <main+0x788>)
   17a56:	69db      	ldr	r3, [r3, #28]
   17a58:	b2da      	uxtb	r2, r3
   17a5a:	4b50      	ldr	r3, [pc, #320]	; (17b9c <main+0x784>)
   17a5c:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (latest_vesc_vals.amp_hours_charged & 0xFF00) >> 8;
   17a5e:	4b50      	ldr	r3, [pc, #320]	; (17ba0 <main+0x788>)
   17a60:	69db      	ldr	r3, [r3, #28]
   17a62:	121b      	asrs	r3, r3, #8
   17a64:	b2da      	uxtb	r2, r3
   17a66:	4b4d      	ldr	r3, [pc, #308]	; (17b9c <main+0x784>)
   17a68:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = (latest_vesc_vals.amp_hours_charged & 0xFF0000) >> 16;
   17a6a:	4b4d      	ldr	r3, [pc, #308]	; (17ba0 <main+0x788>)
   17a6c:	69db      	ldr	r3, [r3, #28]
   17a6e:	141b      	asrs	r3, r3, #16
   17a70:	b2da      	uxtb	r2, r3
   17a72:	4b4a      	ldr	r3, [pc, #296]	; (17b9c <main+0x784>)
   17a74:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = 0x19;
   17a76:	4b49      	ldr	r3, [pc, #292]	; (17b9c <main+0x784>)
   17a78:	2219      	movs	r2, #25
   17a7a:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = (latest_vesc_vals.watt_hours & 0xFF);
   17a7c:	4b48      	ldr	r3, [pc, #288]	; (17ba0 <main+0x788>)
   17a7e:	6a1b      	ldr	r3, [r3, #32]
   17a80:	b2da      	uxtb	r2, r3
   17a82:	4b46      	ldr	r3, [pc, #280]	; (17b9c <main+0x784>)
   17a84:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (latest_vesc_vals.watt_hours & 0xFF00) >> 8;
   17a86:	4b46      	ldr	r3, [pc, #280]	; (17ba0 <main+0x788>)
   17a88:	6a1b      	ldr	r3, [r3, #32]
   17a8a:	121b      	asrs	r3, r3, #8
   17a8c:	b2da      	uxtb	r2, r3
   17a8e:	4b43      	ldr	r3, [pc, #268]	; (17b9c <main+0x784>)
   17a90:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.watt_hours & 0xFF0000) >> 16;
   17a92:	4b43      	ldr	r3, [pc, #268]	; (17ba0 <main+0x788>)
   17a94:	6a1b      	ldr	r3, [r3, #32]
   17a96:	141b      	asrs	r3, r3, #16
   17a98:	b2da      	uxtb	r2, r3
   17a9a:	4b40      	ldr	r3, [pc, #256]	; (17b9c <main+0x784>)
   17a9c:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x1A;
   17a9e:	4b3f      	ldr	r3, [pc, #252]	; (17b9c <main+0x784>)
   17aa0:	221a      	movs	r2, #26
   17aa2:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (latest_vesc_vals.watt_hours_charged & 0xFF);
   17aa4:	4b3e      	ldr	r3, [pc, #248]	; (17ba0 <main+0x788>)
   17aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17aa8:	b2da      	uxtb	r2, r3
   17aaa:	4b3c      	ldr	r3, [pc, #240]	; (17b9c <main+0x784>)
   17aac:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.watt_hours_charged & 0xFF00) >> 8;
   17aae:	4b3c      	ldr	r3, [pc, #240]	; (17ba0 <main+0x788>)
   17ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17ab2:	121b      	asrs	r3, r3, #8
   17ab4:	b2da      	uxtb	r2, r3
   17ab6:	4b39      	ldr	r3, [pc, #228]	; (17b9c <main+0x784>)
   17ab8:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = (latest_vesc_vals.watt_hours_charged & 0xFF0000) >> 16;
   17aba:	4b39      	ldr	r3, [pc, #228]	; (17ba0 <main+0x788>)
   17abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17abe:	141b      	asrs	r3, r3, #16
   17ac0:	b2da      	uxtb	r2, r3
   17ac2:	4b36      	ldr	r3, [pc, #216]	; (17b9c <main+0x784>)
   17ac4:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x1B;
   17ac6:	4b35      	ldr	r3, [pc, #212]	; (17b9c <main+0x784>)
   17ac8:	221b      	movs	r2, #27
   17aca:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = latest_vesc_vals.fault;
   17acc:	4b34      	ldr	r3, [pc, #208]	; (17ba0 <main+0x788>)
   17ace:	222c      	movs	r2, #44	; 0x2c
   17ad0:	569b      	ldrsb	r3, [r3, r2]
   17ad2:	b2da      	uxtb	r2, r3
   17ad4:	4b31      	ldr	r3, [pc, #196]	; (17b9c <main+0x784>)
   17ad6:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0x21;
   17ad8:	4b30      	ldr	r3, [pc, #192]	; (17b9c <main+0x784>)
   17ada:	2221      	movs	r2, #33	; 0x21
   17adc:	749a      	strb	r2, [r3, #18]
					ble_write_buffer[19] = remote_x;
   17ade:	4b32      	ldr	r3, [pc, #200]	; (17ba8 <main+0x790>)
   17ae0:	781a      	ldrb	r2, [r3, #0]
   17ae2:	4b2e      	ldr	r3, [pc, #184]	; (17b9c <main+0x784>)
   17ae4:	74da      	strb	r2, [r3, #19]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 20);
   17ae6:	492d      	ldr	r1, [pc, #180]	; (17b9c <main+0x784>)
   17ae8:	4b29      	ldr	r3, [pc, #164]	; (17b90 <main+0x778>)
   17aea:	2214      	movs	r2, #20
   17aec:	0018      	movs	r0, r3
   17aee:	4b2d      	ldr	r3, [pc, #180]	; (17ba4 <main+0x78c>)
   17af0:	4798      	blx	r3
					break;
   17af2:	e1df      	b.n	17eb4 <main+0xa9c>
   17af4:	0000faf9 	.word	0x0000faf9
   17af8:	0000fc3d 	.word	0x0000fc3d
   17afc:	0000fbc5 	.word	0x0000fbc5
   17b00:	20000008 	.word	0x20000008
   17b04:	0001038d 	.word	0x0001038d
   17b08:	2000036c 	.word	0x2000036c
   17b0c:	20000330 	.word	0x20000330
   17b10:	0001a2d9 	.word	0x0001a2d9
   17b14:	00019f61 	.word	0x00019f61
   17b18:	0001a299 	.word	0x0001a299
   17b1c:	ffffd8f1 	.word	0xffffd8f1
   17b20:	0000270f 	.word	0x0000270f
   17b24:	00011229 	.word	0x00011229
   17b28:	20000358 	.word	0x20000358
   17b2c:	0001166d 	.word	0x0001166d
   17b30:	000112a5 	.word	0x000112a5
   17b34:	2000035a 	.word	0x2000035a
   17b38:	00011321 	.word	0x00011321
   17b3c:	2000035c 	.word	0x2000035c
   17b40:	20000370 	.word	0x20000370
   17b44:	20000374 	.word	0x20000374
   17b48:	0001139d 	.word	0x0001139d
   17b4c:	20000360 	.word	0x20000360
   17b50:	00011445 	.word	0x00011445
   17b54:	20000364 	.word	0x20000364
   17b58:	000114ed 	.word	0x000114ed
   17b5c:	20000368 	.word	0x20000368
   17b60:	20000378 	.word	0x20000378
   17b64:	2000037c 	.word	0x2000037c
   17b68:	20000380 	.word	0x20000380
   17b6c:	00011089 	.word	0x00011089
   17b70:	00010f21 	.word	0x00010f21
   17b74:	2000033c 	.word	0x2000033c
   17b78:	0000e16d 	.word	0x0000e16d
   17b7c:	0001a379 	.word	0x0001a379
   17b80:	000195b1 	.word	0x000195b1
   17b84:	20000101 	.word	0x20000101
   17b88:	2000045c 	.word	0x2000045c
   17b8c:	00009fbd 	.word	0x00009fbd
   17b90:	200006cc 	.word	0x200006cc
   17b94:	000066ff 	.word	0x000066ff
   17b98:	0001cb80 	.word	0x0001cb80
   17b9c:	20000e0c 	.word	0x20000e0c
   17ba0:	20000e38 	.word	0x20000e38
   17ba4:	00006629 	.word	0x00006629
   17ba8:	200003cf 	.word	0x200003cf
				case 2:
					ble_write_buffer[0] = 0x2E;
   17bac:	4ba0      	ldr	r3, [pc, #640]	; (17e30 <main+0xa18>)
   17bae:	222e      	movs	r2, #46	; 0x2e
   17bb0:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(heading*10) & 0xFF); // Heading
   17bb2:	4ba0      	ldr	r3, [pc, #640]	; (17e34 <main+0xa1c>)
   17bb4:	681a      	ldr	r2, [r3, #0]
   17bb6:	4ba0      	ldr	r3, [pc, #640]	; (17e38 <main+0xa20>)
   17bb8:	49a0      	ldr	r1, [pc, #640]	; (17e3c <main+0xa24>)
   17bba:	1c10      	adds	r0, r2, #0
   17bbc:	4798      	blx	r3
   17bbe:	1c03      	adds	r3, r0, #0
   17bc0:	1c1a      	adds	r2, r3, #0
   17bc2:	4b9f      	ldr	r3, [pc, #636]	; (17e40 <main+0xa28>)
   17bc4:	1c10      	adds	r0, r2, #0
   17bc6:	4798      	blx	r3
   17bc8:	0003      	movs	r3, r0
   17bca:	b29b      	uxth	r3, r3
   17bcc:	b2da      	uxtb	r2, r3
   17bce:	4b98      	ldr	r3, [pc, #608]	; (17e30 <main+0xa18>)
   17bd0:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(heading*10) & 0xFF00) >> 8; // Heading
   17bd2:	4b98      	ldr	r3, [pc, #608]	; (17e34 <main+0xa1c>)
   17bd4:	681a      	ldr	r2, [r3, #0]
   17bd6:	4b98      	ldr	r3, [pc, #608]	; (17e38 <main+0xa20>)
   17bd8:	4998      	ldr	r1, [pc, #608]	; (17e3c <main+0xa24>)
   17bda:	1c10      	adds	r0, r2, #0
   17bdc:	4798      	blx	r3
   17bde:	1c03      	adds	r3, r0, #0
   17be0:	1c1a      	adds	r2, r3, #0
   17be2:	4b97      	ldr	r3, [pc, #604]	; (17e40 <main+0xa28>)
   17be4:	1c10      	adds	r0, r2, #0
   17be6:	4798      	blx	r3
   17be8:	0003      	movs	r3, r0
   17bea:	b29b      	uxth	r3, r3
   17bec:	0a1b      	lsrs	r3, r3, #8
   17bee:	b29b      	uxth	r3, r3
   17bf0:	b2da      	uxtb	r2, r3
   17bf2:	4b8f      	ldr	r3, [pc, #572]	; (17e30 <main+0xa18>)
   17bf4:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x22;
   17bf6:	4b8e      	ldr	r3, [pc, #568]	; (17e30 <main+0xa18>)
   17bf8:	2222      	movs	r2, #34	; 0x22
   17bfa:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = remote_y;
   17bfc:	4b91      	ldr	r3, [pc, #580]	; (17e44 <main+0xa2c>)
   17bfe:	781a      	ldrb	r2, [r3, #0]
   17c00:	4b8b      	ldr	r3, [pc, #556]	; (17e30 <main+0xa18>)
   17c02:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = 0x23;
   17c04:	4b8a      	ldr	r3, [pc, #552]	; (17e30 <main+0xa18>)
   17c06:	2223      	movs	r2, #35	; 0x23
   17c08:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (remote_btn_state | (REMOTE_TYPE << 1));
   17c0a:	4b8f      	ldr	r3, [pc, #572]	; (17e48 <main+0xa30>)
   17c0c:	781b      	ldrb	r3, [r3, #0]
   17c0e:	005b      	lsls	r3, r3, #1
   17c10:	b25a      	sxtb	r2, r3
   17c12:	4b8e      	ldr	r3, [pc, #568]	; (17e4c <main+0xa34>)
   17c14:	781b      	ldrb	r3, [r3, #0]
   17c16:	b25b      	sxtb	r3, r3
   17c18:	4313      	orrs	r3, r2
   17c1a:	b25b      	sxtb	r3, r3
   17c1c:	b2da      	uxtb	r2, r3
   17c1e:	4b84      	ldr	r3, [pc, #528]	; (17e30 <main+0xa18>)
   17c20:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = 0x24;
   17c22:	4b83      	ldr	r3, [pc, #524]	; (17e30 <main+0xa18>)
   17c24:	2224      	movs	r2, #36	; 0x24
   17c26:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = ((uint16_t)axKalman & 0xFF); // Accel X
   17c28:	4b89      	ldr	r3, [pc, #548]	; (17e50 <main+0xa38>)
   17c2a:	681a      	ldr	r2, [r3, #0]
   17c2c:	4b84      	ldr	r3, [pc, #528]	; (17e40 <main+0xa28>)
   17c2e:	1c10      	adds	r0, r2, #0
   17c30:	4798      	blx	r3
   17c32:	0003      	movs	r3, r0
   17c34:	b29b      	uxth	r3, r3
   17c36:	b2da      	uxtb	r2, r3
   17c38:	4b7d      	ldr	r3, [pc, #500]	; (17e30 <main+0xa18>)
   17c3a:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = ((uint16_t)axKalman & 0xFF00) >> 8; // Accel X
   17c3c:	4b84      	ldr	r3, [pc, #528]	; (17e50 <main+0xa38>)
   17c3e:	681a      	ldr	r2, [r3, #0]
   17c40:	4b7f      	ldr	r3, [pc, #508]	; (17e40 <main+0xa28>)
   17c42:	1c10      	adds	r0, r2, #0
   17c44:	4798      	blx	r3
   17c46:	0003      	movs	r3, r0
   17c48:	b29b      	uxth	r3, r3
   17c4a:	0a1b      	lsrs	r3, r3, #8
   17c4c:	b29b      	uxth	r3, r3
   17c4e:	b2da      	uxtb	r2, r3
   17c50:	4b77      	ldr	r3, [pc, #476]	; (17e30 <main+0xa18>)
   17c52:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = 0x25;
   17c54:	4b76      	ldr	r3, [pc, #472]	; (17e30 <main+0xa18>)
   17c56:	2225      	movs	r2, #37	; 0x25
   17c58:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = ((uint16_t)ayKalman & 0xFF); // Accel Y
   17c5a:	4b7e      	ldr	r3, [pc, #504]	; (17e54 <main+0xa3c>)
   17c5c:	681a      	ldr	r2, [r3, #0]
   17c5e:	4b78      	ldr	r3, [pc, #480]	; (17e40 <main+0xa28>)
   17c60:	1c10      	adds	r0, r2, #0
   17c62:	4798      	blx	r3
   17c64:	0003      	movs	r3, r0
   17c66:	b29b      	uxth	r3, r3
   17c68:	b2da      	uxtb	r2, r3
   17c6a:	4b71      	ldr	r3, [pc, #452]	; (17e30 <main+0xa18>)
   17c6c:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = ((uint16_t)ayKalman & 0xFF00) >> 8; // Accel Y
   17c6e:	4b79      	ldr	r3, [pc, #484]	; (17e54 <main+0xa3c>)
   17c70:	681a      	ldr	r2, [r3, #0]
   17c72:	4b73      	ldr	r3, [pc, #460]	; (17e40 <main+0xa28>)
   17c74:	1c10      	adds	r0, r2, #0
   17c76:	4798      	blx	r3
   17c78:	0003      	movs	r3, r0
   17c7a:	b29b      	uxth	r3, r3
   17c7c:	0a1b      	lsrs	r3, r3, #8
   17c7e:	b29b      	uxth	r3, r3
   17c80:	b2da      	uxtb	r2, r3
   17c82:	4b6b      	ldr	r3, [pc, #428]	; (17e30 <main+0xa18>)
   17c84:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = 0x26;
   17c86:	4b6a      	ldr	r3, [pc, #424]	; (17e30 <main+0xa18>)
   17c88:	2226      	movs	r2, #38	; 0x26
   17c8a:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = ((uint16_t)azKalman & 0xFF); // Accel Z
   17c8c:	4b72      	ldr	r3, [pc, #456]	; (17e58 <main+0xa40>)
   17c8e:	681a      	ldr	r2, [r3, #0]
   17c90:	4b6b      	ldr	r3, [pc, #428]	; (17e40 <main+0xa28>)
   17c92:	1c10      	adds	r0, r2, #0
   17c94:	4798      	blx	r3
   17c96:	0003      	movs	r3, r0
   17c98:	b29b      	uxth	r3, r3
   17c9a:	b2da      	uxtb	r2, r3
   17c9c:	4b64      	ldr	r3, [pc, #400]	; (17e30 <main+0xa18>)
   17c9e:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = ((uint16_t)azKalman & 0xFF00) >> 8; // Accel Z
   17ca0:	4b6d      	ldr	r3, [pc, #436]	; (17e58 <main+0xa40>)
   17ca2:	681a      	ldr	r2, [r3, #0]
   17ca4:	4b66      	ldr	r3, [pc, #408]	; (17e40 <main+0xa28>)
   17ca6:	1c10      	adds	r0, r2, #0
   17ca8:	4798      	blx	r3
   17caa:	0003      	movs	r3, r0
   17cac:	b29b      	uxth	r3, r3
   17cae:	0a1b      	lsrs	r3, r3, #8
   17cb0:	b29b      	uxth	r3, r3
   17cb2:	b2da      	uxtb	r2, r3
   17cb4:	4b5e      	ldr	r3, [pc, #376]	; (17e30 <main+0xa18>)
   17cb6:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x27;
   17cb8:	4b5d      	ldr	r3, [pc, #372]	; (17e30 <main+0xa18>)
   17cba:	2227      	movs	r2, #39	; 0x27
   17cbc:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((uint16_t)(gxKalman*10) & 0xFF); // Gyro X
   17cbe:	4b67      	ldr	r3, [pc, #412]	; (17e5c <main+0xa44>)
   17cc0:	681a      	ldr	r2, [r3, #0]
   17cc2:	4b5d      	ldr	r3, [pc, #372]	; (17e38 <main+0xa20>)
   17cc4:	495d      	ldr	r1, [pc, #372]	; (17e3c <main+0xa24>)
   17cc6:	1c10      	adds	r0, r2, #0
   17cc8:	4798      	blx	r3
   17cca:	1c03      	adds	r3, r0, #0
   17ccc:	1c1a      	adds	r2, r3, #0
   17cce:	4b5c      	ldr	r3, [pc, #368]	; (17e40 <main+0xa28>)
   17cd0:	1c10      	adds	r0, r2, #0
   17cd2:	4798      	blx	r3
   17cd4:	0003      	movs	r3, r0
   17cd6:	b29b      	uxth	r3, r3
   17cd8:	b2da      	uxtb	r2, r3
   17cda:	4b55      	ldr	r3, [pc, #340]	; (17e30 <main+0xa18>)
   17cdc:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = ((uint16_t)(gxKalman*10) & 0xFF00) >> 8; // Gyro X
   17cde:	4b5f      	ldr	r3, [pc, #380]	; (17e5c <main+0xa44>)
   17ce0:	681a      	ldr	r2, [r3, #0]
   17ce2:	4b55      	ldr	r3, [pc, #340]	; (17e38 <main+0xa20>)
   17ce4:	4955      	ldr	r1, [pc, #340]	; (17e3c <main+0xa24>)
   17ce6:	1c10      	adds	r0, r2, #0
   17ce8:	4798      	blx	r3
   17cea:	1c03      	adds	r3, r0, #0
   17cec:	1c1a      	adds	r2, r3, #0
   17cee:	4b54      	ldr	r3, [pc, #336]	; (17e40 <main+0xa28>)
   17cf0:	1c10      	adds	r0, r2, #0
   17cf2:	4798      	blx	r3
   17cf4:	0003      	movs	r3, r0
   17cf6:	b29b      	uxth	r3, r3
   17cf8:	0a1b      	lsrs	r3, r3, #8
   17cfa:	b29b      	uxth	r3, r3
   17cfc:	b2da      	uxtb	r2, r3
   17cfe:	4b4c      	ldr	r3, [pc, #304]	; (17e30 <main+0xa18>)
   17d00:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   17d02:	494b      	ldr	r1, [pc, #300]	; (17e30 <main+0xa18>)
   17d04:	4b56      	ldr	r3, [pc, #344]	; (17e60 <main+0xa48>)
   17d06:	2213      	movs	r2, #19
   17d08:	0018      	movs	r0, r3
   17d0a:	4b56      	ldr	r3, [pc, #344]	; (17e64 <main+0xa4c>)
   17d0c:	4798      	blx	r3
					break;
   17d0e:	e0d1      	b.n	17eb4 <main+0xa9c>
				case 3:
					ble_write_buffer[0] = 0x28;
   17d10:	4b47      	ldr	r3, [pc, #284]	; (17e30 <main+0xa18>)
   17d12:	2228      	movs	r2, #40	; 0x28
   17d14:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(gyKalman*10) & 0xFF); // Gyro Y
   17d16:	4b54      	ldr	r3, [pc, #336]	; (17e68 <main+0xa50>)
   17d18:	681a      	ldr	r2, [r3, #0]
   17d1a:	4b47      	ldr	r3, [pc, #284]	; (17e38 <main+0xa20>)
   17d1c:	4947      	ldr	r1, [pc, #284]	; (17e3c <main+0xa24>)
   17d1e:	1c10      	adds	r0, r2, #0
   17d20:	4798      	blx	r3
   17d22:	1c03      	adds	r3, r0, #0
   17d24:	1c1a      	adds	r2, r3, #0
   17d26:	4b46      	ldr	r3, [pc, #280]	; (17e40 <main+0xa28>)
   17d28:	1c10      	adds	r0, r2, #0
   17d2a:	4798      	blx	r3
   17d2c:	0003      	movs	r3, r0
   17d2e:	b29b      	uxth	r3, r3
   17d30:	b2da      	uxtb	r2, r3
   17d32:	4b3f      	ldr	r3, [pc, #252]	; (17e30 <main+0xa18>)
   17d34:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(gyKalman*10) & 0xFF00) >> 8; // Gyro Y
   17d36:	4b4c      	ldr	r3, [pc, #304]	; (17e68 <main+0xa50>)
   17d38:	681a      	ldr	r2, [r3, #0]
   17d3a:	4b3f      	ldr	r3, [pc, #252]	; (17e38 <main+0xa20>)
   17d3c:	493f      	ldr	r1, [pc, #252]	; (17e3c <main+0xa24>)
   17d3e:	1c10      	adds	r0, r2, #0
   17d40:	4798      	blx	r3
   17d42:	1c03      	adds	r3, r0, #0
   17d44:	1c1a      	adds	r2, r3, #0
   17d46:	4b3e      	ldr	r3, [pc, #248]	; (17e40 <main+0xa28>)
   17d48:	1c10      	adds	r0, r2, #0
   17d4a:	4798      	blx	r3
   17d4c:	0003      	movs	r3, r0
   17d4e:	b29b      	uxth	r3, r3
   17d50:	0a1b      	lsrs	r3, r3, #8
   17d52:	b29b      	uxth	r3, r3
   17d54:	b2da      	uxtb	r2, r3
   17d56:	4b36      	ldr	r3, [pc, #216]	; (17e30 <main+0xa18>)
   17d58:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x29;
   17d5a:	4b35      	ldr	r3, [pc, #212]	; (17e30 <main+0xa18>)
   17d5c:	2229      	movs	r2, #41	; 0x29
   17d5e:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = ((uint16_t)(gzKalman*10) & 0xFF); // Gyro Z
   17d60:	4b42      	ldr	r3, [pc, #264]	; (17e6c <main+0xa54>)
   17d62:	681a      	ldr	r2, [r3, #0]
   17d64:	4b34      	ldr	r3, [pc, #208]	; (17e38 <main+0xa20>)
   17d66:	4935      	ldr	r1, [pc, #212]	; (17e3c <main+0xa24>)
   17d68:	1c10      	adds	r0, r2, #0
   17d6a:	4798      	blx	r3
   17d6c:	1c03      	adds	r3, r0, #0
   17d6e:	1c1a      	adds	r2, r3, #0
   17d70:	4b33      	ldr	r3, [pc, #204]	; (17e40 <main+0xa28>)
   17d72:	1c10      	adds	r0, r2, #0
   17d74:	4798      	blx	r3
   17d76:	0003      	movs	r3, r0
   17d78:	b29b      	uxth	r3, r3
   17d7a:	b2da      	uxtb	r2, r3
   17d7c:	4b2c      	ldr	r3, [pc, #176]	; (17e30 <main+0xa18>)
   17d7e:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = ((uint16_t)(gzKalman*10) & 0xFF00) >> 8; // Gyro Z
   17d80:	4b3a      	ldr	r3, [pc, #232]	; (17e6c <main+0xa54>)
   17d82:	681a      	ldr	r2, [r3, #0]
   17d84:	4b2c      	ldr	r3, [pc, #176]	; (17e38 <main+0xa20>)
   17d86:	492d      	ldr	r1, [pc, #180]	; (17e3c <main+0xa24>)
   17d88:	1c10      	adds	r0, r2, #0
   17d8a:	4798      	blx	r3
   17d8c:	1c03      	adds	r3, r0, #0
   17d8e:	1c1a      	adds	r2, r3, #0
   17d90:	4b2b      	ldr	r3, [pc, #172]	; (17e40 <main+0xa28>)
   17d92:	1c10      	adds	r0, r2, #0
   17d94:	4798      	blx	r3
   17d96:	0003      	movs	r3, r0
   17d98:	b29b      	uxth	r3, r3
   17d9a:	0a1b      	lsrs	r3, r3, #8
   17d9c:	b29b      	uxth	r3, r3
   17d9e:	b2da      	uxtb	r2, r3
   17da0:	4b23      	ldr	r3, [pc, #140]	; (17e30 <main+0xa18>)
   17da2:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x2A;
   17da4:	4b22      	ldr	r3, [pc, #136]	; (17e30 <main+0xa18>)
   17da6:	222a      	movs	r2, #42	; 0x2a
   17da8:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = ((mx) & 0xFF); // Compass X
   17daa:	4b31      	ldr	r3, [pc, #196]	; (17e70 <main+0xa58>)
   17dac:	2200      	movs	r2, #0
   17dae:	5e9b      	ldrsh	r3, [r3, r2]
   17db0:	b2da      	uxtb	r2, r3
   17db2:	4b1f      	ldr	r3, [pc, #124]	; (17e30 <main+0xa18>)
   17db4:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (mx & 0xFF00) >> 8; // Compass X
   17db6:	4b2e      	ldr	r3, [pc, #184]	; (17e70 <main+0xa58>)
   17db8:	2200      	movs	r2, #0
   17dba:	5e9b      	ldrsh	r3, [r3, r2]
   17dbc:	121b      	asrs	r3, r3, #8
   17dbe:	b2da      	uxtb	r2, r3
   17dc0:	4b1b      	ldr	r3, [pc, #108]	; (17e30 <main+0xa18>)
   17dc2:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x2B;
   17dc4:	4b1a      	ldr	r3, [pc, #104]	; (17e30 <main+0xa18>)
   17dc6:	222b      	movs	r2, #43	; 0x2b
   17dc8:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (my & 0xFF); // Compass Y
   17dca:	4b2a      	ldr	r3, [pc, #168]	; (17e74 <main+0xa5c>)
   17dcc:	2200      	movs	r2, #0
   17dce:	5e9b      	ldrsh	r3, [r3, r2]
   17dd0:	b2da      	uxtb	r2, r3
   17dd2:	4b17      	ldr	r3, [pc, #92]	; (17e30 <main+0xa18>)
   17dd4:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (my & 0xFF00) >> 8; // Compass Y
   17dd6:	4b27      	ldr	r3, [pc, #156]	; (17e74 <main+0xa5c>)
   17dd8:	2200      	movs	r2, #0
   17dda:	5e9b      	ldrsh	r3, [r3, r2]
   17ddc:	121b      	asrs	r3, r3, #8
   17dde:	b2da      	uxtb	r2, r3
   17de0:	4b13      	ldr	r3, [pc, #76]	; (17e30 <main+0xa18>)
   17de2:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x2C;
   17de4:	4b12      	ldr	r3, [pc, #72]	; (17e30 <main+0xa18>)
   17de6:	222c      	movs	r2, #44	; 0x2c
   17de8:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (mz & 0xFF); // Compass Z
   17dea:	4b23      	ldr	r3, [pc, #140]	; (17e78 <main+0xa60>)
   17dec:	2200      	movs	r2, #0
   17dee:	5e9b      	ldrsh	r3, [r3, r2]
   17df0:	b2da      	uxtb	r2, r3
   17df2:	4b0f      	ldr	r3, [pc, #60]	; (17e30 <main+0xa18>)
   17df4:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (mz & 0xFF00) >> 8; // Compass Z
   17df6:	4b20      	ldr	r3, [pc, #128]	; (17e78 <main+0xa60>)
   17df8:	2200      	movs	r2, #0
   17dfa:	5e9b      	ldrsh	r3, [r3, r2]
   17dfc:	121b      	asrs	r3, r3, #8
   17dfe:	b2da      	uxtb	r2, r3
   17e00:	4b0b      	ldr	r3, [pc, #44]	; (17e30 <main+0xa18>)
   17e02:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x2D;
   17e04:	4b0a      	ldr	r3, [pc, #40]	; (17e30 <main+0xa18>)
   17e06:	222d      	movs	r2, #45	; 0x2d
   17e08:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = ((int)(light_sens) & 0xFF); // Light Sensor
   17e0a:	4b1c      	ldr	r3, [pc, #112]	; (17e7c <main+0xa64>)
   17e0c:	881b      	ldrh	r3, [r3, #0]
   17e0e:	b2da      	uxtb	r2, r3
   17e10:	4b07      	ldr	r3, [pc, #28]	; (17e30 <main+0xa18>)
   17e12:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((int)(light_sens) & 0xFF00) >> 8; // Light Sensor
   17e14:	4b19      	ldr	r3, [pc, #100]	; (17e7c <main+0xa64>)
   17e16:	881b      	ldrh	r3, [r3, #0]
   17e18:	0a1b      	lsrs	r3, r3, #8
   17e1a:	b29b      	uxth	r3, r3
   17e1c:	b2da      	uxtb	r2, r3
   17e1e:	4b04      	ldr	r3, [pc, #16]	; (17e30 <main+0xa18>)
   17e20:	745a      	strb	r2, [r3, #17]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 18);
   17e22:	4903      	ldr	r1, [pc, #12]	; (17e30 <main+0xa18>)
   17e24:	4b0e      	ldr	r3, [pc, #56]	; (17e60 <main+0xa48>)
   17e26:	2212      	movs	r2, #18
   17e28:	0018      	movs	r0, r3
   17e2a:	4b0e      	ldr	r3, [pc, #56]	; (17e64 <main+0xa4c>)
   17e2c:	4798      	blx	r3
					break;
   17e2e:	e041      	b.n	17eb4 <main+0xa9c>
   17e30:	20000e0c 	.word	0x20000e0c
   17e34:	20000384 	.word	0x20000384
   17e38:	00019d21 	.word	0x00019d21
   17e3c:	41200000 	.word	0x41200000
   17e40:	000195b1 	.word	0x000195b1
   17e44:	200003ce 	.word	0x200003ce
   17e48:	200000f8 	.word	0x200000f8
   17e4c:	200003d0 	.word	0x200003d0
   17e50:	2000036c 	.word	0x2000036c
   17e54:	20000370 	.word	0x20000370
   17e58:	20000374 	.word	0x20000374
   17e5c:	20000378 	.word	0x20000378
   17e60:	200006cc 	.word	0x200006cc
   17e64:	00006629 	.word	0x00006629
   17e68:	2000037c 	.word	0x2000037c
   17e6c:	20000380 	.word	0x20000380
   17e70:	20000324 	.word	0x20000324
   17e74:	20000326 	.word	0x20000326
   17e78:	20000328 	.word	0x20000328
   17e7c:	2000033c 	.word	0x2000033c
				case 4:
					ble_write_buffer[0] = 0x2F;
   17e80:	4bf3      	ldr	r3, [pc, #972]	; (18250 <main+0xe38>)
   17e82:	222f      	movs	r2, #47	; 0x2f
   17e84:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = (temperature_raw & 0xFF); // IMU Temperature
   17e86:	4bf3      	ldr	r3, [pc, #972]	; (18254 <main+0xe3c>)
   17e88:	2200      	movs	r2, #0
   17e8a:	5e9b      	ldrsh	r3, [r3, r2]
   17e8c:	b2da      	uxtb	r2, r3
   17e8e:	4bf0      	ldr	r3, [pc, #960]	; (18250 <main+0xe38>)
   17e90:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (temperature_raw & 0xFF00) >> 8; // IMU Temperature
   17e92:	4bf0      	ldr	r3, [pc, #960]	; (18254 <main+0xe3c>)
   17e94:	2200      	movs	r2, #0
   17e96:	5e9b      	ldrsh	r3, [r3, r2]
   17e98:	121b      	asrs	r3, r3, #8
   17e9a:	b2da      	uxtb	r2, r3
   17e9c:	4bec      	ldr	r3, [pc, #944]	; (18250 <main+0xe38>)
   17e9e:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0xDE;
   17ea0:	4beb      	ldr	r3, [pc, #940]	; (18250 <main+0xe38>)
   17ea2:	22de      	movs	r2, #222	; 0xde
   17ea4:	70da      	strb	r2, [r3, #3]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 4);
   17ea6:	49ea      	ldr	r1, [pc, #936]	; (18250 <main+0xe38>)
   17ea8:	4beb      	ldr	r3, [pc, #940]	; (18258 <main+0xe40>)
   17eaa:	2204      	movs	r2, #4
   17eac:	0018      	movs	r0, r3
   17eae:	4beb      	ldr	r3, [pc, #940]	; (1825c <main+0xe44>)
   17eb0:	4798      	blx	r3
					break;
   17eb2:	46c0      	nop			; (mov r8, r8)
		}
#if  defined(HW_4v0) || defined(HW_4v1)
			port_pin_set_output_level(STAT_LED,false);
#endif
			BLE_TX_INDEX++;
   17eb4:	68fb      	ldr	r3, [r7, #12]
   17eb6:	3301      	adds	r3, #1
   17eb8:	60fb      	str	r3, [r7, #12]
			if(BLE_TX_INDEX > 4)
   17eba:	68fb      	ldr	r3, [r7, #12]
   17ebc:	2b04      	cmp	r3, #4
   17ebe:	dd01      	ble.n	17ec4 <main+0xaac>
				BLE_TX_INDEX = 0;
   17ec0:	2300      	movs	r3, #0
   17ec2:	60fb      	str	r3, [r7, #12]

			BLE_TX_TIME = millis(); // Placed at end of transmit to provide accurate message timing
   17ec4:	4be6      	ldr	r3, [pc, #920]	; (18260 <main+0xe48>)
   17ec6:	4798      	blx	r3
   17ec8:	0003      	movs	r3, r0
   17eca:	603b      	str	r3, [r7, #0]
		}

		
		////////////////////////////   Handle Limits Request   ////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LIMITS)
   17ecc:	4be5      	ldr	r3, [pc, #916]	; (18264 <main+0xe4c>)
   17ece:	781b      	ldrb	r3, [r3, #0]
   17ed0:	2b00      	cmp	r3, #0
   17ed2:	d100      	bne.n	17ed6 <main+0xabe>
   17ed4:	e145      	b.n	18162 <main+0xd4a>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   17ed6:	46c0      	nop			; (mov r8, r8)
   17ed8:	2308      	movs	r3, #8
   17eda:	18fb      	adds	r3, r7, r3
   17edc:	881b      	ldrh	r3, [r3, #0]
   17ede:	005b      	lsls	r3, r3, #1
   17ee0:	001a      	movs	r2, r3
   17ee2:	003b      	movs	r3, r7
   17ee4:	0011      	movs	r1, r2
   17ee6:	0018      	movs	r0, r3
   17ee8:	4bdf      	ldr	r3, [pc, #892]	; (18268 <main+0xe50>)
   17eea:	4798      	blx	r3
   17eec:	0003      	movs	r3, r0
   17eee:	001a      	movs	r2, r3
   17ef0:	2301      	movs	r3, #1
   17ef2:	4053      	eors	r3, r2
   17ef4:	b2db      	uxtb	r3, r3
   17ef6:	2b00      	cmp	r3, #0
   17ef8:	d1ee      	bne.n	17ed8 <main+0xac0>
			BLE_TX_TIME = millis();
   17efa:	4bd9      	ldr	r3, [pc, #868]	; (18260 <main+0xe48>)
   17efc:	4798      	blx	r3
   17efe:	0003      	movs	r3, r0
   17f00:	603b      	str	r3, [r7, #0]

			ble_write_buffer[0] = 0x41;
   17f02:	4bd3      	ldr	r3, [pc, #844]	; (18250 <main+0xe38>)
   17f04:	2241      	movs	r2, #65	; 0x41
   17f06:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.motor_current_max;
   17f08:	4bd8      	ldr	r3, [pc, #864]	; (1826c <main+0xe54>)
   17f0a:	681b      	ldr	r3, [r3, #0]
   17f0c:	b2da      	uxtb	r2, r3
   17f0e:	4bd0      	ldr	r3, [pc, #832]	; (18250 <main+0xe38>)
   17f10:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x42;
   17f12:	4bcf      	ldr	r3, [pc, #828]	; (18250 <main+0xe38>)
   17f14:	2242      	movs	r2, #66	; 0x42
   17f16:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.motor_current_min;
   17f18:	4bd4      	ldr	r3, [pc, #848]	; (1826c <main+0xe54>)
   17f1a:	685b      	ldr	r3, [r3, #4]
   17f1c:	b2da      	uxtb	r2, r3
   17f1e:	4bcc      	ldr	r3, [pc, #816]	; (18250 <main+0xe38>)
   17f20:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x43;
   17f22:	4bcb      	ldr	r3, [pc, #812]	; (18250 <main+0xe38>)
   17f24:	2243      	movs	r2, #67	; 0x43
   17f26:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.input_current_max;
   17f28:	4bd0      	ldr	r3, [pc, #832]	; (1826c <main+0xe54>)
   17f2a:	689b      	ldr	r3, [r3, #8]
   17f2c:	b2da      	uxtb	r2, r3
   17f2e:	4bc8      	ldr	r3, [pc, #800]	; (18250 <main+0xe38>)
   17f30:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x44;
   17f32:	4bc7      	ldr	r3, [pc, #796]	; (18250 <main+0xe38>)
   17f34:	2244      	movs	r2, #68	; 0x44
   17f36:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.input_current_min;
   17f38:	4bcc      	ldr	r3, [pc, #816]	; (1826c <main+0xe54>)
   17f3a:	68db      	ldr	r3, [r3, #12]
   17f3c:	b2da      	uxtb	r2, r3
   17f3e:	4bc4      	ldr	r3, [pc, #784]	; (18250 <main+0xe38>)
   17f40:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x45;
   17f42:	4bc3      	ldr	r3, [pc, #780]	; (18250 <main+0xe38>)
   17f44:	2245      	movs	r2, #69	; 0x45
   17f46:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.abs_current_max;
   17f48:	4bc8      	ldr	r3, [pc, #800]	; (1826c <main+0xe54>)
   17f4a:	691b      	ldr	r3, [r3, #16]
   17f4c:	b2da      	uxtb	r2, r3
   17f4e:	4bc0      	ldr	r3, [pc, #768]	; (18250 <main+0xe38>)
   17f50:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x46;
   17f52:	4bbf      	ldr	r3, [pc, #764]	; (18250 <main+0xe38>)
   17f54:	2246      	movs	r2, #70	; 0x46
   17f56:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.max_vin;
   17f58:	4bc4      	ldr	r3, [pc, #784]	; (1826c <main+0xe54>)
   17f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17f5c:	b2da      	uxtb	r2, r3
   17f5e:	4bbc      	ldr	r3, [pc, #752]	; (18250 <main+0xe38>)
   17f60:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   17f62:	49bb      	ldr	r1, [pc, #748]	; (18250 <main+0xe38>)
   17f64:	4bbc      	ldr	r3, [pc, #752]	; (18258 <main+0xe40>)
   17f66:	220c      	movs	r2, #12
   17f68:	0018      	movs	r0, r3
   17f6a:	4bc1      	ldr	r3, [pc, #772]	; (18270 <main+0xe58>)
   17f6c:	4798      	blx	r3
			
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   17f6e:	46c0      	nop			; (mov r8, r8)
   17f70:	2308      	movs	r3, #8
   17f72:	18fb      	adds	r3, r7, r3
   17f74:	881b      	ldrh	r3, [r3, #0]
   17f76:	005b      	lsls	r3, r3, #1
   17f78:	001a      	movs	r2, r3
   17f7a:	003b      	movs	r3, r7
   17f7c:	0011      	movs	r1, r2
   17f7e:	0018      	movs	r0, r3
   17f80:	4bb9      	ldr	r3, [pc, #740]	; (18268 <main+0xe50>)
   17f82:	4798      	blx	r3
   17f84:	0003      	movs	r3, r0
   17f86:	001a      	movs	r2, r3
   17f88:	2301      	movs	r3, #1
   17f8a:	4053      	eors	r3, r2
   17f8c:	b2db      	uxtb	r3, r3
   17f8e:	2b00      	cmp	r3, #0
   17f90:	d1ee      	bne.n	17f70 <main+0xb58>
			BLE_TX_TIME = millis();
   17f92:	4bb3      	ldr	r3, [pc, #716]	; (18260 <main+0xe48>)
   17f94:	4798      	blx	r3
   17f96:	0003      	movs	r3, r0
   17f98:	603b      	str	r3, [r7, #0]

			ble_write_buffer[0] = 0x48;
   17f9a:	4bad      	ldr	r3, [pc, #692]	; (18250 <main+0xe38>)
   17f9c:	2248      	movs	r2, #72	; 0x48
   17f9e:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.battery_cut_start;
   17fa0:	4bb2      	ldr	r3, [pc, #712]	; (1826c <main+0xe54>)
   17fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17fa4:	4bb3      	ldr	r3, [pc, #716]	; (18274 <main+0xe5c>)
   17fa6:	1c10      	adds	r0, r2, #0
   17fa8:	4798      	blx	r3
   17faa:	0003      	movs	r3, r0
   17fac:	b2da      	uxtb	r2, r3
   17fae:	4ba8      	ldr	r3, [pc, #672]	; (18250 <main+0xe38>)
   17fb0:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x49;
   17fb2:	4ba7      	ldr	r3, [pc, #668]	; (18250 <main+0xe38>)
   17fb4:	2249      	movs	r2, #73	; 0x49
   17fb6:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.battery_cut_end;
   17fb8:	4bac      	ldr	r3, [pc, #688]	; (1826c <main+0xe54>)
   17fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17fbc:	4bad      	ldr	r3, [pc, #692]	; (18274 <main+0xe5c>)
   17fbe:	1c10      	adds	r0, r2, #0
   17fc0:	4798      	blx	r3
   17fc2:	0003      	movs	r3, r0
   17fc4:	b2da      	uxtb	r2, r3
   17fc6:	4ba2      	ldr	r3, [pc, #648]	; (18250 <main+0xe38>)
   17fc8:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4A;
   17fca:	4ba1      	ldr	r3, [pc, #644]	; (18250 <main+0xe38>)
   17fcc:	224a      	movs	r2, #74	; 0x4a
   17fce:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (mcconf_limits.max_erpm & 0xFF);
   17fd0:	4ba6      	ldr	r3, [pc, #664]	; (1826c <main+0xe54>)
   17fd2:	699b      	ldr	r3, [r3, #24]
   17fd4:	b2da      	uxtb	r2, r3
   17fd6:	4b9e      	ldr	r3, [pc, #632]	; (18250 <main+0xe38>)
   17fd8:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (mcconf_limits.max_erpm & 0xFF00) >> 8;
   17fda:	4ba4      	ldr	r3, [pc, #656]	; (1826c <main+0xe54>)
   17fdc:	699b      	ldr	r3, [r3, #24]
   17fde:	121b      	asrs	r3, r3, #8
   17fe0:	b2da      	uxtb	r2, r3
   17fe2:	4b9b      	ldr	r3, [pc, #620]	; (18250 <main+0xe38>)
   17fe4:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (mcconf_limits.max_erpm & 0xFF0000) >> 16;
   17fe6:	4ba1      	ldr	r3, [pc, #644]	; (1826c <main+0xe54>)
   17fe8:	699b      	ldr	r3, [r3, #24]
   17fea:	141b      	asrs	r3, r3, #16
   17fec:	b2da      	uxtb	r2, r3
   17fee:	4b98      	ldr	r3, [pc, #608]	; (18250 <main+0xe38>)
   17ff0:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4B;
   17ff2:	4b97      	ldr	r3, [pc, #604]	; (18250 <main+0xe38>)
   17ff4:	224b      	movs	r2, #75	; 0x4b
   17ff6:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (mcconf_limits.min_erpm & 0xFF);
   17ff8:	4b9c      	ldr	r3, [pc, #624]	; (1826c <main+0xe54>)
   17ffa:	695b      	ldr	r3, [r3, #20]
   17ffc:	b2da      	uxtb	r2, r3
   17ffe:	4b94      	ldr	r3, [pc, #592]	; (18250 <main+0xe38>)
   18000:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (mcconf_limits.min_erpm & 0xFF00) >> 8;
   18002:	4b9a      	ldr	r3, [pc, #616]	; (1826c <main+0xe54>)
   18004:	695b      	ldr	r3, [r3, #20]
   18006:	121b      	asrs	r3, r3, #8
   18008:	b2da      	uxtb	r2, r3
   1800a:	4b91      	ldr	r3, [pc, #580]	; (18250 <main+0xe38>)
   1800c:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (mcconf_limits.min_erpm & 0xFF0000) >> 16;
   1800e:	4b97      	ldr	r3, [pc, #604]	; (1826c <main+0xe54>)
   18010:	695b      	ldr	r3, [r3, #20]
   18012:	141b      	asrs	r3, r3, #16
   18014:	b2da      	uxtb	r2, r3
   18016:	4b8e      	ldr	r3, [pc, #568]	; (18250 <main+0xe38>)
   18018:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   1801a:	498d      	ldr	r1, [pc, #564]	; (18250 <main+0xe38>)
   1801c:	4b8e      	ldr	r3, [pc, #568]	; (18258 <main+0xe40>)
   1801e:	220c      	movs	r2, #12
   18020:	0018      	movs	r0, r3
   18022:	4b93      	ldr	r3, [pc, #588]	; (18270 <main+0xe58>)
   18024:	4798      	blx	r3
			
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18026:	46c0      	nop			; (mov r8, r8)
   18028:	2308      	movs	r3, #8
   1802a:	18fb      	adds	r3, r7, r3
   1802c:	881b      	ldrh	r3, [r3, #0]
   1802e:	005b      	lsls	r3, r3, #1
   18030:	001a      	movs	r2, r3
   18032:	003b      	movs	r3, r7
   18034:	0011      	movs	r1, r2
   18036:	0018      	movs	r0, r3
   18038:	4b8b      	ldr	r3, [pc, #556]	; (18268 <main+0xe50>)
   1803a:	4798      	blx	r3
   1803c:	0003      	movs	r3, r0
   1803e:	001a      	movs	r2, r3
   18040:	2301      	movs	r3, #1
   18042:	4053      	eors	r3, r2
   18044:	b2db      	uxtb	r3, r3
   18046:	2b00      	cmp	r3, #0
   18048:	d1ee      	bne.n	18028 <main+0xc10>
			BLE_TX_TIME = millis();
   1804a:	4b85      	ldr	r3, [pc, #532]	; (18260 <main+0xe48>)
   1804c:	4798      	blx	r3
   1804e:	0003      	movs	r3, r0
   18050:	603b      	str	r3, [r7, #0]

			ble_write_buffer[0] = 0x4C;
   18052:	4b7f      	ldr	r3, [pc, #508]	; (18250 <main+0xe38>)
   18054:	224c      	movs	r2, #76	; 0x4c
   18056:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((mcconf_limits.max_erpm_fbrake) & 0xFF);
   18058:	4b84      	ldr	r3, [pc, #528]	; (1826c <main+0xe54>)
   1805a:	69db      	ldr	r3, [r3, #28]
   1805c:	b2da      	uxtb	r2, r3
   1805e:	4b7c      	ldr	r3, [pc, #496]	; (18250 <main+0xe38>)
   18060:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ((mcconf_limits.max_erpm_fbrake) & 0xFF00) >> 8;
   18062:	4b82      	ldr	r3, [pc, #520]	; (1826c <main+0xe54>)
   18064:	69db      	ldr	r3, [r3, #28]
   18066:	121b      	asrs	r3, r3, #8
   18068:	b2da      	uxtb	r2, r3
   1806a:	4b79      	ldr	r3, [pc, #484]	; (18250 <main+0xe38>)
   1806c:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((mcconf_limits.max_erpm_fbrake) & 0xFF0000) >> 16;
   1806e:	4b7f      	ldr	r3, [pc, #508]	; (1826c <main+0xe54>)
   18070:	69db      	ldr	r3, [r3, #28]
   18072:	141b      	asrs	r3, r3, #16
   18074:	b2da      	uxtb	r2, r3
   18076:	4b76      	ldr	r3, [pc, #472]	; (18250 <main+0xe38>)
   18078:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4D;
   1807a:	4b75      	ldr	r3, [pc, #468]	; (18250 <main+0xe38>)
   1807c:	224d      	movs	r2, #77	; 0x4d
   1807e:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF);
   18080:	4b7a      	ldr	r3, [pc, #488]	; (1826c <main+0xe54>)
   18082:	6a1b      	ldr	r3, [r3, #32]
   18084:	b2da      	uxtb	r2, r3
   18086:	4b72      	ldr	r3, [pc, #456]	; (18250 <main+0xe38>)
   18088:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF00) >> 8;
   1808a:	4b78      	ldr	r3, [pc, #480]	; (1826c <main+0xe54>)
   1808c:	6a1b      	ldr	r3, [r3, #32]
   1808e:	121b      	asrs	r3, r3, #8
   18090:	b2da      	uxtb	r2, r3
   18092:	4b6f      	ldr	r3, [pc, #444]	; (18250 <main+0xe38>)
   18094:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF0000) >> 16;
   18096:	4b75      	ldr	r3, [pc, #468]	; (1826c <main+0xe54>)
   18098:	6a1b      	ldr	r3, [r3, #32]
   1809a:	141b      	asrs	r3, r3, #16
   1809c:	b2da      	uxtb	r2, r3
   1809e:	4b6c      	ldr	r3, [pc, #432]	; (18250 <main+0xe38>)
   180a0:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4E;
   180a2:	4b6b      	ldr	r3, [pc, #428]	; (18250 <main+0xe38>)
   180a4:	224e      	movs	r2, #78	; 0x4e
   180a6:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.temp_fet_start;
   180a8:	4b70      	ldr	r3, [pc, #448]	; (1826c <main+0xe54>)
   180aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   180ac:	b2da      	uxtb	r2, r3
   180ae:	4b68      	ldr	r3, [pc, #416]	; (18250 <main+0xe38>)
   180b0:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x4F;
   180b2:	4b67      	ldr	r3, [pc, #412]	; (18250 <main+0xe38>)
   180b4:	224f      	movs	r2, #79	; 0x4f
   180b6:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.temp_fet_end;
   180b8:	4b6c      	ldr	r3, [pc, #432]	; (1826c <main+0xe54>)
   180ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   180bc:	b2da      	uxtb	r2, r3
   180be:	4b64      	ldr	r3, [pc, #400]	; (18250 <main+0xe38>)
   180c0:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   180c2:	4963      	ldr	r1, [pc, #396]	; (18250 <main+0xe38>)
   180c4:	4b64      	ldr	r3, [pc, #400]	; (18258 <main+0xe40>)
   180c6:	220c      	movs	r2, #12
   180c8:	0018      	movs	r0, r3
   180ca:	4b69      	ldr	r3, [pc, #420]	; (18270 <main+0xe58>)
   180cc:	4798      	blx	r3
			
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   180ce:	46c0      	nop			; (mov r8, r8)
   180d0:	2308      	movs	r3, #8
   180d2:	18fb      	adds	r3, r7, r3
   180d4:	881b      	ldrh	r3, [r3, #0]
   180d6:	005b      	lsls	r3, r3, #1
   180d8:	001a      	movs	r2, r3
   180da:	003b      	movs	r3, r7
   180dc:	0011      	movs	r1, r2
   180de:	0018      	movs	r0, r3
   180e0:	4b61      	ldr	r3, [pc, #388]	; (18268 <main+0xe50>)
   180e2:	4798      	blx	r3
   180e4:	0003      	movs	r3, r0
   180e6:	001a      	movs	r2, r3
   180e8:	2301      	movs	r3, #1
   180ea:	4053      	eors	r3, r2
   180ec:	b2db      	uxtb	r3, r3
   180ee:	2b00      	cmp	r3, #0
   180f0:	d1ee      	bne.n	180d0 <main+0xcb8>
			BLE_TX_TIME = millis();
   180f2:	4b5b      	ldr	r3, [pc, #364]	; (18260 <main+0xe48>)
   180f4:	4798      	blx	r3
   180f6:	0003      	movs	r3, r0
   180f8:	603b      	str	r3, [r7, #0]

			ble_write_buffer[0] = 0x50;
   180fa:	4b55      	ldr	r3, [pc, #340]	; (18250 <main+0xe38>)
   180fc:	2250      	movs	r2, #80	; 0x50
   180fe:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.temp_motor_start;
   18100:	4b5a      	ldr	r3, [pc, #360]	; (1826c <main+0xe54>)
   18102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18104:	b2da      	uxtb	r2, r3
   18106:	4b52      	ldr	r3, [pc, #328]	; (18250 <main+0xe38>)
   18108:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x51;
   1810a:	4b51      	ldr	r3, [pc, #324]	; (18250 <main+0xe38>)
   1810c:	2251      	movs	r2, #81	; 0x51
   1810e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.temp_motor_end;
   18110:	4b56      	ldr	r3, [pc, #344]	; (1826c <main+0xe54>)
   18112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18114:	b2da      	uxtb	r2, r3
   18116:	4b4e      	ldr	r3, [pc, #312]	; (18250 <main+0xe38>)
   18118:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x52;
   1811a:	4b4d      	ldr	r3, [pc, #308]	; (18250 <main+0xe38>)
   1811c:	2252      	movs	r2, #82	; 0x52
   1811e:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.max_duty;
   18120:	4b52      	ldr	r3, [pc, #328]	; (1826c <main+0xe54>)
   18122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18124:	b2da      	uxtb	r2, r3
   18126:	4b4a      	ldr	r3, [pc, #296]	; (18250 <main+0xe38>)
   18128:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x53;
   1812a:	4b49      	ldr	r3, [pc, #292]	; (18250 <main+0xe38>)
   1812c:	2253      	movs	r2, #83	; 0x53
   1812e:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.min_duty;
   18130:	4b4e      	ldr	r3, [pc, #312]	; (1826c <main+0xe54>)
   18132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18134:	b2da      	uxtb	r2, r3
   18136:	4b46      	ldr	r3, [pc, #280]	; (18250 <main+0xe38>)
   18138:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x47;
   1813a:	4b45      	ldr	r3, [pc, #276]	; (18250 <main+0xe38>)
   1813c:	2247      	movs	r2, #71	; 0x47
   1813e:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.min_vin;
   18140:	4b4a      	ldr	r3, [pc, #296]	; (1826c <main+0xe54>)
   18142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18144:	b2da      	uxtb	r2, r3
   18146:	4b42      	ldr	r3, [pc, #264]	; (18250 <main+0xe38>)
   18148:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   1814a:	4941      	ldr	r1, [pc, #260]	; (18250 <main+0xe38>)
   1814c:	4b42      	ldr	r3, [pc, #264]	; (18258 <main+0xe40>)
   1814e:	220a      	movs	r2, #10
   18150:	0018      	movs	r0, r3
   18152:	4b47      	ldr	r3, [pc, #284]	; (18270 <main+0xe58>)
   18154:	4798      	blx	r3

			SEND_LIMITS = 0;
   18156:	4b43      	ldr	r3, [pc, #268]	; (18264 <main+0xe4c>)
   18158:	2200      	movs	r2, #0
   1815a:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1815c:	4b46      	ldr	r3, [pc, #280]	; (18278 <main+0xe60>)
   1815e:	2201      	movs	r2, #1
   18160:	701a      	strb	r2, [r3, #0]
		}

		
		////////////////////////   Handle Sensor Params Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_SENSORS)
   18162:	4b46      	ldr	r3, [pc, #280]	; (1827c <main+0xe64>)
   18164:	781b      	ldrb	r3, [r3, #0]
   18166:	2b00      	cmp	r3, #0
   18168:	d100      	bne.n	1816c <main+0xd54>
   1816a:	e162      	b.n	18432 <main+0x101a>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   1816c:	46c0      	nop			; (mov r8, r8)
   1816e:	2308      	movs	r3, #8
   18170:	18fb      	adds	r3, r7, r3
   18172:	881b      	ldrh	r3, [r3, #0]
   18174:	005b      	lsls	r3, r3, #1
   18176:	001a      	movs	r2, r3
   18178:	003b      	movs	r3, r7
   1817a:	0011      	movs	r1, r2
   1817c:	0018      	movs	r0, r3
   1817e:	4b3a      	ldr	r3, [pc, #232]	; (18268 <main+0xe50>)
   18180:	4798      	blx	r3
   18182:	0003      	movs	r3, r0
   18184:	001a      	movs	r2, r3
   18186:	2301      	movs	r3, #1
   18188:	4053      	eors	r3, r2
   1818a:	b2db      	uxtb	r3, r3
   1818c:	2b00      	cmp	r3, #0
   1818e:	d1ee      	bne.n	1816e <main+0xd56>
			BLE_TX_TIME = millis();
   18190:	4b33      	ldr	r3, [pc, #204]	; (18260 <main+0xe48>)
   18192:	4798      	blx	r3
   18194:	0003      	movs	r3, r0
   18196:	603b      	str	r3, [r7, #0]

			ble_write_buffer[0] = 0x61;
   18198:	4b2d      	ldr	r3, [pc, #180]	; (18250 <main+0xe38>)
   1819a:	2261      	movs	r2, #97	; 0x61
   1819c:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(err_estimate[ax_kalman]) & 0xFF); // Accel X estimated error
   1819e:	4b38      	ldr	r3, [pc, #224]	; (18280 <main+0xe68>)
   181a0:	681a      	ldr	r2, [r3, #0]
   181a2:	4b34      	ldr	r3, [pc, #208]	; (18274 <main+0xe5c>)
   181a4:	1c10      	adds	r0, r2, #0
   181a6:	4798      	blx	r3
   181a8:	0003      	movs	r3, r0
   181aa:	b29b      	uxth	r3, r3
   181ac:	b2da      	uxtb	r2, r3
   181ae:	4b28      	ldr	r3, [pc, #160]	; (18250 <main+0xe38>)
   181b0:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x62;
   181b2:	4b27      	ldr	r3, [pc, #156]	; (18250 <main+0xe38>)
   181b4:	2262      	movs	r2, #98	; 0x62
   181b6:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(err_estimate[ay_kalman]) & 0xFF); // AccelY estimated error
   181b8:	4b31      	ldr	r3, [pc, #196]	; (18280 <main+0xe68>)
   181ba:	685a      	ldr	r2, [r3, #4]
   181bc:	4b2d      	ldr	r3, [pc, #180]	; (18274 <main+0xe5c>)
   181be:	1c10      	adds	r0, r2, #0
   181c0:	4798      	blx	r3
   181c2:	0003      	movs	r3, r0
   181c4:	b29b      	uxth	r3, r3
   181c6:	b2da      	uxtb	r2, r3
   181c8:	4b21      	ldr	r3, [pc, #132]	; (18250 <main+0xe38>)
   181ca:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x63;
   181cc:	4b20      	ldr	r3, [pc, #128]	; (18250 <main+0xe38>)
   181ce:	2263      	movs	r2, #99	; 0x63
   181d0:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(err_estimate[az_kalman]) & 0xFF); // Accel Z estimated error
   181d2:	4b2b      	ldr	r3, [pc, #172]	; (18280 <main+0xe68>)
   181d4:	689a      	ldr	r2, [r3, #8]
   181d6:	4b27      	ldr	r3, [pc, #156]	; (18274 <main+0xe5c>)
   181d8:	1c10      	adds	r0, r2, #0
   181da:	4798      	blx	r3
   181dc:	0003      	movs	r3, r0
   181de:	b29b      	uxth	r3, r3
   181e0:	b2da      	uxtb	r2, r3
   181e2:	4b1b      	ldr	r3, [pc, #108]	; (18250 <main+0xe38>)
   181e4:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x64;
   181e6:	4b1a      	ldr	r3, [pc, #104]	; (18250 <main+0xe38>)
   181e8:	2264      	movs	r2, #100	; 0x64
   181ea:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(err_estimate[gx_kalman]) & 0xFF); // Gyro X estimated error
   181ec:	4b24      	ldr	r3, [pc, #144]	; (18280 <main+0xe68>)
   181ee:	68da      	ldr	r2, [r3, #12]
   181f0:	4b20      	ldr	r3, [pc, #128]	; (18274 <main+0xe5c>)
   181f2:	1c10      	adds	r0, r2, #0
   181f4:	4798      	blx	r3
   181f6:	0003      	movs	r3, r0
   181f8:	b29b      	uxth	r3, r3
   181fa:	b2da      	uxtb	r2, r3
   181fc:	4b14      	ldr	r3, [pc, #80]	; (18250 <main+0xe38>)
   181fe:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x65;
   18200:	4b13      	ldr	r3, [pc, #76]	; (18250 <main+0xe38>)
   18202:	2265      	movs	r2, #101	; 0x65
   18204:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(err_estimate[gy_kalman]) & 0xFF); // Gyro Y estimated error
   18206:	4b1e      	ldr	r3, [pc, #120]	; (18280 <main+0xe68>)
   18208:	691a      	ldr	r2, [r3, #16]
   1820a:	4b1a      	ldr	r3, [pc, #104]	; (18274 <main+0xe5c>)
   1820c:	1c10      	adds	r0, r2, #0
   1820e:	4798      	blx	r3
   18210:	0003      	movs	r3, r0
   18212:	b29b      	uxth	r3, r3
   18214:	b2da      	uxtb	r2, r3
   18216:	4b0e      	ldr	r3, [pc, #56]	; (18250 <main+0xe38>)
   18218:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x66;
   1821a:	4b0d      	ldr	r3, [pc, #52]	; (18250 <main+0xe38>)
   1821c:	2266      	movs	r2, #102	; 0x66
   1821e:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(err_estimate[gz_kalman]) & 0xFF); // Gyro Z estimated error
   18220:	4b17      	ldr	r3, [pc, #92]	; (18280 <main+0xe68>)
   18222:	695a      	ldr	r2, [r3, #20]
   18224:	4b13      	ldr	r3, [pc, #76]	; (18274 <main+0xe5c>)
   18226:	1c10      	adds	r0, r2, #0
   18228:	4798      	blx	r3
   1822a:	0003      	movs	r3, r0
   1822c:	b29b      	uxth	r3, r3
   1822e:	b2da      	uxtb	r2, r3
   18230:	4b07      	ldr	r3, [pc, #28]	; (18250 <main+0xe38>)
   18232:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x67;
   18234:	4b06      	ldr	r3, [pc, #24]	; (18250 <main+0xe38>)
   18236:	2267      	movs	r2, #103	; 0x67
   18238:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(err_estimate[light_kalman]) & 0xFF); // Light Sensor estimated error
   1823a:	4b11      	ldr	r3, [pc, #68]	; (18280 <main+0xe68>)
   1823c:	699a      	ldr	r2, [r3, #24]
   1823e:	4b0d      	ldr	r3, [pc, #52]	; (18274 <main+0xe5c>)
   18240:	1c10      	adds	r0, r2, #0
   18242:	4798      	blx	r3
   18244:	0003      	movs	r3, r0
   18246:	b29b      	uxth	r3, r3
   18248:	b2da      	uxtb	r2, r3
   1824a:	4b01      	ldr	r3, [pc, #4]	; (18250 <main+0xe38>)
   1824c:	735a      	strb	r2, [r3, #13]
   1824e:	e019      	b.n	18284 <main+0xe6c>
   18250:	20000e0c 	.word	0x20000e0c
   18254:	20000e70 	.word	0x20000e70
   18258:	200006cc 	.word	0x200006cc
   1825c:	00006629 	.word	0x00006629
   18260:	00009f65 	.word	0x00009f65
   18264:	200003c8 	.word	0x200003c8
   18268:	00009fbd 	.word	0x00009fbd
   1826c:	20001a8c 	.word	0x20001a8c
   18270:	000063bd 	.word	0x000063bd
   18274:	000195b1 	.word	0x000195b1
   18278:	20000101 	.word	0x20000101
   1827c:	20000444 	.word	0x20000444
   18280:	20000fb4 	.word	0x20000fb4
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   18284:	49f6      	ldr	r1, [pc, #984]	; (18660 <main+0x1248>)
   18286:	4bf7      	ldr	r3, [pc, #988]	; (18664 <main+0x124c>)
   18288:	220e      	movs	r2, #14
   1828a:	0018      	movs	r0, r3
   1828c:	4bf6      	ldr	r3, [pc, #984]	; (18668 <main+0x1250>)
   1828e:	4798      	blx	r3
		
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18290:	46c0      	nop			; (mov r8, r8)
   18292:	2308      	movs	r3, #8
   18294:	18fb      	adds	r3, r7, r3
   18296:	881b      	ldrh	r3, [r3, #0]
   18298:	005b      	lsls	r3, r3, #1
   1829a:	001a      	movs	r2, r3
   1829c:	003b      	movs	r3, r7
   1829e:	0011      	movs	r1, r2
   182a0:	0018      	movs	r0, r3
   182a2:	4bf2      	ldr	r3, [pc, #968]	; (1866c <main+0x1254>)
   182a4:	4798      	blx	r3
   182a6:	0003      	movs	r3, r0
   182a8:	001a      	movs	r2, r3
   182aa:	2301      	movs	r3, #1
   182ac:	4053      	eors	r3, r2
   182ae:	b2db      	uxtb	r3, r3
   182b0:	2b00      	cmp	r3, #0
   182b2:	d1ee      	bne.n	18292 <main+0xe7a>
			BLE_TX_TIME = millis();
   182b4:	4bee      	ldr	r3, [pc, #952]	; (18670 <main+0x1258>)
   182b6:	4798      	blx	r3
   182b8:	0003      	movs	r3, r0
   182ba:	603b      	str	r3, [r7, #0]

			ble_write_buffer[0] = 0x68;
   182bc:	4be8      	ldr	r3, [pc, #928]	; (18660 <main+0x1248>)
   182be:	2268      	movs	r2, #104	; 0x68
   182c0:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(q[ax_kalman]*100.0) & 0xFF); // Accel X Sensitivity
   182c2:	4bec      	ldr	r3, [pc, #944]	; (18674 <main+0x125c>)
   182c4:	681a      	ldr	r2, [r3, #0]
   182c6:	4bec      	ldr	r3, [pc, #944]	; (18678 <main+0x1260>)
   182c8:	1c10      	adds	r0, r2, #0
   182ca:	4798      	blx	r3
   182cc:	4ceb      	ldr	r4, [pc, #940]	; (1867c <main+0x1264>)
   182ce:	2200      	movs	r2, #0
   182d0:	4beb      	ldr	r3, [pc, #940]	; (18680 <main+0x1268>)
   182d2:	47a0      	blx	r4
   182d4:	0003      	movs	r3, r0
   182d6:	000c      	movs	r4, r1
   182d8:	0019      	movs	r1, r3
   182da:	0022      	movs	r2, r4
   182dc:	4be9      	ldr	r3, [pc, #932]	; (18684 <main+0x126c>)
   182de:	0008      	movs	r0, r1
   182e0:	0011      	movs	r1, r2
   182e2:	4798      	blx	r3
   182e4:	0003      	movs	r3, r0
   182e6:	b29b      	uxth	r3, r3
   182e8:	b2da      	uxtb	r2, r3
   182ea:	4bdd      	ldr	r3, [pc, #884]	; (18660 <main+0x1248>)
   182ec:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x69;
   182ee:	4bdc      	ldr	r3, [pc, #880]	; (18660 <main+0x1248>)
   182f0:	2269      	movs	r2, #105	; 0x69
   182f2:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(q[ay_kalman]*100.0) & 0xFF); // Accel Y Sensitivity
   182f4:	4bdf      	ldr	r3, [pc, #892]	; (18674 <main+0x125c>)
   182f6:	685a      	ldr	r2, [r3, #4]
   182f8:	4bdf      	ldr	r3, [pc, #892]	; (18678 <main+0x1260>)
   182fa:	1c10      	adds	r0, r2, #0
   182fc:	4798      	blx	r3
   182fe:	4cdf      	ldr	r4, [pc, #892]	; (1867c <main+0x1264>)
   18300:	2200      	movs	r2, #0
   18302:	4bdf      	ldr	r3, [pc, #892]	; (18680 <main+0x1268>)
   18304:	47a0      	blx	r4
   18306:	0003      	movs	r3, r0
   18308:	000c      	movs	r4, r1
   1830a:	0019      	movs	r1, r3
   1830c:	0022      	movs	r2, r4
   1830e:	4bdd      	ldr	r3, [pc, #884]	; (18684 <main+0x126c>)
   18310:	0008      	movs	r0, r1
   18312:	0011      	movs	r1, r2
   18314:	4798      	blx	r3
   18316:	0003      	movs	r3, r0
   18318:	b29b      	uxth	r3, r3
   1831a:	b2da      	uxtb	r2, r3
   1831c:	4bd0      	ldr	r3, [pc, #832]	; (18660 <main+0x1248>)
   1831e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x6A;
   18320:	4bcf      	ldr	r3, [pc, #828]	; (18660 <main+0x1248>)
   18322:	226a      	movs	r2, #106	; 0x6a
   18324:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(q[az_kalman]*100.0) & 0xFF); // Accel Z Sensitivity
   18326:	4bd3      	ldr	r3, [pc, #844]	; (18674 <main+0x125c>)
   18328:	689a      	ldr	r2, [r3, #8]
   1832a:	4bd3      	ldr	r3, [pc, #844]	; (18678 <main+0x1260>)
   1832c:	1c10      	adds	r0, r2, #0
   1832e:	4798      	blx	r3
   18330:	4cd2      	ldr	r4, [pc, #840]	; (1867c <main+0x1264>)
   18332:	2200      	movs	r2, #0
   18334:	4bd2      	ldr	r3, [pc, #840]	; (18680 <main+0x1268>)
   18336:	47a0      	blx	r4
   18338:	0003      	movs	r3, r0
   1833a:	000c      	movs	r4, r1
   1833c:	0019      	movs	r1, r3
   1833e:	0022      	movs	r2, r4
   18340:	4bd0      	ldr	r3, [pc, #832]	; (18684 <main+0x126c>)
   18342:	0008      	movs	r0, r1
   18344:	0011      	movs	r1, r2
   18346:	4798      	blx	r3
   18348:	0003      	movs	r3, r0
   1834a:	b29b      	uxth	r3, r3
   1834c:	b2da      	uxtb	r2, r3
   1834e:	4bc4      	ldr	r3, [pc, #784]	; (18660 <main+0x1248>)
   18350:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x6B;
   18352:	4bc3      	ldr	r3, [pc, #780]	; (18660 <main+0x1248>)
   18354:	226b      	movs	r2, #107	; 0x6b
   18356:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(q[gx_kalman]*100.0) & 0xFF); // Gyro X Sensitivity
   18358:	4bc6      	ldr	r3, [pc, #792]	; (18674 <main+0x125c>)
   1835a:	68da      	ldr	r2, [r3, #12]
   1835c:	4bc6      	ldr	r3, [pc, #792]	; (18678 <main+0x1260>)
   1835e:	1c10      	adds	r0, r2, #0
   18360:	4798      	blx	r3
   18362:	4cc6      	ldr	r4, [pc, #792]	; (1867c <main+0x1264>)
   18364:	2200      	movs	r2, #0
   18366:	4bc6      	ldr	r3, [pc, #792]	; (18680 <main+0x1268>)
   18368:	47a0      	blx	r4
   1836a:	0003      	movs	r3, r0
   1836c:	000c      	movs	r4, r1
   1836e:	0019      	movs	r1, r3
   18370:	0022      	movs	r2, r4
   18372:	4bc4      	ldr	r3, [pc, #784]	; (18684 <main+0x126c>)
   18374:	0008      	movs	r0, r1
   18376:	0011      	movs	r1, r2
   18378:	4798      	blx	r3
   1837a:	0003      	movs	r3, r0
   1837c:	b29b      	uxth	r3, r3
   1837e:	b2da      	uxtb	r2, r3
   18380:	4bb7      	ldr	r3, [pc, #732]	; (18660 <main+0x1248>)
   18382:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x6C;
   18384:	4bb6      	ldr	r3, [pc, #728]	; (18660 <main+0x1248>)
   18386:	226c      	movs	r2, #108	; 0x6c
   18388:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(q[gy_kalman]*100.0) & 0xFF); // Gyro Y Sensitivity
   1838a:	4bba      	ldr	r3, [pc, #744]	; (18674 <main+0x125c>)
   1838c:	691a      	ldr	r2, [r3, #16]
   1838e:	4bba      	ldr	r3, [pc, #744]	; (18678 <main+0x1260>)
   18390:	1c10      	adds	r0, r2, #0
   18392:	4798      	blx	r3
   18394:	4cb9      	ldr	r4, [pc, #740]	; (1867c <main+0x1264>)
   18396:	2200      	movs	r2, #0
   18398:	4bb9      	ldr	r3, [pc, #740]	; (18680 <main+0x1268>)
   1839a:	47a0      	blx	r4
   1839c:	0003      	movs	r3, r0
   1839e:	000c      	movs	r4, r1
   183a0:	0019      	movs	r1, r3
   183a2:	0022      	movs	r2, r4
   183a4:	4bb7      	ldr	r3, [pc, #732]	; (18684 <main+0x126c>)
   183a6:	0008      	movs	r0, r1
   183a8:	0011      	movs	r1, r2
   183aa:	4798      	blx	r3
   183ac:	0003      	movs	r3, r0
   183ae:	b29b      	uxth	r3, r3
   183b0:	b2da      	uxtb	r2, r3
   183b2:	4bab      	ldr	r3, [pc, #684]	; (18660 <main+0x1248>)
   183b4:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x6D;
   183b6:	4baa      	ldr	r3, [pc, #680]	; (18660 <main+0x1248>)
   183b8:	226d      	movs	r2, #109	; 0x6d
   183ba:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(q[gz_kalman]*100.0) & 0xFF); // Gyro Z Sensitivity
   183bc:	4bad      	ldr	r3, [pc, #692]	; (18674 <main+0x125c>)
   183be:	695a      	ldr	r2, [r3, #20]
   183c0:	4bad      	ldr	r3, [pc, #692]	; (18678 <main+0x1260>)
   183c2:	1c10      	adds	r0, r2, #0
   183c4:	4798      	blx	r3
   183c6:	4cad      	ldr	r4, [pc, #692]	; (1867c <main+0x1264>)
   183c8:	2200      	movs	r2, #0
   183ca:	4bad      	ldr	r3, [pc, #692]	; (18680 <main+0x1268>)
   183cc:	47a0      	blx	r4
   183ce:	0003      	movs	r3, r0
   183d0:	000c      	movs	r4, r1
   183d2:	0019      	movs	r1, r3
   183d4:	0022      	movs	r2, r4
   183d6:	4bab      	ldr	r3, [pc, #684]	; (18684 <main+0x126c>)
   183d8:	0008      	movs	r0, r1
   183da:	0011      	movs	r1, r2
   183dc:	4798      	blx	r3
   183de:	0003      	movs	r3, r0
   183e0:	b29b      	uxth	r3, r3
   183e2:	b2da      	uxtb	r2, r3
   183e4:	4b9e      	ldr	r3, [pc, #632]	; (18660 <main+0x1248>)
   183e6:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x6E;
   183e8:	4b9d      	ldr	r3, [pc, #628]	; (18660 <main+0x1248>)
   183ea:	226e      	movs	r2, #110	; 0x6e
   183ec:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(q[light_kalman]*100.0) & 0xFF); // Light Sensitivity
   183ee:	4ba1      	ldr	r3, [pc, #644]	; (18674 <main+0x125c>)
   183f0:	699a      	ldr	r2, [r3, #24]
   183f2:	4ba1      	ldr	r3, [pc, #644]	; (18678 <main+0x1260>)
   183f4:	1c10      	adds	r0, r2, #0
   183f6:	4798      	blx	r3
   183f8:	4ca0      	ldr	r4, [pc, #640]	; (1867c <main+0x1264>)
   183fa:	2200      	movs	r2, #0
   183fc:	4ba0      	ldr	r3, [pc, #640]	; (18680 <main+0x1268>)
   183fe:	47a0      	blx	r4
   18400:	0003      	movs	r3, r0
   18402:	000c      	movs	r4, r1
   18404:	0019      	movs	r1, r3
   18406:	0022      	movs	r2, r4
   18408:	4b9e      	ldr	r3, [pc, #632]	; (18684 <main+0x126c>)
   1840a:	0008      	movs	r0, r1
   1840c:	0011      	movs	r1, r2
   1840e:	4798      	blx	r3
   18410:	0003      	movs	r3, r0
   18412:	b29b      	uxth	r3, r3
   18414:	b2da      	uxtb	r2, r3
   18416:	4b92      	ldr	r3, [pc, #584]	; (18660 <main+0x1248>)
   18418:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   1841a:	4991      	ldr	r1, [pc, #580]	; (18660 <main+0x1248>)
   1841c:	4b91      	ldr	r3, [pc, #580]	; (18664 <main+0x124c>)
   1841e:	220e      	movs	r2, #14
   18420:	0018      	movs	r0, r3
   18422:	4b91      	ldr	r3, [pc, #580]	; (18668 <main+0x1250>)
   18424:	4798      	blx	r3

			SEND_SENSORS = 0;
   18426:	4b98      	ldr	r3, [pc, #608]	; (18688 <main+0x1270>)
   18428:	2200      	movs	r2, #0
   1842a:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1842c:	4b97      	ldr	r3, [pc, #604]	; (1868c <main+0x1274>)
   1842e:	2201      	movs	r2, #1
   18430:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle LED Params Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LED_CHARS)
   18432:	4b97      	ldr	r3, [pc, #604]	; (18690 <main+0x1278>)
   18434:	781b      	ldrb	r3, [r3, #0]
   18436:	2b00      	cmp	r3, #0
   18438:	d100      	bne.n	1843c <main+0x1024>
   1843a:	e385      	b.n	18b48 <main+0x1730>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   1843c:	46c0      	nop			; (mov r8, r8)
   1843e:	2308      	movs	r3, #8
   18440:	18fb      	adds	r3, r7, r3
   18442:	881b      	ldrh	r3, [r3, #0]
   18444:	005b      	lsls	r3, r3, #1
   18446:	001a      	movs	r2, r3
   18448:	003b      	movs	r3, r7
   1844a:	0011      	movs	r1, r2
   1844c:	0018      	movs	r0, r3
   1844e:	4b87      	ldr	r3, [pc, #540]	; (1866c <main+0x1254>)
   18450:	4798      	blx	r3
   18452:	0003      	movs	r3, r0
   18454:	001a      	movs	r2, r3
   18456:	2301      	movs	r3, #1
   18458:	4053      	eors	r3, r2
   1845a:	b2db      	uxtb	r3, r3
   1845c:	2b00      	cmp	r3, #0
   1845e:	d1ee      	bne.n	1843e <main+0x1026>
			BLE_TX_TIME = millis();
   18460:	4b83      	ldr	r3, [pc, #524]	; (18670 <main+0x1258>)
   18462:	4798      	blx	r3
   18464:	0003      	movs	r3, r0
   18466:	603b      	str	r3, [r7, #0]

			uint8_t led_mode_switches = ((light_mode << 4) | (HEADLIGHTS << 3) | (SIDELIGHTS << 2) | (LIGHT_CONTROLLED << 1) | IMU_CONTROLED);
   18468:	4b8a      	ldr	r3, [pc, #552]	; (18694 <main+0x127c>)
   1846a:	781b      	ldrb	r3, [r3, #0]
   1846c:	011b      	lsls	r3, r3, #4
   1846e:	b25a      	sxtb	r2, r3
   18470:	4b89      	ldr	r3, [pc, #548]	; (18698 <main+0x1280>)
   18472:	781b      	ldrb	r3, [r3, #0]
   18474:	00db      	lsls	r3, r3, #3
   18476:	b25b      	sxtb	r3, r3
   18478:	4313      	orrs	r3, r2
   1847a:	b25a      	sxtb	r2, r3
   1847c:	4b87      	ldr	r3, [pc, #540]	; (1869c <main+0x1284>)
   1847e:	781b      	ldrb	r3, [r3, #0]
   18480:	009b      	lsls	r3, r3, #2
   18482:	b25b      	sxtb	r3, r3
   18484:	4313      	orrs	r3, r2
   18486:	b25a      	sxtb	r2, r3
   18488:	4b85      	ldr	r3, [pc, #532]	; (186a0 <main+0x1288>)
   1848a:	781b      	ldrb	r3, [r3, #0]
   1848c:	005b      	lsls	r3, r3, #1
   1848e:	b25b      	sxtb	r3, r3
   18490:	4313      	orrs	r3, r2
   18492:	b25a      	sxtb	r2, r3
   18494:	4b83      	ldr	r3, [pc, #524]	; (186a4 <main+0x128c>)
   18496:	781b      	ldrb	r3, [r3, #0]
   18498:	b25b      	sxtb	r3, r3
   1849a:	4313      	orrs	r3, r2
   1849c:	b25a      	sxtb	r2, r3
   1849e:	1dfb      	adds	r3, r7, #7
   184a0:	701a      	strb	r2, [r3, #0]

			// Global LED Settings
			ble_write_buffer[0] = 0x31;
   184a2:	4b6f      	ldr	r3, [pc, #444]	; (18660 <main+0x1248>)
   184a4:	2231      	movs	r2, #49	; 0x31
   184a6:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = led_mode_switches; // Current switch states
   184a8:	4b6d      	ldr	r3, [pc, #436]	; (18660 <main+0x1248>)
   184aa:	1dfa      	adds	r2, r7, #7
   184ac:	7812      	ldrb	r2, [r2, #0]
   184ae:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = RGB_led_type;
   184b0:	4b7d      	ldr	r3, [pc, #500]	; (186a8 <main+0x1290>)
   184b2:	781a      	ldrb	r2, [r3, #0]
   184b4:	4b6a      	ldr	r3, [pc, #424]	; (18660 <main+0x1248>)
   184b6:	709a      	strb	r2, [r3, #2]
			// Analog Static
			ble_write_buffer[3] = 0x32;
   184b8:	4b69      	ldr	r3, [pc, #420]	; (18660 <main+0x1248>)
   184ba:	2232      	movs	r2, #50	; 0x32
   184bc:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((float)Static_RGB.LR / 655.35);
   184be:	4b7b      	ldr	r3, [pc, #492]	; (186ac <main+0x1294>)
   184c0:	881a      	ldrh	r2, [r3, #0]
   184c2:	4b7b      	ldr	r3, [pc, #492]	; (186b0 <main+0x1298>)
   184c4:	0010      	movs	r0, r2
   184c6:	4798      	blx	r3
   184c8:	1c02      	adds	r2, r0, #0
   184ca:	4b6b      	ldr	r3, [pc, #428]	; (18678 <main+0x1260>)
   184cc:	1c10      	adds	r0, r2, #0
   184ce:	4798      	blx	r3
   184d0:	4c78      	ldr	r4, [pc, #480]	; (186b4 <main+0x129c>)
   184d2:	4a79      	ldr	r2, [pc, #484]	; (186b8 <main+0x12a0>)
   184d4:	4b79      	ldr	r3, [pc, #484]	; (186bc <main+0x12a4>)
   184d6:	47a0      	blx	r4
   184d8:	0003      	movs	r3, r0
   184da:	000c      	movs	r4, r1
   184dc:	0019      	movs	r1, r3
   184de:	0022      	movs	r2, r4
   184e0:	4b68      	ldr	r3, [pc, #416]	; (18684 <main+0x126c>)
   184e2:	0008      	movs	r0, r1
   184e4:	0011      	movs	r1, r2
   184e6:	4798      	blx	r3
   184e8:	0003      	movs	r3, r0
   184ea:	b2da      	uxtb	r2, r3
   184ec:	4b5c      	ldr	r3, [pc, #368]	; (18660 <main+0x1248>)
   184ee:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((float)Static_RGB.LG / 655.35);
   184f0:	4b6e      	ldr	r3, [pc, #440]	; (186ac <main+0x1294>)
   184f2:	885a      	ldrh	r2, [r3, #2]
   184f4:	4b6e      	ldr	r3, [pc, #440]	; (186b0 <main+0x1298>)
   184f6:	0010      	movs	r0, r2
   184f8:	4798      	blx	r3
   184fa:	1c02      	adds	r2, r0, #0
   184fc:	4b5e      	ldr	r3, [pc, #376]	; (18678 <main+0x1260>)
   184fe:	1c10      	adds	r0, r2, #0
   18500:	4798      	blx	r3
   18502:	4c6c      	ldr	r4, [pc, #432]	; (186b4 <main+0x129c>)
   18504:	4a6c      	ldr	r2, [pc, #432]	; (186b8 <main+0x12a0>)
   18506:	4b6d      	ldr	r3, [pc, #436]	; (186bc <main+0x12a4>)
   18508:	47a0      	blx	r4
   1850a:	0003      	movs	r3, r0
   1850c:	000c      	movs	r4, r1
   1850e:	0019      	movs	r1, r3
   18510:	0022      	movs	r2, r4
   18512:	4b5c      	ldr	r3, [pc, #368]	; (18684 <main+0x126c>)
   18514:	0008      	movs	r0, r1
   18516:	0011      	movs	r1, r2
   18518:	4798      	blx	r3
   1851a:	0003      	movs	r3, r0
   1851c:	b2da      	uxtb	r2, r3
   1851e:	4b50      	ldr	r3, [pc, #320]	; (18660 <main+0x1248>)
   18520:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((float)Static_RGB.LB / 655.35);
   18522:	4b62      	ldr	r3, [pc, #392]	; (186ac <main+0x1294>)
   18524:	889a      	ldrh	r2, [r3, #4]
   18526:	4b62      	ldr	r3, [pc, #392]	; (186b0 <main+0x1298>)
   18528:	0010      	movs	r0, r2
   1852a:	4798      	blx	r3
   1852c:	1c02      	adds	r2, r0, #0
   1852e:	4b52      	ldr	r3, [pc, #328]	; (18678 <main+0x1260>)
   18530:	1c10      	adds	r0, r2, #0
   18532:	4798      	blx	r3
   18534:	4c5f      	ldr	r4, [pc, #380]	; (186b4 <main+0x129c>)
   18536:	4a60      	ldr	r2, [pc, #384]	; (186b8 <main+0x12a0>)
   18538:	4b60      	ldr	r3, [pc, #384]	; (186bc <main+0x12a4>)
   1853a:	47a0      	blx	r4
   1853c:	0003      	movs	r3, r0
   1853e:	000c      	movs	r4, r1
   18540:	0019      	movs	r1, r3
   18542:	0022      	movs	r2, r4
   18544:	4b4f      	ldr	r3, [pc, #316]	; (18684 <main+0x126c>)
   18546:	0008      	movs	r0, r1
   18548:	0011      	movs	r1, r2
   1854a:	4798      	blx	r3
   1854c:	0003      	movs	r3, r0
   1854e:	b2da      	uxtb	r2, r3
   18550:	4b43      	ldr	r3, [pc, #268]	; (18660 <main+0x1248>)
   18552:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Static_RGB.RR / 655.35);
   18554:	4b55      	ldr	r3, [pc, #340]	; (186ac <main+0x1294>)
   18556:	88da      	ldrh	r2, [r3, #6]
   18558:	4b55      	ldr	r3, [pc, #340]	; (186b0 <main+0x1298>)
   1855a:	0010      	movs	r0, r2
   1855c:	4798      	blx	r3
   1855e:	1c02      	adds	r2, r0, #0
   18560:	4b45      	ldr	r3, [pc, #276]	; (18678 <main+0x1260>)
   18562:	1c10      	adds	r0, r2, #0
   18564:	4798      	blx	r3
   18566:	4c53      	ldr	r4, [pc, #332]	; (186b4 <main+0x129c>)
   18568:	4a53      	ldr	r2, [pc, #332]	; (186b8 <main+0x12a0>)
   1856a:	4b54      	ldr	r3, [pc, #336]	; (186bc <main+0x12a4>)
   1856c:	47a0      	blx	r4
   1856e:	0003      	movs	r3, r0
   18570:	000c      	movs	r4, r1
   18572:	0019      	movs	r1, r3
   18574:	0022      	movs	r2, r4
   18576:	4b43      	ldr	r3, [pc, #268]	; (18684 <main+0x126c>)
   18578:	0008      	movs	r0, r1
   1857a:	0011      	movs	r1, r2
   1857c:	4798      	blx	r3
   1857e:	0003      	movs	r3, r0
   18580:	b2da      	uxtb	r2, r3
   18582:	4b37      	ldr	r3, [pc, #220]	; (18660 <main+0x1248>)
   18584:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Static_RGB.RG / 655.35);
   18586:	4b49      	ldr	r3, [pc, #292]	; (186ac <main+0x1294>)
   18588:	891a      	ldrh	r2, [r3, #8]
   1858a:	4b49      	ldr	r3, [pc, #292]	; (186b0 <main+0x1298>)
   1858c:	0010      	movs	r0, r2
   1858e:	4798      	blx	r3
   18590:	1c02      	adds	r2, r0, #0
   18592:	4b39      	ldr	r3, [pc, #228]	; (18678 <main+0x1260>)
   18594:	1c10      	adds	r0, r2, #0
   18596:	4798      	blx	r3
   18598:	4c46      	ldr	r4, [pc, #280]	; (186b4 <main+0x129c>)
   1859a:	4a47      	ldr	r2, [pc, #284]	; (186b8 <main+0x12a0>)
   1859c:	4b47      	ldr	r3, [pc, #284]	; (186bc <main+0x12a4>)
   1859e:	47a0      	blx	r4
   185a0:	0003      	movs	r3, r0
   185a2:	000c      	movs	r4, r1
   185a4:	0019      	movs	r1, r3
   185a6:	0022      	movs	r2, r4
   185a8:	4b36      	ldr	r3, [pc, #216]	; (18684 <main+0x126c>)
   185aa:	0008      	movs	r0, r1
   185ac:	0011      	movs	r1, r2
   185ae:	4798      	blx	r3
   185b0:	0003      	movs	r3, r0
   185b2:	b2da      	uxtb	r2, r3
   185b4:	4b2a      	ldr	r3, [pc, #168]	; (18660 <main+0x1248>)
   185b6:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)((float)Static_RGB.RB / 655.35);
   185b8:	4b3c      	ldr	r3, [pc, #240]	; (186ac <main+0x1294>)
   185ba:	895a      	ldrh	r2, [r3, #10]
   185bc:	4b3c      	ldr	r3, [pc, #240]	; (186b0 <main+0x1298>)
   185be:	0010      	movs	r0, r2
   185c0:	4798      	blx	r3
   185c2:	1c02      	adds	r2, r0, #0
   185c4:	4b2c      	ldr	r3, [pc, #176]	; (18678 <main+0x1260>)
   185c6:	1c10      	adds	r0, r2, #0
   185c8:	4798      	blx	r3
   185ca:	4c3a      	ldr	r4, [pc, #232]	; (186b4 <main+0x129c>)
   185cc:	4a3a      	ldr	r2, [pc, #232]	; (186b8 <main+0x12a0>)
   185ce:	4b3b      	ldr	r3, [pc, #236]	; (186bc <main+0x12a4>)
   185d0:	47a0      	blx	r4
   185d2:	0003      	movs	r3, r0
   185d4:	000c      	movs	r4, r1
   185d6:	0019      	movs	r1, r3
   185d8:	0022      	movs	r2, r4
   185da:	4b2a      	ldr	r3, [pc, #168]	; (18684 <main+0x126c>)
   185dc:	0008      	movs	r0, r1
   185de:	0011      	movs	r1, r2
   185e0:	4798      	blx	r3
   185e2:	0003      	movs	r3, r0
   185e4:	b2da      	uxtb	r2, r3
   185e6:	4b1e      	ldr	r3, [pc, #120]	; (18660 <main+0x1248>)
   185e8:	725a      	strb	r2, [r3, #9]
			// Analog Color Cycle
			ble_write_buffer[10] = 0x33;
   185ea:	4b1d      	ldr	r3, [pc, #116]	; (18660 <main+0x1248>)
   185ec:	2233      	movs	r2, #51	; 0x33
   185ee:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)(RateSens[MODE_ANALOG_COLOR_CYCLE] * 100);
   185f0:	4b33      	ldr	r3, [pc, #204]	; (186c0 <main+0x12a8>)
   185f2:	685a      	ldr	r2, [r3, #4]
   185f4:	4b33      	ldr	r3, [pc, #204]	; (186c4 <main+0x12ac>)
   185f6:	4934      	ldr	r1, [pc, #208]	; (186c8 <main+0x12b0>)
   185f8:	1c10      	adds	r0, r2, #0
   185fa:	4798      	blx	r3
   185fc:	1c03      	adds	r3, r0, #0
   185fe:	1c1a      	adds	r2, r3, #0
   18600:	4b32      	ldr	r3, [pc, #200]	; (186cc <main+0x12b4>)
   18602:	1c10      	adds	r0, r2, #0
   18604:	4798      	blx	r3
   18606:	0003      	movs	r3, r0
   18608:	b2da      	uxtb	r2, r3
   1860a:	4b15      	ldr	r3, [pc, #84]	; (18660 <main+0x1248>)
   1860c:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)(Brightness[MODE_ANALOG_COLOR_CYCLE] * 100);
   1860e:	4b30      	ldr	r3, [pc, #192]	; (186d0 <main+0x12b8>)
   18610:	685a      	ldr	r2, [r3, #4]
   18612:	4b2c      	ldr	r3, [pc, #176]	; (186c4 <main+0x12ac>)
   18614:	492c      	ldr	r1, [pc, #176]	; (186c8 <main+0x12b0>)
   18616:	1c10      	adds	r0, r2, #0
   18618:	4798      	blx	r3
   1861a:	1c03      	adds	r3, r0, #0
   1861c:	1c1a      	adds	r2, r3, #0
   1861e:	4b2b      	ldr	r3, [pc, #172]	; (186cc <main+0x12b4>)
   18620:	1c10      	adds	r0, r2, #0
   18622:	4798      	blx	r3
   18624:	0003      	movs	r3, r0
   18626:	b2da      	uxtb	r2, r3
   18628:	4b0d      	ldr	r3, [pc, #52]	; (18660 <main+0x1248>)
   1862a:	731a      	strb	r2, [r3, #12]
			// Analog Compass Cycle
			ble_write_buffer[13] = 0x34;
   1862c:	4b0c      	ldr	r3, [pc, #48]	; (18660 <main+0x1248>)
   1862e:	2234      	movs	r2, #52	; 0x34
   18630:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_ANALOG_COMPASS_CYCLE] * 100);
   18632:	4b27      	ldr	r3, [pc, #156]	; (186d0 <main+0x12b8>)
   18634:	689a      	ldr	r2, [r3, #8]
   18636:	4b23      	ldr	r3, [pc, #140]	; (186c4 <main+0x12ac>)
   18638:	4923      	ldr	r1, [pc, #140]	; (186c8 <main+0x12b0>)
   1863a:	1c10      	adds	r0, r2, #0
   1863c:	4798      	blx	r3
   1863e:	1c03      	adds	r3, r0, #0
   18640:	1c1a      	adds	r2, r3, #0
   18642:	4b22      	ldr	r3, [pc, #136]	; (186cc <main+0x12b4>)
   18644:	1c10      	adds	r0, r2, #0
   18646:	4798      	blx	r3
   18648:	0003      	movs	r3, r0
   1864a:	b2da      	uxtb	r2, r3
   1864c:	4b04      	ldr	r3, [pc, #16]	; (18660 <main+0x1248>)
   1864e:	739a      	strb	r2, [r3, #14]
			// Analog Throttle Based
			ble_write_buffer[15] = 0x35;
   18650:	4b03      	ldr	r3, [pc, #12]	; (18660 <main+0x1248>)
   18652:	2235      	movs	r2, #53	; 0x35
   18654:	73da      	strb	r2, [r3, #15]
			ble_write_buffer[16] = (uint8_t)(RateSens[MODE_ANALOG_THROTTLE] * 100);
   18656:	4b1a      	ldr	r3, [pc, #104]	; (186c0 <main+0x12a8>)
   18658:	68da      	ldr	r2, [r3, #12]
   1865a:	4b1a      	ldr	r3, [pc, #104]	; (186c4 <main+0x12ac>)
   1865c:	e03a      	b.n	186d4 <main+0x12bc>
   1865e:	46c0      	nop			; (mov r8, r8)
   18660:	20000e0c 	.word	0x20000e0c
   18664:	200006cc 	.word	0x200006cc
   18668:	000063bd 	.word	0x000063bd
   1866c:	00009fbd 	.word	0x00009fbd
   18670:	00009f65 	.word	0x00009f65
   18674:	20001a6c 	.word	0x20001a6c
   18678:	0001bf15 	.word	0x0001bf15
   1867c:	0001b28d 	.word	0x0001b28d
   18680:	40590000 	.word	0x40590000
   18684:	000195e1 	.word	0x000195e1
   18688:	20000444 	.word	0x20000444
   1868c:	20000101 	.word	0x20000101
   18690:	20000442 	.word	0x20000442
   18694:	2000003c 	.word	0x2000003c
   18698:	200003ad 	.word	0x200003ad
   1869c:	200000d5 	.word	0x200000d5
   186a0:	200003ae 	.word	0x200003ae
   186a4:	200003af 	.word	0x200003af
   186a8:	20001a88 	.word	0x20001a88
   186ac:	20000040 	.word	0x20000040
   186b0:	0001a379 	.word	0x0001a379
   186b4:	0001aa25 	.word	0x0001aa25
   186b8:	cccccccd 	.word	0xcccccccd
   186bc:	40847acc 	.word	0x40847acc
   186c0:	2000004c 	.word	0x2000004c
   186c4:	00019d21 	.word	0x00019d21
   186c8:	42c80000 	.word	0x42c80000
   186cc:	000195b1 	.word	0x000195b1
   186d0:	20000070 	.word	0x20000070
   186d4:	49f4      	ldr	r1, [pc, #976]	; (18aa8 <main+0x1690>)
   186d6:	1c10      	adds	r0, r2, #0
   186d8:	4798      	blx	r3
   186da:	1c03      	adds	r3, r0, #0
   186dc:	1c1a      	adds	r2, r3, #0
   186de:	4bf3      	ldr	r3, [pc, #972]	; (18aac <main+0x1694>)
   186e0:	1c10      	adds	r0, r2, #0
   186e2:	4798      	blx	r3
   186e4:	0003      	movs	r3, r0
   186e6:	b2da      	uxtb	r2, r3
   186e8:	4bf1      	ldr	r3, [pc, #964]	; (18ab0 <main+0x1698>)
   186ea:	741a      	strb	r2, [r3, #16]
			ble_write_buffer[17] = (uint8_t)(Brightness[MODE_ANALOG_THROTTLE] * 100);
   186ec:	4bf1      	ldr	r3, [pc, #964]	; (18ab4 <main+0x169c>)
   186ee:	68da      	ldr	r2, [r3, #12]
   186f0:	4bf1      	ldr	r3, [pc, #964]	; (18ab8 <main+0x16a0>)
   186f2:	49ed      	ldr	r1, [pc, #948]	; (18aa8 <main+0x1690>)
   186f4:	1c10      	adds	r0, r2, #0
   186f6:	4798      	blx	r3
   186f8:	1c03      	adds	r3, r0, #0
   186fa:	1c1a      	adds	r2, r3, #0
   186fc:	4beb      	ldr	r3, [pc, #940]	; (18aac <main+0x1694>)
   186fe:	1c10      	adds	r0, r2, #0
   18700:	4798      	blx	r3
   18702:	0003      	movs	r3, r0
   18704:	b2da      	uxtb	r2, r3
   18706:	4bea      	ldr	r3, [pc, #936]	; (18ab0 <main+0x1698>)
   18708:	745a      	strb	r2, [r3, #17]
			// Analog RPM Based
			ble_write_buffer[18] = 0x36;
   1870a:	4be9      	ldr	r3, [pc, #932]	; (18ab0 <main+0x1698>)
   1870c:	2236      	movs	r2, #54	; 0x36
   1870e:	749a      	strb	r2, [r3, #18]
			ble_write_buffer[19] = (uint8_t)(RateSens[MODE_ANALOG_RPM_CYCLE] * 100);
   18710:	4bea      	ldr	r3, [pc, #936]	; (18abc <main+0x16a4>)
   18712:	691a      	ldr	r2, [r3, #16]
   18714:	4be8      	ldr	r3, [pc, #928]	; (18ab8 <main+0x16a0>)
   18716:	49e4      	ldr	r1, [pc, #912]	; (18aa8 <main+0x1690>)
   18718:	1c10      	adds	r0, r2, #0
   1871a:	4798      	blx	r3
   1871c:	1c03      	adds	r3, r0, #0
   1871e:	1c1a      	adds	r2, r3, #0
   18720:	4be2      	ldr	r3, [pc, #904]	; (18aac <main+0x1694>)
   18722:	1c10      	adds	r0, r2, #0
   18724:	4798      	blx	r3
   18726:	0003      	movs	r3, r0
   18728:	b2da      	uxtb	r2, r3
   1872a:	4be1      	ldr	r3, [pc, #900]	; (18ab0 <main+0x1698>)
   1872c:	74da      	strb	r2, [r3, #19]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 20);
   1872e:	49e0      	ldr	r1, [pc, #896]	; (18ab0 <main+0x1698>)
   18730:	4be3      	ldr	r3, [pc, #908]	; (18ac0 <main+0x16a8>)
   18732:	2214      	movs	r2, #20
   18734:	0018      	movs	r0, r3
   18736:	4be3      	ldr	r3, [pc, #908]	; (18ac4 <main+0x16ac>)
   18738:	4798      	blx	r3
			
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   1873a:	46c0      	nop			; (mov r8, r8)
   1873c:	2308      	movs	r3, #8
   1873e:	18fb      	adds	r3, r7, r3
   18740:	881b      	ldrh	r3, [r3, #0]
   18742:	005b      	lsls	r3, r3, #1
   18744:	001a      	movs	r2, r3
   18746:	003b      	movs	r3, r7
   18748:	0011      	movs	r1, r2
   1874a:	0018      	movs	r0, r3
   1874c:	4bde      	ldr	r3, [pc, #888]	; (18ac8 <main+0x16b0>)
   1874e:	4798      	blx	r3
   18750:	0003      	movs	r3, r0
   18752:	001a      	movs	r2, r3
   18754:	2301      	movs	r3, #1
   18756:	4053      	eors	r3, r2
   18758:	b2db      	uxtb	r3, r3
   1875a:	2b00      	cmp	r3, #0
   1875c:	d1ee      	bne.n	1873c <main+0x1324>
			BLE_TX_TIME = millis();
   1875e:	4bdb      	ldr	r3, [pc, #876]	; (18acc <main+0x16b4>)
   18760:	4798      	blx	r3
   18762:	0003      	movs	r3, r0
   18764:	603b      	str	r3, [r7, #0]

			// Analog X Accel Based
			ble_write_buffer[0] = 0x37;
   18766:	4bd2      	ldr	r3, [pc, #840]	; (18ab0 <main+0x1698>)
   18768:	2237      	movs	r2, #55	; 0x37
   1876a:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RateSens[MODE_ANALOG_X_ACCEL] * 100);
   1876c:	4bd3      	ldr	r3, [pc, #844]	; (18abc <main+0x16a4>)
   1876e:	699a      	ldr	r2, [r3, #24]
   18770:	4bd1      	ldr	r3, [pc, #836]	; (18ab8 <main+0x16a0>)
   18772:	49cd      	ldr	r1, [pc, #820]	; (18aa8 <main+0x1690>)
   18774:	1c10      	adds	r0, r2, #0
   18776:	4798      	blx	r3
   18778:	1c03      	adds	r3, r0, #0
   1877a:	1c1a      	adds	r2, r3, #0
   1877c:	4bcb      	ldr	r3, [pc, #812]	; (18aac <main+0x1694>)
   1877e:	1c10      	adds	r0, r2, #0
   18780:	4798      	blx	r3
   18782:	0003      	movs	r3, r0
   18784:	b2da      	uxtb	r2, r3
   18786:	4bca      	ldr	r3, [pc, #808]	; (18ab0 <main+0x1698>)
   18788:	705a      	strb	r2, [r3, #1]
			// Analog Y Accel Based
			ble_write_buffer[2] = 0x38;
   1878a:	4bc9      	ldr	r3, [pc, #804]	; (18ab0 <main+0x1698>)
   1878c:	2238      	movs	r2, #56	; 0x38
   1878e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Brightness[MODE_ANALOG_Y_ACCEL] * 100);
   18790:	4bc8      	ldr	r3, [pc, #800]	; (18ab4 <main+0x169c>)
   18792:	69da      	ldr	r2, [r3, #28]
   18794:	4bc8      	ldr	r3, [pc, #800]	; (18ab8 <main+0x16a0>)
   18796:	49c4      	ldr	r1, [pc, #784]	; (18aa8 <main+0x1690>)
   18798:	1c10      	adds	r0, r2, #0
   1879a:	4798      	blx	r3
   1879c:	1c03      	adds	r3, r0, #0
   1879e:	1c1a      	adds	r2, r3, #0
   187a0:	4bc2      	ldr	r3, [pc, #776]	; (18aac <main+0x1694>)
   187a2:	1c10      	adds	r0, r2, #0
   187a4:	4798      	blx	r3
   187a6:	0003      	movs	r3, r0
   187a8:	b2da      	uxtb	r2, r3
   187aa:	4bc1      	ldr	r3, [pc, #772]	; (18ab0 <main+0x1698>)
   187ac:	70da      	strb	r2, [r3, #3]
			// Analog Custom
			uint8_t color_bright_base = (ColorBase[MODE_ANALOG_CUSTOM] << 4) | BrightBase[MODE_ANALOG_CUSTOM];
   187ae:	4bc8      	ldr	r3, [pc, #800]	; (18ad0 <main+0x16b8>)
   187b0:	7a1b      	ldrb	r3, [r3, #8]
   187b2:	011b      	lsls	r3, r3, #4
   187b4:	b25a      	sxtb	r2, r3
   187b6:	4bc7      	ldr	r3, [pc, #796]	; (18ad4 <main+0x16bc>)
   187b8:	7a1b      	ldrb	r3, [r3, #8]
   187ba:	b25b      	sxtb	r3, r3
   187bc:	4313      	orrs	r3, r2
   187be:	b25a      	sxtb	r2, r3
   187c0:	1dbb      	adds	r3, r7, #6
   187c2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[4] = 0x39;
   187c4:	4bba      	ldr	r3, [pc, #744]	; (18ab0 <main+0x1698>)
   187c6:	2239      	movs	r2, #57	; 0x39
   187c8:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = color_bright_base;
   187ca:	4bb9      	ldr	r3, [pc, #740]	; (18ab0 <main+0x1698>)
   187cc:	1dba      	adds	r2, r7, #6
   187ce:	7812      	ldrb	r2, [r2, #0]
   187d0:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = RateBase[MODE_ANALOG_CUSTOM];
   187d2:	4bc1      	ldr	r3, [pc, #772]	; (18ad8 <main+0x16c0>)
   187d4:	7a1a      	ldrb	r2, [r3, #8]
   187d6:	4bb6      	ldr	r3, [pc, #728]	; (18ab0 <main+0x1698>)
   187d8:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Custom_RGB.LR / 655.35);
   187da:	4bc0      	ldr	r3, [pc, #768]	; (18adc <main+0x16c4>)
   187dc:	881a      	ldrh	r2, [r3, #0]
   187de:	4bc0      	ldr	r3, [pc, #768]	; (18ae0 <main+0x16c8>)
   187e0:	0010      	movs	r0, r2
   187e2:	4798      	blx	r3
   187e4:	1c02      	adds	r2, r0, #0
   187e6:	4bbf      	ldr	r3, [pc, #764]	; (18ae4 <main+0x16cc>)
   187e8:	1c10      	adds	r0, r2, #0
   187ea:	4798      	blx	r3
   187ec:	4cbe      	ldr	r4, [pc, #760]	; (18ae8 <main+0x16d0>)
   187ee:	4abf      	ldr	r2, [pc, #764]	; (18aec <main+0x16d4>)
   187f0:	4bbf      	ldr	r3, [pc, #764]	; (18af0 <main+0x16d8>)
   187f2:	47a0      	blx	r4
   187f4:	0003      	movs	r3, r0
   187f6:	000c      	movs	r4, r1
   187f8:	0019      	movs	r1, r3
   187fa:	0022      	movs	r2, r4
   187fc:	4bbd      	ldr	r3, [pc, #756]	; (18af4 <main+0x16dc>)
   187fe:	0008      	movs	r0, r1
   18800:	0011      	movs	r1, r2
   18802:	4798      	blx	r3
   18804:	0003      	movs	r3, r0
   18806:	b2da      	uxtb	r2, r3
   18808:	4ba9      	ldr	r3, [pc, #676]	; (18ab0 <main+0x1698>)
   1880a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Custom_RGB.LG / 655.35);
   1880c:	4bb3      	ldr	r3, [pc, #716]	; (18adc <main+0x16c4>)
   1880e:	885a      	ldrh	r2, [r3, #2]
   18810:	4bb3      	ldr	r3, [pc, #716]	; (18ae0 <main+0x16c8>)
   18812:	0010      	movs	r0, r2
   18814:	4798      	blx	r3
   18816:	1c02      	adds	r2, r0, #0
   18818:	4bb2      	ldr	r3, [pc, #712]	; (18ae4 <main+0x16cc>)
   1881a:	1c10      	adds	r0, r2, #0
   1881c:	4798      	blx	r3
   1881e:	4cb2      	ldr	r4, [pc, #712]	; (18ae8 <main+0x16d0>)
   18820:	4ab2      	ldr	r2, [pc, #712]	; (18aec <main+0x16d4>)
   18822:	4bb3      	ldr	r3, [pc, #716]	; (18af0 <main+0x16d8>)
   18824:	47a0      	blx	r4
   18826:	0003      	movs	r3, r0
   18828:	000c      	movs	r4, r1
   1882a:	0019      	movs	r1, r3
   1882c:	0022      	movs	r2, r4
   1882e:	4bb1      	ldr	r3, [pc, #708]	; (18af4 <main+0x16dc>)
   18830:	0008      	movs	r0, r1
   18832:	0011      	movs	r1, r2
   18834:	4798      	blx	r3
   18836:	0003      	movs	r3, r0
   18838:	b2da      	uxtb	r2, r3
   1883a:	4b9d      	ldr	r3, [pc, #628]	; (18ab0 <main+0x1698>)
   1883c:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)((float)Custom_RGB.LB / 655.35);
   1883e:	4ba7      	ldr	r3, [pc, #668]	; (18adc <main+0x16c4>)
   18840:	889a      	ldrh	r2, [r3, #4]
   18842:	4ba7      	ldr	r3, [pc, #668]	; (18ae0 <main+0x16c8>)
   18844:	0010      	movs	r0, r2
   18846:	4798      	blx	r3
   18848:	1c02      	adds	r2, r0, #0
   1884a:	4ba6      	ldr	r3, [pc, #664]	; (18ae4 <main+0x16cc>)
   1884c:	1c10      	adds	r0, r2, #0
   1884e:	4798      	blx	r3
   18850:	4ca5      	ldr	r4, [pc, #660]	; (18ae8 <main+0x16d0>)
   18852:	4aa6      	ldr	r2, [pc, #664]	; (18aec <main+0x16d4>)
   18854:	4ba6      	ldr	r3, [pc, #664]	; (18af0 <main+0x16d8>)
   18856:	47a0      	blx	r4
   18858:	0003      	movs	r3, r0
   1885a:	000c      	movs	r4, r1
   1885c:	0019      	movs	r1, r3
   1885e:	0022      	movs	r2, r4
   18860:	4ba4      	ldr	r3, [pc, #656]	; (18af4 <main+0x16dc>)
   18862:	0008      	movs	r0, r1
   18864:	0011      	movs	r1, r2
   18866:	4798      	blx	r3
   18868:	0003      	movs	r3, r0
   1886a:	b2da      	uxtb	r2, r3
   1886c:	4b90      	ldr	r3, [pc, #576]	; (18ab0 <main+0x1698>)
   1886e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)((float)Custom_RGB.RR / 655.35);
   18870:	4b9a      	ldr	r3, [pc, #616]	; (18adc <main+0x16c4>)
   18872:	88da      	ldrh	r2, [r3, #6]
   18874:	4b9a      	ldr	r3, [pc, #616]	; (18ae0 <main+0x16c8>)
   18876:	0010      	movs	r0, r2
   18878:	4798      	blx	r3
   1887a:	1c02      	adds	r2, r0, #0
   1887c:	4b99      	ldr	r3, [pc, #612]	; (18ae4 <main+0x16cc>)
   1887e:	1c10      	adds	r0, r2, #0
   18880:	4798      	blx	r3
   18882:	4c99      	ldr	r4, [pc, #612]	; (18ae8 <main+0x16d0>)
   18884:	4a99      	ldr	r2, [pc, #612]	; (18aec <main+0x16d4>)
   18886:	4b9a      	ldr	r3, [pc, #616]	; (18af0 <main+0x16d8>)
   18888:	47a0      	blx	r4
   1888a:	0003      	movs	r3, r0
   1888c:	000c      	movs	r4, r1
   1888e:	0019      	movs	r1, r3
   18890:	0022      	movs	r2, r4
   18892:	4b98      	ldr	r3, [pc, #608]	; (18af4 <main+0x16dc>)
   18894:	0008      	movs	r0, r1
   18896:	0011      	movs	r1, r2
   18898:	4798      	blx	r3
   1889a:	0003      	movs	r3, r0
   1889c:	b2da      	uxtb	r2, r3
   1889e:	4b84      	ldr	r3, [pc, #528]	; (18ab0 <main+0x1698>)
   188a0:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)((float)Custom_RGB.RG / 655.35);
   188a2:	4b8e      	ldr	r3, [pc, #568]	; (18adc <main+0x16c4>)
   188a4:	891a      	ldrh	r2, [r3, #8]
   188a6:	4b8e      	ldr	r3, [pc, #568]	; (18ae0 <main+0x16c8>)
   188a8:	0010      	movs	r0, r2
   188aa:	4798      	blx	r3
   188ac:	1c02      	adds	r2, r0, #0
   188ae:	4b8d      	ldr	r3, [pc, #564]	; (18ae4 <main+0x16cc>)
   188b0:	1c10      	adds	r0, r2, #0
   188b2:	4798      	blx	r3
   188b4:	4c8c      	ldr	r4, [pc, #560]	; (18ae8 <main+0x16d0>)
   188b6:	4a8d      	ldr	r2, [pc, #564]	; (18aec <main+0x16d4>)
   188b8:	4b8d      	ldr	r3, [pc, #564]	; (18af0 <main+0x16d8>)
   188ba:	47a0      	blx	r4
   188bc:	0003      	movs	r3, r0
   188be:	000c      	movs	r4, r1
   188c0:	0019      	movs	r1, r3
   188c2:	0022      	movs	r2, r4
   188c4:	4b8b      	ldr	r3, [pc, #556]	; (18af4 <main+0x16dc>)
   188c6:	0008      	movs	r0, r1
   188c8:	0011      	movs	r1, r2
   188ca:	4798      	blx	r3
   188cc:	0003      	movs	r3, r0
   188ce:	b2da      	uxtb	r2, r3
   188d0:	4b77      	ldr	r3, [pc, #476]	; (18ab0 <main+0x1698>)
   188d2:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)((float)Custom_RGB.RB / 655.35);
   188d4:	4b81      	ldr	r3, [pc, #516]	; (18adc <main+0x16c4>)
   188d6:	895a      	ldrh	r2, [r3, #10]
   188d8:	4b81      	ldr	r3, [pc, #516]	; (18ae0 <main+0x16c8>)
   188da:	0010      	movs	r0, r2
   188dc:	4798      	blx	r3
   188de:	1c02      	adds	r2, r0, #0
   188e0:	4b80      	ldr	r3, [pc, #512]	; (18ae4 <main+0x16cc>)
   188e2:	1c10      	adds	r0, r2, #0
   188e4:	4798      	blx	r3
   188e6:	4c80      	ldr	r4, [pc, #512]	; (18ae8 <main+0x16d0>)
   188e8:	4a80      	ldr	r2, [pc, #512]	; (18aec <main+0x16d4>)
   188ea:	4b81      	ldr	r3, [pc, #516]	; (18af0 <main+0x16d8>)
   188ec:	47a0      	blx	r4
   188ee:	0003      	movs	r3, r0
   188f0:	000c      	movs	r4, r1
   188f2:	0019      	movs	r1, r3
   188f4:	0022      	movs	r2, r4
   188f6:	4b7f      	ldr	r3, [pc, #508]	; (18af4 <main+0x16dc>)
   188f8:	0008      	movs	r0, r1
   188fa:	0011      	movs	r1, r2
   188fc:	4798      	blx	r3
   188fe:	0003      	movs	r3, r0
   18900:	b2da      	uxtb	r2, r3
   18902:	4b6b      	ldr	r3, [pc, #428]	; (18ab0 <main+0x1698>)
   18904:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(RateSens[MODE_ANALOG_CUSTOM] * 100);
   18906:	4b6d      	ldr	r3, [pc, #436]	; (18abc <main+0x16a4>)
   18908:	6a1a      	ldr	r2, [r3, #32]
   1890a:	4b6b      	ldr	r3, [pc, #428]	; (18ab8 <main+0x16a0>)
   1890c:	4966      	ldr	r1, [pc, #408]	; (18aa8 <main+0x1690>)
   1890e:	1c10      	adds	r0, r2, #0
   18910:	4798      	blx	r3
   18912:	1c03      	adds	r3, r0, #0
   18914:	1c1a      	adds	r2, r3, #0
   18916:	4b65      	ldr	r3, [pc, #404]	; (18aac <main+0x1694>)
   18918:	1c10      	adds	r0, r2, #0
   1891a:	4798      	blx	r3
   1891c:	0003      	movs	r3, r0
   1891e:	b2da      	uxtb	r2, r3
   18920:	4b63      	ldr	r3, [pc, #396]	; (18ab0 <main+0x1698>)
   18922:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_ANALOG_CUSTOM] * 100);
   18924:	4b63      	ldr	r3, [pc, #396]	; (18ab4 <main+0x169c>)
   18926:	6a1a      	ldr	r2, [r3, #32]
   18928:	4b63      	ldr	r3, [pc, #396]	; (18ab8 <main+0x16a0>)
   1892a:	495f      	ldr	r1, [pc, #380]	; (18aa8 <main+0x1690>)
   1892c:	1c10      	adds	r0, r2, #0
   1892e:	4798      	blx	r3
   18930:	1c03      	adds	r3, r0, #0
   18932:	1c1a      	adds	r2, r3, #0
   18934:	4b5d      	ldr	r3, [pc, #372]	; (18aac <main+0x1694>)
   18936:	1c10      	adds	r0, r2, #0
   18938:	4798      	blx	r3
   1893a:	0003      	movs	r3, r0
   1893c:	b2da      	uxtb	r2, r3
   1893e:	4b5c      	ldr	r3, [pc, #368]	; (18ab0 <main+0x1698>)
   18940:	739a      	strb	r2, [r3, #14]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 15);
   18942:	495b      	ldr	r1, [pc, #364]	; (18ab0 <main+0x1698>)
   18944:	4b5e      	ldr	r3, [pc, #376]	; (18ac0 <main+0x16a8>)
   18946:	220f      	movs	r2, #15
   18948:	0018      	movs	r0, r3
   1894a:	4b5e      	ldr	r3, [pc, #376]	; (18ac4 <main+0x16ac>)
   1894c:	4798      	blx	r3
			
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   1894e:	46c0      	nop			; (mov r8, r8)
   18950:	2308      	movs	r3, #8
   18952:	18fb      	adds	r3, r7, r3
   18954:	881b      	ldrh	r3, [r3, #0]
   18956:	005b      	lsls	r3, r3, #1
   18958:	001a      	movs	r2, r3
   1895a:	003b      	movs	r3, r7
   1895c:	0011      	movs	r1, r2
   1895e:	0018      	movs	r0, r3
   18960:	4b59      	ldr	r3, [pc, #356]	; (18ac8 <main+0x16b0>)
   18962:	4798      	blx	r3
   18964:	0003      	movs	r3, r0
   18966:	001a      	movs	r2, r3
   18968:	2301      	movs	r3, #1
   1896a:	4053      	eors	r3, r2
   1896c:	b2db      	uxtb	r3, r3
   1896e:	2b00      	cmp	r3, #0
   18970:	d1ee      	bne.n	18950 <main+0x1538>
			BLE_TX_TIME = millis();
   18972:	4b56      	ldr	r3, [pc, #344]	; (18acc <main+0x16b4>)
   18974:	4798      	blx	r3
   18976:	0003      	movs	r3, r0
   18978:	603b      	str	r3, [r7, #0]

			// Digital Static
			ble_write_buffer[0] = 0x3A;
   1897a:	4b4d      	ldr	r3, [pc, #308]	; (18ab0 <main+0x1698>)
   1897c:	223a      	movs	r2, #58	; 0x3a
   1897e:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(Digital_Static_Zoom);
   18980:	4b5d      	ldr	r3, [pc, #372]	; (18af8 <main+0x16e0>)
   18982:	781a      	ldrb	r2, [r3, #0]
   18984:	4b4a      	ldr	r3, [pc, #296]	; (18ab0 <main+0x1698>)
   18986:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(Digital_Static_Shift);
   18988:	4b5c      	ldr	r3, [pc, #368]	; (18afc <main+0x16e4>)
   1898a:	781a      	ldrb	r2, [r3, #0]
   1898c:	4b48      	ldr	r3, [pc, #288]	; (18ab0 <main+0x1698>)
   1898e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Digital_Static_Brightness);
   18990:	4b5b      	ldr	r3, [pc, #364]	; (18b00 <main+0x16e8>)
   18992:	781a      	ldrb	r2, [r3, #0]
   18994:	4b46      	ldr	r3, [pc, #280]	; (18ab0 <main+0x1698>)
   18996:	70da      	strb	r2, [r3, #3]
			// Digital Skittles
			ble_write_buffer[4] = 0x3B;
   18998:	4b45      	ldr	r3, [pc, #276]	; (18ab0 <main+0x1698>)
   1899a:	223b      	movs	r2, #59	; 0x3b
   1899c:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)(Digital_Skittles_Brightness);
   1899e:	4b59      	ldr	r3, [pc, #356]	; (18b04 <main+0x16ec>)
   189a0:	781a      	ldrb	r2, [r3, #0]
   189a2:	4b43      	ldr	r3, [pc, #268]	; (18ab0 <main+0x1698>)
   189a4:	715a      	strb	r2, [r3, #5]
			// Digital Cycle
			ble_write_buffer[6] = 0x3C;
   189a6:	4b42      	ldr	r3, [pc, #264]	; (18ab0 <main+0x1698>)
   189a8:	223c      	movs	r2, #60	; 0x3c
   189aa:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)(Digital_Cycle_Zoom);
   189ac:	4b56      	ldr	r3, [pc, #344]	; (18b08 <main+0x16f0>)
   189ae:	781a      	ldrb	r2, [r3, #0]
   189b0:	4b3f      	ldr	r3, [pc, #252]	; (18ab0 <main+0x1698>)
   189b2:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)(Digital_Cycle_Rate);
   189b4:	4b55      	ldr	r3, [pc, #340]	; (18b0c <main+0x16f4>)
   189b6:	781a      	ldrb	r2, [r3, #0]
   189b8:	4b3d      	ldr	r3, [pc, #244]	; (18ab0 <main+0x1698>)
   189ba:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)(Digital_Cycle_Brightness);
   189bc:	4b54      	ldr	r3, [pc, #336]	; (18b10 <main+0x16f8>)
   189be:	781a      	ldrb	r2, [r3, #0]
   189c0:	4b3b      	ldr	r3, [pc, #236]	; (18ab0 <main+0x1698>)
   189c2:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   189c4:	493a      	ldr	r1, [pc, #232]	; (18ab0 <main+0x1698>)
   189c6:	4b3e      	ldr	r3, [pc, #248]	; (18ac0 <main+0x16a8>)
   189c8:	220a      	movs	r2, #10
   189ca:	0018      	movs	r0, r3
   189cc:	4b3d      	ldr	r3, [pc, #244]	; (18ac4 <main+0x16ac>)
   189ce:	4798      	blx	r3
			
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   189d0:	46c0      	nop			; (mov r8, r8)
   189d2:	2308      	movs	r3, #8
   189d4:	18fb      	adds	r3, r7, r3
   189d6:	881b      	ldrh	r3, [r3, #0]
   189d8:	005b      	lsls	r3, r3, #1
   189da:	001a      	movs	r2, r3
   189dc:	003b      	movs	r3, r7
   189de:	0011      	movs	r1, r2
   189e0:	0018      	movs	r0, r3
   189e2:	4b39      	ldr	r3, [pc, #228]	; (18ac8 <main+0x16b0>)
   189e4:	4798      	blx	r3
   189e6:	0003      	movs	r3, r0
   189e8:	001a      	movs	r2, r3
   189ea:	2301      	movs	r3, #1
   189ec:	4053      	eors	r3, r2
   189ee:	b2db      	uxtb	r3, r3
   189f0:	2b00      	cmp	r3, #0
   189f2:	d1ee      	bne.n	189d2 <main+0x15ba>
			BLE_TX_TIME = millis();
   189f4:	4b35      	ldr	r3, [pc, #212]	; (18acc <main+0x16b4>)
   189f6:	4798      	blx	r3
   189f8:	0003      	movs	r3, r0
   189fa:	603b      	str	r3, [r7, #0]

			// Digital Compass
			ble_write_buffer[0] = 0x3D;
   189fc:	4b2c      	ldr	r3, [pc, #176]	; (18ab0 <main+0x1698>)
   189fe:	223d      	movs	r2, #61	; 0x3d
   18a00:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(Digital_Compass_Brightness);
   18a02:	4b44      	ldr	r3, [pc, #272]	; (18b14 <main+0x16fc>)
   18a04:	781a      	ldrb	r2, [r3, #0]
   18a06:	4b2a      	ldr	r3, [pc, #168]	; (18ab0 <main+0x1698>)
   18a08:	705a      	strb	r2, [r3, #1]
			// Digital Throttle
			ble_write_buffer[2] = 0x3E;
   18a0a:	4b29      	ldr	r3, [pc, #164]	; (18ab0 <main+0x1698>)
   18a0c:	223e      	movs	r2, #62	; 0x3e
   18a0e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Digital_Throttle_Zoom);
   18a10:	4b41      	ldr	r3, [pc, #260]	; (18b18 <main+0x1700>)
   18a12:	781a      	ldrb	r2, [r3, #0]
   18a14:	4b26      	ldr	r3, [pc, #152]	; (18ab0 <main+0x1698>)
   18a16:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)(Digital_Throttle_Shift);
   18a18:	4b40      	ldr	r3, [pc, #256]	; (18b1c <main+0x1704>)
   18a1a:	781a      	ldrb	r2, [r3, #0]
   18a1c:	4b24      	ldr	r3, [pc, #144]	; (18ab0 <main+0x1698>)
   18a1e:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)(Digital_Throttle_Sens);
   18a20:	4b3f      	ldr	r3, [pc, #252]	; (18b20 <main+0x1708>)
   18a22:	781a      	ldrb	r2, [r3, #0]
   18a24:	4b22      	ldr	r3, [pc, #136]	; (18ab0 <main+0x1698>)
   18a26:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)(Digital_Throttle_Brightness);
   18a28:	4b3e      	ldr	r3, [pc, #248]	; (18b24 <main+0x170c>)
   18a2a:	781a      	ldrb	r2, [r3, #0]
   18a2c:	4b20      	ldr	r3, [pc, #128]	; (18ab0 <main+0x1698>)
   18a2e:	719a      	strb	r2, [r3, #6]
			// Digital RPM
			ble_write_buffer[7] = 0x3F;
   18a30:	4b1f      	ldr	r3, [pc, #124]	; (18ab0 <main+0x1698>)
   18a32:	223f      	movs	r2, #63	; 0x3f
   18a34:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)(Digital_RPM_Zoom);
   18a36:	4b3c      	ldr	r3, [pc, #240]	; (18b28 <main+0x1710>)
   18a38:	781a      	ldrb	r2, [r3, #0]
   18a3a:	4b1d      	ldr	r3, [pc, #116]	; (18ab0 <main+0x1698>)
   18a3c:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)(Digital_RPM_Rate);
   18a3e:	4b3b      	ldr	r3, [pc, #236]	; (18b2c <main+0x1714>)
   18a40:	781a      	ldrb	r2, [r3, #0]
   18a42:	4b1b      	ldr	r3, [pc, #108]	; (18ab0 <main+0x1698>)
   18a44:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)(Digital_RPM_Brightness);
   18a46:	4b3a      	ldr	r3, [pc, #232]	; (18b30 <main+0x1718>)
   18a48:	781a      	ldrb	r2, [r3, #0]
   18a4a:	4b19      	ldr	r3, [pc, #100]	; (18ab0 <main+0x1698>)
   18a4c:	729a      	strb	r2, [r3, #10]
			// Analog Shuffled Modes
			ble_write_buffer[11] = 0x40;
   18a4e:	4b18      	ldr	r3, [pc, #96]	; (18ab0 <main+0x1698>)
   18a50:	2240      	movs	r2, #64	; 0x40
   18a52:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = SHUFFLE_ENABLED;
   18a54:	4b37      	ldr	r3, [pc, #220]	; (18b34 <main+0x171c>)
   18a56:	781b      	ldrb	r3, [r3, #0]
   18a58:	001a      	movs	r2, r3
   18a5a:	4b15      	ldr	r3, [pc, #84]	; (18ab0 <main+0x1698>)
   18a5c:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (shuffled_analog_modes & 0xFF);
   18a5e:	4b36      	ldr	r3, [pc, #216]	; (18b38 <main+0x1720>)
   18a60:	881b      	ldrh	r3, [r3, #0]
   18a62:	b2da      	uxtb	r2, r3
   18a64:	4b12      	ldr	r3, [pc, #72]	; (18ab0 <main+0x1698>)
   18a66:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (shuffled_analog_modes & 0xFF00) >> 8;
   18a68:	4b33      	ldr	r3, [pc, #204]	; (18b38 <main+0x1720>)
   18a6a:	881b      	ldrh	r3, [r3, #0]
   18a6c:	0a1b      	lsrs	r3, r3, #8
   18a6e:	b29b      	uxth	r3, r3
   18a70:	b2da      	uxtb	r2, r3
   18a72:	4b0f      	ldr	r3, [pc, #60]	; (18ab0 <main+0x1698>)
   18a74:	739a      	strb	r2, [r3, #14]
			// Digital Shuffled Modes
			ble_write_buffer[15] = (shuffled_digital_modes & 0xFF);
   18a76:	4b31      	ldr	r3, [pc, #196]	; (18b3c <main+0x1724>)
   18a78:	881b      	ldrh	r3, [r3, #0]
   18a7a:	b2da      	uxtb	r2, r3
   18a7c:	4b0c      	ldr	r3, [pc, #48]	; (18ab0 <main+0x1698>)
   18a7e:	73da      	strb	r2, [r3, #15]
			ble_write_buffer[16] = (shuffled_digital_modes & 0xFF00) >> 8;
   18a80:	4b2e      	ldr	r3, [pc, #184]	; (18b3c <main+0x1724>)
   18a82:	881b      	ldrh	r3, [r3, #0]
   18a84:	0a1b      	lsrs	r3, r3, #8
   18a86:	b29b      	uxth	r3, r3
   18a88:	b2da      	uxtb	r2, r3
   18a8a:	4b09      	ldr	r3, [pc, #36]	; (18ab0 <main+0x1698>)
   18a8c:	741a      	strb	r2, [r3, #16]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 17);
   18a8e:	4908      	ldr	r1, [pc, #32]	; (18ab0 <main+0x1698>)
   18a90:	4b0b      	ldr	r3, [pc, #44]	; (18ac0 <main+0x16a8>)
   18a92:	2211      	movs	r2, #17
   18a94:	0018      	movs	r0, r3
   18a96:	4b0b      	ldr	r3, [pc, #44]	; (18ac4 <main+0x16ac>)
   18a98:	4798      	blx	r3

			SEND_LED_CHARS = 0;
   18a9a:	4b29      	ldr	r3, [pc, #164]	; (18b40 <main+0x1728>)
   18a9c:	2200      	movs	r2, #0
   18a9e:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18aa0:	4b28      	ldr	r3, [pc, #160]	; (18b44 <main+0x172c>)
   18aa2:	2201      	movs	r2, #1
   18aa4:	701a      	strb	r2, [r3, #0]
   18aa6:	e04f      	b.n	18b48 <main+0x1730>
   18aa8:	42c80000 	.word	0x42c80000
   18aac:	000195b1 	.word	0x000195b1
   18ab0:	20000e0c 	.word	0x20000e0c
   18ab4:	20000070 	.word	0x20000070
   18ab8:	00019d21 	.word	0x00019d21
   18abc:	2000004c 	.word	0x2000004c
   18ac0:	200006cc 	.word	0x200006cc
   18ac4:	000063bd 	.word	0x000063bd
   18ac8:	00009fbd 	.word	0x00009fbd
   18acc:	00009f65 	.word	0x00009f65
   18ad0:	20000094 	.word	0x20000094
   18ad4:	200000a0 	.word	0x200000a0
   18ad8:	200000ac 	.word	0x200000ac
   18adc:	200000c4 	.word	0x200000c4
   18ae0:	0001a379 	.word	0x0001a379
   18ae4:	0001bf15 	.word	0x0001bf15
   18ae8:	0001aa25 	.word	0x0001aa25
   18aec:	cccccccd 	.word	0xcccccccd
   18af0:	40847acc 	.word	0x40847acc
   18af4:	000195e1 	.word	0x000195e1
   18af8:	200000b5 	.word	0x200000b5
   18afc:	200000b6 	.word	0x200000b6
   18b00:	200000b7 	.word	0x200000b7
   18b04:	200000b8 	.word	0x200000b8
   18b08:	200000b9 	.word	0x200000b9
   18b0c:	200000ba 	.word	0x200000ba
   18b10:	200000bb 	.word	0x200000bb
   18b14:	200000bc 	.word	0x200000bc
   18b18:	200000bd 	.word	0x200000bd
   18b1c:	200000be 	.word	0x200000be
   18b20:	200000bf 	.word	0x200000bf
   18b24:	200000c0 	.word	0x200000c0
   18b28:	200000c1 	.word	0x200000c1
   18b2c:	200000c2 	.word	0x200000c2
   18b30:	200000c3 	.word	0x200000c3
   18b34:	200003a6 	.word	0x200003a6
   18b38:	200003a8 	.word	0x200003a8
   18b3c:	200003aa 	.word	0x200003aa
   18b40:	20000442 	.word	0x20000442
   18b44:	20000101 	.word	0x20000101
	}
		

		//////////////////////////   Handle Orientation Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ORIENTAION_CONFIG)
   18b48:	4bea      	ldr	r3, [pc, #936]	; (18ef4 <main+0x1adc>)
   18b4a:	781b      	ldrb	r3, [r3, #0]
   18b4c:	2b00      	cmp	r3, #0
   18b4e:	d02c      	beq.n	18baa <main+0x1792>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18b50:	46c0      	nop			; (mov r8, r8)
   18b52:	2308      	movs	r3, #8
   18b54:	18fb      	adds	r3, r7, r3
   18b56:	881b      	ldrh	r3, [r3, #0]
   18b58:	005b      	lsls	r3, r3, #1
   18b5a:	001a      	movs	r2, r3
   18b5c:	003b      	movs	r3, r7
   18b5e:	0011      	movs	r1, r2
   18b60:	0018      	movs	r0, r3
   18b62:	4be5      	ldr	r3, [pc, #916]	; (18ef8 <main+0x1ae0>)
   18b64:	4798      	blx	r3
   18b66:	0003      	movs	r3, r0
   18b68:	001a      	movs	r2, r3
   18b6a:	2301      	movs	r3, #1
   18b6c:	4053      	eors	r3, r2
   18b6e:	b2db      	uxtb	r3, r3
   18b70:	2b00      	cmp	r3, #0
   18b72:	d1ee      	bne.n	18b52 <main+0x173a>
			BLE_TX_TIME = millis();
   18b74:	4be1      	ldr	r3, [pc, #900]	; (18efc <main+0x1ae4>)
   18b76:	4798      	blx	r3
   18b78:	0003      	movs	r3, r0
   18b7a:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_ORIENTATION_CONFIG;//0x71;
   18b7c:	4be0      	ldr	r3, [pc, #896]	; (18f00 <main+0x1ae8>)
   18b7e:	2271      	movs	r2, #113	; 0x71
   18b80:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ORIENTATION[0]; // Connectors Orientation
   18b82:	4be0      	ldr	r3, [pc, #896]	; (18f04 <main+0x1aec>)
   18b84:	781a      	ldrb	r2, [r3, #0]
   18b86:	4bde      	ldr	r3, [pc, #888]	; (18f00 <main+0x1ae8>)
   18b88:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ORIENTATION[1]; // Power Orientation
   18b8a:	4bde      	ldr	r3, [pc, #888]	; (18f04 <main+0x1aec>)
   18b8c:	785a      	ldrb	r2, [r3, #1]
   18b8e:	4bdc      	ldr	r3, [pc, #880]	; (18f00 <main+0x1ae8>)
   18b90:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   18b92:	49db      	ldr	r1, [pc, #876]	; (18f00 <main+0x1ae8>)
   18b94:	4bdc      	ldr	r3, [pc, #880]	; (18f08 <main+0x1af0>)
   18b96:	2203      	movs	r2, #3
   18b98:	0018      	movs	r0, r3
   18b9a:	4bdc      	ldr	r3, [pc, #880]	; (18f0c <main+0x1af4>)
   18b9c:	4798      	blx	r3


			SEND_ORIENTAION_CONFIG = 0;
   18b9e:	4bd5      	ldr	r3, [pc, #852]	; (18ef4 <main+0x1adc>)
   18ba0:	2200      	movs	r2, #0
   18ba2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18ba4:	4bda      	ldr	r3, [pc, #872]	; (18f10 <main+0x1af8>)
   18ba6:	2201      	movs	r2, #1
   18ba8:	701a      	strb	r2, [r3, #0]
		}


		///////////////////////////   Handle Controls Request   ///////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_CONTROLS_CONFIG)
   18baa:	4bda      	ldr	r3, [pc, #872]	; (18f14 <main+0x1afc>)
   18bac:	781b      	ldrb	r3, [r3, #0]
   18bae:	2b00      	cmp	r3, #0
   18bb0:	d062      	beq.n	18c78 <main+0x1860>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18bb2:	46c0      	nop			; (mov r8, r8)
   18bb4:	2308      	movs	r3, #8
   18bb6:	18fb      	adds	r3, r7, r3
   18bb8:	881b      	ldrh	r3, [r3, #0]
   18bba:	005b      	lsls	r3, r3, #1
   18bbc:	001a      	movs	r2, r3
   18bbe:	003b      	movs	r3, r7
   18bc0:	0011      	movs	r1, r2
   18bc2:	0018      	movs	r0, r3
   18bc4:	4bcc      	ldr	r3, [pc, #816]	; (18ef8 <main+0x1ae0>)
   18bc6:	4798      	blx	r3
   18bc8:	0003      	movs	r3, r0
   18bca:	001a      	movs	r2, r3
   18bcc:	2301      	movs	r3, #1
   18bce:	4053      	eors	r3, r2
   18bd0:	b2db      	uxtb	r3, r3
   18bd2:	2b00      	cmp	r3, #0
   18bd4:	d1ee      	bne.n	18bb4 <main+0x179c>
			BLE_TX_TIME = millis();
   18bd6:	4bc9      	ldr	r3, [pc, #804]	; (18efc <main+0x1ae4>)
   18bd8:	4798      	blx	r3
   18bda:	0003      	movs	r3, r0
   18bdc:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_CONTROLS_CONFIG;//0x81;
   18bde:	4bc8      	ldr	r3, [pc, #800]	; (18f00 <main+0x1ae8>)
   18be0:	2281      	movs	r2, #129	; 0x81
   18be2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((AUX_ENABLED << 7) | (TURN_ENABLED << 6) | auxControlType);
   18be4:	4bcc      	ldr	r3, [pc, #816]	; (18f18 <main+0x1b00>)
   18be6:	781b      	ldrb	r3, [r3, #0]
   18be8:	01db      	lsls	r3, r3, #7
   18bea:	b25a      	sxtb	r2, r3
   18bec:	4bcb      	ldr	r3, [pc, #812]	; (18f1c <main+0x1b04>)
   18bee:	781b      	ldrb	r3, [r3, #0]
   18bf0:	019b      	lsls	r3, r3, #6
   18bf2:	b25b      	sxtb	r3, r3
   18bf4:	4313      	orrs	r3, r2
   18bf6:	b25a      	sxtb	r2, r3
   18bf8:	4bc9      	ldr	r3, [pc, #804]	; (18f20 <main+0x1b08>)
   18bfa:	781b      	ldrb	r3, [r3, #0]
   18bfc:	b25b      	sxtb	r3, r3
   18bfe:	4313      	orrs	r3, r2
   18c00:	b25b      	sxtb	r3, r3
   18c02:	b2da      	uxtb	r2, r3
   18c04:	4bbe      	ldr	r3, [pc, #760]	; (18f00 <main+0x1ae8>)
   18c06:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)auxTimedDuration;
   18c08:	4bc6      	ldr	r3, [pc, #792]	; (18f24 <main+0x1b0c>)
   18c0a:	781a      	ldrb	r2, [r3, #0]
   18c0c:	4bbc      	ldr	r3, [pc, #752]	; (18f00 <main+0x1ae8>)
   18c0e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((single_aux_control << 4) | single_all_control);
   18c10:	4bc5      	ldr	r3, [pc, #788]	; (18f28 <main+0x1b10>)
   18c12:	781b      	ldrb	r3, [r3, #0]
   18c14:	011b      	lsls	r3, r3, #4
   18c16:	b25a      	sxtb	r2, r3
   18c18:	4bc4      	ldr	r3, [pc, #784]	; (18f2c <main+0x1b14>)
   18c1a:	781b      	ldrb	r3, [r3, #0]
   18c1c:	b25b      	sxtb	r3, r3
   18c1e:	4313      	orrs	r3, r2
   18c20:	b25b      	sxtb	r3, r3
   18c22:	b2da      	uxtb	r2, r3
   18c24:	4bb6      	ldr	r3, [pc, #728]	; (18f00 <main+0x1ae8>)
   18c26:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((single_head_control << 4) | single_side_control);
   18c28:	4bc1      	ldr	r3, [pc, #772]	; (18f30 <main+0x1b18>)
   18c2a:	781b      	ldrb	r3, [r3, #0]
   18c2c:	011b      	lsls	r3, r3, #4
   18c2e:	b25a      	sxtb	r2, r3
   18c30:	4bc0      	ldr	r3, [pc, #768]	; (18f34 <main+0x1b1c>)
   18c32:	781b      	ldrb	r3, [r3, #0]
   18c34:	b25b      	sxtb	r3, r3
   18c36:	4313      	orrs	r3, r2
   18c38:	b25b      	sxtb	r3, r3
   18c3a:	b2da      	uxtb	r2, r3
   18c3c:	4bb0      	ldr	r3, [pc, #704]	; (18f00 <main+0x1ae8>)
   18c3e:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((single_down_control << 4) | single_up_control);
   18c40:	4bbd      	ldr	r3, [pc, #756]	; (18f38 <main+0x1b20>)
   18c42:	781b      	ldrb	r3, [r3, #0]
   18c44:	011b      	lsls	r3, r3, #4
   18c46:	b25a      	sxtb	r2, r3
   18c48:	4bbc      	ldr	r3, [pc, #752]	; (18f3c <main+0x1b24>)
   18c4a:	781b      	ldrb	r3, [r3, #0]
   18c4c:	b25b      	sxtb	r3, r3
   18c4e:	4313      	orrs	r3, r2
   18c50:	b25b      	sxtb	r3, r3
   18c52:	b2da      	uxtb	r2, r3
   18c54:	4baa      	ldr	r3, [pc, #680]	; (18f00 <main+0x1ae8>)
   18c56:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)single_brights_control;
   18c58:	4bb9      	ldr	r3, [pc, #740]	; (18f40 <main+0x1b28>)
   18c5a:	781a      	ldrb	r2, [r3, #0]
   18c5c:	4ba8      	ldr	r3, [pc, #672]	; (18f00 <main+0x1ae8>)
   18c5e:	719a      	strb	r2, [r3, #6]
			//ble_write_buffer[6] = (uint8_t)((dual_aux_control << 4) | dual_all_control);
			//ble_write_buffer[7] = (uint8_t)((dual_head_control << 4) | dual_side_control);
			//ble_write_buffer[8] = (uint8_t)((dual_down_control << 4) | dual_up_control);
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 7);
   18c60:	49a7      	ldr	r1, [pc, #668]	; (18f00 <main+0x1ae8>)
   18c62:	4ba9      	ldr	r3, [pc, #676]	; (18f08 <main+0x1af0>)
   18c64:	2207      	movs	r2, #7
   18c66:	0018      	movs	r0, r3
   18c68:	4ba8      	ldr	r3, [pc, #672]	; (18f0c <main+0x1af4>)
   18c6a:	4798      	blx	r3

			SEND_CONTROLS_CONFIG = 0;
   18c6c:	4ba9      	ldr	r3, [pc, #676]	; (18f14 <main+0x1afc>)
   18c6e:	2200      	movs	r2, #0
   18c70:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18c72:	4ba7      	ldr	r3, [pc, #668]	; (18f10 <main+0x1af8>)
   18c74:	2201      	movs	r2, #1
   18c76:	701a      	strb	r2, [r3, #0]
		}


		/////////////////////////   Handle Remote Config Request   ////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_REMOTE_CONFIG)
   18c78:	4bb2      	ldr	r3, [pc, #712]	; (18f44 <main+0x1b2c>)
   18c7a:	781b      	ldrb	r3, [r3, #0]
   18c7c:	2b00      	cmp	r3, #0
   18c7e:	d034      	beq.n	18cea <main+0x18d2>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18c80:	46c0      	nop			; (mov r8, r8)
   18c82:	2308      	movs	r3, #8
   18c84:	18fb      	adds	r3, r7, r3
   18c86:	881b      	ldrh	r3, [r3, #0]
   18c88:	005b      	lsls	r3, r3, #1
   18c8a:	001a      	movs	r2, r3
   18c8c:	003b      	movs	r3, r7
   18c8e:	0011      	movs	r1, r2
   18c90:	0018      	movs	r0, r3
   18c92:	4b99      	ldr	r3, [pc, #612]	; (18ef8 <main+0x1ae0>)
   18c94:	4798      	blx	r3
   18c96:	0003      	movs	r3, r0
   18c98:	001a      	movs	r2, r3
   18c9a:	2301      	movs	r3, #1
   18c9c:	4053      	eors	r3, r2
   18c9e:	b2db      	uxtb	r3, r3
   18ca0:	2b00      	cmp	r3, #0
   18ca2:	d1ee      	bne.n	18c82 <main+0x186a>
			BLE_TX_TIME = millis();
   18ca4:	4b95      	ldr	r3, [pc, #596]	; (18efc <main+0x1ae4>)
   18ca6:	4798      	blx	r3
   18ca8:	0003      	movs	r3, r0
   18caa:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_REMOTE_CONFIG;//0x72;
   18cac:	4b94      	ldr	r3, [pc, #592]	; (18f00 <main+0x1ae8>)
   18cae:	2272      	movs	r2, #114	; 0x72
   18cb0:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((remote_type << 4) | button_type);
   18cb2:	4ba5      	ldr	r3, [pc, #660]	; (18f48 <main+0x1b30>)
   18cb4:	781b      	ldrb	r3, [r3, #0]
   18cb6:	011b      	lsls	r3, r3, #4
   18cb8:	b25a      	sxtb	r2, r3
   18cba:	4ba4      	ldr	r3, [pc, #656]	; (18f4c <main+0x1b34>)
   18cbc:	781b      	ldrb	r3, [r3, #0]
   18cbe:	b25b      	sxtb	r3, r3
   18cc0:	4313      	orrs	r3, r2
   18cc2:	b25b      	sxtb	r3, r3
   18cc4:	b2da      	uxtb	r2, r3
   18cc6:	4b8e      	ldr	r3, [pc, #568]	; (18f00 <main+0x1ae8>)
   18cc8:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   18cca:	4ba1      	ldr	r3, [pc, #644]	; (18f50 <main+0x1b38>)
   18ccc:	781a      	ldrb	r2, [r3, #0]
   18cce:	4b8c      	ldr	r3, [pc, #560]	; (18f00 <main+0x1ae8>)
   18cd0:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   18cd2:	498b      	ldr	r1, [pc, #556]	; (18f00 <main+0x1ae8>)
   18cd4:	4b8c      	ldr	r3, [pc, #560]	; (18f08 <main+0x1af0>)
   18cd6:	2203      	movs	r2, #3
   18cd8:	0018      	movs	r0, r3
   18cda:	4b8c      	ldr	r3, [pc, #560]	; (18f0c <main+0x1af4>)
   18cdc:	4798      	blx	r3

			SEND_REMOTE_CONFIG = 0;
   18cde:	4b99      	ldr	r3, [pc, #612]	; (18f44 <main+0x1b2c>)
   18ce0:	2200      	movs	r2, #0
   18ce2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18ce4:	4b8a      	ldr	r3, [pc, #552]	; (18f10 <main+0x1af8>)
   18ce6:	2201      	movs	r2, #1
   18ce8:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle ESC Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ESC_CONFIG)
   18cea:	4b9a      	ldr	r3, [pc, #616]	; (18f54 <main+0x1b3c>)
   18cec:	781b      	ldrb	r3, [r3, #0]
   18cee:	2b00      	cmp	r3, #0
   18cf0:	d034      	beq.n	18d5c <main+0x1944>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18cf2:	46c0      	nop			; (mov r8, r8)
   18cf4:	2308      	movs	r3, #8
   18cf6:	18fb      	adds	r3, r7, r3
   18cf8:	881b      	ldrh	r3, [r3, #0]
   18cfa:	005b      	lsls	r3, r3, #1
   18cfc:	001a      	movs	r2, r3
   18cfe:	003b      	movs	r3, r7
   18d00:	0011      	movs	r1, r2
   18d02:	0018      	movs	r0, r3
   18d04:	4b7c      	ldr	r3, [pc, #496]	; (18ef8 <main+0x1ae0>)
   18d06:	4798      	blx	r3
   18d08:	0003      	movs	r3, r0
   18d0a:	001a      	movs	r2, r3
   18d0c:	2301      	movs	r3, #1
   18d0e:	4053      	eors	r3, r2
   18d10:	b2db      	uxtb	r3, r3
   18d12:	2b00      	cmp	r3, #0
   18d14:	d1ee      	bne.n	18cf4 <main+0x18dc>
			BLE_TX_TIME = millis();
   18d16:	4b79      	ldr	r3, [pc, #484]	; (18efc <main+0x1ae4>)
   18d18:	4798      	blx	r3
   18d1a:	0003      	movs	r3, r0
   18d1c:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_ESC_CONFIG;//0x73;
   18d1e:	4b78      	ldr	r3, [pc, #480]	; (18f00 <main+0x1ae8>)
   18d20:	2273      	movs	r2, #115	; 0x73
   18d22:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(esc_fw);
   18d24:	4b8c      	ldr	r3, [pc, #560]	; (18f58 <main+0x1b40>)
   18d26:	781a      	ldrb	r2, [r3, #0]
   18d28:	4b75      	ldr	r3, [pc, #468]	; (18f00 <main+0x1ae8>)
   18d2a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)((esc_comms << 4) | UART_baud);
   18d2c:	4b8b      	ldr	r3, [pc, #556]	; (18f5c <main+0x1b44>)
   18d2e:	781b      	ldrb	r3, [r3, #0]
   18d30:	011b      	lsls	r3, r3, #4
   18d32:	b25a      	sxtb	r2, r3
   18d34:	4b8a      	ldr	r3, [pc, #552]	; (18f60 <main+0x1b48>)
   18d36:	781b      	ldrb	r3, [r3, #0]
   18d38:	b25b      	sxtb	r3, r3
   18d3a:	4313      	orrs	r3, r2
   18d3c:	b25b      	sxtb	r3, r3
   18d3e:	b2da      	uxtb	r2, r3
   18d40:	4b6f      	ldr	r3, [pc, #444]	; (18f00 <main+0x1ae8>)
   18d42:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   18d44:	496e      	ldr	r1, [pc, #440]	; (18f00 <main+0x1ae8>)
   18d46:	4b70      	ldr	r3, [pc, #448]	; (18f08 <main+0x1af0>)
   18d48:	2203      	movs	r2, #3
   18d4a:	0018      	movs	r0, r3
   18d4c:	4b6f      	ldr	r3, [pc, #444]	; (18f0c <main+0x1af4>)
   18d4e:	4798      	blx	r3

			SEND_ESC_CONFIG = 0;
   18d50:	4b80      	ldr	r3, [pc, #512]	; (18f54 <main+0x1b3c>)
   18d52:	2200      	movs	r2, #0
   18d54:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18d56:	4b6e      	ldr	r3, [pc, #440]	; (18f10 <main+0x1af8>)
   18d58:	2201      	movs	r2, #1
   18d5a:	701a      	strb	r2, [r3, #0]
		}
		

		//////////////////////////   Handle Lights Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_Lights_CONFIG)
   18d5c:	4b81      	ldr	r3, [pc, #516]	; (18f64 <main+0x1b4c>)
   18d5e:	781b      	ldrb	r3, [r3, #0]
   18d60:	2b00      	cmp	r3, #0
   18d62:	d05f      	beq.n	18e24 <main+0x1a0c>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18d64:	46c0      	nop			; (mov r8, r8)
   18d66:	2308      	movs	r3, #8
   18d68:	18fb      	adds	r3, r7, r3
   18d6a:	881b      	ldrh	r3, [r3, #0]
   18d6c:	005b      	lsls	r3, r3, #1
   18d6e:	001a      	movs	r2, r3
   18d70:	003b      	movs	r3, r7
   18d72:	0011      	movs	r1, r2
   18d74:	0018      	movs	r0, r3
   18d76:	4b60      	ldr	r3, [pc, #384]	; (18ef8 <main+0x1ae0>)
   18d78:	4798      	blx	r3
   18d7a:	0003      	movs	r3, r0
   18d7c:	001a      	movs	r2, r3
   18d7e:	2301      	movs	r3, #1
   18d80:	4053      	eors	r3, r2
   18d82:	b2db      	uxtb	r3, r3
   18d84:	2b00      	cmp	r3, #0
   18d86:	d1ee      	bne.n	18d66 <main+0x194e>
			BLE_TX_TIME = millis();
   18d88:	4b5c      	ldr	r3, [pc, #368]	; (18efc <main+0x1ae4>)
   18d8a:	4798      	blx	r3
   18d8c:	0003      	movs	r3, r0
   18d8e:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_LIGHTS_CONFIG;//0x75;
   18d90:	4b5b      	ldr	r3, [pc, #364]	; (18f00 <main+0x1ae8>)
   18d92:	2275      	movs	r2, #117	; 0x75
   18d94:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RGB_led_type << 4) | brake_light_mode;
   18d96:	4b74      	ldr	r3, [pc, #464]	; (18f68 <main+0x1b50>)
   18d98:	781b      	ldrb	r3, [r3, #0]
   18d9a:	011b      	lsls	r3, r3, #4
   18d9c:	b2da      	uxtb	r2, r3
   18d9e:	4b73      	ldr	r3, [pc, #460]	; (18f6c <main+0x1b54>)
   18da0:	781b      	ldrb	r3, [r3, #0]
   18da2:	4313      	orrs	r3, r2
   18da4:	b2da      	uxtb	r2, r3
   18da6:	4b56      	ldr	r3, [pc, #344]	; (18f00 <main+0x1ae8>)
   18da8:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   18daa:	4b69      	ldr	r3, [pc, #420]	; (18f50 <main+0x1b38>)
   18dac:	781a      	ldrb	r2, [r3, #0]
   18dae:	4b54      	ldr	r3, [pc, #336]	; (18f00 <main+0x1ae8>)
   18db0:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(led_num);
   18db2:	4b6f      	ldr	r3, [pc, #444]	; (18f70 <main+0x1b58>)
   18db4:	781a      	ldrb	r2, [r3, #0]
   18db6:	4b52      	ldr	r3, [pc, #328]	; (18f00 <main+0x1ae8>)
   18db8:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)(SYNC_RGB << 7 | BRAKE_ALWAYS_ON << 6 | DEFAULT_STATE << 5 | BRIGHTS_ENABLED << 4 | STANDBY_ENABLED << 3 | SHUFFLE_ENABLED << 2);
   18dba:	4b6e      	ldr	r3, [pc, #440]	; (18f74 <main+0x1b5c>)
   18dbc:	781b      	ldrb	r3, [r3, #0]
   18dbe:	01db      	lsls	r3, r3, #7
   18dc0:	b25a      	sxtb	r2, r3
   18dc2:	4b6d      	ldr	r3, [pc, #436]	; (18f78 <main+0x1b60>)
   18dc4:	781b      	ldrb	r3, [r3, #0]
   18dc6:	019b      	lsls	r3, r3, #6
   18dc8:	b25b      	sxtb	r3, r3
   18dca:	4313      	orrs	r3, r2
   18dcc:	b25a      	sxtb	r2, r3
   18dce:	4b6b      	ldr	r3, [pc, #428]	; (18f7c <main+0x1b64>)
   18dd0:	781b      	ldrb	r3, [r3, #0]
   18dd2:	015b      	lsls	r3, r3, #5
   18dd4:	b25b      	sxtb	r3, r3
   18dd6:	4313      	orrs	r3, r2
   18dd8:	b25a      	sxtb	r2, r3
   18dda:	4b69      	ldr	r3, [pc, #420]	; (18f80 <main+0x1b68>)
   18ddc:	781b      	ldrb	r3, [r3, #0]
   18dde:	011b      	lsls	r3, r3, #4
   18de0:	b25b      	sxtb	r3, r3
   18de2:	4313      	orrs	r3, r2
   18de4:	b25a      	sxtb	r2, r3
   18de6:	4b67      	ldr	r3, [pc, #412]	; (18f84 <main+0x1b6c>)
   18de8:	781b      	ldrb	r3, [r3, #0]
   18dea:	00db      	lsls	r3, r3, #3
   18dec:	b25b      	sxtb	r3, r3
   18dee:	4313      	orrs	r3, r2
   18df0:	b25a      	sxtb	r2, r3
   18df2:	4b65      	ldr	r3, [pc, #404]	; (18f88 <main+0x1b70>)
   18df4:	781b      	ldrb	r3, [r3, #0]
   18df6:	009b      	lsls	r3, r3, #2
   18df8:	b25b      	sxtb	r3, r3
   18dfa:	4313      	orrs	r3, r2
   18dfc:	b25b      	sxtb	r3, r3
   18dfe:	b2da      	uxtb	r2, r3
   18e00:	4b3f      	ldr	r3, [pc, #252]	; (18f00 <main+0x1ae8>)
   18e02:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)(lowbeam_level);
   18e04:	4b61      	ldr	r3, [pc, #388]	; (18f8c <main+0x1b74>)
   18e06:	781a      	ldrb	r2, [r3, #0]
   18e08:	4b3d      	ldr	r3, [pc, #244]	; (18f00 <main+0x1ae8>)
   18e0a:	715a      	strb	r2, [r3, #5]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 6);
   18e0c:	493c      	ldr	r1, [pc, #240]	; (18f00 <main+0x1ae8>)
   18e0e:	4b3e      	ldr	r3, [pc, #248]	; (18f08 <main+0x1af0>)
   18e10:	2206      	movs	r2, #6
   18e12:	0018      	movs	r0, r3
   18e14:	4b3d      	ldr	r3, [pc, #244]	; (18f0c <main+0x1af4>)
   18e16:	4798      	blx	r3

			SEND_Lights_CONFIG = 0;
   18e18:	4b52      	ldr	r3, [pc, #328]	; (18f64 <main+0x1b4c>)
   18e1a:	2200      	movs	r2, #0
   18e1c:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18e1e:	4b3c      	ldr	r3, [pc, #240]	; (18f10 <main+0x1af8>)
   18e20:	2201      	movs	r2, #1
   18e22:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle FW Read Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_TTL_FW_HW)
   18e24:	4b5a      	ldr	r3, [pc, #360]	; (18f90 <main+0x1b78>)
   18e26:	781b      	ldrb	r3, [r3, #0]
   18e28:	2b00      	cmp	r3, #0
   18e2a:	d050      	beq.n	18ece <main+0x1ab6>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18e2c:	46c0      	nop			; (mov r8, r8)
   18e2e:	2308      	movs	r3, #8
   18e30:	18fb      	adds	r3, r7, r3
   18e32:	881b      	ldrh	r3, [r3, #0]
   18e34:	005b      	lsls	r3, r3, #1
   18e36:	001a      	movs	r2, r3
   18e38:	003b      	movs	r3, r7
   18e3a:	0011      	movs	r1, r2
   18e3c:	0018      	movs	r0, r3
   18e3e:	4b2e      	ldr	r3, [pc, #184]	; (18ef8 <main+0x1ae0>)
   18e40:	4798      	blx	r3
   18e42:	0003      	movs	r3, r0
   18e44:	001a      	movs	r2, r3
   18e46:	2301      	movs	r3, #1
   18e48:	4053      	eors	r3, r2
   18e4a:	b2db      	uxtb	r3, r3
   18e4c:	2b00      	cmp	r3, #0
   18e4e:	d1ee      	bne.n	18e2e <main+0x1a16>
			BLE_TX_TIME = millis();
   18e50:	4b2a      	ldr	r3, [pc, #168]	; (18efc <main+0x1ae4>)
   18e52:	4798      	blx	r3
   18e54:	0003      	movs	r3, r0
   18e56:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_TTL_FW_HW;//0x74;
   18e58:	4b29      	ldr	r3, [pc, #164]	; (18f00 <main+0x1ae8>)
   18e5a:	2274      	movs	r2, #116	; 0x74
   18e5c:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(TTL_FW%100 & 0x00FF);
   18e5e:	4b4d      	ldr	r3, [pc, #308]	; (18f94 <main+0x1b7c>)
   18e60:	881a      	ldrh	r2, [r3, #0]
   18e62:	4b4d      	ldr	r3, [pc, #308]	; (18f98 <main+0x1b80>)
   18e64:	2164      	movs	r1, #100	; 0x64
   18e66:	0010      	movs	r0, r2
   18e68:	4798      	blx	r3
   18e6a:	000b      	movs	r3, r1
   18e6c:	b29b      	uxth	r3, r3
   18e6e:	b2da      	uxtb	r2, r3
   18e70:	4b23      	ldr	r3, [pc, #140]	; (18f00 <main+0x1ae8>)
   18e72:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(TTL_FW/100 & 0x00FF);
   18e74:	4b47      	ldr	r3, [pc, #284]	; (18f94 <main+0x1b7c>)
   18e76:	881a      	ldrh	r2, [r3, #0]
   18e78:	4b48      	ldr	r3, [pc, #288]	; (18f9c <main+0x1b84>)
   18e7a:	2164      	movs	r1, #100	; 0x64
   18e7c:	0010      	movs	r0, r2
   18e7e:	4798      	blx	r3
   18e80:	0003      	movs	r3, r0
   18e82:	b29b      	uxth	r3, r3
   18e84:	b2da      	uxtb	r2, r3
   18e86:	4b1e      	ldr	r3, [pc, #120]	; (18f00 <main+0x1ae8>)
   18e88:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(HW_VER%100 & 0x00FF);
   18e8a:	4b45      	ldr	r3, [pc, #276]	; (18fa0 <main+0x1b88>)
   18e8c:	881a      	ldrh	r2, [r3, #0]
   18e8e:	4b42      	ldr	r3, [pc, #264]	; (18f98 <main+0x1b80>)
   18e90:	2164      	movs	r1, #100	; 0x64
   18e92:	0010      	movs	r0, r2
   18e94:	4798      	blx	r3
   18e96:	000b      	movs	r3, r1
   18e98:	b29b      	uxth	r3, r3
   18e9a:	b2da      	uxtb	r2, r3
   18e9c:	4b18      	ldr	r3, [pc, #96]	; (18f00 <main+0x1ae8>)
   18e9e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)(HW_VER/100 & 0x00FF);
   18ea0:	4b3f      	ldr	r3, [pc, #252]	; (18fa0 <main+0x1b88>)
   18ea2:	881a      	ldrh	r2, [r3, #0]
   18ea4:	4b3d      	ldr	r3, [pc, #244]	; (18f9c <main+0x1b84>)
   18ea6:	2164      	movs	r1, #100	; 0x64
   18ea8:	0010      	movs	r0, r2
   18eaa:	4798      	blx	r3
   18eac:	0003      	movs	r3, r0
   18eae:	b29b      	uxth	r3, r3
   18eb0:	b2da      	uxtb	r2, r3
   18eb2:	4b13      	ldr	r3, [pc, #76]	; (18f00 <main+0x1ae8>)
   18eb4:	711a      	strb	r2, [r3, #4]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 5);
   18eb6:	4912      	ldr	r1, [pc, #72]	; (18f00 <main+0x1ae8>)
   18eb8:	4b13      	ldr	r3, [pc, #76]	; (18f08 <main+0x1af0>)
   18eba:	2205      	movs	r2, #5
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b13      	ldr	r3, [pc, #76]	; (18f0c <main+0x1af4>)
   18ec0:	4798      	blx	r3

			SEND_TTL_FW_HW = 0;
   18ec2:	4b33      	ldr	r3, [pc, #204]	; (18f90 <main+0x1b78>)
   18ec4:	2200      	movs	r2, #0
   18ec6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18ec8:	4b11      	ldr	r3, [pc, #68]	; (18f10 <main+0x1af8>)
   18eca:	2201      	movs	r2, #1
   18ecc:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle Output Test request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(TEST_TTL_OUTPUTS)
   18ece:	4b35      	ldr	r3, [pc, #212]	; (18fa4 <main+0x1b8c>)
   18ed0:	781b      	ldrb	r3, [r3, #0]
   18ed2:	2b00      	cmp	r3, #0
   18ed4:	d007      	beq.n	18ee6 <main+0x1ace>
		{
			testOutputs();
   18ed6:	4b34      	ldr	r3, [pc, #208]	; (18fa8 <main+0x1b90>)
   18ed8:	4798      	blx	r3

			TEST_TTL_OUTPUTS = 0;
   18eda:	4b32      	ldr	r3, [pc, #200]	; (18fa4 <main+0x1b8c>)
   18edc:	2200      	movs	r2, #0
   18ede:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18ee0:	4b0b      	ldr	r3, [pc, #44]	; (18f10 <main+0x1af8>)
   18ee2:	2201      	movs	r2, #1
   18ee4:	701a      	strb	r2, [r3, #0]
		}


		////////////////////   Handle ESC Auto Detect Setting Request   ///////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ESC_DETECTION)
   18ee6:	4b31      	ldr	r3, [pc, #196]	; (18fac <main+0x1b94>)
   18ee8:	781b      	ldrb	r3, [r3, #0]
   18eea:	2b00      	cmp	r3, #0
   18eec:	d100      	bne.n	18ef0 <main+0x1ad8>
   18eee:	e088      	b.n	19002 <main+0x1bea>
		{
			while(!check_timer_expired(&BLE_TX_TIME, BLE_TX_DELAY*2)){}
   18ef0:	46c0      	nop			; (mov r8, r8)
   18ef2:	e05d      	b.n	18fb0 <main+0x1b98>
   18ef4:	20000445 	.word	0x20000445
   18ef8:	00009fbd 	.word	0x00009fbd
   18efc:	00009f65 	.word	0x00009f65
   18f00:	20000e0c 	.word	0x20000e0c
   18f04:	20000008 	.word	0x20000008
   18f08:	200006cc 	.word	0x200006cc
   18f0c:	000063bd 	.word	0x000063bd
   18f10:	20000101 	.word	0x20000101
   18f14:	20000446 	.word	0x20000446
   18f18:	200003de 	.word	0x200003de
   18f1c:	200003df 	.word	0x200003df
   18f20:	200003e2 	.word	0x200003e2
   18f24:	200003e3 	.word	0x200003e3
   18f28:	200003e4 	.word	0x200003e4
   18f2c:	200003e5 	.word	0x200003e5
   18f30:	200003e6 	.word	0x200003e6
   18f34:	200003e7 	.word	0x200003e7
   18f38:	200003e9 	.word	0x200003e9
   18f3c:	200003e8 	.word	0x200003e8
   18f40:	200003ea 	.word	0x200003ea
   18f44:	20000447 	.word	0x20000447
   18f48:	200003cc 	.word	0x200003cc
   18f4c:	200003cd 	.word	0x200003cd
   18f50:	200000e4 	.word	0x200000e4
   18f54:	20000448 	.word	0x20000448
   18f58:	200000e3 	.word	0x200000e3
   18f5c:	200003ca 	.word	0x200003ca
   18f60:	200003cb 	.word	0x200003cb
   18f64:	20000449 	.word	0x20000449
   18f68:	20001a88 	.word	0x20001a88
   18f6c:	200003a2 	.word	0x200003a2
   18f70:	200000e0 	.word	0x200000e0
   18f74:	200000d2 	.word	0x200000d2
   18f78:	200000d3 	.word	0x200000d3
   18f7c:	200003a3 	.word	0x200003a3
   18f80:	200003a4 	.word	0x200003a4
   18f84:	200003a5 	.word	0x200003a5
   18f88:	200003a6 	.word	0x200003a6
   18f8c:	200000d4 	.word	0x200000d4
   18f90:	2000044a 	.word	0x2000044a
   18f94:	20000004 	.word	0x20000004
   18f98:	0001928d 	.word	0x0001928d
   18f9c:	00019181 	.word	0x00019181
   18fa0:	20000002 	.word	0x20000002
   18fa4:	2000044c 	.word	0x2000044c
   18fa8:	0000e82d 	.word	0x0000e82d
   18fac:	2000044d 	.word	0x2000044d
   18fb0:	2308      	movs	r3, #8
   18fb2:	18fb      	adds	r3, r7, r3
   18fb4:	881b      	ldrh	r3, [r3, #0]
   18fb6:	005b      	lsls	r3, r3, #1
   18fb8:	001a      	movs	r2, r3
   18fba:	003b      	movs	r3, r7
   18fbc:	0011      	movs	r1, r2
   18fbe:	0018      	movs	r0, r3
   18fc0:	4b16      	ldr	r3, [pc, #88]	; (1901c <main+0x1c04>)
   18fc2:	4798      	blx	r3
   18fc4:	0003      	movs	r3, r0
   18fc6:	001a      	movs	r2, r3
   18fc8:	2301      	movs	r3, #1
   18fca:	4053      	eors	r3, r2
   18fcc:	b2db      	uxtb	r3, r3
   18fce:	2b00      	cmp	r3, #0
   18fd0:	d1ee      	bne.n	18fb0 <main+0x1b98>
			BLE_TX_TIME = millis();
   18fd2:	4b13      	ldr	r3, [pc, #76]	; (19020 <main+0x1c08>)
   18fd4:	4798      	blx	r3
   18fd6:	0003      	movs	r3, r0
   18fd8:	603b      	str	r3, [r7, #0]

			// Global LED Settings
			ble_write_buffer[0] = BLE_ESC_AUTO_DETECT;//0x78;
   18fda:	4b12      	ldr	r3, [pc, #72]	; (19024 <main+0x1c0c>)
   18fdc:	2278      	movs	r2, #120	; 0x78
   18fde:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(AUTO_DETECT_ESC);
   18fe0:	4b11      	ldr	r3, [pc, #68]	; (19028 <main+0x1c10>)
   18fe2:	781b      	ldrb	r3, [r3, #0]
   18fe4:	001a      	movs	r2, r3
   18fe6:	4b0f      	ldr	r3, [pc, #60]	; (19024 <main+0x1c0c>)
   18fe8:	705a      	strb	r2, [r3, #1]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 2);
   18fea:	490e      	ldr	r1, [pc, #56]	; (19024 <main+0x1c0c>)
   18fec:	4b0f      	ldr	r3, [pc, #60]	; (1902c <main+0x1c14>)
   18fee:	2202      	movs	r2, #2
   18ff0:	0018      	movs	r0, r3
   18ff2:	4b0f      	ldr	r3, [pc, #60]	; (19030 <main+0x1c18>)
   18ff4:	4798      	blx	r3

			SEND_ESC_DETECTION = 0;
   18ff6:	4b0f      	ldr	r3, [pc, #60]	; (19034 <main+0x1c1c>)
   18ff8:	2200      	movs	r2, #0
   18ffa:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   18ffc:	4b0e      	ldr	r3, [pc, #56]	; (19038 <main+0x1c20>)
   18ffe:	2201      	movs	r2, #1
   19000:	701a      	strb	r2, [r3, #0]
		}
		

		////////////////////////////////   LED Controls   /////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleUserInput();
   19002:	4b0e      	ldr	r3, [pc, #56]	; (1903c <main+0x1c24>)
   19004:	4798      	blx	r3


		/////////////////////////////////   App Remote   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleAppRemote();
   19006:	4b0e      	ldr	r3, [pc, #56]	; (19040 <main+0x1c28>)
   19008:	4798      	blx	r3

		
		//////////////////////////////////   LED MODES   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		SideLights();
   1900a:	4b0e      	ldr	r3, [pc, #56]	; (19044 <main+0x1c2c>)
   1900c:	4798      	blx	r3
		HeadLight();
   1900e:	4b0e      	ldr	r3, [pc, #56]	; (19048 <main+0x1c30>)
   19010:	4798      	blx	r3
		BrakeLight();
   19012:	4b0e      	ldr	r3, [pc, #56]	; (1904c <main+0x1c34>)
   19014:	4798      	blx	r3
		if(port_pin_get_input_level(BOOT_BTN)==false)
   19016:	f7fe fa8e 	bl	17536 <main+0x11e>
   1901a:	46c0      	nop			; (mov r8, r8)
   1901c:	00009fbd 	.word	0x00009fbd
   19020:	00009f65 	.word	0x00009f65
   19024:	20000e0c 	.word	0x20000e0c
   19028:	20000100 	.word	0x20000100
   1902c:	200006cc 	.word	0x200006cc
   19030:	000063bd 	.word	0x000063bd
   19034:	2000044d 	.word	0x2000044d
   19038:	20000101 	.word	0x20000101
   1903c:	00014eb1 	.word	0x00014eb1
   19040:	000155e5 	.word	0x000155e5
   19044:	0000dee1 	.word	0x0000dee1
   19048:	0000dc69 	.word	0x0000dc69
   1904c:	0000d339 	.word	0x0000d339

00019050 <ldexpf>:
   19050:	b570      	push	{r4, r5, r6, lr}
   19052:	1c04      	adds	r4, r0, #0
   19054:	000d      	movs	r5, r1
   19056:	f000 f889 	bl	1916c <finitef>
   1905a:	2800      	cmp	r0, #0
   1905c:	d005      	beq.n	1906a <ldexpf+0x1a>
   1905e:	2100      	movs	r1, #0
   19060:	1c20      	adds	r0, r4, #0
   19062:	f000 fa4d 	bl	19500 <__aeabi_fcmpeq>
   19066:	2800      	cmp	r0, #0
   19068:	d001      	beq.n	1906e <ldexpf+0x1e>
   1906a:	1c20      	adds	r0, r4, #0
   1906c:	bd70      	pop	{r4, r5, r6, pc}
   1906e:	1c20      	adds	r0, r4, #0
   19070:	0029      	movs	r1, r5
   19072:	f000 f811 	bl	19098 <scalbnf>
   19076:	1c04      	adds	r4, r0, #0
   19078:	f000 f878 	bl	1916c <finitef>
   1907c:	2800      	cmp	r0, #0
   1907e:	d005      	beq.n	1908c <ldexpf+0x3c>
   19080:	2100      	movs	r1, #0
   19082:	1c20      	adds	r0, r4, #0
   19084:	f000 fa3c 	bl	19500 <__aeabi_fcmpeq>
   19088:	2800      	cmp	r0, #0
   1908a:	d0ee      	beq.n	1906a <ldexpf+0x1a>
   1908c:	f003 f83c 	bl	1c108 <__errno>
   19090:	2322      	movs	r3, #34	; 0x22
   19092:	6003      	str	r3, [r0, #0]
   19094:	e7e9      	b.n	1906a <ldexpf+0x1a>
   19096:	46c0      	nop			; (mov r8, r8)

00019098 <scalbnf>:
   19098:	0043      	lsls	r3, r0, #1
   1909a:	b570      	push	{r4, r5, r6, lr}
   1909c:	1c02      	adds	r2, r0, #0
   1909e:	000c      	movs	r4, r1
   190a0:	0005      	movs	r5, r0
   190a2:	0859      	lsrs	r1, r3, #1
   190a4:	d00f      	beq.n	190c6 <scalbnf+0x2e>
   190a6:	4e27      	ldr	r6, [pc, #156]	; (19144 <scalbnf+0xac>)
   190a8:	42b1      	cmp	r1, r6
   190aa:	d80d      	bhi.n	190c8 <scalbnf+0x30>
   190ac:	4826      	ldr	r0, [pc, #152]	; (19148 <scalbnf+0xb0>)
   190ae:	4281      	cmp	r1, r0
   190b0:	d90e      	bls.n	190d0 <scalbnf+0x38>
   190b2:	0e1b      	lsrs	r3, r3, #24
   190b4:	191b      	adds	r3, r3, r4
   190b6:	2bfe      	cmp	r3, #254	; 0xfe
   190b8:	dc2a      	bgt.n	19110 <scalbnf+0x78>
   190ba:	2b00      	cmp	r3, #0
   190bc:	dd16      	ble.n	190ec <scalbnf+0x54>
   190be:	4823      	ldr	r0, [pc, #140]	; (1914c <scalbnf+0xb4>)
   190c0:	05db      	lsls	r3, r3, #23
   190c2:	4028      	ands	r0, r5
   190c4:	4318      	orrs	r0, r3
   190c6:	bd70      	pop	{r4, r5, r6, pc}
   190c8:	1c01      	adds	r1, r0, #0
   190ca:	f000 faa7 	bl	1961c <__aeabi_fadd>
   190ce:	e7fa      	b.n	190c6 <scalbnf+0x2e>
   190d0:	2198      	movs	r1, #152	; 0x98
   190d2:	1c10      	adds	r0, r2, #0
   190d4:	05c9      	lsls	r1, r1, #23
   190d6:	f000 fe23 	bl	19d20 <__aeabi_fmul>
   190da:	4b1d      	ldr	r3, [pc, #116]	; (19150 <scalbnf+0xb8>)
   190dc:	1c02      	adds	r2, r0, #0
   190de:	429c      	cmp	r4, r3
   190e0:	db12      	blt.n	19108 <scalbnf+0x70>
   190e2:	0043      	lsls	r3, r0, #1
   190e4:	0e1b      	lsrs	r3, r3, #24
   190e6:	0005      	movs	r5, r0
   190e8:	3b19      	subs	r3, #25
   190ea:	e7e3      	b.n	190b4 <scalbnf+0x1c>
   190ec:	0019      	movs	r1, r3
   190ee:	3116      	adds	r1, #22
   190f0:	da16      	bge.n	19120 <scalbnf+0x88>
   190f2:	4b18      	ldr	r3, [pc, #96]	; (19154 <scalbnf+0xbc>)
   190f4:	1c11      	adds	r1, r2, #0
   190f6:	429c      	cmp	r4, r3
   190f8:	dd1c      	ble.n	19134 <scalbnf+0x9c>
   190fa:	4817      	ldr	r0, [pc, #92]	; (19158 <scalbnf+0xc0>)
   190fc:	f000 f830 	bl	19160 <copysignf>
   19100:	4915      	ldr	r1, [pc, #84]	; (19158 <scalbnf+0xc0>)
   19102:	f000 fe0d 	bl	19d20 <__aeabi_fmul>
   19106:	e7de      	b.n	190c6 <scalbnf+0x2e>
   19108:	4914      	ldr	r1, [pc, #80]	; (1915c <scalbnf+0xc4>)
   1910a:	f000 fe09 	bl	19d20 <__aeabi_fmul>
   1910e:	e7da      	b.n	190c6 <scalbnf+0x2e>
   19110:	1c11      	adds	r1, r2, #0
   19112:	4811      	ldr	r0, [pc, #68]	; (19158 <scalbnf+0xc0>)
   19114:	f000 f824 	bl	19160 <copysignf>
   19118:	490f      	ldr	r1, [pc, #60]	; (19158 <scalbnf+0xc0>)
   1911a:	f000 fe01 	bl	19d20 <__aeabi_fmul>
   1911e:	e7d2      	b.n	190c6 <scalbnf+0x2e>
   19120:	21cc      	movs	r1, #204	; 0xcc
   19122:	3319      	adds	r3, #25
   19124:	05d8      	lsls	r0, r3, #23
   19126:	4b09      	ldr	r3, [pc, #36]	; (1914c <scalbnf+0xb4>)
   19128:	0589      	lsls	r1, r1, #22
   1912a:	401d      	ands	r5, r3
   1912c:	4328      	orrs	r0, r5
   1912e:	f000 fdf7 	bl	19d20 <__aeabi_fmul>
   19132:	e7c8      	b.n	190c6 <scalbnf+0x2e>
   19134:	4809      	ldr	r0, [pc, #36]	; (1915c <scalbnf+0xc4>)
   19136:	f000 f813 	bl	19160 <copysignf>
   1913a:	4908      	ldr	r1, [pc, #32]	; (1915c <scalbnf+0xc4>)
   1913c:	f000 fdf0 	bl	19d20 <__aeabi_fmul>
   19140:	e7c1      	b.n	190c6 <scalbnf+0x2e>
   19142:	46c0      	nop			; (mov r8, r8)
   19144:	7f7fffff 	.word	0x7f7fffff
   19148:	007fffff 	.word	0x007fffff
   1914c:	807fffff 	.word	0x807fffff
   19150:	ffff3cb0 	.word	0xffff3cb0
   19154:	0000c350 	.word	0x0000c350
   19158:	7149f2ca 	.word	0x7149f2ca
   1915c:	0da24260 	.word	0x0da24260

00019160 <copysignf>:
   19160:	0040      	lsls	r0, r0, #1
   19162:	0fc9      	lsrs	r1, r1, #31
   19164:	07c9      	lsls	r1, r1, #31
   19166:	0840      	lsrs	r0, r0, #1
   19168:	4308      	orrs	r0, r1
   1916a:	4770      	bx	lr

0001916c <finitef>:
   1916c:	0043      	lsls	r3, r0, #1
   1916e:	2000      	movs	r0, #0
   19170:	4a02      	ldr	r2, [pc, #8]	; (1917c <finitef+0x10>)
   19172:	085b      	lsrs	r3, r3, #1
   19174:	429a      	cmp	r2, r3
   19176:	4140      	adcs	r0, r0
   19178:	4770      	bx	lr
   1917a:	46c0      	nop			; (mov r8, r8)
   1917c:	7f7fffff 	.word	0x7f7fffff

00019180 <__udivsi3>:
   19180:	2200      	movs	r2, #0
   19182:	0843      	lsrs	r3, r0, #1
   19184:	428b      	cmp	r3, r1
   19186:	d374      	bcc.n	19272 <__udivsi3+0xf2>
   19188:	0903      	lsrs	r3, r0, #4
   1918a:	428b      	cmp	r3, r1
   1918c:	d35f      	bcc.n	1924e <__udivsi3+0xce>
   1918e:	0a03      	lsrs	r3, r0, #8
   19190:	428b      	cmp	r3, r1
   19192:	d344      	bcc.n	1921e <__udivsi3+0x9e>
   19194:	0b03      	lsrs	r3, r0, #12
   19196:	428b      	cmp	r3, r1
   19198:	d328      	bcc.n	191ec <__udivsi3+0x6c>
   1919a:	0c03      	lsrs	r3, r0, #16
   1919c:	428b      	cmp	r3, r1
   1919e:	d30d      	bcc.n	191bc <__udivsi3+0x3c>
   191a0:	22ff      	movs	r2, #255	; 0xff
   191a2:	0209      	lsls	r1, r1, #8
   191a4:	ba12      	rev	r2, r2
   191a6:	0c03      	lsrs	r3, r0, #16
   191a8:	428b      	cmp	r3, r1
   191aa:	d302      	bcc.n	191b2 <__udivsi3+0x32>
   191ac:	1212      	asrs	r2, r2, #8
   191ae:	0209      	lsls	r1, r1, #8
   191b0:	d065      	beq.n	1927e <__udivsi3+0xfe>
   191b2:	0b03      	lsrs	r3, r0, #12
   191b4:	428b      	cmp	r3, r1
   191b6:	d319      	bcc.n	191ec <__udivsi3+0x6c>
   191b8:	e000      	b.n	191bc <__udivsi3+0x3c>
   191ba:	0a09      	lsrs	r1, r1, #8
   191bc:	0bc3      	lsrs	r3, r0, #15
   191be:	428b      	cmp	r3, r1
   191c0:	d301      	bcc.n	191c6 <__udivsi3+0x46>
   191c2:	03cb      	lsls	r3, r1, #15
   191c4:	1ac0      	subs	r0, r0, r3
   191c6:	4152      	adcs	r2, r2
   191c8:	0b83      	lsrs	r3, r0, #14
   191ca:	428b      	cmp	r3, r1
   191cc:	d301      	bcc.n	191d2 <__udivsi3+0x52>
   191ce:	038b      	lsls	r3, r1, #14
   191d0:	1ac0      	subs	r0, r0, r3
   191d2:	4152      	adcs	r2, r2
   191d4:	0b43      	lsrs	r3, r0, #13
   191d6:	428b      	cmp	r3, r1
   191d8:	d301      	bcc.n	191de <__udivsi3+0x5e>
   191da:	034b      	lsls	r3, r1, #13
   191dc:	1ac0      	subs	r0, r0, r3
   191de:	4152      	adcs	r2, r2
   191e0:	0b03      	lsrs	r3, r0, #12
   191e2:	428b      	cmp	r3, r1
   191e4:	d301      	bcc.n	191ea <__udivsi3+0x6a>
   191e6:	030b      	lsls	r3, r1, #12
   191e8:	1ac0      	subs	r0, r0, r3
   191ea:	4152      	adcs	r2, r2
   191ec:	0ac3      	lsrs	r3, r0, #11
   191ee:	428b      	cmp	r3, r1
   191f0:	d301      	bcc.n	191f6 <__udivsi3+0x76>
   191f2:	02cb      	lsls	r3, r1, #11
   191f4:	1ac0      	subs	r0, r0, r3
   191f6:	4152      	adcs	r2, r2
   191f8:	0a83      	lsrs	r3, r0, #10
   191fa:	428b      	cmp	r3, r1
   191fc:	d301      	bcc.n	19202 <__udivsi3+0x82>
   191fe:	028b      	lsls	r3, r1, #10
   19200:	1ac0      	subs	r0, r0, r3
   19202:	4152      	adcs	r2, r2
   19204:	0a43      	lsrs	r3, r0, #9
   19206:	428b      	cmp	r3, r1
   19208:	d301      	bcc.n	1920e <__udivsi3+0x8e>
   1920a:	024b      	lsls	r3, r1, #9
   1920c:	1ac0      	subs	r0, r0, r3
   1920e:	4152      	adcs	r2, r2
   19210:	0a03      	lsrs	r3, r0, #8
   19212:	428b      	cmp	r3, r1
   19214:	d301      	bcc.n	1921a <__udivsi3+0x9a>
   19216:	020b      	lsls	r3, r1, #8
   19218:	1ac0      	subs	r0, r0, r3
   1921a:	4152      	adcs	r2, r2
   1921c:	d2cd      	bcs.n	191ba <__udivsi3+0x3a>
   1921e:	09c3      	lsrs	r3, r0, #7
   19220:	428b      	cmp	r3, r1
   19222:	d301      	bcc.n	19228 <__udivsi3+0xa8>
   19224:	01cb      	lsls	r3, r1, #7
   19226:	1ac0      	subs	r0, r0, r3
   19228:	4152      	adcs	r2, r2
   1922a:	0983      	lsrs	r3, r0, #6
   1922c:	428b      	cmp	r3, r1
   1922e:	d301      	bcc.n	19234 <__udivsi3+0xb4>
   19230:	018b      	lsls	r3, r1, #6
   19232:	1ac0      	subs	r0, r0, r3
   19234:	4152      	adcs	r2, r2
   19236:	0943      	lsrs	r3, r0, #5
   19238:	428b      	cmp	r3, r1
   1923a:	d301      	bcc.n	19240 <__udivsi3+0xc0>
   1923c:	014b      	lsls	r3, r1, #5
   1923e:	1ac0      	subs	r0, r0, r3
   19240:	4152      	adcs	r2, r2
   19242:	0903      	lsrs	r3, r0, #4
   19244:	428b      	cmp	r3, r1
   19246:	d301      	bcc.n	1924c <__udivsi3+0xcc>
   19248:	010b      	lsls	r3, r1, #4
   1924a:	1ac0      	subs	r0, r0, r3
   1924c:	4152      	adcs	r2, r2
   1924e:	08c3      	lsrs	r3, r0, #3
   19250:	428b      	cmp	r3, r1
   19252:	d301      	bcc.n	19258 <__udivsi3+0xd8>
   19254:	00cb      	lsls	r3, r1, #3
   19256:	1ac0      	subs	r0, r0, r3
   19258:	4152      	adcs	r2, r2
   1925a:	0883      	lsrs	r3, r0, #2
   1925c:	428b      	cmp	r3, r1
   1925e:	d301      	bcc.n	19264 <__udivsi3+0xe4>
   19260:	008b      	lsls	r3, r1, #2
   19262:	1ac0      	subs	r0, r0, r3
   19264:	4152      	adcs	r2, r2
   19266:	0843      	lsrs	r3, r0, #1
   19268:	428b      	cmp	r3, r1
   1926a:	d301      	bcc.n	19270 <__udivsi3+0xf0>
   1926c:	004b      	lsls	r3, r1, #1
   1926e:	1ac0      	subs	r0, r0, r3
   19270:	4152      	adcs	r2, r2
   19272:	1a41      	subs	r1, r0, r1
   19274:	d200      	bcs.n	19278 <__udivsi3+0xf8>
   19276:	4601      	mov	r1, r0
   19278:	4152      	adcs	r2, r2
   1927a:	4610      	mov	r0, r2
   1927c:	4770      	bx	lr
   1927e:	e7ff      	b.n	19280 <__udivsi3+0x100>
   19280:	b501      	push	{r0, lr}
   19282:	2000      	movs	r0, #0
   19284:	f000 f8f0 	bl	19468 <__aeabi_idiv0>
   19288:	bd02      	pop	{r1, pc}
   1928a:	46c0      	nop			; (mov r8, r8)

0001928c <__aeabi_uidivmod>:
   1928c:	2900      	cmp	r1, #0
   1928e:	d0f7      	beq.n	19280 <__udivsi3+0x100>
   19290:	e776      	b.n	19180 <__udivsi3>
   19292:	4770      	bx	lr

00019294 <__divsi3>:
   19294:	4603      	mov	r3, r0
   19296:	430b      	orrs	r3, r1
   19298:	d47f      	bmi.n	1939a <__divsi3+0x106>
   1929a:	2200      	movs	r2, #0
   1929c:	0843      	lsrs	r3, r0, #1
   1929e:	428b      	cmp	r3, r1
   192a0:	d374      	bcc.n	1938c <__divsi3+0xf8>
   192a2:	0903      	lsrs	r3, r0, #4
   192a4:	428b      	cmp	r3, r1
   192a6:	d35f      	bcc.n	19368 <__divsi3+0xd4>
   192a8:	0a03      	lsrs	r3, r0, #8
   192aa:	428b      	cmp	r3, r1
   192ac:	d344      	bcc.n	19338 <__divsi3+0xa4>
   192ae:	0b03      	lsrs	r3, r0, #12
   192b0:	428b      	cmp	r3, r1
   192b2:	d328      	bcc.n	19306 <__divsi3+0x72>
   192b4:	0c03      	lsrs	r3, r0, #16
   192b6:	428b      	cmp	r3, r1
   192b8:	d30d      	bcc.n	192d6 <__divsi3+0x42>
   192ba:	22ff      	movs	r2, #255	; 0xff
   192bc:	0209      	lsls	r1, r1, #8
   192be:	ba12      	rev	r2, r2
   192c0:	0c03      	lsrs	r3, r0, #16
   192c2:	428b      	cmp	r3, r1
   192c4:	d302      	bcc.n	192cc <__divsi3+0x38>
   192c6:	1212      	asrs	r2, r2, #8
   192c8:	0209      	lsls	r1, r1, #8
   192ca:	d065      	beq.n	19398 <__divsi3+0x104>
   192cc:	0b03      	lsrs	r3, r0, #12
   192ce:	428b      	cmp	r3, r1
   192d0:	d319      	bcc.n	19306 <__divsi3+0x72>
   192d2:	e000      	b.n	192d6 <__divsi3+0x42>
   192d4:	0a09      	lsrs	r1, r1, #8
   192d6:	0bc3      	lsrs	r3, r0, #15
   192d8:	428b      	cmp	r3, r1
   192da:	d301      	bcc.n	192e0 <__divsi3+0x4c>
   192dc:	03cb      	lsls	r3, r1, #15
   192de:	1ac0      	subs	r0, r0, r3
   192e0:	4152      	adcs	r2, r2
   192e2:	0b83      	lsrs	r3, r0, #14
   192e4:	428b      	cmp	r3, r1
   192e6:	d301      	bcc.n	192ec <__divsi3+0x58>
   192e8:	038b      	lsls	r3, r1, #14
   192ea:	1ac0      	subs	r0, r0, r3
   192ec:	4152      	adcs	r2, r2
   192ee:	0b43      	lsrs	r3, r0, #13
   192f0:	428b      	cmp	r3, r1
   192f2:	d301      	bcc.n	192f8 <__divsi3+0x64>
   192f4:	034b      	lsls	r3, r1, #13
   192f6:	1ac0      	subs	r0, r0, r3
   192f8:	4152      	adcs	r2, r2
   192fa:	0b03      	lsrs	r3, r0, #12
   192fc:	428b      	cmp	r3, r1
   192fe:	d301      	bcc.n	19304 <__divsi3+0x70>
   19300:	030b      	lsls	r3, r1, #12
   19302:	1ac0      	subs	r0, r0, r3
   19304:	4152      	adcs	r2, r2
   19306:	0ac3      	lsrs	r3, r0, #11
   19308:	428b      	cmp	r3, r1
   1930a:	d301      	bcc.n	19310 <__divsi3+0x7c>
   1930c:	02cb      	lsls	r3, r1, #11
   1930e:	1ac0      	subs	r0, r0, r3
   19310:	4152      	adcs	r2, r2
   19312:	0a83      	lsrs	r3, r0, #10
   19314:	428b      	cmp	r3, r1
   19316:	d301      	bcc.n	1931c <__divsi3+0x88>
   19318:	028b      	lsls	r3, r1, #10
   1931a:	1ac0      	subs	r0, r0, r3
   1931c:	4152      	adcs	r2, r2
   1931e:	0a43      	lsrs	r3, r0, #9
   19320:	428b      	cmp	r3, r1
   19322:	d301      	bcc.n	19328 <__divsi3+0x94>
   19324:	024b      	lsls	r3, r1, #9
   19326:	1ac0      	subs	r0, r0, r3
   19328:	4152      	adcs	r2, r2
   1932a:	0a03      	lsrs	r3, r0, #8
   1932c:	428b      	cmp	r3, r1
   1932e:	d301      	bcc.n	19334 <__divsi3+0xa0>
   19330:	020b      	lsls	r3, r1, #8
   19332:	1ac0      	subs	r0, r0, r3
   19334:	4152      	adcs	r2, r2
   19336:	d2cd      	bcs.n	192d4 <__divsi3+0x40>
   19338:	09c3      	lsrs	r3, r0, #7
   1933a:	428b      	cmp	r3, r1
   1933c:	d301      	bcc.n	19342 <__divsi3+0xae>
   1933e:	01cb      	lsls	r3, r1, #7
   19340:	1ac0      	subs	r0, r0, r3
   19342:	4152      	adcs	r2, r2
   19344:	0983      	lsrs	r3, r0, #6
   19346:	428b      	cmp	r3, r1
   19348:	d301      	bcc.n	1934e <__divsi3+0xba>
   1934a:	018b      	lsls	r3, r1, #6
   1934c:	1ac0      	subs	r0, r0, r3
   1934e:	4152      	adcs	r2, r2
   19350:	0943      	lsrs	r3, r0, #5
   19352:	428b      	cmp	r3, r1
   19354:	d301      	bcc.n	1935a <__divsi3+0xc6>
   19356:	014b      	lsls	r3, r1, #5
   19358:	1ac0      	subs	r0, r0, r3
   1935a:	4152      	adcs	r2, r2
   1935c:	0903      	lsrs	r3, r0, #4
   1935e:	428b      	cmp	r3, r1
   19360:	d301      	bcc.n	19366 <__divsi3+0xd2>
   19362:	010b      	lsls	r3, r1, #4
   19364:	1ac0      	subs	r0, r0, r3
   19366:	4152      	adcs	r2, r2
   19368:	08c3      	lsrs	r3, r0, #3
   1936a:	428b      	cmp	r3, r1
   1936c:	d301      	bcc.n	19372 <__divsi3+0xde>
   1936e:	00cb      	lsls	r3, r1, #3
   19370:	1ac0      	subs	r0, r0, r3
   19372:	4152      	adcs	r2, r2
   19374:	0883      	lsrs	r3, r0, #2
   19376:	428b      	cmp	r3, r1
   19378:	d301      	bcc.n	1937e <__divsi3+0xea>
   1937a:	008b      	lsls	r3, r1, #2
   1937c:	1ac0      	subs	r0, r0, r3
   1937e:	4152      	adcs	r2, r2
   19380:	0843      	lsrs	r3, r0, #1
   19382:	428b      	cmp	r3, r1
   19384:	d301      	bcc.n	1938a <__divsi3+0xf6>
   19386:	004b      	lsls	r3, r1, #1
   19388:	1ac0      	subs	r0, r0, r3
   1938a:	4152      	adcs	r2, r2
   1938c:	1a41      	subs	r1, r0, r1
   1938e:	d200      	bcs.n	19392 <__divsi3+0xfe>
   19390:	4601      	mov	r1, r0
   19392:	4152      	adcs	r2, r2
   19394:	4610      	mov	r0, r2
   19396:	4770      	bx	lr
   19398:	e05d      	b.n	19456 <__divsi3+0x1c2>
   1939a:	0fca      	lsrs	r2, r1, #31
   1939c:	d000      	beq.n	193a0 <__divsi3+0x10c>
   1939e:	4249      	negs	r1, r1
   193a0:	1003      	asrs	r3, r0, #32
   193a2:	d300      	bcc.n	193a6 <__divsi3+0x112>
   193a4:	4240      	negs	r0, r0
   193a6:	4053      	eors	r3, r2
   193a8:	2200      	movs	r2, #0
   193aa:	469c      	mov	ip, r3
   193ac:	0903      	lsrs	r3, r0, #4
   193ae:	428b      	cmp	r3, r1
   193b0:	d32d      	bcc.n	1940e <__divsi3+0x17a>
   193b2:	0a03      	lsrs	r3, r0, #8
   193b4:	428b      	cmp	r3, r1
   193b6:	d312      	bcc.n	193de <__divsi3+0x14a>
   193b8:	22fc      	movs	r2, #252	; 0xfc
   193ba:	0189      	lsls	r1, r1, #6
   193bc:	ba12      	rev	r2, r2
   193be:	0a03      	lsrs	r3, r0, #8
   193c0:	428b      	cmp	r3, r1
   193c2:	d30c      	bcc.n	193de <__divsi3+0x14a>
   193c4:	0189      	lsls	r1, r1, #6
   193c6:	1192      	asrs	r2, r2, #6
   193c8:	428b      	cmp	r3, r1
   193ca:	d308      	bcc.n	193de <__divsi3+0x14a>
   193cc:	0189      	lsls	r1, r1, #6
   193ce:	1192      	asrs	r2, r2, #6
   193d0:	428b      	cmp	r3, r1
   193d2:	d304      	bcc.n	193de <__divsi3+0x14a>
   193d4:	0189      	lsls	r1, r1, #6
   193d6:	d03a      	beq.n	1944e <__divsi3+0x1ba>
   193d8:	1192      	asrs	r2, r2, #6
   193da:	e000      	b.n	193de <__divsi3+0x14a>
   193dc:	0989      	lsrs	r1, r1, #6
   193de:	09c3      	lsrs	r3, r0, #7
   193e0:	428b      	cmp	r3, r1
   193e2:	d301      	bcc.n	193e8 <__divsi3+0x154>
   193e4:	01cb      	lsls	r3, r1, #7
   193e6:	1ac0      	subs	r0, r0, r3
   193e8:	4152      	adcs	r2, r2
   193ea:	0983      	lsrs	r3, r0, #6
   193ec:	428b      	cmp	r3, r1
   193ee:	d301      	bcc.n	193f4 <__divsi3+0x160>
   193f0:	018b      	lsls	r3, r1, #6
   193f2:	1ac0      	subs	r0, r0, r3
   193f4:	4152      	adcs	r2, r2
   193f6:	0943      	lsrs	r3, r0, #5
   193f8:	428b      	cmp	r3, r1
   193fa:	d301      	bcc.n	19400 <__divsi3+0x16c>
   193fc:	014b      	lsls	r3, r1, #5
   193fe:	1ac0      	subs	r0, r0, r3
   19400:	4152      	adcs	r2, r2
   19402:	0903      	lsrs	r3, r0, #4
   19404:	428b      	cmp	r3, r1
   19406:	d301      	bcc.n	1940c <__divsi3+0x178>
   19408:	010b      	lsls	r3, r1, #4
   1940a:	1ac0      	subs	r0, r0, r3
   1940c:	4152      	adcs	r2, r2
   1940e:	08c3      	lsrs	r3, r0, #3
   19410:	428b      	cmp	r3, r1
   19412:	d301      	bcc.n	19418 <__divsi3+0x184>
   19414:	00cb      	lsls	r3, r1, #3
   19416:	1ac0      	subs	r0, r0, r3
   19418:	4152      	adcs	r2, r2
   1941a:	0883      	lsrs	r3, r0, #2
   1941c:	428b      	cmp	r3, r1
   1941e:	d301      	bcc.n	19424 <__divsi3+0x190>
   19420:	008b      	lsls	r3, r1, #2
   19422:	1ac0      	subs	r0, r0, r3
   19424:	4152      	adcs	r2, r2
   19426:	d2d9      	bcs.n	193dc <__divsi3+0x148>
   19428:	0843      	lsrs	r3, r0, #1
   1942a:	428b      	cmp	r3, r1
   1942c:	d301      	bcc.n	19432 <__divsi3+0x19e>
   1942e:	004b      	lsls	r3, r1, #1
   19430:	1ac0      	subs	r0, r0, r3
   19432:	4152      	adcs	r2, r2
   19434:	1a41      	subs	r1, r0, r1
   19436:	d200      	bcs.n	1943a <__divsi3+0x1a6>
   19438:	4601      	mov	r1, r0
   1943a:	4663      	mov	r3, ip
   1943c:	4152      	adcs	r2, r2
   1943e:	105b      	asrs	r3, r3, #1
   19440:	4610      	mov	r0, r2
   19442:	d301      	bcc.n	19448 <__divsi3+0x1b4>
   19444:	4240      	negs	r0, r0
   19446:	2b00      	cmp	r3, #0
   19448:	d500      	bpl.n	1944c <__divsi3+0x1b8>
   1944a:	4249      	negs	r1, r1
   1944c:	4770      	bx	lr
   1944e:	4663      	mov	r3, ip
   19450:	105b      	asrs	r3, r3, #1
   19452:	d300      	bcc.n	19456 <__divsi3+0x1c2>
   19454:	4240      	negs	r0, r0
   19456:	b501      	push	{r0, lr}
   19458:	2000      	movs	r0, #0
   1945a:	f000 f805 	bl	19468 <__aeabi_idiv0>
   1945e:	bd02      	pop	{r1, pc}

00019460 <__aeabi_idivmod>:
   19460:	2900      	cmp	r1, #0
   19462:	d0f8      	beq.n	19456 <__divsi3+0x1c2>
   19464:	e716      	b.n	19294 <__divsi3>
   19466:	4770      	bx	lr

00019468 <__aeabi_idiv0>:
   19468:	4770      	bx	lr
   1946a:	46c0      	nop			; (mov r8, r8)

0001946c <__aeabi_cdrcmple>:
   1946c:	4684      	mov	ip, r0
   1946e:	1c10      	adds	r0, r2, #0
   19470:	4662      	mov	r2, ip
   19472:	468c      	mov	ip, r1
   19474:	1c19      	adds	r1, r3, #0
   19476:	4663      	mov	r3, ip
   19478:	e000      	b.n	1947c <__aeabi_cdcmpeq>
   1947a:	46c0      	nop			; (mov r8, r8)

0001947c <__aeabi_cdcmpeq>:
   1947c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1947e:	f001 fea3 	bl	1b1c8 <__ledf2>
   19482:	2800      	cmp	r0, #0
   19484:	d401      	bmi.n	1948a <__aeabi_cdcmpeq+0xe>
   19486:	2100      	movs	r1, #0
   19488:	42c8      	cmn	r0, r1
   1948a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001948c <__aeabi_dcmpeq>:
   1948c:	b510      	push	{r4, lr}
   1948e:	f001 fdfd 	bl	1b08c <__eqdf2>
   19492:	4240      	negs	r0, r0
   19494:	3001      	adds	r0, #1
   19496:	bd10      	pop	{r4, pc}

00019498 <__aeabi_dcmplt>:
   19498:	b510      	push	{r4, lr}
   1949a:	f001 fe95 	bl	1b1c8 <__ledf2>
   1949e:	2800      	cmp	r0, #0
   194a0:	db01      	blt.n	194a6 <__aeabi_dcmplt+0xe>
   194a2:	2000      	movs	r0, #0
   194a4:	bd10      	pop	{r4, pc}
   194a6:	2001      	movs	r0, #1
   194a8:	bd10      	pop	{r4, pc}
   194aa:	46c0      	nop			; (mov r8, r8)

000194ac <__aeabi_dcmple>:
   194ac:	b510      	push	{r4, lr}
   194ae:	f001 fe8b 	bl	1b1c8 <__ledf2>
   194b2:	2800      	cmp	r0, #0
   194b4:	dd01      	ble.n	194ba <__aeabi_dcmple+0xe>
   194b6:	2000      	movs	r0, #0
   194b8:	bd10      	pop	{r4, pc}
   194ba:	2001      	movs	r0, #1
   194bc:	bd10      	pop	{r4, pc}
   194be:	46c0      	nop			; (mov r8, r8)

000194c0 <__aeabi_dcmpgt>:
   194c0:	b510      	push	{r4, lr}
   194c2:	f001 fe1d 	bl	1b100 <__gedf2>
   194c6:	2800      	cmp	r0, #0
   194c8:	dc01      	bgt.n	194ce <__aeabi_dcmpgt+0xe>
   194ca:	2000      	movs	r0, #0
   194cc:	bd10      	pop	{r4, pc}
   194ce:	2001      	movs	r0, #1
   194d0:	bd10      	pop	{r4, pc}
   194d2:	46c0      	nop			; (mov r8, r8)

000194d4 <__aeabi_dcmpge>:
   194d4:	b510      	push	{r4, lr}
   194d6:	f001 fe13 	bl	1b100 <__gedf2>
   194da:	2800      	cmp	r0, #0
   194dc:	da01      	bge.n	194e2 <__aeabi_dcmpge+0xe>
   194de:	2000      	movs	r0, #0
   194e0:	bd10      	pop	{r4, pc}
   194e2:	2001      	movs	r0, #1
   194e4:	bd10      	pop	{r4, pc}
   194e6:	46c0      	nop			; (mov r8, r8)

000194e8 <__aeabi_cfrcmple>:
   194e8:	4684      	mov	ip, r0
   194ea:	1c08      	adds	r0, r1, #0
   194ec:	4661      	mov	r1, ip
   194ee:	e7ff      	b.n	194f0 <__aeabi_cfcmpeq>

000194f0 <__aeabi_cfcmpeq>:
   194f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   194f2:	f000 fbd3 	bl	19c9c <__lesf2>
   194f6:	2800      	cmp	r0, #0
   194f8:	d401      	bmi.n	194fe <__aeabi_cfcmpeq+0xe>
   194fa:	2100      	movs	r1, #0
   194fc:	42c8      	cmn	r0, r1
   194fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00019500 <__aeabi_fcmpeq>:
   19500:	b510      	push	{r4, lr}
   19502:	f000 fb65 	bl	19bd0 <__eqsf2>
   19506:	4240      	negs	r0, r0
   19508:	3001      	adds	r0, #1
   1950a:	bd10      	pop	{r4, pc}

0001950c <__aeabi_fcmplt>:
   1950c:	b510      	push	{r4, lr}
   1950e:	f000 fbc5 	bl	19c9c <__lesf2>
   19512:	2800      	cmp	r0, #0
   19514:	db01      	blt.n	1951a <__aeabi_fcmplt+0xe>
   19516:	2000      	movs	r0, #0
   19518:	bd10      	pop	{r4, pc}
   1951a:	2001      	movs	r0, #1
   1951c:	bd10      	pop	{r4, pc}
   1951e:	46c0      	nop			; (mov r8, r8)

00019520 <__aeabi_fcmple>:
   19520:	b510      	push	{r4, lr}
   19522:	f000 fbbb 	bl	19c9c <__lesf2>
   19526:	2800      	cmp	r0, #0
   19528:	dd01      	ble.n	1952e <__aeabi_fcmple+0xe>
   1952a:	2000      	movs	r0, #0
   1952c:	bd10      	pop	{r4, pc}
   1952e:	2001      	movs	r0, #1
   19530:	bd10      	pop	{r4, pc}
   19532:	46c0      	nop			; (mov r8, r8)

00019534 <__aeabi_fcmpgt>:
   19534:	b510      	push	{r4, lr}
   19536:	f000 fb71 	bl	19c1c <__gesf2>
   1953a:	2800      	cmp	r0, #0
   1953c:	dc01      	bgt.n	19542 <__aeabi_fcmpgt+0xe>
   1953e:	2000      	movs	r0, #0
   19540:	bd10      	pop	{r4, pc}
   19542:	2001      	movs	r0, #1
   19544:	bd10      	pop	{r4, pc}
   19546:	46c0      	nop			; (mov r8, r8)

00019548 <__aeabi_fcmpge>:
   19548:	b510      	push	{r4, lr}
   1954a:	f000 fb67 	bl	19c1c <__gesf2>
   1954e:	2800      	cmp	r0, #0
   19550:	da01      	bge.n	19556 <__aeabi_fcmpge+0xe>
   19552:	2000      	movs	r0, #0
   19554:	bd10      	pop	{r4, pc}
   19556:	2001      	movs	r0, #1
   19558:	bd10      	pop	{r4, pc}
   1955a:	46c0      	nop			; (mov r8, r8)

0001955c <__aeabi_lmul>:
   1955c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1955e:	46ce      	mov	lr, r9
   19560:	4647      	mov	r7, r8
   19562:	0415      	lsls	r5, r2, #16
   19564:	0c2d      	lsrs	r5, r5, #16
   19566:	002e      	movs	r6, r5
   19568:	b580      	push	{r7, lr}
   1956a:	0407      	lsls	r7, r0, #16
   1956c:	0c14      	lsrs	r4, r2, #16
   1956e:	0c3f      	lsrs	r7, r7, #16
   19570:	4699      	mov	r9, r3
   19572:	0c03      	lsrs	r3, r0, #16
   19574:	437e      	muls	r6, r7
   19576:	435d      	muls	r5, r3
   19578:	4367      	muls	r7, r4
   1957a:	4363      	muls	r3, r4
   1957c:	197f      	adds	r7, r7, r5
   1957e:	0c34      	lsrs	r4, r6, #16
   19580:	19e4      	adds	r4, r4, r7
   19582:	469c      	mov	ip, r3
   19584:	42a5      	cmp	r5, r4
   19586:	d903      	bls.n	19590 <__aeabi_lmul+0x34>
   19588:	2380      	movs	r3, #128	; 0x80
   1958a:	025b      	lsls	r3, r3, #9
   1958c:	4698      	mov	r8, r3
   1958e:	44c4      	add	ip, r8
   19590:	464b      	mov	r3, r9
   19592:	4351      	muls	r1, r2
   19594:	4343      	muls	r3, r0
   19596:	0436      	lsls	r6, r6, #16
   19598:	0c36      	lsrs	r6, r6, #16
   1959a:	0c25      	lsrs	r5, r4, #16
   1959c:	0424      	lsls	r4, r4, #16
   1959e:	4465      	add	r5, ip
   195a0:	19a4      	adds	r4, r4, r6
   195a2:	1859      	adds	r1, r3, r1
   195a4:	1949      	adds	r1, r1, r5
   195a6:	0020      	movs	r0, r4
   195a8:	bc0c      	pop	{r2, r3}
   195aa:	4690      	mov	r8, r2
   195ac:	4699      	mov	r9, r3
   195ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000195b0 <__aeabi_f2uiz>:
   195b0:	219e      	movs	r1, #158	; 0x9e
   195b2:	b510      	push	{r4, lr}
   195b4:	05c9      	lsls	r1, r1, #23
   195b6:	1c04      	adds	r4, r0, #0
   195b8:	f7ff ffc6 	bl	19548 <__aeabi_fcmpge>
   195bc:	2800      	cmp	r0, #0
   195be:	d103      	bne.n	195c8 <__aeabi_f2uiz+0x18>
   195c0:	1c20      	adds	r0, r4, #0
   195c2:	f000 fe69 	bl	1a298 <__aeabi_f2iz>
   195c6:	bd10      	pop	{r4, pc}
   195c8:	219e      	movs	r1, #158	; 0x9e
   195ca:	1c20      	adds	r0, r4, #0
   195cc:	05c9      	lsls	r1, r1, #23
   195ce:	f000 fcc7 	bl	19f60 <__aeabi_fsub>
   195d2:	f000 fe61 	bl	1a298 <__aeabi_f2iz>
   195d6:	2380      	movs	r3, #128	; 0x80
   195d8:	061b      	lsls	r3, r3, #24
   195da:	469c      	mov	ip, r3
   195dc:	4460      	add	r0, ip
   195de:	e7f2      	b.n	195c6 <__aeabi_f2uiz+0x16>

000195e0 <__aeabi_d2uiz>:
   195e0:	b570      	push	{r4, r5, r6, lr}
   195e2:	2200      	movs	r2, #0
   195e4:	4b0c      	ldr	r3, [pc, #48]	; (19618 <__aeabi_d2uiz+0x38>)
   195e6:	0004      	movs	r4, r0
   195e8:	000d      	movs	r5, r1
   195ea:	f7ff ff73 	bl	194d4 <__aeabi_dcmpge>
   195ee:	2800      	cmp	r0, #0
   195f0:	d104      	bne.n	195fc <__aeabi_d2uiz+0x1c>
   195f2:	0020      	movs	r0, r4
   195f4:	0029      	movs	r1, r5
   195f6:	f002 fbdf 	bl	1bdb8 <__aeabi_d2iz>
   195fa:	bd70      	pop	{r4, r5, r6, pc}
   195fc:	4b06      	ldr	r3, [pc, #24]	; (19618 <__aeabi_d2uiz+0x38>)
   195fe:	2200      	movs	r2, #0
   19600:	0020      	movs	r0, r4
   19602:	0029      	movs	r1, r5
   19604:	f002 f8c2 	bl	1b78c <__aeabi_dsub>
   19608:	f002 fbd6 	bl	1bdb8 <__aeabi_d2iz>
   1960c:	2380      	movs	r3, #128	; 0x80
   1960e:	061b      	lsls	r3, r3, #24
   19610:	469c      	mov	ip, r3
   19612:	4460      	add	r0, ip
   19614:	e7f1      	b.n	195fa <__aeabi_d2uiz+0x1a>
   19616:	46c0      	nop			; (mov r8, r8)
   19618:	41e00000 	.word	0x41e00000

0001961c <__aeabi_fadd>:
   1961c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1961e:	46c6      	mov	lr, r8
   19620:	024e      	lsls	r6, r1, #9
   19622:	0247      	lsls	r7, r0, #9
   19624:	0a76      	lsrs	r6, r6, #9
   19626:	0a7b      	lsrs	r3, r7, #9
   19628:	0044      	lsls	r4, r0, #1
   1962a:	0fc5      	lsrs	r5, r0, #31
   1962c:	00f7      	lsls	r7, r6, #3
   1962e:	0048      	lsls	r0, r1, #1
   19630:	4698      	mov	r8, r3
   19632:	b500      	push	{lr}
   19634:	0e24      	lsrs	r4, r4, #24
   19636:	002a      	movs	r2, r5
   19638:	00db      	lsls	r3, r3, #3
   1963a:	0e00      	lsrs	r0, r0, #24
   1963c:	0fc9      	lsrs	r1, r1, #31
   1963e:	46bc      	mov	ip, r7
   19640:	428d      	cmp	r5, r1
   19642:	d067      	beq.n	19714 <__aeabi_fadd+0xf8>
   19644:	1a22      	subs	r2, r4, r0
   19646:	2a00      	cmp	r2, #0
   19648:	dc00      	bgt.n	1964c <__aeabi_fadd+0x30>
   1964a:	e0a5      	b.n	19798 <__aeabi_fadd+0x17c>
   1964c:	2800      	cmp	r0, #0
   1964e:	d13a      	bne.n	196c6 <__aeabi_fadd+0xaa>
   19650:	2f00      	cmp	r7, #0
   19652:	d100      	bne.n	19656 <__aeabi_fadd+0x3a>
   19654:	e093      	b.n	1977e <__aeabi_fadd+0x162>
   19656:	1e51      	subs	r1, r2, #1
   19658:	2900      	cmp	r1, #0
   1965a:	d000      	beq.n	1965e <__aeabi_fadd+0x42>
   1965c:	e0bc      	b.n	197d8 <__aeabi_fadd+0x1bc>
   1965e:	2401      	movs	r4, #1
   19660:	1bdb      	subs	r3, r3, r7
   19662:	015a      	lsls	r2, r3, #5
   19664:	d546      	bpl.n	196f4 <__aeabi_fadd+0xd8>
   19666:	019b      	lsls	r3, r3, #6
   19668:	099e      	lsrs	r6, r3, #6
   1966a:	0030      	movs	r0, r6
   1966c:	f002 fd2e 	bl	1c0cc <__clzsi2>
   19670:	3805      	subs	r0, #5
   19672:	4086      	lsls	r6, r0
   19674:	4284      	cmp	r4, r0
   19676:	dd00      	ble.n	1967a <__aeabi_fadd+0x5e>
   19678:	e09d      	b.n	197b6 <__aeabi_fadd+0x19a>
   1967a:	1b04      	subs	r4, r0, r4
   1967c:	0032      	movs	r2, r6
   1967e:	2020      	movs	r0, #32
   19680:	3401      	adds	r4, #1
   19682:	40e2      	lsrs	r2, r4
   19684:	1b04      	subs	r4, r0, r4
   19686:	40a6      	lsls	r6, r4
   19688:	0033      	movs	r3, r6
   1968a:	1e5e      	subs	r6, r3, #1
   1968c:	41b3      	sbcs	r3, r6
   1968e:	2400      	movs	r4, #0
   19690:	4313      	orrs	r3, r2
   19692:	075a      	lsls	r2, r3, #29
   19694:	d004      	beq.n	196a0 <__aeabi_fadd+0x84>
   19696:	220f      	movs	r2, #15
   19698:	401a      	ands	r2, r3
   1969a:	2a04      	cmp	r2, #4
   1969c:	d000      	beq.n	196a0 <__aeabi_fadd+0x84>
   1969e:	3304      	adds	r3, #4
   196a0:	015a      	lsls	r2, r3, #5
   196a2:	d529      	bpl.n	196f8 <__aeabi_fadd+0xdc>
   196a4:	3401      	adds	r4, #1
   196a6:	2cff      	cmp	r4, #255	; 0xff
   196a8:	d100      	bne.n	196ac <__aeabi_fadd+0x90>
   196aa:	e081      	b.n	197b0 <__aeabi_fadd+0x194>
   196ac:	002a      	movs	r2, r5
   196ae:	019b      	lsls	r3, r3, #6
   196b0:	0a5b      	lsrs	r3, r3, #9
   196b2:	b2e4      	uxtb	r4, r4
   196b4:	025b      	lsls	r3, r3, #9
   196b6:	05e4      	lsls	r4, r4, #23
   196b8:	0a58      	lsrs	r0, r3, #9
   196ba:	07d2      	lsls	r2, r2, #31
   196bc:	4320      	orrs	r0, r4
   196be:	4310      	orrs	r0, r2
   196c0:	bc04      	pop	{r2}
   196c2:	4690      	mov	r8, r2
   196c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196c6:	2cff      	cmp	r4, #255	; 0xff
   196c8:	d0e3      	beq.n	19692 <__aeabi_fadd+0x76>
   196ca:	2180      	movs	r1, #128	; 0x80
   196cc:	0038      	movs	r0, r7
   196ce:	04c9      	lsls	r1, r1, #19
   196d0:	4308      	orrs	r0, r1
   196d2:	4684      	mov	ip, r0
   196d4:	2a1b      	cmp	r2, #27
   196d6:	dd00      	ble.n	196da <__aeabi_fadd+0xbe>
   196d8:	e082      	b.n	197e0 <__aeabi_fadd+0x1c4>
   196da:	2020      	movs	r0, #32
   196dc:	4661      	mov	r1, ip
   196de:	40d1      	lsrs	r1, r2
   196e0:	1a82      	subs	r2, r0, r2
   196e2:	4660      	mov	r0, ip
   196e4:	4090      	lsls	r0, r2
   196e6:	0002      	movs	r2, r0
   196e8:	1e50      	subs	r0, r2, #1
   196ea:	4182      	sbcs	r2, r0
   196ec:	430a      	orrs	r2, r1
   196ee:	1a9b      	subs	r3, r3, r2
   196f0:	015a      	lsls	r2, r3, #5
   196f2:	d4b8      	bmi.n	19666 <__aeabi_fadd+0x4a>
   196f4:	075a      	lsls	r2, r3, #29
   196f6:	d1ce      	bne.n	19696 <__aeabi_fadd+0x7a>
   196f8:	08de      	lsrs	r6, r3, #3
   196fa:	002a      	movs	r2, r5
   196fc:	2cff      	cmp	r4, #255	; 0xff
   196fe:	d13a      	bne.n	19776 <__aeabi_fadd+0x15a>
   19700:	2e00      	cmp	r6, #0
   19702:	d100      	bne.n	19706 <__aeabi_fadd+0xea>
   19704:	e0ae      	b.n	19864 <__aeabi_fadd+0x248>
   19706:	2380      	movs	r3, #128	; 0x80
   19708:	03db      	lsls	r3, r3, #15
   1970a:	4333      	orrs	r3, r6
   1970c:	025b      	lsls	r3, r3, #9
   1970e:	0a5b      	lsrs	r3, r3, #9
   19710:	24ff      	movs	r4, #255	; 0xff
   19712:	e7cf      	b.n	196b4 <__aeabi_fadd+0x98>
   19714:	1a21      	subs	r1, r4, r0
   19716:	2900      	cmp	r1, #0
   19718:	dd52      	ble.n	197c0 <__aeabi_fadd+0x1a4>
   1971a:	2800      	cmp	r0, #0
   1971c:	d031      	beq.n	19782 <__aeabi_fadd+0x166>
   1971e:	2cff      	cmp	r4, #255	; 0xff
   19720:	d0b7      	beq.n	19692 <__aeabi_fadd+0x76>
   19722:	2080      	movs	r0, #128	; 0x80
   19724:	003e      	movs	r6, r7
   19726:	04c0      	lsls	r0, r0, #19
   19728:	4306      	orrs	r6, r0
   1972a:	46b4      	mov	ip, r6
   1972c:	291b      	cmp	r1, #27
   1972e:	dd00      	ble.n	19732 <__aeabi_fadd+0x116>
   19730:	e0aa      	b.n	19888 <__aeabi_fadd+0x26c>
   19732:	2620      	movs	r6, #32
   19734:	4660      	mov	r0, ip
   19736:	40c8      	lsrs	r0, r1
   19738:	1a71      	subs	r1, r6, r1
   1973a:	4666      	mov	r6, ip
   1973c:	408e      	lsls	r6, r1
   1973e:	0031      	movs	r1, r6
   19740:	1e4e      	subs	r6, r1, #1
   19742:	41b1      	sbcs	r1, r6
   19744:	4301      	orrs	r1, r0
   19746:	185b      	adds	r3, r3, r1
   19748:	0159      	lsls	r1, r3, #5
   1974a:	d5d3      	bpl.n	196f4 <__aeabi_fadd+0xd8>
   1974c:	3401      	adds	r4, #1
   1974e:	2cff      	cmp	r4, #255	; 0xff
   19750:	d100      	bne.n	19754 <__aeabi_fadd+0x138>
   19752:	e087      	b.n	19864 <__aeabi_fadd+0x248>
   19754:	2201      	movs	r2, #1
   19756:	4978      	ldr	r1, [pc, #480]	; (19938 <__aeabi_fadd+0x31c>)
   19758:	401a      	ands	r2, r3
   1975a:	085b      	lsrs	r3, r3, #1
   1975c:	400b      	ands	r3, r1
   1975e:	4313      	orrs	r3, r2
   19760:	e797      	b.n	19692 <__aeabi_fadd+0x76>
   19762:	2c00      	cmp	r4, #0
   19764:	d000      	beq.n	19768 <__aeabi_fadd+0x14c>
   19766:	e0a7      	b.n	198b8 <__aeabi_fadd+0x29c>
   19768:	2b00      	cmp	r3, #0
   1976a:	d000      	beq.n	1976e <__aeabi_fadd+0x152>
   1976c:	e0b6      	b.n	198dc <__aeabi_fadd+0x2c0>
   1976e:	1e3b      	subs	r3, r7, #0
   19770:	d162      	bne.n	19838 <__aeabi_fadd+0x21c>
   19772:	2600      	movs	r6, #0
   19774:	2200      	movs	r2, #0
   19776:	0273      	lsls	r3, r6, #9
   19778:	0a5b      	lsrs	r3, r3, #9
   1977a:	b2e4      	uxtb	r4, r4
   1977c:	e79a      	b.n	196b4 <__aeabi_fadd+0x98>
   1977e:	0014      	movs	r4, r2
   19780:	e787      	b.n	19692 <__aeabi_fadd+0x76>
   19782:	2f00      	cmp	r7, #0
   19784:	d04d      	beq.n	19822 <__aeabi_fadd+0x206>
   19786:	1e48      	subs	r0, r1, #1
   19788:	2800      	cmp	r0, #0
   1978a:	d157      	bne.n	1983c <__aeabi_fadd+0x220>
   1978c:	4463      	add	r3, ip
   1978e:	2401      	movs	r4, #1
   19790:	015a      	lsls	r2, r3, #5
   19792:	d5af      	bpl.n	196f4 <__aeabi_fadd+0xd8>
   19794:	2402      	movs	r4, #2
   19796:	e7dd      	b.n	19754 <__aeabi_fadd+0x138>
   19798:	2a00      	cmp	r2, #0
   1979a:	d124      	bne.n	197e6 <__aeabi_fadd+0x1ca>
   1979c:	1c62      	adds	r2, r4, #1
   1979e:	b2d2      	uxtb	r2, r2
   197a0:	2a01      	cmp	r2, #1
   197a2:	ddde      	ble.n	19762 <__aeabi_fadd+0x146>
   197a4:	1bde      	subs	r6, r3, r7
   197a6:	0172      	lsls	r2, r6, #5
   197a8:	d535      	bpl.n	19816 <__aeabi_fadd+0x1fa>
   197aa:	1afe      	subs	r6, r7, r3
   197ac:	000d      	movs	r5, r1
   197ae:	e75c      	b.n	1966a <__aeabi_fadd+0x4e>
   197b0:	002a      	movs	r2, r5
   197b2:	2300      	movs	r3, #0
   197b4:	e77e      	b.n	196b4 <__aeabi_fadd+0x98>
   197b6:	0033      	movs	r3, r6
   197b8:	4a60      	ldr	r2, [pc, #384]	; (1993c <__aeabi_fadd+0x320>)
   197ba:	1a24      	subs	r4, r4, r0
   197bc:	4013      	ands	r3, r2
   197be:	e768      	b.n	19692 <__aeabi_fadd+0x76>
   197c0:	2900      	cmp	r1, #0
   197c2:	d163      	bne.n	1988c <__aeabi_fadd+0x270>
   197c4:	1c61      	adds	r1, r4, #1
   197c6:	b2c8      	uxtb	r0, r1
   197c8:	2801      	cmp	r0, #1
   197ca:	dd4e      	ble.n	1986a <__aeabi_fadd+0x24e>
   197cc:	29ff      	cmp	r1, #255	; 0xff
   197ce:	d049      	beq.n	19864 <__aeabi_fadd+0x248>
   197d0:	4463      	add	r3, ip
   197d2:	085b      	lsrs	r3, r3, #1
   197d4:	000c      	movs	r4, r1
   197d6:	e75c      	b.n	19692 <__aeabi_fadd+0x76>
   197d8:	2aff      	cmp	r2, #255	; 0xff
   197da:	d041      	beq.n	19860 <__aeabi_fadd+0x244>
   197dc:	000a      	movs	r2, r1
   197de:	e779      	b.n	196d4 <__aeabi_fadd+0xb8>
   197e0:	2201      	movs	r2, #1
   197e2:	1a9b      	subs	r3, r3, r2
   197e4:	e784      	b.n	196f0 <__aeabi_fadd+0xd4>
   197e6:	2c00      	cmp	r4, #0
   197e8:	d01d      	beq.n	19826 <__aeabi_fadd+0x20a>
   197ea:	28ff      	cmp	r0, #255	; 0xff
   197ec:	d022      	beq.n	19834 <__aeabi_fadd+0x218>
   197ee:	2480      	movs	r4, #128	; 0x80
   197f0:	04e4      	lsls	r4, r4, #19
   197f2:	4252      	negs	r2, r2
   197f4:	4323      	orrs	r3, r4
   197f6:	2a1b      	cmp	r2, #27
   197f8:	dd00      	ble.n	197fc <__aeabi_fadd+0x1e0>
   197fa:	e08a      	b.n	19912 <__aeabi_fadd+0x2f6>
   197fc:	001c      	movs	r4, r3
   197fe:	2520      	movs	r5, #32
   19800:	40d4      	lsrs	r4, r2
   19802:	1aaa      	subs	r2, r5, r2
   19804:	4093      	lsls	r3, r2
   19806:	1e5a      	subs	r2, r3, #1
   19808:	4193      	sbcs	r3, r2
   1980a:	4323      	orrs	r3, r4
   1980c:	4662      	mov	r2, ip
   1980e:	0004      	movs	r4, r0
   19810:	1ad3      	subs	r3, r2, r3
   19812:	000d      	movs	r5, r1
   19814:	e725      	b.n	19662 <__aeabi_fadd+0x46>
   19816:	2e00      	cmp	r6, #0
   19818:	d000      	beq.n	1981c <__aeabi_fadd+0x200>
   1981a:	e726      	b.n	1966a <__aeabi_fadd+0x4e>
   1981c:	2200      	movs	r2, #0
   1981e:	2400      	movs	r4, #0
   19820:	e7a9      	b.n	19776 <__aeabi_fadd+0x15a>
   19822:	000c      	movs	r4, r1
   19824:	e735      	b.n	19692 <__aeabi_fadd+0x76>
   19826:	2b00      	cmp	r3, #0
   19828:	d04d      	beq.n	198c6 <__aeabi_fadd+0x2aa>
   1982a:	43d2      	mvns	r2, r2
   1982c:	2a00      	cmp	r2, #0
   1982e:	d0ed      	beq.n	1980c <__aeabi_fadd+0x1f0>
   19830:	28ff      	cmp	r0, #255	; 0xff
   19832:	d1e0      	bne.n	197f6 <__aeabi_fadd+0x1da>
   19834:	4663      	mov	r3, ip
   19836:	24ff      	movs	r4, #255	; 0xff
   19838:	000d      	movs	r5, r1
   1983a:	e72a      	b.n	19692 <__aeabi_fadd+0x76>
   1983c:	29ff      	cmp	r1, #255	; 0xff
   1983e:	d00f      	beq.n	19860 <__aeabi_fadd+0x244>
   19840:	0001      	movs	r1, r0
   19842:	e773      	b.n	1972c <__aeabi_fadd+0x110>
   19844:	2b00      	cmp	r3, #0
   19846:	d061      	beq.n	1990c <__aeabi_fadd+0x2f0>
   19848:	24ff      	movs	r4, #255	; 0xff
   1984a:	2f00      	cmp	r7, #0
   1984c:	d100      	bne.n	19850 <__aeabi_fadd+0x234>
   1984e:	e720      	b.n	19692 <__aeabi_fadd+0x76>
   19850:	2280      	movs	r2, #128	; 0x80
   19852:	4641      	mov	r1, r8
   19854:	03d2      	lsls	r2, r2, #15
   19856:	4211      	tst	r1, r2
   19858:	d002      	beq.n	19860 <__aeabi_fadd+0x244>
   1985a:	4216      	tst	r6, r2
   1985c:	d100      	bne.n	19860 <__aeabi_fadd+0x244>
   1985e:	003b      	movs	r3, r7
   19860:	24ff      	movs	r4, #255	; 0xff
   19862:	e716      	b.n	19692 <__aeabi_fadd+0x76>
   19864:	24ff      	movs	r4, #255	; 0xff
   19866:	2300      	movs	r3, #0
   19868:	e724      	b.n	196b4 <__aeabi_fadd+0x98>
   1986a:	2c00      	cmp	r4, #0
   1986c:	d1ea      	bne.n	19844 <__aeabi_fadd+0x228>
   1986e:	2b00      	cmp	r3, #0
   19870:	d058      	beq.n	19924 <__aeabi_fadd+0x308>
   19872:	2f00      	cmp	r7, #0
   19874:	d100      	bne.n	19878 <__aeabi_fadd+0x25c>
   19876:	e70c      	b.n	19692 <__aeabi_fadd+0x76>
   19878:	4463      	add	r3, ip
   1987a:	015a      	lsls	r2, r3, #5
   1987c:	d400      	bmi.n	19880 <__aeabi_fadd+0x264>
   1987e:	e739      	b.n	196f4 <__aeabi_fadd+0xd8>
   19880:	4a2e      	ldr	r2, [pc, #184]	; (1993c <__aeabi_fadd+0x320>)
   19882:	000c      	movs	r4, r1
   19884:	4013      	ands	r3, r2
   19886:	e704      	b.n	19692 <__aeabi_fadd+0x76>
   19888:	2101      	movs	r1, #1
   1988a:	e75c      	b.n	19746 <__aeabi_fadd+0x12a>
   1988c:	2c00      	cmp	r4, #0
   1988e:	d11e      	bne.n	198ce <__aeabi_fadd+0x2b2>
   19890:	2b00      	cmp	r3, #0
   19892:	d040      	beq.n	19916 <__aeabi_fadd+0x2fa>
   19894:	43c9      	mvns	r1, r1
   19896:	2900      	cmp	r1, #0
   19898:	d00b      	beq.n	198b2 <__aeabi_fadd+0x296>
   1989a:	28ff      	cmp	r0, #255	; 0xff
   1989c:	d036      	beq.n	1990c <__aeabi_fadd+0x2f0>
   1989e:	291b      	cmp	r1, #27
   198a0:	dc47      	bgt.n	19932 <__aeabi_fadd+0x316>
   198a2:	001c      	movs	r4, r3
   198a4:	2620      	movs	r6, #32
   198a6:	40cc      	lsrs	r4, r1
   198a8:	1a71      	subs	r1, r6, r1
   198aa:	408b      	lsls	r3, r1
   198ac:	1e59      	subs	r1, r3, #1
   198ae:	418b      	sbcs	r3, r1
   198b0:	4323      	orrs	r3, r4
   198b2:	4463      	add	r3, ip
   198b4:	0004      	movs	r4, r0
   198b6:	e747      	b.n	19748 <__aeabi_fadd+0x12c>
   198b8:	2b00      	cmp	r3, #0
   198ba:	d118      	bne.n	198ee <__aeabi_fadd+0x2d2>
   198bc:	1e3b      	subs	r3, r7, #0
   198be:	d02d      	beq.n	1991c <__aeabi_fadd+0x300>
   198c0:	000d      	movs	r5, r1
   198c2:	24ff      	movs	r4, #255	; 0xff
   198c4:	e6e5      	b.n	19692 <__aeabi_fadd+0x76>
   198c6:	003b      	movs	r3, r7
   198c8:	0004      	movs	r4, r0
   198ca:	000d      	movs	r5, r1
   198cc:	e6e1      	b.n	19692 <__aeabi_fadd+0x76>
   198ce:	28ff      	cmp	r0, #255	; 0xff
   198d0:	d01c      	beq.n	1990c <__aeabi_fadd+0x2f0>
   198d2:	2480      	movs	r4, #128	; 0x80
   198d4:	04e4      	lsls	r4, r4, #19
   198d6:	4249      	negs	r1, r1
   198d8:	4323      	orrs	r3, r4
   198da:	e7e0      	b.n	1989e <__aeabi_fadd+0x282>
   198dc:	2f00      	cmp	r7, #0
   198de:	d100      	bne.n	198e2 <__aeabi_fadd+0x2c6>
   198e0:	e6d7      	b.n	19692 <__aeabi_fadd+0x76>
   198e2:	1bde      	subs	r6, r3, r7
   198e4:	0172      	lsls	r2, r6, #5
   198e6:	d51f      	bpl.n	19928 <__aeabi_fadd+0x30c>
   198e8:	1afb      	subs	r3, r7, r3
   198ea:	000d      	movs	r5, r1
   198ec:	e6d1      	b.n	19692 <__aeabi_fadd+0x76>
   198ee:	24ff      	movs	r4, #255	; 0xff
   198f0:	2f00      	cmp	r7, #0
   198f2:	d100      	bne.n	198f6 <__aeabi_fadd+0x2da>
   198f4:	e6cd      	b.n	19692 <__aeabi_fadd+0x76>
   198f6:	2280      	movs	r2, #128	; 0x80
   198f8:	4640      	mov	r0, r8
   198fa:	03d2      	lsls	r2, r2, #15
   198fc:	4210      	tst	r0, r2
   198fe:	d0af      	beq.n	19860 <__aeabi_fadd+0x244>
   19900:	4216      	tst	r6, r2
   19902:	d1ad      	bne.n	19860 <__aeabi_fadd+0x244>
   19904:	003b      	movs	r3, r7
   19906:	000d      	movs	r5, r1
   19908:	24ff      	movs	r4, #255	; 0xff
   1990a:	e6c2      	b.n	19692 <__aeabi_fadd+0x76>
   1990c:	4663      	mov	r3, ip
   1990e:	24ff      	movs	r4, #255	; 0xff
   19910:	e6bf      	b.n	19692 <__aeabi_fadd+0x76>
   19912:	2301      	movs	r3, #1
   19914:	e77a      	b.n	1980c <__aeabi_fadd+0x1f0>
   19916:	003b      	movs	r3, r7
   19918:	0004      	movs	r4, r0
   1991a:	e6ba      	b.n	19692 <__aeabi_fadd+0x76>
   1991c:	2680      	movs	r6, #128	; 0x80
   1991e:	2200      	movs	r2, #0
   19920:	03f6      	lsls	r6, r6, #15
   19922:	e6f0      	b.n	19706 <__aeabi_fadd+0xea>
   19924:	003b      	movs	r3, r7
   19926:	e6b4      	b.n	19692 <__aeabi_fadd+0x76>
   19928:	1e33      	subs	r3, r6, #0
   1992a:	d000      	beq.n	1992e <__aeabi_fadd+0x312>
   1992c:	e6e2      	b.n	196f4 <__aeabi_fadd+0xd8>
   1992e:	2200      	movs	r2, #0
   19930:	e721      	b.n	19776 <__aeabi_fadd+0x15a>
   19932:	2301      	movs	r3, #1
   19934:	e7bd      	b.n	198b2 <__aeabi_fadd+0x296>
   19936:	46c0      	nop			; (mov r8, r8)
   19938:	7dffffff 	.word	0x7dffffff
   1993c:	fbffffff 	.word	0xfbffffff

00019940 <__aeabi_fdiv>:
   19940:	b5f0      	push	{r4, r5, r6, r7, lr}
   19942:	4657      	mov	r7, sl
   19944:	464e      	mov	r6, r9
   19946:	46de      	mov	lr, fp
   19948:	4645      	mov	r5, r8
   1994a:	b5e0      	push	{r5, r6, r7, lr}
   1994c:	0244      	lsls	r4, r0, #9
   1994e:	0043      	lsls	r3, r0, #1
   19950:	0fc6      	lsrs	r6, r0, #31
   19952:	b083      	sub	sp, #12
   19954:	1c0f      	adds	r7, r1, #0
   19956:	0a64      	lsrs	r4, r4, #9
   19958:	0e1b      	lsrs	r3, r3, #24
   1995a:	46b2      	mov	sl, r6
   1995c:	d053      	beq.n	19a06 <__aeabi_fdiv+0xc6>
   1995e:	2bff      	cmp	r3, #255	; 0xff
   19960:	d027      	beq.n	199b2 <__aeabi_fdiv+0x72>
   19962:	2280      	movs	r2, #128	; 0x80
   19964:	00e4      	lsls	r4, r4, #3
   19966:	04d2      	lsls	r2, r2, #19
   19968:	4314      	orrs	r4, r2
   1996a:	227f      	movs	r2, #127	; 0x7f
   1996c:	4252      	negs	r2, r2
   1996e:	4690      	mov	r8, r2
   19970:	4498      	add	r8, r3
   19972:	2300      	movs	r3, #0
   19974:	4699      	mov	r9, r3
   19976:	469b      	mov	fp, r3
   19978:	027d      	lsls	r5, r7, #9
   1997a:	0078      	lsls	r0, r7, #1
   1997c:	0ffb      	lsrs	r3, r7, #31
   1997e:	0a6d      	lsrs	r5, r5, #9
   19980:	0e00      	lsrs	r0, r0, #24
   19982:	9300      	str	r3, [sp, #0]
   19984:	d024      	beq.n	199d0 <__aeabi_fdiv+0x90>
   19986:	28ff      	cmp	r0, #255	; 0xff
   19988:	d046      	beq.n	19a18 <__aeabi_fdiv+0xd8>
   1998a:	2380      	movs	r3, #128	; 0x80
   1998c:	2100      	movs	r1, #0
   1998e:	00ed      	lsls	r5, r5, #3
   19990:	04db      	lsls	r3, r3, #19
   19992:	431d      	orrs	r5, r3
   19994:	387f      	subs	r0, #127	; 0x7f
   19996:	4647      	mov	r7, r8
   19998:	1a38      	subs	r0, r7, r0
   1999a:	464f      	mov	r7, r9
   1999c:	430f      	orrs	r7, r1
   1999e:	00bf      	lsls	r7, r7, #2
   199a0:	46b9      	mov	r9, r7
   199a2:	0033      	movs	r3, r6
   199a4:	9a00      	ldr	r2, [sp, #0]
   199a6:	4f87      	ldr	r7, [pc, #540]	; (19bc4 <__aeabi_fdiv+0x284>)
   199a8:	4053      	eors	r3, r2
   199aa:	464a      	mov	r2, r9
   199ac:	58ba      	ldr	r2, [r7, r2]
   199ae:	9301      	str	r3, [sp, #4]
   199b0:	4697      	mov	pc, r2
   199b2:	2c00      	cmp	r4, #0
   199b4:	d14e      	bne.n	19a54 <__aeabi_fdiv+0x114>
   199b6:	2308      	movs	r3, #8
   199b8:	4699      	mov	r9, r3
   199ba:	33f7      	adds	r3, #247	; 0xf7
   199bc:	4698      	mov	r8, r3
   199be:	3bfd      	subs	r3, #253	; 0xfd
   199c0:	469b      	mov	fp, r3
   199c2:	027d      	lsls	r5, r7, #9
   199c4:	0078      	lsls	r0, r7, #1
   199c6:	0ffb      	lsrs	r3, r7, #31
   199c8:	0a6d      	lsrs	r5, r5, #9
   199ca:	0e00      	lsrs	r0, r0, #24
   199cc:	9300      	str	r3, [sp, #0]
   199ce:	d1da      	bne.n	19986 <__aeabi_fdiv+0x46>
   199d0:	2d00      	cmp	r5, #0
   199d2:	d126      	bne.n	19a22 <__aeabi_fdiv+0xe2>
   199d4:	2000      	movs	r0, #0
   199d6:	2101      	movs	r1, #1
   199d8:	0033      	movs	r3, r6
   199da:	9a00      	ldr	r2, [sp, #0]
   199dc:	4f7a      	ldr	r7, [pc, #488]	; (19bc8 <__aeabi_fdiv+0x288>)
   199de:	4053      	eors	r3, r2
   199e0:	4642      	mov	r2, r8
   199e2:	1a10      	subs	r0, r2, r0
   199e4:	464a      	mov	r2, r9
   199e6:	430a      	orrs	r2, r1
   199e8:	0092      	lsls	r2, r2, #2
   199ea:	58ba      	ldr	r2, [r7, r2]
   199ec:	001d      	movs	r5, r3
   199ee:	4697      	mov	pc, r2
   199f0:	9b00      	ldr	r3, [sp, #0]
   199f2:	002c      	movs	r4, r5
   199f4:	469a      	mov	sl, r3
   199f6:	468b      	mov	fp, r1
   199f8:	465b      	mov	r3, fp
   199fa:	2b02      	cmp	r3, #2
   199fc:	d131      	bne.n	19a62 <__aeabi_fdiv+0x122>
   199fe:	4653      	mov	r3, sl
   19a00:	21ff      	movs	r1, #255	; 0xff
   19a02:	2400      	movs	r4, #0
   19a04:	e038      	b.n	19a78 <__aeabi_fdiv+0x138>
   19a06:	2c00      	cmp	r4, #0
   19a08:	d117      	bne.n	19a3a <__aeabi_fdiv+0xfa>
   19a0a:	2304      	movs	r3, #4
   19a0c:	4699      	mov	r9, r3
   19a0e:	2300      	movs	r3, #0
   19a10:	4698      	mov	r8, r3
   19a12:	3301      	adds	r3, #1
   19a14:	469b      	mov	fp, r3
   19a16:	e7af      	b.n	19978 <__aeabi_fdiv+0x38>
   19a18:	20ff      	movs	r0, #255	; 0xff
   19a1a:	2d00      	cmp	r5, #0
   19a1c:	d10b      	bne.n	19a36 <__aeabi_fdiv+0xf6>
   19a1e:	2102      	movs	r1, #2
   19a20:	e7da      	b.n	199d8 <__aeabi_fdiv+0x98>
   19a22:	0028      	movs	r0, r5
   19a24:	f002 fb52 	bl	1c0cc <__clzsi2>
   19a28:	1f43      	subs	r3, r0, #5
   19a2a:	409d      	lsls	r5, r3
   19a2c:	2376      	movs	r3, #118	; 0x76
   19a2e:	425b      	negs	r3, r3
   19a30:	1a18      	subs	r0, r3, r0
   19a32:	2100      	movs	r1, #0
   19a34:	e7af      	b.n	19996 <__aeabi_fdiv+0x56>
   19a36:	2103      	movs	r1, #3
   19a38:	e7ad      	b.n	19996 <__aeabi_fdiv+0x56>
   19a3a:	0020      	movs	r0, r4
   19a3c:	f002 fb46 	bl	1c0cc <__clzsi2>
   19a40:	1f43      	subs	r3, r0, #5
   19a42:	409c      	lsls	r4, r3
   19a44:	2376      	movs	r3, #118	; 0x76
   19a46:	425b      	negs	r3, r3
   19a48:	1a1b      	subs	r3, r3, r0
   19a4a:	4698      	mov	r8, r3
   19a4c:	2300      	movs	r3, #0
   19a4e:	4699      	mov	r9, r3
   19a50:	469b      	mov	fp, r3
   19a52:	e791      	b.n	19978 <__aeabi_fdiv+0x38>
   19a54:	230c      	movs	r3, #12
   19a56:	4699      	mov	r9, r3
   19a58:	33f3      	adds	r3, #243	; 0xf3
   19a5a:	4698      	mov	r8, r3
   19a5c:	3bfc      	subs	r3, #252	; 0xfc
   19a5e:	469b      	mov	fp, r3
   19a60:	e78a      	b.n	19978 <__aeabi_fdiv+0x38>
   19a62:	2b03      	cmp	r3, #3
   19a64:	d100      	bne.n	19a68 <__aeabi_fdiv+0x128>
   19a66:	e0a5      	b.n	19bb4 <__aeabi_fdiv+0x274>
   19a68:	4655      	mov	r5, sl
   19a6a:	2b01      	cmp	r3, #1
   19a6c:	d000      	beq.n	19a70 <__aeabi_fdiv+0x130>
   19a6e:	e081      	b.n	19b74 <__aeabi_fdiv+0x234>
   19a70:	2301      	movs	r3, #1
   19a72:	2100      	movs	r1, #0
   19a74:	2400      	movs	r4, #0
   19a76:	402b      	ands	r3, r5
   19a78:	0264      	lsls	r4, r4, #9
   19a7a:	05c9      	lsls	r1, r1, #23
   19a7c:	0a60      	lsrs	r0, r4, #9
   19a7e:	07db      	lsls	r3, r3, #31
   19a80:	4308      	orrs	r0, r1
   19a82:	4318      	orrs	r0, r3
   19a84:	b003      	add	sp, #12
   19a86:	bc3c      	pop	{r2, r3, r4, r5}
   19a88:	4690      	mov	r8, r2
   19a8a:	4699      	mov	r9, r3
   19a8c:	46a2      	mov	sl, r4
   19a8e:	46ab      	mov	fp, r5
   19a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a92:	2480      	movs	r4, #128	; 0x80
   19a94:	2300      	movs	r3, #0
   19a96:	03e4      	lsls	r4, r4, #15
   19a98:	21ff      	movs	r1, #255	; 0xff
   19a9a:	e7ed      	b.n	19a78 <__aeabi_fdiv+0x138>
   19a9c:	21ff      	movs	r1, #255	; 0xff
   19a9e:	2400      	movs	r4, #0
   19aa0:	e7ea      	b.n	19a78 <__aeabi_fdiv+0x138>
   19aa2:	2301      	movs	r3, #1
   19aa4:	1a59      	subs	r1, r3, r1
   19aa6:	291b      	cmp	r1, #27
   19aa8:	dd66      	ble.n	19b78 <__aeabi_fdiv+0x238>
   19aaa:	9a01      	ldr	r2, [sp, #4]
   19aac:	4013      	ands	r3, r2
   19aae:	2100      	movs	r1, #0
   19ab0:	2400      	movs	r4, #0
   19ab2:	e7e1      	b.n	19a78 <__aeabi_fdiv+0x138>
   19ab4:	2380      	movs	r3, #128	; 0x80
   19ab6:	03db      	lsls	r3, r3, #15
   19ab8:	421c      	tst	r4, r3
   19aba:	d038      	beq.n	19b2e <__aeabi_fdiv+0x1ee>
   19abc:	421d      	tst	r5, r3
   19abe:	d051      	beq.n	19b64 <__aeabi_fdiv+0x224>
   19ac0:	431c      	orrs	r4, r3
   19ac2:	0264      	lsls	r4, r4, #9
   19ac4:	0a64      	lsrs	r4, r4, #9
   19ac6:	0033      	movs	r3, r6
   19ac8:	21ff      	movs	r1, #255	; 0xff
   19aca:	e7d5      	b.n	19a78 <__aeabi_fdiv+0x138>
   19acc:	0163      	lsls	r3, r4, #5
   19ace:	016c      	lsls	r4, r5, #5
   19ad0:	42a3      	cmp	r3, r4
   19ad2:	d23b      	bcs.n	19b4c <__aeabi_fdiv+0x20c>
   19ad4:	261b      	movs	r6, #27
   19ad6:	2100      	movs	r1, #0
   19ad8:	3801      	subs	r0, #1
   19ada:	2501      	movs	r5, #1
   19adc:	001f      	movs	r7, r3
   19ade:	0049      	lsls	r1, r1, #1
   19ae0:	005b      	lsls	r3, r3, #1
   19ae2:	2f00      	cmp	r7, #0
   19ae4:	db01      	blt.n	19aea <__aeabi_fdiv+0x1aa>
   19ae6:	429c      	cmp	r4, r3
   19ae8:	d801      	bhi.n	19aee <__aeabi_fdiv+0x1ae>
   19aea:	1b1b      	subs	r3, r3, r4
   19aec:	4329      	orrs	r1, r5
   19aee:	3e01      	subs	r6, #1
   19af0:	2e00      	cmp	r6, #0
   19af2:	d1f3      	bne.n	19adc <__aeabi_fdiv+0x19c>
   19af4:	001c      	movs	r4, r3
   19af6:	1e63      	subs	r3, r4, #1
   19af8:	419c      	sbcs	r4, r3
   19afa:	430c      	orrs	r4, r1
   19afc:	0001      	movs	r1, r0
   19afe:	317f      	adds	r1, #127	; 0x7f
   19b00:	2900      	cmp	r1, #0
   19b02:	ddce      	ble.n	19aa2 <__aeabi_fdiv+0x162>
   19b04:	0763      	lsls	r3, r4, #29
   19b06:	d004      	beq.n	19b12 <__aeabi_fdiv+0x1d2>
   19b08:	230f      	movs	r3, #15
   19b0a:	4023      	ands	r3, r4
   19b0c:	2b04      	cmp	r3, #4
   19b0e:	d000      	beq.n	19b12 <__aeabi_fdiv+0x1d2>
   19b10:	3404      	adds	r4, #4
   19b12:	0123      	lsls	r3, r4, #4
   19b14:	d503      	bpl.n	19b1e <__aeabi_fdiv+0x1de>
   19b16:	0001      	movs	r1, r0
   19b18:	4b2c      	ldr	r3, [pc, #176]	; (19bcc <__aeabi_fdiv+0x28c>)
   19b1a:	3180      	adds	r1, #128	; 0x80
   19b1c:	401c      	ands	r4, r3
   19b1e:	29fe      	cmp	r1, #254	; 0xfe
   19b20:	dd0d      	ble.n	19b3e <__aeabi_fdiv+0x1fe>
   19b22:	2301      	movs	r3, #1
   19b24:	9a01      	ldr	r2, [sp, #4]
   19b26:	21ff      	movs	r1, #255	; 0xff
   19b28:	4013      	ands	r3, r2
   19b2a:	2400      	movs	r4, #0
   19b2c:	e7a4      	b.n	19a78 <__aeabi_fdiv+0x138>
   19b2e:	2380      	movs	r3, #128	; 0x80
   19b30:	03db      	lsls	r3, r3, #15
   19b32:	431c      	orrs	r4, r3
   19b34:	0264      	lsls	r4, r4, #9
   19b36:	0a64      	lsrs	r4, r4, #9
   19b38:	0033      	movs	r3, r6
   19b3a:	21ff      	movs	r1, #255	; 0xff
   19b3c:	e79c      	b.n	19a78 <__aeabi_fdiv+0x138>
   19b3e:	2301      	movs	r3, #1
   19b40:	9a01      	ldr	r2, [sp, #4]
   19b42:	01a4      	lsls	r4, r4, #6
   19b44:	0a64      	lsrs	r4, r4, #9
   19b46:	b2c9      	uxtb	r1, r1
   19b48:	4013      	ands	r3, r2
   19b4a:	e795      	b.n	19a78 <__aeabi_fdiv+0x138>
   19b4c:	1b1b      	subs	r3, r3, r4
   19b4e:	261a      	movs	r6, #26
   19b50:	2101      	movs	r1, #1
   19b52:	e7c2      	b.n	19ada <__aeabi_fdiv+0x19a>
   19b54:	9b00      	ldr	r3, [sp, #0]
   19b56:	468b      	mov	fp, r1
   19b58:	469a      	mov	sl, r3
   19b5a:	2400      	movs	r4, #0
   19b5c:	e74c      	b.n	199f8 <__aeabi_fdiv+0xb8>
   19b5e:	0263      	lsls	r3, r4, #9
   19b60:	d5e5      	bpl.n	19b2e <__aeabi_fdiv+0x1ee>
   19b62:	2500      	movs	r5, #0
   19b64:	2480      	movs	r4, #128	; 0x80
   19b66:	03e4      	lsls	r4, r4, #15
   19b68:	432c      	orrs	r4, r5
   19b6a:	0264      	lsls	r4, r4, #9
   19b6c:	0a64      	lsrs	r4, r4, #9
   19b6e:	9b00      	ldr	r3, [sp, #0]
   19b70:	21ff      	movs	r1, #255	; 0xff
   19b72:	e781      	b.n	19a78 <__aeabi_fdiv+0x138>
   19b74:	9501      	str	r5, [sp, #4]
   19b76:	e7c1      	b.n	19afc <__aeabi_fdiv+0x1bc>
   19b78:	0023      	movs	r3, r4
   19b7a:	2020      	movs	r0, #32
   19b7c:	40cb      	lsrs	r3, r1
   19b7e:	1a41      	subs	r1, r0, r1
   19b80:	408c      	lsls	r4, r1
   19b82:	1e61      	subs	r1, r4, #1
   19b84:	418c      	sbcs	r4, r1
   19b86:	431c      	orrs	r4, r3
   19b88:	0763      	lsls	r3, r4, #29
   19b8a:	d004      	beq.n	19b96 <__aeabi_fdiv+0x256>
   19b8c:	230f      	movs	r3, #15
   19b8e:	4023      	ands	r3, r4
   19b90:	2b04      	cmp	r3, #4
   19b92:	d000      	beq.n	19b96 <__aeabi_fdiv+0x256>
   19b94:	3404      	adds	r4, #4
   19b96:	0163      	lsls	r3, r4, #5
   19b98:	d505      	bpl.n	19ba6 <__aeabi_fdiv+0x266>
   19b9a:	2301      	movs	r3, #1
   19b9c:	9a01      	ldr	r2, [sp, #4]
   19b9e:	2101      	movs	r1, #1
   19ba0:	4013      	ands	r3, r2
   19ba2:	2400      	movs	r4, #0
   19ba4:	e768      	b.n	19a78 <__aeabi_fdiv+0x138>
   19ba6:	2301      	movs	r3, #1
   19ba8:	9a01      	ldr	r2, [sp, #4]
   19baa:	01a4      	lsls	r4, r4, #6
   19bac:	0a64      	lsrs	r4, r4, #9
   19bae:	4013      	ands	r3, r2
   19bb0:	2100      	movs	r1, #0
   19bb2:	e761      	b.n	19a78 <__aeabi_fdiv+0x138>
   19bb4:	2380      	movs	r3, #128	; 0x80
   19bb6:	03db      	lsls	r3, r3, #15
   19bb8:	431c      	orrs	r4, r3
   19bba:	0264      	lsls	r4, r4, #9
   19bbc:	0a64      	lsrs	r4, r4, #9
   19bbe:	4653      	mov	r3, sl
   19bc0:	21ff      	movs	r1, #255	; 0xff
   19bc2:	e759      	b.n	19a78 <__aeabi_fdiv+0x138>
   19bc4:	0001cb94 	.word	0x0001cb94
   19bc8:	0001cbd4 	.word	0x0001cbd4
   19bcc:	f7ffffff 	.word	0xf7ffffff

00019bd0 <__eqsf2>:
   19bd0:	b570      	push	{r4, r5, r6, lr}
   19bd2:	0042      	lsls	r2, r0, #1
   19bd4:	0245      	lsls	r5, r0, #9
   19bd6:	024e      	lsls	r6, r1, #9
   19bd8:	004c      	lsls	r4, r1, #1
   19bda:	0fc3      	lsrs	r3, r0, #31
   19bdc:	0a6d      	lsrs	r5, r5, #9
   19bde:	0e12      	lsrs	r2, r2, #24
   19be0:	0a76      	lsrs	r6, r6, #9
   19be2:	0e24      	lsrs	r4, r4, #24
   19be4:	0fc9      	lsrs	r1, r1, #31
   19be6:	2001      	movs	r0, #1
   19be8:	2aff      	cmp	r2, #255	; 0xff
   19bea:	d006      	beq.n	19bfa <__eqsf2+0x2a>
   19bec:	2cff      	cmp	r4, #255	; 0xff
   19bee:	d003      	beq.n	19bf8 <__eqsf2+0x28>
   19bf0:	42a2      	cmp	r2, r4
   19bf2:	d101      	bne.n	19bf8 <__eqsf2+0x28>
   19bf4:	42b5      	cmp	r5, r6
   19bf6:	d006      	beq.n	19c06 <__eqsf2+0x36>
   19bf8:	bd70      	pop	{r4, r5, r6, pc}
   19bfa:	2d00      	cmp	r5, #0
   19bfc:	d1fc      	bne.n	19bf8 <__eqsf2+0x28>
   19bfe:	2cff      	cmp	r4, #255	; 0xff
   19c00:	d1fa      	bne.n	19bf8 <__eqsf2+0x28>
   19c02:	2e00      	cmp	r6, #0
   19c04:	d1f8      	bne.n	19bf8 <__eqsf2+0x28>
   19c06:	428b      	cmp	r3, r1
   19c08:	d006      	beq.n	19c18 <__eqsf2+0x48>
   19c0a:	2001      	movs	r0, #1
   19c0c:	2a00      	cmp	r2, #0
   19c0e:	d1f3      	bne.n	19bf8 <__eqsf2+0x28>
   19c10:	0028      	movs	r0, r5
   19c12:	1e45      	subs	r5, r0, #1
   19c14:	41a8      	sbcs	r0, r5
   19c16:	e7ef      	b.n	19bf8 <__eqsf2+0x28>
   19c18:	2000      	movs	r0, #0
   19c1a:	e7ed      	b.n	19bf8 <__eqsf2+0x28>

00019c1c <__gesf2>:
   19c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c1e:	0042      	lsls	r2, r0, #1
   19c20:	0245      	lsls	r5, r0, #9
   19c22:	024c      	lsls	r4, r1, #9
   19c24:	0fc3      	lsrs	r3, r0, #31
   19c26:	0048      	lsls	r0, r1, #1
   19c28:	0a6d      	lsrs	r5, r5, #9
   19c2a:	0e12      	lsrs	r2, r2, #24
   19c2c:	0a64      	lsrs	r4, r4, #9
   19c2e:	0e00      	lsrs	r0, r0, #24
   19c30:	0fc9      	lsrs	r1, r1, #31
   19c32:	2aff      	cmp	r2, #255	; 0xff
   19c34:	d01e      	beq.n	19c74 <__gesf2+0x58>
   19c36:	28ff      	cmp	r0, #255	; 0xff
   19c38:	d021      	beq.n	19c7e <__gesf2+0x62>
   19c3a:	2a00      	cmp	r2, #0
   19c3c:	d10a      	bne.n	19c54 <__gesf2+0x38>
   19c3e:	426e      	negs	r6, r5
   19c40:	416e      	adcs	r6, r5
   19c42:	b2f6      	uxtb	r6, r6
   19c44:	2800      	cmp	r0, #0
   19c46:	d10f      	bne.n	19c68 <__gesf2+0x4c>
   19c48:	2c00      	cmp	r4, #0
   19c4a:	d10d      	bne.n	19c68 <__gesf2+0x4c>
   19c4c:	2000      	movs	r0, #0
   19c4e:	2d00      	cmp	r5, #0
   19c50:	d009      	beq.n	19c66 <__gesf2+0x4a>
   19c52:	e005      	b.n	19c60 <__gesf2+0x44>
   19c54:	2800      	cmp	r0, #0
   19c56:	d101      	bne.n	19c5c <__gesf2+0x40>
   19c58:	2c00      	cmp	r4, #0
   19c5a:	d001      	beq.n	19c60 <__gesf2+0x44>
   19c5c:	428b      	cmp	r3, r1
   19c5e:	d011      	beq.n	19c84 <__gesf2+0x68>
   19c60:	2101      	movs	r1, #1
   19c62:	4258      	negs	r0, r3
   19c64:	4308      	orrs	r0, r1
   19c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c68:	2e00      	cmp	r6, #0
   19c6a:	d0f7      	beq.n	19c5c <__gesf2+0x40>
   19c6c:	2001      	movs	r0, #1
   19c6e:	3901      	subs	r1, #1
   19c70:	4308      	orrs	r0, r1
   19c72:	e7f8      	b.n	19c66 <__gesf2+0x4a>
   19c74:	2d00      	cmp	r5, #0
   19c76:	d0de      	beq.n	19c36 <__gesf2+0x1a>
   19c78:	2002      	movs	r0, #2
   19c7a:	4240      	negs	r0, r0
   19c7c:	e7f3      	b.n	19c66 <__gesf2+0x4a>
   19c7e:	2c00      	cmp	r4, #0
   19c80:	d0db      	beq.n	19c3a <__gesf2+0x1e>
   19c82:	e7f9      	b.n	19c78 <__gesf2+0x5c>
   19c84:	4282      	cmp	r2, r0
   19c86:	dceb      	bgt.n	19c60 <__gesf2+0x44>
   19c88:	db04      	blt.n	19c94 <__gesf2+0x78>
   19c8a:	42a5      	cmp	r5, r4
   19c8c:	d8e8      	bhi.n	19c60 <__gesf2+0x44>
   19c8e:	2000      	movs	r0, #0
   19c90:	42a5      	cmp	r5, r4
   19c92:	d2e8      	bcs.n	19c66 <__gesf2+0x4a>
   19c94:	2101      	movs	r1, #1
   19c96:	1e58      	subs	r0, r3, #1
   19c98:	4308      	orrs	r0, r1
   19c9a:	e7e4      	b.n	19c66 <__gesf2+0x4a>

00019c9c <__lesf2>:
   19c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c9e:	0042      	lsls	r2, r0, #1
   19ca0:	024d      	lsls	r5, r1, #9
   19ca2:	004c      	lsls	r4, r1, #1
   19ca4:	0246      	lsls	r6, r0, #9
   19ca6:	0a76      	lsrs	r6, r6, #9
   19ca8:	0e12      	lsrs	r2, r2, #24
   19caa:	0fc3      	lsrs	r3, r0, #31
   19cac:	0a6d      	lsrs	r5, r5, #9
   19cae:	0e24      	lsrs	r4, r4, #24
   19cb0:	0fc9      	lsrs	r1, r1, #31
   19cb2:	2aff      	cmp	r2, #255	; 0xff
   19cb4:	d016      	beq.n	19ce4 <__lesf2+0x48>
   19cb6:	2cff      	cmp	r4, #255	; 0xff
   19cb8:	d018      	beq.n	19cec <__lesf2+0x50>
   19cba:	2a00      	cmp	r2, #0
   19cbc:	d10a      	bne.n	19cd4 <__lesf2+0x38>
   19cbe:	4270      	negs	r0, r6
   19cc0:	4170      	adcs	r0, r6
   19cc2:	b2c0      	uxtb	r0, r0
   19cc4:	2c00      	cmp	r4, #0
   19cc6:	d015      	beq.n	19cf4 <__lesf2+0x58>
   19cc8:	2800      	cmp	r0, #0
   19cca:	d005      	beq.n	19cd8 <__lesf2+0x3c>
   19ccc:	2001      	movs	r0, #1
   19cce:	3901      	subs	r1, #1
   19cd0:	4308      	orrs	r0, r1
   19cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cd4:	2c00      	cmp	r4, #0
   19cd6:	d013      	beq.n	19d00 <__lesf2+0x64>
   19cd8:	4299      	cmp	r1, r3
   19cda:	d014      	beq.n	19d06 <__lesf2+0x6a>
   19cdc:	2001      	movs	r0, #1
   19cde:	425b      	negs	r3, r3
   19ce0:	4318      	orrs	r0, r3
   19ce2:	e7f6      	b.n	19cd2 <__lesf2+0x36>
   19ce4:	2002      	movs	r0, #2
   19ce6:	2e00      	cmp	r6, #0
   19ce8:	d1f3      	bne.n	19cd2 <__lesf2+0x36>
   19cea:	e7e4      	b.n	19cb6 <__lesf2+0x1a>
   19cec:	2002      	movs	r0, #2
   19cee:	2d00      	cmp	r5, #0
   19cf0:	d1ef      	bne.n	19cd2 <__lesf2+0x36>
   19cf2:	e7e2      	b.n	19cba <__lesf2+0x1e>
   19cf4:	2d00      	cmp	r5, #0
   19cf6:	d1e7      	bne.n	19cc8 <__lesf2+0x2c>
   19cf8:	2000      	movs	r0, #0
   19cfa:	2e00      	cmp	r6, #0
   19cfc:	d0e9      	beq.n	19cd2 <__lesf2+0x36>
   19cfe:	e7ed      	b.n	19cdc <__lesf2+0x40>
   19d00:	2d00      	cmp	r5, #0
   19d02:	d1e9      	bne.n	19cd8 <__lesf2+0x3c>
   19d04:	e7ea      	b.n	19cdc <__lesf2+0x40>
   19d06:	42a2      	cmp	r2, r4
   19d08:	dc06      	bgt.n	19d18 <__lesf2+0x7c>
   19d0a:	dbdf      	blt.n	19ccc <__lesf2+0x30>
   19d0c:	42ae      	cmp	r6, r5
   19d0e:	d803      	bhi.n	19d18 <__lesf2+0x7c>
   19d10:	2000      	movs	r0, #0
   19d12:	42ae      	cmp	r6, r5
   19d14:	d3da      	bcc.n	19ccc <__lesf2+0x30>
   19d16:	e7dc      	b.n	19cd2 <__lesf2+0x36>
   19d18:	2001      	movs	r0, #1
   19d1a:	4249      	negs	r1, r1
   19d1c:	4308      	orrs	r0, r1
   19d1e:	e7d8      	b.n	19cd2 <__lesf2+0x36>

00019d20 <__aeabi_fmul>:
   19d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d22:	4657      	mov	r7, sl
   19d24:	464e      	mov	r6, r9
   19d26:	4645      	mov	r5, r8
   19d28:	46de      	mov	lr, fp
   19d2a:	b5e0      	push	{r5, r6, r7, lr}
   19d2c:	0247      	lsls	r7, r0, #9
   19d2e:	0046      	lsls	r6, r0, #1
   19d30:	4688      	mov	r8, r1
   19d32:	0a7f      	lsrs	r7, r7, #9
   19d34:	0e36      	lsrs	r6, r6, #24
   19d36:	0fc4      	lsrs	r4, r0, #31
   19d38:	2e00      	cmp	r6, #0
   19d3a:	d047      	beq.n	19dcc <__aeabi_fmul+0xac>
   19d3c:	2eff      	cmp	r6, #255	; 0xff
   19d3e:	d024      	beq.n	19d8a <__aeabi_fmul+0x6a>
   19d40:	00fb      	lsls	r3, r7, #3
   19d42:	2780      	movs	r7, #128	; 0x80
   19d44:	04ff      	lsls	r7, r7, #19
   19d46:	431f      	orrs	r7, r3
   19d48:	2300      	movs	r3, #0
   19d4a:	4699      	mov	r9, r3
   19d4c:	469a      	mov	sl, r3
   19d4e:	3e7f      	subs	r6, #127	; 0x7f
   19d50:	4643      	mov	r3, r8
   19d52:	025d      	lsls	r5, r3, #9
   19d54:	0058      	lsls	r0, r3, #1
   19d56:	0fdb      	lsrs	r3, r3, #31
   19d58:	0a6d      	lsrs	r5, r5, #9
   19d5a:	0e00      	lsrs	r0, r0, #24
   19d5c:	4698      	mov	r8, r3
   19d5e:	d043      	beq.n	19de8 <__aeabi_fmul+0xc8>
   19d60:	28ff      	cmp	r0, #255	; 0xff
   19d62:	d03b      	beq.n	19ddc <__aeabi_fmul+0xbc>
   19d64:	00eb      	lsls	r3, r5, #3
   19d66:	2580      	movs	r5, #128	; 0x80
   19d68:	2200      	movs	r2, #0
   19d6a:	04ed      	lsls	r5, r5, #19
   19d6c:	431d      	orrs	r5, r3
   19d6e:	387f      	subs	r0, #127	; 0x7f
   19d70:	1836      	adds	r6, r6, r0
   19d72:	1c73      	adds	r3, r6, #1
   19d74:	4641      	mov	r1, r8
   19d76:	469b      	mov	fp, r3
   19d78:	464b      	mov	r3, r9
   19d7a:	4061      	eors	r1, r4
   19d7c:	4313      	orrs	r3, r2
   19d7e:	2b0f      	cmp	r3, #15
   19d80:	d864      	bhi.n	19e4c <__aeabi_fmul+0x12c>
   19d82:	4875      	ldr	r0, [pc, #468]	; (19f58 <__aeabi_fmul+0x238>)
   19d84:	009b      	lsls	r3, r3, #2
   19d86:	58c3      	ldr	r3, [r0, r3]
   19d88:	469f      	mov	pc, r3
   19d8a:	2f00      	cmp	r7, #0
   19d8c:	d142      	bne.n	19e14 <__aeabi_fmul+0xf4>
   19d8e:	2308      	movs	r3, #8
   19d90:	4699      	mov	r9, r3
   19d92:	3b06      	subs	r3, #6
   19d94:	26ff      	movs	r6, #255	; 0xff
   19d96:	469a      	mov	sl, r3
   19d98:	e7da      	b.n	19d50 <__aeabi_fmul+0x30>
   19d9a:	4641      	mov	r1, r8
   19d9c:	2a02      	cmp	r2, #2
   19d9e:	d028      	beq.n	19df2 <__aeabi_fmul+0xd2>
   19da0:	2a03      	cmp	r2, #3
   19da2:	d100      	bne.n	19da6 <__aeabi_fmul+0x86>
   19da4:	e0ce      	b.n	19f44 <__aeabi_fmul+0x224>
   19da6:	2a01      	cmp	r2, #1
   19da8:	d000      	beq.n	19dac <__aeabi_fmul+0x8c>
   19daa:	e0ac      	b.n	19f06 <__aeabi_fmul+0x1e6>
   19dac:	4011      	ands	r1, r2
   19dae:	2000      	movs	r0, #0
   19db0:	2200      	movs	r2, #0
   19db2:	b2cc      	uxtb	r4, r1
   19db4:	0240      	lsls	r0, r0, #9
   19db6:	05d2      	lsls	r2, r2, #23
   19db8:	0a40      	lsrs	r0, r0, #9
   19dba:	07e4      	lsls	r4, r4, #31
   19dbc:	4310      	orrs	r0, r2
   19dbe:	4320      	orrs	r0, r4
   19dc0:	bc3c      	pop	{r2, r3, r4, r5}
   19dc2:	4690      	mov	r8, r2
   19dc4:	4699      	mov	r9, r3
   19dc6:	46a2      	mov	sl, r4
   19dc8:	46ab      	mov	fp, r5
   19dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19dcc:	2f00      	cmp	r7, #0
   19dce:	d115      	bne.n	19dfc <__aeabi_fmul+0xdc>
   19dd0:	2304      	movs	r3, #4
   19dd2:	4699      	mov	r9, r3
   19dd4:	3b03      	subs	r3, #3
   19dd6:	2600      	movs	r6, #0
   19dd8:	469a      	mov	sl, r3
   19dda:	e7b9      	b.n	19d50 <__aeabi_fmul+0x30>
   19ddc:	20ff      	movs	r0, #255	; 0xff
   19dde:	2202      	movs	r2, #2
   19de0:	2d00      	cmp	r5, #0
   19de2:	d0c5      	beq.n	19d70 <__aeabi_fmul+0x50>
   19de4:	2203      	movs	r2, #3
   19de6:	e7c3      	b.n	19d70 <__aeabi_fmul+0x50>
   19de8:	2d00      	cmp	r5, #0
   19dea:	d119      	bne.n	19e20 <__aeabi_fmul+0x100>
   19dec:	2000      	movs	r0, #0
   19dee:	2201      	movs	r2, #1
   19df0:	e7be      	b.n	19d70 <__aeabi_fmul+0x50>
   19df2:	2401      	movs	r4, #1
   19df4:	22ff      	movs	r2, #255	; 0xff
   19df6:	400c      	ands	r4, r1
   19df8:	2000      	movs	r0, #0
   19dfa:	e7db      	b.n	19db4 <__aeabi_fmul+0x94>
   19dfc:	0038      	movs	r0, r7
   19dfe:	f002 f965 	bl	1c0cc <__clzsi2>
   19e02:	2676      	movs	r6, #118	; 0x76
   19e04:	1f43      	subs	r3, r0, #5
   19e06:	409f      	lsls	r7, r3
   19e08:	2300      	movs	r3, #0
   19e0a:	4276      	negs	r6, r6
   19e0c:	1a36      	subs	r6, r6, r0
   19e0e:	4699      	mov	r9, r3
   19e10:	469a      	mov	sl, r3
   19e12:	e79d      	b.n	19d50 <__aeabi_fmul+0x30>
   19e14:	230c      	movs	r3, #12
   19e16:	4699      	mov	r9, r3
   19e18:	3b09      	subs	r3, #9
   19e1a:	26ff      	movs	r6, #255	; 0xff
   19e1c:	469a      	mov	sl, r3
   19e1e:	e797      	b.n	19d50 <__aeabi_fmul+0x30>
   19e20:	0028      	movs	r0, r5
   19e22:	f002 f953 	bl	1c0cc <__clzsi2>
   19e26:	1f43      	subs	r3, r0, #5
   19e28:	409d      	lsls	r5, r3
   19e2a:	2376      	movs	r3, #118	; 0x76
   19e2c:	425b      	negs	r3, r3
   19e2e:	1a18      	subs	r0, r3, r0
   19e30:	2200      	movs	r2, #0
   19e32:	e79d      	b.n	19d70 <__aeabi_fmul+0x50>
   19e34:	2080      	movs	r0, #128	; 0x80
   19e36:	2400      	movs	r4, #0
   19e38:	03c0      	lsls	r0, r0, #15
   19e3a:	22ff      	movs	r2, #255	; 0xff
   19e3c:	e7ba      	b.n	19db4 <__aeabi_fmul+0x94>
   19e3e:	003d      	movs	r5, r7
   19e40:	4652      	mov	r2, sl
   19e42:	e7ab      	b.n	19d9c <__aeabi_fmul+0x7c>
   19e44:	003d      	movs	r5, r7
   19e46:	0021      	movs	r1, r4
   19e48:	4652      	mov	r2, sl
   19e4a:	e7a7      	b.n	19d9c <__aeabi_fmul+0x7c>
   19e4c:	0c3b      	lsrs	r3, r7, #16
   19e4e:	469c      	mov	ip, r3
   19e50:	042a      	lsls	r2, r5, #16
   19e52:	0c12      	lsrs	r2, r2, #16
   19e54:	0c2b      	lsrs	r3, r5, #16
   19e56:	0014      	movs	r4, r2
   19e58:	4660      	mov	r0, ip
   19e5a:	4665      	mov	r5, ip
   19e5c:	043f      	lsls	r7, r7, #16
   19e5e:	0c3f      	lsrs	r7, r7, #16
   19e60:	437c      	muls	r4, r7
   19e62:	4342      	muls	r2, r0
   19e64:	435d      	muls	r5, r3
   19e66:	437b      	muls	r3, r7
   19e68:	0c27      	lsrs	r7, r4, #16
   19e6a:	189b      	adds	r3, r3, r2
   19e6c:	18ff      	adds	r7, r7, r3
   19e6e:	42ba      	cmp	r2, r7
   19e70:	d903      	bls.n	19e7a <__aeabi_fmul+0x15a>
   19e72:	2380      	movs	r3, #128	; 0x80
   19e74:	025b      	lsls	r3, r3, #9
   19e76:	469c      	mov	ip, r3
   19e78:	4465      	add	r5, ip
   19e7a:	0424      	lsls	r4, r4, #16
   19e7c:	043a      	lsls	r2, r7, #16
   19e7e:	0c24      	lsrs	r4, r4, #16
   19e80:	1912      	adds	r2, r2, r4
   19e82:	0193      	lsls	r3, r2, #6
   19e84:	1e5c      	subs	r4, r3, #1
   19e86:	41a3      	sbcs	r3, r4
   19e88:	0c3f      	lsrs	r7, r7, #16
   19e8a:	0e92      	lsrs	r2, r2, #26
   19e8c:	197d      	adds	r5, r7, r5
   19e8e:	431a      	orrs	r2, r3
   19e90:	01ad      	lsls	r5, r5, #6
   19e92:	4315      	orrs	r5, r2
   19e94:	012b      	lsls	r3, r5, #4
   19e96:	d504      	bpl.n	19ea2 <__aeabi_fmul+0x182>
   19e98:	2301      	movs	r3, #1
   19e9a:	465e      	mov	r6, fp
   19e9c:	086a      	lsrs	r2, r5, #1
   19e9e:	401d      	ands	r5, r3
   19ea0:	4315      	orrs	r5, r2
   19ea2:	0032      	movs	r2, r6
   19ea4:	327f      	adds	r2, #127	; 0x7f
   19ea6:	2a00      	cmp	r2, #0
   19ea8:	dd25      	ble.n	19ef6 <__aeabi_fmul+0x1d6>
   19eaa:	076b      	lsls	r3, r5, #29
   19eac:	d004      	beq.n	19eb8 <__aeabi_fmul+0x198>
   19eae:	230f      	movs	r3, #15
   19eb0:	402b      	ands	r3, r5
   19eb2:	2b04      	cmp	r3, #4
   19eb4:	d000      	beq.n	19eb8 <__aeabi_fmul+0x198>
   19eb6:	3504      	adds	r5, #4
   19eb8:	012b      	lsls	r3, r5, #4
   19eba:	d503      	bpl.n	19ec4 <__aeabi_fmul+0x1a4>
   19ebc:	0032      	movs	r2, r6
   19ebe:	4b27      	ldr	r3, [pc, #156]	; (19f5c <__aeabi_fmul+0x23c>)
   19ec0:	3280      	adds	r2, #128	; 0x80
   19ec2:	401d      	ands	r5, r3
   19ec4:	2afe      	cmp	r2, #254	; 0xfe
   19ec6:	dc94      	bgt.n	19df2 <__aeabi_fmul+0xd2>
   19ec8:	2401      	movs	r4, #1
   19eca:	01a8      	lsls	r0, r5, #6
   19ecc:	0a40      	lsrs	r0, r0, #9
   19ece:	b2d2      	uxtb	r2, r2
   19ed0:	400c      	ands	r4, r1
   19ed2:	e76f      	b.n	19db4 <__aeabi_fmul+0x94>
   19ed4:	2080      	movs	r0, #128	; 0x80
   19ed6:	03c0      	lsls	r0, r0, #15
   19ed8:	4207      	tst	r7, r0
   19eda:	d007      	beq.n	19eec <__aeabi_fmul+0x1cc>
   19edc:	4205      	tst	r5, r0
   19ede:	d105      	bne.n	19eec <__aeabi_fmul+0x1cc>
   19ee0:	4328      	orrs	r0, r5
   19ee2:	0240      	lsls	r0, r0, #9
   19ee4:	0a40      	lsrs	r0, r0, #9
   19ee6:	4644      	mov	r4, r8
   19ee8:	22ff      	movs	r2, #255	; 0xff
   19eea:	e763      	b.n	19db4 <__aeabi_fmul+0x94>
   19eec:	4338      	orrs	r0, r7
   19eee:	0240      	lsls	r0, r0, #9
   19ef0:	0a40      	lsrs	r0, r0, #9
   19ef2:	22ff      	movs	r2, #255	; 0xff
   19ef4:	e75e      	b.n	19db4 <__aeabi_fmul+0x94>
   19ef6:	2401      	movs	r4, #1
   19ef8:	1aa3      	subs	r3, r4, r2
   19efa:	2b1b      	cmp	r3, #27
   19efc:	dd05      	ble.n	19f0a <__aeabi_fmul+0x1ea>
   19efe:	400c      	ands	r4, r1
   19f00:	2200      	movs	r2, #0
   19f02:	2000      	movs	r0, #0
   19f04:	e756      	b.n	19db4 <__aeabi_fmul+0x94>
   19f06:	465e      	mov	r6, fp
   19f08:	e7cb      	b.n	19ea2 <__aeabi_fmul+0x182>
   19f0a:	002a      	movs	r2, r5
   19f0c:	2020      	movs	r0, #32
   19f0e:	40da      	lsrs	r2, r3
   19f10:	1ac3      	subs	r3, r0, r3
   19f12:	409d      	lsls	r5, r3
   19f14:	002b      	movs	r3, r5
   19f16:	1e5d      	subs	r5, r3, #1
   19f18:	41ab      	sbcs	r3, r5
   19f1a:	4313      	orrs	r3, r2
   19f1c:	075a      	lsls	r2, r3, #29
   19f1e:	d004      	beq.n	19f2a <__aeabi_fmul+0x20a>
   19f20:	220f      	movs	r2, #15
   19f22:	401a      	ands	r2, r3
   19f24:	2a04      	cmp	r2, #4
   19f26:	d000      	beq.n	19f2a <__aeabi_fmul+0x20a>
   19f28:	3304      	adds	r3, #4
   19f2a:	015a      	lsls	r2, r3, #5
   19f2c:	d504      	bpl.n	19f38 <__aeabi_fmul+0x218>
   19f2e:	2401      	movs	r4, #1
   19f30:	2201      	movs	r2, #1
   19f32:	400c      	ands	r4, r1
   19f34:	2000      	movs	r0, #0
   19f36:	e73d      	b.n	19db4 <__aeabi_fmul+0x94>
   19f38:	2401      	movs	r4, #1
   19f3a:	019b      	lsls	r3, r3, #6
   19f3c:	0a58      	lsrs	r0, r3, #9
   19f3e:	400c      	ands	r4, r1
   19f40:	2200      	movs	r2, #0
   19f42:	e737      	b.n	19db4 <__aeabi_fmul+0x94>
   19f44:	2080      	movs	r0, #128	; 0x80
   19f46:	2401      	movs	r4, #1
   19f48:	03c0      	lsls	r0, r0, #15
   19f4a:	4328      	orrs	r0, r5
   19f4c:	0240      	lsls	r0, r0, #9
   19f4e:	0a40      	lsrs	r0, r0, #9
   19f50:	400c      	ands	r4, r1
   19f52:	22ff      	movs	r2, #255	; 0xff
   19f54:	e72e      	b.n	19db4 <__aeabi_fmul+0x94>
   19f56:	46c0      	nop			; (mov r8, r8)
   19f58:	0001cc14 	.word	0x0001cc14
   19f5c:	f7ffffff 	.word	0xf7ffffff

00019f60 <__aeabi_fsub>:
   19f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f62:	464f      	mov	r7, r9
   19f64:	46d6      	mov	lr, sl
   19f66:	4646      	mov	r6, r8
   19f68:	0044      	lsls	r4, r0, #1
   19f6a:	b5c0      	push	{r6, r7, lr}
   19f6c:	0fc2      	lsrs	r2, r0, #31
   19f6e:	0247      	lsls	r7, r0, #9
   19f70:	0248      	lsls	r0, r1, #9
   19f72:	0a40      	lsrs	r0, r0, #9
   19f74:	4684      	mov	ip, r0
   19f76:	4666      	mov	r6, ip
   19f78:	0a7b      	lsrs	r3, r7, #9
   19f7a:	0048      	lsls	r0, r1, #1
   19f7c:	0fc9      	lsrs	r1, r1, #31
   19f7e:	469a      	mov	sl, r3
   19f80:	0e24      	lsrs	r4, r4, #24
   19f82:	0015      	movs	r5, r2
   19f84:	00db      	lsls	r3, r3, #3
   19f86:	0e00      	lsrs	r0, r0, #24
   19f88:	4689      	mov	r9, r1
   19f8a:	00f6      	lsls	r6, r6, #3
   19f8c:	28ff      	cmp	r0, #255	; 0xff
   19f8e:	d100      	bne.n	19f92 <__aeabi_fsub+0x32>
   19f90:	e08f      	b.n	1a0b2 <__aeabi_fsub+0x152>
   19f92:	2101      	movs	r1, #1
   19f94:	464f      	mov	r7, r9
   19f96:	404f      	eors	r7, r1
   19f98:	0039      	movs	r1, r7
   19f9a:	4291      	cmp	r1, r2
   19f9c:	d066      	beq.n	1a06c <__aeabi_fsub+0x10c>
   19f9e:	1a22      	subs	r2, r4, r0
   19fa0:	2a00      	cmp	r2, #0
   19fa2:	dc00      	bgt.n	19fa6 <__aeabi_fsub+0x46>
   19fa4:	e09d      	b.n	1a0e2 <__aeabi_fsub+0x182>
   19fa6:	2800      	cmp	r0, #0
   19fa8:	d13d      	bne.n	1a026 <__aeabi_fsub+0xc6>
   19faa:	2e00      	cmp	r6, #0
   19fac:	d100      	bne.n	19fb0 <__aeabi_fsub+0x50>
   19fae:	e08b      	b.n	1a0c8 <__aeabi_fsub+0x168>
   19fb0:	1e51      	subs	r1, r2, #1
   19fb2:	2900      	cmp	r1, #0
   19fb4:	d000      	beq.n	19fb8 <__aeabi_fsub+0x58>
   19fb6:	e0b5      	b.n	1a124 <__aeabi_fsub+0x1c4>
   19fb8:	2401      	movs	r4, #1
   19fba:	1b9b      	subs	r3, r3, r6
   19fbc:	015a      	lsls	r2, r3, #5
   19fbe:	d544      	bpl.n	1a04a <__aeabi_fsub+0xea>
   19fc0:	019b      	lsls	r3, r3, #6
   19fc2:	099f      	lsrs	r7, r3, #6
   19fc4:	0038      	movs	r0, r7
   19fc6:	f002 f881 	bl	1c0cc <__clzsi2>
   19fca:	3805      	subs	r0, #5
   19fcc:	4087      	lsls	r7, r0
   19fce:	4284      	cmp	r4, r0
   19fd0:	dd00      	ble.n	19fd4 <__aeabi_fsub+0x74>
   19fd2:	e096      	b.n	1a102 <__aeabi_fsub+0x1a2>
   19fd4:	1b04      	subs	r4, r0, r4
   19fd6:	003a      	movs	r2, r7
   19fd8:	2020      	movs	r0, #32
   19fda:	3401      	adds	r4, #1
   19fdc:	40e2      	lsrs	r2, r4
   19fde:	1b04      	subs	r4, r0, r4
   19fe0:	40a7      	lsls	r7, r4
   19fe2:	003b      	movs	r3, r7
   19fe4:	1e5f      	subs	r7, r3, #1
   19fe6:	41bb      	sbcs	r3, r7
   19fe8:	2400      	movs	r4, #0
   19fea:	4313      	orrs	r3, r2
   19fec:	075a      	lsls	r2, r3, #29
   19fee:	d004      	beq.n	19ffa <__aeabi_fsub+0x9a>
   19ff0:	220f      	movs	r2, #15
   19ff2:	401a      	ands	r2, r3
   19ff4:	2a04      	cmp	r2, #4
   19ff6:	d000      	beq.n	19ffa <__aeabi_fsub+0x9a>
   19ff8:	3304      	adds	r3, #4
   19ffa:	015a      	lsls	r2, r3, #5
   19ffc:	d527      	bpl.n	1a04e <__aeabi_fsub+0xee>
   19ffe:	3401      	adds	r4, #1
   1a000:	2cff      	cmp	r4, #255	; 0xff
   1a002:	d100      	bne.n	1a006 <__aeabi_fsub+0xa6>
   1a004:	e079      	b.n	1a0fa <__aeabi_fsub+0x19a>
   1a006:	2201      	movs	r2, #1
   1a008:	019b      	lsls	r3, r3, #6
   1a00a:	0a5b      	lsrs	r3, r3, #9
   1a00c:	b2e4      	uxtb	r4, r4
   1a00e:	402a      	ands	r2, r5
   1a010:	025b      	lsls	r3, r3, #9
   1a012:	05e4      	lsls	r4, r4, #23
   1a014:	0a58      	lsrs	r0, r3, #9
   1a016:	07d2      	lsls	r2, r2, #31
   1a018:	4320      	orrs	r0, r4
   1a01a:	4310      	orrs	r0, r2
   1a01c:	bc1c      	pop	{r2, r3, r4}
   1a01e:	4690      	mov	r8, r2
   1a020:	4699      	mov	r9, r3
   1a022:	46a2      	mov	sl, r4
   1a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a026:	2cff      	cmp	r4, #255	; 0xff
   1a028:	d0e0      	beq.n	19fec <__aeabi_fsub+0x8c>
   1a02a:	2180      	movs	r1, #128	; 0x80
   1a02c:	04c9      	lsls	r1, r1, #19
   1a02e:	430e      	orrs	r6, r1
   1a030:	2a1b      	cmp	r2, #27
   1a032:	dc7b      	bgt.n	1a12c <__aeabi_fsub+0x1cc>
   1a034:	0031      	movs	r1, r6
   1a036:	2020      	movs	r0, #32
   1a038:	40d1      	lsrs	r1, r2
   1a03a:	1a82      	subs	r2, r0, r2
   1a03c:	4096      	lsls	r6, r2
   1a03e:	1e72      	subs	r2, r6, #1
   1a040:	4196      	sbcs	r6, r2
   1a042:	430e      	orrs	r6, r1
   1a044:	1b9b      	subs	r3, r3, r6
   1a046:	015a      	lsls	r2, r3, #5
   1a048:	d4ba      	bmi.n	19fc0 <__aeabi_fsub+0x60>
   1a04a:	075a      	lsls	r2, r3, #29
   1a04c:	d1d0      	bne.n	19ff0 <__aeabi_fsub+0x90>
   1a04e:	2201      	movs	r2, #1
   1a050:	08df      	lsrs	r7, r3, #3
   1a052:	402a      	ands	r2, r5
   1a054:	2cff      	cmp	r4, #255	; 0xff
   1a056:	d133      	bne.n	1a0c0 <__aeabi_fsub+0x160>
   1a058:	2f00      	cmp	r7, #0
   1a05a:	d100      	bne.n	1a05e <__aeabi_fsub+0xfe>
   1a05c:	e0a8      	b.n	1a1b0 <__aeabi_fsub+0x250>
   1a05e:	2380      	movs	r3, #128	; 0x80
   1a060:	03db      	lsls	r3, r3, #15
   1a062:	433b      	orrs	r3, r7
   1a064:	025b      	lsls	r3, r3, #9
   1a066:	0a5b      	lsrs	r3, r3, #9
   1a068:	24ff      	movs	r4, #255	; 0xff
   1a06a:	e7d1      	b.n	1a010 <__aeabi_fsub+0xb0>
   1a06c:	1a21      	subs	r1, r4, r0
   1a06e:	2900      	cmp	r1, #0
   1a070:	dd4c      	ble.n	1a10c <__aeabi_fsub+0x1ac>
   1a072:	2800      	cmp	r0, #0
   1a074:	d02a      	beq.n	1a0cc <__aeabi_fsub+0x16c>
   1a076:	2cff      	cmp	r4, #255	; 0xff
   1a078:	d0b8      	beq.n	19fec <__aeabi_fsub+0x8c>
   1a07a:	2080      	movs	r0, #128	; 0x80
   1a07c:	04c0      	lsls	r0, r0, #19
   1a07e:	4306      	orrs	r6, r0
   1a080:	291b      	cmp	r1, #27
   1a082:	dd00      	ble.n	1a086 <__aeabi_fsub+0x126>
   1a084:	e0af      	b.n	1a1e6 <__aeabi_fsub+0x286>
   1a086:	0030      	movs	r0, r6
   1a088:	2720      	movs	r7, #32
   1a08a:	40c8      	lsrs	r0, r1
   1a08c:	1a79      	subs	r1, r7, r1
   1a08e:	408e      	lsls	r6, r1
   1a090:	1e71      	subs	r1, r6, #1
   1a092:	418e      	sbcs	r6, r1
   1a094:	4306      	orrs	r6, r0
   1a096:	199b      	adds	r3, r3, r6
   1a098:	0159      	lsls	r1, r3, #5
   1a09a:	d5d6      	bpl.n	1a04a <__aeabi_fsub+0xea>
   1a09c:	3401      	adds	r4, #1
   1a09e:	2cff      	cmp	r4, #255	; 0xff
   1a0a0:	d100      	bne.n	1a0a4 <__aeabi_fsub+0x144>
   1a0a2:	e085      	b.n	1a1b0 <__aeabi_fsub+0x250>
   1a0a4:	2201      	movs	r2, #1
   1a0a6:	497a      	ldr	r1, [pc, #488]	; (1a290 <__aeabi_fsub+0x330>)
   1a0a8:	401a      	ands	r2, r3
   1a0aa:	085b      	lsrs	r3, r3, #1
   1a0ac:	400b      	ands	r3, r1
   1a0ae:	4313      	orrs	r3, r2
   1a0b0:	e79c      	b.n	19fec <__aeabi_fsub+0x8c>
   1a0b2:	2e00      	cmp	r6, #0
   1a0b4:	d000      	beq.n	1a0b8 <__aeabi_fsub+0x158>
   1a0b6:	e770      	b.n	19f9a <__aeabi_fsub+0x3a>
   1a0b8:	e76b      	b.n	19f92 <__aeabi_fsub+0x32>
   1a0ba:	1e3b      	subs	r3, r7, #0
   1a0bc:	d1c5      	bne.n	1a04a <__aeabi_fsub+0xea>
   1a0be:	2200      	movs	r2, #0
   1a0c0:	027b      	lsls	r3, r7, #9
   1a0c2:	0a5b      	lsrs	r3, r3, #9
   1a0c4:	b2e4      	uxtb	r4, r4
   1a0c6:	e7a3      	b.n	1a010 <__aeabi_fsub+0xb0>
   1a0c8:	0014      	movs	r4, r2
   1a0ca:	e78f      	b.n	19fec <__aeabi_fsub+0x8c>
   1a0cc:	2e00      	cmp	r6, #0
   1a0ce:	d04d      	beq.n	1a16c <__aeabi_fsub+0x20c>
   1a0d0:	1e48      	subs	r0, r1, #1
   1a0d2:	2800      	cmp	r0, #0
   1a0d4:	d157      	bne.n	1a186 <__aeabi_fsub+0x226>
   1a0d6:	199b      	adds	r3, r3, r6
   1a0d8:	2401      	movs	r4, #1
   1a0da:	015a      	lsls	r2, r3, #5
   1a0dc:	d5b5      	bpl.n	1a04a <__aeabi_fsub+0xea>
   1a0de:	2402      	movs	r4, #2
   1a0e0:	e7e0      	b.n	1a0a4 <__aeabi_fsub+0x144>
   1a0e2:	2a00      	cmp	r2, #0
   1a0e4:	d125      	bne.n	1a132 <__aeabi_fsub+0x1d2>
   1a0e6:	1c62      	adds	r2, r4, #1
   1a0e8:	b2d2      	uxtb	r2, r2
   1a0ea:	2a01      	cmp	r2, #1
   1a0ec:	dd72      	ble.n	1a1d4 <__aeabi_fsub+0x274>
   1a0ee:	1b9f      	subs	r7, r3, r6
   1a0f0:	017a      	lsls	r2, r7, #5
   1a0f2:	d535      	bpl.n	1a160 <__aeabi_fsub+0x200>
   1a0f4:	1af7      	subs	r7, r6, r3
   1a0f6:	000d      	movs	r5, r1
   1a0f8:	e764      	b.n	19fc4 <__aeabi_fsub+0x64>
   1a0fa:	2201      	movs	r2, #1
   1a0fc:	2300      	movs	r3, #0
   1a0fe:	402a      	ands	r2, r5
   1a100:	e786      	b.n	1a010 <__aeabi_fsub+0xb0>
   1a102:	003b      	movs	r3, r7
   1a104:	4a63      	ldr	r2, [pc, #396]	; (1a294 <__aeabi_fsub+0x334>)
   1a106:	1a24      	subs	r4, r4, r0
   1a108:	4013      	ands	r3, r2
   1a10a:	e76f      	b.n	19fec <__aeabi_fsub+0x8c>
   1a10c:	2900      	cmp	r1, #0
   1a10e:	d16c      	bne.n	1a1ea <__aeabi_fsub+0x28a>
   1a110:	1c61      	adds	r1, r4, #1
   1a112:	b2c8      	uxtb	r0, r1
   1a114:	2801      	cmp	r0, #1
   1a116:	dd4e      	ble.n	1a1b6 <__aeabi_fsub+0x256>
   1a118:	29ff      	cmp	r1, #255	; 0xff
   1a11a:	d049      	beq.n	1a1b0 <__aeabi_fsub+0x250>
   1a11c:	199b      	adds	r3, r3, r6
   1a11e:	085b      	lsrs	r3, r3, #1
   1a120:	000c      	movs	r4, r1
   1a122:	e763      	b.n	19fec <__aeabi_fsub+0x8c>
   1a124:	2aff      	cmp	r2, #255	; 0xff
   1a126:	d041      	beq.n	1a1ac <__aeabi_fsub+0x24c>
   1a128:	000a      	movs	r2, r1
   1a12a:	e781      	b.n	1a030 <__aeabi_fsub+0xd0>
   1a12c:	2601      	movs	r6, #1
   1a12e:	1b9b      	subs	r3, r3, r6
   1a130:	e789      	b.n	1a046 <__aeabi_fsub+0xe6>
   1a132:	2c00      	cmp	r4, #0
   1a134:	d01c      	beq.n	1a170 <__aeabi_fsub+0x210>
   1a136:	28ff      	cmp	r0, #255	; 0xff
   1a138:	d021      	beq.n	1a17e <__aeabi_fsub+0x21e>
   1a13a:	2480      	movs	r4, #128	; 0x80
   1a13c:	04e4      	lsls	r4, r4, #19
   1a13e:	4252      	negs	r2, r2
   1a140:	4323      	orrs	r3, r4
   1a142:	2a1b      	cmp	r2, #27
   1a144:	dd00      	ble.n	1a148 <__aeabi_fsub+0x1e8>
   1a146:	e096      	b.n	1a276 <__aeabi_fsub+0x316>
   1a148:	001c      	movs	r4, r3
   1a14a:	2520      	movs	r5, #32
   1a14c:	40d4      	lsrs	r4, r2
   1a14e:	1aaa      	subs	r2, r5, r2
   1a150:	4093      	lsls	r3, r2
   1a152:	1e5a      	subs	r2, r3, #1
   1a154:	4193      	sbcs	r3, r2
   1a156:	4323      	orrs	r3, r4
   1a158:	1af3      	subs	r3, r6, r3
   1a15a:	0004      	movs	r4, r0
   1a15c:	000d      	movs	r5, r1
   1a15e:	e72d      	b.n	19fbc <__aeabi_fsub+0x5c>
   1a160:	2f00      	cmp	r7, #0
   1a162:	d000      	beq.n	1a166 <__aeabi_fsub+0x206>
   1a164:	e72e      	b.n	19fc4 <__aeabi_fsub+0x64>
   1a166:	2200      	movs	r2, #0
   1a168:	2400      	movs	r4, #0
   1a16a:	e7a9      	b.n	1a0c0 <__aeabi_fsub+0x160>
   1a16c:	000c      	movs	r4, r1
   1a16e:	e73d      	b.n	19fec <__aeabi_fsub+0x8c>
   1a170:	2b00      	cmp	r3, #0
   1a172:	d058      	beq.n	1a226 <__aeabi_fsub+0x2c6>
   1a174:	43d2      	mvns	r2, r2
   1a176:	2a00      	cmp	r2, #0
   1a178:	d0ee      	beq.n	1a158 <__aeabi_fsub+0x1f8>
   1a17a:	28ff      	cmp	r0, #255	; 0xff
   1a17c:	d1e1      	bne.n	1a142 <__aeabi_fsub+0x1e2>
   1a17e:	0033      	movs	r3, r6
   1a180:	24ff      	movs	r4, #255	; 0xff
   1a182:	000d      	movs	r5, r1
   1a184:	e732      	b.n	19fec <__aeabi_fsub+0x8c>
   1a186:	29ff      	cmp	r1, #255	; 0xff
   1a188:	d010      	beq.n	1a1ac <__aeabi_fsub+0x24c>
   1a18a:	0001      	movs	r1, r0
   1a18c:	e778      	b.n	1a080 <__aeabi_fsub+0x120>
   1a18e:	2b00      	cmp	r3, #0
   1a190:	d06e      	beq.n	1a270 <__aeabi_fsub+0x310>
   1a192:	24ff      	movs	r4, #255	; 0xff
   1a194:	2e00      	cmp	r6, #0
   1a196:	d100      	bne.n	1a19a <__aeabi_fsub+0x23a>
   1a198:	e728      	b.n	19fec <__aeabi_fsub+0x8c>
   1a19a:	2280      	movs	r2, #128	; 0x80
   1a19c:	4651      	mov	r1, sl
   1a19e:	03d2      	lsls	r2, r2, #15
   1a1a0:	4211      	tst	r1, r2
   1a1a2:	d003      	beq.n	1a1ac <__aeabi_fsub+0x24c>
   1a1a4:	4661      	mov	r1, ip
   1a1a6:	4211      	tst	r1, r2
   1a1a8:	d100      	bne.n	1a1ac <__aeabi_fsub+0x24c>
   1a1aa:	0033      	movs	r3, r6
   1a1ac:	24ff      	movs	r4, #255	; 0xff
   1a1ae:	e71d      	b.n	19fec <__aeabi_fsub+0x8c>
   1a1b0:	24ff      	movs	r4, #255	; 0xff
   1a1b2:	2300      	movs	r3, #0
   1a1b4:	e72c      	b.n	1a010 <__aeabi_fsub+0xb0>
   1a1b6:	2c00      	cmp	r4, #0
   1a1b8:	d1e9      	bne.n	1a18e <__aeabi_fsub+0x22e>
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	d063      	beq.n	1a286 <__aeabi_fsub+0x326>
   1a1be:	2e00      	cmp	r6, #0
   1a1c0:	d100      	bne.n	1a1c4 <__aeabi_fsub+0x264>
   1a1c2:	e713      	b.n	19fec <__aeabi_fsub+0x8c>
   1a1c4:	199b      	adds	r3, r3, r6
   1a1c6:	015a      	lsls	r2, r3, #5
   1a1c8:	d400      	bmi.n	1a1cc <__aeabi_fsub+0x26c>
   1a1ca:	e73e      	b.n	1a04a <__aeabi_fsub+0xea>
   1a1cc:	4a31      	ldr	r2, [pc, #196]	; (1a294 <__aeabi_fsub+0x334>)
   1a1ce:	000c      	movs	r4, r1
   1a1d0:	4013      	ands	r3, r2
   1a1d2:	e70b      	b.n	19fec <__aeabi_fsub+0x8c>
   1a1d4:	2c00      	cmp	r4, #0
   1a1d6:	d11e      	bne.n	1a216 <__aeabi_fsub+0x2b6>
   1a1d8:	2b00      	cmp	r3, #0
   1a1da:	d12f      	bne.n	1a23c <__aeabi_fsub+0x2dc>
   1a1dc:	2e00      	cmp	r6, #0
   1a1de:	d04f      	beq.n	1a280 <__aeabi_fsub+0x320>
   1a1e0:	0033      	movs	r3, r6
   1a1e2:	000d      	movs	r5, r1
   1a1e4:	e702      	b.n	19fec <__aeabi_fsub+0x8c>
   1a1e6:	2601      	movs	r6, #1
   1a1e8:	e755      	b.n	1a096 <__aeabi_fsub+0x136>
   1a1ea:	2c00      	cmp	r4, #0
   1a1ec:	d11f      	bne.n	1a22e <__aeabi_fsub+0x2ce>
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	d043      	beq.n	1a27a <__aeabi_fsub+0x31a>
   1a1f2:	43c9      	mvns	r1, r1
   1a1f4:	2900      	cmp	r1, #0
   1a1f6:	d00b      	beq.n	1a210 <__aeabi_fsub+0x2b0>
   1a1f8:	28ff      	cmp	r0, #255	; 0xff
   1a1fa:	d039      	beq.n	1a270 <__aeabi_fsub+0x310>
   1a1fc:	291b      	cmp	r1, #27
   1a1fe:	dc44      	bgt.n	1a28a <__aeabi_fsub+0x32a>
   1a200:	001c      	movs	r4, r3
   1a202:	2720      	movs	r7, #32
   1a204:	40cc      	lsrs	r4, r1
   1a206:	1a79      	subs	r1, r7, r1
   1a208:	408b      	lsls	r3, r1
   1a20a:	1e59      	subs	r1, r3, #1
   1a20c:	418b      	sbcs	r3, r1
   1a20e:	4323      	orrs	r3, r4
   1a210:	199b      	adds	r3, r3, r6
   1a212:	0004      	movs	r4, r0
   1a214:	e740      	b.n	1a098 <__aeabi_fsub+0x138>
   1a216:	2b00      	cmp	r3, #0
   1a218:	d11a      	bne.n	1a250 <__aeabi_fsub+0x2f0>
   1a21a:	2e00      	cmp	r6, #0
   1a21c:	d124      	bne.n	1a268 <__aeabi_fsub+0x308>
   1a21e:	2780      	movs	r7, #128	; 0x80
   1a220:	2200      	movs	r2, #0
   1a222:	03ff      	lsls	r7, r7, #15
   1a224:	e71b      	b.n	1a05e <__aeabi_fsub+0xfe>
   1a226:	0033      	movs	r3, r6
   1a228:	0004      	movs	r4, r0
   1a22a:	000d      	movs	r5, r1
   1a22c:	e6de      	b.n	19fec <__aeabi_fsub+0x8c>
   1a22e:	28ff      	cmp	r0, #255	; 0xff
   1a230:	d01e      	beq.n	1a270 <__aeabi_fsub+0x310>
   1a232:	2480      	movs	r4, #128	; 0x80
   1a234:	04e4      	lsls	r4, r4, #19
   1a236:	4249      	negs	r1, r1
   1a238:	4323      	orrs	r3, r4
   1a23a:	e7df      	b.n	1a1fc <__aeabi_fsub+0x29c>
   1a23c:	2e00      	cmp	r6, #0
   1a23e:	d100      	bne.n	1a242 <__aeabi_fsub+0x2e2>
   1a240:	e6d4      	b.n	19fec <__aeabi_fsub+0x8c>
   1a242:	1b9f      	subs	r7, r3, r6
   1a244:	017a      	lsls	r2, r7, #5
   1a246:	d400      	bmi.n	1a24a <__aeabi_fsub+0x2ea>
   1a248:	e737      	b.n	1a0ba <__aeabi_fsub+0x15a>
   1a24a:	1af3      	subs	r3, r6, r3
   1a24c:	000d      	movs	r5, r1
   1a24e:	e6cd      	b.n	19fec <__aeabi_fsub+0x8c>
   1a250:	24ff      	movs	r4, #255	; 0xff
   1a252:	2e00      	cmp	r6, #0
   1a254:	d100      	bne.n	1a258 <__aeabi_fsub+0x2f8>
   1a256:	e6c9      	b.n	19fec <__aeabi_fsub+0x8c>
   1a258:	2280      	movs	r2, #128	; 0x80
   1a25a:	4650      	mov	r0, sl
   1a25c:	03d2      	lsls	r2, r2, #15
   1a25e:	4210      	tst	r0, r2
   1a260:	d0a4      	beq.n	1a1ac <__aeabi_fsub+0x24c>
   1a262:	4660      	mov	r0, ip
   1a264:	4210      	tst	r0, r2
   1a266:	d1a1      	bne.n	1a1ac <__aeabi_fsub+0x24c>
   1a268:	0033      	movs	r3, r6
   1a26a:	000d      	movs	r5, r1
   1a26c:	24ff      	movs	r4, #255	; 0xff
   1a26e:	e6bd      	b.n	19fec <__aeabi_fsub+0x8c>
   1a270:	0033      	movs	r3, r6
   1a272:	24ff      	movs	r4, #255	; 0xff
   1a274:	e6ba      	b.n	19fec <__aeabi_fsub+0x8c>
   1a276:	2301      	movs	r3, #1
   1a278:	e76e      	b.n	1a158 <__aeabi_fsub+0x1f8>
   1a27a:	0033      	movs	r3, r6
   1a27c:	0004      	movs	r4, r0
   1a27e:	e6b5      	b.n	19fec <__aeabi_fsub+0x8c>
   1a280:	2700      	movs	r7, #0
   1a282:	2200      	movs	r2, #0
   1a284:	e71c      	b.n	1a0c0 <__aeabi_fsub+0x160>
   1a286:	0033      	movs	r3, r6
   1a288:	e6b0      	b.n	19fec <__aeabi_fsub+0x8c>
   1a28a:	2301      	movs	r3, #1
   1a28c:	e7c0      	b.n	1a210 <__aeabi_fsub+0x2b0>
   1a28e:	46c0      	nop			; (mov r8, r8)
   1a290:	7dffffff 	.word	0x7dffffff
   1a294:	fbffffff 	.word	0xfbffffff

0001a298 <__aeabi_f2iz>:
   1a298:	0241      	lsls	r1, r0, #9
   1a29a:	0043      	lsls	r3, r0, #1
   1a29c:	0fc2      	lsrs	r2, r0, #31
   1a29e:	0a49      	lsrs	r1, r1, #9
   1a2a0:	0e1b      	lsrs	r3, r3, #24
   1a2a2:	2000      	movs	r0, #0
   1a2a4:	2b7e      	cmp	r3, #126	; 0x7e
   1a2a6:	dd0d      	ble.n	1a2c4 <__aeabi_f2iz+0x2c>
   1a2a8:	2b9d      	cmp	r3, #157	; 0x9d
   1a2aa:	dc0c      	bgt.n	1a2c6 <__aeabi_f2iz+0x2e>
   1a2ac:	2080      	movs	r0, #128	; 0x80
   1a2ae:	0400      	lsls	r0, r0, #16
   1a2b0:	4301      	orrs	r1, r0
   1a2b2:	2b95      	cmp	r3, #149	; 0x95
   1a2b4:	dc0a      	bgt.n	1a2cc <__aeabi_f2iz+0x34>
   1a2b6:	2096      	movs	r0, #150	; 0x96
   1a2b8:	1ac3      	subs	r3, r0, r3
   1a2ba:	40d9      	lsrs	r1, r3
   1a2bc:	4248      	negs	r0, r1
   1a2be:	2a00      	cmp	r2, #0
   1a2c0:	d100      	bne.n	1a2c4 <__aeabi_f2iz+0x2c>
   1a2c2:	0008      	movs	r0, r1
   1a2c4:	4770      	bx	lr
   1a2c6:	4b03      	ldr	r3, [pc, #12]	; (1a2d4 <__aeabi_f2iz+0x3c>)
   1a2c8:	18d0      	adds	r0, r2, r3
   1a2ca:	e7fb      	b.n	1a2c4 <__aeabi_f2iz+0x2c>
   1a2cc:	3b96      	subs	r3, #150	; 0x96
   1a2ce:	4099      	lsls	r1, r3
   1a2d0:	e7f4      	b.n	1a2bc <__aeabi_f2iz+0x24>
   1a2d2:	46c0      	nop			; (mov r8, r8)
   1a2d4:	7fffffff 	.word	0x7fffffff

0001a2d8 <__aeabi_i2f>:
   1a2d8:	b570      	push	{r4, r5, r6, lr}
   1a2da:	2800      	cmp	r0, #0
   1a2dc:	d030      	beq.n	1a340 <__aeabi_i2f+0x68>
   1a2de:	17c3      	asrs	r3, r0, #31
   1a2e0:	18c4      	adds	r4, r0, r3
   1a2e2:	405c      	eors	r4, r3
   1a2e4:	0fc5      	lsrs	r5, r0, #31
   1a2e6:	0020      	movs	r0, r4
   1a2e8:	f001 fef0 	bl	1c0cc <__clzsi2>
   1a2ec:	239e      	movs	r3, #158	; 0x9e
   1a2ee:	1a1b      	subs	r3, r3, r0
   1a2f0:	2b96      	cmp	r3, #150	; 0x96
   1a2f2:	dc0d      	bgt.n	1a310 <__aeabi_i2f+0x38>
   1a2f4:	2296      	movs	r2, #150	; 0x96
   1a2f6:	1ad2      	subs	r2, r2, r3
   1a2f8:	4094      	lsls	r4, r2
   1a2fa:	002a      	movs	r2, r5
   1a2fc:	0264      	lsls	r4, r4, #9
   1a2fe:	0a64      	lsrs	r4, r4, #9
   1a300:	b2db      	uxtb	r3, r3
   1a302:	0264      	lsls	r4, r4, #9
   1a304:	05db      	lsls	r3, r3, #23
   1a306:	0a60      	lsrs	r0, r4, #9
   1a308:	07d2      	lsls	r2, r2, #31
   1a30a:	4318      	orrs	r0, r3
   1a30c:	4310      	orrs	r0, r2
   1a30e:	bd70      	pop	{r4, r5, r6, pc}
   1a310:	2b99      	cmp	r3, #153	; 0x99
   1a312:	dc19      	bgt.n	1a348 <__aeabi_i2f+0x70>
   1a314:	2299      	movs	r2, #153	; 0x99
   1a316:	1ad2      	subs	r2, r2, r3
   1a318:	2a00      	cmp	r2, #0
   1a31a:	dd29      	ble.n	1a370 <__aeabi_i2f+0x98>
   1a31c:	4094      	lsls	r4, r2
   1a31e:	0022      	movs	r2, r4
   1a320:	4c14      	ldr	r4, [pc, #80]	; (1a374 <__aeabi_i2f+0x9c>)
   1a322:	4014      	ands	r4, r2
   1a324:	0751      	lsls	r1, r2, #29
   1a326:	d004      	beq.n	1a332 <__aeabi_i2f+0x5a>
   1a328:	210f      	movs	r1, #15
   1a32a:	400a      	ands	r2, r1
   1a32c:	2a04      	cmp	r2, #4
   1a32e:	d000      	beq.n	1a332 <__aeabi_i2f+0x5a>
   1a330:	3404      	adds	r4, #4
   1a332:	0162      	lsls	r2, r4, #5
   1a334:	d413      	bmi.n	1a35e <__aeabi_i2f+0x86>
   1a336:	01a4      	lsls	r4, r4, #6
   1a338:	0a64      	lsrs	r4, r4, #9
   1a33a:	b2db      	uxtb	r3, r3
   1a33c:	002a      	movs	r2, r5
   1a33e:	e7e0      	b.n	1a302 <__aeabi_i2f+0x2a>
   1a340:	2200      	movs	r2, #0
   1a342:	2300      	movs	r3, #0
   1a344:	2400      	movs	r4, #0
   1a346:	e7dc      	b.n	1a302 <__aeabi_i2f+0x2a>
   1a348:	2205      	movs	r2, #5
   1a34a:	0021      	movs	r1, r4
   1a34c:	1a12      	subs	r2, r2, r0
   1a34e:	40d1      	lsrs	r1, r2
   1a350:	22b9      	movs	r2, #185	; 0xb9
   1a352:	1ad2      	subs	r2, r2, r3
   1a354:	4094      	lsls	r4, r2
   1a356:	1e62      	subs	r2, r4, #1
   1a358:	4194      	sbcs	r4, r2
   1a35a:	430c      	orrs	r4, r1
   1a35c:	e7da      	b.n	1a314 <__aeabi_i2f+0x3c>
   1a35e:	4b05      	ldr	r3, [pc, #20]	; (1a374 <__aeabi_i2f+0x9c>)
   1a360:	002a      	movs	r2, r5
   1a362:	401c      	ands	r4, r3
   1a364:	239f      	movs	r3, #159	; 0x9f
   1a366:	01a4      	lsls	r4, r4, #6
   1a368:	1a1b      	subs	r3, r3, r0
   1a36a:	0a64      	lsrs	r4, r4, #9
   1a36c:	b2db      	uxtb	r3, r3
   1a36e:	e7c8      	b.n	1a302 <__aeabi_i2f+0x2a>
   1a370:	0022      	movs	r2, r4
   1a372:	e7d5      	b.n	1a320 <__aeabi_i2f+0x48>
   1a374:	fbffffff 	.word	0xfbffffff

0001a378 <__aeabi_ui2f>:
   1a378:	b510      	push	{r4, lr}
   1a37a:	1e04      	subs	r4, r0, #0
   1a37c:	d027      	beq.n	1a3ce <__aeabi_ui2f+0x56>
   1a37e:	f001 fea5 	bl	1c0cc <__clzsi2>
   1a382:	239e      	movs	r3, #158	; 0x9e
   1a384:	1a1b      	subs	r3, r3, r0
   1a386:	2b96      	cmp	r3, #150	; 0x96
   1a388:	dc0a      	bgt.n	1a3a0 <__aeabi_ui2f+0x28>
   1a38a:	2296      	movs	r2, #150	; 0x96
   1a38c:	1ad2      	subs	r2, r2, r3
   1a38e:	4094      	lsls	r4, r2
   1a390:	0264      	lsls	r4, r4, #9
   1a392:	0a64      	lsrs	r4, r4, #9
   1a394:	b2db      	uxtb	r3, r3
   1a396:	0264      	lsls	r4, r4, #9
   1a398:	05db      	lsls	r3, r3, #23
   1a39a:	0a60      	lsrs	r0, r4, #9
   1a39c:	4318      	orrs	r0, r3
   1a39e:	bd10      	pop	{r4, pc}
   1a3a0:	2b99      	cmp	r3, #153	; 0x99
   1a3a2:	dc17      	bgt.n	1a3d4 <__aeabi_ui2f+0x5c>
   1a3a4:	2299      	movs	r2, #153	; 0x99
   1a3a6:	1ad2      	subs	r2, r2, r3
   1a3a8:	2a00      	cmp	r2, #0
   1a3aa:	dd27      	ble.n	1a3fc <__aeabi_ui2f+0x84>
   1a3ac:	4094      	lsls	r4, r2
   1a3ae:	0022      	movs	r2, r4
   1a3b0:	4c13      	ldr	r4, [pc, #76]	; (1a400 <__aeabi_ui2f+0x88>)
   1a3b2:	4014      	ands	r4, r2
   1a3b4:	0751      	lsls	r1, r2, #29
   1a3b6:	d004      	beq.n	1a3c2 <__aeabi_ui2f+0x4a>
   1a3b8:	210f      	movs	r1, #15
   1a3ba:	400a      	ands	r2, r1
   1a3bc:	2a04      	cmp	r2, #4
   1a3be:	d000      	beq.n	1a3c2 <__aeabi_ui2f+0x4a>
   1a3c0:	3404      	adds	r4, #4
   1a3c2:	0162      	lsls	r2, r4, #5
   1a3c4:	d412      	bmi.n	1a3ec <__aeabi_ui2f+0x74>
   1a3c6:	01a4      	lsls	r4, r4, #6
   1a3c8:	0a64      	lsrs	r4, r4, #9
   1a3ca:	b2db      	uxtb	r3, r3
   1a3cc:	e7e3      	b.n	1a396 <__aeabi_ui2f+0x1e>
   1a3ce:	2300      	movs	r3, #0
   1a3d0:	2400      	movs	r4, #0
   1a3d2:	e7e0      	b.n	1a396 <__aeabi_ui2f+0x1e>
   1a3d4:	22b9      	movs	r2, #185	; 0xb9
   1a3d6:	0021      	movs	r1, r4
   1a3d8:	1ad2      	subs	r2, r2, r3
   1a3da:	4091      	lsls	r1, r2
   1a3dc:	000a      	movs	r2, r1
   1a3de:	1e51      	subs	r1, r2, #1
   1a3e0:	418a      	sbcs	r2, r1
   1a3e2:	2105      	movs	r1, #5
   1a3e4:	1a09      	subs	r1, r1, r0
   1a3e6:	40cc      	lsrs	r4, r1
   1a3e8:	4314      	orrs	r4, r2
   1a3ea:	e7db      	b.n	1a3a4 <__aeabi_ui2f+0x2c>
   1a3ec:	4b04      	ldr	r3, [pc, #16]	; (1a400 <__aeabi_ui2f+0x88>)
   1a3ee:	401c      	ands	r4, r3
   1a3f0:	239f      	movs	r3, #159	; 0x9f
   1a3f2:	01a4      	lsls	r4, r4, #6
   1a3f4:	1a1b      	subs	r3, r3, r0
   1a3f6:	0a64      	lsrs	r4, r4, #9
   1a3f8:	b2db      	uxtb	r3, r3
   1a3fa:	e7cc      	b.n	1a396 <__aeabi_ui2f+0x1e>
   1a3fc:	0022      	movs	r2, r4
   1a3fe:	e7d7      	b.n	1a3b0 <__aeabi_ui2f+0x38>
   1a400:	fbffffff 	.word	0xfbffffff

0001a404 <__aeabi_dadd>:
   1a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a406:	4645      	mov	r5, r8
   1a408:	46de      	mov	lr, fp
   1a40a:	4657      	mov	r7, sl
   1a40c:	464e      	mov	r6, r9
   1a40e:	030c      	lsls	r4, r1, #12
   1a410:	b5e0      	push	{r5, r6, r7, lr}
   1a412:	004e      	lsls	r6, r1, #1
   1a414:	0fc9      	lsrs	r1, r1, #31
   1a416:	4688      	mov	r8, r1
   1a418:	000d      	movs	r5, r1
   1a41a:	0a61      	lsrs	r1, r4, #9
   1a41c:	0f44      	lsrs	r4, r0, #29
   1a41e:	430c      	orrs	r4, r1
   1a420:	00c7      	lsls	r7, r0, #3
   1a422:	0319      	lsls	r1, r3, #12
   1a424:	0058      	lsls	r0, r3, #1
   1a426:	0fdb      	lsrs	r3, r3, #31
   1a428:	469b      	mov	fp, r3
   1a42a:	0a4b      	lsrs	r3, r1, #9
   1a42c:	0f51      	lsrs	r1, r2, #29
   1a42e:	430b      	orrs	r3, r1
   1a430:	0d76      	lsrs	r6, r6, #21
   1a432:	0d40      	lsrs	r0, r0, #21
   1a434:	0019      	movs	r1, r3
   1a436:	00d2      	lsls	r2, r2, #3
   1a438:	45d8      	cmp	r8, fp
   1a43a:	d100      	bne.n	1a43e <__aeabi_dadd+0x3a>
   1a43c:	e0ae      	b.n	1a59c <__aeabi_dadd+0x198>
   1a43e:	1a35      	subs	r5, r6, r0
   1a440:	2d00      	cmp	r5, #0
   1a442:	dc00      	bgt.n	1a446 <__aeabi_dadd+0x42>
   1a444:	e0f6      	b.n	1a634 <__aeabi_dadd+0x230>
   1a446:	2800      	cmp	r0, #0
   1a448:	d10f      	bne.n	1a46a <__aeabi_dadd+0x66>
   1a44a:	4313      	orrs	r3, r2
   1a44c:	d100      	bne.n	1a450 <__aeabi_dadd+0x4c>
   1a44e:	e0db      	b.n	1a608 <__aeabi_dadd+0x204>
   1a450:	1e6b      	subs	r3, r5, #1
   1a452:	2b00      	cmp	r3, #0
   1a454:	d000      	beq.n	1a458 <__aeabi_dadd+0x54>
   1a456:	e137      	b.n	1a6c8 <__aeabi_dadd+0x2c4>
   1a458:	1aba      	subs	r2, r7, r2
   1a45a:	4297      	cmp	r7, r2
   1a45c:	41bf      	sbcs	r7, r7
   1a45e:	1a64      	subs	r4, r4, r1
   1a460:	427f      	negs	r7, r7
   1a462:	1be4      	subs	r4, r4, r7
   1a464:	2601      	movs	r6, #1
   1a466:	0017      	movs	r7, r2
   1a468:	e024      	b.n	1a4b4 <__aeabi_dadd+0xb0>
   1a46a:	4bc6      	ldr	r3, [pc, #792]	; (1a784 <__aeabi_dadd+0x380>)
   1a46c:	429e      	cmp	r6, r3
   1a46e:	d04d      	beq.n	1a50c <__aeabi_dadd+0x108>
   1a470:	2380      	movs	r3, #128	; 0x80
   1a472:	041b      	lsls	r3, r3, #16
   1a474:	4319      	orrs	r1, r3
   1a476:	2d38      	cmp	r5, #56	; 0x38
   1a478:	dd00      	ble.n	1a47c <__aeabi_dadd+0x78>
   1a47a:	e107      	b.n	1a68c <__aeabi_dadd+0x288>
   1a47c:	2d1f      	cmp	r5, #31
   1a47e:	dd00      	ble.n	1a482 <__aeabi_dadd+0x7e>
   1a480:	e138      	b.n	1a6f4 <__aeabi_dadd+0x2f0>
   1a482:	2020      	movs	r0, #32
   1a484:	1b43      	subs	r3, r0, r5
   1a486:	469a      	mov	sl, r3
   1a488:	000b      	movs	r3, r1
   1a48a:	4650      	mov	r0, sl
   1a48c:	4083      	lsls	r3, r0
   1a48e:	4699      	mov	r9, r3
   1a490:	0013      	movs	r3, r2
   1a492:	4648      	mov	r0, r9
   1a494:	40eb      	lsrs	r3, r5
   1a496:	4318      	orrs	r0, r3
   1a498:	0003      	movs	r3, r0
   1a49a:	4650      	mov	r0, sl
   1a49c:	4082      	lsls	r2, r0
   1a49e:	1e50      	subs	r0, r2, #1
   1a4a0:	4182      	sbcs	r2, r0
   1a4a2:	40e9      	lsrs	r1, r5
   1a4a4:	431a      	orrs	r2, r3
   1a4a6:	1aba      	subs	r2, r7, r2
   1a4a8:	1a61      	subs	r1, r4, r1
   1a4aa:	4297      	cmp	r7, r2
   1a4ac:	41a4      	sbcs	r4, r4
   1a4ae:	0017      	movs	r7, r2
   1a4b0:	4264      	negs	r4, r4
   1a4b2:	1b0c      	subs	r4, r1, r4
   1a4b4:	0223      	lsls	r3, r4, #8
   1a4b6:	d562      	bpl.n	1a57e <__aeabi_dadd+0x17a>
   1a4b8:	0264      	lsls	r4, r4, #9
   1a4ba:	0a65      	lsrs	r5, r4, #9
   1a4bc:	2d00      	cmp	r5, #0
   1a4be:	d100      	bne.n	1a4c2 <__aeabi_dadd+0xbe>
   1a4c0:	e0df      	b.n	1a682 <__aeabi_dadd+0x27e>
   1a4c2:	0028      	movs	r0, r5
   1a4c4:	f001 fe02 	bl	1c0cc <__clzsi2>
   1a4c8:	0003      	movs	r3, r0
   1a4ca:	3b08      	subs	r3, #8
   1a4cc:	2b1f      	cmp	r3, #31
   1a4ce:	dd00      	ble.n	1a4d2 <__aeabi_dadd+0xce>
   1a4d0:	e0d2      	b.n	1a678 <__aeabi_dadd+0x274>
   1a4d2:	2220      	movs	r2, #32
   1a4d4:	003c      	movs	r4, r7
   1a4d6:	1ad2      	subs	r2, r2, r3
   1a4d8:	409d      	lsls	r5, r3
   1a4da:	40d4      	lsrs	r4, r2
   1a4dc:	409f      	lsls	r7, r3
   1a4de:	4325      	orrs	r5, r4
   1a4e0:	429e      	cmp	r6, r3
   1a4e2:	dd00      	ble.n	1a4e6 <__aeabi_dadd+0xe2>
   1a4e4:	e0c4      	b.n	1a670 <__aeabi_dadd+0x26c>
   1a4e6:	1b9e      	subs	r6, r3, r6
   1a4e8:	1c73      	adds	r3, r6, #1
   1a4ea:	2b1f      	cmp	r3, #31
   1a4ec:	dd00      	ble.n	1a4f0 <__aeabi_dadd+0xec>
   1a4ee:	e0f1      	b.n	1a6d4 <__aeabi_dadd+0x2d0>
   1a4f0:	2220      	movs	r2, #32
   1a4f2:	0038      	movs	r0, r7
   1a4f4:	0029      	movs	r1, r5
   1a4f6:	1ad2      	subs	r2, r2, r3
   1a4f8:	40d8      	lsrs	r0, r3
   1a4fa:	4091      	lsls	r1, r2
   1a4fc:	4097      	lsls	r7, r2
   1a4fe:	002c      	movs	r4, r5
   1a500:	4301      	orrs	r1, r0
   1a502:	1e78      	subs	r0, r7, #1
   1a504:	4187      	sbcs	r7, r0
   1a506:	40dc      	lsrs	r4, r3
   1a508:	2600      	movs	r6, #0
   1a50a:	430f      	orrs	r7, r1
   1a50c:	077b      	lsls	r3, r7, #29
   1a50e:	d009      	beq.n	1a524 <__aeabi_dadd+0x120>
   1a510:	230f      	movs	r3, #15
   1a512:	403b      	ands	r3, r7
   1a514:	2b04      	cmp	r3, #4
   1a516:	d005      	beq.n	1a524 <__aeabi_dadd+0x120>
   1a518:	1d3b      	adds	r3, r7, #4
   1a51a:	42bb      	cmp	r3, r7
   1a51c:	41bf      	sbcs	r7, r7
   1a51e:	427f      	negs	r7, r7
   1a520:	19e4      	adds	r4, r4, r7
   1a522:	001f      	movs	r7, r3
   1a524:	0223      	lsls	r3, r4, #8
   1a526:	d52c      	bpl.n	1a582 <__aeabi_dadd+0x17e>
   1a528:	4b96      	ldr	r3, [pc, #600]	; (1a784 <__aeabi_dadd+0x380>)
   1a52a:	3601      	adds	r6, #1
   1a52c:	429e      	cmp	r6, r3
   1a52e:	d100      	bne.n	1a532 <__aeabi_dadd+0x12e>
   1a530:	e09a      	b.n	1a668 <__aeabi_dadd+0x264>
   1a532:	4645      	mov	r5, r8
   1a534:	4b94      	ldr	r3, [pc, #592]	; (1a788 <__aeabi_dadd+0x384>)
   1a536:	08ff      	lsrs	r7, r7, #3
   1a538:	401c      	ands	r4, r3
   1a53a:	0760      	lsls	r0, r4, #29
   1a53c:	0576      	lsls	r6, r6, #21
   1a53e:	0264      	lsls	r4, r4, #9
   1a540:	4307      	orrs	r7, r0
   1a542:	0b24      	lsrs	r4, r4, #12
   1a544:	0d76      	lsrs	r6, r6, #21
   1a546:	2100      	movs	r1, #0
   1a548:	0324      	lsls	r4, r4, #12
   1a54a:	0b23      	lsrs	r3, r4, #12
   1a54c:	0d0c      	lsrs	r4, r1, #20
   1a54e:	4a8f      	ldr	r2, [pc, #572]	; (1a78c <__aeabi_dadd+0x388>)
   1a550:	0524      	lsls	r4, r4, #20
   1a552:	431c      	orrs	r4, r3
   1a554:	4014      	ands	r4, r2
   1a556:	0533      	lsls	r3, r6, #20
   1a558:	4323      	orrs	r3, r4
   1a55a:	005b      	lsls	r3, r3, #1
   1a55c:	07ed      	lsls	r5, r5, #31
   1a55e:	085b      	lsrs	r3, r3, #1
   1a560:	432b      	orrs	r3, r5
   1a562:	0038      	movs	r0, r7
   1a564:	0019      	movs	r1, r3
   1a566:	bc3c      	pop	{r2, r3, r4, r5}
   1a568:	4690      	mov	r8, r2
   1a56a:	4699      	mov	r9, r3
   1a56c:	46a2      	mov	sl, r4
   1a56e:	46ab      	mov	fp, r5
   1a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a572:	4664      	mov	r4, ip
   1a574:	4304      	orrs	r4, r0
   1a576:	d100      	bne.n	1a57a <__aeabi_dadd+0x176>
   1a578:	e211      	b.n	1a99e <__aeabi_dadd+0x59a>
   1a57a:	0004      	movs	r4, r0
   1a57c:	4667      	mov	r7, ip
   1a57e:	077b      	lsls	r3, r7, #29
   1a580:	d1c6      	bne.n	1a510 <__aeabi_dadd+0x10c>
   1a582:	4645      	mov	r5, r8
   1a584:	0760      	lsls	r0, r4, #29
   1a586:	08ff      	lsrs	r7, r7, #3
   1a588:	4307      	orrs	r7, r0
   1a58a:	08e4      	lsrs	r4, r4, #3
   1a58c:	4b7d      	ldr	r3, [pc, #500]	; (1a784 <__aeabi_dadd+0x380>)
   1a58e:	429e      	cmp	r6, r3
   1a590:	d030      	beq.n	1a5f4 <__aeabi_dadd+0x1f0>
   1a592:	0324      	lsls	r4, r4, #12
   1a594:	0576      	lsls	r6, r6, #21
   1a596:	0b24      	lsrs	r4, r4, #12
   1a598:	0d76      	lsrs	r6, r6, #21
   1a59a:	e7d4      	b.n	1a546 <__aeabi_dadd+0x142>
   1a59c:	1a33      	subs	r3, r6, r0
   1a59e:	469a      	mov	sl, r3
   1a5a0:	2b00      	cmp	r3, #0
   1a5a2:	dd78      	ble.n	1a696 <__aeabi_dadd+0x292>
   1a5a4:	2800      	cmp	r0, #0
   1a5a6:	d031      	beq.n	1a60c <__aeabi_dadd+0x208>
   1a5a8:	4876      	ldr	r0, [pc, #472]	; (1a784 <__aeabi_dadd+0x380>)
   1a5aa:	4286      	cmp	r6, r0
   1a5ac:	d0ae      	beq.n	1a50c <__aeabi_dadd+0x108>
   1a5ae:	2080      	movs	r0, #128	; 0x80
   1a5b0:	0400      	lsls	r0, r0, #16
   1a5b2:	4301      	orrs	r1, r0
   1a5b4:	4653      	mov	r3, sl
   1a5b6:	2b38      	cmp	r3, #56	; 0x38
   1a5b8:	dc00      	bgt.n	1a5bc <__aeabi_dadd+0x1b8>
   1a5ba:	e0e9      	b.n	1a790 <__aeabi_dadd+0x38c>
   1a5bc:	430a      	orrs	r2, r1
   1a5be:	1e51      	subs	r1, r2, #1
   1a5c0:	418a      	sbcs	r2, r1
   1a5c2:	2100      	movs	r1, #0
   1a5c4:	19d2      	adds	r2, r2, r7
   1a5c6:	42ba      	cmp	r2, r7
   1a5c8:	41bf      	sbcs	r7, r7
   1a5ca:	1909      	adds	r1, r1, r4
   1a5cc:	427c      	negs	r4, r7
   1a5ce:	0017      	movs	r7, r2
   1a5d0:	190c      	adds	r4, r1, r4
   1a5d2:	0223      	lsls	r3, r4, #8
   1a5d4:	d5d3      	bpl.n	1a57e <__aeabi_dadd+0x17a>
   1a5d6:	4b6b      	ldr	r3, [pc, #428]	; (1a784 <__aeabi_dadd+0x380>)
   1a5d8:	3601      	adds	r6, #1
   1a5da:	429e      	cmp	r6, r3
   1a5dc:	d100      	bne.n	1a5e0 <__aeabi_dadd+0x1dc>
   1a5de:	e13a      	b.n	1a856 <__aeabi_dadd+0x452>
   1a5e0:	2001      	movs	r0, #1
   1a5e2:	4b69      	ldr	r3, [pc, #420]	; (1a788 <__aeabi_dadd+0x384>)
   1a5e4:	401c      	ands	r4, r3
   1a5e6:	087b      	lsrs	r3, r7, #1
   1a5e8:	4007      	ands	r7, r0
   1a5ea:	431f      	orrs	r7, r3
   1a5ec:	07e0      	lsls	r0, r4, #31
   1a5ee:	4307      	orrs	r7, r0
   1a5f0:	0864      	lsrs	r4, r4, #1
   1a5f2:	e78b      	b.n	1a50c <__aeabi_dadd+0x108>
   1a5f4:	0023      	movs	r3, r4
   1a5f6:	433b      	orrs	r3, r7
   1a5f8:	d100      	bne.n	1a5fc <__aeabi_dadd+0x1f8>
   1a5fa:	e1cb      	b.n	1a994 <__aeabi_dadd+0x590>
   1a5fc:	2280      	movs	r2, #128	; 0x80
   1a5fe:	0312      	lsls	r2, r2, #12
   1a600:	4314      	orrs	r4, r2
   1a602:	0324      	lsls	r4, r4, #12
   1a604:	0b24      	lsrs	r4, r4, #12
   1a606:	e79e      	b.n	1a546 <__aeabi_dadd+0x142>
   1a608:	002e      	movs	r6, r5
   1a60a:	e77f      	b.n	1a50c <__aeabi_dadd+0x108>
   1a60c:	0008      	movs	r0, r1
   1a60e:	4310      	orrs	r0, r2
   1a610:	d100      	bne.n	1a614 <__aeabi_dadd+0x210>
   1a612:	e0b4      	b.n	1a77e <__aeabi_dadd+0x37a>
   1a614:	1e58      	subs	r0, r3, #1
   1a616:	2800      	cmp	r0, #0
   1a618:	d000      	beq.n	1a61c <__aeabi_dadd+0x218>
   1a61a:	e0de      	b.n	1a7da <__aeabi_dadd+0x3d6>
   1a61c:	18ba      	adds	r2, r7, r2
   1a61e:	42ba      	cmp	r2, r7
   1a620:	419b      	sbcs	r3, r3
   1a622:	1864      	adds	r4, r4, r1
   1a624:	425b      	negs	r3, r3
   1a626:	18e4      	adds	r4, r4, r3
   1a628:	0017      	movs	r7, r2
   1a62a:	2601      	movs	r6, #1
   1a62c:	0223      	lsls	r3, r4, #8
   1a62e:	d5a6      	bpl.n	1a57e <__aeabi_dadd+0x17a>
   1a630:	2602      	movs	r6, #2
   1a632:	e7d5      	b.n	1a5e0 <__aeabi_dadd+0x1dc>
   1a634:	2d00      	cmp	r5, #0
   1a636:	d16e      	bne.n	1a716 <__aeabi_dadd+0x312>
   1a638:	1c70      	adds	r0, r6, #1
   1a63a:	0540      	lsls	r0, r0, #21
   1a63c:	0d40      	lsrs	r0, r0, #21
   1a63e:	2801      	cmp	r0, #1
   1a640:	dc00      	bgt.n	1a644 <__aeabi_dadd+0x240>
   1a642:	e0f9      	b.n	1a838 <__aeabi_dadd+0x434>
   1a644:	1ab8      	subs	r0, r7, r2
   1a646:	4684      	mov	ip, r0
   1a648:	4287      	cmp	r7, r0
   1a64a:	4180      	sbcs	r0, r0
   1a64c:	1ae5      	subs	r5, r4, r3
   1a64e:	4240      	negs	r0, r0
   1a650:	1a2d      	subs	r5, r5, r0
   1a652:	0228      	lsls	r0, r5, #8
   1a654:	d400      	bmi.n	1a658 <__aeabi_dadd+0x254>
   1a656:	e089      	b.n	1a76c <__aeabi_dadd+0x368>
   1a658:	1bd7      	subs	r7, r2, r7
   1a65a:	42ba      	cmp	r2, r7
   1a65c:	4192      	sbcs	r2, r2
   1a65e:	1b1c      	subs	r4, r3, r4
   1a660:	4252      	negs	r2, r2
   1a662:	1aa5      	subs	r5, r4, r2
   1a664:	46d8      	mov	r8, fp
   1a666:	e729      	b.n	1a4bc <__aeabi_dadd+0xb8>
   1a668:	4645      	mov	r5, r8
   1a66a:	2400      	movs	r4, #0
   1a66c:	2700      	movs	r7, #0
   1a66e:	e76a      	b.n	1a546 <__aeabi_dadd+0x142>
   1a670:	4c45      	ldr	r4, [pc, #276]	; (1a788 <__aeabi_dadd+0x384>)
   1a672:	1af6      	subs	r6, r6, r3
   1a674:	402c      	ands	r4, r5
   1a676:	e749      	b.n	1a50c <__aeabi_dadd+0x108>
   1a678:	003d      	movs	r5, r7
   1a67a:	3828      	subs	r0, #40	; 0x28
   1a67c:	4085      	lsls	r5, r0
   1a67e:	2700      	movs	r7, #0
   1a680:	e72e      	b.n	1a4e0 <__aeabi_dadd+0xdc>
   1a682:	0038      	movs	r0, r7
   1a684:	f001 fd22 	bl	1c0cc <__clzsi2>
   1a688:	3020      	adds	r0, #32
   1a68a:	e71d      	b.n	1a4c8 <__aeabi_dadd+0xc4>
   1a68c:	430a      	orrs	r2, r1
   1a68e:	1e51      	subs	r1, r2, #1
   1a690:	418a      	sbcs	r2, r1
   1a692:	2100      	movs	r1, #0
   1a694:	e707      	b.n	1a4a6 <__aeabi_dadd+0xa2>
   1a696:	2b00      	cmp	r3, #0
   1a698:	d000      	beq.n	1a69c <__aeabi_dadd+0x298>
   1a69a:	e0f3      	b.n	1a884 <__aeabi_dadd+0x480>
   1a69c:	1c70      	adds	r0, r6, #1
   1a69e:	0543      	lsls	r3, r0, #21
   1a6a0:	0d5b      	lsrs	r3, r3, #21
   1a6a2:	2b01      	cmp	r3, #1
   1a6a4:	dc00      	bgt.n	1a6a8 <__aeabi_dadd+0x2a4>
   1a6a6:	e0ad      	b.n	1a804 <__aeabi_dadd+0x400>
   1a6a8:	4b36      	ldr	r3, [pc, #216]	; (1a784 <__aeabi_dadd+0x380>)
   1a6aa:	4298      	cmp	r0, r3
   1a6ac:	d100      	bne.n	1a6b0 <__aeabi_dadd+0x2ac>
   1a6ae:	e0d1      	b.n	1a854 <__aeabi_dadd+0x450>
   1a6b0:	18ba      	adds	r2, r7, r2
   1a6b2:	42ba      	cmp	r2, r7
   1a6b4:	41bf      	sbcs	r7, r7
   1a6b6:	1864      	adds	r4, r4, r1
   1a6b8:	427f      	negs	r7, r7
   1a6ba:	19e4      	adds	r4, r4, r7
   1a6bc:	07e7      	lsls	r7, r4, #31
   1a6be:	0852      	lsrs	r2, r2, #1
   1a6c0:	4317      	orrs	r7, r2
   1a6c2:	0864      	lsrs	r4, r4, #1
   1a6c4:	0006      	movs	r6, r0
   1a6c6:	e721      	b.n	1a50c <__aeabi_dadd+0x108>
   1a6c8:	482e      	ldr	r0, [pc, #184]	; (1a784 <__aeabi_dadd+0x380>)
   1a6ca:	4285      	cmp	r5, r0
   1a6cc:	d100      	bne.n	1a6d0 <__aeabi_dadd+0x2cc>
   1a6ce:	e093      	b.n	1a7f8 <__aeabi_dadd+0x3f4>
   1a6d0:	001d      	movs	r5, r3
   1a6d2:	e6d0      	b.n	1a476 <__aeabi_dadd+0x72>
   1a6d4:	0029      	movs	r1, r5
   1a6d6:	3e1f      	subs	r6, #31
   1a6d8:	40f1      	lsrs	r1, r6
   1a6da:	2b20      	cmp	r3, #32
   1a6dc:	d100      	bne.n	1a6e0 <__aeabi_dadd+0x2dc>
   1a6de:	e08d      	b.n	1a7fc <__aeabi_dadd+0x3f8>
   1a6e0:	2240      	movs	r2, #64	; 0x40
   1a6e2:	1ad3      	subs	r3, r2, r3
   1a6e4:	409d      	lsls	r5, r3
   1a6e6:	432f      	orrs	r7, r5
   1a6e8:	1e7d      	subs	r5, r7, #1
   1a6ea:	41af      	sbcs	r7, r5
   1a6ec:	2400      	movs	r4, #0
   1a6ee:	430f      	orrs	r7, r1
   1a6f0:	2600      	movs	r6, #0
   1a6f2:	e744      	b.n	1a57e <__aeabi_dadd+0x17a>
   1a6f4:	002b      	movs	r3, r5
   1a6f6:	0008      	movs	r0, r1
   1a6f8:	3b20      	subs	r3, #32
   1a6fa:	40d8      	lsrs	r0, r3
   1a6fc:	0003      	movs	r3, r0
   1a6fe:	2d20      	cmp	r5, #32
   1a700:	d100      	bne.n	1a704 <__aeabi_dadd+0x300>
   1a702:	e07d      	b.n	1a800 <__aeabi_dadd+0x3fc>
   1a704:	2040      	movs	r0, #64	; 0x40
   1a706:	1b45      	subs	r5, r0, r5
   1a708:	40a9      	lsls	r1, r5
   1a70a:	430a      	orrs	r2, r1
   1a70c:	1e51      	subs	r1, r2, #1
   1a70e:	418a      	sbcs	r2, r1
   1a710:	2100      	movs	r1, #0
   1a712:	431a      	orrs	r2, r3
   1a714:	e6c7      	b.n	1a4a6 <__aeabi_dadd+0xa2>
   1a716:	2e00      	cmp	r6, #0
   1a718:	d050      	beq.n	1a7bc <__aeabi_dadd+0x3b8>
   1a71a:	4e1a      	ldr	r6, [pc, #104]	; (1a784 <__aeabi_dadd+0x380>)
   1a71c:	42b0      	cmp	r0, r6
   1a71e:	d057      	beq.n	1a7d0 <__aeabi_dadd+0x3cc>
   1a720:	2680      	movs	r6, #128	; 0x80
   1a722:	426b      	negs	r3, r5
   1a724:	4699      	mov	r9, r3
   1a726:	0436      	lsls	r6, r6, #16
   1a728:	4334      	orrs	r4, r6
   1a72a:	464b      	mov	r3, r9
   1a72c:	2b38      	cmp	r3, #56	; 0x38
   1a72e:	dd00      	ble.n	1a732 <__aeabi_dadd+0x32e>
   1a730:	e0d6      	b.n	1a8e0 <__aeabi_dadd+0x4dc>
   1a732:	2b1f      	cmp	r3, #31
   1a734:	dd00      	ble.n	1a738 <__aeabi_dadd+0x334>
   1a736:	e135      	b.n	1a9a4 <__aeabi_dadd+0x5a0>
   1a738:	2620      	movs	r6, #32
   1a73a:	1af5      	subs	r5, r6, r3
   1a73c:	0026      	movs	r6, r4
   1a73e:	40ae      	lsls	r6, r5
   1a740:	46b2      	mov	sl, r6
   1a742:	003e      	movs	r6, r7
   1a744:	40de      	lsrs	r6, r3
   1a746:	46ac      	mov	ip, r5
   1a748:	0035      	movs	r5, r6
   1a74a:	4656      	mov	r6, sl
   1a74c:	432e      	orrs	r6, r5
   1a74e:	4665      	mov	r5, ip
   1a750:	40af      	lsls	r7, r5
   1a752:	1e7d      	subs	r5, r7, #1
   1a754:	41af      	sbcs	r7, r5
   1a756:	40dc      	lsrs	r4, r3
   1a758:	4337      	orrs	r7, r6
   1a75a:	1bd7      	subs	r7, r2, r7
   1a75c:	42ba      	cmp	r2, r7
   1a75e:	4192      	sbcs	r2, r2
   1a760:	1b0c      	subs	r4, r1, r4
   1a762:	4252      	negs	r2, r2
   1a764:	1aa4      	subs	r4, r4, r2
   1a766:	0006      	movs	r6, r0
   1a768:	46d8      	mov	r8, fp
   1a76a:	e6a3      	b.n	1a4b4 <__aeabi_dadd+0xb0>
   1a76c:	4664      	mov	r4, ip
   1a76e:	4667      	mov	r7, ip
   1a770:	432c      	orrs	r4, r5
   1a772:	d000      	beq.n	1a776 <__aeabi_dadd+0x372>
   1a774:	e6a2      	b.n	1a4bc <__aeabi_dadd+0xb8>
   1a776:	2500      	movs	r5, #0
   1a778:	2600      	movs	r6, #0
   1a77a:	2700      	movs	r7, #0
   1a77c:	e706      	b.n	1a58c <__aeabi_dadd+0x188>
   1a77e:	001e      	movs	r6, r3
   1a780:	e6c4      	b.n	1a50c <__aeabi_dadd+0x108>
   1a782:	46c0      	nop			; (mov r8, r8)
   1a784:	000007ff 	.word	0x000007ff
   1a788:	ff7fffff 	.word	0xff7fffff
   1a78c:	800fffff 	.word	0x800fffff
   1a790:	2b1f      	cmp	r3, #31
   1a792:	dc63      	bgt.n	1a85c <__aeabi_dadd+0x458>
   1a794:	2020      	movs	r0, #32
   1a796:	1ac3      	subs	r3, r0, r3
   1a798:	0008      	movs	r0, r1
   1a79a:	4098      	lsls	r0, r3
   1a79c:	469c      	mov	ip, r3
   1a79e:	4683      	mov	fp, r0
   1a7a0:	4653      	mov	r3, sl
   1a7a2:	0010      	movs	r0, r2
   1a7a4:	40d8      	lsrs	r0, r3
   1a7a6:	0003      	movs	r3, r0
   1a7a8:	4658      	mov	r0, fp
   1a7aa:	4318      	orrs	r0, r3
   1a7ac:	4663      	mov	r3, ip
   1a7ae:	409a      	lsls	r2, r3
   1a7b0:	1e53      	subs	r3, r2, #1
   1a7b2:	419a      	sbcs	r2, r3
   1a7b4:	4653      	mov	r3, sl
   1a7b6:	4302      	orrs	r2, r0
   1a7b8:	40d9      	lsrs	r1, r3
   1a7ba:	e703      	b.n	1a5c4 <__aeabi_dadd+0x1c0>
   1a7bc:	0026      	movs	r6, r4
   1a7be:	433e      	orrs	r6, r7
   1a7c0:	d006      	beq.n	1a7d0 <__aeabi_dadd+0x3cc>
   1a7c2:	43eb      	mvns	r3, r5
   1a7c4:	4699      	mov	r9, r3
   1a7c6:	2b00      	cmp	r3, #0
   1a7c8:	d0c7      	beq.n	1a75a <__aeabi_dadd+0x356>
   1a7ca:	4e94      	ldr	r6, [pc, #592]	; (1aa1c <__aeabi_dadd+0x618>)
   1a7cc:	42b0      	cmp	r0, r6
   1a7ce:	d1ac      	bne.n	1a72a <__aeabi_dadd+0x326>
   1a7d0:	000c      	movs	r4, r1
   1a7d2:	0017      	movs	r7, r2
   1a7d4:	0006      	movs	r6, r0
   1a7d6:	46d8      	mov	r8, fp
   1a7d8:	e698      	b.n	1a50c <__aeabi_dadd+0x108>
   1a7da:	4b90      	ldr	r3, [pc, #576]	; (1aa1c <__aeabi_dadd+0x618>)
   1a7dc:	459a      	cmp	sl, r3
   1a7de:	d00b      	beq.n	1a7f8 <__aeabi_dadd+0x3f4>
   1a7e0:	4682      	mov	sl, r0
   1a7e2:	e6e7      	b.n	1a5b4 <__aeabi_dadd+0x1b0>
   1a7e4:	2800      	cmp	r0, #0
   1a7e6:	d000      	beq.n	1a7ea <__aeabi_dadd+0x3e6>
   1a7e8:	e09e      	b.n	1a928 <__aeabi_dadd+0x524>
   1a7ea:	0018      	movs	r0, r3
   1a7ec:	4310      	orrs	r0, r2
   1a7ee:	d100      	bne.n	1a7f2 <__aeabi_dadd+0x3ee>
   1a7f0:	e0e9      	b.n	1a9c6 <__aeabi_dadd+0x5c2>
   1a7f2:	001c      	movs	r4, r3
   1a7f4:	0017      	movs	r7, r2
   1a7f6:	46d8      	mov	r8, fp
   1a7f8:	4e88      	ldr	r6, [pc, #544]	; (1aa1c <__aeabi_dadd+0x618>)
   1a7fa:	e687      	b.n	1a50c <__aeabi_dadd+0x108>
   1a7fc:	2500      	movs	r5, #0
   1a7fe:	e772      	b.n	1a6e6 <__aeabi_dadd+0x2e2>
   1a800:	2100      	movs	r1, #0
   1a802:	e782      	b.n	1a70a <__aeabi_dadd+0x306>
   1a804:	0023      	movs	r3, r4
   1a806:	433b      	orrs	r3, r7
   1a808:	2e00      	cmp	r6, #0
   1a80a:	d000      	beq.n	1a80e <__aeabi_dadd+0x40a>
   1a80c:	e0ab      	b.n	1a966 <__aeabi_dadd+0x562>
   1a80e:	2b00      	cmp	r3, #0
   1a810:	d100      	bne.n	1a814 <__aeabi_dadd+0x410>
   1a812:	e0e7      	b.n	1a9e4 <__aeabi_dadd+0x5e0>
   1a814:	000b      	movs	r3, r1
   1a816:	4313      	orrs	r3, r2
   1a818:	d100      	bne.n	1a81c <__aeabi_dadd+0x418>
   1a81a:	e677      	b.n	1a50c <__aeabi_dadd+0x108>
   1a81c:	18ba      	adds	r2, r7, r2
   1a81e:	42ba      	cmp	r2, r7
   1a820:	41bf      	sbcs	r7, r7
   1a822:	1864      	adds	r4, r4, r1
   1a824:	427f      	negs	r7, r7
   1a826:	19e4      	adds	r4, r4, r7
   1a828:	0223      	lsls	r3, r4, #8
   1a82a:	d400      	bmi.n	1a82e <__aeabi_dadd+0x42a>
   1a82c:	e0f2      	b.n	1aa14 <__aeabi_dadd+0x610>
   1a82e:	4b7c      	ldr	r3, [pc, #496]	; (1aa20 <__aeabi_dadd+0x61c>)
   1a830:	0017      	movs	r7, r2
   1a832:	401c      	ands	r4, r3
   1a834:	0006      	movs	r6, r0
   1a836:	e669      	b.n	1a50c <__aeabi_dadd+0x108>
   1a838:	0020      	movs	r0, r4
   1a83a:	4338      	orrs	r0, r7
   1a83c:	2e00      	cmp	r6, #0
   1a83e:	d1d1      	bne.n	1a7e4 <__aeabi_dadd+0x3e0>
   1a840:	2800      	cmp	r0, #0
   1a842:	d15b      	bne.n	1a8fc <__aeabi_dadd+0x4f8>
   1a844:	001c      	movs	r4, r3
   1a846:	4314      	orrs	r4, r2
   1a848:	d100      	bne.n	1a84c <__aeabi_dadd+0x448>
   1a84a:	e0a8      	b.n	1a99e <__aeabi_dadd+0x59a>
   1a84c:	001c      	movs	r4, r3
   1a84e:	0017      	movs	r7, r2
   1a850:	46d8      	mov	r8, fp
   1a852:	e65b      	b.n	1a50c <__aeabi_dadd+0x108>
   1a854:	0006      	movs	r6, r0
   1a856:	2400      	movs	r4, #0
   1a858:	2700      	movs	r7, #0
   1a85a:	e697      	b.n	1a58c <__aeabi_dadd+0x188>
   1a85c:	4650      	mov	r0, sl
   1a85e:	000b      	movs	r3, r1
   1a860:	3820      	subs	r0, #32
   1a862:	40c3      	lsrs	r3, r0
   1a864:	4699      	mov	r9, r3
   1a866:	4653      	mov	r3, sl
   1a868:	2b20      	cmp	r3, #32
   1a86a:	d100      	bne.n	1a86e <__aeabi_dadd+0x46a>
   1a86c:	e095      	b.n	1a99a <__aeabi_dadd+0x596>
   1a86e:	2340      	movs	r3, #64	; 0x40
   1a870:	4650      	mov	r0, sl
   1a872:	1a1b      	subs	r3, r3, r0
   1a874:	4099      	lsls	r1, r3
   1a876:	430a      	orrs	r2, r1
   1a878:	1e51      	subs	r1, r2, #1
   1a87a:	418a      	sbcs	r2, r1
   1a87c:	464b      	mov	r3, r9
   1a87e:	2100      	movs	r1, #0
   1a880:	431a      	orrs	r2, r3
   1a882:	e69f      	b.n	1a5c4 <__aeabi_dadd+0x1c0>
   1a884:	2e00      	cmp	r6, #0
   1a886:	d130      	bne.n	1a8ea <__aeabi_dadd+0x4e6>
   1a888:	0026      	movs	r6, r4
   1a88a:	433e      	orrs	r6, r7
   1a88c:	d067      	beq.n	1a95e <__aeabi_dadd+0x55a>
   1a88e:	43db      	mvns	r3, r3
   1a890:	469a      	mov	sl, r3
   1a892:	2b00      	cmp	r3, #0
   1a894:	d01c      	beq.n	1a8d0 <__aeabi_dadd+0x4cc>
   1a896:	4e61      	ldr	r6, [pc, #388]	; (1aa1c <__aeabi_dadd+0x618>)
   1a898:	42b0      	cmp	r0, r6
   1a89a:	d060      	beq.n	1a95e <__aeabi_dadd+0x55a>
   1a89c:	4653      	mov	r3, sl
   1a89e:	2b38      	cmp	r3, #56	; 0x38
   1a8a0:	dd00      	ble.n	1a8a4 <__aeabi_dadd+0x4a0>
   1a8a2:	e096      	b.n	1a9d2 <__aeabi_dadd+0x5ce>
   1a8a4:	2b1f      	cmp	r3, #31
   1a8a6:	dd00      	ble.n	1a8aa <__aeabi_dadd+0x4a6>
   1a8a8:	e09f      	b.n	1a9ea <__aeabi_dadd+0x5e6>
   1a8aa:	2620      	movs	r6, #32
   1a8ac:	1af3      	subs	r3, r6, r3
   1a8ae:	0026      	movs	r6, r4
   1a8b0:	409e      	lsls	r6, r3
   1a8b2:	469c      	mov	ip, r3
   1a8b4:	46b3      	mov	fp, r6
   1a8b6:	4653      	mov	r3, sl
   1a8b8:	003e      	movs	r6, r7
   1a8ba:	40de      	lsrs	r6, r3
   1a8bc:	0033      	movs	r3, r6
   1a8be:	465e      	mov	r6, fp
   1a8c0:	431e      	orrs	r6, r3
   1a8c2:	4663      	mov	r3, ip
   1a8c4:	409f      	lsls	r7, r3
   1a8c6:	1e7b      	subs	r3, r7, #1
   1a8c8:	419f      	sbcs	r7, r3
   1a8ca:	4653      	mov	r3, sl
   1a8cc:	40dc      	lsrs	r4, r3
   1a8ce:	4337      	orrs	r7, r6
   1a8d0:	18bf      	adds	r7, r7, r2
   1a8d2:	4297      	cmp	r7, r2
   1a8d4:	4192      	sbcs	r2, r2
   1a8d6:	1864      	adds	r4, r4, r1
   1a8d8:	4252      	negs	r2, r2
   1a8da:	18a4      	adds	r4, r4, r2
   1a8dc:	0006      	movs	r6, r0
   1a8de:	e678      	b.n	1a5d2 <__aeabi_dadd+0x1ce>
   1a8e0:	4327      	orrs	r7, r4
   1a8e2:	1e7c      	subs	r4, r7, #1
   1a8e4:	41a7      	sbcs	r7, r4
   1a8e6:	2400      	movs	r4, #0
   1a8e8:	e737      	b.n	1a75a <__aeabi_dadd+0x356>
   1a8ea:	4e4c      	ldr	r6, [pc, #304]	; (1aa1c <__aeabi_dadd+0x618>)
   1a8ec:	42b0      	cmp	r0, r6
   1a8ee:	d036      	beq.n	1a95e <__aeabi_dadd+0x55a>
   1a8f0:	2680      	movs	r6, #128	; 0x80
   1a8f2:	425b      	negs	r3, r3
   1a8f4:	0436      	lsls	r6, r6, #16
   1a8f6:	469a      	mov	sl, r3
   1a8f8:	4334      	orrs	r4, r6
   1a8fa:	e7cf      	b.n	1a89c <__aeabi_dadd+0x498>
   1a8fc:	0018      	movs	r0, r3
   1a8fe:	4310      	orrs	r0, r2
   1a900:	d100      	bne.n	1a904 <__aeabi_dadd+0x500>
   1a902:	e603      	b.n	1a50c <__aeabi_dadd+0x108>
   1a904:	1ab8      	subs	r0, r7, r2
   1a906:	4684      	mov	ip, r0
   1a908:	4567      	cmp	r7, ip
   1a90a:	41ad      	sbcs	r5, r5
   1a90c:	1ae0      	subs	r0, r4, r3
   1a90e:	426d      	negs	r5, r5
   1a910:	1b40      	subs	r0, r0, r5
   1a912:	0205      	lsls	r5, r0, #8
   1a914:	d400      	bmi.n	1a918 <__aeabi_dadd+0x514>
   1a916:	e62c      	b.n	1a572 <__aeabi_dadd+0x16e>
   1a918:	1bd7      	subs	r7, r2, r7
   1a91a:	42ba      	cmp	r2, r7
   1a91c:	4192      	sbcs	r2, r2
   1a91e:	1b1c      	subs	r4, r3, r4
   1a920:	4252      	negs	r2, r2
   1a922:	1aa4      	subs	r4, r4, r2
   1a924:	46d8      	mov	r8, fp
   1a926:	e5f1      	b.n	1a50c <__aeabi_dadd+0x108>
   1a928:	0018      	movs	r0, r3
   1a92a:	4310      	orrs	r0, r2
   1a92c:	d100      	bne.n	1a930 <__aeabi_dadd+0x52c>
   1a92e:	e763      	b.n	1a7f8 <__aeabi_dadd+0x3f4>
   1a930:	08f8      	lsrs	r0, r7, #3
   1a932:	0767      	lsls	r7, r4, #29
   1a934:	4307      	orrs	r7, r0
   1a936:	2080      	movs	r0, #128	; 0x80
   1a938:	08e4      	lsrs	r4, r4, #3
   1a93a:	0300      	lsls	r0, r0, #12
   1a93c:	4204      	tst	r4, r0
   1a93e:	d008      	beq.n	1a952 <__aeabi_dadd+0x54e>
   1a940:	08dd      	lsrs	r5, r3, #3
   1a942:	4205      	tst	r5, r0
   1a944:	d105      	bne.n	1a952 <__aeabi_dadd+0x54e>
   1a946:	08d2      	lsrs	r2, r2, #3
   1a948:	0759      	lsls	r1, r3, #29
   1a94a:	4311      	orrs	r1, r2
   1a94c:	000f      	movs	r7, r1
   1a94e:	002c      	movs	r4, r5
   1a950:	46d8      	mov	r8, fp
   1a952:	0f7b      	lsrs	r3, r7, #29
   1a954:	00e4      	lsls	r4, r4, #3
   1a956:	431c      	orrs	r4, r3
   1a958:	00ff      	lsls	r7, r7, #3
   1a95a:	4e30      	ldr	r6, [pc, #192]	; (1aa1c <__aeabi_dadd+0x618>)
   1a95c:	e5d6      	b.n	1a50c <__aeabi_dadd+0x108>
   1a95e:	000c      	movs	r4, r1
   1a960:	0017      	movs	r7, r2
   1a962:	0006      	movs	r6, r0
   1a964:	e5d2      	b.n	1a50c <__aeabi_dadd+0x108>
   1a966:	2b00      	cmp	r3, #0
   1a968:	d038      	beq.n	1a9dc <__aeabi_dadd+0x5d8>
   1a96a:	000b      	movs	r3, r1
   1a96c:	4313      	orrs	r3, r2
   1a96e:	d100      	bne.n	1a972 <__aeabi_dadd+0x56e>
   1a970:	e742      	b.n	1a7f8 <__aeabi_dadd+0x3f4>
   1a972:	08f8      	lsrs	r0, r7, #3
   1a974:	0767      	lsls	r7, r4, #29
   1a976:	4307      	orrs	r7, r0
   1a978:	2080      	movs	r0, #128	; 0x80
   1a97a:	08e4      	lsrs	r4, r4, #3
   1a97c:	0300      	lsls	r0, r0, #12
   1a97e:	4204      	tst	r4, r0
   1a980:	d0e7      	beq.n	1a952 <__aeabi_dadd+0x54e>
   1a982:	08cb      	lsrs	r3, r1, #3
   1a984:	4203      	tst	r3, r0
   1a986:	d1e4      	bne.n	1a952 <__aeabi_dadd+0x54e>
   1a988:	08d2      	lsrs	r2, r2, #3
   1a98a:	0749      	lsls	r1, r1, #29
   1a98c:	4311      	orrs	r1, r2
   1a98e:	000f      	movs	r7, r1
   1a990:	001c      	movs	r4, r3
   1a992:	e7de      	b.n	1a952 <__aeabi_dadd+0x54e>
   1a994:	2700      	movs	r7, #0
   1a996:	2400      	movs	r4, #0
   1a998:	e5d5      	b.n	1a546 <__aeabi_dadd+0x142>
   1a99a:	2100      	movs	r1, #0
   1a99c:	e76b      	b.n	1a876 <__aeabi_dadd+0x472>
   1a99e:	2500      	movs	r5, #0
   1a9a0:	2700      	movs	r7, #0
   1a9a2:	e5f3      	b.n	1a58c <__aeabi_dadd+0x188>
   1a9a4:	464e      	mov	r6, r9
   1a9a6:	0025      	movs	r5, r4
   1a9a8:	3e20      	subs	r6, #32
   1a9aa:	40f5      	lsrs	r5, r6
   1a9ac:	464b      	mov	r3, r9
   1a9ae:	002e      	movs	r6, r5
   1a9b0:	2b20      	cmp	r3, #32
   1a9b2:	d02d      	beq.n	1aa10 <__aeabi_dadd+0x60c>
   1a9b4:	2540      	movs	r5, #64	; 0x40
   1a9b6:	1aed      	subs	r5, r5, r3
   1a9b8:	40ac      	lsls	r4, r5
   1a9ba:	4327      	orrs	r7, r4
   1a9bc:	1e7c      	subs	r4, r7, #1
   1a9be:	41a7      	sbcs	r7, r4
   1a9c0:	2400      	movs	r4, #0
   1a9c2:	4337      	orrs	r7, r6
   1a9c4:	e6c9      	b.n	1a75a <__aeabi_dadd+0x356>
   1a9c6:	2480      	movs	r4, #128	; 0x80
   1a9c8:	2500      	movs	r5, #0
   1a9ca:	0324      	lsls	r4, r4, #12
   1a9cc:	4e13      	ldr	r6, [pc, #76]	; (1aa1c <__aeabi_dadd+0x618>)
   1a9ce:	2700      	movs	r7, #0
   1a9d0:	e5dc      	b.n	1a58c <__aeabi_dadd+0x188>
   1a9d2:	4327      	orrs	r7, r4
   1a9d4:	1e7c      	subs	r4, r7, #1
   1a9d6:	41a7      	sbcs	r7, r4
   1a9d8:	2400      	movs	r4, #0
   1a9da:	e779      	b.n	1a8d0 <__aeabi_dadd+0x4cc>
   1a9dc:	000c      	movs	r4, r1
   1a9de:	0017      	movs	r7, r2
   1a9e0:	4e0e      	ldr	r6, [pc, #56]	; (1aa1c <__aeabi_dadd+0x618>)
   1a9e2:	e593      	b.n	1a50c <__aeabi_dadd+0x108>
   1a9e4:	000c      	movs	r4, r1
   1a9e6:	0017      	movs	r7, r2
   1a9e8:	e590      	b.n	1a50c <__aeabi_dadd+0x108>
   1a9ea:	4656      	mov	r6, sl
   1a9ec:	0023      	movs	r3, r4
   1a9ee:	3e20      	subs	r6, #32
   1a9f0:	40f3      	lsrs	r3, r6
   1a9f2:	4699      	mov	r9, r3
   1a9f4:	4653      	mov	r3, sl
   1a9f6:	2b20      	cmp	r3, #32
   1a9f8:	d00e      	beq.n	1aa18 <__aeabi_dadd+0x614>
   1a9fa:	2340      	movs	r3, #64	; 0x40
   1a9fc:	4656      	mov	r6, sl
   1a9fe:	1b9b      	subs	r3, r3, r6
   1aa00:	409c      	lsls	r4, r3
   1aa02:	4327      	orrs	r7, r4
   1aa04:	1e7c      	subs	r4, r7, #1
   1aa06:	41a7      	sbcs	r7, r4
   1aa08:	464b      	mov	r3, r9
   1aa0a:	2400      	movs	r4, #0
   1aa0c:	431f      	orrs	r7, r3
   1aa0e:	e75f      	b.n	1a8d0 <__aeabi_dadd+0x4cc>
   1aa10:	2400      	movs	r4, #0
   1aa12:	e7d2      	b.n	1a9ba <__aeabi_dadd+0x5b6>
   1aa14:	0017      	movs	r7, r2
   1aa16:	e5b2      	b.n	1a57e <__aeabi_dadd+0x17a>
   1aa18:	2400      	movs	r4, #0
   1aa1a:	e7f2      	b.n	1aa02 <__aeabi_dadd+0x5fe>
   1aa1c:	000007ff 	.word	0x000007ff
   1aa20:	ff7fffff 	.word	0xff7fffff

0001aa24 <__aeabi_ddiv>:
   1aa24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa26:	4657      	mov	r7, sl
   1aa28:	4645      	mov	r5, r8
   1aa2a:	46de      	mov	lr, fp
   1aa2c:	464e      	mov	r6, r9
   1aa2e:	b5e0      	push	{r5, r6, r7, lr}
   1aa30:	004c      	lsls	r4, r1, #1
   1aa32:	030e      	lsls	r6, r1, #12
   1aa34:	b087      	sub	sp, #28
   1aa36:	4683      	mov	fp, r0
   1aa38:	4692      	mov	sl, r2
   1aa3a:	001d      	movs	r5, r3
   1aa3c:	4680      	mov	r8, r0
   1aa3e:	0b36      	lsrs	r6, r6, #12
   1aa40:	0d64      	lsrs	r4, r4, #21
   1aa42:	0fcf      	lsrs	r7, r1, #31
   1aa44:	2c00      	cmp	r4, #0
   1aa46:	d04f      	beq.n	1aae8 <__aeabi_ddiv+0xc4>
   1aa48:	4b6f      	ldr	r3, [pc, #444]	; (1ac08 <__aeabi_ddiv+0x1e4>)
   1aa4a:	429c      	cmp	r4, r3
   1aa4c:	d035      	beq.n	1aaba <__aeabi_ddiv+0x96>
   1aa4e:	2380      	movs	r3, #128	; 0x80
   1aa50:	0f42      	lsrs	r2, r0, #29
   1aa52:	041b      	lsls	r3, r3, #16
   1aa54:	00f6      	lsls	r6, r6, #3
   1aa56:	4313      	orrs	r3, r2
   1aa58:	4333      	orrs	r3, r6
   1aa5a:	4699      	mov	r9, r3
   1aa5c:	00c3      	lsls	r3, r0, #3
   1aa5e:	4698      	mov	r8, r3
   1aa60:	4b6a      	ldr	r3, [pc, #424]	; (1ac0c <__aeabi_ddiv+0x1e8>)
   1aa62:	2600      	movs	r6, #0
   1aa64:	469c      	mov	ip, r3
   1aa66:	2300      	movs	r3, #0
   1aa68:	4464      	add	r4, ip
   1aa6a:	9303      	str	r3, [sp, #12]
   1aa6c:	032b      	lsls	r3, r5, #12
   1aa6e:	0b1b      	lsrs	r3, r3, #12
   1aa70:	469b      	mov	fp, r3
   1aa72:	006b      	lsls	r3, r5, #1
   1aa74:	0fed      	lsrs	r5, r5, #31
   1aa76:	4650      	mov	r0, sl
   1aa78:	0d5b      	lsrs	r3, r3, #21
   1aa7a:	9501      	str	r5, [sp, #4]
   1aa7c:	d05e      	beq.n	1ab3c <__aeabi_ddiv+0x118>
   1aa7e:	4a62      	ldr	r2, [pc, #392]	; (1ac08 <__aeabi_ddiv+0x1e4>)
   1aa80:	4293      	cmp	r3, r2
   1aa82:	d053      	beq.n	1ab2c <__aeabi_ddiv+0x108>
   1aa84:	465a      	mov	r2, fp
   1aa86:	00d1      	lsls	r1, r2, #3
   1aa88:	2280      	movs	r2, #128	; 0x80
   1aa8a:	0f40      	lsrs	r0, r0, #29
   1aa8c:	0412      	lsls	r2, r2, #16
   1aa8e:	4302      	orrs	r2, r0
   1aa90:	430a      	orrs	r2, r1
   1aa92:	4693      	mov	fp, r2
   1aa94:	4652      	mov	r2, sl
   1aa96:	00d1      	lsls	r1, r2, #3
   1aa98:	4a5c      	ldr	r2, [pc, #368]	; (1ac0c <__aeabi_ddiv+0x1e8>)
   1aa9a:	4694      	mov	ip, r2
   1aa9c:	2200      	movs	r2, #0
   1aa9e:	4463      	add	r3, ip
   1aaa0:	0038      	movs	r0, r7
   1aaa2:	4068      	eors	r0, r5
   1aaa4:	4684      	mov	ip, r0
   1aaa6:	9002      	str	r0, [sp, #8]
   1aaa8:	1ae4      	subs	r4, r4, r3
   1aaaa:	4316      	orrs	r6, r2
   1aaac:	2e0f      	cmp	r6, #15
   1aaae:	d900      	bls.n	1aab2 <__aeabi_ddiv+0x8e>
   1aab0:	e0b4      	b.n	1ac1c <__aeabi_ddiv+0x1f8>
   1aab2:	4b57      	ldr	r3, [pc, #348]	; (1ac10 <__aeabi_ddiv+0x1ec>)
   1aab4:	00b6      	lsls	r6, r6, #2
   1aab6:	599b      	ldr	r3, [r3, r6]
   1aab8:	469f      	mov	pc, r3
   1aaba:	0003      	movs	r3, r0
   1aabc:	4333      	orrs	r3, r6
   1aabe:	4699      	mov	r9, r3
   1aac0:	d16c      	bne.n	1ab9c <__aeabi_ddiv+0x178>
   1aac2:	2300      	movs	r3, #0
   1aac4:	4698      	mov	r8, r3
   1aac6:	3302      	adds	r3, #2
   1aac8:	2608      	movs	r6, #8
   1aaca:	9303      	str	r3, [sp, #12]
   1aacc:	e7ce      	b.n	1aa6c <__aeabi_ddiv+0x48>
   1aace:	46cb      	mov	fp, r9
   1aad0:	4641      	mov	r1, r8
   1aad2:	9a03      	ldr	r2, [sp, #12]
   1aad4:	9701      	str	r7, [sp, #4]
   1aad6:	2a02      	cmp	r2, #2
   1aad8:	d165      	bne.n	1aba6 <__aeabi_ddiv+0x182>
   1aada:	9b01      	ldr	r3, [sp, #4]
   1aadc:	4c4a      	ldr	r4, [pc, #296]	; (1ac08 <__aeabi_ddiv+0x1e4>)
   1aade:	469c      	mov	ip, r3
   1aae0:	2300      	movs	r3, #0
   1aae2:	2200      	movs	r2, #0
   1aae4:	4698      	mov	r8, r3
   1aae6:	e06b      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1aae8:	0003      	movs	r3, r0
   1aaea:	4333      	orrs	r3, r6
   1aaec:	4699      	mov	r9, r3
   1aaee:	d04e      	beq.n	1ab8e <__aeabi_ddiv+0x16a>
   1aaf0:	2e00      	cmp	r6, #0
   1aaf2:	d100      	bne.n	1aaf6 <__aeabi_ddiv+0xd2>
   1aaf4:	e1bc      	b.n	1ae70 <__aeabi_ddiv+0x44c>
   1aaf6:	0030      	movs	r0, r6
   1aaf8:	f001 fae8 	bl	1c0cc <__clzsi2>
   1aafc:	0003      	movs	r3, r0
   1aafe:	3b0b      	subs	r3, #11
   1ab00:	2b1c      	cmp	r3, #28
   1ab02:	dd00      	ble.n	1ab06 <__aeabi_ddiv+0xe2>
   1ab04:	e1ac      	b.n	1ae60 <__aeabi_ddiv+0x43c>
   1ab06:	221d      	movs	r2, #29
   1ab08:	1ad3      	subs	r3, r2, r3
   1ab0a:	465a      	mov	r2, fp
   1ab0c:	0001      	movs	r1, r0
   1ab0e:	40da      	lsrs	r2, r3
   1ab10:	3908      	subs	r1, #8
   1ab12:	408e      	lsls	r6, r1
   1ab14:	0013      	movs	r3, r2
   1ab16:	4333      	orrs	r3, r6
   1ab18:	4699      	mov	r9, r3
   1ab1a:	465b      	mov	r3, fp
   1ab1c:	408b      	lsls	r3, r1
   1ab1e:	4698      	mov	r8, r3
   1ab20:	2300      	movs	r3, #0
   1ab22:	4c3c      	ldr	r4, [pc, #240]	; (1ac14 <__aeabi_ddiv+0x1f0>)
   1ab24:	2600      	movs	r6, #0
   1ab26:	1a24      	subs	r4, r4, r0
   1ab28:	9303      	str	r3, [sp, #12]
   1ab2a:	e79f      	b.n	1aa6c <__aeabi_ddiv+0x48>
   1ab2c:	4651      	mov	r1, sl
   1ab2e:	465a      	mov	r2, fp
   1ab30:	4311      	orrs	r1, r2
   1ab32:	d129      	bne.n	1ab88 <__aeabi_ddiv+0x164>
   1ab34:	2200      	movs	r2, #0
   1ab36:	4693      	mov	fp, r2
   1ab38:	3202      	adds	r2, #2
   1ab3a:	e7b1      	b.n	1aaa0 <__aeabi_ddiv+0x7c>
   1ab3c:	4659      	mov	r1, fp
   1ab3e:	4301      	orrs	r1, r0
   1ab40:	d01e      	beq.n	1ab80 <__aeabi_ddiv+0x15c>
   1ab42:	465b      	mov	r3, fp
   1ab44:	2b00      	cmp	r3, #0
   1ab46:	d100      	bne.n	1ab4a <__aeabi_ddiv+0x126>
   1ab48:	e19e      	b.n	1ae88 <__aeabi_ddiv+0x464>
   1ab4a:	4658      	mov	r0, fp
   1ab4c:	f001 fabe 	bl	1c0cc <__clzsi2>
   1ab50:	0003      	movs	r3, r0
   1ab52:	3b0b      	subs	r3, #11
   1ab54:	2b1c      	cmp	r3, #28
   1ab56:	dd00      	ble.n	1ab5a <__aeabi_ddiv+0x136>
   1ab58:	e18f      	b.n	1ae7a <__aeabi_ddiv+0x456>
   1ab5a:	0002      	movs	r2, r0
   1ab5c:	4659      	mov	r1, fp
   1ab5e:	3a08      	subs	r2, #8
   1ab60:	4091      	lsls	r1, r2
   1ab62:	468b      	mov	fp, r1
   1ab64:	211d      	movs	r1, #29
   1ab66:	1acb      	subs	r3, r1, r3
   1ab68:	4651      	mov	r1, sl
   1ab6a:	40d9      	lsrs	r1, r3
   1ab6c:	000b      	movs	r3, r1
   1ab6e:	4659      	mov	r1, fp
   1ab70:	430b      	orrs	r3, r1
   1ab72:	4651      	mov	r1, sl
   1ab74:	469b      	mov	fp, r3
   1ab76:	4091      	lsls	r1, r2
   1ab78:	4b26      	ldr	r3, [pc, #152]	; (1ac14 <__aeabi_ddiv+0x1f0>)
   1ab7a:	2200      	movs	r2, #0
   1ab7c:	1a1b      	subs	r3, r3, r0
   1ab7e:	e78f      	b.n	1aaa0 <__aeabi_ddiv+0x7c>
   1ab80:	2300      	movs	r3, #0
   1ab82:	2201      	movs	r2, #1
   1ab84:	469b      	mov	fp, r3
   1ab86:	e78b      	b.n	1aaa0 <__aeabi_ddiv+0x7c>
   1ab88:	4651      	mov	r1, sl
   1ab8a:	2203      	movs	r2, #3
   1ab8c:	e788      	b.n	1aaa0 <__aeabi_ddiv+0x7c>
   1ab8e:	2300      	movs	r3, #0
   1ab90:	4698      	mov	r8, r3
   1ab92:	3301      	adds	r3, #1
   1ab94:	2604      	movs	r6, #4
   1ab96:	2400      	movs	r4, #0
   1ab98:	9303      	str	r3, [sp, #12]
   1ab9a:	e767      	b.n	1aa6c <__aeabi_ddiv+0x48>
   1ab9c:	2303      	movs	r3, #3
   1ab9e:	46b1      	mov	r9, r6
   1aba0:	9303      	str	r3, [sp, #12]
   1aba2:	260c      	movs	r6, #12
   1aba4:	e762      	b.n	1aa6c <__aeabi_ddiv+0x48>
   1aba6:	2a03      	cmp	r2, #3
   1aba8:	d100      	bne.n	1abac <__aeabi_ddiv+0x188>
   1abaa:	e25c      	b.n	1b066 <__aeabi_ddiv+0x642>
   1abac:	9b01      	ldr	r3, [sp, #4]
   1abae:	2a01      	cmp	r2, #1
   1abb0:	d000      	beq.n	1abb4 <__aeabi_ddiv+0x190>
   1abb2:	e1e4      	b.n	1af7e <__aeabi_ddiv+0x55a>
   1abb4:	4013      	ands	r3, r2
   1abb6:	469c      	mov	ip, r3
   1abb8:	2300      	movs	r3, #0
   1abba:	2400      	movs	r4, #0
   1abbc:	2200      	movs	r2, #0
   1abbe:	4698      	mov	r8, r3
   1abc0:	2100      	movs	r1, #0
   1abc2:	0312      	lsls	r2, r2, #12
   1abc4:	0b13      	lsrs	r3, r2, #12
   1abc6:	0d0a      	lsrs	r2, r1, #20
   1abc8:	0512      	lsls	r2, r2, #20
   1abca:	431a      	orrs	r2, r3
   1abcc:	0523      	lsls	r3, r4, #20
   1abce:	4c12      	ldr	r4, [pc, #72]	; (1ac18 <__aeabi_ddiv+0x1f4>)
   1abd0:	4640      	mov	r0, r8
   1abd2:	4022      	ands	r2, r4
   1abd4:	4313      	orrs	r3, r2
   1abd6:	4662      	mov	r2, ip
   1abd8:	005b      	lsls	r3, r3, #1
   1abda:	07d2      	lsls	r2, r2, #31
   1abdc:	085b      	lsrs	r3, r3, #1
   1abde:	4313      	orrs	r3, r2
   1abe0:	0019      	movs	r1, r3
   1abe2:	b007      	add	sp, #28
   1abe4:	bc3c      	pop	{r2, r3, r4, r5}
   1abe6:	4690      	mov	r8, r2
   1abe8:	4699      	mov	r9, r3
   1abea:	46a2      	mov	sl, r4
   1abec:	46ab      	mov	fp, r5
   1abee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abf0:	2300      	movs	r3, #0
   1abf2:	2280      	movs	r2, #128	; 0x80
   1abf4:	469c      	mov	ip, r3
   1abf6:	0312      	lsls	r2, r2, #12
   1abf8:	4698      	mov	r8, r3
   1abfa:	4c03      	ldr	r4, [pc, #12]	; (1ac08 <__aeabi_ddiv+0x1e4>)
   1abfc:	e7e0      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1abfe:	2300      	movs	r3, #0
   1ac00:	4c01      	ldr	r4, [pc, #4]	; (1ac08 <__aeabi_ddiv+0x1e4>)
   1ac02:	2200      	movs	r2, #0
   1ac04:	4698      	mov	r8, r3
   1ac06:	e7db      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1ac08:	000007ff 	.word	0x000007ff
   1ac0c:	fffffc01 	.word	0xfffffc01
   1ac10:	0001cc54 	.word	0x0001cc54
   1ac14:	fffffc0d 	.word	0xfffffc0d
   1ac18:	800fffff 	.word	0x800fffff
   1ac1c:	45d9      	cmp	r9, fp
   1ac1e:	d900      	bls.n	1ac22 <__aeabi_ddiv+0x1fe>
   1ac20:	e139      	b.n	1ae96 <__aeabi_ddiv+0x472>
   1ac22:	d100      	bne.n	1ac26 <__aeabi_ddiv+0x202>
   1ac24:	e134      	b.n	1ae90 <__aeabi_ddiv+0x46c>
   1ac26:	2300      	movs	r3, #0
   1ac28:	4646      	mov	r6, r8
   1ac2a:	464d      	mov	r5, r9
   1ac2c:	469a      	mov	sl, r3
   1ac2e:	3c01      	subs	r4, #1
   1ac30:	465b      	mov	r3, fp
   1ac32:	0e0a      	lsrs	r2, r1, #24
   1ac34:	021b      	lsls	r3, r3, #8
   1ac36:	431a      	orrs	r2, r3
   1ac38:	020b      	lsls	r3, r1, #8
   1ac3a:	0c17      	lsrs	r7, r2, #16
   1ac3c:	9303      	str	r3, [sp, #12]
   1ac3e:	0413      	lsls	r3, r2, #16
   1ac40:	0c1b      	lsrs	r3, r3, #16
   1ac42:	0039      	movs	r1, r7
   1ac44:	0028      	movs	r0, r5
   1ac46:	4690      	mov	r8, r2
   1ac48:	9301      	str	r3, [sp, #4]
   1ac4a:	f7fe fa99 	bl	19180 <__udivsi3>
   1ac4e:	0002      	movs	r2, r0
   1ac50:	9b01      	ldr	r3, [sp, #4]
   1ac52:	4683      	mov	fp, r0
   1ac54:	435a      	muls	r2, r3
   1ac56:	0028      	movs	r0, r5
   1ac58:	0039      	movs	r1, r7
   1ac5a:	4691      	mov	r9, r2
   1ac5c:	f7fe fb16 	bl	1928c <__aeabi_uidivmod>
   1ac60:	0c35      	lsrs	r5, r6, #16
   1ac62:	0409      	lsls	r1, r1, #16
   1ac64:	430d      	orrs	r5, r1
   1ac66:	45a9      	cmp	r9, r5
   1ac68:	d90d      	bls.n	1ac86 <__aeabi_ddiv+0x262>
   1ac6a:	465b      	mov	r3, fp
   1ac6c:	4445      	add	r5, r8
   1ac6e:	3b01      	subs	r3, #1
   1ac70:	45a8      	cmp	r8, r5
   1ac72:	d900      	bls.n	1ac76 <__aeabi_ddiv+0x252>
   1ac74:	e13a      	b.n	1aeec <__aeabi_ddiv+0x4c8>
   1ac76:	45a9      	cmp	r9, r5
   1ac78:	d800      	bhi.n	1ac7c <__aeabi_ddiv+0x258>
   1ac7a:	e137      	b.n	1aeec <__aeabi_ddiv+0x4c8>
   1ac7c:	2302      	movs	r3, #2
   1ac7e:	425b      	negs	r3, r3
   1ac80:	469c      	mov	ip, r3
   1ac82:	4445      	add	r5, r8
   1ac84:	44e3      	add	fp, ip
   1ac86:	464b      	mov	r3, r9
   1ac88:	1aeb      	subs	r3, r5, r3
   1ac8a:	0039      	movs	r1, r7
   1ac8c:	0018      	movs	r0, r3
   1ac8e:	9304      	str	r3, [sp, #16]
   1ac90:	f7fe fa76 	bl	19180 <__udivsi3>
   1ac94:	9b01      	ldr	r3, [sp, #4]
   1ac96:	0005      	movs	r5, r0
   1ac98:	4343      	muls	r3, r0
   1ac9a:	0039      	movs	r1, r7
   1ac9c:	9804      	ldr	r0, [sp, #16]
   1ac9e:	4699      	mov	r9, r3
   1aca0:	f7fe faf4 	bl	1928c <__aeabi_uidivmod>
   1aca4:	0433      	lsls	r3, r6, #16
   1aca6:	0409      	lsls	r1, r1, #16
   1aca8:	0c1b      	lsrs	r3, r3, #16
   1acaa:	430b      	orrs	r3, r1
   1acac:	4599      	cmp	r9, r3
   1acae:	d909      	bls.n	1acc4 <__aeabi_ddiv+0x2a0>
   1acb0:	4443      	add	r3, r8
   1acb2:	1e6a      	subs	r2, r5, #1
   1acb4:	4598      	cmp	r8, r3
   1acb6:	d900      	bls.n	1acba <__aeabi_ddiv+0x296>
   1acb8:	e11a      	b.n	1aef0 <__aeabi_ddiv+0x4cc>
   1acba:	4599      	cmp	r9, r3
   1acbc:	d800      	bhi.n	1acc0 <__aeabi_ddiv+0x29c>
   1acbe:	e117      	b.n	1aef0 <__aeabi_ddiv+0x4cc>
   1acc0:	3d02      	subs	r5, #2
   1acc2:	4443      	add	r3, r8
   1acc4:	464a      	mov	r2, r9
   1acc6:	1a9b      	subs	r3, r3, r2
   1acc8:	465a      	mov	r2, fp
   1acca:	0412      	lsls	r2, r2, #16
   1accc:	432a      	orrs	r2, r5
   1acce:	9903      	ldr	r1, [sp, #12]
   1acd0:	4693      	mov	fp, r2
   1acd2:	0c10      	lsrs	r0, r2, #16
   1acd4:	0c0a      	lsrs	r2, r1, #16
   1acd6:	4691      	mov	r9, r2
   1acd8:	0409      	lsls	r1, r1, #16
   1acda:	465a      	mov	r2, fp
   1acdc:	0c09      	lsrs	r1, r1, #16
   1acde:	464e      	mov	r6, r9
   1ace0:	000d      	movs	r5, r1
   1ace2:	0412      	lsls	r2, r2, #16
   1ace4:	0c12      	lsrs	r2, r2, #16
   1ace6:	4345      	muls	r5, r0
   1ace8:	9105      	str	r1, [sp, #20]
   1acea:	4351      	muls	r1, r2
   1acec:	4372      	muls	r2, r6
   1acee:	4370      	muls	r0, r6
   1acf0:	1952      	adds	r2, r2, r5
   1acf2:	0c0e      	lsrs	r6, r1, #16
   1acf4:	18b2      	adds	r2, r6, r2
   1acf6:	4295      	cmp	r5, r2
   1acf8:	d903      	bls.n	1ad02 <__aeabi_ddiv+0x2de>
   1acfa:	2580      	movs	r5, #128	; 0x80
   1acfc:	026d      	lsls	r5, r5, #9
   1acfe:	46ac      	mov	ip, r5
   1ad00:	4460      	add	r0, ip
   1ad02:	0c15      	lsrs	r5, r2, #16
   1ad04:	0409      	lsls	r1, r1, #16
   1ad06:	0412      	lsls	r2, r2, #16
   1ad08:	0c09      	lsrs	r1, r1, #16
   1ad0a:	1828      	adds	r0, r5, r0
   1ad0c:	1852      	adds	r2, r2, r1
   1ad0e:	4283      	cmp	r3, r0
   1ad10:	d200      	bcs.n	1ad14 <__aeabi_ddiv+0x2f0>
   1ad12:	e0ce      	b.n	1aeb2 <__aeabi_ddiv+0x48e>
   1ad14:	d100      	bne.n	1ad18 <__aeabi_ddiv+0x2f4>
   1ad16:	e0c8      	b.n	1aeaa <__aeabi_ddiv+0x486>
   1ad18:	1a1d      	subs	r5, r3, r0
   1ad1a:	4653      	mov	r3, sl
   1ad1c:	1a9e      	subs	r6, r3, r2
   1ad1e:	45b2      	cmp	sl, r6
   1ad20:	4192      	sbcs	r2, r2
   1ad22:	4252      	negs	r2, r2
   1ad24:	1aab      	subs	r3, r5, r2
   1ad26:	469a      	mov	sl, r3
   1ad28:	4598      	cmp	r8, r3
   1ad2a:	d100      	bne.n	1ad2e <__aeabi_ddiv+0x30a>
   1ad2c:	e117      	b.n	1af5e <__aeabi_ddiv+0x53a>
   1ad2e:	0039      	movs	r1, r7
   1ad30:	0018      	movs	r0, r3
   1ad32:	f7fe fa25 	bl	19180 <__udivsi3>
   1ad36:	9b01      	ldr	r3, [sp, #4]
   1ad38:	0005      	movs	r5, r0
   1ad3a:	4343      	muls	r3, r0
   1ad3c:	0039      	movs	r1, r7
   1ad3e:	4650      	mov	r0, sl
   1ad40:	9304      	str	r3, [sp, #16]
   1ad42:	f7fe faa3 	bl	1928c <__aeabi_uidivmod>
   1ad46:	9804      	ldr	r0, [sp, #16]
   1ad48:	040b      	lsls	r3, r1, #16
   1ad4a:	0c31      	lsrs	r1, r6, #16
   1ad4c:	4319      	orrs	r1, r3
   1ad4e:	4288      	cmp	r0, r1
   1ad50:	d909      	bls.n	1ad66 <__aeabi_ddiv+0x342>
   1ad52:	4441      	add	r1, r8
   1ad54:	1e6b      	subs	r3, r5, #1
   1ad56:	4588      	cmp	r8, r1
   1ad58:	d900      	bls.n	1ad5c <__aeabi_ddiv+0x338>
   1ad5a:	e107      	b.n	1af6c <__aeabi_ddiv+0x548>
   1ad5c:	4288      	cmp	r0, r1
   1ad5e:	d800      	bhi.n	1ad62 <__aeabi_ddiv+0x33e>
   1ad60:	e104      	b.n	1af6c <__aeabi_ddiv+0x548>
   1ad62:	3d02      	subs	r5, #2
   1ad64:	4441      	add	r1, r8
   1ad66:	9b04      	ldr	r3, [sp, #16]
   1ad68:	1acb      	subs	r3, r1, r3
   1ad6a:	0018      	movs	r0, r3
   1ad6c:	0039      	movs	r1, r7
   1ad6e:	9304      	str	r3, [sp, #16]
   1ad70:	f7fe fa06 	bl	19180 <__udivsi3>
   1ad74:	9b01      	ldr	r3, [sp, #4]
   1ad76:	4682      	mov	sl, r0
   1ad78:	4343      	muls	r3, r0
   1ad7a:	0039      	movs	r1, r7
   1ad7c:	9804      	ldr	r0, [sp, #16]
   1ad7e:	9301      	str	r3, [sp, #4]
   1ad80:	f7fe fa84 	bl	1928c <__aeabi_uidivmod>
   1ad84:	9801      	ldr	r0, [sp, #4]
   1ad86:	040b      	lsls	r3, r1, #16
   1ad88:	0431      	lsls	r1, r6, #16
   1ad8a:	0c09      	lsrs	r1, r1, #16
   1ad8c:	4319      	orrs	r1, r3
   1ad8e:	4288      	cmp	r0, r1
   1ad90:	d90d      	bls.n	1adae <__aeabi_ddiv+0x38a>
   1ad92:	4653      	mov	r3, sl
   1ad94:	4441      	add	r1, r8
   1ad96:	3b01      	subs	r3, #1
   1ad98:	4588      	cmp	r8, r1
   1ad9a:	d900      	bls.n	1ad9e <__aeabi_ddiv+0x37a>
   1ad9c:	e0e8      	b.n	1af70 <__aeabi_ddiv+0x54c>
   1ad9e:	4288      	cmp	r0, r1
   1ada0:	d800      	bhi.n	1ada4 <__aeabi_ddiv+0x380>
   1ada2:	e0e5      	b.n	1af70 <__aeabi_ddiv+0x54c>
   1ada4:	2302      	movs	r3, #2
   1ada6:	425b      	negs	r3, r3
   1ada8:	469c      	mov	ip, r3
   1adaa:	4441      	add	r1, r8
   1adac:	44e2      	add	sl, ip
   1adae:	9b01      	ldr	r3, [sp, #4]
   1adb0:	042d      	lsls	r5, r5, #16
   1adb2:	1ace      	subs	r6, r1, r3
   1adb4:	4651      	mov	r1, sl
   1adb6:	4329      	orrs	r1, r5
   1adb8:	9d05      	ldr	r5, [sp, #20]
   1adba:	464f      	mov	r7, r9
   1adbc:	002a      	movs	r2, r5
   1adbe:	040b      	lsls	r3, r1, #16
   1adc0:	0c08      	lsrs	r0, r1, #16
   1adc2:	0c1b      	lsrs	r3, r3, #16
   1adc4:	435a      	muls	r2, r3
   1adc6:	4345      	muls	r5, r0
   1adc8:	437b      	muls	r3, r7
   1adca:	4378      	muls	r0, r7
   1adcc:	195b      	adds	r3, r3, r5
   1adce:	0c17      	lsrs	r7, r2, #16
   1add0:	18fb      	adds	r3, r7, r3
   1add2:	429d      	cmp	r5, r3
   1add4:	d903      	bls.n	1adde <__aeabi_ddiv+0x3ba>
   1add6:	2580      	movs	r5, #128	; 0x80
   1add8:	026d      	lsls	r5, r5, #9
   1adda:	46ac      	mov	ip, r5
   1addc:	4460      	add	r0, ip
   1adde:	0c1d      	lsrs	r5, r3, #16
   1ade0:	0412      	lsls	r2, r2, #16
   1ade2:	041b      	lsls	r3, r3, #16
   1ade4:	0c12      	lsrs	r2, r2, #16
   1ade6:	1828      	adds	r0, r5, r0
   1ade8:	189b      	adds	r3, r3, r2
   1adea:	4286      	cmp	r6, r0
   1adec:	d200      	bcs.n	1adf0 <__aeabi_ddiv+0x3cc>
   1adee:	e093      	b.n	1af18 <__aeabi_ddiv+0x4f4>
   1adf0:	d100      	bne.n	1adf4 <__aeabi_ddiv+0x3d0>
   1adf2:	e08e      	b.n	1af12 <__aeabi_ddiv+0x4ee>
   1adf4:	2301      	movs	r3, #1
   1adf6:	4319      	orrs	r1, r3
   1adf8:	4ba0      	ldr	r3, [pc, #640]	; (1b07c <__aeabi_ddiv+0x658>)
   1adfa:	18e3      	adds	r3, r4, r3
   1adfc:	2b00      	cmp	r3, #0
   1adfe:	dc00      	bgt.n	1ae02 <__aeabi_ddiv+0x3de>
   1ae00:	e099      	b.n	1af36 <__aeabi_ddiv+0x512>
   1ae02:	074a      	lsls	r2, r1, #29
   1ae04:	d000      	beq.n	1ae08 <__aeabi_ddiv+0x3e4>
   1ae06:	e09e      	b.n	1af46 <__aeabi_ddiv+0x522>
   1ae08:	465a      	mov	r2, fp
   1ae0a:	01d2      	lsls	r2, r2, #7
   1ae0c:	d506      	bpl.n	1ae1c <__aeabi_ddiv+0x3f8>
   1ae0e:	465a      	mov	r2, fp
   1ae10:	4b9b      	ldr	r3, [pc, #620]	; (1b080 <__aeabi_ddiv+0x65c>)
   1ae12:	401a      	ands	r2, r3
   1ae14:	2380      	movs	r3, #128	; 0x80
   1ae16:	4693      	mov	fp, r2
   1ae18:	00db      	lsls	r3, r3, #3
   1ae1a:	18e3      	adds	r3, r4, r3
   1ae1c:	4a99      	ldr	r2, [pc, #612]	; (1b084 <__aeabi_ddiv+0x660>)
   1ae1e:	4293      	cmp	r3, r2
   1ae20:	dd68      	ble.n	1aef4 <__aeabi_ddiv+0x4d0>
   1ae22:	2301      	movs	r3, #1
   1ae24:	9a02      	ldr	r2, [sp, #8]
   1ae26:	4c98      	ldr	r4, [pc, #608]	; (1b088 <__aeabi_ddiv+0x664>)
   1ae28:	401a      	ands	r2, r3
   1ae2a:	2300      	movs	r3, #0
   1ae2c:	4694      	mov	ip, r2
   1ae2e:	4698      	mov	r8, r3
   1ae30:	2200      	movs	r2, #0
   1ae32:	e6c5      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1ae34:	2280      	movs	r2, #128	; 0x80
   1ae36:	464b      	mov	r3, r9
   1ae38:	0312      	lsls	r2, r2, #12
   1ae3a:	4213      	tst	r3, r2
   1ae3c:	d00a      	beq.n	1ae54 <__aeabi_ddiv+0x430>
   1ae3e:	465b      	mov	r3, fp
   1ae40:	4213      	tst	r3, r2
   1ae42:	d106      	bne.n	1ae52 <__aeabi_ddiv+0x42e>
   1ae44:	431a      	orrs	r2, r3
   1ae46:	0312      	lsls	r2, r2, #12
   1ae48:	0b12      	lsrs	r2, r2, #12
   1ae4a:	46ac      	mov	ip, r5
   1ae4c:	4688      	mov	r8, r1
   1ae4e:	4c8e      	ldr	r4, [pc, #568]	; (1b088 <__aeabi_ddiv+0x664>)
   1ae50:	e6b6      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1ae52:	464b      	mov	r3, r9
   1ae54:	431a      	orrs	r2, r3
   1ae56:	0312      	lsls	r2, r2, #12
   1ae58:	0b12      	lsrs	r2, r2, #12
   1ae5a:	46bc      	mov	ip, r7
   1ae5c:	4c8a      	ldr	r4, [pc, #552]	; (1b088 <__aeabi_ddiv+0x664>)
   1ae5e:	e6af      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1ae60:	0003      	movs	r3, r0
   1ae62:	465a      	mov	r2, fp
   1ae64:	3b28      	subs	r3, #40	; 0x28
   1ae66:	409a      	lsls	r2, r3
   1ae68:	2300      	movs	r3, #0
   1ae6a:	4691      	mov	r9, r2
   1ae6c:	4698      	mov	r8, r3
   1ae6e:	e657      	b.n	1ab20 <__aeabi_ddiv+0xfc>
   1ae70:	4658      	mov	r0, fp
   1ae72:	f001 f92b 	bl	1c0cc <__clzsi2>
   1ae76:	3020      	adds	r0, #32
   1ae78:	e640      	b.n	1aafc <__aeabi_ddiv+0xd8>
   1ae7a:	0003      	movs	r3, r0
   1ae7c:	4652      	mov	r2, sl
   1ae7e:	3b28      	subs	r3, #40	; 0x28
   1ae80:	409a      	lsls	r2, r3
   1ae82:	2100      	movs	r1, #0
   1ae84:	4693      	mov	fp, r2
   1ae86:	e677      	b.n	1ab78 <__aeabi_ddiv+0x154>
   1ae88:	f001 f920 	bl	1c0cc <__clzsi2>
   1ae8c:	3020      	adds	r0, #32
   1ae8e:	e65f      	b.n	1ab50 <__aeabi_ddiv+0x12c>
   1ae90:	4588      	cmp	r8, r1
   1ae92:	d200      	bcs.n	1ae96 <__aeabi_ddiv+0x472>
   1ae94:	e6c7      	b.n	1ac26 <__aeabi_ddiv+0x202>
   1ae96:	464b      	mov	r3, r9
   1ae98:	07de      	lsls	r6, r3, #31
   1ae9a:	085d      	lsrs	r5, r3, #1
   1ae9c:	4643      	mov	r3, r8
   1ae9e:	085b      	lsrs	r3, r3, #1
   1aea0:	431e      	orrs	r6, r3
   1aea2:	4643      	mov	r3, r8
   1aea4:	07db      	lsls	r3, r3, #31
   1aea6:	469a      	mov	sl, r3
   1aea8:	e6c2      	b.n	1ac30 <__aeabi_ddiv+0x20c>
   1aeaa:	2500      	movs	r5, #0
   1aeac:	4592      	cmp	sl, r2
   1aeae:	d300      	bcc.n	1aeb2 <__aeabi_ddiv+0x48e>
   1aeb0:	e733      	b.n	1ad1a <__aeabi_ddiv+0x2f6>
   1aeb2:	9e03      	ldr	r6, [sp, #12]
   1aeb4:	4659      	mov	r1, fp
   1aeb6:	46b4      	mov	ip, r6
   1aeb8:	44e2      	add	sl, ip
   1aeba:	45b2      	cmp	sl, r6
   1aebc:	41ad      	sbcs	r5, r5
   1aebe:	426d      	negs	r5, r5
   1aec0:	4445      	add	r5, r8
   1aec2:	18eb      	adds	r3, r5, r3
   1aec4:	3901      	subs	r1, #1
   1aec6:	4598      	cmp	r8, r3
   1aec8:	d207      	bcs.n	1aeda <__aeabi_ddiv+0x4b6>
   1aeca:	4298      	cmp	r0, r3
   1aecc:	d900      	bls.n	1aed0 <__aeabi_ddiv+0x4ac>
   1aece:	e07f      	b.n	1afd0 <__aeabi_ddiv+0x5ac>
   1aed0:	d100      	bne.n	1aed4 <__aeabi_ddiv+0x4b0>
   1aed2:	e0bc      	b.n	1b04e <__aeabi_ddiv+0x62a>
   1aed4:	1a1d      	subs	r5, r3, r0
   1aed6:	468b      	mov	fp, r1
   1aed8:	e71f      	b.n	1ad1a <__aeabi_ddiv+0x2f6>
   1aeda:	4598      	cmp	r8, r3
   1aedc:	d1fa      	bne.n	1aed4 <__aeabi_ddiv+0x4b0>
   1aede:	9d03      	ldr	r5, [sp, #12]
   1aee0:	4555      	cmp	r5, sl
   1aee2:	d9f2      	bls.n	1aeca <__aeabi_ddiv+0x4a6>
   1aee4:	4643      	mov	r3, r8
   1aee6:	468b      	mov	fp, r1
   1aee8:	1a1d      	subs	r5, r3, r0
   1aeea:	e716      	b.n	1ad1a <__aeabi_ddiv+0x2f6>
   1aeec:	469b      	mov	fp, r3
   1aeee:	e6ca      	b.n	1ac86 <__aeabi_ddiv+0x262>
   1aef0:	0015      	movs	r5, r2
   1aef2:	e6e7      	b.n	1acc4 <__aeabi_ddiv+0x2a0>
   1aef4:	465a      	mov	r2, fp
   1aef6:	08c9      	lsrs	r1, r1, #3
   1aef8:	0752      	lsls	r2, r2, #29
   1aefa:	430a      	orrs	r2, r1
   1aefc:	055b      	lsls	r3, r3, #21
   1aefe:	4690      	mov	r8, r2
   1af00:	0d5c      	lsrs	r4, r3, #21
   1af02:	465a      	mov	r2, fp
   1af04:	2301      	movs	r3, #1
   1af06:	9902      	ldr	r1, [sp, #8]
   1af08:	0252      	lsls	r2, r2, #9
   1af0a:	4019      	ands	r1, r3
   1af0c:	0b12      	lsrs	r2, r2, #12
   1af0e:	468c      	mov	ip, r1
   1af10:	e656      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1af12:	2b00      	cmp	r3, #0
   1af14:	d100      	bne.n	1af18 <__aeabi_ddiv+0x4f4>
   1af16:	e76f      	b.n	1adf8 <__aeabi_ddiv+0x3d4>
   1af18:	4446      	add	r6, r8
   1af1a:	1e4a      	subs	r2, r1, #1
   1af1c:	45b0      	cmp	r8, r6
   1af1e:	d929      	bls.n	1af74 <__aeabi_ddiv+0x550>
   1af20:	0011      	movs	r1, r2
   1af22:	4286      	cmp	r6, r0
   1af24:	d000      	beq.n	1af28 <__aeabi_ddiv+0x504>
   1af26:	e765      	b.n	1adf4 <__aeabi_ddiv+0x3d0>
   1af28:	9a03      	ldr	r2, [sp, #12]
   1af2a:	4293      	cmp	r3, r2
   1af2c:	d000      	beq.n	1af30 <__aeabi_ddiv+0x50c>
   1af2e:	e761      	b.n	1adf4 <__aeabi_ddiv+0x3d0>
   1af30:	e762      	b.n	1adf8 <__aeabi_ddiv+0x3d4>
   1af32:	2101      	movs	r1, #1
   1af34:	4249      	negs	r1, r1
   1af36:	2001      	movs	r0, #1
   1af38:	1ac2      	subs	r2, r0, r3
   1af3a:	2a38      	cmp	r2, #56	; 0x38
   1af3c:	dd21      	ble.n	1af82 <__aeabi_ddiv+0x55e>
   1af3e:	9b02      	ldr	r3, [sp, #8]
   1af40:	4003      	ands	r3, r0
   1af42:	469c      	mov	ip, r3
   1af44:	e638      	b.n	1abb8 <__aeabi_ddiv+0x194>
   1af46:	220f      	movs	r2, #15
   1af48:	400a      	ands	r2, r1
   1af4a:	2a04      	cmp	r2, #4
   1af4c:	d100      	bne.n	1af50 <__aeabi_ddiv+0x52c>
   1af4e:	e75b      	b.n	1ae08 <__aeabi_ddiv+0x3e4>
   1af50:	000a      	movs	r2, r1
   1af52:	1d11      	adds	r1, r2, #4
   1af54:	4291      	cmp	r1, r2
   1af56:	4192      	sbcs	r2, r2
   1af58:	4252      	negs	r2, r2
   1af5a:	4493      	add	fp, r2
   1af5c:	e754      	b.n	1ae08 <__aeabi_ddiv+0x3e4>
   1af5e:	4b47      	ldr	r3, [pc, #284]	; (1b07c <__aeabi_ddiv+0x658>)
   1af60:	18e3      	adds	r3, r4, r3
   1af62:	2b00      	cmp	r3, #0
   1af64:	dde5      	ble.n	1af32 <__aeabi_ddiv+0x50e>
   1af66:	2201      	movs	r2, #1
   1af68:	4252      	negs	r2, r2
   1af6a:	e7f2      	b.n	1af52 <__aeabi_ddiv+0x52e>
   1af6c:	001d      	movs	r5, r3
   1af6e:	e6fa      	b.n	1ad66 <__aeabi_ddiv+0x342>
   1af70:	469a      	mov	sl, r3
   1af72:	e71c      	b.n	1adae <__aeabi_ddiv+0x38a>
   1af74:	42b0      	cmp	r0, r6
   1af76:	d839      	bhi.n	1afec <__aeabi_ddiv+0x5c8>
   1af78:	d06e      	beq.n	1b058 <__aeabi_ddiv+0x634>
   1af7a:	0011      	movs	r1, r2
   1af7c:	e73a      	b.n	1adf4 <__aeabi_ddiv+0x3d0>
   1af7e:	9302      	str	r3, [sp, #8]
   1af80:	e73a      	b.n	1adf8 <__aeabi_ddiv+0x3d4>
   1af82:	2a1f      	cmp	r2, #31
   1af84:	dc3c      	bgt.n	1b000 <__aeabi_ddiv+0x5dc>
   1af86:	2320      	movs	r3, #32
   1af88:	1a9b      	subs	r3, r3, r2
   1af8a:	000c      	movs	r4, r1
   1af8c:	4658      	mov	r0, fp
   1af8e:	4099      	lsls	r1, r3
   1af90:	4098      	lsls	r0, r3
   1af92:	1e4b      	subs	r3, r1, #1
   1af94:	4199      	sbcs	r1, r3
   1af96:	465b      	mov	r3, fp
   1af98:	40d4      	lsrs	r4, r2
   1af9a:	40d3      	lsrs	r3, r2
   1af9c:	4320      	orrs	r0, r4
   1af9e:	4308      	orrs	r0, r1
   1afa0:	001a      	movs	r2, r3
   1afa2:	0743      	lsls	r3, r0, #29
   1afa4:	d009      	beq.n	1afba <__aeabi_ddiv+0x596>
   1afa6:	230f      	movs	r3, #15
   1afa8:	4003      	ands	r3, r0
   1afaa:	2b04      	cmp	r3, #4
   1afac:	d005      	beq.n	1afba <__aeabi_ddiv+0x596>
   1afae:	0001      	movs	r1, r0
   1afb0:	1d08      	adds	r0, r1, #4
   1afb2:	4288      	cmp	r0, r1
   1afb4:	419b      	sbcs	r3, r3
   1afb6:	425b      	negs	r3, r3
   1afb8:	18d2      	adds	r2, r2, r3
   1afba:	0213      	lsls	r3, r2, #8
   1afbc:	d53a      	bpl.n	1b034 <__aeabi_ddiv+0x610>
   1afbe:	2301      	movs	r3, #1
   1afc0:	9a02      	ldr	r2, [sp, #8]
   1afc2:	2401      	movs	r4, #1
   1afc4:	401a      	ands	r2, r3
   1afc6:	2300      	movs	r3, #0
   1afc8:	4694      	mov	ip, r2
   1afca:	4698      	mov	r8, r3
   1afcc:	2200      	movs	r2, #0
   1afce:	e5f7      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1afd0:	2102      	movs	r1, #2
   1afd2:	4249      	negs	r1, r1
   1afd4:	468c      	mov	ip, r1
   1afd6:	9d03      	ldr	r5, [sp, #12]
   1afd8:	44e3      	add	fp, ip
   1afda:	46ac      	mov	ip, r5
   1afdc:	44e2      	add	sl, ip
   1afde:	45aa      	cmp	sl, r5
   1afe0:	41ad      	sbcs	r5, r5
   1afe2:	426d      	negs	r5, r5
   1afe4:	4445      	add	r5, r8
   1afe6:	18ed      	adds	r5, r5, r3
   1afe8:	1a2d      	subs	r5, r5, r0
   1afea:	e696      	b.n	1ad1a <__aeabi_ddiv+0x2f6>
   1afec:	1e8a      	subs	r2, r1, #2
   1afee:	9903      	ldr	r1, [sp, #12]
   1aff0:	004d      	lsls	r5, r1, #1
   1aff2:	428d      	cmp	r5, r1
   1aff4:	4189      	sbcs	r1, r1
   1aff6:	4249      	negs	r1, r1
   1aff8:	4441      	add	r1, r8
   1affa:	1876      	adds	r6, r6, r1
   1affc:	9503      	str	r5, [sp, #12]
   1affe:	e78f      	b.n	1af20 <__aeabi_ddiv+0x4fc>
   1b000:	201f      	movs	r0, #31
   1b002:	4240      	negs	r0, r0
   1b004:	1ac3      	subs	r3, r0, r3
   1b006:	4658      	mov	r0, fp
   1b008:	40d8      	lsrs	r0, r3
   1b00a:	0003      	movs	r3, r0
   1b00c:	2a20      	cmp	r2, #32
   1b00e:	d028      	beq.n	1b062 <__aeabi_ddiv+0x63e>
   1b010:	2040      	movs	r0, #64	; 0x40
   1b012:	465d      	mov	r5, fp
   1b014:	1a82      	subs	r2, r0, r2
   1b016:	4095      	lsls	r5, r2
   1b018:	4329      	orrs	r1, r5
   1b01a:	1e4a      	subs	r2, r1, #1
   1b01c:	4191      	sbcs	r1, r2
   1b01e:	4319      	orrs	r1, r3
   1b020:	2307      	movs	r3, #7
   1b022:	2200      	movs	r2, #0
   1b024:	400b      	ands	r3, r1
   1b026:	d009      	beq.n	1b03c <__aeabi_ddiv+0x618>
   1b028:	230f      	movs	r3, #15
   1b02a:	2200      	movs	r2, #0
   1b02c:	400b      	ands	r3, r1
   1b02e:	0008      	movs	r0, r1
   1b030:	2b04      	cmp	r3, #4
   1b032:	d1bd      	bne.n	1afb0 <__aeabi_ddiv+0x58c>
   1b034:	0001      	movs	r1, r0
   1b036:	0753      	lsls	r3, r2, #29
   1b038:	0252      	lsls	r2, r2, #9
   1b03a:	0b12      	lsrs	r2, r2, #12
   1b03c:	08c9      	lsrs	r1, r1, #3
   1b03e:	4319      	orrs	r1, r3
   1b040:	2301      	movs	r3, #1
   1b042:	4688      	mov	r8, r1
   1b044:	9902      	ldr	r1, [sp, #8]
   1b046:	2400      	movs	r4, #0
   1b048:	4019      	ands	r1, r3
   1b04a:	468c      	mov	ip, r1
   1b04c:	e5b8      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1b04e:	4552      	cmp	r2, sl
   1b050:	d8be      	bhi.n	1afd0 <__aeabi_ddiv+0x5ac>
   1b052:	468b      	mov	fp, r1
   1b054:	2500      	movs	r5, #0
   1b056:	e660      	b.n	1ad1a <__aeabi_ddiv+0x2f6>
   1b058:	9d03      	ldr	r5, [sp, #12]
   1b05a:	429d      	cmp	r5, r3
   1b05c:	d3c6      	bcc.n	1afec <__aeabi_ddiv+0x5c8>
   1b05e:	0011      	movs	r1, r2
   1b060:	e762      	b.n	1af28 <__aeabi_ddiv+0x504>
   1b062:	2500      	movs	r5, #0
   1b064:	e7d8      	b.n	1b018 <__aeabi_ddiv+0x5f4>
   1b066:	2280      	movs	r2, #128	; 0x80
   1b068:	465b      	mov	r3, fp
   1b06a:	0312      	lsls	r2, r2, #12
   1b06c:	431a      	orrs	r2, r3
   1b06e:	9b01      	ldr	r3, [sp, #4]
   1b070:	0312      	lsls	r2, r2, #12
   1b072:	0b12      	lsrs	r2, r2, #12
   1b074:	469c      	mov	ip, r3
   1b076:	4688      	mov	r8, r1
   1b078:	4c03      	ldr	r4, [pc, #12]	; (1b088 <__aeabi_ddiv+0x664>)
   1b07a:	e5a1      	b.n	1abc0 <__aeabi_ddiv+0x19c>
   1b07c:	000003ff 	.word	0x000003ff
   1b080:	feffffff 	.word	0xfeffffff
   1b084:	000007fe 	.word	0x000007fe
   1b088:	000007ff 	.word	0x000007ff

0001b08c <__eqdf2>:
   1b08c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b08e:	464f      	mov	r7, r9
   1b090:	4646      	mov	r6, r8
   1b092:	46d6      	mov	lr, sl
   1b094:	005c      	lsls	r4, r3, #1
   1b096:	b5c0      	push	{r6, r7, lr}
   1b098:	031f      	lsls	r7, r3, #12
   1b09a:	0fdb      	lsrs	r3, r3, #31
   1b09c:	469a      	mov	sl, r3
   1b09e:	4b17      	ldr	r3, [pc, #92]	; (1b0fc <__eqdf2+0x70>)
   1b0a0:	030e      	lsls	r6, r1, #12
   1b0a2:	004d      	lsls	r5, r1, #1
   1b0a4:	4684      	mov	ip, r0
   1b0a6:	4680      	mov	r8, r0
   1b0a8:	0b36      	lsrs	r6, r6, #12
   1b0aa:	0d6d      	lsrs	r5, r5, #21
   1b0ac:	0fc9      	lsrs	r1, r1, #31
   1b0ae:	4691      	mov	r9, r2
   1b0b0:	0b3f      	lsrs	r7, r7, #12
   1b0b2:	0d64      	lsrs	r4, r4, #21
   1b0b4:	2001      	movs	r0, #1
   1b0b6:	429d      	cmp	r5, r3
   1b0b8:	d008      	beq.n	1b0cc <__eqdf2+0x40>
   1b0ba:	429c      	cmp	r4, r3
   1b0bc:	d001      	beq.n	1b0c2 <__eqdf2+0x36>
   1b0be:	42a5      	cmp	r5, r4
   1b0c0:	d00b      	beq.n	1b0da <__eqdf2+0x4e>
   1b0c2:	bc1c      	pop	{r2, r3, r4}
   1b0c4:	4690      	mov	r8, r2
   1b0c6:	4699      	mov	r9, r3
   1b0c8:	46a2      	mov	sl, r4
   1b0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b0cc:	4663      	mov	r3, ip
   1b0ce:	4333      	orrs	r3, r6
   1b0d0:	d1f7      	bne.n	1b0c2 <__eqdf2+0x36>
   1b0d2:	42ac      	cmp	r4, r5
   1b0d4:	d1f5      	bne.n	1b0c2 <__eqdf2+0x36>
   1b0d6:	433a      	orrs	r2, r7
   1b0d8:	d1f3      	bne.n	1b0c2 <__eqdf2+0x36>
   1b0da:	2001      	movs	r0, #1
   1b0dc:	42be      	cmp	r6, r7
   1b0de:	d1f0      	bne.n	1b0c2 <__eqdf2+0x36>
   1b0e0:	45c8      	cmp	r8, r9
   1b0e2:	d1ee      	bne.n	1b0c2 <__eqdf2+0x36>
   1b0e4:	4551      	cmp	r1, sl
   1b0e6:	d007      	beq.n	1b0f8 <__eqdf2+0x6c>
   1b0e8:	2d00      	cmp	r5, #0
   1b0ea:	d1ea      	bne.n	1b0c2 <__eqdf2+0x36>
   1b0ec:	4663      	mov	r3, ip
   1b0ee:	431e      	orrs	r6, r3
   1b0f0:	0030      	movs	r0, r6
   1b0f2:	1e46      	subs	r6, r0, #1
   1b0f4:	41b0      	sbcs	r0, r6
   1b0f6:	e7e4      	b.n	1b0c2 <__eqdf2+0x36>
   1b0f8:	2000      	movs	r0, #0
   1b0fa:	e7e2      	b.n	1b0c2 <__eqdf2+0x36>
   1b0fc:	000007ff 	.word	0x000007ff

0001b100 <__gedf2>:
   1b100:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b102:	4645      	mov	r5, r8
   1b104:	46de      	mov	lr, fp
   1b106:	4657      	mov	r7, sl
   1b108:	464e      	mov	r6, r9
   1b10a:	b5e0      	push	{r5, r6, r7, lr}
   1b10c:	031f      	lsls	r7, r3, #12
   1b10e:	0b3d      	lsrs	r5, r7, #12
   1b110:	4f2c      	ldr	r7, [pc, #176]	; (1b1c4 <__gedf2+0xc4>)
   1b112:	030e      	lsls	r6, r1, #12
   1b114:	004c      	lsls	r4, r1, #1
   1b116:	46ab      	mov	fp, r5
   1b118:	005d      	lsls	r5, r3, #1
   1b11a:	4684      	mov	ip, r0
   1b11c:	0b36      	lsrs	r6, r6, #12
   1b11e:	0d64      	lsrs	r4, r4, #21
   1b120:	0fc9      	lsrs	r1, r1, #31
   1b122:	4690      	mov	r8, r2
   1b124:	0d6d      	lsrs	r5, r5, #21
   1b126:	0fdb      	lsrs	r3, r3, #31
   1b128:	42bc      	cmp	r4, r7
   1b12a:	d02a      	beq.n	1b182 <__gedf2+0x82>
   1b12c:	4f25      	ldr	r7, [pc, #148]	; (1b1c4 <__gedf2+0xc4>)
   1b12e:	42bd      	cmp	r5, r7
   1b130:	d02d      	beq.n	1b18e <__gedf2+0x8e>
   1b132:	2c00      	cmp	r4, #0
   1b134:	d10f      	bne.n	1b156 <__gedf2+0x56>
   1b136:	4330      	orrs	r0, r6
   1b138:	0007      	movs	r7, r0
   1b13a:	4681      	mov	r9, r0
   1b13c:	4278      	negs	r0, r7
   1b13e:	4178      	adcs	r0, r7
   1b140:	b2c0      	uxtb	r0, r0
   1b142:	2d00      	cmp	r5, #0
   1b144:	d117      	bne.n	1b176 <__gedf2+0x76>
   1b146:	465f      	mov	r7, fp
   1b148:	433a      	orrs	r2, r7
   1b14a:	d114      	bne.n	1b176 <__gedf2+0x76>
   1b14c:	464b      	mov	r3, r9
   1b14e:	2000      	movs	r0, #0
   1b150:	2b00      	cmp	r3, #0
   1b152:	d00a      	beq.n	1b16a <__gedf2+0x6a>
   1b154:	e006      	b.n	1b164 <__gedf2+0x64>
   1b156:	2d00      	cmp	r5, #0
   1b158:	d102      	bne.n	1b160 <__gedf2+0x60>
   1b15a:	4658      	mov	r0, fp
   1b15c:	4302      	orrs	r2, r0
   1b15e:	d001      	beq.n	1b164 <__gedf2+0x64>
   1b160:	4299      	cmp	r1, r3
   1b162:	d018      	beq.n	1b196 <__gedf2+0x96>
   1b164:	4248      	negs	r0, r1
   1b166:	2101      	movs	r1, #1
   1b168:	4308      	orrs	r0, r1
   1b16a:	bc3c      	pop	{r2, r3, r4, r5}
   1b16c:	4690      	mov	r8, r2
   1b16e:	4699      	mov	r9, r3
   1b170:	46a2      	mov	sl, r4
   1b172:	46ab      	mov	fp, r5
   1b174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b176:	2800      	cmp	r0, #0
   1b178:	d0f2      	beq.n	1b160 <__gedf2+0x60>
   1b17a:	2001      	movs	r0, #1
   1b17c:	3b01      	subs	r3, #1
   1b17e:	4318      	orrs	r0, r3
   1b180:	e7f3      	b.n	1b16a <__gedf2+0x6a>
   1b182:	0037      	movs	r7, r6
   1b184:	4307      	orrs	r7, r0
   1b186:	d0d1      	beq.n	1b12c <__gedf2+0x2c>
   1b188:	2002      	movs	r0, #2
   1b18a:	4240      	negs	r0, r0
   1b18c:	e7ed      	b.n	1b16a <__gedf2+0x6a>
   1b18e:	465f      	mov	r7, fp
   1b190:	4317      	orrs	r7, r2
   1b192:	d0ce      	beq.n	1b132 <__gedf2+0x32>
   1b194:	e7f8      	b.n	1b188 <__gedf2+0x88>
   1b196:	42ac      	cmp	r4, r5
   1b198:	dce4      	bgt.n	1b164 <__gedf2+0x64>
   1b19a:	da03      	bge.n	1b1a4 <__gedf2+0xa4>
   1b19c:	1e48      	subs	r0, r1, #1
   1b19e:	2101      	movs	r1, #1
   1b1a0:	4308      	orrs	r0, r1
   1b1a2:	e7e2      	b.n	1b16a <__gedf2+0x6a>
   1b1a4:	455e      	cmp	r6, fp
   1b1a6:	d8dd      	bhi.n	1b164 <__gedf2+0x64>
   1b1a8:	d006      	beq.n	1b1b8 <__gedf2+0xb8>
   1b1aa:	2000      	movs	r0, #0
   1b1ac:	455e      	cmp	r6, fp
   1b1ae:	d2dc      	bcs.n	1b16a <__gedf2+0x6a>
   1b1b0:	2301      	movs	r3, #1
   1b1b2:	1e48      	subs	r0, r1, #1
   1b1b4:	4318      	orrs	r0, r3
   1b1b6:	e7d8      	b.n	1b16a <__gedf2+0x6a>
   1b1b8:	45c4      	cmp	ip, r8
   1b1ba:	d8d3      	bhi.n	1b164 <__gedf2+0x64>
   1b1bc:	2000      	movs	r0, #0
   1b1be:	45c4      	cmp	ip, r8
   1b1c0:	d3f6      	bcc.n	1b1b0 <__gedf2+0xb0>
   1b1c2:	e7d2      	b.n	1b16a <__gedf2+0x6a>
   1b1c4:	000007ff 	.word	0x000007ff

0001b1c8 <__ledf2>:
   1b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1ca:	464e      	mov	r6, r9
   1b1cc:	4645      	mov	r5, r8
   1b1ce:	46de      	mov	lr, fp
   1b1d0:	4657      	mov	r7, sl
   1b1d2:	005c      	lsls	r4, r3, #1
   1b1d4:	b5e0      	push	{r5, r6, r7, lr}
   1b1d6:	031f      	lsls	r7, r3, #12
   1b1d8:	0fdb      	lsrs	r3, r3, #31
   1b1da:	4699      	mov	r9, r3
   1b1dc:	4b2a      	ldr	r3, [pc, #168]	; (1b288 <__ledf2+0xc0>)
   1b1de:	030e      	lsls	r6, r1, #12
   1b1e0:	004d      	lsls	r5, r1, #1
   1b1e2:	0fc9      	lsrs	r1, r1, #31
   1b1e4:	4684      	mov	ip, r0
   1b1e6:	0b36      	lsrs	r6, r6, #12
   1b1e8:	0d6d      	lsrs	r5, r5, #21
   1b1ea:	468b      	mov	fp, r1
   1b1ec:	4690      	mov	r8, r2
   1b1ee:	0b3f      	lsrs	r7, r7, #12
   1b1f0:	0d64      	lsrs	r4, r4, #21
   1b1f2:	429d      	cmp	r5, r3
   1b1f4:	d020      	beq.n	1b238 <__ledf2+0x70>
   1b1f6:	4b24      	ldr	r3, [pc, #144]	; (1b288 <__ledf2+0xc0>)
   1b1f8:	429c      	cmp	r4, r3
   1b1fa:	d022      	beq.n	1b242 <__ledf2+0x7a>
   1b1fc:	2d00      	cmp	r5, #0
   1b1fe:	d112      	bne.n	1b226 <__ledf2+0x5e>
   1b200:	4330      	orrs	r0, r6
   1b202:	4243      	negs	r3, r0
   1b204:	4143      	adcs	r3, r0
   1b206:	b2db      	uxtb	r3, r3
   1b208:	2c00      	cmp	r4, #0
   1b20a:	d01f      	beq.n	1b24c <__ledf2+0x84>
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d00c      	beq.n	1b22a <__ledf2+0x62>
   1b210:	464b      	mov	r3, r9
   1b212:	2001      	movs	r0, #1
   1b214:	3b01      	subs	r3, #1
   1b216:	4303      	orrs	r3, r0
   1b218:	0018      	movs	r0, r3
   1b21a:	bc3c      	pop	{r2, r3, r4, r5}
   1b21c:	4690      	mov	r8, r2
   1b21e:	4699      	mov	r9, r3
   1b220:	46a2      	mov	sl, r4
   1b222:	46ab      	mov	fp, r5
   1b224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b226:	2c00      	cmp	r4, #0
   1b228:	d016      	beq.n	1b258 <__ledf2+0x90>
   1b22a:	45cb      	cmp	fp, r9
   1b22c:	d017      	beq.n	1b25e <__ledf2+0x96>
   1b22e:	465b      	mov	r3, fp
   1b230:	4259      	negs	r1, r3
   1b232:	2301      	movs	r3, #1
   1b234:	430b      	orrs	r3, r1
   1b236:	e7ef      	b.n	1b218 <__ledf2+0x50>
   1b238:	0031      	movs	r1, r6
   1b23a:	2302      	movs	r3, #2
   1b23c:	4301      	orrs	r1, r0
   1b23e:	d1eb      	bne.n	1b218 <__ledf2+0x50>
   1b240:	e7d9      	b.n	1b1f6 <__ledf2+0x2e>
   1b242:	0039      	movs	r1, r7
   1b244:	2302      	movs	r3, #2
   1b246:	4311      	orrs	r1, r2
   1b248:	d1e6      	bne.n	1b218 <__ledf2+0x50>
   1b24a:	e7d7      	b.n	1b1fc <__ledf2+0x34>
   1b24c:	433a      	orrs	r2, r7
   1b24e:	d1dd      	bne.n	1b20c <__ledf2+0x44>
   1b250:	2300      	movs	r3, #0
   1b252:	2800      	cmp	r0, #0
   1b254:	d0e0      	beq.n	1b218 <__ledf2+0x50>
   1b256:	e7ea      	b.n	1b22e <__ledf2+0x66>
   1b258:	433a      	orrs	r2, r7
   1b25a:	d1e6      	bne.n	1b22a <__ledf2+0x62>
   1b25c:	e7e7      	b.n	1b22e <__ledf2+0x66>
   1b25e:	42a5      	cmp	r5, r4
   1b260:	dce5      	bgt.n	1b22e <__ledf2+0x66>
   1b262:	db05      	blt.n	1b270 <__ledf2+0xa8>
   1b264:	42be      	cmp	r6, r7
   1b266:	d8e2      	bhi.n	1b22e <__ledf2+0x66>
   1b268:	d007      	beq.n	1b27a <__ledf2+0xb2>
   1b26a:	2300      	movs	r3, #0
   1b26c:	42be      	cmp	r6, r7
   1b26e:	d2d3      	bcs.n	1b218 <__ledf2+0x50>
   1b270:	4659      	mov	r1, fp
   1b272:	2301      	movs	r3, #1
   1b274:	3901      	subs	r1, #1
   1b276:	430b      	orrs	r3, r1
   1b278:	e7ce      	b.n	1b218 <__ledf2+0x50>
   1b27a:	45c4      	cmp	ip, r8
   1b27c:	d8d7      	bhi.n	1b22e <__ledf2+0x66>
   1b27e:	2300      	movs	r3, #0
   1b280:	45c4      	cmp	ip, r8
   1b282:	d3f5      	bcc.n	1b270 <__ledf2+0xa8>
   1b284:	e7c8      	b.n	1b218 <__ledf2+0x50>
   1b286:	46c0      	nop			; (mov r8, r8)
   1b288:	000007ff 	.word	0x000007ff

0001b28c <__aeabi_dmul>:
   1b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b28e:	4657      	mov	r7, sl
   1b290:	4645      	mov	r5, r8
   1b292:	46de      	mov	lr, fp
   1b294:	464e      	mov	r6, r9
   1b296:	b5e0      	push	{r5, r6, r7, lr}
   1b298:	030c      	lsls	r4, r1, #12
   1b29a:	4698      	mov	r8, r3
   1b29c:	004e      	lsls	r6, r1, #1
   1b29e:	0b23      	lsrs	r3, r4, #12
   1b2a0:	b087      	sub	sp, #28
   1b2a2:	0007      	movs	r7, r0
   1b2a4:	4692      	mov	sl, r2
   1b2a6:	469b      	mov	fp, r3
   1b2a8:	0d76      	lsrs	r6, r6, #21
   1b2aa:	0fcd      	lsrs	r5, r1, #31
   1b2ac:	2e00      	cmp	r6, #0
   1b2ae:	d06b      	beq.n	1b388 <__aeabi_dmul+0xfc>
   1b2b0:	4b6d      	ldr	r3, [pc, #436]	; (1b468 <__aeabi_dmul+0x1dc>)
   1b2b2:	429e      	cmp	r6, r3
   1b2b4:	d035      	beq.n	1b322 <__aeabi_dmul+0x96>
   1b2b6:	2480      	movs	r4, #128	; 0x80
   1b2b8:	465b      	mov	r3, fp
   1b2ba:	0f42      	lsrs	r2, r0, #29
   1b2bc:	0424      	lsls	r4, r4, #16
   1b2be:	00db      	lsls	r3, r3, #3
   1b2c0:	4314      	orrs	r4, r2
   1b2c2:	431c      	orrs	r4, r3
   1b2c4:	00c3      	lsls	r3, r0, #3
   1b2c6:	4699      	mov	r9, r3
   1b2c8:	4b68      	ldr	r3, [pc, #416]	; (1b46c <__aeabi_dmul+0x1e0>)
   1b2ca:	46a3      	mov	fp, r4
   1b2cc:	469c      	mov	ip, r3
   1b2ce:	2300      	movs	r3, #0
   1b2d0:	2700      	movs	r7, #0
   1b2d2:	4466      	add	r6, ip
   1b2d4:	9302      	str	r3, [sp, #8]
   1b2d6:	4643      	mov	r3, r8
   1b2d8:	031c      	lsls	r4, r3, #12
   1b2da:	005a      	lsls	r2, r3, #1
   1b2dc:	0fdb      	lsrs	r3, r3, #31
   1b2de:	4650      	mov	r0, sl
   1b2e0:	0b24      	lsrs	r4, r4, #12
   1b2e2:	0d52      	lsrs	r2, r2, #21
   1b2e4:	4698      	mov	r8, r3
   1b2e6:	d100      	bne.n	1b2ea <__aeabi_dmul+0x5e>
   1b2e8:	e076      	b.n	1b3d8 <__aeabi_dmul+0x14c>
   1b2ea:	4b5f      	ldr	r3, [pc, #380]	; (1b468 <__aeabi_dmul+0x1dc>)
   1b2ec:	429a      	cmp	r2, r3
   1b2ee:	d06d      	beq.n	1b3cc <__aeabi_dmul+0x140>
   1b2f0:	2380      	movs	r3, #128	; 0x80
   1b2f2:	0f41      	lsrs	r1, r0, #29
   1b2f4:	041b      	lsls	r3, r3, #16
   1b2f6:	430b      	orrs	r3, r1
   1b2f8:	495c      	ldr	r1, [pc, #368]	; (1b46c <__aeabi_dmul+0x1e0>)
   1b2fa:	00e4      	lsls	r4, r4, #3
   1b2fc:	468c      	mov	ip, r1
   1b2fe:	431c      	orrs	r4, r3
   1b300:	00c3      	lsls	r3, r0, #3
   1b302:	2000      	movs	r0, #0
   1b304:	4462      	add	r2, ip
   1b306:	4641      	mov	r1, r8
   1b308:	18b6      	adds	r6, r6, r2
   1b30a:	4069      	eors	r1, r5
   1b30c:	1c72      	adds	r2, r6, #1
   1b30e:	9101      	str	r1, [sp, #4]
   1b310:	4694      	mov	ip, r2
   1b312:	4307      	orrs	r7, r0
   1b314:	2f0f      	cmp	r7, #15
   1b316:	d900      	bls.n	1b31a <__aeabi_dmul+0x8e>
   1b318:	e0b0      	b.n	1b47c <__aeabi_dmul+0x1f0>
   1b31a:	4a55      	ldr	r2, [pc, #340]	; (1b470 <__aeabi_dmul+0x1e4>)
   1b31c:	00bf      	lsls	r7, r7, #2
   1b31e:	59d2      	ldr	r2, [r2, r7]
   1b320:	4697      	mov	pc, r2
   1b322:	465b      	mov	r3, fp
   1b324:	4303      	orrs	r3, r0
   1b326:	4699      	mov	r9, r3
   1b328:	d000      	beq.n	1b32c <__aeabi_dmul+0xa0>
   1b32a:	e087      	b.n	1b43c <__aeabi_dmul+0x1b0>
   1b32c:	2300      	movs	r3, #0
   1b32e:	469b      	mov	fp, r3
   1b330:	3302      	adds	r3, #2
   1b332:	2708      	movs	r7, #8
   1b334:	9302      	str	r3, [sp, #8]
   1b336:	e7ce      	b.n	1b2d6 <__aeabi_dmul+0x4a>
   1b338:	4642      	mov	r2, r8
   1b33a:	9201      	str	r2, [sp, #4]
   1b33c:	2802      	cmp	r0, #2
   1b33e:	d067      	beq.n	1b410 <__aeabi_dmul+0x184>
   1b340:	2803      	cmp	r0, #3
   1b342:	d100      	bne.n	1b346 <__aeabi_dmul+0xba>
   1b344:	e20e      	b.n	1b764 <__aeabi_dmul+0x4d8>
   1b346:	2801      	cmp	r0, #1
   1b348:	d000      	beq.n	1b34c <__aeabi_dmul+0xc0>
   1b34a:	e162      	b.n	1b612 <__aeabi_dmul+0x386>
   1b34c:	2300      	movs	r3, #0
   1b34e:	2400      	movs	r4, #0
   1b350:	2200      	movs	r2, #0
   1b352:	4699      	mov	r9, r3
   1b354:	9901      	ldr	r1, [sp, #4]
   1b356:	4001      	ands	r1, r0
   1b358:	b2cd      	uxtb	r5, r1
   1b35a:	2100      	movs	r1, #0
   1b35c:	0312      	lsls	r2, r2, #12
   1b35e:	0d0b      	lsrs	r3, r1, #20
   1b360:	0b12      	lsrs	r2, r2, #12
   1b362:	051b      	lsls	r3, r3, #20
   1b364:	4313      	orrs	r3, r2
   1b366:	4a43      	ldr	r2, [pc, #268]	; (1b474 <__aeabi_dmul+0x1e8>)
   1b368:	0524      	lsls	r4, r4, #20
   1b36a:	4013      	ands	r3, r2
   1b36c:	431c      	orrs	r4, r3
   1b36e:	0064      	lsls	r4, r4, #1
   1b370:	07ed      	lsls	r5, r5, #31
   1b372:	0864      	lsrs	r4, r4, #1
   1b374:	432c      	orrs	r4, r5
   1b376:	4648      	mov	r0, r9
   1b378:	0021      	movs	r1, r4
   1b37a:	b007      	add	sp, #28
   1b37c:	bc3c      	pop	{r2, r3, r4, r5}
   1b37e:	4690      	mov	r8, r2
   1b380:	4699      	mov	r9, r3
   1b382:	46a2      	mov	sl, r4
   1b384:	46ab      	mov	fp, r5
   1b386:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b388:	4303      	orrs	r3, r0
   1b38a:	4699      	mov	r9, r3
   1b38c:	d04f      	beq.n	1b42e <__aeabi_dmul+0x1a2>
   1b38e:	465b      	mov	r3, fp
   1b390:	2b00      	cmp	r3, #0
   1b392:	d100      	bne.n	1b396 <__aeabi_dmul+0x10a>
   1b394:	e189      	b.n	1b6aa <__aeabi_dmul+0x41e>
   1b396:	4658      	mov	r0, fp
   1b398:	f000 fe98 	bl	1c0cc <__clzsi2>
   1b39c:	0003      	movs	r3, r0
   1b39e:	3b0b      	subs	r3, #11
   1b3a0:	2b1c      	cmp	r3, #28
   1b3a2:	dd00      	ble.n	1b3a6 <__aeabi_dmul+0x11a>
   1b3a4:	e17a      	b.n	1b69c <__aeabi_dmul+0x410>
   1b3a6:	221d      	movs	r2, #29
   1b3a8:	1ad3      	subs	r3, r2, r3
   1b3aa:	003a      	movs	r2, r7
   1b3ac:	0001      	movs	r1, r0
   1b3ae:	465c      	mov	r4, fp
   1b3b0:	40da      	lsrs	r2, r3
   1b3b2:	3908      	subs	r1, #8
   1b3b4:	408c      	lsls	r4, r1
   1b3b6:	0013      	movs	r3, r2
   1b3b8:	408f      	lsls	r7, r1
   1b3ba:	4323      	orrs	r3, r4
   1b3bc:	469b      	mov	fp, r3
   1b3be:	46b9      	mov	r9, r7
   1b3c0:	2300      	movs	r3, #0
   1b3c2:	4e2d      	ldr	r6, [pc, #180]	; (1b478 <__aeabi_dmul+0x1ec>)
   1b3c4:	2700      	movs	r7, #0
   1b3c6:	1a36      	subs	r6, r6, r0
   1b3c8:	9302      	str	r3, [sp, #8]
   1b3ca:	e784      	b.n	1b2d6 <__aeabi_dmul+0x4a>
   1b3cc:	4653      	mov	r3, sl
   1b3ce:	4323      	orrs	r3, r4
   1b3d0:	d12a      	bne.n	1b428 <__aeabi_dmul+0x19c>
   1b3d2:	2400      	movs	r4, #0
   1b3d4:	2002      	movs	r0, #2
   1b3d6:	e796      	b.n	1b306 <__aeabi_dmul+0x7a>
   1b3d8:	4653      	mov	r3, sl
   1b3da:	4323      	orrs	r3, r4
   1b3dc:	d020      	beq.n	1b420 <__aeabi_dmul+0x194>
   1b3de:	2c00      	cmp	r4, #0
   1b3e0:	d100      	bne.n	1b3e4 <__aeabi_dmul+0x158>
   1b3e2:	e157      	b.n	1b694 <__aeabi_dmul+0x408>
   1b3e4:	0020      	movs	r0, r4
   1b3e6:	f000 fe71 	bl	1c0cc <__clzsi2>
   1b3ea:	0003      	movs	r3, r0
   1b3ec:	3b0b      	subs	r3, #11
   1b3ee:	2b1c      	cmp	r3, #28
   1b3f0:	dd00      	ble.n	1b3f4 <__aeabi_dmul+0x168>
   1b3f2:	e149      	b.n	1b688 <__aeabi_dmul+0x3fc>
   1b3f4:	211d      	movs	r1, #29
   1b3f6:	1acb      	subs	r3, r1, r3
   1b3f8:	4651      	mov	r1, sl
   1b3fa:	0002      	movs	r2, r0
   1b3fc:	40d9      	lsrs	r1, r3
   1b3fe:	4653      	mov	r3, sl
   1b400:	3a08      	subs	r2, #8
   1b402:	4094      	lsls	r4, r2
   1b404:	4093      	lsls	r3, r2
   1b406:	430c      	orrs	r4, r1
   1b408:	4a1b      	ldr	r2, [pc, #108]	; (1b478 <__aeabi_dmul+0x1ec>)
   1b40a:	1a12      	subs	r2, r2, r0
   1b40c:	2000      	movs	r0, #0
   1b40e:	e77a      	b.n	1b306 <__aeabi_dmul+0x7a>
   1b410:	2501      	movs	r5, #1
   1b412:	9b01      	ldr	r3, [sp, #4]
   1b414:	4c14      	ldr	r4, [pc, #80]	; (1b468 <__aeabi_dmul+0x1dc>)
   1b416:	401d      	ands	r5, r3
   1b418:	2300      	movs	r3, #0
   1b41a:	2200      	movs	r2, #0
   1b41c:	4699      	mov	r9, r3
   1b41e:	e79c      	b.n	1b35a <__aeabi_dmul+0xce>
   1b420:	2400      	movs	r4, #0
   1b422:	2200      	movs	r2, #0
   1b424:	2001      	movs	r0, #1
   1b426:	e76e      	b.n	1b306 <__aeabi_dmul+0x7a>
   1b428:	4653      	mov	r3, sl
   1b42a:	2003      	movs	r0, #3
   1b42c:	e76b      	b.n	1b306 <__aeabi_dmul+0x7a>
   1b42e:	2300      	movs	r3, #0
   1b430:	469b      	mov	fp, r3
   1b432:	3301      	adds	r3, #1
   1b434:	2704      	movs	r7, #4
   1b436:	2600      	movs	r6, #0
   1b438:	9302      	str	r3, [sp, #8]
   1b43a:	e74c      	b.n	1b2d6 <__aeabi_dmul+0x4a>
   1b43c:	2303      	movs	r3, #3
   1b43e:	4681      	mov	r9, r0
   1b440:	270c      	movs	r7, #12
   1b442:	9302      	str	r3, [sp, #8]
   1b444:	e747      	b.n	1b2d6 <__aeabi_dmul+0x4a>
   1b446:	2280      	movs	r2, #128	; 0x80
   1b448:	2300      	movs	r3, #0
   1b44a:	2500      	movs	r5, #0
   1b44c:	0312      	lsls	r2, r2, #12
   1b44e:	4699      	mov	r9, r3
   1b450:	4c05      	ldr	r4, [pc, #20]	; (1b468 <__aeabi_dmul+0x1dc>)
   1b452:	e782      	b.n	1b35a <__aeabi_dmul+0xce>
   1b454:	465c      	mov	r4, fp
   1b456:	464b      	mov	r3, r9
   1b458:	9802      	ldr	r0, [sp, #8]
   1b45a:	e76f      	b.n	1b33c <__aeabi_dmul+0xb0>
   1b45c:	465c      	mov	r4, fp
   1b45e:	464b      	mov	r3, r9
   1b460:	9501      	str	r5, [sp, #4]
   1b462:	9802      	ldr	r0, [sp, #8]
   1b464:	e76a      	b.n	1b33c <__aeabi_dmul+0xb0>
   1b466:	46c0      	nop			; (mov r8, r8)
   1b468:	000007ff 	.word	0x000007ff
   1b46c:	fffffc01 	.word	0xfffffc01
   1b470:	0001cc94 	.word	0x0001cc94
   1b474:	800fffff 	.word	0x800fffff
   1b478:	fffffc0d 	.word	0xfffffc0d
   1b47c:	464a      	mov	r2, r9
   1b47e:	4649      	mov	r1, r9
   1b480:	0c17      	lsrs	r7, r2, #16
   1b482:	0c1a      	lsrs	r2, r3, #16
   1b484:	041b      	lsls	r3, r3, #16
   1b486:	0c1b      	lsrs	r3, r3, #16
   1b488:	0408      	lsls	r0, r1, #16
   1b48a:	0019      	movs	r1, r3
   1b48c:	0c00      	lsrs	r0, r0, #16
   1b48e:	4341      	muls	r1, r0
   1b490:	0015      	movs	r5, r2
   1b492:	4688      	mov	r8, r1
   1b494:	0019      	movs	r1, r3
   1b496:	437d      	muls	r5, r7
   1b498:	4379      	muls	r1, r7
   1b49a:	9503      	str	r5, [sp, #12]
   1b49c:	4689      	mov	r9, r1
   1b49e:	0029      	movs	r1, r5
   1b4a0:	0015      	movs	r5, r2
   1b4a2:	4345      	muls	r5, r0
   1b4a4:	444d      	add	r5, r9
   1b4a6:	9502      	str	r5, [sp, #8]
   1b4a8:	4645      	mov	r5, r8
   1b4aa:	0c2d      	lsrs	r5, r5, #16
   1b4ac:	46aa      	mov	sl, r5
   1b4ae:	9d02      	ldr	r5, [sp, #8]
   1b4b0:	4455      	add	r5, sl
   1b4b2:	45a9      	cmp	r9, r5
   1b4b4:	d906      	bls.n	1b4c4 <__aeabi_dmul+0x238>
   1b4b6:	468a      	mov	sl, r1
   1b4b8:	2180      	movs	r1, #128	; 0x80
   1b4ba:	0249      	lsls	r1, r1, #9
   1b4bc:	4689      	mov	r9, r1
   1b4be:	44ca      	add	sl, r9
   1b4c0:	4651      	mov	r1, sl
   1b4c2:	9103      	str	r1, [sp, #12]
   1b4c4:	0c29      	lsrs	r1, r5, #16
   1b4c6:	9104      	str	r1, [sp, #16]
   1b4c8:	4641      	mov	r1, r8
   1b4ca:	0409      	lsls	r1, r1, #16
   1b4cc:	042d      	lsls	r5, r5, #16
   1b4ce:	0c09      	lsrs	r1, r1, #16
   1b4d0:	4688      	mov	r8, r1
   1b4d2:	0029      	movs	r1, r5
   1b4d4:	0c25      	lsrs	r5, r4, #16
   1b4d6:	0424      	lsls	r4, r4, #16
   1b4d8:	4441      	add	r1, r8
   1b4da:	0c24      	lsrs	r4, r4, #16
   1b4dc:	9105      	str	r1, [sp, #20]
   1b4de:	0021      	movs	r1, r4
   1b4e0:	4341      	muls	r1, r0
   1b4e2:	4688      	mov	r8, r1
   1b4e4:	0021      	movs	r1, r4
   1b4e6:	4379      	muls	r1, r7
   1b4e8:	468a      	mov	sl, r1
   1b4ea:	4368      	muls	r0, r5
   1b4ec:	4641      	mov	r1, r8
   1b4ee:	4450      	add	r0, sl
   1b4f0:	4681      	mov	r9, r0
   1b4f2:	0c08      	lsrs	r0, r1, #16
   1b4f4:	4448      	add	r0, r9
   1b4f6:	436f      	muls	r7, r5
   1b4f8:	4582      	cmp	sl, r0
   1b4fa:	d903      	bls.n	1b504 <__aeabi_dmul+0x278>
   1b4fc:	2180      	movs	r1, #128	; 0x80
   1b4fe:	0249      	lsls	r1, r1, #9
   1b500:	4689      	mov	r9, r1
   1b502:	444f      	add	r7, r9
   1b504:	0c01      	lsrs	r1, r0, #16
   1b506:	4689      	mov	r9, r1
   1b508:	0039      	movs	r1, r7
   1b50a:	4449      	add	r1, r9
   1b50c:	9102      	str	r1, [sp, #8]
   1b50e:	4641      	mov	r1, r8
   1b510:	040f      	lsls	r7, r1, #16
   1b512:	9904      	ldr	r1, [sp, #16]
   1b514:	0c3f      	lsrs	r7, r7, #16
   1b516:	4688      	mov	r8, r1
   1b518:	0400      	lsls	r0, r0, #16
   1b51a:	19c0      	adds	r0, r0, r7
   1b51c:	4480      	add	r8, r0
   1b51e:	4641      	mov	r1, r8
   1b520:	9104      	str	r1, [sp, #16]
   1b522:	4659      	mov	r1, fp
   1b524:	0c0f      	lsrs	r7, r1, #16
   1b526:	0409      	lsls	r1, r1, #16
   1b528:	0c09      	lsrs	r1, r1, #16
   1b52a:	4688      	mov	r8, r1
   1b52c:	4359      	muls	r1, r3
   1b52e:	468a      	mov	sl, r1
   1b530:	0039      	movs	r1, r7
   1b532:	4351      	muls	r1, r2
   1b534:	4689      	mov	r9, r1
   1b536:	4641      	mov	r1, r8
   1b538:	434a      	muls	r2, r1
   1b53a:	4651      	mov	r1, sl
   1b53c:	0c09      	lsrs	r1, r1, #16
   1b53e:	468b      	mov	fp, r1
   1b540:	437b      	muls	r3, r7
   1b542:	18d2      	adds	r2, r2, r3
   1b544:	445a      	add	r2, fp
   1b546:	4293      	cmp	r3, r2
   1b548:	d903      	bls.n	1b552 <__aeabi_dmul+0x2c6>
   1b54a:	2380      	movs	r3, #128	; 0x80
   1b54c:	025b      	lsls	r3, r3, #9
   1b54e:	469b      	mov	fp, r3
   1b550:	44d9      	add	r9, fp
   1b552:	4651      	mov	r1, sl
   1b554:	0409      	lsls	r1, r1, #16
   1b556:	0c09      	lsrs	r1, r1, #16
   1b558:	468a      	mov	sl, r1
   1b55a:	4641      	mov	r1, r8
   1b55c:	4361      	muls	r1, r4
   1b55e:	437c      	muls	r4, r7
   1b560:	0c13      	lsrs	r3, r2, #16
   1b562:	0412      	lsls	r2, r2, #16
   1b564:	444b      	add	r3, r9
   1b566:	4452      	add	r2, sl
   1b568:	46a1      	mov	r9, r4
   1b56a:	468a      	mov	sl, r1
   1b56c:	003c      	movs	r4, r7
   1b56e:	4641      	mov	r1, r8
   1b570:	436c      	muls	r4, r5
   1b572:	434d      	muls	r5, r1
   1b574:	4651      	mov	r1, sl
   1b576:	444d      	add	r5, r9
   1b578:	0c0f      	lsrs	r7, r1, #16
   1b57a:	197d      	adds	r5, r7, r5
   1b57c:	45a9      	cmp	r9, r5
   1b57e:	d903      	bls.n	1b588 <__aeabi_dmul+0x2fc>
   1b580:	2180      	movs	r1, #128	; 0x80
   1b582:	0249      	lsls	r1, r1, #9
   1b584:	4688      	mov	r8, r1
   1b586:	4444      	add	r4, r8
   1b588:	9f04      	ldr	r7, [sp, #16]
   1b58a:	9903      	ldr	r1, [sp, #12]
   1b58c:	46b8      	mov	r8, r7
   1b58e:	4441      	add	r1, r8
   1b590:	468b      	mov	fp, r1
   1b592:	4583      	cmp	fp, r0
   1b594:	4180      	sbcs	r0, r0
   1b596:	4241      	negs	r1, r0
   1b598:	4688      	mov	r8, r1
   1b59a:	4651      	mov	r1, sl
   1b59c:	0408      	lsls	r0, r1, #16
   1b59e:	042f      	lsls	r7, r5, #16
   1b5a0:	0c00      	lsrs	r0, r0, #16
   1b5a2:	183f      	adds	r7, r7, r0
   1b5a4:	4658      	mov	r0, fp
   1b5a6:	9902      	ldr	r1, [sp, #8]
   1b5a8:	1810      	adds	r0, r2, r0
   1b5aa:	4689      	mov	r9, r1
   1b5ac:	4290      	cmp	r0, r2
   1b5ae:	4192      	sbcs	r2, r2
   1b5b0:	444f      	add	r7, r9
   1b5b2:	46ba      	mov	sl, r7
   1b5b4:	4252      	negs	r2, r2
   1b5b6:	4699      	mov	r9, r3
   1b5b8:	4693      	mov	fp, r2
   1b5ba:	44c2      	add	sl, r8
   1b5bc:	44d1      	add	r9, sl
   1b5be:	44cb      	add	fp, r9
   1b5c0:	428f      	cmp	r7, r1
   1b5c2:	41bf      	sbcs	r7, r7
   1b5c4:	45c2      	cmp	sl, r8
   1b5c6:	4189      	sbcs	r1, r1
   1b5c8:	4599      	cmp	r9, r3
   1b5ca:	419b      	sbcs	r3, r3
   1b5cc:	4593      	cmp	fp, r2
   1b5ce:	4192      	sbcs	r2, r2
   1b5d0:	427f      	negs	r7, r7
   1b5d2:	4249      	negs	r1, r1
   1b5d4:	0c2d      	lsrs	r5, r5, #16
   1b5d6:	4252      	negs	r2, r2
   1b5d8:	430f      	orrs	r7, r1
   1b5da:	425b      	negs	r3, r3
   1b5dc:	4313      	orrs	r3, r2
   1b5de:	197f      	adds	r7, r7, r5
   1b5e0:	18ff      	adds	r7, r7, r3
   1b5e2:	465b      	mov	r3, fp
   1b5e4:	193c      	adds	r4, r7, r4
   1b5e6:	0ddb      	lsrs	r3, r3, #23
   1b5e8:	9a05      	ldr	r2, [sp, #20]
   1b5ea:	0264      	lsls	r4, r4, #9
   1b5ec:	431c      	orrs	r4, r3
   1b5ee:	0243      	lsls	r3, r0, #9
   1b5f0:	4313      	orrs	r3, r2
   1b5f2:	1e5d      	subs	r5, r3, #1
   1b5f4:	41ab      	sbcs	r3, r5
   1b5f6:	465a      	mov	r2, fp
   1b5f8:	0dc0      	lsrs	r0, r0, #23
   1b5fa:	4303      	orrs	r3, r0
   1b5fc:	0252      	lsls	r2, r2, #9
   1b5fe:	4313      	orrs	r3, r2
   1b600:	01e2      	lsls	r2, r4, #7
   1b602:	d556      	bpl.n	1b6b2 <__aeabi_dmul+0x426>
   1b604:	2001      	movs	r0, #1
   1b606:	085a      	lsrs	r2, r3, #1
   1b608:	4003      	ands	r3, r0
   1b60a:	4313      	orrs	r3, r2
   1b60c:	07e2      	lsls	r2, r4, #31
   1b60e:	4313      	orrs	r3, r2
   1b610:	0864      	lsrs	r4, r4, #1
   1b612:	485a      	ldr	r0, [pc, #360]	; (1b77c <__aeabi_dmul+0x4f0>)
   1b614:	4460      	add	r0, ip
   1b616:	2800      	cmp	r0, #0
   1b618:	dd4d      	ble.n	1b6b6 <__aeabi_dmul+0x42a>
   1b61a:	075a      	lsls	r2, r3, #29
   1b61c:	d009      	beq.n	1b632 <__aeabi_dmul+0x3a6>
   1b61e:	220f      	movs	r2, #15
   1b620:	401a      	ands	r2, r3
   1b622:	2a04      	cmp	r2, #4
   1b624:	d005      	beq.n	1b632 <__aeabi_dmul+0x3a6>
   1b626:	1d1a      	adds	r2, r3, #4
   1b628:	429a      	cmp	r2, r3
   1b62a:	419b      	sbcs	r3, r3
   1b62c:	425b      	negs	r3, r3
   1b62e:	18e4      	adds	r4, r4, r3
   1b630:	0013      	movs	r3, r2
   1b632:	01e2      	lsls	r2, r4, #7
   1b634:	d504      	bpl.n	1b640 <__aeabi_dmul+0x3b4>
   1b636:	2080      	movs	r0, #128	; 0x80
   1b638:	4a51      	ldr	r2, [pc, #324]	; (1b780 <__aeabi_dmul+0x4f4>)
   1b63a:	00c0      	lsls	r0, r0, #3
   1b63c:	4014      	ands	r4, r2
   1b63e:	4460      	add	r0, ip
   1b640:	4a50      	ldr	r2, [pc, #320]	; (1b784 <__aeabi_dmul+0x4f8>)
   1b642:	4290      	cmp	r0, r2
   1b644:	dd00      	ble.n	1b648 <__aeabi_dmul+0x3bc>
   1b646:	e6e3      	b.n	1b410 <__aeabi_dmul+0x184>
   1b648:	2501      	movs	r5, #1
   1b64a:	08db      	lsrs	r3, r3, #3
   1b64c:	0762      	lsls	r2, r4, #29
   1b64e:	431a      	orrs	r2, r3
   1b650:	0264      	lsls	r4, r4, #9
   1b652:	9b01      	ldr	r3, [sp, #4]
   1b654:	4691      	mov	r9, r2
   1b656:	0b22      	lsrs	r2, r4, #12
   1b658:	0544      	lsls	r4, r0, #21
   1b65a:	0d64      	lsrs	r4, r4, #21
   1b65c:	401d      	ands	r5, r3
   1b65e:	e67c      	b.n	1b35a <__aeabi_dmul+0xce>
   1b660:	2280      	movs	r2, #128	; 0x80
   1b662:	4659      	mov	r1, fp
   1b664:	0312      	lsls	r2, r2, #12
   1b666:	4211      	tst	r1, r2
   1b668:	d008      	beq.n	1b67c <__aeabi_dmul+0x3f0>
   1b66a:	4214      	tst	r4, r2
   1b66c:	d106      	bne.n	1b67c <__aeabi_dmul+0x3f0>
   1b66e:	4322      	orrs	r2, r4
   1b670:	0312      	lsls	r2, r2, #12
   1b672:	0b12      	lsrs	r2, r2, #12
   1b674:	4645      	mov	r5, r8
   1b676:	4699      	mov	r9, r3
   1b678:	4c43      	ldr	r4, [pc, #268]	; (1b788 <__aeabi_dmul+0x4fc>)
   1b67a:	e66e      	b.n	1b35a <__aeabi_dmul+0xce>
   1b67c:	465b      	mov	r3, fp
   1b67e:	431a      	orrs	r2, r3
   1b680:	0312      	lsls	r2, r2, #12
   1b682:	0b12      	lsrs	r2, r2, #12
   1b684:	4c40      	ldr	r4, [pc, #256]	; (1b788 <__aeabi_dmul+0x4fc>)
   1b686:	e668      	b.n	1b35a <__aeabi_dmul+0xce>
   1b688:	0003      	movs	r3, r0
   1b68a:	4654      	mov	r4, sl
   1b68c:	3b28      	subs	r3, #40	; 0x28
   1b68e:	409c      	lsls	r4, r3
   1b690:	2300      	movs	r3, #0
   1b692:	e6b9      	b.n	1b408 <__aeabi_dmul+0x17c>
   1b694:	f000 fd1a 	bl	1c0cc <__clzsi2>
   1b698:	3020      	adds	r0, #32
   1b69a:	e6a6      	b.n	1b3ea <__aeabi_dmul+0x15e>
   1b69c:	0003      	movs	r3, r0
   1b69e:	3b28      	subs	r3, #40	; 0x28
   1b6a0:	409f      	lsls	r7, r3
   1b6a2:	2300      	movs	r3, #0
   1b6a4:	46bb      	mov	fp, r7
   1b6a6:	4699      	mov	r9, r3
   1b6a8:	e68a      	b.n	1b3c0 <__aeabi_dmul+0x134>
   1b6aa:	f000 fd0f 	bl	1c0cc <__clzsi2>
   1b6ae:	3020      	adds	r0, #32
   1b6b0:	e674      	b.n	1b39c <__aeabi_dmul+0x110>
   1b6b2:	46b4      	mov	ip, r6
   1b6b4:	e7ad      	b.n	1b612 <__aeabi_dmul+0x386>
   1b6b6:	2501      	movs	r5, #1
   1b6b8:	1a2a      	subs	r2, r5, r0
   1b6ba:	2a38      	cmp	r2, #56	; 0x38
   1b6bc:	dd06      	ble.n	1b6cc <__aeabi_dmul+0x440>
   1b6be:	9b01      	ldr	r3, [sp, #4]
   1b6c0:	2400      	movs	r4, #0
   1b6c2:	401d      	ands	r5, r3
   1b6c4:	2300      	movs	r3, #0
   1b6c6:	2200      	movs	r2, #0
   1b6c8:	4699      	mov	r9, r3
   1b6ca:	e646      	b.n	1b35a <__aeabi_dmul+0xce>
   1b6cc:	2a1f      	cmp	r2, #31
   1b6ce:	dc21      	bgt.n	1b714 <__aeabi_dmul+0x488>
   1b6d0:	2520      	movs	r5, #32
   1b6d2:	0020      	movs	r0, r4
   1b6d4:	1aad      	subs	r5, r5, r2
   1b6d6:	001e      	movs	r6, r3
   1b6d8:	40ab      	lsls	r3, r5
   1b6da:	40a8      	lsls	r0, r5
   1b6dc:	40d6      	lsrs	r6, r2
   1b6de:	1e5d      	subs	r5, r3, #1
   1b6e0:	41ab      	sbcs	r3, r5
   1b6e2:	4330      	orrs	r0, r6
   1b6e4:	4318      	orrs	r0, r3
   1b6e6:	40d4      	lsrs	r4, r2
   1b6e8:	0743      	lsls	r3, r0, #29
   1b6ea:	d009      	beq.n	1b700 <__aeabi_dmul+0x474>
   1b6ec:	230f      	movs	r3, #15
   1b6ee:	4003      	ands	r3, r0
   1b6f0:	2b04      	cmp	r3, #4
   1b6f2:	d005      	beq.n	1b700 <__aeabi_dmul+0x474>
   1b6f4:	0003      	movs	r3, r0
   1b6f6:	1d18      	adds	r0, r3, #4
   1b6f8:	4298      	cmp	r0, r3
   1b6fa:	419b      	sbcs	r3, r3
   1b6fc:	425b      	negs	r3, r3
   1b6fe:	18e4      	adds	r4, r4, r3
   1b700:	0223      	lsls	r3, r4, #8
   1b702:	d521      	bpl.n	1b748 <__aeabi_dmul+0x4bc>
   1b704:	2501      	movs	r5, #1
   1b706:	9b01      	ldr	r3, [sp, #4]
   1b708:	2401      	movs	r4, #1
   1b70a:	401d      	ands	r5, r3
   1b70c:	2300      	movs	r3, #0
   1b70e:	2200      	movs	r2, #0
   1b710:	4699      	mov	r9, r3
   1b712:	e622      	b.n	1b35a <__aeabi_dmul+0xce>
   1b714:	251f      	movs	r5, #31
   1b716:	0021      	movs	r1, r4
   1b718:	426d      	negs	r5, r5
   1b71a:	1a28      	subs	r0, r5, r0
   1b71c:	40c1      	lsrs	r1, r0
   1b71e:	0008      	movs	r0, r1
   1b720:	2a20      	cmp	r2, #32
   1b722:	d01d      	beq.n	1b760 <__aeabi_dmul+0x4d4>
   1b724:	355f      	adds	r5, #95	; 0x5f
   1b726:	1aaa      	subs	r2, r5, r2
   1b728:	4094      	lsls	r4, r2
   1b72a:	4323      	orrs	r3, r4
   1b72c:	1e5c      	subs	r4, r3, #1
   1b72e:	41a3      	sbcs	r3, r4
   1b730:	2507      	movs	r5, #7
   1b732:	4303      	orrs	r3, r0
   1b734:	401d      	ands	r5, r3
   1b736:	2200      	movs	r2, #0
   1b738:	2d00      	cmp	r5, #0
   1b73a:	d009      	beq.n	1b750 <__aeabi_dmul+0x4c4>
   1b73c:	220f      	movs	r2, #15
   1b73e:	2400      	movs	r4, #0
   1b740:	401a      	ands	r2, r3
   1b742:	0018      	movs	r0, r3
   1b744:	2a04      	cmp	r2, #4
   1b746:	d1d6      	bne.n	1b6f6 <__aeabi_dmul+0x46a>
   1b748:	0003      	movs	r3, r0
   1b74a:	0765      	lsls	r5, r4, #29
   1b74c:	0264      	lsls	r4, r4, #9
   1b74e:	0b22      	lsrs	r2, r4, #12
   1b750:	08db      	lsrs	r3, r3, #3
   1b752:	432b      	orrs	r3, r5
   1b754:	2501      	movs	r5, #1
   1b756:	4699      	mov	r9, r3
   1b758:	9b01      	ldr	r3, [sp, #4]
   1b75a:	2400      	movs	r4, #0
   1b75c:	401d      	ands	r5, r3
   1b75e:	e5fc      	b.n	1b35a <__aeabi_dmul+0xce>
   1b760:	2400      	movs	r4, #0
   1b762:	e7e2      	b.n	1b72a <__aeabi_dmul+0x49e>
   1b764:	2280      	movs	r2, #128	; 0x80
   1b766:	2501      	movs	r5, #1
   1b768:	0312      	lsls	r2, r2, #12
   1b76a:	4322      	orrs	r2, r4
   1b76c:	9901      	ldr	r1, [sp, #4]
   1b76e:	0312      	lsls	r2, r2, #12
   1b770:	0b12      	lsrs	r2, r2, #12
   1b772:	400d      	ands	r5, r1
   1b774:	4699      	mov	r9, r3
   1b776:	4c04      	ldr	r4, [pc, #16]	; (1b788 <__aeabi_dmul+0x4fc>)
   1b778:	e5ef      	b.n	1b35a <__aeabi_dmul+0xce>
   1b77a:	46c0      	nop			; (mov r8, r8)
   1b77c:	000003ff 	.word	0x000003ff
   1b780:	feffffff 	.word	0xfeffffff
   1b784:	000007fe 	.word	0x000007fe
   1b788:	000007ff 	.word	0x000007ff

0001b78c <__aeabi_dsub>:
   1b78c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b78e:	4646      	mov	r6, r8
   1b790:	46d6      	mov	lr, sl
   1b792:	464f      	mov	r7, r9
   1b794:	030c      	lsls	r4, r1, #12
   1b796:	b5c0      	push	{r6, r7, lr}
   1b798:	0fcd      	lsrs	r5, r1, #31
   1b79a:	004e      	lsls	r6, r1, #1
   1b79c:	0a61      	lsrs	r1, r4, #9
   1b79e:	0f44      	lsrs	r4, r0, #29
   1b7a0:	430c      	orrs	r4, r1
   1b7a2:	00c1      	lsls	r1, r0, #3
   1b7a4:	0058      	lsls	r0, r3, #1
   1b7a6:	0d40      	lsrs	r0, r0, #21
   1b7a8:	4684      	mov	ip, r0
   1b7aa:	468a      	mov	sl, r1
   1b7ac:	000f      	movs	r7, r1
   1b7ae:	0319      	lsls	r1, r3, #12
   1b7b0:	0f50      	lsrs	r0, r2, #29
   1b7b2:	0a49      	lsrs	r1, r1, #9
   1b7b4:	4301      	orrs	r1, r0
   1b7b6:	48c6      	ldr	r0, [pc, #792]	; (1bad0 <__aeabi_dsub+0x344>)
   1b7b8:	0d76      	lsrs	r6, r6, #21
   1b7ba:	46a8      	mov	r8, r5
   1b7bc:	0fdb      	lsrs	r3, r3, #31
   1b7be:	00d2      	lsls	r2, r2, #3
   1b7c0:	4584      	cmp	ip, r0
   1b7c2:	d100      	bne.n	1b7c6 <__aeabi_dsub+0x3a>
   1b7c4:	e0d8      	b.n	1b978 <__aeabi_dsub+0x1ec>
   1b7c6:	2001      	movs	r0, #1
   1b7c8:	4043      	eors	r3, r0
   1b7ca:	42ab      	cmp	r3, r5
   1b7cc:	d100      	bne.n	1b7d0 <__aeabi_dsub+0x44>
   1b7ce:	e0a6      	b.n	1b91e <__aeabi_dsub+0x192>
   1b7d0:	4660      	mov	r0, ip
   1b7d2:	1a35      	subs	r5, r6, r0
   1b7d4:	2d00      	cmp	r5, #0
   1b7d6:	dc00      	bgt.n	1b7da <__aeabi_dsub+0x4e>
   1b7d8:	e105      	b.n	1b9e6 <__aeabi_dsub+0x25a>
   1b7da:	2800      	cmp	r0, #0
   1b7dc:	d110      	bne.n	1b800 <__aeabi_dsub+0x74>
   1b7de:	000b      	movs	r3, r1
   1b7e0:	4313      	orrs	r3, r2
   1b7e2:	d100      	bne.n	1b7e6 <__aeabi_dsub+0x5a>
   1b7e4:	e0d7      	b.n	1b996 <__aeabi_dsub+0x20a>
   1b7e6:	1e6b      	subs	r3, r5, #1
   1b7e8:	2b00      	cmp	r3, #0
   1b7ea:	d000      	beq.n	1b7ee <__aeabi_dsub+0x62>
   1b7ec:	e14b      	b.n	1ba86 <__aeabi_dsub+0x2fa>
   1b7ee:	4653      	mov	r3, sl
   1b7f0:	1a9f      	subs	r7, r3, r2
   1b7f2:	45ba      	cmp	sl, r7
   1b7f4:	4180      	sbcs	r0, r0
   1b7f6:	1a64      	subs	r4, r4, r1
   1b7f8:	4240      	negs	r0, r0
   1b7fa:	1a24      	subs	r4, r4, r0
   1b7fc:	2601      	movs	r6, #1
   1b7fe:	e01e      	b.n	1b83e <__aeabi_dsub+0xb2>
   1b800:	4bb3      	ldr	r3, [pc, #716]	; (1bad0 <__aeabi_dsub+0x344>)
   1b802:	429e      	cmp	r6, r3
   1b804:	d048      	beq.n	1b898 <__aeabi_dsub+0x10c>
   1b806:	2380      	movs	r3, #128	; 0x80
   1b808:	041b      	lsls	r3, r3, #16
   1b80a:	4319      	orrs	r1, r3
   1b80c:	2d38      	cmp	r5, #56	; 0x38
   1b80e:	dd00      	ble.n	1b812 <__aeabi_dsub+0x86>
   1b810:	e119      	b.n	1ba46 <__aeabi_dsub+0x2ba>
   1b812:	2d1f      	cmp	r5, #31
   1b814:	dd00      	ble.n	1b818 <__aeabi_dsub+0x8c>
   1b816:	e14c      	b.n	1bab2 <__aeabi_dsub+0x326>
   1b818:	2320      	movs	r3, #32
   1b81a:	000f      	movs	r7, r1
   1b81c:	1b5b      	subs	r3, r3, r5
   1b81e:	0010      	movs	r0, r2
   1b820:	409a      	lsls	r2, r3
   1b822:	409f      	lsls	r7, r3
   1b824:	40e8      	lsrs	r0, r5
   1b826:	1e53      	subs	r3, r2, #1
   1b828:	419a      	sbcs	r2, r3
   1b82a:	40e9      	lsrs	r1, r5
   1b82c:	4307      	orrs	r7, r0
   1b82e:	4317      	orrs	r7, r2
   1b830:	4653      	mov	r3, sl
   1b832:	1bdf      	subs	r7, r3, r7
   1b834:	1a61      	subs	r1, r4, r1
   1b836:	45ba      	cmp	sl, r7
   1b838:	41a4      	sbcs	r4, r4
   1b83a:	4264      	negs	r4, r4
   1b83c:	1b0c      	subs	r4, r1, r4
   1b83e:	0223      	lsls	r3, r4, #8
   1b840:	d400      	bmi.n	1b844 <__aeabi_dsub+0xb8>
   1b842:	e0c5      	b.n	1b9d0 <__aeabi_dsub+0x244>
   1b844:	0264      	lsls	r4, r4, #9
   1b846:	0a65      	lsrs	r5, r4, #9
   1b848:	2d00      	cmp	r5, #0
   1b84a:	d100      	bne.n	1b84e <__aeabi_dsub+0xc2>
   1b84c:	e0f6      	b.n	1ba3c <__aeabi_dsub+0x2b0>
   1b84e:	0028      	movs	r0, r5
   1b850:	f000 fc3c 	bl	1c0cc <__clzsi2>
   1b854:	0003      	movs	r3, r0
   1b856:	3b08      	subs	r3, #8
   1b858:	2b1f      	cmp	r3, #31
   1b85a:	dd00      	ble.n	1b85e <__aeabi_dsub+0xd2>
   1b85c:	e0e9      	b.n	1ba32 <__aeabi_dsub+0x2a6>
   1b85e:	2220      	movs	r2, #32
   1b860:	003c      	movs	r4, r7
   1b862:	1ad2      	subs	r2, r2, r3
   1b864:	409d      	lsls	r5, r3
   1b866:	40d4      	lsrs	r4, r2
   1b868:	409f      	lsls	r7, r3
   1b86a:	4325      	orrs	r5, r4
   1b86c:	429e      	cmp	r6, r3
   1b86e:	dd00      	ble.n	1b872 <__aeabi_dsub+0xe6>
   1b870:	e0db      	b.n	1ba2a <__aeabi_dsub+0x29e>
   1b872:	1b9e      	subs	r6, r3, r6
   1b874:	1c73      	adds	r3, r6, #1
   1b876:	2b1f      	cmp	r3, #31
   1b878:	dd00      	ble.n	1b87c <__aeabi_dsub+0xf0>
   1b87a:	e10a      	b.n	1ba92 <__aeabi_dsub+0x306>
   1b87c:	2220      	movs	r2, #32
   1b87e:	0038      	movs	r0, r7
   1b880:	1ad2      	subs	r2, r2, r3
   1b882:	0029      	movs	r1, r5
   1b884:	4097      	lsls	r7, r2
   1b886:	002c      	movs	r4, r5
   1b888:	4091      	lsls	r1, r2
   1b88a:	40d8      	lsrs	r0, r3
   1b88c:	1e7a      	subs	r2, r7, #1
   1b88e:	4197      	sbcs	r7, r2
   1b890:	40dc      	lsrs	r4, r3
   1b892:	2600      	movs	r6, #0
   1b894:	4301      	orrs	r1, r0
   1b896:	430f      	orrs	r7, r1
   1b898:	077b      	lsls	r3, r7, #29
   1b89a:	d009      	beq.n	1b8b0 <__aeabi_dsub+0x124>
   1b89c:	230f      	movs	r3, #15
   1b89e:	403b      	ands	r3, r7
   1b8a0:	2b04      	cmp	r3, #4
   1b8a2:	d005      	beq.n	1b8b0 <__aeabi_dsub+0x124>
   1b8a4:	1d3b      	adds	r3, r7, #4
   1b8a6:	42bb      	cmp	r3, r7
   1b8a8:	41bf      	sbcs	r7, r7
   1b8aa:	427f      	negs	r7, r7
   1b8ac:	19e4      	adds	r4, r4, r7
   1b8ae:	001f      	movs	r7, r3
   1b8b0:	0223      	lsls	r3, r4, #8
   1b8b2:	d525      	bpl.n	1b900 <__aeabi_dsub+0x174>
   1b8b4:	4b86      	ldr	r3, [pc, #536]	; (1bad0 <__aeabi_dsub+0x344>)
   1b8b6:	3601      	adds	r6, #1
   1b8b8:	429e      	cmp	r6, r3
   1b8ba:	d100      	bne.n	1b8be <__aeabi_dsub+0x132>
   1b8bc:	e0af      	b.n	1ba1e <__aeabi_dsub+0x292>
   1b8be:	4b85      	ldr	r3, [pc, #532]	; (1bad4 <__aeabi_dsub+0x348>)
   1b8c0:	2501      	movs	r5, #1
   1b8c2:	401c      	ands	r4, r3
   1b8c4:	4643      	mov	r3, r8
   1b8c6:	0762      	lsls	r2, r4, #29
   1b8c8:	08ff      	lsrs	r7, r7, #3
   1b8ca:	0264      	lsls	r4, r4, #9
   1b8cc:	0576      	lsls	r6, r6, #21
   1b8ce:	4317      	orrs	r7, r2
   1b8d0:	0b24      	lsrs	r4, r4, #12
   1b8d2:	0d76      	lsrs	r6, r6, #21
   1b8d4:	401d      	ands	r5, r3
   1b8d6:	2100      	movs	r1, #0
   1b8d8:	0324      	lsls	r4, r4, #12
   1b8da:	0b23      	lsrs	r3, r4, #12
   1b8dc:	0d0c      	lsrs	r4, r1, #20
   1b8de:	4a7e      	ldr	r2, [pc, #504]	; (1bad8 <__aeabi_dsub+0x34c>)
   1b8e0:	0524      	lsls	r4, r4, #20
   1b8e2:	431c      	orrs	r4, r3
   1b8e4:	4014      	ands	r4, r2
   1b8e6:	0533      	lsls	r3, r6, #20
   1b8e8:	4323      	orrs	r3, r4
   1b8ea:	005b      	lsls	r3, r3, #1
   1b8ec:	07ed      	lsls	r5, r5, #31
   1b8ee:	085b      	lsrs	r3, r3, #1
   1b8f0:	432b      	orrs	r3, r5
   1b8f2:	0038      	movs	r0, r7
   1b8f4:	0019      	movs	r1, r3
   1b8f6:	bc1c      	pop	{r2, r3, r4}
   1b8f8:	4690      	mov	r8, r2
   1b8fa:	4699      	mov	r9, r3
   1b8fc:	46a2      	mov	sl, r4
   1b8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b900:	2501      	movs	r5, #1
   1b902:	4643      	mov	r3, r8
   1b904:	0762      	lsls	r2, r4, #29
   1b906:	08ff      	lsrs	r7, r7, #3
   1b908:	4317      	orrs	r7, r2
   1b90a:	08e4      	lsrs	r4, r4, #3
   1b90c:	401d      	ands	r5, r3
   1b90e:	4b70      	ldr	r3, [pc, #448]	; (1bad0 <__aeabi_dsub+0x344>)
   1b910:	429e      	cmp	r6, r3
   1b912:	d036      	beq.n	1b982 <__aeabi_dsub+0x1f6>
   1b914:	0324      	lsls	r4, r4, #12
   1b916:	0576      	lsls	r6, r6, #21
   1b918:	0b24      	lsrs	r4, r4, #12
   1b91a:	0d76      	lsrs	r6, r6, #21
   1b91c:	e7db      	b.n	1b8d6 <__aeabi_dsub+0x14a>
   1b91e:	4663      	mov	r3, ip
   1b920:	1af3      	subs	r3, r6, r3
   1b922:	2b00      	cmp	r3, #0
   1b924:	dc00      	bgt.n	1b928 <__aeabi_dsub+0x19c>
   1b926:	e094      	b.n	1ba52 <__aeabi_dsub+0x2c6>
   1b928:	4660      	mov	r0, ip
   1b92a:	2800      	cmp	r0, #0
   1b92c:	d035      	beq.n	1b99a <__aeabi_dsub+0x20e>
   1b92e:	4868      	ldr	r0, [pc, #416]	; (1bad0 <__aeabi_dsub+0x344>)
   1b930:	4286      	cmp	r6, r0
   1b932:	d0b1      	beq.n	1b898 <__aeabi_dsub+0x10c>
   1b934:	2780      	movs	r7, #128	; 0x80
   1b936:	043f      	lsls	r7, r7, #16
   1b938:	4339      	orrs	r1, r7
   1b93a:	2b38      	cmp	r3, #56	; 0x38
   1b93c:	dc00      	bgt.n	1b940 <__aeabi_dsub+0x1b4>
   1b93e:	e0fd      	b.n	1bb3c <__aeabi_dsub+0x3b0>
   1b940:	430a      	orrs	r2, r1
   1b942:	0017      	movs	r7, r2
   1b944:	2100      	movs	r1, #0
   1b946:	1e7a      	subs	r2, r7, #1
   1b948:	4197      	sbcs	r7, r2
   1b94a:	4457      	add	r7, sl
   1b94c:	4557      	cmp	r7, sl
   1b94e:	4180      	sbcs	r0, r0
   1b950:	1909      	adds	r1, r1, r4
   1b952:	4244      	negs	r4, r0
   1b954:	190c      	adds	r4, r1, r4
   1b956:	0223      	lsls	r3, r4, #8
   1b958:	d53a      	bpl.n	1b9d0 <__aeabi_dsub+0x244>
   1b95a:	4b5d      	ldr	r3, [pc, #372]	; (1bad0 <__aeabi_dsub+0x344>)
   1b95c:	3601      	adds	r6, #1
   1b95e:	429e      	cmp	r6, r3
   1b960:	d100      	bne.n	1b964 <__aeabi_dsub+0x1d8>
   1b962:	e14b      	b.n	1bbfc <__aeabi_dsub+0x470>
   1b964:	2201      	movs	r2, #1
   1b966:	4b5b      	ldr	r3, [pc, #364]	; (1bad4 <__aeabi_dsub+0x348>)
   1b968:	401c      	ands	r4, r3
   1b96a:	087b      	lsrs	r3, r7, #1
   1b96c:	4017      	ands	r7, r2
   1b96e:	431f      	orrs	r7, r3
   1b970:	07e2      	lsls	r2, r4, #31
   1b972:	4317      	orrs	r7, r2
   1b974:	0864      	lsrs	r4, r4, #1
   1b976:	e78f      	b.n	1b898 <__aeabi_dsub+0x10c>
   1b978:	0008      	movs	r0, r1
   1b97a:	4310      	orrs	r0, r2
   1b97c:	d000      	beq.n	1b980 <__aeabi_dsub+0x1f4>
   1b97e:	e724      	b.n	1b7ca <__aeabi_dsub+0x3e>
   1b980:	e721      	b.n	1b7c6 <__aeabi_dsub+0x3a>
   1b982:	0023      	movs	r3, r4
   1b984:	433b      	orrs	r3, r7
   1b986:	d100      	bne.n	1b98a <__aeabi_dsub+0x1fe>
   1b988:	e1b9      	b.n	1bcfe <__aeabi_dsub+0x572>
   1b98a:	2280      	movs	r2, #128	; 0x80
   1b98c:	0312      	lsls	r2, r2, #12
   1b98e:	4314      	orrs	r4, r2
   1b990:	0324      	lsls	r4, r4, #12
   1b992:	0b24      	lsrs	r4, r4, #12
   1b994:	e79f      	b.n	1b8d6 <__aeabi_dsub+0x14a>
   1b996:	002e      	movs	r6, r5
   1b998:	e77e      	b.n	1b898 <__aeabi_dsub+0x10c>
   1b99a:	0008      	movs	r0, r1
   1b99c:	4310      	orrs	r0, r2
   1b99e:	d100      	bne.n	1b9a2 <__aeabi_dsub+0x216>
   1b9a0:	e0ca      	b.n	1bb38 <__aeabi_dsub+0x3ac>
   1b9a2:	1e58      	subs	r0, r3, #1
   1b9a4:	4684      	mov	ip, r0
   1b9a6:	2800      	cmp	r0, #0
   1b9a8:	d000      	beq.n	1b9ac <__aeabi_dsub+0x220>
   1b9aa:	e0e7      	b.n	1bb7c <__aeabi_dsub+0x3f0>
   1b9ac:	4452      	add	r2, sl
   1b9ae:	4552      	cmp	r2, sl
   1b9b0:	4180      	sbcs	r0, r0
   1b9b2:	1864      	adds	r4, r4, r1
   1b9b4:	4240      	negs	r0, r0
   1b9b6:	1824      	adds	r4, r4, r0
   1b9b8:	0017      	movs	r7, r2
   1b9ba:	2601      	movs	r6, #1
   1b9bc:	0223      	lsls	r3, r4, #8
   1b9be:	d507      	bpl.n	1b9d0 <__aeabi_dsub+0x244>
   1b9c0:	2602      	movs	r6, #2
   1b9c2:	e7cf      	b.n	1b964 <__aeabi_dsub+0x1d8>
   1b9c4:	4664      	mov	r4, ip
   1b9c6:	432c      	orrs	r4, r5
   1b9c8:	d100      	bne.n	1b9cc <__aeabi_dsub+0x240>
   1b9ca:	e1b3      	b.n	1bd34 <__aeabi_dsub+0x5a8>
   1b9cc:	002c      	movs	r4, r5
   1b9ce:	4667      	mov	r7, ip
   1b9d0:	077b      	lsls	r3, r7, #29
   1b9d2:	d000      	beq.n	1b9d6 <__aeabi_dsub+0x24a>
   1b9d4:	e762      	b.n	1b89c <__aeabi_dsub+0x110>
   1b9d6:	0763      	lsls	r3, r4, #29
   1b9d8:	08ff      	lsrs	r7, r7, #3
   1b9da:	431f      	orrs	r7, r3
   1b9dc:	2501      	movs	r5, #1
   1b9de:	4643      	mov	r3, r8
   1b9e0:	08e4      	lsrs	r4, r4, #3
   1b9e2:	401d      	ands	r5, r3
   1b9e4:	e793      	b.n	1b90e <__aeabi_dsub+0x182>
   1b9e6:	2d00      	cmp	r5, #0
   1b9e8:	d178      	bne.n	1badc <__aeabi_dsub+0x350>
   1b9ea:	1c75      	adds	r5, r6, #1
   1b9ec:	056d      	lsls	r5, r5, #21
   1b9ee:	0d6d      	lsrs	r5, r5, #21
   1b9f0:	2d01      	cmp	r5, #1
   1b9f2:	dc00      	bgt.n	1b9f6 <__aeabi_dsub+0x26a>
   1b9f4:	e0f2      	b.n	1bbdc <__aeabi_dsub+0x450>
   1b9f6:	4650      	mov	r0, sl
   1b9f8:	1a80      	subs	r0, r0, r2
   1b9fa:	4582      	cmp	sl, r0
   1b9fc:	41bf      	sbcs	r7, r7
   1b9fe:	1a65      	subs	r5, r4, r1
   1ba00:	427f      	negs	r7, r7
   1ba02:	1bed      	subs	r5, r5, r7
   1ba04:	4684      	mov	ip, r0
   1ba06:	0228      	lsls	r0, r5, #8
   1ba08:	d400      	bmi.n	1ba0c <__aeabi_dsub+0x280>
   1ba0a:	e08c      	b.n	1bb26 <__aeabi_dsub+0x39a>
   1ba0c:	4650      	mov	r0, sl
   1ba0e:	1a17      	subs	r7, r2, r0
   1ba10:	42ba      	cmp	r2, r7
   1ba12:	4192      	sbcs	r2, r2
   1ba14:	1b0c      	subs	r4, r1, r4
   1ba16:	4255      	negs	r5, r2
   1ba18:	1b65      	subs	r5, r4, r5
   1ba1a:	4698      	mov	r8, r3
   1ba1c:	e714      	b.n	1b848 <__aeabi_dsub+0xbc>
   1ba1e:	2501      	movs	r5, #1
   1ba20:	4643      	mov	r3, r8
   1ba22:	2400      	movs	r4, #0
   1ba24:	401d      	ands	r5, r3
   1ba26:	2700      	movs	r7, #0
   1ba28:	e755      	b.n	1b8d6 <__aeabi_dsub+0x14a>
   1ba2a:	4c2a      	ldr	r4, [pc, #168]	; (1bad4 <__aeabi_dsub+0x348>)
   1ba2c:	1af6      	subs	r6, r6, r3
   1ba2e:	402c      	ands	r4, r5
   1ba30:	e732      	b.n	1b898 <__aeabi_dsub+0x10c>
   1ba32:	003d      	movs	r5, r7
   1ba34:	3828      	subs	r0, #40	; 0x28
   1ba36:	4085      	lsls	r5, r0
   1ba38:	2700      	movs	r7, #0
   1ba3a:	e717      	b.n	1b86c <__aeabi_dsub+0xe0>
   1ba3c:	0038      	movs	r0, r7
   1ba3e:	f000 fb45 	bl	1c0cc <__clzsi2>
   1ba42:	3020      	adds	r0, #32
   1ba44:	e706      	b.n	1b854 <__aeabi_dsub+0xc8>
   1ba46:	430a      	orrs	r2, r1
   1ba48:	0017      	movs	r7, r2
   1ba4a:	2100      	movs	r1, #0
   1ba4c:	1e7a      	subs	r2, r7, #1
   1ba4e:	4197      	sbcs	r7, r2
   1ba50:	e6ee      	b.n	1b830 <__aeabi_dsub+0xa4>
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d000      	beq.n	1ba58 <__aeabi_dsub+0x2cc>
   1ba56:	e0e5      	b.n	1bc24 <__aeabi_dsub+0x498>
   1ba58:	1c73      	adds	r3, r6, #1
   1ba5a:	469c      	mov	ip, r3
   1ba5c:	055b      	lsls	r3, r3, #21
   1ba5e:	0d5b      	lsrs	r3, r3, #21
   1ba60:	2b01      	cmp	r3, #1
   1ba62:	dc00      	bgt.n	1ba66 <__aeabi_dsub+0x2da>
   1ba64:	e09f      	b.n	1bba6 <__aeabi_dsub+0x41a>
   1ba66:	4b1a      	ldr	r3, [pc, #104]	; (1bad0 <__aeabi_dsub+0x344>)
   1ba68:	459c      	cmp	ip, r3
   1ba6a:	d100      	bne.n	1ba6e <__aeabi_dsub+0x2e2>
   1ba6c:	e0c5      	b.n	1bbfa <__aeabi_dsub+0x46e>
   1ba6e:	4452      	add	r2, sl
   1ba70:	4552      	cmp	r2, sl
   1ba72:	4180      	sbcs	r0, r0
   1ba74:	1864      	adds	r4, r4, r1
   1ba76:	4240      	negs	r0, r0
   1ba78:	1824      	adds	r4, r4, r0
   1ba7a:	07e7      	lsls	r7, r4, #31
   1ba7c:	0852      	lsrs	r2, r2, #1
   1ba7e:	4317      	orrs	r7, r2
   1ba80:	0864      	lsrs	r4, r4, #1
   1ba82:	4666      	mov	r6, ip
   1ba84:	e708      	b.n	1b898 <__aeabi_dsub+0x10c>
   1ba86:	4812      	ldr	r0, [pc, #72]	; (1bad0 <__aeabi_dsub+0x344>)
   1ba88:	4285      	cmp	r5, r0
   1ba8a:	d100      	bne.n	1ba8e <__aeabi_dsub+0x302>
   1ba8c:	e085      	b.n	1bb9a <__aeabi_dsub+0x40e>
   1ba8e:	001d      	movs	r5, r3
   1ba90:	e6bc      	b.n	1b80c <__aeabi_dsub+0x80>
   1ba92:	0029      	movs	r1, r5
   1ba94:	3e1f      	subs	r6, #31
   1ba96:	40f1      	lsrs	r1, r6
   1ba98:	2b20      	cmp	r3, #32
   1ba9a:	d100      	bne.n	1ba9e <__aeabi_dsub+0x312>
   1ba9c:	e07f      	b.n	1bb9e <__aeabi_dsub+0x412>
   1ba9e:	2240      	movs	r2, #64	; 0x40
   1baa0:	1ad3      	subs	r3, r2, r3
   1baa2:	409d      	lsls	r5, r3
   1baa4:	432f      	orrs	r7, r5
   1baa6:	1e7d      	subs	r5, r7, #1
   1baa8:	41af      	sbcs	r7, r5
   1baaa:	2400      	movs	r4, #0
   1baac:	430f      	orrs	r7, r1
   1baae:	2600      	movs	r6, #0
   1bab0:	e78e      	b.n	1b9d0 <__aeabi_dsub+0x244>
   1bab2:	002b      	movs	r3, r5
   1bab4:	000f      	movs	r7, r1
   1bab6:	3b20      	subs	r3, #32
   1bab8:	40df      	lsrs	r7, r3
   1baba:	2d20      	cmp	r5, #32
   1babc:	d071      	beq.n	1bba2 <__aeabi_dsub+0x416>
   1babe:	2340      	movs	r3, #64	; 0x40
   1bac0:	1b5d      	subs	r5, r3, r5
   1bac2:	40a9      	lsls	r1, r5
   1bac4:	430a      	orrs	r2, r1
   1bac6:	1e51      	subs	r1, r2, #1
   1bac8:	418a      	sbcs	r2, r1
   1baca:	2100      	movs	r1, #0
   1bacc:	4317      	orrs	r7, r2
   1bace:	e6af      	b.n	1b830 <__aeabi_dsub+0xa4>
   1bad0:	000007ff 	.word	0x000007ff
   1bad4:	ff7fffff 	.word	0xff7fffff
   1bad8:	800fffff 	.word	0x800fffff
   1badc:	2e00      	cmp	r6, #0
   1bade:	d03e      	beq.n	1bb5e <__aeabi_dsub+0x3d2>
   1bae0:	4eb3      	ldr	r6, [pc, #716]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bae2:	45b4      	cmp	ip, r6
   1bae4:	d045      	beq.n	1bb72 <__aeabi_dsub+0x3e6>
   1bae6:	2680      	movs	r6, #128	; 0x80
   1bae8:	0436      	lsls	r6, r6, #16
   1baea:	426d      	negs	r5, r5
   1baec:	4334      	orrs	r4, r6
   1baee:	2d38      	cmp	r5, #56	; 0x38
   1baf0:	dd00      	ble.n	1baf4 <__aeabi_dsub+0x368>
   1baf2:	e0a8      	b.n	1bc46 <__aeabi_dsub+0x4ba>
   1baf4:	2d1f      	cmp	r5, #31
   1baf6:	dd00      	ble.n	1bafa <__aeabi_dsub+0x36e>
   1baf8:	e11f      	b.n	1bd3a <__aeabi_dsub+0x5ae>
   1bafa:	2620      	movs	r6, #32
   1bafc:	0027      	movs	r7, r4
   1bafe:	4650      	mov	r0, sl
   1bb00:	1b76      	subs	r6, r6, r5
   1bb02:	40b7      	lsls	r7, r6
   1bb04:	40e8      	lsrs	r0, r5
   1bb06:	4307      	orrs	r7, r0
   1bb08:	4650      	mov	r0, sl
   1bb0a:	40b0      	lsls	r0, r6
   1bb0c:	1e46      	subs	r6, r0, #1
   1bb0e:	41b0      	sbcs	r0, r6
   1bb10:	40ec      	lsrs	r4, r5
   1bb12:	4338      	orrs	r0, r7
   1bb14:	1a17      	subs	r7, r2, r0
   1bb16:	42ba      	cmp	r2, r7
   1bb18:	4192      	sbcs	r2, r2
   1bb1a:	1b0c      	subs	r4, r1, r4
   1bb1c:	4252      	negs	r2, r2
   1bb1e:	1aa4      	subs	r4, r4, r2
   1bb20:	4666      	mov	r6, ip
   1bb22:	4698      	mov	r8, r3
   1bb24:	e68b      	b.n	1b83e <__aeabi_dsub+0xb2>
   1bb26:	4664      	mov	r4, ip
   1bb28:	4667      	mov	r7, ip
   1bb2a:	432c      	orrs	r4, r5
   1bb2c:	d000      	beq.n	1bb30 <__aeabi_dsub+0x3a4>
   1bb2e:	e68b      	b.n	1b848 <__aeabi_dsub+0xbc>
   1bb30:	2500      	movs	r5, #0
   1bb32:	2600      	movs	r6, #0
   1bb34:	2700      	movs	r7, #0
   1bb36:	e6ea      	b.n	1b90e <__aeabi_dsub+0x182>
   1bb38:	001e      	movs	r6, r3
   1bb3a:	e6ad      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bb3c:	2b1f      	cmp	r3, #31
   1bb3e:	dc60      	bgt.n	1bc02 <__aeabi_dsub+0x476>
   1bb40:	2720      	movs	r7, #32
   1bb42:	1af8      	subs	r0, r7, r3
   1bb44:	000f      	movs	r7, r1
   1bb46:	4684      	mov	ip, r0
   1bb48:	4087      	lsls	r7, r0
   1bb4a:	0010      	movs	r0, r2
   1bb4c:	40d8      	lsrs	r0, r3
   1bb4e:	4307      	orrs	r7, r0
   1bb50:	4660      	mov	r0, ip
   1bb52:	4082      	lsls	r2, r0
   1bb54:	1e50      	subs	r0, r2, #1
   1bb56:	4182      	sbcs	r2, r0
   1bb58:	40d9      	lsrs	r1, r3
   1bb5a:	4317      	orrs	r7, r2
   1bb5c:	e6f5      	b.n	1b94a <__aeabi_dsub+0x1be>
   1bb5e:	0026      	movs	r6, r4
   1bb60:	4650      	mov	r0, sl
   1bb62:	4306      	orrs	r6, r0
   1bb64:	d005      	beq.n	1bb72 <__aeabi_dsub+0x3e6>
   1bb66:	43ed      	mvns	r5, r5
   1bb68:	2d00      	cmp	r5, #0
   1bb6a:	d0d3      	beq.n	1bb14 <__aeabi_dsub+0x388>
   1bb6c:	4e90      	ldr	r6, [pc, #576]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bb6e:	45b4      	cmp	ip, r6
   1bb70:	d1bd      	bne.n	1baee <__aeabi_dsub+0x362>
   1bb72:	000c      	movs	r4, r1
   1bb74:	0017      	movs	r7, r2
   1bb76:	4666      	mov	r6, ip
   1bb78:	4698      	mov	r8, r3
   1bb7a:	e68d      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bb7c:	488c      	ldr	r0, [pc, #560]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bb7e:	4283      	cmp	r3, r0
   1bb80:	d00b      	beq.n	1bb9a <__aeabi_dsub+0x40e>
   1bb82:	4663      	mov	r3, ip
   1bb84:	e6d9      	b.n	1b93a <__aeabi_dsub+0x1ae>
   1bb86:	2d00      	cmp	r5, #0
   1bb88:	d000      	beq.n	1bb8c <__aeabi_dsub+0x400>
   1bb8a:	e096      	b.n	1bcba <__aeabi_dsub+0x52e>
   1bb8c:	0008      	movs	r0, r1
   1bb8e:	4310      	orrs	r0, r2
   1bb90:	d100      	bne.n	1bb94 <__aeabi_dsub+0x408>
   1bb92:	e0e2      	b.n	1bd5a <__aeabi_dsub+0x5ce>
   1bb94:	000c      	movs	r4, r1
   1bb96:	0017      	movs	r7, r2
   1bb98:	4698      	mov	r8, r3
   1bb9a:	4e85      	ldr	r6, [pc, #532]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bb9c:	e67c      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bb9e:	2500      	movs	r5, #0
   1bba0:	e780      	b.n	1baa4 <__aeabi_dsub+0x318>
   1bba2:	2100      	movs	r1, #0
   1bba4:	e78e      	b.n	1bac4 <__aeabi_dsub+0x338>
   1bba6:	0023      	movs	r3, r4
   1bba8:	4650      	mov	r0, sl
   1bbaa:	4303      	orrs	r3, r0
   1bbac:	2e00      	cmp	r6, #0
   1bbae:	d000      	beq.n	1bbb2 <__aeabi_dsub+0x426>
   1bbb0:	e0a8      	b.n	1bd04 <__aeabi_dsub+0x578>
   1bbb2:	2b00      	cmp	r3, #0
   1bbb4:	d100      	bne.n	1bbb8 <__aeabi_dsub+0x42c>
   1bbb6:	e0de      	b.n	1bd76 <__aeabi_dsub+0x5ea>
   1bbb8:	000b      	movs	r3, r1
   1bbba:	4313      	orrs	r3, r2
   1bbbc:	d100      	bne.n	1bbc0 <__aeabi_dsub+0x434>
   1bbbe:	e66b      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bbc0:	4452      	add	r2, sl
   1bbc2:	4552      	cmp	r2, sl
   1bbc4:	4180      	sbcs	r0, r0
   1bbc6:	1864      	adds	r4, r4, r1
   1bbc8:	4240      	negs	r0, r0
   1bbca:	1824      	adds	r4, r4, r0
   1bbcc:	0017      	movs	r7, r2
   1bbce:	0223      	lsls	r3, r4, #8
   1bbd0:	d400      	bmi.n	1bbd4 <__aeabi_dsub+0x448>
   1bbd2:	e6fd      	b.n	1b9d0 <__aeabi_dsub+0x244>
   1bbd4:	4b77      	ldr	r3, [pc, #476]	; (1bdb4 <__aeabi_dsub+0x628>)
   1bbd6:	4666      	mov	r6, ip
   1bbd8:	401c      	ands	r4, r3
   1bbda:	e65d      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bbdc:	0025      	movs	r5, r4
   1bbde:	4650      	mov	r0, sl
   1bbe0:	4305      	orrs	r5, r0
   1bbe2:	2e00      	cmp	r6, #0
   1bbe4:	d1cf      	bne.n	1bb86 <__aeabi_dsub+0x3fa>
   1bbe6:	2d00      	cmp	r5, #0
   1bbe8:	d14f      	bne.n	1bc8a <__aeabi_dsub+0x4fe>
   1bbea:	000c      	movs	r4, r1
   1bbec:	4314      	orrs	r4, r2
   1bbee:	d100      	bne.n	1bbf2 <__aeabi_dsub+0x466>
   1bbf0:	e0a0      	b.n	1bd34 <__aeabi_dsub+0x5a8>
   1bbf2:	000c      	movs	r4, r1
   1bbf4:	0017      	movs	r7, r2
   1bbf6:	4698      	mov	r8, r3
   1bbf8:	e64e      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bbfa:	4666      	mov	r6, ip
   1bbfc:	2400      	movs	r4, #0
   1bbfe:	2700      	movs	r7, #0
   1bc00:	e685      	b.n	1b90e <__aeabi_dsub+0x182>
   1bc02:	001f      	movs	r7, r3
   1bc04:	0008      	movs	r0, r1
   1bc06:	3f20      	subs	r7, #32
   1bc08:	40f8      	lsrs	r0, r7
   1bc0a:	0007      	movs	r7, r0
   1bc0c:	2b20      	cmp	r3, #32
   1bc0e:	d100      	bne.n	1bc12 <__aeabi_dsub+0x486>
   1bc10:	e08e      	b.n	1bd30 <__aeabi_dsub+0x5a4>
   1bc12:	2040      	movs	r0, #64	; 0x40
   1bc14:	1ac3      	subs	r3, r0, r3
   1bc16:	4099      	lsls	r1, r3
   1bc18:	430a      	orrs	r2, r1
   1bc1a:	1e51      	subs	r1, r2, #1
   1bc1c:	418a      	sbcs	r2, r1
   1bc1e:	2100      	movs	r1, #0
   1bc20:	4317      	orrs	r7, r2
   1bc22:	e692      	b.n	1b94a <__aeabi_dsub+0x1be>
   1bc24:	2e00      	cmp	r6, #0
   1bc26:	d114      	bne.n	1bc52 <__aeabi_dsub+0x4c6>
   1bc28:	0026      	movs	r6, r4
   1bc2a:	4650      	mov	r0, sl
   1bc2c:	4306      	orrs	r6, r0
   1bc2e:	d062      	beq.n	1bcf6 <__aeabi_dsub+0x56a>
   1bc30:	43db      	mvns	r3, r3
   1bc32:	2b00      	cmp	r3, #0
   1bc34:	d15c      	bne.n	1bcf0 <__aeabi_dsub+0x564>
   1bc36:	1887      	adds	r7, r0, r2
   1bc38:	4297      	cmp	r7, r2
   1bc3a:	4192      	sbcs	r2, r2
   1bc3c:	1864      	adds	r4, r4, r1
   1bc3e:	4252      	negs	r2, r2
   1bc40:	18a4      	adds	r4, r4, r2
   1bc42:	4666      	mov	r6, ip
   1bc44:	e687      	b.n	1b956 <__aeabi_dsub+0x1ca>
   1bc46:	4650      	mov	r0, sl
   1bc48:	4320      	orrs	r0, r4
   1bc4a:	1e44      	subs	r4, r0, #1
   1bc4c:	41a0      	sbcs	r0, r4
   1bc4e:	2400      	movs	r4, #0
   1bc50:	e760      	b.n	1bb14 <__aeabi_dsub+0x388>
   1bc52:	4e57      	ldr	r6, [pc, #348]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bc54:	45b4      	cmp	ip, r6
   1bc56:	d04e      	beq.n	1bcf6 <__aeabi_dsub+0x56a>
   1bc58:	2680      	movs	r6, #128	; 0x80
   1bc5a:	0436      	lsls	r6, r6, #16
   1bc5c:	425b      	negs	r3, r3
   1bc5e:	4334      	orrs	r4, r6
   1bc60:	2b38      	cmp	r3, #56	; 0x38
   1bc62:	dd00      	ble.n	1bc66 <__aeabi_dsub+0x4da>
   1bc64:	e07f      	b.n	1bd66 <__aeabi_dsub+0x5da>
   1bc66:	2b1f      	cmp	r3, #31
   1bc68:	dd00      	ble.n	1bc6c <__aeabi_dsub+0x4e0>
   1bc6a:	e08b      	b.n	1bd84 <__aeabi_dsub+0x5f8>
   1bc6c:	2620      	movs	r6, #32
   1bc6e:	0027      	movs	r7, r4
   1bc70:	4650      	mov	r0, sl
   1bc72:	1af6      	subs	r6, r6, r3
   1bc74:	40b7      	lsls	r7, r6
   1bc76:	40d8      	lsrs	r0, r3
   1bc78:	4307      	orrs	r7, r0
   1bc7a:	4650      	mov	r0, sl
   1bc7c:	40b0      	lsls	r0, r6
   1bc7e:	1e46      	subs	r6, r0, #1
   1bc80:	41b0      	sbcs	r0, r6
   1bc82:	4307      	orrs	r7, r0
   1bc84:	40dc      	lsrs	r4, r3
   1bc86:	18bf      	adds	r7, r7, r2
   1bc88:	e7d6      	b.n	1bc38 <__aeabi_dsub+0x4ac>
   1bc8a:	000d      	movs	r5, r1
   1bc8c:	4315      	orrs	r5, r2
   1bc8e:	d100      	bne.n	1bc92 <__aeabi_dsub+0x506>
   1bc90:	e602      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bc92:	4650      	mov	r0, sl
   1bc94:	1a80      	subs	r0, r0, r2
   1bc96:	4582      	cmp	sl, r0
   1bc98:	41bf      	sbcs	r7, r7
   1bc9a:	1a65      	subs	r5, r4, r1
   1bc9c:	427f      	negs	r7, r7
   1bc9e:	1bed      	subs	r5, r5, r7
   1bca0:	4684      	mov	ip, r0
   1bca2:	0228      	lsls	r0, r5, #8
   1bca4:	d400      	bmi.n	1bca8 <__aeabi_dsub+0x51c>
   1bca6:	e68d      	b.n	1b9c4 <__aeabi_dsub+0x238>
   1bca8:	4650      	mov	r0, sl
   1bcaa:	1a17      	subs	r7, r2, r0
   1bcac:	42ba      	cmp	r2, r7
   1bcae:	4192      	sbcs	r2, r2
   1bcb0:	1b0c      	subs	r4, r1, r4
   1bcb2:	4252      	negs	r2, r2
   1bcb4:	1aa4      	subs	r4, r4, r2
   1bcb6:	4698      	mov	r8, r3
   1bcb8:	e5ee      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bcba:	000d      	movs	r5, r1
   1bcbc:	4315      	orrs	r5, r2
   1bcbe:	d100      	bne.n	1bcc2 <__aeabi_dsub+0x536>
   1bcc0:	e76b      	b.n	1bb9a <__aeabi_dsub+0x40e>
   1bcc2:	4650      	mov	r0, sl
   1bcc4:	0767      	lsls	r7, r4, #29
   1bcc6:	08c0      	lsrs	r0, r0, #3
   1bcc8:	4307      	orrs	r7, r0
   1bcca:	2080      	movs	r0, #128	; 0x80
   1bccc:	08e4      	lsrs	r4, r4, #3
   1bcce:	0300      	lsls	r0, r0, #12
   1bcd0:	4204      	tst	r4, r0
   1bcd2:	d007      	beq.n	1bce4 <__aeabi_dsub+0x558>
   1bcd4:	08cd      	lsrs	r5, r1, #3
   1bcd6:	4205      	tst	r5, r0
   1bcd8:	d104      	bne.n	1bce4 <__aeabi_dsub+0x558>
   1bcda:	002c      	movs	r4, r5
   1bcdc:	4698      	mov	r8, r3
   1bcde:	08d7      	lsrs	r7, r2, #3
   1bce0:	0749      	lsls	r1, r1, #29
   1bce2:	430f      	orrs	r7, r1
   1bce4:	0f7b      	lsrs	r3, r7, #29
   1bce6:	00e4      	lsls	r4, r4, #3
   1bce8:	431c      	orrs	r4, r3
   1bcea:	00ff      	lsls	r7, r7, #3
   1bcec:	4e30      	ldr	r6, [pc, #192]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bcee:	e5d3      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bcf0:	4e2f      	ldr	r6, [pc, #188]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bcf2:	45b4      	cmp	ip, r6
   1bcf4:	d1b4      	bne.n	1bc60 <__aeabi_dsub+0x4d4>
   1bcf6:	000c      	movs	r4, r1
   1bcf8:	0017      	movs	r7, r2
   1bcfa:	4666      	mov	r6, ip
   1bcfc:	e5cc      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bcfe:	2700      	movs	r7, #0
   1bd00:	2400      	movs	r4, #0
   1bd02:	e5e8      	b.n	1b8d6 <__aeabi_dsub+0x14a>
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	d039      	beq.n	1bd7c <__aeabi_dsub+0x5f0>
   1bd08:	000b      	movs	r3, r1
   1bd0a:	4313      	orrs	r3, r2
   1bd0c:	d100      	bne.n	1bd10 <__aeabi_dsub+0x584>
   1bd0e:	e744      	b.n	1bb9a <__aeabi_dsub+0x40e>
   1bd10:	08c0      	lsrs	r0, r0, #3
   1bd12:	0767      	lsls	r7, r4, #29
   1bd14:	4307      	orrs	r7, r0
   1bd16:	2080      	movs	r0, #128	; 0x80
   1bd18:	08e4      	lsrs	r4, r4, #3
   1bd1a:	0300      	lsls	r0, r0, #12
   1bd1c:	4204      	tst	r4, r0
   1bd1e:	d0e1      	beq.n	1bce4 <__aeabi_dsub+0x558>
   1bd20:	08cb      	lsrs	r3, r1, #3
   1bd22:	4203      	tst	r3, r0
   1bd24:	d1de      	bne.n	1bce4 <__aeabi_dsub+0x558>
   1bd26:	08d7      	lsrs	r7, r2, #3
   1bd28:	0749      	lsls	r1, r1, #29
   1bd2a:	430f      	orrs	r7, r1
   1bd2c:	001c      	movs	r4, r3
   1bd2e:	e7d9      	b.n	1bce4 <__aeabi_dsub+0x558>
   1bd30:	2100      	movs	r1, #0
   1bd32:	e771      	b.n	1bc18 <__aeabi_dsub+0x48c>
   1bd34:	2500      	movs	r5, #0
   1bd36:	2700      	movs	r7, #0
   1bd38:	e5e9      	b.n	1b90e <__aeabi_dsub+0x182>
   1bd3a:	002e      	movs	r6, r5
   1bd3c:	0027      	movs	r7, r4
   1bd3e:	3e20      	subs	r6, #32
   1bd40:	40f7      	lsrs	r7, r6
   1bd42:	2d20      	cmp	r5, #32
   1bd44:	d02f      	beq.n	1bda6 <__aeabi_dsub+0x61a>
   1bd46:	2640      	movs	r6, #64	; 0x40
   1bd48:	1b75      	subs	r5, r6, r5
   1bd4a:	40ac      	lsls	r4, r5
   1bd4c:	4650      	mov	r0, sl
   1bd4e:	4320      	orrs	r0, r4
   1bd50:	1e44      	subs	r4, r0, #1
   1bd52:	41a0      	sbcs	r0, r4
   1bd54:	2400      	movs	r4, #0
   1bd56:	4338      	orrs	r0, r7
   1bd58:	e6dc      	b.n	1bb14 <__aeabi_dsub+0x388>
   1bd5a:	2480      	movs	r4, #128	; 0x80
   1bd5c:	2500      	movs	r5, #0
   1bd5e:	0324      	lsls	r4, r4, #12
   1bd60:	4e13      	ldr	r6, [pc, #76]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bd62:	2700      	movs	r7, #0
   1bd64:	e5d3      	b.n	1b90e <__aeabi_dsub+0x182>
   1bd66:	4650      	mov	r0, sl
   1bd68:	4320      	orrs	r0, r4
   1bd6a:	0007      	movs	r7, r0
   1bd6c:	1e78      	subs	r0, r7, #1
   1bd6e:	4187      	sbcs	r7, r0
   1bd70:	2400      	movs	r4, #0
   1bd72:	18bf      	adds	r7, r7, r2
   1bd74:	e760      	b.n	1bc38 <__aeabi_dsub+0x4ac>
   1bd76:	000c      	movs	r4, r1
   1bd78:	0017      	movs	r7, r2
   1bd7a:	e58d      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bd7c:	000c      	movs	r4, r1
   1bd7e:	0017      	movs	r7, r2
   1bd80:	4e0b      	ldr	r6, [pc, #44]	; (1bdb0 <__aeabi_dsub+0x624>)
   1bd82:	e589      	b.n	1b898 <__aeabi_dsub+0x10c>
   1bd84:	001e      	movs	r6, r3
   1bd86:	0027      	movs	r7, r4
   1bd88:	3e20      	subs	r6, #32
   1bd8a:	40f7      	lsrs	r7, r6
   1bd8c:	2b20      	cmp	r3, #32
   1bd8e:	d00c      	beq.n	1bdaa <__aeabi_dsub+0x61e>
   1bd90:	2640      	movs	r6, #64	; 0x40
   1bd92:	1af3      	subs	r3, r6, r3
   1bd94:	409c      	lsls	r4, r3
   1bd96:	4650      	mov	r0, sl
   1bd98:	4320      	orrs	r0, r4
   1bd9a:	1e44      	subs	r4, r0, #1
   1bd9c:	41a0      	sbcs	r0, r4
   1bd9e:	4307      	orrs	r7, r0
   1bda0:	2400      	movs	r4, #0
   1bda2:	18bf      	adds	r7, r7, r2
   1bda4:	e748      	b.n	1bc38 <__aeabi_dsub+0x4ac>
   1bda6:	2400      	movs	r4, #0
   1bda8:	e7d0      	b.n	1bd4c <__aeabi_dsub+0x5c0>
   1bdaa:	2400      	movs	r4, #0
   1bdac:	e7f3      	b.n	1bd96 <__aeabi_dsub+0x60a>
   1bdae:	46c0      	nop			; (mov r8, r8)
   1bdb0:	000007ff 	.word	0x000007ff
   1bdb4:	ff7fffff 	.word	0xff7fffff

0001bdb8 <__aeabi_d2iz>:
   1bdb8:	b530      	push	{r4, r5, lr}
   1bdba:	4d13      	ldr	r5, [pc, #76]	; (1be08 <__aeabi_d2iz+0x50>)
   1bdbc:	030a      	lsls	r2, r1, #12
   1bdbe:	004b      	lsls	r3, r1, #1
   1bdc0:	0b12      	lsrs	r2, r2, #12
   1bdc2:	0d5b      	lsrs	r3, r3, #21
   1bdc4:	0fc9      	lsrs	r1, r1, #31
   1bdc6:	2400      	movs	r4, #0
   1bdc8:	42ab      	cmp	r3, r5
   1bdca:	dd10      	ble.n	1bdee <__aeabi_d2iz+0x36>
   1bdcc:	4c0f      	ldr	r4, [pc, #60]	; (1be0c <__aeabi_d2iz+0x54>)
   1bdce:	42a3      	cmp	r3, r4
   1bdd0:	dc0f      	bgt.n	1bdf2 <__aeabi_d2iz+0x3a>
   1bdd2:	2480      	movs	r4, #128	; 0x80
   1bdd4:	4d0e      	ldr	r5, [pc, #56]	; (1be10 <__aeabi_d2iz+0x58>)
   1bdd6:	0364      	lsls	r4, r4, #13
   1bdd8:	4322      	orrs	r2, r4
   1bdda:	1aed      	subs	r5, r5, r3
   1bddc:	2d1f      	cmp	r5, #31
   1bdde:	dd0b      	ble.n	1bdf8 <__aeabi_d2iz+0x40>
   1bde0:	480c      	ldr	r0, [pc, #48]	; (1be14 <__aeabi_d2iz+0x5c>)
   1bde2:	1ac3      	subs	r3, r0, r3
   1bde4:	40da      	lsrs	r2, r3
   1bde6:	4254      	negs	r4, r2
   1bde8:	2900      	cmp	r1, #0
   1bdea:	d100      	bne.n	1bdee <__aeabi_d2iz+0x36>
   1bdec:	0014      	movs	r4, r2
   1bdee:	0020      	movs	r0, r4
   1bdf0:	bd30      	pop	{r4, r5, pc}
   1bdf2:	4b09      	ldr	r3, [pc, #36]	; (1be18 <__aeabi_d2iz+0x60>)
   1bdf4:	18cc      	adds	r4, r1, r3
   1bdf6:	e7fa      	b.n	1bdee <__aeabi_d2iz+0x36>
   1bdf8:	4c08      	ldr	r4, [pc, #32]	; (1be1c <__aeabi_d2iz+0x64>)
   1bdfa:	40e8      	lsrs	r0, r5
   1bdfc:	46a4      	mov	ip, r4
   1bdfe:	4463      	add	r3, ip
   1be00:	409a      	lsls	r2, r3
   1be02:	4302      	orrs	r2, r0
   1be04:	e7ef      	b.n	1bde6 <__aeabi_d2iz+0x2e>
   1be06:	46c0      	nop			; (mov r8, r8)
   1be08:	000003fe 	.word	0x000003fe
   1be0c:	0000041d 	.word	0x0000041d
   1be10:	00000433 	.word	0x00000433
   1be14:	00000413 	.word	0x00000413
   1be18:	7fffffff 	.word	0x7fffffff
   1be1c:	fffffbed 	.word	0xfffffbed

0001be20 <__aeabi_i2d>:
   1be20:	b570      	push	{r4, r5, r6, lr}
   1be22:	2800      	cmp	r0, #0
   1be24:	d030      	beq.n	1be88 <__aeabi_i2d+0x68>
   1be26:	17c3      	asrs	r3, r0, #31
   1be28:	18c4      	adds	r4, r0, r3
   1be2a:	405c      	eors	r4, r3
   1be2c:	0fc5      	lsrs	r5, r0, #31
   1be2e:	0020      	movs	r0, r4
   1be30:	f000 f94c 	bl	1c0cc <__clzsi2>
   1be34:	4b17      	ldr	r3, [pc, #92]	; (1be94 <__aeabi_i2d+0x74>)
   1be36:	4a18      	ldr	r2, [pc, #96]	; (1be98 <__aeabi_i2d+0x78>)
   1be38:	1a1b      	subs	r3, r3, r0
   1be3a:	1ad2      	subs	r2, r2, r3
   1be3c:	2a1f      	cmp	r2, #31
   1be3e:	dd18      	ble.n	1be72 <__aeabi_i2d+0x52>
   1be40:	4a16      	ldr	r2, [pc, #88]	; (1be9c <__aeabi_i2d+0x7c>)
   1be42:	1ad2      	subs	r2, r2, r3
   1be44:	4094      	lsls	r4, r2
   1be46:	2200      	movs	r2, #0
   1be48:	0324      	lsls	r4, r4, #12
   1be4a:	055b      	lsls	r3, r3, #21
   1be4c:	0b24      	lsrs	r4, r4, #12
   1be4e:	0d5b      	lsrs	r3, r3, #21
   1be50:	2100      	movs	r1, #0
   1be52:	0010      	movs	r0, r2
   1be54:	0324      	lsls	r4, r4, #12
   1be56:	0d0a      	lsrs	r2, r1, #20
   1be58:	0b24      	lsrs	r4, r4, #12
   1be5a:	0512      	lsls	r2, r2, #20
   1be5c:	4322      	orrs	r2, r4
   1be5e:	4c10      	ldr	r4, [pc, #64]	; (1bea0 <__aeabi_i2d+0x80>)
   1be60:	051b      	lsls	r3, r3, #20
   1be62:	4022      	ands	r2, r4
   1be64:	4313      	orrs	r3, r2
   1be66:	005b      	lsls	r3, r3, #1
   1be68:	07ed      	lsls	r5, r5, #31
   1be6a:	085b      	lsrs	r3, r3, #1
   1be6c:	432b      	orrs	r3, r5
   1be6e:	0019      	movs	r1, r3
   1be70:	bd70      	pop	{r4, r5, r6, pc}
   1be72:	0021      	movs	r1, r4
   1be74:	4091      	lsls	r1, r2
   1be76:	000a      	movs	r2, r1
   1be78:	210b      	movs	r1, #11
   1be7a:	1a08      	subs	r0, r1, r0
   1be7c:	40c4      	lsrs	r4, r0
   1be7e:	055b      	lsls	r3, r3, #21
   1be80:	0324      	lsls	r4, r4, #12
   1be82:	0b24      	lsrs	r4, r4, #12
   1be84:	0d5b      	lsrs	r3, r3, #21
   1be86:	e7e3      	b.n	1be50 <__aeabi_i2d+0x30>
   1be88:	2500      	movs	r5, #0
   1be8a:	2300      	movs	r3, #0
   1be8c:	2400      	movs	r4, #0
   1be8e:	2200      	movs	r2, #0
   1be90:	e7de      	b.n	1be50 <__aeabi_i2d+0x30>
   1be92:	46c0      	nop			; (mov r8, r8)
   1be94:	0000041e 	.word	0x0000041e
   1be98:	00000433 	.word	0x00000433
   1be9c:	00000413 	.word	0x00000413
   1bea0:	800fffff 	.word	0x800fffff

0001bea4 <__aeabi_ui2d>:
   1bea4:	b510      	push	{r4, lr}
   1bea6:	1e04      	subs	r4, r0, #0
   1bea8:	d028      	beq.n	1befc <__aeabi_ui2d+0x58>
   1beaa:	f000 f90f 	bl	1c0cc <__clzsi2>
   1beae:	4b15      	ldr	r3, [pc, #84]	; (1bf04 <__aeabi_ui2d+0x60>)
   1beb0:	4a15      	ldr	r2, [pc, #84]	; (1bf08 <__aeabi_ui2d+0x64>)
   1beb2:	1a1b      	subs	r3, r3, r0
   1beb4:	1ad2      	subs	r2, r2, r3
   1beb6:	2a1f      	cmp	r2, #31
   1beb8:	dd15      	ble.n	1bee6 <__aeabi_ui2d+0x42>
   1beba:	4a14      	ldr	r2, [pc, #80]	; (1bf0c <__aeabi_ui2d+0x68>)
   1bebc:	1ad2      	subs	r2, r2, r3
   1bebe:	4094      	lsls	r4, r2
   1bec0:	2200      	movs	r2, #0
   1bec2:	0324      	lsls	r4, r4, #12
   1bec4:	055b      	lsls	r3, r3, #21
   1bec6:	0b24      	lsrs	r4, r4, #12
   1bec8:	0d5b      	lsrs	r3, r3, #21
   1beca:	2100      	movs	r1, #0
   1becc:	0010      	movs	r0, r2
   1bece:	0324      	lsls	r4, r4, #12
   1bed0:	0d0a      	lsrs	r2, r1, #20
   1bed2:	0b24      	lsrs	r4, r4, #12
   1bed4:	0512      	lsls	r2, r2, #20
   1bed6:	4322      	orrs	r2, r4
   1bed8:	4c0d      	ldr	r4, [pc, #52]	; (1bf10 <__aeabi_ui2d+0x6c>)
   1beda:	051b      	lsls	r3, r3, #20
   1bedc:	4022      	ands	r2, r4
   1bede:	4313      	orrs	r3, r2
   1bee0:	005b      	lsls	r3, r3, #1
   1bee2:	0859      	lsrs	r1, r3, #1
   1bee4:	bd10      	pop	{r4, pc}
   1bee6:	0021      	movs	r1, r4
   1bee8:	4091      	lsls	r1, r2
   1beea:	000a      	movs	r2, r1
   1beec:	210b      	movs	r1, #11
   1beee:	1a08      	subs	r0, r1, r0
   1bef0:	40c4      	lsrs	r4, r0
   1bef2:	055b      	lsls	r3, r3, #21
   1bef4:	0324      	lsls	r4, r4, #12
   1bef6:	0b24      	lsrs	r4, r4, #12
   1bef8:	0d5b      	lsrs	r3, r3, #21
   1befa:	e7e6      	b.n	1beca <__aeabi_ui2d+0x26>
   1befc:	2300      	movs	r3, #0
   1befe:	2400      	movs	r4, #0
   1bf00:	2200      	movs	r2, #0
   1bf02:	e7e2      	b.n	1beca <__aeabi_ui2d+0x26>
   1bf04:	0000041e 	.word	0x0000041e
   1bf08:	00000433 	.word	0x00000433
   1bf0c:	00000413 	.word	0x00000413
   1bf10:	800fffff 	.word	0x800fffff

0001bf14 <__aeabi_f2d>:
   1bf14:	0041      	lsls	r1, r0, #1
   1bf16:	0e09      	lsrs	r1, r1, #24
   1bf18:	1c4b      	adds	r3, r1, #1
   1bf1a:	b570      	push	{r4, r5, r6, lr}
   1bf1c:	b2db      	uxtb	r3, r3
   1bf1e:	0246      	lsls	r6, r0, #9
   1bf20:	0a75      	lsrs	r5, r6, #9
   1bf22:	0fc4      	lsrs	r4, r0, #31
   1bf24:	2b01      	cmp	r3, #1
   1bf26:	dd14      	ble.n	1bf52 <__aeabi_f2d+0x3e>
   1bf28:	23e0      	movs	r3, #224	; 0xe0
   1bf2a:	009b      	lsls	r3, r3, #2
   1bf2c:	076d      	lsls	r5, r5, #29
   1bf2e:	0b36      	lsrs	r6, r6, #12
   1bf30:	18cb      	adds	r3, r1, r3
   1bf32:	2100      	movs	r1, #0
   1bf34:	0d0a      	lsrs	r2, r1, #20
   1bf36:	0028      	movs	r0, r5
   1bf38:	0512      	lsls	r2, r2, #20
   1bf3a:	4d1c      	ldr	r5, [pc, #112]	; (1bfac <__aeabi_f2d+0x98>)
   1bf3c:	4332      	orrs	r2, r6
   1bf3e:	055b      	lsls	r3, r3, #21
   1bf40:	402a      	ands	r2, r5
   1bf42:	085b      	lsrs	r3, r3, #1
   1bf44:	4313      	orrs	r3, r2
   1bf46:	005b      	lsls	r3, r3, #1
   1bf48:	07e4      	lsls	r4, r4, #31
   1bf4a:	085b      	lsrs	r3, r3, #1
   1bf4c:	4323      	orrs	r3, r4
   1bf4e:	0019      	movs	r1, r3
   1bf50:	bd70      	pop	{r4, r5, r6, pc}
   1bf52:	2900      	cmp	r1, #0
   1bf54:	d114      	bne.n	1bf80 <__aeabi_f2d+0x6c>
   1bf56:	2d00      	cmp	r5, #0
   1bf58:	d01e      	beq.n	1bf98 <__aeabi_f2d+0x84>
   1bf5a:	0028      	movs	r0, r5
   1bf5c:	f000 f8b6 	bl	1c0cc <__clzsi2>
   1bf60:	280a      	cmp	r0, #10
   1bf62:	dc1c      	bgt.n	1bf9e <__aeabi_f2d+0x8a>
   1bf64:	230b      	movs	r3, #11
   1bf66:	002a      	movs	r2, r5
   1bf68:	1a1b      	subs	r3, r3, r0
   1bf6a:	40da      	lsrs	r2, r3
   1bf6c:	0003      	movs	r3, r0
   1bf6e:	3315      	adds	r3, #21
   1bf70:	409d      	lsls	r5, r3
   1bf72:	4b0f      	ldr	r3, [pc, #60]	; (1bfb0 <__aeabi_f2d+0x9c>)
   1bf74:	0312      	lsls	r2, r2, #12
   1bf76:	1a1b      	subs	r3, r3, r0
   1bf78:	055b      	lsls	r3, r3, #21
   1bf7a:	0b16      	lsrs	r6, r2, #12
   1bf7c:	0d5b      	lsrs	r3, r3, #21
   1bf7e:	e7d8      	b.n	1bf32 <__aeabi_f2d+0x1e>
   1bf80:	2d00      	cmp	r5, #0
   1bf82:	d006      	beq.n	1bf92 <__aeabi_f2d+0x7e>
   1bf84:	0b32      	lsrs	r2, r6, #12
   1bf86:	2680      	movs	r6, #128	; 0x80
   1bf88:	0336      	lsls	r6, r6, #12
   1bf8a:	076d      	lsls	r5, r5, #29
   1bf8c:	4316      	orrs	r6, r2
   1bf8e:	4b09      	ldr	r3, [pc, #36]	; (1bfb4 <__aeabi_f2d+0xa0>)
   1bf90:	e7cf      	b.n	1bf32 <__aeabi_f2d+0x1e>
   1bf92:	4b08      	ldr	r3, [pc, #32]	; (1bfb4 <__aeabi_f2d+0xa0>)
   1bf94:	2600      	movs	r6, #0
   1bf96:	e7cc      	b.n	1bf32 <__aeabi_f2d+0x1e>
   1bf98:	2300      	movs	r3, #0
   1bf9a:	2600      	movs	r6, #0
   1bf9c:	e7c9      	b.n	1bf32 <__aeabi_f2d+0x1e>
   1bf9e:	0003      	movs	r3, r0
   1bfa0:	002a      	movs	r2, r5
   1bfa2:	3b0b      	subs	r3, #11
   1bfa4:	409a      	lsls	r2, r3
   1bfa6:	2500      	movs	r5, #0
   1bfa8:	e7e3      	b.n	1bf72 <__aeabi_f2d+0x5e>
   1bfaa:	46c0      	nop			; (mov r8, r8)
   1bfac:	800fffff 	.word	0x800fffff
   1bfb0:	00000389 	.word	0x00000389
   1bfb4:	000007ff 	.word	0x000007ff

0001bfb8 <__aeabi_d2f>:
   1bfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfba:	004c      	lsls	r4, r1, #1
   1bfbc:	0d64      	lsrs	r4, r4, #21
   1bfbe:	030b      	lsls	r3, r1, #12
   1bfc0:	1c62      	adds	r2, r4, #1
   1bfc2:	0f45      	lsrs	r5, r0, #29
   1bfc4:	0a5b      	lsrs	r3, r3, #9
   1bfc6:	0552      	lsls	r2, r2, #21
   1bfc8:	432b      	orrs	r3, r5
   1bfca:	0fc9      	lsrs	r1, r1, #31
   1bfcc:	00c5      	lsls	r5, r0, #3
   1bfce:	0d52      	lsrs	r2, r2, #21
   1bfd0:	2a01      	cmp	r2, #1
   1bfd2:	dd28      	ble.n	1c026 <__aeabi_d2f+0x6e>
   1bfd4:	4a3a      	ldr	r2, [pc, #232]	; (1c0c0 <__aeabi_d2f+0x108>)
   1bfd6:	18a6      	adds	r6, r4, r2
   1bfd8:	2efe      	cmp	r6, #254	; 0xfe
   1bfda:	dc1b      	bgt.n	1c014 <__aeabi_d2f+0x5c>
   1bfdc:	2e00      	cmp	r6, #0
   1bfde:	dd3e      	ble.n	1c05e <__aeabi_d2f+0xa6>
   1bfe0:	0180      	lsls	r0, r0, #6
   1bfe2:	0002      	movs	r2, r0
   1bfe4:	1e50      	subs	r0, r2, #1
   1bfe6:	4182      	sbcs	r2, r0
   1bfe8:	0f6d      	lsrs	r5, r5, #29
   1bfea:	432a      	orrs	r2, r5
   1bfec:	00db      	lsls	r3, r3, #3
   1bfee:	4313      	orrs	r3, r2
   1bff0:	075a      	lsls	r2, r3, #29
   1bff2:	d004      	beq.n	1bffe <__aeabi_d2f+0x46>
   1bff4:	220f      	movs	r2, #15
   1bff6:	401a      	ands	r2, r3
   1bff8:	2a04      	cmp	r2, #4
   1bffa:	d000      	beq.n	1bffe <__aeabi_d2f+0x46>
   1bffc:	3304      	adds	r3, #4
   1bffe:	2280      	movs	r2, #128	; 0x80
   1c000:	04d2      	lsls	r2, r2, #19
   1c002:	401a      	ands	r2, r3
   1c004:	d05a      	beq.n	1c0bc <__aeabi_d2f+0x104>
   1c006:	3601      	adds	r6, #1
   1c008:	2eff      	cmp	r6, #255	; 0xff
   1c00a:	d003      	beq.n	1c014 <__aeabi_d2f+0x5c>
   1c00c:	019b      	lsls	r3, r3, #6
   1c00e:	0a5b      	lsrs	r3, r3, #9
   1c010:	b2f4      	uxtb	r4, r6
   1c012:	e001      	b.n	1c018 <__aeabi_d2f+0x60>
   1c014:	24ff      	movs	r4, #255	; 0xff
   1c016:	2300      	movs	r3, #0
   1c018:	0258      	lsls	r0, r3, #9
   1c01a:	05e4      	lsls	r4, r4, #23
   1c01c:	0a40      	lsrs	r0, r0, #9
   1c01e:	07c9      	lsls	r1, r1, #31
   1c020:	4320      	orrs	r0, r4
   1c022:	4308      	orrs	r0, r1
   1c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c026:	2c00      	cmp	r4, #0
   1c028:	d007      	beq.n	1c03a <__aeabi_d2f+0x82>
   1c02a:	431d      	orrs	r5, r3
   1c02c:	d0f2      	beq.n	1c014 <__aeabi_d2f+0x5c>
   1c02e:	2080      	movs	r0, #128	; 0x80
   1c030:	00db      	lsls	r3, r3, #3
   1c032:	0480      	lsls	r0, r0, #18
   1c034:	4303      	orrs	r3, r0
   1c036:	26ff      	movs	r6, #255	; 0xff
   1c038:	e7da      	b.n	1bff0 <__aeabi_d2f+0x38>
   1c03a:	432b      	orrs	r3, r5
   1c03c:	d003      	beq.n	1c046 <__aeabi_d2f+0x8e>
   1c03e:	2305      	movs	r3, #5
   1c040:	08db      	lsrs	r3, r3, #3
   1c042:	2cff      	cmp	r4, #255	; 0xff
   1c044:	d003      	beq.n	1c04e <__aeabi_d2f+0x96>
   1c046:	025b      	lsls	r3, r3, #9
   1c048:	0a5b      	lsrs	r3, r3, #9
   1c04a:	b2e4      	uxtb	r4, r4
   1c04c:	e7e4      	b.n	1c018 <__aeabi_d2f+0x60>
   1c04e:	2b00      	cmp	r3, #0
   1c050:	d032      	beq.n	1c0b8 <__aeabi_d2f+0x100>
   1c052:	2080      	movs	r0, #128	; 0x80
   1c054:	03c0      	lsls	r0, r0, #15
   1c056:	4303      	orrs	r3, r0
   1c058:	025b      	lsls	r3, r3, #9
   1c05a:	0a5b      	lsrs	r3, r3, #9
   1c05c:	e7dc      	b.n	1c018 <__aeabi_d2f+0x60>
   1c05e:	0032      	movs	r2, r6
   1c060:	3217      	adds	r2, #23
   1c062:	db14      	blt.n	1c08e <__aeabi_d2f+0xd6>
   1c064:	2280      	movs	r2, #128	; 0x80
   1c066:	271e      	movs	r7, #30
   1c068:	0412      	lsls	r2, r2, #16
   1c06a:	4313      	orrs	r3, r2
   1c06c:	1bbf      	subs	r7, r7, r6
   1c06e:	2f1f      	cmp	r7, #31
   1c070:	dc0f      	bgt.n	1c092 <__aeabi_d2f+0xda>
   1c072:	4a14      	ldr	r2, [pc, #80]	; (1c0c4 <__aeabi_d2f+0x10c>)
   1c074:	4694      	mov	ip, r2
   1c076:	4464      	add	r4, ip
   1c078:	002a      	movs	r2, r5
   1c07a:	40a5      	lsls	r5, r4
   1c07c:	002e      	movs	r6, r5
   1c07e:	40a3      	lsls	r3, r4
   1c080:	1e75      	subs	r5, r6, #1
   1c082:	41ae      	sbcs	r6, r5
   1c084:	40fa      	lsrs	r2, r7
   1c086:	4333      	orrs	r3, r6
   1c088:	4313      	orrs	r3, r2
   1c08a:	2600      	movs	r6, #0
   1c08c:	e7b0      	b.n	1bff0 <__aeabi_d2f+0x38>
   1c08e:	2400      	movs	r4, #0
   1c090:	e7d5      	b.n	1c03e <__aeabi_d2f+0x86>
   1c092:	2202      	movs	r2, #2
   1c094:	4252      	negs	r2, r2
   1c096:	1b96      	subs	r6, r2, r6
   1c098:	001a      	movs	r2, r3
   1c09a:	40f2      	lsrs	r2, r6
   1c09c:	2f20      	cmp	r7, #32
   1c09e:	d009      	beq.n	1c0b4 <__aeabi_d2f+0xfc>
   1c0a0:	4809      	ldr	r0, [pc, #36]	; (1c0c8 <__aeabi_d2f+0x110>)
   1c0a2:	4684      	mov	ip, r0
   1c0a4:	4464      	add	r4, ip
   1c0a6:	40a3      	lsls	r3, r4
   1c0a8:	432b      	orrs	r3, r5
   1c0aa:	1e5d      	subs	r5, r3, #1
   1c0ac:	41ab      	sbcs	r3, r5
   1c0ae:	2600      	movs	r6, #0
   1c0b0:	4313      	orrs	r3, r2
   1c0b2:	e79d      	b.n	1bff0 <__aeabi_d2f+0x38>
   1c0b4:	2300      	movs	r3, #0
   1c0b6:	e7f7      	b.n	1c0a8 <__aeabi_d2f+0xf0>
   1c0b8:	2300      	movs	r3, #0
   1c0ba:	e7ad      	b.n	1c018 <__aeabi_d2f+0x60>
   1c0bc:	0034      	movs	r4, r6
   1c0be:	e7bf      	b.n	1c040 <__aeabi_d2f+0x88>
   1c0c0:	fffffc80 	.word	0xfffffc80
   1c0c4:	fffffc82 	.word	0xfffffc82
   1c0c8:	fffffca2 	.word	0xfffffca2

0001c0cc <__clzsi2>:
   1c0cc:	211c      	movs	r1, #28
   1c0ce:	2301      	movs	r3, #1
   1c0d0:	041b      	lsls	r3, r3, #16
   1c0d2:	4298      	cmp	r0, r3
   1c0d4:	d301      	bcc.n	1c0da <__clzsi2+0xe>
   1c0d6:	0c00      	lsrs	r0, r0, #16
   1c0d8:	3910      	subs	r1, #16
   1c0da:	0a1b      	lsrs	r3, r3, #8
   1c0dc:	4298      	cmp	r0, r3
   1c0de:	d301      	bcc.n	1c0e4 <__clzsi2+0x18>
   1c0e0:	0a00      	lsrs	r0, r0, #8
   1c0e2:	3908      	subs	r1, #8
   1c0e4:	091b      	lsrs	r3, r3, #4
   1c0e6:	4298      	cmp	r0, r3
   1c0e8:	d301      	bcc.n	1c0ee <__clzsi2+0x22>
   1c0ea:	0900      	lsrs	r0, r0, #4
   1c0ec:	3904      	subs	r1, #4
   1c0ee:	a202      	add	r2, pc, #8	; (adr r2, 1c0f8 <__clzsi2+0x2c>)
   1c0f0:	5c10      	ldrb	r0, [r2, r0]
   1c0f2:	1840      	adds	r0, r0, r1
   1c0f4:	4770      	bx	lr
   1c0f6:	46c0      	nop			; (mov r8, r8)
   1c0f8:	02020304 	.word	0x02020304
   1c0fc:	01010101 	.word	0x01010101
	...

0001c108 <__errno>:
   1c108:	4b01      	ldr	r3, [pc, #4]	; (1c110 <__errno+0x8>)
   1c10a:	6818      	ldr	r0, [r3, #0]
   1c10c:	4770      	bx	lr
   1c10e:	46c0      	nop			; (mov r8, r8)
   1c110:	20000118 	.word	0x20000118

0001c114 <__libc_init_array>:
   1c114:	b570      	push	{r4, r5, r6, lr}
   1c116:	2600      	movs	r6, #0
   1c118:	4d0c      	ldr	r5, [pc, #48]	; (1c14c <__libc_init_array+0x38>)
   1c11a:	4c0d      	ldr	r4, [pc, #52]	; (1c150 <__libc_init_array+0x3c>)
   1c11c:	1b64      	subs	r4, r4, r5
   1c11e:	10a4      	asrs	r4, r4, #2
   1c120:	42a6      	cmp	r6, r4
   1c122:	d109      	bne.n	1c138 <__libc_init_array+0x24>
   1c124:	2600      	movs	r6, #0
   1c126:	f000 fe05 	bl	1cd34 <_init>
   1c12a:	4d0a      	ldr	r5, [pc, #40]	; (1c154 <__libc_init_array+0x40>)
   1c12c:	4c0a      	ldr	r4, [pc, #40]	; (1c158 <__libc_init_array+0x44>)
   1c12e:	1b64      	subs	r4, r4, r5
   1c130:	10a4      	asrs	r4, r4, #2
   1c132:	42a6      	cmp	r6, r4
   1c134:	d105      	bne.n	1c142 <__libc_init_array+0x2e>
   1c136:	bd70      	pop	{r4, r5, r6, pc}
   1c138:	00b3      	lsls	r3, r6, #2
   1c13a:	58eb      	ldr	r3, [r5, r3]
   1c13c:	4798      	blx	r3
   1c13e:	3601      	adds	r6, #1
   1c140:	e7ee      	b.n	1c120 <__libc_init_array+0xc>
   1c142:	00b3      	lsls	r3, r6, #2
   1c144:	58eb      	ldr	r3, [r5, r3]
   1c146:	4798      	blx	r3
   1c148:	3601      	adds	r6, #1
   1c14a:	e7f2      	b.n	1c132 <__libc_init_array+0x1e>
   1c14c:	0001cd40 	.word	0x0001cd40
   1c150:	0001cd40 	.word	0x0001cd40
   1c154:	0001cd40 	.word	0x0001cd40
   1c158:	0001cd44 	.word	0x0001cd44

0001c15c <memcpy>:
   1c15c:	2300      	movs	r3, #0
   1c15e:	b510      	push	{r4, lr}
   1c160:	429a      	cmp	r2, r3
   1c162:	d100      	bne.n	1c166 <memcpy+0xa>
   1c164:	bd10      	pop	{r4, pc}
   1c166:	5ccc      	ldrb	r4, [r1, r3]
   1c168:	54c4      	strb	r4, [r0, r3]
   1c16a:	3301      	adds	r3, #1
   1c16c:	e7f8      	b.n	1c160 <memcpy+0x4>

0001c16e <memmove>:
   1c16e:	b510      	push	{r4, lr}
   1c170:	4288      	cmp	r0, r1
   1c172:	d902      	bls.n	1c17a <memmove+0xc>
   1c174:	188b      	adds	r3, r1, r2
   1c176:	4298      	cmp	r0, r3
   1c178:	d308      	bcc.n	1c18c <memmove+0x1e>
   1c17a:	2300      	movs	r3, #0
   1c17c:	429a      	cmp	r2, r3
   1c17e:	d007      	beq.n	1c190 <memmove+0x22>
   1c180:	5ccc      	ldrb	r4, [r1, r3]
   1c182:	54c4      	strb	r4, [r0, r3]
   1c184:	3301      	adds	r3, #1
   1c186:	e7f9      	b.n	1c17c <memmove+0xe>
   1c188:	5c8b      	ldrb	r3, [r1, r2]
   1c18a:	5483      	strb	r3, [r0, r2]
   1c18c:	3a01      	subs	r2, #1
   1c18e:	d2fb      	bcs.n	1c188 <memmove+0x1a>
   1c190:	bd10      	pop	{r4, pc}

0001c192 <memset>:
   1c192:	0003      	movs	r3, r0
   1c194:	1882      	adds	r2, r0, r2
   1c196:	4293      	cmp	r3, r2
   1c198:	d100      	bne.n	1c19c <memset+0xa>
   1c19a:	4770      	bx	lr
   1c19c:	7019      	strb	r1, [r3, #0]
   1c19e:	3301      	adds	r3, #1
   1c1a0:	e7f9      	b.n	1c196 <memset+0x4>
	...

0001c1a4 <rand>:
   1c1a4:	4b15      	ldr	r3, [pc, #84]	; (1c1fc <rand+0x58>)
   1c1a6:	b510      	push	{r4, lr}
   1c1a8:	681c      	ldr	r4, [r3, #0]
   1c1aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c1ac:	2b00      	cmp	r3, #0
   1c1ae:	d115      	bne.n	1c1dc <rand+0x38>
   1c1b0:	2018      	movs	r0, #24
   1c1b2:	f000 f833 	bl	1c21c <malloc>
   1c1b6:	4b12      	ldr	r3, [pc, #72]	; (1c200 <rand+0x5c>)
   1c1b8:	63a0      	str	r0, [r4, #56]	; 0x38
   1c1ba:	8003      	strh	r3, [r0, #0]
   1c1bc:	4b11      	ldr	r3, [pc, #68]	; (1c204 <rand+0x60>)
   1c1be:	2201      	movs	r2, #1
   1c1c0:	8043      	strh	r3, [r0, #2]
   1c1c2:	4b11      	ldr	r3, [pc, #68]	; (1c208 <rand+0x64>)
   1c1c4:	8083      	strh	r3, [r0, #4]
   1c1c6:	4b11      	ldr	r3, [pc, #68]	; (1c20c <rand+0x68>)
   1c1c8:	80c3      	strh	r3, [r0, #6]
   1c1ca:	4b11      	ldr	r3, [pc, #68]	; (1c210 <rand+0x6c>)
   1c1cc:	8103      	strh	r3, [r0, #8]
   1c1ce:	2305      	movs	r3, #5
   1c1d0:	8143      	strh	r3, [r0, #10]
   1c1d2:	3306      	adds	r3, #6
   1c1d4:	8183      	strh	r3, [r0, #12]
   1c1d6:	2300      	movs	r3, #0
   1c1d8:	6102      	str	r2, [r0, #16]
   1c1da:	6143      	str	r3, [r0, #20]
   1c1dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1c1de:	4a0d      	ldr	r2, [pc, #52]	; (1c214 <rand+0x70>)
   1c1e0:	6920      	ldr	r0, [r4, #16]
   1c1e2:	6961      	ldr	r1, [r4, #20]
   1c1e4:	4b0c      	ldr	r3, [pc, #48]	; (1c218 <rand+0x74>)
   1c1e6:	f7fd f9b9 	bl	1955c <__aeabi_lmul>
   1c1ea:	2201      	movs	r2, #1
   1c1ec:	2300      	movs	r3, #0
   1c1ee:	1880      	adds	r0, r0, r2
   1c1f0:	4159      	adcs	r1, r3
   1c1f2:	6120      	str	r0, [r4, #16]
   1c1f4:	6161      	str	r1, [r4, #20]
   1c1f6:	0048      	lsls	r0, r1, #1
   1c1f8:	0840      	lsrs	r0, r0, #1
   1c1fa:	bd10      	pop	{r4, pc}
   1c1fc:	20000118 	.word	0x20000118
   1c200:	0000330e 	.word	0x0000330e
   1c204:	ffffabcd 	.word	0xffffabcd
   1c208:	00001234 	.word	0x00001234
   1c20c:	ffffe66d 	.word	0xffffe66d
   1c210:	ffffdeec 	.word	0xffffdeec
   1c214:	4c957f2d 	.word	0x4c957f2d
   1c218:	5851f42d 	.word	0x5851f42d

0001c21c <malloc>:
   1c21c:	b510      	push	{r4, lr}
   1c21e:	4b03      	ldr	r3, [pc, #12]	; (1c22c <malloc+0x10>)
   1c220:	0001      	movs	r1, r0
   1c222:	6818      	ldr	r0, [r3, #0]
   1c224:	f000 f804 	bl	1c230 <_malloc_r>
   1c228:	bd10      	pop	{r4, pc}
   1c22a:	46c0      	nop			; (mov r8, r8)
   1c22c:	20000118 	.word	0x20000118

0001c230 <_malloc_r>:
   1c230:	2303      	movs	r3, #3
   1c232:	b570      	push	{r4, r5, r6, lr}
   1c234:	1ccd      	adds	r5, r1, #3
   1c236:	439d      	bics	r5, r3
   1c238:	3508      	adds	r5, #8
   1c23a:	0006      	movs	r6, r0
   1c23c:	2d0c      	cmp	r5, #12
   1c23e:	d21e      	bcs.n	1c27e <_malloc_r+0x4e>
   1c240:	250c      	movs	r5, #12
   1c242:	42a9      	cmp	r1, r5
   1c244:	d81d      	bhi.n	1c282 <_malloc_r+0x52>
   1c246:	0030      	movs	r0, r6
   1c248:	f000 f862 	bl	1c310 <__malloc_lock>
   1c24c:	4a25      	ldr	r2, [pc, #148]	; (1c2e4 <_malloc_r+0xb4>)
   1c24e:	6814      	ldr	r4, [r2, #0]
   1c250:	0021      	movs	r1, r4
   1c252:	2900      	cmp	r1, #0
   1c254:	d119      	bne.n	1c28a <_malloc_r+0x5a>
   1c256:	4c24      	ldr	r4, [pc, #144]	; (1c2e8 <_malloc_r+0xb8>)
   1c258:	6823      	ldr	r3, [r4, #0]
   1c25a:	2b00      	cmp	r3, #0
   1c25c:	d103      	bne.n	1c266 <_malloc_r+0x36>
   1c25e:	0030      	movs	r0, r6
   1c260:	f000 f844 	bl	1c2ec <_sbrk_r>
   1c264:	6020      	str	r0, [r4, #0]
   1c266:	0029      	movs	r1, r5
   1c268:	0030      	movs	r0, r6
   1c26a:	f000 f83f 	bl	1c2ec <_sbrk_r>
   1c26e:	1c43      	adds	r3, r0, #1
   1c270:	d12c      	bne.n	1c2cc <_malloc_r+0x9c>
   1c272:	230c      	movs	r3, #12
   1c274:	0030      	movs	r0, r6
   1c276:	6033      	str	r3, [r6, #0]
   1c278:	f000 f84b 	bl	1c312 <__malloc_unlock>
   1c27c:	e003      	b.n	1c286 <_malloc_r+0x56>
   1c27e:	2d00      	cmp	r5, #0
   1c280:	dadf      	bge.n	1c242 <_malloc_r+0x12>
   1c282:	230c      	movs	r3, #12
   1c284:	6033      	str	r3, [r6, #0]
   1c286:	2000      	movs	r0, #0
   1c288:	bd70      	pop	{r4, r5, r6, pc}
   1c28a:	680b      	ldr	r3, [r1, #0]
   1c28c:	1b5b      	subs	r3, r3, r5
   1c28e:	d41a      	bmi.n	1c2c6 <_malloc_r+0x96>
   1c290:	2b0b      	cmp	r3, #11
   1c292:	d903      	bls.n	1c29c <_malloc_r+0x6c>
   1c294:	600b      	str	r3, [r1, #0]
   1c296:	18cc      	adds	r4, r1, r3
   1c298:	6025      	str	r5, [r4, #0]
   1c29a:	e003      	b.n	1c2a4 <_malloc_r+0x74>
   1c29c:	428c      	cmp	r4, r1
   1c29e:	d10e      	bne.n	1c2be <_malloc_r+0x8e>
   1c2a0:	6863      	ldr	r3, [r4, #4]
   1c2a2:	6013      	str	r3, [r2, #0]
   1c2a4:	0030      	movs	r0, r6
   1c2a6:	f000 f834 	bl	1c312 <__malloc_unlock>
   1c2aa:	0020      	movs	r0, r4
   1c2ac:	2207      	movs	r2, #7
   1c2ae:	300b      	adds	r0, #11
   1c2b0:	1d23      	adds	r3, r4, #4
   1c2b2:	4390      	bics	r0, r2
   1c2b4:	1ac3      	subs	r3, r0, r3
   1c2b6:	d0e7      	beq.n	1c288 <_malloc_r+0x58>
   1c2b8:	425a      	negs	r2, r3
   1c2ba:	50e2      	str	r2, [r4, r3]
   1c2bc:	e7e4      	b.n	1c288 <_malloc_r+0x58>
   1c2be:	684b      	ldr	r3, [r1, #4]
   1c2c0:	6063      	str	r3, [r4, #4]
   1c2c2:	000c      	movs	r4, r1
   1c2c4:	e7ee      	b.n	1c2a4 <_malloc_r+0x74>
   1c2c6:	000c      	movs	r4, r1
   1c2c8:	6849      	ldr	r1, [r1, #4]
   1c2ca:	e7c2      	b.n	1c252 <_malloc_r+0x22>
   1c2cc:	2303      	movs	r3, #3
   1c2ce:	1cc4      	adds	r4, r0, #3
   1c2d0:	439c      	bics	r4, r3
   1c2d2:	42a0      	cmp	r0, r4
   1c2d4:	d0e0      	beq.n	1c298 <_malloc_r+0x68>
   1c2d6:	1a21      	subs	r1, r4, r0
   1c2d8:	0030      	movs	r0, r6
   1c2da:	f000 f807 	bl	1c2ec <_sbrk_r>
   1c2de:	1c43      	adds	r3, r0, #1
   1c2e0:	d1da      	bne.n	1c298 <_malloc_r+0x68>
   1c2e2:	e7c6      	b.n	1c272 <_malloc_r+0x42>
   1c2e4:	200004b4 	.word	0x200004b4
   1c2e8:	200004b8 	.word	0x200004b8

0001c2ec <_sbrk_r>:
   1c2ec:	2300      	movs	r3, #0
   1c2ee:	b570      	push	{r4, r5, r6, lr}
   1c2f0:	4c06      	ldr	r4, [pc, #24]	; (1c30c <_sbrk_r+0x20>)
   1c2f2:	0005      	movs	r5, r0
   1c2f4:	0008      	movs	r0, r1
   1c2f6:	6023      	str	r3, [r4, #0]
   1c2f8:	f7ed f8fc 	bl	94f4 <_sbrk>
   1c2fc:	1c43      	adds	r3, r0, #1
   1c2fe:	d103      	bne.n	1c308 <_sbrk_r+0x1c>
   1c300:	6823      	ldr	r3, [r4, #0]
   1c302:	2b00      	cmp	r3, #0
   1c304:	d000      	beq.n	1c308 <_sbrk_r+0x1c>
   1c306:	602b      	str	r3, [r5, #0]
   1c308:	bd70      	pop	{r4, r5, r6, pc}
   1c30a:	46c0      	nop			; (mov r8, r8)
   1c30c:	20001b3c 	.word	0x20001b3c

0001c310 <__malloc_lock>:
   1c310:	4770      	bx	lr

0001c312 <__malloc_unlock>:
   1c312:	4770      	bx	lr
   1c314:	00000002 	.word	0x00000002
   1c318:	00000003 	.word	0x00000003
   1c31c:	00000028 	.word	0x00000028
   1c320:	00000029 	.word	0x00000029
   1c324:	00000004 	.word	0x00000004
   1c328:	00000005 	.word	0x00000005
   1c32c:	00000006 	.word	0x00000006
   1c330:	00000007 	.word	0x00000007
   1c334:	0000ffff 	.word	0x0000ffff
   1c338:	0000ffff 	.word	0x0000ffff
   1c33c:	00000022 	.word	0x00000022
   1c340:	00000023 	.word	0x00000023
   1c344:	0000ffff 	.word	0x0000ffff
   1c348:	0000ffff 	.word	0x0000ffff
   1c34c:	0000ffff 	.word	0x0000ffff
   1c350:	0000ffff 	.word	0x0000ffff
   1c354:	00000008 	.word	0x00000008
   1c358:	00000009 	.word	0x00000009
   1c35c:	0000000a 	.word	0x0000000a
   1c360:	0000000b 	.word	0x0000000b
   1c364:	000024da 	.word	0x000024da
   1c368:	000024e0 	.word	0x000024e0
   1c36c:	000024e0 	.word	0x000024e0
   1c370:	000024e0 	.word	0x000024e0
   1c374:	000024e0 	.word	0x000024e0
   1c378:	000024e0 	.word	0x000024e0
   1c37c:	000024e0 	.word	0x000024e0
   1c380:	000024e0 	.word	0x000024e0
   1c384:	000024e0 	.word	0x000024e0
   1c388:	000024e0 	.word	0x000024e0
   1c38c:	000024e0 	.word	0x000024e0
   1c390:	000024e0 	.word	0x000024e0
   1c394:	000024e0 	.word	0x000024e0
   1c398:	000024e0 	.word	0x000024e0
   1c39c:	000024e0 	.word	0x000024e0
   1c3a0:	000024e0 	.word	0x000024e0
   1c3a4:	000024b8 	.word	0x000024b8
   1c3a8:	000024e0 	.word	0x000024e0
   1c3ac:	000024e0 	.word	0x000024e0
   1c3b0:	000024e0 	.word	0x000024e0
   1c3b4:	000024e0 	.word	0x000024e0
   1c3b8:	000024e0 	.word	0x000024e0
   1c3bc:	000024e0 	.word	0x000024e0
   1c3c0:	000024e0 	.word	0x000024e0
   1c3c4:	000024e0 	.word	0x000024e0
   1c3c8:	000024e0 	.word	0x000024e0
   1c3cc:	000024e0 	.word	0x000024e0
   1c3d0:	000024e0 	.word	0x000024e0
   1c3d4:	000024e0 	.word	0x000024e0
   1c3d8:	000024e0 	.word	0x000024e0
   1c3dc:	000024e0 	.word	0x000024e0
   1c3e0:	000024e0 	.word	0x000024e0
   1c3e4:	000024d4 	.word	0x000024d4
   1c3e8:	000024e0 	.word	0x000024e0
   1c3ec:	000024e0 	.word	0x000024e0
   1c3f0:	000024e0 	.word	0x000024e0
   1c3f4:	000024e0 	.word	0x000024e0
   1c3f8:	000024e0 	.word	0x000024e0
   1c3fc:	000024e0 	.word	0x000024e0
   1c400:	000024e0 	.word	0x000024e0
   1c404:	000024e0 	.word	0x000024e0
   1c408:	000024e0 	.word	0x000024e0
   1c40c:	000024e0 	.word	0x000024e0
   1c410:	000024e0 	.word	0x000024e0
   1c414:	000024e0 	.word	0x000024e0
   1c418:	000024e0 	.word	0x000024e0
   1c41c:	000024e0 	.word	0x000024e0
   1c420:	000024e0 	.word	0x000024e0
   1c424:	000024ce 	.word	0x000024ce
   1c428:	00002476 	.word	0x00002476
   1c42c:	0000248c 	.word	0x0000248c
   1c430:	000024a2 	.word	0x000024a2
   1c434:	0000245c 	.word	0x0000245c
   1c438:	00002c64 	.word	0x00002c64
   1c43c:	00002c64 	.word	0x00002c64
   1c440:	00002c58 	.word	0x00002c58
   1c444:	00002c64 	.word	0x00002c64
   1c448:	00002c58 	.word	0x00002c58
   1c44c:	00002c32 	.word	0x00002c32
   1c450:	00002c32 	.word	0x00002c32
   1c454:	00002c64 	.word	0x00002c64
   1c458:	00002c64 	.word	0x00002c64
   1c45c:	00002c64 	.word	0x00002c64
   1c460:	00002c64 	.word	0x00002c64
   1c464:	00002c64 	.word	0x00002c64
   1c468:	00002c64 	.word	0x00002c64
   1c46c:	00002c64 	.word	0x00002c64
   1c470:	00002c64 	.word	0x00002c64
   1c474:	00002c64 	.word	0x00002c64
   1c478:	00002c64 	.word	0x00002c64
   1c47c:	00002c64 	.word	0x00002c64
   1c480:	00002c64 	.word	0x00002c64
   1c484:	00002c64 	.word	0x00002c64
   1c488:	00002c64 	.word	0x00002c64
   1c48c:	00002c64 	.word	0x00002c64
   1c490:	00002c64 	.word	0x00002c64
   1c494:	00002c64 	.word	0x00002c64
   1c498:	00002c64 	.word	0x00002c64
   1c49c:	00002c64 	.word	0x00002c64
   1c4a0:	00002c64 	.word	0x00002c64
   1c4a4:	00002c64 	.word	0x00002c64
   1c4a8:	00002c64 	.word	0x00002c64
   1c4ac:	00002c64 	.word	0x00002c64
   1c4b0:	00002c64 	.word	0x00002c64
   1c4b4:	00002c64 	.word	0x00002c64
   1c4b8:	00002c64 	.word	0x00002c64
   1c4bc:	00002c64 	.word	0x00002c64
   1c4c0:	00002c64 	.word	0x00002c64
   1c4c4:	00002c64 	.word	0x00002c64
   1c4c8:	00002c64 	.word	0x00002c64
   1c4cc:	00002c64 	.word	0x00002c64
   1c4d0:	00002c64 	.word	0x00002c64
   1c4d4:	00002c64 	.word	0x00002c64
   1c4d8:	00002c64 	.word	0x00002c64
   1c4dc:	00002c64 	.word	0x00002c64
   1c4e0:	00002c64 	.word	0x00002c64
   1c4e4:	00002c64 	.word	0x00002c64
   1c4e8:	00002c64 	.word	0x00002c64
   1c4ec:	00002c64 	.word	0x00002c64
   1c4f0:	00002c64 	.word	0x00002c64
   1c4f4:	00002c64 	.word	0x00002c64
   1c4f8:	00002c64 	.word	0x00002c64
   1c4fc:	00002c64 	.word	0x00002c64
   1c500:	00002c64 	.word	0x00002c64
   1c504:	00002c64 	.word	0x00002c64
   1c508:	00002c64 	.word	0x00002c64
   1c50c:	00002c64 	.word	0x00002c64
   1c510:	00002c64 	.word	0x00002c64
   1c514:	00002c64 	.word	0x00002c64
   1c518:	00002c64 	.word	0x00002c64
   1c51c:	00002c64 	.word	0x00002c64
   1c520:	00002c64 	.word	0x00002c64
   1c524:	00002c64 	.word	0x00002c64
   1c528:	00002c64 	.word	0x00002c64
   1c52c:	00002c64 	.word	0x00002c64
   1c530:	00002c64 	.word	0x00002c64
   1c534:	00002c64 	.word	0x00002c64
   1c538:	00002c58 	.word	0x00002c58
   1c53c:	00002c58 	.word	0x00002c58
   1c540:	00002c6e 	.word	0x00002c6e
   1c544:	00002c6e 	.word	0x00002c6e
   1c548:	00002c6e 	.word	0x00002c6e
   1c54c:	00002c6e 	.word	0x00002c6e

0001c550 <_tcc_intflag>:
   1c550:	00000001 00000002 00000004 00000008     ................
   1c560:	00001000 00002000 00004000 00008000     ..... ...@......
   1c570:	00010000 00020000 00040000 00080000     ................

0001c580 <tcc_modules>:
   1c580:	42002000 42002400 42002800              . .B.$.B.(.B

0001c58c <_tcc_gclk_ids>:
   1c58c:	001b1a1a                                ....

0001c590 <_tcc_apbcmasks>:
   1c590:	00000100 00000200 00000400              ............

0001c59c <_tcc_maxs>:
   1c59c:	00ffffff 00ffffff 0000ffff              ............

0001c5a8 <_tcc_cc_nums>:
   1c5a8:	00020204                                ....

0001c5ac <_tcc_ow_nums>:
   1c5ac:	00020408 42002c00 42003000 42003400     .....,.B.0.B.4.B
   1c5bc:	001c1c1b 10000800 00002000 42000800     ......... .....B
   1c5cc:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   1c5dc:	42001c00 0c0b0a09 00000e0d 00007e76     ...B........v~..
   1c5ec:	00007eee 00007eee 00007e94 00007e8e     .~...~...~...~..
   1c5fc:	00007e9a 00007e7c 00007ea0 00007ed4     .~..|~...~...~..
   1c60c:	00008094 000080e4 000080e4 000080e0     ................
   1c61c:	00008086 000080a6 00008076 000080b8     ........v.......
   1c62c:	000080ca 41744545 50524f4d 456d752e     ....EEtAMORP.umE
   1c63c:	0000a930 0000a954 0000a90c 0000a966     0...T.......f...
   1c64c:	0000a91e 0000a942 0000ab58 0000ab68     ....B...X...h...
   1c65c:	0000aba0 0000abd8 0000abfe 0000ac28     ............(...
   1c66c:	0000ac60 0000ac98 0000ad10 0000ad22     `..........."...
   1c67c:	0000ad62 0000ada2 0000ade2 0000ae0e     b...............
   1c68c:	0000ae5a 0000af2c 0000af6c 0000b02c     Z...,...l...,...
   1c69c:	0000b058 0000b134 0000b2a4 0000b4f4     X...4...........
   1c6ac:	0000b744 0000b932 0000ba3a 0000bc18     D...2...:.......
   1c6bc:	0000bd9e 0000bf84 0000c2be 0000c318     ................
   1c6cc:	0000c85a 0000c926 0000ca40 0000cae4     Z...&...@.......
   1c6dc:	0000cbde 0000ced6 0000d098 0000c3ec     ................
   1c6ec:	0000c490 0000c534 0000c638 0000c6dc     ....4...8.......
   1c6fc:	0000c780 0000d40a 0000d51a 0000d528     ............(...
   1c70c:	0000d728 0000d8ae 0000da14              (...........

0001c718 <crc16_tab>:
   1c718:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1c728:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1c738:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1c748:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1c758:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1c768:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1c778:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1c788:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1c798:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1c7a8:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1c7b8:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1c7c8:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1c7d8:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1c7e8:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1c7f8:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1c808:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1c818:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1c828:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1c838:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1c848:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1c858:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1c868:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1c878:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1c888:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1c898:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1c8a8:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1c8b8:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1c8c8:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1c8d8:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1c8e8:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1c8f8:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1c908:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
   1c918:	00012f7c 00012faa 00012fd8 00013006     |/.../.../...0..
   1c928:	00013032 07020100 0a090701 00000001     20..............
   1c938:	000000ff 00000303 00000002 00ff00ff     ................
   1c948:	0000ff00 00000003 00000000 3f400000     ..............@?
   1c958:	00000000 3f000000 3f000000 00000000     .......?...?....
   1c968:	3f000000 3f000000 3f000000 00000000     ...?...?...?....
   1c978:	3e800000 3f000000 3f000000 3f000000     ...>...?...?...?
   1c988:	3f000000 3f000000 3f000000 3f000000     ...?...?...?...?
   1c998:	422b5441 34445541 00000000 00002580     AT+BAUD4.....%..
   1c9a8:	00004b00 00009600 0000e100 0001c200     .K..............
   1c9b8:	4e2b5441 54454d41 61546c65 00006c69     AT+NAMETelTail..
   1c9c8:	502b5441 3345574f 00000000 522b5441     AT+POWE3....AT+R
   1c9d8:	54455345 00000000 00000030 00014ffa     ESET....0....O..
   1c9e8:	00014f68 00014f68 00014f78 00014faa     hO..hO..xO...O..
   1c9f8:	00014fbc 00014fce 00014fe4 00015b62     .O...O...O..b[..
   1ca08:	00015bbe 00015bae 00016c2e 00016c2e     .[...[...l...l..
   1ca18:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1ca28:	00015b8a 00015b94 00015aae 00015aa0     .[...[...Z...Z..
   1ca38:	00016c2e 00016c2e 00016c2e 000164a4     .l...l...l...d..
   1ca48:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1ca58:	00016c2e 00016c2e 00016c2e 000166f0     .l...l...l...f..
   1ca68:	00016784 00016808 0001689c 00015bd6     .g...h...h...[..
   1ca78:	000169bc 00016a50 00016920 00016b34     .i..Pj.. i..4k..
   1ca88:	00016406 00015f7a 00015fa4 00015fd6     .d..z_..._..._..
   1ca98:	00016bb0 00016c2e 00016c2e 00016c2e     .k...l...l...l..
   1caa8:	00016c2e 00016c2e 00016c2e 00015a90     .l...l...l...Z..
   1cab8:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1cac8:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1cad8:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1cae8:	00016c2e 00016c2e 00016c2e 00015a80     .l...l...l...Z..
   1caf8:	00016c2e 00016c2e 00016c2e 00015afe     .l...l...l...Z..
   1cb08:	00015ad6 00015abe 00016c2e 00016c2e     .Z...Z...l...l..
   1cb18:	00015ec8 00015d9a 00015be8 00015d00     .^...]...[...]..
   1cb28:	00016156 00015c66 000160a0 000162a4     Va..f\...`...b..
   1cb38:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1cb48:	00016c2e 00016c2e 00016c2e 00016c2e     .l...l...l...l..
   1cb58:	00016c2e 00016c2e 00015b82 00015b72     .l...l...[..r[..
   1cb68:	00015b52 00015b42 00015b32 00015f62     R[..B[..2[..b_..
   1cb78:	00015b22 00015b9e 00017958 00017a26     "[...[..Xy..&z..
   1cb88:	00017bac 00017d10 00017e80 00019acc     .{...}...~......
   1cb98:	00019a9c 00019aae 000199f0 00019aae     ................
   1cba8:	00019a92 00019aae 000199f0 00019a9c     ................
   1cbb8:	00019a9c 00019a92 000199f0 000199f8     ................
   1cbc8:	000199f8 000199f8 00019ab4 00019a9c     ................
   1cbd8:	00019a9c 00019a70 00019b54 00019a70     ....p...T...p...
   1cbe8:	00019a92 00019a70 00019b54 00019a9c     ....p...T.......
   1cbf8:	00019a9c 00019a92 00019b54 000199f8     ........T.......
   1cc08:	000199f8 000199f8 00019b5e 00019e4c     ........^...L...
   1cc18:	00019d9c 00019d9c 00019d9a 00019e3e     ............>...
   1cc28:	00019e3e 00019e34 00019d9a 00019e3e     >...4.......>...
   1cc38:	00019e34 00019e3e 00019d9a 00019e44     4...>.......D...
   1cc48:	00019e44 00019e44 00019ed4 0001ac1c     D...D...........
   1cc58:	0001abfe 0001abb8 0001aad6 0001abb8     ................
   1cc68:	0001abf0 0001abb8 0001aad6 0001abfe     ................
   1cc78:	0001abfe 0001abf0 0001aad6 0001aace     ................
   1cc88:	0001aace 0001aace 0001ae34 0001b47c     ........4...|...
   1cc98:	0001b33c 0001b33c 0001b338 0001b454     <...<...8...T...
   1cca8:	0001b454 0001b446 0001b338 0001b454     T...F...8...T...
   1ccb8:	0001b446 0001b454 0001b338 0001b45c     F...T...8...\...
   1ccc8:	0001b45c 0001b45c 0001b660              \...\...`...

0001ccd4 <__sf_fake_stderr>:
	...

0001ccf4 <__sf_fake_stdin>:
	...

0001cd14 <__sf_fake_stdout>:
	...

0001cd34 <_init>:
   1cd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd36:	46c0      	nop			; (mov r8, r8)
   1cd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1cd3a:	bc08      	pop	{r3}
   1cd3c:	469e      	mov	lr, r3
   1cd3e:	4770      	bx	lr

0001cd40 <__init_array_start>:
   1cd40:	000020dd 	.word	0x000020dd

0001cd44 <_fini>:
   1cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd46:	46c0      	nop			; (mov r8, r8)
   1cd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1cd4a:	bc08      	pop	{r3}
   1cd4c:	469e      	mov	lr, r3
   1cd4e:	4770      	bx	lr

0001cd50 <__fini_array_start>:
   1cd50:	000020b5 	.word	0x000020b5

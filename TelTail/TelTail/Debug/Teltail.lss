
Teltail.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00015a98  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000014c  20000000  00017a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f1c  20000150  00017bf0  00020150  2**4
                  ALLOC
  3 .stack        00002004  2000106c  00018b0c  00020150  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  6 .debug_info   00053226  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fd1  00000000  00000000  000733f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006313  00000000  00000000  000783c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010e0  00000000  00000000  0007e6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f80  00000000  00000000  0007f7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009c15  00000000  00000000  00080737  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014b23  00000000  00000000  0008a34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009132b  00000000  00000000  0009ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004298  00000000  00000000  0013019c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	70 30 00 20 2d 8a 00 00 25 8b 00 00 25 8b 00 00     p0. -...%...%...
	...
    202c:	25 8b 00 00 00 00 00 00 00 00 00 00 25 8b 00 00     %...........%...
    203c:	25 8b 00 00 25 8b 00 00 25 8b 00 00 25 8b 00 00     %...%...%...%...
    204c:	25 8b 00 00 25 8b 00 00 25 8b 00 00 0d 29 00 00     %...%...%....)..
    205c:	25 8b 00 00 25 8b 00 00 4d 71 00 00 65 71 00 00     %...%...Mq..eq..
    206c:	7d 71 00 00 95 71 00 00 ad 71 00 00 c5 71 00 00     }q...q...q...q..
    207c:	5d 30 00 00 71 30 00 00 85 30 00 00 15 31 00 00     ]0..q0...0...1..
    208c:	29 31 00 00 3d 31 00 00 00 00 00 00 00 00 00 00     )1..=1..........
    209c:	25 8b 00 00 25 8b 00 00 25 8b 00 00 25 8b 00 00     %...%...%...%...
    20ac:	25 8b 00 00 00 00 00 00                             %.......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000150 	.word	0x20000150
    20d4:	00000000 	.word	0x00000000
    20d8:	00017a98 	.word	0x00017a98

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000154 	.word	0x20000154
    2108:	00017a98 	.word	0x00017a98
    210c:	00017a98 	.word	0x00017a98
    2110:	00000000 	.word	0x00000000

00002114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46bd      	mov	sp, r7
    2126:	b002      	add	sp, #8
    2128:	bd80      	pop	{r7, pc}
	...

0000212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    212c:	b580      	push	{r7, lr}
    212e:	b082      	sub	sp, #8
    2130:	af00      	add	r7, sp, #0
    2132:	0002      	movs	r2, r0
    2134:	6039      	str	r1, [r7, #0]
    2136:	1dfb      	adds	r3, r7, #7
    2138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    213a:	1dfb      	adds	r3, r7, #7
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b01      	cmp	r3, #1
    2140:	d00a      	beq.n	2158 <system_apb_clock_set_mask+0x2c>
    2142:	2b02      	cmp	r3, #2
    2144:	d00f      	beq.n	2166 <system_apb_clock_set_mask+0x3a>
    2146:	2b00      	cmp	r3, #0
    2148:	d114      	bne.n	2174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <system_apb_clock_set_mask+0x58>)
    214c:	4a0d      	ldr	r2, [pc, #52]	; (2184 <system_apb_clock_set_mask+0x58>)
    214e:	6991      	ldr	r1, [r2, #24]
    2150:	683a      	ldr	r2, [r7, #0]
    2152:	430a      	orrs	r2, r1
    2154:	619a      	str	r2, [r3, #24]
			break;
    2156:	e00f      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2158:	4b0a      	ldr	r3, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215a:	4a0a      	ldr	r2, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215c:	69d1      	ldr	r1, [r2, #28]
    215e:	683a      	ldr	r2, [r7, #0]
    2160:	430a      	orrs	r2, r1
    2162:	61da      	str	r2, [r3, #28]
			break;
    2164:	e008      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2166:	4b07      	ldr	r3, [pc, #28]	; (2184 <system_apb_clock_set_mask+0x58>)
    2168:	4a06      	ldr	r2, [pc, #24]	; (2184 <system_apb_clock_set_mask+0x58>)
    216a:	6a11      	ldr	r1, [r2, #32]
    216c:	683a      	ldr	r2, [r7, #0]
    216e:	430a      	orrs	r2, r1
    2170:	621a      	str	r2, [r3, #32]
			break;
    2172:	e001      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2174:	2317      	movs	r3, #23
    2176:	e000      	b.n	217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2178:	2300      	movs	r3, #0
}
    217a:	0018      	movs	r0, r3
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	40000400 	.word	0x40000400

00002188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2201      	movs	r2, #1
    21a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2200      	movs	r2, #0
    21a6:	70da      	strb	r2, [r3, #3]
}
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	0002      	movs	r2, r0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    21bc:	1dfb      	adds	r3, r7, #7
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d002      	beq.n	21ca <system_voltage_reference_enable+0x1a>
    21c4:	2b01      	cmp	r3, #1
    21c6:	d007      	beq.n	21d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    21c8:	e00d      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <system_voltage_reference_enable+0x3c>)
    21cc:	4a07      	ldr	r2, [pc, #28]	; (21ec <system_voltage_reference_enable+0x3c>)
    21ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21d0:	2102      	movs	r1, #2
    21d2:	430a      	orrs	r2, r1
    21d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21d6:	e006      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21de:	2104      	movs	r1, #4
    21e0:	430a      	orrs	r2, r1
    21e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21e4:	46c0      	nop			; (mov r8, r8)
	}
}
    21e6:	46bd      	mov	sp, r7
    21e8:	b002      	add	sp, #8
    21ea:	bd80      	pop	{r7, pc}
    21ec:	40000800 	.word	0x40000800

000021f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	7e5b      	ldrb	r3, [r3, #25]
    2202:	b2db      	uxtb	r3, r3
    2204:	b25b      	sxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	da01      	bge.n	220e <adc_is_syncing+0x1e>
		return true;
    220a:	2301      	movs	r3, #1
    220c:	e000      	b.n	2210 <adc_is_syncing+0x20>
	}

	return false;
    220e:	2300      	movs	r3, #0
}
    2210:	0018      	movs	r0, r3
    2212:	46bd      	mov	sp, r7
    2214:	b004      	add	sp, #16
    2216:	bd80      	pop	{r7, pc}

00002218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2200      	movs	r2, #0
    222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	2200      	movs	r2, #0
    223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2200      	movs	r2, #0
    2242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2200      	movs	r2, #0
    2248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2200      	movs	r2, #0
    224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2200      	movs	r2, #0
    2254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	0152      	lsls	r2, r2, #5
    225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2200      	movs	r2, #0
    2262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	2200      	movs	r2, #0
    2268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	2200      	movs	r2, #0
    226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	2200      	movs	r2, #0
    2274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2200      	movs	r2, #0
    227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	222a      	movs	r2, #42	; 0x2a
    2280:	2100      	movs	r1, #0
    2282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	2200      	movs	r2, #0
    2288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2200      	movs	r2, #0
    228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2224      	movs	r2, #36	; 0x24
    2294:	2100      	movs	r1, #0
    2296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	2200      	movs	r2, #0
    229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2200      	movs	r2, #0
    22a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	2200      	movs	r2, #0
    22a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	222b      	movs	r2, #43	; 0x2b
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	222c      	movs	r2, #44	; 0x2c
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	46bd      	mov	sp, r7
    22be:	b002      	add	sp, #8
    22c0:	bd80      	pop	{r7, pc}
	...

000022c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b098      	sub	sp, #96	; 0x60
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    22cc:	230c      	movs	r3, #12
    22ce:	18fa      	adds	r2, r7, r3
    22d0:	4b15      	ldr	r3, [pc, #84]	; (2328 <_adc_configure_ain_pin+0x64>)
    22d2:	0010      	movs	r0, r2
    22d4:	0019      	movs	r1, r3
    22d6:	2350      	movs	r3, #80	; 0x50
    22d8:	001a      	movs	r2, r3
    22da:	4b14      	ldr	r3, [pc, #80]	; (232c <_adc_configure_ain_pin+0x68>)
    22dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <_adc_configure_ain_pin+0x6c>)
    22e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2b13      	cmp	r3, #19
    22e6:	d81a      	bhi.n	231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    22e8:	230c      	movs	r3, #12
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	687a      	ldr	r2, [r7, #4]
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	58d3      	ldr	r3, [r2, r3]
    22f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    22f4:	2308      	movs	r3, #8
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	0018      	movs	r0, r3
    22fa:	4b0e      	ldr	r3, [pc, #56]	; (2334 <_adc_configure_ain_pin+0x70>)
    22fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    22fe:	2308      	movs	r3, #8
    2300:	18fb      	adds	r3, r7, r3
    2302:	2200      	movs	r2, #0
    2304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2306:	2308      	movs	r3, #8
    2308:	18fb      	adds	r3, r7, r3
    230a:	2201      	movs	r2, #1
    230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2310:	b2db      	uxtb	r3, r3
    2312:	2208      	movs	r2, #8
    2314:	18ba      	adds	r2, r7, r2
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b07      	ldr	r3, [pc, #28]	; (2338 <_adc_configure_ain_pin+0x74>)
    231c:	4798      	blx	r3
	}
}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46bd      	mov	sp, r7
    2322:	b018      	add	sp, #96	; 0x60
    2324:	bd80      	pop	{r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	00017100 	.word	0x00017100
    232c:	000170dd 	.word	0x000170dd
    2330:	0000ffff 	.word	0x0000ffff
    2334:	00002189 	.word	0x00002189
    2338:	00007f11 	.word	0x00007f11

0000233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b089      	sub	sp, #36	; 0x24
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2346:	231f      	movs	r3, #31
    2348:	18fb      	adds	r3, r7, r3
    234a:	2200      	movs	r2, #0
    234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    234e:	2310      	movs	r3, #16
    2350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2352:	2317      	movs	r3, #23
    2354:	18fb      	adds	r3, r7, r3
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2360:	230c      	movs	r3, #12
    2362:	18fb      	adds	r3, r7, r3
    2364:	0018      	movs	r0, r3
    2366:	4bce      	ldr	r3, [pc, #824]	; (26a0 <_adc_set_config+0x364>)
    2368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	781a      	ldrb	r2, [r3, #0]
    236e:	230c      	movs	r3, #12
    2370:	18fb      	adds	r3, r7, r3
    2372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2374:	230c      	movs	r3, #12
    2376:	18fb      	adds	r3, r7, r3
    2378:	0019      	movs	r1, r3
    237a:	201e      	movs	r0, #30
    237c:	4bc9      	ldr	r3, [pc, #804]	; (26a4 <_adc_set_config+0x368>)
    237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2380:	201e      	movs	r0, #30
    2382:	4bc9      	ldr	r3, [pc, #804]	; (26a8 <_adc_set_config+0x36c>)
    2384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2386:	683b      	ldr	r3, [r7, #0]
    2388:	222c      	movs	r2, #44	; 0x2c
    238a:	5c9b      	ldrb	r3, [r3, r2]
    238c:	2b00      	cmp	r3, #0
    238e:	d040      	beq.n	2412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2390:	2316      	movs	r3, #22
    2392:	18fb      	adds	r3, r7, r3
    2394:	683a      	ldr	r2, [r7, #0]
    2396:	212b      	movs	r1, #43	; 0x2b
    2398:	5c52      	ldrb	r2, [r2, r1]
    239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    23a0:	2315      	movs	r3, #21
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	2216      	movs	r2, #22
    23a6:	18ba      	adds	r2, r7, r2
    23a8:	7812      	ldrb	r2, [r2, #0]
    23aa:	188a      	adds	r2, r1, r2
    23ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	222c      	movs	r2, #44	; 0x2c
    23b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2215      	movs	r2, #21
    23ba:	18ba      	adds	r2, r7, r2
    23bc:	7812      	ldrb	r2, [r2, #0]
    23be:	188a      	adds	r2, r1, r2
    23c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    23c2:	e018      	b.n	23f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    23c4:	2316      	movs	r3, #22
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	220f      	movs	r2, #15
    23cc:	4013      	ands	r3, r2
    23ce:	683a      	ldr	r2, [r7, #0]
    23d0:	7b12      	ldrb	r2, [r2, #12]
    23d2:	189b      	adds	r3, r3, r2
    23d4:	0018      	movs	r0, r3
    23d6:	4bb5      	ldr	r3, [pc, #724]	; (26ac <_adc_set_config+0x370>)
    23d8:	4798      	blx	r3
			start_pin++;
    23da:	2315      	movs	r3, #21
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	2315      	movs	r3, #21
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	3201      	adds	r2, #1
    23e6:	701a      	strb	r2, [r3, #0]
			offset++;
    23e8:	2316      	movs	r3, #22
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781a      	ldrb	r2, [r3, #0]
    23ee:	2316      	movs	r3, #22
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	3201      	adds	r2, #1
    23f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    23f6:	2315      	movs	r3, #21
    23f8:	18fa      	adds	r2, r7, r3
    23fa:	230f      	movs	r3, #15
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	7812      	ldrb	r2, [r2, #0]
    2400:	781b      	ldrb	r3, [r3, #0]
    2402:	429a      	cmp	r2, r3
    2404:	d3de      	bcc.n	23c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2406:	683b      	ldr	r3, [r7, #0]
    2408:	89db      	ldrh	r3, [r3, #14]
    240a:	0018      	movs	r0, r3
    240c:	4ba7      	ldr	r3, [pc, #668]	; (26ac <_adc_set_config+0x370>)
    240e:	4798      	blx	r3
    2410:	e009      	b.n	2426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	7b1b      	ldrb	r3, [r3, #12]
    2416:	0018      	movs	r0, r3
    2418:	4ba4      	ldr	r3, [pc, #656]	; (26ac <_adc_set_config+0x370>)
    241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	89db      	ldrh	r3, [r3, #14]
    2420:	0018      	movs	r0, r3
    2422:	4ba2      	ldr	r3, [pc, #648]	; (26ac <_adc_set_config+0x370>)
    2424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	7d5b      	ldrb	r3, [r3, #21]
    242a:	009b      	lsls	r3, r3, #2
    242c:	b2da      	uxtb	r2, r3
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	7d9b      	ldrb	r3, [r3, #22]
    2436:	01db      	lsls	r3, r3, #7
    2438:	b25a      	sxtb	r2, r3
			(config->reference);
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	785b      	ldrb	r3, [r3, #1]
    243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2440:	4313      	orrs	r3, r2
    2442:	b25b      	sxtb	r3, r3
    2444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	791b      	ldrb	r3, [r3, #4]
    244e:	2b34      	cmp	r3, #52	; 0x34
    2450:	d846      	bhi.n	24e0 <_adc_set_config+0x1a4>
    2452:	009a      	lsls	r2, r3, #2
    2454:	4b96      	ldr	r3, [pc, #600]	; (26b0 <_adc_set_config+0x374>)
    2456:	18d3      	adds	r3, r2, r3
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    245c:	231f      	movs	r3, #31
    245e:	18fb      	adds	r3, r7, r3
    2460:	683a      	ldr	r2, [r7, #0]
    2462:	7c52      	ldrb	r2, [r2, #17]
    2464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2466:	2317      	movs	r3, #23
    2468:	18fb      	adds	r3, r7, r3
    246a:	683a      	ldr	r2, [r7, #0]
    246c:	7c12      	ldrb	r2, [r2, #16]
    246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2470:	2310      	movs	r3, #16
    2472:	61bb      	str	r3, [r7, #24]
		break;
    2474:	e036      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2476:	231f      	movs	r3, #31
    2478:	18fb      	adds	r3, r7, r3
    247a:	2201      	movs	r2, #1
    247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	2202      	movs	r2, #2
    2484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2486:	2310      	movs	r3, #16
    2488:	61bb      	str	r3, [r7, #24]
		break;
    248a:	e02b      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    248c:	231f      	movs	r3, #31
    248e:	18fb      	adds	r3, r7, r3
    2490:	2202      	movs	r2, #2
    2492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2494:	2317      	movs	r3, #23
    2496:	18fb      	adds	r3, r7, r3
    2498:	2204      	movs	r2, #4
    249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    249c:	2310      	movs	r3, #16
    249e:	61bb      	str	r3, [r7, #24]
		break;
    24a0:	e020      	b.n	24e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    24a2:	231f      	movs	r3, #31
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    24aa:	2317      	movs	r3, #23
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	2206      	movs	r2, #6
    24b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24b2:	2310      	movs	r3, #16
    24b4:	61bb      	str	r3, [r7, #24]
		break;
    24b6:	e015      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    24b8:	231f      	movs	r3, #31
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2200      	movs	r2, #0
    24be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    24c0:	2317      	movs	r3, #23
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2208      	movs	r2, #8
    24c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24c8:	2310      	movs	r3, #16
    24ca:	61bb      	str	r3, [r7, #24]
		break;
    24cc:	e00a      	b.n	24e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    24ce:	2330      	movs	r3, #48	; 0x30
    24d0:	61bb      	str	r3, [r7, #24]
		break;
    24d2:	e007      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    24d4:	2320      	movs	r3, #32
    24d6:	61bb      	str	r3, [r7, #24]
		break;
    24d8:	e004      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    24da:	2300      	movs	r3, #0
    24dc:	61bb      	str	r3, [r7, #24]
		break;
    24de:	e001      	b.n	24e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    24e0:	2317      	movs	r3, #23
    24e2:	e1ae      	b.n	2842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    24e4:	231f      	movs	r3, #31
    24e6:	18fb      	adds	r3, r7, r3
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2270      	movs	r2, #112	; 0x70
    24f0:	4013      	ands	r3, r2
    24f2:	b2da      	uxtb	r2, r3
    24f4:	2317      	movs	r3, #23
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	4313      	orrs	r3, r2
    24fc:	b2da      	uxtb	r2, r3
    24fe:	693b      	ldr	r3, [r7, #16]
    2500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	7ddb      	ldrb	r3, [r3, #23]
    2506:	2b3f      	cmp	r3, #63	; 0x3f
    2508:	d901      	bls.n	250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    250a:	2317      	movs	r3, #23
    250c:	e199      	b.n	2842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    250e:	683b      	ldr	r3, [r7, #0]
    2510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2512:	693b      	ldr	r3, [r7, #16]
    2514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	0018      	movs	r0, r3
    251c:	4b65      	ldr	r3, [pc, #404]	; (26b4 <_adc_set_config+0x378>)
    251e:	4798      	blx	r3
    2520:	1e03      	subs	r3, r0, #0
    2522:	d1f9      	bne.n	2518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	885a      	ldrh	r2, [r3, #2]
    2528:	69bb      	ldr	r3, [r7, #24]
    252a:	b29b      	uxth	r3, r3
    252c:	4313      	orrs	r3, r2
    252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	2124      	movs	r1, #36	; 0x24
    2534:	5c5b      	ldrb	r3, [r3, r1]
    2536:	b29b      	uxth	r3, r3
    2538:	00db      	lsls	r3, r3, #3
    253a:	b29b      	uxth	r3, r3
			resolution |
    253c:	4313      	orrs	r3, r2
    253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	7d1b      	ldrb	r3, [r3, #20]
    2544:	b29b      	uxth	r3, r3
    2546:	009b      	lsls	r3, r3, #2
    2548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    254a:	4313      	orrs	r3, r2
    254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	7c9b      	ldrb	r3, [r3, #18]
    2552:	b29b      	uxth	r3, r3
    2554:	18db      	adds	r3, r3, r3
    2556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2558:	4313      	orrs	r3, r2
    255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	7cdb      	ldrb	r3, [r3, #19]
    2560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2562:	4313      	orrs	r3, r2
    2564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2566:	693b      	ldr	r3, [r7, #16]
    2568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    256a:	683b      	ldr	r3, [r7, #0]
    256c:	7e1b      	ldrb	r3, [r3, #24]
    256e:	2b00      	cmp	r3, #0
    2570:	d100      	bne.n	2574 <_adc_set_config+0x238>
    2572:	e0c4      	b.n	26fe <_adc_set_config+0x3c2>
		switch (resolution) {
    2574:	69bb      	ldr	r3, [r7, #24]
    2576:	2b10      	cmp	r3, #16
    2578:	d100      	bne.n	257c <_adc_set_config+0x240>
    257a:	e076      	b.n	266a <_adc_set_config+0x32e>
    257c:	d802      	bhi.n	2584 <_adc_set_config+0x248>
    257e:	2b00      	cmp	r3, #0
    2580:	d04d      	beq.n	261e <_adc_set_config+0x2e2>
    2582:	e0bc      	b.n	26fe <_adc_set_config+0x3c2>
    2584:	2b20      	cmp	r3, #32
    2586:	d023      	beq.n	25d0 <_adc_set_config+0x294>
    2588:	2b30      	cmp	r3, #48	; 0x30
    258a:	d000      	beq.n	258e <_adc_set_config+0x252>
    258c:	e0b7      	b.n	26fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	7cdb      	ldrb	r3, [r3, #19]
    2592:	2b00      	cmp	r3, #0
    2594:	d011      	beq.n	25ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2596:	683b      	ldr	r3, [r7, #0]
    2598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    259a:	2b7f      	cmp	r3, #127	; 0x7f
    259c:	dc0b      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    25a2:	3380      	adds	r3, #128	; 0x80
    25a4:	db07      	blt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    25a6:	683b      	ldr	r3, [r7, #0]
    25a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    25aa:	2b7f      	cmp	r3, #127	; 0x7f
    25ac:	dc03      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    25ae:	683b      	ldr	r3, [r7, #0]
    25b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    25b2:	3380      	adds	r3, #128	; 0x80
    25b4:	da01      	bge.n	25ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25b6:	2317      	movs	r3, #23
    25b8:	e143      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	69db      	ldr	r3, [r3, #28]
    25be:	2bff      	cmp	r3, #255	; 0xff
    25c0:	dc04      	bgt.n	25cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    25c6:	2bff      	cmp	r3, #255	; 0xff
    25c8:	dc00      	bgt.n	25cc <_adc_set_config+0x290>
    25ca:	e091      	b.n	26f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25cc:	2317      	movs	r3, #23
    25ce:	e138      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    25d0:	683b      	ldr	r3, [r7, #0]
    25d2:	7cdb      	ldrb	r3, [r3, #19]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d015      	beq.n	2604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    25dc:	4a36      	ldr	r2, [pc, #216]	; (26b8 <_adc_set_config+0x37c>)
    25de:	4293      	cmp	r3, r2
    25e0:	dc0e      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    25e2:	683b      	ldr	r3, [r7, #0]
    25e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    25e6:	4a35      	ldr	r2, [pc, #212]	; (26bc <_adc_set_config+0x380>)
    25e8:	4293      	cmp	r3, r2
    25ea:	db09      	blt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    25ec:	683b      	ldr	r3, [r7, #0]
    25ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    25f0:	4a31      	ldr	r2, [pc, #196]	; (26b8 <_adc_set_config+0x37c>)
    25f2:	4293      	cmp	r3, r2
    25f4:	dc04      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    25fa:	4a30      	ldr	r2, [pc, #192]	; (26bc <_adc_set_config+0x380>)
    25fc:	4293      	cmp	r3, r2
    25fe:	da01      	bge.n	2604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2600:	2317      	movs	r3, #23
    2602:	e11e      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2604:	683b      	ldr	r3, [r7, #0]
    2606:	69db      	ldr	r3, [r3, #28]
    2608:	4a2d      	ldr	r2, [pc, #180]	; (26c0 <_adc_set_config+0x384>)
    260a:	4293      	cmp	r3, r2
    260c:	dc05      	bgt.n	261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2612:	4a2b      	ldr	r2, [pc, #172]	; (26c0 <_adc_set_config+0x384>)
    2614:	4293      	cmp	r3, r2
    2616:	dc00      	bgt.n	261a <_adc_set_config+0x2de>
    2618:	e06c      	b.n	26f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    261a:	2317      	movs	r3, #23
    261c:	e111      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    261e:	683b      	ldr	r3, [r7, #0]
    2620:	7cdb      	ldrb	r3, [r3, #19]
    2622:	2b00      	cmp	r3, #0
    2624:	d015      	beq.n	2652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2626:	683b      	ldr	r3, [r7, #0]
    2628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    262a:	4a26      	ldr	r2, [pc, #152]	; (26c4 <_adc_set_config+0x388>)
    262c:	4293      	cmp	r3, r2
    262e:	dc0e      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2634:	4a24      	ldr	r2, [pc, #144]	; (26c8 <_adc_set_config+0x38c>)
    2636:	4293      	cmp	r3, r2
    2638:	db09      	blt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    263e:	4a21      	ldr	r2, [pc, #132]	; (26c4 <_adc_set_config+0x388>)
    2640:	4293      	cmp	r3, r2
    2642:	dc04      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2648:	4a1f      	ldr	r2, [pc, #124]	; (26c8 <_adc_set_config+0x38c>)
    264a:	4293      	cmp	r3, r2
    264c:	da01      	bge.n	2652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    264e:	2317      	movs	r3, #23
    2650:	e0f7      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	69db      	ldr	r3, [r3, #28]
    2656:	4a1d      	ldr	r2, [pc, #116]	; (26cc <_adc_set_config+0x390>)
    2658:	4293      	cmp	r3, r2
    265a:	dc04      	bgt.n	2666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2660:	4a1a      	ldr	r2, [pc, #104]	; (26cc <_adc_set_config+0x390>)
    2662:	4293      	cmp	r3, r2
    2664:	dd48      	ble.n	26f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2666:	2317      	movs	r3, #23
    2668:	e0eb      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    266a:	683b      	ldr	r3, [r7, #0]
    266c:	7cdb      	ldrb	r3, [r3, #19]
    266e:	2b00      	cmp	r3, #0
    2670:	d032      	beq.n	26d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2672:	683b      	ldr	r3, [r7, #0]
    2674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2676:	4a16      	ldr	r2, [pc, #88]	; (26d0 <_adc_set_config+0x394>)
    2678:	4293      	cmp	r3, r2
    267a:	dc0e      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2680:	4a14      	ldr	r2, [pc, #80]	; (26d4 <_adc_set_config+0x398>)
    2682:	4293      	cmp	r3, r2
    2684:	db09      	blt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    268a:	4a11      	ldr	r2, [pc, #68]	; (26d0 <_adc_set_config+0x394>)
    268c:	4293      	cmp	r3, r2
    268e:	dc04      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2694:	4a0f      	ldr	r2, [pc, #60]	; (26d4 <_adc_set_config+0x398>)
    2696:	4293      	cmp	r3, r2
    2698:	da1e      	bge.n	26d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    269a:	2317      	movs	r3, #23
    269c:	e0d1      	b.n	2842 <_adc_set_config+0x506>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00002115 	.word	0x00002115
    26a4:	00007c25 	.word	0x00007c25
    26a8:	00007c69 	.word	0x00007c69
    26ac:	000022c5 	.word	0x000022c5
    26b0:	00017150 	.word	0x00017150
    26b4:	000021f1 	.word	0x000021f1
    26b8:	000001ff 	.word	0x000001ff
    26bc:	fffffe00 	.word	0xfffffe00
    26c0:	000003ff 	.word	0x000003ff
    26c4:	000007ff 	.word	0x000007ff
    26c8:	fffff800 	.word	0xfffff800
    26cc:	00000fff 	.word	0x00000fff
    26d0:	00007fff 	.word	0x00007fff
    26d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	69db      	ldr	r3, [r3, #28]
    26dc:	4a5b      	ldr	r2, [pc, #364]	; (284c <_adc_set_config+0x510>)
    26de:	4293      	cmp	r3, r2
    26e0:	dc04      	bgt.n	26ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    26e2:	683b      	ldr	r3, [r7, #0]
    26e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    26e6:	4a59      	ldr	r2, [pc, #356]	; (284c <_adc_set_config+0x510>)
    26e8:	4293      	cmp	r3, r2
    26ea:	dd07      	ble.n	26fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    26ec:	2317      	movs	r3, #23
    26ee:	e0a8      	b.n	2842 <_adc_set_config+0x506>
			break;
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	e004      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	e002      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	e000      	b.n	26fe <_adc_set_config+0x3c2>
			}
			break;
    26fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	0018      	movs	r0, r3
    2704:	4b52      	ldr	r3, [pc, #328]	; (2850 <_adc_set_config+0x514>)
    2706:	4798      	blx	r3
    2708:	1e03      	subs	r3, r0, #0
    270a:	d1f9      	bne.n	2700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    270c:	683b      	ldr	r3, [r7, #0]
    270e:	7e1a      	ldrb	r2, [r3, #24]
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2714:	46c0      	nop			; (mov r8, r8)
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	0018      	movs	r0, r3
    271a:	4b4d      	ldr	r3, [pc, #308]	; (2850 <_adc_set_config+0x514>)
    271c:	4798      	blx	r3
    271e:	1e03      	subs	r3, r0, #0
    2720:	d1f9      	bne.n	2716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2722:	683b      	ldr	r3, [r7, #0]
    2724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2726:	b29a      	uxth	r2, r3
    2728:	693b      	ldr	r3, [r7, #16]
    272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	0018      	movs	r0, r3
    2732:	4b47      	ldr	r3, [pc, #284]	; (2850 <_adc_set_config+0x514>)
    2734:	4798      	blx	r3
    2736:	1e03      	subs	r3, r0, #0
    2738:	d1f9      	bne.n	272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	6a1b      	ldr	r3, [r3, #32]
    273e:	b29a      	uxth	r2, r3
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2744:	2314      	movs	r3, #20
    2746:	18fb      	adds	r3, r7, r3
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	212c      	movs	r1, #44	; 0x2c
    274c:	5c52      	ldrb	r2, [r2, r1]
    274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2750:	2314      	movs	r3, #20
    2752:	18fb      	adds	r3, r7, r3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d006      	beq.n	2768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    275a:	2314      	movs	r3, #20
    275c:	18fb      	adds	r3, r7, r3
    275e:	781a      	ldrb	r2, [r3, #0]
    2760:	2314      	movs	r3, #20
    2762:	18fb      	adds	r3, r7, r3
    2764:	3a01      	subs	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2768:	2314      	movs	r3, #20
    276a:	18fb      	adds	r3, r7, r3
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	2b0f      	cmp	r3, #15
    2770:	d804      	bhi.n	277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	222b      	movs	r2, #43	; 0x2b
    2776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2778:	2b0f      	cmp	r3, #15
    277a:	d901      	bls.n	2780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    277c:	2317      	movs	r3, #23
    277e:	e060      	b.n	2842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	0018      	movs	r0, r3
    2786:	4b32      	ldr	r3, [pc, #200]	; (2850 <_adc_set_config+0x514>)
    2788:	4798      	blx	r3
    278a:	1e03      	subs	r3, r0, #0
    278c:	d1f9      	bne.n	2782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    278e:	683b      	ldr	r3, [r7, #0]
    2790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2792:	683a      	ldr	r2, [r7, #0]
    2794:	212b      	movs	r1, #43	; 0x2b
    2796:	5c52      	ldrb	r2, [r2, r1]
    2798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    279c:	2214      	movs	r2, #20
    279e:	18ba      	adds	r2, r7, r2
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    27a4:	4313      	orrs	r3, r2
			config->negative_input |
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    27aa:	4313      	orrs	r3, r2
			config->positive_input;
    27ac:	683a      	ldr	r2, [r7, #0]
    27ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    27b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    27b2:	693b      	ldr	r3, [r7, #16]
    27b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	222a      	movs	r2, #42	; 0x2a
    27ba:	5c9a      	ldrb	r2, [r3, r2]
    27bc:	693b      	ldr	r3, [r7, #16]
    27be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	220f      	movs	r2, #15
    27c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    27c6:	683b      	ldr	r3, [r7, #0]
    27c8:	2224      	movs	r2, #36	; 0x24
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d01e      	beq.n	280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    27d0:	683b      	ldr	r3, [r7, #0]
    27d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    27d4:	4a1f      	ldr	r2, [pc, #124]	; (2854 <_adc_set_config+0x518>)
    27d6:	4293      	cmp	r3, r2
    27d8:	d901      	bls.n	27de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    27da:	2317      	movs	r3, #23
    27dc:	e031      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    27de:	683b      	ldr	r3, [r7, #0]
    27e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	2228      	movs	r2, #40	; 0x28
    27ea:	5e9b      	ldrsh	r3, [r3, r2]
    27ec:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_adc_set_config+0x51c>)
    27ee:	4293      	cmp	r3, r2
    27f0:	dc05      	bgt.n	27fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    27f2:	683b      	ldr	r3, [r7, #0]
    27f4:	2228      	movs	r2, #40	; 0x28
    27f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    27f8:	4a18      	ldr	r2, [pc, #96]	; (285c <_adc_set_config+0x520>)
    27fa:	4293      	cmp	r3, r2
    27fc:	da01      	bge.n	2802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    27fe:	2317      	movs	r3, #23
    2800:	e01f      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2802:	683b      	ldr	r3, [r7, #0]
    2804:	2228      	movs	r2, #40	; 0x28
    2806:	5e9b      	ldrsh	r3, [r3, r2]
    2808:	b29a      	uxth	r2, r3
    280a:	693b      	ldr	r3, [r7, #16]
    280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    280e:	4b14      	ldr	r3, [pc, #80]	; (2860 <_adc_set_config+0x524>)
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	08db      	lsrs	r3, r3, #3
    2814:	b29b      	uxth	r3, r3
    2816:	021b      	lsls	r3, r3, #8
    2818:	b29a      	uxth	r2, r3
    281a:	23e0      	movs	r3, #224	; 0xe0
    281c:	00db      	lsls	r3, r3, #3
    281e:	4013      	ands	r3, r2
    2820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2822:	4b10      	ldr	r3, [pc, #64]	; (2864 <_adc_set_config+0x528>)
    2824:	685c      	ldr	r4, [r3, #4]
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	0161      	lsls	r1, r4, #5
    282a:	0edd      	lsrs	r5, r3, #27
    282c:	430d      	orrs	r5, r1
    282e:	0ee6      	lsrs	r6, r4, #27
    2830:	b2ab      	uxth	r3, r5
    2832:	21ff      	movs	r1, #255	; 0xff
    2834:	400b      	ands	r3, r1
    2836:	b29b      	uxth	r3, r3
			) |
    2838:	4313      	orrs	r3, r2
    283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2840:	2300      	movs	r3, #0
}
    2842:	0018      	movs	r0, r3
    2844:	46bd      	mov	sp, r7
    2846:	b009      	add	sp, #36	; 0x24
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000ffff 	.word	0x0000ffff
    2850:	000021f1 	.word	0x000021f1
    2854:	00000fff 	.word	0x00000fff
    2858:	000007ff 	.word	0x000007ff
    285c:	fffff800 	.word	0xfffff800
    2860:	00806024 	.word	0x00806024
    2864:	00806020 	.word	0x00806020

00002868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2868:	b580      	push	{r7, lr}
    286a:	b084      	sub	sp, #16
    286c:	af00      	add	r7, sp, #0
    286e:	60f8      	str	r0, [r7, #12]
    2870:	60b9      	str	r1, [r7, #8]
    2872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	68ba      	ldr	r2, [r7, #8]
    2878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	025b      	lsls	r3, r3, #9
    287e:	0019      	movs	r1, r3
    2880:	2002      	movs	r0, #2
    2882:	4b15      	ldr	r3, [pc, #84]	; (28d8 <adc_init+0x70>)
    2884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	b2db      	uxtb	r3, r3
    288c:	001a      	movs	r2, r3
    288e:	2301      	movs	r3, #1
    2890:	4013      	ands	r3, r2
    2892:	d001      	beq.n	2898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2894:	2305      	movs	r3, #5
    2896:	e01a      	b.n	28ce <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2898:	68bb      	ldr	r3, [r7, #8]
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	b2db      	uxtb	r3, r3
    289e:	001a      	movs	r2, r3
    28a0:	2302      	movs	r3, #2
    28a2:	4013      	ands	r3, r2
    28a4:	d001      	beq.n	28aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    28a6:	231c      	movs	r3, #28
    28a8:	e011      	b.n	28ce <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	785a      	ldrb	r2, [r3, #1]
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	791b      	ldrb	r3, [r3, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d102      	bne.n	28c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    28ba:	2001      	movs	r0, #1
    28bc:	4b07      	ldr	r3, [pc, #28]	; (28dc <adc_init+0x74>)
    28be:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    28c0:	687a      	ldr	r2, [r7, #4]
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	0011      	movs	r1, r2
    28c6:	0018      	movs	r0, r3
    28c8:	4b05      	ldr	r3, [pc, #20]	; (28e0 <adc_init+0x78>)
    28ca:	4798      	blx	r3
    28cc:	0003      	movs	r3, r0
}
    28ce:	0018      	movs	r0, r3
    28d0:	46bd      	mov	sp, r7
    28d2:	b004      	add	sp, #16
    28d4:	bd80      	pop	{r7, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	0000212d 	.word	0x0000212d
    28dc:	000021b1 	.word	0x000021b1
    28e0:	0000233d 	.word	0x0000233d

000028e4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    28e8:	4b02      	ldr	r3, [pc, #8]	; (28f4 <system_interrupt_enter_critical_section+0x10>)
    28ea:	4798      	blx	r3
}
    28ec:	46c0      	nop			; (mov r8, r8)
    28ee:	46bd      	mov	sp, r7
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	00007271 	.word	0x00007271

000028f8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    28fc:	4b02      	ldr	r3, [pc, #8]	; (2908 <system_interrupt_leave_critical_section+0x10>)
    28fe:	4798      	blx	r3
}
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46bd      	mov	sp, r7
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	000072c5 	.word	0x000072c5

0000290c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    290c:	b580      	push	{r7, lr}
    290e:	b086      	sub	sp, #24
    2910:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    2912:	4b49      	ldr	r3, [pc, #292]	; (2a38 <DMAC_Handler+0x12c>)
    2914:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2916:	4b49      	ldr	r3, [pc, #292]	; (2a3c <DMAC_Handler+0x130>)
    2918:	8c1b      	ldrh	r3, [r3, #32]
    291a:	b29b      	uxth	r3, r3
    291c:	b2da      	uxtb	r2, r3
    291e:	2317      	movs	r3, #23
    2920:	18fb      	adds	r3, r7, r3
    2922:	210f      	movs	r1, #15
    2924:	400a      	ands	r2, r1
    2926:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    2928:	2317      	movs	r3, #23
    292a:	18fb      	adds	r3, r7, r3
    292c:	781a      	ldrb	r2, [r3, #0]
    292e:	4b44      	ldr	r3, [pc, #272]	; (2a40 <DMAC_Handler+0x134>)
    2930:	0092      	lsls	r2, r2, #2
    2932:	58d3      	ldr	r3, [r2, r3]
    2934:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2936:	4a41      	ldr	r2, [pc, #260]	; (2a3c <DMAC_Handler+0x130>)
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	210f      	movs	r1, #15
    293e:	400b      	ands	r3, r1
    2940:	b2d9      	uxtb	r1, r3
    2942:	233f      	movs	r3, #63	; 0x3f
    2944:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    2946:	493d      	ldr	r1, [pc, #244]	; (2a3c <DMAC_Handler+0x130>)
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	224e      	movs	r2, #78	; 0x4e
    294e:	5c8a      	ldrb	r2, [r1, r2]
    2950:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2952:	693b      	ldr	r3, [r7, #16]
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	4a3b      	ldr	r2, [pc, #236]	; (2a44 <DMAC_Handler+0x138>)
    2958:	011b      	lsls	r3, r3, #4
    295a:	18d3      	adds	r3, r2, r3
    295c:	3302      	adds	r3, #2
    295e:	881b      	ldrh	r3, [r3, #0]
    2960:	b29b      	uxth	r3, r3
    2962:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	4a37      	ldr	r2, [pc, #220]	; (2a48 <DMAC_Handler+0x13c>)
    296a:	011b      	lsls	r3, r3, #4
    296c:	18d3      	adds	r3, r2, r3
    296e:	3302      	adds	r3, #2
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    2976:	68ba      	ldr	r2, [r7, #8]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	1ad2      	subs	r2, r2, r3
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    2980:	230f      	movs	r3, #15
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2201      	movs	r2, #1
    2988:	4013      	ands	r3, r2
    298a:	d016      	beq.n	29ba <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    298c:	4a2b      	ldr	r2, [pc, #172]	; (2a3c <DMAC_Handler+0x130>)
    298e:	234e      	movs	r3, #78	; 0x4e
    2990:	2101      	movs	r1, #1
    2992:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    2994:	693b      	ldr	r3, [r7, #16]
    2996:	2210      	movs	r2, #16
    2998:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    299a:	693b      	ldr	r3, [r7, #16]
    299c:	7c1b      	ldrb	r3, [r3, #16]
    299e:	001a      	movs	r2, r3
    29a0:	2301      	movs	r3, #1
    29a2:	4013      	ands	r3, r2
    29a4:	d042      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    29a6:	693b      	ldr	r3, [r7, #16]
    29a8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    29aa:	2b00      	cmp	r3, #0
    29ac:	d03e      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	693a      	ldr	r2, [r7, #16]
    29b4:	0010      	movs	r0, r2
    29b6:	4798      	blx	r3
    29b8:	e038      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    29ba:	230f      	movs	r3, #15
    29bc:	18fb      	adds	r3, r7, r3
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2202      	movs	r2, #2
    29c2:	4013      	ands	r3, r2
    29c4:	d016      	beq.n	29f4 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    29c6:	4a1d      	ldr	r2, [pc, #116]	; (2a3c <DMAC_Handler+0x130>)
    29c8:	234e      	movs	r3, #78	; 0x4e
    29ca:	2102      	movs	r1, #2
    29cc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    29ce:	693b      	ldr	r3, [r7, #16]
    29d0:	2200      	movs	r2, #0
    29d2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29d4:	693b      	ldr	r3, [r7, #16]
    29d6:	7c1b      	ldrb	r3, [r3, #16]
    29d8:	001a      	movs	r2, r3
    29da:	2302      	movs	r3, #2
    29dc:	4013      	ands	r3, r2
    29de:	d025      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    29e0:	693b      	ldr	r3, [r7, #16]
    29e2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29e4:	2b00      	cmp	r3, #0
    29e6:	d021      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	689b      	ldr	r3, [r3, #8]
    29ec:	693a      	ldr	r2, [r7, #16]
    29ee:	0010      	movs	r0, r2
    29f0:	4798      	blx	r3
    29f2:	e01b      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    29f4:	230f      	movs	r3, #15
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	2204      	movs	r2, #4
    29fc:	4013      	ands	r3, r2
    29fe:	d015      	beq.n	2a2c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    2a00:	4a0e      	ldr	r2, [pc, #56]	; (2a3c <DMAC_Handler+0x130>)
    2a02:	234e      	movs	r3, #78	; 0x4e
    2a04:	2104      	movs	r1, #4
    2a06:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    2a08:	693b      	ldr	r3, [r7, #16]
    2a0a:	2206      	movs	r2, #6
    2a0c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a0e:	693b      	ldr	r3, [r7, #16]
    2a10:	7c1b      	ldrb	r3, [r3, #16]
    2a12:	001a      	movs	r2, r3
    2a14:	2304      	movs	r3, #4
    2a16:	4013      	ands	r3, r2
    2a18:	d008      	beq.n	2a2c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d004      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	68db      	ldr	r3, [r3, #12]
    2a26:	693a      	ldr	r2, [r7, #16]
    2a28:	0010      	movs	r0, r2
    2a2a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    2a2c:	4b07      	ldr	r3, [pc, #28]	; (2a4c <DMAC_Handler+0x140>)
    2a2e:	4798      	blx	r3
}
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46bd      	mov	sp, r7
    2a34:	b006      	add	sp, #24
    2a36:	bd80      	pop	{r7, pc}
    2a38:	000028e5 	.word	0x000028e5
    2a3c:	41004800 	.word	0x41004800
    2a40:	200001c0 	.word	0x200001c0
    2a44:	20000400 	.word	0x20000400
    2a48:	20000170 	.word	0x20000170
    2a4c:	000028f9 	.word	0x000028f9

00002a50 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b082      	sub	sp, #8
    2a54:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <nvm_is_ready+0x24>)
    2a58:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	7d1b      	ldrb	r3, [r3, #20]
    2a5e:	b2db      	uxtb	r3, r3
    2a60:	001a      	movs	r2, r3
    2a62:	2301      	movs	r3, #1
    2a64:	4013      	ands	r3, r2
    2a66:	1e5a      	subs	r2, r3, #1
    2a68:	4193      	sbcs	r3, r2
    2a6a:	b2db      	uxtb	r3, r3
}
    2a6c:	0018      	movs	r0, r3
    2a6e:	46bd      	mov	sp, r7
    2a70:	b002      	add	sp, #8
    2a72:	bd80      	pop	{r7, pc}
    2a74:	41004000 	.word	0x41004000

00002a78 <system_apb_clock_set_mask>:
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	0002      	movs	r2, r0
    2a80:	6039      	str	r1, [r7, #0]
    2a82:	1dfb      	adds	r3, r7, #7
    2a84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2a86:	1dfb      	adds	r3, r7, #7
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b01      	cmp	r3, #1
    2a8c:	d00a      	beq.n	2aa4 <system_apb_clock_set_mask+0x2c>
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d00f      	beq.n	2ab2 <system_apb_clock_set_mask+0x3a>
    2a92:	2b00      	cmp	r3, #0
    2a94:	d114      	bne.n	2ac0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2a96:	4b0e      	ldr	r3, [pc, #56]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a98:	4a0d      	ldr	r2, [pc, #52]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a9a:	6991      	ldr	r1, [r2, #24]
    2a9c:	683a      	ldr	r2, [r7, #0]
    2a9e:	430a      	orrs	r2, r1
    2aa0:	619a      	str	r2, [r3, #24]
			break;
    2aa2:	e00f      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2aa4:	4b0a      	ldr	r3, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa6:	4a0a      	ldr	r2, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa8:	69d1      	ldr	r1, [r2, #28]
    2aaa:	683a      	ldr	r2, [r7, #0]
    2aac:	430a      	orrs	r2, r1
    2aae:	61da      	str	r2, [r3, #28]
			break;
    2ab0:	e008      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2ab2:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab4:	4a06      	ldr	r2, [pc, #24]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab6:	6a11      	ldr	r1, [r2, #32]
    2ab8:	683a      	ldr	r2, [r7, #0]
    2aba:	430a      	orrs	r2, r1
    2abc:	621a      	str	r2, [r3, #32]
			break;
    2abe:	e001      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2ac0:	2317      	movs	r3, #23
    2ac2:	e000      	b.n	2ac6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ac4:	2300      	movs	r3, #0
}
    2ac6:	0018      	movs	r0, r3
    2ac8:	46bd      	mov	sp, r7
    2aca:	b002      	add	sp, #8
    2acc:	bd80      	pop	{r7, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	40000400 	.word	0x40000400

00002ad4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b084      	sub	sp, #16
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2adc:	4b2f      	ldr	r3, [pc, #188]	; (2b9c <nvm_set_config+0xc8>)
    2ade:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    2ae0:	2104      	movs	r1, #4
    2ae2:	2001      	movs	r0, #1
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <nvm_set_config+0xcc>)
    2ae6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2220      	movs	r2, #32
    2aec:	32ff      	adds	r2, #255	; 0xff
    2aee:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2af0:	4b2c      	ldr	r3, [pc, #176]	; (2ba4 <nvm_set_config+0xd0>)
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	001a      	movs	r2, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4053      	eors	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d001      	beq.n	2b06 <nvm_set_config+0x32>
		return STATUS_BUSY;
    2b02:	2305      	movs	r3, #5
    2b04:	e045      	b.n	2b92 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	021b      	lsls	r3, r3, #8
    2b0c:	001a      	movs	r2, r3
    2b0e:	23c0      	movs	r3, #192	; 0xc0
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	785b      	ldrb	r3, [r3, #1]
    2b18:	01db      	lsls	r3, r3, #7
    2b1a:	0019      	movs	r1, r3
    2b1c:	23ff      	movs	r3, #255	; 0xff
    2b1e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b20:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	789b      	ldrb	r3, [r3, #2]
    2b26:	005b      	lsls	r3, r3, #1
    2b28:	0019      	movs	r1, r3
    2b2a:	231e      	movs	r3, #30
    2b2c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b2e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	78db      	ldrb	r3, [r3, #3]
    2b34:	049b      	lsls	r3, r3, #18
    2b36:	0019      	movs	r1, r3
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	02db      	lsls	r3, r3, #11
    2b3c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b3e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	791b      	ldrb	r3, [r3, #4]
    2b44:	041b      	lsls	r3, r3, #16
    2b46:	0019      	movs	r1, r3
    2b48:	23c0      	movs	r3, #192	; 0xc0
    2b4a:	029b      	lsls	r3, r3, #10
    2b4c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b4e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	689b      	ldr	r3, [r3, #8]
    2b58:	035b      	lsls	r3, r3, #13
    2b5a:	0f5b      	lsrs	r3, r3, #29
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	001a      	movs	r2, r3
    2b60:	2308      	movs	r3, #8
    2b62:	4093      	lsls	r3, r2
    2b64:	b29a      	uxth	r2, r3
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <nvm_set_config+0xd4>)
    2b68:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	689b      	ldr	r3, [r3, #8]
    2b6e:	b29a      	uxth	r2, r3
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <nvm_set_config+0xd4>)
    2b72:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	785a      	ldrb	r2, [r3, #1]
    2b78:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <nvm_set_config+0xd4>)
    2b7a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	8b1b      	ldrh	r3, [r3, #24]
    2b80:	b29b      	uxth	r3, r3
    2b82:	001a      	movs	r2, r3
    2b84:	2380      	movs	r3, #128	; 0x80
    2b86:	005b      	lsls	r3, r3, #1
    2b88:	4013      	ands	r3, r2
    2b8a:	d001      	beq.n	2b90 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    2b8c:	2310      	movs	r3, #16
    2b8e:	e000      	b.n	2b92 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    2b90:	2300      	movs	r3, #0
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	41004000 	.word	0x41004000
    2ba0:	00002a79 	.word	0x00002a79
    2ba4:	00002a51 	.word	0x00002a51
    2ba8:	200001d4 	.word	0x200001d4

00002bac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b086      	sub	sp, #24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60b9      	str	r1, [r7, #8]
    2bb4:	607a      	str	r2, [r7, #4]
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	1c02      	adds	r2, r0, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2bbe:	4b3a      	ldr	r3, [pc, #232]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc0:	881b      	ldrh	r3, [r3, #0]
    2bc2:	001a      	movs	r2, r3
    2bc4:	4b38      	ldr	r3, [pc, #224]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc6:	885b      	ldrh	r3, [r3, #2]
    2bc8:	435a      	muls	r2, r3
    2bca:	68bb      	ldr	r3, [r7, #8]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d209      	bcs.n	2be4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2bd0:	68bb      	ldr	r3, [r7, #8]
    2bd2:	4a36      	ldr	r2, [pc, #216]	; (2cac <nvm_execute_command+0x100>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d903      	bls.n	2be0 <nvm_execute_command+0x34>
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	4a35      	ldr	r2, [pc, #212]	; (2cb0 <nvm_execute_command+0x104>)
    2bdc:	4293      	cmp	r3, r2
    2bde:	d901      	bls.n	2be4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2be0:	2318      	movs	r3, #24
    2be2:	e05c      	b.n	2c9e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2be4:	4b33      	ldr	r3, [pc, #204]	; (2cb4 <nvm_execute_command+0x108>)
    2be6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	685b      	ldr	r3, [r3, #4]
    2bec:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	2280      	movs	r2, #128	; 0x80
    2bf2:	02d2      	lsls	r2, r2, #11
    2bf4:	431a      	orrs	r2, r3
    2bf6:	697b      	ldr	r3, [r7, #20]
    2bf8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	2220      	movs	r2, #32
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2c02:	4b2d      	ldr	r3, [pc, #180]	; (2cb8 <nvm_execute_command+0x10c>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	001a      	movs	r2, r3
    2c0a:	2301      	movs	r3, #1
    2c0c:	4053      	eors	r3, r2
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d004      	beq.n	2c1e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2c14:	697b      	ldr	r3, [r7, #20]
    2c16:	693a      	ldr	r2, [r7, #16]
    2c18:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    2c1a:	2305      	movs	r3, #5
    2c1c:	e03f      	b.n	2c9e <nvm_execute_command+0xf2>
	}

	switch (command) {
    2c1e:	230f      	movs	r3, #15
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b45      	cmp	r3, #69	; 0x45
    2c26:	d81d      	bhi.n	2c64 <nvm_execute_command+0xb8>
    2c28:	009a      	lsls	r2, r3, #2
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <nvm_execute_command+0x110>)
    2c2c:	18d3      	adds	r3, r2, r3
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2c32:	697b      	ldr	r3, [r7, #20]
    2c34:	8b1b      	ldrh	r3, [r3, #24]
    2c36:	b29b      	uxth	r3, r3
    2c38:	001a      	movs	r2, r3
    2c3a:	2380      	movs	r3, #128	; 0x80
    2c3c:	005b      	lsls	r3, r3, #1
    2c3e:	4013      	ands	r3, r2
    2c40:	d004      	beq.n	2c4c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	693a      	ldr	r2, [r7, #16]
    2c46:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    2c48:	2310      	movs	r3, #16
    2c4a:	e028      	b.n	2c9e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c4c:	68bb      	ldr	r3, [r7, #8]
    2c4e:	089b      	lsrs	r3, r3, #2
    2c50:	005a      	lsls	r2, r3, #1
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	61da      	str	r2, [r3, #28]
			break;
    2c56:	e00b      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c58:	68bb      	ldr	r3, [r7, #8]
    2c5a:	089b      	lsrs	r3, r3, #2
    2c5c:	005a      	lsls	r2, r3, #1
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	61da      	str	r2, [r3, #28]
			break;
    2c62:	e005      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	693a      	ldr	r2, [r7, #16]
    2c68:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    2c6a:	2317      	movs	r3, #23
    2c6c:	e017      	b.n	2c9e <nvm_execute_command+0xf2>
			break;
    2c6e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    2c70:	230f      	movs	r3, #15
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	b29b      	uxth	r3, r3
    2c78:	4a11      	ldr	r2, [pc, #68]	; (2cc0 <nvm_execute_command+0x114>)
    2c7a:	4313      	orrs	r3, r2
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	697b      	ldr	r3, [r7, #20]
    2c80:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <nvm_execute_command+0x10c>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	001a      	movs	r2, r3
    2c8c:	2301      	movs	r3, #1
    2c8e:	4053      	eors	r3, r2
    2c90:	b2db      	uxtb	r3, r3
    2c92:	2b00      	cmp	r3, #0
    2c94:	d1f6      	bne.n	2c84 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    2c96:	697b      	ldr	r3, [r7, #20]
    2c98:	693a      	ldr	r2, [r7, #16]
    2c9a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b006      	add	sp, #24
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	200001d4 	.word	0x200001d4
    2cac:	00803fff 	.word	0x00803fff
    2cb0:	00806000 	.word	0x00806000
    2cb4:	41004000 	.word	0x41004000
    2cb8:	00002a51 	.word	0x00002a51
    2cbc:	00017224 	.word	0x00017224
    2cc0:	ffffa500 	.word	0xffffa500

00002cc4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b088      	sub	sp, #32
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	60b9      	str	r1, [r7, #8]
    2cce:	1dbb      	adds	r3, r7, #6
    2cd0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2cd2:	4b4a      	ldr	r3, [pc, #296]	; (2dfc <nvm_write_buffer+0x138>)
    2cd4:	881b      	ldrh	r3, [r3, #0]
    2cd6:	001a      	movs	r2, r3
    2cd8:	4b48      	ldr	r3, [pc, #288]	; (2dfc <nvm_write_buffer+0x138>)
    2cda:	885b      	ldrh	r3, [r3, #2]
    2cdc:	435a      	muls	r2, r3
	if (destination_address >
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d201      	bcs.n	2ce8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2ce4:	2318      	movs	r3, #24
    2ce6:	e084      	b.n	2df2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2ce8:	4b44      	ldr	r3, [pc, #272]	; (2dfc <nvm_write_buffer+0x138>)
    2cea:	881b      	ldrh	r3, [r3, #0]
    2cec:	3b01      	subs	r3, #1
    2cee:	001a      	movs	r2, r3
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	4013      	ands	r3, r2
    2cf4:	d001      	beq.n	2cfa <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2cf6:	2318      	movs	r3, #24
    2cf8:	e07b      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2cfa:	4b40      	ldr	r3, [pc, #256]	; (2dfc <nvm_write_buffer+0x138>)
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	1dba      	adds	r2, r7, #6
    2d00:	8812      	ldrh	r2, [r2, #0]
    2d02:	429a      	cmp	r2, r3
    2d04:	d901      	bls.n	2d0a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2d06:	2317      	movs	r3, #23
    2d08:	e073      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2d0a:	4b3d      	ldr	r3, [pc, #244]	; (2e00 <nvm_write_buffer+0x13c>)
    2d0c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2d0e:	4b3d      	ldr	r3, [pc, #244]	; (2e04 <nvm_write_buffer+0x140>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	001a      	movs	r2, r3
    2d16:	2301      	movs	r3, #1
    2d18:	4053      	eors	r3, r2
    2d1a:	b2db      	uxtb	r3, r3
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d001      	beq.n	2d24 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    2d20:	2305      	movs	r3, #5
    2d22:	e066      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    2d24:	697b      	ldr	r3, [r7, #20]
    2d26:	4a38      	ldr	r2, [pc, #224]	; (2e08 <nvm_write_buffer+0x144>)
    2d28:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	4b35      	ldr	r3, [pc, #212]	; (2e04 <nvm_write_buffer+0x140>)
    2d2e:	4798      	blx	r3
    2d30:	0003      	movs	r3, r0
    2d32:	001a      	movs	r2, r3
    2d34:	2301      	movs	r3, #1
    2d36:	4053      	eors	r3, r2
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d1f6      	bne.n	2d2c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2d3e:	697b      	ldr	r3, [r7, #20]
    2d40:	2220      	movs	r2, #32
    2d42:	32ff      	adds	r2, #255	; 0xff
    2d44:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	085b      	lsrs	r3, r3, #1
    2d4a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2d4c:	231a      	movs	r3, #26
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2200      	movs	r2, #0
    2d52:	801a      	strh	r2, [r3, #0]
    2d54:	e032      	b.n	2dbc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    2d56:	231a      	movs	r3, #26
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	68ba      	ldr	r2, [r7, #8]
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	2318      	movs	r3, #24
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2d68:	231a      	movs	r3, #26
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881a      	ldrh	r2, [r3, #0]
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	3b01      	subs	r3, #1
    2d74:	429a      	cmp	r2, r3
    2d76:	da11      	bge.n	2d9c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    2d78:	231a      	movs	r3, #26
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	3301      	adds	r3, #1
    2d80:	68ba      	ldr	r2, [r7, #8]
    2d82:	18d3      	adds	r3, r2, r3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	021b      	lsls	r3, r3, #8
    2d88:	b21a      	sxth	r2, r3
    2d8a:	2318      	movs	r3, #24
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	2100      	movs	r1, #0
    2d90:	5e5b      	ldrsh	r3, [r3, r1]
    2d92:	4313      	orrs	r3, r2
    2d94:	b21a      	sxth	r2, r3
    2d96:	2318      	movs	r3, #24
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	1c5a      	adds	r2, r3, #1
    2da0:	61fa      	str	r2, [r7, #28]
    2da2:	005b      	lsls	r3, r3, #1
    2da4:	001a      	movs	r2, r3
    2da6:	2318      	movs	r3, #24
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2dae:	231a      	movs	r3, #26
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	221a      	movs	r2, #26
    2db4:	18ba      	adds	r2, r7, r2
    2db6:	8812      	ldrh	r2, [r2, #0]
    2db8:	3202      	adds	r2, #2
    2dba:	801a      	strh	r2, [r3, #0]
    2dbc:	231a      	movs	r3, #26
    2dbe:	18fa      	adds	r2, r7, r3
    2dc0:	1dbb      	adds	r3, r7, #6
    2dc2:	8812      	ldrh	r2, [r2, #0]
    2dc4:	881b      	ldrh	r3, [r3, #0]
    2dc6:	429a      	cmp	r2, r3
    2dc8:	d3c5      	bcc.n	2d56 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2dca:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <nvm_write_buffer+0x138>)
    2dcc:	791b      	ldrb	r3, [r3, #4]
    2dce:	2201      	movs	r2, #1
    2dd0:	4053      	eors	r3, r2
    2dd2:	b2db      	uxtb	r3, r3
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d00b      	beq.n	2df0 <nvm_write_buffer+0x12c>
    2dd8:	1dbb      	adds	r3, r7, #6
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	2b3f      	cmp	r3, #63	; 0x3f
    2dde:	d807      	bhi.n	2df0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	2200      	movs	r2, #0
    2de4:	0019      	movs	r1, r3
    2de6:	2004      	movs	r0, #4
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <nvm_write_buffer+0x148>)
    2dea:	4798      	blx	r3
    2dec:	0003      	movs	r3, r0
    2dee:	e000      	b.n	2df2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    2df0:	2300      	movs	r3, #0
}
    2df2:	0018      	movs	r0, r3
    2df4:	46bd      	mov	sp, r7
    2df6:	b008      	add	sp, #32
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	200001d4 	.word	0x200001d4
    2e00:	41004000 	.word	0x41004000
    2e04:	00002a51 	.word	0x00002a51
    2e08:	ffffa544 	.word	0xffffa544
    2e0c:	00002bad 	.word	0x00002bad

00002e10 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b088      	sub	sp, #32
    2e14:	af00      	add	r7, sp, #0
    2e16:	60f8      	str	r0, [r7, #12]
    2e18:	60b9      	str	r1, [r7, #8]
    2e1a:	1dbb      	adds	r3, r7, #6
    2e1c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2e1e:	4b38      	ldr	r3, [pc, #224]	; (2f00 <nvm_read_buffer+0xf0>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	001a      	movs	r2, r3
    2e24:	4b36      	ldr	r3, [pc, #216]	; (2f00 <nvm_read_buffer+0xf0>)
    2e26:	885b      	ldrh	r3, [r3, #2]
    2e28:	435a      	muls	r2, r3
	if (source_address >
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	429a      	cmp	r2, r3
    2e2e:	d201      	bcs.n	2e34 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2e30:	2318      	movs	r3, #24
    2e32:	e060      	b.n	2ef6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    2e34:	4b32      	ldr	r3, [pc, #200]	; (2f00 <nvm_read_buffer+0xf0>)
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	3b01      	subs	r3, #1
    2e3a:	001a      	movs	r2, r3
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	4013      	ands	r3, r2
    2e40:	d001      	beq.n	2e46 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2e42:	2318      	movs	r3, #24
    2e44:	e057      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2e46:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <nvm_read_buffer+0xf0>)
    2e48:	881b      	ldrh	r3, [r3, #0]
    2e4a:	1dba      	adds	r2, r7, #6
    2e4c:	8812      	ldrh	r2, [r2, #0]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d901      	bls.n	2e56 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2e52:	2317      	movs	r3, #23
    2e54:	e04f      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2e56:	4b2b      	ldr	r3, [pc, #172]	; (2f04 <nvm_read_buffer+0xf4>)
    2e58:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2e5a:	4b2b      	ldr	r3, [pc, #172]	; (2f08 <nvm_read_buffer+0xf8>)
    2e5c:	4798      	blx	r3
    2e5e:	0003      	movs	r3, r0
    2e60:	001a      	movs	r2, r3
    2e62:	2301      	movs	r3, #1
    2e64:	4053      	eors	r3, r2
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d001      	beq.n	2e70 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    2e6c:	2305      	movs	r3, #5
    2e6e:	e042      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	2220      	movs	r2, #32
    2e74:	32ff      	adds	r2, #255	; 0xff
    2e76:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	085b      	lsrs	r3, r3, #1
    2e7c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2e7e:	231a      	movs	r3, #26
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	2200      	movs	r2, #0
    2e84:	801a      	strh	r2, [r3, #0]
    2e86:	e02e      	b.n	2ee6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    2e88:	69fb      	ldr	r3, [r7, #28]
    2e8a:	1c5a      	adds	r2, r3, #1
    2e8c:	61fa      	str	r2, [r7, #28]
    2e8e:	005b      	lsls	r3, r3, #1
    2e90:	001a      	movs	r2, r3
    2e92:	2312      	movs	r3, #18
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	8812      	ldrh	r2, [r2, #0]
    2e98:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    2e9a:	231a      	movs	r3, #26
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	18d3      	adds	r3, r2, r3
    2ea4:	2212      	movs	r2, #18
    2ea6:	18ba      	adds	r2, r7, r2
    2ea8:	8812      	ldrh	r2, [r2, #0]
    2eaa:	b2d2      	uxtb	r2, r2
    2eac:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2eae:	231a      	movs	r3, #26
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	881a      	ldrh	r2, [r3, #0]
    2eb4:	1dbb      	adds	r3, r7, #6
    2eb6:	881b      	ldrh	r3, [r3, #0]
    2eb8:	3b01      	subs	r3, #1
    2eba:	429a      	cmp	r2, r3
    2ebc:	da0c      	bge.n	2ed8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    2ebe:	231a      	movs	r3, #26
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	881b      	ldrh	r3, [r3, #0]
    2ec4:	3301      	adds	r3, #1
    2ec6:	68ba      	ldr	r2, [r7, #8]
    2ec8:	18d3      	adds	r3, r2, r3
    2eca:	2212      	movs	r2, #18
    2ecc:	18ba      	adds	r2, r7, r2
    2ece:	8812      	ldrh	r2, [r2, #0]
    2ed0:	0a12      	lsrs	r2, r2, #8
    2ed2:	b292      	uxth	r2, r2
    2ed4:	b2d2      	uxtb	r2, r2
    2ed6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2ed8:	231a      	movs	r3, #26
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	221a      	movs	r2, #26
    2ede:	18ba      	adds	r2, r7, r2
    2ee0:	8812      	ldrh	r2, [r2, #0]
    2ee2:	3202      	adds	r2, #2
    2ee4:	801a      	strh	r2, [r3, #0]
    2ee6:	231a      	movs	r3, #26
    2ee8:	18fa      	adds	r2, r7, r3
    2eea:	1dbb      	adds	r3, r7, #6
    2eec:	8812      	ldrh	r2, [r2, #0]
    2eee:	881b      	ldrh	r3, [r3, #0]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d3c9      	bcc.n	2e88 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    2ef4:	2300      	movs	r3, #0
}
    2ef6:	0018      	movs	r0, r3
    2ef8:	46bd      	mov	sp, r7
    2efa:	b008      	add	sp, #32
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	200001d4 	.word	0x200001d4
    2f04:	41004000 	.word	0x41004000
    2f08:	00002a51 	.word	0x00002a51

00002f0c <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b084      	sub	sp, #16
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2f14:	4b1e      	ldr	r3, [pc, #120]	; (2f90 <nvm_erase_row+0x84>)
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	001a      	movs	r2, r3
    2f1a:	4b1d      	ldr	r3, [pc, #116]	; (2f90 <nvm_erase_row+0x84>)
    2f1c:	885b      	ldrh	r3, [r3, #2]
    2f1e:	435a      	muls	r2, r3
	if (row_address >
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	429a      	cmp	r2, r3
    2f24:	d201      	bcs.n	2f2a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2f26:	2318      	movs	r3, #24
    2f28:	e02d      	b.n	2f86 <nvm_erase_row+0x7a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2f2a:	4b19      	ldr	r3, [pc, #100]	; (2f90 <nvm_erase_row+0x84>)
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	009b      	lsls	r3, r3, #2
    2f30:	3b01      	subs	r3, #1
    2f32:	001a      	movs	r2, r3
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	4013      	ands	r3, r2
    2f38:	d001      	beq.n	2f3e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    2f3a:	2318      	movs	r3, #24
    2f3c:	e023      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2f3e:	4b15      	ldr	r3, [pc, #84]	; (2f94 <nvm_erase_row+0x88>)
    2f40:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2f42:	4b15      	ldr	r3, [pc, #84]	; (2f98 <nvm_erase_row+0x8c>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	001a      	movs	r2, r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	4053      	eors	r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d001      	beq.n	2f58 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    2f54:	2305      	movs	r3, #5
    2f56:	e016      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f58:	68fb      	ldr	r3, [r7, #12]
    2f5a:	2220      	movs	r2, #32
    2f5c:	32ff      	adds	r2, #255	; 0xff
    2f5e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	089b      	lsrs	r3, r3, #2
    2f64:	005a      	lsls	r2, r3, #1
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2f6a:	68fb      	ldr	r3, [r7, #12]
    2f6c:	4a0b      	ldr	r2, [pc, #44]	; (2f9c <nvm_erase_row+0x90>)
    2f6e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <nvm_erase_row+0x8c>)
    2f74:	4798      	blx	r3
    2f76:	0003      	movs	r3, r0
    2f78:	001a      	movs	r2, r3
    2f7a:	2301      	movs	r3, #1
    2f7c:	4053      	eors	r3, r2
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1f6      	bne.n	2f72 <nvm_erase_row+0x66>
	}

	return STATUS_OK;
    2f84:	2300      	movs	r3, #0
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b004      	add	sp, #16
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200001d4 	.word	0x200001d4
    2f94:	41004000 	.word	0x41004000
    2f98:	00002a51 	.word	0x00002a51
    2f9c:	ffffa502 	.word	0xffffa502

00002fa0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b086      	sub	sp, #24
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2fa8:	4b2a      	ldr	r3, [pc, #168]	; (3054 <nvm_get_parameters+0xb4>)
    2faa:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2220      	movs	r2, #32
    2fb0:	32ff      	adds	r2, #255	; 0xff
    2fb2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	0c1b      	lsrs	r3, r3, #16
    2fbe:	2207      	movs	r2, #7
    2fc0:	4013      	ands	r3, r2
    2fc2:	2208      	movs	r2, #8
    2fc4:	409a      	lsls	r2, r3
    2fc6:	0013      	movs	r3, r2
	parameters->page_size =
    2fc8:	b2da      	uxtb	r2, r3
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    2fce:	693b      	ldr	r3, [r7, #16]
    2fd0:	b29a      	uxth	r2, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    2fd6:	4b20      	ldr	r3, [pc, #128]	; (3058 <nvm_get_parameters+0xb8>)
    2fd8:	881b      	ldrh	r3, [r3, #0]
    2fda:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    2fdc:	091b      	lsrs	r3, r3, #4
    2fde:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    2fe0:	230e      	movs	r3, #14
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2107      	movs	r1, #7
    2fe6:	400a      	ands	r2, r1
    2fe8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    2fea:	230e      	movs	r3, #14
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	881b      	ldrh	r3, [r3, #0]
    2ff0:	2b07      	cmp	r3, #7
    2ff2:	d103      	bne.n	2ffc <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2200      	movs	r2, #0
    2ff8:	605a      	str	r2, [r3, #4]
    2ffa:	e00a      	b.n	3012 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    2ffc:	230e      	movs	r3, #14
    2ffe:	18fb      	adds	r3, r7, r3
    3000:	881b      	ldrh	r3, [r3, #0]
    3002:	2206      	movs	r2, #6
    3004:	1ad3      	subs	r3, r2, r3
    3006:	2204      	movs	r2, #4
    3008:	409a      	lsls	r2, r3
    300a:	0013      	movs	r3, r2
    300c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    3012:	4b11      	ldr	r3, [pc, #68]	; (3058 <nvm_get_parameters+0xb8>)
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    3018:	230c      	movs	r3, #12
    301a:	18fb      	adds	r3, r7, r3
    301c:	2107      	movs	r1, #7
    301e:	400a      	ands	r2, r1
    3020:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    3022:	230c      	movs	r3, #12
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	2b07      	cmp	r3, #7
    302a:	d103      	bne.n	3034 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2200      	movs	r2, #0
    3030:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    3032:	e00a      	b.n	304a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    3034:	230c      	movs	r3, #12
    3036:	18fb      	adds	r3, r7, r3
    3038:	881b      	ldrh	r3, [r3, #0]
    303a:	2207      	movs	r2, #7
    303c:	1ad3      	subs	r3, r2, r3
    303e:	2204      	movs	r2, #4
    3040:	409a      	lsls	r2, r3
    3042:	0013      	movs	r3, r2
    3044:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	609a      	str	r2, [r3, #8]
}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	46bd      	mov	sp, r7
    304e:	b006      	add	sp, #24
    3050:	bd80      	pop	{r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	41004000 	.word	0x41004000
    3058:	00804000 	.word	0x00804000

0000305c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    305c:	b580      	push	{r7, lr}
    305e:	af00      	add	r7, sp, #0
    3060:	2000      	movs	r0, #0
    3062:	4b02      	ldr	r3, [pc, #8]	; (306c <TCC0_Handler+0x10>)
    3064:	4798      	blx	r3
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}
    306c:	00003099 	.word	0x00003099

00003070 <TCC1_Handler>:
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
    3074:	2001      	movs	r0, #1
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <TCC1_Handler+0x10>)
    3078:	4798      	blx	r3
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	46bd      	mov	sp, r7
    307e:	bd80      	pop	{r7, pc}
    3080:	00003099 	.word	0x00003099

00003084 <TCC2_Handler>:
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
    3088:	2002      	movs	r0, #2
    308a:	4b02      	ldr	r3, [pc, #8]	; (3094 <TCC2_Handler+0x10>)
    308c:	4798      	blx	r3
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	00003099 	.word	0x00003099

00003098 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	0002      	movs	r2, r0
    30a0:	1dfb      	adds	r3, r7, #7
    30a2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    30a8:	4b18      	ldr	r3, [pc, #96]	; (310c <_tcc_interrupt_handler+0x74>)
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	58d3      	ldr	r3, [r2, r3]
    30ae:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    30b6:	693b      	ldr	r3, [r7, #16]
    30b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30ba:	401a      	ands	r2, r3
			module->enable_callback_mask);
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30c0:	4013      	ands	r3, r2
    30c2:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30c4:	2300      	movs	r3, #0
    30c6:	617b      	str	r3, [r7, #20]
    30c8:	e019      	b.n	30fe <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    30ca:	4b11      	ldr	r3, [pc, #68]	; (3110 <_tcc_interrupt_handler+0x78>)
    30cc:	697a      	ldr	r2, [r7, #20]
    30ce:	0092      	lsls	r2, r2, #2
    30d0:	58d3      	ldr	r3, [r2, r3]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	4013      	ands	r3, r2
    30d6:	d00f      	beq.n	30f8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    30d8:	693a      	ldr	r2, [r7, #16]
    30da:	697b      	ldr	r3, [r7, #20]
    30dc:	009b      	lsls	r3, r3, #2
    30de:	18d3      	adds	r3, r2, r3
    30e0:	3304      	adds	r3, #4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	693a      	ldr	r2, [r7, #16]
    30e6:	0010      	movs	r0, r2
    30e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    30ea:	693b      	ldr	r3, [r7, #16]
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	4a08      	ldr	r2, [pc, #32]	; (3110 <_tcc_interrupt_handler+0x78>)
    30f0:	6979      	ldr	r1, [r7, #20]
    30f2:	0089      	lsls	r1, r1, #2
    30f4:	588a      	ldr	r2, [r1, r2]
    30f6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	3301      	adds	r3, #1
    30fc:	617b      	str	r3, [r7, #20]
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2b0b      	cmp	r3, #11
    3102:	dde2      	ble.n	30ca <_tcc_interrupt_handler+0x32>
		}
	}
}
    3104:	46c0      	nop			; (mov r8, r8)
    3106:	46bd      	mov	sp, r7
    3108:	b006      	add	sp, #24
    310a:	bd80      	pop	{r7, pc}
    310c:	20000450 	.word	0x20000450
    3110:	0001733c 	.word	0x0001733c

00003114 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3114:	b580      	push	{r7, lr}
    3116:	af00      	add	r7, sp, #0
    3118:	2000      	movs	r0, #0
    311a:	4b02      	ldr	r3, [pc, #8]	; (3124 <TC3_Handler+0x10>)
    311c:	4798      	blx	r3
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	00003151 	.word	0x00003151

00003128 <TC4_Handler>:
    3128:	b580      	push	{r7, lr}
    312a:	af00      	add	r7, sp, #0
    312c:	2001      	movs	r0, #1
    312e:	4b02      	ldr	r3, [pc, #8]	; (3138 <TC4_Handler+0x10>)
    3130:	4798      	blx	r3
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}
    3138:	00003151 	.word	0x00003151

0000313c <TC5_Handler>:
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
    3140:	2002      	movs	r0, #2
    3142:	4b02      	ldr	r3, [pc, #8]	; (314c <TC5_Handler+0x10>)
    3144:	4798      	blx	r3
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	46bd      	mov	sp, r7
    314a:	bd80      	pop	{r7, pc}
    314c:	00003151 	.word	0x00003151

00003150 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	0002      	movs	r2, r0
    3158:	1dfb      	adds	r3, r7, #7
    315a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    315c:	1dfb      	adds	r3, r7, #7
    315e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3160:	4b28      	ldr	r3, [pc, #160]	; (3204 <_tc_interrupt_handler+0xb4>)
    3162:	0092      	lsls	r2, r2, #2
    3164:	58d3      	ldr	r3, [r2, r3]
    3166:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	7b9b      	ldrb	r3, [r3, #14]
    316e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3174:	4013      	ands	r3, r2
    3176:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    317c:	230b      	movs	r3, #11
    317e:	18fb      	adds	r3, r7, r3
    3180:	400a      	ands	r2, r1
    3182:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3184:	230b      	movs	r3, #11
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2201      	movs	r2, #1
    318c:	4013      	ands	r3, r2
    318e:	d008      	beq.n	31a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	68fa      	ldr	r2, [r7, #12]
    3196:	0010      	movs	r0, r2
    3198:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	2201      	movs	r2, #1
    31a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    31a2:	230b      	movs	r3, #11
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2202      	movs	r2, #2
    31aa:	4013      	ands	r3, r2
    31ac:	d008      	beq.n	31c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	68db      	ldr	r3, [r3, #12]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	0010      	movs	r0, r2
    31b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2202      	movs	r2, #2
    31be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    31c0:	230b      	movs	r3, #11
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2210      	movs	r2, #16
    31c8:	4013      	ands	r3, r2
    31ca:	d008      	beq.n	31de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	691b      	ldr	r3, [r3, #16]
    31d0:	68fa      	ldr	r2, [r7, #12]
    31d2:	0010      	movs	r0, r2
    31d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31d6:	68fb      	ldr	r3, [r7, #12]
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	2210      	movs	r2, #16
    31dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    31de:	230b      	movs	r3, #11
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	2220      	movs	r2, #32
    31e6:	4013      	ands	r3, r2
    31e8:	d008      	beq.n	31fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	695b      	ldr	r3, [r3, #20]
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	0010      	movs	r0, r2
    31f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2220      	movs	r2, #32
    31fa:	739a      	strb	r2, [r3, #14]
	}
}
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46bd      	mov	sp, r7
    3200:	b004      	add	sp, #16
    3202:	bd80      	pop	{r7, pc}
    3204:	2000045c 	.word	0x2000045c

00003208 <system_gclk_chan_get_config_defaults>:
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	2200      	movs	r2, #0
    3214:	701a      	strb	r2, [r3, #0]
}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46bd      	mov	sp, r7
    321a:	b002      	add	sp, #8
    321c:	bd80      	pop	{r7, pc}
	...

00003220 <system_apb_clock_set_mask>:
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	0002      	movs	r2, r0
    3228:	6039      	str	r1, [r7, #0]
    322a:	1dfb      	adds	r3, r7, #7
    322c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    322e:	1dfb      	adds	r3, r7, #7
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b01      	cmp	r3, #1
    3234:	d00a      	beq.n	324c <system_apb_clock_set_mask+0x2c>
    3236:	2b02      	cmp	r3, #2
    3238:	d00f      	beq.n	325a <system_apb_clock_set_mask+0x3a>
    323a:	2b00      	cmp	r3, #0
    323c:	d114      	bne.n	3268 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    323e:	4b0e      	ldr	r3, [pc, #56]	; (3278 <system_apb_clock_set_mask+0x58>)
    3240:	4a0d      	ldr	r2, [pc, #52]	; (3278 <system_apb_clock_set_mask+0x58>)
    3242:	6991      	ldr	r1, [r2, #24]
    3244:	683a      	ldr	r2, [r7, #0]
    3246:	430a      	orrs	r2, r1
    3248:	619a      	str	r2, [r3, #24]
			break;
    324a:	e00f      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    324c:	4b0a      	ldr	r3, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    324e:	4a0a      	ldr	r2, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    3250:	69d1      	ldr	r1, [r2, #28]
    3252:	683a      	ldr	r2, [r7, #0]
    3254:	430a      	orrs	r2, r1
    3256:	61da      	str	r2, [r3, #28]
			break;
    3258:	e008      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <system_apb_clock_set_mask+0x58>)
    325c:	4a06      	ldr	r2, [pc, #24]	; (3278 <system_apb_clock_set_mask+0x58>)
    325e:	6a11      	ldr	r1, [r2, #32]
    3260:	683a      	ldr	r2, [r7, #0]
    3262:	430a      	orrs	r2, r1
    3264:	621a      	str	r2, [r3, #32]
			break;
    3266:	e001      	b.n	326c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3268:	2317      	movs	r3, #23
    326a:	e000      	b.n	326e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    326c:	2300      	movs	r3, #0
}
    326e:	0018      	movs	r0, r3
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	40000400 	.word	0x40000400

0000327c <system_pinmux_get_config_defaults>:
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2280      	movs	r2, #128	; 0x80
    3288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2200      	movs	r2, #0
    328e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2201      	movs	r2, #1
    3294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	2200      	movs	r2, #0
    329a:	70da      	strb	r2, [r3, #3]
}
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46bd      	mov	sp, r7
    32a0:	b002      	add	sp, #8
    32a2:	bd80      	pop	{r7, pc}

000032a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <system_is_debugger_present+0x1c>)
    32aa:	789b      	ldrb	r3, [r3, #2]
    32ac:	b2db      	uxtb	r3, r3
    32ae:	001a      	movs	r2, r3
    32b0:	2302      	movs	r3, #2
    32b2:	4013      	ands	r3, r2
    32b4:	1e5a      	subs	r2, r3, #1
    32b6:	4193      	sbcs	r3, r2
    32b8:	b2db      	uxtb	r3, r3
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	bd80      	pop	{r7, pc}
    32c0:	41002000 	.word	0x41002000

000032c4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	69db      	ldr	r3, [r3, #28]
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
    32da:	1e5a      	subs	r2, r3, #1
    32dc:	4193      	sbcs	r3, r2
    32de:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    32e0:	0018      	movs	r0, r3
    32e2:	46bd      	mov	sp, r7
    32e4:	b004      	add	sp, #16
    32e6:	bd80      	pop	{r7, pc}

000032e8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	0018      	movs	r0, r3
    32f6:	4b04      	ldr	r3, [pc, #16]	; (3308 <_i2c_master_wait_for_sync+0x20>)
    32f8:	4798      	blx	r3
    32fa:	1e03      	subs	r3, r0, #0
    32fc:	d1f9      	bne.n	32f2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46bd      	mov	sp, r7
    3302:	b002      	add	sp, #8
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	000032c5 	.word	0x000032c5

0000330c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	b095      	sub	sp, #84	; 0x54
    3310:	af00      	add	r7, sp, #0
    3312:	60f8      	str	r0, [r7, #12]
    3314:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3316:	2300      	movs	r3, #0
    3318:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    331a:	2300      	movs	r3, #0
    331c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    331e:	2300      	movs	r3, #0
    3320:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    3322:	233b      	movs	r3, #59	; 0x3b
    3324:	2208      	movs	r2, #8
    3326:	4694      	mov	ip, r2
    3328:	44bc      	add	ip, r7
    332a:	4463      	add	r3, ip
    332c:	2200      	movs	r2, #0
    332e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    3336:	68fb      	ldr	r3, [r7, #12]
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    333c:	2323      	movs	r3, #35	; 0x23
    333e:	2208      	movs	r2, #8
    3340:	18ba      	adds	r2, r7, r2
    3342:	18d4      	adds	r4, r2, r3
    3344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3346:	0018      	movs	r0, r3
    3348:	4bdb      	ldr	r3, [pc, #876]	; (36b8 <_i2c_master_set_config+0x3ac>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3350:	230c      	movs	r3, #12
    3352:	2208      	movs	r2, #8
    3354:	4694      	mov	ip, r2
    3356:	44bc      	add	ip, r7
    3358:	4463      	add	r3, ip
    335a:	0018      	movs	r0, r3
    335c:	4bd7      	ldr	r3, [pc, #860]	; (36bc <_i2c_master_set_config+0x3b0>)
    335e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3360:	68bb      	ldr	r3, [r7, #8]
    3362:	69db      	ldr	r3, [r3, #28]
    3364:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    3366:	68bb      	ldr	r3, [r7, #8]
    3368:	6a1b      	ldr	r3, [r3, #32]
    336a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    336e:	2b00      	cmp	r3, #0
    3370:	d106      	bne.n	3380 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3374:	2100      	movs	r1, #0
    3376:	0018      	movs	r0, r3
    3378:	4bd1      	ldr	r3, [pc, #836]	; (36c0 <_i2c_master_set_config+0x3b4>)
    337a:	4798      	blx	r3
    337c:	0003      	movs	r3, r0
    337e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3382:	b2da      	uxtb	r2, r3
    3384:	230c      	movs	r3, #12
    3386:	2108      	movs	r1, #8
    3388:	468c      	mov	ip, r1
    338a:	44bc      	add	ip, r7
    338c:	4463      	add	r3, ip
    338e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3390:	230c      	movs	r3, #12
    3392:	2208      	movs	r2, #8
    3394:	4694      	mov	ip, r2
    3396:	44bc      	add	ip, r7
    3398:	4463      	add	r3, ip
    339a:	2202      	movs	r2, #2
    339c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33a0:	0c1b      	lsrs	r3, r3, #16
    33a2:	b2db      	uxtb	r3, r3
    33a4:	220c      	movs	r2, #12
    33a6:	2108      	movs	r1, #8
    33a8:	468c      	mov	ip, r1
    33aa:	44bc      	add	ip, r7
    33ac:	4462      	add	r2, ip
    33ae:	0011      	movs	r1, r2
    33b0:	0018      	movs	r0, r3
    33b2:	4bc4      	ldr	r3, [pc, #784]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    33b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33b8:	2b00      	cmp	r3, #0
    33ba:	d106      	bne.n	33ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    33bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33be:	2101      	movs	r1, #1
    33c0:	0018      	movs	r0, r3
    33c2:	4bbf      	ldr	r3, [pc, #764]	; (36c0 <_i2c_master_set_config+0x3b4>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
    33c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    33ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33cc:	b2da      	uxtb	r2, r3
    33ce:	230c      	movs	r3, #12
    33d0:	2108      	movs	r1, #8
    33d2:	468c      	mov	ip, r1
    33d4:	44bc      	add	ip, r7
    33d6:	4463      	add	r3, ip
    33d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    33da:	230c      	movs	r3, #12
    33dc:	2208      	movs	r2, #8
    33de:	4694      	mov	ip, r2
    33e0:	44bc      	add	ip, r7
    33e2:	4463      	add	r3, ip
    33e4:	2202      	movs	r2, #2
    33e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    33e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33ea:	0c1b      	lsrs	r3, r3, #16
    33ec:	b2db      	uxtb	r3, r3
    33ee:	220c      	movs	r2, #12
    33f0:	2108      	movs	r1, #8
    33f2:	468c      	mov	ip, r1
    33f4:	44bc      	add	ip, r7
    33f6:	4462      	add	r2, ip
    33f8:	0011      	movs	r1, r2
    33fa:	0018      	movs	r0, r3
    33fc:	4bb1      	ldr	r3, [pc, #708]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3400:	68bb      	ldr	r3, [r7, #8]
    3402:	8a9a      	ldrh	r2, [r3, #20]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	8ada      	ldrh	r2, [r3, #22]
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	7e1b      	ldrb	r3, [r3, #24]
    3414:	2b00      	cmp	r3, #0
    3416:	d103      	bne.n	3420 <_i2c_master_set_config+0x114>
    3418:	4bab      	ldr	r3, [pc, #684]	; (36c8 <_i2c_master_set_config+0x3bc>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d002      	beq.n	3426 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	64fb      	str	r3, [r7, #76]	; 0x4c
    3424:	e001      	b.n	342a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3426:	2300      	movs	r3, #0
    3428:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    342a:	68bb      	ldr	r3, [r7, #8]
    342c:	691b      	ldr	r3, [r3, #16]
    342e:	2b00      	cmp	r3, #0
    3430:	d004      	beq.n	343c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	691b      	ldr	r3, [r3, #16]
    3436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3438:	4313      	orrs	r3, r2
    343a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	689b      	ldr	r3, [r3, #8]
    3440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3442:	4313      	orrs	r3, r2
    3444:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	2224      	movs	r2, #36	; 0x24
    344a:	5c9b      	ldrb	r3, [r3, r2]
    344c:	2b00      	cmp	r3, #0
    344e:	d004      	beq.n	345a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3452:	2280      	movs	r2, #128	; 0x80
    3454:	05d2      	lsls	r2, r2, #23
    3456:	4313      	orrs	r3, r2
    3458:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    345e:	2b00      	cmp	r3, #0
    3460:	d004      	beq.n	346c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3468:	4313      	orrs	r3, r2
    346a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    346c:	68bb      	ldr	r3, [r7, #8]
    346e:	222c      	movs	r2, #44	; 0x2c
    3470:	5c9b      	ldrb	r3, [r3, r2]
    3472:	2b00      	cmp	r3, #0
    3474:	d105      	bne.n	3482 <_i2c_master_set_config+0x176>
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	689a      	ldr	r2, [r3, #8]
    347a:	2380      	movs	r3, #128	; 0x80
    347c:	049b      	lsls	r3, r3, #18
    347e:	429a      	cmp	r2, r3
    3480:	d104      	bne.n	348c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	0512      	lsls	r2, r2, #20
    3488:	4313      	orrs	r3, r2
    348a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    348c:	68bb      	ldr	r3, [r7, #8]
    348e:	222d      	movs	r2, #45	; 0x2d
    3490:	5c9b      	ldrb	r3, [r3, r2]
    3492:	2b00      	cmp	r3, #0
    3494:	d004      	beq.n	34a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3498:	2280      	movs	r2, #128	; 0x80
    349a:	0412      	lsls	r2, r2, #16
    349c:	4313      	orrs	r3, r2
    349e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    34a0:	68bb      	ldr	r3, [r7, #8]
    34a2:	222e      	movs	r2, #46	; 0x2e
    34a4:	5c9b      	ldrb	r3, [r3, r2]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d004      	beq.n	34b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    34aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	03d2      	lsls	r2, r2, #15
    34b0:	4313      	orrs	r3, r2
    34b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    34b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ba:	431a      	orrs	r2, r3
    34bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    34c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34c2:	2280      	movs	r2, #128	; 0x80
    34c4:	0052      	lsls	r2, r2, #1
    34c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    34c8:	2323      	movs	r3, #35	; 0x23
    34ca:	2208      	movs	r2, #8
    34cc:	4694      	mov	ip, r2
    34ce:	44bc      	add	ip, r7
    34d0:	4463      	add	r3, ip
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	3314      	adds	r3, #20
    34d6:	b2db      	uxtb	r3, r3
    34d8:	0018      	movs	r0, r3
    34da:	4b7c      	ldr	r3, [pc, #496]	; (36cc <_i2c_master_set_config+0x3c0>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	22fa      	movs	r2, #250	; 0xfa
    34e8:	0092      	lsls	r2, r2, #2
    34ea:	4353      	muls	r3, r2
    34ec:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    34ee:	68bb      	ldr	r3, [r7, #8]
    34f0:	685b      	ldr	r3, [r3, #4]
    34f2:	22fa      	movs	r2, #250	; 0xfa
    34f4:	0092      	lsls	r2, r2, #2
    34f6:	4353      	muls	r3, r2
    34f8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    34fa:	68bb      	ldr	r3, [r7, #8]
    34fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    34fe:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    3500:	4b73      	ldr	r3, [pc, #460]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3502:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3504:	4798      	blx	r3
    3506:	0005      	movs	r5, r0
    3508:	000e      	movs	r6, r1
    350a:	4b71      	ldr	r3, [pc, #452]	; (36d0 <_i2c_master_set_config+0x3c4>)
    350c:	6a38      	ldr	r0, [r7, #32]
    350e:	4798      	blx	r3
    3510:	6038      	str	r0, [r7, #0]
    3512:	6079      	str	r1, [r7, #4]
    3514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3516:	69ba      	ldr	r2, [r7, #24]
    3518:	435a      	muls	r2, r3
    351a:	4b6d      	ldr	r3, [pc, #436]	; (36d0 <_i2c_master_set_config+0x3c4>)
    351c:	0010      	movs	r0, r2
    351e:	4798      	blx	r3
    3520:	4c6c      	ldr	r4, [pc, #432]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3522:	4a6d      	ldr	r2, [pc, #436]	; (36d8 <_i2c_master_set_config+0x3cc>)
    3524:	4b6d      	ldr	r3, [pc, #436]	; (36dc <_i2c_master_set_config+0x3d0>)
    3526:	47a0      	blx	r4
    3528:	0003      	movs	r3, r0
    352a:	000c      	movs	r4, r1
    352c:	0018      	movs	r0, r3
    352e:	0021      	movs	r1, r4
    3530:	4c6b      	ldr	r4, [pc, #428]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3532:	2200      	movs	r2, #0
    3534:	4b6b      	ldr	r3, [pc, #428]	; (36e4 <_i2c_master_set_config+0x3d8>)
    3536:	47a0      	blx	r4
    3538:	0003      	movs	r3, r0
    353a:	000c      	movs	r4, r1
    353c:	001a      	movs	r2, r3
    353e:	0023      	movs	r3, r4
    3540:	4c64      	ldr	r4, [pc, #400]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3542:	6838      	ldr	r0, [r7, #0]
    3544:	6879      	ldr	r1, [r7, #4]
    3546:	47a0      	blx	r4
    3548:	0003      	movs	r3, r0
    354a:	000c      	movs	r4, r1
    354c:	001a      	movs	r2, r3
    354e:	0023      	movs	r3, r4
    3550:	4c65      	ldr	r4, [pc, #404]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3552:	0028      	movs	r0, r5
    3554:	0031      	movs	r1, r6
    3556:	47a0      	blx	r4
    3558:	0003      	movs	r3, r0
    355a:	000c      	movs	r4, r1
    355c:	001d      	movs	r5, r3
    355e:	0026      	movs	r6, r4
    3560:	6a3b      	ldr	r3, [r7, #32]
    3562:	005a      	lsls	r2, r3, #1
    3564:	4b5a      	ldr	r3, [pc, #360]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3566:	0010      	movs	r0, r2
    3568:	4798      	blx	r3
    356a:	0002      	movs	r2, r0
    356c:	000b      	movs	r3, r1
    356e:	4c5c      	ldr	r4, [pc, #368]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3570:	0028      	movs	r0, r5
    3572:	0031      	movs	r1, r6
    3574:	47a0      	blx	r4
    3576:	0003      	movs	r3, r0
    3578:	000c      	movs	r4, r1
    357a:	0018      	movs	r0, r3
    357c:	0021      	movs	r1, r4
    357e:	4c5a      	ldr	r4, [pc, #360]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3580:	2200      	movs	r2, #0
    3582:	4b5a      	ldr	r3, [pc, #360]	; (36ec <_i2c_master_set_config+0x3e0>)
    3584:	47a0      	blx	r4
    3586:	0003      	movs	r3, r0
    3588:	000c      	movs	r4, r1
    358a:	001d      	movs	r5, r3
    358c:	0026      	movs	r6, r4
    358e:	6a3b      	ldr	r3, [r7, #32]
    3590:	005a      	lsls	r2, r3, #1
    3592:	4b4f      	ldr	r3, [pc, #316]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3594:	0010      	movs	r0, r2
    3596:	4798      	blx	r3
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	4c54      	ldr	r4, [pc, #336]	; (36f0 <_i2c_master_set_config+0x3e4>)
    359e:	0028      	movs	r0, r5
    35a0:	0031      	movs	r1, r6
    35a2:	47a0      	blx	r4
    35a4:	0003      	movs	r3, r0
    35a6:	000c      	movs	r4, r1
    35a8:	0019      	movs	r1, r3
    35aa:	0022      	movs	r2, r4
    35ac:	4b51      	ldr	r3, [pc, #324]	; (36f4 <_i2c_master_set_config+0x3e8>)
    35ae:	0008      	movs	r0, r1
    35b0:	0011      	movs	r1, r2
    35b2:	4798      	blx	r3
    35b4:	0003      	movs	r3, r0
    35b6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	689a      	ldr	r2, [r3, #8]
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	049b      	lsls	r3, r3, #18
    35c0:	429a      	cmp	r2, r3
    35c2:	d145      	bne.n	3650 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    35c4:	4b42      	ldr	r3, [pc, #264]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    35c8:	4798      	blx	r3
    35ca:	4c45      	ldr	r4, [pc, #276]	; (36e0 <_i2c_master_set_config+0x3d4>)
    35cc:	0002      	movs	r2, r0
    35ce:	000b      	movs	r3, r1
    35d0:	47a0      	blx	r4
    35d2:	0003      	movs	r3, r0
    35d4:	000c      	movs	r4, r1
    35d6:	001d      	movs	r5, r3
    35d8:	0026      	movs	r6, r4
    35da:	4b3d      	ldr	r3, [pc, #244]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35dc:	69f8      	ldr	r0, [r7, #28]
    35de:	4798      	blx	r3
    35e0:	4c3c      	ldr	r4, [pc, #240]	; (36d4 <_i2c_master_set_config+0x3c8>)
    35e2:	2200      	movs	r2, #0
    35e4:	4b44      	ldr	r3, [pc, #272]	; (36f8 <_i2c_master_set_config+0x3ec>)
    35e6:	47a0      	blx	r4
    35e8:	0003      	movs	r3, r0
    35ea:	000c      	movs	r4, r1
    35ec:	001a      	movs	r2, r3
    35ee:	0023      	movs	r3, r4
    35f0:	4c3f      	ldr	r4, [pc, #252]	; (36f0 <_i2c_master_set_config+0x3e4>)
    35f2:	0028      	movs	r0, r5
    35f4:	0031      	movs	r1, r6
    35f6:	47a0      	blx	r4
    35f8:	0003      	movs	r3, r0
    35fa:	000c      	movs	r4, r1
    35fc:	0018      	movs	r0, r3
    35fe:	0021      	movs	r1, r4
    3600:	4c39      	ldr	r4, [pc, #228]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3602:	2200      	movs	r2, #0
    3604:	4b39      	ldr	r3, [pc, #228]	; (36ec <_i2c_master_set_config+0x3e0>)
    3606:	47a0      	blx	r4
    3608:	0003      	movs	r3, r0
    360a:	000c      	movs	r4, r1
    360c:	0019      	movs	r1, r3
    360e:	0022      	movs	r2, r4
    3610:	4b38      	ldr	r3, [pc, #224]	; (36f4 <_i2c_master_set_config+0x3e8>)
    3612:	0008      	movs	r0, r1
    3614:	0011      	movs	r1, r2
    3616:	4798      	blx	r3
    3618:	0003      	movs	r3, r0
    361a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    361e:	2b00      	cmp	r3, #0
    3620:	d009      	beq.n	3636 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3622:	4b36      	ldr	r3, [pc, #216]	; (36fc <_i2c_master_set_config+0x3f0>)
    3624:	69f9      	ldr	r1, [r7, #28]
    3626:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
    362c:	1e9a      	subs	r2, r3, #2
    362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3630:	1ad3      	subs	r3, r2, r3
    3632:	64bb      	str	r3, [r7, #72]	; 0x48
    3634:	e00c      	b.n	3650 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3636:	69fb      	ldr	r3, [r7, #28]
    3638:	005a      	lsls	r2, r3, #1
    363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363c:	18d3      	adds	r3, r2, r3
    363e:	1e5a      	subs	r2, r3, #1
    3640:	69fb      	ldr	r3, [r7, #28]
    3642:	0059      	lsls	r1, r3, #1
    3644:	4b2d      	ldr	r3, [pc, #180]	; (36fc <_i2c_master_set_config+0x3f0>)
    3646:	0010      	movs	r0, r2
    3648:	4798      	blx	r3
    364a:	0003      	movs	r3, r0
    364c:	3b01      	subs	r3, #1
    364e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3652:	2bff      	cmp	r3, #255	; 0xff
    3654:	dc08      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3658:	2b00      	cmp	r3, #0
    365a:	db05      	blt.n	3668 <_i2c_master_set_config+0x35c>
    365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365e:	2bff      	cmp	r3, #255	; 0xff
    3660:	dc02      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3664:	2b00      	cmp	r3, #0
    3666:	da06      	bge.n	3676 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3668:	233b      	movs	r3, #59	; 0x3b
    366a:	2208      	movs	r2, #8
    366c:	4694      	mov	ip, r2
    366e:	44bc      	add	ip, r7
    3670:	4463      	add	r3, ip
    3672:	2240      	movs	r2, #64	; 0x40
    3674:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3676:	233b      	movs	r3, #59	; 0x3b
    3678:	2208      	movs	r2, #8
    367a:	4694      	mov	ip, r2
    367c:	44bc      	add	ip, r7
    367e:	4463      	add	r3, ip
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b40      	cmp	r3, #64	; 0x40
    3684:	d00e      	beq.n	36a4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3688:	22ff      	movs	r2, #255	; 0xff
    368a:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    368e:	041b      	lsls	r3, r3, #16
    3690:	0019      	movs	r1, r3
    3692:	23ff      	movs	r3, #255	; 0xff
    3694:	041b      	lsls	r3, r3, #16
    3696:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3698:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    369c:	0612      	lsls	r2, r2, #24
    369e:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    36a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36a2:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    36a4:	233b      	movs	r3, #59	; 0x3b
    36a6:	2208      	movs	r2, #8
    36a8:	4694      	mov	ip, r2
    36aa:	44bc      	add	ip, r7
    36ac:	4463      	add	r3, ip
    36ae:	781b      	ldrb	r3, [r3, #0]
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b015      	add	sp, #84	; 0x54
    36b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b8:	00007039 	.word	0x00007039
    36bc:	0000327d 	.word	0x0000327d
    36c0:	00006e7d 	.word	0x00006e7d
    36c4:	00007f11 	.word	0x00007f11
    36c8:	000032a5 	.word	0x000032a5
    36cc:	00007d49 	.word	0x00007d49
    36d0:	00016e25 	.word	0x00016e25
    36d4:	0001620d 	.word	0x0001620d
    36d8:	e826d695 	.word	0xe826d695
    36dc:	3e112e0b 	.word	0x3e112e0b
    36e0:	00015385 	.word	0x00015385
    36e4:	40240000 	.word	0x40240000
    36e8:	0001670d 	.word	0x0001670d
    36ec:	3ff00000 	.word	0x3ff00000
    36f0:	000159a5 	.word	0x000159a5
    36f4:	00016d39 	.word	0x00016d39
    36f8:	40080000 	.word	0x40080000
    36fc:	00014101 	.word	0x00014101

00003700 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3700:	b590      	push	{r4, r7, lr}
    3702:	b08b      	sub	sp, #44	; 0x2c
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	0018      	movs	r0, r3
    371e:	4b3b      	ldr	r3, [pc, #236]	; (380c <i2c_master_init+0x10c>)
    3720:	4798      	blx	r3
    3722:	0003      	movs	r3, r0
    3724:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3726:	6a3b      	ldr	r3, [r7, #32]
    3728:	3302      	adds	r3, #2
    372a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	3314      	adds	r3, #20
    3730:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3732:	2201      	movs	r2, #1
    3734:	69fb      	ldr	r3, [r7, #28]
    3736:	409a      	lsls	r2, r3
    3738:	0013      	movs	r3, r2
    373a:	0019      	movs	r1, r3
    373c:	2002      	movs	r0, #2
    373e:	4b34      	ldr	r3, [pc, #208]	; (3810 <i2c_master_init+0x110>)
    3740:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3742:	2314      	movs	r3, #20
    3744:	18fb      	adds	r3, r7, r3
    3746:	0018      	movs	r0, r3
    3748:	4b32      	ldr	r3, [pc, #200]	; (3814 <i2c_master_init+0x114>)
    374a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	7b1a      	ldrb	r2, [r3, #12]
    3750:	2314      	movs	r3, #20
    3752:	18fb      	adds	r3, r7, r3
    3754:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3756:	69bb      	ldr	r3, [r7, #24]
    3758:	b2db      	uxtb	r3, r3
    375a:	2214      	movs	r2, #20
    375c:	18ba      	adds	r2, r7, r2
    375e:	0011      	movs	r1, r2
    3760:	0018      	movs	r0, r3
    3762:	4b2d      	ldr	r3, [pc, #180]	; (3818 <i2c_master_init+0x118>)
    3764:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3766:	69bb      	ldr	r3, [r7, #24]
    3768:	b2db      	uxtb	r3, r3
    376a:	0018      	movs	r0, r3
    376c:	4b2b      	ldr	r3, [pc, #172]	; (381c <i2c_master_init+0x11c>)
    376e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	7b1b      	ldrb	r3, [r3, #12]
    3774:	2100      	movs	r1, #0
    3776:	0018      	movs	r0, r3
    3778:	4b29      	ldr	r3, [pc, #164]	; (3820 <i2c_master_init+0x120>)
    377a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	2202      	movs	r2, #2
    3782:	4013      	ands	r3, r2
    3784:	d001      	beq.n	378a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    3786:	231c      	movs	r3, #28
    3788:	e03b      	b.n	3802 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	2201      	movs	r2, #1
    3790:	4013      	ands	r3, r2
    3792:	d001      	beq.n	3798 <i2c_master_init+0x98>
		return STATUS_BUSY;
    3794:	2305      	movs	r3, #5
    3796:	e034      	b.n	3802 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	2217      	movs	r2, #23
    379e:	18bc      	adds	r4, r7, r2
    37a0:	0018      	movs	r0, r3
    37a2:	4b1a      	ldr	r3, [pc, #104]	; (380c <i2c_master_init+0x10c>)
    37a4:	4798      	blx	r3
    37a6:	0003      	movs	r3, r0
    37a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    37aa:	4a1e      	ldr	r2, [pc, #120]	; (3824 <i2c_master_init+0x124>)
    37ac:	2317      	movs	r3, #23
    37ae:	18fb      	adds	r3, r7, r3
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	0011      	movs	r1, r2
    37b4:	0018      	movs	r0, r3
    37b6:	4b1c      	ldr	r3, [pc, #112]	; (3828 <i2c_master_init+0x128>)
    37b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    37ba:	2317      	movs	r3, #23
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781a      	ldrb	r2, [r3, #0]
    37c0:	4b1a      	ldr	r3, [pc, #104]	; (382c <i2c_master_init+0x12c>)
    37c2:	0092      	lsls	r2, r2, #2
    37c4:	68f9      	ldr	r1, [r7, #12]
    37c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	2200      	movs	r2, #0
    37cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	2200      	movs	r2, #0
    37d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	2200      	movs	r2, #0
    37d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	2200      	movs	r2, #0
    37de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	2225      	movs	r2, #37	; 0x25
    37e4:	2100      	movs	r1, #0
    37e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	2200      	movs	r2, #0
    37ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37f0:	2214      	movs	r2, #20
    37f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	0011      	movs	r1, r2
    37fa:	0018      	movs	r0, r3
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <i2c_master_init+0x130>)
    37fe:	4798      	blx	r3
    3800:	0003      	movs	r3, r0
}
    3802:	0018      	movs	r0, r3
    3804:	46bd      	mov	sp, r7
    3806:	b00b      	add	sp, #44	; 0x2c
    3808:	bd90      	pop	{r4, r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00007039 	.word	0x00007039
    3810:	00003221 	.word	0x00003221
    3814:	00003209 	.word	0x00003209
    3818:	00007c25 	.word	0x00007c25
    381c:	00007c69 	.word	0x00007c69
    3820:	00006df1 	.word	0x00006df1
    3824:	00004021 	.word	0x00004021
    3828:	0000709d 	.word	0x0000709d
    382c:	20000468 	.word	0x20000468
    3830:	0000330d 	.word	0x0000330d

00003834 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	7e1b      	ldrb	r3, [r3, #24]
    3846:	b2db      	uxtb	r3, r3
    3848:	001a      	movs	r2, r3
    384a:	2302      	movs	r3, #2
    384c:	4013      	ands	r3, r2
    384e:	d00b      	beq.n	3868 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	2202      	movs	r2, #2
    3854:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	8b5b      	ldrh	r3, [r3, #26]
    385a:	b29b      	uxth	r3, r3
    385c:	001a      	movs	r2, r3
    385e:	2302      	movs	r3, #2
    3860:	4013      	ands	r3, r2
    3862:	d011      	beq.n	3888 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3864:	2341      	movs	r3, #65	; 0x41
    3866:	e010      	b.n	388a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	8b5b      	ldrh	r3, [r3, #26]
    386c:	b29b      	uxth	r3, r3
    386e:	001a      	movs	r2, r3
    3870:	2304      	movs	r3, #4
    3872:	4013      	ands	r3, r2
    3874:	d008      	beq.n	3888 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	685b      	ldr	r3, [r3, #4]
    387a:	22c0      	movs	r2, #192	; 0xc0
    387c:	0292      	lsls	r2, r2, #10
    387e:	431a      	orrs	r2, r3
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3884:	2318      	movs	r3, #24
    3886:	e000      	b.n	388a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3888:	2300      	movs	r3, #0
}
    388a:	0018      	movs	r0, r3
    388c:	46bd      	mov	sp, r7
    388e:	b004      	add	sp, #16
    3890:	bd80      	pop	{r7, pc}

00003892 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3892:	b580      	push	{r7, lr}
    3894:	b084      	sub	sp, #16
    3896:	af00      	add	r7, sp, #0
    3898:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    38a0:	230e      	movs	r3, #14
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	2200      	movs	r2, #0
    38a6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38a8:	e00f      	b.n	38ca <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    38aa:	230e      	movs	r3, #14
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	220e      	movs	r2, #14
    38b0:	18ba      	adds	r2, r7, r2
    38b2:	8812      	ldrh	r2, [r2, #0]
    38b4:	3201      	adds	r2, #1
    38b6:	801a      	strh	r2, [r3, #0]
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	891b      	ldrh	r3, [r3, #8]
    38bc:	220e      	movs	r2, #14
    38be:	18ba      	adds	r2, r7, r2
    38c0:	8812      	ldrh	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    38c6:	2312      	movs	r3, #18
    38c8:	e00e      	b.n	38e8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38ca:	68bb      	ldr	r3, [r7, #8]
    38cc:	7e1b      	ldrb	r3, [r3, #24]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	001a      	movs	r2, r3
    38d2:	2301      	movs	r3, #1
    38d4:	4013      	ands	r3, r2
    38d6:	d106      	bne.n	38e6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    38d8:	68bb      	ldr	r3, [r7, #8]
    38da:	7e1b      	ldrb	r3, [r3, #24]
    38dc:	b2db      	uxtb	r3, r3
    38de:	001a      	movs	r2, r3
    38e0:	2302      	movs	r3, #2
    38e2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38e4:	d0e1      	beq.n	38aa <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    38e6:	2300      	movs	r3, #0
}
    38e8:	0018      	movs	r0, r3
    38ea:	46bd      	mov	sp, r7
    38ec:	b004      	add	sp, #16
    38ee:	bd80      	pop	{r7, pc}

000038f0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    38f0:	b590      	push	{r4, r7, lr}
    38f2:	b085      	sub	sp, #20
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	000a      	movs	r2, r1
    38fa:	1cfb      	adds	r3, r7, #3
    38fc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	681b      	ldr	r3, [r3, #0]
    3902:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	2280      	movs	r2, #128	; 0x80
    390a:	02d2      	lsls	r2, r2, #11
    390c:	431a      	orrs	r2, r3
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3912:	1cfb      	adds	r3, r7, #3
    3914:	781a      	ldrb	r2, [r3, #0]
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    391a:	230b      	movs	r3, #11
    391c:	18fc      	adds	r4, r7, r3
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	0018      	movs	r0, r3
    3922:	4b07      	ldr	r3, [pc, #28]	; (3940 <_i2c_master_send_hs_master_code+0x50>)
    3924:	4798      	blx	r3
    3926:	0003      	movs	r3, r0
    3928:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	2201      	movs	r2, #1
    392e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    3930:	230b      	movs	r3, #11
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
}
    3936:	0018      	movs	r0, r3
    3938:	46bd      	mov	sp, r7
    393a:	b005      	add	sp, #20
    393c:	bd90      	pop	{r4, r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	00003893 	.word	0x00003893

00003944 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3944:	b590      	push	{r4, r7, lr}
    3946:	b087      	sub	sp, #28
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3954:	2314      	movs	r3, #20
    3956:	18fb      	adds	r3, r7, r3
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	8852      	ldrh	r2, [r2, #2]
    395c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    395e:	2312      	movs	r3, #18
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	011b      	lsls	r3, r3, #4
    396c:	0fdb      	lsrs	r3, r3, #31
    396e:	b2db      	uxtb	r3, r3
    3970:	001a      	movs	r2, r3
    3972:	230b      	movs	r3, #11
    3974:	18fb      	adds	r3, r7, r3
    3976:	1e51      	subs	r1, r2, #1
    3978:	418a      	sbcs	r2, r1
    397a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	7a5b      	ldrb	r3, [r3, #9]
    3980:	2b00      	cmp	r3, #0
    3982:	d006      	beq.n	3992 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7a9a      	ldrb	r2, [r3, #10]
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	0011      	movs	r1, r2
    398c:	0018      	movs	r0, r3
    398e:	4b85      	ldr	r3, [pc, #532]	; (3ba4 <_i2c_master_read_packet+0x260>)
    3990:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	4a84      	ldr	r2, [pc, #528]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3998:	401a      	ands	r2, r3
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	7a1b      	ldrb	r3, [r3, #8]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d042      	beq.n	3a2c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	881b      	ldrh	r3, [r3, #0]
    39aa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	7a5b      	ldrb	r3, [r3, #9]
    39b0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    39b2:	4313      	orrs	r3, r2
    39b4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39b6:	2380      	movs	r3, #128	; 0x80
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    39c0:	2317      	movs	r3, #23
    39c2:	18fc      	adds	r4, r7, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	0018      	movs	r0, r3
    39c8:	4b78      	ldr	r3, [pc, #480]	; (3bac <_i2c_master_read_packet+0x268>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	4a74      	ldr	r2, [pc, #464]	; (3ba8 <_i2c_master_read_packet+0x264>)
    39d6:	401a      	ands	r2, r3
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    39dc:	2317      	movs	r3, #23
    39de:	18fb      	adds	r3, r7, r3
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d107      	bne.n	39f6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    39e6:	2317      	movs	r3, #23
    39e8:	18fc      	adds	r4, r7, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0018      	movs	r0, r3
    39ee:	4b70      	ldr	r3, [pc, #448]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    39f0:	4798      	blx	r3
    39f2:	0003      	movs	r3, r0
    39f4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    39f6:	2317      	movs	r3, #23
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d111      	bne.n	3a24 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a00:	683b      	ldr	r3, [r7, #0]
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	b29b      	uxth	r3, r3
    3a08:	2278      	movs	r2, #120	; 0x78
    3a0a:	4313      	orrs	r3, r2
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	7a5b      	ldrb	r3, [r3, #9]
    3a14:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a16:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a18:	2201      	movs	r2, #1
    3a1a:	4313      	orrs	r3, r2
    3a1c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	625a      	str	r2, [r3, #36]	; 0x24
    3a22:	e00f      	b.n	3a44 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    3a24:	2317      	movs	r3, #23
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	e0b6      	b.n	3b9a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	881b      	ldrh	r3, [r3, #0]
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	2201      	movs	r2, #1
    3a34:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	7a5b      	ldrb	r3, [r3, #9]
    3a3a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a3c:	4313      	orrs	r3, r2
    3a3e:	001a      	movs	r2, r3
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a44:	2317      	movs	r3, #23
    3a46:	18fc      	adds	r4, r7, r3
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	0018      	movs	r0, r3
    3a4c:	4b57      	ldr	r3, [pc, #348]	; (3bac <_i2c_master_read_packet+0x268>)
    3a4e:	4798      	blx	r3
    3a50:	0003      	movs	r3, r0
    3a52:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3a54:	230b      	movs	r3, #11
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d00b      	beq.n	3a76 <_i2c_master_read_packet+0x132>
    3a5e:	683b      	ldr	r3, [r7, #0]
    3a60:	885b      	ldrh	r3, [r3, #2]
    3a62:	2b01      	cmp	r3, #1
    3a64:	d107      	bne.n	3a76 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2280      	movs	r2, #128	; 0x80
    3a6c:	02d2      	lsls	r2, r2, #11
    3a6e:	431a      	orrs	r2, r3
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	605a      	str	r2, [r3, #4]
    3a74:	e005      	b.n	3a82 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	685b      	ldr	r3, [r3, #4]
    3a7a:	4a4b      	ldr	r2, [pc, #300]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3a7c:	401a      	ands	r2, r3
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a82:	2317      	movs	r3, #23
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d107      	bne.n	3a9c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3a8c:	2317      	movs	r3, #23
    3a8e:	18fc      	adds	r4, r7, r3
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	0018      	movs	r0, r3
    3a94:	4b46      	ldr	r3, [pc, #280]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    3a96:	4798      	blx	r3
    3a98:	0003      	movs	r3, r0
    3a9a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a9c:	2317      	movs	r3, #23
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d000      	beq.n	3aa8 <_i2c_master_read_packet+0x164>
    3aa6:	e075      	b.n	3b94 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    3aa8:	e04b      	b.n	3b42 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	8b5b      	ldrh	r3, [r3, #26]
    3aae:	b29b      	uxth	r3, r3
    3ab0:	001a      	movs	r2, r3
    3ab2:	2320      	movs	r3, #32
    3ab4:	4013      	ands	r3, r2
    3ab6:	d101      	bne.n	3abc <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    3ab8:	2341      	movs	r3, #65	; 0x41
    3aba:	e06e      	b.n	3b9a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	7adb      	ldrb	r3, [r3, #11]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d01e      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
    3ac4:	230b      	movs	r3, #11
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d004      	beq.n	3ade <_i2c_master_read_packet+0x19a>
    3ad4:	2314      	movs	r3, #20
    3ad6:	18fb      	adds	r3, r7, r3
    3ad8:	881b      	ldrh	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d009      	beq.n	3af2 <_i2c_master_read_packet+0x1ae>
    3ade:	230b      	movs	r3, #11
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	781b      	ldrb	r3, [r3, #0]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d00c      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3ae8:	2314      	movs	r3, #20
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	881b      	ldrh	r3, [r3, #0]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d107      	bne.n	3b02 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	2280      	movs	r2, #128	; 0x80
    3af8:	02d2      	lsls	r2, r2, #11
    3afa:	431a      	orrs	r2, r3
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	605a      	str	r2, [r3, #4]
    3b00:	e01a      	b.n	3b38 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	0018      	movs	r0, r3
    3b06:	4b2b      	ldr	r3, [pc, #172]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b08:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	685a      	ldr	r2, [r3, #4]
    3b0e:	2312      	movs	r3, #18
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	2112      	movs	r1, #18
    3b16:	1879      	adds	r1, r7, r1
    3b18:	1c58      	adds	r0, r3, #1
    3b1a:	8008      	strh	r0, [r1, #0]
    3b1c:	18d3      	adds	r3, r2, r3
    3b1e:	68fa      	ldr	r2, [r7, #12]
    3b20:	2128      	movs	r1, #40	; 0x28
    3b22:	5c52      	ldrb	r2, [r2, r1]
    3b24:	b2d2      	uxtb	r2, r2
    3b26:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    3b28:	2317      	movs	r3, #23
    3b2a:	18fc      	adds	r4, r7, r3
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b1e      	ldr	r3, [pc, #120]	; (3bac <_i2c_master_read_packet+0x268>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3b38:	2317      	movs	r3, #23
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d109      	bne.n	3b56 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    3b42:	2314      	movs	r3, #20
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	881b      	ldrh	r3, [r3, #0]
    3b48:	2214      	movs	r2, #20
    3b4a:	18ba      	adds	r2, r7, r2
    3b4c:	1e59      	subs	r1, r3, #1
    3b4e:	8011      	strh	r1, [r2, #0]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1aa      	bne.n	3aaa <_i2c_master_read_packet+0x166>
    3b54:	e000      	b.n	3b58 <_i2c_master_read_packet+0x214>
				break;
    3b56:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	7a9b      	ldrb	r3, [r3, #10]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d00a      	beq.n	3b76 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	0018      	movs	r0, r3
    3b64:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b66:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	22c0      	movs	r2, #192	; 0xc0
    3b6e:	0292      	lsls	r2, r2, #10
    3b70:	431a      	orrs	r2, r3
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	0018      	movs	r0, r3
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b7c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3b7e:	683b      	ldr	r3, [r7, #0]
    3b80:	685a      	ldr	r2, [r3, #4]
    3b82:	2312      	movs	r3, #18
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	881b      	ldrh	r3, [r3, #0]
    3b88:	18d3      	adds	r3, r2, r3
    3b8a:	68fa      	ldr	r2, [r7, #12]
    3b8c:	2128      	movs	r1, #40	; 0x28
    3b8e:	5c52      	ldrb	r2, [r2, r1]
    3b90:	b2d2      	uxtb	r2, r2
    3b92:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3b94:	2317      	movs	r3, #23
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781b      	ldrb	r3, [r3, #0]
}
    3b9a:	0018      	movs	r0, r3
    3b9c:	46bd      	mov	sp, r7
    3b9e:	b007      	add	sp, #28
    3ba0:	bd90      	pop	{r4, r7, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	000038f1 	.word	0x000038f1
    3ba8:	fffbffff 	.word	0xfffbffff
    3bac:	00003893 	.word	0x00003893
    3bb0:	00003835 	.word	0x00003835
    3bb4:	000032e9 	.word	0x000032e9

00003bb8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	8b9b      	ldrh	r3, [r3, #28]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d001      	beq.n	3bd0 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3bcc:	2305      	movs	r3, #5
    3bce:	e00c      	b.n	3bea <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	2201      	movs	r2, #1
    3bd4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	2201      	movs	r2, #1
    3bda:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3bdc:	683a      	ldr	r2, [r7, #0]
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	0011      	movs	r1, r2
    3be2:	0018      	movs	r0, r3
    3be4:	4b03      	ldr	r3, [pc, #12]	; (3bf4 <i2c_master_read_packet_wait+0x3c>)
    3be6:	4798      	blx	r3
    3be8:	0003      	movs	r3, r0
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b002      	add	sp, #8
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	00003945 	.word	0x00003945

00003bf8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bf8:	b590      	push	{r4, r7, lr}
    3bfa:	b087      	sub	sp, #28
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3c08:	2314      	movs	r3, #20
    3c0a:	18fb      	adds	r3, r7, r3
    3c0c:	683a      	ldr	r2, [r7, #0]
    3c0e:	8852      	ldrh	r2, [r2, #2]
    3c10:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	0018      	movs	r0, r3
    3c16:	4b51      	ldr	r3, [pc, #324]	; (3d5c <_i2c_master_write_packet+0x164>)
    3c18:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3c1a:	683b      	ldr	r3, [r7, #0]
    3c1c:	7a5b      	ldrb	r3, [r3, #9]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d006      	beq.n	3c30 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	7a9a      	ldrb	r2, [r3, #10]
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	0011      	movs	r1, r2
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b4c      	ldr	r3, [pc, #304]	; (3d60 <_i2c_master_write_packet+0x168>)
    3c2e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	4a4b      	ldr	r2, [pc, #300]	; (3d64 <_i2c_master_write_packet+0x16c>)
    3c36:	401a      	ands	r2, r3
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3c3c:	683b      	ldr	r3, [r7, #0]
    3c3e:	7a1b      	ldrb	r3, [r3, #8]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d00d      	beq.n	3c60 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	881b      	ldrh	r3, [r3, #0]
    3c48:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c4a:	683b      	ldr	r3, [r7, #0]
    3c4c:	7a5b      	ldrb	r3, [r3, #9]
    3c4e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c50:	4313      	orrs	r3, r2
    3c52:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c54:	2380      	movs	r3, #128	; 0x80
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c5a:	68fb      	ldr	r3, [r7, #12]
    3c5c:	625a      	str	r2, [r3, #36]	; 0x24
    3c5e:	e009      	b.n	3c74 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c60:	683b      	ldr	r3, [r7, #0]
    3c62:	881b      	ldrh	r3, [r3, #0]
    3c64:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	7a5b      	ldrb	r3, [r3, #9]
    3c6a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c6c:	4313      	orrs	r3, r2
    3c6e:	001a      	movs	r2, r3
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3c74:	2317      	movs	r3, #23
    3c76:	18fc      	adds	r4, r7, r3
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b3a      	ldr	r3, [pc, #232]	; (3d68 <_i2c_master_write_packet+0x170>)
    3c7e:	4798      	blx	r3
    3c80:	0003      	movs	r3, r0
    3c82:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3c84:	2317      	movs	r3, #23
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d107      	bne.n	3c9e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3c8e:	2317      	movs	r3, #23
    3c90:	18fc      	adds	r4, r7, r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	0018      	movs	r0, r3
    3c96:	4b35      	ldr	r3, [pc, #212]	; (3d6c <_i2c_master_write_packet+0x174>)
    3c98:	4798      	blx	r3
    3c9a:	0003      	movs	r3, r0
    3c9c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3c9e:	2317      	movs	r3, #23
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d152      	bne.n	3d4e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3ca8:	2312      	movs	r3, #18
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3cb0:	e033      	b.n	3d1a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	8b5b      	ldrh	r3, [r3, #26]
    3cb6:	b29b      	uxth	r3, r3
    3cb8:	001a      	movs	r2, r3
    3cba:	2320      	movs	r3, #32
    3cbc:	4013      	ands	r3, r2
    3cbe:	d101      	bne.n	3cc4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3cc0:	2341      	movs	r3, #65	; 0x41
    3cc2:	e047      	b.n	3d54 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b24      	ldr	r3, [pc, #144]	; (3d5c <_i2c_master_write_packet+0x164>)
    3cca:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	685a      	ldr	r2, [r3, #4]
    3cd0:	2312      	movs	r3, #18
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	881b      	ldrh	r3, [r3, #0]
    3cd6:	2112      	movs	r1, #18
    3cd8:	1879      	adds	r1, r7, r1
    3cda:	1c58      	adds	r0, r3, #1
    3cdc:	8008      	strh	r0, [r1, #0]
    3cde:	18d3      	adds	r3, r2, r3
    3ce0:	7819      	ldrb	r1, [r3, #0]
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	2228      	movs	r2, #40	; 0x28
    3ce6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3ce8:	2317      	movs	r3, #23
    3cea:	18fc      	adds	r4, r7, r3
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b1d      	ldr	r3, [pc, #116]	; (3d68 <_i2c_master_write_packet+0x170>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3cf8:	2317      	movs	r3, #23
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d115      	bne.n	3d2e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	8b5b      	ldrh	r3, [r3, #26]
    3d06:	b29b      	uxth	r3, r3
    3d08:	001a      	movs	r2, r3
    3d0a:	2304      	movs	r3, #4
    3d0c:	4013      	ands	r3, r2
    3d0e:	d004      	beq.n	3d1a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3d10:	2317      	movs	r3, #23
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	221e      	movs	r2, #30
    3d16:	701a      	strb	r2, [r3, #0]
				break;
    3d18:	e00a      	b.n	3d30 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3d1a:	2314      	movs	r3, #20
    3d1c:	18fb      	adds	r3, r7, r3
    3d1e:	881b      	ldrh	r3, [r3, #0]
    3d20:	2214      	movs	r2, #20
    3d22:	18ba      	adds	r2, r7, r2
    3d24:	1e59      	subs	r1, r3, #1
    3d26:	8011      	strh	r1, [r2, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d1c2      	bne.n	3cb2 <_i2c_master_write_packet+0xba>
    3d2c:	e000      	b.n	3d30 <_i2c_master_write_packet+0x138>
				break;
    3d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	7a9b      	ldrb	r3, [r3, #10]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d00a      	beq.n	3d4e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <_i2c_master_write_packet+0x164>)
    3d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	685b      	ldr	r3, [r3, #4]
    3d44:	22c0      	movs	r2, #192	; 0xc0
    3d46:	0292      	lsls	r2, r2, #10
    3d48:	431a      	orrs	r2, r3
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3d4e:	2317      	movs	r3, #23
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	781b      	ldrb	r3, [r3, #0]
}
    3d54:	0018      	movs	r0, r3
    3d56:	46bd      	mov	sp, r7
    3d58:	b007      	add	sp, #28
    3d5a:	bd90      	pop	{r4, r7, pc}
    3d5c:	000032e9 	.word	0x000032e9
    3d60:	000038f1 	.word	0x000038f1
    3d64:	fffbffff 	.word	0xfffbffff
    3d68:	00003893 	.word	0x00003893
    3d6c:	00003835 	.word	0x00003835

00003d70 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    3d78:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	8b9b      	ldrh	r3, [r3, #28]
    3d7e:	b29b      	uxth	r3, r3
    3d80:	2b00      	cmp	r3, #0
    3d82:	d001      	beq.n	3d88 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3d84:	2305      	movs	r3, #5
    3d86:	e00c      	b.n	3da2 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2201      	movs	r2, #1
    3d8c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2201      	movs	r2, #1
    3d92:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0011      	movs	r1, r2
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b03      	ldr	r3, [pc, #12]	; (3dac <i2c_master_write_packet_wait+0x3c>)
    3d9e:	4798      	blx	r3
    3da0:	0003      	movs	r3, r0
}
    3da2:	0018      	movs	r0, r3
    3da4:	46bd      	mov	sp, r7
    3da6:	b002      	add	sp, #8
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003bf9 	.word	0x00003bf9

00003db0 <i2c_master_is_syncing>:
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	69db      	ldr	r3, [r3, #28]
    3dc2:	2207      	movs	r2, #7
    3dc4:	4013      	ands	r3, r2
    3dc6:	1e5a      	subs	r2, r3, #1
    3dc8:	4193      	sbcs	r3, r2
    3dca:	b2db      	uxtb	r3, r3
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b004      	add	sp, #16
    3dd2:	bd80      	pop	{r7, pc}

00003dd4 <_i2c_master_wait_for_sync>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3ddc:	46c0      	nop			; (mov r8, r8)
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	0018      	movs	r0, r3
    3de2:	4b04      	ldr	r3, [pc, #16]	; (3df4 <_i2c_master_wait_for_sync+0x20>)
    3de4:	4798      	blx	r3
    3de6:	1e03      	subs	r3, r0, #0
    3de8:	d1f9      	bne.n	3dde <_i2c_master_wait_for_sync+0xa>
}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46bd      	mov	sp, r7
    3dee:	b002      	add	sp, #8
    3df0:	bd80      	pop	{r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00003db1 	.word	0x00003db1

00003df8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b084      	sub	sp, #16
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	011b      	lsls	r3, r3, #4
    3e0c:	0fdb      	lsrs	r3, r3, #31
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	001a      	movs	r2, r3
    3e12:	230b      	movs	r3, #11
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	1e51      	subs	r1, r2, #1
    3e18:	418a      	sbcs	r2, r1
    3e1a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	8b52      	ldrh	r2, [r2, #26]
    3e24:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	8b9b      	ldrh	r3, [r3, #28]
    3e2a:	b29a      	uxth	r2, r3
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2108      	movs	r1, #8
    3e32:	1879      	adds	r1, r7, r1
    3e34:	8809      	ldrh	r1, [r1, #0]
    3e36:	1a8a      	subs	r2, r1, r2
    3e38:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	8b9b      	ldrh	r3, [r3, #28]
    3e3e:	b29b      	uxth	r3, r3
    3e40:	3b01      	subs	r3, #1
    3e42:	b29a      	uxth	r2, r3
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3e48:	230b      	movs	r3, #11
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d010      	beq.n	3e74 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	7adb      	ldrb	r3, [r3, #11]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d01c      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	8b9b      	ldrh	r3, [r3, #28]
    3e5e:	b29b      	uxth	r3, r3
    3e60:	2b01      	cmp	r3, #1
    3e62:	d117      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	685b      	ldr	r3, [r3, #4]
    3e68:	2280      	movs	r2, #128	; 0x80
    3e6a:	02d2      	lsls	r2, r2, #11
    3e6c:	431a      	orrs	r2, r3
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	605a      	str	r2, [r3, #4]
    3e72:	e00f      	b.n	3e94 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	7adb      	ldrb	r3, [r3, #11]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d00b      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	8b9b      	ldrh	r3, [r3, #28]
    3e80:	b29b      	uxth	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d106      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	685b      	ldr	r3, [r3, #4]
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	02d2      	lsls	r2, r2, #11
    3e8e:	431a      	orrs	r2, r3
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	8b9b      	ldrh	r3, [r3, #28]
    3e98:	b29b      	uxth	r3, r3
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d10e      	bne.n	3ebc <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	7a9b      	ldrb	r3, [r3, #10]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d00a      	beq.n	3ebc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <_i2c_master_read+0xec>)
    3eac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	22c0      	movs	r2, #192	; 0xc0
    3eb4:	0292      	lsls	r2, r2, #10
    3eb6:	431a      	orrs	r2, r3
    3eb8:	68fb      	ldr	r3, [r7, #12]
    3eba:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <_i2c_master_read+0xec>)
    3ec2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	6a1a      	ldr	r2, [r3, #32]
    3ec8:	2308      	movs	r3, #8
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	881b      	ldrh	r3, [r3, #0]
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	68fa      	ldr	r2, [r7, #12]
    3ed2:	2128      	movs	r1, #40	; 0x28
    3ed4:	5c52      	ldrb	r2, [r2, r1]
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	701a      	strb	r2, [r3, #0]
}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	00003dd5 	.word	0x00003dd5

00003ee8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	8b5b      	ldrh	r3, [r3, #26]
    3efa:	b29b      	uxth	r3, r3
    3efc:	001a      	movs	r2, r3
    3efe:	2304      	movs	r3, #4
    3f00:	4013      	ands	r3, r2
    3f02:	d004      	beq.n	3f0e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2225      	movs	r2, #37	; 0x25
    3f08:	211e      	movs	r1, #30
    3f0a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3f0c:	e024      	b.n	3f58 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3f0e:	230a      	movs	r3, #10
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	687a      	ldr	r2, [r7, #4]
    3f14:	8b52      	ldrh	r2, [r2, #26]
    3f16:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	8b9b      	ldrh	r3, [r3, #28]
    3f1c:	b29a      	uxth	r2, r3
    3f1e:	230a      	movs	r3, #10
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	210a      	movs	r1, #10
    3f24:	1879      	adds	r1, r7, r1
    3f26:	8809      	ldrh	r1, [r1, #0]
    3f28:	1a8a      	subs	r2, r1, r2
    3f2a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	8b9b      	ldrh	r3, [r3, #28]
    3f30:	b29b      	uxth	r3, r3
    3f32:	3b01      	subs	r3, #1
    3f34:	b29a      	uxth	r2, r3
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <_i2c_master_write+0x78>)
    3f40:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	6a1a      	ldr	r2, [r3, #32]
    3f46:	230a      	movs	r3, #10
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	18d3      	adds	r3, r2, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b2d9      	uxtb	r1, r3
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	2228      	movs	r2, #40	; 0x28
    3f56:	5499      	strb	r1, [r3, r2]
}
    3f58:	46bd      	mov	sp, r7
    3f5a:	b004      	add	sp, #16
    3f5c:	bd80      	pop	{r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	00003dd5 	.word	0x00003dd5

00003f64 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	7e1b      	ldrb	r3, [r3, #24]
    3f76:	b2db      	uxtb	r3, r3
    3f78:	001a      	movs	r2, r3
    3f7a:	2301      	movs	r3, #1
    3f7c:	4013      	ands	r3, r2
    3f7e:	d02b      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	2201      	movs	r2, #1
    3f84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	8b5b      	ldrh	r3, [r3, #26]
    3f8a:	b29b      	uxth	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2302      	movs	r3, #2
    3f90:	4013      	ands	r3, r2
    3f92:	d004      	beq.n	3f9e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	2225      	movs	r2, #37	; 0x25
    3f98:	2141      	movs	r1, #65	; 0x41
    3f9a:	5499      	strb	r1, [r3, r2]
    3f9c:	e01c      	b.n	3fd8 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	8b5b      	ldrh	r3, [r3, #26]
    3fa2:	b29b      	uxth	r3, r3
    3fa4:	001a      	movs	r2, r3
    3fa6:	2304      	movs	r3, #4
    3fa8:	4013      	ands	r3, r2
    3faa:	d015      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2225      	movs	r2, #37	; 0x25
    3fb0:	2118      	movs	r1, #24
    3fb2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2200      	movs	r2, #0
    3fb8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	7a9b      	ldrb	r3, [r3, #10]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d00a      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b13      	ldr	r3, [pc, #76]	; (4014 <_i2c_master_async_address_response+0xb0>)
    3fc8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	685b      	ldr	r3, [r3, #4]
    3fce:	22c0      	movs	r2, #192	; 0xc0
    3fd0:	0292      	lsls	r2, r2, #10
    3fd2:	431a      	orrs	r2, r3
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	8b9b      	ldrh	r3, [r3, #28]
    3fdc:	b29a      	uxth	r2, r3
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	2225      	movs	r2, #37	; 0x25
    3fe6:	5c9b      	ldrb	r3, [r3, r2]
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b05      	cmp	r3, #5
    3fec:	d10e      	bne.n	400c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2224      	movs	r2, #36	; 0x24
    3ff2:	5c9b      	ldrb	r3, [r3, r2]
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d104      	bne.n	4004 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	0018      	movs	r0, r3
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <_i2c_master_async_address_response+0xb4>)
    4000:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    4002:	e003      	b.n	400c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	0018      	movs	r0, r3
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <_i2c_master_async_address_response+0xb8>)
    400a:	4798      	blx	r3
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b004      	add	sp, #16
    4012:	bd80      	pop	{r7, pc}
    4014:	00003dd5 	.word	0x00003dd5
    4018:	00003ee9 	.word	0x00003ee9
    401c:	00003df9 	.word	0x00003df9

00004020 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	1dfb      	adds	r3, r7, #7
    402a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    4030:	4b93      	ldr	r3, [pc, #588]	; (4280 <_i2c_master_interrupt_handler+0x260>)
    4032:	0092      	lsls	r2, r2, #2
    4034:	58d3      	ldr	r3, [r2, r3]
    4036:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4038:	697b      	ldr	r3, [r7, #20]
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    403e:	693b      	ldr	r3, [r7, #16]
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	011b      	lsls	r3, r3, #4
    4044:	0fdb      	lsrs	r3, r3, #31
    4046:	b2db      	uxtb	r3, r3
    4048:	001a      	movs	r2, r3
    404a:	230f      	movs	r3, #15
    404c:	18fb      	adds	r3, r7, r3
    404e:	1e51      	subs	r1, r2, #1
    4050:	418a      	sbcs	r2, r1
    4052:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4054:	230e      	movs	r3, #14
    4056:	18fb      	adds	r3, r7, r3
    4058:	697a      	ldr	r2, [r7, #20]
    405a:	7e52      	ldrb	r2, [r2, #25]
    405c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	7e1b      	ldrb	r3, [r3, #24]
    4062:	b2da      	uxtb	r2, r3
    4064:	230e      	movs	r3, #14
    4066:	18fb      	adds	r3, r7, r3
    4068:	210e      	movs	r1, #14
    406a:	1879      	adds	r1, r7, r1
    406c:	7809      	ldrb	r1, [r1, #0]
    406e:	400a      	ands	r2, r1
    4070:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4072:	697b      	ldr	r3, [r7, #20]
    4074:	8b5b      	ldrh	r3, [r3, #26]
    4076:	b29b      	uxth	r3, r3
    4078:	2b00      	cmp	r3, #0
    407a:	d109      	bne.n	4090 <_i2c_master_interrupt_handler+0x70>
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	8b9b      	ldrh	r3, [r3, #28]
    4080:	b29b      	uxth	r3, r3
    4082:	2b00      	cmp	r3, #0
    4084:	d004      	beq.n	4090 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    4086:	697b      	ldr	r3, [r7, #20]
    4088:	0018      	movs	r0, r3
    408a:	4b7e      	ldr	r3, [pc, #504]	; (4284 <_i2c_master_interrupt_handler+0x264>)
    408c:	4798      	blx	r3
    408e:	e070      	b.n	4172 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4090:	697b      	ldr	r3, [r7, #20]
    4092:	8b5b      	ldrh	r3, [r3, #26]
    4094:	b29b      	uxth	r3, r3
    4096:	2b00      	cmp	r3, #0
    4098:	d039      	beq.n	410e <_i2c_master_interrupt_handler+0xee>
    409a:	697b      	ldr	r3, [r7, #20]
    409c:	8b9b      	ldrh	r3, [r3, #28]
    409e:	b29b      	uxth	r3, r3
    40a0:	2b00      	cmp	r3, #0
    40a2:	d134      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	2225      	movs	r2, #37	; 0x25
    40a8:	5c9b      	ldrb	r3, [r3, r2]
    40aa:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    40ac:	2b05      	cmp	r3, #5
    40ae:	d12e      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	2224      	movs	r2, #36	; 0x24
    40b4:	5c9b      	ldrb	r3, [r3, r2]
    40b6:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    40b8:	2b00      	cmp	r3, #0
    40ba:	d128      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    40bc:	693b      	ldr	r3, [r7, #16]
    40be:	2203      	movs	r2, #3
    40c0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    40c2:	697b      	ldr	r3, [r7, #20]
    40c4:	2200      	movs	r2, #0
    40c6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    40c8:	697b      	ldr	r3, [r7, #20]
    40ca:	2225      	movs	r2, #37	; 0x25
    40cc:	2100      	movs	r1, #0
    40ce:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    40d0:	697b      	ldr	r3, [r7, #20]
    40d2:	7a9b      	ldrb	r3, [r3, #10]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d00b      	beq.n	40f0 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	0018      	movs	r0, r3
    40dc:	4b6a      	ldr	r3, [pc, #424]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    40de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    40e0:	693b      	ldr	r3, [r7, #16]
    40e2:	685b      	ldr	r3, [r3, #4]
    40e4:	22c0      	movs	r2, #192	; 0xc0
    40e6:	0292      	lsls	r2, r2, #10
    40e8:	431a      	orrs	r2, r3
    40ea:	693b      	ldr	r3, [r7, #16]
    40ec:	605a      	str	r2, [r3, #4]
    40ee:	e002      	b.n	40f6 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    40f0:	693b      	ldr	r3, [r7, #16]
    40f2:	2201      	movs	r2, #1
    40f4:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    40f6:	230e      	movs	r3, #14
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2201      	movs	r2, #1
    40fe:	4013      	ands	r3, r2
    4100:	d037      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4102:	697b      	ldr	r3, [r7, #20]
    4104:	68db      	ldr	r3, [r3, #12]
    4106:	697a      	ldr	r2, [r7, #20]
    4108:	0010      	movs	r0, r2
    410a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    410c:	e031      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    410e:	697b      	ldr	r3, [r7, #20]
    4110:	8b5b      	ldrh	r3, [r3, #26]
    4112:	b29b      	uxth	r3, r3
    4114:	2b00      	cmp	r3, #0
    4116:	d02c      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
    4118:	697b      	ldr	r3, [r7, #20]
    411a:	8b9b      	ldrh	r3, [r3, #28]
    411c:	b29b      	uxth	r3, r3
    411e:	2b00      	cmp	r3, #0
    4120:	d027      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4122:	693b      	ldr	r3, [r7, #16]
    4124:	8b5b      	ldrh	r3, [r3, #26]
    4126:	b29b      	uxth	r3, r3
    4128:	001a      	movs	r2, r3
    412a:	2320      	movs	r3, #32
    412c:	4013      	ands	r3, r2
    412e:	d111      	bne.n	4154 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2201      	movs	r2, #1
    4138:	4053      	eors	r3, r2
    413a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    413c:	2b00      	cmp	r3, #0
    413e:	d104      	bne.n	414a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4140:	697b      	ldr	r3, [r7, #20]
    4142:	8b9b      	ldrh	r3, [r3, #28]
    4144:	b29b      	uxth	r3, r3
    4146:	2b01      	cmp	r3, #1
    4148:	d004      	beq.n	4154 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    414a:	697b      	ldr	r3, [r7, #20]
    414c:	2225      	movs	r2, #37	; 0x25
    414e:	2141      	movs	r1, #65	; 0x41
    4150:	5499      	strb	r1, [r3, r2]
    4152:	e00e      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4154:	697b      	ldr	r3, [r7, #20]
    4156:	2224      	movs	r2, #36	; 0x24
    4158:	5c9b      	ldrb	r3, [r3, r2]
    415a:	b2db      	uxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	d104      	bne.n	416a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	0018      	movs	r0, r3
    4164:	4b49      	ldr	r3, [pc, #292]	; (428c <_i2c_master_interrupt_handler+0x26c>)
    4166:	4798      	blx	r3
    4168:	e003      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	0018      	movs	r0, r3
    416e:	4b48      	ldr	r3, [pc, #288]	; (4290 <_i2c_master_interrupt_handler+0x270>)
    4170:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4172:	697b      	ldr	r3, [r7, #20]
    4174:	8b5b      	ldrh	r3, [r3, #26]
    4176:	b29b      	uxth	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d047      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
    417c:	697b      	ldr	r3, [r7, #20]
    417e:	8b9b      	ldrh	r3, [r3, #28]
    4180:	b29b      	uxth	r3, r3
    4182:	2b00      	cmp	r3, #0
    4184:	d142      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    4186:	697b      	ldr	r3, [r7, #20]
    4188:	2225      	movs	r2, #37	; 0x25
    418a:	5c9b      	ldrb	r3, [r3, r2]
    418c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    418e:	2b05      	cmp	r3, #5
    4190:	d13c      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4192:	697b      	ldr	r3, [r7, #20]
    4194:	2224      	movs	r2, #36	; 0x24
    4196:	5c9b      	ldrb	r3, [r3, r2]
    4198:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    419a:	2b01      	cmp	r3, #1
    419c:	d136      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    419e:	693b      	ldr	r3, [r7, #16]
    41a0:	7e1b      	ldrb	r3, [r3, #24]
    41a2:	b2db      	uxtb	r3, r3
    41a4:	001a      	movs	r2, r3
    41a6:	2302      	movs	r3, #2
    41a8:	4013      	ands	r3, r2
    41aa:	d002      	beq.n	41b2 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    41ac:	693b      	ldr	r3, [r7, #16]
    41ae:	2202      	movs	r2, #2
    41b0:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	2203      	movs	r2, #3
    41b6:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	2200      	movs	r2, #0
    41bc:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    41be:	697b      	ldr	r3, [r7, #20]
    41c0:	2225      	movs	r2, #37	; 0x25
    41c2:	2100      	movs	r1, #0
    41c4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    41c6:	230e      	movs	r3, #14
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2202      	movs	r2, #2
    41ce:	4013      	ands	r3, r2
    41d0:	d00b      	beq.n	41ea <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    41d2:	697b      	ldr	r3, [r7, #20]
    41d4:	2224      	movs	r2, #36	; 0x24
    41d6:	5c9b      	ldrb	r3, [r3, r2]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b01      	cmp	r3, #1
    41dc:	d105      	bne.n	41ea <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    41de:	697b      	ldr	r3, [r7, #20]
    41e0:	691b      	ldr	r3, [r3, #16]
    41e2:	697a      	ldr	r2, [r7, #20]
    41e4:	0010      	movs	r0, r2
    41e6:	4798      	blx	r3
    41e8:	e010      	b.n	420c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    41ea:	230e      	movs	r3, #14
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2201      	movs	r2, #1
    41f2:	4013      	ands	r3, r2
    41f4:	d00a      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    41f6:	697b      	ldr	r3, [r7, #20]
    41f8:	2224      	movs	r2, #36	; 0x24
    41fa:	5c9b      	ldrb	r3, [r3, r2]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	2b00      	cmp	r3, #0
    4200:	d104      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4202:	697b      	ldr	r3, [r7, #20]
    4204:	68db      	ldr	r3, [r3, #12]
    4206:	697a      	ldr	r2, [r7, #20]
    4208:	0010      	movs	r0, r2
    420a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    420c:	697b      	ldr	r3, [r7, #20]
    420e:	2225      	movs	r2, #37	; 0x25
    4210:	5c9b      	ldrb	r3, [r3, r2]
    4212:	b2db      	uxtb	r3, r3
    4214:	2b05      	cmp	r3, #5
    4216:	d02e      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	2225      	movs	r2, #37	; 0x25
    421c:	5c9b      	ldrb	r3, [r3, r2]
    421e:	b2db      	uxtb	r3, r3
    4220:	2b00      	cmp	r3, #0
    4222:	d028      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4224:	693b      	ldr	r3, [r7, #16]
    4226:	2203      	movs	r2, #3
    4228:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    422a:	697b      	ldr	r3, [r7, #20]
    422c:	2200      	movs	r2, #0
    422e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    4230:	697b      	ldr	r3, [r7, #20]
    4232:	2200      	movs	r2, #0
    4234:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	2225      	movs	r2, #37	; 0x25
    423a:	5c9b      	ldrb	r3, [r3, r2]
    423c:	b2db      	uxtb	r3, r3
    423e:	2b41      	cmp	r3, #65	; 0x41
    4240:	d00e      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4242:	697b      	ldr	r3, [r7, #20]
    4244:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4246:	2b00      	cmp	r3, #0
    4248:	d00a      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	0018      	movs	r0, r3
    424e:	4b0e      	ldr	r3, [pc, #56]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    4250:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	685b      	ldr	r3, [r3, #4]
    4256:	22e0      	movs	r2, #224	; 0xe0
    4258:	02d2      	lsls	r2, r2, #11
    425a:	431a      	orrs	r2, r3
    425c:	693b      	ldr	r3, [r7, #16]
    425e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4260:	230e      	movs	r3, #14
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2204      	movs	r2, #4
    4268:	4013      	ands	r3, r2
    426a:	d004      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    426c:	697b      	ldr	r3, [r7, #20]
    426e:	695b      	ldr	r3, [r3, #20]
    4270:	697a      	ldr	r2, [r7, #20]
    4272:	0010      	movs	r0, r2
    4274:	4798      	blx	r3
		}
	}
}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	46bd      	mov	sp, r7
    427a:	b006      	add	sp, #24
    427c:	bd80      	pop	{r7, pc}
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	20000468 	.word	0x20000468
    4284:	00003f65 	.word	0x00003f65
    4288:	00003dd5 	.word	0x00003dd5
    428c:	00003ee9 	.word	0x00003ee9
    4290:	00003df9 	.word	0x00003df9

00004294 <system_gclk_chan_get_config_defaults>:
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	2200      	movs	r2, #0
    42a0:	701a      	strb	r2, [r3, #0]
}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	46bd      	mov	sp, r7
    42a6:	b002      	add	sp, #8
    42a8:	bd80      	pop	{r7, pc}
	...

000042ac <system_apb_clock_set_mask>:
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b082      	sub	sp, #8
    42b0:	af00      	add	r7, sp, #0
    42b2:	0002      	movs	r2, r0
    42b4:	6039      	str	r1, [r7, #0]
    42b6:	1dfb      	adds	r3, r7, #7
    42b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42ba:	1dfb      	adds	r3, r7, #7
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	2b01      	cmp	r3, #1
    42c0:	d00a      	beq.n	42d8 <system_apb_clock_set_mask+0x2c>
    42c2:	2b02      	cmp	r3, #2
    42c4:	d00f      	beq.n	42e6 <system_apb_clock_set_mask+0x3a>
    42c6:	2b00      	cmp	r3, #0
    42c8:	d114      	bne.n	42f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    42ca:	4b0e      	ldr	r3, [pc, #56]	; (4304 <system_apb_clock_set_mask+0x58>)
    42cc:	4a0d      	ldr	r2, [pc, #52]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ce:	6991      	ldr	r1, [r2, #24]
    42d0:	683a      	ldr	r2, [r7, #0]
    42d2:	430a      	orrs	r2, r1
    42d4:	619a      	str	r2, [r3, #24]
			break;
    42d6:	e00f      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    42d8:	4b0a      	ldr	r3, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42da:	4a0a      	ldr	r2, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42dc:	69d1      	ldr	r1, [r2, #28]
    42de:	683a      	ldr	r2, [r7, #0]
    42e0:	430a      	orrs	r2, r1
    42e2:	61da      	str	r2, [r3, #28]
			break;
    42e4:	e008      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <system_apb_clock_set_mask+0x58>)
    42e8:	4a06      	ldr	r2, [pc, #24]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ea:	6a11      	ldr	r1, [r2, #32]
    42ec:	683a      	ldr	r2, [r7, #0]
    42ee:	430a      	orrs	r2, r1
    42f0:	621a      	str	r2, [r3, #32]
			break;
    42f2:	e001      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    42f4:	2317      	movs	r3, #23
    42f6:	e000      	b.n	42fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    42f8:	2300      	movs	r3, #0
}
    42fa:	0018      	movs	r0, r3
    42fc:	46bd      	mov	sp, r7
    42fe:	b002      	add	sp, #8
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	40000400 	.word	0x40000400

00004308 <system_pinmux_get_config_defaults>:
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	2200      	movs	r2, #0
    431a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	2201      	movs	r2, #1
    4320:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	2200      	movs	r2, #0
    4326:	70da      	strb	r2, [r3, #3]
}
    4328:	46c0      	nop			; (mov r8, r8)
    432a:	46bd      	mov	sp, r7
    432c:	b002      	add	sp, #8
    432e:	bd80      	pop	{r7, pc}

00004330 <system_is_debugger_present>:
{
    4330:	b580      	push	{r7, lr}
    4332:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <system_is_debugger_present+0x1c>)
    4336:	789b      	ldrb	r3, [r3, #2]
    4338:	b2db      	uxtb	r3, r3
    433a:	001a      	movs	r2, r3
    433c:	2302      	movs	r3, #2
    433e:	4013      	ands	r3, r2
    4340:	1e5a      	subs	r2, r3, #1
    4342:	4193      	sbcs	r3, r2
    4344:	b2db      	uxtb	r3, r3
}
    4346:	0018      	movs	r0, r3
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	41002000 	.word	0x41002000

00004350 <_i2c_slave_set_config>:
 *                                         previously set
 */
static enum status_code _i2c_slave_set_config(
		struct i2c_slave_module *const module,
		const struct i2c_slave_config *const config)
{
    4350:	b580      	push	{r7, lr}
    4352:	b088      	sub	sp, #32
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	613b      	str	r3, [r7, #16]
	Sercom *const sercom_hw = module->hw;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	60fb      	str	r3, [r7, #12]

	module->buffer_timeout = config->buffer_timeout;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	891a      	ldrh	r2, [r3, #8]
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	80da      	strh	r2, [r3, #6]
	module->ten_bit_address = config->ten_bit_address;
    436e:	683b      	ldr	r3, [r7, #0]
    4370:	7c1a      	ldrb	r2, [r3, #16]
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	721a      	strb	r2, [r3, #8]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4376:	2308      	movs	r3, #8
    4378:	18fb      	adds	r3, r7, r3
    437a:	0018      	movs	r0, r3
    437c:	4b49      	ldr	r3, [pc, #292]	; (44a4 <_i2c_slave_set_config+0x154>)
    437e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	69db      	ldr	r3, [r3, #28]
    4384:	61bb      	str	r3, [r7, #24]
	uint32_t pad1 = config->pinmux_pad1;
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	6a1b      	ldr	r3, [r3, #32]
    438a:	617b      	str	r3, [r7, #20]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    438c:	69bb      	ldr	r3, [r7, #24]
    438e:	2b00      	cmp	r3, #0
    4390:	d106      	bne.n	43a0 <_i2c_slave_set_config+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2100      	movs	r1, #0
    4396:	0018      	movs	r0, r3
    4398:	4b43      	ldr	r3, [pc, #268]	; (44a8 <_i2c_slave_set_config+0x158>)
    439a:	4798      	blx	r3
    439c:	0003      	movs	r3, r0
    439e:	61bb      	str	r3, [r7, #24]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    43a0:	69bb      	ldr	r3, [r7, #24]
    43a2:	b2da      	uxtb	r2, r3
    43a4:	2308      	movs	r3, #8
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43aa:	2308      	movs	r3, #8
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2202      	movs	r2, #2
    43b0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    43b2:	69bb      	ldr	r3, [r7, #24]
    43b4:	0c1b      	lsrs	r3, r3, #16
    43b6:	b2db      	uxtb	r3, r3
    43b8:	2208      	movs	r2, #8
    43ba:	18ba      	adds	r2, r7, r2
    43bc:	0011      	movs	r1, r2
    43be:	0018      	movs	r0, r3
    43c0:	4b3a      	ldr	r3, [pc, #232]	; (44ac <_i2c_slave_set_config+0x15c>)
    43c2:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    43c4:	697b      	ldr	r3, [r7, #20]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d106      	bne.n	43d8 <_i2c_slave_set_config+0x88>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2101      	movs	r1, #1
    43ce:	0018      	movs	r0, r3
    43d0:	4b35      	ldr	r3, [pc, #212]	; (44a8 <_i2c_slave_set_config+0x158>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	617b      	str	r3, [r7, #20]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    43d8:	697b      	ldr	r3, [r7, #20]
    43da:	b2da      	uxtb	r2, r3
    43dc:	2308      	movs	r3, #8
    43de:	18fb      	adds	r3, r7, r3
    43e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43e2:	2308      	movs	r3, #8
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2202      	movs	r2, #2
    43e8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    43ea:	697b      	ldr	r3, [r7, #20]
    43ec:	0c1b      	lsrs	r3, r3, #16
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2208      	movs	r2, #8
    43f2:	18ba      	adds	r2, r7, r2
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2c      	ldr	r3, [pc, #176]	; (44ac <_i2c_slave_set_config+0x15c>)
    43fa:	4798      	blx	r3

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
    43fc:	683b      	ldr	r3, [r7, #0]
    43fe:	7e9b      	ldrb	r3, [r3, #26]
    4400:	2b00      	cmp	r3, #0
    4402:	d103      	bne.n	440c <_i2c_slave_set_config+0xbc>
    4404:	4b2a      	ldr	r3, [pc, #168]	; (44b0 <_i2c_slave_set_config+0x160>)
    4406:	4798      	blx	r3
    4408:	1e03      	subs	r3, r0, #0
    440a:	d002      	beq.n	4412 <_i2c_slave_set_config+0xc2>
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
    440c:	2380      	movs	r3, #128	; 0x80
    440e:	61fb      	str	r3, [r7, #28]
    4410:	e001      	b.n	4416 <_i2c_slave_set_config+0xc6>
	} else {
		tmp_ctrla = 0;
    4412:	2300      	movs	r3, #0
    4414:	61fb      	str	r3, [r7, #28]
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	2225      	movs	r2, #37	; 0x25
    441a:	5c9b      	ldrb	r3, [r3, r2]
    441c:	2b00      	cmp	r3, #0
    441e:	d105      	bne.n	442c <_i2c_slave_set_config+0xdc>
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	695a      	ldr	r2, [r3, #20]
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	049b      	lsls	r3, r3, #18
    4428:	429a      	cmp	r2, r3
    442a:	d104      	bne.n	4436 <_i2c_slave_set_config+0xe6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    442c:	69fb      	ldr	r3, [r7, #28]
    442e:	2280      	movs	r2, #128	; 0x80
    4430:	0512      	lsls	r2, r2, #20
    4432:	4313      	orrs	r3, r2
    4434:	61fb      	str	r3, [r7, #28]
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	685a      	ldr	r2, [r3, #4]
			config->transfer_speed |
    443a:	683b      	ldr	r3, [r7, #0]
    443c:	695b      	ldr	r3, [r3, #20]
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    443e:	4313      	orrs	r3, r2
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	2124      	movs	r1, #36	; 0x24
    4444:	5c52      	ldrb	r2, [r2, r1]
    4446:	0792      	lsls	r2, r2, #30
			config->transfer_speed |
    4448:	4313      	orrs	r3, r2
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
    444a:	683a      	ldr	r2, [r7, #0]
    444c:	2126      	movs	r1, #38	; 0x26
    444e:	5c52      	ldrb	r2, [r2, r1]
    4450:	05d2      	lsls	r2, r2, #23
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4452:	4313      	orrs	r3, r2
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4454:	69fa      	ldr	r2, [r7, #28]
    4456:	4313      	orrs	r3, r2
    4458:	61fb      	str	r3, [r7, #28]

	i2c_hw->CTRLA.reg |= tmp_ctrla;
    445a:	693b      	ldr	r3, [r7, #16]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	69fb      	ldr	r3, [r7, #28]
    4460:	431a      	orrs	r2, r3
    4462:	693b      	ldr	r3, [r7, #16]
    4464:	601a      	str	r2, [r3, #0]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	895b      	ldrh	r3, [r3, #10]
    446a:	2280      	movs	r2, #128	; 0x80
    446c:	0052      	lsls	r2, r2, #1
    446e:	4313      	orrs	r3, r2
    4470:	b29b      	uxth	r3, r3
    4472:	001a      	movs	r2, r3
    4474:	693b      	ldr	r3, [r7, #16]
    4476:	605a      	str	r2, [r3, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	899b      	ldrh	r3, [r3, #12]
    447c:	005a      	lsls	r2, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	89db      	ldrh	r3, [r3, #14]
    4482:	045b      	lsls	r3, r3, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4484:	431a      	orrs	r2, r3
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	7c1b      	ldrb	r3, [r3, #16]
    448a:	03db      	lsls	r3, r3, #15
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    448c:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
    448e:	683a      	ldr	r2, [r7, #0]
    4490:	7c52      	ldrb	r2, [r2, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4492:	4313      	orrs	r3, r2
    4494:	001a      	movs	r2, r3
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4496:	693b      	ldr	r3, [r7, #16]
    4498:	625a      	str	r2, [r3, #36]	; 0x24

	return STATUS_OK;
    449a:	2300      	movs	r3, #0
}
    449c:	0018      	movs	r0, r3
    449e:	46bd      	mov	sp, r7
    44a0:	b008      	add	sp, #32
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00004309 	.word	0x00004309
    44a8:	00006e7d 	.word	0x00006e7d
    44ac:	00007f11 	.word	0x00007f11
    44b0:	00004331 	.word	0x00004331

000044b4 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
    44b4:	b590      	push	{r4, r7, lr}
    44b6:	b08b      	sub	sp, #44	; 0x2c
    44b8:	af00      	add	r7, sp, #0
    44ba:	60f8      	str	r0, [r7, #12]
    44bc:	60b9      	str	r1, [r7, #8]
    44be:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	68ba      	ldr	r2, [r7, #8]
    44c4:	601a      	str	r2, [r3, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
    44cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	2202      	movs	r2, #2
    44d2:	4013      	ands	r3, r2
    44d4:	d001      	beq.n	44da <i2c_slave_init+0x26>
		return STATUS_ERR_DENIED;
    44d6:	231c      	movs	r3, #28
    44d8:	e069      	b.n	45ae <i2c_slave_init+0xfa>
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
    44da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	2201      	movs	r2, #1
    44e0:	4013      	ands	r3, r2
    44e2:	d001      	beq.n	44e8 <i2c_slave_init+0x34>
		return STATUS_BUSY;
    44e4:	2305      	movs	r3, #5
    44e6:	e062      	b.n	45ae <i2c_slave_init+0xfa>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	0018      	movs	r0, r3
    44ee:	4b32      	ldr	r3, [pc, #200]	; (45b8 <i2c_slave_init+0x104>)
    44f0:	4798      	blx	r3
    44f2:	0003      	movs	r3, r0
    44f4:	623b      	str	r3, [r7, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    44f6:	6a3b      	ldr	r3, [r7, #32]
    44f8:	3302      	adds	r3, #2
    44fa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44fc:	6a3b      	ldr	r3, [r7, #32]
    44fe:	3314      	adds	r3, #20
    4500:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4502:	2201      	movs	r2, #1
    4504:	69fb      	ldr	r3, [r7, #28]
    4506:	409a      	lsls	r2, r3
    4508:	0013      	movs	r3, r2
    450a:	0019      	movs	r1, r3
    450c:	2002      	movs	r0, #2
    450e:	4b2b      	ldr	r3, [pc, #172]	; (45bc <i2c_slave_init+0x108>)
    4510:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4512:	2314      	movs	r3, #20
    4514:	18fb      	adds	r3, r7, r3
    4516:	0018      	movs	r0, r3
    4518:	4b29      	ldr	r3, [pc, #164]	; (45c0 <i2c_slave_init+0x10c>)
    451a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	7e5a      	ldrb	r2, [r3, #25]
    4520:	2314      	movs	r3, #20
    4522:	18fb      	adds	r3, r7, r3
    4524:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4526:	69bb      	ldr	r3, [r7, #24]
    4528:	b2db      	uxtb	r3, r3
    452a:	2214      	movs	r2, #20
    452c:	18ba      	adds	r2, r7, r2
    452e:	0011      	movs	r1, r2
    4530:	0018      	movs	r0, r3
    4532:	4b24      	ldr	r3, [pc, #144]	; (45c4 <i2c_slave_init+0x110>)
    4534:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4536:	69bb      	ldr	r3, [r7, #24]
    4538:	b2db      	uxtb	r3, r3
    453a:	0018      	movs	r0, r3
    453c:	4b22      	ldr	r3, [pc, #136]	; (45c8 <i2c_slave_init+0x114>)
    453e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	7e5b      	ldrb	r3, [r3, #25]
    4544:	2100      	movs	r1, #0
    4546:	0018      	movs	r0, r3
    4548:	4b20      	ldr	r3, [pc, #128]	; (45cc <i2c_slave_init+0x118>)
    454a:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	2217      	movs	r2, #23
    4552:	18bc      	adds	r4, r7, r2
    4554:	0018      	movs	r0, r3
    4556:	4b18      	ldr	r3, [pc, #96]	; (45b8 <i2c_slave_init+0x104>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
    455c:	7023      	strb	r3, [r4, #0]

	/* Save software module in interrupt handler */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
    455e:	4a1c      	ldr	r2, [pc, #112]	; (45d0 <i2c_slave_init+0x11c>)
    4560:	2317      	movs	r3, #23
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	0011      	movs	r1, r2
    4568:	0018      	movs	r0, r3
    456a:	4b1a      	ldr	r3, [pc, #104]	; (45d4 <i2c_slave_init+0x120>)
    456c:	4798      	blx	r3

	/* Save software module */
	_sercom_instances[instance_index] = module;
    456e:	2317      	movs	r3, #23
    4570:	18fb      	adds	r3, r7, r3
    4572:	781a      	ldrb	r2, [r3, #0]
    4574:	4b18      	ldr	r3, [pc, #96]	; (45d8 <i2c_slave_init+0x124>)
    4576:	0092      	lsls	r2, r2, #2
    4578:	68f9      	ldr	r1, [r7, #12]
    457a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module */
	module->registered_callback = 0;
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	2224      	movs	r2, #36	; 0x24
    4580:	2100      	movs	r1, #0
    4582:	5499      	strb	r1, [r3, r2]
	module->enabled_callback = 0;
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	2225      	movs	r2, #37	; 0x25
    4588:	2100      	movs	r1, #0
    458a:	5499      	strb	r1, [r3, r2]
	module->buffer_length = 0;
    458c:	68fb      	ldr	r3, [r7, #12]
    458e:	2200      	movs	r2, #0
    4590:	84da      	strh	r2, [r3, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	7e1a      	ldrb	r2, [r3, #24]
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	725a      	strb	r2, [r3, #9]
#endif

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
    459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    459c:	2210      	movs	r2, #16
    459e:	601a      	str	r2, [r3, #0]

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	0011      	movs	r1, r2
    45a6:	0018      	movs	r0, r3
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <i2c_slave_init+0x128>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
}
    45ae:	0018      	movs	r0, r3
    45b0:	46bd      	mov	sp, r7
    45b2:	b00b      	add	sp, #44	; 0x2c
    45b4:	bd90      	pop	{r4, r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00007039 	.word	0x00007039
    45bc:	000042ad 	.word	0x000042ad
    45c0:	00004295 	.word	0x00004295
    45c4:	00007c25 	.word	0x00007c25
    45c8:	00007c69 	.word	0x00007c69
    45cc:	00006df1 	.word	0x00006df1
    45d0:	000047d5 	.word	0x000047d5
    45d4:	0000709d 	.word	0x0000709d
    45d8:	20000468 	.word	0x20000468
    45dc:	00004351 	.word	0x00004351

000045e0 <system_interrupt_enter_critical_section>:
{
    45e0:	b580      	push	{r7, lr}
    45e2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <system_interrupt_enter_critical_section+0x10>)
    45e6:	4798      	blx	r3
}
    45e8:	46c0      	nop			; (mov r8, r8)
    45ea:	46bd      	mov	sp, r7
    45ec:	bd80      	pop	{r7, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	00007271 	.word	0x00007271

000045f4 <system_interrupt_leave_critical_section>:
{
    45f4:	b580      	push	{r7, lr}
    45f6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <system_interrupt_leave_critical_section+0x10>)
    45fa:	4798      	blx	r3
}
    45fc:	46c0      	nop			; (mov r8, r8)
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	000072c5 	.word	0x000072c5

00004608 <_i2c_slave_set_ctrlb_ackact>:
 * \param[in] send_ack true send ACK, false send NACK
 */
static inline void _i2c_slave_set_ctrlb_ackact(
		struct i2c_slave_module *const module,
		bool send_ack)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	000a      	movs	r2, r1
    4612:	1cfb      	adds	r3, r7, #3
    4614:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	60fb      	str	r3, [r7, #12]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
    461c:	4b0b      	ldr	r3, [pc, #44]	; (464c <_i2c_slave_set_ctrlb_ackact+0x44>)
    461e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	2200      	movs	r2, #0
    4624:	835a      	strh	r2, [r3, #26]

	if (send_ack == true) {
    4626:	1cfb      	adds	r3, r7, #3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d003      	beq.n	4636 <_i2c_slave_set_ctrlb_ackact+0x2e>
		i2c_hw->CTRLB.reg = 0;
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2200      	movs	r2, #0
    4632:	605a      	str	r2, [r3, #4]
    4634:	e003      	b.n	463e <_i2c_slave_set_ctrlb_ackact+0x36>
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	2280      	movs	r2, #128	; 0x80
    463a:	02d2      	lsls	r2, r2, #11
    463c:	605a      	str	r2, [r3, #4]
	}
	system_interrupt_leave_critical_section();
    463e:	4b04      	ldr	r3, [pc, #16]	; (4650 <_i2c_slave_set_ctrlb_ackact+0x48>)
    4640:	4798      	blx	r3
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
	}
#endif
	return;
    4642:	46c0      	nop			; (mov r8, r8)
}
    4644:	46bd      	mov	sp, r7
    4646:	b004      	add	sp, #16
    4648:	bd80      	pop	{r7, pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	000045e1 	.word	0x000045e1
    4650:	000045f5 	.word	0x000045f5

00004654 <_i2c_slave_set_ctrlb_cmd3>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static inline void _i2c_slave_set_ctrlb_cmd3(
		struct i2c_slave_module *const module)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	60fb      	str	r3, [r7, #12]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	7e1b      	ldrb	r3, [r3, #24]
    4666:	07db      	lsls	r3, r3, #31
    4668:	0fdb      	lsrs	r3, r3, #31
    466a:	b2db      	uxtb	r3, r3
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <_i2c_slave_set_ctrlb_cmd3+0x22>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	2201      	movs	r2, #1
    4674:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	2202      	movs	r2, #2
    467a:	761a      	strb	r2, [r3, #24]
#else
	/* Normal operation */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
#endif
	return;
    467c:	46c0      	nop			; (mov r8, r8)
}
    467e:	46bd      	mov	sp, r7
    4680:	b004      	add	sp, #16
    4682:	bd80      	pop	{r7, pc}

00004684 <_i2c_slave_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_read(
		struct i2c_slave_module *const module)
{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	60fb      	str	r3, [r7, #12]

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4696:	1c59      	adds	r1, r3, #1
    4698:	687a      	ldr	r2, [r7, #4]
    469a:	62d1      	str	r1, [r2, #44]	; 0x2c
    469c:	68fa      	ldr	r2, [r7, #12]
    469e:	2128      	movs	r1, #40	; 0x28
    46a0:	5c52      	ldrb	r2, [r2, r1]
    46a2:	b2d2      	uxtb	r2, r2
    46a4:	701a      	strb	r2, [r3, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46aa:	3b01      	subs	r3, #1
    46ac:	b29a      	uxth	r2, r3
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	46bd      	mov	sp, r7
    46b6:	b004      	add	sp, #16
    46b8:	bd80      	pop	{r7, pc}

000046ba <_i2c_slave_write>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_write(
		struct i2c_slave_module *const module)
{
    46ba:	b580      	push	{r7, lr}
    46bc:	b084      	sub	sp, #16
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	60fb      	str	r3, [r7, #12]

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46cc:	1c59      	adds	r1, r3, #1
    46ce:	687a      	ldr	r2, [r7, #4]
    46d0:	62d1      	str	r1, [r2, #44]	; 0x2c
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2d9      	uxtb	r1, r3
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2228      	movs	r2, #40	; 0x28
    46da:	5499      	strb	r1, [r3, r2]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46e0:	3b01      	subs	r3, #1
    46e2:	b29a      	uxth	r2, r3
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b004      	add	sp, #16
    46ee:	bd80      	pop	{r7, pc}

000046f0 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b084      	sub	sp, #16
    46f4:	af00      	add	r7, sp, #0
    46f6:	60f8      	str	r0, [r7, #12]
    46f8:	60b9      	str	r1, [r7, #8]
    46fa:	1dfb      	adds	r3, r7, #7
    46fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
    46fe:	1dfb      	adds	r3, r7, #7
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	68fa      	ldr	r2, [r7, #12]
    4704:	3302      	adds	r3, #2
    4706:	009b      	lsls	r3, r3, #2
    4708:	18d3      	adds	r3, r2, r3
    470a:	3304      	adds	r3, #4
    470c:	68ba      	ldr	r2, [r7, #8]
    470e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	2224      	movs	r2, #36	; 0x24
    4714:	5c9b      	ldrb	r3, [r3, r2]
    4716:	b2db      	uxtb	r3, r3
    4718:	b25a      	sxtb	r2, r3
    471a:	1dfb      	adds	r3, r7, #7
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	2101      	movs	r1, #1
    4720:	4099      	lsls	r1, r3
    4722:	000b      	movs	r3, r1
    4724:	b25b      	sxtb	r3, r3
    4726:	4313      	orrs	r3, r2
    4728:	b25b      	sxtb	r3, r3
    472a:	b2d9      	uxtb	r1, r3
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	2224      	movs	r2, #36	; 0x24
    4730:	5499      	strb	r1, [r3, r2]
}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}

0000473a <i2c_slave_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_slave_read_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    473a:	b580      	push	{r7, lr}
    473c:	b084      	sub	sp, #16
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
    4742:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4748:	2b00      	cmp	r3, #0
    474a:	d001      	beq.n	4750 <i2c_slave_read_packet_job+0x16>
		return STATUS_BUSY;
    474c:	2305      	movs	r3, #5
    474e:	e016      	b.n	477e <i2c_slave_read_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	685a      	ldr	r2, [r3, #4]
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	881a      	ldrh	r2, [r3, #0]
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    4760:	683b      	ldr	r3, [r7, #0]
    4762:	881a      	ldrh	r2, [r3, #0]
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2231      	movs	r2, #49	; 0x31
    476c:	2105      	movs	r1, #5
    476e:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	2207      	movs	r2, #7
    477a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
    477c:	2300      	movs	r3, #0
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b004      	add	sp, #16
    4784:	bd80      	pop	{r7, pc}

00004786 <i2c_slave_write_packet_job>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
enum status_code i2c_slave_write_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    4786:	b580      	push	{r7, lr}
    4788:	b084      	sub	sp, #16
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
    478e:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4794:	2b00      	cmp	r3, #0
    4796:	d001      	beq.n	479c <i2c_slave_write_packet_job+0x16>
		return STATUS_BUSY;
    4798:	2305      	movs	r3, #5
    479a:	e016      	b.n	47ca <i2c_slave_write_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	685a      	ldr	r2, [r3, #4]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    47a4:	683b      	ldr	r3, [r7, #0]
    47a6:	881a      	ldrh	r2, [r3, #0]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    47ac:	683b      	ldr	r3, [r7, #0]
    47ae:	881a      	ldrh	r2, [r3, #0]
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	2231      	movs	r2, #49	; 0x31
    47b8:	2105      	movs	r1, #5
    47ba:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2207      	movs	r2, #7
    47c6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
    47c8:	2300      	movs	r3, #0
}
    47ca:	0018      	movs	r0, r3
    47cc:	46bd      	mov	sp, r7
    47ce:	b004      	add	sp, #16
    47d0:	bd80      	pop	{r7, pc}
	...

000047d4 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b086      	sub	sp, #24
    47d8:	af00      	add	r7, sp, #0
    47da:	0002      	movs	r2, r0
    47dc:	1dfb      	adds	r3, r7, #7
    47de:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
			(struct i2c_slave_module*)_sercom_instances[instance];
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_slave_module *module =
    47e4:	4bc6      	ldr	r3, [pc, #792]	; (4b00 <_i2c_slave_interrupt_handler+0x32c>)
    47e6:	0092      	lsls	r2, r2, #2
    47e8:	58d3      	ldr	r3, [r2, r3]
    47ea:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	697a      	ldr	r2, [r7, #20]
    47f8:	2125      	movs	r1, #37	; 0x25
    47fa:	5c52      	ldrb	r2, [r2, r1]
    47fc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	2224      	movs	r2, #36	; 0x24
    4802:	5c9b      	ldrb	r3, [r3, r2]
    4804:	b2da      	uxtb	r2, r3
    4806:	230f      	movs	r3, #15
    4808:	18fb      	adds	r3, r7, r3
    480a:	210f      	movs	r1, #15
    480c:	1879      	adds	r1, r7, r1
    480e:	7809      	ldrb	r1, [r1, #0]
    4810:	400a      	ands	r2, r1
    4812:	701a      	strb	r2, [r3, #0]


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    4814:	693b      	ldr	r3, [r7, #16]
    4816:	7e1b      	ldrb	r3, [r3, #24]
    4818:	b2db      	uxtb	r3, r3
    481a:	001a      	movs	r2, r3
    481c:	2302      	movs	r3, #2
    481e:	4013      	ands	r3, r2
    4820:	d100      	bne.n	4824 <_i2c_slave_interrupt_handler+0x50>
    4822:	e0b4      	b.n	498e <_i2c_slave_interrupt_handler+0x1ba>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4828:	b29a      	uxth	r2, r3
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    482e:	429a      	cmp	r2, r3
    4830:	d01b      	beq.n	486a <_i2c_slave_interrupt_handler+0x96>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    4832:	697b      	ldr	r3, [r7, #20]
    4834:	2230      	movs	r2, #48	; 0x30
    4836:	5c9b      	ldrb	r3, [r3, r2]
    4838:	b2db      	uxtb	r3, r3
		if (module->buffer_length != module->buffer_remaining &&
    483a:	2b00      	cmp	r3, #0
    483c:	d115      	bne.n	486a <_i2c_slave_interrupt_handler+0x96>

			module->status = STATUS_OK;
    483e:	697b      	ldr	r3, [r7, #20]
    4840:	2231      	movs	r2, #49	; 0x31
    4842:	2100      	movs	r1, #0
    4844:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    4846:	697b      	ldr	r3, [r7, #20]
    4848:	2200      	movs	r2, #0
    484a:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    484c:	697b      	ldr	r3, [r7, #20]
    484e:	2200      	movs	r2, #0
    4850:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4852:	230f      	movs	r3, #15
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	2202      	movs	r2, #2
    485a:	4013      	ands	r3, r2
    485c:	d027      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    485e:	697b      	ldr	r3, [r7, #20]
    4860:	691b      	ldr	r3, [r3, #16]
    4862:	697a      	ldr	r2, [r7, #20]
    4864:	0010      	movs	r0, r2
    4866:	4798      	blx	r3
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4868:	e021      	b.n	48ae <_i2c_slave_interrupt_handler+0xda>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    486a:	697b      	ldr	r3, [r7, #20]
    486c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    486e:	b29a      	uxth	r2, r3
    4870:	697b      	ldr	r3, [r7, #20]
    4872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4874:	429a      	cmp	r2, r3
    4876:	d01a      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->transfer_direction == I2C_TRANSFER_READ) {
    4878:	697b      	ldr	r3, [r7, #20]
    487a:	2230      	movs	r2, #48	; 0x30
    487c:	5c9b      	ldrb	r3, [r3, r2]
    487e:	b2db      	uxtb	r3, r3
		} else if (module->buffer_length != module->buffer_remaining &&
    4880:	2b01      	cmp	r3, #1
    4882:	d114      	bne.n	48ae <_i2c_slave_interrupt_handler+0xda>
			module->status = STATUS_OK;
    4884:	697b      	ldr	r3, [r7, #20]
    4886:	2231      	movs	r2, #49	; 0x31
    4888:	2100      	movs	r1, #0
    488a:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    488c:	697b      	ldr	r3, [r7, #20]
    488e:	2200      	movs	r2, #0
    4890:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    4892:	697b      	ldr	r3, [r7, #20]
    4894:	2200      	movs	r2, #0
    4896:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    4898:	230f      	movs	r3, #15
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2201      	movs	r2, #1
    48a0:	4013      	ands	r3, r2
    48a2:	d004      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    48a4:	697b      	ldr	r3, [r7, #20]
    48a6:	68db      	ldr	r3, [r3, #12]
    48a8:	697a      	ldr	r2, [r7, #20]
    48aa:	0010      	movs	r0, r2
    48ac:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    48ae:	693b      	ldr	r3, [r7, #16]
    48b0:	8b5b      	ldrh	r3, [r3, #26]
    48b2:	b29b      	uxth	r3, r3
    48b4:	001a      	movs	r2, r3
    48b6:	2343      	movs	r3, #67	; 0x43
    48b8:	4013      	ands	r3, r2
    48ba:	d00e      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    48bc:	697b      	ldr	r3, [r7, #20]
    48be:	2231      	movs	r2, #49	; 0x31
    48c0:	2110      	movs	r1, #16
    48c2:	5499      	strb	r1, [r3, r2]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    48c4:	230f      	movs	r3, #15
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	2220      	movs	r2, #32
    48cc:	4013      	ands	r3, r2
    48ce:	d004      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    48d0:	697b      	ldr	r3, [r7, #20]
    48d2:	6a1b      	ldr	r3, [r3, #32]
    48d4:	697a      	ldr	r2, [r7, #20]
    48d6:	0010      	movs	r0, r2
    48d8:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	7a5b      	ldrb	r3, [r3, #9]
    48de:	2b00      	cmp	r3, #0
    48e0:	d005      	beq.n	48ee <_i2c_slave_interrupt_handler+0x11a>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
    48e2:	697b      	ldr	r3, [r7, #20]
    48e4:	2100      	movs	r1, #0
    48e6:	0018      	movs	r0, r3
    48e8:	4b86      	ldr	r3, [pc, #536]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    48ea:	4798      	blx	r3
    48ec:	e045      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	8b5b      	ldrh	r3, [r3, #26]
    48f2:	b29b      	uxth	r3, r3
    48f4:	001a      	movs	r2, r3
    48f6:	2308      	movs	r3, #8
    48f8:	4013      	ands	r3, r2
    48fa:	d01f      	beq.n	493c <_i2c_slave_interrupt_handler+0x168>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    48fc:	697b      	ldr	r3, [r7, #20]
    48fe:	2230      	movs	r2, #48	; 0x30
    4900:	2101      	movs	r1, #1
    4902:	5499      	strb	r1, [r3, r2]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2204      	movs	r2, #4
    490c:	4013      	ands	r3, r2
    490e:	d004      	beq.n	491a <_i2c_slave_interrupt_handler+0x146>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	695b      	ldr	r3, [r3, #20]
    4914:	697a      	ldr	r2, [r7, #20]
    4916:	0010      	movs	r0, r2
    4918:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    491a:	697b      	ldr	r3, [r7, #20]
    491c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    491e:	b29b      	uxth	r3, r3
    4920:	2b00      	cmp	r3, #0
    4922:	d105      	bne.n	4930 <_i2c_slave_interrupt_handler+0x15c>
				/* Data buffer not set up, NACK address, workaround 13574*/
				_i2c_slave_set_ctrlb_ackact(module, false);
    4924:	697b      	ldr	r3, [r7, #20]
    4926:	2100      	movs	r1, #0
    4928:	0018      	movs	r0, r3
    492a:	4b76      	ldr	r3, [pc, #472]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    492c:	4798      	blx	r3
    492e:	e024      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4930:	697b      	ldr	r3, [r7, #20]
    4932:	2101      	movs	r1, #1
    4934:	0018      	movs	r0, r3
    4936:	4b73      	ldr	r3, [pc, #460]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4938:	4798      	blx	r3
    493a:	e01e      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = I2C_TRANSFER_WRITE;
    493c:	697b      	ldr	r3, [r7, #20]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	2100      	movs	r1, #0
    4942:	5499      	strb	r1, [r3, r2]

			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    4944:	230f      	movs	r3, #15
    4946:	18fb      	adds	r3, r7, r3
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2208      	movs	r2, #8
    494c:	4013      	ands	r3, r2
    494e:	d004      	beq.n	495a <_i2c_slave_interrupt_handler+0x186>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    4950:	697b      	ldr	r3, [r7, #20]
    4952:	699b      	ldr	r3, [r3, #24]
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	0010      	movs	r0, r2
    4958:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    495e:	b29b      	uxth	r3, r3
    4960:	2b00      	cmp	r3, #0
    4962:	d105      	bne.n	4970 <_i2c_slave_interrupt_handler+0x19c>
				/* Data buffer not set up, NACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, false);
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	2100      	movs	r1, #0
    4968:	0018      	movs	r0, r3
    496a:	4b66      	ldr	r3, [pc, #408]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    496c:	4798      	blx	r3
    496e:	e004      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2101      	movs	r1, #1
    4974:	0018      	movs	r0, r3
    4976:	4b63      	ldr	r3, [pc, #396]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4978:	4798      	blx	r3
			}
		}

		/* ACK or NACK address, Workaround 13574 */
		_i2c_slave_set_ctrlb_cmd3(module);
    497a:	697b      	ldr	r3, [r7, #20]
    497c:	0018      	movs	r0, r3
    497e:	4b62      	ldr	r3, [pc, #392]	; (4b08 <_i2c_slave_interrupt_handler+0x334>)
    4980:	4798      	blx	r3

		/* ACK next incoming packet, workaround 13574 */
		_i2c_slave_set_ctrlb_ackact(module, true);
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	2101      	movs	r1, #1
    4986:	0018      	movs	r0, r3
    4988:	4b5e      	ldr	r3, [pc, #376]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    498a:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    498c:	e0d8      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	7e1b      	ldrb	r3, [r3, #24]
    4992:	b2db      	uxtb	r3, r3
    4994:	001a      	movs	r2, r3
    4996:	2301      	movs	r3, #1
    4998:	4013      	ands	r3, r2
    499a:	d054      	beq.n	4a46 <_i2c_slave_interrupt_handler+0x272>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	2201      	movs	r2, #1
    49a0:	761a      	strb	r2, [r3, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	2205      	movs	r2, #5
    49a6:	751a      	strb	r2, [r3, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49a8:	697b      	ldr	r3, [r7, #20]
    49aa:	2225      	movs	r2, #37	; 0x25
    49ac:	5c9b      	ldrb	r3, [r3, r2]
    49ae:	b2db      	uxtb	r3, r3
    49b0:	001a      	movs	r2, r3
    49b2:	2304      	movs	r3, #4
    49b4:	4013      	ands	r3, r2
    49b6:	d108      	bne.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    49b8:	697b      	ldr	r3, [r7, #20]
    49ba:	2225      	movs	r2, #37	; 0x25
    49bc:	5c9b      	ldrb	r3, [r3, r2]
    49be:	b2db      	uxtb	r3, r3
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49c0:	2b08      	cmp	r3, #8
    49c2:	d002      	beq.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    49c4:	693b      	ldr	r3, [r7, #16]
    49c6:	2202      	movs	r2, #2
    49c8:	751a      	strb	r2, [r3, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2231      	movs	r2, #49	; 0x31
    49ce:	5c9b      	ldrb	r3, [r3, r2]
    49d0:	b2db      	uxtb	r3, r3
    49d2:	2b1e      	cmp	r3, #30
    49d4:	d100      	bne.n	49d8 <_i2c_slave_interrupt_handler+0x204>
    49d6:	e0b3      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    49d8:	697b      	ldr	r3, [r7, #20]
    49da:	2231      	movs	r2, #49	; 0x31
    49dc:	5c9b      	ldrb	r3, [r3, r2]
    49de:	b2db      	uxtb	r3, r3
    49e0:	2b10      	cmp	r3, #16
    49e2:	d100      	bne.n	49e6 <_i2c_slave_interrupt_handler+0x212>
    49e4:	e0ac      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			module->status = STATUS_OK;
    49e6:	697b      	ldr	r3, [r7, #20]
    49e8:	2231      	movs	r2, #49	; 0x31
    49ea:	2100      	movs	r1, #0
    49ec:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    49ee:	697b      	ldr	r3, [r7, #20]
    49f0:	2200      	movs	r2, #0
    49f2:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    49f4:	697b      	ldr	r3, [r7, #20]
    49f6:	2200      	movs	r2, #0
    49f8:	851a      	strh	r2, [r3, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    49fa:	230f      	movs	r3, #15
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2202      	movs	r2, #2
    4a02:	4013      	ands	r3, r2
    4a04:	d00b      	beq.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	2230      	movs	r2, #48	; 0x30
    4a0a:	5c9b      	ldrb	r3, [r3, r2]
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d105      	bne.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	691b      	ldr	r3, [r3, #16]
    4a16:	697a      	ldr	r2, [r7, #20]
    4a18:	0010      	movs	r0, r2
    4a1a:	4798      	blx	r3
    4a1c:	e090      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    4a1e:	230f      	movs	r3, #15
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	4013      	ands	r3, r2
    4a28:	d100      	bne.n	4a2c <_i2c_slave_interrupt_handler+0x258>
    4a2a:	e089      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4a2c:	697b      	ldr	r3, [r7, #20]
    4a2e:	2230      	movs	r2, #48	; 0x30
    4a30:	5c9b      	ldrb	r3, [r3, r2]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b01      	cmp	r3, #1
    4a36:	d000      	beq.n	4a3a <_i2c_slave_interrupt_handler+0x266>
    4a38:	e082      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	68db      	ldr	r3, [r3, #12]
    4a3e:	697a      	ldr	r2, [r7, #20]
    4a40:	0010      	movs	r0, r2
    4a42:	4798      	blx	r3
}
    4a44:	e07c      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	7e1b      	ldrb	r3, [r3, #24]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	001a      	movs	r2, r3
    4a4e:	2304      	movs	r3, #4
    4a50:	4013      	ands	r3, r2
    4a52:	d100      	bne.n	4a56 <_i2c_slave_interrupt_handler+0x282>
    4a54:	e074      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
		if (module->buffer_remaining <= 0 ||
    4a56:	697b      	ldr	r3, [r7, #20]
    4a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d013      	beq.n	4a86 <_i2c_slave_interrupt_handler+0x2b2>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2230      	movs	r2, #48	; 0x30
    4a62:	5c9b      	ldrb	r3, [r3, r2]
    4a64:	b2db      	uxtb	r3, r3
		if (module->buffer_remaining <= 0 ||
    4a66:	2b01      	cmp	r3, #1
    4a68:	d150      	bne.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(module->buffer_length > module->buffer_remaining) &&
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a6e:	b29a      	uxth	r2, r3
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a74:	429a      	cmp	r2, r3
    4a76:	d949      	bls.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    4a78:	693b      	ldr	r3, [r7, #16]
    4a7a:	8b5b      	ldrh	r3, [r3, #26]
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	001a      	movs	r2, r3
    4a80:	2304      	movs	r3, #4
    4a82:	4013      	ands	r3, r2
				(module->buffer_length > module->buffer_remaining) &&
    4a84:	d042      	beq.n	4b0c <_i2c_slave_interrupt_handler+0x338>
			module->buffer_remaining = 0;
    4a86:	697b      	ldr	r3, [r7, #20]
    4a88:	2200      	movs	r2, #0
    4a8a:	851a      	strh	r2, [r3, #40]	; 0x28
			module->buffer_length = 0;
    4a8c:	697b      	ldr	r3, [r7, #20]
    4a8e:	2200      	movs	r2, #0
    4a90:	84da      	strh	r2, [r3, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	2230      	movs	r2, #48	; 0x30
    4a96:	5c9b      	ldrb	r3, [r3, r2]
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d11b      	bne.n	4ad6 <_i2c_slave_interrupt_handler+0x302>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	2100      	movs	r1, #0
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b17      	ldr	r3, [pc, #92]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4aa6:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4aa8:	693b      	ldr	r3, [r7, #16]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	0292      	lsls	r2, r2, #10
    4ab0:	431a      	orrs	r2, r3
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	605a      	str	r2, [r3, #4]
				module->status = STATUS_ERR_OVERFLOW;
    4ab6:	697b      	ldr	r3, [r7, #20]
    4ab8:	2231      	movs	r2, #49	; 0x31
    4aba:	211e      	movs	r1, #30
    4abc:	5499      	strb	r1, [r3, r2]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    4abe:	230f      	movs	r3, #15
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	2210      	movs	r2, #16
    4ac6:	4013      	ands	r3, r2
    4ac8:	d039      	beq.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	69db      	ldr	r3, [r3, #28]
    4ace:	697a      	ldr	r2, [r7, #20]
    4ad0:	0010      	movs	r0, r2
    4ad2:	4798      	blx	r3
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4ad4:	e033      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	2100      	movs	r1, #0
    4ada:	0018      	movs	r0, r3
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4ade:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4ae0:	693b      	ldr	r3, [r7, #16]
    4ae2:	685b      	ldr	r3, [r3, #4]
    4ae4:	2280      	movs	r2, #128	; 0x80
    4ae6:	0292      	lsls	r2, r2, #10
    4ae8:	431a      	orrs	r2, r3
    4aea:	693b      	ldr	r3, [r7, #16]
    4aec:	605a      	str	r2, [r3, #4]
				module->status = STATUS_OK;
    4aee:	697b      	ldr	r3, [r7, #20]
    4af0:	2231      	movs	r2, #49	; 0x31
    4af2:	2100      	movs	r1, #0
    4af4:	5499      	strb	r1, [r3, r2]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    4af6:	693b      	ldr	r3, [r7, #16]
    4af8:	2204      	movs	r2, #4
    4afa:	751a      	strb	r2, [r3, #20]
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4afc:	e01f      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	20000468 	.word	0x20000468
    4b04:	00004609 	.word	0x00004609
    4b08:	00004655 	.word	0x00004655
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b10:	b29b      	uxth	r3, r3
    4b12:	2b00      	cmp	r3, #0
    4b14:	d014      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    4b16:	697b      	ldr	r3, [r7, #20]
    4b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d010      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b1e:	697b      	ldr	r3, [r7, #20]
    4b20:	2230      	movs	r2, #48	; 0x30
    4b22:	5c9b      	ldrb	r3, [r3, r2]
    4b24:	b2db      	uxtb	r3, r3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d104      	bne.n	4b34 <_i2c_slave_interrupt_handler+0x360>
				_i2c_slave_read(module);
    4b2a:	697b      	ldr	r3, [r7, #20]
    4b2c:	0018      	movs	r0, r3
    4b2e:	4b06      	ldr	r3, [pc, #24]	; (4b48 <_i2c_slave_interrupt_handler+0x374>)
    4b30:	4798      	blx	r3
}
    4b32:	e005      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				_i2c_slave_write(module);
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	0018      	movs	r0, r3
    4b38:	4b04      	ldr	r3, [pc, #16]	; (4b4c <_i2c_slave_interrupt_handler+0x378>)
    4b3a:	4798      	blx	r3
}
    4b3c:	e000      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b3e:	46c0      	nop			; (mov r8, r8)
}
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	46bd      	mov	sp, r7
    4b44:	b006      	add	sp, #24
    4b46:	bd80      	pop	{r7, pc}
    4b48:	00004685 	.word	0x00004685
    4b4c:	000046bb 	.word	0x000046bb

00004b50 <system_gclk_chan_get_config_defaults>:
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	2200      	movs	r2, #0
    4b5c:	701a      	strb	r2, [r3, #0]
}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	46bd      	mov	sp, r7
    4b62:	b002      	add	sp, #8
    4b64:	bd80      	pop	{r7, pc}
	...

00004b68 <system_apb_clock_set_mask>:
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b082      	sub	sp, #8
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	0002      	movs	r2, r0
    4b70:	6039      	str	r1, [r7, #0]
    4b72:	1dfb      	adds	r3, r7, #7
    4b74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d00a      	beq.n	4b94 <system_apb_clock_set_mask+0x2c>
    4b7e:	2b02      	cmp	r3, #2
    4b80:	d00f      	beq.n	4ba2 <system_apb_clock_set_mask+0x3a>
    4b82:	2b00      	cmp	r3, #0
    4b84:	d114      	bne.n	4bb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b8a:	6991      	ldr	r1, [r2, #24]
    4b8c:	683a      	ldr	r2, [r7, #0]
    4b8e:	430a      	orrs	r2, r1
    4b90:	619a      	str	r2, [r3, #24]
			break;
    4b92:	e00f      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4b94:	4b0a      	ldr	r3, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b96:	4a0a      	ldr	r2, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b98:	69d1      	ldr	r1, [r2, #28]
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	430a      	orrs	r2, r1
    4b9e:	61da      	str	r2, [r3, #28]
			break;
    4ba0:	e008      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba4:	4a06      	ldr	r2, [pc, #24]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba6:	6a11      	ldr	r1, [r2, #32]
    4ba8:	683a      	ldr	r2, [r7, #0]
    4baa:	430a      	orrs	r2, r1
    4bac:	621a      	str	r2, [r3, #32]
			break;
    4bae:	e001      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bb0:	2317      	movs	r3, #23
    4bb2:	e000      	b.n	4bb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bb4:	2300      	movs	r3, #0
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b002      	add	sp, #8
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	40000400 	.word	0x40000400

00004bc4 <system_pinmux_get_config_defaults>:
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	2280      	movs	r2, #128	; 0x80
    4bd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	2200      	movs	r2, #0
    4bd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	2201      	movs	r2, #1
    4bdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	2200      	movs	r2, #0
    4be2:	70da      	strb	r2, [r3, #3]
}
    4be4:	46c0      	nop			; (mov r8, r8)
    4be6:	46bd      	mov	sp, r7
    4be8:	b002      	add	sp, #8
    4bea:	bd80      	pop	{r7, pc}

00004bec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4bf4:	2300      	movs	r3, #0
    4bf6:	60fb      	str	r3, [r7, #12]
    4bf8:	e00c      	b.n	4c14 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    4bfa:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_tcc_get_inst_index+0x38>)
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	0092      	lsls	r2, r2, #2
    4c00:	58d2      	ldr	r2, [r2, r3]
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	429a      	cmp	r2, r3
    4c06:	d102      	bne.n	4c0e <_tcc_get_inst_index+0x22>
			return i;
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	e006      	b.n	4c1c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	3301      	adds	r3, #1
    4c12:	60fb      	str	r3, [r7, #12]
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	2b02      	cmp	r3, #2
    4c18:	d9ef      	bls.n	4bfa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c1a:	2300      	movs	r3, #0
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	46bd      	mov	sp, r7
    4c20:	b004      	add	sp, #16
    4c22:	bd80      	pop	{r7, pc}
    4c24:	0001736c 	.word	0x0001736c

00004c28 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c28:	b590      	push	{r4, r7, lr}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c32:	230f      	movs	r3, #15
    4c34:	18fc      	adds	r4, r7, r3
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	0018      	movs	r0, r3
    4c3a:	4bad      	ldr	r3, [pc, #692]	; (4ef0 <tcc_get_config_defaults+0x2c8>)
    4c3c:	4798      	blx	r3
    4c3e:	0003      	movs	r3, r0
    4c40:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	2200      	movs	r2, #0
    4c46:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c48:	230f      	movs	r3, #15
    4c4a:	18fb      	adds	r3, r7, r3
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4ba9      	ldr	r3, [pc, #676]	; (4ef4 <tcc_get_config_defaults+0x2cc>)
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	58d2      	ldr	r2, [r2, r3]
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	2200      	movs	r2, #0
    4c5c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	2200      	movs	r2, #0
    4c62:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	2200      	movs	r2, #0
    4c68:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2200      	movs	r2, #0
    4c6e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	2200      	movs	r2, #0
    4c74:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2200      	movs	r2, #0
    4c7a:	61da      	str	r2, [r3, #28]
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	2200      	movs	r2, #0
    4c80:	621a      	str	r2, [r3, #32]
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	2200      	movs	r2, #0
    4c86:	625a      	str	r2, [r3, #36]	; 0x24
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2200      	movs	r2, #0
    4c8c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	2200      	movs	r2, #0
    4c92:	751a      	strb	r2, [r3, #20]
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	2200      	movs	r2, #0
    4c98:	755a      	strb	r2, [r3, #21]
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	2200      	movs	r2, #0
    4c9e:	759a      	strb	r2, [r3, #22]
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2200      	movs	r2, #0
    4ca4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2200      	movs	r2, #0
    4caa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	2200      	movs	r2, #0
    4cb0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	2200      	movs	r2, #0
    4cb6:	741a      	strb	r2, [r3, #16]
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2200      	movs	r2, #0
    4cbc:	745a      	strb	r2, [r3, #17]
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2200      	movs	r2, #0
    4cc2:	749a      	strb	r2, [r3, #18]
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	222c      	movs	r2, #44	; 0x2c
    4cce:	2100      	movs	r1, #0
    4cd0:	5499      	strb	r1, [r3, r2]
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	222d      	movs	r2, #45	; 0x2d
    4cd6:	2100      	movs	r1, #0
    4cd8:	5499      	strb	r1, [r3, r2]
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	222e      	movs	r2, #46	; 0x2e
    4cde:	2100      	movs	r1, #0
    4ce0:	5499      	strb	r1, [r3, r2]
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	222f      	movs	r2, #47	; 0x2f
    4ce6:	2100      	movs	r1, #0
    4ce8:	5499      	strb	r1, [r3, r2]
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	2230      	movs	r2, #48	; 0x30
    4cee:	2100      	movs	r1, #0
    4cf0:	5499      	strb	r1, [r3, r2]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	2231      	movs	r2, #49	; 0x31
    4cf6:	2100      	movs	r1, #0
    4cf8:	5499      	strb	r1, [r3, r2]
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	2232      	movs	r2, #50	; 0x32
    4cfe:	2100      	movs	r1, #0
    4d00:	5499      	strb	r1, [r3, r2]
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	2233      	movs	r2, #51	; 0x33
    4d06:	2100      	movs	r1, #0
    4d08:	5499      	strb	r1, [r3, r2]
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2234      	movs	r2, #52	; 0x34
    4d0e:	2100      	movs	r1, #0
    4d10:	5499      	strb	r1, [r3, r2]
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2235      	movs	r2, #53	; 0x35
    4d16:	2100      	movs	r1, #0
    4d18:	5499      	strb	r1, [r3, r2]
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	2236      	movs	r2, #54	; 0x36
    4d1e:	2100      	movs	r1, #0
    4d20:	5499      	strb	r1, [r3, r2]
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	2237      	movs	r2, #55	; 0x37
    4d26:	2100      	movs	r1, #0
    4d28:	5499      	strb	r1, [r3, r2]
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	2238      	movs	r2, #56	; 0x38
    4d2e:	2100      	movs	r1, #0
    4d30:	5499      	strb	r1, [r3, r2]
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	2239      	movs	r2, #57	; 0x39
    4d36:	2100      	movs	r1, #0
    4d38:	5499      	strb	r1, [r3, r2]
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	223a      	movs	r2, #58	; 0x3a
    4d3e:	2100      	movs	r1, #0
    4d40:	5499      	strb	r1, [r3, r2]
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	223b      	movs	r2, #59	; 0x3b
    4d46:	2100      	movs	r1, #0
    4d48:	5499      	strb	r1, [r3, r2]
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	223c      	movs	r2, #60	; 0x3c
    4d4e:	2100      	movs	r1, #0
    4d50:	5499      	strb	r1, [r3, r2]
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	223d      	movs	r2, #61	; 0x3d
    4d56:	2100      	movs	r1, #0
    4d58:	5499      	strb	r1, [r3, r2]
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	223e      	movs	r2, #62	; 0x3e
    4d5e:	2100      	movs	r1, #0
    4d60:	5499      	strb	r1, [r3, r2]
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	223f      	movs	r2, #63	; 0x3f
    4d66:	2100      	movs	r1, #0
    4d68:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	2240      	movs	r2, #64	; 0x40
    4d6e:	2100      	movs	r1, #0
    4d70:	5499      	strb	r1, [r3, r2]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	2241      	movs	r2, #65	; 0x41
    4d76:	2100      	movs	r1, #0
    4d78:	5499      	strb	r1, [r3, r2]
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	2242      	movs	r2, #66	; 0x42
    4d7e:	2100      	movs	r1, #0
    4d80:	5499      	strb	r1, [r3, r2]
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	2243      	movs	r2, #67	; 0x43
    4d86:	2100      	movs	r1, #0
    4d88:	5499      	strb	r1, [r3, r2]
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	2244      	movs	r2, #68	; 0x44
    4d8e:	2100      	movs	r1, #0
    4d90:	5499      	strb	r1, [r3, r2]
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	2245      	movs	r2, #69	; 0x45
    4d96:	2100      	movs	r1, #0
    4d98:	5499      	strb	r1, [r3, r2]
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	2246      	movs	r2, #70	; 0x46
    4d9e:	2100      	movs	r1, #0
    4da0:	5499      	strb	r1, [r3, r2]
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2247      	movs	r2, #71	; 0x47
    4da6:	2100      	movs	r1, #0
    4da8:	5499      	strb	r1, [r3, r2]
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	2248      	movs	r2, #72	; 0x48
    4dae:	2100      	movs	r1, #0
    4db0:	5499      	strb	r1, [r3, r2]
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	2249      	movs	r2, #73	; 0x49
    4db6:	2100      	movs	r1, #0
    4db8:	5499      	strb	r1, [r3, r2]
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	224a      	movs	r2, #74	; 0x4a
    4dbe:	2100      	movs	r1, #0
    4dc0:	5499      	strb	r1, [r3, r2]
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	224b      	movs	r2, #75	; 0x4b
    4dc6:	2100      	movs	r1, #0
    4dc8:	5499      	strb	r1, [r3, r2]
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	224c      	movs	r2, #76	; 0x4c
    4dce:	2100      	movs	r1, #0
    4dd0:	5499      	strb	r1, [r3, r2]
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	224d      	movs	r2, #77	; 0x4d
    4dd6:	2100      	movs	r1, #0
    4dd8:	5499      	strb	r1, [r3, r2]
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	224e      	movs	r2, #78	; 0x4e
    4dde:	2100      	movs	r1, #0
    4de0:	5499      	strb	r1, [r3, r2]
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	224f      	movs	r2, #79	; 0x4f
    4de6:	2100      	movs	r1, #0
    4de8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	2250      	movs	r2, #80	; 0x50
    4dee:	2100      	movs	r1, #0
    4df0:	5499      	strb	r1, [r3, r2]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	2251      	movs	r2, #81	; 0x51
    4df6:	2100      	movs	r1, #0
    4df8:	5499      	strb	r1, [r3, r2]
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	2252      	movs	r2, #82	; 0x52
    4dfe:	2100      	movs	r1, #0
    4e00:	5499      	strb	r1, [r3, r2]
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	2253      	movs	r2, #83	; 0x53
    4e06:	2100      	movs	r1, #0
    4e08:	5499      	strb	r1, [r3, r2]
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	2254      	movs	r2, #84	; 0x54
    4e0e:	2100      	movs	r1, #0
    4e10:	5499      	strb	r1, [r3, r2]
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	2255      	movs	r2, #85	; 0x55
    4e16:	2100      	movs	r1, #0
    4e18:	5499      	strb	r1, [r3, r2]
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	2256      	movs	r2, #86	; 0x56
    4e1e:	2100      	movs	r1, #0
    4e20:	5499      	strb	r1, [r3, r2]
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	2257      	movs	r2, #87	; 0x57
    4e26:	2100      	movs	r1, #0
    4e28:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	2298      	movs	r2, #152	; 0x98
    4e2e:	2100      	movs	r1, #0
    4e30:	5499      	strb	r1, [r3, r2]
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	2200      	movs	r2, #0
    4e36:	659a      	str	r2, [r3, #88]	; 0x58
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2200      	movs	r2, #0
    4e3c:	679a      	str	r2, [r3, #120]	; 0x78
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	2299      	movs	r2, #153	; 0x99
    4e42:	2100      	movs	r1, #0
    4e44:	5499      	strb	r1, [r3, r2]
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	2200      	movs	r2, #0
    4e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	2200      	movs	r2, #0
    4e50:	67da      	str	r2, [r3, #124]	; 0x7c
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	229a      	movs	r2, #154	; 0x9a
    4e56:	2100      	movs	r1, #0
    4e58:	5499      	strb	r1, [r3, r2]
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2200      	movs	r2, #0
    4e5e:	661a      	str	r2, [r3, #96]	; 0x60
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2280      	movs	r2, #128	; 0x80
    4e64:	2100      	movs	r1, #0
    4e66:	5099      	str	r1, [r3, r2]
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	229b      	movs	r2, #155	; 0x9b
    4e6c:	2100      	movs	r1, #0
    4e6e:	5499      	strb	r1, [r3, r2]
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2200      	movs	r2, #0
    4e74:	665a      	str	r2, [r3, #100]	; 0x64
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	2284      	movs	r2, #132	; 0x84
    4e7a:	2100      	movs	r1, #0
    4e7c:	5099      	str	r1, [r3, r2]
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	229c      	movs	r2, #156	; 0x9c
    4e82:	2100      	movs	r1, #0
    4e84:	5499      	strb	r1, [r3, r2]
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	2200      	movs	r2, #0
    4e8a:	669a      	str	r2, [r3, #104]	; 0x68
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2288      	movs	r2, #136	; 0x88
    4e90:	2100      	movs	r1, #0
    4e92:	5099      	str	r1, [r3, r2]
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	229d      	movs	r2, #157	; 0x9d
    4e98:	2100      	movs	r1, #0
    4e9a:	5499      	strb	r1, [r3, r2]
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	2200      	movs	r2, #0
    4ea0:	66da      	str	r2, [r3, #108]	; 0x6c
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	228c      	movs	r2, #140	; 0x8c
    4ea6:	2100      	movs	r1, #0
    4ea8:	5099      	str	r1, [r3, r2]
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	229e      	movs	r2, #158	; 0x9e
    4eae:	2100      	movs	r1, #0
    4eb0:	5499      	strb	r1, [r3, r2]
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	2200      	movs	r2, #0
    4eb6:	671a      	str	r2, [r3, #112]	; 0x70
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	2290      	movs	r2, #144	; 0x90
    4ebc:	2100      	movs	r1, #0
    4ebe:	5099      	str	r1, [r3, r2]
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	229f      	movs	r2, #159	; 0x9f
    4ec4:	2100      	movs	r1, #0
    4ec6:	5499      	strb	r1, [r3, r2]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2200      	movs	r2, #0
    4ecc:	675a      	str	r2, [r3, #116]	; 0x74
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	2294      	movs	r2, #148	; 0x94
    4ed2:	2100      	movs	r1, #0
    4ed4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	22a0      	movs	r2, #160	; 0xa0
    4eda:	2101      	movs	r1, #1
    4edc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	22a1      	movs	r2, #161	; 0xa1
    4ee2:	2100      	movs	r1, #0
    4ee4:	5499      	strb	r1, [r3, r2]
}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	46bd      	mov	sp, r7
    4eea:	b005      	add	sp, #20
    4eec:	bd90      	pop	{r4, r7, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00004bed 	.word	0x00004bed
    4ef4:	00017388 	.word	0x00017388

00004ef8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b086      	sub	sp, #24
    4efc:	af00      	add	r7, sp, #0
    4efe:	60b9      	str	r1, [r7, #8]
    4f00:	607a      	str	r2, [r7, #4]
    4f02:	230f      	movs	r3, #15
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	1c02      	adds	r2, r0, #0
    4f08:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    4f0a:	2300      	movs	r3, #0
    4f0c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f0e:	2300      	movs	r3, #0
    4f10:	613b      	str	r3, [r7, #16]
    4f12:	e01d      	b.n	4f50 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    4f14:	68ba      	ldr	r2, [r7, #8]
    4f16:	693b      	ldr	r3, [r7, #16]
    4f18:	18d3      	adds	r3, r2, r3
    4f1a:	3310      	adds	r3, #16
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	2b01      	cmp	r3, #1
    4f20:	d113      	bne.n	4f4a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    4f22:	230f      	movs	r3, #15
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	4a1b      	ldr	r2, [pc, #108]	; (4f98 <_tcc_build_ctrla+0xa0>)
    4f2a:	5cd3      	ldrb	r3, [r2, r3]
    4f2c:	001a      	movs	r2, r3
    4f2e:	693b      	ldr	r3, [r7, #16]
    4f30:	429a      	cmp	r2, r3
    4f32:	da01      	bge.n	4f38 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    4f34:	2317      	movs	r3, #23
    4f36:	e02a      	b.n	4f8e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	045a      	lsls	r2, r3, #17
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	409a      	lsls	r2, r3
    4f40:	0013      	movs	r3, r2
    4f42:	001a      	movs	r2, r3
    4f44:	697b      	ldr	r3, [r7, #20]
    4f46:	4313      	orrs	r3, r2
    4f48:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	3301      	adds	r3, #1
    4f4e:	613b      	str	r3, [r7, #16]
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2b03      	cmp	r3, #3
    4f54:	ddde      	ble.n	4f14 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    4f56:	68bb      	ldr	r3, [r7, #8]
    4f58:	22a1      	movs	r2, #161	; 0xa1
    4f5a:	5c9b      	ldrb	r3, [r3, r2]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d004      	beq.n	4f6a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2280      	movs	r2, #128	; 0x80
    4f64:	0112      	lsls	r2, r2, #4
    4f66:	4313      	orrs	r3, r2
    4f68:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	7b1b      	ldrb	r3, [r3, #12]
    4f6e:	031b      	lsls	r3, r3, #12
    4f70:	001a      	movs	r2, r3
    4f72:	697b      	ldr	r3, [r7, #20]
    4f74:	4313      	orrs	r3, r2
    4f76:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	7adb      	ldrb	r3, [r3, #11]
    4f7c:	021b      	lsls	r3, r3, #8
    4f7e:	001a      	movs	r2, r3
    4f80:	697b      	ldr	r3, [r7, #20]
    4f82:	4313      	orrs	r3, r2
    4f84:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	697a      	ldr	r2, [r7, #20]
    4f8a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    4f8c:	2300      	movs	r3, #0
}
    4f8e:	0018      	movs	r0, r3
    4f90:	46bd      	mov	sp, r7
    4f92:	b006      	add	sp, #24
    4f94:	bd80      	pop	{r7, pc}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	00017394 	.word	0x00017394

00004f9c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b086      	sub	sp, #24
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	60b9      	str	r1, [r7, #8]
    4fa4:	607a      	str	r2, [r7, #4]
    4fa6:	230f      	movs	r3, #15
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	1c02      	adds	r2, r0, #0
    4fac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    4fae:	2317      	movs	r3, #23
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	2200      	movs	r2, #0
    4fb4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    4fb6:	68bb      	ldr	r3, [r7, #8]
    4fb8:	7a1b      	ldrb	r3, [r3, #8]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d007      	beq.n	4fce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4fbe:	2317      	movs	r3, #23
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	2217      	movs	r2, #23
    4fc4:	18ba      	adds	r2, r7, r2
    4fc6:	7812      	ldrb	r2, [r2, #0]
    4fc8:	2104      	movs	r1, #4
    4fca:	430a      	orrs	r2, r1
    4fcc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4fce:	68bb      	ldr	r3, [r7, #8]
    4fd0:	7a5b      	ldrb	r3, [r3, #9]
    4fd2:	2b01      	cmp	r3, #1
    4fd4:	d107      	bne.n	4fe6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    4fd6:	2317      	movs	r3, #23
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	2217      	movs	r2, #23
    4fdc:	18ba      	adds	r2, r7, r2
    4fde:	7812      	ldrb	r2, [r2, #0]
    4fe0:	2101      	movs	r1, #1
    4fe2:	430a      	orrs	r2, r1
    4fe4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	2217      	movs	r2, #23
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	7812      	ldrb	r2, [r2, #0]
    4fee:	701a      	strb	r2, [r3, #0]
}
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	46bd      	mov	sp, r7
    4ff4:	b006      	add	sp, #24
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b088      	sub	sp, #32
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	60b9      	str	r1, [r7, #8]
    5000:	607a      	str	r2, [r7, #4]
    5002:	230f      	movs	r3, #15
    5004:	18fb      	adds	r3, r7, r3
    5006:	1c02      	adds	r2, r0, #0
    5008:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    500a:	230f      	movs	r3, #15
    500c:	18fb      	adds	r3, r7, r3
    500e:	781a      	ldrb	r2, [r3, #0]
    5010:	231b      	movs	r3, #27
    5012:	18fb      	adds	r3, r7, r3
    5014:	493e      	ldr	r1, [pc, #248]	; (5110 <_tcc_build_faults+0x118>)
    5016:	5c8a      	ldrb	r2, [r1, r2]
    5018:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    501a:	2300      	movs	r3, #0
    501c:	61fb      	str	r3, [r7, #28]
    501e:	e06e      	b.n	50fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    5020:	69fa      	ldr	r2, [r7, #28]
    5022:	0013      	movs	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	189b      	adds	r3, r3, r2
    5028:	005b      	lsls	r3, r3, #1
    502a:	3328      	adds	r3, #40	; 0x28
    502c:	68ba      	ldr	r2, [r7, #8]
    502e:	18d3      	adds	r3, r2, r3
    5030:	3304      	adds	r3, #4
    5032:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	7a5b      	ldrb	r3, [r3, #9]
    5038:	221b      	movs	r2, #27
    503a:	18ba      	adds	r2, r7, r2
    503c:	7812      	ldrb	r2, [r2, #0]
    503e:	429a      	cmp	r2, r3
    5040:	d801      	bhi.n	5046 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    5042:	2317      	movs	r3, #23
    5044:	e05f      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    5046:	697b      	ldr	r3, [r7, #20]
    5048:	781b      	ldrb	r3, [r3, #0]
    504a:	2b0f      	cmp	r3, #15
    504c:	d901      	bls.n	5052 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    504e:	2317      	movs	r3, #23
    5050:	e059      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5052:	697b      	ldr	r3, [r7, #20]
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	061b      	lsls	r3, r3, #24
    5058:	001a      	movs	r2, r3
    505a:	23f0      	movs	r3, #240	; 0xf0
    505c:	051b      	lsls	r3, r3, #20
    505e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5060:	697b      	ldr	r3, [r7, #20]
    5062:	785b      	ldrb	r3, [r3, #1]
    5064:	041b      	lsls	r3, r3, #16
    5066:	0019      	movs	r1, r3
    5068:	23ff      	movs	r3, #255	; 0xff
    506a:	041b      	lsls	r3, r3, #16
    506c:	400b      	ands	r3, r1
    506e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	2b00      	cmp	r3, #0
    5076:	d001      	beq.n	507c <_tcc_build_faults+0x84>
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	e000      	b.n	507e <_tcc_build_faults+0x86>
    507c:	2300      	movs	r3, #0
    507e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5080:	697b      	ldr	r3, [r7, #20]
    5082:	78db      	ldrb	r3, [r3, #3]
    5084:	2b00      	cmp	r3, #0
    5086:	d001      	beq.n	508c <_tcc_build_faults+0x94>
    5088:	2308      	movs	r3, #8
    508a:	e000      	b.n	508e <_tcc_build_faults+0x96>
    508c:	2300      	movs	r3, #0
    508e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	791b      	ldrb	r3, [r3, #4]
    5094:	2b00      	cmp	r3, #0
    5096:	d001      	beq.n	509c <_tcc_build_faults+0xa4>
    5098:	2310      	movs	r3, #16
    509a:	e000      	b.n	509e <_tcc_build_faults+0xa6>
    509c:	2300      	movs	r3, #0
    509e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    50a0:	697b      	ldr	r3, [r7, #20]
    50a2:	795b      	ldrb	r3, [r3, #5]
    50a4:	0019      	movs	r1, r3
    50a6:	2303      	movs	r3, #3
    50a8:	400b      	ands	r3, r1
    50aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    50ac:	697b      	ldr	r3, [r7, #20]
    50ae:	799b      	ldrb	r3, [r3, #6]
    50b0:	015b      	lsls	r3, r3, #5
    50b2:	0019      	movs	r1, r3
    50b4:	2360      	movs	r3, #96	; 0x60
    50b6:	400b      	ands	r3, r1
    50b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    50ba:	697b      	ldr	r3, [r7, #20]
    50bc:	79db      	ldrb	r3, [r3, #7]
    50be:	021b      	lsls	r3, r3, #8
    50c0:	0019      	movs	r1, r3
    50c2:	23c0      	movs	r3, #192	; 0xc0
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	400b      	ands	r3, r1
    50c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    50ca:	697b      	ldr	r3, [r7, #20]
    50cc:	7a1b      	ldrb	r3, [r3, #8]
    50ce:	031b      	lsls	r3, r3, #12
    50d0:	0019      	movs	r1, r3
    50d2:	23e0      	movs	r3, #224	; 0xe0
    50d4:	01db      	lsls	r3, r3, #7
    50d6:	400b      	ands	r3, r1
    50d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    50da:	697b      	ldr	r3, [r7, #20]
    50dc:	7a5b      	ldrb	r3, [r3, #9]
    50de:	029b      	lsls	r3, r3, #10
    50e0:	0019      	movs	r1, r3
    50e2:	23c0      	movs	r3, #192	; 0xc0
    50e4:	011b      	lsls	r3, r3, #4
    50e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    50e8:	4313      	orrs	r3, r2
    50ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    50ec:	69fb      	ldr	r3, [r7, #28]
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	693a      	ldr	r2, [r7, #16]
    50f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    50f8:	69fb      	ldr	r3, [r7, #28]
    50fa:	3301      	adds	r3, #1
    50fc:	61fb      	str	r3, [r7, #28]
    50fe:	69fb      	ldr	r3, [r7, #28]
    5100:	2b01      	cmp	r3, #1
    5102:	dd8d      	ble.n	5020 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    5104:	2300      	movs	r3, #0
}
    5106:	0018      	movs	r0, r3
    5108:	46bd      	mov	sp, r7
    510a:	b008      	add	sp, #32
    510c:	bd80      	pop	{r7, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	00017394 	.word	0x00017394

00005114 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    5114:	b580      	push	{r7, lr}
    5116:	b088      	sub	sp, #32
    5118:	af00      	add	r7, sp, #0
    511a:	60b9      	str	r1, [r7, #8]
    511c:	607a      	str	r2, [r7, #4]
    511e:	230f      	movs	r3, #15
    5120:	18fb      	adds	r3, r7, r3
    5122:	1c02      	adds	r2, r0, #0
    5124:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5126:	230f      	movs	r3, #15
    5128:	18fb      	adds	r3, r7, r3
    512a:	781a      	ldrb	r2, [r3, #0]
    512c:	2317      	movs	r3, #23
    512e:	18fb      	adds	r3, r7, r3
    5130:	492d      	ldr	r1, [pc, #180]	; (51e8 <_tcc_build_drvctrl+0xd4>)
    5132:	5c8a      	ldrb	r2, [r1, r2]
    5134:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    5136:	2300      	movs	r3, #0
    5138:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    513a:	2300      	movs	r3, #0
    513c:	61fb      	str	r3, [r7, #28]
    513e:	e048      	b.n	51d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    5140:	68ba      	ldr	r2, [r7, #8]
    5142:	2150      	movs	r1, #80	; 0x50
    5144:	69fb      	ldr	r3, [r7, #28]
    5146:	18d3      	adds	r3, r2, r3
    5148:	185b      	adds	r3, r3, r1
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d010      	beq.n	5172 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    5150:	2317      	movs	r3, #23
    5152:	18fb      	adds	r3, r7, r3
    5154:	781a      	ldrb	r2, [r3, #0]
    5156:	69fb      	ldr	r3, [r7, #28]
    5158:	429a      	cmp	r2, r3
    515a:	d801      	bhi.n	5160 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    515c:	2317      	movs	r3, #23
    515e:	e03f      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	025a      	lsls	r2, r3, #9
    5164:	69fb      	ldr	r3, [r7, #28]
    5166:	409a      	lsls	r2, r3
    5168:	0013      	movs	r3, r2
    516a:	001a      	movs	r2, r3
    516c:	69bb      	ldr	r3, [r7, #24]
    516e:	4313      	orrs	r3, r2
    5170:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5172:	68ba      	ldr	r2, [r7, #8]
    5174:	69fb      	ldr	r3, [r7, #28]
    5176:	331c      	adds	r3, #28
    5178:	005b      	lsls	r3, r3, #1
    517a:	18d3      	adds	r3, r2, r3
    517c:	3309      	adds	r3, #9
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d023      	beq.n	51cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5184:	2317      	movs	r3, #23
    5186:	18fb      	adds	r3, r7, r3
    5188:	781a      	ldrb	r2, [r3, #0]
    518a:	69fb      	ldr	r3, [r7, #28]
    518c:	429a      	cmp	r2, r3
    518e:	d801      	bhi.n	5194 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    5190:	2317      	movs	r3, #23
    5192:	e025      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5194:	68ba      	ldr	r2, [r7, #8]
    5196:	69fb      	ldr	r3, [r7, #28]
    5198:	331c      	adds	r3, #28
    519a:	005b      	lsls	r3, r3, #1
    519c:	18d3      	adds	r3, r2, r3
    519e:	3309      	adds	r3, #9
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	2b02      	cmp	r3, #2
    51a4:	d10a      	bne.n	51bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    51a6:	2302      	movs	r3, #2
    51a8:	33ff      	adds	r3, #255	; 0xff
    51aa:	001a      	movs	r2, r3
    51ac:	69fb      	ldr	r3, [r7, #28]
    51ae:	409a      	lsls	r2, r3
    51b0:	0013      	movs	r3, r2
    51b2:	001a      	movs	r2, r3
    51b4:	69bb      	ldr	r3, [r7, #24]
    51b6:	4313      	orrs	r3, r2
    51b8:	61bb      	str	r3, [r7, #24]
    51ba:	e007      	b.n	51cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    51bc:	2201      	movs	r2, #1
    51be:	69fb      	ldr	r3, [r7, #28]
    51c0:	409a      	lsls	r2, r3
    51c2:	0013      	movs	r3, r2
    51c4:	001a      	movs	r2, r3
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	4313      	orrs	r3, r2
    51ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    51cc:	69fb      	ldr	r3, [r7, #28]
    51ce:	3301      	adds	r3, #1
    51d0:	61fb      	str	r3, [r7, #28]
    51d2:	69fb      	ldr	r3, [r7, #28]
    51d4:	2b07      	cmp	r3, #7
    51d6:	d9b3      	bls.n	5140 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	69ba      	ldr	r2, [r7, #24]
    51dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    51de:	2300      	movs	r3, #0
}
    51e0:	0018      	movs	r0, r3
    51e2:	46bd      	mov	sp, r7
    51e4:	b008      	add	sp, #32
    51e6:	bd80      	pop	{r7, pc}
    51e8:	00017398 	.word	0x00017398

000051ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    51ec:	b580      	push	{r7, lr}
    51ee:	b088      	sub	sp, #32
    51f0:	af00      	add	r7, sp, #0
    51f2:	60b9      	str	r1, [r7, #8]
    51f4:	607a      	str	r2, [r7, #4]
    51f6:	230f      	movs	r3, #15
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	1c02      	adds	r2, r0, #0
    51fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    51fe:	230f      	movs	r3, #15
    5200:	18fb      	adds	r3, r7, r3
    5202:	781a      	ldrb	r2, [r3, #0]
    5204:	2317      	movs	r3, #23
    5206:	18fb      	adds	r3, r7, r3
    5208:	491d      	ldr	r1, [pc, #116]	; (5280 <_tcc_build_waves+0x94>)
    520a:	5c8a      	ldrb	r2, [r1, r2]
    520c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	3310      	adds	r3, #16
    5212:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5214:	693b      	ldr	r3, [r7, #16]
    5216:	7a5b      	ldrb	r3, [r3, #9]
    5218:	011b      	lsls	r3, r3, #4
    521a:	001a      	movs	r2, r3
    521c:	2330      	movs	r3, #48	; 0x30
    521e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5220:	693b      	ldr	r3, [r7, #16]
    5222:	7a1b      	ldrb	r3, [r3, #8]
    5224:	0019      	movs	r1, r3
    5226:	2307      	movs	r3, #7
    5228:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    522a:	4313      	orrs	r3, r2
    522c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    522e:	2300      	movs	r3, #0
    5230:	61fb      	str	r3, [r7, #28]
    5232:	e01a      	b.n	526a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    5234:	693a      	ldr	r2, [r7, #16]
    5236:	69fb      	ldr	r3, [r7, #28]
    5238:	18d3      	adds	r3, r2, r3
    523a:	3304      	adds	r3, #4
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d010      	beq.n	5264 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    5242:	2317      	movs	r3, #23
    5244:	18fb      	adds	r3, r7, r3
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	69fb      	ldr	r3, [r7, #28]
    524a:	429a      	cmp	r2, r3
    524c:	dc01      	bgt.n	5252 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    524e:	2317      	movs	r3, #23
    5250:	e012      	b.n	5278 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    5252:	2380      	movs	r3, #128	; 0x80
    5254:	025a      	lsls	r2, r3, #9
    5256:	69fb      	ldr	r3, [r7, #28]
    5258:	409a      	lsls	r2, r3
    525a:	0013      	movs	r3, r2
    525c:	001a      	movs	r2, r3
    525e:	69bb      	ldr	r3, [r7, #24]
    5260:	4313      	orrs	r3, r2
    5262:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5264:	69fb      	ldr	r3, [r7, #28]
    5266:	3301      	adds	r3, #1
    5268:	61fb      	str	r3, [r7, #28]
    526a:	69fb      	ldr	r3, [r7, #28]
    526c:	2b03      	cmp	r3, #3
    526e:	dde1      	ble.n	5234 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	69ba      	ldr	r2, [r7, #24]
    5274:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    5276:	2300      	movs	r3, #0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b008      	add	sp, #32
    527e:	bd80      	pop	{r7, pc}
    5280:	00017394 	.word	0x00017394

00005284 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5284:	b590      	push	{r4, r7, lr}
    5286:	b091      	sub	sp, #68	; 0x44
    5288:	af00      	add	r7, sp, #0
    528a:	60f8      	str	r0, [r7, #12]
    528c:	60b9      	str	r1, [r7, #8]
    528e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5290:	233b      	movs	r3, #59	; 0x3b
    5292:	18fc      	adds	r4, r7, r3
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	0018      	movs	r0, r3
    5298:	4bc4      	ldr	r3, [pc, #784]	; (55ac <tcc_init+0x328>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    52a0:	233b      	movs	r3, #59	; 0x3b
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	781a      	ldrb	r2, [r3, #0]
    52a6:	4bc2      	ldr	r3, [pc, #776]	; (55b0 <tcc_init+0x32c>)
    52a8:	0092      	lsls	r2, r2, #2
    52aa:	58d3      	ldr	r3, [r2, r3]
    52ac:	0019      	movs	r1, r3
    52ae:	2002      	movs	r0, #2
    52b0:	4bc0      	ldr	r3, [pc, #768]	; (55b4 <tcc_init+0x330>)
    52b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52b4:	68bb      	ldr	r3, [r7, #8]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2202      	movs	r2, #2
    52ba:	4013      	ands	r3, r2
    52bc:	d001      	beq.n	52c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    52be:	231c      	movs	r3, #28
    52c0:	e1be      	b.n	5640 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2201      	movs	r2, #1
    52c8:	4013      	ands	r3, r2
    52ca:	d001      	beq.n	52d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    52cc:	231c      	movs	r3, #28
    52ce:	e1b7      	b.n	5640 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    52d0:	233b      	movs	r3, #59	; 0x3b
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	4bb8      	ldr	r3, [pc, #736]	; (55b8 <tcc_init+0x334>)
    52d8:	0092      	lsls	r2, r2, #2
    52da:	58d3      	ldr	r3, [r2, r3]
    52dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52e4:	429a      	cmp	r2, r3
    52e6:	d804      	bhi.n	52f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ee:	429a      	cmp	r2, r3
    52f0:	d901      	bls.n	52f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    52f2:	2317      	movs	r3, #23
    52f4:	e1a4      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    52f6:	2300      	movs	r3, #0
    52f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    52fa:	e00e      	b.n	531a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    52fc:	687a      	ldr	r2, [r7, #4]
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	3306      	adds	r3, #6
    5302:	009b      	lsls	r3, r3, #2
    5304:	18d3      	adds	r3, r2, r3
    5306:	3304      	adds	r3, #4
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    530c:	429a      	cmp	r2, r3
    530e:	d901      	bls.n	5314 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    5310:	2317      	movs	r3, #23
    5312:	e195      	b.n	5640 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5316:	3301      	adds	r3, #1
    5318:	63fb      	str	r3, [r7, #60]	; 0x3c
    531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    531c:	2b03      	cmp	r3, #3
    531e:	dded      	ble.n	52fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5320:	2300      	movs	r3, #0
    5322:	63fb      	str	r3, [r7, #60]	; 0x3c
    5324:	e019      	b.n	535a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	2198      	movs	r1, #152	; 0x98
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	18d3      	adds	r3, r2, r3
    532e:	185b      	adds	r3, r3, r1
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2201      	movs	r2, #1
    5334:	4053      	eors	r3, r2
    5336:	b2db      	uxtb	r3, r3
    5338:	2b00      	cmp	r3, #0
    533a:	d10a      	bne.n	5352 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    533c:	233b      	movs	r3, #59	; 0x3b
    533e:	18fb      	adds	r3, r7, r3
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	4a9e      	ldr	r2, [pc, #632]	; (55bc <tcc_init+0x338>)
    5344:	5cd3      	ldrb	r3, [r2, r3]
    5346:	001a      	movs	r2, r3
    5348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    534a:	429a      	cmp	r2, r3
    534c:	dc02      	bgt.n	5354 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    534e:	2317      	movs	r3, #23
    5350:	e176      	b.n	5640 <tcc_init+0x3bc>
			continue;
    5352:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5356:	3301      	adds	r3, #1
    5358:	63fb      	str	r3, [r7, #60]	; 0x3c
    535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    535c:	2b07      	cmp	r3, #7
    535e:	dde2      	ble.n	5326 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    5360:	2300      	movs	r3, #0
    5362:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    5364:	2333      	movs	r3, #51	; 0x33
    5366:	18fc      	adds	r4, r7, r3
    5368:	232c      	movs	r3, #44	; 0x2c
    536a:	18fa      	adds	r2, r7, r3
    536c:	6879      	ldr	r1, [r7, #4]
    536e:	233b      	movs	r3, #59	; 0x3b
    5370:	18fb      	adds	r3, r7, r3
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	0018      	movs	r0, r3
    5376:	4b92      	ldr	r3, [pc, #584]	; (55c0 <tcc_init+0x33c>)
    5378:	4798      	blx	r3
    537a:	0003      	movs	r3, r0
    537c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    537e:	2333      	movs	r3, #51	; 0x33
    5380:	18fb      	adds	r3, r7, r3
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	d003      	beq.n	5390 <tcc_init+0x10c>
		return status;
    5388:	2333      	movs	r3, #51	; 0x33
    538a:	18fb      	adds	r3, r7, r3
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	e157      	b.n	5640 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    5390:	232b      	movs	r3, #43	; 0x2b
    5392:	18fa      	adds	r2, r7, r3
    5394:	6879      	ldr	r1, [r7, #4]
    5396:	233b      	movs	r3, #59	; 0x3b
    5398:	18fb      	adds	r3, r7, r3
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	0018      	movs	r0, r3
    539e:	4b89      	ldr	r3, [pc, #548]	; (55c4 <tcc_init+0x340>)
    53a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    53a2:	2333      	movs	r3, #51	; 0x33
    53a4:	18fc      	adds	r4, r7, r3
    53a6:	2320      	movs	r3, #32
    53a8:	18fa      	adds	r2, r7, r3
    53aa:	6879      	ldr	r1, [r7, #4]
    53ac:	233b      	movs	r3, #59	; 0x3b
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	0018      	movs	r0, r3
    53b4:	4b84      	ldr	r3, [pc, #528]	; (55c8 <tcc_init+0x344>)
    53b6:	4798      	blx	r3
    53b8:	0003      	movs	r3, r0
    53ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53bc:	2333      	movs	r3, #51	; 0x33
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <tcc_init+0x14a>
		return status;
    53c6:	2333      	movs	r3, #51	; 0x33
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	e138      	b.n	5640 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    53ce:	2300      	movs	r3, #0
    53d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    53d2:	2333      	movs	r3, #51	; 0x33
    53d4:	18fc      	adds	r4, r7, r3
    53d6:	231c      	movs	r3, #28
    53d8:	18fa      	adds	r2, r7, r3
    53da:	6879      	ldr	r1, [r7, #4]
    53dc:	233b      	movs	r3, #59	; 0x3b
    53de:	18fb      	adds	r3, r7, r3
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	0018      	movs	r0, r3
    53e4:	4b79      	ldr	r3, [pc, #484]	; (55cc <tcc_init+0x348>)
    53e6:	4798      	blx	r3
    53e8:	0003      	movs	r3, r0
    53ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53ec:	2333      	movs	r3, #51	; 0x33
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d003      	beq.n	53fe <tcc_init+0x17a>
		return status;
    53f6:	2333      	movs	r3, #51	; 0x33
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	e120      	b.n	5640 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    53fe:	2333      	movs	r3, #51	; 0x33
    5400:	18fc      	adds	r4, r7, r3
    5402:	2318      	movs	r3, #24
    5404:	18fa      	adds	r2, r7, r3
    5406:	6879      	ldr	r1, [r7, #4]
    5408:	233b      	movs	r3, #59	; 0x3b
    540a:	18fb      	adds	r3, r7, r3
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	0018      	movs	r0, r3
    5410:	4b6f      	ldr	r3, [pc, #444]	; (55d0 <tcc_init+0x34c>)
    5412:	4798      	blx	r3
    5414:	0003      	movs	r3, r0
    5416:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    5418:	2333      	movs	r3, #51	; 0x33
    541a:	18fb      	adds	r3, r7, r3
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d003      	beq.n	542a <tcc_init+0x1a6>
		return status;
    5422:	2333      	movs	r3, #51	; 0x33
    5424:	18fb      	adds	r3, r7, r3
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	e10a      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    542a:	2300      	movs	r3, #0
    542c:	63fb      	str	r3, [r7, #60]	; 0x3c
    542e:	e009      	b.n	5444 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    5430:	68fa      	ldr	r2, [r7, #12]
    5432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5434:	009b      	lsls	r3, r3, #2
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
    543a:	2200      	movs	r2, #0
    543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5440:	3301      	adds	r3, #1
    5442:	63fb      	str	r3, [r7, #60]	; 0x3c
    5444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5446:	2b0b      	cmp	r3, #11
    5448:	ddf2      	ble.n	5430 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    544a:	68fb      	ldr	r3, [r7, #12]
    544c:	2200      	movs	r2, #0
    544e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	2200      	movs	r2, #0
    5454:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5456:	233b      	movs	r3, #59	; 0x3b
    5458:	18fb      	adds	r3, r7, r3
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	4b5d      	ldr	r3, [pc, #372]	; (55d4 <tcc_init+0x350>)
    545e:	0092      	lsls	r2, r2, #2
    5460:	68f9      	ldr	r1, [r7, #12]
    5462:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	68ba      	ldr	r2, [r7, #8]
    5468:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	22a0      	movs	r2, #160	; 0xa0
    546e:	5c99      	ldrb	r1, [r3, r2]
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	223c      	movs	r2, #60	; 0x3c
    5474:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5476:	2314      	movs	r3, #20
    5478:	18fb      	adds	r3, r7, r3
    547a:	0018      	movs	r0, r3
    547c:	4b56      	ldr	r3, [pc, #344]	; (55d8 <tcc_init+0x354>)
    547e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	7a9a      	ldrb	r2, [r3, #10]
    5484:	2314      	movs	r3, #20
    5486:	18fb      	adds	r3, r7, r3
    5488:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    548a:	233b      	movs	r3, #59	; 0x3b
    548c:	18fb      	adds	r3, r7, r3
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	4a52      	ldr	r2, [pc, #328]	; (55dc <tcc_init+0x358>)
    5492:	5cd3      	ldrb	r3, [r2, r3]
    5494:	2214      	movs	r2, #20
    5496:	18ba      	adds	r2, r7, r2
    5498:	0011      	movs	r1, r2
    549a:	0018      	movs	r0, r3
    549c:	4b50      	ldr	r3, [pc, #320]	; (55e0 <tcc_init+0x35c>)
    549e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    54a0:	233b      	movs	r3, #59	; 0x3b
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	4a4d      	ldr	r2, [pc, #308]	; (55dc <tcc_init+0x358>)
    54a8:	5cd3      	ldrb	r3, [r2, r3]
    54aa:	0018      	movs	r0, r3
    54ac:	4b4d      	ldr	r3, [pc, #308]	; (55e4 <tcc_init+0x360>)
    54ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    54b0:	2300      	movs	r3, #0
    54b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    54b4:	e02d      	b.n	5512 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    54b6:	687a      	ldr	r2, [r7, #4]
    54b8:	2198      	movs	r1, #152	; 0x98
    54ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54bc:	18d3      	adds	r3, r2, r3
    54be:	185b      	adds	r3, r3, r1
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	2201      	movs	r2, #1
    54c4:	4053      	eors	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	2b00      	cmp	r3, #0
    54ca:	d11e      	bne.n	550a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    54cc:	2310      	movs	r3, #16
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	0018      	movs	r0, r3
    54d2:	4b45      	ldr	r3, [pc, #276]	; (55e8 <tcc_init+0x364>)
    54d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54da:	321e      	adds	r2, #30
    54dc:	0092      	lsls	r2, r2, #2
    54de:	58d3      	ldr	r3, [r2, r3]
    54e0:	b2da      	uxtb	r2, r3
    54e2:	2310      	movs	r3, #16
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54e8:	2310      	movs	r3, #16
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	2201      	movs	r2, #1
    54ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f4:	3216      	adds	r2, #22
    54f6:	0092      	lsls	r2, r2, #2
    54f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2210      	movs	r2, #16
    54fe:	18ba      	adds	r2, r7, r2
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b39      	ldr	r3, [pc, #228]	; (55ec <tcc_init+0x368>)
    5506:	4798      	blx	r3
    5508:	e000      	b.n	550c <tcc_init+0x288>
			continue;
    550a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    550e:	3301      	adds	r3, #1
    5510:	63fb      	str	r3, [r7, #60]	; 0x3c
    5512:	233b      	movs	r3, #59	; 0x3b
    5514:	18fb      	adds	r3, r7, r3
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	4a28      	ldr	r2, [pc, #160]	; (55bc <tcc_init+0x338>)
    551a:	5cd3      	ldrb	r3, [r2, r3]
    551c:	001a      	movs	r2, r3
    551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5520:	429a      	cmp	r2, r3
    5522:	dcc8      	bgt.n	54b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    5524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	68bb      	ldr	r3, [r7, #8]
    552e:	689b      	ldr	r3, [r3, #8]
    5530:	2204      	movs	r2, #4
    5532:	4013      	ands	r3, r2
    5534:	d1fa      	bne.n	552c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    5536:	68bb      	ldr	r3, [r7, #8]
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    553c:	46c0      	nop			; (mov r8, r8)
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	689b      	ldr	r3, [r3, #8]
    5542:	2204      	movs	r2, #4
    5544:	4013      	ands	r3, r2
    5546:	d1fa      	bne.n	553e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    5548:	232b      	movs	r3, #43	; 0x2b
    554a:	18fb      	adds	r3, r7, r3
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    5552:	2320      	movs	r3, #32
    5554:	18fb      	adds	r3, r7, r3
    5556:	681a      	ldr	r2, [r3, #0]
    5558:	68bb      	ldr	r3, [r7, #8]
    555a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    555c:	2320      	movs	r3, #32
    555e:	18fb      	adds	r3, r7, r3
    5560:	685a      	ldr	r2, [r3, #4]
    5562:	68bb      	ldr	r3, [r7, #8]
    5564:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    5566:	69fa      	ldr	r2, [r7, #28]
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    556c:	46c0      	nop			; (mov r8, r8)
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	689b      	ldr	r3, [r3, #8]
    5572:	4a1f      	ldr	r2, [pc, #124]	; (55f0 <tcc_init+0x36c>)
    5574:	4013      	ands	r3, r2
    5576:	d1fa      	bne.n	556e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    5578:	69ba      	ldr	r2, [r7, #24]
    557a:	68bb      	ldr	r3, [r7, #8]
    557c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	68bb      	ldr	r3, [r7, #8]
    5582:	689b      	ldr	r3, [r3, #8]
    5584:	2210      	movs	r2, #16
    5586:	4013      	ands	r3, r2
    5588:	d1fa      	bne.n	5580 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	689b      	ldr	r3, [r3, #8]
    5598:	4a16      	ldr	r2, [pc, #88]	; (55f4 <tcc_init+0x370>)
    559a:	4013      	ands	r3, r2
    559c:	d1fa      	bne.n	5594 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685a      	ldr	r2, [r3, #4]
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    55a6:	2300      	movs	r3, #0
    55a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    55aa:	e03f      	b.n	562c <tcc_init+0x3a8>
    55ac:	00004bed 	.word	0x00004bed
    55b0:	0001737c 	.word	0x0001737c
    55b4:	00004b69 	.word	0x00004b69
    55b8:	00017388 	.word	0x00017388
    55bc:	00017398 	.word	0x00017398
    55c0:	00004ef9 	.word	0x00004ef9
    55c4:	00004f9d 	.word	0x00004f9d
    55c8:	00004ff9 	.word	0x00004ff9
    55cc:	00005115 	.word	0x00005115
    55d0:	000051ed 	.word	0x000051ed
    55d4:	20000450 	.word	0x20000450
    55d8:	00004b51 	.word	0x00004b51
    55dc:	00017378 	.word	0x00017378
    55e0:	00007c25 	.word	0x00007c25
    55e4:	00007c69 	.word	0x00007c69
    55e8:	00004bc5 	.word	0x00004bc5
    55ec:	00007f11 	.word	0x00007f11
    55f0:	00020040 	.word	0x00020040
    55f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    55f8:	46c0      	nop			; (mov r8, r8)
    55fa:	68bb      	ldr	r3, [r7, #8]
    55fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    55fe:	4912      	ldr	r1, [pc, #72]	; (5648 <tcc_init+0x3c4>)
    5600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5602:	4091      	lsls	r1, r2
    5604:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    5606:	4013      	ands	r3, r2
    5608:	d1f7      	bne.n	55fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    560e:	3306      	adds	r3, #6
    5610:	009b      	lsls	r3, r3, #2
    5612:	18d3      	adds	r3, r2, r3
    5614:	3304      	adds	r3, #4
    5616:	681a      	ldr	r2, [r3, #0]
    5618:	68b9      	ldr	r1, [r7, #8]
    561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    561c:	3310      	adds	r3, #16
    561e:	009b      	lsls	r3, r3, #2
    5620:	18cb      	adds	r3, r1, r3
    5622:	3304      	adds	r3, #4
    5624:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5628:	3301      	adds	r3, #1
    562a:	63fb      	str	r3, [r7, #60]	; 0x3c
    562c:	233b      	movs	r3, #59	; 0x3b
    562e:	18fb      	adds	r3, r7, r3
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	4a06      	ldr	r2, [pc, #24]	; (564c <tcc_init+0x3c8>)
    5634:	5cd3      	ldrb	r3, [r2, r3]
    5636:	001a      	movs	r2, r3
    5638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    563a:	429a      	cmp	r2, r3
    563c:	dcdc      	bgt.n	55f8 <tcc_init+0x374>
	}

	return STATUS_OK;
    563e:	2300      	movs	r3, #0
}
    5640:	0018      	movs	r0, r3
    5642:	46bd      	mov	sp, r7
    5644:	b011      	add	sp, #68	; 0x44
    5646:	bd90      	pop	{r4, r7, pc}
    5648:	00080100 	.word	0x00080100
    564c:	00017394 	.word	0x00017394

00005650 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    5650:	b590      	push	{r4, r7, lr}
    5652:	b089      	sub	sp, #36	; 0x24
    5654:	af00      	add	r7, sp, #0
    5656:	60f8      	str	r0, [r7, #12]
    5658:	0008      	movs	r0, r1
    565a:	607a      	str	r2, [r7, #4]
    565c:	0019      	movs	r1, r3
    565e:	230b      	movs	r3, #11
    5660:	18fb      	adds	r3, r7, r3
    5662:	1c02      	adds	r2, r0, #0
    5664:	701a      	strb	r2, [r3, #0]
    5666:	230a      	movs	r3, #10
    5668:	18fb      	adds	r3, r7, r3
    566a:	1c0a      	adds	r2, r1, #0
    566c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    5674:	231b      	movs	r3, #27
    5676:	18fc      	adds	r4, r7, r3
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	0018      	movs	r0, r3
    567c:	4b28      	ldr	r3, [pc, #160]	; (5720 <_tcc_set_compare_value+0xd0>)
    567e:	4798      	blx	r3
    5680:	0003      	movs	r3, r0
    5682:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    5684:	231b      	movs	r3, #27
    5686:	18fb      	adds	r3, r7, r3
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	4a26      	ldr	r2, [pc, #152]	; (5724 <_tcc_set_compare_value+0xd4>)
    568c:	5cd3      	ldrb	r3, [r2, r3]
    568e:	220b      	movs	r2, #11
    5690:	18ba      	adds	r2, r7, r2
    5692:	7812      	ldrb	r2, [r2, #0]
    5694:	429a      	cmp	r2, r3
    5696:	d301      	bcc.n	569c <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    5698:	2317      	movs	r3, #23
    569a:	e03d      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    569c:	231b      	movs	r3, #27
    569e:	18fb      	adds	r3, r7, r3
    56a0:	781a      	ldrb	r2, [r3, #0]
    56a2:	4b21      	ldr	r3, [pc, #132]	; (5728 <_tcc_set_compare_value+0xd8>)
    56a4:	0092      	lsls	r2, r2, #2
    56a6:	58d3      	ldr	r3, [r2, r3]
    56a8:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	697b      	ldr	r3, [r7, #20]
    56ae:	429a      	cmp	r2, r3
    56b0:	d901      	bls.n	56b6 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    56b2:	2317      	movs	r3, #23
    56b4:	e030      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    56b6:	230a      	movs	r3, #10
    56b8:	18fb      	adds	r3, r7, r3
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d014      	beq.n	56ea <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    56c0:	46c0      	nop			; (mov r8, r8)
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    56c6:	220b      	movs	r2, #11
    56c8:	18ba      	adds	r2, r7, r2
    56ca:	7812      	ldrb	r2, [r2, #0]
    56cc:	2180      	movs	r1, #128	; 0x80
    56ce:	0309      	lsls	r1, r1, #12
    56d0:	4091      	lsls	r1, r2
    56d2:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
    56d4:	4013      	ands	r3, r2
    56d6:	d1f4      	bne.n	56c2 <_tcc_set_compare_value+0x72>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    56d8:	230b      	movs	r3, #11
    56da:	18fb      	adds	r3, r7, r3
    56dc:	781a      	ldrb	r2, [r3, #0]
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	321c      	adds	r2, #28
    56e2:	0092      	lsls	r2, r2, #2
    56e4:	6879      	ldr	r1, [r7, #4]
    56e6:	50d1      	str	r1, [r2, r3]
    56e8:	e015      	b.n	5716 <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	69fb      	ldr	r3, [r7, #28]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	220b      	movs	r2, #11
    56f2:	18ba      	adds	r2, r7, r2
    56f4:	7812      	ldrb	r2, [r2, #0]
    56f6:	2180      	movs	r1, #128	; 0x80
    56f8:	0049      	lsls	r1, r1, #1
    56fa:	4091      	lsls	r1, r2
    56fc:	000a      	movs	r2, r1
    56fe:	4013      	ands	r3, r2
    5700:	d1f4      	bne.n	56ec <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    5702:	230b      	movs	r3, #11
    5704:	18fb      	adds	r3, r7, r3
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	69fa      	ldr	r2, [r7, #28]
    570a:	3310      	adds	r3, #16
    570c:	009b      	lsls	r3, r3, #2
    570e:	18d3      	adds	r3, r2, r3
    5710:	3304      	adds	r3, #4
    5712:	687a      	ldr	r2, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    5716:	2300      	movs	r3, #0
}
    5718:	0018      	movs	r0, r3
    571a:	46bd      	mov	sp, r7
    571c:	b009      	add	sp, #36	; 0x24
    571e:	bd90      	pop	{r4, r7, pc}
    5720:	00004bed 	.word	0x00004bed
    5724:	00017394 	.word	0x00017394
    5728:	00017388 	.word	0x00017388

0000572c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    572c:	b590      	push	{r4, r7, lr}
    572e:	b085      	sub	sp, #20
    5730:	af00      	add	r7, sp, #0
    5732:	60f8      	str	r0, [r7, #12]
    5734:	607a      	str	r2, [r7, #4]
    5736:	230b      	movs	r3, #11
    5738:	18fb      	adds	r3, r7, r3
    573a:	1c0a      	adds	r2, r1, #0
    573c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	223c      	movs	r2, #60	; 0x3c
    5742:	5c9c      	ldrb	r4, [r3, r2]
    5744:	687a      	ldr	r2, [r7, #4]
    5746:	230b      	movs	r3, #11
    5748:	18fb      	adds	r3, r7, r3
    574a:	7819      	ldrb	r1, [r3, #0]
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	0023      	movs	r3, r4
    5750:	4c03      	ldr	r4, [pc, #12]	; (5760 <tcc_set_compare_value+0x34>)
    5752:	47a0      	blx	r4
    5754:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    5756:	0018      	movs	r0, r3
    5758:	46bd      	mov	sp, r7
    575a:	b005      	add	sp, #20
    575c:	bd90      	pop	{r4, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	00005651 	.word	0x00005651

00005764 <system_gclk_chan_get_config_defaults>:
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	2200      	movs	r2, #0
    5770:	701a      	strb	r2, [r3, #0]
}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	46bd      	mov	sp, r7
    5776:	b002      	add	sp, #8
    5778:	bd80      	pop	{r7, pc}
	...

0000577c <system_apb_clock_set_mask>:
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	0002      	movs	r2, r0
    5784:	6039      	str	r1, [r7, #0]
    5786:	1dfb      	adds	r3, r7, #7
    5788:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    578a:	1dfb      	adds	r3, r7, #7
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	2b01      	cmp	r3, #1
    5790:	d00a      	beq.n	57a8 <system_apb_clock_set_mask+0x2c>
    5792:	2b02      	cmp	r3, #2
    5794:	d00f      	beq.n	57b6 <system_apb_clock_set_mask+0x3a>
    5796:	2b00      	cmp	r3, #0
    5798:	d114      	bne.n	57c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579c:	4a0d      	ldr	r2, [pc, #52]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579e:	6991      	ldr	r1, [r2, #24]
    57a0:	683a      	ldr	r2, [r7, #0]
    57a2:	430a      	orrs	r2, r1
    57a4:	619a      	str	r2, [r3, #24]
			break;
    57a6:	e00f      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57aa:	4a0a      	ldr	r2, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ac:	69d1      	ldr	r1, [r2, #28]
    57ae:	683a      	ldr	r2, [r7, #0]
    57b0:	430a      	orrs	r2, r1
    57b2:	61da      	str	r2, [r3, #28]
			break;
    57b4:	e008      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    57b6:	4b07      	ldr	r3, [pc, #28]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57b8:	4a06      	ldr	r2, [pc, #24]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ba:	6a11      	ldr	r1, [r2, #32]
    57bc:	683a      	ldr	r2, [r7, #0]
    57be:	430a      	orrs	r2, r1
    57c0:	621a      	str	r2, [r3, #32]
			break;
    57c2:	e001      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    57c4:	2317      	movs	r3, #23
    57c6:	e000      	b.n	57ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    57c8:	2300      	movs	r3, #0
}
    57ca:	0018      	movs	r0, r3
    57cc:	46bd      	mov	sp, r7
    57ce:	b002      	add	sp, #8
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	40000400 	.word	0x40000400

000057d8 <system_pinmux_get_config_defaults>:
{
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2280      	movs	r2, #128	; 0x80
    57e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2200      	movs	r2, #0
    57ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	2201      	movs	r2, #1
    57f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	2200      	movs	r2, #0
    57f6:	70da      	strb	r2, [r3, #3]
}
    57f8:	46c0      	nop			; (mov r8, r8)
    57fa:	46bd      	mov	sp, r7
    57fc:	b002      	add	sp, #8
    57fe:	bd80      	pop	{r7, pc}

00005800 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5800:	b580      	push	{r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	7bdb      	ldrb	r3, [r3, #15]
    5812:	b2db      	uxtb	r3, r3
    5814:	001a      	movs	r2, r3
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	4013      	ands	r3, r2
    581a:	1e5a      	subs	r2, r3, #1
    581c:	4193      	sbcs	r3, r2
    581e:	b2db      	uxtb	r3, r3
#endif
}
    5820:	0018      	movs	r0, r3
    5822:	46bd      	mov	sp, r7
    5824:	b004      	add	sp, #16
    5826:	bd80      	pop	{r7, pc}

00005828 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5828:	b590      	push	{r4, r7, lr}
    582a:	b087      	sub	sp, #28
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5830:	2308      	movs	r3, #8
    5832:	18fb      	adds	r3, r7, r3
    5834:	4a0d      	ldr	r2, [pc, #52]	; (586c <_tc_get_inst_index+0x44>)
    5836:	ca13      	ldmia	r2!, {r0, r1, r4}
    5838:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    583a:	2300      	movs	r3, #0
    583c:	617b      	str	r3, [r7, #20]
    583e:	e00d      	b.n	585c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    5840:	2308      	movs	r3, #8
    5842:	18fb      	adds	r3, r7, r3
    5844:	697a      	ldr	r2, [r7, #20]
    5846:	0092      	lsls	r2, r2, #2
    5848:	58d2      	ldr	r2, [r2, r3]
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	429a      	cmp	r2, r3
    584e:	d102      	bne.n	5856 <_tc_get_inst_index+0x2e>
			return i;
    5850:	697b      	ldr	r3, [r7, #20]
    5852:	b2db      	uxtb	r3, r3
    5854:	e006      	b.n	5864 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5856:	697b      	ldr	r3, [r7, #20]
    5858:	3301      	adds	r3, #1
    585a:	617b      	str	r3, [r7, #20]
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2b02      	cmp	r3, #2
    5860:	d9ee      	bls.n	5840 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5862:	2300      	movs	r3, #0
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b007      	add	sp, #28
    586a:	bd90      	pop	{r4, r7, pc}
    586c:	0001739c 	.word	0x0001739c

00005870 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5870:	b590      	push	{r4, r7, lr}
    5872:	b08d      	sub	sp, #52	; 0x34
    5874:	af00      	add	r7, sp, #0
    5876:	60f8      	str	r0, [r7, #12]
    5878:	60b9      	str	r1, [r7, #8]
    587a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    587c:	232e      	movs	r3, #46	; 0x2e
    587e:	18fb      	adds	r3, r7, r3
    5880:	2200      	movs	r2, #0
    5882:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5884:	232d      	movs	r3, #45	; 0x2d
    5886:	18fb      	adds	r3, r7, r3
    5888:	2200      	movs	r2, #0
    588a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    588c:	232c      	movs	r3, #44	; 0x2c
    588e:	18fb      	adds	r3, r7, r3
    5890:	2200      	movs	r2, #0
    5892:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5894:	2329      	movs	r3, #41	; 0x29
    5896:	18fc      	adds	r4, r7, r3
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	0018      	movs	r0, r3
    589c:	4bbd      	ldr	r3, [pc, #756]	; (5b94 <tc_init+0x324>)
    589e:	4798      	blx	r3
    58a0:	0003      	movs	r3, r0
    58a2:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    58a4:	2324      	movs	r3, #36	; 0x24
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	4abb      	ldr	r2, [pc, #748]	; (5b98 <tc_init+0x328>)
    58aa:	8811      	ldrh	r1, [r2, #0]
    58ac:	8019      	strh	r1, [r3, #0]
    58ae:	7892      	ldrb	r2, [r2, #2]
    58b0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    58b2:	231c      	movs	r3, #28
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	4ab9      	ldr	r2, [pc, #740]	; (5b9c <tc_init+0x32c>)
    58b8:	6811      	ldr	r1, [r2, #0]
    58ba:	6019      	str	r1, [r3, #0]
    58bc:	8892      	ldrh	r2, [r2, #4]
    58be:	809a      	strh	r2, [r3, #4]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58c0:	232b      	movs	r3, #43	; 0x2b
    58c2:	18fb      	adds	r3, r7, r3
    58c4:	2200      	movs	r2, #0
    58c6:	701a      	strb	r2, [r3, #0]
    58c8:	e00e      	b.n	58e8 <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    58ca:	232b      	movs	r3, #43	; 0x2b
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	781a      	ldrb	r2, [r3, #0]
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	3202      	adds	r2, #2
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	2100      	movs	r1, #0
    58d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58da:	232b      	movs	r3, #43	; 0x2b
    58dc:	18fb      	adds	r3, r7, r3
    58de:	781a      	ldrb	r2, [r3, #0]
    58e0:	232b      	movs	r3, #43	; 0x2b
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	3201      	adds	r2, #1
    58e6:	701a      	strb	r2, [r3, #0]
    58e8:	232b      	movs	r3, #43	; 0x2b
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	2b03      	cmp	r3, #3
    58f0:	d9eb      	bls.n	58ca <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	2200      	movs	r2, #0
    58f6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	2200      	movs	r2, #0
    58fc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    58fe:	2329      	movs	r3, #41	; 0x29
    5900:	18fb      	adds	r3, r7, r3
    5902:	781a      	ldrb	r2, [r3, #0]
    5904:	4ba6      	ldr	r3, [pc, #664]	; (5ba0 <tc_init+0x330>)
    5906:	0092      	lsls	r2, r2, #2
    5908:	68f9      	ldr	r1, [r7, #12]
    590a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	68ba      	ldr	r2, [r7, #8]
    5910:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	789b      	ldrb	r3, [r3, #2]
    5916:	2b08      	cmp	r3, #8
    5918:	d108      	bne.n	592c <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    591a:	2329      	movs	r3, #41	; 0x29
    591c:	18fb      	adds	r3, r7, r3
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	3303      	adds	r3, #3
    5922:	2201      	movs	r2, #1
    5924:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5926:	d001      	beq.n	592c <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5928:	2317      	movs	r3, #23
    592a:	e1c2      	b.n	5cb2 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	789a      	ldrb	r2, [r3, #2]
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5934:	68bb      	ldr	r3, [r7, #8]
    5936:	881b      	ldrh	r3, [r3, #0]
    5938:	b29b      	uxth	r3, r3
    593a:	001a      	movs	r2, r3
    593c:	2301      	movs	r3, #1
    593e:	4013      	ands	r3, r2
    5940:	d001      	beq.n	5946 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5942:	2305      	movs	r3, #5
    5944:	e1b5      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5946:	68bb      	ldr	r3, [r7, #8]
    5948:	7bdb      	ldrb	r3, [r3, #15]
    594a:	b2db      	uxtb	r3, r3
    594c:	001a      	movs	r2, r3
    594e:	2310      	movs	r3, #16
    5950:	4013      	ands	r3, r2
    5952:	d001      	beq.n	5958 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5954:	231c      	movs	r3, #28
    5956:	e1ac      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5958:	68bb      	ldr	r3, [r7, #8]
    595a:	881b      	ldrh	r3, [r3, #0]
    595c:	b29b      	uxth	r3, r3
    595e:	001a      	movs	r2, r3
    5960:	2302      	movs	r3, #2
    5962:	4013      	ands	r3, r2
    5964:	d001      	beq.n	596a <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5966:	231c      	movs	r3, #28
    5968:	e1a3      	b.n	5cb2 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	7c1b      	ldrb	r3, [r3, #16]
    596e:	2b00      	cmp	r3, #0
    5970:	d017      	beq.n	59a2 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    5972:	2318      	movs	r3, #24
    5974:	18fb      	adds	r3, r7, r3
    5976:	0018      	movs	r0, r3
    5978:	4b8a      	ldr	r3, [pc, #552]	; (5ba4 <tc_init+0x334>)
    597a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	699b      	ldr	r3, [r3, #24]
    5980:	b2da      	uxtb	r2, r3
    5982:	2318      	movs	r3, #24
    5984:	18fb      	adds	r3, r7, r3
    5986:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5988:	2318      	movs	r3, #24
    598a:	18fb      	adds	r3, r7, r3
    598c:	2201      	movs	r2, #1
    598e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    5994:	b2db      	uxtb	r3, r3
    5996:	2218      	movs	r2, #24
    5998:	18ba      	adds	r2, r7, r2
    599a:	0011      	movs	r1, r2
    599c:	0018      	movs	r0, r3
    599e:	4b82      	ldr	r3, [pc, #520]	; (5ba8 <tc_init+0x338>)
    59a0:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	7f1b      	ldrb	r3, [r3, #28]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d017      	beq.n	59da <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    59aa:	2318      	movs	r3, #24
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	0018      	movs	r0, r3
    59b0:	4b7c      	ldr	r3, [pc, #496]	; (5ba4 <tc_init+0x334>)
    59b2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59b8:	b2da      	uxtb	r2, r3
    59ba:	2318      	movs	r3, #24
    59bc:	18fb      	adds	r3, r7, r3
    59be:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    59c0:	2318      	movs	r3, #24
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	2201      	movs	r2, #1
    59c6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    59cc:	b2db      	uxtb	r3, r3
    59ce:	2218      	movs	r2, #24
    59d0:	18ba      	adds	r2, r7, r2
    59d2:	0011      	movs	r1, r2
    59d4:	0018      	movs	r0, r3
    59d6:	4b74      	ldr	r3, [pc, #464]	; (5ba8 <tc_init+0x338>)
    59d8:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    59da:	2329      	movs	r3, #41	; 0x29
    59dc:	18fb      	adds	r3, r7, r3
    59de:	781a      	ldrb	r2, [r3, #0]
    59e0:	231c      	movs	r3, #28
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	0052      	lsls	r2, r2, #1
    59e6:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    59e8:	0019      	movs	r1, r3
    59ea:	2002      	movs	r0, #2
    59ec:	4b6f      	ldr	r3, [pc, #444]	; (5bac <tc_init+0x33c>)
    59ee:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	789b      	ldrb	r3, [r3, #2]
    59f4:	2b08      	cmp	r3, #8
    59f6:	d10b      	bne.n	5a10 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    59f8:	2329      	movs	r3, #41	; 0x29
    59fa:	18fb      	adds	r3, r7, r3
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	1c5a      	adds	r2, r3, #1
    5a00:	231c      	movs	r3, #28
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	0052      	lsls	r2, r2, #1
    5a06:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5a08:	0019      	movs	r1, r3
    5a0a:	2002      	movs	r0, #2
    5a0c:	4b67      	ldr	r3, [pc, #412]	; (5bac <tc_init+0x33c>)
    5a0e:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5a10:	2314      	movs	r3, #20
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	0018      	movs	r0, r3
    5a16:	4b66      	ldr	r3, [pc, #408]	; (5bb0 <tc_init+0x340>)
    5a18:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	2314      	movs	r3, #20
    5a20:	18fb      	adds	r3, r7, r3
    5a22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5a24:	2329      	movs	r3, #41	; 0x29
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	2224      	movs	r2, #36	; 0x24
    5a2c:	18ba      	adds	r2, r7, r2
    5a2e:	5cd3      	ldrb	r3, [r2, r3]
    5a30:	2214      	movs	r2, #20
    5a32:	18ba      	adds	r2, r7, r2
    5a34:	0011      	movs	r1, r2
    5a36:	0018      	movs	r0, r3
    5a38:	4b5e      	ldr	r3, [pc, #376]	; (5bb4 <tc_init+0x344>)
    5a3a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5a3c:	2329      	movs	r3, #41	; 0x29
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	781b      	ldrb	r3, [r3, #0]
    5a42:	2224      	movs	r2, #36	; 0x24
    5a44:	18ba      	adds	r2, r7, r2
    5a46:	5cd3      	ldrb	r3, [r2, r3]
    5a48:	0018      	movs	r0, r3
    5a4a:	4b5b      	ldr	r3, [pc, #364]	; (5bb8 <tc_init+0x348>)
    5a4c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	799b      	ldrb	r3, [r3, #6]
    5a56:	4313      	orrs	r3, r2
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    5a60:	4313      	orrs	r3, r2
    5a62:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    5a68:	232e      	movs	r3, #46	; 0x2e
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	430a      	orrs	r2, r1
    5a6e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	785b      	ldrb	r3, [r3, #1]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d008      	beq.n	5a8a <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5a78:	232e      	movs	r3, #46	; 0x2e
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	222e      	movs	r2, #46	; 0x2e
    5a7e:	18ba      	adds	r2, r7, r2
    5a80:	8812      	ldrh	r2, [r2, #0]
    5a82:	2180      	movs	r1, #128	; 0x80
    5a84:	0109      	lsls	r1, r1, #4
    5a86:	430a      	orrs	r2, r1
    5a88:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	0018      	movs	r0, r3
    5a90:	4b4a      	ldr	r3, [pc, #296]	; (5bbc <tc_init+0x34c>)
    5a92:	4798      	blx	r3
    5a94:	1e03      	subs	r3, r0, #0
    5a96:	d1f9      	bne.n	5a8c <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5a98:	68bb      	ldr	r3, [r7, #8]
    5a9a:	222e      	movs	r2, #46	; 0x2e
    5a9c:	18ba      	adds	r2, r7, r2
    5a9e:	8812      	ldrh	r2, [r2, #0]
    5aa0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	7b5b      	ldrb	r3, [r3, #13]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d003      	beq.n	5ab2 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5aaa:	232d      	movs	r3, #45	; 0x2d
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	2204      	movs	r2, #4
    5ab0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	7b9b      	ldrb	r3, [r3, #14]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d007      	beq.n	5aca <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5aba:	232d      	movs	r3, #45	; 0x2d
    5abc:	18fb      	adds	r3, r7, r3
    5abe:	222d      	movs	r2, #45	; 0x2d
    5ac0:	18ba      	adds	r2, r7, r2
    5ac2:	7812      	ldrb	r2, [r2, #0]
    5ac4:	2101      	movs	r1, #1
    5ac6:	430a      	orrs	r2, r1
    5ac8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	0018      	movs	r0, r3
    5ad0:	4b3a      	ldr	r3, [pc, #232]	; (5bbc <tc_init+0x34c>)
    5ad2:	4798      	blx	r3
    5ad4:	1e03      	subs	r3, r0, #0
    5ad6:	d1f9      	bne.n	5acc <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5ad8:	68bb      	ldr	r3, [r7, #8]
    5ada:	22ff      	movs	r2, #255	; 0xff
    5adc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5ade:	232d      	movs	r3, #45	; 0x2d
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d00b      	beq.n	5b00 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    5ae8:	46c0      	nop			; (mov r8, r8)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	0018      	movs	r0, r3
    5aee:	4b33      	ldr	r3, [pc, #204]	; (5bbc <tc_init+0x34c>)
    5af0:	4798      	blx	r3
    5af2:	1e03      	subs	r3, r0, #0
    5af4:	d1f9      	bne.n	5aea <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5af6:	68bb      	ldr	r3, [r7, #8]
    5af8:	222d      	movs	r2, #45	; 0x2d
    5afa:	18ba      	adds	r2, r7, r2
    5afc:	7812      	ldrb	r2, [r2, #0]
    5afe:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5b00:	232c      	movs	r3, #44	; 0x2c
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	687a      	ldr	r2, [r7, #4]
    5b06:	7a92      	ldrb	r2, [r2, #10]
    5b08:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b0a:	232a      	movs	r3, #42	; 0x2a
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	2200      	movs	r2, #0
    5b10:	701a      	strb	r2, [r3, #0]
    5b12:	e01c      	b.n	5b4e <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    5b14:	232a      	movs	r3, #42	; 0x2a
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	687a      	ldr	r2, [r7, #4]
    5b1c:	18d3      	adds	r3, r2, r3
    5b1e:	7adb      	ldrb	r3, [r3, #11]
    5b20:	2b00      	cmp	r3, #0
    5b22:	d00d      	beq.n	5b40 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5b24:	232a      	movs	r3, #42	; 0x2a
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2210      	movs	r2, #16
    5b2c:	409a      	lsls	r2, r3
    5b2e:	0013      	movs	r3, r2
    5b30:	b2d9      	uxtb	r1, r3
    5b32:	232c      	movs	r3, #44	; 0x2c
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	222c      	movs	r2, #44	; 0x2c
    5b38:	18ba      	adds	r2, r7, r2
    5b3a:	7812      	ldrb	r2, [r2, #0]
    5b3c:	430a      	orrs	r2, r1
    5b3e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b40:	232a      	movs	r3, #42	; 0x2a
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	781a      	ldrb	r2, [r3, #0]
    5b46:	232a      	movs	r3, #42	; 0x2a
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	3201      	adds	r2, #1
    5b4c:	701a      	strb	r2, [r3, #0]
    5b4e:	232a      	movs	r3, #42	; 0x2a
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	2b01      	cmp	r3, #1
    5b56:	d9dd      	bls.n	5b14 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b58:	46c0      	nop			; (mov r8, r8)
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b17      	ldr	r3, [pc, #92]	; (5bbc <tc_init+0x34c>)
    5b60:	4798      	blx	r3
    5b62:	1e03      	subs	r3, r0, #0
    5b64:	d1f9      	bne.n	5b5a <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5b66:	68bb      	ldr	r3, [r7, #8]
    5b68:	222c      	movs	r2, #44	; 0x2c
    5b6a:	18ba      	adds	r2, r7, r2
    5b6c:	7812      	ldrb	r2, [r2, #0]
    5b6e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b70:	46c0      	nop			; (mov r8, r8)
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	0018      	movs	r0, r3
    5b76:	4b11      	ldr	r3, [pc, #68]	; (5bbc <tc_init+0x34c>)
    5b78:	4798      	blx	r3
    5b7a:	1e03      	subs	r3, r0, #0
    5b7c:	d1f9      	bne.n	5b72 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	791b      	ldrb	r3, [r3, #4]
    5b82:	2b04      	cmp	r3, #4
    5b84:	d01c      	beq.n	5bc0 <tc_init+0x350>
    5b86:	2b08      	cmp	r3, #8
    5b88:	d100      	bne.n	5b8c <tc_init+0x31c>
    5b8a:	e06e      	b.n	5c6a <tc_init+0x3fa>
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d049      	beq.n	5c24 <tc_init+0x3b4>
    5b90:	e08e      	b.n	5cb0 <tc_init+0x440>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005829 	.word	0x00005829
    5b98:	000173a8 	.word	0x000173a8
    5b9c:	000173ac 	.word	0x000173ac
    5ba0:	2000045c 	.word	0x2000045c
    5ba4:	000057d9 	.word	0x000057d9
    5ba8:	00007f11 	.word	0x00007f11
    5bac:	0000577d 	.word	0x0000577d
    5bb0:	00005765 	.word	0x00005765
    5bb4:	00007c25 	.word	0x00007c25
    5bb8:	00007c69 	.word	0x00007c69
    5bbc:	00005801 	.word	0x00005801
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b3d      	ldr	r3, [pc, #244]	; (5cbc <tc_init+0x44c>)
    5bc8:	4798      	blx	r3
    5bca:	1e03      	subs	r3, r0, #0
    5bcc:	d1f9      	bne.n	5bc2 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	2228      	movs	r2, #40	; 0x28
    5bd2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    5bd4:	68bb      	ldr	r3, [r7, #8]
    5bd6:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    5bd8:	46c0      	nop			; (mov r8, r8)
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	0018      	movs	r0, r3
    5bde:	4b37      	ldr	r3, [pc, #220]	; (5cbc <tc_init+0x44c>)
    5be0:	4798      	blx	r3
    5be2:	1e03      	subs	r3, r0, #0
    5be4:	d1f9      	bne.n	5bda <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	2229      	movs	r2, #41	; 0x29
    5bea:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    5bec:	68bb      	ldr	r3, [r7, #8]
    5bee:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5bf0:	46c0      	nop			; (mov r8, r8)
    5bf2:	68fb      	ldr	r3, [r7, #12]
    5bf4:	0018      	movs	r0, r3
    5bf6:	4b31      	ldr	r3, [pc, #196]	; (5cbc <tc_init+0x44c>)
    5bf8:	4798      	blx	r3
    5bfa:	1e03      	subs	r3, r0, #0
    5bfc:	d1f9      	bne.n	5bf2 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	222a      	movs	r2, #42	; 0x2a
    5c02:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    5c04:	68bb      	ldr	r3, [r7, #8]
    5c06:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c08:	46c0      	nop			; (mov r8, r8)
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b2b      	ldr	r3, [pc, #172]	; (5cbc <tc_init+0x44c>)
    5c10:	4798      	blx	r3
    5c12:	1e03      	subs	r3, r0, #0
    5c14:	d1f9      	bne.n	5c0a <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	222b      	movs	r2, #43	; 0x2b
    5c1a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    5c20:	2300      	movs	r3, #0
    5c22:	e046      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    5c24:	46c0      	nop			; (mov r8, r8)
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b24      	ldr	r3, [pc, #144]	; (5cbc <tc_init+0x44c>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d1f9      	bne.n	5c26 <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	0018      	movs	r0, r3
    5c40:	4b1e      	ldr	r3, [pc, #120]	; (5cbc <tc_init+0x44c>)
    5c42:	4798      	blx	r3
    5c44:	1e03      	subs	r3, r0, #0
    5c46:	d1f9      	bne.n	5c3c <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5c4c:	68bb      	ldr	r3, [r7, #8]
    5c4e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c50:	46c0      	nop			; (mov r8, r8)
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	0018      	movs	r0, r3
    5c56:	4b19      	ldr	r3, [pc, #100]	; (5cbc <tc_init+0x44c>)
    5c58:	4798      	blx	r3
    5c5a:	1e03      	subs	r3, r0, #0
    5c5c:	d1f9      	bne.n	5c52 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    5c66:	2300      	movs	r3, #0
    5c68:	e023      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	0018      	movs	r0, r3
    5c70:	4b12      	ldr	r3, [pc, #72]	; (5cbc <tc_init+0x44c>)
    5c72:	4798      	blx	r3
    5c74:	1e03      	subs	r3, r0, #0
    5c76:	d1f9      	bne.n	5c6c <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c7c:	68bb      	ldr	r3, [r7, #8]
    5c7e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c80:	46c0      	nop			; (mov r8, r8)
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	0018      	movs	r0, r3
    5c86:	4b0d      	ldr	r3, [pc, #52]	; (5cbc <tc_init+0x44c>)
    5c88:	4798      	blx	r3
    5c8a:	1e03      	subs	r3, r0, #0
    5c8c:	d1f9      	bne.n	5c82 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    5c92:	68bb      	ldr	r3, [r7, #8]
    5c94:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0018      	movs	r0, r3
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <tc_init+0x44c>)
    5c9e:	4798      	blx	r3
    5ca0:	1e03      	subs	r3, r0, #0
    5ca2:	d1f9      	bne.n	5c98 <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5ca8:	68bb      	ldr	r3, [r7, #8]
    5caa:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    5cac:	2300      	movs	r3, #0
    5cae:	e000      	b.n	5cb2 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5cb0:	2317      	movs	r3, #23
}
    5cb2:	0018      	movs	r0, r3
    5cb4:	46bd      	mov	sp, r7
    5cb6:	b00d      	add	sp, #52	; 0x34
    5cb8:	bd90      	pop	{r4, r7, pc}
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	00005801 	.word	0x00005801

00005cc0 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b084      	sub	sp, #16
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b0e      	ldr	r3, [pc, #56]	; (5d10 <tc_get_count_value+0x50>)
    5cd6:	4798      	blx	r3
    5cd8:	1e03      	subs	r3, r0, #0
    5cda:	d1f9      	bne.n	5cd0 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	791b      	ldrb	r3, [r3, #4]
    5ce0:	2b04      	cmp	r3, #4
    5ce2:	d004      	beq.n	5cee <tc_get_count_value+0x2e>
    5ce4:	2b08      	cmp	r3, #8
    5ce6:	d00a      	beq.n	5cfe <tc_get_count_value+0x3e>
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d004      	beq.n	5cf6 <tc_get_count_value+0x36>
    5cec:	e00a      	b.n	5d04 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5cee:	68fb      	ldr	r3, [r7, #12]
    5cf0:	7c1b      	ldrb	r3, [r3, #16]
    5cf2:	b2db      	uxtb	r3, r3
    5cf4:	e007      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	8a1b      	ldrh	r3, [r3, #16]
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	e003      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    5cfe:	68fb      	ldr	r3, [r7, #12]
    5d00:	691b      	ldr	r3, [r3, #16]
    5d02:	e000      	b.n	5d06 <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    5d04:	2300      	movs	r3, #0
}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	b004      	add	sp, #16
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00005801 	.word	0x00005801

00005d14 <system_gclk_chan_get_config_defaults>:
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	2200      	movs	r2, #0
    5d20:	701a      	strb	r2, [r3, #0]
}
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	46bd      	mov	sp, r7
    5d26:	b002      	add	sp, #8
    5d28:	bd80      	pop	{r7, pc}
	...

00005d2c <system_apb_clock_set_mask>:
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	af00      	add	r7, sp, #0
    5d32:	0002      	movs	r2, r0
    5d34:	6039      	str	r1, [r7, #0]
    5d36:	1dfb      	adds	r3, r7, #7
    5d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d3a:	1dfb      	adds	r3, r7, #7
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	2b01      	cmp	r3, #1
    5d40:	d00a      	beq.n	5d58 <system_apb_clock_set_mask+0x2c>
    5d42:	2b02      	cmp	r3, #2
    5d44:	d00f      	beq.n	5d66 <system_apb_clock_set_mask+0x3a>
    5d46:	2b00      	cmp	r3, #0
    5d48:	d114      	bne.n	5d74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4c:	4a0d      	ldr	r2, [pc, #52]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4e:	6991      	ldr	r1, [r2, #24]
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	430a      	orrs	r2, r1
    5d54:	619a      	str	r2, [r3, #24]
			break;
    5d56:	e00f      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5d58:	4b0a      	ldr	r3, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5a:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5c:	69d1      	ldr	r1, [r2, #28]
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	430a      	orrs	r2, r1
    5d62:	61da      	str	r2, [r3, #28]
			break;
    5d64:	e008      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5d66:	4b07      	ldr	r3, [pc, #28]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d68:	4a06      	ldr	r2, [pc, #24]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d6a:	6a11      	ldr	r1, [r2, #32]
    5d6c:	683a      	ldr	r2, [r7, #0]
    5d6e:	430a      	orrs	r2, r1
    5d70:	621a      	str	r2, [r3, #32]
			break;
    5d72:	e001      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5d74:	2317      	movs	r3, #23
    5d76:	e000      	b.n	5d7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5d78:	2300      	movs	r3, #0
}
    5d7a:	0018      	movs	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b002      	add	sp, #8
    5d80:	bd80      	pop	{r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	40000400 	.word	0x40000400

00005d88 <system_pinmux_get_config_defaults>:
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	2280      	movs	r2, #128	; 0x80
    5d94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	2200      	movs	r2, #0
    5d9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	2201      	movs	r2, #1
    5da0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2200      	movs	r2, #0
    5da6:	70da      	strb	r2, [r3, #3]
}
    5da8:	46c0      	nop			; (mov r8, r8)
    5daa:	46bd      	mov	sp, r7
    5dac:	b002      	add	sp, #8
    5dae:	bd80      	pop	{r7, pc}

00005db0 <system_is_debugger_present>:
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5db4:	4b05      	ldr	r3, [pc, #20]	; (5dcc <system_is_debugger_present+0x1c>)
    5db6:	789b      	ldrb	r3, [r3, #2]
    5db8:	b2db      	uxtb	r3, r3
    5dba:	001a      	movs	r2, r3
    5dbc:	2302      	movs	r3, #2
    5dbe:	4013      	ands	r3, r2
    5dc0:	1e5a      	subs	r2, r3, #1
    5dc2:	4193      	sbcs	r3, r2
    5dc4:	b2db      	uxtb	r3, r3
}
    5dc6:	0018      	movs	r0, r3
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	41002000 	.word	0x41002000

00005dd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5dd0:	b580      	push	{r7, lr}
    5dd2:	b084      	sub	sp, #16
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	69db      	ldr	r3, [r3, #28]
    5de2:	1e5a      	subs	r2, r3, #1
    5de4:	4193      	sbcs	r3, r2
    5de6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5de8:	0018      	movs	r0, r3
    5dea:	46bd      	mov	sp, r7
    5dec:	b004      	add	sp, #16
    5dee:	bd80      	pop	{r7, pc}

00005df0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5df8:	46c0      	nop			; (mov r8, r8)
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b04      	ldr	r3, [pc, #16]	; (5e10 <_usart_wait_for_sync+0x20>)
    5e00:	4798      	blx	r3
    5e02:	1e03      	subs	r3, r0, #0
    5e04:	d1f9      	bne.n	5dfa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	46bd      	mov	sp, r7
    5e0a:	b002      	add	sp, #8
    5e0c:	bd80      	pop	{r7, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	00005dd1 	.word	0x00005dd1

00005e14 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5e14:	b5b0      	push	{r4, r5, r7, lr}
    5e16:	b08c      	sub	sp, #48	; 0x30
    5e18:	af02      	add	r7, sp, #8
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	0018      	movs	r0, r3
    5e2a:	4ba8      	ldr	r3, [pc, #672]	; (60cc <_usart_set_config+0x2b8>)
    5e2c:	4798      	blx	r3
    5e2e:	0003      	movs	r3, r0
    5e30:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5e32:	697b      	ldr	r3, [r7, #20]
    5e34:	3314      	adds	r3, #20
    5e36:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5e38:	2300      	movs	r3, #0
    5e3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5e3c:	2300      	movs	r3, #0
    5e3e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	2200      	movs	r2, #0
    5e46:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e48:	231f      	movs	r3, #31
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	2200      	movs	r2, #0
    5e4e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e50:	231e      	movs	r3, #30
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	2210      	movs	r2, #16
    5e56:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5e58:	683b      	ldr	r3, [r7, #0]
    5e5a:	8a1b      	ldrh	r3, [r3, #16]
    5e5c:	2280      	movs	r2, #128	; 0x80
    5e5e:	01d2      	lsls	r2, r2, #7
    5e60:	4293      	cmp	r3, r2
    5e62:	d01c      	beq.n	5e9e <_usart_set_config+0x8a>
    5e64:	2280      	movs	r2, #128	; 0x80
    5e66:	01d2      	lsls	r2, r2, #7
    5e68:	4293      	cmp	r3, r2
    5e6a:	dc06      	bgt.n	5e7a <_usart_set_config+0x66>
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d00d      	beq.n	5e8c <_usart_set_config+0x78>
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0192      	lsls	r2, r2, #6
    5e74:	4293      	cmp	r3, r2
    5e76:	d024      	beq.n	5ec2 <_usart_set_config+0xae>
    5e78:	e035      	b.n	5ee6 <_usart_set_config+0xd2>
    5e7a:	22c0      	movs	r2, #192	; 0xc0
    5e7c:	01d2      	lsls	r2, r2, #7
    5e7e:	4293      	cmp	r3, r2
    5e80:	d028      	beq.n	5ed4 <_usart_set_config+0xc0>
    5e82:	2280      	movs	r2, #128	; 0x80
    5e84:	0212      	lsls	r2, r2, #8
    5e86:	4293      	cmp	r3, r2
    5e88:	d012      	beq.n	5eb0 <_usart_set_config+0x9c>
    5e8a:	e02c      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e8c:	231f      	movs	r3, #31
    5e8e:	18fb      	adds	r3, r7, r3
    5e90:	2200      	movs	r2, #0
    5e92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e94:	231e      	movs	r3, #30
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	2210      	movs	r2, #16
    5e9a:	701a      	strb	r2, [r3, #0]
			break;
    5e9c:	e023      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e9e:	231f      	movs	r3, #31
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	2200      	movs	r2, #0
    5ea4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ea6:	231e      	movs	r3, #30
    5ea8:	18fb      	adds	r3, r7, r3
    5eaa:	2208      	movs	r2, #8
    5eac:	701a      	strb	r2, [r3, #0]
			break;
    5eae:	e01a      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eb0:	231f      	movs	r3, #31
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2200      	movs	r2, #0
    5eb6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5eb8:	231e      	movs	r3, #30
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	2203      	movs	r2, #3
    5ebe:	701a      	strb	r2, [r3, #0]
			break;
    5ec0:	e011      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec2:	231f      	movs	r3, #31
    5ec4:	18fb      	adds	r3, r7, r3
    5ec6:	2201      	movs	r2, #1
    5ec8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5eca:	231e      	movs	r3, #30
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	2210      	movs	r2, #16
    5ed0:	701a      	strb	r2, [r3, #0]
			break;
    5ed2:	e008      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ed4:	231f      	movs	r3, #31
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	2201      	movs	r2, #1
    5eda:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5edc:	231e      	movs	r3, #30
    5ede:	18fb      	adds	r3, r7, r3
    5ee0:	2208      	movs	r2, #8
    5ee2:	701a      	strb	r2, [r3, #0]
			break;
    5ee4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5ee6:	683b      	ldr	r3, [r7, #0]
    5ee8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5eea:	683b      	ldr	r3, [r7, #0]
    5eec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5eee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5ef4:	4313      	orrs	r3, r2
		config->sample_rate |
    5ef6:	683a      	ldr	r2, [r7, #0]
    5ef8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    5efa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	7e12      	ldrb	r2, [r2, #24]
    5f00:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5f02:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f04:	683a      	ldr	r2, [r7, #0]
    5f06:	2126      	movs	r1, #38	; 0x26
    5f08:	5c52      	ldrb	r2, [r2, r1]
    5f0a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5f0c:	4313      	orrs	r3, r2
    5f0e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5f10:	231d      	movs	r3, #29
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	2200      	movs	r2, #0
    5f16:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	685b      	ldr	r3, [r3, #4]
    5f1c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5f1e:	68fb      	ldr	r3, [r7, #12]
    5f20:	2b00      	cmp	r3, #0
    5f22:	d01e      	beq.n	5f62 <_usart_set_config+0x14e>
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	0552      	lsls	r2, r2, #21
    5f28:	4293      	cmp	r3, r2
    5f2a:	d14f      	bne.n	5fcc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	2227      	movs	r2, #39	; 0x27
    5f30:	5c9b      	ldrb	r3, [r3, r2]
    5f32:	2201      	movs	r2, #1
    5f34:	4053      	eors	r3, r2
    5f36:	b2db      	uxtb	r3, r3
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d046      	beq.n	5fca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	6a1d      	ldr	r5, [r3, #32]
    5f40:	693b      	ldr	r3, [r7, #16]
    5f42:	b2db      	uxtb	r3, r3
    5f44:	0018      	movs	r0, r3
    5f46:	4b62      	ldr	r3, [pc, #392]	; (60d0 <_usart_set_config+0x2bc>)
    5f48:	4798      	blx	r3
    5f4a:	0001      	movs	r1, r0
    5f4c:	231d      	movs	r3, #29
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	230a      	movs	r3, #10
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	001a      	movs	r2, r3
    5f56:	0028      	movs	r0, r5
    5f58:	4b5e      	ldr	r3, [pc, #376]	; (60d4 <_usart_set_config+0x2c0>)
    5f5a:	4798      	blx	r3
    5f5c:	0003      	movs	r3, r0
    5f5e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5f60:	e033      	b.n	5fca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	2227      	movs	r2, #39	; 0x27
    5f66:	5c9b      	ldrb	r3, [r3, r2]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d014      	beq.n	5f96 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	6a18      	ldr	r0, [r3, #32]
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5f74:	231d      	movs	r3, #29
    5f76:	18fc      	adds	r4, r7, r3
    5f78:	231f      	movs	r3, #31
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	781d      	ldrb	r5, [r3, #0]
    5f7e:	230a      	movs	r3, #10
    5f80:	18fa      	adds	r2, r7, r3
    5f82:	231e      	movs	r3, #30
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	9300      	str	r3, [sp, #0]
    5f8a:	002b      	movs	r3, r5
    5f8c:	4d52      	ldr	r5, [pc, #328]	; (60d8 <_usart_set_config+0x2c4>)
    5f8e:	47a8      	blx	r5
    5f90:	0003      	movs	r3, r0
    5f92:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5f94:	e01a      	b.n	5fcc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5f96:	683b      	ldr	r3, [r7, #0]
    5f98:	6a1d      	ldr	r5, [r3, #32]
    5f9a:	693b      	ldr	r3, [r7, #16]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	0018      	movs	r0, r3
    5fa0:	4b4b      	ldr	r3, [pc, #300]	; (60d0 <_usart_set_config+0x2bc>)
    5fa2:	4798      	blx	r3
				status_code =
    5fa4:	231d      	movs	r3, #29
    5fa6:	18fc      	adds	r4, r7, r3
    5fa8:	231f      	movs	r3, #31
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	7819      	ldrb	r1, [r3, #0]
    5fae:	230a      	movs	r3, #10
    5fb0:	18fa      	adds	r2, r7, r3
    5fb2:	231e      	movs	r3, #30
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	9300      	str	r3, [sp, #0]
    5fba:	000b      	movs	r3, r1
    5fbc:	0001      	movs	r1, r0
    5fbe:	0028      	movs	r0, r5
    5fc0:	4d45      	ldr	r5, [pc, #276]	; (60d8 <_usart_set_config+0x2c4>)
    5fc2:	47a8      	blx	r5
    5fc4:	0003      	movs	r3, r0
    5fc6:	7023      	strb	r3, [r4, #0]
			break;
    5fc8:	e000      	b.n	5fcc <_usart_set_config+0x1b8>
			break;
    5fca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5fcc:	231d      	movs	r3, #29
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d003      	beq.n	5fde <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5fd6:	231d      	movs	r3, #29
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	e071      	b.n	60c2 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5fde:	683b      	ldr	r3, [r7, #0]
    5fe0:	7e5b      	ldrb	r3, [r3, #25]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d003      	beq.n	5fee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	7e9a      	ldrb	r2, [r3, #26]
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	0018      	movs	r0, r3
    5ff2:	4b3a      	ldr	r3, [pc, #232]	; (60dc <_usart_set_config+0x2c8>)
    5ff4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5ff6:	230a      	movs	r3, #10
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	881a      	ldrh	r2, [r3, #0]
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	4313      	orrs	r3, r2
    6006:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6008:	683b      	ldr	r3, [r7, #0]
    600a:	2227      	movs	r2, #39	; 0x27
    600c:	5c9b      	ldrb	r3, [r3, r2]
    600e:	2201      	movs	r2, #1
    6010:	4053      	eors	r3, r2
    6012:	b2db      	uxtb	r3, r3
    6014:	2b00      	cmp	r3, #0
    6016:	d003      	beq.n	6020 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    601a:	2204      	movs	r2, #4
    601c:	4313      	orrs	r3, r2
    601e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	7e5b      	ldrb	r3, [r3, #25]
    6024:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	7f1b      	ldrb	r3, [r3, #28]
    602a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    602c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    602e:	683b      	ldr	r3, [r7, #0]
    6030:	7f5b      	ldrb	r3, [r3, #29]
    6032:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6034:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	2124      	movs	r1, #36	; 0x24
    603a:	5c5b      	ldrb	r3, [r3, r1]
    603c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    603e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	2125      	movs	r1, #37	; 0x25
    6044:	5c5b      	ldrb	r3, [r3, r1]
    6046:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6048:	4313      	orrs	r3, r2
	ctrlb =  
    604a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    604c:	683b      	ldr	r3, [r7, #0]
    604e:	7adb      	ldrb	r3, [r3, #11]
    6050:	001a      	movs	r2, r3
    6052:	6a3b      	ldr	r3, [r7, #32]
    6054:	4313      	orrs	r3, r2
    6056:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	891b      	ldrh	r3, [r3, #8]
    605c:	2bff      	cmp	r3, #255	; 0xff
    605e:	d00b      	beq.n	6078 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6062:	2280      	movs	r2, #128	; 0x80
    6064:	0452      	lsls	r2, r2, #17
    6066:	4313      	orrs	r3, r2
    6068:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	891b      	ldrh	r3, [r3, #8]
    606e:	001a      	movs	r2, r3
    6070:	6a3b      	ldr	r3, [r7, #32]
    6072:	4313      	orrs	r3, r2
    6074:	623b      	str	r3, [r7, #32]
    6076:	e008      	b.n	608a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    6078:	683b      	ldr	r3, [r7, #0]
    607a:	7edb      	ldrb	r3, [r3, #27]
    607c:	2b00      	cmp	r3, #0
    607e:	d004      	beq.n	608a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6082:	2280      	movs	r2, #128	; 0x80
    6084:	04d2      	lsls	r2, r2, #19
    6086:	4313      	orrs	r3, r2
    6088:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    608a:	683b      	ldr	r3, [r7, #0]
    608c:	222c      	movs	r2, #44	; 0x2c
    608e:	5c9b      	ldrb	r3, [r3, r2]
    6090:	2b00      	cmp	r3, #0
    6092:	d103      	bne.n	609c <_usart_set_config+0x288>
    6094:	4b12      	ldr	r3, [pc, #72]	; (60e0 <_usart_set_config+0x2cc>)
    6096:	4798      	blx	r3
    6098:	1e03      	subs	r3, r0, #0
    609a:	d003      	beq.n	60a4 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609e:	2280      	movs	r2, #128	; 0x80
    60a0:	4313      	orrs	r3, r2
    60a2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	0018      	movs	r0, r3
    60a8:	4b0c      	ldr	r3, [pc, #48]	; (60dc <_usart_set_config+0x2c8>)
    60aa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    60ac:	69bb      	ldr	r3, [r7, #24]
    60ae:	6a3a      	ldr	r2, [r7, #32]
    60b0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	0018      	movs	r0, r3
    60b6:	4b09      	ldr	r3, [pc, #36]	; (60dc <_usart_set_config+0x2c8>)
    60b8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    60ba:	69bb      	ldr	r3, [r7, #24]
    60bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60be:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    60c0:	2300      	movs	r3, #0
}
    60c2:	0018      	movs	r0, r3
    60c4:	46bd      	mov	sp, r7
    60c6:	b00a      	add	sp, #40	; 0x28
    60c8:	bdb0      	pop	{r4, r5, r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	00007039 	.word	0x00007039
    60d0:	00007d49 	.word	0x00007d49
    60d4:	00006b87 	.word	0x00006b87
    60d8:	00006c05 	.word	0x00006c05
    60dc:	00005df1 	.word	0x00005df1
    60e0:	00005db1 	.word	0x00005db1

000060e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    60e4:	b590      	push	{r4, r7, lr}
    60e6:	b093      	sub	sp, #76	; 0x4c
    60e8:	af00      	add	r7, sp, #0
    60ea:	60f8      	str	r0, [r7, #12]
    60ec:	60b9      	str	r1, [r7, #8]
    60ee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    60f0:	233b      	movs	r3, #59	; 0x3b
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	2200      	movs	r2, #0
    60f6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	68ba      	ldr	r2, [r7, #8]
    60fc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	0018      	movs	r0, r3
    610a:	4b86      	ldr	r3, [pc, #536]	; (6324 <usart_init+0x240>)
    610c:	4798      	blx	r3
    610e:	0003      	movs	r3, r0
    6110:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6114:	3302      	adds	r3, #2
    6116:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    611a:	3314      	adds	r3, #20
    611c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	2201      	movs	r2, #1
    6124:	4013      	ands	r3, r2
    6126:	d001      	beq.n	612c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6128:	2305      	movs	r3, #5
    612a:	e0f6      	b.n	631a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	2202      	movs	r2, #2
    6132:	4013      	ands	r3, r2
    6134:	d001      	beq.n	613a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6136:	231c      	movs	r3, #28
    6138:	e0ef      	b.n	631a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    613a:	2201      	movs	r2, #1
    613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    613e:	409a      	lsls	r2, r3
    6140:	0013      	movs	r3, r2
    6142:	0019      	movs	r1, r3
    6144:	2002      	movs	r0, #2
    6146:	4b78      	ldr	r3, [pc, #480]	; (6328 <usart_init+0x244>)
    6148:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    614a:	2324      	movs	r3, #36	; 0x24
    614c:	18fb      	adds	r3, r7, r3
    614e:	0018      	movs	r0, r3
    6150:	4b76      	ldr	r3, [pc, #472]	; (632c <usart_init+0x248>)
    6152:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	222d      	movs	r2, #45	; 0x2d
    6158:	5c9a      	ldrb	r2, [r3, r2]
    615a:	2324      	movs	r3, #36	; 0x24
    615c:	18fb      	adds	r3, r7, r3
    615e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6162:	b2db      	uxtb	r3, r3
    6164:	2224      	movs	r2, #36	; 0x24
    6166:	18ba      	adds	r2, r7, r2
    6168:	0011      	movs	r1, r2
    616a:	0018      	movs	r0, r3
    616c:	4b70      	ldr	r3, [pc, #448]	; (6330 <usart_init+0x24c>)
    616e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6170:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6172:	b2db      	uxtb	r3, r3
    6174:	0018      	movs	r0, r3
    6176:	4b6f      	ldr	r3, [pc, #444]	; (6334 <usart_init+0x250>)
    6178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	222d      	movs	r2, #45	; 0x2d
    617e:	5c9b      	ldrb	r3, [r3, r2]
    6180:	2100      	movs	r1, #0
    6182:	0018      	movs	r0, r3
    6184:	4b6c      	ldr	r3, [pc, #432]	; (6338 <usart_init+0x254>)
    6186:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	7ada      	ldrb	r2, [r3, #11]
    618c:	68fb      	ldr	r3, [r7, #12]
    618e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	2224      	movs	r2, #36	; 0x24
    6194:	5c9a      	ldrb	r2, [r3, r2]
    6196:	68fb      	ldr	r3, [r7, #12]
    6198:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	2225      	movs	r2, #37	; 0x25
    619e:	5c9a      	ldrb	r2, [r3, r2]
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	7eda      	ldrb	r2, [r3, #27]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	7f1a      	ldrb	r2, [r3, #28]
    61b0:	68fb      	ldr	r3, [r7, #12]
    61b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    61b4:	233b      	movs	r3, #59	; 0x3b
    61b6:	18fc      	adds	r4, r7, r3
    61b8:	687a      	ldr	r2, [r7, #4]
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	0011      	movs	r1, r2
    61be:	0018      	movs	r0, r3
    61c0:	4b5e      	ldr	r3, [pc, #376]	; (633c <usart_init+0x258>)
    61c2:	4798      	blx	r3
    61c4:	0003      	movs	r3, r0
    61c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    61c8:	233b      	movs	r3, #59	; 0x3b
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <usart_init+0xf6>
		return status_code;
    61d2:	233b      	movs	r3, #59	; 0x3b
    61d4:	18fb      	adds	r3, r7, r3
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	e09f      	b.n	631a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    61da:	2320      	movs	r3, #32
    61dc:	18fb      	adds	r3, r7, r3
    61de:	0018      	movs	r0, r3
    61e0:	4b57      	ldr	r3, [pc, #348]	; (6340 <usart_init+0x25c>)
    61e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    61e4:	2320      	movs	r3, #32
    61e6:	18fb      	adds	r3, r7, r3
    61e8:	2200      	movs	r2, #0
    61ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    61ec:	2320      	movs	r3, #32
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2200      	movs	r2, #0
    61f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    61f8:	2310      	movs	r3, #16
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6202:	2310      	movs	r3, #16
    6204:	18fb      	adds	r3, r7, r3
    6206:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    620c:	2310      	movs	r3, #16
    620e:	18fb      	adds	r3, r7, r3
    6210:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6216:	2310      	movs	r3, #16
    6218:	18fb      	adds	r3, r7, r3
    621a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    621c:	2347      	movs	r3, #71	; 0x47
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	701a      	strb	r2, [r3, #0]
    6224:	e02c      	b.n	6280 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6226:	2347      	movs	r3, #71	; 0x47
    6228:	18fb      	adds	r3, r7, r3
    622a:	781a      	ldrb	r2, [r3, #0]
    622c:	2310      	movs	r3, #16
    622e:	18fb      	adds	r3, r7, r3
    6230:	0092      	lsls	r2, r2, #2
    6232:	58d3      	ldr	r3, [r2, r3]
    6234:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6238:	2b00      	cmp	r3, #0
    623a:	d109      	bne.n	6250 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    623c:	2347      	movs	r3, #71	; 0x47
    623e:	18fb      	adds	r3, r7, r3
    6240:	781a      	ldrb	r2, [r3, #0]
    6242:	68bb      	ldr	r3, [r7, #8]
    6244:	0011      	movs	r1, r2
    6246:	0018      	movs	r0, r3
    6248:	4b3e      	ldr	r3, [pc, #248]	; (6344 <usart_init+0x260>)
    624a:	4798      	blx	r3
    624c:	0003      	movs	r3, r0
    624e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6252:	3301      	adds	r3, #1
    6254:	d00d      	beq.n	6272 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6258:	b2da      	uxtb	r2, r3
    625a:	2320      	movs	r3, #32
    625c:	18fb      	adds	r3, r7, r3
    625e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6262:	0c1b      	lsrs	r3, r3, #16
    6264:	b2db      	uxtb	r3, r3
    6266:	2220      	movs	r2, #32
    6268:	18ba      	adds	r2, r7, r2
    626a:	0011      	movs	r1, r2
    626c:	0018      	movs	r0, r3
    626e:	4b36      	ldr	r3, [pc, #216]	; (6348 <usart_init+0x264>)
    6270:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6272:	2347      	movs	r3, #71	; 0x47
    6274:	18fb      	adds	r3, r7, r3
    6276:	781a      	ldrb	r2, [r3, #0]
    6278:	2347      	movs	r3, #71	; 0x47
    627a:	18fb      	adds	r3, r7, r3
    627c:	3201      	adds	r2, #1
    627e:	701a      	strb	r2, [r3, #0]
    6280:	2347      	movs	r3, #71	; 0x47
    6282:	18fb      	adds	r3, r7, r3
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	2b03      	cmp	r3, #3
    6288:	d9cd      	bls.n	6226 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    628a:	2300      	movs	r3, #0
    628c:	63fb      	str	r3, [r7, #60]	; 0x3c
    628e:	e00a      	b.n	62a6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    6290:	68fa      	ldr	r2, [r7, #12]
    6292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6294:	3302      	adds	r3, #2
    6296:	009b      	lsls	r3, r3, #2
    6298:	18d3      	adds	r3, r2, r3
    629a:	3304      	adds	r3, #4
    629c:	2200      	movs	r2, #0
    629e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    62a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a2:	3301      	adds	r3, #1
    62a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    62a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a8:	2b05      	cmp	r3, #5
    62aa:	d9f1      	bls.n	6290 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	2200      	movs	r2, #0
    62b0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	2200      	movs	r2, #0
    62b6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	2200      	movs	r2, #0
    62bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	2200      	movs	r2, #0
    62c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	2230      	movs	r2, #48	; 0x30
    62c8:	2100      	movs	r1, #0
    62ca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	2231      	movs	r2, #49	; 0x31
    62d0:	2100      	movs	r1, #0
    62d2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	2232      	movs	r2, #50	; 0x32
    62d8:	2100      	movs	r1, #0
    62da:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	2233      	movs	r2, #51	; 0x33
    62e0:	2100      	movs	r1, #0
    62e2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	2227      	movs	r2, #39	; 0x27
    62ea:	18bc      	adds	r4, r7, r2
    62ec:	0018      	movs	r0, r3
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <usart_init+0x240>)
    62f0:	4798      	blx	r3
    62f2:	0003      	movs	r3, r0
    62f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    62f6:	4a15      	ldr	r2, [pc, #84]	; (634c <usart_init+0x268>)
    62f8:	2327      	movs	r3, #39	; 0x27
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	0011      	movs	r1, r2
    6300:	0018      	movs	r0, r3
    6302:	4b13      	ldr	r3, [pc, #76]	; (6350 <usart_init+0x26c>)
    6304:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6306:	2327      	movs	r3, #39	; 0x27
    6308:	18fb      	adds	r3, r7, r3
    630a:	781a      	ldrb	r2, [r3, #0]
    630c:	4b11      	ldr	r3, [pc, #68]	; (6354 <usart_init+0x270>)
    630e:	0092      	lsls	r2, r2, #2
    6310:	68f9      	ldr	r1, [r7, #12]
    6312:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6314:	233b      	movs	r3, #59	; 0x3b
    6316:	18fb      	adds	r3, r7, r3
    6318:	781b      	ldrb	r3, [r3, #0]
}
    631a:	0018      	movs	r0, r3
    631c:	46bd      	mov	sp, r7
    631e:	b013      	add	sp, #76	; 0x4c
    6320:	bd90      	pop	{r4, r7, pc}
    6322:	46c0      	nop			; (mov r8, r8)
    6324:	00007039 	.word	0x00007039
    6328:	00005d2d 	.word	0x00005d2d
    632c:	00005d15 	.word	0x00005d15
    6330:	00007c25 	.word	0x00007c25
    6334:	00007c69 	.word	0x00007c69
    6338:	00006df1 	.word	0x00006df1
    633c:	00005e15 	.word	0x00005e15
    6340:	00005d89 	.word	0x00005d89
    6344:	00006e7d 	.word	0x00006e7d
    6348:	00007f11 	.word	0x00007f11
    634c:	00006751 	.word	0x00006751
    6350:	0000709d 	.word	0x0000709d
    6354:	20000468 	.word	0x20000468

00006358 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6358:	b580      	push	{r7, lr}
    635a:	b084      	sub	sp, #16
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
    6360:	000a      	movs	r2, r1
    6362:	1cbb      	adds	r3, r7, #2
    6364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	79db      	ldrb	r3, [r3, #7]
    6370:	2201      	movs	r2, #1
    6372:	4053      	eors	r3, r2
    6374:	b2db      	uxtb	r3, r3
    6376:	2b00      	cmp	r3, #0
    6378:	d001      	beq.n	637e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    637a:	231c      	movs	r3, #28
    637c:	e017      	b.n	63ae <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6382:	b29b      	uxth	r3, r3
    6384:	2b00      	cmp	r3, #0
    6386:	d001      	beq.n	638c <usart_write_wait+0x34>
		return STATUS_BUSY;
    6388:	2305      	movs	r3, #5
    638a:	e010      	b.n	63ae <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	0018      	movs	r0, r3
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <usart_write_wait+0x60>)
    6392:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6394:	68fb      	ldr	r3, [r7, #12]
    6396:	1cba      	adds	r2, r7, #2
    6398:	8812      	ldrh	r2, [r2, #0]
    639a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    639c:	46c0      	nop			; (mov r8, r8)
    639e:	68fb      	ldr	r3, [r7, #12]
    63a0:	7e1b      	ldrb	r3, [r3, #24]
    63a2:	b2db      	uxtb	r3, r3
    63a4:	001a      	movs	r2, r3
    63a6:	2302      	movs	r3, #2
    63a8:	4013      	ands	r3, r2
    63aa:	d0f8      	beq.n	639e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    63ac:	2300      	movs	r3, #0
}
    63ae:	0018      	movs	r0, r3
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00005df1 	.word	0x00005df1

000063bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b08a      	sub	sp, #40	; 0x28
    63c0:	af00      	add	r7, sp, #0
    63c2:	60f8      	str	r0, [r7, #12]
    63c4:	60b9      	str	r1, [r7, #8]
    63c6:	1dbb      	adds	r3, r7, #6
    63c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    63ca:	1dbb      	adds	r3, r7, #6
    63cc:	881b      	ldrh	r3, [r3, #0]
    63ce:	2b00      	cmp	r3, #0
    63d0:	d101      	bne.n	63d6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    63d2:	2317      	movs	r3, #23
    63d4:	e07e      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	79db      	ldrb	r3, [r3, #7]
    63da:	2201      	movs	r2, #1
    63dc:	4053      	eors	r3, r2
    63de:	b2db      	uxtb	r3, r3
    63e0:	2b00      	cmp	r3, #0
    63e2:	d001      	beq.n	63e8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    63e4:	231c      	movs	r3, #28
    63e6:	e075      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    63e8:	68fb      	ldr	r3, [r7, #12]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	0018      	movs	r0, r3
    63f2:	4b3a      	ldr	r3, [pc, #232]	; (64dc <usart_write_buffer_wait+0x120>)
    63f4:	4798      	blx	r3

	uint16_t tx_pos = 0;
    63f6:	2326      	movs	r3, #38	; 0x26
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    63fe:	e048      	b.n	6492 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6400:	2300      	movs	r3, #0
    6402:	623b      	str	r3, [r7, #32]
    6404:	e00f      	b.n	6426 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6406:	697b      	ldr	r3, [r7, #20]
    6408:	7e1b      	ldrb	r3, [r3, #24]
    640a:	b2db      	uxtb	r3, r3
    640c:	001a      	movs	r2, r3
    640e:	2301      	movs	r3, #1
    6410:	4013      	ands	r3, r2
    6412:	d10d      	bne.n	6430 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    6414:	6a3b      	ldr	r3, [r7, #32]
    6416:	4a32      	ldr	r2, [pc, #200]	; (64e0 <usart_write_buffer_wait+0x124>)
    6418:	4293      	cmp	r3, r2
    641a:	d101      	bne.n	6420 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    641c:	2312      	movs	r3, #18
    641e:	e059      	b.n	64d4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6420:	6a3b      	ldr	r3, [r7, #32]
    6422:	3301      	adds	r3, #1
    6424:	623b      	str	r3, [r7, #32]
    6426:	6a3b      	ldr	r3, [r7, #32]
    6428:	4a2d      	ldr	r2, [pc, #180]	; (64e0 <usart_write_buffer_wait+0x124>)
    642a:	4293      	cmp	r3, r2
    642c:	d9eb      	bls.n	6406 <usart_write_buffer_wait+0x4a>
    642e:	e000      	b.n	6432 <usart_write_buffer_wait+0x76>
				break;
    6430:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    6432:	2326      	movs	r3, #38	; 0x26
    6434:	18fb      	adds	r3, r7, r3
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	2226      	movs	r2, #38	; 0x26
    643a:	18ba      	adds	r2, r7, r2
    643c:	1c59      	adds	r1, r3, #1
    643e:	8011      	strh	r1, [r2, #0]
    6440:	001a      	movs	r2, r3
    6442:	68bb      	ldr	r3, [r7, #8]
    6444:	189b      	adds	r3, r3, r2
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	231e      	movs	r3, #30
    644a:	18fb      	adds	r3, r7, r3
    644c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	795b      	ldrb	r3, [r3, #5]
    6452:	2b01      	cmp	r3, #1
    6454:	d115      	bne.n	6482 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6456:	2326      	movs	r3, #38	; 0x26
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	2226      	movs	r2, #38	; 0x26
    645e:	18ba      	adds	r2, r7, r2
    6460:	1c59      	adds	r1, r3, #1
    6462:	8011      	strh	r1, [r2, #0]
    6464:	001a      	movs	r2, r3
    6466:	68bb      	ldr	r3, [r7, #8]
    6468:	189b      	adds	r3, r3, r2
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	021b      	lsls	r3, r3, #8
    646e:	b21a      	sxth	r2, r3
    6470:	231e      	movs	r3, #30
    6472:	18fb      	adds	r3, r7, r3
    6474:	2100      	movs	r1, #0
    6476:	5e5b      	ldrsh	r3, [r3, r1]
    6478:	4313      	orrs	r3, r2
    647a:	b21a      	sxth	r2, r3
    647c:	231e      	movs	r3, #30
    647e:	18fb      	adds	r3, r7, r3
    6480:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    6482:	231e      	movs	r3, #30
    6484:	18fb      	adds	r3, r7, r3
    6486:	881a      	ldrh	r2, [r3, #0]
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	0011      	movs	r1, r2
    648c:	0018      	movs	r0, r3
    648e:	4b15      	ldr	r3, [pc, #84]	; (64e4 <usart_write_buffer_wait+0x128>)
    6490:	4798      	blx	r3
	while (length--) {
    6492:	1dbb      	adds	r3, r7, #6
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	1dba      	adds	r2, r7, #6
    6498:	1e59      	subs	r1, r3, #1
    649a:	8011      	strh	r1, [r2, #0]
    649c:	2b00      	cmp	r3, #0
    649e:	d1af      	bne.n	6400 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	61bb      	str	r3, [r7, #24]
    64a4:	e00f      	b.n	64c6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    64a6:	697b      	ldr	r3, [r7, #20]
    64a8:	7e1b      	ldrb	r3, [r3, #24]
    64aa:	b2db      	uxtb	r3, r3
    64ac:	001a      	movs	r2, r3
    64ae:	2302      	movs	r3, #2
    64b0:	4013      	ands	r3, r2
    64b2:	d10d      	bne.n	64d0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    64b4:	69bb      	ldr	r3, [r7, #24]
    64b6:	4a0a      	ldr	r2, [pc, #40]	; (64e0 <usart_write_buffer_wait+0x124>)
    64b8:	4293      	cmp	r3, r2
    64ba:	d101      	bne.n	64c0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    64bc:	2312      	movs	r3, #18
    64be:	e009      	b.n	64d4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64c0:	69bb      	ldr	r3, [r7, #24]
    64c2:	3301      	adds	r3, #1
    64c4:	61bb      	str	r3, [r7, #24]
    64c6:	69bb      	ldr	r3, [r7, #24]
    64c8:	4a05      	ldr	r2, [pc, #20]	; (64e0 <usart_write_buffer_wait+0x124>)
    64ca:	4293      	cmp	r3, r2
    64cc:	d9eb      	bls.n	64a6 <usart_write_buffer_wait+0xea>
    64ce:	e000      	b.n	64d2 <usart_write_buffer_wait+0x116>
			break;
    64d0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    64d2:	2300      	movs	r3, #0
}
    64d4:	0018      	movs	r0, r3
    64d6:	46bd      	mov	sp, r7
    64d8:	b00a      	add	sp, #40	; 0x28
    64da:	bd80      	pop	{r7, pc}
    64dc:	00005df1 	.word	0x00005df1
    64e0:	0000ffff 	.word	0x0000ffff
    64e4:	00006359 	.word	0x00006359

000064e8 <system_interrupt_enter_critical_section>:
{
    64e8:	b580      	push	{r7, lr}
    64ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <system_interrupt_enter_critical_section+0x10>)
    64ee:	4798      	blx	r3
}
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	00007271 	.word	0x00007271

000064fc <system_interrupt_leave_critical_section>:
{
    64fc:	b580      	push	{r7, lr}
    64fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6500:	4b02      	ldr	r3, [pc, #8]	; (650c <system_interrupt_leave_critical_section+0x10>)
    6502:	4798      	blx	r3
}
    6504:	46c0      	nop			; (mov r8, r8)
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	000072c5 	.word	0x000072c5

00006510 <usart_is_syncing>:
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	69db      	ldr	r3, [r3, #28]
    6522:	1e5a      	subs	r2, r3, #1
    6524:	4193      	sbcs	r3, r2
    6526:	b2db      	uxtb	r3, r3
}
    6528:	0018      	movs	r0, r3
    652a:	46bd      	mov	sp, r7
    652c:	b004      	add	sp, #16
    652e:	bd80      	pop	{r7, pc}

00006530 <_usart_wait_for_sync>:
{
    6530:	b580      	push	{r7, lr}
    6532:	b082      	sub	sp, #8
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	0018      	movs	r0, r3
    653e:	4b04      	ldr	r3, [pc, #16]	; (6550 <_usart_wait_for_sync+0x20>)
    6540:	4798      	blx	r3
    6542:	1e03      	subs	r3, r0, #0
    6544:	d1f9      	bne.n	653a <_usart_wait_for_sync+0xa>
}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	46bd      	mov	sp, r7
    654a:	b002      	add	sp, #8
    654c:	bd80      	pop	{r7, pc}
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	00006511 	.word	0x00006511

00006554 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6554:	b580      	push	{r7, lr}
    6556:	b086      	sub	sp, #24
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	60b9      	str	r1, [r7, #8]
    655e:	1dbb      	adds	r3, r7, #6
    6560:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6568:	4b0f      	ldr	r3, [pc, #60]	; (65a8 <_usart_write_buffer+0x54>)
    656a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6570:	b29b      	uxth	r3, r3
    6572:	2b00      	cmp	r3, #0
    6574:	d003      	beq.n	657e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    6576:	4b0d      	ldr	r3, [pc, #52]	; (65ac <_usart_write_buffer+0x58>)
    6578:	4798      	blx	r3
		return STATUS_BUSY;
    657a:	2305      	movs	r3, #5
    657c:	e010      	b.n	65a0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	1dba      	adds	r2, r7, #6
    6582:	8812      	ldrh	r2, [r2, #0]
    6584:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    6586:	4b09      	ldr	r3, [pc, #36]	; (65ac <_usart_write_buffer+0x58>)
    6588:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    658a:	68fb      	ldr	r3, [r7, #12]
    658c:	68ba      	ldr	r2, [r7, #8]
    658e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	2233      	movs	r2, #51	; 0x33
    6594:	2105      	movs	r1, #5
    6596:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    6598:	697b      	ldr	r3, [r7, #20]
    659a:	2201      	movs	r2, #1
    659c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    659e:	2300      	movs	r3, #0
}
    65a0:	0018      	movs	r0, r3
    65a2:	46bd      	mov	sp, r7
    65a4:	b006      	add	sp, #24
    65a6:	bd80      	pop	{r7, pc}
    65a8:	000064e9 	.word	0x000064e9
    65ac:	000064fd 	.word	0x000064fd

000065b0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    65b0:	b580      	push	{r7, lr}
    65b2:	b086      	sub	sp, #24
    65b4:	af00      	add	r7, sp, #0
    65b6:	60f8      	str	r0, [r7, #12]
    65b8:	60b9      	str	r1, [r7, #8]
    65ba:	1dbb      	adds	r3, r7, #6
    65bc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    65be:	68fb      	ldr	r3, [r7, #12]
    65c0:	681b      	ldr	r3, [r3, #0]
    65c2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    65c4:	4b16      	ldr	r3, [pc, #88]	; (6620 <_usart_read_buffer+0x70>)
    65c6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    65c8:	68fb      	ldr	r3, [r7, #12]
    65ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    65cc:	b29b      	uxth	r3, r3
    65ce:	2b00      	cmp	r3, #0
    65d0:	d003      	beq.n	65da <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    65d2:	4b14      	ldr	r3, [pc, #80]	; (6624 <_usart_read_buffer+0x74>)
    65d4:	4798      	blx	r3
		return STATUS_BUSY;
    65d6:	2305      	movs	r3, #5
    65d8:	e01e      	b.n	6618 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    65da:	68fb      	ldr	r3, [r7, #12]
    65dc:	1dba      	adds	r2, r7, #6
    65de:	8812      	ldrh	r2, [r2, #0]
    65e0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    65e2:	4b10      	ldr	r3, [pc, #64]	; (6624 <_usart_read_buffer+0x74>)
    65e4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    65e6:	68fb      	ldr	r3, [r7, #12]
    65e8:	68ba      	ldr	r2, [r7, #8]
    65ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	2232      	movs	r2, #50	; 0x32
    65f0:	2105      	movs	r1, #5
    65f2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    65f4:	697b      	ldr	r3, [r7, #20]
    65f6:	2204      	movs	r2, #4
    65f8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    65fa:	68fb      	ldr	r3, [r7, #12]
    65fc:	7a1b      	ldrb	r3, [r3, #8]
    65fe:	2b00      	cmp	r3, #0
    6600:	d002      	beq.n	6608 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    6602:	697b      	ldr	r3, [r7, #20]
    6604:	2220      	movs	r2, #32
    6606:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	7a5b      	ldrb	r3, [r3, #9]
    660c:	2b00      	cmp	r3, #0
    660e:	d002      	beq.n	6616 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6610:	697b      	ldr	r3, [r7, #20]
    6612:	2208      	movs	r2, #8
    6614:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    6616:	2300      	movs	r3, #0
}
    6618:	0018      	movs	r0, r3
    661a:	46bd      	mov	sp, r7
    661c:	b006      	add	sp, #24
    661e:	bd80      	pop	{r7, pc}
    6620:	000064e9 	.word	0x000064e9
    6624:	000064fd 	.word	0x000064fd

00006628 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6628:	b580      	push	{r7, lr}
    662a:	b084      	sub	sp, #16
    662c:	af00      	add	r7, sp, #0
    662e:	60f8      	str	r0, [r7, #12]
    6630:	60b9      	str	r1, [r7, #8]
    6632:	1dbb      	adds	r3, r7, #6
    6634:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    6636:	1dbb      	adds	r3, r7, #6
    6638:	881b      	ldrh	r3, [r3, #0]
    663a:	2b00      	cmp	r3, #0
    663c:	d101      	bne.n	6642 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    663e:	2317      	movs	r3, #23
    6640:	e010      	b.n	6664 <usart_write_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    6642:	68fb      	ldr	r3, [r7, #12]
    6644:	79db      	ldrb	r3, [r3, #7]
    6646:	2201      	movs	r2, #1
    6648:	4053      	eors	r3, r2
    664a:	b2db      	uxtb	r3, r3
    664c:	2b00      	cmp	r3, #0
    664e:	d001      	beq.n	6654 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6650:	231c      	movs	r3, #28
    6652:	e007      	b.n	6664 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    6654:	1dbb      	adds	r3, r7, #6
    6656:	881a      	ldrh	r2, [r3, #0]
    6658:	68b9      	ldr	r1, [r7, #8]
    665a:	68fb      	ldr	r3, [r7, #12]
    665c:	0018      	movs	r0, r3
    665e:	4b03      	ldr	r3, [pc, #12]	; (666c <usart_write_buffer_job+0x44>)
    6660:	4798      	blx	r3
    6662:	0003      	movs	r3, r0
}
    6664:	0018      	movs	r0, r3
    6666:	46bd      	mov	sp, r7
    6668:	b004      	add	sp, #16
    666a:	bd80      	pop	{r7, pc}
    666c:	00006555 	.word	0x00006555

00006670 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6670:	b580      	push	{r7, lr}
    6672:	b084      	sub	sp, #16
    6674:	af00      	add	r7, sp, #0
    6676:	60f8      	str	r0, [r7, #12]
    6678:	60b9      	str	r1, [r7, #8]
    667a:	1dbb      	adds	r3, r7, #6
    667c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    667e:	1dbb      	adds	r3, r7, #6
    6680:	881b      	ldrh	r3, [r3, #0]
    6682:	2b00      	cmp	r3, #0
    6684:	d101      	bne.n	668a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6686:	2317      	movs	r3, #23
    6688:	e010      	b.n	66ac <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    668a:	68fb      	ldr	r3, [r7, #12]
    668c:	799b      	ldrb	r3, [r3, #6]
    668e:	2201      	movs	r2, #1
    6690:	4053      	eors	r3, r2
    6692:	b2db      	uxtb	r3, r3
    6694:	2b00      	cmp	r3, #0
    6696:	d001      	beq.n	669c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6698:	231c      	movs	r3, #28
    669a:	e007      	b.n	66ac <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    669c:	1dbb      	adds	r3, r7, #6
    669e:	881a      	ldrh	r2, [r3, #0]
    66a0:	68b9      	ldr	r1, [r7, #8]
    66a2:	68fb      	ldr	r3, [r7, #12]
    66a4:	0018      	movs	r0, r3
    66a6:	4b03      	ldr	r3, [pc, #12]	; (66b4 <usart_read_buffer_job+0x44>)
    66a8:	4798      	blx	r3
    66aa:	0003      	movs	r3, r0
}
    66ac:	0018      	movs	r0, r3
    66ae:	46bd      	mov	sp, r7
    66b0:	b004      	add	sp, #16
    66b2:	bd80      	pop	{r7, pc}
    66b4:	000065b1 	.word	0x000065b1

000066b8 <usart_abort_job>:
 * \param[in]  transceiver_type  Transfer type to cancel
 */
void usart_abort_job(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b084      	sub	sp, #16
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
    66c0:	000a      	movs	r2, r1
    66c2:	1cfb      	adds	r3, r7, #3
    66c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	681b      	ldr	r3, [r3, #0]
    66ca:	60fb      	str	r3, [r7, #12]

	switch(transceiver_type) {
    66cc:	1cfb      	adds	r3, r7, #3
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	2b00      	cmp	r3, #0
    66d2:	d002      	beq.n	66da <usart_abort_job+0x22>
    66d4:	2b01      	cmp	r3, #1
    66d6:	d007      	beq.n	66e8 <usart_abort_job+0x30>
			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;

			break;
	}
}
    66d8:	e00d      	b.n	66f6 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    66da:	68fb      	ldr	r3, [r7, #12]
    66dc:	2204      	movs	r2, #4
    66de:	761a      	strb	r2, [r3, #24]
			module->remaining_rx_buffer_length = 0;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	2200      	movs	r2, #0
    66e4:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
    66e6:	e006      	b.n	66f6 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    66e8:	68fb      	ldr	r3, [r7, #12]
    66ea:	2202      	movs	r2, #2
    66ec:	761a      	strb	r2, [r3, #24]
			module->remaining_tx_buffer_length = 0;
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	2200      	movs	r2, #0
    66f2:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
    66f4:	46c0      	nop			; (mov r8, r8)
}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	46bd      	mov	sp, r7
    66fa:	b004      	add	sp, #16
    66fc:	bd80      	pop	{r7, pc}

000066fe <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    66fe:	b580      	push	{r7, lr}
    6700:	b084      	sub	sp, #16
    6702:	af00      	add	r7, sp, #0
    6704:	6078      	str	r0, [r7, #4]
    6706:	000a      	movs	r2, r1
    6708:	1cfb      	adds	r3, r7, #3
    670a:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    670c:	1cfb      	adds	r3, r7, #3
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	2b00      	cmp	r3, #0
    6712:	d002      	beq.n	671a <usart_get_job_status+0x1c>
    6714:	2b01      	cmp	r3, #1
    6716:	d007      	beq.n	6728 <usart_get_job_status+0x2a>
    6718:	e00d      	b.n	6736 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    671a:	230f      	movs	r3, #15
    671c:	18fb      	adds	r3, r7, r3
    671e:	687a      	ldr	r2, [r7, #4]
    6720:	2132      	movs	r1, #50	; 0x32
    6722:	5c52      	ldrb	r2, [r2, r1]
    6724:	701a      	strb	r2, [r3, #0]
			break;
    6726:	e00b      	b.n	6740 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    6728:	230f      	movs	r3, #15
    672a:	18fb      	adds	r3, r7, r3
    672c:	687a      	ldr	r2, [r7, #4]
    672e:	2133      	movs	r1, #51	; 0x33
    6730:	5c52      	ldrb	r2, [r2, r1]
    6732:	701a      	strb	r2, [r3, #0]
			break;
    6734:	e004      	b.n	6740 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    6736:	230f      	movs	r3, #15
    6738:	18fb      	adds	r3, r7, r3
    673a:	2217      	movs	r2, #23
    673c:	701a      	strb	r2, [r3, #0]
			break;
    673e:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    6740:	230f      	movs	r3, #15
    6742:	18fb      	adds	r3, r7, r3
    6744:	781b      	ldrb	r3, [r3, #0]
}
    6746:	0018      	movs	r0, r3
    6748:	46bd      	mov	sp, r7
    674a:	b004      	add	sp, #16
    674c:	bd80      	pop	{r7, pc}
	...

00006750 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6750:	b580      	push	{r7, lr}
    6752:	b088      	sub	sp, #32
    6754:	af00      	add	r7, sp, #0
    6756:	0002      	movs	r2, r0
    6758:	1dfb      	adds	r3, r7, #7
    675a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    675c:	1dfb      	adds	r3, r7, #7
    675e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    6760:	4ba3      	ldr	r3, [pc, #652]	; (69f0 <_usart_interrupt_handler+0x2a0>)
    6762:	0092      	lsls	r2, r2, #2
    6764:	58d3      	ldr	r3, [r2, r3]
    6766:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6768:	69bb      	ldr	r3, [r7, #24]
    676a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    676c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    676e:	69bb      	ldr	r3, [r7, #24]
    6770:	0018      	movs	r0, r3
    6772:	4ba0      	ldr	r3, [pc, #640]	; (69f4 <_usart_interrupt_handler+0x2a4>)
    6774:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6776:	697b      	ldr	r3, [r7, #20]
    6778:	7e1b      	ldrb	r3, [r3, #24]
    677a:	b2da      	uxtb	r2, r3
    677c:	2312      	movs	r3, #18
    677e:	18fb      	adds	r3, r7, r3
    6780:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    6782:	697b      	ldr	r3, [r7, #20]
    6784:	7d9b      	ldrb	r3, [r3, #22]
    6786:	b2db      	uxtb	r3, r3
    6788:	b29a      	uxth	r2, r3
    678a:	2312      	movs	r3, #18
    678c:	18fb      	adds	r3, r7, r3
    678e:	2112      	movs	r1, #18
    6790:	1879      	adds	r1, r7, r1
    6792:	8809      	ldrh	r1, [r1, #0]
    6794:	400a      	ands	r2, r1
    6796:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    6798:	69bb      	ldr	r3, [r7, #24]
    679a:	2230      	movs	r2, #48	; 0x30
    679c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    679e:	69ba      	ldr	r2, [r7, #24]
    67a0:	2131      	movs	r1, #49	; 0x31
    67a2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    67a4:	4013      	ands	r3, r2
    67a6:	b2da      	uxtb	r2, r3
    67a8:	2310      	movs	r3, #16
    67aa:	18fb      	adds	r3, r7, r3
    67ac:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    67ae:	2312      	movs	r3, #18
    67b0:	18fb      	adds	r3, r7, r3
    67b2:	881b      	ldrh	r3, [r3, #0]
    67b4:	2201      	movs	r2, #1
    67b6:	4013      	ands	r3, r2
    67b8:	d044      	beq.n	6844 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    67ba:	69bb      	ldr	r3, [r7, #24]
    67bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    67be:	b29b      	uxth	r3, r3
    67c0:	2b00      	cmp	r3, #0
    67c2:	d03c      	beq.n	683e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    67c4:	69bb      	ldr	r3, [r7, #24]
    67c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	b2da      	uxtb	r2, r3
    67cc:	231c      	movs	r3, #28
    67ce:	18fb      	adds	r3, r7, r3
    67d0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    67d2:	69bb      	ldr	r3, [r7, #24]
    67d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d6:	1c5a      	adds	r2, r3, #1
    67d8:	69bb      	ldr	r3, [r7, #24]
    67da:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67dc:	69bb      	ldr	r3, [r7, #24]
    67de:	795b      	ldrb	r3, [r3, #5]
    67e0:	2b01      	cmp	r3, #1
    67e2:	d113      	bne.n	680c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    67e4:	69bb      	ldr	r3, [r7, #24]
    67e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	b2db      	uxtb	r3, r3
    67ec:	021b      	lsls	r3, r3, #8
    67ee:	b21a      	sxth	r2, r3
    67f0:	231c      	movs	r3, #28
    67f2:	18fb      	adds	r3, r7, r3
    67f4:	2100      	movs	r1, #0
    67f6:	5e5b      	ldrsh	r3, [r3, r1]
    67f8:	4313      	orrs	r3, r2
    67fa:	b21a      	sxth	r2, r3
    67fc:	231c      	movs	r3, #28
    67fe:	18fb      	adds	r3, r7, r3
    6800:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    6802:	69bb      	ldr	r3, [r7, #24]
    6804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6806:	1c5a      	adds	r2, r3, #1
    6808:	69bb      	ldr	r3, [r7, #24]
    680a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    680c:	231c      	movs	r3, #28
    680e:	18fb      	adds	r3, r7, r3
    6810:	881b      	ldrh	r3, [r3, #0]
    6812:	05db      	lsls	r3, r3, #23
    6814:	0ddb      	lsrs	r3, r3, #23
    6816:	b29a      	uxth	r2, r3
    6818:	697b      	ldr	r3, [r7, #20]
    681a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    681c:	69bb      	ldr	r3, [r7, #24]
    681e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6820:	b29b      	uxth	r3, r3
    6822:	3b01      	subs	r3, #1
    6824:	b29b      	uxth	r3, r3
    6826:	69ba      	ldr	r2, [r7, #24]
    6828:	1c19      	adds	r1, r3, #0
    682a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    682c:	2b00      	cmp	r3, #0
    682e:	d109      	bne.n	6844 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6830:	697b      	ldr	r3, [r7, #20]
    6832:	2201      	movs	r2, #1
    6834:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6836:	697b      	ldr	r3, [r7, #20]
    6838:	2202      	movs	r2, #2
    683a:	759a      	strb	r2, [r3, #22]
    683c:	e002      	b.n	6844 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    683e:	697b      	ldr	r3, [r7, #20]
    6840:	2201      	movs	r2, #1
    6842:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6844:	2312      	movs	r3, #18
    6846:	18fb      	adds	r3, r7, r3
    6848:	881b      	ldrh	r3, [r3, #0]
    684a:	2202      	movs	r2, #2
    684c:	4013      	ands	r3, r2
    684e:	d011      	beq.n	6874 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6850:	697b      	ldr	r3, [r7, #20]
    6852:	2202      	movs	r2, #2
    6854:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    6856:	69bb      	ldr	r3, [r7, #24]
    6858:	2233      	movs	r2, #51	; 0x33
    685a:	2100      	movs	r1, #0
    685c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    685e:	2310      	movs	r3, #16
    6860:	18fb      	adds	r3, r7, r3
    6862:	881b      	ldrh	r3, [r3, #0]
    6864:	2201      	movs	r2, #1
    6866:	4013      	ands	r3, r2
    6868:	d004      	beq.n	6874 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    686a:	69bb      	ldr	r3, [r7, #24]
    686c:	68db      	ldr	r3, [r3, #12]
    686e:	69ba      	ldr	r2, [r7, #24]
    6870:	0010      	movs	r0, r2
    6872:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6874:	2312      	movs	r3, #18
    6876:	18fb      	adds	r3, r7, r3
    6878:	881b      	ldrh	r3, [r3, #0]
    687a:	2204      	movs	r2, #4
    687c:	4013      	ands	r3, r2
    687e:	d100      	bne.n	6882 <_usart_interrupt_handler+0x132>
    6880:	e0bd      	b.n	69fe <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    6882:	69bb      	ldr	r3, [r7, #24]
    6884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6886:	b29b      	uxth	r3, r3
    6888:	2b00      	cmp	r3, #0
    688a:	d100      	bne.n	688e <_usart_interrupt_handler+0x13e>
    688c:	e0b4      	b.n	69f8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    688e:	697b      	ldr	r3, [r7, #20]
    6890:	8b5b      	ldrh	r3, [r3, #26]
    6892:	b29b      	uxth	r3, r3
    6894:	b2da      	uxtb	r2, r3
    6896:	231f      	movs	r3, #31
    6898:	18fb      	adds	r3, r7, r3
    689a:	213f      	movs	r1, #63	; 0x3f
    689c:	400a      	ands	r2, r1
    689e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    68a0:	231f      	movs	r3, #31
    68a2:	18fb      	adds	r3, r7, r3
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	2208      	movs	r2, #8
    68a8:	4013      	ands	r3, r2
    68aa:	d007      	beq.n	68bc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    68ac:	231f      	movs	r3, #31
    68ae:	18fb      	adds	r3, r7, r3
    68b0:	221f      	movs	r2, #31
    68b2:	18ba      	adds	r2, r7, r2
    68b4:	7812      	ldrb	r2, [r2, #0]
    68b6:	2108      	movs	r1, #8
    68b8:	438a      	bics	r2, r1
    68ba:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    68bc:	231f      	movs	r3, #31
    68be:	18fb      	adds	r3, r7, r3
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d050      	beq.n	6968 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    68c6:	231f      	movs	r3, #31
    68c8:	18fb      	adds	r3, r7, r3
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	2202      	movs	r2, #2
    68ce:	4013      	ands	r3, r2
    68d0:	d007      	beq.n	68e2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    68d2:	69bb      	ldr	r3, [r7, #24]
    68d4:	2232      	movs	r2, #50	; 0x32
    68d6:	211a      	movs	r1, #26
    68d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    68da:	697b      	ldr	r3, [r7, #20]
    68dc:	2202      	movs	r2, #2
    68de:	835a      	strh	r2, [r3, #26]
    68e0:	e036      	b.n	6950 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    68e2:	231f      	movs	r3, #31
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	2204      	movs	r2, #4
    68ea:	4013      	ands	r3, r2
    68ec:	d007      	beq.n	68fe <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    68ee:	69bb      	ldr	r3, [r7, #24]
    68f0:	2232      	movs	r2, #50	; 0x32
    68f2:	211e      	movs	r1, #30
    68f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    68f6:	697b      	ldr	r3, [r7, #20]
    68f8:	2204      	movs	r2, #4
    68fa:	835a      	strh	r2, [r3, #26]
    68fc:	e028      	b.n	6950 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    68fe:	231f      	movs	r3, #31
    6900:	18fb      	adds	r3, r7, r3
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	2201      	movs	r2, #1
    6906:	4013      	ands	r3, r2
    6908:	d007      	beq.n	691a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    690a:	69bb      	ldr	r3, [r7, #24]
    690c:	2232      	movs	r2, #50	; 0x32
    690e:	2113      	movs	r1, #19
    6910:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6912:	697b      	ldr	r3, [r7, #20]
    6914:	2201      	movs	r2, #1
    6916:	835a      	strh	r2, [r3, #26]
    6918:	e01a      	b.n	6950 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    691a:	231f      	movs	r3, #31
    691c:	18fb      	adds	r3, r7, r3
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	2210      	movs	r2, #16
    6922:	4013      	ands	r3, r2
    6924:	d007      	beq.n	6936 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    6926:	69bb      	ldr	r3, [r7, #24]
    6928:	2232      	movs	r2, #50	; 0x32
    692a:	2142      	movs	r1, #66	; 0x42
    692c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    692e:	697b      	ldr	r3, [r7, #20]
    6930:	2210      	movs	r2, #16
    6932:	835a      	strh	r2, [r3, #26]
    6934:	e00c      	b.n	6950 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6936:	231f      	movs	r3, #31
    6938:	18fb      	adds	r3, r7, r3
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	2220      	movs	r2, #32
    693e:	4013      	ands	r3, r2
    6940:	d006      	beq.n	6950 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6942:	69bb      	ldr	r3, [r7, #24]
    6944:	2232      	movs	r2, #50	; 0x32
    6946:	2141      	movs	r1, #65	; 0x41
    6948:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    694a:	697b      	ldr	r3, [r7, #20]
    694c:	2220      	movs	r2, #32
    694e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6950:	2310      	movs	r3, #16
    6952:	18fb      	adds	r3, r7, r3
    6954:	881b      	ldrh	r3, [r3, #0]
    6956:	2204      	movs	r2, #4
    6958:	4013      	ands	r3, r2
				if (callback_status
    695a:	d050      	beq.n	69fe <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    695c:	69bb      	ldr	r3, [r7, #24]
    695e:	695b      	ldr	r3, [r3, #20]
    6960:	69ba      	ldr	r2, [r7, #24]
    6962:	0010      	movs	r0, r2
    6964:	4798      	blx	r3
    6966:	e04a      	b.n	69fe <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6968:	697b      	ldr	r3, [r7, #20]
    696a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    696c:	b29a      	uxth	r2, r3
    696e:	230e      	movs	r3, #14
    6970:	18fb      	adds	r3, r7, r3
    6972:	05d2      	lsls	r2, r2, #23
    6974:	0dd2      	lsrs	r2, r2, #23
    6976:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6978:	69bb      	ldr	r3, [r7, #24]
    697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    697c:	220e      	movs	r2, #14
    697e:	18ba      	adds	r2, r7, r2
    6980:	8812      	ldrh	r2, [r2, #0]
    6982:	b2d2      	uxtb	r2, r2
    6984:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6986:	69bb      	ldr	r3, [r7, #24]
    6988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    698a:	1c5a      	adds	r2, r3, #1
    698c:	69bb      	ldr	r3, [r7, #24]
    698e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6990:	69bb      	ldr	r3, [r7, #24]
    6992:	795b      	ldrb	r3, [r3, #5]
    6994:	2b01      	cmp	r3, #1
    6996:	d10d      	bne.n	69b4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6998:	69bb      	ldr	r3, [r7, #24]
    699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    699c:	220e      	movs	r2, #14
    699e:	18ba      	adds	r2, r7, r2
    69a0:	8812      	ldrh	r2, [r2, #0]
    69a2:	0a12      	lsrs	r2, r2, #8
    69a4:	b292      	uxth	r2, r2
    69a6:	b2d2      	uxtb	r2, r2
    69a8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    69aa:	69bb      	ldr	r3, [r7, #24]
    69ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69ae:	1c5a      	adds	r2, r3, #1
    69b0:	69bb      	ldr	r3, [r7, #24]
    69b2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    69b4:	69bb      	ldr	r3, [r7, #24]
    69b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    69b8:	b29b      	uxth	r3, r3
    69ba:	3b01      	subs	r3, #1
    69bc:	b29b      	uxth	r3, r3
    69be:	69ba      	ldr	r2, [r7, #24]
    69c0:	1c19      	adds	r1, r3, #0
    69c2:	8591      	strh	r1, [r2, #44]	; 0x2c
    69c4:	2b00      	cmp	r3, #0
    69c6:	d11a      	bne.n	69fe <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69c8:	697b      	ldr	r3, [r7, #20]
    69ca:	2204      	movs	r2, #4
    69cc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    69ce:	69bb      	ldr	r3, [r7, #24]
    69d0:	2232      	movs	r2, #50	; 0x32
    69d2:	2100      	movs	r1, #0
    69d4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    69d6:	2310      	movs	r3, #16
    69d8:	18fb      	adds	r3, r7, r3
    69da:	881b      	ldrh	r3, [r3, #0]
    69dc:	2202      	movs	r2, #2
    69de:	4013      	ands	r3, r2
					if (callback_status
    69e0:	d00d      	beq.n	69fe <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    69e2:	69bb      	ldr	r3, [r7, #24]
    69e4:	691b      	ldr	r3, [r3, #16]
    69e6:	69ba      	ldr	r2, [r7, #24]
    69e8:	0010      	movs	r0, r2
    69ea:	4798      	blx	r3
    69ec:	e007      	b.n	69fe <_usart_interrupt_handler+0x2ae>
    69ee:	46c0      	nop			; (mov r8, r8)
    69f0:	20000468 	.word	0x20000468
    69f4:	00006531 	.word	0x00006531
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69f8:	697b      	ldr	r3, [r7, #20]
    69fa:	2204      	movs	r2, #4
    69fc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    69fe:	2312      	movs	r3, #18
    6a00:	18fb      	adds	r3, r7, r3
    6a02:	881b      	ldrh	r3, [r3, #0]
    6a04:	2210      	movs	r2, #16
    6a06:	4013      	ands	r3, r2
    6a08:	d010      	beq.n	6a2c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a0a:	697b      	ldr	r3, [r7, #20]
    6a0c:	2210      	movs	r2, #16
    6a0e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a10:	697b      	ldr	r3, [r7, #20]
    6a12:	2210      	movs	r2, #16
    6a14:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a16:	2310      	movs	r3, #16
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	881b      	ldrh	r3, [r3, #0]
    6a1c:	2210      	movs	r2, #16
    6a1e:	4013      	ands	r3, r2
    6a20:	d004      	beq.n	6a2c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a22:	69bb      	ldr	r3, [r7, #24]
    6a24:	69db      	ldr	r3, [r3, #28]
    6a26:	69ba      	ldr	r2, [r7, #24]
    6a28:	0010      	movs	r0, r2
    6a2a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a2c:	2312      	movs	r3, #18
    6a2e:	18fb      	adds	r3, r7, r3
    6a30:	881b      	ldrh	r3, [r3, #0]
    6a32:	2220      	movs	r2, #32
    6a34:	4013      	ands	r3, r2
    6a36:	d010      	beq.n	6a5a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a38:	697b      	ldr	r3, [r7, #20]
    6a3a:	2220      	movs	r2, #32
    6a3c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a3e:	697b      	ldr	r3, [r7, #20]
    6a40:	2220      	movs	r2, #32
    6a42:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a44:	2310      	movs	r3, #16
    6a46:	18fb      	adds	r3, r7, r3
    6a48:	881b      	ldrh	r3, [r3, #0]
    6a4a:	2208      	movs	r2, #8
    6a4c:	4013      	ands	r3, r2
    6a4e:	d004      	beq.n	6a5a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a50:	69bb      	ldr	r3, [r7, #24]
    6a52:	699b      	ldr	r3, [r3, #24]
    6a54:	69ba      	ldr	r2, [r7, #24]
    6a56:	0010      	movs	r0, r2
    6a58:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a5a:	2312      	movs	r3, #18
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	881b      	ldrh	r3, [r3, #0]
    6a60:	2208      	movs	r2, #8
    6a62:	4013      	ands	r3, r2
    6a64:	d010      	beq.n	6a88 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a66:	697b      	ldr	r3, [r7, #20]
    6a68:	2208      	movs	r2, #8
    6a6a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a6c:	697b      	ldr	r3, [r7, #20]
    6a6e:	2208      	movs	r2, #8
    6a70:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a72:	2310      	movs	r3, #16
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	881b      	ldrh	r3, [r3, #0]
    6a78:	2220      	movs	r2, #32
    6a7a:	4013      	ands	r3, r2
    6a7c:	d004      	beq.n	6a88 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a7e:	69bb      	ldr	r3, [r7, #24]
    6a80:	6a1b      	ldr	r3, [r3, #32]
    6a82:	69ba      	ldr	r2, [r7, #24]
    6a84:	0010      	movs	r0, r2
    6a86:	4798      	blx	r3
		}
	}
#endif
}
    6a88:	46c0      	nop			; (mov r8, r8)
    6a8a:	46bd      	mov	sp, r7
    6a8c:	b008      	add	sp, #32
    6a8e:	bd80      	pop	{r7, pc}

00006a90 <system_gclk_chan_get_config_defaults>:
{
    6a90:	b580      	push	{r7, lr}
    6a92:	b082      	sub	sp, #8
    6a94:	af00      	add	r7, sp, #0
    6a96:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	2200      	movs	r2, #0
    6a9c:	701a      	strb	r2, [r3, #0]
}
    6a9e:	46c0      	nop			; (mov r8, r8)
    6aa0:	46bd      	mov	sp, r7
    6aa2:	b002      	add	sp, #8
    6aa4:	bd80      	pop	{r7, pc}

00006aa6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aa8:	b08d      	sub	sp, #52	; 0x34
    6aaa:	af00      	add	r7, sp, #0
    6aac:	60b8      	str	r0, [r7, #8]
    6aae:	60f9      	str	r1, [r7, #12]
    6ab0:	603a      	str	r2, [r7, #0]
    6ab2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    6ab4:	2300      	movs	r3, #0
    6ab6:	2400      	movs	r4, #0
    6ab8:	623b      	str	r3, [r7, #32]
    6aba:	627c      	str	r4, [r7, #36]	; 0x24
    6abc:	2300      	movs	r3, #0
    6abe:	2400      	movs	r4, #0
    6ac0:	61bb      	str	r3, [r7, #24]
    6ac2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    6ac4:	233f      	movs	r3, #63	; 0x3f
    6ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ac8:	e053      	b.n	6b72 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    6aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6acc:	3b20      	subs	r3, #32
    6ace:	2b00      	cmp	r3, #0
    6ad0:	db04      	blt.n	6adc <long_division+0x36>
    6ad2:	2201      	movs	r2, #1
    6ad4:	409a      	lsls	r2, r3
    6ad6:	0013      	movs	r3, r2
    6ad8:	617b      	str	r3, [r7, #20]
    6ada:	e00b      	b.n	6af4 <long_division+0x4e>
    6adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ade:	2220      	movs	r2, #32
    6ae0:	1ad3      	subs	r3, r2, r3
    6ae2:	2201      	movs	r2, #1
    6ae4:	40da      	lsrs	r2, r3
    6ae6:	0013      	movs	r3, r2
    6ae8:	2100      	movs	r1, #0
    6aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6aec:	4091      	lsls	r1, r2
    6aee:	000a      	movs	r2, r1
    6af0:	4313      	orrs	r3, r2
    6af2:	617b      	str	r3, [r7, #20]
    6af4:	2201      	movs	r2, #1
    6af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6af8:	409a      	lsls	r2, r3
    6afa:	0013      	movs	r3, r2
    6afc:	613b      	str	r3, [r7, #16]

		r = r << 1;
    6afe:	69bb      	ldr	r3, [r7, #24]
    6b00:	69fc      	ldr	r4, [r7, #28]
    6b02:	18db      	adds	r3, r3, r3
    6b04:	4164      	adcs	r4, r4
    6b06:	61bb      	str	r3, [r7, #24]
    6b08:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    6b0a:	68bb      	ldr	r3, [r7, #8]
    6b0c:	693a      	ldr	r2, [r7, #16]
    6b0e:	401a      	ands	r2, r3
    6b10:	0015      	movs	r5, r2
    6b12:	68fb      	ldr	r3, [r7, #12]
    6b14:	697a      	ldr	r2, [r7, #20]
    6b16:	401a      	ands	r2, r3
    6b18:	0016      	movs	r6, r2
    6b1a:	002b      	movs	r3, r5
    6b1c:	4333      	orrs	r3, r6
    6b1e:	d007      	beq.n	6b30 <long_division+0x8a>
			r |= 0x01;
    6b20:	69bb      	ldr	r3, [r7, #24]
    6b22:	2201      	movs	r2, #1
    6b24:	4313      	orrs	r3, r2
    6b26:	61bb      	str	r3, [r7, #24]
    6b28:	69fb      	ldr	r3, [r7, #28]
    6b2a:	2200      	movs	r2, #0
    6b2c:	4313      	orrs	r3, r2
    6b2e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    6b30:	687a      	ldr	r2, [r7, #4]
    6b32:	69fb      	ldr	r3, [r7, #28]
    6b34:	429a      	cmp	r2, r3
    6b36:	d819      	bhi.n	6b6c <long_division+0xc6>
    6b38:	687a      	ldr	r2, [r7, #4]
    6b3a:	69fb      	ldr	r3, [r7, #28]
    6b3c:	429a      	cmp	r2, r3
    6b3e:	d103      	bne.n	6b48 <long_division+0xa2>
    6b40:	683a      	ldr	r2, [r7, #0]
    6b42:	69bb      	ldr	r3, [r7, #24]
    6b44:	429a      	cmp	r2, r3
    6b46:	d811      	bhi.n	6b6c <long_division+0xc6>
			r = r - d;
    6b48:	69b9      	ldr	r1, [r7, #24]
    6b4a:	69fa      	ldr	r2, [r7, #28]
    6b4c:	683b      	ldr	r3, [r7, #0]
    6b4e:	687c      	ldr	r4, [r7, #4]
    6b50:	1ac9      	subs	r1, r1, r3
    6b52:	41a2      	sbcs	r2, r4
    6b54:	000b      	movs	r3, r1
    6b56:	0014      	movs	r4, r2
    6b58:	61bb      	str	r3, [r7, #24]
    6b5a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    6b5c:	6a3a      	ldr	r2, [r7, #32]
    6b5e:	693b      	ldr	r3, [r7, #16]
    6b60:	4313      	orrs	r3, r2
    6b62:	623b      	str	r3, [r7, #32]
    6b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6b66:	697b      	ldr	r3, [r7, #20]
    6b68:	4313      	orrs	r3, r2
    6b6a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    6b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b6e:	3b01      	subs	r3, #1
    6b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    6b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b74:	2b00      	cmp	r3, #0
    6b76:	daa8      	bge.n	6aca <long_division+0x24>
		}
	}

	return q;
    6b78:	6a3b      	ldr	r3, [r7, #32]
    6b7a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6b7c:	0018      	movs	r0, r3
    6b7e:	0021      	movs	r1, r4
    6b80:	46bd      	mov	sp, r7
    6b82:	b00d      	add	sp, #52	; 0x34
    6b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006b86 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6b86:	b580      	push	{r7, lr}
    6b88:	b086      	sub	sp, #24
    6b8a:	af00      	add	r7, sp, #0
    6b8c:	60f8      	str	r0, [r7, #12]
    6b8e:	60b9      	str	r1, [r7, #8]
    6b90:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    6b92:	2316      	movs	r3, #22
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	2200      	movs	r2, #0
    6b98:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6b9a:	68bb      	ldr	r3, [r7, #8]
    6b9c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6b9e:	68bb      	ldr	r3, [r7, #8]
    6ba0:	085a      	lsrs	r2, r3, #1
    6ba2:	68fb      	ldr	r3, [r7, #12]
    6ba4:	429a      	cmp	r2, r3
    6ba6:	d201      	bcs.n	6bac <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6ba8:	2340      	movs	r3, #64	; 0x40
    6baa:	e026      	b.n	6bfa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    6bac:	68bb      	ldr	r3, [r7, #8]
    6bae:	085b      	lsrs	r3, r3, #1
    6bb0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    6bb2:	e00a      	b.n	6bca <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    6bb4:	693a      	ldr	r2, [r7, #16]
    6bb6:	68fb      	ldr	r3, [r7, #12]
    6bb8:	1ad3      	subs	r3, r2, r3
    6bba:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    6bbc:	2316      	movs	r3, #22
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	881a      	ldrh	r2, [r3, #0]
    6bc2:	2316      	movs	r3, #22
    6bc4:	18fb      	adds	r3, r7, r3
    6bc6:	3201      	adds	r2, #1
    6bc8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    6bca:	693a      	ldr	r2, [r7, #16]
    6bcc:	68fb      	ldr	r3, [r7, #12]
    6bce:	429a      	cmp	r2, r3
    6bd0:	d2f0      	bcs.n	6bb4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    6bd2:	2316      	movs	r3, #22
    6bd4:	18fb      	adds	r3, r7, r3
    6bd6:	2216      	movs	r2, #22
    6bd8:	18ba      	adds	r2, r7, r2
    6bda:	8812      	ldrh	r2, [r2, #0]
    6bdc:	3a01      	subs	r2, #1
    6bde:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    6be0:	2316      	movs	r3, #22
    6be2:	18fb      	adds	r3, r7, r3
    6be4:	881b      	ldrh	r3, [r3, #0]
    6be6:	2bff      	cmp	r3, #255	; 0xff
    6be8:	d901      	bls.n	6bee <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6bea:	2340      	movs	r3, #64	; 0x40
    6bec:	e005      	b.n	6bfa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	2216      	movs	r2, #22
    6bf2:	18ba      	adds	r2, r7, r2
    6bf4:	8812      	ldrh	r2, [r2, #0]
    6bf6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    6bf8:	2300      	movs	r3, #0
	}
}
    6bfa:	0018      	movs	r0, r3
    6bfc:	46bd      	mov	sp, r7
    6bfe:	b006      	add	sp, #24
    6c00:	bd80      	pop	{r7, pc}
	...

00006c04 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c06:	b09d      	sub	sp, #116	; 0x74
    6c08:	af00      	add	r7, sp, #0
    6c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    6c0c:	63b9      	str	r1, [r7, #56]	; 0x38
    6c0e:	637a      	str	r2, [r7, #52]	; 0x34
    6c10:	2233      	movs	r2, #51	; 0x33
    6c12:	18ba      	adds	r2, r7, r2
    6c14:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    6c16:	2300      	movs	r3, #0
    6c18:	2400      	movs	r4, #0
    6c1a:	65bb      	str	r3, [r7, #88]	; 0x58
    6c1c:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    6c1e:	2300      	movs	r3, #0
    6c20:	2400      	movs	r4, #0
    6c22:	653b      	str	r3, [r7, #80]	; 0x50
    6c24:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    6c26:	2300      	movs	r3, #0
    6c28:	2400      	movs	r4, #0
    6c2a:	66bb      	str	r3, [r7, #104]	; 0x68
    6c2c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    6c2e:	2300      	movs	r3, #0
    6c30:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6c32:	2358      	movs	r3, #88	; 0x58
    6c34:	2230      	movs	r2, #48	; 0x30
    6c36:	4694      	mov	ip, r2
    6c38:	44bc      	add	ip, r7
    6c3a:	4463      	add	r3, ip
    6c3c:	781a      	ldrb	r2, [r3, #0]
    6c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c40:	435a      	muls	r2, r3
    6c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6c44:	429a      	cmp	r2, r3
    6c46:	d901      	bls.n	6c4c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6c48:	2340      	movs	r3, #64	; 0x40
    6c4a:	e0c6      	b.n	6dda <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6c4c:	2333      	movs	r3, #51	; 0x33
    6c4e:	18fb      	adds	r3, r7, r3
    6c50:	781b      	ldrb	r3, [r3, #0]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d13d      	bne.n	6cd2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6c56:	2358      	movs	r3, #88	; 0x58
    6c58:	2230      	movs	r2, #48	; 0x30
    6c5a:	4694      	mov	ip, r2
    6c5c:	44bc      	add	ip, r7
    6c5e:	4463      	add	r3, ip
    6c60:	781b      	ldrb	r3, [r3, #0]
    6c62:	b2db      	uxtb	r3, r3
    6c64:	613b      	str	r3, [r7, #16]
    6c66:	2300      	movs	r3, #0
    6c68:	617b      	str	r3, [r7, #20]
    6c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c6c:	60bb      	str	r3, [r7, #8]
    6c6e:	2300      	movs	r3, #0
    6c70:	60fb      	str	r3, [r7, #12]
    6c72:	4c5c      	ldr	r4, [pc, #368]	; (6de4 <_sercom_get_async_baud_val+0x1e0>)
    6c74:	68ba      	ldr	r2, [r7, #8]
    6c76:	68fb      	ldr	r3, [r7, #12]
    6c78:	6938      	ldr	r0, [r7, #16]
    6c7a:	6979      	ldr	r1, [r7, #20]
    6c7c:	47a0      	blx	r4
    6c7e:	0003      	movs	r3, r0
    6c80:	000c      	movs	r4, r1
    6c82:	001b      	movs	r3, r3
    6c84:	64fb      	str	r3, [r7, #76]	; 0x4c
    6c86:	2300      	movs	r3, #0
    6c88:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    6c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6c8c:	603b      	str	r3, [r7, #0]
    6c8e:	2300      	movs	r3, #0
    6c90:	607b      	str	r3, [r7, #4]
    6c92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6c94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6c96:	683a      	ldr	r2, [r7, #0]
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	4c53      	ldr	r4, [pc, #332]	; (6de8 <_sercom_get_async_baud_val+0x1e4>)
    6c9c:	47a0      	blx	r4
    6c9e:	0003      	movs	r3, r0
    6ca0:	000c      	movs	r4, r1
    6ca2:	65bb      	str	r3, [r7, #88]	; 0x58
    6ca4:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6ca6:	2100      	movs	r1, #0
    6ca8:	2201      	movs	r2, #1
    6caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6cac:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6cae:	1ac9      	subs	r1, r1, r3
    6cb0:	41a2      	sbcs	r2, r4
    6cb2:	000b      	movs	r3, r1
    6cb4:	0014      	movs	r4, r2
    6cb6:	653b      	str	r3, [r7, #80]	; 0x50
    6cb8:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    6cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6cbc:	0c1b      	lsrs	r3, r3, #16
    6cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6cc0:	0416      	lsls	r6, r2, #16
    6cc2:	431e      	orrs	r6, r3
    6cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6cc6:	041d      	lsls	r5, r3, #16
    6cc8:	0033      	movs	r3, r6
    6cca:	66bb      	str	r3, [r7, #104]	; 0x68
    6ccc:	2300      	movs	r3, #0
    6cce:	66fb      	str	r3, [r7, #108]	; 0x6c
    6cd0:	e07d      	b.n	6dce <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6cd2:	2333      	movs	r3, #51	; 0x33
    6cd4:	18fb      	adds	r3, r7, r3
    6cd6:	781b      	ldrb	r3, [r3, #0]
    6cd8:	2b01      	cmp	r3, #1
    6cda:	d000      	beq.n	6cde <_sercom_get_async_baud_val+0xda>
    6cdc:	e077      	b.n	6dce <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6cde:	2337      	movs	r3, #55	; 0x37
    6ce0:	2230      	movs	r2, #48	; 0x30
    6ce2:	4694      	mov	ip, r2
    6ce4:	44bc      	add	ip, r7
    6ce6:	4463      	add	r3, ip
    6ce8:	2200      	movs	r2, #0
    6cea:	701a      	strb	r2, [r3, #0]
    6cec:	e04e      	b.n	6d8c <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    6cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    6cf2:	2300      	movs	r3, #0
    6cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    6cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6cfa:	0003      	movs	r3, r0
    6cfc:	0f5b      	lsrs	r3, r3, #29
    6cfe:	000a      	movs	r2, r1
    6d00:	00d2      	lsls	r2, r2, #3
    6d02:	4313      	orrs	r3, r2
    6d04:	64fb      	str	r3, [r7, #76]	; 0x4c
    6d06:	0003      	movs	r3, r0
    6d08:	00db      	lsls	r3, r3, #3
    6d0a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    6d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d0e:	623b      	str	r3, [r7, #32]
    6d10:	2300      	movs	r3, #0
    6d12:	627b      	str	r3, [r7, #36]	; 0x24
    6d14:	2358      	movs	r3, #88	; 0x58
    6d16:	2230      	movs	r2, #48	; 0x30
    6d18:	4694      	mov	ip, r2
    6d1a:	44bc      	add	ip, r7
    6d1c:	4463      	add	r3, ip
    6d1e:	781b      	ldrb	r3, [r3, #0]
    6d20:	b2db      	uxtb	r3, r3
    6d22:	61bb      	str	r3, [r7, #24]
    6d24:	2300      	movs	r3, #0
    6d26:	61fb      	str	r3, [r7, #28]
    6d28:	4c2e      	ldr	r4, [pc, #184]	; (6de4 <_sercom_get_async_baud_val+0x1e0>)
    6d2a:	69ba      	ldr	r2, [r7, #24]
    6d2c:	69fb      	ldr	r3, [r7, #28]
    6d2e:	6a38      	ldr	r0, [r7, #32]
    6d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6d32:	47a0      	blx	r4
    6d34:	0003      	movs	r3, r0
    6d36:	000c      	movs	r4, r1
    6d38:	643b      	str	r3, [r7, #64]	; 0x40
    6d3a:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    6d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6d3e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    6d40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6d42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6d44:	001a      	movs	r2, r3
    6d46:	0023      	movs	r3, r4
    6d48:	4c27      	ldr	r4, [pc, #156]	; (6de8 <_sercom_get_async_baud_val+0x1e4>)
    6d4a:	47a0      	blx	r4
    6d4c:	0003      	movs	r3, r0
    6d4e:	000c      	movs	r4, r1
    6d50:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    6d52:	2337      	movs	r3, #55	; 0x37
    6d54:	2230      	movs	r2, #48	; 0x30
    6d56:	4694      	mov	ip, r2
    6d58:	44bc      	add	ip, r7
    6d5a:	4463      	add	r3, ip
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6d60:	1ad3      	subs	r3, r2, r3
    6d62:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    6d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6d66:	08db      	lsrs	r3, r3, #3
    6d68:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    6d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6d6c:	4a1f      	ldr	r2, [pc, #124]	; (6dec <_sercom_get_async_baud_val+0x1e8>)
    6d6e:	4293      	cmp	r3, r2
    6d70:	d915      	bls.n	6d9e <_sercom_get_async_baud_val+0x19a>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6d72:	2337      	movs	r3, #55	; 0x37
    6d74:	2230      	movs	r2, #48	; 0x30
    6d76:	4694      	mov	ip, r2
    6d78:	44bc      	add	ip, r7
    6d7a:	4463      	add	r3, ip
    6d7c:	781a      	ldrb	r2, [r3, #0]
    6d7e:	2337      	movs	r3, #55	; 0x37
    6d80:	2130      	movs	r1, #48	; 0x30
    6d82:	468c      	mov	ip, r1
    6d84:	44bc      	add	ip, r7
    6d86:	4463      	add	r3, ip
    6d88:	3201      	adds	r2, #1
    6d8a:	701a      	strb	r2, [r3, #0]
    6d8c:	2337      	movs	r3, #55	; 0x37
    6d8e:	2230      	movs	r2, #48	; 0x30
    6d90:	4694      	mov	ip, r2
    6d92:	44bc      	add	ip, r7
    6d94:	4463      	add	r3, ip
    6d96:	781b      	ldrb	r3, [r3, #0]
    6d98:	2b07      	cmp	r3, #7
    6d9a:	d9a8      	bls.n	6cee <_sercom_get_async_baud_val+0xea>
    6d9c:	e000      	b.n	6da0 <_sercom_get_async_baud_val+0x19c>
				break;
    6d9e:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    6da0:	2337      	movs	r3, #55	; 0x37
    6da2:	2230      	movs	r2, #48	; 0x30
    6da4:	4694      	mov	ip, r2
    6da6:	44bc      	add	ip, r7
    6da8:	4463      	add	r3, ip
    6daa:	781b      	ldrb	r3, [r3, #0]
    6dac:	2b08      	cmp	r3, #8
    6dae:	d101      	bne.n	6db4 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6db0:	2340      	movs	r3, #64	; 0x40
    6db2:	e012      	b.n	6dda <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    6db4:	2337      	movs	r3, #55	; 0x37
    6db6:	2230      	movs	r2, #48	; 0x30
    6db8:	4694      	mov	ip, r2
    6dba:	44bc      	add	ip, r7
    6dbc:	4463      	add	r3, ip
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	035b      	lsls	r3, r3, #13
    6dc2:	001a      	movs	r2, r3
    6dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6dc6:	4313      	orrs	r3, r2
    6dc8:	66bb      	str	r3, [r7, #104]	; 0x68
    6dca:	2300      	movs	r3, #0
    6dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    6dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6dd0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6dd2:	b29a      	uxth	r2, r3
    6dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6dd6:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    6dd8:	2300      	movs	r3, #0
}
    6dda:	0018      	movs	r0, r3
    6ddc:	46bd      	mov	sp, r7
    6dde:	b01d      	add	sp, #116	; 0x74
    6de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6de2:	46c0      	nop			; (mov r8, r8)
    6de4:	000144dd 	.word	0x000144dd
    6de8:	00006aa7 	.word	0x00006aa7
    6dec:	00001fff 	.word	0x00001fff

00006df0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	b084      	sub	sp, #16
    6df4:	af00      	add	r7, sp, #0
    6df6:	0002      	movs	r2, r0
    6df8:	1dfb      	adds	r3, r7, #7
    6dfa:	701a      	strb	r2, [r3, #0]
    6dfc:	1dbb      	adds	r3, r7, #6
    6dfe:	1c0a      	adds	r2, r1, #0
    6e00:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6e02:	4b1a      	ldr	r3, [pc, #104]	; (6e6c <sercom_set_gclk_generator+0x7c>)
    6e04:	781b      	ldrb	r3, [r3, #0]
    6e06:	2201      	movs	r2, #1
    6e08:	4053      	eors	r3, r2
    6e0a:	b2db      	uxtb	r3, r3
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d103      	bne.n	6e18 <sercom_set_gclk_generator+0x28>
    6e10:	1dbb      	adds	r3, r7, #6
    6e12:	781b      	ldrb	r3, [r3, #0]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d01b      	beq.n	6e50 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6e18:	230c      	movs	r3, #12
    6e1a:	18fb      	adds	r3, r7, r3
    6e1c:	0018      	movs	r0, r3
    6e1e:	4b14      	ldr	r3, [pc, #80]	; (6e70 <sercom_set_gclk_generator+0x80>)
    6e20:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    6e22:	230c      	movs	r3, #12
    6e24:	18fb      	adds	r3, r7, r3
    6e26:	1dfa      	adds	r2, r7, #7
    6e28:	7812      	ldrb	r2, [r2, #0]
    6e2a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6e2c:	230c      	movs	r3, #12
    6e2e:	18fb      	adds	r3, r7, r3
    6e30:	0019      	movs	r1, r3
    6e32:	2013      	movs	r0, #19
    6e34:	4b0f      	ldr	r3, [pc, #60]	; (6e74 <sercom_set_gclk_generator+0x84>)
    6e36:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6e38:	2013      	movs	r0, #19
    6e3a:	4b0f      	ldr	r3, [pc, #60]	; (6e78 <sercom_set_gclk_generator+0x88>)
    6e3c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    6e3e:	4b0b      	ldr	r3, [pc, #44]	; (6e6c <sercom_set_gclk_generator+0x7c>)
    6e40:	1dfa      	adds	r2, r7, #7
    6e42:	7812      	ldrb	r2, [r2, #0]
    6e44:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6e46:	4b09      	ldr	r3, [pc, #36]	; (6e6c <sercom_set_gclk_generator+0x7c>)
    6e48:	2201      	movs	r2, #1
    6e4a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6e4c:	2300      	movs	r3, #0
    6e4e:	e008      	b.n	6e62 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6e50:	4b06      	ldr	r3, [pc, #24]	; (6e6c <sercom_set_gclk_generator+0x7c>)
    6e52:	785b      	ldrb	r3, [r3, #1]
    6e54:	1dfa      	adds	r2, r7, #7
    6e56:	7812      	ldrb	r2, [r2, #0]
    6e58:	429a      	cmp	r2, r3
    6e5a:	d101      	bne.n	6e60 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    6e5c:	2300      	movs	r3, #0
    6e5e:	e000      	b.n	6e62 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6e60:	231d      	movs	r3, #29
}
    6e62:	0018      	movs	r0, r3
    6e64:	46bd      	mov	sp, r7
    6e66:	b004      	add	sp, #16
    6e68:	bd80      	pop	{r7, pc}
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	200001dc 	.word	0x200001dc
    6e70:	00006a91 	.word	0x00006a91
    6e74:	00007c25 	.word	0x00007c25
    6e78:	00007c69 	.word	0x00007c69

00006e7c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b082      	sub	sp, #8
    6e80:	af00      	add	r7, sp, #0
    6e82:	6078      	str	r0, [r7, #4]
    6e84:	000a      	movs	r2, r1
    6e86:	1cfb      	adds	r3, r7, #3
    6e88:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	4a4d      	ldr	r2, [pc, #308]	; (6fc4 <_sercom_get_default_pad+0x148>)
    6e8e:	4293      	cmp	r3, r2
    6e90:	d03f      	beq.n	6f12 <_sercom_get_default_pad+0x96>
    6e92:	4a4c      	ldr	r2, [pc, #304]	; (6fc4 <_sercom_get_default_pad+0x148>)
    6e94:	4293      	cmp	r3, r2
    6e96:	d806      	bhi.n	6ea6 <_sercom_get_default_pad+0x2a>
    6e98:	4a4b      	ldr	r2, [pc, #300]	; (6fc8 <_sercom_get_default_pad+0x14c>)
    6e9a:	4293      	cmp	r3, r2
    6e9c:	d00f      	beq.n	6ebe <_sercom_get_default_pad+0x42>
    6e9e:	4a4b      	ldr	r2, [pc, #300]	; (6fcc <_sercom_get_default_pad+0x150>)
    6ea0:	4293      	cmp	r3, r2
    6ea2:	d021      	beq.n	6ee8 <_sercom_get_default_pad+0x6c>
    6ea4:	e089      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6ea6:	4a4a      	ldr	r2, [pc, #296]	; (6fd0 <_sercom_get_default_pad+0x154>)
    6ea8:	4293      	cmp	r3, r2
    6eaa:	d100      	bne.n	6eae <_sercom_get_default_pad+0x32>
    6eac:	e05b      	b.n	6f66 <_sercom_get_default_pad+0xea>
    6eae:	4a49      	ldr	r2, [pc, #292]	; (6fd4 <_sercom_get_default_pad+0x158>)
    6eb0:	4293      	cmp	r3, r2
    6eb2:	d100      	bne.n	6eb6 <_sercom_get_default_pad+0x3a>
    6eb4:	e06c      	b.n	6f90 <_sercom_get_default_pad+0x114>
    6eb6:	4a48      	ldr	r2, [pc, #288]	; (6fd8 <_sercom_get_default_pad+0x15c>)
    6eb8:	4293      	cmp	r3, r2
    6eba:	d03f      	beq.n	6f3c <_sercom_get_default_pad+0xc0>
    6ebc:	e07d      	b.n	6fba <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6ebe:	1cfb      	adds	r3, r7, #3
    6ec0:	781b      	ldrb	r3, [r3, #0]
    6ec2:	2b01      	cmp	r3, #1
    6ec4:	d00a      	beq.n	6edc <_sercom_get_default_pad+0x60>
    6ec6:	dc02      	bgt.n	6ece <_sercom_get_default_pad+0x52>
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d005      	beq.n	6ed8 <_sercom_get_default_pad+0x5c>
    6ecc:	e075      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6ece:	2b02      	cmp	r3, #2
    6ed0:	d006      	beq.n	6ee0 <_sercom_get_default_pad+0x64>
    6ed2:	2b03      	cmp	r3, #3
    6ed4:	d006      	beq.n	6ee4 <_sercom_get_default_pad+0x68>
    6ed6:	e070      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6ed8:	4b40      	ldr	r3, [pc, #256]	; (6fdc <_sercom_get_default_pad+0x160>)
    6eda:	e06f      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6edc:	4b40      	ldr	r3, [pc, #256]	; (6fe0 <_sercom_get_default_pad+0x164>)
    6ede:	e06d      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6ee0:	4b40      	ldr	r3, [pc, #256]	; (6fe4 <_sercom_get_default_pad+0x168>)
    6ee2:	e06b      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6ee4:	4b40      	ldr	r3, [pc, #256]	; (6fe8 <_sercom_get_default_pad+0x16c>)
    6ee6:	e069      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6ee8:	1cfb      	adds	r3, r7, #3
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	2b01      	cmp	r3, #1
    6eee:	d00a      	beq.n	6f06 <_sercom_get_default_pad+0x8a>
    6ef0:	dc02      	bgt.n	6ef8 <_sercom_get_default_pad+0x7c>
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d005      	beq.n	6f02 <_sercom_get_default_pad+0x86>
    6ef6:	e060      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6ef8:	2b02      	cmp	r3, #2
    6efa:	d006      	beq.n	6f0a <_sercom_get_default_pad+0x8e>
    6efc:	2b03      	cmp	r3, #3
    6efe:	d006      	beq.n	6f0e <_sercom_get_default_pad+0x92>
    6f00:	e05b      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f02:	2303      	movs	r3, #3
    6f04:	e05a      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f06:	4b39      	ldr	r3, [pc, #228]	; (6fec <_sercom_get_default_pad+0x170>)
    6f08:	e058      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f0a:	4b39      	ldr	r3, [pc, #228]	; (6ff0 <_sercom_get_default_pad+0x174>)
    6f0c:	e056      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f0e:	4b39      	ldr	r3, [pc, #228]	; (6ff4 <_sercom_get_default_pad+0x178>)
    6f10:	e054      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f12:	1cfb      	adds	r3, r7, #3
    6f14:	781b      	ldrb	r3, [r3, #0]
    6f16:	2b01      	cmp	r3, #1
    6f18:	d00a      	beq.n	6f30 <_sercom_get_default_pad+0xb4>
    6f1a:	dc02      	bgt.n	6f22 <_sercom_get_default_pad+0xa6>
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d005      	beq.n	6f2c <_sercom_get_default_pad+0xb0>
    6f20:	e04b      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f22:	2b02      	cmp	r3, #2
    6f24:	d006      	beq.n	6f34 <_sercom_get_default_pad+0xb8>
    6f26:	2b03      	cmp	r3, #3
    6f28:	d006      	beq.n	6f38 <_sercom_get_default_pad+0xbc>
    6f2a:	e046      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f2c:	4b32      	ldr	r3, [pc, #200]	; (6ff8 <_sercom_get_default_pad+0x17c>)
    6f2e:	e045      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f30:	4b32      	ldr	r3, [pc, #200]	; (6ffc <_sercom_get_default_pad+0x180>)
    6f32:	e043      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f34:	4b32      	ldr	r3, [pc, #200]	; (7000 <_sercom_get_default_pad+0x184>)
    6f36:	e041      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f38:	4b32      	ldr	r3, [pc, #200]	; (7004 <_sercom_get_default_pad+0x188>)
    6f3a:	e03f      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f3c:	1cfb      	adds	r3, r7, #3
    6f3e:	781b      	ldrb	r3, [r3, #0]
    6f40:	2b01      	cmp	r3, #1
    6f42:	d00a      	beq.n	6f5a <_sercom_get_default_pad+0xde>
    6f44:	dc02      	bgt.n	6f4c <_sercom_get_default_pad+0xd0>
    6f46:	2b00      	cmp	r3, #0
    6f48:	d005      	beq.n	6f56 <_sercom_get_default_pad+0xda>
    6f4a:	e036      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f4c:	2b02      	cmp	r3, #2
    6f4e:	d006      	beq.n	6f5e <_sercom_get_default_pad+0xe2>
    6f50:	2b03      	cmp	r3, #3
    6f52:	d006      	beq.n	6f62 <_sercom_get_default_pad+0xe6>
    6f54:	e031      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f56:	4b2c      	ldr	r3, [pc, #176]	; (7008 <_sercom_get_default_pad+0x18c>)
    6f58:	e030      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f5a:	4b2c      	ldr	r3, [pc, #176]	; (700c <_sercom_get_default_pad+0x190>)
    6f5c:	e02e      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f5e:	4b2c      	ldr	r3, [pc, #176]	; (7010 <_sercom_get_default_pad+0x194>)
    6f60:	e02c      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f62:	4b2c      	ldr	r3, [pc, #176]	; (7014 <_sercom_get_default_pad+0x198>)
    6f64:	e02a      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f66:	1cfb      	adds	r3, r7, #3
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	2b01      	cmp	r3, #1
    6f6c:	d00a      	beq.n	6f84 <_sercom_get_default_pad+0x108>
    6f6e:	dc02      	bgt.n	6f76 <_sercom_get_default_pad+0xfa>
    6f70:	2b00      	cmp	r3, #0
    6f72:	d005      	beq.n	6f80 <_sercom_get_default_pad+0x104>
    6f74:	e021      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f76:	2b02      	cmp	r3, #2
    6f78:	d006      	beq.n	6f88 <_sercom_get_default_pad+0x10c>
    6f7a:	2b03      	cmp	r3, #3
    6f7c:	d006      	beq.n	6f8c <_sercom_get_default_pad+0x110>
    6f7e:	e01c      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6f80:	4b25      	ldr	r3, [pc, #148]	; (7018 <_sercom_get_default_pad+0x19c>)
    6f82:	e01b      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f84:	4b25      	ldr	r3, [pc, #148]	; (701c <_sercom_get_default_pad+0x1a0>)
    6f86:	e019      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f88:	4b25      	ldr	r3, [pc, #148]	; (7020 <_sercom_get_default_pad+0x1a4>)
    6f8a:	e017      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f8c:	4b25      	ldr	r3, [pc, #148]	; (7024 <_sercom_get_default_pad+0x1a8>)
    6f8e:	e015      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6f90:	1cfb      	adds	r3, r7, #3
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	2b01      	cmp	r3, #1
    6f96:	d00a      	beq.n	6fae <_sercom_get_default_pad+0x132>
    6f98:	dc02      	bgt.n	6fa0 <_sercom_get_default_pad+0x124>
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d005      	beq.n	6faa <_sercom_get_default_pad+0x12e>
    6f9e:	e00c      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6fa0:	2b02      	cmp	r3, #2
    6fa2:	d006      	beq.n	6fb2 <_sercom_get_default_pad+0x136>
    6fa4:	2b03      	cmp	r3, #3
    6fa6:	d006      	beq.n	6fb6 <_sercom_get_default_pad+0x13a>
    6fa8:	e007      	b.n	6fba <_sercom_get_default_pad+0x13e>
    6faa:	4b1f      	ldr	r3, [pc, #124]	; (7028 <_sercom_get_default_pad+0x1ac>)
    6fac:	e006      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6fae:	4b1f      	ldr	r3, [pc, #124]	; (702c <_sercom_get_default_pad+0x1b0>)
    6fb0:	e004      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6fb2:	4b1f      	ldr	r3, [pc, #124]	; (7030 <_sercom_get_default_pad+0x1b4>)
    6fb4:	e002      	b.n	6fbc <_sercom_get_default_pad+0x140>
    6fb6:	4b1f      	ldr	r3, [pc, #124]	; (7034 <_sercom_get_default_pad+0x1b8>)
    6fb8:	e000      	b.n	6fbc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6fba:	2300      	movs	r3, #0
}
    6fbc:	0018      	movs	r0, r3
    6fbe:	46bd      	mov	sp, r7
    6fc0:	b002      	add	sp, #8
    6fc2:	bd80      	pop	{r7, pc}
    6fc4:	42001000 	.word	0x42001000
    6fc8:	42000800 	.word	0x42000800
    6fcc:	42000c00 	.word	0x42000c00
    6fd0:	42001800 	.word	0x42001800
    6fd4:	42001c00 	.word	0x42001c00
    6fd8:	42001400 	.word	0x42001400
    6fdc:	00040003 	.word	0x00040003
    6fe0:	00050003 	.word	0x00050003
    6fe4:	00060003 	.word	0x00060003
    6fe8:	00070003 	.word	0x00070003
    6fec:	00010003 	.word	0x00010003
    6ff0:	001e0003 	.word	0x001e0003
    6ff4:	001f0003 	.word	0x001f0003
    6ff8:	00080003 	.word	0x00080003
    6ffc:	00090003 	.word	0x00090003
    7000:	000a0003 	.word	0x000a0003
    7004:	000b0003 	.word	0x000b0003
    7008:	00100003 	.word	0x00100003
    700c:	00110003 	.word	0x00110003
    7010:	00120003 	.word	0x00120003
    7014:	00130003 	.word	0x00130003
    7018:	000c0003 	.word	0x000c0003
    701c:	000d0003 	.word	0x000d0003
    7020:	000e0003 	.word	0x000e0003
    7024:	000f0003 	.word	0x000f0003
    7028:	00160003 	.word	0x00160003
    702c:	00170003 	.word	0x00170003
    7030:	00180003 	.word	0x00180003
    7034:	00190003 	.word	0x00190003

00007038 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7038:	b590      	push	{r4, r7, lr}
    703a:	b08b      	sub	sp, #44	; 0x2c
    703c:	af00      	add	r7, sp, #0
    703e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7040:	230c      	movs	r3, #12
    7042:	18fb      	adds	r3, r7, r3
    7044:	4a0f      	ldr	r2, [pc, #60]	; (7084 <_sercom_get_sercom_inst_index+0x4c>)
    7046:	ca13      	ldmia	r2!, {r0, r1, r4}
    7048:	c313      	stmia	r3!, {r0, r1, r4}
    704a:	ca13      	ldmia	r2!, {r0, r1, r4}
    704c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    704e:	2300      	movs	r3, #0
    7050:	627b      	str	r3, [r7, #36]	; 0x24
    7052:	e00e      	b.n	7072 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7054:	230c      	movs	r3, #12
    7056:	18fb      	adds	r3, r7, r3
    7058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    705a:	0092      	lsls	r2, r2, #2
    705c:	58d3      	ldr	r3, [r2, r3]
    705e:	001a      	movs	r2, r3
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	429a      	cmp	r2, r3
    7064:	d102      	bne.n	706c <_sercom_get_sercom_inst_index+0x34>
			return i;
    7066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7068:	b2db      	uxtb	r3, r3
    706a:	e006      	b.n	707a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    706e:	3301      	adds	r3, #1
    7070:	627b      	str	r3, [r7, #36]	; 0x24
    7072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7074:	2b05      	cmp	r3, #5
    7076:	d9ed      	bls.n	7054 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    7078:	2300      	movs	r3, #0
}
    707a:	0018      	movs	r0, r3
    707c:	46bd      	mov	sp, r7
    707e:	b00b      	add	sp, #44	; 0x2c
    7080:	bd90      	pop	{r4, r7, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	000173b4 	.word	0x000173b4

00007088 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    7088:	b580      	push	{r7, lr}
    708a:	b082      	sub	sp, #8
    708c:	af00      	add	r7, sp, #0
    708e:	0002      	movs	r2, r0
    7090:	1dfb      	adds	r3, r7, #7
    7092:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    7094:	46c0      	nop			; (mov r8, r8)
    7096:	46bd      	mov	sp, r7
    7098:	b002      	add	sp, #8
    709a:	bd80      	pop	{r7, pc}

0000709c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    709c:	b580      	push	{r7, lr}
    709e:	b084      	sub	sp, #16
    70a0:	af00      	add	r7, sp, #0
    70a2:	0002      	movs	r2, r0
    70a4:	6039      	str	r1, [r7, #0]
    70a6:	1dfb      	adds	r3, r7, #7
    70a8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    70aa:	4b13      	ldr	r3, [pc, #76]	; (70f8 <_sercom_set_handler+0x5c>)
    70ac:	781b      	ldrb	r3, [r3, #0]
    70ae:	2201      	movs	r2, #1
    70b0:	4053      	eors	r3, r2
    70b2:	b2db      	uxtb	r3, r3
    70b4:	2b00      	cmp	r3, #0
    70b6:	d015      	beq.n	70e4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    70b8:	2300      	movs	r3, #0
    70ba:	60fb      	str	r3, [r7, #12]
    70bc:	e00c      	b.n	70d8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    70be:	4b0f      	ldr	r3, [pc, #60]	; (70fc <_sercom_set_handler+0x60>)
    70c0:	68fa      	ldr	r2, [r7, #12]
    70c2:	0092      	lsls	r2, r2, #2
    70c4:	490e      	ldr	r1, [pc, #56]	; (7100 <_sercom_set_handler+0x64>)
    70c6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    70c8:	4b0e      	ldr	r3, [pc, #56]	; (7104 <_sercom_set_handler+0x68>)
    70ca:	68fa      	ldr	r2, [r7, #12]
    70cc:	0092      	lsls	r2, r2, #2
    70ce:	2100      	movs	r1, #0
    70d0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    70d2:	68fb      	ldr	r3, [r7, #12]
    70d4:	3301      	adds	r3, #1
    70d6:	60fb      	str	r3, [r7, #12]
    70d8:	68fb      	ldr	r3, [r7, #12]
    70da:	2b05      	cmp	r3, #5
    70dc:	d9ef      	bls.n	70be <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    70de:	4b06      	ldr	r3, [pc, #24]	; (70f8 <_sercom_set_handler+0x5c>)
    70e0:	2201      	movs	r2, #1
    70e2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    70e4:	1dfb      	adds	r3, r7, #7
    70e6:	781a      	ldrb	r2, [r3, #0]
    70e8:	4b04      	ldr	r3, [pc, #16]	; (70fc <_sercom_set_handler+0x60>)
    70ea:	0092      	lsls	r2, r2, #2
    70ec:	6839      	ldr	r1, [r7, #0]
    70ee:	50d1      	str	r1, [r2, r3]
}
    70f0:	46c0      	nop			; (mov r8, r8)
    70f2:	46bd      	mov	sp, r7
    70f4:	b004      	add	sp, #16
    70f6:	bd80      	pop	{r7, pc}
    70f8:	200001de 	.word	0x200001de
    70fc:	200001e0 	.word	0x200001e0
    7100:	00007089 	.word	0x00007089
    7104:	20000468 	.word	0x20000468

00007108 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7108:	b590      	push	{r4, r7, lr}
    710a:	b085      	sub	sp, #20
    710c:	af00      	add	r7, sp, #0
    710e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7110:	2308      	movs	r3, #8
    7112:	18fb      	adds	r3, r7, r3
    7114:	4a0b      	ldr	r2, [pc, #44]	; (7144 <_sercom_get_interrupt_vector+0x3c>)
    7116:	6811      	ldr	r1, [r2, #0]
    7118:	6019      	str	r1, [r3, #0]
    711a:	8892      	ldrh	r2, [r2, #4]
    711c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    711e:	230f      	movs	r3, #15
    7120:	18fc      	adds	r4, r7, r3
    7122:	687b      	ldr	r3, [r7, #4]
    7124:	0018      	movs	r0, r3
    7126:	4b08      	ldr	r3, [pc, #32]	; (7148 <_sercom_get_interrupt_vector+0x40>)
    7128:	4798      	blx	r3
    712a:	0003      	movs	r3, r0
    712c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    712e:	230f      	movs	r3, #15
    7130:	18fb      	adds	r3, r7, r3
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	2208      	movs	r2, #8
    7136:	18ba      	adds	r2, r7, r2
    7138:	5cd3      	ldrb	r3, [r2, r3]
    713a:	b25b      	sxtb	r3, r3
}
    713c:	0018      	movs	r0, r3
    713e:	46bd      	mov	sp, r7
    7140:	b005      	add	sp, #20
    7142:	bd90      	pop	{r4, r7, pc}
    7144:	000173cc 	.word	0x000173cc
    7148:	00007039 	.word	0x00007039

0000714c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    714c:	b580      	push	{r7, lr}
    714e:	af00      	add	r7, sp, #0
    7150:	4b03      	ldr	r3, [pc, #12]	; (7160 <SERCOM0_Handler+0x14>)
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	2000      	movs	r0, #0
    7156:	4798      	blx	r3
    7158:	46c0      	nop			; (mov r8, r8)
    715a:	46bd      	mov	sp, r7
    715c:	bd80      	pop	{r7, pc}
    715e:	46c0      	nop			; (mov r8, r8)
    7160:	200001e0 	.word	0x200001e0

00007164 <SERCOM1_Handler>:
    7164:	b580      	push	{r7, lr}
    7166:	af00      	add	r7, sp, #0
    7168:	4b03      	ldr	r3, [pc, #12]	; (7178 <SERCOM1_Handler+0x14>)
    716a:	685b      	ldr	r3, [r3, #4]
    716c:	2001      	movs	r0, #1
    716e:	4798      	blx	r3
    7170:	46c0      	nop			; (mov r8, r8)
    7172:	46bd      	mov	sp, r7
    7174:	bd80      	pop	{r7, pc}
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	200001e0 	.word	0x200001e0

0000717c <SERCOM2_Handler>:
    717c:	b580      	push	{r7, lr}
    717e:	af00      	add	r7, sp, #0
    7180:	4b03      	ldr	r3, [pc, #12]	; (7190 <SERCOM2_Handler+0x14>)
    7182:	689b      	ldr	r3, [r3, #8]
    7184:	2002      	movs	r0, #2
    7186:	4798      	blx	r3
    7188:	46c0      	nop			; (mov r8, r8)
    718a:	46bd      	mov	sp, r7
    718c:	bd80      	pop	{r7, pc}
    718e:	46c0      	nop			; (mov r8, r8)
    7190:	200001e0 	.word	0x200001e0

00007194 <SERCOM3_Handler>:
    7194:	b580      	push	{r7, lr}
    7196:	af00      	add	r7, sp, #0
    7198:	4b03      	ldr	r3, [pc, #12]	; (71a8 <SERCOM3_Handler+0x14>)
    719a:	68db      	ldr	r3, [r3, #12]
    719c:	2003      	movs	r0, #3
    719e:	4798      	blx	r3
    71a0:	46c0      	nop			; (mov r8, r8)
    71a2:	46bd      	mov	sp, r7
    71a4:	bd80      	pop	{r7, pc}
    71a6:	46c0      	nop			; (mov r8, r8)
    71a8:	200001e0 	.word	0x200001e0

000071ac <SERCOM4_Handler>:
    71ac:	b580      	push	{r7, lr}
    71ae:	af00      	add	r7, sp, #0
    71b0:	4b03      	ldr	r3, [pc, #12]	; (71c0 <SERCOM4_Handler+0x14>)
    71b2:	691b      	ldr	r3, [r3, #16]
    71b4:	2004      	movs	r0, #4
    71b6:	4798      	blx	r3
    71b8:	46c0      	nop			; (mov r8, r8)
    71ba:	46bd      	mov	sp, r7
    71bc:	bd80      	pop	{r7, pc}
    71be:	46c0      	nop			; (mov r8, r8)
    71c0:	200001e0 	.word	0x200001e0

000071c4 <SERCOM5_Handler>:
    71c4:	b580      	push	{r7, lr}
    71c6:	af00      	add	r7, sp, #0
    71c8:	4b03      	ldr	r3, [pc, #12]	; (71d8 <SERCOM5_Handler+0x14>)
    71ca:	695b      	ldr	r3, [r3, #20]
    71cc:	2005      	movs	r0, #5
    71ce:	4798      	blx	r3
    71d0:	46c0      	nop			; (mov r8, r8)
    71d2:	46bd      	mov	sp, r7
    71d4:	bd80      	pop	{r7, pc}
    71d6:	46c0      	nop			; (mov r8, r8)
    71d8:	200001e0 	.word	0x200001e0

000071dc <system_pinmux_get_config_defaults>:
{
    71dc:	b580      	push	{r7, lr}
    71de:	b082      	sub	sp, #8
    71e0:	af00      	add	r7, sp, #0
    71e2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    71e4:	687b      	ldr	r3, [r7, #4]
    71e6:	2280      	movs	r2, #128	; 0x80
    71e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    71ea:	687b      	ldr	r3, [r7, #4]
    71ec:	2200      	movs	r2, #0
    71ee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	2201      	movs	r2, #1
    71f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    71f6:	687b      	ldr	r3, [r7, #4]
    71f8:	2200      	movs	r2, #0
    71fa:	70da      	strb	r2, [r3, #3]
}
    71fc:	46c0      	nop			; (mov r8, r8)
    71fe:	46bd      	mov	sp, r7
    7200:	b002      	add	sp, #8
    7202:	bd80      	pop	{r7, pc}

00007204 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7204:	b580      	push	{r7, lr}
    7206:	b084      	sub	sp, #16
    7208:	af00      	add	r7, sp, #0
    720a:	0002      	movs	r2, r0
    720c:	6039      	str	r1, [r7, #0]
    720e:	1dfb      	adds	r3, r7, #7
    7210:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7212:	230c      	movs	r3, #12
    7214:	18fb      	adds	r3, r7, r3
    7216:	0018      	movs	r0, r3
    7218:	4b10      	ldr	r3, [pc, #64]	; (725c <port_pin_set_config+0x58>)
    721a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    721c:	230c      	movs	r3, #12
    721e:	18fb      	adds	r3, r7, r3
    7220:	2280      	movs	r2, #128	; 0x80
    7222:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7224:	683b      	ldr	r3, [r7, #0]
    7226:	781a      	ldrb	r2, [r3, #0]
    7228:	230c      	movs	r3, #12
    722a:	18fb      	adds	r3, r7, r3
    722c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    722e:	683b      	ldr	r3, [r7, #0]
    7230:	785a      	ldrb	r2, [r3, #1]
    7232:	230c      	movs	r3, #12
    7234:	18fb      	adds	r3, r7, r3
    7236:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7238:	683b      	ldr	r3, [r7, #0]
    723a:	789a      	ldrb	r2, [r3, #2]
    723c:	230c      	movs	r3, #12
    723e:	18fb      	adds	r3, r7, r3
    7240:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7242:	230c      	movs	r3, #12
    7244:	18fa      	adds	r2, r7, r3
    7246:	1dfb      	adds	r3, r7, #7
    7248:	781b      	ldrb	r3, [r3, #0]
    724a:	0011      	movs	r1, r2
    724c:	0018      	movs	r0, r3
    724e:	4b04      	ldr	r3, [pc, #16]	; (7260 <port_pin_set_config+0x5c>)
    7250:	4798      	blx	r3
}
    7252:	46c0      	nop			; (mov r8, r8)
    7254:	46bd      	mov	sp, r7
    7256:	b004      	add	sp, #16
    7258:	bd80      	pop	{r7, pc}
    725a:	46c0      	nop			; (mov r8, r8)
    725c:	000071dd 	.word	0x000071dd
    7260:	00007f11 	.word	0x00007f11

00007264 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7264:	b580      	push	{r7, lr}
    7266:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7268:	46c0      	nop			; (mov r8, r8)
    726a:	46bd      	mov	sp, r7
    726c:	bd80      	pop	{r7, pc}
	...

00007270 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    7270:	b580      	push	{r7, lr}
    7272:	b082      	sub	sp, #8
    7274:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7276:	4b10      	ldr	r3, [pc, #64]	; (72b8 <cpu_irq_enter_critical+0x48>)
    7278:	681b      	ldr	r3, [r3, #0]
    727a:	2b00      	cmp	r3, #0
    727c:	d112      	bne.n	72a4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    727e:	f3ef 8310 	mrs	r3, PRIMASK
    7282:	607b      	str	r3, [r7, #4]
  return(result);
    7284:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7286:	2b00      	cmp	r3, #0
    7288:	d109      	bne.n	729e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    728a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    728c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    7290:	4b0a      	ldr	r3, [pc, #40]	; (72bc <cpu_irq_enter_critical+0x4c>)
    7292:	2200      	movs	r2, #0
    7294:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7296:	4b0a      	ldr	r3, [pc, #40]	; (72c0 <cpu_irq_enter_critical+0x50>)
    7298:	2201      	movs	r2, #1
    729a:	701a      	strb	r2, [r3, #0]
    729c:	e002      	b.n	72a4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    729e:	4b08      	ldr	r3, [pc, #32]	; (72c0 <cpu_irq_enter_critical+0x50>)
    72a0:	2200      	movs	r2, #0
    72a2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    72a4:	4b04      	ldr	r3, [pc, #16]	; (72b8 <cpu_irq_enter_critical+0x48>)
    72a6:	681b      	ldr	r3, [r3, #0]
    72a8:	1c5a      	adds	r2, r3, #1
    72aa:	4b03      	ldr	r3, [pc, #12]	; (72b8 <cpu_irq_enter_critical+0x48>)
    72ac:	601a      	str	r2, [r3, #0]
}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	46bd      	mov	sp, r7
    72b2:	b002      	add	sp, #8
    72b4:	bd80      	pop	{r7, pc}
    72b6:	46c0      	nop			; (mov r8, r8)
    72b8:	200001f8 	.word	0x200001f8
    72bc:	20000000 	.word	0x20000000
    72c0:	200001fc 	.word	0x200001fc

000072c4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    72c4:	b580      	push	{r7, lr}
    72c6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    72c8:	4b0b      	ldr	r3, [pc, #44]	; (72f8 <cpu_irq_leave_critical+0x34>)
    72ca:	681b      	ldr	r3, [r3, #0]
    72cc:	1e5a      	subs	r2, r3, #1
    72ce:	4b0a      	ldr	r3, [pc, #40]	; (72f8 <cpu_irq_leave_critical+0x34>)
    72d0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    72d2:	4b09      	ldr	r3, [pc, #36]	; (72f8 <cpu_irq_leave_critical+0x34>)
    72d4:	681b      	ldr	r3, [r3, #0]
    72d6:	2b00      	cmp	r3, #0
    72d8:	d10a      	bne.n	72f0 <cpu_irq_leave_critical+0x2c>
    72da:	4b08      	ldr	r3, [pc, #32]	; (72fc <cpu_irq_leave_critical+0x38>)
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	b2db      	uxtb	r3, r3
    72e0:	2b00      	cmp	r3, #0
    72e2:	d005      	beq.n	72f0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    72e4:	4b06      	ldr	r3, [pc, #24]	; (7300 <cpu_irq_leave_critical+0x3c>)
    72e6:	2201      	movs	r2, #1
    72e8:	701a      	strb	r2, [r3, #0]
    72ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    72ee:	b662      	cpsie	i
	}
}
    72f0:	46c0      	nop			; (mov r8, r8)
    72f2:	46bd      	mov	sp, r7
    72f4:	bd80      	pop	{r7, pc}
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	200001f8 	.word	0x200001f8
    72fc:	200001fc 	.word	0x200001fc
    7300:	20000000 	.word	0x20000000

00007304 <system_gclk_gen_get_config_defaults>:
{
    7304:	b580      	push	{r7, lr}
    7306:	b082      	sub	sp, #8
    7308:	af00      	add	r7, sp, #0
    730a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	2201      	movs	r2, #1
    7310:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	2200      	movs	r2, #0
    7316:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	2206      	movs	r2, #6
    731c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	2200      	movs	r2, #0
    7322:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7324:	687b      	ldr	r3, [r7, #4]
    7326:	2200      	movs	r2, #0
    7328:	725a      	strb	r2, [r3, #9]
}
    732a:	46c0      	nop			; (mov r8, r8)
    732c:	46bd      	mov	sp, r7
    732e:	b002      	add	sp, #8
    7330:	bd80      	pop	{r7, pc}

00007332 <system_clock_source_osc32k_get_config_defaults>:
{
    7332:	b580      	push	{r7, lr}
    7334:	b082      	sub	sp, #8
    7336:	af00      	add	r7, sp, #0
    7338:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	2201      	movs	r2, #1
    733e:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    7340:	687b      	ldr	r3, [r7, #4]
    7342:	2201      	movs	r2, #1
    7344:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	2200      	movs	r2, #0
    734a:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	2201      	movs	r2, #1
    7350:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    7352:	687b      	ldr	r3, [r7, #4]
    7354:	2207      	movs	r2, #7
    7356:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    7358:	687b      	ldr	r3, [r7, #4]
    735a:	2200      	movs	r2, #0
    735c:	715a      	strb	r2, [r3, #5]
}
    735e:	46c0      	nop			; (mov r8, r8)
    7360:	46bd      	mov	sp, r7
    7362:	b002      	add	sp, #8
    7364:	bd80      	pop	{r7, pc}

00007366 <system_clock_source_osc8m_get_config_defaults>:
{
    7366:	b580      	push	{r7, lr}
    7368:	b082      	sub	sp, #8
    736a:	af00      	add	r7, sp, #0
    736c:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	2203      	movs	r2, #3
    7372:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	2200      	movs	r2, #0
    7378:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    737a:	687b      	ldr	r3, [r7, #4]
    737c:	2201      	movs	r2, #1
    737e:	709a      	strb	r2, [r3, #2]
}
    7380:	46c0      	nop			; (mov r8, r8)
    7382:	46bd      	mov	sp, r7
    7384:	b002      	add	sp, #8
    7386:	bd80      	pop	{r7, pc}

00007388 <system_cpu_clock_set_divider>:
{
    7388:	b580      	push	{r7, lr}
    738a:	b082      	sub	sp, #8
    738c:	af00      	add	r7, sp, #0
    738e:	0002      	movs	r2, r0
    7390:	1dfb      	adds	r3, r7, #7
    7392:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    7394:	4a03      	ldr	r2, [pc, #12]	; (73a4 <system_cpu_clock_set_divider+0x1c>)
    7396:	1dfb      	adds	r3, r7, #7
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	7213      	strb	r3, [r2, #8]
}
    739c:	46c0      	nop			; (mov r8, r8)
    739e:	46bd      	mov	sp, r7
    73a0:	b002      	add	sp, #8
    73a2:	bd80      	pop	{r7, pc}
    73a4:	40000400 	.word	0x40000400

000073a8 <system_apb_clock_set_divider>:
{
    73a8:	b580      	push	{r7, lr}
    73aa:	b082      	sub	sp, #8
    73ac:	af00      	add	r7, sp, #0
    73ae:	0002      	movs	r2, r0
    73b0:	1dfb      	adds	r3, r7, #7
    73b2:	701a      	strb	r2, [r3, #0]
    73b4:	1dbb      	adds	r3, r7, #6
    73b6:	1c0a      	adds	r2, r1, #0
    73b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    73ba:	1dfb      	adds	r3, r7, #7
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	2b01      	cmp	r3, #1
    73c0:	d008      	beq.n	73d4 <system_apb_clock_set_divider+0x2c>
    73c2:	2b02      	cmp	r3, #2
    73c4:	d00b      	beq.n	73de <system_apb_clock_set_divider+0x36>
    73c6:	2b00      	cmp	r3, #0
    73c8:	d10e      	bne.n	73e8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    73ca:	4a0b      	ldr	r2, [pc, #44]	; (73f8 <system_apb_clock_set_divider+0x50>)
    73cc:	1dbb      	adds	r3, r7, #6
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	7253      	strb	r3, [r2, #9]
			break;
    73d2:	e00b      	b.n	73ec <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    73d4:	4a08      	ldr	r2, [pc, #32]	; (73f8 <system_apb_clock_set_divider+0x50>)
    73d6:	1dbb      	adds	r3, r7, #6
    73d8:	781b      	ldrb	r3, [r3, #0]
    73da:	7293      	strb	r3, [r2, #10]
			break;
    73dc:	e006      	b.n	73ec <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    73de:	4a06      	ldr	r2, [pc, #24]	; (73f8 <system_apb_clock_set_divider+0x50>)
    73e0:	1dbb      	adds	r3, r7, #6
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	72d3      	strb	r3, [r2, #11]
			break;
    73e6:	e001      	b.n	73ec <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    73e8:	2317      	movs	r3, #23
    73ea:	e000      	b.n	73ee <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    73ec:	2300      	movs	r3, #0
}
    73ee:	0018      	movs	r0, r3
    73f0:	46bd      	mov	sp, r7
    73f2:	b002      	add	sp, #8
    73f4:	bd80      	pop	{r7, pc}
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	40000400 	.word	0x40000400

000073fc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    73fc:	b580      	push	{r7, lr}
    73fe:	b082      	sub	sp, #8
    7400:	af00      	add	r7, sp, #0
    7402:	0002      	movs	r2, r0
    7404:	1dfb      	adds	r3, r7, #7
    7406:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7408:	4a08      	ldr	r2, [pc, #32]	; (742c <system_flash_set_waitstates+0x30>)
    740a:	1dfb      	adds	r3, r7, #7
    740c:	781b      	ldrb	r3, [r3, #0]
    740e:	210f      	movs	r1, #15
    7410:	400b      	ands	r3, r1
    7412:	b2d9      	uxtb	r1, r3
    7414:	6853      	ldr	r3, [r2, #4]
    7416:	200f      	movs	r0, #15
    7418:	4001      	ands	r1, r0
    741a:	0049      	lsls	r1, r1, #1
    741c:	201e      	movs	r0, #30
    741e:	4383      	bics	r3, r0
    7420:	430b      	orrs	r3, r1
    7422:	6053      	str	r3, [r2, #4]
}
    7424:	46c0      	nop			; (mov r8, r8)
    7426:	46bd      	mov	sp, r7
    7428:	b002      	add	sp, #8
    742a:	bd80      	pop	{r7, pc}
    742c:	41004000 	.word	0x41004000

00007430 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    7430:	b580      	push	{r7, lr}
    7432:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7434:	46c0      	nop			; (mov r8, r8)
    7436:	4b04      	ldr	r3, [pc, #16]	; (7448 <_system_dfll_wait_for_sync+0x18>)
    7438:	68db      	ldr	r3, [r3, #12]
    743a:	2210      	movs	r2, #16
    743c:	4013      	ands	r3, r2
    743e:	d0fa      	beq.n	7436 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    7440:	46c0      	nop			; (mov r8, r8)
    7442:	46bd      	mov	sp, r7
    7444:	bd80      	pop	{r7, pc}
    7446:	46c0      	nop			; (mov r8, r8)
    7448:	40000800 	.word	0x40000800

0000744c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    744c:	b580      	push	{r7, lr}
    744e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7450:	4b0c      	ldr	r3, [pc, #48]	; (7484 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7452:	2202      	movs	r2, #2
    7454:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7456:	4b0c      	ldr	r3, [pc, #48]	; (7488 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7458:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    745a:	4a0a      	ldr	r2, [pc, #40]	; (7484 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    745c:	4b0b      	ldr	r3, [pc, #44]	; (748c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    745e:	689b      	ldr	r3, [r3, #8]
    7460:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7462:	4a08      	ldr	r2, [pc, #32]	; (7484 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7464:	4b09      	ldr	r3, [pc, #36]	; (748c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7466:	685b      	ldr	r3, [r3, #4]
    7468:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    746a:	4b06      	ldr	r3, [pc, #24]	; (7484 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    746c:	2200      	movs	r2, #0
    746e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7470:	4b05      	ldr	r3, [pc, #20]	; (7488 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7472:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7474:	4a03      	ldr	r2, [pc, #12]	; (7484 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7476:	4b05      	ldr	r3, [pc, #20]	; (748c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7478:	681b      	ldr	r3, [r3, #0]
    747a:	b29b      	uxth	r3, r3
    747c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    747e:	46c0      	nop			; (mov r8, r8)
    7480:	46bd      	mov	sp, r7
    7482:	bd80      	pop	{r7, pc}
    7484:	40000800 	.word	0x40000800
    7488:	00007431 	.word	0x00007431
    748c:	20000200 	.word	0x20000200

00007490 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7490:	b580      	push	{r7, lr}
    7492:	b082      	sub	sp, #8
    7494:	af00      	add	r7, sp, #0
    7496:	0002      	movs	r2, r0
    7498:	1dfb      	adds	r3, r7, #7
    749a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    749c:	1dfb      	adds	r3, r7, #7
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	2b08      	cmp	r3, #8
    74a2:	d840      	bhi.n	7526 <system_clock_source_get_hz+0x96>
    74a4:	009a      	lsls	r2, r3, #2
    74a6:	4b22      	ldr	r3, [pc, #136]	; (7530 <system_clock_source_get_hz+0xa0>)
    74a8:	18d3      	adds	r3, r2, r3
    74aa:	681b      	ldr	r3, [r3, #0]
    74ac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    74ae:	4b21      	ldr	r3, [pc, #132]	; (7534 <system_clock_source_get_hz+0xa4>)
    74b0:	691b      	ldr	r3, [r3, #16]
    74b2:	e039      	b.n	7528 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    74b4:	4b20      	ldr	r3, [pc, #128]	; (7538 <system_clock_source_get_hz+0xa8>)
    74b6:	6a1b      	ldr	r3, [r3, #32]
    74b8:	059b      	lsls	r3, r3, #22
    74ba:	0f9b      	lsrs	r3, r3, #30
    74bc:	b2db      	uxtb	r3, r3
    74be:	001a      	movs	r2, r3
    74c0:	4b1e      	ldr	r3, [pc, #120]	; (753c <system_clock_source_get_hz+0xac>)
    74c2:	40d3      	lsrs	r3, r2
    74c4:	e030      	b.n	7528 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    74c6:	2380      	movs	r3, #128	; 0x80
    74c8:	021b      	lsls	r3, r3, #8
    74ca:	e02d      	b.n	7528 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    74cc:	2380      	movs	r3, #128	; 0x80
    74ce:	021b      	lsls	r3, r3, #8
    74d0:	e02a      	b.n	7528 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    74d2:	4b18      	ldr	r3, [pc, #96]	; (7534 <system_clock_source_get_hz+0xa4>)
    74d4:	695b      	ldr	r3, [r3, #20]
    74d6:	e027      	b.n	7528 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    74d8:	4b16      	ldr	r3, [pc, #88]	; (7534 <system_clock_source_get_hz+0xa4>)
    74da:	681b      	ldr	r3, [r3, #0]
    74dc:	2202      	movs	r2, #2
    74de:	4013      	ands	r3, r2
    74e0:	d101      	bne.n	74e6 <system_clock_source_get_hz+0x56>
			return 0;
    74e2:	2300      	movs	r3, #0
    74e4:	e020      	b.n	7528 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    74e6:	4b16      	ldr	r3, [pc, #88]	; (7540 <system_clock_source_get_hz+0xb0>)
    74e8:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    74ea:	4b12      	ldr	r3, [pc, #72]	; (7534 <system_clock_source_get_hz+0xa4>)
    74ec:	681b      	ldr	r3, [r3, #0]
    74ee:	2204      	movs	r2, #4
    74f0:	4013      	ands	r3, r2
    74f2:	d009      	beq.n	7508 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    74f4:	2000      	movs	r0, #0
    74f6:	4b13      	ldr	r3, [pc, #76]	; (7544 <system_clock_source_get_hz+0xb4>)
    74f8:	4798      	blx	r3
    74fa:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    74fc:	4b0d      	ldr	r3, [pc, #52]	; (7534 <system_clock_source_get_hz+0xa4>)
    74fe:	689b      	ldr	r3, [r3, #8]
    7500:	041b      	lsls	r3, r3, #16
    7502:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7504:	4353      	muls	r3, r2
    7506:	e00f      	b.n	7528 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    7508:	4b0f      	ldr	r3, [pc, #60]	; (7548 <system_clock_source_get_hz+0xb8>)
    750a:	e00d      	b.n	7528 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    750c:	4a0a      	ldr	r2, [pc, #40]	; (7538 <system_clock_source_get_hz+0xa8>)
    750e:	2350      	movs	r3, #80	; 0x50
    7510:	5cd3      	ldrb	r3, [r2, r3]
    7512:	b2db      	uxtb	r3, r3
    7514:	001a      	movs	r2, r3
    7516:	2304      	movs	r3, #4
    7518:	4013      	ands	r3, r2
    751a:	d101      	bne.n	7520 <system_clock_source_get_hz+0x90>
			return 0;
    751c:	2300      	movs	r3, #0
    751e:	e003      	b.n	7528 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    7520:	4b04      	ldr	r3, [pc, #16]	; (7534 <system_clock_source_get_hz+0xa4>)
    7522:	68db      	ldr	r3, [r3, #12]
    7524:	e000      	b.n	7528 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    7526:	2300      	movs	r3, #0
	}
}
    7528:	0018      	movs	r0, r3
    752a:	46bd      	mov	sp, r7
    752c:	b002      	add	sp, #8
    752e:	bd80      	pop	{r7, pc}
    7530:	000173d4 	.word	0x000173d4
    7534:	20000200 	.word	0x20000200
    7538:	40000800 	.word	0x40000800
    753c:	007a1200 	.word	0x007a1200
    7540:	00007431 	.word	0x00007431
    7544:	00007d49 	.word	0x00007d49
    7548:	02dc6c00 	.word	0x02dc6c00

0000754c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    754c:	b580      	push	{r7, lr}
    754e:	b084      	sub	sp, #16
    7550:	af00      	add	r7, sp, #0
    7552:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7554:	4b1a      	ldr	r3, [pc, #104]	; (75c0 <system_clock_source_osc8m_set_config+0x74>)
    7556:	6a1b      	ldr	r3, [r3, #32]
    7558:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	781b      	ldrb	r3, [r3, #0]
    755e:	1c1a      	adds	r2, r3, #0
    7560:	2303      	movs	r3, #3
    7562:	4013      	ands	r3, r2
    7564:	b2da      	uxtb	r2, r3
    7566:	230d      	movs	r3, #13
    7568:	18fb      	adds	r3, r7, r3
    756a:	2103      	movs	r1, #3
    756c:	400a      	ands	r2, r1
    756e:	0010      	movs	r0, r2
    7570:	781a      	ldrb	r2, [r3, #0]
    7572:	2103      	movs	r1, #3
    7574:	438a      	bics	r2, r1
    7576:	1c11      	adds	r1, r2, #0
    7578:	1c02      	adds	r2, r0, #0
    757a:	430a      	orrs	r2, r1
    757c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    757e:	687b      	ldr	r3, [r7, #4]
    7580:	789a      	ldrb	r2, [r3, #2]
    7582:	230c      	movs	r3, #12
    7584:	18fb      	adds	r3, r7, r3
    7586:	01d0      	lsls	r0, r2, #7
    7588:	781a      	ldrb	r2, [r3, #0]
    758a:	217f      	movs	r1, #127	; 0x7f
    758c:	400a      	ands	r2, r1
    758e:	1c11      	adds	r1, r2, #0
    7590:	1c02      	adds	r2, r0, #0
    7592:	430a      	orrs	r2, r1
    7594:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7596:	687b      	ldr	r3, [r7, #4]
    7598:	785a      	ldrb	r2, [r3, #1]
    759a:	230c      	movs	r3, #12
    759c:	18fb      	adds	r3, r7, r3
    759e:	2101      	movs	r1, #1
    75a0:	400a      	ands	r2, r1
    75a2:	0190      	lsls	r0, r2, #6
    75a4:	781a      	ldrb	r2, [r3, #0]
    75a6:	2140      	movs	r1, #64	; 0x40
    75a8:	438a      	bics	r2, r1
    75aa:	1c11      	adds	r1, r2, #0
    75ac:	1c02      	adds	r2, r0, #0
    75ae:	430a      	orrs	r2, r1
    75b0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    75b2:	4b03      	ldr	r3, [pc, #12]	; (75c0 <system_clock_source_osc8m_set_config+0x74>)
    75b4:	68fa      	ldr	r2, [r7, #12]
    75b6:	621a      	str	r2, [r3, #32]
}
    75b8:	46c0      	nop			; (mov r8, r8)
    75ba:	46bd      	mov	sp, r7
    75bc:	b004      	add	sp, #16
    75be:	bd80      	pop	{r7, pc}
    75c0:	40000800 	.word	0x40000800

000075c4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    75c4:	b580      	push	{r7, lr}
    75c6:	b084      	sub	sp, #16
    75c8:	af00      	add	r7, sp, #0
    75ca:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    75cc:	4b2f      	ldr	r3, [pc, #188]	; (768c <system_clock_source_osc32k_set_config+0xc8>)
    75ce:	699b      	ldr	r3, [r3, #24]
    75d0:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	785a      	ldrb	r2, [r3, #1]
    75d6:	230c      	movs	r3, #12
    75d8:	18fb      	adds	r3, r7, r3
    75da:	2101      	movs	r1, #1
    75dc:	400a      	ands	r2, r1
    75de:	00d0      	lsls	r0, r2, #3
    75e0:	781a      	ldrb	r2, [r3, #0]
    75e2:	2108      	movs	r1, #8
    75e4:	438a      	bics	r2, r1
    75e6:	1c11      	adds	r1, r2, #0
    75e8:	1c02      	adds	r2, r0, #0
    75ea:	430a      	orrs	r2, r1
    75ec:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	789a      	ldrb	r2, [r3, #2]
    75f2:	230c      	movs	r3, #12
    75f4:	18fb      	adds	r3, r7, r3
    75f6:	2101      	movs	r1, #1
    75f8:	400a      	ands	r2, r1
    75fa:	0090      	lsls	r0, r2, #2
    75fc:	781a      	ldrb	r2, [r3, #0]
    75fe:	2104      	movs	r1, #4
    7600:	438a      	bics	r2, r1
    7602:	1c11      	adds	r1, r2, #0
    7604:	1c02      	adds	r2, r0, #0
    7606:	430a      	orrs	r2, r1
    7608:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    760a:	687b      	ldr	r3, [r7, #4]
    760c:	781b      	ldrb	r3, [r3, #0]
    760e:	1c1a      	adds	r2, r3, #0
    7610:	2307      	movs	r3, #7
    7612:	4013      	ands	r3, r2
    7614:	b2da      	uxtb	r2, r3
    7616:	230d      	movs	r3, #13
    7618:	18fb      	adds	r3, r7, r3
    761a:	2107      	movs	r1, #7
    761c:	400a      	ands	r2, r1
    761e:	0010      	movs	r0, r2
    7620:	781a      	ldrb	r2, [r3, #0]
    7622:	2107      	movs	r1, #7
    7624:	438a      	bics	r2, r1
    7626:	1c11      	adds	r1, r2, #0
    7628:	1c02      	adds	r2, r0, #0
    762a:	430a      	orrs	r2, r1
    762c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    762e:	687b      	ldr	r3, [r7, #4]
    7630:	791a      	ldrb	r2, [r3, #4]
    7632:	230c      	movs	r3, #12
    7634:	18fb      	adds	r3, r7, r3
    7636:	01d0      	lsls	r0, r2, #7
    7638:	781a      	ldrb	r2, [r3, #0]
    763a:	217f      	movs	r1, #127	; 0x7f
    763c:	400a      	ands	r2, r1
    763e:	1c11      	adds	r1, r2, #0
    7640:	1c02      	adds	r2, r0, #0
    7642:	430a      	orrs	r2, r1
    7644:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	78da      	ldrb	r2, [r3, #3]
    764a:	230c      	movs	r3, #12
    764c:	18fb      	adds	r3, r7, r3
    764e:	2101      	movs	r1, #1
    7650:	400a      	ands	r2, r1
    7652:	0190      	lsls	r0, r2, #6
    7654:	781a      	ldrb	r2, [r3, #0]
    7656:	2140      	movs	r1, #64	; 0x40
    7658:	438a      	bics	r2, r1
    765a:	1c11      	adds	r1, r2, #0
    765c:	1c02      	adds	r2, r0, #0
    765e:	430a      	orrs	r2, r1
    7660:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	795a      	ldrb	r2, [r3, #5]
    7666:	230d      	movs	r3, #13
    7668:	18fb      	adds	r3, r7, r3
    766a:	2101      	movs	r1, #1
    766c:	400a      	ands	r2, r1
    766e:	0110      	lsls	r0, r2, #4
    7670:	781a      	ldrb	r2, [r3, #0]
    7672:	2110      	movs	r1, #16
    7674:	438a      	bics	r2, r1
    7676:	1c11      	adds	r1, r2, #0
    7678:	1c02      	adds	r2, r0, #0
    767a:	430a      	orrs	r2, r1
    767c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    767e:	4b03      	ldr	r3, [pc, #12]	; (768c <system_clock_source_osc32k_set_config+0xc8>)
    7680:	68fa      	ldr	r2, [r7, #12]
    7682:	619a      	str	r2, [r3, #24]
}
    7684:	46c0      	nop			; (mov r8, r8)
    7686:	46bd      	mov	sp, r7
    7688:	b004      	add	sp, #16
    768a:	bd80      	pop	{r7, pc}
    768c:	40000800 	.word	0x40000800

00007690 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    7690:	b580      	push	{r7, lr}
    7692:	b082      	sub	sp, #8
    7694:	af00      	add	r7, sp, #0
    7696:	0002      	movs	r2, r0
    7698:	1dfb      	adds	r3, r7, #7
    769a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    769c:	1dfb      	adds	r3, r7, #7
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	2b08      	cmp	r3, #8
    76a2:	d83b      	bhi.n	771c <system_clock_source_enable+0x8c>
    76a4:	009a      	lsls	r2, r3, #2
    76a6:	4b21      	ldr	r3, [pc, #132]	; (772c <system_clock_source_enable+0x9c>)
    76a8:	18d3      	adds	r3, r2, r3
    76aa:	681b      	ldr	r3, [r3, #0]
    76ac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    76ae:	4b20      	ldr	r3, [pc, #128]	; (7730 <system_clock_source_enable+0xa0>)
    76b0:	4a1f      	ldr	r2, [pc, #124]	; (7730 <system_clock_source_enable+0xa0>)
    76b2:	6a12      	ldr	r2, [r2, #32]
    76b4:	2102      	movs	r1, #2
    76b6:	430a      	orrs	r2, r1
    76b8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    76ba:	2300      	movs	r3, #0
    76bc:	e031      	b.n	7722 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    76be:	4b1c      	ldr	r3, [pc, #112]	; (7730 <system_clock_source_enable+0xa0>)
    76c0:	4a1b      	ldr	r2, [pc, #108]	; (7730 <system_clock_source_enable+0xa0>)
    76c2:	6992      	ldr	r2, [r2, #24]
    76c4:	2102      	movs	r1, #2
    76c6:	430a      	orrs	r2, r1
    76c8:	619a      	str	r2, [r3, #24]
		break;
    76ca:	e029      	b.n	7720 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    76cc:	4a18      	ldr	r2, [pc, #96]	; (7730 <system_clock_source_enable+0xa0>)
    76ce:	4b18      	ldr	r3, [pc, #96]	; (7730 <system_clock_source_enable+0xa0>)
    76d0:	8a1b      	ldrh	r3, [r3, #16]
    76d2:	b29b      	uxth	r3, r3
    76d4:	2102      	movs	r1, #2
    76d6:	430b      	orrs	r3, r1
    76d8:	b29b      	uxth	r3, r3
    76da:	8213      	strh	r3, [r2, #16]
		break;
    76dc:	e020      	b.n	7720 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    76de:	4a14      	ldr	r2, [pc, #80]	; (7730 <system_clock_source_enable+0xa0>)
    76e0:	4b13      	ldr	r3, [pc, #76]	; (7730 <system_clock_source_enable+0xa0>)
    76e2:	8a9b      	ldrh	r3, [r3, #20]
    76e4:	b29b      	uxth	r3, r3
    76e6:	2102      	movs	r1, #2
    76e8:	430b      	orrs	r3, r1
    76ea:	b29b      	uxth	r3, r3
    76ec:	8293      	strh	r3, [r2, #20]
		break;
    76ee:	e017      	b.n	7720 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    76f0:	4b10      	ldr	r3, [pc, #64]	; (7734 <system_clock_source_enable+0xa4>)
    76f2:	681b      	ldr	r3, [r3, #0]
    76f4:	2202      	movs	r2, #2
    76f6:	431a      	orrs	r2, r3
    76f8:	4b0e      	ldr	r3, [pc, #56]	; (7734 <system_clock_source_enable+0xa4>)
    76fa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    76fc:	4b0e      	ldr	r3, [pc, #56]	; (7738 <system_clock_source_enable+0xa8>)
    76fe:	4798      	blx	r3
		break;
    7700:	e00e      	b.n	7720 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    7702:	4a0b      	ldr	r2, [pc, #44]	; (7730 <system_clock_source_enable+0xa0>)
    7704:	490a      	ldr	r1, [pc, #40]	; (7730 <system_clock_source_enable+0xa0>)
    7706:	2344      	movs	r3, #68	; 0x44
    7708:	5ccb      	ldrb	r3, [r1, r3]
    770a:	b2db      	uxtb	r3, r3
    770c:	2102      	movs	r1, #2
    770e:	430b      	orrs	r3, r1
    7710:	b2d9      	uxtb	r1, r3
    7712:	2344      	movs	r3, #68	; 0x44
    7714:	54d1      	strb	r1, [r2, r3]
		break;
    7716:	e003      	b.n	7720 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    7718:	2300      	movs	r3, #0
    771a:	e002      	b.n	7722 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    771c:	2317      	movs	r3, #23
    771e:	e000      	b.n	7722 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    7720:	2300      	movs	r3, #0
}
    7722:	0018      	movs	r0, r3
    7724:	46bd      	mov	sp, r7
    7726:	b002      	add	sp, #8
    7728:	bd80      	pop	{r7, pc}
    772a:	46c0      	nop			; (mov r8, r8)
    772c:	000173f8 	.word	0x000173f8
    7730:	40000800 	.word	0x40000800
    7734:	20000200 	.word	0x20000200
    7738:	0000744d 	.word	0x0000744d

0000773c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    773c:	b580      	push	{r7, lr}
    773e:	b082      	sub	sp, #8
    7740:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    7742:	003b      	movs	r3, r7
    7744:	2201      	movs	r2, #1
    7746:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7748:	2300      	movs	r3, #0
    774a:	607b      	str	r3, [r7, #4]
    774c:	e009      	b.n	7762 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    774e:	687b      	ldr	r3, [r7, #4]
    7750:	b2db      	uxtb	r3, r3
    7752:	003a      	movs	r2, r7
    7754:	0011      	movs	r1, r2
    7756:	0018      	movs	r0, r3
    7758:	4b05      	ldr	r3, [pc, #20]	; (7770 <_switch_peripheral_gclk+0x34>)
    775a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    775c:	687b      	ldr	r3, [r7, #4]
    775e:	3301      	adds	r3, #1
    7760:	607b      	str	r3, [r7, #4]
    7762:	687b      	ldr	r3, [r7, #4]
    7764:	2b24      	cmp	r3, #36	; 0x24
    7766:	d9f2      	bls.n	774e <_switch_peripheral_gclk+0x12>
	}
}
    7768:	46c0      	nop			; (mov r8, r8)
    776a:	46bd      	mov	sp, r7
    776c:	b002      	add	sp, #8
    776e:	bd80      	pop	{r7, pc}
    7770:	00007c25 	.word	0x00007c25

00007774 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7774:	b580      	push	{r7, lr}
    7776:	b0a2      	sub	sp, #136	; 0x88
    7778:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    777a:	4b4f      	ldr	r3, [pc, #316]	; (78b8 <system_clock_init+0x144>)
    777c:	22c2      	movs	r2, #194	; 0xc2
    777e:	00d2      	lsls	r2, r2, #3
    7780:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    7782:	2000      	movs	r0, #0
    7784:	4b4d      	ldr	r3, [pc, #308]	; (78bc <system_clock_init+0x148>)
    7786:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    7788:	4b4d      	ldr	r3, [pc, #308]	; (78c0 <system_clock_init+0x14c>)
    778a:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    778c:	4a4a      	ldr	r2, [pc, #296]	; (78b8 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    778e:	4b4d      	ldr	r3, [pc, #308]	; (78c4 <system_clock_init+0x150>)
    7790:	681b      	ldr	r3, [r3, #0]
    7792:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    7794:	b2db      	uxtb	r3, r3
    7796:	1c19      	adds	r1, r3, #0
    7798:	237f      	movs	r3, #127	; 0x7f
    779a:	400b      	ands	r3, r1
    779c:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    779e:	6993      	ldr	r3, [r2, #24]
    77a0:	207f      	movs	r0, #127	; 0x7f
    77a2:	4001      	ands	r1, r0
    77a4:	0409      	lsls	r1, r1, #16
    77a6:	4848      	ldr	r0, [pc, #288]	; (78c8 <system_clock_init+0x154>)
    77a8:	4003      	ands	r3, r0
    77aa:	430b      	orrs	r3, r1
    77ac:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    77ae:	2380      	movs	r3, #128	; 0x80
    77b0:	18fb      	adds	r3, r7, r3
    77b2:	0018      	movs	r0, r3
    77b4:	4b45      	ldr	r3, [pc, #276]	; (78cc <system_clock_init+0x158>)
    77b6:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    77b8:	2380      	movs	r3, #128	; 0x80
    77ba:	18fb      	adds	r3, r7, r3
    77bc:	2207      	movs	r2, #7
    77be:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    77c0:	2380      	movs	r3, #128	; 0x80
    77c2:	18fb      	adds	r3, r7, r3
    77c4:	2201      	movs	r2, #1
    77c6:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    77c8:	2380      	movs	r3, #128	; 0x80
    77ca:	18fb      	adds	r3, r7, r3
    77cc:	2201      	movs	r2, #1
    77ce:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    77d0:	2380      	movs	r3, #128	; 0x80
    77d2:	18fb      	adds	r3, r7, r3
    77d4:	2201      	movs	r2, #1
    77d6:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    77d8:	2380      	movs	r3, #128	; 0x80
    77da:	18fb      	adds	r3, r7, r3
    77dc:	2200      	movs	r2, #0
    77de:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    77e0:	2380      	movs	r3, #128	; 0x80
    77e2:	18fb      	adds	r3, r7, r3
    77e4:	0018      	movs	r0, r3
    77e6:	4b3a      	ldr	r3, [pc, #232]	; (78d0 <system_clock_init+0x15c>)
    77e8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    77ea:	2004      	movs	r0, #4
    77ec:	4b39      	ldr	r3, [pc, #228]	; (78d4 <system_clock_init+0x160>)
    77ee:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    77f0:	237c      	movs	r3, #124	; 0x7c
    77f2:	18fb      	adds	r3, r7, r3
    77f4:	0018      	movs	r0, r3
    77f6:	4b38      	ldr	r3, [pc, #224]	; (78d8 <system_clock_init+0x164>)
    77f8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    77fa:	237c      	movs	r3, #124	; 0x7c
    77fc:	18fb      	adds	r3, r7, r3
    77fe:	2200      	movs	r2, #0
    7800:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    7802:	237c      	movs	r3, #124	; 0x7c
    7804:	18fb      	adds	r3, r7, r3
    7806:	2201      	movs	r2, #1
    7808:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    780a:	237c      	movs	r3, #124	; 0x7c
    780c:	18fb      	adds	r3, r7, r3
    780e:	2200      	movs	r2, #0
    7810:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    7812:	237c      	movs	r3, #124	; 0x7c
    7814:	18fb      	adds	r3, r7, r3
    7816:	0018      	movs	r0, r3
    7818:	4b30      	ldr	r3, [pc, #192]	; (78dc <system_clock_init+0x168>)
    781a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    781c:	2006      	movs	r0, #6
    781e:	4b2d      	ldr	r3, [pc, #180]	; (78d4 <system_clock_init+0x160>)
    7820:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7822:	4b2f      	ldr	r3, [pc, #188]	; (78e0 <system_clock_init+0x16c>)
    7824:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7826:	2358      	movs	r3, #88	; 0x58
    7828:	18fb      	adds	r3, r7, r3
    782a:	0018      	movs	r0, r3
    782c:	4b2d      	ldr	r3, [pc, #180]	; (78e4 <system_clock_init+0x170>)
    782e:	4798      	blx	r3
    7830:	2358      	movs	r3, #88	; 0x58
    7832:	18fb      	adds	r3, r7, r3
    7834:	2204      	movs	r2, #4
    7836:	701a      	strb	r2, [r3, #0]
    7838:	2358      	movs	r3, #88	; 0x58
    783a:	18fb      	adds	r3, r7, r3
    783c:	2220      	movs	r2, #32
    783e:	605a      	str	r2, [r3, #4]
    7840:	2358      	movs	r3, #88	; 0x58
    7842:	18fb      	adds	r3, r7, r3
    7844:	2200      	movs	r2, #0
    7846:	721a      	strb	r2, [r3, #8]
    7848:	2358      	movs	r3, #88	; 0x58
    784a:	18fb      	adds	r3, r7, r3
    784c:	2200      	movs	r2, #0
    784e:	725a      	strb	r2, [r3, #9]
    7850:	2358      	movs	r3, #88	; 0x58
    7852:	18fb      	adds	r3, r7, r3
    7854:	0019      	movs	r1, r3
    7856:	2002      	movs	r0, #2
    7858:	4b23      	ldr	r3, [pc, #140]	; (78e8 <system_clock_init+0x174>)
    785a:	4798      	blx	r3
    785c:	2002      	movs	r0, #2
    785e:	4b23      	ldr	r3, [pc, #140]	; (78ec <system_clock_init+0x178>)
    7860:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    7862:	2000      	movs	r0, #0
    7864:	4b22      	ldr	r3, [pc, #136]	; (78f0 <system_clock_init+0x17c>)
    7866:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    7868:	2100      	movs	r1, #0
    786a:	2000      	movs	r0, #0
    786c:	4b21      	ldr	r3, [pc, #132]	; (78f4 <system_clock_init+0x180>)
    786e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    7870:	2100      	movs	r1, #0
    7872:	2001      	movs	r0, #1
    7874:	4b1f      	ldr	r3, [pc, #124]	; (78f4 <system_clock_init+0x180>)
    7876:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    7878:	2100      	movs	r1, #0
    787a:	2002      	movs	r0, #2
    787c:	4b1d      	ldr	r3, [pc, #116]	; (78f4 <system_clock_init+0x180>)
    787e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7880:	1d3b      	adds	r3, r7, #4
    7882:	0018      	movs	r0, r3
    7884:	4b17      	ldr	r3, [pc, #92]	; (78e4 <system_clock_init+0x170>)
    7886:	4798      	blx	r3
    7888:	1d3b      	adds	r3, r7, #4
    788a:	2206      	movs	r2, #6
    788c:	701a      	strb	r2, [r3, #0]
    788e:	1d3b      	adds	r3, r7, #4
    7890:	2201      	movs	r2, #1
    7892:	605a      	str	r2, [r3, #4]
    7894:	1d3b      	adds	r3, r7, #4
    7896:	2200      	movs	r2, #0
    7898:	721a      	strb	r2, [r3, #8]
    789a:	1d3b      	adds	r3, r7, #4
    789c:	2200      	movs	r2, #0
    789e:	725a      	strb	r2, [r3, #9]
    78a0:	1d3b      	adds	r3, r7, #4
    78a2:	0019      	movs	r1, r3
    78a4:	2000      	movs	r0, #0
    78a6:	4b10      	ldr	r3, [pc, #64]	; (78e8 <system_clock_init+0x174>)
    78a8:	4798      	blx	r3
    78aa:	2000      	movs	r0, #0
    78ac:	4b0f      	ldr	r3, [pc, #60]	; (78ec <system_clock_init+0x178>)
    78ae:	4798      	blx	r3
#endif
}
    78b0:	46c0      	nop			; (mov r8, r8)
    78b2:	46bd      	mov	sp, r7
    78b4:	b022      	add	sp, #136	; 0x88
    78b6:	bd80      	pop	{r7, pc}
    78b8:	40000800 	.word	0x40000800
    78bc:	000073fd 	.word	0x000073fd
    78c0:	0000773d 	.word	0x0000773d
    78c4:	00806024 	.word	0x00806024
    78c8:	ff80ffff 	.word	0xff80ffff
    78cc:	00007333 	.word	0x00007333
    78d0:	000075c5 	.word	0x000075c5
    78d4:	00007691 	.word	0x00007691
    78d8:	00007367 	.word	0x00007367
    78dc:	0000754d 	.word	0x0000754d
    78e0:	0000799d 	.word	0x0000799d
    78e4:	00007305 	.word	0x00007305
    78e8:	000079cd 	.word	0x000079cd
    78ec:	00007af1 	.word	0x00007af1
    78f0:	00007389 	.word	0x00007389
    78f4:	000073a9 	.word	0x000073a9

000078f8 <system_apb_clock_set_mask>:
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b082      	sub	sp, #8
    78fc:	af00      	add	r7, sp, #0
    78fe:	0002      	movs	r2, r0
    7900:	6039      	str	r1, [r7, #0]
    7902:	1dfb      	adds	r3, r7, #7
    7904:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7906:	1dfb      	adds	r3, r7, #7
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	2b01      	cmp	r3, #1
    790c:	d00a      	beq.n	7924 <system_apb_clock_set_mask+0x2c>
    790e:	2b02      	cmp	r3, #2
    7910:	d00f      	beq.n	7932 <system_apb_clock_set_mask+0x3a>
    7912:	2b00      	cmp	r3, #0
    7914:	d114      	bne.n	7940 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7916:	4b0e      	ldr	r3, [pc, #56]	; (7950 <system_apb_clock_set_mask+0x58>)
    7918:	4a0d      	ldr	r2, [pc, #52]	; (7950 <system_apb_clock_set_mask+0x58>)
    791a:	6991      	ldr	r1, [r2, #24]
    791c:	683a      	ldr	r2, [r7, #0]
    791e:	430a      	orrs	r2, r1
    7920:	619a      	str	r2, [r3, #24]
			break;
    7922:	e00f      	b.n	7944 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7924:	4b0a      	ldr	r3, [pc, #40]	; (7950 <system_apb_clock_set_mask+0x58>)
    7926:	4a0a      	ldr	r2, [pc, #40]	; (7950 <system_apb_clock_set_mask+0x58>)
    7928:	69d1      	ldr	r1, [r2, #28]
    792a:	683a      	ldr	r2, [r7, #0]
    792c:	430a      	orrs	r2, r1
    792e:	61da      	str	r2, [r3, #28]
			break;
    7930:	e008      	b.n	7944 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7932:	4b07      	ldr	r3, [pc, #28]	; (7950 <system_apb_clock_set_mask+0x58>)
    7934:	4a06      	ldr	r2, [pc, #24]	; (7950 <system_apb_clock_set_mask+0x58>)
    7936:	6a11      	ldr	r1, [r2, #32]
    7938:	683a      	ldr	r2, [r7, #0]
    793a:	430a      	orrs	r2, r1
    793c:	621a      	str	r2, [r3, #32]
			break;
    793e:	e001      	b.n	7944 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7940:	2317      	movs	r3, #23
    7942:	e000      	b.n	7946 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7944:	2300      	movs	r3, #0
}
    7946:	0018      	movs	r0, r3
    7948:	46bd      	mov	sp, r7
    794a:	b002      	add	sp, #8
    794c:	bd80      	pop	{r7, pc}
    794e:	46c0      	nop			; (mov r8, r8)
    7950:	40000400 	.word	0x40000400

00007954 <system_interrupt_enter_critical_section>:
{
    7954:	b580      	push	{r7, lr}
    7956:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7958:	4b02      	ldr	r3, [pc, #8]	; (7964 <system_interrupt_enter_critical_section+0x10>)
    795a:	4798      	blx	r3
}
    795c:	46c0      	nop			; (mov r8, r8)
    795e:	46bd      	mov	sp, r7
    7960:	bd80      	pop	{r7, pc}
    7962:	46c0      	nop			; (mov r8, r8)
    7964:	00007271 	.word	0x00007271

00007968 <system_interrupt_leave_critical_section>:
{
    7968:	b580      	push	{r7, lr}
    796a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    796c:	4b02      	ldr	r3, [pc, #8]	; (7978 <system_interrupt_leave_critical_section+0x10>)
    796e:	4798      	blx	r3
}
    7970:	46c0      	nop			; (mov r8, r8)
    7972:	46bd      	mov	sp, r7
    7974:	bd80      	pop	{r7, pc}
    7976:	46c0      	nop			; (mov r8, r8)
    7978:	000072c5 	.word	0x000072c5

0000797c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    797c:	b580      	push	{r7, lr}
    797e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7980:	4b05      	ldr	r3, [pc, #20]	; (7998 <system_gclk_is_syncing+0x1c>)
    7982:	785b      	ldrb	r3, [r3, #1]
    7984:	b2db      	uxtb	r3, r3
    7986:	b25b      	sxtb	r3, r3
    7988:	2b00      	cmp	r3, #0
    798a:	da01      	bge.n	7990 <system_gclk_is_syncing+0x14>
		return true;
    798c:	2301      	movs	r3, #1
    798e:	e000      	b.n	7992 <system_gclk_is_syncing+0x16>
	}

	return false;
    7990:	2300      	movs	r3, #0
}
    7992:	0018      	movs	r0, r3
    7994:	46bd      	mov	sp, r7
    7996:	bd80      	pop	{r7, pc}
    7998:	40000c00 	.word	0x40000c00

0000799c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    799c:	b580      	push	{r7, lr}
    799e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    79a0:	2108      	movs	r1, #8
    79a2:	2000      	movs	r0, #0
    79a4:	4b07      	ldr	r3, [pc, #28]	; (79c4 <system_gclk_init+0x28>)
    79a6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    79a8:	4b07      	ldr	r3, [pc, #28]	; (79c8 <system_gclk_init+0x2c>)
    79aa:	2201      	movs	r2, #1
    79ac:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	4b05      	ldr	r3, [pc, #20]	; (79c8 <system_gclk_init+0x2c>)
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	b2db      	uxtb	r3, r3
    79b6:	001a      	movs	r2, r3
    79b8:	2301      	movs	r3, #1
    79ba:	4013      	ands	r3, r2
    79bc:	d1f8      	bne.n	79b0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    79be:	46c0      	nop			; (mov r8, r8)
    79c0:	46bd      	mov	sp, r7
    79c2:	bd80      	pop	{r7, pc}
    79c4:	000078f9 	.word	0x000078f9
    79c8:	40000c00 	.word	0x40000c00

000079cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    79cc:	b580      	push	{r7, lr}
    79ce:	b086      	sub	sp, #24
    79d0:	af00      	add	r7, sp, #0
    79d2:	0002      	movs	r2, r0
    79d4:	6039      	str	r1, [r7, #0]
    79d6:	1dfb      	adds	r3, r7, #7
    79d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    79da:	1dfb      	adds	r3, r7, #7
    79dc:	781b      	ldrb	r3, [r3, #0]
    79de:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    79e0:	1dfb      	adds	r3, r7, #7
    79e2:	781b      	ldrb	r3, [r3, #0]
    79e4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    79e6:	683b      	ldr	r3, [r7, #0]
    79e8:	781b      	ldrb	r3, [r3, #0]
    79ea:	021b      	lsls	r3, r3, #8
    79ec:	001a      	movs	r2, r3
    79ee:	697b      	ldr	r3, [r7, #20]
    79f0:	4313      	orrs	r3, r2
    79f2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    79f4:	683b      	ldr	r3, [r7, #0]
    79f6:	785b      	ldrb	r3, [r3, #1]
    79f8:	2b00      	cmp	r3, #0
    79fa:	d004      	beq.n	7a06 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    79fc:	697b      	ldr	r3, [r7, #20]
    79fe:	2280      	movs	r2, #128	; 0x80
    7a00:	02d2      	lsls	r2, r2, #11
    7a02:	4313      	orrs	r3, r2
    7a04:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7a06:	683b      	ldr	r3, [r7, #0]
    7a08:	7a5b      	ldrb	r3, [r3, #9]
    7a0a:	2b00      	cmp	r3, #0
    7a0c:	d004      	beq.n	7a18 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7a0e:	697b      	ldr	r3, [r7, #20]
    7a10:	2280      	movs	r2, #128	; 0x80
    7a12:	0312      	lsls	r2, r2, #12
    7a14:	4313      	orrs	r3, r2
    7a16:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7a18:	683b      	ldr	r3, [r7, #0]
    7a1a:	685b      	ldr	r3, [r3, #4]
    7a1c:	2b01      	cmp	r3, #1
    7a1e:	d92c      	bls.n	7a7a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7a20:	683b      	ldr	r3, [r7, #0]
    7a22:	685a      	ldr	r2, [r3, #4]
    7a24:	683b      	ldr	r3, [r7, #0]
    7a26:	685b      	ldr	r3, [r3, #4]
    7a28:	3b01      	subs	r3, #1
    7a2a:	4013      	ands	r3, r2
    7a2c:	d11a      	bne.n	7a64 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    7a2e:	2300      	movs	r3, #0
    7a30:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7a32:	2302      	movs	r3, #2
    7a34:	60bb      	str	r3, [r7, #8]
    7a36:	e005      	b.n	7a44 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    7a38:	68fb      	ldr	r3, [r7, #12]
    7a3a:	3301      	adds	r3, #1
    7a3c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    7a3e:	68bb      	ldr	r3, [r7, #8]
    7a40:	005b      	lsls	r3, r3, #1
    7a42:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    7a44:	683b      	ldr	r3, [r7, #0]
    7a46:	685a      	ldr	r2, [r3, #4]
    7a48:	68bb      	ldr	r3, [r7, #8]
    7a4a:	429a      	cmp	r2, r3
    7a4c:	d8f4      	bhi.n	7a38 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    7a4e:	68fb      	ldr	r3, [r7, #12]
    7a50:	021b      	lsls	r3, r3, #8
    7a52:	693a      	ldr	r2, [r7, #16]
    7a54:	4313      	orrs	r3, r2
    7a56:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7a58:	697b      	ldr	r3, [r7, #20]
    7a5a:	2280      	movs	r2, #128	; 0x80
    7a5c:	0352      	lsls	r2, r2, #13
    7a5e:	4313      	orrs	r3, r2
    7a60:	617b      	str	r3, [r7, #20]
    7a62:	e00a      	b.n	7a7a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    7a64:	683b      	ldr	r3, [r7, #0]
    7a66:	685b      	ldr	r3, [r3, #4]
    7a68:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    7a6a:	693a      	ldr	r2, [r7, #16]
    7a6c:	4313      	orrs	r3, r2
    7a6e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7a70:	697b      	ldr	r3, [r7, #20]
    7a72:	2280      	movs	r2, #128	; 0x80
    7a74:	0292      	lsls	r2, r2, #10
    7a76:	4313      	orrs	r3, r2
    7a78:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7a7a:	683b      	ldr	r3, [r7, #0]
    7a7c:	7a1b      	ldrb	r3, [r3, #8]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d004      	beq.n	7a8c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7a82:	697b      	ldr	r3, [r7, #20]
    7a84:	2280      	movs	r2, #128	; 0x80
    7a86:	0392      	lsls	r2, r2, #14
    7a88:	4313      	orrs	r3, r2
    7a8a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    7a8c:	46c0      	nop			; (mov r8, r8)
    7a8e:	4b13      	ldr	r3, [pc, #76]	; (7adc <system_gclk_gen_set_config+0x110>)
    7a90:	4798      	blx	r3
    7a92:	1e03      	subs	r3, r0, #0
    7a94:	d1fb      	bne.n	7a8e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7a96:	4b12      	ldr	r3, [pc, #72]	; (7ae0 <system_gclk_gen_set_config+0x114>)
    7a98:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7a9a:	4a12      	ldr	r2, [pc, #72]	; (7ae4 <system_gclk_gen_set_config+0x118>)
    7a9c:	1dfb      	adds	r3, r7, #7
    7a9e:	781b      	ldrb	r3, [r3, #0]
    7aa0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	4b0d      	ldr	r3, [pc, #52]	; (7adc <system_gclk_gen_set_config+0x110>)
    7aa6:	4798      	blx	r3
    7aa8:	1e03      	subs	r3, r0, #0
    7aaa:	d1fb      	bne.n	7aa4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    7aac:	4b0e      	ldr	r3, [pc, #56]	; (7ae8 <system_gclk_gen_set_config+0x11c>)
    7aae:	693a      	ldr	r2, [r7, #16]
    7ab0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	4b09      	ldr	r3, [pc, #36]	; (7adc <system_gclk_gen_set_config+0x110>)
    7ab6:	4798      	blx	r3
    7ab8:	1e03      	subs	r3, r0, #0
    7aba:	d1fb      	bne.n	7ab4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    7abc:	4b0a      	ldr	r3, [pc, #40]	; (7ae8 <system_gclk_gen_set_config+0x11c>)
    7abe:	4a0a      	ldr	r2, [pc, #40]	; (7ae8 <system_gclk_gen_set_config+0x11c>)
    7ac0:	6851      	ldr	r1, [r2, #4]
    7ac2:	2280      	movs	r2, #128	; 0x80
    7ac4:	0252      	lsls	r2, r2, #9
    7ac6:	4011      	ands	r1, r2
    7ac8:	697a      	ldr	r2, [r7, #20]
    7aca:	430a      	orrs	r2, r1
    7acc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7ace:	4b07      	ldr	r3, [pc, #28]	; (7aec <system_gclk_gen_set_config+0x120>)
    7ad0:	4798      	blx	r3
}
    7ad2:	46c0      	nop			; (mov r8, r8)
    7ad4:	46bd      	mov	sp, r7
    7ad6:	b006      	add	sp, #24
    7ad8:	bd80      	pop	{r7, pc}
    7ada:	46c0      	nop			; (mov r8, r8)
    7adc:	0000797d 	.word	0x0000797d
    7ae0:	00007955 	.word	0x00007955
    7ae4:	40000c08 	.word	0x40000c08
    7ae8:	40000c00 	.word	0x40000c00
    7aec:	00007969 	.word	0x00007969

00007af0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7af0:	b580      	push	{r7, lr}
    7af2:	b082      	sub	sp, #8
    7af4:	af00      	add	r7, sp, #0
    7af6:	0002      	movs	r2, r0
    7af8:	1dfb      	adds	r3, r7, #7
    7afa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7afc:	46c0      	nop			; (mov r8, r8)
    7afe:	4b0e      	ldr	r3, [pc, #56]	; (7b38 <system_gclk_gen_enable+0x48>)
    7b00:	4798      	blx	r3
    7b02:	1e03      	subs	r3, r0, #0
    7b04:	d1fb      	bne.n	7afe <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7b06:	4b0d      	ldr	r3, [pc, #52]	; (7b3c <system_gclk_gen_enable+0x4c>)
    7b08:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7b0a:	4a0d      	ldr	r2, [pc, #52]	; (7b40 <system_gclk_gen_enable+0x50>)
    7b0c:	1dfb      	adds	r3, r7, #7
    7b0e:	781b      	ldrb	r3, [r3, #0]
    7b10:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7b12:	46c0      	nop			; (mov r8, r8)
    7b14:	4b08      	ldr	r3, [pc, #32]	; (7b38 <system_gclk_gen_enable+0x48>)
    7b16:	4798      	blx	r3
    7b18:	1e03      	subs	r3, r0, #0
    7b1a:	d1fb      	bne.n	7b14 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7b1c:	4b09      	ldr	r3, [pc, #36]	; (7b44 <system_gclk_gen_enable+0x54>)
    7b1e:	4a09      	ldr	r2, [pc, #36]	; (7b44 <system_gclk_gen_enable+0x54>)
    7b20:	6852      	ldr	r2, [r2, #4]
    7b22:	2180      	movs	r1, #128	; 0x80
    7b24:	0249      	lsls	r1, r1, #9
    7b26:	430a      	orrs	r2, r1
    7b28:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7b2a:	4b07      	ldr	r3, [pc, #28]	; (7b48 <system_gclk_gen_enable+0x58>)
    7b2c:	4798      	blx	r3
}
    7b2e:	46c0      	nop			; (mov r8, r8)
    7b30:	46bd      	mov	sp, r7
    7b32:	b002      	add	sp, #8
    7b34:	bd80      	pop	{r7, pc}
    7b36:	46c0      	nop			; (mov r8, r8)
    7b38:	0000797d 	.word	0x0000797d
    7b3c:	00007955 	.word	0x00007955
    7b40:	40000c04 	.word	0x40000c04
    7b44:	40000c00 	.word	0x40000c00
    7b48:	00007969 	.word	0x00007969

00007b4c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7b4c:	b580      	push	{r7, lr}
    7b4e:	b086      	sub	sp, #24
    7b50:	af00      	add	r7, sp, #0
    7b52:	0002      	movs	r2, r0
    7b54:	1dfb      	adds	r3, r7, #7
    7b56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7b58:	46c0      	nop			; (mov r8, r8)
    7b5a:	4b2a      	ldr	r3, [pc, #168]	; (7c04 <system_gclk_gen_get_hz+0xb8>)
    7b5c:	4798      	blx	r3
    7b5e:	1e03      	subs	r3, r0, #0
    7b60:	d1fb      	bne.n	7b5a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7b62:	4b29      	ldr	r3, [pc, #164]	; (7c08 <system_gclk_gen_get_hz+0xbc>)
    7b64:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7b66:	4a29      	ldr	r2, [pc, #164]	; (7c0c <system_gclk_gen_get_hz+0xc0>)
    7b68:	1dfb      	adds	r3, r7, #7
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7b6e:	46c0      	nop			; (mov r8, r8)
    7b70:	4b24      	ldr	r3, [pc, #144]	; (7c04 <system_gclk_gen_get_hz+0xb8>)
    7b72:	4798      	blx	r3
    7b74:	1e03      	subs	r3, r0, #0
    7b76:	d1fb      	bne.n	7b70 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7b78:	4b25      	ldr	r3, [pc, #148]	; (7c10 <system_gclk_gen_get_hz+0xc4>)
    7b7a:	685b      	ldr	r3, [r3, #4]
    7b7c:	04db      	lsls	r3, r3, #19
    7b7e:	0edb      	lsrs	r3, r3, #27
    7b80:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7b82:	0018      	movs	r0, r3
    7b84:	4b23      	ldr	r3, [pc, #140]	; (7c14 <system_gclk_gen_get_hz+0xc8>)
    7b86:	4798      	blx	r3
    7b88:	0003      	movs	r3, r0
    7b8a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7b8c:	4a1f      	ldr	r2, [pc, #124]	; (7c0c <system_gclk_gen_get_hz+0xc0>)
    7b8e:	1dfb      	adds	r3, r7, #7
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7b94:	4b1e      	ldr	r3, [pc, #120]	; (7c10 <system_gclk_gen_get_hz+0xc4>)
    7b96:	685b      	ldr	r3, [r3, #4]
    7b98:	02db      	lsls	r3, r3, #11
    7b9a:	0fdb      	lsrs	r3, r3, #31
    7b9c:	b2da      	uxtb	r2, r3
    7b9e:	2313      	movs	r3, #19
    7ba0:	18fb      	adds	r3, r7, r3
    7ba2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7ba4:	4a1c      	ldr	r2, [pc, #112]	; (7c18 <system_gclk_gen_get_hz+0xcc>)
    7ba6:	1dfb      	adds	r3, r7, #7
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7bac:	46c0      	nop			; (mov r8, r8)
    7bae:	4b15      	ldr	r3, [pc, #84]	; (7c04 <system_gclk_gen_get_hz+0xb8>)
    7bb0:	4798      	blx	r3
    7bb2:	1e03      	subs	r3, r0, #0
    7bb4:	d1fb      	bne.n	7bae <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7bb6:	4b16      	ldr	r3, [pc, #88]	; (7c10 <system_gclk_gen_get_hz+0xc4>)
    7bb8:	689b      	ldr	r3, [r3, #8]
    7bba:	021b      	lsls	r3, r3, #8
    7bbc:	0c1b      	lsrs	r3, r3, #16
    7bbe:	b29b      	uxth	r3, r3
    7bc0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    7bc2:	4b16      	ldr	r3, [pc, #88]	; (7c1c <system_gclk_gen_get_hz+0xd0>)
    7bc4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7bc6:	2313      	movs	r3, #19
    7bc8:	18fb      	adds	r3, r7, r3
    7bca:	781b      	ldrb	r3, [r3, #0]
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d109      	bne.n	7be4 <system_gclk_gen_get_hz+0x98>
    7bd0:	68fb      	ldr	r3, [r7, #12]
    7bd2:	2b01      	cmp	r3, #1
    7bd4:	d906      	bls.n	7be4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    7bd6:	4b12      	ldr	r3, [pc, #72]	; (7c20 <system_gclk_gen_get_hz+0xd4>)
    7bd8:	68f9      	ldr	r1, [r7, #12]
    7bda:	6978      	ldr	r0, [r7, #20]
    7bdc:	4798      	blx	r3
    7bde:	0003      	movs	r3, r0
    7be0:	617b      	str	r3, [r7, #20]
    7be2:	e00a      	b.n	7bfa <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    7be4:	2313      	movs	r3, #19
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	781b      	ldrb	r3, [r3, #0]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d005      	beq.n	7bfa <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    7bee:	68fb      	ldr	r3, [r7, #12]
    7bf0:	3301      	adds	r3, #1
    7bf2:	697a      	ldr	r2, [r7, #20]
    7bf4:	40da      	lsrs	r2, r3
    7bf6:	0013      	movs	r3, r2
    7bf8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    7bfa:	697b      	ldr	r3, [r7, #20]
}
    7bfc:	0018      	movs	r0, r3
    7bfe:	46bd      	mov	sp, r7
    7c00:	b006      	add	sp, #24
    7c02:	bd80      	pop	{r7, pc}
    7c04:	0000797d 	.word	0x0000797d
    7c08:	00007955 	.word	0x00007955
    7c0c:	40000c04 	.word	0x40000c04
    7c10:	40000c00 	.word	0x40000c00
    7c14:	00007491 	.word	0x00007491
    7c18:	40000c08 	.word	0x40000c08
    7c1c:	00007969 	.word	0x00007969
    7c20:	00014101 	.word	0x00014101

00007c24 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    7c24:	b580      	push	{r7, lr}
    7c26:	b084      	sub	sp, #16
    7c28:	af00      	add	r7, sp, #0
    7c2a:	0002      	movs	r2, r0
    7c2c:	6039      	str	r1, [r7, #0]
    7c2e:	1dfb      	adds	r3, r7, #7
    7c30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    7c32:	1dfb      	adds	r3, r7, #7
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7c38:	683b      	ldr	r3, [r7, #0]
    7c3a:	781b      	ldrb	r3, [r3, #0]
    7c3c:	021b      	lsls	r3, r3, #8
    7c3e:	001a      	movs	r2, r3
    7c40:	68fb      	ldr	r3, [r7, #12]
    7c42:	4313      	orrs	r3, r2
    7c44:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    7c46:	1dfb      	adds	r3, r7, #7
    7c48:	781b      	ldrb	r3, [r3, #0]
    7c4a:	0018      	movs	r0, r3
    7c4c:	4b04      	ldr	r3, [pc, #16]	; (7c60 <system_gclk_chan_set_config+0x3c>)
    7c4e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    7c50:	4b04      	ldr	r3, [pc, #16]	; (7c64 <system_gclk_chan_set_config+0x40>)
    7c52:	68fa      	ldr	r2, [r7, #12]
    7c54:	b292      	uxth	r2, r2
    7c56:	805a      	strh	r2, [r3, #2]
}
    7c58:	46c0      	nop			; (mov r8, r8)
    7c5a:	46bd      	mov	sp, r7
    7c5c:	b004      	add	sp, #16
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	00007cb1 	.word	0x00007cb1
    7c64:	40000c00 	.word	0x40000c00

00007c68 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	b082      	sub	sp, #8
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	0002      	movs	r2, r0
    7c70:	1dfb      	adds	r3, r7, #7
    7c72:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7c74:	4b0a      	ldr	r3, [pc, #40]	; (7ca0 <system_gclk_chan_enable+0x38>)
    7c76:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7c78:	4a0a      	ldr	r2, [pc, #40]	; (7ca4 <system_gclk_chan_enable+0x3c>)
    7c7a:	1dfb      	adds	r3, r7, #7
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7c80:	4909      	ldr	r1, [pc, #36]	; (7ca8 <system_gclk_chan_enable+0x40>)
    7c82:	4b09      	ldr	r3, [pc, #36]	; (7ca8 <system_gclk_chan_enable+0x40>)
    7c84:	885b      	ldrh	r3, [r3, #2]
    7c86:	b29b      	uxth	r3, r3
    7c88:	2280      	movs	r2, #128	; 0x80
    7c8a:	01d2      	lsls	r2, r2, #7
    7c8c:	4313      	orrs	r3, r2
    7c8e:	b29b      	uxth	r3, r3
    7c90:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    7c92:	4b06      	ldr	r3, [pc, #24]	; (7cac <system_gclk_chan_enable+0x44>)
    7c94:	4798      	blx	r3
}
    7c96:	46c0      	nop			; (mov r8, r8)
    7c98:	46bd      	mov	sp, r7
    7c9a:	b002      	add	sp, #8
    7c9c:	bd80      	pop	{r7, pc}
    7c9e:	46c0      	nop			; (mov r8, r8)
    7ca0:	00007955 	.word	0x00007955
    7ca4:	40000c02 	.word	0x40000c02
    7ca8:	40000c00 	.word	0x40000c00
    7cac:	00007969 	.word	0x00007969

00007cb0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b084      	sub	sp, #16
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	0002      	movs	r2, r0
    7cb8:	1dfb      	adds	r3, r7, #7
    7cba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7cbc:	4b1c      	ldr	r3, [pc, #112]	; (7d30 <system_gclk_chan_disable+0x80>)
    7cbe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7cc0:	4a1c      	ldr	r2, [pc, #112]	; (7d34 <system_gclk_chan_disable+0x84>)
    7cc2:	1dfb      	adds	r3, r7, #7
    7cc4:	781b      	ldrb	r3, [r3, #0]
    7cc6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7cc8:	4b1b      	ldr	r3, [pc, #108]	; (7d38 <system_gclk_chan_disable+0x88>)
    7cca:	885b      	ldrh	r3, [r3, #2]
    7ccc:	051b      	lsls	r3, r3, #20
    7cce:	0f1b      	lsrs	r3, r3, #28
    7cd0:	b2db      	uxtb	r3, r3
    7cd2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    7cd4:	4a18      	ldr	r2, [pc, #96]	; (7d38 <system_gclk_chan_disable+0x88>)
    7cd6:	8853      	ldrh	r3, [r2, #2]
    7cd8:	4918      	ldr	r1, [pc, #96]	; (7d3c <system_gclk_chan_disable+0x8c>)
    7cda:	400b      	ands	r3, r1
    7cdc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7cde:	4a16      	ldr	r2, [pc, #88]	; (7d38 <system_gclk_chan_disable+0x88>)
    7ce0:	4b15      	ldr	r3, [pc, #84]	; (7d38 <system_gclk_chan_disable+0x88>)
    7ce2:	885b      	ldrh	r3, [r3, #2]
    7ce4:	b29b      	uxth	r3, r3
    7ce6:	4916      	ldr	r1, [pc, #88]	; (7d40 <system_gclk_chan_disable+0x90>)
    7ce8:	400b      	ands	r3, r1
    7cea:	b29b      	uxth	r3, r3
    7cec:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    7cee:	46c0      	nop			; (mov r8, r8)
    7cf0:	4b11      	ldr	r3, [pc, #68]	; (7d38 <system_gclk_chan_disable+0x88>)
    7cf2:	885b      	ldrh	r3, [r3, #2]
    7cf4:	b29b      	uxth	r3, r3
    7cf6:	001a      	movs	r2, r3
    7cf8:	2380      	movs	r3, #128	; 0x80
    7cfa:	01db      	lsls	r3, r3, #7
    7cfc:	4013      	ands	r3, r2
    7cfe:	d1f7      	bne.n	7cf0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    7d00:	4a0d      	ldr	r2, [pc, #52]	; (7d38 <system_gclk_chan_disable+0x88>)
    7d02:	68fb      	ldr	r3, [r7, #12]
    7d04:	b2db      	uxtb	r3, r3
    7d06:	1c19      	adds	r1, r3, #0
    7d08:	230f      	movs	r3, #15
    7d0a:	400b      	ands	r3, r1
    7d0c:	b2d9      	uxtb	r1, r3
    7d0e:	8853      	ldrh	r3, [r2, #2]
    7d10:	1c08      	adds	r0, r1, #0
    7d12:	210f      	movs	r1, #15
    7d14:	4001      	ands	r1, r0
    7d16:	0208      	lsls	r0, r1, #8
    7d18:	4908      	ldr	r1, [pc, #32]	; (7d3c <system_gclk_chan_disable+0x8c>)
    7d1a:	400b      	ands	r3, r1
    7d1c:	1c19      	adds	r1, r3, #0
    7d1e:	1c03      	adds	r3, r0, #0
    7d20:	430b      	orrs	r3, r1
    7d22:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    7d24:	4b07      	ldr	r3, [pc, #28]	; (7d44 <system_gclk_chan_disable+0x94>)
    7d26:	4798      	blx	r3
}
    7d28:	46c0      	nop			; (mov r8, r8)
    7d2a:	46bd      	mov	sp, r7
    7d2c:	b004      	add	sp, #16
    7d2e:	bd80      	pop	{r7, pc}
    7d30:	00007955 	.word	0x00007955
    7d34:	40000c02 	.word	0x40000c02
    7d38:	40000c00 	.word	0x40000c00
    7d3c:	fffff0ff 	.word	0xfffff0ff
    7d40:	ffffbfff 	.word	0xffffbfff
    7d44:	00007969 	.word	0x00007969

00007d48 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7d48:	b580      	push	{r7, lr}
    7d4a:	b084      	sub	sp, #16
    7d4c:	af00      	add	r7, sp, #0
    7d4e:	0002      	movs	r2, r0
    7d50:	1dfb      	adds	r3, r7, #7
    7d52:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7d54:	4b0d      	ldr	r3, [pc, #52]	; (7d8c <system_gclk_chan_get_hz+0x44>)
    7d56:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7d58:	4a0d      	ldr	r2, [pc, #52]	; (7d90 <system_gclk_chan_get_hz+0x48>)
    7d5a:	1dfb      	adds	r3, r7, #7
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    7d60:	4b0c      	ldr	r3, [pc, #48]	; (7d94 <system_gclk_chan_get_hz+0x4c>)
    7d62:	885b      	ldrh	r3, [r3, #2]
    7d64:	051b      	lsls	r3, r3, #20
    7d66:	0f1b      	lsrs	r3, r3, #28
    7d68:	b2da      	uxtb	r2, r3
    7d6a:	230f      	movs	r3, #15
    7d6c:	18fb      	adds	r3, r7, r3
    7d6e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    7d70:	4b09      	ldr	r3, [pc, #36]	; (7d98 <system_gclk_chan_get_hz+0x50>)
    7d72:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7d74:	230f      	movs	r3, #15
    7d76:	18fb      	adds	r3, r7, r3
    7d78:	781b      	ldrb	r3, [r3, #0]
    7d7a:	0018      	movs	r0, r3
    7d7c:	4b07      	ldr	r3, [pc, #28]	; (7d9c <system_gclk_chan_get_hz+0x54>)
    7d7e:	4798      	blx	r3
    7d80:	0003      	movs	r3, r0
}
    7d82:	0018      	movs	r0, r3
    7d84:	46bd      	mov	sp, r7
    7d86:	b004      	add	sp, #16
    7d88:	bd80      	pop	{r7, pc}
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	00007955 	.word	0x00007955
    7d90:	40000c02 	.word	0x40000c02
    7d94:	40000c00 	.word	0x40000c00
    7d98:	00007969 	.word	0x00007969
    7d9c:	00007b4d 	.word	0x00007b4d

00007da0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7da0:	b580      	push	{r7, lr}
    7da2:	b084      	sub	sp, #16
    7da4:	af00      	add	r7, sp, #0
    7da6:	0002      	movs	r2, r0
    7da8:	1dfb      	adds	r3, r7, #7
    7daa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7dac:	230f      	movs	r3, #15
    7dae:	18fb      	adds	r3, r7, r3
    7db0:	1dfa      	adds	r2, r7, #7
    7db2:	7812      	ldrb	r2, [r2, #0]
    7db4:	09d2      	lsrs	r2, r2, #7
    7db6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7db8:	230e      	movs	r3, #14
    7dba:	18fb      	adds	r3, r7, r3
    7dbc:	1dfa      	adds	r2, r7, #7
    7dbe:	7812      	ldrb	r2, [r2, #0]
    7dc0:	0952      	lsrs	r2, r2, #5
    7dc2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7dc4:	4b0d      	ldr	r3, [pc, #52]	; (7dfc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7dc6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7dc8:	230f      	movs	r3, #15
    7dca:	18fb      	adds	r3, r7, r3
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d10f      	bne.n	7df2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7dd2:	230f      	movs	r3, #15
    7dd4:	18fb      	adds	r3, r7, r3
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	2210      	movs	r2, #16
    7ddc:	4694      	mov	ip, r2
    7dde:	44bc      	add	ip, r7
    7de0:	4463      	add	r3, ip
    7de2:	3b08      	subs	r3, #8
    7de4:	681a      	ldr	r2, [r3, #0]
    7de6:	230e      	movs	r3, #14
    7de8:	18fb      	adds	r3, r7, r3
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	01db      	lsls	r3, r3, #7
    7dee:	18d3      	adds	r3, r2, r3
    7df0:	e000      	b.n	7df4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    7df2:	2300      	movs	r3, #0
	}
}
    7df4:	0018      	movs	r0, r3
    7df6:	46bd      	mov	sp, r7
    7df8:	b004      	add	sp, #16
    7dfa:	bd80      	pop	{r7, pc}
    7dfc:	41004400 	.word	0x41004400

00007e00 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7e00:	b580      	push	{r7, lr}
    7e02:	b088      	sub	sp, #32
    7e04:	af00      	add	r7, sp, #0
    7e06:	60f8      	str	r0, [r7, #12]
    7e08:	60b9      	str	r1, [r7, #8]
    7e0a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7e0c:	2300      	movs	r3, #0
    7e0e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	78db      	ldrb	r3, [r3, #3]
    7e14:	2201      	movs	r2, #1
    7e16:	4053      	eors	r3, r2
    7e18:	b2db      	uxtb	r3, r3
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d035      	beq.n	7e8a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	2b80      	cmp	r3, #128	; 0x80
    7e24:	d00b      	beq.n	7e3e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7e26:	69fb      	ldr	r3, [r7, #28]
    7e28:	2280      	movs	r2, #128	; 0x80
    7e2a:	0252      	lsls	r2, r2, #9
    7e2c:	4313      	orrs	r3, r2
    7e2e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7e30:	687b      	ldr	r3, [r7, #4]
    7e32:	781b      	ldrb	r3, [r3, #0]
    7e34:	061b      	lsls	r3, r3, #24
    7e36:	001a      	movs	r2, r3
    7e38:	69fb      	ldr	r3, [r7, #28]
    7e3a:	4313      	orrs	r3, r2
    7e3c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	785b      	ldrb	r3, [r3, #1]
    7e42:	2b00      	cmp	r3, #0
    7e44:	d003      	beq.n	7e4e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7e46:	687b      	ldr	r3, [r7, #4]
    7e48:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7e4a:	2b02      	cmp	r3, #2
    7e4c:	d110      	bne.n	7e70 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7e4e:	69fb      	ldr	r3, [r7, #28]
    7e50:	2280      	movs	r2, #128	; 0x80
    7e52:	0292      	lsls	r2, r2, #10
    7e54:	4313      	orrs	r3, r2
    7e56:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	789b      	ldrb	r3, [r3, #2]
    7e5c:	2b00      	cmp	r3, #0
    7e5e:	d004      	beq.n	7e6a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7e60:	69fb      	ldr	r3, [r7, #28]
    7e62:	2280      	movs	r2, #128	; 0x80
    7e64:	02d2      	lsls	r2, r2, #11
    7e66:	4313      	orrs	r3, r2
    7e68:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7e6a:	68fb      	ldr	r3, [r7, #12]
    7e6c:	68ba      	ldr	r2, [r7, #8]
    7e6e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7e70:	687b      	ldr	r3, [r7, #4]
    7e72:	785b      	ldrb	r3, [r3, #1]
    7e74:	2b01      	cmp	r3, #1
    7e76:	d003      	beq.n	7e80 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7e7c:	2b02      	cmp	r3, #2
    7e7e:	d107      	bne.n	7e90 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7e80:	69fb      	ldr	r3, [r7, #28]
    7e82:	4a22      	ldr	r2, [pc, #136]	; (7f0c <_system_pinmux_config+0x10c>)
    7e84:	4013      	ands	r3, r2
    7e86:	61fb      	str	r3, [r7, #28]
    7e88:	e002      	b.n	7e90 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	68ba      	ldr	r2, [r7, #8]
    7e8e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7e90:	68bb      	ldr	r3, [r7, #8]
    7e92:	041b      	lsls	r3, r3, #16
    7e94:	0c1b      	lsrs	r3, r3, #16
    7e96:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7e98:	68bb      	ldr	r3, [r7, #8]
    7e9a:	0c1b      	lsrs	r3, r3, #16
    7e9c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7e9e:	69ba      	ldr	r2, [r7, #24]
    7ea0:	69fb      	ldr	r3, [r7, #28]
    7ea2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7ea4:	22a0      	movs	r2, #160	; 0xa0
    7ea6:	05d2      	lsls	r2, r2, #23
    7ea8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7eaa:	68fb      	ldr	r3, [r7, #12]
    7eac:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7eae:	697a      	ldr	r2, [r7, #20]
    7eb0:	69fb      	ldr	r3, [r7, #28]
    7eb2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7eb4:	22d0      	movs	r2, #208	; 0xd0
    7eb6:	0612      	lsls	r2, r2, #24
    7eb8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7eba:	68fb      	ldr	r3, [r7, #12]
    7ebc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7ebe:	687b      	ldr	r3, [r7, #4]
    7ec0:	78db      	ldrb	r3, [r3, #3]
    7ec2:	2201      	movs	r2, #1
    7ec4:	4053      	eors	r3, r2
    7ec6:	b2db      	uxtb	r3, r3
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d01a      	beq.n	7f02 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7ecc:	69fa      	ldr	r2, [r7, #28]
    7ece:	2380      	movs	r3, #128	; 0x80
    7ed0:	02db      	lsls	r3, r3, #11
    7ed2:	4013      	ands	r3, r2
    7ed4:	d00a      	beq.n	7eec <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	789b      	ldrb	r3, [r3, #2]
    7eda:	2b01      	cmp	r3, #1
    7edc:	d103      	bne.n	7ee6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    7ede:	68fb      	ldr	r3, [r7, #12]
    7ee0:	68ba      	ldr	r2, [r7, #8]
    7ee2:	619a      	str	r2, [r3, #24]
    7ee4:	e002      	b.n	7eec <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7ee6:	68fb      	ldr	r3, [r7, #12]
    7ee8:	68ba      	ldr	r2, [r7, #8]
    7eea:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	785b      	ldrb	r3, [r3, #1]
    7ef0:	2b01      	cmp	r3, #1
    7ef2:	d003      	beq.n	7efc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7ef8:	2b02      	cmp	r3, #2
    7efa:	d102      	bne.n	7f02 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7efc:	68fb      	ldr	r3, [r7, #12]
    7efe:	68ba      	ldr	r2, [r7, #8]
    7f00:	609a      	str	r2, [r3, #8]
		}
	}
}
    7f02:	46c0      	nop			; (mov r8, r8)
    7f04:	46bd      	mov	sp, r7
    7f06:	b008      	add	sp, #32
    7f08:	bd80      	pop	{r7, pc}
    7f0a:	46c0      	nop			; (mov r8, r8)
    7f0c:	fffbffff 	.word	0xfffbffff

00007f10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7f10:	b580      	push	{r7, lr}
    7f12:	b084      	sub	sp, #16
    7f14:	af00      	add	r7, sp, #0
    7f16:	0002      	movs	r2, r0
    7f18:	6039      	str	r1, [r7, #0]
    7f1a:	1dfb      	adds	r3, r7, #7
    7f1c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7f1e:	1dfb      	adds	r3, r7, #7
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	0018      	movs	r0, r3
    7f24:	4b0a      	ldr	r3, [pc, #40]	; (7f50 <system_pinmux_pin_set_config+0x40>)
    7f26:	4798      	blx	r3
    7f28:	0003      	movs	r3, r0
    7f2a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7f2c:	1dfb      	adds	r3, r7, #7
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	221f      	movs	r2, #31
    7f32:	4013      	ands	r3, r2
    7f34:	2201      	movs	r2, #1
    7f36:	409a      	lsls	r2, r3
    7f38:	0013      	movs	r3, r2
    7f3a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7f3c:	683a      	ldr	r2, [r7, #0]
    7f3e:	68b9      	ldr	r1, [r7, #8]
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	0018      	movs	r0, r3
    7f44:	4b03      	ldr	r3, [pc, #12]	; (7f54 <system_pinmux_pin_set_config+0x44>)
    7f46:	4798      	blx	r3
}
    7f48:	46c0      	nop			; (mov r8, r8)
    7f4a:	46bd      	mov	sp, r7
    7f4c:	b004      	add	sp, #16
    7f4e:	bd80      	pop	{r7, pc}
    7f50:	00007da1 	.word	0x00007da1
    7f54:	00007e01 	.word	0x00007e01

00007f58 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7f58:	b580      	push	{r7, lr}
    7f5a:	af00      	add	r7, sp, #0
	return;
    7f5c:	46c0      	nop			; (mov r8, r8)
}
    7f5e:	46bd      	mov	sp, r7
    7f60:	bd80      	pop	{r7, pc}
	...

00007f64 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7f64:	b580      	push	{r7, lr}
    7f66:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7f68:	4b06      	ldr	r3, [pc, #24]	; (7f84 <system_init+0x20>)
    7f6a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7f6c:	4b06      	ldr	r3, [pc, #24]	; (7f88 <system_init+0x24>)
    7f6e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7f70:	4b06      	ldr	r3, [pc, #24]	; (7f8c <system_init+0x28>)
    7f72:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7f74:	4b06      	ldr	r3, [pc, #24]	; (7f90 <system_init+0x2c>)
    7f76:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7f78:	4b06      	ldr	r3, [pc, #24]	; (7f94 <system_init+0x30>)
    7f7a:	4798      	blx	r3
}
    7f7c:	46c0      	nop			; (mov r8, r8)
    7f7e:	46bd      	mov	sp, r7
    7f80:	bd80      	pop	{r7, pc}
    7f82:	46c0      	nop			; (mov r8, r8)
    7f84:	00007775 	.word	0x00007775
    7f88:	00007265 	.word	0x00007265
    7f8c:	00007f59 	.word	0x00007f59
    7f90:	00007f59 	.word	0x00007f59
    7f94:	00007f59 	.word	0x00007f59

00007f98 <nvm_get_config_defaults>:
{
    7f98:	b580      	push	{r7, lr}
    7f9a:	b082      	sub	sp, #8
    7f9c:	af00      	add	r7, sp, #0
    7f9e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	2200      	movs	r2, #0
    7fa4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	2201      	movs	r2, #1
    7faa:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    7fac:	4b08      	ldr	r3, [pc, #32]	; (7fd0 <nvm_get_config_defaults+0x38>)
    7fae:	685b      	ldr	r3, [r3, #4]
    7fb0:	06db      	lsls	r3, r3, #27
    7fb2:	0f1b      	lsrs	r3, r3, #28
    7fb4:	b2db      	uxtb	r3, r3
    7fb6:	001a      	movs	r2, r3
    7fb8:	687b      	ldr	r3, [r7, #4]
    7fba:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	2200      	movs	r2, #0
    7fc0:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	2200      	movs	r2, #0
    7fc6:	711a      	strb	r2, [r3, #4]
}
    7fc8:	46c0      	nop			; (mov r8, r8)
    7fca:	46bd      	mov	sp, r7
    7fcc:	b002      	add	sp, #8
    7fce:	bd80      	pop	{r7, pc}
    7fd0:	41004000 	.word	0x41004000

00007fd4 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    7fd4:	b590      	push	{r4, r7, lr}
    7fd6:	b085      	sub	sp, #20
    7fd8:	af00      	add	r7, sp, #0
    7fda:	0002      	movs	r2, r0
    7fdc:	1dfb      	adds	r3, r7, #7
    7fde:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7fe0:	230f      	movs	r3, #15
    7fe2:	18fb      	adds	r3, r7, r3
    7fe4:	2200      	movs	r2, #0
    7fe6:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    7fe8:	4b0a      	ldr	r3, [pc, #40]	; (8014 <_eeprom_emulator_nvm_erase_row+0x40>)
    7fea:	685b      	ldr	r3, [r3, #4]
    7fec:	1dfa      	adds	r2, r7, #7
    7fee:	7812      	ldrb	r2, [r2, #0]
    7ff0:	0212      	lsls	r2, r2, #8
    7ff2:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
    7ff4:	220f      	movs	r2, #15
    7ff6:	18bc      	adds	r4, r7, r2
    7ff8:	0018      	movs	r0, r3
    7ffa:	4b07      	ldr	r3, [pc, #28]	; (8018 <_eeprom_emulator_nvm_erase_row+0x44>)
    7ffc:	4798      	blx	r3
    7ffe:	0003      	movs	r3, r0
    8000:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    8002:	230f      	movs	r3, #15
    8004:	18fb      	adds	r3, r7, r3
    8006:	781b      	ldrb	r3, [r3, #0]
    8008:	2b05      	cmp	r3, #5
    800a:	d0ed      	beq.n	7fe8 <_eeprom_emulator_nvm_erase_row+0x14>
}
    800c:	46c0      	nop			; (mov r8, r8)
    800e:	46bd      	mov	sp, r7
    8010:	b005      	add	sp, #20
    8012:	bd90      	pop	{r4, r7, pc}
    8014:	20000218 	.word	0x20000218
    8018:	00002f0d 	.word	0x00002f0d

0000801c <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
    801c:	b590      	push	{r4, r7, lr}
    801e:	b085      	sub	sp, #20
    8020:	af00      	add	r7, sp, #0
    8022:	0002      	movs	r2, r0
    8024:	6039      	str	r1, [r7, #0]
    8026:	1dbb      	adds	r3, r7, #6
    8028:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    802a:	230f      	movs	r3, #15
    802c:	18fb      	adds	r3, r7, r3
    802e:	2200      	movs	r2, #0
    8030:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    8032:	4b0c      	ldr	r3, [pc, #48]	; (8064 <_eeprom_emulator_nvm_fill_cache+0x48>)
    8034:	685a      	ldr	r2, [r3, #4]
    8036:	1dbb      	adds	r3, r7, #6
    8038:	881b      	ldrh	r3, [r3, #0]
    803a:	019b      	lsls	r3, r3, #6
    803c:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
    803e:	0018      	movs	r0, r3
    8040:	230f      	movs	r3, #15
    8042:	18fc      	adds	r4, r7, r3
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	2240      	movs	r2, #64	; 0x40
    8048:	0019      	movs	r1, r3
    804a:	4b07      	ldr	r3, [pc, #28]	; (8068 <_eeprom_emulator_nvm_fill_cache+0x4c>)
    804c:	4798      	blx	r3
    804e:	0003      	movs	r3, r0
    8050:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    8052:	230f      	movs	r3, #15
    8054:	18fb      	adds	r3, r7, r3
    8056:	781b      	ldrb	r3, [r3, #0]
    8058:	2b05      	cmp	r3, #5
    805a:	d0ea      	beq.n	8032 <_eeprom_emulator_nvm_fill_cache+0x16>
}
    805c:	46c0      	nop			; (mov r8, r8)
    805e:	46bd      	mov	sp, r7
    8060:	b005      	add	sp, #20
    8062:	bd90      	pop	{r4, r7, pc}
    8064:	20000218 	.word	0x20000218
    8068:	00002cc5 	.word	0x00002cc5

0000806c <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
    806c:	b590      	push	{r4, r7, lr}
    806e:	b085      	sub	sp, #20
    8070:	af00      	add	r7, sp, #0
    8072:	0002      	movs	r2, r0
    8074:	1dbb      	adds	r3, r7, #6
    8076:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8078:	230f      	movs	r3, #15
    807a:	18fb      	adds	r3, r7, r3
    807c:	2200      	movs	r2, #0
    807e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    8080:	4b0b      	ldr	r3, [pc, #44]	; (80b0 <_eeprom_emulator_nvm_commit_cache+0x44>)
    8082:	685a      	ldr	r2, [r3, #4]
    8084:	1dbb      	adds	r3, r7, #6
    8086:	881b      	ldrh	r3, [r3, #0]
    8088:	019b      	lsls	r3, r3, #6
    808a:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
    808c:	220f      	movs	r2, #15
    808e:	18bc      	adds	r4, r7, r2
    8090:	2200      	movs	r2, #0
    8092:	0019      	movs	r1, r3
    8094:	2004      	movs	r0, #4
    8096:	4b07      	ldr	r3, [pc, #28]	; (80b4 <_eeprom_emulator_nvm_commit_cache+0x48>)
    8098:	4798      	blx	r3
    809a:	0003      	movs	r3, r0
    809c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    809e:	230f      	movs	r3, #15
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	2b05      	cmp	r3, #5
    80a6:	d0eb      	beq.n	8080 <_eeprom_emulator_nvm_commit_cache+0x14>
}
    80a8:	46c0      	nop			; (mov r8, r8)
    80aa:	46bd      	mov	sp, r7
    80ac:	b005      	add	sp, #20
    80ae:	bd90      	pop	{r4, r7, pc}
    80b0:	20000218 	.word	0x20000218
    80b4:	00002bad 	.word	0x00002bad

000080b8 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
    80b8:	b590      	push	{r4, r7, lr}
    80ba:	b085      	sub	sp, #20
    80bc:	af00      	add	r7, sp, #0
    80be:	0002      	movs	r2, r0
    80c0:	6039      	str	r1, [r7, #0]
    80c2:	1dbb      	adds	r3, r7, #6
    80c4:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    80c6:	230f      	movs	r3, #15
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	2200      	movs	r2, #0
    80cc:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    80ce:	4b0c      	ldr	r3, [pc, #48]	; (8100 <_eeprom_emulator_nvm_read_page+0x48>)
    80d0:	685a      	ldr	r2, [r3, #4]
    80d2:	1dbb      	adds	r3, r7, #6
    80d4:	881b      	ldrh	r3, [r3, #0]
    80d6:	019b      	lsls	r3, r3, #6
    80d8:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
    80da:	0018      	movs	r0, r3
    80dc:	230f      	movs	r3, #15
    80de:	18fc      	adds	r4, r7, r3
    80e0:	683b      	ldr	r3, [r7, #0]
    80e2:	2240      	movs	r2, #64	; 0x40
    80e4:	0019      	movs	r1, r3
    80e6:	4b07      	ldr	r3, [pc, #28]	; (8104 <_eeprom_emulator_nvm_read_page+0x4c>)
    80e8:	4798      	blx	r3
    80ea:	0003      	movs	r3, r0
    80ec:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    80ee:	230f      	movs	r3, #15
    80f0:	18fb      	adds	r3, r7, r3
    80f2:	781b      	ldrb	r3, [r3, #0]
    80f4:	2b05      	cmp	r3, #5
    80f6:	d0ea      	beq.n	80ce <_eeprom_emulator_nvm_read_page+0x16>
}
    80f8:	46c0      	nop			; (mov r8, r8)
    80fa:	46bd      	mov	sp, r7
    80fc:	b005      	add	sp, #20
    80fe:	bd90      	pop	{r4, r7, pc}
    8100:	20000218 	.word	0x20000218
    8104:	00002e11 	.word	0x00002e11

00008108 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
    8108:	b580      	push	{r7, lr}
    810a:	b092      	sub	sp, #72	; 0x48
    810c:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
    810e:	2346      	movs	r3, #70	; 0x46
    8110:	18fb      	adds	r3, r7, r3
    8112:	2200      	movs	r2, #0
    8114:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
    8116:	4b32      	ldr	r3, [pc, #200]	; (81e0 <_eeprom_emulator_format_memory+0xd8>)
    8118:	2287      	movs	r2, #135	; 0x87
    811a:	2100      	movs	r1, #0
    811c:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    811e:	4b30      	ldr	r3, [pc, #192]	; (81e0 <_eeprom_emulator_format_memory+0xd8>)
    8120:	2287      	movs	r2, #135	; 0x87
    8122:	5c9b      	ldrb	r3, [r3, r2]
    8124:	0018      	movs	r0, r3
    8126:	4b2f      	ldr	r3, [pc, #188]	; (81e4 <_eeprom_emulator_format_memory+0xdc>)
    8128:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    812a:	2344      	movs	r3, #68	; 0x44
    812c:	18fb      	adds	r3, r7, r3
    812e:	2204      	movs	r2, #4
    8130:	801a      	strh	r2, [r3, #0]
    8132:	e04a      	b.n	81ca <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8134:	2344      	movs	r3, #68	; 0x44
    8136:	18fb      	adds	r3, r7, r3
    8138:	881a      	ldrh	r2, [r3, #0]
    813a:	4b29      	ldr	r3, [pc, #164]	; (81e0 <_eeprom_emulator_format_memory+0xd8>)
    813c:	891b      	ldrh	r3, [r3, #8]
    813e:	3b01      	subs	r3, #1
    8140:	429a      	cmp	r2, r3
    8142:	d03a      	beq.n	81ba <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    8144:	2344      	movs	r3, #68	; 0x44
    8146:	18fb      	adds	r3, r7, r3
    8148:	881b      	ldrh	r3, [r3, #0]
    814a:	2203      	movs	r2, #3
    814c:	4013      	ands	r3, r2
    814e:	b29b      	uxth	r3, r3
    8150:	2b00      	cmp	r3, #0
    8152:	d108      	bne.n	8166 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    8154:	2344      	movs	r3, #68	; 0x44
    8156:	18fb      	adds	r3, r7, r3
    8158:	881b      	ldrh	r3, [r3, #0]
    815a:	089b      	lsrs	r3, r3, #2
    815c:	b29b      	uxth	r3, r3
    815e:	b2db      	uxtb	r3, r3
    8160:	0018      	movs	r0, r3
    8162:	4b20      	ldr	r3, [pc, #128]	; (81e4 <_eeprom_emulator_format_memory+0xdc>)
    8164:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    8166:	2344      	movs	r3, #68	; 0x44
    8168:	18fb      	adds	r3, r7, r3
    816a:	881b      	ldrh	r3, [r3, #0]
    816c:	2203      	movs	r2, #3
    816e:	4013      	ands	r3, r2
    8170:	b29b      	uxth	r3, r3
    8172:	2b01      	cmp	r3, #1
    8174:	d822      	bhi.n	81bc <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
    8176:	1d3b      	adds	r3, r7, #4
    8178:	2240      	movs	r2, #64	; 0x40
    817a:	21ff      	movs	r1, #255	; 0xff
    817c:	0018      	movs	r0, r3
    817e:	4b1a      	ldr	r3, [pc, #104]	; (81e8 <_eeprom_emulator_format_memory+0xe0>)
    8180:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
    8182:	2346      	movs	r3, #70	; 0x46
    8184:	18fb      	adds	r3, r7, r3
    8186:	881b      	ldrh	r3, [r3, #0]
    8188:	b2da      	uxtb	r2, r3
    818a:	1d3b      	adds	r3, r7, #4
    818c:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    818e:	1d3a      	adds	r2, r7, #4
    8190:	2344      	movs	r3, #68	; 0x44
    8192:	18fb      	adds	r3, r7, r3
    8194:	881b      	ldrh	r3, [r3, #0]
    8196:	0011      	movs	r1, r2
    8198:	0018      	movs	r0, r3
    819a:	4b14      	ldr	r3, [pc, #80]	; (81ec <_eeprom_emulator_format_memory+0xe4>)
    819c:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    819e:	2344      	movs	r3, #68	; 0x44
    81a0:	18fb      	adds	r3, r7, r3
    81a2:	881b      	ldrh	r3, [r3, #0]
    81a4:	0018      	movs	r0, r3
    81a6:	4b12      	ldr	r3, [pc, #72]	; (81f0 <_eeprom_emulator_format_memory+0xe8>)
    81a8:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
    81aa:	2346      	movs	r3, #70	; 0x46
    81ac:	18fb      	adds	r3, r7, r3
    81ae:	881a      	ldrh	r2, [r3, #0]
    81b0:	2346      	movs	r3, #70	; 0x46
    81b2:	18fb      	adds	r3, r7, r3
    81b4:	3201      	adds	r2, #1
    81b6:	801a      	strh	r2, [r3, #0]
    81b8:	e000      	b.n	81bc <_eeprom_emulator_format_memory+0xb4>
			continue;
    81ba:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    81bc:	2344      	movs	r3, #68	; 0x44
    81be:	18fb      	adds	r3, r7, r3
    81c0:	881a      	ldrh	r2, [r3, #0]
    81c2:	2344      	movs	r3, #68	; 0x44
    81c4:	18fb      	adds	r3, r7, r3
    81c6:	3201      	adds	r2, #1
    81c8:	801a      	strh	r2, [r3, #0]
    81ca:	4b05      	ldr	r3, [pc, #20]	; (81e0 <_eeprom_emulator_format_memory+0xd8>)
    81cc:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    81ce:	2244      	movs	r2, #68	; 0x44
    81d0:	18ba      	adds	r2, r7, r2
    81d2:	8812      	ldrh	r2, [r2, #0]
    81d4:	429a      	cmp	r2, r3
    81d6:	d3ad      	bcc.n	8134 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
    81d8:	46c0      	nop			; (mov r8, r8)
    81da:	46bd      	mov	sp, r7
    81dc:	b012      	add	sp, #72	; 0x48
    81de:	bd80      	pop	{r7, pc}
    81e0:	20000218 	.word	0x20000218
    81e4:	00007fd5 	.word	0x00007fd5
    81e8:	000170ef 	.word	0x000170ef
    81ec:	0000801d 	.word	0x0000801d
    81f0:	0000806d 	.word	0x0000806d

000081f4 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    81f4:	b580      	push	{r7, lr}
    81f6:	b084      	sub	sp, #16
    81f8:	af00      	add	r7, sp, #0
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    81fa:	230e      	movs	r3, #14
    81fc:	18fb      	adds	r3, r7, r3
    81fe:	2200      	movs	r2, #0
    8200:	801a      	strh	r2, [r3, #0]
    8202:	e033      	b.n	826c <_eeprom_emulator_update_page_mapping+0x78>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    8204:	230e      	movs	r3, #14
    8206:	18fb      	adds	r3, r7, r3
    8208:	881a      	ldrh	r2, [r3, #0]
    820a:	4b4c      	ldr	r3, [pc, #304]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    820c:	891b      	ldrh	r3, [r3, #8]
    820e:	3b01      	subs	r3, #1
    8210:	429a      	cmp	r2, r3
    8212:	d023      	beq.n	825c <_eeprom_emulator_update_page_mapping+0x68>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    8214:	4b49      	ldr	r3, [pc, #292]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    8216:	685a      	ldr	r2, [r3, #4]
    8218:	230e      	movs	r3, #14
    821a:	18fb      	adds	r3, r7, r3
    821c:	881b      	ldrh	r3, [r3, #0]
    821e:	019b      	lsls	r3, r3, #6
    8220:	18d3      	adds	r3, r2, r3
    8222:	781a      	ldrb	r2, [r3, #0]
    8224:	2308      	movs	r3, #8
    8226:	18fb      	adds	r3, r7, r3
    8228:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    822a:	2308      	movs	r3, #8
    822c:	18fb      	adds	r3, r7, r3
    822e:	881b      	ldrh	r3, [r3, #0]
    8230:	2bff      	cmp	r3, #255	; 0xff
    8232:	d014      	beq.n	825e <_eeprom_emulator_update_page_mapping+0x6a>
				(logical_page < _eeprom_instance.logical_pages)) {
    8234:	4b41      	ldr	r3, [pc, #260]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    8236:	7a9b      	ldrb	r3, [r3, #10]
    8238:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    823a:	2208      	movs	r2, #8
    823c:	18ba      	adds	r2, r7, r2
    823e:	8812      	ldrh	r2, [r2, #0]
    8240:	429a      	cmp	r2, r3
    8242:	d20c      	bcs.n	825e <_eeprom_emulator_update_page_mapping+0x6a>
			_eeprom_instance.page_map[logical_page] = c;
    8244:	2308      	movs	r3, #8
    8246:	18fb      	adds	r3, r7, r3
    8248:	881b      	ldrh	r3, [r3, #0]
    824a:	220e      	movs	r2, #14
    824c:	18ba      	adds	r2, r7, r2
    824e:	8812      	ldrh	r2, [r2, #0]
    8250:	b2d1      	uxtb	r1, r2
    8252:	4a3a      	ldr	r2, [pc, #232]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    8254:	18d3      	adds	r3, r2, r3
    8256:	1c0a      	adds	r2, r1, #0
    8258:	72da      	strb	r2, [r3, #11]
    825a:	e000      	b.n	825e <_eeprom_emulator_update_page_mapping+0x6a>
			continue;
    825c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    825e:	230e      	movs	r3, #14
    8260:	18fb      	adds	r3, r7, r3
    8262:	881a      	ldrh	r2, [r3, #0]
    8264:	230e      	movs	r3, #14
    8266:	18fb      	adds	r3, r7, r3
    8268:	3201      	adds	r2, #1
    826a:	801a      	strh	r2, [r3, #0]
    826c:	4b33      	ldr	r3, [pc, #204]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    826e:	891b      	ldrh	r3, [r3, #8]
    8270:	220e      	movs	r2, #14
    8272:	18ba      	adds	r2, r7, r2
    8274:	8812      	ldrh	r2, [r2, #0]
    8276:	429a      	cmp	r2, r3
    8278:	d3c4      	bcc.n	8204 <_eeprom_emulator_update_page_mapping+0x10>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    827a:	4b30      	ldr	r3, [pc, #192]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    827c:	2287      	movs	r2, #135	; 0x87
    827e:	213f      	movs	r1, #63	; 0x3f
    8280:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8282:	230c      	movs	r3, #12
    8284:	18fb      	adds	r3, r7, r3
    8286:	2200      	movs	r2, #0
    8288:	801a      	strh	r2, [r3, #0]
    828a:	e04a      	b.n	8322 <_eeprom_emulator_update_page_mapping+0x12e>
		bool spare_row_found = true;
    828c:	230b      	movs	r3, #11
    828e:	18fb      	adds	r3, r7, r3
    8290:	2201      	movs	r2, #1
    8292:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8294:	230a      	movs	r3, #10
    8296:	18fb      	adds	r3, r7, r3
    8298:	2200      	movs	r2, #0
    829a:	701a      	strb	r2, [r3, #0]
    829c:	e028      	b.n	82f0 <_eeprom_emulator_update_page_mapping+0xfc>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    829e:	230c      	movs	r3, #12
    82a0:	18fb      	adds	r3, r7, r3
    82a2:	881b      	ldrh	r3, [r3, #0]
    82a4:	009b      	lsls	r3, r3, #2
    82a6:	b299      	uxth	r1, r3
    82a8:	230a      	movs	r3, #10
    82aa:	18fb      	adds	r3, r7, r3
    82ac:	781b      	ldrb	r3, [r3, #0]
    82ae:	b29a      	uxth	r2, r3
    82b0:	1dbb      	adds	r3, r7, #6
    82b2:	188a      	adds	r2, r1, r2
    82b4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    82b6:	1dbb      	adds	r3, r7, #6
    82b8:	881a      	ldrh	r2, [r3, #0]
    82ba:	4b20      	ldr	r3, [pc, #128]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    82bc:	891b      	ldrh	r3, [r3, #8]
    82be:	3b01      	subs	r3, #1
    82c0:	429a      	cmp	r2, r3
    82c2:	d00d      	beq.n	82e0 <_eeprom_emulator_update_page_mapping+0xec>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    82c4:	4b1d      	ldr	r3, [pc, #116]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    82c6:	685a      	ldr	r2, [r3, #4]
    82c8:	1dbb      	adds	r3, r7, #6
    82ca:	881b      	ldrh	r3, [r3, #0]
    82cc:	019b      	lsls	r3, r3, #6
    82ce:	18d3      	adds	r3, r2, r3
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	2bff      	cmp	r3, #255	; 0xff
    82d4:	d005      	beq.n	82e2 <_eeprom_emulator_update_page_mapping+0xee>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    82d6:	230b      	movs	r3, #11
    82d8:	18fb      	adds	r3, r7, r3
    82da:	2200      	movs	r2, #0
    82dc:	701a      	strb	r2, [r3, #0]
    82de:	e000      	b.n	82e2 <_eeprom_emulator_update_page_mapping+0xee>
				continue;
    82e0:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    82e2:	230a      	movs	r3, #10
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	781a      	ldrb	r2, [r3, #0]
    82e8:	230a      	movs	r3, #10
    82ea:	18fb      	adds	r3, r7, r3
    82ec:	3201      	adds	r2, #1
    82ee:	701a      	strb	r2, [r3, #0]
    82f0:	230a      	movs	r3, #10
    82f2:	18fb      	adds	r3, r7, r3
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	2b03      	cmp	r3, #3
    82f8:	d9d1      	bls.n	829e <_eeprom_emulator_update_page_mapping+0xaa>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    82fa:	230b      	movs	r3, #11
    82fc:	18fb      	adds	r3, r7, r3
    82fe:	781b      	ldrb	r3, [r3, #0]
    8300:	2b00      	cmp	r3, #0
    8302:	d007      	beq.n	8314 <_eeprom_emulator_update_page_mapping+0x120>
			_eeprom_instance.spare_row = c;
    8304:	230c      	movs	r3, #12
    8306:	18fb      	adds	r3, r7, r3
    8308:	881b      	ldrh	r3, [r3, #0]
    830a:	b2d9      	uxtb	r1, r3
    830c:	4b0b      	ldr	r3, [pc, #44]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    830e:	2287      	movs	r2, #135	; 0x87
    8310:	5499      	strb	r1, [r3, r2]
			break;
    8312:	e00f      	b.n	8334 <_eeprom_emulator_update_page_mapping+0x140>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8314:	230c      	movs	r3, #12
    8316:	18fb      	adds	r3, r7, r3
    8318:	881a      	ldrh	r2, [r3, #0]
    831a:	230c      	movs	r3, #12
    831c:	18fb      	adds	r3, r7, r3
    831e:	3201      	adds	r2, #1
    8320:	801a      	strh	r2, [r3, #0]
    8322:	4b06      	ldr	r3, [pc, #24]	; (833c <_eeprom_emulator_update_page_mapping+0x148>)
    8324:	891b      	ldrh	r3, [r3, #8]
    8326:	089b      	lsrs	r3, r3, #2
    8328:	b29b      	uxth	r3, r3
    832a:	220c      	movs	r2, #12
    832c:	18ba      	adds	r2, r7, r2
    832e:	8812      	ldrh	r2, [r2, #0]
    8330:	429a      	cmp	r2, r3
    8332:	d3ab      	bcc.n	828c <_eeprom_emulator_update_page_mapping+0x98>
		}
	}
}
    8334:	46c0      	nop			; (mov r8, r8)
    8336:	46bd      	mov	sp, r7
    8338:	b004      	add	sp, #16
    833a:	bd80      	pop	{r7, pc}
    833c:	20000218 	.word	0x20000218

00008340 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
    8340:	b580      	push	{r7, lr}
    8342:	b084      	sub	sp, #16
    8344:	af00      	add	r7, sp, #0
    8346:	0002      	movs	r2, r0
    8348:	6039      	str	r1, [r7, #0]
    834a:	1dfb      	adds	r3, r7, #7
    834c:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
    834e:	230e      	movs	r3, #14
    8350:	18fb      	adds	r3, r7, r3
    8352:	1dfa      	adds	r2, r7, #7
    8354:	7812      	ldrb	r2, [r2, #0]
    8356:	0892      	lsrs	r2, r2, #2
    8358:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    835a:	230d      	movs	r3, #13
    835c:	18fb      	adds	r3, r7, r3
    835e:	1dfa      	adds	r2, r7, #7
    8360:	7812      	ldrb	r2, [r2, #0]
    8362:	2103      	movs	r1, #3
    8364:	400a      	ands	r2, r1
    8366:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8368:	230f      	movs	r3, #15
    836a:	18fb      	adds	r3, r7, r3
    836c:	220d      	movs	r2, #13
    836e:	18ba      	adds	r2, r7, r2
    8370:	7812      	ldrb	r2, [r2, #0]
    8372:	701a      	strb	r2, [r3, #0]
    8374:	e023      	b.n	83be <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    8376:	230e      	movs	r3, #14
    8378:	18fb      	adds	r3, r7, r3
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	009b      	lsls	r3, r3, #2
    837e:	b2d9      	uxtb	r1, r3
    8380:	230c      	movs	r3, #12
    8382:	18fb      	adds	r3, r7, r3
    8384:	220f      	movs	r2, #15
    8386:	18ba      	adds	r2, r7, r2
    8388:	7812      	ldrb	r2, [r2, #0]
    838a:	188a      	adds	r2, r1, r2
    838c:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
    838e:	4b11      	ldr	r3, [pc, #68]	; (83d4 <_eeprom_emulator_is_page_free_on_row+0x94>)
    8390:	685a      	ldr	r2, [r3, #4]
    8392:	230c      	movs	r3, #12
    8394:	18fb      	adds	r3, r7, r3
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	019b      	lsls	r3, r3, #6
    839a:	18d3      	adds	r3, r2, r3
    839c:	781b      	ldrb	r3, [r3, #0]
    839e:	2bff      	cmp	r3, #255	; 0xff
    83a0:	d106      	bne.n	83b0 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
    83a2:	683b      	ldr	r3, [r7, #0]
    83a4:	220c      	movs	r2, #12
    83a6:	18ba      	adds	r2, r7, r2
    83a8:	7812      	ldrb	r2, [r2, #0]
    83aa:	701a      	strb	r2, [r3, #0]
			return true;
    83ac:	2301      	movs	r3, #1
    83ae:	e00c      	b.n	83ca <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    83b0:	230f      	movs	r3, #15
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	781a      	ldrb	r2, [r3, #0]
    83b6:	230f      	movs	r3, #15
    83b8:	18fb      	adds	r3, r7, r3
    83ba:	3201      	adds	r2, #1
    83bc:	701a      	strb	r2, [r3, #0]
    83be:	230f      	movs	r3, #15
    83c0:	18fb      	adds	r3, r7, r3
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	2b03      	cmp	r3, #3
    83c6:	d9d6      	bls.n	8376 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
    83c8:	2300      	movs	r3, #0
}
    83ca:	0018      	movs	r0, r3
    83cc:	46bd      	mov	sp, r7
    83ce:	b004      	add	sp, #16
    83d0:	bd80      	pop	{r7, pc}
    83d2:	46c0      	nop			; (mov r8, r8)
    83d4:	20000218 	.word	0x20000218

000083d8 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
    83d8:	b580      	push	{r7, lr}
    83da:	b086      	sub	sp, #24
    83dc:	af00      	add	r7, sp, #0
    83de:	603a      	str	r2, [r7, #0]
    83e0:	1dfb      	adds	r3, r7, #7
    83e2:	1c02      	adds	r2, r0, #0
    83e4:	701a      	strb	r2, [r3, #0]
    83e6:	1dbb      	adds	r3, r7, #6
    83e8:	1c0a      	adds	r2, r1, #0
    83ea:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    83ec:	2314      	movs	r3, #20
    83ee:	18fb      	adds	r3, r7, r3
    83f0:	2200      	movs	r2, #0
    83f2:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    83f4:	4b69      	ldr	r3, [pc, #420]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    83f6:	685b      	ldr	r3, [r3, #4]
    83f8:	1dfa      	adds	r2, r7, #7
    83fa:	7812      	ldrb	r2, [r2, #0]
    83fc:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
    83fe:	189b      	adds	r3, r3, r2
    8400:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    8402:	693b      	ldr	r3, [r7, #16]
    8404:	781a      	ldrb	r2, [r3, #0]
    8406:	2308      	movs	r3, #8
    8408:	18fb      	adds	r3, r7, r3
    840a:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    840c:	1dfb      	adds	r3, r7, #7
    840e:	781b      	ldrb	r3, [r3, #0]
    8410:	009b      	lsls	r3, r3, #2
    8412:	b2da      	uxtb	r2, r3
    8414:	2308      	movs	r3, #8
    8416:	18fb      	adds	r3, r7, r3
    8418:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
    841a:	693b      	ldr	r3, [r7, #16]
    841c:	3340      	adds	r3, #64	; 0x40
    841e:	781a      	ldrb	r2, [r3, #0]
    8420:	2308      	movs	r3, #8
    8422:	18fb      	adds	r3, r7, r3
    8424:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    8426:	1dfb      	adds	r3, r7, #7
    8428:	781b      	ldrb	r3, [r3, #0]
    842a:	009b      	lsls	r3, r3, #2
    842c:	b2db      	uxtb	r3, r3
    842e:	3301      	adds	r3, #1
    8430:	b2da      	uxtb	r2, r3
    8432:	2308      	movs	r3, #8
    8434:	18fb      	adds	r3, r7, r3
    8436:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
    8438:	2317      	movs	r3, #23
    843a:	18fb      	adds	r3, r7, r3
    843c:	2200      	movs	r2, #0
    843e:	701a      	strb	r2, [r3, #0]
    8440:	e03a      	b.n	84b8 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8442:	2316      	movs	r3, #22
    8444:	18fb      	adds	r3, r7, r3
    8446:	2202      	movs	r2, #2
    8448:	701a      	strb	r2, [r3, #0]
    844a:	e029      	b.n	84a0 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    844c:	2317      	movs	r3, #23
    844e:	18fb      	adds	r3, r7, r3
    8450:	781a      	ldrb	r2, [r3, #0]
    8452:	2308      	movs	r3, #8
    8454:	18fb      	adds	r3, r7, r3
    8456:	0052      	lsls	r2, r2, #1
    8458:	5cd2      	ldrb	r2, [r2, r3]
    845a:	2316      	movs	r3, #22
    845c:	18fb      	adds	r3, r7, r3
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	019b      	lsls	r3, r3, #6
    8462:	6939      	ldr	r1, [r7, #16]
    8464:	18cb      	adds	r3, r1, r3
    8466:	781b      	ldrb	r3, [r3, #0]
    8468:	429a      	cmp	r2, r3
    846a:	d112      	bne.n	8492 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
    846c:	2317      	movs	r3, #23
    846e:	18fb      	adds	r3, r7, r3
    8470:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    8472:	1dfa      	adds	r2, r7, #7
    8474:	7812      	ldrb	r2, [r2, #0]
    8476:	0092      	lsls	r2, r2, #2
    8478:	b2d1      	uxtb	r1, r2
    847a:	2216      	movs	r2, #22
    847c:	18ba      	adds	r2, r7, r2
    847e:	7812      	ldrb	r2, [r2, #0]
    8480:	188a      	adds	r2, r1, r2
    8482:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
    8484:	2208      	movs	r2, #8
    8486:	18ba      	adds	r2, r7, r2
    8488:	005b      	lsls	r3, r3, #1
    848a:	18d3      	adds	r3, r2, r3
    848c:	3301      	adds	r3, #1
    848e:	1c0a      	adds	r2, r1, #0
    8490:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8492:	2316      	movs	r3, #22
    8494:	18fb      	adds	r3, r7, r3
    8496:	781a      	ldrb	r2, [r3, #0]
    8498:	2316      	movs	r3, #22
    849a:	18fb      	adds	r3, r7, r3
    849c:	3201      	adds	r2, #1
    849e:	701a      	strb	r2, [r3, #0]
    84a0:	2316      	movs	r3, #22
    84a2:	18fb      	adds	r3, r7, r3
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	2b03      	cmp	r3, #3
    84a8:	d9d0      	bls.n	844c <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
    84aa:	2317      	movs	r3, #23
    84ac:	18fb      	adds	r3, r7, r3
    84ae:	781a      	ldrb	r2, [r3, #0]
    84b0:	2317      	movs	r3, #23
    84b2:	18fb      	adds	r3, r7, r3
    84b4:	3201      	adds	r2, #1
    84b6:	701a      	strb	r2, [r3, #0]
    84b8:	2317      	movs	r3, #23
    84ba:	18fb      	adds	r3, r7, r3
    84bc:	781b      	ldrb	r3, [r3, #0]
    84be:	2b01      	cmp	r3, #1
    84c0:	d9bf      	bls.n	8442 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
    84c2:	2315      	movs	r3, #21
    84c4:	18fb      	adds	r3, r7, r3
    84c6:	2200      	movs	r2, #0
    84c8:	701a      	strb	r2, [r3, #0]
    84ca:	e051      	b.n	8570 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    84cc:	4b33      	ldr	r3, [pc, #204]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    84ce:	2287      	movs	r2, #135	; 0x87
    84d0:	5c9b      	ldrb	r3, [r3, r2]
    84d2:	009a      	lsls	r2, r3, #2
    84d4:	2315      	movs	r3, #21
    84d6:	18fb      	adds	r3, r7, r3
    84d8:	781b      	ldrb	r3, [r3, #0]
    84da:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
    84dc:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    84de:	4b30      	ldr	r3, [pc, #192]	; (85a0 <_eeprom_emulator_move_data_to_spare+0x1c8>)
    84e0:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
    84e2:	2315      	movs	r3, #21
    84e4:	18fb      	adds	r3, r7, r3
    84e6:	781a      	ldrb	r2, [r3, #0]
    84e8:	2308      	movs	r3, #8
    84ea:	18fb      	adds	r3, r7, r3
    84ec:	0052      	lsls	r2, r2, #1
    84ee:	5cd3      	ldrb	r3, [r2, r3]
    84f0:	1dba      	adds	r2, r7, #6
    84f2:	7812      	ldrb	r2, [r2, #0]
    84f4:	429a      	cmp	r2, r3
    84f6:	d10d      	bne.n	8514 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
    84f8:	4b28      	ldr	r3, [pc, #160]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    84fa:	1dba      	adds	r2, r7, #6
    84fc:	2188      	movs	r1, #136	; 0x88
    84fe:	7812      	ldrb	r2, [r2, #0]
    8500:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    8502:	4b26      	ldr	r3, [pc, #152]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8504:	228c      	movs	r2, #140	; 0x8c
    8506:	6839      	ldr	r1, [r7, #0]
    8508:	189b      	adds	r3, r3, r2
    850a:	223c      	movs	r2, #60	; 0x3c
    850c:	0018      	movs	r0, r3
    850e:	4b25      	ldr	r3, [pc, #148]	; (85a4 <_eeprom_emulator_move_data_to_spare+0x1cc>)
    8510:	4798      	blx	r3
    8512:	e00e      	b.n	8532 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
    8514:	2315      	movs	r3, #21
    8516:	18fb      	adds	r3, r7, r3
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	2208      	movs	r2, #8
    851c:	18ba      	adds	r2, r7, r2
    851e:	005b      	lsls	r3, r3, #1
    8520:	18d3      	adds	r3, r2, r3
    8522:	3301      	adds	r3, #1
    8524:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
    8526:	b29b      	uxth	r3, r3
    8528:	4a1f      	ldr	r2, [pc, #124]	; (85a8 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    852a:	0011      	movs	r1, r2
    852c:	0018      	movs	r0, r3
    852e:	4b1f      	ldr	r3, [pc, #124]	; (85ac <_eeprom_emulator_move_data_to_spare+0x1d4>)
    8530:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    8532:	68fb      	ldr	r3, [r7, #12]
    8534:	b29b      	uxth	r3, r3
    8536:	4a1c      	ldr	r2, [pc, #112]	; (85a8 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8538:	0011      	movs	r1, r2
    853a:	0018      	movs	r0, r3
    853c:	4b1c      	ldr	r3, [pc, #112]	; (85b0 <_eeprom_emulator_move_data_to_spare+0x1d8>)
    853e:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    8540:	2315      	movs	r3, #21
    8542:	18fb      	adds	r3, r7, r3
    8544:	781a      	ldrb	r2, [r3, #0]
    8546:	2308      	movs	r3, #8
    8548:	18fb      	adds	r3, r7, r3
    854a:	0052      	lsls	r2, r2, #1
    854c:	5cd3      	ldrb	r3, [r2, r3]
    854e:	0019      	movs	r1, r3
    8550:	68fb      	ldr	r3, [r7, #12]
    8552:	b2da      	uxtb	r2, r3
    8554:	4b11      	ldr	r3, [pc, #68]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8556:	185b      	adds	r3, r3, r1
    8558:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
    855a:	4b10      	ldr	r3, [pc, #64]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    855c:	22c8      	movs	r2, #200	; 0xc8
    855e:	2101      	movs	r1, #1
    8560:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
    8562:	2315      	movs	r3, #21
    8564:	18fb      	adds	r3, r7, r3
    8566:	781a      	ldrb	r2, [r3, #0]
    8568:	2315      	movs	r3, #21
    856a:	18fb      	adds	r3, r7, r3
    856c:	3201      	adds	r2, #1
    856e:	701a      	strb	r2, [r3, #0]
    8570:	2315      	movs	r3, #21
    8572:	18fb      	adds	r3, r7, r3
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	2b01      	cmp	r3, #1
    8578:	d9a8      	bls.n	84cc <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
    857a:	1dfb      	adds	r3, r7, #7
    857c:	781b      	ldrb	r3, [r3, #0]
    857e:	0018      	movs	r0, r3
    8580:	4b0c      	ldr	r3, [pc, #48]	; (85b4 <_eeprom_emulator_move_data_to_spare+0x1dc>)
    8582:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
    8584:	4b05      	ldr	r3, [pc, #20]	; (859c <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8586:	1dfa      	adds	r2, r7, #7
    8588:	2187      	movs	r1, #135	; 0x87
    858a:	7812      	ldrb	r2, [r2, #0]
    858c:	545a      	strb	r2, [r3, r1]

	return error_code;
    858e:	2314      	movs	r3, #20
    8590:	18fb      	adds	r3, r7, r3
    8592:	781b      	ldrb	r3, [r3, #0]
}
    8594:	0018      	movs	r0, r3
    8596:	46bd      	mov	sp, r7
    8598:	b006      	add	sp, #24
    859a:	bd80      	pop	{r7, pc}
    859c:	20000218 	.word	0x20000218
    85a0:	000089d5 	.word	0x000089d5
    85a4:	000170dd 	.word	0x000170dd
    85a8:	200002a0 	.word	0x200002a0
    85ac:	000080b9 	.word	0x000080b9
    85b0:	0000801d 	.word	0x0000801d
    85b4:	00007fd5 	.word	0x00007fd5

000085b8 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
    85b8:	b590      	push	{r4, r7, lr}
    85ba:	b095      	sub	sp, #84	; 0x54
    85bc:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    85be:	2340      	movs	r3, #64	; 0x40
    85c0:	18fb      	adds	r3, r7, r3
    85c2:	4a29      	ldr	r2, [pc, #164]	; (8668 <_eeprom_emulator_create_master_page+0xb0>)
    85c4:	ca13      	ldmia	r2!, {r0, r1, r4}
    85c6:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
    85c8:	003b      	movs	r3, r7
    85ca:	2240      	movs	r2, #64	; 0x40
    85cc:	21ff      	movs	r1, #255	; 0xff
    85ce:	0018      	movs	r0, r3
    85d0:	4b26      	ldr	r3, [pc, #152]	; (866c <_eeprom_emulator_create_master_page+0xb4>)
    85d2:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    85d4:	234f      	movs	r3, #79	; 0x4f
    85d6:	18fb      	adds	r3, r7, r3
    85d8:	2200      	movs	r2, #0
    85da:	701a      	strb	r2, [r3, #0]
    85dc:	e013      	b.n	8606 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
    85de:	234f      	movs	r3, #79	; 0x4f
    85e0:	18fb      	adds	r3, r7, r3
    85e2:	781a      	ldrb	r2, [r3, #0]
    85e4:	234f      	movs	r3, #79	; 0x4f
    85e6:	18fb      	adds	r3, r7, r3
    85e8:	7819      	ldrb	r1, [r3, #0]
    85ea:	2340      	movs	r3, #64	; 0x40
    85ec:	18fb      	adds	r3, r7, r3
    85ee:	0089      	lsls	r1, r1, #2
    85f0:	58c9      	ldr	r1, [r1, r3]
    85f2:	003b      	movs	r3, r7
    85f4:	0092      	lsls	r2, r2, #2
    85f6:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    85f8:	234f      	movs	r3, #79	; 0x4f
    85fa:	18fb      	adds	r3, r7, r3
    85fc:	781a      	ldrb	r2, [r3, #0]
    85fe:	234f      	movs	r3, #79	; 0x4f
    8600:	18fb      	adds	r3, r7, r3
    8602:	3201      	adds	r2, #1
    8604:	701a      	strb	r2, [r3, #0]
    8606:	234f      	movs	r3, #79	; 0x4f
    8608:	18fb      	adds	r3, r7, r3
    860a:	781b      	ldrb	r3, [r3, #0]
    860c:	2b02      	cmp	r3, #2
    860e:	d9e6      	bls.n	85de <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    8610:	003b      	movs	r3, r7
    8612:	2201      	movs	r2, #1
    8614:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    8616:	003b      	movs	r3, r7
    8618:	2201      	movs	r2, #1
    861a:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    861c:	003b      	movs	r3, r7
    861e:	2200      	movs	r2, #0
    8620:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
    8622:	003b      	movs	r3, r7
    8624:	2200      	movs	r2, #0
    8626:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    8628:	4b11      	ldr	r3, [pc, #68]	; (8670 <_eeprom_emulator_create_master_page+0xb8>)
    862a:	891b      	ldrh	r3, [r3, #8]
    862c:	3b01      	subs	r3, #1
    862e:	2b00      	cmp	r3, #0
    8630:	da00      	bge.n	8634 <_eeprom_emulator_create_master_page+0x7c>
    8632:	3303      	adds	r3, #3
    8634:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
    8636:	b2db      	uxtb	r3, r3
    8638:	0018      	movs	r0, r3
    863a:	4b0e      	ldr	r3, [pc, #56]	; (8674 <_eeprom_emulator_create_master_page+0xbc>)
    863c:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    863e:	4b0c      	ldr	r3, [pc, #48]	; (8670 <_eeprom_emulator_create_master_page+0xb8>)
    8640:	891b      	ldrh	r3, [r3, #8]
    8642:	3b01      	subs	r3, #1
    8644:	b29b      	uxth	r3, r3
    8646:	003a      	movs	r2, r7
    8648:	0011      	movs	r1, r2
    864a:	0018      	movs	r0, r3
    864c:	4b0a      	ldr	r3, [pc, #40]	; (8678 <_eeprom_emulator_create_master_page+0xc0>)
    864e:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    8650:	4b07      	ldr	r3, [pc, #28]	; (8670 <_eeprom_emulator_create_master_page+0xb8>)
    8652:	891b      	ldrh	r3, [r3, #8]
    8654:	3b01      	subs	r3, #1
    8656:	b29b      	uxth	r3, r3
    8658:	0018      	movs	r0, r3
    865a:	4b08      	ldr	r3, [pc, #32]	; (867c <_eeprom_emulator_create_master_page+0xc4>)
    865c:	4798      	blx	r3
}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	46bd      	mov	sp, r7
    8662:	b015      	add	sp, #84	; 0x54
    8664:	bd90      	pop	{r4, r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	0001741c 	.word	0x0001741c
    866c:	000170ef 	.word	0x000170ef
    8670:	20000218 	.word	0x20000218
    8674:	00007fd5 	.word	0x00007fd5
    8678:	0000801d 	.word	0x0000801d
    867c:	0000806d 	.word	0x0000806d

00008680 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
    8680:	b590      	push	{r4, r7, lr}
    8682:	b095      	sub	sp, #84	; 0x54
    8684:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    8686:	2340      	movs	r3, #64	; 0x40
    8688:	18fb      	adds	r3, r7, r3
    868a:	4a22      	ldr	r2, [pc, #136]	; (8714 <_eeprom_emulator_verify_master_page+0x94>)
    868c:	ca13      	ldmia	r2!, {r0, r1, r4}
    868e:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    8690:	4b21      	ldr	r3, [pc, #132]	; (8718 <_eeprom_emulator_verify_master_page+0x98>)
    8692:	891b      	ldrh	r3, [r3, #8]
    8694:	3b01      	subs	r3, #1
    8696:	b29b      	uxth	r3, r3
    8698:	003a      	movs	r2, r7
    869a:	0011      	movs	r1, r2
    869c:	0018      	movs	r0, r3
    869e:	4b1f      	ldr	r3, [pc, #124]	; (871c <_eeprom_emulator_verify_master_page+0x9c>)
    86a0:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    86a2:	234f      	movs	r3, #79	; 0x4f
    86a4:	18fb      	adds	r3, r7, r3
    86a6:	2200      	movs	r2, #0
    86a8:	701a      	strb	r2, [r3, #0]
    86aa:	e017      	b.n	86dc <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
    86ac:	234f      	movs	r3, #79	; 0x4f
    86ae:	18fb      	adds	r3, r7, r3
    86b0:	781a      	ldrb	r2, [r3, #0]
    86b2:	003b      	movs	r3, r7
    86b4:	0092      	lsls	r2, r2, #2
    86b6:	58d2      	ldr	r2, [r2, r3]
    86b8:	234f      	movs	r3, #79	; 0x4f
    86ba:	18fb      	adds	r3, r7, r3
    86bc:	7819      	ldrb	r1, [r3, #0]
    86be:	2340      	movs	r3, #64	; 0x40
    86c0:	18fb      	adds	r3, r7, r3
    86c2:	0089      	lsls	r1, r1, #2
    86c4:	58cb      	ldr	r3, [r1, r3]
    86c6:	429a      	cmp	r2, r3
    86c8:	d001      	beq.n	86ce <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
    86ca:	231a      	movs	r3, #26
    86cc:	e01e      	b.n	870c <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    86ce:	234f      	movs	r3, #79	; 0x4f
    86d0:	18fb      	adds	r3, r7, r3
    86d2:	781a      	ldrb	r2, [r3, #0]
    86d4:	234f      	movs	r3, #79	; 0x4f
    86d6:	18fb      	adds	r3, r7, r3
    86d8:	3201      	adds	r2, #1
    86da:	701a      	strb	r2, [r3, #0]
    86dc:	234f      	movs	r3, #79	; 0x4f
    86de:	18fb      	adds	r3, r7, r3
    86e0:	781b      	ldrb	r3, [r3, #0]
    86e2:	2b02      	cmp	r3, #2
    86e4:	d9e2      	bls.n	86ac <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    86e6:	003b      	movs	r3, r7
    86e8:	7bdb      	ldrb	r3, [r3, #15]
    86ea:	2b01      	cmp	r3, #1
    86ec:	d001      	beq.n	86f2 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
    86ee:	2310      	movs	r3, #16
    86f0:	e00c      	b.n	870c <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    86f2:	003b      	movs	r3, r7
    86f4:	7b1b      	ldrb	r3, [r3, #12]
    86f6:	2b01      	cmp	r3, #1
    86f8:	d001      	beq.n	86fe <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
    86fa:	2310      	movs	r3, #16
    86fc:	e006      	b.n	870c <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    86fe:	003b      	movs	r3, r7
    8700:	7b5b      	ldrb	r3, [r3, #13]
    8702:	2b00      	cmp	r3, #0
    8704:	d001      	beq.n	870a <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
    8706:	2310      	movs	r3, #16
    8708:	e000      	b.n	870c <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
    870a:	2300      	movs	r3, #0
}
    870c:	0018      	movs	r0, r3
    870e:	46bd      	mov	sp, r7
    8710:	b015      	add	sp, #84	; 0x54
    8712:	bd90      	pop	{r4, r7, pc}
    8714:	0001741c 	.word	0x0001741c
    8718:	20000218 	.word	0x20000218
    871c:	000080b9 	.word	0x000080b9

00008720 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    8720:	b590      	push	{r4, r7, lr}
    8722:	b087      	sub	sp, #28
    8724:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    8726:	2317      	movs	r3, #23
    8728:	18fb      	adds	r3, r7, r3
    872a:	2200      	movs	r2, #0
    872c:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
    872e:	2310      	movs	r3, #16
    8730:	18fb      	adds	r3, r7, r3
    8732:	0018      	movs	r0, r3
    8734:	4b2e      	ldr	r3, [pc, #184]	; (87f0 <eeprom_emulator_init+0xd0>)
    8736:	4798      	blx	r3
	config.manual_page_write = true;
    8738:	2310      	movs	r3, #16
    873a:	18fb      	adds	r3, r7, r3
    873c:	2201      	movs	r2, #1
    873e:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    8740:	2317      	movs	r3, #23
    8742:	18fc      	adds	r4, r7, r3
    8744:	2310      	movs	r3, #16
    8746:	18fb      	adds	r3, r7, r3
    8748:	0018      	movs	r0, r3
    874a:	4b2a      	ldr	r3, [pc, #168]	; (87f4 <eeprom_emulator_init+0xd4>)
    874c:	4798      	blx	r3
    874e:	0003      	movs	r3, r0
    8750:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    8752:	2317      	movs	r3, #23
    8754:	18fb      	adds	r3, r7, r3
    8756:	781b      	ldrb	r3, [r3, #0]
    8758:	2b05      	cmp	r3, #5
    875a:	d0f1      	beq.n	8740 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    875c:	1d3b      	adds	r3, r7, #4
    875e:	0018      	movs	r0, r3
    8760:	4b25      	ldr	r3, [pc, #148]	; (87f8 <eeprom_emulator_init+0xd8>)
    8762:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    8764:	1d3b      	adds	r3, r7, #4
    8766:	685b      	ldr	r3, [r3, #4]
    8768:	2b0b      	cmp	r3, #11
    876a:	d801      	bhi.n	8770 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
    876c:	2316      	movs	r3, #22
    876e:	e03b      	b.n	87e8 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
    8770:	1d3b      	adds	r3, r7, #4
    8772:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
    8774:	b29a      	uxth	r2, r3
    8776:	4b21      	ldr	r3, [pc, #132]	; (87fc <eeprom_emulator_init+0xdc>)
    8778:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    877a:	1d3b      	adds	r3, r7, #4
    877c:	685b      	ldr	r3, [r3, #4]
    877e:	3b08      	subs	r3, #8
    8780:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
    8782:	b2da      	uxtb	r2, r3
    8784:	4b1d      	ldr	r3, [pc, #116]	; (87fc <eeprom_emulator_init+0xdc>)
    8786:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
    8788:	4b1c      	ldr	r3, [pc, #112]	; (87fc <eeprom_emulator_init+0xdc>)
    878a:	891b      	ldrh	r3, [r3, #8]
    878c:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
    878e:	0013      	movs	r3, r2
    8790:	069b      	lsls	r3, r3, #26
    8792:	1a9b      	subs	r3, r3, r2
    8794:	019b      	lsls	r3, r3, #6
    8796:	2280      	movs	r2, #128	; 0x80
    8798:	02d2      	lsls	r2, r2, #11
    879a:	4694      	mov	ip, r2
    879c:	4463      	add	r3, ip
    879e:	001a      	movs	r2, r3
	_eeprom_instance.flash =
    87a0:	4b16      	ldr	r3, [pc, #88]	; (87fc <eeprom_emulator_init+0xdc>)
    87a2:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    87a4:	4b15      	ldr	r3, [pc, #84]	; (87fc <eeprom_emulator_init+0xdc>)
    87a6:	22c8      	movs	r2, #200	; 0xc8
    87a8:	2100      	movs	r1, #0
    87aa:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    87ac:	4b14      	ldr	r3, [pc, #80]	; (8800 <eeprom_emulator_init+0xe0>)
    87ae:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    87b0:	4b12      	ldr	r3, [pc, #72]	; (87fc <eeprom_emulator_init+0xdc>)
    87b2:	2287      	movs	r2, #135	; 0x87
    87b4:	5c9b      	ldrb	r3, [r3, r2]
    87b6:	2b3f      	cmp	r3, #63	; 0x3f
    87b8:	d101      	bne.n	87be <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
    87ba:	231a      	movs	r3, #26
    87bc:	e014      	b.n	87e8 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
    87be:	2317      	movs	r3, #23
    87c0:	18fc      	adds	r4, r7, r3
    87c2:	4b10      	ldr	r3, [pc, #64]	; (8804 <eeprom_emulator_init+0xe4>)
    87c4:	4798      	blx	r3
    87c6:	0003      	movs	r3, r0
    87c8:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
    87ca:	2317      	movs	r3, #23
    87cc:	18fb      	adds	r3, r7, r3
    87ce:	781b      	ldrb	r3, [r3, #0]
    87d0:	2b00      	cmp	r3, #0
    87d2:	d003      	beq.n	87dc <eeprom_emulator_init+0xbc>
		return error_code;
    87d4:	2317      	movs	r3, #23
    87d6:	18fb      	adds	r3, r7, r3
    87d8:	781b      	ldrb	r3, [r3, #0]
    87da:	e005      	b.n	87e8 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
    87dc:	4b07      	ldr	r3, [pc, #28]	; (87fc <eeprom_emulator_init+0xdc>)
    87de:	2201      	movs	r2, #1
    87e0:	701a      	strb	r2, [r3, #0]

	return error_code;
    87e2:	2317      	movs	r3, #23
    87e4:	18fb      	adds	r3, r7, r3
    87e6:	781b      	ldrb	r3, [r3, #0]
}
    87e8:	0018      	movs	r0, r3
    87ea:	46bd      	mov	sp, r7
    87ec:	b007      	add	sp, #28
    87ee:	bd90      	pop	{r4, r7, pc}
    87f0:	00007f99 	.word	0x00007f99
    87f4:	00002ad5 	.word	0x00002ad5
    87f8:	00002fa1 	.word	0x00002fa1
    87fc:	20000218 	.word	0x20000218
    8800:	000081f5 	.word	0x000081f5
    8804:	00008681 	.word	0x00008681

00008808 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    8808:	b580      	push	{r7, lr}
    880a:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
    880c:	4b04      	ldr	r3, [pc, #16]	; (8820 <eeprom_emulator_erase_memory+0x18>)
    880e:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
    8810:	4b04      	ldr	r3, [pc, #16]	; (8824 <eeprom_emulator_erase_memory+0x1c>)
    8812:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    8814:	4b04      	ldr	r3, [pc, #16]	; (8828 <eeprom_emulator_erase_memory+0x20>)
    8816:	4798      	blx	r3
}
    8818:	46c0      	nop			; (mov r8, r8)
    881a:	46bd      	mov	sp, r7
    881c:	bd80      	pop	{r7, pc}
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	00008109 	.word	0x00008109
    8824:	000085b9 	.word	0x000085b9
    8828:	000081f5 	.word	0x000081f5

0000882c <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
    882c:	b590      	push	{r4, r7, lr}
    882e:	b085      	sub	sp, #20
    8830:	af00      	add	r7, sp, #0
    8832:	0002      	movs	r2, r0
    8834:	6039      	str	r1, [r7, #0]
    8836:	1dfb      	adds	r3, r7, #7
    8838:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    883a:	4b38      	ldr	r3, [pc, #224]	; (891c <eeprom_emulator_write_page+0xf0>)
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	2201      	movs	r2, #1
    8840:	4053      	eors	r3, r2
    8842:	b2db      	uxtb	r3, r3
    8844:	2b00      	cmp	r3, #0
    8846:	d001      	beq.n	884c <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    8848:	231f      	movs	r3, #31
    884a:	e063      	b.n	8914 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    884c:	4b33      	ldr	r3, [pc, #204]	; (891c <eeprom_emulator_write_page+0xf0>)
    884e:	7a9b      	ldrb	r3, [r3, #10]
    8850:	1dfa      	adds	r2, r7, #7
    8852:	7812      	ldrb	r2, [r2, #0]
    8854:	429a      	cmp	r2, r3
    8856:	d301      	bcc.n	885c <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    8858:	2318      	movs	r3, #24
    885a:	e05b      	b.n	8914 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
    885c:	4b2f      	ldr	r3, [pc, #188]	; (891c <eeprom_emulator_write_page+0xf0>)
    885e:	22c8      	movs	r2, #200	; 0xc8
    8860:	5c9b      	ldrb	r3, [r3, r2]
    8862:	2b00      	cmp	r3, #0
    8864:	d008      	beq.n	8878 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    8866:	4b2d      	ldr	r3, [pc, #180]	; (891c <eeprom_emulator_write_page+0xf0>)
    8868:	2288      	movs	r2, #136	; 0x88
    886a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    886c:	1dfa      	adds	r2, r7, #7
    886e:	7812      	ldrb	r2, [r2, #0]
    8870:	429a      	cmp	r2, r3
    8872:	d001      	beq.n	8878 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    8874:	4b2a      	ldr	r3, [pc, #168]	; (8920 <eeprom_emulator_write_page+0xf4>)
    8876:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
    8878:	230e      	movs	r3, #14
    887a:	18fb      	adds	r3, r7, r3
    887c:	2200      	movs	r2, #0
    887e:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    8880:	1dfb      	adds	r3, r7, #7
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	4a25      	ldr	r2, [pc, #148]	; (891c <eeprom_emulator_write_page+0xf0>)
    8886:	18d3      	adds	r3, r2, r3
    8888:	7adb      	ldrb	r3, [r3, #11]
    888a:	220f      	movs	r2, #15
    888c:	18bc      	adds	r4, r7, r2
    888e:	220e      	movs	r2, #14
    8890:	18ba      	adds	r2, r7, r2
    8892:	0011      	movs	r1, r2
    8894:	0018      	movs	r0, r3
    8896:	4b23      	ldr	r3, [pc, #140]	; (8924 <eeprom_emulator_write_page+0xf8>)
    8898:	4798      	blx	r3
    889a:	0003      	movs	r3, r0
    889c:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
    889e:	230f      	movs	r3, #15
    88a0:	18fb      	adds	r3, r7, r3
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	2201      	movs	r2, #1
    88a6:	4053      	eors	r3, r2
    88a8:	b2db      	uxtb	r3, r3
    88aa:	2b00      	cmp	r3, #0
    88ac:	d00e      	beq.n	88cc <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
    88ae:	1dfb      	adds	r3, r7, #7
    88b0:	781b      	ldrb	r3, [r3, #0]
    88b2:	4a1a      	ldr	r2, [pc, #104]	; (891c <eeprom_emulator_write_page+0xf0>)
    88b4:	18d3      	adds	r3, r2, r3
    88b6:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
    88b8:	089b      	lsrs	r3, r3, #2
    88ba:	b2d8      	uxtb	r0, r3
    88bc:	683a      	ldr	r2, [r7, #0]
    88be:	1dfb      	adds	r3, r7, #7
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	0019      	movs	r1, r3
    88c4:	4b18      	ldr	r3, [pc, #96]	; (8928 <eeprom_emulator_write_page+0xfc>)
    88c6:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
    88c8:	2300      	movs	r3, #0
    88ca:	e023      	b.n	8914 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
    88cc:	4b13      	ldr	r3, [pc, #76]	; (891c <eeprom_emulator_write_page+0xf0>)
    88ce:	1dfa      	adds	r2, r7, #7
    88d0:	2188      	movs	r1, #136	; 0x88
    88d2:	7812      	ldrb	r2, [r2, #0]
    88d4:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
    88d6:	4b11      	ldr	r3, [pc, #68]	; (891c <eeprom_emulator_write_page+0xf0>)
    88d8:	228c      	movs	r2, #140	; 0x8c
    88da:	6839      	ldr	r1, [r7, #0]
    88dc:	189b      	adds	r3, r3, r2
    88de:	223c      	movs	r2, #60	; 0x3c
    88e0:	0018      	movs	r0, r3
    88e2:	4b12      	ldr	r3, [pc, #72]	; (892c <eeprom_emulator_write_page+0x100>)
    88e4:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    88e6:	230e      	movs	r3, #14
    88e8:	18fb      	adds	r3, r7, r3
    88ea:	781b      	ldrb	r3, [r3, #0]
    88ec:	b29b      	uxth	r3, r3
    88ee:	4a10      	ldr	r2, [pc, #64]	; (8930 <eeprom_emulator_write_page+0x104>)
    88f0:	0011      	movs	r1, r2
    88f2:	0018      	movs	r0, r3
    88f4:	4b0f      	ldr	r3, [pc, #60]	; (8934 <eeprom_emulator_write_page+0x108>)
    88f6:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
    88f8:	1dfb      	adds	r3, r7, #7
    88fa:	781b      	ldrb	r3, [r3, #0]
    88fc:	220e      	movs	r2, #14
    88fe:	18ba      	adds	r2, r7, r2
    8900:	7811      	ldrb	r1, [r2, #0]
    8902:	4a06      	ldr	r2, [pc, #24]	; (891c <eeprom_emulator_write_page+0xf0>)
    8904:	18d3      	adds	r3, r2, r3
    8906:	1c0a      	adds	r2, r1, #0
    8908:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
    890a:	4b04      	ldr	r3, [pc, #16]	; (891c <eeprom_emulator_write_page+0xf0>)
    890c:	22c8      	movs	r2, #200	; 0xc8
    890e:	2101      	movs	r1, #1
    8910:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
    8912:	2300      	movs	r3, #0
}
    8914:	0018      	movs	r0, r3
    8916:	46bd      	mov	sp, r7
    8918:	b005      	add	sp, #20
    891a:	bd90      	pop	{r4, r7, pc}
    891c:	20000218 	.word	0x20000218
    8920:	000089d5 	.word	0x000089d5
    8924:	00008341 	.word	0x00008341
    8928:	000083d9 	.word	0x000083d9
    892c:	000170dd 	.word	0x000170dd
    8930:	200002a0 	.word	0x200002a0
    8934:	0000801d 	.word	0x0000801d

00008938 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    8938:	b580      	push	{r7, lr}
    893a:	b092      	sub	sp, #72	; 0x48
    893c:	af00      	add	r7, sp, #0
    893e:	0002      	movs	r2, r0
    8940:	6039      	str	r1, [r7, #0]
    8942:	1dfb      	adds	r3, r7, #7
    8944:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    8946:	4b20      	ldr	r3, [pc, #128]	; (89c8 <eeprom_emulator_read_page+0x90>)
    8948:	781b      	ldrb	r3, [r3, #0]
    894a:	2201      	movs	r2, #1
    894c:	4053      	eors	r3, r2
    894e:	b2db      	uxtb	r3, r3
    8950:	2b00      	cmp	r3, #0
    8952:	d001      	beq.n	8958 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    8954:	231f      	movs	r3, #31
    8956:	e033      	b.n	89c0 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    8958:	4b1b      	ldr	r3, [pc, #108]	; (89c8 <eeprom_emulator_read_page+0x90>)
    895a:	7a9b      	ldrb	r3, [r3, #10]
    895c:	1dfa      	adds	r2, r7, #7
    895e:	7812      	ldrb	r2, [r2, #0]
    8960:	429a      	cmp	r2, r3
    8962:	d301      	bcc.n	8968 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    8964:	2318      	movs	r3, #24
    8966:	e02b      	b.n	89c0 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    8968:	4b17      	ldr	r3, [pc, #92]	; (89c8 <eeprom_emulator_read_page+0x90>)
    896a:	22c8      	movs	r2, #200	; 0xc8
    896c:	5c9b      	ldrb	r3, [r3, r2]
    896e:	2b00      	cmp	r3, #0
    8970:	d010      	beq.n	8994 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    8972:	4b15      	ldr	r3, [pc, #84]	; (89c8 <eeprom_emulator_read_page+0x90>)
    8974:	2288      	movs	r2, #136	; 0x88
    8976:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    8978:	1dfa      	adds	r2, r7, #7
    897a:	7812      	ldrb	r2, [r2, #0]
    897c:	429a      	cmp	r2, r3
    897e:	d109      	bne.n	8994 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    8980:	6839      	ldr	r1, [r7, #0]
    8982:	4b11      	ldr	r3, [pc, #68]	; (89c8 <eeprom_emulator_read_page+0x90>)
    8984:	228c      	movs	r2, #140	; 0x8c
    8986:	0008      	movs	r0, r1
    8988:	189b      	adds	r3, r3, r2
    898a:	223c      	movs	r2, #60	; 0x3c
    898c:	0019      	movs	r1, r3
    898e:	4b0f      	ldr	r3, [pc, #60]	; (89cc <eeprom_emulator_read_page+0x94>)
    8990:	4798      	blx	r3
    8992:	e014      	b.n	89be <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
    8994:	1dfb      	adds	r3, r7, #7
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	4a0b      	ldr	r2, [pc, #44]	; (89c8 <eeprom_emulator_read_page+0x90>)
    899a:	18d3      	adds	r3, r2, r3
    899c:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
    899e:	b29b      	uxth	r3, r3
    89a0:	2208      	movs	r2, #8
    89a2:	18ba      	adds	r2, r7, r2
    89a4:	0011      	movs	r1, r2
    89a6:	0018      	movs	r0, r3
    89a8:	4b09      	ldr	r3, [pc, #36]	; (89d0 <eeprom_emulator_read_page+0x98>)
    89aa:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    89ac:	683a      	ldr	r2, [r7, #0]
    89ae:	2308      	movs	r3, #8
    89b0:	18fb      	adds	r3, r7, r3
    89b2:	0010      	movs	r0, r2
    89b4:	3304      	adds	r3, #4
    89b6:	223c      	movs	r2, #60	; 0x3c
    89b8:	0019      	movs	r1, r3
    89ba:	4b04      	ldr	r3, [pc, #16]	; (89cc <eeprom_emulator_read_page+0x94>)
    89bc:	4798      	blx	r3
	}

	return STATUS_OK;
    89be:	2300      	movs	r3, #0
}
    89c0:	0018      	movs	r0, r3
    89c2:	46bd      	mov	sp, r7
    89c4:	b012      	add	sp, #72	; 0x48
    89c6:	bd80      	pop	{r7, pc}
    89c8:	20000218 	.word	0x20000218
    89cc:	000170dd 	.word	0x000170dd
    89d0:	000080b9 	.word	0x000080b9

000089d4 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    89d4:	b580      	push	{r7, lr}
    89d6:	b082      	sub	sp, #8
    89d8:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    89da:	1dfb      	adds	r3, r7, #7
    89dc:	2200      	movs	r2, #0
    89de:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    89e0:	4b10      	ldr	r3, [pc, #64]	; (8a24 <eeprom_emulator_commit_page_buffer+0x50>)
    89e2:	22c8      	movs	r2, #200	; 0xc8
    89e4:	5c9b      	ldrb	r3, [r3, r2]
    89e6:	2201      	movs	r2, #1
    89e8:	4053      	eors	r3, r2
    89ea:	b2db      	uxtb	r3, r3
    89ec:	2b00      	cmp	r3, #0
    89ee:	d001      	beq.n	89f4 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
    89f0:	2300      	movs	r3, #0
    89f2:	e013      	b.n	8a1c <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    89f4:	1dbb      	adds	r3, r7, #6
    89f6:	4a0b      	ldr	r2, [pc, #44]	; (8a24 <eeprom_emulator_commit_page_buffer+0x50>)
    89f8:	2188      	movs	r1, #136	; 0x88
    89fa:	5c52      	ldrb	r2, [r2, r1]
    89fc:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    89fe:	1dbb      	adds	r3, r7, #6
    8a00:	781b      	ldrb	r3, [r3, #0]
    8a02:	4a08      	ldr	r2, [pc, #32]	; (8a24 <eeprom_emulator_commit_page_buffer+0x50>)
    8a04:	18d3      	adds	r3, r2, r3
    8a06:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
    8a08:	b29b      	uxth	r3, r3
    8a0a:	0018      	movs	r0, r3
    8a0c:	4b06      	ldr	r3, [pc, #24]	; (8a28 <eeprom_emulator_commit_page_buffer+0x54>)
    8a0e:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    8a10:	4b04      	ldr	r3, [pc, #16]	; (8a24 <eeprom_emulator_commit_page_buffer+0x50>)
    8a12:	22c8      	movs	r2, #200	; 0xc8
    8a14:	2100      	movs	r1, #0
    8a16:	5499      	strb	r1, [r3, r2]

	return error_code;
    8a18:	1dfb      	adds	r3, r7, #7
    8a1a:	781b      	ldrb	r3, [r3, #0]
}
    8a1c:	0018      	movs	r0, r3
    8a1e:	46bd      	mov	sp, r7
    8a20:	b002      	add	sp, #8
    8a22:	bd80      	pop	{r7, pc}
    8a24:	20000218 	.word	0x20000218
    8a28:	0000806d 	.word	0x0000806d

00008a2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	b082      	sub	sp, #8
    8a30:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    8a32:	4b2f      	ldr	r3, [pc, #188]	; (8af0 <Reset_Handler+0xc4>)
    8a34:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8a36:	4b2f      	ldr	r3, [pc, #188]	; (8af4 <Reset_Handler+0xc8>)
    8a38:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    8a3a:	687a      	ldr	r2, [r7, #4]
    8a3c:	683b      	ldr	r3, [r7, #0]
    8a3e:	429a      	cmp	r2, r3
    8a40:	d00c      	beq.n	8a5c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    8a42:	e007      	b.n	8a54 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8a44:	683b      	ldr	r3, [r7, #0]
    8a46:	1d1a      	adds	r2, r3, #4
    8a48:	603a      	str	r2, [r7, #0]
    8a4a:	687a      	ldr	r2, [r7, #4]
    8a4c:	1d11      	adds	r1, r2, #4
    8a4e:	6079      	str	r1, [r7, #4]
    8a50:	6812      	ldr	r2, [r2, #0]
    8a52:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    8a54:	683a      	ldr	r2, [r7, #0]
    8a56:	4b28      	ldr	r3, [pc, #160]	; (8af8 <Reset_Handler+0xcc>)
    8a58:	429a      	cmp	r2, r3
    8a5a:	d3f3      	bcc.n	8a44 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8a5c:	4b27      	ldr	r3, [pc, #156]	; (8afc <Reset_Handler+0xd0>)
    8a5e:	603b      	str	r3, [r7, #0]
    8a60:	e004      	b.n	8a6c <Reset_Handler+0x40>
                *pDest++ = 0;
    8a62:	683b      	ldr	r3, [r7, #0]
    8a64:	1d1a      	adds	r2, r3, #4
    8a66:	603a      	str	r2, [r7, #0]
    8a68:	2200      	movs	r2, #0
    8a6a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    8a6c:	683a      	ldr	r2, [r7, #0]
    8a6e:	4b24      	ldr	r3, [pc, #144]	; (8b00 <Reset_Handler+0xd4>)
    8a70:	429a      	cmp	r2, r3
    8a72:	d3f6      	bcc.n	8a62 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8a74:	4b23      	ldr	r3, [pc, #140]	; (8b04 <Reset_Handler+0xd8>)
    8a76:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8a78:	4b23      	ldr	r3, [pc, #140]	; (8b08 <Reset_Handler+0xdc>)
    8a7a:	687a      	ldr	r2, [r7, #4]
    8a7c:	21ff      	movs	r1, #255	; 0xff
    8a7e:	438a      	bics	r2, r1
    8a80:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8a82:	4a22      	ldr	r2, [pc, #136]	; (8b0c <Reset_Handler+0xe0>)
    8a84:	2390      	movs	r3, #144	; 0x90
    8a86:	005b      	lsls	r3, r3, #1
    8a88:	2102      	movs	r1, #2
    8a8a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8a8c:	4a20      	ldr	r2, [pc, #128]	; (8b10 <Reset_Handler+0xe4>)
    8a8e:	78d3      	ldrb	r3, [r2, #3]
    8a90:	2103      	movs	r1, #3
    8a92:	438b      	bics	r3, r1
    8a94:	1c19      	adds	r1, r3, #0
    8a96:	2302      	movs	r3, #2
    8a98:	430b      	orrs	r3, r1
    8a9a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8a9c:	4a1c      	ldr	r2, [pc, #112]	; (8b10 <Reset_Handler+0xe4>)
    8a9e:	78d3      	ldrb	r3, [r2, #3]
    8aa0:	210c      	movs	r1, #12
    8aa2:	438b      	bics	r3, r1
    8aa4:	1c19      	adds	r1, r3, #0
    8aa6:	2308      	movs	r3, #8
    8aa8:	430b      	orrs	r3, r1
    8aaa:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    8aac:	4a19      	ldr	r2, [pc, #100]	; (8b14 <Reset_Handler+0xe8>)
    8aae:	7b93      	ldrb	r3, [r2, #14]
    8ab0:	2130      	movs	r1, #48	; 0x30
    8ab2:	438b      	bics	r3, r1
    8ab4:	1c19      	adds	r1, r3, #0
    8ab6:	2320      	movs	r3, #32
    8ab8:	430b      	orrs	r3, r1
    8aba:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8abc:	4a15      	ldr	r2, [pc, #84]	; (8b14 <Reset_Handler+0xe8>)
    8abe:	7b93      	ldrb	r3, [r2, #14]
    8ac0:	210c      	movs	r1, #12
    8ac2:	438b      	bics	r3, r1
    8ac4:	1c19      	adds	r1, r3, #0
    8ac6:	2308      	movs	r3, #8
    8ac8:	430b      	orrs	r3, r1
    8aca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8acc:	4a11      	ldr	r2, [pc, #68]	; (8b14 <Reset_Handler+0xe8>)
    8ace:	7b93      	ldrb	r3, [r2, #14]
    8ad0:	2103      	movs	r1, #3
    8ad2:	438b      	bics	r3, r1
    8ad4:	1c19      	adds	r1, r3, #0
    8ad6:	2302      	movs	r3, #2
    8ad8:	430b      	orrs	r3, r1
    8ada:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    8adc:	4a0e      	ldr	r2, [pc, #56]	; (8b18 <Reset_Handler+0xec>)
    8ade:	6853      	ldr	r3, [r2, #4]
    8ae0:	2180      	movs	r1, #128	; 0x80
    8ae2:	430b      	orrs	r3, r1
    8ae4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    8ae6:	4b0d      	ldr	r3, [pc, #52]	; (8b1c <Reset_Handler+0xf0>)
    8ae8:	4798      	blx	r3

        /* Branch to main function */
        main();
    8aea:	4b0d      	ldr	r3, [pc, #52]	; (8b20 <Reset_Handler+0xf4>)
    8aec:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8aee:	e7fe      	b.n	8aee <Reset_Handler+0xc2>
    8af0:	00017a98 	.word	0x00017a98
    8af4:	20000000 	.word	0x20000000
    8af8:	2000014c 	.word	0x2000014c
    8afc:	20000150 	.word	0x20000150
    8b00:	2000106c 	.word	0x2000106c
    8b04:	00002000 	.word	0x00002000
    8b08:	e000ed00 	.word	0xe000ed00
    8b0c:	41007000 	.word	0x41007000
    8b10:	41005000 	.word	0x41005000
    8b14:	41004800 	.word	0x41004800
    8b18:	41004000 	.word	0x41004000
    8b1c:	00017095 	.word	0x00017095
    8b20:	00010831 	.word	0x00010831

00008b24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8b24:	b580      	push	{r7, lr}
    8b26:	af00      	add	r7, sp, #0
        while (1) {
    8b28:	e7fe      	b.n	8b28 <Dummy_Handler+0x4>
	...

00008b2c <system_pinmux_get_group_from_gpio_pin>:
{
    8b2c:	b580      	push	{r7, lr}
    8b2e:	b084      	sub	sp, #16
    8b30:	af00      	add	r7, sp, #0
    8b32:	0002      	movs	r2, r0
    8b34:	1dfb      	adds	r3, r7, #7
    8b36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8b38:	230f      	movs	r3, #15
    8b3a:	18fb      	adds	r3, r7, r3
    8b3c:	1dfa      	adds	r2, r7, #7
    8b3e:	7812      	ldrb	r2, [r2, #0]
    8b40:	09d2      	lsrs	r2, r2, #7
    8b42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8b44:	230e      	movs	r3, #14
    8b46:	18fb      	adds	r3, r7, r3
    8b48:	1dfa      	adds	r2, r7, #7
    8b4a:	7812      	ldrb	r2, [r2, #0]
    8b4c:	0952      	lsrs	r2, r2, #5
    8b4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8b50:	4b0d      	ldr	r3, [pc, #52]	; (8b88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8b52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8b54:	230f      	movs	r3, #15
    8b56:	18fb      	adds	r3, r7, r3
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	d10f      	bne.n	8b7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8b5e:	230f      	movs	r3, #15
    8b60:	18fb      	adds	r3, r7, r3
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	009b      	lsls	r3, r3, #2
    8b66:	2210      	movs	r2, #16
    8b68:	4694      	mov	ip, r2
    8b6a:	44bc      	add	ip, r7
    8b6c:	4463      	add	r3, ip
    8b6e:	3b08      	subs	r3, #8
    8b70:	681a      	ldr	r2, [r3, #0]
    8b72:	230e      	movs	r3, #14
    8b74:	18fb      	adds	r3, r7, r3
    8b76:	781b      	ldrb	r3, [r3, #0]
    8b78:	01db      	lsls	r3, r3, #7
    8b7a:	18d3      	adds	r3, r2, r3
    8b7c:	e000      	b.n	8b80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8b7e:	2300      	movs	r3, #0
}
    8b80:	0018      	movs	r0, r3
    8b82:	46bd      	mov	sp, r7
    8b84:	b004      	add	sp, #16
    8b86:	bd80      	pop	{r7, pc}
    8b88:	41004400 	.word	0x41004400

00008b8c <adc_is_syncing>:
{
    8b8c:	b580      	push	{r7, lr}
    8b8e:	b084      	sub	sp, #16
    8b90:	af00      	add	r7, sp, #0
    8b92:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	681b      	ldr	r3, [r3, #0]
    8b98:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8b9a:	68fb      	ldr	r3, [r7, #12]
    8b9c:	7e5b      	ldrb	r3, [r3, #25]
    8b9e:	b2db      	uxtb	r3, r3
    8ba0:	b25b      	sxtb	r3, r3
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	da01      	bge.n	8baa <adc_is_syncing+0x1e>
		return true;
    8ba6:	2301      	movs	r3, #1
    8ba8:	e000      	b.n	8bac <adc_is_syncing+0x20>
	return false;
    8baa:	2300      	movs	r3, #0
}
    8bac:	0018      	movs	r0, r3
    8bae:	46bd      	mov	sp, r7
    8bb0:	b004      	add	sp, #16
    8bb2:	bd80      	pop	{r7, pc}

00008bb4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    8bb4:	b580      	push	{r7, lr}
    8bb6:	b086      	sub	sp, #24
    8bb8:	af00      	add	r7, sp, #0
    8bba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8bbc:	687b      	ldr	r3, [r7, #4]
    8bbe:	681b      	ldr	r3, [r3, #0]
    8bc0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    8bc2:	693b      	ldr	r3, [r7, #16]
    8bc4:	7e1b      	ldrb	r3, [r3, #24]
    8bc6:	b2db      	uxtb	r3, r3
    8bc8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    8bca:	2300      	movs	r3, #0
    8bcc:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    8bce:	68fb      	ldr	r3, [r7, #12]
    8bd0:	2201      	movs	r2, #1
    8bd2:	4013      	ands	r3, r2
    8bd4:	d003      	beq.n	8bde <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    8bd6:	697b      	ldr	r3, [r7, #20]
    8bd8:	2201      	movs	r2, #1
    8bda:	4313      	orrs	r3, r2
    8bdc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    8bde:	68fb      	ldr	r3, [r7, #12]
    8be0:	2204      	movs	r2, #4
    8be2:	4013      	ands	r3, r2
    8be4:	d003      	beq.n	8bee <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    8be6:	697b      	ldr	r3, [r7, #20]
    8be8:	2202      	movs	r2, #2
    8bea:	4313      	orrs	r3, r2
    8bec:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    8bee:	68fb      	ldr	r3, [r7, #12]
    8bf0:	2202      	movs	r2, #2
    8bf2:	4013      	ands	r3, r2
    8bf4:	d003      	beq.n	8bfe <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    8bf6:	697b      	ldr	r3, [r7, #20]
    8bf8:	2204      	movs	r2, #4
    8bfa:	4313      	orrs	r3, r2
    8bfc:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    8bfe:	697b      	ldr	r3, [r7, #20]
}
    8c00:	0018      	movs	r0, r3
    8c02:	46bd      	mov	sp, r7
    8c04:	b006      	add	sp, #24
    8c06:	bd80      	pop	{r7, pc}

00008c08 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    8c08:	b580      	push	{r7, lr}
    8c0a:	b084      	sub	sp, #16
    8c0c:	af00      	add	r7, sp, #0
    8c0e:	6078      	str	r0, [r7, #4]
    8c10:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8c12:	687b      	ldr	r3, [r7, #4]
    8c14:	681b      	ldr	r3, [r3, #0]
    8c16:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    8c18:	2300      	movs	r3, #0
    8c1a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    8c1c:	683b      	ldr	r3, [r7, #0]
    8c1e:	2201      	movs	r2, #1
    8c20:	4013      	ands	r3, r2
    8c22:	d003      	beq.n	8c2c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    8c24:	68fb      	ldr	r3, [r7, #12]
    8c26:	2201      	movs	r2, #1
    8c28:	4313      	orrs	r3, r2
    8c2a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    8c2c:	683b      	ldr	r3, [r7, #0]
    8c2e:	2202      	movs	r2, #2
    8c30:	4013      	ands	r3, r2
    8c32:	d003      	beq.n	8c3c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    8c34:	68fb      	ldr	r3, [r7, #12]
    8c36:	2204      	movs	r2, #4
    8c38:	4313      	orrs	r3, r2
    8c3a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    8c3c:	683b      	ldr	r3, [r7, #0]
    8c3e:	2204      	movs	r2, #4
    8c40:	4013      	ands	r3, r2
    8c42:	d003      	beq.n	8c4c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    8c44:	68fb      	ldr	r3, [r7, #12]
    8c46:	2202      	movs	r2, #2
    8c48:	4313      	orrs	r3, r2
    8c4a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    8c4c:	68fb      	ldr	r3, [r7, #12]
    8c4e:	b2da      	uxtb	r2, r3
    8c50:	68bb      	ldr	r3, [r7, #8]
    8c52:	761a      	strb	r2, [r3, #24]
}
    8c54:	46c0      	nop			; (mov r8, r8)
    8c56:	46bd      	mov	sp, r7
    8c58:	b004      	add	sp, #16
    8c5a:	bd80      	pop	{r7, pc}

00008c5c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    8c5c:	b580      	push	{r7, lr}
    8c5e:	b084      	sub	sp, #16
    8c60:	af00      	add	r7, sp, #0
    8c62:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8c64:	687b      	ldr	r3, [r7, #4]
    8c66:	681b      	ldr	r3, [r3, #0]
    8c68:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8c6a:	46c0      	nop			; (mov r8, r8)
    8c6c:	687b      	ldr	r3, [r7, #4]
    8c6e:	0018      	movs	r0, r3
    8c70:	4b0b      	ldr	r3, [pc, #44]	; (8ca0 <adc_enable+0x44>)
    8c72:	4798      	blx	r3
    8c74:	1e03      	subs	r3, r0, #0
    8c76:	d1f9      	bne.n	8c6c <adc_enable+0x10>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    8c78:	68fb      	ldr	r3, [r7, #12]
    8c7a:	781b      	ldrb	r3, [r3, #0]
    8c7c:	b2db      	uxtb	r3, r3
    8c7e:	2202      	movs	r2, #2
    8c80:	4313      	orrs	r3, r2
    8c82:	b2da      	uxtb	r2, r3
    8c84:	68fb      	ldr	r3, [r7, #12]
    8c86:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    8c88:	46c0      	nop			; (mov r8, r8)
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	0018      	movs	r0, r3
    8c8e:	4b04      	ldr	r3, [pc, #16]	; (8ca0 <adc_enable+0x44>)
    8c90:	4798      	blx	r3
    8c92:	1e03      	subs	r3, r0, #0
    8c94:	d1f9      	bne.n	8c8a <adc_enable+0x2e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    8c96:	2300      	movs	r3, #0
}
    8c98:	0018      	movs	r0, r3
    8c9a:	46bd      	mov	sp, r7
    8c9c:	b004      	add	sp, #16
    8c9e:	bd80      	pop	{r7, pc}
    8ca0:	00008b8d 	.word	0x00008b8d

00008ca4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    8ca4:	b580      	push	{r7, lr}
    8ca6:	b084      	sub	sp, #16
    8ca8:	af00      	add	r7, sp, #0
    8caa:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	681b      	ldr	r3, [r3, #0]
    8cb0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	687b      	ldr	r3, [r7, #4]
    8cb6:	0018      	movs	r0, r3
    8cb8:	4b0b      	ldr	r3, [pc, #44]	; (8ce8 <adc_start_conversion+0x44>)
    8cba:	4798      	blx	r3
    8cbc:	1e03      	subs	r3, r0, #0
    8cbe:	d1f9      	bne.n	8cb4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8cc0:	68fb      	ldr	r3, [r7, #12]
    8cc2:	7b1b      	ldrb	r3, [r3, #12]
    8cc4:	b2db      	uxtb	r3, r3
    8cc6:	2202      	movs	r2, #2
    8cc8:	4313      	orrs	r3, r2
    8cca:	b2da      	uxtb	r2, r3
    8ccc:	68fb      	ldr	r3, [r7, #12]
    8cce:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    8cd0:	46c0      	nop			; (mov r8, r8)
    8cd2:	687b      	ldr	r3, [r7, #4]
    8cd4:	0018      	movs	r0, r3
    8cd6:	4b04      	ldr	r3, [pc, #16]	; (8ce8 <adc_start_conversion+0x44>)
    8cd8:	4798      	blx	r3
    8cda:	1e03      	subs	r3, r0, #0
    8cdc:	d1f9      	bne.n	8cd2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    8cde:	46c0      	nop			; (mov r8, r8)
    8ce0:	46bd      	mov	sp, r7
    8ce2:	b004      	add	sp, #16
    8ce4:	bd80      	pop	{r7, pc}
    8ce6:	46c0      	nop			; (mov r8, r8)
    8ce8:	00008b8d 	.word	0x00008b8d

00008cec <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	b084      	sub	sp, #16
    8cf0:	af00      	add	r7, sp, #0
    8cf2:	6078      	str	r0, [r7, #4]
    8cf4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	0018      	movs	r0, r3
    8cfa:	4b18      	ldr	r3, [pc, #96]	; (8d5c <adc_read+0x70>)
    8cfc:	4798      	blx	r3
    8cfe:	0002      	movs	r2, r0
    8d00:	2301      	movs	r3, #1
    8d02:	4013      	ands	r3, r2
    8d04:	d101      	bne.n	8d0a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    8d06:	2305      	movs	r3, #5
    8d08:	e023      	b.n	8d52 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    8d0a:	687b      	ldr	r3, [r7, #4]
    8d0c:	681b      	ldr	r3, [r3, #0]
    8d0e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    8d10:	46c0      	nop			; (mov r8, r8)
    8d12:	687b      	ldr	r3, [r7, #4]
    8d14:	0018      	movs	r0, r3
    8d16:	4b12      	ldr	r3, [pc, #72]	; (8d60 <adc_read+0x74>)
    8d18:	4798      	blx	r3
    8d1a:	1e03      	subs	r3, r0, #0
    8d1c:	d1f9      	bne.n	8d12 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    8d1e:	68fb      	ldr	r3, [r7, #12]
    8d20:	8b5b      	ldrh	r3, [r3, #26]
    8d22:	b29a      	uxth	r2, r3
    8d24:	683b      	ldr	r3, [r7, #0]
    8d26:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    8d28:	687b      	ldr	r3, [r7, #4]
    8d2a:	2101      	movs	r1, #1
    8d2c:	0018      	movs	r0, r3
    8d2e:	4b0d      	ldr	r3, [pc, #52]	; (8d64 <adc_read+0x78>)
    8d30:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    8d32:	687b      	ldr	r3, [r7, #4]
    8d34:	0018      	movs	r0, r3
    8d36:	4b09      	ldr	r3, [pc, #36]	; (8d5c <adc_read+0x70>)
    8d38:	4798      	blx	r3
    8d3a:	0002      	movs	r2, r0
    8d3c:	2304      	movs	r3, #4
    8d3e:	4013      	ands	r3, r2
    8d40:	d006      	beq.n	8d50 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    8d42:	687b      	ldr	r3, [r7, #4]
    8d44:	2104      	movs	r1, #4
    8d46:	0018      	movs	r0, r3
    8d48:	4b06      	ldr	r3, [pc, #24]	; (8d64 <adc_read+0x78>)
    8d4a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    8d4c:	231e      	movs	r3, #30
    8d4e:	e000      	b.n	8d52 <adc_read+0x66>
	}

	return STATUS_OK;
    8d50:	2300      	movs	r3, #0
}
    8d52:	0018      	movs	r0, r3
    8d54:	46bd      	mov	sp, r7
    8d56:	b004      	add	sp, #16
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	00008bb5 	.word	0x00008bb5
    8d60:	00008b8d 	.word	0x00008b8d
    8d64:	00008c09 	.word	0x00008c09

00008d68 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8d68:	b580      	push	{r7, lr}
    8d6a:	b082      	sub	sp, #8
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	0002      	movs	r2, r0
    8d70:	1dfb      	adds	r3, r7, #7
    8d72:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8d74:	1dfb      	adds	r3, r7, #7
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	0018      	movs	r0, r3
    8d7a:	4b03      	ldr	r3, [pc, #12]	; (8d88 <port_get_group_from_gpio_pin+0x20>)
    8d7c:	4798      	blx	r3
    8d7e:	0003      	movs	r3, r0
}
    8d80:	0018      	movs	r0, r3
    8d82:	46bd      	mov	sp, r7
    8d84:	b002      	add	sp, #8
    8d86:	bd80      	pop	{r7, pc}
    8d88:	00008b2d 	.word	0x00008b2d

00008d8c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b082      	sub	sp, #8
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	2200      	movs	r2, #0
    8d98:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8d9a:	687b      	ldr	r3, [r7, #4]
    8d9c:	2201      	movs	r2, #1
    8d9e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    8da0:	687b      	ldr	r3, [r7, #4]
    8da2:	2200      	movs	r2, #0
    8da4:	709a      	strb	r2, [r3, #2]
}
    8da6:	46c0      	nop			; (mov r8, r8)
    8da8:	46bd      	mov	sp, r7
    8daa:	b002      	add	sp, #8
    8dac:	bd80      	pop	{r7, pc}
	...

00008db0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    8db0:	b580      	push	{r7, lr}
    8db2:	b084      	sub	sp, #16
    8db4:	af00      	add	r7, sp, #0
    8db6:	0002      	movs	r2, r0
    8db8:	1dfb      	adds	r3, r7, #7
    8dba:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8dbc:	1dfb      	adds	r3, r7, #7
    8dbe:	781b      	ldrb	r3, [r3, #0]
    8dc0:	0018      	movs	r0, r3
    8dc2:	4b0b      	ldr	r3, [pc, #44]	; (8df0 <port_pin_get_input_level+0x40>)
    8dc4:	4798      	blx	r3
    8dc6:	0003      	movs	r3, r0
    8dc8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8dca:	1dfb      	adds	r3, r7, #7
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	221f      	movs	r2, #31
    8dd0:	4013      	ands	r3, r2
    8dd2:	2201      	movs	r2, #1
    8dd4:	409a      	lsls	r2, r3
    8dd6:	0013      	movs	r3, r2
    8dd8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    8dda:	68fb      	ldr	r3, [r7, #12]
    8ddc:	6a1b      	ldr	r3, [r3, #32]
    8dde:	68ba      	ldr	r2, [r7, #8]
    8de0:	4013      	ands	r3, r2
    8de2:	1e5a      	subs	r2, r3, #1
    8de4:	4193      	sbcs	r3, r2
    8de6:	b2db      	uxtb	r3, r3
}
    8de8:	0018      	movs	r0, r3
    8dea:	46bd      	mov	sp, r7
    8dec:	b004      	add	sp, #16
    8dee:	bd80      	pop	{r7, pc}
    8df0:	00008d69 	.word	0x00008d69

00008df4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8df4:	b580      	push	{r7, lr}
    8df6:	b084      	sub	sp, #16
    8df8:	af00      	add	r7, sp, #0
    8dfa:	0002      	movs	r2, r0
    8dfc:	1dfb      	adds	r3, r7, #7
    8dfe:	701a      	strb	r2, [r3, #0]
    8e00:	1dbb      	adds	r3, r7, #6
    8e02:	1c0a      	adds	r2, r1, #0
    8e04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8e06:	1dfb      	adds	r3, r7, #7
    8e08:	781b      	ldrb	r3, [r3, #0]
    8e0a:	0018      	movs	r0, r3
    8e0c:	4b0d      	ldr	r3, [pc, #52]	; (8e44 <port_pin_set_output_level+0x50>)
    8e0e:	4798      	blx	r3
    8e10:	0003      	movs	r3, r0
    8e12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8e14:	1dfb      	adds	r3, r7, #7
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	221f      	movs	r2, #31
    8e1a:	4013      	ands	r3, r2
    8e1c:	2201      	movs	r2, #1
    8e1e:	409a      	lsls	r2, r3
    8e20:	0013      	movs	r3, r2
    8e22:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8e24:	1dbb      	adds	r3, r7, #6
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d003      	beq.n	8e34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8e2c:	68fb      	ldr	r3, [r7, #12]
    8e2e:	68ba      	ldr	r2, [r7, #8]
    8e30:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8e32:	e002      	b.n	8e3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8e34:	68fb      	ldr	r3, [r7, #12]
    8e36:	68ba      	ldr	r2, [r7, #8]
    8e38:	615a      	str	r2, [r3, #20]
}
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	46bd      	mov	sp, r7
    8e3e:	b004      	add	sp, #16
    8e40:	bd80      	pop	{r7, pc}
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	00008d69 	.word	0x00008d69

00008e48 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	b082      	sub	sp, #8
    8e4c:	af00      	add	r7, sp, #0
    8e4e:	0002      	movs	r2, r0
    8e50:	1dfb      	adds	r3, r7, #7
    8e52:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e54:	4b06      	ldr	r3, [pc, #24]	; (8e70 <system_interrupt_enable+0x28>)
    8e56:	1dfa      	adds	r2, r7, #7
    8e58:	7812      	ldrb	r2, [r2, #0]
    8e5a:	0011      	movs	r1, r2
    8e5c:	221f      	movs	r2, #31
    8e5e:	400a      	ands	r2, r1
    8e60:	2101      	movs	r1, #1
    8e62:	4091      	lsls	r1, r2
    8e64:	000a      	movs	r2, r1
    8e66:	601a      	str	r2, [r3, #0]
}
    8e68:	46c0      	nop			; (mov r8, r8)
    8e6a:	46bd      	mov	sp, r7
    8e6c:	b002      	add	sp, #8
    8e6e:	bd80      	pop	{r7, pc}
    8e70:	e000e100 	.word	0xe000e100

00008e74 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    8e74:	b580      	push	{r7, lr}
    8e76:	b082      	sub	sp, #8
    8e78:	af00      	add	r7, sp, #0
    8e7a:	0002      	movs	r2, r0
    8e7c:	1dfb      	adds	r3, r7, #7
    8e7e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e80:	4a07      	ldr	r2, [pc, #28]	; (8ea0 <system_interrupt_disable+0x2c>)
    8e82:	1dfb      	adds	r3, r7, #7
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	0019      	movs	r1, r3
    8e88:	231f      	movs	r3, #31
    8e8a:	400b      	ands	r3, r1
    8e8c:	2101      	movs	r1, #1
    8e8e:	4099      	lsls	r1, r3
    8e90:	000b      	movs	r3, r1
    8e92:	0019      	movs	r1, r3
    8e94:	2380      	movs	r3, #128	; 0x80
    8e96:	50d1      	str	r1, [r2, r3]
}
    8e98:	46c0      	nop			; (mov r8, r8)
    8e9a:	46bd      	mov	sp, r7
    8e9c:	b002      	add	sp, #8
    8e9e:	bd80      	pop	{r7, pc}
    8ea0:	e000e100 	.word	0xe000e100

00008ea4 <i2c_master_is_syncing>:
{
    8ea4:	b580      	push	{r7, lr}
    8ea6:	b084      	sub	sp, #16
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    8eac:	687b      	ldr	r3, [r7, #4]
    8eae:	681b      	ldr	r3, [r3, #0]
    8eb0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    8eb2:	68fb      	ldr	r3, [r7, #12]
    8eb4:	69db      	ldr	r3, [r3, #28]
    8eb6:	2207      	movs	r2, #7
    8eb8:	4013      	ands	r3, r2
    8eba:	1e5a      	subs	r2, r3, #1
    8ebc:	4193      	sbcs	r3, r2
    8ebe:	b2db      	uxtb	r3, r3
}
    8ec0:	0018      	movs	r0, r3
    8ec2:	46bd      	mov	sp, r7
    8ec4:	b004      	add	sp, #16
    8ec6:	bd80      	pop	{r7, pc}

00008ec8 <_i2c_master_wait_for_sync>:
{
    8ec8:	b580      	push	{r7, lr}
    8eca:	b082      	sub	sp, #8
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    8ed0:	46c0      	nop			; (mov r8, r8)
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	0018      	movs	r0, r3
    8ed6:	4b04      	ldr	r3, [pc, #16]	; (8ee8 <_i2c_master_wait_for_sync+0x20>)
    8ed8:	4798      	blx	r3
    8eda:	1e03      	subs	r3, r0, #0
    8edc:	d1f9      	bne.n	8ed2 <_i2c_master_wait_for_sync+0xa>
}
    8ede:	46c0      	nop			; (mov r8, r8)
    8ee0:	46bd      	mov	sp, r7
    8ee2:	b002      	add	sp, #8
    8ee4:	bd80      	pop	{r7, pc}
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	00008ea5 	.word	0x00008ea5

00008eec <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    8eec:	b580      	push	{r7, lr}
    8eee:	b082      	sub	sp, #8
    8ef0:	af00      	add	r7, sp, #0
    8ef2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    8ef4:	687b      	ldr	r3, [r7, #4]
    8ef6:	2264      	movs	r2, #100	; 0x64
    8ef8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	4a1b      	ldr	r2, [pc, #108]	; (8f6c <i2c_master_get_config_defaults+0x80>)
    8efe:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	2200      	movs	r2, #0
    8f04:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	2200      	movs	r2, #0
    8f0a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    8f0c:	687b      	ldr	r3, [r7, #4]
    8f0e:	2200      	movs	r2, #0
    8f10:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    8f12:	687b      	ldr	r3, [r7, #4]
    8f14:	2280      	movs	r2, #128	; 0x80
    8f16:	0392      	lsls	r2, r2, #14
    8f18:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    8f1a:	687b      	ldr	r3, [r7, #4]
    8f1c:	2201      	movs	r2, #1
    8f1e:	4252      	negs	r2, r2
    8f20:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	2201      	movs	r2, #1
    8f26:	4252      	negs	r2, r2
    8f28:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    8f2a:	687b      	ldr	r3, [r7, #4]
    8f2c:	2200      	movs	r2, #0
    8f2e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	2200      	movs	r2, #0
    8f34:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    8f36:	687b      	ldr	r3, [r7, #4]
    8f38:	2224      	movs	r2, #36	; 0x24
    8f3a:	2100      	movs	r1, #0
    8f3c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    8f3e:	687b      	ldr	r3, [r7, #4]
    8f40:	2200      	movs	r2, #0
    8f42:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	222c      	movs	r2, #44	; 0x2c
    8f48:	2100      	movs	r1, #0
    8f4a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8f4c:	687b      	ldr	r3, [r7, #4]
    8f4e:	222d      	movs	r2, #45	; 0x2d
    8f50:	2100      	movs	r1, #0
    8f52:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    8f54:	687b      	ldr	r3, [r7, #4]
    8f56:	222e      	movs	r2, #46	; 0x2e
    8f58:	2100      	movs	r1, #0
    8f5a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	22d7      	movs	r2, #215	; 0xd7
    8f60:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8f62:	46c0      	nop			; (mov r8, r8)
    8f64:	46bd      	mov	sp, r7
    8f66:	b002      	add	sp, #8
    8f68:	bd80      	pop	{r7, pc}
    8f6a:	46c0      	nop			; (mov r8, r8)
    8f6c:	00000d48 	.word	0x00000d48

00008f70 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    8f70:	b580      	push	{r7, lr}
    8f72:	b084      	sub	sp, #16
    8f74:	af00      	add	r7, sp, #0
    8f76:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	681b      	ldr	r3, [r3, #0]
    8f7c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    8f7e:	2300      	movs	r3, #0
    8f80:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	0018      	movs	r0, r3
    8f86:	4b14      	ldr	r3, [pc, #80]	; (8fd8 <i2c_master_enable+0x68>)
    8f88:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    8f8a:	68bb      	ldr	r3, [r7, #8]
    8f8c:	681b      	ldr	r3, [r3, #0]
    8f8e:	2202      	movs	r2, #2
    8f90:	431a      	orrs	r2, r3
    8f92:	68bb      	ldr	r3, [r7, #8]
    8f94:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	681b      	ldr	r3, [r3, #0]
    8f9a:	0018      	movs	r0, r3
    8f9c:	4b0f      	ldr	r3, [pc, #60]	; (8fdc <i2c_master_enable+0x6c>)
    8f9e:	4798      	blx	r3
    8fa0:	0003      	movs	r3, r0
    8fa2:	0018      	movs	r0, r3
    8fa4:	4b0e      	ldr	r3, [pc, #56]	; (8fe0 <i2c_master_enable+0x70>)
    8fa6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8fa8:	e00c      	b.n	8fc4 <i2c_master_enable+0x54>
		timeout_counter++;
    8faa:	68fb      	ldr	r3, [r7, #12]
    8fac:	3301      	adds	r3, #1
    8fae:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	88db      	ldrh	r3, [r3, #6]
    8fb4:	001a      	movs	r2, r3
    8fb6:	68fb      	ldr	r3, [r7, #12]
    8fb8:	429a      	cmp	r2, r3
    8fba:	d803      	bhi.n	8fc4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    8fbc:	68bb      	ldr	r3, [r7, #8]
    8fbe:	2210      	movs	r2, #16
    8fc0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    8fc2:	e006      	b.n	8fd2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8fc4:	68bb      	ldr	r3, [r7, #8]
    8fc6:	8b5b      	ldrh	r3, [r3, #26]
    8fc8:	b29b      	uxth	r3, r3
    8fca:	001a      	movs	r2, r3
    8fcc:	2310      	movs	r3, #16
    8fce:	4013      	ands	r3, r2
    8fd0:	d0eb      	beq.n	8faa <i2c_master_enable+0x3a>
		}
	}
}
    8fd2:	46bd      	mov	sp, r7
    8fd4:	b004      	add	sp, #16
    8fd6:	bd80      	pop	{r7, pc}
    8fd8:	00008ec9 	.word	0x00008ec9
    8fdc:	00007109 	.word	0x00007109
    8fe0:	00008e49 	.word	0x00008e49

00008fe4 <i2c_slave_is_syncing>:
{
    8fe4:	b580      	push	{r7, lr}
    8fe6:	b084      	sub	sp, #16
    8fe8:	af00      	add	r7, sp, #0
    8fea:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	681b      	ldr	r3, [r3, #0]
    8ff0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    8ff2:	68fb      	ldr	r3, [r7, #12]
    8ff4:	69db      	ldr	r3, [r3, #28]
    8ff6:	2203      	movs	r2, #3
    8ff8:	4013      	ands	r3, r2
    8ffa:	1e5a      	subs	r2, r3, #1
    8ffc:	4193      	sbcs	r3, r2
    8ffe:	b2db      	uxtb	r3, r3
}
    9000:	0018      	movs	r0, r3
    9002:	46bd      	mov	sp, r7
    9004:	b004      	add	sp, #16
    9006:	bd80      	pop	{r7, pc}

00009008 <_i2c_slave_wait_for_sync>:
{
    9008:	b580      	push	{r7, lr}
    900a:	b082      	sub	sp, #8
    900c:	af00      	add	r7, sp, #0
    900e:	6078      	str	r0, [r7, #4]
	while (i2c_slave_is_syncing(module)) {
    9010:	46c0      	nop			; (mov r8, r8)
    9012:	687b      	ldr	r3, [r7, #4]
    9014:	0018      	movs	r0, r3
    9016:	4b04      	ldr	r3, [pc, #16]	; (9028 <_i2c_slave_wait_for_sync+0x20>)
    9018:	4798      	blx	r3
    901a:	1e03      	subs	r3, r0, #0
    901c:	d1f9      	bne.n	9012 <_i2c_slave_wait_for_sync+0xa>
}
    901e:	46c0      	nop			; (mov r8, r8)
    9020:	46bd      	mov	sp, r7
    9022:	b002      	add	sp, #8
    9024:	bd80      	pop	{r7, pc}
    9026:	46c0      	nop			; (mov r8, r8)
    9028:	00008fe5 	.word	0x00008fe5

0000902c <i2c_slave_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initialized
 */
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
    902c:	b580      	push	{r7, lr}
    902e:	b082      	sub	sp, #8
    9030:	af00      	add	r7, sp, #0
    9032:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    9034:	687b      	ldr	r3, [r7, #4]
    9036:	2200      	movs	r2, #0
    9038:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    903a:	687b      	ldr	r3, [r7, #4]
    903c:	2280      	movs	r2, #128	; 0x80
    903e:	0392      	lsls	r2, r2, #14
    9040:	605a      	str	r2, [r3, #4]
	config->buffer_timeout = 65535;
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	2201      	movs	r2, #1
    9046:	4252      	negs	r2, r2
    9048:	811a      	strh	r2, [r3, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    904a:	687b      	ldr	r3, [r7, #4]
    904c:	2200      	movs	r2, #0
    904e:	815a      	strh	r2, [r3, #10]
	config->address = 0;
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	2200      	movs	r2, #0
    9054:	819a      	strh	r2, [r3, #12]
	config->address_mask = 0;
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	2200      	movs	r2, #0
    905a:	81da      	strh	r2, [r3, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	2200      	movs	r2, #0
    9060:	741a      	strb	r2, [r3, #16]
#endif
	config->enable_general_call_address = false;
    9062:	687b      	ldr	r3, [r7, #4]
    9064:	2200      	movs	r2, #0
    9066:	745a      	strb	r2, [r3, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	2200      	movs	r2, #0
    906c:	615a      	str	r2, [r3, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	2200      	movs	r2, #0
    9072:	761a      	strb	r2, [r3, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    9074:	687b      	ldr	r3, [r7, #4]
    9076:	2200      	movs	r2, #0
    9078:	765a      	strb	r2, [r3, #25]
	config->run_in_standby = false;
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	2200      	movs	r2, #0
    907e:	769a      	strb	r2, [r3, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	2200      	movs	r2, #0
    9084:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9086:	687b      	ldr	r3, [r7, #4]
    9088:	2200      	movs	r2, #0
    908a:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	2224      	movs	r2, #36	; 0x24
    9090:	2100      	movs	r1, #0
    9092:	5499      	strb	r1, [r3, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	2225      	movs	r2, #37	; 0x25
    9098:	2100      	movs	r1, #0
    909a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	2226      	movs	r2, #38	; 0x26
    90a0:	2100      	movs	r1, #0
    90a2:	5499      	strb	r1, [r3, r2]
#endif
}
    90a4:	46c0      	nop			; (mov r8, r8)
    90a6:	46bd      	mov	sp, r7
    90a8:	b002      	add	sp, #8
    90aa:	bd80      	pop	{r7, pc}

000090ac <i2c_slave_enable>:
 *
 * \param[in]  module Pointer to the software module struct
 */
static inline void i2c_slave_enable(
		const struct i2c_slave_module *const module)
{
    90ac:	b580      	push	{r7, lr}
    90ae:	b084      	sub	sp, #16
    90b0:	af00      	add	r7, sp, #0
    90b2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	681b      	ldr	r3, [r3, #0]
    90b8:	60fb      	str	r3, [r7, #12]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	681b      	ldr	r3, [r3, #0]
    90be:	0018      	movs	r0, r3
    90c0:	4b09      	ldr	r3, [pc, #36]	; (90e8 <i2c_slave_enable+0x3c>)
    90c2:	4798      	blx	r3
    90c4:	0003      	movs	r3, r0
    90c6:	0018      	movs	r0, r3
    90c8:	4b08      	ldr	r3, [pc, #32]	; (90ec <i2c_slave_enable+0x40>)
    90ca:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	0018      	movs	r0, r3
    90d0:	4b07      	ldr	r3, [pc, #28]	; (90f0 <i2c_slave_enable+0x44>)
    90d2:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    90d4:	68fb      	ldr	r3, [r7, #12]
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	2202      	movs	r2, #2
    90da:	431a      	orrs	r2, r3
    90dc:	68fb      	ldr	r3, [r7, #12]
    90de:	601a      	str	r2, [r3, #0]
}
    90e0:	46c0      	nop			; (mov r8, r8)
    90e2:	46bd      	mov	sp, r7
    90e4:	b004      	add	sp, #16
    90e6:	bd80      	pop	{r7, pc}
    90e8:	00007109 	.word	0x00007109
    90ec:	00008e49 	.word	0x00008e49
    90f0:	00009009 	.word	0x00009009

000090f4 <i2c_slave_enable_callback>:
 * \param[in]      callback_type  Callback type to enable
 */
static inline void i2c_slave_enable_callback(
		struct i2c_slave_module *const module,
		enum i2c_slave_callback callback_type)
{
    90f4:	b580      	push	{r7, lr}
    90f6:	b084      	sub	sp, #16
    90f8:	af00      	add	r7, sp, #0
    90fa:	6078      	str	r0, [r7, #4]
    90fc:	000a      	movs	r2, r1
    90fe:	1cfb      	adds	r3, r7, #3
    9100:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	2225      	movs	r2, #37	; 0x25
    9106:	5c9b      	ldrb	r3, [r3, r2]
    9108:	b2db      	uxtb	r3, r3
    910a:	b25a      	sxtb	r2, r3
    910c:	1cfb      	adds	r3, r7, #3
    910e:	781b      	ldrb	r3, [r3, #0]
    9110:	2101      	movs	r1, #1
    9112:	4099      	lsls	r1, r3
    9114:	000b      	movs	r3, r1
    9116:	b25b      	sxtb	r3, r3
    9118:	4313      	orrs	r3, r2
    911a:	b25b      	sxtb	r3, r3
    911c:	b2d9      	uxtb	r1, r3
    911e:	687b      	ldr	r3, [r7, #4]
    9120:	2225      	movs	r2, #37	; 0x25
    9122:	5499      	strb	r1, [r3, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	681b      	ldr	r3, [r3, #0]
    9128:	60fb      	str	r3, [r7, #12]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
    912a:	1cfb      	adds	r3, r7, #3
    912c:	781b      	ldrb	r3, [r3, #0]
    912e:	2b02      	cmp	r3, #2
    9130:	d003      	beq.n	913a <i2c_slave_enable_callback+0x46>
    9132:	1cfb      	adds	r3, r7, #3
    9134:	781b      	ldrb	r3, [r3, #0]
    9136:	2b03      	cmp	r3, #3
    9138:	d102      	bne.n	9140 <i2c_slave_enable_callback+0x4c>
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    913a:	68fb      	ldr	r3, [r7, #12]
    913c:	2202      	movs	r2, #2
    913e:	759a      	strb	r2, [r3, #22]
	}
}
    9140:	46c0      	nop			; (mov r8, r8)
    9142:	46bd      	mov	sp, r7
    9144:	b004      	add	sp, #16
    9146:	bd80      	pop	{r7, pc}

00009148 <usart_is_syncing>:
{
    9148:	b580      	push	{r7, lr}
    914a:	b084      	sub	sp, #16
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    9150:	687b      	ldr	r3, [r7, #4]
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    9156:	68fb      	ldr	r3, [r7, #12]
    9158:	69db      	ldr	r3, [r3, #28]
    915a:	1e5a      	subs	r2, r3, #1
    915c:	4193      	sbcs	r3, r2
    915e:	b2db      	uxtb	r3, r3
}
    9160:	0018      	movs	r0, r3
    9162:	46bd      	mov	sp, r7
    9164:	b004      	add	sp, #16
    9166:	bd80      	pop	{r7, pc}

00009168 <_usart_wait_for_sync>:
{
    9168:	b580      	push	{r7, lr}
    916a:	b082      	sub	sp, #8
    916c:	af00      	add	r7, sp, #0
    916e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    9170:	46c0      	nop			; (mov r8, r8)
    9172:	687b      	ldr	r3, [r7, #4]
    9174:	0018      	movs	r0, r3
    9176:	4b04      	ldr	r3, [pc, #16]	; (9188 <_usart_wait_for_sync+0x20>)
    9178:	4798      	blx	r3
    917a:	1e03      	subs	r3, r0, #0
    917c:	d1f9      	bne.n	9172 <_usart_wait_for_sync+0xa>
}
    917e:	46c0      	nop			; (mov r8, r8)
    9180:	46bd      	mov	sp, r7
    9182:	b002      	add	sp, #8
    9184:	bd80      	pop	{r7, pc}
    9186:	46c0      	nop			; (mov r8, r8)
    9188:	00009149 	.word	0x00009149

0000918c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    918c:	b580      	push	{r7, lr}
    918e:	b082      	sub	sp, #8
    9190:	af00      	add	r7, sp, #0
    9192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9194:	687b      	ldr	r3, [r7, #4]
    9196:	2280      	movs	r2, #128	; 0x80
    9198:	05d2      	lsls	r2, r2, #23
    919a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	2200      	movs	r2, #0
    91a0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	22ff      	movs	r2, #255	; 0xff
    91a6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	2200      	movs	r2, #0
    91ac:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	2200      	movs	r2, #0
    91b2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	2296      	movs	r2, #150	; 0x96
    91b8:	0192      	lsls	r2, r2, #6
    91ba:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    91bc:	687b      	ldr	r3, [r7, #4]
    91be:	2224      	movs	r2, #36	; 0x24
    91c0:	2101      	movs	r1, #1
    91c2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    91c4:	687b      	ldr	r3, [r7, #4]
    91c6:	2225      	movs	r2, #37	; 0x25
    91c8:	2101      	movs	r1, #1
    91ca:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    91cc:	687b      	ldr	r3, [r7, #4]
    91ce:	2226      	movs	r2, #38	; 0x26
    91d0:	2100      	movs	r1, #0
    91d2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	2227      	movs	r2, #39	; 0x27
    91d8:	2100      	movs	r1, #0
    91da:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    91dc:	687b      	ldr	r3, [r7, #4]
    91de:	2200      	movs	r2, #0
    91e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    91e2:	687b      	ldr	r3, [r7, #4]
    91e4:	2288      	movs	r2, #136	; 0x88
    91e6:	0352      	lsls	r2, r2, #13
    91e8:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    91ea:	687b      	ldr	r3, [r7, #4]
    91ec:	222c      	movs	r2, #44	; 0x2c
    91ee:	2100      	movs	r1, #0
    91f0:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    91f2:	687b      	ldr	r3, [r7, #4]
    91f4:	222d      	movs	r2, #45	; 0x2d
    91f6:	2100      	movs	r1, #0
    91f8:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    91fa:	687b      	ldr	r3, [r7, #4]
    91fc:	2200      	movs	r2, #0
    91fe:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9200:	687b      	ldr	r3, [r7, #4]
    9202:	2200      	movs	r2, #0
    9204:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9206:	687b      	ldr	r3, [r7, #4]
    9208:	2200      	movs	r2, #0
    920a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    920c:	687b      	ldr	r3, [r7, #4]
    920e:	2200      	movs	r2, #0
    9210:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    9212:	687b      	ldr	r3, [r7, #4]
    9214:	2200      	movs	r2, #0
    9216:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	2200      	movs	r2, #0
    921c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	2200      	movs	r2, #0
    9222:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	2200      	movs	r2, #0
    9228:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	2200      	movs	r2, #0
    922e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	2200      	movs	r2, #0
    9234:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9236:	687b      	ldr	r3, [r7, #4]
    9238:	2213      	movs	r2, #19
    923a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    923c:	687b      	ldr	r3, [r7, #4]
    923e:	2200      	movs	r2, #0
    9240:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    9242:	46c0      	nop			; (mov r8, r8)
    9244:	46bd      	mov	sp, r7
    9246:	b002      	add	sp, #8
    9248:	bd80      	pop	{r7, pc}
	...

0000924c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    924c:	b580      	push	{r7, lr}
    924e:	b084      	sub	sp, #16
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	681b      	ldr	r3, [r3, #0]
    9258:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    925a:	687b      	ldr	r3, [r7, #4]
    925c:	681b      	ldr	r3, [r3, #0]
    925e:	0018      	movs	r0, r3
    9260:	4b09      	ldr	r3, [pc, #36]	; (9288 <usart_enable+0x3c>)
    9262:	4798      	blx	r3
    9264:	0003      	movs	r3, r0
    9266:	0018      	movs	r0, r3
    9268:	4b08      	ldr	r3, [pc, #32]	; (928c <usart_enable+0x40>)
    926a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	0018      	movs	r0, r3
    9270:	4b07      	ldr	r3, [pc, #28]	; (9290 <usart_enable+0x44>)
    9272:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9274:	68fb      	ldr	r3, [r7, #12]
    9276:	681b      	ldr	r3, [r3, #0]
    9278:	2202      	movs	r2, #2
    927a:	431a      	orrs	r2, r3
    927c:	68fb      	ldr	r3, [r7, #12]
    927e:	601a      	str	r2, [r3, #0]
}
    9280:	46c0      	nop			; (mov r8, r8)
    9282:	46bd      	mov	sp, r7
    9284:	b004      	add	sp, #16
    9286:	bd80      	pop	{r7, pc}
    9288:	00007109 	.word	0x00007109
    928c:	00008e49 	.word	0x00008e49
    9290:	00009169 	.word	0x00009169

00009294 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    9294:	b580      	push	{r7, lr}
    9296:	b084      	sub	sp, #16
    9298:	af00      	add	r7, sp, #0
    929a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	681b      	ldr	r3, [r3, #0]
    92a0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	681b      	ldr	r3, [r3, #0]
    92a6:	0018      	movs	r0, r3
    92a8:	4b0a      	ldr	r3, [pc, #40]	; (92d4 <usart_disable+0x40>)
    92aa:	4798      	blx	r3
    92ac:	0003      	movs	r3, r0
    92ae:	0018      	movs	r0, r3
    92b0:	4b09      	ldr	r3, [pc, #36]	; (92d8 <usart_disable+0x44>)
    92b2:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	0018      	movs	r0, r3
    92b8:	4b08      	ldr	r3, [pc, #32]	; (92dc <usart_disable+0x48>)
    92ba:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    92bc:	68fb      	ldr	r3, [r7, #12]
    92be:	681b      	ldr	r3, [r3, #0]
    92c0:	2202      	movs	r2, #2
    92c2:	4393      	bics	r3, r2
    92c4:	001a      	movs	r2, r3
    92c6:	68fb      	ldr	r3, [r7, #12]
    92c8:	601a      	str	r2, [r3, #0]
}
    92ca:	46c0      	nop			; (mov r8, r8)
    92cc:	46bd      	mov	sp, r7
    92ce:	b004      	add	sp, #16
    92d0:	bd80      	pop	{r7, pc}
    92d2:	46c0      	nop			; (mov r8, r8)
    92d4:	00007109 	.word	0x00007109
    92d8:	00008e75 	.word	0x00008e75
    92dc:	00009169 	.word	0x00009169

000092e0 <tc_is_syncing>:
{
    92e0:	b580      	push	{r7, lr}
    92e2:	b084      	sub	sp, #16
    92e4:	af00      	add	r7, sp, #0
    92e6:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	681b      	ldr	r3, [r3, #0]
    92ec:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	7bdb      	ldrb	r3, [r3, #15]
    92f2:	b2db      	uxtb	r3, r3
    92f4:	001a      	movs	r2, r3
    92f6:	2380      	movs	r3, #128	; 0x80
    92f8:	4013      	ands	r3, r2
    92fa:	1e5a      	subs	r2, r3, #1
    92fc:	4193      	sbcs	r3, r2
    92fe:	b2db      	uxtb	r3, r3
}
    9300:	0018      	movs	r0, r3
    9302:	46bd      	mov	sp, r7
    9304:	b004      	add	sp, #16
    9306:	bd80      	pop	{r7, pc}

00009308 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    9308:	b580      	push	{r7, lr}
    930a:	b082      	sub	sp, #8
    930c:	af00      	add	r7, sp, #0
    930e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	2200      	movs	r2, #0
    9314:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    9316:	687b      	ldr	r3, [r7, #4]
    9318:	2200      	movs	r2, #0
    931a:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    931c:	687b      	ldr	r3, [r7, #4]
    931e:	2200      	movs	r2, #0
    9320:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	2200      	movs	r2, #0
    9326:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	2200      	movs	r2, #0
    932c:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    932e:	687b      	ldr	r3, [r7, #4]
    9330:	2200      	movs	r2, #0
    9332:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9334:	687b      	ldr	r3, [r7, #4]
    9336:	2200      	movs	r2, #0
    9338:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	2200      	movs	r2, #0
    933e:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9340:	687b      	ldr	r3, [r7, #4]
    9342:	2200      	movs	r2, #0
    9344:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    9346:	687b      	ldr	r3, [r7, #4]
    9348:	2200      	movs	r2, #0
    934a:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    934c:	687b      	ldr	r3, [r7, #4]
    934e:	2200      	movs	r2, #0
    9350:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	2200      	movs	r2, #0
    9356:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    9358:	687b      	ldr	r3, [r7, #4]
    935a:	2200      	movs	r2, #0
    935c:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	2200      	movs	r2, #0
    9362:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	2200      	movs	r2, #0
    9368:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	2200      	movs	r2, #0
    936e:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    9370:	687b      	ldr	r3, [r7, #4]
    9372:	2200      	movs	r2, #0
    9374:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    9376:	687b      	ldr	r3, [r7, #4]
    9378:	2200      	movs	r2, #0
    937a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	2200      	movs	r2, #0
    9380:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	2200      	movs	r2, #0
    9386:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    9388:	46c0      	nop			; (mov r8, r8)
    938a:	46bd      	mov	sp, r7
    938c:	b002      	add	sp, #8
    938e:	bd80      	pop	{r7, pc}

00009390 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    9390:	b580      	push	{r7, lr}
    9392:	b084      	sub	sp, #16
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9398:	687b      	ldr	r3, [r7, #4]
    939a:	681b      	ldr	r3, [r3, #0]
    939c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    939e:	46c0      	nop			; (mov r8, r8)
    93a0:	687b      	ldr	r3, [r7, #4]
    93a2:	0018      	movs	r0, r3
    93a4:	4b07      	ldr	r3, [pc, #28]	; (93c4 <tc_enable+0x34>)
    93a6:	4798      	blx	r3
    93a8:	1e03      	subs	r3, r0, #0
    93aa:	d1f9      	bne.n	93a0 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    93ac:	68fb      	ldr	r3, [r7, #12]
    93ae:	881b      	ldrh	r3, [r3, #0]
    93b0:	b29b      	uxth	r3, r3
    93b2:	2202      	movs	r2, #2
    93b4:	4313      	orrs	r3, r2
    93b6:	b29a      	uxth	r2, r3
    93b8:	68fb      	ldr	r3, [r7, #12]
    93ba:	801a      	strh	r2, [r3, #0]
}
    93bc:	46c0      	nop			; (mov r8, r8)
    93be:	46bd      	mov	sp, r7
    93c0:	b004      	add	sp, #16
    93c2:	bd80      	pop	{r7, pc}
    93c4:	000092e1 	.word	0x000092e1

000093c8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    93c8:	b580      	push	{r7, lr}
    93ca:	b084      	sub	sp, #16
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    93d0:	687b      	ldr	r3, [r7, #4]
    93d2:	681b      	ldr	r3, [r3, #0]
    93d4:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	68fb      	ldr	r3, [r7, #12]
    93da:	689b      	ldr	r3, [r3, #8]
    93dc:	2202      	movs	r2, #2
    93de:	4013      	ands	r3, r2
    93e0:	d1fa      	bne.n	93d8 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    93e2:	68fb      	ldr	r3, [r7, #12]
    93e4:	681b      	ldr	r3, [r3, #0]
    93e6:	2202      	movs	r2, #2
    93e8:	431a      	orrs	r2, r3
    93ea:	68fb      	ldr	r3, [r7, #12]
    93ec:	601a      	str	r2, [r3, #0]
}
    93ee:	46c0      	nop			; (mov r8, r8)
    93f0:	46bd      	mov	sp, r7
    93f2:	b004      	add	sp, #16
    93f4:	bd80      	pop	{r7, pc}
	...

000093f8 <initIMU>:


float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

void initIMU()
{
    93f8:	b580      	push	{r7, lr}
    93fa:	b082      	sub	sp, #8
    93fc:	af00      	add	r7, sp, #0
	settings.device.agAddress = LSM9DS1_AG_ADDR;
    93fe:	4b4f      	ldr	r3, [pc, #316]	; (953c <initIMU+0x144>)
    9400:	226b      	movs	r2, #107	; 0x6b
    9402:	705a      	strb	r2, [r3, #1]
	settings.device.mAddress = LSM9DS1_M_ADDR;
    9404:	4b4d      	ldr	r3, [pc, #308]	; (953c <initIMU+0x144>)
    9406:	221e      	movs	r2, #30
    9408:	709a      	strb	r2, [r3, #2]

	settings.gyro.enabled = true;
    940a:	4b4c      	ldr	r3, [pc, #304]	; (953c <initIMU+0x144>)
    940c:	2201      	movs	r2, #1
    940e:	711a      	strb	r2, [r3, #4]
	settings.gyro.enableX = true;
    9410:	4b4a      	ldr	r3, [pc, #296]	; (953c <initIMU+0x144>)
    9412:	2201      	movs	r2, #1
    9414:	745a      	strb	r2, [r3, #17]
	settings.gyro.enableY = true;
    9416:	4b49      	ldr	r3, [pc, #292]	; (953c <initIMU+0x144>)
    9418:	2201      	movs	r2, #1
    941a:	749a      	strb	r2, [r3, #18]
	settings.gyro.enableZ = true;
    941c:	4b47      	ldr	r3, [pc, #284]	; (953c <initIMU+0x144>)
    941e:	2201      	movs	r2, #1
    9420:	74da      	strb	r2, [r3, #19]
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;//245
    9422:	4b46      	ldr	r3, [pc, #280]	; (953c <initIMU+0x144>)
    9424:	22f5      	movs	r2, #245	; 0xf5
    9426:	80da      	strh	r2, [r3, #6]
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
    9428:	4b44      	ldr	r3, [pc, #272]	; (953c <initIMU+0x144>)
    942a:	2206      	movs	r2, #6
    942c:	721a      	strb	r2, [r3, #8]
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
    942e:	4b43      	ldr	r3, [pc, #268]	; (953c <initIMU+0x144>)
    9430:	2200      	movs	r2, #0
    9432:	725a      	strb	r2, [r3, #9]
	settings.gyro.lowPowerEnable = false;
    9434:	4b41      	ldr	r3, [pc, #260]	; (953c <initIMU+0x144>)
    9436:	2200      	movs	r2, #0
    9438:	729a      	strb	r2, [r3, #10]
	settings.gyro.HPFEnable = false;
    943a:	4b40      	ldr	r3, [pc, #256]	; (953c <initIMU+0x144>)
    943c:	2200      	movs	r2, #0
    943e:	72da      	strb	r2, [r3, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
    9440:	4b3e      	ldr	r3, [pc, #248]	; (953c <initIMU+0x144>)
    9442:	2200      	movs	r2, #0
    9444:	731a      	strb	r2, [r3, #12]
	settings.gyro.flipX = false;
    9446:	4b3d      	ldr	r3, [pc, #244]	; (953c <initIMU+0x144>)
    9448:	2200      	movs	r2, #0
    944a:	735a      	strb	r2, [r3, #13]
	settings.gyro.flipY = false;
    944c:	4b3b      	ldr	r3, [pc, #236]	; (953c <initIMU+0x144>)
    944e:	2200      	movs	r2, #0
    9450:	739a      	strb	r2, [r3, #14]
	settings.gyro.flipZ = false;
    9452:	4b3a      	ldr	r3, [pc, #232]	; (953c <initIMU+0x144>)
    9454:	2200      	movs	r2, #0
    9456:	73da      	strb	r2, [r3, #15]
	settings.gyro.orientation = 0;
    9458:	4b38      	ldr	r3, [pc, #224]	; (953c <initIMU+0x144>)
    945a:	2200      	movs	r2, #0
    945c:	741a      	strb	r2, [r3, #16]
	settings.gyro.latchInterrupt = true;
    945e:	4b37      	ldr	r3, [pc, #220]	; (953c <initIMU+0x144>)
    9460:	2201      	movs	r2, #1
    9462:	751a      	strb	r2, [r3, #20]

	settings.accel.enabled = true;
    9464:	4b35      	ldr	r3, [pc, #212]	; (953c <initIMU+0x144>)
    9466:	2201      	movs	r2, #1
    9468:	759a      	strb	r2, [r3, #22]
	settings.accel.enableX = true;
    946a:	4b34      	ldr	r3, [pc, #208]	; (953c <initIMU+0x144>)
    946c:	2201      	movs	r2, #1
    946e:	765a      	strb	r2, [r3, #25]
	settings.accel.enableY = true;
    9470:	4b32      	ldr	r3, [pc, #200]	; (953c <initIMU+0x144>)
    9472:	2201      	movs	r2, #1
    9474:	769a      	strb	r2, [r3, #26]
	settings.accel.enableZ = true;
    9476:	4b31      	ldr	r3, [pc, #196]	; (953c <initIMU+0x144>)
    9478:	2201      	movs	r2, #1
    947a:	76da      	strb	r2, [r3, #27]
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 16;//8
    947c:	4b2f      	ldr	r3, [pc, #188]	; (953c <initIMU+0x144>)
    947e:	2210      	movs	r2, #16
    9480:	75da      	strb	r2, [r3, #23]
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
    9482:	4b2e      	ldr	r3, [pc, #184]	; (953c <initIMU+0x144>)
    9484:	2206      	movs	r2, #6
    9486:	761a      	strb	r2, [r3, #24]
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = -1;
    9488:	4b2c      	ldr	r3, [pc, #176]	; (953c <initIMU+0x144>)
    948a:	22ff      	movs	r2, #255	; 0xff
    948c:	771a      	strb	r2, [r3, #28]
	settings.accel.highResEnable = false;
    948e:	4b2b      	ldr	r3, [pc, #172]	; (953c <initIMU+0x144>)
    9490:	2200      	movs	r2, #0
    9492:	775a      	strb	r2, [r3, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
    9494:	4b29      	ldr	r3, [pc, #164]	; (953c <initIMU+0x144>)
    9496:	2200      	movs	r2, #0
    9498:	779a      	strb	r2, [r3, #30]

	settings.mag.enabled = true;
    949a:	4b28      	ldr	r3, [pc, #160]	; (953c <initIMU+0x144>)
    949c:	2201      	movs	r2, #1
    949e:	77da      	strb	r2, [r3, #31]
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 8;
    94a0:	4b26      	ldr	r3, [pc, #152]	; (953c <initIMU+0x144>)
    94a2:	2220      	movs	r2, #32
    94a4:	2108      	movs	r1, #8
    94a6:	5499      	strb	r1, [r3, r2]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
    94a8:	4b24      	ldr	r3, [pc, #144]	; (953c <initIMU+0x144>)
    94aa:	2221      	movs	r2, #33	; 0x21
    94ac:	2107      	movs	r1, #7
    94ae:	5499      	strb	r1, [r3, r2]
	settings.mag.tempCompensationEnable = true;
    94b0:	4b22      	ldr	r3, [pc, #136]	; (953c <initIMU+0x144>)
    94b2:	2222      	movs	r2, #34	; 0x22
    94b4:	2101      	movs	r1, #1
    94b6:	5499      	strb	r1, [r3, r2]
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 1;
    94b8:	4b20      	ldr	r3, [pc, #128]	; (953c <initIMU+0x144>)
    94ba:	2223      	movs	r2, #35	; 0x23
    94bc:	2101      	movs	r1, #1
    94be:	5499      	strb	r1, [r3, r2]
	settings.mag.ZPerformance = 1;
    94c0:	4b1e      	ldr	r3, [pc, #120]	; (953c <initIMU+0x144>)
    94c2:	2224      	movs	r2, #36	; 0x24
    94c4:	2101      	movs	r1, #1
    94c6:	5499      	strb	r1, [r3, r2]
	settings.mag.lowPowerEnable = false;
    94c8:	4b1c      	ldr	r3, [pc, #112]	; (953c <initIMU+0x144>)
    94ca:	2225      	movs	r2, #37	; 0x25
    94cc:	2100      	movs	r1, #0
    94ce:	5499      	strb	r1, [r3, r2]
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
    94d0:	4b1a      	ldr	r3, [pc, #104]	; (953c <initIMU+0x144>)
    94d2:	2226      	movs	r2, #38	; 0x26
    94d4:	2100      	movs	r1, #0
    94d6:	5499      	strb	r1, [r3, r2]

	settings.temp.enabled = true;
    94d8:	4b18      	ldr	r3, [pc, #96]	; (953c <initIMU+0x144>)
    94da:	2227      	movs	r2, #39	; 0x27
    94dc:	2101      	movs	r1, #1
    94de:	5499      	strb	r1, [r3, r2]
	for (int i=0; i<3; i++)
    94e0:	2300      	movs	r3, #0
    94e2:	607b      	str	r3, [r7, #4]
    94e4:	e020      	b.n	9528 <initIMU+0x130>
	{
		gBias[i] = 0;
    94e6:	4b16      	ldr	r3, [pc, #88]	; (9540 <initIMU+0x148>)
    94e8:	687a      	ldr	r2, [r7, #4]
    94ea:	0092      	lsls	r2, r2, #2
    94ec:	2100      	movs	r1, #0
    94ee:	50d1      	str	r1, [r2, r3]
		aBias[i] = 0;
    94f0:	4b14      	ldr	r3, [pc, #80]	; (9544 <initIMU+0x14c>)
    94f2:	687a      	ldr	r2, [r7, #4]
    94f4:	0092      	lsls	r2, r2, #2
    94f6:	2100      	movs	r1, #0
    94f8:	50d1      	str	r1, [r2, r3]
		mBias[i] = 0;
    94fa:	4b13      	ldr	r3, [pc, #76]	; (9548 <initIMU+0x150>)
    94fc:	687a      	ldr	r2, [r7, #4]
    94fe:	0092      	lsls	r2, r2, #2
    9500:	2100      	movs	r1, #0
    9502:	50d1      	str	r1, [r2, r3]
		gBiasRaw[i] = 0;
    9504:	4b11      	ldr	r3, [pc, #68]	; (954c <initIMU+0x154>)
    9506:	687a      	ldr	r2, [r7, #4]
    9508:	0052      	lsls	r2, r2, #1
    950a:	2100      	movs	r1, #0
    950c:	52d1      	strh	r1, [r2, r3]
		aBiasRaw[i] = 0;
    950e:	4b10      	ldr	r3, [pc, #64]	; (9550 <initIMU+0x158>)
    9510:	687a      	ldr	r2, [r7, #4]
    9512:	0052      	lsls	r2, r2, #1
    9514:	2100      	movs	r1, #0
    9516:	52d1      	strh	r1, [r2, r3]
		mBiasRaw[i] = 0;
    9518:	4b0e      	ldr	r3, [pc, #56]	; (9554 <initIMU+0x15c>)
    951a:	687a      	ldr	r2, [r7, #4]
    951c:	0052      	lsls	r2, r2, #1
    951e:	2100      	movs	r1, #0
    9520:	52d1      	strh	r1, [r2, r3]
	for (int i=0; i<3; i++)
    9522:	687b      	ldr	r3, [r7, #4]
    9524:	3301      	adds	r3, #1
    9526:	607b      	str	r3, [r7, #4]
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	2b02      	cmp	r3, #2
    952c:	dddb      	ble.n	94e6 <initIMU+0xee>
	}
	_autoCalc = false;
    952e:	4b0a      	ldr	r3, [pc, #40]	; (9558 <initIMU+0x160>)
    9530:	2200      	movs	r2, #0
    9532:	701a      	strb	r2, [r3, #0]
}
    9534:	46c0      	nop			; (mov r8, r8)
    9536:	46bd      	mov	sp, r7
    9538:	b002      	add	sp, #8
    953a:	bd80      	pop	{r7, pc}
    953c:	200004e8 	.word	0x200004e8
    9540:	20000f9c 	.word	0x20000f9c
    9544:	20000480 	.word	0x20000480
    9548:	20001060 	.word	0x20001060
    954c:	20000c9c 	.word	0x20000c9c
    9550:	20000ca4 	.word	0x20000ca4
    9554:	20000498 	.word	0x20000498
    9558:	20000908 	.word	0x20000908

0000955c <beginIMU>:


uint16_t beginIMU()
{
    955c:	b590      	push	{r4, r7, lr}
    955e:	b083      	sub	sp, #12
    9560:	af00      	add	r7, sp, #0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
    9562:	4b1e      	ldr	r3, [pc, #120]	; (95dc <beginIMU+0x80>)
    9564:	785a      	ldrb	r2, [r3, #1]
    9566:	4b1e      	ldr	r3, [pc, #120]	; (95e0 <beginIMU+0x84>)
    9568:	701a      	strb	r2, [r3, #0]
	_mAddress = settings.device.mAddress;
    956a:	4b1c      	ldr	r3, [pc, #112]	; (95dc <beginIMU+0x80>)
    956c:	789a      	ldrb	r2, [r3, #2]
    956e:	4b1d      	ldr	r3, [pc, #116]	; (95e4 <beginIMU+0x88>)
    9570:	701a      	strb	r2, [r3, #0]
	
	constrainScales();
    9572:	4b1d      	ldr	r3, [pc, #116]	; (95e8 <beginIMU+0x8c>)
    9574:	4798      	blx	r3
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
    9576:	4b1d      	ldr	r3, [pc, #116]	; (95ec <beginIMU+0x90>)
    9578:	4798      	blx	r3
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
    957a:	4b1d      	ldr	r3, [pc, #116]	; (95f0 <beginIMU+0x94>)
    957c:	4798      	blx	r3
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
    957e:	4b1d      	ldr	r3, [pc, #116]	; (95f4 <beginIMU+0x98>)
    9580:	4798      	blx	r3
	
	initI2C();	// Initialize I2C
    9582:	4b1d      	ldr	r3, [pc, #116]	; (95f8 <beginIMU+0x9c>)
    9584:	4798      	blx	r3
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
    9586:	1dfc      	adds	r4, r7, #7
    9588:	200f      	movs	r0, #15
    958a:	4b1c      	ldr	r3, [pc, #112]	; (95fc <beginIMU+0xa0>)
    958c:	4798      	blx	r3
    958e:	0003      	movs	r3, r0
    9590:	7023      	strb	r3, [r4, #0]
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
    9592:	1dbc      	adds	r4, r7, #6
    9594:	200f      	movs	r0, #15
    9596:	4b1a      	ldr	r3, [pc, #104]	; (9600 <beginIMU+0xa4>)
    9598:	4798      	blx	r3
    959a:	0003      	movs	r3, r0
    959c:	7023      	strb	r3, [r4, #0]
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
    959e:	1dbb      	adds	r3, r7, #6
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	021b      	lsls	r3, r3, #8
    95a4:	b21a      	sxth	r2, r3
    95a6:	1dfb      	adds	r3, r7, #7
    95a8:	781b      	ldrb	r3, [r3, #0]
    95aa:	b21b      	sxth	r3, r3
    95ac:	4313      	orrs	r3, r2
    95ae:	b21a      	sxth	r2, r3
    95b0:	1d3b      	adds	r3, r7, #4
    95b2:	801a      	strh	r2, [r3, #0]
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
    95b4:	1d3b      	adds	r3, r7, #4
    95b6:	881b      	ldrh	r3, [r3, #0]
    95b8:	4a12      	ldr	r2, [pc, #72]	; (9604 <beginIMU+0xa8>)
    95ba:	4293      	cmp	r3, r2
    95bc:	d001      	beq.n	95c2 <beginIMU+0x66>
		return 0;
    95be:	2300      	movs	r3, #0
    95c0:	e007      	b.n	95d2 <beginIMU+0x76>
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
    95c2:	4b11      	ldr	r3, [pc, #68]	; (9608 <beginIMU+0xac>)
    95c4:	4798      	blx	r3
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
    95c6:	4b11      	ldr	r3, [pc, #68]	; (960c <beginIMU+0xb0>)
    95c8:	4798      	blx	r3
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
    95ca:	4b11      	ldr	r3, [pc, #68]	; (9610 <beginIMU+0xb4>)
    95cc:	4798      	blx	r3

	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
    95ce:	1d3b      	adds	r3, r7, #4
    95d0:	881b      	ldrh	r3, [r3, #0]
}
    95d2:	0018      	movs	r0, r3
    95d4:	46bd      	mov	sp, r7
    95d6:	b003      	add	sp, #12
    95d8:	bd90      	pop	{r4, r7, pc}
    95da:	46c0      	nop			; (mov r8, r8)
    95dc:	200004e8 	.word	0x200004e8
    95e0:	20000a3a 	.word	0x20000a3a
    95e4:	200009c0 	.word	0x200009c0
    95e8:	0000a059 	.word	0x0000a059
    95ec:	00009ed5 	.word	0x00009ed5
    95f0:	00009f45 	.word	0x00009f45
    95f4:	00009f0d 	.word	0x00009f0d
    95f8:	0000a225 	.word	0x0000a225
    95fc:	0000a1b9 	.word	0x0000a1b9
    9600:	0000a14d 	.word	0x0000a14d
    9604:	0000683d 	.word	0x0000683d
    9608:	00009615 	.word	0x00009615
    960c:	00009795 	.word	0x00009795
    9610:	00009b1d 	.word	0x00009b1d

00009614 <initGyro>:

void initGyro()
{
    9614:	b580      	push	{r7, lr}
    9616:	b082      	sub	sp, #8
    9618:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    961a:	1dfb      	adds	r3, r7, #7
    961c:	2200      	movs	r2, #0
    961e:	701a      	strb	r2, [r3, #0]
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
    9620:	4b5a      	ldr	r3, [pc, #360]	; (978c <initGyro+0x178>)
    9622:	791b      	ldrb	r3, [r3, #4]
    9624:	2b00      	cmp	r3, #0
    9626:	d004      	beq.n	9632 <initGyro+0x1e>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
    9628:	4b58      	ldr	r3, [pc, #352]	; (978c <initGyro+0x178>)
    962a:	7a1b      	ldrb	r3, [r3, #8]
    962c:	015a      	lsls	r2, r3, #5
    962e:	1dfb      	adds	r3, r7, #7
    9630:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.gyro.scale)
    9632:	4b56      	ldr	r3, [pc, #344]	; (978c <initGyro+0x178>)
    9634:	88db      	ldrh	r3, [r3, #6]
    9636:	22fa      	movs	r2, #250	; 0xfa
    9638:	0052      	lsls	r2, r2, #1
    963a:	4293      	cmp	r3, r2
    963c:	d004      	beq.n	9648 <initGyro+0x34>
    963e:	22fa      	movs	r2, #250	; 0xfa
    9640:	00d2      	lsls	r2, r2, #3
    9642:	4293      	cmp	r3, r2
    9644:	d007      	beq.n	9656 <initGyro+0x42>
    9646:	e00d      	b.n	9664 <initGyro+0x50>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
    9648:	1dfb      	adds	r3, r7, #7
    964a:	1dfa      	adds	r2, r7, #7
    964c:	7812      	ldrb	r2, [r2, #0]
    964e:	2108      	movs	r1, #8
    9650:	430a      	orrs	r2, r1
    9652:	701a      	strb	r2, [r3, #0]
			break;
    9654:	e006      	b.n	9664 <initGyro+0x50>
		case 2000:
			tempRegValue |= (0x3 << 3);
    9656:	1dfb      	adds	r3, r7, #7
    9658:	1dfa      	adds	r2, r7, #7
    965a:	7812      	ldrb	r2, [r2, #0]
    965c:	2118      	movs	r1, #24
    965e:	430a      	orrs	r2, r1
    9660:	701a      	strb	r2, [r3, #0]
			break;
    9662:	46c0      	nop			; (mov r8, r8)
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
    9664:	4b49      	ldr	r3, [pc, #292]	; (978c <initGyro+0x178>)
    9666:	7a5b      	ldrb	r3, [r3, #9]
    9668:	b25b      	sxtb	r3, r3
    966a:	2203      	movs	r2, #3
    966c:	4013      	ands	r3, r2
    966e:	b25a      	sxtb	r2, r3
    9670:	1dfb      	adds	r3, r7, #7
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	b25b      	sxtb	r3, r3
    9676:	4313      	orrs	r3, r2
    9678:	b25a      	sxtb	r2, r3
    967a:	1dfb      	adds	r3, r7, #7
    967c:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
    967e:	1dfb      	adds	r3, r7, #7
    9680:	781b      	ldrb	r3, [r3, #0]
    9682:	0019      	movs	r1, r3
    9684:	2010      	movs	r0, #16
    9686:	4b42      	ldr	r3, [pc, #264]	; (9790 <initGyro+0x17c>)
    9688:	4798      	blx	r3
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
    968a:	2100      	movs	r1, #0
    968c:	2011      	movs	r0, #17
    968e:	4b40      	ldr	r3, [pc, #256]	; (9790 <initGyro+0x17c>)
    9690:	4798      	blx	r3
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
    9692:	4b3e      	ldr	r3, [pc, #248]	; (978c <initGyro+0x178>)
    9694:	7a9b      	ldrb	r3, [r3, #10]
    9696:	2b00      	cmp	r3, #0
    9698:	d001      	beq.n	969e <initGyro+0x8a>
    969a:	2280      	movs	r2, #128	; 0x80
    969c:	e000      	b.n	96a0 <initGyro+0x8c>
    969e:	2200      	movs	r2, #0
    96a0:	1dfb      	adds	r3, r7, #7
    96a2:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.HPFEnable)
    96a4:	4b39      	ldr	r3, [pc, #228]	; (978c <initGyro+0x178>)
    96a6:	7adb      	ldrb	r3, [r3, #11]
    96a8:	2b00      	cmp	r3, #0
    96aa:	d00c      	beq.n	96c6 <initGyro+0xb2>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
    96ac:	4b37      	ldr	r3, [pc, #220]	; (978c <initGyro+0x178>)
    96ae:	7b1b      	ldrb	r3, [r3, #12]
    96b0:	220f      	movs	r2, #15
    96b2:	4013      	ands	r3, r2
    96b4:	b2da      	uxtb	r2, r3
    96b6:	1dfb      	adds	r3, r7, #7
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	4313      	orrs	r3, r2
    96bc:	b2da      	uxtb	r2, r3
    96be:	1dfb      	adds	r3, r7, #7
    96c0:	2140      	movs	r1, #64	; 0x40
    96c2:	430a      	orrs	r2, r1
    96c4:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
    96c6:	1dfb      	adds	r3, r7, #7
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	0019      	movs	r1, r3
    96cc:	2012      	movs	r0, #18
    96ce:	4b30      	ldr	r3, [pc, #192]	; (9790 <initGyro+0x17c>)
    96d0:	4798      	blx	r3
	// Zen_G - Z-axis output enable (0:disable, 1:enable)
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
    96d2:	1dfb      	adds	r3, r7, #7
    96d4:	2200      	movs	r2, #0
    96d6:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
    96d8:	4b2c      	ldr	r3, [pc, #176]	; (978c <initGyro+0x178>)
    96da:	7cdb      	ldrb	r3, [r3, #19]
    96dc:	2b00      	cmp	r3, #0
    96de:	d005      	beq.n	96ec <initGyro+0xd8>
    96e0:	1dfb      	adds	r3, r7, #7
    96e2:	1dfa      	adds	r2, r7, #7
    96e4:	7812      	ldrb	r2, [r2, #0]
    96e6:	2120      	movs	r1, #32
    96e8:	430a      	orrs	r2, r1
    96ea:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
    96ec:	4b27      	ldr	r3, [pc, #156]	; (978c <initGyro+0x178>)
    96ee:	7c9b      	ldrb	r3, [r3, #18]
    96f0:	2b00      	cmp	r3, #0
    96f2:	d005      	beq.n	9700 <initGyro+0xec>
    96f4:	1dfb      	adds	r3, r7, #7
    96f6:	1dfa      	adds	r2, r7, #7
    96f8:	7812      	ldrb	r2, [r2, #0]
    96fa:	2110      	movs	r1, #16
    96fc:	430a      	orrs	r2, r1
    96fe:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
    9700:	4b22      	ldr	r3, [pc, #136]	; (978c <initGyro+0x178>)
    9702:	7c5b      	ldrb	r3, [r3, #17]
    9704:	2b00      	cmp	r3, #0
    9706:	d005      	beq.n	9714 <initGyro+0x100>
    9708:	1dfb      	adds	r3, r7, #7
    970a:	1dfa      	adds	r2, r7, #7
    970c:	7812      	ldrb	r2, [r2, #0]
    970e:	2108      	movs	r1, #8
    9710:	430a      	orrs	r2, r1
    9712:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
    9714:	4b1d      	ldr	r3, [pc, #116]	; (978c <initGyro+0x178>)
    9716:	7d1b      	ldrb	r3, [r3, #20]
    9718:	2b00      	cmp	r3, #0
    971a:	d005      	beq.n	9728 <initGyro+0x114>
    971c:	1dfb      	adds	r3, r7, #7
    971e:	1dfa      	adds	r2, r7, #7
    9720:	7812      	ldrb	r2, [r2, #0]
    9722:	2102      	movs	r1, #2
    9724:	430a      	orrs	r2, r1
    9726:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG4, tempRegValue);
    9728:	1dfb      	adds	r3, r7, #7
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	0019      	movs	r1, r3
    972e:	201e      	movs	r0, #30
    9730:	4b17      	ldr	r3, [pc, #92]	; (9790 <initGyro+0x17c>)
    9732:	4798      	blx	r3
	
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
    9734:	1dfb      	adds	r3, r7, #7
    9736:	2200      	movs	r2, #0
    9738:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
    973a:	4b14      	ldr	r3, [pc, #80]	; (978c <initGyro+0x178>)
    973c:	7b5b      	ldrb	r3, [r3, #13]
    973e:	2b00      	cmp	r3, #0
    9740:	d005      	beq.n	974e <initGyro+0x13a>
    9742:	1dfb      	adds	r3, r7, #7
    9744:	1dfa      	adds	r2, r7, #7
    9746:	7812      	ldrb	r2, [r2, #0]
    9748:	2120      	movs	r1, #32
    974a:	430a      	orrs	r2, r1
    974c:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
    974e:	4b0f      	ldr	r3, [pc, #60]	; (978c <initGyro+0x178>)
    9750:	7b9b      	ldrb	r3, [r3, #14]
    9752:	2b00      	cmp	r3, #0
    9754:	d005      	beq.n	9762 <initGyro+0x14e>
    9756:	1dfb      	adds	r3, r7, #7
    9758:	1dfa      	adds	r2, r7, #7
    975a:	7812      	ldrb	r2, [r2, #0]
    975c:	2110      	movs	r1, #16
    975e:	430a      	orrs	r2, r1
    9760:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
    9762:	4b0a      	ldr	r3, [pc, #40]	; (978c <initGyro+0x178>)
    9764:	7bdb      	ldrb	r3, [r3, #15]
    9766:	2b00      	cmp	r3, #0
    9768:	d005      	beq.n	9776 <initGyro+0x162>
    976a:	1dfb      	adds	r3, r7, #7
    976c:	1dfa      	adds	r2, r7, #7
    976e:	7812      	ldrb	r2, [r2, #0]
    9770:	2108      	movs	r1, #8
    9772:	430a      	orrs	r2, r1
    9774:	701a      	strb	r2, [r3, #0]
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
    9776:	1dfb      	adds	r3, r7, #7
    9778:	781b      	ldrb	r3, [r3, #0]
    977a:	0019      	movs	r1, r3
    977c:	2013      	movs	r0, #19
    977e:	4b04      	ldr	r3, [pc, #16]	; (9790 <initGyro+0x17c>)
    9780:	4798      	blx	r3
}
    9782:	46c0      	nop			; (mov r8, r8)
    9784:	46bd      	mov	sp, r7
    9786:	b002      	add	sp, #8
    9788:	bd80      	pop	{r7, pc}
    978a:	46c0      	nop			; (mov r8, r8)
    978c:	200004e8 	.word	0x200004e8
    9790:	0000a0e5 	.word	0x0000a0e5

00009794 <initAccel>:

void initAccel()
{
    9794:	b580      	push	{r7, lr}
    9796:	b082      	sub	sp, #8
    9798:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    979a:	1dfb      	adds	r3, r7, #7
    979c:	2200      	movs	r2, #0
    979e:	701a      	strb	r2, [r3, #0]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
    97a0:	4b4b      	ldr	r3, [pc, #300]	; (98d0 <initAccel+0x13c>)
    97a2:	7edb      	ldrb	r3, [r3, #27]
    97a4:	2b00      	cmp	r3, #0
    97a6:	d005      	beq.n	97b4 <initAccel+0x20>
    97a8:	1dfb      	adds	r3, r7, #7
    97aa:	1dfa      	adds	r2, r7, #7
    97ac:	7812      	ldrb	r2, [r2, #0]
    97ae:	2120      	movs	r1, #32
    97b0:	430a      	orrs	r2, r1
    97b2:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableY) tempRegValue |= (1<<4);
    97b4:	4b46      	ldr	r3, [pc, #280]	; (98d0 <initAccel+0x13c>)
    97b6:	7e9b      	ldrb	r3, [r3, #26]
    97b8:	2b00      	cmp	r3, #0
    97ba:	d005      	beq.n	97c8 <initAccel+0x34>
    97bc:	1dfb      	adds	r3, r7, #7
    97be:	1dfa      	adds	r2, r7, #7
    97c0:	7812      	ldrb	r2, [r2, #0]
    97c2:	2110      	movs	r1, #16
    97c4:	430a      	orrs	r2, r1
    97c6:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableX) tempRegValue |= (1<<3);
    97c8:	4b41      	ldr	r3, [pc, #260]	; (98d0 <initAccel+0x13c>)
    97ca:	7e5b      	ldrb	r3, [r3, #25]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d005      	beq.n	97dc <initAccel+0x48>
    97d0:	1dfb      	adds	r3, r7, #7
    97d2:	1dfa      	adds	r2, r7, #7
    97d4:	7812      	ldrb	r2, [r2, #0]
    97d6:	2108      	movs	r1, #8
    97d8:	430a      	orrs	r2, r1
    97da:	701a      	strb	r2, [r3, #0]
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
    97dc:	1dfb      	adds	r3, r7, #7
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	0019      	movs	r1, r3
    97e2:	201f      	movs	r0, #31
    97e4:	4b3b      	ldr	r3, [pc, #236]	; (98d4 <initAccel+0x140>)
    97e6:	4798      	blx	r3
	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
	// ODR_XL[2:0] - Output data rate & power mode selection
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
    97e8:	1dfb      	adds	r3, r7, #7
    97ea:	2200      	movs	r2, #0
    97ec:	701a      	strb	r2, [r3, #0]
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
    97ee:	4b38      	ldr	r3, [pc, #224]	; (98d0 <initAccel+0x13c>)
    97f0:	7d9b      	ldrb	r3, [r3, #22]
    97f2:	2b00      	cmp	r3, #0
    97f4:	d00a      	beq.n	980c <initAccel+0x78>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
    97f6:	4b36      	ldr	r3, [pc, #216]	; (98d0 <initAccel+0x13c>)
    97f8:	7e1b      	ldrb	r3, [r3, #24]
    97fa:	015b      	lsls	r3, r3, #5
    97fc:	b25a      	sxtb	r2, r3
    97fe:	1dfb      	adds	r3, r7, #7
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	b25b      	sxtb	r3, r3
    9804:	4313      	orrs	r3, r2
    9806:	b25a      	sxtb	r2, r3
    9808:	1dfb      	adds	r3, r7, #7
    980a:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.accel.scale)
    980c:	4b30      	ldr	r3, [pc, #192]	; (98d0 <initAccel+0x13c>)
    980e:	7ddb      	ldrb	r3, [r3, #23]
    9810:	2b08      	cmp	r3, #8
    9812:	d00a      	beq.n	982a <initAccel+0x96>
    9814:	2b10      	cmp	r3, #16
    9816:	d00f      	beq.n	9838 <initAccel+0xa4>
    9818:	2b04      	cmp	r3, #4
    981a:	d114      	bne.n	9846 <initAccel+0xb2>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
    981c:	1dfb      	adds	r3, r7, #7
    981e:	1dfa      	adds	r2, r7, #7
    9820:	7812      	ldrb	r2, [r2, #0]
    9822:	2110      	movs	r1, #16
    9824:	430a      	orrs	r2, r1
    9826:	701a      	strb	r2, [r3, #0]
			break;
    9828:	e00d      	b.n	9846 <initAccel+0xb2>
		case 8:
			tempRegValue |= (0x3 << 3);
    982a:	1dfb      	adds	r3, r7, #7
    982c:	1dfa      	adds	r2, r7, #7
    982e:	7812      	ldrb	r2, [r2, #0]
    9830:	2118      	movs	r1, #24
    9832:	430a      	orrs	r2, r1
    9834:	701a      	strb	r2, [r3, #0]
			break;
    9836:	e006      	b.n	9846 <initAccel+0xb2>
		case 16:
			tempRegValue |= (0x1 << 3);
    9838:	1dfb      	adds	r3, r7, #7
    983a:	1dfa      	adds	r2, r7, #7
    983c:	7812      	ldrb	r2, [r2, #0]
    983e:	2108      	movs	r1, #8
    9840:	430a      	orrs	r2, r1
    9842:	701a      	strb	r2, [r3, #0]
			break;
    9844:	46c0      	nop			; (mov r8, r8)
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
    9846:	4b22      	ldr	r3, [pc, #136]	; (98d0 <initAccel+0x13c>)
    9848:	7f1b      	ldrb	r3, [r3, #28]
    984a:	b25b      	sxtb	r3, r3
    984c:	2b00      	cmp	r3, #0
    984e:	db12      	blt.n	9876 <initAccel+0xe2>
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
    9850:	1dfb      	adds	r3, r7, #7
    9852:	1dfa      	adds	r2, r7, #7
    9854:	7812      	ldrb	r2, [r2, #0]
    9856:	2104      	movs	r1, #4
    9858:	430a      	orrs	r2, r1
    985a:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.bandwidth & 0x03);
    985c:	4b1c      	ldr	r3, [pc, #112]	; (98d0 <initAccel+0x13c>)
    985e:	7f1b      	ldrb	r3, [r3, #28]
    9860:	b25b      	sxtb	r3, r3
    9862:	2203      	movs	r2, #3
    9864:	4013      	ands	r3, r2
    9866:	b25a      	sxtb	r2, r3
    9868:	1dfb      	adds	r3, r7, #7
    986a:	781b      	ldrb	r3, [r3, #0]
    986c:	b25b      	sxtb	r3, r3
    986e:	4313      	orrs	r3, r2
    9870:	b25a      	sxtb	r2, r3
    9872:	1dfb      	adds	r3, r7, #7
    9874:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
    9876:	1dfb      	adds	r3, r7, #7
    9878:	781b      	ldrb	r3, [r3, #0]
    987a:	0019      	movs	r1, r3
    987c:	2020      	movs	r0, #32
    987e:	4b15      	ldr	r3, [pc, #84]	; (98d4 <initAccel+0x140>)
    9880:	4798      	blx	r3
	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
    9882:	1dfb      	adds	r3, r7, #7
    9884:	2200      	movs	r2, #0
    9886:	701a      	strb	r2, [r3, #0]
	if (settings.accel.highResEnable)
    9888:	4b11      	ldr	r3, [pc, #68]	; (98d0 <initAccel+0x13c>)
    988a:	7f5b      	ldrb	r3, [r3, #29]
    988c:	2b00      	cmp	r3, #0
    988e:	d014      	beq.n	98ba <initAccel+0x126>
	{
		tempRegValue |= (1<<7); // Set HR bit
    9890:	1dfb      	adds	r3, r7, #7
    9892:	1dfa      	adds	r2, r7, #7
    9894:	7812      	ldrb	r2, [r2, #0]
    9896:	2180      	movs	r1, #128	; 0x80
    9898:	4249      	negs	r1, r1
    989a:	430a      	orrs	r2, r1
    989c:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
    989e:	4b0c      	ldr	r3, [pc, #48]	; (98d0 <initAccel+0x13c>)
    98a0:	7f9b      	ldrb	r3, [r3, #30]
    98a2:	015b      	lsls	r3, r3, #5
    98a4:	b25b      	sxtb	r3, r3
    98a6:	2260      	movs	r2, #96	; 0x60
    98a8:	4013      	ands	r3, r2
    98aa:	b25a      	sxtb	r2, r3
    98ac:	1dfb      	adds	r3, r7, #7
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	b25b      	sxtb	r3, r3
    98b2:	4313      	orrs	r3, r2
    98b4:	b25a      	sxtb	r2, r3
    98b6:	1dfb      	adds	r3, r7, #7
    98b8:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
    98ba:	1dfb      	adds	r3, r7, #7
    98bc:	781b      	ldrb	r3, [r3, #0]
    98be:	0019      	movs	r1, r3
    98c0:	2021      	movs	r0, #33	; 0x21
    98c2:	4b04      	ldr	r3, [pc, #16]	; (98d4 <initAccel+0x140>)
    98c4:	4798      	blx	r3
}
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	46bd      	mov	sp, r7
    98ca:	b002      	add	sp, #8
    98cc:	bd80      	pop	{r7, pc}
    98ce:	46c0      	nop			; (mov r8, r8)
    98d0:	200004e8 	.word	0x200004e8
    98d4:	0000a0e5 	.word	0x0000a0e5

000098d8 <calibrate>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void calibrate(bool autoCalc)
{  
    98d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    98da:	b08b      	sub	sp, #44	; 0x2c
    98dc:	af00      	add	r7, sp, #0
    98de:	0002      	movs	r2, r0
    98e0:	1dfb      	adds	r3, r7, #7
    98e2:	701a      	strb	r2, [r3, #0]
	//uint8_t data[6] = {0, 0, 0, 0, 0, 0};
	uint8_t samples = 0;
    98e4:	2327      	movs	r3, #39	; 0x27
    98e6:	18fb      	adds	r3, r7, r3
    98e8:	2200      	movs	r2, #0
    98ea:	701a      	strb	r2, [r3, #0]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
    98ec:	2314      	movs	r3, #20
    98ee:	18fb      	adds	r3, r7, r3
    98f0:	2200      	movs	r2, #0
    98f2:	601a      	str	r2, [r3, #0]
    98f4:	2314      	movs	r3, #20
    98f6:	18fb      	adds	r3, r7, r3
    98f8:	2200      	movs	r2, #0
    98fa:	605a      	str	r2, [r3, #4]
    98fc:	2314      	movs	r3, #20
    98fe:	18fb      	adds	r3, r7, r3
    9900:	2200      	movs	r2, #0
    9902:	609a      	str	r2, [r3, #8]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
    9904:	2308      	movs	r3, #8
    9906:	18fb      	adds	r3, r7, r3
    9908:	2200      	movs	r2, #0
    990a:	601a      	str	r2, [r3, #0]
    990c:	2308      	movs	r3, #8
    990e:	18fb      	adds	r3, r7, r3
    9910:	2200      	movs	r2, #0
    9912:	605a      	str	r2, [r3, #4]
    9914:	2308      	movs	r3, #8
    9916:	18fb      	adds	r3, r7, r3
    9918:	2200      	movs	r2, #0
    991a:	609a      	str	r2, [r3, #8]
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
    991c:	2001      	movs	r0, #1
    991e:	4b67      	ldr	r3, [pc, #412]	; (9abc <calibrate+0x1e4>)
    9920:	4798      	blx	r3
	setFIFO(FIFO_THS, 0x1F);
    9922:	211f      	movs	r1, #31
    9924:	2001      	movs	r0, #1
    9926:	4b66      	ldr	r3, [pc, #408]	; (9ac0 <calibrate+0x1e8>)
    9928:	4798      	blx	r3
	while (samples < 0x1F)
    992a:	e009      	b.n	9940 <calibrate+0x68>
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
    992c:	202f      	movs	r0, #47	; 0x2f
    992e:	4b65      	ldr	r3, [pc, #404]	; (9ac4 <calibrate+0x1ec>)
    9930:	4798      	blx	r3
    9932:	0003      	movs	r3, r0
    9934:	0019      	movs	r1, r3
    9936:	2327      	movs	r3, #39	; 0x27
    9938:	18fb      	adds	r3, r7, r3
    993a:	223f      	movs	r2, #63	; 0x3f
    993c:	400a      	ands	r2, r1
    993e:	701a      	strb	r2, [r3, #0]
	while (samples < 0x1F)
    9940:	2327      	movs	r3, #39	; 0x27
    9942:	18fb      	adds	r3, r7, r3
    9944:	781b      	ldrb	r3, [r3, #0]
    9946:	2b1e      	cmp	r3, #30
    9948:	d9f0      	bls.n	992c <calibrate+0x54>
	}
	for(ii = 0; ii < samples ; ii++) 
    994a:	2300      	movs	r3, #0
    994c:	623b      	str	r3, [r7, #32]
    994e:	e059      	b.n	9a04 <calibrate+0x12c>
	{	// Read the gyro data stored in the FIFO
		readGyro();
    9950:	4b5d      	ldr	r3, [pc, #372]	; (9ac8 <calibrate+0x1f0>)
    9952:	4798      	blx	r3
		gBiasRawTemp[0] += gx;
    9954:	2308      	movs	r3, #8
    9956:	18fb      	adds	r3, r7, r3
    9958:	681b      	ldr	r3, [r3, #0]
    995a:	4a5c      	ldr	r2, [pc, #368]	; (9acc <calibrate+0x1f4>)
    995c:	2100      	movs	r1, #0
    995e:	5e52      	ldrsh	r2, [r2, r1]
    9960:	189a      	adds	r2, r3, r2
    9962:	2308      	movs	r3, #8
    9964:	18fb      	adds	r3, r7, r3
    9966:	601a      	str	r2, [r3, #0]
		gBiasRawTemp[1] += gy;
    9968:	2308      	movs	r3, #8
    996a:	18fb      	adds	r3, r7, r3
    996c:	685b      	ldr	r3, [r3, #4]
    996e:	4a58      	ldr	r2, [pc, #352]	; (9ad0 <calibrate+0x1f8>)
    9970:	2100      	movs	r1, #0
    9972:	5e52      	ldrsh	r2, [r2, r1]
    9974:	189a      	adds	r2, r3, r2
    9976:	2308      	movs	r3, #8
    9978:	18fb      	adds	r3, r7, r3
    997a:	605a      	str	r2, [r3, #4]
		gBiasRawTemp[2] += gz;
    997c:	2308      	movs	r3, #8
    997e:	18fb      	adds	r3, r7, r3
    9980:	689b      	ldr	r3, [r3, #8]
    9982:	4a54      	ldr	r2, [pc, #336]	; (9ad4 <calibrate+0x1fc>)
    9984:	2100      	movs	r1, #0
    9986:	5e52      	ldrsh	r2, [r2, r1]
    9988:	189a      	adds	r2, r3, r2
    998a:	2308      	movs	r3, #8
    998c:	18fb      	adds	r3, r7, r3
    998e:	609a      	str	r2, [r3, #8]
		readAccel();
    9990:	4b51      	ldr	r3, [pc, #324]	; (9ad8 <calibrate+0x200>)
    9992:	4798      	blx	r3
		aBiasRawTemp[0] += ax;
    9994:	2314      	movs	r3, #20
    9996:	18fb      	adds	r3, r7, r3
    9998:	681b      	ldr	r3, [r3, #0]
    999a:	4a50      	ldr	r2, [pc, #320]	; (9adc <calibrate+0x204>)
    999c:	2100      	movs	r1, #0
    999e:	5e52      	ldrsh	r2, [r2, r1]
    99a0:	189a      	adds	r2, r3, r2
    99a2:	2314      	movs	r3, #20
    99a4:	18fb      	adds	r3, r7, r3
    99a6:	601a      	str	r2, [r3, #0]
		aBiasRawTemp[1] += ay;
    99a8:	2314      	movs	r3, #20
    99aa:	18fb      	adds	r3, r7, r3
    99ac:	685b      	ldr	r3, [r3, #4]
    99ae:	4a4c      	ldr	r2, [pc, #304]	; (9ae0 <calibrate+0x208>)
    99b0:	2100      	movs	r1, #0
    99b2:	5e52      	ldrsh	r2, [r2, r1]
    99b4:	189a      	adds	r2, r3, r2
    99b6:	2314      	movs	r3, #20
    99b8:	18fb      	adds	r3, r7, r3
    99ba:	605a      	str	r2, [r3, #4]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
    99bc:	2314      	movs	r3, #20
    99be:	18fb      	adds	r3, r7, r3
    99c0:	689c      	ldr	r4, [r3, #8]
    99c2:	4b48      	ldr	r3, [pc, #288]	; (9ae4 <calibrate+0x20c>)
    99c4:	2200      	movs	r2, #0
    99c6:	5e9b      	ldrsh	r3, [r3, r2]
    99c8:	001e      	movs	r6, r3
    99ca:	4b47      	ldr	r3, [pc, #284]	; (9ae8 <calibrate+0x210>)
    99cc:	681a      	ldr	r2, [r3, #0]
    99ce:	4b47      	ldr	r3, [pc, #284]	; (9aec <calibrate+0x214>)
    99d0:	1c10      	adds	r0, r2, #0
    99d2:	4798      	blx	r3
    99d4:	0002      	movs	r2, r0
    99d6:	000b      	movs	r3, r1
    99d8:	4d45      	ldr	r5, [pc, #276]	; (9af0 <calibrate+0x218>)
    99da:	2000      	movs	r0, #0
    99dc:	4945      	ldr	r1, [pc, #276]	; (9af4 <calibrate+0x21c>)
    99de:	47a8      	blx	r5
    99e0:	0002      	movs	r2, r0
    99e2:	000b      	movs	r3, r1
    99e4:	0011      	movs	r1, r2
    99e6:	001a      	movs	r2, r3
    99e8:	4b43      	ldr	r3, [pc, #268]	; (9af8 <calibrate+0x220>)
    99ea:	0008      	movs	r0, r1
    99ec:	0011      	movs	r1, r2
    99ee:	4798      	blx	r3
    99f0:	0003      	movs	r3, r0
    99f2:	b21b      	sxth	r3, r3
    99f4:	1af3      	subs	r3, r6, r3
    99f6:	18e2      	adds	r2, r4, r3
    99f8:	2314      	movs	r3, #20
    99fa:	18fb      	adds	r3, r7, r3
    99fc:	609a      	str	r2, [r3, #8]
	for(ii = 0; ii < samples ; ii++) 
    99fe:	6a3b      	ldr	r3, [r7, #32]
    9a00:	3301      	adds	r3, #1
    9a02:	623b      	str	r3, [r7, #32]
    9a04:	2327      	movs	r3, #39	; 0x27
    9a06:	18fb      	adds	r3, r7, r3
    9a08:	781a      	ldrb	r2, [r3, #0]
    9a0a:	6a3b      	ldr	r3, [r7, #32]
    9a0c:	429a      	cmp	r2, r3
    9a0e:	dc9f      	bgt.n	9950 <calibrate+0x78>
	}  
	for (ii = 0; ii < 3; ii++)
    9a10:	2300      	movs	r3, #0
    9a12:	623b      	str	r3, [r7, #32]
    9a14:	e03c      	b.n	9a90 <calibrate+0x1b8>
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
    9a16:	2308      	movs	r3, #8
    9a18:	18fb      	adds	r3, r7, r3
    9a1a:	6a3a      	ldr	r2, [r7, #32]
    9a1c:	0092      	lsls	r2, r2, #2
    9a1e:	58d2      	ldr	r2, [r2, r3]
    9a20:	2327      	movs	r3, #39	; 0x27
    9a22:	18fb      	adds	r3, r7, r3
    9a24:	7819      	ldrb	r1, [r3, #0]
    9a26:	4b35      	ldr	r3, [pc, #212]	; (9afc <calibrate+0x224>)
    9a28:	0010      	movs	r0, r2
    9a2a:	4798      	blx	r3
    9a2c:	0003      	movs	r3, r0
    9a2e:	b219      	sxth	r1, r3
    9a30:	4b33      	ldr	r3, [pc, #204]	; (9b00 <calibrate+0x228>)
    9a32:	6a3a      	ldr	r2, [r7, #32]
    9a34:	0052      	lsls	r2, r2, #1
    9a36:	52d1      	strh	r1, [r2, r3]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
    9a38:	4b31      	ldr	r3, [pc, #196]	; (9b00 <calibrate+0x228>)
    9a3a:	6a3a      	ldr	r2, [r7, #32]
    9a3c:	0052      	lsls	r2, r2, #1
    9a3e:	5ed3      	ldrsh	r3, [r2, r3]
    9a40:	0018      	movs	r0, r3
    9a42:	4b30      	ldr	r3, [pc, #192]	; (9b04 <calibrate+0x22c>)
    9a44:	4798      	blx	r3
    9a46:	1c01      	adds	r1, r0, #0
    9a48:	4b2f      	ldr	r3, [pc, #188]	; (9b08 <calibrate+0x230>)
    9a4a:	6a3a      	ldr	r2, [r7, #32]
    9a4c:	0092      	lsls	r2, r2, #2
    9a4e:	50d1      	str	r1, [r2, r3]
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
    9a50:	2314      	movs	r3, #20
    9a52:	18fb      	adds	r3, r7, r3
    9a54:	6a3a      	ldr	r2, [r7, #32]
    9a56:	0092      	lsls	r2, r2, #2
    9a58:	58d2      	ldr	r2, [r2, r3]
    9a5a:	2327      	movs	r3, #39	; 0x27
    9a5c:	18fb      	adds	r3, r7, r3
    9a5e:	7819      	ldrb	r1, [r3, #0]
    9a60:	4b26      	ldr	r3, [pc, #152]	; (9afc <calibrate+0x224>)
    9a62:	0010      	movs	r0, r2
    9a64:	4798      	blx	r3
    9a66:	0003      	movs	r3, r0
    9a68:	b219      	sxth	r1, r3
    9a6a:	4b28      	ldr	r3, [pc, #160]	; (9b0c <calibrate+0x234>)
    9a6c:	6a3a      	ldr	r2, [r7, #32]
    9a6e:	0052      	lsls	r2, r2, #1
    9a70:	52d1      	strh	r1, [r2, r3]
		aBias[ii] = calcAccel(aBiasRaw[ii]);
    9a72:	4b26      	ldr	r3, [pc, #152]	; (9b0c <calibrate+0x234>)
    9a74:	6a3a      	ldr	r2, [r7, #32]
    9a76:	0052      	lsls	r2, r2, #1
    9a78:	5ed3      	ldrsh	r3, [r2, r3]
    9a7a:	0018      	movs	r0, r3
    9a7c:	4b24      	ldr	r3, [pc, #144]	; (9b10 <calibrate+0x238>)
    9a7e:	4798      	blx	r3
    9a80:	1c01      	adds	r1, r0, #0
    9a82:	4b24      	ldr	r3, [pc, #144]	; (9b14 <calibrate+0x23c>)
    9a84:	6a3a      	ldr	r2, [r7, #32]
    9a86:	0092      	lsls	r2, r2, #2
    9a88:	50d1      	str	r1, [r2, r3]
	for (ii = 0; ii < 3; ii++)
    9a8a:	6a3b      	ldr	r3, [r7, #32]
    9a8c:	3301      	adds	r3, #1
    9a8e:	623b      	str	r3, [r7, #32]
    9a90:	6a3b      	ldr	r3, [r7, #32]
    9a92:	2b02      	cmp	r3, #2
    9a94:	ddbf      	ble.n	9a16 <calibrate+0x13e>
	}
	
	enableFIFO(false);
    9a96:	2000      	movs	r0, #0
    9a98:	4b08      	ldr	r3, [pc, #32]	; (9abc <calibrate+0x1e4>)
    9a9a:	4798      	blx	r3
	setFIFO(FIFO_OFF, 0x00);
    9a9c:	2100      	movs	r1, #0
    9a9e:	2000      	movs	r0, #0
    9aa0:	4b07      	ldr	r3, [pc, #28]	; (9ac0 <calibrate+0x1e8>)
    9aa2:	4798      	blx	r3
	
	if (autoCalc) _autoCalc = true;
    9aa4:	1dfb      	adds	r3, r7, #7
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d002      	beq.n	9ab2 <calibrate+0x1da>
    9aac:	4b1a      	ldr	r3, [pc, #104]	; (9b18 <calibrate+0x240>)
    9aae:	2201      	movs	r2, #1
    9ab0:	701a      	strb	r2, [r3, #0]
}
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	46bd      	mov	sp, r7
    9ab6:	b00b      	add	sp, #44	; 0x2c
    9ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9aba:	46c0      	nop			; (mov r8, r8)
    9abc:	00009fa1 	.word	0x00009fa1
    9ac0:	0000a005 	.word	0x0000a005
    9ac4:	0000a14d 	.word	0x0000a14d
    9ac8:	00009d99 	.word	0x00009d99
    9acc:	200002e4 	.word	0x200002e4
    9ad0:	200002e6 	.word	0x200002e6
    9ad4:	200002e8 	.word	0x200002e8
    9ad8:	00009c61 	.word	0x00009c61
    9adc:	200002ea 	.word	0x200002ea
    9ae0:	200002ec 	.word	0x200002ec
    9ae4:	200002ee 	.word	0x200002ee
    9ae8:	200009bc 	.word	0x200009bc
    9aec:	00016e95 	.word	0x00016e95
    9af0:	000159a5 	.word	0x000159a5
    9af4:	3ff00000 	.word	0x3ff00000
    9af8:	00016d39 	.word	0x00016d39
    9afc:	00014215 	.word	0x00014215
    9b00:	20000c9c 	.word	0x20000c9c
    9b04:	00009e65 	.word	0x00009e65
    9b08:	20000f9c 	.word	0x20000f9c
    9b0c:	20000ca4 	.word	0x20000ca4
    9b10:	00009e9d 	.word	0x00009e9d
    9b14:	20000480 	.word	0x20000480
    9b18:	20000908 	.word	0x20000908

00009b1c <initMag>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void initMag()
{
    9b1c:	b580      	push	{r7, lr}
    9b1e:	b082      	sub	sp, #8
    9b20:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    9b22:	1dfb      	adds	r3, r7, #7
    9b24:	2200      	movs	r2, #0
    9b26:	701a      	strb	r2, [r3, #0]
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
    9b28:	4b4b      	ldr	r3, [pc, #300]	; (9c58 <initMag+0x13c>)
    9b2a:	2222      	movs	r2, #34	; 0x22
    9b2c:	5c9b      	ldrb	r3, [r3, r2]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d006      	beq.n	9b40 <initMag+0x24>
    9b32:	1dfb      	adds	r3, r7, #7
    9b34:	1dfa      	adds	r2, r7, #7
    9b36:	7812      	ldrb	r2, [r2, #0]
    9b38:	2180      	movs	r1, #128	; 0x80
    9b3a:	4249      	negs	r1, r1
    9b3c:	430a      	orrs	r2, r1
    9b3e:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
    9b40:	4b45      	ldr	r3, [pc, #276]	; (9c58 <initMag+0x13c>)
    9b42:	2223      	movs	r2, #35	; 0x23
    9b44:	5c9b      	ldrb	r3, [r3, r2]
    9b46:	015b      	lsls	r3, r3, #5
    9b48:	b25b      	sxtb	r3, r3
    9b4a:	2260      	movs	r2, #96	; 0x60
    9b4c:	4013      	ands	r3, r2
    9b4e:	b25a      	sxtb	r2, r3
    9b50:	1dfb      	adds	r3, r7, #7
    9b52:	781b      	ldrb	r3, [r3, #0]
    9b54:	b25b      	sxtb	r3, r3
    9b56:	4313      	orrs	r3, r2
    9b58:	b25a      	sxtb	r2, r3
    9b5a:	1dfb      	adds	r3, r7, #7
    9b5c:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
    9b5e:	4b3e      	ldr	r3, [pc, #248]	; (9c58 <initMag+0x13c>)
    9b60:	2221      	movs	r2, #33	; 0x21
    9b62:	5c9b      	ldrb	r3, [r3, r2]
    9b64:	009b      	lsls	r3, r3, #2
    9b66:	b25b      	sxtb	r3, r3
    9b68:	221c      	movs	r2, #28
    9b6a:	4013      	ands	r3, r2
    9b6c:	b25a      	sxtb	r2, r3
    9b6e:	1dfb      	adds	r3, r7, #7
    9b70:	781b      	ldrb	r3, [r3, #0]
    9b72:	b25b      	sxtb	r3, r3
    9b74:	4313      	orrs	r3, r2
    9b76:	b25a      	sxtb	r2, r3
    9b78:	1dfb      	adds	r3, r7, #7
    9b7a:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG1_M, tempRegValue);
    9b7c:	1dfb      	adds	r3, r7, #7
    9b7e:	781b      	ldrb	r3, [r3, #0]
    9b80:	0019      	movs	r1, r3
    9b82:	2020      	movs	r0, #32
    9b84:	4b35      	ldr	r3, [pc, #212]	; (9c5c <initMag+0x140>)
    9b86:	4798      	blx	r3
	// CTRL_REG2_M (Default value 0x00)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
    9b88:	1dfb      	adds	r3, r7, #7
    9b8a:	2200      	movs	r2, #0
    9b8c:	701a      	strb	r2, [r3, #0]
	switch (settings.mag.scale)
    9b8e:	4b32      	ldr	r3, [pc, #200]	; (9c58 <initMag+0x13c>)
    9b90:	2220      	movs	r2, #32
    9b92:	5c9b      	ldrb	r3, [r3, r2]
    9b94:	2b0c      	cmp	r3, #12
    9b96:	d00a      	beq.n	9bae <initMag+0x92>
    9b98:	2b10      	cmp	r3, #16
    9b9a:	d00f      	beq.n	9bbc <initMag+0xa0>
    9b9c:	2b08      	cmp	r3, #8
    9b9e:	d114      	bne.n	9bca <initMag+0xae>
	{
	case 8:
		tempRegValue |= (0x1 << 5);
    9ba0:	1dfb      	adds	r3, r7, #7
    9ba2:	1dfa      	adds	r2, r7, #7
    9ba4:	7812      	ldrb	r2, [r2, #0]
    9ba6:	2120      	movs	r1, #32
    9ba8:	430a      	orrs	r2, r1
    9baa:	701a      	strb	r2, [r3, #0]
		break;
    9bac:	e00d      	b.n	9bca <initMag+0xae>
	case 12:
		tempRegValue |= (0x2 << 5);
    9bae:	1dfb      	adds	r3, r7, #7
    9bb0:	1dfa      	adds	r2, r7, #7
    9bb2:	7812      	ldrb	r2, [r2, #0]
    9bb4:	2140      	movs	r1, #64	; 0x40
    9bb6:	430a      	orrs	r2, r1
    9bb8:	701a      	strb	r2, [r3, #0]
		break;
    9bba:	e006      	b.n	9bca <initMag+0xae>
	case 16:
		tempRegValue |= (0x3 << 5);
    9bbc:	1dfb      	adds	r3, r7, #7
    9bbe:	1dfa      	adds	r2, r7, #7
    9bc0:	7812      	ldrb	r2, [r2, #0]
    9bc2:	2160      	movs	r1, #96	; 0x60
    9bc4:	430a      	orrs	r2, r1
    9bc6:	701a      	strb	r2, [r3, #0]
		break;
    9bc8:	46c0      	nop			; (mov r8, r8)
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
    9bca:	1dfb      	adds	r3, r7, #7
    9bcc:	781b      	ldrb	r3, [r3, #0]
    9bce:	0019      	movs	r1, r3
    9bd0:	2021      	movs	r0, #33	; 0x21
    9bd2:	4b22      	ldr	r3, [pc, #136]	; (9c5c <initMag+0x140>)
    9bd4:	4798      	blx	r3
	// LP - Low-power mode cofiguration (1:enable)
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
    9bd6:	1dfb      	adds	r3, r7, #7
    9bd8:	2200      	movs	r2, #0
    9bda:	701a      	strb	r2, [r3, #0]
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
    9bdc:	4b1e      	ldr	r3, [pc, #120]	; (9c58 <initMag+0x13c>)
    9bde:	2225      	movs	r2, #37	; 0x25
    9be0:	5c9b      	ldrb	r3, [r3, r2]
    9be2:	2b00      	cmp	r3, #0
    9be4:	d005      	beq.n	9bf2 <initMag+0xd6>
    9be6:	1dfb      	adds	r3, r7, #7
    9be8:	1dfa      	adds	r2, r7, #7
    9bea:	7812      	ldrb	r2, [r2, #0]
    9bec:	2120      	movs	r1, #32
    9bee:	430a      	orrs	r2, r1
    9bf0:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.operatingMode & 0x3);
    9bf2:	4b19      	ldr	r3, [pc, #100]	; (9c58 <initMag+0x13c>)
    9bf4:	2226      	movs	r2, #38	; 0x26
    9bf6:	5c9b      	ldrb	r3, [r3, r2]
    9bf8:	b25b      	sxtb	r3, r3
    9bfa:	2203      	movs	r2, #3
    9bfc:	4013      	ands	r3, r2
    9bfe:	b25a      	sxtb	r2, r3
    9c00:	1dfb      	adds	r3, r7, #7
    9c02:	781b      	ldrb	r3, [r3, #0]
    9c04:	b25b      	sxtb	r3, r3
    9c06:	4313      	orrs	r3, r2
    9c08:	b25a      	sxtb	r2, r3
    9c0a:	1dfb      	adds	r3, r7, #7
    9c0c:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
    9c0e:	1dfb      	adds	r3, r7, #7
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	0019      	movs	r1, r3
    9c14:	2022      	movs	r0, #34	; 0x22
    9c16:	4b11      	ldr	r3, [pc, #68]	; (9c5c <initMag+0x140>)
    9c18:	4798      	blx	r3
	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
	// OMZ[1:0] - Z-axis operative mode selection
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
    9c1a:	1dfb      	adds	r3, r7, #7
    9c1c:	2200      	movs	r2, #0
    9c1e:	701a      	strb	r2, [r3, #0]
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
    9c20:	4b0d      	ldr	r3, [pc, #52]	; (9c58 <initMag+0x13c>)
    9c22:	2224      	movs	r2, #36	; 0x24
    9c24:	5c9b      	ldrb	r3, [r3, r2]
    9c26:	009b      	lsls	r3, r3, #2
    9c28:	b2da      	uxtb	r2, r3
    9c2a:	1dfb      	adds	r3, r7, #7
    9c2c:	210c      	movs	r1, #12
    9c2e:	400a      	ands	r2, r1
    9c30:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG4_M, tempRegValue);
    9c32:	1dfb      	adds	r3, r7, #7
    9c34:	781b      	ldrb	r3, [r3, #0]
    9c36:	0019      	movs	r1, r3
    9c38:	2023      	movs	r0, #35	; 0x23
    9c3a:	4b08      	ldr	r3, [pc, #32]	; (9c5c <initMag+0x140>)
    9c3c:	4798      	blx	r3
	
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
    9c3e:	1dfb      	adds	r3, r7, #7
    9c40:	2200      	movs	r2, #0
    9c42:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG5_M, tempRegValue);
    9c44:	1dfb      	adds	r3, r7, #7
    9c46:	781b      	ldrb	r3, [r3, #0]
    9c48:	0019      	movs	r1, r3
    9c4a:	2024      	movs	r0, #36	; 0x24
    9c4c:	4b03      	ldr	r3, [pc, #12]	; (9c5c <initMag+0x140>)
    9c4e:	4798      	blx	r3
}
    9c50:	46c0      	nop			; (mov r8, r8)
    9c52:	46bd      	mov	sp, r7
    9c54:	b002      	add	sp, #8
    9c56:	bd80      	pop	{r7, pc}
    9c58:	200004e8 	.word	0x200004e8
    9c5c:	0000a119 	.word	0x0000a119

00009c60 <readAccel>:
	
	return ((status & (1<<axis)) >> axis);
}

void readAccel()
{
    9c60:	b580      	push	{r7, lr}
    9c62:	b082      	sub	sp, #8
    9c64:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
    9c66:	003b      	movs	r3, r7
    9c68:	2206      	movs	r2, #6
    9c6a:	0019      	movs	r1, r3
    9c6c:	2028      	movs	r0, #40	; 0x28
    9c6e:	4b29      	ldr	r3, [pc, #164]	; (9d14 <readAccel+0xb4>)
    9c70:	4798      	blx	r3
	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
    9c72:	003b      	movs	r3, r7
    9c74:	785b      	ldrb	r3, [r3, #1]
    9c76:	021b      	lsls	r3, r3, #8
    9c78:	b21a      	sxth	r2, r3
    9c7a:	003b      	movs	r3, r7
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	b21b      	sxth	r3, r3
    9c80:	4313      	orrs	r3, r2
    9c82:	b21a      	sxth	r2, r3
    9c84:	4b24      	ldr	r3, [pc, #144]	; (9d18 <readAccel+0xb8>)
    9c86:	801a      	strh	r2, [r3, #0]
	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
    9c88:	003b      	movs	r3, r7
    9c8a:	78db      	ldrb	r3, [r3, #3]
    9c8c:	021b      	lsls	r3, r3, #8
    9c8e:	b21a      	sxth	r2, r3
    9c90:	003b      	movs	r3, r7
    9c92:	789b      	ldrb	r3, [r3, #2]
    9c94:	b21b      	sxth	r3, r3
    9c96:	4313      	orrs	r3, r2
    9c98:	b21a      	sxth	r2, r3
    9c9a:	4b20      	ldr	r3, [pc, #128]	; (9d1c <readAccel+0xbc>)
    9c9c:	801a      	strh	r2, [r3, #0]
	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
    9c9e:	003b      	movs	r3, r7
    9ca0:	795b      	ldrb	r3, [r3, #5]
    9ca2:	021b      	lsls	r3, r3, #8
    9ca4:	b21a      	sxth	r2, r3
    9ca6:	003b      	movs	r3, r7
    9ca8:	791b      	ldrb	r3, [r3, #4]
    9caa:	b21b      	sxth	r3, r3
    9cac:	4313      	orrs	r3, r2
    9cae:	b21a      	sxth	r2, r3
    9cb0:	4b1b      	ldr	r3, [pc, #108]	; (9d20 <readAccel+0xc0>)
    9cb2:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    9cb4:	4b1b      	ldr	r3, [pc, #108]	; (9d24 <readAccel+0xc4>)
    9cb6:	781b      	ldrb	r3, [r3, #0]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d026      	beq.n	9d0a <readAccel+0xaa>
	{
		ax -= aBiasRaw[X_AXIS];
    9cbc:	4b16      	ldr	r3, [pc, #88]	; (9d18 <readAccel+0xb8>)
    9cbe:	2200      	movs	r2, #0
    9cc0:	5e9b      	ldrsh	r3, [r3, r2]
    9cc2:	b29a      	uxth	r2, r3
    9cc4:	4b18      	ldr	r3, [pc, #96]	; (9d28 <readAccel+0xc8>)
    9cc6:	2100      	movs	r1, #0
    9cc8:	5e5b      	ldrsh	r3, [r3, r1]
    9cca:	b29b      	uxth	r3, r3
    9ccc:	1ad3      	subs	r3, r2, r3
    9cce:	b29b      	uxth	r3, r3
    9cd0:	b21a      	sxth	r2, r3
    9cd2:	4b11      	ldr	r3, [pc, #68]	; (9d18 <readAccel+0xb8>)
    9cd4:	801a      	strh	r2, [r3, #0]
		ay -= aBiasRaw[Y_AXIS];
    9cd6:	4b11      	ldr	r3, [pc, #68]	; (9d1c <readAccel+0xbc>)
    9cd8:	2200      	movs	r2, #0
    9cda:	5e9b      	ldrsh	r3, [r3, r2]
    9cdc:	b29a      	uxth	r2, r3
    9cde:	4b12      	ldr	r3, [pc, #72]	; (9d28 <readAccel+0xc8>)
    9ce0:	2102      	movs	r1, #2
    9ce2:	5e5b      	ldrsh	r3, [r3, r1]
    9ce4:	b29b      	uxth	r3, r3
    9ce6:	1ad3      	subs	r3, r2, r3
    9ce8:	b29b      	uxth	r3, r3
    9cea:	b21a      	sxth	r2, r3
    9cec:	4b0b      	ldr	r3, [pc, #44]	; (9d1c <readAccel+0xbc>)
    9cee:	801a      	strh	r2, [r3, #0]
		az -= aBiasRaw[Z_AXIS];
    9cf0:	4b0b      	ldr	r3, [pc, #44]	; (9d20 <readAccel+0xc0>)
    9cf2:	2200      	movs	r2, #0
    9cf4:	5e9b      	ldrsh	r3, [r3, r2]
    9cf6:	b29a      	uxth	r2, r3
    9cf8:	4b0b      	ldr	r3, [pc, #44]	; (9d28 <readAccel+0xc8>)
    9cfa:	2104      	movs	r1, #4
    9cfc:	5e5b      	ldrsh	r3, [r3, r1]
    9cfe:	b29b      	uxth	r3, r3
    9d00:	1ad3      	subs	r3, r2, r3
    9d02:	b29b      	uxth	r3, r3
    9d04:	b21a      	sxth	r2, r3
    9d06:	4b06      	ldr	r3, [pc, #24]	; (9d20 <readAccel+0xc0>)
    9d08:	801a      	strh	r2, [r3, #0]
	}
}
    9d0a:	46c0      	nop			; (mov r8, r8)
    9d0c:	46bd      	mov	sp, r7
    9d0e:	b002      	add	sp, #8
    9d10:	bd80      	pop	{r7, pc}
    9d12:	46c0      	nop			; (mov r8, r8)
    9d14:	0000a17d 	.word	0x0000a17d
    9d18:	200002ea 	.word	0x200002ea
    9d1c:	200002ec 	.word	0x200002ec
    9d20:	200002ee 	.word	0x200002ee
    9d24:	20000908 	.word	0x20000908
    9d28:	20000ca4 	.word	0x20000ca4

00009d2c <readMag>:
	
	return value;
}

void readMag()
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b082      	sub	sp, #8
    9d30:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
    9d32:	003b      	movs	r3, r7
    9d34:	2206      	movs	r2, #6
    9d36:	0019      	movs	r1, r3
    9d38:	2028      	movs	r0, #40	; 0x28
    9d3a:	4b13      	ldr	r3, [pc, #76]	; (9d88 <readMag+0x5c>)
    9d3c:	4798      	blx	r3
	mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
    9d3e:	003b      	movs	r3, r7
    9d40:	785b      	ldrb	r3, [r3, #1]
    9d42:	021b      	lsls	r3, r3, #8
    9d44:	b21a      	sxth	r2, r3
    9d46:	003b      	movs	r3, r7
    9d48:	781b      	ldrb	r3, [r3, #0]
    9d4a:	b21b      	sxth	r3, r3
    9d4c:	4313      	orrs	r3, r2
    9d4e:	b21a      	sxth	r2, r3
    9d50:	4b0e      	ldr	r3, [pc, #56]	; (9d8c <readMag+0x60>)
    9d52:	801a      	strh	r2, [r3, #0]
	my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
    9d54:	003b      	movs	r3, r7
    9d56:	78db      	ldrb	r3, [r3, #3]
    9d58:	021b      	lsls	r3, r3, #8
    9d5a:	b21a      	sxth	r2, r3
    9d5c:	003b      	movs	r3, r7
    9d5e:	789b      	ldrb	r3, [r3, #2]
    9d60:	b21b      	sxth	r3, r3
    9d62:	4313      	orrs	r3, r2
    9d64:	b21a      	sxth	r2, r3
    9d66:	4b0a      	ldr	r3, [pc, #40]	; (9d90 <readMag+0x64>)
    9d68:	801a      	strh	r2, [r3, #0]
	mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
    9d6a:	003b      	movs	r3, r7
    9d6c:	795b      	ldrb	r3, [r3, #5]
    9d6e:	021b      	lsls	r3, r3, #8
    9d70:	b21a      	sxth	r2, r3
    9d72:	003b      	movs	r3, r7
    9d74:	791b      	ldrb	r3, [r3, #4]
    9d76:	b21b      	sxth	r3, r3
    9d78:	4313      	orrs	r3, r2
    9d7a:	b21a      	sxth	r2, r3
    9d7c:	4b05      	ldr	r3, [pc, #20]	; (9d94 <readMag+0x68>)
    9d7e:	801a      	strh	r2, [r3, #0]
}
    9d80:	46c0      	nop			; (mov r8, r8)
    9d82:	46bd      	mov	sp, r7
    9d84:	b002      	add	sp, #8
    9d86:	bd80      	pop	{r7, pc}
    9d88:	0000a1e9 	.word	0x0000a1e9
    9d8c:	200002f0 	.word	0x200002f0
    9d90:	200002f2 	.word	0x200002f2
    9d94:	200002f4 	.word	0x200002f4

00009d98 <readGyro>:
	xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
	temperature = ((int16_t)temp[1] << 8) | temp[0];
}

void readGyro()
{
    9d98:	b580      	push	{r7, lr}
    9d9a:	b082      	sub	sp, #8
    9d9c:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
    9d9e:	003b      	movs	r3, r7
    9da0:	2206      	movs	r2, #6
    9da2:	0019      	movs	r1, r3
    9da4:	2018      	movs	r0, #24
    9da6:	4b29      	ldr	r3, [pc, #164]	; (9e4c <readGyro+0xb4>)
    9da8:	4798      	blx	r3
	gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
    9daa:	003b      	movs	r3, r7
    9dac:	785b      	ldrb	r3, [r3, #1]
    9dae:	021b      	lsls	r3, r3, #8
    9db0:	b21a      	sxth	r2, r3
    9db2:	003b      	movs	r3, r7
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	b21b      	sxth	r3, r3
    9db8:	4313      	orrs	r3, r2
    9dba:	b21a      	sxth	r2, r3
    9dbc:	4b24      	ldr	r3, [pc, #144]	; (9e50 <readGyro+0xb8>)
    9dbe:	801a      	strh	r2, [r3, #0]
	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
    9dc0:	003b      	movs	r3, r7
    9dc2:	78db      	ldrb	r3, [r3, #3]
    9dc4:	021b      	lsls	r3, r3, #8
    9dc6:	b21a      	sxth	r2, r3
    9dc8:	003b      	movs	r3, r7
    9dca:	789b      	ldrb	r3, [r3, #2]
    9dcc:	b21b      	sxth	r3, r3
    9dce:	4313      	orrs	r3, r2
    9dd0:	b21a      	sxth	r2, r3
    9dd2:	4b20      	ldr	r3, [pc, #128]	; (9e54 <readGyro+0xbc>)
    9dd4:	801a      	strh	r2, [r3, #0]
	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
    9dd6:	003b      	movs	r3, r7
    9dd8:	795b      	ldrb	r3, [r3, #5]
    9dda:	021b      	lsls	r3, r3, #8
    9ddc:	b21a      	sxth	r2, r3
    9dde:	003b      	movs	r3, r7
    9de0:	791b      	ldrb	r3, [r3, #4]
    9de2:	b21b      	sxth	r3, r3
    9de4:	4313      	orrs	r3, r2
    9de6:	b21a      	sxth	r2, r3
    9de8:	4b1b      	ldr	r3, [pc, #108]	; (9e58 <readGyro+0xc0>)
    9dea:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    9dec:	4b1b      	ldr	r3, [pc, #108]	; (9e5c <readGyro+0xc4>)
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	2b00      	cmp	r3, #0
    9df2:	d026      	beq.n	9e42 <readGyro+0xaa>
	{
		gx -= gBiasRaw[X_AXIS];
    9df4:	4b16      	ldr	r3, [pc, #88]	; (9e50 <readGyro+0xb8>)
    9df6:	2200      	movs	r2, #0
    9df8:	5e9b      	ldrsh	r3, [r3, r2]
    9dfa:	b29a      	uxth	r2, r3
    9dfc:	4b18      	ldr	r3, [pc, #96]	; (9e60 <readGyro+0xc8>)
    9dfe:	2100      	movs	r1, #0
    9e00:	5e5b      	ldrsh	r3, [r3, r1]
    9e02:	b29b      	uxth	r3, r3
    9e04:	1ad3      	subs	r3, r2, r3
    9e06:	b29b      	uxth	r3, r3
    9e08:	b21a      	sxth	r2, r3
    9e0a:	4b11      	ldr	r3, [pc, #68]	; (9e50 <readGyro+0xb8>)
    9e0c:	801a      	strh	r2, [r3, #0]
		gy -= gBiasRaw[Y_AXIS];
    9e0e:	4b11      	ldr	r3, [pc, #68]	; (9e54 <readGyro+0xbc>)
    9e10:	2200      	movs	r2, #0
    9e12:	5e9b      	ldrsh	r3, [r3, r2]
    9e14:	b29a      	uxth	r2, r3
    9e16:	4b12      	ldr	r3, [pc, #72]	; (9e60 <readGyro+0xc8>)
    9e18:	2102      	movs	r1, #2
    9e1a:	5e5b      	ldrsh	r3, [r3, r1]
    9e1c:	b29b      	uxth	r3, r3
    9e1e:	1ad3      	subs	r3, r2, r3
    9e20:	b29b      	uxth	r3, r3
    9e22:	b21a      	sxth	r2, r3
    9e24:	4b0b      	ldr	r3, [pc, #44]	; (9e54 <readGyro+0xbc>)
    9e26:	801a      	strh	r2, [r3, #0]
		gz -= gBiasRaw[Z_AXIS];
    9e28:	4b0b      	ldr	r3, [pc, #44]	; (9e58 <readGyro+0xc0>)
    9e2a:	2200      	movs	r2, #0
    9e2c:	5e9b      	ldrsh	r3, [r3, r2]
    9e2e:	b29a      	uxth	r2, r3
    9e30:	4b0b      	ldr	r3, [pc, #44]	; (9e60 <readGyro+0xc8>)
    9e32:	2104      	movs	r1, #4
    9e34:	5e5b      	ldrsh	r3, [r3, r1]
    9e36:	b29b      	uxth	r3, r3
    9e38:	1ad3      	subs	r3, r2, r3
    9e3a:	b29b      	uxth	r3, r3
    9e3c:	b21a      	sxth	r2, r3
    9e3e:	4b06      	ldr	r3, [pc, #24]	; (9e58 <readGyro+0xc0>)
    9e40:	801a      	strh	r2, [r3, #0]
	}
}
    9e42:	46c0      	nop			; (mov r8, r8)
    9e44:	46bd      	mov	sp, r7
    9e46:	b002      	add	sp, #8
    9e48:	bd80      	pop	{r7, pc}
    9e4a:	46c0      	nop			; (mov r8, r8)
    9e4c:	0000a17d 	.word	0x0000a17d
    9e50:	200002e4 	.word	0x200002e4
    9e54:	200002e6 	.word	0x200002e6
    9e58:	200002e8 	.word	0x200002e8
    9e5c:	20000908 	.word	0x20000908
    9e60:	20000c9c 	.word	0x20000c9c

00009e64 <calcGyro>:
	
	return value;
}

float calcGyro(int16_t gyro)
{
    9e64:	b580      	push	{r7, lr}
    9e66:	b082      	sub	sp, #8
    9e68:	af00      	add	r7, sp, #0
    9e6a:	0002      	movs	r2, r0
    9e6c:	1dbb      	adds	r3, r7, #6
    9e6e:	801a      	strh	r2, [r3, #0]
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
    9e70:	1dbb      	adds	r3, r7, #6
    9e72:	2200      	movs	r2, #0
    9e74:	5e9a      	ldrsh	r2, [r3, r2]
    9e76:	4b06      	ldr	r3, [pc, #24]	; (9e90 <calcGyro+0x2c>)
    9e78:	0010      	movs	r0, r2
    9e7a:	4798      	blx	r3
    9e7c:	4b05      	ldr	r3, [pc, #20]	; (9e94 <calcGyro+0x30>)
    9e7e:	681a      	ldr	r2, [r3, #0]
    9e80:	4b05      	ldr	r3, [pc, #20]	; (9e98 <calcGyro+0x34>)
    9e82:	1c11      	adds	r1, r2, #0
    9e84:	4798      	blx	r3
    9e86:	1c03      	adds	r3, r0, #0
}
    9e88:	1c18      	adds	r0, r3, #0
    9e8a:	46bd      	mov	sp, r7
    9e8c:	b002      	add	sp, #8
    9e8e:	bd80      	pop	{r7, pc}
    9e90:	00015259 	.word	0x00015259
    9e94:	20000f04 	.word	0x20000f04
    9e98:	00014ca1 	.word	0x00014ca1

00009e9c <calcAccel>:

float calcAccel(int16_t accel)
{
    9e9c:	b580      	push	{r7, lr}
    9e9e:	b082      	sub	sp, #8
    9ea0:	af00      	add	r7, sp, #0
    9ea2:	0002      	movs	r2, r0
    9ea4:	1dbb      	adds	r3, r7, #6
    9ea6:	801a      	strh	r2, [r3, #0]
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
    9ea8:	1dbb      	adds	r3, r7, #6
    9eaa:	2200      	movs	r2, #0
    9eac:	5e9a      	ldrsh	r2, [r3, r2]
    9eae:	4b06      	ldr	r3, [pc, #24]	; (9ec8 <calcAccel+0x2c>)
    9eb0:	0010      	movs	r0, r2
    9eb2:	4798      	blx	r3
    9eb4:	4b05      	ldr	r3, [pc, #20]	; (9ecc <calcAccel+0x30>)
    9eb6:	681a      	ldr	r2, [r3, #0]
    9eb8:	4b05      	ldr	r3, [pc, #20]	; (9ed0 <calcAccel+0x34>)
    9eba:	1c11      	adds	r1, r2, #0
    9ebc:	4798      	blx	r3
    9ebe:	1c03      	adds	r3, r0, #0
}
    9ec0:	1c18      	adds	r0, r3, #0
    9ec2:	46bd      	mov	sp, r7
    9ec4:	b002      	add	sp, #8
    9ec6:	bd80      	pop	{r7, pc}
    9ec8:	00015259 	.word	0x00015259
    9ecc:	200009bc 	.word	0x200009bc
    9ed0:	00014ca1 	.word	0x00014ca1

00009ed4 <calcgRes>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void calcgRes()
{
    9ed4:	b580      	push	{r7, lr}
    9ed6:	af00      	add	r7, sp, #0
	gRes = ((float) settings.gyro.scale) / 32768.0;
    9ed8:	4b08      	ldr	r3, [pc, #32]	; (9efc <calcgRes+0x28>)
    9eda:	88da      	ldrh	r2, [r3, #6]
    9edc:	4b08      	ldr	r3, [pc, #32]	; (9f00 <calcgRes+0x2c>)
    9ede:	0010      	movs	r0, r2
    9ee0:	4798      	blx	r3
    9ee2:	1c02      	adds	r2, r0, #0
    9ee4:	4b07      	ldr	r3, [pc, #28]	; (9f04 <calcgRes+0x30>)
    9ee6:	218e      	movs	r1, #142	; 0x8e
    9ee8:	05c9      	lsls	r1, r1, #23
    9eea:	1c10      	adds	r0, r2, #0
    9eec:	4798      	blx	r3
    9eee:	1c03      	adds	r3, r0, #0
    9ef0:	1c1a      	adds	r2, r3, #0
    9ef2:	4b05      	ldr	r3, [pc, #20]	; (9f08 <calcgRes+0x34>)
    9ef4:	601a      	str	r2, [r3, #0]
}
    9ef6:	46c0      	nop			; (mov r8, r8)
    9ef8:	46bd      	mov	sp, r7
    9efa:	bd80      	pop	{r7, pc}
    9efc:	200004e8 	.word	0x200004e8
    9f00:	000152f9 	.word	0x000152f9
    9f04:	000148c1 	.word	0x000148c1
    9f08:	20000f04 	.word	0x20000f04

00009f0c <calcaRes>:

void calcaRes()
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	af00      	add	r7, sp, #0
	aRes = ((float) settings.accel.scale) / 32768.0;
    9f10:	4b08      	ldr	r3, [pc, #32]	; (9f34 <calcaRes+0x28>)
    9f12:	7dda      	ldrb	r2, [r3, #23]
    9f14:	4b08      	ldr	r3, [pc, #32]	; (9f38 <calcaRes+0x2c>)
    9f16:	0010      	movs	r0, r2
    9f18:	4798      	blx	r3
    9f1a:	1c02      	adds	r2, r0, #0
    9f1c:	4b07      	ldr	r3, [pc, #28]	; (9f3c <calcaRes+0x30>)
    9f1e:	218e      	movs	r1, #142	; 0x8e
    9f20:	05c9      	lsls	r1, r1, #23
    9f22:	1c10      	adds	r0, r2, #0
    9f24:	4798      	blx	r3
    9f26:	1c03      	adds	r3, r0, #0
    9f28:	1c1a      	adds	r2, r3, #0
    9f2a:	4b05      	ldr	r3, [pc, #20]	; (9f40 <calcaRes+0x34>)
    9f2c:	601a      	str	r2, [r3, #0]
}
    9f2e:	46c0      	nop			; (mov r8, r8)
    9f30:	46bd      	mov	sp, r7
    9f32:	bd80      	pop	{r7, pc}
    9f34:	200004e8 	.word	0x200004e8
    9f38:	000152f9 	.word	0x000152f9
    9f3c:	000148c1 	.word	0x000148c1
    9f40:	200009bc 	.word	0x200009bc

00009f44 <calcmRes>:

void calcmRes()
{
    9f44:	b580      	push	{r7, lr}
    9f46:	af00      	add	r7, sp, #0
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
    9f48:	4b12      	ldr	r3, [pc, #72]	; (9f94 <calcmRes+0x50>)
    9f4a:	2220      	movs	r2, #32
    9f4c:	5c9b      	ldrb	r3, [r3, r2]
    9f4e:	2b08      	cmp	r3, #8
    9f50:	d00d      	beq.n	9f6e <calcmRes+0x2a>
    9f52:	dc02      	bgt.n	9f5a <calcmRes+0x16>
    9f54:	2b04      	cmp	r3, #4
    9f56:	d005      	beq.n	9f64 <calcmRes+0x20>
	case 16:
		mRes = magSensitivity[3];
		break;
	}
	
}
    9f58:	e018      	b.n	9f8c <calcmRes+0x48>
	switch (settings.mag.scale)
    9f5a:	2b0c      	cmp	r3, #12
    9f5c:	d00c      	beq.n	9f78 <calcmRes+0x34>
    9f5e:	2b10      	cmp	r3, #16
    9f60:	d00f      	beq.n	9f82 <calcmRes+0x3e>
}
    9f62:	e013      	b.n	9f8c <calcmRes+0x48>
		mRes = magSensitivity[0];
    9f64:	4b0c      	ldr	r3, [pc, #48]	; (9f98 <calcmRes+0x54>)
    9f66:	681a      	ldr	r2, [r3, #0]
    9f68:	4b0c      	ldr	r3, [pc, #48]	; (9f9c <calcmRes+0x58>)
    9f6a:	601a      	str	r2, [r3, #0]
		break;
    9f6c:	e00e      	b.n	9f8c <calcmRes+0x48>
		mRes = magSensitivity[1];
    9f6e:	4b0a      	ldr	r3, [pc, #40]	; (9f98 <calcmRes+0x54>)
    9f70:	685a      	ldr	r2, [r3, #4]
    9f72:	4b0a      	ldr	r3, [pc, #40]	; (9f9c <calcmRes+0x58>)
    9f74:	601a      	str	r2, [r3, #0]
		break;
    9f76:	e009      	b.n	9f8c <calcmRes+0x48>
		mRes = magSensitivity[2];
    9f78:	4b07      	ldr	r3, [pc, #28]	; (9f98 <calcmRes+0x54>)
    9f7a:	689a      	ldr	r2, [r3, #8]
    9f7c:	4b07      	ldr	r3, [pc, #28]	; (9f9c <calcmRes+0x58>)
    9f7e:	601a      	str	r2, [r3, #0]
		break;
    9f80:	e004      	b.n	9f8c <calcmRes+0x48>
		mRes = magSensitivity[3];
    9f82:	4b05      	ldr	r3, [pc, #20]	; (9f98 <calcmRes+0x54>)
    9f84:	68da      	ldr	r2, [r3, #12]
    9f86:	4b05      	ldr	r3, [pc, #20]	; (9f9c <calcmRes+0x58>)
    9f88:	601a      	str	r2, [r3, #0]
		break;
    9f8a:	46c0      	nop			; (mov r8, r8)
}
    9f8c:	46c0      	nop			; (mov r8, r8)
    9f8e:	46bd      	mov	sp, r7
    9f90:	bd80      	pop	{r7, pc}
    9f92:	46c0      	nop			; (mov r8, r8)
    9f94:	200004e8 	.word	0x200004e8
    9f98:	20000008 	.word	0x20000008
    9f9c:	20000fa8 	.word	0x20000fa8

00009fa0 <enableFIFO>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void enableFIFO(bool enable)
{
    9fa0:	b590      	push	{r4, r7, lr}
    9fa2:	b085      	sub	sp, #20
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	0002      	movs	r2, r0
    9fa8:	1dfb      	adds	r3, r7, #7
    9faa:	701a      	strb	r2, [r3, #0]
	uint8_t temp = xgReadByte(CTRL_REG9);
    9fac:	230f      	movs	r3, #15
    9fae:	18fc      	adds	r4, r7, r3
    9fb0:	2023      	movs	r0, #35	; 0x23
    9fb2:	4b12      	ldr	r3, [pc, #72]	; (9ffc <enableFIFO+0x5c>)
    9fb4:	4798      	blx	r3
    9fb6:	0003      	movs	r3, r0
    9fb8:	7023      	strb	r3, [r4, #0]
	if (enable) temp |= (1<<1);
    9fba:	1dfb      	adds	r3, r7, #7
    9fbc:	781b      	ldrb	r3, [r3, #0]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d008      	beq.n	9fd4 <enableFIFO+0x34>
    9fc2:	230f      	movs	r3, #15
    9fc4:	18fb      	adds	r3, r7, r3
    9fc6:	220f      	movs	r2, #15
    9fc8:	18ba      	adds	r2, r7, r2
    9fca:	7812      	ldrb	r2, [r2, #0]
    9fcc:	2102      	movs	r1, #2
    9fce:	430a      	orrs	r2, r1
    9fd0:	701a      	strb	r2, [r3, #0]
    9fd2:	e007      	b.n	9fe4 <enableFIFO+0x44>
	else temp &= ~(1<<1);
    9fd4:	230f      	movs	r3, #15
    9fd6:	18fb      	adds	r3, r7, r3
    9fd8:	220f      	movs	r2, #15
    9fda:	18ba      	adds	r2, r7, r2
    9fdc:	7812      	ldrb	r2, [r2, #0]
    9fde:	2102      	movs	r1, #2
    9fe0:	438a      	bics	r2, r1
    9fe2:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG9, temp);
    9fe4:	230f      	movs	r3, #15
    9fe6:	18fb      	adds	r3, r7, r3
    9fe8:	781b      	ldrb	r3, [r3, #0]
    9fea:	0019      	movs	r1, r3
    9fec:	2023      	movs	r0, #35	; 0x23
    9fee:	4b04      	ldr	r3, [pc, #16]	; (a000 <enableFIFO+0x60>)
    9ff0:	4798      	blx	r3
}
    9ff2:	46c0      	nop			; (mov r8, r8)
    9ff4:	46bd      	mov	sp, r7
    9ff6:	b005      	add	sp, #20
    9ff8:	bd90      	pop	{r4, r7, pc}
    9ffa:	46c0      	nop			; (mov r8, r8)
    9ffc:	0000a14d 	.word	0x0000a14d
    a000:	0000a0e5 	.word	0x0000a0e5

0000a004 <setFIFO>:

void setFIFO(enum fifoMode_type fifoMode, uint8_t fifoThs)
{
    a004:	b580      	push	{r7, lr}
    a006:	b084      	sub	sp, #16
    a008:	af00      	add	r7, sp, #0
    a00a:	0002      	movs	r2, r0
    a00c:	1dfb      	adds	r3, r7, #7
    a00e:	701a      	strb	r2, [r3, #0]
    a010:	1dbb      	adds	r3, r7, #6
    a012:	1c0a      	adds	r2, r1, #0
    a014:	701a      	strb	r2, [r3, #0]
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
    a016:	230f      	movs	r3, #15
    a018:	18fa      	adds	r2, r7, r3
    a01a:	1dbb      	adds	r3, r7, #6
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	b2d9      	uxtb	r1, r3
    a020:	291f      	cmp	r1, #31
    a022:	d900      	bls.n	a026 <setFIFO+0x22>
    a024:	231f      	movs	r3, #31
    a026:	7013      	strb	r3, [r2, #0]
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
    a028:	1dfb      	adds	r3, r7, #7
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	015b      	lsls	r3, r3, #5
    a02e:	b25a      	sxtb	r2, r3
    a030:	230f      	movs	r3, #15
    a032:	18fb      	adds	r3, r7, r3
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	b25b      	sxtb	r3, r3
    a038:	211f      	movs	r1, #31
    a03a:	400b      	ands	r3, r1
    a03c:	b25b      	sxtb	r3, r3
    a03e:	4313      	orrs	r3, r2
    a040:	b25b      	sxtb	r3, r3
    a042:	b2db      	uxtb	r3, r3
    a044:	0019      	movs	r1, r3
    a046:	202e      	movs	r0, #46	; 0x2e
    a048:	4b02      	ldr	r3, [pc, #8]	; (a054 <setFIFO+0x50>)
    a04a:	4798      	blx	r3
}
    a04c:	46c0      	nop			; (mov r8, r8)
    a04e:	46bd      	mov	sp, r7
    a050:	b004      	add	sp, #16
    a052:	bd80      	pop	{r7, pc}
    a054:	0000a0e5 	.word	0x0000a0e5

0000a058 <constrainScales>:
{
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void constrainScales()
{
    a058:	b580      	push	{r7, lr}
    a05a:	af00      	add	r7, sp, #0
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    a05c:	4b20      	ldr	r3, [pc, #128]	; (a0e0 <constrainScales+0x88>)
    a05e:	88db      	ldrh	r3, [r3, #6]
    a060:	2bf5      	cmp	r3, #245	; 0xf5
    a062:	d00e      	beq.n	a082 <constrainScales+0x2a>
    a064:	4b1e      	ldr	r3, [pc, #120]	; (a0e0 <constrainScales+0x88>)
    a066:	88da      	ldrh	r2, [r3, #6]
    a068:	23fa      	movs	r3, #250	; 0xfa
    a06a:	005b      	lsls	r3, r3, #1
    a06c:	429a      	cmp	r2, r3
    a06e:	d008      	beq.n	a082 <constrainScales+0x2a>
		(settings.gyro.scale != 2000))
    a070:	4b1b      	ldr	r3, [pc, #108]	; (a0e0 <constrainScales+0x88>)
    a072:	88da      	ldrh	r2, [r3, #6]
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    a074:	23fa      	movs	r3, #250	; 0xfa
    a076:	00db      	lsls	r3, r3, #3
    a078:	429a      	cmp	r2, r3
    a07a:	d002      	beq.n	a082 <constrainScales+0x2a>
	{
		settings.gyro.scale = 245;
    a07c:	4b18      	ldr	r3, [pc, #96]	; (a0e0 <constrainScales+0x88>)
    a07e:	22f5      	movs	r2, #245	; 0xf5
    a080:	80da      	strh	r2, [r3, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    a082:	4b17      	ldr	r3, [pc, #92]	; (a0e0 <constrainScales+0x88>)
    a084:	7ddb      	ldrb	r3, [r3, #23]
    a086:	2b02      	cmp	r3, #2
    a088:	d00e      	beq.n	a0a8 <constrainScales+0x50>
    a08a:	4b15      	ldr	r3, [pc, #84]	; (a0e0 <constrainScales+0x88>)
    a08c:	7ddb      	ldrb	r3, [r3, #23]
    a08e:	2b04      	cmp	r3, #4
    a090:	d00a      	beq.n	a0a8 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    a092:	4b13      	ldr	r3, [pc, #76]	; (a0e0 <constrainScales+0x88>)
    a094:	7ddb      	ldrb	r3, [r3, #23]
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    a096:	2b08      	cmp	r3, #8
    a098:	d006      	beq.n	a0a8 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    a09a:	4b11      	ldr	r3, [pc, #68]	; (a0e0 <constrainScales+0x88>)
    a09c:	7ddb      	ldrb	r3, [r3, #23]
    a09e:	2b10      	cmp	r3, #16
    a0a0:	d002      	beq.n	a0a8 <constrainScales+0x50>
	{
		settings.accel.scale = 2;
    a0a2:	4b0f      	ldr	r3, [pc, #60]	; (a0e0 <constrainScales+0x88>)
    a0a4:	2202      	movs	r2, #2
    a0a6:	75da      	strb	r2, [r3, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    a0a8:	4b0d      	ldr	r3, [pc, #52]	; (a0e0 <constrainScales+0x88>)
    a0aa:	2220      	movs	r2, #32
    a0ac:	5c9b      	ldrb	r3, [r3, r2]
    a0ae:	2b04      	cmp	r3, #4
    a0b0:	d012      	beq.n	a0d8 <constrainScales+0x80>
    a0b2:	4b0b      	ldr	r3, [pc, #44]	; (a0e0 <constrainScales+0x88>)
    a0b4:	2220      	movs	r2, #32
    a0b6:	5c9b      	ldrb	r3, [r3, r2]
    a0b8:	2b08      	cmp	r3, #8
    a0ba:	d00d      	beq.n	a0d8 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    a0bc:	4b08      	ldr	r3, [pc, #32]	; (a0e0 <constrainScales+0x88>)
    a0be:	2220      	movs	r2, #32
    a0c0:	5c9b      	ldrb	r3, [r3, r2]
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    a0c2:	2b0c      	cmp	r3, #12
    a0c4:	d008      	beq.n	a0d8 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    a0c6:	4b06      	ldr	r3, [pc, #24]	; (a0e0 <constrainScales+0x88>)
    a0c8:	2220      	movs	r2, #32
    a0ca:	5c9b      	ldrb	r3, [r3, r2]
    a0cc:	2b10      	cmp	r3, #16
    a0ce:	d003      	beq.n	a0d8 <constrainScales+0x80>
	{
		settings.mag.scale = 4;
    a0d0:	4b03      	ldr	r3, [pc, #12]	; (a0e0 <constrainScales+0x88>)
    a0d2:	2220      	movs	r2, #32
    a0d4:	2104      	movs	r1, #4
    a0d6:	5499      	strb	r1, [r3, r2]
	}
}
    a0d8:	46c0      	nop			; (mov r8, r8)
    a0da:	46bd      	mov	sp, r7
    a0dc:	bd80      	pop	{r7, pc}
    a0de:	46c0      	nop			; (mov r8, r8)
    a0e0:	200004e8 	.word	0x200004e8

0000a0e4 <xgWriteByte>:

void xgWriteByte(uint8_t subAddress, uint8_t data)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	b082      	sub	sp, #8
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	0002      	movs	r2, r0
    a0ec:	1dfb      	adds	r3, r7, #7
    a0ee:	701a      	strb	r2, [r3, #0]
    a0f0:	1dbb      	adds	r3, r7, #6
    a0f2:	1c0a      	adds	r2, r1, #0
    a0f4:	701a      	strb	r2, [r3, #0]
		writeByte(_xgAddress, subAddress, data);
    a0f6:	4b06      	ldr	r3, [pc, #24]	; (a110 <xgWriteByte+0x2c>)
    a0f8:	7818      	ldrb	r0, [r3, #0]
    a0fa:	1dbb      	adds	r3, r7, #6
    a0fc:	781a      	ldrb	r2, [r3, #0]
    a0fe:	1dfb      	adds	r3, r7, #7
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	0019      	movs	r1, r3
    a104:	4b03      	ldr	r3, [pc, #12]	; (a114 <xgWriteByte+0x30>)
    a106:	4798      	blx	r3
}
    a108:	46c0      	nop			; (mov r8, r8)
    a10a:	46bd      	mov	sp, r7
    a10c:	b002      	add	sp, #8
    a10e:	bd80      	pop	{r7, pc}
    a110:	20000a3a 	.word	0x20000a3a
    a114:	0000a27d 	.word	0x0000a27d

0000a118 <mWriteByte>:

void mWriteByte(uint8_t subAddress, uint8_t data)
{
    a118:	b580      	push	{r7, lr}
    a11a:	b082      	sub	sp, #8
    a11c:	af00      	add	r7, sp, #0
    a11e:	0002      	movs	r2, r0
    a120:	1dfb      	adds	r3, r7, #7
    a122:	701a      	strb	r2, [r3, #0]
    a124:	1dbb      	adds	r3, r7, #6
    a126:	1c0a      	adds	r2, r1, #0
    a128:	701a      	strb	r2, [r3, #0]
		return writeByte(_mAddress, subAddress, data);
    a12a:	4b06      	ldr	r3, [pc, #24]	; (a144 <mWriteByte+0x2c>)
    a12c:	7818      	ldrb	r0, [r3, #0]
    a12e:	1dbb      	adds	r3, r7, #6
    a130:	781a      	ldrb	r2, [r3, #0]
    a132:	1dfb      	adds	r3, r7, #7
    a134:	781b      	ldrb	r3, [r3, #0]
    a136:	0019      	movs	r1, r3
    a138:	4b03      	ldr	r3, [pc, #12]	; (a148 <mWriteByte+0x30>)
    a13a:	4798      	blx	r3
}
    a13c:	46bd      	mov	sp, r7
    a13e:	b002      	add	sp, #8
    a140:	bd80      	pop	{r7, pc}
    a142:	46c0      	nop			; (mov r8, r8)
    a144:	200009c0 	.word	0x200009c0
    a148:	0000a27d 	.word	0x0000a27d

0000a14c <xgReadByte>:

uint8_t xgReadByte(uint8_t subAddress)
{
    a14c:	b580      	push	{r7, lr}
    a14e:	b082      	sub	sp, #8
    a150:	af00      	add	r7, sp, #0
    a152:	0002      	movs	r2, r0
    a154:	1dfb      	adds	r3, r7, #7
    a156:	701a      	strb	r2, [r3, #0]
		return readByte(_xgAddress, subAddress);
    a158:	4b06      	ldr	r3, [pc, #24]	; (a174 <xgReadByte+0x28>)
    a15a:	781a      	ldrb	r2, [r3, #0]
    a15c:	1dfb      	adds	r3, r7, #7
    a15e:	781b      	ldrb	r3, [r3, #0]
    a160:	0019      	movs	r1, r3
    a162:	0010      	movs	r0, r2
    a164:	4b04      	ldr	r3, [pc, #16]	; (a178 <xgReadByte+0x2c>)
    a166:	4798      	blx	r3
    a168:	0003      	movs	r3, r0
}
    a16a:	0018      	movs	r0, r3
    a16c:	46bd      	mov	sp, r7
    a16e:	b002      	add	sp, #8
    a170:	bd80      	pop	{r7, pc}
    a172:	46c0      	nop			; (mov r8, r8)
    a174:	20000a3a 	.word	0x20000a3a
    a178:	0000a325 	.word	0x0000a325

0000a17c <xgReadBytes>:

void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    a17c:	b590      	push	{r4, r7, lr}
    a17e:	b083      	sub	sp, #12
    a180:	af00      	add	r7, sp, #0
    a182:	6039      	str	r1, [r7, #0]
    a184:	0011      	movs	r1, r2
    a186:	1dfb      	adds	r3, r7, #7
    a188:	1c02      	adds	r2, r0, #0
    a18a:	701a      	strb	r2, [r3, #0]
    a18c:	1dbb      	adds	r3, r7, #6
    a18e:	1c0a      	adds	r2, r1, #0
    a190:	701a      	strb	r2, [r3, #0]
		readBytes(_xgAddress, subAddress, dest, count);
    a192:	4b07      	ldr	r3, [pc, #28]	; (a1b0 <xgReadBytes+0x34>)
    a194:	7818      	ldrb	r0, [r3, #0]
    a196:	1dbb      	adds	r3, r7, #6
    a198:	781c      	ldrb	r4, [r3, #0]
    a19a:	683a      	ldr	r2, [r7, #0]
    a19c:	1dfb      	adds	r3, r7, #7
    a19e:	7819      	ldrb	r1, [r3, #0]
    a1a0:	0023      	movs	r3, r4
    a1a2:	4c04      	ldr	r4, [pc, #16]	; (a1b4 <xgReadBytes+0x38>)
    a1a4:	47a0      	blx	r4
}
    a1a6:	46c0      	nop			; (mov r8, r8)
    a1a8:	46bd      	mov	sp, r7
    a1aa:	b003      	add	sp, #12
    a1ac:	bd90      	pop	{r4, r7, pc}
    a1ae:	46c0      	nop			; (mov r8, r8)
    a1b0:	20000a3a 	.word	0x20000a3a
    a1b4:	0000a3f5 	.word	0x0000a3f5

0000a1b8 <mReadByte>:

uint8_t mReadByte(uint8_t subAddress)
{
    a1b8:	b580      	push	{r7, lr}
    a1ba:	b082      	sub	sp, #8
    a1bc:	af00      	add	r7, sp, #0
    a1be:	0002      	movs	r2, r0
    a1c0:	1dfb      	adds	r3, r7, #7
    a1c2:	701a      	strb	r2, [r3, #0]
		return readByte(_mAddress, subAddress);
    a1c4:	4b06      	ldr	r3, [pc, #24]	; (a1e0 <mReadByte+0x28>)
    a1c6:	781a      	ldrb	r2, [r3, #0]
    a1c8:	1dfb      	adds	r3, r7, #7
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	0019      	movs	r1, r3
    a1ce:	0010      	movs	r0, r2
    a1d0:	4b04      	ldr	r3, [pc, #16]	; (a1e4 <mReadByte+0x2c>)
    a1d2:	4798      	blx	r3
    a1d4:	0003      	movs	r3, r0
}
    a1d6:	0018      	movs	r0, r3
    a1d8:	46bd      	mov	sp, r7
    a1da:	b002      	add	sp, #8
    a1dc:	bd80      	pop	{r7, pc}
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	200009c0 	.word	0x200009c0
    a1e4:	0000a325 	.word	0x0000a325

0000a1e8 <mReadBytes>:

void mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    a1e8:	b590      	push	{r4, r7, lr}
    a1ea:	b083      	sub	sp, #12
    a1ec:	af00      	add	r7, sp, #0
    a1ee:	6039      	str	r1, [r7, #0]
    a1f0:	0011      	movs	r1, r2
    a1f2:	1dfb      	adds	r3, r7, #7
    a1f4:	1c02      	adds	r2, r0, #0
    a1f6:	701a      	strb	r2, [r3, #0]
    a1f8:	1dbb      	adds	r3, r7, #6
    a1fa:	1c0a      	adds	r2, r1, #0
    a1fc:	701a      	strb	r2, [r3, #0]
		readBytes(_mAddress, subAddress, dest, count);
    a1fe:	4b07      	ldr	r3, [pc, #28]	; (a21c <mReadBytes+0x34>)
    a200:	7818      	ldrb	r0, [r3, #0]
    a202:	1dbb      	adds	r3, r7, #6
    a204:	781c      	ldrb	r4, [r3, #0]
    a206:	683a      	ldr	r2, [r7, #0]
    a208:	1dfb      	adds	r3, r7, #7
    a20a:	7819      	ldrb	r1, [r3, #0]
    a20c:	0023      	movs	r3, r4
    a20e:	4c04      	ldr	r4, [pc, #16]	; (a220 <mReadBytes+0x38>)
    a210:	47a0      	blx	r4
}
    a212:	46c0      	nop			; (mov r8, r8)
    a214:	46bd      	mov	sp, r7
    a216:	b003      	add	sp, #12
    a218:	bd90      	pop	{r4, r7, pc}
    a21a:	46c0      	nop			; (mov r8, r8)
    a21c:	200009c0 	.word	0x200009c0
    a220:	0000a3f5 	.word	0x0000a3f5

0000a224 <initI2C>:

// Configure SERCOM channel 3 as I2C master for IMU communication
void initI2C()
{
    a224:	b580      	push	{r7, lr}
    a226:	b08e      	sub	sp, #56	; 0x38
    a228:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    a22a:	1d3b      	adds	r3, r7, #4
    a22c:	0018      	movs	r0, r3
    a22e:	4b0c      	ldr	r3, [pc, #48]	; (a260 <initI2C+0x3c>)
    a230:	4798      	blx	r3
	config_i2c_master.buffer_timeout = MASTER_TIMEOUT;
    a232:	1d3b      	adds	r3, r7, #4
    a234:	22fa      	movs	r2, #250	; 0xfa
    a236:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    a238:	1d3b      	adds	r3, r7, #4
    a23a:	4a0a      	ldr	r2, [pc, #40]	; (a264 <initI2C+0x40>)
    a23c:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    a23e:	1d3b      	adds	r3, r7, #4
    a240:	4a09      	ldr	r2, [pc, #36]	; (a268 <initI2C+0x44>)
    a242:	621a      	str	r2, [r3, #32]
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    a244:	1d3a      	adds	r2, r7, #4
    a246:	4909      	ldr	r1, [pc, #36]	; (a26c <initI2C+0x48>)
    a248:	4b09      	ldr	r3, [pc, #36]	; (a270 <initI2C+0x4c>)
    a24a:	0018      	movs	r0, r3
    a24c:	4b09      	ldr	r3, [pc, #36]	; (a274 <initI2C+0x50>)
    a24e:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    a250:	4b07      	ldr	r3, [pc, #28]	; (a270 <initI2C+0x4c>)
    a252:	0018      	movs	r0, r3
    a254:	4b08      	ldr	r3, [pc, #32]	; (a278 <initI2C+0x54>)
    a256:	4798      	blx	r3
}
    a258:	46c0      	nop			; (mov r8, r8)
    a25a:	46bd      	mov	sp, r7
    a25c:	b00e      	add	sp, #56	; 0x38
    a25e:	bd80      	pop	{r7, pc}
    a260:	00008eed 	.word	0x00008eed
    a264:	00160002 	.word	0x00160002
    a268:	00170002 	.word	0x00170002
    a26c:	42001400 	.word	0x42001400
    a270:	20000cac 	.word	0x20000cac
    a274:	00003701 	.word	0x00003701
    a278:	00008f71 	.word	0x00008f71

0000a27c <writeByte>:

// Wire.h read and write protocols
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
    a27c:	b590      	push	{r4, r7, lr}
    a27e:	b087      	sub	sp, #28
    a280:	af00      	add	r7, sp, #0
    a282:	0004      	movs	r4, r0
    a284:	0008      	movs	r0, r1
    a286:	0011      	movs	r1, r2
    a288:	1dfb      	adds	r3, r7, #7
    a28a:	1c22      	adds	r2, r4, #0
    a28c:	701a      	strb	r2, [r3, #0]
    a28e:	1dbb      	adds	r3, r7, #6
    a290:	1c02      	adds	r2, r0, #0
    a292:	701a      	strb	r2, [r3, #0]
    a294:	1d7b      	adds	r3, r7, #5
    a296:	1c0a      	adds	r2, r1, #0
    a298:	701a      	strb	r2, [r3, #0]
	/* Timeout counter. */
	uint16_t timeout = 0;
    a29a:	2316      	movs	r3, #22
    a29c:	18fb      	adds	r3, r7, r3
    a29e:	2200      	movs	r2, #0
    a2a0:	801a      	strh	r2, [r3, #0]
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    a2a2:	4b1d      	ldr	r3, [pc, #116]	; (a318 <writeByte+0x9c>)
    a2a4:	1dba      	adds	r2, r7, #6
    a2a6:	7812      	ldrb	r2, [r2, #0]
    a2a8:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = data;
    a2aa:	4b1b      	ldr	r3, [pc, #108]	; (a318 <writeByte+0x9c>)
    a2ac:	1d7a      	adds	r2, r7, #5
    a2ae:	7812      	ldrb	r2, [r2, #0]
    a2b0:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
    a2b2:	1dfb      	adds	r3, r7, #7
    a2b4:	781b      	ldrb	r3, [r3, #0]
    a2b6:	b29a      	uxth	r2, r3
    a2b8:	2308      	movs	r3, #8
    a2ba:	18fb      	adds	r3, r7, r3
    a2bc:	801a      	strh	r2, [r3, #0]
    a2be:	2308      	movs	r3, #8
    a2c0:	18fb      	adds	r3, r7, r3
    a2c2:	2202      	movs	r2, #2
    a2c4:	805a      	strh	r2, [r3, #2]
    a2c6:	2308      	movs	r3, #8
    a2c8:	18fb      	adds	r3, r7, r3
    a2ca:	4a13      	ldr	r2, [pc, #76]	; (a318 <writeByte+0x9c>)
    a2cc:	605a      	str	r2, [r3, #4]
    a2ce:	2308      	movs	r3, #8
    a2d0:	18fb      	adds	r3, r7, r3
    a2d2:	2200      	movs	r2, #0
    a2d4:	721a      	strb	r2, [r3, #8]
    a2d6:	2308      	movs	r3, #8
    a2d8:	18fb      	adds	r3, r7, r3
    a2da:	2200      	movs	r2, #0
    a2dc:	725a      	strb	r2, [r3, #9]
    a2de:	2308      	movs	r3, #8
    a2e0:	18fb      	adds	r3, r7, r3
    a2e2:	2200      	movs	r2, #0
    a2e4:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

    /* Write buffer to slave until success. */
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a2e6:	e008      	b.n	a2fa <writeByte+0x7e>
    STATUS_OK) {
	    /* Increment timeout counter and check if timed out. */
	    if (timeout++ == MASTER_TIMEOUT) {
    a2e8:	2316      	movs	r3, #22
    a2ea:	18fb      	adds	r3, r7, r3
    a2ec:	881b      	ldrh	r3, [r3, #0]
    a2ee:	2216      	movs	r2, #22
    a2f0:	18ba      	adds	r2, r7, r2
    a2f2:	1c59      	adds	r1, r3, #1
    a2f4:	8011      	strh	r1, [r2, #0]
    a2f6:	2bfa      	cmp	r3, #250	; 0xfa
    a2f8:	d009      	beq.n	a30e <writeByte+0x92>
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a2fa:	2308      	movs	r3, #8
    a2fc:	18fa      	adds	r2, r7, r3
    a2fe:	4b07      	ldr	r3, [pc, #28]	; (a31c <writeByte+0xa0>)
    a300:	0011      	movs	r1, r2
    a302:	0018      	movs	r0, r3
    a304:	4b06      	ldr	r3, [pc, #24]	; (a320 <writeByte+0xa4>)
    a306:	4798      	blx	r3
    a308:	1e03      	subs	r3, r0, #0
    a30a:	d1ed      	bne.n	a2e8 <writeByte+0x6c>
		    break;
	    }
    }
}
    a30c:	e000      	b.n	a310 <writeByte+0x94>
		    break;
    a30e:	46c0      	nop			; (mov r8, r8)
}
    a310:	46c0      	nop			; (mov r8, r8)
    a312:	46bd      	mov	sp, r7
    a314:	b007      	add	sp, #28
    a316:	bd90      	pop	{r4, r7, pc}
    a318:	20000fac 	.word	0x20000fac
    a31c:	20000cac 	.word	0x20000cac
    a320:	00003d71 	.word	0x00003d71

0000a324 <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
    a324:	b580      	push	{r7, lr}
    a326:	b088      	sub	sp, #32
    a328:	af00      	add	r7, sp, #0
    a32a:	0002      	movs	r2, r0
    a32c:	1dfb      	adds	r3, r7, #7
    a32e:	701a      	strb	r2, [r3, #0]
    a330:	1dbb      	adds	r3, r7, #6
    a332:	1c0a      	adds	r2, r1, #0
    a334:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    a336:	2300      	movs	r3, #0
    a338:	61fb      	str	r3, [r7, #28]
	uint8_t data; // `data` will store the register data	
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    a33a:	4b29      	ldr	r3, [pc, #164]	; (a3e0 <readByte+0xbc>)
    a33c:	1dba      	adds	r2, r7, #6
    a33e:	7812      	ldrb	r2, [r2, #0]
    a340:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    a342:	1dfb      	adds	r3, r7, #7
    a344:	781b      	ldrb	r3, [r3, #0]
    a346:	b29a      	uxth	r2, r3
    a348:	230c      	movs	r3, #12
    a34a:	18fb      	adds	r3, r7, r3
    a34c:	801a      	strh	r2, [r3, #0]
    a34e:	230c      	movs	r3, #12
    a350:	18fb      	adds	r3, r7, r3
    a352:	2201      	movs	r2, #1
    a354:	805a      	strh	r2, [r3, #2]
    a356:	230c      	movs	r3, #12
    a358:	18fb      	adds	r3, r7, r3
    a35a:	4a21      	ldr	r2, [pc, #132]	; (a3e0 <readByte+0xbc>)
    a35c:	605a      	str	r2, [r3, #4]
    a35e:	230c      	movs	r3, #12
    a360:	18fb      	adds	r3, r7, r3
    a362:	2200      	movs	r2, #0
    a364:	721a      	strb	r2, [r3, #8]
    a366:	230c      	movs	r3, #12
    a368:	18fb      	adds	r3, r7, r3
    a36a:	2200      	movs	r2, #0
    a36c:	725a      	strb	r2, [r3, #9]
    a36e:	230c      	movs	r3, #12
    a370:	18fb      	adds	r3, r7, r3
    a372:	2200      	movs	r2, #0
    a374:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a376:	e004      	b.n	a382 <readByte+0x5e>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a378:	69fb      	ldr	r3, [r7, #28]
    a37a:	1c5a      	adds	r2, r3, #1
    a37c:	61fa      	str	r2, [r7, #28]
    a37e:	2bfa      	cmp	r3, #250	; 0xfa
    a380:	d009      	beq.n	a396 <readByte+0x72>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a382:	230c      	movs	r3, #12
    a384:	18fa      	adds	r2, r7, r3
    a386:	4b17      	ldr	r3, [pc, #92]	; (a3e4 <readByte+0xc0>)
    a388:	0011      	movs	r1, r2
    a38a:	0018      	movs	r0, r3
    a38c:	4b16      	ldr	r3, [pc, #88]	; (a3e8 <readByte+0xc4>)
    a38e:	4798      	blx	r3
    a390:	1e03      	subs	r3, r0, #0
    a392:	d1f1      	bne.n	a378 <readByte+0x54>
    a394:	e000      	b.n	a398 <readByte+0x74>
			break;
    a396:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    a398:	2300      	movs	r3, #0
    a39a:	61fb      	str	r3, [r7, #28]
	packet.data = read_buffer;
    a39c:	230c      	movs	r3, #12
    a39e:	18fb      	adds	r3, r7, r3
    a3a0:	4a12      	ldr	r2, [pc, #72]	; (a3ec <readByte+0xc8>)
    a3a2:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a3a4:	e004      	b.n	a3b0 <readByte+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a3a6:	69fb      	ldr	r3, [r7, #28]
    a3a8:	1c5a      	adds	r2, r3, #1
    a3aa:	61fa      	str	r2, [r7, #28]
    a3ac:	2bfa      	cmp	r3, #250	; 0xfa
    a3ae:	d009      	beq.n	a3c4 <readByte+0xa0>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a3b0:	230c      	movs	r3, #12
    a3b2:	18fa      	adds	r2, r7, r3
    a3b4:	4b0b      	ldr	r3, [pc, #44]	; (a3e4 <readByte+0xc0>)
    a3b6:	0011      	movs	r1, r2
    a3b8:	0018      	movs	r0, r3
    a3ba:	4b0d      	ldr	r3, [pc, #52]	; (a3f0 <readByte+0xcc>)
    a3bc:	4798      	blx	r3
    a3be:	1e03      	subs	r3, r0, #0
    a3c0:	d1f1      	bne.n	a3a6 <readByte+0x82>
    a3c2:	e000      	b.n	a3c6 <readByte+0xa2>
			break;
    a3c4:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	data = read_buffer[0];                      // Fill Rx buffer with result
    a3c6:	231b      	movs	r3, #27
    a3c8:	18fb      	adds	r3, r7, r3
    a3ca:	4a08      	ldr	r2, [pc, #32]	; (a3ec <readByte+0xc8>)
    a3cc:	7812      	ldrb	r2, [r2, #0]
    a3ce:	701a      	strb	r2, [r3, #0]
	return data;                             // Return data read from slave register
    a3d0:	231b      	movs	r3, #27
    a3d2:	18fb      	adds	r3, r7, r3
    a3d4:	781b      	ldrb	r3, [r3, #0]
}
    a3d6:	0018      	movs	r0, r3
    a3d8:	46bd      	mov	sp, r7
    a3da:	b008      	add	sp, #32
    a3dc:	bd80      	pop	{r7, pc}
    a3de:	46c0      	nop			; (mov r8, r8)
    a3e0:	20000fac 	.word	0x20000fac
    a3e4:	20000cac 	.word	0x20000cac
    a3e8:	00003d71 	.word	0x00003d71
    a3ec:	20000cd4 	.word	0x20000cd4
    a3f0:	00003bb9 	.word	0x00003bb9

0000a3f4 <readBytes>:

uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
    a3f4:	b590      	push	{r4, r7, lr}
    a3f6:	b089      	sub	sp, #36	; 0x24
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	0004      	movs	r4, r0
    a3fc:	0008      	movs	r0, r1
    a3fe:	603a      	str	r2, [r7, #0]
    a400:	0019      	movs	r1, r3
    a402:	1dfb      	adds	r3, r7, #7
    a404:	1c22      	adds	r2, r4, #0
    a406:	701a      	strb	r2, [r3, #0]
    a408:	1dbb      	adds	r3, r7, #6
    a40a:	1c02      	adds	r2, r0, #0
    a40c:	701a      	strb	r2, [r3, #0]
    a40e:	1d7b      	adds	r3, r7, #5
    a410:	1c0a      	adds	r2, r1, #0
    a412:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    a414:	2300      	movs	r3, #0
    a416:	61fb      	str	r3, [r7, #28]
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress | 0x80;
    a418:	1dbb      	adds	r3, r7, #6
    a41a:	781b      	ldrb	r3, [r3, #0]
    a41c:	2280      	movs	r2, #128	; 0x80
    a41e:	4252      	negs	r2, r2
    a420:	4313      	orrs	r3, r2
    a422:	b2da      	uxtb	r2, r3
    a424:	4b38      	ldr	r3, [pc, #224]	; (a508 <readBytes+0x114>)
    a426:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    a428:	1dfb      	adds	r3, r7, #7
    a42a:	781b      	ldrb	r3, [r3, #0]
    a42c:	b29a      	uxth	r2, r3
    a42e:	230c      	movs	r3, #12
    a430:	18fb      	adds	r3, r7, r3
    a432:	801a      	strh	r2, [r3, #0]
    a434:	230c      	movs	r3, #12
    a436:	18fb      	adds	r3, r7, r3
    a438:	2201      	movs	r2, #1
    a43a:	805a      	strh	r2, [r3, #2]
    a43c:	230c      	movs	r3, #12
    a43e:	18fb      	adds	r3, r7, r3
    a440:	4a31      	ldr	r2, [pc, #196]	; (a508 <readBytes+0x114>)
    a442:	605a      	str	r2, [r3, #4]
    a444:	230c      	movs	r3, #12
    a446:	18fb      	adds	r3, r7, r3
    a448:	2200      	movs	r2, #0
    a44a:	721a      	strb	r2, [r3, #8]
    a44c:	230c      	movs	r3, #12
    a44e:	18fb      	adds	r3, r7, r3
    a450:	2200      	movs	r2, #0
    a452:	725a      	strb	r2, [r3, #9]
    a454:	230c      	movs	r3, #12
    a456:	18fb      	adds	r3, r7, r3
    a458:	2200      	movs	r2, #0
    a45a:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a45c:	e004      	b.n	a468 <readBytes+0x74>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a45e:	69fb      	ldr	r3, [r7, #28]
    a460:	1c5a      	adds	r2, r3, #1
    a462:	61fa      	str	r2, [r7, #28]
    a464:	2bfa      	cmp	r3, #250	; 0xfa
    a466:	d009      	beq.n	a47c <readBytes+0x88>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a468:	230c      	movs	r3, #12
    a46a:	18fa      	adds	r2, r7, r3
    a46c:	4b27      	ldr	r3, [pc, #156]	; (a50c <readBytes+0x118>)
    a46e:	0011      	movs	r1, r2
    a470:	0018      	movs	r0, r3
    a472:	4b27      	ldr	r3, [pc, #156]	; (a510 <readBytes+0x11c>)
    a474:	4798      	blx	r3
    a476:	1e03      	subs	r3, r0, #0
    a478:	d1f1      	bne.n	a45e <readBytes+0x6a>
    a47a:	e000      	b.n	a47e <readBytes+0x8a>
			break;
    a47c:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    a47e:	2300      	movs	r3, #0
    a480:	61fb      	str	r3, [r7, #28]
	packet.data_length = count;
    a482:	1d7b      	adds	r3, r7, #5
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	b29a      	uxth	r2, r3
    a488:	230c      	movs	r3, #12
    a48a:	18fb      	adds	r3, r7, r3
    a48c:	805a      	strh	r2, [r3, #2]
	packet.data = read_buffer;
    a48e:	230c      	movs	r3, #12
    a490:	18fb      	adds	r3, r7, r3
    a492:	4a20      	ldr	r2, [pc, #128]	; (a514 <readBytes+0x120>)
    a494:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a496:	e004      	b.n	a4a2 <readBytes+0xae>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a498:	69fb      	ldr	r3, [r7, #28]
    a49a:	1c5a      	adds	r2, r3, #1
    a49c:	61fa      	str	r2, [r7, #28]
    a49e:	2bfa      	cmp	r3, #250	; 0xfa
    a4a0:	d009      	beq.n	a4b6 <readBytes+0xc2>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a4a2:	230c      	movs	r3, #12
    a4a4:	18fa      	adds	r2, r7, r3
    a4a6:	4b19      	ldr	r3, [pc, #100]	; (a50c <readBytes+0x118>)
    a4a8:	0011      	movs	r1, r2
    a4aa:	0018      	movs	r0, r3
    a4ac:	4b1a      	ldr	r3, [pc, #104]	; (a518 <readBytes+0x124>)
    a4ae:	4798      	blx	r3
    a4b0:	1e03      	subs	r3, r0, #0
    a4b2:	d1f1      	bne.n	a498 <readBytes+0xa4>
    a4b4:	e000      	b.n	a4b8 <readBytes+0xc4>
			break;
    a4b6:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	uint8_t i = 0;
    a4b8:	231b      	movs	r3, #27
    a4ba:	18fb      	adds	r3, r7, r3
    a4bc:	2200      	movs	r2, #0
    a4be:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    a4c0:	231b      	movs	r3, #27
    a4c2:	18fb      	adds	r3, r7, r3
    a4c4:	2200      	movs	r2, #0
    a4c6:	701a      	strb	r2, [r3, #0]
    a4c8:	e011      	b.n	a4ee <readBytes+0xfa>
	{
		dest[i] = read_buffer[i];
    a4ca:	231b      	movs	r3, #27
    a4cc:	18fb      	adds	r3, r7, r3
    a4ce:	781b      	ldrb	r3, [r3, #0]
    a4d0:	683a      	ldr	r2, [r7, #0]
    a4d2:	18d3      	adds	r3, r2, r3
    a4d4:	221b      	movs	r2, #27
    a4d6:	18ba      	adds	r2, r7, r2
    a4d8:	7812      	ldrb	r2, [r2, #0]
    a4da:	490e      	ldr	r1, [pc, #56]	; (a514 <readBytes+0x120>)
    a4dc:	5c8a      	ldrb	r2, [r1, r2]
    a4de:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    a4e0:	231b      	movs	r3, #27
    a4e2:	18fb      	adds	r3, r7, r3
    a4e4:	781a      	ldrb	r2, [r3, #0]
    a4e6:	231b      	movs	r3, #27
    a4e8:	18fb      	adds	r3, r7, r3
    a4ea:	3201      	adds	r2, #1
    a4ec:	701a      	strb	r2, [r3, #0]
    a4ee:	231b      	movs	r3, #27
    a4f0:	18fa      	adds	r2, r7, r3
    a4f2:	1d7b      	adds	r3, r7, #5
    a4f4:	7812      	ldrb	r2, [r2, #0]
    a4f6:	781b      	ldrb	r3, [r3, #0]
    a4f8:	429a      	cmp	r2, r3
    a4fa:	d3e6      	bcc.n	a4ca <readBytes+0xd6>
	}
	return count;
    a4fc:	1d7b      	adds	r3, r7, #5
    a4fe:	781b      	ldrb	r3, [r3, #0]
}
    a500:	0018      	movs	r0, r3
    a502:	46bd      	mov	sp, r7
    a504:	b009      	add	sp, #36	; 0x24
    a506:	bd90      	pop	{r4, r7, pc}
    a508:	20000fac 	.word	0x20000fac
    a50c:	20000cac 	.word	0x20000cac
    a510:	00003d71 	.word	0x00003d71
    a514:	20000cd4 	.word	0x20000cd4
    a518:	00003bb9 	.word	0x00003bb9

0000a51c <CorrectIMUvalues>:

void CorrectIMUvalues(uint8_t connector_orient, uint8_t power_orient){
    a51c:	b580      	push	{r7, lr}
    a51e:	b082      	sub	sp, #8
    a520:	af00      	add	r7, sp, #0
    a522:	0002      	movs	r2, r0
    a524:	1dfb      	adds	r3, r7, #7
    a526:	701a      	strb	r2, [r3, #0]
    a528:	1dbb      	adds	r3, r7, #6
    a52a:	1c0a      	adds	r2, r1, #0
    a52c:	701a      	strb	r2, [r3, #0]
	if((connector_orient == 0 || power_orient == 0)||(connector_orient > 6 || power_orient > 6)){
    a52e:	1dfb      	adds	r3, r7, #7
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	2b00      	cmp	r3, #0
    a534:	d00b      	beq.n	a54e <CorrectIMUvalues+0x32>
    a536:	1dbb      	adds	r3, r7, #6
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	2b00      	cmp	r3, #0
    a53c:	d007      	beq.n	a54e <CorrectIMUvalues+0x32>
    a53e:	1dfb      	adds	r3, r7, #7
    a540:	781b      	ldrb	r3, [r3, #0]
    a542:	2b06      	cmp	r3, #6
    a544:	d803      	bhi.n	a54e <CorrectIMUvalues+0x32>
    a546:	1dbb      	adds	r3, r7, #6
    a548:	781b      	ldrb	r3, [r3, #0]
    a54a:	2b06      	cmp	r3, #6
    a54c:	d92e      	bls.n	a5ac <CorrectIMUvalues+0x90>
		caz = az;
    a54e:	4bf3      	ldr	r3, [pc, #972]	; (a91c <CorrectIMUvalues+0x400>)
    a550:	2200      	movs	r2, #0
    a552:	5e9a      	ldrsh	r2, [r3, r2]
    a554:	4bf2      	ldr	r3, [pc, #968]	; (a920 <CorrectIMUvalues+0x404>)
    a556:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    a558:	4bf2      	ldr	r3, [pc, #968]	; (a924 <CorrectIMUvalues+0x408>)
    a55a:	2200      	movs	r2, #0
    a55c:	5e9a      	ldrsh	r2, [r3, r2]
    a55e:	4bf2      	ldr	r3, [pc, #968]	; (a928 <CorrectIMUvalues+0x40c>)
    a560:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    a562:	4bf2      	ldr	r3, [pc, #968]	; (a92c <CorrectIMUvalues+0x410>)
    a564:	2200      	movs	r2, #0
    a566:	5e9a      	ldrsh	r2, [r3, r2]
    a568:	4bf1      	ldr	r3, [pc, #964]	; (a930 <CorrectIMUvalues+0x414>)
    a56a:	801a      	strh	r2, [r3, #0]
		cax = ax;
    a56c:	4bf1      	ldr	r3, [pc, #964]	; (a934 <CorrectIMUvalues+0x418>)
    a56e:	2200      	movs	r2, #0
    a570:	5e9a      	ldrsh	r2, [r3, r2]
    a572:	4bf1      	ldr	r3, [pc, #964]	; (a938 <CorrectIMUvalues+0x41c>)
    a574:	801a      	strh	r2, [r3, #0]
		cay = ay;
    a576:	4bf1      	ldr	r3, [pc, #964]	; (a93c <CorrectIMUvalues+0x420>)
    a578:	2200      	movs	r2, #0
    a57a:	5e9a      	ldrsh	r2, [r3, r2]
    a57c:	4bf0      	ldr	r3, [pc, #960]	; (a940 <CorrectIMUvalues+0x424>)
    a57e:	801a      	strh	r2, [r3, #0]
		cgx = gx;
    a580:	4bf0      	ldr	r3, [pc, #960]	; (a944 <CorrectIMUvalues+0x428>)
    a582:	2200      	movs	r2, #0
    a584:	5e9a      	ldrsh	r2, [r3, r2]
    a586:	4bf0      	ldr	r3, [pc, #960]	; (a948 <CorrectIMUvalues+0x42c>)
    a588:	801a      	strh	r2, [r3, #0]
		cgy = gy;
    a58a:	4bf0      	ldr	r3, [pc, #960]	; (a94c <CorrectIMUvalues+0x430>)
    a58c:	2200      	movs	r2, #0
    a58e:	5e9a      	ldrsh	r2, [r3, r2]
    a590:	4bef      	ldr	r3, [pc, #956]	; (a950 <CorrectIMUvalues+0x434>)
    a592:	801a      	strh	r2, [r3, #0]
		cmx = mx;
    a594:	4bef      	ldr	r3, [pc, #956]	; (a954 <CorrectIMUvalues+0x438>)
    a596:	2200      	movs	r2, #0
    a598:	5e9a      	ldrsh	r2, [r3, r2]
    a59a:	4bef      	ldr	r3, [pc, #956]	; (a958 <CorrectIMUvalues+0x43c>)
    a59c:	801a      	strh	r2, [r3, #0]
		cmy = my;
    a59e:	4bef      	ldr	r3, [pc, #956]	; (a95c <CorrectIMUvalues+0x440>)
    a5a0:	2200      	movs	r2, #0
    a5a2:	5e9a      	ldrsh	r2, [r3, r2]
    a5a4:	4bee      	ldr	r3, [pc, #952]	; (a960 <CorrectIMUvalues+0x444>)
    a5a6:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
			cmx = mz;
			cmy = mx;
		}
	}
}
    a5a8:	f000 fd5a 	bl	b060 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_UP){ // Connectors Up
    a5ac:	1dfb      	adds	r3, r7, #7
    a5ae:	781b      	ldrb	r3, [r3, #0]
    a5b0:	2b01      	cmp	r3, #1
    a5b2:	d000      	beq.n	a5b6 <CorrectIMUvalues+0x9a>
    a5b4:	e0d0      	b.n	a758 <CorrectIMUvalues+0x23c>
		caz = az;
    a5b6:	4bd9      	ldr	r3, [pc, #868]	; (a91c <CorrectIMUvalues+0x400>)
    a5b8:	2200      	movs	r2, #0
    a5ba:	5e9a      	ldrsh	r2, [r3, r2]
    a5bc:	4bd8      	ldr	r3, [pc, #864]	; (a920 <CorrectIMUvalues+0x404>)
    a5be:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    a5c0:	4bd8      	ldr	r3, [pc, #864]	; (a924 <CorrectIMUvalues+0x408>)
    a5c2:	2200      	movs	r2, #0
    a5c4:	5e9a      	ldrsh	r2, [r3, r2]
    a5c6:	4bd8      	ldr	r3, [pc, #864]	; (a928 <CorrectIMUvalues+0x40c>)
    a5c8:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    a5ca:	4bd8      	ldr	r3, [pc, #864]	; (a92c <CorrectIMUvalues+0x410>)
    a5cc:	2200      	movs	r2, #0
    a5ce:	5e9a      	ldrsh	r2, [r3, r2]
    a5d0:	4bd7      	ldr	r3, [pc, #860]	; (a930 <CorrectIMUvalues+0x414>)
    a5d2:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    a5d4:	1dbb      	adds	r3, r7, #6
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	2b03      	cmp	r3, #3
    a5da:	d12b      	bne.n	a634 <CorrectIMUvalues+0x118>
			cax = -ay;
    a5dc:	4bd7      	ldr	r3, [pc, #860]	; (a93c <CorrectIMUvalues+0x420>)
    a5de:	2200      	movs	r2, #0
    a5e0:	5e9b      	ldrsh	r3, [r3, r2]
    a5e2:	b29b      	uxth	r3, r3
    a5e4:	425b      	negs	r3, r3
    a5e6:	b29b      	uxth	r3, r3
    a5e8:	b21a      	sxth	r2, r3
    a5ea:	4bd3      	ldr	r3, [pc, #844]	; (a938 <CorrectIMUvalues+0x41c>)
    a5ec:	801a      	strh	r2, [r3, #0]
			cay = ax;
    a5ee:	4bd1      	ldr	r3, [pc, #836]	; (a934 <CorrectIMUvalues+0x418>)
    a5f0:	2200      	movs	r2, #0
    a5f2:	5e9a      	ldrsh	r2, [r3, r2]
    a5f4:	4bd2      	ldr	r3, [pc, #840]	; (a940 <CorrectIMUvalues+0x424>)
    a5f6:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a5f8:	4bd4      	ldr	r3, [pc, #848]	; (a94c <CorrectIMUvalues+0x430>)
    a5fa:	2200      	movs	r2, #0
    a5fc:	5e9b      	ldrsh	r3, [r3, r2]
    a5fe:	b29b      	uxth	r3, r3
    a600:	425b      	negs	r3, r3
    a602:	b29b      	uxth	r3, r3
    a604:	b21a      	sxth	r2, r3
    a606:	4bd0      	ldr	r3, [pc, #832]	; (a948 <CorrectIMUvalues+0x42c>)
    a608:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    a60a:	4bce      	ldr	r3, [pc, #824]	; (a944 <CorrectIMUvalues+0x428>)
    a60c:	2200      	movs	r2, #0
    a60e:	5e9a      	ldrsh	r2, [r3, r2]
    a610:	4bcf      	ldr	r3, [pc, #828]	; (a950 <CorrectIMUvalues+0x434>)
    a612:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a614:	4bd1      	ldr	r3, [pc, #836]	; (a95c <CorrectIMUvalues+0x440>)
    a616:	2200      	movs	r2, #0
    a618:	5e9a      	ldrsh	r2, [r3, r2]
    a61a:	4bcf      	ldr	r3, [pc, #828]	; (a958 <CorrectIMUvalues+0x43c>)
    a61c:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    a61e:	4bcd      	ldr	r3, [pc, #820]	; (a954 <CorrectIMUvalues+0x438>)
    a620:	2200      	movs	r2, #0
    a622:	5e9b      	ldrsh	r3, [r3, r2]
    a624:	b29b      	uxth	r3, r3
    a626:	425b      	negs	r3, r3
    a628:	b29b      	uxth	r3, r3
    a62a:	b21a      	sxth	r2, r3
    a62c:	4bcc      	ldr	r3, [pc, #816]	; (a960 <CorrectIMUvalues+0x444>)
    a62e:	801a      	strh	r2, [r3, #0]
}
    a630:	f000 fd16 	bl	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    a634:	1dbb      	adds	r3, r7, #6
    a636:	781b      	ldrb	r3, [r3, #0]
    a638:	2b04      	cmp	r3, #4
    a63a:	d12b      	bne.n	a694 <CorrectIMUvalues+0x178>
			cax = ay;
    a63c:	4bbf      	ldr	r3, [pc, #764]	; (a93c <CorrectIMUvalues+0x420>)
    a63e:	2200      	movs	r2, #0
    a640:	5e9a      	ldrsh	r2, [r3, r2]
    a642:	4bbd      	ldr	r3, [pc, #756]	; (a938 <CorrectIMUvalues+0x41c>)
    a644:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    a646:	4bbb      	ldr	r3, [pc, #748]	; (a934 <CorrectIMUvalues+0x418>)
    a648:	2200      	movs	r2, #0
    a64a:	5e9b      	ldrsh	r3, [r3, r2]
    a64c:	b29b      	uxth	r3, r3
    a64e:	425b      	negs	r3, r3
    a650:	b29b      	uxth	r3, r3
    a652:	b21a      	sxth	r2, r3
    a654:	4bba      	ldr	r3, [pc, #744]	; (a940 <CorrectIMUvalues+0x424>)
    a656:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a658:	4bbc      	ldr	r3, [pc, #752]	; (a94c <CorrectIMUvalues+0x430>)
    a65a:	2200      	movs	r2, #0
    a65c:	5e9a      	ldrsh	r2, [r3, r2]
    a65e:	4bba      	ldr	r3, [pc, #744]	; (a948 <CorrectIMUvalues+0x42c>)
    a660:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    a662:	4bb8      	ldr	r3, [pc, #736]	; (a944 <CorrectIMUvalues+0x428>)
    a664:	2200      	movs	r2, #0
    a666:	5e9b      	ldrsh	r3, [r3, r2]
    a668:	b29b      	uxth	r3, r3
    a66a:	425b      	negs	r3, r3
    a66c:	b29b      	uxth	r3, r3
    a66e:	b21a      	sxth	r2, r3
    a670:	4bb7      	ldr	r3, [pc, #732]	; (a950 <CorrectIMUvalues+0x434>)
    a672:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a674:	4bb9      	ldr	r3, [pc, #740]	; (a95c <CorrectIMUvalues+0x440>)
    a676:	2200      	movs	r2, #0
    a678:	5e9b      	ldrsh	r3, [r3, r2]
    a67a:	b29b      	uxth	r3, r3
    a67c:	425b      	negs	r3, r3
    a67e:	b29b      	uxth	r3, r3
    a680:	b21a      	sxth	r2, r3
    a682:	4bb5      	ldr	r3, [pc, #724]	; (a958 <CorrectIMUvalues+0x43c>)
    a684:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    a686:	4bb3      	ldr	r3, [pc, #716]	; (a954 <CorrectIMUvalues+0x438>)
    a688:	2200      	movs	r2, #0
    a68a:	5e9a      	ldrsh	r2, [r3, r2]
    a68c:	4bb4      	ldr	r3, [pc, #720]	; (a960 <CorrectIMUvalues+0x444>)
    a68e:	801a      	strh	r2, [r3, #0]
}
    a690:	f000 fce6 	bl	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a694:	1dbb      	adds	r3, r7, #6
    a696:	781b      	ldrb	r3, [r3, #0]
    a698:	2b05      	cmp	r3, #5
    a69a:	d137      	bne.n	a70c <CorrectIMUvalues+0x1f0>
			cax = -ax;
    a69c:	4ba5      	ldr	r3, [pc, #660]	; (a934 <CorrectIMUvalues+0x418>)
    a69e:	2200      	movs	r2, #0
    a6a0:	5e9b      	ldrsh	r3, [r3, r2]
    a6a2:	b29b      	uxth	r3, r3
    a6a4:	425b      	negs	r3, r3
    a6a6:	b29b      	uxth	r3, r3
    a6a8:	b21a      	sxth	r2, r3
    a6aa:	4ba3      	ldr	r3, [pc, #652]	; (a938 <CorrectIMUvalues+0x41c>)
    a6ac:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a6ae:	4ba3      	ldr	r3, [pc, #652]	; (a93c <CorrectIMUvalues+0x420>)
    a6b0:	2200      	movs	r2, #0
    a6b2:	5e9b      	ldrsh	r3, [r3, r2]
    a6b4:	b29b      	uxth	r3, r3
    a6b6:	425b      	negs	r3, r3
    a6b8:	b29b      	uxth	r3, r3
    a6ba:	b21a      	sxth	r2, r3
    a6bc:	4ba0      	ldr	r3, [pc, #640]	; (a940 <CorrectIMUvalues+0x424>)
    a6be:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    a6c0:	4ba0      	ldr	r3, [pc, #640]	; (a944 <CorrectIMUvalues+0x428>)
    a6c2:	2200      	movs	r2, #0
    a6c4:	5e9b      	ldrsh	r3, [r3, r2]
    a6c6:	b29b      	uxth	r3, r3
    a6c8:	425b      	negs	r3, r3
    a6ca:	b29b      	uxth	r3, r3
    a6cc:	b21a      	sxth	r2, r3
    a6ce:	4b9e      	ldr	r3, [pc, #632]	; (a948 <CorrectIMUvalues+0x42c>)
    a6d0:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a6d2:	4b9e      	ldr	r3, [pc, #632]	; (a94c <CorrectIMUvalues+0x430>)
    a6d4:	2200      	movs	r2, #0
    a6d6:	5e9b      	ldrsh	r3, [r3, r2]
    a6d8:	b29b      	uxth	r3, r3
    a6da:	425b      	negs	r3, r3
    a6dc:	b29b      	uxth	r3, r3
    a6de:	b21a      	sxth	r2, r3
    a6e0:	4b9b      	ldr	r3, [pc, #620]	; (a950 <CorrectIMUvalues+0x434>)
    a6e2:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    a6e4:	4b9b      	ldr	r3, [pc, #620]	; (a954 <CorrectIMUvalues+0x438>)
    a6e6:	2200      	movs	r2, #0
    a6e8:	5e9b      	ldrsh	r3, [r3, r2]
    a6ea:	b29b      	uxth	r3, r3
    a6ec:	425b      	negs	r3, r3
    a6ee:	b29b      	uxth	r3, r3
    a6f0:	b21a      	sxth	r2, r3
    a6f2:	4b99      	ldr	r3, [pc, #612]	; (a958 <CorrectIMUvalues+0x43c>)
    a6f4:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a6f6:	4b99      	ldr	r3, [pc, #612]	; (a95c <CorrectIMUvalues+0x440>)
    a6f8:	2200      	movs	r2, #0
    a6fa:	5e9b      	ldrsh	r3, [r3, r2]
    a6fc:	b29b      	uxth	r3, r3
    a6fe:	425b      	negs	r3, r3
    a700:	b29b      	uxth	r3, r3
    a702:	b21a      	sxth	r2, r3
    a704:	4b96      	ldr	r3, [pc, #600]	; (a960 <CorrectIMUvalues+0x444>)
    a706:	801a      	strh	r2, [r3, #0]
}
    a708:	f000 fcaa 	bl	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a70c:	1dbb      	adds	r3, r7, #6
    a70e:	781b      	ldrb	r3, [r3, #0]
    a710:	2b06      	cmp	r3, #6
    a712:	d001      	beq.n	a718 <CorrectIMUvalues+0x1fc>
    a714:	f000 fca4 	bl	b060 <CorrectIMUvalues+0xb44>
			cax = ax;
    a718:	4b86      	ldr	r3, [pc, #536]	; (a934 <CorrectIMUvalues+0x418>)
    a71a:	2200      	movs	r2, #0
    a71c:	5e9a      	ldrsh	r2, [r3, r2]
    a71e:	4b86      	ldr	r3, [pc, #536]	; (a938 <CorrectIMUvalues+0x41c>)
    a720:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a722:	4b86      	ldr	r3, [pc, #536]	; (a93c <CorrectIMUvalues+0x420>)
    a724:	2200      	movs	r2, #0
    a726:	5e9a      	ldrsh	r2, [r3, r2]
    a728:	4b85      	ldr	r3, [pc, #532]	; (a940 <CorrectIMUvalues+0x424>)
    a72a:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    a72c:	4b85      	ldr	r3, [pc, #532]	; (a944 <CorrectIMUvalues+0x428>)
    a72e:	2200      	movs	r2, #0
    a730:	5e9a      	ldrsh	r2, [r3, r2]
    a732:	4b85      	ldr	r3, [pc, #532]	; (a948 <CorrectIMUvalues+0x42c>)
    a734:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a736:	4b85      	ldr	r3, [pc, #532]	; (a94c <CorrectIMUvalues+0x430>)
    a738:	2200      	movs	r2, #0
    a73a:	5e9a      	ldrsh	r2, [r3, r2]
    a73c:	4b84      	ldr	r3, [pc, #528]	; (a950 <CorrectIMUvalues+0x434>)
    a73e:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    a740:	4b84      	ldr	r3, [pc, #528]	; (a954 <CorrectIMUvalues+0x438>)
    a742:	2200      	movs	r2, #0
    a744:	5e9a      	ldrsh	r2, [r3, r2]
    a746:	4b84      	ldr	r3, [pc, #528]	; (a958 <CorrectIMUvalues+0x43c>)
    a748:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a74a:	4b84      	ldr	r3, [pc, #528]	; (a95c <CorrectIMUvalues+0x440>)
    a74c:	2200      	movs	r2, #0
    a74e:	5e9a      	ldrsh	r2, [r3, r2]
    a750:	4b83      	ldr	r3, [pc, #524]	; (a960 <CorrectIMUvalues+0x444>)
    a752:	801a      	strh	r2, [r3, #0]
}
    a754:	f000 fc84 	bl	b060 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_DOWN){ // Connectors Down
    a758:	1dfb      	adds	r3, r7, #7
    a75a:	781b      	ldrb	r3, [r3, #0]
    a75c:	2b02      	cmp	r3, #2
    a75e:	d000      	beq.n	a762 <CorrectIMUvalues+0x246>
    a760:	e100      	b.n	a964 <CorrectIMUvalues+0x448>
		caz = -az;
    a762:	4b6e      	ldr	r3, [pc, #440]	; (a91c <CorrectIMUvalues+0x400>)
    a764:	2200      	movs	r2, #0
    a766:	5e9b      	ldrsh	r3, [r3, r2]
    a768:	b29b      	uxth	r3, r3
    a76a:	425b      	negs	r3, r3
    a76c:	b29b      	uxth	r3, r3
    a76e:	b21a      	sxth	r2, r3
    a770:	4b6b      	ldr	r3, [pc, #428]	; (a920 <CorrectIMUvalues+0x404>)
    a772:	801a      	strh	r2, [r3, #0]
		cgz = -gz;
    a774:	4b6b      	ldr	r3, [pc, #428]	; (a924 <CorrectIMUvalues+0x408>)
    a776:	2200      	movs	r2, #0
    a778:	5e9b      	ldrsh	r3, [r3, r2]
    a77a:	b29b      	uxth	r3, r3
    a77c:	425b      	negs	r3, r3
    a77e:	b29b      	uxth	r3, r3
    a780:	b21a      	sxth	r2, r3
    a782:	4b69      	ldr	r3, [pc, #420]	; (a928 <CorrectIMUvalues+0x40c>)
    a784:	801a      	strh	r2, [r3, #0]
		cmz = -mz;
    a786:	4b69      	ldr	r3, [pc, #420]	; (a92c <CorrectIMUvalues+0x410>)
    a788:	2200      	movs	r2, #0
    a78a:	5e9b      	ldrsh	r3, [r3, r2]
    a78c:	b29b      	uxth	r3, r3
    a78e:	425b      	negs	r3, r3
    a790:	b29b      	uxth	r3, r3
    a792:	b21a      	sxth	r2, r3
    a794:	4b66      	ldr	r3, [pc, #408]	; (a930 <CorrectIMUvalues+0x414>)
    a796:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    a798:	1dbb      	adds	r3, r7, #6
    a79a:	781b      	ldrb	r3, [r3, #0]
    a79c:	2b03      	cmp	r3, #3
    a79e:	d127      	bne.n	a7f0 <CorrectIMUvalues+0x2d4>
			cax = ay;
    a7a0:	4b66      	ldr	r3, [pc, #408]	; (a93c <CorrectIMUvalues+0x420>)
    a7a2:	2200      	movs	r2, #0
    a7a4:	5e9a      	ldrsh	r2, [r3, r2]
    a7a6:	4b64      	ldr	r3, [pc, #400]	; (a938 <CorrectIMUvalues+0x41c>)
    a7a8:	801a      	strh	r2, [r3, #0]
			cay = ax;
    a7aa:	4b62      	ldr	r3, [pc, #392]	; (a934 <CorrectIMUvalues+0x418>)
    a7ac:	2200      	movs	r2, #0
    a7ae:	5e9a      	ldrsh	r2, [r3, r2]
    a7b0:	4b63      	ldr	r3, [pc, #396]	; (a940 <CorrectIMUvalues+0x424>)
    a7b2:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a7b4:	4b65      	ldr	r3, [pc, #404]	; (a94c <CorrectIMUvalues+0x430>)
    a7b6:	2200      	movs	r2, #0
    a7b8:	5e9a      	ldrsh	r2, [r3, r2]
    a7ba:	4b63      	ldr	r3, [pc, #396]	; (a948 <CorrectIMUvalues+0x42c>)
    a7bc:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    a7be:	4b61      	ldr	r3, [pc, #388]	; (a944 <CorrectIMUvalues+0x428>)
    a7c0:	2200      	movs	r2, #0
    a7c2:	5e9a      	ldrsh	r2, [r3, r2]
    a7c4:	4b62      	ldr	r3, [pc, #392]	; (a950 <CorrectIMUvalues+0x434>)
    a7c6:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a7c8:	4b64      	ldr	r3, [pc, #400]	; (a95c <CorrectIMUvalues+0x440>)
    a7ca:	2200      	movs	r2, #0
    a7cc:	5e9b      	ldrsh	r3, [r3, r2]
    a7ce:	b29b      	uxth	r3, r3
    a7d0:	425b      	negs	r3, r3
    a7d2:	b29b      	uxth	r3, r3
    a7d4:	b21a      	sxth	r2, r3
    a7d6:	4b60      	ldr	r3, [pc, #384]	; (a958 <CorrectIMUvalues+0x43c>)
    a7d8:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    a7da:	4b5e      	ldr	r3, [pc, #376]	; (a954 <CorrectIMUvalues+0x438>)
    a7dc:	2200      	movs	r2, #0
    a7de:	5e9b      	ldrsh	r3, [r3, r2]
    a7e0:	b29b      	uxth	r3, r3
    a7e2:	425b      	negs	r3, r3
    a7e4:	b29b      	uxth	r3, r3
    a7e6:	b21a      	sxth	r2, r3
    a7e8:	4b5d      	ldr	r3, [pc, #372]	; (a960 <CorrectIMUvalues+0x444>)
    a7ea:	801a      	strh	r2, [r3, #0]
}
    a7ec:	f000 fc38 	bl	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    a7f0:	1dbb      	adds	r3, r7, #6
    a7f2:	781b      	ldrb	r3, [r3, #0]
    a7f4:	2b04      	cmp	r3, #4
    a7f6:	d12f      	bne.n	a858 <CorrectIMUvalues+0x33c>
			cax = -ay;
    a7f8:	4b50      	ldr	r3, [pc, #320]	; (a93c <CorrectIMUvalues+0x420>)
    a7fa:	2200      	movs	r2, #0
    a7fc:	5e9b      	ldrsh	r3, [r3, r2]
    a7fe:	b29b      	uxth	r3, r3
    a800:	425b      	negs	r3, r3
    a802:	b29b      	uxth	r3, r3
    a804:	b21a      	sxth	r2, r3
    a806:	4b4c      	ldr	r3, [pc, #304]	; (a938 <CorrectIMUvalues+0x41c>)
    a808:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    a80a:	4b4a      	ldr	r3, [pc, #296]	; (a934 <CorrectIMUvalues+0x418>)
    a80c:	2200      	movs	r2, #0
    a80e:	5e9b      	ldrsh	r3, [r3, r2]
    a810:	b29b      	uxth	r3, r3
    a812:	425b      	negs	r3, r3
    a814:	b29b      	uxth	r3, r3
    a816:	b21a      	sxth	r2, r3
    a818:	4b49      	ldr	r3, [pc, #292]	; (a940 <CorrectIMUvalues+0x424>)
    a81a:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a81c:	4b4b      	ldr	r3, [pc, #300]	; (a94c <CorrectIMUvalues+0x430>)
    a81e:	2200      	movs	r2, #0
    a820:	5e9b      	ldrsh	r3, [r3, r2]
    a822:	b29b      	uxth	r3, r3
    a824:	425b      	negs	r3, r3
    a826:	b29b      	uxth	r3, r3
    a828:	b21a      	sxth	r2, r3
    a82a:	4b47      	ldr	r3, [pc, #284]	; (a948 <CorrectIMUvalues+0x42c>)
    a82c:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    a82e:	4b45      	ldr	r3, [pc, #276]	; (a944 <CorrectIMUvalues+0x428>)
    a830:	2200      	movs	r2, #0
    a832:	5e9b      	ldrsh	r3, [r3, r2]
    a834:	b29b      	uxth	r3, r3
    a836:	425b      	negs	r3, r3
    a838:	b29b      	uxth	r3, r3
    a83a:	b21a      	sxth	r2, r3
    a83c:	4b44      	ldr	r3, [pc, #272]	; (a950 <CorrectIMUvalues+0x434>)
    a83e:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a840:	4b46      	ldr	r3, [pc, #280]	; (a95c <CorrectIMUvalues+0x440>)
    a842:	2200      	movs	r2, #0
    a844:	5e9a      	ldrsh	r2, [r3, r2]
    a846:	4b44      	ldr	r3, [pc, #272]	; (a958 <CorrectIMUvalues+0x43c>)
    a848:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    a84a:	4b42      	ldr	r3, [pc, #264]	; (a954 <CorrectIMUvalues+0x438>)
    a84c:	2200      	movs	r2, #0
    a84e:	5e9a      	ldrsh	r2, [r3, r2]
    a850:	4b43      	ldr	r3, [pc, #268]	; (a960 <CorrectIMUvalues+0x444>)
    a852:	801a      	strh	r2, [r3, #0]
}
    a854:	f000 fc04 	bl	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a858:	1dbb      	adds	r3, r7, #6
    a85a:	781b      	ldrb	r3, [r3, #0]
    a85c:	2b05      	cmp	r3, #5
    a85e:	d12b      	bne.n	a8b8 <CorrectIMUvalues+0x39c>
			cax = ax;
    a860:	4b34      	ldr	r3, [pc, #208]	; (a934 <CorrectIMUvalues+0x418>)
    a862:	2200      	movs	r2, #0
    a864:	5e9a      	ldrsh	r2, [r3, r2]
    a866:	4b34      	ldr	r3, [pc, #208]	; (a938 <CorrectIMUvalues+0x41c>)
    a868:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a86a:	4b34      	ldr	r3, [pc, #208]	; (a93c <CorrectIMUvalues+0x420>)
    a86c:	2200      	movs	r2, #0
    a86e:	5e9b      	ldrsh	r3, [r3, r2]
    a870:	b29b      	uxth	r3, r3
    a872:	425b      	negs	r3, r3
    a874:	b29b      	uxth	r3, r3
    a876:	b21a      	sxth	r2, r3
    a878:	4b31      	ldr	r3, [pc, #196]	; (a940 <CorrectIMUvalues+0x424>)
    a87a:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    a87c:	4b31      	ldr	r3, [pc, #196]	; (a944 <CorrectIMUvalues+0x428>)
    a87e:	2200      	movs	r2, #0
    a880:	5e9a      	ldrsh	r2, [r3, r2]
    a882:	4b31      	ldr	r3, [pc, #196]	; (a948 <CorrectIMUvalues+0x42c>)
    a884:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a886:	4b31      	ldr	r3, [pc, #196]	; (a94c <CorrectIMUvalues+0x430>)
    a888:	2200      	movs	r2, #0
    a88a:	5e9b      	ldrsh	r3, [r3, r2]
    a88c:	b29b      	uxth	r3, r3
    a88e:	425b      	negs	r3, r3
    a890:	b29b      	uxth	r3, r3
    a892:	b21a      	sxth	r2, r3
    a894:	4b2e      	ldr	r3, [pc, #184]	; (a950 <CorrectIMUvalues+0x434>)
    a896:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    a898:	4b2e      	ldr	r3, [pc, #184]	; (a954 <CorrectIMUvalues+0x438>)
    a89a:	2200      	movs	r2, #0
    a89c:	5e9a      	ldrsh	r2, [r3, r2]
    a89e:	4b2e      	ldr	r3, [pc, #184]	; (a958 <CorrectIMUvalues+0x43c>)
    a8a0:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a8a2:	4b2e      	ldr	r3, [pc, #184]	; (a95c <CorrectIMUvalues+0x440>)
    a8a4:	2200      	movs	r2, #0
    a8a6:	5e9b      	ldrsh	r3, [r3, r2]
    a8a8:	b29b      	uxth	r3, r3
    a8aa:	425b      	negs	r3, r3
    a8ac:	b29b      	uxth	r3, r3
    a8ae:	b21a      	sxth	r2, r3
    a8b0:	4b2b      	ldr	r3, [pc, #172]	; (a960 <CorrectIMUvalues+0x444>)
    a8b2:	801a      	strh	r2, [r3, #0]
}
    a8b4:	f000 fbd4 	bl	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a8b8:	1dbb      	adds	r3, r7, #6
    a8ba:	781b      	ldrb	r3, [r3, #0]
    a8bc:	2b06      	cmp	r3, #6
    a8be:	d001      	beq.n	a8c4 <CorrectIMUvalues+0x3a8>
    a8c0:	f000 fbce 	bl	b060 <CorrectIMUvalues+0xb44>
			cax = -ax;
    a8c4:	4b1b      	ldr	r3, [pc, #108]	; (a934 <CorrectIMUvalues+0x418>)
    a8c6:	2200      	movs	r2, #0
    a8c8:	5e9b      	ldrsh	r3, [r3, r2]
    a8ca:	b29b      	uxth	r3, r3
    a8cc:	425b      	negs	r3, r3
    a8ce:	b29b      	uxth	r3, r3
    a8d0:	b21a      	sxth	r2, r3
    a8d2:	4b19      	ldr	r3, [pc, #100]	; (a938 <CorrectIMUvalues+0x41c>)
    a8d4:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a8d6:	4b19      	ldr	r3, [pc, #100]	; (a93c <CorrectIMUvalues+0x420>)
    a8d8:	2200      	movs	r2, #0
    a8da:	5e9a      	ldrsh	r2, [r3, r2]
    a8dc:	4b18      	ldr	r3, [pc, #96]	; (a940 <CorrectIMUvalues+0x424>)
    a8de:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    a8e0:	4b18      	ldr	r3, [pc, #96]	; (a944 <CorrectIMUvalues+0x428>)
    a8e2:	2200      	movs	r2, #0
    a8e4:	5e9b      	ldrsh	r3, [r3, r2]
    a8e6:	b29b      	uxth	r3, r3
    a8e8:	425b      	negs	r3, r3
    a8ea:	b29b      	uxth	r3, r3
    a8ec:	b21a      	sxth	r2, r3
    a8ee:	4b16      	ldr	r3, [pc, #88]	; (a948 <CorrectIMUvalues+0x42c>)
    a8f0:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a8f2:	4b16      	ldr	r3, [pc, #88]	; (a94c <CorrectIMUvalues+0x430>)
    a8f4:	2200      	movs	r2, #0
    a8f6:	5e9a      	ldrsh	r2, [r3, r2]
    a8f8:	4b15      	ldr	r3, [pc, #84]	; (a950 <CorrectIMUvalues+0x434>)
    a8fa:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    a8fc:	4b15      	ldr	r3, [pc, #84]	; (a954 <CorrectIMUvalues+0x438>)
    a8fe:	2200      	movs	r2, #0
    a900:	5e9b      	ldrsh	r3, [r3, r2]
    a902:	b29b      	uxth	r3, r3
    a904:	425b      	negs	r3, r3
    a906:	b29b      	uxth	r3, r3
    a908:	b21a      	sxth	r2, r3
    a90a:	4b13      	ldr	r3, [pc, #76]	; (a958 <CorrectIMUvalues+0x43c>)
    a90c:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a90e:	4b13      	ldr	r3, [pc, #76]	; (a95c <CorrectIMUvalues+0x440>)
    a910:	2200      	movs	r2, #0
    a912:	5e9a      	ldrsh	r2, [r3, r2]
    a914:	4b12      	ldr	r3, [pc, #72]	; (a960 <CorrectIMUvalues+0x444>)
    a916:	801a      	strh	r2, [r3, #0]
}
    a918:	e3a2      	b.n	b060 <CorrectIMUvalues+0xb44>
    a91a:	46c0      	nop			; (mov r8, r8)
    a91c:	200002ee 	.word	0x200002ee
    a920:	20000300 	.word	0x20000300
    a924:	200002e8 	.word	0x200002e8
    a928:	200002fa 	.word	0x200002fa
    a92c:	200002f4 	.word	0x200002f4
    a930:	20000306 	.word	0x20000306
    a934:	200002ea 	.word	0x200002ea
    a938:	200002fc 	.word	0x200002fc
    a93c:	200002ec 	.word	0x200002ec
    a940:	200002fe 	.word	0x200002fe
    a944:	200002e4 	.word	0x200002e4
    a948:	200002f6 	.word	0x200002f6
    a94c:	200002e6 	.word	0x200002e6
    a950:	200002f8 	.word	0x200002f8
    a954:	200002f0 	.word	0x200002f0
    a958:	20000302 	.word	0x20000302
    a95c:	200002f2 	.word	0x200002f2
    a960:	20000304 	.word	0x20000304
	} else if(connector_orient == ORIENT_LEFT){ // Connectors Left
    a964:	1dfb      	adds	r3, r7, #7
    a966:	781b      	ldrb	r3, [r3, #0]
    a968:	2b03      	cmp	r3, #3
    a96a:	d000      	beq.n	a96e <CorrectIMUvalues+0x452>
    a96c:	e0cf      	b.n	ab0e <CorrectIMUvalues+0x5f2>
		caz = ax;
    a96e:	4bd4      	ldr	r3, [pc, #848]	; (acc0 <CorrectIMUvalues+0x7a4>)
    a970:	2200      	movs	r2, #0
    a972:	5e9a      	ldrsh	r2, [r3, r2]
    a974:	4bd3      	ldr	r3, [pc, #844]	; (acc4 <CorrectIMUvalues+0x7a8>)
    a976:	801a      	strh	r2, [r3, #0]
		cgz = gx;
    a978:	4bd3      	ldr	r3, [pc, #844]	; (acc8 <CorrectIMUvalues+0x7ac>)
    a97a:	2200      	movs	r2, #0
    a97c:	5e9a      	ldrsh	r2, [r3, r2]
    a97e:	4bd3      	ldr	r3, [pc, #844]	; (accc <CorrectIMUvalues+0x7b0>)
    a980:	801a      	strh	r2, [r3, #0]
		cmz = -mx;
    a982:	4bd3      	ldr	r3, [pc, #844]	; (acd0 <CorrectIMUvalues+0x7b4>)
    a984:	2200      	movs	r2, #0
    a986:	5e9b      	ldrsh	r3, [r3, r2]
    a988:	b29b      	uxth	r3, r3
    a98a:	425b      	negs	r3, r3
    a98c:	b29b      	uxth	r3, r3
    a98e:	b21a      	sxth	r2, r3
    a990:	4bd0      	ldr	r3, [pc, #832]	; (acd4 <CorrectIMUvalues+0x7b8>)
    a992:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    a994:	1dbb      	adds	r3, r7, #6
    a996:	781b      	ldrb	r3, [r3, #0]
    a998:	2b01      	cmp	r3, #1
    a99a:	d122      	bne.n	a9e2 <CorrectIMUvalues+0x4c6>
			cax = ay;
    a99c:	4bce      	ldr	r3, [pc, #824]	; (acd8 <CorrectIMUvalues+0x7bc>)
    a99e:	2200      	movs	r2, #0
    a9a0:	5e9a      	ldrsh	r2, [r3, r2]
    a9a2:	4bce      	ldr	r3, [pc, #824]	; (acdc <CorrectIMUvalues+0x7c0>)
    a9a4:	801a      	strh	r2, [r3, #0]
			cay = az;
    a9a6:	4bce      	ldr	r3, [pc, #824]	; (ace0 <CorrectIMUvalues+0x7c4>)
    a9a8:	2200      	movs	r2, #0
    a9aa:	5e9a      	ldrsh	r2, [r3, r2]
    a9ac:	4bcd      	ldr	r3, [pc, #820]	; (ace4 <CorrectIMUvalues+0x7c8>)
    a9ae:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a9b0:	4bcd      	ldr	r3, [pc, #820]	; (ace8 <CorrectIMUvalues+0x7cc>)
    a9b2:	2200      	movs	r2, #0
    a9b4:	5e9a      	ldrsh	r2, [r3, r2]
    a9b6:	4bcd      	ldr	r3, [pc, #820]	; (acec <CorrectIMUvalues+0x7d0>)
    a9b8:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    a9ba:	4bcd      	ldr	r3, [pc, #820]	; (acf0 <CorrectIMUvalues+0x7d4>)
    a9bc:	2200      	movs	r2, #0
    a9be:	5e9a      	ldrsh	r2, [r3, r2]
    a9c0:	4bcc      	ldr	r3, [pc, #816]	; (acf4 <CorrectIMUvalues+0x7d8>)
    a9c2:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a9c4:	4bcc      	ldr	r3, [pc, #816]	; (acf8 <CorrectIMUvalues+0x7dc>)
    a9c6:	2200      	movs	r2, #0
    a9c8:	5e9b      	ldrsh	r3, [r3, r2]
    a9ca:	b29b      	uxth	r3, r3
    a9cc:	425b      	negs	r3, r3
    a9ce:	b29b      	uxth	r3, r3
    a9d0:	b21a      	sxth	r2, r3
    a9d2:	4bca      	ldr	r3, [pc, #808]	; (acfc <CorrectIMUvalues+0x7e0>)
    a9d4:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    a9d6:	4bca      	ldr	r3, [pc, #808]	; (ad00 <CorrectIMUvalues+0x7e4>)
    a9d8:	2200      	movs	r2, #0
    a9da:	5e9a      	ldrsh	r2, [r3, r2]
    a9dc:	4bc9      	ldr	r3, [pc, #804]	; (ad04 <CorrectIMUvalues+0x7e8>)
    a9de:	801a      	strh	r2, [r3, #0]
}
    a9e0:	e33e      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    a9e2:	1dbb      	adds	r3, r7, #6
    a9e4:	781b      	ldrb	r3, [r3, #0]
    a9e6:	2b02      	cmp	r3, #2
    a9e8:	d132      	bne.n	aa50 <CorrectIMUvalues+0x534>
			cax = -ay;
    a9ea:	4bbb      	ldr	r3, [pc, #748]	; (acd8 <CorrectIMUvalues+0x7bc>)
    a9ec:	2200      	movs	r2, #0
    a9ee:	5e9b      	ldrsh	r3, [r3, r2]
    a9f0:	b29b      	uxth	r3, r3
    a9f2:	425b      	negs	r3, r3
    a9f4:	b29b      	uxth	r3, r3
    a9f6:	b21a      	sxth	r2, r3
    a9f8:	4bb8      	ldr	r3, [pc, #736]	; (acdc <CorrectIMUvalues+0x7c0>)
    a9fa:	801a      	strh	r2, [r3, #0]
			cay = -az;
    a9fc:	4bb8      	ldr	r3, [pc, #736]	; (ace0 <CorrectIMUvalues+0x7c4>)
    a9fe:	2200      	movs	r2, #0
    aa00:	5e9b      	ldrsh	r3, [r3, r2]
    aa02:	b29b      	uxth	r3, r3
    aa04:	425b      	negs	r3, r3
    aa06:	b29b      	uxth	r3, r3
    aa08:	b21a      	sxth	r2, r3
    aa0a:	4bb6      	ldr	r3, [pc, #728]	; (ace4 <CorrectIMUvalues+0x7c8>)
    aa0c:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    aa0e:	4bb6      	ldr	r3, [pc, #728]	; (ace8 <CorrectIMUvalues+0x7cc>)
    aa10:	2200      	movs	r2, #0
    aa12:	5e9b      	ldrsh	r3, [r3, r2]
    aa14:	b29b      	uxth	r3, r3
    aa16:	425b      	negs	r3, r3
    aa18:	b29b      	uxth	r3, r3
    aa1a:	b21a      	sxth	r2, r3
    aa1c:	4bb3      	ldr	r3, [pc, #716]	; (acec <CorrectIMUvalues+0x7d0>)
    aa1e:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    aa20:	4bb3      	ldr	r3, [pc, #716]	; (acf0 <CorrectIMUvalues+0x7d4>)
    aa22:	2200      	movs	r2, #0
    aa24:	5e9b      	ldrsh	r3, [r3, r2]
    aa26:	b29b      	uxth	r3, r3
    aa28:	425b      	negs	r3, r3
    aa2a:	b29b      	uxth	r3, r3
    aa2c:	b21a      	sxth	r2, r3
    aa2e:	4bb1      	ldr	r3, [pc, #708]	; (acf4 <CorrectIMUvalues+0x7d8>)
    aa30:	801a      	strh	r2, [r3, #0]
			cmx = my;
    aa32:	4bb1      	ldr	r3, [pc, #708]	; (acf8 <CorrectIMUvalues+0x7dc>)
    aa34:	2200      	movs	r2, #0
    aa36:	5e9a      	ldrsh	r2, [r3, r2]
    aa38:	4bb0      	ldr	r3, [pc, #704]	; (acfc <CorrectIMUvalues+0x7e0>)
    aa3a:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    aa3c:	4bb0      	ldr	r3, [pc, #704]	; (ad00 <CorrectIMUvalues+0x7e4>)
    aa3e:	2200      	movs	r2, #0
    aa40:	5e9b      	ldrsh	r3, [r3, r2]
    aa42:	b29b      	uxth	r3, r3
    aa44:	425b      	negs	r3, r3
    aa46:	b29b      	uxth	r3, r3
    aa48:	b21a      	sxth	r2, r3
    aa4a:	4bae      	ldr	r3, [pc, #696]	; (ad04 <CorrectIMUvalues+0x7e8>)
    aa4c:	801a      	strh	r2, [r3, #0]
}
    aa4e:	e307      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    aa50:	1dbb      	adds	r3, r7, #6
    aa52:	781b      	ldrb	r3, [r3, #0]
    aa54:	2b05      	cmp	r3, #5
    aa56:	d12e      	bne.n	aab6 <CorrectIMUvalues+0x59a>
			cax = az;
    aa58:	4ba1      	ldr	r3, [pc, #644]	; (ace0 <CorrectIMUvalues+0x7c4>)
    aa5a:	2200      	movs	r2, #0
    aa5c:	5e9a      	ldrsh	r2, [r3, r2]
    aa5e:	4b9f      	ldr	r3, [pc, #636]	; (acdc <CorrectIMUvalues+0x7c0>)
    aa60:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    aa62:	4b9d      	ldr	r3, [pc, #628]	; (acd8 <CorrectIMUvalues+0x7bc>)
    aa64:	2200      	movs	r2, #0
    aa66:	5e9b      	ldrsh	r3, [r3, r2]
    aa68:	b29b      	uxth	r3, r3
    aa6a:	425b      	negs	r3, r3
    aa6c:	b29b      	uxth	r3, r3
    aa6e:	b21a      	sxth	r2, r3
    aa70:	4b9c      	ldr	r3, [pc, #624]	; (ace4 <CorrectIMUvalues+0x7c8>)
    aa72:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    aa74:	4b9e      	ldr	r3, [pc, #632]	; (acf0 <CorrectIMUvalues+0x7d4>)
    aa76:	2200      	movs	r2, #0
    aa78:	5e9a      	ldrsh	r2, [r3, r2]
    aa7a:	4b9c      	ldr	r3, [pc, #624]	; (acec <CorrectIMUvalues+0x7d0>)
    aa7c:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    aa7e:	4b9a      	ldr	r3, [pc, #616]	; (ace8 <CorrectIMUvalues+0x7cc>)
    aa80:	2200      	movs	r2, #0
    aa82:	5e9b      	ldrsh	r3, [r3, r2]
    aa84:	b29b      	uxth	r3, r3
    aa86:	425b      	negs	r3, r3
    aa88:	b29b      	uxth	r3, r3
    aa8a:	b21a      	sxth	r2, r3
    aa8c:	4b99      	ldr	r3, [pc, #612]	; (acf4 <CorrectIMUvalues+0x7d8>)
    aa8e:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    aa90:	4b9b      	ldr	r3, [pc, #620]	; (ad00 <CorrectIMUvalues+0x7e4>)
    aa92:	2200      	movs	r2, #0
    aa94:	5e9b      	ldrsh	r3, [r3, r2]
    aa96:	b29b      	uxth	r3, r3
    aa98:	425b      	negs	r3, r3
    aa9a:	b29b      	uxth	r3, r3
    aa9c:	b21a      	sxth	r2, r3
    aa9e:	4b97      	ldr	r3, [pc, #604]	; (acfc <CorrectIMUvalues+0x7e0>)
    aaa0:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    aaa2:	4b95      	ldr	r3, [pc, #596]	; (acf8 <CorrectIMUvalues+0x7dc>)
    aaa4:	2200      	movs	r2, #0
    aaa6:	5e9b      	ldrsh	r3, [r3, r2]
    aaa8:	b29b      	uxth	r3, r3
    aaaa:	425b      	negs	r3, r3
    aaac:	b29b      	uxth	r3, r3
    aaae:	b21a      	sxth	r2, r3
    aab0:	4b94      	ldr	r3, [pc, #592]	; (ad04 <CorrectIMUvalues+0x7e8>)
    aab2:	801a      	strh	r2, [r3, #0]
}
    aab4:	e2d4      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    aab6:	1dbb      	adds	r3, r7, #6
    aab8:	781b      	ldrb	r3, [r3, #0]
    aaba:	2b06      	cmp	r3, #6
    aabc:	d000      	beq.n	aac0 <CorrectIMUvalues+0x5a4>
    aabe:	e2cf      	b.n	b060 <CorrectIMUvalues+0xb44>
			cax = -az;
    aac0:	4b87      	ldr	r3, [pc, #540]	; (ace0 <CorrectIMUvalues+0x7c4>)
    aac2:	2200      	movs	r2, #0
    aac4:	5e9b      	ldrsh	r3, [r3, r2]
    aac6:	b29b      	uxth	r3, r3
    aac8:	425b      	negs	r3, r3
    aaca:	b29b      	uxth	r3, r3
    aacc:	b21a      	sxth	r2, r3
    aace:	4b83      	ldr	r3, [pc, #524]	; (acdc <CorrectIMUvalues+0x7c0>)
    aad0:	801a      	strh	r2, [r3, #0]
			cay = ay;
    aad2:	4b81      	ldr	r3, [pc, #516]	; (acd8 <CorrectIMUvalues+0x7bc>)
    aad4:	2200      	movs	r2, #0
    aad6:	5e9a      	ldrsh	r2, [r3, r2]
    aad8:	4b82      	ldr	r3, [pc, #520]	; (ace4 <CorrectIMUvalues+0x7c8>)
    aada:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    aadc:	4b84      	ldr	r3, [pc, #528]	; (acf0 <CorrectIMUvalues+0x7d4>)
    aade:	2200      	movs	r2, #0
    aae0:	5e9b      	ldrsh	r3, [r3, r2]
    aae2:	b29b      	uxth	r3, r3
    aae4:	425b      	negs	r3, r3
    aae6:	b29b      	uxth	r3, r3
    aae8:	b21a      	sxth	r2, r3
    aaea:	4b80      	ldr	r3, [pc, #512]	; (acec <CorrectIMUvalues+0x7d0>)
    aaec:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    aaee:	4b7e      	ldr	r3, [pc, #504]	; (ace8 <CorrectIMUvalues+0x7cc>)
    aaf0:	2200      	movs	r2, #0
    aaf2:	5e9a      	ldrsh	r2, [r3, r2]
    aaf4:	4b7f      	ldr	r3, [pc, #508]	; (acf4 <CorrectIMUvalues+0x7d8>)
    aaf6:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    aaf8:	4b81      	ldr	r3, [pc, #516]	; (ad00 <CorrectIMUvalues+0x7e4>)
    aafa:	2200      	movs	r2, #0
    aafc:	5e9a      	ldrsh	r2, [r3, r2]
    aafe:	4b7f      	ldr	r3, [pc, #508]	; (acfc <CorrectIMUvalues+0x7e0>)
    ab00:	801a      	strh	r2, [r3, #0]
			cmy = my;
    ab02:	4b7d      	ldr	r3, [pc, #500]	; (acf8 <CorrectIMUvalues+0x7dc>)
    ab04:	2200      	movs	r2, #0
    ab06:	5e9a      	ldrsh	r2, [r3, r2]
    ab08:	4b7e      	ldr	r3, [pc, #504]	; (ad04 <CorrectIMUvalues+0x7e8>)
    ab0a:	801a      	strh	r2, [r3, #0]
}
    ab0c:	e2a8      	b.n	b060 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_RIGHT){ // Connectors Right
    ab0e:	1dfb      	adds	r3, r7, #7
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	2b04      	cmp	r3, #4
    ab14:	d000      	beq.n	ab18 <CorrectIMUvalues+0x5fc>
    ab16:	e0f7      	b.n	ad08 <CorrectIMUvalues+0x7ec>
		caz = -ax;
    ab18:	4b69      	ldr	r3, [pc, #420]	; (acc0 <CorrectIMUvalues+0x7a4>)
    ab1a:	2200      	movs	r2, #0
    ab1c:	5e9b      	ldrsh	r3, [r3, r2]
    ab1e:	b29b      	uxth	r3, r3
    ab20:	425b      	negs	r3, r3
    ab22:	b29b      	uxth	r3, r3
    ab24:	b21a      	sxth	r2, r3
    ab26:	4b67      	ldr	r3, [pc, #412]	; (acc4 <CorrectIMUvalues+0x7a8>)
    ab28:	801a      	strh	r2, [r3, #0]
		cgz = -gx;
    ab2a:	4b67      	ldr	r3, [pc, #412]	; (acc8 <CorrectIMUvalues+0x7ac>)
    ab2c:	2200      	movs	r2, #0
    ab2e:	5e9b      	ldrsh	r3, [r3, r2]
    ab30:	b29b      	uxth	r3, r3
    ab32:	425b      	negs	r3, r3
    ab34:	b29b      	uxth	r3, r3
    ab36:	b21a      	sxth	r2, r3
    ab38:	4b64      	ldr	r3, [pc, #400]	; (accc <CorrectIMUvalues+0x7b0>)
    ab3a:	801a      	strh	r2, [r3, #0]
		cmz = mx;
    ab3c:	4b64      	ldr	r3, [pc, #400]	; (acd0 <CorrectIMUvalues+0x7b4>)
    ab3e:	2200      	movs	r2, #0
    ab40:	5e9a      	ldrsh	r2, [r3, r2]
    ab42:	4b64      	ldr	r3, [pc, #400]	; (acd4 <CorrectIMUvalues+0x7b8>)
    ab44:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    ab46:	1dbb      	adds	r3, r7, #6
    ab48:	781b      	ldrb	r3, [r3, #0]
    ab4a:	2b01      	cmp	r3, #1
    ab4c:	d126      	bne.n	ab9c <CorrectIMUvalues+0x680>
			cax = -ay;
    ab4e:	4b62      	ldr	r3, [pc, #392]	; (acd8 <CorrectIMUvalues+0x7bc>)
    ab50:	2200      	movs	r2, #0
    ab52:	5e9b      	ldrsh	r3, [r3, r2]
    ab54:	b29b      	uxth	r3, r3
    ab56:	425b      	negs	r3, r3
    ab58:	b29b      	uxth	r3, r3
    ab5a:	b21a      	sxth	r2, r3
    ab5c:	4b5f      	ldr	r3, [pc, #380]	; (acdc <CorrectIMUvalues+0x7c0>)
    ab5e:	801a      	strh	r2, [r3, #0]
			cay = az;
    ab60:	4b5f      	ldr	r3, [pc, #380]	; (ace0 <CorrectIMUvalues+0x7c4>)
    ab62:	2200      	movs	r2, #0
    ab64:	5e9a      	ldrsh	r2, [r3, r2]
    ab66:	4b5f      	ldr	r3, [pc, #380]	; (ace4 <CorrectIMUvalues+0x7c8>)
    ab68:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    ab6a:	4b5f      	ldr	r3, [pc, #380]	; (ace8 <CorrectIMUvalues+0x7cc>)
    ab6c:	2200      	movs	r2, #0
    ab6e:	5e9b      	ldrsh	r3, [r3, r2]
    ab70:	b29b      	uxth	r3, r3
    ab72:	425b      	negs	r3, r3
    ab74:	b29b      	uxth	r3, r3
    ab76:	b21a      	sxth	r2, r3
    ab78:	4b5c      	ldr	r3, [pc, #368]	; (acec <CorrectIMUvalues+0x7d0>)
    ab7a:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    ab7c:	4b5c      	ldr	r3, [pc, #368]	; (acf0 <CorrectIMUvalues+0x7d4>)
    ab7e:	2200      	movs	r2, #0
    ab80:	5e9a      	ldrsh	r2, [r3, r2]
    ab82:	4b5c      	ldr	r3, [pc, #368]	; (acf4 <CorrectIMUvalues+0x7d8>)
    ab84:	801a      	strh	r2, [r3, #0]
			cmx = my;
    ab86:	4b5c      	ldr	r3, [pc, #368]	; (acf8 <CorrectIMUvalues+0x7dc>)
    ab88:	2200      	movs	r2, #0
    ab8a:	5e9a      	ldrsh	r2, [r3, r2]
    ab8c:	4b5b      	ldr	r3, [pc, #364]	; (acfc <CorrectIMUvalues+0x7e0>)
    ab8e:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    ab90:	4b5b      	ldr	r3, [pc, #364]	; (ad00 <CorrectIMUvalues+0x7e4>)
    ab92:	2200      	movs	r2, #0
    ab94:	5e9a      	ldrsh	r2, [r3, r2]
    ab96:	4b5b      	ldr	r3, [pc, #364]	; (ad04 <CorrectIMUvalues+0x7e8>)
    ab98:	801a      	strh	r2, [r3, #0]
}
    ab9a:	e261      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    ab9c:	1dbb      	adds	r3, r7, #6
    ab9e:	781b      	ldrb	r3, [r3, #0]
    aba0:	2b02      	cmp	r3, #2
    aba2:	d12e      	bne.n	ac02 <CorrectIMUvalues+0x6e6>
			cax = ay;
    aba4:	4b4c      	ldr	r3, [pc, #304]	; (acd8 <CorrectIMUvalues+0x7bc>)
    aba6:	2200      	movs	r2, #0
    aba8:	5e9a      	ldrsh	r2, [r3, r2]
    abaa:	4b4c      	ldr	r3, [pc, #304]	; (acdc <CorrectIMUvalues+0x7c0>)
    abac:	801a      	strh	r2, [r3, #0]
			cay = -az;
    abae:	4b4c      	ldr	r3, [pc, #304]	; (ace0 <CorrectIMUvalues+0x7c4>)
    abb0:	2200      	movs	r2, #0
    abb2:	5e9b      	ldrsh	r3, [r3, r2]
    abb4:	b29b      	uxth	r3, r3
    abb6:	425b      	negs	r3, r3
    abb8:	b29b      	uxth	r3, r3
    abba:	b21a      	sxth	r2, r3
    abbc:	4b49      	ldr	r3, [pc, #292]	; (ace4 <CorrectIMUvalues+0x7c8>)
    abbe:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    abc0:	4b49      	ldr	r3, [pc, #292]	; (ace8 <CorrectIMUvalues+0x7cc>)
    abc2:	2200      	movs	r2, #0
    abc4:	5e9a      	ldrsh	r2, [r3, r2]
    abc6:	4b49      	ldr	r3, [pc, #292]	; (acec <CorrectIMUvalues+0x7d0>)
    abc8:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    abca:	4b49      	ldr	r3, [pc, #292]	; (acf0 <CorrectIMUvalues+0x7d4>)
    abcc:	2200      	movs	r2, #0
    abce:	5e9b      	ldrsh	r3, [r3, r2]
    abd0:	b29b      	uxth	r3, r3
    abd2:	425b      	negs	r3, r3
    abd4:	b29b      	uxth	r3, r3
    abd6:	b21a      	sxth	r2, r3
    abd8:	4b46      	ldr	r3, [pc, #280]	; (acf4 <CorrectIMUvalues+0x7d8>)
    abda:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    abdc:	4b46      	ldr	r3, [pc, #280]	; (acf8 <CorrectIMUvalues+0x7dc>)
    abde:	2200      	movs	r2, #0
    abe0:	5e9b      	ldrsh	r3, [r3, r2]
    abe2:	b29b      	uxth	r3, r3
    abe4:	425b      	negs	r3, r3
    abe6:	b29b      	uxth	r3, r3
    abe8:	b21a      	sxth	r2, r3
    abea:	4b44      	ldr	r3, [pc, #272]	; (acfc <CorrectIMUvalues+0x7e0>)
    abec:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    abee:	4b44      	ldr	r3, [pc, #272]	; (ad00 <CorrectIMUvalues+0x7e4>)
    abf0:	2200      	movs	r2, #0
    abf2:	5e9b      	ldrsh	r3, [r3, r2]
    abf4:	b29b      	uxth	r3, r3
    abf6:	425b      	negs	r3, r3
    abf8:	b29b      	uxth	r3, r3
    abfa:	b21a      	sxth	r2, r3
    abfc:	4b41      	ldr	r3, [pc, #260]	; (ad04 <CorrectIMUvalues+0x7e8>)
    abfe:	801a      	strh	r2, [r3, #0]
}
    ac00:	e22e      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    ac02:	1dbb      	adds	r3, r7, #6
    ac04:	781b      	ldrb	r3, [r3, #0]
    ac06:	2b05      	cmp	r3, #5
    ac08:	d132      	bne.n	ac70 <CorrectIMUvalues+0x754>
			cax = -az;
    ac0a:	4b35      	ldr	r3, [pc, #212]	; (ace0 <CorrectIMUvalues+0x7c4>)
    ac0c:	2200      	movs	r2, #0
    ac0e:	5e9b      	ldrsh	r3, [r3, r2]
    ac10:	b29b      	uxth	r3, r3
    ac12:	425b      	negs	r3, r3
    ac14:	b29b      	uxth	r3, r3
    ac16:	b21a      	sxth	r2, r3
    ac18:	4b30      	ldr	r3, [pc, #192]	; (acdc <CorrectIMUvalues+0x7c0>)
    ac1a:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    ac1c:	4b2e      	ldr	r3, [pc, #184]	; (acd8 <CorrectIMUvalues+0x7bc>)
    ac1e:	2200      	movs	r2, #0
    ac20:	5e9b      	ldrsh	r3, [r3, r2]
    ac22:	b29b      	uxth	r3, r3
    ac24:	425b      	negs	r3, r3
    ac26:	b29b      	uxth	r3, r3
    ac28:	b21a      	sxth	r2, r3
    ac2a:	4b2e      	ldr	r3, [pc, #184]	; (ace4 <CorrectIMUvalues+0x7c8>)
    ac2c:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    ac2e:	4b30      	ldr	r3, [pc, #192]	; (acf0 <CorrectIMUvalues+0x7d4>)
    ac30:	2200      	movs	r2, #0
    ac32:	5e9b      	ldrsh	r3, [r3, r2]
    ac34:	b29b      	uxth	r3, r3
    ac36:	425b      	negs	r3, r3
    ac38:	b29b      	uxth	r3, r3
    ac3a:	b21a      	sxth	r2, r3
    ac3c:	4b2b      	ldr	r3, [pc, #172]	; (acec <CorrectIMUvalues+0x7d0>)
    ac3e:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    ac40:	4b29      	ldr	r3, [pc, #164]	; (ace8 <CorrectIMUvalues+0x7cc>)
    ac42:	2200      	movs	r2, #0
    ac44:	5e9b      	ldrsh	r3, [r3, r2]
    ac46:	b29b      	uxth	r3, r3
    ac48:	425b      	negs	r3, r3
    ac4a:	b29b      	uxth	r3, r3
    ac4c:	b21a      	sxth	r2, r3
    ac4e:	4b29      	ldr	r3, [pc, #164]	; (acf4 <CorrectIMUvalues+0x7d8>)
    ac50:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    ac52:	4b2b      	ldr	r3, [pc, #172]	; (ad00 <CorrectIMUvalues+0x7e4>)
    ac54:	2200      	movs	r2, #0
    ac56:	5e9a      	ldrsh	r2, [r3, r2]
    ac58:	4b28      	ldr	r3, [pc, #160]	; (acfc <CorrectIMUvalues+0x7e0>)
    ac5a:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    ac5c:	4b26      	ldr	r3, [pc, #152]	; (acf8 <CorrectIMUvalues+0x7dc>)
    ac5e:	2200      	movs	r2, #0
    ac60:	5e9b      	ldrsh	r3, [r3, r2]
    ac62:	b29b      	uxth	r3, r3
    ac64:	425b      	negs	r3, r3
    ac66:	b29b      	uxth	r3, r3
    ac68:	b21a      	sxth	r2, r3
    ac6a:	4b26      	ldr	r3, [pc, #152]	; (ad04 <CorrectIMUvalues+0x7e8>)
    ac6c:	801a      	strh	r2, [r3, #0]
}
    ac6e:	e1f7      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    ac70:	1dbb      	adds	r3, r7, #6
    ac72:	781b      	ldrb	r3, [r3, #0]
    ac74:	2b06      	cmp	r3, #6
    ac76:	d000      	beq.n	ac7a <CorrectIMUvalues+0x75e>
    ac78:	e1f2      	b.n	b060 <CorrectIMUvalues+0xb44>
			cax = az;
    ac7a:	4b19      	ldr	r3, [pc, #100]	; (ace0 <CorrectIMUvalues+0x7c4>)
    ac7c:	2200      	movs	r2, #0
    ac7e:	5e9a      	ldrsh	r2, [r3, r2]
    ac80:	4b16      	ldr	r3, [pc, #88]	; (acdc <CorrectIMUvalues+0x7c0>)
    ac82:	801a      	strh	r2, [r3, #0]
			cay = ay;
    ac84:	4b14      	ldr	r3, [pc, #80]	; (acd8 <CorrectIMUvalues+0x7bc>)
    ac86:	2200      	movs	r2, #0
    ac88:	5e9a      	ldrsh	r2, [r3, r2]
    ac8a:	4b16      	ldr	r3, [pc, #88]	; (ace4 <CorrectIMUvalues+0x7c8>)
    ac8c:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    ac8e:	4b18      	ldr	r3, [pc, #96]	; (acf0 <CorrectIMUvalues+0x7d4>)
    ac90:	2200      	movs	r2, #0
    ac92:	5e9a      	ldrsh	r2, [r3, r2]
    ac94:	4b15      	ldr	r3, [pc, #84]	; (acec <CorrectIMUvalues+0x7d0>)
    ac96:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    ac98:	4b13      	ldr	r3, [pc, #76]	; (ace8 <CorrectIMUvalues+0x7cc>)
    ac9a:	2200      	movs	r2, #0
    ac9c:	5e9a      	ldrsh	r2, [r3, r2]
    ac9e:	4b15      	ldr	r3, [pc, #84]	; (acf4 <CorrectIMUvalues+0x7d8>)
    aca0:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    aca2:	4b17      	ldr	r3, [pc, #92]	; (ad00 <CorrectIMUvalues+0x7e4>)
    aca4:	2200      	movs	r2, #0
    aca6:	5e9b      	ldrsh	r3, [r3, r2]
    aca8:	b29b      	uxth	r3, r3
    acaa:	425b      	negs	r3, r3
    acac:	b29b      	uxth	r3, r3
    acae:	b21a      	sxth	r2, r3
    acb0:	4b12      	ldr	r3, [pc, #72]	; (acfc <CorrectIMUvalues+0x7e0>)
    acb2:	801a      	strh	r2, [r3, #0]
			cmy = my;
    acb4:	4b10      	ldr	r3, [pc, #64]	; (acf8 <CorrectIMUvalues+0x7dc>)
    acb6:	2200      	movs	r2, #0
    acb8:	5e9a      	ldrsh	r2, [r3, r2]
    acba:	4b12      	ldr	r3, [pc, #72]	; (ad04 <CorrectIMUvalues+0x7e8>)
    acbc:	801a      	strh	r2, [r3, #0]
}
    acbe:	e1cf      	b.n	b060 <CorrectIMUvalues+0xb44>
    acc0:	200002ea 	.word	0x200002ea
    acc4:	20000300 	.word	0x20000300
    acc8:	200002e4 	.word	0x200002e4
    accc:	200002fa 	.word	0x200002fa
    acd0:	200002f0 	.word	0x200002f0
    acd4:	20000306 	.word	0x20000306
    acd8:	200002ec 	.word	0x200002ec
    acdc:	200002fc 	.word	0x200002fc
    ace0:	200002ee 	.word	0x200002ee
    ace4:	200002fe 	.word	0x200002fe
    ace8:	200002e6 	.word	0x200002e6
    acec:	200002f6 	.word	0x200002f6
    acf0:	200002e8 	.word	0x200002e8
    acf4:	200002f8 	.word	0x200002f8
    acf8:	200002f2 	.word	0x200002f2
    acfc:	20000302 	.word	0x20000302
    ad00:	200002f4 	.word	0x200002f4
    ad04:	20000304 	.word	0x20000304
	} else if(connector_orient == ORIENT_REAR){ // Connectors Rear
    ad08:	1dfb      	adds	r3, r7, #7
    ad0a:	781b      	ldrb	r3, [r3, #0]
    ad0c:	2b05      	cmp	r3, #5
    ad0e:	d000      	beq.n	ad12 <CorrectIMUvalues+0x7f6>
    ad10:	e0d7      	b.n	aec2 <CorrectIMUvalues+0x9a6>
		caz = -ay;
    ad12:	4bd5      	ldr	r3, [pc, #852]	; (b068 <CorrectIMUvalues+0xb4c>)
    ad14:	2200      	movs	r2, #0
    ad16:	5e9b      	ldrsh	r3, [r3, r2]
    ad18:	b29b      	uxth	r3, r3
    ad1a:	425b      	negs	r3, r3
    ad1c:	b29b      	uxth	r3, r3
    ad1e:	b21a      	sxth	r2, r3
    ad20:	4bd2      	ldr	r3, [pc, #840]	; (b06c <CorrectIMUvalues+0xb50>)
    ad22:	801a      	strh	r2, [r3, #0]
		cgz = -gy;
    ad24:	4bd2      	ldr	r3, [pc, #840]	; (b070 <CorrectIMUvalues+0xb54>)
    ad26:	2200      	movs	r2, #0
    ad28:	5e9b      	ldrsh	r3, [r3, r2]
    ad2a:	b29b      	uxth	r3, r3
    ad2c:	425b      	negs	r3, r3
    ad2e:	b29b      	uxth	r3, r3
    ad30:	b21a      	sxth	r2, r3
    ad32:	4bd0      	ldr	r3, [pc, #832]	; (b074 <CorrectIMUvalues+0xb58>)
    ad34:	801a      	strh	r2, [r3, #0]
		cmz = -my;
    ad36:	4bd0      	ldr	r3, [pc, #832]	; (b078 <CorrectIMUvalues+0xb5c>)
    ad38:	2200      	movs	r2, #0
    ad3a:	5e9b      	ldrsh	r3, [r3, r2]
    ad3c:	b29b      	uxth	r3, r3
    ad3e:	425b      	negs	r3, r3
    ad40:	b29b      	uxth	r3, r3
    ad42:	b21a      	sxth	r2, r3
    ad44:	4bcd      	ldr	r3, [pc, #820]	; (b07c <CorrectIMUvalues+0xb60>)
    ad46:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    ad48:	1dbb      	adds	r3, r7, #6
    ad4a:	781b      	ldrb	r3, [r3, #0]
    ad4c:	2b01      	cmp	r3, #1
    ad4e:	d11e      	bne.n	ad8e <CorrectIMUvalues+0x872>
			cax = ax;
    ad50:	4bcb      	ldr	r3, [pc, #812]	; (b080 <CorrectIMUvalues+0xb64>)
    ad52:	2200      	movs	r2, #0
    ad54:	5e9a      	ldrsh	r2, [r3, r2]
    ad56:	4bcb      	ldr	r3, [pc, #812]	; (b084 <CorrectIMUvalues+0xb68>)
    ad58:	801a      	strh	r2, [r3, #0]
			cay = az;
    ad5a:	4bcb      	ldr	r3, [pc, #812]	; (b088 <CorrectIMUvalues+0xb6c>)
    ad5c:	2200      	movs	r2, #0
    ad5e:	5e9a      	ldrsh	r2, [r3, r2]
    ad60:	4bca      	ldr	r3, [pc, #808]	; (b08c <CorrectIMUvalues+0xb70>)
    ad62:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    ad64:	4bca      	ldr	r3, [pc, #808]	; (b090 <CorrectIMUvalues+0xb74>)
    ad66:	2200      	movs	r2, #0
    ad68:	5e9a      	ldrsh	r2, [r3, r2]
    ad6a:	4bca      	ldr	r3, [pc, #808]	; (b094 <CorrectIMUvalues+0xb78>)
    ad6c:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    ad6e:	4bca      	ldr	r3, [pc, #808]	; (b098 <CorrectIMUvalues+0xb7c>)
    ad70:	2200      	movs	r2, #0
    ad72:	5e9a      	ldrsh	r2, [r3, r2]
    ad74:	4bc9      	ldr	r3, [pc, #804]	; (b09c <CorrectIMUvalues+0xb80>)
    ad76:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    ad78:	4bc9      	ldr	r3, [pc, #804]	; (b0a0 <CorrectIMUvalues+0xb84>)
    ad7a:	2200      	movs	r2, #0
    ad7c:	5e9a      	ldrsh	r2, [r3, r2]
    ad7e:	4bc9      	ldr	r3, [pc, #804]	; (b0a4 <CorrectIMUvalues+0xb88>)
    ad80:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    ad82:	4bc9      	ldr	r3, [pc, #804]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    ad84:	2200      	movs	r2, #0
    ad86:	5e9a      	ldrsh	r2, [r3, r2]
    ad88:	4bc8      	ldr	r3, [pc, #800]	; (b0ac <CorrectIMUvalues+0xb90>)
    ad8a:	801a      	strh	r2, [r3, #0]
}
    ad8c:	e168      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    ad8e:	1dbb      	adds	r3, r7, #6
    ad90:	781b      	ldrb	r3, [r3, #0]
    ad92:	2b02      	cmp	r3, #2
    ad94:	d136      	bne.n	ae04 <CorrectIMUvalues+0x8e8>
			cax = -ax;
    ad96:	4bba      	ldr	r3, [pc, #744]	; (b080 <CorrectIMUvalues+0xb64>)
    ad98:	2200      	movs	r2, #0
    ad9a:	5e9b      	ldrsh	r3, [r3, r2]
    ad9c:	b29b      	uxth	r3, r3
    ad9e:	425b      	negs	r3, r3
    ada0:	b29b      	uxth	r3, r3
    ada2:	b21a      	sxth	r2, r3
    ada4:	4bb7      	ldr	r3, [pc, #732]	; (b084 <CorrectIMUvalues+0xb68>)
    ada6:	801a      	strh	r2, [r3, #0]
			cay = -az;
    ada8:	4bb7      	ldr	r3, [pc, #732]	; (b088 <CorrectIMUvalues+0xb6c>)
    adaa:	2200      	movs	r2, #0
    adac:	5e9b      	ldrsh	r3, [r3, r2]
    adae:	b29b      	uxth	r3, r3
    adb0:	425b      	negs	r3, r3
    adb2:	b29b      	uxth	r3, r3
    adb4:	b21a      	sxth	r2, r3
    adb6:	4bb5      	ldr	r3, [pc, #724]	; (b08c <CorrectIMUvalues+0xb70>)
    adb8:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    adba:	4bb5      	ldr	r3, [pc, #724]	; (b090 <CorrectIMUvalues+0xb74>)
    adbc:	2200      	movs	r2, #0
    adbe:	5e9b      	ldrsh	r3, [r3, r2]
    adc0:	b29b      	uxth	r3, r3
    adc2:	425b      	negs	r3, r3
    adc4:	b29b      	uxth	r3, r3
    adc6:	b21a      	sxth	r2, r3
    adc8:	4bb2      	ldr	r3, [pc, #712]	; (b094 <CorrectIMUvalues+0xb78>)
    adca:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    adcc:	4bb2      	ldr	r3, [pc, #712]	; (b098 <CorrectIMUvalues+0xb7c>)
    adce:	2200      	movs	r2, #0
    add0:	5e9b      	ldrsh	r3, [r3, r2]
    add2:	b29b      	uxth	r3, r3
    add4:	425b      	negs	r3, r3
    add6:	b29b      	uxth	r3, r3
    add8:	b21a      	sxth	r2, r3
    adda:	4bb0      	ldr	r3, [pc, #704]	; (b09c <CorrectIMUvalues+0xb80>)
    addc:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    adde:	4bb0      	ldr	r3, [pc, #704]	; (b0a0 <CorrectIMUvalues+0xb84>)
    ade0:	2200      	movs	r2, #0
    ade2:	5e9b      	ldrsh	r3, [r3, r2]
    ade4:	b29b      	uxth	r3, r3
    ade6:	425b      	negs	r3, r3
    ade8:	b29b      	uxth	r3, r3
    adea:	b21a      	sxth	r2, r3
    adec:	4bad      	ldr	r3, [pc, #692]	; (b0a4 <CorrectIMUvalues+0xb88>)
    adee:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    adf0:	4bad      	ldr	r3, [pc, #692]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    adf2:	2200      	movs	r2, #0
    adf4:	5e9b      	ldrsh	r3, [r3, r2]
    adf6:	b29b      	uxth	r3, r3
    adf8:	425b      	negs	r3, r3
    adfa:	b29b      	uxth	r3, r3
    adfc:	b21a      	sxth	r2, r3
    adfe:	4bab      	ldr	r3, [pc, #684]	; (b0ac <CorrectIMUvalues+0xb90>)
    ae00:	801a      	strh	r2, [r3, #0]
}
    ae02:	e12d      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    ae04:	1dbb      	adds	r3, r7, #6
    ae06:	781b      	ldrb	r3, [r3, #0]
    ae08:	2b03      	cmp	r3, #3
    ae0a:	d12a      	bne.n	ae62 <CorrectIMUvalues+0x946>
			cax = -az;
    ae0c:	4b9e      	ldr	r3, [pc, #632]	; (b088 <CorrectIMUvalues+0xb6c>)
    ae0e:	2200      	movs	r2, #0
    ae10:	5e9b      	ldrsh	r3, [r3, r2]
    ae12:	b29b      	uxth	r3, r3
    ae14:	425b      	negs	r3, r3
    ae16:	b29b      	uxth	r3, r3
    ae18:	b21a      	sxth	r2, r3
    ae1a:	4b9a      	ldr	r3, [pc, #616]	; (b084 <CorrectIMUvalues+0xb68>)
    ae1c:	801a      	strh	r2, [r3, #0]
			cay = ax;
    ae1e:	4b98      	ldr	r3, [pc, #608]	; (b080 <CorrectIMUvalues+0xb64>)
    ae20:	2200      	movs	r2, #0
    ae22:	5e9a      	ldrsh	r2, [r3, r2]
    ae24:	4b99      	ldr	r3, [pc, #612]	; (b08c <CorrectIMUvalues+0xb70>)
    ae26:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    ae28:	4b9b      	ldr	r3, [pc, #620]	; (b098 <CorrectIMUvalues+0xb7c>)
    ae2a:	2200      	movs	r2, #0
    ae2c:	5e9b      	ldrsh	r3, [r3, r2]
    ae2e:	b29b      	uxth	r3, r3
    ae30:	425b      	negs	r3, r3
    ae32:	b29b      	uxth	r3, r3
    ae34:	b21a      	sxth	r2, r3
    ae36:	4b97      	ldr	r3, [pc, #604]	; (b094 <CorrectIMUvalues+0xb78>)
    ae38:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    ae3a:	4b95      	ldr	r3, [pc, #596]	; (b090 <CorrectIMUvalues+0xb74>)
    ae3c:	2200      	movs	r2, #0
    ae3e:	5e9a      	ldrsh	r2, [r3, r2]
    ae40:	4b96      	ldr	r3, [pc, #600]	; (b09c <CorrectIMUvalues+0xb80>)
    ae42:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    ae44:	4b98      	ldr	r3, [pc, #608]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    ae46:	2200      	movs	r2, #0
    ae48:	5e9a      	ldrsh	r2, [r3, r2]
    ae4a:	4b96      	ldr	r3, [pc, #600]	; (b0a4 <CorrectIMUvalues+0xb88>)
    ae4c:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    ae4e:	4b94      	ldr	r3, [pc, #592]	; (b0a0 <CorrectIMUvalues+0xb84>)
    ae50:	2200      	movs	r2, #0
    ae52:	5e9b      	ldrsh	r3, [r3, r2]
    ae54:	b29b      	uxth	r3, r3
    ae56:	425b      	negs	r3, r3
    ae58:	b29b      	uxth	r3, r3
    ae5a:	b21a      	sxth	r2, r3
    ae5c:	4b93      	ldr	r3, [pc, #588]	; (b0ac <CorrectIMUvalues+0xb90>)
    ae5e:	801a      	strh	r2, [r3, #0]
}
    ae60:	e0fe      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    ae62:	1dbb      	adds	r3, r7, #6
    ae64:	781b      	ldrb	r3, [r3, #0]
    ae66:	2b04      	cmp	r3, #4
    ae68:	d000      	beq.n	ae6c <CorrectIMUvalues+0x950>
    ae6a:	e0f9      	b.n	b060 <CorrectIMUvalues+0xb44>
			cax = az;
    ae6c:	4b86      	ldr	r3, [pc, #536]	; (b088 <CorrectIMUvalues+0xb6c>)
    ae6e:	2200      	movs	r2, #0
    ae70:	5e9a      	ldrsh	r2, [r3, r2]
    ae72:	4b84      	ldr	r3, [pc, #528]	; (b084 <CorrectIMUvalues+0xb68>)
    ae74:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    ae76:	4b82      	ldr	r3, [pc, #520]	; (b080 <CorrectIMUvalues+0xb64>)
    ae78:	2200      	movs	r2, #0
    ae7a:	5e9b      	ldrsh	r3, [r3, r2]
    ae7c:	b29b      	uxth	r3, r3
    ae7e:	425b      	negs	r3, r3
    ae80:	b29b      	uxth	r3, r3
    ae82:	b21a      	sxth	r2, r3
    ae84:	4b81      	ldr	r3, [pc, #516]	; (b08c <CorrectIMUvalues+0xb70>)
    ae86:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    ae88:	4b83      	ldr	r3, [pc, #524]	; (b098 <CorrectIMUvalues+0xb7c>)
    ae8a:	2200      	movs	r2, #0
    ae8c:	5e9a      	ldrsh	r2, [r3, r2]
    ae8e:	4b81      	ldr	r3, [pc, #516]	; (b094 <CorrectIMUvalues+0xb78>)
    ae90:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    ae92:	4b7f      	ldr	r3, [pc, #508]	; (b090 <CorrectIMUvalues+0xb74>)
    ae94:	2200      	movs	r2, #0
    ae96:	5e9b      	ldrsh	r3, [r3, r2]
    ae98:	b29b      	uxth	r3, r3
    ae9a:	425b      	negs	r3, r3
    ae9c:	b29b      	uxth	r3, r3
    ae9e:	b21a      	sxth	r2, r3
    aea0:	4b7e      	ldr	r3, [pc, #504]	; (b09c <CorrectIMUvalues+0xb80>)
    aea2:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    aea4:	4b80      	ldr	r3, [pc, #512]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    aea6:	2200      	movs	r2, #0
    aea8:	5e9b      	ldrsh	r3, [r3, r2]
    aeaa:	b29b      	uxth	r3, r3
    aeac:	425b      	negs	r3, r3
    aeae:	b29b      	uxth	r3, r3
    aeb0:	b21a      	sxth	r2, r3
    aeb2:	4b7c      	ldr	r3, [pc, #496]	; (b0a4 <CorrectIMUvalues+0xb88>)
    aeb4:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    aeb6:	4b7a      	ldr	r3, [pc, #488]	; (b0a0 <CorrectIMUvalues+0xb84>)
    aeb8:	2200      	movs	r2, #0
    aeba:	5e9a      	ldrsh	r2, [r3, r2]
    aebc:	4b7b      	ldr	r3, [pc, #492]	; (b0ac <CorrectIMUvalues+0xb90>)
    aebe:	801a      	strh	r2, [r3, #0]
}
    aec0:	e0ce      	b.n	b060 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_FRONT){ // Connectors Front
    aec2:	1dfb      	adds	r3, r7, #7
    aec4:	781b      	ldrb	r3, [r3, #0]
    aec6:	2b06      	cmp	r3, #6
    aec8:	d000      	beq.n	aecc <CorrectIMUvalues+0x9b0>
    aeca:	e0c9      	b.n	b060 <CorrectIMUvalues+0xb44>
		caz = ay;
    aecc:	4b66      	ldr	r3, [pc, #408]	; (b068 <CorrectIMUvalues+0xb4c>)
    aece:	2200      	movs	r2, #0
    aed0:	5e9a      	ldrsh	r2, [r3, r2]
    aed2:	4b66      	ldr	r3, [pc, #408]	; (b06c <CorrectIMUvalues+0xb50>)
    aed4:	801a      	strh	r2, [r3, #0]
		cgz = gy;
    aed6:	4b66      	ldr	r3, [pc, #408]	; (b070 <CorrectIMUvalues+0xb54>)
    aed8:	2200      	movs	r2, #0
    aeda:	5e9a      	ldrsh	r2, [r3, r2]
    aedc:	4b65      	ldr	r3, [pc, #404]	; (b074 <CorrectIMUvalues+0xb58>)
    aede:	801a      	strh	r2, [r3, #0]
		cgz = my;
    aee0:	4b65      	ldr	r3, [pc, #404]	; (b078 <CorrectIMUvalues+0xb5c>)
    aee2:	2200      	movs	r2, #0
    aee4:	5e9a      	ldrsh	r2, [r3, r2]
    aee6:	4b63      	ldr	r3, [pc, #396]	; (b074 <CorrectIMUvalues+0xb58>)
    aee8:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    aeea:	1dbb      	adds	r3, r7, #6
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	2b01      	cmp	r3, #1
    aef0:	d12a      	bne.n	af48 <CorrectIMUvalues+0xa2c>
			cax = -ax;
    aef2:	4b63      	ldr	r3, [pc, #396]	; (b080 <CorrectIMUvalues+0xb64>)
    aef4:	2200      	movs	r2, #0
    aef6:	5e9b      	ldrsh	r3, [r3, r2]
    aef8:	b29b      	uxth	r3, r3
    aefa:	425b      	negs	r3, r3
    aefc:	b29b      	uxth	r3, r3
    aefe:	b21a      	sxth	r2, r3
    af00:	4b60      	ldr	r3, [pc, #384]	; (b084 <CorrectIMUvalues+0xb68>)
    af02:	801a      	strh	r2, [r3, #0]
			cay = az;
    af04:	4b60      	ldr	r3, [pc, #384]	; (b088 <CorrectIMUvalues+0xb6c>)
    af06:	2200      	movs	r2, #0
    af08:	5e9a      	ldrsh	r2, [r3, r2]
    af0a:	4b60      	ldr	r3, [pc, #384]	; (b08c <CorrectIMUvalues+0xb70>)
    af0c:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    af0e:	4b60      	ldr	r3, [pc, #384]	; (b090 <CorrectIMUvalues+0xb74>)
    af10:	2200      	movs	r2, #0
    af12:	5e9b      	ldrsh	r3, [r3, r2]
    af14:	b29b      	uxth	r3, r3
    af16:	425b      	negs	r3, r3
    af18:	b29b      	uxth	r3, r3
    af1a:	b21a      	sxth	r2, r3
    af1c:	4b5d      	ldr	r3, [pc, #372]	; (b094 <CorrectIMUvalues+0xb78>)
    af1e:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    af20:	4b5d      	ldr	r3, [pc, #372]	; (b098 <CorrectIMUvalues+0xb7c>)
    af22:	2200      	movs	r2, #0
    af24:	5e9a      	ldrsh	r2, [r3, r2]
    af26:	4b5d      	ldr	r3, [pc, #372]	; (b09c <CorrectIMUvalues+0xb80>)
    af28:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    af2a:	4b5d      	ldr	r3, [pc, #372]	; (b0a0 <CorrectIMUvalues+0xb84>)
    af2c:	2200      	movs	r2, #0
    af2e:	5e9b      	ldrsh	r3, [r3, r2]
    af30:	b29b      	uxth	r3, r3
    af32:	425b      	negs	r3, r3
    af34:	b29b      	uxth	r3, r3
    af36:	b21a      	sxth	r2, r3
    af38:	4b5a      	ldr	r3, [pc, #360]	; (b0a4 <CorrectIMUvalues+0xb88>)
    af3a:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    af3c:	4b5a      	ldr	r3, [pc, #360]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    af3e:	2200      	movs	r2, #0
    af40:	5e9a      	ldrsh	r2, [r3, r2]
    af42:	4b5a      	ldr	r3, [pc, #360]	; (b0ac <CorrectIMUvalues+0xb90>)
    af44:	801a      	strh	r2, [r3, #0]
}
    af46:	e08b      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    af48:	1dbb      	adds	r3, r7, #6
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	2b02      	cmp	r3, #2
    af4e:	d12a      	bne.n	afa6 <CorrectIMUvalues+0xa8a>
			cax = ax;
    af50:	4b4b      	ldr	r3, [pc, #300]	; (b080 <CorrectIMUvalues+0xb64>)
    af52:	2200      	movs	r2, #0
    af54:	5e9a      	ldrsh	r2, [r3, r2]
    af56:	4b4b      	ldr	r3, [pc, #300]	; (b084 <CorrectIMUvalues+0xb68>)
    af58:	801a      	strh	r2, [r3, #0]
			cay = -az;
    af5a:	4b4b      	ldr	r3, [pc, #300]	; (b088 <CorrectIMUvalues+0xb6c>)
    af5c:	2200      	movs	r2, #0
    af5e:	5e9b      	ldrsh	r3, [r3, r2]
    af60:	b29b      	uxth	r3, r3
    af62:	425b      	negs	r3, r3
    af64:	b29b      	uxth	r3, r3
    af66:	b21a      	sxth	r2, r3
    af68:	4b48      	ldr	r3, [pc, #288]	; (b08c <CorrectIMUvalues+0xb70>)
    af6a:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    af6c:	4b48      	ldr	r3, [pc, #288]	; (b090 <CorrectIMUvalues+0xb74>)
    af6e:	2200      	movs	r2, #0
    af70:	5e9a      	ldrsh	r2, [r3, r2]
    af72:	4b48      	ldr	r3, [pc, #288]	; (b094 <CorrectIMUvalues+0xb78>)
    af74:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    af76:	4b48      	ldr	r3, [pc, #288]	; (b098 <CorrectIMUvalues+0xb7c>)
    af78:	2200      	movs	r2, #0
    af7a:	5e9b      	ldrsh	r3, [r3, r2]
    af7c:	b29b      	uxth	r3, r3
    af7e:	425b      	negs	r3, r3
    af80:	b29b      	uxth	r3, r3
    af82:	b21a      	sxth	r2, r3
    af84:	4b45      	ldr	r3, [pc, #276]	; (b09c <CorrectIMUvalues+0xb80>)
    af86:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    af88:	4b45      	ldr	r3, [pc, #276]	; (b0a0 <CorrectIMUvalues+0xb84>)
    af8a:	2200      	movs	r2, #0
    af8c:	5e9a      	ldrsh	r2, [r3, r2]
    af8e:	4b45      	ldr	r3, [pc, #276]	; (b0a4 <CorrectIMUvalues+0xb88>)
    af90:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    af92:	4b45      	ldr	r3, [pc, #276]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    af94:	2200      	movs	r2, #0
    af96:	5e9b      	ldrsh	r3, [r3, r2]
    af98:	b29b      	uxth	r3, r3
    af9a:	425b      	negs	r3, r3
    af9c:	b29b      	uxth	r3, r3
    af9e:	b21a      	sxth	r2, r3
    afa0:	4b42      	ldr	r3, [pc, #264]	; (b0ac <CorrectIMUvalues+0xb90>)
    afa2:	801a      	strh	r2, [r3, #0]
}
    afa4:	e05c      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    afa6:	1dbb      	adds	r3, r7, #6
    afa8:	781b      	ldrb	r3, [r3, #0]
    afaa:	2b03      	cmp	r3, #3
    afac:	d126      	bne.n	affc <CorrectIMUvalues+0xae0>
			cax = az;
    afae:	4b36      	ldr	r3, [pc, #216]	; (b088 <CorrectIMUvalues+0xb6c>)
    afb0:	2200      	movs	r2, #0
    afb2:	5e9a      	ldrsh	r2, [r3, r2]
    afb4:	4b33      	ldr	r3, [pc, #204]	; (b084 <CorrectIMUvalues+0xb68>)
    afb6:	801a      	strh	r2, [r3, #0]
			cay = ax;
    afb8:	4b31      	ldr	r3, [pc, #196]	; (b080 <CorrectIMUvalues+0xb64>)
    afba:	2200      	movs	r2, #0
    afbc:	5e9a      	ldrsh	r2, [r3, r2]
    afbe:	4b33      	ldr	r3, [pc, #204]	; (b08c <CorrectIMUvalues+0xb70>)
    afc0:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    afc2:	4b35      	ldr	r3, [pc, #212]	; (b098 <CorrectIMUvalues+0xb7c>)
    afc4:	2200      	movs	r2, #0
    afc6:	5e9a      	ldrsh	r2, [r3, r2]
    afc8:	4b32      	ldr	r3, [pc, #200]	; (b094 <CorrectIMUvalues+0xb78>)
    afca:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    afcc:	4b30      	ldr	r3, [pc, #192]	; (b090 <CorrectIMUvalues+0xb74>)
    afce:	2200      	movs	r2, #0
    afd0:	5e9a      	ldrsh	r2, [r3, r2]
    afd2:	4b32      	ldr	r3, [pc, #200]	; (b09c <CorrectIMUvalues+0xb80>)
    afd4:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    afd6:	4b34      	ldr	r3, [pc, #208]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    afd8:	2200      	movs	r2, #0
    afda:	5e9b      	ldrsh	r3, [r3, r2]
    afdc:	b29b      	uxth	r3, r3
    afde:	425b      	negs	r3, r3
    afe0:	b29b      	uxth	r3, r3
    afe2:	b21a      	sxth	r2, r3
    afe4:	4b2f      	ldr	r3, [pc, #188]	; (b0a4 <CorrectIMUvalues+0xb88>)
    afe6:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    afe8:	4b2d      	ldr	r3, [pc, #180]	; (b0a0 <CorrectIMUvalues+0xb84>)
    afea:	2200      	movs	r2, #0
    afec:	5e9b      	ldrsh	r3, [r3, r2]
    afee:	b29b      	uxth	r3, r3
    aff0:	425b      	negs	r3, r3
    aff2:	b29b      	uxth	r3, r3
    aff4:	b21a      	sxth	r2, r3
    aff6:	4b2d      	ldr	r3, [pc, #180]	; (b0ac <CorrectIMUvalues+0xb90>)
    aff8:	801a      	strh	r2, [r3, #0]
}
    affa:	e031      	b.n	b060 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    affc:	1dbb      	adds	r3, r7, #6
    affe:	781b      	ldrb	r3, [r3, #0]
    b000:	2b04      	cmp	r3, #4
    b002:	d12d      	bne.n	b060 <CorrectIMUvalues+0xb44>
			cax = -az;
    b004:	4b20      	ldr	r3, [pc, #128]	; (b088 <CorrectIMUvalues+0xb6c>)
    b006:	2200      	movs	r2, #0
    b008:	5e9b      	ldrsh	r3, [r3, r2]
    b00a:	b29b      	uxth	r3, r3
    b00c:	425b      	negs	r3, r3
    b00e:	b29b      	uxth	r3, r3
    b010:	b21a      	sxth	r2, r3
    b012:	4b1c      	ldr	r3, [pc, #112]	; (b084 <CorrectIMUvalues+0xb68>)
    b014:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    b016:	4b1a      	ldr	r3, [pc, #104]	; (b080 <CorrectIMUvalues+0xb64>)
    b018:	2200      	movs	r2, #0
    b01a:	5e9b      	ldrsh	r3, [r3, r2]
    b01c:	b29b      	uxth	r3, r3
    b01e:	425b      	negs	r3, r3
    b020:	b29b      	uxth	r3, r3
    b022:	b21a      	sxth	r2, r3
    b024:	4b19      	ldr	r3, [pc, #100]	; (b08c <CorrectIMUvalues+0xb70>)
    b026:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    b028:	4b1b      	ldr	r3, [pc, #108]	; (b098 <CorrectIMUvalues+0xb7c>)
    b02a:	2200      	movs	r2, #0
    b02c:	5e9b      	ldrsh	r3, [r3, r2]
    b02e:	b29b      	uxth	r3, r3
    b030:	425b      	negs	r3, r3
    b032:	b29b      	uxth	r3, r3
    b034:	b21a      	sxth	r2, r3
    b036:	4b17      	ldr	r3, [pc, #92]	; (b094 <CorrectIMUvalues+0xb78>)
    b038:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    b03a:	4b15      	ldr	r3, [pc, #84]	; (b090 <CorrectIMUvalues+0xb74>)
    b03c:	2200      	movs	r2, #0
    b03e:	5e9b      	ldrsh	r3, [r3, r2]
    b040:	b29b      	uxth	r3, r3
    b042:	425b      	negs	r3, r3
    b044:	b29b      	uxth	r3, r3
    b046:	b21a      	sxth	r2, r3
    b048:	4b14      	ldr	r3, [pc, #80]	; (b09c <CorrectIMUvalues+0xb80>)
    b04a:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    b04c:	4b16      	ldr	r3, [pc, #88]	; (b0a8 <CorrectIMUvalues+0xb8c>)
    b04e:	2200      	movs	r2, #0
    b050:	5e9a      	ldrsh	r2, [r3, r2]
    b052:	4b14      	ldr	r3, [pc, #80]	; (b0a4 <CorrectIMUvalues+0xb88>)
    b054:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    b056:	4b12      	ldr	r3, [pc, #72]	; (b0a0 <CorrectIMUvalues+0xb84>)
    b058:	2200      	movs	r2, #0
    b05a:	5e9a      	ldrsh	r2, [r3, r2]
    b05c:	4b13      	ldr	r3, [pc, #76]	; (b0ac <CorrectIMUvalues+0xb90>)
    b05e:	801a      	strh	r2, [r3, #0]
}
    b060:	46c0      	nop			; (mov r8, r8)
    b062:	46bd      	mov	sp, r7
    b064:	b002      	add	sp, #8
    b066:	bd80      	pop	{r7, pc}
    b068:	200002ec 	.word	0x200002ec
    b06c:	20000300 	.word	0x20000300
    b070:	200002e6 	.word	0x200002e6
    b074:	200002fa 	.word	0x200002fa
    b078:	200002f2 	.word	0x200002f2
    b07c:	20000306 	.word	0x20000306
    b080:	200002ea 	.word	0x200002ea
    b084:	200002fc 	.word	0x200002fc
    b088:	200002ee 	.word	0x200002ee
    b08c:	200002fe 	.word	0x200002fe
    b090:	200002e4 	.word	0x200002e4
    b094:	200002f6 	.word	0x200002f6
    b098:	200002e8 	.word	0x200002e8
    b09c:	200002f8 	.word	0x200002f8
    b0a0:	200002f0 	.word	0x200002f0
    b0a4:	20000302 	.word	0x20000302
    b0a8:	200002f4 	.word	0x200002f4
    b0ac:	20000304 	.word	0x20000304

0000b0b0 <configure_tc>:
void configure_tc(void);
void check_time(uint32_t* time_var);
void check_time_micros(uint32_t* time_var);

void configure_tc(void)
{
    b0b0:	b580      	push	{r7, lr}
    b0b2:	b08e      	sub	sp, #56	; 0x38
    b0b4:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
    b0b6:	1d3b      	adds	r3, r7, #4
    b0b8:	0018      	movs	r0, r3
    b0ba:	4b0e      	ldr	r3, [pc, #56]	; (b0f4 <configure_tc+0x44>)
    b0bc:	4798      	blx	r3
	
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    b0be:	1d3b      	adds	r3, r7, #4
    b0c0:	2208      	movs	r2, #8
    b0c2:	709a      	strb	r2, [r3, #2]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    b0c4:	1d3b      	adds	r3, r7, #4
    b0c6:	2200      	movs	r2, #0
    b0c8:	739a      	strb	r2, [r3, #14]
	config_tc.clock_source =  GCLK_CLKCTRL_GEN_GCLK0;
    b0ca:	1d3b      	adds	r3, r7, #4
    b0cc:	2200      	movs	r2, #0
    b0ce:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    b0d0:	1d3b      	adds	r3, r7, #4
    b0d2:	2200      	movs	r2, #0
    b0d4:	809a      	strh	r2, [r3, #4]

	tc_init(&tc0, TC4, &config_tc);
    b0d6:	1d3a      	adds	r2, r7, #4
    b0d8:	4907      	ldr	r1, [pc, #28]	; (b0f8 <configure_tc+0x48>)
    b0da:	4b08      	ldr	r3, [pc, #32]	; (b0fc <configure_tc+0x4c>)
    b0dc:	0018      	movs	r0, r3
    b0de:	4b08      	ldr	r3, [pc, #32]	; (b100 <configure_tc+0x50>)
    b0e0:	4798      	blx	r3
	tc_enable(&tc0);
    b0e2:	4b06      	ldr	r3, [pc, #24]	; (b0fc <configure_tc+0x4c>)
    b0e4:	0018      	movs	r0, r3
    b0e6:	4b07      	ldr	r3, [pc, #28]	; (b104 <configure_tc+0x54>)
    b0e8:	4798      	blx	r3
}
    b0ea:	46c0      	nop			; (mov r8, r8)
    b0ec:	46bd      	mov	sp, r7
    b0ee:	b00e      	add	sp, #56	; 0x38
    b0f0:	bd80      	pop	{r7, pc}
    b0f2:	46c0      	nop			; (mov r8, r8)
    b0f4:	00009309 	.word	0x00009309
    b0f8:	42003000 	.word	0x42003000
    b0fc:	2000078c 	.word	0x2000078c
    b100:	00005871 	.word	0x00005871
    b104:	00009391 	.word	0x00009391

0000b108 <millis>:



uint32_t millis()
{
    b108:	b580      	push	{r7, lr}
    b10a:	af00      	add	r7, sp, #0
	return (tc_get_count_value(&tc0)/7500);
    b10c:	4b06      	ldr	r3, [pc, #24]	; (b128 <millis+0x20>)
    b10e:	0018      	movs	r0, r3
    b110:	4b06      	ldr	r3, [pc, #24]	; (b12c <millis+0x24>)
    b112:	4798      	blx	r3
    b114:	0002      	movs	r2, r0
    b116:	4b06      	ldr	r3, [pc, #24]	; (b130 <millis+0x28>)
    b118:	4906      	ldr	r1, [pc, #24]	; (b134 <millis+0x2c>)
    b11a:	0010      	movs	r0, r2
    b11c:	4798      	blx	r3
    b11e:	0003      	movs	r3, r0
}
    b120:	0018      	movs	r0, r3
    b122:	46bd      	mov	sp, r7
    b124:	bd80      	pop	{r7, pc}
    b126:	46c0      	nop			; (mov r8, r8)
    b128:	2000078c 	.word	0x2000078c
    b12c:	00005cc1 	.word	0x00005cc1
    b130:	00014101 	.word	0x00014101
    b134:	00001d4c 	.word	0x00001d4c

0000b138 <check_time>:
uint32_t micros()
{
	return (tc_get_count_value(&tc0)/7.5);
}

void check_time(uint32_t* time_var){
    b138:	b590      	push	{r4, r7, lr}
    b13a:	b083      	sub	sp, #12
    b13c:	af00      	add	r7, sp, #0
    b13e:	6078      	str	r0, [r7, #4]
	if(*time_var > millis())
    b140:	687b      	ldr	r3, [r7, #4]
    b142:	681c      	ldr	r4, [r3, #0]
    b144:	4b05      	ldr	r3, [pc, #20]	; (b15c <check_time+0x24>)
    b146:	4798      	blx	r3
    b148:	0003      	movs	r3, r0
    b14a:	429c      	cmp	r4, r3
    b14c:	d902      	bls.n	b154 <check_time+0x1c>
		*time_var = 0;
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	2200      	movs	r2, #0
    b152:	601a      	str	r2, [r3, #0]
}
    b154:	46c0      	nop			; (mov r8, r8)
    b156:	46bd      	mov	sp, r7
    b158:	b003      	add	sp, #12
    b15a:	bd90      	pop	{r4, r7, pc}
    b15c:	0000b109 	.word	0x0000b109

0000b160 <configure_LED_PWM>:



// Configure all of the LED ports as PWM outputs
void configure_LED_PWM(void)
{
    b160:	b580      	push	{r7, lr}
    b162:	b0aa      	sub	sp, #168	; 0xa8
    b164:	af00      	add	r7, sp, #0
struct tcc_config config_tcc;
tcc_get_config_defaults(&config_tcc, TCC0);
    b166:	4a58      	ldr	r2, [pc, #352]	; (b2c8 <configure_LED_PWM+0x168>)
    b168:	1d3b      	adds	r3, r7, #4
    b16a:	0011      	movs	r1, r2
    b16c:	0018      	movs	r0, r3
    b16e:	4b57      	ldr	r3, [pc, #348]	; (b2cc <configure_LED_PWM+0x16c>)
    b170:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b172:	1d3b      	adds	r3, r7, #4
    b174:	4a56      	ldr	r2, [pc, #344]	; (b2d0 <configure_LED_PWM+0x170>)
    b176:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b178:	1d3b      	adds	r3, r7, #4
    b17a:	2202      	movs	r2, #2
    b17c:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    b17e:	1d3b      	adds	r3, r7, #4
    b180:	2200      	movs	r2, #0
    b182:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    b184:	1d3b      	adds	r3, r7, #4
    b186:	2200      	movs	r2, #0
    b188:	621a      	str	r2, [r3, #32]
config_tcc.compare.match[2] = 0;
    b18a:	1d3b      	adds	r3, r7, #4
    b18c:	2200      	movs	r2, #0
    b18e:	625a      	str	r2, [r3, #36]	; 0x24
config_tcc.compare.match[3] = 0;
    b190:	1d3b      	adds	r3, r7, #4
    b192:	2200      	movs	r2, #0
    b194:	629a      	str	r2, [r3, #40]	; 0x28
config_tcc.pins.enable_wave_out_pin[0] = true;
    b196:	1d3b      	adds	r3, r7, #4
    b198:	2298      	movs	r2, #152	; 0x98
    b19a:	2101      	movs	r1, #1
    b19c:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    b19e:	1d3b      	adds	r3, r7, #4
    b1a0:	2299      	movs	r2, #153	; 0x99
    b1a2:	2101      	movs	r1, #1
    b1a4:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[2] = true;
    b1a6:	1d3b      	adds	r3, r7, #4
    b1a8:	229a      	movs	r2, #154	; 0x9a
    b1aa:	2101      	movs	r1, #1
    b1ac:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[3] = true;
    b1ae:	1d3b      	adds	r3, r7, #4
    b1b0:	229b      	movs	r2, #155	; 0x9b
    b1b2:	2101      	movs	r1, #1
    b1b4:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA14F_TCC0_WO4; 
    b1b6:	1d3b      	adds	r3, r7, #4
    b1b8:	220e      	movs	r2, #14
    b1ba:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PB11F_TCC0_WO5; 
    b1bc:	1d3b      	adds	r3, r7, #4
    b1be:	222b      	movs	r2, #43	; 0x2b
    b1c0:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin[2]        = PIN_PA10F_TCC0_WO2; 
    b1c2:	1d3b      	adds	r3, r7, #4
    b1c4:	220a      	movs	r2, #10
    b1c6:	661a      	str	r2, [r3, #96]	; 0x60
config_tcc.pins.wave_out_pin[3]        = PIN_PA11F_TCC0_WO3;  
    b1c8:	1d3b      	adds	r3, r7, #4
    b1ca:	220b      	movs	r2, #11
    b1cc:	665a      	str	r2, [r3, #100]	; 0x64
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA14F_TCC0_WO4;
    b1ce:	1d3b      	adds	r3, r7, #4
    b1d0:	2205      	movs	r2, #5
    b1d2:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PB11F_TCC0_WO5;
    b1d4:	1d3b      	adds	r3, r7, #4
    b1d6:	2205      	movs	r2, #5
    b1d8:	67da      	str	r2, [r3, #124]	; 0x7c
config_tcc.pins.wave_out_pin_mux[2]    = MUX_PA10F_TCC0_WO2;
    b1da:	1d3b      	adds	r3, r7, #4
    b1dc:	2280      	movs	r2, #128	; 0x80
    b1de:	2105      	movs	r1, #5
    b1e0:	5099      	str	r1, [r3, r2]
config_tcc.pins.wave_out_pin_mux[3]    = MUX_PA11F_TCC0_WO3;
    b1e2:	1d3b      	adds	r3, r7, #4
    b1e4:	2284      	movs	r2, #132	; 0x84
    b1e6:	2105      	movs	r1, #5
    b1e8:	5099      	str	r1, [r3, r2]


tcc_init(&tcc0, TCC0, &config_tcc);
    b1ea:	1d3a      	adds	r2, r7, #4
    b1ec:	4936      	ldr	r1, [pc, #216]	; (b2c8 <configure_LED_PWM+0x168>)
    b1ee:	4b39      	ldr	r3, [pc, #228]	; (b2d4 <configure_LED_PWM+0x174>)
    b1f0:	0018      	movs	r0, r3
    b1f2:	4b39      	ldr	r3, [pc, #228]	; (b2d8 <configure_LED_PWM+0x178>)
    b1f4:	4798      	blx	r3
tcc_enable(&tcc0);
    b1f6:	4b37      	ldr	r3, [pc, #220]	; (b2d4 <configure_LED_PWM+0x174>)
    b1f8:	0018      	movs	r0, r3
    b1fa:	4b38      	ldr	r3, [pc, #224]	; (b2dc <configure_LED_PWM+0x17c>)
    b1fc:	4798      	blx	r3


tcc_get_config_defaults(&config_tcc, TCC1);
    b1fe:	4a38      	ldr	r2, [pc, #224]	; (b2e0 <configure_LED_PWM+0x180>)
    b200:	1d3b      	adds	r3, r7, #4
    b202:	0011      	movs	r1, r2
    b204:	0018      	movs	r0, r3
    b206:	4b31      	ldr	r3, [pc, #196]	; (b2cc <configure_LED_PWM+0x16c>)
    b208:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b20a:	1d3b      	adds	r3, r7, #4
    b20c:	4a30      	ldr	r2, [pc, #192]	; (b2d0 <configure_LED_PWM+0x170>)
    b20e:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b210:	1d3b      	adds	r3, r7, #4
    b212:	2202      	movs	r2, #2
    b214:	761a      	strb	r2, [r3, #24]

//config_tcc.compare.match[0] = 0;
config_tcc.compare.match[1] = 0;
    b216:	1d3b      	adds	r3, r7, #4
    b218:	2200      	movs	r2, #0
    b21a:	621a      	str	r2, [r3, #32]
//config_tcc.pins.enable_wave_out_pin[0] = true;
config_tcc.pins.enable_wave_out_pin[1] = true;
    b21c:	1d3b      	adds	r3, r7, #4
    b21e:	2299      	movs	r2, #153	; 0x99
    b220:	2101      	movs	r1, #1
    b222:	5499      	strb	r1, [r3, r2]
//config_tcc.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    b224:	1d3b      	adds	r3, r7, #4
    b226:	2207      	movs	r2, #7
    b228:	65da      	str	r2, [r3, #92]	; 0x5c
//config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    b22a:	1d3b      	adds	r3, r7, #4
    b22c:	2204      	movs	r2, #4
    b22e:	67da      	str	r2, [r3, #124]	; 0x7c

tcc_init(&tcc1, TCC1, &config_tcc);
    b230:	1d3a      	adds	r2, r7, #4
    b232:	492b      	ldr	r1, [pc, #172]	; (b2e0 <configure_LED_PWM+0x180>)
    b234:	4b2b      	ldr	r3, [pc, #172]	; (b2e4 <configure_LED_PWM+0x184>)
    b236:	0018      	movs	r0, r3
    b238:	4b27      	ldr	r3, [pc, #156]	; (b2d8 <configure_LED_PWM+0x178>)
    b23a:	4798      	blx	r3
// Configure the capture channel to read pulse width of PPM_IN pin
TCC1->CTRLA.reg  |= TCC_CTRLA_CPTEN0;
    b23c:	4b28      	ldr	r3, [pc, #160]	; (b2e0 <configure_LED_PWM+0x180>)
    b23e:	4a28      	ldr	r2, [pc, #160]	; (b2e0 <configure_LED_PWM+0x180>)
    b240:	6812      	ldr	r2, [r2, #0]
    b242:	2180      	movs	r1, #128	; 0x80
    b244:	0449      	lsls	r1, r1, #17
    b246:	430a      	orrs	r2, r1
    b248:	601a      	str	r2, [r3, #0]
TCC1->EVCTRL.reg |= TCC_EVCTRL_TCEI1 | TCC_EVCTRL_EVACT1_PWP;
    b24a:	4b25      	ldr	r3, [pc, #148]	; (b2e0 <configure_LED_PWM+0x180>)
    b24c:	4a24      	ldr	r2, [pc, #144]	; (b2e0 <configure_LED_PWM+0x180>)
    b24e:	6a12      	ldr	r2, [r2, #32]
    b250:	4925      	ldr	r1, [pc, #148]	; (b2e8 <configure_LED_PWM+0x188>)
    b252:	430a      	orrs	r2, r1
    b254:	621a      	str	r2, [r3, #32]
tcc_enable(&tcc1);
    b256:	4b23      	ldr	r3, [pc, #140]	; (b2e4 <configure_LED_PWM+0x184>)
    b258:	0018      	movs	r0, r3
    b25a:	4b20      	ldr	r3, [pc, #128]	; (b2dc <configure_LED_PWM+0x17c>)
    b25c:	4798      	blx	r3


tcc_get_config_defaults(&config_tcc, TCC2);
    b25e:	4a23      	ldr	r2, [pc, #140]	; (b2ec <configure_LED_PWM+0x18c>)
    b260:	1d3b      	adds	r3, r7, #4
    b262:	0011      	movs	r1, r2
    b264:	0018      	movs	r0, r3
    b266:	4b19      	ldr	r3, [pc, #100]	; (b2cc <configure_LED_PWM+0x16c>)
    b268:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b26a:	1d3b      	adds	r3, r7, #4
    b26c:	4a18      	ldr	r2, [pc, #96]	; (b2d0 <configure_LED_PWM+0x170>)
    b26e:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b270:	1d3b      	adds	r3, r7, #4
    b272:	2202      	movs	r2, #2
    b274:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    b276:	1d3b      	adds	r3, r7, #4
    b278:	2200      	movs	r2, #0
    b27a:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    b27c:	1d3b      	adds	r3, r7, #4
    b27e:	2200      	movs	r2, #0
    b280:	621a      	str	r2, [r3, #32]
config_tcc.pins.enable_wave_out_pin[0] = true;
    b282:	1d3b      	adds	r3, r7, #4
    b284:	2298      	movs	r2, #152	; 0x98
    b286:	2101      	movs	r1, #1
    b288:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    b28a:	1d3b      	adds	r3, r7, #4
    b28c:	2299      	movs	r2, #153	; 0x99
    b28e:	2101      	movs	r1, #1
    b290:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA12E_TCC2_WO0;
    b292:	1d3b      	adds	r3, r7, #4
    b294:	220c      	movs	r2, #12
    b296:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PA13E_TCC2_WO1;
    b298:	1d3b      	adds	r3, r7, #4
    b29a:	220d      	movs	r2, #13
    b29c:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA12E_TCC2_WO0;
    b29e:	1d3b      	adds	r3, r7, #4
    b2a0:	2204      	movs	r2, #4
    b2a2:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA13E_TCC2_WO1;
    b2a4:	1d3b      	adds	r3, r7, #4
    b2a6:	2204      	movs	r2, #4
    b2a8:	67da      	str	r2, [r3, #124]	; 0x7c

tcc_init(&tcc2, TCC2, &config_tcc);
    b2aa:	1d3a      	adds	r2, r7, #4
    b2ac:	490f      	ldr	r1, [pc, #60]	; (b2ec <configure_LED_PWM+0x18c>)
    b2ae:	4b10      	ldr	r3, [pc, #64]	; (b2f0 <configure_LED_PWM+0x190>)
    b2b0:	0018      	movs	r0, r3
    b2b2:	4b09      	ldr	r3, [pc, #36]	; (b2d8 <configure_LED_PWM+0x178>)
    b2b4:	4798      	blx	r3
tcc_enable(&tcc2);
    b2b6:	4b0e      	ldr	r3, [pc, #56]	; (b2f0 <configure_LED_PWM+0x190>)
    b2b8:	0018      	movs	r0, r3
    b2ba:	4b08      	ldr	r3, [pc, #32]	; (b2dc <configure_LED_PWM+0x17c>)
    b2bc:	4798      	blx	r3
}
    b2be:	46c0      	nop			; (mov r8, r8)
    b2c0:	46bd      	mov	sp, r7
    b2c2:	b02a      	add	sp, #168	; 0xa8
    b2c4:	bd80      	pop	{r7, pc}
    b2c6:	46c0      	nop			; (mov r8, r8)
    b2c8:	42002000 	.word	0x42002000
    b2cc:	00004c29 	.word	0x00004c29
    b2d0:	0000ffff 	.word	0x0000ffff
    b2d4:	2000074c 	.word	0x2000074c
    b2d8:	00005285 	.word	0x00005285
    b2dc:	000093c9 	.word	0x000093c9
    b2e0:	42002400 	.word	0x42002400
    b2e4:	20000f5c 	.word	0x20000f5c
    b2e8:	00008030 	.word	0x00008030
    b2ec:	42002800 	.word	0x42002800
    b2f0:	20000f1c 	.word	0x20000f1c

0000b2f4 <setLeftRGB>:

void setLeftRGB(uint16_t red, uint16_t green, uint16_t blue) {
    b2f4:	b590      	push	{r4, r7, lr}
    b2f6:	b083      	sub	sp, #12
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	0004      	movs	r4, r0
    b2fc:	0008      	movs	r0, r1
    b2fe:	0011      	movs	r1, r2
    b300:	1dbb      	adds	r3, r7, #6
    b302:	1c22      	adds	r2, r4, #0
    b304:	801a      	strh	r2, [r3, #0]
    b306:	1d3b      	adds	r3, r7, #4
    b308:	1c02      	adds	r2, r0, #0
    b30a:	801a      	strh	r2, [r3, #0]
    b30c:	1cbb      	adds	r3, r7, #2
    b30e:	1c0a      	adds	r2, r1, #0
    b310:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.LB = blue;
    b312:	4b12      	ldr	r3, [pc, #72]	; (b35c <setLeftRGB+0x68>)
    b314:	1cba      	adds	r2, r7, #2
    b316:	8812      	ldrh	r2, [r2, #0]
    b318:	809a      	strh	r2, [r3, #4]
	RGB_Ouptut.LG = green;
    b31a:	4b10      	ldr	r3, [pc, #64]	; (b35c <setLeftRGB+0x68>)
    b31c:	1d3a      	adds	r2, r7, #4
    b31e:	8812      	ldrh	r2, [r2, #0]
    b320:	805a      	strh	r2, [r3, #2]
	RGB_Ouptut.LR = red;
    b322:	4b0e      	ldr	r3, [pc, #56]	; (b35c <setLeftRGB+0x68>)
    b324:	1dba      	adds	r2, r7, #6
    b326:	8812      	ldrh	r2, [r2, #0]
    b328:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), red);
    b32a:	1dbb      	adds	r3, r7, #6
    b32c:	881a      	ldrh	r2, [r3, #0]
    b32e:	4b0c      	ldr	r3, [pc, #48]	; (b360 <setLeftRGB+0x6c>)
    b330:	2100      	movs	r1, #0
    b332:	0018      	movs	r0, r3
    b334:	4b0b      	ldr	r3, [pc, #44]	; (b364 <setLeftRGB+0x70>)
    b336:	4798      	blx	r3
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
    b338:	1d3b      	adds	r3, r7, #4
    b33a:	881a      	ldrh	r2, [r3, #0]
    b33c:	4b0a      	ldr	r3, [pc, #40]	; (b368 <setLeftRGB+0x74>)
    b33e:	2101      	movs	r1, #1
    b340:	0018      	movs	r0, r3
    b342:	4b08      	ldr	r3, [pc, #32]	; (b364 <setLeftRGB+0x70>)
    b344:	4798      	blx	r3
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
    b346:	1cbb      	adds	r3, r7, #2
    b348:	881a      	ldrh	r2, [r3, #0]
    b34a:	4b08      	ldr	r3, [pc, #32]	; (b36c <setLeftRGB+0x78>)
    b34c:	2101      	movs	r1, #1
    b34e:	0018      	movs	r0, r3
    b350:	4b04      	ldr	r3, [pc, #16]	; (b364 <setLeftRGB+0x70>)
    b352:	4798      	blx	r3
}
    b354:	46c0      	nop			; (mov r8, r8)
    b356:	46bd      	mov	sp, r7
    b358:	b003      	add	sp, #12
    b35a:	bd90      	pop	{r4, r7, pc}
    b35c:	20000314 	.word	0x20000314
    b360:	2000074c 	.word	0x2000074c
    b364:	0000572d 	.word	0x0000572d
    b368:	20000f1c 	.word	0x20000f1c
    b36c:	20000f5c 	.word	0x20000f5c

0000b370 <setRightRGB>:

void setRightRGB(uint16_t red, uint16_t green, uint16_t blue) {
    b370:	b590      	push	{r4, r7, lr}
    b372:	b083      	sub	sp, #12
    b374:	af00      	add	r7, sp, #0
    b376:	0004      	movs	r4, r0
    b378:	0008      	movs	r0, r1
    b37a:	0011      	movs	r1, r2
    b37c:	1dbb      	adds	r3, r7, #6
    b37e:	1c22      	adds	r2, r4, #0
    b380:	801a      	strh	r2, [r3, #0]
    b382:	1d3b      	adds	r3, r7, #4
    b384:	1c02      	adds	r2, r0, #0
    b386:	801a      	strh	r2, [r3, #0]
    b388:	1cbb      	adds	r3, r7, #2
    b38a:	1c0a      	adds	r2, r1, #0
    b38c:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.RB = blue;
    b38e:	4b12      	ldr	r3, [pc, #72]	; (b3d8 <setRightRGB+0x68>)
    b390:	1cba      	adds	r2, r7, #2
    b392:	8812      	ldrh	r2, [r2, #0]
    b394:	815a      	strh	r2, [r3, #10]
	RGB_Ouptut.RG = green;
    b396:	4b10      	ldr	r3, [pc, #64]	; (b3d8 <setRightRGB+0x68>)
    b398:	1d3a      	adds	r2, r7, #4
    b39a:	8812      	ldrh	r2, [r2, #0]
    b39c:	811a      	strh	r2, [r3, #8]
	RGB_Ouptut.RR = red;
    b39e:	4b0e      	ldr	r3, [pc, #56]	; (b3d8 <setRightRGB+0x68>)
    b3a0:	1dba      	adds	r2, r7, #6
    b3a2:	8812      	ldrh	r2, [r2, #0]
    b3a4:	80da      	strh	r2, [r3, #6]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), red);		
    b3a6:	1dbb      	adds	r3, r7, #6
    b3a8:	881a      	ldrh	r2, [r3, #0]
    b3aa:	4b0c      	ldr	r3, [pc, #48]	; (b3dc <setRightRGB+0x6c>)
    b3ac:	2103      	movs	r1, #3
    b3ae:	0018      	movs	r0, r3
    b3b0:	4b0b      	ldr	r3, [pc, #44]	; (b3e0 <setRightRGB+0x70>)
    b3b2:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), green);
    b3b4:	1d3b      	adds	r3, r7, #4
    b3b6:	881a      	ldrh	r2, [r3, #0]
    b3b8:	4b08      	ldr	r3, [pc, #32]	; (b3dc <setRightRGB+0x6c>)
    b3ba:	2101      	movs	r1, #1
    b3bc:	0018      	movs	r0, r3
    b3be:	4b08      	ldr	r3, [pc, #32]	; (b3e0 <setRightRGB+0x70>)
    b3c0:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), blue);
    b3c2:	1cbb      	adds	r3, r7, #2
    b3c4:	881a      	ldrh	r2, [r3, #0]
    b3c6:	4b05      	ldr	r3, [pc, #20]	; (b3dc <setRightRGB+0x6c>)
    b3c8:	2102      	movs	r1, #2
    b3ca:	0018      	movs	r0, r3
    b3cc:	4b04      	ldr	r3, [pc, #16]	; (b3e0 <setRightRGB+0x70>)
    b3ce:	4798      	blx	r3
}
    b3d0:	46c0      	nop			; (mov r8, r8)
    b3d2:	46bd      	mov	sp, r7
    b3d4:	b003      	add	sp, #12
    b3d6:	bd90      	pop	{r4, r7, pc}
    b3d8:	20000314 	.word	0x20000314
    b3dc:	2000074c 	.word	0x2000074c
    b3e0:	0000572d 	.word	0x0000572d

0000b3e4 <setWhite>:

void setWhite(uint16_t white) {
    b3e4:	b580      	push	{r7, lr}
    b3e6:	b082      	sub	sp, #8
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	0002      	movs	r2, r0
    b3ec:	1dbb      	adds	r3, r7, #6
    b3ee:	801a      	strh	r2, [r3, #0]
	head = white;
    b3f0:	4b08      	ldr	r3, [pc, #32]	; (b414 <setWhite+0x30>)
    b3f2:	1dba      	adds	r2, r7, #6
    b3f4:	8812      	ldrh	r2, [r2, #0]
    b3f6:	801a      	strh	r2, [r3, #0]
	//tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), white);
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0, white); // Changed to non-pwm due to pulse width reading on PPM_IN pin
    b3f8:	1dbb      	adds	r3, r7, #6
    b3fa:	881b      	ldrh	r3, [r3, #0]
    b3fc:	1e5a      	subs	r2, r3, #1
    b3fe:	4193      	sbcs	r3, r2
    b400:	b2db      	uxtb	r3, r3
    b402:	0019      	movs	r1, r3
    b404:	2006      	movs	r0, #6
    b406:	4b04      	ldr	r3, [pc, #16]	; (b418 <setWhite+0x34>)
    b408:	4798      	blx	r3
}
    b40a:	46c0      	nop			; (mov r8, r8)
    b40c:	46bd      	mov	sp, r7
    b40e:	b002      	add	sp, #8
    b410:	bd80      	pop	{r7, pc}
    b412:	46c0      	nop			; (mov r8, r8)
    b414:	200009c2 	.word	0x200009c2
    b418:	00008df5 	.word	0x00008df5

0000b41c <setRed>:

void setRed(uint16_t red) {
    b41c:	b580      	push	{r7, lr}
    b41e:	b082      	sub	sp, #8
    b420:	af00      	add	r7, sp, #0
    b422:	0002      	movs	r2, r0
    b424:	1dbb      	adds	r3, r7, #6
    b426:	801a      	strh	r2, [r3, #0]
	brake = red;
    b428:	4b07      	ldr	r3, [pc, #28]	; (b448 <setRed+0x2c>)
    b42a:	1dba      	adds	r2, r7, #6
    b42c:	8812      	ldrh	r2, [r2, #0]
    b42e:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (0), red);
    b430:	1dbb      	adds	r3, r7, #6
    b432:	881a      	ldrh	r2, [r3, #0]
    b434:	4b05      	ldr	r3, [pc, #20]	; (b44c <setRed+0x30>)
    b436:	2100      	movs	r1, #0
    b438:	0018      	movs	r0, r3
    b43a:	4b05      	ldr	r3, [pc, #20]	; (b450 <setRed+0x34>)
    b43c:	4798      	blx	r3
}
    b43e:	46c0      	nop			; (mov r8, r8)
    b440:	46bd      	mov	sp, r7
    b442:	b002      	add	sp, #8
    b444:	bd80      	pop	{r7, pc}
    b446:	46c0      	nop			; (mov r8, r8)
    b448:	20000312 	.word	0x20000312
    b44c:	20000f1c 	.word	0x20000f1c
    b450:	0000572d 	.word	0x0000572d

0000b454 <setAux>:

void setAux(bool aux) {
    b454:	b580      	push	{r7, lr}
    b456:	b082      	sub	sp, #8
    b458:	af00      	add	r7, sp, #0
    b45a:	0002      	movs	r2, r0
    b45c:	1dfb      	adds	r3, r7, #7
    b45e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(AUX_PIN,aux);
    b460:	1dfb      	adds	r3, r7, #7
    b462:	781b      	ldrb	r3, [r3, #0]
    b464:	0019      	movs	r1, r3
    b466:	2008      	movs	r0, #8
    b468:	4b02      	ldr	r3, [pc, #8]	; (b474 <setAux+0x20>)
    b46a:	4798      	blx	r3
}
    b46c:	46c0      	nop			; (mov r8, r8)
    b46e:	46bd      	mov	sp, r7
    b470:	b002      	add	sp, #8
    b472:	bd80      	pop	{r7, pc}
    b474:	00008df5 	.word	0x00008df5

0000b478 <setCycleColor>:

struct RGB_Vals setCycleColor(uint16_t _upColor, uint16_t _downColor, int _cycle){
    b478:	b580      	push	{r7, lr}
    b47a:	b088      	sub	sp, #32
    b47c:	af00      	add	r7, sp, #0
    b47e:	60f8      	str	r0, [r7, #12]
    b480:	0008      	movs	r0, r1
    b482:	0011      	movs	r1, r2
    b484:	607b      	str	r3, [r7, #4]
    b486:	230a      	movs	r3, #10
    b488:	18fb      	adds	r3, r7, r3
    b48a:	1c02      	adds	r2, r0, #0
    b48c:	801a      	strh	r2, [r3, #0]
    b48e:	2308      	movs	r3, #8
    b490:	18fb      	adds	r3, r7, r3
    b492:	1c0a      	adds	r2, r1, #0
    b494:	801a      	strh	r2, [r3, #0]
	struct RGB_Vals color;
	if(_cycle == 0){
    b496:	687b      	ldr	r3, [r7, #4]
    b498:	2b00      	cmp	r3, #0
    b49a:	d11f      	bne.n	b4dc <setCycleColor+0x64>
		color.LR=_upColor;
    b49c:	2314      	movs	r3, #20
    b49e:	18fb      	adds	r3, r7, r3
    b4a0:	220a      	movs	r2, #10
    b4a2:	18ba      	adds	r2, r7, r2
    b4a4:	8812      	ldrh	r2, [r2, #0]
    b4a6:	801a      	strh	r2, [r3, #0]
		color.LG = 0;
    b4a8:	2314      	movs	r3, #20
    b4aa:	18fb      	adds	r3, r7, r3
    b4ac:	2200      	movs	r2, #0
    b4ae:	805a      	strh	r2, [r3, #2]
		color.LB = _downColor;
    b4b0:	2314      	movs	r3, #20
    b4b2:	18fb      	adds	r3, r7, r3
    b4b4:	2208      	movs	r2, #8
    b4b6:	18ba      	adds	r2, r7, r2
    b4b8:	8812      	ldrh	r2, [r2, #0]
    b4ba:	809a      	strh	r2, [r3, #4]
		color.RR=_upColor;
    b4bc:	2314      	movs	r3, #20
    b4be:	18fb      	adds	r3, r7, r3
    b4c0:	220a      	movs	r2, #10
    b4c2:	18ba      	adds	r2, r7, r2
    b4c4:	8812      	ldrh	r2, [r2, #0]
    b4c6:	80da      	strh	r2, [r3, #6]
		color.RG = 0;
    b4c8:	2314      	movs	r3, #20
    b4ca:	18fb      	adds	r3, r7, r3
    b4cc:	2200      	movs	r2, #0
    b4ce:	811a      	strh	r2, [r3, #8]
		color.RB = _downColor;
    b4d0:	2314      	movs	r3, #20
    b4d2:	18fb      	adds	r3, r7, r3
    b4d4:	2208      	movs	r2, #8
    b4d6:	18ba      	adds	r2, r7, r2
    b4d8:	8812      	ldrh	r2, [r2, #0]
    b4da:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 1){
    b4dc:	687b      	ldr	r3, [r7, #4]
    b4de:	2b01      	cmp	r3, #1
    b4e0:	d11f      	bne.n	b522 <setCycleColor+0xaa>
		color.LR=_downColor;
    b4e2:	2314      	movs	r3, #20
    b4e4:	18fb      	adds	r3, r7, r3
    b4e6:	2208      	movs	r2, #8
    b4e8:	18ba      	adds	r2, r7, r2
    b4ea:	8812      	ldrh	r2, [r2, #0]
    b4ec:	801a      	strh	r2, [r3, #0]
		color.LG = _upColor;
    b4ee:	2314      	movs	r3, #20
    b4f0:	18fb      	adds	r3, r7, r3
    b4f2:	220a      	movs	r2, #10
    b4f4:	18ba      	adds	r2, r7, r2
    b4f6:	8812      	ldrh	r2, [r2, #0]
    b4f8:	805a      	strh	r2, [r3, #2]
		color.LB = 0;
    b4fa:	2314      	movs	r3, #20
    b4fc:	18fb      	adds	r3, r7, r3
    b4fe:	2200      	movs	r2, #0
    b500:	809a      	strh	r2, [r3, #4]
		color.RR=_downColor;
    b502:	2314      	movs	r3, #20
    b504:	18fb      	adds	r3, r7, r3
    b506:	2208      	movs	r2, #8
    b508:	18ba      	adds	r2, r7, r2
    b50a:	8812      	ldrh	r2, [r2, #0]
    b50c:	80da      	strh	r2, [r3, #6]
		color.RG = _upColor;
    b50e:	2314      	movs	r3, #20
    b510:	18fb      	adds	r3, r7, r3
    b512:	220a      	movs	r2, #10
    b514:	18ba      	adds	r2, r7, r2
    b516:	8812      	ldrh	r2, [r2, #0]
    b518:	811a      	strh	r2, [r3, #8]
		color.RB = 0;
    b51a:	2314      	movs	r3, #20
    b51c:	18fb      	adds	r3, r7, r3
    b51e:	2200      	movs	r2, #0
    b520:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 2){
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	2b02      	cmp	r3, #2
    b526:	d11f      	bne.n	b568 <setCycleColor+0xf0>
		color.LR=0;
    b528:	2314      	movs	r3, #20
    b52a:	18fb      	adds	r3, r7, r3
    b52c:	2200      	movs	r2, #0
    b52e:	801a      	strh	r2, [r3, #0]
		color.LG = _downColor;
    b530:	2314      	movs	r3, #20
    b532:	18fb      	adds	r3, r7, r3
    b534:	2208      	movs	r2, #8
    b536:	18ba      	adds	r2, r7, r2
    b538:	8812      	ldrh	r2, [r2, #0]
    b53a:	805a      	strh	r2, [r3, #2]
		color.LB = _upColor;
    b53c:	2314      	movs	r3, #20
    b53e:	18fb      	adds	r3, r7, r3
    b540:	220a      	movs	r2, #10
    b542:	18ba      	adds	r2, r7, r2
    b544:	8812      	ldrh	r2, [r2, #0]
    b546:	809a      	strh	r2, [r3, #4]
		color.RR=0;
    b548:	2314      	movs	r3, #20
    b54a:	18fb      	adds	r3, r7, r3
    b54c:	2200      	movs	r2, #0
    b54e:	80da      	strh	r2, [r3, #6]
		color.RG = _downColor;
    b550:	2314      	movs	r3, #20
    b552:	18fb      	adds	r3, r7, r3
    b554:	2208      	movs	r2, #8
    b556:	18ba      	adds	r2, r7, r2
    b558:	8812      	ldrh	r2, [r2, #0]
    b55a:	811a      	strh	r2, [r3, #8]
		color.RB = _upColor;
    b55c:	2314      	movs	r3, #20
    b55e:	18fb      	adds	r3, r7, r3
    b560:	220a      	movs	r2, #10
    b562:	18ba      	adds	r2, r7, r2
    b564:	8812      	ldrh	r2, [r2, #0]
    b566:	815a      	strh	r2, [r3, #10]
	}
	return color;
    b568:	68fa      	ldr	r2, [r7, #12]
    b56a:	2314      	movs	r3, #20
    b56c:	18fb      	adds	r3, r7, r3
    b56e:	0010      	movs	r0, r2
    b570:	0019      	movs	r1, r3
    b572:	230c      	movs	r3, #12
    b574:	001a      	movs	r2, r3
    b576:	4b03      	ldr	r3, [pc, #12]	; (b584 <setCycleColor+0x10c>)
    b578:	4798      	blx	r3
}
    b57a:	68f8      	ldr	r0, [r7, #12]
    b57c:	46bd      	mov	sp, r7
    b57e:	b008      	add	sp, #32
    b580:	bd80      	pop	{r7, pc}
    b582:	46c0      	nop			; (mov r8, r8)
    b584:	000170dd 	.word	0x000170dd

0000b588 <setConstBases>:

void setConstBases(){
    b588:	b580      	push	{r7, lr}
    b58a:	af00      	add	r7, sp, #0
	ColorBase[MODE_STATIC] = COLOR_STATIC;
    b58c:	4b25      	ldr	r3, [pc, #148]	; (b624 <setConstBases+0x9c>)
    b58e:	2200      	movs	r2, #0
    b590:	701a      	strb	r2, [r3, #0]
	RateBase[MODE_STATIC] = RATE_STATIC;
    b592:	4b25      	ldr	r3, [pc, #148]	; (b628 <setConstBases+0xa0>)
    b594:	2200      	movs	r2, #0
    b596:	701a      	strb	r2, [r3, #0]
	BrightBase[MODE_STATIC] = BRIGHT_STATIC;
    b598:	4b24      	ldr	r3, [pc, #144]	; (b62c <setConstBases+0xa4>)
    b59a:	2200      	movs	r2, #0
    b59c:	701a      	strb	r2, [r3, #0]
	
	ColorBase[MODE_COLOR_CYCLE] = COLOR_COLOR_CYCLE;
    b59e:	4b21      	ldr	r3, [pc, #132]	; (b624 <setConstBases+0x9c>)
    b5a0:	2201      	movs	r2, #1
    b5a2:	705a      	strb	r2, [r3, #1]
	RateBase[MODE_COLOR_CYCLE] = RATE_STATIC;
    b5a4:	4b20      	ldr	r3, [pc, #128]	; (b628 <setConstBases+0xa0>)
    b5a6:	2200      	movs	r2, #0
    b5a8:	705a      	strb	r2, [r3, #1]
	BrightBase[MODE_COLOR_CYCLE] = BRIGHT_STATIC;
    b5aa:	4b20      	ldr	r3, [pc, #128]	; (b62c <setConstBases+0xa4>)
    b5ac:	2200      	movs	r2, #0
    b5ae:	705a      	strb	r2, [r3, #1]
	
	ColorBase[MODE_COMPASS_CYCLE] = COLOR_COMPASS;
    b5b0:	4b1c      	ldr	r3, [pc, #112]	; (b624 <setConstBases+0x9c>)
    b5b2:	2202      	movs	r2, #2
    b5b4:	709a      	strb	r2, [r3, #2]
	RateBase[MODE_COMPASS_CYCLE] = RATE_STATIC;
    b5b6:	4b1c      	ldr	r3, [pc, #112]	; (b628 <setConstBases+0xa0>)
    b5b8:	2200      	movs	r2, #0
    b5ba:	709a      	strb	r2, [r3, #2]
	BrightBase[MODE_COMPASS_CYCLE] = BRIGHT_STATIC;
    b5bc:	4b1b      	ldr	r3, [pc, #108]	; (b62c <setConstBases+0xa4>)
    b5be:	2200      	movs	r2, #0
    b5c0:	709a      	strb	r2, [r3, #2]
	
	ColorBase[MODE_THROTTLE] = COLOR_THROTTLE;
    b5c2:	4b18      	ldr	r3, [pc, #96]	; (b624 <setConstBases+0x9c>)
    b5c4:	2206      	movs	r2, #6
    b5c6:	70da      	strb	r2, [r3, #3]
	RateBase[MODE_THROTTLE] = RATE_STATIC;
    b5c8:	4b17      	ldr	r3, [pc, #92]	; (b628 <setConstBases+0xa0>)
    b5ca:	2200      	movs	r2, #0
    b5cc:	70da      	strb	r2, [r3, #3]
	BrightBase[MODE_THROTTLE] = BRIGHT_STATIC;
    b5ce:	4b17      	ldr	r3, [pc, #92]	; (b62c <setConstBases+0xa4>)
    b5d0:	2200      	movs	r2, #0
    b5d2:	70da      	strb	r2, [r3, #3]
	
	ColorBase[MODE_RPM_CYCLE] = COLOR_COLOR_CYCLE;
    b5d4:	4b13      	ldr	r3, [pc, #76]	; (b624 <setConstBases+0x9c>)
    b5d6:	2201      	movs	r2, #1
    b5d8:	711a      	strb	r2, [r3, #4]
	RateBase[MODE_RPM_CYCLE] = RATE_RPM;
    b5da:	4b13      	ldr	r3, [pc, #76]	; (b628 <setConstBases+0xa0>)
    b5dc:	2203      	movs	r2, #3
    b5de:	711a      	strb	r2, [r3, #4]
	BrightBase[MODE_RPM_CYCLE] = BRIGHT_RPM;
    b5e0:	4b12      	ldr	r3, [pc, #72]	; (b62c <setConstBases+0xa4>)
    b5e2:	2203      	movs	r2, #3
    b5e4:	711a      	strb	r2, [r3, #4]
	
	ColorBase[MODE_RPM_THROTTLE] = COLOR_THROTTLE;
    b5e6:	4b0f      	ldr	r3, [pc, #60]	; (b624 <setConstBases+0x9c>)
    b5e8:	2206      	movs	r2, #6
    b5ea:	715a      	strb	r2, [r3, #5]
	RateBase[MODE_RPM_THROTTLE] = RATE_STATIC;
    b5ec:	4b0e      	ldr	r3, [pc, #56]	; (b628 <setConstBases+0xa0>)
    b5ee:	2200      	movs	r2, #0
    b5f0:	715a      	strb	r2, [r3, #5]
	BrightBase[MODE_RPM_THROTTLE] = BRIGHT_RPM;
    b5f2:	4b0e      	ldr	r3, [pc, #56]	; (b62c <setConstBases+0xa4>)
    b5f4:	2203      	movs	r2, #3
    b5f6:	715a      	strb	r2, [r3, #5]
	
	ColorBase[MODE_X_ACCEL] = COLOR_COLOR_CYCLE;
    b5f8:	4b0a      	ldr	r3, [pc, #40]	; (b624 <setConstBases+0x9c>)
    b5fa:	2201      	movs	r2, #1
    b5fc:	719a      	strb	r2, [r3, #6]
	RateBase[MODE_X_ACCEL] = RATE_STATIC;
    b5fe:	4b0a      	ldr	r3, [pc, #40]	; (b628 <setConstBases+0xa0>)
    b600:	2200      	movs	r2, #0
    b602:	719a      	strb	r2, [r3, #6]
	BrightBase[MODE_X_ACCEL] = BRIGHT_X_ACCEL;
    b604:	4b09      	ldr	r3, [pc, #36]	; (b62c <setConstBases+0xa4>)
    b606:	2205      	movs	r2, #5
    b608:	719a      	strb	r2, [r3, #6]
	
	ColorBase[MODE_Y_ACCEL] = COLOR_Y_ACCEL;
    b60a:	4b06      	ldr	r3, [pc, #24]	; (b624 <setConstBases+0x9c>)
    b60c:	2209      	movs	r2, #9
    b60e:	71da      	strb	r2, [r3, #7]
	RateBase[MODE_Y_ACCEL] = RATE_STATIC;
    b610:	4b05      	ldr	r3, [pc, #20]	; (b628 <setConstBases+0xa0>)
    b612:	2200      	movs	r2, #0
    b614:	71da      	strb	r2, [r3, #7]
	BrightBase[MODE_Y_ACCEL] = BRIGHT_STATIC;
    b616:	4b05      	ldr	r3, [pc, #20]	; (b62c <setConstBases+0xa4>)
    b618:	2200      	movs	r2, #0
    b61a:	71da      	strb	r2, [r3, #7]
}
    b61c:	46c0      	nop			; (mov r8, r8)
    b61e:	46bd      	mov	sp, r7
    b620:	bd80      	pop	{r7, pc}
    b622:	46c0      	nop			; (mov r8, r8)
    b624:	20000070 	.word	0x20000070
    b628:	20000088 	.word	0x20000088
    b62c:	2000007c 	.word	0x2000007c

0000b630 <ERROR_LEDs>:

// Flash the side LEDs red until restart
// 0: Red, 1: Blue, 2:Green, 3: Teal, 4: Yellow, 5:Purple
void ERROR_LEDs(uint8_t error_type){
    b630:	b580      	push	{r7, lr}
    b632:	b086      	sub	sp, #24
    b634:	af00      	add	r7, sp, #0
    b636:	0002      	movs	r2, r0
    b638:	1dfb      	adds	r3, r7, #7
    b63a:	701a      	strb	r2, [r3, #0]
	uint32_t timer = 0;
    b63c:	2300      	movs	r3, #0
    b63e:	60fb      	str	r3, [r7, #12]

	uint16_t tempR = 0, tempG = 0, tempB = 0;
    b640:	2316      	movs	r3, #22
    b642:	18fb      	adds	r3, r7, r3
    b644:	2200      	movs	r2, #0
    b646:	801a      	strh	r2, [r3, #0]
    b648:	2314      	movs	r3, #20
    b64a:	18fb      	adds	r3, r7, r3
    b64c:	2200      	movs	r2, #0
    b64e:	801a      	strh	r2, [r3, #0]
    b650:	2312      	movs	r3, #18
    b652:	18fb      	adds	r3, r7, r3
    b654:	2200      	movs	r2, #0
    b656:	801a      	strh	r2, [r3, #0]
	if(error_type == 0 || error_type == 4  || error_type == 5)
    b658:	1dfb      	adds	r3, r7, #7
    b65a:	781b      	ldrb	r3, [r3, #0]
    b65c:	2b00      	cmp	r3, #0
    b65e:	d007      	beq.n	b670 <ERROR_LEDs+0x40>
    b660:	1dfb      	adds	r3, r7, #7
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	2b04      	cmp	r3, #4
    b666:	d003      	beq.n	b670 <ERROR_LEDs+0x40>
    b668:	1dfb      	adds	r3, r7, #7
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	2b05      	cmp	r3, #5
    b66e:	d104      	bne.n	b67a <ERROR_LEDs+0x4a>
		tempR = 0xFFFF;
    b670:	2316      	movs	r3, #22
    b672:	18fb      	adds	r3, r7, r3
    b674:	2201      	movs	r2, #1
    b676:	4252      	negs	r2, r2
    b678:	801a      	strh	r2, [r3, #0]
	if(error_type >= 2 && error_type <= 4)
    b67a:	1dfb      	adds	r3, r7, #7
    b67c:	781b      	ldrb	r3, [r3, #0]
    b67e:	2b01      	cmp	r3, #1
    b680:	d908      	bls.n	b694 <ERROR_LEDs+0x64>
    b682:	1dfb      	adds	r3, r7, #7
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	2b04      	cmp	r3, #4
    b688:	d804      	bhi.n	b694 <ERROR_LEDs+0x64>
		tempG = 0xFFFF;
    b68a:	2314      	movs	r3, #20
    b68c:	18fb      	adds	r3, r7, r3
    b68e:	2201      	movs	r2, #1
    b690:	4252      	negs	r2, r2
    b692:	801a      	strh	r2, [r3, #0]
	if(error_type == 1 || error_type == 3 || error_type == 5)
    b694:	1dfb      	adds	r3, r7, #7
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	2b01      	cmp	r3, #1
    b69a:	d007      	beq.n	b6ac <ERROR_LEDs+0x7c>
    b69c:	1dfb      	adds	r3, r7, #7
    b69e:	781b      	ldrb	r3, [r3, #0]
    b6a0:	2b03      	cmp	r3, #3
    b6a2:	d003      	beq.n	b6ac <ERROR_LEDs+0x7c>
    b6a4:	1dfb      	adds	r3, r7, #7
    b6a6:	781b      	ldrb	r3, [r3, #0]
    b6a8:	2b05      	cmp	r3, #5
    b6aa:	d104      	bne.n	b6b6 <ERROR_LEDs+0x86>
		tempB = 0xFFFF;
    b6ac:	2312      	movs	r3, #18
    b6ae:	18fb      	adds	r3, r7, r3
    b6b0:	2201      	movs	r2, #1
    b6b2:	4252      	negs	r2, r2
    b6b4:	801a      	strh	r2, [r3, #0]

	while(1){
		setLeftRGB(0,0,0);
    b6b6:	2200      	movs	r2, #0
    b6b8:	2100      	movs	r1, #0
    b6ba:	2000      	movs	r0, #0
    b6bc:	4b2e      	ldr	r3, [pc, #184]	; (b778 <ERROR_LEDs+0x148>)
    b6be:	4798      	blx	r3
		setRightRGB(0,0,0);
    b6c0:	2200      	movs	r2, #0
    b6c2:	2100      	movs	r1, #0
    b6c4:	2000      	movs	r0, #0
    b6c6:	4b2d      	ldr	r3, [pc, #180]	; (b77c <ERROR_LEDs+0x14c>)
    b6c8:	4798      	blx	r3
		
		setRed(0);
    b6ca:	2000      	movs	r0, #0
    b6cc:	4b2c      	ldr	r3, [pc, #176]	; (b780 <ERROR_LEDs+0x150>)
    b6ce:	4798      	blx	r3
		setWhite(0);
    b6d0:	2000      	movs	r0, #0
    b6d2:	4b2c      	ldr	r3, [pc, #176]	; (b784 <ERROR_LEDs+0x154>)
    b6d4:	4798      	blx	r3
		setAux(0);
    b6d6:	2000      	movs	r0, #0
    b6d8:	4b2b      	ldr	r3, [pc, #172]	; (b788 <ERROR_LEDs+0x158>)
    b6da:	4798      	blx	r3

		while(millis() - timer < 1000) {
    b6dc:	e004      	b.n	b6e8 <ERROR_LEDs+0xb8>
			check_time(&timer);
    b6de:	230c      	movs	r3, #12
    b6e0:	18fb      	adds	r3, r7, r3
    b6e2:	0018      	movs	r0, r3
    b6e4:	4b29      	ldr	r3, [pc, #164]	; (b78c <ERROR_LEDs+0x15c>)
    b6e6:	4798      	blx	r3
		while(millis() - timer < 1000) {
    b6e8:	4b29      	ldr	r3, [pc, #164]	; (b790 <ERROR_LEDs+0x160>)
    b6ea:	4798      	blx	r3
    b6ec:	0002      	movs	r2, r0
    b6ee:	68fb      	ldr	r3, [r7, #12]
    b6f0:	1ad3      	subs	r3, r2, r3
    b6f2:	4a28      	ldr	r2, [pc, #160]	; (b794 <ERROR_LEDs+0x164>)
    b6f4:	4293      	cmp	r3, r2
    b6f6:	d9f2      	bls.n	b6de <ERROR_LEDs+0xae>
		}
		timer = millis();
    b6f8:	4b25      	ldr	r3, [pc, #148]	; (b790 <ERROR_LEDs+0x160>)
    b6fa:	4798      	blx	r3
    b6fc:	0003      	movs	r3, r0
    b6fe:	60fb      	str	r3, [r7, #12]

		setLeftRGB(tempR,tempG,tempB);
    b700:	2312      	movs	r3, #18
    b702:	18fb      	adds	r3, r7, r3
    b704:	881a      	ldrh	r2, [r3, #0]
    b706:	2314      	movs	r3, #20
    b708:	18fb      	adds	r3, r7, r3
    b70a:	8819      	ldrh	r1, [r3, #0]
    b70c:	2316      	movs	r3, #22
    b70e:	18fb      	adds	r3, r7, r3
    b710:	881b      	ldrh	r3, [r3, #0]
    b712:	0018      	movs	r0, r3
    b714:	4b18      	ldr	r3, [pc, #96]	; (b778 <ERROR_LEDs+0x148>)
    b716:	4798      	blx	r3
		setRightRGB(tempR,tempG,tempB);
    b718:	2312      	movs	r3, #18
    b71a:	18fb      	adds	r3, r7, r3
    b71c:	881a      	ldrh	r2, [r3, #0]
    b71e:	2314      	movs	r3, #20
    b720:	18fb      	adds	r3, r7, r3
    b722:	8819      	ldrh	r1, [r3, #0]
    b724:	2316      	movs	r3, #22
    b726:	18fb      	adds	r3, r7, r3
    b728:	881b      	ldrh	r3, [r3, #0]
    b72a:	0018      	movs	r0, r3
    b72c:	4b13      	ldr	r3, [pc, #76]	; (b77c <ERROR_LEDs+0x14c>)
    b72e:	4798      	blx	r3
		
		setRed(0xFFFF);
    b730:	4b19      	ldr	r3, [pc, #100]	; (b798 <ERROR_LEDs+0x168>)
    b732:	0018      	movs	r0, r3
    b734:	4b12      	ldr	r3, [pc, #72]	; (b780 <ERROR_LEDs+0x150>)
    b736:	4798      	blx	r3
		setWhite(0xFFFF);
    b738:	4b17      	ldr	r3, [pc, #92]	; (b798 <ERROR_LEDs+0x168>)
    b73a:	0018      	movs	r0, r3
    b73c:	4b11      	ldr	r3, [pc, #68]	; (b784 <ERROR_LEDs+0x154>)
    b73e:	4798      	blx	r3
		setAux(1);
    b740:	2001      	movs	r0, #1
    b742:	4b11      	ldr	r3, [pc, #68]	; (b788 <ERROR_LEDs+0x158>)
    b744:	4798      	blx	r3

		while(millis() - timer < 250) {
    b746:	e004      	b.n	b752 <ERROR_LEDs+0x122>
			check_time(&timer);
    b748:	230c      	movs	r3, #12
    b74a:	18fb      	adds	r3, r7, r3
    b74c:	0018      	movs	r0, r3
    b74e:	4b0f      	ldr	r3, [pc, #60]	; (b78c <ERROR_LEDs+0x15c>)
    b750:	4798      	blx	r3
		while(millis() - timer < 250) {
    b752:	4b0f      	ldr	r3, [pc, #60]	; (b790 <ERROR_LEDs+0x160>)
    b754:	4798      	blx	r3
    b756:	0002      	movs	r2, r0
    b758:	68fb      	ldr	r3, [r7, #12]
    b75a:	1ad3      	subs	r3, r2, r3
    b75c:	2bf9      	cmp	r3, #249	; 0xf9
    b75e:	d9f3      	bls.n	b748 <ERROR_LEDs+0x118>
		}
		timer = millis();
    b760:	4b0b      	ldr	r3, [pc, #44]	; (b790 <ERROR_LEDs+0x160>)
    b762:	4798      	blx	r3
    b764:	0003      	movs	r3, r0
    b766:	60fb      	str	r3, [r7, #12]
    b768:	2312      	movs	r3, #18
    b76a:	18fb      	adds	r3, r7, r3
    b76c:	2212      	movs	r2, #18
    b76e:	18ba      	adds	r2, r7, r2
    b770:	8812      	ldrh	r2, [r2, #0]
    b772:	801a      	strh	r2, [r3, #0]
		setLeftRGB(0,0,0);
    b774:	e79f      	b.n	b6b6 <ERROR_LEDs+0x86>
    b776:	46c0      	nop			; (mov r8, r8)
    b778:	0000b2f5 	.word	0x0000b2f5
    b77c:	0000b371 	.word	0x0000b371
    b780:	0000b41d 	.word	0x0000b41d
    b784:	0000b3e5 	.word	0x0000b3e5
    b788:	0000b455 	.word	0x0000b455
    b78c:	0000b139 	.word	0x0000b139
    b790:	0000b109 	.word	0x0000b109
    b794:	000003e7 	.word	0x000003e7
    b798:	0000ffff 	.word	0x0000ffff

0000b79c <TurnSignal>:
}

// true = left    false = right
uint32_t turnTimer = 0;
uint16_t turnOutput = 0;
void TurnSignal(bool direction){
    b79c:	b580      	push	{r7, lr}
    b79e:	b082      	sub	sp, #8
    b7a0:	af00      	add	r7, sp, #0
    b7a2:	0002      	movs	r2, r0
    b7a4:	1dfb      	adds	r3, r7, #7
    b7a6:	701a      	strb	r2, [r3, #0]

	check_time(&turnTimer);
    b7a8:	4b29      	ldr	r3, [pc, #164]	; (b850 <TurnSignal+0xb4>)
    b7aa:	0018      	movs	r0, r3
    b7ac:	4b29      	ldr	r3, [pc, #164]	; (b854 <TurnSignal+0xb8>)
    b7ae:	4798      	blx	r3
	if(turnOutput == 0x0 && (millis() - turnTimer >= TURN_OFF_TIME)){
    b7b0:	4b29      	ldr	r3, [pc, #164]	; (b858 <TurnSignal+0xbc>)
    b7b2:	881b      	ldrh	r3, [r3, #0]
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d113      	bne.n	b7e0 <TurnSignal+0x44>
    b7b8:	4b28      	ldr	r3, [pc, #160]	; (b85c <TurnSignal+0xc0>)
    b7ba:	4798      	blx	r3
    b7bc:	0002      	movs	r2, r0
    b7be:	4b24      	ldr	r3, [pc, #144]	; (b850 <TurnSignal+0xb4>)
    b7c0:	681b      	ldr	r3, [r3, #0]
    b7c2:	1ad2      	subs	r2, r2, r3
    b7c4:	2390      	movs	r3, #144	; 0x90
    b7c6:	33ff      	adds	r3, #255	; 0xff
    b7c8:	429a      	cmp	r2, r3
    b7ca:	d909      	bls.n	b7e0 <TurnSignal+0x44>
		turnOutput = 0xFFFF;
    b7cc:	4b22      	ldr	r3, [pc, #136]	; (b858 <TurnSignal+0xbc>)
    b7ce:	2201      	movs	r2, #1
    b7d0:	4252      	negs	r2, r2
    b7d2:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    b7d4:	4b21      	ldr	r3, [pc, #132]	; (b85c <TurnSignal+0xc0>)
    b7d6:	4798      	blx	r3
    b7d8:	0002      	movs	r2, r0
    b7da:	4b1d      	ldr	r3, [pc, #116]	; (b850 <TurnSignal+0xb4>)
    b7dc:	601a      	str	r2, [r3, #0]
    b7de:	e014      	b.n	b80a <TurnSignal+0x6e>
	} else if(turnOutput == 0xFFFF && (millis() - turnTimer >= TURN_ON_TIME)){
    b7e0:	4b1d      	ldr	r3, [pc, #116]	; (b858 <TurnSignal+0xbc>)
    b7e2:	881b      	ldrh	r3, [r3, #0]
    b7e4:	4a1e      	ldr	r2, [pc, #120]	; (b860 <TurnSignal+0xc4>)
    b7e6:	4293      	cmp	r3, r2
    b7e8:	d10f      	bne.n	b80a <TurnSignal+0x6e>
    b7ea:	4b1c      	ldr	r3, [pc, #112]	; (b85c <TurnSignal+0xc0>)
    b7ec:	4798      	blx	r3
    b7ee:	0002      	movs	r2, r0
    b7f0:	4b17      	ldr	r3, [pc, #92]	; (b850 <TurnSignal+0xb4>)
    b7f2:	681b      	ldr	r3, [r3, #0]
    b7f4:	1ad3      	subs	r3, r2, r3
    b7f6:	2bf9      	cmp	r3, #249	; 0xf9
    b7f8:	d907      	bls.n	b80a <TurnSignal+0x6e>
		turnOutput = 0;
    b7fa:	4b17      	ldr	r3, [pc, #92]	; (b858 <TurnSignal+0xbc>)
    b7fc:	2200      	movs	r2, #0
    b7fe:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    b800:	4b16      	ldr	r3, [pc, #88]	; (b85c <TurnSignal+0xc0>)
    b802:	4798      	blx	r3
    b804:	0002      	movs	r2, r0
    b806:	4b12      	ldr	r3, [pc, #72]	; (b850 <TurnSignal+0xb4>)
    b808:	601a      	str	r2, [r3, #0]
	}

	if(direction == true){
    b80a:	1dfb      	adds	r3, r7, #7
    b80c:	781b      	ldrb	r3, [r3, #0]
    b80e:	2b00      	cmp	r3, #0
    b810:	d00d      	beq.n	b82e <TurnSignal+0x92>
		setLeftRGB(turnOutput,turnOutput,0);
    b812:	4b11      	ldr	r3, [pc, #68]	; (b858 <TurnSignal+0xbc>)
    b814:	8818      	ldrh	r0, [r3, #0]
    b816:	4b10      	ldr	r3, [pc, #64]	; (b858 <TurnSignal+0xbc>)
    b818:	881b      	ldrh	r3, [r3, #0]
    b81a:	2200      	movs	r2, #0
    b81c:	0019      	movs	r1, r3
    b81e:	4b11      	ldr	r3, [pc, #68]	; (b864 <TurnSignal+0xc8>)
    b820:	4798      	blx	r3
		setRightRGB(0,0,0);
    b822:	2200      	movs	r2, #0
    b824:	2100      	movs	r1, #0
    b826:	2000      	movs	r0, #0
    b828:	4b0f      	ldr	r3, [pc, #60]	; (b868 <TurnSignal+0xcc>)
    b82a:	4798      	blx	r3
	} else {
		setLeftRGB(0,0,0);
		setRightRGB(turnOutput,turnOutput,0);
	}
}
    b82c:	e00c      	b.n	b848 <TurnSignal+0xac>
		setLeftRGB(0,0,0);
    b82e:	2200      	movs	r2, #0
    b830:	2100      	movs	r1, #0
    b832:	2000      	movs	r0, #0
    b834:	4b0b      	ldr	r3, [pc, #44]	; (b864 <TurnSignal+0xc8>)
    b836:	4798      	blx	r3
		setRightRGB(turnOutput,turnOutput,0);
    b838:	4b07      	ldr	r3, [pc, #28]	; (b858 <TurnSignal+0xbc>)
    b83a:	8818      	ldrh	r0, [r3, #0]
    b83c:	4b06      	ldr	r3, [pc, #24]	; (b858 <TurnSignal+0xbc>)
    b83e:	881b      	ldrh	r3, [r3, #0]
    b840:	2200      	movs	r2, #0
    b842:	0019      	movs	r1, r3
    b844:	4b08      	ldr	r3, [pc, #32]	; (b868 <TurnSignal+0xcc>)
    b846:	4798      	blx	r3
}
    b848:	46c0      	nop			; (mov r8, r8)
    b84a:	46bd      	mov	sp, r7
    b84c:	b002      	add	sp, #8
    b84e:	bd80      	pop	{r7, pc}
    b850:	20000334 	.word	0x20000334
    b854:	0000b139 	.word	0x0000b139
    b858:	20000338 	.word	0x20000338
    b85c:	0000b109 	.word	0x0000b109
    b860:	0000ffff 	.word	0x0000ffff
    b864:	0000b2f5 	.word	0x0000b2f5
    b868:	0000b371 	.word	0x0000b371

0000b86c <crc16>:
	0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
	0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
	0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

uint16_t crc16(uint8_t *buf, uint16_t len) {
    b86c:	b580      	push	{r7, lr}
    b86e:	b084      	sub	sp, #16
    b870:	af00      	add	r7, sp, #0
    b872:	6078      	str	r0, [r7, #4]
    b874:	000a      	movs	r2, r1
    b876:	1cbb      	adds	r3, r7, #2
    b878:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint16_t cksum = 0;
    b87a:	230c      	movs	r3, #12
    b87c:	18fb      	adds	r3, r7, r3
    b87e:	2200      	movs	r2, #0
    b880:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
    b882:	230e      	movs	r3, #14
    b884:	18fb      	adds	r3, r7, r3
    b886:	2200      	movs	r2, #0
    b888:	801a      	strh	r2, [r3, #0]
    b88a:	e021      	b.n	b8d0 <crc16+0x64>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
    b88c:	230c      	movs	r3, #12
    b88e:	18fb      	adds	r3, r7, r3
    b890:	881b      	ldrh	r3, [r3, #0]
    b892:	0a1b      	lsrs	r3, r3, #8
    b894:	b29b      	uxth	r3, r3
    b896:	0019      	movs	r1, r3
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	1c5a      	adds	r2, r3, #1
    b89c:	607a      	str	r2, [r7, #4]
    b89e:	781b      	ldrb	r3, [r3, #0]
    b8a0:	404b      	eors	r3, r1
    b8a2:	22ff      	movs	r2, #255	; 0xff
    b8a4:	401a      	ands	r2, r3
    b8a6:	4b11      	ldr	r3, [pc, #68]	; (b8ec <crc16+0x80>)
    b8a8:	0052      	lsls	r2, r2, #1
    b8aa:	5ad3      	ldrh	r3, [r2, r3]
    b8ac:	b21a      	sxth	r2, r3
    b8ae:	230c      	movs	r3, #12
    b8b0:	18fb      	adds	r3, r7, r3
    b8b2:	881b      	ldrh	r3, [r3, #0]
    b8b4:	021b      	lsls	r3, r3, #8
    b8b6:	b21b      	sxth	r3, r3
    b8b8:	4053      	eors	r3, r2
    b8ba:	b21a      	sxth	r2, r3
    b8bc:	230c      	movs	r3, #12
    b8be:	18fb      	adds	r3, r7, r3
    b8c0:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
    b8c2:	230e      	movs	r3, #14
    b8c4:	18fb      	adds	r3, r7, r3
    b8c6:	881a      	ldrh	r2, [r3, #0]
    b8c8:	230e      	movs	r3, #14
    b8ca:	18fb      	adds	r3, r7, r3
    b8cc:	3201      	adds	r2, #1
    b8ce:	801a      	strh	r2, [r3, #0]
    b8d0:	230e      	movs	r3, #14
    b8d2:	18fa      	adds	r2, r7, r3
    b8d4:	1cbb      	adds	r3, r7, #2
    b8d6:	8812      	ldrh	r2, [r2, #0]
    b8d8:	881b      	ldrh	r3, [r3, #0]
    b8da:	429a      	cmp	r2, r3
    b8dc:	d3d6      	bcc.n	b88c <crc16+0x20>
	}
	return cksum;
    b8de:	230c      	movs	r3, #12
    b8e0:	18fb      	adds	r3, r7, r3
    b8e2:	881b      	ldrh	r3, [r3, #0]
}
    b8e4:	0018      	movs	r0, r3
    b8e6:	46bd      	mov	sp, r7
    b8e8:	b004      	add	sp, #16
    b8ea:	bd80      	pop	{r7, pc}
    b8ec:	00017428 	.word	0x00017428

0000b8f0 <configure_vesc_usart>:
float buffer_get_float32_auto(uint8_t *buffer, int8_t index);


// Configure SERCOM5 as USART for VESC
void configure_vesc_usart()
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b092      	sub	sp, #72	; 0x48
    b8f4:	af00      	add	r7, sp, #0
	uint32_t baud = 0;
    b8f6:	2300      	movs	r3, #0
    b8f8:	647b      	str	r3, [r7, #68]	; 0x44
	if(UART_baud == BAUD_9600)
    b8fa:	4b28      	ldr	r3, [pc, #160]	; (b99c <configure_vesc_usart+0xac>)
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	2b00      	cmp	r3, #0
    b900:	d103      	bne.n	b90a <configure_vesc_usart+0x1a>
		baud = 9600;
    b902:	2396      	movs	r3, #150	; 0x96
    b904:	019b      	lsls	r3, r3, #6
    b906:	647b      	str	r3, [r7, #68]	; 0x44
    b908:	e016      	b.n	b938 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_38400)
    b90a:	4b24      	ldr	r3, [pc, #144]	; (b99c <configure_vesc_usart+0xac>)
    b90c:	781b      	ldrb	r3, [r3, #0]
    b90e:	2b01      	cmp	r3, #1
    b910:	d103      	bne.n	b91a <configure_vesc_usart+0x2a>
		baud = 38400;
    b912:	2396      	movs	r3, #150	; 0x96
    b914:	021b      	lsls	r3, r3, #8
    b916:	647b      	str	r3, [r7, #68]	; 0x44
    b918:	e00e      	b.n	b938 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_57600)
    b91a:	4b20      	ldr	r3, [pc, #128]	; (b99c <configure_vesc_usart+0xac>)
    b91c:	781b      	ldrb	r3, [r3, #0]
    b91e:	2b02      	cmp	r3, #2
    b920:	d103      	bne.n	b92a <configure_vesc_usart+0x3a>
		baud = 57600;
    b922:	23e1      	movs	r3, #225	; 0xe1
    b924:	021b      	lsls	r3, r3, #8
    b926:	647b      	str	r3, [r7, #68]	; 0x44
    b928:	e006      	b.n	b938 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_115200)
    b92a:	4b1c      	ldr	r3, [pc, #112]	; (b99c <configure_vesc_usart+0xac>)
    b92c:	781b      	ldrb	r3, [r3, #0]
    b92e:	2b03      	cmp	r3, #3
    b930:	d102      	bne.n	b938 <configure_vesc_usart+0x48>
		baud = 115200;
    b932:	23e1      	movs	r3, #225	; 0xe1
    b934:	025b      	lsls	r3, r3, #9
    b936:	647b      	str	r3, [r7, #68]	; 0x44

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    b938:	1d3b      	adds	r3, r7, #4
    b93a:	0018      	movs	r0, r3
    b93c:	4b18      	ldr	r3, [pc, #96]	; (b9a0 <configure_vesc_usart+0xb0>)
    b93e:	4798      	blx	r3
	config_usart.baudrate    = baud;
    b940:	1d3b      	adds	r3, r7, #4
    b942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    b944:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    b946:	1d3b      	adds	r3, r7, #4
    b948:	2280      	movs	r2, #128	; 0x80
    b94a:	0352      	lsls	r2, r2, #13
    b94c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    b94e:	1d3b      	adds	r3, r7, #4
    b950:	4a14      	ldr	r2, [pc, #80]	; (b9a4 <configure_vesc_usart+0xb4>)
    b952:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    b954:	1d3b      	adds	r3, r7, #4
    b956:	4a14      	ldr	r2, [pc, #80]	; (b9a8 <configure_vesc_usart+0xb8>)
    b958:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    b95a:	1d3b      	adds	r3, r7, #4
    b95c:	2201      	movs	r2, #1
    b95e:	4252      	negs	r2, r2
    b960:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    b962:	1d3b      	adds	r3, r7, #4
    b964:	2201      	movs	r2, #1
    b966:	4252      	negs	r2, r2
    b968:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&vesc_usart,SERCOM1, &config_usart) != STATUS_OK)
    b96a:	46c0      	nop			; (mov r8, r8)
    b96c:	1d3a      	adds	r2, r7, #4
    b96e:	490f      	ldr	r1, [pc, #60]	; (b9ac <configure_vesc_usart+0xbc>)
    b970:	4b0f      	ldr	r3, [pc, #60]	; (b9b0 <configure_vesc_usart+0xc0>)
    b972:	0018      	movs	r0, r3
    b974:	4b0f      	ldr	r3, [pc, #60]	; (b9b4 <configure_vesc_usart+0xc4>)
    b976:	4798      	blx	r3
    b978:	1e03      	subs	r3, r0, #0
    b97a:	d1f7      	bne.n	b96c <configure_vesc_usart+0x7c>
	{}
	usart_enable(&vesc_usart);
    b97c:	4b0c      	ldr	r3, [pc, #48]	; (b9b0 <configure_vesc_usart+0xc0>)
    b97e:	0018      	movs	r0, r3
    b980:	4b0d      	ldr	r3, [pc, #52]	; (b9b8 <configure_vesc_usart+0xc8>)
    b982:	4798      	blx	r3

	latest_vesc_vals.FW_VERSION_MAJOR = 0;
    b984:	4b0d      	ldr	r3, [pc, #52]	; (b9bc <configure_vesc_usart+0xcc>)
    b986:	2234      	movs	r2, #52	; 0x34
    b988:	2100      	movs	r1, #0
    b98a:	5499      	strb	r1, [r3, r2]
	latest_vesc_vals.FW_VERSION_MINOR = 0;
    b98c:	4b0b      	ldr	r3, [pc, #44]	; (b9bc <configure_vesc_usart+0xcc>)
    b98e:	2235      	movs	r2, #53	; 0x35
    b990:	2100      	movs	r1, #0
    b992:	5499      	strb	r1, [r3, r2]
}
    b994:	46c0      	nop			; (mov r8, r8)
    b996:	46bd      	mov	sp, r7
    b998:	b012      	add	sp, #72	; 0x48
    b99a:	bd80      	pop	{r7, pc}
    b99c:	20000311 	.word	0x20000311
    b9a0:	0000918d 	.word	0x0000918d
    b9a4:	00100002 	.word	0x00100002
    b9a8:	00110002 	.word	0x00110002
    b9ac:	42000c00 	.word	0x42000c00
    b9b0:	20000718 	.word	0x20000718
    b9b4:	000060e5 	.word	0x000060e5
    b9b8:	0000924d 	.word	0x0000924d
    b9bc:	20000958 	.word	0x20000958

0000b9c0 <send_packet>:
	VESC_UART_BYTES_CRC,
	VESC_UART_BYTES_STOP,
};

uint8_t vesc_tx_buff[MAX_PAYLOAD_LEN+6];
void send_packet(struct uart_packet send_pak){
    b9c0:	b084      	sub	sp, #16
    b9c2:	b590      	push	{r4, r7, lr}
    b9c4:	b085      	sub	sp, #20
    b9c6:	af00      	add	r7, sp, #0
    b9c8:	2420      	movs	r4, #32
    b9ca:	193c      	adds	r4, r7, r4
    b9cc:	6020      	str	r0, [r4, #0]
    b9ce:	6061      	str	r1, [r4, #4]
    b9d0:	60a2      	str	r2, [r4, #8]
    b9d2:	60e3      	str	r3, [r4, #12]
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
    b9d4:	4b49      	ldr	r3, [pc, #292]	; (bafc <send_packet+0x13c>)
    b9d6:	4798      	blx	r3
    b9d8:	0002      	movs	r2, r0
    b9da:	4b49      	ldr	r3, [pc, #292]	; (bb00 <send_packet+0x140>)
    b9dc:	681b      	ldr	r3, [r3, #0]
    b9de:	1ad2      	subs	r2, r2, r3
    b9e0:	4b48      	ldr	r3, [pc, #288]	; (bb04 <send_packet+0x144>)
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	429a      	cmp	r2, r3
    b9e6:	d902      	bls.n	b9ee <send_packet+0x2e>
		HOLD_FOR_REPLY = false;
    b9e8:	4b47      	ldr	r3, [pc, #284]	; (bb08 <send_packet+0x148>)
    b9ea:	2200      	movs	r2, #0
    b9ec:	701a      	strb	r2, [r3, #0]

	send_pak.stop = 0x03;
    b9ee:	2320      	movs	r3, #32
    b9f0:	18fa      	adds	r2, r7, r3
    b9f2:	4b46      	ldr	r3, [pc, #280]	; (bb0c <send_packet+0x14c>)
    b9f4:	2103      	movs	r1, #3
    b9f6:	54d1      	strb	r1, [r2, r3]

	if(!HOLD_FOR_REPLY){
    b9f8:	4b43      	ldr	r3, [pc, #268]	; (bb08 <send_packet+0x148>)
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	2201      	movs	r2, #1
    b9fe:	4053      	eors	r3, r2
    ba00:	b2db      	uxtb	r3, r3
    ba02:	2b00      	cmp	r3, #0
    ba04:	d100      	bne.n	ba08 <send_packet+0x48>
    ba06:	e071      	b.n	baec <send_packet+0x12c>
		uint16_t payload_len = 0;
    ba08:	230e      	movs	r3, #14
    ba0a:	18fb      	adds	r3, r7, r3
    ba0c:	2200      	movs	r2, #0
    ba0e:	801a      	strh	r2, [r3, #0]
		if(send_pak.start == 0x03)
    ba10:	2320      	movs	r3, #32
    ba12:	18fb      	adds	r3, r7, r3
    ba14:	781b      	ldrb	r3, [r3, #0]
    ba16:	2b03      	cmp	r3, #3
    ba18:	d10e      	bne.n	ba38 <send_packet+0x78>
			payload_len = ((send_pak.len[0]<<8)|send_pak.len[1]);
    ba1a:	2320      	movs	r3, #32
    ba1c:	18fb      	adds	r3, r7, r3
    ba1e:	785b      	ldrb	r3, [r3, #1]
    ba20:	021b      	lsls	r3, r3, #8
    ba22:	b21a      	sxth	r2, r3
    ba24:	2320      	movs	r3, #32
    ba26:	18fb      	adds	r3, r7, r3
    ba28:	789b      	ldrb	r3, [r3, #2]
    ba2a:	b21b      	sxth	r3, r3
    ba2c:	4313      	orrs	r3, r2
    ba2e:	b21a      	sxth	r2, r3
    ba30:	230e      	movs	r3, #14
    ba32:	18fb      	adds	r3, r7, r3
    ba34:	801a      	strh	r2, [r3, #0]
    ba36:	e005      	b.n	ba44 <send_packet+0x84>
		else
			payload_len = send_pak.len[0];
    ba38:	2320      	movs	r3, #32
    ba3a:	18fb      	adds	r3, r7, r3
    ba3c:	785a      	ldrb	r2, [r3, #1]
    ba3e:	230e      	movs	r3, #14
    ba40:	18fb      	adds	r3, r7, r3
    ba42:	801a      	strh	r2, [r3, #0]
		
		uint16_t message_len = (send_pak.start+payload_len+3);
    ba44:	2320      	movs	r3, #32
    ba46:	18fb      	adds	r3, r7, r3
    ba48:	781b      	ldrb	r3, [r3, #0]
    ba4a:	b29a      	uxth	r2, r3
    ba4c:	230e      	movs	r3, #14
    ba4e:	18fb      	adds	r3, r7, r3
    ba50:	881b      	ldrh	r3, [r3, #0]
    ba52:	18d3      	adds	r3, r2, r3
    ba54:	b29a      	uxth	r2, r3
    ba56:	1cbb      	adds	r3, r7, #2
    ba58:	3203      	adds	r2, #3
    ba5a:	801a      	strh	r2, [r3, #0]
		uint8_t *send_ptr = &(send_pak.start);
    ba5c:	2320      	movs	r3, #32
    ba5e:	18fb      	adds	r3, r7, r3
    ba60:	60bb      	str	r3, [r7, #8]

		for(size_t i=0;i<message_len;i++){
    ba62:	2300      	movs	r3, #0
    ba64:	607b      	str	r3, [r7, #4]
    ba66:	e02d      	b.n	bac4 <send_packet+0x104>
			if(send_pak.start==0x02 && i==2)
    ba68:	2320      	movs	r3, #32
    ba6a:	18fb      	adds	r3, r7, r3
    ba6c:	781b      	ldrb	r3, [r3, #0]
    ba6e:	2b02      	cmp	r3, #2
    ba70:	d106      	bne.n	ba80 <send_packet+0xc0>
    ba72:	687b      	ldr	r3, [r7, #4]
    ba74:	2b02      	cmp	r3, #2
    ba76:	d103      	bne.n	ba80 <send_packet+0xc0>
			send_ptr+=1;
    ba78:	68bb      	ldr	r3, [r7, #8]
    ba7a:	3301      	adds	r3, #1
    ba7c:	60bb      	str	r3, [r7, #8]
    ba7e:	e014      	b.n	baaa <send_packet+0xea>
			else if(i==payload_len+send_pak.start)
    ba80:	230e      	movs	r3, #14
    ba82:	18fb      	adds	r3, r7, r3
    ba84:	881b      	ldrh	r3, [r3, #0]
    ba86:	2220      	movs	r2, #32
    ba88:	18ba      	adds	r2, r7, r2
    ba8a:	7812      	ldrb	r2, [r2, #0]
    ba8c:	189b      	adds	r3, r3, r2
    ba8e:	001a      	movs	r2, r3
    ba90:	687b      	ldr	r3, [r7, #4]
    ba92:	429a      	cmp	r2, r3
    ba94:	d109      	bne.n	baaa <send_packet+0xea>
			send_ptr+=(MAX_PAYLOAD_LEN-payload_len);
    ba96:	230e      	movs	r3, #14
    ba98:	18fb      	adds	r3, r7, r3
    ba9a:	881b      	ldrh	r3, [r3, #0]
    ba9c:	2280      	movs	r2, #128	; 0x80
    ba9e:	0092      	lsls	r2, r2, #2
    baa0:	1ad3      	subs	r3, r2, r3
    baa2:	001a      	movs	r2, r3
    baa4:	68bb      	ldr	r3, [r7, #8]
    baa6:	189b      	adds	r3, r3, r2
    baa8:	60bb      	str	r3, [r7, #8]

			vesc_tx_buff[i] = *send_ptr;
    baaa:	68bb      	ldr	r3, [r7, #8]
    baac:	7819      	ldrb	r1, [r3, #0]
    baae:	4a18      	ldr	r2, [pc, #96]	; (bb10 <send_packet+0x150>)
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	18d3      	adds	r3, r2, r3
    bab4:	1c0a      	adds	r2, r1, #0
    bab6:	701a      	strb	r2, [r3, #0]

			send_ptr++;
    bab8:	68bb      	ldr	r3, [r7, #8]
    baba:	3301      	adds	r3, #1
    babc:	60bb      	str	r3, [r7, #8]
		for(size_t i=0;i<message_len;i++){
    babe:	687b      	ldr	r3, [r7, #4]
    bac0:	3301      	adds	r3, #1
    bac2:	607b      	str	r3, [r7, #4]
    bac4:	1cbb      	adds	r3, r7, #2
    bac6:	881a      	ldrh	r2, [r3, #0]
    bac8:	687b      	ldr	r3, [r7, #4]
    baca:	429a      	cmp	r2, r3
    bacc:	d8cc      	bhi.n	ba68 <send_packet+0xa8>
		}
		
		HOLD_FOR_REPLY = true;
    bace:	4b0e      	ldr	r3, [pc, #56]	; (bb08 <send_packet+0x148>)
    bad0:	2201      	movs	r2, #1
    bad2:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_wait(&vesc_usart, vesc_tx_buff, message_len);
    bad4:	1cbb      	adds	r3, r7, #2
    bad6:	881a      	ldrh	r2, [r3, #0]
    bad8:	490d      	ldr	r1, [pc, #52]	; (bb10 <send_packet+0x150>)
    bada:	4b0e      	ldr	r3, [pc, #56]	; (bb14 <send_packet+0x154>)
    badc:	0018      	movs	r0, r3
    bade:	4b0e      	ldr	r3, [pc, #56]	; (bb18 <send_packet+0x158>)
    bae0:	4798      	blx	r3
		vesc_usart_time = millis();
    bae2:	4b06      	ldr	r3, [pc, #24]	; (bafc <send_packet+0x13c>)
    bae4:	4798      	blx	r3
    bae6:	0002      	movs	r2, r0
    bae8:	4b05      	ldr	r3, [pc, #20]	; (bb00 <send_packet+0x140>)
    baea:	601a      	str	r2, [r3, #0]
	}
}
    baec:	46c0      	nop			; (mov r8, r8)
    baee:	46bd      	mov	sp, r7
    baf0:	b005      	add	sp, #20
    baf2:	bc90      	pop	{r4, r7}
    baf4:	bc08      	pop	{r3}
    baf6:	b004      	add	sp, #16
    baf8:	4718      	bx	r3
    bafa:	46c0      	nop			; (mov r8, r8)
    bafc:	0000b109 	.word	0x0000b109
    bb00:	20000364 	.word	0x20000364
    bb04:	200000ac 	.word	0x200000ac
    bb08:	20000368 	.word	0x20000368
    bb0c:	00000205 	.word	0x00000205
    bb10:	20000510 	.word	0x20000510
    bb14:	20000718 	.word	0x20000718
    bb18:	000063bd 	.word	0x000063bd

0000bb1c <process_recieved_packet>:

void process_recieved_packet(){
    bb1c:	b580      	push	{r7, lr}
    bb1e:	b082      	sub	sp, #8
    bb20:	af00      	add	r7, sp, #0
		uint8_t packet_id = vesc_revieve_packet.payload[0];
    bb22:	1dfb      	adds	r3, r7, #7
    bb24:	4abc      	ldr	r2, [pc, #752]	; (be18 <process_recieved_packet+0x2fc>)
    bb26:	78d2      	ldrb	r2, [r2, #3]
    bb28:	701a      	strb	r2, [r3, #0]
		if(packet_id == COMM_FW_VERSION){ // Bytes are the same for all FW's
    bb2a:	4bbc      	ldr	r3, [pc, #752]	; (be1c <process_recieved_packet+0x300>)
    bb2c:	781b      	ldrb	r3, [r3, #0]
    bb2e:	1dfa      	adds	r2, r7, #7
    bb30:	7812      	ldrb	r2, [r2, #0]
    bb32:	429a      	cmp	r2, r3
    bb34:	d10b      	bne.n	bb4e <process_recieved_packet+0x32>
			latest_vesc_vals.FW_VERSION_MAJOR = (uint16_t)vesc_revieve_packet.payload[1];
    bb36:	4bb8      	ldr	r3, [pc, #736]	; (be18 <process_recieved_packet+0x2fc>)
    bb38:	7919      	ldrb	r1, [r3, #4]
    bb3a:	4bb9      	ldr	r3, [pc, #740]	; (be20 <process_recieved_packet+0x304>)
    bb3c:	2234      	movs	r2, #52	; 0x34
    bb3e:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.FW_VERSION_MINOR = (uint16_t)vesc_revieve_packet.payload[2];
    bb40:	4bb5      	ldr	r3, [pc, #724]	; (be18 <process_recieved_packet+0x2fc>)
    bb42:	7959      	ldrb	r1, [r3, #5]
    bb44:	4bb6      	ldr	r3, [pc, #728]	; (be20 <process_recieved_packet+0x304>)
    bb46:	2235      	movs	r2, #53	; 0x35
    bb48:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
		} else if(packet_id == COMM_GET_IMU_DATA){ 
			// TODO
	}
}
    bb4a:	f000 ff52 	bl	c9f2 <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_VALUES){
    bb4e:	4bb5      	ldr	r3, [pc, #724]	; (be24 <process_recieved_packet+0x308>)
    bb50:	781b      	ldrb	r3, [r3, #0]
    bb52:	1dfa      	adds	r2, r7, #7
    bb54:	7812      	ldrb	r2, [r2, #0]
    bb56:	429a      	cmp	r2, r3
    bb58:	d000      	beq.n	bb5c <process_recieved_packet+0x40>
    bb5a:	e17f      	b.n	be5c <process_recieved_packet+0x340>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[GET_VALUES_FET_TEMP] << 8) | vesc_revieve_packet.payload[GET_VALUES_FET_TEMP+1];
    bb5c:	4bb2      	ldr	r3, [pc, #712]	; (be28 <process_recieved_packet+0x30c>)
    bb5e:	781b      	ldrb	r3, [r3, #0]
    bb60:	001a      	movs	r2, r3
    bb62:	4bad      	ldr	r3, [pc, #692]	; (be18 <process_recieved_packet+0x2fc>)
    bb64:	189b      	adds	r3, r3, r2
    bb66:	78db      	ldrb	r3, [r3, #3]
    bb68:	021b      	lsls	r3, r3, #8
    bb6a:	b21a      	sxth	r2, r3
    bb6c:	4bae      	ldr	r3, [pc, #696]	; (be28 <process_recieved_packet+0x30c>)
    bb6e:	781b      	ldrb	r3, [r3, #0]
    bb70:	3301      	adds	r3, #1
    bb72:	49a9      	ldr	r1, [pc, #676]	; (be18 <process_recieved_packet+0x2fc>)
    bb74:	18cb      	adds	r3, r1, r3
    bb76:	78db      	ldrb	r3, [r3, #3]
    bb78:	b21b      	sxth	r3, r3
    bb7a:	4313      	orrs	r3, r2
    bb7c:	b21a      	sxth	r2, r3
    bb7e:	4ba8      	ldr	r3, [pc, #672]	; (be20 <process_recieved_packet+0x304>)
    bb80:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+3];
    bb82:	4baa      	ldr	r3, [pc, #680]	; (be2c <process_recieved_packet+0x310>)
    bb84:	781b      	ldrb	r3, [r3, #0]
    bb86:	001a      	movs	r2, r3
    bb88:	4ba3      	ldr	r3, [pc, #652]	; (be18 <process_recieved_packet+0x2fc>)
    bb8a:	189b      	adds	r3, r3, r2
    bb8c:	78db      	ldrb	r3, [r3, #3]
    bb8e:	061a      	lsls	r2, r3, #24
    bb90:	4ba6      	ldr	r3, [pc, #664]	; (be2c <process_recieved_packet+0x310>)
    bb92:	781b      	ldrb	r3, [r3, #0]
    bb94:	3301      	adds	r3, #1
    bb96:	49a0      	ldr	r1, [pc, #640]	; (be18 <process_recieved_packet+0x2fc>)
    bb98:	18cb      	adds	r3, r1, r3
    bb9a:	78db      	ldrb	r3, [r3, #3]
    bb9c:	041b      	lsls	r3, r3, #16
    bb9e:	431a      	orrs	r2, r3
    bba0:	4ba2      	ldr	r3, [pc, #648]	; (be2c <process_recieved_packet+0x310>)
    bba2:	781b      	ldrb	r3, [r3, #0]
    bba4:	3302      	adds	r3, #2
    bba6:	499c      	ldr	r1, [pc, #624]	; (be18 <process_recieved_packet+0x2fc>)
    bba8:	18cb      	adds	r3, r1, r3
    bbaa:	78db      	ldrb	r3, [r3, #3]
    bbac:	021b      	lsls	r3, r3, #8
    bbae:	4313      	orrs	r3, r2
    bbb0:	4a9e      	ldr	r2, [pc, #632]	; (be2c <process_recieved_packet+0x310>)
    bbb2:	7812      	ldrb	r2, [r2, #0]
    bbb4:	3203      	adds	r2, #3
    bbb6:	4998      	ldr	r1, [pc, #608]	; (be18 <process_recieved_packet+0x2fc>)
    bbb8:	188a      	adds	r2, r1, r2
    bbba:	78d2      	ldrb	r2, [r2, #3]
    bbbc:	431a      	orrs	r2, r3
    bbbe:	4b98      	ldr	r3, [pc, #608]	; (be20 <process_recieved_packet+0x304>)
    bbc0:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[GET_VALUES_IN_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_CURR+3];
    bbc2:	4b9b      	ldr	r3, [pc, #620]	; (be30 <process_recieved_packet+0x314>)
    bbc4:	781b      	ldrb	r3, [r3, #0]
    bbc6:	001a      	movs	r2, r3
    bbc8:	4b93      	ldr	r3, [pc, #588]	; (be18 <process_recieved_packet+0x2fc>)
    bbca:	189b      	adds	r3, r3, r2
    bbcc:	78db      	ldrb	r3, [r3, #3]
    bbce:	061a      	lsls	r2, r3, #24
    bbd0:	4b97      	ldr	r3, [pc, #604]	; (be30 <process_recieved_packet+0x314>)
    bbd2:	781b      	ldrb	r3, [r3, #0]
    bbd4:	3301      	adds	r3, #1
    bbd6:	4990      	ldr	r1, [pc, #576]	; (be18 <process_recieved_packet+0x2fc>)
    bbd8:	18cb      	adds	r3, r1, r3
    bbda:	78db      	ldrb	r3, [r3, #3]
    bbdc:	041b      	lsls	r3, r3, #16
    bbde:	431a      	orrs	r2, r3
    bbe0:	4b93      	ldr	r3, [pc, #588]	; (be30 <process_recieved_packet+0x314>)
    bbe2:	781b      	ldrb	r3, [r3, #0]
    bbe4:	3302      	adds	r3, #2
    bbe6:	498c      	ldr	r1, [pc, #560]	; (be18 <process_recieved_packet+0x2fc>)
    bbe8:	18cb      	adds	r3, r1, r3
    bbea:	78db      	ldrb	r3, [r3, #3]
    bbec:	021b      	lsls	r3, r3, #8
    bbee:	4313      	orrs	r3, r2
    bbf0:	4a8f      	ldr	r2, [pc, #572]	; (be30 <process_recieved_packet+0x314>)
    bbf2:	7812      	ldrb	r2, [r2, #0]
    bbf4:	3203      	adds	r2, #3
    bbf6:	4988      	ldr	r1, [pc, #544]	; (be18 <process_recieved_packet+0x2fc>)
    bbf8:	188a      	adds	r2, r1, r2
    bbfa:	78d2      	ldrb	r2, [r2, #3]
    bbfc:	431a      	orrs	r2, r3
    bbfe:	4b88      	ldr	r3, [pc, #544]	; (be20 <process_recieved_packet+0x304>)
    bc00:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[GET_VALUES_DUTY] << 8) | vesc_revieve_packet.payload[GET_VALUES_DUTY+1];
    bc02:	4b8c      	ldr	r3, [pc, #560]	; (be34 <process_recieved_packet+0x318>)
    bc04:	781b      	ldrb	r3, [r3, #0]
    bc06:	001a      	movs	r2, r3
    bc08:	4b83      	ldr	r3, [pc, #524]	; (be18 <process_recieved_packet+0x2fc>)
    bc0a:	189b      	adds	r3, r3, r2
    bc0c:	78db      	ldrb	r3, [r3, #3]
    bc0e:	021b      	lsls	r3, r3, #8
    bc10:	b21a      	sxth	r2, r3
    bc12:	4b88      	ldr	r3, [pc, #544]	; (be34 <process_recieved_packet+0x318>)
    bc14:	781b      	ldrb	r3, [r3, #0]
    bc16:	3301      	adds	r3, #1
    bc18:	497f      	ldr	r1, [pc, #508]	; (be18 <process_recieved_packet+0x2fc>)
    bc1a:	18cb      	adds	r3, r1, r3
    bc1c:	78db      	ldrb	r3, [r3, #3]
    bc1e:	b21b      	sxth	r3, r3
    bc20:	4313      	orrs	r3, r2
    bc22:	b21a      	sxth	r2, r3
    bc24:	4b7e      	ldr	r3, [pc, #504]	; (be20 <process_recieved_packet+0x304>)
    bc26:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[GET_VALUES_RPM] << 24) | (vesc_revieve_packet.payload[GET_VALUES_RPM+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_RPM+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_RPM+3];
    bc28:	4b83      	ldr	r3, [pc, #524]	; (be38 <process_recieved_packet+0x31c>)
    bc2a:	781b      	ldrb	r3, [r3, #0]
    bc2c:	001a      	movs	r2, r3
    bc2e:	4b7a      	ldr	r3, [pc, #488]	; (be18 <process_recieved_packet+0x2fc>)
    bc30:	189b      	adds	r3, r3, r2
    bc32:	78db      	ldrb	r3, [r3, #3]
    bc34:	061a      	lsls	r2, r3, #24
    bc36:	4b80      	ldr	r3, [pc, #512]	; (be38 <process_recieved_packet+0x31c>)
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	3301      	adds	r3, #1
    bc3c:	4976      	ldr	r1, [pc, #472]	; (be18 <process_recieved_packet+0x2fc>)
    bc3e:	18cb      	adds	r3, r1, r3
    bc40:	78db      	ldrb	r3, [r3, #3]
    bc42:	041b      	lsls	r3, r3, #16
    bc44:	431a      	orrs	r2, r3
    bc46:	4b7c      	ldr	r3, [pc, #496]	; (be38 <process_recieved_packet+0x31c>)
    bc48:	781b      	ldrb	r3, [r3, #0]
    bc4a:	3302      	adds	r3, #2
    bc4c:	4972      	ldr	r1, [pc, #456]	; (be18 <process_recieved_packet+0x2fc>)
    bc4e:	18cb      	adds	r3, r1, r3
    bc50:	78db      	ldrb	r3, [r3, #3]
    bc52:	021b      	lsls	r3, r3, #8
    bc54:	4313      	orrs	r3, r2
    bc56:	4a78      	ldr	r2, [pc, #480]	; (be38 <process_recieved_packet+0x31c>)
    bc58:	7812      	ldrb	r2, [r2, #0]
    bc5a:	3203      	adds	r2, #3
    bc5c:	496e      	ldr	r1, [pc, #440]	; (be18 <process_recieved_packet+0x2fc>)
    bc5e:	188a      	adds	r2, r1, r2
    bc60:	78d2      	ldrb	r2, [r2, #3]
    bc62:	431a      	orrs	r2, r3
    bc64:	4b6e      	ldr	r3, [pc, #440]	; (be20 <process_recieved_packet+0x304>)
    bc66:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[GET_VALUES_IN_VOLT] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_VOLT+1];
    bc68:	4b74      	ldr	r3, [pc, #464]	; (be3c <process_recieved_packet+0x320>)
    bc6a:	781b      	ldrb	r3, [r3, #0]
    bc6c:	001a      	movs	r2, r3
    bc6e:	4b6a      	ldr	r3, [pc, #424]	; (be18 <process_recieved_packet+0x2fc>)
    bc70:	189b      	adds	r3, r3, r2
    bc72:	78db      	ldrb	r3, [r3, #3]
    bc74:	021b      	lsls	r3, r3, #8
    bc76:	b21a      	sxth	r2, r3
    bc78:	4b70      	ldr	r3, [pc, #448]	; (be3c <process_recieved_packet+0x320>)
    bc7a:	781b      	ldrb	r3, [r3, #0]
    bc7c:	3301      	adds	r3, #1
    bc7e:	4966      	ldr	r1, [pc, #408]	; (be18 <process_recieved_packet+0x2fc>)
    bc80:	18cb      	adds	r3, r1, r3
    bc82:	78db      	ldrb	r3, [r3, #3]
    bc84:	b21b      	sxth	r3, r3
    bc86:	4313      	orrs	r3, r2
    bc88:	b21a      	sxth	r2, r3
    bc8a:	4b65      	ldr	r3, [pc, #404]	; (be20 <process_recieved_packet+0x304>)
    bc8c:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[GET_VALUES_AH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_USED+3])/100;
    bc8e:	4b6c      	ldr	r3, [pc, #432]	; (be40 <process_recieved_packet+0x324>)
    bc90:	781b      	ldrb	r3, [r3, #0]
    bc92:	001a      	movs	r2, r3
    bc94:	4b60      	ldr	r3, [pc, #384]	; (be18 <process_recieved_packet+0x2fc>)
    bc96:	189b      	adds	r3, r3, r2
    bc98:	78db      	ldrb	r3, [r3, #3]
    bc9a:	061a      	lsls	r2, r3, #24
    bc9c:	4b68      	ldr	r3, [pc, #416]	; (be40 <process_recieved_packet+0x324>)
    bc9e:	781b      	ldrb	r3, [r3, #0]
    bca0:	3301      	adds	r3, #1
    bca2:	495d      	ldr	r1, [pc, #372]	; (be18 <process_recieved_packet+0x2fc>)
    bca4:	18cb      	adds	r3, r1, r3
    bca6:	78db      	ldrb	r3, [r3, #3]
    bca8:	041b      	lsls	r3, r3, #16
    bcaa:	431a      	orrs	r2, r3
    bcac:	4b64      	ldr	r3, [pc, #400]	; (be40 <process_recieved_packet+0x324>)
    bcae:	781b      	ldrb	r3, [r3, #0]
    bcb0:	3302      	adds	r3, #2
    bcb2:	4959      	ldr	r1, [pc, #356]	; (be18 <process_recieved_packet+0x2fc>)
    bcb4:	18cb      	adds	r3, r1, r3
    bcb6:	78db      	ldrb	r3, [r3, #3]
    bcb8:	021b      	lsls	r3, r3, #8
    bcba:	4313      	orrs	r3, r2
    bcbc:	4a60      	ldr	r2, [pc, #384]	; (be40 <process_recieved_packet+0x324>)
    bcbe:	7812      	ldrb	r2, [r2, #0]
    bcc0:	3203      	adds	r2, #3
    bcc2:	4955      	ldr	r1, [pc, #340]	; (be18 <process_recieved_packet+0x2fc>)
    bcc4:	188a      	adds	r2, r1, r2
    bcc6:	78d2      	ldrb	r2, [r2, #3]
    bcc8:	431a      	orrs	r2, r3
    bcca:	4b5e      	ldr	r3, [pc, #376]	; (be44 <process_recieved_packet+0x328>)
    bccc:	2164      	movs	r1, #100	; 0x64
    bcce:	0010      	movs	r0, r2
    bcd0:	4798      	blx	r3
    bcd2:	0003      	movs	r3, r0
    bcd4:	001a      	movs	r2, r3
    bcd6:	4b52      	ldr	r3, [pc, #328]	; (be20 <process_recieved_packet+0x304>)
    bcd8:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_AH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+3])/100;
    bcda:	4b5b      	ldr	r3, [pc, #364]	; (be48 <process_recieved_packet+0x32c>)
    bcdc:	781b      	ldrb	r3, [r3, #0]
    bcde:	001a      	movs	r2, r3
    bce0:	4b4d      	ldr	r3, [pc, #308]	; (be18 <process_recieved_packet+0x2fc>)
    bce2:	189b      	adds	r3, r3, r2
    bce4:	78db      	ldrb	r3, [r3, #3]
    bce6:	061a      	lsls	r2, r3, #24
    bce8:	4b57      	ldr	r3, [pc, #348]	; (be48 <process_recieved_packet+0x32c>)
    bcea:	781b      	ldrb	r3, [r3, #0]
    bcec:	3301      	adds	r3, #1
    bcee:	494a      	ldr	r1, [pc, #296]	; (be18 <process_recieved_packet+0x2fc>)
    bcf0:	18cb      	adds	r3, r1, r3
    bcf2:	78db      	ldrb	r3, [r3, #3]
    bcf4:	041b      	lsls	r3, r3, #16
    bcf6:	431a      	orrs	r2, r3
    bcf8:	4b53      	ldr	r3, [pc, #332]	; (be48 <process_recieved_packet+0x32c>)
    bcfa:	781b      	ldrb	r3, [r3, #0]
    bcfc:	3302      	adds	r3, #2
    bcfe:	4946      	ldr	r1, [pc, #280]	; (be18 <process_recieved_packet+0x2fc>)
    bd00:	18cb      	adds	r3, r1, r3
    bd02:	78db      	ldrb	r3, [r3, #3]
    bd04:	021b      	lsls	r3, r3, #8
    bd06:	4313      	orrs	r3, r2
    bd08:	4a4f      	ldr	r2, [pc, #316]	; (be48 <process_recieved_packet+0x32c>)
    bd0a:	7812      	ldrb	r2, [r2, #0]
    bd0c:	3203      	adds	r2, #3
    bd0e:	4942      	ldr	r1, [pc, #264]	; (be18 <process_recieved_packet+0x2fc>)
    bd10:	188a      	adds	r2, r1, r2
    bd12:	78d2      	ldrb	r2, [r2, #3]
    bd14:	431a      	orrs	r2, r3
    bd16:	4b4b      	ldr	r3, [pc, #300]	; (be44 <process_recieved_packet+0x328>)
    bd18:	2164      	movs	r1, #100	; 0x64
    bd1a:	0010      	movs	r0, r2
    bd1c:	4798      	blx	r3
    bd1e:	0003      	movs	r3, r0
    bd20:	001a      	movs	r2, r3
    bd22:	4b3f      	ldr	r3, [pc, #252]	; (be20 <process_recieved_packet+0x304>)
    bd24:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[GET_VALUES_WH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_USED+3])/100;
    bd26:	4b49      	ldr	r3, [pc, #292]	; (be4c <process_recieved_packet+0x330>)
    bd28:	781b      	ldrb	r3, [r3, #0]
    bd2a:	001a      	movs	r2, r3
    bd2c:	4b3a      	ldr	r3, [pc, #232]	; (be18 <process_recieved_packet+0x2fc>)
    bd2e:	189b      	adds	r3, r3, r2
    bd30:	78db      	ldrb	r3, [r3, #3]
    bd32:	061a      	lsls	r2, r3, #24
    bd34:	4b45      	ldr	r3, [pc, #276]	; (be4c <process_recieved_packet+0x330>)
    bd36:	781b      	ldrb	r3, [r3, #0]
    bd38:	3301      	adds	r3, #1
    bd3a:	4937      	ldr	r1, [pc, #220]	; (be18 <process_recieved_packet+0x2fc>)
    bd3c:	18cb      	adds	r3, r1, r3
    bd3e:	78db      	ldrb	r3, [r3, #3]
    bd40:	041b      	lsls	r3, r3, #16
    bd42:	431a      	orrs	r2, r3
    bd44:	4b41      	ldr	r3, [pc, #260]	; (be4c <process_recieved_packet+0x330>)
    bd46:	781b      	ldrb	r3, [r3, #0]
    bd48:	3302      	adds	r3, #2
    bd4a:	4933      	ldr	r1, [pc, #204]	; (be18 <process_recieved_packet+0x2fc>)
    bd4c:	18cb      	adds	r3, r1, r3
    bd4e:	78db      	ldrb	r3, [r3, #3]
    bd50:	021b      	lsls	r3, r3, #8
    bd52:	4313      	orrs	r3, r2
    bd54:	4a3d      	ldr	r2, [pc, #244]	; (be4c <process_recieved_packet+0x330>)
    bd56:	7812      	ldrb	r2, [r2, #0]
    bd58:	3203      	adds	r2, #3
    bd5a:	492f      	ldr	r1, [pc, #188]	; (be18 <process_recieved_packet+0x2fc>)
    bd5c:	188a      	adds	r2, r1, r2
    bd5e:	78d2      	ldrb	r2, [r2, #3]
    bd60:	431a      	orrs	r2, r3
    bd62:	4b38      	ldr	r3, [pc, #224]	; (be44 <process_recieved_packet+0x328>)
    bd64:	2164      	movs	r1, #100	; 0x64
    bd66:	0010      	movs	r0, r2
    bd68:	4798      	blx	r3
    bd6a:	0003      	movs	r3, r0
    bd6c:	001a      	movs	r2, r3
    bd6e:	4b2c      	ldr	r3, [pc, #176]	; (be20 <process_recieved_packet+0x304>)
    bd70:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_WH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+3])/100;
    bd72:	4b37      	ldr	r3, [pc, #220]	; (be50 <process_recieved_packet+0x334>)
    bd74:	781b      	ldrb	r3, [r3, #0]
    bd76:	001a      	movs	r2, r3
    bd78:	4b27      	ldr	r3, [pc, #156]	; (be18 <process_recieved_packet+0x2fc>)
    bd7a:	189b      	adds	r3, r3, r2
    bd7c:	78db      	ldrb	r3, [r3, #3]
    bd7e:	061a      	lsls	r2, r3, #24
    bd80:	4b33      	ldr	r3, [pc, #204]	; (be50 <process_recieved_packet+0x334>)
    bd82:	781b      	ldrb	r3, [r3, #0]
    bd84:	3301      	adds	r3, #1
    bd86:	4924      	ldr	r1, [pc, #144]	; (be18 <process_recieved_packet+0x2fc>)
    bd88:	18cb      	adds	r3, r1, r3
    bd8a:	78db      	ldrb	r3, [r3, #3]
    bd8c:	041b      	lsls	r3, r3, #16
    bd8e:	431a      	orrs	r2, r3
    bd90:	4b2f      	ldr	r3, [pc, #188]	; (be50 <process_recieved_packet+0x334>)
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	3302      	adds	r3, #2
    bd96:	4920      	ldr	r1, [pc, #128]	; (be18 <process_recieved_packet+0x2fc>)
    bd98:	18cb      	adds	r3, r1, r3
    bd9a:	78db      	ldrb	r3, [r3, #3]
    bd9c:	021b      	lsls	r3, r3, #8
    bd9e:	4313      	orrs	r3, r2
    bda0:	4a2b      	ldr	r2, [pc, #172]	; (be50 <process_recieved_packet+0x334>)
    bda2:	7812      	ldrb	r2, [r2, #0]
    bda4:	3203      	adds	r2, #3
    bda6:	491c      	ldr	r1, [pc, #112]	; (be18 <process_recieved_packet+0x2fc>)
    bda8:	188a      	adds	r2, r1, r2
    bdaa:	78d2      	ldrb	r2, [r2, #3]
    bdac:	431a      	orrs	r2, r3
    bdae:	4b25      	ldr	r3, [pc, #148]	; (be44 <process_recieved_packet+0x328>)
    bdb0:	2164      	movs	r1, #100	; 0x64
    bdb2:	0010      	movs	r0, r2
    bdb4:	4798      	blx	r3
    bdb6:	0003      	movs	r3, r0
    bdb8:	001a      	movs	r2, r3
    bdba:	4b19      	ldr	r3, [pc, #100]	; (be20 <process_recieved_packet+0x304>)
    bdbc:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[GET_VALUES_TACH] << 24) | (vesc_revieve_packet.payload[GET_VALUES_TACH+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_TACH+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_TACH+2];
    bdbe:	4b25      	ldr	r3, [pc, #148]	; (be54 <process_recieved_packet+0x338>)
    bdc0:	781b      	ldrb	r3, [r3, #0]
    bdc2:	001a      	movs	r2, r3
    bdc4:	4b14      	ldr	r3, [pc, #80]	; (be18 <process_recieved_packet+0x2fc>)
    bdc6:	189b      	adds	r3, r3, r2
    bdc8:	78db      	ldrb	r3, [r3, #3]
    bdca:	061a      	lsls	r2, r3, #24
    bdcc:	4b21      	ldr	r3, [pc, #132]	; (be54 <process_recieved_packet+0x338>)
    bdce:	781b      	ldrb	r3, [r3, #0]
    bdd0:	3301      	adds	r3, #1
    bdd2:	4911      	ldr	r1, [pc, #68]	; (be18 <process_recieved_packet+0x2fc>)
    bdd4:	18cb      	adds	r3, r1, r3
    bdd6:	78db      	ldrb	r3, [r3, #3]
    bdd8:	041b      	lsls	r3, r3, #16
    bdda:	431a      	orrs	r2, r3
    bddc:	4b1d      	ldr	r3, [pc, #116]	; (be54 <process_recieved_packet+0x338>)
    bdde:	781b      	ldrb	r3, [r3, #0]
    bde0:	3302      	adds	r3, #2
    bde2:	490d      	ldr	r1, [pc, #52]	; (be18 <process_recieved_packet+0x2fc>)
    bde4:	18cb      	adds	r3, r1, r3
    bde6:	78db      	ldrb	r3, [r3, #3]
    bde8:	021b      	lsls	r3, r3, #8
    bdea:	4313      	orrs	r3, r2
    bdec:	4a19      	ldr	r2, [pc, #100]	; (be54 <process_recieved_packet+0x338>)
    bdee:	7812      	ldrb	r2, [r2, #0]
    bdf0:	3202      	adds	r2, #2
    bdf2:	4909      	ldr	r1, [pc, #36]	; (be18 <process_recieved_packet+0x2fc>)
    bdf4:	188a      	adds	r2, r1, r2
    bdf6:	78d2      	ldrb	r2, [r2, #3]
    bdf8:	431a      	orrs	r2, r3
    bdfa:	4b09      	ldr	r3, [pc, #36]	; (be20 <process_recieved_packet+0x304>)
    bdfc:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[GET_VALUES_FAULT];
    bdfe:	4b16      	ldr	r3, [pc, #88]	; (be58 <process_recieved_packet+0x33c>)
    be00:	781b      	ldrb	r3, [r3, #0]
    be02:	001a      	movs	r2, r3
    be04:	4b04      	ldr	r3, [pc, #16]	; (be18 <process_recieved_packet+0x2fc>)
    be06:	189b      	adds	r3, r3, r2
    be08:	78db      	ldrb	r3, [r3, #3]
    be0a:	b259      	sxtb	r1, r3
    be0c:	4b04      	ldr	r3, [pc, #16]	; (be20 <process_recieved_packet+0x304>)
    be0e:	222c      	movs	r2, #44	; 0x2c
    be10:	5499      	strb	r1, [r3, r2]
}
    be12:	f000 fdee 	bl	c9f2 <process_recieved_packet+0xed6>
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	20000ce0 	.word	0x20000ce0
    be1c:	2000033a 	.word	0x2000033a
    be20:	20000958 	.word	0x20000958
    be24:	2000033b 	.word	0x2000033b
    be28:	20000343 	.word	0x20000343
    be2c:	20000344 	.word	0x20000344
    be30:	20000345 	.word	0x20000345
    be34:	20000346 	.word	0x20000346
    be38:	20000347 	.word	0x20000347
    be3c:	20000348 	.word	0x20000348
    be40:	20000349 	.word	0x20000349
    be44:	00014215 	.word	0x00014215
    be48:	2000034a 	.word	0x2000034a
    be4c:	2000034b 	.word	0x2000034b
    be50:	2000034c 	.word	0x2000034c
    be54:	2000034d 	.word	0x2000034d
    be58:	2000034e 	.word	0x2000034e
		} else if(packet_id == COMM_GET_MCCONF){
    be5c:	4bfd      	ldr	r3, [pc, #1012]	; (c254 <process_recieved_packet+0x738>)
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	1dfa      	adds	r2, r7, #7
    be62:	7812      	ldrb	r2, [r2, #0]
    be64:	429a      	cmp	r2, r3
    be66:	d001      	beq.n	be6c <process_recieved_packet+0x350>
    be68:	f000 fc58 	bl	c71c <process_recieved_packet+0xc00>
			if(esc_fw == FW_2v18){
    be6c:	4bfa      	ldr	r3, [pc, #1000]	; (c258 <process_recieved_packet+0x73c>)
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	2b00      	cmp	r3, #0
    be72:	d000      	beq.n	be76 <process_recieved_packet+0x35a>
    be74:	e32a      	b.n	c4cc <process_recieved_packet+0x9b0>
				mcconf_limits.motor_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+3])/1000;
    be76:	4bf9      	ldr	r3, [pc, #996]	; (c25c <process_recieved_packet+0x740>)
    be78:	781b      	ldrb	r3, [r3, #0]
    be7a:	001a      	movs	r2, r3
    be7c:	4bf8      	ldr	r3, [pc, #992]	; (c260 <process_recieved_packet+0x744>)
    be7e:	189b      	adds	r3, r3, r2
    be80:	78db      	ldrb	r3, [r3, #3]
    be82:	061a      	lsls	r2, r3, #24
    be84:	4bf5      	ldr	r3, [pc, #980]	; (c25c <process_recieved_packet+0x740>)
    be86:	781b      	ldrb	r3, [r3, #0]
    be88:	3301      	adds	r3, #1
    be8a:	49f5      	ldr	r1, [pc, #980]	; (c260 <process_recieved_packet+0x744>)
    be8c:	18cb      	adds	r3, r1, r3
    be8e:	78db      	ldrb	r3, [r3, #3]
    be90:	041b      	lsls	r3, r3, #16
    be92:	431a      	orrs	r2, r3
    be94:	4bf1      	ldr	r3, [pc, #964]	; (c25c <process_recieved_packet+0x740>)
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	3302      	adds	r3, #2
    be9a:	49f1      	ldr	r1, [pc, #964]	; (c260 <process_recieved_packet+0x744>)
    be9c:	18cb      	adds	r3, r1, r3
    be9e:	78db      	ldrb	r3, [r3, #3]
    bea0:	021b      	lsls	r3, r3, #8
    bea2:	4313      	orrs	r3, r2
    bea4:	4aed      	ldr	r2, [pc, #948]	; (c25c <process_recieved_packet+0x740>)
    bea6:	7812      	ldrb	r2, [r2, #0]
    bea8:	3203      	adds	r2, #3
    beaa:	49ed      	ldr	r1, [pc, #948]	; (c260 <process_recieved_packet+0x744>)
    beac:	188a      	adds	r2, r1, r2
    beae:	78d2      	ldrb	r2, [r2, #3]
    beb0:	4313      	orrs	r3, r2
    beb2:	0018      	movs	r0, r3
    beb4:	4beb      	ldr	r3, [pc, #940]	; (c264 <process_recieved_packet+0x748>)
    beb6:	22fa      	movs	r2, #250	; 0xfa
    beb8:	0091      	lsls	r1, r2, #2
    beba:	4798      	blx	r3
    bebc:	0003      	movs	r3, r0
    bebe:	001a      	movs	r2, r3
    bec0:	4be9      	ldr	r3, [pc, #932]	; (c268 <process_recieved_packet+0x74c>)
    bec2:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+3])/1000;
    bec4:	4be9      	ldr	r3, [pc, #932]	; (c26c <process_recieved_packet+0x750>)
    bec6:	781b      	ldrb	r3, [r3, #0]
    bec8:	001a      	movs	r2, r3
    beca:	4be5      	ldr	r3, [pc, #916]	; (c260 <process_recieved_packet+0x744>)
    becc:	189b      	adds	r3, r3, r2
    bece:	78db      	ldrb	r3, [r3, #3]
    bed0:	061a      	lsls	r2, r3, #24
    bed2:	4be6      	ldr	r3, [pc, #920]	; (c26c <process_recieved_packet+0x750>)
    bed4:	781b      	ldrb	r3, [r3, #0]
    bed6:	3301      	adds	r3, #1
    bed8:	49e1      	ldr	r1, [pc, #900]	; (c260 <process_recieved_packet+0x744>)
    beda:	18cb      	adds	r3, r1, r3
    bedc:	78db      	ldrb	r3, [r3, #3]
    bede:	041b      	lsls	r3, r3, #16
    bee0:	431a      	orrs	r2, r3
    bee2:	4be2      	ldr	r3, [pc, #904]	; (c26c <process_recieved_packet+0x750>)
    bee4:	781b      	ldrb	r3, [r3, #0]
    bee6:	3302      	adds	r3, #2
    bee8:	49dd      	ldr	r1, [pc, #884]	; (c260 <process_recieved_packet+0x744>)
    beea:	18cb      	adds	r3, r1, r3
    beec:	78db      	ldrb	r3, [r3, #3]
    beee:	021b      	lsls	r3, r3, #8
    bef0:	4313      	orrs	r3, r2
    bef2:	4ade      	ldr	r2, [pc, #888]	; (c26c <process_recieved_packet+0x750>)
    bef4:	7812      	ldrb	r2, [r2, #0]
    bef6:	3203      	adds	r2, #3
    bef8:	49d9      	ldr	r1, [pc, #868]	; (c260 <process_recieved_packet+0x744>)
    befa:	188a      	adds	r2, r1, r2
    befc:	78d2      	ldrb	r2, [r2, #3]
    befe:	4313      	orrs	r3, r2
    bf00:	0018      	movs	r0, r3
    bf02:	4bd8      	ldr	r3, [pc, #864]	; (c264 <process_recieved_packet+0x748>)
    bf04:	22fa      	movs	r2, #250	; 0xfa
    bf06:	0091      	lsls	r1, r2, #2
    bf08:	4798      	blx	r3
    bf0a:	0003      	movs	r3, r0
    bf0c:	001a      	movs	r2, r3
    bf0e:	4bd6      	ldr	r3, [pc, #856]	; (c268 <process_recieved_packet+0x74c>)
    bf10:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+3])/1000;
    bf12:	4bd7      	ldr	r3, [pc, #860]	; (c270 <process_recieved_packet+0x754>)
    bf14:	781b      	ldrb	r3, [r3, #0]
    bf16:	001a      	movs	r2, r3
    bf18:	4bd1      	ldr	r3, [pc, #836]	; (c260 <process_recieved_packet+0x744>)
    bf1a:	189b      	adds	r3, r3, r2
    bf1c:	78db      	ldrb	r3, [r3, #3]
    bf1e:	061a      	lsls	r2, r3, #24
    bf20:	4bd3      	ldr	r3, [pc, #844]	; (c270 <process_recieved_packet+0x754>)
    bf22:	781b      	ldrb	r3, [r3, #0]
    bf24:	3301      	adds	r3, #1
    bf26:	49ce      	ldr	r1, [pc, #824]	; (c260 <process_recieved_packet+0x744>)
    bf28:	18cb      	adds	r3, r1, r3
    bf2a:	78db      	ldrb	r3, [r3, #3]
    bf2c:	041b      	lsls	r3, r3, #16
    bf2e:	431a      	orrs	r2, r3
    bf30:	4bcf      	ldr	r3, [pc, #828]	; (c270 <process_recieved_packet+0x754>)
    bf32:	781b      	ldrb	r3, [r3, #0]
    bf34:	3302      	adds	r3, #2
    bf36:	49ca      	ldr	r1, [pc, #808]	; (c260 <process_recieved_packet+0x744>)
    bf38:	18cb      	adds	r3, r1, r3
    bf3a:	78db      	ldrb	r3, [r3, #3]
    bf3c:	021b      	lsls	r3, r3, #8
    bf3e:	4313      	orrs	r3, r2
    bf40:	4acb      	ldr	r2, [pc, #812]	; (c270 <process_recieved_packet+0x754>)
    bf42:	7812      	ldrb	r2, [r2, #0]
    bf44:	3203      	adds	r2, #3
    bf46:	49c6      	ldr	r1, [pc, #792]	; (c260 <process_recieved_packet+0x744>)
    bf48:	188a      	adds	r2, r1, r2
    bf4a:	78d2      	ldrb	r2, [r2, #3]
    bf4c:	4313      	orrs	r3, r2
    bf4e:	0018      	movs	r0, r3
    bf50:	4bc4      	ldr	r3, [pc, #784]	; (c264 <process_recieved_packet+0x748>)
    bf52:	22fa      	movs	r2, #250	; 0xfa
    bf54:	0091      	lsls	r1, r2, #2
    bf56:	4798      	blx	r3
    bf58:	0003      	movs	r3, r0
    bf5a:	001a      	movs	r2, r3
    bf5c:	4bc2      	ldr	r3, [pc, #776]	; (c268 <process_recieved_packet+0x74c>)
    bf5e:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+3])/1000;
    bf60:	4bc4      	ldr	r3, [pc, #784]	; (c274 <process_recieved_packet+0x758>)
    bf62:	781b      	ldrb	r3, [r3, #0]
    bf64:	001a      	movs	r2, r3
    bf66:	4bbe      	ldr	r3, [pc, #760]	; (c260 <process_recieved_packet+0x744>)
    bf68:	189b      	adds	r3, r3, r2
    bf6a:	78db      	ldrb	r3, [r3, #3]
    bf6c:	061a      	lsls	r2, r3, #24
    bf6e:	4bc1      	ldr	r3, [pc, #772]	; (c274 <process_recieved_packet+0x758>)
    bf70:	781b      	ldrb	r3, [r3, #0]
    bf72:	3301      	adds	r3, #1
    bf74:	49ba      	ldr	r1, [pc, #744]	; (c260 <process_recieved_packet+0x744>)
    bf76:	18cb      	adds	r3, r1, r3
    bf78:	78db      	ldrb	r3, [r3, #3]
    bf7a:	041b      	lsls	r3, r3, #16
    bf7c:	431a      	orrs	r2, r3
    bf7e:	4bbd      	ldr	r3, [pc, #756]	; (c274 <process_recieved_packet+0x758>)
    bf80:	781b      	ldrb	r3, [r3, #0]
    bf82:	3302      	adds	r3, #2
    bf84:	49b6      	ldr	r1, [pc, #728]	; (c260 <process_recieved_packet+0x744>)
    bf86:	18cb      	adds	r3, r1, r3
    bf88:	78db      	ldrb	r3, [r3, #3]
    bf8a:	021b      	lsls	r3, r3, #8
    bf8c:	4313      	orrs	r3, r2
    bf8e:	4ab9      	ldr	r2, [pc, #740]	; (c274 <process_recieved_packet+0x758>)
    bf90:	7812      	ldrb	r2, [r2, #0]
    bf92:	3203      	adds	r2, #3
    bf94:	49b2      	ldr	r1, [pc, #712]	; (c260 <process_recieved_packet+0x744>)
    bf96:	188a      	adds	r2, r1, r2
    bf98:	78d2      	ldrb	r2, [r2, #3]
    bf9a:	4313      	orrs	r3, r2
    bf9c:	0018      	movs	r0, r3
    bf9e:	4bb1      	ldr	r3, [pc, #708]	; (c264 <process_recieved_packet+0x748>)
    bfa0:	22fa      	movs	r2, #250	; 0xfa
    bfa2:	0091      	lsls	r1, r2, #2
    bfa4:	4798      	blx	r3
    bfa6:	0003      	movs	r3, r0
    bfa8:	001a      	movs	r2, r3
    bfaa:	4baf      	ldr	r3, [pc, #700]	; (c268 <process_recieved_packet+0x74c>)
    bfac:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+3])/1000;
    bfae:	4bb2      	ldr	r3, [pc, #712]	; (c278 <process_recieved_packet+0x75c>)
    bfb0:	781b      	ldrb	r3, [r3, #0]
    bfb2:	001a      	movs	r2, r3
    bfb4:	4baa      	ldr	r3, [pc, #680]	; (c260 <process_recieved_packet+0x744>)
    bfb6:	189b      	adds	r3, r3, r2
    bfb8:	78db      	ldrb	r3, [r3, #3]
    bfba:	061a      	lsls	r2, r3, #24
    bfbc:	4bae      	ldr	r3, [pc, #696]	; (c278 <process_recieved_packet+0x75c>)
    bfbe:	781b      	ldrb	r3, [r3, #0]
    bfc0:	3301      	adds	r3, #1
    bfc2:	49a7      	ldr	r1, [pc, #668]	; (c260 <process_recieved_packet+0x744>)
    bfc4:	18cb      	adds	r3, r1, r3
    bfc6:	78db      	ldrb	r3, [r3, #3]
    bfc8:	041b      	lsls	r3, r3, #16
    bfca:	431a      	orrs	r2, r3
    bfcc:	4baa      	ldr	r3, [pc, #680]	; (c278 <process_recieved_packet+0x75c>)
    bfce:	781b      	ldrb	r3, [r3, #0]
    bfd0:	3302      	adds	r3, #2
    bfd2:	49a3      	ldr	r1, [pc, #652]	; (c260 <process_recieved_packet+0x744>)
    bfd4:	18cb      	adds	r3, r1, r3
    bfd6:	78db      	ldrb	r3, [r3, #3]
    bfd8:	021b      	lsls	r3, r3, #8
    bfda:	4313      	orrs	r3, r2
    bfdc:	4aa6      	ldr	r2, [pc, #664]	; (c278 <process_recieved_packet+0x75c>)
    bfde:	7812      	ldrb	r2, [r2, #0]
    bfe0:	3203      	adds	r2, #3
    bfe2:	499f      	ldr	r1, [pc, #636]	; (c260 <process_recieved_packet+0x744>)
    bfe4:	188a      	adds	r2, r1, r2
    bfe6:	78d2      	ldrb	r2, [r2, #3]
    bfe8:	4313      	orrs	r3, r2
    bfea:	0018      	movs	r0, r3
    bfec:	4b9d      	ldr	r3, [pc, #628]	; (c264 <process_recieved_packet+0x748>)
    bfee:	22fa      	movs	r2, #250	; 0xfa
    bff0:	0091      	lsls	r1, r2, #2
    bff2:	4798      	blx	r3
    bff4:	0003      	movs	r3, r0
    bff6:	001a      	movs	r2, r3
    bff8:	4b9b      	ldr	r3, [pc, #620]	; (c268 <process_recieved_packet+0x74c>)
    bffa:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+3])/1000;
    bffc:	4b9f      	ldr	r3, [pc, #636]	; (c27c <process_recieved_packet+0x760>)
    bffe:	781b      	ldrb	r3, [r3, #0]
    c000:	001a      	movs	r2, r3
    c002:	4b97      	ldr	r3, [pc, #604]	; (c260 <process_recieved_packet+0x744>)
    c004:	189b      	adds	r3, r3, r2
    c006:	78db      	ldrb	r3, [r3, #3]
    c008:	061a      	lsls	r2, r3, #24
    c00a:	4b9c      	ldr	r3, [pc, #624]	; (c27c <process_recieved_packet+0x760>)
    c00c:	781b      	ldrb	r3, [r3, #0]
    c00e:	3301      	adds	r3, #1
    c010:	4993      	ldr	r1, [pc, #588]	; (c260 <process_recieved_packet+0x744>)
    c012:	18cb      	adds	r3, r1, r3
    c014:	78db      	ldrb	r3, [r3, #3]
    c016:	041b      	lsls	r3, r3, #16
    c018:	431a      	orrs	r2, r3
    c01a:	4b98      	ldr	r3, [pc, #608]	; (c27c <process_recieved_packet+0x760>)
    c01c:	781b      	ldrb	r3, [r3, #0]
    c01e:	3302      	adds	r3, #2
    c020:	498f      	ldr	r1, [pc, #572]	; (c260 <process_recieved_packet+0x744>)
    c022:	18cb      	adds	r3, r1, r3
    c024:	78db      	ldrb	r3, [r3, #3]
    c026:	021b      	lsls	r3, r3, #8
    c028:	4313      	orrs	r3, r2
    c02a:	4a94      	ldr	r2, [pc, #592]	; (c27c <process_recieved_packet+0x760>)
    c02c:	7812      	ldrb	r2, [r2, #0]
    c02e:	3203      	adds	r2, #3
    c030:	498b      	ldr	r1, [pc, #556]	; (c260 <process_recieved_packet+0x744>)
    c032:	188a      	adds	r2, r1, r2
    c034:	78d2      	ldrb	r2, [r2, #3]
    c036:	4313      	orrs	r3, r2
    c038:	0018      	movs	r0, r3
    c03a:	4b8a      	ldr	r3, [pc, #552]	; (c264 <process_recieved_packet+0x748>)
    c03c:	22fa      	movs	r2, #250	; 0xfa
    c03e:	0091      	lsls	r1, r2, #2
    c040:	4798      	blx	r3
    c042:	0003      	movs	r3, r0
    c044:	001a      	movs	r2, r3
    c046:	4b88      	ldr	r3, [pc, #544]	; (c268 <process_recieved_packet+0x74c>)
    c048:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+3])/1000;
    c04a:	4b8d      	ldr	r3, [pc, #564]	; (c280 <process_recieved_packet+0x764>)
    c04c:	781b      	ldrb	r3, [r3, #0]
    c04e:	001a      	movs	r2, r3
    c050:	4b83      	ldr	r3, [pc, #524]	; (c260 <process_recieved_packet+0x744>)
    c052:	189b      	adds	r3, r3, r2
    c054:	78db      	ldrb	r3, [r3, #3]
    c056:	061a      	lsls	r2, r3, #24
    c058:	4b89      	ldr	r3, [pc, #548]	; (c280 <process_recieved_packet+0x764>)
    c05a:	781b      	ldrb	r3, [r3, #0]
    c05c:	3301      	adds	r3, #1
    c05e:	4980      	ldr	r1, [pc, #512]	; (c260 <process_recieved_packet+0x744>)
    c060:	18cb      	adds	r3, r1, r3
    c062:	78db      	ldrb	r3, [r3, #3]
    c064:	041b      	lsls	r3, r3, #16
    c066:	431a      	orrs	r2, r3
    c068:	4b85      	ldr	r3, [pc, #532]	; (c280 <process_recieved_packet+0x764>)
    c06a:	781b      	ldrb	r3, [r3, #0]
    c06c:	3302      	adds	r3, #2
    c06e:	497c      	ldr	r1, [pc, #496]	; (c260 <process_recieved_packet+0x744>)
    c070:	18cb      	adds	r3, r1, r3
    c072:	78db      	ldrb	r3, [r3, #3]
    c074:	021b      	lsls	r3, r3, #8
    c076:	4313      	orrs	r3, r2
    c078:	4a81      	ldr	r2, [pc, #516]	; (c280 <process_recieved_packet+0x764>)
    c07a:	7812      	ldrb	r2, [r2, #0]
    c07c:	3203      	adds	r2, #3
    c07e:	4978      	ldr	r1, [pc, #480]	; (c260 <process_recieved_packet+0x744>)
    c080:	188a      	adds	r2, r1, r2
    c082:	78d2      	ldrb	r2, [r2, #3]
    c084:	4313      	orrs	r3, r2
    c086:	0018      	movs	r0, r3
    c088:	4b76      	ldr	r3, [pc, #472]	; (c264 <process_recieved_packet+0x748>)
    c08a:	22fa      	movs	r2, #250	; 0xfa
    c08c:	0091      	lsls	r1, r2, #2
    c08e:	4798      	blx	r3
    c090:	0003      	movs	r3, r0
    c092:	001a      	movs	r2, r3
    c094:	4b74      	ldr	r3, [pc, #464]	; (c268 <process_recieved_packet+0x74c>)
    c096:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+3])/1000;
    c098:	4b7a      	ldr	r3, [pc, #488]	; (c284 <process_recieved_packet+0x768>)
    c09a:	781b      	ldrb	r3, [r3, #0]
    c09c:	001a      	movs	r2, r3
    c09e:	4b70      	ldr	r3, [pc, #448]	; (c260 <process_recieved_packet+0x744>)
    c0a0:	189b      	adds	r3, r3, r2
    c0a2:	78db      	ldrb	r3, [r3, #3]
    c0a4:	061a      	lsls	r2, r3, #24
    c0a6:	4b77      	ldr	r3, [pc, #476]	; (c284 <process_recieved_packet+0x768>)
    c0a8:	781b      	ldrb	r3, [r3, #0]
    c0aa:	3301      	adds	r3, #1
    c0ac:	496c      	ldr	r1, [pc, #432]	; (c260 <process_recieved_packet+0x744>)
    c0ae:	18cb      	adds	r3, r1, r3
    c0b0:	78db      	ldrb	r3, [r3, #3]
    c0b2:	041b      	lsls	r3, r3, #16
    c0b4:	431a      	orrs	r2, r3
    c0b6:	4b73      	ldr	r3, [pc, #460]	; (c284 <process_recieved_packet+0x768>)
    c0b8:	781b      	ldrb	r3, [r3, #0]
    c0ba:	3302      	adds	r3, #2
    c0bc:	4968      	ldr	r1, [pc, #416]	; (c260 <process_recieved_packet+0x744>)
    c0be:	18cb      	adds	r3, r1, r3
    c0c0:	78db      	ldrb	r3, [r3, #3]
    c0c2:	021b      	lsls	r3, r3, #8
    c0c4:	4313      	orrs	r3, r2
    c0c6:	4a6f      	ldr	r2, [pc, #444]	; (c284 <process_recieved_packet+0x768>)
    c0c8:	7812      	ldrb	r2, [r2, #0]
    c0ca:	3203      	adds	r2, #3
    c0cc:	4964      	ldr	r1, [pc, #400]	; (c260 <process_recieved_packet+0x744>)
    c0ce:	188a      	adds	r2, r1, r2
    c0d0:	78d2      	ldrb	r2, [r2, #3]
    c0d2:	4313      	orrs	r3, r2
    c0d4:	0018      	movs	r0, r3
    c0d6:	4b63      	ldr	r3, [pc, #396]	; (c264 <process_recieved_packet+0x748>)
    c0d8:	22fa      	movs	r2, #250	; 0xfa
    c0da:	0091      	lsls	r1, r2, #2
    c0dc:	4798      	blx	r3
    c0de:	0003      	movs	r3, r0
    c0e0:	001a      	movs	r2, r3
    c0e2:	4b61      	ldr	r3, [pc, #388]	; (c268 <process_recieved_packet+0x74c>)
    c0e4:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+3])/1000;
    c0e6:	4b68      	ldr	r3, [pc, #416]	; (c288 <process_recieved_packet+0x76c>)
    c0e8:	781b      	ldrb	r3, [r3, #0]
    c0ea:	001a      	movs	r2, r3
    c0ec:	4b5c      	ldr	r3, [pc, #368]	; (c260 <process_recieved_packet+0x744>)
    c0ee:	189b      	adds	r3, r3, r2
    c0f0:	78db      	ldrb	r3, [r3, #3]
    c0f2:	061a      	lsls	r2, r3, #24
    c0f4:	4b64      	ldr	r3, [pc, #400]	; (c288 <process_recieved_packet+0x76c>)
    c0f6:	781b      	ldrb	r3, [r3, #0]
    c0f8:	3301      	adds	r3, #1
    c0fa:	4959      	ldr	r1, [pc, #356]	; (c260 <process_recieved_packet+0x744>)
    c0fc:	18cb      	adds	r3, r1, r3
    c0fe:	78db      	ldrb	r3, [r3, #3]
    c100:	041b      	lsls	r3, r3, #16
    c102:	431a      	orrs	r2, r3
    c104:	4b60      	ldr	r3, [pc, #384]	; (c288 <process_recieved_packet+0x76c>)
    c106:	781b      	ldrb	r3, [r3, #0]
    c108:	3302      	adds	r3, #2
    c10a:	4955      	ldr	r1, [pc, #340]	; (c260 <process_recieved_packet+0x744>)
    c10c:	18cb      	adds	r3, r1, r3
    c10e:	78db      	ldrb	r3, [r3, #3]
    c110:	021b      	lsls	r3, r3, #8
    c112:	4313      	orrs	r3, r2
    c114:	4a5c      	ldr	r2, [pc, #368]	; (c288 <process_recieved_packet+0x76c>)
    c116:	7812      	ldrb	r2, [r2, #0]
    c118:	3203      	adds	r2, #3
    c11a:	4951      	ldr	r1, [pc, #324]	; (c260 <process_recieved_packet+0x744>)
    c11c:	188a      	adds	r2, r1, r2
    c11e:	78d2      	ldrb	r2, [r2, #3]
    c120:	4313      	orrs	r3, r2
    c122:	0018      	movs	r0, r3
    c124:	4b4f      	ldr	r3, [pc, #316]	; (c264 <process_recieved_packet+0x748>)
    c126:	22fa      	movs	r2, #250	; 0xfa
    c128:	0091      	lsls	r1, r2, #2
    c12a:	4798      	blx	r3
    c12c:	0003      	movs	r3, r0
    c12e:	001a      	movs	r2, r3
    c130:	4b4d      	ldr	r3, [pc, #308]	; (c268 <process_recieved_packet+0x74c>)
    c132:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+3])/1000;
    c134:	4b55      	ldr	r3, [pc, #340]	; (c28c <process_recieved_packet+0x770>)
    c136:	781b      	ldrb	r3, [r3, #0]
    c138:	001a      	movs	r2, r3
    c13a:	4b49      	ldr	r3, [pc, #292]	; (c260 <process_recieved_packet+0x744>)
    c13c:	189b      	adds	r3, r3, r2
    c13e:	78db      	ldrb	r3, [r3, #3]
    c140:	061a      	lsls	r2, r3, #24
    c142:	4b52      	ldr	r3, [pc, #328]	; (c28c <process_recieved_packet+0x770>)
    c144:	781b      	ldrb	r3, [r3, #0]
    c146:	3301      	adds	r3, #1
    c148:	4945      	ldr	r1, [pc, #276]	; (c260 <process_recieved_packet+0x744>)
    c14a:	18cb      	adds	r3, r1, r3
    c14c:	78db      	ldrb	r3, [r3, #3]
    c14e:	041b      	lsls	r3, r3, #16
    c150:	431a      	orrs	r2, r3
    c152:	4b4e      	ldr	r3, [pc, #312]	; (c28c <process_recieved_packet+0x770>)
    c154:	781b      	ldrb	r3, [r3, #0]
    c156:	3302      	adds	r3, #2
    c158:	4941      	ldr	r1, [pc, #260]	; (c260 <process_recieved_packet+0x744>)
    c15a:	18cb      	adds	r3, r1, r3
    c15c:	78db      	ldrb	r3, [r3, #3]
    c15e:	021b      	lsls	r3, r3, #8
    c160:	4313      	orrs	r3, r2
    c162:	4a4a      	ldr	r2, [pc, #296]	; (c28c <process_recieved_packet+0x770>)
    c164:	7812      	ldrb	r2, [r2, #0]
    c166:	3203      	adds	r2, #3
    c168:	493d      	ldr	r1, [pc, #244]	; (c260 <process_recieved_packet+0x744>)
    c16a:	188a      	adds	r2, r1, r2
    c16c:	78d2      	ldrb	r2, [r2, #3]
    c16e:	4313      	orrs	r3, r2
    c170:	0018      	movs	r0, r3
    c172:	4b3c      	ldr	r3, [pc, #240]	; (c264 <process_recieved_packet+0x748>)
    c174:	22fa      	movs	r2, #250	; 0xfa
    c176:	0091      	lsls	r1, r2, #2
    c178:	4798      	blx	r3
    c17a:	0003      	movs	r3, r0
    c17c:	001a      	movs	r2, r3
    c17e:	4b3a      	ldr	r3, [pc, #232]	; (c268 <process_recieved_packet+0x74c>)
    c180:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+3])/1000;
    c182:	4b43      	ldr	r3, [pc, #268]	; (c290 <process_recieved_packet+0x774>)
    c184:	781b      	ldrb	r3, [r3, #0]
    c186:	001a      	movs	r2, r3
    c188:	4b35      	ldr	r3, [pc, #212]	; (c260 <process_recieved_packet+0x744>)
    c18a:	189b      	adds	r3, r3, r2
    c18c:	78db      	ldrb	r3, [r3, #3]
    c18e:	061a      	lsls	r2, r3, #24
    c190:	4b3f      	ldr	r3, [pc, #252]	; (c290 <process_recieved_packet+0x774>)
    c192:	781b      	ldrb	r3, [r3, #0]
    c194:	3301      	adds	r3, #1
    c196:	4932      	ldr	r1, [pc, #200]	; (c260 <process_recieved_packet+0x744>)
    c198:	18cb      	adds	r3, r1, r3
    c19a:	78db      	ldrb	r3, [r3, #3]
    c19c:	041b      	lsls	r3, r3, #16
    c19e:	431a      	orrs	r2, r3
    c1a0:	4b3b      	ldr	r3, [pc, #236]	; (c290 <process_recieved_packet+0x774>)
    c1a2:	781b      	ldrb	r3, [r3, #0]
    c1a4:	3302      	adds	r3, #2
    c1a6:	492e      	ldr	r1, [pc, #184]	; (c260 <process_recieved_packet+0x744>)
    c1a8:	18cb      	adds	r3, r1, r3
    c1aa:	78db      	ldrb	r3, [r3, #3]
    c1ac:	021b      	lsls	r3, r3, #8
    c1ae:	4313      	orrs	r3, r2
    c1b0:	4a37      	ldr	r2, [pc, #220]	; (c290 <process_recieved_packet+0x774>)
    c1b2:	7812      	ldrb	r2, [r2, #0]
    c1b4:	3203      	adds	r2, #3
    c1b6:	492a      	ldr	r1, [pc, #168]	; (c260 <process_recieved_packet+0x744>)
    c1b8:	188a      	adds	r2, r1, r2
    c1ba:	78d2      	ldrb	r2, [r2, #3]
    c1bc:	4313      	orrs	r3, r2
    c1be:	0018      	movs	r0, r3
    c1c0:	4b28      	ldr	r3, [pc, #160]	; (c264 <process_recieved_packet+0x748>)
    c1c2:	22fa      	movs	r2, #250	; 0xfa
    c1c4:	0091      	lsls	r1, r2, #2
    c1c6:	4798      	blx	r3
    c1c8:	0003      	movs	r3, r0
    c1ca:	001a      	movs	r2, r3
    c1cc:	4b26      	ldr	r3, [pc, #152]	; (c268 <process_recieved_packet+0x74c>)
    c1ce:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+3])/1000;
    c1d0:	4b30      	ldr	r3, [pc, #192]	; (c294 <process_recieved_packet+0x778>)
    c1d2:	781b      	ldrb	r3, [r3, #0]
    c1d4:	001a      	movs	r2, r3
    c1d6:	4b22      	ldr	r3, [pc, #136]	; (c260 <process_recieved_packet+0x744>)
    c1d8:	189b      	adds	r3, r3, r2
    c1da:	78db      	ldrb	r3, [r3, #3]
    c1dc:	061a      	lsls	r2, r3, #24
    c1de:	4b2d      	ldr	r3, [pc, #180]	; (c294 <process_recieved_packet+0x778>)
    c1e0:	781b      	ldrb	r3, [r3, #0]
    c1e2:	3301      	adds	r3, #1
    c1e4:	491e      	ldr	r1, [pc, #120]	; (c260 <process_recieved_packet+0x744>)
    c1e6:	18cb      	adds	r3, r1, r3
    c1e8:	78db      	ldrb	r3, [r3, #3]
    c1ea:	041b      	lsls	r3, r3, #16
    c1ec:	431a      	orrs	r2, r3
    c1ee:	4b29      	ldr	r3, [pc, #164]	; (c294 <process_recieved_packet+0x778>)
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	3302      	adds	r3, #2
    c1f4:	491a      	ldr	r1, [pc, #104]	; (c260 <process_recieved_packet+0x744>)
    c1f6:	18cb      	adds	r3, r1, r3
    c1f8:	78db      	ldrb	r3, [r3, #3]
    c1fa:	021b      	lsls	r3, r3, #8
    c1fc:	4313      	orrs	r3, r2
    c1fe:	4a25      	ldr	r2, [pc, #148]	; (c294 <process_recieved_packet+0x778>)
    c200:	7812      	ldrb	r2, [r2, #0]
    c202:	3203      	adds	r2, #3
    c204:	4916      	ldr	r1, [pc, #88]	; (c260 <process_recieved_packet+0x744>)
    c206:	188a      	adds	r2, r1, r2
    c208:	78d2      	ldrb	r2, [r2, #3]
    c20a:	4313      	orrs	r3, r2
    c20c:	0018      	movs	r0, r3
    c20e:	4b15      	ldr	r3, [pc, #84]	; (c264 <process_recieved_packet+0x748>)
    c210:	22fa      	movs	r2, #250	; 0xfa
    c212:	0091      	lsls	r1, r2, #2
    c214:	4798      	blx	r3
    c216:	0003      	movs	r3, r0
    c218:	001a      	movs	r2, r3
    c21a:	4b1f      	ldr	r3, [pc, #124]	; (c298 <process_recieved_packet+0x77c>)
    c21c:	0010      	movs	r0, r2
    c21e:	4798      	blx	r3
    c220:	1c02      	adds	r2, r0, #0
    c222:	4b11      	ldr	r3, [pc, #68]	; (c268 <process_recieved_packet+0x74c>)
    c224:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+3])/1000;
    c226:	4b1d      	ldr	r3, [pc, #116]	; (c29c <process_recieved_packet+0x780>)
    c228:	781b      	ldrb	r3, [r3, #0]
    c22a:	001a      	movs	r2, r3
    c22c:	4b0c      	ldr	r3, [pc, #48]	; (c260 <process_recieved_packet+0x744>)
    c22e:	189b      	adds	r3, r3, r2
    c230:	78db      	ldrb	r3, [r3, #3]
    c232:	061a      	lsls	r2, r3, #24
    c234:	4b19      	ldr	r3, [pc, #100]	; (c29c <process_recieved_packet+0x780>)
    c236:	781b      	ldrb	r3, [r3, #0]
    c238:	3301      	adds	r3, #1
    c23a:	4909      	ldr	r1, [pc, #36]	; (c260 <process_recieved_packet+0x744>)
    c23c:	18cb      	adds	r3, r1, r3
    c23e:	78db      	ldrb	r3, [r3, #3]
    c240:	041b      	lsls	r3, r3, #16
    c242:	431a      	orrs	r2, r3
    c244:	4b15      	ldr	r3, [pc, #84]	; (c29c <process_recieved_packet+0x780>)
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	3302      	adds	r3, #2
    c24a:	4905      	ldr	r1, [pc, #20]	; (c260 <process_recieved_packet+0x744>)
    c24c:	18cb      	adds	r3, r1, r3
    c24e:	78db      	ldrb	r3, [r3, #3]
    c250:	021b      	lsls	r3, r3, #8
    c252:	e025      	b.n	c2a0 <process_recieved_packet+0x784>
    c254:	2000033c 	.word	0x2000033c
    c258:	2000001a 	.word	0x2000001a
    c25c:	2000034f 	.word	0x2000034f
    c260:	20000ce0 	.word	0x20000ce0
    c264:	00014215 	.word	0x00014215
    c268:	20000fd4 	.word	0x20000fd4
    c26c:	20000350 	.word	0x20000350
    c270:	20000351 	.word	0x20000351
    c274:	20000352 	.word	0x20000352
    c278:	20000353 	.word	0x20000353
    c27c:	20000354 	.word	0x20000354
    c280:	20000355 	.word	0x20000355
    c284:	20000356 	.word	0x20000356
    c288:	20000357 	.word	0x20000357
    c28c:	20000358 	.word	0x20000358
    c290:	20000359 	.word	0x20000359
    c294:	2000035a 	.word	0x2000035a
    c298:	00015259 	.word	0x00015259
    c29c:	2000035b 	.word	0x2000035b
    c2a0:	4313      	orrs	r3, r2
    c2a2:	4a7f      	ldr	r2, [pc, #508]	; (c4a0 <process_recieved_packet+0x984>)
    c2a4:	7812      	ldrb	r2, [r2, #0]
    c2a6:	3203      	adds	r2, #3
    c2a8:	497e      	ldr	r1, [pc, #504]	; (c4a4 <process_recieved_packet+0x988>)
    c2aa:	188a      	adds	r2, r1, r2
    c2ac:	78d2      	ldrb	r2, [r2, #3]
    c2ae:	4313      	orrs	r3, r2
    c2b0:	0018      	movs	r0, r3
    c2b2:	4b7d      	ldr	r3, [pc, #500]	; (c4a8 <process_recieved_packet+0x98c>)
    c2b4:	22fa      	movs	r2, #250	; 0xfa
    c2b6:	0091      	lsls	r1, r2, #2
    c2b8:	4798      	blx	r3
    c2ba:	0003      	movs	r3, r0
    c2bc:	001a      	movs	r2, r3
    c2be:	4b7b      	ldr	r3, [pc, #492]	; (c4ac <process_recieved_packet+0x990>)
    c2c0:	0010      	movs	r0, r2
    c2c2:	4798      	blx	r3
    c2c4:	1c02      	adds	r2, r0, #0
    c2c6:	4b7a      	ldr	r3, [pc, #488]	; (c4b0 <process_recieved_packet+0x994>)
    c2c8:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+3])/1000;
    c2ca:	4b7a      	ldr	r3, [pc, #488]	; (c4b4 <process_recieved_packet+0x998>)
    c2cc:	781b      	ldrb	r3, [r3, #0]
    c2ce:	001a      	movs	r2, r3
    c2d0:	4b74      	ldr	r3, [pc, #464]	; (c4a4 <process_recieved_packet+0x988>)
    c2d2:	189b      	adds	r3, r3, r2
    c2d4:	78db      	ldrb	r3, [r3, #3]
    c2d6:	061a      	lsls	r2, r3, #24
    c2d8:	4b76      	ldr	r3, [pc, #472]	; (c4b4 <process_recieved_packet+0x998>)
    c2da:	781b      	ldrb	r3, [r3, #0]
    c2dc:	3301      	adds	r3, #1
    c2de:	4971      	ldr	r1, [pc, #452]	; (c4a4 <process_recieved_packet+0x988>)
    c2e0:	18cb      	adds	r3, r1, r3
    c2e2:	78db      	ldrb	r3, [r3, #3]
    c2e4:	041b      	lsls	r3, r3, #16
    c2e6:	431a      	orrs	r2, r3
    c2e8:	4b72      	ldr	r3, [pc, #456]	; (c4b4 <process_recieved_packet+0x998>)
    c2ea:	781b      	ldrb	r3, [r3, #0]
    c2ec:	3302      	adds	r3, #2
    c2ee:	496d      	ldr	r1, [pc, #436]	; (c4a4 <process_recieved_packet+0x988>)
    c2f0:	18cb      	adds	r3, r1, r3
    c2f2:	78db      	ldrb	r3, [r3, #3]
    c2f4:	021b      	lsls	r3, r3, #8
    c2f6:	4313      	orrs	r3, r2
    c2f8:	4a6e      	ldr	r2, [pc, #440]	; (c4b4 <process_recieved_packet+0x998>)
    c2fa:	7812      	ldrb	r2, [r2, #0]
    c2fc:	3203      	adds	r2, #3
    c2fe:	4969      	ldr	r1, [pc, #420]	; (c4a4 <process_recieved_packet+0x988>)
    c300:	188a      	adds	r2, r1, r2
    c302:	78d2      	ldrb	r2, [r2, #3]
    c304:	4313      	orrs	r3, r2
    c306:	0018      	movs	r0, r3
    c308:	4b67      	ldr	r3, [pc, #412]	; (c4a8 <process_recieved_packet+0x98c>)
    c30a:	22fa      	movs	r2, #250	; 0xfa
    c30c:	0091      	lsls	r1, r2, #2
    c30e:	4798      	blx	r3
    c310:	0003      	movs	r3, r0
    c312:	001a      	movs	r2, r3
    c314:	4b66      	ldr	r3, [pc, #408]	; (c4b0 <process_recieved_packet+0x994>)
    c316:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+3])/1000;
    c318:	4b67      	ldr	r3, [pc, #412]	; (c4b8 <process_recieved_packet+0x99c>)
    c31a:	781b      	ldrb	r3, [r3, #0]
    c31c:	001a      	movs	r2, r3
    c31e:	4b61      	ldr	r3, [pc, #388]	; (c4a4 <process_recieved_packet+0x988>)
    c320:	189b      	adds	r3, r3, r2
    c322:	78db      	ldrb	r3, [r3, #3]
    c324:	061a      	lsls	r2, r3, #24
    c326:	4b64      	ldr	r3, [pc, #400]	; (c4b8 <process_recieved_packet+0x99c>)
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	3301      	adds	r3, #1
    c32c:	495d      	ldr	r1, [pc, #372]	; (c4a4 <process_recieved_packet+0x988>)
    c32e:	18cb      	adds	r3, r1, r3
    c330:	78db      	ldrb	r3, [r3, #3]
    c332:	041b      	lsls	r3, r3, #16
    c334:	431a      	orrs	r2, r3
    c336:	4b60      	ldr	r3, [pc, #384]	; (c4b8 <process_recieved_packet+0x99c>)
    c338:	781b      	ldrb	r3, [r3, #0]
    c33a:	3302      	adds	r3, #2
    c33c:	4959      	ldr	r1, [pc, #356]	; (c4a4 <process_recieved_packet+0x988>)
    c33e:	18cb      	adds	r3, r1, r3
    c340:	78db      	ldrb	r3, [r3, #3]
    c342:	021b      	lsls	r3, r3, #8
    c344:	4313      	orrs	r3, r2
    c346:	4a5c      	ldr	r2, [pc, #368]	; (c4b8 <process_recieved_packet+0x99c>)
    c348:	7812      	ldrb	r2, [r2, #0]
    c34a:	3203      	adds	r2, #3
    c34c:	4955      	ldr	r1, [pc, #340]	; (c4a4 <process_recieved_packet+0x988>)
    c34e:	188a      	adds	r2, r1, r2
    c350:	78d2      	ldrb	r2, [r2, #3]
    c352:	4313      	orrs	r3, r2
    c354:	0018      	movs	r0, r3
    c356:	4b54      	ldr	r3, [pc, #336]	; (c4a8 <process_recieved_packet+0x98c>)
    c358:	22fa      	movs	r2, #250	; 0xfa
    c35a:	0091      	lsls	r1, r2, #2
    c35c:	4798      	blx	r3
    c35e:	0003      	movs	r3, r0
    c360:	001a      	movs	r2, r3
    c362:	4b53      	ldr	r3, [pc, #332]	; (c4b0 <process_recieved_packet+0x994>)
    c364:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2])/1000;
    c366:	4b55      	ldr	r3, [pc, #340]	; (c4bc <process_recieved_packet+0x9a0>)
    c368:	781b      	ldrb	r3, [r3, #0]
    c36a:	001a      	movs	r2, r3
    c36c:	4b4d      	ldr	r3, [pc, #308]	; (c4a4 <process_recieved_packet+0x988>)
    c36e:	189b      	adds	r3, r3, r2
    c370:	78db      	ldrb	r3, [r3, #3]
    c372:	061a      	lsls	r2, r3, #24
    c374:	4b51      	ldr	r3, [pc, #324]	; (c4bc <process_recieved_packet+0x9a0>)
    c376:	781b      	ldrb	r3, [r3, #0]
    c378:	3301      	adds	r3, #1
    c37a:	494a      	ldr	r1, [pc, #296]	; (c4a4 <process_recieved_packet+0x988>)
    c37c:	18cb      	adds	r3, r1, r3
    c37e:	78db      	ldrb	r3, [r3, #3]
    c380:	041b      	lsls	r3, r3, #16
    c382:	431a      	orrs	r2, r3
    c384:	4b4d      	ldr	r3, [pc, #308]	; (c4bc <process_recieved_packet+0x9a0>)
    c386:	781b      	ldrb	r3, [r3, #0]
    c388:	3302      	adds	r3, #2
    c38a:	4946      	ldr	r1, [pc, #280]	; (c4a4 <process_recieved_packet+0x988>)
    c38c:	18cb      	adds	r3, r1, r3
    c38e:	78db      	ldrb	r3, [r3, #3]
    c390:	021b      	lsls	r3, r3, #8
    c392:	4313      	orrs	r3, r2
    c394:	4a49      	ldr	r2, [pc, #292]	; (c4bc <process_recieved_packet+0x9a0>)
    c396:	7812      	ldrb	r2, [r2, #0]
    c398:	3202      	adds	r2, #2
    c39a:	4942      	ldr	r1, [pc, #264]	; (c4a4 <process_recieved_packet+0x988>)
    c39c:	188a      	adds	r2, r1, r2
    c39e:	78d2      	ldrb	r2, [r2, #3]
    c3a0:	4313      	orrs	r3, r2
    c3a2:	0018      	movs	r0, r3
    c3a4:	4b40      	ldr	r3, [pc, #256]	; (c4a8 <process_recieved_packet+0x98c>)
    c3a6:	22fa      	movs	r2, #250	; 0xfa
    c3a8:	0091      	lsls	r1, r2, #2
    c3aa:	4798      	blx	r3
    c3ac:	0003      	movs	r3, r0
    c3ae:	001a      	movs	r2, r3
    c3b0:	4b3f      	ldr	r3, [pc, #252]	; (c4b0 <process_recieved_packet+0x994>)
    c3b2:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+3])/1000;
    c3b4:	4b42      	ldr	r3, [pc, #264]	; (c4c0 <process_recieved_packet+0x9a4>)
    c3b6:	781b      	ldrb	r3, [r3, #0]
    c3b8:	001a      	movs	r2, r3
    c3ba:	4b3a      	ldr	r3, [pc, #232]	; (c4a4 <process_recieved_packet+0x988>)
    c3bc:	189b      	adds	r3, r3, r2
    c3be:	78db      	ldrb	r3, [r3, #3]
    c3c0:	061a      	lsls	r2, r3, #24
    c3c2:	4b3f      	ldr	r3, [pc, #252]	; (c4c0 <process_recieved_packet+0x9a4>)
    c3c4:	781b      	ldrb	r3, [r3, #0]
    c3c6:	3301      	adds	r3, #1
    c3c8:	4936      	ldr	r1, [pc, #216]	; (c4a4 <process_recieved_packet+0x988>)
    c3ca:	18cb      	adds	r3, r1, r3
    c3cc:	78db      	ldrb	r3, [r3, #3]
    c3ce:	041b      	lsls	r3, r3, #16
    c3d0:	431a      	orrs	r2, r3
    c3d2:	4b3b      	ldr	r3, [pc, #236]	; (c4c0 <process_recieved_packet+0x9a4>)
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	3302      	adds	r3, #2
    c3d8:	4932      	ldr	r1, [pc, #200]	; (c4a4 <process_recieved_packet+0x988>)
    c3da:	18cb      	adds	r3, r1, r3
    c3dc:	78db      	ldrb	r3, [r3, #3]
    c3de:	021b      	lsls	r3, r3, #8
    c3e0:	4313      	orrs	r3, r2
    c3e2:	4a37      	ldr	r2, [pc, #220]	; (c4c0 <process_recieved_packet+0x9a4>)
    c3e4:	7812      	ldrb	r2, [r2, #0]
    c3e6:	3203      	adds	r2, #3
    c3e8:	492e      	ldr	r1, [pc, #184]	; (c4a4 <process_recieved_packet+0x988>)
    c3ea:	188a      	adds	r2, r1, r2
    c3ec:	78d2      	ldrb	r2, [r2, #3]
    c3ee:	4313      	orrs	r3, r2
    c3f0:	0018      	movs	r0, r3
    c3f2:	4b2d      	ldr	r3, [pc, #180]	; (c4a8 <process_recieved_packet+0x98c>)
    c3f4:	22fa      	movs	r2, #250	; 0xfa
    c3f6:	0091      	lsls	r1, r2, #2
    c3f8:	4798      	blx	r3
    c3fa:	0003      	movs	r3, r0
    c3fc:	001a      	movs	r2, r3
    c3fe:	4b2c      	ldr	r3, [pc, #176]	; (c4b0 <process_recieved_packet+0x994>)
    c400:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+3])/1000;
    c402:	4b30      	ldr	r3, [pc, #192]	; (c4c4 <process_recieved_packet+0x9a8>)
    c404:	781b      	ldrb	r3, [r3, #0]
    c406:	001a      	movs	r2, r3
    c408:	4b26      	ldr	r3, [pc, #152]	; (c4a4 <process_recieved_packet+0x988>)
    c40a:	189b      	adds	r3, r3, r2
    c40c:	78db      	ldrb	r3, [r3, #3]
    c40e:	061a      	lsls	r2, r3, #24
    c410:	4b2c      	ldr	r3, [pc, #176]	; (c4c4 <process_recieved_packet+0x9a8>)
    c412:	781b      	ldrb	r3, [r3, #0]
    c414:	3301      	adds	r3, #1
    c416:	4923      	ldr	r1, [pc, #140]	; (c4a4 <process_recieved_packet+0x988>)
    c418:	18cb      	adds	r3, r1, r3
    c41a:	78db      	ldrb	r3, [r3, #3]
    c41c:	041b      	lsls	r3, r3, #16
    c41e:	431a      	orrs	r2, r3
    c420:	4b28      	ldr	r3, [pc, #160]	; (c4c4 <process_recieved_packet+0x9a8>)
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	3302      	adds	r3, #2
    c426:	491f      	ldr	r1, [pc, #124]	; (c4a4 <process_recieved_packet+0x988>)
    c428:	18cb      	adds	r3, r1, r3
    c42a:	78db      	ldrb	r3, [r3, #3]
    c42c:	021b      	lsls	r3, r3, #8
    c42e:	4313      	orrs	r3, r2
    c430:	4a24      	ldr	r2, [pc, #144]	; (c4c4 <process_recieved_packet+0x9a8>)
    c432:	7812      	ldrb	r2, [r2, #0]
    c434:	3203      	adds	r2, #3
    c436:	491b      	ldr	r1, [pc, #108]	; (c4a4 <process_recieved_packet+0x988>)
    c438:	188a      	adds	r2, r1, r2
    c43a:	78d2      	ldrb	r2, [r2, #3]
    c43c:	4313      	orrs	r3, r2
    c43e:	0018      	movs	r0, r3
    c440:	4b19      	ldr	r3, [pc, #100]	; (c4a8 <process_recieved_packet+0x98c>)
    c442:	22fa      	movs	r2, #250	; 0xfa
    c444:	0091      	lsls	r1, r2, #2
    c446:	4798      	blx	r3
    c448:	0003      	movs	r3, r0
    c44a:	001a      	movs	r2, r3
    c44c:	4b18      	ldr	r3, [pc, #96]	; (c4b0 <process_recieved_packet+0x994>)
    c44e:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+3])/1000;
    c450:	4b1d      	ldr	r3, [pc, #116]	; (c4c8 <process_recieved_packet+0x9ac>)
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	001a      	movs	r2, r3
    c456:	4b13      	ldr	r3, [pc, #76]	; (c4a4 <process_recieved_packet+0x988>)
    c458:	189b      	adds	r3, r3, r2
    c45a:	78db      	ldrb	r3, [r3, #3]
    c45c:	061a      	lsls	r2, r3, #24
    c45e:	4b1a      	ldr	r3, [pc, #104]	; (c4c8 <process_recieved_packet+0x9ac>)
    c460:	781b      	ldrb	r3, [r3, #0]
    c462:	3301      	adds	r3, #1
    c464:	490f      	ldr	r1, [pc, #60]	; (c4a4 <process_recieved_packet+0x988>)
    c466:	18cb      	adds	r3, r1, r3
    c468:	78db      	ldrb	r3, [r3, #3]
    c46a:	041b      	lsls	r3, r3, #16
    c46c:	431a      	orrs	r2, r3
    c46e:	4b16      	ldr	r3, [pc, #88]	; (c4c8 <process_recieved_packet+0x9ac>)
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	3302      	adds	r3, #2
    c474:	490b      	ldr	r1, [pc, #44]	; (c4a4 <process_recieved_packet+0x988>)
    c476:	18cb      	adds	r3, r1, r3
    c478:	78db      	ldrb	r3, [r3, #3]
    c47a:	021b      	lsls	r3, r3, #8
    c47c:	4313      	orrs	r3, r2
    c47e:	4a12      	ldr	r2, [pc, #72]	; (c4c8 <process_recieved_packet+0x9ac>)
    c480:	7812      	ldrb	r2, [r2, #0]
    c482:	3203      	adds	r2, #3
    c484:	4907      	ldr	r1, [pc, #28]	; (c4a4 <process_recieved_packet+0x988>)
    c486:	188a      	adds	r2, r1, r2
    c488:	78d2      	ldrb	r2, [r2, #3]
    c48a:	4313      	orrs	r3, r2
    c48c:	0018      	movs	r0, r3
    c48e:	4b06      	ldr	r3, [pc, #24]	; (c4a8 <process_recieved_packet+0x98c>)
    c490:	22fa      	movs	r2, #250	; 0xfa
    c492:	0091      	lsls	r1, r2, #2
    c494:	4798      	blx	r3
    c496:	0003      	movs	r3, r0
    c498:	001a      	movs	r2, r3
    c49a:	4b05      	ldr	r3, [pc, #20]	; (c4b0 <process_recieved_packet+0x994>)
    c49c:	649a      	str	r2, [r3, #72]	; 0x48
    c49e:	e136      	b.n	c70e <process_recieved_packet+0xbf2>
    c4a0:	2000035b 	.word	0x2000035b
    c4a4:	20000ce0 	.word	0x20000ce0
    c4a8:	00014215 	.word	0x00014215
    c4ac:	00015259 	.word	0x00015259
    c4b0:	20000fd4 	.word	0x20000fd4
    c4b4:	2000035c 	.word	0x2000035c
    c4b8:	2000035d 	.word	0x2000035d
    c4bc:	2000035e 	.word	0x2000035e
    c4c0:	2000035f 	.word	0x2000035f
    c4c4:	20000360 	.word	0x20000360
    c4c8:	20000361 	.word	0x20000361
				mcconf_limits.motor_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MAX);
    c4cc:	4bbf      	ldr	r3, [pc, #764]	; (c7cc <process_recieved_packet+0xcb0>)
    c4ce:	781b      	ldrb	r3, [r3, #0]
    c4d0:	b25a      	sxtb	r2, r3
    c4d2:	4bbf      	ldr	r3, [pc, #764]	; (c7d0 <process_recieved_packet+0xcb4>)
    c4d4:	0011      	movs	r1, r2
    c4d6:	0018      	movs	r0, r3
    c4d8:	4bbe      	ldr	r3, [pc, #760]	; (c7d4 <process_recieved_packet+0xcb8>)
    c4da:	4798      	blx	r3
    c4dc:	1c02      	adds	r2, r0, #0
    c4de:	4bbe      	ldr	r3, [pc, #760]	; (c7d8 <process_recieved_packet+0xcbc>)
    c4e0:	1c10      	adds	r0, r2, #0
    c4e2:	4798      	blx	r3
    c4e4:	0002      	movs	r2, r0
    c4e6:	4bbd      	ldr	r3, [pc, #756]	; (c7dc <process_recieved_packet+0xcc0>)
    c4e8:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MIN);
    c4ea:	4bbd      	ldr	r3, [pc, #756]	; (c7e0 <process_recieved_packet+0xcc4>)
    c4ec:	781b      	ldrb	r3, [r3, #0]
    c4ee:	b25a      	sxtb	r2, r3
    c4f0:	4bb7      	ldr	r3, [pc, #732]	; (c7d0 <process_recieved_packet+0xcb4>)
    c4f2:	0011      	movs	r1, r2
    c4f4:	0018      	movs	r0, r3
    c4f6:	4bb7      	ldr	r3, [pc, #732]	; (c7d4 <process_recieved_packet+0xcb8>)
    c4f8:	4798      	blx	r3
    c4fa:	1c02      	adds	r2, r0, #0
    c4fc:	4bb6      	ldr	r3, [pc, #728]	; (c7d8 <process_recieved_packet+0xcbc>)
    c4fe:	1c10      	adds	r0, r2, #0
    c500:	4798      	blx	r3
    c502:	0002      	movs	r2, r0
    c504:	4bb5      	ldr	r3, [pc, #724]	; (c7dc <process_recieved_packet+0xcc0>)
    c506:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MAX);
    c508:	4bb6      	ldr	r3, [pc, #728]	; (c7e4 <process_recieved_packet+0xcc8>)
    c50a:	781b      	ldrb	r3, [r3, #0]
    c50c:	b25a      	sxtb	r2, r3
    c50e:	4bb0      	ldr	r3, [pc, #704]	; (c7d0 <process_recieved_packet+0xcb4>)
    c510:	0011      	movs	r1, r2
    c512:	0018      	movs	r0, r3
    c514:	4baf      	ldr	r3, [pc, #700]	; (c7d4 <process_recieved_packet+0xcb8>)
    c516:	4798      	blx	r3
    c518:	1c02      	adds	r2, r0, #0
    c51a:	4baf      	ldr	r3, [pc, #700]	; (c7d8 <process_recieved_packet+0xcbc>)
    c51c:	1c10      	adds	r0, r2, #0
    c51e:	4798      	blx	r3
    c520:	0002      	movs	r2, r0
    c522:	4bae      	ldr	r3, [pc, #696]	; (c7dc <process_recieved_packet+0xcc0>)
    c524:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MIN);
    c526:	4bb0      	ldr	r3, [pc, #704]	; (c7e8 <process_recieved_packet+0xccc>)
    c528:	781b      	ldrb	r3, [r3, #0]
    c52a:	b25a      	sxtb	r2, r3
    c52c:	4ba8      	ldr	r3, [pc, #672]	; (c7d0 <process_recieved_packet+0xcb4>)
    c52e:	0011      	movs	r1, r2
    c530:	0018      	movs	r0, r3
    c532:	4ba8      	ldr	r3, [pc, #672]	; (c7d4 <process_recieved_packet+0xcb8>)
    c534:	4798      	blx	r3
    c536:	1c02      	adds	r2, r0, #0
    c538:	4ba7      	ldr	r3, [pc, #668]	; (c7d8 <process_recieved_packet+0xcbc>)
    c53a:	1c10      	adds	r0, r2, #0
    c53c:	4798      	blx	r3
    c53e:	0002      	movs	r2, r0
    c540:	4ba6      	ldr	r3, [pc, #664]	; (c7dc <process_recieved_packet+0xcc0>)
    c542:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ABS_CURR_MAX);
    c544:	4ba9      	ldr	r3, [pc, #676]	; (c7ec <process_recieved_packet+0xcd0>)
    c546:	781b      	ldrb	r3, [r3, #0]
    c548:	b25a      	sxtb	r2, r3
    c54a:	4ba1      	ldr	r3, [pc, #644]	; (c7d0 <process_recieved_packet+0xcb4>)
    c54c:	0011      	movs	r1, r2
    c54e:	0018      	movs	r0, r3
    c550:	4ba0      	ldr	r3, [pc, #640]	; (c7d4 <process_recieved_packet+0xcb8>)
    c552:	4798      	blx	r3
    c554:	1c02      	adds	r2, r0, #0
    c556:	4ba0      	ldr	r3, [pc, #640]	; (c7d8 <process_recieved_packet+0xcbc>)
    c558:	1c10      	adds	r0, r2, #0
    c55a:	4798      	blx	r3
    c55c:	0002      	movs	r2, r0
    c55e:	4b9f      	ldr	r3, [pc, #636]	; (c7dc <process_recieved_packet+0xcc0>)
    c560:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MIN);
    c562:	4ba3      	ldr	r3, [pc, #652]	; (c7f0 <process_recieved_packet+0xcd4>)
    c564:	781b      	ldrb	r3, [r3, #0]
    c566:	b25a      	sxtb	r2, r3
    c568:	4b99      	ldr	r3, [pc, #612]	; (c7d0 <process_recieved_packet+0xcb4>)
    c56a:	0011      	movs	r1, r2
    c56c:	0018      	movs	r0, r3
    c56e:	4b99      	ldr	r3, [pc, #612]	; (c7d4 <process_recieved_packet+0xcb8>)
    c570:	4798      	blx	r3
    c572:	1c02      	adds	r2, r0, #0
    c574:	4b98      	ldr	r3, [pc, #608]	; (c7d8 <process_recieved_packet+0xcbc>)
    c576:	1c10      	adds	r0, r2, #0
    c578:	4798      	blx	r3
    c57a:	0002      	movs	r2, r0
    c57c:	4b97      	ldr	r3, [pc, #604]	; (c7dc <process_recieved_packet+0xcc0>)
    c57e:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MAX);
    c580:	4b9c      	ldr	r3, [pc, #624]	; (c7f4 <process_recieved_packet+0xcd8>)
    c582:	781b      	ldrb	r3, [r3, #0]
    c584:	b25a      	sxtb	r2, r3
    c586:	4b92      	ldr	r3, [pc, #584]	; (c7d0 <process_recieved_packet+0xcb4>)
    c588:	0011      	movs	r1, r2
    c58a:	0018      	movs	r0, r3
    c58c:	4b91      	ldr	r3, [pc, #580]	; (c7d4 <process_recieved_packet+0xcb8>)
    c58e:	4798      	blx	r3
    c590:	1c02      	adds	r2, r0, #0
    c592:	4b91      	ldr	r3, [pc, #580]	; (c7d8 <process_recieved_packet+0xcbc>)
    c594:	1c10      	adds	r0, r2, #0
    c596:	4798      	blx	r3
    c598:	0002      	movs	r2, r0
    c59a:	4b90      	ldr	r3, [pc, #576]	; (c7dc <process_recieved_packet+0xcc0>)
    c59c:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_MAX);
    c59e:	4b96      	ldr	r3, [pc, #600]	; (c7f8 <process_recieved_packet+0xcdc>)
    c5a0:	781b      	ldrb	r3, [r3, #0]
    c5a2:	b25a      	sxtb	r2, r3
    c5a4:	4b8a      	ldr	r3, [pc, #552]	; (c7d0 <process_recieved_packet+0xcb4>)
    c5a6:	0011      	movs	r1, r2
    c5a8:	0018      	movs	r0, r3
    c5aa:	4b8a      	ldr	r3, [pc, #552]	; (c7d4 <process_recieved_packet+0xcb8>)
    c5ac:	4798      	blx	r3
    c5ae:	1c02      	adds	r2, r0, #0
    c5b0:	4b89      	ldr	r3, [pc, #548]	; (c7d8 <process_recieved_packet+0xcbc>)
    c5b2:	1c10      	adds	r0, r2, #0
    c5b4:	4798      	blx	r3
    c5b6:	0002      	movs	r2, r0
    c5b8:	4b88      	ldr	r3, [pc, #544]	; (c7dc <process_recieved_packet+0xcc0>)
    c5ba:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_CC_MAX);
    c5bc:	4b8f      	ldr	r3, [pc, #572]	; (c7fc <process_recieved_packet+0xce0>)
    c5be:	781b      	ldrb	r3, [r3, #0]
    c5c0:	b25a      	sxtb	r2, r3
    c5c2:	4b83      	ldr	r3, [pc, #524]	; (c7d0 <process_recieved_packet+0xcb4>)
    c5c4:	0011      	movs	r1, r2
    c5c6:	0018      	movs	r0, r3
    c5c8:	4b82      	ldr	r3, [pc, #520]	; (c7d4 <process_recieved_packet+0xcb8>)
    c5ca:	4798      	blx	r3
    c5cc:	1c02      	adds	r2, r0, #0
    c5ce:	4b82      	ldr	r3, [pc, #520]	; (c7d8 <process_recieved_packet+0xcbc>)
    c5d0:	1c10      	adds	r0, r2, #0
    c5d2:	4798      	blx	r3
    c5d4:	0002      	movs	r2, r0
    c5d6:	4b81      	ldr	r3, [pc, #516]	; (c7dc <process_recieved_packet+0xcc0>)
    c5d8:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MIN);
    c5da:	4b89      	ldr	r3, [pc, #548]	; (c800 <process_recieved_packet+0xce4>)
    c5dc:	781b      	ldrb	r3, [r3, #0]
    c5de:	b25a      	sxtb	r2, r3
    c5e0:	4b7b      	ldr	r3, [pc, #492]	; (c7d0 <process_recieved_packet+0xcb4>)
    c5e2:	0011      	movs	r1, r2
    c5e4:	0018      	movs	r0, r3
    c5e6:	4b7b      	ldr	r3, [pc, #492]	; (c7d4 <process_recieved_packet+0xcb8>)
    c5e8:	4798      	blx	r3
    c5ea:	1c02      	adds	r2, r0, #0
    c5ec:	4b7a      	ldr	r3, [pc, #488]	; (c7d8 <process_recieved_packet+0xcbc>)
    c5ee:	1c10      	adds	r0, r2, #0
    c5f0:	4798      	blx	r3
    c5f2:	0002      	movs	r2, r0
    c5f4:	4b79      	ldr	r3, [pc, #484]	; (c7dc <process_recieved_packet+0xcc0>)
    c5f6:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MAX);
    c5f8:	4b82      	ldr	r3, [pc, #520]	; (c804 <process_recieved_packet+0xce8>)
    c5fa:	781b      	ldrb	r3, [r3, #0]
    c5fc:	b25a      	sxtb	r2, r3
    c5fe:	4b74      	ldr	r3, [pc, #464]	; (c7d0 <process_recieved_packet+0xcb4>)
    c600:	0011      	movs	r1, r2
    c602:	0018      	movs	r0, r3
    c604:	4b73      	ldr	r3, [pc, #460]	; (c7d4 <process_recieved_packet+0xcb8>)
    c606:	4798      	blx	r3
    c608:	1c02      	adds	r2, r0, #0
    c60a:	4b73      	ldr	r3, [pc, #460]	; (c7d8 <process_recieved_packet+0xcbc>)
    c60c:	1c10      	adds	r0, r2, #0
    c60e:	4798      	blx	r3
    c610:	0002      	movs	r2, r0
    c612:	4b72      	ldr	r3, [pc, #456]	; (c7dc <process_recieved_packet+0xcc0>)
    c614:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_STRT);
    c616:	4b7c      	ldr	r3, [pc, #496]	; (c808 <process_recieved_packet+0xcec>)
    c618:	781b      	ldrb	r3, [r3, #0]
    c61a:	b25a      	sxtb	r2, r3
    c61c:	4b6c      	ldr	r3, [pc, #432]	; (c7d0 <process_recieved_packet+0xcb4>)
    c61e:	0011      	movs	r1, r2
    c620:	0018      	movs	r0, r3
    c622:	4b6c      	ldr	r3, [pc, #432]	; (c7d4 <process_recieved_packet+0xcb8>)
    c624:	4798      	blx	r3
    c626:	1c02      	adds	r2, r0, #0
    c628:	4b6c      	ldr	r3, [pc, #432]	; (c7dc <process_recieved_packet+0xcc0>)
    c62a:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_END);
    c62c:	4b77      	ldr	r3, [pc, #476]	; (c80c <process_recieved_packet+0xcf0>)
    c62e:	781b      	ldrb	r3, [r3, #0]
    c630:	b25a      	sxtb	r2, r3
    c632:	4b67      	ldr	r3, [pc, #412]	; (c7d0 <process_recieved_packet+0xcb4>)
    c634:	0011      	movs	r1, r2
    c636:	0018      	movs	r0, r3
    c638:	4b66      	ldr	r3, [pc, #408]	; (c7d4 <process_recieved_packet+0xcb8>)
    c63a:	4798      	blx	r3
    c63c:	1c02      	adds	r2, r0, #0
    c63e:	4b67      	ldr	r3, [pc, #412]	; (c7dc <process_recieved_packet+0xcc0>)
    c640:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_STRT);
    c642:	4b73      	ldr	r3, [pc, #460]	; (c810 <process_recieved_packet+0xcf4>)
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	b25a      	sxtb	r2, r3
    c648:	4b61      	ldr	r3, [pc, #388]	; (c7d0 <process_recieved_packet+0xcb4>)
    c64a:	0011      	movs	r1, r2
    c64c:	0018      	movs	r0, r3
    c64e:	4b61      	ldr	r3, [pc, #388]	; (c7d4 <process_recieved_packet+0xcb8>)
    c650:	4798      	blx	r3
    c652:	1c02      	adds	r2, r0, #0
    c654:	4b60      	ldr	r3, [pc, #384]	; (c7d8 <process_recieved_packet+0xcbc>)
    c656:	1c10      	adds	r0, r2, #0
    c658:	4798      	blx	r3
    c65a:	0002      	movs	r2, r0
    c65c:	4b5f      	ldr	r3, [pc, #380]	; (c7dc <process_recieved_packet+0xcc0>)
    c65e:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_END);
    c660:	4b6c      	ldr	r3, [pc, #432]	; (c814 <process_recieved_packet+0xcf8>)
    c662:	781b      	ldrb	r3, [r3, #0]
    c664:	b25a      	sxtb	r2, r3
    c666:	4b5a      	ldr	r3, [pc, #360]	; (c7d0 <process_recieved_packet+0xcb4>)
    c668:	0011      	movs	r1, r2
    c66a:	0018      	movs	r0, r3
    c66c:	4b59      	ldr	r3, [pc, #356]	; (c7d4 <process_recieved_packet+0xcb8>)
    c66e:	4798      	blx	r3
    c670:	1c02      	adds	r2, r0, #0
    c672:	4b59      	ldr	r3, [pc, #356]	; (c7d8 <process_recieved_packet+0xcbc>)
    c674:	1c10      	adds	r0, r2, #0
    c676:	4798      	blx	r3
    c678:	0002      	movs	r2, r0
    c67a:	4b58      	ldr	r3, [pc, #352]	; (c7dc <process_recieved_packet+0xcc0>)
    c67c:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_STRT);
    c67e:	4b66      	ldr	r3, [pc, #408]	; (c818 <process_recieved_packet+0xcfc>)
    c680:	781b      	ldrb	r3, [r3, #0]
    c682:	b25a      	sxtb	r2, r3
    c684:	4b52      	ldr	r3, [pc, #328]	; (c7d0 <process_recieved_packet+0xcb4>)
    c686:	0011      	movs	r1, r2
    c688:	0018      	movs	r0, r3
    c68a:	4b52      	ldr	r3, [pc, #328]	; (c7d4 <process_recieved_packet+0xcb8>)
    c68c:	4798      	blx	r3
    c68e:	1c02      	adds	r2, r0, #0
    c690:	4b51      	ldr	r3, [pc, #324]	; (c7d8 <process_recieved_packet+0xcbc>)
    c692:	1c10      	adds	r0, r2, #0
    c694:	4798      	blx	r3
    c696:	0002      	movs	r2, r0
    c698:	4b50      	ldr	r3, [pc, #320]	; (c7dc <process_recieved_packet+0xcc0>)
    c69a:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_END);
    c69c:	4b5f      	ldr	r3, [pc, #380]	; (c81c <process_recieved_packet+0xd00>)
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	b25a      	sxtb	r2, r3
    c6a2:	4b4b      	ldr	r3, [pc, #300]	; (c7d0 <process_recieved_packet+0xcb4>)
    c6a4:	0011      	movs	r1, r2
    c6a6:	0018      	movs	r0, r3
    c6a8:	4b4a      	ldr	r3, [pc, #296]	; (c7d4 <process_recieved_packet+0xcb8>)
    c6aa:	4798      	blx	r3
    c6ac:	1c02      	adds	r2, r0, #0
    c6ae:	4b4a      	ldr	r3, [pc, #296]	; (c7d8 <process_recieved_packet+0xcbc>)
    c6b0:	1c10      	adds	r0, r2, #0
    c6b2:	4798      	blx	r3
    c6b4:	0002      	movs	r2, r0
    c6b6:	4b49      	ldr	r3, [pc, #292]	; (c7dc <process_recieved_packet+0xcc0>)
    c6b8:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MIN)*100);
    c6ba:	4b59      	ldr	r3, [pc, #356]	; (c820 <process_recieved_packet+0xd04>)
    c6bc:	781b      	ldrb	r3, [r3, #0]
    c6be:	b25a      	sxtb	r2, r3
    c6c0:	4b43      	ldr	r3, [pc, #268]	; (c7d0 <process_recieved_packet+0xcb4>)
    c6c2:	0011      	movs	r1, r2
    c6c4:	0018      	movs	r0, r3
    c6c6:	4b43      	ldr	r3, [pc, #268]	; (c7d4 <process_recieved_packet+0xcb8>)
    c6c8:	4798      	blx	r3
    c6ca:	1c02      	adds	r2, r0, #0
    c6cc:	4b55      	ldr	r3, [pc, #340]	; (c824 <process_recieved_packet+0xd08>)
    c6ce:	4956      	ldr	r1, [pc, #344]	; (c828 <process_recieved_packet+0xd0c>)
    c6d0:	1c10      	adds	r0, r2, #0
    c6d2:	4798      	blx	r3
    c6d4:	1c03      	adds	r3, r0, #0
    c6d6:	1c1a      	adds	r2, r3, #0
    c6d8:	4b3f      	ldr	r3, [pc, #252]	; (c7d8 <process_recieved_packet+0xcbc>)
    c6da:	1c10      	adds	r0, r2, #0
    c6dc:	4798      	blx	r3
    c6de:	0002      	movs	r2, r0
    c6e0:	4b3e      	ldr	r3, [pc, #248]	; (c7dc <process_recieved_packet+0xcc0>)
    c6e2:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MAX)*100);
    c6e4:	4b51      	ldr	r3, [pc, #324]	; (c82c <process_recieved_packet+0xd10>)
    c6e6:	781b      	ldrb	r3, [r3, #0]
    c6e8:	b25a      	sxtb	r2, r3
    c6ea:	4b39      	ldr	r3, [pc, #228]	; (c7d0 <process_recieved_packet+0xcb4>)
    c6ec:	0011      	movs	r1, r2
    c6ee:	0018      	movs	r0, r3
    c6f0:	4b38      	ldr	r3, [pc, #224]	; (c7d4 <process_recieved_packet+0xcb8>)
    c6f2:	4798      	blx	r3
    c6f4:	1c02      	adds	r2, r0, #0
    c6f6:	4b4b      	ldr	r3, [pc, #300]	; (c824 <process_recieved_packet+0xd08>)
    c6f8:	494b      	ldr	r1, [pc, #300]	; (c828 <process_recieved_packet+0xd0c>)
    c6fa:	1c10      	adds	r0, r2, #0
    c6fc:	4798      	blx	r3
    c6fe:	1c03      	adds	r3, r0, #0
    c700:	1c1a      	adds	r2, r3, #0
    c702:	4b35      	ldr	r3, [pc, #212]	; (c7d8 <process_recieved_packet+0xcbc>)
    c704:	1c10      	adds	r0, r2, #0
    c706:	4798      	blx	r3
    c708:	0002      	movs	r2, r0
    c70a:	4b34      	ldr	r3, [pc, #208]	; (c7dc <process_recieved_packet+0xcc0>)
    c70c:	649a      	str	r2, [r3, #72]	; 0x48
			GET_LIMITS = 0;
    c70e:	4b48      	ldr	r3, [pc, #288]	; (c830 <process_recieved_packet+0xd14>)
    c710:	2200      	movs	r2, #0
    c712:	701a      	strb	r2, [r3, #0]
			SEND_LIMITS = 1;
    c714:	4b47      	ldr	r3, [pc, #284]	; (c834 <process_recieved_packet+0xd18>)
    c716:	2201      	movs	r2, #1
    c718:	701a      	strb	r2, [r3, #0]
}
    c71a:	e16a      	b.n	c9f2 <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_DECODED_PPM){
    c71c:	4b46      	ldr	r3, [pc, #280]	; (c838 <process_recieved_packet+0xd1c>)
    c71e:	781b      	ldrb	r3, [r3, #0]
    c720:	1dfa      	adds	r2, r7, #7
    c722:	7812      	ldrb	r2, [r2, #0]
    c724:	429a      	cmp	r2, r3
    c726:	d110      	bne.n	c74a <process_recieved_packet+0xc2e>
			latest_vesc_vals.pwm_val = (int32_t)(((vesc_revieve_packet.payload[1]&0x00FF)<<24)|((vesc_revieve_packet.payload[2]&0x00FF)<<16)|((vesc_revieve_packet.payload[3]&0x00FF)<<8)|(vesc_revieve_packet.payload[4]&0x00FF));
    c728:	4b44      	ldr	r3, [pc, #272]	; (c83c <process_recieved_packet+0xd20>)
    c72a:	791b      	ldrb	r3, [r3, #4]
    c72c:	061a      	lsls	r2, r3, #24
    c72e:	4b43      	ldr	r3, [pc, #268]	; (c83c <process_recieved_packet+0xd20>)
    c730:	795b      	ldrb	r3, [r3, #5]
    c732:	041b      	lsls	r3, r3, #16
    c734:	431a      	orrs	r2, r3
    c736:	4b41      	ldr	r3, [pc, #260]	; (c83c <process_recieved_packet+0xd20>)
    c738:	799b      	ldrb	r3, [r3, #6]
    c73a:	021b      	lsls	r3, r3, #8
    c73c:	4313      	orrs	r3, r2
    c73e:	4a3f      	ldr	r2, [pc, #252]	; (c83c <process_recieved_packet+0xd20>)
    c740:	79d2      	ldrb	r2, [r2, #7]
    c742:	431a      	orrs	r2, r3
    c744:	4b3e      	ldr	r3, [pc, #248]	; (c840 <process_recieved_packet+0xd24>)
    c746:	631a      	str	r2, [r3, #48]	; 0x30
}
    c748:	e153      	b.n	c9f2 <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_DECODED_CHUK){
    c74a:	4b3e      	ldr	r3, [pc, #248]	; (c844 <process_recieved_packet+0xd28>)
    c74c:	781b      	ldrb	r3, [r3, #0]
    c74e:	1dfa      	adds	r2, r7, #7
    c750:	7812      	ldrb	r2, [r2, #0]
    c752:	429a      	cmp	r2, r3
    c754:	d17a      	bne.n	c84c <process_recieved_packet+0xd30>
			rec_chuck_struct.js_x = vesc_revieve_packet.payload[1];
    c756:	4b39      	ldr	r3, [pc, #228]	; (c83c <process_recieved_packet+0xd20>)
    c758:	791b      	ldrb	r3, [r3, #4]
    c75a:	b25a      	sxtb	r2, r3
    c75c:	4b3a      	ldr	r3, [pc, #232]	; (c848 <process_recieved_packet+0xd2c>)
    c75e:	701a      	strb	r2, [r3, #0]
			rec_chuck_struct.js_y = vesc_revieve_packet.payload[2];
    c760:	4b36      	ldr	r3, [pc, #216]	; (c83c <process_recieved_packet+0xd20>)
    c762:	795b      	ldrb	r3, [r3, #5]
    c764:	b25a      	sxtb	r2, r3
    c766:	4b38      	ldr	r3, [pc, #224]	; (c848 <process_recieved_packet+0xd2c>)
    c768:	705a      	strb	r2, [r3, #1]
			rec_chuck_struct.bt_c = vesc_revieve_packet.payload[3];
    c76a:	4b34      	ldr	r3, [pc, #208]	; (c83c <process_recieved_packet+0xd20>)
    c76c:	799b      	ldrb	r3, [r3, #6]
    c76e:	1e5a      	subs	r2, r3, #1
    c770:	4193      	sbcs	r3, r2
    c772:	b2da      	uxtb	r2, r3
    c774:	4b34      	ldr	r3, [pc, #208]	; (c848 <process_recieved_packet+0xd2c>)
    c776:	721a      	strb	r2, [r3, #8]
			rec_chuck_struct.bt_z = vesc_revieve_packet.payload[4];
    c778:	4b30      	ldr	r3, [pc, #192]	; (c83c <process_recieved_packet+0xd20>)
    c77a:	79db      	ldrb	r3, [r3, #7]
    c77c:	1e5a      	subs	r2, r3, #1
    c77e:	4193      	sbcs	r3, r2
    c780:	b2da      	uxtb	r2, r3
    c782:	4b31      	ldr	r3, [pc, #196]	; (c848 <process_recieved_packet+0xd2c>)
    c784:	725a      	strb	r2, [r3, #9]
			rec_chuck_struct.acc_x = (int16_t)(((vesc_revieve_packet.payload[5] & 0x00FF) << 8)|(vesc_revieve_packet.payload[6] & 0x00FF));
    c786:	4b2d      	ldr	r3, [pc, #180]	; (c83c <process_recieved_packet+0xd20>)
    c788:	7a1b      	ldrb	r3, [r3, #8]
    c78a:	021b      	lsls	r3, r3, #8
    c78c:	b21a      	sxth	r2, r3
    c78e:	4b2b      	ldr	r3, [pc, #172]	; (c83c <process_recieved_packet+0xd20>)
    c790:	7a5b      	ldrb	r3, [r3, #9]
    c792:	b21b      	sxth	r3, r3
    c794:	4313      	orrs	r3, r2
    c796:	b21a      	sxth	r2, r3
    c798:	4b2b      	ldr	r3, [pc, #172]	; (c848 <process_recieved_packet+0xd2c>)
    c79a:	805a      	strh	r2, [r3, #2]
			rec_chuck_struct.acc_y = (int16_t)(((vesc_revieve_packet.payload[7] & 0x00FF) << 8)|(vesc_revieve_packet.payload[8] & 0x00FF));
    c79c:	4b27      	ldr	r3, [pc, #156]	; (c83c <process_recieved_packet+0xd20>)
    c79e:	7a9b      	ldrb	r3, [r3, #10]
    c7a0:	021b      	lsls	r3, r3, #8
    c7a2:	b21a      	sxth	r2, r3
    c7a4:	4b25      	ldr	r3, [pc, #148]	; (c83c <process_recieved_packet+0xd20>)
    c7a6:	7adb      	ldrb	r3, [r3, #11]
    c7a8:	b21b      	sxth	r3, r3
    c7aa:	4313      	orrs	r3, r2
    c7ac:	b21a      	sxth	r2, r3
    c7ae:	4b26      	ldr	r3, [pc, #152]	; (c848 <process_recieved_packet+0xd2c>)
    c7b0:	809a      	strh	r2, [r3, #4]
			rec_chuck_struct.acc_z = (int16_t)(((vesc_revieve_packet.payload[9] & 0x00FF) << 8)|(vesc_revieve_packet.payload[10] & 0x00FF));
    c7b2:	4b22      	ldr	r3, [pc, #136]	; (c83c <process_recieved_packet+0xd20>)
    c7b4:	7b1b      	ldrb	r3, [r3, #12]
    c7b6:	021b      	lsls	r3, r3, #8
    c7b8:	b21a      	sxth	r2, r3
    c7ba:	4b20      	ldr	r3, [pc, #128]	; (c83c <process_recieved_packet+0xd20>)
    c7bc:	7b5b      	ldrb	r3, [r3, #13]
    c7be:	b21b      	sxth	r3, r3
    c7c0:	4313      	orrs	r3, r2
    c7c2:	b21a      	sxth	r2, r3
    c7c4:	4b20      	ldr	r3, [pc, #128]	; (c848 <process_recieved_packet+0xd2c>)
    c7c6:	80da      	strh	r2, [r3, #6]
}
    c7c8:	e113      	b.n	c9f2 <process_recieved_packet+0xed6>
    c7ca:	46c0      	nop			; (mov r8, r8)
    c7cc:	2000034f 	.word	0x2000034f
    c7d0:	20000ce3 	.word	0x20000ce3
    c7d4:	0000ca0d 	.word	0x0000ca0d
    c7d8:	00015219 	.word	0x00015219
    c7dc:	20000fd4 	.word	0x20000fd4
    c7e0:	20000350 	.word	0x20000350
    c7e4:	20000351 	.word	0x20000351
    c7e8:	20000352 	.word	0x20000352
    c7ec:	20000353 	.word	0x20000353
    c7f0:	20000354 	.word	0x20000354
    c7f4:	20000355 	.word	0x20000355
    c7f8:	20000356 	.word	0x20000356
    c7fc:	20000357 	.word	0x20000357
    c800:	20000358 	.word	0x20000358
    c804:	20000359 	.word	0x20000359
    c808:	2000035a 	.word	0x2000035a
    c80c:	2000035b 	.word	0x2000035b
    c810:	2000035c 	.word	0x2000035c
    c814:	2000035d 	.word	0x2000035d
    c818:	2000035e 	.word	0x2000035e
    c81c:	2000035f 	.word	0x2000035f
    c820:	20000360 	.word	0x20000360
    c824:	00014ca1 	.word	0x00014ca1
    c828:	42c80000 	.word	0x42c80000
    c82c:	20000361 	.word	0x20000361
    c830:	20000019 	.word	0x20000019
    c834:	2000030e 	.word	0x2000030e
    c838:	2000033e 	.word	0x2000033e
    c83c:	20000ce0 	.word	0x20000ce0
    c840:	20000958 	.word	0x20000958
    c844:	2000033f 	.word	0x2000033f
    c848:	20001054 	.word	0x20001054
		} else if(packet_id == COMM_GET_VALUES_SELECTIVE){ // Only available in latest Official FW
    c84c:	4b6b      	ldr	r3, [pc, #428]	; (c9fc <process_recieved_packet+0xee0>)
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	1dfa      	adds	r2, r7, #7
    c852:	7812      	ldrb	r2, [r2, #0]
    c854:	429a      	cmp	r2, r3
    c856:	d000      	beq.n	c85a <process_recieved_packet+0xd3e>
    c858:	e0cb      	b.n	c9f2 <process_recieved_packet+0xed6>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[5] << 8) | vesc_revieve_packet.payload[6];
    c85a:	4b69      	ldr	r3, [pc, #420]	; (ca00 <process_recieved_packet+0xee4>)
    c85c:	7a1b      	ldrb	r3, [r3, #8]
    c85e:	021b      	lsls	r3, r3, #8
    c860:	b21a      	sxth	r2, r3
    c862:	4b67      	ldr	r3, [pc, #412]	; (ca00 <process_recieved_packet+0xee4>)
    c864:	7a5b      	ldrb	r3, [r3, #9]
    c866:	b21b      	sxth	r3, r3
    c868:	4313      	orrs	r3, r2
    c86a:	b21a      	sxth	r2, r3
    c86c:	4b65      	ldr	r3, [pc, #404]	; (ca04 <process_recieved_packet+0xee8>)
    c86e:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[7] << 24) | (vesc_revieve_packet.payload[8] << 16) | (vesc_revieve_packet.payload[9] << 8) | vesc_revieve_packet.payload[10];
    c870:	4b63      	ldr	r3, [pc, #396]	; (ca00 <process_recieved_packet+0xee4>)
    c872:	7a9b      	ldrb	r3, [r3, #10]
    c874:	061a      	lsls	r2, r3, #24
    c876:	4b62      	ldr	r3, [pc, #392]	; (ca00 <process_recieved_packet+0xee4>)
    c878:	7adb      	ldrb	r3, [r3, #11]
    c87a:	041b      	lsls	r3, r3, #16
    c87c:	431a      	orrs	r2, r3
    c87e:	4b60      	ldr	r3, [pc, #384]	; (ca00 <process_recieved_packet+0xee4>)
    c880:	7b1b      	ldrb	r3, [r3, #12]
    c882:	021b      	lsls	r3, r3, #8
    c884:	4313      	orrs	r3, r2
    c886:	4a5e      	ldr	r2, [pc, #376]	; (ca00 <process_recieved_packet+0xee4>)
    c888:	7b52      	ldrb	r2, [r2, #13]
    c88a:	431a      	orrs	r2, r3
    c88c:	4b5d      	ldr	r3, [pc, #372]	; (ca04 <process_recieved_packet+0xee8>)
    c88e:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[11] << 24) | (vesc_revieve_packet.payload[12] << 16) | (vesc_revieve_packet.payload[13] << 8) | vesc_revieve_packet.payload[14];
    c890:	4b5b      	ldr	r3, [pc, #364]	; (ca00 <process_recieved_packet+0xee4>)
    c892:	7b9b      	ldrb	r3, [r3, #14]
    c894:	061a      	lsls	r2, r3, #24
    c896:	4b5a      	ldr	r3, [pc, #360]	; (ca00 <process_recieved_packet+0xee4>)
    c898:	7bdb      	ldrb	r3, [r3, #15]
    c89a:	041b      	lsls	r3, r3, #16
    c89c:	431a      	orrs	r2, r3
    c89e:	4b58      	ldr	r3, [pc, #352]	; (ca00 <process_recieved_packet+0xee4>)
    c8a0:	7c1b      	ldrb	r3, [r3, #16]
    c8a2:	021b      	lsls	r3, r3, #8
    c8a4:	4313      	orrs	r3, r2
    c8a6:	4a56      	ldr	r2, [pc, #344]	; (ca00 <process_recieved_packet+0xee4>)
    c8a8:	7c52      	ldrb	r2, [r2, #17]
    c8aa:	431a      	orrs	r2, r3
    c8ac:	4b55      	ldr	r3, [pc, #340]	; (ca04 <process_recieved_packet+0xee8>)
    c8ae:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[15] << 8) | vesc_revieve_packet.payload[16];
    c8b0:	4b53      	ldr	r3, [pc, #332]	; (ca00 <process_recieved_packet+0xee4>)
    c8b2:	7c9b      	ldrb	r3, [r3, #18]
    c8b4:	021b      	lsls	r3, r3, #8
    c8b6:	b21a      	sxth	r2, r3
    c8b8:	4b51      	ldr	r3, [pc, #324]	; (ca00 <process_recieved_packet+0xee4>)
    c8ba:	7cdb      	ldrb	r3, [r3, #19]
    c8bc:	b21b      	sxth	r3, r3
    c8be:	4313      	orrs	r3, r2
    c8c0:	b21a      	sxth	r2, r3
    c8c2:	4b50      	ldr	r3, [pc, #320]	; (ca04 <process_recieved_packet+0xee8>)
    c8c4:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[17] << 24) | (vesc_revieve_packet.payload[18] << 16) | (vesc_revieve_packet.payload[19] << 8) | vesc_revieve_packet.payload[20];
    c8c6:	4b4e      	ldr	r3, [pc, #312]	; (ca00 <process_recieved_packet+0xee4>)
    c8c8:	7d1b      	ldrb	r3, [r3, #20]
    c8ca:	061a      	lsls	r2, r3, #24
    c8cc:	4b4c      	ldr	r3, [pc, #304]	; (ca00 <process_recieved_packet+0xee4>)
    c8ce:	7d5b      	ldrb	r3, [r3, #21]
    c8d0:	041b      	lsls	r3, r3, #16
    c8d2:	431a      	orrs	r2, r3
    c8d4:	4b4a      	ldr	r3, [pc, #296]	; (ca00 <process_recieved_packet+0xee4>)
    c8d6:	7d9b      	ldrb	r3, [r3, #22]
    c8d8:	021b      	lsls	r3, r3, #8
    c8da:	4313      	orrs	r3, r2
    c8dc:	4a48      	ldr	r2, [pc, #288]	; (ca00 <process_recieved_packet+0xee4>)
    c8de:	7dd2      	ldrb	r2, [r2, #23]
    c8e0:	431a      	orrs	r2, r3
    c8e2:	4b48      	ldr	r3, [pc, #288]	; (ca04 <process_recieved_packet+0xee8>)
    c8e4:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[21] << 8) | vesc_revieve_packet.payload[22];
    c8e6:	4b46      	ldr	r3, [pc, #280]	; (ca00 <process_recieved_packet+0xee4>)
    c8e8:	7e1b      	ldrb	r3, [r3, #24]
    c8ea:	021b      	lsls	r3, r3, #8
    c8ec:	b21a      	sxth	r2, r3
    c8ee:	4b44      	ldr	r3, [pc, #272]	; (ca00 <process_recieved_packet+0xee4>)
    c8f0:	7e5b      	ldrb	r3, [r3, #25]
    c8f2:	b21b      	sxth	r3, r3
    c8f4:	4313      	orrs	r3, r2
    c8f6:	b21a      	sxth	r2, r3
    c8f8:	4b42      	ldr	r3, [pc, #264]	; (ca04 <process_recieved_packet+0xee8>)
    c8fa:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[23] << 24) | (vesc_revieve_packet.payload[24] << 16) | (vesc_revieve_packet.payload[25] << 8) | vesc_revieve_packet.payload[26])*10;
    c8fc:	4b40      	ldr	r3, [pc, #256]	; (ca00 <process_recieved_packet+0xee4>)
    c8fe:	7e9b      	ldrb	r3, [r3, #26]
    c900:	061a      	lsls	r2, r3, #24
    c902:	4b3f      	ldr	r3, [pc, #252]	; (ca00 <process_recieved_packet+0xee4>)
    c904:	7edb      	ldrb	r3, [r3, #27]
    c906:	041b      	lsls	r3, r3, #16
    c908:	431a      	orrs	r2, r3
    c90a:	4b3d      	ldr	r3, [pc, #244]	; (ca00 <process_recieved_packet+0xee4>)
    c90c:	7f1b      	ldrb	r3, [r3, #28]
    c90e:	021b      	lsls	r3, r3, #8
    c910:	4313      	orrs	r3, r2
    c912:	4a3b      	ldr	r2, [pc, #236]	; (ca00 <process_recieved_packet+0xee4>)
    c914:	7f52      	ldrb	r2, [r2, #29]
    c916:	431a      	orrs	r2, r3
    c918:	0013      	movs	r3, r2
    c91a:	009b      	lsls	r3, r3, #2
    c91c:	189b      	adds	r3, r3, r2
    c91e:	005b      	lsls	r3, r3, #1
    c920:	001a      	movs	r2, r3
    c922:	4b38      	ldr	r3, [pc, #224]	; (ca04 <process_recieved_packet+0xee8>)
    c924:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[27] << 24) | (vesc_revieve_packet.payload[28] << 16) | (vesc_revieve_packet.payload[29] << 8) | vesc_revieve_packet.payload[30])*10;
    c926:	4b36      	ldr	r3, [pc, #216]	; (ca00 <process_recieved_packet+0xee4>)
    c928:	7f9b      	ldrb	r3, [r3, #30]
    c92a:	061a      	lsls	r2, r3, #24
    c92c:	4b34      	ldr	r3, [pc, #208]	; (ca00 <process_recieved_packet+0xee4>)
    c92e:	7fdb      	ldrb	r3, [r3, #31]
    c930:	041b      	lsls	r3, r3, #16
    c932:	431a      	orrs	r2, r3
    c934:	4b32      	ldr	r3, [pc, #200]	; (ca00 <process_recieved_packet+0xee4>)
    c936:	2120      	movs	r1, #32
    c938:	5c5b      	ldrb	r3, [r3, r1]
    c93a:	021b      	lsls	r3, r3, #8
    c93c:	4313      	orrs	r3, r2
    c93e:	4a30      	ldr	r2, [pc, #192]	; (ca00 <process_recieved_packet+0xee4>)
    c940:	2121      	movs	r1, #33	; 0x21
    c942:	5c52      	ldrb	r2, [r2, r1]
    c944:	431a      	orrs	r2, r3
    c946:	0013      	movs	r3, r2
    c948:	009b      	lsls	r3, r3, #2
    c94a:	189b      	adds	r3, r3, r2
    c94c:	005b      	lsls	r3, r3, #1
    c94e:	001a      	movs	r2, r3
    c950:	4b2c      	ldr	r3, [pc, #176]	; (ca04 <process_recieved_packet+0xee8>)
    c952:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[31] << 24) | (vesc_revieve_packet.payload[32] << 16) | (vesc_revieve_packet.payload[33] << 8) | vesc_revieve_packet.payload[34])/100;
    c954:	4b2a      	ldr	r3, [pc, #168]	; (ca00 <process_recieved_packet+0xee4>)
    c956:	2222      	movs	r2, #34	; 0x22
    c958:	5c9b      	ldrb	r3, [r3, r2]
    c95a:	061a      	lsls	r2, r3, #24
    c95c:	4b28      	ldr	r3, [pc, #160]	; (ca00 <process_recieved_packet+0xee4>)
    c95e:	2123      	movs	r1, #35	; 0x23
    c960:	5c5b      	ldrb	r3, [r3, r1]
    c962:	041b      	lsls	r3, r3, #16
    c964:	431a      	orrs	r2, r3
    c966:	4b26      	ldr	r3, [pc, #152]	; (ca00 <process_recieved_packet+0xee4>)
    c968:	2124      	movs	r1, #36	; 0x24
    c96a:	5c5b      	ldrb	r3, [r3, r1]
    c96c:	021b      	lsls	r3, r3, #8
    c96e:	4313      	orrs	r3, r2
    c970:	4a23      	ldr	r2, [pc, #140]	; (ca00 <process_recieved_packet+0xee4>)
    c972:	2125      	movs	r1, #37	; 0x25
    c974:	5c52      	ldrb	r2, [r2, r1]
    c976:	431a      	orrs	r2, r3
    c978:	4b23      	ldr	r3, [pc, #140]	; (ca08 <process_recieved_packet+0xeec>)
    c97a:	2164      	movs	r1, #100	; 0x64
    c97c:	0010      	movs	r0, r2
    c97e:	4798      	blx	r3
    c980:	0003      	movs	r3, r0
    c982:	001a      	movs	r2, r3
    c984:	4b1f      	ldr	r3, [pc, #124]	; (ca04 <process_recieved_packet+0xee8>)
    c986:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[35] << 24) | (vesc_revieve_packet.payload[36] << 16) | (vesc_revieve_packet.payload[37] << 8) | vesc_revieve_packet.payload[38])/100;
    c988:	4b1d      	ldr	r3, [pc, #116]	; (ca00 <process_recieved_packet+0xee4>)
    c98a:	2226      	movs	r2, #38	; 0x26
    c98c:	5c9b      	ldrb	r3, [r3, r2]
    c98e:	061a      	lsls	r2, r3, #24
    c990:	4b1b      	ldr	r3, [pc, #108]	; (ca00 <process_recieved_packet+0xee4>)
    c992:	2127      	movs	r1, #39	; 0x27
    c994:	5c5b      	ldrb	r3, [r3, r1]
    c996:	041b      	lsls	r3, r3, #16
    c998:	431a      	orrs	r2, r3
    c99a:	4b19      	ldr	r3, [pc, #100]	; (ca00 <process_recieved_packet+0xee4>)
    c99c:	2128      	movs	r1, #40	; 0x28
    c99e:	5c5b      	ldrb	r3, [r3, r1]
    c9a0:	021b      	lsls	r3, r3, #8
    c9a2:	4313      	orrs	r3, r2
    c9a4:	4a16      	ldr	r2, [pc, #88]	; (ca00 <process_recieved_packet+0xee4>)
    c9a6:	2129      	movs	r1, #41	; 0x29
    c9a8:	5c52      	ldrb	r2, [r2, r1]
    c9aa:	431a      	orrs	r2, r3
    c9ac:	4b16      	ldr	r3, [pc, #88]	; (ca08 <process_recieved_packet+0xeec>)
    c9ae:	2164      	movs	r1, #100	; 0x64
    c9b0:	0010      	movs	r0, r2
    c9b2:	4798      	blx	r3
    c9b4:	0003      	movs	r3, r0
    c9b6:	001a      	movs	r2, r3
    c9b8:	4b12      	ldr	r3, [pc, #72]	; (ca04 <process_recieved_packet+0xee8>)
    c9ba:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
    c9bc:	4b10      	ldr	r3, [pc, #64]	; (ca00 <process_recieved_packet+0xee4>)
    c9be:	222a      	movs	r2, #42	; 0x2a
    c9c0:	5c9b      	ldrb	r3, [r3, r2]
    c9c2:	061a      	lsls	r2, r3, #24
    c9c4:	4b0e      	ldr	r3, [pc, #56]	; (ca00 <process_recieved_packet+0xee4>)
    c9c6:	212b      	movs	r1, #43	; 0x2b
    c9c8:	5c5b      	ldrb	r3, [r3, r1]
    c9ca:	041b      	lsls	r3, r3, #16
    c9cc:	431a      	orrs	r2, r3
    c9ce:	4b0c      	ldr	r3, [pc, #48]	; (ca00 <process_recieved_packet+0xee4>)
    c9d0:	212c      	movs	r1, #44	; 0x2c
    c9d2:	5c5b      	ldrb	r3, [r3, r1]
    c9d4:	021b      	lsls	r3, r3, #8
    c9d6:	4313      	orrs	r3, r2
    c9d8:	4a09      	ldr	r2, [pc, #36]	; (ca00 <process_recieved_packet+0xee4>)
    c9da:	212d      	movs	r1, #45	; 0x2d
    c9dc:	5c52      	ldrb	r2, [r2, r1]
    c9de:	431a      	orrs	r2, r3
    c9e0:	4b08      	ldr	r3, [pc, #32]	; (ca04 <process_recieved_packet+0xee8>)
    c9e2:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
    c9e4:	4b06      	ldr	r3, [pc, #24]	; (ca00 <process_recieved_packet+0xee4>)
    c9e6:	222e      	movs	r2, #46	; 0x2e
    c9e8:	5c9b      	ldrb	r3, [r3, r2]
    c9ea:	b259      	sxtb	r1, r3
    c9ec:	4b05      	ldr	r3, [pc, #20]	; (ca04 <process_recieved_packet+0xee8>)
    c9ee:	222c      	movs	r2, #44	; 0x2c
    c9f0:	5499      	strb	r1, [r3, r2]
}
    c9f2:	46c0      	nop			; (mov r8, r8)
    c9f4:	46bd      	mov	sp, r7
    c9f6:	b002      	add	sp, #8
    c9f8:	bd80      	pop	{r7, pc}
    c9fa:	46c0      	nop			; (mov r8, r8)
    c9fc:	20000341 	.word	0x20000341
    ca00:	20000ce0 	.word	0x20000ce0
    ca04:	20000958 	.word	0x20000958
    ca08:	00014215 	.word	0x00014215

0000ca0c <buffer_get_float32_auto>:

float buffer_get_float32_auto(uint8_t *buffer, int8_t index) {
    ca0c:	b590      	push	{r4, r7, lr}
    ca0e:	b089      	sub	sp, #36	; 0x24
    ca10:	af00      	add	r7, sp, #0
    ca12:	6078      	str	r0, [r7, #4]
    ca14:	000a      	movs	r2, r1
    ca16:	1cfb      	adds	r3, r7, #3
    ca18:	701a      	strb	r2, [r3, #0]
	uint32_t res = ((uint32_t) buffer[index]) << 24 | ((uint32_t) buffer[index+1]) << 16 | ((uint32_t) buffer[index+2]) << 8 | ((uint32_t) buffer[index+3]);
    ca1a:	1cfb      	adds	r3, r7, #3
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	b25b      	sxtb	r3, r3
    ca20:	687a      	ldr	r2, [r7, #4]
    ca22:	18d3      	adds	r3, r2, r3
    ca24:	781b      	ldrb	r3, [r3, #0]
    ca26:	061a      	lsls	r2, r3, #24
    ca28:	1cfb      	adds	r3, r7, #3
    ca2a:	781b      	ldrb	r3, [r3, #0]
    ca2c:	b25b      	sxtb	r3, r3
    ca2e:	3301      	adds	r3, #1
    ca30:	6879      	ldr	r1, [r7, #4]
    ca32:	18cb      	adds	r3, r1, r3
    ca34:	781b      	ldrb	r3, [r3, #0]
    ca36:	041b      	lsls	r3, r3, #16
    ca38:	431a      	orrs	r2, r3
    ca3a:	1cfb      	adds	r3, r7, #3
    ca3c:	781b      	ldrb	r3, [r3, #0]
    ca3e:	b25b      	sxtb	r3, r3
    ca40:	3302      	adds	r3, #2
    ca42:	6879      	ldr	r1, [r7, #4]
    ca44:	18cb      	adds	r3, r1, r3
    ca46:	781b      	ldrb	r3, [r3, #0]
    ca48:	021b      	lsls	r3, r3, #8
    ca4a:	4313      	orrs	r3, r2
    ca4c:	1cfa      	adds	r2, r7, #3
    ca4e:	7812      	ldrb	r2, [r2, #0]
    ca50:	b252      	sxtb	r2, r2
    ca52:	3203      	adds	r2, #3
    ca54:	6879      	ldr	r1, [r7, #4]
    ca56:	188a      	adds	r2, r1, r2
    ca58:	7812      	ldrb	r2, [r2, #0]
    ca5a:	4313      	orrs	r3, r2
    ca5c:	617b      	str	r3, [r7, #20]

	int e = (res >> 23) & 0xFF;
    ca5e:	697b      	ldr	r3, [r7, #20]
    ca60:	0ddb      	lsrs	r3, r3, #23
    ca62:	001a      	movs	r2, r3
    ca64:	23ff      	movs	r3, #255	; 0xff
    ca66:	4013      	ands	r3, r2
    ca68:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
    ca6a:	697b      	ldr	r3, [r7, #20]
    ca6c:	025b      	lsls	r3, r3, #9
    ca6e:	0a5b      	lsrs	r3, r3, #9
    ca70:	613b      	str	r3, [r7, #16]
	bool neg = res & (1U << 31);
    ca72:	697b      	ldr	r3, [r7, #20]
    ca74:	0fdb      	lsrs	r3, r3, #31
    ca76:	07da      	lsls	r2, r3, #31
    ca78:	230f      	movs	r3, #15
    ca7a:	18fb      	adds	r3, r7, r3
    ca7c:	1e51      	subs	r1, r2, #1
    ca7e:	418a      	sbcs	r2, r1
    ca80:	701a      	strb	r2, [r3, #0]

	float sig = 0.0;
    ca82:	2300      	movs	r3, #0
    ca84:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
    ca86:	69fb      	ldr	r3, [r7, #28]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d102      	bne.n	ca92 <buffer_get_float32_auto+0x86>
    ca8c:	693b      	ldr	r3, [r7, #16]
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d01f      	beq.n	cad2 <buffer_get_float32_auto+0xc6>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
    ca92:	4b1a      	ldr	r3, [pc, #104]	; (cafc <buffer_get_float32_auto+0xf0>)
    ca94:	6938      	ldr	r0, [r7, #16]
    ca96:	4798      	blx	r3
    ca98:	1c02      	adds	r2, r0, #0
    ca9a:	4b19      	ldr	r3, [pc, #100]	; (cb00 <buffer_get_float32_auto+0xf4>)
    ca9c:	1c10      	adds	r0, r2, #0
    ca9e:	4798      	blx	r3
    caa0:	4c18      	ldr	r4, [pc, #96]	; (cb04 <buffer_get_float32_auto+0xf8>)
    caa2:	2200      	movs	r2, #0
    caa4:	4b18      	ldr	r3, [pc, #96]	; (cb08 <buffer_get_float32_auto+0xfc>)
    caa6:	47a0      	blx	r4
    caa8:	0003      	movs	r3, r0
    caaa:	000c      	movs	r4, r1
    caac:	0018      	movs	r0, r3
    caae:	0021      	movs	r1, r4
    cab0:	4c16      	ldr	r4, [pc, #88]	; (cb0c <buffer_get_float32_auto+0x100>)
    cab2:	2200      	movs	r2, #0
    cab4:	4b16      	ldr	r3, [pc, #88]	; (cb10 <buffer_get_float32_auto+0x104>)
    cab6:	47a0      	blx	r4
    cab8:	0003      	movs	r3, r0
    caba:	000c      	movs	r4, r1
    cabc:	0019      	movs	r1, r3
    cabe:	0022      	movs	r2, r4
    cac0:	4b14      	ldr	r3, [pc, #80]	; (cb14 <buffer_get_float32_auto+0x108>)
    cac2:	0008      	movs	r0, r1
    cac4:	0011      	movs	r1, r2
    cac6:	4798      	blx	r3
    cac8:	1c03      	adds	r3, r0, #0
    caca:	61bb      	str	r3, [r7, #24]
		e -= 126;
    cacc:	69fb      	ldr	r3, [r7, #28]
    cace:	3b7e      	subs	r3, #126	; 0x7e
    cad0:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
    cad2:	230f      	movs	r3, #15
    cad4:	18fb      	adds	r3, r7, r3
    cad6:	781b      	ldrb	r3, [r3, #0]
    cad8:	2b00      	cmp	r3, #0
    cada:	d004      	beq.n	cae6 <buffer_get_float32_auto+0xda>
		sig = -sig;
    cadc:	69bb      	ldr	r3, [r7, #24]
    cade:	2280      	movs	r2, #128	; 0x80
    cae0:	0612      	lsls	r2, r2, #24
    cae2:	4053      	eors	r3, r2
    cae4:	61bb      	str	r3, [r7, #24]
	}
	
	return ldexpf(sig, e);
    cae6:	69fa      	ldr	r2, [r7, #28]
    cae8:	69bb      	ldr	r3, [r7, #24]
    caea:	0011      	movs	r1, r2
    caec:	1c18      	adds	r0, r3, #0
    caee:	4b0a      	ldr	r3, [pc, #40]	; (cb18 <buffer_get_float32_auto+0x10c>)
    caf0:	4798      	blx	r3
    caf2:	1c03      	adds	r3, r0, #0
}
    caf4:	1c18      	adds	r0, r3, #0
    caf6:	46bd      	mov	sp, r7
    caf8:	b009      	add	sp, #36	; 0x24
    cafa:	bd90      	pop	{r4, r7, pc}
    cafc:	000152f9 	.word	0x000152f9
    cb00:	00016e95 	.word	0x00016e95
    cb04:	000159a5 	.word	0x000159a5
    cb08:	41700000 	.word	0x41700000
    cb0c:	00015385 	.word	0x00015385
    cb10:	3fe00000 	.word	0x3fe00000
    cb14:	00016f39 	.word	0x00016f39
    cb18:	00013fd1 	.word	0x00013fd1

0000cb1c <vesc_get_fw_version>:


void vesc_get_fw_version(){
    cb1c:	b590      	push	{r4, r7, lr}
    cb1e:	4c2d      	ldr	r4, [pc, #180]	; (cbd4 <vesc_get_fw_version+0xb8>)
    cb20:	44a5      	add	sp, r4
    cb22:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cb24:	4b2c      	ldr	r3, [pc, #176]	; (cbd8 <vesc_get_fw_version+0xbc>)
    cb26:	2282      	movs	r2, #130	; 0x82
    cb28:	0092      	lsls	r2, r2, #2
    cb2a:	4694      	mov	ip, r2
    cb2c:	44bc      	add	ip, r7
    cb2e:	4463      	add	r3, ip
    cb30:	2202      	movs	r2, #2
    cb32:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cb34:	4b28      	ldr	r3, [pc, #160]	; (cbd8 <vesc_get_fw_version+0xbc>)
    cb36:	2282      	movs	r2, #130	; 0x82
    cb38:	0092      	lsls	r2, r2, #2
    cb3a:	4694      	mov	ip, r2
    cb3c:	44bc      	add	ip, r7
    cb3e:	4463      	add	r3, ip
    cb40:	2201      	movs	r2, #1
    cb42:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_FW_VERSION;
    cb44:	4b25      	ldr	r3, [pc, #148]	; (cbdc <vesc_get_fw_version+0xc0>)
    cb46:	781a      	ldrb	r2, [r3, #0]
    cb48:	4b23      	ldr	r3, [pc, #140]	; (cbd8 <vesc_get_fw_version+0xbc>)
    cb4a:	2182      	movs	r1, #130	; 0x82
    cb4c:	0089      	lsls	r1, r1, #2
    cb4e:	468c      	mov	ip, r1
    cb50:	44bc      	add	ip, r7
    cb52:	4463      	add	r3, ip
    cb54:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cb56:	4b22      	ldr	r3, [pc, #136]	; (cbe0 <vesc_get_fw_version+0xc4>)
    cb58:	18fc      	adds	r4, r7, r3
    cb5a:	003b      	movs	r3, r7
    cb5c:	3303      	adds	r3, #3
    cb5e:	2101      	movs	r1, #1
    cb60:	0018      	movs	r0, r3
    cb62:	4b20      	ldr	r3, [pc, #128]	; (cbe4 <vesc_get_fw_version+0xc8>)
    cb64:	4798      	blx	r3
    cb66:	0003      	movs	r3, r0
    cb68:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cb6a:	4b1d      	ldr	r3, [pc, #116]	; (cbe0 <vesc_get_fw_version+0xc4>)
    cb6c:	18fb      	adds	r3, r7, r3
    cb6e:	881b      	ldrh	r3, [r3, #0]
    cb70:	0a1b      	lsrs	r3, r3, #8
    cb72:	b29b      	uxth	r3, r3
    cb74:	b2d9      	uxtb	r1, r3
    cb76:	4b18      	ldr	r3, [pc, #96]	; (cbd8 <vesc_get_fw_version+0xbc>)
    cb78:	2282      	movs	r2, #130	; 0x82
    cb7a:	0092      	lsls	r2, r2, #2
    cb7c:	4694      	mov	ip, r2
    cb7e:	44bc      	add	ip, r7
    cb80:	4463      	add	r3, ip
    cb82:	4a19      	ldr	r2, [pc, #100]	; (cbe8 <vesc_get_fw_version+0xcc>)
    cb84:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cb86:	4b16      	ldr	r3, [pc, #88]	; (cbe0 <vesc_get_fw_version+0xc4>)
    cb88:	18fb      	adds	r3, r7, r3
    cb8a:	881b      	ldrh	r3, [r3, #0]
    cb8c:	b2d9      	uxtb	r1, r3
    cb8e:	4b12      	ldr	r3, [pc, #72]	; (cbd8 <vesc_get_fw_version+0xbc>)
    cb90:	2282      	movs	r2, #130	; 0x82
    cb92:	0092      	lsls	r2, r2, #2
    cb94:	18ba      	adds	r2, r7, r2
    cb96:	18d2      	adds	r2, r2, r3
    cb98:	2381      	movs	r3, #129	; 0x81
    cb9a:	009b      	lsls	r3, r3, #2
    cb9c:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cb9e:	4b0e      	ldr	r3, [pc, #56]	; (cbd8 <vesc_get_fw_version+0xbc>)
    cba0:	2282      	movs	r2, #130	; 0x82
    cba2:	0092      	lsls	r2, r2, #2
    cba4:	18ba      	adds	r2, r7, r2
    cba6:	18d4      	adds	r4, r2, r3
    cba8:	466b      	mov	r3, sp
    cbaa:	0018      	movs	r0, r3
    cbac:	0021      	movs	r1, r4
    cbae:	3110      	adds	r1, #16
    cbb0:	23fb      	movs	r3, #251	; 0xfb
    cbb2:	005b      	lsls	r3, r3, #1
    cbb4:	001a      	movs	r2, r3
    cbb6:	4b0d      	ldr	r3, [pc, #52]	; (cbec <vesc_get_fw_version+0xd0>)
    cbb8:	4798      	blx	r3
    cbba:	6820      	ldr	r0, [r4, #0]
    cbbc:	6861      	ldr	r1, [r4, #4]
    cbbe:	68a2      	ldr	r2, [r4, #8]
    cbc0:	68e3      	ldr	r3, [r4, #12]
    cbc2:	4c0b      	ldr	r4, [pc, #44]	; (cbf0 <vesc_get_fw_version+0xd4>)
    cbc4:	47a0      	blx	r4
}
    cbc6:	46c0      	nop			; (mov r8, r8)
    cbc8:	46bd      	mov	sp, r7
    cbca:	2383      	movs	r3, #131	; 0x83
    cbcc:	009b      	lsls	r3, r3, #2
    cbce:	449d      	add	sp, r3
    cbd0:	bd90      	pop	{r4, r7, pc}
    cbd2:	46c0      	nop			; (mov r8, r8)
    cbd4:	fffffbfc 	.word	0xfffffbfc
    cbd8:	fffffdf8 	.word	0xfffffdf8
    cbdc:	2000033a 	.word	0x2000033a
    cbe0:	00000206 	.word	0x00000206
    cbe4:	0000b86d 	.word	0x0000b86d
    cbe8:	00000203 	.word	0x00000203
    cbec:	000170dd 	.word	0x000170dd
    cbf0:	0000b9c1 	.word	0x0000b9c1

0000cbf4 <vesc_get_vals>:

void vesc_get_vals(){
    cbf4:	b590      	push	{r4, r7, lr}
    cbf6:	4c6a      	ldr	r4, [pc, #424]	; (cda0 <vesc_get_vals+0x1ac>)
    cbf8:	44a5      	add	sp, r4
    cbfa:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;
	
	send_pack.start = 0x02;
    cbfc:	4b69      	ldr	r3, [pc, #420]	; (cda4 <vesc_get_vals+0x1b0>)
    cbfe:	2284      	movs	r2, #132	; 0x84
    cc00:	0092      	lsls	r2, r2, #2
    cc02:	4694      	mov	ip, r2
    cc04:	44bc      	add	ip, r7
    cc06:	4463      	add	r3, ip
    cc08:	2202      	movs	r2, #2
    cc0a:	701a      	strb	r2, [r3, #0]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
    cc0c:	4b66      	ldr	r3, [pc, #408]	; (cda8 <vesc_get_vals+0x1b4>)
    cc0e:	2235      	movs	r2, #53	; 0x35
    cc10:	5c9b      	ldrb	r3, [r3, r2]
    cc12:	2b2f      	cmp	r3, #47	; 0x2f
    cc14:	d972      	bls.n	ccfc <vesc_get_vals+0x108>
    cc16:	4b64      	ldr	r3, [pc, #400]	; (cda8 <vesc_get_vals+0x1b4>)
    cc18:	2235      	movs	r2, #53	; 0x35
    cc1a:	5c9b      	ldrb	r3, [r3, r2]
    cc1c:	2b63      	cmp	r3, #99	; 0x63
    cc1e:	d86d      	bhi.n	ccfc <vesc_get_vals+0x108>
		send_pack.len[0] = 0x05;
    cc20:	4b60      	ldr	r3, [pc, #384]	; (cda4 <vesc_get_vals+0x1b0>)
    cc22:	2284      	movs	r2, #132	; 0x84
    cc24:	0092      	lsls	r2, r2, #2
    cc26:	4694      	mov	ip, r2
    cc28:	44bc      	add	ip, r7
    cc2a:	4463      	add	r3, ip
    cc2c:	2205      	movs	r2, #5
    cc2e:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES_SELECTIVE;
    cc30:	4b5e      	ldr	r3, [pc, #376]	; (cdac <vesc_get_vals+0x1b8>)
    cc32:	781a      	ldrb	r2, [r3, #0]
    cc34:	4b5b      	ldr	r3, [pc, #364]	; (cda4 <vesc_get_vals+0x1b0>)
    cc36:	2184      	movs	r1, #132	; 0x84
    cc38:	0089      	lsls	r1, r1, #2
    cc3a:	468c      	mov	ip, r1
    cc3c:	44bc      	add	ip, r7
    cc3e:	4463      	add	r3, ip
    cc40:	70da      	strb	r2, [r3, #3]
		int32_t mask = (uint32_t)0b0001011111111001101;
    cc42:	4b5b      	ldr	r3, [pc, #364]	; (cdb0 <vesc_get_vals+0x1bc>)
    cc44:	2283      	movs	r2, #131	; 0x83
    cc46:	0092      	lsls	r2, r2, #2
    cc48:	18ba      	adds	r2, r7, r2
    cc4a:	6013      	str	r3, [r2, #0]
		send_pack.payload[1] = (mask>>24)&0xFF;
    cc4c:	2383      	movs	r3, #131	; 0x83
    cc4e:	009b      	lsls	r3, r3, #2
    cc50:	18fb      	adds	r3, r7, r3
    cc52:	681b      	ldr	r3, [r3, #0]
    cc54:	0e1b      	lsrs	r3, r3, #24
    cc56:	b2da      	uxtb	r2, r3
    cc58:	4b52      	ldr	r3, [pc, #328]	; (cda4 <vesc_get_vals+0x1b0>)
    cc5a:	2184      	movs	r1, #132	; 0x84
    cc5c:	0089      	lsls	r1, r1, #2
    cc5e:	468c      	mov	ip, r1
    cc60:	44bc      	add	ip, r7
    cc62:	4463      	add	r3, ip
    cc64:	711a      	strb	r2, [r3, #4]
		send_pack.payload[2] = (mask>>16)&0xFF;
    cc66:	2383      	movs	r3, #131	; 0x83
    cc68:	009b      	lsls	r3, r3, #2
    cc6a:	18fb      	adds	r3, r7, r3
    cc6c:	681b      	ldr	r3, [r3, #0]
    cc6e:	141b      	asrs	r3, r3, #16
    cc70:	b2da      	uxtb	r2, r3
    cc72:	4b4c      	ldr	r3, [pc, #304]	; (cda4 <vesc_get_vals+0x1b0>)
    cc74:	2184      	movs	r1, #132	; 0x84
    cc76:	0089      	lsls	r1, r1, #2
    cc78:	468c      	mov	ip, r1
    cc7a:	44bc      	add	ip, r7
    cc7c:	4463      	add	r3, ip
    cc7e:	715a      	strb	r2, [r3, #5]
		send_pack.payload[3] = (mask>>8)&0xFF;
    cc80:	2383      	movs	r3, #131	; 0x83
    cc82:	009b      	lsls	r3, r3, #2
    cc84:	18fb      	adds	r3, r7, r3
    cc86:	681b      	ldr	r3, [r3, #0]
    cc88:	121b      	asrs	r3, r3, #8
    cc8a:	b2da      	uxtb	r2, r3
    cc8c:	4b45      	ldr	r3, [pc, #276]	; (cda4 <vesc_get_vals+0x1b0>)
    cc8e:	2184      	movs	r1, #132	; 0x84
    cc90:	0089      	lsls	r1, r1, #2
    cc92:	468c      	mov	ip, r1
    cc94:	44bc      	add	ip, r7
    cc96:	4463      	add	r3, ip
    cc98:	719a      	strb	r2, [r3, #6]
		send_pack.payload[4] = (mask&0xFF);
    cc9a:	2383      	movs	r3, #131	; 0x83
    cc9c:	009b      	lsls	r3, r3, #2
    cc9e:	18fb      	adds	r3, r7, r3
    cca0:	681b      	ldr	r3, [r3, #0]
    cca2:	b2da      	uxtb	r2, r3
    cca4:	4b3f      	ldr	r3, [pc, #252]	; (cda4 <vesc_get_vals+0x1b0>)
    cca6:	2184      	movs	r1, #132	; 0x84
    cca8:	0089      	lsls	r1, r1, #2
    ccaa:	468c      	mov	ip, r1
    ccac:	44bc      	add	ip, r7
    ccae:	4463      	add	r3, ip
    ccb0:	71da      	strb	r2, [r3, #7]
		uint16_t crc = crc16(send_pack.payload, 5);
    ccb2:	4b40      	ldr	r3, [pc, #256]	; (cdb4 <vesc_get_vals+0x1c0>)
    ccb4:	18fc      	adds	r4, r7, r3
    ccb6:	003b      	movs	r3, r7
    ccb8:	3303      	adds	r3, #3
    ccba:	2105      	movs	r1, #5
    ccbc:	0018      	movs	r0, r3
    ccbe:	4b3e      	ldr	r3, [pc, #248]	; (cdb8 <vesc_get_vals+0x1c4>)
    ccc0:	4798      	blx	r3
    ccc2:	0003      	movs	r3, r0
    ccc4:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    ccc6:	4b3b      	ldr	r3, [pc, #236]	; (cdb4 <vesc_get_vals+0x1c0>)
    ccc8:	18fb      	adds	r3, r7, r3
    ccca:	881b      	ldrh	r3, [r3, #0]
    cccc:	0a1b      	lsrs	r3, r3, #8
    ccce:	b29b      	uxth	r3, r3
    ccd0:	b2d9      	uxtb	r1, r3
    ccd2:	4b34      	ldr	r3, [pc, #208]	; (cda4 <vesc_get_vals+0x1b0>)
    ccd4:	2284      	movs	r2, #132	; 0x84
    ccd6:	0092      	lsls	r2, r2, #2
    ccd8:	4694      	mov	ip, r2
    ccda:	44bc      	add	ip, r7
    ccdc:	4463      	add	r3, ip
    ccde:	4a37      	ldr	r2, [pc, #220]	; (cdbc <vesc_get_vals+0x1c8>)
    cce0:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cce2:	4b34      	ldr	r3, [pc, #208]	; (cdb4 <vesc_get_vals+0x1c0>)
    cce4:	18fb      	adds	r3, r7, r3
    cce6:	881b      	ldrh	r3, [r3, #0]
    cce8:	b2d9      	uxtb	r1, r3
    ccea:	4b2e      	ldr	r3, [pc, #184]	; (cda4 <vesc_get_vals+0x1b0>)
    ccec:	2284      	movs	r2, #132	; 0x84
    ccee:	0092      	lsls	r2, r2, #2
    ccf0:	18ba      	adds	r2, r7, r2
    ccf2:	18d2      	adds	r2, r2, r3
    ccf4:	2381      	movs	r3, #129	; 0x81
    ccf6:	009b      	lsls	r3, r3, #2
    ccf8:	54d1      	strb	r1, [r2, r3]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
    ccfa:	e037      	b.n	cd6c <vesc_get_vals+0x178>
	} else {
		send_pack.len[0] = 0x01;
    ccfc:	4b29      	ldr	r3, [pc, #164]	; (cda4 <vesc_get_vals+0x1b0>)
    ccfe:	2284      	movs	r2, #132	; 0x84
    cd00:	0092      	lsls	r2, r2, #2
    cd02:	4694      	mov	ip, r2
    cd04:	44bc      	add	ip, r7
    cd06:	4463      	add	r3, ip
    cd08:	2201      	movs	r2, #1
    cd0a:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES;
    cd0c:	4b2c      	ldr	r3, [pc, #176]	; (cdc0 <vesc_get_vals+0x1cc>)
    cd0e:	781a      	ldrb	r2, [r3, #0]
    cd10:	4b24      	ldr	r3, [pc, #144]	; (cda4 <vesc_get_vals+0x1b0>)
    cd12:	2184      	movs	r1, #132	; 0x84
    cd14:	0089      	lsls	r1, r1, #2
    cd16:	468c      	mov	ip, r1
    cd18:	44bc      	add	ip, r7
    cd1a:	4463      	add	r3, ip
    cd1c:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
    cd1e:	2382      	movs	r3, #130	; 0x82
    cd20:	009b      	lsls	r3, r3, #2
    cd22:	18fc      	adds	r4, r7, r3
    cd24:	003b      	movs	r3, r7
    cd26:	3303      	adds	r3, #3
    cd28:	2101      	movs	r1, #1
    cd2a:	0018      	movs	r0, r3
    cd2c:	4b22      	ldr	r3, [pc, #136]	; (cdb8 <vesc_get_vals+0x1c4>)
    cd2e:	4798      	blx	r3
    cd30:	0003      	movs	r3, r0
    cd32:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cd34:	2382      	movs	r3, #130	; 0x82
    cd36:	009b      	lsls	r3, r3, #2
    cd38:	18fb      	adds	r3, r7, r3
    cd3a:	881b      	ldrh	r3, [r3, #0]
    cd3c:	0a1b      	lsrs	r3, r3, #8
    cd3e:	b29b      	uxth	r3, r3
    cd40:	b2d9      	uxtb	r1, r3
    cd42:	4b18      	ldr	r3, [pc, #96]	; (cda4 <vesc_get_vals+0x1b0>)
    cd44:	2284      	movs	r2, #132	; 0x84
    cd46:	0092      	lsls	r2, r2, #2
    cd48:	4694      	mov	ip, r2
    cd4a:	44bc      	add	ip, r7
    cd4c:	4463      	add	r3, ip
    cd4e:	4a1b      	ldr	r2, [pc, #108]	; (cdbc <vesc_get_vals+0x1c8>)
    cd50:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cd52:	2382      	movs	r3, #130	; 0x82
    cd54:	009b      	lsls	r3, r3, #2
    cd56:	18fb      	adds	r3, r7, r3
    cd58:	881b      	ldrh	r3, [r3, #0]
    cd5a:	b2d9      	uxtb	r1, r3
    cd5c:	4b11      	ldr	r3, [pc, #68]	; (cda4 <vesc_get_vals+0x1b0>)
    cd5e:	2284      	movs	r2, #132	; 0x84
    cd60:	0092      	lsls	r2, r2, #2
    cd62:	18ba      	adds	r2, r7, r2
    cd64:	18d2      	adds	r2, r2, r3
    cd66:	2381      	movs	r3, #129	; 0x81
    cd68:	009b      	lsls	r3, r3, #2
    cd6a:	54d1      	strb	r1, [r2, r3]
	}

	send_packet(send_pack);
    cd6c:	4b0d      	ldr	r3, [pc, #52]	; (cda4 <vesc_get_vals+0x1b0>)
    cd6e:	2284      	movs	r2, #132	; 0x84
    cd70:	0092      	lsls	r2, r2, #2
    cd72:	18ba      	adds	r2, r7, r2
    cd74:	18d4      	adds	r4, r2, r3
    cd76:	466b      	mov	r3, sp
    cd78:	0018      	movs	r0, r3
    cd7a:	0021      	movs	r1, r4
    cd7c:	3110      	adds	r1, #16
    cd7e:	23fb      	movs	r3, #251	; 0xfb
    cd80:	005b      	lsls	r3, r3, #1
    cd82:	001a      	movs	r2, r3
    cd84:	4b0f      	ldr	r3, [pc, #60]	; (cdc4 <vesc_get_vals+0x1d0>)
    cd86:	4798      	blx	r3
    cd88:	6820      	ldr	r0, [r4, #0]
    cd8a:	6861      	ldr	r1, [r4, #4]
    cd8c:	68a2      	ldr	r2, [r4, #8]
    cd8e:	68e3      	ldr	r3, [r4, #12]
    cd90:	4c0d      	ldr	r4, [pc, #52]	; (cdc8 <vesc_get_vals+0x1d4>)
    cd92:	47a0      	blx	r4
}
    cd94:	46c0      	nop			; (mov r8, r8)
    cd96:	46bd      	mov	sp, r7
    cd98:	2385      	movs	r3, #133	; 0x85
    cd9a:	009b      	lsls	r3, r3, #2
    cd9c:	449d      	add	sp, r3
    cd9e:	bd90      	pop	{r4, r7, pc}
    cda0:	fffffbf4 	.word	0xfffffbf4
    cda4:	fffffdf0 	.word	0xfffffdf0
    cda8:	20000958 	.word	0x20000958
    cdac:	20000341 	.word	0x20000341
    cdb0:	0000bfcd 	.word	0x0000bfcd
    cdb4:	0000020a 	.word	0x0000020a
    cdb8:	0000b86d 	.word	0x0000b86d
    cdbc:	00000203 	.word	0x00000203
    cdc0:	2000033b 	.word	0x2000033b
    cdc4:	000170dd 	.word	0x000170dd
    cdc8:	0000b9c1 	.word	0x0000b9c1

0000cdcc <vesc_get_mcconf>:

void vesc_get_mcconf(){
    cdcc:	b590      	push	{r4, r7, lr}
    cdce:	4c2d      	ldr	r4, [pc, #180]	; (ce84 <vesc_get_mcconf+0xb8>)
    cdd0:	44a5      	add	sp, r4
    cdd2:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cdd4:	4b2c      	ldr	r3, [pc, #176]	; (ce88 <vesc_get_mcconf+0xbc>)
    cdd6:	2282      	movs	r2, #130	; 0x82
    cdd8:	0092      	lsls	r2, r2, #2
    cdda:	4694      	mov	ip, r2
    cddc:	44bc      	add	ip, r7
    cdde:	4463      	add	r3, ip
    cde0:	2202      	movs	r2, #2
    cde2:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cde4:	4b28      	ldr	r3, [pc, #160]	; (ce88 <vesc_get_mcconf+0xbc>)
    cde6:	2282      	movs	r2, #130	; 0x82
    cde8:	0092      	lsls	r2, r2, #2
    cdea:	4694      	mov	ip, r2
    cdec:	44bc      	add	ip, r7
    cdee:	4463      	add	r3, ip
    cdf0:	2201      	movs	r2, #1
    cdf2:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_MCCONF;
    cdf4:	4b25      	ldr	r3, [pc, #148]	; (ce8c <vesc_get_mcconf+0xc0>)
    cdf6:	781a      	ldrb	r2, [r3, #0]
    cdf8:	4b23      	ldr	r3, [pc, #140]	; (ce88 <vesc_get_mcconf+0xbc>)
    cdfa:	2182      	movs	r1, #130	; 0x82
    cdfc:	0089      	lsls	r1, r1, #2
    cdfe:	468c      	mov	ip, r1
    ce00:	44bc      	add	ip, r7
    ce02:	4463      	add	r3, ip
    ce04:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    ce06:	4b22      	ldr	r3, [pc, #136]	; (ce90 <vesc_get_mcconf+0xc4>)
    ce08:	18fc      	adds	r4, r7, r3
    ce0a:	003b      	movs	r3, r7
    ce0c:	3303      	adds	r3, #3
    ce0e:	2101      	movs	r1, #1
    ce10:	0018      	movs	r0, r3
    ce12:	4b20      	ldr	r3, [pc, #128]	; (ce94 <vesc_get_mcconf+0xc8>)
    ce14:	4798      	blx	r3
    ce16:	0003      	movs	r3, r0
    ce18:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    ce1a:	4b1d      	ldr	r3, [pc, #116]	; (ce90 <vesc_get_mcconf+0xc4>)
    ce1c:	18fb      	adds	r3, r7, r3
    ce1e:	881b      	ldrh	r3, [r3, #0]
    ce20:	0a1b      	lsrs	r3, r3, #8
    ce22:	b29b      	uxth	r3, r3
    ce24:	b2d9      	uxtb	r1, r3
    ce26:	4b18      	ldr	r3, [pc, #96]	; (ce88 <vesc_get_mcconf+0xbc>)
    ce28:	2282      	movs	r2, #130	; 0x82
    ce2a:	0092      	lsls	r2, r2, #2
    ce2c:	4694      	mov	ip, r2
    ce2e:	44bc      	add	ip, r7
    ce30:	4463      	add	r3, ip
    ce32:	4a19      	ldr	r2, [pc, #100]	; (ce98 <vesc_get_mcconf+0xcc>)
    ce34:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    ce36:	4b16      	ldr	r3, [pc, #88]	; (ce90 <vesc_get_mcconf+0xc4>)
    ce38:	18fb      	adds	r3, r7, r3
    ce3a:	881b      	ldrh	r3, [r3, #0]
    ce3c:	b2d9      	uxtb	r1, r3
    ce3e:	4b12      	ldr	r3, [pc, #72]	; (ce88 <vesc_get_mcconf+0xbc>)
    ce40:	2282      	movs	r2, #130	; 0x82
    ce42:	0092      	lsls	r2, r2, #2
    ce44:	18ba      	adds	r2, r7, r2
    ce46:	18d2      	adds	r2, r2, r3
    ce48:	2381      	movs	r3, #129	; 0x81
    ce4a:	009b      	lsls	r3, r3, #2
    ce4c:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    ce4e:	4b0e      	ldr	r3, [pc, #56]	; (ce88 <vesc_get_mcconf+0xbc>)
    ce50:	2282      	movs	r2, #130	; 0x82
    ce52:	0092      	lsls	r2, r2, #2
    ce54:	18ba      	adds	r2, r7, r2
    ce56:	18d4      	adds	r4, r2, r3
    ce58:	466b      	mov	r3, sp
    ce5a:	0018      	movs	r0, r3
    ce5c:	0021      	movs	r1, r4
    ce5e:	3110      	adds	r1, #16
    ce60:	23fb      	movs	r3, #251	; 0xfb
    ce62:	005b      	lsls	r3, r3, #1
    ce64:	001a      	movs	r2, r3
    ce66:	4b0d      	ldr	r3, [pc, #52]	; (ce9c <vesc_get_mcconf+0xd0>)
    ce68:	4798      	blx	r3
    ce6a:	6820      	ldr	r0, [r4, #0]
    ce6c:	6861      	ldr	r1, [r4, #4]
    ce6e:	68a2      	ldr	r2, [r4, #8]
    ce70:	68e3      	ldr	r3, [r4, #12]
    ce72:	4c0b      	ldr	r4, [pc, #44]	; (cea0 <vesc_get_mcconf+0xd4>)
    ce74:	47a0      	blx	r4
}
    ce76:	46c0      	nop			; (mov r8, r8)
    ce78:	46bd      	mov	sp, r7
    ce7a:	2383      	movs	r3, #131	; 0x83
    ce7c:	009b      	lsls	r3, r3, #2
    ce7e:	449d      	add	sp, r3
    ce80:	bd90      	pop	{r4, r7, pc}
    ce82:	46c0      	nop			; (mov r8, r8)
    ce84:	fffffbfc 	.word	0xfffffbfc
    ce88:	fffffdf8 	.word	0xfffffdf8
    ce8c:	2000033c 	.word	0x2000033c
    ce90:	00000206 	.word	0x00000206
    ce94:	0000b86d 	.word	0x0000b86d
    ce98:	00000203 	.word	0x00000203
    ce9c:	000170dd 	.word	0x000170dd
    cea0:	0000b9c1 	.word	0x0000b9c1

0000cea4 <vesc_get_pwm>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_get_pwm(){
    cea4:	b590      	push	{r4, r7, lr}
    cea6:	4c2d      	ldr	r4, [pc, #180]	; (cf5c <vesc_get_pwm+0xb8>)
    cea8:	44a5      	add	sp, r4
    ceaa:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    ceac:	4b2c      	ldr	r3, [pc, #176]	; (cf60 <vesc_get_pwm+0xbc>)
    ceae:	2282      	movs	r2, #130	; 0x82
    ceb0:	0092      	lsls	r2, r2, #2
    ceb2:	4694      	mov	ip, r2
    ceb4:	44bc      	add	ip, r7
    ceb6:	4463      	add	r3, ip
    ceb8:	2202      	movs	r2, #2
    ceba:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cebc:	4b28      	ldr	r3, [pc, #160]	; (cf60 <vesc_get_pwm+0xbc>)
    cebe:	2282      	movs	r2, #130	; 0x82
    cec0:	0092      	lsls	r2, r2, #2
    cec2:	4694      	mov	ip, r2
    cec4:	44bc      	add	ip, r7
    cec6:	4463      	add	r3, ip
    cec8:	2201      	movs	r2, #1
    ceca:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_PPM;
    cecc:	4b25      	ldr	r3, [pc, #148]	; (cf64 <vesc_get_pwm+0xc0>)
    cece:	781a      	ldrb	r2, [r3, #0]
    ced0:	4b23      	ldr	r3, [pc, #140]	; (cf60 <vesc_get_pwm+0xbc>)
    ced2:	2182      	movs	r1, #130	; 0x82
    ced4:	0089      	lsls	r1, r1, #2
    ced6:	468c      	mov	ip, r1
    ced8:	44bc      	add	ip, r7
    ceda:	4463      	add	r3, ip
    cedc:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cede:	4b22      	ldr	r3, [pc, #136]	; (cf68 <vesc_get_pwm+0xc4>)
    cee0:	18fc      	adds	r4, r7, r3
    cee2:	003b      	movs	r3, r7
    cee4:	3303      	adds	r3, #3
    cee6:	2101      	movs	r1, #1
    cee8:	0018      	movs	r0, r3
    ceea:	4b20      	ldr	r3, [pc, #128]	; (cf6c <vesc_get_pwm+0xc8>)
    ceec:	4798      	blx	r3
    ceee:	0003      	movs	r3, r0
    cef0:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cef2:	4b1d      	ldr	r3, [pc, #116]	; (cf68 <vesc_get_pwm+0xc4>)
    cef4:	18fb      	adds	r3, r7, r3
    cef6:	881b      	ldrh	r3, [r3, #0]
    cef8:	0a1b      	lsrs	r3, r3, #8
    cefa:	b29b      	uxth	r3, r3
    cefc:	b2d9      	uxtb	r1, r3
    cefe:	4b18      	ldr	r3, [pc, #96]	; (cf60 <vesc_get_pwm+0xbc>)
    cf00:	2282      	movs	r2, #130	; 0x82
    cf02:	0092      	lsls	r2, r2, #2
    cf04:	4694      	mov	ip, r2
    cf06:	44bc      	add	ip, r7
    cf08:	4463      	add	r3, ip
    cf0a:	4a19      	ldr	r2, [pc, #100]	; (cf70 <vesc_get_pwm+0xcc>)
    cf0c:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cf0e:	4b16      	ldr	r3, [pc, #88]	; (cf68 <vesc_get_pwm+0xc4>)
    cf10:	18fb      	adds	r3, r7, r3
    cf12:	881b      	ldrh	r3, [r3, #0]
    cf14:	b2d9      	uxtb	r1, r3
    cf16:	4b12      	ldr	r3, [pc, #72]	; (cf60 <vesc_get_pwm+0xbc>)
    cf18:	2282      	movs	r2, #130	; 0x82
    cf1a:	0092      	lsls	r2, r2, #2
    cf1c:	18ba      	adds	r2, r7, r2
    cf1e:	18d2      	adds	r2, r2, r3
    cf20:	2381      	movs	r3, #129	; 0x81
    cf22:	009b      	lsls	r3, r3, #2
    cf24:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cf26:	4b0e      	ldr	r3, [pc, #56]	; (cf60 <vesc_get_pwm+0xbc>)
    cf28:	2282      	movs	r2, #130	; 0x82
    cf2a:	0092      	lsls	r2, r2, #2
    cf2c:	18ba      	adds	r2, r7, r2
    cf2e:	18d4      	adds	r4, r2, r3
    cf30:	466b      	mov	r3, sp
    cf32:	0018      	movs	r0, r3
    cf34:	0021      	movs	r1, r4
    cf36:	3110      	adds	r1, #16
    cf38:	23fb      	movs	r3, #251	; 0xfb
    cf3a:	005b      	lsls	r3, r3, #1
    cf3c:	001a      	movs	r2, r3
    cf3e:	4b0d      	ldr	r3, [pc, #52]	; (cf74 <vesc_get_pwm+0xd0>)
    cf40:	4798      	blx	r3
    cf42:	6820      	ldr	r0, [r4, #0]
    cf44:	6861      	ldr	r1, [r4, #4]
    cf46:	68a2      	ldr	r2, [r4, #8]
    cf48:	68e3      	ldr	r3, [r4, #12]
    cf4a:	4c0b      	ldr	r4, [pc, #44]	; (cf78 <vesc_get_pwm+0xd4>)
    cf4c:	47a0      	blx	r4
}
    cf4e:	46c0      	nop			; (mov r8, r8)
    cf50:	46bd      	mov	sp, r7
    cf52:	2383      	movs	r3, #131	; 0x83
    cf54:	009b      	lsls	r3, r3, #2
    cf56:	449d      	add	sp, r3
    cf58:	bd90      	pop	{r4, r7, pc}
    cf5a:	46c0      	nop			; (mov r8, r8)
    cf5c:	fffffbfc 	.word	0xfffffbfc
    cf60:	fffffdf8 	.word	0xfffffdf8
    cf64:	2000033e 	.word	0x2000033e
    cf68:	00000206 	.word	0x00000206
    cf6c:	0000b86d 	.word	0x0000b86d
    cf70:	00000203 	.word	0x00000203
    cf74:	000170dd 	.word	0x000170dd
    cf78:	0000b9c1 	.word	0x0000b9c1

0000cf7c <vesc_get_chuck>:

void vesc_get_chuck(){
    cf7c:	b590      	push	{r4, r7, lr}
    cf7e:	4c2d      	ldr	r4, [pc, #180]	; (d034 <vesc_get_chuck+0xb8>)
    cf80:	44a5      	add	sp, r4
    cf82:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cf84:	4b2c      	ldr	r3, [pc, #176]	; (d038 <vesc_get_chuck+0xbc>)
    cf86:	2282      	movs	r2, #130	; 0x82
    cf88:	0092      	lsls	r2, r2, #2
    cf8a:	4694      	mov	ip, r2
    cf8c:	44bc      	add	ip, r7
    cf8e:	4463      	add	r3, ip
    cf90:	2202      	movs	r2, #2
    cf92:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cf94:	4b28      	ldr	r3, [pc, #160]	; (d038 <vesc_get_chuck+0xbc>)
    cf96:	2282      	movs	r2, #130	; 0x82
    cf98:	0092      	lsls	r2, r2, #2
    cf9a:	4694      	mov	ip, r2
    cf9c:	44bc      	add	ip, r7
    cf9e:	4463      	add	r3, ip
    cfa0:	2201      	movs	r2, #1
    cfa2:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_CHUK;
    cfa4:	4b25      	ldr	r3, [pc, #148]	; (d03c <vesc_get_chuck+0xc0>)
    cfa6:	781a      	ldrb	r2, [r3, #0]
    cfa8:	4b23      	ldr	r3, [pc, #140]	; (d038 <vesc_get_chuck+0xbc>)
    cfaa:	2182      	movs	r1, #130	; 0x82
    cfac:	0089      	lsls	r1, r1, #2
    cfae:	468c      	mov	ip, r1
    cfb0:	44bc      	add	ip, r7
    cfb2:	4463      	add	r3, ip
    cfb4:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cfb6:	4b22      	ldr	r3, [pc, #136]	; (d040 <vesc_get_chuck+0xc4>)
    cfb8:	18fc      	adds	r4, r7, r3
    cfba:	003b      	movs	r3, r7
    cfbc:	3303      	adds	r3, #3
    cfbe:	2101      	movs	r1, #1
    cfc0:	0018      	movs	r0, r3
    cfc2:	4b20      	ldr	r3, [pc, #128]	; (d044 <vesc_get_chuck+0xc8>)
    cfc4:	4798      	blx	r3
    cfc6:	0003      	movs	r3, r0
    cfc8:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cfca:	4b1d      	ldr	r3, [pc, #116]	; (d040 <vesc_get_chuck+0xc4>)
    cfcc:	18fb      	adds	r3, r7, r3
    cfce:	881b      	ldrh	r3, [r3, #0]
    cfd0:	0a1b      	lsrs	r3, r3, #8
    cfd2:	b29b      	uxth	r3, r3
    cfd4:	b2d9      	uxtb	r1, r3
    cfd6:	4b18      	ldr	r3, [pc, #96]	; (d038 <vesc_get_chuck+0xbc>)
    cfd8:	2282      	movs	r2, #130	; 0x82
    cfda:	0092      	lsls	r2, r2, #2
    cfdc:	4694      	mov	ip, r2
    cfde:	44bc      	add	ip, r7
    cfe0:	4463      	add	r3, ip
    cfe2:	4a19      	ldr	r2, [pc, #100]	; (d048 <vesc_get_chuck+0xcc>)
    cfe4:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cfe6:	4b16      	ldr	r3, [pc, #88]	; (d040 <vesc_get_chuck+0xc4>)
    cfe8:	18fb      	adds	r3, r7, r3
    cfea:	881b      	ldrh	r3, [r3, #0]
    cfec:	b2d9      	uxtb	r1, r3
    cfee:	4b12      	ldr	r3, [pc, #72]	; (d038 <vesc_get_chuck+0xbc>)
    cff0:	2282      	movs	r2, #130	; 0x82
    cff2:	0092      	lsls	r2, r2, #2
    cff4:	18ba      	adds	r2, r7, r2
    cff6:	18d2      	adds	r2, r2, r3
    cff8:	2381      	movs	r3, #129	; 0x81
    cffa:	009b      	lsls	r3, r3, #2
    cffc:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cffe:	4b0e      	ldr	r3, [pc, #56]	; (d038 <vesc_get_chuck+0xbc>)
    d000:	2282      	movs	r2, #130	; 0x82
    d002:	0092      	lsls	r2, r2, #2
    d004:	18ba      	adds	r2, r7, r2
    d006:	18d4      	adds	r4, r2, r3
    d008:	466b      	mov	r3, sp
    d00a:	0018      	movs	r0, r3
    d00c:	0021      	movs	r1, r4
    d00e:	3110      	adds	r1, #16
    d010:	23fb      	movs	r3, #251	; 0xfb
    d012:	005b      	lsls	r3, r3, #1
    d014:	001a      	movs	r2, r3
    d016:	4b0d      	ldr	r3, [pc, #52]	; (d04c <vesc_get_chuck+0xd0>)
    d018:	4798      	blx	r3
    d01a:	6820      	ldr	r0, [r4, #0]
    d01c:	6861      	ldr	r1, [r4, #4]
    d01e:	68a2      	ldr	r2, [r4, #8]
    d020:	68e3      	ldr	r3, [r4, #12]
    d022:	4c0b      	ldr	r4, [pc, #44]	; (d050 <vesc_get_chuck+0xd4>)
    d024:	47a0      	blx	r4
}
    d026:	46c0      	nop			; (mov r8, r8)
    d028:	46bd      	mov	sp, r7
    d02a:	2383      	movs	r3, #131	; 0x83
    d02c:	009b      	lsls	r3, r3, #2
    d02e:	449d      	add	sp, r3
    d030:	bd90      	pop	{r4, r7, pc}
    d032:	46c0      	nop			; (mov r8, r8)
    d034:	fffffbfc 	.word	0xfffffbfc
    d038:	fffffdf8 	.word	0xfffffdf8
    d03c:	2000033f 	.word	0x2000033f
    d040:	00000206 	.word	0x00000206
    d044:	0000b86d 	.word	0x0000b86d
    d048:	00000203 	.word	0x00000203
    d04c:	000170dd 	.word	0x000170dd
    d050:	0000b9c1 	.word	0x0000b9c1

0000d054 <vesc_read_all>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_read_all(){
    d054:	b580      	push	{r7, lr}
    d056:	af00      	add	r7, sp, #0
	static uint8_t read_index = 0;
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
    d058:	4b50      	ldr	r3, [pc, #320]	; (d19c <vesc_read_all+0x148>)
    d05a:	4798      	blx	r3
    d05c:	0002      	movs	r2, r0
    d05e:	4b50      	ldr	r3, [pc, #320]	; (d1a0 <vesc_read_all+0x14c>)
    d060:	681b      	ldr	r3, [r3, #0]
    d062:	1ad2      	subs	r2, r2, r3
    d064:	4b4f      	ldr	r3, [pc, #316]	; (d1a4 <vesc_read_all+0x150>)
    d066:	681b      	ldr	r3, [r3, #0]
    d068:	429a      	cmp	r2, r3
    d06a:	d902      	bls.n	d072 <vesc_read_all+0x1e>
		HOLD_FOR_REPLY = false;
    d06c:	4b4e      	ldr	r3, [pc, #312]	; (d1a8 <vesc_read_all+0x154>)
    d06e:	2200      	movs	r2, #0
    d070:	701a      	strb	r2, [r3, #0]

	switch(read_index){
    d072:	4b4e      	ldr	r3, [pc, #312]	; (d1ac <vesc_read_all+0x158>)
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	2b01      	cmp	r3, #1
    d078:	d026      	beq.n	d0c8 <vesc_read_all+0x74>
    d07a:	dc02      	bgt.n	d082 <vesc_read_all+0x2e>
    d07c:	2b00      	cmp	r3, #0
    d07e:	d005      	beq.n	d08c <vesc_read_all+0x38>
    d080:	e07d      	b.n	d17e <vesc_read_all+0x12a>
    d082:	2b02      	cmp	r3, #2
    d084:	d03e      	beq.n	d104 <vesc_read_all+0xb0>
    d086:	2b03      	cmp	r3, #3
    d088:	d05a      	beq.n	d140 <vesc_read_all+0xec>
    d08a:	e078      	b.n	d17e <vesc_read_all+0x12a>
		case 0:
		if(!READ_VESC_PWM){
    d08c:	4b48      	ldr	r3, [pc, #288]	; (d1b0 <vesc_read_all+0x15c>)
    d08e:	781b      	ldrb	r3, [r3, #0]
    d090:	2201      	movs	r2, #1
    d092:	4053      	eors	r3, r2
    d094:	b2db      	uxtb	r3, r3
    d096:	2b00      	cmp	r3, #0
    d098:	d006      	beq.n	d0a8 <vesc_read_all+0x54>
			read_index++;
    d09a:	4b44      	ldr	r3, [pc, #272]	; (d1ac <vesc_read_all+0x158>)
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	3301      	adds	r3, #1
    d0a0:	b2da      	uxtb	r2, r3
    d0a2:	4b42      	ldr	r3, [pc, #264]	; (d1ac <vesc_read_all+0x158>)
    d0a4:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_pwm();
		}
		break;
    d0a6:	e063      	b.n	d170 <vesc_read_all+0x11c>
		} else if(!HOLD_FOR_REPLY){
    d0a8:	4b3f      	ldr	r3, [pc, #252]	; (d1a8 <vesc_read_all+0x154>)
    d0aa:	781b      	ldrb	r3, [r3, #0]
    d0ac:	2201      	movs	r2, #1
    d0ae:	4053      	eors	r3, r2
    d0b0:	b2db      	uxtb	r3, r3
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d05c      	beq.n	d170 <vesc_read_all+0x11c>
			read_index++;
    d0b6:	4b3d      	ldr	r3, [pc, #244]	; (d1ac <vesc_read_all+0x158>)
    d0b8:	781b      	ldrb	r3, [r3, #0]
    d0ba:	3301      	adds	r3, #1
    d0bc:	b2da      	uxtb	r2, r3
    d0be:	4b3b      	ldr	r3, [pc, #236]	; (d1ac <vesc_read_all+0x158>)
    d0c0:	701a      	strb	r2, [r3, #0]
			vesc_get_pwm();
    d0c2:	4b3c      	ldr	r3, [pc, #240]	; (d1b4 <vesc_read_all+0x160>)
    d0c4:	4798      	blx	r3
		break;
    d0c6:	e053      	b.n	d170 <vesc_read_all+0x11c>
		case 1:
		if(!READ_VESC_FW){
    d0c8:	4b3b      	ldr	r3, [pc, #236]	; (d1b8 <vesc_read_all+0x164>)
    d0ca:	781b      	ldrb	r3, [r3, #0]
    d0cc:	2201      	movs	r2, #1
    d0ce:	4053      	eors	r3, r2
    d0d0:	b2db      	uxtb	r3, r3
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d006      	beq.n	d0e4 <vesc_read_all+0x90>
			read_index++;
    d0d6:	4b35      	ldr	r3, [pc, #212]	; (d1ac <vesc_read_all+0x158>)
    d0d8:	781b      	ldrb	r3, [r3, #0]
    d0da:	3301      	adds	r3, #1
    d0dc:	b2da      	uxtb	r2, r3
    d0de:	4b33      	ldr	r3, [pc, #204]	; (d1ac <vesc_read_all+0x158>)
    d0e0:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_fw_version();
		}
		break;
    d0e2:	e047      	b.n	d174 <vesc_read_all+0x120>
		} else if(!HOLD_FOR_REPLY){
    d0e4:	4b30      	ldr	r3, [pc, #192]	; (d1a8 <vesc_read_all+0x154>)
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	2201      	movs	r2, #1
    d0ea:	4053      	eors	r3, r2
    d0ec:	b2db      	uxtb	r3, r3
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	d040      	beq.n	d174 <vesc_read_all+0x120>
			read_index++;
    d0f2:	4b2e      	ldr	r3, [pc, #184]	; (d1ac <vesc_read_all+0x158>)
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	3301      	adds	r3, #1
    d0f8:	b2da      	uxtb	r2, r3
    d0fa:	4b2c      	ldr	r3, [pc, #176]	; (d1ac <vesc_read_all+0x158>)
    d0fc:	701a      	strb	r2, [r3, #0]
			vesc_get_fw_version();
    d0fe:	4b2f      	ldr	r3, [pc, #188]	; (d1bc <vesc_read_all+0x168>)
    d100:	4798      	blx	r3
		break;
    d102:	e037      	b.n	d174 <vesc_read_all+0x120>
		case 2:
		if(!READ_VESC_VALS){
    d104:	4b2e      	ldr	r3, [pc, #184]	; (d1c0 <vesc_read_all+0x16c>)
    d106:	781b      	ldrb	r3, [r3, #0]
    d108:	2201      	movs	r2, #1
    d10a:	4053      	eors	r3, r2
    d10c:	b2db      	uxtb	r3, r3
    d10e:	2b00      	cmp	r3, #0
    d110:	d006      	beq.n	d120 <vesc_read_all+0xcc>
			read_index++;
    d112:	4b26      	ldr	r3, [pc, #152]	; (d1ac <vesc_read_all+0x158>)
    d114:	781b      	ldrb	r3, [r3, #0]
    d116:	3301      	adds	r3, #1
    d118:	b2da      	uxtb	r2, r3
    d11a:	4b24      	ldr	r3, [pc, #144]	; (d1ac <vesc_read_all+0x158>)
    d11c:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_vals();
		}
		break;
    d11e:	e02b      	b.n	d178 <vesc_read_all+0x124>
		} else if(!HOLD_FOR_REPLY){
    d120:	4b21      	ldr	r3, [pc, #132]	; (d1a8 <vesc_read_all+0x154>)
    d122:	781b      	ldrb	r3, [r3, #0]
    d124:	2201      	movs	r2, #1
    d126:	4053      	eors	r3, r2
    d128:	b2db      	uxtb	r3, r3
    d12a:	2b00      	cmp	r3, #0
    d12c:	d024      	beq.n	d178 <vesc_read_all+0x124>
			read_index++;
    d12e:	4b1f      	ldr	r3, [pc, #124]	; (d1ac <vesc_read_all+0x158>)
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	3301      	adds	r3, #1
    d134:	b2da      	uxtb	r2, r3
    d136:	4b1d      	ldr	r3, [pc, #116]	; (d1ac <vesc_read_all+0x158>)
    d138:	701a      	strb	r2, [r3, #0]
			vesc_get_vals();
    d13a:	4b22      	ldr	r3, [pc, #136]	; (d1c4 <vesc_read_all+0x170>)
    d13c:	4798      	blx	r3
		break;
    d13e:	e01b      	b.n	d178 <vesc_read_all+0x124>
		case 3:
		if(!READ_VESC_CHUCK){
    d140:	4b21      	ldr	r3, [pc, #132]	; (d1c8 <vesc_read_all+0x174>)
    d142:	781b      	ldrb	r3, [r3, #0]
    d144:	2201      	movs	r2, #1
    d146:	4053      	eors	r3, r2
    d148:	b2db      	uxtb	r3, r3
    d14a:	2b00      	cmp	r3, #0
    d14c:	d003      	beq.n	d156 <vesc_read_all+0x102>
			read_index=0;
    d14e:	4b17      	ldr	r3, [pc, #92]	; (d1ac <vesc_read_all+0x158>)
    d150:	2200      	movs	r2, #0
    d152:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index=0;
			vesc_get_chuck();
		}
		break;
    d154:	e012      	b.n	d17c <vesc_read_all+0x128>
		} else if(!HOLD_FOR_REPLY){
    d156:	4b14      	ldr	r3, [pc, #80]	; (d1a8 <vesc_read_all+0x154>)
    d158:	781b      	ldrb	r3, [r3, #0]
    d15a:	2201      	movs	r2, #1
    d15c:	4053      	eors	r3, r2
    d15e:	b2db      	uxtb	r3, r3
    d160:	2b00      	cmp	r3, #0
    d162:	d00b      	beq.n	d17c <vesc_read_all+0x128>
			read_index=0;
    d164:	4b11      	ldr	r3, [pc, #68]	; (d1ac <vesc_read_all+0x158>)
    d166:	2200      	movs	r2, #0
    d168:	701a      	strb	r2, [r3, #0]
			vesc_get_chuck();
    d16a:	4b18      	ldr	r3, [pc, #96]	; (d1cc <vesc_read_all+0x178>)
    d16c:	4798      	blx	r3
		break;
    d16e:	e005      	b.n	d17c <vesc_read_all+0x128>
		break;
    d170:	46c0      	nop			; (mov r8, r8)
    d172:	e004      	b.n	d17e <vesc_read_all+0x12a>
		break;
    d174:	46c0      	nop			; (mov r8, r8)
    d176:	e002      	b.n	d17e <vesc_read_all+0x12a>
		break;
    d178:	46c0      	nop			; (mov r8, r8)
    d17a:	e000      	b.n	d17e <vesc_read_all+0x12a>
		break;
    d17c:	46c0      	nop			; (mov r8, r8)
	}
	
	READ_VESC_PWM = false;
    d17e:	4b0c      	ldr	r3, [pc, #48]	; (d1b0 <vesc_read_all+0x15c>)
    d180:	2200      	movs	r2, #0
    d182:	701a      	strb	r2, [r3, #0]
	READ_VESC_FW = false;
    d184:	4b0c      	ldr	r3, [pc, #48]	; (d1b8 <vesc_read_all+0x164>)
    d186:	2200      	movs	r2, #0
    d188:	701a      	strb	r2, [r3, #0]
	READ_VESC_VALS = false;
    d18a:	4b0d      	ldr	r3, [pc, #52]	; (d1c0 <vesc_read_all+0x16c>)
    d18c:	2200      	movs	r2, #0
    d18e:	701a      	strb	r2, [r3, #0]
	READ_VESC_CHUCK = false;
    d190:	4b0d      	ldr	r3, [pc, #52]	; (d1c8 <vesc_read_all+0x174>)
    d192:	2200      	movs	r2, #0
    d194:	701a      	strb	r2, [r3, #0]
}
    d196:	46c0      	nop			; (mov r8, r8)
    d198:	46bd      	mov	sp, r7
    d19a:	bd80      	pop	{r7, pc}
    d19c:	0000b109 	.word	0x0000b109
    d1a0:	20000364 	.word	0x20000364
    d1a4:	200000ac 	.word	0x200000ac
    d1a8:	20000368 	.word	0x20000368
    d1ac:	200003e9 	.word	0x200003e9
    d1b0:	20000369 	.word	0x20000369
    d1b4:	0000cea5 	.word	0x0000cea5
    d1b8:	2000036c 	.word	0x2000036c
    d1bc:	0000cb1d 	.word	0x0000cb1d
    d1c0:	2000036b 	.word	0x2000036b
    d1c4:	0000cbf5 	.word	0x0000cbf5
    d1c8:	2000036a 	.word	0x2000036a
    d1cc:	0000cf7d 	.word	0x0000cf7d

0000d1d0 <detect_vesc_firmware>:


void detect_vesc_firmware(){
    d1d0:	b580      	push	{r7, lr}
    d1d2:	af00      	add	r7, sp, #0
	vesc_get_fw_version();
    d1d4:	4bcf      	ldr	r3, [pc, #828]	; (d514 <detect_vesc_firmware+0x344>)
    d1d6:	4798      	blx	r3

	if(latest_vesc_vals.FW_VERSION_MAJOR != 0 || latest_vesc_vals.FW_VERSION_MINOR != 0)
    d1d8:	4bcf      	ldr	r3, [pc, #828]	; (d518 <detect_vesc_firmware+0x348>)
    d1da:	2234      	movs	r2, #52	; 0x34
    d1dc:	5c9b      	ldrb	r3, [r3, r2]
    d1de:	2b00      	cmp	r3, #0
    d1e0:	d105      	bne.n	d1ee <detect_vesc_firmware+0x1e>
    d1e2:	4bcd      	ldr	r3, [pc, #820]	; (d518 <detect_vesc_firmware+0x348>)
    d1e4:	2235      	movs	r2, #53	; 0x35
    d1e6:	5c9b      	ldrb	r3, [r3, r2]
    d1e8:	2b00      	cmp	r3, #0
    d1ea:	d100      	bne.n	d1ee <detect_vesc_firmware+0x1e>
    d1ec:	e271      	b.n	d6d2 <detect_vesc_firmware+0x502>
	{
		ESC_FW_READ = true;
    d1ee:	4bcb      	ldr	r3, [pc, #812]	; (d51c <detect_vesc_firmware+0x34c>)
    d1f0:	2201      	movs	r2, #1
    d1f2:	701a      	strb	r2, [r3, #0]

		// Define the location in which particular values can be found in COMM messages used by each FW
		if(latest_vesc_vals.FW_VERSION_MAJOR == 2 && latest_vesc_vals.FW_VERSION_MINOR <= 18){ // <= v2.18
    d1f4:	4bc8      	ldr	r3, [pc, #800]	; (d518 <detect_vesc_firmware+0x348>)
    d1f6:	2234      	movs	r2, #52	; 0x34
    d1f8:	5c9b      	ldrb	r3, [r3, r2]
    d1fa:	2b02      	cmp	r3, #2
    d1fc:	d000      	beq.n	d200 <detect_vesc_firmware+0x30>
    d1fe:	e080      	b.n	d302 <detect_vesc_firmware+0x132>
    d200:	4bc5      	ldr	r3, [pc, #788]	; (d518 <detect_vesc_firmware+0x348>)
    d202:	2235      	movs	r2, #53	; 0x35
    d204:	5c9b      	ldrb	r3, [r3, r2]
    d206:	2b12      	cmp	r3, #18
    d208:	d87b      	bhi.n	d302 <detect_vesc_firmware+0x132>
			esc_fw = FW_2v18;
    d20a:	4bc5      	ldr	r3, [pc, #788]	; (d520 <detect_vesc_firmware+0x350>)
    d20c:	2200      	movs	r2, #0
    d20e:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d210:	4bc4      	ldr	r3, [pc, #784]	; (d524 <detect_vesc_firmware+0x354>)
    d212:	2200      	movs	r2, #0
    d214:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d216:	4bc4      	ldr	r3, [pc, #784]	; (d528 <detect_vesc_firmware+0x358>)
    d218:	2204      	movs	r2, #4
    d21a:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 13;
    d21c:	4bc3      	ldr	r3, [pc, #780]	; (d52c <detect_vesc_firmware+0x35c>)
    d21e:	220d      	movs	r2, #13
    d220:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 29;
    d222:	4bc3      	ldr	r3, [pc, #780]	; (d530 <detect_vesc_firmware+0x360>)
    d224:	221d      	movs	r2, #29
    d226:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 30;
    d228:	4bc2      	ldr	r3, [pc, #776]	; (d534 <detect_vesc_firmware+0x364>)
    d22a:	221e      	movs	r2, #30
    d22c:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 32;
    d22e:	4bc2      	ldr	r3, [pc, #776]	; (d538 <detect_vesc_firmware+0x368>)
    d230:	2220      	movs	r2, #32
    d232:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 34;
    d234:	4bc1      	ldr	r3, [pc, #772]	; (d53c <detect_vesc_firmware+0x36c>)
    d236:	2222      	movs	r2, #34	; 0x22
    d238:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d23a:	4bc1      	ldr	r3, [pc, #772]	; (d540 <detect_vesc_firmware+0x370>)
    d23c:	22ff      	movs	r2, #255	; 0xff
    d23e:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d240:	4bc0      	ldr	r3, [pc, #768]	; (d544 <detect_vesc_firmware+0x374>)
    d242:	22ff      	movs	r2, #255	; 0xff
    d244:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d246:	4bc0      	ldr	r3, [pc, #768]	; (d548 <detect_vesc_firmware+0x378>)
    d248:	2201      	movs	r2, #1
    d24a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 15;
    d24c:	4bbf      	ldr	r3, [pc, #764]	; (d54c <detect_vesc_firmware+0x37c>)
    d24e:	220f      	movs	r2, #15
    d250:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 19;
    d252:	4bbf      	ldr	r3, [pc, #764]	; (d550 <detect_vesc_firmware+0x380>)
    d254:	2213      	movs	r2, #19
    d256:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 23;
    d258:	4bbe      	ldr	r3, [pc, #760]	; (d554 <detect_vesc_firmware+0x384>)
    d25a:	2217      	movs	r2, #23
    d25c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 25;
    d25e:	4bbe      	ldr	r3, [pc, #760]	; (d558 <detect_vesc_firmware+0x388>)
    d260:	2219      	movs	r2, #25
    d262:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 29;
    d264:	4bbd      	ldr	r3, [pc, #756]	; (d55c <detect_vesc_firmware+0x38c>)
    d266:	221d      	movs	r2, #29
    d268:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 31;
    d26a:	4bbd      	ldr	r3, [pc, #756]	; (d560 <detect_vesc_firmware+0x390>)
    d26c:	221f      	movs	r2, #31
    d26e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 35;
    d270:	4bbc      	ldr	r3, [pc, #752]	; (d564 <detect_vesc_firmware+0x394>)
    d272:	2223      	movs	r2, #35	; 0x23
    d274:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 39;
    d276:	4bbc      	ldr	r3, [pc, #752]	; (d568 <detect_vesc_firmware+0x398>)
    d278:	2227      	movs	r2, #39	; 0x27
    d27a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 43;
    d27c:	4bbb      	ldr	r3, [pc, #748]	; (d56c <detect_vesc_firmware+0x39c>)
    d27e:	222b      	movs	r2, #43	; 0x2b
    d280:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 47;
    d282:	4bbb      	ldr	r3, [pc, #748]	; (d570 <detect_vesc_firmware+0x3a0>)
    d284:	222f      	movs	r2, #47	; 0x2f
    d286:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 55;
    d288:	4bba      	ldr	r3, [pc, #744]	; (d574 <detect_vesc_firmware+0x3a4>)
    d28a:	2237      	movs	r2, #55	; 0x37
    d28c:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
    d28e:	4bba      	ldr	r3, [pc, #744]	; (d578 <detect_vesc_firmware+0x3a8>)
    d290:	2205      	movs	r2, #5
    d292:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d294:	4bb9      	ldr	r3, [pc, #740]	; (d57c <detect_vesc_firmware+0x3ac>)
    d296:	2209      	movs	r2, #9
    d298:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d29a:	4bb9      	ldr	r3, [pc, #740]	; (d580 <detect_vesc_firmware+0x3b0>)
    d29c:	220d      	movs	r2, #13
    d29e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d2a0:	4bb8      	ldr	r3, [pc, #736]	; (d584 <detect_vesc_firmware+0x3b4>)
    d2a2:	2211      	movs	r2, #17
    d2a4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d2a6:	4bb8      	ldr	r3, [pc, #736]	; (d588 <detect_vesc_firmware+0x3b8>)
    d2a8:	2215      	movs	r2, #21
    d2aa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d2ac:	4bb7      	ldr	r3, [pc, #732]	; (d58c <detect_vesc_firmware+0x3bc>)
    d2ae:	2219      	movs	r2, #25
    d2b0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d2b2:	4bb7      	ldr	r3, [pc, #732]	; (d590 <detect_vesc_firmware+0x3c0>)
    d2b4:	221d      	movs	r2, #29
    d2b6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 33;
    d2b8:	4bb6      	ldr	r3, [pc, #728]	; (d594 <detect_vesc_firmware+0x3c4>)
    d2ba:	2221      	movs	r2, #33	; 0x21
    d2bc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 37;
    d2be:	4bb6      	ldr	r3, [pc, #728]	; (d598 <detect_vesc_firmware+0x3c8>)
    d2c0:	2225      	movs	r2, #37	; 0x25
    d2c2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 41;
    d2c4:	4bb5      	ldr	r3, [pc, #724]	; (d59c <detect_vesc_firmware+0x3cc>)
    d2c6:	2229      	movs	r2, #41	; 0x29
    d2c8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 45;
    d2ca:	4bb5      	ldr	r3, [pc, #724]	; (d5a0 <detect_vesc_firmware+0x3d0>)
    d2cc:	222d      	movs	r2, #45	; 0x2d
    d2ce:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 49;
    d2d0:	4bb4      	ldr	r3, [pc, #720]	; (d5a4 <detect_vesc_firmware+0x3d4>)
    d2d2:	2231      	movs	r2, #49	; 0x31
    d2d4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 53;
    d2d6:	4bb4      	ldr	r3, [pc, #720]	; (d5a8 <detect_vesc_firmware+0x3d8>)
    d2d8:	2235      	movs	r2, #53	; 0x35
    d2da:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 59;
    d2dc:	4bb3      	ldr	r3, [pc, #716]	; (d5ac <detect_vesc_firmware+0x3dc>)
    d2de:	223b      	movs	r2, #59	; 0x3b
    d2e0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 63;
    d2e2:	4bb3      	ldr	r3, [pc, #716]	; (d5b0 <detect_vesc_firmware+0x3e0>)
    d2e4:	223f      	movs	r2, #63	; 0x3f
    d2e6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 67;
    d2e8:	4bb2      	ldr	r3, [pc, #712]	; (d5b4 <detect_vesc_firmware+0x3e4>)
    d2ea:	2243      	movs	r2, #67	; 0x43
    d2ec:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 71;
    d2ee:	4bb2      	ldr	r3, [pc, #712]	; (d5b8 <detect_vesc_firmware+0x3e8>)
    d2f0:	2247      	movs	r2, #71	; 0x47
    d2f2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 75;
    d2f4:	4bb1      	ldr	r3, [pc, #708]	; (d5bc <detect_vesc_firmware+0x3ec>)
    d2f6:	224b      	movs	r2, #75	; 0x4b
    d2f8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 79;
    d2fa:	4bb1      	ldr	r3, [pc, #708]	; (d5c0 <detect_vesc_firmware+0x3f0>)
    d2fc:	224f      	movs	r2, #79	; 0x4f
    d2fe:	701a      	strb	r2, [r3, #0]
    d300:	e1e7      	b.n	d6d2 <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR < 100){ // >= 3.0
    d302:	4b85      	ldr	r3, [pc, #532]	; (d518 <detect_vesc_firmware+0x348>)
    d304:	2234      	movs	r2, #52	; 0x34
    d306:	5c9b      	ldrb	r3, [r3, r2]
    d308:	2b03      	cmp	r3, #3
    d30a:	d000      	beq.n	d30e <detect_vesc_firmware+0x13e>
    d30c:	e080      	b.n	d410 <detect_vesc_firmware+0x240>
    d30e:	4b82      	ldr	r3, [pc, #520]	; (d518 <detect_vesc_firmware+0x348>)
    d310:	2235      	movs	r2, #53	; 0x35
    d312:	5c9b      	ldrb	r3, [r3, r2]
    d314:	2b63      	cmp	r3, #99	; 0x63
    d316:	d87b      	bhi.n	d410 <detect_vesc_firmware+0x240>
			esc_fw = FW_3v00;
    d318:	4b81      	ldr	r3, [pc, #516]	; (d520 <detect_vesc_firmware+0x350>)
    d31a:	2201      	movs	r2, #1
    d31c:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d31e:	4b81      	ldr	r3, [pc, #516]	; (d524 <detect_vesc_firmware+0x354>)
    d320:	2200      	movs	r2, #0
    d322:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d324:	4b80      	ldr	r3, [pc, #512]	; (d528 <detect_vesc_firmware+0x358>)
    d326:	2204      	movs	r2, #4
    d328:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d32a:	4b80      	ldr	r3, [pc, #512]	; (d52c <detect_vesc_firmware+0x35c>)
    d32c:	220e      	movs	r2, #14
    d32e:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d330:	4b7f      	ldr	r3, [pc, #508]	; (d530 <detect_vesc_firmware+0x360>)
    d332:	221e      	movs	r2, #30
    d334:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d336:	4b7f      	ldr	r3, [pc, #508]	; (d534 <detect_vesc_firmware+0x364>)
    d338:	221f      	movs	r2, #31
    d33a:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d33c:	4b7e      	ldr	r3, [pc, #504]	; (d538 <detect_vesc_firmware+0x368>)
    d33e:	2221      	movs	r2, #33	; 0x21
    d340:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d342:	4b7e      	ldr	r3, [pc, #504]	; (d53c <detect_vesc_firmware+0x36c>)
    d344:	2223      	movs	r2, #35	; 0x23
    d346:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 50;
    d348:	4b7d      	ldr	r3, [pc, #500]	; (d540 <detect_vesc_firmware+0x370>)
    d34a:	2232      	movs	r2, #50	; 0x32
    d34c:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 65;
    d34e:	4b7d      	ldr	r3, [pc, #500]	; (d544 <detect_vesc_firmware+0x374>)
    d350:	2241      	movs	r2, #65	; 0x41
    d352:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d354:	4b7c      	ldr	r3, [pc, #496]	; (d548 <detect_vesc_firmware+0x378>)
    d356:	2201      	movs	r2, #1
    d358:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
    d35a:	4b7c      	ldr	r3, [pc, #496]	; (d54c <detect_vesc_firmware+0x37c>)
    d35c:	2205      	movs	r2, #5
    d35e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
    d360:	4b7b      	ldr	r3, [pc, #492]	; (d550 <detect_vesc_firmware+0x380>)
    d362:	2209      	movs	r2, #9
    d364:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
    d366:	4b7b      	ldr	r3, [pc, #492]	; (d554 <detect_vesc_firmware+0x384>)
    d368:	2215      	movs	r2, #21
    d36a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
    d36c:	4b7a      	ldr	r3, [pc, #488]	; (d558 <detect_vesc_firmware+0x388>)
    d36e:	2217      	movs	r2, #23
    d370:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
    d372:	4b7a      	ldr	r3, [pc, #488]	; (d55c <detect_vesc_firmware+0x38c>)
    d374:	221b      	movs	r2, #27
    d376:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
    d378:	4b79      	ldr	r3, [pc, #484]	; (d560 <detect_vesc_firmware+0x390>)
    d37a:	221d      	movs	r2, #29
    d37c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
    d37e:	4b79      	ldr	r3, [pc, #484]	; (d564 <detect_vesc_firmware+0x394>)
    d380:	2221      	movs	r2, #33	; 0x21
    d382:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
    d384:	4b78      	ldr	r3, [pc, #480]	; (d568 <detect_vesc_firmware+0x398>)
    d386:	2225      	movs	r2, #37	; 0x25
    d388:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
    d38a:	4b78      	ldr	r3, [pc, #480]	; (d56c <detect_vesc_firmware+0x39c>)
    d38c:	2229      	movs	r2, #41	; 0x29
    d38e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
    d390:	4b77      	ldr	r3, [pc, #476]	; (d570 <detect_vesc_firmware+0x3a0>)
    d392:	222d      	movs	r2, #45	; 0x2d
    d394:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
    d396:	4b77      	ldr	r3, [pc, #476]	; (d574 <detect_vesc_firmware+0x3a4>)
    d398:	2235      	movs	r2, #53	; 0x35
    d39a:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
    d39c:	4b76      	ldr	r3, [pc, #472]	; (d578 <detect_vesc_firmware+0x3a8>)
    d39e:	2205      	movs	r2, #5
    d3a0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d3a2:	4b76      	ldr	r3, [pc, #472]	; (d57c <detect_vesc_firmware+0x3ac>)
    d3a4:	2209      	movs	r2, #9
    d3a6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d3a8:	4b75      	ldr	r3, [pc, #468]	; (d580 <detect_vesc_firmware+0x3b0>)
    d3aa:	220d      	movs	r2, #13
    d3ac:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d3ae:	4b75      	ldr	r3, [pc, #468]	; (d584 <detect_vesc_firmware+0x3b4>)
    d3b0:	2211      	movs	r2, #17
    d3b2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d3b4:	4b74      	ldr	r3, [pc, #464]	; (d588 <detect_vesc_firmware+0x3b8>)
    d3b6:	2215      	movs	r2, #21
    d3b8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d3ba:	4b74      	ldr	r3, [pc, #464]	; (d58c <detect_vesc_firmware+0x3bc>)
    d3bc:	2219      	movs	r2, #25
    d3be:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d3c0:	4b73      	ldr	r3, [pc, #460]	; (d590 <detect_vesc_firmware+0x3c0>)
    d3c2:	221d      	movs	r2, #29
    d3c4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
    d3c6:	4b73      	ldr	r3, [pc, #460]	; (d594 <detect_vesc_firmware+0x3c4>)
    d3c8:	2225      	movs	r2, #37	; 0x25
    d3ca:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
    d3cc:	4b72      	ldr	r3, [pc, #456]	; (d598 <detect_vesc_firmware+0x3c8>)
    d3ce:	2229      	movs	r2, #41	; 0x29
    d3d0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
    d3d2:	4b72      	ldr	r3, [pc, #456]	; (d59c <detect_vesc_firmware+0x3cc>)
    d3d4:	222d      	movs	r2, #45	; 0x2d
    d3d6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
    d3d8:	4b71      	ldr	r3, [pc, #452]	; (d5a0 <detect_vesc_firmware+0x3d0>)
    d3da:	2231      	movs	r2, #49	; 0x31
    d3dc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
    d3de:	4b71      	ldr	r3, [pc, #452]	; (d5a4 <detect_vesc_firmware+0x3d4>)
    d3e0:	2235      	movs	r2, #53	; 0x35
    d3e2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
    d3e4:	4b70      	ldr	r3, [pc, #448]	; (d5a8 <detect_vesc_firmware+0x3d8>)
    d3e6:	2239      	movs	r2, #57	; 0x39
    d3e8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
    d3ea:	4b70      	ldr	r3, [pc, #448]	; (d5ac <detect_vesc_firmware+0x3dc>)
    d3ec:	223e      	movs	r2, #62	; 0x3e
    d3ee:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
    d3f0:	4b6f      	ldr	r3, [pc, #444]	; (d5b0 <detect_vesc_firmware+0x3e0>)
    d3f2:	2242      	movs	r2, #66	; 0x42
    d3f4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
    d3f6:	4b6f      	ldr	r3, [pc, #444]	; (d5b4 <detect_vesc_firmware+0x3e4>)
    d3f8:	2246      	movs	r2, #70	; 0x46
    d3fa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
    d3fc:	4b6e      	ldr	r3, [pc, #440]	; (d5b8 <detect_vesc_firmware+0x3e8>)
    d3fe:	224a      	movs	r2, #74	; 0x4a
    d400:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
    d402:	4b6e      	ldr	r3, [pc, #440]	; (d5bc <detect_vesc_firmware+0x3ec>)
    d404:	2252      	movs	r2, #82	; 0x52
    d406:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
    d408:	4b6d      	ldr	r3, [pc, #436]	; (d5c0 <detect_vesc_firmware+0x3f0>)
    d40a:	2256      	movs	r2, #86	; 0x56
    d40c:	701a      	strb	r2, [r3, #0]
    d40e:	e160      	b.n	d6d2 <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 23){ // Unity
    d410:	4b41      	ldr	r3, [pc, #260]	; (d518 <detect_vesc_firmware+0x348>)
    d412:	2234      	movs	r2, #52	; 0x34
    d414:	5c9b      	ldrb	r3, [r3, r2]
    d416:	2b17      	cmp	r3, #23
    d418:	d000      	beq.n	d41c <detect_vesc_firmware+0x24c>
    d41a:	e0d3      	b.n	d5c4 <detect_vesc_firmware+0x3f4>
			esc_fw = FW_UNITY;
    d41c:	4b40      	ldr	r3, [pc, #256]	; (d520 <detect_vesc_firmware+0x350>)
    d41e:	2202      	movs	r2, #2
    d420:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d422:	4b40      	ldr	r3, [pc, #256]	; (d524 <detect_vesc_firmware+0x354>)
    d424:	2200      	movs	r2, #0
    d426:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4; // May use COMM_GET_UNITY_VALUES = 38
    d428:	4b3f      	ldr	r3, [pc, #252]	; (d528 <detect_vesc_firmware+0x358>)
    d42a:	2204      	movs	r2, #4
    d42c:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d42e:	4b3f      	ldr	r3, [pc, #252]	; (d52c <detect_vesc_firmware+0x35c>)
    d430:	220e      	movs	r2, #14
    d432:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d434:	4b3e      	ldr	r3, [pc, #248]	; (d530 <detect_vesc_firmware+0x360>)
    d436:	221e      	movs	r2, #30
    d438:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d43a:	4b3e      	ldr	r3, [pc, #248]	; (d534 <detect_vesc_firmware+0x364>)
    d43c:	221f      	movs	r2, #31
    d43e:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d440:	4b3d      	ldr	r3, [pc, #244]	; (d538 <detect_vesc_firmware+0x368>)
    d442:	2221      	movs	r2, #33	; 0x21
    d444:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d446:	4b3d      	ldr	r3, [pc, #244]	; (d53c <detect_vesc_firmware+0x36c>)
    d448:	2223      	movs	r2, #35	; 0x23
    d44a:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d44c:	4b3c      	ldr	r3, [pc, #240]	; (d540 <detect_vesc_firmware+0x370>)
    d44e:	22ff      	movs	r2, #255	; 0xff
    d450:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d452:	4b3c      	ldr	r3, [pc, #240]	; (d544 <detect_vesc_firmware+0x374>)
    d454:	22ff      	movs	r2, #255	; 0xff
    d456:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d458:	4b3b      	ldr	r3, [pc, #236]	; (d548 <detect_vesc_firmware+0x378>)
    d45a:	2201      	movs	r2, #1
    d45c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 9;
    d45e:	4b3b      	ldr	r3, [pc, #236]	; (d54c <detect_vesc_firmware+0x37c>)
    d460:	2209      	movs	r2, #9
    d462:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 17;
    d464:	4b3a      	ldr	r3, [pc, #232]	; (d550 <detect_vesc_firmware+0x380>)
    d466:	2211      	movs	r2, #17
    d468:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 37;
    d46a:	4b3a      	ldr	r3, [pc, #232]	; (d554 <detect_vesc_firmware+0x384>)
    d46c:	2225      	movs	r2, #37	; 0x25
    d46e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 41;
    d470:	4b39      	ldr	r3, [pc, #228]	; (d558 <detect_vesc_firmware+0x388>)
    d472:	2229      	movs	r2, #41	; 0x29
    d474:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 49;
    d476:	4b39      	ldr	r3, [pc, #228]	; (d55c <detect_vesc_firmware+0x38c>)
    d478:	2231      	movs	r2, #49	; 0x31
    d47a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 51;
    d47c:	4b38      	ldr	r3, [pc, #224]	; (d560 <detect_vesc_firmware+0x390>)
    d47e:	2233      	movs	r2, #51	; 0x33
    d480:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 55;
    d482:	4b38      	ldr	r3, [pc, #224]	; (d564 <detect_vesc_firmware+0x394>)
    d484:	2237      	movs	r2, #55	; 0x37
    d486:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 59;
    d488:	4b37      	ldr	r3, [pc, #220]	; (d568 <detect_vesc_firmware+0x398>)
    d48a:	223b      	movs	r2, #59	; 0x3b
    d48c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 63;
    d48e:	4b37      	ldr	r3, [pc, #220]	; (d56c <detect_vesc_firmware+0x39c>)
    d490:	223f      	movs	r2, #63	; 0x3f
    d492:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 67;
    d494:	4b36      	ldr	r3, [pc, #216]	; (d570 <detect_vesc_firmware+0x3a0>)
    d496:	2243      	movs	r2, #67	; 0x43
    d498:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 83;
    d49a:	4b36      	ldr	r3, [pc, #216]	; (d574 <detect_vesc_firmware+0x3a4>)
    d49c:	2253      	movs	r2, #83	; 0x53
    d49e:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 9;
    d4a0:	4b35      	ldr	r3, [pc, #212]	; (d578 <detect_vesc_firmware+0x3a8>)
    d4a2:	2209      	movs	r2, #9
    d4a4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 13;
    d4a6:	4b35      	ldr	r3, [pc, #212]	; (d57c <detect_vesc_firmware+0x3ac>)
    d4a8:	220d      	movs	r2, #13
    d4aa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 17;
    d4ac:	4b34      	ldr	r3, [pc, #208]	; (d580 <detect_vesc_firmware+0x3b0>)
    d4ae:	2211      	movs	r2, #17
    d4b0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 21;
    d4b2:	4b34      	ldr	r3, [pc, #208]	; (d584 <detect_vesc_firmware+0x3b4>)
    d4b4:	2215      	movs	r2, #21
    d4b6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 25;
    d4b8:	4b33      	ldr	r3, [pc, #204]	; (d588 <detect_vesc_firmware+0x3b8>)
    d4ba:	2219      	movs	r2, #25
    d4bc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 29;
    d4be:	4b33      	ldr	r3, [pc, #204]	; (d58c <detect_vesc_firmware+0x3bc>)
    d4c0:	221d      	movs	r2, #29
    d4c2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 33;
    d4c4:	4b32      	ldr	r3, [pc, #200]	; (d590 <detect_vesc_firmware+0x3c0>)
    d4c6:	2221      	movs	r2, #33	; 0x21
    d4c8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 41;
    d4ca:	4b32      	ldr	r3, [pc, #200]	; (d594 <detect_vesc_firmware+0x3c4>)
    d4cc:	2229      	movs	r2, #41	; 0x29
    d4ce:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 45;
    d4d0:	4b31      	ldr	r3, [pc, #196]	; (d598 <detect_vesc_firmware+0x3c8>)
    d4d2:	222d      	movs	r2, #45	; 0x2d
    d4d4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 49;
    d4d6:	4b31      	ldr	r3, [pc, #196]	; (d59c <detect_vesc_firmware+0x3cc>)
    d4d8:	2231      	movs	r2, #49	; 0x31
    d4da:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 53;
    d4dc:	4b30      	ldr	r3, [pc, #192]	; (d5a0 <detect_vesc_firmware+0x3d0>)
    d4de:	2235      	movs	r2, #53	; 0x35
    d4e0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 57;
    d4e2:	4b30      	ldr	r3, [pc, #192]	; (d5a4 <detect_vesc_firmware+0x3d4>)
    d4e4:	2239      	movs	r2, #57	; 0x39
    d4e6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 61;
    d4e8:	4b2f      	ldr	r3, [pc, #188]	; (d5a8 <detect_vesc_firmware+0x3d8>)
    d4ea:	223d      	movs	r2, #61	; 0x3d
    d4ec:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 66;
    d4ee:	4b2f      	ldr	r3, [pc, #188]	; (d5ac <detect_vesc_firmware+0x3dc>)
    d4f0:	2242      	movs	r2, #66	; 0x42
    d4f2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 70;
    d4f4:	4b2e      	ldr	r3, [pc, #184]	; (d5b0 <detect_vesc_firmware+0x3e0>)
    d4f6:	2246      	movs	r2, #70	; 0x46
    d4f8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 74;
    d4fa:	4b2e      	ldr	r3, [pc, #184]	; (d5b4 <detect_vesc_firmware+0x3e4>)
    d4fc:	224a      	movs	r2, #74	; 0x4a
    d4fe:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 78;
    d500:	4b2d      	ldr	r3, [pc, #180]	; (d5b8 <detect_vesc_firmware+0x3e8>)
    d502:	224e      	movs	r2, #78	; 0x4e
    d504:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 86;
    d506:	4b2d      	ldr	r3, [pc, #180]	; (d5bc <detect_vesc_firmware+0x3ec>)
    d508:	2256      	movs	r2, #86	; 0x56
    d50a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 90;
    d50c:	4b2c      	ldr	r3, [pc, #176]	; (d5c0 <detect_vesc_firmware+0x3f0>)
    d50e:	225a      	movs	r2, #90	; 0x5a
    d510:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
			GET_MCCONF_DUTY_MIN = 82;
			GET_MCCONF_DUTY_MAX = 86;
		}
	}
}
    d512:	e0de      	b.n	d6d2 <detect_vesc_firmware+0x502>
    d514:	0000cb1d 	.word	0x0000cb1d
    d518:	20000958 	.word	0x20000958
    d51c:	2000030f 	.word	0x2000030f
    d520:	2000001a 	.word	0x2000001a
    d524:	2000033a 	.word	0x2000033a
    d528:	2000033b 	.word	0x2000033b
    d52c:	2000033c 	.word	0x2000033c
    d530:	2000033d 	.word	0x2000033d
    d534:	2000033e 	.word	0x2000033e
    d538:	2000033f 	.word	0x2000033f
    d53c:	20000340 	.word	0x20000340
    d540:	20000341 	.word	0x20000341
    d544:	20000342 	.word	0x20000342
    d548:	20000343 	.word	0x20000343
    d54c:	20000344 	.word	0x20000344
    d550:	20000345 	.word	0x20000345
    d554:	20000346 	.word	0x20000346
    d558:	20000347 	.word	0x20000347
    d55c:	20000348 	.word	0x20000348
    d560:	20000349 	.word	0x20000349
    d564:	2000034a 	.word	0x2000034a
    d568:	2000034b 	.word	0x2000034b
    d56c:	2000034c 	.word	0x2000034c
    d570:	2000034d 	.word	0x2000034d
    d574:	2000034e 	.word	0x2000034e
    d578:	2000034f 	.word	0x2000034f
    d57c:	20000350 	.word	0x20000350
    d580:	20000351 	.word	0x20000351
    d584:	20000352 	.word	0x20000352
    d588:	20000353 	.word	0x20000353
    d58c:	20000354 	.word	0x20000354
    d590:	20000355 	.word	0x20000355
    d594:	20000356 	.word	0x20000356
    d598:	20000357 	.word	0x20000357
    d59c:	20000358 	.word	0x20000358
    d5a0:	20000359 	.word	0x20000359
    d5a4:	2000035a 	.word	0x2000035a
    d5a8:	2000035b 	.word	0x2000035b
    d5ac:	2000035c 	.word	0x2000035c
    d5b0:	2000035d 	.word	0x2000035d
    d5b4:	2000035e 	.word	0x2000035e
    d5b8:	2000035f 	.word	0x2000035f
    d5bc:	20000360 	.word	0x20000360
    d5c0:	20000361 	.word	0x20000361
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 100){ // Ackmaniac
    d5c4:	4b44      	ldr	r3, [pc, #272]	; (d6d8 <detect_vesc_firmware+0x508>)
    d5c6:	2234      	movs	r2, #52	; 0x34
    d5c8:	5c9b      	ldrb	r3, [r3, r2]
    d5ca:	2b03      	cmp	r3, #3
    d5cc:	d000      	beq.n	d5d0 <detect_vesc_firmware+0x400>
    d5ce:	e080      	b.n	d6d2 <detect_vesc_firmware+0x502>
    d5d0:	4b41      	ldr	r3, [pc, #260]	; (d6d8 <detect_vesc_firmware+0x508>)
    d5d2:	2235      	movs	r2, #53	; 0x35
    d5d4:	5c9b      	ldrb	r3, [r3, r2]
    d5d6:	2b63      	cmp	r3, #99	; 0x63
    d5d8:	d97b      	bls.n	d6d2 <detect_vesc_firmware+0x502>
			esc_fw = FW_ACKMANIAC;
    d5da:	4b40      	ldr	r3, [pc, #256]	; (d6dc <detect_vesc_firmware+0x50c>)
    d5dc:	2203      	movs	r2, #3
    d5de:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d5e0:	4b3f      	ldr	r3, [pc, #252]	; (d6e0 <detect_vesc_firmware+0x510>)
    d5e2:	2200      	movs	r2, #0
    d5e4:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d5e6:	4b3f      	ldr	r3, [pc, #252]	; (d6e4 <detect_vesc_firmware+0x514>)
    d5e8:	2204      	movs	r2, #4
    d5ea:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d5ec:	4b3e      	ldr	r3, [pc, #248]	; (d6e8 <detect_vesc_firmware+0x518>)
    d5ee:	220e      	movs	r2, #14
    d5f0:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d5f2:	4b3e      	ldr	r3, [pc, #248]	; (d6ec <detect_vesc_firmware+0x51c>)
    d5f4:	221e      	movs	r2, #30
    d5f6:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d5f8:	4b3d      	ldr	r3, [pc, #244]	; (d6f0 <detect_vesc_firmware+0x520>)
    d5fa:	221f      	movs	r2, #31
    d5fc:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d5fe:	4b3d      	ldr	r3, [pc, #244]	; (d6f4 <detect_vesc_firmware+0x524>)
    d600:	2221      	movs	r2, #33	; 0x21
    d602:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d604:	4b3c      	ldr	r3, [pc, #240]	; (d6f8 <detect_vesc_firmware+0x528>)
    d606:	2223      	movs	r2, #35	; 0x23
    d608:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d60a:	4b3c      	ldr	r3, [pc, #240]	; (d6fc <detect_vesc_firmware+0x52c>)
    d60c:	22ff      	movs	r2, #255	; 0xff
    d60e:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d610:	4b3b      	ldr	r3, [pc, #236]	; (d700 <detect_vesc_firmware+0x530>)
    d612:	22ff      	movs	r2, #255	; 0xff
    d614:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FET_TEMP = 1;
    d616:	4b3b      	ldr	r3, [pc, #236]	; (d704 <detect_vesc_firmware+0x534>)
    d618:	2201      	movs	r2, #1
    d61a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
    d61c:	4b3a      	ldr	r3, [pc, #232]	; (d708 <detect_vesc_firmware+0x538>)
    d61e:	2205      	movs	r2, #5
    d620:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
    d622:	4b3a      	ldr	r3, [pc, #232]	; (d70c <detect_vesc_firmware+0x53c>)
    d624:	2209      	movs	r2, #9
    d626:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
    d628:	4b39      	ldr	r3, [pc, #228]	; (d710 <detect_vesc_firmware+0x540>)
    d62a:	2215      	movs	r2, #21
    d62c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
    d62e:	4b39      	ldr	r3, [pc, #228]	; (d714 <detect_vesc_firmware+0x544>)
    d630:	2217      	movs	r2, #23
    d632:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
    d634:	4b38      	ldr	r3, [pc, #224]	; (d718 <detect_vesc_firmware+0x548>)
    d636:	221b      	movs	r2, #27
    d638:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
    d63a:	4b38      	ldr	r3, [pc, #224]	; (d71c <detect_vesc_firmware+0x54c>)
    d63c:	221d      	movs	r2, #29
    d63e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
    d640:	4b37      	ldr	r3, [pc, #220]	; (d720 <detect_vesc_firmware+0x550>)
    d642:	2221      	movs	r2, #33	; 0x21
    d644:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
    d646:	4b37      	ldr	r3, [pc, #220]	; (d724 <detect_vesc_firmware+0x554>)
    d648:	2225      	movs	r2, #37	; 0x25
    d64a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
    d64c:	4b36      	ldr	r3, [pc, #216]	; (d728 <detect_vesc_firmware+0x558>)
    d64e:	2229      	movs	r2, #41	; 0x29
    d650:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
    d652:	4b36      	ldr	r3, [pc, #216]	; (d72c <detect_vesc_firmware+0x55c>)
    d654:	222d      	movs	r2, #45	; 0x2d
    d656:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
    d658:	4b35      	ldr	r3, [pc, #212]	; (d730 <detect_vesc_firmware+0x560>)
    d65a:	2235      	movs	r2, #53	; 0x35
    d65c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MAX = 5;
    d65e:	4b35      	ldr	r3, [pc, #212]	; (d734 <detect_vesc_firmware+0x564>)
    d660:	2205      	movs	r2, #5
    d662:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d664:	4b34      	ldr	r3, [pc, #208]	; (d738 <detect_vesc_firmware+0x568>)
    d666:	2209      	movs	r2, #9
    d668:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d66a:	4b34      	ldr	r3, [pc, #208]	; (d73c <detect_vesc_firmware+0x56c>)
    d66c:	220d      	movs	r2, #13
    d66e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d670:	4b33      	ldr	r3, [pc, #204]	; (d740 <detect_vesc_firmware+0x570>)
    d672:	2211      	movs	r2, #17
    d674:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d676:	4b33      	ldr	r3, [pc, #204]	; (d744 <detect_vesc_firmware+0x574>)
    d678:	2215      	movs	r2, #21
    d67a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d67c:	4b32      	ldr	r3, [pc, #200]	; (d748 <detect_vesc_firmware+0x578>)
    d67e:	2219      	movs	r2, #25
    d680:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d682:	4b32      	ldr	r3, [pc, #200]	; (d74c <detect_vesc_firmware+0x57c>)
    d684:	221d      	movs	r2, #29
    d686:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
    d688:	4b31      	ldr	r3, [pc, #196]	; (d750 <detect_vesc_firmware+0x580>)
    d68a:	2225      	movs	r2, #37	; 0x25
    d68c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
    d68e:	4b31      	ldr	r3, [pc, #196]	; (d754 <detect_vesc_firmware+0x584>)
    d690:	2229      	movs	r2, #41	; 0x29
    d692:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
    d694:	4b30      	ldr	r3, [pc, #192]	; (d758 <detect_vesc_firmware+0x588>)
    d696:	222d      	movs	r2, #45	; 0x2d
    d698:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
    d69a:	4b30      	ldr	r3, [pc, #192]	; (d75c <detect_vesc_firmware+0x58c>)
    d69c:	2231      	movs	r2, #49	; 0x31
    d69e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
    d6a0:	4b2f      	ldr	r3, [pc, #188]	; (d760 <detect_vesc_firmware+0x590>)
    d6a2:	2235      	movs	r2, #53	; 0x35
    d6a4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
    d6a6:	4b2f      	ldr	r3, [pc, #188]	; (d764 <detect_vesc_firmware+0x594>)
    d6a8:	2239      	movs	r2, #57	; 0x39
    d6aa:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
    d6ac:	4b2e      	ldr	r3, [pc, #184]	; (d768 <detect_vesc_firmware+0x598>)
    d6ae:	223e      	movs	r2, #62	; 0x3e
    d6b0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
    d6b2:	4b2e      	ldr	r3, [pc, #184]	; (d76c <detect_vesc_firmware+0x59c>)
    d6b4:	2242      	movs	r2, #66	; 0x42
    d6b6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
    d6b8:	4b2d      	ldr	r3, [pc, #180]	; (d770 <detect_vesc_firmware+0x5a0>)
    d6ba:	2246      	movs	r2, #70	; 0x46
    d6bc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
    d6be:	4b2d      	ldr	r3, [pc, #180]	; (d774 <detect_vesc_firmware+0x5a4>)
    d6c0:	224a      	movs	r2, #74	; 0x4a
    d6c2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
    d6c4:	4b2c      	ldr	r3, [pc, #176]	; (d778 <detect_vesc_firmware+0x5a8>)
    d6c6:	2252      	movs	r2, #82	; 0x52
    d6c8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
    d6ca:	4b2c      	ldr	r3, [pc, #176]	; (d77c <detect_vesc_firmware+0x5ac>)
    d6cc:	2256      	movs	r2, #86	; 0x56
    d6ce:	701a      	strb	r2, [r3, #0]
}
    d6d0:	e7ff      	b.n	d6d2 <detect_vesc_firmware+0x502>
    d6d2:	46c0      	nop			; (mov r8, r8)
    d6d4:	46bd      	mov	sp, r7
    d6d6:	bd80      	pop	{r7, pc}
    d6d8:	20000958 	.word	0x20000958
    d6dc:	2000001a 	.word	0x2000001a
    d6e0:	2000033a 	.word	0x2000033a
    d6e4:	2000033b 	.word	0x2000033b
    d6e8:	2000033c 	.word	0x2000033c
    d6ec:	2000033d 	.word	0x2000033d
    d6f0:	2000033e 	.word	0x2000033e
    d6f4:	2000033f 	.word	0x2000033f
    d6f8:	20000340 	.word	0x20000340
    d6fc:	20000341 	.word	0x20000341
    d700:	20000342 	.word	0x20000342
    d704:	20000343 	.word	0x20000343
    d708:	20000344 	.word	0x20000344
    d70c:	20000345 	.word	0x20000345
    d710:	20000346 	.word	0x20000346
    d714:	20000347 	.word	0x20000347
    d718:	20000348 	.word	0x20000348
    d71c:	20000349 	.word	0x20000349
    d720:	2000034a 	.word	0x2000034a
    d724:	2000034b 	.word	0x2000034b
    d728:	2000034c 	.word	0x2000034c
    d72c:	2000034d 	.word	0x2000034d
    d730:	2000034e 	.word	0x2000034e
    d734:	2000034f 	.word	0x2000034f
    d738:	20000350 	.word	0x20000350
    d73c:	20000351 	.word	0x20000351
    d740:	20000352 	.word	0x20000352
    d744:	20000353 	.word	0x20000353
    d748:	20000354 	.word	0x20000354
    d74c:	20000355 	.word	0x20000355
    d750:	20000356 	.word	0x20000356
    d754:	20000357 	.word	0x20000357
    d758:	20000358 	.word	0x20000358
    d75c:	20000359 	.word	0x20000359
    d760:	2000035a 	.word	0x2000035a
    d764:	2000035b 	.word	0x2000035b
    d768:	2000035c 	.word	0x2000035c
    d76c:	2000035d 	.word	0x2000035d
    d770:	2000035e 	.word	0x2000035e
    d774:	2000035f 	.word	0x2000035f
    d778:	20000360 	.word	0x20000360
    d77c:	20000361 	.word	0x20000361

0000d780 <CHECK_BUFFER>:

inline bool CHECK_BUFFER(uint8_t *buf){
    d780:	b580      	push	{r7, lr}
    d782:	b082      	sub	sp, #8
    d784:	af00      	add	r7, sp, #0
    d786:	6078      	str	r0, [r7, #4]
	return (((buf[0] == 0x2) && (buf[buf[1]+4] == 0x3)) || ((buf[0] == 0x3) && (buf[((buf[1]<<8)|buf[2])+5] == 0x3)));
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	781b      	ldrb	r3, [r3, #0]
    d78c:	2b02      	cmp	r3, #2
    d78e:	d108      	bne.n	d7a2 <CHECK_BUFFER+0x22>
    d790:	687b      	ldr	r3, [r7, #4]
    d792:	3301      	adds	r3, #1
    d794:	781b      	ldrb	r3, [r3, #0]
    d796:	3304      	adds	r3, #4
    d798:	687a      	ldr	r2, [r7, #4]
    d79a:	18d3      	adds	r3, r2, r3
    d79c:	781b      	ldrb	r3, [r3, #0]
    d79e:	2b03      	cmp	r3, #3
    d7a0:	d011      	beq.n	d7c6 <CHECK_BUFFER+0x46>
    d7a2:	687b      	ldr	r3, [r7, #4]
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	2b03      	cmp	r3, #3
    d7a8:	d10f      	bne.n	d7ca <CHECK_BUFFER+0x4a>
    d7aa:	687b      	ldr	r3, [r7, #4]
    d7ac:	3301      	adds	r3, #1
    d7ae:	781b      	ldrb	r3, [r3, #0]
    d7b0:	021b      	lsls	r3, r3, #8
    d7b2:	687a      	ldr	r2, [r7, #4]
    d7b4:	3202      	adds	r2, #2
    d7b6:	7812      	ldrb	r2, [r2, #0]
    d7b8:	4313      	orrs	r3, r2
    d7ba:	3305      	adds	r3, #5
    d7bc:	687a      	ldr	r2, [r7, #4]
    d7be:	18d3      	adds	r3, r2, r3
    d7c0:	781b      	ldrb	r3, [r3, #0]
    d7c2:	2b03      	cmp	r3, #3
    d7c4:	d101      	bne.n	d7ca <CHECK_BUFFER+0x4a>
    d7c6:	2301      	movs	r3, #1
    d7c8:	e000      	b.n	d7cc <CHECK_BUFFER+0x4c>
    d7ca:	2300      	movs	r3, #0
    d7cc:	1c1a      	adds	r2, r3, #0
    d7ce:	2301      	movs	r3, #1
    d7d0:	4013      	ands	r3, r2
    d7d2:	b2db      	uxtb	r3, r3
}
    d7d4:	0018      	movs	r0, r3
    d7d6:	46bd      	mov	sp, r7
    d7d8:	b002      	add	sp, #8
    d7da:	bd80      	pop	{r7, pc}

0000d7dc <read_vesc_packet>:

void read_vesc_packet(void){
    d7dc:	b590      	push	{r4, r7, lr}
    d7de:	b083      	sub	sp, #12
    d7e0:	af00      	add	r7, sp, #0
	if(CHECK_BUFFER(vesc_USART_read_buffer)){
    d7e2:	4b4b      	ldr	r3, [pc, #300]	; (d910 <read_vesc_packet+0x134>)
    d7e4:	0018      	movs	r0, r3
    d7e6:	4b4b      	ldr	r3, [pc, #300]	; (d914 <read_vesc_packet+0x138>)
    d7e8:	4798      	blx	r3
    d7ea:	1e03      	subs	r3, r0, #0
    d7ec:	d100      	bne.n	d7f0 <read_vesc_packet+0x14>
    d7ee:	e084      	b.n	d8fa <read_vesc_packet+0x11e>
		VESC_PACKET_RECIEVED = true;
    d7f0:	4b49      	ldr	r3, [pc, #292]	; (d918 <read_vesc_packet+0x13c>)
    d7f2:	2201      	movs	r2, #1
    d7f4:	701a      	strb	r2, [r3, #0]

		if(vesc_USART_read_buffer[0] == 0x2){
    d7f6:	4b46      	ldr	r3, [pc, #280]	; (d910 <read_vesc_packet+0x134>)
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	2b02      	cmp	r3, #2
    d7fc:	d11e      	bne.n	d83c <read_vesc_packet+0x60>
			packet_len = vesc_USART_read_buffer[1];
    d7fe:	4b44      	ldr	r3, [pc, #272]	; (d910 <read_vesc_packet+0x134>)
    d800:	785b      	ldrb	r3, [r3, #1]
    d802:	b29a      	uxth	r2, r3
    d804:	4b45      	ldr	r3, [pc, #276]	; (d91c <read_vesc_packet+0x140>)
    d806:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+2,packet_len);
    d808:	4945      	ldr	r1, [pc, #276]	; (d920 <read_vesc_packet+0x144>)
    d80a:	4b44      	ldr	r3, [pc, #272]	; (d91c <read_vesc_packet+0x140>)
    d80c:	881b      	ldrh	r3, [r3, #0]
    d80e:	001a      	movs	r2, r3
    d810:	4b44      	ldr	r3, [pc, #272]	; (d924 <read_vesc_packet+0x148>)
    d812:	0018      	movs	r0, r3
    d814:	4b44      	ldr	r3, [pc, #272]	; (d928 <read_vesc_packet+0x14c>)
    d816:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+2];
    d818:	4b40      	ldr	r3, [pc, #256]	; (d91c <read_vesc_packet+0x140>)
    d81a:	881b      	ldrh	r3, [r3, #0]
    d81c:	3302      	adds	r3, #2
    d81e:	4a3c      	ldr	r2, [pc, #240]	; (d910 <read_vesc_packet+0x134>)
    d820:	5cd1      	ldrb	r1, [r2, r3]
    d822:	4b42      	ldr	r3, [pc, #264]	; (d92c <read_vesc_packet+0x150>)
    d824:	4a42      	ldr	r2, [pc, #264]	; (d930 <read_vesc_packet+0x154>)
    d826:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+3];
    d828:	4b3c      	ldr	r3, [pc, #240]	; (d91c <read_vesc_packet+0x140>)
    d82a:	881b      	ldrh	r3, [r3, #0]
    d82c:	3303      	adds	r3, #3
    d82e:	4a38      	ldr	r2, [pc, #224]	; (d910 <read_vesc_packet+0x134>)
    d830:	5cd1      	ldrb	r1, [r2, r3]
    d832:	4a3e      	ldr	r2, [pc, #248]	; (d92c <read_vesc_packet+0x150>)
    d834:	2381      	movs	r3, #129	; 0x81
    d836:	009b      	lsls	r3, r3, #2
    d838:	54d1      	strb	r1, [r2, r3]
    d83a:	e024      	b.n	d886 <read_vesc_packet+0xaa>
		} else{
			packet_len = ((vesc_USART_read_buffer[1]<<8)|vesc_USART_read_buffer[2]);
    d83c:	4b34      	ldr	r3, [pc, #208]	; (d910 <read_vesc_packet+0x134>)
    d83e:	785b      	ldrb	r3, [r3, #1]
    d840:	021b      	lsls	r3, r3, #8
    d842:	b21a      	sxth	r2, r3
    d844:	4b32      	ldr	r3, [pc, #200]	; (d910 <read_vesc_packet+0x134>)
    d846:	789b      	ldrb	r3, [r3, #2]
    d848:	b21b      	sxth	r3, r3
    d84a:	4313      	orrs	r3, r2
    d84c:	b21b      	sxth	r3, r3
    d84e:	b29a      	uxth	r2, r3
    d850:	4b32      	ldr	r3, [pc, #200]	; (d91c <read_vesc_packet+0x140>)
    d852:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+3,packet_len);
    d854:	4937      	ldr	r1, [pc, #220]	; (d934 <read_vesc_packet+0x158>)
    d856:	4b31      	ldr	r3, [pc, #196]	; (d91c <read_vesc_packet+0x140>)
    d858:	881b      	ldrh	r3, [r3, #0]
    d85a:	001a      	movs	r2, r3
    d85c:	4b31      	ldr	r3, [pc, #196]	; (d924 <read_vesc_packet+0x148>)
    d85e:	0018      	movs	r0, r3
    d860:	4b31      	ldr	r3, [pc, #196]	; (d928 <read_vesc_packet+0x14c>)
    d862:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+3];
    d864:	4b2d      	ldr	r3, [pc, #180]	; (d91c <read_vesc_packet+0x140>)
    d866:	881b      	ldrh	r3, [r3, #0]
    d868:	3303      	adds	r3, #3
    d86a:	4a29      	ldr	r2, [pc, #164]	; (d910 <read_vesc_packet+0x134>)
    d86c:	5cd1      	ldrb	r1, [r2, r3]
    d86e:	4b2f      	ldr	r3, [pc, #188]	; (d92c <read_vesc_packet+0x150>)
    d870:	4a2f      	ldr	r2, [pc, #188]	; (d930 <read_vesc_packet+0x154>)
    d872:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+4];
    d874:	4b29      	ldr	r3, [pc, #164]	; (d91c <read_vesc_packet+0x140>)
    d876:	881b      	ldrh	r3, [r3, #0]
    d878:	3304      	adds	r3, #4
    d87a:	4a25      	ldr	r2, [pc, #148]	; (d910 <read_vesc_packet+0x134>)
    d87c:	5cd1      	ldrb	r1, [r2, r3]
    d87e:	4a2b      	ldr	r2, [pc, #172]	; (d92c <read_vesc_packet+0x150>)
    d880:	2381      	movs	r3, #129	; 0x81
    d882:	009b      	lsls	r3, r3, #2
    d884:	54d1      	strb	r1, [r2, r3]
		}
		
		// Check if the message was corrupted
		uint16_t crc_check = crc16(vesc_revieve_packet.payload, packet_len);
    d886:	4b25      	ldr	r3, [pc, #148]	; (d91c <read_vesc_packet+0x140>)
    d888:	881a      	ldrh	r2, [r3, #0]
    d88a:	1dbc      	adds	r4, r7, #6
    d88c:	4b25      	ldr	r3, [pc, #148]	; (d924 <read_vesc_packet+0x148>)
    d88e:	0011      	movs	r1, r2
    d890:	0018      	movs	r0, r3
    d892:	4b29      	ldr	r3, [pc, #164]	; (d938 <read_vesc_packet+0x15c>)
    d894:	4798      	blx	r3
    d896:	0003      	movs	r3, r0
    d898:	8023      	strh	r3, [r4, #0]
		if(crc_check != (uint16_t)((vesc_revieve_packet.crc[0]<<8)|vesc_revieve_packet.crc[1])){
    d89a:	4b24      	ldr	r3, [pc, #144]	; (d92c <read_vesc_packet+0x150>)
    d89c:	4a24      	ldr	r2, [pc, #144]	; (d930 <read_vesc_packet+0x154>)
    d89e:	5c9b      	ldrb	r3, [r3, r2]
    d8a0:	021b      	lsls	r3, r3, #8
    d8a2:	b21a      	sxth	r2, r3
    d8a4:	4921      	ldr	r1, [pc, #132]	; (d92c <read_vesc_packet+0x150>)
    d8a6:	2381      	movs	r3, #129	; 0x81
    d8a8:	009b      	lsls	r3, r3, #2
    d8aa:	5ccb      	ldrb	r3, [r1, r3]
    d8ac:	b21b      	sxth	r3, r3
    d8ae:	4313      	orrs	r3, r2
    d8b0:	b21b      	sxth	r3, r3
    d8b2:	b29b      	uxth	r3, r3
    d8b4:	1dba      	adds	r2, r7, #6
    d8b6:	8812      	ldrh	r2, [r2, #0]
    d8b8:	429a      	cmp	r2, r3
    d8ba:	d005      	beq.n	d8c8 <read_vesc_packet+0xec>
			ERROR_LEDs(0);
    d8bc:	2000      	movs	r0, #0
    d8be:	4b1f      	ldr	r3, [pc, #124]	; (d93c <read_vesc_packet+0x160>)
    d8c0:	4798      	blx	r3
			VESC_PACKET_RECIEVED = false; // dont handle the packet if it was
    d8c2:	4b15      	ldr	r3, [pc, #84]	; (d918 <read_vesc_packet+0x13c>)
    d8c4:	2200      	movs	r2, #0
    d8c6:	701a      	strb	r2, [r3, #0]
		}
		
		vesc_usart_time = millis();
    d8c8:	4b1d      	ldr	r3, [pc, #116]	; (d940 <read_vesc_packet+0x164>)
    d8ca:	4798      	blx	r3
    d8cc:	0002      	movs	r2, r0
    d8ce:	4b1d      	ldr	r3, [pc, #116]	; (d944 <read_vesc_packet+0x168>)
    d8d0:	601a      	str	r2, [r3, #0]
		HOLD_FOR_REPLY = false;
    d8d2:	4b1d      	ldr	r3, [pc, #116]	; (d948 <read_vesc_packet+0x16c>)
    d8d4:	2200      	movs	r2, #0
    d8d6:	701a      	strb	r2, [r3, #0]
		
		memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6);
    d8d8:	4a1c      	ldr	r2, [pc, #112]	; (d94c <read_vesc_packet+0x170>)
    d8da:	4b0d      	ldr	r3, [pc, #52]	; (d910 <read_vesc_packet+0x134>)
    d8dc:	2100      	movs	r1, #0
    d8de:	0018      	movs	r0, r3
    d8e0:	4b1b      	ldr	r3, [pc, #108]	; (d950 <read_vesc_packet+0x174>)
    d8e2:	4798      	blx	r3
		//Stop listening to the ESC UART
		usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
    d8e4:	4b1b      	ldr	r3, [pc, #108]	; (d954 <read_vesc_packet+0x178>)
    d8e6:	2100      	movs	r1, #0
    d8e8:	0018      	movs	r0, r3
    d8ea:	4b1b      	ldr	r3, [pc, #108]	; (d958 <read_vesc_packet+0x17c>)
    d8ec:	4798      	blx	r3
		// Start listening to the ESC UART
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
    d8ee:	4a17      	ldr	r2, [pc, #92]	; (d94c <read_vesc_packet+0x170>)
    d8f0:	4907      	ldr	r1, [pc, #28]	; (d910 <read_vesc_packet+0x134>)
    d8f2:	4b18      	ldr	r3, [pc, #96]	; (d954 <read_vesc_packet+0x178>)
    d8f4:	0018      	movs	r0, r3
    d8f6:	4b19      	ldr	r3, [pc, #100]	; (d95c <read_vesc_packet+0x180>)
    d8f8:	4798      	blx	r3
	}

	if(VESC_PACKET_RECIEVED){
    d8fa:	4b07      	ldr	r3, [pc, #28]	; (d918 <read_vesc_packet+0x13c>)
    d8fc:	781b      	ldrb	r3, [r3, #0]
    d8fe:	2b00      	cmp	r3, #0
    d900:	d001      	beq.n	d906 <read_vesc_packet+0x12a>
		process_recieved_packet();
    d902:	4b17      	ldr	r3, [pc, #92]	; (d960 <read_vesc_packet+0x184>)
    d904:	4798      	blx	r3
	}
}
    d906:	46c0      	nop			; (mov r8, r8)
    d908:	46bd      	mov	sp, r7
    d90a:	b003      	add	sp, #12
    d90c:	bd90      	pop	{r4, r7, pc}
    d90e:	46c0      	nop			; (mov r8, r8)
    d910:	20000a78 	.word	0x20000a78
    d914:	0000d781 	.word	0x0000d781
    d918:	2000036d 	.word	0x2000036d
    d91c:	20000370 	.word	0x20000370
    d920:	20000a7a 	.word	0x20000a7a
    d924:	20000ce3 	.word	0x20000ce3
    d928:	000170dd 	.word	0x000170dd
    d92c:	20000ce0 	.word	0x20000ce0
    d930:	00000203 	.word	0x00000203
    d934:	20000a7b 	.word	0x20000a7b
    d938:	0000b86d 	.word	0x0000b86d
    d93c:	0000b631 	.word	0x0000b631
    d940:	0000b109 	.word	0x0000b109
    d944:	20000364 	.word	0x20000364
    d948:	20000368 	.word	0x20000368
    d94c:	00000206 	.word	0x00000206
    d950:	000170ef 	.word	0x000170ef
    d954:	20000718 	.word	0x20000718
    d958:	000066b9 	.word	0x000066b9
    d95c:	00006671 	.word	0x00006671
    d960:	0000bb1d 	.word	0x0000bb1d

0000d964 <config_eic_channel>:

/* Sense: 
 * None, Rise, Fall, Both, High, Low
 * 0x0	 0x1   0x2	 0x3   0x4   0x5
 */
void config_eic_channel(int ch, int sense, bool filt) {
    d964:	b5b0      	push	{r4, r5, r7, lr}
    d966:	b084      	sub	sp, #16
    d968:	af00      	add	r7, sp, #0
    d96a:	60f8      	str	r0, [r7, #12]
    d96c:	60b9      	str	r1, [r7, #8]
    d96e:	1dfb      	adds	r3, r7, #7
    d970:	701a      	strb	r2, [r3, #0]
	// Config channel
	EIC->CONFIG[ch/8].reg &= ~(0xF << 4*(ch%8));
    d972:	4c32      	ldr	r4, [pc, #200]	; (da3c <config_eic_channel+0xd8>)
    d974:	68fb      	ldr	r3, [r7, #12]
    d976:	2b00      	cmp	r3, #0
    d978:	da00      	bge.n	d97c <config_eic_channel+0x18>
    d97a:	3307      	adds	r3, #7
    d97c:	10db      	asrs	r3, r3, #3
    d97e:	001a      	movs	r2, r3
    d980:	492e      	ldr	r1, [pc, #184]	; (da3c <config_eic_channel+0xd8>)
    d982:	1d93      	adds	r3, r2, #6
    d984:	009b      	lsls	r3, r3, #2
    d986:	5859      	ldr	r1, [r3, r1]
    d988:	68fb      	ldr	r3, [r7, #12]
    d98a:	482d      	ldr	r0, [pc, #180]	; (da40 <config_eic_channel+0xdc>)
    d98c:	4003      	ands	r3, r0
    d98e:	d504      	bpl.n	d99a <config_eic_channel+0x36>
    d990:	3b01      	subs	r3, #1
    d992:	2008      	movs	r0, #8
    d994:	4240      	negs	r0, r0
    d996:	4303      	orrs	r3, r0
    d998:	3301      	adds	r3, #1
    d99a:	009b      	lsls	r3, r3, #2
    d99c:	200f      	movs	r0, #15
    d99e:	4098      	lsls	r0, r3
    d9a0:	0003      	movs	r3, r0
    d9a2:	43db      	mvns	r3, r3
    d9a4:	4019      	ands	r1, r3
    d9a6:	1d93      	adds	r3, r2, #6
    d9a8:	009b      	lsls	r3, r3, #2
    d9aa:	5119      	str	r1, [r3, r4]
	EIC->CONFIG[ch/8].reg |= (0xF & ((filt? 0x8 : 0) | (0x7 & sense))) << 4*(ch%8);
    d9ac:	4d23      	ldr	r5, [pc, #140]	; (da3c <config_eic_channel+0xd8>)
    d9ae:	68fb      	ldr	r3, [r7, #12]
    d9b0:	2b00      	cmp	r3, #0
    d9b2:	da00      	bge.n	d9b6 <config_eic_channel+0x52>
    d9b4:	3307      	adds	r3, #7
    d9b6:	10db      	asrs	r3, r3, #3
    d9b8:	001a      	movs	r2, r3
    d9ba:	4920      	ldr	r1, [pc, #128]	; (da3c <config_eic_channel+0xd8>)
    d9bc:	1d93      	adds	r3, r2, #6
    d9be:	009b      	lsls	r3, r3, #2
    d9c0:	5859      	ldr	r1, [r3, r1]
    d9c2:	1dfb      	adds	r3, r7, #7
    d9c4:	781b      	ldrb	r3, [r3, #0]
    d9c6:	2b00      	cmp	r3, #0
    d9c8:	d001      	beq.n	d9ce <config_eic_channel+0x6a>
    d9ca:	2308      	movs	r3, #8
    d9cc:	e000      	b.n	d9d0 <config_eic_channel+0x6c>
    d9ce:	2300      	movs	r3, #0
    d9d0:	68b8      	ldr	r0, [r7, #8]
    d9d2:	2407      	movs	r4, #7
    d9d4:	4020      	ands	r0, r4
    d9d6:	4303      	orrs	r3, r0
    d9d8:	200f      	movs	r0, #15
    d9da:	4018      	ands	r0, r3
    d9dc:	68fb      	ldr	r3, [r7, #12]
    d9de:	4c18      	ldr	r4, [pc, #96]	; (da40 <config_eic_channel+0xdc>)
    d9e0:	4023      	ands	r3, r4
    d9e2:	d504      	bpl.n	d9ee <config_eic_channel+0x8a>
    d9e4:	3b01      	subs	r3, #1
    d9e6:	2408      	movs	r4, #8
    d9e8:	4264      	negs	r4, r4
    d9ea:	4323      	orrs	r3, r4
    d9ec:	3301      	adds	r3, #1
    d9ee:	009b      	lsls	r3, r3, #2
    d9f0:	4098      	lsls	r0, r3
    d9f2:	0003      	movs	r3, r0
    d9f4:	4319      	orrs	r1, r3
    d9f6:	1d93      	adds	r3, r2, #6
    d9f8:	009b      	lsls	r3, r3, #2
    d9fa:	5159      	str	r1, [r3, r5]
	// No wake-up
	EIC->WAKEUP.reg &= ~(1 << ch);	
    d9fc:	4b0f      	ldr	r3, [pc, #60]	; (da3c <config_eic_channel+0xd8>)
    d9fe:	4a0f      	ldr	r2, [pc, #60]	; (da3c <config_eic_channel+0xd8>)
    da00:	6952      	ldr	r2, [r2, #20]
    da02:	2001      	movs	r0, #1
    da04:	68f9      	ldr	r1, [r7, #12]
    da06:	4088      	lsls	r0, r1
    da08:	0001      	movs	r1, r0
    da0a:	43c9      	mvns	r1, r1
    da0c:	400a      	ands	r2, r1
    da0e:	615a      	str	r2, [r3, #20]
	// No interrupt
	EIC->INTENCLR.reg |= 1<<ch;
    da10:	4b0a      	ldr	r3, [pc, #40]	; (da3c <config_eic_channel+0xd8>)
    da12:	4a0a      	ldr	r2, [pc, #40]	; (da3c <config_eic_channel+0xd8>)
    da14:	6892      	ldr	r2, [r2, #8]
    da16:	2001      	movs	r0, #1
    da18:	68f9      	ldr	r1, [r7, #12]
    da1a:	4088      	lsls	r0, r1
    da1c:	0001      	movs	r1, r0
    da1e:	430a      	orrs	r2, r1
    da20:	609a      	str	r2, [r3, #8]
	// Generate Event 
	EIC->EVCTRL.reg |= 1<<ch;
    da22:	4b06      	ldr	r3, [pc, #24]	; (da3c <config_eic_channel+0xd8>)
    da24:	4a05      	ldr	r2, [pc, #20]	; (da3c <config_eic_channel+0xd8>)
    da26:	6852      	ldr	r2, [r2, #4]
    da28:	2001      	movs	r0, #1
    da2a:	68f9      	ldr	r1, [r7, #12]
    da2c:	4088      	lsls	r0, r1
    da2e:	0001      	movs	r1, r0
    da30:	430a      	orrs	r2, r1
    da32:	605a      	str	r2, [r3, #4]
}
    da34:	46c0      	nop			; (mov r8, r8)
    da36:	46bd      	mov	sp, r7
    da38:	b004      	add	sp, #16
    da3a:	bdb0      	pop	{r4, r5, r7, pc}
    da3c:	40001800 	.word	0x40001800
    da40:	80000007 	.word	0x80000007

0000da44 <config_eic>:

void config_eic() {
    da44:	b580      	push	{r7, lr}
    da46:	af00      	add	r7, sp, #0
PM->APBAMASK.reg |= PM_APBAMASK_EIC;
    da48:	4b17      	ldr	r3, [pc, #92]	; (daa8 <config_eic+0x64>)
    da4a:	4a17      	ldr	r2, [pc, #92]	; (daa8 <config_eic+0x64>)
    da4c:	6992      	ldr	r2, [r2, #24]
    da4e:	2140      	movs	r1, #64	; 0x40
    da50:	430a      	orrs	r2, r1
    da52:	619a      	str	r2, [r3, #24]
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EIC_GCLK_ID) |
    da54:	4b15      	ldr	r3, [pc, #84]	; (daac <config_eic+0x68>)
    da56:	4a16      	ldr	r2, [pc, #88]	; (dab0 <config_eic+0x6c>)
    da58:	805a      	strh	r2, [r3, #2]
GCLK_CLKCTRL_CLKEN |
GCLK_CLKCTRL_GEN(0);
EIC->CTRL.reg = EIC_CTRL_SWRST;
    da5a:	4b16      	ldr	r3, [pc, #88]	; (dab4 <config_eic+0x70>)
    da5c:	2201      	movs	r2, #1
    da5e:	701a      	strb	r2, [r3, #0]
while(EIC->CTRL.bit.SWRST && EIC->STATUS.bit.SYNCBUSY);
    da60:	46c0      	nop			; (mov r8, r8)
    da62:	4b14      	ldr	r3, [pc, #80]	; (dab4 <config_eic+0x70>)
    da64:	781b      	ldrb	r3, [r3, #0]
    da66:	07db      	lsls	r3, r3, #31
    da68:	0fdb      	lsrs	r3, r3, #31
    da6a:	b2db      	uxtb	r3, r3
    da6c:	2b00      	cmp	r3, #0
    da6e:	d006      	beq.n	da7e <config_eic+0x3a>
    da70:	4b10      	ldr	r3, [pc, #64]	; (dab4 <config_eic+0x70>)
    da72:	785b      	ldrb	r3, [r3, #1]
    da74:	061b      	lsls	r3, r3, #24
    da76:	0fdb      	lsrs	r3, r3, #31
    da78:	b2db      	uxtb	r3, r3
    da7a:	2b00      	cmp	r3, #0
    da7c:	d1f1      	bne.n	da62 <config_eic+0x1e>
config_eic_channel(2, 4, false);
    da7e:	2200      	movs	r2, #0
    da80:	2104      	movs	r1, #4
    da82:	2002      	movs	r0, #2
    da84:	4b0c      	ldr	r3, [pc, #48]	; (dab8 <config_eic+0x74>)
    da86:	4798      	blx	r3

EIC->CTRL.bit.ENABLE = 1;
    da88:	4a0a      	ldr	r2, [pc, #40]	; (dab4 <config_eic+0x70>)
    da8a:	7813      	ldrb	r3, [r2, #0]
    da8c:	2102      	movs	r1, #2
    da8e:	430b      	orrs	r3, r1
    da90:	7013      	strb	r3, [r2, #0]
while(EIC->STATUS.bit.SYNCBUSY);
    da92:	46c0      	nop			; (mov r8, r8)
    da94:	4b07      	ldr	r3, [pc, #28]	; (dab4 <config_eic+0x70>)
    da96:	785b      	ldrb	r3, [r3, #1]
    da98:	061b      	lsls	r3, r3, #24
    da9a:	0fdb      	lsrs	r3, r3, #31
    da9c:	b2db      	uxtb	r3, r3
    da9e:	2b00      	cmp	r3, #0
    daa0:	d1f8      	bne.n	da94 <config_eic+0x50>
}
    daa2:	46c0      	nop			; (mov r8, r8)
    daa4:	46bd      	mov	sp, r7
    daa6:	bd80      	pop	{r7, pc}
    daa8:	40000400 	.word	0x40000400
    daac:	40000c00 	.word	0x40000c00
    dab0:	00004005 	.word	0x00004005
    dab4:	40001800 	.word	0x40001800
    dab8:	0000d965 	.word	0x0000d965

0000dabc <config_evsys>:

void config_evsys() {
    dabc:	b580      	push	{r7, lr}
    dabe:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_EVSYS;
    dac0:	4b17      	ldr	r3, [pc, #92]	; (db20 <config_evsys+0x64>)
    dac2:	4a17      	ldr	r2, [pc, #92]	; (db20 <config_evsys+0x64>)
    dac4:	6a12      	ldr	r2, [r2, #32]
    dac6:	2102      	movs	r1, #2
    dac8:	430a      	orrs	r2, r1
    daca:	621a      	str	r2, [r3, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EVSYS_GCLK_ID_0) |
    dacc:	4b15      	ldr	r3, [pc, #84]	; (db24 <config_evsys+0x68>)
    dace:	4a16      	ldr	r2, [pc, #88]	; (db28 <config_evsys+0x6c>)
    dad0:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN |
	GCLK_CLKCTRL_GEN(0);
	while(GCLK->STATUS.bit.SYNCBUSY);
    dad2:	46c0      	nop			; (mov r8, r8)
    dad4:	4b13      	ldr	r3, [pc, #76]	; (db24 <config_evsys+0x68>)
    dad6:	785b      	ldrb	r3, [r3, #1]
    dad8:	061b      	lsls	r3, r3, #24
    dada:	0fdb      	lsrs	r3, r3, #31
    dadc:	b2db      	uxtb	r3, r3
    dade:	2b00      	cmp	r3, #0
    dae0:	d1f8      	bne.n	dad4 <config_evsys+0x18>

	EVSYS->CTRL.bit.SWRST = 1;
    dae2:	4a12      	ldr	r2, [pc, #72]	; (db2c <config_evsys+0x70>)
    dae4:	7813      	ldrb	r3, [r2, #0]
    dae6:	2101      	movs	r1, #1
    dae8:	430b      	orrs	r3, r1
    daea:	7013      	strb	r3, [r2, #0]
	while(EVSYS->CTRL.bit.SWRST);
    daec:	46c0      	nop			; (mov r8, r8)
    daee:	4b0f      	ldr	r3, [pc, #60]	; (db2c <config_evsys+0x70>)
    daf0:	781b      	ldrb	r3, [r3, #0]
    daf2:	07db      	lsls	r3, r3, #31
    daf4:	0fdb      	lsrs	r3, r3, #31
    daf6:	b2db      	uxtb	r3, r3
    daf8:	2b00      	cmp	r3, #0
    dafa:	d1f8      	bne.n	daee <config_evsys+0x32>

	// Event receiver
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(1) | // Set channel n-1
    dafc:	4b0b      	ldr	r3, [pc, #44]	; (db2c <config_evsys+0x70>)
    dafe:	220c      	movs	r2, #12
    db00:	32ff      	adds	r2, #255	; 0xff
    db02:	811a      	strh	r2, [r3, #8]
	EVSYS_USER_USER(EVSYS_ID_USER_TCC1_EV_1); // Match/Capture 1 on TCC1
	// Event channel
	EVSYS->CHANNEL.reg = EVSYS_CHANNEL_CHANNEL(0) | // Set channel n
    db04:	4b09      	ldr	r3, [pc, #36]	; (db2c <config_evsys+0x70>)
    db06:	4a0a      	ldr	r2, [pc, #40]	; (db30 <config_evsys+0x74>)
    db08:	605a      	str	r2, [r3, #4]
	EVSYS_CHANNEL_PATH_ASYNCHRONOUS |
	EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_2) |
	EVSYS_CHANNEL_EDGSEL_BOTH_EDGES; // Detect both edges
	// Wait channel to be ready
	while(!EVSYS->CHSTATUS.bit.USRRDY0);
    db0a:	46c0      	nop			; (mov r8, r8)
    db0c:	4b07      	ldr	r3, [pc, #28]	; (db2c <config_evsys+0x70>)
    db0e:	68db      	ldr	r3, [r3, #12]
    db10:	07db      	lsls	r3, r3, #31
    db12:	0fdb      	lsrs	r3, r3, #31
    db14:	b2db      	uxtb	r3, r3
    db16:	2b00      	cmp	r3, #0
    db18:	d0f8      	beq.n	db0c <config_evsys+0x50>
	// EVSYS is always enabled
}
    db1a:	46c0      	nop			; (mov r8, r8)
    db1c:	46bd      	mov	sp, r7
    db1e:	bd80      	pop	{r7, pc}
    db20:	40000400 	.word	0x40000400
    db24:	40000c00 	.word	0x40000c00
    db28:	00004007 	.word	0x00004007
    db2c:	42000400 	.word	0x42000400
    db30:	0e0e0000 	.word	0x0e0e0000

0000db34 <gpio_in>:

void gpio_in(int port, int pin)	{
    db34:	b590      	push	{r4, r7, lr}
    db36:	b083      	sub	sp, #12
    db38:	af00      	add	r7, sp, #0
    db3a:	6078      	str	r0, [r7, #4]
    db3c:	6039      	str	r1, [r7, #0]
	PORT->Group[port].DIRCLR.reg = (1 << pin);
    db3e:	4a13      	ldr	r2, [pc, #76]	; (db8c <gpio_in+0x58>)
    db40:	2101      	movs	r1, #1
    db42:	683b      	ldr	r3, [r7, #0]
    db44:	4099      	lsls	r1, r3
    db46:	000b      	movs	r3, r1
    db48:	0019      	movs	r1, r3
    db4a:	687b      	ldr	r3, [r7, #4]
    db4c:	01db      	lsls	r3, r3, #7
    db4e:	18d3      	adds	r3, r2, r3
    db50:	3304      	adds	r3, #4
    db52:	6019      	str	r1, [r3, #0]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_INEN;
    db54:	480d      	ldr	r0, [pc, #52]	; (db8c <gpio_in+0x58>)
    db56:	4a0d      	ldr	r2, [pc, #52]	; (db8c <gpio_in+0x58>)
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	2140      	movs	r1, #64	; 0x40
    db5c:	01db      	lsls	r3, r3, #7
    db5e:	18d2      	adds	r2, r2, r3
    db60:	683b      	ldr	r3, [r7, #0]
    db62:	18d3      	adds	r3, r2, r3
    db64:	185b      	adds	r3, r3, r1
    db66:	781b      	ldrb	r3, [r3, #0]
    db68:	b2db      	uxtb	r3, r3
    db6a:	2202      	movs	r2, #2
    db6c:	4313      	orrs	r3, r2
    db6e:	b2dc      	uxtb	r4, r3
    db70:	687b      	ldr	r3, [r7, #4]
    db72:	2140      	movs	r1, #64	; 0x40
    db74:	01db      	lsls	r3, r3, #7
    db76:	18c2      	adds	r2, r0, r3
    db78:	683b      	ldr	r3, [r7, #0]
    db7a:	18d3      	adds	r3, r2, r3
    db7c:	185b      	adds	r3, r3, r1
    db7e:	1c22      	adds	r2, r4, #0
    db80:	701a      	strb	r2, [r3, #0]
}
    db82:	46c0      	nop			; (mov r8, r8)
    db84:	46bd      	mov	sp, r7
    db86:	b003      	add	sp, #12
    db88:	bd90      	pop	{r4, r7, pc}
    db8a:	46c0      	nop			; (mov r8, r8)
    db8c:	41004400 	.word	0x41004400

0000db90 <gpio_pmuxen>:

void gpio_pmuxen(int port, int pin, int mux) {
    db90:	b590      	push	{r4, r7, lr}
    db92:	b085      	sub	sp, #20
    db94:	af00      	add	r7, sp, #0
    db96:	60f8      	str	r0, [r7, #12]
    db98:	60b9      	str	r1, [r7, #8]
    db9a:	607a      	str	r2, [r7, #4]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_PMUXEN;
    db9c:	4827      	ldr	r0, [pc, #156]	; (dc3c <gpio_pmuxen+0xac>)
    db9e:	4a27      	ldr	r2, [pc, #156]	; (dc3c <gpio_pmuxen+0xac>)
    dba0:	68fb      	ldr	r3, [r7, #12]
    dba2:	2140      	movs	r1, #64	; 0x40
    dba4:	01db      	lsls	r3, r3, #7
    dba6:	18d2      	adds	r2, r2, r3
    dba8:	68bb      	ldr	r3, [r7, #8]
    dbaa:	18d3      	adds	r3, r2, r3
    dbac:	185b      	adds	r3, r3, r1
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	b2db      	uxtb	r3, r3
    dbb2:	2201      	movs	r2, #1
    dbb4:	4313      	orrs	r3, r2
    dbb6:	b2dc      	uxtb	r4, r3
    dbb8:	68fb      	ldr	r3, [r7, #12]
    dbba:	2140      	movs	r1, #64	; 0x40
    dbbc:	01db      	lsls	r3, r3, #7
    dbbe:	18c2      	adds	r2, r0, r3
    dbc0:	68bb      	ldr	r3, [r7, #8]
    dbc2:	18d3      	adds	r3, r2, r3
    dbc4:	185b      	adds	r3, r3, r1
    dbc6:	1c22      	adds	r2, r4, #0
    dbc8:	701a      	strb	r2, [r3, #0]
	if (pin & 1)
    dbca:	68bb      	ldr	r3, [r7, #8]
    dbcc:	2201      	movs	r2, #1
    dbce:	4013      	ands	r3, r2
    dbd0:	d017      	beq.n	dc02 <gpio_pmuxen+0x72>
	PORT->Group[port].PMUX[pin>>1].bit.PMUXO = mux;
    dbd2:	4c1a      	ldr	r4, [pc, #104]	; (dc3c <gpio_pmuxen+0xac>)
    dbd4:	68bb      	ldr	r3, [r7, #8]
    dbd6:	105b      	asrs	r3, r3, #1
    dbd8:	687a      	ldr	r2, [r7, #4]
    dbda:	b2d2      	uxtb	r2, r2
    dbdc:	1c11      	adds	r1, r2, #0
    dbde:	220f      	movs	r2, #15
    dbe0:	400a      	ands	r2, r1
    dbe2:	b2d1      	uxtb	r1, r2
    dbe4:	68fa      	ldr	r2, [r7, #12]
    dbe6:	2030      	movs	r0, #48	; 0x30
    dbe8:	01d2      	lsls	r2, r2, #7
    dbea:	18a2      	adds	r2, r4, r2
    dbec:	18d3      	adds	r3, r2, r3
    dbee:	181a      	adds	r2, r3, r0
    dbf0:	7813      	ldrb	r3, [r2, #0]
    dbf2:	0108      	lsls	r0, r1, #4
    dbf4:	210f      	movs	r1, #15
    dbf6:	400b      	ands	r3, r1
    dbf8:	1c19      	adds	r1, r3, #0
    dbfa:	1c03      	adds	r3, r0, #0
    dbfc:	430b      	orrs	r3, r1
    dbfe:	7013      	strb	r3, [r2, #0]
	else
	PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
}
    dc00:	e017      	b.n	dc32 <gpio_pmuxen+0xa2>
	PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
    dc02:	4c0e      	ldr	r4, [pc, #56]	; (dc3c <gpio_pmuxen+0xac>)
    dc04:	68bb      	ldr	r3, [r7, #8]
    dc06:	105b      	asrs	r3, r3, #1
    dc08:	687a      	ldr	r2, [r7, #4]
    dc0a:	b2d2      	uxtb	r2, r2
    dc0c:	1c11      	adds	r1, r2, #0
    dc0e:	220f      	movs	r2, #15
    dc10:	400a      	ands	r2, r1
    dc12:	b2d1      	uxtb	r1, r2
    dc14:	68fa      	ldr	r2, [r7, #12]
    dc16:	2030      	movs	r0, #48	; 0x30
    dc18:	01d2      	lsls	r2, r2, #7
    dc1a:	18a2      	adds	r2, r4, r2
    dc1c:	18d3      	adds	r3, r2, r3
    dc1e:	181a      	adds	r2, r3, r0
    dc20:	7813      	ldrb	r3, [r2, #0]
    dc22:	200f      	movs	r0, #15
    dc24:	4008      	ands	r0, r1
    dc26:	210f      	movs	r1, #15
    dc28:	438b      	bics	r3, r1
    dc2a:	1c19      	adds	r1, r3, #0
    dc2c:	1c03      	adds	r3, r0, #0
    dc2e:	430b      	orrs	r3, r1
    dc30:	7013      	strb	r3, [r2, #0]
}
    dc32:	46c0      	nop			; (mov r8, r8)
    dc34:	46bd      	mov	sp, r7
    dc36:	b005      	add	sp, #20
    dc38:	bd90      	pop	{r4, r7, pc}
    dc3a:	46c0      	nop			; (mov r8, r8)
    dc3c:	41004400 	.word	0x41004400

0000dc40 <config_gpio>:

void config_gpio() {
    dc40:	b580      	push	{r7, lr}
    dc42:	af00      	add	r7, sp, #0
	gpio_in(1, 2);
    dc44:	2102      	movs	r1, #2
    dc46:	2001      	movs	r0, #1
    dc48:	4b05      	ldr	r3, [pc, #20]	; (dc60 <config_gpio+0x20>)
    dc4a:	4798      	blx	r3
	gpio_pmuxen(1, 2, PINMUX_PB02A_EIC_EXTINT2);
    dc4c:	2388      	movs	r3, #136	; 0x88
    dc4e:	039b      	lsls	r3, r3, #14
    dc50:	001a      	movs	r2, r3
    dc52:	2102      	movs	r1, #2
    dc54:	2001      	movs	r0, #1
    dc56:	4b03      	ldr	r3, [pc, #12]	; (dc64 <config_gpio+0x24>)
    dc58:	4798      	blx	r3
}
    dc5a:	46c0      	nop			; (mov r8, r8)
    dc5c:	46bd      	mov	sp, r7
    dc5e:	bd80      	pop	{r7, pc}
    dc60:	0000db35 	.word	0x0000db35
    dc64:	0000db91 	.word	0x0000db91

0000dc68 <get_pulse_width>:

//uint16_t light_sens = 0; // for PWM debugging
inline int get_pulse_width() {
    dc68:	b580      	push	{r7, lr}
    dc6a:	af00      	add	r7, sp, #0
	return TCC1->CC[0].bit.CC;
    dc6c:	4b03      	ldr	r3, [pc, #12]	; (dc7c <get_pulse_width+0x14>)
    dc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dc70:	021b      	lsls	r3, r3, #8
    dc72:	0a1b      	lsrs	r3, r3, #8
}
    dc74:	0018      	movs	r0, r3
    dc76:	46bd      	mov	sp, r7
    dc78:	bd80      	pop	{r7, pc}
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	42002400 	.word	0x42002400

0000dc80 <HandleUserInput>:

int pulse_width_last = 0;
int pulse_width = 0;
void HandleUserInput()
{
    dc80:	b590      	push	{r4, r7, lr}
    dc82:	b083      	sub	sp, #12
    dc84:	af00      	add	r7, sp, #0
	///////////////   Use the appropriate throttle input   ///////////////
	//////////////////////////////////////////////////////////////////////
	switch(remote_type){
    dc86:	4bcf      	ldr	r3, [pc, #828]	; (dfc4 <HandleUserInput+0x344>)
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	2b04      	cmp	r3, #4
    dc8c:	d858      	bhi.n	dd40 <HandleUserInput+0xc0>
    dc8e:	009a      	lsls	r2, r3, #2
    dc90:	4bcd      	ldr	r3, [pc, #820]	; (dfc8 <HandleUserInput+0x348>)
    dc92:	18d3      	adds	r3, r2, r3
    dc94:	681b      	ldr	r3, [r3, #0]
    dc96:	469f      	mov	pc, r3
		case REMOTE_PPM:
		case REMOTE_UART_PPM:{
			READ_VESC_PWM = true;
    dc98:	4bcc      	ldr	r3, [pc, #816]	; (dfcc <HandleUserInput+0x34c>)
    dc9a:	2201      	movs	r2, #1
    dc9c:	701a      	strb	r2, [r3, #0]
			float temp = (((float)latest_vesc_vals.pwm_val + 595000.0)*(255.0/1495000.0));
    dc9e:	4bcc      	ldr	r3, [pc, #816]	; (dfd0 <HandleUserInput+0x350>)
    dca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    dca2:	4bcc      	ldr	r3, [pc, #816]	; (dfd4 <HandleUserInput+0x354>)
    dca4:	0010      	movs	r0, r2
    dca6:	4798      	blx	r3
    dca8:	1c02      	adds	r2, r0, #0
    dcaa:	4bcb      	ldr	r3, [pc, #812]	; (dfd8 <HandleUserInput+0x358>)
    dcac:	1c10      	adds	r0, r2, #0
    dcae:	4798      	blx	r3
    dcb0:	4cca      	ldr	r4, [pc, #808]	; (dfdc <HandleUserInput+0x35c>)
    dcb2:	2200      	movs	r2, #0
    dcb4:	4bca      	ldr	r3, [pc, #808]	; (dfe0 <HandleUserInput+0x360>)
    dcb6:	47a0      	blx	r4
    dcb8:	0003      	movs	r3, r0
    dcba:	000c      	movs	r4, r1
    dcbc:	0018      	movs	r0, r3
    dcbe:	0021      	movs	r1, r4
    dcc0:	4cc8      	ldr	r4, [pc, #800]	; (dfe4 <HandleUserInput+0x364>)
    dcc2:	4ac9      	ldr	r2, [pc, #804]	; (dfe8 <HandleUserInput+0x368>)
    dcc4:	4bc9      	ldr	r3, [pc, #804]	; (dfec <HandleUserInput+0x36c>)
    dcc6:	47a0      	blx	r4
    dcc8:	0003      	movs	r3, r0
    dcca:	000c      	movs	r4, r1
    dccc:	0019      	movs	r1, r3
    dcce:	0022      	movs	r2, r4
    dcd0:	4bc7      	ldr	r3, [pc, #796]	; (dff0 <HandleUserInput+0x370>)
    dcd2:	0008      	movs	r0, r1
    dcd4:	0011      	movs	r1, r2
    dcd6:	4798      	blx	r3
    dcd8:	1c03      	adds	r3, r0, #0
    dcda:	607b      	str	r3, [r7, #4]
			//temp = -temp + 255;
			if(temp < 0)
    dcdc:	4bc5      	ldr	r3, [pc, #788]	; (dff4 <HandleUserInput+0x374>)
    dcde:	2100      	movs	r1, #0
    dce0:	6878      	ldr	r0, [r7, #4]
    dce2:	4798      	blx	r3
    dce4:	1e03      	subs	r3, r0, #0
    dce6:	d002      	beq.n	dcee <HandleUserInput+0x6e>
				temp = 0;
    dce8:	2300      	movs	r3, #0
    dcea:	607b      	str	r3, [r7, #4]
    dcec:	e007      	b.n	dcfe <HandleUserInput+0x7e>
			else if(temp > 255)
    dcee:	4bc2      	ldr	r3, [pc, #776]	; (dff8 <HandleUserInput+0x378>)
    dcf0:	49c2      	ldr	r1, [pc, #776]	; (dffc <HandleUserInput+0x37c>)
    dcf2:	6878      	ldr	r0, [r7, #4]
    dcf4:	4798      	blx	r3
    dcf6:	1e03      	subs	r3, r0, #0
    dcf8:	d001      	beq.n	dcfe <HandleUserInput+0x7e>
				temp = 255;
    dcfa:	4bc0      	ldr	r3, [pc, #768]	; (dffc <HandleUserInput+0x37c>)
    dcfc:	607b      	str	r3, [r7, #4]
			remote_y = (uint8_t)(temp);
    dcfe:	4bc0      	ldr	r3, [pc, #768]	; (e000 <HandleUserInput+0x380>)
    dd00:	6878      	ldr	r0, [r7, #4]
    dd02:	4798      	blx	r3
    dd04:	0003      	movs	r3, r0
    dd06:	b2da      	uxtb	r2, r3
    dd08:	4bbe      	ldr	r3, [pc, #760]	; (e004 <HandleUserInput+0x384>)
    dd0a:	701a      	strb	r2, [r3, #0]
			break;}
    dd0c:	e018      	b.n	dd40 <HandleUserInput+0xc0>
		case REMOTE_UART_SINGLE:
		case REMOTE_UART_DUAL:
			READ_VESC_CHUCK = true;
    dd0e:	4bbe      	ldr	r3, [pc, #760]	; (e008 <HandleUserInput+0x388>)
    dd10:	2201      	movs	r2, #1
    dd12:	701a      	strb	r2, [r3, #0]
			remote_y = rec_chuck_struct.js_y;
    dd14:	4bbd      	ldr	r3, [pc, #756]	; (e00c <HandleUserInput+0x38c>)
    dd16:	785b      	ldrb	r3, [r3, #1]
    dd18:	b25b      	sxtb	r3, r3
    dd1a:	b2da      	uxtb	r2, r3
    dd1c:	4bb9      	ldr	r3, [pc, #740]	; (e004 <HandleUserInput+0x384>)
    dd1e:	701a      	strb	r2, [r3, #0]
			if(remote_type == REMOTE_UART_DUAL)
    dd20:	4ba8      	ldr	r3, [pc, #672]	; (dfc4 <HandleUserInput+0x344>)
    dd22:	781b      	ldrb	r3, [r3, #0]
    dd24:	2b03      	cmp	r3, #3
    dd26:	d106      	bne.n	dd36 <HandleUserInput+0xb6>
				remote_x = rec_chuck_struct.js_x;
    dd28:	4bb8      	ldr	r3, [pc, #736]	; (e00c <HandleUserInput+0x38c>)
    dd2a:	781b      	ldrb	r3, [r3, #0]
    dd2c:	b25b      	sxtb	r3, r3
    dd2e:	b2da      	uxtb	r2, r3
    dd30:	4bb7      	ldr	r3, [pc, #732]	; (e010 <HandleUserInput+0x390>)
    dd32:	701a      	strb	r2, [r3, #0]
			else
				remote_x = 255/2;
			break;
    dd34:	e004      	b.n	dd40 <HandleUserInput+0xc0>
				remote_x = 255/2;
    dd36:	4bb6      	ldr	r3, [pc, #728]	; (e010 <HandleUserInput+0x390>)
    dd38:	227f      	movs	r2, #127	; 0x7f
    dd3a:	701a      	strb	r2, [r3, #0]
			break;
    dd3c:	e000      	b.n	dd40 <HandleUserInput+0xc0>
		case REMOTE_APP:
			//if(app_remote_check && REMOTE_TYPE < 2)
				//temp_y = AppRemoteY;
			//else
				//temp_y = VescRemoteY;
			break;
    dd3e:	46c0      	nop			; (mov r8, r8)
	}


	////////////////   Use the appropriate button input   ////////////////
	//////////////////////////////////////////////////////////////////////
	switch(button_type){
    dd40:	4bb4      	ldr	r3, [pc, #720]	; (e014 <HandleUserInput+0x394>)
    dd42:	781b      	ldrb	r3, [r3, #0]
    dd44:	2b07      	cmp	r3, #7
    dd46:	d84a      	bhi.n	ddde <HandleUserInput+0x15e>
    dd48:	009a      	lsls	r2, r3, #2
    dd4a:	4bb3      	ldr	r3, [pc, #716]	; (e018 <HandleUserInput+0x398>)
    dd4c:	18d3      	adds	r3, r2, r3
    dd4e:	681b      	ldr	r3, [r3, #0]
    dd50:	469f      	mov	pc, r3
		case BTN_MOMENTARY: 
		case BTN_LATCHED:
			remote_btn_state = port_pin_get_input_level(PPM_IN);
    dd52:	2022      	movs	r0, #34	; 0x22
    dd54:	4bb1      	ldr	r3, [pc, #708]	; (e01c <HandleUserInput+0x39c>)
    dd56:	4798      	blx	r3
    dd58:	0003      	movs	r3, r0
    dd5a:	001a      	movs	r2, r3
    dd5c:	4bb0      	ldr	r3, [pc, #704]	; (e020 <HandleUserInput+0x3a0>)
    dd5e:	701a      	strb	r2, [r3, #0]
			break;
    dd60:	e041      	b.n	dde6 <HandleUserInput+0x166>
		case BTN_LATCHED_PPM:{
			pulse_width = get_pulse_width();
    dd62:	4bb0      	ldr	r3, [pc, #704]	; (e024 <HandleUserInput+0x3a4>)
    dd64:	4798      	blx	r3
    dd66:	0002      	movs	r2, r0
    dd68:	4baf      	ldr	r3, [pc, #700]	; (e028 <HandleUserInput+0x3a8>)
    dd6a:	601a      	str	r2, [r3, #0]
			if(pulse_width > 9000)
    dd6c:	4bae      	ldr	r3, [pc, #696]	; (e028 <HandleUserInput+0x3a8>)
    dd6e:	681b      	ldr	r3, [r3, #0]
    dd70:	4aae      	ldr	r2, [pc, #696]	; (e02c <HandleUserInput+0x3ac>)
    dd72:	4293      	cmp	r3, r2
    dd74:	dd03      	ble.n	dd7e <HandleUserInput+0xfe>
				remote_btn_state = false;
    dd76:	4baa      	ldr	r3, [pc, #680]	; (e020 <HandleUserInput+0x3a0>)
    dd78:	2200      	movs	r2, #0
    dd7a:	701a      	strb	r2, [r3, #0]
    dd7c:	e002      	b.n	dd84 <HandleUserInput+0x104>
			else
				remote_btn_state = true;
    dd7e:	4ba8      	ldr	r3, [pc, #672]	; (e020 <HandleUserInput+0x3a0>)
    dd80:	2201      	movs	r2, #1
    dd82:	701a      	strb	r2, [r3, #0]
			pulse_width_last = pulse_width;
    dd84:	4ba8      	ldr	r3, [pc, #672]	; (e028 <HandleUserInput+0x3a8>)
    dd86:	681a      	ldr	r2, [r3, #0]
    dd88:	4ba9      	ldr	r3, [pc, #676]	; (e030 <HandleUserInput+0x3b0>)
    dd8a:	601a      	str	r2, [r3, #0]
			//light_sens = pulse_width; // for debugging pulse width reading
			}
			break;
    dd8c:	e02b      	b.n	dde6 <HandleUserInput+0x166>
		case BTN_UART_C:
			READ_VESC_CHUCK = true;
    dd8e:	4b9e      	ldr	r3, [pc, #632]	; (e008 <HandleUserInput+0x388>)
    dd90:	2201      	movs	r2, #1
    dd92:	701a      	strb	r2, [r3, #0]
			remote_btn_state = rec_chuck_struct.bt_c;
    dd94:	4b9d      	ldr	r3, [pc, #628]	; (e00c <HandleUserInput+0x38c>)
    dd96:	7a1b      	ldrb	r3, [r3, #8]
    dd98:	001a      	movs	r2, r3
    dd9a:	4ba1      	ldr	r3, [pc, #644]	; (e020 <HandleUserInput+0x3a0>)
    dd9c:	701a      	strb	r2, [r3, #0]
			break;	
    dd9e:	e022      	b.n	dde6 <HandleUserInput+0x166>
		case BTN_UART_Z:
			READ_VESC_CHUCK = true;
    dda0:	4b99      	ldr	r3, [pc, #612]	; (e008 <HandleUserInput+0x388>)
    dda2:	2201      	movs	r2, #1
    dda4:	701a      	strb	r2, [r3, #0]
			remote_btn_state = rec_chuck_struct.bt_z;
    dda6:	4b99      	ldr	r3, [pc, #612]	; (e00c <HandleUserInput+0x38c>)
    dda8:	7a5b      	ldrb	r3, [r3, #9]
    ddaa:	001a      	movs	r2, r3
    ddac:	4b9c      	ldr	r3, [pc, #624]	; (e020 <HandleUserInput+0x3a0>)
    ddae:	701a      	strb	r2, [r3, #0]
			break;
    ddb0:	e019      	b.n	dde6 <HandleUserInput+0x166>
		case BTN_THROTTLE_DWN:
			remote_btn_state = (remote_y < (127 - DWN_THRESH));
    ddb2:	4b94      	ldr	r3, [pc, #592]	; (e004 <HandleUserInput+0x384>)
    ddb4:	781a      	ldrb	r2, [r3, #0]
    ddb6:	2174      	movs	r1, #116	; 0x74
    ddb8:	2300      	movs	r3, #0
    ddba:	4291      	cmp	r1, r2
    ddbc:	415b      	adcs	r3, r3
    ddbe:	b2db      	uxtb	r3, r3
    ddc0:	001a      	movs	r2, r3
    ddc2:	4b97      	ldr	r3, [pc, #604]	; (e020 <HandleUserInput+0x3a0>)
    ddc4:	701a      	strb	r2, [r3, #0]
			break;
    ddc6:	e00e      	b.n	dde6 <HandleUserInput+0x166>
		case BTN_THROTTLE_UP:
			remote_btn_state = (remote_y > (127 + UP_THRESH));
    ddc8:	4b8e      	ldr	r3, [pc, #568]	; (e004 <HandleUserInput+0x384>)
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	2289      	movs	r2, #137	; 0x89
    ddce:	429a      	cmp	r2, r3
    ddd0:	419b      	sbcs	r3, r3
    ddd2:	425b      	negs	r3, r3
    ddd4:	b2db      	uxtb	r3, r3
    ddd6:	001a      	movs	r2, r3
    ddd8:	4b91      	ldr	r3, [pc, #580]	; (e020 <HandleUserInput+0x3a0>)
    ddda:	701a      	strb	r2, [r3, #0]
			break;
    dddc:	e003      	b.n	dde6 <HandleUserInput+0x166>
		default:
			remote_btn_state = 0;
    ddde:	4b90      	ldr	r3, [pc, #576]	; (e020 <HandleUserInput+0x3a0>)
    dde0:	2200      	movs	r2, #0
    dde2:	701a      	strb	r2, [r3, #0]
			break;
    dde4:	46c0      	nop			; (mov r8, r8)
	}

	////   Determine the time the button was held down and released   ////
	//////////////////////////////////////////////////////////////////////
	if(button_type != BTN_LATCHED && button_type != BTN_LATCHED_PPM){
    dde6:	4b8b      	ldr	r3, [pc, #556]	; (e014 <HandleUserInput+0x394>)
    dde8:	781b      	ldrb	r3, [r3, #0]
    ddea:	2b02      	cmp	r3, #2
    ddec:	d063      	beq.n	deb6 <HandleUserInput+0x236>
    ddee:	4b89      	ldr	r3, [pc, #548]	; (e014 <HandleUserInput+0x394>)
    ddf0:	781b      	ldrb	r3, [r3, #0]
    ddf2:	2b03      	cmp	r3, #3
    ddf4:	d05f      	beq.n	deb6 <HandleUserInput+0x236>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    ddf6:	4b8a      	ldr	r3, [pc, #552]	; (e020 <HandleUserInput+0x3a0>)
    ddf8:	781b      	ldrb	r3, [r3, #0]
    ddfa:	2b01      	cmp	r3, #1
    ddfc:	d10c      	bne.n	de18 <HandleUserInput+0x198>
    ddfe:	4b8d      	ldr	r3, [pc, #564]	; (e034 <HandleUserInput+0x3b4>)
    de00:	781b      	ldrb	r3, [r3, #0]
    de02:	2b00      	cmp	r3, #0
    de04:	d108      	bne.n	de18 <HandleUserInput+0x198>
			lButtonTime = millis(); // Mark the time of button state transition
    de06:	4b8c      	ldr	r3, [pc, #560]	; (e038 <HandleUserInput+0x3b8>)
    de08:	4798      	blx	r3
    de0a:	0002      	movs	r2, r0
    de0c:	4b8b      	ldr	r3, [pc, #556]	; (e03c <HandleUserInput+0x3bc>)
    de0e:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    de10:	4b8b      	ldr	r3, [pc, #556]	; (e040 <HandleUserInput+0x3c0>)
    de12:	2200      	movs	r2, #0
    de14:	601a      	str	r2, [r3, #0]
    de16:	e04d      	b.n	deb4 <HandleUserInput+0x234>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
    de18:	4b81      	ldr	r3, [pc, #516]	; (e020 <HandleUserInput+0x3a0>)
    de1a:	781b      	ldrb	r3, [r3, #0]
    de1c:	2b00      	cmp	r3, #0
    de1e:	d118      	bne.n	de52 <HandleUserInput+0x1d2>
    de20:	4b84      	ldr	r3, [pc, #528]	; (e034 <HandleUserInput+0x3b4>)
    de22:	781b      	ldrb	r3, [r3, #0]
    de24:	2b01      	cmp	r3, #1
    de26:	d114      	bne.n	de52 <HandleUserInput+0x1d2>
			check_time(&lButtonTime);
    de28:	4b84      	ldr	r3, [pc, #528]	; (e03c <HandleUserInput+0x3bc>)
    de2a:	0018      	movs	r0, r3
    de2c:	4b85      	ldr	r3, [pc, #532]	; (e044 <HandleUserInput+0x3c4>)
    de2e:	4798      	blx	r3
			ButtonDownTime = millis() - lButtonTime;  // Track time button was pressed
    de30:	4b81      	ldr	r3, [pc, #516]	; (e038 <HandleUserInput+0x3b8>)
    de32:	4798      	blx	r3
    de34:	0002      	movs	r2, r0
    de36:	4b81      	ldr	r3, [pc, #516]	; (e03c <HandleUserInput+0x3bc>)
    de38:	681b      	ldr	r3, [r3, #0]
    de3a:	1ad2      	subs	r2, r2, r3
    de3c:	4b82      	ldr	r3, [pc, #520]	; (e048 <HandleUserInput+0x3c8>)
    de3e:	601a      	str	r2, [r3, #0]

			lButtonTime = millis();  // Mark the time of button state transition
    de40:	4b7d      	ldr	r3, [pc, #500]	; (e038 <HandleUserInput+0x3b8>)
    de42:	4798      	blx	r3
    de44:	0002      	movs	r2, r0
    de46:	4b7d      	ldr	r3, [pc, #500]	; (e03c <HandleUserInput+0x3bc>)
    de48:	601a      	str	r2, [r3, #0]
			ButtonHeldTime = 0;
    de4a:	4b80      	ldr	r3, [pc, #512]	; (e04c <HandleUserInput+0x3cc>)
    de4c:	2200      	movs	r2, #0
    de4e:	601a      	str	r2, [r3, #0]
    de50:	e030      	b.n	deb4 <HandleUserInput+0x234>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
    de52:	4b73      	ldr	r3, [pc, #460]	; (e020 <HandleUserInput+0x3a0>)
    de54:	781b      	ldrb	r3, [r3, #0]
    de56:	2b00      	cmp	r3, #0
    de58:	d116      	bne.n	de88 <HandleUserInput+0x208>
    de5a:	4b76      	ldr	r3, [pc, #472]	; (e034 <HandleUserInput+0x3b4>)
    de5c:	781b      	ldrb	r3, [r3, #0]
    de5e:	2b00      	cmp	r3, #0
    de60:	d112      	bne.n	de88 <HandleUserInput+0x208>
			check_time(&lButtonTime);
    de62:	4b76      	ldr	r3, [pc, #472]	; (e03c <HandleUserInput+0x3bc>)
    de64:	0018      	movs	r0, r3
    de66:	4b77      	ldr	r3, [pc, #476]	; (e044 <HandleUserInput+0x3c4>)
    de68:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    de6a:	4b73      	ldr	r3, [pc, #460]	; (e038 <HandleUserInput+0x3b8>)
    de6c:	4798      	blx	r3
    de6e:	0002      	movs	r2, r0
    de70:	4b72      	ldr	r3, [pc, #456]	; (e03c <HandleUserInput+0x3bc>)
    de72:	681b      	ldr	r3, [r3, #0]
    de74:	1ad2      	subs	r2, r2, r3
    de76:	4b72      	ldr	r3, [pc, #456]	; (e040 <HandleUserInput+0x3c0>)
    de78:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
    de7a:	4b73      	ldr	r3, [pc, #460]	; (e048 <HandleUserInput+0x3c8>)
    de7c:	2200      	movs	r2, #0
    de7e:	601a      	str	r2, [r3, #0]
			TurnSignalOn = false;
    de80:	4b73      	ldr	r3, [pc, #460]	; (e050 <HandleUserInput+0x3d0>)
    de82:	2200      	movs	r2, #0
    de84:	701a      	strb	r2, [r3, #0]
    de86:	e015      	b.n	deb4 <HandleUserInput+0x234>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
    de88:	4b65      	ldr	r3, [pc, #404]	; (e020 <HandleUserInput+0x3a0>)
    de8a:	781b      	ldrb	r3, [r3, #0]
    de8c:	2b01      	cmp	r3, #1
    de8e:	d000      	beq.n	de92 <HandleUserInput+0x212>
    de90:	e06c      	b.n	df6c <HandleUserInput+0x2ec>
    de92:	4b68      	ldr	r3, [pc, #416]	; (e034 <HandleUserInput+0x3b4>)
    de94:	781b      	ldrb	r3, [r3, #0]
    de96:	2b01      	cmp	r3, #1
    de98:	d168      	bne.n	df6c <HandleUserInput+0x2ec>
			check_time(&lButtonTime);
    de9a:	4b68      	ldr	r3, [pc, #416]	; (e03c <HandleUserInput+0x3bc>)
    de9c:	0018      	movs	r0, r3
    de9e:	4b69      	ldr	r3, [pc, #420]	; (e044 <HandleUserInput+0x3c4>)
    dea0:	4798      	blx	r3
			ButtonHeldTime = millis() - lButtonTime; // Track time button is not pressed
    dea2:	4b65      	ldr	r3, [pc, #404]	; (e038 <HandleUserInput+0x3b8>)
    dea4:	4798      	blx	r3
    dea6:	0002      	movs	r2, r0
    dea8:	4b64      	ldr	r3, [pc, #400]	; (e03c <HandleUserInput+0x3bc>)
    deaa:	681b      	ldr	r3, [r3, #0]
    deac:	1ad2      	subs	r2, r2, r3
    deae:	4b67      	ldr	r3, [pc, #412]	; (e04c <HandleUserInput+0x3cc>)
    deb0:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    deb2:	e05b      	b.n	df6c <HandleUserInput+0x2ec>
    deb4:	e05a      	b.n	df6c <HandleUserInput+0x2ec>
		}
	} else {
		ButtonHeldTime = 0;
    deb6:	4b65      	ldr	r3, [pc, #404]	; (e04c <HandleUserInput+0x3cc>)
    deb8:	2200      	movs	r2, #0
    deba:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    debc:	4b58      	ldr	r3, [pc, #352]	; (e020 <HandleUserInput+0x3a0>)
    debe:	781b      	ldrb	r3, [r3, #0]
    dec0:	2b01      	cmp	r3, #1
    dec2:	d10f      	bne.n	dee4 <HandleUserInput+0x264>
    dec4:	4b5b      	ldr	r3, [pc, #364]	; (e034 <HandleUserInput+0x3b4>)
    dec6:	781b      	ldrb	r3, [r3, #0]
    dec8:	2b00      	cmp	r3, #0
    deca:	d10b      	bne.n	dee4 <HandleUserInput+0x264>
			ButtonDownTime = 250;  // Track time button was pressed
    decc:	4b5e      	ldr	r3, [pc, #376]	; (e048 <HandleUserInput+0x3c8>)
    dece:	22fa      	movs	r2, #250	; 0xfa
    ded0:	601a      	str	r2, [r3, #0]
			lButtonTime = millis(); // Mark the time of button state transition
    ded2:	4b59      	ldr	r3, [pc, #356]	; (e038 <HandleUserInput+0x3b8>)
    ded4:	4798      	blx	r3
    ded6:	0002      	movs	r2, r0
    ded8:	4b58      	ldr	r3, [pc, #352]	; (e03c <HandleUserInput+0x3bc>)
    deda:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    dedc:	4b58      	ldr	r3, [pc, #352]	; (e040 <HandleUserInput+0x3c0>)
    dede:	2200      	movs	r2, #0
    dee0:	601a      	str	r2, [r3, #0]
    dee2:	e044      	b.n	df6e <HandleUserInput+0x2ee>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
    dee4:	4b4e      	ldr	r3, [pc, #312]	; (e020 <HandleUserInput+0x3a0>)
    dee6:	781b      	ldrb	r3, [r3, #0]
    dee8:	2b00      	cmp	r3, #0
    deea:	d10f      	bne.n	df0c <HandleUserInput+0x28c>
    deec:	4b51      	ldr	r3, [pc, #324]	; (e034 <HandleUserInput+0x3b4>)
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	2b01      	cmp	r3, #1
    def2:	d10b      	bne.n	df0c <HandleUserInput+0x28c>
			ButtonDownTime = 250;  // Track time button was pressed
    def4:	4b54      	ldr	r3, [pc, #336]	; (e048 <HandleUserInput+0x3c8>)
    def6:	22fa      	movs	r2, #250	; 0xfa
    def8:	601a      	str	r2, [r3, #0]
			lButtonTime = millis();  // Mark the time of button state transition
    defa:	4b4f      	ldr	r3, [pc, #316]	; (e038 <HandleUserInput+0x3b8>)
    defc:	4798      	blx	r3
    defe:	0002      	movs	r2, r0
    df00:	4b4e      	ldr	r3, [pc, #312]	; (e03c <HandleUserInput+0x3bc>)
    df02:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    df04:	4b4e      	ldr	r3, [pc, #312]	; (e040 <HandleUserInput+0x3c0>)
    df06:	2200      	movs	r2, #0
    df08:	601a      	str	r2, [r3, #0]
    df0a:	e030      	b.n	df6e <HandleUserInput+0x2ee>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
    df0c:	4b44      	ldr	r3, [pc, #272]	; (e020 <HandleUserInput+0x3a0>)
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	2b00      	cmp	r3, #0
    df12:	d113      	bne.n	df3c <HandleUserInput+0x2bc>
    df14:	4b47      	ldr	r3, [pc, #284]	; (e034 <HandleUserInput+0x3b4>)
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	2b00      	cmp	r3, #0
    df1a:	d10f      	bne.n	df3c <HandleUserInput+0x2bc>
			check_time(&lButtonTime);
    df1c:	4b47      	ldr	r3, [pc, #284]	; (e03c <HandleUserInput+0x3bc>)
    df1e:	0018      	movs	r0, r3
    df20:	4b48      	ldr	r3, [pc, #288]	; (e044 <HandleUserInput+0x3c4>)
    df22:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    df24:	4b44      	ldr	r3, [pc, #272]	; (e038 <HandleUserInput+0x3b8>)
    df26:	4798      	blx	r3
    df28:	0002      	movs	r2, r0
    df2a:	4b44      	ldr	r3, [pc, #272]	; (e03c <HandleUserInput+0x3bc>)
    df2c:	681b      	ldr	r3, [r3, #0]
    df2e:	1ad2      	subs	r2, r2, r3
    df30:	4b43      	ldr	r3, [pc, #268]	; (e040 <HandleUserInput+0x3c0>)
    df32:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
    df34:	4b44      	ldr	r3, [pc, #272]	; (e048 <HandleUserInput+0x3c8>)
    df36:	2200      	movs	r2, #0
    df38:	601a      	str	r2, [r3, #0]
    df3a:	e018      	b.n	df6e <HandleUserInput+0x2ee>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
    df3c:	4b38      	ldr	r3, [pc, #224]	; (e020 <HandleUserInput+0x3a0>)
    df3e:	781b      	ldrb	r3, [r3, #0]
    df40:	2b01      	cmp	r3, #1
    df42:	d114      	bne.n	df6e <HandleUserInput+0x2ee>
    df44:	4b3b      	ldr	r3, [pc, #236]	; (e034 <HandleUserInput+0x3b4>)
    df46:	781b      	ldrb	r3, [r3, #0]
    df48:	2b01      	cmp	r3, #1
    df4a:	d110      	bne.n	df6e <HandleUserInput+0x2ee>
			check_time(&lButtonTime);
    df4c:	4b3b      	ldr	r3, [pc, #236]	; (e03c <HandleUserInput+0x3bc>)
    df4e:	0018      	movs	r0, r3
    df50:	4b3c      	ldr	r3, [pc, #240]	; (e044 <HandleUserInput+0x3c4>)
    df52:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    df54:	4b38      	ldr	r3, [pc, #224]	; (e038 <HandleUserInput+0x3b8>)
    df56:	4798      	blx	r3
    df58:	0002      	movs	r2, r0
    df5a:	4b38      	ldr	r3, [pc, #224]	; (e03c <HandleUserInput+0x3bc>)
    df5c:	681b      	ldr	r3, [r3, #0]
    df5e:	1ad2      	subs	r2, r2, r3
    df60:	4b37      	ldr	r3, [pc, #220]	; (e040 <HandleUserInput+0x3c0>)
    df62:	601a      	str	r2, [r3, #0]
			
			ButtonDownTime = 0;
    df64:	4b38      	ldr	r3, [pc, #224]	; (e048 <HandleUserInput+0x3c8>)
    df66:	2200      	movs	r2, #0
    df68:	601a      	str	r2, [r3, #0]
    df6a:	e000      	b.n	df6e <HandleUserInput+0x2ee>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    df6c:	46c0      	nop			; (mov r8, r8)
		}
	}

	////////   Determine the type of button press that occurred   ////////
	//////////////////////////////////////////////////////////////////////
	ButtonPressType = PRESS_NONE;
    df6e:	4b39      	ldr	r3, [pc, #228]	; (e054 <HandleUserInput+0x3d4>)
    df70:	2200      	movs	r2, #0
    df72:	701a      	strb	r2, [r3, #0]
	if(ButtonDownTime > 0 && ButtonDownTime < 500){ // Button Tap
    df74:	4b34      	ldr	r3, [pc, #208]	; (e048 <HandleUserInput+0x3c8>)
    df76:	681b      	ldr	r3, [r3, #0]
    df78:	2b00      	cmp	r3, #0
    df7a:	d00c      	beq.n	df96 <HandleUserInput+0x316>
    df7c:	4b32      	ldr	r3, [pc, #200]	; (e048 <HandleUserInput+0x3c8>)
    df7e:	681a      	ldr	r2, [r3, #0]
    df80:	23f4      	movs	r3, #244	; 0xf4
    df82:	33ff      	adds	r3, #255	; 0xff
    df84:	429a      	cmp	r2, r3
    df86:	d806      	bhi.n	df96 <HandleUserInput+0x316>
		tapIndex++;
    df88:	4b33      	ldr	r3, [pc, #204]	; (e058 <HandleUserInput+0x3d8>)
    df8a:	781b      	ldrb	r3, [r3, #0]
    df8c:	3301      	adds	r3, #1
    df8e:	b2da      	uxtb	r2, r3
    df90:	4b31      	ldr	r3, [pc, #196]	; (e058 <HandleUserInput+0x3d8>)
    df92:	701a      	strb	r2, [r3, #0]
    df94:	e073      	b.n	e07e <HandleUserInput+0x3fe>
	} else if(ButtonDownTime > 500 && ButtonDownTime < 1000 && !TurnSignalOn){ // Medium Press
    df96:	4b2c      	ldr	r3, [pc, #176]	; (e048 <HandleUserInput+0x3c8>)
    df98:	681a      	ldr	r2, [r3, #0]
    df9a:	23fa      	movs	r3, #250	; 0xfa
    df9c:	005b      	lsls	r3, r3, #1
    df9e:	429a      	cmp	r2, r3
    dfa0:	d95e      	bls.n	e060 <HandleUserInput+0x3e0>
    dfa2:	4b29      	ldr	r3, [pc, #164]	; (e048 <HandleUserInput+0x3c8>)
    dfa4:	681b      	ldr	r3, [r3, #0]
    dfa6:	4a2d      	ldr	r2, [pc, #180]	; (e05c <HandleUserInput+0x3dc>)
    dfa8:	4293      	cmp	r3, r2
    dfaa:	d859      	bhi.n	e060 <HandleUserInput+0x3e0>
    dfac:	4b28      	ldr	r3, [pc, #160]	; (e050 <HandleUserInput+0x3d0>)
    dfae:	781b      	ldrb	r3, [r3, #0]
    dfb0:	2201      	movs	r2, #1
    dfb2:	4053      	eors	r3, r2
    dfb4:	b2db      	uxtb	r3, r3
    dfb6:	2b00      	cmp	r3, #0
    dfb8:	d052      	beq.n	e060 <HandleUserInput+0x3e0>
		ButtonPressType = MEDIUM_PRESS;
    dfba:	4b26      	ldr	r3, [pc, #152]	; (e054 <HandleUserInput+0x3d4>)
    dfbc:	2206      	movs	r2, #6
    dfbe:	701a      	strb	r2, [r3, #0]
    dfc0:	e05d      	b.n	e07e <HandleUserInput+0x3fe>
    dfc2:	46c0      	nop			; (mov r8, r8)
    dfc4:	20000308 	.word	0x20000308
    dfc8:	00017628 	.word	0x00017628
    dfcc:	20000369 	.word	0x20000369
    dfd0:	20000958 	.word	0x20000958
    dfd4:	00015259 	.word	0x00015259
    dfd8:	00016e95 	.word	0x00016e95
    dfdc:	00015385 	.word	0x00015385
    dfe0:	41222870 	.word	0x41222870
    dfe4:	0001620d 	.word	0x0001620d
    dfe8:	ca397ea4 	.word	0xca397ea4
    dfec:	3f265b54 	.word	0x3f265b54
    dff0:	00016f39 	.word	0x00016f39
    dff4:	0001448d 	.word	0x0001448d
    dff8:	000144b5 	.word	0x000144b5
    dffc:	437f0000 	.word	0x437f0000
    e000:	00014531 	.word	0x00014531
    e004:	2000030a 	.word	0x2000030a
    e008:	2000036a 	.word	0x2000036a
    e00c:	20001054 	.word	0x20001054
    e010:	2000030b 	.word	0x2000030b
    e014:	20000309 	.word	0x20000309
    e018:	0001763c 	.word	0x0001763c
    e01c:	00008db1 	.word	0x00008db1
    e020:	2000030c 	.word	0x2000030c
    e024:	0000dc69 	.word	0x0000dc69
    e028:	200003a8 	.word	0x200003a8
    e02c:	00002328 	.word	0x00002328
    e030:	200003a4 	.word	0x200003a4
    e034:	2000030d 	.word	0x2000030d
    e038:	0000b109 	.word	0x0000b109
    e03c:	20000398 	.word	0x20000398
    e040:	20000394 	.word	0x20000394
    e044:	0000b139 	.word	0x0000b139
    e048:	20000390 	.word	0x20000390
    e04c:	2000038c 	.word	0x2000038c
    e050:	2000039c 	.word	0x2000039c
    e054:	20000388 	.word	0x20000388
    e058:	2000038a 	.word	0x2000038a
    e05c:	000003e7 	.word	0x000003e7
	} else if(ButtonDownTime >= 1000 && !TurnSignalOn){ // Long Press
    e060:	4bc5      	ldr	r3, [pc, #788]	; (e378 <HandleUserInput+0x6f8>)
    e062:	681b      	ldr	r3, [r3, #0]
    e064:	4ac5      	ldr	r2, [pc, #788]	; (e37c <HandleUserInput+0x6fc>)
    e066:	4293      	cmp	r3, r2
    e068:	d909      	bls.n	e07e <HandleUserInput+0x3fe>
    e06a:	4bc5      	ldr	r3, [pc, #788]	; (e380 <HandleUserInput+0x700>)
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	2201      	movs	r2, #1
    e070:	4053      	eors	r3, r2
    e072:	b2db      	uxtb	r3, r3
    e074:	2b00      	cmp	r3, #0
    e076:	d002      	beq.n	e07e <HandleUserInput+0x3fe>
		ButtonPressType = LONG_PRESS;
    e078:	4bc2      	ldr	r3, [pc, #776]	; (e384 <HandleUserInput+0x704>)
    e07a:	2207      	movs	r2, #7
    e07c:	701a      	strb	r2, [r3, #0]
	}
	if(tapIndex > 0 && ButtonUpTime > 200){
    e07e:	4bc2      	ldr	r3, [pc, #776]	; (e388 <HandleUserInput+0x708>)
    e080:	781b      	ldrb	r3, [r3, #0]
    e082:	2b00      	cmp	r3, #0
    e084:	d006      	beq.n	e094 <HandleUserInput+0x414>
    e086:	4bc1      	ldr	r3, [pc, #772]	; (e38c <HandleUserInput+0x70c>)
    e088:	681b      	ldr	r3, [r3, #0]
    e08a:	2bc8      	cmp	r3, #200	; 0xc8
    e08c:	d902      	bls.n	e094 <HandleUserInput+0x414>
		tapSequence = 1;
    e08e:	4bc0      	ldr	r3, [pc, #768]	; (e390 <HandleUserInput+0x710>)
    e090:	2201      	movs	r2, #1
    e092:	701a      	strb	r2, [r3, #0]
	}
	if(tapSequence){
    e094:	4bbe      	ldr	r3, [pc, #760]	; (e390 <HandleUserInput+0x710>)
    e096:	781b      	ldrb	r3, [r3, #0]
    e098:	2b00      	cmp	r3, #0
    e09a:	d03c      	beq.n	e116 <HandleUserInput+0x496>
		if(remote_type == REMOTE_UART_DUAL && VescRemoteX <= 110 && tapIndex == 1)
    e09c:	4bbd      	ldr	r3, [pc, #756]	; (e394 <HandleUserInput+0x714>)
    e09e:	781b      	ldrb	r3, [r3, #0]
    e0a0:	2b03      	cmp	r3, #3
    e0a2:	d10b      	bne.n	e0bc <HandleUserInput+0x43c>
    e0a4:	4bbc      	ldr	r3, [pc, #752]	; (e398 <HandleUserInput+0x718>)
    e0a6:	781b      	ldrb	r3, [r3, #0]
    e0a8:	2b6e      	cmp	r3, #110	; 0x6e
    e0aa:	d807      	bhi.n	e0bc <HandleUserInput+0x43c>
    e0ac:	4bb6      	ldr	r3, [pc, #728]	; (e388 <HandleUserInput+0x708>)
    e0ae:	781b      	ldrb	r3, [r3, #0]
    e0b0:	2b01      	cmp	r3, #1
    e0b2:	d103      	bne.n	e0bc <HandleUserInput+0x43c>
			ButtonPressType = LEFT_TAP;
    e0b4:	4bb3      	ldr	r3, [pc, #716]	; (e384 <HandleUserInput+0x704>)
    e0b6:	2204      	movs	r2, #4
    e0b8:	701a      	strb	r2, [r3, #0]
    e0ba:	e026      	b.n	e10a <HandleUserInput+0x48a>
		else if(remote_type == REMOTE_UART_DUAL && VescRemoteX >= 150 && tapIndex == 1)
    e0bc:	4bb5      	ldr	r3, [pc, #724]	; (e394 <HandleUserInput+0x714>)
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	2b03      	cmp	r3, #3
    e0c2:	d10b      	bne.n	e0dc <HandleUserInput+0x45c>
    e0c4:	4bb4      	ldr	r3, [pc, #720]	; (e398 <HandleUserInput+0x718>)
    e0c6:	781b      	ldrb	r3, [r3, #0]
    e0c8:	2b95      	cmp	r3, #149	; 0x95
    e0ca:	d907      	bls.n	e0dc <HandleUserInput+0x45c>
    e0cc:	4bae      	ldr	r3, [pc, #696]	; (e388 <HandleUserInput+0x708>)
    e0ce:	781b      	ldrb	r3, [r3, #0]
    e0d0:	2b01      	cmp	r3, #1
    e0d2:	d103      	bne.n	e0dc <HandleUserInput+0x45c>
		ButtonPressType = RIGHT_TAP;
    e0d4:	4bab      	ldr	r3, [pc, #684]	; (e384 <HandleUserInput+0x704>)
    e0d6:	2205      	movs	r2, #5
    e0d8:	701a      	strb	r2, [r3, #0]
    e0da:	e016      	b.n	e10a <HandleUserInput+0x48a>
		else if(tapIndex == 1)
    e0dc:	4baa      	ldr	r3, [pc, #680]	; (e388 <HandleUserInput+0x708>)
    e0de:	781b      	ldrb	r3, [r3, #0]
    e0e0:	2b01      	cmp	r3, #1
    e0e2:	d103      	bne.n	e0ec <HandleUserInput+0x46c>
			ButtonPressType = SINGLE_TAP;
    e0e4:	4ba7      	ldr	r3, [pc, #668]	; (e384 <HandleUserInput+0x704>)
    e0e6:	2201      	movs	r2, #1
    e0e8:	701a      	strb	r2, [r3, #0]
    e0ea:	e00e      	b.n	e10a <HandleUserInput+0x48a>
		else if(tapIndex == 2)
    e0ec:	4ba6      	ldr	r3, [pc, #664]	; (e388 <HandleUserInput+0x708>)
    e0ee:	781b      	ldrb	r3, [r3, #0]
    e0f0:	2b02      	cmp	r3, #2
    e0f2:	d103      	bne.n	e0fc <HandleUserInput+0x47c>
			ButtonPressType = DOUBLE_TAP;
    e0f4:	4ba3      	ldr	r3, [pc, #652]	; (e384 <HandleUserInput+0x704>)
    e0f6:	2202      	movs	r2, #2
    e0f8:	701a      	strb	r2, [r3, #0]
    e0fa:	e006      	b.n	e10a <HandleUserInput+0x48a>
		else if(tapIndex == 3)
    e0fc:	4ba2      	ldr	r3, [pc, #648]	; (e388 <HandleUserInput+0x708>)
    e0fe:	781b      	ldrb	r3, [r3, #0]
    e100:	2b03      	cmp	r3, #3
    e102:	d102      	bne.n	e10a <HandleUserInput+0x48a>
			ButtonPressType = TRIPLE_TAP;
    e104:	4b9f      	ldr	r3, [pc, #636]	; (e384 <HandleUserInput+0x704>)
    e106:	2203      	movs	r2, #3
    e108:	701a      	strb	r2, [r3, #0]
		
		tapSequence = 0;
    e10a:	4ba1      	ldr	r3, [pc, #644]	; (e390 <HandleUserInput+0x710>)
    e10c:	2200      	movs	r2, #0
    e10e:	701a      	strb	r2, [r3, #0]
		tapIndex = 0;
    e110:	4b9d      	ldr	r3, [pc, #628]	; (e388 <HandleUserInput+0x708>)
    e112:	2200      	movs	r2, #0
    e114:	701a      	strb	r2, [r3, #0]
	}
	
	//////////////////////   Handle the aux output   /////////////////////
	//////////////////////////////////////////////////////////////////////
	if(AUX_ENABLED){
    e116:	4ba1      	ldr	r3, [pc, #644]	; (e39c <HandleUserInput+0x71c>)
    e118:	781b      	ldrb	r3, [r3, #0]
    e11a:	2b00      	cmp	r3, #0
    e11c:	d100      	bne.n	e120 <HandleUserInput+0x4a0>
    e11e:	e0a4      	b.n	e26a <HandleUserInput+0x5ea>
		if(!AppAuxButton){
    e120:	4b9f      	ldr	r3, [pc, #636]	; (e3a0 <HandleUserInput+0x720>)
    e122:	781b      	ldrb	r3, [r3, #0]
    e124:	2b00      	cmp	r3, #0
    e126:	d000      	beq.n	e12a <HandleUserInput+0x4aa>
    e128:	e070      	b.n	e20c <HandleUserInput+0x58c>
			switch(auxControlType){
    e12a:	4b9e      	ldr	r3, [pc, #632]	; (e3a4 <HandleUserInput+0x724>)
    e12c:	781b      	ldrb	r3, [r3, #0]
    e12e:	2b01      	cmp	r3, #1
    e130:	d014      	beq.n	e15c <HandleUserInput+0x4dc>
    e132:	dc02      	bgt.n	e13a <HandleUserInput+0x4ba>
    e134:	2b00      	cmp	r3, #0
    e136:	d003      	beq.n	e140 <HandleUserInput+0x4c0>
    e138:	e083      	b.n	e242 <HandleUserInput+0x5c2>
    e13a:	2b02      	cmp	r3, #2
    e13c:	d031      	beq.n	e1a2 <HandleUserInput+0x522>
				check_time(&AuxOnTime);
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
				AUX_OUTPUT = false;
				break;
				case AUX_PATTERN:
				break;
    e13e:	e080      	b.n	e242 <HandleUserInput+0x5c2>
				if(ButtonHeldTime > 500){
    e140:	4b99      	ldr	r3, [pc, #612]	; (e3a8 <HandleUserInput+0x728>)
    e142:	681a      	ldr	r2, [r3, #0]
    e144:	23fa      	movs	r3, #250	; 0xfa
    e146:	005b      	lsls	r3, r3, #1
    e148:	429a      	cmp	r2, r3
    e14a:	d903      	bls.n	e154 <HandleUserInput+0x4d4>
					AUX_OUTPUT = true;
    e14c:	4b97      	ldr	r3, [pc, #604]	; (e3ac <HandleUserInput+0x72c>)
    e14e:	2201      	movs	r2, #1
    e150:	701a      	strb	r2, [r3, #0]
				break;
    e152:	e076      	b.n	e242 <HandleUserInput+0x5c2>
					AUX_OUTPUT = false;
    e154:	4b95      	ldr	r3, [pc, #596]	; (e3ac <HandleUserInput+0x72c>)
    e156:	2200      	movs	r2, #0
    e158:	701a      	strb	r2, [r3, #0]
				break;
    e15a:	e072      	b.n	e242 <HandleUserInput+0x5c2>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
    e15c:	4b8d      	ldr	r3, [pc, #564]	; (e394 <HandleUserInput+0x714>)
    e15e:	781b      	ldrb	r3, [r3, #0]
    e160:	2b03      	cmp	r3, #3
    e162:	d005      	beq.n	e170 <HandleUserInput+0x4f0>
    e164:	4b92      	ldr	r3, [pc, #584]	; (e3b0 <HandleUserInput+0x730>)
    e166:	781a      	ldrb	r2, [r3, #0]
    e168:	4b86      	ldr	r3, [pc, #536]	; (e384 <HandleUserInput+0x704>)
    e16a:	781b      	ldrb	r3, [r3, #0]
    e16c:	429a      	cmp	r2, r3
    e16e:	d009      	beq.n	e184 <HandleUserInput+0x504>
				|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
    e170:	4b88      	ldr	r3, [pc, #544]	; (e394 <HandleUserInput+0x714>)
    e172:	781b      	ldrb	r3, [r3, #0]
    e174:	2b03      	cmp	r3, #3
    e176:	d161      	bne.n	e23c <HandleUserInput+0x5bc>
    e178:	4b8e      	ldr	r3, [pc, #568]	; (e3b4 <HandleUserInput+0x734>)
    e17a:	781a      	ldrb	r2, [r3, #0]
    e17c:	4b81      	ldr	r3, [pc, #516]	; (e384 <HandleUserInput+0x704>)
    e17e:	781b      	ldrb	r3, [r3, #0]
    e180:	429a      	cmp	r2, r3
    e182:	d15b      	bne.n	e23c <HandleUserInput+0x5bc>
					AUX_OUTPUT = !AUX_OUTPUT;
    e184:	4b89      	ldr	r3, [pc, #548]	; (e3ac <HandleUserInput+0x72c>)
    e186:	781b      	ldrb	r3, [r3, #0]
    e188:	1e5a      	subs	r2, r3, #1
    e18a:	4193      	sbcs	r3, r2
    e18c:	b2db      	uxtb	r3, r3
    e18e:	2201      	movs	r2, #1
    e190:	4053      	eors	r3, r2
    e192:	b2db      	uxtb	r3, r3
    e194:	1c1a      	adds	r2, r3, #0
    e196:	2301      	movs	r3, #1
    e198:	4013      	ands	r3, r2
    e19a:	b2da      	uxtb	r2, r3
    e19c:	4b83      	ldr	r3, [pc, #524]	; (e3ac <HandleUserInput+0x72c>)
    e19e:	701a      	strb	r2, [r3, #0]
				break;
    e1a0:	e04c      	b.n	e23c <HandleUserInput+0x5bc>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
    e1a2:	4b7c      	ldr	r3, [pc, #496]	; (e394 <HandleUserInput+0x714>)
    e1a4:	781b      	ldrb	r3, [r3, #0]
    e1a6:	2b03      	cmp	r3, #3
    e1a8:	d005      	beq.n	e1b6 <HandleUserInput+0x536>
    e1aa:	4b81      	ldr	r3, [pc, #516]	; (e3b0 <HandleUserInput+0x730>)
    e1ac:	781a      	ldrb	r2, [r3, #0]
    e1ae:	4b75      	ldr	r3, [pc, #468]	; (e384 <HandleUserInput+0x704>)
    e1b0:	781b      	ldrb	r3, [r3, #0]
    e1b2:	429a      	cmp	r2, r3
    e1b4:	d009      	beq.n	e1ca <HandleUserInput+0x54a>
				|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
    e1b6:	4b77      	ldr	r3, [pc, #476]	; (e394 <HandleUserInput+0x714>)
    e1b8:	781b      	ldrb	r3, [r3, #0]
    e1ba:	2b03      	cmp	r3, #3
    e1bc:	d10d      	bne.n	e1da <HandleUserInput+0x55a>
    e1be:	4b7d      	ldr	r3, [pc, #500]	; (e3b4 <HandleUserInput+0x734>)
    e1c0:	781a      	ldrb	r2, [r3, #0]
    e1c2:	4b70      	ldr	r3, [pc, #448]	; (e384 <HandleUserInput+0x704>)
    e1c4:	781b      	ldrb	r3, [r3, #0]
    e1c6:	429a      	cmp	r2, r3
    e1c8:	d107      	bne.n	e1da <HandleUserInput+0x55a>
					AUX_OUTPUT = true;
    e1ca:	4b78      	ldr	r3, [pc, #480]	; (e3ac <HandleUserInput+0x72c>)
    e1cc:	2201      	movs	r2, #1
    e1ce:	701a      	strb	r2, [r3, #0]
					AuxOnTime = millis();
    e1d0:	4b79      	ldr	r3, [pc, #484]	; (e3b8 <HandleUserInput+0x738>)
    e1d2:	4798      	blx	r3
    e1d4:	0002      	movs	r2, r0
    e1d6:	4b79      	ldr	r3, [pc, #484]	; (e3bc <HandleUserInput+0x73c>)
    e1d8:	601a      	str	r2, [r3, #0]
				check_time(&AuxOnTime);
    e1da:	4b78      	ldr	r3, [pc, #480]	; (e3bc <HandleUserInput+0x73c>)
    e1dc:	0018      	movs	r0, r3
    e1de:	4b78      	ldr	r3, [pc, #480]	; (e3c0 <HandleUserInput+0x740>)
    e1e0:	4798      	blx	r3
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
    e1e2:	4b72      	ldr	r3, [pc, #456]	; (e3ac <HandleUserInput+0x72c>)
    e1e4:	781b      	ldrb	r3, [r3, #0]
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	d02a      	beq.n	e240 <HandleUserInput+0x5c0>
    e1ea:	4b73      	ldr	r3, [pc, #460]	; (e3b8 <HandleUserInput+0x738>)
    e1ec:	4798      	blx	r3
    e1ee:	0002      	movs	r2, r0
    e1f0:	4b72      	ldr	r3, [pc, #456]	; (e3bc <HandleUserInput+0x73c>)
    e1f2:	681b      	ldr	r3, [r3, #0]
    e1f4:	1ad3      	subs	r3, r2, r3
    e1f6:	4a73      	ldr	r2, [pc, #460]	; (e3c4 <HandleUserInput+0x744>)
    e1f8:	7812      	ldrb	r2, [r2, #0]
    e1fa:	0011      	movs	r1, r2
    e1fc:	2264      	movs	r2, #100	; 0x64
    e1fe:	434a      	muls	r2, r1
    e200:	4293      	cmp	r3, r2
    e202:	d31d      	bcc.n	e240 <HandleUserInput+0x5c0>
				AUX_OUTPUT = false;
    e204:	4b69      	ldr	r3, [pc, #420]	; (e3ac <HandleUserInput+0x72c>)
    e206:	2200      	movs	r2, #0
    e208:	701a      	strb	r2, [r3, #0]
				break;
    e20a:	e019      	b.n	e240 <HandleUserInput+0x5c0>
			}
		} else if(AppAuxButton == 1 && lAppAuxButton == 0) {
    e20c:	4b64      	ldr	r3, [pc, #400]	; (e3a0 <HandleUserInput+0x720>)
    e20e:	781b      	ldrb	r3, [r3, #0]
    e210:	2b01      	cmp	r3, #1
    e212:	d107      	bne.n	e224 <HandleUserInput+0x5a4>
    e214:	4b6c      	ldr	r3, [pc, #432]	; (e3c8 <HandleUserInput+0x748>)
    e216:	781b      	ldrb	r3, [r3, #0]
    e218:	2b00      	cmp	r3, #0
    e21a:	d103      	bne.n	e224 <HandleUserInput+0x5a4>
			AUX_OUTPUT = true;
    e21c:	4b63      	ldr	r3, [pc, #396]	; (e3ac <HandleUserInput+0x72c>)
    e21e:	2201      	movs	r2, #1
    e220:	701a      	strb	r2, [r3, #0]
    e222:	e00e      	b.n	e242 <HandleUserInput+0x5c2>
		} else if(AppAuxButton == 0 && lAppAuxButton == 1){
    e224:	4b5e      	ldr	r3, [pc, #376]	; (e3a0 <HandleUserInput+0x720>)
    e226:	781b      	ldrb	r3, [r3, #0]
    e228:	2b00      	cmp	r3, #0
    e22a:	d10a      	bne.n	e242 <HandleUserInput+0x5c2>
    e22c:	4b66      	ldr	r3, [pc, #408]	; (e3c8 <HandleUserInput+0x748>)
    e22e:	781b      	ldrb	r3, [r3, #0]
    e230:	2b01      	cmp	r3, #1
    e232:	d106      	bne.n	e242 <HandleUserInput+0x5c2>
			AUX_OUTPUT = false;
    e234:	4b5d      	ldr	r3, [pc, #372]	; (e3ac <HandleUserInput+0x72c>)
    e236:	2200      	movs	r2, #0
    e238:	701a      	strb	r2, [r3, #0]
    e23a:	e002      	b.n	e242 <HandleUserInput+0x5c2>
				break;
    e23c:	46c0      	nop			; (mov r8, r8)
    e23e:	e000      	b.n	e242 <HandleUserInput+0x5c2>
				break;
    e240:	46c0      	nop			; (mov r8, r8)
		}
		lAppAuxButton = AppAuxButton;
    e242:	4b57      	ldr	r3, [pc, #348]	; (e3a0 <HandleUserInput+0x720>)
    e244:	781a      	ldrb	r2, [r3, #0]
    e246:	4b60      	ldr	r3, [pc, #384]	; (e3c8 <HandleUserInput+0x748>)
    e248:	701a      	strb	r2, [r3, #0]

		setAux(!AUX_OUTPUT);
    e24a:	4b58      	ldr	r3, [pc, #352]	; (e3ac <HandleUserInput+0x72c>)
    e24c:	781b      	ldrb	r3, [r3, #0]
    e24e:	1e5a      	subs	r2, r3, #1
    e250:	4193      	sbcs	r3, r2
    e252:	b2db      	uxtb	r3, r3
    e254:	2201      	movs	r2, #1
    e256:	4053      	eors	r3, r2
    e258:	b2db      	uxtb	r3, r3
    e25a:	1c1a      	adds	r2, r3, #0
    e25c:	2301      	movs	r3, #1
    e25e:	4013      	ands	r3, r2
    e260:	b2db      	uxtb	r3, r3
    e262:	0018      	movs	r0, r3
    e264:	4b59      	ldr	r3, [pc, #356]	; (e3cc <HandleUserInput+0x74c>)
    e266:	4798      	blx	r3
    e268:	e002      	b.n	e270 <HandleUserInput+0x5f0>
	}
	else{
		setAux(true);
    e26a:	2001      	movs	r0, #1
    e26c:	4b57      	ldr	r3, [pc, #348]	; (e3cc <HandleUserInput+0x74c>)
    e26e:	4798      	blx	r3
	}

	/////////////   Handle the side, head, and tail lights   /////////////
	//////////////////////////////////////////////////////////////////////
	if(ButtonPressType != PRESS_NONE){
    e270:	4b44      	ldr	r3, [pc, #272]	; (e384 <HandleUserInput+0x704>)
    e272:	781b      	ldrb	r3, [r3, #0]
    e274:	2b00      	cmp	r3, #0
    e276:	d100      	bne.n	e27a <HandleUserInput+0x5fa>
    e278:	e1a5      	b.n	e5c6 <HandleUserInput+0x946>
		if(remote_type != REMOTE_UART_DUAL){ // If single axis remote is connected
    e27a:	4b46      	ldr	r3, [pc, #280]	; (e394 <HandleUserInput+0x714>)
    e27c:	781b      	ldrb	r3, [r3, #0]
    e27e:	2b03      	cmp	r3, #3
    e280:	d100      	bne.n	e284 <HandleUserInput+0x604>
    e282:	e0cc      	b.n	e41e <HandleUserInput+0x79e>
			if(single_all_control == ButtonPressType){
    e284:	4b52      	ldr	r3, [pc, #328]	; (e3d0 <HandleUserInput+0x750>)
    e286:	781a      	ldrb	r2, [r3, #0]
    e288:	4b3e      	ldr	r3, [pc, #248]	; (e384 <HandleUserInput+0x704>)
    e28a:	781b      	ldrb	r3, [r3, #0]
    e28c:	429a      	cmp	r2, r3
    e28e:	d108      	bne.n	e2a2 <HandleUserInput+0x622>
				LIGHTS_ON = !LIGHTS_ON;
    e290:	4b50      	ldr	r3, [pc, #320]	; (e3d4 <HandleUserInput+0x754>)
    e292:	781b      	ldrb	r3, [r3, #0]
    e294:	425a      	negs	r2, r3
    e296:	4153      	adcs	r3, r2
    e298:	b2db      	uxtb	r3, r3
    e29a:	001a      	movs	r2, r3
    e29c:	4b4d      	ldr	r3, [pc, #308]	; (e3d4 <HandleUserInput+0x754>)
    e29e:	701a      	strb	r2, [r3, #0]
    e2a0:	e191      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(single_head_control == ButtonPressType){
    e2a2:	4b4d      	ldr	r3, [pc, #308]	; (e3d8 <HandleUserInput+0x758>)
    e2a4:	781a      	ldrb	r2, [r3, #0]
    e2a6:	4b37      	ldr	r3, [pc, #220]	; (e384 <HandleUserInput+0x704>)
    e2a8:	781b      	ldrb	r3, [r3, #0]
    e2aa:	429a      	cmp	r2, r3
    e2ac:	d123      	bne.n	e2f6 <HandleUserInput+0x676>
				if(!LIGHTS_ON){
    e2ae:	4b49      	ldr	r3, [pc, #292]	; (e3d4 <HandleUserInput+0x754>)
    e2b0:	781b      	ldrb	r3, [r3, #0]
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	d109      	bne.n	e2ca <HandleUserInput+0x64a>
					HEADLIGHTS = true;
    e2b6:	4b49      	ldr	r3, [pc, #292]	; (e3dc <HandleUserInput+0x75c>)
    e2b8:	2201      	movs	r2, #1
    e2ba:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e2bc:	4b48      	ldr	r3, [pc, #288]	; (e3e0 <HandleUserInput+0x760>)
    e2be:	2200      	movs	r2, #0
    e2c0:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    e2c2:	4b44      	ldr	r3, [pc, #272]	; (e3d4 <HandleUserInput+0x754>)
    e2c4:	2201      	movs	r2, #1
    e2c6:	701a      	strb	r2, [r3, #0]
    e2c8:	e17d      	b.n	e5c6 <HandleUserInput+0x946>
				}

				else if(SIDELIGHTS)
    e2ca:	4b45      	ldr	r3, [pc, #276]	; (e3e0 <HandleUserInput+0x760>)
    e2cc:	781b      	ldrb	r3, [r3, #0]
    e2ce:	2b00      	cmp	r3, #0
    e2d0:	d008      	beq.n	e2e4 <HandleUserInput+0x664>
				HEADLIGHTS = !HEADLIGHTS;
    e2d2:	4b42      	ldr	r3, [pc, #264]	; (e3dc <HandleUserInput+0x75c>)
    e2d4:	781b      	ldrb	r3, [r3, #0]
    e2d6:	425a      	negs	r2, r3
    e2d8:	4153      	adcs	r3, r2
    e2da:	b2db      	uxtb	r3, r3
    e2dc:	001a      	movs	r2, r3
    e2de:	4b3f      	ldr	r3, [pc, #252]	; (e3dc <HandleUserInput+0x75c>)
    e2e0:	701a      	strb	r2, [r3, #0]
    e2e2:	e170      	b.n	e5c6 <HandleUserInput+0x946>
				else
				LIGHTS_ON = !LIGHTS_ON;
    e2e4:	4b3b      	ldr	r3, [pc, #236]	; (e3d4 <HandleUserInput+0x754>)
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	425a      	negs	r2, r3
    e2ea:	4153      	adcs	r3, r2
    e2ec:	b2db      	uxtb	r3, r3
    e2ee:	001a      	movs	r2, r3
    e2f0:	4b38      	ldr	r3, [pc, #224]	; (e3d4 <HandleUserInput+0x754>)
    e2f2:	701a      	strb	r2, [r3, #0]
    e2f4:	e167      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(single_side_control == ButtonPressType){
    e2f6:	4b3b      	ldr	r3, [pc, #236]	; (e3e4 <HandleUserInput+0x764>)
    e2f8:	781a      	ldrb	r2, [r3, #0]
    e2fa:	4b22      	ldr	r3, [pc, #136]	; (e384 <HandleUserInput+0x704>)
    e2fc:	781b      	ldrb	r3, [r3, #0]
    e2fe:	429a      	cmp	r2, r3
    e300:	d123      	bne.n	e34a <HandleUserInput+0x6ca>
				if(!LIGHTS_ON){
    e302:	4b34      	ldr	r3, [pc, #208]	; (e3d4 <HandleUserInput+0x754>)
    e304:	781b      	ldrb	r3, [r3, #0]
    e306:	2b00      	cmp	r3, #0
    e308:	d109      	bne.n	e31e <HandleUserInput+0x69e>
					HEADLIGHTS = false;
    e30a:	4b34      	ldr	r3, [pc, #208]	; (e3dc <HandleUserInput+0x75c>)
    e30c:	2200      	movs	r2, #0
    e30e:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
    e310:	4b33      	ldr	r3, [pc, #204]	; (e3e0 <HandleUserInput+0x760>)
    e312:	2201      	movs	r2, #1
    e314:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    e316:	4b2f      	ldr	r3, [pc, #188]	; (e3d4 <HandleUserInput+0x754>)
    e318:	2201      	movs	r2, #1
    e31a:	701a      	strb	r2, [r3, #0]
    e31c:	e153      	b.n	e5c6 <HandleUserInput+0x946>
				}
				else if(HEADLIGHTS)
    e31e:	4b2f      	ldr	r3, [pc, #188]	; (e3dc <HandleUserInput+0x75c>)
    e320:	781b      	ldrb	r3, [r3, #0]
    e322:	2b00      	cmp	r3, #0
    e324:	d008      	beq.n	e338 <HandleUserInput+0x6b8>
				SIDELIGHTS = !SIDELIGHTS;
    e326:	4b2e      	ldr	r3, [pc, #184]	; (e3e0 <HandleUserInput+0x760>)
    e328:	781b      	ldrb	r3, [r3, #0]
    e32a:	425a      	negs	r2, r3
    e32c:	4153      	adcs	r3, r2
    e32e:	b2db      	uxtb	r3, r3
    e330:	001a      	movs	r2, r3
    e332:	4b2b      	ldr	r3, [pc, #172]	; (e3e0 <HandleUserInput+0x760>)
    e334:	701a      	strb	r2, [r3, #0]
    e336:	e146      	b.n	e5c6 <HandleUserInput+0x946>
				else
				LIGHTS_ON = !LIGHTS_ON;
    e338:	4b26      	ldr	r3, [pc, #152]	; (e3d4 <HandleUserInput+0x754>)
    e33a:	781b      	ldrb	r3, [r3, #0]
    e33c:	425a      	negs	r2, r3
    e33e:	4153      	adcs	r3, r2
    e340:	b2db      	uxtb	r3, r3
    e342:	001a      	movs	r2, r3
    e344:	4b23      	ldr	r3, [pc, #140]	; (e3d4 <HandleUserInput+0x754>)
    e346:	701a      	strb	r2, [r3, #0]
    e348:	e13d      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(single_down_control == ButtonPressType){
    e34a:	4b27      	ldr	r3, [pc, #156]	; (e3e8 <HandleUserInput+0x768>)
    e34c:	781a      	ldrb	r2, [r3, #0]
    e34e:	4b0d      	ldr	r3, [pc, #52]	; (e384 <HandleUserInput+0x704>)
    e350:	781b      	ldrb	r3, [r3, #0]
    e352:	429a      	cmp	r2, r3
    e354:	d14c      	bne.n	e3f0 <HandleUserInput+0x770>
				if(light_mode == 0)
    e356:	4b25      	ldr	r3, [pc, #148]	; (e3ec <HandleUserInput+0x76c>)
    e358:	781b      	ldrb	r3, [r3, #0]
    e35a:	2b00      	cmp	r3, #0
    e35c:	d105      	bne.n	e36a <HandleUserInput+0x6ea>
					light_mode = light_modes - 1;
    e35e:	2309      	movs	r3, #9
    e360:	3b01      	subs	r3, #1
    e362:	b2da      	uxtb	r2, r3
    e364:	4b21      	ldr	r3, [pc, #132]	; (e3ec <HandleUserInput+0x76c>)
    e366:	701a      	strb	r2, [r3, #0]
    e368:	e12d      	b.n	e5c6 <HandleUserInput+0x946>
				else
					light_mode--;
    e36a:	4b20      	ldr	r3, [pc, #128]	; (e3ec <HandleUserInput+0x76c>)
    e36c:	781b      	ldrb	r3, [r3, #0]
    e36e:	3b01      	subs	r3, #1
    e370:	b2da      	uxtb	r2, r3
    e372:	4b1e      	ldr	r3, [pc, #120]	; (e3ec <HandleUserInput+0x76c>)
    e374:	701a      	strb	r2, [r3, #0]
    e376:	e126      	b.n	e5c6 <HandleUserInput+0x946>
    e378:	20000390 	.word	0x20000390
    e37c:	000003e7 	.word	0x000003e7
    e380:	2000039c 	.word	0x2000039c
    e384:	20000388 	.word	0x20000388
    e388:	2000038a 	.word	0x2000038a
    e38c:	20000394 	.word	0x20000394
    e390:	20000389 	.word	0x20000389
    e394:	20000308 	.word	0x20000308
    e398:	20000373 	.word	0x20000373
    e39c:	20000375 	.word	0x20000375
    e3a0:	20000386 	.word	0x20000386
    e3a4:	20000378 	.word	0x20000378
    e3a8:	2000038c 	.word	0x2000038c
    e3ac:	20000377 	.word	0x20000377
    e3b0:	2000037a 	.word	0x2000037a
    e3b4:	20000380 	.word	0x20000380
    e3b8:	0000b109 	.word	0x0000b109
    e3bc:	200003a0 	.word	0x200003a0
    e3c0:	0000b139 	.word	0x0000b139
    e3c4:	20000379 	.word	0x20000379
    e3c8:	20000387 	.word	0x20000387
    e3cc:	0000b455 	.word	0x0000b455
    e3d0:	2000037b 	.word	0x2000037b
    e3d4:	200000a3 	.word	0x200000a3
    e3d8:	2000037c 	.word	0x2000037c
    e3dc:	20000322 	.word	0x20000322
    e3e0:	200000a2 	.word	0x200000a2
    e3e4:	2000037d 	.word	0x2000037d
    e3e8:	2000037f 	.word	0x2000037f
    e3ec:	2000001b 	.word	0x2000001b
			}
			else if(single_up_control == ButtonPressType){
    e3f0:	4b79      	ldr	r3, [pc, #484]	; (e5d8 <HandleUserInput+0x958>)
    e3f2:	781a      	ldrb	r2, [r3, #0]
    e3f4:	4b79      	ldr	r3, [pc, #484]	; (e5dc <HandleUserInput+0x95c>)
    e3f6:	781b      	ldrb	r3, [r3, #0]
    e3f8:	429a      	cmp	r2, r3
    e3fa:	d000      	beq.n	e3fe <HandleUserInput+0x77e>
    e3fc:	e0e3      	b.n	e5c6 <HandleUserInput+0x946>
				light_mode++;
    e3fe:	4b78      	ldr	r3, [pc, #480]	; (e5e0 <HandleUserInput+0x960>)
    e400:	781b      	ldrb	r3, [r3, #0]
    e402:	3301      	adds	r3, #1
    e404:	b2da      	uxtb	r2, r3
    e406:	4b76      	ldr	r3, [pc, #472]	; (e5e0 <HandleUserInput+0x960>)
    e408:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
    e40a:	4b75      	ldr	r3, [pc, #468]	; (e5e0 <HandleUserInput+0x960>)
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	2209      	movs	r2, #9
    e410:	4293      	cmp	r3, r2
    e412:	d200      	bcs.n	e416 <HandleUserInput+0x796>
    e414:	e0d7      	b.n	e5c6 <HandleUserInput+0x946>
					light_mode = 0;
    e416:	4b72      	ldr	r3, [pc, #456]	; (e5e0 <HandleUserInput+0x960>)
    e418:	2200      	movs	r2, #0
    e41a:	701a      	strb	r2, [r3, #0]
    e41c:	e0d3      	b.n	e5c6 <HandleUserInput+0x946>
			}
		}
		else if(remote_type == REMOTE_UART_DUAL){ // If dual axis remote is connected
    e41e:	4b71      	ldr	r3, [pc, #452]	; (e5e4 <HandleUserInput+0x964>)
    e420:	781b      	ldrb	r3, [r3, #0]
    e422:	2b03      	cmp	r3, #3
    e424:	d000      	beq.n	e428 <HandleUserInput+0x7a8>
    e426:	e0ce      	b.n	e5c6 <HandleUserInput+0x946>
			if(dual_all_control == ButtonPressType){
    e428:	4b6f      	ldr	r3, [pc, #444]	; (e5e8 <HandleUserInput+0x968>)
    e42a:	781a      	ldrb	r2, [r3, #0]
    e42c:	4b6b      	ldr	r3, [pc, #428]	; (e5dc <HandleUserInput+0x95c>)
    e42e:	781b      	ldrb	r3, [r3, #0]
    e430:	429a      	cmp	r2, r3
    e432:	d108      	bne.n	e446 <HandleUserInput+0x7c6>
				LIGHTS_ON = !LIGHTS_ON;
    e434:	4b6d      	ldr	r3, [pc, #436]	; (e5ec <HandleUserInput+0x96c>)
    e436:	781b      	ldrb	r3, [r3, #0]
    e438:	425a      	negs	r2, r3
    e43a:	4153      	adcs	r3, r2
    e43c:	b2db      	uxtb	r3, r3
    e43e:	001a      	movs	r2, r3
    e440:	4b6a      	ldr	r3, [pc, #424]	; (e5ec <HandleUserInput+0x96c>)
    e442:	701a      	strb	r2, [r3, #0]
    e444:	e0bf      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(dual_head_control == ButtonPressType){
    e446:	4b6a      	ldr	r3, [pc, #424]	; (e5f0 <HandleUserInput+0x970>)
    e448:	781a      	ldrb	r2, [r3, #0]
    e44a:	4b64      	ldr	r3, [pc, #400]	; (e5dc <HandleUserInput+0x95c>)
    e44c:	781b      	ldrb	r3, [r3, #0]
    e44e:	429a      	cmp	r2, r3
    e450:	d123      	bne.n	e49a <HandleUserInput+0x81a>
				if(!LIGHTS_ON){
    e452:	4b66      	ldr	r3, [pc, #408]	; (e5ec <HandleUserInput+0x96c>)
    e454:	781b      	ldrb	r3, [r3, #0]
    e456:	2b00      	cmp	r3, #0
    e458:	d109      	bne.n	e46e <HandleUserInput+0x7ee>
					HEADLIGHTS = true;
    e45a:	4b66      	ldr	r3, [pc, #408]	; (e5f4 <HandleUserInput+0x974>)
    e45c:	2201      	movs	r2, #1
    e45e:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e460:	4b65      	ldr	r3, [pc, #404]	; (e5f8 <HandleUserInput+0x978>)
    e462:	2200      	movs	r2, #0
    e464:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    e466:	4b61      	ldr	r3, [pc, #388]	; (e5ec <HandleUserInput+0x96c>)
    e468:	2201      	movs	r2, #1
    e46a:	701a      	strb	r2, [r3, #0]
    e46c:	e0ab      	b.n	e5c6 <HandleUserInput+0x946>
				}

				else if(SIDELIGHTS)
    e46e:	4b62      	ldr	r3, [pc, #392]	; (e5f8 <HandleUserInput+0x978>)
    e470:	781b      	ldrb	r3, [r3, #0]
    e472:	2b00      	cmp	r3, #0
    e474:	d008      	beq.n	e488 <HandleUserInput+0x808>
				HEADLIGHTS = !HEADLIGHTS;
    e476:	4b5f      	ldr	r3, [pc, #380]	; (e5f4 <HandleUserInput+0x974>)
    e478:	781b      	ldrb	r3, [r3, #0]
    e47a:	425a      	negs	r2, r3
    e47c:	4153      	adcs	r3, r2
    e47e:	b2db      	uxtb	r3, r3
    e480:	001a      	movs	r2, r3
    e482:	4b5c      	ldr	r3, [pc, #368]	; (e5f4 <HandleUserInput+0x974>)
    e484:	701a      	strb	r2, [r3, #0]
    e486:	e09e      	b.n	e5c6 <HandleUserInput+0x946>
				else
				LIGHTS_ON = !LIGHTS_ON;
    e488:	4b58      	ldr	r3, [pc, #352]	; (e5ec <HandleUserInput+0x96c>)
    e48a:	781b      	ldrb	r3, [r3, #0]
    e48c:	425a      	negs	r2, r3
    e48e:	4153      	adcs	r3, r2
    e490:	b2db      	uxtb	r3, r3
    e492:	001a      	movs	r2, r3
    e494:	4b55      	ldr	r3, [pc, #340]	; (e5ec <HandleUserInput+0x96c>)
    e496:	701a      	strb	r2, [r3, #0]
    e498:	e095      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(dual_side_control == ButtonPressType){
    e49a:	4b58      	ldr	r3, [pc, #352]	; (e5fc <HandleUserInput+0x97c>)
    e49c:	781a      	ldrb	r2, [r3, #0]
    e49e:	4b4f      	ldr	r3, [pc, #316]	; (e5dc <HandleUserInput+0x95c>)
    e4a0:	781b      	ldrb	r3, [r3, #0]
    e4a2:	429a      	cmp	r2, r3
    e4a4:	d123      	bne.n	e4ee <HandleUserInput+0x86e>
				if(!LIGHTS_ON){
    e4a6:	4b51      	ldr	r3, [pc, #324]	; (e5ec <HandleUserInput+0x96c>)
    e4a8:	781b      	ldrb	r3, [r3, #0]
    e4aa:	2b00      	cmp	r3, #0
    e4ac:	d109      	bne.n	e4c2 <HandleUserInput+0x842>
					HEADLIGHTS = false;
    e4ae:	4b51      	ldr	r3, [pc, #324]	; (e5f4 <HandleUserInput+0x974>)
    e4b0:	2200      	movs	r2, #0
    e4b2:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
    e4b4:	4b50      	ldr	r3, [pc, #320]	; (e5f8 <HandleUserInput+0x978>)
    e4b6:	2201      	movs	r2, #1
    e4b8:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    e4ba:	4b4c      	ldr	r3, [pc, #304]	; (e5ec <HandleUserInput+0x96c>)
    e4bc:	2201      	movs	r2, #1
    e4be:	701a      	strb	r2, [r3, #0]
    e4c0:	e081      	b.n	e5c6 <HandleUserInput+0x946>
				}
				else if(HEADLIGHTS)
    e4c2:	4b4c      	ldr	r3, [pc, #304]	; (e5f4 <HandleUserInput+0x974>)
    e4c4:	781b      	ldrb	r3, [r3, #0]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d008      	beq.n	e4dc <HandleUserInput+0x85c>
				SIDELIGHTS = !SIDELIGHTS;
    e4ca:	4b4b      	ldr	r3, [pc, #300]	; (e5f8 <HandleUserInput+0x978>)
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	425a      	negs	r2, r3
    e4d0:	4153      	adcs	r3, r2
    e4d2:	b2db      	uxtb	r3, r3
    e4d4:	001a      	movs	r2, r3
    e4d6:	4b48      	ldr	r3, [pc, #288]	; (e5f8 <HandleUserInput+0x978>)
    e4d8:	701a      	strb	r2, [r3, #0]
    e4da:	e074      	b.n	e5c6 <HandleUserInput+0x946>
				else
				LIGHTS_ON = !LIGHTS_ON;
    e4dc:	4b43      	ldr	r3, [pc, #268]	; (e5ec <HandleUserInput+0x96c>)
    e4de:	781b      	ldrb	r3, [r3, #0]
    e4e0:	425a      	negs	r2, r3
    e4e2:	4153      	adcs	r3, r2
    e4e4:	b2db      	uxtb	r3, r3
    e4e6:	001a      	movs	r2, r3
    e4e8:	4b40      	ldr	r3, [pc, #256]	; (e5ec <HandleUserInput+0x96c>)
    e4ea:	701a      	strb	r2, [r3, #0]
    e4ec:	e06b      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(dual_down_control == ButtonPressType){
    e4ee:	4b44      	ldr	r3, [pc, #272]	; (e600 <HandleUserInput+0x980>)
    e4f0:	781a      	ldrb	r2, [r3, #0]
    e4f2:	4b3a      	ldr	r3, [pc, #232]	; (e5dc <HandleUserInput+0x95c>)
    e4f4:	781b      	ldrb	r3, [r3, #0]
    e4f6:	429a      	cmp	r2, r3
    e4f8:	d110      	bne.n	e51c <HandleUserInput+0x89c>
				if(light_mode == 0)
    e4fa:	4b39      	ldr	r3, [pc, #228]	; (e5e0 <HandleUserInput+0x960>)
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d105      	bne.n	e50e <HandleUserInput+0x88e>
					light_mode = light_modes - 1;
    e502:	2309      	movs	r3, #9
    e504:	3b01      	subs	r3, #1
    e506:	b2da      	uxtb	r2, r3
    e508:	4b35      	ldr	r3, [pc, #212]	; (e5e0 <HandleUserInput+0x960>)
    e50a:	701a      	strb	r2, [r3, #0]
    e50c:	e05b      	b.n	e5c6 <HandleUserInput+0x946>
				else
					light_mode--;
    e50e:	4b34      	ldr	r3, [pc, #208]	; (e5e0 <HandleUserInput+0x960>)
    e510:	781b      	ldrb	r3, [r3, #0]
    e512:	3b01      	subs	r3, #1
    e514:	b2da      	uxtb	r2, r3
    e516:	4b32      	ldr	r3, [pc, #200]	; (e5e0 <HandleUserInput+0x960>)
    e518:	701a      	strb	r2, [r3, #0]
    e51a:	e054      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(dual_up_control == ButtonPressType){
    e51c:	4b39      	ldr	r3, [pc, #228]	; (e604 <HandleUserInput+0x984>)
    e51e:	781a      	ldrb	r2, [r3, #0]
    e520:	4b2e      	ldr	r3, [pc, #184]	; (e5dc <HandleUserInput+0x95c>)
    e522:	781b      	ldrb	r3, [r3, #0]
    e524:	429a      	cmp	r2, r3
    e526:	d10e      	bne.n	e546 <HandleUserInput+0x8c6>
				light_mode++;
    e528:	4b2d      	ldr	r3, [pc, #180]	; (e5e0 <HandleUserInput+0x960>)
    e52a:	781b      	ldrb	r3, [r3, #0]
    e52c:	3301      	adds	r3, #1
    e52e:	b2da      	uxtb	r2, r3
    e530:	4b2b      	ldr	r3, [pc, #172]	; (e5e0 <HandleUserInput+0x960>)
    e532:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
    e534:	4b2a      	ldr	r3, [pc, #168]	; (e5e0 <HandleUserInput+0x960>)
    e536:	781b      	ldrb	r3, [r3, #0]
    e538:	2209      	movs	r2, #9
    e53a:	4293      	cmp	r3, r2
    e53c:	d343      	bcc.n	e5c6 <HandleUserInput+0x946>
					light_mode = 0;
    e53e:	4b28      	ldr	r3, [pc, #160]	; (e5e0 <HandleUserInput+0x960>)
    e540:	2200      	movs	r2, #0
    e542:	701a      	strb	r2, [r3, #0]
    e544:	e03f      	b.n	e5c6 <HandleUserInput+0x946>
			}
			else if(TURN_ENABLED == 1 && ButtonHeldTime > 500){
    e546:	4b30      	ldr	r3, [pc, #192]	; (e608 <HandleUserInput+0x988>)
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	2b00      	cmp	r3, #0
    e54c:	d02f      	beq.n	e5ae <HandleUserInput+0x92e>
    e54e:	4b2f      	ldr	r3, [pc, #188]	; (e60c <HandleUserInput+0x98c>)
    e550:	681a      	ldr	r2, [r3, #0]
    e552:	23fa      	movs	r3, #250	; 0xfa
    e554:	005b      	lsls	r3, r3, #1
    e556:	429a      	cmp	r2, r3
    e558:	d929      	bls.n	e5ae <HandleUserInput+0x92e>
				if(VescRemoteX < 110){
    e55a:	4b2d      	ldr	r3, [pc, #180]	; (e610 <HandleUserInput+0x990>)
    e55c:	781b      	ldrb	r3, [r3, #0]
    e55e:	2b6d      	cmp	r3, #109	; 0x6d
    e560:	d810      	bhi.n	e584 <HandleUserInput+0x904>
					if(SIDELIGHTS)
    e562:	4b25      	ldr	r3, [pc, #148]	; (e5f8 <HandleUserInput+0x978>)
    e564:	781b      	ldrb	r3, [r3, #0]
    e566:	2b00      	cmp	r3, #0
    e568:	d002      	beq.n	e570 <HandleUserInput+0x8f0>
						RestoreTurnLights = true;
    e56a:	4b2a      	ldr	r3, [pc, #168]	; (e614 <HandleUserInput+0x994>)
    e56c:	2201      	movs	r2, #1
    e56e:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e570:	4b21      	ldr	r3, [pc, #132]	; (e5f8 <HandleUserInput+0x978>)
    e572:	2200      	movs	r2, #0
    e574:	701a      	strb	r2, [r3, #0]
				
					TurnSignalOn = true;
    e576:	4b28      	ldr	r3, [pc, #160]	; (e618 <HandleUserInput+0x998>)
    e578:	2201      	movs	r2, #1
    e57a:	701a      	strb	r2, [r3, #0]
					TurnSignal(true);
    e57c:	2001      	movs	r0, #1
    e57e:	4b27      	ldr	r3, [pc, #156]	; (e61c <HandleUserInput+0x99c>)
    e580:	4798      	blx	r3
				if(VescRemoteX < 110){
    e582:	e01f      	b.n	e5c4 <HandleUserInput+0x944>
				}
				else if(VescRemoteX > 150){
    e584:	4b22      	ldr	r3, [pc, #136]	; (e610 <HandleUserInput+0x990>)
    e586:	781b      	ldrb	r3, [r3, #0]
    e588:	2b96      	cmp	r3, #150	; 0x96
    e58a:	d91b      	bls.n	e5c4 <HandleUserInput+0x944>
					if(SIDELIGHTS)
    e58c:	4b1a      	ldr	r3, [pc, #104]	; (e5f8 <HandleUserInput+0x978>)
    e58e:	781b      	ldrb	r3, [r3, #0]
    e590:	2b00      	cmp	r3, #0
    e592:	d002      	beq.n	e59a <HandleUserInput+0x91a>
						RestoreTurnLights = true;
    e594:	4b1f      	ldr	r3, [pc, #124]	; (e614 <HandleUserInput+0x994>)
    e596:	2201      	movs	r2, #1
    e598:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e59a:	4b17      	ldr	r3, [pc, #92]	; (e5f8 <HandleUserInput+0x978>)
    e59c:	2200      	movs	r2, #0
    e59e:	701a      	strb	r2, [r3, #0]

					TurnSignalOn = true;
    e5a0:	4b1d      	ldr	r3, [pc, #116]	; (e618 <HandleUserInput+0x998>)
    e5a2:	2201      	movs	r2, #1
    e5a4:	701a      	strb	r2, [r3, #0]
					TurnSignal(false);
    e5a6:	2000      	movs	r0, #0
    e5a8:	4b1c      	ldr	r3, [pc, #112]	; (e61c <HandleUserInput+0x99c>)
    e5aa:	4798      	blx	r3
				if(VescRemoteX < 110){
    e5ac:	e00a      	b.n	e5c4 <HandleUserInput+0x944>
				}
			}
			else if(RestoreTurnLights){
    e5ae:	4b19      	ldr	r3, [pc, #100]	; (e614 <HandleUserInput+0x994>)
    e5b0:	781b      	ldrb	r3, [r3, #0]
    e5b2:	2b00      	cmp	r3, #0
    e5b4:	d007      	beq.n	e5c6 <HandleUserInput+0x946>
				SIDELIGHTS = true;
    e5b6:	4b10      	ldr	r3, [pc, #64]	; (e5f8 <HandleUserInput+0x978>)
    e5b8:	2201      	movs	r2, #1
    e5ba:	701a      	strb	r2, [r3, #0]
				RestoreTurnLights = false;
    e5bc:	4b15      	ldr	r3, [pc, #84]	; (e614 <HandleUserInput+0x994>)
    e5be:	2200      	movs	r2, #0
    e5c0:	701a      	strb	r2, [r3, #0]
    e5c2:	e000      	b.n	e5c6 <HandleUserInput+0x946>
				if(VescRemoteX < 110){
    e5c4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	lremote_btn_state = remote_btn_state;
    e5c6:	4b16      	ldr	r3, [pc, #88]	; (e620 <HandleUserInput+0x9a0>)
    e5c8:	781a      	ldrb	r2, [r3, #0]
    e5ca:	4b16      	ldr	r3, [pc, #88]	; (e624 <HandleUserInput+0x9a4>)
    e5cc:	701a      	strb	r2, [r3, #0]
}
    e5ce:	46c0      	nop			; (mov r8, r8)
    e5d0:	46bd      	mov	sp, r7
    e5d2:	b003      	add	sp, #12
    e5d4:	bd90      	pop	{r4, r7, pc}
    e5d6:	46c0      	nop			; (mov r8, r8)
    e5d8:	2000037e 	.word	0x2000037e
    e5dc:	20000388 	.word	0x20000388
    e5e0:	2000001b 	.word	0x2000001b
    e5e4:	20000308 	.word	0x20000308
    e5e8:	20000381 	.word	0x20000381
    e5ec:	200000a3 	.word	0x200000a3
    e5f0:	20000382 	.word	0x20000382
    e5f4:	20000322 	.word	0x20000322
    e5f8:	200000a2 	.word	0x200000a2
    e5fc:	20000383 	.word	0x20000383
    e600:	20000385 	.word	0x20000385
    e604:	20000384 	.word	0x20000384
    e608:	20000376 	.word	0x20000376
    e60c:	2000038c 	.word	0x2000038c
    e610:	20000373 	.word	0x20000373
    e614:	2000039d 	.word	0x2000039d
    e618:	2000039c 	.word	0x2000039c
    e61c:	0000b79d 	.word	0x0000b79d
    e620:	2000030c 	.word	0x2000030c
    e624:	2000030d 	.word	0x2000030d

0000e628 <save_led_data>:


// EEPROM size needs to be set to 0x02


void save_led_data(){
    e628:	b590      	push	{r4, r7, lr}
    e62a:	b085      	sub	sp, #20
    e62c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e62e:	2300      	movs	r3, #0
    e630:	60fb      	str	r3, [r7, #12]
    e632:	e005      	b.n	e640 <save_led_data+0x18>
		eeprom_data[0] = 0;
    e634:	4ba4      	ldr	r3, [pc, #656]	; (e8c8 <save_led_data+0x2a0>)
    e636:	2200      	movs	r2, #0
    e638:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e63a:	68fb      	ldr	r3, [r7, #12]
    e63c:	3301      	adds	r3, #1
    e63e:	60fb      	str	r3, [r7, #12]
    e640:	68fb      	ldr	r3, [r7, #12]
    e642:	2b3b      	cmp	r3, #59	; 0x3b
    e644:	ddf6      	ble.n	e634 <save_led_data+0xc>
	}

	eeprom_data[0] = SWITCHES;
    e646:	4ba1      	ldr	r3, [pc, #644]	; (e8cc <save_led_data+0x2a4>)
    e648:	781a      	ldrb	r2, [r3, #0]
    e64a:	4b9f      	ldr	r3, [pc, #636]	; (e8c8 <save_led_data+0x2a0>)
    e64c:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = light_mode;
    e64e:	4ba0      	ldr	r3, [pc, #640]	; (e8d0 <save_led_data+0x2a8>)
    e650:	781a      	ldrb	r2, [r3, #0]
    e652:	4b9d      	ldr	r3, [pc, #628]	; (e8c8 <save_led_data+0x2a0>)
    e654:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = (Static_RGB.LR & 0xFF);
    e656:	4b9f      	ldr	r3, [pc, #636]	; (e8d4 <save_led_data+0x2ac>)
    e658:	881b      	ldrh	r3, [r3, #0]
    e65a:	b2da      	uxtb	r2, r3
    e65c:	4b9a      	ldr	r3, [pc, #616]	; (e8c8 <save_led_data+0x2a0>)
    e65e:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (Static_RGB.LR & 0xFF00) >> 8;
    e660:	4b9c      	ldr	r3, [pc, #624]	; (e8d4 <save_led_data+0x2ac>)
    e662:	881b      	ldrh	r3, [r3, #0]
    e664:	0a1b      	lsrs	r3, r3, #8
    e666:	b29b      	uxth	r3, r3
    e668:	b2da      	uxtb	r2, r3
    e66a:	4b97      	ldr	r3, [pc, #604]	; (e8c8 <save_led_data+0x2a0>)
    e66c:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (Static_RGB.LG & 0xFF);
    e66e:	4b99      	ldr	r3, [pc, #612]	; (e8d4 <save_led_data+0x2ac>)
    e670:	885b      	ldrh	r3, [r3, #2]
    e672:	b2da      	uxtb	r2, r3
    e674:	4b94      	ldr	r3, [pc, #592]	; (e8c8 <save_led_data+0x2a0>)
    e676:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Static_RGB.LG & 0xFF00) >> 8;
    e678:	4b96      	ldr	r3, [pc, #600]	; (e8d4 <save_led_data+0x2ac>)
    e67a:	885b      	ldrh	r3, [r3, #2]
    e67c:	0a1b      	lsrs	r3, r3, #8
    e67e:	b29b      	uxth	r3, r3
    e680:	b2da      	uxtb	r2, r3
    e682:	4b91      	ldr	r3, [pc, #580]	; (e8c8 <save_led_data+0x2a0>)
    e684:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Static_RGB.LB & 0xFF);
    e686:	4b93      	ldr	r3, [pc, #588]	; (e8d4 <save_led_data+0x2ac>)
    e688:	889b      	ldrh	r3, [r3, #4]
    e68a:	b2da      	uxtb	r2, r3
    e68c:	4b8e      	ldr	r3, [pc, #568]	; (e8c8 <save_led_data+0x2a0>)
    e68e:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Static_RGB.LB & 0xFF00) >> 8;
    e690:	4b90      	ldr	r3, [pc, #576]	; (e8d4 <save_led_data+0x2ac>)
    e692:	889b      	ldrh	r3, [r3, #4]
    e694:	0a1b      	lsrs	r3, r3, #8
    e696:	b29b      	uxth	r3, r3
    e698:	b2da      	uxtb	r2, r3
    e69a:	4b8b      	ldr	r3, [pc, #556]	; (e8c8 <save_led_data+0x2a0>)
    e69c:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Static_RGB.RR & 0xFF);
    e69e:	4b8d      	ldr	r3, [pc, #564]	; (e8d4 <save_led_data+0x2ac>)
    e6a0:	88db      	ldrh	r3, [r3, #6]
    e6a2:	b2da      	uxtb	r2, r3
    e6a4:	4b88      	ldr	r3, [pc, #544]	; (e8c8 <save_led_data+0x2a0>)
    e6a6:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Static_RGB.RR & 0xFF00) >> 8;
    e6a8:	4b8a      	ldr	r3, [pc, #552]	; (e8d4 <save_led_data+0x2ac>)
    e6aa:	88db      	ldrh	r3, [r3, #6]
    e6ac:	0a1b      	lsrs	r3, r3, #8
    e6ae:	b29b      	uxth	r3, r3
    e6b0:	b2da      	uxtb	r2, r3
    e6b2:	4b85      	ldr	r3, [pc, #532]	; (e8c8 <save_led_data+0x2a0>)
    e6b4:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Static_RGB.RG & 0xFF);
    e6b6:	4b87      	ldr	r3, [pc, #540]	; (e8d4 <save_led_data+0x2ac>)
    e6b8:	891b      	ldrh	r3, [r3, #8]
    e6ba:	b2da      	uxtb	r2, r3
    e6bc:	4b82      	ldr	r3, [pc, #520]	; (e8c8 <save_led_data+0x2a0>)
    e6be:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Static_RGB.RG & 0xFF00) >> 8;
    e6c0:	4b84      	ldr	r3, [pc, #528]	; (e8d4 <save_led_data+0x2ac>)
    e6c2:	891b      	ldrh	r3, [r3, #8]
    e6c4:	0a1b      	lsrs	r3, r3, #8
    e6c6:	b29b      	uxth	r3, r3
    e6c8:	b2da      	uxtb	r2, r3
    e6ca:	4b7f      	ldr	r3, [pc, #508]	; (e8c8 <save_led_data+0x2a0>)
    e6cc:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Static_RGB.RB & 0xFF);
    e6ce:	4b81      	ldr	r3, [pc, #516]	; (e8d4 <save_led_data+0x2ac>)
    e6d0:	895b      	ldrh	r3, [r3, #10]
    e6d2:	b2da      	uxtb	r2, r3
    e6d4:	4b7c      	ldr	r3, [pc, #496]	; (e8c8 <save_led_data+0x2a0>)
    e6d6:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Static_RGB.RB & 0xFF00) >> 8;
    e6d8:	4b7e      	ldr	r3, [pc, #504]	; (e8d4 <save_led_data+0x2ac>)
    e6da:	895b      	ldrh	r3, [r3, #10]
    e6dc:	0a1b      	lsrs	r3, r3, #8
    e6de:	b29b      	uxth	r3, r3
    e6e0:	b2da      	uxtb	r2, r3
    e6e2:	4b79      	ldr	r3, [pc, #484]	; (e8c8 <save_led_data+0x2a0>)
    e6e4:	735a      	strb	r2, [r3, #13]
	int dataOffset = 14;
    e6e6:	230e      	movs	r3, #14
    e6e8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++){
    e6ea:	2300      	movs	r3, #0
    e6ec:	60bb      	str	r3, [r7, #8]
    e6ee:	e058      	b.n	e7a2 <save_led_data+0x17a>
		eeprom_data[dataOffset + (i*5)] = ColorBase[i];
    e6f0:	68ba      	ldr	r2, [r7, #8]
    e6f2:	0013      	movs	r3, r2
    e6f4:	009b      	lsls	r3, r3, #2
    e6f6:	189a      	adds	r2, r3, r2
    e6f8:	683b      	ldr	r3, [r7, #0]
    e6fa:	18d3      	adds	r3, r2, r3
    e6fc:	4976      	ldr	r1, [pc, #472]	; (e8d8 <save_led_data+0x2b0>)
    e6fe:	68ba      	ldr	r2, [r7, #8]
    e700:	188a      	adds	r2, r1, r2
    e702:	7811      	ldrb	r1, [r2, #0]
    e704:	4a70      	ldr	r2, [pc, #448]	; (e8c8 <save_led_data+0x2a0>)
    e706:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+1] = BrightBase[i];
    e708:	68ba      	ldr	r2, [r7, #8]
    e70a:	0013      	movs	r3, r2
    e70c:	009b      	lsls	r3, r3, #2
    e70e:	189a      	adds	r2, r3, r2
    e710:	683b      	ldr	r3, [r7, #0]
    e712:	18d3      	adds	r3, r2, r3
    e714:	3301      	adds	r3, #1
    e716:	4971      	ldr	r1, [pc, #452]	; (e8dc <save_led_data+0x2b4>)
    e718:	68ba      	ldr	r2, [r7, #8]
    e71a:	188a      	adds	r2, r1, r2
    e71c:	7811      	ldrb	r1, [r2, #0]
    e71e:	4a6a      	ldr	r2, [pc, #424]	; (e8c8 <save_led_data+0x2a0>)
    e720:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+2] = RateBase[i];
    e722:	68ba      	ldr	r2, [r7, #8]
    e724:	0013      	movs	r3, r2
    e726:	009b      	lsls	r3, r3, #2
    e728:	189a      	adds	r2, r3, r2
    e72a:	683b      	ldr	r3, [r7, #0]
    e72c:	18d3      	adds	r3, r2, r3
    e72e:	3302      	adds	r3, #2
    e730:	496b      	ldr	r1, [pc, #428]	; (e8e0 <save_led_data+0x2b8>)
    e732:	68ba      	ldr	r2, [r7, #8]
    e734:	188a      	adds	r2, r1, r2
    e736:	7811      	ldrb	r1, [r2, #0]
    e738:	4a63      	ldr	r2, [pc, #396]	; (e8c8 <save_led_data+0x2a0>)
    e73a:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+3] = (uint8_t)(RateSens[i]*100);
    e73c:	68ba      	ldr	r2, [r7, #8]
    e73e:	0013      	movs	r3, r2
    e740:	009b      	lsls	r3, r3, #2
    e742:	189a      	adds	r2, r3, r2
    e744:	683b      	ldr	r3, [r7, #0]
    e746:	18d3      	adds	r3, r2, r3
    e748:	1cdc      	adds	r4, r3, #3
    e74a:	4b66      	ldr	r3, [pc, #408]	; (e8e4 <save_led_data+0x2bc>)
    e74c:	68ba      	ldr	r2, [r7, #8]
    e74e:	0092      	lsls	r2, r2, #2
    e750:	58d2      	ldr	r2, [r2, r3]
    e752:	4b65      	ldr	r3, [pc, #404]	; (e8e8 <save_led_data+0x2c0>)
    e754:	4965      	ldr	r1, [pc, #404]	; (e8ec <save_led_data+0x2c4>)
    e756:	1c10      	adds	r0, r2, #0
    e758:	4798      	blx	r3
    e75a:	1c03      	adds	r3, r0, #0
    e75c:	1c1a      	adds	r2, r3, #0
    e75e:	4b64      	ldr	r3, [pc, #400]	; (e8f0 <save_led_data+0x2c8>)
    e760:	1c10      	adds	r0, r2, #0
    e762:	4798      	blx	r3
    e764:	0003      	movs	r3, r0
    e766:	b2da      	uxtb	r2, r3
    e768:	4b57      	ldr	r3, [pc, #348]	; (e8c8 <save_led_data+0x2a0>)
    e76a:	551a      	strb	r2, [r3, r4]
		eeprom_data[dataOffset + (i*5)+4] = (uint8_t)(Brightness[i]*100);
    e76c:	68ba      	ldr	r2, [r7, #8]
    e76e:	0013      	movs	r3, r2
    e770:	009b      	lsls	r3, r3, #2
    e772:	189a      	adds	r2, r3, r2
    e774:	683b      	ldr	r3, [r7, #0]
    e776:	18d3      	adds	r3, r2, r3
    e778:	1d1c      	adds	r4, r3, #4
    e77a:	4b5e      	ldr	r3, [pc, #376]	; (e8f4 <save_led_data+0x2cc>)
    e77c:	68ba      	ldr	r2, [r7, #8]
    e77e:	0092      	lsls	r2, r2, #2
    e780:	58d2      	ldr	r2, [r2, r3]
    e782:	4b59      	ldr	r3, [pc, #356]	; (e8e8 <save_led_data+0x2c0>)
    e784:	4959      	ldr	r1, [pc, #356]	; (e8ec <save_led_data+0x2c4>)
    e786:	1c10      	adds	r0, r2, #0
    e788:	4798      	blx	r3
    e78a:	1c03      	adds	r3, r0, #0
    e78c:	1c1a      	adds	r2, r3, #0
    e78e:	4b58      	ldr	r3, [pc, #352]	; (e8f0 <save_led_data+0x2c8>)
    e790:	1c10      	adds	r0, r2, #0
    e792:	4798      	blx	r3
    e794:	0003      	movs	r3, r0
    e796:	b2da      	uxtb	r2, r3
    e798:	4b4b      	ldr	r3, [pc, #300]	; (e8c8 <save_led_data+0x2a0>)
    e79a:	551a      	strb	r2, [r3, r4]
	for(int i = 0; i < 8; i++){
    e79c:	68bb      	ldr	r3, [r7, #8]
    e79e:	3301      	adds	r3, #1
    e7a0:	60bb      	str	r3, [r7, #8]
    e7a2:	68bb      	ldr	r3, [r7, #8]
    e7a4:	2b07      	cmp	r3, #7
    e7a6:	dda3      	ble.n	e6f0 <save_led_data+0xc8>
	}

	eeprom_emulator_write_page(0, eeprom_data);
    e7a8:	4b47      	ldr	r3, [pc, #284]	; (e8c8 <save_led_data+0x2a0>)
    e7aa:	0019      	movs	r1, r3
    e7ac:	2000      	movs	r0, #0
    e7ae:	4b52      	ldr	r3, [pc, #328]	; (e8f8 <save_led_data+0x2d0>)
    e7b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e7b2:	4b52      	ldr	r3, [pc, #328]	; (e8fc <save_led_data+0x2d4>)
    e7b4:	4798      	blx	r3

	
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e7b6:	2300      	movs	r3, #0
    e7b8:	607b      	str	r3, [r7, #4]
    e7ba:	e005      	b.n	e7c8 <save_led_data+0x1a0>
		eeprom_data[0] = 0;
    e7bc:	4b42      	ldr	r3, [pc, #264]	; (e8c8 <save_led_data+0x2a0>)
    e7be:	2200      	movs	r2, #0
    e7c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e7c2:	687b      	ldr	r3, [r7, #4]
    e7c4:	3301      	adds	r3, #1
    e7c6:	607b      	str	r3, [r7, #4]
    e7c8:	687b      	ldr	r3, [r7, #4]
    e7ca:	2b3b      	cmp	r3, #59	; 0x3b
    e7cc:	ddf6      	ble.n	e7bc <save_led_data+0x194>
	}
	
	eeprom_data[0] = ColorBase[8];
    e7ce:	4b42      	ldr	r3, [pc, #264]	; (e8d8 <save_led_data+0x2b0>)
    e7d0:	7a1a      	ldrb	r2, [r3, #8]
    e7d2:	4b3d      	ldr	r3, [pc, #244]	; (e8c8 <save_led_data+0x2a0>)
    e7d4:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = BrightBase[8];
    e7d6:	4b41      	ldr	r3, [pc, #260]	; (e8dc <save_led_data+0x2b4>)
    e7d8:	7a1a      	ldrb	r2, [r3, #8]
    e7da:	4b3b      	ldr	r3, [pc, #236]	; (e8c8 <save_led_data+0x2a0>)
    e7dc:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = RateBase[8];
    e7de:	4b40      	ldr	r3, [pc, #256]	; (e8e0 <save_led_data+0x2b8>)
    e7e0:	7a1a      	ldrb	r2, [r3, #8]
    e7e2:	4b39      	ldr	r3, [pc, #228]	; (e8c8 <save_led_data+0x2a0>)
    e7e4:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (uint8_t)(RateSens[8]*100);
    e7e6:	4b3f      	ldr	r3, [pc, #252]	; (e8e4 <save_led_data+0x2bc>)
    e7e8:	6a1a      	ldr	r2, [r3, #32]
    e7ea:	4b3f      	ldr	r3, [pc, #252]	; (e8e8 <save_led_data+0x2c0>)
    e7ec:	493f      	ldr	r1, [pc, #252]	; (e8ec <save_led_data+0x2c4>)
    e7ee:	1c10      	adds	r0, r2, #0
    e7f0:	4798      	blx	r3
    e7f2:	1c03      	adds	r3, r0, #0
    e7f4:	1c1a      	adds	r2, r3, #0
    e7f6:	4b3e      	ldr	r3, [pc, #248]	; (e8f0 <save_led_data+0x2c8>)
    e7f8:	1c10      	adds	r0, r2, #0
    e7fa:	4798      	blx	r3
    e7fc:	0003      	movs	r3, r0
    e7fe:	b2da      	uxtb	r2, r3
    e800:	4b31      	ldr	r3, [pc, #196]	; (e8c8 <save_led_data+0x2a0>)
    e802:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (uint8_t)(Brightness[8]*100);
    e804:	4b3b      	ldr	r3, [pc, #236]	; (e8f4 <save_led_data+0x2cc>)
    e806:	6a1a      	ldr	r2, [r3, #32]
    e808:	4b37      	ldr	r3, [pc, #220]	; (e8e8 <save_led_data+0x2c0>)
    e80a:	4938      	ldr	r1, [pc, #224]	; (e8ec <save_led_data+0x2c4>)
    e80c:	1c10      	adds	r0, r2, #0
    e80e:	4798      	blx	r3
    e810:	1c03      	adds	r3, r0, #0
    e812:	1c1a      	adds	r2, r3, #0
    e814:	4b36      	ldr	r3, [pc, #216]	; (e8f0 <save_led_data+0x2c8>)
    e816:	1c10      	adds	r0, r2, #0
    e818:	4798      	blx	r3
    e81a:	0003      	movs	r3, r0
    e81c:	b2da      	uxtb	r2, r3
    e81e:	4b2a      	ldr	r3, [pc, #168]	; (e8c8 <save_led_data+0x2a0>)
    e820:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Custom_RGB.LR & 0xFF);
    e822:	4b37      	ldr	r3, [pc, #220]	; (e900 <save_led_data+0x2d8>)
    e824:	881b      	ldrh	r3, [r3, #0]
    e826:	b2da      	uxtb	r2, r3
    e828:	4b27      	ldr	r3, [pc, #156]	; (e8c8 <save_led_data+0x2a0>)
    e82a:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Custom_RGB.LR & 0xFF00) >> 8;
    e82c:	4b34      	ldr	r3, [pc, #208]	; (e900 <save_led_data+0x2d8>)
    e82e:	881b      	ldrh	r3, [r3, #0]
    e830:	0a1b      	lsrs	r3, r3, #8
    e832:	b29b      	uxth	r3, r3
    e834:	b2da      	uxtb	r2, r3
    e836:	4b24      	ldr	r3, [pc, #144]	; (e8c8 <save_led_data+0x2a0>)
    e838:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Custom_RGB.LG & 0xFF);
    e83a:	4b31      	ldr	r3, [pc, #196]	; (e900 <save_led_data+0x2d8>)
    e83c:	885b      	ldrh	r3, [r3, #2]
    e83e:	b2da      	uxtb	r2, r3
    e840:	4b21      	ldr	r3, [pc, #132]	; (e8c8 <save_led_data+0x2a0>)
    e842:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Custom_RGB.LG & 0xFF00) >> 8;
    e844:	4b2e      	ldr	r3, [pc, #184]	; (e900 <save_led_data+0x2d8>)
    e846:	885b      	ldrh	r3, [r3, #2]
    e848:	0a1b      	lsrs	r3, r3, #8
    e84a:	b29b      	uxth	r3, r3
    e84c:	b2da      	uxtb	r2, r3
    e84e:	4b1e      	ldr	r3, [pc, #120]	; (e8c8 <save_led_data+0x2a0>)
    e850:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Custom_RGB.LB & 0xFF);
    e852:	4b2b      	ldr	r3, [pc, #172]	; (e900 <save_led_data+0x2d8>)
    e854:	889b      	ldrh	r3, [r3, #4]
    e856:	b2da      	uxtb	r2, r3
    e858:	4b1b      	ldr	r3, [pc, #108]	; (e8c8 <save_led_data+0x2a0>)
    e85a:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Custom_RGB.LB & 0xFF00) >> 8;
    e85c:	4b28      	ldr	r3, [pc, #160]	; (e900 <save_led_data+0x2d8>)
    e85e:	889b      	ldrh	r3, [r3, #4]
    e860:	0a1b      	lsrs	r3, r3, #8
    e862:	b29b      	uxth	r3, r3
    e864:	b2da      	uxtb	r2, r3
    e866:	4b18      	ldr	r3, [pc, #96]	; (e8c8 <save_led_data+0x2a0>)
    e868:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Custom_RGB.RR & 0xFF);
    e86a:	4b25      	ldr	r3, [pc, #148]	; (e900 <save_led_data+0x2d8>)
    e86c:	88db      	ldrh	r3, [r3, #6]
    e86e:	b2da      	uxtb	r2, r3
    e870:	4b15      	ldr	r3, [pc, #84]	; (e8c8 <save_led_data+0x2a0>)
    e872:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Custom_RGB.RR & 0xFF00) >> 8;
    e874:	4b22      	ldr	r3, [pc, #136]	; (e900 <save_led_data+0x2d8>)
    e876:	88db      	ldrh	r3, [r3, #6]
    e878:	0a1b      	lsrs	r3, r3, #8
    e87a:	b29b      	uxth	r3, r3
    e87c:	b2da      	uxtb	r2, r3
    e87e:	4b12      	ldr	r3, [pc, #72]	; (e8c8 <save_led_data+0x2a0>)
    e880:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Custom_RGB.RG & 0xFF);
    e882:	4b1f      	ldr	r3, [pc, #124]	; (e900 <save_led_data+0x2d8>)
    e884:	891b      	ldrh	r3, [r3, #8]
    e886:	b2da      	uxtb	r2, r3
    e888:	4b0f      	ldr	r3, [pc, #60]	; (e8c8 <save_led_data+0x2a0>)
    e88a:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = (Custom_RGB.RG & 0xFF00) >> 8;
    e88c:	4b1c      	ldr	r3, [pc, #112]	; (e900 <save_led_data+0x2d8>)
    e88e:	891b      	ldrh	r3, [r3, #8]
    e890:	0a1b      	lsrs	r3, r3, #8
    e892:	b29b      	uxth	r3, r3
    e894:	b2da      	uxtb	r2, r3
    e896:	4b0c      	ldr	r3, [pc, #48]	; (e8c8 <save_led_data+0x2a0>)
    e898:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = (Custom_RGB.RB & 0xFF);
    e89a:	4b19      	ldr	r3, [pc, #100]	; (e900 <save_led_data+0x2d8>)
    e89c:	895b      	ldrh	r3, [r3, #10]
    e89e:	b2da      	uxtb	r2, r3
    e8a0:	4b09      	ldr	r3, [pc, #36]	; (e8c8 <save_led_data+0x2a0>)
    e8a2:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = (Custom_RGB.RB & 0xFF00) >> 8;
    e8a4:	4b16      	ldr	r3, [pc, #88]	; (e900 <save_led_data+0x2d8>)
    e8a6:	895b      	ldrh	r3, [r3, #10]
    e8a8:	0a1b      	lsrs	r3, r3, #8
    e8aa:	b29b      	uxth	r3, r3
    e8ac:	b2da      	uxtb	r2, r3
    e8ae:	4b06      	ldr	r3, [pc, #24]	; (e8c8 <save_led_data+0x2a0>)
    e8b0:	741a      	strb	r2, [r3, #16]

	eeprom_emulator_write_page(1, eeprom_data);
    e8b2:	4b05      	ldr	r3, [pc, #20]	; (e8c8 <save_led_data+0x2a0>)
    e8b4:	0019      	movs	r1, r3
    e8b6:	2001      	movs	r0, #1
    e8b8:	4b0f      	ldr	r3, [pc, #60]	; (e8f8 <save_led_data+0x2d0>)
    e8ba:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e8bc:	4b0f      	ldr	r3, [pc, #60]	; (e8fc <save_led_data+0x2d4>)
    e8be:	4798      	blx	r3
}
    e8c0:	46c0      	nop			; (mov r8, r8)
    e8c2:	46bd      	mov	sp, r7
    e8c4:	b005      	add	sp, #20
    e8c6:	bd90      	pop	{r4, r7, pc}
    e8c8:	200009e0 	.word	0x200009e0
    e8cc:	20000325 	.word	0x20000325
    e8d0:	2000001b 	.word	0x2000001b
    e8d4:	2000001c 	.word	0x2000001c
    e8d8:	20000070 	.word	0x20000070
    e8dc:	2000007c 	.word	0x2000007c
    e8e0:	20000088 	.word	0x20000088
    e8e4:	20000028 	.word	0x20000028
    e8e8:	00014ca1 	.word	0x00014ca1
    e8ec:	42c80000 	.word	0x42c80000
    e8f0:	00014531 	.word	0x00014531
    e8f4:	2000004c 	.word	0x2000004c
    e8f8:	0000882d 	.word	0x0000882d
    e8fc:	000089d5 	.word	0x000089d5
    e900:	20000094 	.word	0x20000094

0000e904 <restore_led_data>:

void restore_led_data(){
    e904:	b590      	push	{r4, r7, lr}
    e906:	b09f      	sub	sp, #124	; 0x7c
    e908:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(0, eeprom_data);
    e90a:	4ba9      	ldr	r3, [pc, #676]	; (ebb0 <restore_led_data+0x2ac>)
    e90c:	0019      	movs	r1, r3
    e90e:	2000      	movs	r0, #0
    e910:	4ba8      	ldr	r3, [pc, #672]	; (ebb4 <restore_led_data+0x2b0>)
    e912:	4798      	blx	r3
	
	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    e914:	4ba6      	ldr	r3, [pc, #664]	; (ebb0 <restore_led_data+0x2ac>)
    e916:	781b      	ldrb	r3, [r3, #0]
    e918:	2bff      	cmp	r3, #255	; 0xff
    e91a:	d000      	beq.n	e91e <restore_led_data+0x1a>
    e91c:	e0b4      	b.n	ea88 <restore_led_data+0x184>
    e91e:	4ba4      	ldr	r3, [pc, #656]	; (ebb0 <restore_led_data+0x2ac>)
    e920:	785b      	ldrb	r3, [r3, #1]
    e922:	2bff      	cmp	r3, #255	; 0xff
    e924:	d000      	beq.n	e928 <restore_led_data+0x24>
    e926:	e0af      	b.n	ea88 <restore_led_data+0x184>
		SWITCHES = 0x30; // SIDE: on	HEAD: on	LIGHT: disable	IMU: disable
    e928:	4ba3      	ldr	r3, [pc, #652]	; (ebb8 <restore_led_data+0x2b4>)
    e92a:	2230      	movs	r2, #48	; 0x30
    e92c:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    e92e:	4ba2      	ldr	r3, [pc, #648]	; (ebb8 <restore_led_data+0x2b4>)
    e930:	781b      	ldrb	r3, [r3, #0]
    e932:	111b      	asrs	r3, r3, #4
    e934:	b2db      	uxtb	r3, r3
    e936:	2201      	movs	r2, #1
    e938:	4013      	ands	r3, r2
    e93a:	b2da      	uxtb	r2, r3
    e93c:	4b9f      	ldr	r3, [pc, #636]	; (ebbc <restore_led_data+0x2b8>)
    e93e:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    e940:	4b9d      	ldr	r3, [pc, #628]	; (ebb8 <restore_led_data+0x2b4>)
    e942:	781b      	ldrb	r3, [r3, #0]
    e944:	115b      	asrs	r3, r3, #5
    e946:	b2db      	uxtb	r3, r3
    e948:	2201      	movs	r2, #1
    e94a:	4013      	ands	r3, r2
    e94c:	b2da      	uxtb	r2, r3
    e94e:	4b9c      	ldr	r3, [pc, #624]	; (ebc0 <restore_led_data+0x2bc>)
    e950:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    e952:	4b99      	ldr	r3, [pc, #612]	; (ebb8 <restore_led_data+0x2b4>)
    e954:	781b      	ldrb	r3, [r3, #0]
    e956:	119b      	asrs	r3, r3, #6
    e958:	b2db      	uxtb	r3, r3
    e95a:	2201      	movs	r2, #1
    e95c:	4013      	ands	r3, r2
    e95e:	b2da      	uxtb	r2, r3
    e960:	4b98      	ldr	r3, [pc, #608]	; (ebc4 <restore_led_data+0x2c0>)
    e962:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    e964:	4b94      	ldr	r3, [pc, #592]	; (ebb8 <restore_led_data+0x2b4>)
    e966:	781b      	ldrb	r3, [r3, #0]
    e968:	09db      	lsrs	r3, r3, #7
    e96a:	b2da      	uxtb	r2, r3
    e96c:	4b96      	ldr	r3, [pc, #600]	; (ebc8 <restore_led_data+0x2c4>)
    e96e:	701a      	strb	r2, [r3, #0]
		light_mode = MODE_COLOR_CYCLE;
    e970:	4b96      	ldr	r3, [pc, #600]	; (ebcc <restore_led_data+0x2c8>)
    e972:	2201      	movs	r2, #1
    e974:	701a      	strb	r2, [r3, #0]

		Static_RGB.LR = 0;
    e976:	4b96      	ldr	r3, [pc, #600]	; (ebd0 <restore_led_data+0x2cc>)
    e978:	2200      	movs	r2, #0
    e97a:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = 0xFFFF;
    e97c:	4b94      	ldr	r3, [pc, #592]	; (ebd0 <restore_led_data+0x2cc>)
    e97e:	2201      	movs	r2, #1
    e980:	4252      	negs	r2, r2
    e982:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = 0;
    e984:	4b92      	ldr	r3, [pc, #584]	; (ebd0 <restore_led_data+0x2cc>)
    e986:	2200      	movs	r2, #0
    e988:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = 0;
    e98a:	4b91      	ldr	r3, [pc, #580]	; (ebd0 <restore_led_data+0x2cc>)
    e98c:	2200      	movs	r2, #0
    e98e:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = 0;
    e990:	4b8f      	ldr	r3, [pc, #572]	; (ebd0 <restore_led_data+0x2cc>)
    e992:	2200      	movs	r2, #0
    e994:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = 0xFFFF;
    e996:	4b8e      	ldr	r3, [pc, #568]	; (ebd0 <restore_led_data+0x2cc>)
    e998:	2201      	movs	r2, #1
    e99a:	4252      	negs	r2, r2
    e99c:	815a      	strh	r2, [r3, #10]

		
		uint8_t default_ColorBase[9] = {0,1,2,7,1,7,9,10,1};
    e99e:	2360      	movs	r3, #96	; 0x60
    e9a0:	18fb      	adds	r3, r7, r3
    e9a2:	4a8c      	ldr	r2, [pc, #560]	; (ebd4 <restore_led_data+0x2d0>)
    e9a4:	ca03      	ldmia	r2!, {r0, r1}
    e9a6:	c303      	stmia	r3!, {r0, r1}
    e9a8:	7812      	ldrb	r2, [r2, #0]
    e9aa:	701a      	strb	r2, [r3, #0]
		uint8_t default_BrightBase[9] = {255,0,0,0,3,3,0,0,2};
    e9ac:	2354      	movs	r3, #84	; 0x54
    e9ae:	18fb      	adds	r3, r7, r3
    e9b0:	4a89      	ldr	r2, [pc, #548]	; (ebd8 <restore_led_data+0x2d4>)
    e9b2:	ca03      	ldmia	r2!, {r0, r1}
    e9b4:	c303      	stmia	r3!, {r0, r1}
    e9b6:	7812      	ldrb	r2, [r2, #0]
    e9b8:	701a      	strb	r2, [r3, #0]
		uint8_t default_RateBase[9] = {255,0,255,0,0,255,0,0,3};
    e9ba:	2348      	movs	r3, #72	; 0x48
    e9bc:	18fb      	adds	r3, r7, r3
    e9be:	4a87      	ldr	r2, [pc, #540]	; (ebdc <restore_led_data+0x2d8>)
    e9c0:	ca03      	ldmia	r2!, {r0, r1}
    e9c2:	c303      	stmia	r3!, {r0, r1}
    e9c4:	7812      	ldrb	r2, [r2, #0]
    e9c6:	701a      	strb	r2, [r3, #0]
		float default_RateSens[9] = {0,0.75,0,0.5,0.5,0,0.5,0.5,0.5};
    e9c8:	003b      	movs	r3, r7
    e9ca:	4a85      	ldr	r2, [pc, #532]	; (ebe0 <restore_led_data+0x2dc>)
    e9cc:	ca13      	ldmia	r2!, {r0, r1, r4}
    e9ce:	c313      	stmia	r3!, {r0, r1, r4}
    e9d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    e9d2:	c313      	stmia	r3!, {r0, r1, r4}
    e9d4:	ca13      	ldmia	r2!, {r0, r1, r4}
    e9d6:	c313      	stmia	r3!, {r0, r1, r4}
		float default_Brightness[9] = {0,0.25,0.5,0.5,0.5,0.5,0.5,0.5,0.5};
    e9d8:	2324      	movs	r3, #36	; 0x24
    e9da:	18fb      	adds	r3, r7, r3
    e9dc:	4a81      	ldr	r2, [pc, #516]	; (ebe4 <restore_led_data+0x2e0>)
    e9de:	ca13      	ldmia	r2!, {r0, r1, r4}
    e9e0:	c313      	stmia	r3!, {r0, r1, r4}
    e9e2:	ca13      	ldmia	r2!, {r0, r1, r4}
    e9e4:	c313      	stmia	r3!, {r0, r1, r4}
    e9e6:	ca13      	ldmia	r2!, {r0, r1, r4}
    e9e8:	c313      	stmia	r3!, {r0, r1, r4}

		for(int i = 0; i < 9; i++){
    e9ea:	2300      	movs	r3, #0
    e9ec:	677b      	str	r3, [r7, #116]	; 0x74
    e9ee:	e031      	b.n	ea54 <restore_led_data+0x150>
			ColorBase[i] = default_ColorBase[i];
    e9f0:	2360      	movs	r3, #96	; 0x60
    e9f2:	18fa      	adds	r2, r7, r3
    e9f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e9f6:	18d3      	adds	r3, r2, r3
    e9f8:	7819      	ldrb	r1, [r3, #0]
    e9fa:	4a7b      	ldr	r2, [pc, #492]	; (ebe8 <restore_led_data+0x2e4>)
    e9fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e9fe:	18d3      	adds	r3, r2, r3
    ea00:	1c0a      	adds	r2, r1, #0
    ea02:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = default_BrightBase[i];
    ea04:	2354      	movs	r3, #84	; 0x54
    ea06:	18fa      	adds	r2, r7, r3
    ea08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ea0a:	18d3      	adds	r3, r2, r3
    ea0c:	7819      	ldrb	r1, [r3, #0]
    ea0e:	4a77      	ldr	r2, [pc, #476]	; (ebec <restore_led_data+0x2e8>)
    ea10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ea12:	18d3      	adds	r3, r2, r3
    ea14:	1c0a      	adds	r2, r1, #0
    ea16:	701a      	strb	r2, [r3, #0]
			RateBase[i] = default_RateBase[i];
    ea18:	2348      	movs	r3, #72	; 0x48
    ea1a:	18fa      	adds	r2, r7, r3
    ea1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ea1e:	18d3      	adds	r3, r2, r3
    ea20:	7819      	ldrb	r1, [r3, #0]
    ea22:	4a73      	ldr	r2, [pc, #460]	; (ebf0 <restore_led_data+0x2ec>)
    ea24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ea26:	18d3      	adds	r3, r2, r3
    ea28:	1c0a      	adds	r2, r1, #0
    ea2a:	701a      	strb	r2, [r3, #0]
			RateSens[i] = default_RateSens[i];
    ea2c:	003b      	movs	r3, r7
    ea2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    ea30:	0092      	lsls	r2, r2, #2
    ea32:	58d1      	ldr	r1, [r2, r3]
    ea34:	4b6f      	ldr	r3, [pc, #444]	; (ebf4 <restore_led_data+0x2f0>)
    ea36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    ea38:	0092      	lsls	r2, r2, #2
    ea3a:	50d1      	str	r1, [r2, r3]
			Brightness[i] = default_Brightness[i];
    ea3c:	2324      	movs	r3, #36	; 0x24
    ea3e:	18fb      	adds	r3, r7, r3
    ea40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    ea42:	0092      	lsls	r2, r2, #2
    ea44:	58d1      	ldr	r1, [r2, r3]
    ea46:	4b6c      	ldr	r3, [pc, #432]	; (ebf8 <restore_led_data+0x2f4>)
    ea48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    ea4a:	0092      	lsls	r2, r2, #2
    ea4c:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 9; i++){
    ea4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ea50:	3301      	adds	r3, #1
    ea52:	677b      	str	r3, [r7, #116]	; 0x74
    ea54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ea56:	2b08      	cmp	r3, #8
    ea58:	ddca      	ble.n	e9f0 <restore_led_data+0xec>
		}

		Custom_RGB.LR = 0;
    ea5a:	4b68      	ldr	r3, [pc, #416]	; (ebfc <restore_led_data+0x2f8>)
    ea5c:	2200      	movs	r2, #0
    ea5e:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = 0;
    ea60:	4b66      	ldr	r3, [pc, #408]	; (ebfc <restore_led_data+0x2f8>)
    ea62:	2200      	movs	r2, #0
    ea64:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = 0xFFFF;
    ea66:	4b65      	ldr	r3, [pc, #404]	; (ebfc <restore_led_data+0x2f8>)
    ea68:	2201      	movs	r2, #1
    ea6a:	4252      	negs	r2, r2
    ea6c:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = 0;
    ea6e:	4b63      	ldr	r3, [pc, #396]	; (ebfc <restore_led_data+0x2f8>)
    ea70:	2200      	movs	r2, #0
    ea72:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = 0xFFFF;
    ea74:	4b61      	ldr	r3, [pc, #388]	; (ebfc <restore_led_data+0x2f8>)
    ea76:	2201      	movs	r2, #1
    ea78:	4252      	negs	r2, r2
    ea7a:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = 0;
    ea7c:	4b5f      	ldr	r3, [pc, #380]	; (ebfc <restore_led_data+0x2f8>)
    ea7e:	2200      	movs	r2, #0
    ea80:	815a      	strh	r2, [r3, #10]

		save_led_data();
    ea82:	4b5f      	ldr	r3, [pc, #380]	; (ec00 <restore_led_data+0x2fc>)
    ea84:	4798      	blx	r3
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    ea86:	e1ad      	b.n	ede4 <restore_led_data+0x4e0>
	}
	else{ // else restore the stored data
		SWITCHES = eeprom_data[0];
    ea88:	4b49      	ldr	r3, [pc, #292]	; (ebb0 <restore_led_data+0x2ac>)
    ea8a:	781a      	ldrb	r2, [r3, #0]
    ea8c:	4b4a      	ldr	r3, [pc, #296]	; (ebb8 <restore_led_data+0x2b4>)
    ea8e:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    ea90:	4b49      	ldr	r3, [pc, #292]	; (ebb8 <restore_led_data+0x2b4>)
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	111b      	asrs	r3, r3, #4
    ea96:	b2db      	uxtb	r3, r3
    ea98:	2201      	movs	r2, #1
    ea9a:	4013      	ands	r3, r2
    ea9c:	b2da      	uxtb	r2, r3
    ea9e:	4b47      	ldr	r3, [pc, #284]	; (ebbc <restore_led_data+0x2b8>)
    eaa0:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    eaa2:	4b45      	ldr	r3, [pc, #276]	; (ebb8 <restore_led_data+0x2b4>)
    eaa4:	781b      	ldrb	r3, [r3, #0]
    eaa6:	115b      	asrs	r3, r3, #5
    eaa8:	b2db      	uxtb	r3, r3
    eaaa:	2201      	movs	r2, #1
    eaac:	4013      	ands	r3, r2
    eaae:	b2da      	uxtb	r2, r3
    eab0:	4b43      	ldr	r3, [pc, #268]	; (ebc0 <restore_led_data+0x2bc>)
    eab2:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    eab4:	4b40      	ldr	r3, [pc, #256]	; (ebb8 <restore_led_data+0x2b4>)
    eab6:	781b      	ldrb	r3, [r3, #0]
    eab8:	119b      	asrs	r3, r3, #6
    eaba:	b2db      	uxtb	r3, r3
    eabc:	2201      	movs	r2, #1
    eabe:	4013      	ands	r3, r2
    eac0:	b2da      	uxtb	r2, r3
    eac2:	4b40      	ldr	r3, [pc, #256]	; (ebc4 <restore_led_data+0x2c0>)
    eac4:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    eac6:	4b3c      	ldr	r3, [pc, #240]	; (ebb8 <restore_led_data+0x2b4>)
    eac8:	781b      	ldrb	r3, [r3, #0]
    eaca:	09db      	lsrs	r3, r3, #7
    eacc:	b2da      	uxtb	r2, r3
    eace:	4b3e      	ldr	r3, [pc, #248]	; (ebc8 <restore_led_data+0x2c4>)
    ead0:	701a      	strb	r2, [r3, #0]
		light_mode = eeprom_data[1];
    ead2:	4b37      	ldr	r3, [pc, #220]	; (ebb0 <restore_led_data+0x2ac>)
    ead4:	785a      	ldrb	r2, [r3, #1]
    ead6:	4b3d      	ldr	r3, [pc, #244]	; (ebcc <restore_led_data+0x2c8>)
    ead8:	701a      	strb	r2, [r3, #0]
		Static_RGB.LR = eeprom_data[2];
    eada:	4b35      	ldr	r3, [pc, #212]	; (ebb0 <restore_led_data+0x2ac>)
    eadc:	789b      	ldrb	r3, [r3, #2]
    eade:	b29a      	uxth	r2, r3
    eae0:	4b3b      	ldr	r3, [pc, #236]	; (ebd0 <restore_led_data+0x2cc>)
    eae2:	801a      	strh	r2, [r3, #0]
		Static_RGB.LR = (Static_RGB.LR | (eeprom_data[3] << 8));
    eae4:	4b3a      	ldr	r3, [pc, #232]	; (ebd0 <restore_led_data+0x2cc>)
    eae6:	881b      	ldrh	r3, [r3, #0]
    eae8:	b21a      	sxth	r2, r3
    eaea:	4b31      	ldr	r3, [pc, #196]	; (ebb0 <restore_led_data+0x2ac>)
    eaec:	78db      	ldrb	r3, [r3, #3]
    eaee:	021b      	lsls	r3, r3, #8
    eaf0:	b21b      	sxth	r3, r3
    eaf2:	4313      	orrs	r3, r2
    eaf4:	b21b      	sxth	r3, r3
    eaf6:	b29a      	uxth	r2, r3
    eaf8:	4b35      	ldr	r3, [pc, #212]	; (ebd0 <restore_led_data+0x2cc>)
    eafa:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = eeprom_data[4];
    eafc:	4b2c      	ldr	r3, [pc, #176]	; (ebb0 <restore_led_data+0x2ac>)
    eafe:	791b      	ldrb	r3, [r3, #4]
    eb00:	b29a      	uxth	r2, r3
    eb02:	4b33      	ldr	r3, [pc, #204]	; (ebd0 <restore_led_data+0x2cc>)
    eb04:	805a      	strh	r2, [r3, #2]
		Static_RGB.LG = (Static_RGB.LG | (eeprom_data[5] << 8));
    eb06:	4b32      	ldr	r3, [pc, #200]	; (ebd0 <restore_led_data+0x2cc>)
    eb08:	885b      	ldrh	r3, [r3, #2]
    eb0a:	b21a      	sxth	r2, r3
    eb0c:	4b28      	ldr	r3, [pc, #160]	; (ebb0 <restore_led_data+0x2ac>)
    eb0e:	795b      	ldrb	r3, [r3, #5]
    eb10:	021b      	lsls	r3, r3, #8
    eb12:	b21b      	sxth	r3, r3
    eb14:	4313      	orrs	r3, r2
    eb16:	b21b      	sxth	r3, r3
    eb18:	b29a      	uxth	r2, r3
    eb1a:	4b2d      	ldr	r3, [pc, #180]	; (ebd0 <restore_led_data+0x2cc>)
    eb1c:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = eeprom_data[6];
    eb1e:	4b24      	ldr	r3, [pc, #144]	; (ebb0 <restore_led_data+0x2ac>)
    eb20:	799b      	ldrb	r3, [r3, #6]
    eb22:	b29a      	uxth	r2, r3
    eb24:	4b2a      	ldr	r3, [pc, #168]	; (ebd0 <restore_led_data+0x2cc>)
    eb26:	809a      	strh	r2, [r3, #4]
		Static_RGB.LB = (Static_RGB.LB | (eeprom_data[7] << 8));
    eb28:	4b29      	ldr	r3, [pc, #164]	; (ebd0 <restore_led_data+0x2cc>)
    eb2a:	889b      	ldrh	r3, [r3, #4]
    eb2c:	b21a      	sxth	r2, r3
    eb2e:	4b20      	ldr	r3, [pc, #128]	; (ebb0 <restore_led_data+0x2ac>)
    eb30:	79db      	ldrb	r3, [r3, #7]
    eb32:	021b      	lsls	r3, r3, #8
    eb34:	b21b      	sxth	r3, r3
    eb36:	4313      	orrs	r3, r2
    eb38:	b21b      	sxth	r3, r3
    eb3a:	b29a      	uxth	r2, r3
    eb3c:	4b24      	ldr	r3, [pc, #144]	; (ebd0 <restore_led_data+0x2cc>)
    eb3e:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = eeprom_data[8];
    eb40:	4b1b      	ldr	r3, [pc, #108]	; (ebb0 <restore_led_data+0x2ac>)
    eb42:	7a1b      	ldrb	r3, [r3, #8]
    eb44:	b29a      	uxth	r2, r3
    eb46:	4b22      	ldr	r3, [pc, #136]	; (ebd0 <restore_led_data+0x2cc>)
    eb48:	80da      	strh	r2, [r3, #6]
		Static_RGB.RR = (Static_RGB.RR | (eeprom_data[9] << 8));
    eb4a:	4b21      	ldr	r3, [pc, #132]	; (ebd0 <restore_led_data+0x2cc>)
    eb4c:	88db      	ldrh	r3, [r3, #6]
    eb4e:	b21a      	sxth	r2, r3
    eb50:	4b17      	ldr	r3, [pc, #92]	; (ebb0 <restore_led_data+0x2ac>)
    eb52:	7a5b      	ldrb	r3, [r3, #9]
    eb54:	021b      	lsls	r3, r3, #8
    eb56:	b21b      	sxth	r3, r3
    eb58:	4313      	orrs	r3, r2
    eb5a:	b21b      	sxth	r3, r3
    eb5c:	b29a      	uxth	r2, r3
    eb5e:	4b1c      	ldr	r3, [pc, #112]	; (ebd0 <restore_led_data+0x2cc>)
    eb60:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = eeprom_data[10];
    eb62:	4b13      	ldr	r3, [pc, #76]	; (ebb0 <restore_led_data+0x2ac>)
    eb64:	7a9b      	ldrb	r3, [r3, #10]
    eb66:	b29a      	uxth	r2, r3
    eb68:	4b19      	ldr	r3, [pc, #100]	; (ebd0 <restore_led_data+0x2cc>)
    eb6a:	811a      	strh	r2, [r3, #8]
		Static_RGB.RG = (Static_RGB.RG | (eeprom_data[11] << 8));
    eb6c:	4b18      	ldr	r3, [pc, #96]	; (ebd0 <restore_led_data+0x2cc>)
    eb6e:	891b      	ldrh	r3, [r3, #8]
    eb70:	b21a      	sxth	r2, r3
    eb72:	4b0f      	ldr	r3, [pc, #60]	; (ebb0 <restore_led_data+0x2ac>)
    eb74:	7adb      	ldrb	r3, [r3, #11]
    eb76:	021b      	lsls	r3, r3, #8
    eb78:	b21b      	sxth	r3, r3
    eb7a:	4313      	orrs	r3, r2
    eb7c:	b21b      	sxth	r3, r3
    eb7e:	b29a      	uxth	r2, r3
    eb80:	4b13      	ldr	r3, [pc, #76]	; (ebd0 <restore_led_data+0x2cc>)
    eb82:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = eeprom_data[12];
    eb84:	4b0a      	ldr	r3, [pc, #40]	; (ebb0 <restore_led_data+0x2ac>)
    eb86:	7b1b      	ldrb	r3, [r3, #12]
    eb88:	b29a      	uxth	r2, r3
    eb8a:	4b11      	ldr	r3, [pc, #68]	; (ebd0 <restore_led_data+0x2cc>)
    eb8c:	815a      	strh	r2, [r3, #10]
		Static_RGB.RB = (Static_RGB.RB | (eeprom_data[13] << 8));
    eb8e:	4b10      	ldr	r3, [pc, #64]	; (ebd0 <restore_led_data+0x2cc>)
    eb90:	895b      	ldrh	r3, [r3, #10]
    eb92:	b21a      	sxth	r2, r3
    eb94:	4b06      	ldr	r3, [pc, #24]	; (ebb0 <restore_led_data+0x2ac>)
    eb96:	7b5b      	ldrb	r3, [r3, #13]
    eb98:	021b      	lsls	r3, r3, #8
    eb9a:	b21b      	sxth	r3, r3
    eb9c:	4313      	orrs	r3, r2
    eb9e:	b21b      	sxth	r3, r3
    eba0:	b29a      	uxth	r2, r3
    eba2:	4b0b      	ldr	r3, [pc, #44]	; (ebd0 <restore_led_data+0x2cc>)
    eba4:	815a      	strh	r2, [r3, #10]
		int dataOffset = 14;
    eba6:	230e      	movs	r3, #14
    eba8:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < 8; i++){
    ebaa:	2300      	movs	r3, #0
    ebac:	673b      	str	r3, [r7, #112]	; 0x70
    ebae:	e083      	b.n	ecb8 <restore_led_data+0x3b4>
    ebb0:	200009e0 	.word	0x200009e0
    ebb4:	00008939 	.word	0x00008939
    ebb8:	20000325 	.word	0x20000325
    ebbc:	200000a2 	.word	0x200000a2
    ebc0:	20000322 	.word	0x20000322
    ebc4:	20000323 	.word	0x20000323
    ebc8:	20000324 	.word	0x20000324
    ebcc:	2000001b 	.word	0x2000001b
    ebd0:	2000001c 	.word	0x2000001c
    ebd4:	0001765c 	.word	0x0001765c
    ebd8:	00017668 	.word	0x00017668
    ebdc:	00017674 	.word	0x00017674
    ebe0:	00017680 	.word	0x00017680
    ebe4:	000176a4 	.word	0x000176a4
    ebe8:	20000070 	.word	0x20000070
    ebec:	2000007c 	.word	0x2000007c
    ebf0:	20000088 	.word	0x20000088
    ebf4:	20000028 	.word	0x20000028
    ebf8:	2000004c 	.word	0x2000004c
    ebfc:	20000094 	.word	0x20000094
    ec00:	0000e629 	.word	0x0000e629
			ColorBase[i] = eeprom_data[dataOffset + (i*5)];
    ec04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ec06:	0013      	movs	r3, r2
    ec08:	009b      	lsls	r3, r3, #2
    ec0a:	189a      	adds	r2, r3, r2
    ec0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ec0e:	18d3      	adds	r3, r2, r3
    ec10:	4a76      	ldr	r2, [pc, #472]	; (edec <restore_led_data+0x4e8>)
    ec12:	5cd1      	ldrb	r1, [r2, r3]
    ec14:	4a76      	ldr	r2, [pc, #472]	; (edf0 <restore_led_data+0x4ec>)
    ec16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ec18:	18d3      	adds	r3, r2, r3
    ec1a:	1c0a      	adds	r2, r1, #0
    ec1c:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = eeprom_data[dataOffset + (i*5) + 1];
    ec1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ec20:	0013      	movs	r3, r2
    ec22:	009b      	lsls	r3, r3, #2
    ec24:	189a      	adds	r2, r3, r2
    ec26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ec28:	18d3      	adds	r3, r2, r3
    ec2a:	3301      	adds	r3, #1
    ec2c:	4a6f      	ldr	r2, [pc, #444]	; (edec <restore_led_data+0x4e8>)
    ec2e:	5cd1      	ldrb	r1, [r2, r3]
    ec30:	4a70      	ldr	r2, [pc, #448]	; (edf4 <restore_led_data+0x4f0>)
    ec32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ec34:	18d3      	adds	r3, r2, r3
    ec36:	1c0a      	adds	r2, r1, #0
    ec38:	701a      	strb	r2, [r3, #0]
			RateBase[i] = eeprom_data[dataOffset + (i*5) + 2];
    ec3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ec3c:	0013      	movs	r3, r2
    ec3e:	009b      	lsls	r3, r3, #2
    ec40:	189a      	adds	r2, r3, r2
    ec42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ec44:	18d3      	adds	r3, r2, r3
    ec46:	3302      	adds	r3, #2
    ec48:	4a68      	ldr	r2, [pc, #416]	; (edec <restore_led_data+0x4e8>)
    ec4a:	5cd1      	ldrb	r1, [r2, r3]
    ec4c:	4a6a      	ldr	r2, [pc, #424]	; (edf8 <restore_led_data+0x4f4>)
    ec4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ec50:	18d3      	adds	r3, r2, r3
    ec52:	1c0a      	adds	r2, r1, #0
    ec54:	701a      	strb	r2, [r3, #0]
			RateSens[i] = ((float)eeprom_data[dataOffset + (i*5) + 3])/100;
    ec56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ec58:	0013      	movs	r3, r2
    ec5a:	009b      	lsls	r3, r3, #2
    ec5c:	189a      	adds	r2, r3, r2
    ec5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ec60:	18d3      	adds	r3, r2, r3
    ec62:	3303      	adds	r3, #3
    ec64:	4a61      	ldr	r2, [pc, #388]	; (edec <restore_led_data+0x4e8>)
    ec66:	5cd2      	ldrb	r2, [r2, r3]
    ec68:	4b64      	ldr	r3, [pc, #400]	; (edfc <restore_led_data+0x4f8>)
    ec6a:	0010      	movs	r0, r2
    ec6c:	4798      	blx	r3
    ec6e:	1c02      	adds	r2, r0, #0
    ec70:	4b63      	ldr	r3, [pc, #396]	; (ee00 <restore_led_data+0x4fc>)
    ec72:	4964      	ldr	r1, [pc, #400]	; (ee04 <restore_led_data+0x500>)
    ec74:	1c10      	adds	r0, r2, #0
    ec76:	4798      	blx	r3
    ec78:	1c03      	adds	r3, r0, #0
    ec7a:	1c19      	adds	r1, r3, #0
    ec7c:	4b62      	ldr	r3, [pc, #392]	; (ee08 <restore_led_data+0x504>)
    ec7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ec80:	0092      	lsls	r2, r2, #2
    ec82:	50d1      	str	r1, [r2, r3]
			Brightness[i] = ((float)eeprom_data[dataOffset + (i*5) + 4])/100;
    ec84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ec86:	0013      	movs	r3, r2
    ec88:	009b      	lsls	r3, r3, #2
    ec8a:	189a      	adds	r2, r3, r2
    ec8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ec8e:	18d3      	adds	r3, r2, r3
    ec90:	3304      	adds	r3, #4
    ec92:	4a56      	ldr	r2, [pc, #344]	; (edec <restore_led_data+0x4e8>)
    ec94:	5cd2      	ldrb	r2, [r2, r3]
    ec96:	4b59      	ldr	r3, [pc, #356]	; (edfc <restore_led_data+0x4f8>)
    ec98:	0010      	movs	r0, r2
    ec9a:	4798      	blx	r3
    ec9c:	1c02      	adds	r2, r0, #0
    ec9e:	4b58      	ldr	r3, [pc, #352]	; (ee00 <restore_led_data+0x4fc>)
    eca0:	4958      	ldr	r1, [pc, #352]	; (ee04 <restore_led_data+0x500>)
    eca2:	1c10      	adds	r0, r2, #0
    eca4:	4798      	blx	r3
    eca6:	1c03      	adds	r3, r0, #0
    eca8:	1c19      	adds	r1, r3, #0
    ecaa:	4b58      	ldr	r3, [pc, #352]	; (ee0c <restore_led_data+0x508>)
    ecac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    ecae:	0092      	lsls	r2, r2, #2
    ecb0:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 8; i++){
    ecb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ecb4:	3301      	adds	r3, #1
    ecb6:	673b      	str	r3, [r7, #112]	; 0x70
    ecb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ecba:	2b07      	cmp	r3, #7
    ecbc:	dda2      	ble.n	ec04 <restore_led_data+0x300>
		}

		eeprom_emulator_read_page(1, eeprom_data);
    ecbe:	4b4b      	ldr	r3, [pc, #300]	; (edec <restore_led_data+0x4e8>)
    ecc0:	0019      	movs	r1, r3
    ecc2:	2001      	movs	r0, #1
    ecc4:	4b52      	ldr	r3, [pc, #328]	; (ee10 <restore_led_data+0x50c>)
    ecc6:	4798      	blx	r3

		ColorBase[8] = eeprom_data[0];
    ecc8:	4b48      	ldr	r3, [pc, #288]	; (edec <restore_led_data+0x4e8>)
    ecca:	781a      	ldrb	r2, [r3, #0]
    eccc:	4b48      	ldr	r3, [pc, #288]	; (edf0 <restore_led_data+0x4ec>)
    ecce:	721a      	strb	r2, [r3, #8]
		BrightBase[8] = eeprom_data[1];
    ecd0:	4b46      	ldr	r3, [pc, #280]	; (edec <restore_led_data+0x4e8>)
    ecd2:	785a      	ldrb	r2, [r3, #1]
    ecd4:	4b47      	ldr	r3, [pc, #284]	; (edf4 <restore_led_data+0x4f0>)
    ecd6:	721a      	strb	r2, [r3, #8]
		RateBase[8] = eeprom_data[2];
    ecd8:	4b44      	ldr	r3, [pc, #272]	; (edec <restore_led_data+0x4e8>)
    ecda:	789a      	ldrb	r2, [r3, #2]
    ecdc:	4b46      	ldr	r3, [pc, #280]	; (edf8 <restore_led_data+0x4f4>)
    ecde:	721a      	strb	r2, [r3, #8]
		RateSens[8] = ((float)eeprom_data[3])/100;
    ece0:	4b42      	ldr	r3, [pc, #264]	; (edec <restore_led_data+0x4e8>)
    ece2:	78da      	ldrb	r2, [r3, #3]
    ece4:	4b45      	ldr	r3, [pc, #276]	; (edfc <restore_led_data+0x4f8>)
    ece6:	0010      	movs	r0, r2
    ece8:	4798      	blx	r3
    ecea:	1c02      	adds	r2, r0, #0
    ecec:	4b44      	ldr	r3, [pc, #272]	; (ee00 <restore_led_data+0x4fc>)
    ecee:	4945      	ldr	r1, [pc, #276]	; (ee04 <restore_led_data+0x500>)
    ecf0:	1c10      	adds	r0, r2, #0
    ecf2:	4798      	blx	r3
    ecf4:	1c03      	adds	r3, r0, #0
    ecf6:	1c1a      	adds	r2, r3, #0
    ecf8:	4b43      	ldr	r3, [pc, #268]	; (ee08 <restore_led_data+0x504>)
    ecfa:	621a      	str	r2, [r3, #32]
		Brightness[8] = ((float)eeprom_data[4])/100;
    ecfc:	4b3b      	ldr	r3, [pc, #236]	; (edec <restore_led_data+0x4e8>)
    ecfe:	791a      	ldrb	r2, [r3, #4]
    ed00:	4b3e      	ldr	r3, [pc, #248]	; (edfc <restore_led_data+0x4f8>)
    ed02:	0010      	movs	r0, r2
    ed04:	4798      	blx	r3
    ed06:	1c02      	adds	r2, r0, #0
    ed08:	4b3d      	ldr	r3, [pc, #244]	; (ee00 <restore_led_data+0x4fc>)
    ed0a:	493e      	ldr	r1, [pc, #248]	; (ee04 <restore_led_data+0x500>)
    ed0c:	1c10      	adds	r0, r2, #0
    ed0e:	4798      	blx	r3
    ed10:	1c03      	adds	r3, r0, #0
    ed12:	1c1a      	adds	r2, r3, #0
    ed14:	4b3d      	ldr	r3, [pc, #244]	; (ee0c <restore_led_data+0x508>)
    ed16:	621a      	str	r2, [r3, #32]
		Custom_RGB.LR = eeprom_data[5];
    ed18:	4b34      	ldr	r3, [pc, #208]	; (edec <restore_led_data+0x4e8>)
    ed1a:	795b      	ldrb	r3, [r3, #5]
    ed1c:	b29a      	uxth	r2, r3
    ed1e:	4b3d      	ldr	r3, [pc, #244]	; (ee14 <restore_led_data+0x510>)
    ed20:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LR = (Custom_RGB.LR | (eeprom_data[6] << 8));
    ed22:	4b3c      	ldr	r3, [pc, #240]	; (ee14 <restore_led_data+0x510>)
    ed24:	881b      	ldrh	r3, [r3, #0]
    ed26:	b21a      	sxth	r2, r3
    ed28:	4b30      	ldr	r3, [pc, #192]	; (edec <restore_led_data+0x4e8>)
    ed2a:	799b      	ldrb	r3, [r3, #6]
    ed2c:	021b      	lsls	r3, r3, #8
    ed2e:	b21b      	sxth	r3, r3
    ed30:	4313      	orrs	r3, r2
    ed32:	b21b      	sxth	r3, r3
    ed34:	b29a      	uxth	r2, r3
    ed36:	4b37      	ldr	r3, [pc, #220]	; (ee14 <restore_led_data+0x510>)
    ed38:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = eeprom_data[7];
    ed3a:	4b2c      	ldr	r3, [pc, #176]	; (edec <restore_led_data+0x4e8>)
    ed3c:	79db      	ldrb	r3, [r3, #7]
    ed3e:	b29a      	uxth	r2, r3
    ed40:	4b34      	ldr	r3, [pc, #208]	; (ee14 <restore_led_data+0x510>)
    ed42:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LG = (Custom_RGB.LG | (eeprom_data[8] << 8));
    ed44:	4b33      	ldr	r3, [pc, #204]	; (ee14 <restore_led_data+0x510>)
    ed46:	885b      	ldrh	r3, [r3, #2]
    ed48:	b21a      	sxth	r2, r3
    ed4a:	4b28      	ldr	r3, [pc, #160]	; (edec <restore_led_data+0x4e8>)
    ed4c:	7a1b      	ldrb	r3, [r3, #8]
    ed4e:	021b      	lsls	r3, r3, #8
    ed50:	b21b      	sxth	r3, r3
    ed52:	4313      	orrs	r3, r2
    ed54:	b21b      	sxth	r3, r3
    ed56:	b29a      	uxth	r2, r3
    ed58:	4b2e      	ldr	r3, [pc, #184]	; (ee14 <restore_led_data+0x510>)
    ed5a:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = eeprom_data[9];
    ed5c:	4b23      	ldr	r3, [pc, #140]	; (edec <restore_led_data+0x4e8>)
    ed5e:	7a5b      	ldrb	r3, [r3, #9]
    ed60:	b29a      	uxth	r2, r3
    ed62:	4b2c      	ldr	r3, [pc, #176]	; (ee14 <restore_led_data+0x510>)
    ed64:	809a      	strh	r2, [r3, #4]
		Custom_RGB.LB = (Custom_RGB.LB | (eeprom_data[10] << 8));
    ed66:	4b2b      	ldr	r3, [pc, #172]	; (ee14 <restore_led_data+0x510>)
    ed68:	889b      	ldrh	r3, [r3, #4]
    ed6a:	b21a      	sxth	r2, r3
    ed6c:	4b1f      	ldr	r3, [pc, #124]	; (edec <restore_led_data+0x4e8>)
    ed6e:	7a9b      	ldrb	r3, [r3, #10]
    ed70:	021b      	lsls	r3, r3, #8
    ed72:	b21b      	sxth	r3, r3
    ed74:	4313      	orrs	r3, r2
    ed76:	b21b      	sxth	r3, r3
    ed78:	b29a      	uxth	r2, r3
    ed7a:	4b26      	ldr	r3, [pc, #152]	; (ee14 <restore_led_data+0x510>)
    ed7c:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = eeprom_data[11];
    ed7e:	4b1b      	ldr	r3, [pc, #108]	; (edec <restore_led_data+0x4e8>)
    ed80:	7adb      	ldrb	r3, [r3, #11]
    ed82:	b29a      	uxth	r2, r3
    ed84:	4b23      	ldr	r3, [pc, #140]	; (ee14 <restore_led_data+0x510>)
    ed86:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RR = (Custom_RGB.RR | (eeprom_data[12] << 8));
    ed88:	4b22      	ldr	r3, [pc, #136]	; (ee14 <restore_led_data+0x510>)
    ed8a:	88db      	ldrh	r3, [r3, #6]
    ed8c:	b21a      	sxth	r2, r3
    ed8e:	4b17      	ldr	r3, [pc, #92]	; (edec <restore_led_data+0x4e8>)
    ed90:	7b1b      	ldrb	r3, [r3, #12]
    ed92:	021b      	lsls	r3, r3, #8
    ed94:	b21b      	sxth	r3, r3
    ed96:	4313      	orrs	r3, r2
    ed98:	b21b      	sxth	r3, r3
    ed9a:	b29a      	uxth	r2, r3
    ed9c:	4b1d      	ldr	r3, [pc, #116]	; (ee14 <restore_led_data+0x510>)
    ed9e:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = eeprom_data[13];
    eda0:	4b12      	ldr	r3, [pc, #72]	; (edec <restore_led_data+0x4e8>)
    eda2:	7b5b      	ldrb	r3, [r3, #13]
    eda4:	b29a      	uxth	r2, r3
    eda6:	4b1b      	ldr	r3, [pc, #108]	; (ee14 <restore_led_data+0x510>)
    eda8:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RG = (Custom_RGB.RG | (eeprom_data[14] << 8));
    edaa:	4b1a      	ldr	r3, [pc, #104]	; (ee14 <restore_led_data+0x510>)
    edac:	891b      	ldrh	r3, [r3, #8]
    edae:	b21a      	sxth	r2, r3
    edb0:	4b0e      	ldr	r3, [pc, #56]	; (edec <restore_led_data+0x4e8>)
    edb2:	7b9b      	ldrb	r3, [r3, #14]
    edb4:	021b      	lsls	r3, r3, #8
    edb6:	b21b      	sxth	r3, r3
    edb8:	4313      	orrs	r3, r2
    edba:	b21b      	sxth	r3, r3
    edbc:	b29a      	uxth	r2, r3
    edbe:	4b15      	ldr	r3, [pc, #84]	; (ee14 <restore_led_data+0x510>)
    edc0:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = eeprom_data[15];
    edc2:	4b0a      	ldr	r3, [pc, #40]	; (edec <restore_led_data+0x4e8>)
    edc4:	7bdb      	ldrb	r3, [r3, #15]
    edc6:	b29a      	uxth	r2, r3
    edc8:	4b12      	ldr	r3, [pc, #72]	; (ee14 <restore_led_data+0x510>)
    edca:	815a      	strh	r2, [r3, #10]
		Custom_RGB.RB = (Custom_RGB.RB | (eeprom_data[16] << 8));
    edcc:	4b11      	ldr	r3, [pc, #68]	; (ee14 <restore_led_data+0x510>)
    edce:	895b      	ldrh	r3, [r3, #10]
    edd0:	b21a      	sxth	r2, r3
    edd2:	4b06      	ldr	r3, [pc, #24]	; (edec <restore_led_data+0x4e8>)
    edd4:	7c1b      	ldrb	r3, [r3, #16]
    edd6:	021b      	lsls	r3, r3, #8
    edd8:	b21b      	sxth	r3, r3
    edda:	4313      	orrs	r3, r2
    eddc:	b21b      	sxth	r3, r3
    edde:	b29a      	uxth	r2, r3
    ede0:	4b0c      	ldr	r3, [pc, #48]	; (ee14 <restore_led_data+0x510>)
    ede2:	815a      	strh	r2, [r3, #10]
	}
}
    ede4:	46c0      	nop			; (mov r8, r8)
    ede6:	46bd      	mov	sp, r7
    ede8:	b01f      	add	sp, #124	; 0x7c
    edea:	bd90      	pop	{r4, r7, pc}
    edec:	200009e0 	.word	0x200009e0
    edf0:	20000070 	.word	0x20000070
    edf4:	2000007c 	.word	0x2000007c
    edf8:	20000088 	.word	0x20000088
    edfc:	000152f9 	.word	0x000152f9
    ee00:	000148c1 	.word	0x000148c1
    ee04:	42c80000 	.word	0x42c80000
    ee08:	20000028 	.word	0x20000028
    ee0c:	2000004c 	.word	0x2000004c
    ee10:	00008939 	.word	0x00008939
    ee14:	20000094 	.word	0x20000094

0000ee18 <save_cal_data>:

void save_cal_data()
{
    ee18:	b580      	push	{r7, lr}
    ee1a:	b082      	sub	sp, #8
    ee1c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    ee1e:	2300      	movs	r3, #0
    ee20:	607b      	str	r3, [r7, #4]
    ee22:	e005      	b.n	ee30 <save_cal_data+0x18>
		eeprom_data[0] = 0;
    ee24:	4b44      	ldr	r3, [pc, #272]	; (ef38 <save_cal_data+0x120>)
    ee26:	2200      	movs	r2, #0
    ee28:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    ee2a:	687b      	ldr	r3, [r7, #4]
    ee2c:	3301      	adds	r3, #1
    ee2e:	607b      	str	r3, [r7, #4]
    ee30:	687b      	ldr	r3, [r7, #4]
    ee32:	2b3b      	cmp	r3, #59	; 0x3b
    ee34:	ddf6      	ble.n	ee24 <save_cal_data+0xc>
	}

	eeprom_data[0] = ((gBiasRaw[0]) & 0xFF00) >> 8;
    ee36:	4b41      	ldr	r3, [pc, #260]	; (ef3c <save_cal_data+0x124>)
    ee38:	2200      	movs	r2, #0
    ee3a:	5e9b      	ldrsh	r3, [r3, r2]
    ee3c:	121b      	asrs	r3, r3, #8
    ee3e:	b2da      	uxtb	r2, r3
    ee40:	4b3d      	ldr	r3, [pc, #244]	; (ef38 <save_cal_data+0x120>)
    ee42:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ((gBiasRaw[0]) & 0xFF);
    ee44:	4b3d      	ldr	r3, [pc, #244]	; (ef3c <save_cal_data+0x124>)
    ee46:	2200      	movs	r2, #0
    ee48:	5e9b      	ldrsh	r3, [r3, r2]
    ee4a:	b2da      	uxtb	r2, r3
    ee4c:	4b3a      	ldr	r3, [pc, #232]	; (ef38 <save_cal_data+0x120>)
    ee4e:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = ((gBiasRaw[1]) & 0xFF00) >> 8;
    ee50:	4b3a      	ldr	r3, [pc, #232]	; (ef3c <save_cal_data+0x124>)
    ee52:	2202      	movs	r2, #2
    ee54:	5e9b      	ldrsh	r3, [r3, r2]
    ee56:	121b      	asrs	r3, r3, #8
    ee58:	b2da      	uxtb	r2, r3
    ee5a:	4b37      	ldr	r3, [pc, #220]	; (ef38 <save_cal_data+0x120>)
    ee5c:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = ((gBiasRaw[1]) & 0xFF);
    ee5e:	4b37      	ldr	r3, [pc, #220]	; (ef3c <save_cal_data+0x124>)
    ee60:	2202      	movs	r2, #2
    ee62:	5e9b      	ldrsh	r3, [r3, r2]
    ee64:	b2da      	uxtb	r2, r3
    ee66:	4b34      	ldr	r3, [pc, #208]	; (ef38 <save_cal_data+0x120>)
    ee68:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = ((gBiasRaw[2]) & 0xFF00) >> 8;
    ee6a:	4b34      	ldr	r3, [pc, #208]	; (ef3c <save_cal_data+0x124>)
    ee6c:	2204      	movs	r2, #4
    ee6e:	5e9b      	ldrsh	r3, [r3, r2]
    ee70:	121b      	asrs	r3, r3, #8
    ee72:	b2da      	uxtb	r2, r3
    ee74:	4b30      	ldr	r3, [pc, #192]	; (ef38 <save_cal_data+0x120>)
    ee76:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = ((gBiasRaw[2]) & 0xFF);
    ee78:	4b30      	ldr	r3, [pc, #192]	; (ef3c <save_cal_data+0x124>)
    ee7a:	2204      	movs	r2, #4
    ee7c:	5e9b      	ldrsh	r3, [r3, r2]
    ee7e:	b2da      	uxtb	r2, r3
    ee80:	4b2d      	ldr	r3, [pc, #180]	; (ef38 <save_cal_data+0x120>)
    ee82:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = ((aBiasRaw[0]) & 0xFF00) >> 8;
    ee84:	4b2e      	ldr	r3, [pc, #184]	; (ef40 <save_cal_data+0x128>)
    ee86:	2200      	movs	r2, #0
    ee88:	5e9b      	ldrsh	r3, [r3, r2]
    ee8a:	121b      	asrs	r3, r3, #8
    ee8c:	b2da      	uxtb	r2, r3
    ee8e:	4b2a      	ldr	r3, [pc, #168]	; (ef38 <save_cal_data+0x120>)
    ee90:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = ((aBiasRaw[0]) & 0xFF);
    ee92:	4b2b      	ldr	r3, [pc, #172]	; (ef40 <save_cal_data+0x128>)
    ee94:	2200      	movs	r2, #0
    ee96:	5e9b      	ldrsh	r3, [r3, r2]
    ee98:	b2da      	uxtb	r2, r3
    ee9a:	4b27      	ldr	r3, [pc, #156]	; (ef38 <save_cal_data+0x120>)
    ee9c:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = ((aBiasRaw[1]) & 0xFF00) >> 8;
    ee9e:	4b28      	ldr	r3, [pc, #160]	; (ef40 <save_cal_data+0x128>)
    eea0:	2202      	movs	r2, #2
    eea2:	5e9b      	ldrsh	r3, [r3, r2]
    eea4:	121b      	asrs	r3, r3, #8
    eea6:	b2da      	uxtb	r2, r3
    eea8:	4b23      	ldr	r3, [pc, #140]	; (ef38 <save_cal_data+0x120>)
    eeaa:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = ((aBiasRaw[1]) & 0xFF);
    eeac:	4b24      	ldr	r3, [pc, #144]	; (ef40 <save_cal_data+0x128>)
    eeae:	2202      	movs	r2, #2
    eeb0:	5e9b      	ldrsh	r3, [r3, r2]
    eeb2:	b2da      	uxtb	r2, r3
    eeb4:	4b20      	ldr	r3, [pc, #128]	; (ef38 <save_cal_data+0x120>)
    eeb6:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = ((aBiasRaw[2]) & 0xFF00) >> 8;
    eeb8:	4b21      	ldr	r3, [pc, #132]	; (ef40 <save_cal_data+0x128>)
    eeba:	2204      	movs	r2, #4
    eebc:	5e9b      	ldrsh	r3, [r3, r2]
    eebe:	121b      	asrs	r3, r3, #8
    eec0:	b2da      	uxtb	r2, r3
    eec2:	4b1d      	ldr	r3, [pc, #116]	; (ef38 <save_cal_data+0x120>)
    eec4:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = ((aBiasRaw[2]) & 0xFF);
    eec6:	4b1e      	ldr	r3, [pc, #120]	; (ef40 <save_cal_data+0x128>)
    eec8:	2204      	movs	r2, #4
    eeca:	5e9b      	ldrsh	r3, [r3, r2]
    eecc:	b2da      	uxtb	r2, r3
    eece:	4b1a      	ldr	r3, [pc, #104]	; (ef38 <save_cal_data+0x120>)
    eed0:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = ((mBiasRaw[0]) & 0xFF00) >> 8;
    eed2:	4b1c      	ldr	r3, [pc, #112]	; (ef44 <save_cal_data+0x12c>)
    eed4:	2200      	movs	r2, #0
    eed6:	5e9b      	ldrsh	r3, [r3, r2]
    eed8:	121b      	asrs	r3, r3, #8
    eeda:	b2da      	uxtb	r2, r3
    eedc:	4b16      	ldr	r3, [pc, #88]	; (ef38 <save_cal_data+0x120>)
    eede:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = ((mBiasRaw[0]) & 0xFF);
    eee0:	4b18      	ldr	r3, [pc, #96]	; (ef44 <save_cal_data+0x12c>)
    eee2:	2200      	movs	r2, #0
    eee4:	5e9b      	ldrsh	r3, [r3, r2]
    eee6:	b2da      	uxtb	r2, r3
    eee8:	4b13      	ldr	r3, [pc, #76]	; (ef38 <save_cal_data+0x120>)
    eeea:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = ((mBiasRaw[1]) & 0xFF00) >> 8;
    eeec:	4b15      	ldr	r3, [pc, #84]	; (ef44 <save_cal_data+0x12c>)
    eeee:	2202      	movs	r2, #2
    eef0:	5e9b      	ldrsh	r3, [r3, r2]
    eef2:	121b      	asrs	r3, r3, #8
    eef4:	b2da      	uxtb	r2, r3
    eef6:	4b10      	ldr	r3, [pc, #64]	; (ef38 <save_cal_data+0x120>)
    eef8:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = ((mBiasRaw[1]) & 0xFF);
    eefa:	4b12      	ldr	r3, [pc, #72]	; (ef44 <save_cal_data+0x12c>)
    eefc:	2202      	movs	r2, #2
    eefe:	5e9b      	ldrsh	r3, [r3, r2]
    ef00:	b2da      	uxtb	r2, r3
    ef02:	4b0d      	ldr	r3, [pc, #52]	; (ef38 <save_cal_data+0x120>)
    ef04:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = ((mBiasRaw[2]) & 0xFF00) >> 8;
    ef06:	4b0f      	ldr	r3, [pc, #60]	; (ef44 <save_cal_data+0x12c>)
    ef08:	2204      	movs	r2, #4
    ef0a:	5e9b      	ldrsh	r3, [r3, r2]
    ef0c:	121b      	asrs	r3, r3, #8
    ef0e:	b2da      	uxtb	r2, r3
    ef10:	4b09      	ldr	r3, [pc, #36]	; (ef38 <save_cal_data+0x120>)
    ef12:	741a      	strb	r2, [r3, #16]
	eeprom_data[17] = ((mBiasRaw[2]) & 0xFF);
    ef14:	4b0b      	ldr	r3, [pc, #44]	; (ef44 <save_cal_data+0x12c>)
    ef16:	2204      	movs	r2, #4
    ef18:	5e9b      	ldrsh	r3, [r3, r2]
    ef1a:	b2da      	uxtb	r2, r3
    ef1c:	4b06      	ldr	r3, [pc, #24]	; (ef38 <save_cal_data+0x120>)
    ef1e:	745a      	strb	r2, [r3, #17]

	//Write EEPROM data
	eeprom_emulator_write_page(2, eeprom_data);
    ef20:	4b05      	ldr	r3, [pc, #20]	; (ef38 <save_cal_data+0x120>)
    ef22:	0019      	movs	r1, r3
    ef24:	2002      	movs	r0, #2
    ef26:	4b08      	ldr	r3, [pc, #32]	; (ef48 <save_cal_data+0x130>)
    ef28:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    ef2a:	4b08      	ldr	r3, [pc, #32]	; (ef4c <save_cal_data+0x134>)
    ef2c:	4798      	blx	r3
}
    ef2e:	46c0      	nop			; (mov r8, r8)
    ef30:	46bd      	mov	sp, r7
    ef32:	b002      	add	sp, #8
    ef34:	bd80      	pop	{r7, pc}
    ef36:	46c0      	nop			; (mov r8, r8)
    ef38:	200009e0 	.word	0x200009e0
    ef3c:	20000c9c 	.word	0x20000c9c
    ef40:	20000ca4 	.word	0x20000ca4
    ef44:	20000498 	.word	0x20000498
    ef48:	0000882d 	.word	0x0000882d
    ef4c:	000089d5 	.word	0x000089d5

0000ef50 <restore_cal_data>:

void restore_cal_data(bool autoCal)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b084      	sub	sp, #16
    ef54:	af00      	add	r7, sp, #0
    ef56:	0002      	movs	r2, r0
    ef58:	1dfb      	adds	r3, r7, #7
    ef5a:	701a      	strb	r2, [r3, #0]
	eeprom_emulator_read_page(2, eeprom_data);
    ef5c:	4b63      	ldr	r3, [pc, #396]	; (f0ec <restore_cal_data+0x19c>)
    ef5e:	0019      	movs	r1, r3
    ef60:	2002      	movs	r0, #2
    ef62:	4b63      	ldr	r3, [pc, #396]	; (f0f0 <restore_cal_data+0x1a0>)
    ef64:	4798      	blx	r3
	int16_t temp = 0;
    ef66:	230e      	movs	r3, #14
    ef68:	18fb      	adds	r3, r7, r3
    ef6a:	2200      	movs	r2, #0
    ef6c:	801a      	strh	r2, [r3, #0]

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    ef6e:	4b5f      	ldr	r3, [pc, #380]	; (f0ec <restore_cal_data+0x19c>)
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	2bff      	cmp	r3, #255	; 0xff
    ef74:	d121      	bne.n	efba <restore_cal_data+0x6a>
    ef76:	4b5d      	ldr	r3, [pc, #372]	; (f0ec <restore_cal_data+0x19c>)
    ef78:	785b      	ldrb	r3, [r3, #1]
    ef7a:	2bff      	cmp	r3, #255	; 0xff
    ef7c:	d11d      	bne.n	efba <restore_cal_data+0x6a>
		gBiasRaw[0] = 0;
    ef7e:	4b5d      	ldr	r3, [pc, #372]	; (f0f4 <restore_cal_data+0x1a4>)
    ef80:	2200      	movs	r2, #0
    ef82:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = 0;
    ef84:	4b5b      	ldr	r3, [pc, #364]	; (f0f4 <restore_cal_data+0x1a4>)
    ef86:	2200      	movs	r2, #0
    ef88:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = 0;
    ef8a:	4b5a      	ldr	r3, [pc, #360]	; (f0f4 <restore_cal_data+0x1a4>)
    ef8c:	2200      	movs	r2, #0
    ef8e:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = 0;
    ef90:	4b59      	ldr	r3, [pc, #356]	; (f0f8 <restore_cal_data+0x1a8>)
    ef92:	2200      	movs	r2, #0
    ef94:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = 0;
    ef96:	4b58      	ldr	r3, [pc, #352]	; (f0f8 <restore_cal_data+0x1a8>)
    ef98:	2200      	movs	r2, #0
    ef9a:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = 0;
    ef9c:	4b56      	ldr	r3, [pc, #344]	; (f0f8 <restore_cal_data+0x1a8>)
    ef9e:	2200      	movs	r2, #0
    efa0:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = 0;
    efa2:	4b56      	ldr	r3, [pc, #344]	; (f0fc <restore_cal_data+0x1ac>)
    efa4:	2200      	movs	r2, #0
    efa6:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = 0;
    efa8:	4b54      	ldr	r3, [pc, #336]	; (f0fc <restore_cal_data+0x1ac>)
    efaa:	2200      	movs	r2, #0
    efac:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = 0;
    efae:	4b53      	ldr	r3, [pc, #332]	; (f0fc <restore_cal_data+0x1ac>)
    efb0:	2200      	movs	r2, #0
    efb2:	809a      	strh	r2, [r3, #4]

		save_cal_data();
    efb4:	4b52      	ldr	r3, [pc, #328]	; (f100 <restore_cal_data+0x1b0>)
    efb6:	4798      	blx	r3
    efb8:	e08f      	b.n	f0da <restore_cal_data+0x18a>
	}
	else{ // else restore the stored data
		gBiasRaw[0] = (temp | (eeprom_data[0] << 8) | eeprom_data[1]);
    efba:	4b4c      	ldr	r3, [pc, #304]	; (f0ec <restore_cal_data+0x19c>)
    efbc:	781b      	ldrb	r3, [r3, #0]
    efbe:	021b      	lsls	r3, r3, #8
    efc0:	b21a      	sxth	r2, r3
    efc2:	230e      	movs	r3, #14
    efc4:	18fb      	adds	r3, r7, r3
    efc6:	881b      	ldrh	r3, [r3, #0]
    efc8:	4313      	orrs	r3, r2
    efca:	b21a      	sxth	r2, r3
    efcc:	4b47      	ldr	r3, [pc, #284]	; (f0ec <restore_cal_data+0x19c>)
    efce:	785b      	ldrb	r3, [r3, #1]
    efd0:	b21b      	sxth	r3, r3
    efd2:	4313      	orrs	r3, r2
    efd4:	b21a      	sxth	r2, r3
    efd6:	4b47      	ldr	r3, [pc, #284]	; (f0f4 <restore_cal_data+0x1a4>)
    efd8:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = (temp | (eeprom_data[2] << 8) | eeprom_data[3]);
    efda:	4b44      	ldr	r3, [pc, #272]	; (f0ec <restore_cal_data+0x19c>)
    efdc:	789b      	ldrb	r3, [r3, #2]
    efde:	021b      	lsls	r3, r3, #8
    efe0:	b21a      	sxth	r2, r3
    efe2:	230e      	movs	r3, #14
    efe4:	18fb      	adds	r3, r7, r3
    efe6:	881b      	ldrh	r3, [r3, #0]
    efe8:	4313      	orrs	r3, r2
    efea:	b21a      	sxth	r2, r3
    efec:	4b3f      	ldr	r3, [pc, #252]	; (f0ec <restore_cal_data+0x19c>)
    efee:	78db      	ldrb	r3, [r3, #3]
    eff0:	b21b      	sxth	r3, r3
    eff2:	4313      	orrs	r3, r2
    eff4:	b21a      	sxth	r2, r3
    eff6:	4b3f      	ldr	r3, [pc, #252]	; (f0f4 <restore_cal_data+0x1a4>)
    eff8:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = (temp | (eeprom_data[4] << 8) | eeprom_data[5]);
    effa:	4b3c      	ldr	r3, [pc, #240]	; (f0ec <restore_cal_data+0x19c>)
    effc:	791b      	ldrb	r3, [r3, #4]
    effe:	021b      	lsls	r3, r3, #8
    f000:	b21a      	sxth	r2, r3
    f002:	230e      	movs	r3, #14
    f004:	18fb      	adds	r3, r7, r3
    f006:	881b      	ldrh	r3, [r3, #0]
    f008:	4313      	orrs	r3, r2
    f00a:	b21a      	sxth	r2, r3
    f00c:	4b37      	ldr	r3, [pc, #220]	; (f0ec <restore_cal_data+0x19c>)
    f00e:	795b      	ldrb	r3, [r3, #5]
    f010:	b21b      	sxth	r3, r3
    f012:	4313      	orrs	r3, r2
    f014:	b21a      	sxth	r2, r3
    f016:	4b37      	ldr	r3, [pc, #220]	; (f0f4 <restore_cal_data+0x1a4>)
    f018:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = (temp | (eeprom_data[6] << 8) | eeprom_data[7]);
    f01a:	4b34      	ldr	r3, [pc, #208]	; (f0ec <restore_cal_data+0x19c>)
    f01c:	799b      	ldrb	r3, [r3, #6]
    f01e:	021b      	lsls	r3, r3, #8
    f020:	b21a      	sxth	r2, r3
    f022:	230e      	movs	r3, #14
    f024:	18fb      	adds	r3, r7, r3
    f026:	881b      	ldrh	r3, [r3, #0]
    f028:	4313      	orrs	r3, r2
    f02a:	b21a      	sxth	r2, r3
    f02c:	4b2f      	ldr	r3, [pc, #188]	; (f0ec <restore_cal_data+0x19c>)
    f02e:	79db      	ldrb	r3, [r3, #7]
    f030:	b21b      	sxth	r3, r3
    f032:	4313      	orrs	r3, r2
    f034:	b21a      	sxth	r2, r3
    f036:	4b30      	ldr	r3, [pc, #192]	; (f0f8 <restore_cal_data+0x1a8>)
    f038:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = (temp | (eeprom_data[8] << 8) | eeprom_data[9]);
    f03a:	4b2c      	ldr	r3, [pc, #176]	; (f0ec <restore_cal_data+0x19c>)
    f03c:	7a1b      	ldrb	r3, [r3, #8]
    f03e:	021b      	lsls	r3, r3, #8
    f040:	b21a      	sxth	r2, r3
    f042:	230e      	movs	r3, #14
    f044:	18fb      	adds	r3, r7, r3
    f046:	881b      	ldrh	r3, [r3, #0]
    f048:	4313      	orrs	r3, r2
    f04a:	b21a      	sxth	r2, r3
    f04c:	4b27      	ldr	r3, [pc, #156]	; (f0ec <restore_cal_data+0x19c>)
    f04e:	7a5b      	ldrb	r3, [r3, #9]
    f050:	b21b      	sxth	r3, r3
    f052:	4313      	orrs	r3, r2
    f054:	b21a      	sxth	r2, r3
    f056:	4b28      	ldr	r3, [pc, #160]	; (f0f8 <restore_cal_data+0x1a8>)
    f058:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = (temp | (eeprom_data[10] << 8) | eeprom_data[11]);
    f05a:	4b24      	ldr	r3, [pc, #144]	; (f0ec <restore_cal_data+0x19c>)
    f05c:	7a9b      	ldrb	r3, [r3, #10]
    f05e:	021b      	lsls	r3, r3, #8
    f060:	b21a      	sxth	r2, r3
    f062:	230e      	movs	r3, #14
    f064:	18fb      	adds	r3, r7, r3
    f066:	881b      	ldrh	r3, [r3, #0]
    f068:	4313      	orrs	r3, r2
    f06a:	b21a      	sxth	r2, r3
    f06c:	4b1f      	ldr	r3, [pc, #124]	; (f0ec <restore_cal_data+0x19c>)
    f06e:	7adb      	ldrb	r3, [r3, #11]
    f070:	b21b      	sxth	r3, r3
    f072:	4313      	orrs	r3, r2
    f074:	b21a      	sxth	r2, r3
    f076:	4b20      	ldr	r3, [pc, #128]	; (f0f8 <restore_cal_data+0x1a8>)
    f078:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = (temp | (eeprom_data[12] << 8) | eeprom_data[13]);
    f07a:	4b1c      	ldr	r3, [pc, #112]	; (f0ec <restore_cal_data+0x19c>)
    f07c:	7b1b      	ldrb	r3, [r3, #12]
    f07e:	021b      	lsls	r3, r3, #8
    f080:	b21a      	sxth	r2, r3
    f082:	230e      	movs	r3, #14
    f084:	18fb      	adds	r3, r7, r3
    f086:	881b      	ldrh	r3, [r3, #0]
    f088:	4313      	orrs	r3, r2
    f08a:	b21a      	sxth	r2, r3
    f08c:	4b17      	ldr	r3, [pc, #92]	; (f0ec <restore_cal_data+0x19c>)
    f08e:	7b5b      	ldrb	r3, [r3, #13]
    f090:	b21b      	sxth	r3, r3
    f092:	4313      	orrs	r3, r2
    f094:	b21a      	sxth	r2, r3
    f096:	4b19      	ldr	r3, [pc, #100]	; (f0fc <restore_cal_data+0x1ac>)
    f098:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = (temp | (eeprom_data[14] << 8) | eeprom_data[15]);
    f09a:	4b14      	ldr	r3, [pc, #80]	; (f0ec <restore_cal_data+0x19c>)
    f09c:	7b9b      	ldrb	r3, [r3, #14]
    f09e:	021b      	lsls	r3, r3, #8
    f0a0:	b21a      	sxth	r2, r3
    f0a2:	230e      	movs	r3, #14
    f0a4:	18fb      	adds	r3, r7, r3
    f0a6:	881b      	ldrh	r3, [r3, #0]
    f0a8:	4313      	orrs	r3, r2
    f0aa:	b21a      	sxth	r2, r3
    f0ac:	4b0f      	ldr	r3, [pc, #60]	; (f0ec <restore_cal_data+0x19c>)
    f0ae:	7bdb      	ldrb	r3, [r3, #15]
    f0b0:	b21b      	sxth	r3, r3
    f0b2:	4313      	orrs	r3, r2
    f0b4:	b21a      	sxth	r2, r3
    f0b6:	4b11      	ldr	r3, [pc, #68]	; (f0fc <restore_cal_data+0x1ac>)
    f0b8:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = (temp | (eeprom_data[16] << 8) | eeprom_data[17]);
    f0ba:	4b0c      	ldr	r3, [pc, #48]	; (f0ec <restore_cal_data+0x19c>)
    f0bc:	7c1b      	ldrb	r3, [r3, #16]
    f0be:	021b      	lsls	r3, r3, #8
    f0c0:	b21a      	sxth	r2, r3
    f0c2:	230e      	movs	r3, #14
    f0c4:	18fb      	adds	r3, r7, r3
    f0c6:	881b      	ldrh	r3, [r3, #0]
    f0c8:	4313      	orrs	r3, r2
    f0ca:	b21a      	sxth	r2, r3
    f0cc:	4b07      	ldr	r3, [pc, #28]	; (f0ec <restore_cal_data+0x19c>)
    f0ce:	7c5b      	ldrb	r3, [r3, #17]
    f0d0:	b21b      	sxth	r3, r3
    f0d2:	4313      	orrs	r3, r2
    f0d4:	b21a      	sxth	r2, r3
    f0d6:	4b09      	ldr	r3, [pc, #36]	; (f0fc <restore_cal_data+0x1ac>)
    f0d8:	809a      	strh	r2, [r3, #4]
	}
	
	_autoCalc = autoCal;
    f0da:	4b0a      	ldr	r3, [pc, #40]	; (f104 <restore_cal_data+0x1b4>)
    f0dc:	1dfa      	adds	r2, r7, #7
    f0de:	7812      	ldrb	r2, [r2, #0]
    f0e0:	701a      	strb	r2, [r3, #0]
}
    f0e2:	46c0      	nop			; (mov r8, r8)
    f0e4:	46bd      	mov	sp, r7
    f0e6:	b004      	add	sp, #16
    f0e8:	bd80      	pop	{r7, pc}
    f0ea:	46c0      	nop			; (mov r8, r8)
    f0ec:	200009e0 	.word	0x200009e0
    f0f0:	00008939 	.word	0x00008939
    f0f4:	20000c9c 	.word	0x20000c9c
    f0f8:	20000ca4 	.word	0x20000ca4
    f0fc:	20000498 	.word	0x20000498
    f100:	0000ee19 	.word	0x0000ee19
    f104:	20000908 	.word	0x20000908

0000f108 <save_orientation_controls_remote_esc>:

void save_orientation_controls_remote_esc()
{
    f108:	b580      	push	{r7, lr}
    f10a:	b082      	sub	sp, #8
    f10c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    f10e:	2300      	movs	r3, #0
    f110:	607b      	str	r3, [r7, #4]
    f112:	e005      	b.n	f120 <save_orientation_controls_remote_esc+0x18>
		eeprom_data[0] = 0;
    f114:	4b42      	ldr	r3, [pc, #264]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f116:	2200      	movs	r2, #0
    f118:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    f11a:	687b      	ldr	r3, [r7, #4]
    f11c:	3301      	adds	r3, #1
    f11e:	607b      	str	r3, [r7, #4]
    f120:	687b      	ldr	r3, [r7, #4]
    f122:	2b3b      	cmp	r3, #59	; 0x3b
    f124:	ddf6      	ble.n	f114 <save_orientation_controls_remote_esc+0xc>
	}

	eeprom_data[0] = ORIENTATION[0];
    f126:	4b3f      	ldr	r3, [pc, #252]	; (f224 <save_orientation_controls_remote_esc+0x11c>)
    f128:	781a      	ldrb	r2, [r3, #0]
    f12a:	4b3d      	ldr	r3, [pc, #244]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f12c:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ORIENTATION[1];
    f12e:	4b3d      	ldr	r3, [pc, #244]	; (f224 <save_orientation_controls_remote_esc+0x11c>)
    f130:	785a      	ldrb	r2, [r3, #1]
    f132:	4b3b      	ldr	r3, [pc, #236]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f134:	705a      	strb	r2, [r3, #1]

	eeprom_data[2] = ((AUX_ENABLED << 1) | TURN_ENABLED);
    f136:	4b3c      	ldr	r3, [pc, #240]	; (f228 <save_orientation_controls_remote_esc+0x120>)
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	005b      	lsls	r3, r3, #1
    f13c:	b25a      	sxtb	r2, r3
    f13e:	4b3b      	ldr	r3, [pc, #236]	; (f22c <save_orientation_controls_remote_esc+0x124>)
    f140:	781b      	ldrb	r3, [r3, #0]
    f142:	b25b      	sxtb	r3, r3
    f144:	4313      	orrs	r3, r2
    f146:	b25b      	sxtb	r3, r3
    f148:	b2da      	uxtb	r2, r3
    f14a:	4b35      	ldr	r3, [pc, #212]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f14c:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = auxControlType;
    f14e:	4b38      	ldr	r3, [pc, #224]	; (f230 <save_orientation_controls_remote_esc+0x128>)
    f150:	781a      	ldrb	r2, [r3, #0]
    f152:	4b33      	ldr	r3, [pc, #204]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f154:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = auxTimedDuration;
    f156:	4b37      	ldr	r3, [pc, #220]	; (f234 <save_orientation_controls_remote_esc+0x12c>)
    f158:	781a      	ldrb	r2, [r3, #0]
    f15a:	4b31      	ldr	r3, [pc, #196]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f15c:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = single_aux_control;
    f15e:	4b36      	ldr	r3, [pc, #216]	; (f238 <save_orientation_controls_remote_esc+0x130>)
    f160:	781a      	ldrb	r2, [r3, #0]
    f162:	4b2f      	ldr	r3, [pc, #188]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f164:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = single_all_control;
    f166:	4b35      	ldr	r3, [pc, #212]	; (f23c <save_orientation_controls_remote_esc+0x134>)
    f168:	781a      	ldrb	r2, [r3, #0]
    f16a:	4b2d      	ldr	r3, [pc, #180]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f16c:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = single_head_control;
    f16e:	4b34      	ldr	r3, [pc, #208]	; (f240 <save_orientation_controls_remote_esc+0x138>)
    f170:	781a      	ldrb	r2, [r3, #0]
    f172:	4b2b      	ldr	r3, [pc, #172]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f174:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = single_side_control;
    f176:	4b33      	ldr	r3, [pc, #204]	; (f244 <save_orientation_controls_remote_esc+0x13c>)
    f178:	781a      	ldrb	r2, [r3, #0]
    f17a:	4b29      	ldr	r3, [pc, #164]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f17c:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = single_up_control;
    f17e:	4b32      	ldr	r3, [pc, #200]	; (f248 <save_orientation_controls_remote_esc+0x140>)
    f180:	781a      	ldrb	r2, [r3, #0]
    f182:	4b27      	ldr	r3, [pc, #156]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f184:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = single_down_control;
    f186:	4b31      	ldr	r3, [pc, #196]	; (f24c <save_orientation_controls_remote_esc+0x144>)
    f188:	781a      	ldrb	r2, [r3, #0]
    f18a:	4b25      	ldr	r3, [pc, #148]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f18c:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = dual_aux_control;
    f18e:	4b30      	ldr	r3, [pc, #192]	; (f250 <save_orientation_controls_remote_esc+0x148>)
    f190:	781a      	ldrb	r2, [r3, #0]
    f192:	4b23      	ldr	r3, [pc, #140]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f194:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = dual_all_control;
    f196:	4b2f      	ldr	r3, [pc, #188]	; (f254 <save_orientation_controls_remote_esc+0x14c>)
    f198:	781a      	ldrb	r2, [r3, #0]
    f19a:	4b21      	ldr	r3, [pc, #132]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f19c:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = dual_head_control;
    f19e:	4b2e      	ldr	r3, [pc, #184]	; (f258 <save_orientation_controls_remote_esc+0x150>)
    f1a0:	781a      	ldrb	r2, [r3, #0]
    f1a2:	4b1f      	ldr	r3, [pc, #124]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1a4:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = dual_side_control;
    f1a6:	4b2d      	ldr	r3, [pc, #180]	; (f25c <save_orientation_controls_remote_esc+0x154>)
    f1a8:	781a      	ldrb	r2, [r3, #0]
    f1aa:	4b1d      	ldr	r3, [pc, #116]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1ac:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = dual_up_control;
    f1ae:	4b2c      	ldr	r3, [pc, #176]	; (f260 <save_orientation_controls_remote_esc+0x158>)
    f1b0:	781a      	ldrb	r2, [r3, #0]
    f1b2:	4b1b      	ldr	r3, [pc, #108]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1b4:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = dual_down_control;
    f1b6:	4b2b      	ldr	r3, [pc, #172]	; (f264 <save_orientation_controls_remote_esc+0x15c>)
    f1b8:	781a      	ldrb	r2, [r3, #0]
    f1ba:	4b19      	ldr	r3, [pc, #100]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1bc:	741a      	strb	r2, [r3, #16]

	eeprom_data[17] = ((remote_type << 4) | (button_type & 0x0F));
    f1be:	4b2a      	ldr	r3, [pc, #168]	; (f268 <save_orientation_controls_remote_esc+0x160>)
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	011b      	lsls	r3, r3, #4
    f1c4:	b25a      	sxtb	r2, r3
    f1c6:	4b29      	ldr	r3, [pc, #164]	; (f26c <save_orientation_controls_remote_esc+0x164>)
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	b25b      	sxtb	r3, r3
    f1cc:	210f      	movs	r1, #15
    f1ce:	400b      	ands	r3, r1
    f1d0:	b25b      	sxtb	r3, r3
    f1d2:	4313      	orrs	r3, r2
    f1d4:	b25b      	sxtb	r3, r3
    f1d6:	b2da      	uxtb	r2, r3
    f1d8:	4b11      	ldr	r3, [pc, #68]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1da:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = deadzone;
    f1dc:	4b24      	ldr	r3, [pc, #144]	; (f270 <save_orientation_controls_remote_esc+0x168>)
    f1de:	781a      	ldrb	r2, [r3, #0]
    f1e0:	4b0f      	ldr	r3, [pc, #60]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1e2:	749a      	strb	r2, [r3, #18]
	
	eeprom_data[19] = esc_fw;
    f1e4:	4b23      	ldr	r3, [pc, #140]	; (f274 <save_orientation_controls_remote_esc+0x16c>)
    f1e6:	781a      	ldrb	r2, [r3, #0]
    f1e8:	4b0d      	ldr	r3, [pc, #52]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f1ea:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = ((esc_comms << 4) | (UART_baud & 0x0F));//*/
    f1ec:	4b22      	ldr	r3, [pc, #136]	; (f278 <save_orientation_controls_remote_esc+0x170>)
    f1ee:	781b      	ldrb	r3, [r3, #0]
    f1f0:	011b      	lsls	r3, r3, #4
    f1f2:	b25a      	sxtb	r2, r3
    f1f4:	4b21      	ldr	r3, [pc, #132]	; (f27c <save_orientation_controls_remote_esc+0x174>)
    f1f6:	781b      	ldrb	r3, [r3, #0]
    f1f8:	b25b      	sxtb	r3, r3
    f1fa:	210f      	movs	r1, #15
    f1fc:	400b      	ands	r3, r1
    f1fe:	b25b      	sxtb	r3, r3
    f200:	4313      	orrs	r3, r2
    f202:	b25b      	sxtb	r3, r3
    f204:	b2da      	uxtb	r2, r3
    f206:	4b06      	ldr	r3, [pc, #24]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f208:	751a      	strb	r2, [r3, #20]

	//Write EEPROM data
	eeprom_emulator_write_page(3, eeprom_data);
    f20a:	4b05      	ldr	r3, [pc, #20]	; (f220 <save_orientation_controls_remote_esc+0x118>)
    f20c:	0019      	movs	r1, r3
    f20e:	2003      	movs	r0, #3
    f210:	4b1b      	ldr	r3, [pc, #108]	; (f280 <save_orientation_controls_remote_esc+0x178>)
    f212:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    f214:	4b1b      	ldr	r3, [pc, #108]	; (f284 <save_orientation_controls_remote_esc+0x17c>)
    f216:	4798      	blx	r3
}
    f218:	46c0      	nop			; (mov r8, r8)
    f21a:	46bd      	mov	sp, r7
    f21c:	b002      	add	sp, #8
    f21e:	bd80      	pop	{r7, pc}
    f220:	200009e0 	.word	0x200009e0
    f224:	20000004 	.word	0x20000004
    f228:	20000375 	.word	0x20000375
    f22c:	20000376 	.word	0x20000376
    f230:	20000378 	.word	0x20000378
    f234:	20000379 	.word	0x20000379
    f238:	2000037a 	.word	0x2000037a
    f23c:	2000037b 	.word	0x2000037b
    f240:	2000037c 	.word	0x2000037c
    f244:	2000037d 	.word	0x2000037d
    f248:	2000037e 	.word	0x2000037e
    f24c:	2000037f 	.word	0x2000037f
    f250:	20000380 	.word	0x20000380
    f254:	20000381 	.word	0x20000381
    f258:	20000382 	.word	0x20000382
    f25c:	20000383 	.word	0x20000383
    f260:	20000384 	.word	0x20000384
    f264:	20000385 	.word	0x20000385
    f268:	20000308 	.word	0x20000308
    f26c:	20000309 	.word	0x20000309
    f270:	20000018 	.word	0x20000018
    f274:	2000001a 	.word	0x2000001a
    f278:	20000310 	.word	0x20000310
    f27c:	20000311 	.word	0x20000311
    f280:	0000882d 	.word	0x0000882d
    f284:	000089d5 	.word	0x000089d5

0000f288 <restore_orientation_controls_remote_esc>:

void restore_orientation_controls_remote_esc()
{
    f288:	b580      	push	{r7, lr}
    f28a:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(3, eeprom_data);
    f28c:	4b68      	ldr	r3, [pc, #416]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f28e:	0019      	movs	r1, r3
    f290:	2003      	movs	r0, #3
    f292:	4b68      	ldr	r3, [pc, #416]	; (f434 <restore_orientation_controls_remote_esc+0x1ac>)
    f294:	4798      	blx	r3

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    f296:	4b66      	ldr	r3, [pc, #408]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f298:	781b      	ldrb	r3, [r3, #0]
    f29a:	2bff      	cmp	r3, #255	; 0xff
    f29c:	d14e      	bne.n	f33c <restore_orientation_controls_remote_esc+0xb4>
    f29e:	4b64      	ldr	r3, [pc, #400]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f2a0:	785b      	ldrb	r3, [r3, #1]
    f2a2:	2bff      	cmp	r3, #255	; 0xff
    f2a4:	d14a      	bne.n	f33c <restore_orientation_controls_remote_esc+0xb4>
		ORIENTATION[0] = 1; // Connectors up
    f2a6:	4b64      	ldr	r3, [pc, #400]	; (f438 <restore_orientation_controls_remote_esc+0x1b0>)
    f2a8:	2201      	movs	r2, #1
    f2aa:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = 6; // Power front
    f2ac:	4b62      	ldr	r3, [pc, #392]	; (f438 <restore_orientation_controls_remote_esc+0x1b0>)
    f2ae:	2206      	movs	r2, #6
    f2b0:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = 0; // Aux disabled
    f2b2:	4b62      	ldr	r3, [pc, #392]	; (f43c <restore_orientation_controls_remote_esc+0x1b4>)
    f2b4:	2200      	movs	r2, #0
    f2b6:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = 0; // Turn disabled
    f2b8:	4b61      	ldr	r3, [pc, #388]	; (f440 <restore_orientation_controls_remote_esc+0x1b8>)
    f2ba:	2200      	movs	r2, #0
    f2bc:	701a      	strb	r2, [r3, #0]
		auxControlType = AUX_MOMENTARY;
    f2be:	4b61      	ldr	r3, [pc, #388]	; (f444 <restore_orientation_controls_remote_esc+0x1bc>)
    f2c0:	2200      	movs	r2, #0
    f2c2:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = 10; // 1 second
    f2c4:	4b60      	ldr	r3, [pc, #384]	; (f448 <restore_orientation_controls_remote_esc+0x1c0>)
    f2c6:	220a      	movs	r2, #10
    f2c8:	701a      	strb	r2, [r3, #0]
		single_aux_control = PRESS_NONE;
    f2ca:	4b60      	ldr	r3, [pc, #384]	; (f44c <restore_orientation_controls_remote_esc+0x1c4>)
    f2cc:	2200      	movs	r2, #0
    f2ce:	701a      	strb	r2, [r3, #0]
		single_all_control = SINGLE_TAP;
    f2d0:	4b5f      	ldr	r3, [pc, #380]	; (f450 <restore_orientation_controls_remote_esc+0x1c8>)
    f2d2:	2201      	movs	r2, #1
    f2d4:	701a      	strb	r2, [r3, #0]
		single_head_control = MEDIUM_PRESS;
    f2d6:	4b5f      	ldr	r3, [pc, #380]	; (f454 <restore_orientation_controls_remote_esc+0x1cc>)
    f2d8:	2206      	movs	r2, #6
    f2da:	701a      	strb	r2, [r3, #0]
		single_side_control = LONG_PRESS;
    f2dc:	4b5e      	ldr	r3, [pc, #376]	; (f458 <restore_orientation_controls_remote_esc+0x1d0>)
    f2de:	2207      	movs	r2, #7
    f2e0:	701a      	strb	r2, [r3, #0]
		single_up_control = DOUBLE_TAP;
    f2e2:	4b5e      	ldr	r3, [pc, #376]	; (f45c <restore_orientation_controls_remote_esc+0x1d4>)
    f2e4:	2202      	movs	r2, #2
    f2e6:	701a      	strb	r2, [r3, #0]
		single_down_control = TRIPLE_TAP;
    f2e8:	4b5d      	ldr	r3, [pc, #372]	; (f460 <restore_orientation_controls_remote_esc+0x1d8>)
    f2ea:	2203      	movs	r2, #3
    f2ec:	701a      	strb	r2, [r3, #0]
		dual_aux_control = PRESS_NONE;
    f2ee:	4b5d      	ldr	r3, [pc, #372]	; (f464 <restore_orientation_controls_remote_esc+0x1dc>)
    f2f0:	2200      	movs	r2, #0
    f2f2:	701a      	strb	r2, [r3, #0]
		dual_all_control = SINGLE_TAP;
    f2f4:	4b5c      	ldr	r3, [pc, #368]	; (f468 <restore_orientation_controls_remote_esc+0x1e0>)
    f2f6:	2201      	movs	r2, #1
    f2f8:	701a      	strb	r2, [r3, #0]
		dual_head_control = MEDIUM_PRESS;
    f2fa:	4b5c      	ldr	r3, [pc, #368]	; (f46c <restore_orientation_controls_remote_esc+0x1e4>)
    f2fc:	2206      	movs	r2, #6
    f2fe:	701a      	strb	r2, [r3, #0]
		dual_side_control = LONG_PRESS;
    f300:	4b5b      	ldr	r3, [pc, #364]	; (f470 <restore_orientation_controls_remote_esc+0x1e8>)
    f302:	2207      	movs	r2, #7
    f304:	701a      	strb	r2, [r3, #0]
		dual_up_control =  RIGHT_TAP;
    f306:	4b5b      	ldr	r3, [pc, #364]	; (f474 <restore_orientation_controls_remote_esc+0x1ec>)
    f308:	2205      	movs	r2, #5
    f30a:	701a      	strb	r2, [r3, #0]
		dual_down_control = LEFT_TAP;
    f30c:	4b5a      	ldr	r3, [pc, #360]	; (f478 <restore_orientation_controls_remote_esc+0x1f0>)
    f30e:	2204      	movs	r2, #4
    f310:	701a      	strb	r2, [r3, #0]

		remote_type = 0;
    f312:	4b5a      	ldr	r3, [pc, #360]	; (f47c <restore_orientation_controls_remote_esc+0x1f4>)
    f314:	2200      	movs	r2, #0
    f316:	701a      	strb	r2, [r3, #0]
		deadzone = 10;
    f318:	4b59      	ldr	r3, [pc, #356]	; (f480 <restore_orientation_controls_remote_esc+0x1f8>)
    f31a:	220a      	movs	r2, #10
    f31c:	701a      	strb	r2, [r3, #0]
		button_type = 1;
    f31e:	4b59      	ldr	r3, [pc, #356]	; (f484 <restore_orientation_controls_remote_esc+0x1fc>)
    f320:	2201      	movs	r2, #1
    f322:	701a      	strb	r2, [r3, #0]

		esc_fw = FW_3v00; // Set 3.0 as the default FW to prevent bricking any ESCs
    f324:	4b58      	ldr	r3, [pc, #352]	; (f488 <restore_orientation_controls_remote_esc+0x200>)
    f326:	2201      	movs	r2, #1
    f328:	701a      	strb	r2, [r3, #0]
		esc_comms = 2;
    f32a:	4b58      	ldr	r3, [pc, #352]	; (f48c <restore_orientation_controls_remote_esc+0x204>)
    f32c:	2202      	movs	r2, #2
    f32e:	701a      	strb	r2, [r3, #0]
		UART_baud = 3;
    f330:	4b57      	ldr	r3, [pc, #348]	; (f490 <restore_orientation_controls_remote_esc+0x208>)
    f332:	2203      	movs	r2, #3
    f334:	701a      	strb	r2, [r3, #0]

		save_orientation_controls_remote_esc();
    f336:	4b57      	ldr	r3, [pc, #348]	; (f494 <restore_orientation_controls_remote_esc+0x20c>)
    f338:	4798      	blx	r3
    f33a:	e075      	b.n	f428 <restore_orientation_controls_remote_esc+0x1a0>
	}
	else { // else restore the stored data
		ORIENTATION[0] = eeprom_data[0];
    f33c:	4b3c      	ldr	r3, [pc, #240]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f33e:	781a      	ldrb	r2, [r3, #0]
    f340:	4b3d      	ldr	r3, [pc, #244]	; (f438 <restore_orientation_controls_remote_esc+0x1b0>)
    f342:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = eeprom_data[1];
    f344:	4b3a      	ldr	r3, [pc, #232]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f346:	785a      	ldrb	r2, [r3, #1]
    f348:	4b3b      	ldr	r3, [pc, #236]	; (f438 <restore_orientation_controls_remote_esc+0x1b0>)
    f34a:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = (eeprom_data[2] & 0x02) >> 1;
    f34c:	4b38      	ldr	r3, [pc, #224]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f34e:	789b      	ldrb	r3, [r3, #2]
    f350:	105b      	asrs	r3, r3, #1
    f352:	2201      	movs	r2, #1
    f354:	4013      	ands	r3, r2
    f356:	1e5a      	subs	r2, r3, #1
    f358:	4193      	sbcs	r3, r2
    f35a:	b2da      	uxtb	r2, r3
    f35c:	4b37      	ldr	r3, [pc, #220]	; (f43c <restore_orientation_controls_remote_esc+0x1b4>)
    f35e:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = (eeprom_data[2] & 0x01);
    f360:	4b33      	ldr	r3, [pc, #204]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f362:	789b      	ldrb	r3, [r3, #2]
    f364:	001a      	movs	r2, r3
    f366:	2301      	movs	r3, #1
    f368:	4013      	ands	r3, r2
    f36a:	1e5a      	subs	r2, r3, #1
    f36c:	4193      	sbcs	r3, r2
    f36e:	b2da      	uxtb	r2, r3
    f370:	4b33      	ldr	r3, [pc, #204]	; (f440 <restore_orientation_controls_remote_esc+0x1b8>)
    f372:	701a      	strb	r2, [r3, #0]
		auxControlType = eeprom_data[3];
    f374:	4b2e      	ldr	r3, [pc, #184]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f376:	78da      	ldrb	r2, [r3, #3]
    f378:	4b32      	ldr	r3, [pc, #200]	; (f444 <restore_orientation_controls_remote_esc+0x1bc>)
    f37a:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = eeprom_data[4];
    f37c:	4b2c      	ldr	r3, [pc, #176]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f37e:	791a      	ldrb	r2, [r3, #4]
    f380:	4b31      	ldr	r3, [pc, #196]	; (f448 <restore_orientation_controls_remote_esc+0x1c0>)
    f382:	701a      	strb	r2, [r3, #0]
		single_aux_control = eeprom_data[5];
    f384:	4b2a      	ldr	r3, [pc, #168]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f386:	795a      	ldrb	r2, [r3, #5]
    f388:	4b30      	ldr	r3, [pc, #192]	; (f44c <restore_orientation_controls_remote_esc+0x1c4>)
    f38a:	701a      	strb	r2, [r3, #0]
		single_all_control = eeprom_data[6];
    f38c:	4b28      	ldr	r3, [pc, #160]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f38e:	799a      	ldrb	r2, [r3, #6]
    f390:	4b2f      	ldr	r3, [pc, #188]	; (f450 <restore_orientation_controls_remote_esc+0x1c8>)
    f392:	701a      	strb	r2, [r3, #0]
		single_head_control = eeprom_data[7];
    f394:	4b26      	ldr	r3, [pc, #152]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f396:	79da      	ldrb	r2, [r3, #7]
    f398:	4b2e      	ldr	r3, [pc, #184]	; (f454 <restore_orientation_controls_remote_esc+0x1cc>)
    f39a:	701a      	strb	r2, [r3, #0]
		single_side_control = eeprom_data[8];
    f39c:	4b24      	ldr	r3, [pc, #144]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f39e:	7a1a      	ldrb	r2, [r3, #8]
    f3a0:	4b2d      	ldr	r3, [pc, #180]	; (f458 <restore_orientation_controls_remote_esc+0x1d0>)
    f3a2:	701a      	strb	r2, [r3, #0]
		single_up_control = eeprom_data[9];
    f3a4:	4b22      	ldr	r3, [pc, #136]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3a6:	7a5a      	ldrb	r2, [r3, #9]
    f3a8:	4b2c      	ldr	r3, [pc, #176]	; (f45c <restore_orientation_controls_remote_esc+0x1d4>)
    f3aa:	701a      	strb	r2, [r3, #0]
		single_down_control = eeprom_data[10];
    f3ac:	4b20      	ldr	r3, [pc, #128]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3ae:	7a9a      	ldrb	r2, [r3, #10]
    f3b0:	4b2b      	ldr	r3, [pc, #172]	; (f460 <restore_orientation_controls_remote_esc+0x1d8>)
    f3b2:	701a      	strb	r2, [r3, #0]
		dual_aux_control = eeprom_data[11];
    f3b4:	4b1e      	ldr	r3, [pc, #120]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3b6:	7ada      	ldrb	r2, [r3, #11]
    f3b8:	4b2a      	ldr	r3, [pc, #168]	; (f464 <restore_orientation_controls_remote_esc+0x1dc>)
    f3ba:	701a      	strb	r2, [r3, #0]
		dual_all_control = eeprom_data[12];
    f3bc:	4b1c      	ldr	r3, [pc, #112]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3be:	7b1a      	ldrb	r2, [r3, #12]
    f3c0:	4b29      	ldr	r3, [pc, #164]	; (f468 <restore_orientation_controls_remote_esc+0x1e0>)
    f3c2:	701a      	strb	r2, [r3, #0]
		dual_head_control = eeprom_data[13];
    f3c4:	4b1a      	ldr	r3, [pc, #104]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3c6:	7b5a      	ldrb	r2, [r3, #13]
    f3c8:	4b28      	ldr	r3, [pc, #160]	; (f46c <restore_orientation_controls_remote_esc+0x1e4>)
    f3ca:	701a      	strb	r2, [r3, #0]
		dual_side_control = eeprom_data[14];
    f3cc:	4b18      	ldr	r3, [pc, #96]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3ce:	7b9a      	ldrb	r2, [r3, #14]
    f3d0:	4b27      	ldr	r3, [pc, #156]	; (f470 <restore_orientation_controls_remote_esc+0x1e8>)
    f3d2:	701a      	strb	r2, [r3, #0]
		dual_up_control = eeprom_data[15];
    f3d4:	4b16      	ldr	r3, [pc, #88]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3d6:	7bda      	ldrb	r2, [r3, #15]
    f3d8:	4b26      	ldr	r3, [pc, #152]	; (f474 <restore_orientation_controls_remote_esc+0x1ec>)
    f3da:	701a      	strb	r2, [r3, #0]
		dual_down_control = eeprom_data[16];
    f3dc:	4b14      	ldr	r3, [pc, #80]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3de:	7c1a      	ldrb	r2, [r3, #16]
    f3e0:	4b25      	ldr	r3, [pc, #148]	; (f478 <restore_orientation_controls_remote_esc+0x1f0>)
    f3e2:	701a      	strb	r2, [r3, #0]

		remote_type = ((eeprom_data[17]&0xF0)>>4);
    f3e4:	4b12      	ldr	r3, [pc, #72]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3e6:	7c5b      	ldrb	r3, [r3, #17]
    f3e8:	091b      	lsrs	r3, r3, #4
    f3ea:	b2da      	uxtb	r2, r3
    f3ec:	4b23      	ldr	r3, [pc, #140]	; (f47c <restore_orientation_controls_remote_esc+0x1f4>)
    f3ee:	701a      	strb	r2, [r3, #0]
		button_type = (eeprom_data[17]&0x0F);
    f3f0:	4b0f      	ldr	r3, [pc, #60]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f3f2:	7c5b      	ldrb	r3, [r3, #17]
    f3f4:	220f      	movs	r2, #15
    f3f6:	4013      	ands	r3, r2
    f3f8:	b2da      	uxtb	r2, r3
    f3fa:	4b22      	ldr	r3, [pc, #136]	; (f484 <restore_orientation_controls_remote_esc+0x1fc>)
    f3fc:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[18];
    f3fe:	4b0c      	ldr	r3, [pc, #48]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f400:	7c9a      	ldrb	r2, [r3, #18]
    f402:	4b1f      	ldr	r3, [pc, #124]	; (f480 <restore_orientation_controls_remote_esc+0x1f8>)
    f404:	701a      	strb	r2, [r3, #0]

		esc_fw = eeprom_data[19];
    f406:	4b0a      	ldr	r3, [pc, #40]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f408:	7cda      	ldrb	r2, [r3, #19]
    f40a:	4b1f      	ldr	r3, [pc, #124]	; (f488 <restore_orientation_controls_remote_esc+0x200>)
    f40c:	701a      	strb	r2, [r3, #0]
		esc_comms = ((eeprom_data[20]&0xF0)>>4);
    f40e:	4b08      	ldr	r3, [pc, #32]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f410:	7d1b      	ldrb	r3, [r3, #20]
    f412:	091b      	lsrs	r3, r3, #4
    f414:	b2da      	uxtb	r2, r3
    f416:	4b1d      	ldr	r3, [pc, #116]	; (f48c <restore_orientation_controls_remote_esc+0x204>)
    f418:	701a      	strb	r2, [r3, #0]
		UART_baud = (eeprom_data[20]&0x0F);//*/
    f41a:	4b05      	ldr	r3, [pc, #20]	; (f430 <restore_orientation_controls_remote_esc+0x1a8>)
    f41c:	7d1b      	ldrb	r3, [r3, #20]
    f41e:	220f      	movs	r2, #15
    f420:	4013      	ands	r3, r2
    f422:	b2da      	uxtb	r2, r3
    f424:	4b1a      	ldr	r3, [pc, #104]	; (f490 <restore_orientation_controls_remote_esc+0x208>)
    f426:	701a      	strb	r2, [r3, #0]
	}
}
    f428:	46c0      	nop			; (mov r8, r8)
    f42a:	46bd      	mov	sp, r7
    f42c:	bd80      	pop	{r7, pc}
    f42e:	46c0      	nop			; (mov r8, r8)
    f430:	200009e0 	.word	0x200009e0
    f434:	00008939 	.word	0x00008939
    f438:	20000004 	.word	0x20000004
    f43c:	20000375 	.word	0x20000375
    f440:	20000376 	.word	0x20000376
    f444:	20000378 	.word	0x20000378
    f448:	20000379 	.word	0x20000379
    f44c:	2000037a 	.word	0x2000037a
    f450:	2000037b 	.word	0x2000037b
    f454:	2000037c 	.word	0x2000037c
    f458:	2000037d 	.word	0x2000037d
    f45c:	2000037e 	.word	0x2000037e
    f460:	2000037f 	.word	0x2000037f
    f464:	20000380 	.word	0x20000380
    f468:	20000381 	.word	0x20000381
    f46c:	20000382 	.word	0x20000382
    f470:	20000383 	.word	0x20000383
    f474:	20000384 	.word	0x20000384
    f478:	20000385 	.word	0x20000385
    f47c:	20000308 	.word	0x20000308
    f480:	20000018 	.word	0x20000018
    f484:	20000309 	.word	0x20000309
    f488:	2000001a 	.word	0x2000001a
    f48c:	20000310 	.word	0x20000310
    f490:	20000311 	.word	0x20000311
    f494:	0000f109 	.word	0x0000f109

0000f498 <configure_ble_usart>:
struct ble_packet ble_recieve_packet;


// Configure SERCOM5 as USART for BLE module
void configure_ble_usart(int baud)
{
    f498:	b580      	push	{r7, lr}
    f49a:	b092      	sub	sp, #72	; 0x48
    f49c:	af00      	add	r7, sp, #0
    f49e:	6078      	str	r0, [r7, #4]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    f4a0:	2308      	movs	r3, #8
    f4a2:	18fb      	adds	r3, r7, r3
    f4a4:	0018      	movs	r0, r3
    f4a6:	4b17      	ldr	r3, [pc, #92]	; (f504 <configure_ble_usart+0x6c>)
    f4a8:	4798      	blx	r3
	config_usart.baudrate    = baud;
    f4aa:	687a      	ldr	r2, [r7, #4]
    f4ac:	2308      	movs	r3, #8
    f4ae:	18fb      	adds	r3, r7, r3
    f4b0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    f4b2:	2308      	movs	r3, #8
    f4b4:	18fb      	adds	r3, r7, r3
    f4b6:	22c4      	movs	r2, #196	; 0xc4
    f4b8:	0392      	lsls	r2, r2, #14
    f4ba:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    f4bc:	2308      	movs	r3, #8
    f4be:	18fb      	adds	r3, r7, r3
    f4c0:	2201      	movs	r2, #1
    f4c2:	4252      	negs	r2, r2
    f4c4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    f4c6:	2308      	movs	r3, #8
    f4c8:	18fb      	adds	r3, r7, r3
    f4ca:	2201      	movs	r2, #1
    f4cc:	4252      	negs	r2, r2
    f4ce:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20C_SERCOM5_PAD2;
    f4d0:	2308      	movs	r3, #8
    f4d2:	18fb      	adds	r3, r7, r3
    f4d4:	4a0c      	ldr	r2, [pc, #48]	; (f508 <configure_ble_usart+0x70>)
    f4d6:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21C_SERCOM5_PAD3;
    f4d8:	2308      	movs	r3, #8
    f4da:	18fb      	adds	r3, r7, r3
    f4dc:	4a0b      	ldr	r2, [pc, #44]	; (f50c <configure_ble_usart+0x74>)
    f4de:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&ble_usart,SERCOM5, &config_usart) != STATUS_OK)
    f4e0:	46c0      	nop			; (mov r8, r8)
    f4e2:	2308      	movs	r3, #8
    f4e4:	18fa      	adds	r2, r7, r3
    f4e6:	490a      	ldr	r1, [pc, #40]	; (f510 <configure_ble_usart+0x78>)
    f4e8:	4b0a      	ldr	r3, [pc, #40]	; (f514 <configure_ble_usart+0x7c>)
    f4ea:	0018      	movs	r0, r3
    f4ec:	4b0a      	ldr	r3, [pc, #40]	; (f518 <configure_ble_usart+0x80>)
    f4ee:	4798      	blx	r3
    f4f0:	1e03      	subs	r3, r0, #0
    f4f2:	d1f6      	bne.n	f4e2 <configure_ble_usart+0x4a>
	{}
	usart_enable(&ble_usart);
    f4f4:	4b07      	ldr	r3, [pc, #28]	; (f514 <configure_ble_usart+0x7c>)
    f4f6:	0018      	movs	r0, r3
    f4f8:	4b08      	ldr	r3, [pc, #32]	; (f51c <configure_ble_usart+0x84>)
    f4fa:	4798      	blx	r3
}
    f4fc:	46c0      	nop			; (mov r8, r8)
    f4fe:	46bd      	mov	sp, r7
    f500:	b012      	add	sp, #72	; 0x48
    f502:	bd80      	pop	{r7, pc}
    f504:	0000918d 	.word	0x0000918d
    f508:	00140002 	.word	0x00140002
    f50c:	00150002 	.word	0x00150002
    f510:	42001c00 	.word	0x42001c00
    f514:	200004a0 	.word	0x200004a0
    f518:	000060e5 	.word	0x000060e5
    f51c:	0000924d 	.word	0x0000924d

0000f520 <configure_BLE_module>:

void configure_BLE_module()
{
    f520:	b590      	push	{r4, r7, lr}
    f522:	b09b      	sub	sp, #108	; 0x6c
    f524:	af00      	add	r7, sp, #0
	int baud = 0;
    f526:	2300      	movs	r3, #0
    f528:	667b      	str	r3, [r7, #100]	; 0x64
	int bauds[5] = {9600, 19200, 38400, 57600, 115200};
    f52a:	232c      	movs	r3, #44	; 0x2c
    f52c:	18fb      	adds	r3, r7, r3
    f52e:	4a75      	ldr	r2, [pc, #468]	; (f704 <configure_BLE_module+0x1e4>)
    f530:	ca13      	ldmia	r2!, {r0, r1, r4}
    f532:	c313      	stmia	r3!, {r0, r1, r4}
    f534:	ca03      	ldmia	r2!, {r0, r1}
    f536:	c303      	stmia	r3!, {r0, r1}
	while(1){
		configure_ble_usart(bauds[baud]);
    f538:	232c      	movs	r3, #44	; 0x2c
    f53a:	18fb      	adds	r3, r7, r3
    f53c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    f53e:	0092      	lsls	r2, r2, #2
    f540:	58d3      	ldr	r3, [r2, r3]
    f542:	0018      	movs	r0, r3
    f544:	4b70      	ldr	r3, [pc, #448]	; (f708 <configure_BLE_module+0x1e8>)
    f546:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
    f548:	4970      	ldr	r1, [pc, #448]	; (f70c <configure_BLE_module+0x1ec>)
    f54a:	4b71      	ldr	r3, [pc, #452]	; (f710 <configure_BLE_module+0x1f0>)
    f54c:	2213      	movs	r2, #19
    f54e:	0018      	movs	r0, r3
    f550:	4b70      	ldr	r3, [pc, #448]	; (f714 <configure_BLE_module+0x1f4>)
    f552:	4798      	blx	r3

		baud += 1;
    f554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    f556:	3301      	adds	r3, #1
    f558:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud > 4)
    f55a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    f55c:	2b04      	cmp	r3, #4
    f55e:	dd01      	ble.n	f564 <configure_BLE_module+0x44>
		baud = 0;
    f560:	2300      	movs	r3, #0
    f562:	667b      	str	r3, [r7, #100]	; 0x64
		
		for(int i = 0; i < 10000; ++i);
    f564:	2300      	movs	r3, #0
    f566:	663b      	str	r3, [r7, #96]	; 0x60
    f568:	e002      	b.n	f570 <configure_BLE_module+0x50>
    f56a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    f56c:	3301      	adds	r3, #1
    f56e:	663b      	str	r3, [r7, #96]	; 0x60
    f570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    f572:	4a69      	ldr	r2, [pc, #420]	; (f718 <configure_BLE_module+0x1f8>)
    f574:	4293      	cmp	r3, r2
    f576:	ddf8      	ble.n	f56a <configure_BLE_module+0x4a>
		else if(BLE_BAUD == 38400)
		strcpy(string1,"AT+BAUD2");
		else if(BLE_BAUD == 57600)
		strcpy(string1,"AT+BAUD3");
		else if(BLE_BAUD == 115200)
		strcpy(string1,"AT+BAUD4");
    f578:	2324      	movs	r3, #36	; 0x24
    f57a:	18fb      	adds	r3, r7, r3
    f57c:	4a67      	ldr	r2, [pc, #412]	; (f71c <configure_BLE_module+0x1fc>)
    f57e:	ca03      	ldmia	r2!, {r0, r1}
    f580:	c303      	stmia	r3!, {r0, r1}
    f582:	7812      	ldrb	r2, [r2, #0]
    f584:	701a      	strb	r2, [r3, #0]
		OK_EXPECTED = true;
    f586:	4b66      	ldr	r3, [pc, #408]	; (f720 <configure_BLE_module+0x200>)
    f588:	2201      	movs	r2, #1
    f58a:	701a      	strb	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string1, sizeof(string1))!=STATUS_OK){}
    f58c:	46c0      	nop			; (mov r8, r8)
    f58e:	2324      	movs	r3, #36	; 0x24
    f590:	18f9      	adds	r1, r7, r3
    f592:	4b5f      	ldr	r3, [pc, #380]	; (f710 <configure_BLE_module+0x1f0>)
    f594:	2208      	movs	r2, #8
    f596:	0018      	movs	r0, r3
    f598:	4b62      	ldr	r3, [pc, #392]	; (f724 <configure_BLE_module+0x204>)
    f59a:	4798      	blx	r3
    f59c:	1e03      	subs	r3, r0, #0
    f59e:	d1f6      	bne.n	f58e <configure_BLE_module+0x6e>
		for(int i = 0; i < 25000; ++i);
    f5a0:	2300      	movs	r3, #0
    f5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    f5a4:	e002      	b.n	f5ac <configure_BLE_module+0x8c>
    f5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    f5a8:	3301      	adds	r3, #1
    f5aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    f5ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    f5ae:	4a5e      	ldr	r2, [pc, #376]	; (f728 <configure_BLE_module+0x208>)
    f5b0:	4293      	cmp	r3, r2
    f5b2:	ddf8      	ble.n	f5a6 <configure_BLE_module+0x86>
		
		OK_EXPECTED = true;
    f5b4:	4b5a      	ldr	r3, [pc, #360]	; (f720 <configure_BLE_module+0x200>)
    f5b6:	2201      	movs	r2, #1
    f5b8:	701a      	strb	r2, [r3, #0]
		uint8_t string2[14] = "AT+NAMETelTail";
    f5ba:	2314      	movs	r3, #20
    f5bc:	18fb      	adds	r3, r7, r3
    f5be:	4a5b      	ldr	r2, [pc, #364]	; (f72c <configure_BLE_module+0x20c>)
    f5c0:	ca13      	ldmia	r2!, {r0, r1, r4}
    f5c2:	c313      	stmia	r3!, {r0, r1, r4}
    f5c4:	8812      	ldrh	r2, [r2, #0]
    f5c6:	801a      	strh	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string2, sizeof(string2))!=STATUS_OK){}
    f5c8:	46c0      	nop			; (mov r8, r8)
    f5ca:	2314      	movs	r3, #20
    f5cc:	18f9      	adds	r1, r7, r3
    f5ce:	4b50      	ldr	r3, [pc, #320]	; (f710 <configure_BLE_module+0x1f0>)
    f5d0:	220e      	movs	r2, #14
    f5d2:	0018      	movs	r0, r3
    f5d4:	4b53      	ldr	r3, [pc, #332]	; (f724 <configure_BLE_module+0x204>)
    f5d6:	4798      	blx	r3
    f5d8:	1e03      	subs	r3, r0, #0
    f5da:	d1f6      	bne.n	f5ca <configure_BLE_module+0xaa>
		for(int i = 0; i < 25000; ++i);
    f5dc:	2300      	movs	r3, #0
    f5de:	65bb      	str	r3, [r7, #88]	; 0x58
    f5e0:	e002      	b.n	f5e8 <configure_BLE_module+0xc8>
    f5e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    f5e4:	3301      	adds	r3, #1
    f5e6:	65bb      	str	r3, [r7, #88]	; 0x58
    f5e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    f5ea:	4a4f      	ldr	r2, [pc, #316]	; (f728 <configure_BLE_module+0x208>)
    f5ec:	4293      	cmp	r3, r2
    f5ee:	ddf8      	ble.n	f5e2 <configure_BLE_module+0xc2>
		
		OK_EXPECTED = true;
    f5f0:	4b4b      	ldr	r3, [pc, #300]	; (f720 <configure_BLE_module+0x200>)
    f5f2:	2201      	movs	r2, #1
    f5f4:	701a      	strb	r2, [r3, #0]
		uint8_t string3[8] = "AT+POWE3"; // Default = 2
    f5f6:	230c      	movs	r3, #12
    f5f8:	18fb      	adds	r3, r7, r3
    f5fa:	4a4d      	ldr	r2, [pc, #308]	; (f730 <configure_BLE_module+0x210>)
    f5fc:	ca03      	ldmia	r2!, {r0, r1}
    f5fe:	c303      	stmia	r3!, {r0, r1}
		while(usart_write_buffer_wait(&ble_usart, string3, sizeof(string3))!=STATUS_OK){}
    f600:	46c0      	nop			; (mov r8, r8)
    f602:	230c      	movs	r3, #12
    f604:	18f9      	adds	r1, r7, r3
    f606:	4b42      	ldr	r3, [pc, #264]	; (f710 <configure_BLE_module+0x1f0>)
    f608:	2208      	movs	r2, #8
    f60a:	0018      	movs	r0, r3
    f60c:	4b45      	ldr	r3, [pc, #276]	; (f724 <configure_BLE_module+0x204>)
    f60e:	4798      	blx	r3
    f610:	1e03      	subs	r3, r0, #0
    f612:	d1f6      	bne.n	f602 <configure_BLE_module+0xe2>
		for(int i = 0; i < 25000; ++i);
    f614:	2300      	movs	r3, #0
    f616:	657b      	str	r3, [r7, #84]	; 0x54
    f618:	e002      	b.n	f620 <configure_BLE_module+0x100>
    f61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f61c:	3301      	adds	r3, #1
    f61e:	657b      	str	r3, [r7, #84]	; 0x54
    f620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f622:	4a41      	ldr	r2, [pc, #260]	; (f728 <configure_BLE_module+0x208>)
    f624:	4293      	cmp	r3, r2
    f626:	ddf8      	ble.n	f61a <configure_BLE_module+0xfa>
		
		read_ble_packet();
    f628:	4b42      	ldr	r3, [pc, #264]	; (f734 <configure_BLE_module+0x214>)
    f62a:	4798      	blx	r3
		if(!BLE_CONFIGURED){
    f62c:	4b42      	ldr	r3, [pc, #264]	; (f738 <configure_BLE_module+0x218>)
    f62e:	781b      	ldrb	r3, [r3, #0]
    f630:	2201      	movs	r2, #1
    f632:	4053      	eors	r3, r2
    f634:	b2db      	uxtb	r3, r3
    f636:	2b00      	cmp	r3, #0
    f638:	d00e      	beq.n	f658 <configure_BLE_module+0x138>
			usart_disable(&ble_usart);
    f63a:	4b35      	ldr	r3, [pc, #212]	; (f710 <configure_BLE_module+0x1f0>)
    f63c:	0018      	movs	r0, r3
    f63e:	4b3f      	ldr	r3, [pc, #252]	; (f73c <configure_BLE_module+0x21c>)
    f640:	4798      	blx	r3
			for(int i = 0; i < 10000; ++i);
    f642:	2300      	movs	r3, #0
    f644:	653b      	str	r3, [r7, #80]	; 0x50
    f646:	e002      	b.n	f64e <configure_BLE_module+0x12e>
    f648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    f64a:	3301      	adds	r3, #1
    f64c:	653b      	str	r3, [r7, #80]	; 0x50
    f64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    f650:	4a31      	ldr	r2, [pc, #196]	; (f718 <configure_BLE_module+0x1f8>)
    f652:	4293      	cmp	r3, r2
    f654:	ddf8      	ble.n	f648 <configure_BLE_module+0x128>
	while(1){
    f656:	e76f      	b.n	f538 <configure_BLE_module+0x18>
		}
		else{
			uint8_t string4[8] = "AT+RESET";
    f658:	1d3b      	adds	r3, r7, #4
    f65a:	4a39      	ldr	r2, [pc, #228]	; (f740 <configure_BLE_module+0x220>)
    f65c:	ca03      	ldmia	r2!, {r0, r1}
    f65e:	c303      	stmia	r3!, {r0, r1}
			while(usart_write_buffer_wait(&ble_usart, string4, sizeof(string4))!=STATUS_OK){}
    f660:	46c0      	nop			; (mov r8, r8)
    f662:	1d39      	adds	r1, r7, #4
    f664:	4b2a      	ldr	r3, [pc, #168]	; (f710 <configure_BLE_module+0x1f0>)
    f666:	2208      	movs	r2, #8
    f668:	0018      	movs	r0, r3
    f66a:	4b2e      	ldr	r3, [pc, #184]	; (f724 <configure_BLE_module+0x204>)
    f66c:	4798      	blx	r3
    f66e:	1e03      	subs	r3, r0, #0
    f670:	d1f7      	bne.n	f662 <configure_BLE_module+0x142>
			for(int i = 0; i < 25000; ++i);
    f672:	2300      	movs	r3, #0
    f674:	64fb      	str	r3, [r7, #76]	; 0x4c
    f676:	e002      	b.n	f67e <configure_BLE_module+0x15e>
    f678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f67a:	3301      	adds	r3, #1
    f67c:	64fb      	str	r3, [r7, #76]	; 0x4c
    f67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f680:	4a29      	ldr	r2, [pc, #164]	; (f728 <configure_BLE_module+0x208>)
    f682:	4293      	cmp	r3, r2
    f684:	ddf8      	ble.n	f678 <configure_BLE_module+0x158>
			usart_disable(&ble_usart);
    f686:	4b22      	ldr	r3, [pc, #136]	; (f710 <configure_BLE_module+0x1f0>)
    f688:	0018      	movs	r0, r3
    f68a:	4b2c      	ldr	r3, [pc, #176]	; (f73c <configure_BLE_module+0x21c>)
    f68c:	4798      	blx	r3
			for(int i = 0; i < 500000; ++i);
    f68e:	2300      	movs	r3, #0
    f690:	64bb      	str	r3, [r7, #72]	; 0x48
    f692:	e002      	b.n	f69a <configure_BLE_module+0x17a>
    f694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f696:	3301      	adds	r3, #1
    f698:	64bb      	str	r3, [r7, #72]	; 0x48
    f69a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f69c:	4a29      	ldr	r2, [pc, #164]	; (f744 <configure_BLE_module+0x224>)
    f69e:	4293      	cmp	r3, r2
    f6a0:	ddf8      	ble.n	f694 <configure_BLE_module+0x174>
			configure_ble_usart(BLE_BAUD);
    f6a2:	23e1      	movs	r3, #225	; 0xe1
    f6a4:	025b      	lsls	r3, r3, #9
    f6a6:	0018      	movs	r0, r3
    f6a8:	4b17      	ldr	r3, [pc, #92]	; (f708 <configure_BLE_module+0x1e8>)
    f6aa:	4798      	blx	r3
			for(int i = 0; i < 5000; ++i);
    f6ac:	2300      	movs	r3, #0
    f6ae:	647b      	str	r3, [r7, #68]	; 0x44
    f6b0:	e002      	b.n	f6b8 <configure_BLE_module+0x198>
    f6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f6b4:	3301      	adds	r3, #1
    f6b6:	647b      	str	r3, [r7, #68]	; 0x44
    f6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f6ba:	4a23      	ldr	r2, [pc, #140]	; (f748 <configure_BLE_module+0x228>)
    f6bc:	4293      	cmp	r3, r2
    f6be:	ddf8      	ble.n	f6b2 <configure_BLE_module+0x192>
			uint8_t string5[2] = "AT";
    f6c0:	003b      	movs	r3, r7
    f6c2:	4a22      	ldr	r2, [pc, #136]	; (f74c <configure_BLE_module+0x22c>)
    f6c4:	801a      	strh	r2, [r3, #0]
			while(usart_write_buffer_wait(&ble_usart, string5, sizeof(string5))!=STATUS_OK){}
    f6c6:	46c0      	nop			; (mov r8, r8)
    f6c8:	0039      	movs	r1, r7
    f6ca:	4b11      	ldr	r3, [pc, #68]	; (f710 <configure_BLE_module+0x1f0>)
    f6cc:	2202      	movs	r2, #2
    f6ce:	0018      	movs	r0, r3
    f6d0:	4b14      	ldr	r3, [pc, #80]	; (f724 <configure_BLE_module+0x204>)
    f6d2:	4798      	blx	r3
    f6d4:	1e03      	subs	r3, r0, #0
    f6d6:	d1f7      	bne.n	f6c8 <configure_BLE_module+0x1a8>
			for(int i = 0; i < 10000; ++i);
    f6d8:	2300      	movs	r3, #0
    f6da:	643b      	str	r3, [r7, #64]	; 0x40
    f6dc:	e002      	b.n	f6e4 <configure_BLE_module+0x1c4>
    f6de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f6e0:	3301      	adds	r3, #1
    f6e2:	643b      	str	r3, [r7, #64]	; 0x40
    f6e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f6e6:	4a0c      	ldr	r2, [pc, #48]	; (f718 <configure_BLE_module+0x1f8>)
    f6e8:	4293      	cmp	r3, r2
    f6ea:	ddf8      	ble.n	f6de <configure_BLE_module+0x1be>
			usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
    f6ec:	4907      	ldr	r1, [pc, #28]	; (f70c <configure_BLE_module+0x1ec>)
    f6ee:	4b08      	ldr	r3, [pc, #32]	; (f710 <configure_BLE_module+0x1f0>)
    f6f0:	2213      	movs	r2, #19
    f6f2:	0018      	movs	r0, r3
    f6f4:	4b07      	ldr	r3, [pc, #28]	; (f714 <configure_BLE_module+0x1f4>)
    f6f6:	4798      	blx	r3
			break;
    f6f8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    f6fa:	46c0      	nop			; (mov r8, r8)
    f6fc:	46bd      	mov	sp, r7
    f6fe:	b01b      	add	sp, #108	; 0x6c
    f700:	bd90      	pop	{r4, r7, pc}
    f702:	46c0      	nop			; (mov r8, r8)
    f704:	000176d4 	.word	0x000176d4
    f708:	0000f499 	.word	0x0000f499
    f70c:	20000f08 	.word	0x20000f08
    f710:	200004a0 	.word	0x200004a0
    f714:	00006671 	.word	0x00006671
    f718:	0000270f 	.word	0x0000270f
    f71c:	000176c8 	.word	0x000176c8
    f720:	200003b4 	.word	0x200003b4
    f724:	000063bd 	.word	0x000063bd
    f728:	000061a7 	.word	0x000061a7
    f72c:	000176e8 	.word	0x000176e8
    f730:	000176f8 	.word	0x000176f8
    f734:	000101f1 	.word	0x000101f1
    f738:	200003ad 	.word	0x200003ad
    f73c:	00009295 	.word	0x00009295
    f740:	00017704 	.word	0x00017704
    f744:	0007a11f 	.word	0x0007a11f
    f748:	00001387 	.word	0x00001387
    f74c:	00005441 	.word	0x00005441

0000f750 <check_ble_AT_recieved>:

inline bool check_ble_AT_recieved(){
    f750:	b580      	push	{r7, lr}
    f752:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == 'O' && ble_USART_read_buffer[1] == 'K');
    f754:	4b08      	ldr	r3, [pc, #32]	; (f778 <check_ble_AT_recieved+0x28>)
    f756:	781b      	ldrb	r3, [r3, #0]
    f758:	2b4f      	cmp	r3, #79	; 0x4f
    f75a:	d105      	bne.n	f768 <check_ble_AT_recieved+0x18>
    f75c:	4b06      	ldr	r3, [pc, #24]	; (f778 <check_ble_AT_recieved+0x28>)
    f75e:	785b      	ldrb	r3, [r3, #1]
    f760:	2b4b      	cmp	r3, #75	; 0x4b
    f762:	d101      	bne.n	f768 <check_ble_AT_recieved+0x18>
    f764:	2301      	movs	r3, #1
    f766:	e000      	b.n	f76a <check_ble_AT_recieved+0x1a>
    f768:	2300      	movs	r3, #0
    f76a:	1c1a      	adds	r2, r3, #0
    f76c:	2301      	movs	r3, #1
    f76e:	4013      	ands	r3, r2
    f770:	b2db      	uxtb	r3, r3
}
    f772:	0018      	movs	r0, r3
    f774:	46bd      	mov	sp, r7
    f776:	bd80      	pop	{r7, pc}
    f778:	20000f08 	.word	0x20000f08

0000f77c <check_ble_packet_recieved>:

inline bool check_ble_packet_recieved(){
    f77c:	b580      	push	{r7, lr}
    f77e:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == BLE_START_BYTE && ble_USART_read_buffer[ble_USART_read_buffer[1]+3] == BLE_STOP_BYTE);
    f780:	4b0a      	ldr	r3, [pc, #40]	; (f7ac <check_ble_packet_recieved+0x30>)
    f782:	781b      	ldrb	r3, [r3, #0]
    f784:	2ba5      	cmp	r3, #165	; 0xa5
    f786:	d108      	bne.n	f79a <check_ble_packet_recieved+0x1e>
    f788:	4b08      	ldr	r3, [pc, #32]	; (f7ac <check_ble_packet_recieved+0x30>)
    f78a:	785b      	ldrb	r3, [r3, #1]
    f78c:	3303      	adds	r3, #3
    f78e:	4a07      	ldr	r2, [pc, #28]	; (f7ac <check_ble_packet_recieved+0x30>)
    f790:	5cd3      	ldrb	r3, [r2, r3]
    f792:	2b5a      	cmp	r3, #90	; 0x5a
    f794:	d101      	bne.n	f79a <check_ble_packet_recieved+0x1e>
    f796:	2301      	movs	r3, #1
    f798:	e000      	b.n	f79c <check_ble_packet_recieved+0x20>
    f79a:	2300      	movs	r3, #0
    f79c:	1c1a      	adds	r2, r3, #0
    f79e:	2301      	movs	r3, #1
    f7a0:	4013      	ands	r3, r2
    f7a2:	b2db      	uxtb	r3, r3
}
    f7a4:	0018      	movs	r0, r3
    f7a6:	46bd      	mov	sp, r7
    f7a8:	bd80      	pop	{r7, pc}
    f7aa:	46c0      	nop			; (mov r8, r8)
    f7ac:	20000f08 	.word	0x20000f08

0000f7b0 <process_ble_packet>:

void process_ble_packet(){
    f7b0:	b580      	push	{r7, lr}
    f7b2:	af00      	add	r7, sp, #0
	switch(ble_recieve_packet.ID){
    f7b4:	4bf4      	ldr	r3, [pc, #976]	; (fb88 <process_ble_packet+0x3d8>)
    f7b6:	781b      	ldrb	r3, [r3, #0]
    f7b8:	3baa      	subs	r3, #170	; 0xaa
    f7ba:	2b54      	cmp	r3, #84	; 0x54
    f7bc:	d901      	bls.n	f7c2 <process_ble_packet+0x12>
    f7be:	f000 fce9 	bl	10194 <process_ble_packet+0x9e4>
    f7c2:	009a      	lsls	r2, r3, #2
    f7c4:	4bf1      	ldr	r3, [pc, #964]	; (fb8c <process_ble_packet+0x3dc>)
    f7c6:	18d3      	adds	r3, r2, r3
    f7c8:	681b      	ldr	r3, [r3, #0]
    f7ca:	469f      	mov	pc, r3
		case Read_Motor_Limits:
			GET_LIMITS = 1;
    f7cc:	4bf0      	ldr	r3, [pc, #960]	; (fb90 <process_ble_packet+0x3e0>)
    f7ce:	2201      	movs	r2, #1
    f7d0:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f7d2:	4bf0      	ldr	r3, [pc, #960]	; (fb94 <process_ble_packet+0x3e4>)
    f7d4:	2200      	movs	r2, #0
    f7d6:	701a      	strb	r2, [r3, #0]
			break;
    f7d8:	f000 fcdc 	bl	10194 <process_ble_packet+0x9e4>
		case (int)Read_LED_Vars:
			SEND_LED_CHARS = 1;
    f7dc:	4bee      	ldr	r3, [pc, #952]	; (fb98 <process_ble_packet+0x3e8>)
    f7de:	2201      	movs	r2, #1
    f7e0:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f7e2:	4bec      	ldr	r3, [pc, #944]	; (fb94 <process_ble_packet+0x3e4>)
    f7e4:	2200      	movs	r2, #0
    f7e6:	701a      	strb	r2, [r3, #0]
			break;
    f7e8:	f000 fcd4 	bl	10194 <process_ble_packet+0x9e4>
		case Calibrate_All:
			_autoCalc = false; // Workaround so that calibrate doesnt include the current offset
    f7ec:	4beb      	ldr	r3, [pc, #940]	; (fb9c <process_ble_packet+0x3ec>)
    f7ee:	2200      	movs	r2, #0
    f7f0:	701a      	strb	r2, [r3, #0]
			calibrate(true);
    f7f2:	2001      	movs	r0, #1
    f7f4:	4bea      	ldr	r3, [pc, #936]	; (fba0 <process_ble_packet+0x3f0>)
    f7f6:	4798      	blx	r3
			save_cal_data();
    f7f8:	4bea      	ldr	r3, [pc, #936]	; (fba4 <process_ble_packet+0x3f4>)
    f7fa:	4798      	blx	r3
			break;
    f7fc:	f000 fcca 	bl	10194 <process_ble_packet+0x9e4>
		case Read_Sensor_Vars:
			SEND_SENSORS = 1;
    f800:	4be9      	ldr	r3, [pc, #932]	; (fba8 <process_ble_packet+0x3f8>)
    f802:	2201      	movs	r2, #1
    f804:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f806:	4be3      	ldr	r3, [pc, #908]	; (fb94 <process_ble_packet+0x3e4>)
    f808:	2200      	movs	r2, #0
    f80a:	701a      	strb	r2, [r3, #0]
			break;
    f80c:	f000 fcc2 	bl	10194 <process_ble_packet+0x9e4>
		case LED_Toggle:
			LIGHTS_ON = !LIGHTS_ON;
    f810:	4be6      	ldr	r3, [pc, #920]	; (fbac <process_ble_packet+0x3fc>)
    f812:	781b      	ldrb	r3, [r3, #0]
    f814:	425a      	negs	r2, r3
    f816:	4153      	adcs	r3, r2
    f818:	b2db      	uxtb	r3, r3
    f81a:	001a      	movs	r2, r3
    f81c:	4be3      	ldr	r3, [pc, #908]	; (fbac <process_ble_packet+0x3fc>)
    f81e:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f820:	4be3      	ldr	r3, [pc, #908]	; (fbb0 <process_ble_packet+0x400>)
    f822:	4798      	blx	r3
			break;
    f824:	f000 fcb6 	bl	10194 <process_ble_packet+0x9e4>
		case LED_Mode_Down:
			if(light_mode == 0)
    f828:	4be2      	ldr	r3, [pc, #904]	; (fbb4 <process_ble_packet+0x404>)
    f82a:	781b      	ldrb	r3, [r3, #0]
    f82c:	2b00      	cmp	r3, #0
    f82e:	d105      	bne.n	f83c <process_ble_packet+0x8c>
				light_mode = light_modes - 1;
    f830:	2309      	movs	r3, #9
    f832:	3b01      	subs	r3, #1
    f834:	b2da      	uxtb	r2, r3
    f836:	4bdf      	ldr	r3, [pc, #892]	; (fbb4 <process_ble_packet+0x404>)
    f838:	701a      	strb	r2, [r3, #0]
    f83a:	e005      	b.n	f848 <process_ble_packet+0x98>
			else
				light_mode--;
    f83c:	4bdd      	ldr	r3, [pc, #884]	; (fbb4 <process_ble_packet+0x404>)
    f83e:	781b      	ldrb	r3, [r3, #0]
    f840:	3b01      	subs	r3, #1
    f842:	b2da      	uxtb	r2, r3
    f844:	4bdb      	ldr	r3, [pc, #876]	; (fbb4 <process_ble_packet+0x404>)
    f846:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f848:	4bd9      	ldr	r3, [pc, #868]	; (fbb0 <process_ble_packet+0x400>)
    f84a:	4798      	blx	r3
			break;
    f84c:	f000 fca2 	bl	10194 <process_ble_packet+0x9e4>
		case LED_Mode_Up:
			light_mode++;
    f850:	4bd8      	ldr	r3, [pc, #864]	; (fbb4 <process_ble_packet+0x404>)
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	3301      	adds	r3, #1
    f856:	b2da      	uxtb	r2, r3
    f858:	4bd6      	ldr	r3, [pc, #856]	; (fbb4 <process_ble_packet+0x404>)
    f85a:	701a      	strb	r2, [r3, #0]
			if(light_mode >= light_modes)
    f85c:	4bd5      	ldr	r3, [pc, #852]	; (fbb4 <process_ble_packet+0x404>)
    f85e:	781b      	ldrb	r3, [r3, #0]
    f860:	2209      	movs	r2, #9
    f862:	4293      	cmp	r3, r2
    f864:	d302      	bcc.n	f86c <process_ble_packet+0xbc>
				light_mode = 0;
    f866:	4bd3      	ldr	r3, [pc, #844]	; (fbb4 <process_ble_packet+0x404>)
    f868:	2200      	movs	r2, #0
    f86a:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f86c:	4bd0      	ldr	r3, [pc, #832]	; (fbb0 <process_ble_packet+0x400>)
    f86e:	4798      	blx	r3
			break;
    f870:	f000 fc90 	bl	10194 <process_ble_packet+0x9e4>
		case Read_Orientaion:
			SEND_ORIENTAION_CONFIG = 1;
    f874:	4bd0      	ldr	r3, [pc, #832]	; (fbb8 <process_ble_packet+0x408>)
    f876:	2201      	movs	r2, #1
    f878:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f87a:	4bc6      	ldr	r3, [pc, #792]	; (fb94 <process_ble_packet+0x3e4>)
    f87c:	2200      	movs	r2, #0
    f87e:	701a      	strb	r2, [r3, #0]
			break;
    f880:	f000 fc88 	bl	10194 <process_ble_packet+0x9e4>
		case Read_Controls:
			SEND_CONTROLS_CONFIG = 1;
    f884:	4bcd      	ldr	r3, [pc, #820]	; (fbbc <process_ble_packet+0x40c>)
    f886:	2201      	movs	r2, #1
    f888:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f88a:	4bc2      	ldr	r3, [pc, #776]	; (fb94 <process_ble_packet+0x3e4>)
    f88c:	2200      	movs	r2, #0
    f88e:	701a      	strb	r2, [r3, #0]
			break;
    f890:	f000 fc80 	bl	10194 <process_ble_packet+0x9e4>
		case Read_Remote_Config:
			SEND_REMOTE_CONFIG = 1;
    f894:	4bca      	ldr	r3, [pc, #808]	; (fbc0 <process_ble_packet+0x410>)
    f896:	2201      	movs	r2, #1
    f898:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f89a:	4bbe      	ldr	r3, [pc, #760]	; (fb94 <process_ble_packet+0x3e4>)
    f89c:	2200      	movs	r2, #0
    f89e:	701a      	strb	r2, [r3, #0]
			break;
    f8a0:	f000 fc78 	bl	10194 <process_ble_packet+0x9e4>
		case Read_ESC_Config:
			SEND_ESC_CONFIG = 1;
    f8a4:	4bc7      	ldr	r3, [pc, #796]	; (fbc4 <process_ble_packet+0x414>)
    f8a6:	2201      	movs	r2, #1
    f8a8:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
    f8aa:	4bba      	ldr	r3, [pc, #744]	; (fb94 <process_ble_packet+0x3e4>)
    f8ac:	2200      	movs	r2, #0
    f8ae:	701a      	strb	r2, [r3, #0]
			break;
    f8b0:	f000 fc70 	bl	10194 <process_ble_packet+0x9e4>
		case Aux_Pressed:
			AppAuxButton = 1;
    f8b4:	4bc4      	ldr	r3, [pc, #784]	; (fbc8 <process_ble_packet+0x418>)
    f8b6:	2201      	movs	r2, #1
    f8b8:	701a      	strb	r2, [r3, #0]
			break;
    f8ba:	f000 fc6b 	bl	10194 <process_ble_packet+0x9e4>
		case Aux_Released:
			AppAuxButton = 0;
    f8be:	4bc2      	ldr	r3, [pc, #776]	; (fbc8 <process_ble_packet+0x418>)
    f8c0:	2200      	movs	r2, #0
    f8c2:	701a      	strb	r2, [r3, #0]
			break;
    f8c4:	f000 fc66 	bl	10194 <process_ble_packet+0x9e4>
		case Remote_Data:
			AppRemoteY = (ble_recieve_packet.payload[0] & 0x0FF);
    f8c8:	4baf      	ldr	r3, [pc, #700]	; (fb88 <process_ble_packet+0x3d8>)
    f8ca:	789a      	ldrb	r2, [r3, #2]
    f8cc:	4bbf      	ldr	r3, [pc, #764]	; (fbcc <process_ble_packet+0x41c>)
    f8ce:	701a      	strb	r2, [r3, #0]
			NEW_REMOTE_DATA = 1;
    f8d0:	4bbf      	ldr	r3, [pc, #764]	; (fbd0 <process_ble_packet+0x420>)
    f8d2:	2201      	movs	r2, #1
    f8d4:	701a      	strb	r2, [r3, #0]
			break;
    f8d6:	f000 fc5d 	bl	10194 <process_ble_packet+0x9e4>
		case RPM_Throttle:
			LIGHTS_ON = 1;
    f8da:	4bb4      	ldr	r3, [pc, #720]	; (fbac <process_ble_packet+0x3fc>)
    f8dc:	2201      	movs	r2, #1
    f8de:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_RPM_THROTTLE;
    f8e0:	4bb4      	ldr	r3, [pc, #720]	; (fbb4 <process_ble_packet+0x404>)
    f8e2:	2205      	movs	r2, #5
    f8e4:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f8e6:	4ba8      	ldr	r3, [pc, #672]	; (fb88 <process_ble_packet+0x3d8>)
    f8e8:	789a      	ldrb	r2, [r3, #2]
    f8ea:	4bba      	ldr	r3, [pc, #744]	; (fbd4 <process_ble_packet+0x424>)
    f8ec:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f8ee:	4bb9      	ldr	r3, [pc, #740]	; (fbd4 <process_ble_packet+0x424>)
    f8f0:	781b      	ldrb	r3, [r3, #0]
    f8f2:	111b      	asrs	r3, r3, #4
    f8f4:	b2db      	uxtb	r3, r3
    f8f6:	2201      	movs	r2, #1
    f8f8:	4013      	ands	r3, r2
    f8fa:	b2da      	uxtb	r2, r3
    f8fc:	4bb6      	ldr	r3, [pc, #728]	; (fbd8 <process_ble_packet+0x428>)
    f8fe:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f900:	4bb4      	ldr	r3, [pc, #720]	; (fbd4 <process_ble_packet+0x424>)
    f902:	781b      	ldrb	r3, [r3, #0]
    f904:	115b      	asrs	r3, r3, #5
    f906:	b2db      	uxtb	r3, r3
    f908:	2201      	movs	r2, #1
    f90a:	4013      	ands	r3, r2
    f90c:	b2da      	uxtb	r2, r3
    f90e:	4bb3      	ldr	r3, [pc, #716]	; (fbdc <process_ble_packet+0x42c>)
    f910:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f912:	4bb0      	ldr	r3, [pc, #704]	; (fbd4 <process_ble_packet+0x424>)
    f914:	781b      	ldrb	r3, [r3, #0]
    f916:	119b      	asrs	r3, r3, #6
    f918:	b2db      	uxtb	r3, r3
    f91a:	2201      	movs	r2, #1
    f91c:	4013      	ands	r3, r2
    f91e:	b2da      	uxtb	r2, r3
    f920:	4baf      	ldr	r3, [pc, #700]	; (fbe0 <process_ble_packet+0x430>)
    f922:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f924:	4bab      	ldr	r3, [pc, #684]	; (fbd4 <process_ble_packet+0x424>)
    f926:	781b      	ldrb	r3, [r3, #0]
    f928:	09db      	lsrs	r3, r3, #7
    f92a:	b2da      	uxtb	r2, r3
    f92c:	4bad      	ldr	r3, [pc, #692]	; (fbe4 <process_ble_packet+0x434>)
    f92e:	701a      	strb	r2, [r3, #0]
			save_led_data();
    f930:	4b9f      	ldr	r3, [pc, #636]	; (fbb0 <process_ble_packet+0x400>)
    f932:	4798      	blx	r3
			break;
    f934:	f000 fc2e 	bl	10194 <process_ble_packet+0x9e4>
		case Compass_Cycle_Values:
			LIGHTS_ON = 1;
    f938:	4b9c      	ldr	r3, [pc, #624]	; (fbac <process_ble_packet+0x3fc>)
    f93a:	2201      	movs	r2, #1
    f93c:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_COMPASS_CYCLE;
    f93e:	4b9d      	ldr	r3, [pc, #628]	; (fbb4 <process_ble_packet+0x404>)
    f940:	2202      	movs	r2, #2
    f942:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f944:	4b90      	ldr	r3, [pc, #576]	; (fb88 <process_ble_packet+0x3d8>)
    f946:	789a      	ldrb	r2, [r3, #2]
    f948:	4ba2      	ldr	r3, [pc, #648]	; (fbd4 <process_ble_packet+0x424>)
    f94a:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f94c:	4ba1      	ldr	r3, [pc, #644]	; (fbd4 <process_ble_packet+0x424>)
    f94e:	781b      	ldrb	r3, [r3, #0]
    f950:	111b      	asrs	r3, r3, #4
    f952:	b2db      	uxtb	r3, r3
    f954:	2201      	movs	r2, #1
    f956:	4013      	ands	r3, r2
    f958:	b2da      	uxtb	r2, r3
    f95a:	4b9f      	ldr	r3, [pc, #636]	; (fbd8 <process_ble_packet+0x428>)
    f95c:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f95e:	4b9d      	ldr	r3, [pc, #628]	; (fbd4 <process_ble_packet+0x424>)
    f960:	781b      	ldrb	r3, [r3, #0]
    f962:	115b      	asrs	r3, r3, #5
    f964:	b2db      	uxtb	r3, r3
    f966:	2201      	movs	r2, #1
    f968:	4013      	ands	r3, r2
    f96a:	b2da      	uxtb	r2, r3
    f96c:	4b9b      	ldr	r3, [pc, #620]	; (fbdc <process_ble_packet+0x42c>)
    f96e:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f970:	4b98      	ldr	r3, [pc, #608]	; (fbd4 <process_ble_packet+0x424>)
    f972:	781b      	ldrb	r3, [r3, #0]
    f974:	119b      	asrs	r3, r3, #6
    f976:	b2db      	uxtb	r3, r3
    f978:	2201      	movs	r2, #1
    f97a:	4013      	ands	r3, r2
    f97c:	b2da      	uxtb	r2, r3
    f97e:	4b98      	ldr	r3, [pc, #608]	; (fbe0 <process_ble_packet+0x430>)
    f980:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f982:	4b94      	ldr	r3, [pc, #592]	; (fbd4 <process_ble_packet+0x424>)
    f984:	781b      	ldrb	r3, [r3, #0]
    f986:	09db      	lsrs	r3, r3, #7
    f988:	b2da      	uxtb	r2, r3
    f98a:	4b96      	ldr	r3, [pc, #600]	; (fbe4 <process_ble_packet+0x434>)
    f98c:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_COMPASS_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    f98e:	4b7e      	ldr	r3, [pc, #504]	; (fb88 <process_ble_packet+0x3d8>)
    f990:	78da      	ldrb	r2, [r3, #3]
    f992:	4b95      	ldr	r3, [pc, #596]	; (fbe8 <process_ble_packet+0x438>)
    f994:	0010      	movs	r0, r2
    f996:	4798      	blx	r3
    f998:	1c02      	adds	r2, r0, #0
    f99a:	4b94      	ldr	r3, [pc, #592]	; (fbec <process_ble_packet+0x43c>)
    f99c:	4994      	ldr	r1, [pc, #592]	; (fbf0 <process_ble_packet+0x440>)
    f99e:	1c10      	adds	r0, r2, #0
    f9a0:	4798      	blx	r3
    f9a2:	1c03      	adds	r3, r0, #0
    f9a4:	1c1a      	adds	r2, r3, #0
    f9a6:	4b93      	ldr	r3, [pc, #588]	; (fbf4 <process_ble_packet+0x444>)
    f9a8:	609a      	str	r2, [r3, #8]
			save_led_data();
    f9aa:	4b81      	ldr	r3, [pc, #516]	; (fbb0 <process_ble_packet+0x400>)
    f9ac:	4798      	blx	r3
			break;
    f9ae:	f000 fbf1 	bl	10194 <process_ble_packet+0x9e4>
		case RPM_Values:
			LIGHTS_ON = 1;
    f9b2:	4b7e      	ldr	r3, [pc, #504]	; (fbac <process_ble_packet+0x3fc>)
    f9b4:	2201      	movs	r2, #1
    f9b6:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_RPM_CYCLE;
    f9b8:	4b7e      	ldr	r3, [pc, #504]	; (fbb4 <process_ble_packet+0x404>)
    f9ba:	2204      	movs	r2, #4
    f9bc:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    f9be:	4b72      	ldr	r3, [pc, #456]	; (fb88 <process_ble_packet+0x3d8>)
    f9c0:	789a      	ldrb	r2, [r3, #2]
    f9c2:	4b84      	ldr	r3, [pc, #528]	; (fbd4 <process_ble_packet+0x424>)
    f9c4:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f9c6:	4b83      	ldr	r3, [pc, #524]	; (fbd4 <process_ble_packet+0x424>)
    f9c8:	781b      	ldrb	r3, [r3, #0]
    f9ca:	111b      	asrs	r3, r3, #4
    f9cc:	b2db      	uxtb	r3, r3
    f9ce:	2201      	movs	r2, #1
    f9d0:	4013      	ands	r3, r2
    f9d2:	b2da      	uxtb	r2, r3
    f9d4:	4b80      	ldr	r3, [pc, #512]	; (fbd8 <process_ble_packet+0x428>)
    f9d6:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f9d8:	4b7e      	ldr	r3, [pc, #504]	; (fbd4 <process_ble_packet+0x424>)
    f9da:	781b      	ldrb	r3, [r3, #0]
    f9dc:	115b      	asrs	r3, r3, #5
    f9de:	b2db      	uxtb	r3, r3
    f9e0:	2201      	movs	r2, #1
    f9e2:	4013      	ands	r3, r2
    f9e4:	b2da      	uxtb	r2, r3
    f9e6:	4b7d      	ldr	r3, [pc, #500]	; (fbdc <process_ble_packet+0x42c>)
    f9e8:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f9ea:	4b7a      	ldr	r3, [pc, #488]	; (fbd4 <process_ble_packet+0x424>)
    f9ec:	781b      	ldrb	r3, [r3, #0]
    f9ee:	119b      	asrs	r3, r3, #6
    f9f0:	b2db      	uxtb	r3, r3
    f9f2:	2201      	movs	r2, #1
    f9f4:	4013      	ands	r3, r2
    f9f6:	b2da      	uxtb	r2, r3
    f9f8:	4b79      	ldr	r3, [pc, #484]	; (fbe0 <process_ble_packet+0x430>)
    f9fa:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f9fc:	4b75      	ldr	r3, [pc, #468]	; (fbd4 <process_ble_packet+0x424>)
    f9fe:	781b      	ldrb	r3, [r3, #0]
    fa00:	09db      	lsrs	r3, r3, #7
    fa02:	b2da      	uxtb	r2, r3
    fa04:	4b77      	ldr	r3, [pc, #476]	; (fbe4 <process_ble_packet+0x434>)
    fa06:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_RPM_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    fa08:	4b5f      	ldr	r3, [pc, #380]	; (fb88 <process_ble_packet+0x3d8>)
    fa0a:	78da      	ldrb	r2, [r3, #3]
    fa0c:	4b76      	ldr	r3, [pc, #472]	; (fbe8 <process_ble_packet+0x438>)
    fa0e:	0010      	movs	r0, r2
    fa10:	4798      	blx	r3
    fa12:	1c02      	adds	r2, r0, #0
    fa14:	4b75      	ldr	r3, [pc, #468]	; (fbec <process_ble_packet+0x43c>)
    fa16:	4976      	ldr	r1, [pc, #472]	; (fbf0 <process_ble_packet+0x440>)
    fa18:	1c10      	adds	r0, r2, #0
    fa1a:	4798      	blx	r3
    fa1c:	1c03      	adds	r3, r0, #0
    fa1e:	1c1a      	adds	r2, r3, #0
    fa20:	4b75      	ldr	r3, [pc, #468]	; (fbf8 <process_ble_packet+0x448>)
    fa22:	611a      	str	r2, [r3, #16]
			save_led_data();
    fa24:	4b62      	ldr	r3, [pc, #392]	; (fbb0 <process_ble_packet+0x400>)
    fa26:	4798      	blx	r3
			break;
    fa28:	e3b4      	b.n	10194 <process_ble_packet+0x9e4>
		case X_Accel_Values:
			LIGHTS_ON = 1;
    fa2a:	4b60      	ldr	r3, [pc, #384]	; (fbac <process_ble_packet+0x3fc>)
    fa2c:	2201      	movs	r2, #1
    fa2e:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_X_ACCEL;
    fa30:	4b60      	ldr	r3, [pc, #384]	; (fbb4 <process_ble_packet+0x404>)
    fa32:	2206      	movs	r2, #6
    fa34:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    fa36:	4b54      	ldr	r3, [pc, #336]	; (fb88 <process_ble_packet+0x3d8>)
    fa38:	789a      	ldrb	r2, [r3, #2]
    fa3a:	4b66      	ldr	r3, [pc, #408]	; (fbd4 <process_ble_packet+0x424>)
    fa3c:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    fa3e:	4b65      	ldr	r3, [pc, #404]	; (fbd4 <process_ble_packet+0x424>)
    fa40:	781b      	ldrb	r3, [r3, #0]
    fa42:	111b      	asrs	r3, r3, #4
    fa44:	b2db      	uxtb	r3, r3
    fa46:	2201      	movs	r2, #1
    fa48:	4013      	ands	r3, r2
    fa4a:	b2da      	uxtb	r2, r3
    fa4c:	4b62      	ldr	r3, [pc, #392]	; (fbd8 <process_ble_packet+0x428>)
    fa4e:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    fa50:	4b60      	ldr	r3, [pc, #384]	; (fbd4 <process_ble_packet+0x424>)
    fa52:	781b      	ldrb	r3, [r3, #0]
    fa54:	115b      	asrs	r3, r3, #5
    fa56:	b2db      	uxtb	r3, r3
    fa58:	2201      	movs	r2, #1
    fa5a:	4013      	ands	r3, r2
    fa5c:	b2da      	uxtb	r2, r3
    fa5e:	4b5f      	ldr	r3, [pc, #380]	; (fbdc <process_ble_packet+0x42c>)
    fa60:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    fa62:	4b5c      	ldr	r3, [pc, #368]	; (fbd4 <process_ble_packet+0x424>)
    fa64:	781b      	ldrb	r3, [r3, #0]
    fa66:	119b      	asrs	r3, r3, #6
    fa68:	b2db      	uxtb	r3, r3
    fa6a:	2201      	movs	r2, #1
    fa6c:	4013      	ands	r3, r2
    fa6e:	b2da      	uxtb	r2, r3
    fa70:	4b5b      	ldr	r3, [pc, #364]	; (fbe0 <process_ble_packet+0x430>)
    fa72:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    fa74:	4b57      	ldr	r3, [pc, #348]	; (fbd4 <process_ble_packet+0x424>)
    fa76:	781b      	ldrb	r3, [r3, #0]
    fa78:	09db      	lsrs	r3, r3, #7
    fa7a:	b2da      	uxtb	r2, r3
    fa7c:	4b59      	ldr	r3, [pc, #356]	; (fbe4 <process_ble_packet+0x434>)
    fa7e:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_X_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
    fa80:	4b41      	ldr	r3, [pc, #260]	; (fb88 <process_ble_packet+0x3d8>)
    fa82:	78da      	ldrb	r2, [r3, #3]
    fa84:	4b58      	ldr	r3, [pc, #352]	; (fbe8 <process_ble_packet+0x438>)
    fa86:	0010      	movs	r0, r2
    fa88:	4798      	blx	r3
    fa8a:	1c02      	adds	r2, r0, #0
    fa8c:	4b57      	ldr	r3, [pc, #348]	; (fbec <process_ble_packet+0x43c>)
    fa8e:	4958      	ldr	r1, [pc, #352]	; (fbf0 <process_ble_packet+0x440>)
    fa90:	1c10      	adds	r0, r2, #0
    fa92:	4798      	blx	r3
    fa94:	1c03      	adds	r3, r0, #0
    fa96:	1c1a      	adds	r2, r3, #0
    fa98:	4b57      	ldr	r3, [pc, #348]	; (fbf8 <process_ble_packet+0x448>)
    fa9a:	619a      	str	r2, [r3, #24]
			save_led_data();
    fa9c:	4b44      	ldr	r3, [pc, #272]	; (fbb0 <process_ble_packet+0x400>)
    fa9e:	4798      	blx	r3
			break;
    faa0:	e378      	b.n	10194 <process_ble_packet+0x9e4>
		case Y_Accel_Values:
			LIGHTS_ON = 1;
    faa2:	4b42      	ldr	r3, [pc, #264]	; (fbac <process_ble_packet+0x3fc>)
    faa4:	2201      	movs	r2, #1
    faa6:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_Y_ACCEL;
    faa8:	4b42      	ldr	r3, [pc, #264]	; (fbb4 <process_ble_packet+0x404>)
    faaa:	2207      	movs	r2, #7
    faac:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    faae:	4b36      	ldr	r3, [pc, #216]	; (fb88 <process_ble_packet+0x3d8>)
    fab0:	789a      	ldrb	r2, [r3, #2]
    fab2:	4b48      	ldr	r3, [pc, #288]	; (fbd4 <process_ble_packet+0x424>)
    fab4:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    fab6:	4b47      	ldr	r3, [pc, #284]	; (fbd4 <process_ble_packet+0x424>)
    fab8:	781b      	ldrb	r3, [r3, #0]
    faba:	111b      	asrs	r3, r3, #4
    fabc:	b2db      	uxtb	r3, r3
    fabe:	2201      	movs	r2, #1
    fac0:	4013      	ands	r3, r2
    fac2:	b2da      	uxtb	r2, r3
    fac4:	4b44      	ldr	r3, [pc, #272]	; (fbd8 <process_ble_packet+0x428>)
    fac6:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    fac8:	4b42      	ldr	r3, [pc, #264]	; (fbd4 <process_ble_packet+0x424>)
    faca:	781b      	ldrb	r3, [r3, #0]
    facc:	115b      	asrs	r3, r3, #5
    face:	b2db      	uxtb	r3, r3
    fad0:	2201      	movs	r2, #1
    fad2:	4013      	ands	r3, r2
    fad4:	b2da      	uxtb	r2, r3
    fad6:	4b41      	ldr	r3, [pc, #260]	; (fbdc <process_ble_packet+0x42c>)
    fad8:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    fada:	4b3e      	ldr	r3, [pc, #248]	; (fbd4 <process_ble_packet+0x424>)
    fadc:	781b      	ldrb	r3, [r3, #0]
    fade:	119b      	asrs	r3, r3, #6
    fae0:	b2db      	uxtb	r3, r3
    fae2:	2201      	movs	r2, #1
    fae4:	4013      	ands	r3, r2
    fae6:	b2da      	uxtb	r2, r3
    fae8:	4b3d      	ldr	r3, [pc, #244]	; (fbe0 <process_ble_packet+0x430>)
    faea:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    faec:	4b39      	ldr	r3, [pc, #228]	; (fbd4 <process_ble_packet+0x424>)
    faee:	781b      	ldrb	r3, [r3, #0]
    faf0:	09db      	lsrs	r3, r3, #7
    faf2:	b2da      	uxtb	r2, r3
    faf4:	4b3b      	ldr	r3, [pc, #236]	; (fbe4 <process_ble_packet+0x434>)
    faf6:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_Y_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
    faf8:	4b23      	ldr	r3, [pc, #140]	; (fb88 <process_ble_packet+0x3d8>)
    fafa:	78da      	ldrb	r2, [r3, #3]
    fafc:	4b3a      	ldr	r3, [pc, #232]	; (fbe8 <process_ble_packet+0x438>)
    fafe:	0010      	movs	r0, r2
    fb00:	4798      	blx	r3
    fb02:	1c02      	adds	r2, r0, #0
    fb04:	4b39      	ldr	r3, [pc, #228]	; (fbec <process_ble_packet+0x43c>)
    fb06:	493a      	ldr	r1, [pc, #232]	; (fbf0 <process_ble_packet+0x440>)
    fb08:	1c10      	adds	r0, r2, #0
    fb0a:	4798      	blx	r3
    fb0c:	1c03      	adds	r3, r0, #0
    fb0e:	1c1a      	adds	r2, r3, #0
    fb10:	4b38      	ldr	r3, [pc, #224]	; (fbf4 <process_ble_packet+0x444>)
    fb12:	61da      	str	r2, [r3, #28]
			save_led_data();
    fb14:	4b26      	ldr	r3, [pc, #152]	; (fbb0 <process_ble_packet+0x400>)
    fb16:	4798      	blx	r3
			break;
    fb18:	e33c      	b.n	10194 <process_ble_packet+0x9e4>
		case Apply_Orientation:
			ORIENTATION[0] = ble_recieve_packet.payload[0];
    fb1a:	4b1b      	ldr	r3, [pc, #108]	; (fb88 <process_ble_packet+0x3d8>)
    fb1c:	789a      	ldrb	r2, [r3, #2]
    fb1e:	4b37      	ldr	r3, [pc, #220]	; (fbfc <process_ble_packet+0x44c>)
    fb20:	701a      	strb	r2, [r3, #0]
			ORIENTATION[1] = ble_recieve_packet.payload[1];
    fb22:	4b19      	ldr	r3, [pc, #100]	; (fb88 <process_ble_packet+0x3d8>)
    fb24:	78da      	ldrb	r2, [r3, #3]
    fb26:	4b35      	ldr	r3, [pc, #212]	; (fbfc <process_ble_packet+0x44c>)
    fb28:	705a      	strb	r2, [r3, #1]
			save_orientation_controls_remote_esc();
    fb2a:	4b35      	ldr	r3, [pc, #212]	; (fc00 <process_ble_packet+0x450>)
    fb2c:	4798      	blx	r3
			break;
    fb2e:	e331      	b.n	10194 <process_ble_packet+0x9e4>
		case Apply_Remote_Config:
			remote_type = (ble_recieve_packet.payload[0]&0x0F0)>>4;
    fb30:	4b15      	ldr	r3, [pc, #84]	; (fb88 <process_ble_packet+0x3d8>)
    fb32:	789b      	ldrb	r3, [r3, #2]
    fb34:	091b      	lsrs	r3, r3, #4
    fb36:	b2da      	uxtb	r2, r3
    fb38:	4b32      	ldr	r3, [pc, #200]	; (fc04 <process_ble_packet+0x454>)
    fb3a:	701a      	strb	r2, [r3, #0]
			button_type = (ble_recieve_packet.payload[0]&0x0F);
    fb3c:	4b12      	ldr	r3, [pc, #72]	; (fb88 <process_ble_packet+0x3d8>)
    fb3e:	789b      	ldrb	r3, [r3, #2]
    fb40:	220f      	movs	r2, #15
    fb42:	4013      	ands	r3, r2
    fb44:	b2da      	uxtb	r2, r3
    fb46:	4b30      	ldr	r3, [pc, #192]	; (fc08 <process_ble_packet+0x458>)
    fb48:	701a      	strb	r2, [r3, #0]
			deadzone = ble_recieve_packet.payload[1];
    fb4a:	4b0f      	ldr	r3, [pc, #60]	; (fb88 <process_ble_packet+0x3d8>)
    fb4c:	78da      	ldrb	r2, [r3, #3]
    fb4e:	4b2f      	ldr	r3, [pc, #188]	; (fc0c <process_ble_packet+0x45c>)
    fb50:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc();
    fb52:	4b2b      	ldr	r3, [pc, #172]	; (fc00 <process_ble_packet+0x450>)
    fb54:	4798      	blx	r3
			break;
    fb56:	e31d      	b.n	10194 <process_ble_packet+0x9e4>
		case Apply_ESC_Config:
			esc_fw = ble_recieve_packet.payload[0];
    fb58:	4b0b      	ldr	r3, [pc, #44]	; (fb88 <process_ble_packet+0x3d8>)
    fb5a:	789a      	ldrb	r2, [r3, #2]
    fb5c:	4b2c      	ldr	r3, [pc, #176]	; (fc10 <process_ble_packet+0x460>)
    fb5e:	701a      	strb	r2, [r3, #0]
			esc_comms = (ble_recieve_packet.payload[1]&0x0F0)>>4;
    fb60:	4b09      	ldr	r3, [pc, #36]	; (fb88 <process_ble_packet+0x3d8>)
    fb62:	78db      	ldrb	r3, [r3, #3]
    fb64:	091b      	lsrs	r3, r3, #4
    fb66:	b2da      	uxtb	r2, r3
    fb68:	4b2a      	ldr	r3, [pc, #168]	; (fc14 <process_ble_packet+0x464>)
    fb6a:	701a      	strb	r2, [r3, #0]
			UART_baud = (ble_recieve_packet.payload[1]&0x0F);
    fb6c:	4b06      	ldr	r3, [pc, #24]	; (fb88 <process_ble_packet+0x3d8>)
    fb6e:	78db      	ldrb	r3, [r3, #3]
    fb70:	220f      	movs	r2, #15
    fb72:	4013      	ands	r3, r2
    fb74:	b2da      	uxtb	r2, r3
    fb76:	4b28      	ldr	r3, [pc, #160]	; (fc18 <process_ble_packet+0x468>)
    fb78:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc();
    fb7a:	4b21      	ldr	r3, [pc, #132]	; (fc00 <process_ble_packet+0x450>)
    fb7c:	4798      	blx	r3
			configured_comms = esc_comms;
    fb7e:	4b25      	ldr	r3, [pc, #148]	; (fc14 <process_ble_packet+0x464>)
    fb80:	781a      	ldrb	r2, [r3, #0]
    fb82:	4b26      	ldr	r3, [pc, #152]	; (fc1c <process_ble_packet+0x46c>)
    fb84:	701a      	strb	r2, [r3, #0]
			break;
    fb86:	e305      	b.n	10194 <process_ble_packet+0x9e4>
    fb88:	200004d4 	.word	0x200004d4
    fb8c:	00017714 	.word	0x00017714
    fb90:	20000019 	.word	0x20000019
    fb94:	200000b1 	.word	0x200000b1
    fb98:	200003ac 	.word	0x200003ac
    fb9c:	20000908 	.word	0x20000908
    fba0:	000098d9 	.word	0x000098d9
    fba4:	0000ee19 	.word	0x0000ee19
    fba8:	200003af 	.word	0x200003af
    fbac:	200000a3 	.word	0x200000a3
    fbb0:	0000e629 	.word	0x0000e629
    fbb4:	2000001b 	.word	0x2000001b
    fbb8:	200003b0 	.word	0x200003b0
    fbbc:	200003b1 	.word	0x200003b1
    fbc0:	200003b2 	.word	0x200003b2
    fbc4:	200003b3 	.word	0x200003b3
    fbc8:	20000386 	.word	0x20000386
    fbcc:	200000b3 	.word	0x200000b3
    fbd0:	200003ae 	.word	0x200003ae
    fbd4:	20000325 	.word	0x20000325
    fbd8:	200000a2 	.word	0x200000a2
    fbdc:	20000322 	.word	0x20000322
    fbe0:	20000323 	.word	0x20000323
    fbe4:	20000324 	.word	0x20000324
    fbe8:	000152f9 	.word	0x000152f9
    fbec:	000148c1 	.word	0x000148c1
    fbf0:	42c80000 	.word	0x42c80000
    fbf4:	2000004c 	.word	0x2000004c
    fbf8:	20000028 	.word	0x20000028
    fbfc:	20000004 	.word	0x20000004
    fc00:	0000f109 	.word	0x0000f109
    fc04:	20000308 	.word	0x20000308
    fc08:	20000309 	.word	0x20000309
    fc0c:	20000018 	.word	0x20000018
    fc10:	2000001a 	.word	0x2000001a
    fc14:	20000310 	.word	0x20000310
    fc18:	20000311 	.word	0x20000311
    fc1c:	2000036e 	.word	0x2000036e
		case Color_Cycle_Values:
			LIGHTS_ON = 1;
    fc20:	4bd1      	ldr	r3, [pc, #836]	; (ff68 <process_ble_packet+0x7b8>)
    fc22:	2201      	movs	r2, #1
    fc24:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_COLOR_CYCLE;
    fc26:	4bd1      	ldr	r3, [pc, #836]	; (ff6c <process_ble_packet+0x7bc>)
    fc28:	2201      	movs	r2, #1
    fc2a:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    fc2c:	4bd0      	ldr	r3, [pc, #832]	; (ff70 <process_ble_packet+0x7c0>)
    fc2e:	789a      	ldrb	r2, [r3, #2]
    fc30:	4bd0      	ldr	r3, [pc, #832]	; (ff74 <process_ble_packet+0x7c4>)
    fc32:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    fc34:	4bcf      	ldr	r3, [pc, #828]	; (ff74 <process_ble_packet+0x7c4>)
    fc36:	781b      	ldrb	r3, [r3, #0]
    fc38:	111b      	asrs	r3, r3, #4
    fc3a:	b2db      	uxtb	r3, r3
    fc3c:	2201      	movs	r2, #1
    fc3e:	4013      	ands	r3, r2
    fc40:	b2da      	uxtb	r2, r3
    fc42:	4bcd      	ldr	r3, [pc, #820]	; (ff78 <process_ble_packet+0x7c8>)
    fc44:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    fc46:	4bcb      	ldr	r3, [pc, #812]	; (ff74 <process_ble_packet+0x7c4>)
    fc48:	781b      	ldrb	r3, [r3, #0]
    fc4a:	115b      	asrs	r3, r3, #5
    fc4c:	b2db      	uxtb	r3, r3
    fc4e:	2201      	movs	r2, #1
    fc50:	4013      	ands	r3, r2
    fc52:	b2da      	uxtb	r2, r3
    fc54:	4bc9      	ldr	r3, [pc, #804]	; (ff7c <process_ble_packet+0x7cc>)
    fc56:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    fc58:	4bc6      	ldr	r3, [pc, #792]	; (ff74 <process_ble_packet+0x7c4>)
    fc5a:	781b      	ldrb	r3, [r3, #0]
    fc5c:	119b      	asrs	r3, r3, #6
    fc5e:	b2db      	uxtb	r3, r3
    fc60:	2201      	movs	r2, #1
    fc62:	4013      	ands	r3, r2
    fc64:	b2da      	uxtb	r2, r3
    fc66:	4bc6      	ldr	r3, [pc, #792]	; (ff80 <process_ble_packet+0x7d0>)
    fc68:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    fc6a:	4bc2      	ldr	r3, [pc, #776]	; (ff74 <process_ble_packet+0x7c4>)
    fc6c:	781b      	ldrb	r3, [r3, #0]
    fc6e:	09db      	lsrs	r3, r3, #7
    fc70:	b2da      	uxtb	r2, r3
    fc72:	4bc4      	ldr	r3, [pc, #784]	; (ff84 <process_ble_packet+0x7d4>)
    fc74:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    fc76:	4bbe      	ldr	r3, [pc, #760]	; (ff70 <process_ble_packet+0x7c0>)
    fc78:	78da      	ldrb	r2, [r3, #3]
    fc7a:	4bc3      	ldr	r3, [pc, #780]	; (ff88 <process_ble_packet+0x7d8>)
    fc7c:	0010      	movs	r0, r2
    fc7e:	4798      	blx	r3
    fc80:	1c02      	adds	r2, r0, #0
    fc82:	4bc2      	ldr	r3, [pc, #776]	; (ff8c <process_ble_packet+0x7dc>)
    fc84:	49c2      	ldr	r1, [pc, #776]	; (ff90 <process_ble_packet+0x7e0>)
    fc86:	1c10      	adds	r0, r2, #0
    fc88:	4798      	blx	r3
    fc8a:	1c03      	adds	r3, r0, #0
    fc8c:	1c1a      	adds	r2, r3, #0
    fc8e:	4bc1      	ldr	r3, [pc, #772]	; (ff94 <process_ble_packet+0x7e4>)
    fc90:	605a      	str	r2, [r3, #4]
			Brightness[MODE_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[2]))/100;
    fc92:	4bb7      	ldr	r3, [pc, #732]	; (ff70 <process_ble_packet+0x7c0>)
    fc94:	791a      	ldrb	r2, [r3, #4]
    fc96:	4bbc      	ldr	r3, [pc, #752]	; (ff88 <process_ble_packet+0x7d8>)
    fc98:	0010      	movs	r0, r2
    fc9a:	4798      	blx	r3
    fc9c:	1c02      	adds	r2, r0, #0
    fc9e:	4bbb      	ldr	r3, [pc, #748]	; (ff8c <process_ble_packet+0x7dc>)
    fca0:	49bb      	ldr	r1, [pc, #748]	; (ff90 <process_ble_packet+0x7e0>)
    fca2:	1c10      	adds	r0, r2, #0
    fca4:	4798      	blx	r3
    fca6:	1c03      	adds	r3, r0, #0
    fca8:	1c1a      	adds	r2, r3, #0
    fcaa:	4bbb      	ldr	r3, [pc, #748]	; (ff98 <process_ble_packet+0x7e8>)
    fcac:	605a      	str	r2, [r3, #4]
			save_led_data();
    fcae:	4bbb      	ldr	r3, [pc, #748]	; (ff9c <process_ble_packet+0x7ec>)
    fcb0:	4798      	blx	r3
			break;
    fcb2:	e26f      	b.n	10194 <process_ble_packet+0x9e4>
		case Throttle_Values:
			LIGHTS_ON = 1;
    fcb4:	4bac      	ldr	r3, [pc, #688]	; (ff68 <process_ble_packet+0x7b8>)
    fcb6:	2201      	movs	r2, #1
    fcb8:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_THROTTLE;
    fcba:	4bac      	ldr	r3, [pc, #688]	; (ff6c <process_ble_packet+0x7bc>)
    fcbc:	2203      	movs	r2, #3
    fcbe:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    fcc0:	4bab      	ldr	r3, [pc, #684]	; (ff70 <process_ble_packet+0x7c0>)
    fcc2:	789a      	ldrb	r2, [r3, #2]
    fcc4:	4bab      	ldr	r3, [pc, #684]	; (ff74 <process_ble_packet+0x7c4>)
    fcc6:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    fcc8:	4baa      	ldr	r3, [pc, #680]	; (ff74 <process_ble_packet+0x7c4>)
    fcca:	781b      	ldrb	r3, [r3, #0]
    fccc:	111b      	asrs	r3, r3, #4
    fcce:	b2db      	uxtb	r3, r3
    fcd0:	2201      	movs	r2, #1
    fcd2:	4013      	ands	r3, r2
    fcd4:	b2da      	uxtb	r2, r3
    fcd6:	4ba8      	ldr	r3, [pc, #672]	; (ff78 <process_ble_packet+0x7c8>)
    fcd8:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    fcda:	4ba6      	ldr	r3, [pc, #664]	; (ff74 <process_ble_packet+0x7c4>)
    fcdc:	781b      	ldrb	r3, [r3, #0]
    fcde:	115b      	asrs	r3, r3, #5
    fce0:	b2db      	uxtb	r3, r3
    fce2:	2201      	movs	r2, #1
    fce4:	4013      	ands	r3, r2
    fce6:	b2da      	uxtb	r2, r3
    fce8:	4ba4      	ldr	r3, [pc, #656]	; (ff7c <process_ble_packet+0x7cc>)
    fcea:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    fcec:	4ba1      	ldr	r3, [pc, #644]	; (ff74 <process_ble_packet+0x7c4>)
    fcee:	781b      	ldrb	r3, [r3, #0]
    fcf0:	119b      	asrs	r3, r3, #6
    fcf2:	b2db      	uxtb	r3, r3
    fcf4:	2201      	movs	r2, #1
    fcf6:	4013      	ands	r3, r2
    fcf8:	b2da      	uxtb	r2, r3
    fcfa:	4ba1      	ldr	r3, [pc, #644]	; (ff80 <process_ble_packet+0x7d0>)
    fcfc:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    fcfe:	4b9d      	ldr	r3, [pc, #628]	; (ff74 <process_ble_packet+0x7c4>)
    fd00:	781b      	ldrb	r3, [r3, #0]
    fd02:	09db      	lsrs	r3, r3, #7
    fd04:	b2da      	uxtb	r2, r3
    fd06:	4b9f      	ldr	r3, [pc, #636]	; (ff84 <process_ble_packet+0x7d4>)
    fd08:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_THROTTLE] = ((float)(ble_recieve_packet.payload[1]))/100;
    fd0a:	4b99      	ldr	r3, [pc, #612]	; (ff70 <process_ble_packet+0x7c0>)
    fd0c:	78da      	ldrb	r2, [r3, #3]
    fd0e:	4b9e      	ldr	r3, [pc, #632]	; (ff88 <process_ble_packet+0x7d8>)
    fd10:	0010      	movs	r0, r2
    fd12:	4798      	blx	r3
    fd14:	1c02      	adds	r2, r0, #0
    fd16:	4b9d      	ldr	r3, [pc, #628]	; (ff8c <process_ble_packet+0x7dc>)
    fd18:	499d      	ldr	r1, [pc, #628]	; (ff90 <process_ble_packet+0x7e0>)
    fd1a:	1c10      	adds	r0, r2, #0
    fd1c:	4798      	blx	r3
    fd1e:	1c03      	adds	r3, r0, #0
    fd20:	1c1a      	adds	r2, r3, #0
    fd22:	4b9c      	ldr	r3, [pc, #624]	; (ff94 <process_ble_packet+0x7e4>)
    fd24:	60da      	str	r2, [r3, #12]
			Brightness[MODE_THROTTLE] = ((float)(ble_recieve_packet.payload[2]))/100;
    fd26:	4b92      	ldr	r3, [pc, #584]	; (ff70 <process_ble_packet+0x7c0>)
    fd28:	791a      	ldrb	r2, [r3, #4]
    fd2a:	4b97      	ldr	r3, [pc, #604]	; (ff88 <process_ble_packet+0x7d8>)
    fd2c:	0010      	movs	r0, r2
    fd2e:	4798      	blx	r3
    fd30:	1c02      	adds	r2, r0, #0
    fd32:	4b96      	ldr	r3, [pc, #600]	; (ff8c <process_ble_packet+0x7dc>)
    fd34:	4996      	ldr	r1, [pc, #600]	; (ff90 <process_ble_packet+0x7e0>)
    fd36:	1c10      	adds	r0, r2, #0
    fd38:	4798      	blx	r3
    fd3a:	1c03      	adds	r3, r0, #0
    fd3c:	1c1a      	adds	r2, r3, #0
    fd3e:	4b96      	ldr	r3, [pc, #600]	; (ff98 <process_ble_packet+0x7e8>)
    fd40:	60da      	str	r2, [r3, #12]
			save_led_data();
    fd42:	4b96      	ldr	r3, [pc, #600]	; (ff9c <process_ble_packet+0x7ec>)
    fd44:	4798      	blx	r3
			break;
    fd46:	e225      	b.n	10194 <process_ble_packet+0x9e4>
		case Static_Values:
			LIGHTS_ON = 1;
    fd48:	4b87      	ldr	r3, [pc, #540]	; (ff68 <process_ble_packet+0x7b8>)
    fd4a:	2201      	movs	r2, #1
    fd4c:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_STATIC;
    fd4e:	4b87      	ldr	r3, [pc, #540]	; (ff6c <process_ble_packet+0x7bc>)
    fd50:	2200      	movs	r2, #0
    fd52:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
    fd54:	4b86      	ldr	r3, [pc, #536]	; (ff70 <process_ble_packet+0x7c0>)
    fd56:	789a      	ldrb	r2, [r3, #2]
    fd58:	4b86      	ldr	r3, [pc, #536]	; (ff74 <process_ble_packet+0x7c4>)
    fd5a:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    fd5c:	4b85      	ldr	r3, [pc, #532]	; (ff74 <process_ble_packet+0x7c4>)
    fd5e:	781b      	ldrb	r3, [r3, #0]
    fd60:	111b      	asrs	r3, r3, #4
    fd62:	b2db      	uxtb	r3, r3
    fd64:	2201      	movs	r2, #1
    fd66:	4013      	ands	r3, r2
    fd68:	b2da      	uxtb	r2, r3
    fd6a:	4b83      	ldr	r3, [pc, #524]	; (ff78 <process_ble_packet+0x7c8>)
    fd6c:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    fd6e:	4b81      	ldr	r3, [pc, #516]	; (ff74 <process_ble_packet+0x7c4>)
    fd70:	781b      	ldrb	r3, [r3, #0]
    fd72:	115b      	asrs	r3, r3, #5
    fd74:	b2db      	uxtb	r3, r3
    fd76:	2201      	movs	r2, #1
    fd78:	4013      	ands	r3, r2
    fd7a:	b2da      	uxtb	r2, r3
    fd7c:	4b7f      	ldr	r3, [pc, #508]	; (ff7c <process_ble_packet+0x7cc>)
    fd7e:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    fd80:	4b7c      	ldr	r3, [pc, #496]	; (ff74 <process_ble_packet+0x7c4>)
    fd82:	781b      	ldrb	r3, [r3, #0]
    fd84:	119b      	asrs	r3, r3, #6
    fd86:	b2db      	uxtb	r3, r3
    fd88:	2201      	movs	r2, #1
    fd8a:	4013      	ands	r3, r2
    fd8c:	b2da      	uxtb	r2, r3
    fd8e:	4b7c      	ldr	r3, [pc, #496]	; (ff80 <process_ble_packet+0x7d0>)
    fd90:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    fd92:	4b78      	ldr	r3, [pc, #480]	; (ff74 <process_ble_packet+0x7c4>)
    fd94:	781b      	ldrb	r3, [r3, #0]
    fd96:	09db      	lsrs	r3, r3, #7
    fd98:	b2da      	uxtb	r2, r3
    fd9a:	4b7a      	ldr	r3, [pc, #488]	; (ff84 <process_ble_packet+0x7d4>)
    fd9c:	701a      	strb	r2, [r3, #0]
			Static_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[1] * 257);
    fd9e:	4b74      	ldr	r3, [pc, #464]	; (ff70 <process_ble_packet+0x7c0>)
    fda0:	78da      	ldrb	r2, [r3, #3]
    fda2:	4b79      	ldr	r3, [pc, #484]	; (ff88 <process_ble_packet+0x7d8>)
    fda4:	0010      	movs	r0, r2
    fda6:	4798      	blx	r3
    fda8:	1c02      	adds	r2, r0, #0
    fdaa:	4b7d      	ldr	r3, [pc, #500]	; (ffa0 <process_ble_packet+0x7f0>)
    fdac:	497d      	ldr	r1, [pc, #500]	; (ffa4 <process_ble_packet+0x7f4>)
    fdae:	1c10      	adds	r0, r2, #0
    fdb0:	4798      	blx	r3
    fdb2:	1c03      	adds	r3, r0, #0
    fdb4:	1c1a      	adds	r2, r3, #0
    fdb6:	4b7c      	ldr	r3, [pc, #496]	; (ffa8 <process_ble_packet+0x7f8>)
    fdb8:	1c10      	adds	r0, r2, #0
    fdba:	4798      	blx	r3
    fdbc:	0003      	movs	r3, r0
    fdbe:	b29a      	uxth	r2, r3
    fdc0:	4b7a      	ldr	r3, [pc, #488]	; (ffac <process_ble_packet+0x7fc>)
    fdc2:	801a      	strh	r2, [r3, #0]
			Static_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[2] * 257);
    fdc4:	4b6a      	ldr	r3, [pc, #424]	; (ff70 <process_ble_packet+0x7c0>)
    fdc6:	791a      	ldrb	r2, [r3, #4]
    fdc8:	4b6f      	ldr	r3, [pc, #444]	; (ff88 <process_ble_packet+0x7d8>)
    fdca:	0010      	movs	r0, r2
    fdcc:	4798      	blx	r3
    fdce:	1c02      	adds	r2, r0, #0
    fdd0:	4b73      	ldr	r3, [pc, #460]	; (ffa0 <process_ble_packet+0x7f0>)
    fdd2:	4974      	ldr	r1, [pc, #464]	; (ffa4 <process_ble_packet+0x7f4>)
    fdd4:	1c10      	adds	r0, r2, #0
    fdd6:	4798      	blx	r3
    fdd8:	1c03      	adds	r3, r0, #0
    fdda:	1c1a      	adds	r2, r3, #0
    fddc:	4b72      	ldr	r3, [pc, #456]	; (ffa8 <process_ble_packet+0x7f8>)
    fdde:	1c10      	adds	r0, r2, #0
    fde0:	4798      	blx	r3
    fde2:	0003      	movs	r3, r0
    fde4:	b29a      	uxth	r2, r3
    fde6:	4b71      	ldr	r3, [pc, #452]	; (ffac <process_ble_packet+0x7fc>)
    fde8:	805a      	strh	r2, [r3, #2]
			Static_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
    fdea:	4b61      	ldr	r3, [pc, #388]	; (ff70 <process_ble_packet+0x7c0>)
    fdec:	795a      	ldrb	r2, [r3, #5]
    fdee:	4b66      	ldr	r3, [pc, #408]	; (ff88 <process_ble_packet+0x7d8>)
    fdf0:	0010      	movs	r0, r2
    fdf2:	4798      	blx	r3
    fdf4:	1c02      	adds	r2, r0, #0
    fdf6:	4b6a      	ldr	r3, [pc, #424]	; (ffa0 <process_ble_packet+0x7f0>)
    fdf8:	496a      	ldr	r1, [pc, #424]	; (ffa4 <process_ble_packet+0x7f4>)
    fdfa:	1c10      	adds	r0, r2, #0
    fdfc:	4798      	blx	r3
    fdfe:	1c03      	adds	r3, r0, #0
    fe00:	1c1a      	adds	r2, r3, #0
    fe02:	4b69      	ldr	r3, [pc, #420]	; (ffa8 <process_ble_packet+0x7f8>)
    fe04:	1c10      	adds	r0, r2, #0
    fe06:	4798      	blx	r3
    fe08:	0003      	movs	r3, r0
    fe0a:	b29a      	uxth	r2, r3
    fe0c:	4b67      	ldr	r3, [pc, #412]	; (ffac <process_ble_packet+0x7fc>)
    fe0e:	809a      	strh	r2, [r3, #4]
			Static_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
    fe10:	4b57      	ldr	r3, [pc, #348]	; (ff70 <process_ble_packet+0x7c0>)
    fe12:	799a      	ldrb	r2, [r3, #6]
    fe14:	4b5c      	ldr	r3, [pc, #368]	; (ff88 <process_ble_packet+0x7d8>)
    fe16:	0010      	movs	r0, r2
    fe18:	4798      	blx	r3
    fe1a:	1c02      	adds	r2, r0, #0
    fe1c:	4b60      	ldr	r3, [pc, #384]	; (ffa0 <process_ble_packet+0x7f0>)
    fe1e:	4961      	ldr	r1, [pc, #388]	; (ffa4 <process_ble_packet+0x7f4>)
    fe20:	1c10      	adds	r0, r2, #0
    fe22:	4798      	blx	r3
    fe24:	1c03      	adds	r3, r0, #0
    fe26:	1c1a      	adds	r2, r3, #0
    fe28:	4b5f      	ldr	r3, [pc, #380]	; (ffa8 <process_ble_packet+0x7f8>)
    fe2a:	1c10      	adds	r0, r2, #0
    fe2c:	4798      	blx	r3
    fe2e:	0003      	movs	r3, r0
    fe30:	b29a      	uxth	r2, r3
    fe32:	4b5e      	ldr	r3, [pc, #376]	; (ffac <process_ble_packet+0x7fc>)
    fe34:	80da      	strh	r2, [r3, #6]
			Static_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
    fe36:	4b4e      	ldr	r3, [pc, #312]	; (ff70 <process_ble_packet+0x7c0>)
    fe38:	79da      	ldrb	r2, [r3, #7]
    fe3a:	4b53      	ldr	r3, [pc, #332]	; (ff88 <process_ble_packet+0x7d8>)
    fe3c:	0010      	movs	r0, r2
    fe3e:	4798      	blx	r3
    fe40:	1c02      	adds	r2, r0, #0
    fe42:	4b57      	ldr	r3, [pc, #348]	; (ffa0 <process_ble_packet+0x7f0>)
    fe44:	4957      	ldr	r1, [pc, #348]	; (ffa4 <process_ble_packet+0x7f4>)
    fe46:	1c10      	adds	r0, r2, #0
    fe48:	4798      	blx	r3
    fe4a:	1c03      	adds	r3, r0, #0
    fe4c:	1c1a      	adds	r2, r3, #0
    fe4e:	4b56      	ldr	r3, [pc, #344]	; (ffa8 <process_ble_packet+0x7f8>)
    fe50:	1c10      	adds	r0, r2, #0
    fe52:	4798      	blx	r3
    fe54:	0003      	movs	r3, r0
    fe56:	b29a      	uxth	r2, r3
    fe58:	4b54      	ldr	r3, [pc, #336]	; (ffac <process_ble_packet+0x7fc>)
    fe5a:	811a      	strh	r2, [r3, #8]
			Static_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
    fe5c:	4b44      	ldr	r3, [pc, #272]	; (ff70 <process_ble_packet+0x7c0>)
    fe5e:	7a1a      	ldrb	r2, [r3, #8]
    fe60:	4b49      	ldr	r3, [pc, #292]	; (ff88 <process_ble_packet+0x7d8>)
    fe62:	0010      	movs	r0, r2
    fe64:	4798      	blx	r3
    fe66:	1c02      	adds	r2, r0, #0
    fe68:	4b4d      	ldr	r3, [pc, #308]	; (ffa0 <process_ble_packet+0x7f0>)
    fe6a:	494e      	ldr	r1, [pc, #312]	; (ffa4 <process_ble_packet+0x7f4>)
    fe6c:	1c10      	adds	r0, r2, #0
    fe6e:	4798      	blx	r3
    fe70:	1c03      	adds	r3, r0, #0
    fe72:	1c1a      	adds	r2, r3, #0
    fe74:	4b4c      	ldr	r3, [pc, #304]	; (ffa8 <process_ble_packet+0x7f8>)
    fe76:	1c10      	adds	r0, r2, #0
    fe78:	4798      	blx	r3
    fe7a:	0003      	movs	r3, r0
    fe7c:	b29a      	uxth	r2, r3
    fe7e:	4b4b      	ldr	r3, [pc, #300]	; (ffac <process_ble_packet+0x7fc>)
    fe80:	815a      	strh	r2, [r3, #10]
			save_led_data();
    fe82:	4b46      	ldr	r3, [pc, #280]	; (ff9c <process_ble_packet+0x7ec>)
    fe84:	4798      	blx	r3
			break;
    fe86:	e185      	b.n	10194 <process_ble_packet+0x9e4>
		case Apply_Control_Settings:
			AUX_ENABLED = (ble_recieve_packet.payload[0]&0x80)>>7;
    fe88:	4b39      	ldr	r3, [pc, #228]	; (ff70 <process_ble_packet+0x7c0>)
    fe8a:	789b      	ldrb	r3, [r3, #2]
    fe8c:	09db      	lsrs	r3, r3, #7
    fe8e:	b2db      	uxtb	r3, r3
    fe90:	1e5a      	subs	r2, r3, #1
    fe92:	4193      	sbcs	r3, r2
    fe94:	b2da      	uxtb	r2, r3
    fe96:	4b46      	ldr	r3, [pc, #280]	; (ffb0 <process_ble_packet+0x800>)
    fe98:	701a      	strb	r2, [r3, #0]
			TURN_ENABLED = (ble_recieve_packet.payload[0]&0x40)>>6;
    fe9a:	4b35      	ldr	r3, [pc, #212]	; (ff70 <process_ble_packet+0x7c0>)
    fe9c:	789b      	ldrb	r3, [r3, #2]
    fe9e:	119b      	asrs	r3, r3, #6
    fea0:	2201      	movs	r2, #1
    fea2:	4013      	ands	r3, r2
    fea4:	1e5a      	subs	r2, r3, #1
    fea6:	4193      	sbcs	r3, r2
    fea8:	b2da      	uxtb	r2, r3
    feaa:	4b42      	ldr	r3, [pc, #264]	; (ffb4 <process_ble_packet+0x804>)
    feac:	701a      	strb	r2, [r3, #0]
			auxControlType = (ble_recieve_packet.payload[0]&0x0F);
    feae:	4b30      	ldr	r3, [pc, #192]	; (ff70 <process_ble_packet+0x7c0>)
    feb0:	789b      	ldrb	r3, [r3, #2]
    feb2:	220f      	movs	r2, #15
    feb4:	4013      	ands	r3, r2
    feb6:	b2da      	uxtb	r2, r3
    feb8:	4b3f      	ldr	r3, [pc, #252]	; (ffb8 <process_ble_packet+0x808>)
    feba:	701a      	strb	r2, [r3, #0]
			auxTimedDuration = (ble_recieve_packet.payload[1]&0xFF);
    febc:	4b2c      	ldr	r3, [pc, #176]	; (ff70 <process_ble_packet+0x7c0>)
    febe:	78da      	ldrb	r2, [r3, #3]
    fec0:	4b3e      	ldr	r3, [pc, #248]	; (ffbc <process_ble_packet+0x80c>)
    fec2:	701a      	strb	r2, [r3, #0]
			single_aux_control = (ble_recieve_packet.payload[2]&0xF0)>>4;
    fec4:	4b2a      	ldr	r3, [pc, #168]	; (ff70 <process_ble_packet+0x7c0>)
    fec6:	791b      	ldrb	r3, [r3, #4]
    fec8:	091b      	lsrs	r3, r3, #4
    feca:	b2da      	uxtb	r2, r3
    fecc:	4b3c      	ldr	r3, [pc, #240]	; (ffc0 <process_ble_packet+0x810>)
    fece:	701a      	strb	r2, [r3, #0]
			single_all_control = (ble_recieve_packet.payload[2]&0x0F);
    fed0:	4b27      	ldr	r3, [pc, #156]	; (ff70 <process_ble_packet+0x7c0>)
    fed2:	791b      	ldrb	r3, [r3, #4]
    fed4:	220f      	movs	r2, #15
    fed6:	4013      	ands	r3, r2
    fed8:	b2da      	uxtb	r2, r3
    feda:	4b3a      	ldr	r3, [pc, #232]	; (ffc4 <process_ble_packet+0x814>)
    fedc:	701a      	strb	r2, [r3, #0]
			single_head_control = (ble_recieve_packet.payload[3]&0xF0)>>4;
    fede:	4b24      	ldr	r3, [pc, #144]	; (ff70 <process_ble_packet+0x7c0>)
    fee0:	795b      	ldrb	r3, [r3, #5]
    fee2:	091b      	lsrs	r3, r3, #4
    fee4:	b2da      	uxtb	r2, r3
    fee6:	4b38      	ldr	r3, [pc, #224]	; (ffc8 <process_ble_packet+0x818>)
    fee8:	701a      	strb	r2, [r3, #0]
			single_side_control = (ble_recieve_packet.payload[3]&0x0F);
    feea:	4b21      	ldr	r3, [pc, #132]	; (ff70 <process_ble_packet+0x7c0>)
    feec:	795b      	ldrb	r3, [r3, #5]
    feee:	220f      	movs	r2, #15
    fef0:	4013      	ands	r3, r2
    fef2:	b2da      	uxtb	r2, r3
    fef4:	4b35      	ldr	r3, [pc, #212]	; (ffcc <process_ble_packet+0x81c>)
    fef6:	701a      	strb	r2, [r3, #0]
			single_down_control = (ble_recieve_packet.payload[4]&0xF0)>>4;
    fef8:	4b1d      	ldr	r3, [pc, #116]	; (ff70 <process_ble_packet+0x7c0>)
    fefa:	799b      	ldrb	r3, [r3, #6]
    fefc:	091b      	lsrs	r3, r3, #4
    fefe:	b2da      	uxtb	r2, r3
    ff00:	4b33      	ldr	r3, [pc, #204]	; (ffd0 <process_ble_packet+0x820>)
    ff02:	701a      	strb	r2, [r3, #0]
			single_up_control = (ble_recieve_packet.payload[4]&0x0F);
    ff04:	4b1a      	ldr	r3, [pc, #104]	; (ff70 <process_ble_packet+0x7c0>)
    ff06:	799b      	ldrb	r3, [r3, #6]
    ff08:	220f      	movs	r2, #15
    ff0a:	4013      	ands	r3, r2
    ff0c:	b2da      	uxtb	r2, r3
    ff0e:	4b31      	ldr	r3, [pc, #196]	; (ffd4 <process_ble_packet+0x824>)
    ff10:	701a      	strb	r2, [r3, #0]
			dual_aux_control = (ble_recieve_packet.payload[5]&0xF0)>>4;
    ff12:	4b17      	ldr	r3, [pc, #92]	; (ff70 <process_ble_packet+0x7c0>)
    ff14:	79db      	ldrb	r3, [r3, #7]
    ff16:	091b      	lsrs	r3, r3, #4
    ff18:	b2da      	uxtb	r2, r3
    ff1a:	4b2f      	ldr	r3, [pc, #188]	; (ffd8 <process_ble_packet+0x828>)
    ff1c:	701a      	strb	r2, [r3, #0]
			dual_all_control = (ble_recieve_packet.payload[5]&0x0F);
    ff1e:	4b14      	ldr	r3, [pc, #80]	; (ff70 <process_ble_packet+0x7c0>)
    ff20:	79db      	ldrb	r3, [r3, #7]
    ff22:	220f      	movs	r2, #15
    ff24:	4013      	ands	r3, r2
    ff26:	b2da      	uxtb	r2, r3
    ff28:	4b2c      	ldr	r3, [pc, #176]	; (ffdc <process_ble_packet+0x82c>)
    ff2a:	701a      	strb	r2, [r3, #0]
			dual_head_control = (ble_recieve_packet.payload[6]&0xF0)>>4;
    ff2c:	4b10      	ldr	r3, [pc, #64]	; (ff70 <process_ble_packet+0x7c0>)
    ff2e:	7a1b      	ldrb	r3, [r3, #8]
    ff30:	091b      	lsrs	r3, r3, #4
    ff32:	b2da      	uxtb	r2, r3
    ff34:	4b2a      	ldr	r3, [pc, #168]	; (ffe0 <process_ble_packet+0x830>)
    ff36:	701a      	strb	r2, [r3, #0]
			dual_side_control = (ble_recieve_packet.payload[6]&0x0F);
    ff38:	4b0d      	ldr	r3, [pc, #52]	; (ff70 <process_ble_packet+0x7c0>)
    ff3a:	7a1b      	ldrb	r3, [r3, #8]
    ff3c:	220f      	movs	r2, #15
    ff3e:	4013      	ands	r3, r2
    ff40:	b2da      	uxtb	r2, r3
    ff42:	4b28      	ldr	r3, [pc, #160]	; (ffe4 <process_ble_packet+0x834>)
    ff44:	701a      	strb	r2, [r3, #0]
			dual_down_control = (ble_recieve_packet.payload[7]&0xF0)>>4;
    ff46:	4b0a      	ldr	r3, [pc, #40]	; (ff70 <process_ble_packet+0x7c0>)
    ff48:	7a5b      	ldrb	r3, [r3, #9]
    ff4a:	091b      	lsrs	r3, r3, #4
    ff4c:	b2da      	uxtb	r2, r3
    ff4e:	4b26      	ldr	r3, [pc, #152]	; (ffe8 <process_ble_packet+0x838>)
    ff50:	701a      	strb	r2, [r3, #0]
			dual_up_control = (ble_recieve_packet.payload[7]&0x0F);
    ff52:	4b07      	ldr	r3, [pc, #28]	; (ff70 <process_ble_packet+0x7c0>)
    ff54:	7a5b      	ldrb	r3, [r3, #9]
    ff56:	220f      	movs	r2, #15
    ff58:	4013      	ands	r3, r2
    ff5a:	b2da      	uxtb	r2, r3
    ff5c:	4b23      	ldr	r3, [pc, #140]	; (ffec <process_ble_packet+0x83c>)
    ff5e:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc();
    ff60:	4b23      	ldr	r3, [pc, #140]	; (fff0 <process_ble_packet+0x840>)
    ff62:	4798      	blx	r3
			break;
    ff64:	e116      	b.n	10194 <process_ble_packet+0x9e4>
    ff66:	46c0      	nop			; (mov r8, r8)
    ff68:	200000a3 	.word	0x200000a3
    ff6c:	2000001b 	.word	0x2000001b
    ff70:	200004d4 	.word	0x200004d4
    ff74:	20000325 	.word	0x20000325
    ff78:	200000a2 	.word	0x200000a2
    ff7c:	20000322 	.word	0x20000322
    ff80:	20000323 	.word	0x20000323
    ff84:	20000324 	.word	0x20000324
    ff88:	000152f9 	.word	0x000152f9
    ff8c:	000148c1 	.word	0x000148c1
    ff90:	42c80000 	.word	0x42c80000
    ff94:	20000028 	.word	0x20000028
    ff98:	2000004c 	.word	0x2000004c
    ff9c:	0000e629 	.word	0x0000e629
    ffa0:	00014ca1 	.word	0x00014ca1
    ffa4:	43808000 	.word	0x43808000
    ffa8:	00014531 	.word	0x00014531
    ffac:	2000001c 	.word	0x2000001c
    ffb0:	20000375 	.word	0x20000375
    ffb4:	20000376 	.word	0x20000376
    ffb8:	20000378 	.word	0x20000378
    ffbc:	20000379 	.word	0x20000379
    ffc0:	2000037a 	.word	0x2000037a
    ffc4:	2000037b 	.word	0x2000037b
    ffc8:	2000037c 	.word	0x2000037c
    ffcc:	2000037d 	.word	0x2000037d
    ffd0:	2000037f 	.word	0x2000037f
    ffd4:	2000037e 	.word	0x2000037e
    ffd8:	20000380 	.word	0x20000380
    ffdc:	20000381 	.word	0x20000381
    ffe0:	20000382 	.word	0x20000382
    ffe4:	20000383 	.word	0x20000383
    ffe8:	20000385 	.word	0x20000385
    ffec:	20000384 	.word	0x20000384
    fff0:	0000f109 	.word	0x0000f109
		case Custom_Values:
			LIGHTS_ON = 1;
    fff4:	4b69      	ldr	r3, [pc, #420]	; (1019c <process_ble_packet+0x9ec>)
    fff6:	2201      	movs	r2, #1
    fff8:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_CUSTOM;
    fffa:	4b69      	ldr	r3, [pc, #420]	; (101a0 <process_ble_packet+0x9f0>)
    fffc:	2208      	movs	r2, #8
    fffe:	701a      	strb	r2, [r3, #0]
			SWITCHES = ble_recieve_packet.payload[0];
   10000:	4b68      	ldr	r3, [pc, #416]	; (101a4 <process_ble_packet+0x9f4>)
   10002:	789a      	ldrb	r2, [r3, #2]
   10004:	4b68      	ldr	r3, [pc, #416]	; (101a8 <process_ble_packet+0x9f8>)
   10006:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   10008:	4b67      	ldr	r3, [pc, #412]	; (101a8 <process_ble_packet+0x9f8>)
   1000a:	781b      	ldrb	r3, [r3, #0]
   1000c:	111b      	asrs	r3, r3, #4
   1000e:	b2db      	uxtb	r3, r3
   10010:	2201      	movs	r2, #1
   10012:	4013      	ands	r3, r2
   10014:	b2da      	uxtb	r2, r3
   10016:	4b65      	ldr	r3, [pc, #404]	; (101ac <process_ble_packet+0x9fc>)
   10018:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   1001a:	4b63      	ldr	r3, [pc, #396]	; (101a8 <process_ble_packet+0x9f8>)
   1001c:	781b      	ldrb	r3, [r3, #0]
   1001e:	115b      	asrs	r3, r3, #5
   10020:	b2db      	uxtb	r3, r3
   10022:	2201      	movs	r2, #1
   10024:	4013      	ands	r3, r2
   10026:	b2da      	uxtb	r2, r3
   10028:	4b61      	ldr	r3, [pc, #388]	; (101b0 <process_ble_packet+0xa00>)
   1002a:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   1002c:	4b5e      	ldr	r3, [pc, #376]	; (101a8 <process_ble_packet+0x9f8>)
   1002e:	781b      	ldrb	r3, [r3, #0]
   10030:	119b      	asrs	r3, r3, #6
   10032:	b2db      	uxtb	r3, r3
   10034:	2201      	movs	r2, #1
   10036:	4013      	ands	r3, r2
   10038:	b2da      	uxtb	r2, r3
   1003a:	4b5e      	ldr	r3, [pc, #376]	; (101b4 <process_ble_packet+0xa04>)
   1003c:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   1003e:	4b5a      	ldr	r3, [pc, #360]	; (101a8 <process_ble_packet+0x9f8>)
   10040:	781b      	ldrb	r3, [r3, #0]
   10042:	09db      	lsrs	r3, r3, #7
   10044:	b2da      	uxtb	r2, r3
   10046:	4b5c      	ldr	r3, [pc, #368]	; (101b8 <process_ble_packet+0xa08>)
   10048:	701a      	strb	r2, [r3, #0]
			ColorBase[MODE_CUSTOM] = (SWITCHES & 0x0F);
   1004a:	4b57      	ldr	r3, [pc, #348]	; (101a8 <process_ble_packet+0x9f8>)
   1004c:	781b      	ldrb	r3, [r3, #0]
   1004e:	220f      	movs	r2, #15
   10050:	4013      	ands	r3, r2
   10052:	b2da      	uxtb	r2, r3
   10054:	4b59      	ldr	r3, [pc, #356]	; (101bc <process_ble_packet+0xa0c>)
   10056:	721a      	strb	r2, [r3, #8]
			RateBase[MODE_CUSTOM] = (ble_recieve_packet.payload[1] & 0xF0) >> 4;
   10058:	4b52      	ldr	r3, [pc, #328]	; (101a4 <process_ble_packet+0x9f4>)
   1005a:	78db      	ldrb	r3, [r3, #3]
   1005c:	091b      	lsrs	r3, r3, #4
   1005e:	b2da      	uxtb	r2, r3
   10060:	4b57      	ldr	r3, [pc, #348]	; (101c0 <process_ble_packet+0xa10>)
   10062:	721a      	strb	r2, [r3, #8]
			BrightBase[MODE_CUSTOM] = (ble_recieve_packet.payload[1] & 0x0F);
   10064:	4b4f      	ldr	r3, [pc, #316]	; (101a4 <process_ble_packet+0x9f4>)
   10066:	78db      	ldrb	r3, [r3, #3]
   10068:	220f      	movs	r2, #15
   1006a:	4013      	ands	r3, r2
   1006c:	b2da      	uxtb	r2, r3
   1006e:	4b55      	ldr	r3, [pc, #340]	; (101c4 <process_ble_packet+0xa14>)
   10070:	721a      	strb	r2, [r3, #8]
			Custom_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[2] * 257);
   10072:	4b4c      	ldr	r3, [pc, #304]	; (101a4 <process_ble_packet+0x9f4>)
   10074:	791a      	ldrb	r2, [r3, #4]
   10076:	4b54      	ldr	r3, [pc, #336]	; (101c8 <process_ble_packet+0xa18>)
   10078:	0010      	movs	r0, r2
   1007a:	4798      	blx	r3
   1007c:	1c02      	adds	r2, r0, #0
   1007e:	4b53      	ldr	r3, [pc, #332]	; (101cc <process_ble_packet+0xa1c>)
   10080:	4953      	ldr	r1, [pc, #332]	; (101d0 <process_ble_packet+0xa20>)
   10082:	1c10      	adds	r0, r2, #0
   10084:	4798      	blx	r3
   10086:	1c03      	adds	r3, r0, #0
   10088:	1c1a      	adds	r2, r3, #0
   1008a:	4b52      	ldr	r3, [pc, #328]	; (101d4 <process_ble_packet+0xa24>)
   1008c:	1c10      	adds	r0, r2, #0
   1008e:	4798      	blx	r3
   10090:	0003      	movs	r3, r0
   10092:	b29a      	uxth	r2, r3
   10094:	4b50      	ldr	r3, [pc, #320]	; (101d8 <process_ble_packet+0xa28>)
   10096:	801a      	strh	r2, [r3, #0]
			Custom_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
   10098:	4b42      	ldr	r3, [pc, #264]	; (101a4 <process_ble_packet+0x9f4>)
   1009a:	795a      	ldrb	r2, [r3, #5]
   1009c:	4b4a      	ldr	r3, [pc, #296]	; (101c8 <process_ble_packet+0xa18>)
   1009e:	0010      	movs	r0, r2
   100a0:	4798      	blx	r3
   100a2:	1c02      	adds	r2, r0, #0
   100a4:	4b49      	ldr	r3, [pc, #292]	; (101cc <process_ble_packet+0xa1c>)
   100a6:	494a      	ldr	r1, [pc, #296]	; (101d0 <process_ble_packet+0xa20>)
   100a8:	1c10      	adds	r0, r2, #0
   100aa:	4798      	blx	r3
   100ac:	1c03      	adds	r3, r0, #0
   100ae:	1c1a      	adds	r2, r3, #0
   100b0:	4b48      	ldr	r3, [pc, #288]	; (101d4 <process_ble_packet+0xa24>)
   100b2:	1c10      	adds	r0, r2, #0
   100b4:	4798      	blx	r3
   100b6:	0003      	movs	r3, r0
   100b8:	b29a      	uxth	r2, r3
   100ba:	4b47      	ldr	r3, [pc, #284]	; (101d8 <process_ble_packet+0xa28>)
   100bc:	805a      	strh	r2, [r3, #2]
			Custom_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
   100be:	4b39      	ldr	r3, [pc, #228]	; (101a4 <process_ble_packet+0x9f4>)
   100c0:	799a      	ldrb	r2, [r3, #6]
   100c2:	4b41      	ldr	r3, [pc, #260]	; (101c8 <process_ble_packet+0xa18>)
   100c4:	0010      	movs	r0, r2
   100c6:	4798      	blx	r3
   100c8:	1c02      	adds	r2, r0, #0
   100ca:	4b40      	ldr	r3, [pc, #256]	; (101cc <process_ble_packet+0xa1c>)
   100cc:	4940      	ldr	r1, [pc, #256]	; (101d0 <process_ble_packet+0xa20>)
   100ce:	1c10      	adds	r0, r2, #0
   100d0:	4798      	blx	r3
   100d2:	1c03      	adds	r3, r0, #0
   100d4:	1c1a      	adds	r2, r3, #0
   100d6:	4b3f      	ldr	r3, [pc, #252]	; (101d4 <process_ble_packet+0xa24>)
   100d8:	1c10      	adds	r0, r2, #0
   100da:	4798      	blx	r3
   100dc:	0003      	movs	r3, r0
   100de:	b29a      	uxth	r2, r3
   100e0:	4b3d      	ldr	r3, [pc, #244]	; (101d8 <process_ble_packet+0xa28>)
   100e2:	809a      	strh	r2, [r3, #4]
			Custom_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
   100e4:	4b2f      	ldr	r3, [pc, #188]	; (101a4 <process_ble_packet+0x9f4>)
   100e6:	79da      	ldrb	r2, [r3, #7]
   100e8:	4b37      	ldr	r3, [pc, #220]	; (101c8 <process_ble_packet+0xa18>)
   100ea:	0010      	movs	r0, r2
   100ec:	4798      	blx	r3
   100ee:	1c02      	adds	r2, r0, #0
   100f0:	4b36      	ldr	r3, [pc, #216]	; (101cc <process_ble_packet+0xa1c>)
   100f2:	4937      	ldr	r1, [pc, #220]	; (101d0 <process_ble_packet+0xa20>)
   100f4:	1c10      	adds	r0, r2, #0
   100f6:	4798      	blx	r3
   100f8:	1c03      	adds	r3, r0, #0
   100fa:	1c1a      	adds	r2, r3, #0
   100fc:	4b35      	ldr	r3, [pc, #212]	; (101d4 <process_ble_packet+0xa24>)
   100fe:	1c10      	adds	r0, r2, #0
   10100:	4798      	blx	r3
   10102:	0003      	movs	r3, r0
   10104:	b29a      	uxth	r2, r3
   10106:	4b34      	ldr	r3, [pc, #208]	; (101d8 <process_ble_packet+0xa28>)
   10108:	80da      	strh	r2, [r3, #6]
			Custom_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
   1010a:	4b26      	ldr	r3, [pc, #152]	; (101a4 <process_ble_packet+0x9f4>)
   1010c:	7a1a      	ldrb	r2, [r3, #8]
   1010e:	4b2e      	ldr	r3, [pc, #184]	; (101c8 <process_ble_packet+0xa18>)
   10110:	0010      	movs	r0, r2
   10112:	4798      	blx	r3
   10114:	1c02      	adds	r2, r0, #0
   10116:	4b2d      	ldr	r3, [pc, #180]	; (101cc <process_ble_packet+0xa1c>)
   10118:	492d      	ldr	r1, [pc, #180]	; (101d0 <process_ble_packet+0xa20>)
   1011a:	1c10      	adds	r0, r2, #0
   1011c:	4798      	blx	r3
   1011e:	1c03      	adds	r3, r0, #0
   10120:	1c1a      	adds	r2, r3, #0
   10122:	4b2c      	ldr	r3, [pc, #176]	; (101d4 <process_ble_packet+0xa24>)
   10124:	1c10      	adds	r0, r2, #0
   10126:	4798      	blx	r3
   10128:	0003      	movs	r3, r0
   1012a:	b29a      	uxth	r2, r3
   1012c:	4b2a      	ldr	r3, [pc, #168]	; (101d8 <process_ble_packet+0xa28>)
   1012e:	811a      	strh	r2, [r3, #8]
			Custom_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[7] * 257);
   10130:	4b1c      	ldr	r3, [pc, #112]	; (101a4 <process_ble_packet+0x9f4>)
   10132:	7a5a      	ldrb	r2, [r3, #9]
   10134:	4b24      	ldr	r3, [pc, #144]	; (101c8 <process_ble_packet+0xa18>)
   10136:	0010      	movs	r0, r2
   10138:	4798      	blx	r3
   1013a:	1c02      	adds	r2, r0, #0
   1013c:	4b23      	ldr	r3, [pc, #140]	; (101cc <process_ble_packet+0xa1c>)
   1013e:	4924      	ldr	r1, [pc, #144]	; (101d0 <process_ble_packet+0xa20>)
   10140:	1c10      	adds	r0, r2, #0
   10142:	4798      	blx	r3
   10144:	1c03      	adds	r3, r0, #0
   10146:	1c1a      	adds	r2, r3, #0
   10148:	4b22      	ldr	r3, [pc, #136]	; (101d4 <process_ble_packet+0xa24>)
   1014a:	1c10      	adds	r0, r2, #0
   1014c:	4798      	blx	r3
   1014e:	0003      	movs	r3, r0
   10150:	b29a      	uxth	r2, r3
   10152:	4b21      	ldr	r3, [pc, #132]	; (101d8 <process_ble_packet+0xa28>)
   10154:	815a      	strh	r2, [r3, #10]
			RateSens[MODE_CUSTOM] = ((float)(ble_recieve_packet.payload[8]))/100;
   10156:	4b13      	ldr	r3, [pc, #76]	; (101a4 <process_ble_packet+0x9f4>)
   10158:	7a9a      	ldrb	r2, [r3, #10]
   1015a:	4b1b      	ldr	r3, [pc, #108]	; (101c8 <process_ble_packet+0xa18>)
   1015c:	0010      	movs	r0, r2
   1015e:	4798      	blx	r3
   10160:	1c02      	adds	r2, r0, #0
   10162:	4b1e      	ldr	r3, [pc, #120]	; (101dc <process_ble_packet+0xa2c>)
   10164:	491e      	ldr	r1, [pc, #120]	; (101e0 <process_ble_packet+0xa30>)
   10166:	1c10      	adds	r0, r2, #0
   10168:	4798      	blx	r3
   1016a:	1c03      	adds	r3, r0, #0
   1016c:	1c1a      	adds	r2, r3, #0
   1016e:	4b1d      	ldr	r3, [pc, #116]	; (101e4 <process_ble_packet+0xa34>)
   10170:	621a      	str	r2, [r3, #32]
			Brightness[MODE_CUSTOM] = ((float)(ble_recieve_packet.payload[9]))/100;
   10172:	4b0c      	ldr	r3, [pc, #48]	; (101a4 <process_ble_packet+0x9f4>)
   10174:	7ada      	ldrb	r2, [r3, #11]
   10176:	4b14      	ldr	r3, [pc, #80]	; (101c8 <process_ble_packet+0xa18>)
   10178:	0010      	movs	r0, r2
   1017a:	4798      	blx	r3
   1017c:	1c02      	adds	r2, r0, #0
   1017e:	4b17      	ldr	r3, [pc, #92]	; (101dc <process_ble_packet+0xa2c>)
   10180:	4917      	ldr	r1, [pc, #92]	; (101e0 <process_ble_packet+0xa30>)
   10182:	1c10      	adds	r0, r2, #0
   10184:	4798      	blx	r3
   10186:	1c03      	adds	r3, r0, #0
   10188:	1c1a      	adds	r2, r3, #0
   1018a:	4b17      	ldr	r3, [pc, #92]	; (101e8 <process_ble_packet+0xa38>)
   1018c:	621a      	str	r2, [r3, #32]
			save_led_data();
   1018e:	4b17      	ldr	r3, [pc, #92]	; (101ec <process_ble_packet+0xa3c>)
   10190:	4798      	blx	r3
			break;
   10192:	46c0      	nop			; (mov r8, r8)
	}
}
   10194:	46c0      	nop			; (mov r8, r8)
   10196:	46bd      	mov	sp, r7
   10198:	bd80      	pop	{r7, pc}
   1019a:	46c0      	nop			; (mov r8, r8)
   1019c:	200000a3 	.word	0x200000a3
   101a0:	2000001b 	.word	0x2000001b
   101a4:	200004d4 	.word	0x200004d4
   101a8:	20000325 	.word	0x20000325
   101ac:	200000a2 	.word	0x200000a2
   101b0:	20000322 	.word	0x20000322
   101b4:	20000323 	.word	0x20000323
   101b8:	20000324 	.word	0x20000324
   101bc:	20000070 	.word	0x20000070
   101c0:	20000088 	.word	0x20000088
   101c4:	2000007c 	.word	0x2000007c
   101c8:	000152f9 	.word	0x000152f9
   101cc:	00014ca1 	.word	0x00014ca1
   101d0:	43808000 	.word	0x43808000
   101d4:	00014531 	.word	0x00014531
   101d8:	20000094 	.word	0x20000094
   101dc:	000148c1 	.word	0x000148c1
   101e0:	42c80000 	.word	0x42c80000
   101e4:	20000028 	.word	0x20000028
   101e8:	2000004c 	.word	0x2000004c
   101ec:	0000e629 	.word	0x0000e629

000101f0 <read_ble_packet>:

void read_ble_packet(){
   101f0:	b580      	push	{r7, lr}
   101f2:	af00      	add	r7, sp, #0
	if(check_ble_packet_recieved()){
   101f4:	4b28      	ldr	r3, [pc, #160]	; (10298 <read_ble_packet+0xa8>)
   101f6:	4798      	blx	r3
   101f8:	1e03      	subs	r3, r0, #0
   101fa:	d023      	beq.n	10244 <read_ble_packet+0x54>
		ble_recieve_packet.size = ble_USART_read_buffer[1];
   101fc:	4b27      	ldr	r3, [pc, #156]	; (1029c <read_ble_packet+0xac>)
   101fe:	785a      	ldrb	r2, [r3, #1]
   10200:	4b27      	ldr	r3, [pc, #156]	; (102a0 <read_ble_packet+0xb0>)
   10202:	705a      	strb	r2, [r3, #1]
		ble_recieve_packet.ID = ble_USART_read_buffer[2];
   10204:	4b25      	ldr	r3, [pc, #148]	; (1029c <read_ble_packet+0xac>)
   10206:	789a      	ldrb	r2, [r3, #2]
   10208:	4b25      	ldr	r3, [pc, #148]	; (102a0 <read_ble_packet+0xb0>)
   1020a:	701a      	strb	r2, [r3, #0]
		memcpy(ble_recieve_packet.payload, ble_USART_read_buffer+3, ble_recieve_packet.size);
   1020c:	4925      	ldr	r1, [pc, #148]	; (102a4 <read_ble_packet+0xb4>)
   1020e:	4b24      	ldr	r3, [pc, #144]	; (102a0 <read_ble_packet+0xb0>)
   10210:	785b      	ldrb	r3, [r3, #1]
   10212:	001a      	movs	r2, r3
   10214:	4b24      	ldr	r3, [pc, #144]	; (102a8 <read_ble_packet+0xb8>)
   10216:	0018      	movs	r0, r3
   10218:	4b24      	ldr	r3, [pc, #144]	; (102ac <read_ble_packet+0xbc>)
   1021a:	4798      	blx	r3
		process_ble_packet();
   1021c:	4b24      	ldr	r3, [pc, #144]	; (102b0 <read_ble_packet+0xc0>)
   1021e:	4798      	blx	r3
			
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
   10220:	4b1e      	ldr	r3, [pc, #120]	; (1029c <read_ble_packet+0xac>)
   10222:	2213      	movs	r2, #19
   10224:	2100      	movs	r1, #0
   10226:	0018      	movs	r0, r3
   10228:	4b22      	ldr	r3, [pc, #136]	; (102b4 <read_ble_packet+0xc4>)
   1022a:	4798      	blx	r3
		//Stop listening to the BLE UART
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
   1022c:	4b22      	ldr	r3, [pc, #136]	; (102b8 <read_ble_packet+0xc8>)
   1022e:	2100      	movs	r1, #0
   10230:	0018      	movs	r0, r3
   10232:	4b22      	ldr	r3, [pc, #136]	; (102bc <read_ble_packet+0xcc>)
   10234:	4798      	blx	r3
		// Start listening to the BLE UART
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   10236:	4919      	ldr	r1, [pc, #100]	; (1029c <read_ble_packet+0xac>)
   10238:	4b1f      	ldr	r3, [pc, #124]	; (102b8 <read_ble_packet+0xc8>)
   1023a:	2213      	movs	r2, #19
   1023c:	0018      	movs	r0, r3
   1023e:	4b20      	ldr	r3, [pc, #128]	; (102c0 <read_ble_packet+0xd0>)
   10240:	4798      	blx	r3
		//Stop listening to the BLE UART
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
		// Start listening to the BLE UART
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
	}
   10242:	e025      	b.n	10290 <read_ble_packet+0xa0>
	} else if(check_ble_AT_recieved()){
   10244:	4b1f      	ldr	r3, [pc, #124]	; (102c4 <read_ble_packet+0xd4>)
   10246:	4798      	blx	r3
   10248:	1e03      	subs	r3, r0, #0
   1024a:	d021      	beq.n	10290 <read_ble_packet+0xa0>
		if(!BLE_CONFIGURED && OK_EXPECTED){
   1024c:	4b1e      	ldr	r3, [pc, #120]	; (102c8 <read_ble_packet+0xd8>)
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	2201      	movs	r2, #1
   10252:	4053      	eors	r3, r2
   10254:	b2db      	uxtb	r3, r3
   10256:	2b00      	cmp	r3, #0
   10258:	d009      	beq.n	1026e <read_ble_packet+0x7e>
   1025a:	4b1c      	ldr	r3, [pc, #112]	; (102cc <read_ble_packet+0xdc>)
   1025c:	781b      	ldrb	r3, [r3, #0]
   1025e:	2b00      	cmp	r3, #0
   10260:	d005      	beq.n	1026e <read_ble_packet+0x7e>
			BLE_CONFIGURED = true;
   10262:	4b19      	ldr	r3, [pc, #100]	; (102c8 <read_ble_packet+0xd8>)
   10264:	2201      	movs	r2, #1
   10266:	701a      	strb	r2, [r3, #0]
			OK_EXPECTED = false;
   10268:	4b18      	ldr	r3, [pc, #96]	; (102cc <read_ble_packet+0xdc>)
   1026a:	2200      	movs	r2, #0
   1026c:	701a      	strb	r2, [r3, #0]
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
   1026e:	4b0b      	ldr	r3, [pc, #44]	; (1029c <read_ble_packet+0xac>)
   10270:	2213      	movs	r2, #19
   10272:	2100      	movs	r1, #0
   10274:	0018      	movs	r0, r3
   10276:	4b0f      	ldr	r3, [pc, #60]	; (102b4 <read_ble_packet+0xc4>)
   10278:	4798      	blx	r3
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
   1027a:	4b0f      	ldr	r3, [pc, #60]	; (102b8 <read_ble_packet+0xc8>)
   1027c:	2100      	movs	r1, #0
   1027e:	0018      	movs	r0, r3
   10280:	4b0e      	ldr	r3, [pc, #56]	; (102bc <read_ble_packet+0xcc>)
   10282:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   10284:	4905      	ldr	r1, [pc, #20]	; (1029c <read_ble_packet+0xac>)
   10286:	4b0c      	ldr	r3, [pc, #48]	; (102b8 <read_ble_packet+0xc8>)
   10288:	2213      	movs	r2, #19
   1028a:	0018      	movs	r0, r3
   1028c:	4b0c      	ldr	r3, [pc, #48]	; (102c0 <read_ble_packet+0xd0>)
   1028e:	4798      	blx	r3
   10290:	46c0      	nop			; (mov r8, r8)
   10292:	46bd      	mov	sp, r7
   10294:	bd80      	pop	{r7, pc}
   10296:	46c0      	nop			; (mov r8, r8)
   10298:	0000f77d 	.word	0x0000f77d
   1029c:	20000f08 	.word	0x20000f08
   102a0:	200004d4 	.word	0x200004d4
   102a4:	20000f0b 	.word	0x20000f0b
   102a8:	200004d6 	.word	0x200004d6
   102ac:	000170dd 	.word	0x000170dd
   102b0:	0000f7b1 	.word	0x0000f7b1
   102b4:	000170ef 	.word	0x000170ef
   102b8:	200004a0 	.word	0x200004a0
   102bc:	000066b9 	.word	0x000066b9
   102c0:	00006671 	.word	0x00006671
   102c4:	0000f751 	.word	0x0000f751
   102c8:	200003ad 	.word	0x200003ad
   102cc:	200003b4 	.word	0x200003b4

000102d0 <configure_ADC>:
float getPitch(void);
float updateKalman(float meas, int kalmanIndex);

// Configure the light sensor port as an input
void configure_ADC(void)
{
   102d0:	b580      	push	{r7, lr}
   102d2:	b08e      	sub	sp, #56	; 0x38
   102d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < LGHTsamples; ++i){
   102d6:	2300      	movs	r3, #0
   102d8:	637b      	str	r3, [r7, #52]	; 0x34
   102da:	e007      	b.n	102ec <configure_ADC+0x1c>
		LGHTaverage[i] = 0;
   102dc:	4b1a      	ldr	r3, [pc, #104]	; (10348 <configure_ADC+0x78>)
   102de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   102e0:	0052      	lsls	r2, r2, #1
   102e2:	2100      	movs	r1, #0
   102e4:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < LGHTsamples; ++i){
   102e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   102e8:	3301      	adds	r3, #1
   102ea:	637b      	str	r3, [r7, #52]	; 0x34
   102ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   102ee:	2b95      	cmp	r3, #149	; 0x95
   102f0:	ddf4      	ble.n	102dc <configure_ADC+0xc>
	}

	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
   102f2:	1d3b      	adds	r3, r7, #4
   102f4:	0018      	movs	r0, r3
   102f6:	4b15      	ldr	r3, [pc, #84]	; (1034c <configure_ADC+0x7c>)
   102f8:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INTVCC1;
   102fa:	1d3b      	adds	r3, r7, #4
   102fc:	2202      	movs	r2, #2
   102fe:	705a      	strb	r2, [r3, #1]
	config_adc.resolution = ADC_RESOLUTION_16BIT;
   10300:	1d3b      	adds	r3, r7, #4
   10302:	2210      	movs	r2, #16
   10304:	711a      	strb	r2, [r3, #4]
	config_adc.differential_mode = DISABLE;
   10306:	1d3b      	adds	r3, r7, #4
   10308:	2200      	movs	r2, #0
   1030a:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
   1030c:	1d3b      	adds	r3, r7, #4
   1030e:	22c0      	movs	r2, #192	; 0xc0
   10310:	0152      	lsls	r2, r2, #5
   10312:	81da      	strh	r2, [r3, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN17;
   10314:	1d3b      	adds	r3, r7, #4
   10316:	2211      	movs	r2, #17
   10318:	731a      	strb	r2, [r3, #12]
	config_adc.freerunning = DISABLE;
   1031a:	1d3b      	adds	r3, r7, #4
   1031c:	2200      	movs	r2, #0
   1031e:	751a      	strb	r2, [r3, #20]
	config_adc.run_in_standby = true;
   10320:	1d3b      	adds	r3, r7, #4
   10322:	2201      	movs	r2, #1
   10324:	755a      	strb	r2, [r3, #21]
	config_adc.left_adjust = false;
   10326:	1d3b      	adds	r3, r7, #4
   10328:	2200      	movs	r2, #0
   1032a:	749a      	strb	r2, [r3, #18]
	adc_init(&adc1, ADC, &config_adc);
   1032c:	1d3a      	adds	r2, r7, #4
   1032e:	4908      	ldr	r1, [pc, #32]	; (10350 <configure_ADC+0x80>)
   10330:	4b08      	ldr	r3, [pc, #32]	; (10354 <configure_ADC+0x84>)
   10332:	0018      	movs	r0, r3
   10334:	4b08      	ldr	r3, [pc, #32]	; (10358 <configure_ADC+0x88>)
   10336:	4798      	blx	r3
	adc_enable(&adc1);
   10338:	4b06      	ldr	r3, [pc, #24]	; (10354 <configure_ADC+0x84>)
   1033a:	0018      	movs	r0, r3
   1033c:	4b07      	ldr	r3, [pc, #28]	; (1035c <configure_ADC+0x8c>)
   1033e:	4798      	blx	r3
}
   10340:	46c0      	nop			; (mov r8, r8)
   10342:	46bd      	mov	sp, r7
   10344:	b00e      	add	sp, #56	; 0x38
   10346:	bd80      	pop	{r7, pc}
   10348:	200007dc 	.word	0x200007dc
   1034c:	00002219 	.word	0x00002219
   10350:	42004000 	.word	0x42004000
   10354:	200009b4 	.word	0x200009b4
   10358:	00002869 	.word	0x00002869
   1035c:	00008c5d 	.word	0x00008c5d

00010360 <configure_port_pins>:

// Configure the LED selection port as output
void configure_port_pins(void)
{
   10360:	b580      	push	{r7, lr}
   10362:	b082      	sub	sp, #8
   10364:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   10366:	1d3b      	adds	r3, r7, #4
   10368:	0018      	movs	r0, r3
   1036a:	4b1a      	ldr	r3, [pc, #104]	; (103d4 <configure_port_pins+0x74>)
   1036c:	4798      	blx	r3
	
	config_port_pin.powersave = false;
   1036e:	1d3b      	adds	r3, r7, #4
   10370:	2200      	movs	r2, #0
   10372:	709a      	strb	r2, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   10374:	1d3b      	adds	r3, r7, #4
   10376:	2201      	movs	r2, #1
   10378:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA06E_TCC1_WO0, &config_port_pin);
   1037a:	1d3b      	adds	r3, r7, #4
   1037c:	0019      	movs	r1, r3
   1037e:	2006      	movs	r0, #6
   10380:	4b15      	ldr	r3, [pc, #84]	; (103d8 <configure_port_pins+0x78>)
   10382:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0,false);
   10384:	2100      	movs	r1, #0
   10386:	2006      	movs	r0, #6
   10388:	4b14      	ldr	r3, [pc, #80]	; (103dc <configure_port_pins+0x7c>)
   1038a:	4798      	blx	r3

	config_port_pin.powersave = false;
   1038c:	1d3b      	adds	r3, r7, #4
   1038e:	2200      	movs	r2, #0
   10390:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
   10392:	1d3b      	adds	r3, r7, #4
   10394:	2201      	movs	r2, #1
   10396:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   10398:	1d3b      	adds	r3, r7, #4
   1039a:	2200      	movs	r2, #0
   1039c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PPM_IN, &config_port_pin);
   1039e:	1d3b      	adds	r3, r7, #4
   103a0:	0019      	movs	r1, r3
   103a2:	2022      	movs	r0, #34	; 0x22
   103a4:	4b0c      	ldr	r3, [pc, #48]	; (103d8 <configure_port_pins+0x78>)
   103a6:	4798      	blx	r3
	
	config_port_pin.powersave = false;
   103a8:	1d3b      	adds	r3, r7, #4
   103aa:	2200      	movs	r2, #0
   103ac:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
   103ae:	1d3b      	adds	r3, r7, #4
   103b0:	2200      	movs	r2, #0
   103b2:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   103b4:	1d3b      	adds	r3, r7, #4
   103b6:	2201      	movs	r2, #1
   103b8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AUX_PIN, &config_port_pin);
   103ba:	1d3b      	adds	r3, r7, #4
   103bc:	0019      	movs	r1, r3
   103be:	2008      	movs	r0, #8
   103c0:	4b05      	ldr	r3, [pc, #20]	; (103d8 <configure_port_pins+0x78>)
   103c2:	4798      	blx	r3
	port_pin_set_output_level(AUX_PIN,true);
   103c4:	2101      	movs	r1, #1
   103c6:	2008      	movs	r0, #8
   103c8:	4b04      	ldr	r3, [pc, #16]	; (103dc <configure_port_pins+0x7c>)
   103ca:	4798      	blx	r3
}
   103cc:	46c0      	nop			; (mov r8, r8)
   103ce:	46bd      	mov	sp, r7
   103d0:	b002      	add	sp, #8
   103d2:	bd80      	pop	{r7, pc}
   103d4:	00008d8d 	.word	0x00008d8d
   103d8:	00007205 	.word	0x00007205
   103dc:	00008df5 	.word	0x00008df5

000103e0 <configure_i2c_slave>:
	}
}

// Configure SERCOM1 as I2C slave for VESC communication
void configure_i2c_slave(void)
{	
   103e0:	b580      	push	{r7, lr}
   103e2:	b08a      	sub	sp, #40	; 0x28
   103e4:	af00      	add	r7, sp, #0
	/* Create and initialize config_i2c_slave structure */
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
   103e6:	003b      	movs	r3, r7
   103e8:	0018      	movs	r0, r3
   103ea:	4b0f      	ldr	r3, [pc, #60]	; (10428 <configure_i2c_slave+0x48>)
   103ec:	4798      	blx	r3
	/* Change address and address_mode */
	config_i2c_slave.address        = SLAVE_ADDRESS;
   103ee:	003b      	movs	r3, r7
   103f0:	2212      	movs	r2, #18
   103f2:	819a      	strh	r2, [r3, #12]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_MASK;
   103f4:	003b      	movs	r3, r7
   103f6:	2200      	movs	r2, #0
   103f8:	815a      	strh	r2, [r3, #10]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   103fa:	003b      	movs	r3, r7
   103fc:	4a0b      	ldr	r2, [pc, #44]	; (1042c <configure_i2c_slave+0x4c>)
   103fe:	61da      	str	r2, [r3, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   10400:	003b      	movs	r3, r7
   10402:	4a0b      	ldr	r2, [pc, #44]	; (10430 <configure_i2c_slave+0x50>)
   10404:	621a      	str	r2, [r3, #32]
	config_i2c_slave.generator_source = GCLK_GENERATOR_0;
   10406:	003b      	movs	r3, r7
   10408:	2200      	movs	r2, #0
   1040a:	765a      	strb	r2, [r3, #25]
	/* Initialize and enable device with config_i2c_slave */
	i2c_slave_init(&i2c_slave_instance, SERCOM1, &config_i2c_slave);
   1040c:	003a      	movs	r2, r7
   1040e:	4909      	ldr	r1, [pc, #36]	; (10434 <configure_i2c_slave+0x54>)
   10410:	4b09      	ldr	r3, [pc, #36]	; (10438 <configure_i2c_slave+0x58>)
   10412:	0018      	movs	r0, r3
   10414:	4b09      	ldr	r3, [pc, #36]	; (1043c <configure_i2c_slave+0x5c>)
   10416:	4798      	blx	r3
	i2c_slave_enable(&i2c_slave_instance);
   10418:	4b07      	ldr	r3, [pc, #28]	; (10438 <configure_i2c_slave+0x58>)
   1041a:	0018      	movs	r0, r3
   1041c:	4b08      	ldr	r3, [pc, #32]	; (10440 <configure_i2c_slave+0x60>)
   1041e:	4798      	blx	r3
}
   10420:	46c0      	nop			; (mov r8, r8)
   10422:	46bd      	mov	sp, r7
   10424:	b00a      	add	sp, #40	; 0x28
   10426:	bd80      	pop	{r7, pc}
   10428:	0000902d 	.word	0x0000902d
   1042c:	00100002 	.word	0x00100002
   10430:	00110002 	.word	0x00110002
   10434:	42000c00 	.word	0x42000c00
   10438:	20001020 	.word	0x20001020
   1043c:	000044b5 	.word	0x000044b5
   10440:	000090ad 	.word	0x000090ad

00010444 <i2c_write_request_callback>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
   10444:	b580      	push	{r7, lr}
   10446:	b082      	sub	sp, #8
   10448:	af00      	add	r7, sp, #0
   1044a:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	packet.data_length = SLAVE_READ_DATA_LENGTH;
   1044c:	4bae      	ldr	r3, [pc, #696]	; (10708 <i2c_write_request_callback+0x2c4>)
   1044e:	221e      	movs	r2, #30
   10450:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_read_buffer;
   10452:	4bad      	ldr	r3, [pc, #692]	; (10708 <i2c_write_request_callback+0x2c4>)
   10454:	4aad      	ldr	r2, [pc, #692]	; (1070c <i2c_write_request_callback+0x2c8>)
   10456:	605a      	str	r2, [r3, #4]
	
	if(FIRST_MESSAGE == 1){
   10458:	4bad      	ldr	r3, [pc, #692]	; (10710 <i2c_write_request_callback+0x2cc>)
   1045a:	781b      	ldrb	r3, [r3, #0]
   1045c:	2b01      	cmp	r3, #1
   1045e:	d105      	bne.n	1046c <i2c_write_request_callback+0x28>
		FIRST_MESSAGE = 0;
   10460:	4bab      	ldr	r3, [pc, #684]	; (10710 <i2c_write_request_callback+0x2cc>)
   10462:	2200      	movs	r2, #0
   10464:	701a      	strb	r2, [r3, #0]
		GET_LIMITS = 1; // Read the limits on first message to set lighting variables
   10466:	4bab      	ldr	r3, [pc, #684]	; (10714 <i2c_write_request_callback+0x2d0>)
   10468:	2201      	movs	r2, #1
   1046a:	701a      	strb	r2, [r3, #0]
	}
	i2c_slave_read_packet_job(module, &packet);
   1046c:	4aa6      	ldr	r2, [pc, #664]	; (10708 <i2c_write_request_callback+0x2c4>)
   1046e:	687b      	ldr	r3, [r7, #4]
   10470:	0011      	movs	r1, r2
   10472:	0018      	movs	r0, r3
   10474:	4ba8      	ldr	r3, [pc, #672]	; (10718 <i2c_write_request_callback+0x2d4>)
   10476:	4798      	blx	r3
		if(I2C_slave_read_buffer[0] == 0x8D && I2C_slave_read_buffer[28] == 0xAD) {
   10478:	4ba4      	ldr	r3, [pc, #656]	; (1070c <i2c_write_request_callback+0x2c8>)
   1047a:	781b      	ldrb	r3, [r3, #0]
   1047c:	2b8d      	cmp	r3, #141	; 0x8d
   1047e:	d000      	beq.n	10482 <i2c_write_request_callback+0x3e>
   10480:	e090      	b.n	105a4 <i2c_write_request_callback+0x160>
   10482:	4ba2      	ldr	r3, [pc, #648]	; (1070c <i2c_write_request_callback+0x2c8>)
   10484:	7f1b      	ldrb	r3, [r3, #28]
   10486:	2bad      	cmp	r3, #173	; 0xad
   10488:	d000      	beq.n	1048c <i2c_write_request_callback+0x48>
   1048a:	e08b      	b.n	105a4 <i2c_write_request_callback+0x160>
			mcconf_limits.motor_current_max = I2C_slave_read_buffer[1];
   1048c:	4b9f      	ldr	r3, [pc, #636]	; (1070c <i2c_write_request_callback+0x2c8>)
   1048e:	785b      	ldrb	r3, [r3, #1]
   10490:	001a      	movs	r2, r3
   10492:	4ba2      	ldr	r3, [pc, #648]	; (1071c <i2c_write_request_callback+0x2d8>)
   10494:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = I2C_slave_read_buffer[2];
   10496:	4b9d      	ldr	r3, [pc, #628]	; (1070c <i2c_write_request_callback+0x2c8>)
   10498:	789b      	ldrb	r3, [r3, #2]
   1049a:	001a      	movs	r2, r3
   1049c:	4b9f      	ldr	r3, [pc, #636]	; (1071c <i2c_write_request_callback+0x2d8>)
   1049e:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = I2C_slave_read_buffer[3];
   104a0:	4b9a      	ldr	r3, [pc, #616]	; (1070c <i2c_write_request_callback+0x2c8>)
   104a2:	78db      	ldrb	r3, [r3, #3]
   104a4:	001a      	movs	r2, r3
   104a6:	4b9d      	ldr	r3, [pc, #628]	; (1071c <i2c_write_request_callback+0x2d8>)
   104a8:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = I2C_slave_read_buffer[4];
   104aa:	4b98      	ldr	r3, [pc, #608]	; (1070c <i2c_write_request_callback+0x2c8>)
   104ac:	791b      	ldrb	r3, [r3, #4]
   104ae:	001a      	movs	r2, r3
   104b0:	4b9a      	ldr	r3, [pc, #616]	; (1071c <i2c_write_request_callback+0x2d8>)
   104b2:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = I2C_slave_read_buffer[5];
   104b4:	4b95      	ldr	r3, [pc, #596]	; (1070c <i2c_write_request_callback+0x2c8>)
   104b6:	795b      	ldrb	r3, [r3, #5]
   104b8:	001a      	movs	r2, r3
   104ba:	4b98      	ldr	r3, [pc, #608]	; (1071c <i2c_write_request_callback+0x2d8>)
   104bc:	611a      	str	r2, [r3, #16]
			mcconf_limits.max_vin = I2C_slave_read_buffer[6];
   104be:	4b93      	ldr	r3, [pc, #588]	; (1070c <i2c_write_request_callback+0x2c8>)
   104c0:	799b      	ldrb	r3, [r3, #6]
   104c2:	001a      	movs	r2, r3
   104c4:	4b95      	ldr	r3, [pc, #596]	; (1071c <i2c_write_request_callback+0x2d8>)
   104c6:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.min_vin = I2C_slave_read_buffer[7];
   104c8:	4b90      	ldr	r3, [pc, #576]	; (1070c <i2c_write_request_callback+0x2c8>)
   104ca:	79db      	ldrb	r3, [r3, #7]
   104cc:	001a      	movs	r2, r3
   104ce:	4b93      	ldr	r3, [pc, #588]	; (1071c <i2c_write_request_callback+0x2d8>)
   104d0:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.battery_cut_start = I2C_slave_read_buffer[8];
   104d2:	4b8e      	ldr	r3, [pc, #568]	; (1070c <i2c_write_request_callback+0x2c8>)
   104d4:	7a1a      	ldrb	r2, [r3, #8]
   104d6:	4b92      	ldr	r3, [pc, #584]	; (10720 <i2c_write_request_callback+0x2dc>)
   104d8:	0010      	movs	r0, r2
   104da:	4798      	blx	r3
   104dc:	1c02      	adds	r2, r0, #0
   104de:	4b8f      	ldr	r3, [pc, #572]	; (1071c <i2c_write_request_callback+0x2d8>)
   104e0:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = I2C_slave_read_buffer[9];
   104e2:	4b8a      	ldr	r3, [pc, #552]	; (1070c <i2c_write_request_callback+0x2c8>)
   104e4:	7a5a      	ldrb	r2, [r3, #9]
   104e6:	4b8e      	ldr	r3, [pc, #568]	; (10720 <i2c_write_request_callback+0x2dc>)
   104e8:	0010      	movs	r0, r2
   104ea:	4798      	blx	r3
   104ec:	1c02      	adds	r2, r0, #0
   104ee:	4b8b      	ldr	r3, [pc, #556]	; (1071c <i2c_write_request_callback+0x2d8>)
   104f0:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.max_erpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   104f2:	4b86      	ldr	r3, [pc, #536]	; (1070c <i2c_write_request_callback+0x2c8>)
   104f4:	7a9b      	ldrb	r3, [r3, #10]
   104f6:	001a      	movs	r2, r3
   104f8:	4b84      	ldr	r3, [pc, #528]	; (1070c <i2c_write_request_callback+0x2c8>)
   104fa:	7adb      	ldrb	r3, [r3, #11]
   104fc:	021b      	lsls	r3, r3, #8
   104fe:	431a      	orrs	r2, r3
   10500:	4b82      	ldr	r3, [pc, #520]	; (1070c <i2c_write_request_callback+0x2c8>)
   10502:	7b1b      	ldrb	r3, [r3, #12]
   10504:	041b      	lsls	r3, r3, #16
   10506:	431a      	orrs	r2, r3
   10508:	4b84      	ldr	r3, [pc, #528]	; (1071c <i2c_write_request_callback+0x2d8>)
   1050a:	619a      	str	r2, [r3, #24]
			mcconf_limits.min_erpm = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   1050c:	4b7f      	ldr	r3, [pc, #508]	; (1070c <i2c_write_request_callback+0x2c8>)
   1050e:	7b5b      	ldrb	r3, [r3, #13]
   10510:	001a      	movs	r2, r3
   10512:	4b7e      	ldr	r3, [pc, #504]	; (1070c <i2c_write_request_callback+0x2c8>)
   10514:	7b9b      	ldrb	r3, [r3, #14]
   10516:	021b      	lsls	r3, r3, #8
   10518:	431a      	orrs	r2, r3
   1051a:	4b7c      	ldr	r3, [pc, #496]	; (1070c <i2c_write_request_callback+0x2c8>)
   1051c:	7bdb      	ldrb	r3, [r3, #15]
   1051e:	041b      	lsls	r3, r3, #16
   10520:	431a      	orrs	r2, r3
   10522:	4b7e      	ldr	r3, [pc, #504]	; (1071c <i2c_write_request_callback+0x2d8>)
   10524:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm_fbrake = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   10526:	4b79      	ldr	r3, [pc, #484]	; (1070c <i2c_write_request_callback+0x2c8>)
   10528:	7c1b      	ldrb	r3, [r3, #16]
   1052a:	001a      	movs	r2, r3
   1052c:	4b77      	ldr	r3, [pc, #476]	; (1070c <i2c_write_request_callback+0x2c8>)
   1052e:	7c5b      	ldrb	r3, [r3, #17]
   10530:	021b      	lsls	r3, r3, #8
   10532:	431a      	orrs	r2, r3
   10534:	4b75      	ldr	r3, [pc, #468]	; (1070c <i2c_write_request_callback+0x2c8>)
   10536:	7c9b      	ldrb	r3, [r3, #18]
   10538:	041b      	lsls	r3, r3, #16
   1053a:	431a      	orrs	r2, r3
   1053c:	4b77      	ldr	r3, [pc, #476]	; (1071c <i2c_write_request_callback+0x2d8>)
   1053e:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   10540:	4b72      	ldr	r3, [pc, #456]	; (1070c <i2c_write_request_callback+0x2c8>)
   10542:	7cdb      	ldrb	r3, [r3, #19]
   10544:	001a      	movs	r2, r3
   10546:	4b71      	ldr	r3, [pc, #452]	; (1070c <i2c_write_request_callback+0x2c8>)
   10548:	7d1b      	ldrb	r3, [r3, #20]
   1054a:	021b      	lsls	r3, r3, #8
   1054c:	431a      	orrs	r2, r3
   1054e:	4b6f      	ldr	r3, [pc, #444]	; (1070c <i2c_write_request_callback+0x2c8>)
   10550:	7d5b      	ldrb	r3, [r3, #21]
   10552:	041b      	lsls	r3, r3, #16
   10554:	431a      	orrs	r2, r3
   10556:	4b71      	ldr	r3, [pc, #452]	; (1071c <i2c_write_request_callback+0x2d8>)
   10558:	621a      	str	r2, [r3, #32]
			mcconf_limits.temp_fet_start = I2C_slave_read_buffer[22];
   1055a:	4b6c      	ldr	r3, [pc, #432]	; (1070c <i2c_write_request_callback+0x2c8>)
   1055c:	7d9b      	ldrb	r3, [r3, #22]
   1055e:	001a      	movs	r2, r3
   10560:	4b6e      	ldr	r3, [pc, #440]	; (1071c <i2c_write_request_callback+0x2d8>)
   10562:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = I2C_slave_read_buffer[23];
   10564:	4b69      	ldr	r3, [pc, #420]	; (1070c <i2c_write_request_callback+0x2c8>)
   10566:	7ddb      	ldrb	r3, [r3, #23]
   10568:	001a      	movs	r2, r3
   1056a:	4b6c      	ldr	r3, [pc, #432]	; (1071c <i2c_write_request_callback+0x2d8>)
   1056c:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = I2C_slave_read_buffer[24];
   1056e:	4b67      	ldr	r3, [pc, #412]	; (1070c <i2c_write_request_callback+0x2c8>)
   10570:	7e1b      	ldrb	r3, [r3, #24]
   10572:	001a      	movs	r2, r3
   10574:	4b69      	ldr	r3, [pc, #420]	; (1071c <i2c_write_request_callback+0x2d8>)
   10576:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = I2C_slave_read_buffer[25];
   10578:	4b64      	ldr	r3, [pc, #400]	; (1070c <i2c_write_request_callback+0x2c8>)
   1057a:	7e5b      	ldrb	r3, [r3, #25]
   1057c:	001a      	movs	r2, r3
   1057e:	4b67      	ldr	r3, [pc, #412]	; (1071c <i2c_write_request_callback+0x2d8>)
   10580:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.max_duty = I2C_slave_read_buffer[26];
   10582:	4b62      	ldr	r3, [pc, #392]	; (1070c <i2c_write_request_callback+0x2c8>)
   10584:	7e9b      	ldrb	r3, [r3, #26]
   10586:	001a      	movs	r2, r3
   10588:	4b64      	ldr	r3, [pc, #400]	; (1071c <i2c_write_request_callback+0x2d8>)
   1058a:	649a      	str	r2, [r3, #72]	; 0x48
			mcconf_limits.min_duty = I2C_slave_read_buffer[27];
   1058c:	4b5f      	ldr	r3, [pc, #380]	; (1070c <i2c_write_request_callback+0x2c8>)
   1058e:	7edb      	ldrb	r3, [r3, #27]
   10590:	001a      	movs	r2, r3
   10592:	4b62      	ldr	r3, [pc, #392]	; (1071c <i2c_write_request_callback+0x2d8>)
   10594:	645a      	str	r2, [r3, #68]	; 0x44
			SEND_LIMITS = 1;
   10596:	4b63      	ldr	r3, [pc, #396]	; (10724 <i2c_write_request_callback+0x2e0>)
   10598:	2201      	movs	r2, #1
   1059a:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   1059c:	4b62      	ldr	r3, [pc, #392]	; (10728 <i2c_write_request_callback+0x2e4>)
   1059e:	2200      	movs	r2, #0
   105a0:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
		}
}
   105a2:	e0ad      	b.n	10700 <i2c_write_request_callback+0x2bc>
		} else if(I2C_slave_read_buffer[0] == 0xDD && I2C_slave_read_buffer[29] == 0xAD) {
   105a4:	4b59      	ldr	r3, [pc, #356]	; (1070c <i2c_write_request_callback+0x2c8>)
   105a6:	781b      	ldrb	r3, [r3, #0]
   105a8:	2bdd      	cmp	r3, #221	; 0xdd
   105aa:	d000      	beq.n	105ae <i2c_write_request_callback+0x16a>
   105ac:	e0a8      	b.n	10700 <i2c_write_request_callback+0x2bc>
   105ae:	4b57      	ldr	r3, [pc, #348]	; (1070c <i2c_write_request_callback+0x2c8>)
   105b0:	7f5b      	ldrb	r3, [r3, #29]
   105b2:	2bad      	cmp	r3, #173	; 0xad
   105b4:	d000      	beq.n	105b8 <i2c_write_request_callback+0x174>
   105b6:	e0a3      	b.n	10700 <i2c_write_request_callback+0x2bc>
			latest_vesc_vals.avg_input_current = I2C_slave_read_buffer[1];
   105b8:	4b54      	ldr	r3, [pc, #336]	; (1070c <i2c_write_request_callback+0x2c8>)
   105ba:	785b      	ldrb	r3, [r3, #1]
   105bc:	001a      	movs	r2, r3
   105be:	4b5b      	ldr	r3, [pc, #364]	; (1072c <i2c_write_request_callback+0x2e8>)
   105c0:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.avg_input_current += (I2C_slave_read_buffer[2] << 8);
   105c2:	4b5a      	ldr	r3, [pc, #360]	; (1072c <i2c_write_request_callback+0x2e8>)
   105c4:	689a      	ldr	r2, [r3, #8]
   105c6:	4b51      	ldr	r3, [pc, #324]	; (1070c <i2c_write_request_callback+0x2c8>)
   105c8:	789b      	ldrb	r3, [r3, #2]
   105ca:	021b      	lsls	r3, r3, #8
   105cc:	18d2      	adds	r2, r2, r3
   105ce:	4b57      	ldr	r3, [pc, #348]	; (1072c <i2c_write_request_callback+0x2e8>)
   105d0:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.INPUT_VOLTAGE = I2C_slave_read_buffer[3];
   105d2:	4b4e      	ldr	r3, [pc, #312]	; (1070c <i2c_write_request_callback+0x2c8>)
   105d4:	78db      	ldrb	r3, [r3, #3]
   105d6:	b21a      	sxth	r2, r3
   105d8:	4b54      	ldr	r3, [pc, #336]	; (1072c <i2c_write_request_callback+0x2e8>)
   105da:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.INPUT_VOLTAGE += (I2C_slave_read_buffer[4] << 8);
   105dc:	4b53      	ldr	r3, [pc, #332]	; (1072c <i2c_write_request_callback+0x2e8>)
   105de:	2214      	movs	r2, #20
   105e0:	5e9b      	ldrsh	r3, [r3, r2]
   105e2:	b29a      	uxth	r2, r3
   105e4:	4b49      	ldr	r3, [pc, #292]	; (1070c <i2c_write_request_callback+0x2c8>)
   105e6:	791b      	ldrb	r3, [r3, #4]
   105e8:	b29b      	uxth	r3, r3
   105ea:	021b      	lsls	r3, r3, #8
   105ec:	b29b      	uxth	r3, r3
   105ee:	18d3      	adds	r3, r2, r3
   105f0:	b29b      	uxth	r3, r3
   105f2:	b21a      	sxth	r2, r3
   105f4:	4b4d      	ldr	r3, [pc, #308]	; (1072c <i2c_write_request_callback+0x2e8>)
   105f6:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.avg_motor_current = I2C_slave_read_buffer[5];
   105f8:	4b44      	ldr	r3, [pc, #272]	; (1070c <i2c_write_request_callback+0x2c8>)
   105fa:	795b      	ldrb	r3, [r3, #5]
   105fc:	001a      	movs	r2, r3
   105fe:	4b4b      	ldr	r3, [pc, #300]	; (1072c <i2c_write_request_callback+0x2e8>)
   10600:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_motor_current += (I2C_slave_read_buffer[6] << 8);
   10602:	4b4a      	ldr	r3, [pc, #296]	; (1072c <i2c_write_request_callback+0x2e8>)
   10604:	685a      	ldr	r2, [r3, #4]
   10606:	4b41      	ldr	r3, [pc, #260]	; (1070c <i2c_write_request_callback+0x2c8>)
   10608:	799b      	ldrb	r3, [r3, #6]
   1060a:	021b      	lsls	r3, r3, #8
   1060c:	18d2      	adds	r2, r2, r3
   1060e:	4b47      	ldr	r3, [pc, #284]	; (1072c <i2c_write_request_callback+0x2e8>)
   10610:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.temp_fet_filtered = I2C_slave_read_buffer[7];
   10612:	4b3e      	ldr	r3, [pc, #248]	; (1070c <i2c_write_request_callback+0x2c8>)
   10614:	79db      	ldrb	r3, [r3, #7]
   10616:	b21a      	sxth	r2, r3
   10618:	4b44      	ldr	r3, [pc, #272]	; (1072c <i2c_write_request_callback+0x2e8>)
   1061a:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.temp_fet_filtered += (I2C_slave_read_buffer[8] << 8);
   1061c:	4b43      	ldr	r3, [pc, #268]	; (1072c <i2c_write_request_callback+0x2e8>)
   1061e:	2200      	movs	r2, #0
   10620:	5e9b      	ldrsh	r3, [r3, r2]
   10622:	b29a      	uxth	r2, r3
   10624:	4b39      	ldr	r3, [pc, #228]	; (1070c <i2c_write_request_callback+0x2c8>)
   10626:	7a1b      	ldrb	r3, [r3, #8]
   10628:	b29b      	uxth	r3, r3
   1062a:	021b      	lsls	r3, r3, #8
   1062c:	b29b      	uxth	r3, r3
   1062e:	18d3      	adds	r3, r2, r3
   10630:	b29b      	uxth	r3, r3
   10632:	b21a      	sxth	r2, r3
   10634:	4b3d      	ldr	r3, [pc, #244]	; (1072c <i2c_write_request_callback+0x2e8>)
   10636:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.duty_cycle = I2C_slave_read_buffer[9];
   10638:	4b34      	ldr	r3, [pc, #208]	; (1070c <i2c_write_request_callback+0x2c8>)
   1063a:	7a5b      	ldrb	r3, [r3, #9]
   1063c:	b21a      	sxth	r2, r3
   1063e:	4b3b      	ldr	r3, [pc, #236]	; (1072c <i2c_write_request_callback+0x2e8>)
   10640:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   10642:	4b32      	ldr	r3, [pc, #200]	; (1070c <i2c_write_request_callback+0x2c8>)
   10644:	7a9b      	ldrb	r3, [r3, #10]
   10646:	001a      	movs	r2, r3
   10648:	4b30      	ldr	r3, [pc, #192]	; (1070c <i2c_write_request_callback+0x2c8>)
   1064a:	7adb      	ldrb	r3, [r3, #11]
   1064c:	021b      	lsls	r3, r3, #8
   1064e:	431a      	orrs	r2, r3
   10650:	4b2e      	ldr	r3, [pc, #184]	; (1070c <i2c_write_request_callback+0x2c8>)
   10652:	7b1b      	ldrb	r3, [r3, #12]
   10654:	041b      	lsls	r3, r3, #16
   10656:	431a      	orrs	r2, r3
   10658:	4b34      	ldr	r3, [pc, #208]	; (1072c <i2c_write_request_callback+0x2e8>)
   1065a:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.amp_hours = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   1065c:	4b2b      	ldr	r3, [pc, #172]	; (1070c <i2c_write_request_callback+0x2c8>)
   1065e:	7b5b      	ldrb	r3, [r3, #13]
   10660:	001a      	movs	r2, r3
   10662:	4b2a      	ldr	r3, [pc, #168]	; (1070c <i2c_write_request_callback+0x2c8>)
   10664:	7b9b      	ldrb	r3, [r3, #14]
   10666:	021b      	lsls	r3, r3, #8
   10668:	431a      	orrs	r2, r3
   1066a:	4b28      	ldr	r3, [pc, #160]	; (1070c <i2c_write_request_callback+0x2c8>)
   1066c:	7bdb      	ldrb	r3, [r3, #15]
   1066e:	041b      	lsls	r3, r3, #16
   10670:	431a      	orrs	r2, r3
   10672:	4b2e      	ldr	r3, [pc, #184]	; (1072c <i2c_write_request_callback+0x2e8>)
   10674:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   10676:	4b25      	ldr	r3, [pc, #148]	; (1070c <i2c_write_request_callback+0x2c8>)
   10678:	7c1b      	ldrb	r3, [r3, #16]
   1067a:	001a      	movs	r2, r3
   1067c:	4b23      	ldr	r3, [pc, #140]	; (1070c <i2c_write_request_callback+0x2c8>)
   1067e:	7c5b      	ldrb	r3, [r3, #17]
   10680:	021b      	lsls	r3, r3, #8
   10682:	431a      	orrs	r2, r3
   10684:	4b21      	ldr	r3, [pc, #132]	; (1070c <i2c_write_request_callback+0x2c8>)
   10686:	7c9b      	ldrb	r3, [r3, #18]
   10688:	041b      	lsls	r3, r3, #16
   1068a:	431a      	orrs	r2, r3
   1068c:	4b27      	ldr	r3, [pc, #156]	; (1072c <i2c_write_request_callback+0x2e8>)
   1068e:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   10690:	4b1e      	ldr	r3, [pc, #120]	; (1070c <i2c_write_request_callback+0x2c8>)
   10692:	7cdb      	ldrb	r3, [r3, #19]
   10694:	001a      	movs	r2, r3
   10696:	4b1d      	ldr	r3, [pc, #116]	; (1070c <i2c_write_request_callback+0x2c8>)
   10698:	7d1b      	ldrb	r3, [r3, #20]
   1069a:	021b      	lsls	r3, r3, #8
   1069c:	431a      	orrs	r2, r3
   1069e:	4b1b      	ldr	r3, [pc, #108]	; (1070c <i2c_write_request_callback+0x2c8>)
   106a0:	7d5b      	ldrb	r3, [r3, #21]
   106a2:	041b      	lsls	r3, r3, #16
   106a4:	431a      	orrs	r2, r3
   106a6:	4b21      	ldr	r3, [pc, #132]	; (1072c <i2c_write_request_callback+0x2e8>)
   106a8:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = (I2C_slave_read_buffer[22] | (I2C_slave_read_buffer[23] << 8) | (I2C_slave_read_buffer[24] << 16));
   106aa:	4b18      	ldr	r3, [pc, #96]	; (1070c <i2c_write_request_callback+0x2c8>)
   106ac:	7d9b      	ldrb	r3, [r3, #22]
   106ae:	001a      	movs	r2, r3
   106b0:	4b16      	ldr	r3, [pc, #88]	; (1070c <i2c_write_request_callback+0x2c8>)
   106b2:	7ddb      	ldrb	r3, [r3, #23]
   106b4:	021b      	lsls	r3, r3, #8
   106b6:	431a      	orrs	r2, r3
   106b8:	4b14      	ldr	r3, [pc, #80]	; (1070c <i2c_write_request_callback+0x2c8>)
   106ba:	7e1b      	ldrb	r3, [r3, #24]
   106bc:	041b      	lsls	r3, r3, #16
   106be:	431a      	orrs	r2, r3
   106c0:	4b1a      	ldr	r3, [pc, #104]	; (1072c <i2c_write_request_callback+0x2e8>)
   106c2:	625a      	str	r2, [r3, #36]	; 0x24
			remote_x = I2C_slave_read_buffer[25];
   106c4:	4b11      	ldr	r3, [pc, #68]	; (1070c <i2c_write_request_callback+0x2c8>)
   106c6:	7e5a      	ldrb	r2, [r3, #25]
   106c8:	4b19      	ldr	r3, [pc, #100]	; (10730 <i2c_write_request_callback+0x2ec>)
   106ca:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
   106cc:	4b0f      	ldr	r3, [pc, #60]	; (1070c <i2c_write_request_callback+0x2c8>)
   106ce:	7e9a      	ldrb	r2, [r3, #26]
   106d0:	4b18      	ldr	r3, [pc, #96]	; (10734 <i2c_write_request_callback+0x2f0>)
   106d2:	701a      	strb	r2, [r3, #0]
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
   106d4:	4b0d      	ldr	r3, [pc, #52]	; (1070c <i2c_write_request_callback+0x2c8>)
   106d6:	7edb      	ldrb	r3, [r3, #27]
   106d8:	105b      	asrs	r3, r3, #1
   106da:	b2db      	uxtb	r3, r3
   106dc:	2203      	movs	r2, #3
   106de:	4013      	ands	r3, r2
   106e0:	b2da      	uxtb	r2, r3
   106e2:	4b15      	ldr	r3, [pc, #84]	; (10738 <i2c_write_request_callback+0x2f4>)
   106e4:	701a      	strb	r2, [r3, #0]
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
   106e6:	4b09      	ldr	r3, [pc, #36]	; (1070c <i2c_write_request_callback+0x2c8>)
   106e8:	7edb      	ldrb	r3, [r3, #27]
   106ea:	2201      	movs	r2, #1
   106ec:	4013      	ands	r3, r2
   106ee:	b2da      	uxtb	r2, r3
   106f0:	4b12      	ldr	r3, [pc, #72]	; (1073c <i2c_write_request_callback+0x2f8>)
   106f2:	701a      	strb	r2, [r3, #0]
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
   106f4:	4b05      	ldr	r3, [pc, #20]	; (1070c <i2c_write_request_callback+0x2c8>)
   106f6:	7f1b      	ldrb	r3, [r3, #28]
   106f8:	b259      	sxtb	r1, r3
   106fa:	4b0c      	ldr	r3, [pc, #48]	; (1072c <i2c_write_request_callback+0x2e8>)
   106fc:	222c      	movs	r2, #44	; 0x2c
   106fe:	5499      	strb	r1, [r3, r2]
}
   10700:	46c0      	nop			; (mov r8, r8)
   10702:	46bd      	mov	sp, r7
   10704:	b002      	add	sp, #8
   10706:	bd80      	pop	{r7, pc}
   10708:	200003b8 	.word	0x200003b8
   1070c:	200007a8 	.word	0x200007a8
   10710:	200000b2 	.word	0x200000b2
   10714:	20000019 	.word	0x20000019
   10718:	0000473b 	.word	0x0000473b
   1071c:	20000fd4 	.word	0x20000fd4
   10720:	000152f9 	.word	0x000152f9
   10724:	2000030e 	.word	0x2000030e
   10728:	200000b1 	.word	0x200000b1
   1072c:	20000958 	.word	0x20000958
   10730:	2000030b 	.word	0x2000030b
   10734:	2000030a 	.word	0x2000030a
   10738:	20000308 	.word	0x20000308
   1073c:	2000030c 	.word	0x2000030c

00010740 <i2c_read_request_callback>:

uint8_t app_remote_check = 0;
void i2c_read_request_callback(struct i2c_slave_module *const module)
{
   10740:	b580      	push	{r7, lr}
   10742:	b082      	sub	sp, #8
   10744:	af00      	add	r7, sp, #0
   10746:	6078      	str	r0, [r7, #4]
	I2C_slave_write_buffer[0] = AppRemoteY;
   10748:	4b10      	ldr	r3, [pc, #64]	; (1078c <i2c_read_request_callback+0x4c>)
   1074a:	781a      	ldrb	r2, [r3, #0]
   1074c:	4b10      	ldr	r3, [pc, #64]	; (10790 <i2c_read_request_callback+0x50>)
   1074e:	701a      	strb	r2, [r3, #0]
	I2C_slave_write_buffer[1] = GET_LIMITS;
   10750:	4b10      	ldr	r3, [pc, #64]	; (10794 <i2c_read_request_callback+0x54>)
   10752:	781a      	ldrb	r2, [r3, #0]
   10754:	4b0e      	ldr	r3, [pc, #56]	; (10790 <i2c_read_request_callback+0x50>)
   10756:	705a      	strb	r2, [r3, #1]
	I2C_slave_write_buffer[2] = app_remote_check;
   10758:	4b0f      	ldr	r3, [pc, #60]	; (10798 <i2c_read_request_callback+0x58>)
   1075a:	781a      	ldrb	r2, [r3, #0]
   1075c:	4b0c      	ldr	r3, [pc, #48]	; (10790 <i2c_read_request_callback+0x50>)
   1075e:	709a      	strb	r2, [r3, #2]

	/* Init i2c packet. */
	packet.data_length = SLAVE_WRITE_DATA_LENGTH;
   10760:	4b0e      	ldr	r3, [pc, #56]	; (1079c <i2c_read_request_callback+0x5c>)
   10762:	2203      	movs	r2, #3
   10764:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_write_buffer;
   10766:	4b0d      	ldr	r3, [pc, #52]	; (1079c <i2c_read_request_callback+0x5c>)
   10768:	4a09      	ldr	r2, [pc, #36]	; (10790 <i2c_read_request_callback+0x50>)
   1076a:	605a      	str	r2, [r3, #4]
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
   1076c:	4a0b      	ldr	r2, [pc, #44]	; (1079c <i2c_read_request_callback+0x5c>)
   1076e:	687b      	ldr	r3, [r7, #4]
   10770:	0011      	movs	r1, r2
   10772:	0018      	movs	r0, r3
   10774:	4b0a      	ldr	r3, [pc, #40]	; (107a0 <i2c_read_request_callback+0x60>)
   10776:	4798      	blx	r3
	NEW_REMOTE_DATA = 0;
   10778:	4b0a      	ldr	r3, [pc, #40]	; (107a4 <i2c_read_request_callback+0x64>)
   1077a:	2200      	movs	r2, #0
   1077c:	701a      	strb	r2, [r3, #0]

	GET_LIMITS = 0;
   1077e:	4b05      	ldr	r3, [pc, #20]	; (10794 <i2c_read_request_callback+0x54>)
   10780:	2200      	movs	r2, #0
   10782:	701a      	strb	r2, [r3, #0]
}
   10784:	46c0      	nop			; (mov r8, r8)
   10786:	46bd      	mov	sp, r7
   10788:	b002      	add	sp, #8
   1078a:	bd80      	pop	{r7, pc}
   1078c:	200000b3 	.word	0x200000b3
   10790:	20000990 	.word	0x20000990
   10794:	20000019 	.word	0x20000019
   10798:	200003e8 	.word	0x200003e8
   1079c:	200003b8 	.word	0x200003b8
   107a0:	00004787 	.word	0x00004787
   107a4:	200003ae 	.word	0x200003ae

000107a8 <configure_i2c_slave_callbacks>:


void configure_i2c_slave_callbacks(void)
{
   107a8:	b580      	push	{r7, lr}
   107aa:	af00      	add	r7, sp, #0
	/* Register and enable callback functions */
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback, I2C_SLAVE_CALLBACK_READ_REQUEST);
   107ac:	490c      	ldr	r1, [pc, #48]	; (107e0 <configure_i2c_slave_callbacks+0x38>)
   107ae:	4b0d      	ldr	r3, [pc, #52]	; (107e4 <configure_i2c_slave_callbacks+0x3c>)
   107b0:	2202      	movs	r2, #2
   107b2:	0018      	movs	r0, r3
   107b4:	4b0c      	ldr	r3, [pc, #48]	; (107e8 <configure_i2c_slave_callbacks+0x40>)
   107b6:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_READ_REQUEST);
   107b8:	4b0a      	ldr	r3, [pc, #40]	; (107e4 <configure_i2c_slave_callbacks+0x3c>)
   107ba:	2102      	movs	r1, #2
   107bc:	0018      	movs	r0, r3
   107be:	4b0b      	ldr	r3, [pc, #44]	; (107ec <configure_i2c_slave_callbacks+0x44>)
   107c0:	4798      	blx	r3

	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   107c2:	490b      	ldr	r1, [pc, #44]	; (107f0 <configure_i2c_slave_callbacks+0x48>)
   107c4:	4b07      	ldr	r3, [pc, #28]	; (107e4 <configure_i2c_slave_callbacks+0x3c>)
   107c6:	2203      	movs	r2, #3
   107c8:	0018      	movs	r0, r3
   107ca:	4b07      	ldr	r3, [pc, #28]	; (107e8 <configure_i2c_slave_callbacks+0x40>)
   107cc:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   107ce:	4b05      	ldr	r3, [pc, #20]	; (107e4 <configure_i2c_slave_callbacks+0x3c>)
   107d0:	2103      	movs	r1, #3
   107d2:	0018      	movs	r0, r3
   107d4:	4b05      	ldr	r3, [pc, #20]	; (107ec <configure_i2c_slave_callbacks+0x44>)
   107d6:	4798      	blx	r3
}
   107d8:	46c0      	nop			; (mov r8, r8)
   107da:	46bd      	mov	sp, r7
   107dc:	bd80      	pop	{r7, pc}
   107de:	46c0      	nop			; (mov r8, r8)
   107e0:	00010741 	.word	0x00010741
   107e4:	20001020 	.word	0x20001020
   107e8:	000046f1 	.word	0x000046f1
   107ec:	000090f5 	.word	0x000090f5
   107f0:	00010445 	.word	0x00010445

000107f4 <configure_eeprom>:

void configure_eeprom(void)
{
   107f4:	b590      	push	{r4, r7, lr}
   107f6:	b083      	sub	sp, #12
   107f8:	af00      	add	r7, sp, #0
	/* Setup EEPROM emulator service */
	enum status_code error_code = eeprom_emulator_init();
   107fa:	1dfc      	adds	r4, r7, #7
   107fc:	4b0a      	ldr	r3, [pc, #40]	; (10828 <configure_eeprom+0x34>)
   107fe:	4798      	blx	r3
   10800:	0003      	movs	r3, r0
   10802:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY) {
   10804:	1dfb      	adds	r3, r7, #7
   10806:	781b      	ldrb	r3, [r3, #0]
   10808:	2b16      	cmp	r3, #22
   1080a:	d100      	bne.n	1080e <configure_eeprom+0x1a>
		while (true) {
   1080c:	e7fe      	b.n	1080c <configure_eeprom+0x18>
			/* No EEPROM section has been set in the device's fuses */
		}
	}
	else if (error_code != STATUS_OK) {
   1080e:	1dfb      	adds	r3, r7, #7
   10810:	781b      	ldrb	r3, [r3, #0]
   10812:	2b00      	cmp	r3, #0
   10814:	d003      	beq.n	1081e <configure_eeprom+0x2a>
		/* Erase the emulated EEPROM memory (assume it is unformatted or
		 * irrecoverably corrupt) */
		eeprom_emulator_erase_memory();
   10816:	4b05      	ldr	r3, [pc, #20]	; (1082c <configure_eeprom+0x38>)
   10818:	4798      	blx	r3
		eeprom_emulator_init();
   1081a:	4b03      	ldr	r3, [pc, #12]	; (10828 <configure_eeprom+0x34>)
   1081c:	4798      	blx	r3
	}
}
   1081e:	46c0      	nop			; (mov r8, r8)
   10820:	46bd      	mov	sp, r7
   10822:	b003      	add	sp, #12
   10824:	bd90      	pop	{r4, r7, pc}
   10826:	46c0      	nop			; (mov r8, r8)
   10828:	00008721 	.word	0x00008721
   1082c:	00008809 	.word	0x00008809

00010830 <main>:




int main (void)
{
   10830:	b5f0      	push	{r4, r5, r6, r7, lr}
   10832:	b095      	sub	sp, #84	; 0x54
   10834:	af00      	add	r7, sp, #0
	system_init();
   10836:	4bd5      	ldr	r3, [pc, #852]	; (10b8c <main+0x35c>)
   10838:	4798      	blx	r3
	configure_tc(); // Configure millis timer
   1083a:	4bd5      	ldr	r3, [pc, #852]	; (10b90 <main+0x360>)
   1083c:	4798      	blx	r3
	
	// Configure Devices
	configure_ADC();
   1083e:	4bd5      	ldr	r3, [pc, #852]	; (10b94 <main+0x364>)
   10840:	4798      	blx	r3
	configure_port_pins();
   10842:	4bd5      	ldr	r3, [pc, #852]	; (10b98 <main+0x368>)
   10844:	4798      	blx	r3
	configure_LED_PWM();
   10846:	4bd5      	ldr	r3, [pc, #852]	; (10b9c <main+0x36c>)
   10848:	4798      	blx	r3

	// Configure The button input pin and interrupt handlers for pulse width measurement
	config_eic();    // Configure the external interruption
   1084a:	4bd5      	ldr	r3, [pc, #852]	; (10ba0 <main+0x370>)
   1084c:	4798      	blx	r3
	config_evsys();  // Configure the event system
   1084e:	4bd5      	ldr	r3, [pc, #852]	; (10ba4 <main+0x374>)
   10850:	4798      	blx	r3
	config_gpio();   // Configure the dedicated pin
   10852:	4bd5      	ldr	r3, [pc, #852]	; (10ba8 <main+0x378>)
   10854:	4798      	blx	r3
	
	//ERROR_LEDs(2); // Uncomment for testing SAM-BA and LED output functionality
	configure_BLE_module(); // Blocks when no BLE module is installed
   10856:	4bd5      	ldr	r3, [pc, #852]	; (10bac <main+0x37c>)
   10858:	4798      	blx	r3
	initIMU();
   1085a:	4bd5      	ldr	r3, [pc, #852]	; (10bb0 <main+0x380>)
   1085c:	4798      	blx	r3
	if(!beginIMU()) ERROR_LEDs(0);
   1085e:	4bd5      	ldr	r3, [pc, #852]	; (10bb4 <main+0x384>)
   10860:	4798      	blx	r3
   10862:	1e03      	subs	r3, r0, #0
   10864:	d102      	bne.n	1086c <main+0x3c>
   10866:	2000      	movs	r0, #0
   10868:	4bd3      	ldr	r3, [pc, #844]	; (10bb8 <main+0x388>)
   1086a:	4798      	blx	r3
	initKalman(0.1, 0.1, 0.5);
   1086c:	22fc      	movs	r2, #252	; 0xfc
   1086e:	0592      	lsls	r2, r2, #22
   10870:	49d2      	ldr	r1, [pc, #840]	; (10bbc <main+0x38c>)
   10872:	4bd2      	ldr	r3, [pc, #840]	; (10bbc <main+0x38c>)
   10874:	1c18      	adds	r0, r3, #0
   10876:	4bd2      	ldr	r3, [pc, #840]	; (10bc0 <main+0x390>)
   10878:	4798      	blx	r3
	  
	configure_eeprom();
   1087a:	4bd2      	ldr	r3, [pc, #840]	; (10bc4 <main+0x394>)
   1087c:	4798      	blx	r3
	restore_led_data();
   1087e:	4bd2      	ldr	r3, [pc, #840]	; (10bc8 <main+0x398>)
   10880:	4798      	blx	r3
	restore_orientation_controls_remote_esc();
   10882:	4bd2      	ldr	r3, [pc, #840]	; (10bcc <main+0x39c>)
   10884:	4798      	blx	r3
	restore_cal_data(true);
   10886:	2001      	movs	r0, #1
   10888:	4bd1      	ldr	r3, [pc, #836]	; (10bd0 <main+0x3a0>)
   1088a:	4798      	blx	r3

	setConstBases();
   1088c:	4bd1      	ldr	r3, [pc, #836]	; (10bd4 <main+0x3a4>)
   1088e:	4798      	blx	r3

	if(esc_comms == COMMS_I2C){
   10890:	4bd1      	ldr	r3, [pc, #836]	; (10bd8 <main+0x3a8>)
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	2b01      	cmp	r3, #1
   10896:	d104      	bne.n	108a2 <main+0x72>
		configure_i2c_slave();
   10898:	4bd0      	ldr	r3, [pc, #832]	; (10bdc <main+0x3ac>)
   1089a:	4798      	blx	r3
		configure_i2c_slave_callbacks();
   1089c:	4bd0      	ldr	r3, [pc, #832]	; (10be0 <main+0x3b0>)
   1089e:	4798      	blx	r3
   108a0:	e00e      	b.n	108c0 <main+0x90>

	} else if(esc_comms == COMMS_UART){
   108a2:	4bcd      	ldr	r3, [pc, #820]	; (10bd8 <main+0x3a8>)
   108a4:	781b      	ldrb	r3, [r3, #0]
   108a6:	2b02      	cmp	r3, #2
   108a8:	d10a      	bne.n	108c0 <main+0x90>
		configure_vesc_usart();
   108aa:	4bce      	ldr	r3, [pc, #824]	; (10be4 <main+0x3b4>)
   108ac:	4798      	blx	r3

		vesc_uart_expected_bytes = VESC_UART_BYTES_START;  // Start listening for start byte
   108ae:	4bce      	ldr	r3, [pc, #824]	; (10be8 <main+0x3b8>)
   108b0:	2200      	movs	r2, #0
   108b2:	701a      	strb	r2, [r3, #0]
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   108b4:	4acd      	ldr	r2, [pc, #820]	; (10bec <main+0x3bc>)
   108b6:	49ce      	ldr	r1, [pc, #824]	; (10bf0 <main+0x3c0>)
   108b8:	4bce      	ldr	r3, [pc, #824]	; (10bf4 <main+0x3c4>)
   108ba:	0018      	movs	r0, r3
   108bc:	4bce      	ldr	r3, [pc, #824]	; (10bf8 <main+0x3c8>)
   108be:	4798      	blx	r3
	}
	
	////////////////////////////////////////////

	configured_comms = esc_comms;
   108c0:	4bc5      	ldr	r3, [pc, #788]	; (10bd8 <main+0x3a8>)
   108c2:	781a      	ldrb	r2, [r3, #0]
   108c4:	4bcd      	ldr	r3, [pc, #820]	; (10bfc <main+0x3cc>)
   108c6:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < ACCELsamples; ++i){
   108c8:	2300      	movs	r3, #0
   108ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   108cc:	e007      	b.n	108de <main+0xae>
		AXaverage[i] = 0;
   108ce:	4bcc      	ldr	r3, [pc, #816]	; (10c00 <main+0x3d0>)
   108d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   108d2:	0052      	lsls	r2, r2, #1
   108d4:	2100      	movs	r1, #0
   108d6:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   108d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   108da:	3301      	adds	r3, #1
   108dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   108de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   108e0:	2b0e      	cmp	r3, #14
   108e2:	ddf4      	ble.n	108ce <main+0x9e>
	}
	
	for(int i = 0; i < ACCELsamples; ++i){
   108e4:	2300      	movs	r3, #0
   108e6:	64bb      	str	r3, [r7, #72]	; 0x48
   108e8:	e007      	b.n	108fa <main+0xca>
		AYaverage[i] = 0;
   108ea:	4bc6      	ldr	r3, [pc, #792]	; (10c04 <main+0x3d4>)
   108ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
   108ee:	0052      	lsls	r2, r2, #1
   108f0:	2100      	movs	r1, #0
   108f2:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   108f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   108f6:	3301      	adds	r3, #1
   108f8:	64bb      	str	r3, [r7, #72]	; 0x48
   108fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   108fc:	2b0e      	cmp	r3, #14
   108fe:	ddf4      	ble.n	108ea <main+0xba>
	}
	
	for(int i = 0; i < ACCELsamples; ++i){
   10900:	2300      	movs	r3, #0
   10902:	647b      	str	r3, [r7, #68]	; 0x44
   10904:	e007      	b.n	10916 <main+0xe6>
		AZaverage[i] = 0;
   10906:	4bc0      	ldr	r3, [pc, #768]	; (10c08 <main+0x3d8>)
   10908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1090a:	0052      	lsls	r2, r2, #1
   1090c:	2100      	movs	r1, #0
   1090e:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   10910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10912:	3301      	adds	r3, #1
   10914:	647b      	str	r3, [r7, #68]	; 0x44
   10916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10918:	2b0e      	cmp	r3, #14
   1091a:	ddf4      	ble.n	10906 <main+0xd6>
	}

	for(int i = 0; i < SLAVE_READ_DATA_LENGTH; ++i){
   1091c:	2300      	movs	r3, #0
   1091e:	643b      	str	r3, [r7, #64]	; 0x40
   10920:	e007      	b.n	10932 <main+0x102>
		I2C_slave_read_buffer[i] = 0;
   10922:	4aba      	ldr	r2, [pc, #744]	; (10c0c <main+0x3dc>)
   10924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10926:	18d3      	adds	r3, r2, r3
   10928:	2200      	movs	r2, #0
   1092a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SLAVE_READ_DATA_LENGTH; ++i){
   1092c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1092e:	3301      	adds	r3, #1
   10930:	643b      	str	r3, [r7, #64]	; 0x40
   10932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10934:	2b1d      	cmp	r3, #29
   10936:	ddf4      	ble.n	10922 <main+0xf2>
	}

	for(int i = 0; i < SLAVE_WRITE_DATA_LENGTH; ++i){
   10938:	2300      	movs	r3, #0
   1093a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1093c:	e007      	b.n	1094e <main+0x11e>
		I2C_slave_write_buffer[i] = 0;
   1093e:	4ab4      	ldr	r2, [pc, #720]	; (10c10 <main+0x3e0>)
   10940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10942:	18d3      	adds	r3, r2, r3
   10944:	2200      	movs	r2, #0
   10946:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SLAVE_WRITE_DATA_LENGTH; ++i){
   10948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1094a:	3301      	adds	r3, #1
   1094c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1094e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10950:	2b02      	cmp	r3, #2
   10952:	ddf4      	ble.n	1093e <main+0x10e>
	}

	// Initialize local variables used in main
	for(int i = 0; i < 44; ++i){
   10954:	2300      	movs	r3, #0
   10956:	63bb      	str	r3, [r7, #56]	; 0x38
   10958:	e007      	b.n	1096a <main+0x13a>
		ble_write_buffer[i] = 0;
   1095a:	4aae      	ldr	r2, [pc, #696]	; (10c14 <main+0x3e4>)
   1095c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1095e:	18d3      	adds	r3, r2, r3
   10960:	2200      	movs	r2, #0
   10962:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 44; ++i){
   10964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10966:	3301      	adds	r3, #1
   10968:	63bb      	str	r3, [r7, #56]	; 0x38
   1096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1096c:	2b2b      	cmp	r3, #43	; 0x2b
   1096e:	ddf4      	ble.n	1095a <main+0x12a>
	}
	VescRemoteX = VescRemoteY = 128;
   10970:	4ba9      	ldr	r3, [pc, #676]	; (10c18 <main+0x3e8>)
   10972:	2280      	movs	r2, #128	; 0x80
   10974:	701a      	strb	r2, [r3, #0]
   10976:	4ba8      	ldr	r3, [pc, #672]	; (10c18 <main+0x3e8>)
   10978:	781a      	ldrb	r2, [r3, #0]
   1097a:	4ba8      	ldr	r3, [pc, #672]	; (10c1c <main+0x3ec>)
   1097c:	701a      	strb	r2, [r3, #0]

	float heading = 0;
   1097e:	2300      	movs	r3, #0
   10980:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t headingTime = 0;
   10982:	2300      	movs	r3, #0
   10984:	623b      	str	r3, [r7, #32]
	uint32_t lheadingTime = 0;
   10986:	2300      	movs	r3, #0
   10988:	633b      	str	r3, [r7, #48]	; 0x30

	int BLE_TX_INDEX = 0;
   1098a:	2300      	movs	r3, #0
   1098c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t BLE_TX_DELAY = 15;
   1098e:	231e      	movs	r3, #30
   10990:	18fb      	adds	r3, r7, r3
   10992:	220f      	movs	r2, #15
   10994:	801a      	strh	r2, [r3, #0]
	uint32_t BLE_TX_TIME = 0;
   10996:	2300      	movs	r3, #0
   10998:	62bb      	str	r3, [r7, #40]	; 0x28
	//uint32_t BLE_DUMMY_TIME = 0;

	mcconf_limits.max_erpm = 1000000;
   1099a:	4ba1      	ldr	r3, [pc, #644]	; (10c20 <main+0x3f0>)
   1099c:	4aa1      	ldr	r2, [pc, #644]	; (10c24 <main+0x3f4>)
   1099e:	619a      	str	r2, [r3, #24]
	mcconf_limits.min_erpm = -1000000;
   109a0:	4b9f      	ldr	r3, [pc, #636]	; (10c20 <main+0x3f0>)
   109a2:	4aa1      	ldr	r2, [pc, #644]	; (10c28 <main+0x3f8>)
   109a4:	615a      	str	r2, [r3, #20]

	////////////////////////////////////////////

	while(1)
	{
		if(configured_comms != esc_comms)
   109a6:	4b95      	ldr	r3, [pc, #596]	; (10bfc <main+0x3cc>)
   109a8:	781a      	ldrb	r2, [r3, #0]
   109aa:	4b8b      	ldr	r3, [pc, #556]	; (10bd8 <main+0x3a8>)
   109ac:	781b      	ldrb	r3, [r3, #0]
   109ae:	429a      	cmp	r2, r3
   109b0:	d002      	beq.n	109b8 <main+0x188>
		{
			// TODO: Deconfigure old comms and configure new comms
			ERROR_LEDs(5);
   109b2:	2005      	movs	r0, #5
   109b4:	4b80      	ldr	r3, [pc, #512]	; (10bb8 <main+0x388>)
   109b6:	4798      	blx	r3
		}

		// Handle BLE Communication
		read_ble_packet();
   109b8:	4b9c      	ldr	r3, [pc, #624]	; (10c2c <main+0x3fc>)
   109ba:	4798      	blx	r3

		// Communicate with the ESC
		if(esc_comms == COMMS_UART){
   109bc:	4b86      	ldr	r3, [pc, #536]	; (10bd8 <main+0x3a8>)
   109be:	781b      	ldrb	r3, [r3, #0]
   109c0:	2b02      	cmp	r3, #2
   109c2:	d118      	bne.n	109f6 <main+0x1c6>
			read_vesc_packet();
   109c4:	4b9a      	ldr	r3, [pc, #616]	; (10c30 <main+0x400>)
   109c6:	4798      	blx	r3
			if(ESC_FW_READ){
   109c8:	4b9a      	ldr	r3, [pc, #616]	; (10c34 <main+0x404>)
   109ca:	781b      	ldrb	r3, [r3, #0]
   109cc:	2b00      	cmp	r3, #0
   109ce:	d010      	beq.n	109f2 <main+0x1c2>
				if(GET_LIMITS) {
   109d0:	4b99      	ldr	r3, [pc, #612]	; (10c38 <main+0x408>)
   109d2:	781b      	ldrb	r3, [r3, #0]
   109d4:	2b00      	cmp	r3, #0
   109d6:	d002      	beq.n	109de <main+0x1ae>
					vesc_get_mcconf();
   109d8:	4b98      	ldr	r3, [pc, #608]	; (10c3c <main+0x40c>)
   109da:	4798      	blx	r3
   109dc:	e00b      	b.n	109f6 <main+0x1c6>
				} else if(SEND_CONTINUOUS){
   109de:	4b98      	ldr	r3, [pc, #608]	; (10c40 <main+0x410>)
   109e0:	781b      	ldrb	r3, [r3, #0]
   109e2:	2b00      	cmp	r3, #0
   109e4:	d007      	beq.n	109f6 <main+0x1c6>
					READ_VESC_VALS = true;
   109e6:	4b97      	ldr	r3, [pc, #604]	; (10c44 <main+0x414>)
   109e8:	2201      	movs	r2, #1
   109ea:	701a      	strb	r2, [r3, #0]
					vesc_read_all();
   109ec:	4b96      	ldr	r3, [pc, #600]	; (10c48 <main+0x418>)
   109ee:	4798      	blx	r3
   109f0:	e001      	b.n	109f6 <main+0x1c6>
				}
			} else{
				detect_vesc_firmware();
   109f2:	4b96      	ldr	r3, [pc, #600]	; (10c4c <main+0x41c>)
   109f4:	4798      	blx	r3
			}
		}

		readAccel();
   109f6:	4b96      	ldr	r3, [pc, #600]	; (10c50 <main+0x420>)
   109f8:	4798      	blx	r3
		readGyro();
   109fa:	4b96      	ldr	r3, [pc, #600]	; (10c54 <main+0x424>)
   109fc:	4798      	blx	r3
		readMag();
   109fe:	4b96      	ldr	r3, [pc, #600]	; (10c58 <main+0x428>)
   10a00:	4798      	blx	r3

		// All IMU measurements are corrected to orient power to front and connectors up
		CorrectIMUvalues(ORIENTATION[0], ORIENTATION[1]);
   10a02:	4b96      	ldr	r3, [pc, #600]	; (10c5c <main+0x42c>)
   10a04:	781a      	ldrb	r2, [r3, #0]
   10a06:	4b95      	ldr	r3, [pc, #596]	; (10c5c <main+0x42c>)
   10a08:	785b      	ldrb	r3, [r3, #1]
   10a0a:	0019      	movs	r1, r3
   10a0c:	0010      	movs	r0, r2
   10a0e:	4b94      	ldr	r3, [pc, #592]	; (10c60 <main+0x430>)
   10a10:	4798      	blx	r3


		if(abs(axKalman - cax) < 10000)
   10a12:	4b94      	ldr	r3, [pc, #592]	; (10c64 <main+0x434>)
   10a14:	681c      	ldr	r4, [r3, #0]
   10a16:	4b94      	ldr	r3, [pc, #592]	; (10c68 <main+0x438>)
   10a18:	2200      	movs	r2, #0
   10a1a:	5e9a      	ldrsh	r2, [r3, r2]
   10a1c:	4b93      	ldr	r3, [pc, #588]	; (10c6c <main+0x43c>)
   10a1e:	0010      	movs	r0, r2
   10a20:	4798      	blx	r3
   10a22:	1c02      	adds	r2, r0, #0
   10a24:	4b92      	ldr	r3, [pc, #584]	; (10c70 <main+0x440>)
   10a26:	1c11      	adds	r1, r2, #0
   10a28:	1c20      	adds	r0, r4, #0
   10a2a:	4798      	blx	r3
   10a2c:	1c03      	adds	r3, r0, #0
   10a2e:	1c1a      	adds	r2, r3, #0
   10a30:	4b90      	ldr	r3, [pc, #576]	; (10c74 <main+0x444>)
   10a32:	1c10      	adds	r0, r2, #0
   10a34:	4798      	blx	r3
   10a36:	0002      	movs	r2, r0
   10a38:	4b8f      	ldr	r3, [pc, #572]	; (10c78 <main+0x448>)
   10a3a:	429a      	cmp	r2, r3
   10a3c:	db29      	blt.n	10a92 <main+0x262>
   10a3e:	4b89      	ldr	r3, [pc, #548]	; (10c64 <main+0x434>)
   10a40:	681c      	ldr	r4, [r3, #0]
   10a42:	4b89      	ldr	r3, [pc, #548]	; (10c68 <main+0x438>)
   10a44:	2200      	movs	r2, #0
   10a46:	5e9a      	ldrsh	r2, [r3, r2]
   10a48:	4b88      	ldr	r3, [pc, #544]	; (10c6c <main+0x43c>)
   10a4a:	0010      	movs	r0, r2
   10a4c:	4798      	blx	r3
   10a4e:	1c02      	adds	r2, r0, #0
   10a50:	4b87      	ldr	r3, [pc, #540]	; (10c70 <main+0x440>)
   10a52:	1c11      	adds	r1, r2, #0
   10a54:	1c20      	adds	r0, r4, #0
   10a56:	4798      	blx	r3
   10a58:	1c03      	adds	r3, r0, #0
   10a5a:	1c1a      	adds	r2, r3, #0
   10a5c:	4b85      	ldr	r3, [pc, #532]	; (10c74 <main+0x444>)
   10a5e:	1c10      	adds	r0, r2, #0
   10a60:	4798      	blx	r3
   10a62:	0002      	movs	r2, r0
   10a64:	4b85      	ldr	r3, [pc, #532]	; (10c7c <main+0x44c>)
   10a66:	429a      	cmp	r2, r3
   10a68:	dc13      	bgt.n	10a92 <main+0x262>
		{
			avgAX = averageAX();
   10a6a:	4b85      	ldr	r3, [pc, #532]	; (10c80 <main+0x450>)
   10a6c:	4798      	blx	r3
   10a6e:	0003      	movs	r3, r0
   10a70:	001a      	movs	r2, r3
   10a72:	4b84      	ldr	r3, [pc, #528]	; (10c84 <main+0x454>)
   10a74:	801a      	strh	r2, [r3, #0]
			axKalman = updateKalman(avgAX, ax_kalman);
   10a76:	4b83      	ldr	r3, [pc, #524]	; (10c84 <main+0x454>)
   10a78:	2200      	movs	r2, #0
   10a7a:	5e9a      	ldrsh	r2, [r3, r2]
   10a7c:	4b7b      	ldr	r3, [pc, #492]	; (10c6c <main+0x43c>)
   10a7e:	0010      	movs	r0, r2
   10a80:	4798      	blx	r3
   10a82:	1c03      	adds	r3, r0, #0
   10a84:	2100      	movs	r1, #0
   10a86:	1c18      	adds	r0, r3, #0
   10a88:	4b7f      	ldr	r3, [pc, #508]	; (10c88 <main+0x458>)
   10a8a:	4798      	blx	r3
   10a8c:	1c02      	adds	r2, r0, #0
   10a8e:	4b75      	ldr	r3, [pc, #468]	; (10c64 <main+0x434>)
   10a90:	601a      	str	r2, [r3, #0]
		}
		avgAY = averageAY();
   10a92:	4b7e      	ldr	r3, [pc, #504]	; (10c8c <main+0x45c>)
   10a94:	4798      	blx	r3
   10a96:	0003      	movs	r3, r0
   10a98:	001a      	movs	r2, r3
   10a9a:	4b7d      	ldr	r3, [pc, #500]	; (10c90 <main+0x460>)
   10a9c:	801a      	strh	r2, [r3, #0]
		//avgAZ = averageAZ();
		
		getLightSens(&light_sens);
   10a9e:	4b7d      	ldr	r3, [pc, #500]	; (10c94 <main+0x464>)
   10aa0:	0018      	movs	r0, r3
   10aa2:	4b7d      	ldr	r3, [pc, #500]	; (10c98 <main+0x468>)
   10aa4:	4798      	blx	r3
		light_sens = updateKalman(light_sens, light_kalman);
   10aa6:	4b7b      	ldr	r3, [pc, #492]	; (10c94 <main+0x464>)
   10aa8:	881a      	ldrh	r2, [r3, #0]
   10aaa:	4b7c      	ldr	r3, [pc, #496]	; (10c9c <main+0x46c>)
   10aac:	0010      	movs	r0, r2
   10aae:	4798      	blx	r3
   10ab0:	1c03      	adds	r3, r0, #0
   10ab2:	2106      	movs	r1, #6
   10ab4:	1c18      	adds	r0, r3, #0
   10ab6:	4b74      	ldr	r3, [pc, #464]	; (10c88 <main+0x458>)
   10ab8:	4798      	blx	r3
   10aba:	1c02      	adds	r2, r0, #0
   10abc:	4b78      	ldr	r3, [pc, #480]	; (10ca0 <main+0x470>)
   10abe:	1c10      	adds	r0, r2, #0
   10ac0:	4798      	blx	r3
   10ac2:	0003      	movs	r3, r0
   10ac4:	b29a      	uxth	r2, r3
   10ac6:	4b73      	ldr	r3, [pc, #460]	; (10c94 <main+0x464>)
   10ac8:	801a      	strh	r2, [r3, #0]
		
		ayKalman = updateKalman(avgAY, ay_kalman);
   10aca:	4b71      	ldr	r3, [pc, #452]	; (10c90 <main+0x460>)
   10acc:	2200      	movs	r2, #0
   10ace:	5e9a      	ldrsh	r2, [r3, r2]
   10ad0:	4b66      	ldr	r3, [pc, #408]	; (10c6c <main+0x43c>)
   10ad2:	0010      	movs	r0, r2
   10ad4:	4798      	blx	r3
   10ad6:	1c03      	adds	r3, r0, #0
   10ad8:	2101      	movs	r1, #1
   10ada:	1c18      	adds	r0, r3, #0
   10adc:	4b6a      	ldr	r3, [pc, #424]	; (10c88 <main+0x458>)
   10ade:	4798      	blx	r3
   10ae0:	1c02      	adds	r2, r0, #0
   10ae2:	4b70      	ldr	r3, [pc, #448]	; (10ca4 <main+0x474>)
   10ae4:	601a      	str	r2, [r3, #0]
		azKalman = updateKalman(caz, az_kalman);
   10ae6:	4b70      	ldr	r3, [pc, #448]	; (10ca8 <main+0x478>)
   10ae8:	2200      	movs	r2, #0
   10aea:	5e9a      	ldrsh	r2, [r3, r2]
   10aec:	4b5f      	ldr	r3, [pc, #380]	; (10c6c <main+0x43c>)
   10aee:	0010      	movs	r0, r2
   10af0:	4798      	blx	r3
   10af2:	1c03      	adds	r3, r0, #0
   10af4:	2102      	movs	r1, #2
   10af6:	1c18      	adds	r0, r3, #0
   10af8:	4b63      	ldr	r3, [pc, #396]	; (10c88 <main+0x458>)
   10afa:	4798      	blx	r3
   10afc:	1c02      	adds	r2, r0, #0
   10afe:	4b6b      	ldr	r3, [pc, #428]	; (10cac <main+0x47c>)
   10b00:	601a      	str	r2, [r3, #0]
		//avgAZ = averageAZ();
		gxKalman = calcGyro(cgx);//(uint16_t)(updateKalman(calcGyro(cgx), gx_kalman)*10);
   10b02:	4b6b      	ldr	r3, [pc, #428]	; (10cb0 <main+0x480>)
   10b04:	2200      	movs	r2, #0
   10b06:	5e9b      	ldrsh	r3, [r3, r2]
   10b08:	0018      	movs	r0, r3
   10b0a:	4b6a      	ldr	r3, [pc, #424]	; (10cb4 <main+0x484>)
   10b0c:	4798      	blx	r3
   10b0e:	1c02      	adds	r2, r0, #0
   10b10:	4b69      	ldr	r3, [pc, #420]	; (10cb8 <main+0x488>)
   10b12:	601a      	str	r2, [r3, #0]
		gyKalman = calcGyro(cgy);//(uint16_t)(updateKalman(calcGyro(cgy), gy_kalman)*10);
   10b14:	4b69      	ldr	r3, [pc, #420]	; (10cbc <main+0x48c>)
   10b16:	2200      	movs	r2, #0
   10b18:	5e9b      	ldrsh	r3, [r3, r2]
   10b1a:	0018      	movs	r0, r3
   10b1c:	4b65      	ldr	r3, [pc, #404]	; (10cb4 <main+0x484>)
   10b1e:	4798      	blx	r3
   10b20:	1c02      	adds	r2, r0, #0
   10b22:	4b67      	ldr	r3, [pc, #412]	; (10cc0 <main+0x490>)
   10b24:	601a      	str	r2, [r3, #0]
		gzKalman = calcGyro(cgz);//(updateKalman(calcGyro(cgz), gz_kalman));
   10b26:	4b67      	ldr	r3, [pc, #412]	; (10cc4 <main+0x494>)
   10b28:	2200      	movs	r2, #0
   10b2a:	5e9b      	ldrsh	r3, [r3, r2]
   10b2c:	0018      	movs	r0, r3
   10b2e:	4b61      	ldr	r3, [pc, #388]	; (10cb4 <main+0x484>)
   10b30:	4798      	blx	r3
   10b32:	1c02      	adds	r2, r0, #0
   10b34:	4b64      	ldr	r3, [pc, #400]	; (10cc8 <main+0x498>)
   10b36:	601a      	str	r2, [r3, #0]

		if(axKalman > kalmanAX_max)
   10b38:	4b4a      	ldr	r3, [pc, #296]	; (10c64 <main+0x434>)
   10b3a:	681a      	ldr	r2, [r3, #0]
   10b3c:	4b63      	ldr	r3, [pc, #396]	; (10ccc <main+0x49c>)
   10b3e:	6819      	ldr	r1, [r3, #0]
   10b40:	4b63      	ldr	r3, [pc, #396]	; (10cd0 <main+0x4a0>)
   10b42:	1c10      	adds	r0, r2, #0
   10b44:	4798      	blx	r3
   10b46:	1e03      	subs	r3, r0, #0
   10b48:	d004      	beq.n	10b54 <main+0x324>
			kalmanAX_max = axKalman;
   10b4a:	4b46      	ldr	r3, [pc, #280]	; (10c64 <main+0x434>)
   10b4c:	681a      	ldr	r2, [r3, #0]
   10b4e:	4b5f      	ldr	r3, [pc, #380]	; (10ccc <main+0x49c>)
   10b50:	601a      	str	r2, [r3, #0]
   10b52:	e00c      	b.n	10b6e <main+0x33e>
		else if(axKalman < kalmanAX_min)
   10b54:	4b43      	ldr	r3, [pc, #268]	; (10c64 <main+0x434>)
   10b56:	681a      	ldr	r2, [r3, #0]
   10b58:	4b5e      	ldr	r3, [pc, #376]	; (10cd4 <main+0x4a4>)
   10b5a:	6819      	ldr	r1, [r3, #0]
   10b5c:	4b5e      	ldr	r3, [pc, #376]	; (10cd8 <main+0x4a8>)
   10b5e:	1c10      	adds	r0, r2, #0
   10b60:	4798      	blx	r3
   10b62:	1e03      	subs	r3, r0, #0
   10b64:	d003      	beq.n	10b6e <main+0x33e>
			kalmanAX_min = axKalman;
   10b66:	4b3f      	ldr	r3, [pc, #252]	; (10c64 <main+0x434>)
   10b68:	681a      	ldr	r2, [r3, #0]
   10b6a:	4b5a      	ldr	r3, [pc, #360]	; (10cd4 <main+0x4a4>)
   10b6c:	601a      	str	r2, [r3, #0]

		if(ayKalman > kalmanAY_max)
   10b6e:	4b4d      	ldr	r3, [pc, #308]	; (10ca4 <main+0x474>)
   10b70:	681a      	ldr	r2, [r3, #0]
   10b72:	4b5a      	ldr	r3, [pc, #360]	; (10cdc <main+0x4ac>)
   10b74:	6819      	ldr	r1, [r3, #0]
   10b76:	4b56      	ldr	r3, [pc, #344]	; (10cd0 <main+0x4a0>)
   10b78:	1c10      	adds	r0, r2, #0
   10b7a:	4798      	blx	r3
   10b7c:	1e03      	subs	r3, r0, #0
   10b7e:	d100      	bne.n	10b82 <main+0x352>
   10b80:	e0ae      	b.n	10ce0 <main+0x4b0>
			kalmanAY_max = ayKalman;
   10b82:	4b48      	ldr	r3, [pc, #288]	; (10ca4 <main+0x474>)
   10b84:	681a      	ldr	r2, [r3, #0]
   10b86:	4b55      	ldr	r3, [pc, #340]	; (10cdc <main+0x4ac>)
   10b88:	601a      	str	r2, [r3, #0]
   10b8a:	e0b6      	b.n	10cfa <main+0x4ca>
   10b8c:	00007f65 	.word	0x00007f65
   10b90:	0000b0b1 	.word	0x0000b0b1
   10b94:	000102d1 	.word	0x000102d1
   10b98:	00010361 	.word	0x00010361
   10b9c:	0000b161 	.word	0x0000b161
   10ba0:	0000da45 	.word	0x0000da45
   10ba4:	0000dabd 	.word	0x0000dabd
   10ba8:	0000dc41 	.word	0x0000dc41
   10bac:	0000f521 	.word	0x0000f521
   10bb0:	000093f9 	.word	0x000093f9
   10bb4:	0000955d 	.word	0x0000955d
   10bb8:	0000b631 	.word	0x0000b631
   10bbc:	3dcccccd 	.word	0x3dcccccd
   10bc0:	00013d1d 	.word	0x00013d1d
   10bc4:	000107f5 	.word	0x000107f5
   10bc8:	0000e905 	.word	0x0000e905
   10bcc:	0000f289 	.word	0x0000f289
   10bd0:	0000ef51 	.word	0x0000ef51
   10bd4:	0000b589 	.word	0x0000b589
   10bd8:	20000310 	.word	0x20000310
   10bdc:	000103e1 	.word	0x000103e1
   10be0:	000107a9 	.word	0x000107a9
   10be4:	0000b8f1 	.word	0x0000b8f1
   10be8:	20000372 	.word	0x20000372
   10bec:	00000206 	.word	0x00000206
   10bf0:	20000a78 	.word	0x20000a78
   10bf4:	20000718 	.word	0x20000718
   10bf8:	00006671 	.word	0x00006671
   10bfc:	2000036e 	.word	0x2000036e
   10c00:	20000a58 	.word	0x20000a58
   10c04:	20000a1c 	.word	0x20000a1c
   10c08:	20000994 	.word	0x20000994
   10c0c:	200007a8 	.word	0x200007a8
   10c10:	20000990 	.word	0x20000990
   10c14:	20000928 	.word	0x20000928
   10c18:	20000374 	.word	0x20000374
   10c1c:	20000373 	.word	0x20000373
   10c20:	20000fd4 	.word	0x20000fd4
   10c24:	000f4240 	.word	0x000f4240
   10c28:	fff0bdc0 	.word	0xfff0bdc0
   10c2c:	000101f1 	.word	0x000101f1
   10c30:	0000d7dd 	.word	0x0000d7dd
   10c34:	2000030f 	.word	0x2000030f
   10c38:	20000019 	.word	0x20000019
   10c3c:	0000cdcd 	.word	0x0000cdcd
   10c40:	200000b1 	.word	0x200000b1
   10c44:	2000036b 	.word	0x2000036b
   10c48:	0000d055 	.word	0x0000d055
   10c4c:	0000d1d1 	.word	0x0000d1d1
   10c50:	00009c61 	.word	0x00009c61
   10c54:	00009d99 	.word	0x00009d99
   10c58:	00009d2d 	.word	0x00009d2d
   10c5c:	20000004 	.word	0x20000004
   10c60:	0000a51d 	.word	0x0000a51d
   10c64:	200003d0 	.word	0x200003d0
   10c68:	200002fc 	.word	0x200002fc
   10c6c:	00015259 	.word	0x00015259
   10c70:	00014ee1 	.word	0x00014ee1
   10c74:	00015219 	.word	0x00015219
   10c78:	ffffd8f1 	.word	0xffffd8f1
   10c7c:	0000270f 	.word	0x0000270f
   10c80:	00013a3d 	.word	0x00013a3d
   10c84:	200003cc 	.word	0x200003cc
   10c88:	00013df5 	.word	0x00013df5
   10c8c:	00013abd 	.word	0x00013abd
   10c90:	200003ce 	.word	0x200003ce
   10c94:	200003c0 	.word	0x200003c0
   10c98:	000139e9 	.word	0x000139e9
   10c9c:	000152f9 	.word	0x000152f9
   10ca0:	00014531 	.word	0x00014531
   10ca4:	200003d4 	.word	0x200003d4
   10ca8:	20000300 	.word	0x20000300
   10cac:	200003d8 	.word	0x200003d8
   10cb0:	200002f6 	.word	0x200002f6
   10cb4:	00009e65 	.word	0x00009e65
   10cb8:	200003dc 	.word	0x200003dc
   10cbc:	200002f8 	.word	0x200002f8
   10cc0:	200003e0 	.word	0x200003e0
   10cc4:	200002fa 	.word	0x200002fa
   10cc8:	200003e4 	.word	0x200003e4
   10ccc:	200000b8 	.word	0x200000b8
   10cd0:	000144b5 	.word	0x000144b5
   10cd4:	200000b4 	.word	0x200000b4
   10cd8:	0001448d 	.word	0x0001448d
   10cdc:	200000c0 	.word	0x200000c0
		else if(ayKalman < kalmanAY_min)
   10ce0:	4bbf      	ldr	r3, [pc, #764]	; (10fe0 <main+0x7b0>)
   10ce2:	681a      	ldr	r2, [r3, #0]
   10ce4:	4bbf      	ldr	r3, [pc, #764]	; (10fe4 <main+0x7b4>)
   10ce6:	6819      	ldr	r1, [r3, #0]
   10ce8:	4bbf      	ldr	r3, [pc, #764]	; (10fe8 <main+0x7b8>)
   10cea:	1c10      	adds	r0, r2, #0
   10cec:	4798      	blx	r3
   10cee:	1e03      	subs	r3, r0, #0
   10cf0:	d003      	beq.n	10cfa <main+0x4ca>
			kalmanAY_min = ayKalman;
   10cf2:	4bbb      	ldr	r3, [pc, #748]	; (10fe0 <main+0x7b0>)
   10cf4:	681a      	ldr	r2, [r3, #0]
   10cf6:	4bbb      	ldr	r3, [pc, #748]	; (10fe4 <main+0x7b4>)
   10cf8:	601a      	str	r2, [r3, #0]

		if(azKalman > kalmanAZ_max)
   10cfa:	4bbc      	ldr	r3, [pc, #752]	; (10fec <main+0x7bc>)
   10cfc:	681a      	ldr	r2, [r3, #0]
   10cfe:	4bbc      	ldr	r3, [pc, #752]	; (10ff0 <main+0x7c0>)
   10d00:	6819      	ldr	r1, [r3, #0]
   10d02:	4bbc      	ldr	r3, [pc, #752]	; (10ff4 <main+0x7c4>)
   10d04:	1c10      	adds	r0, r2, #0
   10d06:	4798      	blx	r3
   10d08:	1e03      	subs	r3, r0, #0
   10d0a:	d004      	beq.n	10d16 <main+0x4e6>
			kalmanAZ_max = azKalman;
   10d0c:	4bb7      	ldr	r3, [pc, #732]	; (10fec <main+0x7bc>)
   10d0e:	681a      	ldr	r2, [r3, #0]
   10d10:	4bb7      	ldr	r3, [pc, #732]	; (10ff0 <main+0x7c0>)
   10d12:	601a      	str	r2, [r3, #0]
   10d14:	e00c      	b.n	10d30 <main+0x500>
		else if(azKalman < kalmanAZ_min)
   10d16:	4bb5      	ldr	r3, [pc, #724]	; (10fec <main+0x7bc>)
   10d18:	681a      	ldr	r2, [r3, #0]
   10d1a:	4bb7      	ldr	r3, [pc, #732]	; (10ff8 <main+0x7c8>)
   10d1c:	6819      	ldr	r1, [r3, #0]
   10d1e:	4bb2      	ldr	r3, [pc, #712]	; (10fe8 <main+0x7b8>)
   10d20:	1c10      	adds	r0, r2, #0
   10d22:	4798      	blx	r3
   10d24:	1e03      	subs	r3, r0, #0
   10d26:	d003      	beq.n	10d30 <main+0x500>
			kalmanAZ_min = azKalman;
   10d28:	4bb0      	ldr	r3, [pc, #704]	; (10fec <main+0x7bc>)
   10d2a:	681a      	ldr	r2, [r3, #0]
   10d2c:	4bb2      	ldr	r3, [pc, #712]	; (10ff8 <main+0x7c8>)
   10d2e:	601a      	str	r2, [r3, #0]
			
		if(gxKalman > kalmanGX_max)
   10d30:	4bb2      	ldr	r3, [pc, #712]	; (10ffc <main+0x7cc>)
   10d32:	681a      	ldr	r2, [r3, #0]
   10d34:	4bb2      	ldr	r3, [pc, #712]	; (11000 <main+0x7d0>)
   10d36:	6819      	ldr	r1, [r3, #0]
   10d38:	4bae      	ldr	r3, [pc, #696]	; (10ff4 <main+0x7c4>)
   10d3a:	1c10      	adds	r0, r2, #0
   10d3c:	4798      	blx	r3
   10d3e:	1e03      	subs	r3, r0, #0
   10d40:	d004      	beq.n	10d4c <main+0x51c>
			kalmanGX_max = gxKalman;
   10d42:	4bae      	ldr	r3, [pc, #696]	; (10ffc <main+0x7cc>)
   10d44:	681a      	ldr	r2, [r3, #0]
   10d46:	4bae      	ldr	r3, [pc, #696]	; (11000 <main+0x7d0>)
   10d48:	601a      	str	r2, [r3, #0]
   10d4a:	e00c      	b.n	10d66 <main+0x536>
		else if(gxKalman < kalmanGX_min)
   10d4c:	4bab      	ldr	r3, [pc, #684]	; (10ffc <main+0x7cc>)
   10d4e:	681a      	ldr	r2, [r3, #0]
   10d50:	4bac      	ldr	r3, [pc, #688]	; (11004 <main+0x7d4>)
   10d52:	6819      	ldr	r1, [r3, #0]
   10d54:	4ba4      	ldr	r3, [pc, #656]	; (10fe8 <main+0x7b8>)
   10d56:	1c10      	adds	r0, r2, #0
   10d58:	4798      	blx	r3
   10d5a:	1e03      	subs	r3, r0, #0
   10d5c:	d003      	beq.n	10d66 <main+0x536>
			kalmanGX_min = gxKalman;
   10d5e:	4ba7      	ldr	r3, [pc, #668]	; (10ffc <main+0x7cc>)
   10d60:	681a      	ldr	r2, [r3, #0]
   10d62:	4ba8      	ldr	r3, [pc, #672]	; (11004 <main+0x7d4>)
   10d64:	601a      	str	r2, [r3, #0]

		if(gyKalman > kalmanGY_max)
   10d66:	4ba8      	ldr	r3, [pc, #672]	; (11008 <main+0x7d8>)
   10d68:	681a      	ldr	r2, [r3, #0]
   10d6a:	4ba8      	ldr	r3, [pc, #672]	; (1100c <main+0x7dc>)
   10d6c:	6819      	ldr	r1, [r3, #0]
   10d6e:	4ba1      	ldr	r3, [pc, #644]	; (10ff4 <main+0x7c4>)
   10d70:	1c10      	adds	r0, r2, #0
   10d72:	4798      	blx	r3
   10d74:	1e03      	subs	r3, r0, #0
   10d76:	d004      	beq.n	10d82 <main+0x552>
			kalmanGY_max = gyKalman;
   10d78:	4ba3      	ldr	r3, [pc, #652]	; (11008 <main+0x7d8>)
   10d7a:	681a      	ldr	r2, [r3, #0]
   10d7c:	4ba3      	ldr	r3, [pc, #652]	; (1100c <main+0x7dc>)
   10d7e:	601a      	str	r2, [r3, #0]
   10d80:	e00c      	b.n	10d9c <main+0x56c>
		else if(gyKalman < kalmanGY_min)
   10d82:	4ba1      	ldr	r3, [pc, #644]	; (11008 <main+0x7d8>)
   10d84:	681a      	ldr	r2, [r3, #0]
   10d86:	4ba2      	ldr	r3, [pc, #648]	; (11010 <main+0x7e0>)
   10d88:	6819      	ldr	r1, [r3, #0]
   10d8a:	4b97      	ldr	r3, [pc, #604]	; (10fe8 <main+0x7b8>)
   10d8c:	1c10      	adds	r0, r2, #0
   10d8e:	4798      	blx	r3
   10d90:	1e03      	subs	r3, r0, #0
   10d92:	d003      	beq.n	10d9c <main+0x56c>
			kalmanGY_min = gyKalman;
   10d94:	4b9c      	ldr	r3, [pc, #624]	; (11008 <main+0x7d8>)
   10d96:	681a      	ldr	r2, [r3, #0]
   10d98:	4b9d      	ldr	r3, [pc, #628]	; (11010 <main+0x7e0>)
   10d9a:	601a      	str	r2, [r3, #0]

		if(gzKalman > kalmanAZ_max)
   10d9c:	4b9d      	ldr	r3, [pc, #628]	; (11014 <main+0x7e4>)
   10d9e:	681a      	ldr	r2, [r3, #0]
   10da0:	4b93      	ldr	r3, [pc, #588]	; (10ff0 <main+0x7c0>)
   10da2:	6819      	ldr	r1, [r3, #0]
   10da4:	4b93      	ldr	r3, [pc, #588]	; (10ff4 <main+0x7c4>)
   10da6:	1c10      	adds	r0, r2, #0
   10da8:	4798      	blx	r3
   10daa:	1e03      	subs	r3, r0, #0
   10dac:	d004      	beq.n	10db8 <main+0x588>
			kalmanGZ_max = gzKalman;
   10dae:	4b99      	ldr	r3, [pc, #612]	; (11014 <main+0x7e4>)
   10db0:	681a      	ldr	r2, [r3, #0]
   10db2:	4b99      	ldr	r3, [pc, #612]	; (11018 <main+0x7e8>)
   10db4:	601a      	str	r2, [r3, #0]
   10db6:	e00c      	b.n	10dd2 <main+0x5a2>
		else if(gzKalman < kalmanGZ_min)
   10db8:	4b96      	ldr	r3, [pc, #600]	; (11014 <main+0x7e4>)
   10dba:	681a      	ldr	r2, [r3, #0]
   10dbc:	4b97      	ldr	r3, [pc, #604]	; (1101c <main+0x7ec>)
   10dbe:	6819      	ldr	r1, [r3, #0]
   10dc0:	4b89      	ldr	r3, [pc, #548]	; (10fe8 <main+0x7b8>)
   10dc2:	1c10      	adds	r0, r2, #0
   10dc4:	4798      	blx	r3
   10dc6:	1e03      	subs	r3, r0, #0
   10dc8:	d003      	beq.n	10dd2 <main+0x5a2>
			kalmanGZ_min = gzKalman;
   10dca:	4b92      	ldr	r3, [pc, #584]	; (11014 <main+0x7e4>)
   10dcc:	681a      	ldr	r2, [r3, #0]
   10dce:	4b93      	ldr	r3, [pc, #588]	; (1101c <main+0x7ec>)
   10dd0:	601a      	str	r2, [r3, #0]

		headingTime = millis();
   10dd2:	4b93      	ldr	r3, [pc, #588]	; (11020 <main+0x7f0>)
   10dd4:	4798      	blx	r3
   10dd6:	0003      	movs	r3, r0
   10dd8:	623b      	str	r3, [r7, #32]
		if(abs(gzKalman) >= 0.5){
   10dda:	4b8e      	ldr	r3, [pc, #568]	; (11014 <main+0x7e4>)
   10ddc:	681a      	ldr	r2, [r3, #0]
   10dde:	4b91      	ldr	r3, [pc, #580]	; (11024 <main+0x7f4>)
   10de0:	1c10      	adds	r0, r2, #0
   10de2:	4798      	blx	r3
   10de4:	0003      	movs	r3, r0
   10de6:	17d9      	asrs	r1, r3, #31
   10de8:	185a      	adds	r2, r3, r1
   10dea:	404a      	eors	r2, r1
   10dec:	4b8e      	ldr	r3, [pc, #568]	; (11028 <main+0x7f8>)
   10dee:	0010      	movs	r0, r2
   10df0:	4798      	blx	r3
   10df2:	4c8e      	ldr	r4, [pc, #568]	; (1102c <main+0x7fc>)
   10df4:	2200      	movs	r2, #0
   10df6:	4b8e      	ldr	r3, [pc, #568]	; (11030 <main+0x800>)
   10df8:	47a0      	blx	r4
   10dfa:	1e03      	subs	r3, r0, #0
   10dfc:	d039      	beq.n	10e72 <main+0x642>
			if(headingTime < lheadingTime){
   10dfe:	6a3a      	ldr	r2, [r7, #32]
   10e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10e02:	429a      	cmp	r2, r3
   10e04:	d21b      	bcs.n	10e3e <main+0x60e>
				heading += (gzKalman) * (((float)(headingTime + (0xFFFFFFFF - lheadingTime)))/1000);
   10e06:	6a3a      	ldr	r2, [r7, #32]
   10e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10e0a:	1ad3      	subs	r3, r2, r3
   10e0c:	1e5a      	subs	r2, r3, #1
   10e0e:	4b89      	ldr	r3, [pc, #548]	; (11034 <main+0x804>)
   10e10:	0010      	movs	r0, r2
   10e12:	4798      	blx	r3
   10e14:	1c02      	adds	r2, r0, #0
   10e16:	4b88      	ldr	r3, [pc, #544]	; (11038 <main+0x808>)
   10e18:	4988      	ldr	r1, [pc, #544]	; (1103c <main+0x80c>)
   10e1a:	1c10      	adds	r0, r2, #0
   10e1c:	4798      	blx	r3
   10e1e:	1c03      	adds	r3, r0, #0
   10e20:	1c18      	adds	r0, r3, #0
   10e22:	4b7c      	ldr	r3, [pc, #496]	; (11014 <main+0x7e4>)
   10e24:	681a      	ldr	r2, [r3, #0]
   10e26:	4b86      	ldr	r3, [pc, #536]	; (11040 <main+0x810>)
   10e28:	1c11      	adds	r1, r2, #0
   10e2a:	4798      	blx	r3
   10e2c:	1c03      	adds	r3, r0, #0
   10e2e:	1c1a      	adds	r2, r3, #0
   10e30:	4b84      	ldr	r3, [pc, #528]	; (11044 <main+0x814>)
   10e32:	1c11      	adds	r1, r2, #0
   10e34:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10e36:	4798      	blx	r3
   10e38:	1c03      	adds	r3, r0, #0
   10e3a:	637b      	str	r3, [r7, #52]	; 0x34
   10e3c:	e019      	b.n	10e72 <main+0x642>
			}
			else
				heading += (gzKalman) * (((float)(headingTime - lheadingTime))/1000);
   10e3e:	6a3a      	ldr	r2, [r7, #32]
   10e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10e42:	1ad2      	subs	r2, r2, r3
   10e44:	4b7b      	ldr	r3, [pc, #492]	; (11034 <main+0x804>)
   10e46:	0010      	movs	r0, r2
   10e48:	4798      	blx	r3
   10e4a:	1c02      	adds	r2, r0, #0
   10e4c:	4b7a      	ldr	r3, [pc, #488]	; (11038 <main+0x808>)
   10e4e:	497b      	ldr	r1, [pc, #492]	; (1103c <main+0x80c>)
   10e50:	1c10      	adds	r0, r2, #0
   10e52:	4798      	blx	r3
   10e54:	1c03      	adds	r3, r0, #0
   10e56:	1c18      	adds	r0, r3, #0
   10e58:	4b6e      	ldr	r3, [pc, #440]	; (11014 <main+0x7e4>)
   10e5a:	681a      	ldr	r2, [r3, #0]
   10e5c:	4b78      	ldr	r3, [pc, #480]	; (11040 <main+0x810>)
   10e5e:	1c11      	adds	r1, r2, #0
   10e60:	4798      	blx	r3
   10e62:	1c03      	adds	r3, r0, #0
   10e64:	1c1a      	adds	r2, r3, #0
   10e66:	4b77      	ldr	r3, [pc, #476]	; (11044 <main+0x814>)
   10e68:	1c11      	adds	r1, r2, #0
   10e6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10e6c:	4798      	blx	r3
   10e6e:	1c03      	adds	r3, r0, #0
   10e70:	637b      	str	r3, [r7, #52]	; 0x34
		}
		lheadingTime = headingTime;
   10e72:	6a3b      	ldr	r3, [r7, #32]
   10e74:	633b      	str	r3, [r7, #48]	; 0x30
		if(heading < 0)
   10e76:	4b5c      	ldr	r3, [pc, #368]	; (10fe8 <main+0x7b8>)
   10e78:	2100      	movs	r1, #0
   10e7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10e7c:	4798      	blx	r3
   10e7e:	1e03      	subs	r3, r0, #0
   10e80:	d006      	beq.n	10e90 <main+0x660>
			heading = 360 + heading;
   10e82:	4b70      	ldr	r3, [pc, #448]	; (11044 <main+0x814>)
   10e84:	4970      	ldr	r1, [pc, #448]	; (11048 <main+0x818>)
   10e86:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10e88:	4798      	blx	r3
   10e8a:	1c03      	adds	r3, r0, #0
   10e8c:	637b      	str	r3, [r7, #52]	; 0x34
   10e8e:	e00b      	b.n	10ea8 <main+0x678>
		else if(heading > 360)
   10e90:	4b58      	ldr	r3, [pc, #352]	; (10ff4 <main+0x7c4>)
   10e92:	496d      	ldr	r1, [pc, #436]	; (11048 <main+0x818>)
   10e94:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10e96:	4798      	blx	r3
   10e98:	1e03      	subs	r3, r0, #0
   10e9a:	d005      	beq.n	10ea8 <main+0x678>
			heading = heading - 360;
   10e9c:	4b6b      	ldr	r3, [pc, #428]	; (1104c <main+0x81c>)
   10e9e:	496a      	ldr	r1, [pc, #424]	; (11048 <main+0x818>)
   10ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10ea2:	4798      	blx	r3
   10ea4:	1c03      	adds	r3, r0, #0
   10ea6:	637b      	str	r3, [r7, #52]	; 0x34

		
		if(BLE_TX_TIME>millis())
   10ea8:	4b5d      	ldr	r3, [pc, #372]	; (11020 <main+0x7f0>)
   10eaa:	4798      	blx	r3
   10eac:	0002      	movs	r2, r0
   10eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10eb0:	429a      	cmp	r2, r3
   10eb2:	d201      	bcs.n	10eb8 <main+0x688>
			BLE_TX_TIME = 0;
   10eb4:	2300      	movs	r3, #0
   10eb6:	62bb      	str	r3, [r7, #40]	; 0x28
		if(SEND_CONTINUOUS && app_remote_check == 0 && ((millis()-BLE_TX_TIME) >= BLE_TX_DELAY) && usart_get_job_status(&ble_usart, USART_TRANSCEIVER_TX) != STATUS_BUSY)
   10eb8:	4b65      	ldr	r3, [pc, #404]	; (11050 <main+0x820>)
   10eba:	781b      	ldrb	r3, [r3, #0]
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	d100      	bne.n	10ec2 <main+0x692>
   10ec0:	e2a7      	b.n	11412 <main+0xbe2>
   10ec2:	4b64      	ldr	r3, [pc, #400]	; (11054 <main+0x824>)
   10ec4:	781b      	ldrb	r3, [r3, #0]
   10ec6:	2b00      	cmp	r3, #0
   10ec8:	d000      	beq.n	10ecc <main+0x69c>
   10eca:	e2a2      	b.n	11412 <main+0xbe2>
   10ecc:	4b54      	ldr	r3, [pc, #336]	; (11020 <main+0x7f0>)
   10ece:	4798      	blx	r3
   10ed0:	0002      	movs	r2, r0
   10ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ed4:	1ad2      	subs	r2, r2, r3
   10ed6:	231e      	movs	r3, #30
   10ed8:	18fb      	adds	r3, r7, r3
   10eda:	881b      	ldrh	r3, [r3, #0]
   10edc:	429a      	cmp	r2, r3
   10ede:	d200      	bcs.n	10ee2 <main+0x6b2>
   10ee0:	e297      	b.n	11412 <main+0xbe2>
   10ee2:	4b5d      	ldr	r3, [pc, #372]	; (11058 <main+0x828>)
   10ee4:	2101      	movs	r1, #1
   10ee6:	0018      	movs	r0, r3
   10ee8:	4b5c      	ldr	r3, [pc, #368]	; (1105c <main+0x82c>)
   10eea:	4798      	blx	r3
   10eec:	0003      	movs	r3, r0
   10eee:	2b05      	cmp	r3, #5
   10ef0:	d100      	bne.n	10ef4 <main+0x6c4>
   10ef2:	e28e      	b.n	11412 <main+0xbe2>
		{
			switch(BLE_TX_INDEX){
   10ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ef6:	2b01      	cmp	r3, #1
   10ef8:	d100      	bne.n	10efc <main+0x6cc>
   10efa:	e0b7      	b.n	1106c <main+0x83c>
   10efc:	dc02      	bgt.n	10f04 <main+0x6d4>
   10efe:	2b00      	cmp	r3, #0
   10f00:	d007      	beq.n	10f12 <main+0x6e2>
   10f02:	e27a      	b.n	113fa <main+0xbca>
   10f04:	2b02      	cmp	r3, #2
   10f06:	d100      	bne.n	10f0a <main+0x6da>
   10f08:	e117      	b.n	1113a <main+0x90a>
   10f0a:	2b03      	cmp	r3, #3
   10f0c:	d100      	bne.n	10f10 <main+0x6e0>
   10f0e:	e1e1      	b.n	112d4 <main+0xaa4>
   10f10:	e273      	b.n	113fa <main+0xbca>
				case 0:
					ble_write_buffer[0] = 0x11;
   10f12:	4b53      	ldr	r3, [pc, #332]	; (11060 <main+0x830>)
   10f14:	2211      	movs	r2, #17
   10f16:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = latest_vesc_vals.avg_input_current & 0xFF;
   10f18:	4b52      	ldr	r3, [pc, #328]	; (11064 <main+0x834>)
   10f1a:	689b      	ldr	r3, [r3, #8]
   10f1c:	b2da      	uxtb	r2, r3
   10f1e:	4b50      	ldr	r3, [pc, #320]	; (11060 <main+0x830>)
   10f20:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.avg_input_current & 0xFF00) >> 8;
   10f22:	4b50      	ldr	r3, [pc, #320]	; (11064 <main+0x834>)
   10f24:	689b      	ldr	r3, [r3, #8]
   10f26:	121b      	asrs	r3, r3, #8
   10f28:	b2da      	uxtb	r2, r3
   10f2a:	4b4d      	ldr	r3, [pc, #308]	; (11060 <main+0x830>)
   10f2c:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x12;
   10f2e:	4b4c      	ldr	r3, [pc, #304]	; (11060 <main+0x830>)
   10f30:	2212      	movs	r2, #18
   10f32:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = latest_vesc_vals.INPUT_VOLTAGE;
   10f34:	4b4b      	ldr	r3, [pc, #300]	; (11064 <main+0x834>)
   10f36:	2214      	movs	r2, #20
   10f38:	5e9b      	ldrsh	r3, [r3, r2]
   10f3a:	b2da      	uxtb	r2, r3
   10f3c:	4b48      	ldr	r3, [pc, #288]	; (11060 <main+0x830>)
   10f3e:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.INPUT_VOLTAGE & 0xFF00) >> 8;
   10f40:	4b48      	ldr	r3, [pc, #288]	; (11064 <main+0x834>)
   10f42:	2214      	movs	r2, #20
   10f44:	5e9b      	ldrsh	r3, [r3, r2]
   10f46:	121b      	asrs	r3, r3, #8
   10f48:	b2da      	uxtb	r2, r3
   10f4a:	4b45      	ldr	r3, [pc, #276]	; (11060 <main+0x830>)
   10f4c:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x13;
   10f4e:	4b44      	ldr	r3, [pc, #272]	; (11060 <main+0x830>)
   10f50:	2213      	movs	r2, #19
   10f52:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = latest_vesc_vals.avg_motor_current;
   10f54:	4b43      	ldr	r3, [pc, #268]	; (11064 <main+0x834>)
   10f56:	685b      	ldr	r3, [r3, #4]
   10f58:	b2da      	uxtb	r2, r3
   10f5a:	4b41      	ldr	r3, [pc, #260]	; (11060 <main+0x830>)
   10f5c:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (latest_vesc_vals.avg_motor_current & 0xFF00) >> 8;
   10f5e:	4b41      	ldr	r3, [pc, #260]	; (11064 <main+0x834>)
   10f60:	685b      	ldr	r3, [r3, #4]
   10f62:	121b      	asrs	r3, r3, #8
   10f64:	b2da      	uxtb	r2, r3
   10f66:	4b3e      	ldr	r3, [pc, #248]	; (11060 <main+0x830>)
   10f68:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x14;
   10f6a:	4b3d      	ldr	r3, [pc, #244]	; (11060 <main+0x830>)
   10f6c:	2214      	movs	r2, #20
   10f6e:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = latest_vesc_vals.temp_fet_filtered;
   10f70:	4b3c      	ldr	r3, [pc, #240]	; (11064 <main+0x834>)
   10f72:	2200      	movs	r2, #0
   10f74:	5e9b      	ldrsh	r3, [r3, r2]
   10f76:	b2da      	uxtb	r2, r3
   10f78:	4b39      	ldr	r3, [pc, #228]	; (11060 <main+0x830>)
   10f7a:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.temp_fet_filtered & 0xFF00) >> 8;
   10f7c:	4b39      	ldr	r3, [pc, #228]	; (11064 <main+0x834>)
   10f7e:	2200      	movs	r2, #0
   10f80:	5e9b      	ldrsh	r3, [r3, r2]
   10f82:	121b      	asrs	r3, r3, #8
   10f84:	b2da      	uxtb	r2, r3
   10f86:	4b36      	ldr	r3, [pc, #216]	; (11060 <main+0x830>)
   10f88:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x15;
   10f8a:	4b35      	ldr	r3, [pc, #212]	; (11060 <main+0x830>)
   10f8c:	2215      	movs	r2, #21
   10f8e:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = latest_vesc_vals.duty_cycle;
   10f90:	4b34      	ldr	r3, [pc, #208]	; (11064 <main+0x834>)
   10f92:	220c      	movs	r2, #12
   10f94:	5e9b      	ldrsh	r3, [r3, r2]
   10f96:	b2da      	uxtb	r2, r3
   10f98:	4b31      	ldr	r3, [pc, #196]	; (11060 <main+0x830>)
   10f9a:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.duty_cycle & 0xFF00) >> 8;
   10f9c:	4b31      	ldr	r3, [pc, #196]	; (11064 <main+0x834>)
   10f9e:	220c      	movs	r2, #12
   10fa0:	5e9b      	ldrsh	r3, [r3, r2]
   10fa2:	121b      	asrs	r3, r3, #8
   10fa4:	b2da      	uxtb	r2, r3
   10fa6:	4b2e      	ldr	r3, [pc, #184]	; (11060 <main+0x830>)
   10fa8:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x16;
   10faa:	4b2d      	ldr	r3, [pc, #180]	; (11060 <main+0x830>)
   10fac:	2216      	movs	r2, #22
   10fae:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = (latest_vesc_vals.rpm & 0xFF);
   10fb0:	4b2c      	ldr	r3, [pc, #176]	; (11064 <main+0x834>)
   10fb2:	691b      	ldr	r3, [r3, #16]
   10fb4:	b2da      	uxtb	r2, r3
   10fb6:	4b2a      	ldr	r3, [pc, #168]	; (11060 <main+0x830>)
   10fb8:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = (latest_vesc_vals.rpm & 0xFF00) >> 8;
   10fba:	4b2a      	ldr	r3, [pc, #168]	; (11064 <main+0x834>)
   10fbc:	691b      	ldr	r3, [r3, #16]
   10fbe:	121b      	asrs	r3, r3, #8
   10fc0:	b2da      	uxtb	r2, r3
   10fc2:	4b27      	ldr	r3, [pc, #156]	; (11060 <main+0x830>)
   10fc4:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = (latest_vesc_vals.rpm & 0xFF0000) >> 16;
   10fc6:	4b27      	ldr	r3, [pc, #156]	; (11064 <main+0x834>)
   10fc8:	691b      	ldr	r3, [r3, #16]
   10fca:	141b      	asrs	r3, r3, #16
   10fcc:	b2da      	uxtb	r2, r3
   10fce:	4b24      	ldr	r3, [pc, #144]	; (11060 <main+0x830>)
   10fd0:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   10fd2:	4923      	ldr	r1, [pc, #140]	; (11060 <main+0x830>)
   10fd4:	4b20      	ldr	r3, [pc, #128]	; (11058 <main+0x828>)
   10fd6:	2213      	movs	r2, #19
   10fd8:	0018      	movs	r0, r3
   10fda:	4b23      	ldr	r3, [pc, #140]	; (11068 <main+0x838>)
   10fdc:	4798      	blx	r3
					break;
   10fde:	e20c      	b.n	113fa <main+0xbca>
   10fe0:	200003d4 	.word	0x200003d4
   10fe4:	200000bc 	.word	0x200000bc
   10fe8:	0001448d 	.word	0x0001448d
   10fec:	200003d8 	.word	0x200003d8
   10ff0:	200000c8 	.word	0x200000c8
   10ff4:	000144b5 	.word	0x000144b5
   10ff8:	200000c4 	.word	0x200000c4
   10ffc:	200003dc 	.word	0x200003dc
   11000:	200000d0 	.word	0x200000d0
   11004:	200000cc 	.word	0x200000cc
   11008:	200003e0 	.word	0x200003e0
   1100c:	200000d8 	.word	0x200000d8
   11010:	200000d4 	.word	0x200000d4
   11014:	200003e4 	.word	0x200003e4
   11018:	200000e0 	.word	0x200000e0
   1101c:	200000dc 	.word	0x200000dc
   11020:	0000b109 	.word	0x0000b109
   11024:	00015219 	.word	0x00015219
   11028:	00016da1 	.word	0x00016da1
   1102c:	00014455 	.word	0x00014455
   11030:	3fe00000 	.word	0x3fe00000
   11034:	000152f9 	.word	0x000152f9
   11038:	000148c1 	.word	0x000148c1
   1103c:	447a0000 	.word	0x447a0000
   11040:	00014ca1 	.word	0x00014ca1
   11044:	0001459d 	.word	0x0001459d
   11048:	43b40000 	.word	0x43b40000
   1104c:	00014ee1 	.word	0x00014ee1
   11050:	200000b1 	.word	0x200000b1
   11054:	200003e8 	.word	0x200003e8
   11058:	200004a0 	.word	0x200004a0
   1105c:	000066ff 	.word	0x000066ff
   11060:	20000928 	.word	0x20000928
   11064:	20000958 	.word	0x20000958
   11068:	00006629 	.word	0x00006629
				case 1:
					ble_write_buffer[0] = 0x17;
   1106c:	4b8a      	ldr	r3, [pc, #552]	; (11298 <main+0xa68>)
   1106e:	2217      	movs	r2, #23
   11070:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = (latest_vesc_vals.amp_hours & 0xFF);
   11072:	4b8a      	ldr	r3, [pc, #552]	; (1129c <main+0xa6c>)
   11074:	699b      	ldr	r3, [r3, #24]
   11076:	b2da      	uxtb	r2, r3
   11078:	4b87      	ldr	r3, [pc, #540]	; (11298 <main+0xa68>)
   1107a:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.amp_hours & 0xFF00) >> 8;
   1107c:	4b87      	ldr	r3, [pc, #540]	; (1129c <main+0xa6c>)
   1107e:	699b      	ldr	r3, [r3, #24]
   11080:	121b      	asrs	r3, r3, #8
   11082:	b2da      	uxtb	r2, r3
   11084:	4b84      	ldr	r3, [pc, #528]	; (11298 <main+0xa68>)
   11086:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = (latest_vesc_vals.amp_hours & 0xFF0000) >> 16;
   11088:	4b84      	ldr	r3, [pc, #528]	; (1129c <main+0xa6c>)
   1108a:	699b      	ldr	r3, [r3, #24]
   1108c:	141b      	asrs	r3, r3, #16
   1108e:	b2da      	uxtb	r2, r3
   11090:	4b81      	ldr	r3, [pc, #516]	; (11298 <main+0xa68>)
   11092:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = 0x18;
   11094:	4b80      	ldr	r3, [pc, #512]	; (11298 <main+0xa68>)
   11096:	2218      	movs	r2, #24
   11098:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.amp_hours_charged & 0xFF);
   1109a:	4b80      	ldr	r3, [pc, #512]	; (1129c <main+0xa6c>)
   1109c:	69db      	ldr	r3, [r3, #28]
   1109e:	b2da      	uxtb	r2, r3
   110a0:	4b7d      	ldr	r3, [pc, #500]	; (11298 <main+0xa68>)
   110a2:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (latest_vesc_vals.amp_hours_charged & 0xFF00) >> 8;
   110a4:	4b7d      	ldr	r3, [pc, #500]	; (1129c <main+0xa6c>)
   110a6:	69db      	ldr	r3, [r3, #28]
   110a8:	121b      	asrs	r3, r3, #8
   110aa:	b2da      	uxtb	r2, r3
   110ac:	4b7a      	ldr	r3, [pc, #488]	; (11298 <main+0xa68>)
   110ae:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = (latest_vesc_vals.amp_hours_charged & 0xFF0000) >> 16;
   110b0:	4b7a      	ldr	r3, [pc, #488]	; (1129c <main+0xa6c>)
   110b2:	69db      	ldr	r3, [r3, #28]
   110b4:	141b      	asrs	r3, r3, #16
   110b6:	b2da      	uxtb	r2, r3
   110b8:	4b77      	ldr	r3, [pc, #476]	; (11298 <main+0xa68>)
   110ba:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = 0x19;
   110bc:	4b76      	ldr	r3, [pc, #472]	; (11298 <main+0xa68>)
   110be:	2219      	movs	r2, #25
   110c0:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = (latest_vesc_vals.watt_hours & 0xFF);
   110c2:	4b76      	ldr	r3, [pc, #472]	; (1129c <main+0xa6c>)
   110c4:	6a1b      	ldr	r3, [r3, #32]
   110c6:	b2da      	uxtb	r2, r3
   110c8:	4b73      	ldr	r3, [pc, #460]	; (11298 <main+0xa68>)
   110ca:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (latest_vesc_vals.watt_hours & 0xFF00) >> 8;
   110cc:	4b73      	ldr	r3, [pc, #460]	; (1129c <main+0xa6c>)
   110ce:	6a1b      	ldr	r3, [r3, #32]
   110d0:	121b      	asrs	r3, r3, #8
   110d2:	b2da      	uxtb	r2, r3
   110d4:	4b70      	ldr	r3, [pc, #448]	; (11298 <main+0xa68>)
   110d6:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.watt_hours & 0xFF0000) >> 16;
   110d8:	4b70      	ldr	r3, [pc, #448]	; (1129c <main+0xa6c>)
   110da:	6a1b      	ldr	r3, [r3, #32]
   110dc:	141b      	asrs	r3, r3, #16
   110de:	b2da      	uxtb	r2, r3
   110e0:	4b6d      	ldr	r3, [pc, #436]	; (11298 <main+0xa68>)
   110e2:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x1A;
   110e4:	4b6c      	ldr	r3, [pc, #432]	; (11298 <main+0xa68>)
   110e6:	221a      	movs	r2, #26
   110e8:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (latest_vesc_vals.watt_hours_charged & 0xFF);
   110ea:	4b6c      	ldr	r3, [pc, #432]	; (1129c <main+0xa6c>)
   110ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110ee:	b2da      	uxtb	r2, r3
   110f0:	4b69      	ldr	r3, [pc, #420]	; (11298 <main+0xa68>)
   110f2:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.watt_hours_charged & 0xFF00) >> 8;
   110f4:	4b69      	ldr	r3, [pc, #420]	; (1129c <main+0xa6c>)
   110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110f8:	121b      	asrs	r3, r3, #8
   110fa:	b2da      	uxtb	r2, r3
   110fc:	4b66      	ldr	r3, [pc, #408]	; (11298 <main+0xa68>)
   110fe:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = (latest_vesc_vals.watt_hours_charged & 0xFF0000) >> 16;
   11100:	4b66      	ldr	r3, [pc, #408]	; (1129c <main+0xa6c>)
   11102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11104:	141b      	asrs	r3, r3, #16
   11106:	b2da      	uxtb	r2, r3
   11108:	4b63      	ldr	r3, [pc, #396]	; (11298 <main+0xa68>)
   1110a:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x1B;
   1110c:	4b62      	ldr	r3, [pc, #392]	; (11298 <main+0xa68>)
   1110e:	221b      	movs	r2, #27
   11110:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = latest_vesc_vals.fault;
   11112:	4b62      	ldr	r3, [pc, #392]	; (1129c <main+0xa6c>)
   11114:	222c      	movs	r2, #44	; 0x2c
   11116:	569b      	ldrsb	r3, [r3, r2]
   11118:	b2da      	uxtb	r2, r3
   1111a:	4b5f      	ldr	r3, [pc, #380]	; (11298 <main+0xa68>)
   1111c:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0x21;
   1111e:	4b5e      	ldr	r3, [pc, #376]	; (11298 <main+0xa68>)
   11120:	2221      	movs	r2, #33	; 0x21
   11122:	749a      	strb	r2, [r3, #18]
					ble_write_buffer[19] = remote_x;
   11124:	4b5e      	ldr	r3, [pc, #376]	; (112a0 <main+0xa70>)
   11126:	781a      	ldrb	r2, [r3, #0]
   11128:	4b5b      	ldr	r3, [pc, #364]	; (11298 <main+0xa68>)
   1112a:	74da      	strb	r2, [r3, #19]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 20);
   1112c:	495a      	ldr	r1, [pc, #360]	; (11298 <main+0xa68>)
   1112e:	4b5d      	ldr	r3, [pc, #372]	; (112a4 <main+0xa74>)
   11130:	2214      	movs	r2, #20
   11132:	0018      	movs	r0, r3
   11134:	4b5c      	ldr	r3, [pc, #368]	; (112a8 <main+0xa78>)
   11136:	4798      	blx	r3
					break;
   11138:	e15f      	b.n	113fa <main+0xbca>
				case 2:
					ble_write_buffer[0] = 0x2E;
   1113a:	4b57      	ldr	r3, [pc, #348]	; (11298 <main+0xa68>)
   1113c:	222e      	movs	r2, #46	; 0x2e
   1113e:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(heading*10) & 0xFF); // Heading
   11140:	4b5a      	ldr	r3, [pc, #360]	; (112ac <main+0xa7c>)
   11142:	495b      	ldr	r1, [pc, #364]	; (112b0 <main+0xa80>)
   11144:	6b78      	ldr	r0, [r7, #52]	; 0x34
   11146:	4798      	blx	r3
   11148:	1c03      	adds	r3, r0, #0
   1114a:	1c1a      	adds	r2, r3, #0
   1114c:	4b59      	ldr	r3, [pc, #356]	; (112b4 <main+0xa84>)
   1114e:	1c10      	adds	r0, r2, #0
   11150:	4798      	blx	r3
   11152:	0003      	movs	r3, r0
   11154:	b29b      	uxth	r3, r3
   11156:	b2da      	uxtb	r2, r3
   11158:	4b4f      	ldr	r3, [pc, #316]	; (11298 <main+0xa68>)
   1115a:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(heading*10) & 0xFF00) >> 8; // Heading
   1115c:	4b53      	ldr	r3, [pc, #332]	; (112ac <main+0xa7c>)
   1115e:	4954      	ldr	r1, [pc, #336]	; (112b0 <main+0xa80>)
   11160:	6b78      	ldr	r0, [r7, #52]	; 0x34
   11162:	4798      	blx	r3
   11164:	1c03      	adds	r3, r0, #0
   11166:	1c1a      	adds	r2, r3, #0
   11168:	4b52      	ldr	r3, [pc, #328]	; (112b4 <main+0xa84>)
   1116a:	1c10      	adds	r0, r2, #0
   1116c:	4798      	blx	r3
   1116e:	0003      	movs	r3, r0
   11170:	b29b      	uxth	r3, r3
   11172:	0a1b      	lsrs	r3, r3, #8
   11174:	b29b      	uxth	r3, r3
   11176:	b2da      	uxtb	r2, r3
   11178:	4b47      	ldr	r3, [pc, #284]	; (11298 <main+0xa68>)
   1117a:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x22;
   1117c:	4b46      	ldr	r3, [pc, #280]	; (11298 <main+0xa68>)
   1117e:	2222      	movs	r2, #34	; 0x22
   11180:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = remote_y;
   11182:	4b4d      	ldr	r3, [pc, #308]	; (112b8 <main+0xa88>)
   11184:	781a      	ldrb	r2, [r3, #0]
   11186:	4b44      	ldr	r3, [pc, #272]	; (11298 <main+0xa68>)
   11188:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = 0x23;
   1118a:	4b43      	ldr	r3, [pc, #268]	; (11298 <main+0xa68>)
   1118c:	2223      	movs	r2, #35	; 0x23
   1118e:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (remote_btn_state | (REMOTE_TYPE << 1));
   11190:	4b4a      	ldr	r3, [pc, #296]	; (112bc <main+0xa8c>)
   11192:	781b      	ldrb	r3, [r3, #0]
   11194:	005b      	lsls	r3, r3, #1
   11196:	b25a      	sxtb	r2, r3
   11198:	4b49      	ldr	r3, [pc, #292]	; (112c0 <main+0xa90>)
   1119a:	781b      	ldrb	r3, [r3, #0]
   1119c:	b25b      	sxtb	r3, r3
   1119e:	4313      	orrs	r3, r2
   111a0:	b25b      	sxtb	r3, r3
   111a2:	b2da      	uxtb	r2, r3
   111a4:	4b3c      	ldr	r3, [pc, #240]	; (11298 <main+0xa68>)
   111a6:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = 0x24;
   111a8:	4b3b      	ldr	r3, [pc, #236]	; (11298 <main+0xa68>)
   111aa:	2224      	movs	r2, #36	; 0x24
   111ac:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = ((uint16_t)axKalman & 0xFF); // Accel X
   111ae:	4b45      	ldr	r3, [pc, #276]	; (112c4 <main+0xa94>)
   111b0:	681a      	ldr	r2, [r3, #0]
   111b2:	4b40      	ldr	r3, [pc, #256]	; (112b4 <main+0xa84>)
   111b4:	1c10      	adds	r0, r2, #0
   111b6:	4798      	blx	r3
   111b8:	0003      	movs	r3, r0
   111ba:	b29b      	uxth	r3, r3
   111bc:	b2da      	uxtb	r2, r3
   111be:	4b36      	ldr	r3, [pc, #216]	; (11298 <main+0xa68>)
   111c0:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = ((uint16_t)axKalman & 0xFF00) >> 8; // Accel X
   111c2:	4b40      	ldr	r3, [pc, #256]	; (112c4 <main+0xa94>)
   111c4:	681a      	ldr	r2, [r3, #0]
   111c6:	4b3b      	ldr	r3, [pc, #236]	; (112b4 <main+0xa84>)
   111c8:	1c10      	adds	r0, r2, #0
   111ca:	4798      	blx	r3
   111cc:	0003      	movs	r3, r0
   111ce:	b29b      	uxth	r3, r3
   111d0:	0a1b      	lsrs	r3, r3, #8
   111d2:	b29b      	uxth	r3, r3
   111d4:	b2da      	uxtb	r2, r3
   111d6:	4b30      	ldr	r3, [pc, #192]	; (11298 <main+0xa68>)
   111d8:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = 0x25;
   111da:	4b2f      	ldr	r3, [pc, #188]	; (11298 <main+0xa68>)
   111dc:	2225      	movs	r2, #37	; 0x25
   111de:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = ((uint16_t)ayKalman & 0xFF); // Accel Y
   111e0:	4b39      	ldr	r3, [pc, #228]	; (112c8 <main+0xa98>)
   111e2:	681a      	ldr	r2, [r3, #0]
   111e4:	4b33      	ldr	r3, [pc, #204]	; (112b4 <main+0xa84>)
   111e6:	1c10      	adds	r0, r2, #0
   111e8:	4798      	blx	r3
   111ea:	0003      	movs	r3, r0
   111ec:	b29b      	uxth	r3, r3
   111ee:	b2da      	uxtb	r2, r3
   111f0:	4b29      	ldr	r3, [pc, #164]	; (11298 <main+0xa68>)
   111f2:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = ((uint16_t)ayKalman & 0xFF00) >> 8; // Accel Y
   111f4:	4b34      	ldr	r3, [pc, #208]	; (112c8 <main+0xa98>)
   111f6:	681a      	ldr	r2, [r3, #0]
   111f8:	4b2e      	ldr	r3, [pc, #184]	; (112b4 <main+0xa84>)
   111fa:	1c10      	adds	r0, r2, #0
   111fc:	4798      	blx	r3
   111fe:	0003      	movs	r3, r0
   11200:	b29b      	uxth	r3, r3
   11202:	0a1b      	lsrs	r3, r3, #8
   11204:	b29b      	uxth	r3, r3
   11206:	b2da      	uxtb	r2, r3
   11208:	4b23      	ldr	r3, [pc, #140]	; (11298 <main+0xa68>)
   1120a:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = 0x26;
   1120c:	4b22      	ldr	r3, [pc, #136]	; (11298 <main+0xa68>)
   1120e:	2226      	movs	r2, #38	; 0x26
   11210:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = ((uint16_t)azKalman & 0xFF); // Accel Z
   11212:	4b2e      	ldr	r3, [pc, #184]	; (112cc <main+0xa9c>)
   11214:	681a      	ldr	r2, [r3, #0]
   11216:	4b27      	ldr	r3, [pc, #156]	; (112b4 <main+0xa84>)
   11218:	1c10      	adds	r0, r2, #0
   1121a:	4798      	blx	r3
   1121c:	0003      	movs	r3, r0
   1121e:	b29b      	uxth	r3, r3
   11220:	b2da      	uxtb	r2, r3
   11222:	4b1d      	ldr	r3, [pc, #116]	; (11298 <main+0xa68>)
   11224:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = ((uint16_t)azKalman & 0xFF00) >> 8; // Accel Z
   11226:	4b29      	ldr	r3, [pc, #164]	; (112cc <main+0xa9c>)
   11228:	681a      	ldr	r2, [r3, #0]
   1122a:	4b22      	ldr	r3, [pc, #136]	; (112b4 <main+0xa84>)
   1122c:	1c10      	adds	r0, r2, #0
   1122e:	4798      	blx	r3
   11230:	0003      	movs	r3, r0
   11232:	b29b      	uxth	r3, r3
   11234:	0a1b      	lsrs	r3, r3, #8
   11236:	b29b      	uxth	r3, r3
   11238:	b2da      	uxtb	r2, r3
   1123a:	4b17      	ldr	r3, [pc, #92]	; (11298 <main+0xa68>)
   1123c:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x27;
   1123e:	4b16      	ldr	r3, [pc, #88]	; (11298 <main+0xa68>)
   11240:	2227      	movs	r2, #39	; 0x27
   11242:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((uint16_t)(gxKalman*10) & 0xFF); // Gyro X
   11244:	4b22      	ldr	r3, [pc, #136]	; (112d0 <main+0xaa0>)
   11246:	681a      	ldr	r2, [r3, #0]
   11248:	4b18      	ldr	r3, [pc, #96]	; (112ac <main+0xa7c>)
   1124a:	4919      	ldr	r1, [pc, #100]	; (112b0 <main+0xa80>)
   1124c:	1c10      	adds	r0, r2, #0
   1124e:	4798      	blx	r3
   11250:	1c03      	adds	r3, r0, #0
   11252:	1c1a      	adds	r2, r3, #0
   11254:	4b17      	ldr	r3, [pc, #92]	; (112b4 <main+0xa84>)
   11256:	1c10      	adds	r0, r2, #0
   11258:	4798      	blx	r3
   1125a:	0003      	movs	r3, r0
   1125c:	b29b      	uxth	r3, r3
   1125e:	b2da      	uxtb	r2, r3
   11260:	4b0d      	ldr	r3, [pc, #52]	; (11298 <main+0xa68>)
   11262:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = ((uint16_t)(gxKalman*10) & 0xFF00) >> 8; // Gyro X
   11264:	4b1a      	ldr	r3, [pc, #104]	; (112d0 <main+0xaa0>)
   11266:	681a      	ldr	r2, [r3, #0]
   11268:	4b10      	ldr	r3, [pc, #64]	; (112ac <main+0xa7c>)
   1126a:	4911      	ldr	r1, [pc, #68]	; (112b0 <main+0xa80>)
   1126c:	1c10      	adds	r0, r2, #0
   1126e:	4798      	blx	r3
   11270:	1c03      	adds	r3, r0, #0
   11272:	1c1a      	adds	r2, r3, #0
   11274:	4b0f      	ldr	r3, [pc, #60]	; (112b4 <main+0xa84>)
   11276:	1c10      	adds	r0, r2, #0
   11278:	4798      	blx	r3
   1127a:	0003      	movs	r3, r0
   1127c:	b29b      	uxth	r3, r3
   1127e:	0a1b      	lsrs	r3, r3, #8
   11280:	b29b      	uxth	r3, r3
   11282:	b2da      	uxtb	r2, r3
   11284:	4b04      	ldr	r3, [pc, #16]	; (11298 <main+0xa68>)
   11286:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   11288:	4903      	ldr	r1, [pc, #12]	; (11298 <main+0xa68>)
   1128a:	4b06      	ldr	r3, [pc, #24]	; (112a4 <main+0xa74>)
   1128c:	2213      	movs	r2, #19
   1128e:	0018      	movs	r0, r3
   11290:	4b05      	ldr	r3, [pc, #20]	; (112a8 <main+0xa78>)
   11292:	4798      	blx	r3
					break;
   11294:	e0b1      	b.n	113fa <main+0xbca>
   11296:	46c0      	nop			; (mov r8, r8)
   11298:	20000928 	.word	0x20000928
   1129c:	20000958 	.word	0x20000958
   112a0:	2000030b 	.word	0x2000030b
   112a4:	200004a0 	.word	0x200004a0
   112a8:	00006629 	.word	0x00006629
   112ac:	00014ca1 	.word	0x00014ca1
   112b0:	41200000 	.word	0x41200000
   112b4:	00014531 	.word	0x00014531
   112b8:	2000030a 	.word	0x2000030a
   112bc:	200000b0 	.word	0x200000b0
   112c0:	2000030c 	.word	0x2000030c
   112c4:	200003d0 	.word	0x200003d0
   112c8:	200003d4 	.word	0x200003d4
   112cc:	200003d8 	.word	0x200003d8
   112d0:	200003dc 	.word	0x200003dc
				case 3:
					ble_write_buffer[0] = 0x28;
   112d4:	4bf3      	ldr	r3, [pc, #972]	; (116a4 <main+0xe74>)
   112d6:	2228      	movs	r2, #40	; 0x28
   112d8:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(gyKalman*10) & 0xFF); // Gyro Y
   112da:	4bf3      	ldr	r3, [pc, #972]	; (116a8 <main+0xe78>)
   112dc:	681a      	ldr	r2, [r3, #0]
   112de:	4bf3      	ldr	r3, [pc, #972]	; (116ac <main+0xe7c>)
   112e0:	49f3      	ldr	r1, [pc, #972]	; (116b0 <main+0xe80>)
   112e2:	1c10      	adds	r0, r2, #0
   112e4:	4798      	blx	r3
   112e6:	1c03      	adds	r3, r0, #0
   112e8:	1c1a      	adds	r2, r3, #0
   112ea:	4bf2      	ldr	r3, [pc, #968]	; (116b4 <main+0xe84>)
   112ec:	1c10      	adds	r0, r2, #0
   112ee:	4798      	blx	r3
   112f0:	0003      	movs	r3, r0
   112f2:	b29b      	uxth	r3, r3
   112f4:	b2da      	uxtb	r2, r3
   112f6:	4beb      	ldr	r3, [pc, #940]	; (116a4 <main+0xe74>)
   112f8:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(gyKalman*10) & 0xFF00) >> 8; // Gyro Y
   112fa:	4beb      	ldr	r3, [pc, #940]	; (116a8 <main+0xe78>)
   112fc:	681a      	ldr	r2, [r3, #0]
   112fe:	4beb      	ldr	r3, [pc, #940]	; (116ac <main+0xe7c>)
   11300:	49eb      	ldr	r1, [pc, #940]	; (116b0 <main+0xe80>)
   11302:	1c10      	adds	r0, r2, #0
   11304:	4798      	blx	r3
   11306:	1c03      	adds	r3, r0, #0
   11308:	1c1a      	adds	r2, r3, #0
   1130a:	4bea      	ldr	r3, [pc, #936]	; (116b4 <main+0xe84>)
   1130c:	1c10      	adds	r0, r2, #0
   1130e:	4798      	blx	r3
   11310:	0003      	movs	r3, r0
   11312:	b29b      	uxth	r3, r3
   11314:	0a1b      	lsrs	r3, r3, #8
   11316:	b29b      	uxth	r3, r3
   11318:	b2da      	uxtb	r2, r3
   1131a:	4be2      	ldr	r3, [pc, #904]	; (116a4 <main+0xe74>)
   1131c:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x29;
   1131e:	4be1      	ldr	r3, [pc, #900]	; (116a4 <main+0xe74>)
   11320:	2229      	movs	r2, #41	; 0x29
   11322:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = ((uint16_t)(gzKalman*10) & 0xFF); // Gyro Z
   11324:	4be4      	ldr	r3, [pc, #912]	; (116b8 <main+0xe88>)
   11326:	681a      	ldr	r2, [r3, #0]
   11328:	4be0      	ldr	r3, [pc, #896]	; (116ac <main+0xe7c>)
   1132a:	49e1      	ldr	r1, [pc, #900]	; (116b0 <main+0xe80>)
   1132c:	1c10      	adds	r0, r2, #0
   1132e:	4798      	blx	r3
   11330:	1c03      	adds	r3, r0, #0
   11332:	1c1a      	adds	r2, r3, #0
   11334:	4bdf      	ldr	r3, [pc, #892]	; (116b4 <main+0xe84>)
   11336:	1c10      	adds	r0, r2, #0
   11338:	4798      	blx	r3
   1133a:	0003      	movs	r3, r0
   1133c:	b29b      	uxth	r3, r3
   1133e:	b2da      	uxtb	r2, r3
   11340:	4bd8      	ldr	r3, [pc, #864]	; (116a4 <main+0xe74>)
   11342:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = ((uint16_t)(gzKalman*10) & 0xFF00) >> 8; // Gyro Z
   11344:	4bdc      	ldr	r3, [pc, #880]	; (116b8 <main+0xe88>)
   11346:	681a      	ldr	r2, [r3, #0]
   11348:	4bd8      	ldr	r3, [pc, #864]	; (116ac <main+0xe7c>)
   1134a:	49d9      	ldr	r1, [pc, #868]	; (116b0 <main+0xe80>)
   1134c:	1c10      	adds	r0, r2, #0
   1134e:	4798      	blx	r3
   11350:	1c03      	adds	r3, r0, #0
   11352:	1c1a      	adds	r2, r3, #0
   11354:	4bd7      	ldr	r3, [pc, #860]	; (116b4 <main+0xe84>)
   11356:	1c10      	adds	r0, r2, #0
   11358:	4798      	blx	r3
   1135a:	0003      	movs	r3, r0
   1135c:	b29b      	uxth	r3, r3
   1135e:	0a1b      	lsrs	r3, r3, #8
   11360:	b29b      	uxth	r3, r3
   11362:	b2da      	uxtb	r2, r3
   11364:	4bcf      	ldr	r3, [pc, #828]	; (116a4 <main+0xe74>)
   11366:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x2A;
   11368:	4bce      	ldr	r3, [pc, #824]	; (116a4 <main+0xe74>)
   1136a:	222a      	movs	r2, #42	; 0x2a
   1136c:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = ((mx) & 0xFF); // Compass X
   1136e:	4bd3      	ldr	r3, [pc, #844]	; (116bc <main+0xe8c>)
   11370:	2200      	movs	r2, #0
   11372:	5e9b      	ldrsh	r3, [r3, r2]
   11374:	b2da      	uxtb	r2, r3
   11376:	4bcb      	ldr	r3, [pc, #812]	; (116a4 <main+0xe74>)
   11378:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (mx & 0xFF00) >> 8; // Compass X
   1137a:	4bd0      	ldr	r3, [pc, #832]	; (116bc <main+0xe8c>)
   1137c:	2200      	movs	r2, #0
   1137e:	5e9b      	ldrsh	r3, [r3, r2]
   11380:	121b      	asrs	r3, r3, #8
   11382:	b2da      	uxtb	r2, r3
   11384:	4bc7      	ldr	r3, [pc, #796]	; (116a4 <main+0xe74>)
   11386:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x2B;
   11388:	4bc6      	ldr	r3, [pc, #792]	; (116a4 <main+0xe74>)
   1138a:	222b      	movs	r2, #43	; 0x2b
   1138c:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (my & 0xFF); // Compass Y
   1138e:	4bcc      	ldr	r3, [pc, #816]	; (116c0 <main+0xe90>)
   11390:	2200      	movs	r2, #0
   11392:	5e9b      	ldrsh	r3, [r3, r2]
   11394:	b2da      	uxtb	r2, r3
   11396:	4bc3      	ldr	r3, [pc, #780]	; (116a4 <main+0xe74>)
   11398:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (my & 0xFF00) >> 8; // Compass Y
   1139a:	4bc9      	ldr	r3, [pc, #804]	; (116c0 <main+0xe90>)
   1139c:	2200      	movs	r2, #0
   1139e:	5e9b      	ldrsh	r3, [r3, r2]
   113a0:	121b      	asrs	r3, r3, #8
   113a2:	b2da      	uxtb	r2, r3
   113a4:	4bbf      	ldr	r3, [pc, #764]	; (116a4 <main+0xe74>)
   113a6:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x2C;
   113a8:	4bbe      	ldr	r3, [pc, #760]	; (116a4 <main+0xe74>)
   113aa:	222c      	movs	r2, #44	; 0x2c
   113ac:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (mz & 0xFF); // Compass Z
   113ae:	4bc5      	ldr	r3, [pc, #788]	; (116c4 <main+0xe94>)
   113b0:	2200      	movs	r2, #0
   113b2:	5e9b      	ldrsh	r3, [r3, r2]
   113b4:	b2da      	uxtb	r2, r3
   113b6:	4bbb      	ldr	r3, [pc, #748]	; (116a4 <main+0xe74>)
   113b8:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (mz & 0xFF00) >> 8; // Compass Z
   113ba:	4bc2      	ldr	r3, [pc, #776]	; (116c4 <main+0xe94>)
   113bc:	2200      	movs	r2, #0
   113be:	5e9b      	ldrsh	r3, [r3, r2]
   113c0:	121b      	asrs	r3, r3, #8
   113c2:	b2da      	uxtb	r2, r3
   113c4:	4bb7      	ldr	r3, [pc, #732]	; (116a4 <main+0xe74>)
   113c6:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x2D;
   113c8:	4bb6      	ldr	r3, [pc, #728]	; (116a4 <main+0xe74>)
   113ca:	222d      	movs	r2, #45	; 0x2d
   113cc:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = ((int)(light_sens) & 0xFF); // Light Sensor
   113ce:	4bbe      	ldr	r3, [pc, #760]	; (116c8 <main+0xe98>)
   113d0:	881b      	ldrh	r3, [r3, #0]
   113d2:	b2da      	uxtb	r2, r3
   113d4:	4bb3      	ldr	r3, [pc, #716]	; (116a4 <main+0xe74>)
   113d6:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((int)(light_sens) & 0xFF00) >> 8; // Light Sensor
   113d8:	4bbb      	ldr	r3, [pc, #748]	; (116c8 <main+0xe98>)
   113da:	881b      	ldrh	r3, [r3, #0]
   113dc:	0a1b      	lsrs	r3, r3, #8
   113de:	b29b      	uxth	r3, r3
   113e0:	b2da      	uxtb	r2, r3
   113e2:	4bb0      	ldr	r3, [pc, #704]	; (116a4 <main+0xe74>)
   113e4:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0xDE;
   113e6:	4baf      	ldr	r3, [pc, #700]	; (116a4 <main+0xe74>)
   113e8:	22de      	movs	r2, #222	; 0xde
   113ea:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   113ec:	49ad      	ldr	r1, [pc, #692]	; (116a4 <main+0xe74>)
   113ee:	4bb7      	ldr	r3, [pc, #732]	; (116cc <main+0xe9c>)
   113f0:	2213      	movs	r2, #19
   113f2:	0018      	movs	r0, r3
   113f4:	4bb6      	ldr	r3, [pc, #728]	; (116d0 <main+0xea0>)
   113f6:	4798      	blx	r3
					break;
   113f8:	46c0      	nop			; (mov r8, r8)
			}
			BLE_TX_INDEX++;
   113fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   113fc:	3301      	adds	r3, #1
   113fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(BLE_TX_INDEX > 3)
   11400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11402:	2b03      	cmp	r3, #3
   11404:	dd01      	ble.n	1140a <main+0xbda>
				BLE_TX_INDEX = 0;
   11406:	2300      	movs	r3, #0
   11408:	62fb      	str	r3, [r7, #44]	; 0x2c

			BLE_TX_TIME = millis(); // Placed at end of transmit to provide accurate message timing
   1140a:	4bb2      	ldr	r3, [pc, #712]	; (116d4 <main+0xea4>)
   1140c:	4798      	blx	r3
   1140e:	0003      	movs	r3, r0
   11410:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		
		////////////////////////////   Handle Limits Request   ////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LIMITS)
   11412:	4bb1      	ldr	r3, [pc, #708]	; (116d8 <main+0xea8>)
   11414:	781b      	ldrb	r3, [r3, #0]
   11416:	2b00      	cmp	r3, #0
   11418:	d100      	bne.n	1141c <main+0xbec>
   1141a:	e12d      	b.n	11678 <main+0xe48>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1141c:	46c0      	nop			; (mov r8, r8)
   1141e:	4bad      	ldr	r3, [pc, #692]	; (116d4 <main+0xea4>)
   11420:	4798      	blx	r3
   11422:	0002      	movs	r2, r0
   11424:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11426:	1ad3      	subs	r3, r2, r3
   11428:	221e      	movs	r2, #30
   1142a:	18ba      	adds	r2, r7, r2
   1142c:	8812      	ldrh	r2, [r2, #0]
   1142e:	0052      	lsls	r2, r2, #1
   11430:	4293      	cmp	r3, r2
   11432:	d3f4      	bcc.n	1141e <main+0xbee>
			BLE_TX_TIME = millis();
   11434:	4ba7      	ldr	r3, [pc, #668]	; (116d4 <main+0xea4>)
   11436:	4798      	blx	r3
   11438:	0003      	movs	r3, r0
   1143a:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x41;
   1143c:	4b99      	ldr	r3, [pc, #612]	; (116a4 <main+0xe74>)
   1143e:	2241      	movs	r2, #65	; 0x41
   11440:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.motor_current_max;
   11442:	4ba6      	ldr	r3, [pc, #664]	; (116dc <main+0xeac>)
   11444:	681b      	ldr	r3, [r3, #0]
   11446:	b2da      	uxtb	r2, r3
   11448:	4b96      	ldr	r3, [pc, #600]	; (116a4 <main+0xe74>)
   1144a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x42;
   1144c:	4b95      	ldr	r3, [pc, #596]	; (116a4 <main+0xe74>)
   1144e:	2242      	movs	r2, #66	; 0x42
   11450:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.motor_current_min;
   11452:	4ba2      	ldr	r3, [pc, #648]	; (116dc <main+0xeac>)
   11454:	685b      	ldr	r3, [r3, #4]
   11456:	b2da      	uxtb	r2, r3
   11458:	4b92      	ldr	r3, [pc, #584]	; (116a4 <main+0xe74>)
   1145a:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x43;
   1145c:	4b91      	ldr	r3, [pc, #580]	; (116a4 <main+0xe74>)
   1145e:	2243      	movs	r2, #67	; 0x43
   11460:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.input_current_max;
   11462:	4b9e      	ldr	r3, [pc, #632]	; (116dc <main+0xeac>)
   11464:	689b      	ldr	r3, [r3, #8]
   11466:	b2da      	uxtb	r2, r3
   11468:	4b8e      	ldr	r3, [pc, #568]	; (116a4 <main+0xe74>)
   1146a:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x44;
   1146c:	4b8d      	ldr	r3, [pc, #564]	; (116a4 <main+0xe74>)
   1146e:	2244      	movs	r2, #68	; 0x44
   11470:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.input_current_min;
   11472:	4b9a      	ldr	r3, [pc, #616]	; (116dc <main+0xeac>)
   11474:	68db      	ldr	r3, [r3, #12]
   11476:	b2da      	uxtb	r2, r3
   11478:	4b8a      	ldr	r3, [pc, #552]	; (116a4 <main+0xe74>)
   1147a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x45;
   1147c:	4b89      	ldr	r3, [pc, #548]	; (116a4 <main+0xe74>)
   1147e:	2245      	movs	r2, #69	; 0x45
   11480:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.abs_current_max;
   11482:	4b96      	ldr	r3, [pc, #600]	; (116dc <main+0xeac>)
   11484:	691b      	ldr	r3, [r3, #16]
   11486:	b2da      	uxtb	r2, r3
   11488:	4b86      	ldr	r3, [pc, #536]	; (116a4 <main+0xe74>)
   1148a:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x46;
   1148c:	4b85      	ldr	r3, [pc, #532]	; (116a4 <main+0xe74>)
   1148e:	2246      	movs	r2, #70	; 0x46
   11490:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.max_vin;
   11492:	4b92      	ldr	r3, [pc, #584]	; (116dc <main+0xeac>)
   11494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11496:	b2da      	uxtb	r2, r3
   11498:	4b82      	ldr	r3, [pc, #520]	; (116a4 <main+0xe74>)
   1149a:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   1149c:	4981      	ldr	r1, [pc, #516]	; (116a4 <main+0xe74>)
   1149e:	4b8b      	ldr	r3, [pc, #556]	; (116cc <main+0xe9c>)
   114a0:	220c      	movs	r2, #12
   114a2:	0018      	movs	r0, r3
   114a4:	4b8e      	ldr	r3, [pc, #568]	; (116e0 <main+0xeb0>)
   114a6:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   114a8:	46c0      	nop			; (mov r8, r8)
   114aa:	4b8a      	ldr	r3, [pc, #552]	; (116d4 <main+0xea4>)
   114ac:	4798      	blx	r3
   114ae:	0002      	movs	r2, r0
   114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   114b2:	1ad3      	subs	r3, r2, r3
   114b4:	221e      	movs	r2, #30
   114b6:	18ba      	adds	r2, r7, r2
   114b8:	8812      	ldrh	r2, [r2, #0]
   114ba:	0052      	lsls	r2, r2, #1
   114bc:	4293      	cmp	r3, r2
   114be:	d3f4      	bcc.n	114aa <main+0xc7a>
			BLE_TX_TIME = millis();
   114c0:	4b84      	ldr	r3, [pc, #528]	; (116d4 <main+0xea4>)
   114c2:	4798      	blx	r3
   114c4:	0003      	movs	r3, r0
   114c6:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x48;
   114c8:	4b76      	ldr	r3, [pc, #472]	; (116a4 <main+0xe74>)
   114ca:	2248      	movs	r2, #72	; 0x48
   114cc:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.battery_cut_start;
   114ce:	4b83      	ldr	r3, [pc, #524]	; (116dc <main+0xeac>)
   114d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   114d2:	4b78      	ldr	r3, [pc, #480]	; (116b4 <main+0xe84>)
   114d4:	1c10      	adds	r0, r2, #0
   114d6:	4798      	blx	r3
   114d8:	0003      	movs	r3, r0
   114da:	b2da      	uxtb	r2, r3
   114dc:	4b71      	ldr	r3, [pc, #452]	; (116a4 <main+0xe74>)
   114de:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x49;
   114e0:	4b70      	ldr	r3, [pc, #448]	; (116a4 <main+0xe74>)
   114e2:	2249      	movs	r2, #73	; 0x49
   114e4:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.battery_cut_end;
   114e6:	4b7d      	ldr	r3, [pc, #500]	; (116dc <main+0xeac>)
   114e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   114ea:	4b72      	ldr	r3, [pc, #456]	; (116b4 <main+0xe84>)
   114ec:	1c10      	adds	r0, r2, #0
   114ee:	4798      	blx	r3
   114f0:	0003      	movs	r3, r0
   114f2:	b2da      	uxtb	r2, r3
   114f4:	4b6b      	ldr	r3, [pc, #428]	; (116a4 <main+0xe74>)
   114f6:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4A;
   114f8:	4b6a      	ldr	r3, [pc, #424]	; (116a4 <main+0xe74>)
   114fa:	224a      	movs	r2, #74	; 0x4a
   114fc:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (mcconf_limits.max_erpm & 0xFF);
   114fe:	4b77      	ldr	r3, [pc, #476]	; (116dc <main+0xeac>)
   11500:	699b      	ldr	r3, [r3, #24]
   11502:	b2da      	uxtb	r2, r3
   11504:	4b67      	ldr	r3, [pc, #412]	; (116a4 <main+0xe74>)
   11506:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (mcconf_limits.max_erpm & 0xFF00) >> 8;
   11508:	4b74      	ldr	r3, [pc, #464]	; (116dc <main+0xeac>)
   1150a:	699b      	ldr	r3, [r3, #24]
   1150c:	121b      	asrs	r3, r3, #8
   1150e:	b2da      	uxtb	r2, r3
   11510:	4b64      	ldr	r3, [pc, #400]	; (116a4 <main+0xe74>)
   11512:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (mcconf_limits.max_erpm & 0xFF0000) >> 16;
   11514:	4b71      	ldr	r3, [pc, #452]	; (116dc <main+0xeac>)
   11516:	699b      	ldr	r3, [r3, #24]
   11518:	141b      	asrs	r3, r3, #16
   1151a:	b2da      	uxtb	r2, r3
   1151c:	4b61      	ldr	r3, [pc, #388]	; (116a4 <main+0xe74>)
   1151e:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4B;
   11520:	4b60      	ldr	r3, [pc, #384]	; (116a4 <main+0xe74>)
   11522:	224b      	movs	r2, #75	; 0x4b
   11524:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (mcconf_limits.min_erpm & 0xFF);
   11526:	4b6d      	ldr	r3, [pc, #436]	; (116dc <main+0xeac>)
   11528:	695b      	ldr	r3, [r3, #20]
   1152a:	b2da      	uxtb	r2, r3
   1152c:	4b5d      	ldr	r3, [pc, #372]	; (116a4 <main+0xe74>)
   1152e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (mcconf_limits.min_erpm & 0xFF00) >> 8;
   11530:	4b6a      	ldr	r3, [pc, #424]	; (116dc <main+0xeac>)
   11532:	695b      	ldr	r3, [r3, #20]
   11534:	121b      	asrs	r3, r3, #8
   11536:	b2da      	uxtb	r2, r3
   11538:	4b5a      	ldr	r3, [pc, #360]	; (116a4 <main+0xe74>)
   1153a:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (mcconf_limits.min_erpm & 0xFF0000) >> 16;
   1153c:	4b67      	ldr	r3, [pc, #412]	; (116dc <main+0xeac>)
   1153e:	695b      	ldr	r3, [r3, #20]
   11540:	141b      	asrs	r3, r3, #16
   11542:	b2da      	uxtb	r2, r3
   11544:	4b57      	ldr	r3, [pc, #348]	; (116a4 <main+0xe74>)
   11546:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   11548:	4956      	ldr	r1, [pc, #344]	; (116a4 <main+0xe74>)
   1154a:	4b60      	ldr	r3, [pc, #384]	; (116cc <main+0xe9c>)
   1154c:	220c      	movs	r2, #12
   1154e:	0018      	movs	r0, r3
   11550:	4b63      	ldr	r3, [pc, #396]	; (116e0 <main+0xeb0>)
   11552:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11554:	46c0      	nop			; (mov r8, r8)
   11556:	4b5f      	ldr	r3, [pc, #380]	; (116d4 <main+0xea4>)
   11558:	4798      	blx	r3
   1155a:	0002      	movs	r2, r0
   1155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1155e:	1ad3      	subs	r3, r2, r3
   11560:	221e      	movs	r2, #30
   11562:	18ba      	adds	r2, r7, r2
   11564:	8812      	ldrh	r2, [r2, #0]
   11566:	0052      	lsls	r2, r2, #1
   11568:	4293      	cmp	r3, r2
   1156a:	d3f4      	bcc.n	11556 <main+0xd26>
			BLE_TX_TIME = millis();
   1156c:	4b59      	ldr	r3, [pc, #356]	; (116d4 <main+0xea4>)
   1156e:	4798      	blx	r3
   11570:	0003      	movs	r3, r0
   11572:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x4C;
   11574:	4b4b      	ldr	r3, [pc, #300]	; (116a4 <main+0xe74>)
   11576:	224c      	movs	r2, #76	; 0x4c
   11578:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((mcconf_limits.max_erpm_fbrake) & 0xFF);
   1157a:	4b58      	ldr	r3, [pc, #352]	; (116dc <main+0xeac>)
   1157c:	69db      	ldr	r3, [r3, #28]
   1157e:	b2da      	uxtb	r2, r3
   11580:	4b48      	ldr	r3, [pc, #288]	; (116a4 <main+0xe74>)
   11582:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ((mcconf_limits.max_erpm_fbrake) & 0xFF00) >> 8;
   11584:	4b55      	ldr	r3, [pc, #340]	; (116dc <main+0xeac>)
   11586:	69db      	ldr	r3, [r3, #28]
   11588:	121b      	asrs	r3, r3, #8
   1158a:	b2da      	uxtb	r2, r3
   1158c:	4b45      	ldr	r3, [pc, #276]	; (116a4 <main+0xe74>)
   1158e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((mcconf_limits.max_erpm_fbrake) & 0xFF0000) >> 16;
   11590:	4b52      	ldr	r3, [pc, #328]	; (116dc <main+0xeac>)
   11592:	69db      	ldr	r3, [r3, #28]
   11594:	141b      	asrs	r3, r3, #16
   11596:	b2da      	uxtb	r2, r3
   11598:	4b42      	ldr	r3, [pc, #264]	; (116a4 <main+0xe74>)
   1159a:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4D;
   1159c:	4b41      	ldr	r3, [pc, #260]	; (116a4 <main+0xe74>)
   1159e:	224d      	movs	r2, #77	; 0x4d
   115a0:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF);
   115a2:	4b4e      	ldr	r3, [pc, #312]	; (116dc <main+0xeac>)
   115a4:	6a1b      	ldr	r3, [r3, #32]
   115a6:	b2da      	uxtb	r2, r3
   115a8:	4b3e      	ldr	r3, [pc, #248]	; (116a4 <main+0xe74>)
   115aa:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF00) >> 8;
   115ac:	4b4b      	ldr	r3, [pc, #300]	; (116dc <main+0xeac>)
   115ae:	6a1b      	ldr	r3, [r3, #32]
   115b0:	121b      	asrs	r3, r3, #8
   115b2:	b2da      	uxtb	r2, r3
   115b4:	4b3b      	ldr	r3, [pc, #236]	; (116a4 <main+0xe74>)
   115b6:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF0000) >> 16;
   115b8:	4b48      	ldr	r3, [pc, #288]	; (116dc <main+0xeac>)
   115ba:	6a1b      	ldr	r3, [r3, #32]
   115bc:	141b      	asrs	r3, r3, #16
   115be:	b2da      	uxtb	r2, r3
   115c0:	4b38      	ldr	r3, [pc, #224]	; (116a4 <main+0xe74>)
   115c2:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4E;
   115c4:	4b37      	ldr	r3, [pc, #220]	; (116a4 <main+0xe74>)
   115c6:	224e      	movs	r2, #78	; 0x4e
   115c8:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.temp_fet_start;
   115ca:	4b44      	ldr	r3, [pc, #272]	; (116dc <main+0xeac>)
   115cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   115ce:	b2da      	uxtb	r2, r3
   115d0:	4b34      	ldr	r3, [pc, #208]	; (116a4 <main+0xe74>)
   115d2:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x4F;
   115d4:	4b33      	ldr	r3, [pc, #204]	; (116a4 <main+0xe74>)
   115d6:	224f      	movs	r2, #79	; 0x4f
   115d8:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.temp_fet_end;
   115da:	4b40      	ldr	r3, [pc, #256]	; (116dc <main+0xeac>)
   115dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   115de:	b2da      	uxtb	r2, r3
   115e0:	4b30      	ldr	r3, [pc, #192]	; (116a4 <main+0xe74>)
   115e2:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   115e4:	492f      	ldr	r1, [pc, #188]	; (116a4 <main+0xe74>)
   115e6:	4b39      	ldr	r3, [pc, #228]	; (116cc <main+0xe9c>)
   115e8:	220c      	movs	r2, #12
   115ea:	0018      	movs	r0, r3
   115ec:	4b3c      	ldr	r3, [pc, #240]	; (116e0 <main+0xeb0>)
   115ee:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   115f0:	46c0      	nop			; (mov r8, r8)
   115f2:	4b38      	ldr	r3, [pc, #224]	; (116d4 <main+0xea4>)
   115f4:	4798      	blx	r3
   115f6:	0002      	movs	r2, r0
   115f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   115fa:	1ad3      	subs	r3, r2, r3
   115fc:	221e      	movs	r2, #30
   115fe:	18ba      	adds	r2, r7, r2
   11600:	8812      	ldrh	r2, [r2, #0]
   11602:	0052      	lsls	r2, r2, #1
   11604:	4293      	cmp	r3, r2
   11606:	d3f4      	bcc.n	115f2 <main+0xdc2>
			BLE_TX_TIME = millis();
   11608:	4b32      	ldr	r3, [pc, #200]	; (116d4 <main+0xea4>)
   1160a:	4798      	blx	r3
   1160c:	0003      	movs	r3, r0
   1160e:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x50;
   11610:	4b24      	ldr	r3, [pc, #144]	; (116a4 <main+0xe74>)
   11612:	2250      	movs	r2, #80	; 0x50
   11614:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.temp_motor_start;
   11616:	4b31      	ldr	r3, [pc, #196]	; (116dc <main+0xeac>)
   11618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1161a:	b2da      	uxtb	r2, r3
   1161c:	4b21      	ldr	r3, [pc, #132]	; (116a4 <main+0xe74>)
   1161e:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x51;
   11620:	4b20      	ldr	r3, [pc, #128]	; (116a4 <main+0xe74>)
   11622:	2251      	movs	r2, #81	; 0x51
   11624:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.temp_motor_end;
   11626:	4b2d      	ldr	r3, [pc, #180]	; (116dc <main+0xeac>)
   11628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1162a:	b2da      	uxtb	r2, r3
   1162c:	4b1d      	ldr	r3, [pc, #116]	; (116a4 <main+0xe74>)
   1162e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x52;
   11630:	4b1c      	ldr	r3, [pc, #112]	; (116a4 <main+0xe74>)
   11632:	2252      	movs	r2, #82	; 0x52
   11634:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.max_duty;
   11636:	4b29      	ldr	r3, [pc, #164]	; (116dc <main+0xeac>)
   11638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1163a:	b2da      	uxtb	r2, r3
   1163c:	4b19      	ldr	r3, [pc, #100]	; (116a4 <main+0xe74>)
   1163e:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x53;
   11640:	4b18      	ldr	r3, [pc, #96]	; (116a4 <main+0xe74>)
   11642:	2253      	movs	r2, #83	; 0x53
   11644:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.min_duty;
   11646:	4b25      	ldr	r3, [pc, #148]	; (116dc <main+0xeac>)
   11648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1164a:	b2da      	uxtb	r2, r3
   1164c:	4b15      	ldr	r3, [pc, #84]	; (116a4 <main+0xe74>)
   1164e:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x47;
   11650:	4b14      	ldr	r3, [pc, #80]	; (116a4 <main+0xe74>)
   11652:	2247      	movs	r2, #71	; 0x47
   11654:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.min_vin;
   11656:	4b21      	ldr	r3, [pc, #132]	; (116dc <main+0xeac>)
   11658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1165a:	b2da      	uxtb	r2, r3
   1165c:	4b11      	ldr	r3, [pc, #68]	; (116a4 <main+0xe74>)
   1165e:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   11660:	4910      	ldr	r1, [pc, #64]	; (116a4 <main+0xe74>)
   11662:	4b1a      	ldr	r3, [pc, #104]	; (116cc <main+0xe9c>)
   11664:	220a      	movs	r2, #10
   11666:	0018      	movs	r0, r3
   11668:	4b1d      	ldr	r3, [pc, #116]	; (116e0 <main+0xeb0>)
   1166a:	4798      	blx	r3

			SEND_LIMITS = 0;
   1166c:	4b1a      	ldr	r3, [pc, #104]	; (116d8 <main+0xea8>)
   1166e:	2200      	movs	r2, #0
   11670:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11672:	4b1c      	ldr	r3, [pc, #112]	; (116e4 <main+0xeb4>)
   11674:	2201      	movs	r2, #1
   11676:	701a      	strb	r2, [r3, #0]
		}

		
		////////////////////////   Handle Sensor Params Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_SENSORS)
   11678:	4b1b      	ldr	r3, [pc, #108]	; (116e8 <main+0xeb8>)
   1167a:	781b      	ldrb	r3, [r3, #0]
   1167c:	2b00      	cmp	r3, #0
   1167e:	d100      	bne.n	11682 <main+0xe52>
   11680:	e160      	b.n	11944 <main+0x1114>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11682:	46c0      	nop			; (mov r8, r8)
   11684:	4b13      	ldr	r3, [pc, #76]	; (116d4 <main+0xea4>)
   11686:	4798      	blx	r3
   11688:	0002      	movs	r2, r0
   1168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1168c:	1ad3      	subs	r3, r2, r3
   1168e:	221e      	movs	r2, #30
   11690:	18ba      	adds	r2, r7, r2
   11692:	8812      	ldrh	r2, [r2, #0]
   11694:	0052      	lsls	r2, r2, #1
   11696:	4293      	cmp	r3, r2
   11698:	d3f4      	bcc.n	11684 <main+0xe54>
			BLE_TX_TIME = millis();
   1169a:	4b0e      	ldr	r3, [pc, #56]	; (116d4 <main+0xea4>)
   1169c:	4798      	blx	r3
   1169e:	0003      	movs	r3, r0
   116a0:	62bb      	str	r3, [r7, #40]	; 0x28
   116a2:	e023      	b.n	116ec <main+0xebc>
   116a4:	20000928 	.word	0x20000928
   116a8:	200003e0 	.word	0x200003e0
   116ac:	00014ca1 	.word	0x00014ca1
   116b0:	41200000 	.word	0x41200000
   116b4:	00014531 	.word	0x00014531
   116b8:	200003e4 	.word	0x200003e4
   116bc:	200002f0 	.word	0x200002f0
   116c0:	200002f2 	.word	0x200002f2
   116c4:	200002f4 	.word	0x200002f4
   116c8:	200003c0 	.word	0x200003c0
   116cc:	200004a0 	.word	0x200004a0
   116d0:	00006629 	.word	0x00006629
   116d4:	0000b109 	.word	0x0000b109
   116d8:	2000030e 	.word	0x2000030e
   116dc:	20000fd4 	.word	0x20000fd4
   116e0:	000063bd 	.word	0x000063bd
   116e4:	200000b1 	.word	0x200000b1
   116e8:	200003af 	.word	0x200003af

			ble_write_buffer[0] = 0x61;
   116ec:	4bf6      	ldr	r3, [pc, #984]	; (11ac8 <main+0x1298>)
   116ee:	2261      	movs	r2, #97	; 0x61
   116f0:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(err_estimate[ax_kalman]) & 0xFF); // Accel X estimated error
   116f2:	4bf6      	ldr	r3, [pc, #984]	; (11acc <main+0x129c>)
   116f4:	681a      	ldr	r2, [r3, #0]
   116f6:	4bf6      	ldr	r3, [pc, #984]	; (11ad0 <main+0x12a0>)
   116f8:	1c10      	adds	r0, r2, #0
   116fa:	4798      	blx	r3
   116fc:	0003      	movs	r3, r0
   116fe:	b29b      	uxth	r3, r3
   11700:	b2da      	uxtb	r2, r3
   11702:	4bf1      	ldr	r3, [pc, #964]	; (11ac8 <main+0x1298>)
   11704:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x62;
   11706:	4bf0      	ldr	r3, [pc, #960]	; (11ac8 <main+0x1298>)
   11708:	2262      	movs	r2, #98	; 0x62
   1170a:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(err_estimate[ay_kalman]) & 0xFF); // AccelY estimated error
   1170c:	4bef      	ldr	r3, [pc, #956]	; (11acc <main+0x129c>)
   1170e:	685a      	ldr	r2, [r3, #4]
   11710:	4bef      	ldr	r3, [pc, #956]	; (11ad0 <main+0x12a0>)
   11712:	1c10      	adds	r0, r2, #0
   11714:	4798      	blx	r3
   11716:	0003      	movs	r3, r0
   11718:	b29b      	uxth	r3, r3
   1171a:	b2da      	uxtb	r2, r3
   1171c:	4bea      	ldr	r3, [pc, #936]	; (11ac8 <main+0x1298>)
   1171e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x63;
   11720:	4be9      	ldr	r3, [pc, #932]	; (11ac8 <main+0x1298>)
   11722:	2263      	movs	r2, #99	; 0x63
   11724:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(err_estimate[az_kalman]) & 0xFF); // Accel Z estimated error
   11726:	4be9      	ldr	r3, [pc, #932]	; (11acc <main+0x129c>)
   11728:	689a      	ldr	r2, [r3, #8]
   1172a:	4be9      	ldr	r3, [pc, #932]	; (11ad0 <main+0x12a0>)
   1172c:	1c10      	adds	r0, r2, #0
   1172e:	4798      	blx	r3
   11730:	0003      	movs	r3, r0
   11732:	b29b      	uxth	r3, r3
   11734:	b2da      	uxtb	r2, r3
   11736:	4be4      	ldr	r3, [pc, #912]	; (11ac8 <main+0x1298>)
   11738:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x64;
   1173a:	4be3      	ldr	r3, [pc, #908]	; (11ac8 <main+0x1298>)
   1173c:	2264      	movs	r2, #100	; 0x64
   1173e:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(err_estimate[gx_kalman]) & 0xFF); // Gyro X estimated error
   11740:	4be2      	ldr	r3, [pc, #904]	; (11acc <main+0x129c>)
   11742:	68da      	ldr	r2, [r3, #12]
   11744:	4be2      	ldr	r3, [pc, #904]	; (11ad0 <main+0x12a0>)
   11746:	1c10      	adds	r0, r2, #0
   11748:	4798      	blx	r3
   1174a:	0003      	movs	r3, r0
   1174c:	b29b      	uxth	r3, r3
   1174e:	b2da      	uxtb	r2, r3
   11750:	4bdd      	ldr	r3, [pc, #884]	; (11ac8 <main+0x1298>)
   11752:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x65;
   11754:	4bdc      	ldr	r3, [pc, #880]	; (11ac8 <main+0x1298>)
   11756:	2265      	movs	r2, #101	; 0x65
   11758:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(err_estimate[gy_kalman]) & 0xFF); // Gyro Y estimated error
   1175a:	4bdc      	ldr	r3, [pc, #880]	; (11acc <main+0x129c>)
   1175c:	691a      	ldr	r2, [r3, #16]
   1175e:	4bdc      	ldr	r3, [pc, #880]	; (11ad0 <main+0x12a0>)
   11760:	1c10      	adds	r0, r2, #0
   11762:	4798      	blx	r3
   11764:	0003      	movs	r3, r0
   11766:	b29b      	uxth	r3, r3
   11768:	b2da      	uxtb	r2, r3
   1176a:	4bd7      	ldr	r3, [pc, #860]	; (11ac8 <main+0x1298>)
   1176c:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x66;
   1176e:	4bd6      	ldr	r3, [pc, #856]	; (11ac8 <main+0x1298>)
   11770:	2266      	movs	r2, #102	; 0x66
   11772:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(err_estimate[gz_kalman]) & 0xFF); // Gyro Z estimated error
   11774:	4bd5      	ldr	r3, [pc, #852]	; (11acc <main+0x129c>)
   11776:	695a      	ldr	r2, [r3, #20]
   11778:	4bd5      	ldr	r3, [pc, #852]	; (11ad0 <main+0x12a0>)
   1177a:	1c10      	adds	r0, r2, #0
   1177c:	4798      	blx	r3
   1177e:	0003      	movs	r3, r0
   11780:	b29b      	uxth	r3, r3
   11782:	b2da      	uxtb	r2, r3
   11784:	4bd0      	ldr	r3, [pc, #832]	; (11ac8 <main+0x1298>)
   11786:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x67;
   11788:	4bcf      	ldr	r3, [pc, #828]	; (11ac8 <main+0x1298>)
   1178a:	2267      	movs	r2, #103	; 0x67
   1178c:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(err_estimate[light_kalman]) & 0xFF); // Light Sensor estimated error
   1178e:	4bcf      	ldr	r3, [pc, #828]	; (11acc <main+0x129c>)
   11790:	699a      	ldr	r2, [r3, #24]
   11792:	4bcf      	ldr	r3, [pc, #828]	; (11ad0 <main+0x12a0>)
   11794:	1c10      	adds	r0, r2, #0
   11796:	4798      	blx	r3
   11798:	0003      	movs	r3, r0
   1179a:	b29b      	uxth	r3, r3
   1179c:	b2da      	uxtb	r2, r3
   1179e:	4bca      	ldr	r3, [pc, #808]	; (11ac8 <main+0x1298>)
   117a0:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   117a2:	49c9      	ldr	r1, [pc, #804]	; (11ac8 <main+0x1298>)
   117a4:	4bcb      	ldr	r3, [pc, #812]	; (11ad4 <main+0x12a4>)
   117a6:	220e      	movs	r2, #14
   117a8:	0018      	movs	r0, r3
   117aa:	4bcb      	ldr	r3, [pc, #812]	; (11ad8 <main+0x12a8>)
   117ac:	4798      	blx	r3
		
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   117ae:	46c0      	nop			; (mov r8, r8)
   117b0:	4bca      	ldr	r3, [pc, #808]	; (11adc <main+0x12ac>)
   117b2:	4798      	blx	r3
   117b4:	0002      	movs	r2, r0
   117b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   117b8:	1ad3      	subs	r3, r2, r3
   117ba:	221e      	movs	r2, #30
   117bc:	18ba      	adds	r2, r7, r2
   117be:	8812      	ldrh	r2, [r2, #0]
   117c0:	0052      	lsls	r2, r2, #1
   117c2:	4293      	cmp	r3, r2
   117c4:	d3f4      	bcc.n	117b0 <main+0xf80>
			BLE_TX_TIME = millis();
   117c6:	4bc5      	ldr	r3, [pc, #788]	; (11adc <main+0x12ac>)
   117c8:	4798      	blx	r3
   117ca:	0003      	movs	r3, r0
   117cc:	62bb      	str	r3, [r7, #40]	; 0x28

			ble_write_buffer[0] = 0x68;
   117ce:	4bbe      	ldr	r3, [pc, #760]	; (11ac8 <main+0x1298>)
   117d0:	2268      	movs	r2, #104	; 0x68
   117d2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(q[ax_kalman]*100.0) & 0xFF); // Accel X Sensitivity
   117d4:	4bc2      	ldr	r3, [pc, #776]	; (11ae0 <main+0x12b0>)
   117d6:	681a      	ldr	r2, [r3, #0]
   117d8:	4bc2      	ldr	r3, [pc, #776]	; (11ae4 <main+0x12b4>)
   117da:	1c10      	adds	r0, r2, #0
   117dc:	4798      	blx	r3
   117de:	4cc2      	ldr	r4, [pc, #776]	; (11ae8 <main+0x12b8>)
   117e0:	2200      	movs	r2, #0
   117e2:	4bc2      	ldr	r3, [pc, #776]	; (11aec <main+0x12bc>)
   117e4:	47a0      	blx	r4
   117e6:	0003      	movs	r3, r0
   117e8:	000c      	movs	r4, r1
   117ea:	0019      	movs	r1, r3
   117ec:	0022      	movs	r2, r4
   117ee:	4bc0      	ldr	r3, [pc, #768]	; (11af0 <main+0x12c0>)
   117f0:	0008      	movs	r0, r1
   117f2:	0011      	movs	r1, r2
   117f4:	4798      	blx	r3
   117f6:	0003      	movs	r3, r0
   117f8:	b29b      	uxth	r3, r3
   117fa:	b2da      	uxtb	r2, r3
   117fc:	4bb2      	ldr	r3, [pc, #712]	; (11ac8 <main+0x1298>)
   117fe:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x69;
   11800:	4bb1      	ldr	r3, [pc, #708]	; (11ac8 <main+0x1298>)
   11802:	2269      	movs	r2, #105	; 0x69
   11804:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(q[ay_kalman]*100.0) & 0xFF); // Accel Y Sensitivity
   11806:	4bb6      	ldr	r3, [pc, #728]	; (11ae0 <main+0x12b0>)
   11808:	685a      	ldr	r2, [r3, #4]
   1180a:	4bb6      	ldr	r3, [pc, #728]	; (11ae4 <main+0x12b4>)
   1180c:	1c10      	adds	r0, r2, #0
   1180e:	4798      	blx	r3
   11810:	4cb5      	ldr	r4, [pc, #724]	; (11ae8 <main+0x12b8>)
   11812:	2200      	movs	r2, #0
   11814:	4bb5      	ldr	r3, [pc, #724]	; (11aec <main+0x12bc>)
   11816:	47a0      	blx	r4
   11818:	0003      	movs	r3, r0
   1181a:	000c      	movs	r4, r1
   1181c:	0019      	movs	r1, r3
   1181e:	0022      	movs	r2, r4
   11820:	4bb3      	ldr	r3, [pc, #716]	; (11af0 <main+0x12c0>)
   11822:	0008      	movs	r0, r1
   11824:	0011      	movs	r1, r2
   11826:	4798      	blx	r3
   11828:	0003      	movs	r3, r0
   1182a:	b29b      	uxth	r3, r3
   1182c:	b2da      	uxtb	r2, r3
   1182e:	4ba6      	ldr	r3, [pc, #664]	; (11ac8 <main+0x1298>)
   11830:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x6A;
   11832:	4ba5      	ldr	r3, [pc, #660]	; (11ac8 <main+0x1298>)
   11834:	226a      	movs	r2, #106	; 0x6a
   11836:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(q[az_kalman]*100.0) & 0xFF); // Accel Z Sensitivity
   11838:	4ba9      	ldr	r3, [pc, #676]	; (11ae0 <main+0x12b0>)
   1183a:	689a      	ldr	r2, [r3, #8]
   1183c:	4ba9      	ldr	r3, [pc, #676]	; (11ae4 <main+0x12b4>)
   1183e:	1c10      	adds	r0, r2, #0
   11840:	4798      	blx	r3
   11842:	4ca9      	ldr	r4, [pc, #676]	; (11ae8 <main+0x12b8>)
   11844:	2200      	movs	r2, #0
   11846:	4ba9      	ldr	r3, [pc, #676]	; (11aec <main+0x12bc>)
   11848:	47a0      	blx	r4
   1184a:	0003      	movs	r3, r0
   1184c:	000c      	movs	r4, r1
   1184e:	0019      	movs	r1, r3
   11850:	0022      	movs	r2, r4
   11852:	4ba7      	ldr	r3, [pc, #668]	; (11af0 <main+0x12c0>)
   11854:	0008      	movs	r0, r1
   11856:	0011      	movs	r1, r2
   11858:	4798      	blx	r3
   1185a:	0003      	movs	r3, r0
   1185c:	b29b      	uxth	r3, r3
   1185e:	b2da      	uxtb	r2, r3
   11860:	4b99      	ldr	r3, [pc, #612]	; (11ac8 <main+0x1298>)
   11862:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x6B;
   11864:	4b98      	ldr	r3, [pc, #608]	; (11ac8 <main+0x1298>)
   11866:	226b      	movs	r2, #107	; 0x6b
   11868:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(q[gx_kalman]*100.0) & 0xFF); // Gyro X Sensitivity
   1186a:	4b9d      	ldr	r3, [pc, #628]	; (11ae0 <main+0x12b0>)
   1186c:	68da      	ldr	r2, [r3, #12]
   1186e:	4b9d      	ldr	r3, [pc, #628]	; (11ae4 <main+0x12b4>)
   11870:	1c10      	adds	r0, r2, #0
   11872:	4798      	blx	r3
   11874:	4c9c      	ldr	r4, [pc, #624]	; (11ae8 <main+0x12b8>)
   11876:	2200      	movs	r2, #0
   11878:	4b9c      	ldr	r3, [pc, #624]	; (11aec <main+0x12bc>)
   1187a:	47a0      	blx	r4
   1187c:	0003      	movs	r3, r0
   1187e:	000c      	movs	r4, r1
   11880:	0019      	movs	r1, r3
   11882:	0022      	movs	r2, r4
   11884:	4b9a      	ldr	r3, [pc, #616]	; (11af0 <main+0x12c0>)
   11886:	0008      	movs	r0, r1
   11888:	0011      	movs	r1, r2
   1188a:	4798      	blx	r3
   1188c:	0003      	movs	r3, r0
   1188e:	b29b      	uxth	r3, r3
   11890:	b2da      	uxtb	r2, r3
   11892:	4b8d      	ldr	r3, [pc, #564]	; (11ac8 <main+0x1298>)
   11894:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x6C;
   11896:	4b8c      	ldr	r3, [pc, #560]	; (11ac8 <main+0x1298>)
   11898:	226c      	movs	r2, #108	; 0x6c
   1189a:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(q[gy_kalman]*100.0) & 0xFF); // Gyro Y Sensitivity
   1189c:	4b90      	ldr	r3, [pc, #576]	; (11ae0 <main+0x12b0>)
   1189e:	691a      	ldr	r2, [r3, #16]
   118a0:	4b90      	ldr	r3, [pc, #576]	; (11ae4 <main+0x12b4>)
   118a2:	1c10      	adds	r0, r2, #0
   118a4:	4798      	blx	r3
   118a6:	4c90      	ldr	r4, [pc, #576]	; (11ae8 <main+0x12b8>)
   118a8:	2200      	movs	r2, #0
   118aa:	4b90      	ldr	r3, [pc, #576]	; (11aec <main+0x12bc>)
   118ac:	47a0      	blx	r4
   118ae:	0003      	movs	r3, r0
   118b0:	000c      	movs	r4, r1
   118b2:	0019      	movs	r1, r3
   118b4:	0022      	movs	r2, r4
   118b6:	4b8e      	ldr	r3, [pc, #568]	; (11af0 <main+0x12c0>)
   118b8:	0008      	movs	r0, r1
   118ba:	0011      	movs	r1, r2
   118bc:	4798      	blx	r3
   118be:	0003      	movs	r3, r0
   118c0:	b29b      	uxth	r3, r3
   118c2:	b2da      	uxtb	r2, r3
   118c4:	4b80      	ldr	r3, [pc, #512]	; (11ac8 <main+0x1298>)
   118c6:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x6D;
   118c8:	4b7f      	ldr	r3, [pc, #508]	; (11ac8 <main+0x1298>)
   118ca:	226d      	movs	r2, #109	; 0x6d
   118cc:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(q[gz_kalman]*100.0) & 0xFF); // Gyro Z Sensitivity
   118ce:	4b84      	ldr	r3, [pc, #528]	; (11ae0 <main+0x12b0>)
   118d0:	695a      	ldr	r2, [r3, #20]
   118d2:	4b84      	ldr	r3, [pc, #528]	; (11ae4 <main+0x12b4>)
   118d4:	1c10      	adds	r0, r2, #0
   118d6:	4798      	blx	r3
   118d8:	4c83      	ldr	r4, [pc, #524]	; (11ae8 <main+0x12b8>)
   118da:	2200      	movs	r2, #0
   118dc:	4b83      	ldr	r3, [pc, #524]	; (11aec <main+0x12bc>)
   118de:	47a0      	blx	r4
   118e0:	0003      	movs	r3, r0
   118e2:	000c      	movs	r4, r1
   118e4:	0019      	movs	r1, r3
   118e6:	0022      	movs	r2, r4
   118e8:	4b81      	ldr	r3, [pc, #516]	; (11af0 <main+0x12c0>)
   118ea:	0008      	movs	r0, r1
   118ec:	0011      	movs	r1, r2
   118ee:	4798      	blx	r3
   118f0:	0003      	movs	r3, r0
   118f2:	b29b      	uxth	r3, r3
   118f4:	b2da      	uxtb	r2, r3
   118f6:	4b74      	ldr	r3, [pc, #464]	; (11ac8 <main+0x1298>)
   118f8:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x6E;
   118fa:	4b73      	ldr	r3, [pc, #460]	; (11ac8 <main+0x1298>)
   118fc:	226e      	movs	r2, #110	; 0x6e
   118fe:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(q[light_kalman]*100.0) & 0xFF); // Light Sensitivity
   11900:	4b77      	ldr	r3, [pc, #476]	; (11ae0 <main+0x12b0>)
   11902:	699a      	ldr	r2, [r3, #24]
   11904:	4b77      	ldr	r3, [pc, #476]	; (11ae4 <main+0x12b4>)
   11906:	1c10      	adds	r0, r2, #0
   11908:	4798      	blx	r3
   1190a:	4c77      	ldr	r4, [pc, #476]	; (11ae8 <main+0x12b8>)
   1190c:	2200      	movs	r2, #0
   1190e:	4b77      	ldr	r3, [pc, #476]	; (11aec <main+0x12bc>)
   11910:	47a0      	blx	r4
   11912:	0003      	movs	r3, r0
   11914:	000c      	movs	r4, r1
   11916:	0019      	movs	r1, r3
   11918:	0022      	movs	r2, r4
   1191a:	4b75      	ldr	r3, [pc, #468]	; (11af0 <main+0x12c0>)
   1191c:	0008      	movs	r0, r1
   1191e:	0011      	movs	r1, r2
   11920:	4798      	blx	r3
   11922:	0003      	movs	r3, r0
   11924:	b29b      	uxth	r3, r3
   11926:	b2da      	uxtb	r2, r3
   11928:	4b67      	ldr	r3, [pc, #412]	; (11ac8 <main+0x1298>)
   1192a:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   1192c:	4966      	ldr	r1, [pc, #408]	; (11ac8 <main+0x1298>)
   1192e:	4b69      	ldr	r3, [pc, #420]	; (11ad4 <main+0x12a4>)
   11930:	220e      	movs	r2, #14
   11932:	0018      	movs	r0, r3
   11934:	4b68      	ldr	r3, [pc, #416]	; (11ad8 <main+0x12a8>)
   11936:	4798      	blx	r3

			SEND_SENSORS = 0;
   11938:	4b6e      	ldr	r3, [pc, #440]	; (11af4 <main+0x12c4>)
   1193a:	2200      	movs	r2, #0
   1193c:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1193e:	4b6e      	ldr	r3, [pc, #440]	; (11af8 <main+0x12c8>)
   11940:	2201      	movs	r2, #1
   11942:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle LED Params Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LED_CHARS)
   11944:	4b6d      	ldr	r3, [pc, #436]	; (11afc <main+0x12cc>)
   11946:	781b      	ldrb	r3, [r3, #0]
   11948:	2b00      	cmp	r3, #0
   1194a:	d100      	bne.n	1194e <main+0x111e>
   1194c:	e277      	b.n	11e3e <main+0x160e>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1194e:	46c0      	nop			; (mov r8, r8)
   11950:	4b62      	ldr	r3, [pc, #392]	; (11adc <main+0x12ac>)
   11952:	4798      	blx	r3
   11954:	0002      	movs	r2, r0
   11956:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11958:	1ad3      	subs	r3, r2, r3
   1195a:	221e      	movs	r2, #30
   1195c:	18ba      	adds	r2, r7, r2
   1195e:	8812      	ldrh	r2, [r2, #0]
   11960:	0052      	lsls	r2, r2, #1
   11962:	4293      	cmp	r3, r2
   11964:	d3f4      	bcc.n	11950 <main+0x1120>
			BLE_TX_TIME = millis();
   11966:	4b5d      	ldr	r3, [pc, #372]	; (11adc <main+0x12ac>)
   11968:	4798      	blx	r3
   1196a:	0003      	movs	r3, r0
   1196c:	62bb      	str	r3, [r7, #40]	; 0x28

			uint8_t led_mode_switches = ((light_mode << 4) | (HEADLIGHTS << 3) | (SIDELIGHTS << 2) | (LIGHT_CONTROLLED << 1) | IMU_CONTROLED);
   1196e:	4b64      	ldr	r3, [pc, #400]	; (11b00 <main+0x12d0>)
   11970:	781b      	ldrb	r3, [r3, #0]
   11972:	011b      	lsls	r3, r3, #4
   11974:	b25a      	sxtb	r2, r3
   11976:	4b63      	ldr	r3, [pc, #396]	; (11b04 <main+0x12d4>)
   11978:	781b      	ldrb	r3, [r3, #0]
   1197a:	00db      	lsls	r3, r3, #3
   1197c:	b25b      	sxtb	r3, r3
   1197e:	4313      	orrs	r3, r2
   11980:	b25a      	sxtb	r2, r3
   11982:	4b61      	ldr	r3, [pc, #388]	; (11b08 <main+0x12d8>)
   11984:	781b      	ldrb	r3, [r3, #0]
   11986:	009b      	lsls	r3, r3, #2
   11988:	b25b      	sxtb	r3, r3
   1198a:	4313      	orrs	r3, r2
   1198c:	b25a      	sxtb	r2, r3
   1198e:	4b5f      	ldr	r3, [pc, #380]	; (11b0c <main+0x12dc>)
   11990:	781b      	ldrb	r3, [r3, #0]
   11992:	005b      	lsls	r3, r3, #1
   11994:	b25b      	sxtb	r3, r3
   11996:	4313      	orrs	r3, r2
   11998:	b25a      	sxtb	r2, r3
   1199a:	4b5d      	ldr	r3, [pc, #372]	; (11b10 <main+0x12e0>)
   1199c:	781b      	ldrb	r3, [r3, #0]
   1199e:	b25b      	sxtb	r3, r3
   119a0:	4313      	orrs	r3, r2
   119a2:	b25a      	sxtb	r2, r3
   119a4:	231d      	movs	r3, #29
   119a6:	18fb      	adds	r3, r7, r3
   119a8:	701a      	strb	r2, [r3, #0]

			// Global LED Settings
			ble_write_buffer[0] = 0x31;
   119aa:	4b47      	ldr	r3, [pc, #284]	; (11ac8 <main+0x1298>)
   119ac:	2231      	movs	r2, #49	; 0x31
   119ae:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = led_mode_switches; // Current switch states
   119b0:	4b45      	ldr	r3, [pc, #276]	; (11ac8 <main+0x1298>)
   119b2:	221d      	movs	r2, #29
   119b4:	18ba      	adds	r2, r7, r2
   119b6:	7812      	ldrb	r2, [r2, #0]
   119b8:	705a      	strb	r2, [r3, #1]
			// Static
			ble_write_buffer[2] = 0x32;
   119ba:	4b43      	ldr	r3, [pc, #268]	; (11ac8 <main+0x1298>)
   119bc:	2232      	movs	r2, #50	; 0x32
   119be:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((float)Static_RGB.LR / 655.35);
   119c0:	4b54      	ldr	r3, [pc, #336]	; (11b14 <main+0x12e4>)
   119c2:	881a      	ldrh	r2, [r3, #0]
   119c4:	4b54      	ldr	r3, [pc, #336]	; (11b18 <main+0x12e8>)
   119c6:	0010      	movs	r0, r2
   119c8:	4798      	blx	r3
   119ca:	1c02      	adds	r2, r0, #0
   119cc:	4b45      	ldr	r3, [pc, #276]	; (11ae4 <main+0x12b4>)
   119ce:	1c10      	adds	r0, r2, #0
   119d0:	4798      	blx	r3
   119d2:	4c52      	ldr	r4, [pc, #328]	; (11b1c <main+0x12ec>)
   119d4:	4a52      	ldr	r2, [pc, #328]	; (11b20 <main+0x12f0>)
   119d6:	4b53      	ldr	r3, [pc, #332]	; (11b24 <main+0x12f4>)
   119d8:	47a0      	blx	r4
   119da:	0003      	movs	r3, r0
   119dc:	000c      	movs	r4, r1
   119de:	0019      	movs	r1, r3
   119e0:	0022      	movs	r2, r4
   119e2:	4b43      	ldr	r3, [pc, #268]	; (11af0 <main+0x12c0>)
   119e4:	0008      	movs	r0, r1
   119e6:	0011      	movs	r1, r2
   119e8:	4798      	blx	r3
   119ea:	0003      	movs	r3, r0
   119ec:	b2da      	uxtb	r2, r3
   119ee:	4b36      	ldr	r3, [pc, #216]	; (11ac8 <main+0x1298>)
   119f0:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((float)Static_RGB.LG / 655.35);
   119f2:	4b48      	ldr	r3, [pc, #288]	; (11b14 <main+0x12e4>)
   119f4:	885a      	ldrh	r2, [r3, #2]
   119f6:	4b48      	ldr	r3, [pc, #288]	; (11b18 <main+0x12e8>)
   119f8:	0010      	movs	r0, r2
   119fa:	4798      	blx	r3
   119fc:	1c02      	adds	r2, r0, #0
   119fe:	4b39      	ldr	r3, [pc, #228]	; (11ae4 <main+0x12b4>)
   11a00:	1c10      	adds	r0, r2, #0
   11a02:	4798      	blx	r3
   11a04:	4c45      	ldr	r4, [pc, #276]	; (11b1c <main+0x12ec>)
   11a06:	4a46      	ldr	r2, [pc, #280]	; (11b20 <main+0x12f0>)
   11a08:	4b46      	ldr	r3, [pc, #280]	; (11b24 <main+0x12f4>)
   11a0a:	47a0      	blx	r4
   11a0c:	0003      	movs	r3, r0
   11a0e:	000c      	movs	r4, r1
   11a10:	0019      	movs	r1, r3
   11a12:	0022      	movs	r2, r4
   11a14:	4b36      	ldr	r3, [pc, #216]	; (11af0 <main+0x12c0>)
   11a16:	0008      	movs	r0, r1
   11a18:	0011      	movs	r1, r2
   11a1a:	4798      	blx	r3
   11a1c:	0003      	movs	r3, r0
   11a1e:	b2da      	uxtb	r2, r3
   11a20:	4b29      	ldr	r3, [pc, #164]	; (11ac8 <main+0x1298>)
   11a22:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((float)Static_RGB.LB / 655.35);
   11a24:	4b3b      	ldr	r3, [pc, #236]	; (11b14 <main+0x12e4>)
   11a26:	889a      	ldrh	r2, [r3, #4]
   11a28:	4b3b      	ldr	r3, [pc, #236]	; (11b18 <main+0x12e8>)
   11a2a:	0010      	movs	r0, r2
   11a2c:	4798      	blx	r3
   11a2e:	1c02      	adds	r2, r0, #0
   11a30:	4b2c      	ldr	r3, [pc, #176]	; (11ae4 <main+0x12b4>)
   11a32:	1c10      	adds	r0, r2, #0
   11a34:	4798      	blx	r3
   11a36:	4c39      	ldr	r4, [pc, #228]	; (11b1c <main+0x12ec>)
   11a38:	4a39      	ldr	r2, [pc, #228]	; (11b20 <main+0x12f0>)
   11a3a:	4b3a      	ldr	r3, [pc, #232]	; (11b24 <main+0x12f4>)
   11a3c:	47a0      	blx	r4
   11a3e:	0003      	movs	r3, r0
   11a40:	000c      	movs	r4, r1
   11a42:	0019      	movs	r1, r3
   11a44:	0022      	movs	r2, r4
   11a46:	4b2a      	ldr	r3, [pc, #168]	; (11af0 <main+0x12c0>)
   11a48:	0008      	movs	r0, r1
   11a4a:	0011      	movs	r1, r2
   11a4c:	4798      	blx	r3
   11a4e:	0003      	movs	r3, r0
   11a50:	b2da      	uxtb	r2, r3
   11a52:	4b1d      	ldr	r3, [pc, #116]	; (11ac8 <main+0x1298>)
   11a54:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((float)Static_RGB.RR / 655.35);
   11a56:	4b2f      	ldr	r3, [pc, #188]	; (11b14 <main+0x12e4>)
   11a58:	88da      	ldrh	r2, [r3, #6]
   11a5a:	4b2f      	ldr	r3, [pc, #188]	; (11b18 <main+0x12e8>)
   11a5c:	0010      	movs	r0, r2
   11a5e:	4798      	blx	r3
   11a60:	1c02      	adds	r2, r0, #0
   11a62:	4b20      	ldr	r3, [pc, #128]	; (11ae4 <main+0x12b4>)
   11a64:	1c10      	adds	r0, r2, #0
   11a66:	4798      	blx	r3
   11a68:	4c2c      	ldr	r4, [pc, #176]	; (11b1c <main+0x12ec>)
   11a6a:	4a2d      	ldr	r2, [pc, #180]	; (11b20 <main+0x12f0>)
   11a6c:	4b2d      	ldr	r3, [pc, #180]	; (11b24 <main+0x12f4>)
   11a6e:	47a0      	blx	r4
   11a70:	0003      	movs	r3, r0
   11a72:	000c      	movs	r4, r1
   11a74:	0019      	movs	r1, r3
   11a76:	0022      	movs	r2, r4
   11a78:	4b1d      	ldr	r3, [pc, #116]	; (11af0 <main+0x12c0>)
   11a7a:	0008      	movs	r0, r1
   11a7c:	0011      	movs	r1, r2
   11a7e:	4798      	blx	r3
   11a80:	0003      	movs	r3, r0
   11a82:	b2da      	uxtb	r2, r3
   11a84:	4b10      	ldr	r3, [pc, #64]	; (11ac8 <main+0x1298>)
   11a86:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Static_RGB.RG / 655.35);
   11a88:	4b22      	ldr	r3, [pc, #136]	; (11b14 <main+0x12e4>)
   11a8a:	891a      	ldrh	r2, [r3, #8]
   11a8c:	4b22      	ldr	r3, [pc, #136]	; (11b18 <main+0x12e8>)
   11a8e:	0010      	movs	r0, r2
   11a90:	4798      	blx	r3
   11a92:	1c02      	adds	r2, r0, #0
   11a94:	4b13      	ldr	r3, [pc, #76]	; (11ae4 <main+0x12b4>)
   11a96:	1c10      	adds	r0, r2, #0
   11a98:	4798      	blx	r3
   11a9a:	4c20      	ldr	r4, [pc, #128]	; (11b1c <main+0x12ec>)
   11a9c:	4a20      	ldr	r2, [pc, #128]	; (11b20 <main+0x12f0>)
   11a9e:	4b21      	ldr	r3, [pc, #132]	; (11b24 <main+0x12f4>)
   11aa0:	47a0      	blx	r4
   11aa2:	0003      	movs	r3, r0
   11aa4:	000c      	movs	r4, r1
   11aa6:	0019      	movs	r1, r3
   11aa8:	0022      	movs	r2, r4
   11aaa:	4b11      	ldr	r3, [pc, #68]	; (11af0 <main+0x12c0>)
   11aac:	0008      	movs	r0, r1
   11aae:	0011      	movs	r1, r2
   11ab0:	4798      	blx	r3
   11ab2:	0003      	movs	r3, r0
   11ab4:	b2da      	uxtb	r2, r3
   11ab6:	4b04      	ldr	r3, [pc, #16]	; (11ac8 <main+0x1298>)
   11ab8:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Static_RGB.RB / 655.35);
   11aba:	4b16      	ldr	r3, [pc, #88]	; (11b14 <main+0x12e4>)
   11abc:	895a      	ldrh	r2, [r3, #10]
   11abe:	4b16      	ldr	r3, [pc, #88]	; (11b18 <main+0x12e8>)
   11ac0:	0010      	movs	r0, r2
   11ac2:	4798      	blx	r3
   11ac4:	1c02      	adds	r2, r0, #0
   11ac6:	e02f      	b.n	11b28 <main+0x12f8>
   11ac8:	20000928 	.word	0x20000928
   11acc:	200009c4 	.word	0x200009c4
   11ad0:	00014531 	.word	0x00014531
   11ad4:	200004a0 	.word	0x200004a0
   11ad8:	000063bd 	.word	0x000063bd
   11adc:	0000b109 	.word	0x0000b109
   11ae0:	20000fb8 	.word	0x20000fb8
   11ae4:	00016e95 	.word	0x00016e95
   11ae8:	0001620d 	.word	0x0001620d
   11aec:	40590000 	.word	0x40590000
   11af0:	00014561 	.word	0x00014561
   11af4:	200003af 	.word	0x200003af
   11af8:	200000b1 	.word	0x200000b1
   11afc:	200003ac 	.word	0x200003ac
   11b00:	2000001b 	.word	0x2000001b
   11b04:	20000322 	.word	0x20000322
   11b08:	200000a2 	.word	0x200000a2
   11b0c:	20000323 	.word	0x20000323
   11b10:	20000324 	.word	0x20000324
   11b14:	2000001c 	.word	0x2000001c
   11b18:	000152f9 	.word	0x000152f9
   11b1c:	000159a5 	.word	0x000159a5
   11b20:	cccccccd 	.word	0xcccccccd
   11b24:	40847acc 	.word	0x40847acc
   11b28:	4bf4      	ldr	r3, [pc, #976]	; (11efc <main+0x16cc>)
   11b2a:	1c10      	adds	r0, r2, #0
   11b2c:	4798      	blx	r3
   11b2e:	4cf4      	ldr	r4, [pc, #976]	; (11f00 <main+0x16d0>)
   11b30:	4af4      	ldr	r2, [pc, #976]	; (11f04 <main+0x16d4>)
   11b32:	4bf5      	ldr	r3, [pc, #980]	; (11f08 <main+0x16d8>)
   11b34:	47a0      	blx	r4
   11b36:	0003      	movs	r3, r0
   11b38:	000c      	movs	r4, r1
   11b3a:	0019      	movs	r1, r3
   11b3c:	0022      	movs	r2, r4
   11b3e:	4bf3      	ldr	r3, [pc, #972]	; (11f0c <main+0x16dc>)
   11b40:	0008      	movs	r0, r1
   11b42:	0011      	movs	r1, r2
   11b44:	4798      	blx	r3
   11b46:	0003      	movs	r3, r0
   11b48:	b2da      	uxtb	r2, r3
   11b4a:	4bf1      	ldr	r3, [pc, #964]	; (11f10 <main+0x16e0>)
   11b4c:	721a      	strb	r2, [r3, #8]
			// Color Cycle
			ble_write_buffer[9] = 0x33;
   11b4e:	4bf0      	ldr	r3, [pc, #960]	; (11f10 <main+0x16e0>)
   11b50:	2233      	movs	r2, #51	; 0x33
   11b52:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)(RateSens[MODE_COLOR_CYCLE] * 100);
   11b54:	4bef      	ldr	r3, [pc, #956]	; (11f14 <main+0x16e4>)
   11b56:	685a      	ldr	r2, [r3, #4]
   11b58:	4bef      	ldr	r3, [pc, #956]	; (11f18 <main+0x16e8>)
   11b5a:	49f0      	ldr	r1, [pc, #960]	; (11f1c <main+0x16ec>)
   11b5c:	1c10      	adds	r0, r2, #0
   11b5e:	4798      	blx	r3
   11b60:	1c03      	adds	r3, r0, #0
   11b62:	1c1a      	adds	r2, r3, #0
   11b64:	4bee      	ldr	r3, [pc, #952]	; (11f20 <main+0x16f0>)
   11b66:	1c10      	adds	r0, r2, #0
   11b68:	4798      	blx	r3
   11b6a:	0003      	movs	r3, r0
   11b6c:	b2da      	uxtb	r2, r3
   11b6e:	4be8      	ldr	r3, [pc, #928]	; (11f10 <main+0x16e0>)
   11b70:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)(Brightness[MODE_COLOR_CYCLE] * 100);
   11b72:	4bec      	ldr	r3, [pc, #944]	; (11f24 <main+0x16f4>)
   11b74:	685a      	ldr	r2, [r3, #4]
   11b76:	4be8      	ldr	r3, [pc, #928]	; (11f18 <main+0x16e8>)
   11b78:	49e8      	ldr	r1, [pc, #928]	; (11f1c <main+0x16ec>)
   11b7a:	1c10      	adds	r0, r2, #0
   11b7c:	4798      	blx	r3
   11b7e:	1c03      	adds	r3, r0, #0
   11b80:	1c1a      	adds	r2, r3, #0
   11b82:	4be7      	ldr	r3, [pc, #924]	; (11f20 <main+0x16f0>)
   11b84:	1c10      	adds	r0, r2, #0
   11b86:	4798      	blx	r3
   11b88:	0003      	movs	r3, r0
   11b8a:	b2da      	uxtb	r2, r3
   11b8c:	4be0      	ldr	r3, [pc, #896]	; (11f10 <main+0x16e0>)
   11b8e:	72da      	strb	r2, [r3, #11]
			// Compass Cycle
			ble_write_buffer[12] = 0x34;
   11b90:	4bdf      	ldr	r3, [pc, #892]	; (11f10 <main+0x16e0>)
   11b92:	2234      	movs	r2, #52	; 0x34
   11b94:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(Brightness[MODE_COMPASS_CYCLE] * 100);
   11b96:	4be3      	ldr	r3, [pc, #908]	; (11f24 <main+0x16f4>)
   11b98:	689a      	ldr	r2, [r3, #8]
   11b9a:	4bdf      	ldr	r3, [pc, #892]	; (11f18 <main+0x16e8>)
   11b9c:	49df      	ldr	r1, [pc, #892]	; (11f1c <main+0x16ec>)
   11b9e:	1c10      	adds	r0, r2, #0
   11ba0:	4798      	blx	r3
   11ba2:	1c03      	adds	r3, r0, #0
   11ba4:	1c1a      	adds	r2, r3, #0
   11ba6:	4bde      	ldr	r3, [pc, #888]	; (11f20 <main+0x16f0>)
   11ba8:	1c10      	adds	r0, r2, #0
   11baa:	4798      	blx	r3
   11bac:	0003      	movs	r3, r0
   11bae:	b2da      	uxtb	r2, r3
   11bb0:	4bd7      	ldr	r3, [pc, #860]	; (11f10 <main+0x16e0>)
   11bb2:	735a      	strb	r2, [r3, #13]
			// Throttle Based
			ble_write_buffer[14] = 0x35;
   11bb4:	4bd6      	ldr	r3, [pc, #856]	; (11f10 <main+0x16e0>)
   11bb6:	2235      	movs	r2, #53	; 0x35
   11bb8:	739a      	strb	r2, [r3, #14]
			ble_write_buffer[15] = (uint8_t)(RateSens[MODE_THROTTLE] * 100);
   11bba:	4bd6      	ldr	r3, [pc, #856]	; (11f14 <main+0x16e4>)
   11bbc:	68da      	ldr	r2, [r3, #12]
   11bbe:	4bd6      	ldr	r3, [pc, #856]	; (11f18 <main+0x16e8>)
   11bc0:	49d6      	ldr	r1, [pc, #856]	; (11f1c <main+0x16ec>)
   11bc2:	1c10      	adds	r0, r2, #0
   11bc4:	4798      	blx	r3
   11bc6:	1c03      	adds	r3, r0, #0
   11bc8:	1c1a      	adds	r2, r3, #0
   11bca:	4bd5      	ldr	r3, [pc, #852]	; (11f20 <main+0x16f0>)
   11bcc:	1c10      	adds	r0, r2, #0
   11bce:	4798      	blx	r3
   11bd0:	0003      	movs	r3, r0
   11bd2:	b2da      	uxtb	r2, r3
   11bd4:	4bce      	ldr	r3, [pc, #824]	; (11f10 <main+0x16e0>)
   11bd6:	73da      	strb	r2, [r3, #15]
			ble_write_buffer[16] = (uint8_t)(Brightness[MODE_THROTTLE] * 100);
   11bd8:	4bd2      	ldr	r3, [pc, #840]	; (11f24 <main+0x16f4>)
   11bda:	68da      	ldr	r2, [r3, #12]
   11bdc:	4bce      	ldr	r3, [pc, #824]	; (11f18 <main+0x16e8>)
   11bde:	49cf      	ldr	r1, [pc, #828]	; (11f1c <main+0x16ec>)
   11be0:	1c10      	adds	r0, r2, #0
   11be2:	4798      	blx	r3
   11be4:	1c03      	adds	r3, r0, #0
   11be6:	1c1a      	adds	r2, r3, #0
   11be8:	4bcd      	ldr	r3, [pc, #820]	; (11f20 <main+0x16f0>)
   11bea:	1c10      	adds	r0, r2, #0
   11bec:	4798      	blx	r3
   11bee:	0003      	movs	r3, r0
   11bf0:	b2da      	uxtb	r2, r3
   11bf2:	4bc7      	ldr	r3, [pc, #796]	; (11f10 <main+0x16e0>)
   11bf4:	741a      	strb	r2, [r3, #16]
			// RPM Based
			ble_write_buffer[17] = 0x36;
   11bf6:	4bc6      	ldr	r3, [pc, #792]	; (11f10 <main+0x16e0>)
   11bf8:	2236      	movs	r2, #54	; 0x36
   11bfa:	745a      	strb	r2, [r3, #17]
			ble_write_buffer[18] = (uint8_t)(RateSens[MODE_RPM_CYCLE] * 100);
   11bfc:	4bc5      	ldr	r3, [pc, #788]	; (11f14 <main+0x16e4>)
   11bfe:	691a      	ldr	r2, [r3, #16]
   11c00:	4bc5      	ldr	r3, [pc, #788]	; (11f18 <main+0x16e8>)
   11c02:	49c6      	ldr	r1, [pc, #792]	; (11f1c <main+0x16ec>)
   11c04:	1c10      	adds	r0, r2, #0
   11c06:	4798      	blx	r3
   11c08:	1c03      	adds	r3, r0, #0
   11c0a:	1c1a      	adds	r2, r3, #0
   11c0c:	4bc4      	ldr	r3, [pc, #784]	; (11f20 <main+0x16f0>)
   11c0e:	1c10      	adds	r0, r2, #0
   11c10:	4798      	blx	r3
   11c12:	0003      	movs	r3, r0
   11c14:	b2da      	uxtb	r2, r3
   11c16:	4bbe      	ldr	r3, [pc, #760]	; (11f10 <main+0x16e0>)
   11c18:	749a      	strb	r2, [r3, #18]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   11c1a:	49bd      	ldr	r1, [pc, #756]	; (11f10 <main+0x16e0>)
   11c1c:	4bc2      	ldr	r3, [pc, #776]	; (11f28 <main+0x16f8>)
   11c1e:	2213      	movs	r2, #19
   11c20:	0018      	movs	r0, r3
   11c22:	4bc2      	ldr	r3, [pc, #776]	; (11f2c <main+0x16fc>)
   11c24:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11c26:	46c0      	nop			; (mov r8, r8)
   11c28:	4bc1      	ldr	r3, [pc, #772]	; (11f30 <main+0x1700>)
   11c2a:	4798      	blx	r3
   11c2c:	0002      	movs	r2, r0
   11c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11c30:	1ad3      	subs	r3, r2, r3
   11c32:	221e      	movs	r2, #30
   11c34:	18ba      	adds	r2, r7, r2
   11c36:	8812      	ldrh	r2, [r2, #0]
   11c38:	0052      	lsls	r2, r2, #1
   11c3a:	4293      	cmp	r3, r2
   11c3c:	d3f4      	bcc.n	11c28 <main+0x13f8>
			BLE_TX_TIME = millis();
   11c3e:	4bbc      	ldr	r3, [pc, #752]	; (11f30 <main+0x1700>)
   11c40:	4798      	blx	r3
   11c42:	0003      	movs	r3, r0
   11c44:	62bb      	str	r3, [r7, #40]	; 0x28

			// X Accel Based
			ble_write_buffer[0] = 0x37;
   11c46:	4bb2      	ldr	r3, [pc, #712]	; (11f10 <main+0x16e0>)
   11c48:	2237      	movs	r2, #55	; 0x37
   11c4a:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RateSens[MODE_X_ACCEL] * 100);
   11c4c:	4bb1      	ldr	r3, [pc, #708]	; (11f14 <main+0x16e4>)
   11c4e:	699a      	ldr	r2, [r3, #24]
   11c50:	4bb1      	ldr	r3, [pc, #708]	; (11f18 <main+0x16e8>)
   11c52:	49b2      	ldr	r1, [pc, #712]	; (11f1c <main+0x16ec>)
   11c54:	1c10      	adds	r0, r2, #0
   11c56:	4798      	blx	r3
   11c58:	1c03      	adds	r3, r0, #0
   11c5a:	1c1a      	adds	r2, r3, #0
   11c5c:	4bb0      	ldr	r3, [pc, #704]	; (11f20 <main+0x16f0>)
   11c5e:	1c10      	adds	r0, r2, #0
   11c60:	4798      	blx	r3
   11c62:	0003      	movs	r3, r0
   11c64:	b2da      	uxtb	r2, r3
   11c66:	4baa      	ldr	r3, [pc, #680]	; (11f10 <main+0x16e0>)
   11c68:	705a      	strb	r2, [r3, #1]
			// Y Accel Based
			ble_write_buffer[2] = 0x38;
   11c6a:	4ba9      	ldr	r3, [pc, #676]	; (11f10 <main+0x16e0>)
   11c6c:	2238      	movs	r2, #56	; 0x38
   11c6e:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Brightness[MODE_Y_ACCEL] * 100);
   11c70:	4bac      	ldr	r3, [pc, #688]	; (11f24 <main+0x16f4>)
   11c72:	69da      	ldr	r2, [r3, #28]
   11c74:	4ba8      	ldr	r3, [pc, #672]	; (11f18 <main+0x16e8>)
   11c76:	49a9      	ldr	r1, [pc, #676]	; (11f1c <main+0x16ec>)
   11c78:	1c10      	adds	r0, r2, #0
   11c7a:	4798      	blx	r3
   11c7c:	1c03      	adds	r3, r0, #0
   11c7e:	1c1a      	adds	r2, r3, #0
   11c80:	4ba7      	ldr	r3, [pc, #668]	; (11f20 <main+0x16f0>)
   11c82:	1c10      	adds	r0, r2, #0
   11c84:	4798      	blx	r3
   11c86:	0003      	movs	r3, r0
   11c88:	b2da      	uxtb	r2, r3
   11c8a:	4ba1      	ldr	r3, [pc, #644]	; (11f10 <main+0x16e0>)
   11c8c:	70da      	strb	r2, [r3, #3]
			// Custom
			uint8_t color_bright_base = (ColorBase[MODE_CUSTOM] << 4) | BrightBase[MODE_CUSTOM];
   11c8e:	4ba9      	ldr	r3, [pc, #676]	; (11f34 <main+0x1704>)
   11c90:	7a1b      	ldrb	r3, [r3, #8]
   11c92:	011b      	lsls	r3, r3, #4
   11c94:	b25a      	sxtb	r2, r3
   11c96:	4ba8      	ldr	r3, [pc, #672]	; (11f38 <main+0x1708>)
   11c98:	7a1b      	ldrb	r3, [r3, #8]
   11c9a:	b25b      	sxtb	r3, r3
   11c9c:	4313      	orrs	r3, r2
   11c9e:	b25a      	sxtb	r2, r3
   11ca0:	231c      	movs	r3, #28
   11ca2:	18fb      	adds	r3, r7, r3
   11ca4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[4] = 0x39;
   11ca6:	4b9a      	ldr	r3, [pc, #616]	; (11f10 <main+0x16e0>)
   11ca8:	2239      	movs	r2, #57	; 0x39
   11caa:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = color_bright_base;
   11cac:	4b98      	ldr	r3, [pc, #608]	; (11f10 <main+0x16e0>)
   11cae:	221c      	movs	r2, #28
   11cb0:	18ba      	adds	r2, r7, r2
   11cb2:	7812      	ldrb	r2, [r2, #0]
   11cb4:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = RateBase[MODE_CUSTOM];
   11cb6:	4ba1      	ldr	r3, [pc, #644]	; (11f3c <main+0x170c>)
   11cb8:	7a1a      	ldrb	r2, [r3, #8]
   11cba:	4b95      	ldr	r3, [pc, #596]	; (11f10 <main+0x16e0>)
   11cbc:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Custom_RGB.LR / 655.35);
   11cbe:	4ba0      	ldr	r3, [pc, #640]	; (11f40 <main+0x1710>)
   11cc0:	881a      	ldrh	r2, [r3, #0]
   11cc2:	4ba0      	ldr	r3, [pc, #640]	; (11f44 <main+0x1714>)
   11cc4:	0010      	movs	r0, r2
   11cc6:	4798      	blx	r3
   11cc8:	1c02      	adds	r2, r0, #0
   11cca:	4b8c      	ldr	r3, [pc, #560]	; (11efc <main+0x16cc>)
   11ccc:	1c10      	adds	r0, r2, #0
   11cce:	4798      	blx	r3
   11cd0:	4c8b      	ldr	r4, [pc, #556]	; (11f00 <main+0x16d0>)
   11cd2:	4a8c      	ldr	r2, [pc, #560]	; (11f04 <main+0x16d4>)
   11cd4:	4b8c      	ldr	r3, [pc, #560]	; (11f08 <main+0x16d8>)
   11cd6:	47a0      	blx	r4
   11cd8:	0003      	movs	r3, r0
   11cda:	000c      	movs	r4, r1
   11cdc:	0019      	movs	r1, r3
   11cde:	0022      	movs	r2, r4
   11ce0:	4b8a      	ldr	r3, [pc, #552]	; (11f0c <main+0x16dc>)
   11ce2:	0008      	movs	r0, r1
   11ce4:	0011      	movs	r1, r2
   11ce6:	4798      	blx	r3
   11ce8:	0003      	movs	r3, r0
   11cea:	b2da      	uxtb	r2, r3
   11cec:	4b88      	ldr	r3, [pc, #544]	; (11f10 <main+0x16e0>)
   11cee:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Custom_RGB.LG / 655.35);
   11cf0:	4b93      	ldr	r3, [pc, #588]	; (11f40 <main+0x1710>)
   11cf2:	885a      	ldrh	r2, [r3, #2]
   11cf4:	4b93      	ldr	r3, [pc, #588]	; (11f44 <main+0x1714>)
   11cf6:	0010      	movs	r0, r2
   11cf8:	4798      	blx	r3
   11cfa:	1c02      	adds	r2, r0, #0
   11cfc:	4b7f      	ldr	r3, [pc, #508]	; (11efc <main+0x16cc>)
   11cfe:	1c10      	adds	r0, r2, #0
   11d00:	4798      	blx	r3
   11d02:	4c7f      	ldr	r4, [pc, #508]	; (11f00 <main+0x16d0>)
   11d04:	4a7f      	ldr	r2, [pc, #508]	; (11f04 <main+0x16d4>)
   11d06:	4b80      	ldr	r3, [pc, #512]	; (11f08 <main+0x16d8>)
   11d08:	47a0      	blx	r4
   11d0a:	0003      	movs	r3, r0
   11d0c:	000c      	movs	r4, r1
   11d0e:	0019      	movs	r1, r3
   11d10:	0022      	movs	r2, r4
   11d12:	4b7e      	ldr	r3, [pc, #504]	; (11f0c <main+0x16dc>)
   11d14:	0008      	movs	r0, r1
   11d16:	0011      	movs	r1, r2
   11d18:	4798      	blx	r3
   11d1a:	0003      	movs	r3, r0
   11d1c:	b2da      	uxtb	r2, r3
   11d1e:	4b7c      	ldr	r3, [pc, #496]	; (11f10 <main+0x16e0>)
   11d20:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)((float)Custom_RGB.LB / 655.35);
   11d22:	4b87      	ldr	r3, [pc, #540]	; (11f40 <main+0x1710>)
   11d24:	889a      	ldrh	r2, [r3, #4]
   11d26:	4b87      	ldr	r3, [pc, #540]	; (11f44 <main+0x1714>)
   11d28:	0010      	movs	r0, r2
   11d2a:	4798      	blx	r3
   11d2c:	1c02      	adds	r2, r0, #0
   11d2e:	4b73      	ldr	r3, [pc, #460]	; (11efc <main+0x16cc>)
   11d30:	1c10      	adds	r0, r2, #0
   11d32:	4798      	blx	r3
   11d34:	4c72      	ldr	r4, [pc, #456]	; (11f00 <main+0x16d0>)
   11d36:	4a73      	ldr	r2, [pc, #460]	; (11f04 <main+0x16d4>)
   11d38:	4b73      	ldr	r3, [pc, #460]	; (11f08 <main+0x16d8>)
   11d3a:	47a0      	blx	r4
   11d3c:	0003      	movs	r3, r0
   11d3e:	000c      	movs	r4, r1
   11d40:	0019      	movs	r1, r3
   11d42:	0022      	movs	r2, r4
   11d44:	4b71      	ldr	r3, [pc, #452]	; (11f0c <main+0x16dc>)
   11d46:	0008      	movs	r0, r1
   11d48:	0011      	movs	r1, r2
   11d4a:	4798      	blx	r3
   11d4c:	0003      	movs	r3, r0
   11d4e:	b2da      	uxtb	r2, r3
   11d50:	4b6f      	ldr	r3, [pc, #444]	; (11f10 <main+0x16e0>)
   11d52:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)((float)Custom_RGB.RR / 655.35);
   11d54:	4b7a      	ldr	r3, [pc, #488]	; (11f40 <main+0x1710>)
   11d56:	88da      	ldrh	r2, [r3, #6]
   11d58:	4b7a      	ldr	r3, [pc, #488]	; (11f44 <main+0x1714>)
   11d5a:	0010      	movs	r0, r2
   11d5c:	4798      	blx	r3
   11d5e:	1c02      	adds	r2, r0, #0
   11d60:	4b66      	ldr	r3, [pc, #408]	; (11efc <main+0x16cc>)
   11d62:	1c10      	adds	r0, r2, #0
   11d64:	4798      	blx	r3
   11d66:	4c66      	ldr	r4, [pc, #408]	; (11f00 <main+0x16d0>)
   11d68:	4a66      	ldr	r2, [pc, #408]	; (11f04 <main+0x16d4>)
   11d6a:	4b67      	ldr	r3, [pc, #412]	; (11f08 <main+0x16d8>)
   11d6c:	47a0      	blx	r4
   11d6e:	0003      	movs	r3, r0
   11d70:	000c      	movs	r4, r1
   11d72:	0019      	movs	r1, r3
   11d74:	0022      	movs	r2, r4
   11d76:	4b65      	ldr	r3, [pc, #404]	; (11f0c <main+0x16dc>)
   11d78:	0008      	movs	r0, r1
   11d7a:	0011      	movs	r1, r2
   11d7c:	4798      	blx	r3
   11d7e:	0003      	movs	r3, r0
   11d80:	b2da      	uxtb	r2, r3
   11d82:	4b63      	ldr	r3, [pc, #396]	; (11f10 <main+0x16e0>)
   11d84:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)((float)Custom_RGB.RG / 655.35);
   11d86:	4b6e      	ldr	r3, [pc, #440]	; (11f40 <main+0x1710>)
   11d88:	891a      	ldrh	r2, [r3, #8]
   11d8a:	4b6e      	ldr	r3, [pc, #440]	; (11f44 <main+0x1714>)
   11d8c:	0010      	movs	r0, r2
   11d8e:	4798      	blx	r3
   11d90:	1c02      	adds	r2, r0, #0
   11d92:	4b5a      	ldr	r3, [pc, #360]	; (11efc <main+0x16cc>)
   11d94:	1c10      	adds	r0, r2, #0
   11d96:	4798      	blx	r3
   11d98:	4c59      	ldr	r4, [pc, #356]	; (11f00 <main+0x16d0>)
   11d9a:	4a5a      	ldr	r2, [pc, #360]	; (11f04 <main+0x16d4>)
   11d9c:	4b5a      	ldr	r3, [pc, #360]	; (11f08 <main+0x16d8>)
   11d9e:	47a0      	blx	r4
   11da0:	0003      	movs	r3, r0
   11da2:	000c      	movs	r4, r1
   11da4:	0019      	movs	r1, r3
   11da6:	0022      	movs	r2, r4
   11da8:	4b58      	ldr	r3, [pc, #352]	; (11f0c <main+0x16dc>)
   11daa:	0008      	movs	r0, r1
   11dac:	0011      	movs	r1, r2
   11dae:	4798      	blx	r3
   11db0:	0003      	movs	r3, r0
   11db2:	b2da      	uxtb	r2, r3
   11db4:	4b56      	ldr	r3, [pc, #344]	; (11f10 <main+0x16e0>)
   11db6:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)((float)Custom_RGB.RB / 655.35);
   11db8:	4b61      	ldr	r3, [pc, #388]	; (11f40 <main+0x1710>)
   11dba:	895a      	ldrh	r2, [r3, #10]
   11dbc:	4b61      	ldr	r3, [pc, #388]	; (11f44 <main+0x1714>)
   11dbe:	0010      	movs	r0, r2
   11dc0:	4798      	blx	r3
   11dc2:	1c02      	adds	r2, r0, #0
   11dc4:	4b4d      	ldr	r3, [pc, #308]	; (11efc <main+0x16cc>)
   11dc6:	1c10      	adds	r0, r2, #0
   11dc8:	4798      	blx	r3
   11dca:	4c4d      	ldr	r4, [pc, #308]	; (11f00 <main+0x16d0>)
   11dcc:	4a4d      	ldr	r2, [pc, #308]	; (11f04 <main+0x16d4>)
   11dce:	4b4e      	ldr	r3, [pc, #312]	; (11f08 <main+0x16d8>)
   11dd0:	47a0      	blx	r4
   11dd2:	0003      	movs	r3, r0
   11dd4:	000c      	movs	r4, r1
   11dd6:	0019      	movs	r1, r3
   11dd8:	0022      	movs	r2, r4
   11dda:	4b4c      	ldr	r3, [pc, #304]	; (11f0c <main+0x16dc>)
   11ddc:	0008      	movs	r0, r1
   11dde:	0011      	movs	r1, r2
   11de0:	4798      	blx	r3
   11de2:	0003      	movs	r3, r0
   11de4:	b2da      	uxtb	r2, r3
   11de6:	4b4a      	ldr	r3, [pc, #296]	; (11f10 <main+0x16e0>)
   11de8:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(RateSens[MODE_CUSTOM] * 100);
   11dea:	4b4a      	ldr	r3, [pc, #296]	; (11f14 <main+0x16e4>)
   11dec:	6a1a      	ldr	r2, [r3, #32]
   11dee:	4b4a      	ldr	r3, [pc, #296]	; (11f18 <main+0x16e8>)
   11df0:	494a      	ldr	r1, [pc, #296]	; (11f1c <main+0x16ec>)
   11df2:	1c10      	adds	r0, r2, #0
   11df4:	4798      	blx	r3
   11df6:	1c03      	adds	r3, r0, #0
   11df8:	1c1a      	adds	r2, r3, #0
   11dfa:	4b49      	ldr	r3, [pc, #292]	; (11f20 <main+0x16f0>)
   11dfc:	1c10      	adds	r0, r2, #0
   11dfe:	4798      	blx	r3
   11e00:	0003      	movs	r3, r0
   11e02:	b2da      	uxtb	r2, r3
   11e04:	4b42      	ldr	r3, [pc, #264]	; (11f10 <main+0x16e0>)
   11e06:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_CUSTOM] * 100);
   11e08:	4b46      	ldr	r3, [pc, #280]	; (11f24 <main+0x16f4>)
   11e0a:	6a1a      	ldr	r2, [r3, #32]
   11e0c:	4b42      	ldr	r3, [pc, #264]	; (11f18 <main+0x16e8>)
   11e0e:	4943      	ldr	r1, [pc, #268]	; (11f1c <main+0x16ec>)
   11e10:	1c10      	adds	r0, r2, #0
   11e12:	4798      	blx	r3
   11e14:	1c03      	adds	r3, r0, #0
   11e16:	1c1a      	adds	r2, r3, #0
   11e18:	4b41      	ldr	r3, [pc, #260]	; (11f20 <main+0x16f0>)
   11e1a:	1c10      	adds	r0, r2, #0
   11e1c:	4798      	blx	r3
   11e1e:	0003      	movs	r3, r0
   11e20:	b2da      	uxtb	r2, r3
   11e22:	4b3b      	ldr	r3, [pc, #236]	; (11f10 <main+0x16e0>)
   11e24:	739a      	strb	r2, [r3, #14]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 15);
   11e26:	493a      	ldr	r1, [pc, #232]	; (11f10 <main+0x16e0>)
   11e28:	4b3f      	ldr	r3, [pc, #252]	; (11f28 <main+0x16f8>)
   11e2a:	220f      	movs	r2, #15
   11e2c:	0018      	movs	r0, r3
   11e2e:	4b3f      	ldr	r3, [pc, #252]	; (11f2c <main+0x16fc>)
   11e30:	4798      	blx	r3

			SEND_LED_CHARS = 0;
   11e32:	4b45      	ldr	r3, [pc, #276]	; (11f48 <main+0x1718>)
   11e34:	2200      	movs	r2, #0
   11e36:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11e38:	4b44      	ldr	r3, [pc, #272]	; (11f4c <main+0x171c>)
   11e3a:	2201      	movs	r2, #1
   11e3c:	701a      	strb	r2, [r3, #0]
		}
		

		//////////////////////////   Handle Orientation Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ORIENTAION_CONFIG)
   11e3e:	4b44      	ldr	r3, [pc, #272]	; (11f50 <main+0x1720>)
   11e40:	781b      	ldrb	r3, [r3, #0]
   11e42:	2b00      	cmp	r3, #0
   11e44:	d026      	beq.n	11e94 <main+0x1664>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11e46:	46c0      	nop			; (mov r8, r8)
   11e48:	4b39      	ldr	r3, [pc, #228]	; (11f30 <main+0x1700>)
   11e4a:	4798      	blx	r3
   11e4c:	0002      	movs	r2, r0
   11e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11e50:	1ad3      	subs	r3, r2, r3
   11e52:	221e      	movs	r2, #30
   11e54:	18ba      	adds	r2, r7, r2
   11e56:	8812      	ldrh	r2, [r2, #0]
   11e58:	0052      	lsls	r2, r2, #1
   11e5a:	4293      	cmp	r3, r2
   11e5c:	d3f4      	bcc.n	11e48 <main+0x1618>
			BLE_TX_TIME = millis();
   11e5e:	4b34      	ldr	r3, [pc, #208]	; (11f30 <main+0x1700>)
   11e60:	4798      	blx	r3
   11e62:	0003      	movs	r3, r0
   11e64:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x71;
   11e66:	4b2a      	ldr	r3, [pc, #168]	; (11f10 <main+0x16e0>)
   11e68:	2271      	movs	r2, #113	; 0x71
   11e6a:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ORIENTATION[0]; // Connectors Orientation
   11e6c:	4b39      	ldr	r3, [pc, #228]	; (11f54 <main+0x1724>)
   11e6e:	781a      	ldrb	r2, [r3, #0]
   11e70:	4b27      	ldr	r3, [pc, #156]	; (11f10 <main+0x16e0>)
   11e72:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ORIENTATION[1]; // Power Orientation
   11e74:	4b37      	ldr	r3, [pc, #220]	; (11f54 <main+0x1724>)
   11e76:	785a      	ldrb	r2, [r3, #1]
   11e78:	4b25      	ldr	r3, [pc, #148]	; (11f10 <main+0x16e0>)
   11e7a:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   11e7c:	4924      	ldr	r1, [pc, #144]	; (11f10 <main+0x16e0>)
   11e7e:	4b2a      	ldr	r3, [pc, #168]	; (11f28 <main+0x16f8>)
   11e80:	2203      	movs	r2, #3
   11e82:	0018      	movs	r0, r3
   11e84:	4b29      	ldr	r3, [pc, #164]	; (11f2c <main+0x16fc>)
   11e86:	4798      	blx	r3


			SEND_ORIENTAION_CONFIG = 0;
   11e88:	4b31      	ldr	r3, [pc, #196]	; (11f50 <main+0x1720>)
   11e8a:	2200      	movs	r2, #0
   11e8c:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11e8e:	4b2f      	ldr	r3, [pc, #188]	; (11f4c <main+0x171c>)
   11e90:	2201      	movs	r2, #1
   11e92:	701a      	strb	r2, [r3, #0]
		}


		///////////////////////////   Handle Controls Request   ///////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_CONTROLS_CONFIG)
   11e94:	4b30      	ldr	r3, [pc, #192]	; (11f58 <main+0x1728>)
   11e96:	781b      	ldrb	r3, [r3, #0]
   11e98:	2b00      	cmp	r3, #0
   11e9a:	d100      	bne.n	11e9e <main+0x166e>
   11e9c:	e0b8      	b.n	12010 <main+0x17e0>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11e9e:	46c0      	nop			; (mov r8, r8)
   11ea0:	4b23      	ldr	r3, [pc, #140]	; (11f30 <main+0x1700>)
   11ea2:	4798      	blx	r3
   11ea4:	0002      	movs	r2, r0
   11ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ea8:	1ad3      	subs	r3, r2, r3
   11eaa:	221e      	movs	r2, #30
   11eac:	18ba      	adds	r2, r7, r2
   11eae:	8812      	ldrh	r2, [r2, #0]
   11eb0:	0052      	lsls	r2, r2, #1
   11eb2:	4293      	cmp	r3, r2
   11eb4:	d3f4      	bcc.n	11ea0 <main+0x1670>
			BLE_TX_TIME = millis();
   11eb6:	4b1e      	ldr	r3, [pc, #120]	; (11f30 <main+0x1700>)
   11eb8:	4798      	blx	r3
   11eba:	0003      	movs	r3, r0
   11ebc:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x81;
   11ebe:	4b14      	ldr	r3, [pc, #80]	; (11f10 <main+0x16e0>)
   11ec0:	2281      	movs	r2, #129	; 0x81
   11ec2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((AUX_ENABLED << 7) | (TURN_ENABLED << 6) | auxControlType);
   11ec4:	4b25      	ldr	r3, [pc, #148]	; (11f5c <main+0x172c>)
   11ec6:	781b      	ldrb	r3, [r3, #0]
   11ec8:	01db      	lsls	r3, r3, #7
   11eca:	b25a      	sxtb	r2, r3
   11ecc:	4b24      	ldr	r3, [pc, #144]	; (11f60 <main+0x1730>)
   11ece:	781b      	ldrb	r3, [r3, #0]
   11ed0:	019b      	lsls	r3, r3, #6
   11ed2:	b25b      	sxtb	r3, r3
   11ed4:	4313      	orrs	r3, r2
   11ed6:	b25a      	sxtb	r2, r3
   11ed8:	4b22      	ldr	r3, [pc, #136]	; (11f64 <main+0x1734>)
   11eda:	781b      	ldrb	r3, [r3, #0]
   11edc:	b25b      	sxtb	r3, r3
   11ede:	4313      	orrs	r3, r2
   11ee0:	b25b      	sxtb	r3, r3
   11ee2:	b2da      	uxtb	r2, r3
   11ee4:	4b0a      	ldr	r3, [pc, #40]	; (11f10 <main+0x16e0>)
   11ee6:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)auxTimedDuration;
   11ee8:	4b1f      	ldr	r3, [pc, #124]	; (11f68 <main+0x1738>)
   11eea:	781a      	ldrb	r2, [r3, #0]
   11eec:	4b08      	ldr	r3, [pc, #32]	; (11f10 <main+0x16e0>)
   11eee:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((single_aux_control << 4) | single_all_control);
   11ef0:	4b1e      	ldr	r3, [pc, #120]	; (11f6c <main+0x173c>)
   11ef2:	781b      	ldrb	r3, [r3, #0]
   11ef4:	011b      	lsls	r3, r3, #4
   11ef6:	b25a      	sxtb	r2, r3
   11ef8:	e03a      	b.n	11f70 <main+0x1740>
   11efa:	46c0      	nop			; (mov r8, r8)
   11efc:	00016e95 	.word	0x00016e95
   11f00:	000159a5 	.word	0x000159a5
   11f04:	cccccccd 	.word	0xcccccccd
   11f08:	40847acc 	.word	0x40847acc
   11f0c:	00014561 	.word	0x00014561
   11f10:	20000928 	.word	0x20000928
   11f14:	20000028 	.word	0x20000028
   11f18:	00014ca1 	.word	0x00014ca1
   11f1c:	42c80000 	.word	0x42c80000
   11f20:	00014531 	.word	0x00014531
   11f24:	2000004c 	.word	0x2000004c
   11f28:	200004a0 	.word	0x200004a0
   11f2c:	000063bd 	.word	0x000063bd
   11f30:	0000b109 	.word	0x0000b109
   11f34:	20000070 	.word	0x20000070
   11f38:	2000007c 	.word	0x2000007c
   11f3c:	20000088 	.word	0x20000088
   11f40:	20000094 	.word	0x20000094
   11f44:	000152f9 	.word	0x000152f9
   11f48:	200003ac 	.word	0x200003ac
   11f4c:	200000b1 	.word	0x200000b1
   11f50:	200003b0 	.word	0x200003b0
   11f54:	20000004 	.word	0x20000004
   11f58:	200003b1 	.word	0x200003b1
   11f5c:	20000375 	.word	0x20000375
   11f60:	20000376 	.word	0x20000376
   11f64:	20000378 	.word	0x20000378
   11f68:	20000379 	.word	0x20000379
   11f6c:	2000037a 	.word	0x2000037a
   11f70:	4be1      	ldr	r3, [pc, #900]	; (122f8 <main+0x1ac8>)
   11f72:	781b      	ldrb	r3, [r3, #0]
   11f74:	b25b      	sxtb	r3, r3
   11f76:	4313      	orrs	r3, r2
   11f78:	b25b      	sxtb	r3, r3
   11f7a:	b2da      	uxtb	r2, r3
   11f7c:	4bdf      	ldr	r3, [pc, #892]	; (122fc <main+0x1acc>)
   11f7e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((single_head_control << 4) | single_side_control);
   11f80:	4bdf      	ldr	r3, [pc, #892]	; (12300 <main+0x1ad0>)
   11f82:	781b      	ldrb	r3, [r3, #0]
   11f84:	011b      	lsls	r3, r3, #4
   11f86:	b25a      	sxtb	r2, r3
   11f88:	4bde      	ldr	r3, [pc, #888]	; (12304 <main+0x1ad4>)
   11f8a:	781b      	ldrb	r3, [r3, #0]
   11f8c:	b25b      	sxtb	r3, r3
   11f8e:	4313      	orrs	r3, r2
   11f90:	b25b      	sxtb	r3, r3
   11f92:	b2da      	uxtb	r2, r3
   11f94:	4bd9      	ldr	r3, [pc, #868]	; (122fc <main+0x1acc>)
   11f96:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((single_down_control << 4) | single_up_control);
   11f98:	4bdb      	ldr	r3, [pc, #876]	; (12308 <main+0x1ad8>)
   11f9a:	781b      	ldrb	r3, [r3, #0]
   11f9c:	011b      	lsls	r3, r3, #4
   11f9e:	b25a      	sxtb	r2, r3
   11fa0:	4bda      	ldr	r3, [pc, #872]	; (1230c <main+0x1adc>)
   11fa2:	781b      	ldrb	r3, [r3, #0]
   11fa4:	b25b      	sxtb	r3, r3
   11fa6:	4313      	orrs	r3, r2
   11fa8:	b25b      	sxtb	r3, r3
   11faa:	b2da      	uxtb	r2, r3
   11fac:	4bd3      	ldr	r3, [pc, #844]	; (122fc <main+0x1acc>)
   11fae:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((dual_aux_control << 4) | dual_all_control);
   11fb0:	4bd7      	ldr	r3, [pc, #860]	; (12310 <main+0x1ae0>)
   11fb2:	781b      	ldrb	r3, [r3, #0]
   11fb4:	011b      	lsls	r3, r3, #4
   11fb6:	b25a      	sxtb	r2, r3
   11fb8:	4bd6      	ldr	r3, [pc, #856]	; (12314 <main+0x1ae4>)
   11fba:	781b      	ldrb	r3, [r3, #0]
   11fbc:	b25b      	sxtb	r3, r3
   11fbe:	4313      	orrs	r3, r2
   11fc0:	b25b      	sxtb	r3, r3
   11fc2:	b2da      	uxtb	r2, r3
   11fc4:	4bcd      	ldr	r3, [pc, #820]	; (122fc <main+0x1acc>)
   11fc6:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((dual_head_control << 4) | dual_side_control);
   11fc8:	4bd3      	ldr	r3, [pc, #844]	; (12318 <main+0x1ae8>)
   11fca:	781b      	ldrb	r3, [r3, #0]
   11fcc:	011b      	lsls	r3, r3, #4
   11fce:	b25a      	sxtb	r2, r3
   11fd0:	4bd2      	ldr	r3, [pc, #840]	; (1231c <main+0x1aec>)
   11fd2:	781b      	ldrb	r3, [r3, #0]
   11fd4:	b25b      	sxtb	r3, r3
   11fd6:	4313      	orrs	r3, r2
   11fd8:	b25b      	sxtb	r3, r3
   11fda:	b2da      	uxtb	r2, r3
   11fdc:	4bc7      	ldr	r3, [pc, #796]	; (122fc <main+0x1acc>)
   11fde:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((dual_down_control << 4) | dual_up_control);
   11fe0:	4bcf      	ldr	r3, [pc, #828]	; (12320 <main+0x1af0>)
   11fe2:	781b      	ldrb	r3, [r3, #0]
   11fe4:	011b      	lsls	r3, r3, #4
   11fe6:	b25a      	sxtb	r2, r3
   11fe8:	4bce      	ldr	r3, [pc, #824]	; (12324 <main+0x1af4>)
   11fea:	781b      	ldrb	r3, [r3, #0]
   11fec:	b25b      	sxtb	r3, r3
   11fee:	4313      	orrs	r3, r2
   11ff0:	b25b      	sxtb	r3, r3
   11ff2:	b2da      	uxtb	r2, r3
   11ff4:	4bc1      	ldr	r3, [pc, #772]	; (122fc <main+0x1acc>)
   11ff6:	721a      	strb	r2, [r3, #8]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 9);
   11ff8:	49c0      	ldr	r1, [pc, #768]	; (122fc <main+0x1acc>)
   11ffa:	4bcb      	ldr	r3, [pc, #812]	; (12328 <main+0x1af8>)
   11ffc:	2209      	movs	r2, #9
   11ffe:	0018      	movs	r0, r3
   12000:	4bca      	ldr	r3, [pc, #808]	; (1232c <main+0x1afc>)
   12002:	4798      	blx	r3

			SEND_CONTROLS_CONFIG = 0;
   12004:	4bca      	ldr	r3, [pc, #808]	; (12330 <main+0x1b00>)
   12006:	2200      	movs	r2, #0
   12008:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1200a:	4bca      	ldr	r3, [pc, #808]	; (12334 <main+0x1b04>)
   1200c:	2201      	movs	r2, #1
   1200e:	701a      	strb	r2, [r3, #0]
		}


		/////////////////////////   Handle Remote Config Request   ////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_REMOTE_CONFIG)
   12010:	4bc9      	ldr	r3, [pc, #804]	; (12338 <main+0x1b08>)
   12012:	781b      	ldrb	r3, [r3, #0]
   12014:	2b00      	cmp	r3, #0
   12016:	d02e      	beq.n	12076 <main+0x1846>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   12018:	46c0      	nop			; (mov r8, r8)
   1201a:	4bc8      	ldr	r3, [pc, #800]	; (1233c <main+0x1b0c>)
   1201c:	4798      	blx	r3
   1201e:	0002      	movs	r2, r0
   12020:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12022:	1ad3      	subs	r3, r2, r3
   12024:	221e      	movs	r2, #30
   12026:	18ba      	adds	r2, r7, r2
   12028:	8812      	ldrh	r2, [r2, #0]
   1202a:	0052      	lsls	r2, r2, #1
   1202c:	4293      	cmp	r3, r2
   1202e:	d3f4      	bcc.n	1201a <main+0x17ea>
			BLE_TX_TIME = millis();
   12030:	4bc2      	ldr	r3, [pc, #776]	; (1233c <main+0x1b0c>)
   12032:	4798      	blx	r3
   12034:	0003      	movs	r3, r0
   12036:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x72;
   12038:	4bb0      	ldr	r3, [pc, #704]	; (122fc <main+0x1acc>)
   1203a:	2272      	movs	r2, #114	; 0x72
   1203c:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((remote_type << 4) | button_type);
   1203e:	4bc0      	ldr	r3, [pc, #768]	; (12340 <main+0x1b10>)
   12040:	781b      	ldrb	r3, [r3, #0]
   12042:	011b      	lsls	r3, r3, #4
   12044:	b25a      	sxtb	r2, r3
   12046:	4bbf      	ldr	r3, [pc, #764]	; (12344 <main+0x1b14>)
   12048:	781b      	ldrb	r3, [r3, #0]
   1204a:	b25b      	sxtb	r3, r3
   1204c:	4313      	orrs	r3, r2
   1204e:	b25b      	sxtb	r3, r3
   12050:	b2da      	uxtb	r2, r3
   12052:	4baa      	ldr	r3, [pc, #680]	; (122fc <main+0x1acc>)
   12054:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   12056:	4bbc      	ldr	r3, [pc, #752]	; (12348 <main+0x1b18>)
   12058:	781a      	ldrb	r2, [r3, #0]
   1205a:	4ba8      	ldr	r3, [pc, #672]	; (122fc <main+0x1acc>)
   1205c:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   1205e:	49a7      	ldr	r1, [pc, #668]	; (122fc <main+0x1acc>)
   12060:	4bb1      	ldr	r3, [pc, #708]	; (12328 <main+0x1af8>)
   12062:	2203      	movs	r2, #3
   12064:	0018      	movs	r0, r3
   12066:	4bb1      	ldr	r3, [pc, #708]	; (1232c <main+0x1afc>)
   12068:	4798      	blx	r3

			SEND_REMOTE_CONFIG = 0;
   1206a:	4bb3      	ldr	r3, [pc, #716]	; (12338 <main+0x1b08>)
   1206c:	2200      	movs	r2, #0
   1206e:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   12070:	4bb0      	ldr	r3, [pc, #704]	; (12334 <main+0x1b04>)
   12072:	2201      	movs	r2, #1
   12074:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle ESC Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ESC_CONFIG)
   12076:	4bb5      	ldr	r3, [pc, #724]	; (1234c <main+0x1b1c>)
   12078:	781b      	ldrb	r3, [r3, #0]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d02e      	beq.n	120dc <main+0x18ac>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1207e:	46c0      	nop			; (mov r8, r8)
   12080:	4bae      	ldr	r3, [pc, #696]	; (1233c <main+0x1b0c>)
   12082:	4798      	blx	r3
   12084:	0002      	movs	r2, r0
   12086:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12088:	1ad3      	subs	r3, r2, r3
   1208a:	221e      	movs	r2, #30
   1208c:	18ba      	adds	r2, r7, r2
   1208e:	8812      	ldrh	r2, [r2, #0]
   12090:	0052      	lsls	r2, r2, #1
   12092:	4293      	cmp	r3, r2
   12094:	d3f4      	bcc.n	12080 <main+0x1850>
			BLE_TX_TIME = millis();
   12096:	4ba9      	ldr	r3, [pc, #676]	; (1233c <main+0x1b0c>)
   12098:	4798      	blx	r3
   1209a:	0003      	movs	r3, r0
   1209c:	62bb      	str	r3, [r7, #40]	; 0x28

			// Global LED Settings
			ble_write_buffer[0] = 0x73;
   1209e:	4b97      	ldr	r3, [pc, #604]	; (122fc <main+0x1acc>)
   120a0:	2273      	movs	r2, #115	; 0x73
   120a2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(esc_fw);
   120a4:	4baa      	ldr	r3, [pc, #680]	; (12350 <main+0x1b20>)
   120a6:	781a      	ldrb	r2, [r3, #0]
   120a8:	4b94      	ldr	r3, [pc, #592]	; (122fc <main+0x1acc>)
   120aa:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)((esc_comms << 4) | UART_baud);
   120ac:	4ba9      	ldr	r3, [pc, #676]	; (12354 <main+0x1b24>)
   120ae:	781b      	ldrb	r3, [r3, #0]
   120b0:	011b      	lsls	r3, r3, #4
   120b2:	b25a      	sxtb	r2, r3
   120b4:	4ba8      	ldr	r3, [pc, #672]	; (12358 <main+0x1b28>)
   120b6:	781b      	ldrb	r3, [r3, #0]
   120b8:	b25b      	sxtb	r3, r3
   120ba:	4313      	orrs	r3, r2
   120bc:	b25b      	sxtb	r3, r3
   120be:	b2da      	uxtb	r2, r3
   120c0:	4b8e      	ldr	r3, [pc, #568]	; (122fc <main+0x1acc>)
   120c2:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   120c4:	498d      	ldr	r1, [pc, #564]	; (122fc <main+0x1acc>)
   120c6:	4b98      	ldr	r3, [pc, #608]	; (12328 <main+0x1af8>)
   120c8:	2203      	movs	r2, #3
   120ca:	0018      	movs	r0, r3
   120cc:	4b97      	ldr	r3, [pc, #604]	; (1232c <main+0x1afc>)
   120ce:	4798      	blx	r3

			SEND_ESC_CONFIG = 0;
   120d0:	4b9e      	ldr	r3, [pc, #632]	; (1234c <main+0x1b1c>)
   120d2:	2200      	movs	r2, #0
   120d4:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   120d6:	4b97      	ldr	r3, [pc, #604]	; (12334 <main+0x1b04>)
   120d8:	2201      	movs	r2, #1
   120da:	701a      	strb	r2, [r3, #0]
		}
		

		////////////////////////////////   LED Controls   /////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleUserInput();
   120dc:	4b9f      	ldr	r3, [pc, #636]	; (1235c <main+0x1b2c>)
   120de:	4798      	blx	r3


		//////////////////////////////////   LED MODES   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(sensorControl() && LIGHTS_ON){
   120e0:	4b9f      	ldr	r3, [pc, #636]	; (12360 <main+0x1b30>)
   120e2:	4798      	blx	r3
   120e4:	1e03      	subs	r3, r0, #0
   120e6:	d101      	bne.n	120ec <main+0x18bc>
   120e8:	f001 fc20 	bl	1392c <main+0x30fc>
   120ec:	4b9d      	ldr	r3, [pc, #628]	; (12364 <main+0x1b34>)
   120ee:	781b      	ldrb	r3, [r3, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d101      	bne.n	120f8 <main+0x18c8>
   120f4:	f001 fc1a 	bl	1392c <main+0x30fc>
			if(SIDELIGHTS && lightControlSide()){
   120f8:	4b9b      	ldr	r3, [pc, #620]	; (12368 <main+0x1b38>)
   120fa:	781b      	ldrb	r3, [r3, #0]
   120fc:	2b00      	cmp	r3, #0
   120fe:	d101      	bne.n	12104 <main+0x18d4>
   12100:	f001 fbab 	bl	1385a <main+0x302a>
   12104:	4b99      	ldr	r3, [pc, #612]	; (1236c <main+0x1b3c>)
   12106:	4798      	blx	r3
   12108:	1e03      	subs	r3, r0, #0
   1210a:	d101      	bne.n	12110 <main+0x18e0>
   1210c:	f001 fba5 	bl	1385a <main+0x302a>
			// brightness is a value from 0 to 1
			static float output_brightness = 0;

			// Variable for controlling the rate or sensitivity in applicable modes
			// brightness is a value from 0 to 1
			float output_rate_sens = 0;
   12110:	2300      	movs	r3, #0
   12112:	627b      	str	r3, [r7, #36]	; 0x24

			switch(RateBase[light_mode]){ // Set the value to be used for rate or sensitivity in the side LED algorithm
   12114:	4b96      	ldr	r3, [pc, #600]	; (12370 <main+0x1b40>)
   12116:	781b      	ldrb	r3, [r3, #0]
   12118:	001a      	movs	r2, r3
   1211a:	4b96      	ldr	r3, [pc, #600]	; (12374 <main+0x1b44>)
   1211c:	5c9b      	ldrb	r3, [r3, r2]
   1211e:	2b07      	cmp	r3, #7
   12120:	d900      	bls.n	12124 <main+0x18f4>
   12122:	e0c0      	b.n	122a6 <main+0x1a76>
   12124:	009a      	lsls	r2, r3, #2
   12126:	4b94      	ldr	r3, [pc, #592]	; (12378 <main+0x1b48>)
   12128:	18d3      	adds	r3, r2, r3
   1212a:	681b      	ldr	r3, [r3, #0]
   1212c:	469f      	mov	pc, r3
				case RATE_STATIC:
				{
					output_rate_sens = RateSens[light_mode];
   1212e:	4b90      	ldr	r3, [pc, #576]	; (12370 <main+0x1b40>)
   12130:	781b      	ldrb	r3, [r3, #0]
   12132:	001a      	movs	r2, r3
   12134:	4b91      	ldr	r3, [pc, #580]	; (1237c <main+0x1b4c>)
   12136:	0092      	lsls	r2, r2, #2
   12138:	58d3      	ldr	r3, [r2, r3]
   1213a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   1213c:	e0b3      	b.n	122a6 <main+0x1a76>
				}
				case RATE_YAW_RATE:
				{
					if(gzKalman < 0)
   1213e:	4b90      	ldr	r3, [pc, #576]	; (12380 <main+0x1b50>)
   12140:	681a      	ldr	r2, [r3, #0]
   12142:	4b90      	ldr	r3, [pc, #576]	; (12384 <main+0x1b54>)
   12144:	2100      	movs	r1, #0
   12146:	1c10      	adds	r0, r2, #0
   12148:	4798      	blx	r3
   1214a:	1e03      	subs	r3, r0, #0
   1214c:	d009      	beq.n	12162 <main+0x1932>
						output_rate_sens = gzKalman/kalmanGZ_min;
   1214e:	4b8c      	ldr	r3, [pc, #560]	; (12380 <main+0x1b50>)
   12150:	681a      	ldr	r2, [r3, #0]
   12152:	4b8d      	ldr	r3, [pc, #564]	; (12388 <main+0x1b58>)
   12154:	6819      	ldr	r1, [r3, #0]
   12156:	4b8d      	ldr	r3, [pc, #564]	; (1238c <main+0x1b5c>)
   12158:	1c10      	adds	r0, r2, #0
   1215a:	4798      	blx	r3
   1215c:	1c03      	adds	r3, r0, #0
   1215e:	627b      	str	r3, [r7, #36]	; 0x24
					else
						output_rate_sens = gzKalman/kalmanGZ_max;
					break;
   12160:	e0a1      	b.n	122a6 <main+0x1a76>
						output_rate_sens = gzKalman/kalmanGZ_max;
   12162:	4b87      	ldr	r3, [pc, #540]	; (12380 <main+0x1b50>)
   12164:	681a      	ldr	r2, [r3, #0]
   12166:	4b8a      	ldr	r3, [pc, #552]	; (12390 <main+0x1b60>)
   12168:	6819      	ldr	r1, [r3, #0]
   1216a:	4b88      	ldr	r3, [pc, #544]	; (1238c <main+0x1b5c>)
   1216c:	1c10      	adds	r0, r2, #0
   1216e:	4798      	blx	r3
   12170:	1c03      	adds	r3, r0, #0
   12172:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   12174:	e097      	b.n	122a6 <main+0x1a76>
				}
				case RATE_ROLL_RATE:
				{
					if(gyKalman < 0)
   12176:	4b87      	ldr	r3, [pc, #540]	; (12394 <main+0x1b64>)
   12178:	681a      	ldr	r2, [r3, #0]
   1217a:	4b82      	ldr	r3, [pc, #520]	; (12384 <main+0x1b54>)
   1217c:	2100      	movs	r1, #0
   1217e:	1c10      	adds	r0, r2, #0
   12180:	4798      	blx	r3
   12182:	1e03      	subs	r3, r0, #0
   12184:	d009      	beq.n	1219a <main+0x196a>
						output_rate_sens = gyKalman/kalmanGY_min;
   12186:	4b83      	ldr	r3, [pc, #524]	; (12394 <main+0x1b64>)
   12188:	681a      	ldr	r2, [r3, #0]
   1218a:	4b83      	ldr	r3, [pc, #524]	; (12398 <main+0x1b68>)
   1218c:	6819      	ldr	r1, [r3, #0]
   1218e:	4b7f      	ldr	r3, [pc, #508]	; (1238c <main+0x1b5c>)
   12190:	1c10      	adds	r0, r2, #0
   12192:	4798      	blx	r3
   12194:	1c03      	adds	r3, r0, #0
   12196:	627b      	str	r3, [r7, #36]	; 0x24
					else
						output_rate_sens = gyKalman/kalmanGY_max;
					break;
   12198:	e085      	b.n	122a6 <main+0x1a76>
						output_rate_sens = gyKalman/kalmanGY_max;
   1219a:	4b7e      	ldr	r3, [pc, #504]	; (12394 <main+0x1b64>)
   1219c:	681a      	ldr	r2, [r3, #0]
   1219e:	4b7f      	ldr	r3, [pc, #508]	; (1239c <main+0x1b6c>)
   121a0:	6819      	ldr	r1, [r3, #0]
   121a2:	4b7a      	ldr	r3, [pc, #488]	; (1238c <main+0x1b5c>)
   121a4:	1c10      	adds	r0, r2, #0
   121a6:	4798      	blx	r3
   121a8:	1c03      	adds	r3, r0, #0
   121aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   121ac:	e07b      	b.n	122a6 <main+0x1a76>
				}
				case RATE_RPM:
				{
					output_rate_sens = (((float)latest_vesc_vals.rpm)/mcconf_limits.max_erpm);
   121ae:	4b7c      	ldr	r3, [pc, #496]	; (123a0 <main+0x1b70>)
   121b0:	691a      	ldr	r2, [r3, #16]
   121b2:	4b7c      	ldr	r3, [pc, #496]	; (123a4 <main+0x1b74>)
   121b4:	0010      	movs	r0, r2
   121b6:	4798      	blx	r3
   121b8:	1c04      	adds	r4, r0, #0
   121ba:	4b7b      	ldr	r3, [pc, #492]	; (123a8 <main+0x1b78>)
   121bc:	699a      	ldr	r2, [r3, #24]
   121be:	4b79      	ldr	r3, [pc, #484]	; (123a4 <main+0x1b74>)
   121c0:	0010      	movs	r0, r2
   121c2:	4798      	blx	r3
   121c4:	1c02      	adds	r2, r0, #0
   121c6:	4b71      	ldr	r3, [pc, #452]	; (1238c <main+0x1b5c>)
   121c8:	1c11      	adds	r1, r2, #0
   121ca:	1c20      	adds	r0, r4, #0
   121cc:	4798      	blx	r3
   121ce:	1c03      	adds	r3, r0, #0
   121d0:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   121d2:	e068      	b.n	122a6 <main+0x1a76>
				}
				case RATE_THROTTLE:
				{
					output_rate_sens = remote_y/255.0;
   121d4:	4b75      	ldr	r3, [pc, #468]	; (123ac <main+0x1b7c>)
   121d6:	781b      	ldrb	r3, [r3, #0]
   121d8:	001a      	movs	r2, r3
   121da:	4b75      	ldr	r3, [pc, #468]	; (123b0 <main+0x1b80>)
   121dc:	0010      	movs	r0, r2
   121de:	4798      	blx	r3
   121e0:	4c74      	ldr	r4, [pc, #464]	; (123b4 <main+0x1b84>)
   121e2:	2200      	movs	r2, #0
   121e4:	4b74      	ldr	r3, [pc, #464]	; (123b8 <main+0x1b88>)
   121e6:	47a0      	blx	r4
   121e8:	0003      	movs	r3, r0
   121ea:	000c      	movs	r4, r1
   121ec:	0019      	movs	r1, r3
   121ee:	0022      	movs	r2, r4
   121f0:	4b72      	ldr	r3, [pc, #456]	; (123bc <main+0x1b8c>)
   121f2:	0008      	movs	r0, r1
   121f4:	0011      	movs	r1, r2
   121f6:	4798      	blx	r3
   121f8:	1c03      	adds	r3, r0, #0
   121fa:	627b      	str	r3, [r7, #36]	; 0x24
				}
				break;
   121fc:	e053      	b.n	122a6 <main+0x1a76>
				case RATE_X_ACCEL:
				{
					if(axKalman < 0)
   121fe:	4b70      	ldr	r3, [pc, #448]	; (123c0 <main+0x1b90>)
   12200:	681a      	ldr	r2, [r3, #0]
   12202:	4b60      	ldr	r3, [pc, #384]	; (12384 <main+0x1b54>)
   12204:	2100      	movs	r1, #0
   12206:	1c10      	adds	r0, r2, #0
   12208:	4798      	blx	r3
   1220a:	1e03      	subs	r3, r0, #0
   1220c:	d009      	beq.n	12222 <main+0x19f2>
						output_rate_sens = axKalman/kalmanAX_min;
   1220e:	4b6c      	ldr	r3, [pc, #432]	; (123c0 <main+0x1b90>)
   12210:	681a      	ldr	r2, [r3, #0]
   12212:	4b6c      	ldr	r3, [pc, #432]	; (123c4 <main+0x1b94>)
   12214:	6819      	ldr	r1, [r3, #0]
   12216:	4b5d      	ldr	r3, [pc, #372]	; (1238c <main+0x1b5c>)
   12218:	1c10      	adds	r0, r2, #0
   1221a:	4798      	blx	r3
   1221c:	1c03      	adds	r3, r0, #0
   1221e:	627b      	str	r3, [r7, #36]	; 0x24
					else
						output_rate_sens = axKalman/kalmanAX_max;
					break;
   12220:	e041      	b.n	122a6 <main+0x1a76>
						output_rate_sens = axKalman/kalmanAX_max;
   12222:	4b67      	ldr	r3, [pc, #412]	; (123c0 <main+0x1b90>)
   12224:	681a      	ldr	r2, [r3, #0]
   12226:	4b68      	ldr	r3, [pc, #416]	; (123c8 <main+0x1b98>)
   12228:	6819      	ldr	r1, [r3, #0]
   1222a:	4b58      	ldr	r3, [pc, #352]	; (1238c <main+0x1b5c>)
   1222c:	1c10      	adds	r0, r2, #0
   1222e:	4798      	blx	r3
   12230:	1c03      	adds	r3, r0, #0
   12232:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   12234:	e037      	b.n	122a6 <main+0x1a76>
				}
				case RATE_Y_ACCEL:
				{
					if(ayKalman < 0)
   12236:	4b65      	ldr	r3, [pc, #404]	; (123cc <main+0x1b9c>)
   12238:	681a      	ldr	r2, [r3, #0]
   1223a:	4b52      	ldr	r3, [pc, #328]	; (12384 <main+0x1b54>)
   1223c:	2100      	movs	r1, #0
   1223e:	1c10      	adds	r0, r2, #0
   12240:	4798      	blx	r3
   12242:	1e03      	subs	r3, r0, #0
   12244:	d009      	beq.n	1225a <main+0x1a2a>
						output_rate_sens = ayKalman/kalmanAY_min;
   12246:	4b61      	ldr	r3, [pc, #388]	; (123cc <main+0x1b9c>)
   12248:	681a      	ldr	r2, [r3, #0]
   1224a:	4b61      	ldr	r3, [pc, #388]	; (123d0 <main+0x1ba0>)
   1224c:	6819      	ldr	r1, [r3, #0]
   1224e:	4b4f      	ldr	r3, [pc, #316]	; (1238c <main+0x1b5c>)
   12250:	1c10      	adds	r0, r2, #0
   12252:	4798      	blx	r3
   12254:	1c03      	adds	r3, r0, #0
   12256:	627b      	str	r3, [r7, #36]	; 0x24
					else
						output_rate_sens = ayKalman/kalmanAY_max;
					break;
   12258:	e025      	b.n	122a6 <main+0x1a76>
						output_rate_sens = ayKalman/kalmanAY_max;
   1225a:	4b5c      	ldr	r3, [pc, #368]	; (123cc <main+0x1b9c>)
   1225c:	681a      	ldr	r2, [r3, #0]
   1225e:	4b5d      	ldr	r3, [pc, #372]	; (123d4 <main+0x1ba4>)
   12260:	6819      	ldr	r1, [r3, #0]
   12262:	4b4a      	ldr	r3, [pc, #296]	; (1238c <main+0x1b5c>)
   12264:	1c10      	adds	r0, r2, #0
   12266:	4798      	blx	r3
   12268:	1c03      	adds	r3, r0, #0
   1226a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   1226c:	e01b      	b.n	122a6 <main+0x1a76>
				}
				case RATE_Z_ACCEL:
				{
					if(azKalman < 0)
   1226e:	4b5a      	ldr	r3, [pc, #360]	; (123d8 <main+0x1ba8>)
   12270:	681a      	ldr	r2, [r3, #0]
   12272:	4b44      	ldr	r3, [pc, #272]	; (12384 <main+0x1b54>)
   12274:	2100      	movs	r1, #0
   12276:	1c10      	adds	r0, r2, #0
   12278:	4798      	blx	r3
   1227a:	1e03      	subs	r3, r0, #0
   1227c:	d009      	beq.n	12292 <main+0x1a62>
						output_rate_sens = azKalman/kalmanAZ_min;
   1227e:	4b56      	ldr	r3, [pc, #344]	; (123d8 <main+0x1ba8>)
   12280:	681a      	ldr	r2, [r3, #0]
   12282:	4b56      	ldr	r3, [pc, #344]	; (123dc <main+0x1bac>)
   12284:	6819      	ldr	r1, [r3, #0]
   12286:	4b41      	ldr	r3, [pc, #260]	; (1238c <main+0x1b5c>)
   12288:	1c10      	adds	r0, r2, #0
   1228a:	4798      	blx	r3
   1228c:	1c03      	adds	r3, r0, #0
   1228e:	627b      	str	r3, [r7, #36]	; 0x24
					else
						output_rate_sens = azKalman/kalmanAZ_max;
					break;
   12290:	e008      	b.n	122a4 <main+0x1a74>
						output_rate_sens = azKalman/kalmanAZ_max;
   12292:	4b51      	ldr	r3, [pc, #324]	; (123d8 <main+0x1ba8>)
   12294:	681a      	ldr	r2, [r3, #0]
   12296:	4b52      	ldr	r3, [pc, #328]	; (123e0 <main+0x1bb0>)
   12298:	6819      	ldr	r1, [r3, #0]
   1229a:	4b3c      	ldr	r3, [pc, #240]	; (1238c <main+0x1b5c>)
   1229c:	1c10      	adds	r0, r2, #0
   1229e:	4798      	blx	r3
   122a0:	1c03      	adds	r3, r0, #0
   122a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
   122a4:	46c0      	nop			; (mov r8, r8)
				}
			}
	
			if(output_rate_sens < 0)
   122a6:	4b37      	ldr	r3, [pc, #220]	; (12384 <main+0x1b54>)
   122a8:	2100      	movs	r1, #0
   122aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   122ac:	4798      	blx	r3
   122ae:	1e03      	subs	r3, r0, #0
   122b0:	d002      	beq.n	122b8 <main+0x1a88>
				output_rate_sens = 0;
   122b2:	2300      	movs	r3, #0
   122b4:	627b      	str	r3, [r7, #36]	; 0x24
   122b6:	e009      	b.n	122cc <main+0x1a9c>
			else if(output_rate_sens > 1)
   122b8:	4b4a      	ldr	r3, [pc, #296]	; (123e4 <main+0x1bb4>)
   122ba:	21fe      	movs	r1, #254	; 0xfe
   122bc:	0589      	lsls	r1, r1, #22
   122be:	6a78      	ldr	r0, [r7, #36]	; 0x24
   122c0:	4798      	blx	r3
   122c2:	1e03      	subs	r3, r0, #0
   122c4:	d002      	beq.n	122cc <main+0x1a9c>
				output_rate_sens = 1;
   122c6:	23fe      	movs	r3, #254	; 0xfe
   122c8:	059b      	lsls	r3, r3, #22
   122ca:	627b      	str	r3, [r7, #36]	; 0x24

			switch(BrightBase[light_mode]){ // Set the Brightness of the side LEDs
   122cc:	4b28      	ldr	r3, [pc, #160]	; (12370 <main+0x1b40>)
   122ce:	781b      	ldrb	r3, [r3, #0]
   122d0:	001a      	movs	r2, r3
   122d2:	4b45      	ldr	r3, [pc, #276]	; (123e8 <main+0x1bb8>)
   122d4:	5c9b      	ldrb	r3, [r3, r2]
   122d6:	2b08      	cmp	r3, #8
   122d8:	d900      	bls.n	122dc <main+0x1aac>
   122da:	e1a6      	b.n	1262a <main+0x1dfa>
   122dc:	009a      	lsls	r2, r3, #2
   122de:	4b43      	ldr	r3, [pc, #268]	; (123ec <main+0x1bbc>)
   122e0:	18d3      	adds	r3, r2, r3
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	469f      	mov	pc, r3
				case BRIGHT_STATIC:
				{
					output_brightness = Brightness[light_mode];
   122e6:	4b22      	ldr	r3, [pc, #136]	; (12370 <main+0x1b40>)
   122e8:	781b      	ldrb	r3, [r3, #0]
   122ea:	001a      	movs	r2, r3
   122ec:	4b40      	ldr	r3, [pc, #256]	; (123f0 <main+0x1bc0>)
   122ee:	0092      	lsls	r2, r2, #2
   122f0:	58d2      	ldr	r2, [r2, r3]
   122f2:	4b40      	ldr	r3, [pc, #256]	; (123f4 <main+0x1bc4>)
   122f4:	601a      	str	r2, [r3, #0]
					break;
   122f6:	e198      	b.n	1262a <main+0x1dfa>
   122f8:	2000037b 	.word	0x2000037b
   122fc:	20000928 	.word	0x20000928
   12300:	2000037c 	.word	0x2000037c
   12304:	2000037d 	.word	0x2000037d
   12308:	2000037f 	.word	0x2000037f
   1230c:	2000037e 	.word	0x2000037e
   12310:	20000380 	.word	0x20000380
   12314:	20000381 	.word	0x20000381
   12318:	20000382 	.word	0x20000382
   1231c:	20000383 	.word	0x20000383
   12320:	20000385 	.word	0x20000385
   12324:	20000384 	.word	0x20000384
   12328:	200004a0 	.word	0x200004a0
   1232c:	000063bd 	.word	0x000063bd
   12330:	200003b1 	.word	0x200003b1
   12334:	200000b1 	.word	0x200000b1
   12338:	200003b2 	.word	0x200003b2
   1233c:	0000b109 	.word	0x0000b109
   12340:	20000308 	.word	0x20000308
   12344:	20000309 	.word	0x20000309
   12348:	20000018 	.word	0x20000018
   1234c:	200003b3 	.word	0x200003b3
   12350:	2000001a 	.word	0x2000001a
   12354:	20000310 	.word	0x20000310
   12358:	20000311 	.word	0x20000311
   1235c:	0000dc81 	.word	0x0000dc81
   12360:	00013b3d 	.word	0x00013b3d
   12364:	200000a3 	.word	0x200000a3
   12368:	200000a2 	.word	0x200000a2
   1236c:	00013d05 	.word	0x00013d05
   12370:	2000001b 	.word	0x2000001b
   12374:	20000088 	.word	0x20000088
   12378:	00017868 	.word	0x00017868
   1237c:	20000028 	.word	0x20000028
   12380:	200003e4 	.word	0x200003e4
   12384:	0001448d 	.word	0x0001448d
   12388:	200000dc 	.word	0x200000dc
   1238c:	000148c1 	.word	0x000148c1
   12390:	200000e0 	.word	0x200000e0
   12394:	200003e0 	.word	0x200003e0
   12398:	200000d4 	.word	0x200000d4
   1239c:	200000d8 	.word	0x200000d8
   123a0:	20000958 	.word	0x20000958
   123a4:	00015259 	.word	0x00015259
   123a8:	20000fd4 	.word	0x20000fd4
   123ac:	2000030a 	.word	0x2000030a
   123b0:	00016da1 	.word	0x00016da1
   123b4:	000159a5 	.word	0x000159a5
   123b8:	406fe000 	.word	0x406fe000
   123bc:	00016f39 	.word	0x00016f39
   123c0:	200003d0 	.word	0x200003d0
   123c4:	200000b4 	.word	0x200000b4
   123c8:	200000b8 	.word	0x200000b8
   123cc:	200003d4 	.word	0x200003d4
   123d0:	200000bc 	.word	0x200000bc
   123d4:	200000c0 	.word	0x200000c0
   123d8:	200003d8 	.word	0x200003d8
   123dc:	200000c4 	.word	0x200000c4
   123e0:	200000c8 	.word	0x200000c8
   123e4:	000144b5 	.word	0x000144b5
   123e8:	2000007c 	.word	0x2000007c
   123ec:	00017888 	.word	0x00017888
   123f0:	2000004c 	.word	0x2000004c
   123f4:	200003ec 	.word	0x200003ec
				}
				case BRIGHT_YAW_RATE:
				{
					if(gzKalman < 0)
   123f8:	4be1      	ldr	r3, [pc, #900]	; (12780 <main+0x1f50>)
   123fa:	681a      	ldr	r2, [r3, #0]
   123fc:	4be1      	ldr	r3, [pc, #900]	; (12784 <main+0x1f54>)
   123fe:	2100      	movs	r1, #0
   12400:	1c10      	adds	r0, r2, #0
   12402:	4798      	blx	r3
   12404:	1e03      	subs	r3, r0, #0
   12406:	d00b      	beq.n	12420 <main+0x1bf0>
						output_brightness = gzKalman/kalmanGZ_min;
   12408:	4bdd      	ldr	r3, [pc, #884]	; (12780 <main+0x1f50>)
   1240a:	681a      	ldr	r2, [r3, #0]
   1240c:	4bde      	ldr	r3, [pc, #888]	; (12788 <main+0x1f58>)
   1240e:	6819      	ldr	r1, [r3, #0]
   12410:	4bde      	ldr	r3, [pc, #888]	; (1278c <main+0x1f5c>)
   12412:	1c10      	adds	r0, r2, #0
   12414:	4798      	blx	r3
   12416:	1c03      	adds	r3, r0, #0
   12418:	1c1a      	adds	r2, r3, #0
   1241a:	4bdd      	ldr	r3, [pc, #884]	; (12790 <main+0x1f60>)
   1241c:	601a      	str	r2, [r3, #0]
					else
						output_brightness = gzKalman/kalmanGZ_max;
					break;
   1241e:	e104      	b.n	1262a <main+0x1dfa>
						output_brightness = gzKalman/kalmanGZ_max;
   12420:	4bd7      	ldr	r3, [pc, #860]	; (12780 <main+0x1f50>)
   12422:	681a      	ldr	r2, [r3, #0]
   12424:	4bdb      	ldr	r3, [pc, #876]	; (12794 <main+0x1f64>)
   12426:	6819      	ldr	r1, [r3, #0]
   12428:	4bd8      	ldr	r3, [pc, #864]	; (1278c <main+0x1f5c>)
   1242a:	1c10      	adds	r0, r2, #0
   1242c:	4798      	blx	r3
   1242e:	1c03      	adds	r3, r0, #0
   12430:	1c1a      	adds	r2, r3, #0
   12432:	4bd7      	ldr	r3, [pc, #860]	; (12790 <main+0x1f60>)
   12434:	601a      	str	r2, [r3, #0]
					break;
   12436:	e0f8      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_ROLL_RATE:
				{
					if(gyKalman < 0)
   12438:	4bd7      	ldr	r3, [pc, #860]	; (12798 <main+0x1f68>)
   1243a:	681a      	ldr	r2, [r3, #0]
   1243c:	4bd1      	ldr	r3, [pc, #836]	; (12784 <main+0x1f54>)
   1243e:	2100      	movs	r1, #0
   12440:	1c10      	adds	r0, r2, #0
   12442:	4798      	blx	r3
   12444:	1e03      	subs	r3, r0, #0
   12446:	d00b      	beq.n	12460 <main+0x1c30>
						output_brightness = gyKalman/kalmanGY_min;
   12448:	4bd3      	ldr	r3, [pc, #844]	; (12798 <main+0x1f68>)
   1244a:	681a      	ldr	r2, [r3, #0]
   1244c:	4bd3      	ldr	r3, [pc, #844]	; (1279c <main+0x1f6c>)
   1244e:	6819      	ldr	r1, [r3, #0]
   12450:	4bce      	ldr	r3, [pc, #824]	; (1278c <main+0x1f5c>)
   12452:	1c10      	adds	r0, r2, #0
   12454:	4798      	blx	r3
   12456:	1c03      	adds	r3, r0, #0
   12458:	1c1a      	adds	r2, r3, #0
   1245a:	4bcd      	ldr	r3, [pc, #820]	; (12790 <main+0x1f60>)
   1245c:	601a      	str	r2, [r3, #0]
					else
						output_brightness = gyKalman/kalmanGY_max;
					break;
   1245e:	e0e4      	b.n	1262a <main+0x1dfa>
						output_brightness = gyKalman/kalmanGY_max;
   12460:	4bcd      	ldr	r3, [pc, #820]	; (12798 <main+0x1f68>)
   12462:	681a      	ldr	r2, [r3, #0]
   12464:	4bce      	ldr	r3, [pc, #824]	; (127a0 <main+0x1f70>)
   12466:	6819      	ldr	r1, [r3, #0]
   12468:	4bc8      	ldr	r3, [pc, #800]	; (1278c <main+0x1f5c>)
   1246a:	1c10      	adds	r0, r2, #0
   1246c:	4798      	blx	r3
   1246e:	1c03      	adds	r3, r0, #0
   12470:	1c1a      	adds	r2, r3, #0
   12472:	4bc7      	ldr	r3, [pc, #796]	; (12790 <main+0x1f60>)
   12474:	601a      	str	r2, [r3, #0]
					break;
   12476:	e0d8      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_RPM:
				{
					if(latest_vesc_vals.rpm != 0)
   12478:	4bca      	ldr	r3, [pc, #808]	; (127a4 <main+0x1f74>)
   1247a:	691b      	ldr	r3, [r3, #16]
   1247c:	2b00      	cmp	r3, #0
   1247e:	d017      	beq.n	124b0 <main+0x1c80>
						output_brightness = ((float)abs(latest_vesc_vals.rpm))/(float)mcconf_limits.max_erpm;
   12480:	4bc8      	ldr	r3, [pc, #800]	; (127a4 <main+0x1f74>)
   12482:	691b      	ldr	r3, [r3, #16]
   12484:	17d9      	asrs	r1, r3, #31
   12486:	185a      	adds	r2, r3, r1
   12488:	404a      	eors	r2, r1
   1248a:	4bc7      	ldr	r3, [pc, #796]	; (127a8 <main+0x1f78>)
   1248c:	0010      	movs	r0, r2
   1248e:	4798      	blx	r3
   12490:	1c04      	adds	r4, r0, #0
   12492:	4bc6      	ldr	r3, [pc, #792]	; (127ac <main+0x1f7c>)
   12494:	699a      	ldr	r2, [r3, #24]
   12496:	4bc4      	ldr	r3, [pc, #784]	; (127a8 <main+0x1f78>)
   12498:	0010      	movs	r0, r2
   1249a:	4798      	blx	r3
   1249c:	1c02      	adds	r2, r0, #0
   1249e:	4bbb      	ldr	r3, [pc, #748]	; (1278c <main+0x1f5c>)
   124a0:	1c11      	adds	r1, r2, #0
   124a2:	1c20      	adds	r0, r4, #0
   124a4:	4798      	blx	r3
   124a6:	1c03      	adds	r3, r0, #0
   124a8:	1c1a      	adds	r2, r3, #0
   124aa:	4bb9      	ldr	r3, [pc, #740]	; (12790 <main+0x1f60>)
   124ac:	601a      	str	r2, [r3, #0]
					else
						output_brightness = 0;
					break;
   124ae:	e0bc      	b.n	1262a <main+0x1dfa>
						output_brightness = 0;
   124b0:	4bb7      	ldr	r3, [pc, #732]	; (12790 <main+0x1f60>)
   124b2:	2200      	movs	r2, #0
   124b4:	601a      	str	r2, [r3, #0]
					break;
   124b6:	e0b8      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_THROTTLE:
				{
					output_brightness = remote_y/255.0;
   124b8:	4bbd      	ldr	r3, [pc, #756]	; (127b0 <main+0x1f80>)
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	001a      	movs	r2, r3
   124be:	4bbd      	ldr	r3, [pc, #756]	; (127b4 <main+0x1f84>)
   124c0:	0010      	movs	r0, r2
   124c2:	4798      	blx	r3
   124c4:	4cbc      	ldr	r4, [pc, #752]	; (127b8 <main+0x1f88>)
   124c6:	2200      	movs	r2, #0
   124c8:	4bbc      	ldr	r3, [pc, #752]	; (127bc <main+0x1f8c>)
   124ca:	47a0      	blx	r4
   124cc:	0003      	movs	r3, r0
   124ce:	000c      	movs	r4, r1
   124d0:	0019      	movs	r1, r3
   124d2:	0022      	movs	r2, r4
   124d4:	4bba      	ldr	r3, [pc, #744]	; (127c0 <main+0x1f90>)
   124d6:	0008      	movs	r0, r1
   124d8:	0011      	movs	r1, r2
   124da:	4798      	blx	r3
   124dc:	1c02      	adds	r2, r0, #0
   124de:	4bac      	ldr	r3, [pc, #688]	; (12790 <main+0x1f60>)
   124e0:	601a      	str	r2, [r3, #0]
					break;
   124e2:	e0a2      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_X_ACCEL:
				{
					if(axKalman < 0){
   124e4:	4bb7      	ldr	r3, [pc, #732]	; (127c4 <main+0x1f94>)
   124e6:	681a      	ldr	r2, [r3, #0]
   124e8:	4ba6      	ldr	r3, [pc, #664]	; (12784 <main+0x1f54>)
   124ea:	2100      	movs	r1, #0
   124ec:	1c10      	adds	r0, r2, #0
   124ee:	4798      	blx	r3
   124f0:	1e03      	subs	r3, r0, #0
   124f2:	d00e      	beq.n	12512 <main+0x1ce2>
						output_brightness = axKalman/kalmanAX_min;
   124f4:	4bb3      	ldr	r3, [pc, #716]	; (127c4 <main+0x1f94>)
   124f6:	681a      	ldr	r2, [r3, #0]
   124f8:	4bb3      	ldr	r3, [pc, #716]	; (127c8 <main+0x1f98>)
   124fa:	6819      	ldr	r1, [r3, #0]
   124fc:	4ba3      	ldr	r3, [pc, #652]	; (1278c <main+0x1f5c>)
   124fe:	1c10      	adds	r0, r2, #0
   12500:	4798      	blx	r3
   12502:	1c03      	adds	r3, r0, #0
   12504:	1c1a      	adds	r2, r3, #0
   12506:	4ba2      	ldr	r3, [pc, #648]	; (12790 <main+0x1f60>)
   12508:	601a      	str	r2, [r3, #0]
						SUPRESS_RIGHT_RGB = true;
   1250a:	4bb0      	ldr	r3, [pc, #704]	; (127cc <main+0x1f9c>)
   1250c:	2201      	movs	r2, #1
   1250e:	701a      	strb	r2, [r3, #0]
					} else{
						output_brightness = axKalman/kalmanAX_max;
						SUPRESS_LEFT_RGB = true;
					}
					break;
   12510:	e08b      	b.n	1262a <main+0x1dfa>
						output_brightness = axKalman/kalmanAX_max;
   12512:	4bac      	ldr	r3, [pc, #688]	; (127c4 <main+0x1f94>)
   12514:	681a      	ldr	r2, [r3, #0]
   12516:	4bae      	ldr	r3, [pc, #696]	; (127d0 <main+0x1fa0>)
   12518:	6819      	ldr	r1, [r3, #0]
   1251a:	4b9c      	ldr	r3, [pc, #624]	; (1278c <main+0x1f5c>)
   1251c:	1c10      	adds	r0, r2, #0
   1251e:	4798      	blx	r3
   12520:	1c03      	adds	r3, r0, #0
   12522:	1c1a      	adds	r2, r3, #0
   12524:	4b9a      	ldr	r3, [pc, #616]	; (12790 <main+0x1f60>)
   12526:	601a      	str	r2, [r3, #0]
						SUPRESS_LEFT_RGB = true;
   12528:	4baa      	ldr	r3, [pc, #680]	; (127d4 <main+0x1fa4>)
   1252a:	2201      	movs	r2, #1
   1252c:	701a      	strb	r2, [r3, #0]
					break;
   1252e:	e07c      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_Y_ACCEL:
				{
					if(ayKalman < 0)
   12530:	4ba9      	ldr	r3, [pc, #676]	; (127d8 <main+0x1fa8>)
   12532:	681a      	ldr	r2, [r3, #0]
   12534:	4b93      	ldr	r3, [pc, #588]	; (12784 <main+0x1f54>)
   12536:	2100      	movs	r1, #0
   12538:	1c10      	adds	r0, r2, #0
   1253a:	4798      	blx	r3
   1253c:	1e03      	subs	r3, r0, #0
   1253e:	d00b      	beq.n	12558 <main+0x1d28>
						output_brightness = ayKalman/kalmanAY_min;
   12540:	4ba5      	ldr	r3, [pc, #660]	; (127d8 <main+0x1fa8>)
   12542:	681a      	ldr	r2, [r3, #0]
   12544:	4ba5      	ldr	r3, [pc, #660]	; (127dc <main+0x1fac>)
   12546:	6819      	ldr	r1, [r3, #0]
   12548:	4b90      	ldr	r3, [pc, #576]	; (1278c <main+0x1f5c>)
   1254a:	1c10      	adds	r0, r2, #0
   1254c:	4798      	blx	r3
   1254e:	1c03      	adds	r3, r0, #0
   12550:	1c1a      	adds	r2, r3, #0
   12552:	4b8f      	ldr	r3, [pc, #572]	; (12790 <main+0x1f60>)
   12554:	601a      	str	r2, [r3, #0]
					else
						output_brightness = ayKalman/kalmanAY_max;
					break;
   12556:	e068      	b.n	1262a <main+0x1dfa>
						output_brightness = ayKalman/kalmanAY_max;
   12558:	4b9f      	ldr	r3, [pc, #636]	; (127d8 <main+0x1fa8>)
   1255a:	681a      	ldr	r2, [r3, #0]
   1255c:	4ba0      	ldr	r3, [pc, #640]	; (127e0 <main+0x1fb0>)
   1255e:	6819      	ldr	r1, [r3, #0]
   12560:	4b8a      	ldr	r3, [pc, #552]	; (1278c <main+0x1f5c>)
   12562:	1c10      	adds	r0, r2, #0
   12564:	4798      	blx	r3
   12566:	1c03      	adds	r3, r0, #0
   12568:	1c1a      	adds	r2, r3, #0
   1256a:	4b89      	ldr	r3, [pc, #548]	; (12790 <main+0x1f60>)
   1256c:	601a      	str	r2, [r3, #0]
					break;
   1256e:	e05c      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_Z_ACCEL:
				{
					if(azKalman < 0)
   12570:	4b9c      	ldr	r3, [pc, #624]	; (127e4 <main+0x1fb4>)
   12572:	681a      	ldr	r2, [r3, #0]
   12574:	4b83      	ldr	r3, [pc, #524]	; (12784 <main+0x1f54>)
   12576:	2100      	movs	r1, #0
   12578:	1c10      	adds	r0, r2, #0
   1257a:	4798      	blx	r3
   1257c:	1e03      	subs	r3, r0, #0
   1257e:	d00b      	beq.n	12598 <main+0x1d68>
						output_brightness = azKalman/kalmanAZ_min;
   12580:	4b98      	ldr	r3, [pc, #608]	; (127e4 <main+0x1fb4>)
   12582:	681a      	ldr	r2, [r3, #0]
   12584:	4b98      	ldr	r3, [pc, #608]	; (127e8 <main+0x1fb8>)
   12586:	6819      	ldr	r1, [r3, #0]
   12588:	4b80      	ldr	r3, [pc, #512]	; (1278c <main+0x1f5c>)
   1258a:	1c10      	adds	r0, r2, #0
   1258c:	4798      	blx	r3
   1258e:	1c03      	adds	r3, r0, #0
   12590:	1c1a      	adds	r2, r3, #0
   12592:	4b7f      	ldr	r3, [pc, #508]	; (12790 <main+0x1f60>)
   12594:	601a      	str	r2, [r3, #0]
					else
						output_brightness = azKalman/kalmanAZ_max;
						break;
   12596:	e048      	b.n	1262a <main+0x1dfa>
						output_brightness = azKalman/kalmanAZ_max;
   12598:	4b92      	ldr	r3, [pc, #584]	; (127e4 <main+0x1fb4>)
   1259a:	681a      	ldr	r2, [r3, #0]
   1259c:	4b93      	ldr	r3, [pc, #588]	; (127ec <main+0x1fbc>)
   1259e:	6819      	ldr	r1, [r3, #0]
   125a0:	4b7a      	ldr	r3, [pc, #488]	; (1278c <main+0x1f5c>)
   125a2:	1c10      	adds	r0, r2, #0
   125a4:	4798      	blx	r3
   125a6:	1c03      	adds	r3, r0, #0
   125a8:	1c1a      	adds	r2, r3, #0
   125aa:	4b79      	ldr	r3, [pc, #484]	; (12790 <main+0x1f60>)
   125ac:	601a      	str	r2, [r3, #0]
						break;
   125ae:	e03c      	b.n	1262a <main+0x1dfa>
				}
				case BRIGHT_STROBE:
				{
					check_time(&strobe_time);
   125b0:	4b8f      	ldr	r3, [pc, #572]	; (127f0 <main+0x1fc0>)
   125b2:	0018      	movs	r0, r3
   125b4:	4b8f      	ldr	r3, [pc, #572]	; (127f4 <main+0x1fc4>)
   125b6:	4798      	blx	r3
					if(output_brightness == 0.0 && (millis()-strobe_time > strobe_off_dur)){
   125b8:	4b75      	ldr	r3, [pc, #468]	; (12790 <main+0x1f60>)
   125ba:	681a      	ldr	r2, [r3, #0]
   125bc:	4b8e      	ldr	r3, [pc, #568]	; (127f8 <main+0x1fc8>)
   125be:	2100      	movs	r1, #0
   125c0:	1c10      	adds	r0, r2, #0
   125c2:	4798      	blx	r3
   125c4:	1e03      	subs	r3, r0, #0
   125c6:	d013      	beq.n	125f0 <main+0x1dc0>
   125c8:	4b8c      	ldr	r3, [pc, #560]	; (127fc <main+0x1fcc>)
   125ca:	4798      	blx	r3
   125cc:	0002      	movs	r2, r0
   125ce:	4b88      	ldr	r3, [pc, #544]	; (127f0 <main+0x1fc0>)
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	1ad3      	subs	r3, r2, r3
   125d4:	4a8a      	ldr	r2, [pc, #552]	; (12800 <main+0x1fd0>)
   125d6:	8812      	ldrh	r2, [r2, #0]
   125d8:	4293      	cmp	r3, r2
   125da:	d909      	bls.n	125f0 <main+0x1dc0>
						output_brightness = 1.0;
   125dc:	4b6c      	ldr	r3, [pc, #432]	; (12790 <main+0x1f60>)
   125de:	22fe      	movs	r2, #254	; 0xfe
   125e0:	0592      	lsls	r2, r2, #22
   125e2:	601a      	str	r2, [r3, #0]
						strobe_time = millis();
   125e4:	4b85      	ldr	r3, [pc, #532]	; (127fc <main+0x1fcc>)
   125e6:	4798      	blx	r3
   125e8:	0002      	movs	r2, r0
   125ea:	4b81      	ldr	r3, [pc, #516]	; (127f0 <main+0x1fc0>)
   125ec:	601a      	str	r2, [r3, #0]
					}
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
						output_brightness = 0.0;
						strobe_time = millis();
					}
					break;
   125ee:	e01b      	b.n	12628 <main+0x1df8>
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
   125f0:	4b67      	ldr	r3, [pc, #412]	; (12790 <main+0x1f60>)
   125f2:	681a      	ldr	r2, [r3, #0]
   125f4:	4b80      	ldr	r3, [pc, #512]	; (127f8 <main+0x1fc8>)
   125f6:	21fe      	movs	r1, #254	; 0xfe
   125f8:	0589      	lsls	r1, r1, #22
   125fa:	1c10      	adds	r0, r2, #0
   125fc:	4798      	blx	r3
   125fe:	1e03      	subs	r3, r0, #0
   12600:	d100      	bne.n	12604 <main+0x1dd4>
					break;
   12602:	e011      	b.n	12628 <main+0x1df8>
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
   12604:	4b7d      	ldr	r3, [pc, #500]	; (127fc <main+0x1fcc>)
   12606:	4798      	blx	r3
   12608:	0002      	movs	r2, r0
   1260a:	4b79      	ldr	r3, [pc, #484]	; (127f0 <main+0x1fc0>)
   1260c:	681b      	ldr	r3, [r3, #0]
   1260e:	1ad3      	subs	r3, r2, r3
   12610:	4a7c      	ldr	r2, [pc, #496]	; (12804 <main+0x1fd4>)
   12612:	8812      	ldrh	r2, [r2, #0]
   12614:	4293      	cmp	r3, r2
   12616:	d907      	bls.n	12628 <main+0x1df8>
						output_brightness = 0.0;
   12618:	4b5d      	ldr	r3, [pc, #372]	; (12790 <main+0x1f60>)
   1261a:	2200      	movs	r2, #0
   1261c:	601a      	str	r2, [r3, #0]
						strobe_time = millis();
   1261e:	4b77      	ldr	r3, [pc, #476]	; (127fc <main+0x1fcc>)
   12620:	4798      	blx	r3
   12622:	0002      	movs	r2, r0
   12624:	4b72      	ldr	r3, [pc, #456]	; (127f0 <main+0x1fc0>)
   12626:	601a      	str	r2, [r3, #0]
					break;
   12628:	46c0      	nop			; (mov r8, r8)
				}
			}
		
			if(output_brightness < 0)
   1262a:	4b59      	ldr	r3, [pc, #356]	; (12790 <main+0x1f60>)
   1262c:	681a      	ldr	r2, [r3, #0]
   1262e:	4b55      	ldr	r3, [pc, #340]	; (12784 <main+0x1f54>)
   12630:	2100      	movs	r1, #0
   12632:	1c10      	adds	r0, r2, #0
   12634:	4798      	blx	r3
   12636:	1e03      	subs	r3, r0, #0
   12638:	d003      	beq.n	12642 <main+0x1e12>
				output_brightness = 0;
   1263a:	4b55      	ldr	r3, [pc, #340]	; (12790 <main+0x1f60>)
   1263c:	2200      	movs	r2, #0
   1263e:	601a      	str	r2, [r3, #0]
   12640:	e00c      	b.n	1265c <main+0x1e2c>
			else if(output_brightness > 1)
   12642:	4b53      	ldr	r3, [pc, #332]	; (12790 <main+0x1f60>)
   12644:	681a      	ldr	r2, [r3, #0]
   12646:	4b70      	ldr	r3, [pc, #448]	; (12808 <main+0x1fd8>)
   12648:	21fe      	movs	r1, #254	; 0xfe
   1264a:	0589      	lsls	r1, r1, #22
   1264c:	1c10      	adds	r0, r2, #0
   1264e:	4798      	blx	r3
   12650:	1e03      	subs	r3, r0, #0
   12652:	d003      	beq.n	1265c <main+0x1e2c>
				output_brightness = 1;
   12654:	4b4e      	ldr	r3, [pc, #312]	; (12790 <main+0x1f60>)
   12656:	22fe      	movs	r2, #254	; 0xfe
   12658:	0592      	lsls	r2, r2, #22
   1265a:	601a      	str	r2, [r3, #0]

			switch(ColorBase[light_mode]){ // Set the color of the side LEDs
   1265c:	4b6b      	ldr	r3, [pc, #428]	; (1280c <main+0x1fdc>)
   1265e:	781b      	ldrb	r3, [r3, #0]
   12660:	001a      	movs	r2, r3
   12662:	4b6b      	ldr	r3, [pc, #428]	; (12810 <main+0x1fe0>)
   12664:	5c9b      	ldrb	r3, [r3, r2]
   12666:	2b0a      	cmp	r3, #10
   12668:	d901      	bls.n	1266e <main+0x1e3e>
   1266a:	f001 f8c3 	bl	137f4 <main+0x2fc4>
   1266e:	009a      	lsls	r2, r3, #2
   12670:	4b68      	ldr	r3, [pc, #416]	; (12814 <main+0x1fe4>)
   12672:	18d3      	adds	r3, r2, r3
   12674:	681b      	ldr	r3, [r3, #0]
   12676:	469f      	mov	pc, r3
				case COLOR_STATIC:
				{
					if(light_mode == MODE_STATIC)
   12678:	4b64      	ldr	r3, [pc, #400]	; (1280c <main+0x1fdc>)
   1267a:	781b      	ldrb	r3, [r3, #0]
   1267c:	2b00      	cmp	r3, #0
   1267e:	d105      	bne.n	1268c <main+0x1e5c>
						RGB_Ouptut = Static_RGB;
   12680:	4b65      	ldr	r3, [pc, #404]	; (12818 <main+0x1fe8>)
   12682:	4a66      	ldr	r2, [pc, #408]	; (1281c <main+0x1fec>)
   12684:	ca13      	ldmia	r2!, {r0, r1, r4}
   12686:	c313      	stmia	r3!, {r0, r1, r4}
					else if(light_mode == MODE_CUSTOM)
						RGB_Ouptut = Custom_RGB;
					break;
   12688:	f001 f8b1 	bl	137ee <main+0x2fbe>
					else if(light_mode == MODE_CUSTOM)
   1268c:	4b5f      	ldr	r3, [pc, #380]	; (1280c <main+0x1fdc>)
   1268e:	781b      	ldrb	r3, [r3, #0]
   12690:	2b08      	cmp	r3, #8
   12692:	d001      	beq.n	12698 <main+0x1e68>
   12694:	f001 f8ab 	bl	137ee <main+0x2fbe>
						RGB_Ouptut = Custom_RGB;
   12698:	4b5f      	ldr	r3, [pc, #380]	; (12818 <main+0x1fe8>)
   1269a:	4a61      	ldr	r2, [pc, #388]	; (12820 <main+0x1ff0>)
   1269c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1269e:	c313      	stmia	r3!, {r0, r1, r4}
					break;
   126a0:	f001 f8a5 	bl	137ee <main+0x2fbe>
				}
				case COLOR_COLOR_CYCLE:
				{
					upColor = cycle_index * output_brightness;
   126a4:	4b5f      	ldr	r3, [pc, #380]	; (12824 <main+0x1ff4>)
   126a6:	681a      	ldr	r2, [r3, #0]
   126a8:	4b5f      	ldr	r3, [pc, #380]	; (12828 <main+0x1ff8>)
   126aa:	0010      	movs	r0, r2
   126ac:	4798      	blx	r3
   126ae:	4b38      	ldr	r3, [pc, #224]	; (12790 <main+0x1f60>)
   126b0:	681a      	ldr	r2, [r3, #0]
   126b2:	4b5e      	ldr	r3, [pc, #376]	; (1282c <main+0x1ffc>)
   126b4:	1c11      	adds	r1, r2, #0
   126b6:	4798      	blx	r3
   126b8:	1c03      	adds	r3, r0, #0
   126ba:	1c1a      	adds	r2, r3, #0
   126bc:	4b5c      	ldr	r3, [pc, #368]	; (12830 <main+0x2000>)
   126be:	1c10      	adds	r0, r2, #0
   126c0:	4798      	blx	r3
   126c2:	0003      	movs	r3, r0
   126c4:	b29a      	uxth	r2, r3
   126c6:	4b5b      	ldr	r3, [pc, #364]	; (12834 <main+0x2004>)
   126c8:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   126ca:	4b56      	ldr	r3, [pc, #344]	; (12824 <main+0x1ff4>)
   126cc:	681b      	ldr	r3, [r3, #0]
   126ce:	4a5a      	ldr	r2, [pc, #360]	; (12838 <main+0x2008>)
   126d0:	1ad2      	subs	r2, r2, r3
   126d2:	4b55      	ldr	r3, [pc, #340]	; (12828 <main+0x1ff8>)
   126d4:	0010      	movs	r0, r2
   126d6:	4798      	blx	r3
   126d8:	4b2d      	ldr	r3, [pc, #180]	; (12790 <main+0x1f60>)
   126da:	681a      	ldr	r2, [r3, #0]
   126dc:	4b53      	ldr	r3, [pc, #332]	; (1282c <main+0x1ffc>)
   126de:	1c11      	adds	r1, r2, #0
   126e0:	4798      	blx	r3
   126e2:	1c03      	adds	r3, r0, #0
   126e4:	1c1a      	adds	r2, r3, #0
   126e6:	4b52      	ldr	r3, [pc, #328]	; (12830 <main+0x2000>)
   126e8:	1c10      	adds	r0, r2, #0
   126ea:	4798      	blx	r3
   126ec:	0003      	movs	r3, r0
   126ee:	b29a      	uxth	r2, r3
   126f0:	4b52      	ldr	r3, [pc, #328]	; (1283c <main+0x200c>)
   126f2:	801a      	strh	r2, [r3, #0]
					
					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   126f4:	4b4f      	ldr	r3, [pc, #316]	; (12834 <main+0x2004>)
   126f6:	8819      	ldrh	r1, [r3, #0]
   126f8:	4b50      	ldr	r3, [pc, #320]	; (1283c <main+0x200c>)
   126fa:	881a      	ldrh	r2, [r3, #0]
   126fc:	4b50      	ldr	r3, [pc, #320]	; (12840 <main+0x2010>)
   126fe:	781b      	ldrb	r3, [r3, #0]
   12700:	4d45      	ldr	r5, [pc, #276]	; (12818 <main+0x1fe8>)
   12702:	0038      	movs	r0, r7
   12704:	4c4f      	ldr	r4, [pc, #316]	; (12844 <main+0x2014>)
   12706:	47a0      	blx	r4
   12708:	003b      	movs	r3, r7
   1270a:	0028      	movs	r0, r5
   1270c:	0019      	movs	r1, r3
   1270e:	230c      	movs	r3, #12
   12710:	001a      	movs	r2, r3
   12712:	4b4d      	ldr	r3, [pc, #308]	; (12848 <main+0x2018>)
   12714:	4798      	blx	r3

					cycle_index += output_rate_sens*max_cycle_rate;
   12716:	4b43      	ldr	r3, [pc, #268]	; (12824 <main+0x1ff4>)
   12718:	681a      	ldr	r2, [r3, #0]
   1271a:	4b43      	ldr	r3, [pc, #268]	; (12828 <main+0x1ff8>)
   1271c:	0010      	movs	r0, r2
   1271e:	4798      	blx	r3
   12720:	1c04      	adds	r4, r0, #0
   12722:	4b4a      	ldr	r3, [pc, #296]	; (1284c <main+0x201c>)
   12724:	681a      	ldr	r2, [r3, #0]
   12726:	4b41      	ldr	r3, [pc, #260]	; (1282c <main+0x1ffc>)
   12728:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1272a:	1c10      	adds	r0, r2, #0
   1272c:	4798      	blx	r3
   1272e:	1c03      	adds	r3, r0, #0
   12730:	1c1a      	adds	r2, r3, #0
   12732:	4b47      	ldr	r3, [pc, #284]	; (12850 <main+0x2020>)
   12734:	1c11      	adds	r1, r2, #0
   12736:	1c20      	adds	r0, r4, #0
   12738:	4798      	blx	r3
   1273a:	1c03      	adds	r3, r0, #0
   1273c:	1c1a      	adds	r2, r3, #0
   1273e:	4b3c      	ldr	r3, [pc, #240]	; (12830 <main+0x2000>)
   12740:	1c10      	adds	r0, r2, #0
   12742:	4798      	blx	r3
   12744:	0002      	movs	r2, r0
   12746:	4b37      	ldr	r3, [pc, #220]	; (12824 <main+0x1ff4>)
   12748:	601a      	str	r2, [r3, #0]
					if(cycle_index >= 0x0FFFF){
   1274a:	4b36      	ldr	r3, [pc, #216]	; (12824 <main+0x1ff4>)
   1274c:	681b      	ldr	r3, [r3, #0]
   1274e:	4a41      	ldr	r2, [pc, #260]	; (12854 <main+0x2024>)
   12750:	4293      	cmp	r3, r2
   12752:	d801      	bhi.n	12758 <main+0x1f28>
   12754:	f001 f84d 	bl	137f2 <main+0x2fc2>
						cycle_index = 0;
   12758:	4b32      	ldr	r3, [pc, #200]	; (12824 <main+0x1ff4>)
   1275a:	2200      	movs	r2, #0
   1275c:	601a      	str	r2, [r3, #0]
						cycle += 1;
   1275e:	4b38      	ldr	r3, [pc, #224]	; (12840 <main+0x2010>)
   12760:	781b      	ldrb	r3, [r3, #0]
   12762:	3301      	adds	r3, #1
   12764:	b2da      	uxtb	r2, r3
   12766:	4b36      	ldr	r3, [pc, #216]	; (12840 <main+0x2010>)
   12768:	701a      	strb	r2, [r3, #0]
						if(cycle == 3)
   1276a:	4b35      	ldr	r3, [pc, #212]	; (12840 <main+0x2010>)
   1276c:	781b      	ldrb	r3, [r3, #0]
   1276e:	2b03      	cmp	r3, #3
   12770:	d001      	beq.n	12776 <main+0x1f46>
   12772:	f001 f83e 	bl	137f2 <main+0x2fc2>
						cycle = 0;
   12776:	4b32      	ldr	r3, [pc, #200]	; (12840 <main+0x2010>)
   12778:	2200      	movs	r2, #0
   1277a:	701a      	strb	r2, [r3, #0]
					}
					break;
   1277c:	f001 f839 	bl	137f2 <main+0x2fc2>
   12780:	200003e4 	.word	0x200003e4
   12784:	0001448d 	.word	0x0001448d
   12788:	200000dc 	.word	0x200000dc
   1278c:	000148c1 	.word	0x000148c1
   12790:	200003ec 	.word	0x200003ec
   12794:	200000e0 	.word	0x200000e0
   12798:	200003e0 	.word	0x200003e0
   1279c:	200000d4 	.word	0x200000d4
   127a0:	200000d8 	.word	0x200000d8
   127a4:	20000958 	.word	0x20000958
   127a8:	00015259 	.word	0x00015259
   127ac:	20000fd4 	.word	0x20000fd4
   127b0:	2000030a 	.word	0x2000030a
   127b4:	00016da1 	.word	0x00016da1
   127b8:	000159a5 	.word	0x000159a5
   127bc:	406fe000 	.word	0x406fe000
   127c0:	00016f39 	.word	0x00016f39
   127c4:	200003d0 	.word	0x200003d0
   127c8:	200000b4 	.word	0x200000b4
   127cc:	20000321 	.word	0x20000321
   127d0:	200000b8 	.word	0x200000b8
   127d4:	20000320 	.word	0x20000320
   127d8:	200003d4 	.word	0x200003d4
   127dc:	200000bc 	.word	0x200000bc
   127e0:	200000c0 	.word	0x200000c0
   127e4:	200003d8 	.word	0x200003d8
   127e8:	200000c4 	.word	0x200000c4
   127ec:	200000c8 	.word	0x200000c8
   127f0:	20000330 	.word	0x20000330
   127f4:	0000b139 	.word	0x0000b139
   127f8:	00014481 	.word	0x00014481
   127fc:	0000b109 	.word	0x0000b109
   12800:	200000aa 	.word	0x200000aa
   12804:	200000a8 	.word	0x200000a8
   12808:	000144b5 	.word	0x000144b5
   1280c:	2000001b 	.word	0x2000001b
   12810:	20000070 	.word	0x20000070
   12814:	000178ac 	.word	0x000178ac
   12818:	20000314 	.word	0x20000314
   1281c:	2000001c 	.word	0x2000001c
   12820:	20000094 	.word	0x20000094
   12824:	20000328 	.word	0x20000328
   12828:	000152f9 	.word	0x000152f9
   1282c:	00014ca1 	.word	0x00014ca1
   12830:	00014531 	.word	0x00014531
   12834:	2000032c 	.word	0x2000032c
   12838:	0000ffff 	.word	0x0000ffff
   1283c:	2000032e 	.word	0x2000032e
   12840:	20000326 	.word	0x20000326
   12844:	0000b479 	.word	0x0000b479
   12848:	000170dd 	.word	0x000170dd
   1284c:	200000a4 	.word	0x200000a4
   12850:	0001459d 	.word	0x0001459d
   12854:	0000fffe 	.word	0x0000fffe
				}
				case COLOR_COMPASS:
				{
					cycle_index = (int)(((((float)0x0FFFF) * 6) / 360) *heading) % 0x0FFFF;
   12858:	4baf      	ldr	r3, [pc, #700]	; (12b18 <main+0x22e8>)
   1285a:	49b0      	ldr	r1, [pc, #704]	; (12b1c <main+0x22ec>)
   1285c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1285e:	4798      	blx	r3
   12860:	1c03      	adds	r3, r0, #0
   12862:	1c1a      	adds	r2, r3, #0
   12864:	4bae      	ldr	r3, [pc, #696]	; (12b20 <main+0x22f0>)
   12866:	1c10      	adds	r0, r2, #0
   12868:	4798      	blx	r3
   1286a:	0002      	movs	r2, r0
   1286c:	4bad      	ldr	r3, [pc, #692]	; (12b24 <main+0x22f4>)
   1286e:	49ae      	ldr	r1, [pc, #696]	; (12b28 <main+0x22f8>)
   12870:	0010      	movs	r0, r2
   12872:	4798      	blx	r3
   12874:	000b      	movs	r3, r1
   12876:	001a      	movs	r2, r3
   12878:	4bac      	ldr	r3, [pc, #688]	; (12b2c <main+0x22fc>)
   1287a:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 6) / 360) *heading) / 0x0FFFF;
   1287c:	4ba6      	ldr	r3, [pc, #664]	; (12b18 <main+0x22e8>)
   1287e:	49a7      	ldr	r1, [pc, #668]	; (12b1c <main+0x22ec>)
   12880:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12882:	4798      	blx	r3
   12884:	1c03      	adds	r3, r0, #0
   12886:	1c1a      	adds	r2, r3, #0
   12888:	4ba5      	ldr	r3, [pc, #660]	; (12b20 <main+0x22f0>)
   1288a:	1c10      	adds	r0, r2, #0
   1288c:	4798      	blx	r3
   1288e:	0002      	movs	r2, r0
   12890:	4ba7      	ldr	r3, [pc, #668]	; (12b30 <main+0x2300>)
   12892:	49a5      	ldr	r1, [pc, #660]	; (12b28 <main+0x22f8>)
   12894:	0010      	movs	r0, r2
   12896:	4798      	blx	r3
   12898:	0003      	movs	r3, r0
   1289a:	b2da      	uxtb	r2, r3
   1289c:	4ba5      	ldr	r3, [pc, #660]	; (12b34 <main+0x2304>)
   1289e:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   128a0:	4ba2      	ldr	r3, [pc, #648]	; (12b2c <main+0x22fc>)
   128a2:	681a      	ldr	r2, [r3, #0]
   128a4:	4ba4      	ldr	r3, [pc, #656]	; (12b38 <main+0x2308>)
   128a6:	0010      	movs	r0, r2
   128a8:	4798      	blx	r3
   128aa:	4ba4      	ldr	r3, [pc, #656]	; (12b3c <main+0x230c>)
   128ac:	681a      	ldr	r2, [r3, #0]
   128ae:	4b9a      	ldr	r3, [pc, #616]	; (12b18 <main+0x22e8>)
   128b0:	1c11      	adds	r1, r2, #0
   128b2:	4798      	blx	r3
   128b4:	1c03      	adds	r3, r0, #0
   128b6:	1c1a      	adds	r2, r3, #0
   128b8:	4ba1      	ldr	r3, [pc, #644]	; (12b40 <main+0x2310>)
   128ba:	1c10      	adds	r0, r2, #0
   128bc:	4798      	blx	r3
   128be:	0003      	movs	r3, r0
   128c0:	b29a      	uxth	r2, r3
   128c2:	4ba0      	ldr	r3, [pc, #640]	; (12b44 <main+0x2314>)
   128c4:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   128c6:	4b99      	ldr	r3, [pc, #612]	; (12b2c <main+0x22fc>)
   128c8:	681b      	ldr	r3, [r3, #0]
   128ca:	4a97      	ldr	r2, [pc, #604]	; (12b28 <main+0x22f8>)
   128cc:	1ad2      	subs	r2, r2, r3
   128ce:	4b9a      	ldr	r3, [pc, #616]	; (12b38 <main+0x2308>)
   128d0:	0010      	movs	r0, r2
   128d2:	4798      	blx	r3
   128d4:	4b99      	ldr	r3, [pc, #612]	; (12b3c <main+0x230c>)
   128d6:	681a      	ldr	r2, [r3, #0]
   128d8:	4b8f      	ldr	r3, [pc, #572]	; (12b18 <main+0x22e8>)
   128da:	1c11      	adds	r1, r2, #0
   128dc:	4798      	blx	r3
   128de:	1c03      	adds	r3, r0, #0
   128e0:	1c1a      	adds	r2, r3, #0
   128e2:	4b97      	ldr	r3, [pc, #604]	; (12b40 <main+0x2310>)
   128e4:	1c10      	adds	r0, r2, #0
   128e6:	4798      	blx	r3
   128e8:	0003      	movs	r3, r0
   128ea:	b29a      	uxth	r2, r3
   128ec:	4b96      	ldr	r3, [pc, #600]	; (12b48 <main+0x2318>)
   128ee:	801a      	strh	r2, [r3, #0]

					if(cycle >= 3)
   128f0:	4b90      	ldr	r3, [pc, #576]	; (12b34 <main+0x2304>)
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	2b02      	cmp	r3, #2
   128f6:	d905      	bls.n	12904 <main+0x20d4>
					cycle -= 3;
   128f8:	4b8e      	ldr	r3, [pc, #568]	; (12b34 <main+0x2304>)
   128fa:	781b      	ldrb	r3, [r3, #0]
   128fc:	3b03      	subs	r3, #3
   128fe:	b2da      	uxtb	r2, r3
   12900:	4b8c      	ldr	r3, [pc, #560]	; (12b34 <main+0x2304>)
   12902:	701a      	strb	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12904:	4b8f      	ldr	r3, [pc, #572]	; (12b44 <main+0x2314>)
   12906:	8819      	ldrh	r1, [r3, #0]
   12908:	4b8f      	ldr	r3, [pc, #572]	; (12b48 <main+0x2318>)
   1290a:	881a      	ldrh	r2, [r3, #0]
   1290c:	4b89      	ldr	r3, [pc, #548]	; (12b34 <main+0x2304>)
   1290e:	781b      	ldrb	r3, [r3, #0]
   12910:	4d8e      	ldr	r5, [pc, #568]	; (12b4c <main+0x231c>)
   12912:	0038      	movs	r0, r7
   12914:	4c8e      	ldr	r4, [pc, #568]	; (12b50 <main+0x2320>)
   12916:	47a0      	blx	r4
   12918:	003b      	movs	r3, r7
   1291a:	0028      	movs	r0, r5
   1291c:	0019      	movs	r1, r3
   1291e:	230c      	movs	r3, #12
   12920:	001a      	movs	r2, r3
   12922:	4b8c      	ldr	r3, [pc, #560]	; (12b54 <main+0x2324>)
   12924:	4798      	blx	r3
					break;
   12926:	f000 ff65 	bl	137f4 <main+0x2fc4>
				}
				case COLOR_YAW_RATE:
				{
					if(gzKalman < 0)
   1292a:	4b8b      	ldr	r3, [pc, #556]	; (12b58 <main+0x2328>)
   1292c:	681a      	ldr	r2, [r3, #0]
   1292e:	4b8b      	ldr	r3, [pc, #556]	; (12b5c <main+0x232c>)
   12930:	2100      	movs	r1, #0
   12932:	1c10      	adds	r0, r2, #0
   12934:	4798      	blx	r3
   12936:	1e03      	subs	r3, r0, #0
   12938:	d02a      	beq.n	12990 <main+0x2160>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) % 0x0FFFF;
   1293a:	4b89      	ldr	r3, [pc, #548]	; (12b60 <main+0x2330>)
   1293c:	681a      	ldr	r2, [r3, #0]
   1293e:	4b89      	ldr	r3, [pc, #548]	; (12b64 <main+0x2334>)
   12940:	1c10      	adds	r0, r2, #0
   12942:	4798      	blx	r3
   12944:	0002      	movs	r2, r0
   12946:	000b      	movs	r3, r1
   12948:	4c87      	ldr	r4, [pc, #540]	; (12b68 <main+0x2338>)
   1294a:	2000      	movs	r0, #0
   1294c:	4987      	ldr	r1, [pc, #540]	; (12b6c <main+0x233c>)
   1294e:	47a0      	blx	r4
   12950:	0003      	movs	r3, r0
   12952:	000c      	movs	r4, r1
   12954:	001d      	movs	r5, r3
   12956:	0026      	movs	r6, r4
   12958:	4b7f      	ldr	r3, [pc, #508]	; (12b58 <main+0x2328>)
   1295a:	681a      	ldr	r2, [r3, #0]
   1295c:	4b81      	ldr	r3, [pc, #516]	; (12b64 <main+0x2334>)
   1295e:	1c10      	adds	r0, r2, #0
   12960:	4798      	blx	r3
   12962:	0002      	movs	r2, r0
   12964:	000b      	movs	r3, r1
   12966:	4c82      	ldr	r4, [pc, #520]	; (12b70 <main+0x2340>)
   12968:	0028      	movs	r0, r5
   1296a:	0031      	movs	r1, r6
   1296c:	47a0      	blx	r4
   1296e:	0003      	movs	r3, r0
   12970:	000c      	movs	r4, r1
   12972:	0019      	movs	r1, r3
   12974:	0022      	movs	r2, r4
   12976:	4b7f      	ldr	r3, [pc, #508]	; (12b74 <main+0x2344>)
   12978:	0008      	movs	r0, r1
   1297a:	0011      	movs	r1, r2
   1297c:	4798      	blx	r3
   1297e:	0002      	movs	r2, r0
   12980:	4b68      	ldr	r3, [pc, #416]	; (12b24 <main+0x22f4>)
   12982:	4969      	ldr	r1, [pc, #420]	; (12b28 <main+0x22f8>)
   12984:	0010      	movs	r0, r2
   12986:	4798      	blx	r3
   12988:	000b      	movs	r3, r1
   1298a:	001a      	movs	r2, r3
   1298c:	4b67      	ldr	r3, [pc, #412]	; (12b2c <main+0x22fc>)
   1298e:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) / 0x0FFFF;
   12990:	4b73      	ldr	r3, [pc, #460]	; (12b60 <main+0x2330>)
   12992:	681a      	ldr	r2, [r3, #0]
   12994:	4b73      	ldr	r3, [pc, #460]	; (12b64 <main+0x2334>)
   12996:	1c10      	adds	r0, r2, #0
   12998:	4798      	blx	r3
   1299a:	0002      	movs	r2, r0
   1299c:	000b      	movs	r3, r1
   1299e:	4c72      	ldr	r4, [pc, #456]	; (12b68 <main+0x2338>)
   129a0:	2000      	movs	r0, #0
   129a2:	4972      	ldr	r1, [pc, #456]	; (12b6c <main+0x233c>)
   129a4:	47a0      	blx	r4
   129a6:	0003      	movs	r3, r0
   129a8:	000c      	movs	r4, r1
   129aa:	001d      	movs	r5, r3
   129ac:	0026      	movs	r6, r4
   129ae:	4b6a      	ldr	r3, [pc, #424]	; (12b58 <main+0x2328>)
   129b0:	681a      	ldr	r2, [r3, #0]
   129b2:	4b6c      	ldr	r3, [pc, #432]	; (12b64 <main+0x2334>)
   129b4:	1c10      	adds	r0, r2, #0
   129b6:	4798      	blx	r3
   129b8:	0002      	movs	r2, r0
   129ba:	000b      	movs	r3, r1
   129bc:	4c6c      	ldr	r4, [pc, #432]	; (12b70 <main+0x2340>)
   129be:	0028      	movs	r0, r5
   129c0:	0031      	movs	r1, r6
   129c2:	47a0      	blx	r4
   129c4:	0003      	movs	r3, r0
   129c6:	000c      	movs	r4, r1
   129c8:	0019      	movs	r1, r3
   129ca:	0022      	movs	r2, r4
   129cc:	4b69      	ldr	r3, [pc, #420]	; (12b74 <main+0x2344>)
   129ce:	0008      	movs	r0, r1
   129d0:	0011      	movs	r1, r2
   129d2:	4798      	blx	r3
   129d4:	0002      	movs	r2, r0
   129d6:	4b56      	ldr	r3, [pc, #344]	; (12b30 <main+0x2300>)
   129d8:	4953      	ldr	r1, [pc, #332]	; (12b28 <main+0x22f8>)
   129da:	0010      	movs	r0, r2
   129dc:	4798      	blx	r3
   129de:	0003      	movs	r3, r0
   129e0:	b2da      	uxtb	r2, r3
   129e2:	4b54      	ldr	r3, [pc, #336]	; (12b34 <main+0x2304>)
   129e4:	701a      	strb	r2, [r3, #0]
					if(gzKalman >= 0){
   129e6:	4b5c      	ldr	r3, [pc, #368]	; (12b58 <main+0x2328>)
   129e8:	681a      	ldr	r2, [r3, #0]
   129ea:	4b63      	ldr	r3, [pc, #396]	; (12b78 <main+0x2348>)
   129ec:	2100      	movs	r1, #0
   129ee:	1c10      	adds	r0, r2, #0
   129f0:	4798      	blx	r3
   129f2:	1e03      	subs	r3, r0, #0
   129f4:	d055      	beq.n	12aa2 <main+0x2272>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) % 0x0FFFF;
   129f6:	4b61      	ldr	r3, [pc, #388]	; (12b7c <main+0x234c>)
   129f8:	681a      	ldr	r2, [r3, #0]
   129fa:	4b5a      	ldr	r3, [pc, #360]	; (12b64 <main+0x2334>)
   129fc:	1c10      	adds	r0, r2, #0
   129fe:	4798      	blx	r3
   12a00:	0002      	movs	r2, r0
   12a02:	000b      	movs	r3, r1
   12a04:	4c58      	ldr	r4, [pc, #352]	; (12b68 <main+0x2338>)
   12a06:	2000      	movs	r0, #0
   12a08:	4958      	ldr	r1, [pc, #352]	; (12b6c <main+0x233c>)
   12a0a:	47a0      	blx	r4
   12a0c:	0003      	movs	r3, r0
   12a0e:	000c      	movs	r4, r1
   12a10:	001d      	movs	r5, r3
   12a12:	0026      	movs	r6, r4
   12a14:	4b50      	ldr	r3, [pc, #320]	; (12b58 <main+0x2328>)
   12a16:	681a      	ldr	r2, [r3, #0]
   12a18:	4b52      	ldr	r3, [pc, #328]	; (12b64 <main+0x2334>)
   12a1a:	1c10      	adds	r0, r2, #0
   12a1c:	4798      	blx	r3
   12a1e:	0002      	movs	r2, r0
   12a20:	000b      	movs	r3, r1
   12a22:	4c53      	ldr	r4, [pc, #332]	; (12b70 <main+0x2340>)
   12a24:	0028      	movs	r0, r5
   12a26:	0031      	movs	r1, r6
   12a28:	47a0      	blx	r4
   12a2a:	0003      	movs	r3, r0
   12a2c:	000c      	movs	r4, r1
   12a2e:	0019      	movs	r1, r3
   12a30:	0022      	movs	r2, r4
   12a32:	4b50      	ldr	r3, [pc, #320]	; (12b74 <main+0x2344>)
   12a34:	0008      	movs	r0, r1
   12a36:	0011      	movs	r1, r2
   12a38:	4798      	blx	r3
   12a3a:	0002      	movs	r2, r0
   12a3c:	4b39      	ldr	r3, [pc, #228]	; (12b24 <main+0x22f4>)
   12a3e:	493a      	ldr	r1, [pc, #232]	; (12b28 <main+0x22f8>)
   12a40:	0010      	movs	r0, r2
   12a42:	4798      	blx	r3
   12a44:	000b      	movs	r3, r1
   12a46:	001a      	movs	r2, r3
   12a48:	4b38      	ldr	r3, [pc, #224]	; (12b2c <main+0x22fc>)
   12a4a:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) / 0x0FFFF;
   12a4c:	4b4b      	ldr	r3, [pc, #300]	; (12b7c <main+0x234c>)
   12a4e:	681a      	ldr	r2, [r3, #0]
   12a50:	4b44      	ldr	r3, [pc, #272]	; (12b64 <main+0x2334>)
   12a52:	1c10      	adds	r0, r2, #0
   12a54:	4798      	blx	r3
   12a56:	0002      	movs	r2, r0
   12a58:	000b      	movs	r3, r1
   12a5a:	4c43      	ldr	r4, [pc, #268]	; (12b68 <main+0x2338>)
   12a5c:	2000      	movs	r0, #0
   12a5e:	4943      	ldr	r1, [pc, #268]	; (12b6c <main+0x233c>)
   12a60:	47a0      	blx	r4
   12a62:	0003      	movs	r3, r0
   12a64:	000c      	movs	r4, r1
   12a66:	001d      	movs	r5, r3
   12a68:	0026      	movs	r6, r4
   12a6a:	4b3b      	ldr	r3, [pc, #236]	; (12b58 <main+0x2328>)
   12a6c:	681a      	ldr	r2, [r3, #0]
   12a6e:	4b3d      	ldr	r3, [pc, #244]	; (12b64 <main+0x2334>)
   12a70:	1c10      	adds	r0, r2, #0
   12a72:	4798      	blx	r3
   12a74:	0002      	movs	r2, r0
   12a76:	000b      	movs	r3, r1
   12a78:	4c3d      	ldr	r4, [pc, #244]	; (12b70 <main+0x2340>)
   12a7a:	0028      	movs	r0, r5
   12a7c:	0031      	movs	r1, r6
   12a7e:	47a0      	blx	r4
   12a80:	0003      	movs	r3, r0
   12a82:	000c      	movs	r4, r1
   12a84:	0019      	movs	r1, r3
   12a86:	0022      	movs	r2, r4
   12a88:	4b3a      	ldr	r3, [pc, #232]	; (12b74 <main+0x2344>)
   12a8a:	0008      	movs	r0, r1
   12a8c:	0011      	movs	r1, r2
   12a8e:	4798      	blx	r3
   12a90:	0002      	movs	r2, r0
   12a92:	4b27      	ldr	r3, [pc, #156]	; (12b30 <main+0x2300>)
   12a94:	4924      	ldr	r1, [pc, #144]	; (12b28 <main+0x22f8>)
   12a96:	0010      	movs	r0, r2
   12a98:	4798      	blx	r3
   12a9a:	0003      	movs	r3, r0
   12a9c:	b2da      	uxtb	r2, r3
   12a9e:	4b25      	ldr	r3, [pc, #148]	; (12b34 <main+0x2304>)
   12aa0:	701a      	strb	r2, [r3, #0]
					}
						
					upColor = cycle_index * output_brightness;
   12aa2:	4b22      	ldr	r3, [pc, #136]	; (12b2c <main+0x22fc>)
   12aa4:	681a      	ldr	r2, [r3, #0]
   12aa6:	4b24      	ldr	r3, [pc, #144]	; (12b38 <main+0x2308>)
   12aa8:	0010      	movs	r0, r2
   12aaa:	4798      	blx	r3
   12aac:	4b23      	ldr	r3, [pc, #140]	; (12b3c <main+0x230c>)
   12aae:	681a      	ldr	r2, [r3, #0]
   12ab0:	4b19      	ldr	r3, [pc, #100]	; (12b18 <main+0x22e8>)
   12ab2:	1c11      	adds	r1, r2, #0
   12ab4:	4798      	blx	r3
   12ab6:	1c03      	adds	r3, r0, #0
   12ab8:	1c1a      	adds	r2, r3, #0
   12aba:	4b21      	ldr	r3, [pc, #132]	; (12b40 <main+0x2310>)
   12abc:	1c10      	adds	r0, r2, #0
   12abe:	4798      	blx	r3
   12ac0:	0003      	movs	r3, r0
   12ac2:	b29a      	uxth	r2, r3
   12ac4:	4b1f      	ldr	r3, [pc, #124]	; (12b44 <main+0x2314>)
   12ac6:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12ac8:	4b18      	ldr	r3, [pc, #96]	; (12b2c <main+0x22fc>)
   12aca:	681b      	ldr	r3, [r3, #0]
   12acc:	4a16      	ldr	r2, [pc, #88]	; (12b28 <main+0x22f8>)
   12ace:	1ad2      	subs	r2, r2, r3
   12ad0:	4b19      	ldr	r3, [pc, #100]	; (12b38 <main+0x2308>)
   12ad2:	0010      	movs	r0, r2
   12ad4:	4798      	blx	r3
   12ad6:	4b19      	ldr	r3, [pc, #100]	; (12b3c <main+0x230c>)
   12ad8:	681a      	ldr	r2, [r3, #0]
   12ada:	4b0f      	ldr	r3, [pc, #60]	; (12b18 <main+0x22e8>)
   12adc:	1c11      	adds	r1, r2, #0
   12ade:	4798      	blx	r3
   12ae0:	1c03      	adds	r3, r0, #0
   12ae2:	1c1a      	adds	r2, r3, #0
   12ae4:	4b16      	ldr	r3, [pc, #88]	; (12b40 <main+0x2310>)
   12ae6:	1c10      	adds	r0, r2, #0
   12ae8:	4798      	blx	r3
   12aea:	0003      	movs	r3, r0
   12aec:	b29a      	uxth	r2, r3
   12aee:	4b16      	ldr	r3, [pc, #88]	; (12b48 <main+0x2318>)
   12af0:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12af2:	4b14      	ldr	r3, [pc, #80]	; (12b44 <main+0x2314>)
   12af4:	8819      	ldrh	r1, [r3, #0]
   12af6:	4b14      	ldr	r3, [pc, #80]	; (12b48 <main+0x2318>)
   12af8:	881a      	ldrh	r2, [r3, #0]
   12afa:	4b0e      	ldr	r3, [pc, #56]	; (12b34 <main+0x2304>)
   12afc:	781b      	ldrb	r3, [r3, #0]
   12afe:	4d13      	ldr	r5, [pc, #76]	; (12b4c <main+0x231c>)
   12b00:	0038      	movs	r0, r7
   12b02:	4c13      	ldr	r4, [pc, #76]	; (12b50 <main+0x2320>)
   12b04:	47a0      	blx	r4
   12b06:	003b      	movs	r3, r7
   12b08:	0028      	movs	r0, r5
   12b0a:	0019      	movs	r1, r3
   12b0c:	230c      	movs	r3, #12
   12b0e:	001a      	movs	r2, r3
   12b10:	4b10      	ldr	r3, [pc, #64]	; (12b54 <main+0x2324>)
   12b12:	4798      	blx	r3
					break;
   12b14:	f000 fe6e 	bl	137f4 <main+0x2fc4>
   12b18:	00014ca1 	.word	0x00014ca1
   12b1c:	44888800 	.word	0x44888800
   12b20:	00015219 	.word	0x00015219
   12b24:	000143e1 	.word	0x000143e1
   12b28:	0000ffff 	.word	0x0000ffff
   12b2c:	20000328 	.word	0x20000328
   12b30:	00014215 	.word	0x00014215
   12b34:	20000326 	.word	0x20000326
   12b38:	000152f9 	.word	0x000152f9
   12b3c:	200003ec 	.word	0x200003ec
   12b40:	00014531 	.word	0x00014531
   12b44:	2000032c 	.word	0x2000032c
   12b48:	2000032e 	.word	0x2000032e
   12b4c:	20000314 	.word	0x20000314
   12b50:	0000b479 	.word	0x0000b479
   12b54:	000170dd 	.word	0x000170dd
   12b58:	200003e4 	.word	0x200003e4
   12b5c:	0001448d 	.word	0x0001448d
   12b60:	200000dc 	.word	0x200000dc
   12b64:	00016e95 	.word	0x00016e95
   12b68:	000159a5 	.word	0x000159a5
   12b6c:	4107ffe8 	.word	0x4107ffe8
   12b70:	0001620d 	.word	0x0001620d
   12b74:	00016d39 	.word	0x00016d39
   12b78:	000144c9 	.word	0x000144c9
   12b7c:	200000e0 	.word	0x200000e0
				}
				case COLOR_ROLL_RATE:
				{
					if(gyKalman < 0)
   12b80:	4b7b      	ldr	r3, [pc, #492]	; (12d70 <main+0x2540>)
   12b82:	681a      	ldr	r2, [r3, #0]
   12b84:	4b7b      	ldr	r3, [pc, #492]	; (12d74 <main+0x2544>)
   12b86:	2100      	movs	r1, #0
   12b88:	1c10      	adds	r0, r2, #0
   12b8a:	4798      	blx	r3
   12b8c:	1e03      	subs	r3, r0, #0
   12b8e:	d02a      	beq.n	12be6 <main+0x23b6>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) % 0x0FFFF;
   12b90:	4b79      	ldr	r3, [pc, #484]	; (12d78 <main+0x2548>)
   12b92:	681a      	ldr	r2, [r3, #0]
   12b94:	4b79      	ldr	r3, [pc, #484]	; (12d7c <main+0x254c>)
   12b96:	1c10      	adds	r0, r2, #0
   12b98:	4798      	blx	r3
   12b9a:	0002      	movs	r2, r0
   12b9c:	000b      	movs	r3, r1
   12b9e:	4c78      	ldr	r4, [pc, #480]	; (12d80 <main+0x2550>)
   12ba0:	2000      	movs	r0, #0
   12ba2:	4978      	ldr	r1, [pc, #480]	; (12d84 <main+0x2554>)
   12ba4:	47a0      	blx	r4
   12ba6:	0003      	movs	r3, r0
   12ba8:	000c      	movs	r4, r1
   12baa:	001d      	movs	r5, r3
   12bac:	0026      	movs	r6, r4
   12bae:	4b70      	ldr	r3, [pc, #448]	; (12d70 <main+0x2540>)
   12bb0:	681a      	ldr	r2, [r3, #0]
   12bb2:	4b72      	ldr	r3, [pc, #456]	; (12d7c <main+0x254c>)
   12bb4:	1c10      	adds	r0, r2, #0
   12bb6:	4798      	blx	r3
   12bb8:	0002      	movs	r2, r0
   12bba:	000b      	movs	r3, r1
   12bbc:	4c72      	ldr	r4, [pc, #456]	; (12d88 <main+0x2558>)
   12bbe:	0028      	movs	r0, r5
   12bc0:	0031      	movs	r1, r6
   12bc2:	47a0      	blx	r4
   12bc4:	0003      	movs	r3, r0
   12bc6:	000c      	movs	r4, r1
   12bc8:	0019      	movs	r1, r3
   12bca:	0022      	movs	r2, r4
   12bcc:	4b6f      	ldr	r3, [pc, #444]	; (12d8c <main+0x255c>)
   12bce:	0008      	movs	r0, r1
   12bd0:	0011      	movs	r1, r2
   12bd2:	4798      	blx	r3
   12bd4:	0002      	movs	r2, r0
   12bd6:	4b6e      	ldr	r3, [pc, #440]	; (12d90 <main+0x2560>)
   12bd8:	496e      	ldr	r1, [pc, #440]	; (12d94 <main+0x2564>)
   12bda:	0010      	movs	r0, r2
   12bdc:	4798      	blx	r3
   12bde:	000b      	movs	r3, r1
   12be0:	001a      	movs	r2, r3
   12be2:	4b6d      	ldr	r3, [pc, #436]	; (12d98 <main+0x2568>)
   12be4:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) / 0x0FFFF;
   12be6:	4b64      	ldr	r3, [pc, #400]	; (12d78 <main+0x2548>)
   12be8:	681a      	ldr	r2, [r3, #0]
   12bea:	4b64      	ldr	r3, [pc, #400]	; (12d7c <main+0x254c>)
   12bec:	1c10      	adds	r0, r2, #0
   12bee:	4798      	blx	r3
   12bf0:	0002      	movs	r2, r0
   12bf2:	000b      	movs	r3, r1
   12bf4:	4c62      	ldr	r4, [pc, #392]	; (12d80 <main+0x2550>)
   12bf6:	2000      	movs	r0, #0
   12bf8:	4962      	ldr	r1, [pc, #392]	; (12d84 <main+0x2554>)
   12bfa:	47a0      	blx	r4
   12bfc:	0003      	movs	r3, r0
   12bfe:	000c      	movs	r4, r1
   12c00:	001d      	movs	r5, r3
   12c02:	0026      	movs	r6, r4
   12c04:	4b5a      	ldr	r3, [pc, #360]	; (12d70 <main+0x2540>)
   12c06:	681a      	ldr	r2, [r3, #0]
   12c08:	4b5c      	ldr	r3, [pc, #368]	; (12d7c <main+0x254c>)
   12c0a:	1c10      	adds	r0, r2, #0
   12c0c:	4798      	blx	r3
   12c0e:	0002      	movs	r2, r0
   12c10:	000b      	movs	r3, r1
   12c12:	4c5d      	ldr	r4, [pc, #372]	; (12d88 <main+0x2558>)
   12c14:	0028      	movs	r0, r5
   12c16:	0031      	movs	r1, r6
   12c18:	47a0      	blx	r4
   12c1a:	0003      	movs	r3, r0
   12c1c:	000c      	movs	r4, r1
   12c1e:	0019      	movs	r1, r3
   12c20:	0022      	movs	r2, r4
   12c22:	4b5a      	ldr	r3, [pc, #360]	; (12d8c <main+0x255c>)
   12c24:	0008      	movs	r0, r1
   12c26:	0011      	movs	r1, r2
   12c28:	4798      	blx	r3
   12c2a:	0002      	movs	r2, r0
   12c2c:	4b5b      	ldr	r3, [pc, #364]	; (12d9c <main+0x256c>)
   12c2e:	4959      	ldr	r1, [pc, #356]	; (12d94 <main+0x2564>)
   12c30:	0010      	movs	r0, r2
   12c32:	4798      	blx	r3
   12c34:	0003      	movs	r3, r0
   12c36:	b2da      	uxtb	r2, r3
   12c38:	4b59      	ldr	r3, [pc, #356]	; (12da0 <main+0x2570>)
   12c3a:	701a      	strb	r2, [r3, #0]
					if(gyKalman >= 0){
   12c3c:	4b4c      	ldr	r3, [pc, #304]	; (12d70 <main+0x2540>)
   12c3e:	681a      	ldr	r2, [r3, #0]
   12c40:	4b58      	ldr	r3, [pc, #352]	; (12da4 <main+0x2574>)
   12c42:	2100      	movs	r1, #0
   12c44:	1c10      	adds	r0, r2, #0
   12c46:	4798      	blx	r3
   12c48:	1e03      	subs	r3, r0, #0
   12c4a:	d055      	beq.n	12cf8 <main+0x24c8>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) % 0x0FFFF;
   12c4c:	4b56      	ldr	r3, [pc, #344]	; (12da8 <main+0x2578>)
   12c4e:	681a      	ldr	r2, [r3, #0]
   12c50:	4b4a      	ldr	r3, [pc, #296]	; (12d7c <main+0x254c>)
   12c52:	1c10      	adds	r0, r2, #0
   12c54:	4798      	blx	r3
   12c56:	0002      	movs	r2, r0
   12c58:	000b      	movs	r3, r1
   12c5a:	4c49      	ldr	r4, [pc, #292]	; (12d80 <main+0x2550>)
   12c5c:	2000      	movs	r0, #0
   12c5e:	4949      	ldr	r1, [pc, #292]	; (12d84 <main+0x2554>)
   12c60:	47a0      	blx	r4
   12c62:	0003      	movs	r3, r0
   12c64:	000c      	movs	r4, r1
   12c66:	001d      	movs	r5, r3
   12c68:	0026      	movs	r6, r4
   12c6a:	4b41      	ldr	r3, [pc, #260]	; (12d70 <main+0x2540>)
   12c6c:	681a      	ldr	r2, [r3, #0]
   12c6e:	4b43      	ldr	r3, [pc, #268]	; (12d7c <main+0x254c>)
   12c70:	1c10      	adds	r0, r2, #0
   12c72:	4798      	blx	r3
   12c74:	0002      	movs	r2, r0
   12c76:	000b      	movs	r3, r1
   12c78:	4c43      	ldr	r4, [pc, #268]	; (12d88 <main+0x2558>)
   12c7a:	0028      	movs	r0, r5
   12c7c:	0031      	movs	r1, r6
   12c7e:	47a0      	blx	r4
   12c80:	0003      	movs	r3, r0
   12c82:	000c      	movs	r4, r1
   12c84:	0019      	movs	r1, r3
   12c86:	0022      	movs	r2, r4
   12c88:	4b40      	ldr	r3, [pc, #256]	; (12d8c <main+0x255c>)
   12c8a:	0008      	movs	r0, r1
   12c8c:	0011      	movs	r1, r2
   12c8e:	4798      	blx	r3
   12c90:	0002      	movs	r2, r0
   12c92:	4b3f      	ldr	r3, [pc, #252]	; (12d90 <main+0x2560>)
   12c94:	493f      	ldr	r1, [pc, #252]	; (12d94 <main+0x2564>)
   12c96:	0010      	movs	r0, r2
   12c98:	4798      	blx	r3
   12c9a:	000b      	movs	r3, r1
   12c9c:	001a      	movs	r2, r3
   12c9e:	4b3e      	ldr	r3, [pc, #248]	; (12d98 <main+0x2568>)
   12ca0:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) / 0x0FFFF;
   12ca2:	4b41      	ldr	r3, [pc, #260]	; (12da8 <main+0x2578>)
   12ca4:	681a      	ldr	r2, [r3, #0]
   12ca6:	4b35      	ldr	r3, [pc, #212]	; (12d7c <main+0x254c>)
   12ca8:	1c10      	adds	r0, r2, #0
   12caa:	4798      	blx	r3
   12cac:	0002      	movs	r2, r0
   12cae:	000b      	movs	r3, r1
   12cb0:	4c33      	ldr	r4, [pc, #204]	; (12d80 <main+0x2550>)
   12cb2:	2000      	movs	r0, #0
   12cb4:	4933      	ldr	r1, [pc, #204]	; (12d84 <main+0x2554>)
   12cb6:	47a0      	blx	r4
   12cb8:	0003      	movs	r3, r0
   12cba:	000c      	movs	r4, r1
   12cbc:	001d      	movs	r5, r3
   12cbe:	0026      	movs	r6, r4
   12cc0:	4b2b      	ldr	r3, [pc, #172]	; (12d70 <main+0x2540>)
   12cc2:	681a      	ldr	r2, [r3, #0]
   12cc4:	4b2d      	ldr	r3, [pc, #180]	; (12d7c <main+0x254c>)
   12cc6:	1c10      	adds	r0, r2, #0
   12cc8:	4798      	blx	r3
   12cca:	0002      	movs	r2, r0
   12ccc:	000b      	movs	r3, r1
   12cce:	4c2e      	ldr	r4, [pc, #184]	; (12d88 <main+0x2558>)
   12cd0:	0028      	movs	r0, r5
   12cd2:	0031      	movs	r1, r6
   12cd4:	47a0      	blx	r4
   12cd6:	0003      	movs	r3, r0
   12cd8:	000c      	movs	r4, r1
   12cda:	0019      	movs	r1, r3
   12cdc:	0022      	movs	r2, r4
   12cde:	4b2b      	ldr	r3, [pc, #172]	; (12d8c <main+0x255c>)
   12ce0:	0008      	movs	r0, r1
   12ce2:	0011      	movs	r1, r2
   12ce4:	4798      	blx	r3
   12ce6:	0002      	movs	r2, r0
   12ce8:	4b2c      	ldr	r3, [pc, #176]	; (12d9c <main+0x256c>)
   12cea:	492a      	ldr	r1, [pc, #168]	; (12d94 <main+0x2564>)
   12cec:	0010      	movs	r0, r2
   12cee:	4798      	blx	r3
   12cf0:	0003      	movs	r3, r0
   12cf2:	b2da      	uxtb	r2, r3
   12cf4:	4b2a      	ldr	r3, [pc, #168]	; (12da0 <main+0x2570>)
   12cf6:	701a      	strb	r2, [r3, #0]
					}
				
					upColor = cycle_index * output_brightness;
   12cf8:	4b27      	ldr	r3, [pc, #156]	; (12d98 <main+0x2568>)
   12cfa:	681a      	ldr	r2, [r3, #0]
   12cfc:	4b2b      	ldr	r3, [pc, #172]	; (12dac <main+0x257c>)
   12cfe:	0010      	movs	r0, r2
   12d00:	4798      	blx	r3
   12d02:	4b2b      	ldr	r3, [pc, #172]	; (12db0 <main+0x2580>)
   12d04:	681a      	ldr	r2, [r3, #0]
   12d06:	4b2b      	ldr	r3, [pc, #172]	; (12db4 <main+0x2584>)
   12d08:	1c11      	adds	r1, r2, #0
   12d0a:	4798      	blx	r3
   12d0c:	1c03      	adds	r3, r0, #0
   12d0e:	1c1a      	adds	r2, r3, #0
   12d10:	4b29      	ldr	r3, [pc, #164]	; (12db8 <main+0x2588>)
   12d12:	1c10      	adds	r0, r2, #0
   12d14:	4798      	blx	r3
   12d16:	0003      	movs	r3, r0
   12d18:	b29a      	uxth	r2, r3
   12d1a:	4b28      	ldr	r3, [pc, #160]	; (12dbc <main+0x258c>)
   12d1c:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12d1e:	4b1e      	ldr	r3, [pc, #120]	; (12d98 <main+0x2568>)
   12d20:	681b      	ldr	r3, [r3, #0]
   12d22:	4a1c      	ldr	r2, [pc, #112]	; (12d94 <main+0x2564>)
   12d24:	1ad2      	subs	r2, r2, r3
   12d26:	4b21      	ldr	r3, [pc, #132]	; (12dac <main+0x257c>)
   12d28:	0010      	movs	r0, r2
   12d2a:	4798      	blx	r3
   12d2c:	4b20      	ldr	r3, [pc, #128]	; (12db0 <main+0x2580>)
   12d2e:	681a      	ldr	r2, [r3, #0]
   12d30:	4b20      	ldr	r3, [pc, #128]	; (12db4 <main+0x2584>)
   12d32:	1c11      	adds	r1, r2, #0
   12d34:	4798      	blx	r3
   12d36:	1c03      	adds	r3, r0, #0
   12d38:	1c1a      	adds	r2, r3, #0
   12d3a:	4b1f      	ldr	r3, [pc, #124]	; (12db8 <main+0x2588>)
   12d3c:	1c10      	adds	r0, r2, #0
   12d3e:	4798      	blx	r3
   12d40:	0003      	movs	r3, r0
   12d42:	b29a      	uxth	r2, r3
   12d44:	4b1e      	ldr	r3, [pc, #120]	; (12dc0 <main+0x2590>)
   12d46:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12d48:	4b1c      	ldr	r3, [pc, #112]	; (12dbc <main+0x258c>)
   12d4a:	8819      	ldrh	r1, [r3, #0]
   12d4c:	4b1c      	ldr	r3, [pc, #112]	; (12dc0 <main+0x2590>)
   12d4e:	881a      	ldrh	r2, [r3, #0]
   12d50:	4b13      	ldr	r3, [pc, #76]	; (12da0 <main+0x2570>)
   12d52:	781b      	ldrb	r3, [r3, #0]
   12d54:	4d1b      	ldr	r5, [pc, #108]	; (12dc4 <main+0x2594>)
   12d56:	0038      	movs	r0, r7
   12d58:	4c1b      	ldr	r4, [pc, #108]	; (12dc8 <main+0x2598>)
   12d5a:	47a0      	blx	r4
   12d5c:	003b      	movs	r3, r7
   12d5e:	0028      	movs	r0, r5
   12d60:	0019      	movs	r1, r3
   12d62:	230c      	movs	r3, #12
   12d64:	001a      	movs	r2, r3
   12d66:	4b19      	ldr	r3, [pc, #100]	; (12dcc <main+0x259c>)
   12d68:	4798      	blx	r3
					break;
   12d6a:	f000 fd43 	bl	137f4 <main+0x2fc4>
   12d6e:	46c0      	nop			; (mov r8, r8)
   12d70:	200003e0 	.word	0x200003e0
   12d74:	0001448d 	.word	0x0001448d
   12d78:	200000d4 	.word	0x200000d4
   12d7c:	00016e95 	.word	0x00016e95
   12d80:	000159a5 	.word	0x000159a5
   12d84:	4107ffe8 	.word	0x4107ffe8
   12d88:	0001620d 	.word	0x0001620d
   12d8c:	00016d39 	.word	0x00016d39
   12d90:	000143e1 	.word	0x000143e1
   12d94:	0000ffff 	.word	0x0000ffff
   12d98:	20000328 	.word	0x20000328
   12d9c:	00014215 	.word	0x00014215
   12da0:	20000326 	.word	0x20000326
   12da4:	000144c9 	.word	0x000144c9
   12da8:	200000d8 	.word	0x200000d8
   12dac:	000152f9 	.word	0x000152f9
   12db0:	200003ec 	.word	0x200003ec
   12db4:	00014ca1 	.word	0x00014ca1
   12db8:	00014531 	.word	0x00014531
   12dbc:	2000032c 	.word	0x2000032c
   12dc0:	2000032e 	.word	0x2000032e
   12dc4:	20000314 	.word	0x20000314
   12dc8:	0000b479 	.word	0x0000b479
   12dcc:	000170dd 	.word	0x000170dd
				}
				case COLOR_PITCH_RATE:
				{
					if(gxKalman < 0)
   12dd0:	4bf6      	ldr	r3, [pc, #984]	; (131ac <main+0x297c>)
   12dd2:	681a      	ldr	r2, [r3, #0]
   12dd4:	4bf6      	ldr	r3, [pc, #984]	; (131b0 <main+0x2980>)
   12dd6:	2100      	movs	r1, #0
   12dd8:	1c10      	adds	r0, r2, #0
   12dda:	4798      	blx	r3
   12ddc:	1e03      	subs	r3, r0, #0
   12dde:	d02a      	beq.n	12e36 <main+0x2606>
					cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) % 0x0FFFF;
   12de0:	4bf4      	ldr	r3, [pc, #976]	; (131b4 <main+0x2984>)
   12de2:	681a      	ldr	r2, [r3, #0]
   12de4:	4bf4      	ldr	r3, [pc, #976]	; (131b8 <main+0x2988>)
   12de6:	1c10      	adds	r0, r2, #0
   12de8:	4798      	blx	r3
   12dea:	0002      	movs	r2, r0
   12dec:	000b      	movs	r3, r1
   12dee:	4cf3      	ldr	r4, [pc, #972]	; (131bc <main+0x298c>)
   12df0:	2000      	movs	r0, #0
   12df2:	49f3      	ldr	r1, [pc, #972]	; (131c0 <main+0x2990>)
   12df4:	47a0      	blx	r4
   12df6:	0003      	movs	r3, r0
   12df8:	000c      	movs	r4, r1
   12dfa:	001d      	movs	r5, r3
   12dfc:	0026      	movs	r6, r4
   12dfe:	4beb      	ldr	r3, [pc, #940]	; (131ac <main+0x297c>)
   12e00:	681a      	ldr	r2, [r3, #0]
   12e02:	4bed      	ldr	r3, [pc, #948]	; (131b8 <main+0x2988>)
   12e04:	1c10      	adds	r0, r2, #0
   12e06:	4798      	blx	r3
   12e08:	0002      	movs	r2, r0
   12e0a:	000b      	movs	r3, r1
   12e0c:	4ced      	ldr	r4, [pc, #948]	; (131c4 <main+0x2994>)
   12e0e:	0028      	movs	r0, r5
   12e10:	0031      	movs	r1, r6
   12e12:	47a0      	blx	r4
   12e14:	0003      	movs	r3, r0
   12e16:	000c      	movs	r4, r1
   12e18:	0019      	movs	r1, r3
   12e1a:	0022      	movs	r2, r4
   12e1c:	4bea      	ldr	r3, [pc, #936]	; (131c8 <main+0x2998>)
   12e1e:	0008      	movs	r0, r1
   12e20:	0011      	movs	r1, r2
   12e22:	4798      	blx	r3
   12e24:	0002      	movs	r2, r0
   12e26:	4be9      	ldr	r3, [pc, #932]	; (131cc <main+0x299c>)
   12e28:	49e9      	ldr	r1, [pc, #932]	; (131d0 <main+0x29a0>)
   12e2a:	0010      	movs	r0, r2
   12e2c:	4798      	blx	r3
   12e2e:	000b      	movs	r3, r1
   12e30:	001a      	movs	r2, r3
   12e32:	4be8      	ldr	r3, [pc, #928]	; (131d4 <main+0x29a4>)
   12e34:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) / 0x0FFFF;
   12e36:	4bdf      	ldr	r3, [pc, #892]	; (131b4 <main+0x2984>)
   12e38:	681a      	ldr	r2, [r3, #0]
   12e3a:	4bdf      	ldr	r3, [pc, #892]	; (131b8 <main+0x2988>)
   12e3c:	1c10      	adds	r0, r2, #0
   12e3e:	4798      	blx	r3
   12e40:	0002      	movs	r2, r0
   12e42:	000b      	movs	r3, r1
   12e44:	4cdd      	ldr	r4, [pc, #884]	; (131bc <main+0x298c>)
   12e46:	2000      	movs	r0, #0
   12e48:	49dd      	ldr	r1, [pc, #884]	; (131c0 <main+0x2990>)
   12e4a:	47a0      	blx	r4
   12e4c:	0003      	movs	r3, r0
   12e4e:	000c      	movs	r4, r1
   12e50:	001d      	movs	r5, r3
   12e52:	0026      	movs	r6, r4
   12e54:	4bd5      	ldr	r3, [pc, #852]	; (131ac <main+0x297c>)
   12e56:	681a      	ldr	r2, [r3, #0]
   12e58:	4bd7      	ldr	r3, [pc, #860]	; (131b8 <main+0x2988>)
   12e5a:	1c10      	adds	r0, r2, #0
   12e5c:	4798      	blx	r3
   12e5e:	0002      	movs	r2, r0
   12e60:	000b      	movs	r3, r1
   12e62:	4cd8      	ldr	r4, [pc, #864]	; (131c4 <main+0x2994>)
   12e64:	0028      	movs	r0, r5
   12e66:	0031      	movs	r1, r6
   12e68:	47a0      	blx	r4
   12e6a:	0003      	movs	r3, r0
   12e6c:	000c      	movs	r4, r1
   12e6e:	0019      	movs	r1, r3
   12e70:	0022      	movs	r2, r4
   12e72:	4bd5      	ldr	r3, [pc, #852]	; (131c8 <main+0x2998>)
   12e74:	0008      	movs	r0, r1
   12e76:	0011      	movs	r1, r2
   12e78:	4798      	blx	r3
   12e7a:	0002      	movs	r2, r0
   12e7c:	4bd6      	ldr	r3, [pc, #856]	; (131d8 <main+0x29a8>)
   12e7e:	49d4      	ldr	r1, [pc, #848]	; (131d0 <main+0x29a0>)
   12e80:	0010      	movs	r0, r2
   12e82:	4798      	blx	r3
   12e84:	0003      	movs	r3, r0
   12e86:	b2da      	uxtb	r2, r3
   12e88:	4bd4      	ldr	r3, [pc, #848]	; (131dc <main+0x29ac>)
   12e8a:	701a      	strb	r2, [r3, #0]
					if(gxKalman >= 0){
   12e8c:	4bc7      	ldr	r3, [pc, #796]	; (131ac <main+0x297c>)
   12e8e:	681a      	ldr	r2, [r3, #0]
   12e90:	4bd3      	ldr	r3, [pc, #844]	; (131e0 <main+0x29b0>)
   12e92:	2100      	movs	r1, #0
   12e94:	1c10      	adds	r0, r2, #0
   12e96:	4798      	blx	r3
   12e98:	1e03      	subs	r3, r0, #0
   12e9a:	d055      	beq.n	12f48 <main+0x2718>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) % 0x0FFFF;
   12e9c:	4bd1      	ldr	r3, [pc, #836]	; (131e4 <main+0x29b4>)
   12e9e:	681a      	ldr	r2, [r3, #0]
   12ea0:	4bc5      	ldr	r3, [pc, #788]	; (131b8 <main+0x2988>)
   12ea2:	1c10      	adds	r0, r2, #0
   12ea4:	4798      	blx	r3
   12ea6:	0002      	movs	r2, r0
   12ea8:	000b      	movs	r3, r1
   12eaa:	4cc4      	ldr	r4, [pc, #784]	; (131bc <main+0x298c>)
   12eac:	2000      	movs	r0, #0
   12eae:	49c4      	ldr	r1, [pc, #784]	; (131c0 <main+0x2990>)
   12eb0:	47a0      	blx	r4
   12eb2:	0003      	movs	r3, r0
   12eb4:	000c      	movs	r4, r1
   12eb6:	001d      	movs	r5, r3
   12eb8:	0026      	movs	r6, r4
   12eba:	4bbc      	ldr	r3, [pc, #752]	; (131ac <main+0x297c>)
   12ebc:	681a      	ldr	r2, [r3, #0]
   12ebe:	4bbe      	ldr	r3, [pc, #760]	; (131b8 <main+0x2988>)
   12ec0:	1c10      	adds	r0, r2, #0
   12ec2:	4798      	blx	r3
   12ec4:	0002      	movs	r2, r0
   12ec6:	000b      	movs	r3, r1
   12ec8:	4cbe      	ldr	r4, [pc, #760]	; (131c4 <main+0x2994>)
   12eca:	0028      	movs	r0, r5
   12ecc:	0031      	movs	r1, r6
   12ece:	47a0      	blx	r4
   12ed0:	0003      	movs	r3, r0
   12ed2:	000c      	movs	r4, r1
   12ed4:	0019      	movs	r1, r3
   12ed6:	0022      	movs	r2, r4
   12ed8:	4bbb      	ldr	r3, [pc, #748]	; (131c8 <main+0x2998>)
   12eda:	0008      	movs	r0, r1
   12edc:	0011      	movs	r1, r2
   12ede:	4798      	blx	r3
   12ee0:	0002      	movs	r2, r0
   12ee2:	4bba      	ldr	r3, [pc, #744]	; (131cc <main+0x299c>)
   12ee4:	49ba      	ldr	r1, [pc, #744]	; (131d0 <main+0x29a0>)
   12ee6:	0010      	movs	r0, r2
   12ee8:	4798      	blx	r3
   12eea:	000b      	movs	r3, r1
   12eec:	001a      	movs	r2, r3
   12eee:	4bb9      	ldr	r3, [pc, #740]	; (131d4 <main+0x29a4>)
   12ef0:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) / 0x0FFFF;
   12ef2:	4bbc      	ldr	r3, [pc, #752]	; (131e4 <main+0x29b4>)
   12ef4:	681a      	ldr	r2, [r3, #0]
   12ef6:	4bb0      	ldr	r3, [pc, #704]	; (131b8 <main+0x2988>)
   12ef8:	1c10      	adds	r0, r2, #0
   12efa:	4798      	blx	r3
   12efc:	0002      	movs	r2, r0
   12efe:	000b      	movs	r3, r1
   12f00:	4cae      	ldr	r4, [pc, #696]	; (131bc <main+0x298c>)
   12f02:	2000      	movs	r0, #0
   12f04:	49ae      	ldr	r1, [pc, #696]	; (131c0 <main+0x2990>)
   12f06:	47a0      	blx	r4
   12f08:	0003      	movs	r3, r0
   12f0a:	000c      	movs	r4, r1
   12f0c:	001d      	movs	r5, r3
   12f0e:	0026      	movs	r6, r4
   12f10:	4ba6      	ldr	r3, [pc, #664]	; (131ac <main+0x297c>)
   12f12:	681a      	ldr	r2, [r3, #0]
   12f14:	4ba8      	ldr	r3, [pc, #672]	; (131b8 <main+0x2988>)
   12f16:	1c10      	adds	r0, r2, #0
   12f18:	4798      	blx	r3
   12f1a:	0002      	movs	r2, r0
   12f1c:	000b      	movs	r3, r1
   12f1e:	4ca9      	ldr	r4, [pc, #676]	; (131c4 <main+0x2994>)
   12f20:	0028      	movs	r0, r5
   12f22:	0031      	movs	r1, r6
   12f24:	47a0      	blx	r4
   12f26:	0003      	movs	r3, r0
   12f28:	000c      	movs	r4, r1
   12f2a:	0019      	movs	r1, r3
   12f2c:	0022      	movs	r2, r4
   12f2e:	4ba6      	ldr	r3, [pc, #664]	; (131c8 <main+0x2998>)
   12f30:	0008      	movs	r0, r1
   12f32:	0011      	movs	r1, r2
   12f34:	4798      	blx	r3
   12f36:	0002      	movs	r2, r0
   12f38:	4ba7      	ldr	r3, [pc, #668]	; (131d8 <main+0x29a8>)
   12f3a:	49a5      	ldr	r1, [pc, #660]	; (131d0 <main+0x29a0>)
   12f3c:	0010      	movs	r0, r2
   12f3e:	4798      	blx	r3
   12f40:	0003      	movs	r3, r0
   12f42:	b2da      	uxtb	r2, r3
   12f44:	4ba5      	ldr	r3, [pc, #660]	; (131dc <main+0x29ac>)
   12f46:	701a      	strb	r2, [r3, #0]
					}
					
					upColor = cycle_index * output_brightness;
   12f48:	4ba2      	ldr	r3, [pc, #648]	; (131d4 <main+0x29a4>)
   12f4a:	681a      	ldr	r2, [r3, #0]
   12f4c:	4ba6      	ldr	r3, [pc, #664]	; (131e8 <main+0x29b8>)
   12f4e:	0010      	movs	r0, r2
   12f50:	4798      	blx	r3
   12f52:	4ba6      	ldr	r3, [pc, #664]	; (131ec <main+0x29bc>)
   12f54:	681a      	ldr	r2, [r3, #0]
   12f56:	4ba6      	ldr	r3, [pc, #664]	; (131f0 <main+0x29c0>)
   12f58:	1c11      	adds	r1, r2, #0
   12f5a:	4798      	blx	r3
   12f5c:	1c03      	adds	r3, r0, #0
   12f5e:	1c1a      	adds	r2, r3, #0
   12f60:	4ba4      	ldr	r3, [pc, #656]	; (131f4 <main+0x29c4>)
   12f62:	1c10      	adds	r0, r2, #0
   12f64:	4798      	blx	r3
   12f66:	0003      	movs	r3, r0
   12f68:	b29a      	uxth	r2, r3
   12f6a:	4ba3      	ldr	r3, [pc, #652]	; (131f8 <main+0x29c8>)
   12f6c:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12f6e:	4b99      	ldr	r3, [pc, #612]	; (131d4 <main+0x29a4>)
   12f70:	681b      	ldr	r3, [r3, #0]
   12f72:	4a97      	ldr	r2, [pc, #604]	; (131d0 <main+0x29a0>)
   12f74:	1ad2      	subs	r2, r2, r3
   12f76:	4b9c      	ldr	r3, [pc, #624]	; (131e8 <main+0x29b8>)
   12f78:	0010      	movs	r0, r2
   12f7a:	4798      	blx	r3
   12f7c:	4b9b      	ldr	r3, [pc, #620]	; (131ec <main+0x29bc>)
   12f7e:	681a      	ldr	r2, [r3, #0]
   12f80:	4b9b      	ldr	r3, [pc, #620]	; (131f0 <main+0x29c0>)
   12f82:	1c11      	adds	r1, r2, #0
   12f84:	4798      	blx	r3
   12f86:	1c03      	adds	r3, r0, #0
   12f88:	1c1a      	adds	r2, r3, #0
   12f8a:	4b9a      	ldr	r3, [pc, #616]	; (131f4 <main+0x29c4>)
   12f8c:	1c10      	adds	r0, r2, #0
   12f8e:	4798      	blx	r3
   12f90:	0003      	movs	r3, r0
   12f92:	b29a      	uxth	r2, r3
   12f94:	4b99      	ldr	r3, [pc, #612]	; (131fc <main+0x29cc>)
   12f96:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12f98:	4b97      	ldr	r3, [pc, #604]	; (131f8 <main+0x29c8>)
   12f9a:	8819      	ldrh	r1, [r3, #0]
   12f9c:	4b97      	ldr	r3, [pc, #604]	; (131fc <main+0x29cc>)
   12f9e:	881a      	ldrh	r2, [r3, #0]
   12fa0:	4b8e      	ldr	r3, [pc, #568]	; (131dc <main+0x29ac>)
   12fa2:	781b      	ldrb	r3, [r3, #0]
   12fa4:	4d96      	ldr	r5, [pc, #600]	; (13200 <main+0x29d0>)
   12fa6:	0038      	movs	r0, r7
   12fa8:	4c96      	ldr	r4, [pc, #600]	; (13204 <main+0x29d4>)
   12faa:	47a0      	blx	r4
   12fac:	003b      	movs	r3, r7
   12fae:	0028      	movs	r0, r5
   12fb0:	0019      	movs	r1, r3
   12fb2:	230c      	movs	r3, #12
   12fb4:	001a      	movs	r2, r3
   12fb6:	4b94      	ldr	r3, [pc, #592]	; (13208 <main+0x29d8>)
   12fb8:	4798      	blx	r3
					break;
   12fba:	f000 fc1b 	bl	137f4 <main+0x2fc4>
				}
				case COLOR_THROTTLE:
				{
					cycle_index = (int)(((((float)0x0FFFF) * 2.0) / 256.0) * (255-remote_y)) % 0x0FFFF;
   12fbe:	4b93      	ldr	r3, [pc, #588]	; (1320c <main+0x29dc>)
   12fc0:	781b      	ldrb	r3, [r3, #0]
   12fc2:	001a      	movs	r2, r3
   12fc4:	23ff      	movs	r3, #255	; 0xff
   12fc6:	1a9a      	subs	r2, r3, r2
   12fc8:	4b91      	ldr	r3, [pc, #580]	; (13210 <main+0x29e0>)
   12fca:	0010      	movs	r0, r2
   12fcc:	4798      	blx	r3
   12fce:	4c7d      	ldr	r4, [pc, #500]	; (131c4 <main+0x2994>)
   12fd0:	2200      	movs	r2, #0
   12fd2:	4b90      	ldr	r3, [pc, #576]	; (13214 <main+0x29e4>)
   12fd4:	47a0      	blx	r4
   12fd6:	0003      	movs	r3, r0
   12fd8:	000c      	movs	r4, r1
   12fda:	0019      	movs	r1, r3
   12fdc:	0022      	movs	r2, r4
   12fde:	4b7a      	ldr	r3, [pc, #488]	; (131c8 <main+0x2998>)
   12fe0:	0008      	movs	r0, r1
   12fe2:	0011      	movs	r1, r2
   12fe4:	4798      	blx	r3
   12fe6:	0002      	movs	r2, r0
   12fe8:	4b78      	ldr	r3, [pc, #480]	; (131cc <main+0x299c>)
   12fea:	4979      	ldr	r1, [pc, #484]	; (131d0 <main+0x29a0>)
   12fec:	0010      	movs	r0, r2
   12fee:	4798      	blx	r3
   12ff0:	000b      	movs	r3, r1
   12ff2:	001a      	movs	r2, r3
   12ff4:	4b77      	ldr	r3, [pc, #476]	; (131d4 <main+0x29a4>)
   12ff6:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 2.0) / 256.0) * (255-remote_y)) / 0x0FFFF;
   12ff8:	4b84      	ldr	r3, [pc, #528]	; (1320c <main+0x29dc>)
   12ffa:	781b      	ldrb	r3, [r3, #0]
   12ffc:	001a      	movs	r2, r3
   12ffe:	23ff      	movs	r3, #255	; 0xff
   13000:	1a9a      	subs	r2, r3, r2
   13002:	4b83      	ldr	r3, [pc, #524]	; (13210 <main+0x29e0>)
   13004:	0010      	movs	r0, r2
   13006:	4798      	blx	r3
   13008:	4c6e      	ldr	r4, [pc, #440]	; (131c4 <main+0x2994>)
   1300a:	2200      	movs	r2, #0
   1300c:	4b81      	ldr	r3, [pc, #516]	; (13214 <main+0x29e4>)
   1300e:	47a0      	blx	r4
   13010:	0003      	movs	r3, r0
   13012:	000c      	movs	r4, r1
   13014:	0019      	movs	r1, r3
   13016:	0022      	movs	r2, r4
   13018:	4b6b      	ldr	r3, [pc, #428]	; (131c8 <main+0x2998>)
   1301a:	0008      	movs	r0, r1
   1301c:	0011      	movs	r1, r2
   1301e:	4798      	blx	r3
   13020:	0002      	movs	r2, r0
   13022:	4b6d      	ldr	r3, [pc, #436]	; (131d8 <main+0x29a8>)
   13024:	496a      	ldr	r1, [pc, #424]	; (131d0 <main+0x29a0>)
   13026:	0010      	movs	r0, r2
   13028:	4798      	blx	r3
   1302a:	0003      	movs	r3, r0
   1302c:	b2da      	uxtb	r2, r3
   1302e:	4b6b      	ldr	r3, [pc, #428]	; (131dc <main+0x29ac>)
   13030:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   13032:	4b68      	ldr	r3, [pc, #416]	; (131d4 <main+0x29a4>)
   13034:	681a      	ldr	r2, [r3, #0]
   13036:	4b6c      	ldr	r3, [pc, #432]	; (131e8 <main+0x29b8>)
   13038:	0010      	movs	r0, r2
   1303a:	4798      	blx	r3
   1303c:	4b6b      	ldr	r3, [pc, #428]	; (131ec <main+0x29bc>)
   1303e:	681a      	ldr	r2, [r3, #0]
   13040:	4b6b      	ldr	r3, [pc, #428]	; (131f0 <main+0x29c0>)
   13042:	1c11      	adds	r1, r2, #0
   13044:	4798      	blx	r3
   13046:	1c03      	adds	r3, r0, #0
   13048:	1c1a      	adds	r2, r3, #0
   1304a:	4b6a      	ldr	r3, [pc, #424]	; (131f4 <main+0x29c4>)
   1304c:	1c10      	adds	r0, r2, #0
   1304e:	4798      	blx	r3
   13050:	0003      	movs	r3, r0
   13052:	b29a      	uxth	r2, r3
   13054:	4b68      	ldr	r3, [pc, #416]	; (131f8 <main+0x29c8>)
   13056:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   13058:	4b5e      	ldr	r3, [pc, #376]	; (131d4 <main+0x29a4>)
   1305a:	681b      	ldr	r3, [r3, #0]
   1305c:	4a5c      	ldr	r2, [pc, #368]	; (131d0 <main+0x29a0>)
   1305e:	1ad2      	subs	r2, r2, r3
   13060:	4b61      	ldr	r3, [pc, #388]	; (131e8 <main+0x29b8>)
   13062:	0010      	movs	r0, r2
   13064:	4798      	blx	r3
   13066:	4b61      	ldr	r3, [pc, #388]	; (131ec <main+0x29bc>)
   13068:	681a      	ldr	r2, [r3, #0]
   1306a:	4b61      	ldr	r3, [pc, #388]	; (131f0 <main+0x29c0>)
   1306c:	1c11      	adds	r1, r2, #0
   1306e:	4798      	blx	r3
   13070:	1c03      	adds	r3, r0, #0
   13072:	1c1a      	adds	r2, r3, #0
   13074:	4b5f      	ldr	r3, [pc, #380]	; (131f4 <main+0x29c4>)
   13076:	1c10      	adds	r0, r2, #0
   13078:	4798      	blx	r3
   1307a:	0003      	movs	r3, r0
   1307c:	b29a      	uxth	r2, r3
   1307e:	4b5f      	ldr	r3, [pc, #380]	; (131fc <main+0x29cc>)
   13080:	801a      	strh	r2, [r3, #0]

					cycle = cycle+2;
   13082:	4b56      	ldr	r3, [pc, #344]	; (131dc <main+0x29ac>)
   13084:	781b      	ldrb	r3, [r3, #0]
   13086:	3302      	adds	r3, #2
   13088:	b2da      	uxtb	r2, r3
   1308a:	4b54      	ldr	r3, [pc, #336]	; (131dc <main+0x29ac>)
   1308c:	701a      	strb	r2, [r3, #0]
					if(cycle > 2)
   1308e:	4b53      	ldr	r3, [pc, #332]	; (131dc <main+0x29ac>)
   13090:	781b      	ldrb	r3, [r3, #0]
   13092:	2b02      	cmp	r3, #2
   13094:	d905      	bls.n	130a2 <main+0x2872>
						cycle = cycle - 3;
   13096:	4b51      	ldr	r3, [pc, #324]	; (131dc <main+0x29ac>)
   13098:	781b      	ldrb	r3, [r3, #0]
   1309a:	3b03      	subs	r3, #3
   1309c:	b2da      	uxtb	r2, r3
   1309e:	4b4f      	ldr	r3, [pc, #316]	; (131dc <main+0x29ac>)
   130a0:	701a      	strb	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   130a2:	4b55      	ldr	r3, [pc, #340]	; (131f8 <main+0x29c8>)
   130a4:	8819      	ldrh	r1, [r3, #0]
   130a6:	4b55      	ldr	r3, [pc, #340]	; (131fc <main+0x29cc>)
   130a8:	881a      	ldrh	r2, [r3, #0]
   130aa:	4b4c      	ldr	r3, [pc, #304]	; (131dc <main+0x29ac>)
   130ac:	781b      	ldrb	r3, [r3, #0]
   130ae:	4d54      	ldr	r5, [pc, #336]	; (13200 <main+0x29d0>)
   130b0:	0038      	movs	r0, r7
   130b2:	4c54      	ldr	r4, [pc, #336]	; (13204 <main+0x29d4>)
   130b4:	47a0      	blx	r4
   130b6:	003b      	movs	r3, r7
   130b8:	0028      	movs	r0, r5
   130ba:	0019      	movs	r1, r3
   130bc:	230c      	movs	r3, #12
   130be:	001a      	movs	r2, r3
   130c0:	4b51      	ldr	r3, [pc, #324]	; (13208 <main+0x29d8>)
   130c2:	4798      	blx	r3

					break;
   130c4:	e396      	b.n	137f4 <main+0x2fc4>
				}
				case COLOR_RPM:	
				{				
					if(latest_vesc_vals.rpm != 0){
   130c6:	4b54      	ldr	r3, [pc, #336]	; (13218 <main+0x29e8>)
   130c8:	691b      	ldr	r3, [r3, #16]
   130ca:	2b00      	cmp	r3, #0
   130cc:	d100      	bne.n	130d0 <main+0x28a0>
   130ce:	e0a9      	b.n	13224 <main+0x29f4>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) % 0x0FFFF;
   130d0:	4b52      	ldr	r3, [pc, #328]	; (1321c <main+0x29ec>)
   130d2:	699a      	ldr	r2, [r3, #24]
   130d4:	4b52      	ldr	r3, [pc, #328]	; (13220 <main+0x29f0>)
   130d6:	0010      	movs	r0, r2
   130d8:	4798      	blx	r3
   130da:	1c02      	adds	r2, r0, #0
   130dc:	4b36      	ldr	r3, [pc, #216]	; (131b8 <main+0x2988>)
   130de:	1c10      	adds	r0, r2, #0
   130e0:	4798      	blx	r3
   130e2:	0002      	movs	r2, r0
   130e4:	000b      	movs	r3, r1
   130e6:	4c35      	ldr	r4, [pc, #212]	; (131bc <main+0x298c>)
   130e8:	2000      	movs	r0, #0
   130ea:	4935      	ldr	r1, [pc, #212]	; (131c0 <main+0x2990>)
   130ec:	47a0      	blx	r4
   130ee:	0003      	movs	r3, r0
   130f0:	000c      	movs	r4, r1
   130f2:	001d      	movs	r5, r3
   130f4:	0026      	movs	r6, r4
   130f6:	4b48      	ldr	r3, [pc, #288]	; (13218 <main+0x29e8>)
   130f8:	691b      	ldr	r3, [r3, #16]
   130fa:	17d9      	asrs	r1, r3, #31
   130fc:	185a      	adds	r2, r3, r1
   130fe:	404a      	eors	r2, r1
   13100:	4b47      	ldr	r3, [pc, #284]	; (13220 <main+0x29f0>)
   13102:	0010      	movs	r0, r2
   13104:	4798      	blx	r3
   13106:	1c02      	adds	r2, r0, #0
   13108:	4b2b      	ldr	r3, [pc, #172]	; (131b8 <main+0x2988>)
   1310a:	1c10      	adds	r0, r2, #0
   1310c:	4798      	blx	r3
   1310e:	0002      	movs	r2, r0
   13110:	000b      	movs	r3, r1
   13112:	4c2c      	ldr	r4, [pc, #176]	; (131c4 <main+0x2994>)
   13114:	0028      	movs	r0, r5
   13116:	0031      	movs	r1, r6
   13118:	47a0      	blx	r4
   1311a:	0003      	movs	r3, r0
   1311c:	000c      	movs	r4, r1
   1311e:	0019      	movs	r1, r3
   13120:	0022      	movs	r2, r4
   13122:	4b29      	ldr	r3, [pc, #164]	; (131c8 <main+0x2998>)
   13124:	0008      	movs	r0, r1
   13126:	0011      	movs	r1, r2
   13128:	4798      	blx	r3
   1312a:	0002      	movs	r2, r0
   1312c:	4b27      	ldr	r3, [pc, #156]	; (131cc <main+0x299c>)
   1312e:	4928      	ldr	r1, [pc, #160]	; (131d0 <main+0x29a0>)
   13130:	0010      	movs	r0, r2
   13132:	4798      	blx	r3
   13134:	000b      	movs	r3, r1
   13136:	001a      	movs	r2, r3
   13138:	4b26      	ldr	r3, [pc, #152]	; (131d4 <main+0x29a4>)
   1313a:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) / 0x0FFFF;
   1313c:	4b37      	ldr	r3, [pc, #220]	; (1321c <main+0x29ec>)
   1313e:	699a      	ldr	r2, [r3, #24]
   13140:	4b37      	ldr	r3, [pc, #220]	; (13220 <main+0x29f0>)
   13142:	0010      	movs	r0, r2
   13144:	4798      	blx	r3
   13146:	1c02      	adds	r2, r0, #0
   13148:	4b1b      	ldr	r3, [pc, #108]	; (131b8 <main+0x2988>)
   1314a:	1c10      	adds	r0, r2, #0
   1314c:	4798      	blx	r3
   1314e:	0002      	movs	r2, r0
   13150:	000b      	movs	r3, r1
   13152:	4c1a      	ldr	r4, [pc, #104]	; (131bc <main+0x298c>)
   13154:	2000      	movs	r0, #0
   13156:	491a      	ldr	r1, [pc, #104]	; (131c0 <main+0x2990>)
   13158:	47a0      	blx	r4
   1315a:	0003      	movs	r3, r0
   1315c:	000c      	movs	r4, r1
   1315e:	001d      	movs	r5, r3
   13160:	0026      	movs	r6, r4
   13162:	4b2d      	ldr	r3, [pc, #180]	; (13218 <main+0x29e8>)
   13164:	691b      	ldr	r3, [r3, #16]
   13166:	17d9      	asrs	r1, r3, #31
   13168:	185a      	adds	r2, r3, r1
   1316a:	404a      	eors	r2, r1
   1316c:	4b2c      	ldr	r3, [pc, #176]	; (13220 <main+0x29f0>)
   1316e:	0010      	movs	r0, r2
   13170:	4798      	blx	r3
   13172:	1c02      	adds	r2, r0, #0
   13174:	4b10      	ldr	r3, [pc, #64]	; (131b8 <main+0x2988>)
   13176:	1c10      	adds	r0, r2, #0
   13178:	4798      	blx	r3
   1317a:	0002      	movs	r2, r0
   1317c:	000b      	movs	r3, r1
   1317e:	4c11      	ldr	r4, [pc, #68]	; (131c4 <main+0x2994>)
   13180:	0028      	movs	r0, r5
   13182:	0031      	movs	r1, r6
   13184:	47a0      	blx	r4
   13186:	0003      	movs	r3, r0
   13188:	000c      	movs	r4, r1
   1318a:	0019      	movs	r1, r3
   1318c:	0022      	movs	r2, r4
   1318e:	4b0e      	ldr	r3, [pc, #56]	; (131c8 <main+0x2998>)
   13190:	0008      	movs	r0, r1
   13192:	0011      	movs	r1, r2
   13194:	4798      	blx	r3
   13196:	0002      	movs	r2, r0
   13198:	4b0f      	ldr	r3, [pc, #60]	; (131d8 <main+0x29a8>)
   1319a:	490d      	ldr	r1, [pc, #52]	; (131d0 <main+0x29a0>)
   1319c:	0010      	movs	r0, r2
   1319e:	4798      	blx	r3
   131a0:	0003      	movs	r3, r0
   131a2:	b2da      	uxtb	r2, r3
   131a4:	4b0d      	ldr	r3, [pc, #52]	; (131dc <main+0x29ac>)
   131a6:	701a      	strb	r2, [r3, #0]
   131a8:	e042      	b.n	13230 <main+0x2a00>
   131aa:	46c0      	nop			; (mov r8, r8)
   131ac:	200003dc 	.word	0x200003dc
   131b0:	0001448d 	.word	0x0001448d
   131b4:	200000cc 	.word	0x200000cc
   131b8:	00016e95 	.word	0x00016e95
   131bc:	000159a5 	.word	0x000159a5
   131c0:	4107ffe8 	.word	0x4107ffe8
   131c4:	0001620d 	.word	0x0001620d
   131c8:	00016d39 	.word	0x00016d39
   131cc:	000143e1 	.word	0x000143e1
   131d0:	0000ffff 	.word	0x0000ffff
   131d4:	20000328 	.word	0x20000328
   131d8:	00014215 	.word	0x00014215
   131dc:	20000326 	.word	0x20000326
   131e0:	000144c9 	.word	0x000144c9
   131e4:	200000d0 	.word	0x200000d0
   131e8:	000152f9 	.word	0x000152f9
   131ec:	200003ec 	.word	0x200003ec
   131f0:	00014ca1 	.word	0x00014ca1
   131f4:	00014531 	.word	0x00014531
   131f8:	2000032c 	.word	0x2000032c
   131fc:	2000032e 	.word	0x2000032e
   13200:	20000314 	.word	0x20000314
   13204:	0000b479 	.word	0x0000b479
   13208:	000170dd 	.word	0x000170dd
   1320c:	2000030a 	.word	0x2000030a
   13210:	00016da1 	.word	0x00016da1
   13214:	407fffe0 	.word	0x407fffe0
   13218:	20000958 	.word	0x20000958
   1321c:	20000fd4 	.word	0x20000fd4
   13220:	00015259 	.word	0x00015259
					}
					else{
						cycle_index = 0;
   13224:	4be2      	ldr	r3, [pc, #904]	; (135b0 <main+0x2d80>)
   13226:	2200      	movs	r2, #0
   13228:	601a      	str	r2, [r3, #0]
						cycle = 0;
   1322a:	4be2      	ldr	r3, [pc, #904]	; (135b4 <main+0x2d84>)
   1322c:	2200      	movs	r2, #0
   1322e:	701a      	strb	r2, [r3, #0]
					}
					upColor = cycle_index * output_brightness;
   13230:	4bdf      	ldr	r3, [pc, #892]	; (135b0 <main+0x2d80>)
   13232:	681a      	ldr	r2, [r3, #0]
   13234:	4be0      	ldr	r3, [pc, #896]	; (135b8 <main+0x2d88>)
   13236:	0010      	movs	r0, r2
   13238:	4798      	blx	r3
   1323a:	4be0      	ldr	r3, [pc, #896]	; (135bc <main+0x2d8c>)
   1323c:	681a      	ldr	r2, [r3, #0]
   1323e:	4be0      	ldr	r3, [pc, #896]	; (135c0 <main+0x2d90>)
   13240:	1c11      	adds	r1, r2, #0
   13242:	4798      	blx	r3
   13244:	1c03      	adds	r3, r0, #0
   13246:	1c1a      	adds	r2, r3, #0
   13248:	4bde      	ldr	r3, [pc, #888]	; (135c4 <main+0x2d94>)
   1324a:	1c10      	adds	r0, r2, #0
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	b29a      	uxth	r2, r3
   13252:	4bdd      	ldr	r3, [pc, #884]	; (135c8 <main+0x2d98>)
   13254:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   13256:	4bd6      	ldr	r3, [pc, #856]	; (135b0 <main+0x2d80>)
   13258:	681b      	ldr	r3, [r3, #0]
   1325a:	4adc      	ldr	r2, [pc, #880]	; (135cc <main+0x2d9c>)
   1325c:	1ad2      	subs	r2, r2, r3
   1325e:	4bd6      	ldr	r3, [pc, #856]	; (135b8 <main+0x2d88>)
   13260:	0010      	movs	r0, r2
   13262:	4798      	blx	r3
   13264:	4bd5      	ldr	r3, [pc, #852]	; (135bc <main+0x2d8c>)
   13266:	681a      	ldr	r2, [r3, #0]
   13268:	4bd5      	ldr	r3, [pc, #852]	; (135c0 <main+0x2d90>)
   1326a:	1c11      	adds	r1, r2, #0
   1326c:	4798      	blx	r3
   1326e:	1c03      	adds	r3, r0, #0
   13270:	1c1a      	adds	r2, r3, #0
   13272:	4bd4      	ldr	r3, [pc, #848]	; (135c4 <main+0x2d94>)
   13274:	1c10      	adds	r0, r2, #0
   13276:	4798      	blx	r3
   13278:	0003      	movs	r3, r0
   1327a:	b29a      	uxth	r2, r3
   1327c:	4bd4      	ldr	r3, [pc, #848]	; (135d0 <main+0x2da0>)
   1327e:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   13280:	4bd1      	ldr	r3, [pc, #836]	; (135c8 <main+0x2d98>)
   13282:	8819      	ldrh	r1, [r3, #0]
   13284:	4bd2      	ldr	r3, [pc, #840]	; (135d0 <main+0x2da0>)
   13286:	881a      	ldrh	r2, [r3, #0]
   13288:	4bca      	ldr	r3, [pc, #808]	; (135b4 <main+0x2d84>)
   1328a:	781b      	ldrb	r3, [r3, #0]
   1328c:	4dd1      	ldr	r5, [pc, #836]	; (135d4 <main+0x2da4>)
   1328e:	0038      	movs	r0, r7
   13290:	4cd1      	ldr	r4, [pc, #836]	; (135d8 <main+0x2da8>)
   13292:	47a0      	blx	r4
   13294:	003b      	movs	r3, r7
   13296:	0028      	movs	r0, r5
   13298:	0019      	movs	r1, r3
   1329a:	230c      	movs	r3, #12
   1329c:	001a      	movs	r2, r3
   1329e:	4bcf      	ldr	r3, [pc, #828]	; (135dc <main+0x2dac>)
   132a0:	4798      	blx	r3
					break;
   132a2:	e2a7      	b.n	137f4 <main+0x2fc4>
				}
				case COLOR_X_ACCEL:
				{
					if(axKalman < 0){
   132a4:	4bce      	ldr	r3, [pc, #824]	; (135e0 <main+0x2db0>)
   132a6:	681a      	ldr	r2, [r3, #0]
   132a8:	4bce      	ldr	r3, [pc, #824]	; (135e4 <main+0x2db4>)
   132aa:	2100      	movs	r1, #0
   132ac:	1c10      	adds	r0, r2, #0
   132ae:	4798      	blx	r3
   132b0:	1e03      	subs	r3, r0, #0
   132b2:	d040      	beq.n	13336 <main+0x2b06>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
   132b4:	4bca      	ldr	r3, [pc, #808]	; (135e0 <main+0x2db0>)
   132b6:	681a      	ldr	r2, [r3, #0]
   132b8:	4bcb      	ldr	r3, [pc, #812]	; (135e8 <main+0x2db8>)
   132ba:	49cc      	ldr	r1, [pc, #816]	; (135ec <main+0x2dbc>)
   132bc:	1c10      	adds	r0, r2, #0
   132be:	4798      	blx	r3
   132c0:	1c03      	adds	r3, r0, #0
   132c2:	1c1a      	adds	r2, r3, #0
   132c4:	4bca      	ldr	r3, [pc, #808]	; (135f0 <main+0x2dc0>)
   132c6:	1c10      	adds	r0, r2, #0
   132c8:	4798      	blx	r3
   132ca:	4cca      	ldr	r4, [pc, #808]	; (135f4 <main+0x2dc4>)
   132cc:	4aca      	ldr	r2, [pc, #808]	; (135f8 <main+0x2dc8>)
   132ce:	4bcb      	ldr	r3, [pc, #812]	; (135fc <main+0x2dcc>)
   132d0:	47a0      	blx	r4
   132d2:	0003      	movs	r3, r0
   132d4:	000c      	movs	r4, r1
   132d6:	0019      	movs	r1, r3
   132d8:	0022      	movs	r2, r4
   132da:	4bc9      	ldr	r3, [pc, #804]	; (13600 <main+0x2dd0>)
   132dc:	0008      	movs	r0, r1
   132de:	0011      	movs	r1, r2
   132e0:	4798      	blx	r3
   132e2:	0002      	movs	r2, r0
   132e4:	4bc7      	ldr	r3, [pc, #796]	; (13604 <main+0x2dd4>)
   132e6:	49b9      	ldr	r1, [pc, #740]	; (135cc <main+0x2d9c>)
   132e8:	0010      	movs	r0, r2
   132ea:	4798      	blx	r3
   132ec:	000b      	movs	r3, r1
   132ee:	001a      	movs	r2, r3
   132f0:	4baf      	ldr	r3, [pc, #700]	; (135b0 <main+0x2d80>)
   132f2:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
   132f4:	4bba      	ldr	r3, [pc, #744]	; (135e0 <main+0x2db0>)
   132f6:	681a      	ldr	r2, [r3, #0]
   132f8:	4bbb      	ldr	r3, [pc, #748]	; (135e8 <main+0x2db8>)
   132fa:	49bc      	ldr	r1, [pc, #752]	; (135ec <main+0x2dbc>)
   132fc:	1c10      	adds	r0, r2, #0
   132fe:	4798      	blx	r3
   13300:	1c03      	adds	r3, r0, #0
   13302:	1c1a      	adds	r2, r3, #0
   13304:	4bba      	ldr	r3, [pc, #744]	; (135f0 <main+0x2dc0>)
   13306:	1c10      	adds	r0, r2, #0
   13308:	4798      	blx	r3
   1330a:	4cba      	ldr	r4, [pc, #744]	; (135f4 <main+0x2dc4>)
   1330c:	4aba      	ldr	r2, [pc, #744]	; (135f8 <main+0x2dc8>)
   1330e:	4bbb      	ldr	r3, [pc, #748]	; (135fc <main+0x2dcc>)
   13310:	47a0      	blx	r4
   13312:	0003      	movs	r3, r0
   13314:	000c      	movs	r4, r1
   13316:	0019      	movs	r1, r3
   13318:	0022      	movs	r2, r4
   1331a:	4bb9      	ldr	r3, [pc, #740]	; (13600 <main+0x2dd0>)
   1331c:	0008      	movs	r0, r1
   1331e:	0011      	movs	r1, r2
   13320:	4798      	blx	r3
   13322:	0002      	movs	r2, r0
   13324:	4bb8      	ldr	r3, [pc, #736]	; (13608 <main+0x2dd8>)
   13326:	49a9      	ldr	r1, [pc, #676]	; (135cc <main+0x2d9c>)
   13328:	0010      	movs	r0, r2
   1332a:	4798      	blx	r3
   1332c:	0003      	movs	r3, r0
   1332e:	b2da      	uxtb	r2, r3
   13330:	4ba0      	ldr	r3, [pc, #640]	; (135b4 <main+0x2d84>)
   13332:	701a      	strb	r2, [r3, #0]
   13334:	e03f      	b.n	133b6 <main+0x2b86>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
   13336:	4baa      	ldr	r3, [pc, #680]	; (135e0 <main+0x2db0>)
   13338:	681a      	ldr	r2, [r3, #0]
   1333a:	4bab      	ldr	r3, [pc, #684]	; (135e8 <main+0x2db8>)
   1333c:	49ab      	ldr	r1, [pc, #684]	; (135ec <main+0x2dbc>)
   1333e:	1c10      	adds	r0, r2, #0
   13340:	4798      	blx	r3
   13342:	1c03      	adds	r3, r0, #0
   13344:	1c1a      	adds	r2, r3, #0
   13346:	4baa      	ldr	r3, [pc, #680]	; (135f0 <main+0x2dc0>)
   13348:	1c10      	adds	r0, r2, #0
   1334a:	4798      	blx	r3
   1334c:	4ca9      	ldr	r4, [pc, #676]	; (135f4 <main+0x2dc4>)
   1334e:	4aaa      	ldr	r2, [pc, #680]	; (135f8 <main+0x2dc8>)
   13350:	4baa      	ldr	r3, [pc, #680]	; (135fc <main+0x2dcc>)
   13352:	47a0      	blx	r4
   13354:	0003      	movs	r3, r0
   13356:	000c      	movs	r4, r1
   13358:	0019      	movs	r1, r3
   1335a:	0022      	movs	r2, r4
   1335c:	4ba8      	ldr	r3, [pc, #672]	; (13600 <main+0x2dd0>)
   1335e:	0008      	movs	r0, r1
   13360:	0011      	movs	r1, r2
   13362:	4798      	blx	r3
   13364:	0002      	movs	r2, r0
   13366:	4ba7      	ldr	r3, [pc, #668]	; (13604 <main+0x2dd4>)
   13368:	4998      	ldr	r1, [pc, #608]	; (135cc <main+0x2d9c>)
   1336a:	0010      	movs	r0, r2
   1336c:	4798      	blx	r3
   1336e:	000b      	movs	r3, r1
   13370:	001a      	movs	r2, r3
   13372:	4b8f      	ldr	r3, [pc, #572]	; (135b0 <main+0x2d80>)
   13374:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
   13376:	4b9a      	ldr	r3, [pc, #616]	; (135e0 <main+0x2db0>)
   13378:	681a      	ldr	r2, [r3, #0]
   1337a:	4b9b      	ldr	r3, [pc, #620]	; (135e8 <main+0x2db8>)
   1337c:	499b      	ldr	r1, [pc, #620]	; (135ec <main+0x2dbc>)
   1337e:	1c10      	adds	r0, r2, #0
   13380:	4798      	blx	r3
   13382:	1c03      	adds	r3, r0, #0
   13384:	1c1a      	adds	r2, r3, #0
   13386:	4b9a      	ldr	r3, [pc, #616]	; (135f0 <main+0x2dc0>)
   13388:	1c10      	adds	r0, r2, #0
   1338a:	4798      	blx	r3
   1338c:	4c99      	ldr	r4, [pc, #612]	; (135f4 <main+0x2dc4>)
   1338e:	4a9a      	ldr	r2, [pc, #616]	; (135f8 <main+0x2dc8>)
   13390:	4b9a      	ldr	r3, [pc, #616]	; (135fc <main+0x2dcc>)
   13392:	47a0      	blx	r4
   13394:	0003      	movs	r3, r0
   13396:	000c      	movs	r4, r1
   13398:	0019      	movs	r1, r3
   1339a:	0022      	movs	r2, r4
   1339c:	4b98      	ldr	r3, [pc, #608]	; (13600 <main+0x2dd0>)
   1339e:	0008      	movs	r0, r1
   133a0:	0011      	movs	r1, r2
   133a2:	4798      	blx	r3
   133a4:	0002      	movs	r2, r0
   133a6:	4b98      	ldr	r3, [pc, #608]	; (13608 <main+0x2dd8>)
   133a8:	4988      	ldr	r1, [pc, #544]	; (135cc <main+0x2d9c>)
   133aa:	0010      	movs	r0, r2
   133ac:	4798      	blx	r3
   133ae:	0003      	movs	r3, r0
   133b0:	b2da      	uxtb	r2, r3
   133b2:	4b80      	ldr	r3, [pc, #512]	; (135b4 <main+0x2d84>)
   133b4:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   133b6:	4b7e      	ldr	r3, [pc, #504]	; (135b0 <main+0x2d80>)
   133b8:	681a      	ldr	r2, [r3, #0]
   133ba:	4b7f      	ldr	r3, [pc, #508]	; (135b8 <main+0x2d88>)
   133bc:	0010      	movs	r0, r2
   133be:	4798      	blx	r3
   133c0:	4b7e      	ldr	r3, [pc, #504]	; (135bc <main+0x2d8c>)
   133c2:	681a      	ldr	r2, [r3, #0]
   133c4:	4b7e      	ldr	r3, [pc, #504]	; (135c0 <main+0x2d90>)
   133c6:	1c11      	adds	r1, r2, #0
   133c8:	4798      	blx	r3
   133ca:	1c03      	adds	r3, r0, #0
   133cc:	1c1a      	adds	r2, r3, #0
   133ce:	4b7d      	ldr	r3, [pc, #500]	; (135c4 <main+0x2d94>)
   133d0:	1c10      	adds	r0, r2, #0
   133d2:	4798      	blx	r3
   133d4:	0003      	movs	r3, r0
   133d6:	b29a      	uxth	r2, r3
   133d8:	4b7b      	ldr	r3, [pc, #492]	; (135c8 <main+0x2d98>)
   133da:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   133dc:	4b74      	ldr	r3, [pc, #464]	; (135b0 <main+0x2d80>)
   133de:	681b      	ldr	r3, [r3, #0]
   133e0:	4a7a      	ldr	r2, [pc, #488]	; (135cc <main+0x2d9c>)
   133e2:	1ad2      	subs	r2, r2, r3
   133e4:	4b74      	ldr	r3, [pc, #464]	; (135b8 <main+0x2d88>)
   133e6:	0010      	movs	r0, r2
   133e8:	4798      	blx	r3
   133ea:	4b74      	ldr	r3, [pc, #464]	; (135bc <main+0x2d8c>)
   133ec:	681a      	ldr	r2, [r3, #0]
   133ee:	4b74      	ldr	r3, [pc, #464]	; (135c0 <main+0x2d90>)
   133f0:	1c11      	adds	r1, r2, #0
   133f2:	4798      	blx	r3
   133f4:	1c03      	adds	r3, r0, #0
   133f6:	1c1a      	adds	r2, r3, #0
   133f8:	4b72      	ldr	r3, [pc, #456]	; (135c4 <main+0x2d94>)
   133fa:	1c10      	adds	r0, r2, #0
   133fc:	4798      	blx	r3
   133fe:	0003      	movs	r3, r0
   13400:	b29a      	uxth	r2, r3
   13402:	4b73      	ldr	r3, [pc, #460]	; (135d0 <main+0x2da0>)
   13404:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   13406:	4b70      	ldr	r3, [pc, #448]	; (135c8 <main+0x2d98>)
   13408:	8819      	ldrh	r1, [r3, #0]
   1340a:	4b71      	ldr	r3, [pc, #452]	; (135d0 <main+0x2da0>)
   1340c:	881a      	ldrh	r2, [r3, #0]
   1340e:	4b69      	ldr	r3, [pc, #420]	; (135b4 <main+0x2d84>)
   13410:	781b      	ldrb	r3, [r3, #0]
   13412:	4d70      	ldr	r5, [pc, #448]	; (135d4 <main+0x2da4>)
   13414:	0038      	movs	r0, r7
   13416:	4c70      	ldr	r4, [pc, #448]	; (135d8 <main+0x2da8>)
   13418:	47a0      	blx	r4
   1341a:	003b      	movs	r3, r7
   1341c:	0028      	movs	r0, r5
   1341e:	0019      	movs	r1, r3
   13420:	230c      	movs	r3, #12
   13422:	001a      	movs	r2, r3
   13424:	4b6d      	ldr	r3, [pc, #436]	; (135dc <main+0x2dac>)
   13426:	4798      	blx	r3
					break;
   13428:	e1e4      	b.n	137f4 <main+0x2fc4>
				}
				case COLOR_Y_ACCEL:
				{
					if(ayKalman < 0){
   1342a:	4b78      	ldr	r3, [pc, #480]	; (1360c <main+0x2ddc>)
   1342c:	681a      	ldr	r2, [r3, #0]
   1342e:	4b6d      	ldr	r3, [pc, #436]	; (135e4 <main+0x2db4>)
   13430:	2100      	movs	r1, #0
   13432:	1c10      	adds	r0, r2, #0
   13434:	4798      	blx	r3
   13436:	1e03      	subs	r3, r0, #0
   13438:	d040      	beq.n	134bc <main+0x2c8c>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
   1343a:	4b74      	ldr	r3, [pc, #464]	; (1360c <main+0x2ddc>)
   1343c:	681a      	ldr	r2, [r3, #0]
   1343e:	4b6a      	ldr	r3, [pc, #424]	; (135e8 <main+0x2db8>)
   13440:	496a      	ldr	r1, [pc, #424]	; (135ec <main+0x2dbc>)
   13442:	1c10      	adds	r0, r2, #0
   13444:	4798      	blx	r3
   13446:	1c03      	adds	r3, r0, #0
   13448:	1c1a      	adds	r2, r3, #0
   1344a:	4b69      	ldr	r3, [pc, #420]	; (135f0 <main+0x2dc0>)
   1344c:	1c10      	adds	r0, r2, #0
   1344e:	4798      	blx	r3
   13450:	4c68      	ldr	r4, [pc, #416]	; (135f4 <main+0x2dc4>)
   13452:	4a69      	ldr	r2, [pc, #420]	; (135f8 <main+0x2dc8>)
   13454:	4b69      	ldr	r3, [pc, #420]	; (135fc <main+0x2dcc>)
   13456:	47a0      	blx	r4
   13458:	0003      	movs	r3, r0
   1345a:	000c      	movs	r4, r1
   1345c:	0019      	movs	r1, r3
   1345e:	0022      	movs	r2, r4
   13460:	4b67      	ldr	r3, [pc, #412]	; (13600 <main+0x2dd0>)
   13462:	0008      	movs	r0, r1
   13464:	0011      	movs	r1, r2
   13466:	4798      	blx	r3
   13468:	0002      	movs	r2, r0
   1346a:	4b66      	ldr	r3, [pc, #408]	; (13604 <main+0x2dd4>)
   1346c:	4957      	ldr	r1, [pc, #348]	; (135cc <main+0x2d9c>)
   1346e:	0010      	movs	r0, r2
   13470:	4798      	blx	r3
   13472:	000b      	movs	r3, r1
   13474:	001a      	movs	r2, r3
   13476:	4b4e      	ldr	r3, [pc, #312]	; (135b0 <main+0x2d80>)
   13478:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
   1347a:	4b64      	ldr	r3, [pc, #400]	; (1360c <main+0x2ddc>)
   1347c:	681a      	ldr	r2, [r3, #0]
   1347e:	4b5a      	ldr	r3, [pc, #360]	; (135e8 <main+0x2db8>)
   13480:	495a      	ldr	r1, [pc, #360]	; (135ec <main+0x2dbc>)
   13482:	1c10      	adds	r0, r2, #0
   13484:	4798      	blx	r3
   13486:	1c03      	adds	r3, r0, #0
   13488:	1c1a      	adds	r2, r3, #0
   1348a:	4b59      	ldr	r3, [pc, #356]	; (135f0 <main+0x2dc0>)
   1348c:	1c10      	adds	r0, r2, #0
   1348e:	4798      	blx	r3
   13490:	4c58      	ldr	r4, [pc, #352]	; (135f4 <main+0x2dc4>)
   13492:	4a59      	ldr	r2, [pc, #356]	; (135f8 <main+0x2dc8>)
   13494:	4b59      	ldr	r3, [pc, #356]	; (135fc <main+0x2dcc>)
   13496:	47a0      	blx	r4
   13498:	0003      	movs	r3, r0
   1349a:	000c      	movs	r4, r1
   1349c:	0019      	movs	r1, r3
   1349e:	0022      	movs	r2, r4
   134a0:	4b57      	ldr	r3, [pc, #348]	; (13600 <main+0x2dd0>)
   134a2:	0008      	movs	r0, r1
   134a4:	0011      	movs	r1, r2
   134a6:	4798      	blx	r3
   134a8:	0002      	movs	r2, r0
   134aa:	4b57      	ldr	r3, [pc, #348]	; (13608 <main+0x2dd8>)
   134ac:	4947      	ldr	r1, [pc, #284]	; (135cc <main+0x2d9c>)
   134ae:	0010      	movs	r0, r2
   134b0:	4798      	blx	r3
   134b2:	0003      	movs	r3, r0
   134b4:	b2da      	uxtb	r2, r3
   134b6:	4b3f      	ldr	r3, [pc, #252]	; (135b4 <main+0x2d84>)
   134b8:	701a      	strb	r2, [r3, #0]
   134ba:	e03f      	b.n	1353c <main+0x2d0c>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
   134bc:	4b53      	ldr	r3, [pc, #332]	; (1360c <main+0x2ddc>)
   134be:	681a      	ldr	r2, [r3, #0]
   134c0:	4b49      	ldr	r3, [pc, #292]	; (135e8 <main+0x2db8>)
   134c2:	494a      	ldr	r1, [pc, #296]	; (135ec <main+0x2dbc>)
   134c4:	1c10      	adds	r0, r2, #0
   134c6:	4798      	blx	r3
   134c8:	1c03      	adds	r3, r0, #0
   134ca:	1c1a      	adds	r2, r3, #0
   134cc:	4b48      	ldr	r3, [pc, #288]	; (135f0 <main+0x2dc0>)
   134ce:	1c10      	adds	r0, r2, #0
   134d0:	4798      	blx	r3
   134d2:	4c48      	ldr	r4, [pc, #288]	; (135f4 <main+0x2dc4>)
   134d4:	4a48      	ldr	r2, [pc, #288]	; (135f8 <main+0x2dc8>)
   134d6:	4b49      	ldr	r3, [pc, #292]	; (135fc <main+0x2dcc>)
   134d8:	47a0      	blx	r4
   134da:	0003      	movs	r3, r0
   134dc:	000c      	movs	r4, r1
   134de:	0019      	movs	r1, r3
   134e0:	0022      	movs	r2, r4
   134e2:	4b47      	ldr	r3, [pc, #284]	; (13600 <main+0x2dd0>)
   134e4:	0008      	movs	r0, r1
   134e6:	0011      	movs	r1, r2
   134e8:	4798      	blx	r3
   134ea:	0002      	movs	r2, r0
   134ec:	4b45      	ldr	r3, [pc, #276]	; (13604 <main+0x2dd4>)
   134ee:	4937      	ldr	r1, [pc, #220]	; (135cc <main+0x2d9c>)
   134f0:	0010      	movs	r0, r2
   134f2:	4798      	blx	r3
   134f4:	000b      	movs	r3, r1
   134f6:	001a      	movs	r2, r3
   134f8:	4b2d      	ldr	r3, [pc, #180]	; (135b0 <main+0x2d80>)
   134fa:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
   134fc:	4b43      	ldr	r3, [pc, #268]	; (1360c <main+0x2ddc>)
   134fe:	681a      	ldr	r2, [r3, #0]
   13500:	4b39      	ldr	r3, [pc, #228]	; (135e8 <main+0x2db8>)
   13502:	493a      	ldr	r1, [pc, #232]	; (135ec <main+0x2dbc>)
   13504:	1c10      	adds	r0, r2, #0
   13506:	4798      	blx	r3
   13508:	1c03      	adds	r3, r0, #0
   1350a:	1c1a      	adds	r2, r3, #0
   1350c:	4b38      	ldr	r3, [pc, #224]	; (135f0 <main+0x2dc0>)
   1350e:	1c10      	adds	r0, r2, #0
   13510:	4798      	blx	r3
   13512:	4c38      	ldr	r4, [pc, #224]	; (135f4 <main+0x2dc4>)
   13514:	4a38      	ldr	r2, [pc, #224]	; (135f8 <main+0x2dc8>)
   13516:	4b39      	ldr	r3, [pc, #228]	; (135fc <main+0x2dcc>)
   13518:	47a0      	blx	r4
   1351a:	0003      	movs	r3, r0
   1351c:	000c      	movs	r4, r1
   1351e:	0019      	movs	r1, r3
   13520:	0022      	movs	r2, r4
   13522:	4b37      	ldr	r3, [pc, #220]	; (13600 <main+0x2dd0>)
   13524:	0008      	movs	r0, r1
   13526:	0011      	movs	r1, r2
   13528:	4798      	blx	r3
   1352a:	0002      	movs	r2, r0
   1352c:	4b36      	ldr	r3, [pc, #216]	; (13608 <main+0x2dd8>)
   1352e:	4927      	ldr	r1, [pc, #156]	; (135cc <main+0x2d9c>)
   13530:	0010      	movs	r0, r2
   13532:	4798      	blx	r3
   13534:	0003      	movs	r3, r0
   13536:	b2da      	uxtb	r2, r3
   13538:	4b1e      	ldr	r3, [pc, #120]	; (135b4 <main+0x2d84>)
   1353a:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   1353c:	4b1c      	ldr	r3, [pc, #112]	; (135b0 <main+0x2d80>)
   1353e:	681a      	ldr	r2, [r3, #0]
   13540:	4b1d      	ldr	r3, [pc, #116]	; (135b8 <main+0x2d88>)
   13542:	0010      	movs	r0, r2
   13544:	4798      	blx	r3
   13546:	4b1d      	ldr	r3, [pc, #116]	; (135bc <main+0x2d8c>)
   13548:	681a      	ldr	r2, [r3, #0]
   1354a:	4b1d      	ldr	r3, [pc, #116]	; (135c0 <main+0x2d90>)
   1354c:	1c11      	adds	r1, r2, #0
   1354e:	4798      	blx	r3
   13550:	1c03      	adds	r3, r0, #0
   13552:	1c1a      	adds	r2, r3, #0
   13554:	4b1b      	ldr	r3, [pc, #108]	; (135c4 <main+0x2d94>)
   13556:	1c10      	adds	r0, r2, #0
   13558:	4798      	blx	r3
   1355a:	0003      	movs	r3, r0
   1355c:	b29a      	uxth	r2, r3
   1355e:	4b1a      	ldr	r3, [pc, #104]	; (135c8 <main+0x2d98>)
   13560:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   13562:	4b13      	ldr	r3, [pc, #76]	; (135b0 <main+0x2d80>)
   13564:	681b      	ldr	r3, [r3, #0]
   13566:	4a19      	ldr	r2, [pc, #100]	; (135cc <main+0x2d9c>)
   13568:	1ad2      	subs	r2, r2, r3
   1356a:	4b13      	ldr	r3, [pc, #76]	; (135b8 <main+0x2d88>)
   1356c:	0010      	movs	r0, r2
   1356e:	4798      	blx	r3
   13570:	4b12      	ldr	r3, [pc, #72]	; (135bc <main+0x2d8c>)
   13572:	681a      	ldr	r2, [r3, #0]
   13574:	4b12      	ldr	r3, [pc, #72]	; (135c0 <main+0x2d90>)
   13576:	1c11      	adds	r1, r2, #0
   13578:	4798      	blx	r3
   1357a:	1c03      	adds	r3, r0, #0
   1357c:	1c1a      	adds	r2, r3, #0
   1357e:	4b11      	ldr	r3, [pc, #68]	; (135c4 <main+0x2d94>)
   13580:	1c10      	adds	r0, r2, #0
   13582:	4798      	blx	r3
   13584:	0003      	movs	r3, r0
   13586:	b29a      	uxth	r2, r3
   13588:	4b11      	ldr	r3, [pc, #68]	; (135d0 <main+0x2da0>)
   1358a:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   1358c:	4b0e      	ldr	r3, [pc, #56]	; (135c8 <main+0x2d98>)
   1358e:	8819      	ldrh	r1, [r3, #0]
   13590:	4b0f      	ldr	r3, [pc, #60]	; (135d0 <main+0x2da0>)
   13592:	881a      	ldrh	r2, [r3, #0]
   13594:	4b07      	ldr	r3, [pc, #28]	; (135b4 <main+0x2d84>)
   13596:	781b      	ldrb	r3, [r3, #0]
   13598:	4d0e      	ldr	r5, [pc, #56]	; (135d4 <main+0x2da4>)
   1359a:	0038      	movs	r0, r7
   1359c:	4c0e      	ldr	r4, [pc, #56]	; (135d8 <main+0x2da8>)
   1359e:	47a0      	blx	r4
   135a0:	003b      	movs	r3, r7
   135a2:	0028      	movs	r0, r5
   135a4:	0019      	movs	r1, r3
   135a6:	230c      	movs	r3, #12
   135a8:	001a      	movs	r2, r3
   135aa:	4b0c      	ldr	r3, [pc, #48]	; (135dc <main+0x2dac>)
   135ac:	4798      	blx	r3
					break;
   135ae:	e121      	b.n	137f4 <main+0x2fc4>
   135b0:	20000328 	.word	0x20000328
   135b4:	20000326 	.word	0x20000326
   135b8:	000152f9 	.word	0x000152f9
   135bc:	200003ec 	.word	0x200003ec
   135c0:	00014ca1 	.word	0x00014ca1
   135c4:	00014531 	.word	0x00014531
   135c8:	2000032c 	.word	0x2000032c
   135cc:	0000ffff 	.word	0x0000ffff
   135d0:	2000032e 	.word	0x2000032e
   135d4:	20000314 	.word	0x20000314
   135d8:	0000b479 	.word	0x0000b479
   135dc:	000170dd 	.word	0x000170dd
   135e0:	200003d0 	.word	0x200003d0
   135e4:	0001448d 	.word	0x0001448d
   135e8:	0001459d 	.word	0x0001459d
   135ec:	44bb8000 	.word	0x44bb8000
   135f0:	00016e95 	.word	0x00016e95
   135f4:	0001620d 	.word	0x0001620d
   135f8:	70a3d70a 	.word	0x70a3d70a
   135fc:	4050623d 	.word	0x4050623d
   13600:	00016d39 	.word	0x00016d39
   13604:	000143e1 	.word	0x000143e1
   13608:	00014215 	.word	0x00014215
   1360c:	200003d4 	.word	0x200003d4
				}
				case COLOR_Z_ACCEL:
				{
					if(azKalman < 0){
   13610:	4bcf      	ldr	r3, [pc, #828]	; (13950 <main+0x3120>)
   13612:	681a      	ldr	r2, [r3, #0]
   13614:	4bcf      	ldr	r3, [pc, #828]	; (13954 <main+0x3124>)
   13616:	2100      	movs	r1, #0
   13618:	1c10      	adds	r0, r2, #0
   1361a:	4798      	blx	r3
   1361c:	1e03      	subs	r3, r0, #0
   1361e:	d056      	beq.n	136ce <main+0x2e9e>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) % 0x0FFFF;
   13620:	4bcd      	ldr	r3, [pc, #820]	; (13958 <main+0x3128>)
   13622:	681a      	ldr	r2, [r3, #0]
   13624:	4bcd      	ldr	r3, [pc, #820]	; (1395c <main+0x312c>)
   13626:	1c10      	adds	r0, r2, #0
   13628:	4798      	blx	r3
   1362a:	0002      	movs	r2, r0
   1362c:	000b      	movs	r3, r1
   1362e:	4ccc      	ldr	r4, [pc, #816]	; (13960 <main+0x3130>)
   13630:	2000      	movs	r0, #0
   13632:	49cc      	ldr	r1, [pc, #816]	; (13964 <main+0x3134>)
   13634:	47a0      	blx	r4
   13636:	0003      	movs	r3, r0
   13638:	000c      	movs	r4, r1
   1363a:	001d      	movs	r5, r3
   1363c:	0026      	movs	r6, r4
   1363e:	4bc4      	ldr	r3, [pc, #784]	; (13950 <main+0x3120>)
   13640:	681a      	ldr	r2, [r3, #0]
   13642:	4bc6      	ldr	r3, [pc, #792]	; (1395c <main+0x312c>)
   13644:	1c10      	adds	r0, r2, #0
   13646:	4798      	blx	r3
   13648:	0002      	movs	r2, r0
   1364a:	000b      	movs	r3, r1
   1364c:	4cc6      	ldr	r4, [pc, #792]	; (13968 <main+0x3138>)
   1364e:	0028      	movs	r0, r5
   13650:	0031      	movs	r1, r6
   13652:	47a0      	blx	r4
   13654:	0003      	movs	r3, r0
   13656:	000c      	movs	r4, r1
   13658:	0019      	movs	r1, r3
   1365a:	0022      	movs	r2, r4
   1365c:	4bc3      	ldr	r3, [pc, #780]	; (1396c <main+0x313c>)
   1365e:	0008      	movs	r0, r1
   13660:	0011      	movs	r1, r2
   13662:	4798      	blx	r3
   13664:	0002      	movs	r2, r0
   13666:	4bc2      	ldr	r3, [pc, #776]	; (13970 <main+0x3140>)
   13668:	49c2      	ldr	r1, [pc, #776]	; (13974 <main+0x3144>)
   1366a:	0010      	movs	r0, r2
   1366c:	4798      	blx	r3
   1366e:	000b      	movs	r3, r1
   13670:	001a      	movs	r2, r3
   13672:	4bc1      	ldr	r3, [pc, #772]	; (13978 <main+0x3148>)
   13674:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) / 0x0FFFF;
   13676:	4bb8      	ldr	r3, [pc, #736]	; (13958 <main+0x3128>)
   13678:	681a      	ldr	r2, [r3, #0]
   1367a:	4bb8      	ldr	r3, [pc, #736]	; (1395c <main+0x312c>)
   1367c:	1c10      	adds	r0, r2, #0
   1367e:	4798      	blx	r3
   13680:	0002      	movs	r2, r0
   13682:	000b      	movs	r3, r1
   13684:	4cb6      	ldr	r4, [pc, #728]	; (13960 <main+0x3130>)
   13686:	2000      	movs	r0, #0
   13688:	49b6      	ldr	r1, [pc, #728]	; (13964 <main+0x3134>)
   1368a:	47a0      	blx	r4
   1368c:	0003      	movs	r3, r0
   1368e:	000c      	movs	r4, r1
   13690:	001d      	movs	r5, r3
   13692:	0026      	movs	r6, r4
   13694:	4bae      	ldr	r3, [pc, #696]	; (13950 <main+0x3120>)
   13696:	681a      	ldr	r2, [r3, #0]
   13698:	4bb0      	ldr	r3, [pc, #704]	; (1395c <main+0x312c>)
   1369a:	1c10      	adds	r0, r2, #0
   1369c:	4798      	blx	r3
   1369e:	0002      	movs	r2, r0
   136a0:	000b      	movs	r3, r1
   136a2:	4cb1      	ldr	r4, [pc, #708]	; (13968 <main+0x3138>)
   136a4:	0028      	movs	r0, r5
   136a6:	0031      	movs	r1, r6
   136a8:	47a0      	blx	r4
   136aa:	0003      	movs	r3, r0
   136ac:	000c      	movs	r4, r1
   136ae:	0019      	movs	r1, r3
   136b0:	0022      	movs	r2, r4
   136b2:	4bae      	ldr	r3, [pc, #696]	; (1396c <main+0x313c>)
   136b4:	0008      	movs	r0, r1
   136b6:	0011      	movs	r1, r2
   136b8:	4798      	blx	r3
   136ba:	0002      	movs	r2, r0
   136bc:	4baf      	ldr	r3, [pc, #700]	; (1397c <main+0x314c>)
   136be:	49ad      	ldr	r1, [pc, #692]	; (13974 <main+0x3144>)
   136c0:	0010      	movs	r0, r2
   136c2:	4798      	blx	r3
   136c4:	0003      	movs	r3, r0
   136c6:	b2da      	uxtb	r2, r3
   136c8:	4bad      	ldr	r3, [pc, #692]	; (13980 <main+0x3150>)
   136ca:	701a      	strb	r2, [r3, #0]
   136cc:	e055      	b.n	1377a <main+0x2f4a>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) % 0x0FFFF;
   136ce:	4bad      	ldr	r3, [pc, #692]	; (13984 <main+0x3154>)
   136d0:	681a      	ldr	r2, [r3, #0]
   136d2:	4ba2      	ldr	r3, [pc, #648]	; (1395c <main+0x312c>)
   136d4:	1c10      	adds	r0, r2, #0
   136d6:	4798      	blx	r3
   136d8:	0002      	movs	r2, r0
   136da:	000b      	movs	r3, r1
   136dc:	4ca0      	ldr	r4, [pc, #640]	; (13960 <main+0x3130>)
   136de:	2000      	movs	r0, #0
   136e0:	49a0      	ldr	r1, [pc, #640]	; (13964 <main+0x3134>)
   136e2:	47a0      	blx	r4
   136e4:	0003      	movs	r3, r0
   136e6:	000c      	movs	r4, r1
   136e8:	001d      	movs	r5, r3
   136ea:	0026      	movs	r6, r4
   136ec:	4b98      	ldr	r3, [pc, #608]	; (13950 <main+0x3120>)
   136ee:	681a      	ldr	r2, [r3, #0]
   136f0:	4b9a      	ldr	r3, [pc, #616]	; (1395c <main+0x312c>)
   136f2:	1c10      	adds	r0, r2, #0
   136f4:	4798      	blx	r3
   136f6:	0002      	movs	r2, r0
   136f8:	000b      	movs	r3, r1
   136fa:	4c9b      	ldr	r4, [pc, #620]	; (13968 <main+0x3138>)
   136fc:	0028      	movs	r0, r5
   136fe:	0031      	movs	r1, r6
   13700:	47a0      	blx	r4
   13702:	0003      	movs	r3, r0
   13704:	000c      	movs	r4, r1
   13706:	0019      	movs	r1, r3
   13708:	0022      	movs	r2, r4
   1370a:	4b98      	ldr	r3, [pc, #608]	; (1396c <main+0x313c>)
   1370c:	0008      	movs	r0, r1
   1370e:	0011      	movs	r1, r2
   13710:	4798      	blx	r3
   13712:	0002      	movs	r2, r0
   13714:	4b96      	ldr	r3, [pc, #600]	; (13970 <main+0x3140>)
   13716:	4997      	ldr	r1, [pc, #604]	; (13974 <main+0x3144>)
   13718:	0010      	movs	r0, r2
   1371a:	4798      	blx	r3
   1371c:	000b      	movs	r3, r1
   1371e:	001a      	movs	r2, r3
   13720:	4b95      	ldr	r3, [pc, #596]	; (13978 <main+0x3148>)
   13722:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) / 0x0FFFF;
   13724:	4b97      	ldr	r3, [pc, #604]	; (13984 <main+0x3154>)
   13726:	681a      	ldr	r2, [r3, #0]
   13728:	4b8c      	ldr	r3, [pc, #560]	; (1395c <main+0x312c>)
   1372a:	1c10      	adds	r0, r2, #0
   1372c:	4798      	blx	r3
   1372e:	0002      	movs	r2, r0
   13730:	000b      	movs	r3, r1
   13732:	4c8b      	ldr	r4, [pc, #556]	; (13960 <main+0x3130>)
   13734:	2000      	movs	r0, #0
   13736:	498b      	ldr	r1, [pc, #556]	; (13964 <main+0x3134>)
   13738:	47a0      	blx	r4
   1373a:	0003      	movs	r3, r0
   1373c:	000c      	movs	r4, r1
   1373e:	001d      	movs	r5, r3
   13740:	0026      	movs	r6, r4
   13742:	4b83      	ldr	r3, [pc, #524]	; (13950 <main+0x3120>)
   13744:	681a      	ldr	r2, [r3, #0]
   13746:	4b85      	ldr	r3, [pc, #532]	; (1395c <main+0x312c>)
   13748:	1c10      	adds	r0, r2, #0
   1374a:	4798      	blx	r3
   1374c:	0002      	movs	r2, r0
   1374e:	000b      	movs	r3, r1
   13750:	4c85      	ldr	r4, [pc, #532]	; (13968 <main+0x3138>)
   13752:	0028      	movs	r0, r5
   13754:	0031      	movs	r1, r6
   13756:	47a0      	blx	r4
   13758:	0003      	movs	r3, r0
   1375a:	000c      	movs	r4, r1
   1375c:	0019      	movs	r1, r3
   1375e:	0022      	movs	r2, r4
   13760:	4b82      	ldr	r3, [pc, #520]	; (1396c <main+0x313c>)
   13762:	0008      	movs	r0, r1
   13764:	0011      	movs	r1, r2
   13766:	4798      	blx	r3
   13768:	0002      	movs	r2, r0
   1376a:	4b84      	ldr	r3, [pc, #528]	; (1397c <main+0x314c>)
   1376c:	4981      	ldr	r1, [pc, #516]	; (13974 <main+0x3144>)
   1376e:	0010      	movs	r0, r2
   13770:	4798      	blx	r3
   13772:	0003      	movs	r3, r0
   13774:	b2da      	uxtb	r2, r3
   13776:	4b82      	ldr	r3, [pc, #520]	; (13980 <main+0x3150>)
   13778:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   1377a:	4b7f      	ldr	r3, [pc, #508]	; (13978 <main+0x3148>)
   1377c:	681a      	ldr	r2, [r3, #0]
   1377e:	4b82      	ldr	r3, [pc, #520]	; (13988 <main+0x3158>)
   13780:	0010      	movs	r0, r2
   13782:	4798      	blx	r3
   13784:	4b81      	ldr	r3, [pc, #516]	; (1398c <main+0x315c>)
   13786:	681a      	ldr	r2, [r3, #0]
   13788:	4b81      	ldr	r3, [pc, #516]	; (13990 <main+0x3160>)
   1378a:	1c11      	adds	r1, r2, #0
   1378c:	4798      	blx	r3
   1378e:	1c03      	adds	r3, r0, #0
   13790:	1c1a      	adds	r2, r3, #0
   13792:	4b80      	ldr	r3, [pc, #512]	; (13994 <main+0x3164>)
   13794:	1c10      	adds	r0, r2, #0
   13796:	4798      	blx	r3
   13798:	0003      	movs	r3, r0
   1379a:	b29a      	uxth	r2, r3
   1379c:	4b7e      	ldr	r3, [pc, #504]	; (13998 <main+0x3168>)
   1379e:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   137a0:	4b75      	ldr	r3, [pc, #468]	; (13978 <main+0x3148>)
   137a2:	681b      	ldr	r3, [r3, #0]
   137a4:	4a73      	ldr	r2, [pc, #460]	; (13974 <main+0x3144>)
   137a6:	1ad2      	subs	r2, r2, r3
   137a8:	4b77      	ldr	r3, [pc, #476]	; (13988 <main+0x3158>)
   137aa:	0010      	movs	r0, r2
   137ac:	4798      	blx	r3
   137ae:	4b77      	ldr	r3, [pc, #476]	; (1398c <main+0x315c>)
   137b0:	681a      	ldr	r2, [r3, #0]
   137b2:	4b77      	ldr	r3, [pc, #476]	; (13990 <main+0x3160>)
   137b4:	1c11      	adds	r1, r2, #0
   137b6:	4798      	blx	r3
   137b8:	1c03      	adds	r3, r0, #0
   137ba:	1c1a      	adds	r2, r3, #0
   137bc:	4b75      	ldr	r3, [pc, #468]	; (13994 <main+0x3164>)
   137be:	1c10      	adds	r0, r2, #0
   137c0:	4798      	blx	r3
   137c2:	0003      	movs	r3, r0
   137c4:	b29a      	uxth	r2, r3
   137c6:	4b75      	ldr	r3, [pc, #468]	; (1399c <main+0x316c>)
   137c8:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   137ca:	4b73      	ldr	r3, [pc, #460]	; (13998 <main+0x3168>)
   137cc:	8819      	ldrh	r1, [r3, #0]
   137ce:	4b73      	ldr	r3, [pc, #460]	; (1399c <main+0x316c>)
   137d0:	881a      	ldrh	r2, [r3, #0]
   137d2:	4b6b      	ldr	r3, [pc, #428]	; (13980 <main+0x3150>)
   137d4:	781b      	ldrb	r3, [r3, #0]
   137d6:	4d72      	ldr	r5, [pc, #456]	; (139a0 <main+0x3170>)
   137d8:	0038      	movs	r0, r7
   137da:	4c72      	ldr	r4, [pc, #456]	; (139a4 <main+0x3174>)
   137dc:	47a0      	blx	r4
   137de:	003b      	movs	r3, r7
   137e0:	0028      	movs	r0, r5
   137e2:	0019      	movs	r1, r3
   137e4:	230c      	movs	r3, #12
   137e6:	001a      	movs	r2, r3
   137e8:	4b6f      	ldr	r3, [pc, #444]	; (139a8 <main+0x3178>)
   137ea:	4798      	blx	r3
					break;
   137ec:	e002      	b.n	137f4 <main+0x2fc4>
					break;
   137ee:	46c0      	nop			; (mov r8, r8)
   137f0:	e000      	b.n	137f4 <main+0x2fc4>
					break;
   137f2:	46c0      	nop			; (mov r8, r8)
				}
			}
			if(SUPRESS_LEFT_RGB){
   137f4:	4b6d      	ldr	r3, [pc, #436]	; (139ac <main+0x317c>)
   137f6:	781b      	ldrb	r3, [r3, #0]
   137f8:	2b00      	cmp	r3, #0
   137fa:	d00b      	beq.n	13814 <main+0x2fe4>
				RGB_Ouptut.LR = 0;
   137fc:	4b68      	ldr	r3, [pc, #416]	; (139a0 <main+0x3170>)
   137fe:	2200      	movs	r2, #0
   13800:	801a      	strh	r2, [r3, #0]
				RGB_Ouptut.LG = 0;
   13802:	4b67      	ldr	r3, [pc, #412]	; (139a0 <main+0x3170>)
   13804:	2200      	movs	r2, #0
   13806:	805a      	strh	r2, [r3, #2]
				RGB_Ouptut.LB = 0;
   13808:	4b65      	ldr	r3, [pc, #404]	; (139a0 <main+0x3170>)
   1380a:	2200      	movs	r2, #0
   1380c:	809a      	strh	r2, [r3, #4]
				SUPRESS_LEFT_RGB = false;
   1380e:	4b67      	ldr	r3, [pc, #412]	; (139ac <main+0x317c>)
   13810:	2200      	movs	r2, #0
   13812:	701a      	strb	r2, [r3, #0]
			}
			if(SUPRESS_RIGHT_RGB){
   13814:	4b66      	ldr	r3, [pc, #408]	; (139b0 <main+0x3180>)
   13816:	781b      	ldrb	r3, [r3, #0]
   13818:	2b00      	cmp	r3, #0
   1381a:	d00b      	beq.n	13834 <main+0x3004>
				RGB_Ouptut.RR = 0;
   1381c:	4b60      	ldr	r3, [pc, #384]	; (139a0 <main+0x3170>)
   1381e:	2200      	movs	r2, #0
   13820:	80da      	strh	r2, [r3, #6]
				RGB_Ouptut.RG = 0;
   13822:	4b5f      	ldr	r3, [pc, #380]	; (139a0 <main+0x3170>)
   13824:	2200      	movs	r2, #0
   13826:	811a      	strh	r2, [r3, #8]
				RGB_Ouptut.RB = 0;
   13828:	4b5d      	ldr	r3, [pc, #372]	; (139a0 <main+0x3170>)
   1382a:	2200      	movs	r2, #0
   1382c:	815a      	strh	r2, [r3, #10]
				SUPRESS_RIGHT_RGB = false;
   1382e:	4b60      	ldr	r3, [pc, #384]	; (139b0 <main+0x3180>)
   13830:	2200      	movs	r2, #0
   13832:	701a      	strb	r2, [r3, #0]
			}
			
			setLeftRGB(RGB_Ouptut.LR,RGB_Ouptut.LG,RGB_Ouptut.LB);
   13834:	4b5a      	ldr	r3, [pc, #360]	; (139a0 <main+0x3170>)
   13836:	8818      	ldrh	r0, [r3, #0]
   13838:	4b59      	ldr	r3, [pc, #356]	; (139a0 <main+0x3170>)
   1383a:	8859      	ldrh	r1, [r3, #2]
   1383c:	4b58      	ldr	r3, [pc, #352]	; (139a0 <main+0x3170>)
   1383e:	889b      	ldrh	r3, [r3, #4]
   13840:	001a      	movs	r2, r3
   13842:	4b5c      	ldr	r3, [pc, #368]	; (139b4 <main+0x3184>)
   13844:	4798      	blx	r3
			setRightRGB(RGB_Ouptut.RR,RGB_Ouptut.RG,RGB_Ouptut.RB);
   13846:	4b56      	ldr	r3, [pc, #344]	; (139a0 <main+0x3170>)
   13848:	88d8      	ldrh	r0, [r3, #6]
   1384a:	4b55      	ldr	r3, [pc, #340]	; (139a0 <main+0x3170>)
   1384c:	8919      	ldrh	r1, [r3, #8]
   1384e:	4b54      	ldr	r3, [pc, #336]	; (139a0 <main+0x3170>)
   13850:	895b      	ldrh	r3, [r3, #10]
   13852:	001a      	movs	r2, r3
   13854:	4b58      	ldr	r3, [pc, #352]	; (139b8 <main+0x3188>)
   13856:	4798      	blx	r3
			if(SIDELIGHTS && lightControlSide()){
   13858:	e010      	b.n	1387c <main+0x304c>
			}
			else {
				if(!TurnSignalOn) {
   1385a:	4b58      	ldr	r3, [pc, #352]	; (139bc <main+0x318c>)
   1385c:	781b      	ldrb	r3, [r3, #0]
   1385e:	2201      	movs	r2, #1
   13860:	4053      	eors	r3, r2
   13862:	b2db      	uxtb	r3, r3
   13864:	2b00      	cmp	r3, #0
   13866:	d009      	beq.n	1387c <main+0x304c>
					setLeftRGB(0, 0, 0);
   13868:	2200      	movs	r2, #0
   1386a:	2100      	movs	r1, #0
   1386c:	2000      	movs	r0, #0
   1386e:	4b51      	ldr	r3, [pc, #324]	; (139b4 <main+0x3184>)
   13870:	4798      	blx	r3
					setRightRGB(0, 0, 0);
   13872:	2200      	movs	r2, #0
   13874:	2100      	movs	r1, #0
   13876:	2000      	movs	r0, #0
   13878:	4b4f      	ldr	r3, [pc, #316]	; (139b8 <main+0x3188>)
   1387a:	4798      	blx	r3
				}
			}


			/////////////// Control the head and tail lights //////////////////
			if(HEADLIGHTS && lightControlHead()){
   1387c:	4b50      	ldr	r3, [pc, #320]	; (139c0 <main+0x3190>)
   1387e:	781b      	ldrb	r3, [r3, #0]
   13880:	2b00      	cmp	r3, #0
   13882:	d04b      	beq.n	1391c <main+0x30ec>
   13884:	4b4f      	ldr	r3, [pc, #316]	; (139c4 <main+0x3194>)
   13886:	4798      	blx	r3
   13888:	1e03      	subs	r3, r0, #0
   1388a:	d047      	beq.n	1391c <main+0x30ec>
				setWhite(0xFFFF);
   1388c:	4b39      	ldr	r3, [pc, #228]	; (13974 <main+0x3144>)
   1388e:	0018      	movs	r0, r3
   13890:	4b4d      	ldr	r3, [pc, #308]	; (139c8 <main+0x3198>)
   13892:	4798      	blx	r3

				float temp_y = remote_y;
   13894:	4b4d      	ldr	r3, [pc, #308]	; (139cc <main+0x319c>)
   13896:	781a      	ldrb	r2, [r3, #0]
   13898:	4b3b      	ldr	r3, [pc, #236]	; (13988 <main+0x3158>)
   1389a:	0010      	movs	r0, r2
   1389c:	4798      	blx	r3
   1389e:	1c03      	adds	r3, r0, #0
   138a0:	61bb      	str	r3, [r7, #24]

				if(temp_y < 120){
   138a2:	4b2c      	ldr	r3, [pc, #176]	; (13954 <main+0x3124>)
   138a4:	494a      	ldr	r1, [pc, #296]	; (139d0 <main+0x31a0>)
   138a6:	69b8      	ldr	r0, [r7, #24]
   138a8:	4798      	blx	r3
   138aa:	1e03      	subs	r3, r0, #0
   138ac:	d030      	beq.n	13910 <main+0x30e0>
					float brake_temp = (((0xFFFF-brake_offset)/120)*(120-temp_y))+brake_offset;
   138ae:	4b49      	ldr	r3, [pc, #292]	; (139d4 <main+0x31a4>)
   138b0:	881b      	ldrh	r3, [r3, #0]
   138b2:	001a      	movs	r2, r3
   138b4:	4b2f      	ldr	r3, [pc, #188]	; (13974 <main+0x3144>)
   138b6:	1a9a      	subs	r2, r3, r2
   138b8:	4b30      	ldr	r3, [pc, #192]	; (1397c <main+0x314c>)
   138ba:	2178      	movs	r1, #120	; 0x78
   138bc:	0010      	movs	r0, r2
   138be:	4798      	blx	r3
   138c0:	0003      	movs	r3, r0
   138c2:	001a      	movs	r2, r3
   138c4:	4b44      	ldr	r3, [pc, #272]	; (139d8 <main+0x31a8>)
   138c6:	0010      	movs	r0, r2
   138c8:	4798      	blx	r3
   138ca:	1c04      	adds	r4, r0, #0
   138cc:	4b43      	ldr	r3, [pc, #268]	; (139dc <main+0x31ac>)
   138ce:	69b9      	ldr	r1, [r7, #24]
   138d0:	483f      	ldr	r0, [pc, #252]	; (139d0 <main+0x31a0>)
   138d2:	4798      	blx	r3
   138d4:	1c03      	adds	r3, r0, #0
   138d6:	1c1a      	adds	r2, r3, #0
   138d8:	4b2d      	ldr	r3, [pc, #180]	; (13990 <main+0x3160>)
   138da:	1c11      	adds	r1, r2, #0
   138dc:	1c20      	adds	r0, r4, #0
   138de:	4798      	blx	r3
   138e0:	1c03      	adds	r3, r0, #0
   138e2:	1c1c      	adds	r4, r3, #0
   138e4:	4b3b      	ldr	r3, [pc, #236]	; (139d4 <main+0x31a4>)
   138e6:	881b      	ldrh	r3, [r3, #0]
   138e8:	001a      	movs	r2, r3
   138ea:	4b3b      	ldr	r3, [pc, #236]	; (139d8 <main+0x31a8>)
   138ec:	0010      	movs	r0, r2
   138ee:	4798      	blx	r3
   138f0:	1c02      	adds	r2, r0, #0
   138f2:	4b3b      	ldr	r3, [pc, #236]	; (139e0 <main+0x31b0>)
   138f4:	1c11      	adds	r1, r2, #0
   138f6:	1c20      	adds	r0, r4, #0
   138f8:	4798      	blx	r3
   138fa:	1c03      	adds	r3, r0, #0
   138fc:	617b      	str	r3, [r7, #20]
					setRed(brake_temp);
   138fe:	4b25      	ldr	r3, [pc, #148]	; (13994 <main+0x3164>)
   13900:	6978      	ldr	r0, [r7, #20]
   13902:	4798      	blx	r3
   13904:	0003      	movs	r3, r0
   13906:	b29b      	uxth	r3, r3
   13908:	0018      	movs	r0, r3
   1390a:	4b36      	ldr	r3, [pc, #216]	; (139e4 <main+0x31b4>)
   1390c:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   1390e:	e00c      	b.n	1392a <main+0x30fa>
				}
				else
					setRed(brake_offset);
   13910:	4b30      	ldr	r3, [pc, #192]	; (139d4 <main+0x31a4>)
   13912:	881b      	ldrh	r3, [r3, #0]
   13914:	0018      	movs	r0, r3
   13916:	4b33      	ldr	r3, [pc, #204]	; (139e4 <main+0x31b4>)
   13918:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   1391a:	e006      	b.n	1392a <main+0x30fa>
			}
			else{
				setWhite(0);
   1391c:	2000      	movs	r0, #0
   1391e:	4b2a      	ldr	r3, [pc, #168]	; (139c8 <main+0x3198>)
   13920:	4798      	blx	r3
				setRed(0);
   13922:	2000      	movs	r0, #0
   13924:	4b2f      	ldr	r3, [pc, #188]	; (139e4 <main+0x31b4>)
   13926:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   13928:	e010      	b.n	1394c <main+0x311c>
   1392a:	e00f      	b.n	1394c <main+0x311c>
			}
		} else {
			setWhite(0);
   1392c:	2000      	movs	r0, #0
   1392e:	4b26      	ldr	r3, [pc, #152]	; (139c8 <main+0x3198>)
   13930:	4798      	blx	r3
			setRed(0);
   13932:	2000      	movs	r0, #0
   13934:	4b2b      	ldr	r3, [pc, #172]	; (139e4 <main+0x31b4>)
   13936:	4798      	blx	r3
			setLeftRGB(0,0,0);
   13938:	2200      	movs	r2, #0
   1393a:	2100      	movs	r1, #0
   1393c:	2000      	movs	r0, #0
   1393e:	4b1d      	ldr	r3, [pc, #116]	; (139b4 <main+0x3184>)
   13940:	4798      	blx	r3
			setRightRGB(0,0,0);
   13942:	2200      	movs	r2, #0
   13944:	2100      	movs	r1, #0
   13946:	2000      	movs	r0, #0
   13948:	4b1b      	ldr	r3, [pc, #108]	; (139b8 <main+0x3188>)
   1394a:	4798      	blx	r3
		if(configured_comms != esc_comms)
   1394c:	f7fd f82b 	bl	109a6 <main+0x176>
   13950:	200003d8 	.word	0x200003d8
   13954:	0001448d 	.word	0x0001448d
   13958:	200000c4 	.word	0x200000c4
   1395c:	00016e95 	.word	0x00016e95
   13960:	000159a5 	.word	0x000159a5
   13964:	4107ffe8 	.word	0x4107ffe8
   13968:	0001620d 	.word	0x0001620d
   1396c:	00016d39 	.word	0x00016d39
   13970:	000143e1 	.word	0x000143e1
   13974:	0000ffff 	.word	0x0000ffff
   13978:	20000328 	.word	0x20000328
   1397c:	00014215 	.word	0x00014215
   13980:	20000326 	.word	0x20000326
   13984:	200000c8 	.word	0x200000c8
   13988:	000152f9 	.word	0x000152f9
   1398c:	200003ec 	.word	0x200003ec
   13990:	00014ca1 	.word	0x00014ca1
   13994:	00014531 	.word	0x00014531
   13998:	2000032c 	.word	0x2000032c
   1399c:	2000032e 	.word	0x2000032e
   139a0:	20000314 	.word	0x20000314
   139a4:	0000b479 	.word	0x0000b479
   139a8:	000170dd 	.word	0x000170dd
   139ac:	20000320 	.word	0x20000320
   139b0:	20000321 	.word	0x20000321
   139b4:	0000b2f5 	.word	0x0000b2f5
   139b8:	0000b371 	.word	0x0000b371
   139bc:	2000039c 	.word	0x2000039c
   139c0:	20000322 	.word	0x20000322
   139c4:	00013d11 	.word	0x00013d11
   139c8:	0000b3e5 	.word	0x0000b3e5
   139cc:	2000030a 	.word	0x2000030a
   139d0:	42f00000 	.word	0x42f00000
   139d4:	200000a0 	.word	0x200000a0
   139d8:	00015259 	.word	0x00015259
   139dc:	00014ee1 	.word	0x00014ee1
   139e0:	0001459d 	.word	0x0001459d
   139e4:	0000b41d 	.word	0x0000b41d

000139e8 <getLightSens>:
Tail = tcc0[1]
RB = tcc0[0]
*/


void getLightSens(uint16_t* light_val) {
   139e8:	b580      	push	{r7, lr}
   139ea:	b082      	sub	sp, #8
   139ec:	af00      	add	r7, sp, #0
   139ee:	6078      	str	r0, [r7, #4]
	adc_start_conversion(&adc1);
   139f0:	4b0d      	ldr	r3, [pc, #52]	; (13a28 <getLightSens+0x40>)
   139f2:	0018      	movs	r0, r3
   139f4:	4b0d      	ldr	r3, [pc, #52]	; (13a2c <getLightSens+0x44>)
   139f6:	4798      	blx	r3
	while(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY);
   139f8:	46c0      	nop			; (mov r8, r8)
   139fa:	4b0b      	ldr	r3, [pc, #44]	; (13a28 <getLightSens+0x40>)
   139fc:	0018      	movs	r0, r3
   139fe:	4b0c      	ldr	r3, [pc, #48]	; (13a30 <getLightSens+0x48>)
   13a00:	4798      	blx	r3
   13a02:	0003      	movs	r3, r0
   13a04:	2b01      	cmp	r3, #1
   13a06:	d1f8      	bne.n	139fa <getLightSens+0x12>
	adc_read(&adc1, light_val);
   13a08:	687a      	ldr	r2, [r7, #4]
   13a0a:	4b07      	ldr	r3, [pc, #28]	; (13a28 <getLightSens+0x40>)
   13a0c:	0011      	movs	r1, r2
   13a0e:	0018      	movs	r0, r3
   13a10:	4b08      	ldr	r3, [pc, #32]	; (13a34 <getLightSens+0x4c>)
   13a12:	4798      	blx	r3
	adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
   13a14:	4b04      	ldr	r3, [pc, #16]	; (13a28 <getLightSens+0x40>)
   13a16:	2101      	movs	r1, #1
   13a18:	0018      	movs	r0, r3
   13a1a:	4b07      	ldr	r3, [pc, #28]	; (13a38 <getLightSens+0x50>)
   13a1c:	4798      	blx	r3
}
   13a1e:	46c0      	nop			; (mov r8, r8)
   13a20:	46bd      	mov	sp, r7
   13a22:	b002      	add	sp, #8
   13a24:	bd80      	pop	{r7, pc}
   13a26:	46c0      	nop			; (mov r8, r8)
   13a28:	200009b4 	.word	0x200009b4
   13a2c:	00008ca5 	.word	0x00008ca5
   13a30:	00008bb5 	.word	0x00008bb5
   13a34:	00008ced 	.word	0x00008ced
   13a38:	00008c09 	.word	0x00008c09

00013a3c <averageAX>:

int16_t averageAX(){
   13a3c:	b580      	push	{r7, lr}
   13a3e:	b082      	sub	sp, #8
   13a40:	af00      	add	r7, sp, #0
	AXtotal -= AXaverage[ACCELsamples-1];
   13a42:	4b1a      	ldr	r3, [pc, #104]	; (13aac <averageAX+0x70>)
   13a44:	681b      	ldr	r3, [r3, #0]
   13a46:	4a1a      	ldr	r2, [pc, #104]	; (13ab0 <averageAX+0x74>)
   13a48:	211c      	movs	r1, #28
   13a4a:	5e52      	ldrsh	r2, [r2, r1]
   13a4c:	1a9a      	subs	r2, r3, r2
   13a4e:	4b17      	ldr	r3, [pc, #92]	; (13aac <averageAX+0x70>)
   13a50:	601a      	str	r2, [r3, #0]
	for(int i = ACCELsamples-1; i > 0; --i){
   13a52:	230e      	movs	r3, #14
   13a54:	607b      	str	r3, [r7, #4]
   13a56:	e00b      	b.n	13a70 <averageAX+0x34>
		AXaverage[i] = AXaverage[i-1];
   13a58:	687b      	ldr	r3, [r7, #4]
   13a5a:	1e5a      	subs	r2, r3, #1
   13a5c:	4b14      	ldr	r3, [pc, #80]	; (13ab0 <averageAX+0x74>)
   13a5e:	0052      	lsls	r2, r2, #1
   13a60:	5ed1      	ldrsh	r1, [r2, r3]
   13a62:	4b13      	ldr	r3, [pc, #76]	; (13ab0 <averageAX+0x74>)
   13a64:	687a      	ldr	r2, [r7, #4]
   13a66:	0052      	lsls	r2, r2, #1
   13a68:	52d1      	strh	r1, [r2, r3]
	for(int i = ACCELsamples-1; i > 0; --i){
   13a6a:	687b      	ldr	r3, [r7, #4]
   13a6c:	3b01      	subs	r3, #1
   13a6e:	607b      	str	r3, [r7, #4]
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	2b00      	cmp	r3, #0
   13a74:	dcf0      	bgt.n	13a58 <averageAX+0x1c>
	}
	AXtotal += cax;
   13a76:	4b0f      	ldr	r3, [pc, #60]	; (13ab4 <averageAX+0x78>)
   13a78:	2200      	movs	r2, #0
   13a7a:	5e9b      	ldrsh	r3, [r3, r2]
   13a7c:	001a      	movs	r2, r3
   13a7e:	4b0b      	ldr	r3, [pc, #44]	; (13aac <averageAX+0x70>)
   13a80:	681b      	ldr	r3, [r3, #0]
   13a82:	18d2      	adds	r2, r2, r3
   13a84:	4b09      	ldr	r3, [pc, #36]	; (13aac <averageAX+0x70>)
   13a86:	601a      	str	r2, [r3, #0]
	AXaverage[0] = cax;
   13a88:	4b0a      	ldr	r3, [pc, #40]	; (13ab4 <averageAX+0x78>)
   13a8a:	2200      	movs	r2, #0
   13a8c:	5e9a      	ldrsh	r2, [r3, r2]
   13a8e:	4b08      	ldr	r3, [pc, #32]	; (13ab0 <averageAX+0x74>)
   13a90:	801a      	strh	r2, [r3, #0]

	return (int16_t)(AXtotal/ACCELsamples);
   13a92:	4b06      	ldr	r3, [pc, #24]	; (13aac <averageAX+0x70>)
   13a94:	681a      	ldr	r2, [r3, #0]
   13a96:	4b08      	ldr	r3, [pc, #32]	; (13ab8 <averageAX+0x7c>)
   13a98:	210f      	movs	r1, #15
   13a9a:	0010      	movs	r0, r2
   13a9c:	4798      	blx	r3
   13a9e:	0003      	movs	r3, r0
   13aa0:	b21b      	sxth	r3, r3
}
   13aa2:	0018      	movs	r0, r3
   13aa4:	46bd      	mov	sp, r7
   13aa6:	b002      	add	sp, #8
   13aa8:	bd80      	pop	{r7, pc}
   13aaa:	46c0      	nop			; (mov r8, r8)
   13aac:	200003c4 	.word	0x200003c4
   13ab0:	20000a58 	.word	0x20000a58
   13ab4:	200002fc 	.word	0x200002fc
   13ab8:	00014215 	.word	0x00014215

00013abc <averageAY>:

int16_t averageAY(){
   13abc:	b580      	push	{r7, lr}
   13abe:	b082      	sub	sp, #8
   13ac0:	af00      	add	r7, sp, #0
	AYtotal -= AYaverage[ACCELsamples-1];
   13ac2:	4b1a      	ldr	r3, [pc, #104]	; (13b2c <averageAY+0x70>)
   13ac4:	681b      	ldr	r3, [r3, #0]
   13ac6:	4a1a      	ldr	r2, [pc, #104]	; (13b30 <averageAY+0x74>)
   13ac8:	211c      	movs	r1, #28
   13aca:	5e52      	ldrsh	r2, [r2, r1]
   13acc:	1a9a      	subs	r2, r3, r2
   13ace:	4b17      	ldr	r3, [pc, #92]	; (13b2c <averageAY+0x70>)
   13ad0:	601a      	str	r2, [r3, #0]
	for(int i = ACCELsamples-1; i > 0; --i){
   13ad2:	230e      	movs	r3, #14
   13ad4:	607b      	str	r3, [r7, #4]
   13ad6:	e00b      	b.n	13af0 <averageAY+0x34>
		AYaverage[i] = AYaverage[i-1];
   13ad8:	687b      	ldr	r3, [r7, #4]
   13ada:	1e5a      	subs	r2, r3, #1
   13adc:	4b14      	ldr	r3, [pc, #80]	; (13b30 <averageAY+0x74>)
   13ade:	0052      	lsls	r2, r2, #1
   13ae0:	5ed1      	ldrsh	r1, [r2, r3]
   13ae2:	4b13      	ldr	r3, [pc, #76]	; (13b30 <averageAY+0x74>)
   13ae4:	687a      	ldr	r2, [r7, #4]
   13ae6:	0052      	lsls	r2, r2, #1
   13ae8:	52d1      	strh	r1, [r2, r3]
	for(int i = ACCELsamples-1; i > 0; --i){
   13aea:	687b      	ldr	r3, [r7, #4]
   13aec:	3b01      	subs	r3, #1
   13aee:	607b      	str	r3, [r7, #4]
   13af0:	687b      	ldr	r3, [r7, #4]
   13af2:	2b00      	cmp	r3, #0
   13af4:	dcf0      	bgt.n	13ad8 <averageAY+0x1c>
	}
	AYtotal += cay;
   13af6:	4b0f      	ldr	r3, [pc, #60]	; (13b34 <averageAY+0x78>)
   13af8:	2200      	movs	r2, #0
   13afa:	5e9b      	ldrsh	r3, [r3, r2]
   13afc:	001a      	movs	r2, r3
   13afe:	4b0b      	ldr	r3, [pc, #44]	; (13b2c <averageAY+0x70>)
   13b00:	681b      	ldr	r3, [r3, #0]
   13b02:	18d2      	adds	r2, r2, r3
   13b04:	4b09      	ldr	r3, [pc, #36]	; (13b2c <averageAY+0x70>)
   13b06:	601a      	str	r2, [r3, #0]
	AYaverage[0] = cay;
   13b08:	4b0a      	ldr	r3, [pc, #40]	; (13b34 <averageAY+0x78>)
   13b0a:	2200      	movs	r2, #0
   13b0c:	5e9a      	ldrsh	r2, [r3, r2]
   13b0e:	4b08      	ldr	r3, [pc, #32]	; (13b30 <averageAY+0x74>)
   13b10:	801a      	strh	r2, [r3, #0]

	return (int16_t)(AYtotal/ACCELsamples);
   13b12:	4b06      	ldr	r3, [pc, #24]	; (13b2c <averageAY+0x70>)
   13b14:	681a      	ldr	r2, [r3, #0]
   13b16:	4b08      	ldr	r3, [pc, #32]	; (13b38 <averageAY+0x7c>)
   13b18:	210f      	movs	r1, #15
   13b1a:	0010      	movs	r0, r2
   13b1c:	4798      	blx	r3
   13b1e:	0003      	movs	r3, r0
   13b20:	b21b      	sxth	r3, r3
}
   13b22:	0018      	movs	r0, r3
   13b24:	46bd      	mov	sp, r7
   13b26:	b002      	add	sp, #8
   13b28:	bd80      	pop	{r7, pc}
   13b2a:	46c0      	nop			; (mov r8, r8)
   13b2c:	200003c8 	.word	0x200003c8
   13b30:	20000a1c 	.word	0x20000a1c
   13b34:	200002fe 	.word	0x200002fe
   13b38:	00014215 	.word	0x00014215

00013b3c <sensorControl>:
		AZaverage[0] = azKalman;

		return (int16_t)(AZtotal/ACCELsamples);
}

char sensorControl() {
   13b3c:	b580      	push	{r7, lr}
   13b3e:	af00      	add	r7, sp, #0
static uint8_t off_type = 0;
static long count = 0;
static bool result = 1;
	if(IMU_CONTROLED){
   13b40:	4b60      	ldr	r3, [pc, #384]	; (13cc4 <sensorControl+0x188>)
   13b42:	781b      	ldrb	r3, [r3, #0]
   13b44:	2b00      	cmp	r3, #0
   13b46:	d100      	bne.n	13b4a <sensorControl+0xe>
   13b48:	e0b7      	b.n	13cba <sensorControl+0x17e>
		if(result){
   13b4a:	4b5f      	ldr	r3, [pc, #380]	; (13cc8 <sensorControl+0x18c>)
   13b4c:	781b      	ldrb	r3, [r3, #0]
   13b4e:	2b00      	cmp	r3, #0
   13b50:	d057      	beq.n	13c02 <sensorControl+0xc6>
			if(ayKalman >= 1000 && result){
   13b52:	4b5e      	ldr	r3, [pc, #376]	; (13ccc <sensorControl+0x190>)
   13b54:	681a      	ldr	r2, [r3, #0]
   13b56:	4b5e      	ldr	r3, [pc, #376]	; (13cd0 <sensorControl+0x194>)
   13b58:	495e      	ldr	r1, [pc, #376]	; (13cd4 <sensorControl+0x198>)
   13b5a:	1c10      	adds	r0, r2, #0
   13b5c:	4798      	blx	r3
   13b5e:	1e03      	subs	r3, r0, #0
   13b60:	d00c      	beq.n	13b7c <sensorControl+0x40>
   13b62:	4b59      	ldr	r3, [pc, #356]	; (13cc8 <sensorControl+0x18c>)
   13b64:	781b      	ldrb	r3, [r3, #0]
   13b66:	2b00      	cmp	r3, #0
   13b68:	d008      	beq.n	13b7c <sensorControl+0x40>
				count++;
   13b6a:	4b5b      	ldr	r3, [pc, #364]	; (13cd8 <sensorControl+0x19c>)
   13b6c:	681b      	ldr	r3, [r3, #0]
   13b6e:	1c5a      	adds	r2, r3, #1
   13b70:	4b59      	ldr	r3, [pc, #356]	; (13cd8 <sensorControl+0x19c>)
   13b72:	601a      	str	r2, [r3, #0]
				off_type = 1;
   13b74:	4b59      	ldr	r3, [pc, #356]	; (13cdc <sensorControl+0x1a0>)
   13b76:	2201      	movs	r2, #1
   13b78:	701a      	strb	r2, [r3, #0]
   13b7a:	e082      	b.n	13c82 <sensorControl+0x146>
			}
			else if(ayKalman <= -1000 && result){
   13b7c:	4b53      	ldr	r3, [pc, #332]	; (13ccc <sensorControl+0x190>)
   13b7e:	681a      	ldr	r2, [r3, #0]
   13b80:	4b57      	ldr	r3, [pc, #348]	; (13ce0 <sensorControl+0x1a4>)
   13b82:	4958      	ldr	r1, [pc, #352]	; (13ce4 <sensorControl+0x1a8>)
   13b84:	1c10      	adds	r0, r2, #0
   13b86:	4798      	blx	r3
   13b88:	1e03      	subs	r3, r0, #0
   13b8a:	d00c      	beq.n	13ba6 <sensorControl+0x6a>
   13b8c:	4b4e      	ldr	r3, [pc, #312]	; (13cc8 <sensorControl+0x18c>)
   13b8e:	781b      	ldrb	r3, [r3, #0]
   13b90:	2b00      	cmp	r3, #0
   13b92:	d008      	beq.n	13ba6 <sensorControl+0x6a>
				count++;
   13b94:	4b50      	ldr	r3, [pc, #320]	; (13cd8 <sensorControl+0x19c>)
   13b96:	681b      	ldr	r3, [r3, #0]
   13b98:	1c5a      	adds	r2, r3, #1
   13b9a:	4b4f      	ldr	r3, [pc, #316]	; (13cd8 <sensorControl+0x19c>)
   13b9c:	601a      	str	r2, [r3, #0]
				off_type = 2;
   13b9e:	4b4f      	ldr	r3, [pc, #316]	; (13cdc <sensorControl+0x1a0>)
   13ba0:	2202      	movs	r2, #2
   13ba2:	701a      	strb	r2, [r3, #0]
   13ba4:	e06d      	b.n	13c82 <sensorControl+0x146>
			}
			else if(axKalman >= 1250 && result){
   13ba6:	4b50      	ldr	r3, [pc, #320]	; (13ce8 <sensorControl+0x1ac>)
   13ba8:	681a      	ldr	r2, [r3, #0]
   13baa:	4b49      	ldr	r3, [pc, #292]	; (13cd0 <sensorControl+0x194>)
   13bac:	494f      	ldr	r1, [pc, #316]	; (13cec <sensorControl+0x1b0>)
   13bae:	1c10      	adds	r0, r2, #0
   13bb0:	4798      	blx	r3
   13bb2:	1e03      	subs	r3, r0, #0
   13bb4:	d00c      	beq.n	13bd0 <sensorControl+0x94>
   13bb6:	4b44      	ldr	r3, [pc, #272]	; (13cc8 <sensorControl+0x18c>)
   13bb8:	781b      	ldrb	r3, [r3, #0]
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d008      	beq.n	13bd0 <sensorControl+0x94>
				count++;
   13bbe:	4b46      	ldr	r3, [pc, #280]	; (13cd8 <sensorControl+0x19c>)
   13bc0:	681b      	ldr	r3, [r3, #0]
   13bc2:	1c5a      	adds	r2, r3, #1
   13bc4:	4b44      	ldr	r3, [pc, #272]	; (13cd8 <sensorControl+0x19c>)
   13bc6:	601a      	str	r2, [r3, #0]
				off_type = 3;
   13bc8:	4b44      	ldr	r3, [pc, #272]	; (13cdc <sensorControl+0x1a0>)
   13bca:	2203      	movs	r2, #3
   13bcc:	701a      	strb	r2, [r3, #0]
   13bce:	e058      	b.n	13c82 <sensorControl+0x146>
			}
			else if(axKalman <= -1250 && result){
   13bd0:	4b45      	ldr	r3, [pc, #276]	; (13ce8 <sensorControl+0x1ac>)
   13bd2:	681a      	ldr	r2, [r3, #0]
   13bd4:	4b42      	ldr	r3, [pc, #264]	; (13ce0 <sensorControl+0x1a4>)
   13bd6:	4946      	ldr	r1, [pc, #280]	; (13cf0 <sensorControl+0x1b4>)
   13bd8:	1c10      	adds	r0, r2, #0
   13bda:	4798      	blx	r3
   13bdc:	1e03      	subs	r3, r0, #0
   13bde:	d00c      	beq.n	13bfa <sensorControl+0xbe>
   13be0:	4b39      	ldr	r3, [pc, #228]	; (13cc8 <sensorControl+0x18c>)
   13be2:	781b      	ldrb	r3, [r3, #0]
   13be4:	2b00      	cmp	r3, #0
   13be6:	d008      	beq.n	13bfa <sensorControl+0xbe>
				count++;
   13be8:	4b3b      	ldr	r3, [pc, #236]	; (13cd8 <sensorControl+0x19c>)
   13bea:	681b      	ldr	r3, [r3, #0]
   13bec:	1c5a      	adds	r2, r3, #1
   13bee:	4b3a      	ldr	r3, [pc, #232]	; (13cd8 <sensorControl+0x19c>)
   13bf0:	601a      	str	r2, [r3, #0]
				off_type = 4;
   13bf2:	4b3a      	ldr	r3, [pc, #232]	; (13cdc <sensorControl+0x1a0>)
   13bf4:	2204      	movs	r2, #4
   13bf6:	701a      	strb	r2, [r3, #0]
   13bf8:	e043      	b.n	13c82 <sensorControl+0x146>
			}
			else
				count = 0;
   13bfa:	4b37      	ldr	r3, [pc, #220]	; (13cd8 <sensorControl+0x19c>)
   13bfc:	2200      	movs	r2, #0
   13bfe:	601a      	str	r2, [r3, #0]
   13c00:	e03f      	b.n	13c82 <sensorControl+0x146>
		}
		else if(!result){
   13c02:	4b31      	ldr	r3, [pc, #196]	; (13cc8 <sensorControl+0x18c>)
   13c04:	781b      	ldrb	r3, [r3, #0]
   13c06:	2201      	movs	r2, #1
   13c08:	4053      	eors	r3, r2
   13c0a:	b2db      	uxtb	r3, r3
   13c0c:	2b00      	cmp	r3, #0
   13c0e:	d038      	beq.n	13c82 <sensorControl+0x146>
			if((ayKalman < 750 && off_type == 1) || (ayKalman > -750 && off_type == 2) || (axKalman < 1000 && off_type == 3) || (axKalman > -1000 && off_type == 4)){
   13c10:	4b2e      	ldr	r3, [pc, #184]	; (13ccc <sensorControl+0x190>)
   13c12:	681a      	ldr	r2, [r3, #0]
   13c14:	4b37      	ldr	r3, [pc, #220]	; (13cf4 <sensorControl+0x1b8>)
   13c16:	4938      	ldr	r1, [pc, #224]	; (13cf8 <sensorControl+0x1bc>)
   13c18:	1c10      	adds	r0, r2, #0
   13c1a:	4798      	blx	r3
   13c1c:	1e03      	subs	r3, r0, #0
   13c1e:	d003      	beq.n	13c28 <sensorControl+0xec>
   13c20:	4b2e      	ldr	r3, [pc, #184]	; (13cdc <sensorControl+0x1a0>)
   13c22:	781b      	ldrb	r3, [r3, #0]
   13c24:	2b01      	cmp	r3, #1
   13c26:	d023      	beq.n	13c70 <sensorControl+0x134>
   13c28:	4b28      	ldr	r3, [pc, #160]	; (13ccc <sensorControl+0x190>)
   13c2a:	681a      	ldr	r2, [r3, #0]
   13c2c:	4b33      	ldr	r3, [pc, #204]	; (13cfc <sensorControl+0x1c0>)
   13c2e:	4934      	ldr	r1, [pc, #208]	; (13d00 <sensorControl+0x1c4>)
   13c30:	1c10      	adds	r0, r2, #0
   13c32:	4798      	blx	r3
   13c34:	1e03      	subs	r3, r0, #0
   13c36:	d003      	beq.n	13c40 <sensorControl+0x104>
   13c38:	4b28      	ldr	r3, [pc, #160]	; (13cdc <sensorControl+0x1a0>)
   13c3a:	781b      	ldrb	r3, [r3, #0]
   13c3c:	2b02      	cmp	r3, #2
   13c3e:	d017      	beq.n	13c70 <sensorControl+0x134>
   13c40:	4b29      	ldr	r3, [pc, #164]	; (13ce8 <sensorControl+0x1ac>)
   13c42:	681a      	ldr	r2, [r3, #0]
   13c44:	4b2b      	ldr	r3, [pc, #172]	; (13cf4 <sensorControl+0x1b8>)
   13c46:	4923      	ldr	r1, [pc, #140]	; (13cd4 <sensorControl+0x198>)
   13c48:	1c10      	adds	r0, r2, #0
   13c4a:	4798      	blx	r3
   13c4c:	1e03      	subs	r3, r0, #0
   13c4e:	d003      	beq.n	13c58 <sensorControl+0x11c>
   13c50:	4b22      	ldr	r3, [pc, #136]	; (13cdc <sensorControl+0x1a0>)
   13c52:	781b      	ldrb	r3, [r3, #0]
   13c54:	2b03      	cmp	r3, #3
   13c56:	d00b      	beq.n	13c70 <sensorControl+0x134>
   13c58:	4b23      	ldr	r3, [pc, #140]	; (13ce8 <sensorControl+0x1ac>)
   13c5a:	681a      	ldr	r2, [r3, #0]
   13c5c:	4b27      	ldr	r3, [pc, #156]	; (13cfc <sensorControl+0x1c0>)
   13c5e:	4921      	ldr	r1, [pc, #132]	; (13ce4 <sensorControl+0x1a8>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	1e03      	subs	r3, r0, #0
   13c66:	d009      	beq.n	13c7c <sensorControl+0x140>
   13c68:	4b1c      	ldr	r3, [pc, #112]	; (13cdc <sensorControl+0x1a0>)
   13c6a:	781b      	ldrb	r3, [r3, #0]
   13c6c:	2b04      	cmp	r3, #4
   13c6e:	d105      	bne.n	13c7c <sensorControl+0x140>
				count++;
   13c70:	4b19      	ldr	r3, [pc, #100]	; (13cd8 <sensorControl+0x19c>)
   13c72:	681b      	ldr	r3, [r3, #0]
   13c74:	1c5a      	adds	r2, r3, #1
   13c76:	4b18      	ldr	r3, [pc, #96]	; (13cd8 <sensorControl+0x19c>)
   13c78:	601a      	str	r2, [r3, #0]
   13c7a:	e002      	b.n	13c82 <sensorControl+0x146>
			}
			else
				count = 0;
   13c7c:	4b16      	ldr	r3, [pc, #88]	; (13cd8 <sensorControl+0x19c>)
   13c7e:	2200      	movs	r2, #0
   13c80:	601a      	str	r2, [r3, #0]
		}
		
		if(count > 6)
   13c82:	4b15      	ldr	r3, [pc, #84]	; (13cd8 <sensorControl+0x19c>)
   13c84:	681b      	ldr	r3, [r3, #0]
   13c86:	2b06      	cmp	r3, #6
   13c88:	dd0d      	ble.n	13ca6 <sensorControl+0x16a>
			result = !result;
   13c8a:	4b0f      	ldr	r3, [pc, #60]	; (13cc8 <sensorControl+0x18c>)
   13c8c:	781b      	ldrb	r3, [r3, #0]
   13c8e:	1e5a      	subs	r2, r3, #1
   13c90:	4193      	sbcs	r3, r2
   13c92:	b2db      	uxtb	r3, r3
   13c94:	2201      	movs	r2, #1
   13c96:	4053      	eors	r3, r2
   13c98:	b2db      	uxtb	r3, r3
   13c9a:	1c1a      	adds	r2, r3, #0
   13c9c:	2301      	movs	r3, #1
   13c9e:	4013      	ands	r3, r2
   13ca0:	b2da      	uxtb	r2, r3
   13ca2:	4b09      	ldr	r3, [pc, #36]	; (13cc8 <sensorControl+0x18c>)
   13ca4:	701a      	strb	r2, [r3, #0]

		if(result)
   13ca6:	4b08      	ldr	r3, [pc, #32]	; (13cc8 <sensorControl+0x18c>)
   13ca8:	781b      	ldrb	r3, [r3, #0]
   13caa:	2b00      	cmp	r3, #0
   13cac:	d002      	beq.n	13cb4 <sensorControl+0x178>
			off_type = 0;
   13cae:	4b0b      	ldr	r3, [pc, #44]	; (13cdc <sensorControl+0x1a0>)
   13cb0:	2200      	movs	r2, #0
   13cb2:	701a      	strb	r2, [r3, #0]

		return result;
   13cb4:	4b04      	ldr	r3, [pc, #16]	; (13cc8 <sensorControl+0x18c>)
   13cb6:	781b      	ldrb	r3, [r3, #0]
   13cb8:	e000      	b.n	13cbc <sensorControl+0x180>
	}
	else
		return 1;
   13cba:	2301      	movs	r3, #1
}
   13cbc:	0018      	movs	r0, r3
   13cbe:	46bd      	mov	sp, r7
   13cc0:	bd80      	pop	{r7, pc}
   13cc2:	46c0      	nop			; (mov r8, r8)
   13cc4:	20000324 	.word	0x20000324
   13cc8:	200000e4 	.word	0x200000e4
   13ccc:	200003d4 	.word	0x200003d4
   13cd0:	000144c9 	.word	0x000144c9
   13cd4:	447a0000 	.word	0x447a0000
   13cd8:	200003f0 	.word	0x200003f0
   13cdc:	200003f4 	.word	0x200003f4
   13ce0:	000144a1 	.word	0x000144a1
   13ce4:	c47a0000 	.word	0xc47a0000
   13ce8:	200003d0 	.word	0x200003d0
   13cec:	449c4000 	.word	0x449c4000
   13cf0:	c49c4000 	.word	0xc49c4000
   13cf4:	0001448d 	.word	0x0001448d
   13cf8:	443b8000 	.word	0x443b8000
   13cfc:	000144b5 	.word	0x000144b5
   13d00:	c43b8000 	.word	0xc43b8000

00013d04 <lightControlSide>:



char lightControlSide() {
   13d04:	b580      	push	{r7, lr}
   13d06:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
   13d08:	2301      	movs	r3, #1
}
   13d0a:	0018      	movs	r0, r3
   13d0c:	46bd      	mov	sp, r7
   13d0e:	bd80      	pop	{r7, pc}

00013d10 <lightControlHead>:

char lightControlHead() {
   13d10:	b580      	push	{r7, lr}
   13d12:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
   13d14:	2301      	movs	r3, #1
}
   13d16:	0018      	movs	r0, r3
   13d18:	46bd      	mov	sp, r7
   13d1a:	bd80      	pop	{r7, pc}

00013d1c <initKalman>:

void initKalman(float meas, float est, float _q)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b086      	sub	sp, #24
   13d20:	af00      	add	r7, sp, #0
   13d22:	60f8      	str	r0, [r7, #12]
   13d24:	60b9      	str	r1, [r7, #8]
   13d26:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < KalmanArraySize; i++){
   13d28:	2300      	movs	r3, #0
   13d2a:	617b      	str	r3, [r7, #20]
   13d2c:	e020      	b.n	13d70 <initKalman+0x54>
		err_measure[i] = meas;
   13d2e:	4b26      	ldr	r3, [pc, #152]	; (13dc8 <initKalman+0xac>)
   13d30:	697a      	ldr	r2, [r7, #20]
   13d32:	0092      	lsls	r2, r2, #2
   13d34:	68f9      	ldr	r1, [r7, #12]
   13d36:	50d1      	str	r1, [r2, r3]
		err_estimate[i] = est;
   13d38:	4b24      	ldr	r3, [pc, #144]	; (13dcc <initKalman+0xb0>)
   13d3a:	697a      	ldr	r2, [r7, #20]
   13d3c:	0092      	lsls	r2, r2, #2
   13d3e:	68b9      	ldr	r1, [r7, #8]
   13d40:	50d1      	str	r1, [r2, r3]
		q[i] = _q;
   13d42:	4b23      	ldr	r3, [pc, #140]	; (13dd0 <initKalman+0xb4>)
   13d44:	697a      	ldr	r2, [r7, #20]
   13d46:	0092      	lsls	r2, r2, #2
   13d48:	6879      	ldr	r1, [r7, #4]
   13d4a:	50d1      	str	r1, [r2, r3]
		current_estimate[i] = 0;
   13d4c:	4b21      	ldr	r3, [pc, #132]	; (13dd4 <initKalman+0xb8>)
   13d4e:	697a      	ldr	r2, [r7, #20]
   13d50:	0092      	lsls	r2, r2, #2
   13d52:	2100      	movs	r1, #0
   13d54:	50d1      	str	r1, [r2, r3]
		last_estimate[i] = 0;
   13d56:	4b20      	ldr	r3, [pc, #128]	; (13dd8 <initKalman+0xbc>)
   13d58:	697a      	ldr	r2, [r7, #20]
   13d5a:	0092      	lsls	r2, r2, #2
   13d5c:	2100      	movs	r1, #0
   13d5e:	50d1      	str	r1, [r2, r3]
		kalman_gain[i] = 0;
   13d60:	4b1e      	ldr	r3, [pc, #120]	; (13ddc <initKalman+0xc0>)
   13d62:	697a      	ldr	r2, [r7, #20]
   13d64:	0092      	lsls	r2, r2, #2
   13d66:	2100      	movs	r1, #0
   13d68:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < KalmanArraySize; i++){
   13d6a:	697b      	ldr	r3, [r7, #20]
   13d6c:	3301      	adds	r3, #1
   13d6e:	617b      	str	r3, [r7, #20]
   13d70:	697b      	ldr	r3, [r7, #20]
   13d72:	2b06      	cmp	r3, #6
   13d74:	dddb      	ble.n	13d2e <initKalman+0x12>
	}

	err_measure[ax_kalman] = 15;
   13d76:	4b14      	ldr	r3, [pc, #80]	; (13dc8 <initKalman+0xac>)
   13d78:	4a19      	ldr	r2, [pc, #100]	; (13de0 <initKalman+0xc4>)
   13d7a:	601a      	str	r2, [r3, #0]
	err_estimate[ax_kalman] = 15;
   13d7c:	4b13      	ldr	r3, [pc, #76]	; (13dcc <initKalman+0xb0>)
   13d7e:	4a18      	ldr	r2, [pc, #96]	; (13de0 <initKalman+0xc4>)
   13d80:	601a      	str	r2, [r3, #0]
	q[ax_kalman] = 0.3;
   13d82:	4b13      	ldr	r3, [pc, #76]	; (13dd0 <initKalman+0xb4>)
   13d84:	4a17      	ldr	r2, [pc, #92]	; (13de4 <initKalman+0xc8>)
   13d86:	601a      	str	r2, [r3, #0]

	err_measure[ay_kalman] = 15;
   13d88:	4b0f      	ldr	r3, [pc, #60]	; (13dc8 <initKalman+0xac>)
   13d8a:	4a15      	ldr	r2, [pc, #84]	; (13de0 <initKalman+0xc4>)
   13d8c:	605a      	str	r2, [r3, #4]
	err_estimate[ay_kalman] = 15;
   13d8e:	4b0f      	ldr	r3, [pc, #60]	; (13dcc <initKalman+0xb0>)
   13d90:	4a13      	ldr	r2, [pc, #76]	; (13de0 <initKalman+0xc4>)
   13d92:	605a      	str	r2, [r3, #4]
	q[ay_kalman] = 0.3;
   13d94:	4b0e      	ldr	r3, [pc, #56]	; (13dd0 <initKalman+0xb4>)
   13d96:	4a13      	ldr	r2, [pc, #76]	; (13de4 <initKalman+0xc8>)
   13d98:	605a      	str	r2, [r3, #4]

// 	err_measure[ay_kalman] = 20;
// 	err_estimate[ay_kalman] = 20;
// 	q[ay_kalman] = 0.8;

	err_measure[az_kalman] = 30;
   13d9a:	4b0b      	ldr	r3, [pc, #44]	; (13dc8 <initKalman+0xac>)
   13d9c:	4a12      	ldr	r2, [pc, #72]	; (13de8 <initKalman+0xcc>)
   13d9e:	609a      	str	r2, [r3, #8]
	err_estimate[az_kalman] = 30;
   13da0:	4b0a      	ldr	r3, [pc, #40]	; (13dcc <initKalman+0xb0>)
   13da2:	4a11      	ldr	r2, [pc, #68]	; (13de8 <initKalman+0xcc>)
   13da4:	609a      	str	r2, [r3, #8]
	q[az_kalman] = 0.3;
   13da6:	4b0a      	ldr	r3, [pc, #40]	; (13dd0 <initKalman+0xb4>)
   13da8:	4a0e      	ldr	r2, [pc, #56]	; (13de4 <initKalman+0xc8>)
   13daa:	609a      	str	r2, [r3, #8]
// 	
// 	err_measure[gz_kalman] = 0.1;
// 	err_estimate[gz_kalman] = 1;
// 	q[gz_kalman] = 0.99;

	err_measure[light_kalman] = 200;
   13dac:	4b06      	ldr	r3, [pc, #24]	; (13dc8 <initKalman+0xac>)
   13dae:	4a0f      	ldr	r2, [pc, #60]	; (13dec <initKalman+0xd0>)
   13db0:	619a      	str	r2, [r3, #24]
	err_estimate[light_kalman] = 200;
   13db2:	4b06      	ldr	r3, [pc, #24]	; (13dcc <initKalman+0xb0>)
   13db4:	4a0d      	ldr	r2, [pc, #52]	; (13dec <initKalman+0xd0>)
   13db6:	619a      	str	r2, [r3, #24]
	q[light_kalman] = 0.008;
   13db8:	4b05      	ldr	r3, [pc, #20]	; (13dd0 <initKalman+0xb4>)
   13dba:	4a0d      	ldr	r2, [pc, #52]	; (13df0 <initKalman+0xd4>)
   13dbc:	619a      	str	r2, [r3, #24]
}
   13dbe:	46c0      	nop			; (mov r8, r8)
   13dc0:	46bd      	mov	sp, r7
   13dc2:	b006      	add	sp, #24
   13dc4:	bd80      	pop	{r7, pc}
   13dc6:	46c0      	nop			; (mov r8, r8)
   13dc8:	20000c80 	.word	0x20000c80
   13dcc:	200009c4 	.word	0x200009c4
   13dd0:	20000fb8 	.word	0x20000fb8
   13dd4:	20000a3c 	.word	0x20000a3c
   13dd8:	2000090c 	.word	0x2000090c
   13ddc:	20000ee8 	.word	0x20000ee8
   13de0:	41700000 	.word	0x41700000
   13de4:	3e99999a 	.word	0x3e99999a
   13de8:	41f00000 	.word	0x41f00000
   13dec:	43480000 	.word	0x43480000
   13df0:	3c03126f 	.word	0x3c03126f

00013df4 <updateKalman>:

float updateKalman(float meas, int kalmanIndex)
{
   13df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13df6:	b083      	sub	sp, #12
   13df8:	af00      	add	r7, sp, #0
   13dfa:	6078      	str	r0, [r7, #4]
   13dfc:	6039      	str	r1, [r7, #0]
	  kalman_gain[kalmanIndex] = err_estimate[kalmanIndex]/(err_estimate[kalmanIndex] + err_measure[kalmanIndex]);
   13dfe:	4b5e      	ldr	r3, [pc, #376]	; (13f78 <updateKalman+0x184>)
   13e00:	683a      	ldr	r2, [r7, #0]
   13e02:	0092      	lsls	r2, r2, #2
   13e04:	58d4      	ldr	r4, [r2, r3]
   13e06:	4b5c      	ldr	r3, [pc, #368]	; (13f78 <updateKalman+0x184>)
   13e08:	683a      	ldr	r2, [r7, #0]
   13e0a:	0092      	lsls	r2, r2, #2
   13e0c:	58d0      	ldr	r0, [r2, r3]
   13e0e:	4b5b      	ldr	r3, [pc, #364]	; (13f7c <updateKalman+0x188>)
   13e10:	683a      	ldr	r2, [r7, #0]
   13e12:	0092      	lsls	r2, r2, #2
   13e14:	58d2      	ldr	r2, [r2, r3]
   13e16:	4b5a      	ldr	r3, [pc, #360]	; (13f80 <updateKalman+0x18c>)
   13e18:	1c11      	adds	r1, r2, #0
   13e1a:	4798      	blx	r3
   13e1c:	1c03      	adds	r3, r0, #0
   13e1e:	1c1a      	adds	r2, r3, #0
   13e20:	4b58      	ldr	r3, [pc, #352]	; (13f84 <updateKalman+0x190>)
   13e22:	1c11      	adds	r1, r2, #0
   13e24:	1c20      	adds	r0, r4, #0
   13e26:	4798      	blx	r3
   13e28:	1c03      	adds	r3, r0, #0
   13e2a:	1c19      	adds	r1, r3, #0
   13e2c:	4b56      	ldr	r3, [pc, #344]	; (13f88 <updateKalman+0x194>)
   13e2e:	683a      	ldr	r2, [r7, #0]
   13e30:	0092      	lsls	r2, r2, #2
   13e32:	50d1      	str	r1, [r2, r3]
	  kalman_gain[kalmanIndex] = max(kalman_gain[kalmanIndex],0.015);
   13e34:	4b54      	ldr	r3, [pc, #336]	; (13f88 <updateKalman+0x194>)
   13e36:	683a      	ldr	r2, [r7, #0]
   13e38:	0092      	lsls	r2, r2, #2
   13e3a:	58d2      	ldr	r2, [r2, r3]
   13e3c:	4b53      	ldr	r3, [pc, #332]	; (13f8c <updateKalman+0x198>)
   13e3e:	1c10      	adds	r0, r2, #0
   13e40:	4798      	blx	r3
   13e42:	4c53      	ldr	r4, [pc, #332]	; (13f90 <updateKalman+0x19c>)
   13e44:	4a53      	ldr	r2, [pc, #332]	; (13f94 <updateKalman+0x1a0>)
   13e46:	4b54      	ldr	r3, [pc, #336]	; (13f98 <updateKalman+0x1a4>)
   13e48:	47a0      	blx	r4
   13e4a:	1e03      	subs	r3, r0, #0
   13e4c:	d004      	beq.n	13e58 <updateKalman+0x64>
   13e4e:	4b4e      	ldr	r3, [pc, #312]	; (13f88 <updateKalman+0x194>)
   13e50:	683a      	ldr	r2, [r7, #0]
   13e52:	0092      	lsls	r2, r2, #2
   13e54:	58d3      	ldr	r3, [r2, r3]
   13e56:	e000      	b.n	13e5a <updateKalman+0x66>
   13e58:	4b50      	ldr	r3, [pc, #320]	; (13f9c <updateKalman+0x1a8>)
   13e5a:	4a4b      	ldr	r2, [pc, #300]	; (13f88 <updateKalman+0x194>)
   13e5c:	6839      	ldr	r1, [r7, #0]
   13e5e:	0089      	lsls	r1, r1, #2
   13e60:	508b      	str	r3, [r1, r2]
	  current_estimate[kalmanIndex] = last_estimate[kalmanIndex] + kalman_gain[kalmanIndex] * (meas - last_estimate[kalmanIndex]);
   13e62:	4b4f      	ldr	r3, [pc, #316]	; (13fa0 <updateKalman+0x1ac>)
   13e64:	683a      	ldr	r2, [r7, #0]
   13e66:	0092      	lsls	r2, r2, #2
   13e68:	58d4      	ldr	r4, [r2, r3]
   13e6a:	4b47      	ldr	r3, [pc, #284]	; (13f88 <updateKalman+0x194>)
   13e6c:	683a      	ldr	r2, [r7, #0]
   13e6e:	0092      	lsls	r2, r2, #2
   13e70:	58d5      	ldr	r5, [r2, r3]
   13e72:	4b4b      	ldr	r3, [pc, #300]	; (13fa0 <updateKalman+0x1ac>)
   13e74:	683a      	ldr	r2, [r7, #0]
   13e76:	0092      	lsls	r2, r2, #2
   13e78:	58d2      	ldr	r2, [r2, r3]
   13e7a:	4b4a      	ldr	r3, [pc, #296]	; (13fa4 <updateKalman+0x1b0>)
   13e7c:	1c11      	adds	r1, r2, #0
   13e7e:	6878      	ldr	r0, [r7, #4]
   13e80:	4798      	blx	r3
   13e82:	1c03      	adds	r3, r0, #0
   13e84:	1c1a      	adds	r2, r3, #0
   13e86:	4b48      	ldr	r3, [pc, #288]	; (13fa8 <updateKalman+0x1b4>)
   13e88:	1c11      	adds	r1, r2, #0
   13e8a:	1c28      	adds	r0, r5, #0
   13e8c:	4798      	blx	r3
   13e8e:	1c03      	adds	r3, r0, #0
   13e90:	1c1a      	adds	r2, r3, #0
   13e92:	4b3b      	ldr	r3, [pc, #236]	; (13f80 <updateKalman+0x18c>)
   13e94:	1c11      	adds	r1, r2, #0
   13e96:	1c20      	adds	r0, r4, #0
   13e98:	4798      	blx	r3
   13e9a:	1c03      	adds	r3, r0, #0
   13e9c:	1c19      	adds	r1, r3, #0
   13e9e:	4b43      	ldr	r3, [pc, #268]	; (13fac <updateKalman+0x1b8>)
   13ea0:	683a      	ldr	r2, [r7, #0]
   13ea2:	0092      	lsls	r2, r2, #2
   13ea4:	50d1      	str	r1, [r2, r3]
	  err_estimate[kalmanIndex] =  (1.0 - kalman_gain[kalmanIndex])*err_estimate[kalmanIndex] + abs(last_estimate[kalmanIndex]-current_estimate[kalmanIndex])*q[kalmanIndex];
   13ea6:	4b38      	ldr	r3, [pc, #224]	; (13f88 <updateKalman+0x194>)
   13ea8:	683a      	ldr	r2, [r7, #0]
   13eaa:	0092      	lsls	r2, r2, #2
   13eac:	58d2      	ldr	r2, [r2, r3]
   13eae:	4b37      	ldr	r3, [pc, #220]	; (13f8c <updateKalman+0x198>)
   13eb0:	1c10      	adds	r0, r2, #0
   13eb2:	4798      	blx	r3
   13eb4:	0002      	movs	r2, r0
   13eb6:	000b      	movs	r3, r1
   13eb8:	4c3d      	ldr	r4, [pc, #244]	; (13fb0 <updateKalman+0x1bc>)
   13eba:	2000      	movs	r0, #0
   13ebc:	493d      	ldr	r1, [pc, #244]	; (13fb4 <updateKalman+0x1c0>)
   13ebe:	47a0      	blx	r4
   13ec0:	0003      	movs	r3, r0
   13ec2:	000c      	movs	r4, r1
   13ec4:	001d      	movs	r5, r3
   13ec6:	0026      	movs	r6, r4
   13ec8:	4b2b      	ldr	r3, [pc, #172]	; (13f78 <updateKalman+0x184>)
   13eca:	683a      	ldr	r2, [r7, #0]
   13ecc:	0092      	lsls	r2, r2, #2
   13ece:	58d2      	ldr	r2, [r2, r3]
   13ed0:	4b2e      	ldr	r3, [pc, #184]	; (13f8c <updateKalman+0x198>)
   13ed2:	1c10      	adds	r0, r2, #0
   13ed4:	4798      	blx	r3
   13ed6:	0002      	movs	r2, r0
   13ed8:	000b      	movs	r3, r1
   13eda:	4c37      	ldr	r4, [pc, #220]	; (13fb8 <updateKalman+0x1c4>)
   13edc:	0028      	movs	r0, r5
   13ede:	0031      	movs	r1, r6
   13ee0:	47a0      	blx	r4
   13ee2:	0003      	movs	r3, r0
   13ee4:	000c      	movs	r4, r1
   13ee6:	001d      	movs	r5, r3
   13ee8:	0026      	movs	r6, r4
   13eea:	4b2d      	ldr	r3, [pc, #180]	; (13fa0 <updateKalman+0x1ac>)
   13eec:	683a      	ldr	r2, [r7, #0]
   13eee:	0092      	lsls	r2, r2, #2
   13ef0:	58d0      	ldr	r0, [r2, r3]
   13ef2:	4b2e      	ldr	r3, [pc, #184]	; (13fac <updateKalman+0x1b8>)
   13ef4:	683a      	ldr	r2, [r7, #0]
   13ef6:	0092      	lsls	r2, r2, #2
   13ef8:	58d2      	ldr	r2, [r2, r3]
   13efa:	4b2a      	ldr	r3, [pc, #168]	; (13fa4 <updateKalman+0x1b0>)
   13efc:	1c11      	adds	r1, r2, #0
   13efe:	4798      	blx	r3
   13f00:	1c03      	adds	r3, r0, #0
   13f02:	1c1a      	adds	r2, r3, #0
   13f04:	4b2d      	ldr	r3, [pc, #180]	; (13fbc <updateKalman+0x1c8>)
   13f06:	1c10      	adds	r0, r2, #0
   13f08:	4798      	blx	r3
   13f0a:	0003      	movs	r3, r0
   13f0c:	17d9      	asrs	r1, r3, #31
   13f0e:	185a      	adds	r2, r3, r1
   13f10:	404a      	eors	r2, r1
   13f12:	4b2b      	ldr	r3, [pc, #172]	; (13fc0 <updateKalman+0x1cc>)
   13f14:	0010      	movs	r0, r2
   13f16:	4798      	blx	r3
   13f18:	4b2a      	ldr	r3, [pc, #168]	; (13fc4 <updateKalman+0x1d0>)
   13f1a:	683a      	ldr	r2, [r7, #0]
   13f1c:	0092      	lsls	r2, r2, #2
   13f1e:	58d2      	ldr	r2, [r2, r3]
   13f20:	4b21      	ldr	r3, [pc, #132]	; (13fa8 <updateKalman+0x1b4>)
   13f22:	1c11      	adds	r1, r2, #0
   13f24:	4798      	blx	r3
   13f26:	1c03      	adds	r3, r0, #0
   13f28:	1c1a      	adds	r2, r3, #0
   13f2a:	4b18      	ldr	r3, [pc, #96]	; (13f8c <updateKalman+0x198>)
   13f2c:	1c10      	adds	r0, r2, #0
   13f2e:	4798      	blx	r3
   13f30:	0002      	movs	r2, r0
   13f32:	000b      	movs	r3, r1
   13f34:	4c24      	ldr	r4, [pc, #144]	; (13fc8 <updateKalman+0x1d4>)
   13f36:	0028      	movs	r0, r5
   13f38:	0031      	movs	r1, r6
   13f3a:	47a0      	blx	r4
   13f3c:	0003      	movs	r3, r0
   13f3e:	000c      	movs	r4, r1
   13f40:	0019      	movs	r1, r3
   13f42:	0022      	movs	r2, r4
   13f44:	4b21      	ldr	r3, [pc, #132]	; (13fcc <updateKalman+0x1d8>)
   13f46:	0008      	movs	r0, r1
   13f48:	0011      	movs	r1, r2
   13f4a:	4798      	blx	r3
   13f4c:	1c01      	adds	r1, r0, #0
   13f4e:	4b0a      	ldr	r3, [pc, #40]	; (13f78 <updateKalman+0x184>)
   13f50:	683a      	ldr	r2, [r7, #0]
   13f52:	0092      	lsls	r2, r2, #2
   13f54:	50d1      	str	r1, [r2, r3]
	  last_estimate[kalmanIndex]=current_estimate[kalmanIndex];
   13f56:	4b15      	ldr	r3, [pc, #84]	; (13fac <updateKalman+0x1b8>)
   13f58:	683a      	ldr	r2, [r7, #0]
   13f5a:	0092      	lsls	r2, r2, #2
   13f5c:	58d1      	ldr	r1, [r2, r3]
   13f5e:	4b10      	ldr	r3, [pc, #64]	; (13fa0 <updateKalman+0x1ac>)
   13f60:	683a      	ldr	r2, [r7, #0]
   13f62:	0092      	lsls	r2, r2, #2
   13f64:	50d1      	str	r1, [r2, r3]

	  return current_estimate[kalmanIndex];
   13f66:	4b11      	ldr	r3, [pc, #68]	; (13fac <updateKalman+0x1b8>)
   13f68:	683a      	ldr	r2, [r7, #0]
   13f6a:	0092      	lsls	r2, r2, #2
   13f6c:	58d3      	ldr	r3, [r2, r3]
   13f6e:	1c18      	adds	r0, r3, #0
   13f70:	46bd      	mov	sp, r7
   13f72:	b003      	add	sp, #12
   13f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f76:	46c0      	nop			; (mov r8, r8)
   13f78:	200009c4 	.word	0x200009c4
   13f7c:	20000c80 	.word	0x20000c80
   13f80:	0001459d 	.word	0x0001459d
   13f84:	000148c1 	.word	0x000148c1
   13f88:	20000ee8 	.word	0x20000ee8
   13f8c:	00016e95 	.word	0x00016e95
   13f90:	00014441 	.word	0x00014441
   13f94:	eb851eb8 	.word	0xeb851eb8
   13f98:	3f8eb851 	.word	0x3f8eb851
   13f9c:	3c75c28f 	.word	0x3c75c28f
   13fa0:	2000090c 	.word	0x2000090c
   13fa4:	00014ee1 	.word	0x00014ee1
   13fa8:	00014ca1 	.word	0x00014ca1
   13fac:	20000a3c 	.word	0x20000a3c
   13fb0:	0001670d 	.word	0x0001670d
   13fb4:	3ff00000 	.word	0x3ff00000
   13fb8:	0001620d 	.word	0x0001620d
   13fbc:	00015219 	.word	0x00015219
   13fc0:	00015259 	.word	0x00015259
   13fc4:	20000fb8 	.word	0x20000fb8
   13fc8:	00015385 	.word	0x00015385
   13fcc:	00016f39 	.word	0x00016f39

00013fd0 <ldexpf>:
   13fd0:	b570      	push	{r4, r5, r6, lr}
   13fd2:	1c04      	adds	r4, r0, #0
   13fd4:	000d      	movs	r5, r1
   13fd6:	f000 f889 	bl	140ec <finitef>
   13fda:	2800      	cmp	r0, #0
   13fdc:	d005      	beq.n	13fea <ldexpf+0x1a>
   13fde:	2100      	movs	r1, #0
   13fe0:	1c20      	adds	r0, r4, #0
   13fe2:	f000 fa4d 	bl	14480 <__aeabi_fcmpeq>
   13fe6:	2800      	cmp	r0, #0
   13fe8:	d001      	beq.n	13fee <ldexpf+0x1e>
   13fea:	1c20      	adds	r0, r4, #0
   13fec:	bd70      	pop	{r4, r5, r6, pc}
   13fee:	1c20      	adds	r0, r4, #0
   13ff0:	0029      	movs	r1, r5
   13ff2:	f000 f811 	bl	14018 <scalbnf>
   13ff6:	1c04      	adds	r4, r0, #0
   13ff8:	f000 f878 	bl	140ec <finitef>
   13ffc:	2800      	cmp	r0, #0
   13ffe:	d005      	beq.n	1400c <ldexpf+0x3c>
   14000:	2100      	movs	r1, #0
   14002:	1c20      	adds	r0, r4, #0
   14004:	f000 fa3c 	bl	14480 <__aeabi_fcmpeq>
   14008:	2800      	cmp	r0, #0
   1400a:	d0ee      	beq.n	13fea <ldexpf+0x1a>
   1400c:	f003 f83c 	bl	17088 <__errno>
   14010:	2322      	movs	r3, #34	; 0x22
   14012:	6003      	str	r3, [r0, #0]
   14014:	e7e9      	b.n	13fea <ldexpf+0x1a>
   14016:	46c0      	nop			; (mov r8, r8)

00014018 <scalbnf>:
   14018:	0043      	lsls	r3, r0, #1
   1401a:	b570      	push	{r4, r5, r6, lr}
   1401c:	1c02      	adds	r2, r0, #0
   1401e:	000c      	movs	r4, r1
   14020:	0005      	movs	r5, r0
   14022:	0859      	lsrs	r1, r3, #1
   14024:	d00f      	beq.n	14046 <scalbnf+0x2e>
   14026:	4e27      	ldr	r6, [pc, #156]	; (140c4 <scalbnf+0xac>)
   14028:	42b1      	cmp	r1, r6
   1402a:	d80d      	bhi.n	14048 <scalbnf+0x30>
   1402c:	4826      	ldr	r0, [pc, #152]	; (140c8 <scalbnf+0xb0>)
   1402e:	4281      	cmp	r1, r0
   14030:	d90e      	bls.n	14050 <scalbnf+0x38>
   14032:	0e1b      	lsrs	r3, r3, #24
   14034:	191b      	adds	r3, r3, r4
   14036:	2bfe      	cmp	r3, #254	; 0xfe
   14038:	dc2a      	bgt.n	14090 <scalbnf+0x78>
   1403a:	2b00      	cmp	r3, #0
   1403c:	dd16      	ble.n	1406c <scalbnf+0x54>
   1403e:	4823      	ldr	r0, [pc, #140]	; (140cc <scalbnf+0xb4>)
   14040:	05db      	lsls	r3, r3, #23
   14042:	4028      	ands	r0, r5
   14044:	4318      	orrs	r0, r3
   14046:	bd70      	pop	{r4, r5, r6, pc}
   14048:	1c01      	adds	r1, r0, #0
   1404a:	f000 faa7 	bl	1459c <__aeabi_fadd>
   1404e:	e7fa      	b.n	14046 <scalbnf+0x2e>
   14050:	2198      	movs	r1, #152	; 0x98
   14052:	1c10      	adds	r0, r2, #0
   14054:	05c9      	lsls	r1, r1, #23
   14056:	f000 fe23 	bl	14ca0 <__aeabi_fmul>
   1405a:	4b1d      	ldr	r3, [pc, #116]	; (140d0 <scalbnf+0xb8>)
   1405c:	1c02      	adds	r2, r0, #0
   1405e:	429c      	cmp	r4, r3
   14060:	db12      	blt.n	14088 <scalbnf+0x70>
   14062:	0043      	lsls	r3, r0, #1
   14064:	0e1b      	lsrs	r3, r3, #24
   14066:	0005      	movs	r5, r0
   14068:	3b19      	subs	r3, #25
   1406a:	e7e3      	b.n	14034 <scalbnf+0x1c>
   1406c:	0019      	movs	r1, r3
   1406e:	3116      	adds	r1, #22
   14070:	da16      	bge.n	140a0 <scalbnf+0x88>
   14072:	4b18      	ldr	r3, [pc, #96]	; (140d4 <scalbnf+0xbc>)
   14074:	1c11      	adds	r1, r2, #0
   14076:	429c      	cmp	r4, r3
   14078:	dd1c      	ble.n	140b4 <scalbnf+0x9c>
   1407a:	4817      	ldr	r0, [pc, #92]	; (140d8 <scalbnf+0xc0>)
   1407c:	f000 f830 	bl	140e0 <copysignf>
   14080:	4915      	ldr	r1, [pc, #84]	; (140d8 <scalbnf+0xc0>)
   14082:	f000 fe0d 	bl	14ca0 <__aeabi_fmul>
   14086:	e7de      	b.n	14046 <scalbnf+0x2e>
   14088:	4914      	ldr	r1, [pc, #80]	; (140dc <scalbnf+0xc4>)
   1408a:	f000 fe09 	bl	14ca0 <__aeabi_fmul>
   1408e:	e7da      	b.n	14046 <scalbnf+0x2e>
   14090:	1c11      	adds	r1, r2, #0
   14092:	4811      	ldr	r0, [pc, #68]	; (140d8 <scalbnf+0xc0>)
   14094:	f000 f824 	bl	140e0 <copysignf>
   14098:	490f      	ldr	r1, [pc, #60]	; (140d8 <scalbnf+0xc0>)
   1409a:	f000 fe01 	bl	14ca0 <__aeabi_fmul>
   1409e:	e7d2      	b.n	14046 <scalbnf+0x2e>
   140a0:	21cc      	movs	r1, #204	; 0xcc
   140a2:	3319      	adds	r3, #25
   140a4:	05d8      	lsls	r0, r3, #23
   140a6:	4b09      	ldr	r3, [pc, #36]	; (140cc <scalbnf+0xb4>)
   140a8:	0589      	lsls	r1, r1, #22
   140aa:	401d      	ands	r5, r3
   140ac:	4328      	orrs	r0, r5
   140ae:	f000 fdf7 	bl	14ca0 <__aeabi_fmul>
   140b2:	e7c8      	b.n	14046 <scalbnf+0x2e>
   140b4:	4809      	ldr	r0, [pc, #36]	; (140dc <scalbnf+0xc4>)
   140b6:	f000 f813 	bl	140e0 <copysignf>
   140ba:	4908      	ldr	r1, [pc, #32]	; (140dc <scalbnf+0xc4>)
   140bc:	f000 fdf0 	bl	14ca0 <__aeabi_fmul>
   140c0:	e7c1      	b.n	14046 <scalbnf+0x2e>
   140c2:	46c0      	nop			; (mov r8, r8)
   140c4:	7f7fffff 	.word	0x7f7fffff
   140c8:	007fffff 	.word	0x007fffff
   140cc:	807fffff 	.word	0x807fffff
   140d0:	ffff3cb0 	.word	0xffff3cb0
   140d4:	0000c350 	.word	0x0000c350
   140d8:	7149f2ca 	.word	0x7149f2ca
   140dc:	0da24260 	.word	0x0da24260

000140e0 <copysignf>:
   140e0:	0040      	lsls	r0, r0, #1
   140e2:	0fc9      	lsrs	r1, r1, #31
   140e4:	07c9      	lsls	r1, r1, #31
   140e6:	0840      	lsrs	r0, r0, #1
   140e8:	4308      	orrs	r0, r1
   140ea:	4770      	bx	lr

000140ec <finitef>:
   140ec:	0043      	lsls	r3, r0, #1
   140ee:	2000      	movs	r0, #0
   140f0:	4a02      	ldr	r2, [pc, #8]	; (140fc <finitef+0x10>)
   140f2:	085b      	lsrs	r3, r3, #1
   140f4:	429a      	cmp	r2, r3
   140f6:	4140      	adcs	r0, r0
   140f8:	4770      	bx	lr
   140fa:	46c0      	nop			; (mov r8, r8)
   140fc:	7f7fffff 	.word	0x7f7fffff

00014100 <__udivsi3>:
   14100:	2200      	movs	r2, #0
   14102:	0843      	lsrs	r3, r0, #1
   14104:	428b      	cmp	r3, r1
   14106:	d374      	bcc.n	141f2 <__udivsi3+0xf2>
   14108:	0903      	lsrs	r3, r0, #4
   1410a:	428b      	cmp	r3, r1
   1410c:	d35f      	bcc.n	141ce <__udivsi3+0xce>
   1410e:	0a03      	lsrs	r3, r0, #8
   14110:	428b      	cmp	r3, r1
   14112:	d344      	bcc.n	1419e <__udivsi3+0x9e>
   14114:	0b03      	lsrs	r3, r0, #12
   14116:	428b      	cmp	r3, r1
   14118:	d328      	bcc.n	1416c <__udivsi3+0x6c>
   1411a:	0c03      	lsrs	r3, r0, #16
   1411c:	428b      	cmp	r3, r1
   1411e:	d30d      	bcc.n	1413c <__udivsi3+0x3c>
   14120:	22ff      	movs	r2, #255	; 0xff
   14122:	0209      	lsls	r1, r1, #8
   14124:	ba12      	rev	r2, r2
   14126:	0c03      	lsrs	r3, r0, #16
   14128:	428b      	cmp	r3, r1
   1412a:	d302      	bcc.n	14132 <__udivsi3+0x32>
   1412c:	1212      	asrs	r2, r2, #8
   1412e:	0209      	lsls	r1, r1, #8
   14130:	d065      	beq.n	141fe <__udivsi3+0xfe>
   14132:	0b03      	lsrs	r3, r0, #12
   14134:	428b      	cmp	r3, r1
   14136:	d319      	bcc.n	1416c <__udivsi3+0x6c>
   14138:	e000      	b.n	1413c <__udivsi3+0x3c>
   1413a:	0a09      	lsrs	r1, r1, #8
   1413c:	0bc3      	lsrs	r3, r0, #15
   1413e:	428b      	cmp	r3, r1
   14140:	d301      	bcc.n	14146 <__udivsi3+0x46>
   14142:	03cb      	lsls	r3, r1, #15
   14144:	1ac0      	subs	r0, r0, r3
   14146:	4152      	adcs	r2, r2
   14148:	0b83      	lsrs	r3, r0, #14
   1414a:	428b      	cmp	r3, r1
   1414c:	d301      	bcc.n	14152 <__udivsi3+0x52>
   1414e:	038b      	lsls	r3, r1, #14
   14150:	1ac0      	subs	r0, r0, r3
   14152:	4152      	adcs	r2, r2
   14154:	0b43      	lsrs	r3, r0, #13
   14156:	428b      	cmp	r3, r1
   14158:	d301      	bcc.n	1415e <__udivsi3+0x5e>
   1415a:	034b      	lsls	r3, r1, #13
   1415c:	1ac0      	subs	r0, r0, r3
   1415e:	4152      	adcs	r2, r2
   14160:	0b03      	lsrs	r3, r0, #12
   14162:	428b      	cmp	r3, r1
   14164:	d301      	bcc.n	1416a <__udivsi3+0x6a>
   14166:	030b      	lsls	r3, r1, #12
   14168:	1ac0      	subs	r0, r0, r3
   1416a:	4152      	adcs	r2, r2
   1416c:	0ac3      	lsrs	r3, r0, #11
   1416e:	428b      	cmp	r3, r1
   14170:	d301      	bcc.n	14176 <__udivsi3+0x76>
   14172:	02cb      	lsls	r3, r1, #11
   14174:	1ac0      	subs	r0, r0, r3
   14176:	4152      	adcs	r2, r2
   14178:	0a83      	lsrs	r3, r0, #10
   1417a:	428b      	cmp	r3, r1
   1417c:	d301      	bcc.n	14182 <__udivsi3+0x82>
   1417e:	028b      	lsls	r3, r1, #10
   14180:	1ac0      	subs	r0, r0, r3
   14182:	4152      	adcs	r2, r2
   14184:	0a43      	lsrs	r3, r0, #9
   14186:	428b      	cmp	r3, r1
   14188:	d301      	bcc.n	1418e <__udivsi3+0x8e>
   1418a:	024b      	lsls	r3, r1, #9
   1418c:	1ac0      	subs	r0, r0, r3
   1418e:	4152      	adcs	r2, r2
   14190:	0a03      	lsrs	r3, r0, #8
   14192:	428b      	cmp	r3, r1
   14194:	d301      	bcc.n	1419a <__udivsi3+0x9a>
   14196:	020b      	lsls	r3, r1, #8
   14198:	1ac0      	subs	r0, r0, r3
   1419a:	4152      	adcs	r2, r2
   1419c:	d2cd      	bcs.n	1413a <__udivsi3+0x3a>
   1419e:	09c3      	lsrs	r3, r0, #7
   141a0:	428b      	cmp	r3, r1
   141a2:	d301      	bcc.n	141a8 <__udivsi3+0xa8>
   141a4:	01cb      	lsls	r3, r1, #7
   141a6:	1ac0      	subs	r0, r0, r3
   141a8:	4152      	adcs	r2, r2
   141aa:	0983      	lsrs	r3, r0, #6
   141ac:	428b      	cmp	r3, r1
   141ae:	d301      	bcc.n	141b4 <__udivsi3+0xb4>
   141b0:	018b      	lsls	r3, r1, #6
   141b2:	1ac0      	subs	r0, r0, r3
   141b4:	4152      	adcs	r2, r2
   141b6:	0943      	lsrs	r3, r0, #5
   141b8:	428b      	cmp	r3, r1
   141ba:	d301      	bcc.n	141c0 <__udivsi3+0xc0>
   141bc:	014b      	lsls	r3, r1, #5
   141be:	1ac0      	subs	r0, r0, r3
   141c0:	4152      	adcs	r2, r2
   141c2:	0903      	lsrs	r3, r0, #4
   141c4:	428b      	cmp	r3, r1
   141c6:	d301      	bcc.n	141cc <__udivsi3+0xcc>
   141c8:	010b      	lsls	r3, r1, #4
   141ca:	1ac0      	subs	r0, r0, r3
   141cc:	4152      	adcs	r2, r2
   141ce:	08c3      	lsrs	r3, r0, #3
   141d0:	428b      	cmp	r3, r1
   141d2:	d301      	bcc.n	141d8 <__udivsi3+0xd8>
   141d4:	00cb      	lsls	r3, r1, #3
   141d6:	1ac0      	subs	r0, r0, r3
   141d8:	4152      	adcs	r2, r2
   141da:	0883      	lsrs	r3, r0, #2
   141dc:	428b      	cmp	r3, r1
   141de:	d301      	bcc.n	141e4 <__udivsi3+0xe4>
   141e0:	008b      	lsls	r3, r1, #2
   141e2:	1ac0      	subs	r0, r0, r3
   141e4:	4152      	adcs	r2, r2
   141e6:	0843      	lsrs	r3, r0, #1
   141e8:	428b      	cmp	r3, r1
   141ea:	d301      	bcc.n	141f0 <__udivsi3+0xf0>
   141ec:	004b      	lsls	r3, r1, #1
   141ee:	1ac0      	subs	r0, r0, r3
   141f0:	4152      	adcs	r2, r2
   141f2:	1a41      	subs	r1, r0, r1
   141f4:	d200      	bcs.n	141f8 <__udivsi3+0xf8>
   141f6:	4601      	mov	r1, r0
   141f8:	4152      	adcs	r2, r2
   141fa:	4610      	mov	r0, r2
   141fc:	4770      	bx	lr
   141fe:	e7ff      	b.n	14200 <__udivsi3+0x100>
   14200:	b501      	push	{r0, lr}
   14202:	2000      	movs	r0, #0
   14204:	f000 f8f0 	bl	143e8 <__aeabi_idiv0>
   14208:	bd02      	pop	{r1, pc}
   1420a:	46c0      	nop			; (mov r8, r8)

0001420c <__aeabi_uidivmod>:
   1420c:	2900      	cmp	r1, #0
   1420e:	d0f7      	beq.n	14200 <__udivsi3+0x100>
   14210:	e776      	b.n	14100 <__udivsi3>
   14212:	4770      	bx	lr

00014214 <__divsi3>:
   14214:	4603      	mov	r3, r0
   14216:	430b      	orrs	r3, r1
   14218:	d47f      	bmi.n	1431a <__divsi3+0x106>
   1421a:	2200      	movs	r2, #0
   1421c:	0843      	lsrs	r3, r0, #1
   1421e:	428b      	cmp	r3, r1
   14220:	d374      	bcc.n	1430c <__divsi3+0xf8>
   14222:	0903      	lsrs	r3, r0, #4
   14224:	428b      	cmp	r3, r1
   14226:	d35f      	bcc.n	142e8 <__divsi3+0xd4>
   14228:	0a03      	lsrs	r3, r0, #8
   1422a:	428b      	cmp	r3, r1
   1422c:	d344      	bcc.n	142b8 <__divsi3+0xa4>
   1422e:	0b03      	lsrs	r3, r0, #12
   14230:	428b      	cmp	r3, r1
   14232:	d328      	bcc.n	14286 <__divsi3+0x72>
   14234:	0c03      	lsrs	r3, r0, #16
   14236:	428b      	cmp	r3, r1
   14238:	d30d      	bcc.n	14256 <__divsi3+0x42>
   1423a:	22ff      	movs	r2, #255	; 0xff
   1423c:	0209      	lsls	r1, r1, #8
   1423e:	ba12      	rev	r2, r2
   14240:	0c03      	lsrs	r3, r0, #16
   14242:	428b      	cmp	r3, r1
   14244:	d302      	bcc.n	1424c <__divsi3+0x38>
   14246:	1212      	asrs	r2, r2, #8
   14248:	0209      	lsls	r1, r1, #8
   1424a:	d065      	beq.n	14318 <__divsi3+0x104>
   1424c:	0b03      	lsrs	r3, r0, #12
   1424e:	428b      	cmp	r3, r1
   14250:	d319      	bcc.n	14286 <__divsi3+0x72>
   14252:	e000      	b.n	14256 <__divsi3+0x42>
   14254:	0a09      	lsrs	r1, r1, #8
   14256:	0bc3      	lsrs	r3, r0, #15
   14258:	428b      	cmp	r3, r1
   1425a:	d301      	bcc.n	14260 <__divsi3+0x4c>
   1425c:	03cb      	lsls	r3, r1, #15
   1425e:	1ac0      	subs	r0, r0, r3
   14260:	4152      	adcs	r2, r2
   14262:	0b83      	lsrs	r3, r0, #14
   14264:	428b      	cmp	r3, r1
   14266:	d301      	bcc.n	1426c <__divsi3+0x58>
   14268:	038b      	lsls	r3, r1, #14
   1426a:	1ac0      	subs	r0, r0, r3
   1426c:	4152      	adcs	r2, r2
   1426e:	0b43      	lsrs	r3, r0, #13
   14270:	428b      	cmp	r3, r1
   14272:	d301      	bcc.n	14278 <__divsi3+0x64>
   14274:	034b      	lsls	r3, r1, #13
   14276:	1ac0      	subs	r0, r0, r3
   14278:	4152      	adcs	r2, r2
   1427a:	0b03      	lsrs	r3, r0, #12
   1427c:	428b      	cmp	r3, r1
   1427e:	d301      	bcc.n	14284 <__divsi3+0x70>
   14280:	030b      	lsls	r3, r1, #12
   14282:	1ac0      	subs	r0, r0, r3
   14284:	4152      	adcs	r2, r2
   14286:	0ac3      	lsrs	r3, r0, #11
   14288:	428b      	cmp	r3, r1
   1428a:	d301      	bcc.n	14290 <__divsi3+0x7c>
   1428c:	02cb      	lsls	r3, r1, #11
   1428e:	1ac0      	subs	r0, r0, r3
   14290:	4152      	adcs	r2, r2
   14292:	0a83      	lsrs	r3, r0, #10
   14294:	428b      	cmp	r3, r1
   14296:	d301      	bcc.n	1429c <__divsi3+0x88>
   14298:	028b      	lsls	r3, r1, #10
   1429a:	1ac0      	subs	r0, r0, r3
   1429c:	4152      	adcs	r2, r2
   1429e:	0a43      	lsrs	r3, r0, #9
   142a0:	428b      	cmp	r3, r1
   142a2:	d301      	bcc.n	142a8 <__divsi3+0x94>
   142a4:	024b      	lsls	r3, r1, #9
   142a6:	1ac0      	subs	r0, r0, r3
   142a8:	4152      	adcs	r2, r2
   142aa:	0a03      	lsrs	r3, r0, #8
   142ac:	428b      	cmp	r3, r1
   142ae:	d301      	bcc.n	142b4 <__divsi3+0xa0>
   142b0:	020b      	lsls	r3, r1, #8
   142b2:	1ac0      	subs	r0, r0, r3
   142b4:	4152      	adcs	r2, r2
   142b6:	d2cd      	bcs.n	14254 <__divsi3+0x40>
   142b8:	09c3      	lsrs	r3, r0, #7
   142ba:	428b      	cmp	r3, r1
   142bc:	d301      	bcc.n	142c2 <__divsi3+0xae>
   142be:	01cb      	lsls	r3, r1, #7
   142c0:	1ac0      	subs	r0, r0, r3
   142c2:	4152      	adcs	r2, r2
   142c4:	0983      	lsrs	r3, r0, #6
   142c6:	428b      	cmp	r3, r1
   142c8:	d301      	bcc.n	142ce <__divsi3+0xba>
   142ca:	018b      	lsls	r3, r1, #6
   142cc:	1ac0      	subs	r0, r0, r3
   142ce:	4152      	adcs	r2, r2
   142d0:	0943      	lsrs	r3, r0, #5
   142d2:	428b      	cmp	r3, r1
   142d4:	d301      	bcc.n	142da <__divsi3+0xc6>
   142d6:	014b      	lsls	r3, r1, #5
   142d8:	1ac0      	subs	r0, r0, r3
   142da:	4152      	adcs	r2, r2
   142dc:	0903      	lsrs	r3, r0, #4
   142de:	428b      	cmp	r3, r1
   142e0:	d301      	bcc.n	142e6 <__divsi3+0xd2>
   142e2:	010b      	lsls	r3, r1, #4
   142e4:	1ac0      	subs	r0, r0, r3
   142e6:	4152      	adcs	r2, r2
   142e8:	08c3      	lsrs	r3, r0, #3
   142ea:	428b      	cmp	r3, r1
   142ec:	d301      	bcc.n	142f2 <__divsi3+0xde>
   142ee:	00cb      	lsls	r3, r1, #3
   142f0:	1ac0      	subs	r0, r0, r3
   142f2:	4152      	adcs	r2, r2
   142f4:	0883      	lsrs	r3, r0, #2
   142f6:	428b      	cmp	r3, r1
   142f8:	d301      	bcc.n	142fe <__divsi3+0xea>
   142fa:	008b      	lsls	r3, r1, #2
   142fc:	1ac0      	subs	r0, r0, r3
   142fe:	4152      	adcs	r2, r2
   14300:	0843      	lsrs	r3, r0, #1
   14302:	428b      	cmp	r3, r1
   14304:	d301      	bcc.n	1430a <__divsi3+0xf6>
   14306:	004b      	lsls	r3, r1, #1
   14308:	1ac0      	subs	r0, r0, r3
   1430a:	4152      	adcs	r2, r2
   1430c:	1a41      	subs	r1, r0, r1
   1430e:	d200      	bcs.n	14312 <__divsi3+0xfe>
   14310:	4601      	mov	r1, r0
   14312:	4152      	adcs	r2, r2
   14314:	4610      	mov	r0, r2
   14316:	4770      	bx	lr
   14318:	e05d      	b.n	143d6 <__divsi3+0x1c2>
   1431a:	0fca      	lsrs	r2, r1, #31
   1431c:	d000      	beq.n	14320 <__divsi3+0x10c>
   1431e:	4249      	negs	r1, r1
   14320:	1003      	asrs	r3, r0, #32
   14322:	d300      	bcc.n	14326 <__divsi3+0x112>
   14324:	4240      	negs	r0, r0
   14326:	4053      	eors	r3, r2
   14328:	2200      	movs	r2, #0
   1432a:	469c      	mov	ip, r3
   1432c:	0903      	lsrs	r3, r0, #4
   1432e:	428b      	cmp	r3, r1
   14330:	d32d      	bcc.n	1438e <__divsi3+0x17a>
   14332:	0a03      	lsrs	r3, r0, #8
   14334:	428b      	cmp	r3, r1
   14336:	d312      	bcc.n	1435e <__divsi3+0x14a>
   14338:	22fc      	movs	r2, #252	; 0xfc
   1433a:	0189      	lsls	r1, r1, #6
   1433c:	ba12      	rev	r2, r2
   1433e:	0a03      	lsrs	r3, r0, #8
   14340:	428b      	cmp	r3, r1
   14342:	d30c      	bcc.n	1435e <__divsi3+0x14a>
   14344:	0189      	lsls	r1, r1, #6
   14346:	1192      	asrs	r2, r2, #6
   14348:	428b      	cmp	r3, r1
   1434a:	d308      	bcc.n	1435e <__divsi3+0x14a>
   1434c:	0189      	lsls	r1, r1, #6
   1434e:	1192      	asrs	r2, r2, #6
   14350:	428b      	cmp	r3, r1
   14352:	d304      	bcc.n	1435e <__divsi3+0x14a>
   14354:	0189      	lsls	r1, r1, #6
   14356:	d03a      	beq.n	143ce <__divsi3+0x1ba>
   14358:	1192      	asrs	r2, r2, #6
   1435a:	e000      	b.n	1435e <__divsi3+0x14a>
   1435c:	0989      	lsrs	r1, r1, #6
   1435e:	09c3      	lsrs	r3, r0, #7
   14360:	428b      	cmp	r3, r1
   14362:	d301      	bcc.n	14368 <__divsi3+0x154>
   14364:	01cb      	lsls	r3, r1, #7
   14366:	1ac0      	subs	r0, r0, r3
   14368:	4152      	adcs	r2, r2
   1436a:	0983      	lsrs	r3, r0, #6
   1436c:	428b      	cmp	r3, r1
   1436e:	d301      	bcc.n	14374 <__divsi3+0x160>
   14370:	018b      	lsls	r3, r1, #6
   14372:	1ac0      	subs	r0, r0, r3
   14374:	4152      	adcs	r2, r2
   14376:	0943      	lsrs	r3, r0, #5
   14378:	428b      	cmp	r3, r1
   1437a:	d301      	bcc.n	14380 <__divsi3+0x16c>
   1437c:	014b      	lsls	r3, r1, #5
   1437e:	1ac0      	subs	r0, r0, r3
   14380:	4152      	adcs	r2, r2
   14382:	0903      	lsrs	r3, r0, #4
   14384:	428b      	cmp	r3, r1
   14386:	d301      	bcc.n	1438c <__divsi3+0x178>
   14388:	010b      	lsls	r3, r1, #4
   1438a:	1ac0      	subs	r0, r0, r3
   1438c:	4152      	adcs	r2, r2
   1438e:	08c3      	lsrs	r3, r0, #3
   14390:	428b      	cmp	r3, r1
   14392:	d301      	bcc.n	14398 <__divsi3+0x184>
   14394:	00cb      	lsls	r3, r1, #3
   14396:	1ac0      	subs	r0, r0, r3
   14398:	4152      	adcs	r2, r2
   1439a:	0883      	lsrs	r3, r0, #2
   1439c:	428b      	cmp	r3, r1
   1439e:	d301      	bcc.n	143a4 <__divsi3+0x190>
   143a0:	008b      	lsls	r3, r1, #2
   143a2:	1ac0      	subs	r0, r0, r3
   143a4:	4152      	adcs	r2, r2
   143a6:	d2d9      	bcs.n	1435c <__divsi3+0x148>
   143a8:	0843      	lsrs	r3, r0, #1
   143aa:	428b      	cmp	r3, r1
   143ac:	d301      	bcc.n	143b2 <__divsi3+0x19e>
   143ae:	004b      	lsls	r3, r1, #1
   143b0:	1ac0      	subs	r0, r0, r3
   143b2:	4152      	adcs	r2, r2
   143b4:	1a41      	subs	r1, r0, r1
   143b6:	d200      	bcs.n	143ba <__divsi3+0x1a6>
   143b8:	4601      	mov	r1, r0
   143ba:	4663      	mov	r3, ip
   143bc:	4152      	adcs	r2, r2
   143be:	105b      	asrs	r3, r3, #1
   143c0:	4610      	mov	r0, r2
   143c2:	d301      	bcc.n	143c8 <__divsi3+0x1b4>
   143c4:	4240      	negs	r0, r0
   143c6:	2b00      	cmp	r3, #0
   143c8:	d500      	bpl.n	143cc <__divsi3+0x1b8>
   143ca:	4249      	negs	r1, r1
   143cc:	4770      	bx	lr
   143ce:	4663      	mov	r3, ip
   143d0:	105b      	asrs	r3, r3, #1
   143d2:	d300      	bcc.n	143d6 <__divsi3+0x1c2>
   143d4:	4240      	negs	r0, r0
   143d6:	b501      	push	{r0, lr}
   143d8:	2000      	movs	r0, #0
   143da:	f000 f805 	bl	143e8 <__aeabi_idiv0>
   143de:	bd02      	pop	{r1, pc}

000143e0 <__aeabi_idivmod>:
   143e0:	2900      	cmp	r1, #0
   143e2:	d0f8      	beq.n	143d6 <__divsi3+0x1c2>
   143e4:	e716      	b.n	14214 <__divsi3>
   143e6:	4770      	bx	lr

000143e8 <__aeabi_idiv0>:
   143e8:	4770      	bx	lr
   143ea:	46c0      	nop			; (mov r8, r8)

000143ec <__aeabi_cdrcmple>:
   143ec:	4684      	mov	ip, r0
   143ee:	1c10      	adds	r0, r2, #0
   143f0:	4662      	mov	r2, ip
   143f2:	468c      	mov	ip, r1
   143f4:	1c19      	adds	r1, r3, #0
   143f6:	4663      	mov	r3, ip
   143f8:	e000      	b.n	143fc <__aeabi_cdcmpeq>
   143fa:	46c0      	nop			; (mov r8, r8)

000143fc <__aeabi_cdcmpeq>:
   143fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   143fe:	f001 fea3 	bl	16148 <__ledf2>
   14402:	2800      	cmp	r0, #0
   14404:	d401      	bmi.n	1440a <__aeabi_cdcmpeq+0xe>
   14406:	2100      	movs	r1, #0
   14408:	42c8      	cmn	r0, r1
   1440a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001440c <__aeabi_dcmpeq>:
   1440c:	b510      	push	{r4, lr}
   1440e:	f001 fdfd 	bl	1600c <__eqdf2>
   14412:	4240      	negs	r0, r0
   14414:	3001      	adds	r0, #1
   14416:	bd10      	pop	{r4, pc}

00014418 <__aeabi_dcmplt>:
   14418:	b510      	push	{r4, lr}
   1441a:	f001 fe95 	bl	16148 <__ledf2>
   1441e:	2800      	cmp	r0, #0
   14420:	db01      	blt.n	14426 <__aeabi_dcmplt+0xe>
   14422:	2000      	movs	r0, #0
   14424:	bd10      	pop	{r4, pc}
   14426:	2001      	movs	r0, #1
   14428:	bd10      	pop	{r4, pc}
   1442a:	46c0      	nop			; (mov r8, r8)

0001442c <__aeabi_dcmple>:
   1442c:	b510      	push	{r4, lr}
   1442e:	f001 fe8b 	bl	16148 <__ledf2>
   14432:	2800      	cmp	r0, #0
   14434:	dd01      	ble.n	1443a <__aeabi_dcmple+0xe>
   14436:	2000      	movs	r0, #0
   14438:	bd10      	pop	{r4, pc}
   1443a:	2001      	movs	r0, #1
   1443c:	bd10      	pop	{r4, pc}
   1443e:	46c0      	nop			; (mov r8, r8)

00014440 <__aeabi_dcmpgt>:
   14440:	b510      	push	{r4, lr}
   14442:	f001 fe1d 	bl	16080 <__gedf2>
   14446:	2800      	cmp	r0, #0
   14448:	dc01      	bgt.n	1444e <__aeabi_dcmpgt+0xe>
   1444a:	2000      	movs	r0, #0
   1444c:	bd10      	pop	{r4, pc}
   1444e:	2001      	movs	r0, #1
   14450:	bd10      	pop	{r4, pc}
   14452:	46c0      	nop			; (mov r8, r8)

00014454 <__aeabi_dcmpge>:
   14454:	b510      	push	{r4, lr}
   14456:	f001 fe13 	bl	16080 <__gedf2>
   1445a:	2800      	cmp	r0, #0
   1445c:	da01      	bge.n	14462 <__aeabi_dcmpge+0xe>
   1445e:	2000      	movs	r0, #0
   14460:	bd10      	pop	{r4, pc}
   14462:	2001      	movs	r0, #1
   14464:	bd10      	pop	{r4, pc}
   14466:	46c0      	nop			; (mov r8, r8)

00014468 <__aeabi_cfrcmple>:
   14468:	4684      	mov	ip, r0
   1446a:	1c08      	adds	r0, r1, #0
   1446c:	4661      	mov	r1, ip
   1446e:	e7ff      	b.n	14470 <__aeabi_cfcmpeq>

00014470 <__aeabi_cfcmpeq>:
   14470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14472:	f000 fbd3 	bl	14c1c <__lesf2>
   14476:	2800      	cmp	r0, #0
   14478:	d401      	bmi.n	1447e <__aeabi_cfcmpeq+0xe>
   1447a:	2100      	movs	r1, #0
   1447c:	42c8      	cmn	r0, r1
   1447e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014480 <__aeabi_fcmpeq>:
   14480:	b510      	push	{r4, lr}
   14482:	f000 fb65 	bl	14b50 <__eqsf2>
   14486:	4240      	negs	r0, r0
   14488:	3001      	adds	r0, #1
   1448a:	bd10      	pop	{r4, pc}

0001448c <__aeabi_fcmplt>:
   1448c:	b510      	push	{r4, lr}
   1448e:	f000 fbc5 	bl	14c1c <__lesf2>
   14492:	2800      	cmp	r0, #0
   14494:	db01      	blt.n	1449a <__aeabi_fcmplt+0xe>
   14496:	2000      	movs	r0, #0
   14498:	bd10      	pop	{r4, pc}
   1449a:	2001      	movs	r0, #1
   1449c:	bd10      	pop	{r4, pc}
   1449e:	46c0      	nop			; (mov r8, r8)

000144a0 <__aeabi_fcmple>:
   144a0:	b510      	push	{r4, lr}
   144a2:	f000 fbbb 	bl	14c1c <__lesf2>
   144a6:	2800      	cmp	r0, #0
   144a8:	dd01      	ble.n	144ae <__aeabi_fcmple+0xe>
   144aa:	2000      	movs	r0, #0
   144ac:	bd10      	pop	{r4, pc}
   144ae:	2001      	movs	r0, #1
   144b0:	bd10      	pop	{r4, pc}
   144b2:	46c0      	nop			; (mov r8, r8)

000144b4 <__aeabi_fcmpgt>:
   144b4:	b510      	push	{r4, lr}
   144b6:	f000 fb71 	bl	14b9c <__gesf2>
   144ba:	2800      	cmp	r0, #0
   144bc:	dc01      	bgt.n	144c2 <__aeabi_fcmpgt+0xe>
   144be:	2000      	movs	r0, #0
   144c0:	bd10      	pop	{r4, pc}
   144c2:	2001      	movs	r0, #1
   144c4:	bd10      	pop	{r4, pc}
   144c6:	46c0      	nop			; (mov r8, r8)

000144c8 <__aeabi_fcmpge>:
   144c8:	b510      	push	{r4, lr}
   144ca:	f000 fb67 	bl	14b9c <__gesf2>
   144ce:	2800      	cmp	r0, #0
   144d0:	da01      	bge.n	144d6 <__aeabi_fcmpge+0xe>
   144d2:	2000      	movs	r0, #0
   144d4:	bd10      	pop	{r4, pc}
   144d6:	2001      	movs	r0, #1
   144d8:	bd10      	pop	{r4, pc}
   144da:	46c0      	nop			; (mov r8, r8)

000144dc <__aeabi_lmul>:
   144dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   144de:	46ce      	mov	lr, r9
   144e0:	4647      	mov	r7, r8
   144e2:	0415      	lsls	r5, r2, #16
   144e4:	0c2d      	lsrs	r5, r5, #16
   144e6:	002e      	movs	r6, r5
   144e8:	b580      	push	{r7, lr}
   144ea:	0407      	lsls	r7, r0, #16
   144ec:	0c14      	lsrs	r4, r2, #16
   144ee:	0c3f      	lsrs	r7, r7, #16
   144f0:	4699      	mov	r9, r3
   144f2:	0c03      	lsrs	r3, r0, #16
   144f4:	437e      	muls	r6, r7
   144f6:	435d      	muls	r5, r3
   144f8:	4367      	muls	r7, r4
   144fa:	4363      	muls	r3, r4
   144fc:	197f      	adds	r7, r7, r5
   144fe:	0c34      	lsrs	r4, r6, #16
   14500:	19e4      	adds	r4, r4, r7
   14502:	469c      	mov	ip, r3
   14504:	42a5      	cmp	r5, r4
   14506:	d903      	bls.n	14510 <__aeabi_lmul+0x34>
   14508:	2380      	movs	r3, #128	; 0x80
   1450a:	025b      	lsls	r3, r3, #9
   1450c:	4698      	mov	r8, r3
   1450e:	44c4      	add	ip, r8
   14510:	464b      	mov	r3, r9
   14512:	4351      	muls	r1, r2
   14514:	4343      	muls	r3, r0
   14516:	0436      	lsls	r6, r6, #16
   14518:	0c36      	lsrs	r6, r6, #16
   1451a:	0c25      	lsrs	r5, r4, #16
   1451c:	0424      	lsls	r4, r4, #16
   1451e:	4465      	add	r5, ip
   14520:	19a4      	adds	r4, r4, r6
   14522:	1859      	adds	r1, r3, r1
   14524:	1949      	adds	r1, r1, r5
   14526:	0020      	movs	r0, r4
   14528:	bc0c      	pop	{r2, r3}
   1452a:	4690      	mov	r8, r2
   1452c:	4699      	mov	r9, r3
   1452e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014530 <__aeabi_f2uiz>:
   14530:	219e      	movs	r1, #158	; 0x9e
   14532:	b510      	push	{r4, lr}
   14534:	05c9      	lsls	r1, r1, #23
   14536:	1c04      	adds	r4, r0, #0
   14538:	f7ff ffc6 	bl	144c8 <__aeabi_fcmpge>
   1453c:	2800      	cmp	r0, #0
   1453e:	d103      	bne.n	14548 <__aeabi_f2uiz+0x18>
   14540:	1c20      	adds	r0, r4, #0
   14542:	f000 fe69 	bl	15218 <__aeabi_f2iz>
   14546:	bd10      	pop	{r4, pc}
   14548:	219e      	movs	r1, #158	; 0x9e
   1454a:	1c20      	adds	r0, r4, #0
   1454c:	05c9      	lsls	r1, r1, #23
   1454e:	f000 fcc7 	bl	14ee0 <__aeabi_fsub>
   14552:	f000 fe61 	bl	15218 <__aeabi_f2iz>
   14556:	2380      	movs	r3, #128	; 0x80
   14558:	061b      	lsls	r3, r3, #24
   1455a:	469c      	mov	ip, r3
   1455c:	4460      	add	r0, ip
   1455e:	e7f2      	b.n	14546 <__aeabi_f2uiz+0x16>

00014560 <__aeabi_d2uiz>:
   14560:	b570      	push	{r4, r5, r6, lr}
   14562:	2200      	movs	r2, #0
   14564:	4b0c      	ldr	r3, [pc, #48]	; (14598 <__aeabi_d2uiz+0x38>)
   14566:	0004      	movs	r4, r0
   14568:	000d      	movs	r5, r1
   1456a:	f7ff ff73 	bl	14454 <__aeabi_dcmpge>
   1456e:	2800      	cmp	r0, #0
   14570:	d104      	bne.n	1457c <__aeabi_d2uiz+0x1c>
   14572:	0020      	movs	r0, r4
   14574:	0029      	movs	r1, r5
   14576:	f002 fbdf 	bl	16d38 <__aeabi_d2iz>
   1457a:	bd70      	pop	{r4, r5, r6, pc}
   1457c:	4b06      	ldr	r3, [pc, #24]	; (14598 <__aeabi_d2uiz+0x38>)
   1457e:	2200      	movs	r2, #0
   14580:	0020      	movs	r0, r4
   14582:	0029      	movs	r1, r5
   14584:	f002 f8c2 	bl	1670c <__aeabi_dsub>
   14588:	f002 fbd6 	bl	16d38 <__aeabi_d2iz>
   1458c:	2380      	movs	r3, #128	; 0x80
   1458e:	061b      	lsls	r3, r3, #24
   14590:	469c      	mov	ip, r3
   14592:	4460      	add	r0, ip
   14594:	e7f1      	b.n	1457a <__aeabi_d2uiz+0x1a>
   14596:	46c0      	nop			; (mov r8, r8)
   14598:	41e00000 	.word	0x41e00000

0001459c <__aeabi_fadd>:
   1459c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1459e:	46c6      	mov	lr, r8
   145a0:	024e      	lsls	r6, r1, #9
   145a2:	0247      	lsls	r7, r0, #9
   145a4:	0a76      	lsrs	r6, r6, #9
   145a6:	0a7b      	lsrs	r3, r7, #9
   145a8:	0044      	lsls	r4, r0, #1
   145aa:	0fc5      	lsrs	r5, r0, #31
   145ac:	00f7      	lsls	r7, r6, #3
   145ae:	0048      	lsls	r0, r1, #1
   145b0:	4698      	mov	r8, r3
   145b2:	b500      	push	{lr}
   145b4:	0e24      	lsrs	r4, r4, #24
   145b6:	002a      	movs	r2, r5
   145b8:	00db      	lsls	r3, r3, #3
   145ba:	0e00      	lsrs	r0, r0, #24
   145bc:	0fc9      	lsrs	r1, r1, #31
   145be:	46bc      	mov	ip, r7
   145c0:	428d      	cmp	r5, r1
   145c2:	d067      	beq.n	14694 <__aeabi_fadd+0xf8>
   145c4:	1a22      	subs	r2, r4, r0
   145c6:	2a00      	cmp	r2, #0
   145c8:	dc00      	bgt.n	145cc <__aeabi_fadd+0x30>
   145ca:	e0a5      	b.n	14718 <__aeabi_fadd+0x17c>
   145cc:	2800      	cmp	r0, #0
   145ce:	d13a      	bne.n	14646 <__aeabi_fadd+0xaa>
   145d0:	2f00      	cmp	r7, #0
   145d2:	d100      	bne.n	145d6 <__aeabi_fadd+0x3a>
   145d4:	e093      	b.n	146fe <__aeabi_fadd+0x162>
   145d6:	1e51      	subs	r1, r2, #1
   145d8:	2900      	cmp	r1, #0
   145da:	d000      	beq.n	145de <__aeabi_fadd+0x42>
   145dc:	e0bc      	b.n	14758 <__aeabi_fadd+0x1bc>
   145de:	2401      	movs	r4, #1
   145e0:	1bdb      	subs	r3, r3, r7
   145e2:	015a      	lsls	r2, r3, #5
   145e4:	d546      	bpl.n	14674 <__aeabi_fadd+0xd8>
   145e6:	019b      	lsls	r3, r3, #6
   145e8:	099e      	lsrs	r6, r3, #6
   145ea:	0030      	movs	r0, r6
   145ec:	f002 fd2e 	bl	1704c <__clzsi2>
   145f0:	3805      	subs	r0, #5
   145f2:	4086      	lsls	r6, r0
   145f4:	4284      	cmp	r4, r0
   145f6:	dd00      	ble.n	145fa <__aeabi_fadd+0x5e>
   145f8:	e09d      	b.n	14736 <__aeabi_fadd+0x19a>
   145fa:	1b04      	subs	r4, r0, r4
   145fc:	0032      	movs	r2, r6
   145fe:	2020      	movs	r0, #32
   14600:	3401      	adds	r4, #1
   14602:	40e2      	lsrs	r2, r4
   14604:	1b04      	subs	r4, r0, r4
   14606:	40a6      	lsls	r6, r4
   14608:	0033      	movs	r3, r6
   1460a:	1e5e      	subs	r6, r3, #1
   1460c:	41b3      	sbcs	r3, r6
   1460e:	2400      	movs	r4, #0
   14610:	4313      	orrs	r3, r2
   14612:	075a      	lsls	r2, r3, #29
   14614:	d004      	beq.n	14620 <__aeabi_fadd+0x84>
   14616:	220f      	movs	r2, #15
   14618:	401a      	ands	r2, r3
   1461a:	2a04      	cmp	r2, #4
   1461c:	d000      	beq.n	14620 <__aeabi_fadd+0x84>
   1461e:	3304      	adds	r3, #4
   14620:	015a      	lsls	r2, r3, #5
   14622:	d529      	bpl.n	14678 <__aeabi_fadd+0xdc>
   14624:	3401      	adds	r4, #1
   14626:	2cff      	cmp	r4, #255	; 0xff
   14628:	d100      	bne.n	1462c <__aeabi_fadd+0x90>
   1462a:	e081      	b.n	14730 <__aeabi_fadd+0x194>
   1462c:	002a      	movs	r2, r5
   1462e:	019b      	lsls	r3, r3, #6
   14630:	0a5b      	lsrs	r3, r3, #9
   14632:	b2e4      	uxtb	r4, r4
   14634:	025b      	lsls	r3, r3, #9
   14636:	05e4      	lsls	r4, r4, #23
   14638:	0a58      	lsrs	r0, r3, #9
   1463a:	07d2      	lsls	r2, r2, #31
   1463c:	4320      	orrs	r0, r4
   1463e:	4310      	orrs	r0, r2
   14640:	bc04      	pop	{r2}
   14642:	4690      	mov	r8, r2
   14644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14646:	2cff      	cmp	r4, #255	; 0xff
   14648:	d0e3      	beq.n	14612 <__aeabi_fadd+0x76>
   1464a:	2180      	movs	r1, #128	; 0x80
   1464c:	0038      	movs	r0, r7
   1464e:	04c9      	lsls	r1, r1, #19
   14650:	4308      	orrs	r0, r1
   14652:	4684      	mov	ip, r0
   14654:	2a1b      	cmp	r2, #27
   14656:	dd00      	ble.n	1465a <__aeabi_fadd+0xbe>
   14658:	e082      	b.n	14760 <__aeabi_fadd+0x1c4>
   1465a:	2020      	movs	r0, #32
   1465c:	4661      	mov	r1, ip
   1465e:	40d1      	lsrs	r1, r2
   14660:	1a82      	subs	r2, r0, r2
   14662:	4660      	mov	r0, ip
   14664:	4090      	lsls	r0, r2
   14666:	0002      	movs	r2, r0
   14668:	1e50      	subs	r0, r2, #1
   1466a:	4182      	sbcs	r2, r0
   1466c:	430a      	orrs	r2, r1
   1466e:	1a9b      	subs	r3, r3, r2
   14670:	015a      	lsls	r2, r3, #5
   14672:	d4b8      	bmi.n	145e6 <__aeabi_fadd+0x4a>
   14674:	075a      	lsls	r2, r3, #29
   14676:	d1ce      	bne.n	14616 <__aeabi_fadd+0x7a>
   14678:	08de      	lsrs	r6, r3, #3
   1467a:	002a      	movs	r2, r5
   1467c:	2cff      	cmp	r4, #255	; 0xff
   1467e:	d13a      	bne.n	146f6 <__aeabi_fadd+0x15a>
   14680:	2e00      	cmp	r6, #0
   14682:	d100      	bne.n	14686 <__aeabi_fadd+0xea>
   14684:	e0ae      	b.n	147e4 <__aeabi_fadd+0x248>
   14686:	2380      	movs	r3, #128	; 0x80
   14688:	03db      	lsls	r3, r3, #15
   1468a:	4333      	orrs	r3, r6
   1468c:	025b      	lsls	r3, r3, #9
   1468e:	0a5b      	lsrs	r3, r3, #9
   14690:	24ff      	movs	r4, #255	; 0xff
   14692:	e7cf      	b.n	14634 <__aeabi_fadd+0x98>
   14694:	1a21      	subs	r1, r4, r0
   14696:	2900      	cmp	r1, #0
   14698:	dd52      	ble.n	14740 <__aeabi_fadd+0x1a4>
   1469a:	2800      	cmp	r0, #0
   1469c:	d031      	beq.n	14702 <__aeabi_fadd+0x166>
   1469e:	2cff      	cmp	r4, #255	; 0xff
   146a0:	d0b7      	beq.n	14612 <__aeabi_fadd+0x76>
   146a2:	2080      	movs	r0, #128	; 0x80
   146a4:	003e      	movs	r6, r7
   146a6:	04c0      	lsls	r0, r0, #19
   146a8:	4306      	orrs	r6, r0
   146aa:	46b4      	mov	ip, r6
   146ac:	291b      	cmp	r1, #27
   146ae:	dd00      	ble.n	146b2 <__aeabi_fadd+0x116>
   146b0:	e0aa      	b.n	14808 <__aeabi_fadd+0x26c>
   146b2:	2620      	movs	r6, #32
   146b4:	4660      	mov	r0, ip
   146b6:	40c8      	lsrs	r0, r1
   146b8:	1a71      	subs	r1, r6, r1
   146ba:	4666      	mov	r6, ip
   146bc:	408e      	lsls	r6, r1
   146be:	0031      	movs	r1, r6
   146c0:	1e4e      	subs	r6, r1, #1
   146c2:	41b1      	sbcs	r1, r6
   146c4:	4301      	orrs	r1, r0
   146c6:	185b      	adds	r3, r3, r1
   146c8:	0159      	lsls	r1, r3, #5
   146ca:	d5d3      	bpl.n	14674 <__aeabi_fadd+0xd8>
   146cc:	3401      	adds	r4, #1
   146ce:	2cff      	cmp	r4, #255	; 0xff
   146d0:	d100      	bne.n	146d4 <__aeabi_fadd+0x138>
   146d2:	e087      	b.n	147e4 <__aeabi_fadd+0x248>
   146d4:	2201      	movs	r2, #1
   146d6:	4978      	ldr	r1, [pc, #480]	; (148b8 <__aeabi_fadd+0x31c>)
   146d8:	401a      	ands	r2, r3
   146da:	085b      	lsrs	r3, r3, #1
   146dc:	400b      	ands	r3, r1
   146de:	4313      	orrs	r3, r2
   146e0:	e797      	b.n	14612 <__aeabi_fadd+0x76>
   146e2:	2c00      	cmp	r4, #0
   146e4:	d000      	beq.n	146e8 <__aeabi_fadd+0x14c>
   146e6:	e0a7      	b.n	14838 <__aeabi_fadd+0x29c>
   146e8:	2b00      	cmp	r3, #0
   146ea:	d000      	beq.n	146ee <__aeabi_fadd+0x152>
   146ec:	e0b6      	b.n	1485c <__aeabi_fadd+0x2c0>
   146ee:	1e3b      	subs	r3, r7, #0
   146f0:	d162      	bne.n	147b8 <__aeabi_fadd+0x21c>
   146f2:	2600      	movs	r6, #0
   146f4:	2200      	movs	r2, #0
   146f6:	0273      	lsls	r3, r6, #9
   146f8:	0a5b      	lsrs	r3, r3, #9
   146fa:	b2e4      	uxtb	r4, r4
   146fc:	e79a      	b.n	14634 <__aeabi_fadd+0x98>
   146fe:	0014      	movs	r4, r2
   14700:	e787      	b.n	14612 <__aeabi_fadd+0x76>
   14702:	2f00      	cmp	r7, #0
   14704:	d04d      	beq.n	147a2 <__aeabi_fadd+0x206>
   14706:	1e48      	subs	r0, r1, #1
   14708:	2800      	cmp	r0, #0
   1470a:	d157      	bne.n	147bc <__aeabi_fadd+0x220>
   1470c:	4463      	add	r3, ip
   1470e:	2401      	movs	r4, #1
   14710:	015a      	lsls	r2, r3, #5
   14712:	d5af      	bpl.n	14674 <__aeabi_fadd+0xd8>
   14714:	2402      	movs	r4, #2
   14716:	e7dd      	b.n	146d4 <__aeabi_fadd+0x138>
   14718:	2a00      	cmp	r2, #0
   1471a:	d124      	bne.n	14766 <__aeabi_fadd+0x1ca>
   1471c:	1c62      	adds	r2, r4, #1
   1471e:	b2d2      	uxtb	r2, r2
   14720:	2a01      	cmp	r2, #1
   14722:	ddde      	ble.n	146e2 <__aeabi_fadd+0x146>
   14724:	1bde      	subs	r6, r3, r7
   14726:	0172      	lsls	r2, r6, #5
   14728:	d535      	bpl.n	14796 <__aeabi_fadd+0x1fa>
   1472a:	1afe      	subs	r6, r7, r3
   1472c:	000d      	movs	r5, r1
   1472e:	e75c      	b.n	145ea <__aeabi_fadd+0x4e>
   14730:	002a      	movs	r2, r5
   14732:	2300      	movs	r3, #0
   14734:	e77e      	b.n	14634 <__aeabi_fadd+0x98>
   14736:	0033      	movs	r3, r6
   14738:	4a60      	ldr	r2, [pc, #384]	; (148bc <__aeabi_fadd+0x320>)
   1473a:	1a24      	subs	r4, r4, r0
   1473c:	4013      	ands	r3, r2
   1473e:	e768      	b.n	14612 <__aeabi_fadd+0x76>
   14740:	2900      	cmp	r1, #0
   14742:	d163      	bne.n	1480c <__aeabi_fadd+0x270>
   14744:	1c61      	adds	r1, r4, #1
   14746:	b2c8      	uxtb	r0, r1
   14748:	2801      	cmp	r0, #1
   1474a:	dd4e      	ble.n	147ea <__aeabi_fadd+0x24e>
   1474c:	29ff      	cmp	r1, #255	; 0xff
   1474e:	d049      	beq.n	147e4 <__aeabi_fadd+0x248>
   14750:	4463      	add	r3, ip
   14752:	085b      	lsrs	r3, r3, #1
   14754:	000c      	movs	r4, r1
   14756:	e75c      	b.n	14612 <__aeabi_fadd+0x76>
   14758:	2aff      	cmp	r2, #255	; 0xff
   1475a:	d041      	beq.n	147e0 <__aeabi_fadd+0x244>
   1475c:	000a      	movs	r2, r1
   1475e:	e779      	b.n	14654 <__aeabi_fadd+0xb8>
   14760:	2201      	movs	r2, #1
   14762:	1a9b      	subs	r3, r3, r2
   14764:	e784      	b.n	14670 <__aeabi_fadd+0xd4>
   14766:	2c00      	cmp	r4, #0
   14768:	d01d      	beq.n	147a6 <__aeabi_fadd+0x20a>
   1476a:	28ff      	cmp	r0, #255	; 0xff
   1476c:	d022      	beq.n	147b4 <__aeabi_fadd+0x218>
   1476e:	2480      	movs	r4, #128	; 0x80
   14770:	04e4      	lsls	r4, r4, #19
   14772:	4252      	negs	r2, r2
   14774:	4323      	orrs	r3, r4
   14776:	2a1b      	cmp	r2, #27
   14778:	dd00      	ble.n	1477c <__aeabi_fadd+0x1e0>
   1477a:	e08a      	b.n	14892 <__aeabi_fadd+0x2f6>
   1477c:	001c      	movs	r4, r3
   1477e:	2520      	movs	r5, #32
   14780:	40d4      	lsrs	r4, r2
   14782:	1aaa      	subs	r2, r5, r2
   14784:	4093      	lsls	r3, r2
   14786:	1e5a      	subs	r2, r3, #1
   14788:	4193      	sbcs	r3, r2
   1478a:	4323      	orrs	r3, r4
   1478c:	4662      	mov	r2, ip
   1478e:	0004      	movs	r4, r0
   14790:	1ad3      	subs	r3, r2, r3
   14792:	000d      	movs	r5, r1
   14794:	e725      	b.n	145e2 <__aeabi_fadd+0x46>
   14796:	2e00      	cmp	r6, #0
   14798:	d000      	beq.n	1479c <__aeabi_fadd+0x200>
   1479a:	e726      	b.n	145ea <__aeabi_fadd+0x4e>
   1479c:	2200      	movs	r2, #0
   1479e:	2400      	movs	r4, #0
   147a0:	e7a9      	b.n	146f6 <__aeabi_fadd+0x15a>
   147a2:	000c      	movs	r4, r1
   147a4:	e735      	b.n	14612 <__aeabi_fadd+0x76>
   147a6:	2b00      	cmp	r3, #0
   147a8:	d04d      	beq.n	14846 <__aeabi_fadd+0x2aa>
   147aa:	43d2      	mvns	r2, r2
   147ac:	2a00      	cmp	r2, #0
   147ae:	d0ed      	beq.n	1478c <__aeabi_fadd+0x1f0>
   147b0:	28ff      	cmp	r0, #255	; 0xff
   147b2:	d1e0      	bne.n	14776 <__aeabi_fadd+0x1da>
   147b4:	4663      	mov	r3, ip
   147b6:	24ff      	movs	r4, #255	; 0xff
   147b8:	000d      	movs	r5, r1
   147ba:	e72a      	b.n	14612 <__aeabi_fadd+0x76>
   147bc:	29ff      	cmp	r1, #255	; 0xff
   147be:	d00f      	beq.n	147e0 <__aeabi_fadd+0x244>
   147c0:	0001      	movs	r1, r0
   147c2:	e773      	b.n	146ac <__aeabi_fadd+0x110>
   147c4:	2b00      	cmp	r3, #0
   147c6:	d061      	beq.n	1488c <__aeabi_fadd+0x2f0>
   147c8:	24ff      	movs	r4, #255	; 0xff
   147ca:	2f00      	cmp	r7, #0
   147cc:	d100      	bne.n	147d0 <__aeabi_fadd+0x234>
   147ce:	e720      	b.n	14612 <__aeabi_fadd+0x76>
   147d0:	2280      	movs	r2, #128	; 0x80
   147d2:	4641      	mov	r1, r8
   147d4:	03d2      	lsls	r2, r2, #15
   147d6:	4211      	tst	r1, r2
   147d8:	d002      	beq.n	147e0 <__aeabi_fadd+0x244>
   147da:	4216      	tst	r6, r2
   147dc:	d100      	bne.n	147e0 <__aeabi_fadd+0x244>
   147de:	003b      	movs	r3, r7
   147e0:	24ff      	movs	r4, #255	; 0xff
   147e2:	e716      	b.n	14612 <__aeabi_fadd+0x76>
   147e4:	24ff      	movs	r4, #255	; 0xff
   147e6:	2300      	movs	r3, #0
   147e8:	e724      	b.n	14634 <__aeabi_fadd+0x98>
   147ea:	2c00      	cmp	r4, #0
   147ec:	d1ea      	bne.n	147c4 <__aeabi_fadd+0x228>
   147ee:	2b00      	cmp	r3, #0
   147f0:	d058      	beq.n	148a4 <__aeabi_fadd+0x308>
   147f2:	2f00      	cmp	r7, #0
   147f4:	d100      	bne.n	147f8 <__aeabi_fadd+0x25c>
   147f6:	e70c      	b.n	14612 <__aeabi_fadd+0x76>
   147f8:	4463      	add	r3, ip
   147fa:	015a      	lsls	r2, r3, #5
   147fc:	d400      	bmi.n	14800 <__aeabi_fadd+0x264>
   147fe:	e739      	b.n	14674 <__aeabi_fadd+0xd8>
   14800:	4a2e      	ldr	r2, [pc, #184]	; (148bc <__aeabi_fadd+0x320>)
   14802:	000c      	movs	r4, r1
   14804:	4013      	ands	r3, r2
   14806:	e704      	b.n	14612 <__aeabi_fadd+0x76>
   14808:	2101      	movs	r1, #1
   1480a:	e75c      	b.n	146c6 <__aeabi_fadd+0x12a>
   1480c:	2c00      	cmp	r4, #0
   1480e:	d11e      	bne.n	1484e <__aeabi_fadd+0x2b2>
   14810:	2b00      	cmp	r3, #0
   14812:	d040      	beq.n	14896 <__aeabi_fadd+0x2fa>
   14814:	43c9      	mvns	r1, r1
   14816:	2900      	cmp	r1, #0
   14818:	d00b      	beq.n	14832 <__aeabi_fadd+0x296>
   1481a:	28ff      	cmp	r0, #255	; 0xff
   1481c:	d036      	beq.n	1488c <__aeabi_fadd+0x2f0>
   1481e:	291b      	cmp	r1, #27
   14820:	dc47      	bgt.n	148b2 <__aeabi_fadd+0x316>
   14822:	001c      	movs	r4, r3
   14824:	2620      	movs	r6, #32
   14826:	40cc      	lsrs	r4, r1
   14828:	1a71      	subs	r1, r6, r1
   1482a:	408b      	lsls	r3, r1
   1482c:	1e59      	subs	r1, r3, #1
   1482e:	418b      	sbcs	r3, r1
   14830:	4323      	orrs	r3, r4
   14832:	4463      	add	r3, ip
   14834:	0004      	movs	r4, r0
   14836:	e747      	b.n	146c8 <__aeabi_fadd+0x12c>
   14838:	2b00      	cmp	r3, #0
   1483a:	d118      	bne.n	1486e <__aeabi_fadd+0x2d2>
   1483c:	1e3b      	subs	r3, r7, #0
   1483e:	d02d      	beq.n	1489c <__aeabi_fadd+0x300>
   14840:	000d      	movs	r5, r1
   14842:	24ff      	movs	r4, #255	; 0xff
   14844:	e6e5      	b.n	14612 <__aeabi_fadd+0x76>
   14846:	003b      	movs	r3, r7
   14848:	0004      	movs	r4, r0
   1484a:	000d      	movs	r5, r1
   1484c:	e6e1      	b.n	14612 <__aeabi_fadd+0x76>
   1484e:	28ff      	cmp	r0, #255	; 0xff
   14850:	d01c      	beq.n	1488c <__aeabi_fadd+0x2f0>
   14852:	2480      	movs	r4, #128	; 0x80
   14854:	04e4      	lsls	r4, r4, #19
   14856:	4249      	negs	r1, r1
   14858:	4323      	orrs	r3, r4
   1485a:	e7e0      	b.n	1481e <__aeabi_fadd+0x282>
   1485c:	2f00      	cmp	r7, #0
   1485e:	d100      	bne.n	14862 <__aeabi_fadd+0x2c6>
   14860:	e6d7      	b.n	14612 <__aeabi_fadd+0x76>
   14862:	1bde      	subs	r6, r3, r7
   14864:	0172      	lsls	r2, r6, #5
   14866:	d51f      	bpl.n	148a8 <__aeabi_fadd+0x30c>
   14868:	1afb      	subs	r3, r7, r3
   1486a:	000d      	movs	r5, r1
   1486c:	e6d1      	b.n	14612 <__aeabi_fadd+0x76>
   1486e:	24ff      	movs	r4, #255	; 0xff
   14870:	2f00      	cmp	r7, #0
   14872:	d100      	bne.n	14876 <__aeabi_fadd+0x2da>
   14874:	e6cd      	b.n	14612 <__aeabi_fadd+0x76>
   14876:	2280      	movs	r2, #128	; 0x80
   14878:	4640      	mov	r0, r8
   1487a:	03d2      	lsls	r2, r2, #15
   1487c:	4210      	tst	r0, r2
   1487e:	d0af      	beq.n	147e0 <__aeabi_fadd+0x244>
   14880:	4216      	tst	r6, r2
   14882:	d1ad      	bne.n	147e0 <__aeabi_fadd+0x244>
   14884:	003b      	movs	r3, r7
   14886:	000d      	movs	r5, r1
   14888:	24ff      	movs	r4, #255	; 0xff
   1488a:	e6c2      	b.n	14612 <__aeabi_fadd+0x76>
   1488c:	4663      	mov	r3, ip
   1488e:	24ff      	movs	r4, #255	; 0xff
   14890:	e6bf      	b.n	14612 <__aeabi_fadd+0x76>
   14892:	2301      	movs	r3, #1
   14894:	e77a      	b.n	1478c <__aeabi_fadd+0x1f0>
   14896:	003b      	movs	r3, r7
   14898:	0004      	movs	r4, r0
   1489a:	e6ba      	b.n	14612 <__aeabi_fadd+0x76>
   1489c:	2680      	movs	r6, #128	; 0x80
   1489e:	2200      	movs	r2, #0
   148a0:	03f6      	lsls	r6, r6, #15
   148a2:	e6f0      	b.n	14686 <__aeabi_fadd+0xea>
   148a4:	003b      	movs	r3, r7
   148a6:	e6b4      	b.n	14612 <__aeabi_fadd+0x76>
   148a8:	1e33      	subs	r3, r6, #0
   148aa:	d000      	beq.n	148ae <__aeabi_fadd+0x312>
   148ac:	e6e2      	b.n	14674 <__aeabi_fadd+0xd8>
   148ae:	2200      	movs	r2, #0
   148b0:	e721      	b.n	146f6 <__aeabi_fadd+0x15a>
   148b2:	2301      	movs	r3, #1
   148b4:	e7bd      	b.n	14832 <__aeabi_fadd+0x296>
   148b6:	46c0      	nop			; (mov r8, r8)
   148b8:	7dffffff 	.word	0x7dffffff
   148bc:	fbffffff 	.word	0xfbffffff

000148c0 <__aeabi_fdiv>:
   148c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   148c2:	4657      	mov	r7, sl
   148c4:	464e      	mov	r6, r9
   148c6:	46de      	mov	lr, fp
   148c8:	4645      	mov	r5, r8
   148ca:	b5e0      	push	{r5, r6, r7, lr}
   148cc:	0244      	lsls	r4, r0, #9
   148ce:	0043      	lsls	r3, r0, #1
   148d0:	0fc6      	lsrs	r6, r0, #31
   148d2:	b083      	sub	sp, #12
   148d4:	1c0f      	adds	r7, r1, #0
   148d6:	0a64      	lsrs	r4, r4, #9
   148d8:	0e1b      	lsrs	r3, r3, #24
   148da:	46b2      	mov	sl, r6
   148dc:	d053      	beq.n	14986 <__aeabi_fdiv+0xc6>
   148de:	2bff      	cmp	r3, #255	; 0xff
   148e0:	d027      	beq.n	14932 <__aeabi_fdiv+0x72>
   148e2:	2280      	movs	r2, #128	; 0x80
   148e4:	00e4      	lsls	r4, r4, #3
   148e6:	04d2      	lsls	r2, r2, #19
   148e8:	4314      	orrs	r4, r2
   148ea:	227f      	movs	r2, #127	; 0x7f
   148ec:	4252      	negs	r2, r2
   148ee:	4690      	mov	r8, r2
   148f0:	4498      	add	r8, r3
   148f2:	2300      	movs	r3, #0
   148f4:	4699      	mov	r9, r3
   148f6:	469b      	mov	fp, r3
   148f8:	027d      	lsls	r5, r7, #9
   148fa:	0078      	lsls	r0, r7, #1
   148fc:	0ffb      	lsrs	r3, r7, #31
   148fe:	0a6d      	lsrs	r5, r5, #9
   14900:	0e00      	lsrs	r0, r0, #24
   14902:	9300      	str	r3, [sp, #0]
   14904:	d024      	beq.n	14950 <__aeabi_fdiv+0x90>
   14906:	28ff      	cmp	r0, #255	; 0xff
   14908:	d046      	beq.n	14998 <__aeabi_fdiv+0xd8>
   1490a:	2380      	movs	r3, #128	; 0x80
   1490c:	2100      	movs	r1, #0
   1490e:	00ed      	lsls	r5, r5, #3
   14910:	04db      	lsls	r3, r3, #19
   14912:	431d      	orrs	r5, r3
   14914:	387f      	subs	r0, #127	; 0x7f
   14916:	4647      	mov	r7, r8
   14918:	1a38      	subs	r0, r7, r0
   1491a:	464f      	mov	r7, r9
   1491c:	430f      	orrs	r7, r1
   1491e:	00bf      	lsls	r7, r7, #2
   14920:	46b9      	mov	r9, r7
   14922:	0033      	movs	r3, r6
   14924:	9a00      	ldr	r2, [sp, #0]
   14926:	4f87      	ldr	r7, [pc, #540]	; (14b44 <__aeabi_fdiv+0x284>)
   14928:	4053      	eors	r3, r2
   1492a:	464a      	mov	r2, r9
   1492c:	58ba      	ldr	r2, [r7, r2]
   1492e:	9301      	str	r3, [sp, #4]
   14930:	4697      	mov	pc, r2
   14932:	2c00      	cmp	r4, #0
   14934:	d14e      	bne.n	149d4 <__aeabi_fdiv+0x114>
   14936:	2308      	movs	r3, #8
   14938:	4699      	mov	r9, r3
   1493a:	33f7      	adds	r3, #247	; 0xf7
   1493c:	4698      	mov	r8, r3
   1493e:	3bfd      	subs	r3, #253	; 0xfd
   14940:	469b      	mov	fp, r3
   14942:	027d      	lsls	r5, r7, #9
   14944:	0078      	lsls	r0, r7, #1
   14946:	0ffb      	lsrs	r3, r7, #31
   14948:	0a6d      	lsrs	r5, r5, #9
   1494a:	0e00      	lsrs	r0, r0, #24
   1494c:	9300      	str	r3, [sp, #0]
   1494e:	d1da      	bne.n	14906 <__aeabi_fdiv+0x46>
   14950:	2d00      	cmp	r5, #0
   14952:	d126      	bne.n	149a2 <__aeabi_fdiv+0xe2>
   14954:	2000      	movs	r0, #0
   14956:	2101      	movs	r1, #1
   14958:	0033      	movs	r3, r6
   1495a:	9a00      	ldr	r2, [sp, #0]
   1495c:	4f7a      	ldr	r7, [pc, #488]	; (14b48 <__aeabi_fdiv+0x288>)
   1495e:	4053      	eors	r3, r2
   14960:	4642      	mov	r2, r8
   14962:	1a10      	subs	r0, r2, r0
   14964:	464a      	mov	r2, r9
   14966:	430a      	orrs	r2, r1
   14968:	0092      	lsls	r2, r2, #2
   1496a:	58ba      	ldr	r2, [r7, r2]
   1496c:	001d      	movs	r5, r3
   1496e:	4697      	mov	pc, r2
   14970:	9b00      	ldr	r3, [sp, #0]
   14972:	002c      	movs	r4, r5
   14974:	469a      	mov	sl, r3
   14976:	468b      	mov	fp, r1
   14978:	465b      	mov	r3, fp
   1497a:	2b02      	cmp	r3, #2
   1497c:	d131      	bne.n	149e2 <__aeabi_fdiv+0x122>
   1497e:	4653      	mov	r3, sl
   14980:	21ff      	movs	r1, #255	; 0xff
   14982:	2400      	movs	r4, #0
   14984:	e038      	b.n	149f8 <__aeabi_fdiv+0x138>
   14986:	2c00      	cmp	r4, #0
   14988:	d117      	bne.n	149ba <__aeabi_fdiv+0xfa>
   1498a:	2304      	movs	r3, #4
   1498c:	4699      	mov	r9, r3
   1498e:	2300      	movs	r3, #0
   14990:	4698      	mov	r8, r3
   14992:	3301      	adds	r3, #1
   14994:	469b      	mov	fp, r3
   14996:	e7af      	b.n	148f8 <__aeabi_fdiv+0x38>
   14998:	20ff      	movs	r0, #255	; 0xff
   1499a:	2d00      	cmp	r5, #0
   1499c:	d10b      	bne.n	149b6 <__aeabi_fdiv+0xf6>
   1499e:	2102      	movs	r1, #2
   149a0:	e7da      	b.n	14958 <__aeabi_fdiv+0x98>
   149a2:	0028      	movs	r0, r5
   149a4:	f002 fb52 	bl	1704c <__clzsi2>
   149a8:	1f43      	subs	r3, r0, #5
   149aa:	409d      	lsls	r5, r3
   149ac:	2376      	movs	r3, #118	; 0x76
   149ae:	425b      	negs	r3, r3
   149b0:	1a18      	subs	r0, r3, r0
   149b2:	2100      	movs	r1, #0
   149b4:	e7af      	b.n	14916 <__aeabi_fdiv+0x56>
   149b6:	2103      	movs	r1, #3
   149b8:	e7ad      	b.n	14916 <__aeabi_fdiv+0x56>
   149ba:	0020      	movs	r0, r4
   149bc:	f002 fb46 	bl	1704c <__clzsi2>
   149c0:	1f43      	subs	r3, r0, #5
   149c2:	409c      	lsls	r4, r3
   149c4:	2376      	movs	r3, #118	; 0x76
   149c6:	425b      	negs	r3, r3
   149c8:	1a1b      	subs	r3, r3, r0
   149ca:	4698      	mov	r8, r3
   149cc:	2300      	movs	r3, #0
   149ce:	4699      	mov	r9, r3
   149d0:	469b      	mov	fp, r3
   149d2:	e791      	b.n	148f8 <__aeabi_fdiv+0x38>
   149d4:	230c      	movs	r3, #12
   149d6:	4699      	mov	r9, r3
   149d8:	33f3      	adds	r3, #243	; 0xf3
   149da:	4698      	mov	r8, r3
   149dc:	3bfc      	subs	r3, #252	; 0xfc
   149de:	469b      	mov	fp, r3
   149e0:	e78a      	b.n	148f8 <__aeabi_fdiv+0x38>
   149e2:	2b03      	cmp	r3, #3
   149e4:	d100      	bne.n	149e8 <__aeabi_fdiv+0x128>
   149e6:	e0a5      	b.n	14b34 <__aeabi_fdiv+0x274>
   149e8:	4655      	mov	r5, sl
   149ea:	2b01      	cmp	r3, #1
   149ec:	d000      	beq.n	149f0 <__aeabi_fdiv+0x130>
   149ee:	e081      	b.n	14af4 <__aeabi_fdiv+0x234>
   149f0:	2301      	movs	r3, #1
   149f2:	2100      	movs	r1, #0
   149f4:	2400      	movs	r4, #0
   149f6:	402b      	ands	r3, r5
   149f8:	0264      	lsls	r4, r4, #9
   149fa:	05c9      	lsls	r1, r1, #23
   149fc:	0a60      	lsrs	r0, r4, #9
   149fe:	07db      	lsls	r3, r3, #31
   14a00:	4308      	orrs	r0, r1
   14a02:	4318      	orrs	r0, r3
   14a04:	b003      	add	sp, #12
   14a06:	bc3c      	pop	{r2, r3, r4, r5}
   14a08:	4690      	mov	r8, r2
   14a0a:	4699      	mov	r9, r3
   14a0c:	46a2      	mov	sl, r4
   14a0e:	46ab      	mov	fp, r5
   14a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a12:	2480      	movs	r4, #128	; 0x80
   14a14:	2300      	movs	r3, #0
   14a16:	03e4      	lsls	r4, r4, #15
   14a18:	21ff      	movs	r1, #255	; 0xff
   14a1a:	e7ed      	b.n	149f8 <__aeabi_fdiv+0x138>
   14a1c:	21ff      	movs	r1, #255	; 0xff
   14a1e:	2400      	movs	r4, #0
   14a20:	e7ea      	b.n	149f8 <__aeabi_fdiv+0x138>
   14a22:	2301      	movs	r3, #1
   14a24:	1a59      	subs	r1, r3, r1
   14a26:	291b      	cmp	r1, #27
   14a28:	dd66      	ble.n	14af8 <__aeabi_fdiv+0x238>
   14a2a:	9a01      	ldr	r2, [sp, #4]
   14a2c:	4013      	ands	r3, r2
   14a2e:	2100      	movs	r1, #0
   14a30:	2400      	movs	r4, #0
   14a32:	e7e1      	b.n	149f8 <__aeabi_fdiv+0x138>
   14a34:	2380      	movs	r3, #128	; 0x80
   14a36:	03db      	lsls	r3, r3, #15
   14a38:	421c      	tst	r4, r3
   14a3a:	d038      	beq.n	14aae <__aeabi_fdiv+0x1ee>
   14a3c:	421d      	tst	r5, r3
   14a3e:	d051      	beq.n	14ae4 <__aeabi_fdiv+0x224>
   14a40:	431c      	orrs	r4, r3
   14a42:	0264      	lsls	r4, r4, #9
   14a44:	0a64      	lsrs	r4, r4, #9
   14a46:	0033      	movs	r3, r6
   14a48:	21ff      	movs	r1, #255	; 0xff
   14a4a:	e7d5      	b.n	149f8 <__aeabi_fdiv+0x138>
   14a4c:	0163      	lsls	r3, r4, #5
   14a4e:	016c      	lsls	r4, r5, #5
   14a50:	42a3      	cmp	r3, r4
   14a52:	d23b      	bcs.n	14acc <__aeabi_fdiv+0x20c>
   14a54:	261b      	movs	r6, #27
   14a56:	2100      	movs	r1, #0
   14a58:	3801      	subs	r0, #1
   14a5a:	2501      	movs	r5, #1
   14a5c:	001f      	movs	r7, r3
   14a5e:	0049      	lsls	r1, r1, #1
   14a60:	005b      	lsls	r3, r3, #1
   14a62:	2f00      	cmp	r7, #0
   14a64:	db01      	blt.n	14a6a <__aeabi_fdiv+0x1aa>
   14a66:	429c      	cmp	r4, r3
   14a68:	d801      	bhi.n	14a6e <__aeabi_fdiv+0x1ae>
   14a6a:	1b1b      	subs	r3, r3, r4
   14a6c:	4329      	orrs	r1, r5
   14a6e:	3e01      	subs	r6, #1
   14a70:	2e00      	cmp	r6, #0
   14a72:	d1f3      	bne.n	14a5c <__aeabi_fdiv+0x19c>
   14a74:	001c      	movs	r4, r3
   14a76:	1e63      	subs	r3, r4, #1
   14a78:	419c      	sbcs	r4, r3
   14a7a:	430c      	orrs	r4, r1
   14a7c:	0001      	movs	r1, r0
   14a7e:	317f      	adds	r1, #127	; 0x7f
   14a80:	2900      	cmp	r1, #0
   14a82:	ddce      	ble.n	14a22 <__aeabi_fdiv+0x162>
   14a84:	0763      	lsls	r3, r4, #29
   14a86:	d004      	beq.n	14a92 <__aeabi_fdiv+0x1d2>
   14a88:	230f      	movs	r3, #15
   14a8a:	4023      	ands	r3, r4
   14a8c:	2b04      	cmp	r3, #4
   14a8e:	d000      	beq.n	14a92 <__aeabi_fdiv+0x1d2>
   14a90:	3404      	adds	r4, #4
   14a92:	0123      	lsls	r3, r4, #4
   14a94:	d503      	bpl.n	14a9e <__aeabi_fdiv+0x1de>
   14a96:	0001      	movs	r1, r0
   14a98:	4b2c      	ldr	r3, [pc, #176]	; (14b4c <__aeabi_fdiv+0x28c>)
   14a9a:	3180      	adds	r1, #128	; 0x80
   14a9c:	401c      	ands	r4, r3
   14a9e:	29fe      	cmp	r1, #254	; 0xfe
   14aa0:	dd0d      	ble.n	14abe <__aeabi_fdiv+0x1fe>
   14aa2:	2301      	movs	r3, #1
   14aa4:	9a01      	ldr	r2, [sp, #4]
   14aa6:	21ff      	movs	r1, #255	; 0xff
   14aa8:	4013      	ands	r3, r2
   14aaa:	2400      	movs	r4, #0
   14aac:	e7a4      	b.n	149f8 <__aeabi_fdiv+0x138>
   14aae:	2380      	movs	r3, #128	; 0x80
   14ab0:	03db      	lsls	r3, r3, #15
   14ab2:	431c      	orrs	r4, r3
   14ab4:	0264      	lsls	r4, r4, #9
   14ab6:	0a64      	lsrs	r4, r4, #9
   14ab8:	0033      	movs	r3, r6
   14aba:	21ff      	movs	r1, #255	; 0xff
   14abc:	e79c      	b.n	149f8 <__aeabi_fdiv+0x138>
   14abe:	2301      	movs	r3, #1
   14ac0:	9a01      	ldr	r2, [sp, #4]
   14ac2:	01a4      	lsls	r4, r4, #6
   14ac4:	0a64      	lsrs	r4, r4, #9
   14ac6:	b2c9      	uxtb	r1, r1
   14ac8:	4013      	ands	r3, r2
   14aca:	e795      	b.n	149f8 <__aeabi_fdiv+0x138>
   14acc:	1b1b      	subs	r3, r3, r4
   14ace:	261a      	movs	r6, #26
   14ad0:	2101      	movs	r1, #1
   14ad2:	e7c2      	b.n	14a5a <__aeabi_fdiv+0x19a>
   14ad4:	9b00      	ldr	r3, [sp, #0]
   14ad6:	468b      	mov	fp, r1
   14ad8:	469a      	mov	sl, r3
   14ada:	2400      	movs	r4, #0
   14adc:	e74c      	b.n	14978 <__aeabi_fdiv+0xb8>
   14ade:	0263      	lsls	r3, r4, #9
   14ae0:	d5e5      	bpl.n	14aae <__aeabi_fdiv+0x1ee>
   14ae2:	2500      	movs	r5, #0
   14ae4:	2480      	movs	r4, #128	; 0x80
   14ae6:	03e4      	lsls	r4, r4, #15
   14ae8:	432c      	orrs	r4, r5
   14aea:	0264      	lsls	r4, r4, #9
   14aec:	0a64      	lsrs	r4, r4, #9
   14aee:	9b00      	ldr	r3, [sp, #0]
   14af0:	21ff      	movs	r1, #255	; 0xff
   14af2:	e781      	b.n	149f8 <__aeabi_fdiv+0x138>
   14af4:	9501      	str	r5, [sp, #4]
   14af6:	e7c1      	b.n	14a7c <__aeabi_fdiv+0x1bc>
   14af8:	0023      	movs	r3, r4
   14afa:	2020      	movs	r0, #32
   14afc:	40cb      	lsrs	r3, r1
   14afe:	1a41      	subs	r1, r0, r1
   14b00:	408c      	lsls	r4, r1
   14b02:	1e61      	subs	r1, r4, #1
   14b04:	418c      	sbcs	r4, r1
   14b06:	431c      	orrs	r4, r3
   14b08:	0763      	lsls	r3, r4, #29
   14b0a:	d004      	beq.n	14b16 <__aeabi_fdiv+0x256>
   14b0c:	230f      	movs	r3, #15
   14b0e:	4023      	ands	r3, r4
   14b10:	2b04      	cmp	r3, #4
   14b12:	d000      	beq.n	14b16 <__aeabi_fdiv+0x256>
   14b14:	3404      	adds	r4, #4
   14b16:	0163      	lsls	r3, r4, #5
   14b18:	d505      	bpl.n	14b26 <__aeabi_fdiv+0x266>
   14b1a:	2301      	movs	r3, #1
   14b1c:	9a01      	ldr	r2, [sp, #4]
   14b1e:	2101      	movs	r1, #1
   14b20:	4013      	ands	r3, r2
   14b22:	2400      	movs	r4, #0
   14b24:	e768      	b.n	149f8 <__aeabi_fdiv+0x138>
   14b26:	2301      	movs	r3, #1
   14b28:	9a01      	ldr	r2, [sp, #4]
   14b2a:	01a4      	lsls	r4, r4, #6
   14b2c:	0a64      	lsrs	r4, r4, #9
   14b2e:	4013      	ands	r3, r2
   14b30:	2100      	movs	r1, #0
   14b32:	e761      	b.n	149f8 <__aeabi_fdiv+0x138>
   14b34:	2380      	movs	r3, #128	; 0x80
   14b36:	03db      	lsls	r3, r3, #15
   14b38:	431c      	orrs	r4, r3
   14b3a:	0264      	lsls	r4, r4, #9
   14b3c:	0a64      	lsrs	r4, r4, #9
   14b3e:	4653      	mov	r3, sl
   14b40:	21ff      	movs	r1, #255	; 0xff
   14b42:	e759      	b.n	149f8 <__aeabi_fdiv+0x138>
   14b44:	000178d8 	.word	0x000178d8
   14b48:	00017918 	.word	0x00017918
   14b4c:	f7ffffff 	.word	0xf7ffffff

00014b50 <__eqsf2>:
   14b50:	b570      	push	{r4, r5, r6, lr}
   14b52:	0042      	lsls	r2, r0, #1
   14b54:	0245      	lsls	r5, r0, #9
   14b56:	024e      	lsls	r6, r1, #9
   14b58:	004c      	lsls	r4, r1, #1
   14b5a:	0fc3      	lsrs	r3, r0, #31
   14b5c:	0a6d      	lsrs	r5, r5, #9
   14b5e:	0e12      	lsrs	r2, r2, #24
   14b60:	0a76      	lsrs	r6, r6, #9
   14b62:	0e24      	lsrs	r4, r4, #24
   14b64:	0fc9      	lsrs	r1, r1, #31
   14b66:	2001      	movs	r0, #1
   14b68:	2aff      	cmp	r2, #255	; 0xff
   14b6a:	d006      	beq.n	14b7a <__eqsf2+0x2a>
   14b6c:	2cff      	cmp	r4, #255	; 0xff
   14b6e:	d003      	beq.n	14b78 <__eqsf2+0x28>
   14b70:	42a2      	cmp	r2, r4
   14b72:	d101      	bne.n	14b78 <__eqsf2+0x28>
   14b74:	42b5      	cmp	r5, r6
   14b76:	d006      	beq.n	14b86 <__eqsf2+0x36>
   14b78:	bd70      	pop	{r4, r5, r6, pc}
   14b7a:	2d00      	cmp	r5, #0
   14b7c:	d1fc      	bne.n	14b78 <__eqsf2+0x28>
   14b7e:	2cff      	cmp	r4, #255	; 0xff
   14b80:	d1fa      	bne.n	14b78 <__eqsf2+0x28>
   14b82:	2e00      	cmp	r6, #0
   14b84:	d1f8      	bne.n	14b78 <__eqsf2+0x28>
   14b86:	428b      	cmp	r3, r1
   14b88:	d006      	beq.n	14b98 <__eqsf2+0x48>
   14b8a:	2001      	movs	r0, #1
   14b8c:	2a00      	cmp	r2, #0
   14b8e:	d1f3      	bne.n	14b78 <__eqsf2+0x28>
   14b90:	0028      	movs	r0, r5
   14b92:	1e45      	subs	r5, r0, #1
   14b94:	41a8      	sbcs	r0, r5
   14b96:	e7ef      	b.n	14b78 <__eqsf2+0x28>
   14b98:	2000      	movs	r0, #0
   14b9a:	e7ed      	b.n	14b78 <__eqsf2+0x28>

00014b9c <__gesf2>:
   14b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b9e:	0042      	lsls	r2, r0, #1
   14ba0:	0245      	lsls	r5, r0, #9
   14ba2:	024c      	lsls	r4, r1, #9
   14ba4:	0fc3      	lsrs	r3, r0, #31
   14ba6:	0048      	lsls	r0, r1, #1
   14ba8:	0a6d      	lsrs	r5, r5, #9
   14baa:	0e12      	lsrs	r2, r2, #24
   14bac:	0a64      	lsrs	r4, r4, #9
   14bae:	0e00      	lsrs	r0, r0, #24
   14bb0:	0fc9      	lsrs	r1, r1, #31
   14bb2:	2aff      	cmp	r2, #255	; 0xff
   14bb4:	d01e      	beq.n	14bf4 <__gesf2+0x58>
   14bb6:	28ff      	cmp	r0, #255	; 0xff
   14bb8:	d021      	beq.n	14bfe <__gesf2+0x62>
   14bba:	2a00      	cmp	r2, #0
   14bbc:	d10a      	bne.n	14bd4 <__gesf2+0x38>
   14bbe:	426e      	negs	r6, r5
   14bc0:	416e      	adcs	r6, r5
   14bc2:	b2f6      	uxtb	r6, r6
   14bc4:	2800      	cmp	r0, #0
   14bc6:	d10f      	bne.n	14be8 <__gesf2+0x4c>
   14bc8:	2c00      	cmp	r4, #0
   14bca:	d10d      	bne.n	14be8 <__gesf2+0x4c>
   14bcc:	2000      	movs	r0, #0
   14bce:	2d00      	cmp	r5, #0
   14bd0:	d009      	beq.n	14be6 <__gesf2+0x4a>
   14bd2:	e005      	b.n	14be0 <__gesf2+0x44>
   14bd4:	2800      	cmp	r0, #0
   14bd6:	d101      	bne.n	14bdc <__gesf2+0x40>
   14bd8:	2c00      	cmp	r4, #0
   14bda:	d001      	beq.n	14be0 <__gesf2+0x44>
   14bdc:	428b      	cmp	r3, r1
   14bde:	d011      	beq.n	14c04 <__gesf2+0x68>
   14be0:	2101      	movs	r1, #1
   14be2:	4258      	negs	r0, r3
   14be4:	4308      	orrs	r0, r1
   14be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14be8:	2e00      	cmp	r6, #0
   14bea:	d0f7      	beq.n	14bdc <__gesf2+0x40>
   14bec:	2001      	movs	r0, #1
   14bee:	3901      	subs	r1, #1
   14bf0:	4308      	orrs	r0, r1
   14bf2:	e7f8      	b.n	14be6 <__gesf2+0x4a>
   14bf4:	2d00      	cmp	r5, #0
   14bf6:	d0de      	beq.n	14bb6 <__gesf2+0x1a>
   14bf8:	2002      	movs	r0, #2
   14bfa:	4240      	negs	r0, r0
   14bfc:	e7f3      	b.n	14be6 <__gesf2+0x4a>
   14bfe:	2c00      	cmp	r4, #0
   14c00:	d0db      	beq.n	14bba <__gesf2+0x1e>
   14c02:	e7f9      	b.n	14bf8 <__gesf2+0x5c>
   14c04:	4282      	cmp	r2, r0
   14c06:	dceb      	bgt.n	14be0 <__gesf2+0x44>
   14c08:	db04      	blt.n	14c14 <__gesf2+0x78>
   14c0a:	42a5      	cmp	r5, r4
   14c0c:	d8e8      	bhi.n	14be0 <__gesf2+0x44>
   14c0e:	2000      	movs	r0, #0
   14c10:	42a5      	cmp	r5, r4
   14c12:	d2e8      	bcs.n	14be6 <__gesf2+0x4a>
   14c14:	2101      	movs	r1, #1
   14c16:	1e58      	subs	r0, r3, #1
   14c18:	4308      	orrs	r0, r1
   14c1a:	e7e4      	b.n	14be6 <__gesf2+0x4a>

00014c1c <__lesf2>:
   14c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c1e:	0042      	lsls	r2, r0, #1
   14c20:	024d      	lsls	r5, r1, #9
   14c22:	004c      	lsls	r4, r1, #1
   14c24:	0246      	lsls	r6, r0, #9
   14c26:	0a76      	lsrs	r6, r6, #9
   14c28:	0e12      	lsrs	r2, r2, #24
   14c2a:	0fc3      	lsrs	r3, r0, #31
   14c2c:	0a6d      	lsrs	r5, r5, #9
   14c2e:	0e24      	lsrs	r4, r4, #24
   14c30:	0fc9      	lsrs	r1, r1, #31
   14c32:	2aff      	cmp	r2, #255	; 0xff
   14c34:	d016      	beq.n	14c64 <__lesf2+0x48>
   14c36:	2cff      	cmp	r4, #255	; 0xff
   14c38:	d018      	beq.n	14c6c <__lesf2+0x50>
   14c3a:	2a00      	cmp	r2, #0
   14c3c:	d10a      	bne.n	14c54 <__lesf2+0x38>
   14c3e:	4270      	negs	r0, r6
   14c40:	4170      	adcs	r0, r6
   14c42:	b2c0      	uxtb	r0, r0
   14c44:	2c00      	cmp	r4, #0
   14c46:	d015      	beq.n	14c74 <__lesf2+0x58>
   14c48:	2800      	cmp	r0, #0
   14c4a:	d005      	beq.n	14c58 <__lesf2+0x3c>
   14c4c:	2001      	movs	r0, #1
   14c4e:	3901      	subs	r1, #1
   14c50:	4308      	orrs	r0, r1
   14c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c54:	2c00      	cmp	r4, #0
   14c56:	d013      	beq.n	14c80 <__lesf2+0x64>
   14c58:	4299      	cmp	r1, r3
   14c5a:	d014      	beq.n	14c86 <__lesf2+0x6a>
   14c5c:	2001      	movs	r0, #1
   14c5e:	425b      	negs	r3, r3
   14c60:	4318      	orrs	r0, r3
   14c62:	e7f6      	b.n	14c52 <__lesf2+0x36>
   14c64:	2002      	movs	r0, #2
   14c66:	2e00      	cmp	r6, #0
   14c68:	d1f3      	bne.n	14c52 <__lesf2+0x36>
   14c6a:	e7e4      	b.n	14c36 <__lesf2+0x1a>
   14c6c:	2002      	movs	r0, #2
   14c6e:	2d00      	cmp	r5, #0
   14c70:	d1ef      	bne.n	14c52 <__lesf2+0x36>
   14c72:	e7e2      	b.n	14c3a <__lesf2+0x1e>
   14c74:	2d00      	cmp	r5, #0
   14c76:	d1e7      	bne.n	14c48 <__lesf2+0x2c>
   14c78:	2000      	movs	r0, #0
   14c7a:	2e00      	cmp	r6, #0
   14c7c:	d0e9      	beq.n	14c52 <__lesf2+0x36>
   14c7e:	e7ed      	b.n	14c5c <__lesf2+0x40>
   14c80:	2d00      	cmp	r5, #0
   14c82:	d1e9      	bne.n	14c58 <__lesf2+0x3c>
   14c84:	e7ea      	b.n	14c5c <__lesf2+0x40>
   14c86:	42a2      	cmp	r2, r4
   14c88:	dc06      	bgt.n	14c98 <__lesf2+0x7c>
   14c8a:	dbdf      	blt.n	14c4c <__lesf2+0x30>
   14c8c:	42ae      	cmp	r6, r5
   14c8e:	d803      	bhi.n	14c98 <__lesf2+0x7c>
   14c90:	2000      	movs	r0, #0
   14c92:	42ae      	cmp	r6, r5
   14c94:	d3da      	bcc.n	14c4c <__lesf2+0x30>
   14c96:	e7dc      	b.n	14c52 <__lesf2+0x36>
   14c98:	2001      	movs	r0, #1
   14c9a:	4249      	negs	r1, r1
   14c9c:	4308      	orrs	r0, r1
   14c9e:	e7d8      	b.n	14c52 <__lesf2+0x36>

00014ca0 <__aeabi_fmul>:
   14ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ca2:	4657      	mov	r7, sl
   14ca4:	464e      	mov	r6, r9
   14ca6:	4645      	mov	r5, r8
   14ca8:	46de      	mov	lr, fp
   14caa:	b5e0      	push	{r5, r6, r7, lr}
   14cac:	0247      	lsls	r7, r0, #9
   14cae:	0046      	lsls	r6, r0, #1
   14cb0:	4688      	mov	r8, r1
   14cb2:	0a7f      	lsrs	r7, r7, #9
   14cb4:	0e36      	lsrs	r6, r6, #24
   14cb6:	0fc4      	lsrs	r4, r0, #31
   14cb8:	2e00      	cmp	r6, #0
   14cba:	d047      	beq.n	14d4c <__aeabi_fmul+0xac>
   14cbc:	2eff      	cmp	r6, #255	; 0xff
   14cbe:	d024      	beq.n	14d0a <__aeabi_fmul+0x6a>
   14cc0:	00fb      	lsls	r3, r7, #3
   14cc2:	2780      	movs	r7, #128	; 0x80
   14cc4:	04ff      	lsls	r7, r7, #19
   14cc6:	431f      	orrs	r7, r3
   14cc8:	2300      	movs	r3, #0
   14cca:	4699      	mov	r9, r3
   14ccc:	469a      	mov	sl, r3
   14cce:	3e7f      	subs	r6, #127	; 0x7f
   14cd0:	4643      	mov	r3, r8
   14cd2:	025d      	lsls	r5, r3, #9
   14cd4:	0058      	lsls	r0, r3, #1
   14cd6:	0fdb      	lsrs	r3, r3, #31
   14cd8:	0a6d      	lsrs	r5, r5, #9
   14cda:	0e00      	lsrs	r0, r0, #24
   14cdc:	4698      	mov	r8, r3
   14cde:	d043      	beq.n	14d68 <__aeabi_fmul+0xc8>
   14ce0:	28ff      	cmp	r0, #255	; 0xff
   14ce2:	d03b      	beq.n	14d5c <__aeabi_fmul+0xbc>
   14ce4:	00eb      	lsls	r3, r5, #3
   14ce6:	2580      	movs	r5, #128	; 0x80
   14ce8:	2200      	movs	r2, #0
   14cea:	04ed      	lsls	r5, r5, #19
   14cec:	431d      	orrs	r5, r3
   14cee:	387f      	subs	r0, #127	; 0x7f
   14cf0:	1836      	adds	r6, r6, r0
   14cf2:	1c73      	adds	r3, r6, #1
   14cf4:	4641      	mov	r1, r8
   14cf6:	469b      	mov	fp, r3
   14cf8:	464b      	mov	r3, r9
   14cfa:	4061      	eors	r1, r4
   14cfc:	4313      	orrs	r3, r2
   14cfe:	2b0f      	cmp	r3, #15
   14d00:	d864      	bhi.n	14dcc <__aeabi_fmul+0x12c>
   14d02:	4875      	ldr	r0, [pc, #468]	; (14ed8 <__aeabi_fmul+0x238>)
   14d04:	009b      	lsls	r3, r3, #2
   14d06:	58c3      	ldr	r3, [r0, r3]
   14d08:	469f      	mov	pc, r3
   14d0a:	2f00      	cmp	r7, #0
   14d0c:	d142      	bne.n	14d94 <__aeabi_fmul+0xf4>
   14d0e:	2308      	movs	r3, #8
   14d10:	4699      	mov	r9, r3
   14d12:	3b06      	subs	r3, #6
   14d14:	26ff      	movs	r6, #255	; 0xff
   14d16:	469a      	mov	sl, r3
   14d18:	e7da      	b.n	14cd0 <__aeabi_fmul+0x30>
   14d1a:	4641      	mov	r1, r8
   14d1c:	2a02      	cmp	r2, #2
   14d1e:	d028      	beq.n	14d72 <__aeabi_fmul+0xd2>
   14d20:	2a03      	cmp	r2, #3
   14d22:	d100      	bne.n	14d26 <__aeabi_fmul+0x86>
   14d24:	e0ce      	b.n	14ec4 <__aeabi_fmul+0x224>
   14d26:	2a01      	cmp	r2, #1
   14d28:	d000      	beq.n	14d2c <__aeabi_fmul+0x8c>
   14d2a:	e0ac      	b.n	14e86 <__aeabi_fmul+0x1e6>
   14d2c:	4011      	ands	r1, r2
   14d2e:	2000      	movs	r0, #0
   14d30:	2200      	movs	r2, #0
   14d32:	b2cc      	uxtb	r4, r1
   14d34:	0240      	lsls	r0, r0, #9
   14d36:	05d2      	lsls	r2, r2, #23
   14d38:	0a40      	lsrs	r0, r0, #9
   14d3a:	07e4      	lsls	r4, r4, #31
   14d3c:	4310      	orrs	r0, r2
   14d3e:	4320      	orrs	r0, r4
   14d40:	bc3c      	pop	{r2, r3, r4, r5}
   14d42:	4690      	mov	r8, r2
   14d44:	4699      	mov	r9, r3
   14d46:	46a2      	mov	sl, r4
   14d48:	46ab      	mov	fp, r5
   14d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d4c:	2f00      	cmp	r7, #0
   14d4e:	d115      	bne.n	14d7c <__aeabi_fmul+0xdc>
   14d50:	2304      	movs	r3, #4
   14d52:	4699      	mov	r9, r3
   14d54:	3b03      	subs	r3, #3
   14d56:	2600      	movs	r6, #0
   14d58:	469a      	mov	sl, r3
   14d5a:	e7b9      	b.n	14cd0 <__aeabi_fmul+0x30>
   14d5c:	20ff      	movs	r0, #255	; 0xff
   14d5e:	2202      	movs	r2, #2
   14d60:	2d00      	cmp	r5, #0
   14d62:	d0c5      	beq.n	14cf0 <__aeabi_fmul+0x50>
   14d64:	2203      	movs	r2, #3
   14d66:	e7c3      	b.n	14cf0 <__aeabi_fmul+0x50>
   14d68:	2d00      	cmp	r5, #0
   14d6a:	d119      	bne.n	14da0 <__aeabi_fmul+0x100>
   14d6c:	2000      	movs	r0, #0
   14d6e:	2201      	movs	r2, #1
   14d70:	e7be      	b.n	14cf0 <__aeabi_fmul+0x50>
   14d72:	2401      	movs	r4, #1
   14d74:	22ff      	movs	r2, #255	; 0xff
   14d76:	400c      	ands	r4, r1
   14d78:	2000      	movs	r0, #0
   14d7a:	e7db      	b.n	14d34 <__aeabi_fmul+0x94>
   14d7c:	0038      	movs	r0, r7
   14d7e:	f002 f965 	bl	1704c <__clzsi2>
   14d82:	2676      	movs	r6, #118	; 0x76
   14d84:	1f43      	subs	r3, r0, #5
   14d86:	409f      	lsls	r7, r3
   14d88:	2300      	movs	r3, #0
   14d8a:	4276      	negs	r6, r6
   14d8c:	1a36      	subs	r6, r6, r0
   14d8e:	4699      	mov	r9, r3
   14d90:	469a      	mov	sl, r3
   14d92:	e79d      	b.n	14cd0 <__aeabi_fmul+0x30>
   14d94:	230c      	movs	r3, #12
   14d96:	4699      	mov	r9, r3
   14d98:	3b09      	subs	r3, #9
   14d9a:	26ff      	movs	r6, #255	; 0xff
   14d9c:	469a      	mov	sl, r3
   14d9e:	e797      	b.n	14cd0 <__aeabi_fmul+0x30>
   14da0:	0028      	movs	r0, r5
   14da2:	f002 f953 	bl	1704c <__clzsi2>
   14da6:	1f43      	subs	r3, r0, #5
   14da8:	409d      	lsls	r5, r3
   14daa:	2376      	movs	r3, #118	; 0x76
   14dac:	425b      	negs	r3, r3
   14dae:	1a18      	subs	r0, r3, r0
   14db0:	2200      	movs	r2, #0
   14db2:	e79d      	b.n	14cf0 <__aeabi_fmul+0x50>
   14db4:	2080      	movs	r0, #128	; 0x80
   14db6:	2400      	movs	r4, #0
   14db8:	03c0      	lsls	r0, r0, #15
   14dba:	22ff      	movs	r2, #255	; 0xff
   14dbc:	e7ba      	b.n	14d34 <__aeabi_fmul+0x94>
   14dbe:	003d      	movs	r5, r7
   14dc0:	4652      	mov	r2, sl
   14dc2:	e7ab      	b.n	14d1c <__aeabi_fmul+0x7c>
   14dc4:	003d      	movs	r5, r7
   14dc6:	0021      	movs	r1, r4
   14dc8:	4652      	mov	r2, sl
   14dca:	e7a7      	b.n	14d1c <__aeabi_fmul+0x7c>
   14dcc:	0c3b      	lsrs	r3, r7, #16
   14dce:	469c      	mov	ip, r3
   14dd0:	042a      	lsls	r2, r5, #16
   14dd2:	0c12      	lsrs	r2, r2, #16
   14dd4:	0c2b      	lsrs	r3, r5, #16
   14dd6:	0014      	movs	r4, r2
   14dd8:	4660      	mov	r0, ip
   14dda:	4665      	mov	r5, ip
   14ddc:	043f      	lsls	r7, r7, #16
   14dde:	0c3f      	lsrs	r7, r7, #16
   14de0:	437c      	muls	r4, r7
   14de2:	4342      	muls	r2, r0
   14de4:	435d      	muls	r5, r3
   14de6:	437b      	muls	r3, r7
   14de8:	0c27      	lsrs	r7, r4, #16
   14dea:	189b      	adds	r3, r3, r2
   14dec:	18ff      	adds	r7, r7, r3
   14dee:	42ba      	cmp	r2, r7
   14df0:	d903      	bls.n	14dfa <__aeabi_fmul+0x15a>
   14df2:	2380      	movs	r3, #128	; 0x80
   14df4:	025b      	lsls	r3, r3, #9
   14df6:	469c      	mov	ip, r3
   14df8:	4465      	add	r5, ip
   14dfa:	0424      	lsls	r4, r4, #16
   14dfc:	043a      	lsls	r2, r7, #16
   14dfe:	0c24      	lsrs	r4, r4, #16
   14e00:	1912      	adds	r2, r2, r4
   14e02:	0193      	lsls	r3, r2, #6
   14e04:	1e5c      	subs	r4, r3, #1
   14e06:	41a3      	sbcs	r3, r4
   14e08:	0c3f      	lsrs	r7, r7, #16
   14e0a:	0e92      	lsrs	r2, r2, #26
   14e0c:	197d      	adds	r5, r7, r5
   14e0e:	431a      	orrs	r2, r3
   14e10:	01ad      	lsls	r5, r5, #6
   14e12:	4315      	orrs	r5, r2
   14e14:	012b      	lsls	r3, r5, #4
   14e16:	d504      	bpl.n	14e22 <__aeabi_fmul+0x182>
   14e18:	2301      	movs	r3, #1
   14e1a:	465e      	mov	r6, fp
   14e1c:	086a      	lsrs	r2, r5, #1
   14e1e:	401d      	ands	r5, r3
   14e20:	4315      	orrs	r5, r2
   14e22:	0032      	movs	r2, r6
   14e24:	327f      	adds	r2, #127	; 0x7f
   14e26:	2a00      	cmp	r2, #0
   14e28:	dd25      	ble.n	14e76 <__aeabi_fmul+0x1d6>
   14e2a:	076b      	lsls	r3, r5, #29
   14e2c:	d004      	beq.n	14e38 <__aeabi_fmul+0x198>
   14e2e:	230f      	movs	r3, #15
   14e30:	402b      	ands	r3, r5
   14e32:	2b04      	cmp	r3, #4
   14e34:	d000      	beq.n	14e38 <__aeabi_fmul+0x198>
   14e36:	3504      	adds	r5, #4
   14e38:	012b      	lsls	r3, r5, #4
   14e3a:	d503      	bpl.n	14e44 <__aeabi_fmul+0x1a4>
   14e3c:	0032      	movs	r2, r6
   14e3e:	4b27      	ldr	r3, [pc, #156]	; (14edc <__aeabi_fmul+0x23c>)
   14e40:	3280      	adds	r2, #128	; 0x80
   14e42:	401d      	ands	r5, r3
   14e44:	2afe      	cmp	r2, #254	; 0xfe
   14e46:	dc94      	bgt.n	14d72 <__aeabi_fmul+0xd2>
   14e48:	2401      	movs	r4, #1
   14e4a:	01a8      	lsls	r0, r5, #6
   14e4c:	0a40      	lsrs	r0, r0, #9
   14e4e:	b2d2      	uxtb	r2, r2
   14e50:	400c      	ands	r4, r1
   14e52:	e76f      	b.n	14d34 <__aeabi_fmul+0x94>
   14e54:	2080      	movs	r0, #128	; 0x80
   14e56:	03c0      	lsls	r0, r0, #15
   14e58:	4207      	tst	r7, r0
   14e5a:	d007      	beq.n	14e6c <__aeabi_fmul+0x1cc>
   14e5c:	4205      	tst	r5, r0
   14e5e:	d105      	bne.n	14e6c <__aeabi_fmul+0x1cc>
   14e60:	4328      	orrs	r0, r5
   14e62:	0240      	lsls	r0, r0, #9
   14e64:	0a40      	lsrs	r0, r0, #9
   14e66:	4644      	mov	r4, r8
   14e68:	22ff      	movs	r2, #255	; 0xff
   14e6a:	e763      	b.n	14d34 <__aeabi_fmul+0x94>
   14e6c:	4338      	orrs	r0, r7
   14e6e:	0240      	lsls	r0, r0, #9
   14e70:	0a40      	lsrs	r0, r0, #9
   14e72:	22ff      	movs	r2, #255	; 0xff
   14e74:	e75e      	b.n	14d34 <__aeabi_fmul+0x94>
   14e76:	2401      	movs	r4, #1
   14e78:	1aa3      	subs	r3, r4, r2
   14e7a:	2b1b      	cmp	r3, #27
   14e7c:	dd05      	ble.n	14e8a <__aeabi_fmul+0x1ea>
   14e7e:	400c      	ands	r4, r1
   14e80:	2200      	movs	r2, #0
   14e82:	2000      	movs	r0, #0
   14e84:	e756      	b.n	14d34 <__aeabi_fmul+0x94>
   14e86:	465e      	mov	r6, fp
   14e88:	e7cb      	b.n	14e22 <__aeabi_fmul+0x182>
   14e8a:	002a      	movs	r2, r5
   14e8c:	2020      	movs	r0, #32
   14e8e:	40da      	lsrs	r2, r3
   14e90:	1ac3      	subs	r3, r0, r3
   14e92:	409d      	lsls	r5, r3
   14e94:	002b      	movs	r3, r5
   14e96:	1e5d      	subs	r5, r3, #1
   14e98:	41ab      	sbcs	r3, r5
   14e9a:	4313      	orrs	r3, r2
   14e9c:	075a      	lsls	r2, r3, #29
   14e9e:	d004      	beq.n	14eaa <__aeabi_fmul+0x20a>
   14ea0:	220f      	movs	r2, #15
   14ea2:	401a      	ands	r2, r3
   14ea4:	2a04      	cmp	r2, #4
   14ea6:	d000      	beq.n	14eaa <__aeabi_fmul+0x20a>
   14ea8:	3304      	adds	r3, #4
   14eaa:	015a      	lsls	r2, r3, #5
   14eac:	d504      	bpl.n	14eb8 <__aeabi_fmul+0x218>
   14eae:	2401      	movs	r4, #1
   14eb0:	2201      	movs	r2, #1
   14eb2:	400c      	ands	r4, r1
   14eb4:	2000      	movs	r0, #0
   14eb6:	e73d      	b.n	14d34 <__aeabi_fmul+0x94>
   14eb8:	2401      	movs	r4, #1
   14eba:	019b      	lsls	r3, r3, #6
   14ebc:	0a58      	lsrs	r0, r3, #9
   14ebe:	400c      	ands	r4, r1
   14ec0:	2200      	movs	r2, #0
   14ec2:	e737      	b.n	14d34 <__aeabi_fmul+0x94>
   14ec4:	2080      	movs	r0, #128	; 0x80
   14ec6:	2401      	movs	r4, #1
   14ec8:	03c0      	lsls	r0, r0, #15
   14eca:	4328      	orrs	r0, r5
   14ecc:	0240      	lsls	r0, r0, #9
   14ece:	0a40      	lsrs	r0, r0, #9
   14ed0:	400c      	ands	r4, r1
   14ed2:	22ff      	movs	r2, #255	; 0xff
   14ed4:	e72e      	b.n	14d34 <__aeabi_fmul+0x94>
   14ed6:	46c0      	nop			; (mov r8, r8)
   14ed8:	00017958 	.word	0x00017958
   14edc:	f7ffffff 	.word	0xf7ffffff

00014ee0 <__aeabi_fsub>:
   14ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ee2:	464f      	mov	r7, r9
   14ee4:	46d6      	mov	lr, sl
   14ee6:	4646      	mov	r6, r8
   14ee8:	0044      	lsls	r4, r0, #1
   14eea:	b5c0      	push	{r6, r7, lr}
   14eec:	0fc2      	lsrs	r2, r0, #31
   14eee:	0247      	lsls	r7, r0, #9
   14ef0:	0248      	lsls	r0, r1, #9
   14ef2:	0a40      	lsrs	r0, r0, #9
   14ef4:	4684      	mov	ip, r0
   14ef6:	4666      	mov	r6, ip
   14ef8:	0a7b      	lsrs	r3, r7, #9
   14efa:	0048      	lsls	r0, r1, #1
   14efc:	0fc9      	lsrs	r1, r1, #31
   14efe:	469a      	mov	sl, r3
   14f00:	0e24      	lsrs	r4, r4, #24
   14f02:	0015      	movs	r5, r2
   14f04:	00db      	lsls	r3, r3, #3
   14f06:	0e00      	lsrs	r0, r0, #24
   14f08:	4689      	mov	r9, r1
   14f0a:	00f6      	lsls	r6, r6, #3
   14f0c:	28ff      	cmp	r0, #255	; 0xff
   14f0e:	d100      	bne.n	14f12 <__aeabi_fsub+0x32>
   14f10:	e08f      	b.n	15032 <__aeabi_fsub+0x152>
   14f12:	2101      	movs	r1, #1
   14f14:	464f      	mov	r7, r9
   14f16:	404f      	eors	r7, r1
   14f18:	0039      	movs	r1, r7
   14f1a:	4291      	cmp	r1, r2
   14f1c:	d066      	beq.n	14fec <__aeabi_fsub+0x10c>
   14f1e:	1a22      	subs	r2, r4, r0
   14f20:	2a00      	cmp	r2, #0
   14f22:	dc00      	bgt.n	14f26 <__aeabi_fsub+0x46>
   14f24:	e09d      	b.n	15062 <__aeabi_fsub+0x182>
   14f26:	2800      	cmp	r0, #0
   14f28:	d13d      	bne.n	14fa6 <__aeabi_fsub+0xc6>
   14f2a:	2e00      	cmp	r6, #0
   14f2c:	d100      	bne.n	14f30 <__aeabi_fsub+0x50>
   14f2e:	e08b      	b.n	15048 <__aeabi_fsub+0x168>
   14f30:	1e51      	subs	r1, r2, #1
   14f32:	2900      	cmp	r1, #0
   14f34:	d000      	beq.n	14f38 <__aeabi_fsub+0x58>
   14f36:	e0b5      	b.n	150a4 <__aeabi_fsub+0x1c4>
   14f38:	2401      	movs	r4, #1
   14f3a:	1b9b      	subs	r3, r3, r6
   14f3c:	015a      	lsls	r2, r3, #5
   14f3e:	d544      	bpl.n	14fca <__aeabi_fsub+0xea>
   14f40:	019b      	lsls	r3, r3, #6
   14f42:	099f      	lsrs	r7, r3, #6
   14f44:	0038      	movs	r0, r7
   14f46:	f002 f881 	bl	1704c <__clzsi2>
   14f4a:	3805      	subs	r0, #5
   14f4c:	4087      	lsls	r7, r0
   14f4e:	4284      	cmp	r4, r0
   14f50:	dd00      	ble.n	14f54 <__aeabi_fsub+0x74>
   14f52:	e096      	b.n	15082 <__aeabi_fsub+0x1a2>
   14f54:	1b04      	subs	r4, r0, r4
   14f56:	003a      	movs	r2, r7
   14f58:	2020      	movs	r0, #32
   14f5a:	3401      	adds	r4, #1
   14f5c:	40e2      	lsrs	r2, r4
   14f5e:	1b04      	subs	r4, r0, r4
   14f60:	40a7      	lsls	r7, r4
   14f62:	003b      	movs	r3, r7
   14f64:	1e5f      	subs	r7, r3, #1
   14f66:	41bb      	sbcs	r3, r7
   14f68:	2400      	movs	r4, #0
   14f6a:	4313      	orrs	r3, r2
   14f6c:	075a      	lsls	r2, r3, #29
   14f6e:	d004      	beq.n	14f7a <__aeabi_fsub+0x9a>
   14f70:	220f      	movs	r2, #15
   14f72:	401a      	ands	r2, r3
   14f74:	2a04      	cmp	r2, #4
   14f76:	d000      	beq.n	14f7a <__aeabi_fsub+0x9a>
   14f78:	3304      	adds	r3, #4
   14f7a:	015a      	lsls	r2, r3, #5
   14f7c:	d527      	bpl.n	14fce <__aeabi_fsub+0xee>
   14f7e:	3401      	adds	r4, #1
   14f80:	2cff      	cmp	r4, #255	; 0xff
   14f82:	d100      	bne.n	14f86 <__aeabi_fsub+0xa6>
   14f84:	e079      	b.n	1507a <__aeabi_fsub+0x19a>
   14f86:	2201      	movs	r2, #1
   14f88:	019b      	lsls	r3, r3, #6
   14f8a:	0a5b      	lsrs	r3, r3, #9
   14f8c:	b2e4      	uxtb	r4, r4
   14f8e:	402a      	ands	r2, r5
   14f90:	025b      	lsls	r3, r3, #9
   14f92:	05e4      	lsls	r4, r4, #23
   14f94:	0a58      	lsrs	r0, r3, #9
   14f96:	07d2      	lsls	r2, r2, #31
   14f98:	4320      	orrs	r0, r4
   14f9a:	4310      	orrs	r0, r2
   14f9c:	bc1c      	pop	{r2, r3, r4}
   14f9e:	4690      	mov	r8, r2
   14fa0:	4699      	mov	r9, r3
   14fa2:	46a2      	mov	sl, r4
   14fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fa6:	2cff      	cmp	r4, #255	; 0xff
   14fa8:	d0e0      	beq.n	14f6c <__aeabi_fsub+0x8c>
   14faa:	2180      	movs	r1, #128	; 0x80
   14fac:	04c9      	lsls	r1, r1, #19
   14fae:	430e      	orrs	r6, r1
   14fb0:	2a1b      	cmp	r2, #27
   14fb2:	dc7b      	bgt.n	150ac <__aeabi_fsub+0x1cc>
   14fb4:	0031      	movs	r1, r6
   14fb6:	2020      	movs	r0, #32
   14fb8:	40d1      	lsrs	r1, r2
   14fba:	1a82      	subs	r2, r0, r2
   14fbc:	4096      	lsls	r6, r2
   14fbe:	1e72      	subs	r2, r6, #1
   14fc0:	4196      	sbcs	r6, r2
   14fc2:	430e      	orrs	r6, r1
   14fc4:	1b9b      	subs	r3, r3, r6
   14fc6:	015a      	lsls	r2, r3, #5
   14fc8:	d4ba      	bmi.n	14f40 <__aeabi_fsub+0x60>
   14fca:	075a      	lsls	r2, r3, #29
   14fcc:	d1d0      	bne.n	14f70 <__aeabi_fsub+0x90>
   14fce:	2201      	movs	r2, #1
   14fd0:	08df      	lsrs	r7, r3, #3
   14fd2:	402a      	ands	r2, r5
   14fd4:	2cff      	cmp	r4, #255	; 0xff
   14fd6:	d133      	bne.n	15040 <__aeabi_fsub+0x160>
   14fd8:	2f00      	cmp	r7, #0
   14fda:	d100      	bne.n	14fde <__aeabi_fsub+0xfe>
   14fdc:	e0a8      	b.n	15130 <__aeabi_fsub+0x250>
   14fde:	2380      	movs	r3, #128	; 0x80
   14fe0:	03db      	lsls	r3, r3, #15
   14fe2:	433b      	orrs	r3, r7
   14fe4:	025b      	lsls	r3, r3, #9
   14fe6:	0a5b      	lsrs	r3, r3, #9
   14fe8:	24ff      	movs	r4, #255	; 0xff
   14fea:	e7d1      	b.n	14f90 <__aeabi_fsub+0xb0>
   14fec:	1a21      	subs	r1, r4, r0
   14fee:	2900      	cmp	r1, #0
   14ff0:	dd4c      	ble.n	1508c <__aeabi_fsub+0x1ac>
   14ff2:	2800      	cmp	r0, #0
   14ff4:	d02a      	beq.n	1504c <__aeabi_fsub+0x16c>
   14ff6:	2cff      	cmp	r4, #255	; 0xff
   14ff8:	d0b8      	beq.n	14f6c <__aeabi_fsub+0x8c>
   14ffa:	2080      	movs	r0, #128	; 0x80
   14ffc:	04c0      	lsls	r0, r0, #19
   14ffe:	4306      	orrs	r6, r0
   15000:	291b      	cmp	r1, #27
   15002:	dd00      	ble.n	15006 <__aeabi_fsub+0x126>
   15004:	e0af      	b.n	15166 <__aeabi_fsub+0x286>
   15006:	0030      	movs	r0, r6
   15008:	2720      	movs	r7, #32
   1500a:	40c8      	lsrs	r0, r1
   1500c:	1a79      	subs	r1, r7, r1
   1500e:	408e      	lsls	r6, r1
   15010:	1e71      	subs	r1, r6, #1
   15012:	418e      	sbcs	r6, r1
   15014:	4306      	orrs	r6, r0
   15016:	199b      	adds	r3, r3, r6
   15018:	0159      	lsls	r1, r3, #5
   1501a:	d5d6      	bpl.n	14fca <__aeabi_fsub+0xea>
   1501c:	3401      	adds	r4, #1
   1501e:	2cff      	cmp	r4, #255	; 0xff
   15020:	d100      	bne.n	15024 <__aeabi_fsub+0x144>
   15022:	e085      	b.n	15130 <__aeabi_fsub+0x250>
   15024:	2201      	movs	r2, #1
   15026:	497a      	ldr	r1, [pc, #488]	; (15210 <__aeabi_fsub+0x330>)
   15028:	401a      	ands	r2, r3
   1502a:	085b      	lsrs	r3, r3, #1
   1502c:	400b      	ands	r3, r1
   1502e:	4313      	orrs	r3, r2
   15030:	e79c      	b.n	14f6c <__aeabi_fsub+0x8c>
   15032:	2e00      	cmp	r6, #0
   15034:	d000      	beq.n	15038 <__aeabi_fsub+0x158>
   15036:	e770      	b.n	14f1a <__aeabi_fsub+0x3a>
   15038:	e76b      	b.n	14f12 <__aeabi_fsub+0x32>
   1503a:	1e3b      	subs	r3, r7, #0
   1503c:	d1c5      	bne.n	14fca <__aeabi_fsub+0xea>
   1503e:	2200      	movs	r2, #0
   15040:	027b      	lsls	r3, r7, #9
   15042:	0a5b      	lsrs	r3, r3, #9
   15044:	b2e4      	uxtb	r4, r4
   15046:	e7a3      	b.n	14f90 <__aeabi_fsub+0xb0>
   15048:	0014      	movs	r4, r2
   1504a:	e78f      	b.n	14f6c <__aeabi_fsub+0x8c>
   1504c:	2e00      	cmp	r6, #0
   1504e:	d04d      	beq.n	150ec <__aeabi_fsub+0x20c>
   15050:	1e48      	subs	r0, r1, #1
   15052:	2800      	cmp	r0, #0
   15054:	d157      	bne.n	15106 <__aeabi_fsub+0x226>
   15056:	199b      	adds	r3, r3, r6
   15058:	2401      	movs	r4, #1
   1505a:	015a      	lsls	r2, r3, #5
   1505c:	d5b5      	bpl.n	14fca <__aeabi_fsub+0xea>
   1505e:	2402      	movs	r4, #2
   15060:	e7e0      	b.n	15024 <__aeabi_fsub+0x144>
   15062:	2a00      	cmp	r2, #0
   15064:	d125      	bne.n	150b2 <__aeabi_fsub+0x1d2>
   15066:	1c62      	adds	r2, r4, #1
   15068:	b2d2      	uxtb	r2, r2
   1506a:	2a01      	cmp	r2, #1
   1506c:	dd72      	ble.n	15154 <__aeabi_fsub+0x274>
   1506e:	1b9f      	subs	r7, r3, r6
   15070:	017a      	lsls	r2, r7, #5
   15072:	d535      	bpl.n	150e0 <__aeabi_fsub+0x200>
   15074:	1af7      	subs	r7, r6, r3
   15076:	000d      	movs	r5, r1
   15078:	e764      	b.n	14f44 <__aeabi_fsub+0x64>
   1507a:	2201      	movs	r2, #1
   1507c:	2300      	movs	r3, #0
   1507e:	402a      	ands	r2, r5
   15080:	e786      	b.n	14f90 <__aeabi_fsub+0xb0>
   15082:	003b      	movs	r3, r7
   15084:	4a63      	ldr	r2, [pc, #396]	; (15214 <__aeabi_fsub+0x334>)
   15086:	1a24      	subs	r4, r4, r0
   15088:	4013      	ands	r3, r2
   1508a:	e76f      	b.n	14f6c <__aeabi_fsub+0x8c>
   1508c:	2900      	cmp	r1, #0
   1508e:	d16c      	bne.n	1516a <__aeabi_fsub+0x28a>
   15090:	1c61      	adds	r1, r4, #1
   15092:	b2c8      	uxtb	r0, r1
   15094:	2801      	cmp	r0, #1
   15096:	dd4e      	ble.n	15136 <__aeabi_fsub+0x256>
   15098:	29ff      	cmp	r1, #255	; 0xff
   1509a:	d049      	beq.n	15130 <__aeabi_fsub+0x250>
   1509c:	199b      	adds	r3, r3, r6
   1509e:	085b      	lsrs	r3, r3, #1
   150a0:	000c      	movs	r4, r1
   150a2:	e763      	b.n	14f6c <__aeabi_fsub+0x8c>
   150a4:	2aff      	cmp	r2, #255	; 0xff
   150a6:	d041      	beq.n	1512c <__aeabi_fsub+0x24c>
   150a8:	000a      	movs	r2, r1
   150aa:	e781      	b.n	14fb0 <__aeabi_fsub+0xd0>
   150ac:	2601      	movs	r6, #1
   150ae:	1b9b      	subs	r3, r3, r6
   150b0:	e789      	b.n	14fc6 <__aeabi_fsub+0xe6>
   150b2:	2c00      	cmp	r4, #0
   150b4:	d01c      	beq.n	150f0 <__aeabi_fsub+0x210>
   150b6:	28ff      	cmp	r0, #255	; 0xff
   150b8:	d021      	beq.n	150fe <__aeabi_fsub+0x21e>
   150ba:	2480      	movs	r4, #128	; 0x80
   150bc:	04e4      	lsls	r4, r4, #19
   150be:	4252      	negs	r2, r2
   150c0:	4323      	orrs	r3, r4
   150c2:	2a1b      	cmp	r2, #27
   150c4:	dd00      	ble.n	150c8 <__aeabi_fsub+0x1e8>
   150c6:	e096      	b.n	151f6 <__aeabi_fsub+0x316>
   150c8:	001c      	movs	r4, r3
   150ca:	2520      	movs	r5, #32
   150cc:	40d4      	lsrs	r4, r2
   150ce:	1aaa      	subs	r2, r5, r2
   150d0:	4093      	lsls	r3, r2
   150d2:	1e5a      	subs	r2, r3, #1
   150d4:	4193      	sbcs	r3, r2
   150d6:	4323      	orrs	r3, r4
   150d8:	1af3      	subs	r3, r6, r3
   150da:	0004      	movs	r4, r0
   150dc:	000d      	movs	r5, r1
   150de:	e72d      	b.n	14f3c <__aeabi_fsub+0x5c>
   150e0:	2f00      	cmp	r7, #0
   150e2:	d000      	beq.n	150e6 <__aeabi_fsub+0x206>
   150e4:	e72e      	b.n	14f44 <__aeabi_fsub+0x64>
   150e6:	2200      	movs	r2, #0
   150e8:	2400      	movs	r4, #0
   150ea:	e7a9      	b.n	15040 <__aeabi_fsub+0x160>
   150ec:	000c      	movs	r4, r1
   150ee:	e73d      	b.n	14f6c <__aeabi_fsub+0x8c>
   150f0:	2b00      	cmp	r3, #0
   150f2:	d058      	beq.n	151a6 <__aeabi_fsub+0x2c6>
   150f4:	43d2      	mvns	r2, r2
   150f6:	2a00      	cmp	r2, #0
   150f8:	d0ee      	beq.n	150d8 <__aeabi_fsub+0x1f8>
   150fa:	28ff      	cmp	r0, #255	; 0xff
   150fc:	d1e1      	bne.n	150c2 <__aeabi_fsub+0x1e2>
   150fe:	0033      	movs	r3, r6
   15100:	24ff      	movs	r4, #255	; 0xff
   15102:	000d      	movs	r5, r1
   15104:	e732      	b.n	14f6c <__aeabi_fsub+0x8c>
   15106:	29ff      	cmp	r1, #255	; 0xff
   15108:	d010      	beq.n	1512c <__aeabi_fsub+0x24c>
   1510a:	0001      	movs	r1, r0
   1510c:	e778      	b.n	15000 <__aeabi_fsub+0x120>
   1510e:	2b00      	cmp	r3, #0
   15110:	d06e      	beq.n	151f0 <__aeabi_fsub+0x310>
   15112:	24ff      	movs	r4, #255	; 0xff
   15114:	2e00      	cmp	r6, #0
   15116:	d100      	bne.n	1511a <__aeabi_fsub+0x23a>
   15118:	e728      	b.n	14f6c <__aeabi_fsub+0x8c>
   1511a:	2280      	movs	r2, #128	; 0x80
   1511c:	4651      	mov	r1, sl
   1511e:	03d2      	lsls	r2, r2, #15
   15120:	4211      	tst	r1, r2
   15122:	d003      	beq.n	1512c <__aeabi_fsub+0x24c>
   15124:	4661      	mov	r1, ip
   15126:	4211      	tst	r1, r2
   15128:	d100      	bne.n	1512c <__aeabi_fsub+0x24c>
   1512a:	0033      	movs	r3, r6
   1512c:	24ff      	movs	r4, #255	; 0xff
   1512e:	e71d      	b.n	14f6c <__aeabi_fsub+0x8c>
   15130:	24ff      	movs	r4, #255	; 0xff
   15132:	2300      	movs	r3, #0
   15134:	e72c      	b.n	14f90 <__aeabi_fsub+0xb0>
   15136:	2c00      	cmp	r4, #0
   15138:	d1e9      	bne.n	1510e <__aeabi_fsub+0x22e>
   1513a:	2b00      	cmp	r3, #0
   1513c:	d063      	beq.n	15206 <__aeabi_fsub+0x326>
   1513e:	2e00      	cmp	r6, #0
   15140:	d100      	bne.n	15144 <__aeabi_fsub+0x264>
   15142:	e713      	b.n	14f6c <__aeabi_fsub+0x8c>
   15144:	199b      	adds	r3, r3, r6
   15146:	015a      	lsls	r2, r3, #5
   15148:	d400      	bmi.n	1514c <__aeabi_fsub+0x26c>
   1514a:	e73e      	b.n	14fca <__aeabi_fsub+0xea>
   1514c:	4a31      	ldr	r2, [pc, #196]	; (15214 <__aeabi_fsub+0x334>)
   1514e:	000c      	movs	r4, r1
   15150:	4013      	ands	r3, r2
   15152:	e70b      	b.n	14f6c <__aeabi_fsub+0x8c>
   15154:	2c00      	cmp	r4, #0
   15156:	d11e      	bne.n	15196 <__aeabi_fsub+0x2b6>
   15158:	2b00      	cmp	r3, #0
   1515a:	d12f      	bne.n	151bc <__aeabi_fsub+0x2dc>
   1515c:	2e00      	cmp	r6, #0
   1515e:	d04f      	beq.n	15200 <__aeabi_fsub+0x320>
   15160:	0033      	movs	r3, r6
   15162:	000d      	movs	r5, r1
   15164:	e702      	b.n	14f6c <__aeabi_fsub+0x8c>
   15166:	2601      	movs	r6, #1
   15168:	e755      	b.n	15016 <__aeabi_fsub+0x136>
   1516a:	2c00      	cmp	r4, #0
   1516c:	d11f      	bne.n	151ae <__aeabi_fsub+0x2ce>
   1516e:	2b00      	cmp	r3, #0
   15170:	d043      	beq.n	151fa <__aeabi_fsub+0x31a>
   15172:	43c9      	mvns	r1, r1
   15174:	2900      	cmp	r1, #0
   15176:	d00b      	beq.n	15190 <__aeabi_fsub+0x2b0>
   15178:	28ff      	cmp	r0, #255	; 0xff
   1517a:	d039      	beq.n	151f0 <__aeabi_fsub+0x310>
   1517c:	291b      	cmp	r1, #27
   1517e:	dc44      	bgt.n	1520a <__aeabi_fsub+0x32a>
   15180:	001c      	movs	r4, r3
   15182:	2720      	movs	r7, #32
   15184:	40cc      	lsrs	r4, r1
   15186:	1a79      	subs	r1, r7, r1
   15188:	408b      	lsls	r3, r1
   1518a:	1e59      	subs	r1, r3, #1
   1518c:	418b      	sbcs	r3, r1
   1518e:	4323      	orrs	r3, r4
   15190:	199b      	adds	r3, r3, r6
   15192:	0004      	movs	r4, r0
   15194:	e740      	b.n	15018 <__aeabi_fsub+0x138>
   15196:	2b00      	cmp	r3, #0
   15198:	d11a      	bne.n	151d0 <__aeabi_fsub+0x2f0>
   1519a:	2e00      	cmp	r6, #0
   1519c:	d124      	bne.n	151e8 <__aeabi_fsub+0x308>
   1519e:	2780      	movs	r7, #128	; 0x80
   151a0:	2200      	movs	r2, #0
   151a2:	03ff      	lsls	r7, r7, #15
   151a4:	e71b      	b.n	14fde <__aeabi_fsub+0xfe>
   151a6:	0033      	movs	r3, r6
   151a8:	0004      	movs	r4, r0
   151aa:	000d      	movs	r5, r1
   151ac:	e6de      	b.n	14f6c <__aeabi_fsub+0x8c>
   151ae:	28ff      	cmp	r0, #255	; 0xff
   151b0:	d01e      	beq.n	151f0 <__aeabi_fsub+0x310>
   151b2:	2480      	movs	r4, #128	; 0x80
   151b4:	04e4      	lsls	r4, r4, #19
   151b6:	4249      	negs	r1, r1
   151b8:	4323      	orrs	r3, r4
   151ba:	e7df      	b.n	1517c <__aeabi_fsub+0x29c>
   151bc:	2e00      	cmp	r6, #0
   151be:	d100      	bne.n	151c2 <__aeabi_fsub+0x2e2>
   151c0:	e6d4      	b.n	14f6c <__aeabi_fsub+0x8c>
   151c2:	1b9f      	subs	r7, r3, r6
   151c4:	017a      	lsls	r2, r7, #5
   151c6:	d400      	bmi.n	151ca <__aeabi_fsub+0x2ea>
   151c8:	e737      	b.n	1503a <__aeabi_fsub+0x15a>
   151ca:	1af3      	subs	r3, r6, r3
   151cc:	000d      	movs	r5, r1
   151ce:	e6cd      	b.n	14f6c <__aeabi_fsub+0x8c>
   151d0:	24ff      	movs	r4, #255	; 0xff
   151d2:	2e00      	cmp	r6, #0
   151d4:	d100      	bne.n	151d8 <__aeabi_fsub+0x2f8>
   151d6:	e6c9      	b.n	14f6c <__aeabi_fsub+0x8c>
   151d8:	2280      	movs	r2, #128	; 0x80
   151da:	4650      	mov	r0, sl
   151dc:	03d2      	lsls	r2, r2, #15
   151de:	4210      	tst	r0, r2
   151e0:	d0a4      	beq.n	1512c <__aeabi_fsub+0x24c>
   151e2:	4660      	mov	r0, ip
   151e4:	4210      	tst	r0, r2
   151e6:	d1a1      	bne.n	1512c <__aeabi_fsub+0x24c>
   151e8:	0033      	movs	r3, r6
   151ea:	000d      	movs	r5, r1
   151ec:	24ff      	movs	r4, #255	; 0xff
   151ee:	e6bd      	b.n	14f6c <__aeabi_fsub+0x8c>
   151f0:	0033      	movs	r3, r6
   151f2:	24ff      	movs	r4, #255	; 0xff
   151f4:	e6ba      	b.n	14f6c <__aeabi_fsub+0x8c>
   151f6:	2301      	movs	r3, #1
   151f8:	e76e      	b.n	150d8 <__aeabi_fsub+0x1f8>
   151fa:	0033      	movs	r3, r6
   151fc:	0004      	movs	r4, r0
   151fe:	e6b5      	b.n	14f6c <__aeabi_fsub+0x8c>
   15200:	2700      	movs	r7, #0
   15202:	2200      	movs	r2, #0
   15204:	e71c      	b.n	15040 <__aeabi_fsub+0x160>
   15206:	0033      	movs	r3, r6
   15208:	e6b0      	b.n	14f6c <__aeabi_fsub+0x8c>
   1520a:	2301      	movs	r3, #1
   1520c:	e7c0      	b.n	15190 <__aeabi_fsub+0x2b0>
   1520e:	46c0      	nop			; (mov r8, r8)
   15210:	7dffffff 	.word	0x7dffffff
   15214:	fbffffff 	.word	0xfbffffff

00015218 <__aeabi_f2iz>:
   15218:	0241      	lsls	r1, r0, #9
   1521a:	0043      	lsls	r3, r0, #1
   1521c:	0fc2      	lsrs	r2, r0, #31
   1521e:	0a49      	lsrs	r1, r1, #9
   15220:	0e1b      	lsrs	r3, r3, #24
   15222:	2000      	movs	r0, #0
   15224:	2b7e      	cmp	r3, #126	; 0x7e
   15226:	dd0d      	ble.n	15244 <__aeabi_f2iz+0x2c>
   15228:	2b9d      	cmp	r3, #157	; 0x9d
   1522a:	dc0c      	bgt.n	15246 <__aeabi_f2iz+0x2e>
   1522c:	2080      	movs	r0, #128	; 0x80
   1522e:	0400      	lsls	r0, r0, #16
   15230:	4301      	orrs	r1, r0
   15232:	2b95      	cmp	r3, #149	; 0x95
   15234:	dc0a      	bgt.n	1524c <__aeabi_f2iz+0x34>
   15236:	2096      	movs	r0, #150	; 0x96
   15238:	1ac3      	subs	r3, r0, r3
   1523a:	40d9      	lsrs	r1, r3
   1523c:	4248      	negs	r0, r1
   1523e:	2a00      	cmp	r2, #0
   15240:	d100      	bne.n	15244 <__aeabi_f2iz+0x2c>
   15242:	0008      	movs	r0, r1
   15244:	4770      	bx	lr
   15246:	4b03      	ldr	r3, [pc, #12]	; (15254 <__aeabi_f2iz+0x3c>)
   15248:	18d0      	adds	r0, r2, r3
   1524a:	e7fb      	b.n	15244 <__aeabi_f2iz+0x2c>
   1524c:	3b96      	subs	r3, #150	; 0x96
   1524e:	4099      	lsls	r1, r3
   15250:	e7f4      	b.n	1523c <__aeabi_f2iz+0x24>
   15252:	46c0      	nop			; (mov r8, r8)
   15254:	7fffffff 	.word	0x7fffffff

00015258 <__aeabi_i2f>:
   15258:	b570      	push	{r4, r5, r6, lr}
   1525a:	2800      	cmp	r0, #0
   1525c:	d030      	beq.n	152c0 <__aeabi_i2f+0x68>
   1525e:	17c3      	asrs	r3, r0, #31
   15260:	18c4      	adds	r4, r0, r3
   15262:	405c      	eors	r4, r3
   15264:	0fc5      	lsrs	r5, r0, #31
   15266:	0020      	movs	r0, r4
   15268:	f001 fef0 	bl	1704c <__clzsi2>
   1526c:	239e      	movs	r3, #158	; 0x9e
   1526e:	1a1b      	subs	r3, r3, r0
   15270:	2b96      	cmp	r3, #150	; 0x96
   15272:	dc0d      	bgt.n	15290 <__aeabi_i2f+0x38>
   15274:	2296      	movs	r2, #150	; 0x96
   15276:	1ad2      	subs	r2, r2, r3
   15278:	4094      	lsls	r4, r2
   1527a:	002a      	movs	r2, r5
   1527c:	0264      	lsls	r4, r4, #9
   1527e:	0a64      	lsrs	r4, r4, #9
   15280:	b2db      	uxtb	r3, r3
   15282:	0264      	lsls	r4, r4, #9
   15284:	05db      	lsls	r3, r3, #23
   15286:	0a60      	lsrs	r0, r4, #9
   15288:	07d2      	lsls	r2, r2, #31
   1528a:	4318      	orrs	r0, r3
   1528c:	4310      	orrs	r0, r2
   1528e:	bd70      	pop	{r4, r5, r6, pc}
   15290:	2b99      	cmp	r3, #153	; 0x99
   15292:	dc19      	bgt.n	152c8 <__aeabi_i2f+0x70>
   15294:	2299      	movs	r2, #153	; 0x99
   15296:	1ad2      	subs	r2, r2, r3
   15298:	2a00      	cmp	r2, #0
   1529a:	dd29      	ble.n	152f0 <__aeabi_i2f+0x98>
   1529c:	4094      	lsls	r4, r2
   1529e:	0022      	movs	r2, r4
   152a0:	4c14      	ldr	r4, [pc, #80]	; (152f4 <__aeabi_i2f+0x9c>)
   152a2:	4014      	ands	r4, r2
   152a4:	0751      	lsls	r1, r2, #29
   152a6:	d004      	beq.n	152b2 <__aeabi_i2f+0x5a>
   152a8:	210f      	movs	r1, #15
   152aa:	400a      	ands	r2, r1
   152ac:	2a04      	cmp	r2, #4
   152ae:	d000      	beq.n	152b2 <__aeabi_i2f+0x5a>
   152b0:	3404      	adds	r4, #4
   152b2:	0162      	lsls	r2, r4, #5
   152b4:	d413      	bmi.n	152de <__aeabi_i2f+0x86>
   152b6:	01a4      	lsls	r4, r4, #6
   152b8:	0a64      	lsrs	r4, r4, #9
   152ba:	b2db      	uxtb	r3, r3
   152bc:	002a      	movs	r2, r5
   152be:	e7e0      	b.n	15282 <__aeabi_i2f+0x2a>
   152c0:	2200      	movs	r2, #0
   152c2:	2300      	movs	r3, #0
   152c4:	2400      	movs	r4, #0
   152c6:	e7dc      	b.n	15282 <__aeabi_i2f+0x2a>
   152c8:	2205      	movs	r2, #5
   152ca:	0021      	movs	r1, r4
   152cc:	1a12      	subs	r2, r2, r0
   152ce:	40d1      	lsrs	r1, r2
   152d0:	22b9      	movs	r2, #185	; 0xb9
   152d2:	1ad2      	subs	r2, r2, r3
   152d4:	4094      	lsls	r4, r2
   152d6:	1e62      	subs	r2, r4, #1
   152d8:	4194      	sbcs	r4, r2
   152da:	430c      	orrs	r4, r1
   152dc:	e7da      	b.n	15294 <__aeabi_i2f+0x3c>
   152de:	4b05      	ldr	r3, [pc, #20]	; (152f4 <__aeabi_i2f+0x9c>)
   152e0:	002a      	movs	r2, r5
   152e2:	401c      	ands	r4, r3
   152e4:	239f      	movs	r3, #159	; 0x9f
   152e6:	01a4      	lsls	r4, r4, #6
   152e8:	1a1b      	subs	r3, r3, r0
   152ea:	0a64      	lsrs	r4, r4, #9
   152ec:	b2db      	uxtb	r3, r3
   152ee:	e7c8      	b.n	15282 <__aeabi_i2f+0x2a>
   152f0:	0022      	movs	r2, r4
   152f2:	e7d5      	b.n	152a0 <__aeabi_i2f+0x48>
   152f4:	fbffffff 	.word	0xfbffffff

000152f8 <__aeabi_ui2f>:
   152f8:	b510      	push	{r4, lr}
   152fa:	1e04      	subs	r4, r0, #0
   152fc:	d027      	beq.n	1534e <__aeabi_ui2f+0x56>
   152fe:	f001 fea5 	bl	1704c <__clzsi2>
   15302:	239e      	movs	r3, #158	; 0x9e
   15304:	1a1b      	subs	r3, r3, r0
   15306:	2b96      	cmp	r3, #150	; 0x96
   15308:	dc0a      	bgt.n	15320 <__aeabi_ui2f+0x28>
   1530a:	2296      	movs	r2, #150	; 0x96
   1530c:	1ad2      	subs	r2, r2, r3
   1530e:	4094      	lsls	r4, r2
   15310:	0264      	lsls	r4, r4, #9
   15312:	0a64      	lsrs	r4, r4, #9
   15314:	b2db      	uxtb	r3, r3
   15316:	0264      	lsls	r4, r4, #9
   15318:	05db      	lsls	r3, r3, #23
   1531a:	0a60      	lsrs	r0, r4, #9
   1531c:	4318      	orrs	r0, r3
   1531e:	bd10      	pop	{r4, pc}
   15320:	2b99      	cmp	r3, #153	; 0x99
   15322:	dc17      	bgt.n	15354 <__aeabi_ui2f+0x5c>
   15324:	2299      	movs	r2, #153	; 0x99
   15326:	1ad2      	subs	r2, r2, r3
   15328:	2a00      	cmp	r2, #0
   1532a:	dd27      	ble.n	1537c <__aeabi_ui2f+0x84>
   1532c:	4094      	lsls	r4, r2
   1532e:	0022      	movs	r2, r4
   15330:	4c13      	ldr	r4, [pc, #76]	; (15380 <__aeabi_ui2f+0x88>)
   15332:	4014      	ands	r4, r2
   15334:	0751      	lsls	r1, r2, #29
   15336:	d004      	beq.n	15342 <__aeabi_ui2f+0x4a>
   15338:	210f      	movs	r1, #15
   1533a:	400a      	ands	r2, r1
   1533c:	2a04      	cmp	r2, #4
   1533e:	d000      	beq.n	15342 <__aeabi_ui2f+0x4a>
   15340:	3404      	adds	r4, #4
   15342:	0162      	lsls	r2, r4, #5
   15344:	d412      	bmi.n	1536c <__aeabi_ui2f+0x74>
   15346:	01a4      	lsls	r4, r4, #6
   15348:	0a64      	lsrs	r4, r4, #9
   1534a:	b2db      	uxtb	r3, r3
   1534c:	e7e3      	b.n	15316 <__aeabi_ui2f+0x1e>
   1534e:	2300      	movs	r3, #0
   15350:	2400      	movs	r4, #0
   15352:	e7e0      	b.n	15316 <__aeabi_ui2f+0x1e>
   15354:	22b9      	movs	r2, #185	; 0xb9
   15356:	0021      	movs	r1, r4
   15358:	1ad2      	subs	r2, r2, r3
   1535a:	4091      	lsls	r1, r2
   1535c:	000a      	movs	r2, r1
   1535e:	1e51      	subs	r1, r2, #1
   15360:	418a      	sbcs	r2, r1
   15362:	2105      	movs	r1, #5
   15364:	1a09      	subs	r1, r1, r0
   15366:	40cc      	lsrs	r4, r1
   15368:	4314      	orrs	r4, r2
   1536a:	e7db      	b.n	15324 <__aeabi_ui2f+0x2c>
   1536c:	4b04      	ldr	r3, [pc, #16]	; (15380 <__aeabi_ui2f+0x88>)
   1536e:	401c      	ands	r4, r3
   15370:	239f      	movs	r3, #159	; 0x9f
   15372:	01a4      	lsls	r4, r4, #6
   15374:	1a1b      	subs	r3, r3, r0
   15376:	0a64      	lsrs	r4, r4, #9
   15378:	b2db      	uxtb	r3, r3
   1537a:	e7cc      	b.n	15316 <__aeabi_ui2f+0x1e>
   1537c:	0022      	movs	r2, r4
   1537e:	e7d7      	b.n	15330 <__aeabi_ui2f+0x38>
   15380:	fbffffff 	.word	0xfbffffff

00015384 <__aeabi_dadd>:
   15384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15386:	4645      	mov	r5, r8
   15388:	46de      	mov	lr, fp
   1538a:	4657      	mov	r7, sl
   1538c:	464e      	mov	r6, r9
   1538e:	030c      	lsls	r4, r1, #12
   15390:	b5e0      	push	{r5, r6, r7, lr}
   15392:	004e      	lsls	r6, r1, #1
   15394:	0fc9      	lsrs	r1, r1, #31
   15396:	4688      	mov	r8, r1
   15398:	000d      	movs	r5, r1
   1539a:	0a61      	lsrs	r1, r4, #9
   1539c:	0f44      	lsrs	r4, r0, #29
   1539e:	430c      	orrs	r4, r1
   153a0:	00c7      	lsls	r7, r0, #3
   153a2:	0319      	lsls	r1, r3, #12
   153a4:	0058      	lsls	r0, r3, #1
   153a6:	0fdb      	lsrs	r3, r3, #31
   153a8:	469b      	mov	fp, r3
   153aa:	0a4b      	lsrs	r3, r1, #9
   153ac:	0f51      	lsrs	r1, r2, #29
   153ae:	430b      	orrs	r3, r1
   153b0:	0d76      	lsrs	r6, r6, #21
   153b2:	0d40      	lsrs	r0, r0, #21
   153b4:	0019      	movs	r1, r3
   153b6:	00d2      	lsls	r2, r2, #3
   153b8:	45d8      	cmp	r8, fp
   153ba:	d100      	bne.n	153be <__aeabi_dadd+0x3a>
   153bc:	e0ae      	b.n	1551c <__aeabi_dadd+0x198>
   153be:	1a35      	subs	r5, r6, r0
   153c0:	2d00      	cmp	r5, #0
   153c2:	dc00      	bgt.n	153c6 <__aeabi_dadd+0x42>
   153c4:	e0f6      	b.n	155b4 <__aeabi_dadd+0x230>
   153c6:	2800      	cmp	r0, #0
   153c8:	d10f      	bne.n	153ea <__aeabi_dadd+0x66>
   153ca:	4313      	orrs	r3, r2
   153cc:	d100      	bne.n	153d0 <__aeabi_dadd+0x4c>
   153ce:	e0db      	b.n	15588 <__aeabi_dadd+0x204>
   153d0:	1e6b      	subs	r3, r5, #1
   153d2:	2b00      	cmp	r3, #0
   153d4:	d000      	beq.n	153d8 <__aeabi_dadd+0x54>
   153d6:	e137      	b.n	15648 <__aeabi_dadd+0x2c4>
   153d8:	1aba      	subs	r2, r7, r2
   153da:	4297      	cmp	r7, r2
   153dc:	41bf      	sbcs	r7, r7
   153de:	1a64      	subs	r4, r4, r1
   153e0:	427f      	negs	r7, r7
   153e2:	1be4      	subs	r4, r4, r7
   153e4:	2601      	movs	r6, #1
   153e6:	0017      	movs	r7, r2
   153e8:	e024      	b.n	15434 <__aeabi_dadd+0xb0>
   153ea:	4bc6      	ldr	r3, [pc, #792]	; (15704 <__aeabi_dadd+0x380>)
   153ec:	429e      	cmp	r6, r3
   153ee:	d04d      	beq.n	1548c <__aeabi_dadd+0x108>
   153f0:	2380      	movs	r3, #128	; 0x80
   153f2:	041b      	lsls	r3, r3, #16
   153f4:	4319      	orrs	r1, r3
   153f6:	2d38      	cmp	r5, #56	; 0x38
   153f8:	dd00      	ble.n	153fc <__aeabi_dadd+0x78>
   153fa:	e107      	b.n	1560c <__aeabi_dadd+0x288>
   153fc:	2d1f      	cmp	r5, #31
   153fe:	dd00      	ble.n	15402 <__aeabi_dadd+0x7e>
   15400:	e138      	b.n	15674 <__aeabi_dadd+0x2f0>
   15402:	2020      	movs	r0, #32
   15404:	1b43      	subs	r3, r0, r5
   15406:	469a      	mov	sl, r3
   15408:	000b      	movs	r3, r1
   1540a:	4650      	mov	r0, sl
   1540c:	4083      	lsls	r3, r0
   1540e:	4699      	mov	r9, r3
   15410:	0013      	movs	r3, r2
   15412:	4648      	mov	r0, r9
   15414:	40eb      	lsrs	r3, r5
   15416:	4318      	orrs	r0, r3
   15418:	0003      	movs	r3, r0
   1541a:	4650      	mov	r0, sl
   1541c:	4082      	lsls	r2, r0
   1541e:	1e50      	subs	r0, r2, #1
   15420:	4182      	sbcs	r2, r0
   15422:	40e9      	lsrs	r1, r5
   15424:	431a      	orrs	r2, r3
   15426:	1aba      	subs	r2, r7, r2
   15428:	1a61      	subs	r1, r4, r1
   1542a:	4297      	cmp	r7, r2
   1542c:	41a4      	sbcs	r4, r4
   1542e:	0017      	movs	r7, r2
   15430:	4264      	negs	r4, r4
   15432:	1b0c      	subs	r4, r1, r4
   15434:	0223      	lsls	r3, r4, #8
   15436:	d562      	bpl.n	154fe <__aeabi_dadd+0x17a>
   15438:	0264      	lsls	r4, r4, #9
   1543a:	0a65      	lsrs	r5, r4, #9
   1543c:	2d00      	cmp	r5, #0
   1543e:	d100      	bne.n	15442 <__aeabi_dadd+0xbe>
   15440:	e0df      	b.n	15602 <__aeabi_dadd+0x27e>
   15442:	0028      	movs	r0, r5
   15444:	f001 fe02 	bl	1704c <__clzsi2>
   15448:	0003      	movs	r3, r0
   1544a:	3b08      	subs	r3, #8
   1544c:	2b1f      	cmp	r3, #31
   1544e:	dd00      	ble.n	15452 <__aeabi_dadd+0xce>
   15450:	e0d2      	b.n	155f8 <__aeabi_dadd+0x274>
   15452:	2220      	movs	r2, #32
   15454:	003c      	movs	r4, r7
   15456:	1ad2      	subs	r2, r2, r3
   15458:	409d      	lsls	r5, r3
   1545a:	40d4      	lsrs	r4, r2
   1545c:	409f      	lsls	r7, r3
   1545e:	4325      	orrs	r5, r4
   15460:	429e      	cmp	r6, r3
   15462:	dd00      	ble.n	15466 <__aeabi_dadd+0xe2>
   15464:	e0c4      	b.n	155f0 <__aeabi_dadd+0x26c>
   15466:	1b9e      	subs	r6, r3, r6
   15468:	1c73      	adds	r3, r6, #1
   1546a:	2b1f      	cmp	r3, #31
   1546c:	dd00      	ble.n	15470 <__aeabi_dadd+0xec>
   1546e:	e0f1      	b.n	15654 <__aeabi_dadd+0x2d0>
   15470:	2220      	movs	r2, #32
   15472:	0038      	movs	r0, r7
   15474:	0029      	movs	r1, r5
   15476:	1ad2      	subs	r2, r2, r3
   15478:	40d8      	lsrs	r0, r3
   1547a:	4091      	lsls	r1, r2
   1547c:	4097      	lsls	r7, r2
   1547e:	002c      	movs	r4, r5
   15480:	4301      	orrs	r1, r0
   15482:	1e78      	subs	r0, r7, #1
   15484:	4187      	sbcs	r7, r0
   15486:	40dc      	lsrs	r4, r3
   15488:	2600      	movs	r6, #0
   1548a:	430f      	orrs	r7, r1
   1548c:	077b      	lsls	r3, r7, #29
   1548e:	d009      	beq.n	154a4 <__aeabi_dadd+0x120>
   15490:	230f      	movs	r3, #15
   15492:	403b      	ands	r3, r7
   15494:	2b04      	cmp	r3, #4
   15496:	d005      	beq.n	154a4 <__aeabi_dadd+0x120>
   15498:	1d3b      	adds	r3, r7, #4
   1549a:	42bb      	cmp	r3, r7
   1549c:	41bf      	sbcs	r7, r7
   1549e:	427f      	negs	r7, r7
   154a0:	19e4      	adds	r4, r4, r7
   154a2:	001f      	movs	r7, r3
   154a4:	0223      	lsls	r3, r4, #8
   154a6:	d52c      	bpl.n	15502 <__aeabi_dadd+0x17e>
   154a8:	4b96      	ldr	r3, [pc, #600]	; (15704 <__aeabi_dadd+0x380>)
   154aa:	3601      	adds	r6, #1
   154ac:	429e      	cmp	r6, r3
   154ae:	d100      	bne.n	154b2 <__aeabi_dadd+0x12e>
   154b0:	e09a      	b.n	155e8 <__aeabi_dadd+0x264>
   154b2:	4645      	mov	r5, r8
   154b4:	4b94      	ldr	r3, [pc, #592]	; (15708 <__aeabi_dadd+0x384>)
   154b6:	08ff      	lsrs	r7, r7, #3
   154b8:	401c      	ands	r4, r3
   154ba:	0760      	lsls	r0, r4, #29
   154bc:	0576      	lsls	r6, r6, #21
   154be:	0264      	lsls	r4, r4, #9
   154c0:	4307      	orrs	r7, r0
   154c2:	0b24      	lsrs	r4, r4, #12
   154c4:	0d76      	lsrs	r6, r6, #21
   154c6:	2100      	movs	r1, #0
   154c8:	0324      	lsls	r4, r4, #12
   154ca:	0b23      	lsrs	r3, r4, #12
   154cc:	0d0c      	lsrs	r4, r1, #20
   154ce:	4a8f      	ldr	r2, [pc, #572]	; (1570c <__aeabi_dadd+0x388>)
   154d0:	0524      	lsls	r4, r4, #20
   154d2:	431c      	orrs	r4, r3
   154d4:	4014      	ands	r4, r2
   154d6:	0533      	lsls	r3, r6, #20
   154d8:	4323      	orrs	r3, r4
   154da:	005b      	lsls	r3, r3, #1
   154dc:	07ed      	lsls	r5, r5, #31
   154de:	085b      	lsrs	r3, r3, #1
   154e0:	432b      	orrs	r3, r5
   154e2:	0038      	movs	r0, r7
   154e4:	0019      	movs	r1, r3
   154e6:	bc3c      	pop	{r2, r3, r4, r5}
   154e8:	4690      	mov	r8, r2
   154ea:	4699      	mov	r9, r3
   154ec:	46a2      	mov	sl, r4
   154ee:	46ab      	mov	fp, r5
   154f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154f2:	4664      	mov	r4, ip
   154f4:	4304      	orrs	r4, r0
   154f6:	d100      	bne.n	154fa <__aeabi_dadd+0x176>
   154f8:	e211      	b.n	1591e <__aeabi_dadd+0x59a>
   154fa:	0004      	movs	r4, r0
   154fc:	4667      	mov	r7, ip
   154fe:	077b      	lsls	r3, r7, #29
   15500:	d1c6      	bne.n	15490 <__aeabi_dadd+0x10c>
   15502:	4645      	mov	r5, r8
   15504:	0760      	lsls	r0, r4, #29
   15506:	08ff      	lsrs	r7, r7, #3
   15508:	4307      	orrs	r7, r0
   1550a:	08e4      	lsrs	r4, r4, #3
   1550c:	4b7d      	ldr	r3, [pc, #500]	; (15704 <__aeabi_dadd+0x380>)
   1550e:	429e      	cmp	r6, r3
   15510:	d030      	beq.n	15574 <__aeabi_dadd+0x1f0>
   15512:	0324      	lsls	r4, r4, #12
   15514:	0576      	lsls	r6, r6, #21
   15516:	0b24      	lsrs	r4, r4, #12
   15518:	0d76      	lsrs	r6, r6, #21
   1551a:	e7d4      	b.n	154c6 <__aeabi_dadd+0x142>
   1551c:	1a33      	subs	r3, r6, r0
   1551e:	469a      	mov	sl, r3
   15520:	2b00      	cmp	r3, #0
   15522:	dd78      	ble.n	15616 <__aeabi_dadd+0x292>
   15524:	2800      	cmp	r0, #0
   15526:	d031      	beq.n	1558c <__aeabi_dadd+0x208>
   15528:	4876      	ldr	r0, [pc, #472]	; (15704 <__aeabi_dadd+0x380>)
   1552a:	4286      	cmp	r6, r0
   1552c:	d0ae      	beq.n	1548c <__aeabi_dadd+0x108>
   1552e:	2080      	movs	r0, #128	; 0x80
   15530:	0400      	lsls	r0, r0, #16
   15532:	4301      	orrs	r1, r0
   15534:	4653      	mov	r3, sl
   15536:	2b38      	cmp	r3, #56	; 0x38
   15538:	dc00      	bgt.n	1553c <__aeabi_dadd+0x1b8>
   1553a:	e0e9      	b.n	15710 <__aeabi_dadd+0x38c>
   1553c:	430a      	orrs	r2, r1
   1553e:	1e51      	subs	r1, r2, #1
   15540:	418a      	sbcs	r2, r1
   15542:	2100      	movs	r1, #0
   15544:	19d2      	adds	r2, r2, r7
   15546:	42ba      	cmp	r2, r7
   15548:	41bf      	sbcs	r7, r7
   1554a:	1909      	adds	r1, r1, r4
   1554c:	427c      	negs	r4, r7
   1554e:	0017      	movs	r7, r2
   15550:	190c      	adds	r4, r1, r4
   15552:	0223      	lsls	r3, r4, #8
   15554:	d5d3      	bpl.n	154fe <__aeabi_dadd+0x17a>
   15556:	4b6b      	ldr	r3, [pc, #428]	; (15704 <__aeabi_dadd+0x380>)
   15558:	3601      	adds	r6, #1
   1555a:	429e      	cmp	r6, r3
   1555c:	d100      	bne.n	15560 <__aeabi_dadd+0x1dc>
   1555e:	e13a      	b.n	157d6 <__aeabi_dadd+0x452>
   15560:	2001      	movs	r0, #1
   15562:	4b69      	ldr	r3, [pc, #420]	; (15708 <__aeabi_dadd+0x384>)
   15564:	401c      	ands	r4, r3
   15566:	087b      	lsrs	r3, r7, #1
   15568:	4007      	ands	r7, r0
   1556a:	431f      	orrs	r7, r3
   1556c:	07e0      	lsls	r0, r4, #31
   1556e:	4307      	orrs	r7, r0
   15570:	0864      	lsrs	r4, r4, #1
   15572:	e78b      	b.n	1548c <__aeabi_dadd+0x108>
   15574:	0023      	movs	r3, r4
   15576:	433b      	orrs	r3, r7
   15578:	d100      	bne.n	1557c <__aeabi_dadd+0x1f8>
   1557a:	e1cb      	b.n	15914 <__aeabi_dadd+0x590>
   1557c:	2280      	movs	r2, #128	; 0x80
   1557e:	0312      	lsls	r2, r2, #12
   15580:	4314      	orrs	r4, r2
   15582:	0324      	lsls	r4, r4, #12
   15584:	0b24      	lsrs	r4, r4, #12
   15586:	e79e      	b.n	154c6 <__aeabi_dadd+0x142>
   15588:	002e      	movs	r6, r5
   1558a:	e77f      	b.n	1548c <__aeabi_dadd+0x108>
   1558c:	0008      	movs	r0, r1
   1558e:	4310      	orrs	r0, r2
   15590:	d100      	bne.n	15594 <__aeabi_dadd+0x210>
   15592:	e0b4      	b.n	156fe <__aeabi_dadd+0x37a>
   15594:	1e58      	subs	r0, r3, #1
   15596:	2800      	cmp	r0, #0
   15598:	d000      	beq.n	1559c <__aeabi_dadd+0x218>
   1559a:	e0de      	b.n	1575a <__aeabi_dadd+0x3d6>
   1559c:	18ba      	adds	r2, r7, r2
   1559e:	42ba      	cmp	r2, r7
   155a0:	419b      	sbcs	r3, r3
   155a2:	1864      	adds	r4, r4, r1
   155a4:	425b      	negs	r3, r3
   155a6:	18e4      	adds	r4, r4, r3
   155a8:	0017      	movs	r7, r2
   155aa:	2601      	movs	r6, #1
   155ac:	0223      	lsls	r3, r4, #8
   155ae:	d5a6      	bpl.n	154fe <__aeabi_dadd+0x17a>
   155b0:	2602      	movs	r6, #2
   155b2:	e7d5      	b.n	15560 <__aeabi_dadd+0x1dc>
   155b4:	2d00      	cmp	r5, #0
   155b6:	d16e      	bne.n	15696 <__aeabi_dadd+0x312>
   155b8:	1c70      	adds	r0, r6, #1
   155ba:	0540      	lsls	r0, r0, #21
   155bc:	0d40      	lsrs	r0, r0, #21
   155be:	2801      	cmp	r0, #1
   155c0:	dc00      	bgt.n	155c4 <__aeabi_dadd+0x240>
   155c2:	e0f9      	b.n	157b8 <__aeabi_dadd+0x434>
   155c4:	1ab8      	subs	r0, r7, r2
   155c6:	4684      	mov	ip, r0
   155c8:	4287      	cmp	r7, r0
   155ca:	4180      	sbcs	r0, r0
   155cc:	1ae5      	subs	r5, r4, r3
   155ce:	4240      	negs	r0, r0
   155d0:	1a2d      	subs	r5, r5, r0
   155d2:	0228      	lsls	r0, r5, #8
   155d4:	d400      	bmi.n	155d8 <__aeabi_dadd+0x254>
   155d6:	e089      	b.n	156ec <__aeabi_dadd+0x368>
   155d8:	1bd7      	subs	r7, r2, r7
   155da:	42ba      	cmp	r2, r7
   155dc:	4192      	sbcs	r2, r2
   155de:	1b1c      	subs	r4, r3, r4
   155e0:	4252      	negs	r2, r2
   155e2:	1aa5      	subs	r5, r4, r2
   155e4:	46d8      	mov	r8, fp
   155e6:	e729      	b.n	1543c <__aeabi_dadd+0xb8>
   155e8:	4645      	mov	r5, r8
   155ea:	2400      	movs	r4, #0
   155ec:	2700      	movs	r7, #0
   155ee:	e76a      	b.n	154c6 <__aeabi_dadd+0x142>
   155f0:	4c45      	ldr	r4, [pc, #276]	; (15708 <__aeabi_dadd+0x384>)
   155f2:	1af6      	subs	r6, r6, r3
   155f4:	402c      	ands	r4, r5
   155f6:	e749      	b.n	1548c <__aeabi_dadd+0x108>
   155f8:	003d      	movs	r5, r7
   155fa:	3828      	subs	r0, #40	; 0x28
   155fc:	4085      	lsls	r5, r0
   155fe:	2700      	movs	r7, #0
   15600:	e72e      	b.n	15460 <__aeabi_dadd+0xdc>
   15602:	0038      	movs	r0, r7
   15604:	f001 fd22 	bl	1704c <__clzsi2>
   15608:	3020      	adds	r0, #32
   1560a:	e71d      	b.n	15448 <__aeabi_dadd+0xc4>
   1560c:	430a      	orrs	r2, r1
   1560e:	1e51      	subs	r1, r2, #1
   15610:	418a      	sbcs	r2, r1
   15612:	2100      	movs	r1, #0
   15614:	e707      	b.n	15426 <__aeabi_dadd+0xa2>
   15616:	2b00      	cmp	r3, #0
   15618:	d000      	beq.n	1561c <__aeabi_dadd+0x298>
   1561a:	e0f3      	b.n	15804 <__aeabi_dadd+0x480>
   1561c:	1c70      	adds	r0, r6, #1
   1561e:	0543      	lsls	r3, r0, #21
   15620:	0d5b      	lsrs	r3, r3, #21
   15622:	2b01      	cmp	r3, #1
   15624:	dc00      	bgt.n	15628 <__aeabi_dadd+0x2a4>
   15626:	e0ad      	b.n	15784 <__aeabi_dadd+0x400>
   15628:	4b36      	ldr	r3, [pc, #216]	; (15704 <__aeabi_dadd+0x380>)
   1562a:	4298      	cmp	r0, r3
   1562c:	d100      	bne.n	15630 <__aeabi_dadd+0x2ac>
   1562e:	e0d1      	b.n	157d4 <__aeabi_dadd+0x450>
   15630:	18ba      	adds	r2, r7, r2
   15632:	42ba      	cmp	r2, r7
   15634:	41bf      	sbcs	r7, r7
   15636:	1864      	adds	r4, r4, r1
   15638:	427f      	negs	r7, r7
   1563a:	19e4      	adds	r4, r4, r7
   1563c:	07e7      	lsls	r7, r4, #31
   1563e:	0852      	lsrs	r2, r2, #1
   15640:	4317      	orrs	r7, r2
   15642:	0864      	lsrs	r4, r4, #1
   15644:	0006      	movs	r6, r0
   15646:	e721      	b.n	1548c <__aeabi_dadd+0x108>
   15648:	482e      	ldr	r0, [pc, #184]	; (15704 <__aeabi_dadd+0x380>)
   1564a:	4285      	cmp	r5, r0
   1564c:	d100      	bne.n	15650 <__aeabi_dadd+0x2cc>
   1564e:	e093      	b.n	15778 <__aeabi_dadd+0x3f4>
   15650:	001d      	movs	r5, r3
   15652:	e6d0      	b.n	153f6 <__aeabi_dadd+0x72>
   15654:	0029      	movs	r1, r5
   15656:	3e1f      	subs	r6, #31
   15658:	40f1      	lsrs	r1, r6
   1565a:	2b20      	cmp	r3, #32
   1565c:	d100      	bne.n	15660 <__aeabi_dadd+0x2dc>
   1565e:	e08d      	b.n	1577c <__aeabi_dadd+0x3f8>
   15660:	2240      	movs	r2, #64	; 0x40
   15662:	1ad3      	subs	r3, r2, r3
   15664:	409d      	lsls	r5, r3
   15666:	432f      	orrs	r7, r5
   15668:	1e7d      	subs	r5, r7, #1
   1566a:	41af      	sbcs	r7, r5
   1566c:	2400      	movs	r4, #0
   1566e:	430f      	orrs	r7, r1
   15670:	2600      	movs	r6, #0
   15672:	e744      	b.n	154fe <__aeabi_dadd+0x17a>
   15674:	002b      	movs	r3, r5
   15676:	0008      	movs	r0, r1
   15678:	3b20      	subs	r3, #32
   1567a:	40d8      	lsrs	r0, r3
   1567c:	0003      	movs	r3, r0
   1567e:	2d20      	cmp	r5, #32
   15680:	d100      	bne.n	15684 <__aeabi_dadd+0x300>
   15682:	e07d      	b.n	15780 <__aeabi_dadd+0x3fc>
   15684:	2040      	movs	r0, #64	; 0x40
   15686:	1b45      	subs	r5, r0, r5
   15688:	40a9      	lsls	r1, r5
   1568a:	430a      	orrs	r2, r1
   1568c:	1e51      	subs	r1, r2, #1
   1568e:	418a      	sbcs	r2, r1
   15690:	2100      	movs	r1, #0
   15692:	431a      	orrs	r2, r3
   15694:	e6c7      	b.n	15426 <__aeabi_dadd+0xa2>
   15696:	2e00      	cmp	r6, #0
   15698:	d050      	beq.n	1573c <__aeabi_dadd+0x3b8>
   1569a:	4e1a      	ldr	r6, [pc, #104]	; (15704 <__aeabi_dadd+0x380>)
   1569c:	42b0      	cmp	r0, r6
   1569e:	d057      	beq.n	15750 <__aeabi_dadd+0x3cc>
   156a0:	2680      	movs	r6, #128	; 0x80
   156a2:	426b      	negs	r3, r5
   156a4:	4699      	mov	r9, r3
   156a6:	0436      	lsls	r6, r6, #16
   156a8:	4334      	orrs	r4, r6
   156aa:	464b      	mov	r3, r9
   156ac:	2b38      	cmp	r3, #56	; 0x38
   156ae:	dd00      	ble.n	156b2 <__aeabi_dadd+0x32e>
   156b0:	e0d6      	b.n	15860 <__aeabi_dadd+0x4dc>
   156b2:	2b1f      	cmp	r3, #31
   156b4:	dd00      	ble.n	156b8 <__aeabi_dadd+0x334>
   156b6:	e135      	b.n	15924 <__aeabi_dadd+0x5a0>
   156b8:	2620      	movs	r6, #32
   156ba:	1af5      	subs	r5, r6, r3
   156bc:	0026      	movs	r6, r4
   156be:	40ae      	lsls	r6, r5
   156c0:	46b2      	mov	sl, r6
   156c2:	003e      	movs	r6, r7
   156c4:	40de      	lsrs	r6, r3
   156c6:	46ac      	mov	ip, r5
   156c8:	0035      	movs	r5, r6
   156ca:	4656      	mov	r6, sl
   156cc:	432e      	orrs	r6, r5
   156ce:	4665      	mov	r5, ip
   156d0:	40af      	lsls	r7, r5
   156d2:	1e7d      	subs	r5, r7, #1
   156d4:	41af      	sbcs	r7, r5
   156d6:	40dc      	lsrs	r4, r3
   156d8:	4337      	orrs	r7, r6
   156da:	1bd7      	subs	r7, r2, r7
   156dc:	42ba      	cmp	r2, r7
   156de:	4192      	sbcs	r2, r2
   156e0:	1b0c      	subs	r4, r1, r4
   156e2:	4252      	negs	r2, r2
   156e4:	1aa4      	subs	r4, r4, r2
   156e6:	0006      	movs	r6, r0
   156e8:	46d8      	mov	r8, fp
   156ea:	e6a3      	b.n	15434 <__aeabi_dadd+0xb0>
   156ec:	4664      	mov	r4, ip
   156ee:	4667      	mov	r7, ip
   156f0:	432c      	orrs	r4, r5
   156f2:	d000      	beq.n	156f6 <__aeabi_dadd+0x372>
   156f4:	e6a2      	b.n	1543c <__aeabi_dadd+0xb8>
   156f6:	2500      	movs	r5, #0
   156f8:	2600      	movs	r6, #0
   156fa:	2700      	movs	r7, #0
   156fc:	e706      	b.n	1550c <__aeabi_dadd+0x188>
   156fe:	001e      	movs	r6, r3
   15700:	e6c4      	b.n	1548c <__aeabi_dadd+0x108>
   15702:	46c0      	nop			; (mov r8, r8)
   15704:	000007ff 	.word	0x000007ff
   15708:	ff7fffff 	.word	0xff7fffff
   1570c:	800fffff 	.word	0x800fffff
   15710:	2b1f      	cmp	r3, #31
   15712:	dc63      	bgt.n	157dc <__aeabi_dadd+0x458>
   15714:	2020      	movs	r0, #32
   15716:	1ac3      	subs	r3, r0, r3
   15718:	0008      	movs	r0, r1
   1571a:	4098      	lsls	r0, r3
   1571c:	469c      	mov	ip, r3
   1571e:	4683      	mov	fp, r0
   15720:	4653      	mov	r3, sl
   15722:	0010      	movs	r0, r2
   15724:	40d8      	lsrs	r0, r3
   15726:	0003      	movs	r3, r0
   15728:	4658      	mov	r0, fp
   1572a:	4318      	orrs	r0, r3
   1572c:	4663      	mov	r3, ip
   1572e:	409a      	lsls	r2, r3
   15730:	1e53      	subs	r3, r2, #1
   15732:	419a      	sbcs	r2, r3
   15734:	4653      	mov	r3, sl
   15736:	4302      	orrs	r2, r0
   15738:	40d9      	lsrs	r1, r3
   1573a:	e703      	b.n	15544 <__aeabi_dadd+0x1c0>
   1573c:	0026      	movs	r6, r4
   1573e:	433e      	orrs	r6, r7
   15740:	d006      	beq.n	15750 <__aeabi_dadd+0x3cc>
   15742:	43eb      	mvns	r3, r5
   15744:	4699      	mov	r9, r3
   15746:	2b00      	cmp	r3, #0
   15748:	d0c7      	beq.n	156da <__aeabi_dadd+0x356>
   1574a:	4e94      	ldr	r6, [pc, #592]	; (1599c <__aeabi_dadd+0x618>)
   1574c:	42b0      	cmp	r0, r6
   1574e:	d1ac      	bne.n	156aa <__aeabi_dadd+0x326>
   15750:	000c      	movs	r4, r1
   15752:	0017      	movs	r7, r2
   15754:	0006      	movs	r6, r0
   15756:	46d8      	mov	r8, fp
   15758:	e698      	b.n	1548c <__aeabi_dadd+0x108>
   1575a:	4b90      	ldr	r3, [pc, #576]	; (1599c <__aeabi_dadd+0x618>)
   1575c:	459a      	cmp	sl, r3
   1575e:	d00b      	beq.n	15778 <__aeabi_dadd+0x3f4>
   15760:	4682      	mov	sl, r0
   15762:	e6e7      	b.n	15534 <__aeabi_dadd+0x1b0>
   15764:	2800      	cmp	r0, #0
   15766:	d000      	beq.n	1576a <__aeabi_dadd+0x3e6>
   15768:	e09e      	b.n	158a8 <__aeabi_dadd+0x524>
   1576a:	0018      	movs	r0, r3
   1576c:	4310      	orrs	r0, r2
   1576e:	d100      	bne.n	15772 <__aeabi_dadd+0x3ee>
   15770:	e0e9      	b.n	15946 <__aeabi_dadd+0x5c2>
   15772:	001c      	movs	r4, r3
   15774:	0017      	movs	r7, r2
   15776:	46d8      	mov	r8, fp
   15778:	4e88      	ldr	r6, [pc, #544]	; (1599c <__aeabi_dadd+0x618>)
   1577a:	e687      	b.n	1548c <__aeabi_dadd+0x108>
   1577c:	2500      	movs	r5, #0
   1577e:	e772      	b.n	15666 <__aeabi_dadd+0x2e2>
   15780:	2100      	movs	r1, #0
   15782:	e782      	b.n	1568a <__aeabi_dadd+0x306>
   15784:	0023      	movs	r3, r4
   15786:	433b      	orrs	r3, r7
   15788:	2e00      	cmp	r6, #0
   1578a:	d000      	beq.n	1578e <__aeabi_dadd+0x40a>
   1578c:	e0ab      	b.n	158e6 <__aeabi_dadd+0x562>
   1578e:	2b00      	cmp	r3, #0
   15790:	d100      	bne.n	15794 <__aeabi_dadd+0x410>
   15792:	e0e7      	b.n	15964 <__aeabi_dadd+0x5e0>
   15794:	000b      	movs	r3, r1
   15796:	4313      	orrs	r3, r2
   15798:	d100      	bne.n	1579c <__aeabi_dadd+0x418>
   1579a:	e677      	b.n	1548c <__aeabi_dadd+0x108>
   1579c:	18ba      	adds	r2, r7, r2
   1579e:	42ba      	cmp	r2, r7
   157a0:	41bf      	sbcs	r7, r7
   157a2:	1864      	adds	r4, r4, r1
   157a4:	427f      	negs	r7, r7
   157a6:	19e4      	adds	r4, r4, r7
   157a8:	0223      	lsls	r3, r4, #8
   157aa:	d400      	bmi.n	157ae <__aeabi_dadd+0x42a>
   157ac:	e0f2      	b.n	15994 <__aeabi_dadd+0x610>
   157ae:	4b7c      	ldr	r3, [pc, #496]	; (159a0 <__aeabi_dadd+0x61c>)
   157b0:	0017      	movs	r7, r2
   157b2:	401c      	ands	r4, r3
   157b4:	0006      	movs	r6, r0
   157b6:	e669      	b.n	1548c <__aeabi_dadd+0x108>
   157b8:	0020      	movs	r0, r4
   157ba:	4338      	orrs	r0, r7
   157bc:	2e00      	cmp	r6, #0
   157be:	d1d1      	bne.n	15764 <__aeabi_dadd+0x3e0>
   157c0:	2800      	cmp	r0, #0
   157c2:	d15b      	bne.n	1587c <__aeabi_dadd+0x4f8>
   157c4:	001c      	movs	r4, r3
   157c6:	4314      	orrs	r4, r2
   157c8:	d100      	bne.n	157cc <__aeabi_dadd+0x448>
   157ca:	e0a8      	b.n	1591e <__aeabi_dadd+0x59a>
   157cc:	001c      	movs	r4, r3
   157ce:	0017      	movs	r7, r2
   157d0:	46d8      	mov	r8, fp
   157d2:	e65b      	b.n	1548c <__aeabi_dadd+0x108>
   157d4:	0006      	movs	r6, r0
   157d6:	2400      	movs	r4, #0
   157d8:	2700      	movs	r7, #0
   157da:	e697      	b.n	1550c <__aeabi_dadd+0x188>
   157dc:	4650      	mov	r0, sl
   157de:	000b      	movs	r3, r1
   157e0:	3820      	subs	r0, #32
   157e2:	40c3      	lsrs	r3, r0
   157e4:	4699      	mov	r9, r3
   157e6:	4653      	mov	r3, sl
   157e8:	2b20      	cmp	r3, #32
   157ea:	d100      	bne.n	157ee <__aeabi_dadd+0x46a>
   157ec:	e095      	b.n	1591a <__aeabi_dadd+0x596>
   157ee:	2340      	movs	r3, #64	; 0x40
   157f0:	4650      	mov	r0, sl
   157f2:	1a1b      	subs	r3, r3, r0
   157f4:	4099      	lsls	r1, r3
   157f6:	430a      	orrs	r2, r1
   157f8:	1e51      	subs	r1, r2, #1
   157fa:	418a      	sbcs	r2, r1
   157fc:	464b      	mov	r3, r9
   157fe:	2100      	movs	r1, #0
   15800:	431a      	orrs	r2, r3
   15802:	e69f      	b.n	15544 <__aeabi_dadd+0x1c0>
   15804:	2e00      	cmp	r6, #0
   15806:	d130      	bne.n	1586a <__aeabi_dadd+0x4e6>
   15808:	0026      	movs	r6, r4
   1580a:	433e      	orrs	r6, r7
   1580c:	d067      	beq.n	158de <__aeabi_dadd+0x55a>
   1580e:	43db      	mvns	r3, r3
   15810:	469a      	mov	sl, r3
   15812:	2b00      	cmp	r3, #0
   15814:	d01c      	beq.n	15850 <__aeabi_dadd+0x4cc>
   15816:	4e61      	ldr	r6, [pc, #388]	; (1599c <__aeabi_dadd+0x618>)
   15818:	42b0      	cmp	r0, r6
   1581a:	d060      	beq.n	158de <__aeabi_dadd+0x55a>
   1581c:	4653      	mov	r3, sl
   1581e:	2b38      	cmp	r3, #56	; 0x38
   15820:	dd00      	ble.n	15824 <__aeabi_dadd+0x4a0>
   15822:	e096      	b.n	15952 <__aeabi_dadd+0x5ce>
   15824:	2b1f      	cmp	r3, #31
   15826:	dd00      	ble.n	1582a <__aeabi_dadd+0x4a6>
   15828:	e09f      	b.n	1596a <__aeabi_dadd+0x5e6>
   1582a:	2620      	movs	r6, #32
   1582c:	1af3      	subs	r3, r6, r3
   1582e:	0026      	movs	r6, r4
   15830:	409e      	lsls	r6, r3
   15832:	469c      	mov	ip, r3
   15834:	46b3      	mov	fp, r6
   15836:	4653      	mov	r3, sl
   15838:	003e      	movs	r6, r7
   1583a:	40de      	lsrs	r6, r3
   1583c:	0033      	movs	r3, r6
   1583e:	465e      	mov	r6, fp
   15840:	431e      	orrs	r6, r3
   15842:	4663      	mov	r3, ip
   15844:	409f      	lsls	r7, r3
   15846:	1e7b      	subs	r3, r7, #1
   15848:	419f      	sbcs	r7, r3
   1584a:	4653      	mov	r3, sl
   1584c:	40dc      	lsrs	r4, r3
   1584e:	4337      	orrs	r7, r6
   15850:	18bf      	adds	r7, r7, r2
   15852:	4297      	cmp	r7, r2
   15854:	4192      	sbcs	r2, r2
   15856:	1864      	adds	r4, r4, r1
   15858:	4252      	negs	r2, r2
   1585a:	18a4      	adds	r4, r4, r2
   1585c:	0006      	movs	r6, r0
   1585e:	e678      	b.n	15552 <__aeabi_dadd+0x1ce>
   15860:	4327      	orrs	r7, r4
   15862:	1e7c      	subs	r4, r7, #1
   15864:	41a7      	sbcs	r7, r4
   15866:	2400      	movs	r4, #0
   15868:	e737      	b.n	156da <__aeabi_dadd+0x356>
   1586a:	4e4c      	ldr	r6, [pc, #304]	; (1599c <__aeabi_dadd+0x618>)
   1586c:	42b0      	cmp	r0, r6
   1586e:	d036      	beq.n	158de <__aeabi_dadd+0x55a>
   15870:	2680      	movs	r6, #128	; 0x80
   15872:	425b      	negs	r3, r3
   15874:	0436      	lsls	r6, r6, #16
   15876:	469a      	mov	sl, r3
   15878:	4334      	orrs	r4, r6
   1587a:	e7cf      	b.n	1581c <__aeabi_dadd+0x498>
   1587c:	0018      	movs	r0, r3
   1587e:	4310      	orrs	r0, r2
   15880:	d100      	bne.n	15884 <__aeabi_dadd+0x500>
   15882:	e603      	b.n	1548c <__aeabi_dadd+0x108>
   15884:	1ab8      	subs	r0, r7, r2
   15886:	4684      	mov	ip, r0
   15888:	4567      	cmp	r7, ip
   1588a:	41ad      	sbcs	r5, r5
   1588c:	1ae0      	subs	r0, r4, r3
   1588e:	426d      	negs	r5, r5
   15890:	1b40      	subs	r0, r0, r5
   15892:	0205      	lsls	r5, r0, #8
   15894:	d400      	bmi.n	15898 <__aeabi_dadd+0x514>
   15896:	e62c      	b.n	154f2 <__aeabi_dadd+0x16e>
   15898:	1bd7      	subs	r7, r2, r7
   1589a:	42ba      	cmp	r2, r7
   1589c:	4192      	sbcs	r2, r2
   1589e:	1b1c      	subs	r4, r3, r4
   158a0:	4252      	negs	r2, r2
   158a2:	1aa4      	subs	r4, r4, r2
   158a4:	46d8      	mov	r8, fp
   158a6:	e5f1      	b.n	1548c <__aeabi_dadd+0x108>
   158a8:	0018      	movs	r0, r3
   158aa:	4310      	orrs	r0, r2
   158ac:	d100      	bne.n	158b0 <__aeabi_dadd+0x52c>
   158ae:	e763      	b.n	15778 <__aeabi_dadd+0x3f4>
   158b0:	08f8      	lsrs	r0, r7, #3
   158b2:	0767      	lsls	r7, r4, #29
   158b4:	4307      	orrs	r7, r0
   158b6:	2080      	movs	r0, #128	; 0x80
   158b8:	08e4      	lsrs	r4, r4, #3
   158ba:	0300      	lsls	r0, r0, #12
   158bc:	4204      	tst	r4, r0
   158be:	d008      	beq.n	158d2 <__aeabi_dadd+0x54e>
   158c0:	08dd      	lsrs	r5, r3, #3
   158c2:	4205      	tst	r5, r0
   158c4:	d105      	bne.n	158d2 <__aeabi_dadd+0x54e>
   158c6:	08d2      	lsrs	r2, r2, #3
   158c8:	0759      	lsls	r1, r3, #29
   158ca:	4311      	orrs	r1, r2
   158cc:	000f      	movs	r7, r1
   158ce:	002c      	movs	r4, r5
   158d0:	46d8      	mov	r8, fp
   158d2:	0f7b      	lsrs	r3, r7, #29
   158d4:	00e4      	lsls	r4, r4, #3
   158d6:	431c      	orrs	r4, r3
   158d8:	00ff      	lsls	r7, r7, #3
   158da:	4e30      	ldr	r6, [pc, #192]	; (1599c <__aeabi_dadd+0x618>)
   158dc:	e5d6      	b.n	1548c <__aeabi_dadd+0x108>
   158de:	000c      	movs	r4, r1
   158e0:	0017      	movs	r7, r2
   158e2:	0006      	movs	r6, r0
   158e4:	e5d2      	b.n	1548c <__aeabi_dadd+0x108>
   158e6:	2b00      	cmp	r3, #0
   158e8:	d038      	beq.n	1595c <__aeabi_dadd+0x5d8>
   158ea:	000b      	movs	r3, r1
   158ec:	4313      	orrs	r3, r2
   158ee:	d100      	bne.n	158f2 <__aeabi_dadd+0x56e>
   158f0:	e742      	b.n	15778 <__aeabi_dadd+0x3f4>
   158f2:	08f8      	lsrs	r0, r7, #3
   158f4:	0767      	lsls	r7, r4, #29
   158f6:	4307      	orrs	r7, r0
   158f8:	2080      	movs	r0, #128	; 0x80
   158fa:	08e4      	lsrs	r4, r4, #3
   158fc:	0300      	lsls	r0, r0, #12
   158fe:	4204      	tst	r4, r0
   15900:	d0e7      	beq.n	158d2 <__aeabi_dadd+0x54e>
   15902:	08cb      	lsrs	r3, r1, #3
   15904:	4203      	tst	r3, r0
   15906:	d1e4      	bne.n	158d2 <__aeabi_dadd+0x54e>
   15908:	08d2      	lsrs	r2, r2, #3
   1590a:	0749      	lsls	r1, r1, #29
   1590c:	4311      	orrs	r1, r2
   1590e:	000f      	movs	r7, r1
   15910:	001c      	movs	r4, r3
   15912:	e7de      	b.n	158d2 <__aeabi_dadd+0x54e>
   15914:	2700      	movs	r7, #0
   15916:	2400      	movs	r4, #0
   15918:	e5d5      	b.n	154c6 <__aeabi_dadd+0x142>
   1591a:	2100      	movs	r1, #0
   1591c:	e76b      	b.n	157f6 <__aeabi_dadd+0x472>
   1591e:	2500      	movs	r5, #0
   15920:	2700      	movs	r7, #0
   15922:	e5f3      	b.n	1550c <__aeabi_dadd+0x188>
   15924:	464e      	mov	r6, r9
   15926:	0025      	movs	r5, r4
   15928:	3e20      	subs	r6, #32
   1592a:	40f5      	lsrs	r5, r6
   1592c:	464b      	mov	r3, r9
   1592e:	002e      	movs	r6, r5
   15930:	2b20      	cmp	r3, #32
   15932:	d02d      	beq.n	15990 <__aeabi_dadd+0x60c>
   15934:	2540      	movs	r5, #64	; 0x40
   15936:	1aed      	subs	r5, r5, r3
   15938:	40ac      	lsls	r4, r5
   1593a:	4327      	orrs	r7, r4
   1593c:	1e7c      	subs	r4, r7, #1
   1593e:	41a7      	sbcs	r7, r4
   15940:	2400      	movs	r4, #0
   15942:	4337      	orrs	r7, r6
   15944:	e6c9      	b.n	156da <__aeabi_dadd+0x356>
   15946:	2480      	movs	r4, #128	; 0x80
   15948:	2500      	movs	r5, #0
   1594a:	0324      	lsls	r4, r4, #12
   1594c:	4e13      	ldr	r6, [pc, #76]	; (1599c <__aeabi_dadd+0x618>)
   1594e:	2700      	movs	r7, #0
   15950:	e5dc      	b.n	1550c <__aeabi_dadd+0x188>
   15952:	4327      	orrs	r7, r4
   15954:	1e7c      	subs	r4, r7, #1
   15956:	41a7      	sbcs	r7, r4
   15958:	2400      	movs	r4, #0
   1595a:	e779      	b.n	15850 <__aeabi_dadd+0x4cc>
   1595c:	000c      	movs	r4, r1
   1595e:	0017      	movs	r7, r2
   15960:	4e0e      	ldr	r6, [pc, #56]	; (1599c <__aeabi_dadd+0x618>)
   15962:	e593      	b.n	1548c <__aeabi_dadd+0x108>
   15964:	000c      	movs	r4, r1
   15966:	0017      	movs	r7, r2
   15968:	e590      	b.n	1548c <__aeabi_dadd+0x108>
   1596a:	4656      	mov	r6, sl
   1596c:	0023      	movs	r3, r4
   1596e:	3e20      	subs	r6, #32
   15970:	40f3      	lsrs	r3, r6
   15972:	4699      	mov	r9, r3
   15974:	4653      	mov	r3, sl
   15976:	2b20      	cmp	r3, #32
   15978:	d00e      	beq.n	15998 <__aeabi_dadd+0x614>
   1597a:	2340      	movs	r3, #64	; 0x40
   1597c:	4656      	mov	r6, sl
   1597e:	1b9b      	subs	r3, r3, r6
   15980:	409c      	lsls	r4, r3
   15982:	4327      	orrs	r7, r4
   15984:	1e7c      	subs	r4, r7, #1
   15986:	41a7      	sbcs	r7, r4
   15988:	464b      	mov	r3, r9
   1598a:	2400      	movs	r4, #0
   1598c:	431f      	orrs	r7, r3
   1598e:	e75f      	b.n	15850 <__aeabi_dadd+0x4cc>
   15990:	2400      	movs	r4, #0
   15992:	e7d2      	b.n	1593a <__aeabi_dadd+0x5b6>
   15994:	0017      	movs	r7, r2
   15996:	e5b2      	b.n	154fe <__aeabi_dadd+0x17a>
   15998:	2400      	movs	r4, #0
   1599a:	e7f2      	b.n	15982 <__aeabi_dadd+0x5fe>
   1599c:	000007ff 	.word	0x000007ff
   159a0:	ff7fffff 	.word	0xff7fffff

000159a4 <__aeabi_ddiv>:
   159a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   159a6:	4657      	mov	r7, sl
   159a8:	4645      	mov	r5, r8
   159aa:	46de      	mov	lr, fp
   159ac:	464e      	mov	r6, r9
   159ae:	b5e0      	push	{r5, r6, r7, lr}
   159b0:	004c      	lsls	r4, r1, #1
   159b2:	030e      	lsls	r6, r1, #12
   159b4:	b087      	sub	sp, #28
   159b6:	4683      	mov	fp, r0
   159b8:	4692      	mov	sl, r2
   159ba:	001d      	movs	r5, r3
   159bc:	4680      	mov	r8, r0
   159be:	0b36      	lsrs	r6, r6, #12
   159c0:	0d64      	lsrs	r4, r4, #21
   159c2:	0fcf      	lsrs	r7, r1, #31
   159c4:	2c00      	cmp	r4, #0
   159c6:	d04f      	beq.n	15a68 <__aeabi_ddiv+0xc4>
   159c8:	4b6f      	ldr	r3, [pc, #444]	; (15b88 <__aeabi_ddiv+0x1e4>)
   159ca:	429c      	cmp	r4, r3
   159cc:	d035      	beq.n	15a3a <__aeabi_ddiv+0x96>
   159ce:	2380      	movs	r3, #128	; 0x80
   159d0:	0f42      	lsrs	r2, r0, #29
   159d2:	041b      	lsls	r3, r3, #16
   159d4:	00f6      	lsls	r6, r6, #3
   159d6:	4313      	orrs	r3, r2
   159d8:	4333      	orrs	r3, r6
   159da:	4699      	mov	r9, r3
   159dc:	00c3      	lsls	r3, r0, #3
   159de:	4698      	mov	r8, r3
   159e0:	4b6a      	ldr	r3, [pc, #424]	; (15b8c <__aeabi_ddiv+0x1e8>)
   159e2:	2600      	movs	r6, #0
   159e4:	469c      	mov	ip, r3
   159e6:	2300      	movs	r3, #0
   159e8:	4464      	add	r4, ip
   159ea:	9303      	str	r3, [sp, #12]
   159ec:	032b      	lsls	r3, r5, #12
   159ee:	0b1b      	lsrs	r3, r3, #12
   159f0:	469b      	mov	fp, r3
   159f2:	006b      	lsls	r3, r5, #1
   159f4:	0fed      	lsrs	r5, r5, #31
   159f6:	4650      	mov	r0, sl
   159f8:	0d5b      	lsrs	r3, r3, #21
   159fa:	9501      	str	r5, [sp, #4]
   159fc:	d05e      	beq.n	15abc <__aeabi_ddiv+0x118>
   159fe:	4a62      	ldr	r2, [pc, #392]	; (15b88 <__aeabi_ddiv+0x1e4>)
   15a00:	4293      	cmp	r3, r2
   15a02:	d053      	beq.n	15aac <__aeabi_ddiv+0x108>
   15a04:	465a      	mov	r2, fp
   15a06:	00d1      	lsls	r1, r2, #3
   15a08:	2280      	movs	r2, #128	; 0x80
   15a0a:	0f40      	lsrs	r0, r0, #29
   15a0c:	0412      	lsls	r2, r2, #16
   15a0e:	4302      	orrs	r2, r0
   15a10:	430a      	orrs	r2, r1
   15a12:	4693      	mov	fp, r2
   15a14:	4652      	mov	r2, sl
   15a16:	00d1      	lsls	r1, r2, #3
   15a18:	4a5c      	ldr	r2, [pc, #368]	; (15b8c <__aeabi_ddiv+0x1e8>)
   15a1a:	4694      	mov	ip, r2
   15a1c:	2200      	movs	r2, #0
   15a1e:	4463      	add	r3, ip
   15a20:	0038      	movs	r0, r7
   15a22:	4068      	eors	r0, r5
   15a24:	4684      	mov	ip, r0
   15a26:	9002      	str	r0, [sp, #8]
   15a28:	1ae4      	subs	r4, r4, r3
   15a2a:	4316      	orrs	r6, r2
   15a2c:	2e0f      	cmp	r6, #15
   15a2e:	d900      	bls.n	15a32 <__aeabi_ddiv+0x8e>
   15a30:	e0b4      	b.n	15b9c <__aeabi_ddiv+0x1f8>
   15a32:	4b57      	ldr	r3, [pc, #348]	; (15b90 <__aeabi_ddiv+0x1ec>)
   15a34:	00b6      	lsls	r6, r6, #2
   15a36:	599b      	ldr	r3, [r3, r6]
   15a38:	469f      	mov	pc, r3
   15a3a:	0003      	movs	r3, r0
   15a3c:	4333      	orrs	r3, r6
   15a3e:	4699      	mov	r9, r3
   15a40:	d16c      	bne.n	15b1c <__aeabi_ddiv+0x178>
   15a42:	2300      	movs	r3, #0
   15a44:	4698      	mov	r8, r3
   15a46:	3302      	adds	r3, #2
   15a48:	2608      	movs	r6, #8
   15a4a:	9303      	str	r3, [sp, #12]
   15a4c:	e7ce      	b.n	159ec <__aeabi_ddiv+0x48>
   15a4e:	46cb      	mov	fp, r9
   15a50:	4641      	mov	r1, r8
   15a52:	9a03      	ldr	r2, [sp, #12]
   15a54:	9701      	str	r7, [sp, #4]
   15a56:	2a02      	cmp	r2, #2
   15a58:	d165      	bne.n	15b26 <__aeabi_ddiv+0x182>
   15a5a:	9b01      	ldr	r3, [sp, #4]
   15a5c:	4c4a      	ldr	r4, [pc, #296]	; (15b88 <__aeabi_ddiv+0x1e4>)
   15a5e:	469c      	mov	ip, r3
   15a60:	2300      	movs	r3, #0
   15a62:	2200      	movs	r2, #0
   15a64:	4698      	mov	r8, r3
   15a66:	e06b      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15a68:	0003      	movs	r3, r0
   15a6a:	4333      	orrs	r3, r6
   15a6c:	4699      	mov	r9, r3
   15a6e:	d04e      	beq.n	15b0e <__aeabi_ddiv+0x16a>
   15a70:	2e00      	cmp	r6, #0
   15a72:	d100      	bne.n	15a76 <__aeabi_ddiv+0xd2>
   15a74:	e1bc      	b.n	15df0 <__aeabi_ddiv+0x44c>
   15a76:	0030      	movs	r0, r6
   15a78:	f001 fae8 	bl	1704c <__clzsi2>
   15a7c:	0003      	movs	r3, r0
   15a7e:	3b0b      	subs	r3, #11
   15a80:	2b1c      	cmp	r3, #28
   15a82:	dd00      	ble.n	15a86 <__aeabi_ddiv+0xe2>
   15a84:	e1ac      	b.n	15de0 <__aeabi_ddiv+0x43c>
   15a86:	221d      	movs	r2, #29
   15a88:	1ad3      	subs	r3, r2, r3
   15a8a:	465a      	mov	r2, fp
   15a8c:	0001      	movs	r1, r0
   15a8e:	40da      	lsrs	r2, r3
   15a90:	3908      	subs	r1, #8
   15a92:	408e      	lsls	r6, r1
   15a94:	0013      	movs	r3, r2
   15a96:	4333      	orrs	r3, r6
   15a98:	4699      	mov	r9, r3
   15a9a:	465b      	mov	r3, fp
   15a9c:	408b      	lsls	r3, r1
   15a9e:	4698      	mov	r8, r3
   15aa0:	2300      	movs	r3, #0
   15aa2:	4c3c      	ldr	r4, [pc, #240]	; (15b94 <__aeabi_ddiv+0x1f0>)
   15aa4:	2600      	movs	r6, #0
   15aa6:	1a24      	subs	r4, r4, r0
   15aa8:	9303      	str	r3, [sp, #12]
   15aaa:	e79f      	b.n	159ec <__aeabi_ddiv+0x48>
   15aac:	4651      	mov	r1, sl
   15aae:	465a      	mov	r2, fp
   15ab0:	4311      	orrs	r1, r2
   15ab2:	d129      	bne.n	15b08 <__aeabi_ddiv+0x164>
   15ab4:	2200      	movs	r2, #0
   15ab6:	4693      	mov	fp, r2
   15ab8:	3202      	adds	r2, #2
   15aba:	e7b1      	b.n	15a20 <__aeabi_ddiv+0x7c>
   15abc:	4659      	mov	r1, fp
   15abe:	4301      	orrs	r1, r0
   15ac0:	d01e      	beq.n	15b00 <__aeabi_ddiv+0x15c>
   15ac2:	465b      	mov	r3, fp
   15ac4:	2b00      	cmp	r3, #0
   15ac6:	d100      	bne.n	15aca <__aeabi_ddiv+0x126>
   15ac8:	e19e      	b.n	15e08 <__aeabi_ddiv+0x464>
   15aca:	4658      	mov	r0, fp
   15acc:	f001 fabe 	bl	1704c <__clzsi2>
   15ad0:	0003      	movs	r3, r0
   15ad2:	3b0b      	subs	r3, #11
   15ad4:	2b1c      	cmp	r3, #28
   15ad6:	dd00      	ble.n	15ada <__aeabi_ddiv+0x136>
   15ad8:	e18f      	b.n	15dfa <__aeabi_ddiv+0x456>
   15ada:	0002      	movs	r2, r0
   15adc:	4659      	mov	r1, fp
   15ade:	3a08      	subs	r2, #8
   15ae0:	4091      	lsls	r1, r2
   15ae2:	468b      	mov	fp, r1
   15ae4:	211d      	movs	r1, #29
   15ae6:	1acb      	subs	r3, r1, r3
   15ae8:	4651      	mov	r1, sl
   15aea:	40d9      	lsrs	r1, r3
   15aec:	000b      	movs	r3, r1
   15aee:	4659      	mov	r1, fp
   15af0:	430b      	orrs	r3, r1
   15af2:	4651      	mov	r1, sl
   15af4:	469b      	mov	fp, r3
   15af6:	4091      	lsls	r1, r2
   15af8:	4b26      	ldr	r3, [pc, #152]	; (15b94 <__aeabi_ddiv+0x1f0>)
   15afa:	2200      	movs	r2, #0
   15afc:	1a1b      	subs	r3, r3, r0
   15afe:	e78f      	b.n	15a20 <__aeabi_ddiv+0x7c>
   15b00:	2300      	movs	r3, #0
   15b02:	2201      	movs	r2, #1
   15b04:	469b      	mov	fp, r3
   15b06:	e78b      	b.n	15a20 <__aeabi_ddiv+0x7c>
   15b08:	4651      	mov	r1, sl
   15b0a:	2203      	movs	r2, #3
   15b0c:	e788      	b.n	15a20 <__aeabi_ddiv+0x7c>
   15b0e:	2300      	movs	r3, #0
   15b10:	4698      	mov	r8, r3
   15b12:	3301      	adds	r3, #1
   15b14:	2604      	movs	r6, #4
   15b16:	2400      	movs	r4, #0
   15b18:	9303      	str	r3, [sp, #12]
   15b1a:	e767      	b.n	159ec <__aeabi_ddiv+0x48>
   15b1c:	2303      	movs	r3, #3
   15b1e:	46b1      	mov	r9, r6
   15b20:	9303      	str	r3, [sp, #12]
   15b22:	260c      	movs	r6, #12
   15b24:	e762      	b.n	159ec <__aeabi_ddiv+0x48>
   15b26:	2a03      	cmp	r2, #3
   15b28:	d100      	bne.n	15b2c <__aeabi_ddiv+0x188>
   15b2a:	e25c      	b.n	15fe6 <__aeabi_ddiv+0x642>
   15b2c:	9b01      	ldr	r3, [sp, #4]
   15b2e:	2a01      	cmp	r2, #1
   15b30:	d000      	beq.n	15b34 <__aeabi_ddiv+0x190>
   15b32:	e1e4      	b.n	15efe <__aeabi_ddiv+0x55a>
   15b34:	4013      	ands	r3, r2
   15b36:	469c      	mov	ip, r3
   15b38:	2300      	movs	r3, #0
   15b3a:	2400      	movs	r4, #0
   15b3c:	2200      	movs	r2, #0
   15b3e:	4698      	mov	r8, r3
   15b40:	2100      	movs	r1, #0
   15b42:	0312      	lsls	r2, r2, #12
   15b44:	0b13      	lsrs	r3, r2, #12
   15b46:	0d0a      	lsrs	r2, r1, #20
   15b48:	0512      	lsls	r2, r2, #20
   15b4a:	431a      	orrs	r2, r3
   15b4c:	0523      	lsls	r3, r4, #20
   15b4e:	4c12      	ldr	r4, [pc, #72]	; (15b98 <__aeabi_ddiv+0x1f4>)
   15b50:	4640      	mov	r0, r8
   15b52:	4022      	ands	r2, r4
   15b54:	4313      	orrs	r3, r2
   15b56:	4662      	mov	r2, ip
   15b58:	005b      	lsls	r3, r3, #1
   15b5a:	07d2      	lsls	r2, r2, #31
   15b5c:	085b      	lsrs	r3, r3, #1
   15b5e:	4313      	orrs	r3, r2
   15b60:	0019      	movs	r1, r3
   15b62:	b007      	add	sp, #28
   15b64:	bc3c      	pop	{r2, r3, r4, r5}
   15b66:	4690      	mov	r8, r2
   15b68:	4699      	mov	r9, r3
   15b6a:	46a2      	mov	sl, r4
   15b6c:	46ab      	mov	fp, r5
   15b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b70:	2300      	movs	r3, #0
   15b72:	2280      	movs	r2, #128	; 0x80
   15b74:	469c      	mov	ip, r3
   15b76:	0312      	lsls	r2, r2, #12
   15b78:	4698      	mov	r8, r3
   15b7a:	4c03      	ldr	r4, [pc, #12]	; (15b88 <__aeabi_ddiv+0x1e4>)
   15b7c:	e7e0      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15b7e:	2300      	movs	r3, #0
   15b80:	4c01      	ldr	r4, [pc, #4]	; (15b88 <__aeabi_ddiv+0x1e4>)
   15b82:	2200      	movs	r2, #0
   15b84:	4698      	mov	r8, r3
   15b86:	e7db      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15b88:	000007ff 	.word	0x000007ff
   15b8c:	fffffc01 	.word	0xfffffc01
   15b90:	00017998 	.word	0x00017998
   15b94:	fffffc0d 	.word	0xfffffc0d
   15b98:	800fffff 	.word	0x800fffff
   15b9c:	45d9      	cmp	r9, fp
   15b9e:	d900      	bls.n	15ba2 <__aeabi_ddiv+0x1fe>
   15ba0:	e139      	b.n	15e16 <__aeabi_ddiv+0x472>
   15ba2:	d100      	bne.n	15ba6 <__aeabi_ddiv+0x202>
   15ba4:	e134      	b.n	15e10 <__aeabi_ddiv+0x46c>
   15ba6:	2300      	movs	r3, #0
   15ba8:	4646      	mov	r6, r8
   15baa:	464d      	mov	r5, r9
   15bac:	469a      	mov	sl, r3
   15bae:	3c01      	subs	r4, #1
   15bb0:	465b      	mov	r3, fp
   15bb2:	0e0a      	lsrs	r2, r1, #24
   15bb4:	021b      	lsls	r3, r3, #8
   15bb6:	431a      	orrs	r2, r3
   15bb8:	020b      	lsls	r3, r1, #8
   15bba:	0c17      	lsrs	r7, r2, #16
   15bbc:	9303      	str	r3, [sp, #12]
   15bbe:	0413      	lsls	r3, r2, #16
   15bc0:	0c1b      	lsrs	r3, r3, #16
   15bc2:	0039      	movs	r1, r7
   15bc4:	0028      	movs	r0, r5
   15bc6:	4690      	mov	r8, r2
   15bc8:	9301      	str	r3, [sp, #4]
   15bca:	f7fe fa99 	bl	14100 <__udivsi3>
   15bce:	0002      	movs	r2, r0
   15bd0:	9b01      	ldr	r3, [sp, #4]
   15bd2:	4683      	mov	fp, r0
   15bd4:	435a      	muls	r2, r3
   15bd6:	0028      	movs	r0, r5
   15bd8:	0039      	movs	r1, r7
   15bda:	4691      	mov	r9, r2
   15bdc:	f7fe fb16 	bl	1420c <__aeabi_uidivmod>
   15be0:	0c35      	lsrs	r5, r6, #16
   15be2:	0409      	lsls	r1, r1, #16
   15be4:	430d      	orrs	r5, r1
   15be6:	45a9      	cmp	r9, r5
   15be8:	d90d      	bls.n	15c06 <__aeabi_ddiv+0x262>
   15bea:	465b      	mov	r3, fp
   15bec:	4445      	add	r5, r8
   15bee:	3b01      	subs	r3, #1
   15bf0:	45a8      	cmp	r8, r5
   15bf2:	d900      	bls.n	15bf6 <__aeabi_ddiv+0x252>
   15bf4:	e13a      	b.n	15e6c <__aeabi_ddiv+0x4c8>
   15bf6:	45a9      	cmp	r9, r5
   15bf8:	d800      	bhi.n	15bfc <__aeabi_ddiv+0x258>
   15bfa:	e137      	b.n	15e6c <__aeabi_ddiv+0x4c8>
   15bfc:	2302      	movs	r3, #2
   15bfe:	425b      	negs	r3, r3
   15c00:	469c      	mov	ip, r3
   15c02:	4445      	add	r5, r8
   15c04:	44e3      	add	fp, ip
   15c06:	464b      	mov	r3, r9
   15c08:	1aeb      	subs	r3, r5, r3
   15c0a:	0039      	movs	r1, r7
   15c0c:	0018      	movs	r0, r3
   15c0e:	9304      	str	r3, [sp, #16]
   15c10:	f7fe fa76 	bl	14100 <__udivsi3>
   15c14:	9b01      	ldr	r3, [sp, #4]
   15c16:	0005      	movs	r5, r0
   15c18:	4343      	muls	r3, r0
   15c1a:	0039      	movs	r1, r7
   15c1c:	9804      	ldr	r0, [sp, #16]
   15c1e:	4699      	mov	r9, r3
   15c20:	f7fe faf4 	bl	1420c <__aeabi_uidivmod>
   15c24:	0433      	lsls	r3, r6, #16
   15c26:	0409      	lsls	r1, r1, #16
   15c28:	0c1b      	lsrs	r3, r3, #16
   15c2a:	430b      	orrs	r3, r1
   15c2c:	4599      	cmp	r9, r3
   15c2e:	d909      	bls.n	15c44 <__aeabi_ddiv+0x2a0>
   15c30:	4443      	add	r3, r8
   15c32:	1e6a      	subs	r2, r5, #1
   15c34:	4598      	cmp	r8, r3
   15c36:	d900      	bls.n	15c3a <__aeabi_ddiv+0x296>
   15c38:	e11a      	b.n	15e70 <__aeabi_ddiv+0x4cc>
   15c3a:	4599      	cmp	r9, r3
   15c3c:	d800      	bhi.n	15c40 <__aeabi_ddiv+0x29c>
   15c3e:	e117      	b.n	15e70 <__aeabi_ddiv+0x4cc>
   15c40:	3d02      	subs	r5, #2
   15c42:	4443      	add	r3, r8
   15c44:	464a      	mov	r2, r9
   15c46:	1a9b      	subs	r3, r3, r2
   15c48:	465a      	mov	r2, fp
   15c4a:	0412      	lsls	r2, r2, #16
   15c4c:	432a      	orrs	r2, r5
   15c4e:	9903      	ldr	r1, [sp, #12]
   15c50:	4693      	mov	fp, r2
   15c52:	0c10      	lsrs	r0, r2, #16
   15c54:	0c0a      	lsrs	r2, r1, #16
   15c56:	4691      	mov	r9, r2
   15c58:	0409      	lsls	r1, r1, #16
   15c5a:	465a      	mov	r2, fp
   15c5c:	0c09      	lsrs	r1, r1, #16
   15c5e:	464e      	mov	r6, r9
   15c60:	000d      	movs	r5, r1
   15c62:	0412      	lsls	r2, r2, #16
   15c64:	0c12      	lsrs	r2, r2, #16
   15c66:	4345      	muls	r5, r0
   15c68:	9105      	str	r1, [sp, #20]
   15c6a:	4351      	muls	r1, r2
   15c6c:	4372      	muls	r2, r6
   15c6e:	4370      	muls	r0, r6
   15c70:	1952      	adds	r2, r2, r5
   15c72:	0c0e      	lsrs	r6, r1, #16
   15c74:	18b2      	adds	r2, r6, r2
   15c76:	4295      	cmp	r5, r2
   15c78:	d903      	bls.n	15c82 <__aeabi_ddiv+0x2de>
   15c7a:	2580      	movs	r5, #128	; 0x80
   15c7c:	026d      	lsls	r5, r5, #9
   15c7e:	46ac      	mov	ip, r5
   15c80:	4460      	add	r0, ip
   15c82:	0c15      	lsrs	r5, r2, #16
   15c84:	0409      	lsls	r1, r1, #16
   15c86:	0412      	lsls	r2, r2, #16
   15c88:	0c09      	lsrs	r1, r1, #16
   15c8a:	1828      	adds	r0, r5, r0
   15c8c:	1852      	adds	r2, r2, r1
   15c8e:	4283      	cmp	r3, r0
   15c90:	d200      	bcs.n	15c94 <__aeabi_ddiv+0x2f0>
   15c92:	e0ce      	b.n	15e32 <__aeabi_ddiv+0x48e>
   15c94:	d100      	bne.n	15c98 <__aeabi_ddiv+0x2f4>
   15c96:	e0c8      	b.n	15e2a <__aeabi_ddiv+0x486>
   15c98:	1a1d      	subs	r5, r3, r0
   15c9a:	4653      	mov	r3, sl
   15c9c:	1a9e      	subs	r6, r3, r2
   15c9e:	45b2      	cmp	sl, r6
   15ca0:	4192      	sbcs	r2, r2
   15ca2:	4252      	negs	r2, r2
   15ca4:	1aab      	subs	r3, r5, r2
   15ca6:	469a      	mov	sl, r3
   15ca8:	4598      	cmp	r8, r3
   15caa:	d100      	bne.n	15cae <__aeabi_ddiv+0x30a>
   15cac:	e117      	b.n	15ede <__aeabi_ddiv+0x53a>
   15cae:	0039      	movs	r1, r7
   15cb0:	0018      	movs	r0, r3
   15cb2:	f7fe fa25 	bl	14100 <__udivsi3>
   15cb6:	9b01      	ldr	r3, [sp, #4]
   15cb8:	0005      	movs	r5, r0
   15cba:	4343      	muls	r3, r0
   15cbc:	0039      	movs	r1, r7
   15cbe:	4650      	mov	r0, sl
   15cc0:	9304      	str	r3, [sp, #16]
   15cc2:	f7fe faa3 	bl	1420c <__aeabi_uidivmod>
   15cc6:	9804      	ldr	r0, [sp, #16]
   15cc8:	040b      	lsls	r3, r1, #16
   15cca:	0c31      	lsrs	r1, r6, #16
   15ccc:	4319      	orrs	r1, r3
   15cce:	4288      	cmp	r0, r1
   15cd0:	d909      	bls.n	15ce6 <__aeabi_ddiv+0x342>
   15cd2:	4441      	add	r1, r8
   15cd4:	1e6b      	subs	r3, r5, #1
   15cd6:	4588      	cmp	r8, r1
   15cd8:	d900      	bls.n	15cdc <__aeabi_ddiv+0x338>
   15cda:	e107      	b.n	15eec <__aeabi_ddiv+0x548>
   15cdc:	4288      	cmp	r0, r1
   15cde:	d800      	bhi.n	15ce2 <__aeabi_ddiv+0x33e>
   15ce0:	e104      	b.n	15eec <__aeabi_ddiv+0x548>
   15ce2:	3d02      	subs	r5, #2
   15ce4:	4441      	add	r1, r8
   15ce6:	9b04      	ldr	r3, [sp, #16]
   15ce8:	1acb      	subs	r3, r1, r3
   15cea:	0018      	movs	r0, r3
   15cec:	0039      	movs	r1, r7
   15cee:	9304      	str	r3, [sp, #16]
   15cf0:	f7fe fa06 	bl	14100 <__udivsi3>
   15cf4:	9b01      	ldr	r3, [sp, #4]
   15cf6:	4682      	mov	sl, r0
   15cf8:	4343      	muls	r3, r0
   15cfa:	0039      	movs	r1, r7
   15cfc:	9804      	ldr	r0, [sp, #16]
   15cfe:	9301      	str	r3, [sp, #4]
   15d00:	f7fe fa84 	bl	1420c <__aeabi_uidivmod>
   15d04:	9801      	ldr	r0, [sp, #4]
   15d06:	040b      	lsls	r3, r1, #16
   15d08:	0431      	lsls	r1, r6, #16
   15d0a:	0c09      	lsrs	r1, r1, #16
   15d0c:	4319      	orrs	r1, r3
   15d0e:	4288      	cmp	r0, r1
   15d10:	d90d      	bls.n	15d2e <__aeabi_ddiv+0x38a>
   15d12:	4653      	mov	r3, sl
   15d14:	4441      	add	r1, r8
   15d16:	3b01      	subs	r3, #1
   15d18:	4588      	cmp	r8, r1
   15d1a:	d900      	bls.n	15d1e <__aeabi_ddiv+0x37a>
   15d1c:	e0e8      	b.n	15ef0 <__aeabi_ddiv+0x54c>
   15d1e:	4288      	cmp	r0, r1
   15d20:	d800      	bhi.n	15d24 <__aeabi_ddiv+0x380>
   15d22:	e0e5      	b.n	15ef0 <__aeabi_ddiv+0x54c>
   15d24:	2302      	movs	r3, #2
   15d26:	425b      	negs	r3, r3
   15d28:	469c      	mov	ip, r3
   15d2a:	4441      	add	r1, r8
   15d2c:	44e2      	add	sl, ip
   15d2e:	9b01      	ldr	r3, [sp, #4]
   15d30:	042d      	lsls	r5, r5, #16
   15d32:	1ace      	subs	r6, r1, r3
   15d34:	4651      	mov	r1, sl
   15d36:	4329      	orrs	r1, r5
   15d38:	9d05      	ldr	r5, [sp, #20]
   15d3a:	464f      	mov	r7, r9
   15d3c:	002a      	movs	r2, r5
   15d3e:	040b      	lsls	r3, r1, #16
   15d40:	0c08      	lsrs	r0, r1, #16
   15d42:	0c1b      	lsrs	r3, r3, #16
   15d44:	435a      	muls	r2, r3
   15d46:	4345      	muls	r5, r0
   15d48:	437b      	muls	r3, r7
   15d4a:	4378      	muls	r0, r7
   15d4c:	195b      	adds	r3, r3, r5
   15d4e:	0c17      	lsrs	r7, r2, #16
   15d50:	18fb      	adds	r3, r7, r3
   15d52:	429d      	cmp	r5, r3
   15d54:	d903      	bls.n	15d5e <__aeabi_ddiv+0x3ba>
   15d56:	2580      	movs	r5, #128	; 0x80
   15d58:	026d      	lsls	r5, r5, #9
   15d5a:	46ac      	mov	ip, r5
   15d5c:	4460      	add	r0, ip
   15d5e:	0c1d      	lsrs	r5, r3, #16
   15d60:	0412      	lsls	r2, r2, #16
   15d62:	041b      	lsls	r3, r3, #16
   15d64:	0c12      	lsrs	r2, r2, #16
   15d66:	1828      	adds	r0, r5, r0
   15d68:	189b      	adds	r3, r3, r2
   15d6a:	4286      	cmp	r6, r0
   15d6c:	d200      	bcs.n	15d70 <__aeabi_ddiv+0x3cc>
   15d6e:	e093      	b.n	15e98 <__aeabi_ddiv+0x4f4>
   15d70:	d100      	bne.n	15d74 <__aeabi_ddiv+0x3d0>
   15d72:	e08e      	b.n	15e92 <__aeabi_ddiv+0x4ee>
   15d74:	2301      	movs	r3, #1
   15d76:	4319      	orrs	r1, r3
   15d78:	4ba0      	ldr	r3, [pc, #640]	; (15ffc <__aeabi_ddiv+0x658>)
   15d7a:	18e3      	adds	r3, r4, r3
   15d7c:	2b00      	cmp	r3, #0
   15d7e:	dc00      	bgt.n	15d82 <__aeabi_ddiv+0x3de>
   15d80:	e099      	b.n	15eb6 <__aeabi_ddiv+0x512>
   15d82:	074a      	lsls	r2, r1, #29
   15d84:	d000      	beq.n	15d88 <__aeabi_ddiv+0x3e4>
   15d86:	e09e      	b.n	15ec6 <__aeabi_ddiv+0x522>
   15d88:	465a      	mov	r2, fp
   15d8a:	01d2      	lsls	r2, r2, #7
   15d8c:	d506      	bpl.n	15d9c <__aeabi_ddiv+0x3f8>
   15d8e:	465a      	mov	r2, fp
   15d90:	4b9b      	ldr	r3, [pc, #620]	; (16000 <__aeabi_ddiv+0x65c>)
   15d92:	401a      	ands	r2, r3
   15d94:	2380      	movs	r3, #128	; 0x80
   15d96:	4693      	mov	fp, r2
   15d98:	00db      	lsls	r3, r3, #3
   15d9a:	18e3      	adds	r3, r4, r3
   15d9c:	4a99      	ldr	r2, [pc, #612]	; (16004 <__aeabi_ddiv+0x660>)
   15d9e:	4293      	cmp	r3, r2
   15da0:	dd68      	ble.n	15e74 <__aeabi_ddiv+0x4d0>
   15da2:	2301      	movs	r3, #1
   15da4:	9a02      	ldr	r2, [sp, #8]
   15da6:	4c98      	ldr	r4, [pc, #608]	; (16008 <__aeabi_ddiv+0x664>)
   15da8:	401a      	ands	r2, r3
   15daa:	2300      	movs	r3, #0
   15dac:	4694      	mov	ip, r2
   15dae:	4698      	mov	r8, r3
   15db0:	2200      	movs	r2, #0
   15db2:	e6c5      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15db4:	2280      	movs	r2, #128	; 0x80
   15db6:	464b      	mov	r3, r9
   15db8:	0312      	lsls	r2, r2, #12
   15dba:	4213      	tst	r3, r2
   15dbc:	d00a      	beq.n	15dd4 <__aeabi_ddiv+0x430>
   15dbe:	465b      	mov	r3, fp
   15dc0:	4213      	tst	r3, r2
   15dc2:	d106      	bne.n	15dd2 <__aeabi_ddiv+0x42e>
   15dc4:	431a      	orrs	r2, r3
   15dc6:	0312      	lsls	r2, r2, #12
   15dc8:	0b12      	lsrs	r2, r2, #12
   15dca:	46ac      	mov	ip, r5
   15dcc:	4688      	mov	r8, r1
   15dce:	4c8e      	ldr	r4, [pc, #568]	; (16008 <__aeabi_ddiv+0x664>)
   15dd0:	e6b6      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15dd2:	464b      	mov	r3, r9
   15dd4:	431a      	orrs	r2, r3
   15dd6:	0312      	lsls	r2, r2, #12
   15dd8:	0b12      	lsrs	r2, r2, #12
   15dda:	46bc      	mov	ip, r7
   15ddc:	4c8a      	ldr	r4, [pc, #552]	; (16008 <__aeabi_ddiv+0x664>)
   15dde:	e6af      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15de0:	0003      	movs	r3, r0
   15de2:	465a      	mov	r2, fp
   15de4:	3b28      	subs	r3, #40	; 0x28
   15de6:	409a      	lsls	r2, r3
   15de8:	2300      	movs	r3, #0
   15dea:	4691      	mov	r9, r2
   15dec:	4698      	mov	r8, r3
   15dee:	e657      	b.n	15aa0 <__aeabi_ddiv+0xfc>
   15df0:	4658      	mov	r0, fp
   15df2:	f001 f92b 	bl	1704c <__clzsi2>
   15df6:	3020      	adds	r0, #32
   15df8:	e640      	b.n	15a7c <__aeabi_ddiv+0xd8>
   15dfa:	0003      	movs	r3, r0
   15dfc:	4652      	mov	r2, sl
   15dfe:	3b28      	subs	r3, #40	; 0x28
   15e00:	409a      	lsls	r2, r3
   15e02:	2100      	movs	r1, #0
   15e04:	4693      	mov	fp, r2
   15e06:	e677      	b.n	15af8 <__aeabi_ddiv+0x154>
   15e08:	f001 f920 	bl	1704c <__clzsi2>
   15e0c:	3020      	adds	r0, #32
   15e0e:	e65f      	b.n	15ad0 <__aeabi_ddiv+0x12c>
   15e10:	4588      	cmp	r8, r1
   15e12:	d200      	bcs.n	15e16 <__aeabi_ddiv+0x472>
   15e14:	e6c7      	b.n	15ba6 <__aeabi_ddiv+0x202>
   15e16:	464b      	mov	r3, r9
   15e18:	07de      	lsls	r6, r3, #31
   15e1a:	085d      	lsrs	r5, r3, #1
   15e1c:	4643      	mov	r3, r8
   15e1e:	085b      	lsrs	r3, r3, #1
   15e20:	431e      	orrs	r6, r3
   15e22:	4643      	mov	r3, r8
   15e24:	07db      	lsls	r3, r3, #31
   15e26:	469a      	mov	sl, r3
   15e28:	e6c2      	b.n	15bb0 <__aeabi_ddiv+0x20c>
   15e2a:	2500      	movs	r5, #0
   15e2c:	4592      	cmp	sl, r2
   15e2e:	d300      	bcc.n	15e32 <__aeabi_ddiv+0x48e>
   15e30:	e733      	b.n	15c9a <__aeabi_ddiv+0x2f6>
   15e32:	9e03      	ldr	r6, [sp, #12]
   15e34:	4659      	mov	r1, fp
   15e36:	46b4      	mov	ip, r6
   15e38:	44e2      	add	sl, ip
   15e3a:	45b2      	cmp	sl, r6
   15e3c:	41ad      	sbcs	r5, r5
   15e3e:	426d      	negs	r5, r5
   15e40:	4445      	add	r5, r8
   15e42:	18eb      	adds	r3, r5, r3
   15e44:	3901      	subs	r1, #1
   15e46:	4598      	cmp	r8, r3
   15e48:	d207      	bcs.n	15e5a <__aeabi_ddiv+0x4b6>
   15e4a:	4298      	cmp	r0, r3
   15e4c:	d900      	bls.n	15e50 <__aeabi_ddiv+0x4ac>
   15e4e:	e07f      	b.n	15f50 <__aeabi_ddiv+0x5ac>
   15e50:	d100      	bne.n	15e54 <__aeabi_ddiv+0x4b0>
   15e52:	e0bc      	b.n	15fce <__aeabi_ddiv+0x62a>
   15e54:	1a1d      	subs	r5, r3, r0
   15e56:	468b      	mov	fp, r1
   15e58:	e71f      	b.n	15c9a <__aeabi_ddiv+0x2f6>
   15e5a:	4598      	cmp	r8, r3
   15e5c:	d1fa      	bne.n	15e54 <__aeabi_ddiv+0x4b0>
   15e5e:	9d03      	ldr	r5, [sp, #12]
   15e60:	4555      	cmp	r5, sl
   15e62:	d9f2      	bls.n	15e4a <__aeabi_ddiv+0x4a6>
   15e64:	4643      	mov	r3, r8
   15e66:	468b      	mov	fp, r1
   15e68:	1a1d      	subs	r5, r3, r0
   15e6a:	e716      	b.n	15c9a <__aeabi_ddiv+0x2f6>
   15e6c:	469b      	mov	fp, r3
   15e6e:	e6ca      	b.n	15c06 <__aeabi_ddiv+0x262>
   15e70:	0015      	movs	r5, r2
   15e72:	e6e7      	b.n	15c44 <__aeabi_ddiv+0x2a0>
   15e74:	465a      	mov	r2, fp
   15e76:	08c9      	lsrs	r1, r1, #3
   15e78:	0752      	lsls	r2, r2, #29
   15e7a:	430a      	orrs	r2, r1
   15e7c:	055b      	lsls	r3, r3, #21
   15e7e:	4690      	mov	r8, r2
   15e80:	0d5c      	lsrs	r4, r3, #21
   15e82:	465a      	mov	r2, fp
   15e84:	2301      	movs	r3, #1
   15e86:	9902      	ldr	r1, [sp, #8]
   15e88:	0252      	lsls	r2, r2, #9
   15e8a:	4019      	ands	r1, r3
   15e8c:	0b12      	lsrs	r2, r2, #12
   15e8e:	468c      	mov	ip, r1
   15e90:	e656      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15e92:	2b00      	cmp	r3, #0
   15e94:	d100      	bne.n	15e98 <__aeabi_ddiv+0x4f4>
   15e96:	e76f      	b.n	15d78 <__aeabi_ddiv+0x3d4>
   15e98:	4446      	add	r6, r8
   15e9a:	1e4a      	subs	r2, r1, #1
   15e9c:	45b0      	cmp	r8, r6
   15e9e:	d929      	bls.n	15ef4 <__aeabi_ddiv+0x550>
   15ea0:	0011      	movs	r1, r2
   15ea2:	4286      	cmp	r6, r0
   15ea4:	d000      	beq.n	15ea8 <__aeabi_ddiv+0x504>
   15ea6:	e765      	b.n	15d74 <__aeabi_ddiv+0x3d0>
   15ea8:	9a03      	ldr	r2, [sp, #12]
   15eaa:	4293      	cmp	r3, r2
   15eac:	d000      	beq.n	15eb0 <__aeabi_ddiv+0x50c>
   15eae:	e761      	b.n	15d74 <__aeabi_ddiv+0x3d0>
   15eb0:	e762      	b.n	15d78 <__aeabi_ddiv+0x3d4>
   15eb2:	2101      	movs	r1, #1
   15eb4:	4249      	negs	r1, r1
   15eb6:	2001      	movs	r0, #1
   15eb8:	1ac2      	subs	r2, r0, r3
   15eba:	2a38      	cmp	r2, #56	; 0x38
   15ebc:	dd21      	ble.n	15f02 <__aeabi_ddiv+0x55e>
   15ebe:	9b02      	ldr	r3, [sp, #8]
   15ec0:	4003      	ands	r3, r0
   15ec2:	469c      	mov	ip, r3
   15ec4:	e638      	b.n	15b38 <__aeabi_ddiv+0x194>
   15ec6:	220f      	movs	r2, #15
   15ec8:	400a      	ands	r2, r1
   15eca:	2a04      	cmp	r2, #4
   15ecc:	d100      	bne.n	15ed0 <__aeabi_ddiv+0x52c>
   15ece:	e75b      	b.n	15d88 <__aeabi_ddiv+0x3e4>
   15ed0:	000a      	movs	r2, r1
   15ed2:	1d11      	adds	r1, r2, #4
   15ed4:	4291      	cmp	r1, r2
   15ed6:	4192      	sbcs	r2, r2
   15ed8:	4252      	negs	r2, r2
   15eda:	4493      	add	fp, r2
   15edc:	e754      	b.n	15d88 <__aeabi_ddiv+0x3e4>
   15ede:	4b47      	ldr	r3, [pc, #284]	; (15ffc <__aeabi_ddiv+0x658>)
   15ee0:	18e3      	adds	r3, r4, r3
   15ee2:	2b00      	cmp	r3, #0
   15ee4:	dde5      	ble.n	15eb2 <__aeabi_ddiv+0x50e>
   15ee6:	2201      	movs	r2, #1
   15ee8:	4252      	negs	r2, r2
   15eea:	e7f2      	b.n	15ed2 <__aeabi_ddiv+0x52e>
   15eec:	001d      	movs	r5, r3
   15eee:	e6fa      	b.n	15ce6 <__aeabi_ddiv+0x342>
   15ef0:	469a      	mov	sl, r3
   15ef2:	e71c      	b.n	15d2e <__aeabi_ddiv+0x38a>
   15ef4:	42b0      	cmp	r0, r6
   15ef6:	d839      	bhi.n	15f6c <__aeabi_ddiv+0x5c8>
   15ef8:	d06e      	beq.n	15fd8 <__aeabi_ddiv+0x634>
   15efa:	0011      	movs	r1, r2
   15efc:	e73a      	b.n	15d74 <__aeabi_ddiv+0x3d0>
   15efe:	9302      	str	r3, [sp, #8]
   15f00:	e73a      	b.n	15d78 <__aeabi_ddiv+0x3d4>
   15f02:	2a1f      	cmp	r2, #31
   15f04:	dc3c      	bgt.n	15f80 <__aeabi_ddiv+0x5dc>
   15f06:	2320      	movs	r3, #32
   15f08:	1a9b      	subs	r3, r3, r2
   15f0a:	000c      	movs	r4, r1
   15f0c:	4658      	mov	r0, fp
   15f0e:	4099      	lsls	r1, r3
   15f10:	4098      	lsls	r0, r3
   15f12:	1e4b      	subs	r3, r1, #1
   15f14:	4199      	sbcs	r1, r3
   15f16:	465b      	mov	r3, fp
   15f18:	40d4      	lsrs	r4, r2
   15f1a:	40d3      	lsrs	r3, r2
   15f1c:	4320      	orrs	r0, r4
   15f1e:	4308      	orrs	r0, r1
   15f20:	001a      	movs	r2, r3
   15f22:	0743      	lsls	r3, r0, #29
   15f24:	d009      	beq.n	15f3a <__aeabi_ddiv+0x596>
   15f26:	230f      	movs	r3, #15
   15f28:	4003      	ands	r3, r0
   15f2a:	2b04      	cmp	r3, #4
   15f2c:	d005      	beq.n	15f3a <__aeabi_ddiv+0x596>
   15f2e:	0001      	movs	r1, r0
   15f30:	1d08      	adds	r0, r1, #4
   15f32:	4288      	cmp	r0, r1
   15f34:	419b      	sbcs	r3, r3
   15f36:	425b      	negs	r3, r3
   15f38:	18d2      	adds	r2, r2, r3
   15f3a:	0213      	lsls	r3, r2, #8
   15f3c:	d53a      	bpl.n	15fb4 <__aeabi_ddiv+0x610>
   15f3e:	2301      	movs	r3, #1
   15f40:	9a02      	ldr	r2, [sp, #8]
   15f42:	2401      	movs	r4, #1
   15f44:	401a      	ands	r2, r3
   15f46:	2300      	movs	r3, #0
   15f48:	4694      	mov	ip, r2
   15f4a:	4698      	mov	r8, r3
   15f4c:	2200      	movs	r2, #0
   15f4e:	e5f7      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15f50:	2102      	movs	r1, #2
   15f52:	4249      	negs	r1, r1
   15f54:	468c      	mov	ip, r1
   15f56:	9d03      	ldr	r5, [sp, #12]
   15f58:	44e3      	add	fp, ip
   15f5a:	46ac      	mov	ip, r5
   15f5c:	44e2      	add	sl, ip
   15f5e:	45aa      	cmp	sl, r5
   15f60:	41ad      	sbcs	r5, r5
   15f62:	426d      	negs	r5, r5
   15f64:	4445      	add	r5, r8
   15f66:	18ed      	adds	r5, r5, r3
   15f68:	1a2d      	subs	r5, r5, r0
   15f6a:	e696      	b.n	15c9a <__aeabi_ddiv+0x2f6>
   15f6c:	1e8a      	subs	r2, r1, #2
   15f6e:	9903      	ldr	r1, [sp, #12]
   15f70:	004d      	lsls	r5, r1, #1
   15f72:	428d      	cmp	r5, r1
   15f74:	4189      	sbcs	r1, r1
   15f76:	4249      	negs	r1, r1
   15f78:	4441      	add	r1, r8
   15f7a:	1876      	adds	r6, r6, r1
   15f7c:	9503      	str	r5, [sp, #12]
   15f7e:	e78f      	b.n	15ea0 <__aeabi_ddiv+0x4fc>
   15f80:	201f      	movs	r0, #31
   15f82:	4240      	negs	r0, r0
   15f84:	1ac3      	subs	r3, r0, r3
   15f86:	4658      	mov	r0, fp
   15f88:	40d8      	lsrs	r0, r3
   15f8a:	0003      	movs	r3, r0
   15f8c:	2a20      	cmp	r2, #32
   15f8e:	d028      	beq.n	15fe2 <__aeabi_ddiv+0x63e>
   15f90:	2040      	movs	r0, #64	; 0x40
   15f92:	465d      	mov	r5, fp
   15f94:	1a82      	subs	r2, r0, r2
   15f96:	4095      	lsls	r5, r2
   15f98:	4329      	orrs	r1, r5
   15f9a:	1e4a      	subs	r2, r1, #1
   15f9c:	4191      	sbcs	r1, r2
   15f9e:	4319      	orrs	r1, r3
   15fa0:	2307      	movs	r3, #7
   15fa2:	2200      	movs	r2, #0
   15fa4:	400b      	ands	r3, r1
   15fa6:	d009      	beq.n	15fbc <__aeabi_ddiv+0x618>
   15fa8:	230f      	movs	r3, #15
   15faa:	2200      	movs	r2, #0
   15fac:	400b      	ands	r3, r1
   15fae:	0008      	movs	r0, r1
   15fb0:	2b04      	cmp	r3, #4
   15fb2:	d1bd      	bne.n	15f30 <__aeabi_ddiv+0x58c>
   15fb4:	0001      	movs	r1, r0
   15fb6:	0753      	lsls	r3, r2, #29
   15fb8:	0252      	lsls	r2, r2, #9
   15fba:	0b12      	lsrs	r2, r2, #12
   15fbc:	08c9      	lsrs	r1, r1, #3
   15fbe:	4319      	orrs	r1, r3
   15fc0:	2301      	movs	r3, #1
   15fc2:	4688      	mov	r8, r1
   15fc4:	9902      	ldr	r1, [sp, #8]
   15fc6:	2400      	movs	r4, #0
   15fc8:	4019      	ands	r1, r3
   15fca:	468c      	mov	ip, r1
   15fcc:	e5b8      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15fce:	4552      	cmp	r2, sl
   15fd0:	d8be      	bhi.n	15f50 <__aeabi_ddiv+0x5ac>
   15fd2:	468b      	mov	fp, r1
   15fd4:	2500      	movs	r5, #0
   15fd6:	e660      	b.n	15c9a <__aeabi_ddiv+0x2f6>
   15fd8:	9d03      	ldr	r5, [sp, #12]
   15fda:	429d      	cmp	r5, r3
   15fdc:	d3c6      	bcc.n	15f6c <__aeabi_ddiv+0x5c8>
   15fde:	0011      	movs	r1, r2
   15fe0:	e762      	b.n	15ea8 <__aeabi_ddiv+0x504>
   15fe2:	2500      	movs	r5, #0
   15fe4:	e7d8      	b.n	15f98 <__aeabi_ddiv+0x5f4>
   15fe6:	2280      	movs	r2, #128	; 0x80
   15fe8:	465b      	mov	r3, fp
   15fea:	0312      	lsls	r2, r2, #12
   15fec:	431a      	orrs	r2, r3
   15fee:	9b01      	ldr	r3, [sp, #4]
   15ff0:	0312      	lsls	r2, r2, #12
   15ff2:	0b12      	lsrs	r2, r2, #12
   15ff4:	469c      	mov	ip, r3
   15ff6:	4688      	mov	r8, r1
   15ff8:	4c03      	ldr	r4, [pc, #12]	; (16008 <__aeabi_ddiv+0x664>)
   15ffa:	e5a1      	b.n	15b40 <__aeabi_ddiv+0x19c>
   15ffc:	000003ff 	.word	0x000003ff
   16000:	feffffff 	.word	0xfeffffff
   16004:	000007fe 	.word	0x000007fe
   16008:	000007ff 	.word	0x000007ff

0001600c <__eqdf2>:
   1600c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1600e:	464f      	mov	r7, r9
   16010:	4646      	mov	r6, r8
   16012:	46d6      	mov	lr, sl
   16014:	005c      	lsls	r4, r3, #1
   16016:	b5c0      	push	{r6, r7, lr}
   16018:	031f      	lsls	r7, r3, #12
   1601a:	0fdb      	lsrs	r3, r3, #31
   1601c:	469a      	mov	sl, r3
   1601e:	4b17      	ldr	r3, [pc, #92]	; (1607c <__eqdf2+0x70>)
   16020:	030e      	lsls	r6, r1, #12
   16022:	004d      	lsls	r5, r1, #1
   16024:	4684      	mov	ip, r0
   16026:	4680      	mov	r8, r0
   16028:	0b36      	lsrs	r6, r6, #12
   1602a:	0d6d      	lsrs	r5, r5, #21
   1602c:	0fc9      	lsrs	r1, r1, #31
   1602e:	4691      	mov	r9, r2
   16030:	0b3f      	lsrs	r7, r7, #12
   16032:	0d64      	lsrs	r4, r4, #21
   16034:	2001      	movs	r0, #1
   16036:	429d      	cmp	r5, r3
   16038:	d008      	beq.n	1604c <__eqdf2+0x40>
   1603a:	429c      	cmp	r4, r3
   1603c:	d001      	beq.n	16042 <__eqdf2+0x36>
   1603e:	42a5      	cmp	r5, r4
   16040:	d00b      	beq.n	1605a <__eqdf2+0x4e>
   16042:	bc1c      	pop	{r2, r3, r4}
   16044:	4690      	mov	r8, r2
   16046:	4699      	mov	r9, r3
   16048:	46a2      	mov	sl, r4
   1604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1604c:	4663      	mov	r3, ip
   1604e:	4333      	orrs	r3, r6
   16050:	d1f7      	bne.n	16042 <__eqdf2+0x36>
   16052:	42ac      	cmp	r4, r5
   16054:	d1f5      	bne.n	16042 <__eqdf2+0x36>
   16056:	433a      	orrs	r2, r7
   16058:	d1f3      	bne.n	16042 <__eqdf2+0x36>
   1605a:	2001      	movs	r0, #1
   1605c:	42be      	cmp	r6, r7
   1605e:	d1f0      	bne.n	16042 <__eqdf2+0x36>
   16060:	45c8      	cmp	r8, r9
   16062:	d1ee      	bne.n	16042 <__eqdf2+0x36>
   16064:	4551      	cmp	r1, sl
   16066:	d007      	beq.n	16078 <__eqdf2+0x6c>
   16068:	2d00      	cmp	r5, #0
   1606a:	d1ea      	bne.n	16042 <__eqdf2+0x36>
   1606c:	4663      	mov	r3, ip
   1606e:	431e      	orrs	r6, r3
   16070:	0030      	movs	r0, r6
   16072:	1e46      	subs	r6, r0, #1
   16074:	41b0      	sbcs	r0, r6
   16076:	e7e4      	b.n	16042 <__eqdf2+0x36>
   16078:	2000      	movs	r0, #0
   1607a:	e7e2      	b.n	16042 <__eqdf2+0x36>
   1607c:	000007ff 	.word	0x000007ff

00016080 <__gedf2>:
   16080:	b5f0      	push	{r4, r5, r6, r7, lr}
   16082:	4645      	mov	r5, r8
   16084:	46de      	mov	lr, fp
   16086:	4657      	mov	r7, sl
   16088:	464e      	mov	r6, r9
   1608a:	b5e0      	push	{r5, r6, r7, lr}
   1608c:	031f      	lsls	r7, r3, #12
   1608e:	0b3d      	lsrs	r5, r7, #12
   16090:	4f2c      	ldr	r7, [pc, #176]	; (16144 <__gedf2+0xc4>)
   16092:	030e      	lsls	r6, r1, #12
   16094:	004c      	lsls	r4, r1, #1
   16096:	46ab      	mov	fp, r5
   16098:	005d      	lsls	r5, r3, #1
   1609a:	4684      	mov	ip, r0
   1609c:	0b36      	lsrs	r6, r6, #12
   1609e:	0d64      	lsrs	r4, r4, #21
   160a0:	0fc9      	lsrs	r1, r1, #31
   160a2:	4690      	mov	r8, r2
   160a4:	0d6d      	lsrs	r5, r5, #21
   160a6:	0fdb      	lsrs	r3, r3, #31
   160a8:	42bc      	cmp	r4, r7
   160aa:	d02a      	beq.n	16102 <__gedf2+0x82>
   160ac:	4f25      	ldr	r7, [pc, #148]	; (16144 <__gedf2+0xc4>)
   160ae:	42bd      	cmp	r5, r7
   160b0:	d02d      	beq.n	1610e <__gedf2+0x8e>
   160b2:	2c00      	cmp	r4, #0
   160b4:	d10f      	bne.n	160d6 <__gedf2+0x56>
   160b6:	4330      	orrs	r0, r6
   160b8:	0007      	movs	r7, r0
   160ba:	4681      	mov	r9, r0
   160bc:	4278      	negs	r0, r7
   160be:	4178      	adcs	r0, r7
   160c0:	b2c0      	uxtb	r0, r0
   160c2:	2d00      	cmp	r5, #0
   160c4:	d117      	bne.n	160f6 <__gedf2+0x76>
   160c6:	465f      	mov	r7, fp
   160c8:	433a      	orrs	r2, r7
   160ca:	d114      	bne.n	160f6 <__gedf2+0x76>
   160cc:	464b      	mov	r3, r9
   160ce:	2000      	movs	r0, #0
   160d0:	2b00      	cmp	r3, #0
   160d2:	d00a      	beq.n	160ea <__gedf2+0x6a>
   160d4:	e006      	b.n	160e4 <__gedf2+0x64>
   160d6:	2d00      	cmp	r5, #0
   160d8:	d102      	bne.n	160e0 <__gedf2+0x60>
   160da:	4658      	mov	r0, fp
   160dc:	4302      	orrs	r2, r0
   160de:	d001      	beq.n	160e4 <__gedf2+0x64>
   160e0:	4299      	cmp	r1, r3
   160e2:	d018      	beq.n	16116 <__gedf2+0x96>
   160e4:	4248      	negs	r0, r1
   160e6:	2101      	movs	r1, #1
   160e8:	4308      	orrs	r0, r1
   160ea:	bc3c      	pop	{r2, r3, r4, r5}
   160ec:	4690      	mov	r8, r2
   160ee:	4699      	mov	r9, r3
   160f0:	46a2      	mov	sl, r4
   160f2:	46ab      	mov	fp, r5
   160f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160f6:	2800      	cmp	r0, #0
   160f8:	d0f2      	beq.n	160e0 <__gedf2+0x60>
   160fa:	2001      	movs	r0, #1
   160fc:	3b01      	subs	r3, #1
   160fe:	4318      	orrs	r0, r3
   16100:	e7f3      	b.n	160ea <__gedf2+0x6a>
   16102:	0037      	movs	r7, r6
   16104:	4307      	orrs	r7, r0
   16106:	d0d1      	beq.n	160ac <__gedf2+0x2c>
   16108:	2002      	movs	r0, #2
   1610a:	4240      	negs	r0, r0
   1610c:	e7ed      	b.n	160ea <__gedf2+0x6a>
   1610e:	465f      	mov	r7, fp
   16110:	4317      	orrs	r7, r2
   16112:	d0ce      	beq.n	160b2 <__gedf2+0x32>
   16114:	e7f8      	b.n	16108 <__gedf2+0x88>
   16116:	42ac      	cmp	r4, r5
   16118:	dce4      	bgt.n	160e4 <__gedf2+0x64>
   1611a:	da03      	bge.n	16124 <__gedf2+0xa4>
   1611c:	1e48      	subs	r0, r1, #1
   1611e:	2101      	movs	r1, #1
   16120:	4308      	orrs	r0, r1
   16122:	e7e2      	b.n	160ea <__gedf2+0x6a>
   16124:	455e      	cmp	r6, fp
   16126:	d8dd      	bhi.n	160e4 <__gedf2+0x64>
   16128:	d006      	beq.n	16138 <__gedf2+0xb8>
   1612a:	2000      	movs	r0, #0
   1612c:	455e      	cmp	r6, fp
   1612e:	d2dc      	bcs.n	160ea <__gedf2+0x6a>
   16130:	2301      	movs	r3, #1
   16132:	1e48      	subs	r0, r1, #1
   16134:	4318      	orrs	r0, r3
   16136:	e7d8      	b.n	160ea <__gedf2+0x6a>
   16138:	45c4      	cmp	ip, r8
   1613a:	d8d3      	bhi.n	160e4 <__gedf2+0x64>
   1613c:	2000      	movs	r0, #0
   1613e:	45c4      	cmp	ip, r8
   16140:	d3f6      	bcc.n	16130 <__gedf2+0xb0>
   16142:	e7d2      	b.n	160ea <__gedf2+0x6a>
   16144:	000007ff 	.word	0x000007ff

00016148 <__ledf2>:
   16148:	b5f0      	push	{r4, r5, r6, r7, lr}
   1614a:	464e      	mov	r6, r9
   1614c:	4645      	mov	r5, r8
   1614e:	46de      	mov	lr, fp
   16150:	4657      	mov	r7, sl
   16152:	005c      	lsls	r4, r3, #1
   16154:	b5e0      	push	{r5, r6, r7, lr}
   16156:	031f      	lsls	r7, r3, #12
   16158:	0fdb      	lsrs	r3, r3, #31
   1615a:	4699      	mov	r9, r3
   1615c:	4b2a      	ldr	r3, [pc, #168]	; (16208 <__ledf2+0xc0>)
   1615e:	030e      	lsls	r6, r1, #12
   16160:	004d      	lsls	r5, r1, #1
   16162:	0fc9      	lsrs	r1, r1, #31
   16164:	4684      	mov	ip, r0
   16166:	0b36      	lsrs	r6, r6, #12
   16168:	0d6d      	lsrs	r5, r5, #21
   1616a:	468b      	mov	fp, r1
   1616c:	4690      	mov	r8, r2
   1616e:	0b3f      	lsrs	r7, r7, #12
   16170:	0d64      	lsrs	r4, r4, #21
   16172:	429d      	cmp	r5, r3
   16174:	d020      	beq.n	161b8 <__ledf2+0x70>
   16176:	4b24      	ldr	r3, [pc, #144]	; (16208 <__ledf2+0xc0>)
   16178:	429c      	cmp	r4, r3
   1617a:	d022      	beq.n	161c2 <__ledf2+0x7a>
   1617c:	2d00      	cmp	r5, #0
   1617e:	d112      	bne.n	161a6 <__ledf2+0x5e>
   16180:	4330      	orrs	r0, r6
   16182:	4243      	negs	r3, r0
   16184:	4143      	adcs	r3, r0
   16186:	b2db      	uxtb	r3, r3
   16188:	2c00      	cmp	r4, #0
   1618a:	d01f      	beq.n	161cc <__ledf2+0x84>
   1618c:	2b00      	cmp	r3, #0
   1618e:	d00c      	beq.n	161aa <__ledf2+0x62>
   16190:	464b      	mov	r3, r9
   16192:	2001      	movs	r0, #1
   16194:	3b01      	subs	r3, #1
   16196:	4303      	orrs	r3, r0
   16198:	0018      	movs	r0, r3
   1619a:	bc3c      	pop	{r2, r3, r4, r5}
   1619c:	4690      	mov	r8, r2
   1619e:	4699      	mov	r9, r3
   161a0:	46a2      	mov	sl, r4
   161a2:	46ab      	mov	fp, r5
   161a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161a6:	2c00      	cmp	r4, #0
   161a8:	d016      	beq.n	161d8 <__ledf2+0x90>
   161aa:	45cb      	cmp	fp, r9
   161ac:	d017      	beq.n	161de <__ledf2+0x96>
   161ae:	465b      	mov	r3, fp
   161b0:	4259      	negs	r1, r3
   161b2:	2301      	movs	r3, #1
   161b4:	430b      	orrs	r3, r1
   161b6:	e7ef      	b.n	16198 <__ledf2+0x50>
   161b8:	0031      	movs	r1, r6
   161ba:	2302      	movs	r3, #2
   161bc:	4301      	orrs	r1, r0
   161be:	d1eb      	bne.n	16198 <__ledf2+0x50>
   161c0:	e7d9      	b.n	16176 <__ledf2+0x2e>
   161c2:	0039      	movs	r1, r7
   161c4:	2302      	movs	r3, #2
   161c6:	4311      	orrs	r1, r2
   161c8:	d1e6      	bne.n	16198 <__ledf2+0x50>
   161ca:	e7d7      	b.n	1617c <__ledf2+0x34>
   161cc:	433a      	orrs	r2, r7
   161ce:	d1dd      	bne.n	1618c <__ledf2+0x44>
   161d0:	2300      	movs	r3, #0
   161d2:	2800      	cmp	r0, #0
   161d4:	d0e0      	beq.n	16198 <__ledf2+0x50>
   161d6:	e7ea      	b.n	161ae <__ledf2+0x66>
   161d8:	433a      	orrs	r2, r7
   161da:	d1e6      	bne.n	161aa <__ledf2+0x62>
   161dc:	e7e7      	b.n	161ae <__ledf2+0x66>
   161de:	42a5      	cmp	r5, r4
   161e0:	dce5      	bgt.n	161ae <__ledf2+0x66>
   161e2:	db05      	blt.n	161f0 <__ledf2+0xa8>
   161e4:	42be      	cmp	r6, r7
   161e6:	d8e2      	bhi.n	161ae <__ledf2+0x66>
   161e8:	d007      	beq.n	161fa <__ledf2+0xb2>
   161ea:	2300      	movs	r3, #0
   161ec:	42be      	cmp	r6, r7
   161ee:	d2d3      	bcs.n	16198 <__ledf2+0x50>
   161f0:	4659      	mov	r1, fp
   161f2:	2301      	movs	r3, #1
   161f4:	3901      	subs	r1, #1
   161f6:	430b      	orrs	r3, r1
   161f8:	e7ce      	b.n	16198 <__ledf2+0x50>
   161fa:	45c4      	cmp	ip, r8
   161fc:	d8d7      	bhi.n	161ae <__ledf2+0x66>
   161fe:	2300      	movs	r3, #0
   16200:	45c4      	cmp	ip, r8
   16202:	d3f5      	bcc.n	161f0 <__ledf2+0xa8>
   16204:	e7c8      	b.n	16198 <__ledf2+0x50>
   16206:	46c0      	nop			; (mov r8, r8)
   16208:	000007ff 	.word	0x000007ff

0001620c <__aeabi_dmul>:
   1620c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1620e:	4657      	mov	r7, sl
   16210:	4645      	mov	r5, r8
   16212:	46de      	mov	lr, fp
   16214:	464e      	mov	r6, r9
   16216:	b5e0      	push	{r5, r6, r7, lr}
   16218:	030c      	lsls	r4, r1, #12
   1621a:	4698      	mov	r8, r3
   1621c:	004e      	lsls	r6, r1, #1
   1621e:	0b23      	lsrs	r3, r4, #12
   16220:	b087      	sub	sp, #28
   16222:	0007      	movs	r7, r0
   16224:	4692      	mov	sl, r2
   16226:	469b      	mov	fp, r3
   16228:	0d76      	lsrs	r6, r6, #21
   1622a:	0fcd      	lsrs	r5, r1, #31
   1622c:	2e00      	cmp	r6, #0
   1622e:	d06b      	beq.n	16308 <__aeabi_dmul+0xfc>
   16230:	4b6d      	ldr	r3, [pc, #436]	; (163e8 <__aeabi_dmul+0x1dc>)
   16232:	429e      	cmp	r6, r3
   16234:	d035      	beq.n	162a2 <__aeabi_dmul+0x96>
   16236:	2480      	movs	r4, #128	; 0x80
   16238:	465b      	mov	r3, fp
   1623a:	0f42      	lsrs	r2, r0, #29
   1623c:	0424      	lsls	r4, r4, #16
   1623e:	00db      	lsls	r3, r3, #3
   16240:	4314      	orrs	r4, r2
   16242:	431c      	orrs	r4, r3
   16244:	00c3      	lsls	r3, r0, #3
   16246:	4699      	mov	r9, r3
   16248:	4b68      	ldr	r3, [pc, #416]	; (163ec <__aeabi_dmul+0x1e0>)
   1624a:	46a3      	mov	fp, r4
   1624c:	469c      	mov	ip, r3
   1624e:	2300      	movs	r3, #0
   16250:	2700      	movs	r7, #0
   16252:	4466      	add	r6, ip
   16254:	9302      	str	r3, [sp, #8]
   16256:	4643      	mov	r3, r8
   16258:	031c      	lsls	r4, r3, #12
   1625a:	005a      	lsls	r2, r3, #1
   1625c:	0fdb      	lsrs	r3, r3, #31
   1625e:	4650      	mov	r0, sl
   16260:	0b24      	lsrs	r4, r4, #12
   16262:	0d52      	lsrs	r2, r2, #21
   16264:	4698      	mov	r8, r3
   16266:	d100      	bne.n	1626a <__aeabi_dmul+0x5e>
   16268:	e076      	b.n	16358 <__aeabi_dmul+0x14c>
   1626a:	4b5f      	ldr	r3, [pc, #380]	; (163e8 <__aeabi_dmul+0x1dc>)
   1626c:	429a      	cmp	r2, r3
   1626e:	d06d      	beq.n	1634c <__aeabi_dmul+0x140>
   16270:	2380      	movs	r3, #128	; 0x80
   16272:	0f41      	lsrs	r1, r0, #29
   16274:	041b      	lsls	r3, r3, #16
   16276:	430b      	orrs	r3, r1
   16278:	495c      	ldr	r1, [pc, #368]	; (163ec <__aeabi_dmul+0x1e0>)
   1627a:	00e4      	lsls	r4, r4, #3
   1627c:	468c      	mov	ip, r1
   1627e:	431c      	orrs	r4, r3
   16280:	00c3      	lsls	r3, r0, #3
   16282:	2000      	movs	r0, #0
   16284:	4462      	add	r2, ip
   16286:	4641      	mov	r1, r8
   16288:	18b6      	adds	r6, r6, r2
   1628a:	4069      	eors	r1, r5
   1628c:	1c72      	adds	r2, r6, #1
   1628e:	9101      	str	r1, [sp, #4]
   16290:	4694      	mov	ip, r2
   16292:	4307      	orrs	r7, r0
   16294:	2f0f      	cmp	r7, #15
   16296:	d900      	bls.n	1629a <__aeabi_dmul+0x8e>
   16298:	e0b0      	b.n	163fc <__aeabi_dmul+0x1f0>
   1629a:	4a55      	ldr	r2, [pc, #340]	; (163f0 <__aeabi_dmul+0x1e4>)
   1629c:	00bf      	lsls	r7, r7, #2
   1629e:	59d2      	ldr	r2, [r2, r7]
   162a0:	4697      	mov	pc, r2
   162a2:	465b      	mov	r3, fp
   162a4:	4303      	orrs	r3, r0
   162a6:	4699      	mov	r9, r3
   162a8:	d000      	beq.n	162ac <__aeabi_dmul+0xa0>
   162aa:	e087      	b.n	163bc <__aeabi_dmul+0x1b0>
   162ac:	2300      	movs	r3, #0
   162ae:	469b      	mov	fp, r3
   162b0:	3302      	adds	r3, #2
   162b2:	2708      	movs	r7, #8
   162b4:	9302      	str	r3, [sp, #8]
   162b6:	e7ce      	b.n	16256 <__aeabi_dmul+0x4a>
   162b8:	4642      	mov	r2, r8
   162ba:	9201      	str	r2, [sp, #4]
   162bc:	2802      	cmp	r0, #2
   162be:	d067      	beq.n	16390 <__aeabi_dmul+0x184>
   162c0:	2803      	cmp	r0, #3
   162c2:	d100      	bne.n	162c6 <__aeabi_dmul+0xba>
   162c4:	e20e      	b.n	166e4 <__aeabi_dmul+0x4d8>
   162c6:	2801      	cmp	r0, #1
   162c8:	d000      	beq.n	162cc <__aeabi_dmul+0xc0>
   162ca:	e162      	b.n	16592 <__aeabi_dmul+0x386>
   162cc:	2300      	movs	r3, #0
   162ce:	2400      	movs	r4, #0
   162d0:	2200      	movs	r2, #0
   162d2:	4699      	mov	r9, r3
   162d4:	9901      	ldr	r1, [sp, #4]
   162d6:	4001      	ands	r1, r0
   162d8:	b2cd      	uxtb	r5, r1
   162da:	2100      	movs	r1, #0
   162dc:	0312      	lsls	r2, r2, #12
   162de:	0d0b      	lsrs	r3, r1, #20
   162e0:	0b12      	lsrs	r2, r2, #12
   162e2:	051b      	lsls	r3, r3, #20
   162e4:	4313      	orrs	r3, r2
   162e6:	4a43      	ldr	r2, [pc, #268]	; (163f4 <__aeabi_dmul+0x1e8>)
   162e8:	0524      	lsls	r4, r4, #20
   162ea:	4013      	ands	r3, r2
   162ec:	431c      	orrs	r4, r3
   162ee:	0064      	lsls	r4, r4, #1
   162f0:	07ed      	lsls	r5, r5, #31
   162f2:	0864      	lsrs	r4, r4, #1
   162f4:	432c      	orrs	r4, r5
   162f6:	4648      	mov	r0, r9
   162f8:	0021      	movs	r1, r4
   162fa:	b007      	add	sp, #28
   162fc:	bc3c      	pop	{r2, r3, r4, r5}
   162fe:	4690      	mov	r8, r2
   16300:	4699      	mov	r9, r3
   16302:	46a2      	mov	sl, r4
   16304:	46ab      	mov	fp, r5
   16306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16308:	4303      	orrs	r3, r0
   1630a:	4699      	mov	r9, r3
   1630c:	d04f      	beq.n	163ae <__aeabi_dmul+0x1a2>
   1630e:	465b      	mov	r3, fp
   16310:	2b00      	cmp	r3, #0
   16312:	d100      	bne.n	16316 <__aeabi_dmul+0x10a>
   16314:	e189      	b.n	1662a <__aeabi_dmul+0x41e>
   16316:	4658      	mov	r0, fp
   16318:	f000 fe98 	bl	1704c <__clzsi2>
   1631c:	0003      	movs	r3, r0
   1631e:	3b0b      	subs	r3, #11
   16320:	2b1c      	cmp	r3, #28
   16322:	dd00      	ble.n	16326 <__aeabi_dmul+0x11a>
   16324:	e17a      	b.n	1661c <__aeabi_dmul+0x410>
   16326:	221d      	movs	r2, #29
   16328:	1ad3      	subs	r3, r2, r3
   1632a:	003a      	movs	r2, r7
   1632c:	0001      	movs	r1, r0
   1632e:	465c      	mov	r4, fp
   16330:	40da      	lsrs	r2, r3
   16332:	3908      	subs	r1, #8
   16334:	408c      	lsls	r4, r1
   16336:	0013      	movs	r3, r2
   16338:	408f      	lsls	r7, r1
   1633a:	4323      	orrs	r3, r4
   1633c:	469b      	mov	fp, r3
   1633e:	46b9      	mov	r9, r7
   16340:	2300      	movs	r3, #0
   16342:	4e2d      	ldr	r6, [pc, #180]	; (163f8 <__aeabi_dmul+0x1ec>)
   16344:	2700      	movs	r7, #0
   16346:	1a36      	subs	r6, r6, r0
   16348:	9302      	str	r3, [sp, #8]
   1634a:	e784      	b.n	16256 <__aeabi_dmul+0x4a>
   1634c:	4653      	mov	r3, sl
   1634e:	4323      	orrs	r3, r4
   16350:	d12a      	bne.n	163a8 <__aeabi_dmul+0x19c>
   16352:	2400      	movs	r4, #0
   16354:	2002      	movs	r0, #2
   16356:	e796      	b.n	16286 <__aeabi_dmul+0x7a>
   16358:	4653      	mov	r3, sl
   1635a:	4323      	orrs	r3, r4
   1635c:	d020      	beq.n	163a0 <__aeabi_dmul+0x194>
   1635e:	2c00      	cmp	r4, #0
   16360:	d100      	bne.n	16364 <__aeabi_dmul+0x158>
   16362:	e157      	b.n	16614 <__aeabi_dmul+0x408>
   16364:	0020      	movs	r0, r4
   16366:	f000 fe71 	bl	1704c <__clzsi2>
   1636a:	0003      	movs	r3, r0
   1636c:	3b0b      	subs	r3, #11
   1636e:	2b1c      	cmp	r3, #28
   16370:	dd00      	ble.n	16374 <__aeabi_dmul+0x168>
   16372:	e149      	b.n	16608 <__aeabi_dmul+0x3fc>
   16374:	211d      	movs	r1, #29
   16376:	1acb      	subs	r3, r1, r3
   16378:	4651      	mov	r1, sl
   1637a:	0002      	movs	r2, r0
   1637c:	40d9      	lsrs	r1, r3
   1637e:	4653      	mov	r3, sl
   16380:	3a08      	subs	r2, #8
   16382:	4094      	lsls	r4, r2
   16384:	4093      	lsls	r3, r2
   16386:	430c      	orrs	r4, r1
   16388:	4a1b      	ldr	r2, [pc, #108]	; (163f8 <__aeabi_dmul+0x1ec>)
   1638a:	1a12      	subs	r2, r2, r0
   1638c:	2000      	movs	r0, #0
   1638e:	e77a      	b.n	16286 <__aeabi_dmul+0x7a>
   16390:	2501      	movs	r5, #1
   16392:	9b01      	ldr	r3, [sp, #4]
   16394:	4c14      	ldr	r4, [pc, #80]	; (163e8 <__aeabi_dmul+0x1dc>)
   16396:	401d      	ands	r5, r3
   16398:	2300      	movs	r3, #0
   1639a:	2200      	movs	r2, #0
   1639c:	4699      	mov	r9, r3
   1639e:	e79c      	b.n	162da <__aeabi_dmul+0xce>
   163a0:	2400      	movs	r4, #0
   163a2:	2200      	movs	r2, #0
   163a4:	2001      	movs	r0, #1
   163a6:	e76e      	b.n	16286 <__aeabi_dmul+0x7a>
   163a8:	4653      	mov	r3, sl
   163aa:	2003      	movs	r0, #3
   163ac:	e76b      	b.n	16286 <__aeabi_dmul+0x7a>
   163ae:	2300      	movs	r3, #0
   163b0:	469b      	mov	fp, r3
   163b2:	3301      	adds	r3, #1
   163b4:	2704      	movs	r7, #4
   163b6:	2600      	movs	r6, #0
   163b8:	9302      	str	r3, [sp, #8]
   163ba:	e74c      	b.n	16256 <__aeabi_dmul+0x4a>
   163bc:	2303      	movs	r3, #3
   163be:	4681      	mov	r9, r0
   163c0:	270c      	movs	r7, #12
   163c2:	9302      	str	r3, [sp, #8]
   163c4:	e747      	b.n	16256 <__aeabi_dmul+0x4a>
   163c6:	2280      	movs	r2, #128	; 0x80
   163c8:	2300      	movs	r3, #0
   163ca:	2500      	movs	r5, #0
   163cc:	0312      	lsls	r2, r2, #12
   163ce:	4699      	mov	r9, r3
   163d0:	4c05      	ldr	r4, [pc, #20]	; (163e8 <__aeabi_dmul+0x1dc>)
   163d2:	e782      	b.n	162da <__aeabi_dmul+0xce>
   163d4:	465c      	mov	r4, fp
   163d6:	464b      	mov	r3, r9
   163d8:	9802      	ldr	r0, [sp, #8]
   163da:	e76f      	b.n	162bc <__aeabi_dmul+0xb0>
   163dc:	465c      	mov	r4, fp
   163de:	464b      	mov	r3, r9
   163e0:	9501      	str	r5, [sp, #4]
   163e2:	9802      	ldr	r0, [sp, #8]
   163e4:	e76a      	b.n	162bc <__aeabi_dmul+0xb0>
   163e6:	46c0      	nop			; (mov r8, r8)
   163e8:	000007ff 	.word	0x000007ff
   163ec:	fffffc01 	.word	0xfffffc01
   163f0:	000179d8 	.word	0x000179d8
   163f4:	800fffff 	.word	0x800fffff
   163f8:	fffffc0d 	.word	0xfffffc0d
   163fc:	464a      	mov	r2, r9
   163fe:	4649      	mov	r1, r9
   16400:	0c17      	lsrs	r7, r2, #16
   16402:	0c1a      	lsrs	r2, r3, #16
   16404:	041b      	lsls	r3, r3, #16
   16406:	0c1b      	lsrs	r3, r3, #16
   16408:	0408      	lsls	r0, r1, #16
   1640a:	0019      	movs	r1, r3
   1640c:	0c00      	lsrs	r0, r0, #16
   1640e:	4341      	muls	r1, r0
   16410:	0015      	movs	r5, r2
   16412:	4688      	mov	r8, r1
   16414:	0019      	movs	r1, r3
   16416:	437d      	muls	r5, r7
   16418:	4379      	muls	r1, r7
   1641a:	9503      	str	r5, [sp, #12]
   1641c:	4689      	mov	r9, r1
   1641e:	0029      	movs	r1, r5
   16420:	0015      	movs	r5, r2
   16422:	4345      	muls	r5, r0
   16424:	444d      	add	r5, r9
   16426:	9502      	str	r5, [sp, #8]
   16428:	4645      	mov	r5, r8
   1642a:	0c2d      	lsrs	r5, r5, #16
   1642c:	46aa      	mov	sl, r5
   1642e:	9d02      	ldr	r5, [sp, #8]
   16430:	4455      	add	r5, sl
   16432:	45a9      	cmp	r9, r5
   16434:	d906      	bls.n	16444 <__aeabi_dmul+0x238>
   16436:	468a      	mov	sl, r1
   16438:	2180      	movs	r1, #128	; 0x80
   1643a:	0249      	lsls	r1, r1, #9
   1643c:	4689      	mov	r9, r1
   1643e:	44ca      	add	sl, r9
   16440:	4651      	mov	r1, sl
   16442:	9103      	str	r1, [sp, #12]
   16444:	0c29      	lsrs	r1, r5, #16
   16446:	9104      	str	r1, [sp, #16]
   16448:	4641      	mov	r1, r8
   1644a:	0409      	lsls	r1, r1, #16
   1644c:	042d      	lsls	r5, r5, #16
   1644e:	0c09      	lsrs	r1, r1, #16
   16450:	4688      	mov	r8, r1
   16452:	0029      	movs	r1, r5
   16454:	0c25      	lsrs	r5, r4, #16
   16456:	0424      	lsls	r4, r4, #16
   16458:	4441      	add	r1, r8
   1645a:	0c24      	lsrs	r4, r4, #16
   1645c:	9105      	str	r1, [sp, #20]
   1645e:	0021      	movs	r1, r4
   16460:	4341      	muls	r1, r0
   16462:	4688      	mov	r8, r1
   16464:	0021      	movs	r1, r4
   16466:	4379      	muls	r1, r7
   16468:	468a      	mov	sl, r1
   1646a:	4368      	muls	r0, r5
   1646c:	4641      	mov	r1, r8
   1646e:	4450      	add	r0, sl
   16470:	4681      	mov	r9, r0
   16472:	0c08      	lsrs	r0, r1, #16
   16474:	4448      	add	r0, r9
   16476:	436f      	muls	r7, r5
   16478:	4582      	cmp	sl, r0
   1647a:	d903      	bls.n	16484 <__aeabi_dmul+0x278>
   1647c:	2180      	movs	r1, #128	; 0x80
   1647e:	0249      	lsls	r1, r1, #9
   16480:	4689      	mov	r9, r1
   16482:	444f      	add	r7, r9
   16484:	0c01      	lsrs	r1, r0, #16
   16486:	4689      	mov	r9, r1
   16488:	0039      	movs	r1, r7
   1648a:	4449      	add	r1, r9
   1648c:	9102      	str	r1, [sp, #8]
   1648e:	4641      	mov	r1, r8
   16490:	040f      	lsls	r7, r1, #16
   16492:	9904      	ldr	r1, [sp, #16]
   16494:	0c3f      	lsrs	r7, r7, #16
   16496:	4688      	mov	r8, r1
   16498:	0400      	lsls	r0, r0, #16
   1649a:	19c0      	adds	r0, r0, r7
   1649c:	4480      	add	r8, r0
   1649e:	4641      	mov	r1, r8
   164a0:	9104      	str	r1, [sp, #16]
   164a2:	4659      	mov	r1, fp
   164a4:	0c0f      	lsrs	r7, r1, #16
   164a6:	0409      	lsls	r1, r1, #16
   164a8:	0c09      	lsrs	r1, r1, #16
   164aa:	4688      	mov	r8, r1
   164ac:	4359      	muls	r1, r3
   164ae:	468a      	mov	sl, r1
   164b0:	0039      	movs	r1, r7
   164b2:	4351      	muls	r1, r2
   164b4:	4689      	mov	r9, r1
   164b6:	4641      	mov	r1, r8
   164b8:	434a      	muls	r2, r1
   164ba:	4651      	mov	r1, sl
   164bc:	0c09      	lsrs	r1, r1, #16
   164be:	468b      	mov	fp, r1
   164c0:	437b      	muls	r3, r7
   164c2:	18d2      	adds	r2, r2, r3
   164c4:	445a      	add	r2, fp
   164c6:	4293      	cmp	r3, r2
   164c8:	d903      	bls.n	164d2 <__aeabi_dmul+0x2c6>
   164ca:	2380      	movs	r3, #128	; 0x80
   164cc:	025b      	lsls	r3, r3, #9
   164ce:	469b      	mov	fp, r3
   164d0:	44d9      	add	r9, fp
   164d2:	4651      	mov	r1, sl
   164d4:	0409      	lsls	r1, r1, #16
   164d6:	0c09      	lsrs	r1, r1, #16
   164d8:	468a      	mov	sl, r1
   164da:	4641      	mov	r1, r8
   164dc:	4361      	muls	r1, r4
   164de:	437c      	muls	r4, r7
   164e0:	0c13      	lsrs	r3, r2, #16
   164e2:	0412      	lsls	r2, r2, #16
   164e4:	444b      	add	r3, r9
   164e6:	4452      	add	r2, sl
   164e8:	46a1      	mov	r9, r4
   164ea:	468a      	mov	sl, r1
   164ec:	003c      	movs	r4, r7
   164ee:	4641      	mov	r1, r8
   164f0:	436c      	muls	r4, r5
   164f2:	434d      	muls	r5, r1
   164f4:	4651      	mov	r1, sl
   164f6:	444d      	add	r5, r9
   164f8:	0c0f      	lsrs	r7, r1, #16
   164fa:	197d      	adds	r5, r7, r5
   164fc:	45a9      	cmp	r9, r5
   164fe:	d903      	bls.n	16508 <__aeabi_dmul+0x2fc>
   16500:	2180      	movs	r1, #128	; 0x80
   16502:	0249      	lsls	r1, r1, #9
   16504:	4688      	mov	r8, r1
   16506:	4444      	add	r4, r8
   16508:	9f04      	ldr	r7, [sp, #16]
   1650a:	9903      	ldr	r1, [sp, #12]
   1650c:	46b8      	mov	r8, r7
   1650e:	4441      	add	r1, r8
   16510:	468b      	mov	fp, r1
   16512:	4583      	cmp	fp, r0
   16514:	4180      	sbcs	r0, r0
   16516:	4241      	negs	r1, r0
   16518:	4688      	mov	r8, r1
   1651a:	4651      	mov	r1, sl
   1651c:	0408      	lsls	r0, r1, #16
   1651e:	042f      	lsls	r7, r5, #16
   16520:	0c00      	lsrs	r0, r0, #16
   16522:	183f      	adds	r7, r7, r0
   16524:	4658      	mov	r0, fp
   16526:	9902      	ldr	r1, [sp, #8]
   16528:	1810      	adds	r0, r2, r0
   1652a:	4689      	mov	r9, r1
   1652c:	4290      	cmp	r0, r2
   1652e:	4192      	sbcs	r2, r2
   16530:	444f      	add	r7, r9
   16532:	46ba      	mov	sl, r7
   16534:	4252      	negs	r2, r2
   16536:	4699      	mov	r9, r3
   16538:	4693      	mov	fp, r2
   1653a:	44c2      	add	sl, r8
   1653c:	44d1      	add	r9, sl
   1653e:	44cb      	add	fp, r9
   16540:	428f      	cmp	r7, r1
   16542:	41bf      	sbcs	r7, r7
   16544:	45c2      	cmp	sl, r8
   16546:	4189      	sbcs	r1, r1
   16548:	4599      	cmp	r9, r3
   1654a:	419b      	sbcs	r3, r3
   1654c:	4593      	cmp	fp, r2
   1654e:	4192      	sbcs	r2, r2
   16550:	427f      	negs	r7, r7
   16552:	4249      	negs	r1, r1
   16554:	0c2d      	lsrs	r5, r5, #16
   16556:	4252      	negs	r2, r2
   16558:	430f      	orrs	r7, r1
   1655a:	425b      	negs	r3, r3
   1655c:	4313      	orrs	r3, r2
   1655e:	197f      	adds	r7, r7, r5
   16560:	18ff      	adds	r7, r7, r3
   16562:	465b      	mov	r3, fp
   16564:	193c      	adds	r4, r7, r4
   16566:	0ddb      	lsrs	r3, r3, #23
   16568:	9a05      	ldr	r2, [sp, #20]
   1656a:	0264      	lsls	r4, r4, #9
   1656c:	431c      	orrs	r4, r3
   1656e:	0243      	lsls	r3, r0, #9
   16570:	4313      	orrs	r3, r2
   16572:	1e5d      	subs	r5, r3, #1
   16574:	41ab      	sbcs	r3, r5
   16576:	465a      	mov	r2, fp
   16578:	0dc0      	lsrs	r0, r0, #23
   1657a:	4303      	orrs	r3, r0
   1657c:	0252      	lsls	r2, r2, #9
   1657e:	4313      	orrs	r3, r2
   16580:	01e2      	lsls	r2, r4, #7
   16582:	d556      	bpl.n	16632 <__aeabi_dmul+0x426>
   16584:	2001      	movs	r0, #1
   16586:	085a      	lsrs	r2, r3, #1
   16588:	4003      	ands	r3, r0
   1658a:	4313      	orrs	r3, r2
   1658c:	07e2      	lsls	r2, r4, #31
   1658e:	4313      	orrs	r3, r2
   16590:	0864      	lsrs	r4, r4, #1
   16592:	485a      	ldr	r0, [pc, #360]	; (166fc <__aeabi_dmul+0x4f0>)
   16594:	4460      	add	r0, ip
   16596:	2800      	cmp	r0, #0
   16598:	dd4d      	ble.n	16636 <__aeabi_dmul+0x42a>
   1659a:	075a      	lsls	r2, r3, #29
   1659c:	d009      	beq.n	165b2 <__aeabi_dmul+0x3a6>
   1659e:	220f      	movs	r2, #15
   165a0:	401a      	ands	r2, r3
   165a2:	2a04      	cmp	r2, #4
   165a4:	d005      	beq.n	165b2 <__aeabi_dmul+0x3a6>
   165a6:	1d1a      	adds	r2, r3, #4
   165a8:	429a      	cmp	r2, r3
   165aa:	419b      	sbcs	r3, r3
   165ac:	425b      	negs	r3, r3
   165ae:	18e4      	adds	r4, r4, r3
   165b0:	0013      	movs	r3, r2
   165b2:	01e2      	lsls	r2, r4, #7
   165b4:	d504      	bpl.n	165c0 <__aeabi_dmul+0x3b4>
   165b6:	2080      	movs	r0, #128	; 0x80
   165b8:	4a51      	ldr	r2, [pc, #324]	; (16700 <__aeabi_dmul+0x4f4>)
   165ba:	00c0      	lsls	r0, r0, #3
   165bc:	4014      	ands	r4, r2
   165be:	4460      	add	r0, ip
   165c0:	4a50      	ldr	r2, [pc, #320]	; (16704 <__aeabi_dmul+0x4f8>)
   165c2:	4290      	cmp	r0, r2
   165c4:	dd00      	ble.n	165c8 <__aeabi_dmul+0x3bc>
   165c6:	e6e3      	b.n	16390 <__aeabi_dmul+0x184>
   165c8:	2501      	movs	r5, #1
   165ca:	08db      	lsrs	r3, r3, #3
   165cc:	0762      	lsls	r2, r4, #29
   165ce:	431a      	orrs	r2, r3
   165d0:	0264      	lsls	r4, r4, #9
   165d2:	9b01      	ldr	r3, [sp, #4]
   165d4:	4691      	mov	r9, r2
   165d6:	0b22      	lsrs	r2, r4, #12
   165d8:	0544      	lsls	r4, r0, #21
   165da:	0d64      	lsrs	r4, r4, #21
   165dc:	401d      	ands	r5, r3
   165de:	e67c      	b.n	162da <__aeabi_dmul+0xce>
   165e0:	2280      	movs	r2, #128	; 0x80
   165e2:	4659      	mov	r1, fp
   165e4:	0312      	lsls	r2, r2, #12
   165e6:	4211      	tst	r1, r2
   165e8:	d008      	beq.n	165fc <__aeabi_dmul+0x3f0>
   165ea:	4214      	tst	r4, r2
   165ec:	d106      	bne.n	165fc <__aeabi_dmul+0x3f0>
   165ee:	4322      	orrs	r2, r4
   165f0:	0312      	lsls	r2, r2, #12
   165f2:	0b12      	lsrs	r2, r2, #12
   165f4:	4645      	mov	r5, r8
   165f6:	4699      	mov	r9, r3
   165f8:	4c43      	ldr	r4, [pc, #268]	; (16708 <__aeabi_dmul+0x4fc>)
   165fa:	e66e      	b.n	162da <__aeabi_dmul+0xce>
   165fc:	465b      	mov	r3, fp
   165fe:	431a      	orrs	r2, r3
   16600:	0312      	lsls	r2, r2, #12
   16602:	0b12      	lsrs	r2, r2, #12
   16604:	4c40      	ldr	r4, [pc, #256]	; (16708 <__aeabi_dmul+0x4fc>)
   16606:	e668      	b.n	162da <__aeabi_dmul+0xce>
   16608:	0003      	movs	r3, r0
   1660a:	4654      	mov	r4, sl
   1660c:	3b28      	subs	r3, #40	; 0x28
   1660e:	409c      	lsls	r4, r3
   16610:	2300      	movs	r3, #0
   16612:	e6b9      	b.n	16388 <__aeabi_dmul+0x17c>
   16614:	f000 fd1a 	bl	1704c <__clzsi2>
   16618:	3020      	adds	r0, #32
   1661a:	e6a6      	b.n	1636a <__aeabi_dmul+0x15e>
   1661c:	0003      	movs	r3, r0
   1661e:	3b28      	subs	r3, #40	; 0x28
   16620:	409f      	lsls	r7, r3
   16622:	2300      	movs	r3, #0
   16624:	46bb      	mov	fp, r7
   16626:	4699      	mov	r9, r3
   16628:	e68a      	b.n	16340 <__aeabi_dmul+0x134>
   1662a:	f000 fd0f 	bl	1704c <__clzsi2>
   1662e:	3020      	adds	r0, #32
   16630:	e674      	b.n	1631c <__aeabi_dmul+0x110>
   16632:	46b4      	mov	ip, r6
   16634:	e7ad      	b.n	16592 <__aeabi_dmul+0x386>
   16636:	2501      	movs	r5, #1
   16638:	1a2a      	subs	r2, r5, r0
   1663a:	2a38      	cmp	r2, #56	; 0x38
   1663c:	dd06      	ble.n	1664c <__aeabi_dmul+0x440>
   1663e:	9b01      	ldr	r3, [sp, #4]
   16640:	2400      	movs	r4, #0
   16642:	401d      	ands	r5, r3
   16644:	2300      	movs	r3, #0
   16646:	2200      	movs	r2, #0
   16648:	4699      	mov	r9, r3
   1664a:	e646      	b.n	162da <__aeabi_dmul+0xce>
   1664c:	2a1f      	cmp	r2, #31
   1664e:	dc21      	bgt.n	16694 <__aeabi_dmul+0x488>
   16650:	2520      	movs	r5, #32
   16652:	0020      	movs	r0, r4
   16654:	1aad      	subs	r5, r5, r2
   16656:	001e      	movs	r6, r3
   16658:	40ab      	lsls	r3, r5
   1665a:	40a8      	lsls	r0, r5
   1665c:	40d6      	lsrs	r6, r2
   1665e:	1e5d      	subs	r5, r3, #1
   16660:	41ab      	sbcs	r3, r5
   16662:	4330      	orrs	r0, r6
   16664:	4318      	orrs	r0, r3
   16666:	40d4      	lsrs	r4, r2
   16668:	0743      	lsls	r3, r0, #29
   1666a:	d009      	beq.n	16680 <__aeabi_dmul+0x474>
   1666c:	230f      	movs	r3, #15
   1666e:	4003      	ands	r3, r0
   16670:	2b04      	cmp	r3, #4
   16672:	d005      	beq.n	16680 <__aeabi_dmul+0x474>
   16674:	0003      	movs	r3, r0
   16676:	1d18      	adds	r0, r3, #4
   16678:	4298      	cmp	r0, r3
   1667a:	419b      	sbcs	r3, r3
   1667c:	425b      	negs	r3, r3
   1667e:	18e4      	adds	r4, r4, r3
   16680:	0223      	lsls	r3, r4, #8
   16682:	d521      	bpl.n	166c8 <__aeabi_dmul+0x4bc>
   16684:	2501      	movs	r5, #1
   16686:	9b01      	ldr	r3, [sp, #4]
   16688:	2401      	movs	r4, #1
   1668a:	401d      	ands	r5, r3
   1668c:	2300      	movs	r3, #0
   1668e:	2200      	movs	r2, #0
   16690:	4699      	mov	r9, r3
   16692:	e622      	b.n	162da <__aeabi_dmul+0xce>
   16694:	251f      	movs	r5, #31
   16696:	0021      	movs	r1, r4
   16698:	426d      	negs	r5, r5
   1669a:	1a28      	subs	r0, r5, r0
   1669c:	40c1      	lsrs	r1, r0
   1669e:	0008      	movs	r0, r1
   166a0:	2a20      	cmp	r2, #32
   166a2:	d01d      	beq.n	166e0 <__aeabi_dmul+0x4d4>
   166a4:	355f      	adds	r5, #95	; 0x5f
   166a6:	1aaa      	subs	r2, r5, r2
   166a8:	4094      	lsls	r4, r2
   166aa:	4323      	orrs	r3, r4
   166ac:	1e5c      	subs	r4, r3, #1
   166ae:	41a3      	sbcs	r3, r4
   166b0:	2507      	movs	r5, #7
   166b2:	4303      	orrs	r3, r0
   166b4:	401d      	ands	r5, r3
   166b6:	2200      	movs	r2, #0
   166b8:	2d00      	cmp	r5, #0
   166ba:	d009      	beq.n	166d0 <__aeabi_dmul+0x4c4>
   166bc:	220f      	movs	r2, #15
   166be:	2400      	movs	r4, #0
   166c0:	401a      	ands	r2, r3
   166c2:	0018      	movs	r0, r3
   166c4:	2a04      	cmp	r2, #4
   166c6:	d1d6      	bne.n	16676 <__aeabi_dmul+0x46a>
   166c8:	0003      	movs	r3, r0
   166ca:	0765      	lsls	r5, r4, #29
   166cc:	0264      	lsls	r4, r4, #9
   166ce:	0b22      	lsrs	r2, r4, #12
   166d0:	08db      	lsrs	r3, r3, #3
   166d2:	432b      	orrs	r3, r5
   166d4:	2501      	movs	r5, #1
   166d6:	4699      	mov	r9, r3
   166d8:	9b01      	ldr	r3, [sp, #4]
   166da:	2400      	movs	r4, #0
   166dc:	401d      	ands	r5, r3
   166de:	e5fc      	b.n	162da <__aeabi_dmul+0xce>
   166e0:	2400      	movs	r4, #0
   166e2:	e7e2      	b.n	166aa <__aeabi_dmul+0x49e>
   166e4:	2280      	movs	r2, #128	; 0x80
   166e6:	2501      	movs	r5, #1
   166e8:	0312      	lsls	r2, r2, #12
   166ea:	4322      	orrs	r2, r4
   166ec:	9901      	ldr	r1, [sp, #4]
   166ee:	0312      	lsls	r2, r2, #12
   166f0:	0b12      	lsrs	r2, r2, #12
   166f2:	400d      	ands	r5, r1
   166f4:	4699      	mov	r9, r3
   166f6:	4c04      	ldr	r4, [pc, #16]	; (16708 <__aeabi_dmul+0x4fc>)
   166f8:	e5ef      	b.n	162da <__aeabi_dmul+0xce>
   166fa:	46c0      	nop			; (mov r8, r8)
   166fc:	000003ff 	.word	0x000003ff
   16700:	feffffff 	.word	0xfeffffff
   16704:	000007fe 	.word	0x000007fe
   16708:	000007ff 	.word	0x000007ff

0001670c <__aeabi_dsub>:
   1670c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1670e:	4646      	mov	r6, r8
   16710:	46d6      	mov	lr, sl
   16712:	464f      	mov	r7, r9
   16714:	030c      	lsls	r4, r1, #12
   16716:	b5c0      	push	{r6, r7, lr}
   16718:	0fcd      	lsrs	r5, r1, #31
   1671a:	004e      	lsls	r6, r1, #1
   1671c:	0a61      	lsrs	r1, r4, #9
   1671e:	0f44      	lsrs	r4, r0, #29
   16720:	430c      	orrs	r4, r1
   16722:	00c1      	lsls	r1, r0, #3
   16724:	0058      	lsls	r0, r3, #1
   16726:	0d40      	lsrs	r0, r0, #21
   16728:	4684      	mov	ip, r0
   1672a:	468a      	mov	sl, r1
   1672c:	000f      	movs	r7, r1
   1672e:	0319      	lsls	r1, r3, #12
   16730:	0f50      	lsrs	r0, r2, #29
   16732:	0a49      	lsrs	r1, r1, #9
   16734:	4301      	orrs	r1, r0
   16736:	48c6      	ldr	r0, [pc, #792]	; (16a50 <__aeabi_dsub+0x344>)
   16738:	0d76      	lsrs	r6, r6, #21
   1673a:	46a8      	mov	r8, r5
   1673c:	0fdb      	lsrs	r3, r3, #31
   1673e:	00d2      	lsls	r2, r2, #3
   16740:	4584      	cmp	ip, r0
   16742:	d100      	bne.n	16746 <__aeabi_dsub+0x3a>
   16744:	e0d8      	b.n	168f8 <__aeabi_dsub+0x1ec>
   16746:	2001      	movs	r0, #1
   16748:	4043      	eors	r3, r0
   1674a:	42ab      	cmp	r3, r5
   1674c:	d100      	bne.n	16750 <__aeabi_dsub+0x44>
   1674e:	e0a6      	b.n	1689e <__aeabi_dsub+0x192>
   16750:	4660      	mov	r0, ip
   16752:	1a35      	subs	r5, r6, r0
   16754:	2d00      	cmp	r5, #0
   16756:	dc00      	bgt.n	1675a <__aeabi_dsub+0x4e>
   16758:	e105      	b.n	16966 <__aeabi_dsub+0x25a>
   1675a:	2800      	cmp	r0, #0
   1675c:	d110      	bne.n	16780 <__aeabi_dsub+0x74>
   1675e:	000b      	movs	r3, r1
   16760:	4313      	orrs	r3, r2
   16762:	d100      	bne.n	16766 <__aeabi_dsub+0x5a>
   16764:	e0d7      	b.n	16916 <__aeabi_dsub+0x20a>
   16766:	1e6b      	subs	r3, r5, #1
   16768:	2b00      	cmp	r3, #0
   1676a:	d000      	beq.n	1676e <__aeabi_dsub+0x62>
   1676c:	e14b      	b.n	16a06 <__aeabi_dsub+0x2fa>
   1676e:	4653      	mov	r3, sl
   16770:	1a9f      	subs	r7, r3, r2
   16772:	45ba      	cmp	sl, r7
   16774:	4180      	sbcs	r0, r0
   16776:	1a64      	subs	r4, r4, r1
   16778:	4240      	negs	r0, r0
   1677a:	1a24      	subs	r4, r4, r0
   1677c:	2601      	movs	r6, #1
   1677e:	e01e      	b.n	167be <__aeabi_dsub+0xb2>
   16780:	4bb3      	ldr	r3, [pc, #716]	; (16a50 <__aeabi_dsub+0x344>)
   16782:	429e      	cmp	r6, r3
   16784:	d048      	beq.n	16818 <__aeabi_dsub+0x10c>
   16786:	2380      	movs	r3, #128	; 0x80
   16788:	041b      	lsls	r3, r3, #16
   1678a:	4319      	orrs	r1, r3
   1678c:	2d38      	cmp	r5, #56	; 0x38
   1678e:	dd00      	ble.n	16792 <__aeabi_dsub+0x86>
   16790:	e119      	b.n	169c6 <__aeabi_dsub+0x2ba>
   16792:	2d1f      	cmp	r5, #31
   16794:	dd00      	ble.n	16798 <__aeabi_dsub+0x8c>
   16796:	e14c      	b.n	16a32 <__aeabi_dsub+0x326>
   16798:	2320      	movs	r3, #32
   1679a:	000f      	movs	r7, r1
   1679c:	1b5b      	subs	r3, r3, r5
   1679e:	0010      	movs	r0, r2
   167a0:	409a      	lsls	r2, r3
   167a2:	409f      	lsls	r7, r3
   167a4:	40e8      	lsrs	r0, r5
   167a6:	1e53      	subs	r3, r2, #1
   167a8:	419a      	sbcs	r2, r3
   167aa:	40e9      	lsrs	r1, r5
   167ac:	4307      	orrs	r7, r0
   167ae:	4317      	orrs	r7, r2
   167b0:	4653      	mov	r3, sl
   167b2:	1bdf      	subs	r7, r3, r7
   167b4:	1a61      	subs	r1, r4, r1
   167b6:	45ba      	cmp	sl, r7
   167b8:	41a4      	sbcs	r4, r4
   167ba:	4264      	negs	r4, r4
   167bc:	1b0c      	subs	r4, r1, r4
   167be:	0223      	lsls	r3, r4, #8
   167c0:	d400      	bmi.n	167c4 <__aeabi_dsub+0xb8>
   167c2:	e0c5      	b.n	16950 <__aeabi_dsub+0x244>
   167c4:	0264      	lsls	r4, r4, #9
   167c6:	0a65      	lsrs	r5, r4, #9
   167c8:	2d00      	cmp	r5, #0
   167ca:	d100      	bne.n	167ce <__aeabi_dsub+0xc2>
   167cc:	e0f6      	b.n	169bc <__aeabi_dsub+0x2b0>
   167ce:	0028      	movs	r0, r5
   167d0:	f000 fc3c 	bl	1704c <__clzsi2>
   167d4:	0003      	movs	r3, r0
   167d6:	3b08      	subs	r3, #8
   167d8:	2b1f      	cmp	r3, #31
   167da:	dd00      	ble.n	167de <__aeabi_dsub+0xd2>
   167dc:	e0e9      	b.n	169b2 <__aeabi_dsub+0x2a6>
   167de:	2220      	movs	r2, #32
   167e0:	003c      	movs	r4, r7
   167e2:	1ad2      	subs	r2, r2, r3
   167e4:	409d      	lsls	r5, r3
   167e6:	40d4      	lsrs	r4, r2
   167e8:	409f      	lsls	r7, r3
   167ea:	4325      	orrs	r5, r4
   167ec:	429e      	cmp	r6, r3
   167ee:	dd00      	ble.n	167f2 <__aeabi_dsub+0xe6>
   167f0:	e0db      	b.n	169aa <__aeabi_dsub+0x29e>
   167f2:	1b9e      	subs	r6, r3, r6
   167f4:	1c73      	adds	r3, r6, #1
   167f6:	2b1f      	cmp	r3, #31
   167f8:	dd00      	ble.n	167fc <__aeabi_dsub+0xf0>
   167fa:	e10a      	b.n	16a12 <__aeabi_dsub+0x306>
   167fc:	2220      	movs	r2, #32
   167fe:	0038      	movs	r0, r7
   16800:	1ad2      	subs	r2, r2, r3
   16802:	0029      	movs	r1, r5
   16804:	4097      	lsls	r7, r2
   16806:	002c      	movs	r4, r5
   16808:	4091      	lsls	r1, r2
   1680a:	40d8      	lsrs	r0, r3
   1680c:	1e7a      	subs	r2, r7, #1
   1680e:	4197      	sbcs	r7, r2
   16810:	40dc      	lsrs	r4, r3
   16812:	2600      	movs	r6, #0
   16814:	4301      	orrs	r1, r0
   16816:	430f      	orrs	r7, r1
   16818:	077b      	lsls	r3, r7, #29
   1681a:	d009      	beq.n	16830 <__aeabi_dsub+0x124>
   1681c:	230f      	movs	r3, #15
   1681e:	403b      	ands	r3, r7
   16820:	2b04      	cmp	r3, #4
   16822:	d005      	beq.n	16830 <__aeabi_dsub+0x124>
   16824:	1d3b      	adds	r3, r7, #4
   16826:	42bb      	cmp	r3, r7
   16828:	41bf      	sbcs	r7, r7
   1682a:	427f      	negs	r7, r7
   1682c:	19e4      	adds	r4, r4, r7
   1682e:	001f      	movs	r7, r3
   16830:	0223      	lsls	r3, r4, #8
   16832:	d525      	bpl.n	16880 <__aeabi_dsub+0x174>
   16834:	4b86      	ldr	r3, [pc, #536]	; (16a50 <__aeabi_dsub+0x344>)
   16836:	3601      	adds	r6, #1
   16838:	429e      	cmp	r6, r3
   1683a:	d100      	bne.n	1683e <__aeabi_dsub+0x132>
   1683c:	e0af      	b.n	1699e <__aeabi_dsub+0x292>
   1683e:	4b85      	ldr	r3, [pc, #532]	; (16a54 <__aeabi_dsub+0x348>)
   16840:	2501      	movs	r5, #1
   16842:	401c      	ands	r4, r3
   16844:	4643      	mov	r3, r8
   16846:	0762      	lsls	r2, r4, #29
   16848:	08ff      	lsrs	r7, r7, #3
   1684a:	0264      	lsls	r4, r4, #9
   1684c:	0576      	lsls	r6, r6, #21
   1684e:	4317      	orrs	r7, r2
   16850:	0b24      	lsrs	r4, r4, #12
   16852:	0d76      	lsrs	r6, r6, #21
   16854:	401d      	ands	r5, r3
   16856:	2100      	movs	r1, #0
   16858:	0324      	lsls	r4, r4, #12
   1685a:	0b23      	lsrs	r3, r4, #12
   1685c:	0d0c      	lsrs	r4, r1, #20
   1685e:	4a7e      	ldr	r2, [pc, #504]	; (16a58 <__aeabi_dsub+0x34c>)
   16860:	0524      	lsls	r4, r4, #20
   16862:	431c      	orrs	r4, r3
   16864:	4014      	ands	r4, r2
   16866:	0533      	lsls	r3, r6, #20
   16868:	4323      	orrs	r3, r4
   1686a:	005b      	lsls	r3, r3, #1
   1686c:	07ed      	lsls	r5, r5, #31
   1686e:	085b      	lsrs	r3, r3, #1
   16870:	432b      	orrs	r3, r5
   16872:	0038      	movs	r0, r7
   16874:	0019      	movs	r1, r3
   16876:	bc1c      	pop	{r2, r3, r4}
   16878:	4690      	mov	r8, r2
   1687a:	4699      	mov	r9, r3
   1687c:	46a2      	mov	sl, r4
   1687e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16880:	2501      	movs	r5, #1
   16882:	4643      	mov	r3, r8
   16884:	0762      	lsls	r2, r4, #29
   16886:	08ff      	lsrs	r7, r7, #3
   16888:	4317      	orrs	r7, r2
   1688a:	08e4      	lsrs	r4, r4, #3
   1688c:	401d      	ands	r5, r3
   1688e:	4b70      	ldr	r3, [pc, #448]	; (16a50 <__aeabi_dsub+0x344>)
   16890:	429e      	cmp	r6, r3
   16892:	d036      	beq.n	16902 <__aeabi_dsub+0x1f6>
   16894:	0324      	lsls	r4, r4, #12
   16896:	0576      	lsls	r6, r6, #21
   16898:	0b24      	lsrs	r4, r4, #12
   1689a:	0d76      	lsrs	r6, r6, #21
   1689c:	e7db      	b.n	16856 <__aeabi_dsub+0x14a>
   1689e:	4663      	mov	r3, ip
   168a0:	1af3      	subs	r3, r6, r3
   168a2:	2b00      	cmp	r3, #0
   168a4:	dc00      	bgt.n	168a8 <__aeabi_dsub+0x19c>
   168a6:	e094      	b.n	169d2 <__aeabi_dsub+0x2c6>
   168a8:	4660      	mov	r0, ip
   168aa:	2800      	cmp	r0, #0
   168ac:	d035      	beq.n	1691a <__aeabi_dsub+0x20e>
   168ae:	4868      	ldr	r0, [pc, #416]	; (16a50 <__aeabi_dsub+0x344>)
   168b0:	4286      	cmp	r6, r0
   168b2:	d0b1      	beq.n	16818 <__aeabi_dsub+0x10c>
   168b4:	2780      	movs	r7, #128	; 0x80
   168b6:	043f      	lsls	r7, r7, #16
   168b8:	4339      	orrs	r1, r7
   168ba:	2b38      	cmp	r3, #56	; 0x38
   168bc:	dc00      	bgt.n	168c0 <__aeabi_dsub+0x1b4>
   168be:	e0fd      	b.n	16abc <__aeabi_dsub+0x3b0>
   168c0:	430a      	orrs	r2, r1
   168c2:	0017      	movs	r7, r2
   168c4:	2100      	movs	r1, #0
   168c6:	1e7a      	subs	r2, r7, #1
   168c8:	4197      	sbcs	r7, r2
   168ca:	4457      	add	r7, sl
   168cc:	4557      	cmp	r7, sl
   168ce:	4180      	sbcs	r0, r0
   168d0:	1909      	adds	r1, r1, r4
   168d2:	4244      	negs	r4, r0
   168d4:	190c      	adds	r4, r1, r4
   168d6:	0223      	lsls	r3, r4, #8
   168d8:	d53a      	bpl.n	16950 <__aeabi_dsub+0x244>
   168da:	4b5d      	ldr	r3, [pc, #372]	; (16a50 <__aeabi_dsub+0x344>)
   168dc:	3601      	adds	r6, #1
   168de:	429e      	cmp	r6, r3
   168e0:	d100      	bne.n	168e4 <__aeabi_dsub+0x1d8>
   168e2:	e14b      	b.n	16b7c <__aeabi_dsub+0x470>
   168e4:	2201      	movs	r2, #1
   168e6:	4b5b      	ldr	r3, [pc, #364]	; (16a54 <__aeabi_dsub+0x348>)
   168e8:	401c      	ands	r4, r3
   168ea:	087b      	lsrs	r3, r7, #1
   168ec:	4017      	ands	r7, r2
   168ee:	431f      	orrs	r7, r3
   168f0:	07e2      	lsls	r2, r4, #31
   168f2:	4317      	orrs	r7, r2
   168f4:	0864      	lsrs	r4, r4, #1
   168f6:	e78f      	b.n	16818 <__aeabi_dsub+0x10c>
   168f8:	0008      	movs	r0, r1
   168fa:	4310      	orrs	r0, r2
   168fc:	d000      	beq.n	16900 <__aeabi_dsub+0x1f4>
   168fe:	e724      	b.n	1674a <__aeabi_dsub+0x3e>
   16900:	e721      	b.n	16746 <__aeabi_dsub+0x3a>
   16902:	0023      	movs	r3, r4
   16904:	433b      	orrs	r3, r7
   16906:	d100      	bne.n	1690a <__aeabi_dsub+0x1fe>
   16908:	e1b9      	b.n	16c7e <__aeabi_dsub+0x572>
   1690a:	2280      	movs	r2, #128	; 0x80
   1690c:	0312      	lsls	r2, r2, #12
   1690e:	4314      	orrs	r4, r2
   16910:	0324      	lsls	r4, r4, #12
   16912:	0b24      	lsrs	r4, r4, #12
   16914:	e79f      	b.n	16856 <__aeabi_dsub+0x14a>
   16916:	002e      	movs	r6, r5
   16918:	e77e      	b.n	16818 <__aeabi_dsub+0x10c>
   1691a:	0008      	movs	r0, r1
   1691c:	4310      	orrs	r0, r2
   1691e:	d100      	bne.n	16922 <__aeabi_dsub+0x216>
   16920:	e0ca      	b.n	16ab8 <__aeabi_dsub+0x3ac>
   16922:	1e58      	subs	r0, r3, #1
   16924:	4684      	mov	ip, r0
   16926:	2800      	cmp	r0, #0
   16928:	d000      	beq.n	1692c <__aeabi_dsub+0x220>
   1692a:	e0e7      	b.n	16afc <__aeabi_dsub+0x3f0>
   1692c:	4452      	add	r2, sl
   1692e:	4552      	cmp	r2, sl
   16930:	4180      	sbcs	r0, r0
   16932:	1864      	adds	r4, r4, r1
   16934:	4240      	negs	r0, r0
   16936:	1824      	adds	r4, r4, r0
   16938:	0017      	movs	r7, r2
   1693a:	2601      	movs	r6, #1
   1693c:	0223      	lsls	r3, r4, #8
   1693e:	d507      	bpl.n	16950 <__aeabi_dsub+0x244>
   16940:	2602      	movs	r6, #2
   16942:	e7cf      	b.n	168e4 <__aeabi_dsub+0x1d8>
   16944:	4664      	mov	r4, ip
   16946:	432c      	orrs	r4, r5
   16948:	d100      	bne.n	1694c <__aeabi_dsub+0x240>
   1694a:	e1b3      	b.n	16cb4 <__aeabi_dsub+0x5a8>
   1694c:	002c      	movs	r4, r5
   1694e:	4667      	mov	r7, ip
   16950:	077b      	lsls	r3, r7, #29
   16952:	d000      	beq.n	16956 <__aeabi_dsub+0x24a>
   16954:	e762      	b.n	1681c <__aeabi_dsub+0x110>
   16956:	0763      	lsls	r3, r4, #29
   16958:	08ff      	lsrs	r7, r7, #3
   1695a:	431f      	orrs	r7, r3
   1695c:	2501      	movs	r5, #1
   1695e:	4643      	mov	r3, r8
   16960:	08e4      	lsrs	r4, r4, #3
   16962:	401d      	ands	r5, r3
   16964:	e793      	b.n	1688e <__aeabi_dsub+0x182>
   16966:	2d00      	cmp	r5, #0
   16968:	d178      	bne.n	16a5c <__aeabi_dsub+0x350>
   1696a:	1c75      	adds	r5, r6, #1
   1696c:	056d      	lsls	r5, r5, #21
   1696e:	0d6d      	lsrs	r5, r5, #21
   16970:	2d01      	cmp	r5, #1
   16972:	dc00      	bgt.n	16976 <__aeabi_dsub+0x26a>
   16974:	e0f2      	b.n	16b5c <__aeabi_dsub+0x450>
   16976:	4650      	mov	r0, sl
   16978:	1a80      	subs	r0, r0, r2
   1697a:	4582      	cmp	sl, r0
   1697c:	41bf      	sbcs	r7, r7
   1697e:	1a65      	subs	r5, r4, r1
   16980:	427f      	negs	r7, r7
   16982:	1bed      	subs	r5, r5, r7
   16984:	4684      	mov	ip, r0
   16986:	0228      	lsls	r0, r5, #8
   16988:	d400      	bmi.n	1698c <__aeabi_dsub+0x280>
   1698a:	e08c      	b.n	16aa6 <__aeabi_dsub+0x39a>
   1698c:	4650      	mov	r0, sl
   1698e:	1a17      	subs	r7, r2, r0
   16990:	42ba      	cmp	r2, r7
   16992:	4192      	sbcs	r2, r2
   16994:	1b0c      	subs	r4, r1, r4
   16996:	4255      	negs	r5, r2
   16998:	1b65      	subs	r5, r4, r5
   1699a:	4698      	mov	r8, r3
   1699c:	e714      	b.n	167c8 <__aeabi_dsub+0xbc>
   1699e:	2501      	movs	r5, #1
   169a0:	4643      	mov	r3, r8
   169a2:	2400      	movs	r4, #0
   169a4:	401d      	ands	r5, r3
   169a6:	2700      	movs	r7, #0
   169a8:	e755      	b.n	16856 <__aeabi_dsub+0x14a>
   169aa:	4c2a      	ldr	r4, [pc, #168]	; (16a54 <__aeabi_dsub+0x348>)
   169ac:	1af6      	subs	r6, r6, r3
   169ae:	402c      	ands	r4, r5
   169b0:	e732      	b.n	16818 <__aeabi_dsub+0x10c>
   169b2:	003d      	movs	r5, r7
   169b4:	3828      	subs	r0, #40	; 0x28
   169b6:	4085      	lsls	r5, r0
   169b8:	2700      	movs	r7, #0
   169ba:	e717      	b.n	167ec <__aeabi_dsub+0xe0>
   169bc:	0038      	movs	r0, r7
   169be:	f000 fb45 	bl	1704c <__clzsi2>
   169c2:	3020      	adds	r0, #32
   169c4:	e706      	b.n	167d4 <__aeabi_dsub+0xc8>
   169c6:	430a      	orrs	r2, r1
   169c8:	0017      	movs	r7, r2
   169ca:	2100      	movs	r1, #0
   169cc:	1e7a      	subs	r2, r7, #1
   169ce:	4197      	sbcs	r7, r2
   169d0:	e6ee      	b.n	167b0 <__aeabi_dsub+0xa4>
   169d2:	2b00      	cmp	r3, #0
   169d4:	d000      	beq.n	169d8 <__aeabi_dsub+0x2cc>
   169d6:	e0e5      	b.n	16ba4 <__aeabi_dsub+0x498>
   169d8:	1c73      	adds	r3, r6, #1
   169da:	469c      	mov	ip, r3
   169dc:	055b      	lsls	r3, r3, #21
   169de:	0d5b      	lsrs	r3, r3, #21
   169e0:	2b01      	cmp	r3, #1
   169e2:	dc00      	bgt.n	169e6 <__aeabi_dsub+0x2da>
   169e4:	e09f      	b.n	16b26 <__aeabi_dsub+0x41a>
   169e6:	4b1a      	ldr	r3, [pc, #104]	; (16a50 <__aeabi_dsub+0x344>)
   169e8:	459c      	cmp	ip, r3
   169ea:	d100      	bne.n	169ee <__aeabi_dsub+0x2e2>
   169ec:	e0c5      	b.n	16b7a <__aeabi_dsub+0x46e>
   169ee:	4452      	add	r2, sl
   169f0:	4552      	cmp	r2, sl
   169f2:	4180      	sbcs	r0, r0
   169f4:	1864      	adds	r4, r4, r1
   169f6:	4240      	negs	r0, r0
   169f8:	1824      	adds	r4, r4, r0
   169fa:	07e7      	lsls	r7, r4, #31
   169fc:	0852      	lsrs	r2, r2, #1
   169fe:	4317      	orrs	r7, r2
   16a00:	0864      	lsrs	r4, r4, #1
   16a02:	4666      	mov	r6, ip
   16a04:	e708      	b.n	16818 <__aeabi_dsub+0x10c>
   16a06:	4812      	ldr	r0, [pc, #72]	; (16a50 <__aeabi_dsub+0x344>)
   16a08:	4285      	cmp	r5, r0
   16a0a:	d100      	bne.n	16a0e <__aeabi_dsub+0x302>
   16a0c:	e085      	b.n	16b1a <__aeabi_dsub+0x40e>
   16a0e:	001d      	movs	r5, r3
   16a10:	e6bc      	b.n	1678c <__aeabi_dsub+0x80>
   16a12:	0029      	movs	r1, r5
   16a14:	3e1f      	subs	r6, #31
   16a16:	40f1      	lsrs	r1, r6
   16a18:	2b20      	cmp	r3, #32
   16a1a:	d100      	bne.n	16a1e <__aeabi_dsub+0x312>
   16a1c:	e07f      	b.n	16b1e <__aeabi_dsub+0x412>
   16a1e:	2240      	movs	r2, #64	; 0x40
   16a20:	1ad3      	subs	r3, r2, r3
   16a22:	409d      	lsls	r5, r3
   16a24:	432f      	orrs	r7, r5
   16a26:	1e7d      	subs	r5, r7, #1
   16a28:	41af      	sbcs	r7, r5
   16a2a:	2400      	movs	r4, #0
   16a2c:	430f      	orrs	r7, r1
   16a2e:	2600      	movs	r6, #0
   16a30:	e78e      	b.n	16950 <__aeabi_dsub+0x244>
   16a32:	002b      	movs	r3, r5
   16a34:	000f      	movs	r7, r1
   16a36:	3b20      	subs	r3, #32
   16a38:	40df      	lsrs	r7, r3
   16a3a:	2d20      	cmp	r5, #32
   16a3c:	d071      	beq.n	16b22 <__aeabi_dsub+0x416>
   16a3e:	2340      	movs	r3, #64	; 0x40
   16a40:	1b5d      	subs	r5, r3, r5
   16a42:	40a9      	lsls	r1, r5
   16a44:	430a      	orrs	r2, r1
   16a46:	1e51      	subs	r1, r2, #1
   16a48:	418a      	sbcs	r2, r1
   16a4a:	2100      	movs	r1, #0
   16a4c:	4317      	orrs	r7, r2
   16a4e:	e6af      	b.n	167b0 <__aeabi_dsub+0xa4>
   16a50:	000007ff 	.word	0x000007ff
   16a54:	ff7fffff 	.word	0xff7fffff
   16a58:	800fffff 	.word	0x800fffff
   16a5c:	2e00      	cmp	r6, #0
   16a5e:	d03e      	beq.n	16ade <__aeabi_dsub+0x3d2>
   16a60:	4eb3      	ldr	r6, [pc, #716]	; (16d30 <__aeabi_dsub+0x624>)
   16a62:	45b4      	cmp	ip, r6
   16a64:	d045      	beq.n	16af2 <__aeabi_dsub+0x3e6>
   16a66:	2680      	movs	r6, #128	; 0x80
   16a68:	0436      	lsls	r6, r6, #16
   16a6a:	426d      	negs	r5, r5
   16a6c:	4334      	orrs	r4, r6
   16a6e:	2d38      	cmp	r5, #56	; 0x38
   16a70:	dd00      	ble.n	16a74 <__aeabi_dsub+0x368>
   16a72:	e0a8      	b.n	16bc6 <__aeabi_dsub+0x4ba>
   16a74:	2d1f      	cmp	r5, #31
   16a76:	dd00      	ble.n	16a7a <__aeabi_dsub+0x36e>
   16a78:	e11f      	b.n	16cba <__aeabi_dsub+0x5ae>
   16a7a:	2620      	movs	r6, #32
   16a7c:	0027      	movs	r7, r4
   16a7e:	4650      	mov	r0, sl
   16a80:	1b76      	subs	r6, r6, r5
   16a82:	40b7      	lsls	r7, r6
   16a84:	40e8      	lsrs	r0, r5
   16a86:	4307      	orrs	r7, r0
   16a88:	4650      	mov	r0, sl
   16a8a:	40b0      	lsls	r0, r6
   16a8c:	1e46      	subs	r6, r0, #1
   16a8e:	41b0      	sbcs	r0, r6
   16a90:	40ec      	lsrs	r4, r5
   16a92:	4338      	orrs	r0, r7
   16a94:	1a17      	subs	r7, r2, r0
   16a96:	42ba      	cmp	r2, r7
   16a98:	4192      	sbcs	r2, r2
   16a9a:	1b0c      	subs	r4, r1, r4
   16a9c:	4252      	negs	r2, r2
   16a9e:	1aa4      	subs	r4, r4, r2
   16aa0:	4666      	mov	r6, ip
   16aa2:	4698      	mov	r8, r3
   16aa4:	e68b      	b.n	167be <__aeabi_dsub+0xb2>
   16aa6:	4664      	mov	r4, ip
   16aa8:	4667      	mov	r7, ip
   16aaa:	432c      	orrs	r4, r5
   16aac:	d000      	beq.n	16ab0 <__aeabi_dsub+0x3a4>
   16aae:	e68b      	b.n	167c8 <__aeabi_dsub+0xbc>
   16ab0:	2500      	movs	r5, #0
   16ab2:	2600      	movs	r6, #0
   16ab4:	2700      	movs	r7, #0
   16ab6:	e6ea      	b.n	1688e <__aeabi_dsub+0x182>
   16ab8:	001e      	movs	r6, r3
   16aba:	e6ad      	b.n	16818 <__aeabi_dsub+0x10c>
   16abc:	2b1f      	cmp	r3, #31
   16abe:	dc60      	bgt.n	16b82 <__aeabi_dsub+0x476>
   16ac0:	2720      	movs	r7, #32
   16ac2:	1af8      	subs	r0, r7, r3
   16ac4:	000f      	movs	r7, r1
   16ac6:	4684      	mov	ip, r0
   16ac8:	4087      	lsls	r7, r0
   16aca:	0010      	movs	r0, r2
   16acc:	40d8      	lsrs	r0, r3
   16ace:	4307      	orrs	r7, r0
   16ad0:	4660      	mov	r0, ip
   16ad2:	4082      	lsls	r2, r0
   16ad4:	1e50      	subs	r0, r2, #1
   16ad6:	4182      	sbcs	r2, r0
   16ad8:	40d9      	lsrs	r1, r3
   16ada:	4317      	orrs	r7, r2
   16adc:	e6f5      	b.n	168ca <__aeabi_dsub+0x1be>
   16ade:	0026      	movs	r6, r4
   16ae0:	4650      	mov	r0, sl
   16ae2:	4306      	orrs	r6, r0
   16ae4:	d005      	beq.n	16af2 <__aeabi_dsub+0x3e6>
   16ae6:	43ed      	mvns	r5, r5
   16ae8:	2d00      	cmp	r5, #0
   16aea:	d0d3      	beq.n	16a94 <__aeabi_dsub+0x388>
   16aec:	4e90      	ldr	r6, [pc, #576]	; (16d30 <__aeabi_dsub+0x624>)
   16aee:	45b4      	cmp	ip, r6
   16af0:	d1bd      	bne.n	16a6e <__aeabi_dsub+0x362>
   16af2:	000c      	movs	r4, r1
   16af4:	0017      	movs	r7, r2
   16af6:	4666      	mov	r6, ip
   16af8:	4698      	mov	r8, r3
   16afa:	e68d      	b.n	16818 <__aeabi_dsub+0x10c>
   16afc:	488c      	ldr	r0, [pc, #560]	; (16d30 <__aeabi_dsub+0x624>)
   16afe:	4283      	cmp	r3, r0
   16b00:	d00b      	beq.n	16b1a <__aeabi_dsub+0x40e>
   16b02:	4663      	mov	r3, ip
   16b04:	e6d9      	b.n	168ba <__aeabi_dsub+0x1ae>
   16b06:	2d00      	cmp	r5, #0
   16b08:	d000      	beq.n	16b0c <__aeabi_dsub+0x400>
   16b0a:	e096      	b.n	16c3a <__aeabi_dsub+0x52e>
   16b0c:	0008      	movs	r0, r1
   16b0e:	4310      	orrs	r0, r2
   16b10:	d100      	bne.n	16b14 <__aeabi_dsub+0x408>
   16b12:	e0e2      	b.n	16cda <__aeabi_dsub+0x5ce>
   16b14:	000c      	movs	r4, r1
   16b16:	0017      	movs	r7, r2
   16b18:	4698      	mov	r8, r3
   16b1a:	4e85      	ldr	r6, [pc, #532]	; (16d30 <__aeabi_dsub+0x624>)
   16b1c:	e67c      	b.n	16818 <__aeabi_dsub+0x10c>
   16b1e:	2500      	movs	r5, #0
   16b20:	e780      	b.n	16a24 <__aeabi_dsub+0x318>
   16b22:	2100      	movs	r1, #0
   16b24:	e78e      	b.n	16a44 <__aeabi_dsub+0x338>
   16b26:	0023      	movs	r3, r4
   16b28:	4650      	mov	r0, sl
   16b2a:	4303      	orrs	r3, r0
   16b2c:	2e00      	cmp	r6, #0
   16b2e:	d000      	beq.n	16b32 <__aeabi_dsub+0x426>
   16b30:	e0a8      	b.n	16c84 <__aeabi_dsub+0x578>
   16b32:	2b00      	cmp	r3, #0
   16b34:	d100      	bne.n	16b38 <__aeabi_dsub+0x42c>
   16b36:	e0de      	b.n	16cf6 <__aeabi_dsub+0x5ea>
   16b38:	000b      	movs	r3, r1
   16b3a:	4313      	orrs	r3, r2
   16b3c:	d100      	bne.n	16b40 <__aeabi_dsub+0x434>
   16b3e:	e66b      	b.n	16818 <__aeabi_dsub+0x10c>
   16b40:	4452      	add	r2, sl
   16b42:	4552      	cmp	r2, sl
   16b44:	4180      	sbcs	r0, r0
   16b46:	1864      	adds	r4, r4, r1
   16b48:	4240      	negs	r0, r0
   16b4a:	1824      	adds	r4, r4, r0
   16b4c:	0017      	movs	r7, r2
   16b4e:	0223      	lsls	r3, r4, #8
   16b50:	d400      	bmi.n	16b54 <__aeabi_dsub+0x448>
   16b52:	e6fd      	b.n	16950 <__aeabi_dsub+0x244>
   16b54:	4b77      	ldr	r3, [pc, #476]	; (16d34 <__aeabi_dsub+0x628>)
   16b56:	4666      	mov	r6, ip
   16b58:	401c      	ands	r4, r3
   16b5a:	e65d      	b.n	16818 <__aeabi_dsub+0x10c>
   16b5c:	0025      	movs	r5, r4
   16b5e:	4650      	mov	r0, sl
   16b60:	4305      	orrs	r5, r0
   16b62:	2e00      	cmp	r6, #0
   16b64:	d1cf      	bne.n	16b06 <__aeabi_dsub+0x3fa>
   16b66:	2d00      	cmp	r5, #0
   16b68:	d14f      	bne.n	16c0a <__aeabi_dsub+0x4fe>
   16b6a:	000c      	movs	r4, r1
   16b6c:	4314      	orrs	r4, r2
   16b6e:	d100      	bne.n	16b72 <__aeabi_dsub+0x466>
   16b70:	e0a0      	b.n	16cb4 <__aeabi_dsub+0x5a8>
   16b72:	000c      	movs	r4, r1
   16b74:	0017      	movs	r7, r2
   16b76:	4698      	mov	r8, r3
   16b78:	e64e      	b.n	16818 <__aeabi_dsub+0x10c>
   16b7a:	4666      	mov	r6, ip
   16b7c:	2400      	movs	r4, #0
   16b7e:	2700      	movs	r7, #0
   16b80:	e685      	b.n	1688e <__aeabi_dsub+0x182>
   16b82:	001f      	movs	r7, r3
   16b84:	0008      	movs	r0, r1
   16b86:	3f20      	subs	r7, #32
   16b88:	40f8      	lsrs	r0, r7
   16b8a:	0007      	movs	r7, r0
   16b8c:	2b20      	cmp	r3, #32
   16b8e:	d100      	bne.n	16b92 <__aeabi_dsub+0x486>
   16b90:	e08e      	b.n	16cb0 <__aeabi_dsub+0x5a4>
   16b92:	2040      	movs	r0, #64	; 0x40
   16b94:	1ac3      	subs	r3, r0, r3
   16b96:	4099      	lsls	r1, r3
   16b98:	430a      	orrs	r2, r1
   16b9a:	1e51      	subs	r1, r2, #1
   16b9c:	418a      	sbcs	r2, r1
   16b9e:	2100      	movs	r1, #0
   16ba0:	4317      	orrs	r7, r2
   16ba2:	e692      	b.n	168ca <__aeabi_dsub+0x1be>
   16ba4:	2e00      	cmp	r6, #0
   16ba6:	d114      	bne.n	16bd2 <__aeabi_dsub+0x4c6>
   16ba8:	0026      	movs	r6, r4
   16baa:	4650      	mov	r0, sl
   16bac:	4306      	orrs	r6, r0
   16bae:	d062      	beq.n	16c76 <__aeabi_dsub+0x56a>
   16bb0:	43db      	mvns	r3, r3
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d15c      	bne.n	16c70 <__aeabi_dsub+0x564>
   16bb6:	1887      	adds	r7, r0, r2
   16bb8:	4297      	cmp	r7, r2
   16bba:	4192      	sbcs	r2, r2
   16bbc:	1864      	adds	r4, r4, r1
   16bbe:	4252      	negs	r2, r2
   16bc0:	18a4      	adds	r4, r4, r2
   16bc2:	4666      	mov	r6, ip
   16bc4:	e687      	b.n	168d6 <__aeabi_dsub+0x1ca>
   16bc6:	4650      	mov	r0, sl
   16bc8:	4320      	orrs	r0, r4
   16bca:	1e44      	subs	r4, r0, #1
   16bcc:	41a0      	sbcs	r0, r4
   16bce:	2400      	movs	r4, #0
   16bd0:	e760      	b.n	16a94 <__aeabi_dsub+0x388>
   16bd2:	4e57      	ldr	r6, [pc, #348]	; (16d30 <__aeabi_dsub+0x624>)
   16bd4:	45b4      	cmp	ip, r6
   16bd6:	d04e      	beq.n	16c76 <__aeabi_dsub+0x56a>
   16bd8:	2680      	movs	r6, #128	; 0x80
   16bda:	0436      	lsls	r6, r6, #16
   16bdc:	425b      	negs	r3, r3
   16bde:	4334      	orrs	r4, r6
   16be0:	2b38      	cmp	r3, #56	; 0x38
   16be2:	dd00      	ble.n	16be6 <__aeabi_dsub+0x4da>
   16be4:	e07f      	b.n	16ce6 <__aeabi_dsub+0x5da>
   16be6:	2b1f      	cmp	r3, #31
   16be8:	dd00      	ble.n	16bec <__aeabi_dsub+0x4e0>
   16bea:	e08b      	b.n	16d04 <__aeabi_dsub+0x5f8>
   16bec:	2620      	movs	r6, #32
   16bee:	0027      	movs	r7, r4
   16bf0:	4650      	mov	r0, sl
   16bf2:	1af6      	subs	r6, r6, r3
   16bf4:	40b7      	lsls	r7, r6
   16bf6:	40d8      	lsrs	r0, r3
   16bf8:	4307      	orrs	r7, r0
   16bfa:	4650      	mov	r0, sl
   16bfc:	40b0      	lsls	r0, r6
   16bfe:	1e46      	subs	r6, r0, #1
   16c00:	41b0      	sbcs	r0, r6
   16c02:	4307      	orrs	r7, r0
   16c04:	40dc      	lsrs	r4, r3
   16c06:	18bf      	adds	r7, r7, r2
   16c08:	e7d6      	b.n	16bb8 <__aeabi_dsub+0x4ac>
   16c0a:	000d      	movs	r5, r1
   16c0c:	4315      	orrs	r5, r2
   16c0e:	d100      	bne.n	16c12 <__aeabi_dsub+0x506>
   16c10:	e602      	b.n	16818 <__aeabi_dsub+0x10c>
   16c12:	4650      	mov	r0, sl
   16c14:	1a80      	subs	r0, r0, r2
   16c16:	4582      	cmp	sl, r0
   16c18:	41bf      	sbcs	r7, r7
   16c1a:	1a65      	subs	r5, r4, r1
   16c1c:	427f      	negs	r7, r7
   16c1e:	1bed      	subs	r5, r5, r7
   16c20:	4684      	mov	ip, r0
   16c22:	0228      	lsls	r0, r5, #8
   16c24:	d400      	bmi.n	16c28 <__aeabi_dsub+0x51c>
   16c26:	e68d      	b.n	16944 <__aeabi_dsub+0x238>
   16c28:	4650      	mov	r0, sl
   16c2a:	1a17      	subs	r7, r2, r0
   16c2c:	42ba      	cmp	r2, r7
   16c2e:	4192      	sbcs	r2, r2
   16c30:	1b0c      	subs	r4, r1, r4
   16c32:	4252      	negs	r2, r2
   16c34:	1aa4      	subs	r4, r4, r2
   16c36:	4698      	mov	r8, r3
   16c38:	e5ee      	b.n	16818 <__aeabi_dsub+0x10c>
   16c3a:	000d      	movs	r5, r1
   16c3c:	4315      	orrs	r5, r2
   16c3e:	d100      	bne.n	16c42 <__aeabi_dsub+0x536>
   16c40:	e76b      	b.n	16b1a <__aeabi_dsub+0x40e>
   16c42:	4650      	mov	r0, sl
   16c44:	0767      	lsls	r7, r4, #29
   16c46:	08c0      	lsrs	r0, r0, #3
   16c48:	4307      	orrs	r7, r0
   16c4a:	2080      	movs	r0, #128	; 0x80
   16c4c:	08e4      	lsrs	r4, r4, #3
   16c4e:	0300      	lsls	r0, r0, #12
   16c50:	4204      	tst	r4, r0
   16c52:	d007      	beq.n	16c64 <__aeabi_dsub+0x558>
   16c54:	08cd      	lsrs	r5, r1, #3
   16c56:	4205      	tst	r5, r0
   16c58:	d104      	bne.n	16c64 <__aeabi_dsub+0x558>
   16c5a:	002c      	movs	r4, r5
   16c5c:	4698      	mov	r8, r3
   16c5e:	08d7      	lsrs	r7, r2, #3
   16c60:	0749      	lsls	r1, r1, #29
   16c62:	430f      	orrs	r7, r1
   16c64:	0f7b      	lsrs	r3, r7, #29
   16c66:	00e4      	lsls	r4, r4, #3
   16c68:	431c      	orrs	r4, r3
   16c6a:	00ff      	lsls	r7, r7, #3
   16c6c:	4e30      	ldr	r6, [pc, #192]	; (16d30 <__aeabi_dsub+0x624>)
   16c6e:	e5d3      	b.n	16818 <__aeabi_dsub+0x10c>
   16c70:	4e2f      	ldr	r6, [pc, #188]	; (16d30 <__aeabi_dsub+0x624>)
   16c72:	45b4      	cmp	ip, r6
   16c74:	d1b4      	bne.n	16be0 <__aeabi_dsub+0x4d4>
   16c76:	000c      	movs	r4, r1
   16c78:	0017      	movs	r7, r2
   16c7a:	4666      	mov	r6, ip
   16c7c:	e5cc      	b.n	16818 <__aeabi_dsub+0x10c>
   16c7e:	2700      	movs	r7, #0
   16c80:	2400      	movs	r4, #0
   16c82:	e5e8      	b.n	16856 <__aeabi_dsub+0x14a>
   16c84:	2b00      	cmp	r3, #0
   16c86:	d039      	beq.n	16cfc <__aeabi_dsub+0x5f0>
   16c88:	000b      	movs	r3, r1
   16c8a:	4313      	orrs	r3, r2
   16c8c:	d100      	bne.n	16c90 <__aeabi_dsub+0x584>
   16c8e:	e744      	b.n	16b1a <__aeabi_dsub+0x40e>
   16c90:	08c0      	lsrs	r0, r0, #3
   16c92:	0767      	lsls	r7, r4, #29
   16c94:	4307      	orrs	r7, r0
   16c96:	2080      	movs	r0, #128	; 0x80
   16c98:	08e4      	lsrs	r4, r4, #3
   16c9a:	0300      	lsls	r0, r0, #12
   16c9c:	4204      	tst	r4, r0
   16c9e:	d0e1      	beq.n	16c64 <__aeabi_dsub+0x558>
   16ca0:	08cb      	lsrs	r3, r1, #3
   16ca2:	4203      	tst	r3, r0
   16ca4:	d1de      	bne.n	16c64 <__aeabi_dsub+0x558>
   16ca6:	08d7      	lsrs	r7, r2, #3
   16ca8:	0749      	lsls	r1, r1, #29
   16caa:	430f      	orrs	r7, r1
   16cac:	001c      	movs	r4, r3
   16cae:	e7d9      	b.n	16c64 <__aeabi_dsub+0x558>
   16cb0:	2100      	movs	r1, #0
   16cb2:	e771      	b.n	16b98 <__aeabi_dsub+0x48c>
   16cb4:	2500      	movs	r5, #0
   16cb6:	2700      	movs	r7, #0
   16cb8:	e5e9      	b.n	1688e <__aeabi_dsub+0x182>
   16cba:	002e      	movs	r6, r5
   16cbc:	0027      	movs	r7, r4
   16cbe:	3e20      	subs	r6, #32
   16cc0:	40f7      	lsrs	r7, r6
   16cc2:	2d20      	cmp	r5, #32
   16cc4:	d02f      	beq.n	16d26 <__aeabi_dsub+0x61a>
   16cc6:	2640      	movs	r6, #64	; 0x40
   16cc8:	1b75      	subs	r5, r6, r5
   16cca:	40ac      	lsls	r4, r5
   16ccc:	4650      	mov	r0, sl
   16cce:	4320      	orrs	r0, r4
   16cd0:	1e44      	subs	r4, r0, #1
   16cd2:	41a0      	sbcs	r0, r4
   16cd4:	2400      	movs	r4, #0
   16cd6:	4338      	orrs	r0, r7
   16cd8:	e6dc      	b.n	16a94 <__aeabi_dsub+0x388>
   16cda:	2480      	movs	r4, #128	; 0x80
   16cdc:	2500      	movs	r5, #0
   16cde:	0324      	lsls	r4, r4, #12
   16ce0:	4e13      	ldr	r6, [pc, #76]	; (16d30 <__aeabi_dsub+0x624>)
   16ce2:	2700      	movs	r7, #0
   16ce4:	e5d3      	b.n	1688e <__aeabi_dsub+0x182>
   16ce6:	4650      	mov	r0, sl
   16ce8:	4320      	orrs	r0, r4
   16cea:	0007      	movs	r7, r0
   16cec:	1e78      	subs	r0, r7, #1
   16cee:	4187      	sbcs	r7, r0
   16cf0:	2400      	movs	r4, #0
   16cf2:	18bf      	adds	r7, r7, r2
   16cf4:	e760      	b.n	16bb8 <__aeabi_dsub+0x4ac>
   16cf6:	000c      	movs	r4, r1
   16cf8:	0017      	movs	r7, r2
   16cfa:	e58d      	b.n	16818 <__aeabi_dsub+0x10c>
   16cfc:	000c      	movs	r4, r1
   16cfe:	0017      	movs	r7, r2
   16d00:	4e0b      	ldr	r6, [pc, #44]	; (16d30 <__aeabi_dsub+0x624>)
   16d02:	e589      	b.n	16818 <__aeabi_dsub+0x10c>
   16d04:	001e      	movs	r6, r3
   16d06:	0027      	movs	r7, r4
   16d08:	3e20      	subs	r6, #32
   16d0a:	40f7      	lsrs	r7, r6
   16d0c:	2b20      	cmp	r3, #32
   16d0e:	d00c      	beq.n	16d2a <__aeabi_dsub+0x61e>
   16d10:	2640      	movs	r6, #64	; 0x40
   16d12:	1af3      	subs	r3, r6, r3
   16d14:	409c      	lsls	r4, r3
   16d16:	4650      	mov	r0, sl
   16d18:	4320      	orrs	r0, r4
   16d1a:	1e44      	subs	r4, r0, #1
   16d1c:	41a0      	sbcs	r0, r4
   16d1e:	4307      	orrs	r7, r0
   16d20:	2400      	movs	r4, #0
   16d22:	18bf      	adds	r7, r7, r2
   16d24:	e748      	b.n	16bb8 <__aeabi_dsub+0x4ac>
   16d26:	2400      	movs	r4, #0
   16d28:	e7d0      	b.n	16ccc <__aeabi_dsub+0x5c0>
   16d2a:	2400      	movs	r4, #0
   16d2c:	e7f3      	b.n	16d16 <__aeabi_dsub+0x60a>
   16d2e:	46c0      	nop			; (mov r8, r8)
   16d30:	000007ff 	.word	0x000007ff
   16d34:	ff7fffff 	.word	0xff7fffff

00016d38 <__aeabi_d2iz>:
   16d38:	b530      	push	{r4, r5, lr}
   16d3a:	4d13      	ldr	r5, [pc, #76]	; (16d88 <__aeabi_d2iz+0x50>)
   16d3c:	030a      	lsls	r2, r1, #12
   16d3e:	004b      	lsls	r3, r1, #1
   16d40:	0b12      	lsrs	r2, r2, #12
   16d42:	0d5b      	lsrs	r3, r3, #21
   16d44:	0fc9      	lsrs	r1, r1, #31
   16d46:	2400      	movs	r4, #0
   16d48:	42ab      	cmp	r3, r5
   16d4a:	dd10      	ble.n	16d6e <__aeabi_d2iz+0x36>
   16d4c:	4c0f      	ldr	r4, [pc, #60]	; (16d8c <__aeabi_d2iz+0x54>)
   16d4e:	42a3      	cmp	r3, r4
   16d50:	dc0f      	bgt.n	16d72 <__aeabi_d2iz+0x3a>
   16d52:	2480      	movs	r4, #128	; 0x80
   16d54:	4d0e      	ldr	r5, [pc, #56]	; (16d90 <__aeabi_d2iz+0x58>)
   16d56:	0364      	lsls	r4, r4, #13
   16d58:	4322      	orrs	r2, r4
   16d5a:	1aed      	subs	r5, r5, r3
   16d5c:	2d1f      	cmp	r5, #31
   16d5e:	dd0b      	ble.n	16d78 <__aeabi_d2iz+0x40>
   16d60:	480c      	ldr	r0, [pc, #48]	; (16d94 <__aeabi_d2iz+0x5c>)
   16d62:	1ac3      	subs	r3, r0, r3
   16d64:	40da      	lsrs	r2, r3
   16d66:	4254      	negs	r4, r2
   16d68:	2900      	cmp	r1, #0
   16d6a:	d100      	bne.n	16d6e <__aeabi_d2iz+0x36>
   16d6c:	0014      	movs	r4, r2
   16d6e:	0020      	movs	r0, r4
   16d70:	bd30      	pop	{r4, r5, pc}
   16d72:	4b09      	ldr	r3, [pc, #36]	; (16d98 <__aeabi_d2iz+0x60>)
   16d74:	18cc      	adds	r4, r1, r3
   16d76:	e7fa      	b.n	16d6e <__aeabi_d2iz+0x36>
   16d78:	4c08      	ldr	r4, [pc, #32]	; (16d9c <__aeabi_d2iz+0x64>)
   16d7a:	40e8      	lsrs	r0, r5
   16d7c:	46a4      	mov	ip, r4
   16d7e:	4463      	add	r3, ip
   16d80:	409a      	lsls	r2, r3
   16d82:	4302      	orrs	r2, r0
   16d84:	e7ef      	b.n	16d66 <__aeabi_d2iz+0x2e>
   16d86:	46c0      	nop			; (mov r8, r8)
   16d88:	000003fe 	.word	0x000003fe
   16d8c:	0000041d 	.word	0x0000041d
   16d90:	00000433 	.word	0x00000433
   16d94:	00000413 	.word	0x00000413
   16d98:	7fffffff 	.word	0x7fffffff
   16d9c:	fffffbed 	.word	0xfffffbed

00016da0 <__aeabi_i2d>:
   16da0:	b570      	push	{r4, r5, r6, lr}
   16da2:	2800      	cmp	r0, #0
   16da4:	d030      	beq.n	16e08 <__aeabi_i2d+0x68>
   16da6:	17c3      	asrs	r3, r0, #31
   16da8:	18c4      	adds	r4, r0, r3
   16daa:	405c      	eors	r4, r3
   16dac:	0fc5      	lsrs	r5, r0, #31
   16dae:	0020      	movs	r0, r4
   16db0:	f000 f94c 	bl	1704c <__clzsi2>
   16db4:	4b17      	ldr	r3, [pc, #92]	; (16e14 <__aeabi_i2d+0x74>)
   16db6:	4a18      	ldr	r2, [pc, #96]	; (16e18 <__aeabi_i2d+0x78>)
   16db8:	1a1b      	subs	r3, r3, r0
   16dba:	1ad2      	subs	r2, r2, r3
   16dbc:	2a1f      	cmp	r2, #31
   16dbe:	dd18      	ble.n	16df2 <__aeabi_i2d+0x52>
   16dc0:	4a16      	ldr	r2, [pc, #88]	; (16e1c <__aeabi_i2d+0x7c>)
   16dc2:	1ad2      	subs	r2, r2, r3
   16dc4:	4094      	lsls	r4, r2
   16dc6:	2200      	movs	r2, #0
   16dc8:	0324      	lsls	r4, r4, #12
   16dca:	055b      	lsls	r3, r3, #21
   16dcc:	0b24      	lsrs	r4, r4, #12
   16dce:	0d5b      	lsrs	r3, r3, #21
   16dd0:	2100      	movs	r1, #0
   16dd2:	0010      	movs	r0, r2
   16dd4:	0324      	lsls	r4, r4, #12
   16dd6:	0d0a      	lsrs	r2, r1, #20
   16dd8:	0b24      	lsrs	r4, r4, #12
   16dda:	0512      	lsls	r2, r2, #20
   16ddc:	4322      	orrs	r2, r4
   16dde:	4c10      	ldr	r4, [pc, #64]	; (16e20 <__aeabi_i2d+0x80>)
   16de0:	051b      	lsls	r3, r3, #20
   16de2:	4022      	ands	r2, r4
   16de4:	4313      	orrs	r3, r2
   16de6:	005b      	lsls	r3, r3, #1
   16de8:	07ed      	lsls	r5, r5, #31
   16dea:	085b      	lsrs	r3, r3, #1
   16dec:	432b      	orrs	r3, r5
   16dee:	0019      	movs	r1, r3
   16df0:	bd70      	pop	{r4, r5, r6, pc}
   16df2:	0021      	movs	r1, r4
   16df4:	4091      	lsls	r1, r2
   16df6:	000a      	movs	r2, r1
   16df8:	210b      	movs	r1, #11
   16dfa:	1a08      	subs	r0, r1, r0
   16dfc:	40c4      	lsrs	r4, r0
   16dfe:	055b      	lsls	r3, r3, #21
   16e00:	0324      	lsls	r4, r4, #12
   16e02:	0b24      	lsrs	r4, r4, #12
   16e04:	0d5b      	lsrs	r3, r3, #21
   16e06:	e7e3      	b.n	16dd0 <__aeabi_i2d+0x30>
   16e08:	2500      	movs	r5, #0
   16e0a:	2300      	movs	r3, #0
   16e0c:	2400      	movs	r4, #0
   16e0e:	2200      	movs	r2, #0
   16e10:	e7de      	b.n	16dd0 <__aeabi_i2d+0x30>
   16e12:	46c0      	nop			; (mov r8, r8)
   16e14:	0000041e 	.word	0x0000041e
   16e18:	00000433 	.word	0x00000433
   16e1c:	00000413 	.word	0x00000413
   16e20:	800fffff 	.word	0x800fffff

00016e24 <__aeabi_ui2d>:
   16e24:	b510      	push	{r4, lr}
   16e26:	1e04      	subs	r4, r0, #0
   16e28:	d028      	beq.n	16e7c <__aeabi_ui2d+0x58>
   16e2a:	f000 f90f 	bl	1704c <__clzsi2>
   16e2e:	4b15      	ldr	r3, [pc, #84]	; (16e84 <__aeabi_ui2d+0x60>)
   16e30:	4a15      	ldr	r2, [pc, #84]	; (16e88 <__aeabi_ui2d+0x64>)
   16e32:	1a1b      	subs	r3, r3, r0
   16e34:	1ad2      	subs	r2, r2, r3
   16e36:	2a1f      	cmp	r2, #31
   16e38:	dd15      	ble.n	16e66 <__aeabi_ui2d+0x42>
   16e3a:	4a14      	ldr	r2, [pc, #80]	; (16e8c <__aeabi_ui2d+0x68>)
   16e3c:	1ad2      	subs	r2, r2, r3
   16e3e:	4094      	lsls	r4, r2
   16e40:	2200      	movs	r2, #0
   16e42:	0324      	lsls	r4, r4, #12
   16e44:	055b      	lsls	r3, r3, #21
   16e46:	0b24      	lsrs	r4, r4, #12
   16e48:	0d5b      	lsrs	r3, r3, #21
   16e4a:	2100      	movs	r1, #0
   16e4c:	0010      	movs	r0, r2
   16e4e:	0324      	lsls	r4, r4, #12
   16e50:	0d0a      	lsrs	r2, r1, #20
   16e52:	0b24      	lsrs	r4, r4, #12
   16e54:	0512      	lsls	r2, r2, #20
   16e56:	4322      	orrs	r2, r4
   16e58:	4c0d      	ldr	r4, [pc, #52]	; (16e90 <__aeabi_ui2d+0x6c>)
   16e5a:	051b      	lsls	r3, r3, #20
   16e5c:	4022      	ands	r2, r4
   16e5e:	4313      	orrs	r3, r2
   16e60:	005b      	lsls	r3, r3, #1
   16e62:	0859      	lsrs	r1, r3, #1
   16e64:	bd10      	pop	{r4, pc}
   16e66:	0021      	movs	r1, r4
   16e68:	4091      	lsls	r1, r2
   16e6a:	000a      	movs	r2, r1
   16e6c:	210b      	movs	r1, #11
   16e6e:	1a08      	subs	r0, r1, r0
   16e70:	40c4      	lsrs	r4, r0
   16e72:	055b      	lsls	r3, r3, #21
   16e74:	0324      	lsls	r4, r4, #12
   16e76:	0b24      	lsrs	r4, r4, #12
   16e78:	0d5b      	lsrs	r3, r3, #21
   16e7a:	e7e6      	b.n	16e4a <__aeabi_ui2d+0x26>
   16e7c:	2300      	movs	r3, #0
   16e7e:	2400      	movs	r4, #0
   16e80:	2200      	movs	r2, #0
   16e82:	e7e2      	b.n	16e4a <__aeabi_ui2d+0x26>
   16e84:	0000041e 	.word	0x0000041e
   16e88:	00000433 	.word	0x00000433
   16e8c:	00000413 	.word	0x00000413
   16e90:	800fffff 	.word	0x800fffff

00016e94 <__aeabi_f2d>:
   16e94:	0041      	lsls	r1, r0, #1
   16e96:	0e09      	lsrs	r1, r1, #24
   16e98:	1c4b      	adds	r3, r1, #1
   16e9a:	b570      	push	{r4, r5, r6, lr}
   16e9c:	b2db      	uxtb	r3, r3
   16e9e:	0246      	lsls	r6, r0, #9
   16ea0:	0a75      	lsrs	r5, r6, #9
   16ea2:	0fc4      	lsrs	r4, r0, #31
   16ea4:	2b01      	cmp	r3, #1
   16ea6:	dd14      	ble.n	16ed2 <__aeabi_f2d+0x3e>
   16ea8:	23e0      	movs	r3, #224	; 0xe0
   16eaa:	009b      	lsls	r3, r3, #2
   16eac:	076d      	lsls	r5, r5, #29
   16eae:	0b36      	lsrs	r6, r6, #12
   16eb0:	18cb      	adds	r3, r1, r3
   16eb2:	2100      	movs	r1, #0
   16eb4:	0d0a      	lsrs	r2, r1, #20
   16eb6:	0028      	movs	r0, r5
   16eb8:	0512      	lsls	r2, r2, #20
   16eba:	4d1c      	ldr	r5, [pc, #112]	; (16f2c <__aeabi_f2d+0x98>)
   16ebc:	4332      	orrs	r2, r6
   16ebe:	055b      	lsls	r3, r3, #21
   16ec0:	402a      	ands	r2, r5
   16ec2:	085b      	lsrs	r3, r3, #1
   16ec4:	4313      	orrs	r3, r2
   16ec6:	005b      	lsls	r3, r3, #1
   16ec8:	07e4      	lsls	r4, r4, #31
   16eca:	085b      	lsrs	r3, r3, #1
   16ecc:	4323      	orrs	r3, r4
   16ece:	0019      	movs	r1, r3
   16ed0:	bd70      	pop	{r4, r5, r6, pc}
   16ed2:	2900      	cmp	r1, #0
   16ed4:	d114      	bne.n	16f00 <__aeabi_f2d+0x6c>
   16ed6:	2d00      	cmp	r5, #0
   16ed8:	d01e      	beq.n	16f18 <__aeabi_f2d+0x84>
   16eda:	0028      	movs	r0, r5
   16edc:	f000 f8b6 	bl	1704c <__clzsi2>
   16ee0:	280a      	cmp	r0, #10
   16ee2:	dc1c      	bgt.n	16f1e <__aeabi_f2d+0x8a>
   16ee4:	230b      	movs	r3, #11
   16ee6:	002a      	movs	r2, r5
   16ee8:	1a1b      	subs	r3, r3, r0
   16eea:	40da      	lsrs	r2, r3
   16eec:	0003      	movs	r3, r0
   16eee:	3315      	adds	r3, #21
   16ef0:	409d      	lsls	r5, r3
   16ef2:	4b0f      	ldr	r3, [pc, #60]	; (16f30 <__aeabi_f2d+0x9c>)
   16ef4:	0312      	lsls	r2, r2, #12
   16ef6:	1a1b      	subs	r3, r3, r0
   16ef8:	055b      	lsls	r3, r3, #21
   16efa:	0b16      	lsrs	r6, r2, #12
   16efc:	0d5b      	lsrs	r3, r3, #21
   16efe:	e7d8      	b.n	16eb2 <__aeabi_f2d+0x1e>
   16f00:	2d00      	cmp	r5, #0
   16f02:	d006      	beq.n	16f12 <__aeabi_f2d+0x7e>
   16f04:	0b32      	lsrs	r2, r6, #12
   16f06:	2680      	movs	r6, #128	; 0x80
   16f08:	0336      	lsls	r6, r6, #12
   16f0a:	076d      	lsls	r5, r5, #29
   16f0c:	4316      	orrs	r6, r2
   16f0e:	4b09      	ldr	r3, [pc, #36]	; (16f34 <__aeabi_f2d+0xa0>)
   16f10:	e7cf      	b.n	16eb2 <__aeabi_f2d+0x1e>
   16f12:	4b08      	ldr	r3, [pc, #32]	; (16f34 <__aeabi_f2d+0xa0>)
   16f14:	2600      	movs	r6, #0
   16f16:	e7cc      	b.n	16eb2 <__aeabi_f2d+0x1e>
   16f18:	2300      	movs	r3, #0
   16f1a:	2600      	movs	r6, #0
   16f1c:	e7c9      	b.n	16eb2 <__aeabi_f2d+0x1e>
   16f1e:	0003      	movs	r3, r0
   16f20:	002a      	movs	r2, r5
   16f22:	3b0b      	subs	r3, #11
   16f24:	409a      	lsls	r2, r3
   16f26:	2500      	movs	r5, #0
   16f28:	e7e3      	b.n	16ef2 <__aeabi_f2d+0x5e>
   16f2a:	46c0      	nop			; (mov r8, r8)
   16f2c:	800fffff 	.word	0x800fffff
   16f30:	00000389 	.word	0x00000389
   16f34:	000007ff 	.word	0x000007ff

00016f38 <__aeabi_d2f>:
   16f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f3a:	004c      	lsls	r4, r1, #1
   16f3c:	0d64      	lsrs	r4, r4, #21
   16f3e:	030b      	lsls	r3, r1, #12
   16f40:	1c62      	adds	r2, r4, #1
   16f42:	0f45      	lsrs	r5, r0, #29
   16f44:	0a5b      	lsrs	r3, r3, #9
   16f46:	0552      	lsls	r2, r2, #21
   16f48:	432b      	orrs	r3, r5
   16f4a:	0fc9      	lsrs	r1, r1, #31
   16f4c:	00c5      	lsls	r5, r0, #3
   16f4e:	0d52      	lsrs	r2, r2, #21
   16f50:	2a01      	cmp	r2, #1
   16f52:	dd28      	ble.n	16fa6 <__aeabi_d2f+0x6e>
   16f54:	4a3a      	ldr	r2, [pc, #232]	; (17040 <__aeabi_d2f+0x108>)
   16f56:	18a6      	adds	r6, r4, r2
   16f58:	2efe      	cmp	r6, #254	; 0xfe
   16f5a:	dc1b      	bgt.n	16f94 <__aeabi_d2f+0x5c>
   16f5c:	2e00      	cmp	r6, #0
   16f5e:	dd3e      	ble.n	16fde <__aeabi_d2f+0xa6>
   16f60:	0180      	lsls	r0, r0, #6
   16f62:	0002      	movs	r2, r0
   16f64:	1e50      	subs	r0, r2, #1
   16f66:	4182      	sbcs	r2, r0
   16f68:	0f6d      	lsrs	r5, r5, #29
   16f6a:	432a      	orrs	r2, r5
   16f6c:	00db      	lsls	r3, r3, #3
   16f6e:	4313      	orrs	r3, r2
   16f70:	075a      	lsls	r2, r3, #29
   16f72:	d004      	beq.n	16f7e <__aeabi_d2f+0x46>
   16f74:	220f      	movs	r2, #15
   16f76:	401a      	ands	r2, r3
   16f78:	2a04      	cmp	r2, #4
   16f7a:	d000      	beq.n	16f7e <__aeabi_d2f+0x46>
   16f7c:	3304      	adds	r3, #4
   16f7e:	2280      	movs	r2, #128	; 0x80
   16f80:	04d2      	lsls	r2, r2, #19
   16f82:	401a      	ands	r2, r3
   16f84:	d05a      	beq.n	1703c <__aeabi_d2f+0x104>
   16f86:	3601      	adds	r6, #1
   16f88:	2eff      	cmp	r6, #255	; 0xff
   16f8a:	d003      	beq.n	16f94 <__aeabi_d2f+0x5c>
   16f8c:	019b      	lsls	r3, r3, #6
   16f8e:	0a5b      	lsrs	r3, r3, #9
   16f90:	b2f4      	uxtb	r4, r6
   16f92:	e001      	b.n	16f98 <__aeabi_d2f+0x60>
   16f94:	24ff      	movs	r4, #255	; 0xff
   16f96:	2300      	movs	r3, #0
   16f98:	0258      	lsls	r0, r3, #9
   16f9a:	05e4      	lsls	r4, r4, #23
   16f9c:	0a40      	lsrs	r0, r0, #9
   16f9e:	07c9      	lsls	r1, r1, #31
   16fa0:	4320      	orrs	r0, r4
   16fa2:	4308      	orrs	r0, r1
   16fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fa6:	2c00      	cmp	r4, #0
   16fa8:	d007      	beq.n	16fba <__aeabi_d2f+0x82>
   16faa:	431d      	orrs	r5, r3
   16fac:	d0f2      	beq.n	16f94 <__aeabi_d2f+0x5c>
   16fae:	2080      	movs	r0, #128	; 0x80
   16fb0:	00db      	lsls	r3, r3, #3
   16fb2:	0480      	lsls	r0, r0, #18
   16fb4:	4303      	orrs	r3, r0
   16fb6:	26ff      	movs	r6, #255	; 0xff
   16fb8:	e7da      	b.n	16f70 <__aeabi_d2f+0x38>
   16fba:	432b      	orrs	r3, r5
   16fbc:	d003      	beq.n	16fc6 <__aeabi_d2f+0x8e>
   16fbe:	2305      	movs	r3, #5
   16fc0:	08db      	lsrs	r3, r3, #3
   16fc2:	2cff      	cmp	r4, #255	; 0xff
   16fc4:	d003      	beq.n	16fce <__aeabi_d2f+0x96>
   16fc6:	025b      	lsls	r3, r3, #9
   16fc8:	0a5b      	lsrs	r3, r3, #9
   16fca:	b2e4      	uxtb	r4, r4
   16fcc:	e7e4      	b.n	16f98 <__aeabi_d2f+0x60>
   16fce:	2b00      	cmp	r3, #0
   16fd0:	d032      	beq.n	17038 <__aeabi_d2f+0x100>
   16fd2:	2080      	movs	r0, #128	; 0x80
   16fd4:	03c0      	lsls	r0, r0, #15
   16fd6:	4303      	orrs	r3, r0
   16fd8:	025b      	lsls	r3, r3, #9
   16fda:	0a5b      	lsrs	r3, r3, #9
   16fdc:	e7dc      	b.n	16f98 <__aeabi_d2f+0x60>
   16fde:	0032      	movs	r2, r6
   16fe0:	3217      	adds	r2, #23
   16fe2:	db14      	blt.n	1700e <__aeabi_d2f+0xd6>
   16fe4:	2280      	movs	r2, #128	; 0x80
   16fe6:	271e      	movs	r7, #30
   16fe8:	0412      	lsls	r2, r2, #16
   16fea:	4313      	orrs	r3, r2
   16fec:	1bbf      	subs	r7, r7, r6
   16fee:	2f1f      	cmp	r7, #31
   16ff0:	dc0f      	bgt.n	17012 <__aeabi_d2f+0xda>
   16ff2:	4a14      	ldr	r2, [pc, #80]	; (17044 <__aeabi_d2f+0x10c>)
   16ff4:	4694      	mov	ip, r2
   16ff6:	4464      	add	r4, ip
   16ff8:	002a      	movs	r2, r5
   16ffa:	40a5      	lsls	r5, r4
   16ffc:	002e      	movs	r6, r5
   16ffe:	40a3      	lsls	r3, r4
   17000:	1e75      	subs	r5, r6, #1
   17002:	41ae      	sbcs	r6, r5
   17004:	40fa      	lsrs	r2, r7
   17006:	4333      	orrs	r3, r6
   17008:	4313      	orrs	r3, r2
   1700a:	2600      	movs	r6, #0
   1700c:	e7b0      	b.n	16f70 <__aeabi_d2f+0x38>
   1700e:	2400      	movs	r4, #0
   17010:	e7d5      	b.n	16fbe <__aeabi_d2f+0x86>
   17012:	2202      	movs	r2, #2
   17014:	4252      	negs	r2, r2
   17016:	1b96      	subs	r6, r2, r6
   17018:	001a      	movs	r2, r3
   1701a:	40f2      	lsrs	r2, r6
   1701c:	2f20      	cmp	r7, #32
   1701e:	d009      	beq.n	17034 <__aeabi_d2f+0xfc>
   17020:	4809      	ldr	r0, [pc, #36]	; (17048 <__aeabi_d2f+0x110>)
   17022:	4684      	mov	ip, r0
   17024:	4464      	add	r4, ip
   17026:	40a3      	lsls	r3, r4
   17028:	432b      	orrs	r3, r5
   1702a:	1e5d      	subs	r5, r3, #1
   1702c:	41ab      	sbcs	r3, r5
   1702e:	2600      	movs	r6, #0
   17030:	4313      	orrs	r3, r2
   17032:	e79d      	b.n	16f70 <__aeabi_d2f+0x38>
   17034:	2300      	movs	r3, #0
   17036:	e7f7      	b.n	17028 <__aeabi_d2f+0xf0>
   17038:	2300      	movs	r3, #0
   1703a:	e7ad      	b.n	16f98 <__aeabi_d2f+0x60>
   1703c:	0034      	movs	r4, r6
   1703e:	e7bf      	b.n	16fc0 <__aeabi_d2f+0x88>
   17040:	fffffc80 	.word	0xfffffc80
   17044:	fffffc82 	.word	0xfffffc82
   17048:	fffffca2 	.word	0xfffffca2

0001704c <__clzsi2>:
   1704c:	211c      	movs	r1, #28
   1704e:	2301      	movs	r3, #1
   17050:	041b      	lsls	r3, r3, #16
   17052:	4298      	cmp	r0, r3
   17054:	d301      	bcc.n	1705a <__clzsi2+0xe>
   17056:	0c00      	lsrs	r0, r0, #16
   17058:	3910      	subs	r1, #16
   1705a:	0a1b      	lsrs	r3, r3, #8
   1705c:	4298      	cmp	r0, r3
   1705e:	d301      	bcc.n	17064 <__clzsi2+0x18>
   17060:	0a00      	lsrs	r0, r0, #8
   17062:	3908      	subs	r1, #8
   17064:	091b      	lsrs	r3, r3, #4
   17066:	4298      	cmp	r0, r3
   17068:	d301      	bcc.n	1706e <__clzsi2+0x22>
   1706a:	0900      	lsrs	r0, r0, #4
   1706c:	3904      	subs	r1, #4
   1706e:	a202      	add	r2, pc, #8	; (adr r2, 17078 <__clzsi2+0x2c>)
   17070:	5c10      	ldrb	r0, [r2, r0]
   17072:	1840      	adds	r0, r0, r1
   17074:	4770      	bx	lr
   17076:	46c0      	nop			; (mov r8, r8)
   17078:	02020304 	.word	0x02020304
   1707c:	01010101 	.word	0x01010101
	...

00017088 <__errno>:
   17088:	4b01      	ldr	r3, [pc, #4]	; (17090 <__errno+0x8>)
   1708a:	6818      	ldr	r0, [r3, #0]
   1708c:	4770      	bx	lr
   1708e:	46c0      	nop			; (mov r8, r8)
   17090:	200000e8 	.word	0x200000e8

00017094 <__libc_init_array>:
   17094:	b570      	push	{r4, r5, r6, lr}
   17096:	2600      	movs	r6, #0
   17098:	4d0c      	ldr	r5, [pc, #48]	; (170cc <__libc_init_array+0x38>)
   1709a:	4c0d      	ldr	r4, [pc, #52]	; (170d0 <__libc_init_array+0x3c>)
   1709c:	1b64      	subs	r4, r4, r5
   1709e:	10a4      	asrs	r4, r4, #2
   170a0:	42a6      	cmp	r6, r4
   170a2:	d109      	bne.n	170b8 <__libc_init_array+0x24>
   170a4:	2600      	movs	r6, #0
   170a6:	f000 fce7 	bl	17a78 <_init>
   170aa:	4d0a      	ldr	r5, [pc, #40]	; (170d4 <__libc_init_array+0x40>)
   170ac:	4c0a      	ldr	r4, [pc, #40]	; (170d8 <__libc_init_array+0x44>)
   170ae:	1b64      	subs	r4, r4, r5
   170b0:	10a4      	asrs	r4, r4, #2
   170b2:	42a6      	cmp	r6, r4
   170b4:	d105      	bne.n	170c2 <__libc_init_array+0x2e>
   170b6:	bd70      	pop	{r4, r5, r6, pc}
   170b8:	00b3      	lsls	r3, r6, #2
   170ba:	58eb      	ldr	r3, [r5, r3]
   170bc:	4798      	blx	r3
   170be:	3601      	adds	r6, #1
   170c0:	e7ee      	b.n	170a0 <__libc_init_array+0xc>
   170c2:	00b3      	lsls	r3, r6, #2
   170c4:	58eb      	ldr	r3, [r5, r3]
   170c6:	4798      	blx	r3
   170c8:	3601      	adds	r6, #1
   170ca:	e7f2      	b.n	170b2 <__libc_init_array+0x1e>
   170cc:	00017a84 	.word	0x00017a84
   170d0:	00017a84 	.word	0x00017a84
   170d4:	00017a84 	.word	0x00017a84
   170d8:	00017a88 	.word	0x00017a88

000170dc <memcpy>:
   170dc:	2300      	movs	r3, #0
   170de:	b510      	push	{r4, lr}
   170e0:	429a      	cmp	r2, r3
   170e2:	d100      	bne.n	170e6 <memcpy+0xa>
   170e4:	bd10      	pop	{r4, pc}
   170e6:	5ccc      	ldrb	r4, [r1, r3]
   170e8:	54c4      	strb	r4, [r0, r3]
   170ea:	3301      	adds	r3, #1
   170ec:	e7f8      	b.n	170e0 <memcpy+0x4>

000170ee <memset>:
   170ee:	0003      	movs	r3, r0
   170f0:	1882      	adds	r2, r0, r2
   170f2:	4293      	cmp	r3, r2
   170f4:	d100      	bne.n	170f8 <memset+0xa>
   170f6:	4770      	bx	lr
   170f8:	7019      	strb	r1, [r3, #0]
   170fa:	3301      	adds	r3, #1
   170fc:	e7f9      	b.n	170f2 <memset+0x4>
   170fe:	0000      	movs	r0, r0
   17100:	00000002 	.word	0x00000002
   17104:	00000003 	.word	0x00000003
   17108:	00000028 	.word	0x00000028
   1710c:	00000029 	.word	0x00000029
   17110:	00000004 	.word	0x00000004
   17114:	00000005 	.word	0x00000005
   17118:	00000006 	.word	0x00000006
   1711c:	00000007 	.word	0x00000007
   17120:	0000ffff 	.word	0x0000ffff
   17124:	0000ffff 	.word	0x0000ffff
   17128:	00000022 	.word	0x00000022
   1712c:	00000023 	.word	0x00000023
   17130:	0000ffff 	.word	0x0000ffff
   17134:	0000ffff 	.word	0x0000ffff
   17138:	0000ffff 	.word	0x0000ffff
   1713c:	0000ffff 	.word	0x0000ffff
   17140:	00000008 	.word	0x00000008
   17144:	00000009 	.word	0x00000009
   17148:	0000000a 	.word	0x0000000a
   1714c:	0000000b 	.word	0x0000000b
   17150:	000024da 	.word	0x000024da
   17154:	000024e0 	.word	0x000024e0
   17158:	000024e0 	.word	0x000024e0
   1715c:	000024e0 	.word	0x000024e0
   17160:	000024e0 	.word	0x000024e0
   17164:	000024e0 	.word	0x000024e0
   17168:	000024e0 	.word	0x000024e0
   1716c:	000024e0 	.word	0x000024e0
   17170:	000024e0 	.word	0x000024e0
   17174:	000024e0 	.word	0x000024e0
   17178:	000024e0 	.word	0x000024e0
   1717c:	000024e0 	.word	0x000024e0
   17180:	000024e0 	.word	0x000024e0
   17184:	000024e0 	.word	0x000024e0
   17188:	000024e0 	.word	0x000024e0
   1718c:	000024e0 	.word	0x000024e0
   17190:	000024b8 	.word	0x000024b8
   17194:	000024e0 	.word	0x000024e0
   17198:	000024e0 	.word	0x000024e0
   1719c:	000024e0 	.word	0x000024e0
   171a0:	000024e0 	.word	0x000024e0
   171a4:	000024e0 	.word	0x000024e0
   171a8:	000024e0 	.word	0x000024e0
   171ac:	000024e0 	.word	0x000024e0
   171b0:	000024e0 	.word	0x000024e0
   171b4:	000024e0 	.word	0x000024e0
   171b8:	000024e0 	.word	0x000024e0
   171bc:	000024e0 	.word	0x000024e0
   171c0:	000024e0 	.word	0x000024e0
   171c4:	000024e0 	.word	0x000024e0
   171c8:	000024e0 	.word	0x000024e0
   171cc:	000024e0 	.word	0x000024e0
   171d0:	000024d4 	.word	0x000024d4
   171d4:	000024e0 	.word	0x000024e0
   171d8:	000024e0 	.word	0x000024e0
   171dc:	000024e0 	.word	0x000024e0
   171e0:	000024e0 	.word	0x000024e0
   171e4:	000024e0 	.word	0x000024e0
   171e8:	000024e0 	.word	0x000024e0
   171ec:	000024e0 	.word	0x000024e0
   171f0:	000024e0 	.word	0x000024e0
   171f4:	000024e0 	.word	0x000024e0
   171f8:	000024e0 	.word	0x000024e0
   171fc:	000024e0 	.word	0x000024e0
   17200:	000024e0 	.word	0x000024e0
   17204:	000024e0 	.word	0x000024e0
   17208:	000024e0 	.word	0x000024e0
   1720c:	000024e0 	.word	0x000024e0
   17210:	000024ce 	.word	0x000024ce
   17214:	00002476 	.word	0x00002476
   17218:	0000248c 	.word	0x0000248c
   1721c:	000024a2 	.word	0x000024a2
   17220:	0000245c 	.word	0x0000245c
   17224:	00002c64 	.word	0x00002c64
   17228:	00002c64 	.word	0x00002c64
   1722c:	00002c58 	.word	0x00002c58
   17230:	00002c64 	.word	0x00002c64
   17234:	00002c58 	.word	0x00002c58
   17238:	00002c32 	.word	0x00002c32
   1723c:	00002c32 	.word	0x00002c32
   17240:	00002c64 	.word	0x00002c64
   17244:	00002c64 	.word	0x00002c64
   17248:	00002c64 	.word	0x00002c64
   1724c:	00002c64 	.word	0x00002c64
   17250:	00002c64 	.word	0x00002c64
   17254:	00002c64 	.word	0x00002c64
   17258:	00002c64 	.word	0x00002c64
   1725c:	00002c64 	.word	0x00002c64
   17260:	00002c64 	.word	0x00002c64
   17264:	00002c64 	.word	0x00002c64
   17268:	00002c64 	.word	0x00002c64
   1726c:	00002c64 	.word	0x00002c64
   17270:	00002c64 	.word	0x00002c64
   17274:	00002c64 	.word	0x00002c64
   17278:	00002c64 	.word	0x00002c64
   1727c:	00002c64 	.word	0x00002c64
   17280:	00002c64 	.word	0x00002c64
   17284:	00002c64 	.word	0x00002c64
   17288:	00002c64 	.word	0x00002c64
   1728c:	00002c64 	.word	0x00002c64
   17290:	00002c64 	.word	0x00002c64
   17294:	00002c64 	.word	0x00002c64
   17298:	00002c64 	.word	0x00002c64
   1729c:	00002c64 	.word	0x00002c64
   172a0:	00002c64 	.word	0x00002c64
   172a4:	00002c64 	.word	0x00002c64
   172a8:	00002c64 	.word	0x00002c64
   172ac:	00002c64 	.word	0x00002c64
   172b0:	00002c64 	.word	0x00002c64
   172b4:	00002c64 	.word	0x00002c64
   172b8:	00002c64 	.word	0x00002c64
   172bc:	00002c64 	.word	0x00002c64
   172c0:	00002c64 	.word	0x00002c64
   172c4:	00002c64 	.word	0x00002c64
   172c8:	00002c64 	.word	0x00002c64
   172cc:	00002c64 	.word	0x00002c64
   172d0:	00002c64 	.word	0x00002c64
   172d4:	00002c64 	.word	0x00002c64
   172d8:	00002c64 	.word	0x00002c64
   172dc:	00002c64 	.word	0x00002c64
   172e0:	00002c64 	.word	0x00002c64
   172e4:	00002c64 	.word	0x00002c64
   172e8:	00002c64 	.word	0x00002c64
   172ec:	00002c64 	.word	0x00002c64
   172f0:	00002c64 	.word	0x00002c64
   172f4:	00002c64 	.word	0x00002c64
   172f8:	00002c64 	.word	0x00002c64
   172fc:	00002c64 	.word	0x00002c64
   17300:	00002c64 	.word	0x00002c64
   17304:	00002c64 	.word	0x00002c64
   17308:	00002c64 	.word	0x00002c64
   1730c:	00002c64 	.word	0x00002c64
   17310:	00002c64 	.word	0x00002c64
   17314:	00002c64 	.word	0x00002c64
   17318:	00002c64 	.word	0x00002c64
   1731c:	00002c64 	.word	0x00002c64
   17320:	00002c64 	.word	0x00002c64
   17324:	00002c58 	.word	0x00002c58
   17328:	00002c58 	.word	0x00002c58
   1732c:	00002c6e 	.word	0x00002c6e
   17330:	00002c6e 	.word	0x00002c6e
   17334:	00002c6e 	.word	0x00002c6e
   17338:	00002c6e 	.word	0x00002c6e

0001733c <_tcc_intflag>:
   1733c:	00000001 00000002 00000004 00000008     ................
   1734c:	00001000 00002000 00004000 00008000     ..... ...@......
   1735c:	00010000 00020000 00040000 00080000     ................

0001736c <tcc_modules>:
   1736c:	42002000 42002400 42002800              . .B.$.B.(.B

00017378 <_tcc_gclk_ids>:
   17378:	001b1a1a                                ....

0001737c <_tcc_apbcmasks>:
   1737c:	00000100 00000200 00000400              ............

00017388 <_tcc_maxs>:
   17388:	00ffffff 00ffffff 0000ffff              ............

00017394 <_tcc_cc_nums>:
   17394:	00020204                                ....

00017398 <_tcc_ow_nums>:
   17398:	00020408 42002c00 42003000 42003400     .....,.B.0.B.4.B
   173a8:	001c1c1b 10000800 00002000 42000800     ......... .....B
   173b8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   173c8:	42001c00 0c0b0a09 00000e0d 000074ae     ...B.........t..
   173d8:	00007526 00007526 000074cc 000074c6     &u..&u...t...t..
   173e8:	000074d2 000074b4 000074d8 0000750c     .t...t...t...u..
   173f8:	000076cc 0000771c 0000771c 00007718     .v...w...w...w..
   17408:	000076be 000076de 000076ae 000076f0     .v...v...v...v..
   17418:	00007702 41744545 50524f4d 456d752e     .w..EEtAMORP.umE

00017428 <crc16_tab>:
   17428:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   17438:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   17448:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   17458:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   17468:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   17478:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   17488:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   17498:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   174a8:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   174b8:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   174c8:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   174d8:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   174e8:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   174f8:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   17508:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   17518:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   17528:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   17538:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   17548:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   17558:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   17568:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   17578:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   17588:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   17598:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   175a8:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   175b8:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   175c8:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   175d8:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   175e8:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   175f8:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   17608:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   17618:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
   17628:	0000dc98 0000dc98 0000dd0e 0000dd0e     ................
   17638:	0000dd3e 0000ddde 0000dd52 0000dd52     >.......R...R...
   17648:	0000dd62 0000dd8e 0000dda0 0000ddb2     b...............
   17658:	0000ddc8 07020100 0a090701 00000001     ................
   17668:	000000ff 00000303 00000002 00ff00ff     ................
   17678:	0000ff00 00000003 00000000 3f400000     ..............@?
   17688:	00000000 3f000000 3f000000 00000000     .......?...?....
   17698:	3f000000 3f000000 3f000000 00000000     ...?...?...?....
   176a8:	3e800000 3f000000 3f000000 3f000000     ...>...?...?...?
   176b8:	3f000000 3f000000 3f000000 3f000000     ...?...?...?...?
   176c8:	422b5441 34445541 00000000 00002580     AT+BAUD4.....%..
   176d8:	00004b00 00009600 0000e100 0001c200     .K..............
   176e8:	4e2b5441 54454d41 61546c65 00006c69     AT+NAMETelTail..
   176f8:	502b5441 3345574f 00000000 522b5441     AT+POWE3....AT+R
   17708:	54455345 00000000 00000030 0000f8b4     ESET....0.......
   17718:	0000f8be 0000f800 0000f7ec 00010194     ................
   17728:	00010194 00010194 0000fff4 00010194     ................
   17738:	00010194 00010194 00010194 00010194     ................
   17748:	00010194 00010194 00010194 00010194     ................
   17758:	00010194 00010194 0000f8c8 00010194     ................
   17768:	00010194 00010194 00010194 0000fe88     ................
   17778:	0000fb30 0000fb58 00010194 00010194     0...X...........
   17788:	00010194 00010194 00010194 00010194     ................
   17798:	00010194 00010194 0000f7dc 00010194     ................
   177a8:	00010194 00010194 00010194 00010194     ................
   177b8:	00010194 00010194 00010194 00010194     ................
   177c8:	00010194 00010194 00010194 00010194     ................
   177d8:	00010194 00010194 0000f7cc 00010194     ................
   177e8:	00010194 00010194 0000f850 0000f828     ........P...(...
   177f8:	0000f810 00010194 00010194 0000faa2     ................
   17808:	0000fa2a 0000f8da 0000f9b2 0000fcb4     *...............
   17818:	0000f938 0000fc20 0000fd48 00010194     8... ...H.......
   17828:	00010194 00010194 00010194 00010194     ................
   17838:	00010194 00010194 00010194 00010194     ................
   17848:	00010194 00010194 00010194 0000f8a4     ................
   17858:	0000f894 0000f884 0000fb1a 0000f874     ............t...
   17868:	0001212e 0001213e 00012176 000121ae     .!..>!..v!...!..
   17878:	000121d4 000121fe 00012236 0001226e     .!...!..6"..n"..
   17888:	000122e6 000123f8 00012438 00012478     ."...#..8$..x$..
   17898:	000124b8 000124e4 00012530 00012570     .$...$..0%..p%..
   178a8:	000125b0 00012678 000126a4 00012858     .%..x&...&..X(..
   178b8:	0001292a 00012b80 00012dd0 00012fbe     *)...+...-.../..
   178c8:	000130c6 000132a4 0001342a 00013610     .0...2..*4...6..
   178d8:	00014a4c 00014a1c 00014a2e 00014970     LJ...J...J..pI..
   178e8:	00014a2e 00014a12 00014a2e 00014970     .J...J...J..pI..
   178f8:	00014a1c 00014a1c 00014a12 00014970     .J...J...J..pI..
   17908:	00014978 00014978 00014978 00014a34     xI..xI..xI..4J..
   17918:	00014a1c 00014a1c 000149f0 00014ad4     .J...J...I...J..
   17928:	000149f0 00014a12 000149f0 00014ad4     .I...J...I...J..
   17938:	00014a1c 00014a1c 00014a12 00014ad4     .J...J...J...J..
   17948:	00014978 00014978 00014978 00014ade     xI..xI..xI...J..
   17958:	00014dcc 00014d1c 00014d1c 00014d1a     .M...M...M...M..
   17968:	00014dbe 00014dbe 00014db4 00014d1a     .M...M...M...M..
   17978:	00014dbe 00014db4 00014dbe 00014d1a     .M...M...M...M..
   17988:	00014dc4 00014dc4 00014dc4 00014e54     .M...M...M..TN..
   17998:	00015b9c 00015b7e 00015b38 00015a56     .[..~[..8[..VZ..
   179a8:	00015b38 00015b70 00015b38 00015a56     8[..p[..8[..VZ..
   179b8:	00015b7e 00015b7e 00015b70 00015a56     ~[..~[..p[..VZ..
   179c8:	00015a4e 00015a4e 00015a4e 00015db4     NZ..NZ..NZ...]..
   179d8:	000163fc 000162bc 000162bc 000162b8     .c...b...b...b..
   179e8:	000163d4 000163d4 000163c6 000162b8     .c...c...c...b..
   179f8:	000163d4 000163c6 000163d4 000162b8     .c...c...c...b..
   17a08:	000163dc 000163dc 000163dc 000165e0     .c...c...c...e..

00017a18 <__sf_fake_stderr>:
	...

00017a38 <__sf_fake_stdin>:
	...

00017a58 <__sf_fake_stdout>:
	...

00017a78 <_init>:
   17a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a7a:	46c0      	nop			; (mov r8, r8)
   17a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17a7e:	bc08      	pop	{r3}
   17a80:	469e      	mov	lr, r3
   17a82:	4770      	bx	lr

00017a84 <__init_array_start>:
   17a84:	000020dd 	.word	0x000020dd

00017a88 <_fini>:
   17a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a8a:	46c0      	nop			; (mov r8, r8)
   17a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17a8e:	bc08      	pop	{r3}
   17a90:	469e      	mov	lr, r3
   17a92:	4770      	bx	lr

00017a94 <__fini_array_start>:
   17a94:	000020b5 	.word	0x000020b5

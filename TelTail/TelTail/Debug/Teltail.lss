
Teltail.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019fa0  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000170  20000000  0001bfa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001990  20000170  0001c110  00020170  2**4
                  ALLOC
  3 .stack        00002000  20001b00  0001daa0  00020170  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005ee93  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005981  00000000  00000000  0007f084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000752d  00000000  00000000  00084a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000013f0  00000000  00000000  0008bf32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001278  00000000  00000000  0008d322  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000aed7  00000000  00000000  0008e59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001734e  00000000  00000000  00099471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092d47  00000000  00000000  000b07bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ee8  00000000  00000000  00143508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 3b 00 20 f5 93 00 00 ed 94 00 00 ed 94 00 00     .;. ............
	...
    202c:	ed 94 00 00 00 00 00 00 00 00 00 00 ed 94 00 00     ................
    203c:	ed 94 00 00 ed 94 00 00 ed 94 00 00 ed 94 00 00     ................
    204c:	ed 94 00 00 ed 94 00 00 ed 94 00 00 0d 29 00 00     .............)..
    205c:	ed 94 00 00 ed 94 00 00 15 7b 00 00 2d 7b 00 00     .........{..-{..
    206c:	45 7b 00 00 5d 7b 00 00 75 7b 00 00 8d 7b 00 00     E{..]{..u{...{..
    207c:	5d 30 00 00 71 30 00 00 85 30 00 00 15 31 00 00     ]0..q0...0...1..
    208c:	29 31 00 00 3d 31 00 00 00 00 00 00 00 00 00 00     )1..=1..........
    209c:	ed 94 00 00 ed 94 00 00 ed 94 00 00 ed 94 00 00     ................
    20ac:	ed 94 00 00 00 00 00 00                             ........

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000170 	.word	0x20000170
    20d4:	00000000 	.word	0x00000000
    20d8:	0001bfa0 	.word	0x0001bfa0

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000174 	.word	0x20000174
    2108:	0001bfa0 	.word	0x0001bfa0
    210c:	0001bfa0 	.word	0x0001bfa0
    2110:	00000000 	.word	0x00000000

00002114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46bd      	mov	sp, r7
    2126:	b002      	add	sp, #8
    2128:	bd80      	pop	{r7, pc}
	...

0000212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    212c:	b580      	push	{r7, lr}
    212e:	b082      	sub	sp, #8
    2130:	af00      	add	r7, sp, #0
    2132:	0002      	movs	r2, r0
    2134:	6039      	str	r1, [r7, #0]
    2136:	1dfb      	adds	r3, r7, #7
    2138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    213a:	1dfb      	adds	r3, r7, #7
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b01      	cmp	r3, #1
    2140:	d00a      	beq.n	2158 <system_apb_clock_set_mask+0x2c>
    2142:	2b02      	cmp	r3, #2
    2144:	d00f      	beq.n	2166 <system_apb_clock_set_mask+0x3a>
    2146:	2b00      	cmp	r3, #0
    2148:	d114      	bne.n	2174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <system_apb_clock_set_mask+0x58>)
    214c:	4a0d      	ldr	r2, [pc, #52]	; (2184 <system_apb_clock_set_mask+0x58>)
    214e:	6991      	ldr	r1, [r2, #24]
    2150:	683a      	ldr	r2, [r7, #0]
    2152:	430a      	orrs	r2, r1
    2154:	619a      	str	r2, [r3, #24]
			break;
    2156:	e00f      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2158:	4b0a      	ldr	r3, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215a:	4a0a      	ldr	r2, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215c:	69d1      	ldr	r1, [r2, #28]
    215e:	683a      	ldr	r2, [r7, #0]
    2160:	430a      	orrs	r2, r1
    2162:	61da      	str	r2, [r3, #28]
			break;
    2164:	e008      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2166:	4b07      	ldr	r3, [pc, #28]	; (2184 <system_apb_clock_set_mask+0x58>)
    2168:	4a06      	ldr	r2, [pc, #24]	; (2184 <system_apb_clock_set_mask+0x58>)
    216a:	6a11      	ldr	r1, [r2, #32]
    216c:	683a      	ldr	r2, [r7, #0]
    216e:	430a      	orrs	r2, r1
    2170:	621a      	str	r2, [r3, #32]
			break;
    2172:	e001      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2174:	2317      	movs	r3, #23
    2176:	e000      	b.n	217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2178:	2300      	movs	r3, #0
}
    217a:	0018      	movs	r0, r3
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	40000400 	.word	0x40000400

00002188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2201      	movs	r2, #1
    21a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2200      	movs	r2, #0
    21a6:	70da      	strb	r2, [r3, #3]
}
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	0002      	movs	r2, r0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    21bc:	1dfb      	adds	r3, r7, #7
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d002      	beq.n	21ca <system_voltage_reference_enable+0x1a>
    21c4:	2b01      	cmp	r3, #1
    21c6:	d007      	beq.n	21d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    21c8:	e00d      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <system_voltage_reference_enable+0x3c>)
    21cc:	4a07      	ldr	r2, [pc, #28]	; (21ec <system_voltage_reference_enable+0x3c>)
    21ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21d0:	2102      	movs	r1, #2
    21d2:	430a      	orrs	r2, r1
    21d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21d6:	e006      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21de:	2104      	movs	r1, #4
    21e0:	430a      	orrs	r2, r1
    21e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21e4:	46c0      	nop			; (mov r8, r8)
	}
}
    21e6:	46bd      	mov	sp, r7
    21e8:	b002      	add	sp, #8
    21ea:	bd80      	pop	{r7, pc}
    21ec:	40000800 	.word	0x40000800

000021f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	7e5b      	ldrb	r3, [r3, #25]
    2202:	b2db      	uxtb	r3, r3
    2204:	b25b      	sxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	da01      	bge.n	220e <adc_is_syncing+0x1e>
		return true;
    220a:	2301      	movs	r3, #1
    220c:	e000      	b.n	2210 <adc_is_syncing+0x20>
	}

	return false;
    220e:	2300      	movs	r3, #0
}
    2210:	0018      	movs	r0, r3
    2212:	46bd      	mov	sp, r7
    2214:	b004      	add	sp, #16
    2216:	bd80      	pop	{r7, pc}

00002218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2200      	movs	r2, #0
    222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	2200      	movs	r2, #0
    223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2200      	movs	r2, #0
    2242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2200      	movs	r2, #0
    2248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2200      	movs	r2, #0
    224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2200      	movs	r2, #0
    2254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	0152      	lsls	r2, r2, #5
    225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2200      	movs	r2, #0
    2262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	2200      	movs	r2, #0
    2268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	2200      	movs	r2, #0
    226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	2200      	movs	r2, #0
    2274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2200      	movs	r2, #0
    227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	222a      	movs	r2, #42	; 0x2a
    2280:	2100      	movs	r1, #0
    2282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	2200      	movs	r2, #0
    2288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2200      	movs	r2, #0
    228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2224      	movs	r2, #36	; 0x24
    2294:	2100      	movs	r1, #0
    2296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	2200      	movs	r2, #0
    229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2200      	movs	r2, #0
    22a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	2200      	movs	r2, #0
    22a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	222b      	movs	r2, #43	; 0x2b
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	222c      	movs	r2, #44	; 0x2c
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	46bd      	mov	sp, r7
    22be:	b002      	add	sp, #8
    22c0:	bd80      	pop	{r7, pc}
	...

000022c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b098      	sub	sp, #96	; 0x60
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    22cc:	230c      	movs	r3, #12
    22ce:	18fa      	adds	r2, r7, r3
    22d0:	4b15      	ldr	r3, [pc, #84]	; (2328 <_adc_configure_ain_pin+0x64>)
    22d2:	0010      	movs	r0, r2
    22d4:	0019      	movs	r1, r3
    22d6:	2350      	movs	r3, #80	; 0x50
    22d8:	001a      	movs	r2, r3
    22da:	4b14      	ldr	r3, [pc, #80]	; (232c <_adc_configure_ain_pin+0x68>)
    22dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <_adc_configure_ain_pin+0x6c>)
    22e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2b13      	cmp	r3, #19
    22e6:	d81a      	bhi.n	231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    22e8:	230c      	movs	r3, #12
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	687a      	ldr	r2, [r7, #4]
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	58d3      	ldr	r3, [r2, r3]
    22f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    22f4:	2308      	movs	r3, #8
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	0018      	movs	r0, r3
    22fa:	4b0e      	ldr	r3, [pc, #56]	; (2334 <_adc_configure_ain_pin+0x70>)
    22fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    22fe:	2308      	movs	r3, #8
    2300:	18fb      	adds	r3, r7, r3
    2302:	2200      	movs	r2, #0
    2304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2306:	2308      	movs	r3, #8
    2308:	18fb      	adds	r3, r7, r3
    230a:	2201      	movs	r2, #1
    230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2310:	b2db      	uxtb	r3, r3
    2312:	2208      	movs	r2, #8
    2314:	18ba      	adds	r2, r7, r2
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b07      	ldr	r3, [pc, #28]	; (2338 <_adc_configure_ain_pin+0x74>)
    231c:	4798      	blx	r3
	}
}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46bd      	mov	sp, r7
    2322:	b018      	add	sp, #96	; 0x60
    2324:	bd80      	pop	{r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	0001b57c 	.word	0x0001b57c
    232c:	0001b3e9 	.word	0x0001b3e9
    2330:	0000ffff 	.word	0x0000ffff
    2334:	00002189 	.word	0x00002189
    2338:	000088d9 	.word	0x000088d9

0000233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b089      	sub	sp, #36	; 0x24
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2346:	231f      	movs	r3, #31
    2348:	18fb      	adds	r3, r7, r3
    234a:	2200      	movs	r2, #0
    234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    234e:	2310      	movs	r3, #16
    2350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2352:	2317      	movs	r3, #23
    2354:	18fb      	adds	r3, r7, r3
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2360:	230c      	movs	r3, #12
    2362:	18fb      	adds	r3, r7, r3
    2364:	0018      	movs	r0, r3
    2366:	4bce      	ldr	r3, [pc, #824]	; (26a0 <_adc_set_config+0x364>)
    2368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	781a      	ldrb	r2, [r3, #0]
    236e:	230c      	movs	r3, #12
    2370:	18fb      	adds	r3, r7, r3
    2372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2374:	230c      	movs	r3, #12
    2376:	18fb      	adds	r3, r7, r3
    2378:	0019      	movs	r1, r3
    237a:	201e      	movs	r0, #30
    237c:	4bc9      	ldr	r3, [pc, #804]	; (26a4 <_adc_set_config+0x368>)
    237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2380:	201e      	movs	r0, #30
    2382:	4bc9      	ldr	r3, [pc, #804]	; (26a8 <_adc_set_config+0x36c>)
    2384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2386:	683b      	ldr	r3, [r7, #0]
    2388:	222c      	movs	r2, #44	; 0x2c
    238a:	5c9b      	ldrb	r3, [r3, r2]
    238c:	2b00      	cmp	r3, #0
    238e:	d040      	beq.n	2412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2390:	2316      	movs	r3, #22
    2392:	18fb      	adds	r3, r7, r3
    2394:	683a      	ldr	r2, [r7, #0]
    2396:	212b      	movs	r1, #43	; 0x2b
    2398:	5c52      	ldrb	r2, [r2, r1]
    239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    23a0:	2315      	movs	r3, #21
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	2216      	movs	r2, #22
    23a6:	18ba      	adds	r2, r7, r2
    23a8:	7812      	ldrb	r2, [r2, #0]
    23aa:	188a      	adds	r2, r1, r2
    23ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	222c      	movs	r2, #44	; 0x2c
    23b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2215      	movs	r2, #21
    23ba:	18ba      	adds	r2, r7, r2
    23bc:	7812      	ldrb	r2, [r2, #0]
    23be:	188a      	adds	r2, r1, r2
    23c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    23c2:	e018      	b.n	23f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    23c4:	2316      	movs	r3, #22
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	220f      	movs	r2, #15
    23cc:	4013      	ands	r3, r2
    23ce:	683a      	ldr	r2, [r7, #0]
    23d0:	7b12      	ldrb	r2, [r2, #12]
    23d2:	189b      	adds	r3, r3, r2
    23d4:	0018      	movs	r0, r3
    23d6:	4bb5      	ldr	r3, [pc, #724]	; (26ac <_adc_set_config+0x370>)
    23d8:	4798      	blx	r3
			start_pin++;
    23da:	2315      	movs	r3, #21
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	2315      	movs	r3, #21
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	3201      	adds	r2, #1
    23e6:	701a      	strb	r2, [r3, #0]
			offset++;
    23e8:	2316      	movs	r3, #22
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781a      	ldrb	r2, [r3, #0]
    23ee:	2316      	movs	r3, #22
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	3201      	adds	r2, #1
    23f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    23f6:	2315      	movs	r3, #21
    23f8:	18fa      	adds	r2, r7, r3
    23fa:	230f      	movs	r3, #15
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	7812      	ldrb	r2, [r2, #0]
    2400:	781b      	ldrb	r3, [r3, #0]
    2402:	429a      	cmp	r2, r3
    2404:	d3de      	bcc.n	23c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2406:	683b      	ldr	r3, [r7, #0]
    2408:	89db      	ldrh	r3, [r3, #14]
    240a:	0018      	movs	r0, r3
    240c:	4ba7      	ldr	r3, [pc, #668]	; (26ac <_adc_set_config+0x370>)
    240e:	4798      	blx	r3
    2410:	e009      	b.n	2426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	7b1b      	ldrb	r3, [r3, #12]
    2416:	0018      	movs	r0, r3
    2418:	4ba4      	ldr	r3, [pc, #656]	; (26ac <_adc_set_config+0x370>)
    241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	89db      	ldrh	r3, [r3, #14]
    2420:	0018      	movs	r0, r3
    2422:	4ba2      	ldr	r3, [pc, #648]	; (26ac <_adc_set_config+0x370>)
    2424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	7d5b      	ldrb	r3, [r3, #21]
    242a:	009b      	lsls	r3, r3, #2
    242c:	b2da      	uxtb	r2, r3
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	7d9b      	ldrb	r3, [r3, #22]
    2436:	01db      	lsls	r3, r3, #7
    2438:	b25a      	sxtb	r2, r3
			(config->reference);
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	785b      	ldrb	r3, [r3, #1]
    243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2440:	4313      	orrs	r3, r2
    2442:	b25b      	sxtb	r3, r3
    2444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	791b      	ldrb	r3, [r3, #4]
    244e:	2b34      	cmp	r3, #52	; 0x34
    2450:	d846      	bhi.n	24e0 <_adc_set_config+0x1a4>
    2452:	009a      	lsls	r2, r3, #2
    2454:	4b96      	ldr	r3, [pc, #600]	; (26b0 <_adc_set_config+0x374>)
    2456:	18d3      	adds	r3, r2, r3
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    245c:	231f      	movs	r3, #31
    245e:	18fb      	adds	r3, r7, r3
    2460:	683a      	ldr	r2, [r7, #0]
    2462:	7c52      	ldrb	r2, [r2, #17]
    2464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2466:	2317      	movs	r3, #23
    2468:	18fb      	adds	r3, r7, r3
    246a:	683a      	ldr	r2, [r7, #0]
    246c:	7c12      	ldrb	r2, [r2, #16]
    246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2470:	2310      	movs	r3, #16
    2472:	61bb      	str	r3, [r7, #24]
		break;
    2474:	e036      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2476:	231f      	movs	r3, #31
    2478:	18fb      	adds	r3, r7, r3
    247a:	2201      	movs	r2, #1
    247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	2202      	movs	r2, #2
    2484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2486:	2310      	movs	r3, #16
    2488:	61bb      	str	r3, [r7, #24]
		break;
    248a:	e02b      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    248c:	231f      	movs	r3, #31
    248e:	18fb      	adds	r3, r7, r3
    2490:	2202      	movs	r2, #2
    2492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2494:	2317      	movs	r3, #23
    2496:	18fb      	adds	r3, r7, r3
    2498:	2204      	movs	r2, #4
    249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    249c:	2310      	movs	r3, #16
    249e:	61bb      	str	r3, [r7, #24]
		break;
    24a0:	e020      	b.n	24e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    24a2:	231f      	movs	r3, #31
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    24aa:	2317      	movs	r3, #23
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	2206      	movs	r2, #6
    24b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24b2:	2310      	movs	r3, #16
    24b4:	61bb      	str	r3, [r7, #24]
		break;
    24b6:	e015      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    24b8:	231f      	movs	r3, #31
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2200      	movs	r2, #0
    24be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    24c0:	2317      	movs	r3, #23
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2208      	movs	r2, #8
    24c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24c8:	2310      	movs	r3, #16
    24ca:	61bb      	str	r3, [r7, #24]
		break;
    24cc:	e00a      	b.n	24e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    24ce:	2330      	movs	r3, #48	; 0x30
    24d0:	61bb      	str	r3, [r7, #24]
		break;
    24d2:	e007      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    24d4:	2320      	movs	r3, #32
    24d6:	61bb      	str	r3, [r7, #24]
		break;
    24d8:	e004      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    24da:	2300      	movs	r3, #0
    24dc:	61bb      	str	r3, [r7, #24]
		break;
    24de:	e001      	b.n	24e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    24e0:	2317      	movs	r3, #23
    24e2:	e1ae      	b.n	2842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    24e4:	231f      	movs	r3, #31
    24e6:	18fb      	adds	r3, r7, r3
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2270      	movs	r2, #112	; 0x70
    24f0:	4013      	ands	r3, r2
    24f2:	b2da      	uxtb	r2, r3
    24f4:	2317      	movs	r3, #23
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	4313      	orrs	r3, r2
    24fc:	b2da      	uxtb	r2, r3
    24fe:	693b      	ldr	r3, [r7, #16]
    2500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	7ddb      	ldrb	r3, [r3, #23]
    2506:	2b3f      	cmp	r3, #63	; 0x3f
    2508:	d901      	bls.n	250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    250a:	2317      	movs	r3, #23
    250c:	e199      	b.n	2842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    250e:	683b      	ldr	r3, [r7, #0]
    2510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2512:	693b      	ldr	r3, [r7, #16]
    2514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	0018      	movs	r0, r3
    251c:	4b65      	ldr	r3, [pc, #404]	; (26b4 <_adc_set_config+0x378>)
    251e:	4798      	blx	r3
    2520:	1e03      	subs	r3, r0, #0
    2522:	d1f9      	bne.n	2518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	885a      	ldrh	r2, [r3, #2]
    2528:	69bb      	ldr	r3, [r7, #24]
    252a:	b29b      	uxth	r3, r3
    252c:	4313      	orrs	r3, r2
    252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	2124      	movs	r1, #36	; 0x24
    2534:	5c5b      	ldrb	r3, [r3, r1]
    2536:	b29b      	uxth	r3, r3
    2538:	00db      	lsls	r3, r3, #3
    253a:	b29b      	uxth	r3, r3
			resolution |
    253c:	4313      	orrs	r3, r2
    253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	7d1b      	ldrb	r3, [r3, #20]
    2544:	b29b      	uxth	r3, r3
    2546:	009b      	lsls	r3, r3, #2
    2548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    254a:	4313      	orrs	r3, r2
    254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	7c9b      	ldrb	r3, [r3, #18]
    2552:	b29b      	uxth	r3, r3
    2554:	18db      	adds	r3, r3, r3
    2556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2558:	4313      	orrs	r3, r2
    255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	7cdb      	ldrb	r3, [r3, #19]
    2560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2562:	4313      	orrs	r3, r2
    2564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2566:	693b      	ldr	r3, [r7, #16]
    2568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    256a:	683b      	ldr	r3, [r7, #0]
    256c:	7e1b      	ldrb	r3, [r3, #24]
    256e:	2b00      	cmp	r3, #0
    2570:	d100      	bne.n	2574 <_adc_set_config+0x238>
    2572:	e0c4      	b.n	26fe <_adc_set_config+0x3c2>
		switch (resolution) {
    2574:	69bb      	ldr	r3, [r7, #24]
    2576:	2b10      	cmp	r3, #16
    2578:	d100      	bne.n	257c <_adc_set_config+0x240>
    257a:	e076      	b.n	266a <_adc_set_config+0x32e>
    257c:	d802      	bhi.n	2584 <_adc_set_config+0x248>
    257e:	2b00      	cmp	r3, #0
    2580:	d04d      	beq.n	261e <_adc_set_config+0x2e2>
    2582:	e0bc      	b.n	26fe <_adc_set_config+0x3c2>
    2584:	2b20      	cmp	r3, #32
    2586:	d023      	beq.n	25d0 <_adc_set_config+0x294>
    2588:	2b30      	cmp	r3, #48	; 0x30
    258a:	d000      	beq.n	258e <_adc_set_config+0x252>
    258c:	e0b7      	b.n	26fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	7cdb      	ldrb	r3, [r3, #19]
    2592:	2b00      	cmp	r3, #0
    2594:	d011      	beq.n	25ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2596:	683b      	ldr	r3, [r7, #0]
    2598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    259a:	2b7f      	cmp	r3, #127	; 0x7f
    259c:	dc0b      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    25a2:	3380      	adds	r3, #128	; 0x80
    25a4:	db07      	blt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    25a6:	683b      	ldr	r3, [r7, #0]
    25a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    25aa:	2b7f      	cmp	r3, #127	; 0x7f
    25ac:	dc03      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    25ae:	683b      	ldr	r3, [r7, #0]
    25b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    25b2:	3380      	adds	r3, #128	; 0x80
    25b4:	da01      	bge.n	25ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25b6:	2317      	movs	r3, #23
    25b8:	e143      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	69db      	ldr	r3, [r3, #28]
    25be:	2bff      	cmp	r3, #255	; 0xff
    25c0:	dc04      	bgt.n	25cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    25c6:	2bff      	cmp	r3, #255	; 0xff
    25c8:	dc00      	bgt.n	25cc <_adc_set_config+0x290>
    25ca:	e091      	b.n	26f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25cc:	2317      	movs	r3, #23
    25ce:	e138      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    25d0:	683b      	ldr	r3, [r7, #0]
    25d2:	7cdb      	ldrb	r3, [r3, #19]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d015      	beq.n	2604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    25dc:	4a36      	ldr	r2, [pc, #216]	; (26b8 <_adc_set_config+0x37c>)
    25de:	4293      	cmp	r3, r2
    25e0:	dc0e      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    25e2:	683b      	ldr	r3, [r7, #0]
    25e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    25e6:	4a35      	ldr	r2, [pc, #212]	; (26bc <_adc_set_config+0x380>)
    25e8:	4293      	cmp	r3, r2
    25ea:	db09      	blt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    25ec:	683b      	ldr	r3, [r7, #0]
    25ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    25f0:	4a31      	ldr	r2, [pc, #196]	; (26b8 <_adc_set_config+0x37c>)
    25f2:	4293      	cmp	r3, r2
    25f4:	dc04      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    25fa:	4a30      	ldr	r2, [pc, #192]	; (26bc <_adc_set_config+0x380>)
    25fc:	4293      	cmp	r3, r2
    25fe:	da01      	bge.n	2604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2600:	2317      	movs	r3, #23
    2602:	e11e      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2604:	683b      	ldr	r3, [r7, #0]
    2606:	69db      	ldr	r3, [r3, #28]
    2608:	4a2d      	ldr	r2, [pc, #180]	; (26c0 <_adc_set_config+0x384>)
    260a:	4293      	cmp	r3, r2
    260c:	dc05      	bgt.n	261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2612:	4a2b      	ldr	r2, [pc, #172]	; (26c0 <_adc_set_config+0x384>)
    2614:	4293      	cmp	r3, r2
    2616:	dc00      	bgt.n	261a <_adc_set_config+0x2de>
    2618:	e06c      	b.n	26f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    261a:	2317      	movs	r3, #23
    261c:	e111      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    261e:	683b      	ldr	r3, [r7, #0]
    2620:	7cdb      	ldrb	r3, [r3, #19]
    2622:	2b00      	cmp	r3, #0
    2624:	d015      	beq.n	2652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2626:	683b      	ldr	r3, [r7, #0]
    2628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    262a:	4a26      	ldr	r2, [pc, #152]	; (26c4 <_adc_set_config+0x388>)
    262c:	4293      	cmp	r3, r2
    262e:	dc0e      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2634:	4a24      	ldr	r2, [pc, #144]	; (26c8 <_adc_set_config+0x38c>)
    2636:	4293      	cmp	r3, r2
    2638:	db09      	blt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    263e:	4a21      	ldr	r2, [pc, #132]	; (26c4 <_adc_set_config+0x388>)
    2640:	4293      	cmp	r3, r2
    2642:	dc04      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2648:	4a1f      	ldr	r2, [pc, #124]	; (26c8 <_adc_set_config+0x38c>)
    264a:	4293      	cmp	r3, r2
    264c:	da01      	bge.n	2652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    264e:	2317      	movs	r3, #23
    2650:	e0f7      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	69db      	ldr	r3, [r3, #28]
    2656:	4a1d      	ldr	r2, [pc, #116]	; (26cc <_adc_set_config+0x390>)
    2658:	4293      	cmp	r3, r2
    265a:	dc04      	bgt.n	2666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2660:	4a1a      	ldr	r2, [pc, #104]	; (26cc <_adc_set_config+0x390>)
    2662:	4293      	cmp	r3, r2
    2664:	dd48      	ble.n	26f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2666:	2317      	movs	r3, #23
    2668:	e0eb      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    266a:	683b      	ldr	r3, [r7, #0]
    266c:	7cdb      	ldrb	r3, [r3, #19]
    266e:	2b00      	cmp	r3, #0
    2670:	d032      	beq.n	26d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2672:	683b      	ldr	r3, [r7, #0]
    2674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2676:	4a16      	ldr	r2, [pc, #88]	; (26d0 <_adc_set_config+0x394>)
    2678:	4293      	cmp	r3, r2
    267a:	dc0e      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2680:	4a14      	ldr	r2, [pc, #80]	; (26d4 <_adc_set_config+0x398>)
    2682:	4293      	cmp	r3, r2
    2684:	db09      	blt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    268a:	4a11      	ldr	r2, [pc, #68]	; (26d0 <_adc_set_config+0x394>)
    268c:	4293      	cmp	r3, r2
    268e:	dc04      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2694:	4a0f      	ldr	r2, [pc, #60]	; (26d4 <_adc_set_config+0x398>)
    2696:	4293      	cmp	r3, r2
    2698:	da1e      	bge.n	26d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    269a:	2317      	movs	r3, #23
    269c:	e0d1      	b.n	2842 <_adc_set_config+0x506>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00002115 	.word	0x00002115
    26a4:	000085ed 	.word	0x000085ed
    26a8:	00008631 	.word	0x00008631
    26ac:	000022c5 	.word	0x000022c5
    26b0:	0001b5cc 	.word	0x0001b5cc
    26b4:	000021f1 	.word	0x000021f1
    26b8:	000001ff 	.word	0x000001ff
    26bc:	fffffe00 	.word	0xfffffe00
    26c0:	000003ff 	.word	0x000003ff
    26c4:	000007ff 	.word	0x000007ff
    26c8:	fffff800 	.word	0xfffff800
    26cc:	00000fff 	.word	0x00000fff
    26d0:	00007fff 	.word	0x00007fff
    26d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	69db      	ldr	r3, [r3, #28]
    26dc:	4a5b      	ldr	r2, [pc, #364]	; (284c <_adc_set_config+0x510>)
    26de:	4293      	cmp	r3, r2
    26e0:	dc04      	bgt.n	26ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    26e2:	683b      	ldr	r3, [r7, #0]
    26e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    26e6:	4a59      	ldr	r2, [pc, #356]	; (284c <_adc_set_config+0x510>)
    26e8:	4293      	cmp	r3, r2
    26ea:	dd07      	ble.n	26fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    26ec:	2317      	movs	r3, #23
    26ee:	e0a8      	b.n	2842 <_adc_set_config+0x506>
			break;
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	e004      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	e002      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	e000      	b.n	26fe <_adc_set_config+0x3c2>
			}
			break;
    26fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	0018      	movs	r0, r3
    2704:	4b52      	ldr	r3, [pc, #328]	; (2850 <_adc_set_config+0x514>)
    2706:	4798      	blx	r3
    2708:	1e03      	subs	r3, r0, #0
    270a:	d1f9      	bne.n	2700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    270c:	683b      	ldr	r3, [r7, #0]
    270e:	7e1a      	ldrb	r2, [r3, #24]
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2714:	46c0      	nop			; (mov r8, r8)
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	0018      	movs	r0, r3
    271a:	4b4d      	ldr	r3, [pc, #308]	; (2850 <_adc_set_config+0x514>)
    271c:	4798      	blx	r3
    271e:	1e03      	subs	r3, r0, #0
    2720:	d1f9      	bne.n	2716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2722:	683b      	ldr	r3, [r7, #0]
    2724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2726:	b29a      	uxth	r2, r3
    2728:	693b      	ldr	r3, [r7, #16]
    272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	0018      	movs	r0, r3
    2732:	4b47      	ldr	r3, [pc, #284]	; (2850 <_adc_set_config+0x514>)
    2734:	4798      	blx	r3
    2736:	1e03      	subs	r3, r0, #0
    2738:	d1f9      	bne.n	272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	6a1b      	ldr	r3, [r3, #32]
    273e:	b29a      	uxth	r2, r3
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2744:	2314      	movs	r3, #20
    2746:	18fb      	adds	r3, r7, r3
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	212c      	movs	r1, #44	; 0x2c
    274c:	5c52      	ldrb	r2, [r2, r1]
    274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2750:	2314      	movs	r3, #20
    2752:	18fb      	adds	r3, r7, r3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d006      	beq.n	2768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    275a:	2314      	movs	r3, #20
    275c:	18fb      	adds	r3, r7, r3
    275e:	781a      	ldrb	r2, [r3, #0]
    2760:	2314      	movs	r3, #20
    2762:	18fb      	adds	r3, r7, r3
    2764:	3a01      	subs	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2768:	2314      	movs	r3, #20
    276a:	18fb      	adds	r3, r7, r3
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	2b0f      	cmp	r3, #15
    2770:	d804      	bhi.n	277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	222b      	movs	r2, #43	; 0x2b
    2776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2778:	2b0f      	cmp	r3, #15
    277a:	d901      	bls.n	2780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    277c:	2317      	movs	r3, #23
    277e:	e060      	b.n	2842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	0018      	movs	r0, r3
    2786:	4b32      	ldr	r3, [pc, #200]	; (2850 <_adc_set_config+0x514>)
    2788:	4798      	blx	r3
    278a:	1e03      	subs	r3, r0, #0
    278c:	d1f9      	bne.n	2782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    278e:	683b      	ldr	r3, [r7, #0]
    2790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2792:	683a      	ldr	r2, [r7, #0]
    2794:	212b      	movs	r1, #43	; 0x2b
    2796:	5c52      	ldrb	r2, [r2, r1]
    2798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    279c:	2214      	movs	r2, #20
    279e:	18ba      	adds	r2, r7, r2
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    27a4:	4313      	orrs	r3, r2
			config->negative_input |
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    27aa:	4313      	orrs	r3, r2
			config->positive_input;
    27ac:	683a      	ldr	r2, [r7, #0]
    27ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    27b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    27b2:	693b      	ldr	r3, [r7, #16]
    27b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	222a      	movs	r2, #42	; 0x2a
    27ba:	5c9a      	ldrb	r2, [r3, r2]
    27bc:	693b      	ldr	r3, [r7, #16]
    27be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	220f      	movs	r2, #15
    27c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    27c6:	683b      	ldr	r3, [r7, #0]
    27c8:	2224      	movs	r2, #36	; 0x24
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d01e      	beq.n	280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    27d0:	683b      	ldr	r3, [r7, #0]
    27d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    27d4:	4a1f      	ldr	r2, [pc, #124]	; (2854 <_adc_set_config+0x518>)
    27d6:	4293      	cmp	r3, r2
    27d8:	d901      	bls.n	27de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    27da:	2317      	movs	r3, #23
    27dc:	e031      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    27de:	683b      	ldr	r3, [r7, #0]
    27e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	2228      	movs	r2, #40	; 0x28
    27ea:	5e9b      	ldrsh	r3, [r3, r2]
    27ec:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_adc_set_config+0x51c>)
    27ee:	4293      	cmp	r3, r2
    27f0:	dc05      	bgt.n	27fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    27f2:	683b      	ldr	r3, [r7, #0]
    27f4:	2228      	movs	r2, #40	; 0x28
    27f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    27f8:	4a18      	ldr	r2, [pc, #96]	; (285c <_adc_set_config+0x520>)
    27fa:	4293      	cmp	r3, r2
    27fc:	da01      	bge.n	2802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    27fe:	2317      	movs	r3, #23
    2800:	e01f      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2802:	683b      	ldr	r3, [r7, #0]
    2804:	2228      	movs	r2, #40	; 0x28
    2806:	5e9b      	ldrsh	r3, [r3, r2]
    2808:	b29a      	uxth	r2, r3
    280a:	693b      	ldr	r3, [r7, #16]
    280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    280e:	4b14      	ldr	r3, [pc, #80]	; (2860 <_adc_set_config+0x524>)
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	08db      	lsrs	r3, r3, #3
    2814:	b29b      	uxth	r3, r3
    2816:	021b      	lsls	r3, r3, #8
    2818:	b29a      	uxth	r2, r3
    281a:	23e0      	movs	r3, #224	; 0xe0
    281c:	00db      	lsls	r3, r3, #3
    281e:	4013      	ands	r3, r2
    2820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2822:	4b10      	ldr	r3, [pc, #64]	; (2864 <_adc_set_config+0x528>)
    2824:	685c      	ldr	r4, [r3, #4]
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	0161      	lsls	r1, r4, #5
    282a:	0edd      	lsrs	r5, r3, #27
    282c:	430d      	orrs	r5, r1
    282e:	0ee6      	lsrs	r6, r4, #27
    2830:	b2ab      	uxth	r3, r5
    2832:	21ff      	movs	r1, #255	; 0xff
    2834:	400b      	ands	r3, r1
    2836:	b29b      	uxth	r3, r3
			) |
    2838:	4313      	orrs	r3, r2
    283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2840:	2300      	movs	r3, #0
}
    2842:	0018      	movs	r0, r3
    2844:	46bd      	mov	sp, r7
    2846:	b009      	add	sp, #36	; 0x24
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000ffff 	.word	0x0000ffff
    2850:	000021f1 	.word	0x000021f1
    2854:	00000fff 	.word	0x00000fff
    2858:	000007ff 	.word	0x000007ff
    285c:	fffff800 	.word	0xfffff800
    2860:	00806024 	.word	0x00806024
    2864:	00806020 	.word	0x00806020

00002868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2868:	b580      	push	{r7, lr}
    286a:	b084      	sub	sp, #16
    286c:	af00      	add	r7, sp, #0
    286e:	60f8      	str	r0, [r7, #12]
    2870:	60b9      	str	r1, [r7, #8]
    2872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	68ba      	ldr	r2, [r7, #8]
    2878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	025b      	lsls	r3, r3, #9
    287e:	0019      	movs	r1, r3
    2880:	2002      	movs	r0, #2
    2882:	4b15      	ldr	r3, [pc, #84]	; (28d8 <adc_init+0x70>)
    2884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	b2db      	uxtb	r3, r3
    288c:	001a      	movs	r2, r3
    288e:	2301      	movs	r3, #1
    2890:	4013      	ands	r3, r2
    2892:	d001      	beq.n	2898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2894:	2305      	movs	r3, #5
    2896:	e01a      	b.n	28ce <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2898:	68bb      	ldr	r3, [r7, #8]
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	b2db      	uxtb	r3, r3
    289e:	001a      	movs	r2, r3
    28a0:	2302      	movs	r3, #2
    28a2:	4013      	ands	r3, r2
    28a4:	d001      	beq.n	28aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    28a6:	231c      	movs	r3, #28
    28a8:	e011      	b.n	28ce <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	785a      	ldrb	r2, [r3, #1]
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	791b      	ldrb	r3, [r3, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d102      	bne.n	28c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    28ba:	2001      	movs	r0, #1
    28bc:	4b07      	ldr	r3, [pc, #28]	; (28dc <adc_init+0x74>)
    28be:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    28c0:	687a      	ldr	r2, [r7, #4]
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	0011      	movs	r1, r2
    28c6:	0018      	movs	r0, r3
    28c8:	4b05      	ldr	r3, [pc, #20]	; (28e0 <adc_init+0x78>)
    28ca:	4798      	blx	r3
    28cc:	0003      	movs	r3, r0
}
    28ce:	0018      	movs	r0, r3
    28d0:	46bd      	mov	sp, r7
    28d2:	b004      	add	sp, #16
    28d4:	bd80      	pop	{r7, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	0000212d 	.word	0x0000212d
    28dc:	000021b1 	.word	0x000021b1
    28e0:	0000233d 	.word	0x0000233d

000028e4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    28e8:	4b02      	ldr	r3, [pc, #8]	; (28f4 <system_interrupt_enter_critical_section+0x10>)
    28ea:	4798      	blx	r3
}
    28ec:	46c0      	nop			; (mov r8, r8)
    28ee:	46bd      	mov	sp, r7
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	00007c39 	.word	0x00007c39

000028f8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    28fc:	4b02      	ldr	r3, [pc, #8]	; (2908 <system_interrupt_leave_critical_section+0x10>)
    28fe:	4798      	blx	r3
}
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46bd      	mov	sp, r7
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	00007c8d 	.word	0x00007c8d

0000290c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    290c:	b580      	push	{r7, lr}
    290e:	b086      	sub	sp, #24
    2910:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    2912:	4b49      	ldr	r3, [pc, #292]	; (2a38 <DMAC_Handler+0x12c>)
    2914:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2916:	4b49      	ldr	r3, [pc, #292]	; (2a3c <DMAC_Handler+0x130>)
    2918:	8c1b      	ldrh	r3, [r3, #32]
    291a:	b29b      	uxth	r3, r3
    291c:	b2da      	uxtb	r2, r3
    291e:	2317      	movs	r3, #23
    2920:	18fb      	adds	r3, r7, r3
    2922:	210f      	movs	r1, #15
    2924:	400a      	ands	r2, r1
    2926:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    2928:	2317      	movs	r3, #23
    292a:	18fb      	adds	r3, r7, r3
    292c:	781a      	ldrb	r2, [r3, #0]
    292e:	4b44      	ldr	r3, [pc, #272]	; (2a40 <DMAC_Handler+0x134>)
    2930:	0092      	lsls	r2, r2, #2
    2932:	58d3      	ldr	r3, [r2, r3]
    2934:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2936:	4a41      	ldr	r2, [pc, #260]	; (2a3c <DMAC_Handler+0x130>)
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	210f      	movs	r1, #15
    293e:	400b      	ands	r3, r1
    2940:	b2d9      	uxtb	r1, r3
    2942:	233f      	movs	r3, #63	; 0x3f
    2944:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    2946:	493d      	ldr	r1, [pc, #244]	; (2a3c <DMAC_Handler+0x130>)
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	224e      	movs	r2, #78	; 0x4e
    294e:	5c8a      	ldrb	r2, [r1, r2]
    2950:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2952:	693b      	ldr	r3, [r7, #16]
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	4a3b      	ldr	r2, [pc, #236]	; (2a44 <DMAC_Handler+0x138>)
    2958:	011b      	lsls	r3, r3, #4
    295a:	18d3      	adds	r3, r2, r3
    295c:	3302      	adds	r3, #2
    295e:	881b      	ldrh	r3, [r3, #0]
    2960:	b29b      	uxth	r3, r3
    2962:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	4a37      	ldr	r2, [pc, #220]	; (2a48 <DMAC_Handler+0x13c>)
    296a:	011b      	lsls	r3, r3, #4
    296c:	18d3      	adds	r3, r2, r3
    296e:	3302      	adds	r3, #2
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    2976:	68ba      	ldr	r2, [r7, #8]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	1ad2      	subs	r2, r2, r3
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    2980:	230f      	movs	r3, #15
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2201      	movs	r2, #1
    2988:	4013      	ands	r3, r2
    298a:	d016      	beq.n	29ba <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    298c:	4a2b      	ldr	r2, [pc, #172]	; (2a3c <DMAC_Handler+0x130>)
    298e:	234e      	movs	r3, #78	; 0x4e
    2990:	2101      	movs	r1, #1
    2992:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    2994:	693b      	ldr	r3, [r7, #16]
    2996:	2210      	movs	r2, #16
    2998:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    299a:	693b      	ldr	r3, [r7, #16]
    299c:	7c1b      	ldrb	r3, [r3, #16]
    299e:	001a      	movs	r2, r3
    29a0:	2301      	movs	r3, #1
    29a2:	4013      	ands	r3, r2
    29a4:	d042      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    29a6:	693b      	ldr	r3, [r7, #16]
    29a8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    29aa:	2b00      	cmp	r3, #0
    29ac:	d03e      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	693a      	ldr	r2, [r7, #16]
    29b4:	0010      	movs	r0, r2
    29b6:	4798      	blx	r3
    29b8:	e038      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    29ba:	230f      	movs	r3, #15
    29bc:	18fb      	adds	r3, r7, r3
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2202      	movs	r2, #2
    29c2:	4013      	ands	r3, r2
    29c4:	d016      	beq.n	29f4 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    29c6:	4a1d      	ldr	r2, [pc, #116]	; (2a3c <DMAC_Handler+0x130>)
    29c8:	234e      	movs	r3, #78	; 0x4e
    29ca:	2102      	movs	r1, #2
    29cc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    29ce:	693b      	ldr	r3, [r7, #16]
    29d0:	2200      	movs	r2, #0
    29d2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29d4:	693b      	ldr	r3, [r7, #16]
    29d6:	7c1b      	ldrb	r3, [r3, #16]
    29d8:	001a      	movs	r2, r3
    29da:	2302      	movs	r3, #2
    29dc:	4013      	ands	r3, r2
    29de:	d025      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    29e0:	693b      	ldr	r3, [r7, #16]
    29e2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29e4:	2b00      	cmp	r3, #0
    29e6:	d021      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	689b      	ldr	r3, [r3, #8]
    29ec:	693a      	ldr	r2, [r7, #16]
    29ee:	0010      	movs	r0, r2
    29f0:	4798      	blx	r3
    29f2:	e01b      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    29f4:	230f      	movs	r3, #15
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	2204      	movs	r2, #4
    29fc:	4013      	ands	r3, r2
    29fe:	d015      	beq.n	2a2c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    2a00:	4a0e      	ldr	r2, [pc, #56]	; (2a3c <DMAC_Handler+0x130>)
    2a02:	234e      	movs	r3, #78	; 0x4e
    2a04:	2104      	movs	r1, #4
    2a06:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    2a08:	693b      	ldr	r3, [r7, #16]
    2a0a:	2206      	movs	r2, #6
    2a0c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a0e:	693b      	ldr	r3, [r7, #16]
    2a10:	7c1b      	ldrb	r3, [r3, #16]
    2a12:	001a      	movs	r2, r3
    2a14:	2304      	movs	r3, #4
    2a16:	4013      	ands	r3, r2
    2a18:	d008      	beq.n	2a2c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d004      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	68db      	ldr	r3, [r3, #12]
    2a26:	693a      	ldr	r2, [r7, #16]
    2a28:	0010      	movs	r0, r2
    2a2a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    2a2c:	4b07      	ldr	r3, [pc, #28]	; (2a4c <DMAC_Handler+0x140>)
    2a2e:	4798      	blx	r3
}
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46bd      	mov	sp, r7
    2a34:	b006      	add	sp, #24
    2a36:	bd80      	pop	{r7, pc}
    2a38:	000028e5 	.word	0x000028e5
    2a3c:	41004800 	.word	0x41004800
    2a40:	200001e0 	.word	0x200001e0
    2a44:	200004a0 	.word	0x200004a0
    2a48:	20000190 	.word	0x20000190
    2a4c:	000028f9 	.word	0x000028f9

00002a50 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b082      	sub	sp, #8
    2a54:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <nvm_is_ready+0x24>)
    2a58:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	7d1b      	ldrb	r3, [r3, #20]
    2a5e:	b2db      	uxtb	r3, r3
    2a60:	001a      	movs	r2, r3
    2a62:	2301      	movs	r3, #1
    2a64:	4013      	ands	r3, r2
    2a66:	1e5a      	subs	r2, r3, #1
    2a68:	4193      	sbcs	r3, r2
    2a6a:	b2db      	uxtb	r3, r3
}
    2a6c:	0018      	movs	r0, r3
    2a6e:	46bd      	mov	sp, r7
    2a70:	b002      	add	sp, #8
    2a72:	bd80      	pop	{r7, pc}
    2a74:	41004000 	.word	0x41004000

00002a78 <system_apb_clock_set_mask>:
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	0002      	movs	r2, r0
    2a80:	6039      	str	r1, [r7, #0]
    2a82:	1dfb      	adds	r3, r7, #7
    2a84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2a86:	1dfb      	adds	r3, r7, #7
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b01      	cmp	r3, #1
    2a8c:	d00a      	beq.n	2aa4 <system_apb_clock_set_mask+0x2c>
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d00f      	beq.n	2ab2 <system_apb_clock_set_mask+0x3a>
    2a92:	2b00      	cmp	r3, #0
    2a94:	d114      	bne.n	2ac0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2a96:	4b0e      	ldr	r3, [pc, #56]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a98:	4a0d      	ldr	r2, [pc, #52]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a9a:	6991      	ldr	r1, [r2, #24]
    2a9c:	683a      	ldr	r2, [r7, #0]
    2a9e:	430a      	orrs	r2, r1
    2aa0:	619a      	str	r2, [r3, #24]
			break;
    2aa2:	e00f      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2aa4:	4b0a      	ldr	r3, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa6:	4a0a      	ldr	r2, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa8:	69d1      	ldr	r1, [r2, #28]
    2aaa:	683a      	ldr	r2, [r7, #0]
    2aac:	430a      	orrs	r2, r1
    2aae:	61da      	str	r2, [r3, #28]
			break;
    2ab0:	e008      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2ab2:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab4:	4a06      	ldr	r2, [pc, #24]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab6:	6a11      	ldr	r1, [r2, #32]
    2ab8:	683a      	ldr	r2, [r7, #0]
    2aba:	430a      	orrs	r2, r1
    2abc:	621a      	str	r2, [r3, #32]
			break;
    2abe:	e001      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2ac0:	2317      	movs	r3, #23
    2ac2:	e000      	b.n	2ac6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ac4:	2300      	movs	r3, #0
}
    2ac6:	0018      	movs	r0, r3
    2ac8:	46bd      	mov	sp, r7
    2aca:	b002      	add	sp, #8
    2acc:	bd80      	pop	{r7, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	40000400 	.word	0x40000400

00002ad4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b084      	sub	sp, #16
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2adc:	4b2f      	ldr	r3, [pc, #188]	; (2b9c <nvm_set_config+0xc8>)
    2ade:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    2ae0:	2104      	movs	r1, #4
    2ae2:	2001      	movs	r0, #1
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <nvm_set_config+0xcc>)
    2ae6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2220      	movs	r2, #32
    2aec:	32ff      	adds	r2, #255	; 0xff
    2aee:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2af0:	4b2c      	ldr	r3, [pc, #176]	; (2ba4 <nvm_set_config+0xd0>)
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	001a      	movs	r2, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4053      	eors	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d001      	beq.n	2b06 <nvm_set_config+0x32>
		return STATUS_BUSY;
    2b02:	2305      	movs	r3, #5
    2b04:	e045      	b.n	2b92 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	021b      	lsls	r3, r3, #8
    2b0c:	001a      	movs	r2, r3
    2b0e:	23c0      	movs	r3, #192	; 0xc0
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	785b      	ldrb	r3, [r3, #1]
    2b18:	01db      	lsls	r3, r3, #7
    2b1a:	0019      	movs	r1, r3
    2b1c:	23ff      	movs	r3, #255	; 0xff
    2b1e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b20:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	789b      	ldrb	r3, [r3, #2]
    2b26:	005b      	lsls	r3, r3, #1
    2b28:	0019      	movs	r1, r3
    2b2a:	231e      	movs	r3, #30
    2b2c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b2e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	78db      	ldrb	r3, [r3, #3]
    2b34:	049b      	lsls	r3, r3, #18
    2b36:	0019      	movs	r1, r3
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	02db      	lsls	r3, r3, #11
    2b3c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b3e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	791b      	ldrb	r3, [r3, #4]
    2b44:	041b      	lsls	r3, r3, #16
    2b46:	0019      	movs	r1, r3
    2b48:	23c0      	movs	r3, #192	; 0xc0
    2b4a:	029b      	lsls	r3, r3, #10
    2b4c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b4e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	689b      	ldr	r3, [r3, #8]
    2b58:	035b      	lsls	r3, r3, #13
    2b5a:	0f5b      	lsrs	r3, r3, #29
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	001a      	movs	r2, r3
    2b60:	2308      	movs	r3, #8
    2b62:	4093      	lsls	r3, r2
    2b64:	b29a      	uxth	r2, r3
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <nvm_set_config+0xd4>)
    2b68:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	689b      	ldr	r3, [r3, #8]
    2b6e:	b29a      	uxth	r2, r3
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <nvm_set_config+0xd4>)
    2b72:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	785a      	ldrb	r2, [r3, #1]
    2b78:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <nvm_set_config+0xd4>)
    2b7a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	8b1b      	ldrh	r3, [r3, #24]
    2b80:	b29b      	uxth	r3, r3
    2b82:	001a      	movs	r2, r3
    2b84:	2380      	movs	r3, #128	; 0x80
    2b86:	005b      	lsls	r3, r3, #1
    2b88:	4013      	ands	r3, r2
    2b8a:	d001      	beq.n	2b90 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    2b8c:	2310      	movs	r3, #16
    2b8e:	e000      	b.n	2b92 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    2b90:	2300      	movs	r3, #0
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	41004000 	.word	0x41004000
    2ba0:	00002a79 	.word	0x00002a79
    2ba4:	00002a51 	.word	0x00002a51
    2ba8:	200001f4 	.word	0x200001f4

00002bac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b086      	sub	sp, #24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60b9      	str	r1, [r7, #8]
    2bb4:	607a      	str	r2, [r7, #4]
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	1c02      	adds	r2, r0, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2bbe:	4b3a      	ldr	r3, [pc, #232]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc0:	881b      	ldrh	r3, [r3, #0]
    2bc2:	001a      	movs	r2, r3
    2bc4:	4b38      	ldr	r3, [pc, #224]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc6:	885b      	ldrh	r3, [r3, #2]
    2bc8:	435a      	muls	r2, r3
    2bca:	68bb      	ldr	r3, [r7, #8]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d209      	bcs.n	2be4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2bd0:	68bb      	ldr	r3, [r7, #8]
    2bd2:	4a36      	ldr	r2, [pc, #216]	; (2cac <nvm_execute_command+0x100>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d903      	bls.n	2be0 <nvm_execute_command+0x34>
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	4a35      	ldr	r2, [pc, #212]	; (2cb0 <nvm_execute_command+0x104>)
    2bdc:	4293      	cmp	r3, r2
    2bde:	d901      	bls.n	2be4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2be0:	2318      	movs	r3, #24
    2be2:	e05c      	b.n	2c9e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2be4:	4b33      	ldr	r3, [pc, #204]	; (2cb4 <nvm_execute_command+0x108>)
    2be6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	685b      	ldr	r3, [r3, #4]
    2bec:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	2280      	movs	r2, #128	; 0x80
    2bf2:	02d2      	lsls	r2, r2, #11
    2bf4:	431a      	orrs	r2, r3
    2bf6:	697b      	ldr	r3, [r7, #20]
    2bf8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	2220      	movs	r2, #32
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2c02:	4b2d      	ldr	r3, [pc, #180]	; (2cb8 <nvm_execute_command+0x10c>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	001a      	movs	r2, r3
    2c0a:	2301      	movs	r3, #1
    2c0c:	4053      	eors	r3, r2
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d004      	beq.n	2c1e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2c14:	697b      	ldr	r3, [r7, #20]
    2c16:	693a      	ldr	r2, [r7, #16]
    2c18:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    2c1a:	2305      	movs	r3, #5
    2c1c:	e03f      	b.n	2c9e <nvm_execute_command+0xf2>
	}

	switch (command) {
    2c1e:	230f      	movs	r3, #15
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b45      	cmp	r3, #69	; 0x45
    2c26:	d81d      	bhi.n	2c64 <nvm_execute_command+0xb8>
    2c28:	009a      	lsls	r2, r3, #2
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <nvm_execute_command+0x110>)
    2c2c:	18d3      	adds	r3, r2, r3
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2c32:	697b      	ldr	r3, [r7, #20]
    2c34:	8b1b      	ldrh	r3, [r3, #24]
    2c36:	b29b      	uxth	r3, r3
    2c38:	001a      	movs	r2, r3
    2c3a:	2380      	movs	r3, #128	; 0x80
    2c3c:	005b      	lsls	r3, r3, #1
    2c3e:	4013      	ands	r3, r2
    2c40:	d004      	beq.n	2c4c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	693a      	ldr	r2, [r7, #16]
    2c46:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    2c48:	2310      	movs	r3, #16
    2c4a:	e028      	b.n	2c9e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c4c:	68bb      	ldr	r3, [r7, #8]
    2c4e:	089b      	lsrs	r3, r3, #2
    2c50:	005a      	lsls	r2, r3, #1
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	61da      	str	r2, [r3, #28]
			break;
    2c56:	e00b      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c58:	68bb      	ldr	r3, [r7, #8]
    2c5a:	089b      	lsrs	r3, r3, #2
    2c5c:	005a      	lsls	r2, r3, #1
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	61da      	str	r2, [r3, #28]
			break;
    2c62:	e005      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	693a      	ldr	r2, [r7, #16]
    2c68:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    2c6a:	2317      	movs	r3, #23
    2c6c:	e017      	b.n	2c9e <nvm_execute_command+0xf2>
			break;
    2c6e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    2c70:	230f      	movs	r3, #15
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	b29b      	uxth	r3, r3
    2c78:	4a11      	ldr	r2, [pc, #68]	; (2cc0 <nvm_execute_command+0x114>)
    2c7a:	4313      	orrs	r3, r2
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	697b      	ldr	r3, [r7, #20]
    2c80:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <nvm_execute_command+0x10c>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	001a      	movs	r2, r3
    2c8c:	2301      	movs	r3, #1
    2c8e:	4053      	eors	r3, r2
    2c90:	b2db      	uxtb	r3, r3
    2c92:	2b00      	cmp	r3, #0
    2c94:	d1f6      	bne.n	2c84 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    2c96:	697b      	ldr	r3, [r7, #20]
    2c98:	693a      	ldr	r2, [r7, #16]
    2c9a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b006      	add	sp, #24
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	200001f4 	.word	0x200001f4
    2cac:	00803fff 	.word	0x00803fff
    2cb0:	00806000 	.word	0x00806000
    2cb4:	41004000 	.word	0x41004000
    2cb8:	00002a51 	.word	0x00002a51
    2cbc:	0001b6a0 	.word	0x0001b6a0
    2cc0:	ffffa500 	.word	0xffffa500

00002cc4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b088      	sub	sp, #32
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	60b9      	str	r1, [r7, #8]
    2cce:	1dbb      	adds	r3, r7, #6
    2cd0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2cd2:	4b4a      	ldr	r3, [pc, #296]	; (2dfc <nvm_write_buffer+0x138>)
    2cd4:	881b      	ldrh	r3, [r3, #0]
    2cd6:	001a      	movs	r2, r3
    2cd8:	4b48      	ldr	r3, [pc, #288]	; (2dfc <nvm_write_buffer+0x138>)
    2cda:	885b      	ldrh	r3, [r3, #2]
    2cdc:	435a      	muls	r2, r3
	if (destination_address >
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d201      	bcs.n	2ce8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2ce4:	2318      	movs	r3, #24
    2ce6:	e084      	b.n	2df2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2ce8:	4b44      	ldr	r3, [pc, #272]	; (2dfc <nvm_write_buffer+0x138>)
    2cea:	881b      	ldrh	r3, [r3, #0]
    2cec:	3b01      	subs	r3, #1
    2cee:	001a      	movs	r2, r3
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	4013      	ands	r3, r2
    2cf4:	d001      	beq.n	2cfa <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2cf6:	2318      	movs	r3, #24
    2cf8:	e07b      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2cfa:	4b40      	ldr	r3, [pc, #256]	; (2dfc <nvm_write_buffer+0x138>)
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	1dba      	adds	r2, r7, #6
    2d00:	8812      	ldrh	r2, [r2, #0]
    2d02:	429a      	cmp	r2, r3
    2d04:	d901      	bls.n	2d0a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2d06:	2317      	movs	r3, #23
    2d08:	e073      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2d0a:	4b3d      	ldr	r3, [pc, #244]	; (2e00 <nvm_write_buffer+0x13c>)
    2d0c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2d0e:	4b3d      	ldr	r3, [pc, #244]	; (2e04 <nvm_write_buffer+0x140>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	001a      	movs	r2, r3
    2d16:	2301      	movs	r3, #1
    2d18:	4053      	eors	r3, r2
    2d1a:	b2db      	uxtb	r3, r3
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d001      	beq.n	2d24 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    2d20:	2305      	movs	r3, #5
    2d22:	e066      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    2d24:	697b      	ldr	r3, [r7, #20]
    2d26:	4a38      	ldr	r2, [pc, #224]	; (2e08 <nvm_write_buffer+0x144>)
    2d28:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	4b35      	ldr	r3, [pc, #212]	; (2e04 <nvm_write_buffer+0x140>)
    2d2e:	4798      	blx	r3
    2d30:	0003      	movs	r3, r0
    2d32:	001a      	movs	r2, r3
    2d34:	2301      	movs	r3, #1
    2d36:	4053      	eors	r3, r2
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d1f6      	bne.n	2d2c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2d3e:	697b      	ldr	r3, [r7, #20]
    2d40:	2220      	movs	r2, #32
    2d42:	32ff      	adds	r2, #255	; 0xff
    2d44:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	085b      	lsrs	r3, r3, #1
    2d4a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2d4c:	231a      	movs	r3, #26
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2200      	movs	r2, #0
    2d52:	801a      	strh	r2, [r3, #0]
    2d54:	e032      	b.n	2dbc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    2d56:	231a      	movs	r3, #26
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	68ba      	ldr	r2, [r7, #8]
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	2318      	movs	r3, #24
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2d68:	231a      	movs	r3, #26
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881a      	ldrh	r2, [r3, #0]
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	3b01      	subs	r3, #1
    2d74:	429a      	cmp	r2, r3
    2d76:	da11      	bge.n	2d9c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    2d78:	231a      	movs	r3, #26
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	3301      	adds	r3, #1
    2d80:	68ba      	ldr	r2, [r7, #8]
    2d82:	18d3      	adds	r3, r2, r3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	021b      	lsls	r3, r3, #8
    2d88:	b21a      	sxth	r2, r3
    2d8a:	2318      	movs	r3, #24
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	2100      	movs	r1, #0
    2d90:	5e5b      	ldrsh	r3, [r3, r1]
    2d92:	4313      	orrs	r3, r2
    2d94:	b21a      	sxth	r2, r3
    2d96:	2318      	movs	r3, #24
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	1c5a      	adds	r2, r3, #1
    2da0:	61fa      	str	r2, [r7, #28]
    2da2:	005b      	lsls	r3, r3, #1
    2da4:	001a      	movs	r2, r3
    2da6:	2318      	movs	r3, #24
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2dae:	231a      	movs	r3, #26
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	221a      	movs	r2, #26
    2db4:	18ba      	adds	r2, r7, r2
    2db6:	8812      	ldrh	r2, [r2, #0]
    2db8:	3202      	adds	r2, #2
    2dba:	801a      	strh	r2, [r3, #0]
    2dbc:	231a      	movs	r3, #26
    2dbe:	18fa      	adds	r2, r7, r3
    2dc0:	1dbb      	adds	r3, r7, #6
    2dc2:	8812      	ldrh	r2, [r2, #0]
    2dc4:	881b      	ldrh	r3, [r3, #0]
    2dc6:	429a      	cmp	r2, r3
    2dc8:	d3c5      	bcc.n	2d56 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2dca:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <nvm_write_buffer+0x138>)
    2dcc:	791b      	ldrb	r3, [r3, #4]
    2dce:	2201      	movs	r2, #1
    2dd0:	4053      	eors	r3, r2
    2dd2:	b2db      	uxtb	r3, r3
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d00b      	beq.n	2df0 <nvm_write_buffer+0x12c>
    2dd8:	1dbb      	adds	r3, r7, #6
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	2b3f      	cmp	r3, #63	; 0x3f
    2dde:	d807      	bhi.n	2df0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	2200      	movs	r2, #0
    2de4:	0019      	movs	r1, r3
    2de6:	2004      	movs	r0, #4
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <nvm_write_buffer+0x148>)
    2dea:	4798      	blx	r3
    2dec:	0003      	movs	r3, r0
    2dee:	e000      	b.n	2df2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    2df0:	2300      	movs	r3, #0
}
    2df2:	0018      	movs	r0, r3
    2df4:	46bd      	mov	sp, r7
    2df6:	b008      	add	sp, #32
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	200001f4 	.word	0x200001f4
    2e00:	41004000 	.word	0x41004000
    2e04:	00002a51 	.word	0x00002a51
    2e08:	ffffa544 	.word	0xffffa544
    2e0c:	00002bad 	.word	0x00002bad

00002e10 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b088      	sub	sp, #32
    2e14:	af00      	add	r7, sp, #0
    2e16:	60f8      	str	r0, [r7, #12]
    2e18:	60b9      	str	r1, [r7, #8]
    2e1a:	1dbb      	adds	r3, r7, #6
    2e1c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2e1e:	4b38      	ldr	r3, [pc, #224]	; (2f00 <nvm_read_buffer+0xf0>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	001a      	movs	r2, r3
    2e24:	4b36      	ldr	r3, [pc, #216]	; (2f00 <nvm_read_buffer+0xf0>)
    2e26:	885b      	ldrh	r3, [r3, #2]
    2e28:	435a      	muls	r2, r3
	if (source_address >
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	429a      	cmp	r2, r3
    2e2e:	d201      	bcs.n	2e34 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2e30:	2318      	movs	r3, #24
    2e32:	e060      	b.n	2ef6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    2e34:	4b32      	ldr	r3, [pc, #200]	; (2f00 <nvm_read_buffer+0xf0>)
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	3b01      	subs	r3, #1
    2e3a:	001a      	movs	r2, r3
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	4013      	ands	r3, r2
    2e40:	d001      	beq.n	2e46 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2e42:	2318      	movs	r3, #24
    2e44:	e057      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2e46:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <nvm_read_buffer+0xf0>)
    2e48:	881b      	ldrh	r3, [r3, #0]
    2e4a:	1dba      	adds	r2, r7, #6
    2e4c:	8812      	ldrh	r2, [r2, #0]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d901      	bls.n	2e56 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2e52:	2317      	movs	r3, #23
    2e54:	e04f      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2e56:	4b2b      	ldr	r3, [pc, #172]	; (2f04 <nvm_read_buffer+0xf4>)
    2e58:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2e5a:	4b2b      	ldr	r3, [pc, #172]	; (2f08 <nvm_read_buffer+0xf8>)
    2e5c:	4798      	blx	r3
    2e5e:	0003      	movs	r3, r0
    2e60:	001a      	movs	r2, r3
    2e62:	2301      	movs	r3, #1
    2e64:	4053      	eors	r3, r2
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d001      	beq.n	2e70 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    2e6c:	2305      	movs	r3, #5
    2e6e:	e042      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	2220      	movs	r2, #32
    2e74:	32ff      	adds	r2, #255	; 0xff
    2e76:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	085b      	lsrs	r3, r3, #1
    2e7c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2e7e:	231a      	movs	r3, #26
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	2200      	movs	r2, #0
    2e84:	801a      	strh	r2, [r3, #0]
    2e86:	e02e      	b.n	2ee6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    2e88:	69fb      	ldr	r3, [r7, #28]
    2e8a:	1c5a      	adds	r2, r3, #1
    2e8c:	61fa      	str	r2, [r7, #28]
    2e8e:	005b      	lsls	r3, r3, #1
    2e90:	001a      	movs	r2, r3
    2e92:	2312      	movs	r3, #18
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	8812      	ldrh	r2, [r2, #0]
    2e98:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    2e9a:	231a      	movs	r3, #26
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	18d3      	adds	r3, r2, r3
    2ea4:	2212      	movs	r2, #18
    2ea6:	18ba      	adds	r2, r7, r2
    2ea8:	8812      	ldrh	r2, [r2, #0]
    2eaa:	b2d2      	uxtb	r2, r2
    2eac:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2eae:	231a      	movs	r3, #26
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	881a      	ldrh	r2, [r3, #0]
    2eb4:	1dbb      	adds	r3, r7, #6
    2eb6:	881b      	ldrh	r3, [r3, #0]
    2eb8:	3b01      	subs	r3, #1
    2eba:	429a      	cmp	r2, r3
    2ebc:	da0c      	bge.n	2ed8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    2ebe:	231a      	movs	r3, #26
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	881b      	ldrh	r3, [r3, #0]
    2ec4:	3301      	adds	r3, #1
    2ec6:	68ba      	ldr	r2, [r7, #8]
    2ec8:	18d3      	adds	r3, r2, r3
    2eca:	2212      	movs	r2, #18
    2ecc:	18ba      	adds	r2, r7, r2
    2ece:	8812      	ldrh	r2, [r2, #0]
    2ed0:	0a12      	lsrs	r2, r2, #8
    2ed2:	b292      	uxth	r2, r2
    2ed4:	b2d2      	uxtb	r2, r2
    2ed6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2ed8:	231a      	movs	r3, #26
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	221a      	movs	r2, #26
    2ede:	18ba      	adds	r2, r7, r2
    2ee0:	8812      	ldrh	r2, [r2, #0]
    2ee2:	3202      	adds	r2, #2
    2ee4:	801a      	strh	r2, [r3, #0]
    2ee6:	231a      	movs	r3, #26
    2ee8:	18fa      	adds	r2, r7, r3
    2eea:	1dbb      	adds	r3, r7, #6
    2eec:	8812      	ldrh	r2, [r2, #0]
    2eee:	881b      	ldrh	r3, [r3, #0]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d3c9      	bcc.n	2e88 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    2ef4:	2300      	movs	r3, #0
}
    2ef6:	0018      	movs	r0, r3
    2ef8:	46bd      	mov	sp, r7
    2efa:	b008      	add	sp, #32
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	200001f4 	.word	0x200001f4
    2f04:	41004000 	.word	0x41004000
    2f08:	00002a51 	.word	0x00002a51

00002f0c <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b084      	sub	sp, #16
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2f14:	4b1e      	ldr	r3, [pc, #120]	; (2f90 <nvm_erase_row+0x84>)
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	001a      	movs	r2, r3
    2f1a:	4b1d      	ldr	r3, [pc, #116]	; (2f90 <nvm_erase_row+0x84>)
    2f1c:	885b      	ldrh	r3, [r3, #2]
    2f1e:	435a      	muls	r2, r3
	if (row_address >
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	429a      	cmp	r2, r3
    2f24:	d201      	bcs.n	2f2a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2f26:	2318      	movs	r3, #24
    2f28:	e02d      	b.n	2f86 <nvm_erase_row+0x7a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2f2a:	4b19      	ldr	r3, [pc, #100]	; (2f90 <nvm_erase_row+0x84>)
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	009b      	lsls	r3, r3, #2
    2f30:	3b01      	subs	r3, #1
    2f32:	001a      	movs	r2, r3
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	4013      	ands	r3, r2
    2f38:	d001      	beq.n	2f3e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    2f3a:	2318      	movs	r3, #24
    2f3c:	e023      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2f3e:	4b15      	ldr	r3, [pc, #84]	; (2f94 <nvm_erase_row+0x88>)
    2f40:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2f42:	4b15      	ldr	r3, [pc, #84]	; (2f98 <nvm_erase_row+0x8c>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	001a      	movs	r2, r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	4053      	eors	r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d001      	beq.n	2f58 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    2f54:	2305      	movs	r3, #5
    2f56:	e016      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f58:	68fb      	ldr	r3, [r7, #12]
    2f5a:	2220      	movs	r2, #32
    2f5c:	32ff      	adds	r2, #255	; 0xff
    2f5e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	089b      	lsrs	r3, r3, #2
    2f64:	005a      	lsls	r2, r3, #1
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2f6a:	68fb      	ldr	r3, [r7, #12]
    2f6c:	4a0b      	ldr	r2, [pc, #44]	; (2f9c <nvm_erase_row+0x90>)
    2f6e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <nvm_erase_row+0x8c>)
    2f74:	4798      	blx	r3
    2f76:	0003      	movs	r3, r0
    2f78:	001a      	movs	r2, r3
    2f7a:	2301      	movs	r3, #1
    2f7c:	4053      	eors	r3, r2
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1f6      	bne.n	2f72 <nvm_erase_row+0x66>
	}

	return STATUS_OK;
    2f84:	2300      	movs	r3, #0
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b004      	add	sp, #16
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200001f4 	.word	0x200001f4
    2f94:	41004000 	.word	0x41004000
    2f98:	00002a51 	.word	0x00002a51
    2f9c:	ffffa502 	.word	0xffffa502

00002fa0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b086      	sub	sp, #24
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2fa8:	4b2a      	ldr	r3, [pc, #168]	; (3054 <nvm_get_parameters+0xb4>)
    2faa:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2220      	movs	r2, #32
    2fb0:	32ff      	adds	r2, #255	; 0xff
    2fb2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	0c1b      	lsrs	r3, r3, #16
    2fbe:	2207      	movs	r2, #7
    2fc0:	4013      	ands	r3, r2
    2fc2:	2208      	movs	r2, #8
    2fc4:	409a      	lsls	r2, r3
    2fc6:	0013      	movs	r3, r2
	parameters->page_size =
    2fc8:	b2da      	uxtb	r2, r3
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    2fce:	693b      	ldr	r3, [r7, #16]
    2fd0:	b29a      	uxth	r2, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    2fd6:	4b20      	ldr	r3, [pc, #128]	; (3058 <nvm_get_parameters+0xb8>)
    2fd8:	881b      	ldrh	r3, [r3, #0]
    2fda:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    2fdc:	091b      	lsrs	r3, r3, #4
    2fde:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    2fe0:	230e      	movs	r3, #14
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2107      	movs	r1, #7
    2fe6:	400a      	ands	r2, r1
    2fe8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    2fea:	230e      	movs	r3, #14
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	881b      	ldrh	r3, [r3, #0]
    2ff0:	2b07      	cmp	r3, #7
    2ff2:	d103      	bne.n	2ffc <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2200      	movs	r2, #0
    2ff8:	605a      	str	r2, [r3, #4]
    2ffa:	e00a      	b.n	3012 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    2ffc:	230e      	movs	r3, #14
    2ffe:	18fb      	adds	r3, r7, r3
    3000:	881b      	ldrh	r3, [r3, #0]
    3002:	2206      	movs	r2, #6
    3004:	1ad3      	subs	r3, r2, r3
    3006:	2204      	movs	r2, #4
    3008:	409a      	lsls	r2, r3
    300a:	0013      	movs	r3, r2
    300c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    3012:	4b11      	ldr	r3, [pc, #68]	; (3058 <nvm_get_parameters+0xb8>)
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    3018:	230c      	movs	r3, #12
    301a:	18fb      	adds	r3, r7, r3
    301c:	2107      	movs	r1, #7
    301e:	400a      	ands	r2, r1
    3020:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    3022:	230c      	movs	r3, #12
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	2b07      	cmp	r3, #7
    302a:	d103      	bne.n	3034 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2200      	movs	r2, #0
    3030:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    3032:	e00a      	b.n	304a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    3034:	230c      	movs	r3, #12
    3036:	18fb      	adds	r3, r7, r3
    3038:	881b      	ldrh	r3, [r3, #0]
    303a:	2207      	movs	r2, #7
    303c:	1ad3      	subs	r3, r2, r3
    303e:	2204      	movs	r2, #4
    3040:	409a      	lsls	r2, r3
    3042:	0013      	movs	r3, r2
    3044:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	609a      	str	r2, [r3, #8]
}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	46bd      	mov	sp, r7
    304e:	b006      	add	sp, #24
    3050:	bd80      	pop	{r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	41004000 	.word	0x41004000
    3058:	00804000 	.word	0x00804000

0000305c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    305c:	b580      	push	{r7, lr}
    305e:	af00      	add	r7, sp, #0
    3060:	2000      	movs	r0, #0
    3062:	4b02      	ldr	r3, [pc, #8]	; (306c <TCC0_Handler+0x10>)
    3064:	4798      	blx	r3
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}
    306c:	00003099 	.word	0x00003099

00003070 <TCC1_Handler>:
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
    3074:	2001      	movs	r0, #1
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <TCC1_Handler+0x10>)
    3078:	4798      	blx	r3
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	46bd      	mov	sp, r7
    307e:	bd80      	pop	{r7, pc}
    3080:	00003099 	.word	0x00003099

00003084 <TCC2_Handler>:
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
    3088:	2002      	movs	r0, #2
    308a:	4b02      	ldr	r3, [pc, #8]	; (3094 <TCC2_Handler+0x10>)
    308c:	4798      	blx	r3
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	00003099 	.word	0x00003099

00003098 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	0002      	movs	r2, r0
    30a0:	1dfb      	adds	r3, r7, #7
    30a2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    30a8:	4b18      	ldr	r3, [pc, #96]	; (310c <_tcc_interrupt_handler+0x74>)
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	58d3      	ldr	r3, [r2, r3]
    30ae:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    30b6:	693b      	ldr	r3, [r7, #16]
    30b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30ba:	401a      	ands	r2, r3
			module->enable_callback_mask);
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30c0:	4013      	ands	r3, r2
    30c2:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30c4:	2300      	movs	r3, #0
    30c6:	617b      	str	r3, [r7, #20]
    30c8:	e019      	b.n	30fe <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    30ca:	4b11      	ldr	r3, [pc, #68]	; (3110 <_tcc_interrupt_handler+0x78>)
    30cc:	697a      	ldr	r2, [r7, #20]
    30ce:	0092      	lsls	r2, r2, #2
    30d0:	58d3      	ldr	r3, [r2, r3]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	4013      	ands	r3, r2
    30d6:	d00f      	beq.n	30f8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    30d8:	693a      	ldr	r2, [r7, #16]
    30da:	697b      	ldr	r3, [r7, #20]
    30dc:	009b      	lsls	r3, r3, #2
    30de:	18d3      	adds	r3, r2, r3
    30e0:	3304      	adds	r3, #4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	693a      	ldr	r2, [r7, #16]
    30e6:	0010      	movs	r0, r2
    30e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    30ea:	693b      	ldr	r3, [r7, #16]
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	4a08      	ldr	r2, [pc, #32]	; (3110 <_tcc_interrupt_handler+0x78>)
    30f0:	6979      	ldr	r1, [r7, #20]
    30f2:	0089      	lsls	r1, r1, #2
    30f4:	588a      	ldr	r2, [r1, r2]
    30f6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	3301      	adds	r3, #1
    30fc:	617b      	str	r3, [r7, #20]
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2b0b      	cmp	r3, #11
    3102:	dde2      	ble.n	30ca <_tcc_interrupt_handler+0x32>
		}
	}
}
    3104:	46c0      	nop			; (mov r8, r8)
    3106:	46bd      	mov	sp, r7
    3108:	b006      	add	sp, #24
    310a:	bd80      	pop	{r7, pc}
    310c:	200004f0 	.word	0x200004f0
    3110:	0001b7b8 	.word	0x0001b7b8

00003114 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3114:	b580      	push	{r7, lr}
    3116:	af00      	add	r7, sp, #0
    3118:	2000      	movs	r0, #0
    311a:	4b02      	ldr	r3, [pc, #8]	; (3124 <TC3_Handler+0x10>)
    311c:	4798      	blx	r3
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	00003151 	.word	0x00003151

00003128 <TC4_Handler>:
    3128:	b580      	push	{r7, lr}
    312a:	af00      	add	r7, sp, #0
    312c:	2001      	movs	r0, #1
    312e:	4b02      	ldr	r3, [pc, #8]	; (3138 <TC4_Handler+0x10>)
    3130:	4798      	blx	r3
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}
    3138:	00003151 	.word	0x00003151

0000313c <TC5_Handler>:
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
    3140:	2002      	movs	r0, #2
    3142:	4b02      	ldr	r3, [pc, #8]	; (314c <TC5_Handler+0x10>)
    3144:	4798      	blx	r3
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	46bd      	mov	sp, r7
    314a:	bd80      	pop	{r7, pc}
    314c:	00003151 	.word	0x00003151

00003150 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	0002      	movs	r2, r0
    3158:	1dfb      	adds	r3, r7, #7
    315a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    315c:	1dfb      	adds	r3, r7, #7
    315e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3160:	4b28      	ldr	r3, [pc, #160]	; (3204 <_tc_interrupt_handler+0xb4>)
    3162:	0092      	lsls	r2, r2, #2
    3164:	58d3      	ldr	r3, [r2, r3]
    3166:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	7b9b      	ldrb	r3, [r3, #14]
    316e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3174:	4013      	ands	r3, r2
    3176:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    317c:	230b      	movs	r3, #11
    317e:	18fb      	adds	r3, r7, r3
    3180:	400a      	ands	r2, r1
    3182:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3184:	230b      	movs	r3, #11
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2201      	movs	r2, #1
    318c:	4013      	ands	r3, r2
    318e:	d008      	beq.n	31a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	68fa      	ldr	r2, [r7, #12]
    3196:	0010      	movs	r0, r2
    3198:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	2201      	movs	r2, #1
    31a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    31a2:	230b      	movs	r3, #11
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2202      	movs	r2, #2
    31aa:	4013      	ands	r3, r2
    31ac:	d008      	beq.n	31c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	68db      	ldr	r3, [r3, #12]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	0010      	movs	r0, r2
    31b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2202      	movs	r2, #2
    31be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    31c0:	230b      	movs	r3, #11
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2210      	movs	r2, #16
    31c8:	4013      	ands	r3, r2
    31ca:	d008      	beq.n	31de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	691b      	ldr	r3, [r3, #16]
    31d0:	68fa      	ldr	r2, [r7, #12]
    31d2:	0010      	movs	r0, r2
    31d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31d6:	68fb      	ldr	r3, [r7, #12]
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	2210      	movs	r2, #16
    31dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    31de:	230b      	movs	r3, #11
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	2220      	movs	r2, #32
    31e6:	4013      	ands	r3, r2
    31e8:	d008      	beq.n	31fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	695b      	ldr	r3, [r3, #20]
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	0010      	movs	r0, r2
    31f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2220      	movs	r2, #32
    31fa:	739a      	strb	r2, [r3, #14]
	}
}
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46bd      	mov	sp, r7
    3200:	b004      	add	sp, #16
    3202:	bd80      	pop	{r7, pc}
    3204:	200004fc 	.word	0x200004fc

00003208 <system_gclk_chan_get_config_defaults>:
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	2200      	movs	r2, #0
    3214:	701a      	strb	r2, [r3, #0]
}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46bd      	mov	sp, r7
    321a:	b002      	add	sp, #8
    321c:	bd80      	pop	{r7, pc}
	...

00003220 <system_apb_clock_set_mask>:
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	0002      	movs	r2, r0
    3228:	6039      	str	r1, [r7, #0]
    322a:	1dfb      	adds	r3, r7, #7
    322c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    322e:	1dfb      	adds	r3, r7, #7
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b01      	cmp	r3, #1
    3234:	d00a      	beq.n	324c <system_apb_clock_set_mask+0x2c>
    3236:	2b02      	cmp	r3, #2
    3238:	d00f      	beq.n	325a <system_apb_clock_set_mask+0x3a>
    323a:	2b00      	cmp	r3, #0
    323c:	d114      	bne.n	3268 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    323e:	4b0e      	ldr	r3, [pc, #56]	; (3278 <system_apb_clock_set_mask+0x58>)
    3240:	4a0d      	ldr	r2, [pc, #52]	; (3278 <system_apb_clock_set_mask+0x58>)
    3242:	6991      	ldr	r1, [r2, #24]
    3244:	683a      	ldr	r2, [r7, #0]
    3246:	430a      	orrs	r2, r1
    3248:	619a      	str	r2, [r3, #24]
			break;
    324a:	e00f      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    324c:	4b0a      	ldr	r3, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    324e:	4a0a      	ldr	r2, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    3250:	69d1      	ldr	r1, [r2, #28]
    3252:	683a      	ldr	r2, [r7, #0]
    3254:	430a      	orrs	r2, r1
    3256:	61da      	str	r2, [r3, #28]
			break;
    3258:	e008      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <system_apb_clock_set_mask+0x58>)
    325c:	4a06      	ldr	r2, [pc, #24]	; (3278 <system_apb_clock_set_mask+0x58>)
    325e:	6a11      	ldr	r1, [r2, #32]
    3260:	683a      	ldr	r2, [r7, #0]
    3262:	430a      	orrs	r2, r1
    3264:	621a      	str	r2, [r3, #32]
			break;
    3266:	e001      	b.n	326c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3268:	2317      	movs	r3, #23
    326a:	e000      	b.n	326e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    326c:	2300      	movs	r3, #0
}
    326e:	0018      	movs	r0, r3
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	40000400 	.word	0x40000400

0000327c <system_pinmux_get_config_defaults>:
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2280      	movs	r2, #128	; 0x80
    3288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2200      	movs	r2, #0
    328e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2201      	movs	r2, #1
    3294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	2200      	movs	r2, #0
    329a:	70da      	strb	r2, [r3, #3]
}
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46bd      	mov	sp, r7
    32a0:	b002      	add	sp, #8
    32a2:	bd80      	pop	{r7, pc}

000032a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <system_is_debugger_present+0x1c>)
    32aa:	789b      	ldrb	r3, [r3, #2]
    32ac:	b2db      	uxtb	r3, r3
    32ae:	001a      	movs	r2, r3
    32b0:	2302      	movs	r3, #2
    32b2:	4013      	ands	r3, r2
    32b4:	1e5a      	subs	r2, r3, #1
    32b6:	4193      	sbcs	r3, r2
    32b8:	b2db      	uxtb	r3, r3
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	bd80      	pop	{r7, pc}
    32c0:	41002000 	.word	0x41002000

000032c4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	69db      	ldr	r3, [r3, #28]
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
    32da:	1e5a      	subs	r2, r3, #1
    32dc:	4193      	sbcs	r3, r2
    32de:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    32e0:	0018      	movs	r0, r3
    32e2:	46bd      	mov	sp, r7
    32e4:	b004      	add	sp, #16
    32e6:	bd80      	pop	{r7, pc}

000032e8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	0018      	movs	r0, r3
    32f6:	4b04      	ldr	r3, [pc, #16]	; (3308 <_i2c_master_wait_for_sync+0x20>)
    32f8:	4798      	blx	r3
    32fa:	1e03      	subs	r3, r0, #0
    32fc:	d1f9      	bne.n	32f2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46bd      	mov	sp, r7
    3302:	b002      	add	sp, #8
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	000032c5 	.word	0x000032c5

0000330c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	b095      	sub	sp, #84	; 0x54
    3310:	af00      	add	r7, sp, #0
    3312:	60f8      	str	r0, [r7, #12]
    3314:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3316:	2300      	movs	r3, #0
    3318:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    331a:	2300      	movs	r3, #0
    331c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    331e:	2300      	movs	r3, #0
    3320:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    3322:	233b      	movs	r3, #59	; 0x3b
    3324:	2208      	movs	r2, #8
    3326:	4694      	mov	ip, r2
    3328:	44bc      	add	ip, r7
    332a:	4463      	add	r3, ip
    332c:	2200      	movs	r2, #0
    332e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    3336:	68fb      	ldr	r3, [r7, #12]
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    333c:	2323      	movs	r3, #35	; 0x23
    333e:	2208      	movs	r2, #8
    3340:	18ba      	adds	r2, r7, r2
    3342:	18d4      	adds	r4, r2, r3
    3344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3346:	0018      	movs	r0, r3
    3348:	4bdb      	ldr	r3, [pc, #876]	; (36b8 <_i2c_master_set_config+0x3ac>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3350:	230c      	movs	r3, #12
    3352:	2208      	movs	r2, #8
    3354:	4694      	mov	ip, r2
    3356:	44bc      	add	ip, r7
    3358:	4463      	add	r3, ip
    335a:	0018      	movs	r0, r3
    335c:	4bd7      	ldr	r3, [pc, #860]	; (36bc <_i2c_master_set_config+0x3b0>)
    335e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3360:	68bb      	ldr	r3, [r7, #8]
    3362:	69db      	ldr	r3, [r3, #28]
    3364:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    3366:	68bb      	ldr	r3, [r7, #8]
    3368:	6a1b      	ldr	r3, [r3, #32]
    336a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    336e:	2b00      	cmp	r3, #0
    3370:	d106      	bne.n	3380 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3374:	2100      	movs	r1, #0
    3376:	0018      	movs	r0, r3
    3378:	4bd1      	ldr	r3, [pc, #836]	; (36c0 <_i2c_master_set_config+0x3b4>)
    337a:	4798      	blx	r3
    337c:	0003      	movs	r3, r0
    337e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3382:	b2da      	uxtb	r2, r3
    3384:	230c      	movs	r3, #12
    3386:	2108      	movs	r1, #8
    3388:	468c      	mov	ip, r1
    338a:	44bc      	add	ip, r7
    338c:	4463      	add	r3, ip
    338e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3390:	230c      	movs	r3, #12
    3392:	2208      	movs	r2, #8
    3394:	4694      	mov	ip, r2
    3396:	44bc      	add	ip, r7
    3398:	4463      	add	r3, ip
    339a:	2202      	movs	r2, #2
    339c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33a0:	0c1b      	lsrs	r3, r3, #16
    33a2:	b2db      	uxtb	r3, r3
    33a4:	220c      	movs	r2, #12
    33a6:	2108      	movs	r1, #8
    33a8:	468c      	mov	ip, r1
    33aa:	44bc      	add	ip, r7
    33ac:	4462      	add	r2, ip
    33ae:	0011      	movs	r1, r2
    33b0:	0018      	movs	r0, r3
    33b2:	4bc4      	ldr	r3, [pc, #784]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    33b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33b8:	2b00      	cmp	r3, #0
    33ba:	d106      	bne.n	33ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    33bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33be:	2101      	movs	r1, #1
    33c0:	0018      	movs	r0, r3
    33c2:	4bbf      	ldr	r3, [pc, #764]	; (36c0 <_i2c_master_set_config+0x3b4>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
    33c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    33ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33cc:	b2da      	uxtb	r2, r3
    33ce:	230c      	movs	r3, #12
    33d0:	2108      	movs	r1, #8
    33d2:	468c      	mov	ip, r1
    33d4:	44bc      	add	ip, r7
    33d6:	4463      	add	r3, ip
    33d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    33da:	230c      	movs	r3, #12
    33dc:	2208      	movs	r2, #8
    33de:	4694      	mov	ip, r2
    33e0:	44bc      	add	ip, r7
    33e2:	4463      	add	r3, ip
    33e4:	2202      	movs	r2, #2
    33e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    33e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33ea:	0c1b      	lsrs	r3, r3, #16
    33ec:	b2db      	uxtb	r3, r3
    33ee:	220c      	movs	r2, #12
    33f0:	2108      	movs	r1, #8
    33f2:	468c      	mov	ip, r1
    33f4:	44bc      	add	ip, r7
    33f6:	4462      	add	r2, ip
    33f8:	0011      	movs	r1, r2
    33fa:	0018      	movs	r0, r3
    33fc:	4bb1      	ldr	r3, [pc, #708]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3400:	68bb      	ldr	r3, [r7, #8]
    3402:	8a9a      	ldrh	r2, [r3, #20]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	8ada      	ldrh	r2, [r3, #22]
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	7e1b      	ldrb	r3, [r3, #24]
    3414:	2b00      	cmp	r3, #0
    3416:	d103      	bne.n	3420 <_i2c_master_set_config+0x114>
    3418:	4bab      	ldr	r3, [pc, #684]	; (36c8 <_i2c_master_set_config+0x3bc>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d002      	beq.n	3426 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	64fb      	str	r3, [r7, #76]	; 0x4c
    3424:	e001      	b.n	342a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3426:	2300      	movs	r3, #0
    3428:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    342a:	68bb      	ldr	r3, [r7, #8]
    342c:	691b      	ldr	r3, [r3, #16]
    342e:	2b00      	cmp	r3, #0
    3430:	d004      	beq.n	343c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	691b      	ldr	r3, [r3, #16]
    3436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3438:	4313      	orrs	r3, r2
    343a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	689b      	ldr	r3, [r3, #8]
    3440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3442:	4313      	orrs	r3, r2
    3444:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	2224      	movs	r2, #36	; 0x24
    344a:	5c9b      	ldrb	r3, [r3, r2]
    344c:	2b00      	cmp	r3, #0
    344e:	d004      	beq.n	345a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3452:	2280      	movs	r2, #128	; 0x80
    3454:	05d2      	lsls	r2, r2, #23
    3456:	4313      	orrs	r3, r2
    3458:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    345e:	2b00      	cmp	r3, #0
    3460:	d004      	beq.n	346c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3468:	4313      	orrs	r3, r2
    346a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    346c:	68bb      	ldr	r3, [r7, #8]
    346e:	222c      	movs	r2, #44	; 0x2c
    3470:	5c9b      	ldrb	r3, [r3, r2]
    3472:	2b00      	cmp	r3, #0
    3474:	d105      	bne.n	3482 <_i2c_master_set_config+0x176>
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	689a      	ldr	r2, [r3, #8]
    347a:	2380      	movs	r3, #128	; 0x80
    347c:	049b      	lsls	r3, r3, #18
    347e:	429a      	cmp	r2, r3
    3480:	d104      	bne.n	348c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	0512      	lsls	r2, r2, #20
    3488:	4313      	orrs	r3, r2
    348a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    348c:	68bb      	ldr	r3, [r7, #8]
    348e:	222d      	movs	r2, #45	; 0x2d
    3490:	5c9b      	ldrb	r3, [r3, r2]
    3492:	2b00      	cmp	r3, #0
    3494:	d004      	beq.n	34a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3498:	2280      	movs	r2, #128	; 0x80
    349a:	0412      	lsls	r2, r2, #16
    349c:	4313      	orrs	r3, r2
    349e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    34a0:	68bb      	ldr	r3, [r7, #8]
    34a2:	222e      	movs	r2, #46	; 0x2e
    34a4:	5c9b      	ldrb	r3, [r3, r2]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d004      	beq.n	34b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    34aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	03d2      	lsls	r2, r2, #15
    34b0:	4313      	orrs	r3, r2
    34b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    34b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ba:	431a      	orrs	r2, r3
    34bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    34c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34c2:	2280      	movs	r2, #128	; 0x80
    34c4:	0052      	lsls	r2, r2, #1
    34c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    34c8:	2323      	movs	r3, #35	; 0x23
    34ca:	2208      	movs	r2, #8
    34cc:	4694      	mov	ip, r2
    34ce:	44bc      	add	ip, r7
    34d0:	4463      	add	r3, ip
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	3314      	adds	r3, #20
    34d6:	b2db      	uxtb	r3, r3
    34d8:	0018      	movs	r0, r3
    34da:	4b7c      	ldr	r3, [pc, #496]	; (36cc <_i2c_master_set_config+0x3c0>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	22fa      	movs	r2, #250	; 0xfa
    34e8:	0092      	lsls	r2, r2, #2
    34ea:	4353      	muls	r3, r2
    34ec:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    34ee:	68bb      	ldr	r3, [r7, #8]
    34f0:	685b      	ldr	r3, [r3, #4]
    34f2:	22fa      	movs	r2, #250	; 0xfa
    34f4:	0092      	lsls	r2, r2, #2
    34f6:	4353      	muls	r3, r2
    34f8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    34fa:	68bb      	ldr	r3, [r7, #8]
    34fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    34fe:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    3500:	4b73      	ldr	r3, [pc, #460]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3502:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3504:	4798      	blx	r3
    3506:	0005      	movs	r5, r0
    3508:	000e      	movs	r6, r1
    350a:	4b71      	ldr	r3, [pc, #452]	; (36d0 <_i2c_master_set_config+0x3c4>)
    350c:	6a38      	ldr	r0, [r7, #32]
    350e:	4798      	blx	r3
    3510:	6038      	str	r0, [r7, #0]
    3512:	6079      	str	r1, [r7, #4]
    3514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3516:	69ba      	ldr	r2, [r7, #24]
    3518:	435a      	muls	r2, r3
    351a:	4b6d      	ldr	r3, [pc, #436]	; (36d0 <_i2c_master_set_config+0x3c4>)
    351c:	0010      	movs	r0, r2
    351e:	4798      	blx	r3
    3520:	4c6c      	ldr	r4, [pc, #432]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3522:	4a6d      	ldr	r2, [pc, #436]	; (36d8 <_i2c_master_set_config+0x3cc>)
    3524:	4b6d      	ldr	r3, [pc, #436]	; (36dc <_i2c_master_set_config+0x3d0>)
    3526:	47a0      	blx	r4
    3528:	0003      	movs	r3, r0
    352a:	000c      	movs	r4, r1
    352c:	0018      	movs	r0, r3
    352e:	0021      	movs	r1, r4
    3530:	4c6b      	ldr	r4, [pc, #428]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3532:	2200      	movs	r2, #0
    3534:	4b6b      	ldr	r3, [pc, #428]	; (36e4 <_i2c_master_set_config+0x3d8>)
    3536:	47a0      	blx	r4
    3538:	0003      	movs	r3, r0
    353a:	000c      	movs	r4, r1
    353c:	001a      	movs	r2, r3
    353e:	0023      	movs	r3, r4
    3540:	4c64      	ldr	r4, [pc, #400]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3542:	6838      	ldr	r0, [r7, #0]
    3544:	6879      	ldr	r1, [r7, #4]
    3546:	47a0      	blx	r4
    3548:	0003      	movs	r3, r0
    354a:	000c      	movs	r4, r1
    354c:	001a      	movs	r2, r3
    354e:	0023      	movs	r3, r4
    3550:	4c65      	ldr	r4, [pc, #404]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3552:	0028      	movs	r0, r5
    3554:	0031      	movs	r1, r6
    3556:	47a0      	blx	r4
    3558:	0003      	movs	r3, r0
    355a:	000c      	movs	r4, r1
    355c:	001d      	movs	r5, r3
    355e:	0026      	movs	r6, r4
    3560:	6a3b      	ldr	r3, [r7, #32]
    3562:	005a      	lsls	r2, r3, #1
    3564:	4b5a      	ldr	r3, [pc, #360]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3566:	0010      	movs	r0, r2
    3568:	4798      	blx	r3
    356a:	0002      	movs	r2, r0
    356c:	000b      	movs	r3, r1
    356e:	4c5c      	ldr	r4, [pc, #368]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3570:	0028      	movs	r0, r5
    3572:	0031      	movs	r1, r6
    3574:	47a0      	blx	r4
    3576:	0003      	movs	r3, r0
    3578:	000c      	movs	r4, r1
    357a:	0018      	movs	r0, r3
    357c:	0021      	movs	r1, r4
    357e:	4c5a      	ldr	r4, [pc, #360]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3580:	2200      	movs	r2, #0
    3582:	4b5a      	ldr	r3, [pc, #360]	; (36ec <_i2c_master_set_config+0x3e0>)
    3584:	47a0      	blx	r4
    3586:	0003      	movs	r3, r0
    3588:	000c      	movs	r4, r1
    358a:	001d      	movs	r5, r3
    358c:	0026      	movs	r6, r4
    358e:	6a3b      	ldr	r3, [r7, #32]
    3590:	005a      	lsls	r2, r3, #1
    3592:	4b4f      	ldr	r3, [pc, #316]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3594:	0010      	movs	r0, r2
    3596:	4798      	blx	r3
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	4c54      	ldr	r4, [pc, #336]	; (36f0 <_i2c_master_set_config+0x3e4>)
    359e:	0028      	movs	r0, r5
    35a0:	0031      	movs	r1, r6
    35a2:	47a0      	blx	r4
    35a4:	0003      	movs	r3, r0
    35a6:	000c      	movs	r4, r1
    35a8:	0019      	movs	r1, r3
    35aa:	0022      	movs	r2, r4
    35ac:	4b51      	ldr	r3, [pc, #324]	; (36f4 <_i2c_master_set_config+0x3e8>)
    35ae:	0008      	movs	r0, r1
    35b0:	0011      	movs	r1, r2
    35b2:	4798      	blx	r3
    35b4:	0003      	movs	r3, r0
    35b6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	689a      	ldr	r2, [r3, #8]
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	049b      	lsls	r3, r3, #18
    35c0:	429a      	cmp	r2, r3
    35c2:	d145      	bne.n	3650 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    35c4:	4b42      	ldr	r3, [pc, #264]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    35c8:	4798      	blx	r3
    35ca:	4c45      	ldr	r4, [pc, #276]	; (36e0 <_i2c_master_set_config+0x3d4>)
    35cc:	0002      	movs	r2, r0
    35ce:	000b      	movs	r3, r1
    35d0:	47a0      	blx	r4
    35d2:	0003      	movs	r3, r0
    35d4:	000c      	movs	r4, r1
    35d6:	001d      	movs	r5, r3
    35d8:	0026      	movs	r6, r4
    35da:	4b3d      	ldr	r3, [pc, #244]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35dc:	69f8      	ldr	r0, [r7, #28]
    35de:	4798      	blx	r3
    35e0:	4c3c      	ldr	r4, [pc, #240]	; (36d4 <_i2c_master_set_config+0x3c8>)
    35e2:	2200      	movs	r2, #0
    35e4:	4b44      	ldr	r3, [pc, #272]	; (36f8 <_i2c_master_set_config+0x3ec>)
    35e6:	47a0      	blx	r4
    35e8:	0003      	movs	r3, r0
    35ea:	000c      	movs	r4, r1
    35ec:	001a      	movs	r2, r3
    35ee:	0023      	movs	r3, r4
    35f0:	4c3f      	ldr	r4, [pc, #252]	; (36f0 <_i2c_master_set_config+0x3e4>)
    35f2:	0028      	movs	r0, r5
    35f4:	0031      	movs	r1, r6
    35f6:	47a0      	blx	r4
    35f8:	0003      	movs	r3, r0
    35fa:	000c      	movs	r4, r1
    35fc:	0018      	movs	r0, r3
    35fe:	0021      	movs	r1, r4
    3600:	4c39      	ldr	r4, [pc, #228]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3602:	2200      	movs	r2, #0
    3604:	4b39      	ldr	r3, [pc, #228]	; (36ec <_i2c_master_set_config+0x3e0>)
    3606:	47a0      	blx	r4
    3608:	0003      	movs	r3, r0
    360a:	000c      	movs	r4, r1
    360c:	0019      	movs	r1, r3
    360e:	0022      	movs	r2, r4
    3610:	4b38      	ldr	r3, [pc, #224]	; (36f4 <_i2c_master_set_config+0x3e8>)
    3612:	0008      	movs	r0, r1
    3614:	0011      	movs	r1, r2
    3616:	4798      	blx	r3
    3618:	0003      	movs	r3, r0
    361a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    361e:	2b00      	cmp	r3, #0
    3620:	d009      	beq.n	3636 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3622:	4b36      	ldr	r3, [pc, #216]	; (36fc <_i2c_master_set_config+0x3f0>)
    3624:	69f9      	ldr	r1, [r7, #28]
    3626:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
    362c:	1e9a      	subs	r2, r3, #2
    362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3630:	1ad3      	subs	r3, r2, r3
    3632:	64bb      	str	r3, [r7, #72]	; 0x48
    3634:	e00c      	b.n	3650 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3636:	69fb      	ldr	r3, [r7, #28]
    3638:	005a      	lsls	r2, r3, #1
    363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363c:	18d3      	adds	r3, r2, r3
    363e:	1e5a      	subs	r2, r3, #1
    3640:	69fb      	ldr	r3, [r7, #28]
    3642:	0059      	lsls	r1, r3, #1
    3644:	4b2d      	ldr	r3, [pc, #180]	; (36fc <_i2c_master_set_config+0x3f0>)
    3646:	0010      	movs	r0, r2
    3648:	4798      	blx	r3
    364a:	0003      	movs	r3, r0
    364c:	3b01      	subs	r3, #1
    364e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3652:	2bff      	cmp	r3, #255	; 0xff
    3654:	dc08      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3658:	2b00      	cmp	r3, #0
    365a:	db05      	blt.n	3668 <_i2c_master_set_config+0x35c>
    365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365e:	2bff      	cmp	r3, #255	; 0xff
    3660:	dc02      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3664:	2b00      	cmp	r3, #0
    3666:	da06      	bge.n	3676 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3668:	233b      	movs	r3, #59	; 0x3b
    366a:	2208      	movs	r2, #8
    366c:	4694      	mov	ip, r2
    366e:	44bc      	add	ip, r7
    3670:	4463      	add	r3, ip
    3672:	2240      	movs	r2, #64	; 0x40
    3674:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3676:	233b      	movs	r3, #59	; 0x3b
    3678:	2208      	movs	r2, #8
    367a:	4694      	mov	ip, r2
    367c:	44bc      	add	ip, r7
    367e:	4463      	add	r3, ip
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b40      	cmp	r3, #64	; 0x40
    3684:	d00e      	beq.n	36a4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3688:	22ff      	movs	r2, #255	; 0xff
    368a:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    368e:	041b      	lsls	r3, r3, #16
    3690:	0019      	movs	r1, r3
    3692:	23ff      	movs	r3, #255	; 0xff
    3694:	041b      	lsls	r3, r3, #16
    3696:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3698:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    369c:	0612      	lsls	r2, r2, #24
    369e:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    36a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36a2:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    36a4:	233b      	movs	r3, #59	; 0x3b
    36a6:	2208      	movs	r2, #8
    36a8:	4694      	mov	ip, r2
    36aa:	44bc      	add	ip, r7
    36ac:	4463      	add	r3, ip
    36ae:	781b      	ldrb	r3, [r3, #0]
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b015      	add	sp, #84	; 0x54
    36b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b8:	00007a01 	.word	0x00007a01
    36bc:	0000327d 	.word	0x0000327d
    36c0:	00007845 	.word	0x00007845
    36c4:	000088d9 	.word	0x000088d9
    36c8:	000032a5 	.word	0x000032a5
    36cc:	00008711 	.word	0x00008711
    36d0:	0001b131 	.word	0x0001b131
    36d4:	0001a519 	.word	0x0001a519
    36d8:	e826d695 	.word	0xe826d695
    36dc:	3e112e0b 	.word	0x3e112e0b
    36e0:	00019691 	.word	0x00019691
    36e4:	40240000 	.word	0x40240000
    36e8:	0001aa19 	.word	0x0001aa19
    36ec:	3ff00000 	.word	0x3ff00000
    36f0:	00019cb1 	.word	0x00019cb1
    36f4:	0001b045 	.word	0x0001b045
    36f8:	40080000 	.word	0x40080000
    36fc:	0001840d 	.word	0x0001840d

00003700 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3700:	b590      	push	{r4, r7, lr}
    3702:	b08b      	sub	sp, #44	; 0x2c
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	0018      	movs	r0, r3
    371e:	4b3b      	ldr	r3, [pc, #236]	; (380c <i2c_master_init+0x10c>)
    3720:	4798      	blx	r3
    3722:	0003      	movs	r3, r0
    3724:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3726:	6a3b      	ldr	r3, [r7, #32]
    3728:	3302      	adds	r3, #2
    372a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	3314      	adds	r3, #20
    3730:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3732:	2201      	movs	r2, #1
    3734:	69fb      	ldr	r3, [r7, #28]
    3736:	409a      	lsls	r2, r3
    3738:	0013      	movs	r3, r2
    373a:	0019      	movs	r1, r3
    373c:	2002      	movs	r0, #2
    373e:	4b34      	ldr	r3, [pc, #208]	; (3810 <i2c_master_init+0x110>)
    3740:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3742:	2314      	movs	r3, #20
    3744:	18fb      	adds	r3, r7, r3
    3746:	0018      	movs	r0, r3
    3748:	4b32      	ldr	r3, [pc, #200]	; (3814 <i2c_master_init+0x114>)
    374a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	7b1a      	ldrb	r2, [r3, #12]
    3750:	2314      	movs	r3, #20
    3752:	18fb      	adds	r3, r7, r3
    3754:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3756:	69bb      	ldr	r3, [r7, #24]
    3758:	b2db      	uxtb	r3, r3
    375a:	2214      	movs	r2, #20
    375c:	18ba      	adds	r2, r7, r2
    375e:	0011      	movs	r1, r2
    3760:	0018      	movs	r0, r3
    3762:	4b2d      	ldr	r3, [pc, #180]	; (3818 <i2c_master_init+0x118>)
    3764:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3766:	69bb      	ldr	r3, [r7, #24]
    3768:	b2db      	uxtb	r3, r3
    376a:	0018      	movs	r0, r3
    376c:	4b2b      	ldr	r3, [pc, #172]	; (381c <i2c_master_init+0x11c>)
    376e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	7b1b      	ldrb	r3, [r3, #12]
    3774:	2100      	movs	r1, #0
    3776:	0018      	movs	r0, r3
    3778:	4b29      	ldr	r3, [pc, #164]	; (3820 <i2c_master_init+0x120>)
    377a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	2202      	movs	r2, #2
    3782:	4013      	ands	r3, r2
    3784:	d001      	beq.n	378a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    3786:	231c      	movs	r3, #28
    3788:	e03b      	b.n	3802 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	2201      	movs	r2, #1
    3790:	4013      	ands	r3, r2
    3792:	d001      	beq.n	3798 <i2c_master_init+0x98>
		return STATUS_BUSY;
    3794:	2305      	movs	r3, #5
    3796:	e034      	b.n	3802 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	2217      	movs	r2, #23
    379e:	18bc      	adds	r4, r7, r2
    37a0:	0018      	movs	r0, r3
    37a2:	4b1a      	ldr	r3, [pc, #104]	; (380c <i2c_master_init+0x10c>)
    37a4:	4798      	blx	r3
    37a6:	0003      	movs	r3, r0
    37a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    37aa:	4a1e      	ldr	r2, [pc, #120]	; (3824 <i2c_master_init+0x124>)
    37ac:	2317      	movs	r3, #23
    37ae:	18fb      	adds	r3, r7, r3
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	0011      	movs	r1, r2
    37b4:	0018      	movs	r0, r3
    37b6:	4b1c      	ldr	r3, [pc, #112]	; (3828 <i2c_master_init+0x128>)
    37b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    37ba:	2317      	movs	r3, #23
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781a      	ldrb	r2, [r3, #0]
    37c0:	4b1a      	ldr	r3, [pc, #104]	; (382c <i2c_master_init+0x12c>)
    37c2:	0092      	lsls	r2, r2, #2
    37c4:	68f9      	ldr	r1, [r7, #12]
    37c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	2200      	movs	r2, #0
    37cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	2200      	movs	r2, #0
    37d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	2200      	movs	r2, #0
    37d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	2200      	movs	r2, #0
    37de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	2225      	movs	r2, #37	; 0x25
    37e4:	2100      	movs	r1, #0
    37e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	2200      	movs	r2, #0
    37ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37f0:	2214      	movs	r2, #20
    37f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	0011      	movs	r1, r2
    37fa:	0018      	movs	r0, r3
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <i2c_master_init+0x130>)
    37fe:	4798      	blx	r3
    3800:	0003      	movs	r3, r0
}
    3802:	0018      	movs	r0, r3
    3804:	46bd      	mov	sp, r7
    3806:	b00b      	add	sp, #44	; 0x2c
    3808:	bd90      	pop	{r4, r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00007a01 	.word	0x00007a01
    3810:	00003221 	.word	0x00003221
    3814:	00003209 	.word	0x00003209
    3818:	000085ed 	.word	0x000085ed
    381c:	00008631 	.word	0x00008631
    3820:	000077b9 	.word	0x000077b9
    3824:	00004021 	.word	0x00004021
    3828:	00007a65 	.word	0x00007a65
    382c:	2000050c 	.word	0x2000050c
    3830:	0000330d 	.word	0x0000330d

00003834 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	7e1b      	ldrb	r3, [r3, #24]
    3846:	b2db      	uxtb	r3, r3
    3848:	001a      	movs	r2, r3
    384a:	2302      	movs	r3, #2
    384c:	4013      	ands	r3, r2
    384e:	d00b      	beq.n	3868 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	2202      	movs	r2, #2
    3854:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	8b5b      	ldrh	r3, [r3, #26]
    385a:	b29b      	uxth	r3, r3
    385c:	001a      	movs	r2, r3
    385e:	2302      	movs	r3, #2
    3860:	4013      	ands	r3, r2
    3862:	d011      	beq.n	3888 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3864:	2341      	movs	r3, #65	; 0x41
    3866:	e010      	b.n	388a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	8b5b      	ldrh	r3, [r3, #26]
    386c:	b29b      	uxth	r3, r3
    386e:	001a      	movs	r2, r3
    3870:	2304      	movs	r3, #4
    3872:	4013      	ands	r3, r2
    3874:	d008      	beq.n	3888 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	685b      	ldr	r3, [r3, #4]
    387a:	22c0      	movs	r2, #192	; 0xc0
    387c:	0292      	lsls	r2, r2, #10
    387e:	431a      	orrs	r2, r3
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3884:	2318      	movs	r3, #24
    3886:	e000      	b.n	388a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3888:	2300      	movs	r3, #0
}
    388a:	0018      	movs	r0, r3
    388c:	46bd      	mov	sp, r7
    388e:	b004      	add	sp, #16
    3890:	bd80      	pop	{r7, pc}

00003892 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3892:	b580      	push	{r7, lr}
    3894:	b084      	sub	sp, #16
    3896:	af00      	add	r7, sp, #0
    3898:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    38a0:	230e      	movs	r3, #14
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	2200      	movs	r2, #0
    38a6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38a8:	e00f      	b.n	38ca <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    38aa:	230e      	movs	r3, #14
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	220e      	movs	r2, #14
    38b0:	18ba      	adds	r2, r7, r2
    38b2:	8812      	ldrh	r2, [r2, #0]
    38b4:	3201      	adds	r2, #1
    38b6:	801a      	strh	r2, [r3, #0]
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	891b      	ldrh	r3, [r3, #8]
    38bc:	220e      	movs	r2, #14
    38be:	18ba      	adds	r2, r7, r2
    38c0:	8812      	ldrh	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    38c6:	2312      	movs	r3, #18
    38c8:	e00e      	b.n	38e8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38ca:	68bb      	ldr	r3, [r7, #8]
    38cc:	7e1b      	ldrb	r3, [r3, #24]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	001a      	movs	r2, r3
    38d2:	2301      	movs	r3, #1
    38d4:	4013      	ands	r3, r2
    38d6:	d106      	bne.n	38e6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    38d8:	68bb      	ldr	r3, [r7, #8]
    38da:	7e1b      	ldrb	r3, [r3, #24]
    38dc:	b2db      	uxtb	r3, r3
    38de:	001a      	movs	r2, r3
    38e0:	2302      	movs	r3, #2
    38e2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38e4:	d0e1      	beq.n	38aa <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    38e6:	2300      	movs	r3, #0
}
    38e8:	0018      	movs	r0, r3
    38ea:	46bd      	mov	sp, r7
    38ec:	b004      	add	sp, #16
    38ee:	bd80      	pop	{r7, pc}

000038f0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    38f0:	b590      	push	{r4, r7, lr}
    38f2:	b085      	sub	sp, #20
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	000a      	movs	r2, r1
    38fa:	1cfb      	adds	r3, r7, #3
    38fc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	681b      	ldr	r3, [r3, #0]
    3902:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	2280      	movs	r2, #128	; 0x80
    390a:	02d2      	lsls	r2, r2, #11
    390c:	431a      	orrs	r2, r3
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3912:	1cfb      	adds	r3, r7, #3
    3914:	781a      	ldrb	r2, [r3, #0]
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    391a:	230b      	movs	r3, #11
    391c:	18fc      	adds	r4, r7, r3
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	0018      	movs	r0, r3
    3922:	4b07      	ldr	r3, [pc, #28]	; (3940 <_i2c_master_send_hs_master_code+0x50>)
    3924:	4798      	blx	r3
    3926:	0003      	movs	r3, r0
    3928:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	2201      	movs	r2, #1
    392e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    3930:	230b      	movs	r3, #11
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
}
    3936:	0018      	movs	r0, r3
    3938:	46bd      	mov	sp, r7
    393a:	b005      	add	sp, #20
    393c:	bd90      	pop	{r4, r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	00003893 	.word	0x00003893

00003944 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3944:	b590      	push	{r4, r7, lr}
    3946:	b087      	sub	sp, #28
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3954:	2314      	movs	r3, #20
    3956:	18fb      	adds	r3, r7, r3
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	8852      	ldrh	r2, [r2, #2]
    395c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    395e:	2312      	movs	r3, #18
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	011b      	lsls	r3, r3, #4
    396c:	0fdb      	lsrs	r3, r3, #31
    396e:	b2db      	uxtb	r3, r3
    3970:	001a      	movs	r2, r3
    3972:	230b      	movs	r3, #11
    3974:	18fb      	adds	r3, r7, r3
    3976:	1e51      	subs	r1, r2, #1
    3978:	418a      	sbcs	r2, r1
    397a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	7a5b      	ldrb	r3, [r3, #9]
    3980:	2b00      	cmp	r3, #0
    3982:	d006      	beq.n	3992 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7a9a      	ldrb	r2, [r3, #10]
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	0011      	movs	r1, r2
    398c:	0018      	movs	r0, r3
    398e:	4b85      	ldr	r3, [pc, #532]	; (3ba4 <_i2c_master_read_packet+0x260>)
    3990:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	4a84      	ldr	r2, [pc, #528]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3998:	401a      	ands	r2, r3
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	7a1b      	ldrb	r3, [r3, #8]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d042      	beq.n	3a2c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	881b      	ldrh	r3, [r3, #0]
    39aa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	7a5b      	ldrb	r3, [r3, #9]
    39b0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    39b2:	4313      	orrs	r3, r2
    39b4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39b6:	2380      	movs	r3, #128	; 0x80
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    39c0:	2317      	movs	r3, #23
    39c2:	18fc      	adds	r4, r7, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	0018      	movs	r0, r3
    39c8:	4b78      	ldr	r3, [pc, #480]	; (3bac <_i2c_master_read_packet+0x268>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	4a74      	ldr	r2, [pc, #464]	; (3ba8 <_i2c_master_read_packet+0x264>)
    39d6:	401a      	ands	r2, r3
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    39dc:	2317      	movs	r3, #23
    39de:	18fb      	adds	r3, r7, r3
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d107      	bne.n	39f6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    39e6:	2317      	movs	r3, #23
    39e8:	18fc      	adds	r4, r7, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0018      	movs	r0, r3
    39ee:	4b70      	ldr	r3, [pc, #448]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    39f0:	4798      	blx	r3
    39f2:	0003      	movs	r3, r0
    39f4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    39f6:	2317      	movs	r3, #23
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d111      	bne.n	3a24 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a00:	683b      	ldr	r3, [r7, #0]
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	b29b      	uxth	r3, r3
    3a08:	2278      	movs	r2, #120	; 0x78
    3a0a:	4313      	orrs	r3, r2
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	7a5b      	ldrb	r3, [r3, #9]
    3a14:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a16:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a18:	2201      	movs	r2, #1
    3a1a:	4313      	orrs	r3, r2
    3a1c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	625a      	str	r2, [r3, #36]	; 0x24
    3a22:	e00f      	b.n	3a44 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    3a24:	2317      	movs	r3, #23
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	e0b6      	b.n	3b9a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	881b      	ldrh	r3, [r3, #0]
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	2201      	movs	r2, #1
    3a34:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	7a5b      	ldrb	r3, [r3, #9]
    3a3a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a3c:	4313      	orrs	r3, r2
    3a3e:	001a      	movs	r2, r3
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a44:	2317      	movs	r3, #23
    3a46:	18fc      	adds	r4, r7, r3
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	0018      	movs	r0, r3
    3a4c:	4b57      	ldr	r3, [pc, #348]	; (3bac <_i2c_master_read_packet+0x268>)
    3a4e:	4798      	blx	r3
    3a50:	0003      	movs	r3, r0
    3a52:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3a54:	230b      	movs	r3, #11
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d00b      	beq.n	3a76 <_i2c_master_read_packet+0x132>
    3a5e:	683b      	ldr	r3, [r7, #0]
    3a60:	885b      	ldrh	r3, [r3, #2]
    3a62:	2b01      	cmp	r3, #1
    3a64:	d107      	bne.n	3a76 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2280      	movs	r2, #128	; 0x80
    3a6c:	02d2      	lsls	r2, r2, #11
    3a6e:	431a      	orrs	r2, r3
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	605a      	str	r2, [r3, #4]
    3a74:	e005      	b.n	3a82 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	685b      	ldr	r3, [r3, #4]
    3a7a:	4a4b      	ldr	r2, [pc, #300]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3a7c:	401a      	ands	r2, r3
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a82:	2317      	movs	r3, #23
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d107      	bne.n	3a9c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3a8c:	2317      	movs	r3, #23
    3a8e:	18fc      	adds	r4, r7, r3
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	0018      	movs	r0, r3
    3a94:	4b46      	ldr	r3, [pc, #280]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    3a96:	4798      	blx	r3
    3a98:	0003      	movs	r3, r0
    3a9a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a9c:	2317      	movs	r3, #23
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d000      	beq.n	3aa8 <_i2c_master_read_packet+0x164>
    3aa6:	e075      	b.n	3b94 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    3aa8:	e04b      	b.n	3b42 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	8b5b      	ldrh	r3, [r3, #26]
    3aae:	b29b      	uxth	r3, r3
    3ab0:	001a      	movs	r2, r3
    3ab2:	2320      	movs	r3, #32
    3ab4:	4013      	ands	r3, r2
    3ab6:	d101      	bne.n	3abc <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    3ab8:	2341      	movs	r3, #65	; 0x41
    3aba:	e06e      	b.n	3b9a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	7adb      	ldrb	r3, [r3, #11]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d01e      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
    3ac4:	230b      	movs	r3, #11
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d004      	beq.n	3ade <_i2c_master_read_packet+0x19a>
    3ad4:	2314      	movs	r3, #20
    3ad6:	18fb      	adds	r3, r7, r3
    3ad8:	881b      	ldrh	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d009      	beq.n	3af2 <_i2c_master_read_packet+0x1ae>
    3ade:	230b      	movs	r3, #11
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	781b      	ldrb	r3, [r3, #0]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d00c      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3ae8:	2314      	movs	r3, #20
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	881b      	ldrh	r3, [r3, #0]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d107      	bne.n	3b02 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	2280      	movs	r2, #128	; 0x80
    3af8:	02d2      	lsls	r2, r2, #11
    3afa:	431a      	orrs	r2, r3
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	605a      	str	r2, [r3, #4]
    3b00:	e01a      	b.n	3b38 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	0018      	movs	r0, r3
    3b06:	4b2b      	ldr	r3, [pc, #172]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b08:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	685a      	ldr	r2, [r3, #4]
    3b0e:	2312      	movs	r3, #18
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	2112      	movs	r1, #18
    3b16:	1879      	adds	r1, r7, r1
    3b18:	1c58      	adds	r0, r3, #1
    3b1a:	8008      	strh	r0, [r1, #0]
    3b1c:	18d3      	adds	r3, r2, r3
    3b1e:	68fa      	ldr	r2, [r7, #12]
    3b20:	2128      	movs	r1, #40	; 0x28
    3b22:	5c52      	ldrb	r2, [r2, r1]
    3b24:	b2d2      	uxtb	r2, r2
    3b26:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    3b28:	2317      	movs	r3, #23
    3b2a:	18fc      	adds	r4, r7, r3
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b1e      	ldr	r3, [pc, #120]	; (3bac <_i2c_master_read_packet+0x268>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3b38:	2317      	movs	r3, #23
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d109      	bne.n	3b56 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    3b42:	2314      	movs	r3, #20
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	881b      	ldrh	r3, [r3, #0]
    3b48:	2214      	movs	r2, #20
    3b4a:	18ba      	adds	r2, r7, r2
    3b4c:	1e59      	subs	r1, r3, #1
    3b4e:	8011      	strh	r1, [r2, #0]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1aa      	bne.n	3aaa <_i2c_master_read_packet+0x166>
    3b54:	e000      	b.n	3b58 <_i2c_master_read_packet+0x214>
				break;
    3b56:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	7a9b      	ldrb	r3, [r3, #10]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d00a      	beq.n	3b76 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	0018      	movs	r0, r3
    3b64:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b66:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	22c0      	movs	r2, #192	; 0xc0
    3b6e:	0292      	lsls	r2, r2, #10
    3b70:	431a      	orrs	r2, r3
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	0018      	movs	r0, r3
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b7c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3b7e:	683b      	ldr	r3, [r7, #0]
    3b80:	685a      	ldr	r2, [r3, #4]
    3b82:	2312      	movs	r3, #18
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	881b      	ldrh	r3, [r3, #0]
    3b88:	18d3      	adds	r3, r2, r3
    3b8a:	68fa      	ldr	r2, [r7, #12]
    3b8c:	2128      	movs	r1, #40	; 0x28
    3b8e:	5c52      	ldrb	r2, [r2, r1]
    3b90:	b2d2      	uxtb	r2, r2
    3b92:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3b94:	2317      	movs	r3, #23
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781b      	ldrb	r3, [r3, #0]
}
    3b9a:	0018      	movs	r0, r3
    3b9c:	46bd      	mov	sp, r7
    3b9e:	b007      	add	sp, #28
    3ba0:	bd90      	pop	{r4, r7, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	000038f1 	.word	0x000038f1
    3ba8:	fffbffff 	.word	0xfffbffff
    3bac:	00003893 	.word	0x00003893
    3bb0:	00003835 	.word	0x00003835
    3bb4:	000032e9 	.word	0x000032e9

00003bb8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	8b9b      	ldrh	r3, [r3, #28]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d001      	beq.n	3bd0 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3bcc:	2305      	movs	r3, #5
    3bce:	e00c      	b.n	3bea <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	2201      	movs	r2, #1
    3bd4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	2201      	movs	r2, #1
    3bda:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3bdc:	683a      	ldr	r2, [r7, #0]
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	0011      	movs	r1, r2
    3be2:	0018      	movs	r0, r3
    3be4:	4b03      	ldr	r3, [pc, #12]	; (3bf4 <i2c_master_read_packet_wait+0x3c>)
    3be6:	4798      	blx	r3
    3be8:	0003      	movs	r3, r0
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b002      	add	sp, #8
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	00003945 	.word	0x00003945

00003bf8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bf8:	b590      	push	{r4, r7, lr}
    3bfa:	b087      	sub	sp, #28
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3c08:	2314      	movs	r3, #20
    3c0a:	18fb      	adds	r3, r7, r3
    3c0c:	683a      	ldr	r2, [r7, #0]
    3c0e:	8852      	ldrh	r2, [r2, #2]
    3c10:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	0018      	movs	r0, r3
    3c16:	4b51      	ldr	r3, [pc, #324]	; (3d5c <_i2c_master_write_packet+0x164>)
    3c18:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3c1a:	683b      	ldr	r3, [r7, #0]
    3c1c:	7a5b      	ldrb	r3, [r3, #9]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d006      	beq.n	3c30 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	7a9a      	ldrb	r2, [r3, #10]
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	0011      	movs	r1, r2
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b4c      	ldr	r3, [pc, #304]	; (3d60 <_i2c_master_write_packet+0x168>)
    3c2e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	4a4b      	ldr	r2, [pc, #300]	; (3d64 <_i2c_master_write_packet+0x16c>)
    3c36:	401a      	ands	r2, r3
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3c3c:	683b      	ldr	r3, [r7, #0]
    3c3e:	7a1b      	ldrb	r3, [r3, #8]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d00d      	beq.n	3c60 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	881b      	ldrh	r3, [r3, #0]
    3c48:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c4a:	683b      	ldr	r3, [r7, #0]
    3c4c:	7a5b      	ldrb	r3, [r3, #9]
    3c4e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c50:	4313      	orrs	r3, r2
    3c52:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c54:	2380      	movs	r3, #128	; 0x80
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c5a:	68fb      	ldr	r3, [r7, #12]
    3c5c:	625a      	str	r2, [r3, #36]	; 0x24
    3c5e:	e009      	b.n	3c74 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c60:	683b      	ldr	r3, [r7, #0]
    3c62:	881b      	ldrh	r3, [r3, #0]
    3c64:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	7a5b      	ldrb	r3, [r3, #9]
    3c6a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c6c:	4313      	orrs	r3, r2
    3c6e:	001a      	movs	r2, r3
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3c74:	2317      	movs	r3, #23
    3c76:	18fc      	adds	r4, r7, r3
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b3a      	ldr	r3, [pc, #232]	; (3d68 <_i2c_master_write_packet+0x170>)
    3c7e:	4798      	blx	r3
    3c80:	0003      	movs	r3, r0
    3c82:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3c84:	2317      	movs	r3, #23
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d107      	bne.n	3c9e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3c8e:	2317      	movs	r3, #23
    3c90:	18fc      	adds	r4, r7, r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	0018      	movs	r0, r3
    3c96:	4b35      	ldr	r3, [pc, #212]	; (3d6c <_i2c_master_write_packet+0x174>)
    3c98:	4798      	blx	r3
    3c9a:	0003      	movs	r3, r0
    3c9c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3c9e:	2317      	movs	r3, #23
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d152      	bne.n	3d4e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3ca8:	2312      	movs	r3, #18
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3cb0:	e033      	b.n	3d1a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	8b5b      	ldrh	r3, [r3, #26]
    3cb6:	b29b      	uxth	r3, r3
    3cb8:	001a      	movs	r2, r3
    3cba:	2320      	movs	r3, #32
    3cbc:	4013      	ands	r3, r2
    3cbe:	d101      	bne.n	3cc4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3cc0:	2341      	movs	r3, #65	; 0x41
    3cc2:	e047      	b.n	3d54 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b24      	ldr	r3, [pc, #144]	; (3d5c <_i2c_master_write_packet+0x164>)
    3cca:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	685a      	ldr	r2, [r3, #4]
    3cd0:	2312      	movs	r3, #18
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	881b      	ldrh	r3, [r3, #0]
    3cd6:	2112      	movs	r1, #18
    3cd8:	1879      	adds	r1, r7, r1
    3cda:	1c58      	adds	r0, r3, #1
    3cdc:	8008      	strh	r0, [r1, #0]
    3cde:	18d3      	adds	r3, r2, r3
    3ce0:	7819      	ldrb	r1, [r3, #0]
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	2228      	movs	r2, #40	; 0x28
    3ce6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3ce8:	2317      	movs	r3, #23
    3cea:	18fc      	adds	r4, r7, r3
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b1d      	ldr	r3, [pc, #116]	; (3d68 <_i2c_master_write_packet+0x170>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3cf8:	2317      	movs	r3, #23
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d115      	bne.n	3d2e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	8b5b      	ldrh	r3, [r3, #26]
    3d06:	b29b      	uxth	r3, r3
    3d08:	001a      	movs	r2, r3
    3d0a:	2304      	movs	r3, #4
    3d0c:	4013      	ands	r3, r2
    3d0e:	d004      	beq.n	3d1a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3d10:	2317      	movs	r3, #23
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	221e      	movs	r2, #30
    3d16:	701a      	strb	r2, [r3, #0]
				break;
    3d18:	e00a      	b.n	3d30 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3d1a:	2314      	movs	r3, #20
    3d1c:	18fb      	adds	r3, r7, r3
    3d1e:	881b      	ldrh	r3, [r3, #0]
    3d20:	2214      	movs	r2, #20
    3d22:	18ba      	adds	r2, r7, r2
    3d24:	1e59      	subs	r1, r3, #1
    3d26:	8011      	strh	r1, [r2, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d1c2      	bne.n	3cb2 <_i2c_master_write_packet+0xba>
    3d2c:	e000      	b.n	3d30 <_i2c_master_write_packet+0x138>
				break;
    3d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	7a9b      	ldrb	r3, [r3, #10]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d00a      	beq.n	3d4e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <_i2c_master_write_packet+0x164>)
    3d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	685b      	ldr	r3, [r3, #4]
    3d44:	22c0      	movs	r2, #192	; 0xc0
    3d46:	0292      	lsls	r2, r2, #10
    3d48:	431a      	orrs	r2, r3
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3d4e:	2317      	movs	r3, #23
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	781b      	ldrb	r3, [r3, #0]
}
    3d54:	0018      	movs	r0, r3
    3d56:	46bd      	mov	sp, r7
    3d58:	b007      	add	sp, #28
    3d5a:	bd90      	pop	{r4, r7, pc}
    3d5c:	000032e9 	.word	0x000032e9
    3d60:	000038f1 	.word	0x000038f1
    3d64:	fffbffff 	.word	0xfffbffff
    3d68:	00003893 	.word	0x00003893
    3d6c:	00003835 	.word	0x00003835

00003d70 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    3d78:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	8b9b      	ldrh	r3, [r3, #28]
    3d7e:	b29b      	uxth	r3, r3
    3d80:	2b00      	cmp	r3, #0
    3d82:	d001      	beq.n	3d88 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3d84:	2305      	movs	r3, #5
    3d86:	e00c      	b.n	3da2 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2201      	movs	r2, #1
    3d8c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2201      	movs	r2, #1
    3d92:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0011      	movs	r1, r2
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b03      	ldr	r3, [pc, #12]	; (3dac <i2c_master_write_packet_wait+0x3c>)
    3d9e:	4798      	blx	r3
    3da0:	0003      	movs	r3, r0
}
    3da2:	0018      	movs	r0, r3
    3da4:	46bd      	mov	sp, r7
    3da6:	b002      	add	sp, #8
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003bf9 	.word	0x00003bf9

00003db0 <i2c_master_is_syncing>:
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	69db      	ldr	r3, [r3, #28]
    3dc2:	2207      	movs	r2, #7
    3dc4:	4013      	ands	r3, r2
    3dc6:	1e5a      	subs	r2, r3, #1
    3dc8:	4193      	sbcs	r3, r2
    3dca:	b2db      	uxtb	r3, r3
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b004      	add	sp, #16
    3dd2:	bd80      	pop	{r7, pc}

00003dd4 <_i2c_master_wait_for_sync>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3ddc:	46c0      	nop			; (mov r8, r8)
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	0018      	movs	r0, r3
    3de2:	4b04      	ldr	r3, [pc, #16]	; (3df4 <_i2c_master_wait_for_sync+0x20>)
    3de4:	4798      	blx	r3
    3de6:	1e03      	subs	r3, r0, #0
    3de8:	d1f9      	bne.n	3dde <_i2c_master_wait_for_sync+0xa>
}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46bd      	mov	sp, r7
    3dee:	b002      	add	sp, #8
    3df0:	bd80      	pop	{r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00003db1 	.word	0x00003db1

00003df8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b084      	sub	sp, #16
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	011b      	lsls	r3, r3, #4
    3e0c:	0fdb      	lsrs	r3, r3, #31
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	001a      	movs	r2, r3
    3e12:	230b      	movs	r3, #11
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	1e51      	subs	r1, r2, #1
    3e18:	418a      	sbcs	r2, r1
    3e1a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	8b52      	ldrh	r2, [r2, #26]
    3e24:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	8b9b      	ldrh	r3, [r3, #28]
    3e2a:	b29a      	uxth	r2, r3
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2108      	movs	r1, #8
    3e32:	1879      	adds	r1, r7, r1
    3e34:	8809      	ldrh	r1, [r1, #0]
    3e36:	1a8a      	subs	r2, r1, r2
    3e38:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	8b9b      	ldrh	r3, [r3, #28]
    3e3e:	b29b      	uxth	r3, r3
    3e40:	3b01      	subs	r3, #1
    3e42:	b29a      	uxth	r2, r3
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3e48:	230b      	movs	r3, #11
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d010      	beq.n	3e74 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	7adb      	ldrb	r3, [r3, #11]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d01c      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	8b9b      	ldrh	r3, [r3, #28]
    3e5e:	b29b      	uxth	r3, r3
    3e60:	2b01      	cmp	r3, #1
    3e62:	d117      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	685b      	ldr	r3, [r3, #4]
    3e68:	2280      	movs	r2, #128	; 0x80
    3e6a:	02d2      	lsls	r2, r2, #11
    3e6c:	431a      	orrs	r2, r3
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	605a      	str	r2, [r3, #4]
    3e72:	e00f      	b.n	3e94 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	7adb      	ldrb	r3, [r3, #11]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d00b      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	8b9b      	ldrh	r3, [r3, #28]
    3e80:	b29b      	uxth	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d106      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	685b      	ldr	r3, [r3, #4]
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	02d2      	lsls	r2, r2, #11
    3e8e:	431a      	orrs	r2, r3
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	8b9b      	ldrh	r3, [r3, #28]
    3e98:	b29b      	uxth	r3, r3
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d10e      	bne.n	3ebc <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	7a9b      	ldrb	r3, [r3, #10]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d00a      	beq.n	3ebc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <_i2c_master_read+0xec>)
    3eac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	22c0      	movs	r2, #192	; 0xc0
    3eb4:	0292      	lsls	r2, r2, #10
    3eb6:	431a      	orrs	r2, r3
    3eb8:	68fb      	ldr	r3, [r7, #12]
    3eba:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <_i2c_master_read+0xec>)
    3ec2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	6a1a      	ldr	r2, [r3, #32]
    3ec8:	2308      	movs	r3, #8
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	881b      	ldrh	r3, [r3, #0]
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	68fa      	ldr	r2, [r7, #12]
    3ed2:	2128      	movs	r1, #40	; 0x28
    3ed4:	5c52      	ldrb	r2, [r2, r1]
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	701a      	strb	r2, [r3, #0]
}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	00003dd5 	.word	0x00003dd5

00003ee8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	8b5b      	ldrh	r3, [r3, #26]
    3efa:	b29b      	uxth	r3, r3
    3efc:	001a      	movs	r2, r3
    3efe:	2304      	movs	r3, #4
    3f00:	4013      	ands	r3, r2
    3f02:	d004      	beq.n	3f0e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2225      	movs	r2, #37	; 0x25
    3f08:	211e      	movs	r1, #30
    3f0a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3f0c:	e024      	b.n	3f58 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3f0e:	230a      	movs	r3, #10
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	687a      	ldr	r2, [r7, #4]
    3f14:	8b52      	ldrh	r2, [r2, #26]
    3f16:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	8b9b      	ldrh	r3, [r3, #28]
    3f1c:	b29a      	uxth	r2, r3
    3f1e:	230a      	movs	r3, #10
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	210a      	movs	r1, #10
    3f24:	1879      	adds	r1, r7, r1
    3f26:	8809      	ldrh	r1, [r1, #0]
    3f28:	1a8a      	subs	r2, r1, r2
    3f2a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	8b9b      	ldrh	r3, [r3, #28]
    3f30:	b29b      	uxth	r3, r3
    3f32:	3b01      	subs	r3, #1
    3f34:	b29a      	uxth	r2, r3
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <_i2c_master_write+0x78>)
    3f40:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	6a1a      	ldr	r2, [r3, #32]
    3f46:	230a      	movs	r3, #10
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	18d3      	adds	r3, r2, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b2d9      	uxtb	r1, r3
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	2228      	movs	r2, #40	; 0x28
    3f56:	5499      	strb	r1, [r3, r2]
}
    3f58:	46bd      	mov	sp, r7
    3f5a:	b004      	add	sp, #16
    3f5c:	bd80      	pop	{r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	00003dd5 	.word	0x00003dd5

00003f64 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	7e1b      	ldrb	r3, [r3, #24]
    3f76:	b2db      	uxtb	r3, r3
    3f78:	001a      	movs	r2, r3
    3f7a:	2301      	movs	r3, #1
    3f7c:	4013      	ands	r3, r2
    3f7e:	d02b      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	2201      	movs	r2, #1
    3f84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	8b5b      	ldrh	r3, [r3, #26]
    3f8a:	b29b      	uxth	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2302      	movs	r3, #2
    3f90:	4013      	ands	r3, r2
    3f92:	d004      	beq.n	3f9e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	2225      	movs	r2, #37	; 0x25
    3f98:	2141      	movs	r1, #65	; 0x41
    3f9a:	5499      	strb	r1, [r3, r2]
    3f9c:	e01c      	b.n	3fd8 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	8b5b      	ldrh	r3, [r3, #26]
    3fa2:	b29b      	uxth	r3, r3
    3fa4:	001a      	movs	r2, r3
    3fa6:	2304      	movs	r3, #4
    3fa8:	4013      	ands	r3, r2
    3faa:	d015      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2225      	movs	r2, #37	; 0x25
    3fb0:	2118      	movs	r1, #24
    3fb2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2200      	movs	r2, #0
    3fb8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	7a9b      	ldrb	r3, [r3, #10]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d00a      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b13      	ldr	r3, [pc, #76]	; (4014 <_i2c_master_async_address_response+0xb0>)
    3fc8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	685b      	ldr	r3, [r3, #4]
    3fce:	22c0      	movs	r2, #192	; 0xc0
    3fd0:	0292      	lsls	r2, r2, #10
    3fd2:	431a      	orrs	r2, r3
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	8b9b      	ldrh	r3, [r3, #28]
    3fdc:	b29a      	uxth	r2, r3
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	2225      	movs	r2, #37	; 0x25
    3fe6:	5c9b      	ldrb	r3, [r3, r2]
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b05      	cmp	r3, #5
    3fec:	d10e      	bne.n	400c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2224      	movs	r2, #36	; 0x24
    3ff2:	5c9b      	ldrb	r3, [r3, r2]
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d104      	bne.n	4004 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	0018      	movs	r0, r3
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <_i2c_master_async_address_response+0xb4>)
    4000:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    4002:	e003      	b.n	400c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	0018      	movs	r0, r3
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <_i2c_master_async_address_response+0xb8>)
    400a:	4798      	blx	r3
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b004      	add	sp, #16
    4012:	bd80      	pop	{r7, pc}
    4014:	00003dd5 	.word	0x00003dd5
    4018:	00003ee9 	.word	0x00003ee9
    401c:	00003df9 	.word	0x00003df9

00004020 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	1dfb      	adds	r3, r7, #7
    402a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    4030:	4b93      	ldr	r3, [pc, #588]	; (4280 <_i2c_master_interrupt_handler+0x260>)
    4032:	0092      	lsls	r2, r2, #2
    4034:	58d3      	ldr	r3, [r2, r3]
    4036:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4038:	697b      	ldr	r3, [r7, #20]
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    403e:	693b      	ldr	r3, [r7, #16]
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	011b      	lsls	r3, r3, #4
    4044:	0fdb      	lsrs	r3, r3, #31
    4046:	b2db      	uxtb	r3, r3
    4048:	001a      	movs	r2, r3
    404a:	230f      	movs	r3, #15
    404c:	18fb      	adds	r3, r7, r3
    404e:	1e51      	subs	r1, r2, #1
    4050:	418a      	sbcs	r2, r1
    4052:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4054:	230e      	movs	r3, #14
    4056:	18fb      	adds	r3, r7, r3
    4058:	697a      	ldr	r2, [r7, #20]
    405a:	7e52      	ldrb	r2, [r2, #25]
    405c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	7e1b      	ldrb	r3, [r3, #24]
    4062:	b2da      	uxtb	r2, r3
    4064:	230e      	movs	r3, #14
    4066:	18fb      	adds	r3, r7, r3
    4068:	210e      	movs	r1, #14
    406a:	1879      	adds	r1, r7, r1
    406c:	7809      	ldrb	r1, [r1, #0]
    406e:	400a      	ands	r2, r1
    4070:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4072:	697b      	ldr	r3, [r7, #20]
    4074:	8b5b      	ldrh	r3, [r3, #26]
    4076:	b29b      	uxth	r3, r3
    4078:	2b00      	cmp	r3, #0
    407a:	d109      	bne.n	4090 <_i2c_master_interrupt_handler+0x70>
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	8b9b      	ldrh	r3, [r3, #28]
    4080:	b29b      	uxth	r3, r3
    4082:	2b00      	cmp	r3, #0
    4084:	d004      	beq.n	4090 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    4086:	697b      	ldr	r3, [r7, #20]
    4088:	0018      	movs	r0, r3
    408a:	4b7e      	ldr	r3, [pc, #504]	; (4284 <_i2c_master_interrupt_handler+0x264>)
    408c:	4798      	blx	r3
    408e:	e070      	b.n	4172 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4090:	697b      	ldr	r3, [r7, #20]
    4092:	8b5b      	ldrh	r3, [r3, #26]
    4094:	b29b      	uxth	r3, r3
    4096:	2b00      	cmp	r3, #0
    4098:	d039      	beq.n	410e <_i2c_master_interrupt_handler+0xee>
    409a:	697b      	ldr	r3, [r7, #20]
    409c:	8b9b      	ldrh	r3, [r3, #28]
    409e:	b29b      	uxth	r3, r3
    40a0:	2b00      	cmp	r3, #0
    40a2:	d134      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	2225      	movs	r2, #37	; 0x25
    40a8:	5c9b      	ldrb	r3, [r3, r2]
    40aa:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    40ac:	2b05      	cmp	r3, #5
    40ae:	d12e      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	2224      	movs	r2, #36	; 0x24
    40b4:	5c9b      	ldrb	r3, [r3, r2]
    40b6:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    40b8:	2b00      	cmp	r3, #0
    40ba:	d128      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    40bc:	693b      	ldr	r3, [r7, #16]
    40be:	2203      	movs	r2, #3
    40c0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    40c2:	697b      	ldr	r3, [r7, #20]
    40c4:	2200      	movs	r2, #0
    40c6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    40c8:	697b      	ldr	r3, [r7, #20]
    40ca:	2225      	movs	r2, #37	; 0x25
    40cc:	2100      	movs	r1, #0
    40ce:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    40d0:	697b      	ldr	r3, [r7, #20]
    40d2:	7a9b      	ldrb	r3, [r3, #10]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d00b      	beq.n	40f0 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	0018      	movs	r0, r3
    40dc:	4b6a      	ldr	r3, [pc, #424]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    40de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    40e0:	693b      	ldr	r3, [r7, #16]
    40e2:	685b      	ldr	r3, [r3, #4]
    40e4:	22c0      	movs	r2, #192	; 0xc0
    40e6:	0292      	lsls	r2, r2, #10
    40e8:	431a      	orrs	r2, r3
    40ea:	693b      	ldr	r3, [r7, #16]
    40ec:	605a      	str	r2, [r3, #4]
    40ee:	e002      	b.n	40f6 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    40f0:	693b      	ldr	r3, [r7, #16]
    40f2:	2201      	movs	r2, #1
    40f4:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    40f6:	230e      	movs	r3, #14
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2201      	movs	r2, #1
    40fe:	4013      	ands	r3, r2
    4100:	d037      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4102:	697b      	ldr	r3, [r7, #20]
    4104:	68db      	ldr	r3, [r3, #12]
    4106:	697a      	ldr	r2, [r7, #20]
    4108:	0010      	movs	r0, r2
    410a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    410c:	e031      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    410e:	697b      	ldr	r3, [r7, #20]
    4110:	8b5b      	ldrh	r3, [r3, #26]
    4112:	b29b      	uxth	r3, r3
    4114:	2b00      	cmp	r3, #0
    4116:	d02c      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
    4118:	697b      	ldr	r3, [r7, #20]
    411a:	8b9b      	ldrh	r3, [r3, #28]
    411c:	b29b      	uxth	r3, r3
    411e:	2b00      	cmp	r3, #0
    4120:	d027      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4122:	693b      	ldr	r3, [r7, #16]
    4124:	8b5b      	ldrh	r3, [r3, #26]
    4126:	b29b      	uxth	r3, r3
    4128:	001a      	movs	r2, r3
    412a:	2320      	movs	r3, #32
    412c:	4013      	ands	r3, r2
    412e:	d111      	bne.n	4154 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2201      	movs	r2, #1
    4138:	4053      	eors	r3, r2
    413a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    413c:	2b00      	cmp	r3, #0
    413e:	d104      	bne.n	414a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4140:	697b      	ldr	r3, [r7, #20]
    4142:	8b9b      	ldrh	r3, [r3, #28]
    4144:	b29b      	uxth	r3, r3
    4146:	2b01      	cmp	r3, #1
    4148:	d004      	beq.n	4154 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    414a:	697b      	ldr	r3, [r7, #20]
    414c:	2225      	movs	r2, #37	; 0x25
    414e:	2141      	movs	r1, #65	; 0x41
    4150:	5499      	strb	r1, [r3, r2]
    4152:	e00e      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4154:	697b      	ldr	r3, [r7, #20]
    4156:	2224      	movs	r2, #36	; 0x24
    4158:	5c9b      	ldrb	r3, [r3, r2]
    415a:	b2db      	uxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	d104      	bne.n	416a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	0018      	movs	r0, r3
    4164:	4b49      	ldr	r3, [pc, #292]	; (428c <_i2c_master_interrupt_handler+0x26c>)
    4166:	4798      	blx	r3
    4168:	e003      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	0018      	movs	r0, r3
    416e:	4b48      	ldr	r3, [pc, #288]	; (4290 <_i2c_master_interrupt_handler+0x270>)
    4170:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4172:	697b      	ldr	r3, [r7, #20]
    4174:	8b5b      	ldrh	r3, [r3, #26]
    4176:	b29b      	uxth	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d047      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
    417c:	697b      	ldr	r3, [r7, #20]
    417e:	8b9b      	ldrh	r3, [r3, #28]
    4180:	b29b      	uxth	r3, r3
    4182:	2b00      	cmp	r3, #0
    4184:	d142      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    4186:	697b      	ldr	r3, [r7, #20]
    4188:	2225      	movs	r2, #37	; 0x25
    418a:	5c9b      	ldrb	r3, [r3, r2]
    418c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    418e:	2b05      	cmp	r3, #5
    4190:	d13c      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4192:	697b      	ldr	r3, [r7, #20]
    4194:	2224      	movs	r2, #36	; 0x24
    4196:	5c9b      	ldrb	r3, [r3, r2]
    4198:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    419a:	2b01      	cmp	r3, #1
    419c:	d136      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    419e:	693b      	ldr	r3, [r7, #16]
    41a0:	7e1b      	ldrb	r3, [r3, #24]
    41a2:	b2db      	uxtb	r3, r3
    41a4:	001a      	movs	r2, r3
    41a6:	2302      	movs	r3, #2
    41a8:	4013      	ands	r3, r2
    41aa:	d002      	beq.n	41b2 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    41ac:	693b      	ldr	r3, [r7, #16]
    41ae:	2202      	movs	r2, #2
    41b0:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	2203      	movs	r2, #3
    41b6:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	2200      	movs	r2, #0
    41bc:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    41be:	697b      	ldr	r3, [r7, #20]
    41c0:	2225      	movs	r2, #37	; 0x25
    41c2:	2100      	movs	r1, #0
    41c4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    41c6:	230e      	movs	r3, #14
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2202      	movs	r2, #2
    41ce:	4013      	ands	r3, r2
    41d0:	d00b      	beq.n	41ea <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    41d2:	697b      	ldr	r3, [r7, #20]
    41d4:	2224      	movs	r2, #36	; 0x24
    41d6:	5c9b      	ldrb	r3, [r3, r2]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b01      	cmp	r3, #1
    41dc:	d105      	bne.n	41ea <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    41de:	697b      	ldr	r3, [r7, #20]
    41e0:	691b      	ldr	r3, [r3, #16]
    41e2:	697a      	ldr	r2, [r7, #20]
    41e4:	0010      	movs	r0, r2
    41e6:	4798      	blx	r3
    41e8:	e010      	b.n	420c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    41ea:	230e      	movs	r3, #14
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2201      	movs	r2, #1
    41f2:	4013      	ands	r3, r2
    41f4:	d00a      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    41f6:	697b      	ldr	r3, [r7, #20]
    41f8:	2224      	movs	r2, #36	; 0x24
    41fa:	5c9b      	ldrb	r3, [r3, r2]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	2b00      	cmp	r3, #0
    4200:	d104      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4202:	697b      	ldr	r3, [r7, #20]
    4204:	68db      	ldr	r3, [r3, #12]
    4206:	697a      	ldr	r2, [r7, #20]
    4208:	0010      	movs	r0, r2
    420a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    420c:	697b      	ldr	r3, [r7, #20]
    420e:	2225      	movs	r2, #37	; 0x25
    4210:	5c9b      	ldrb	r3, [r3, r2]
    4212:	b2db      	uxtb	r3, r3
    4214:	2b05      	cmp	r3, #5
    4216:	d02e      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	2225      	movs	r2, #37	; 0x25
    421c:	5c9b      	ldrb	r3, [r3, r2]
    421e:	b2db      	uxtb	r3, r3
    4220:	2b00      	cmp	r3, #0
    4222:	d028      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4224:	693b      	ldr	r3, [r7, #16]
    4226:	2203      	movs	r2, #3
    4228:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    422a:	697b      	ldr	r3, [r7, #20]
    422c:	2200      	movs	r2, #0
    422e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    4230:	697b      	ldr	r3, [r7, #20]
    4232:	2200      	movs	r2, #0
    4234:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	2225      	movs	r2, #37	; 0x25
    423a:	5c9b      	ldrb	r3, [r3, r2]
    423c:	b2db      	uxtb	r3, r3
    423e:	2b41      	cmp	r3, #65	; 0x41
    4240:	d00e      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4242:	697b      	ldr	r3, [r7, #20]
    4244:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4246:	2b00      	cmp	r3, #0
    4248:	d00a      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	0018      	movs	r0, r3
    424e:	4b0e      	ldr	r3, [pc, #56]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    4250:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	685b      	ldr	r3, [r3, #4]
    4256:	22e0      	movs	r2, #224	; 0xe0
    4258:	02d2      	lsls	r2, r2, #11
    425a:	431a      	orrs	r2, r3
    425c:	693b      	ldr	r3, [r7, #16]
    425e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4260:	230e      	movs	r3, #14
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2204      	movs	r2, #4
    4268:	4013      	ands	r3, r2
    426a:	d004      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    426c:	697b      	ldr	r3, [r7, #20]
    426e:	695b      	ldr	r3, [r3, #20]
    4270:	697a      	ldr	r2, [r7, #20]
    4272:	0010      	movs	r0, r2
    4274:	4798      	blx	r3
		}
	}
}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	46bd      	mov	sp, r7
    427a:	b006      	add	sp, #24
    427c:	bd80      	pop	{r7, pc}
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	2000050c 	.word	0x2000050c
    4284:	00003f65 	.word	0x00003f65
    4288:	00003dd5 	.word	0x00003dd5
    428c:	00003ee9 	.word	0x00003ee9
    4290:	00003df9 	.word	0x00003df9

00004294 <system_gclk_chan_get_config_defaults>:
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	2200      	movs	r2, #0
    42a0:	701a      	strb	r2, [r3, #0]
}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	46bd      	mov	sp, r7
    42a6:	b002      	add	sp, #8
    42a8:	bd80      	pop	{r7, pc}
	...

000042ac <system_apb_clock_set_mask>:
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b082      	sub	sp, #8
    42b0:	af00      	add	r7, sp, #0
    42b2:	0002      	movs	r2, r0
    42b4:	6039      	str	r1, [r7, #0]
    42b6:	1dfb      	adds	r3, r7, #7
    42b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42ba:	1dfb      	adds	r3, r7, #7
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	2b01      	cmp	r3, #1
    42c0:	d00a      	beq.n	42d8 <system_apb_clock_set_mask+0x2c>
    42c2:	2b02      	cmp	r3, #2
    42c4:	d00f      	beq.n	42e6 <system_apb_clock_set_mask+0x3a>
    42c6:	2b00      	cmp	r3, #0
    42c8:	d114      	bne.n	42f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    42ca:	4b0e      	ldr	r3, [pc, #56]	; (4304 <system_apb_clock_set_mask+0x58>)
    42cc:	4a0d      	ldr	r2, [pc, #52]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ce:	6991      	ldr	r1, [r2, #24]
    42d0:	683a      	ldr	r2, [r7, #0]
    42d2:	430a      	orrs	r2, r1
    42d4:	619a      	str	r2, [r3, #24]
			break;
    42d6:	e00f      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    42d8:	4b0a      	ldr	r3, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42da:	4a0a      	ldr	r2, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42dc:	69d1      	ldr	r1, [r2, #28]
    42de:	683a      	ldr	r2, [r7, #0]
    42e0:	430a      	orrs	r2, r1
    42e2:	61da      	str	r2, [r3, #28]
			break;
    42e4:	e008      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <system_apb_clock_set_mask+0x58>)
    42e8:	4a06      	ldr	r2, [pc, #24]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ea:	6a11      	ldr	r1, [r2, #32]
    42ec:	683a      	ldr	r2, [r7, #0]
    42ee:	430a      	orrs	r2, r1
    42f0:	621a      	str	r2, [r3, #32]
			break;
    42f2:	e001      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    42f4:	2317      	movs	r3, #23
    42f6:	e000      	b.n	42fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    42f8:	2300      	movs	r3, #0
}
    42fa:	0018      	movs	r0, r3
    42fc:	46bd      	mov	sp, r7
    42fe:	b002      	add	sp, #8
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	40000400 	.word	0x40000400

00004308 <system_pinmux_get_config_defaults>:
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	2200      	movs	r2, #0
    431a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	2201      	movs	r2, #1
    4320:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	2200      	movs	r2, #0
    4326:	70da      	strb	r2, [r3, #3]
}
    4328:	46c0      	nop			; (mov r8, r8)
    432a:	46bd      	mov	sp, r7
    432c:	b002      	add	sp, #8
    432e:	bd80      	pop	{r7, pc}

00004330 <system_is_debugger_present>:
{
    4330:	b580      	push	{r7, lr}
    4332:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <system_is_debugger_present+0x1c>)
    4336:	789b      	ldrb	r3, [r3, #2]
    4338:	b2db      	uxtb	r3, r3
    433a:	001a      	movs	r2, r3
    433c:	2302      	movs	r3, #2
    433e:	4013      	ands	r3, r2
    4340:	1e5a      	subs	r2, r3, #1
    4342:	4193      	sbcs	r3, r2
    4344:	b2db      	uxtb	r3, r3
}
    4346:	0018      	movs	r0, r3
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	41002000 	.word	0x41002000

00004350 <_i2c_slave_set_config>:
 *                                         previously set
 */
static enum status_code _i2c_slave_set_config(
		struct i2c_slave_module *const module,
		const struct i2c_slave_config *const config)
{
    4350:	b580      	push	{r7, lr}
    4352:	b088      	sub	sp, #32
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	613b      	str	r3, [r7, #16]
	Sercom *const sercom_hw = module->hw;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	60fb      	str	r3, [r7, #12]

	module->buffer_timeout = config->buffer_timeout;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	891a      	ldrh	r2, [r3, #8]
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	80da      	strh	r2, [r3, #6]
	module->ten_bit_address = config->ten_bit_address;
    436e:	683b      	ldr	r3, [r7, #0]
    4370:	7c1a      	ldrb	r2, [r3, #16]
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	721a      	strb	r2, [r3, #8]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4376:	2308      	movs	r3, #8
    4378:	18fb      	adds	r3, r7, r3
    437a:	0018      	movs	r0, r3
    437c:	4b49      	ldr	r3, [pc, #292]	; (44a4 <_i2c_slave_set_config+0x154>)
    437e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	69db      	ldr	r3, [r3, #28]
    4384:	61bb      	str	r3, [r7, #24]
	uint32_t pad1 = config->pinmux_pad1;
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	6a1b      	ldr	r3, [r3, #32]
    438a:	617b      	str	r3, [r7, #20]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    438c:	69bb      	ldr	r3, [r7, #24]
    438e:	2b00      	cmp	r3, #0
    4390:	d106      	bne.n	43a0 <_i2c_slave_set_config+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2100      	movs	r1, #0
    4396:	0018      	movs	r0, r3
    4398:	4b43      	ldr	r3, [pc, #268]	; (44a8 <_i2c_slave_set_config+0x158>)
    439a:	4798      	blx	r3
    439c:	0003      	movs	r3, r0
    439e:	61bb      	str	r3, [r7, #24]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    43a0:	69bb      	ldr	r3, [r7, #24]
    43a2:	b2da      	uxtb	r2, r3
    43a4:	2308      	movs	r3, #8
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43aa:	2308      	movs	r3, #8
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2202      	movs	r2, #2
    43b0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    43b2:	69bb      	ldr	r3, [r7, #24]
    43b4:	0c1b      	lsrs	r3, r3, #16
    43b6:	b2db      	uxtb	r3, r3
    43b8:	2208      	movs	r2, #8
    43ba:	18ba      	adds	r2, r7, r2
    43bc:	0011      	movs	r1, r2
    43be:	0018      	movs	r0, r3
    43c0:	4b3a      	ldr	r3, [pc, #232]	; (44ac <_i2c_slave_set_config+0x15c>)
    43c2:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    43c4:	697b      	ldr	r3, [r7, #20]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d106      	bne.n	43d8 <_i2c_slave_set_config+0x88>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2101      	movs	r1, #1
    43ce:	0018      	movs	r0, r3
    43d0:	4b35      	ldr	r3, [pc, #212]	; (44a8 <_i2c_slave_set_config+0x158>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	617b      	str	r3, [r7, #20]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    43d8:	697b      	ldr	r3, [r7, #20]
    43da:	b2da      	uxtb	r2, r3
    43dc:	2308      	movs	r3, #8
    43de:	18fb      	adds	r3, r7, r3
    43e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43e2:	2308      	movs	r3, #8
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2202      	movs	r2, #2
    43e8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    43ea:	697b      	ldr	r3, [r7, #20]
    43ec:	0c1b      	lsrs	r3, r3, #16
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2208      	movs	r2, #8
    43f2:	18ba      	adds	r2, r7, r2
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2c      	ldr	r3, [pc, #176]	; (44ac <_i2c_slave_set_config+0x15c>)
    43fa:	4798      	blx	r3

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
    43fc:	683b      	ldr	r3, [r7, #0]
    43fe:	7e9b      	ldrb	r3, [r3, #26]
    4400:	2b00      	cmp	r3, #0
    4402:	d103      	bne.n	440c <_i2c_slave_set_config+0xbc>
    4404:	4b2a      	ldr	r3, [pc, #168]	; (44b0 <_i2c_slave_set_config+0x160>)
    4406:	4798      	blx	r3
    4408:	1e03      	subs	r3, r0, #0
    440a:	d002      	beq.n	4412 <_i2c_slave_set_config+0xc2>
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
    440c:	2380      	movs	r3, #128	; 0x80
    440e:	61fb      	str	r3, [r7, #28]
    4410:	e001      	b.n	4416 <_i2c_slave_set_config+0xc6>
	} else {
		tmp_ctrla = 0;
    4412:	2300      	movs	r3, #0
    4414:	61fb      	str	r3, [r7, #28]
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	2225      	movs	r2, #37	; 0x25
    441a:	5c9b      	ldrb	r3, [r3, r2]
    441c:	2b00      	cmp	r3, #0
    441e:	d105      	bne.n	442c <_i2c_slave_set_config+0xdc>
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	695a      	ldr	r2, [r3, #20]
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	049b      	lsls	r3, r3, #18
    4428:	429a      	cmp	r2, r3
    442a:	d104      	bne.n	4436 <_i2c_slave_set_config+0xe6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    442c:	69fb      	ldr	r3, [r7, #28]
    442e:	2280      	movs	r2, #128	; 0x80
    4430:	0512      	lsls	r2, r2, #20
    4432:	4313      	orrs	r3, r2
    4434:	61fb      	str	r3, [r7, #28]
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	685a      	ldr	r2, [r3, #4]
			config->transfer_speed |
    443a:	683b      	ldr	r3, [r7, #0]
    443c:	695b      	ldr	r3, [r3, #20]
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    443e:	4313      	orrs	r3, r2
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	2124      	movs	r1, #36	; 0x24
    4444:	5c52      	ldrb	r2, [r2, r1]
    4446:	0792      	lsls	r2, r2, #30
			config->transfer_speed |
    4448:	4313      	orrs	r3, r2
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
    444a:	683a      	ldr	r2, [r7, #0]
    444c:	2126      	movs	r1, #38	; 0x26
    444e:	5c52      	ldrb	r2, [r2, r1]
    4450:	05d2      	lsls	r2, r2, #23
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4452:	4313      	orrs	r3, r2
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4454:	69fa      	ldr	r2, [r7, #28]
    4456:	4313      	orrs	r3, r2
    4458:	61fb      	str	r3, [r7, #28]

	i2c_hw->CTRLA.reg |= tmp_ctrla;
    445a:	693b      	ldr	r3, [r7, #16]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	69fb      	ldr	r3, [r7, #28]
    4460:	431a      	orrs	r2, r3
    4462:	693b      	ldr	r3, [r7, #16]
    4464:	601a      	str	r2, [r3, #0]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	895b      	ldrh	r3, [r3, #10]
    446a:	2280      	movs	r2, #128	; 0x80
    446c:	0052      	lsls	r2, r2, #1
    446e:	4313      	orrs	r3, r2
    4470:	b29b      	uxth	r3, r3
    4472:	001a      	movs	r2, r3
    4474:	693b      	ldr	r3, [r7, #16]
    4476:	605a      	str	r2, [r3, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	899b      	ldrh	r3, [r3, #12]
    447c:	005a      	lsls	r2, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	89db      	ldrh	r3, [r3, #14]
    4482:	045b      	lsls	r3, r3, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4484:	431a      	orrs	r2, r3
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	7c1b      	ldrb	r3, [r3, #16]
    448a:	03db      	lsls	r3, r3, #15
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    448c:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
    448e:	683a      	ldr	r2, [r7, #0]
    4490:	7c52      	ldrb	r2, [r2, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4492:	4313      	orrs	r3, r2
    4494:	001a      	movs	r2, r3
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4496:	693b      	ldr	r3, [r7, #16]
    4498:	625a      	str	r2, [r3, #36]	; 0x24

	return STATUS_OK;
    449a:	2300      	movs	r3, #0
}
    449c:	0018      	movs	r0, r3
    449e:	46bd      	mov	sp, r7
    44a0:	b008      	add	sp, #32
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00004309 	.word	0x00004309
    44a8:	00007845 	.word	0x00007845
    44ac:	000088d9 	.word	0x000088d9
    44b0:	00004331 	.word	0x00004331

000044b4 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
    44b4:	b590      	push	{r4, r7, lr}
    44b6:	b08b      	sub	sp, #44	; 0x2c
    44b8:	af00      	add	r7, sp, #0
    44ba:	60f8      	str	r0, [r7, #12]
    44bc:	60b9      	str	r1, [r7, #8]
    44be:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	68ba      	ldr	r2, [r7, #8]
    44c4:	601a      	str	r2, [r3, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
    44cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	2202      	movs	r2, #2
    44d2:	4013      	ands	r3, r2
    44d4:	d001      	beq.n	44da <i2c_slave_init+0x26>
		return STATUS_ERR_DENIED;
    44d6:	231c      	movs	r3, #28
    44d8:	e069      	b.n	45ae <i2c_slave_init+0xfa>
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
    44da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	2201      	movs	r2, #1
    44e0:	4013      	ands	r3, r2
    44e2:	d001      	beq.n	44e8 <i2c_slave_init+0x34>
		return STATUS_BUSY;
    44e4:	2305      	movs	r3, #5
    44e6:	e062      	b.n	45ae <i2c_slave_init+0xfa>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	0018      	movs	r0, r3
    44ee:	4b32      	ldr	r3, [pc, #200]	; (45b8 <i2c_slave_init+0x104>)
    44f0:	4798      	blx	r3
    44f2:	0003      	movs	r3, r0
    44f4:	623b      	str	r3, [r7, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    44f6:	6a3b      	ldr	r3, [r7, #32]
    44f8:	3302      	adds	r3, #2
    44fa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44fc:	6a3b      	ldr	r3, [r7, #32]
    44fe:	3314      	adds	r3, #20
    4500:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4502:	2201      	movs	r2, #1
    4504:	69fb      	ldr	r3, [r7, #28]
    4506:	409a      	lsls	r2, r3
    4508:	0013      	movs	r3, r2
    450a:	0019      	movs	r1, r3
    450c:	2002      	movs	r0, #2
    450e:	4b2b      	ldr	r3, [pc, #172]	; (45bc <i2c_slave_init+0x108>)
    4510:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4512:	2314      	movs	r3, #20
    4514:	18fb      	adds	r3, r7, r3
    4516:	0018      	movs	r0, r3
    4518:	4b29      	ldr	r3, [pc, #164]	; (45c0 <i2c_slave_init+0x10c>)
    451a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	7e5a      	ldrb	r2, [r3, #25]
    4520:	2314      	movs	r3, #20
    4522:	18fb      	adds	r3, r7, r3
    4524:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4526:	69bb      	ldr	r3, [r7, #24]
    4528:	b2db      	uxtb	r3, r3
    452a:	2214      	movs	r2, #20
    452c:	18ba      	adds	r2, r7, r2
    452e:	0011      	movs	r1, r2
    4530:	0018      	movs	r0, r3
    4532:	4b24      	ldr	r3, [pc, #144]	; (45c4 <i2c_slave_init+0x110>)
    4534:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4536:	69bb      	ldr	r3, [r7, #24]
    4538:	b2db      	uxtb	r3, r3
    453a:	0018      	movs	r0, r3
    453c:	4b22      	ldr	r3, [pc, #136]	; (45c8 <i2c_slave_init+0x114>)
    453e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	7e5b      	ldrb	r3, [r3, #25]
    4544:	2100      	movs	r1, #0
    4546:	0018      	movs	r0, r3
    4548:	4b20      	ldr	r3, [pc, #128]	; (45cc <i2c_slave_init+0x118>)
    454a:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	2217      	movs	r2, #23
    4552:	18bc      	adds	r4, r7, r2
    4554:	0018      	movs	r0, r3
    4556:	4b18      	ldr	r3, [pc, #96]	; (45b8 <i2c_slave_init+0x104>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
    455c:	7023      	strb	r3, [r4, #0]

	/* Save software module in interrupt handler */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
    455e:	4a1c      	ldr	r2, [pc, #112]	; (45d0 <i2c_slave_init+0x11c>)
    4560:	2317      	movs	r3, #23
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	0011      	movs	r1, r2
    4568:	0018      	movs	r0, r3
    456a:	4b1a      	ldr	r3, [pc, #104]	; (45d4 <i2c_slave_init+0x120>)
    456c:	4798      	blx	r3

	/* Save software module */
	_sercom_instances[instance_index] = module;
    456e:	2317      	movs	r3, #23
    4570:	18fb      	adds	r3, r7, r3
    4572:	781a      	ldrb	r2, [r3, #0]
    4574:	4b18      	ldr	r3, [pc, #96]	; (45d8 <i2c_slave_init+0x124>)
    4576:	0092      	lsls	r2, r2, #2
    4578:	68f9      	ldr	r1, [r7, #12]
    457a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module */
	module->registered_callback = 0;
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	2224      	movs	r2, #36	; 0x24
    4580:	2100      	movs	r1, #0
    4582:	5499      	strb	r1, [r3, r2]
	module->enabled_callback = 0;
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	2225      	movs	r2, #37	; 0x25
    4588:	2100      	movs	r1, #0
    458a:	5499      	strb	r1, [r3, r2]
	module->buffer_length = 0;
    458c:	68fb      	ldr	r3, [r7, #12]
    458e:	2200      	movs	r2, #0
    4590:	84da      	strh	r2, [r3, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	7e1a      	ldrb	r2, [r3, #24]
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	725a      	strb	r2, [r3, #9]
#endif

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
    459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    459c:	2210      	movs	r2, #16
    459e:	601a      	str	r2, [r3, #0]

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	0011      	movs	r1, r2
    45a6:	0018      	movs	r0, r3
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <i2c_slave_init+0x128>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
}
    45ae:	0018      	movs	r0, r3
    45b0:	46bd      	mov	sp, r7
    45b2:	b00b      	add	sp, #44	; 0x2c
    45b4:	bd90      	pop	{r4, r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00007a01 	.word	0x00007a01
    45bc:	000042ad 	.word	0x000042ad
    45c0:	00004295 	.word	0x00004295
    45c4:	000085ed 	.word	0x000085ed
    45c8:	00008631 	.word	0x00008631
    45cc:	000077b9 	.word	0x000077b9
    45d0:	000047d5 	.word	0x000047d5
    45d4:	00007a65 	.word	0x00007a65
    45d8:	2000050c 	.word	0x2000050c
    45dc:	00004351 	.word	0x00004351

000045e0 <system_interrupt_enter_critical_section>:
{
    45e0:	b580      	push	{r7, lr}
    45e2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <system_interrupt_enter_critical_section+0x10>)
    45e6:	4798      	blx	r3
}
    45e8:	46c0      	nop			; (mov r8, r8)
    45ea:	46bd      	mov	sp, r7
    45ec:	bd80      	pop	{r7, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	00007c39 	.word	0x00007c39

000045f4 <system_interrupt_leave_critical_section>:
{
    45f4:	b580      	push	{r7, lr}
    45f6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <system_interrupt_leave_critical_section+0x10>)
    45fa:	4798      	blx	r3
}
    45fc:	46c0      	nop			; (mov r8, r8)
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	00007c8d 	.word	0x00007c8d

00004608 <_i2c_slave_set_ctrlb_ackact>:
 * \param[in] send_ack true send ACK, false send NACK
 */
static inline void _i2c_slave_set_ctrlb_ackact(
		struct i2c_slave_module *const module,
		bool send_ack)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	000a      	movs	r2, r1
    4612:	1cfb      	adds	r3, r7, #3
    4614:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	60fb      	str	r3, [r7, #12]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
    461c:	4b0b      	ldr	r3, [pc, #44]	; (464c <_i2c_slave_set_ctrlb_ackact+0x44>)
    461e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	2200      	movs	r2, #0
    4624:	835a      	strh	r2, [r3, #26]

	if (send_ack == true) {
    4626:	1cfb      	adds	r3, r7, #3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d003      	beq.n	4636 <_i2c_slave_set_ctrlb_ackact+0x2e>
		i2c_hw->CTRLB.reg = 0;
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2200      	movs	r2, #0
    4632:	605a      	str	r2, [r3, #4]
    4634:	e003      	b.n	463e <_i2c_slave_set_ctrlb_ackact+0x36>
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	2280      	movs	r2, #128	; 0x80
    463a:	02d2      	lsls	r2, r2, #11
    463c:	605a      	str	r2, [r3, #4]
	}
	system_interrupt_leave_critical_section();
    463e:	4b04      	ldr	r3, [pc, #16]	; (4650 <_i2c_slave_set_ctrlb_ackact+0x48>)
    4640:	4798      	blx	r3
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
	}
#endif
	return;
    4642:	46c0      	nop			; (mov r8, r8)
}
    4644:	46bd      	mov	sp, r7
    4646:	b004      	add	sp, #16
    4648:	bd80      	pop	{r7, pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	000045e1 	.word	0x000045e1
    4650:	000045f5 	.word	0x000045f5

00004654 <_i2c_slave_set_ctrlb_cmd3>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static inline void _i2c_slave_set_ctrlb_cmd3(
		struct i2c_slave_module *const module)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	60fb      	str	r3, [r7, #12]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	7e1b      	ldrb	r3, [r3, #24]
    4666:	07db      	lsls	r3, r3, #31
    4668:	0fdb      	lsrs	r3, r3, #31
    466a:	b2db      	uxtb	r3, r3
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <_i2c_slave_set_ctrlb_cmd3+0x22>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	2201      	movs	r2, #1
    4674:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	2202      	movs	r2, #2
    467a:	761a      	strb	r2, [r3, #24]
#else
	/* Normal operation */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
#endif
	return;
    467c:	46c0      	nop			; (mov r8, r8)
}
    467e:	46bd      	mov	sp, r7
    4680:	b004      	add	sp, #16
    4682:	bd80      	pop	{r7, pc}

00004684 <_i2c_slave_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_read(
		struct i2c_slave_module *const module)
{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	60fb      	str	r3, [r7, #12]

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4696:	1c59      	adds	r1, r3, #1
    4698:	687a      	ldr	r2, [r7, #4]
    469a:	62d1      	str	r1, [r2, #44]	; 0x2c
    469c:	68fa      	ldr	r2, [r7, #12]
    469e:	2128      	movs	r1, #40	; 0x28
    46a0:	5c52      	ldrb	r2, [r2, r1]
    46a2:	b2d2      	uxtb	r2, r2
    46a4:	701a      	strb	r2, [r3, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46aa:	3b01      	subs	r3, #1
    46ac:	b29a      	uxth	r2, r3
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	46bd      	mov	sp, r7
    46b6:	b004      	add	sp, #16
    46b8:	bd80      	pop	{r7, pc}

000046ba <_i2c_slave_write>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_write(
		struct i2c_slave_module *const module)
{
    46ba:	b580      	push	{r7, lr}
    46bc:	b084      	sub	sp, #16
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	60fb      	str	r3, [r7, #12]

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46cc:	1c59      	adds	r1, r3, #1
    46ce:	687a      	ldr	r2, [r7, #4]
    46d0:	62d1      	str	r1, [r2, #44]	; 0x2c
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2d9      	uxtb	r1, r3
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2228      	movs	r2, #40	; 0x28
    46da:	5499      	strb	r1, [r3, r2]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46e0:	3b01      	subs	r3, #1
    46e2:	b29a      	uxth	r2, r3
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b004      	add	sp, #16
    46ee:	bd80      	pop	{r7, pc}

000046f0 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b084      	sub	sp, #16
    46f4:	af00      	add	r7, sp, #0
    46f6:	60f8      	str	r0, [r7, #12]
    46f8:	60b9      	str	r1, [r7, #8]
    46fa:	1dfb      	adds	r3, r7, #7
    46fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
    46fe:	1dfb      	adds	r3, r7, #7
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	68fa      	ldr	r2, [r7, #12]
    4704:	3302      	adds	r3, #2
    4706:	009b      	lsls	r3, r3, #2
    4708:	18d3      	adds	r3, r2, r3
    470a:	3304      	adds	r3, #4
    470c:	68ba      	ldr	r2, [r7, #8]
    470e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	2224      	movs	r2, #36	; 0x24
    4714:	5c9b      	ldrb	r3, [r3, r2]
    4716:	b2db      	uxtb	r3, r3
    4718:	b25a      	sxtb	r2, r3
    471a:	1dfb      	adds	r3, r7, #7
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	2101      	movs	r1, #1
    4720:	4099      	lsls	r1, r3
    4722:	000b      	movs	r3, r1
    4724:	b25b      	sxtb	r3, r3
    4726:	4313      	orrs	r3, r2
    4728:	b25b      	sxtb	r3, r3
    472a:	b2d9      	uxtb	r1, r3
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	2224      	movs	r2, #36	; 0x24
    4730:	5499      	strb	r1, [r3, r2]
}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}

0000473a <i2c_slave_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_slave_read_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    473a:	b580      	push	{r7, lr}
    473c:	b084      	sub	sp, #16
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
    4742:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4748:	2b00      	cmp	r3, #0
    474a:	d001      	beq.n	4750 <i2c_slave_read_packet_job+0x16>
		return STATUS_BUSY;
    474c:	2305      	movs	r3, #5
    474e:	e016      	b.n	477e <i2c_slave_read_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	685a      	ldr	r2, [r3, #4]
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	881a      	ldrh	r2, [r3, #0]
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    4760:	683b      	ldr	r3, [r7, #0]
    4762:	881a      	ldrh	r2, [r3, #0]
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2231      	movs	r2, #49	; 0x31
    476c:	2105      	movs	r1, #5
    476e:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	2207      	movs	r2, #7
    477a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
    477c:	2300      	movs	r3, #0
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b004      	add	sp, #16
    4784:	bd80      	pop	{r7, pc}

00004786 <i2c_slave_write_packet_job>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
enum status_code i2c_slave_write_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    4786:	b580      	push	{r7, lr}
    4788:	b084      	sub	sp, #16
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
    478e:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4794:	2b00      	cmp	r3, #0
    4796:	d001      	beq.n	479c <i2c_slave_write_packet_job+0x16>
		return STATUS_BUSY;
    4798:	2305      	movs	r3, #5
    479a:	e016      	b.n	47ca <i2c_slave_write_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	685a      	ldr	r2, [r3, #4]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    47a4:	683b      	ldr	r3, [r7, #0]
    47a6:	881a      	ldrh	r2, [r3, #0]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    47ac:	683b      	ldr	r3, [r7, #0]
    47ae:	881a      	ldrh	r2, [r3, #0]
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	2231      	movs	r2, #49	; 0x31
    47b8:	2105      	movs	r1, #5
    47ba:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2207      	movs	r2, #7
    47c6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
    47c8:	2300      	movs	r3, #0
}
    47ca:	0018      	movs	r0, r3
    47cc:	46bd      	mov	sp, r7
    47ce:	b004      	add	sp, #16
    47d0:	bd80      	pop	{r7, pc}
	...

000047d4 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b086      	sub	sp, #24
    47d8:	af00      	add	r7, sp, #0
    47da:	0002      	movs	r2, r0
    47dc:	1dfb      	adds	r3, r7, #7
    47de:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
			(struct i2c_slave_module*)_sercom_instances[instance];
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_slave_module *module =
    47e4:	4bc6      	ldr	r3, [pc, #792]	; (4b00 <_i2c_slave_interrupt_handler+0x32c>)
    47e6:	0092      	lsls	r2, r2, #2
    47e8:	58d3      	ldr	r3, [r2, r3]
    47ea:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	697a      	ldr	r2, [r7, #20]
    47f8:	2125      	movs	r1, #37	; 0x25
    47fa:	5c52      	ldrb	r2, [r2, r1]
    47fc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	2224      	movs	r2, #36	; 0x24
    4802:	5c9b      	ldrb	r3, [r3, r2]
    4804:	b2da      	uxtb	r2, r3
    4806:	230f      	movs	r3, #15
    4808:	18fb      	adds	r3, r7, r3
    480a:	210f      	movs	r1, #15
    480c:	1879      	adds	r1, r7, r1
    480e:	7809      	ldrb	r1, [r1, #0]
    4810:	400a      	ands	r2, r1
    4812:	701a      	strb	r2, [r3, #0]


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    4814:	693b      	ldr	r3, [r7, #16]
    4816:	7e1b      	ldrb	r3, [r3, #24]
    4818:	b2db      	uxtb	r3, r3
    481a:	001a      	movs	r2, r3
    481c:	2302      	movs	r3, #2
    481e:	4013      	ands	r3, r2
    4820:	d100      	bne.n	4824 <_i2c_slave_interrupt_handler+0x50>
    4822:	e0b4      	b.n	498e <_i2c_slave_interrupt_handler+0x1ba>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4828:	b29a      	uxth	r2, r3
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    482e:	429a      	cmp	r2, r3
    4830:	d01b      	beq.n	486a <_i2c_slave_interrupt_handler+0x96>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    4832:	697b      	ldr	r3, [r7, #20]
    4834:	2230      	movs	r2, #48	; 0x30
    4836:	5c9b      	ldrb	r3, [r3, r2]
    4838:	b2db      	uxtb	r3, r3
		if (module->buffer_length != module->buffer_remaining &&
    483a:	2b00      	cmp	r3, #0
    483c:	d115      	bne.n	486a <_i2c_slave_interrupt_handler+0x96>

			module->status = STATUS_OK;
    483e:	697b      	ldr	r3, [r7, #20]
    4840:	2231      	movs	r2, #49	; 0x31
    4842:	2100      	movs	r1, #0
    4844:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    4846:	697b      	ldr	r3, [r7, #20]
    4848:	2200      	movs	r2, #0
    484a:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    484c:	697b      	ldr	r3, [r7, #20]
    484e:	2200      	movs	r2, #0
    4850:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4852:	230f      	movs	r3, #15
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	2202      	movs	r2, #2
    485a:	4013      	ands	r3, r2
    485c:	d027      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    485e:	697b      	ldr	r3, [r7, #20]
    4860:	691b      	ldr	r3, [r3, #16]
    4862:	697a      	ldr	r2, [r7, #20]
    4864:	0010      	movs	r0, r2
    4866:	4798      	blx	r3
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4868:	e021      	b.n	48ae <_i2c_slave_interrupt_handler+0xda>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    486a:	697b      	ldr	r3, [r7, #20]
    486c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    486e:	b29a      	uxth	r2, r3
    4870:	697b      	ldr	r3, [r7, #20]
    4872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4874:	429a      	cmp	r2, r3
    4876:	d01a      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->transfer_direction == I2C_TRANSFER_READ) {
    4878:	697b      	ldr	r3, [r7, #20]
    487a:	2230      	movs	r2, #48	; 0x30
    487c:	5c9b      	ldrb	r3, [r3, r2]
    487e:	b2db      	uxtb	r3, r3
		} else if (module->buffer_length != module->buffer_remaining &&
    4880:	2b01      	cmp	r3, #1
    4882:	d114      	bne.n	48ae <_i2c_slave_interrupt_handler+0xda>
			module->status = STATUS_OK;
    4884:	697b      	ldr	r3, [r7, #20]
    4886:	2231      	movs	r2, #49	; 0x31
    4888:	2100      	movs	r1, #0
    488a:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    488c:	697b      	ldr	r3, [r7, #20]
    488e:	2200      	movs	r2, #0
    4890:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    4892:	697b      	ldr	r3, [r7, #20]
    4894:	2200      	movs	r2, #0
    4896:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    4898:	230f      	movs	r3, #15
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2201      	movs	r2, #1
    48a0:	4013      	ands	r3, r2
    48a2:	d004      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    48a4:	697b      	ldr	r3, [r7, #20]
    48a6:	68db      	ldr	r3, [r3, #12]
    48a8:	697a      	ldr	r2, [r7, #20]
    48aa:	0010      	movs	r0, r2
    48ac:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    48ae:	693b      	ldr	r3, [r7, #16]
    48b0:	8b5b      	ldrh	r3, [r3, #26]
    48b2:	b29b      	uxth	r3, r3
    48b4:	001a      	movs	r2, r3
    48b6:	2343      	movs	r3, #67	; 0x43
    48b8:	4013      	ands	r3, r2
    48ba:	d00e      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    48bc:	697b      	ldr	r3, [r7, #20]
    48be:	2231      	movs	r2, #49	; 0x31
    48c0:	2110      	movs	r1, #16
    48c2:	5499      	strb	r1, [r3, r2]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    48c4:	230f      	movs	r3, #15
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	2220      	movs	r2, #32
    48cc:	4013      	ands	r3, r2
    48ce:	d004      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    48d0:	697b      	ldr	r3, [r7, #20]
    48d2:	6a1b      	ldr	r3, [r3, #32]
    48d4:	697a      	ldr	r2, [r7, #20]
    48d6:	0010      	movs	r0, r2
    48d8:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	7a5b      	ldrb	r3, [r3, #9]
    48de:	2b00      	cmp	r3, #0
    48e0:	d005      	beq.n	48ee <_i2c_slave_interrupt_handler+0x11a>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
    48e2:	697b      	ldr	r3, [r7, #20]
    48e4:	2100      	movs	r1, #0
    48e6:	0018      	movs	r0, r3
    48e8:	4b86      	ldr	r3, [pc, #536]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    48ea:	4798      	blx	r3
    48ec:	e045      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	8b5b      	ldrh	r3, [r3, #26]
    48f2:	b29b      	uxth	r3, r3
    48f4:	001a      	movs	r2, r3
    48f6:	2308      	movs	r3, #8
    48f8:	4013      	ands	r3, r2
    48fa:	d01f      	beq.n	493c <_i2c_slave_interrupt_handler+0x168>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    48fc:	697b      	ldr	r3, [r7, #20]
    48fe:	2230      	movs	r2, #48	; 0x30
    4900:	2101      	movs	r1, #1
    4902:	5499      	strb	r1, [r3, r2]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2204      	movs	r2, #4
    490c:	4013      	ands	r3, r2
    490e:	d004      	beq.n	491a <_i2c_slave_interrupt_handler+0x146>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	695b      	ldr	r3, [r3, #20]
    4914:	697a      	ldr	r2, [r7, #20]
    4916:	0010      	movs	r0, r2
    4918:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    491a:	697b      	ldr	r3, [r7, #20]
    491c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    491e:	b29b      	uxth	r3, r3
    4920:	2b00      	cmp	r3, #0
    4922:	d105      	bne.n	4930 <_i2c_slave_interrupt_handler+0x15c>
				/* Data buffer not set up, NACK address, workaround 13574*/
				_i2c_slave_set_ctrlb_ackact(module, false);
    4924:	697b      	ldr	r3, [r7, #20]
    4926:	2100      	movs	r1, #0
    4928:	0018      	movs	r0, r3
    492a:	4b76      	ldr	r3, [pc, #472]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    492c:	4798      	blx	r3
    492e:	e024      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4930:	697b      	ldr	r3, [r7, #20]
    4932:	2101      	movs	r1, #1
    4934:	0018      	movs	r0, r3
    4936:	4b73      	ldr	r3, [pc, #460]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4938:	4798      	blx	r3
    493a:	e01e      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = I2C_TRANSFER_WRITE;
    493c:	697b      	ldr	r3, [r7, #20]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	2100      	movs	r1, #0
    4942:	5499      	strb	r1, [r3, r2]

			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    4944:	230f      	movs	r3, #15
    4946:	18fb      	adds	r3, r7, r3
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2208      	movs	r2, #8
    494c:	4013      	ands	r3, r2
    494e:	d004      	beq.n	495a <_i2c_slave_interrupt_handler+0x186>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    4950:	697b      	ldr	r3, [r7, #20]
    4952:	699b      	ldr	r3, [r3, #24]
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	0010      	movs	r0, r2
    4958:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    495e:	b29b      	uxth	r3, r3
    4960:	2b00      	cmp	r3, #0
    4962:	d105      	bne.n	4970 <_i2c_slave_interrupt_handler+0x19c>
				/* Data buffer not set up, NACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, false);
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	2100      	movs	r1, #0
    4968:	0018      	movs	r0, r3
    496a:	4b66      	ldr	r3, [pc, #408]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    496c:	4798      	blx	r3
    496e:	e004      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2101      	movs	r1, #1
    4974:	0018      	movs	r0, r3
    4976:	4b63      	ldr	r3, [pc, #396]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4978:	4798      	blx	r3
			}
		}

		/* ACK or NACK address, Workaround 13574 */
		_i2c_slave_set_ctrlb_cmd3(module);
    497a:	697b      	ldr	r3, [r7, #20]
    497c:	0018      	movs	r0, r3
    497e:	4b62      	ldr	r3, [pc, #392]	; (4b08 <_i2c_slave_interrupt_handler+0x334>)
    4980:	4798      	blx	r3

		/* ACK next incoming packet, workaround 13574 */
		_i2c_slave_set_ctrlb_ackact(module, true);
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	2101      	movs	r1, #1
    4986:	0018      	movs	r0, r3
    4988:	4b5e      	ldr	r3, [pc, #376]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    498a:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    498c:	e0d8      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	7e1b      	ldrb	r3, [r3, #24]
    4992:	b2db      	uxtb	r3, r3
    4994:	001a      	movs	r2, r3
    4996:	2301      	movs	r3, #1
    4998:	4013      	ands	r3, r2
    499a:	d054      	beq.n	4a46 <_i2c_slave_interrupt_handler+0x272>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	2201      	movs	r2, #1
    49a0:	761a      	strb	r2, [r3, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	2205      	movs	r2, #5
    49a6:	751a      	strb	r2, [r3, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49a8:	697b      	ldr	r3, [r7, #20]
    49aa:	2225      	movs	r2, #37	; 0x25
    49ac:	5c9b      	ldrb	r3, [r3, r2]
    49ae:	b2db      	uxtb	r3, r3
    49b0:	001a      	movs	r2, r3
    49b2:	2304      	movs	r3, #4
    49b4:	4013      	ands	r3, r2
    49b6:	d108      	bne.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    49b8:	697b      	ldr	r3, [r7, #20]
    49ba:	2225      	movs	r2, #37	; 0x25
    49bc:	5c9b      	ldrb	r3, [r3, r2]
    49be:	b2db      	uxtb	r3, r3
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49c0:	2b08      	cmp	r3, #8
    49c2:	d002      	beq.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    49c4:	693b      	ldr	r3, [r7, #16]
    49c6:	2202      	movs	r2, #2
    49c8:	751a      	strb	r2, [r3, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2231      	movs	r2, #49	; 0x31
    49ce:	5c9b      	ldrb	r3, [r3, r2]
    49d0:	b2db      	uxtb	r3, r3
    49d2:	2b1e      	cmp	r3, #30
    49d4:	d100      	bne.n	49d8 <_i2c_slave_interrupt_handler+0x204>
    49d6:	e0b3      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    49d8:	697b      	ldr	r3, [r7, #20]
    49da:	2231      	movs	r2, #49	; 0x31
    49dc:	5c9b      	ldrb	r3, [r3, r2]
    49de:	b2db      	uxtb	r3, r3
    49e0:	2b10      	cmp	r3, #16
    49e2:	d100      	bne.n	49e6 <_i2c_slave_interrupt_handler+0x212>
    49e4:	e0ac      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			module->status = STATUS_OK;
    49e6:	697b      	ldr	r3, [r7, #20]
    49e8:	2231      	movs	r2, #49	; 0x31
    49ea:	2100      	movs	r1, #0
    49ec:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    49ee:	697b      	ldr	r3, [r7, #20]
    49f0:	2200      	movs	r2, #0
    49f2:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    49f4:	697b      	ldr	r3, [r7, #20]
    49f6:	2200      	movs	r2, #0
    49f8:	851a      	strh	r2, [r3, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    49fa:	230f      	movs	r3, #15
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2202      	movs	r2, #2
    4a02:	4013      	ands	r3, r2
    4a04:	d00b      	beq.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	2230      	movs	r2, #48	; 0x30
    4a0a:	5c9b      	ldrb	r3, [r3, r2]
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d105      	bne.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	691b      	ldr	r3, [r3, #16]
    4a16:	697a      	ldr	r2, [r7, #20]
    4a18:	0010      	movs	r0, r2
    4a1a:	4798      	blx	r3
    4a1c:	e090      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    4a1e:	230f      	movs	r3, #15
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	4013      	ands	r3, r2
    4a28:	d100      	bne.n	4a2c <_i2c_slave_interrupt_handler+0x258>
    4a2a:	e089      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4a2c:	697b      	ldr	r3, [r7, #20]
    4a2e:	2230      	movs	r2, #48	; 0x30
    4a30:	5c9b      	ldrb	r3, [r3, r2]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b01      	cmp	r3, #1
    4a36:	d000      	beq.n	4a3a <_i2c_slave_interrupt_handler+0x266>
    4a38:	e082      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	68db      	ldr	r3, [r3, #12]
    4a3e:	697a      	ldr	r2, [r7, #20]
    4a40:	0010      	movs	r0, r2
    4a42:	4798      	blx	r3
}
    4a44:	e07c      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	7e1b      	ldrb	r3, [r3, #24]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	001a      	movs	r2, r3
    4a4e:	2304      	movs	r3, #4
    4a50:	4013      	ands	r3, r2
    4a52:	d100      	bne.n	4a56 <_i2c_slave_interrupt_handler+0x282>
    4a54:	e074      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
		if (module->buffer_remaining <= 0 ||
    4a56:	697b      	ldr	r3, [r7, #20]
    4a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d013      	beq.n	4a86 <_i2c_slave_interrupt_handler+0x2b2>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2230      	movs	r2, #48	; 0x30
    4a62:	5c9b      	ldrb	r3, [r3, r2]
    4a64:	b2db      	uxtb	r3, r3
		if (module->buffer_remaining <= 0 ||
    4a66:	2b01      	cmp	r3, #1
    4a68:	d150      	bne.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(module->buffer_length > module->buffer_remaining) &&
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a6e:	b29a      	uxth	r2, r3
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a74:	429a      	cmp	r2, r3
    4a76:	d949      	bls.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    4a78:	693b      	ldr	r3, [r7, #16]
    4a7a:	8b5b      	ldrh	r3, [r3, #26]
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	001a      	movs	r2, r3
    4a80:	2304      	movs	r3, #4
    4a82:	4013      	ands	r3, r2
				(module->buffer_length > module->buffer_remaining) &&
    4a84:	d042      	beq.n	4b0c <_i2c_slave_interrupt_handler+0x338>
			module->buffer_remaining = 0;
    4a86:	697b      	ldr	r3, [r7, #20]
    4a88:	2200      	movs	r2, #0
    4a8a:	851a      	strh	r2, [r3, #40]	; 0x28
			module->buffer_length = 0;
    4a8c:	697b      	ldr	r3, [r7, #20]
    4a8e:	2200      	movs	r2, #0
    4a90:	84da      	strh	r2, [r3, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	2230      	movs	r2, #48	; 0x30
    4a96:	5c9b      	ldrb	r3, [r3, r2]
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d11b      	bne.n	4ad6 <_i2c_slave_interrupt_handler+0x302>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	2100      	movs	r1, #0
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b17      	ldr	r3, [pc, #92]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4aa6:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4aa8:	693b      	ldr	r3, [r7, #16]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	0292      	lsls	r2, r2, #10
    4ab0:	431a      	orrs	r2, r3
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	605a      	str	r2, [r3, #4]
				module->status = STATUS_ERR_OVERFLOW;
    4ab6:	697b      	ldr	r3, [r7, #20]
    4ab8:	2231      	movs	r2, #49	; 0x31
    4aba:	211e      	movs	r1, #30
    4abc:	5499      	strb	r1, [r3, r2]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    4abe:	230f      	movs	r3, #15
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	2210      	movs	r2, #16
    4ac6:	4013      	ands	r3, r2
    4ac8:	d039      	beq.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	69db      	ldr	r3, [r3, #28]
    4ace:	697a      	ldr	r2, [r7, #20]
    4ad0:	0010      	movs	r0, r2
    4ad2:	4798      	blx	r3
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4ad4:	e033      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	2100      	movs	r1, #0
    4ada:	0018      	movs	r0, r3
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4ade:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4ae0:	693b      	ldr	r3, [r7, #16]
    4ae2:	685b      	ldr	r3, [r3, #4]
    4ae4:	2280      	movs	r2, #128	; 0x80
    4ae6:	0292      	lsls	r2, r2, #10
    4ae8:	431a      	orrs	r2, r3
    4aea:	693b      	ldr	r3, [r7, #16]
    4aec:	605a      	str	r2, [r3, #4]
				module->status = STATUS_OK;
    4aee:	697b      	ldr	r3, [r7, #20]
    4af0:	2231      	movs	r2, #49	; 0x31
    4af2:	2100      	movs	r1, #0
    4af4:	5499      	strb	r1, [r3, r2]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    4af6:	693b      	ldr	r3, [r7, #16]
    4af8:	2204      	movs	r2, #4
    4afa:	751a      	strb	r2, [r3, #20]
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4afc:	e01f      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	2000050c 	.word	0x2000050c
    4b04:	00004609 	.word	0x00004609
    4b08:	00004655 	.word	0x00004655
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b10:	b29b      	uxth	r3, r3
    4b12:	2b00      	cmp	r3, #0
    4b14:	d014      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    4b16:	697b      	ldr	r3, [r7, #20]
    4b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d010      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b1e:	697b      	ldr	r3, [r7, #20]
    4b20:	2230      	movs	r2, #48	; 0x30
    4b22:	5c9b      	ldrb	r3, [r3, r2]
    4b24:	b2db      	uxtb	r3, r3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d104      	bne.n	4b34 <_i2c_slave_interrupt_handler+0x360>
				_i2c_slave_read(module);
    4b2a:	697b      	ldr	r3, [r7, #20]
    4b2c:	0018      	movs	r0, r3
    4b2e:	4b06      	ldr	r3, [pc, #24]	; (4b48 <_i2c_slave_interrupt_handler+0x374>)
    4b30:	4798      	blx	r3
}
    4b32:	e005      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				_i2c_slave_write(module);
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	0018      	movs	r0, r3
    4b38:	4b04      	ldr	r3, [pc, #16]	; (4b4c <_i2c_slave_interrupt_handler+0x378>)
    4b3a:	4798      	blx	r3
}
    4b3c:	e000      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b3e:	46c0      	nop			; (mov r8, r8)
}
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	46bd      	mov	sp, r7
    4b44:	b006      	add	sp, #24
    4b46:	bd80      	pop	{r7, pc}
    4b48:	00004685 	.word	0x00004685
    4b4c:	000046bb 	.word	0x000046bb

00004b50 <system_gclk_chan_get_config_defaults>:
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	2200      	movs	r2, #0
    4b5c:	701a      	strb	r2, [r3, #0]
}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	46bd      	mov	sp, r7
    4b62:	b002      	add	sp, #8
    4b64:	bd80      	pop	{r7, pc}
	...

00004b68 <system_apb_clock_set_mask>:
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b082      	sub	sp, #8
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	0002      	movs	r2, r0
    4b70:	6039      	str	r1, [r7, #0]
    4b72:	1dfb      	adds	r3, r7, #7
    4b74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d00a      	beq.n	4b94 <system_apb_clock_set_mask+0x2c>
    4b7e:	2b02      	cmp	r3, #2
    4b80:	d00f      	beq.n	4ba2 <system_apb_clock_set_mask+0x3a>
    4b82:	2b00      	cmp	r3, #0
    4b84:	d114      	bne.n	4bb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b8a:	6991      	ldr	r1, [r2, #24]
    4b8c:	683a      	ldr	r2, [r7, #0]
    4b8e:	430a      	orrs	r2, r1
    4b90:	619a      	str	r2, [r3, #24]
			break;
    4b92:	e00f      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4b94:	4b0a      	ldr	r3, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b96:	4a0a      	ldr	r2, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b98:	69d1      	ldr	r1, [r2, #28]
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	430a      	orrs	r2, r1
    4b9e:	61da      	str	r2, [r3, #28]
			break;
    4ba0:	e008      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba4:	4a06      	ldr	r2, [pc, #24]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba6:	6a11      	ldr	r1, [r2, #32]
    4ba8:	683a      	ldr	r2, [r7, #0]
    4baa:	430a      	orrs	r2, r1
    4bac:	621a      	str	r2, [r3, #32]
			break;
    4bae:	e001      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bb0:	2317      	movs	r3, #23
    4bb2:	e000      	b.n	4bb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bb4:	2300      	movs	r3, #0
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b002      	add	sp, #8
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	40000400 	.word	0x40000400

00004bc4 <system_pinmux_get_config_defaults>:
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	2280      	movs	r2, #128	; 0x80
    4bd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	2200      	movs	r2, #0
    4bd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	2201      	movs	r2, #1
    4bdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	2200      	movs	r2, #0
    4be2:	70da      	strb	r2, [r3, #3]
}
    4be4:	46c0      	nop			; (mov r8, r8)
    4be6:	46bd      	mov	sp, r7
    4be8:	b002      	add	sp, #8
    4bea:	bd80      	pop	{r7, pc}

00004bec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4bf4:	2300      	movs	r3, #0
    4bf6:	60fb      	str	r3, [r7, #12]
    4bf8:	e00c      	b.n	4c14 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    4bfa:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_tcc_get_inst_index+0x38>)
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	0092      	lsls	r2, r2, #2
    4c00:	58d2      	ldr	r2, [r2, r3]
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	429a      	cmp	r2, r3
    4c06:	d102      	bne.n	4c0e <_tcc_get_inst_index+0x22>
			return i;
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	e006      	b.n	4c1c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	3301      	adds	r3, #1
    4c12:	60fb      	str	r3, [r7, #12]
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	2b02      	cmp	r3, #2
    4c18:	d9ef      	bls.n	4bfa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c1a:	2300      	movs	r3, #0
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	46bd      	mov	sp, r7
    4c20:	b004      	add	sp, #16
    4c22:	bd80      	pop	{r7, pc}
    4c24:	0001b7e8 	.word	0x0001b7e8

00004c28 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c28:	b590      	push	{r4, r7, lr}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c32:	230f      	movs	r3, #15
    4c34:	18fc      	adds	r4, r7, r3
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	0018      	movs	r0, r3
    4c3a:	4bad      	ldr	r3, [pc, #692]	; (4ef0 <tcc_get_config_defaults+0x2c8>)
    4c3c:	4798      	blx	r3
    4c3e:	0003      	movs	r3, r0
    4c40:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	2200      	movs	r2, #0
    4c46:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c48:	230f      	movs	r3, #15
    4c4a:	18fb      	adds	r3, r7, r3
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4ba9      	ldr	r3, [pc, #676]	; (4ef4 <tcc_get_config_defaults+0x2cc>)
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	58d2      	ldr	r2, [r2, r3]
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	2200      	movs	r2, #0
    4c5c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	2200      	movs	r2, #0
    4c62:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	2200      	movs	r2, #0
    4c68:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2200      	movs	r2, #0
    4c6e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	2200      	movs	r2, #0
    4c74:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2200      	movs	r2, #0
    4c7a:	61da      	str	r2, [r3, #28]
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	2200      	movs	r2, #0
    4c80:	621a      	str	r2, [r3, #32]
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	2200      	movs	r2, #0
    4c86:	625a      	str	r2, [r3, #36]	; 0x24
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2200      	movs	r2, #0
    4c8c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	2200      	movs	r2, #0
    4c92:	751a      	strb	r2, [r3, #20]
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	2200      	movs	r2, #0
    4c98:	755a      	strb	r2, [r3, #21]
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	2200      	movs	r2, #0
    4c9e:	759a      	strb	r2, [r3, #22]
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2200      	movs	r2, #0
    4ca4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2200      	movs	r2, #0
    4caa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	2200      	movs	r2, #0
    4cb0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	2200      	movs	r2, #0
    4cb6:	741a      	strb	r2, [r3, #16]
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2200      	movs	r2, #0
    4cbc:	745a      	strb	r2, [r3, #17]
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2200      	movs	r2, #0
    4cc2:	749a      	strb	r2, [r3, #18]
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	222c      	movs	r2, #44	; 0x2c
    4cce:	2100      	movs	r1, #0
    4cd0:	5499      	strb	r1, [r3, r2]
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	222d      	movs	r2, #45	; 0x2d
    4cd6:	2100      	movs	r1, #0
    4cd8:	5499      	strb	r1, [r3, r2]
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	222e      	movs	r2, #46	; 0x2e
    4cde:	2100      	movs	r1, #0
    4ce0:	5499      	strb	r1, [r3, r2]
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	222f      	movs	r2, #47	; 0x2f
    4ce6:	2100      	movs	r1, #0
    4ce8:	5499      	strb	r1, [r3, r2]
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	2230      	movs	r2, #48	; 0x30
    4cee:	2100      	movs	r1, #0
    4cf0:	5499      	strb	r1, [r3, r2]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	2231      	movs	r2, #49	; 0x31
    4cf6:	2100      	movs	r1, #0
    4cf8:	5499      	strb	r1, [r3, r2]
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	2232      	movs	r2, #50	; 0x32
    4cfe:	2100      	movs	r1, #0
    4d00:	5499      	strb	r1, [r3, r2]
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	2233      	movs	r2, #51	; 0x33
    4d06:	2100      	movs	r1, #0
    4d08:	5499      	strb	r1, [r3, r2]
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2234      	movs	r2, #52	; 0x34
    4d0e:	2100      	movs	r1, #0
    4d10:	5499      	strb	r1, [r3, r2]
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2235      	movs	r2, #53	; 0x35
    4d16:	2100      	movs	r1, #0
    4d18:	5499      	strb	r1, [r3, r2]
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	2236      	movs	r2, #54	; 0x36
    4d1e:	2100      	movs	r1, #0
    4d20:	5499      	strb	r1, [r3, r2]
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	2237      	movs	r2, #55	; 0x37
    4d26:	2100      	movs	r1, #0
    4d28:	5499      	strb	r1, [r3, r2]
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	2238      	movs	r2, #56	; 0x38
    4d2e:	2100      	movs	r1, #0
    4d30:	5499      	strb	r1, [r3, r2]
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	2239      	movs	r2, #57	; 0x39
    4d36:	2100      	movs	r1, #0
    4d38:	5499      	strb	r1, [r3, r2]
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	223a      	movs	r2, #58	; 0x3a
    4d3e:	2100      	movs	r1, #0
    4d40:	5499      	strb	r1, [r3, r2]
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	223b      	movs	r2, #59	; 0x3b
    4d46:	2100      	movs	r1, #0
    4d48:	5499      	strb	r1, [r3, r2]
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	223c      	movs	r2, #60	; 0x3c
    4d4e:	2100      	movs	r1, #0
    4d50:	5499      	strb	r1, [r3, r2]
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	223d      	movs	r2, #61	; 0x3d
    4d56:	2100      	movs	r1, #0
    4d58:	5499      	strb	r1, [r3, r2]
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	223e      	movs	r2, #62	; 0x3e
    4d5e:	2100      	movs	r1, #0
    4d60:	5499      	strb	r1, [r3, r2]
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	223f      	movs	r2, #63	; 0x3f
    4d66:	2100      	movs	r1, #0
    4d68:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	2240      	movs	r2, #64	; 0x40
    4d6e:	2100      	movs	r1, #0
    4d70:	5499      	strb	r1, [r3, r2]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	2241      	movs	r2, #65	; 0x41
    4d76:	2100      	movs	r1, #0
    4d78:	5499      	strb	r1, [r3, r2]
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	2242      	movs	r2, #66	; 0x42
    4d7e:	2100      	movs	r1, #0
    4d80:	5499      	strb	r1, [r3, r2]
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	2243      	movs	r2, #67	; 0x43
    4d86:	2100      	movs	r1, #0
    4d88:	5499      	strb	r1, [r3, r2]
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	2244      	movs	r2, #68	; 0x44
    4d8e:	2100      	movs	r1, #0
    4d90:	5499      	strb	r1, [r3, r2]
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	2245      	movs	r2, #69	; 0x45
    4d96:	2100      	movs	r1, #0
    4d98:	5499      	strb	r1, [r3, r2]
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	2246      	movs	r2, #70	; 0x46
    4d9e:	2100      	movs	r1, #0
    4da0:	5499      	strb	r1, [r3, r2]
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2247      	movs	r2, #71	; 0x47
    4da6:	2100      	movs	r1, #0
    4da8:	5499      	strb	r1, [r3, r2]
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	2248      	movs	r2, #72	; 0x48
    4dae:	2100      	movs	r1, #0
    4db0:	5499      	strb	r1, [r3, r2]
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	2249      	movs	r2, #73	; 0x49
    4db6:	2100      	movs	r1, #0
    4db8:	5499      	strb	r1, [r3, r2]
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	224a      	movs	r2, #74	; 0x4a
    4dbe:	2100      	movs	r1, #0
    4dc0:	5499      	strb	r1, [r3, r2]
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	224b      	movs	r2, #75	; 0x4b
    4dc6:	2100      	movs	r1, #0
    4dc8:	5499      	strb	r1, [r3, r2]
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	224c      	movs	r2, #76	; 0x4c
    4dce:	2100      	movs	r1, #0
    4dd0:	5499      	strb	r1, [r3, r2]
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	224d      	movs	r2, #77	; 0x4d
    4dd6:	2100      	movs	r1, #0
    4dd8:	5499      	strb	r1, [r3, r2]
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	224e      	movs	r2, #78	; 0x4e
    4dde:	2100      	movs	r1, #0
    4de0:	5499      	strb	r1, [r3, r2]
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	224f      	movs	r2, #79	; 0x4f
    4de6:	2100      	movs	r1, #0
    4de8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	2250      	movs	r2, #80	; 0x50
    4dee:	2100      	movs	r1, #0
    4df0:	5499      	strb	r1, [r3, r2]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	2251      	movs	r2, #81	; 0x51
    4df6:	2100      	movs	r1, #0
    4df8:	5499      	strb	r1, [r3, r2]
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	2252      	movs	r2, #82	; 0x52
    4dfe:	2100      	movs	r1, #0
    4e00:	5499      	strb	r1, [r3, r2]
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	2253      	movs	r2, #83	; 0x53
    4e06:	2100      	movs	r1, #0
    4e08:	5499      	strb	r1, [r3, r2]
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	2254      	movs	r2, #84	; 0x54
    4e0e:	2100      	movs	r1, #0
    4e10:	5499      	strb	r1, [r3, r2]
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	2255      	movs	r2, #85	; 0x55
    4e16:	2100      	movs	r1, #0
    4e18:	5499      	strb	r1, [r3, r2]
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	2256      	movs	r2, #86	; 0x56
    4e1e:	2100      	movs	r1, #0
    4e20:	5499      	strb	r1, [r3, r2]
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	2257      	movs	r2, #87	; 0x57
    4e26:	2100      	movs	r1, #0
    4e28:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	2298      	movs	r2, #152	; 0x98
    4e2e:	2100      	movs	r1, #0
    4e30:	5499      	strb	r1, [r3, r2]
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	2200      	movs	r2, #0
    4e36:	659a      	str	r2, [r3, #88]	; 0x58
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2200      	movs	r2, #0
    4e3c:	679a      	str	r2, [r3, #120]	; 0x78
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	2299      	movs	r2, #153	; 0x99
    4e42:	2100      	movs	r1, #0
    4e44:	5499      	strb	r1, [r3, r2]
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	2200      	movs	r2, #0
    4e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	2200      	movs	r2, #0
    4e50:	67da      	str	r2, [r3, #124]	; 0x7c
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	229a      	movs	r2, #154	; 0x9a
    4e56:	2100      	movs	r1, #0
    4e58:	5499      	strb	r1, [r3, r2]
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2200      	movs	r2, #0
    4e5e:	661a      	str	r2, [r3, #96]	; 0x60
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2280      	movs	r2, #128	; 0x80
    4e64:	2100      	movs	r1, #0
    4e66:	5099      	str	r1, [r3, r2]
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	229b      	movs	r2, #155	; 0x9b
    4e6c:	2100      	movs	r1, #0
    4e6e:	5499      	strb	r1, [r3, r2]
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2200      	movs	r2, #0
    4e74:	665a      	str	r2, [r3, #100]	; 0x64
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	2284      	movs	r2, #132	; 0x84
    4e7a:	2100      	movs	r1, #0
    4e7c:	5099      	str	r1, [r3, r2]
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	229c      	movs	r2, #156	; 0x9c
    4e82:	2100      	movs	r1, #0
    4e84:	5499      	strb	r1, [r3, r2]
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	2200      	movs	r2, #0
    4e8a:	669a      	str	r2, [r3, #104]	; 0x68
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2288      	movs	r2, #136	; 0x88
    4e90:	2100      	movs	r1, #0
    4e92:	5099      	str	r1, [r3, r2]
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	229d      	movs	r2, #157	; 0x9d
    4e98:	2100      	movs	r1, #0
    4e9a:	5499      	strb	r1, [r3, r2]
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	2200      	movs	r2, #0
    4ea0:	66da      	str	r2, [r3, #108]	; 0x6c
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	228c      	movs	r2, #140	; 0x8c
    4ea6:	2100      	movs	r1, #0
    4ea8:	5099      	str	r1, [r3, r2]
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	229e      	movs	r2, #158	; 0x9e
    4eae:	2100      	movs	r1, #0
    4eb0:	5499      	strb	r1, [r3, r2]
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	2200      	movs	r2, #0
    4eb6:	671a      	str	r2, [r3, #112]	; 0x70
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	2290      	movs	r2, #144	; 0x90
    4ebc:	2100      	movs	r1, #0
    4ebe:	5099      	str	r1, [r3, r2]
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	229f      	movs	r2, #159	; 0x9f
    4ec4:	2100      	movs	r1, #0
    4ec6:	5499      	strb	r1, [r3, r2]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2200      	movs	r2, #0
    4ecc:	675a      	str	r2, [r3, #116]	; 0x74
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	2294      	movs	r2, #148	; 0x94
    4ed2:	2100      	movs	r1, #0
    4ed4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	22a0      	movs	r2, #160	; 0xa0
    4eda:	2101      	movs	r1, #1
    4edc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	22a1      	movs	r2, #161	; 0xa1
    4ee2:	2100      	movs	r1, #0
    4ee4:	5499      	strb	r1, [r3, r2]
}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	46bd      	mov	sp, r7
    4eea:	b005      	add	sp, #20
    4eec:	bd90      	pop	{r4, r7, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00004bed 	.word	0x00004bed
    4ef4:	0001b804 	.word	0x0001b804

00004ef8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b086      	sub	sp, #24
    4efc:	af00      	add	r7, sp, #0
    4efe:	60b9      	str	r1, [r7, #8]
    4f00:	607a      	str	r2, [r7, #4]
    4f02:	230f      	movs	r3, #15
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	1c02      	adds	r2, r0, #0
    4f08:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    4f0a:	2300      	movs	r3, #0
    4f0c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f0e:	2300      	movs	r3, #0
    4f10:	613b      	str	r3, [r7, #16]
    4f12:	e01d      	b.n	4f50 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    4f14:	68ba      	ldr	r2, [r7, #8]
    4f16:	693b      	ldr	r3, [r7, #16]
    4f18:	18d3      	adds	r3, r2, r3
    4f1a:	3310      	adds	r3, #16
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	2b01      	cmp	r3, #1
    4f20:	d113      	bne.n	4f4a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    4f22:	230f      	movs	r3, #15
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	4a1b      	ldr	r2, [pc, #108]	; (4f98 <_tcc_build_ctrla+0xa0>)
    4f2a:	5cd3      	ldrb	r3, [r2, r3]
    4f2c:	001a      	movs	r2, r3
    4f2e:	693b      	ldr	r3, [r7, #16]
    4f30:	429a      	cmp	r2, r3
    4f32:	da01      	bge.n	4f38 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    4f34:	2317      	movs	r3, #23
    4f36:	e02a      	b.n	4f8e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	045a      	lsls	r2, r3, #17
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	409a      	lsls	r2, r3
    4f40:	0013      	movs	r3, r2
    4f42:	001a      	movs	r2, r3
    4f44:	697b      	ldr	r3, [r7, #20]
    4f46:	4313      	orrs	r3, r2
    4f48:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	3301      	adds	r3, #1
    4f4e:	613b      	str	r3, [r7, #16]
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2b03      	cmp	r3, #3
    4f54:	ddde      	ble.n	4f14 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    4f56:	68bb      	ldr	r3, [r7, #8]
    4f58:	22a1      	movs	r2, #161	; 0xa1
    4f5a:	5c9b      	ldrb	r3, [r3, r2]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d004      	beq.n	4f6a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2280      	movs	r2, #128	; 0x80
    4f64:	0112      	lsls	r2, r2, #4
    4f66:	4313      	orrs	r3, r2
    4f68:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	7b1b      	ldrb	r3, [r3, #12]
    4f6e:	031b      	lsls	r3, r3, #12
    4f70:	001a      	movs	r2, r3
    4f72:	697b      	ldr	r3, [r7, #20]
    4f74:	4313      	orrs	r3, r2
    4f76:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	7adb      	ldrb	r3, [r3, #11]
    4f7c:	021b      	lsls	r3, r3, #8
    4f7e:	001a      	movs	r2, r3
    4f80:	697b      	ldr	r3, [r7, #20]
    4f82:	4313      	orrs	r3, r2
    4f84:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	697a      	ldr	r2, [r7, #20]
    4f8a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    4f8c:	2300      	movs	r3, #0
}
    4f8e:	0018      	movs	r0, r3
    4f90:	46bd      	mov	sp, r7
    4f92:	b006      	add	sp, #24
    4f94:	bd80      	pop	{r7, pc}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	0001b810 	.word	0x0001b810

00004f9c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b086      	sub	sp, #24
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	60b9      	str	r1, [r7, #8]
    4fa4:	607a      	str	r2, [r7, #4]
    4fa6:	230f      	movs	r3, #15
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	1c02      	adds	r2, r0, #0
    4fac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    4fae:	2317      	movs	r3, #23
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	2200      	movs	r2, #0
    4fb4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    4fb6:	68bb      	ldr	r3, [r7, #8]
    4fb8:	7a1b      	ldrb	r3, [r3, #8]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d007      	beq.n	4fce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4fbe:	2317      	movs	r3, #23
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	2217      	movs	r2, #23
    4fc4:	18ba      	adds	r2, r7, r2
    4fc6:	7812      	ldrb	r2, [r2, #0]
    4fc8:	2104      	movs	r1, #4
    4fca:	430a      	orrs	r2, r1
    4fcc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4fce:	68bb      	ldr	r3, [r7, #8]
    4fd0:	7a5b      	ldrb	r3, [r3, #9]
    4fd2:	2b01      	cmp	r3, #1
    4fd4:	d107      	bne.n	4fe6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    4fd6:	2317      	movs	r3, #23
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	2217      	movs	r2, #23
    4fdc:	18ba      	adds	r2, r7, r2
    4fde:	7812      	ldrb	r2, [r2, #0]
    4fe0:	2101      	movs	r1, #1
    4fe2:	430a      	orrs	r2, r1
    4fe4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	2217      	movs	r2, #23
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	7812      	ldrb	r2, [r2, #0]
    4fee:	701a      	strb	r2, [r3, #0]
}
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	46bd      	mov	sp, r7
    4ff4:	b006      	add	sp, #24
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b088      	sub	sp, #32
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	60b9      	str	r1, [r7, #8]
    5000:	607a      	str	r2, [r7, #4]
    5002:	230f      	movs	r3, #15
    5004:	18fb      	adds	r3, r7, r3
    5006:	1c02      	adds	r2, r0, #0
    5008:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    500a:	230f      	movs	r3, #15
    500c:	18fb      	adds	r3, r7, r3
    500e:	781a      	ldrb	r2, [r3, #0]
    5010:	231b      	movs	r3, #27
    5012:	18fb      	adds	r3, r7, r3
    5014:	493e      	ldr	r1, [pc, #248]	; (5110 <_tcc_build_faults+0x118>)
    5016:	5c8a      	ldrb	r2, [r1, r2]
    5018:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    501a:	2300      	movs	r3, #0
    501c:	61fb      	str	r3, [r7, #28]
    501e:	e06e      	b.n	50fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    5020:	69fa      	ldr	r2, [r7, #28]
    5022:	0013      	movs	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	189b      	adds	r3, r3, r2
    5028:	005b      	lsls	r3, r3, #1
    502a:	3328      	adds	r3, #40	; 0x28
    502c:	68ba      	ldr	r2, [r7, #8]
    502e:	18d3      	adds	r3, r2, r3
    5030:	3304      	adds	r3, #4
    5032:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	7a5b      	ldrb	r3, [r3, #9]
    5038:	221b      	movs	r2, #27
    503a:	18ba      	adds	r2, r7, r2
    503c:	7812      	ldrb	r2, [r2, #0]
    503e:	429a      	cmp	r2, r3
    5040:	d801      	bhi.n	5046 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    5042:	2317      	movs	r3, #23
    5044:	e05f      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    5046:	697b      	ldr	r3, [r7, #20]
    5048:	781b      	ldrb	r3, [r3, #0]
    504a:	2b0f      	cmp	r3, #15
    504c:	d901      	bls.n	5052 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    504e:	2317      	movs	r3, #23
    5050:	e059      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5052:	697b      	ldr	r3, [r7, #20]
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	061b      	lsls	r3, r3, #24
    5058:	001a      	movs	r2, r3
    505a:	23f0      	movs	r3, #240	; 0xf0
    505c:	051b      	lsls	r3, r3, #20
    505e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5060:	697b      	ldr	r3, [r7, #20]
    5062:	785b      	ldrb	r3, [r3, #1]
    5064:	041b      	lsls	r3, r3, #16
    5066:	0019      	movs	r1, r3
    5068:	23ff      	movs	r3, #255	; 0xff
    506a:	041b      	lsls	r3, r3, #16
    506c:	400b      	ands	r3, r1
    506e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	2b00      	cmp	r3, #0
    5076:	d001      	beq.n	507c <_tcc_build_faults+0x84>
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	e000      	b.n	507e <_tcc_build_faults+0x86>
    507c:	2300      	movs	r3, #0
    507e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5080:	697b      	ldr	r3, [r7, #20]
    5082:	78db      	ldrb	r3, [r3, #3]
    5084:	2b00      	cmp	r3, #0
    5086:	d001      	beq.n	508c <_tcc_build_faults+0x94>
    5088:	2308      	movs	r3, #8
    508a:	e000      	b.n	508e <_tcc_build_faults+0x96>
    508c:	2300      	movs	r3, #0
    508e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	791b      	ldrb	r3, [r3, #4]
    5094:	2b00      	cmp	r3, #0
    5096:	d001      	beq.n	509c <_tcc_build_faults+0xa4>
    5098:	2310      	movs	r3, #16
    509a:	e000      	b.n	509e <_tcc_build_faults+0xa6>
    509c:	2300      	movs	r3, #0
    509e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    50a0:	697b      	ldr	r3, [r7, #20]
    50a2:	795b      	ldrb	r3, [r3, #5]
    50a4:	0019      	movs	r1, r3
    50a6:	2303      	movs	r3, #3
    50a8:	400b      	ands	r3, r1
    50aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    50ac:	697b      	ldr	r3, [r7, #20]
    50ae:	799b      	ldrb	r3, [r3, #6]
    50b0:	015b      	lsls	r3, r3, #5
    50b2:	0019      	movs	r1, r3
    50b4:	2360      	movs	r3, #96	; 0x60
    50b6:	400b      	ands	r3, r1
    50b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    50ba:	697b      	ldr	r3, [r7, #20]
    50bc:	79db      	ldrb	r3, [r3, #7]
    50be:	021b      	lsls	r3, r3, #8
    50c0:	0019      	movs	r1, r3
    50c2:	23c0      	movs	r3, #192	; 0xc0
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	400b      	ands	r3, r1
    50c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    50ca:	697b      	ldr	r3, [r7, #20]
    50cc:	7a1b      	ldrb	r3, [r3, #8]
    50ce:	031b      	lsls	r3, r3, #12
    50d0:	0019      	movs	r1, r3
    50d2:	23e0      	movs	r3, #224	; 0xe0
    50d4:	01db      	lsls	r3, r3, #7
    50d6:	400b      	ands	r3, r1
    50d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    50da:	697b      	ldr	r3, [r7, #20]
    50dc:	7a5b      	ldrb	r3, [r3, #9]
    50de:	029b      	lsls	r3, r3, #10
    50e0:	0019      	movs	r1, r3
    50e2:	23c0      	movs	r3, #192	; 0xc0
    50e4:	011b      	lsls	r3, r3, #4
    50e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    50e8:	4313      	orrs	r3, r2
    50ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    50ec:	69fb      	ldr	r3, [r7, #28]
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	693a      	ldr	r2, [r7, #16]
    50f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    50f8:	69fb      	ldr	r3, [r7, #28]
    50fa:	3301      	adds	r3, #1
    50fc:	61fb      	str	r3, [r7, #28]
    50fe:	69fb      	ldr	r3, [r7, #28]
    5100:	2b01      	cmp	r3, #1
    5102:	dd8d      	ble.n	5020 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    5104:	2300      	movs	r3, #0
}
    5106:	0018      	movs	r0, r3
    5108:	46bd      	mov	sp, r7
    510a:	b008      	add	sp, #32
    510c:	bd80      	pop	{r7, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	0001b810 	.word	0x0001b810

00005114 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    5114:	b580      	push	{r7, lr}
    5116:	b088      	sub	sp, #32
    5118:	af00      	add	r7, sp, #0
    511a:	60b9      	str	r1, [r7, #8]
    511c:	607a      	str	r2, [r7, #4]
    511e:	230f      	movs	r3, #15
    5120:	18fb      	adds	r3, r7, r3
    5122:	1c02      	adds	r2, r0, #0
    5124:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5126:	230f      	movs	r3, #15
    5128:	18fb      	adds	r3, r7, r3
    512a:	781a      	ldrb	r2, [r3, #0]
    512c:	2317      	movs	r3, #23
    512e:	18fb      	adds	r3, r7, r3
    5130:	492d      	ldr	r1, [pc, #180]	; (51e8 <_tcc_build_drvctrl+0xd4>)
    5132:	5c8a      	ldrb	r2, [r1, r2]
    5134:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    5136:	2300      	movs	r3, #0
    5138:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    513a:	2300      	movs	r3, #0
    513c:	61fb      	str	r3, [r7, #28]
    513e:	e048      	b.n	51d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    5140:	68ba      	ldr	r2, [r7, #8]
    5142:	2150      	movs	r1, #80	; 0x50
    5144:	69fb      	ldr	r3, [r7, #28]
    5146:	18d3      	adds	r3, r2, r3
    5148:	185b      	adds	r3, r3, r1
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d010      	beq.n	5172 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    5150:	2317      	movs	r3, #23
    5152:	18fb      	adds	r3, r7, r3
    5154:	781a      	ldrb	r2, [r3, #0]
    5156:	69fb      	ldr	r3, [r7, #28]
    5158:	429a      	cmp	r2, r3
    515a:	d801      	bhi.n	5160 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    515c:	2317      	movs	r3, #23
    515e:	e03f      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	025a      	lsls	r2, r3, #9
    5164:	69fb      	ldr	r3, [r7, #28]
    5166:	409a      	lsls	r2, r3
    5168:	0013      	movs	r3, r2
    516a:	001a      	movs	r2, r3
    516c:	69bb      	ldr	r3, [r7, #24]
    516e:	4313      	orrs	r3, r2
    5170:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5172:	68ba      	ldr	r2, [r7, #8]
    5174:	69fb      	ldr	r3, [r7, #28]
    5176:	331c      	adds	r3, #28
    5178:	005b      	lsls	r3, r3, #1
    517a:	18d3      	adds	r3, r2, r3
    517c:	3309      	adds	r3, #9
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d023      	beq.n	51cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5184:	2317      	movs	r3, #23
    5186:	18fb      	adds	r3, r7, r3
    5188:	781a      	ldrb	r2, [r3, #0]
    518a:	69fb      	ldr	r3, [r7, #28]
    518c:	429a      	cmp	r2, r3
    518e:	d801      	bhi.n	5194 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    5190:	2317      	movs	r3, #23
    5192:	e025      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5194:	68ba      	ldr	r2, [r7, #8]
    5196:	69fb      	ldr	r3, [r7, #28]
    5198:	331c      	adds	r3, #28
    519a:	005b      	lsls	r3, r3, #1
    519c:	18d3      	adds	r3, r2, r3
    519e:	3309      	adds	r3, #9
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	2b02      	cmp	r3, #2
    51a4:	d10a      	bne.n	51bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    51a6:	2302      	movs	r3, #2
    51a8:	33ff      	adds	r3, #255	; 0xff
    51aa:	001a      	movs	r2, r3
    51ac:	69fb      	ldr	r3, [r7, #28]
    51ae:	409a      	lsls	r2, r3
    51b0:	0013      	movs	r3, r2
    51b2:	001a      	movs	r2, r3
    51b4:	69bb      	ldr	r3, [r7, #24]
    51b6:	4313      	orrs	r3, r2
    51b8:	61bb      	str	r3, [r7, #24]
    51ba:	e007      	b.n	51cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    51bc:	2201      	movs	r2, #1
    51be:	69fb      	ldr	r3, [r7, #28]
    51c0:	409a      	lsls	r2, r3
    51c2:	0013      	movs	r3, r2
    51c4:	001a      	movs	r2, r3
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	4313      	orrs	r3, r2
    51ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    51cc:	69fb      	ldr	r3, [r7, #28]
    51ce:	3301      	adds	r3, #1
    51d0:	61fb      	str	r3, [r7, #28]
    51d2:	69fb      	ldr	r3, [r7, #28]
    51d4:	2b07      	cmp	r3, #7
    51d6:	d9b3      	bls.n	5140 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	69ba      	ldr	r2, [r7, #24]
    51dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    51de:	2300      	movs	r3, #0
}
    51e0:	0018      	movs	r0, r3
    51e2:	46bd      	mov	sp, r7
    51e4:	b008      	add	sp, #32
    51e6:	bd80      	pop	{r7, pc}
    51e8:	0001b814 	.word	0x0001b814

000051ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    51ec:	b580      	push	{r7, lr}
    51ee:	b088      	sub	sp, #32
    51f0:	af00      	add	r7, sp, #0
    51f2:	60b9      	str	r1, [r7, #8]
    51f4:	607a      	str	r2, [r7, #4]
    51f6:	230f      	movs	r3, #15
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	1c02      	adds	r2, r0, #0
    51fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    51fe:	230f      	movs	r3, #15
    5200:	18fb      	adds	r3, r7, r3
    5202:	781a      	ldrb	r2, [r3, #0]
    5204:	2317      	movs	r3, #23
    5206:	18fb      	adds	r3, r7, r3
    5208:	491d      	ldr	r1, [pc, #116]	; (5280 <_tcc_build_waves+0x94>)
    520a:	5c8a      	ldrb	r2, [r1, r2]
    520c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	3310      	adds	r3, #16
    5212:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5214:	693b      	ldr	r3, [r7, #16]
    5216:	7a5b      	ldrb	r3, [r3, #9]
    5218:	011b      	lsls	r3, r3, #4
    521a:	001a      	movs	r2, r3
    521c:	2330      	movs	r3, #48	; 0x30
    521e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5220:	693b      	ldr	r3, [r7, #16]
    5222:	7a1b      	ldrb	r3, [r3, #8]
    5224:	0019      	movs	r1, r3
    5226:	2307      	movs	r3, #7
    5228:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    522a:	4313      	orrs	r3, r2
    522c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    522e:	2300      	movs	r3, #0
    5230:	61fb      	str	r3, [r7, #28]
    5232:	e01a      	b.n	526a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    5234:	693a      	ldr	r2, [r7, #16]
    5236:	69fb      	ldr	r3, [r7, #28]
    5238:	18d3      	adds	r3, r2, r3
    523a:	3304      	adds	r3, #4
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d010      	beq.n	5264 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    5242:	2317      	movs	r3, #23
    5244:	18fb      	adds	r3, r7, r3
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	69fb      	ldr	r3, [r7, #28]
    524a:	429a      	cmp	r2, r3
    524c:	dc01      	bgt.n	5252 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    524e:	2317      	movs	r3, #23
    5250:	e012      	b.n	5278 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    5252:	2380      	movs	r3, #128	; 0x80
    5254:	025a      	lsls	r2, r3, #9
    5256:	69fb      	ldr	r3, [r7, #28]
    5258:	409a      	lsls	r2, r3
    525a:	0013      	movs	r3, r2
    525c:	001a      	movs	r2, r3
    525e:	69bb      	ldr	r3, [r7, #24]
    5260:	4313      	orrs	r3, r2
    5262:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5264:	69fb      	ldr	r3, [r7, #28]
    5266:	3301      	adds	r3, #1
    5268:	61fb      	str	r3, [r7, #28]
    526a:	69fb      	ldr	r3, [r7, #28]
    526c:	2b03      	cmp	r3, #3
    526e:	dde1      	ble.n	5234 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	69ba      	ldr	r2, [r7, #24]
    5274:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    5276:	2300      	movs	r3, #0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b008      	add	sp, #32
    527e:	bd80      	pop	{r7, pc}
    5280:	0001b810 	.word	0x0001b810

00005284 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5284:	b590      	push	{r4, r7, lr}
    5286:	b091      	sub	sp, #68	; 0x44
    5288:	af00      	add	r7, sp, #0
    528a:	60f8      	str	r0, [r7, #12]
    528c:	60b9      	str	r1, [r7, #8]
    528e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5290:	233b      	movs	r3, #59	; 0x3b
    5292:	18fc      	adds	r4, r7, r3
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	0018      	movs	r0, r3
    5298:	4bc4      	ldr	r3, [pc, #784]	; (55ac <tcc_init+0x328>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    52a0:	233b      	movs	r3, #59	; 0x3b
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	781a      	ldrb	r2, [r3, #0]
    52a6:	4bc2      	ldr	r3, [pc, #776]	; (55b0 <tcc_init+0x32c>)
    52a8:	0092      	lsls	r2, r2, #2
    52aa:	58d3      	ldr	r3, [r2, r3]
    52ac:	0019      	movs	r1, r3
    52ae:	2002      	movs	r0, #2
    52b0:	4bc0      	ldr	r3, [pc, #768]	; (55b4 <tcc_init+0x330>)
    52b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52b4:	68bb      	ldr	r3, [r7, #8]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2202      	movs	r2, #2
    52ba:	4013      	ands	r3, r2
    52bc:	d001      	beq.n	52c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    52be:	231c      	movs	r3, #28
    52c0:	e1be      	b.n	5640 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2201      	movs	r2, #1
    52c8:	4013      	ands	r3, r2
    52ca:	d001      	beq.n	52d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    52cc:	231c      	movs	r3, #28
    52ce:	e1b7      	b.n	5640 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    52d0:	233b      	movs	r3, #59	; 0x3b
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	4bb8      	ldr	r3, [pc, #736]	; (55b8 <tcc_init+0x334>)
    52d8:	0092      	lsls	r2, r2, #2
    52da:	58d3      	ldr	r3, [r2, r3]
    52dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52e4:	429a      	cmp	r2, r3
    52e6:	d804      	bhi.n	52f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ee:	429a      	cmp	r2, r3
    52f0:	d901      	bls.n	52f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    52f2:	2317      	movs	r3, #23
    52f4:	e1a4      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    52f6:	2300      	movs	r3, #0
    52f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    52fa:	e00e      	b.n	531a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    52fc:	687a      	ldr	r2, [r7, #4]
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	3306      	adds	r3, #6
    5302:	009b      	lsls	r3, r3, #2
    5304:	18d3      	adds	r3, r2, r3
    5306:	3304      	adds	r3, #4
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    530c:	429a      	cmp	r2, r3
    530e:	d901      	bls.n	5314 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    5310:	2317      	movs	r3, #23
    5312:	e195      	b.n	5640 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5316:	3301      	adds	r3, #1
    5318:	63fb      	str	r3, [r7, #60]	; 0x3c
    531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    531c:	2b03      	cmp	r3, #3
    531e:	dded      	ble.n	52fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5320:	2300      	movs	r3, #0
    5322:	63fb      	str	r3, [r7, #60]	; 0x3c
    5324:	e019      	b.n	535a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	2198      	movs	r1, #152	; 0x98
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	18d3      	adds	r3, r2, r3
    532e:	185b      	adds	r3, r3, r1
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2201      	movs	r2, #1
    5334:	4053      	eors	r3, r2
    5336:	b2db      	uxtb	r3, r3
    5338:	2b00      	cmp	r3, #0
    533a:	d10a      	bne.n	5352 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    533c:	233b      	movs	r3, #59	; 0x3b
    533e:	18fb      	adds	r3, r7, r3
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	4a9e      	ldr	r2, [pc, #632]	; (55bc <tcc_init+0x338>)
    5344:	5cd3      	ldrb	r3, [r2, r3]
    5346:	001a      	movs	r2, r3
    5348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    534a:	429a      	cmp	r2, r3
    534c:	dc02      	bgt.n	5354 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    534e:	2317      	movs	r3, #23
    5350:	e176      	b.n	5640 <tcc_init+0x3bc>
			continue;
    5352:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5356:	3301      	adds	r3, #1
    5358:	63fb      	str	r3, [r7, #60]	; 0x3c
    535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    535c:	2b07      	cmp	r3, #7
    535e:	dde2      	ble.n	5326 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    5360:	2300      	movs	r3, #0
    5362:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    5364:	2333      	movs	r3, #51	; 0x33
    5366:	18fc      	adds	r4, r7, r3
    5368:	232c      	movs	r3, #44	; 0x2c
    536a:	18fa      	adds	r2, r7, r3
    536c:	6879      	ldr	r1, [r7, #4]
    536e:	233b      	movs	r3, #59	; 0x3b
    5370:	18fb      	adds	r3, r7, r3
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	0018      	movs	r0, r3
    5376:	4b92      	ldr	r3, [pc, #584]	; (55c0 <tcc_init+0x33c>)
    5378:	4798      	blx	r3
    537a:	0003      	movs	r3, r0
    537c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    537e:	2333      	movs	r3, #51	; 0x33
    5380:	18fb      	adds	r3, r7, r3
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	d003      	beq.n	5390 <tcc_init+0x10c>
		return status;
    5388:	2333      	movs	r3, #51	; 0x33
    538a:	18fb      	adds	r3, r7, r3
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	e157      	b.n	5640 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    5390:	232b      	movs	r3, #43	; 0x2b
    5392:	18fa      	adds	r2, r7, r3
    5394:	6879      	ldr	r1, [r7, #4]
    5396:	233b      	movs	r3, #59	; 0x3b
    5398:	18fb      	adds	r3, r7, r3
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	0018      	movs	r0, r3
    539e:	4b89      	ldr	r3, [pc, #548]	; (55c4 <tcc_init+0x340>)
    53a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    53a2:	2333      	movs	r3, #51	; 0x33
    53a4:	18fc      	adds	r4, r7, r3
    53a6:	2320      	movs	r3, #32
    53a8:	18fa      	adds	r2, r7, r3
    53aa:	6879      	ldr	r1, [r7, #4]
    53ac:	233b      	movs	r3, #59	; 0x3b
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	0018      	movs	r0, r3
    53b4:	4b84      	ldr	r3, [pc, #528]	; (55c8 <tcc_init+0x344>)
    53b6:	4798      	blx	r3
    53b8:	0003      	movs	r3, r0
    53ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53bc:	2333      	movs	r3, #51	; 0x33
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <tcc_init+0x14a>
		return status;
    53c6:	2333      	movs	r3, #51	; 0x33
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	e138      	b.n	5640 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    53ce:	2300      	movs	r3, #0
    53d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    53d2:	2333      	movs	r3, #51	; 0x33
    53d4:	18fc      	adds	r4, r7, r3
    53d6:	231c      	movs	r3, #28
    53d8:	18fa      	adds	r2, r7, r3
    53da:	6879      	ldr	r1, [r7, #4]
    53dc:	233b      	movs	r3, #59	; 0x3b
    53de:	18fb      	adds	r3, r7, r3
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	0018      	movs	r0, r3
    53e4:	4b79      	ldr	r3, [pc, #484]	; (55cc <tcc_init+0x348>)
    53e6:	4798      	blx	r3
    53e8:	0003      	movs	r3, r0
    53ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53ec:	2333      	movs	r3, #51	; 0x33
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d003      	beq.n	53fe <tcc_init+0x17a>
		return status;
    53f6:	2333      	movs	r3, #51	; 0x33
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	e120      	b.n	5640 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    53fe:	2333      	movs	r3, #51	; 0x33
    5400:	18fc      	adds	r4, r7, r3
    5402:	2318      	movs	r3, #24
    5404:	18fa      	adds	r2, r7, r3
    5406:	6879      	ldr	r1, [r7, #4]
    5408:	233b      	movs	r3, #59	; 0x3b
    540a:	18fb      	adds	r3, r7, r3
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	0018      	movs	r0, r3
    5410:	4b6f      	ldr	r3, [pc, #444]	; (55d0 <tcc_init+0x34c>)
    5412:	4798      	blx	r3
    5414:	0003      	movs	r3, r0
    5416:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    5418:	2333      	movs	r3, #51	; 0x33
    541a:	18fb      	adds	r3, r7, r3
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d003      	beq.n	542a <tcc_init+0x1a6>
		return status;
    5422:	2333      	movs	r3, #51	; 0x33
    5424:	18fb      	adds	r3, r7, r3
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	e10a      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    542a:	2300      	movs	r3, #0
    542c:	63fb      	str	r3, [r7, #60]	; 0x3c
    542e:	e009      	b.n	5444 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    5430:	68fa      	ldr	r2, [r7, #12]
    5432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5434:	009b      	lsls	r3, r3, #2
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
    543a:	2200      	movs	r2, #0
    543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5440:	3301      	adds	r3, #1
    5442:	63fb      	str	r3, [r7, #60]	; 0x3c
    5444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5446:	2b0b      	cmp	r3, #11
    5448:	ddf2      	ble.n	5430 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    544a:	68fb      	ldr	r3, [r7, #12]
    544c:	2200      	movs	r2, #0
    544e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	2200      	movs	r2, #0
    5454:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5456:	233b      	movs	r3, #59	; 0x3b
    5458:	18fb      	adds	r3, r7, r3
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	4b5d      	ldr	r3, [pc, #372]	; (55d4 <tcc_init+0x350>)
    545e:	0092      	lsls	r2, r2, #2
    5460:	68f9      	ldr	r1, [r7, #12]
    5462:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	68ba      	ldr	r2, [r7, #8]
    5468:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	22a0      	movs	r2, #160	; 0xa0
    546e:	5c99      	ldrb	r1, [r3, r2]
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	223c      	movs	r2, #60	; 0x3c
    5474:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5476:	2314      	movs	r3, #20
    5478:	18fb      	adds	r3, r7, r3
    547a:	0018      	movs	r0, r3
    547c:	4b56      	ldr	r3, [pc, #344]	; (55d8 <tcc_init+0x354>)
    547e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	7a9a      	ldrb	r2, [r3, #10]
    5484:	2314      	movs	r3, #20
    5486:	18fb      	adds	r3, r7, r3
    5488:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    548a:	233b      	movs	r3, #59	; 0x3b
    548c:	18fb      	adds	r3, r7, r3
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	4a52      	ldr	r2, [pc, #328]	; (55dc <tcc_init+0x358>)
    5492:	5cd3      	ldrb	r3, [r2, r3]
    5494:	2214      	movs	r2, #20
    5496:	18ba      	adds	r2, r7, r2
    5498:	0011      	movs	r1, r2
    549a:	0018      	movs	r0, r3
    549c:	4b50      	ldr	r3, [pc, #320]	; (55e0 <tcc_init+0x35c>)
    549e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    54a0:	233b      	movs	r3, #59	; 0x3b
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	4a4d      	ldr	r2, [pc, #308]	; (55dc <tcc_init+0x358>)
    54a8:	5cd3      	ldrb	r3, [r2, r3]
    54aa:	0018      	movs	r0, r3
    54ac:	4b4d      	ldr	r3, [pc, #308]	; (55e4 <tcc_init+0x360>)
    54ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    54b0:	2300      	movs	r3, #0
    54b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    54b4:	e02d      	b.n	5512 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    54b6:	687a      	ldr	r2, [r7, #4]
    54b8:	2198      	movs	r1, #152	; 0x98
    54ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54bc:	18d3      	adds	r3, r2, r3
    54be:	185b      	adds	r3, r3, r1
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	2201      	movs	r2, #1
    54c4:	4053      	eors	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	2b00      	cmp	r3, #0
    54ca:	d11e      	bne.n	550a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    54cc:	2310      	movs	r3, #16
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	0018      	movs	r0, r3
    54d2:	4b45      	ldr	r3, [pc, #276]	; (55e8 <tcc_init+0x364>)
    54d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54da:	321e      	adds	r2, #30
    54dc:	0092      	lsls	r2, r2, #2
    54de:	58d3      	ldr	r3, [r2, r3]
    54e0:	b2da      	uxtb	r2, r3
    54e2:	2310      	movs	r3, #16
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54e8:	2310      	movs	r3, #16
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	2201      	movs	r2, #1
    54ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f4:	3216      	adds	r2, #22
    54f6:	0092      	lsls	r2, r2, #2
    54f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2210      	movs	r2, #16
    54fe:	18ba      	adds	r2, r7, r2
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b39      	ldr	r3, [pc, #228]	; (55ec <tcc_init+0x368>)
    5506:	4798      	blx	r3
    5508:	e000      	b.n	550c <tcc_init+0x288>
			continue;
    550a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    550e:	3301      	adds	r3, #1
    5510:	63fb      	str	r3, [r7, #60]	; 0x3c
    5512:	233b      	movs	r3, #59	; 0x3b
    5514:	18fb      	adds	r3, r7, r3
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	4a28      	ldr	r2, [pc, #160]	; (55bc <tcc_init+0x338>)
    551a:	5cd3      	ldrb	r3, [r2, r3]
    551c:	001a      	movs	r2, r3
    551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5520:	429a      	cmp	r2, r3
    5522:	dcc8      	bgt.n	54b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    5524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	68bb      	ldr	r3, [r7, #8]
    552e:	689b      	ldr	r3, [r3, #8]
    5530:	2204      	movs	r2, #4
    5532:	4013      	ands	r3, r2
    5534:	d1fa      	bne.n	552c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    5536:	68bb      	ldr	r3, [r7, #8]
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    553c:	46c0      	nop			; (mov r8, r8)
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	689b      	ldr	r3, [r3, #8]
    5542:	2204      	movs	r2, #4
    5544:	4013      	ands	r3, r2
    5546:	d1fa      	bne.n	553e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    5548:	232b      	movs	r3, #43	; 0x2b
    554a:	18fb      	adds	r3, r7, r3
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    5552:	2320      	movs	r3, #32
    5554:	18fb      	adds	r3, r7, r3
    5556:	681a      	ldr	r2, [r3, #0]
    5558:	68bb      	ldr	r3, [r7, #8]
    555a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    555c:	2320      	movs	r3, #32
    555e:	18fb      	adds	r3, r7, r3
    5560:	685a      	ldr	r2, [r3, #4]
    5562:	68bb      	ldr	r3, [r7, #8]
    5564:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    5566:	69fa      	ldr	r2, [r7, #28]
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    556c:	46c0      	nop			; (mov r8, r8)
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	689b      	ldr	r3, [r3, #8]
    5572:	4a1f      	ldr	r2, [pc, #124]	; (55f0 <tcc_init+0x36c>)
    5574:	4013      	ands	r3, r2
    5576:	d1fa      	bne.n	556e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    5578:	69ba      	ldr	r2, [r7, #24]
    557a:	68bb      	ldr	r3, [r7, #8]
    557c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	68bb      	ldr	r3, [r7, #8]
    5582:	689b      	ldr	r3, [r3, #8]
    5584:	2210      	movs	r2, #16
    5586:	4013      	ands	r3, r2
    5588:	d1fa      	bne.n	5580 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	689b      	ldr	r3, [r3, #8]
    5598:	4a16      	ldr	r2, [pc, #88]	; (55f4 <tcc_init+0x370>)
    559a:	4013      	ands	r3, r2
    559c:	d1fa      	bne.n	5594 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685a      	ldr	r2, [r3, #4]
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    55a6:	2300      	movs	r3, #0
    55a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    55aa:	e03f      	b.n	562c <tcc_init+0x3a8>
    55ac:	00004bed 	.word	0x00004bed
    55b0:	0001b7f8 	.word	0x0001b7f8
    55b4:	00004b69 	.word	0x00004b69
    55b8:	0001b804 	.word	0x0001b804
    55bc:	0001b814 	.word	0x0001b814
    55c0:	00004ef9 	.word	0x00004ef9
    55c4:	00004f9d 	.word	0x00004f9d
    55c8:	00004ff9 	.word	0x00004ff9
    55cc:	00005115 	.word	0x00005115
    55d0:	000051ed 	.word	0x000051ed
    55d4:	200004f0 	.word	0x200004f0
    55d8:	00004b51 	.word	0x00004b51
    55dc:	0001b7f4 	.word	0x0001b7f4
    55e0:	000085ed 	.word	0x000085ed
    55e4:	00008631 	.word	0x00008631
    55e8:	00004bc5 	.word	0x00004bc5
    55ec:	000088d9 	.word	0x000088d9
    55f0:	00020040 	.word	0x00020040
    55f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    55f8:	46c0      	nop			; (mov r8, r8)
    55fa:	68bb      	ldr	r3, [r7, #8]
    55fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    55fe:	4912      	ldr	r1, [pc, #72]	; (5648 <tcc_init+0x3c4>)
    5600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5602:	4091      	lsls	r1, r2
    5604:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    5606:	4013      	ands	r3, r2
    5608:	d1f7      	bne.n	55fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    560e:	3306      	adds	r3, #6
    5610:	009b      	lsls	r3, r3, #2
    5612:	18d3      	adds	r3, r2, r3
    5614:	3304      	adds	r3, #4
    5616:	681a      	ldr	r2, [r3, #0]
    5618:	68b9      	ldr	r1, [r7, #8]
    561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    561c:	3310      	adds	r3, #16
    561e:	009b      	lsls	r3, r3, #2
    5620:	18cb      	adds	r3, r1, r3
    5622:	3304      	adds	r3, #4
    5624:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5628:	3301      	adds	r3, #1
    562a:	63fb      	str	r3, [r7, #60]	; 0x3c
    562c:	233b      	movs	r3, #59	; 0x3b
    562e:	18fb      	adds	r3, r7, r3
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	4a06      	ldr	r2, [pc, #24]	; (564c <tcc_init+0x3c8>)
    5634:	5cd3      	ldrb	r3, [r2, r3]
    5636:	001a      	movs	r2, r3
    5638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    563a:	429a      	cmp	r2, r3
    563c:	dcdc      	bgt.n	55f8 <tcc_init+0x374>
	}

	return STATUS_OK;
    563e:	2300      	movs	r3, #0
}
    5640:	0018      	movs	r0, r3
    5642:	46bd      	mov	sp, r7
    5644:	b011      	add	sp, #68	; 0x44
    5646:	bd90      	pop	{r4, r7, pc}
    5648:	00080100 	.word	0x00080100
    564c:	0001b810 	.word	0x0001b810

00005650 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    5650:	b590      	push	{r4, r7, lr}
    5652:	b089      	sub	sp, #36	; 0x24
    5654:	af00      	add	r7, sp, #0
    5656:	60f8      	str	r0, [r7, #12]
    5658:	0008      	movs	r0, r1
    565a:	607a      	str	r2, [r7, #4]
    565c:	0019      	movs	r1, r3
    565e:	230b      	movs	r3, #11
    5660:	18fb      	adds	r3, r7, r3
    5662:	1c02      	adds	r2, r0, #0
    5664:	701a      	strb	r2, [r3, #0]
    5666:	230a      	movs	r3, #10
    5668:	18fb      	adds	r3, r7, r3
    566a:	1c0a      	adds	r2, r1, #0
    566c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    5674:	231b      	movs	r3, #27
    5676:	18fc      	adds	r4, r7, r3
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	0018      	movs	r0, r3
    567c:	4b28      	ldr	r3, [pc, #160]	; (5720 <_tcc_set_compare_value+0xd0>)
    567e:	4798      	blx	r3
    5680:	0003      	movs	r3, r0
    5682:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    5684:	231b      	movs	r3, #27
    5686:	18fb      	adds	r3, r7, r3
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	4a26      	ldr	r2, [pc, #152]	; (5724 <_tcc_set_compare_value+0xd4>)
    568c:	5cd3      	ldrb	r3, [r2, r3]
    568e:	220b      	movs	r2, #11
    5690:	18ba      	adds	r2, r7, r2
    5692:	7812      	ldrb	r2, [r2, #0]
    5694:	429a      	cmp	r2, r3
    5696:	d301      	bcc.n	569c <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    5698:	2317      	movs	r3, #23
    569a:	e03d      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    569c:	231b      	movs	r3, #27
    569e:	18fb      	adds	r3, r7, r3
    56a0:	781a      	ldrb	r2, [r3, #0]
    56a2:	4b21      	ldr	r3, [pc, #132]	; (5728 <_tcc_set_compare_value+0xd8>)
    56a4:	0092      	lsls	r2, r2, #2
    56a6:	58d3      	ldr	r3, [r2, r3]
    56a8:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	697b      	ldr	r3, [r7, #20]
    56ae:	429a      	cmp	r2, r3
    56b0:	d901      	bls.n	56b6 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    56b2:	2317      	movs	r3, #23
    56b4:	e030      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    56b6:	230a      	movs	r3, #10
    56b8:	18fb      	adds	r3, r7, r3
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d014      	beq.n	56ea <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    56c0:	46c0      	nop			; (mov r8, r8)
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    56c6:	220b      	movs	r2, #11
    56c8:	18ba      	adds	r2, r7, r2
    56ca:	7812      	ldrb	r2, [r2, #0]
    56cc:	2180      	movs	r1, #128	; 0x80
    56ce:	0309      	lsls	r1, r1, #12
    56d0:	4091      	lsls	r1, r2
    56d2:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
    56d4:	4013      	ands	r3, r2
    56d6:	d1f4      	bne.n	56c2 <_tcc_set_compare_value+0x72>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    56d8:	230b      	movs	r3, #11
    56da:	18fb      	adds	r3, r7, r3
    56dc:	781a      	ldrb	r2, [r3, #0]
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	321c      	adds	r2, #28
    56e2:	0092      	lsls	r2, r2, #2
    56e4:	6879      	ldr	r1, [r7, #4]
    56e6:	50d1      	str	r1, [r2, r3]
    56e8:	e015      	b.n	5716 <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	69fb      	ldr	r3, [r7, #28]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	220b      	movs	r2, #11
    56f2:	18ba      	adds	r2, r7, r2
    56f4:	7812      	ldrb	r2, [r2, #0]
    56f6:	2180      	movs	r1, #128	; 0x80
    56f8:	0049      	lsls	r1, r1, #1
    56fa:	4091      	lsls	r1, r2
    56fc:	000a      	movs	r2, r1
    56fe:	4013      	ands	r3, r2
    5700:	d1f4      	bne.n	56ec <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    5702:	230b      	movs	r3, #11
    5704:	18fb      	adds	r3, r7, r3
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	69fa      	ldr	r2, [r7, #28]
    570a:	3310      	adds	r3, #16
    570c:	009b      	lsls	r3, r3, #2
    570e:	18d3      	adds	r3, r2, r3
    5710:	3304      	adds	r3, #4
    5712:	687a      	ldr	r2, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    5716:	2300      	movs	r3, #0
}
    5718:	0018      	movs	r0, r3
    571a:	46bd      	mov	sp, r7
    571c:	b009      	add	sp, #36	; 0x24
    571e:	bd90      	pop	{r4, r7, pc}
    5720:	00004bed 	.word	0x00004bed
    5724:	0001b810 	.word	0x0001b810
    5728:	0001b804 	.word	0x0001b804

0000572c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    572c:	b590      	push	{r4, r7, lr}
    572e:	b085      	sub	sp, #20
    5730:	af00      	add	r7, sp, #0
    5732:	60f8      	str	r0, [r7, #12]
    5734:	607a      	str	r2, [r7, #4]
    5736:	230b      	movs	r3, #11
    5738:	18fb      	adds	r3, r7, r3
    573a:	1c0a      	adds	r2, r1, #0
    573c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	223c      	movs	r2, #60	; 0x3c
    5742:	5c9c      	ldrb	r4, [r3, r2]
    5744:	687a      	ldr	r2, [r7, #4]
    5746:	230b      	movs	r3, #11
    5748:	18fb      	adds	r3, r7, r3
    574a:	7819      	ldrb	r1, [r3, #0]
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	0023      	movs	r3, r4
    5750:	4c03      	ldr	r4, [pc, #12]	; (5760 <tcc_set_compare_value+0x34>)
    5752:	47a0      	blx	r4
    5754:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    5756:	0018      	movs	r0, r3
    5758:	46bd      	mov	sp, r7
    575a:	b005      	add	sp, #20
    575c:	bd90      	pop	{r4, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	00005651 	.word	0x00005651

00005764 <system_gclk_chan_get_config_defaults>:
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	2200      	movs	r2, #0
    5770:	701a      	strb	r2, [r3, #0]
}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	46bd      	mov	sp, r7
    5776:	b002      	add	sp, #8
    5778:	bd80      	pop	{r7, pc}
	...

0000577c <system_apb_clock_set_mask>:
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	0002      	movs	r2, r0
    5784:	6039      	str	r1, [r7, #0]
    5786:	1dfb      	adds	r3, r7, #7
    5788:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    578a:	1dfb      	adds	r3, r7, #7
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	2b01      	cmp	r3, #1
    5790:	d00a      	beq.n	57a8 <system_apb_clock_set_mask+0x2c>
    5792:	2b02      	cmp	r3, #2
    5794:	d00f      	beq.n	57b6 <system_apb_clock_set_mask+0x3a>
    5796:	2b00      	cmp	r3, #0
    5798:	d114      	bne.n	57c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579c:	4a0d      	ldr	r2, [pc, #52]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579e:	6991      	ldr	r1, [r2, #24]
    57a0:	683a      	ldr	r2, [r7, #0]
    57a2:	430a      	orrs	r2, r1
    57a4:	619a      	str	r2, [r3, #24]
			break;
    57a6:	e00f      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57aa:	4a0a      	ldr	r2, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ac:	69d1      	ldr	r1, [r2, #28]
    57ae:	683a      	ldr	r2, [r7, #0]
    57b0:	430a      	orrs	r2, r1
    57b2:	61da      	str	r2, [r3, #28]
			break;
    57b4:	e008      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    57b6:	4b07      	ldr	r3, [pc, #28]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57b8:	4a06      	ldr	r2, [pc, #24]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ba:	6a11      	ldr	r1, [r2, #32]
    57bc:	683a      	ldr	r2, [r7, #0]
    57be:	430a      	orrs	r2, r1
    57c0:	621a      	str	r2, [r3, #32]
			break;
    57c2:	e001      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    57c4:	2317      	movs	r3, #23
    57c6:	e000      	b.n	57ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    57c8:	2300      	movs	r3, #0
}
    57ca:	0018      	movs	r0, r3
    57cc:	46bd      	mov	sp, r7
    57ce:	b002      	add	sp, #8
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	40000400 	.word	0x40000400

000057d8 <system_pinmux_get_config_defaults>:
{
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2280      	movs	r2, #128	; 0x80
    57e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2200      	movs	r2, #0
    57ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	2201      	movs	r2, #1
    57f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	2200      	movs	r2, #0
    57f6:	70da      	strb	r2, [r3, #3]
}
    57f8:	46c0      	nop			; (mov r8, r8)
    57fa:	46bd      	mov	sp, r7
    57fc:	b002      	add	sp, #8
    57fe:	bd80      	pop	{r7, pc}

00005800 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5800:	b580      	push	{r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	7bdb      	ldrb	r3, [r3, #15]
    5812:	b2db      	uxtb	r3, r3
    5814:	001a      	movs	r2, r3
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	4013      	ands	r3, r2
    581a:	1e5a      	subs	r2, r3, #1
    581c:	4193      	sbcs	r3, r2
    581e:	b2db      	uxtb	r3, r3
#endif
}
    5820:	0018      	movs	r0, r3
    5822:	46bd      	mov	sp, r7
    5824:	b004      	add	sp, #16
    5826:	bd80      	pop	{r7, pc}

00005828 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5828:	b590      	push	{r4, r7, lr}
    582a:	b087      	sub	sp, #28
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5830:	2308      	movs	r3, #8
    5832:	18fb      	adds	r3, r7, r3
    5834:	4a0d      	ldr	r2, [pc, #52]	; (586c <_tc_get_inst_index+0x44>)
    5836:	ca13      	ldmia	r2!, {r0, r1, r4}
    5838:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    583a:	2300      	movs	r3, #0
    583c:	617b      	str	r3, [r7, #20]
    583e:	e00d      	b.n	585c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    5840:	2308      	movs	r3, #8
    5842:	18fb      	adds	r3, r7, r3
    5844:	697a      	ldr	r2, [r7, #20]
    5846:	0092      	lsls	r2, r2, #2
    5848:	58d2      	ldr	r2, [r2, r3]
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	429a      	cmp	r2, r3
    584e:	d102      	bne.n	5856 <_tc_get_inst_index+0x2e>
			return i;
    5850:	697b      	ldr	r3, [r7, #20]
    5852:	b2db      	uxtb	r3, r3
    5854:	e006      	b.n	5864 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5856:	697b      	ldr	r3, [r7, #20]
    5858:	3301      	adds	r3, #1
    585a:	617b      	str	r3, [r7, #20]
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2b02      	cmp	r3, #2
    5860:	d9ee      	bls.n	5840 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5862:	2300      	movs	r3, #0
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b007      	add	sp, #28
    586a:	bd90      	pop	{r4, r7, pc}
    586c:	0001b818 	.word	0x0001b818

00005870 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5870:	b590      	push	{r4, r7, lr}
    5872:	b08d      	sub	sp, #52	; 0x34
    5874:	af00      	add	r7, sp, #0
    5876:	60f8      	str	r0, [r7, #12]
    5878:	60b9      	str	r1, [r7, #8]
    587a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    587c:	232e      	movs	r3, #46	; 0x2e
    587e:	18fb      	adds	r3, r7, r3
    5880:	2200      	movs	r2, #0
    5882:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5884:	232d      	movs	r3, #45	; 0x2d
    5886:	18fb      	adds	r3, r7, r3
    5888:	2200      	movs	r2, #0
    588a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    588c:	232c      	movs	r3, #44	; 0x2c
    588e:	18fb      	adds	r3, r7, r3
    5890:	2200      	movs	r2, #0
    5892:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5894:	2329      	movs	r3, #41	; 0x29
    5896:	18fc      	adds	r4, r7, r3
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	0018      	movs	r0, r3
    589c:	4bbd      	ldr	r3, [pc, #756]	; (5b94 <tc_init+0x324>)
    589e:	4798      	blx	r3
    58a0:	0003      	movs	r3, r0
    58a2:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    58a4:	2324      	movs	r3, #36	; 0x24
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	4abb      	ldr	r2, [pc, #748]	; (5b98 <tc_init+0x328>)
    58aa:	8811      	ldrh	r1, [r2, #0]
    58ac:	8019      	strh	r1, [r3, #0]
    58ae:	7892      	ldrb	r2, [r2, #2]
    58b0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    58b2:	231c      	movs	r3, #28
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	4ab9      	ldr	r2, [pc, #740]	; (5b9c <tc_init+0x32c>)
    58b8:	6811      	ldr	r1, [r2, #0]
    58ba:	6019      	str	r1, [r3, #0]
    58bc:	8892      	ldrh	r2, [r2, #4]
    58be:	809a      	strh	r2, [r3, #4]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58c0:	232b      	movs	r3, #43	; 0x2b
    58c2:	18fb      	adds	r3, r7, r3
    58c4:	2200      	movs	r2, #0
    58c6:	701a      	strb	r2, [r3, #0]
    58c8:	e00e      	b.n	58e8 <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    58ca:	232b      	movs	r3, #43	; 0x2b
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	781a      	ldrb	r2, [r3, #0]
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	3202      	adds	r2, #2
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	2100      	movs	r1, #0
    58d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58da:	232b      	movs	r3, #43	; 0x2b
    58dc:	18fb      	adds	r3, r7, r3
    58de:	781a      	ldrb	r2, [r3, #0]
    58e0:	232b      	movs	r3, #43	; 0x2b
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	3201      	adds	r2, #1
    58e6:	701a      	strb	r2, [r3, #0]
    58e8:	232b      	movs	r3, #43	; 0x2b
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	2b03      	cmp	r3, #3
    58f0:	d9eb      	bls.n	58ca <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	2200      	movs	r2, #0
    58f6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	2200      	movs	r2, #0
    58fc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    58fe:	2329      	movs	r3, #41	; 0x29
    5900:	18fb      	adds	r3, r7, r3
    5902:	781a      	ldrb	r2, [r3, #0]
    5904:	4ba6      	ldr	r3, [pc, #664]	; (5ba0 <tc_init+0x330>)
    5906:	0092      	lsls	r2, r2, #2
    5908:	68f9      	ldr	r1, [r7, #12]
    590a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	68ba      	ldr	r2, [r7, #8]
    5910:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	789b      	ldrb	r3, [r3, #2]
    5916:	2b08      	cmp	r3, #8
    5918:	d108      	bne.n	592c <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    591a:	2329      	movs	r3, #41	; 0x29
    591c:	18fb      	adds	r3, r7, r3
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	3303      	adds	r3, #3
    5922:	2201      	movs	r2, #1
    5924:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5926:	d001      	beq.n	592c <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5928:	2317      	movs	r3, #23
    592a:	e1c2      	b.n	5cb2 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	789a      	ldrb	r2, [r3, #2]
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5934:	68bb      	ldr	r3, [r7, #8]
    5936:	881b      	ldrh	r3, [r3, #0]
    5938:	b29b      	uxth	r3, r3
    593a:	001a      	movs	r2, r3
    593c:	2301      	movs	r3, #1
    593e:	4013      	ands	r3, r2
    5940:	d001      	beq.n	5946 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5942:	2305      	movs	r3, #5
    5944:	e1b5      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5946:	68bb      	ldr	r3, [r7, #8]
    5948:	7bdb      	ldrb	r3, [r3, #15]
    594a:	b2db      	uxtb	r3, r3
    594c:	001a      	movs	r2, r3
    594e:	2310      	movs	r3, #16
    5950:	4013      	ands	r3, r2
    5952:	d001      	beq.n	5958 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5954:	231c      	movs	r3, #28
    5956:	e1ac      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5958:	68bb      	ldr	r3, [r7, #8]
    595a:	881b      	ldrh	r3, [r3, #0]
    595c:	b29b      	uxth	r3, r3
    595e:	001a      	movs	r2, r3
    5960:	2302      	movs	r3, #2
    5962:	4013      	ands	r3, r2
    5964:	d001      	beq.n	596a <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5966:	231c      	movs	r3, #28
    5968:	e1a3      	b.n	5cb2 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	7c1b      	ldrb	r3, [r3, #16]
    596e:	2b00      	cmp	r3, #0
    5970:	d017      	beq.n	59a2 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    5972:	2318      	movs	r3, #24
    5974:	18fb      	adds	r3, r7, r3
    5976:	0018      	movs	r0, r3
    5978:	4b8a      	ldr	r3, [pc, #552]	; (5ba4 <tc_init+0x334>)
    597a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	699b      	ldr	r3, [r3, #24]
    5980:	b2da      	uxtb	r2, r3
    5982:	2318      	movs	r3, #24
    5984:	18fb      	adds	r3, r7, r3
    5986:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5988:	2318      	movs	r3, #24
    598a:	18fb      	adds	r3, r7, r3
    598c:	2201      	movs	r2, #1
    598e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    5994:	b2db      	uxtb	r3, r3
    5996:	2218      	movs	r2, #24
    5998:	18ba      	adds	r2, r7, r2
    599a:	0011      	movs	r1, r2
    599c:	0018      	movs	r0, r3
    599e:	4b82      	ldr	r3, [pc, #520]	; (5ba8 <tc_init+0x338>)
    59a0:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	7f1b      	ldrb	r3, [r3, #28]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d017      	beq.n	59da <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    59aa:	2318      	movs	r3, #24
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	0018      	movs	r0, r3
    59b0:	4b7c      	ldr	r3, [pc, #496]	; (5ba4 <tc_init+0x334>)
    59b2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59b8:	b2da      	uxtb	r2, r3
    59ba:	2318      	movs	r3, #24
    59bc:	18fb      	adds	r3, r7, r3
    59be:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    59c0:	2318      	movs	r3, #24
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	2201      	movs	r2, #1
    59c6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    59cc:	b2db      	uxtb	r3, r3
    59ce:	2218      	movs	r2, #24
    59d0:	18ba      	adds	r2, r7, r2
    59d2:	0011      	movs	r1, r2
    59d4:	0018      	movs	r0, r3
    59d6:	4b74      	ldr	r3, [pc, #464]	; (5ba8 <tc_init+0x338>)
    59d8:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    59da:	2329      	movs	r3, #41	; 0x29
    59dc:	18fb      	adds	r3, r7, r3
    59de:	781a      	ldrb	r2, [r3, #0]
    59e0:	231c      	movs	r3, #28
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	0052      	lsls	r2, r2, #1
    59e6:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    59e8:	0019      	movs	r1, r3
    59ea:	2002      	movs	r0, #2
    59ec:	4b6f      	ldr	r3, [pc, #444]	; (5bac <tc_init+0x33c>)
    59ee:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	789b      	ldrb	r3, [r3, #2]
    59f4:	2b08      	cmp	r3, #8
    59f6:	d10b      	bne.n	5a10 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    59f8:	2329      	movs	r3, #41	; 0x29
    59fa:	18fb      	adds	r3, r7, r3
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	1c5a      	adds	r2, r3, #1
    5a00:	231c      	movs	r3, #28
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	0052      	lsls	r2, r2, #1
    5a06:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5a08:	0019      	movs	r1, r3
    5a0a:	2002      	movs	r0, #2
    5a0c:	4b67      	ldr	r3, [pc, #412]	; (5bac <tc_init+0x33c>)
    5a0e:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5a10:	2314      	movs	r3, #20
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	0018      	movs	r0, r3
    5a16:	4b66      	ldr	r3, [pc, #408]	; (5bb0 <tc_init+0x340>)
    5a18:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	2314      	movs	r3, #20
    5a20:	18fb      	adds	r3, r7, r3
    5a22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5a24:	2329      	movs	r3, #41	; 0x29
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	2224      	movs	r2, #36	; 0x24
    5a2c:	18ba      	adds	r2, r7, r2
    5a2e:	5cd3      	ldrb	r3, [r2, r3]
    5a30:	2214      	movs	r2, #20
    5a32:	18ba      	adds	r2, r7, r2
    5a34:	0011      	movs	r1, r2
    5a36:	0018      	movs	r0, r3
    5a38:	4b5e      	ldr	r3, [pc, #376]	; (5bb4 <tc_init+0x344>)
    5a3a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5a3c:	2329      	movs	r3, #41	; 0x29
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	781b      	ldrb	r3, [r3, #0]
    5a42:	2224      	movs	r2, #36	; 0x24
    5a44:	18ba      	adds	r2, r7, r2
    5a46:	5cd3      	ldrb	r3, [r2, r3]
    5a48:	0018      	movs	r0, r3
    5a4a:	4b5b      	ldr	r3, [pc, #364]	; (5bb8 <tc_init+0x348>)
    5a4c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	799b      	ldrb	r3, [r3, #6]
    5a56:	4313      	orrs	r3, r2
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    5a60:	4313      	orrs	r3, r2
    5a62:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    5a68:	232e      	movs	r3, #46	; 0x2e
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	430a      	orrs	r2, r1
    5a6e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	785b      	ldrb	r3, [r3, #1]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d008      	beq.n	5a8a <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5a78:	232e      	movs	r3, #46	; 0x2e
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	222e      	movs	r2, #46	; 0x2e
    5a7e:	18ba      	adds	r2, r7, r2
    5a80:	8812      	ldrh	r2, [r2, #0]
    5a82:	2180      	movs	r1, #128	; 0x80
    5a84:	0109      	lsls	r1, r1, #4
    5a86:	430a      	orrs	r2, r1
    5a88:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	0018      	movs	r0, r3
    5a90:	4b4a      	ldr	r3, [pc, #296]	; (5bbc <tc_init+0x34c>)
    5a92:	4798      	blx	r3
    5a94:	1e03      	subs	r3, r0, #0
    5a96:	d1f9      	bne.n	5a8c <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5a98:	68bb      	ldr	r3, [r7, #8]
    5a9a:	222e      	movs	r2, #46	; 0x2e
    5a9c:	18ba      	adds	r2, r7, r2
    5a9e:	8812      	ldrh	r2, [r2, #0]
    5aa0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	7b5b      	ldrb	r3, [r3, #13]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d003      	beq.n	5ab2 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5aaa:	232d      	movs	r3, #45	; 0x2d
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	2204      	movs	r2, #4
    5ab0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	7b9b      	ldrb	r3, [r3, #14]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d007      	beq.n	5aca <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5aba:	232d      	movs	r3, #45	; 0x2d
    5abc:	18fb      	adds	r3, r7, r3
    5abe:	222d      	movs	r2, #45	; 0x2d
    5ac0:	18ba      	adds	r2, r7, r2
    5ac2:	7812      	ldrb	r2, [r2, #0]
    5ac4:	2101      	movs	r1, #1
    5ac6:	430a      	orrs	r2, r1
    5ac8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	0018      	movs	r0, r3
    5ad0:	4b3a      	ldr	r3, [pc, #232]	; (5bbc <tc_init+0x34c>)
    5ad2:	4798      	blx	r3
    5ad4:	1e03      	subs	r3, r0, #0
    5ad6:	d1f9      	bne.n	5acc <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5ad8:	68bb      	ldr	r3, [r7, #8]
    5ada:	22ff      	movs	r2, #255	; 0xff
    5adc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5ade:	232d      	movs	r3, #45	; 0x2d
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d00b      	beq.n	5b00 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    5ae8:	46c0      	nop			; (mov r8, r8)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	0018      	movs	r0, r3
    5aee:	4b33      	ldr	r3, [pc, #204]	; (5bbc <tc_init+0x34c>)
    5af0:	4798      	blx	r3
    5af2:	1e03      	subs	r3, r0, #0
    5af4:	d1f9      	bne.n	5aea <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5af6:	68bb      	ldr	r3, [r7, #8]
    5af8:	222d      	movs	r2, #45	; 0x2d
    5afa:	18ba      	adds	r2, r7, r2
    5afc:	7812      	ldrb	r2, [r2, #0]
    5afe:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5b00:	232c      	movs	r3, #44	; 0x2c
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	687a      	ldr	r2, [r7, #4]
    5b06:	7a92      	ldrb	r2, [r2, #10]
    5b08:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b0a:	232a      	movs	r3, #42	; 0x2a
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	2200      	movs	r2, #0
    5b10:	701a      	strb	r2, [r3, #0]
    5b12:	e01c      	b.n	5b4e <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    5b14:	232a      	movs	r3, #42	; 0x2a
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	687a      	ldr	r2, [r7, #4]
    5b1c:	18d3      	adds	r3, r2, r3
    5b1e:	7adb      	ldrb	r3, [r3, #11]
    5b20:	2b00      	cmp	r3, #0
    5b22:	d00d      	beq.n	5b40 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5b24:	232a      	movs	r3, #42	; 0x2a
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2210      	movs	r2, #16
    5b2c:	409a      	lsls	r2, r3
    5b2e:	0013      	movs	r3, r2
    5b30:	b2d9      	uxtb	r1, r3
    5b32:	232c      	movs	r3, #44	; 0x2c
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	222c      	movs	r2, #44	; 0x2c
    5b38:	18ba      	adds	r2, r7, r2
    5b3a:	7812      	ldrb	r2, [r2, #0]
    5b3c:	430a      	orrs	r2, r1
    5b3e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b40:	232a      	movs	r3, #42	; 0x2a
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	781a      	ldrb	r2, [r3, #0]
    5b46:	232a      	movs	r3, #42	; 0x2a
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	3201      	adds	r2, #1
    5b4c:	701a      	strb	r2, [r3, #0]
    5b4e:	232a      	movs	r3, #42	; 0x2a
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	2b01      	cmp	r3, #1
    5b56:	d9dd      	bls.n	5b14 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b58:	46c0      	nop			; (mov r8, r8)
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b17      	ldr	r3, [pc, #92]	; (5bbc <tc_init+0x34c>)
    5b60:	4798      	blx	r3
    5b62:	1e03      	subs	r3, r0, #0
    5b64:	d1f9      	bne.n	5b5a <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5b66:	68bb      	ldr	r3, [r7, #8]
    5b68:	222c      	movs	r2, #44	; 0x2c
    5b6a:	18ba      	adds	r2, r7, r2
    5b6c:	7812      	ldrb	r2, [r2, #0]
    5b6e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b70:	46c0      	nop			; (mov r8, r8)
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	0018      	movs	r0, r3
    5b76:	4b11      	ldr	r3, [pc, #68]	; (5bbc <tc_init+0x34c>)
    5b78:	4798      	blx	r3
    5b7a:	1e03      	subs	r3, r0, #0
    5b7c:	d1f9      	bne.n	5b72 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	791b      	ldrb	r3, [r3, #4]
    5b82:	2b04      	cmp	r3, #4
    5b84:	d01c      	beq.n	5bc0 <tc_init+0x350>
    5b86:	2b08      	cmp	r3, #8
    5b88:	d100      	bne.n	5b8c <tc_init+0x31c>
    5b8a:	e06e      	b.n	5c6a <tc_init+0x3fa>
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d049      	beq.n	5c24 <tc_init+0x3b4>
    5b90:	e08e      	b.n	5cb0 <tc_init+0x440>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005829 	.word	0x00005829
    5b98:	0001b824 	.word	0x0001b824
    5b9c:	0001b828 	.word	0x0001b828
    5ba0:	200004fc 	.word	0x200004fc
    5ba4:	000057d9 	.word	0x000057d9
    5ba8:	000088d9 	.word	0x000088d9
    5bac:	0000577d 	.word	0x0000577d
    5bb0:	00005765 	.word	0x00005765
    5bb4:	000085ed 	.word	0x000085ed
    5bb8:	00008631 	.word	0x00008631
    5bbc:	00005801 	.word	0x00005801
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b3d      	ldr	r3, [pc, #244]	; (5cbc <tc_init+0x44c>)
    5bc8:	4798      	blx	r3
    5bca:	1e03      	subs	r3, r0, #0
    5bcc:	d1f9      	bne.n	5bc2 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	2228      	movs	r2, #40	; 0x28
    5bd2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    5bd4:	68bb      	ldr	r3, [r7, #8]
    5bd6:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    5bd8:	46c0      	nop			; (mov r8, r8)
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	0018      	movs	r0, r3
    5bde:	4b37      	ldr	r3, [pc, #220]	; (5cbc <tc_init+0x44c>)
    5be0:	4798      	blx	r3
    5be2:	1e03      	subs	r3, r0, #0
    5be4:	d1f9      	bne.n	5bda <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	2229      	movs	r2, #41	; 0x29
    5bea:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    5bec:	68bb      	ldr	r3, [r7, #8]
    5bee:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5bf0:	46c0      	nop			; (mov r8, r8)
    5bf2:	68fb      	ldr	r3, [r7, #12]
    5bf4:	0018      	movs	r0, r3
    5bf6:	4b31      	ldr	r3, [pc, #196]	; (5cbc <tc_init+0x44c>)
    5bf8:	4798      	blx	r3
    5bfa:	1e03      	subs	r3, r0, #0
    5bfc:	d1f9      	bne.n	5bf2 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	222a      	movs	r2, #42	; 0x2a
    5c02:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    5c04:	68bb      	ldr	r3, [r7, #8]
    5c06:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c08:	46c0      	nop			; (mov r8, r8)
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b2b      	ldr	r3, [pc, #172]	; (5cbc <tc_init+0x44c>)
    5c10:	4798      	blx	r3
    5c12:	1e03      	subs	r3, r0, #0
    5c14:	d1f9      	bne.n	5c0a <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	222b      	movs	r2, #43	; 0x2b
    5c1a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    5c20:	2300      	movs	r3, #0
    5c22:	e046      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    5c24:	46c0      	nop			; (mov r8, r8)
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b24      	ldr	r3, [pc, #144]	; (5cbc <tc_init+0x44c>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d1f9      	bne.n	5c26 <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	0018      	movs	r0, r3
    5c40:	4b1e      	ldr	r3, [pc, #120]	; (5cbc <tc_init+0x44c>)
    5c42:	4798      	blx	r3
    5c44:	1e03      	subs	r3, r0, #0
    5c46:	d1f9      	bne.n	5c3c <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5c4c:	68bb      	ldr	r3, [r7, #8]
    5c4e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c50:	46c0      	nop			; (mov r8, r8)
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	0018      	movs	r0, r3
    5c56:	4b19      	ldr	r3, [pc, #100]	; (5cbc <tc_init+0x44c>)
    5c58:	4798      	blx	r3
    5c5a:	1e03      	subs	r3, r0, #0
    5c5c:	d1f9      	bne.n	5c52 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    5c66:	2300      	movs	r3, #0
    5c68:	e023      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	0018      	movs	r0, r3
    5c70:	4b12      	ldr	r3, [pc, #72]	; (5cbc <tc_init+0x44c>)
    5c72:	4798      	blx	r3
    5c74:	1e03      	subs	r3, r0, #0
    5c76:	d1f9      	bne.n	5c6c <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c7c:	68bb      	ldr	r3, [r7, #8]
    5c7e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c80:	46c0      	nop			; (mov r8, r8)
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	0018      	movs	r0, r3
    5c86:	4b0d      	ldr	r3, [pc, #52]	; (5cbc <tc_init+0x44c>)
    5c88:	4798      	blx	r3
    5c8a:	1e03      	subs	r3, r0, #0
    5c8c:	d1f9      	bne.n	5c82 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    5c92:	68bb      	ldr	r3, [r7, #8]
    5c94:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0018      	movs	r0, r3
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <tc_init+0x44c>)
    5c9e:	4798      	blx	r3
    5ca0:	1e03      	subs	r3, r0, #0
    5ca2:	d1f9      	bne.n	5c98 <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5ca8:	68bb      	ldr	r3, [r7, #8]
    5caa:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    5cac:	2300      	movs	r3, #0
    5cae:	e000      	b.n	5cb2 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5cb0:	2317      	movs	r3, #23
}
    5cb2:	0018      	movs	r0, r3
    5cb4:	46bd      	mov	sp, r7
    5cb6:	b00d      	add	sp, #52	; 0x34
    5cb8:	bd90      	pop	{r4, r7, pc}
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	00005801 	.word	0x00005801

00005cc0 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b084      	sub	sp, #16
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b0e      	ldr	r3, [pc, #56]	; (5d10 <tc_get_count_value+0x50>)
    5cd6:	4798      	blx	r3
    5cd8:	1e03      	subs	r3, r0, #0
    5cda:	d1f9      	bne.n	5cd0 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	791b      	ldrb	r3, [r3, #4]
    5ce0:	2b04      	cmp	r3, #4
    5ce2:	d004      	beq.n	5cee <tc_get_count_value+0x2e>
    5ce4:	2b08      	cmp	r3, #8
    5ce6:	d00a      	beq.n	5cfe <tc_get_count_value+0x3e>
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d004      	beq.n	5cf6 <tc_get_count_value+0x36>
    5cec:	e00a      	b.n	5d04 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5cee:	68fb      	ldr	r3, [r7, #12]
    5cf0:	7c1b      	ldrb	r3, [r3, #16]
    5cf2:	b2db      	uxtb	r3, r3
    5cf4:	e007      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	8a1b      	ldrh	r3, [r3, #16]
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	e003      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    5cfe:	68fb      	ldr	r3, [r7, #12]
    5d00:	691b      	ldr	r3, [r3, #16]
    5d02:	e000      	b.n	5d06 <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    5d04:	2300      	movs	r3, #0
}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	b004      	add	sp, #16
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00005801 	.word	0x00005801

00005d14 <system_gclk_chan_get_config_defaults>:
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	2200      	movs	r2, #0
    5d20:	701a      	strb	r2, [r3, #0]
}
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	46bd      	mov	sp, r7
    5d26:	b002      	add	sp, #8
    5d28:	bd80      	pop	{r7, pc}
	...

00005d2c <system_apb_clock_set_mask>:
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	af00      	add	r7, sp, #0
    5d32:	0002      	movs	r2, r0
    5d34:	6039      	str	r1, [r7, #0]
    5d36:	1dfb      	adds	r3, r7, #7
    5d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d3a:	1dfb      	adds	r3, r7, #7
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	2b01      	cmp	r3, #1
    5d40:	d00a      	beq.n	5d58 <system_apb_clock_set_mask+0x2c>
    5d42:	2b02      	cmp	r3, #2
    5d44:	d00f      	beq.n	5d66 <system_apb_clock_set_mask+0x3a>
    5d46:	2b00      	cmp	r3, #0
    5d48:	d114      	bne.n	5d74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4c:	4a0d      	ldr	r2, [pc, #52]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4e:	6991      	ldr	r1, [r2, #24]
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	430a      	orrs	r2, r1
    5d54:	619a      	str	r2, [r3, #24]
			break;
    5d56:	e00f      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5d58:	4b0a      	ldr	r3, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5a:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5c:	69d1      	ldr	r1, [r2, #28]
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	430a      	orrs	r2, r1
    5d62:	61da      	str	r2, [r3, #28]
			break;
    5d64:	e008      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5d66:	4b07      	ldr	r3, [pc, #28]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d68:	4a06      	ldr	r2, [pc, #24]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d6a:	6a11      	ldr	r1, [r2, #32]
    5d6c:	683a      	ldr	r2, [r7, #0]
    5d6e:	430a      	orrs	r2, r1
    5d70:	621a      	str	r2, [r3, #32]
			break;
    5d72:	e001      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5d74:	2317      	movs	r3, #23
    5d76:	e000      	b.n	5d7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5d78:	2300      	movs	r3, #0
}
    5d7a:	0018      	movs	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b002      	add	sp, #8
    5d80:	bd80      	pop	{r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	40000400 	.word	0x40000400

00005d88 <system_pinmux_get_config_defaults>:
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	2280      	movs	r2, #128	; 0x80
    5d94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	2200      	movs	r2, #0
    5d9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	2201      	movs	r2, #1
    5da0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2200      	movs	r2, #0
    5da6:	70da      	strb	r2, [r3, #3]
}
    5da8:	46c0      	nop			; (mov r8, r8)
    5daa:	46bd      	mov	sp, r7
    5dac:	b002      	add	sp, #8
    5dae:	bd80      	pop	{r7, pc}

00005db0 <system_is_debugger_present>:
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5db4:	4b05      	ldr	r3, [pc, #20]	; (5dcc <system_is_debugger_present+0x1c>)
    5db6:	789b      	ldrb	r3, [r3, #2]
    5db8:	b2db      	uxtb	r3, r3
    5dba:	001a      	movs	r2, r3
    5dbc:	2302      	movs	r3, #2
    5dbe:	4013      	ands	r3, r2
    5dc0:	1e5a      	subs	r2, r3, #1
    5dc2:	4193      	sbcs	r3, r2
    5dc4:	b2db      	uxtb	r3, r3
}
    5dc6:	0018      	movs	r0, r3
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	41002000 	.word	0x41002000

00005dd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5dd0:	b580      	push	{r7, lr}
    5dd2:	b084      	sub	sp, #16
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	69db      	ldr	r3, [r3, #28]
    5de2:	1e5a      	subs	r2, r3, #1
    5de4:	4193      	sbcs	r3, r2
    5de6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5de8:	0018      	movs	r0, r3
    5dea:	46bd      	mov	sp, r7
    5dec:	b004      	add	sp, #16
    5dee:	bd80      	pop	{r7, pc}

00005df0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5df8:	46c0      	nop			; (mov r8, r8)
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b04      	ldr	r3, [pc, #16]	; (5e10 <_usart_wait_for_sync+0x20>)
    5e00:	4798      	blx	r3
    5e02:	1e03      	subs	r3, r0, #0
    5e04:	d1f9      	bne.n	5dfa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	46bd      	mov	sp, r7
    5e0a:	b002      	add	sp, #8
    5e0c:	bd80      	pop	{r7, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	00005dd1 	.word	0x00005dd1

00005e14 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5e14:	b5b0      	push	{r4, r5, r7, lr}
    5e16:	b08c      	sub	sp, #48	; 0x30
    5e18:	af02      	add	r7, sp, #8
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	0018      	movs	r0, r3
    5e2a:	4ba8      	ldr	r3, [pc, #672]	; (60cc <_usart_set_config+0x2b8>)
    5e2c:	4798      	blx	r3
    5e2e:	0003      	movs	r3, r0
    5e30:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5e32:	697b      	ldr	r3, [r7, #20]
    5e34:	3314      	adds	r3, #20
    5e36:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5e38:	2300      	movs	r3, #0
    5e3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5e3c:	2300      	movs	r3, #0
    5e3e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	2200      	movs	r2, #0
    5e46:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e48:	231f      	movs	r3, #31
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	2200      	movs	r2, #0
    5e4e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e50:	231e      	movs	r3, #30
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	2210      	movs	r2, #16
    5e56:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5e58:	683b      	ldr	r3, [r7, #0]
    5e5a:	8a1b      	ldrh	r3, [r3, #16]
    5e5c:	2280      	movs	r2, #128	; 0x80
    5e5e:	01d2      	lsls	r2, r2, #7
    5e60:	4293      	cmp	r3, r2
    5e62:	d01c      	beq.n	5e9e <_usart_set_config+0x8a>
    5e64:	2280      	movs	r2, #128	; 0x80
    5e66:	01d2      	lsls	r2, r2, #7
    5e68:	4293      	cmp	r3, r2
    5e6a:	dc06      	bgt.n	5e7a <_usart_set_config+0x66>
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d00d      	beq.n	5e8c <_usart_set_config+0x78>
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0192      	lsls	r2, r2, #6
    5e74:	4293      	cmp	r3, r2
    5e76:	d024      	beq.n	5ec2 <_usart_set_config+0xae>
    5e78:	e035      	b.n	5ee6 <_usart_set_config+0xd2>
    5e7a:	22c0      	movs	r2, #192	; 0xc0
    5e7c:	01d2      	lsls	r2, r2, #7
    5e7e:	4293      	cmp	r3, r2
    5e80:	d028      	beq.n	5ed4 <_usart_set_config+0xc0>
    5e82:	2280      	movs	r2, #128	; 0x80
    5e84:	0212      	lsls	r2, r2, #8
    5e86:	4293      	cmp	r3, r2
    5e88:	d012      	beq.n	5eb0 <_usart_set_config+0x9c>
    5e8a:	e02c      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e8c:	231f      	movs	r3, #31
    5e8e:	18fb      	adds	r3, r7, r3
    5e90:	2200      	movs	r2, #0
    5e92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e94:	231e      	movs	r3, #30
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	2210      	movs	r2, #16
    5e9a:	701a      	strb	r2, [r3, #0]
			break;
    5e9c:	e023      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e9e:	231f      	movs	r3, #31
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	2200      	movs	r2, #0
    5ea4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ea6:	231e      	movs	r3, #30
    5ea8:	18fb      	adds	r3, r7, r3
    5eaa:	2208      	movs	r2, #8
    5eac:	701a      	strb	r2, [r3, #0]
			break;
    5eae:	e01a      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eb0:	231f      	movs	r3, #31
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2200      	movs	r2, #0
    5eb6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5eb8:	231e      	movs	r3, #30
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	2203      	movs	r2, #3
    5ebe:	701a      	strb	r2, [r3, #0]
			break;
    5ec0:	e011      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec2:	231f      	movs	r3, #31
    5ec4:	18fb      	adds	r3, r7, r3
    5ec6:	2201      	movs	r2, #1
    5ec8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5eca:	231e      	movs	r3, #30
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	2210      	movs	r2, #16
    5ed0:	701a      	strb	r2, [r3, #0]
			break;
    5ed2:	e008      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ed4:	231f      	movs	r3, #31
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	2201      	movs	r2, #1
    5eda:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5edc:	231e      	movs	r3, #30
    5ede:	18fb      	adds	r3, r7, r3
    5ee0:	2208      	movs	r2, #8
    5ee2:	701a      	strb	r2, [r3, #0]
			break;
    5ee4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5ee6:	683b      	ldr	r3, [r7, #0]
    5ee8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5eea:	683b      	ldr	r3, [r7, #0]
    5eec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5eee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5ef4:	4313      	orrs	r3, r2
		config->sample_rate |
    5ef6:	683a      	ldr	r2, [r7, #0]
    5ef8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    5efa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	7e12      	ldrb	r2, [r2, #24]
    5f00:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5f02:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f04:	683a      	ldr	r2, [r7, #0]
    5f06:	2126      	movs	r1, #38	; 0x26
    5f08:	5c52      	ldrb	r2, [r2, r1]
    5f0a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5f0c:	4313      	orrs	r3, r2
    5f0e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5f10:	231d      	movs	r3, #29
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	2200      	movs	r2, #0
    5f16:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	685b      	ldr	r3, [r3, #4]
    5f1c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5f1e:	68fb      	ldr	r3, [r7, #12]
    5f20:	2b00      	cmp	r3, #0
    5f22:	d01e      	beq.n	5f62 <_usart_set_config+0x14e>
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	0552      	lsls	r2, r2, #21
    5f28:	4293      	cmp	r3, r2
    5f2a:	d14f      	bne.n	5fcc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	2227      	movs	r2, #39	; 0x27
    5f30:	5c9b      	ldrb	r3, [r3, r2]
    5f32:	2201      	movs	r2, #1
    5f34:	4053      	eors	r3, r2
    5f36:	b2db      	uxtb	r3, r3
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d046      	beq.n	5fca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	6a1d      	ldr	r5, [r3, #32]
    5f40:	693b      	ldr	r3, [r7, #16]
    5f42:	b2db      	uxtb	r3, r3
    5f44:	0018      	movs	r0, r3
    5f46:	4b62      	ldr	r3, [pc, #392]	; (60d0 <_usart_set_config+0x2bc>)
    5f48:	4798      	blx	r3
    5f4a:	0001      	movs	r1, r0
    5f4c:	231d      	movs	r3, #29
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	230a      	movs	r3, #10
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	001a      	movs	r2, r3
    5f56:	0028      	movs	r0, r5
    5f58:	4b5e      	ldr	r3, [pc, #376]	; (60d4 <_usart_set_config+0x2c0>)
    5f5a:	4798      	blx	r3
    5f5c:	0003      	movs	r3, r0
    5f5e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5f60:	e033      	b.n	5fca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	2227      	movs	r2, #39	; 0x27
    5f66:	5c9b      	ldrb	r3, [r3, r2]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d014      	beq.n	5f96 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	6a18      	ldr	r0, [r3, #32]
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5f74:	231d      	movs	r3, #29
    5f76:	18fc      	adds	r4, r7, r3
    5f78:	231f      	movs	r3, #31
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	781d      	ldrb	r5, [r3, #0]
    5f7e:	230a      	movs	r3, #10
    5f80:	18fa      	adds	r2, r7, r3
    5f82:	231e      	movs	r3, #30
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	9300      	str	r3, [sp, #0]
    5f8a:	002b      	movs	r3, r5
    5f8c:	4d52      	ldr	r5, [pc, #328]	; (60d8 <_usart_set_config+0x2c4>)
    5f8e:	47a8      	blx	r5
    5f90:	0003      	movs	r3, r0
    5f92:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5f94:	e01a      	b.n	5fcc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5f96:	683b      	ldr	r3, [r7, #0]
    5f98:	6a1d      	ldr	r5, [r3, #32]
    5f9a:	693b      	ldr	r3, [r7, #16]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	0018      	movs	r0, r3
    5fa0:	4b4b      	ldr	r3, [pc, #300]	; (60d0 <_usart_set_config+0x2bc>)
    5fa2:	4798      	blx	r3
				status_code =
    5fa4:	231d      	movs	r3, #29
    5fa6:	18fc      	adds	r4, r7, r3
    5fa8:	231f      	movs	r3, #31
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	7819      	ldrb	r1, [r3, #0]
    5fae:	230a      	movs	r3, #10
    5fb0:	18fa      	adds	r2, r7, r3
    5fb2:	231e      	movs	r3, #30
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	9300      	str	r3, [sp, #0]
    5fba:	000b      	movs	r3, r1
    5fbc:	0001      	movs	r1, r0
    5fbe:	0028      	movs	r0, r5
    5fc0:	4d45      	ldr	r5, [pc, #276]	; (60d8 <_usart_set_config+0x2c4>)
    5fc2:	47a8      	blx	r5
    5fc4:	0003      	movs	r3, r0
    5fc6:	7023      	strb	r3, [r4, #0]
			break;
    5fc8:	e000      	b.n	5fcc <_usart_set_config+0x1b8>
			break;
    5fca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5fcc:	231d      	movs	r3, #29
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d003      	beq.n	5fde <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5fd6:	231d      	movs	r3, #29
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	e071      	b.n	60c2 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5fde:	683b      	ldr	r3, [r7, #0]
    5fe0:	7e5b      	ldrb	r3, [r3, #25]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d003      	beq.n	5fee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	7e9a      	ldrb	r2, [r3, #26]
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	0018      	movs	r0, r3
    5ff2:	4b3a      	ldr	r3, [pc, #232]	; (60dc <_usart_set_config+0x2c8>)
    5ff4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5ff6:	230a      	movs	r3, #10
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	881a      	ldrh	r2, [r3, #0]
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	4313      	orrs	r3, r2
    6006:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6008:	683b      	ldr	r3, [r7, #0]
    600a:	2227      	movs	r2, #39	; 0x27
    600c:	5c9b      	ldrb	r3, [r3, r2]
    600e:	2201      	movs	r2, #1
    6010:	4053      	eors	r3, r2
    6012:	b2db      	uxtb	r3, r3
    6014:	2b00      	cmp	r3, #0
    6016:	d003      	beq.n	6020 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    601a:	2204      	movs	r2, #4
    601c:	4313      	orrs	r3, r2
    601e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	7e5b      	ldrb	r3, [r3, #25]
    6024:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	7f1b      	ldrb	r3, [r3, #28]
    602a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    602c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    602e:	683b      	ldr	r3, [r7, #0]
    6030:	7f5b      	ldrb	r3, [r3, #29]
    6032:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6034:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	2124      	movs	r1, #36	; 0x24
    603a:	5c5b      	ldrb	r3, [r3, r1]
    603c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    603e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	2125      	movs	r1, #37	; 0x25
    6044:	5c5b      	ldrb	r3, [r3, r1]
    6046:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6048:	4313      	orrs	r3, r2
	ctrlb =  
    604a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    604c:	683b      	ldr	r3, [r7, #0]
    604e:	7adb      	ldrb	r3, [r3, #11]
    6050:	001a      	movs	r2, r3
    6052:	6a3b      	ldr	r3, [r7, #32]
    6054:	4313      	orrs	r3, r2
    6056:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	891b      	ldrh	r3, [r3, #8]
    605c:	2bff      	cmp	r3, #255	; 0xff
    605e:	d00b      	beq.n	6078 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6062:	2280      	movs	r2, #128	; 0x80
    6064:	0452      	lsls	r2, r2, #17
    6066:	4313      	orrs	r3, r2
    6068:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	891b      	ldrh	r3, [r3, #8]
    606e:	001a      	movs	r2, r3
    6070:	6a3b      	ldr	r3, [r7, #32]
    6072:	4313      	orrs	r3, r2
    6074:	623b      	str	r3, [r7, #32]
    6076:	e008      	b.n	608a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    6078:	683b      	ldr	r3, [r7, #0]
    607a:	7edb      	ldrb	r3, [r3, #27]
    607c:	2b00      	cmp	r3, #0
    607e:	d004      	beq.n	608a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6082:	2280      	movs	r2, #128	; 0x80
    6084:	04d2      	lsls	r2, r2, #19
    6086:	4313      	orrs	r3, r2
    6088:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    608a:	683b      	ldr	r3, [r7, #0]
    608c:	222c      	movs	r2, #44	; 0x2c
    608e:	5c9b      	ldrb	r3, [r3, r2]
    6090:	2b00      	cmp	r3, #0
    6092:	d103      	bne.n	609c <_usart_set_config+0x288>
    6094:	4b12      	ldr	r3, [pc, #72]	; (60e0 <_usart_set_config+0x2cc>)
    6096:	4798      	blx	r3
    6098:	1e03      	subs	r3, r0, #0
    609a:	d003      	beq.n	60a4 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609e:	2280      	movs	r2, #128	; 0x80
    60a0:	4313      	orrs	r3, r2
    60a2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	0018      	movs	r0, r3
    60a8:	4b0c      	ldr	r3, [pc, #48]	; (60dc <_usart_set_config+0x2c8>)
    60aa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    60ac:	69bb      	ldr	r3, [r7, #24]
    60ae:	6a3a      	ldr	r2, [r7, #32]
    60b0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	0018      	movs	r0, r3
    60b6:	4b09      	ldr	r3, [pc, #36]	; (60dc <_usart_set_config+0x2c8>)
    60b8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    60ba:	69bb      	ldr	r3, [r7, #24]
    60bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60be:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    60c0:	2300      	movs	r3, #0
}
    60c2:	0018      	movs	r0, r3
    60c4:	46bd      	mov	sp, r7
    60c6:	b00a      	add	sp, #40	; 0x28
    60c8:	bdb0      	pop	{r4, r5, r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	00007a01 	.word	0x00007a01
    60d0:	00008711 	.word	0x00008711
    60d4:	0000754f 	.word	0x0000754f
    60d8:	000075cd 	.word	0x000075cd
    60dc:	00005df1 	.word	0x00005df1
    60e0:	00005db1 	.word	0x00005db1

000060e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    60e4:	b590      	push	{r4, r7, lr}
    60e6:	b093      	sub	sp, #76	; 0x4c
    60e8:	af00      	add	r7, sp, #0
    60ea:	60f8      	str	r0, [r7, #12]
    60ec:	60b9      	str	r1, [r7, #8]
    60ee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    60f0:	233b      	movs	r3, #59	; 0x3b
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	2200      	movs	r2, #0
    60f6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	68ba      	ldr	r2, [r7, #8]
    60fc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	0018      	movs	r0, r3
    610a:	4b86      	ldr	r3, [pc, #536]	; (6324 <usart_init+0x240>)
    610c:	4798      	blx	r3
    610e:	0003      	movs	r3, r0
    6110:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6114:	3302      	adds	r3, #2
    6116:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    611a:	3314      	adds	r3, #20
    611c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	2201      	movs	r2, #1
    6124:	4013      	ands	r3, r2
    6126:	d001      	beq.n	612c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6128:	2305      	movs	r3, #5
    612a:	e0f6      	b.n	631a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	2202      	movs	r2, #2
    6132:	4013      	ands	r3, r2
    6134:	d001      	beq.n	613a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6136:	231c      	movs	r3, #28
    6138:	e0ef      	b.n	631a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    613a:	2201      	movs	r2, #1
    613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    613e:	409a      	lsls	r2, r3
    6140:	0013      	movs	r3, r2
    6142:	0019      	movs	r1, r3
    6144:	2002      	movs	r0, #2
    6146:	4b78      	ldr	r3, [pc, #480]	; (6328 <usart_init+0x244>)
    6148:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    614a:	2324      	movs	r3, #36	; 0x24
    614c:	18fb      	adds	r3, r7, r3
    614e:	0018      	movs	r0, r3
    6150:	4b76      	ldr	r3, [pc, #472]	; (632c <usart_init+0x248>)
    6152:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	222d      	movs	r2, #45	; 0x2d
    6158:	5c9a      	ldrb	r2, [r3, r2]
    615a:	2324      	movs	r3, #36	; 0x24
    615c:	18fb      	adds	r3, r7, r3
    615e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6162:	b2db      	uxtb	r3, r3
    6164:	2224      	movs	r2, #36	; 0x24
    6166:	18ba      	adds	r2, r7, r2
    6168:	0011      	movs	r1, r2
    616a:	0018      	movs	r0, r3
    616c:	4b70      	ldr	r3, [pc, #448]	; (6330 <usart_init+0x24c>)
    616e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6170:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6172:	b2db      	uxtb	r3, r3
    6174:	0018      	movs	r0, r3
    6176:	4b6f      	ldr	r3, [pc, #444]	; (6334 <usart_init+0x250>)
    6178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	222d      	movs	r2, #45	; 0x2d
    617e:	5c9b      	ldrb	r3, [r3, r2]
    6180:	2100      	movs	r1, #0
    6182:	0018      	movs	r0, r3
    6184:	4b6c      	ldr	r3, [pc, #432]	; (6338 <usart_init+0x254>)
    6186:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	7ada      	ldrb	r2, [r3, #11]
    618c:	68fb      	ldr	r3, [r7, #12]
    618e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	2224      	movs	r2, #36	; 0x24
    6194:	5c9a      	ldrb	r2, [r3, r2]
    6196:	68fb      	ldr	r3, [r7, #12]
    6198:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	2225      	movs	r2, #37	; 0x25
    619e:	5c9a      	ldrb	r2, [r3, r2]
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	7eda      	ldrb	r2, [r3, #27]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	7f1a      	ldrb	r2, [r3, #28]
    61b0:	68fb      	ldr	r3, [r7, #12]
    61b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    61b4:	233b      	movs	r3, #59	; 0x3b
    61b6:	18fc      	adds	r4, r7, r3
    61b8:	687a      	ldr	r2, [r7, #4]
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	0011      	movs	r1, r2
    61be:	0018      	movs	r0, r3
    61c0:	4b5e      	ldr	r3, [pc, #376]	; (633c <usart_init+0x258>)
    61c2:	4798      	blx	r3
    61c4:	0003      	movs	r3, r0
    61c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    61c8:	233b      	movs	r3, #59	; 0x3b
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <usart_init+0xf6>
		return status_code;
    61d2:	233b      	movs	r3, #59	; 0x3b
    61d4:	18fb      	adds	r3, r7, r3
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	e09f      	b.n	631a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    61da:	2320      	movs	r3, #32
    61dc:	18fb      	adds	r3, r7, r3
    61de:	0018      	movs	r0, r3
    61e0:	4b57      	ldr	r3, [pc, #348]	; (6340 <usart_init+0x25c>)
    61e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    61e4:	2320      	movs	r3, #32
    61e6:	18fb      	adds	r3, r7, r3
    61e8:	2200      	movs	r2, #0
    61ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    61ec:	2320      	movs	r3, #32
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2200      	movs	r2, #0
    61f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    61f8:	2310      	movs	r3, #16
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6202:	2310      	movs	r3, #16
    6204:	18fb      	adds	r3, r7, r3
    6206:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    620c:	2310      	movs	r3, #16
    620e:	18fb      	adds	r3, r7, r3
    6210:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6216:	2310      	movs	r3, #16
    6218:	18fb      	adds	r3, r7, r3
    621a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    621c:	2347      	movs	r3, #71	; 0x47
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	701a      	strb	r2, [r3, #0]
    6224:	e02c      	b.n	6280 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6226:	2347      	movs	r3, #71	; 0x47
    6228:	18fb      	adds	r3, r7, r3
    622a:	781a      	ldrb	r2, [r3, #0]
    622c:	2310      	movs	r3, #16
    622e:	18fb      	adds	r3, r7, r3
    6230:	0092      	lsls	r2, r2, #2
    6232:	58d3      	ldr	r3, [r2, r3]
    6234:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6238:	2b00      	cmp	r3, #0
    623a:	d109      	bne.n	6250 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    623c:	2347      	movs	r3, #71	; 0x47
    623e:	18fb      	adds	r3, r7, r3
    6240:	781a      	ldrb	r2, [r3, #0]
    6242:	68bb      	ldr	r3, [r7, #8]
    6244:	0011      	movs	r1, r2
    6246:	0018      	movs	r0, r3
    6248:	4b3e      	ldr	r3, [pc, #248]	; (6344 <usart_init+0x260>)
    624a:	4798      	blx	r3
    624c:	0003      	movs	r3, r0
    624e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6252:	3301      	adds	r3, #1
    6254:	d00d      	beq.n	6272 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6258:	b2da      	uxtb	r2, r3
    625a:	2320      	movs	r3, #32
    625c:	18fb      	adds	r3, r7, r3
    625e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6262:	0c1b      	lsrs	r3, r3, #16
    6264:	b2db      	uxtb	r3, r3
    6266:	2220      	movs	r2, #32
    6268:	18ba      	adds	r2, r7, r2
    626a:	0011      	movs	r1, r2
    626c:	0018      	movs	r0, r3
    626e:	4b36      	ldr	r3, [pc, #216]	; (6348 <usart_init+0x264>)
    6270:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6272:	2347      	movs	r3, #71	; 0x47
    6274:	18fb      	adds	r3, r7, r3
    6276:	781a      	ldrb	r2, [r3, #0]
    6278:	2347      	movs	r3, #71	; 0x47
    627a:	18fb      	adds	r3, r7, r3
    627c:	3201      	adds	r2, #1
    627e:	701a      	strb	r2, [r3, #0]
    6280:	2347      	movs	r3, #71	; 0x47
    6282:	18fb      	adds	r3, r7, r3
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	2b03      	cmp	r3, #3
    6288:	d9cd      	bls.n	6226 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    628a:	2300      	movs	r3, #0
    628c:	63fb      	str	r3, [r7, #60]	; 0x3c
    628e:	e00a      	b.n	62a6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    6290:	68fa      	ldr	r2, [r7, #12]
    6292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6294:	3302      	adds	r3, #2
    6296:	009b      	lsls	r3, r3, #2
    6298:	18d3      	adds	r3, r2, r3
    629a:	3304      	adds	r3, #4
    629c:	2200      	movs	r2, #0
    629e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    62a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a2:	3301      	adds	r3, #1
    62a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    62a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a8:	2b05      	cmp	r3, #5
    62aa:	d9f1      	bls.n	6290 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	2200      	movs	r2, #0
    62b0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	2200      	movs	r2, #0
    62b6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	2200      	movs	r2, #0
    62bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	2200      	movs	r2, #0
    62c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	2230      	movs	r2, #48	; 0x30
    62c8:	2100      	movs	r1, #0
    62ca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	2231      	movs	r2, #49	; 0x31
    62d0:	2100      	movs	r1, #0
    62d2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	2232      	movs	r2, #50	; 0x32
    62d8:	2100      	movs	r1, #0
    62da:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	2233      	movs	r2, #51	; 0x33
    62e0:	2100      	movs	r1, #0
    62e2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	2227      	movs	r2, #39	; 0x27
    62ea:	18bc      	adds	r4, r7, r2
    62ec:	0018      	movs	r0, r3
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <usart_init+0x240>)
    62f0:	4798      	blx	r3
    62f2:	0003      	movs	r3, r0
    62f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    62f6:	4a15      	ldr	r2, [pc, #84]	; (634c <usart_init+0x268>)
    62f8:	2327      	movs	r3, #39	; 0x27
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	0011      	movs	r1, r2
    6300:	0018      	movs	r0, r3
    6302:	4b13      	ldr	r3, [pc, #76]	; (6350 <usart_init+0x26c>)
    6304:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6306:	2327      	movs	r3, #39	; 0x27
    6308:	18fb      	adds	r3, r7, r3
    630a:	781a      	ldrb	r2, [r3, #0]
    630c:	4b11      	ldr	r3, [pc, #68]	; (6354 <usart_init+0x270>)
    630e:	0092      	lsls	r2, r2, #2
    6310:	68f9      	ldr	r1, [r7, #12]
    6312:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6314:	233b      	movs	r3, #59	; 0x3b
    6316:	18fb      	adds	r3, r7, r3
    6318:	781b      	ldrb	r3, [r3, #0]
}
    631a:	0018      	movs	r0, r3
    631c:	46bd      	mov	sp, r7
    631e:	b013      	add	sp, #76	; 0x4c
    6320:	bd90      	pop	{r4, r7, pc}
    6322:	46c0      	nop			; (mov r8, r8)
    6324:	00007a01 	.word	0x00007a01
    6328:	00005d2d 	.word	0x00005d2d
    632c:	00005d15 	.word	0x00005d15
    6330:	000085ed 	.word	0x000085ed
    6334:	00008631 	.word	0x00008631
    6338:	000077b9 	.word	0x000077b9
    633c:	00005e15 	.word	0x00005e15
    6340:	00005d89 	.word	0x00005d89
    6344:	00007845 	.word	0x00007845
    6348:	000088d9 	.word	0x000088d9
    634c:	00006751 	.word	0x00006751
    6350:	00007a65 	.word	0x00007a65
    6354:	2000050c 	.word	0x2000050c

00006358 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6358:	b580      	push	{r7, lr}
    635a:	b084      	sub	sp, #16
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
    6360:	000a      	movs	r2, r1
    6362:	1cbb      	adds	r3, r7, #2
    6364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	79db      	ldrb	r3, [r3, #7]
    6370:	2201      	movs	r2, #1
    6372:	4053      	eors	r3, r2
    6374:	b2db      	uxtb	r3, r3
    6376:	2b00      	cmp	r3, #0
    6378:	d001      	beq.n	637e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    637a:	231c      	movs	r3, #28
    637c:	e017      	b.n	63ae <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6382:	b29b      	uxth	r3, r3
    6384:	2b00      	cmp	r3, #0
    6386:	d001      	beq.n	638c <usart_write_wait+0x34>
		return STATUS_BUSY;
    6388:	2305      	movs	r3, #5
    638a:	e010      	b.n	63ae <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	0018      	movs	r0, r3
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <usart_write_wait+0x60>)
    6392:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6394:	68fb      	ldr	r3, [r7, #12]
    6396:	1cba      	adds	r2, r7, #2
    6398:	8812      	ldrh	r2, [r2, #0]
    639a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    639c:	46c0      	nop			; (mov r8, r8)
    639e:	68fb      	ldr	r3, [r7, #12]
    63a0:	7e1b      	ldrb	r3, [r3, #24]
    63a2:	b2db      	uxtb	r3, r3
    63a4:	001a      	movs	r2, r3
    63a6:	2302      	movs	r3, #2
    63a8:	4013      	ands	r3, r2
    63aa:	d0f8      	beq.n	639e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    63ac:	2300      	movs	r3, #0
}
    63ae:	0018      	movs	r0, r3
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00005df1 	.word	0x00005df1

000063bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b08a      	sub	sp, #40	; 0x28
    63c0:	af00      	add	r7, sp, #0
    63c2:	60f8      	str	r0, [r7, #12]
    63c4:	60b9      	str	r1, [r7, #8]
    63c6:	1dbb      	adds	r3, r7, #6
    63c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    63ca:	1dbb      	adds	r3, r7, #6
    63cc:	881b      	ldrh	r3, [r3, #0]
    63ce:	2b00      	cmp	r3, #0
    63d0:	d101      	bne.n	63d6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    63d2:	2317      	movs	r3, #23
    63d4:	e07e      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	79db      	ldrb	r3, [r3, #7]
    63da:	2201      	movs	r2, #1
    63dc:	4053      	eors	r3, r2
    63de:	b2db      	uxtb	r3, r3
    63e0:	2b00      	cmp	r3, #0
    63e2:	d001      	beq.n	63e8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    63e4:	231c      	movs	r3, #28
    63e6:	e075      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    63e8:	68fb      	ldr	r3, [r7, #12]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	0018      	movs	r0, r3
    63f2:	4b3a      	ldr	r3, [pc, #232]	; (64dc <usart_write_buffer_wait+0x120>)
    63f4:	4798      	blx	r3

	uint16_t tx_pos = 0;
    63f6:	2326      	movs	r3, #38	; 0x26
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    63fe:	e048      	b.n	6492 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6400:	2300      	movs	r3, #0
    6402:	623b      	str	r3, [r7, #32]
    6404:	e00f      	b.n	6426 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6406:	697b      	ldr	r3, [r7, #20]
    6408:	7e1b      	ldrb	r3, [r3, #24]
    640a:	b2db      	uxtb	r3, r3
    640c:	001a      	movs	r2, r3
    640e:	2301      	movs	r3, #1
    6410:	4013      	ands	r3, r2
    6412:	d10d      	bne.n	6430 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    6414:	6a3b      	ldr	r3, [r7, #32]
    6416:	4a32      	ldr	r2, [pc, #200]	; (64e0 <usart_write_buffer_wait+0x124>)
    6418:	4293      	cmp	r3, r2
    641a:	d101      	bne.n	6420 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    641c:	2312      	movs	r3, #18
    641e:	e059      	b.n	64d4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6420:	6a3b      	ldr	r3, [r7, #32]
    6422:	3301      	adds	r3, #1
    6424:	623b      	str	r3, [r7, #32]
    6426:	6a3b      	ldr	r3, [r7, #32]
    6428:	4a2d      	ldr	r2, [pc, #180]	; (64e0 <usart_write_buffer_wait+0x124>)
    642a:	4293      	cmp	r3, r2
    642c:	d9eb      	bls.n	6406 <usart_write_buffer_wait+0x4a>
    642e:	e000      	b.n	6432 <usart_write_buffer_wait+0x76>
				break;
    6430:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    6432:	2326      	movs	r3, #38	; 0x26
    6434:	18fb      	adds	r3, r7, r3
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	2226      	movs	r2, #38	; 0x26
    643a:	18ba      	adds	r2, r7, r2
    643c:	1c59      	adds	r1, r3, #1
    643e:	8011      	strh	r1, [r2, #0]
    6440:	001a      	movs	r2, r3
    6442:	68bb      	ldr	r3, [r7, #8]
    6444:	189b      	adds	r3, r3, r2
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	231e      	movs	r3, #30
    644a:	18fb      	adds	r3, r7, r3
    644c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	795b      	ldrb	r3, [r3, #5]
    6452:	2b01      	cmp	r3, #1
    6454:	d115      	bne.n	6482 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6456:	2326      	movs	r3, #38	; 0x26
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	2226      	movs	r2, #38	; 0x26
    645e:	18ba      	adds	r2, r7, r2
    6460:	1c59      	adds	r1, r3, #1
    6462:	8011      	strh	r1, [r2, #0]
    6464:	001a      	movs	r2, r3
    6466:	68bb      	ldr	r3, [r7, #8]
    6468:	189b      	adds	r3, r3, r2
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	021b      	lsls	r3, r3, #8
    646e:	b21a      	sxth	r2, r3
    6470:	231e      	movs	r3, #30
    6472:	18fb      	adds	r3, r7, r3
    6474:	2100      	movs	r1, #0
    6476:	5e5b      	ldrsh	r3, [r3, r1]
    6478:	4313      	orrs	r3, r2
    647a:	b21a      	sxth	r2, r3
    647c:	231e      	movs	r3, #30
    647e:	18fb      	adds	r3, r7, r3
    6480:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    6482:	231e      	movs	r3, #30
    6484:	18fb      	adds	r3, r7, r3
    6486:	881a      	ldrh	r2, [r3, #0]
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	0011      	movs	r1, r2
    648c:	0018      	movs	r0, r3
    648e:	4b15      	ldr	r3, [pc, #84]	; (64e4 <usart_write_buffer_wait+0x128>)
    6490:	4798      	blx	r3
	while (length--) {
    6492:	1dbb      	adds	r3, r7, #6
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	1dba      	adds	r2, r7, #6
    6498:	1e59      	subs	r1, r3, #1
    649a:	8011      	strh	r1, [r2, #0]
    649c:	2b00      	cmp	r3, #0
    649e:	d1af      	bne.n	6400 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	61bb      	str	r3, [r7, #24]
    64a4:	e00f      	b.n	64c6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    64a6:	697b      	ldr	r3, [r7, #20]
    64a8:	7e1b      	ldrb	r3, [r3, #24]
    64aa:	b2db      	uxtb	r3, r3
    64ac:	001a      	movs	r2, r3
    64ae:	2302      	movs	r3, #2
    64b0:	4013      	ands	r3, r2
    64b2:	d10d      	bne.n	64d0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    64b4:	69bb      	ldr	r3, [r7, #24]
    64b6:	4a0a      	ldr	r2, [pc, #40]	; (64e0 <usart_write_buffer_wait+0x124>)
    64b8:	4293      	cmp	r3, r2
    64ba:	d101      	bne.n	64c0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    64bc:	2312      	movs	r3, #18
    64be:	e009      	b.n	64d4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64c0:	69bb      	ldr	r3, [r7, #24]
    64c2:	3301      	adds	r3, #1
    64c4:	61bb      	str	r3, [r7, #24]
    64c6:	69bb      	ldr	r3, [r7, #24]
    64c8:	4a05      	ldr	r2, [pc, #20]	; (64e0 <usart_write_buffer_wait+0x124>)
    64ca:	4293      	cmp	r3, r2
    64cc:	d9eb      	bls.n	64a6 <usart_write_buffer_wait+0xea>
    64ce:	e000      	b.n	64d2 <usart_write_buffer_wait+0x116>
			break;
    64d0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    64d2:	2300      	movs	r3, #0
}
    64d4:	0018      	movs	r0, r3
    64d6:	46bd      	mov	sp, r7
    64d8:	b00a      	add	sp, #40	; 0x28
    64da:	bd80      	pop	{r7, pc}
    64dc:	00005df1 	.word	0x00005df1
    64e0:	0000ffff 	.word	0x0000ffff
    64e4:	00006359 	.word	0x00006359

000064e8 <system_interrupt_enter_critical_section>:
{
    64e8:	b580      	push	{r7, lr}
    64ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <system_interrupt_enter_critical_section+0x10>)
    64ee:	4798      	blx	r3
}
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	00007c39 	.word	0x00007c39

000064fc <system_interrupt_leave_critical_section>:
{
    64fc:	b580      	push	{r7, lr}
    64fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6500:	4b02      	ldr	r3, [pc, #8]	; (650c <system_interrupt_leave_critical_section+0x10>)
    6502:	4798      	blx	r3
}
    6504:	46c0      	nop			; (mov r8, r8)
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	00007c8d 	.word	0x00007c8d

00006510 <usart_is_syncing>:
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	69db      	ldr	r3, [r3, #28]
    6522:	1e5a      	subs	r2, r3, #1
    6524:	4193      	sbcs	r3, r2
    6526:	b2db      	uxtb	r3, r3
}
    6528:	0018      	movs	r0, r3
    652a:	46bd      	mov	sp, r7
    652c:	b004      	add	sp, #16
    652e:	bd80      	pop	{r7, pc}

00006530 <_usart_wait_for_sync>:
{
    6530:	b580      	push	{r7, lr}
    6532:	b082      	sub	sp, #8
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	0018      	movs	r0, r3
    653e:	4b04      	ldr	r3, [pc, #16]	; (6550 <_usart_wait_for_sync+0x20>)
    6540:	4798      	blx	r3
    6542:	1e03      	subs	r3, r0, #0
    6544:	d1f9      	bne.n	653a <_usart_wait_for_sync+0xa>
}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	46bd      	mov	sp, r7
    654a:	b002      	add	sp, #8
    654c:	bd80      	pop	{r7, pc}
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	00006511 	.word	0x00006511

00006554 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6554:	b580      	push	{r7, lr}
    6556:	b086      	sub	sp, #24
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	60b9      	str	r1, [r7, #8]
    655e:	1dbb      	adds	r3, r7, #6
    6560:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6568:	4b0f      	ldr	r3, [pc, #60]	; (65a8 <_usart_write_buffer+0x54>)
    656a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6570:	b29b      	uxth	r3, r3
    6572:	2b00      	cmp	r3, #0
    6574:	d003      	beq.n	657e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    6576:	4b0d      	ldr	r3, [pc, #52]	; (65ac <_usart_write_buffer+0x58>)
    6578:	4798      	blx	r3
		return STATUS_BUSY;
    657a:	2305      	movs	r3, #5
    657c:	e010      	b.n	65a0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	1dba      	adds	r2, r7, #6
    6582:	8812      	ldrh	r2, [r2, #0]
    6584:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    6586:	4b09      	ldr	r3, [pc, #36]	; (65ac <_usart_write_buffer+0x58>)
    6588:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    658a:	68fb      	ldr	r3, [r7, #12]
    658c:	68ba      	ldr	r2, [r7, #8]
    658e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	2233      	movs	r2, #51	; 0x33
    6594:	2105      	movs	r1, #5
    6596:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    6598:	697b      	ldr	r3, [r7, #20]
    659a:	2201      	movs	r2, #1
    659c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    659e:	2300      	movs	r3, #0
}
    65a0:	0018      	movs	r0, r3
    65a2:	46bd      	mov	sp, r7
    65a4:	b006      	add	sp, #24
    65a6:	bd80      	pop	{r7, pc}
    65a8:	000064e9 	.word	0x000064e9
    65ac:	000064fd 	.word	0x000064fd

000065b0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    65b0:	b580      	push	{r7, lr}
    65b2:	b086      	sub	sp, #24
    65b4:	af00      	add	r7, sp, #0
    65b6:	60f8      	str	r0, [r7, #12]
    65b8:	60b9      	str	r1, [r7, #8]
    65ba:	1dbb      	adds	r3, r7, #6
    65bc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    65be:	68fb      	ldr	r3, [r7, #12]
    65c0:	681b      	ldr	r3, [r3, #0]
    65c2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    65c4:	4b16      	ldr	r3, [pc, #88]	; (6620 <_usart_read_buffer+0x70>)
    65c6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    65c8:	68fb      	ldr	r3, [r7, #12]
    65ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    65cc:	b29b      	uxth	r3, r3
    65ce:	2b00      	cmp	r3, #0
    65d0:	d003      	beq.n	65da <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    65d2:	4b14      	ldr	r3, [pc, #80]	; (6624 <_usart_read_buffer+0x74>)
    65d4:	4798      	blx	r3
		return STATUS_BUSY;
    65d6:	2305      	movs	r3, #5
    65d8:	e01e      	b.n	6618 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    65da:	68fb      	ldr	r3, [r7, #12]
    65dc:	1dba      	adds	r2, r7, #6
    65de:	8812      	ldrh	r2, [r2, #0]
    65e0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    65e2:	4b10      	ldr	r3, [pc, #64]	; (6624 <_usart_read_buffer+0x74>)
    65e4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    65e6:	68fb      	ldr	r3, [r7, #12]
    65e8:	68ba      	ldr	r2, [r7, #8]
    65ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	2232      	movs	r2, #50	; 0x32
    65f0:	2105      	movs	r1, #5
    65f2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    65f4:	697b      	ldr	r3, [r7, #20]
    65f6:	2204      	movs	r2, #4
    65f8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    65fa:	68fb      	ldr	r3, [r7, #12]
    65fc:	7a1b      	ldrb	r3, [r3, #8]
    65fe:	2b00      	cmp	r3, #0
    6600:	d002      	beq.n	6608 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    6602:	697b      	ldr	r3, [r7, #20]
    6604:	2220      	movs	r2, #32
    6606:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	7a5b      	ldrb	r3, [r3, #9]
    660c:	2b00      	cmp	r3, #0
    660e:	d002      	beq.n	6616 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6610:	697b      	ldr	r3, [r7, #20]
    6612:	2208      	movs	r2, #8
    6614:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    6616:	2300      	movs	r3, #0
}
    6618:	0018      	movs	r0, r3
    661a:	46bd      	mov	sp, r7
    661c:	b006      	add	sp, #24
    661e:	bd80      	pop	{r7, pc}
    6620:	000064e9 	.word	0x000064e9
    6624:	000064fd 	.word	0x000064fd

00006628 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6628:	b580      	push	{r7, lr}
    662a:	b084      	sub	sp, #16
    662c:	af00      	add	r7, sp, #0
    662e:	60f8      	str	r0, [r7, #12]
    6630:	60b9      	str	r1, [r7, #8]
    6632:	1dbb      	adds	r3, r7, #6
    6634:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    6636:	1dbb      	adds	r3, r7, #6
    6638:	881b      	ldrh	r3, [r3, #0]
    663a:	2b00      	cmp	r3, #0
    663c:	d101      	bne.n	6642 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    663e:	2317      	movs	r3, #23
    6640:	e010      	b.n	6664 <usart_write_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    6642:	68fb      	ldr	r3, [r7, #12]
    6644:	79db      	ldrb	r3, [r3, #7]
    6646:	2201      	movs	r2, #1
    6648:	4053      	eors	r3, r2
    664a:	b2db      	uxtb	r3, r3
    664c:	2b00      	cmp	r3, #0
    664e:	d001      	beq.n	6654 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6650:	231c      	movs	r3, #28
    6652:	e007      	b.n	6664 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    6654:	1dbb      	adds	r3, r7, #6
    6656:	881a      	ldrh	r2, [r3, #0]
    6658:	68b9      	ldr	r1, [r7, #8]
    665a:	68fb      	ldr	r3, [r7, #12]
    665c:	0018      	movs	r0, r3
    665e:	4b03      	ldr	r3, [pc, #12]	; (666c <usart_write_buffer_job+0x44>)
    6660:	4798      	blx	r3
    6662:	0003      	movs	r3, r0
}
    6664:	0018      	movs	r0, r3
    6666:	46bd      	mov	sp, r7
    6668:	b004      	add	sp, #16
    666a:	bd80      	pop	{r7, pc}
    666c:	00006555 	.word	0x00006555

00006670 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6670:	b580      	push	{r7, lr}
    6672:	b084      	sub	sp, #16
    6674:	af00      	add	r7, sp, #0
    6676:	60f8      	str	r0, [r7, #12]
    6678:	60b9      	str	r1, [r7, #8]
    667a:	1dbb      	adds	r3, r7, #6
    667c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    667e:	1dbb      	adds	r3, r7, #6
    6680:	881b      	ldrh	r3, [r3, #0]
    6682:	2b00      	cmp	r3, #0
    6684:	d101      	bne.n	668a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6686:	2317      	movs	r3, #23
    6688:	e010      	b.n	66ac <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    668a:	68fb      	ldr	r3, [r7, #12]
    668c:	799b      	ldrb	r3, [r3, #6]
    668e:	2201      	movs	r2, #1
    6690:	4053      	eors	r3, r2
    6692:	b2db      	uxtb	r3, r3
    6694:	2b00      	cmp	r3, #0
    6696:	d001      	beq.n	669c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6698:	231c      	movs	r3, #28
    669a:	e007      	b.n	66ac <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    669c:	1dbb      	adds	r3, r7, #6
    669e:	881a      	ldrh	r2, [r3, #0]
    66a0:	68b9      	ldr	r1, [r7, #8]
    66a2:	68fb      	ldr	r3, [r7, #12]
    66a4:	0018      	movs	r0, r3
    66a6:	4b03      	ldr	r3, [pc, #12]	; (66b4 <usart_read_buffer_job+0x44>)
    66a8:	4798      	blx	r3
    66aa:	0003      	movs	r3, r0
}
    66ac:	0018      	movs	r0, r3
    66ae:	46bd      	mov	sp, r7
    66b0:	b004      	add	sp, #16
    66b2:	bd80      	pop	{r7, pc}
    66b4:	000065b1 	.word	0x000065b1

000066b8 <usart_abort_job>:
 * \param[in]  transceiver_type  Transfer type to cancel
 */
void usart_abort_job(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b084      	sub	sp, #16
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
    66c0:	000a      	movs	r2, r1
    66c2:	1cfb      	adds	r3, r7, #3
    66c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	681b      	ldr	r3, [r3, #0]
    66ca:	60fb      	str	r3, [r7, #12]

	switch(transceiver_type) {
    66cc:	1cfb      	adds	r3, r7, #3
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	2b00      	cmp	r3, #0
    66d2:	d002      	beq.n	66da <usart_abort_job+0x22>
    66d4:	2b01      	cmp	r3, #1
    66d6:	d007      	beq.n	66e8 <usart_abort_job+0x30>
			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;

			break;
	}
}
    66d8:	e00d      	b.n	66f6 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    66da:	68fb      	ldr	r3, [r7, #12]
    66dc:	2204      	movs	r2, #4
    66de:	761a      	strb	r2, [r3, #24]
			module->remaining_rx_buffer_length = 0;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	2200      	movs	r2, #0
    66e4:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
    66e6:	e006      	b.n	66f6 <usart_abort_job+0x3e>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    66e8:	68fb      	ldr	r3, [r7, #12]
    66ea:	2202      	movs	r2, #2
    66ec:	761a      	strb	r2, [r3, #24]
			module->remaining_tx_buffer_length = 0;
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	2200      	movs	r2, #0
    66f2:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
    66f4:	46c0      	nop			; (mov r8, r8)
}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	46bd      	mov	sp, r7
    66fa:	b004      	add	sp, #16
    66fc:	bd80      	pop	{r7, pc}

000066fe <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    66fe:	b580      	push	{r7, lr}
    6700:	b084      	sub	sp, #16
    6702:	af00      	add	r7, sp, #0
    6704:	6078      	str	r0, [r7, #4]
    6706:	000a      	movs	r2, r1
    6708:	1cfb      	adds	r3, r7, #3
    670a:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    670c:	1cfb      	adds	r3, r7, #3
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	2b00      	cmp	r3, #0
    6712:	d002      	beq.n	671a <usart_get_job_status+0x1c>
    6714:	2b01      	cmp	r3, #1
    6716:	d007      	beq.n	6728 <usart_get_job_status+0x2a>
    6718:	e00d      	b.n	6736 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    671a:	230f      	movs	r3, #15
    671c:	18fb      	adds	r3, r7, r3
    671e:	687a      	ldr	r2, [r7, #4]
    6720:	2132      	movs	r1, #50	; 0x32
    6722:	5c52      	ldrb	r2, [r2, r1]
    6724:	701a      	strb	r2, [r3, #0]
			break;
    6726:	e00b      	b.n	6740 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    6728:	230f      	movs	r3, #15
    672a:	18fb      	adds	r3, r7, r3
    672c:	687a      	ldr	r2, [r7, #4]
    672e:	2133      	movs	r1, #51	; 0x33
    6730:	5c52      	ldrb	r2, [r2, r1]
    6732:	701a      	strb	r2, [r3, #0]
			break;
    6734:	e004      	b.n	6740 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    6736:	230f      	movs	r3, #15
    6738:	18fb      	adds	r3, r7, r3
    673a:	2217      	movs	r2, #23
    673c:	701a      	strb	r2, [r3, #0]
			break;
    673e:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    6740:	230f      	movs	r3, #15
    6742:	18fb      	adds	r3, r7, r3
    6744:	781b      	ldrb	r3, [r3, #0]
}
    6746:	0018      	movs	r0, r3
    6748:	46bd      	mov	sp, r7
    674a:	b004      	add	sp, #16
    674c:	bd80      	pop	{r7, pc}
	...

00006750 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6750:	b580      	push	{r7, lr}
    6752:	b088      	sub	sp, #32
    6754:	af00      	add	r7, sp, #0
    6756:	0002      	movs	r2, r0
    6758:	1dfb      	adds	r3, r7, #7
    675a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    675c:	1dfb      	adds	r3, r7, #7
    675e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    6760:	4ba3      	ldr	r3, [pc, #652]	; (69f0 <_usart_interrupt_handler+0x2a0>)
    6762:	0092      	lsls	r2, r2, #2
    6764:	58d3      	ldr	r3, [r2, r3]
    6766:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6768:	69bb      	ldr	r3, [r7, #24]
    676a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    676c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    676e:	69bb      	ldr	r3, [r7, #24]
    6770:	0018      	movs	r0, r3
    6772:	4ba0      	ldr	r3, [pc, #640]	; (69f4 <_usart_interrupt_handler+0x2a4>)
    6774:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6776:	697b      	ldr	r3, [r7, #20]
    6778:	7e1b      	ldrb	r3, [r3, #24]
    677a:	b2da      	uxtb	r2, r3
    677c:	2312      	movs	r3, #18
    677e:	18fb      	adds	r3, r7, r3
    6780:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    6782:	697b      	ldr	r3, [r7, #20]
    6784:	7d9b      	ldrb	r3, [r3, #22]
    6786:	b2db      	uxtb	r3, r3
    6788:	b29a      	uxth	r2, r3
    678a:	2312      	movs	r3, #18
    678c:	18fb      	adds	r3, r7, r3
    678e:	2112      	movs	r1, #18
    6790:	1879      	adds	r1, r7, r1
    6792:	8809      	ldrh	r1, [r1, #0]
    6794:	400a      	ands	r2, r1
    6796:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    6798:	69bb      	ldr	r3, [r7, #24]
    679a:	2230      	movs	r2, #48	; 0x30
    679c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    679e:	69ba      	ldr	r2, [r7, #24]
    67a0:	2131      	movs	r1, #49	; 0x31
    67a2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    67a4:	4013      	ands	r3, r2
    67a6:	b2da      	uxtb	r2, r3
    67a8:	2310      	movs	r3, #16
    67aa:	18fb      	adds	r3, r7, r3
    67ac:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    67ae:	2312      	movs	r3, #18
    67b0:	18fb      	adds	r3, r7, r3
    67b2:	881b      	ldrh	r3, [r3, #0]
    67b4:	2201      	movs	r2, #1
    67b6:	4013      	ands	r3, r2
    67b8:	d044      	beq.n	6844 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    67ba:	69bb      	ldr	r3, [r7, #24]
    67bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    67be:	b29b      	uxth	r3, r3
    67c0:	2b00      	cmp	r3, #0
    67c2:	d03c      	beq.n	683e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    67c4:	69bb      	ldr	r3, [r7, #24]
    67c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	b2da      	uxtb	r2, r3
    67cc:	231c      	movs	r3, #28
    67ce:	18fb      	adds	r3, r7, r3
    67d0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    67d2:	69bb      	ldr	r3, [r7, #24]
    67d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d6:	1c5a      	adds	r2, r3, #1
    67d8:	69bb      	ldr	r3, [r7, #24]
    67da:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67dc:	69bb      	ldr	r3, [r7, #24]
    67de:	795b      	ldrb	r3, [r3, #5]
    67e0:	2b01      	cmp	r3, #1
    67e2:	d113      	bne.n	680c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    67e4:	69bb      	ldr	r3, [r7, #24]
    67e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	b2db      	uxtb	r3, r3
    67ec:	021b      	lsls	r3, r3, #8
    67ee:	b21a      	sxth	r2, r3
    67f0:	231c      	movs	r3, #28
    67f2:	18fb      	adds	r3, r7, r3
    67f4:	2100      	movs	r1, #0
    67f6:	5e5b      	ldrsh	r3, [r3, r1]
    67f8:	4313      	orrs	r3, r2
    67fa:	b21a      	sxth	r2, r3
    67fc:	231c      	movs	r3, #28
    67fe:	18fb      	adds	r3, r7, r3
    6800:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    6802:	69bb      	ldr	r3, [r7, #24]
    6804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6806:	1c5a      	adds	r2, r3, #1
    6808:	69bb      	ldr	r3, [r7, #24]
    680a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    680c:	231c      	movs	r3, #28
    680e:	18fb      	adds	r3, r7, r3
    6810:	881b      	ldrh	r3, [r3, #0]
    6812:	05db      	lsls	r3, r3, #23
    6814:	0ddb      	lsrs	r3, r3, #23
    6816:	b29a      	uxth	r2, r3
    6818:	697b      	ldr	r3, [r7, #20]
    681a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    681c:	69bb      	ldr	r3, [r7, #24]
    681e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6820:	b29b      	uxth	r3, r3
    6822:	3b01      	subs	r3, #1
    6824:	b29b      	uxth	r3, r3
    6826:	69ba      	ldr	r2, [r7, #24]
    6828:	1c19      	adds	r1, r3, #0
    682a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    682c:	2b00      	cmp	r3, #0
    682e:	d109      	bne.n	6844 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6830:	697b      	ldr	r3, [r7, #20]
    6832:	2201      	movs	r2, #1
    6834:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6836:	697b      	ldr	r3, [r7, #20]
    6838:	2202      	movs	r2, #2
    683a:	759a      	strb	r2, [r3, #22]
    683c:	e002      	b.n	6844 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    683e:	697b      	ldr	r3, [r7, #20]
    6840:	2201      	movs	r2, #1
    6842:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6844:	2312      	movs	r3, #18
    6846:	18fb      	adds	r3, r7, r3
    6848:	881b      	ldrh	r3, [r3, #0]
    684a:	2202      	movs	r2, #2
    684c:	4013      	ands	r3, r2
    684e:	d011      	beq.n	6874 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6850:	697b      	ldr	r3, [r7, #20]
    6852:	2202      	movs	r2, #2
    6854:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    6856:	69bb      	ldr	r3, [r7, #24]
    6858:	2233      	movs	r2, #51	; 0x33
    685a:	2100      	movs	r1, #0
    685c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    685e:	2310      	movs	r3, #16
    6860:	18fb      	adds	r3, r7, r3
    6862:	881b      	ldrh	r3, [r3, #0]
    6864:	2201      	movs	r2, #1
    6866:	4013      	ands	r3, r2
    6868:	d004      	beq.n	6874 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    686a:	69bb      	ldr	r3, [r7, #24]
    686c:	68db      	ldr	r3, [r3, #12]
    686e:	69ba      	ldr	r2, [r7, #24]
    6870:	0010      	movs	r0, r2
    6872:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6874:	2312      	movs	r3, #18
    6876:	18fb      	adds	r3, r7, r3
    6878:	881b      	ldrh	r3, [r3, #0]
    687a:	2204      	movs	r2, #4
    687c:	4013      	ands	r3, r2
    687e:	d100      	bne.n	6882 <_usart_interrupt_handler+0x132>
    6880:	e0bd      	b.n	69fe <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    6882:	69bb      	ldr	r3, [r7, #24]
    6884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6886:	b29b      	uxth	r3, r3
    6888:	2b00      	cmp	r3, #0
    688a:	d100      	bne.n	688e <_usart_interrupt_handler+0x13e>
    688c:	e0b4      	b.n	69f8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    688e:	697b      	ldr	r3, [r7, #20]
    6890:	8b5b      	ldrh	r3, [r3, #26]
    6892:	b29b      	uxth	r3, r3
    6894:	b2da      	uxtb	r2, r3
    6896:	231f      	movs	r3, #31
    6898:	18fb      	adds	r3, r7, r3
    689a:	213f      	movs	r1, #63	; 0x3f
    689c:	400a      	ands	r2, r1
    689e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    68a0:	231f      	movs	r3, #31
    68a2:	18fb      	adds	r3, r7, r3
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	2208      	movs	r2, #8
    68a8:	4013      	ands	r3, r2
    68aa:	d007      	beq.n	68bc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    68ac:	231f      	movs	r3, #31
    68ae:	18fb      	adds	r3, r7, r3
    68b0:	221f      	movs	r2, #31
    68b2:	18ba      	adds	r2, r7, r2
    68b4:	7812      	ldrb	r2, [r2, #0]
    68b6:	2108      	movs	r1, #8
    68b8:	438a      	bics	r2, r1
    68ba:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    68bc:	231f      	movs	r3, #31
    68be:	18fb      	adds	r3, r7, r3
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d050      	beq.n	6968 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    68c6:	231f      	movs	r3, #31
    68c8:	18fb      	adds	r3, r7, r3
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	2202      	movs	r2, #2
    68ce:	4013      	ands	r3, r2
    68d0:	d007      	beq.n	68e2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    68d2:	69bb      	ldr	r3, [r7, #24]
    68d4:	2232      	movs	r2, #50	; 0x32
    68d6:	211a      	movs	r1, #26
    68d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    68da:	697b      	ldr	r3, [r7, #20]
    68dc:	2202      	movs	r2, #2
    68de:	835a      	strh	r2, [r3, #26]
    68e0:	e036      	b.n	6950 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    68e2:	231f      	movs	r3, #31
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	2204      	movs	r2, #4
    68ea:	4013      	ands	r3, r2
    68ec:	d007      	beq.n	68fe <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    68ee:	69bb      	ldr	r3, [r7, #24]
    68f0:	2232      	movs	r2, #50	; 0x32
    68f2:	211e      	movs	r1, #30
    68f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    68f6:	697b      	ldr	r3, [r7, #20]
    68f8:	2204      	movs	r2, #4
    68fa:	835a      	strh	r2, [r3, #26]
    68fc:	e028      	b.n	6950 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    68fe:	231f      	movs	r3, #31
    6900:	18fb      	adds	r3, r7, r3
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	2201      	movs	r2, #1
    6906:	4013      	ands	r3, r2
    6908:	d007      	beq.n	691a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    690a:	69bb      	ldr	r3, [r7, #24]
    690c:	2232      	movs	r2, #50	; 0x32
    690e:	2113      	movs	r1, #19
    6910:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6912:	697b      	ldr	r3, [r7, #20]
    6914:	2201      	movs	r2, #1
    6916:	835a      	strh	r2, [r3, #26]
    6918:	e01a      	b.n	6950 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    691a:	231f      	movs	r3, #31
    691c:	18fb      	adds	r3, r7, r3
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	2210      	movs	r2, #16
    6922:	4013      	ands	r3, r2
    6924:	d007      	beq.n	6936 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    6926:	69bb      	ldr	r3, [r7, #24]
    6928:	2232      	movs	r2, #50	; 0x32
    692a:	2142      	movs	r1, #66	; 0x42
    692c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    692e:	697b      	ldr	r3, [r7, #20]
    6930:	2210      	movs	r2, #16
    6932:	835a      	strh	r2, [r3, #26]
    6934:	e00c      	b.n	6950 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6936:	231f      	movs	r3, #31
    6938:	18fb      	adds	r3, r7, r3
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	2220      	movs	r2, #32
    693e:	4013      	ands	r3, r2
    6940:	d006      	beq.n	6950 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6942:	69bb      	ldr	r3, [r7, #24]
    6944:	2232      	movs	r2, #50	; 0x32
    6946:	2141      	movs	r1, #65	; 0x41
    6948:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    694a:	697b      	ldr	r3, [r7, #20]
    694c:	2220      	movs	r2, #32
    694e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6950:	2310      	movs	r3, #16
    6952:	18fb      	adds	r3, r7, r3
    6954:	881b      	ldrh	r3, [r3, #0]
    6956:	2204      	movs	r2, #4
    6958:	4013      	ands	r3, r2
				if (callback_status
    695a:	d050      	beq.n	69fe <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    695c:	69bb      	ldr	r3, [r7, #24]
    695e:	695b      	ldr	r3, [r3, #20]
    6960:	69ba      	ldr	r2, [r7, #24]
    6962:	0010      	movs	r0, r2
    6964:	4798      	blx	r3
    6966:	e04a      	b.n	69fe <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6968:	697b      	ldr	r3, [r7, #20]
    696a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    696c:	b29a      	uxth	r2, r3
    696e:	230e      	movs	r3, #14
    6970:	18fb      	adds	r3, r7, r3
    6972:	05d2      	lsls	r2, r2, #23
    6974:	0dd2      	lsrs	r2, r2, #23
    6976:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6978:	69bb      	ldr	r3, [r7, #24]
    697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    697c:	220e      	movs	r2, #14
    697e:	18ba      	adds	r2, r7, r2
    6980:	8812      	ldrh	r2, [r2, #0]
    6982:	b2d2      	uxtb	r2, r2
    6984:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6986:	69bb      	ldr	r3, [r7, #24]
    6988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    698a:	1c5a      	adds	r2, r3, #1
    698c:	69bb      	ldr	r3, [r7, #24]
    698e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6990:	69bb      	ldr	r3, [r7, #24]
    6992:	795b      	ldrb	r3, [r3, #5]
    6994:	2b01      	cmp	r3, #1
    6996:	d10d      	bne.n	69b4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6998:	69bb      	ldr	r3, [r7, #24]
    699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    699c:	220e      	movs	r2, #14
    699e:	18ba      	adds	r2, r7, r2
    69a0:	8812      	ldrh	r2, [r2, #0]
    69a2:	0a12      	lsrs	r2, r2, #8
    69a4:	b292      	uxth	r2, r2
    69a6:	b2d2      	uxtb	r2, r2
    69a8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    69aa:	69bb      	ldr	r3, [r7, #24]
    69ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69ae:	1c5a      	adds	r2, r3, #1
    69b0:	69bb      	ldr	r3, [r7, #24]
    69b2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    69b4:	69bb      	ldr	r3, [r7, #24]
    69b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    69b8:	b29b      	uxth	r3, r3
    69ba:	3b01      	subs	r3, #1
    69bc:	b29b      	uxth	r3, r3
    69be:	69ba      	ldr	r2, [r7, #24]
    69c0:	1c19      	adds	r1, r3, #0
    69c2:	8591      	strh	r1, [r2, #44]	; 0x2c
    69c4:	2b00      	cmp	r3, #0
    69c6:	d11a      	bne.n	69fe <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69c8:	697b      	ldr	r3, [r7, #20]
    69ca:	2204      	movs	r2, #4
    69cc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    69ce:	69bb      	ldr	r3, [r7, #24]
    69d0:	2232      	movs	r2, #50	; 0x32
    69d2:	2100      	movs	r1, #0
    69d4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    69d6:	2310      	movs	r3, #16
    69d8:	18fb      	adds	r3, r7, r3
    69da:	881b      	ldrh	r3, [r3, #0]
    69dc:	2202      	movs	r2, #2
    69de:	4013      	ands	r3, r2
					if (callback_status
    69e0:	d00d      	beq.n	69fe <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    69e2:	69bb      	ldr	r3, [r7, #24]
    69e4:	691b      	ldr	r3, [r3, #16]
    69e6:	69ba      	ldr	r2, [r7, #24]
    69e8:	0010      	movs	r0, r2
    69ea:	4798      	blx	r3
    69ec:	e007      	b.n	69fe <_usart_interrupt_handler+0x2ae>
    69ee:	46c0      	nop			; (mov r8, r8)
    69f0:	2000050c 	.word	0x2000050c
    69f4:	00006531 	.word	0x00006531
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69f8:	697b      	ldr	r3, [r7, #20]
    69fa:	2204      	movs	r2, #4
    69fc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    69fe:	2312      	movs	r3, #18
    6a00:	18fb      	adds	r3, r7, r3
    6a02:	881b      	ldrh	r3, [r3, #0]
    6a04:	2210      	movs	r2, #16
    6a06:	4013      	ands	r3, r2
    6a08:	d010      	beq.n	6a2c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a0a:	697b      	ldr	r3, [r7, #20]
    6a0c:	2210      	movs	r2, #16
    6a0e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a10:	697b      	ldr	r3, [r7, #20]
    6a12:	2210      	movs	r2, #16
    6a14:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a16:	2310      	movs	r3, #16
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	881b      	ldrh	r3, [r3, #0]
    6a1c:	2210      	movs	r2, #16
    6a1e:	4013      	ands	r3, r2
    6a20:	d004      	beq.n	6a2c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a22:	69bb      	ldr	r3, [r7, #24]
    6a24:	69db      	ldr	r3, [r3, #28]
    6a26:	69ba      	ldr	r2, [r7, #24]
    6a28:	0010      	movs	r0, r2
    6a2a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a2c:	2312      	movs	r3, #18
    6a2e:	18fb      	adds	r3, r7, r3
    6a30:	881b      	ldrh	r3, [r3, #0]
    6a32:	2220      	movs	r2, #32
    6a34:	4013      	ands	r3, r2
    6a36:	d010      	beq.n	6a5a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a38:	697b      	ldr	r3, [r7, #20]
    6a3a:	2220      	movs	r2, #32
    6a3c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a3e:	697b      	ldr	r3, [r7, #20]
    6a40:	2220      	movs	r2, #32
    6a42:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a44:	2310      	movs	r3, #16
    6a46:	18fb      	adds	r3, r7, r3
    6a48:	881b      	ldrh	r3, [r3, #0]
    6a4a:	2208      	movs	r2, #8
    6a4c:	4013      	ands	r3, r2
    6a4e:	d004      	beq.n	6a5a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a50:	69bb      	ldr	r3, [r7, #24]
    6a52:	699b      	ldr	r3, [r3, #24]
    6a54:	69ba      	ldr	r2, [r7, #24]
    6a56:	0010      	movs	r0, r2
    6a58:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a5a:	2312      	movs	r3, #18
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	881b      	ldrh	r3, [r3, #0]
    6a60:	2208      	movs	r2, #8
    6a62:	4013      	ands	r3, r2
    6a64:	d010      	beq.n	6a88 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a66:	697b      	ldr	r3, [r7, #20]
    6a68:	2208      	movs	r2, #8
    6a6a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a6c:	697b      	ldr	r3, [r7, #20]
    6a6e:	2208      	movs	r2, #8
    6a70:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a72:	2310      	movs	r3, #16
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	881b      	ldrh	r3, [r3, #0]
    6a78:	2220      	movs	r2, #32
    6a7a:	4013      	ands	r3, r2
    6a7c:	d004      	beq.n	6a88 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a7e:	69bb      	ldr	r3, [r7, #24]
    6a80:	6a1b      	ldr	r3, [r3, #32]
    6a82:	69ba      	ldr	r2, [r7, #24]
    6a84:	0010      	movs	r0, r2
    6a86:	4798      	blx	r3
		}
	}
#endif
}
    6a88:	46c0      	nop			; (mov r8, r8)
    6a8a:	46bd      	mov	sp, r7
    6a8c:	b008      	add	sp, #32
    6a8e:	bd80      	pop	{r7, pc}

00006a90 <system_pinmux_get_config_defaults>:
{
    6a90:	b580      	push	{r7, lr}
    6a92:	b082      	sub	sp, #8
    6a94:	af00      	add	r7, sp, #0
    6a96:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	2280      	movs	r2, #128	; 0x80
    6a9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	2200      	movs	r2, #0
    6aa2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6aa4:	687b      	ldr	r3, [r7, #4]
    6aa6:	2201      	movs	r2, #1
    6aa8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	2200      	movs	r2, #0
    6aae:	70da      	strb	r2, [r3, #3]
}
    6ab0:	46c0      	nop			; (mov r8, r8)
    6ab2:	46bd      	mov	sp, r7
    6ab4:	b002      	add	sp, #8
    6ab6:	bd80      	pop	{r7, pc}

00006ab8 <system_gclk_chan_get_config_defaults>:
{
    6ab8:	b580      	push	{r7, lr}
    6aba:	b082      	sub	sp, #8
    6abc:	af00      	add	r7, sp, #0
    6abe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	2200      	movs	r2, #0
    6ac4:	701a      	strb	r2, [r3, #0]
}
    6ac6:	46c0      	nop			; (mov r8, r8)
    6ac8:	46bd      	mov	sp, r7
    6aca:	b002      	add	sp, #8
    6acc:	bd80      	pop	{r7, pc}
	...

00006ad0 <system_apb_clock_set_mask>:
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b082      	sub	sp, #8
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	0002      	movs	r2, r0
    6ad8:	6039      	str	r1, [r7, #0]
    6ada:	1dfb      	adds	r3, r7, #7
    6adc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6ade:	1dfb      	adds	r3, r7, #7
    6ae0:	781b      	ldrb	r3, [r3, #0]
    6ae2:	2b01      	cmp	r3, #1
    6ae4:	d00a      	beq.n	6afc <system_apb_clock_set_mask+0x2c>
    6ae6:	2b02      	cmp	r3, #2
    6ae8:	d00f      	beq.n	6b0a <system_apb_clock_set_mask+0x3a>
    6aea:	2b00      	cmp	r3, #0
    6aec:	d114      	bne.n	6b18 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6aee:	4b0e      	ldr	r3, [pc, #56]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6af0:	4a0d      	ldr	r2, [pc, #52]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6af2:	6991      	ldr	r1, [r2, #24]
    6af4:	683a      	ldr	r2, [r7, #0]
    6af6:	430a      	orrs	r2, r1
    6af8:	619a      	str	r2, [r3, #24]
			break;
    6afa:	e00f      	b.n	6b1c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6afc:	4b0a      	ldr	r3, [pc, #40]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6afe:	4a0a      	ldr	r2, [pc, #40]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6b00:	69d1      	ldr	r1, [r2, #28]
    6b02:	683a      	ldr	r2, [r7, #0]
    6b04:	430a      	orrs	r2, r1
    6b06:	61da      	str	r2, [r3, #28]
			break;
    6b08:	e008      	b.n	6b1c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6b0a:	4b07      	ldr	r3, [pc, #28]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6b0c:	4a06      	ldr	r2, [pc, #24]	; (6b28 <system_apb_clock_set_mask+0x58>)
    6b0e:	6a11      	ldr	r1, [r2, #32]
    6b10:	683a      	ldr	r2, [r7, #0]
    6b12:	430a      	orrs	r2, r1
    6b14:	621a      	str	r2, [r3, #32]
			break;
    6b16:	e001      	b.n	6b1c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6b18:	2317      	movs	r3, #23
    6b1a:	e000      	b.n	6b1e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6b1c:	2300      	movs	r3, #0
}
    6b1e:	0018      	movs	r0, r3
    6b20:	46bd      	mov	sp, r7
    6b22:	b002      	add	sp, #8
    6b24:	bd80      	pop	{r7, pc}
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	40000400 	.word	0x40000400

00006b2c <system_is_debugger_present>:
{
    6b2c:	b580      	push	{r7, lr}
    6b2e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6b30:	4b05      	ldr	r3, [pc, #20]	; (6b48 <system_is_debugger_present+0x1c>)
    6b32:	789b      	ldrb	r3, [r3, #2]
    6b34:	b2db      	uxtb	r3, r3
    6b36:	001a      	movs	r2, r3
    6b38:	2302      	movs	r3, #2
    6b3a:	4013      	ands	r3, r2
    6b3c:	1e5a      	subs	r2, r3, #1
    6b3e:	4193      	sbcs	r3, r2
    6b40:	b2db      	uxtb	r3, r3
}
    6b42:	0018      	movs	r0, r3
    6b44:	46bd      	mov	sp, r7
    6b46:	bd80      	pop	{r7, pc}
    6b48:	41002000 	.word	0x41002000

00006b4c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6b4c:	b590      	push	{r4, r7, lr}
    6b4e:	b093      	sub	sp, #76	; 0x4c
    6b50:	af00      	add	r7, sp, #0
    6b52:	6078      	str	r0, [r7, #4]
    6b54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6b62:	231c      	movs	r3, #28
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	0018      	movs	r0, r3
    6b68:	4b85      	ldr	r3, [pc, #532]	; (6d80 <_spi_set_config+0x234>)
    6b6a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6b6c:	231c      	movs	r3, #28
    6b6e:	18fb      	adds	r3, r7, r3
    6b70:	2200      	movs	r2, #0
    6b72:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6b74:	683b      	ldr	r3, [r7, #0]
    6b76:	781b      	ldrb	r3, [r3, #0]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d103      	bne.n	6b84 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6b7c:	231c      	movs	r3, #28
    6b7e:	18fb      	adds	r3, r7, r3
    6b80:	2200      	movs	r2, #0
    6b82:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6b84:	683b      	ldr	r3, [r7, #0]
    6b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    6b88:	230c      	movs	r3, #12
    6b8a:	18fb      	adds	r3, r7, r3
    6b8c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6b8e:	683b      	ldr	r3, [r7, #0]
    6b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    6b92:	230c      	movs	r3, #12
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6b98:	683b      	ldr	r3, [r7, #0]
    6b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6b9c:	230c      	movs	r3, #12
    6b9e:	18fb      	adds	r3, r7, r3
    6ba0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6ba2:	683b      	ldr	r3, [r7, #0]
    6ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6ba6:	230c      	movs	r3, #12
    6ba8:	18fb      	adds	r3, r7, r3
    6baa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6bac:	2347      	movs	r3, #71	; 0x47
    6bae:	18fb      	adds	r3, r7, r3
    6bb0:	2200      	movs	r2, #0
    6bb2:	701a      	strb	r2, [r3, #0]
    6bb4:	e02c      	b.n	6c10 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6bb6:	2347      	movs	r3, #71	; 0x47
    6bb8:	18fb      	adds	r3, r7, r3
    6bba:	781a      	ldrb	r2, [r3, #0]
    6bbc:	230c      	movs	r3, #12
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	0092      	lsls	r2, r2, #2
    6bc2:	58d3      	ldr	r3, [r2, r3]
    6bc4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d109      	bne.n	6be0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6bcc:	2347      	movs	r3, #71	; 0x47
    6bce:	18fb      	adds	r3, r7, r3
    6bd0:	781a      	ldrb	r2, [r3, #0]
    6bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6bd4:	0011      	movs	r1, r2
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b6a      	ldr	r3, [pc, #424]	; (6d84 <_spi_set_config+0x238>)
    6bda:	4798      	blx	r3
    6bdc:	0003      	movs	r3, r0
    6bde:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6be2:	3301      	adds	r3, #1
    6be4:	d00d      	beq.n	6c02 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6be8:	b2da      	uxtb	r2, r3
    6bea:	231c      	movs	r3, #28
    6bec:	18fb      	adds	r3, r7, r3
    6bee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bf2:	0c1b      	lsrs	r3, r3, #16
    6bf4:	b2db      	uxtb	r3, r3
    6bf6:	221c      	movs	r2, #28
    6bf8:	18ba      	adds	r2, r7, r2
    6bfa:	0011      	movs	r1, r2
    6bfc:	0018      	movs	r0, r3
    6bfe:	4b62      	ldr	r3, [pc, #392]	; (6d88 <_spi_set_config+0x23c>)
    6c00:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6c02:	2347      	movs	r3, #71	; 0x47
    6c04:	18fb      	adds	r3, r7, r3
    6c06:	781a      	ldrb	r2, [r3, #0]
    6c08:	2347      	movs	r3, #71	; 0x47
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	3201      	adds	r2, #1
    6c0e:	701a      	strb	r2, [r3, #0]
    6c10:	2347      	movs	r3, #71	; 0x47
    6c12:	18fb      	adds	r3, r7, r3
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	2b03      	cmp	r3, #3
    6c18:	d9cd      	bls.n	6bb6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    6c1a:	683b      	ldr	r3, [r7, #0]
    6c1c:	781a      	ldrb	r2, [r3, #0]
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    6c22:	683b      	ldr	r3, [r7, #0]
    6c24:	7c1a      	ldrb	r2, [r3, #16]
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    6c2a:	683b      	ldr	r3, [r7, #0]
    6c2c:	7c9a      	ldrb	r2, [r3, #18]
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    6c32:	683b      	ldr	r3, [r7, #0]
    6c34:	7d1a      	ldrb	r2, [r3, #20]
    6c36:	687b      	ldr	r3, [r7, #4]
    6c38:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    6c3a:	230a      	movs	r3, #10
    6c3c:	18fb      	adds	r3, r7, r3
    6c3e:	2200      	movs	r2, #0
    6c40:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    6c42:	2300      	movs	r3, #0
    6c44:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6c46:	2300      	movs	r3, #0
    6c48:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6c4a:	683b      	ldr	r3, [r7, #0]
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	2b01      	cmp	r3, #1
    6c50:	d129      	bne.n	6ca6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	681b      	ldr	r3, [r3, #0]
    6c56:	0018      	movs	r0, r3
    6c58:	4b4c      	ldr	r3, [pc, #304]	; (6d8c <_spi_set_config+0x240>)
    6c5a:	4798      	blx	r3
    6c5c:	0003      	movs	r3, r0
    6c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c62:	3314      	adds	r3, #20
    6c64:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c68:	b2db      	uxtb	r3, r3
    6c6a:	0018      	movs	r0, r3
    6c6c:	4b48      	ldr	r3, [pc, #288]	; (6d90 <_spi_set_config+0x244>)
    6c6e:	4798      	blx	r3
    6c70:	0003      	movs	r3, r0
    6c72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6c74:	683b      	ldr	r3, [r7, #0]
    6c76:	699b      	ldr	r3, [r3, #24]
    6c78:	2223      	movs	r2, #35	; 0x23
    6c7a:	18bc      	adds	r4, r7, r2
    6c7c:	220a      	movs	r2, #10
    6c7e:	18ba      	adds	r2, r7, r2
    6c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c82:	0018      	movs	r0, r3
    6c84:	4b43      	ldr	r3, [pc, #268]	; (6d94 <_spi_set_config+0x248>)
    6c86:	4798      	blx	r3
    6c88:	0003      	movs	r3, r0
    6c8a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6c8c:	2323      	movs	r3, #35	; 0x23
    6c8e:	18fb      	adds	r3, r7, r3
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d001      	beq.n	6c9a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6c96:	2317      	movs	r3, #23
    6c98:	e06d      	b.n	6d76 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6c9a:	230a      	movs	r3, #10
    6c9c:	18fb      	adds	r3, r7, r3
    6c9e:	881b      	ldrh	r3, [r3, #0]
    6ca0:	b2da      	uxtb	r2, r3
    6ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ca4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    6ca6:	683b      	ldr	r3, [r7, #0]
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	2b00      	cmp	r3, #0
    6cac:	d11a      	bne.n	6ce4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    6cae:	683b      	ldr	r3, [r7, #0]
    6cb0:	699b      	ldr	r3, [r3, #24]
    6cb2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    6cb4:	683b      	ldr	r3, [r7, #0]
    6cb6:	8b9b      	ldrh	r3, [r3, #28]
    6cb8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    6cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    6cbe:	683a      	ldr	r2, [r7, #0]
    6cc0:	7f92      	ldrb	r2, [r2, #30]
    6cc2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    6cc4:	683a      	ldr	r2, [r7, #0]
    6cc6:	7fd2      	ldrb	r2, [r2, #31]
    6cc8:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    6cca:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    6ccc:	431a      	orrs	r2, r3
    6cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6cd0:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    6cd2:	683b      	ldr	r3, [r7, #0]
    6cd4:	2220      	movs	r2, #32
    6cd6:	5c9b      	ldrb	r3, [r3, r2]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d003      	beq.n	6ce4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    6cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6cde:	2240      	movs	r2, #64	; 0x40
    6ce0:	4313      	orrs	r3, r2
    6ce2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6ce4:	683b      	ldr	r3, [r7, #0]
    6ce6:	685b      	ldr	r3, [r3, #4]
    6ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6cea:	4313      	orrs	r3, r2
    6cec:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    6cee:	683b      	ldr	r3, [r7, #0]
    6cf0:	689b      	ldr	r3, [r3, #8]
    6cf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6cf4:	4313      	orrs	r3, r2
    6cf6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6cf8:	683b      	ldr	r3, [r7, #0]
    6cfa:	68db      	ldr	r3, [r3, #12]
    6cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6cfe:	4313      	orrs	r3, r2
    6d00:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6d02:	683b      	ldr	r3, [r7, #0]
    6d04:	7c1b      	ldrb	r3, [r3, #16]
    6d06:	001a      	movs	r2, r3
    6d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d0a:	4313      	orrs	r3, r2
    6d0c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6d0e:	683b      	ldr	r3, [r7, #0]
    6d10:	7c5b      	ldrb	r3, [r3, #17]
    6d12:	2b00      	cmp	r3, #0
    6d14:	d103      	bne.n	6d1e <_spi_set_config+0x1d2>
    6d16:	4b20      	ldr	r3, [pc, #128]	; (6d98 <_spi_set_config+0x24c>)
    6d18:	4798      	blx	r3
    6d1a:	1e03      	subs	r3, r0, #0
    6d1c:	d003      	beq.n	6d26 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d20:	2280      	movs	r2, #128	; 0x80
    6d22:	4313      	orrs	r3, r2
    6d24:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    6d26:	683b      	ldr	r3, [r7, #0]
    6d28:	7c9b      	ldrb	r3, [r3, #18]
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d004      	beq.n	6d38 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d30:	2280      	movs	r2, #128	; 0x80
    6d32:	0292      	lsls	r2, r2, #10
    6d34:	4313      	orrs	r3, r2
    6d36:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    6d38:	683b      	ldr	r3, [r7, #0]
    6d3a:	7cdb      	ldrb	r3, [r3, #19]
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d004      	beq.n	6d4a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d42:	2280      	movs	r2, #128	; 0x80
    6d44:	0092      	lsls	r2, r2, #2
    6d46:	4313      	orrs	r3, r2
    6d48:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    6d4a:	683b      	ldr	r3, [r7, #0]
    6d4c:	7d1b      	ldrb	r3, [r3, #20]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d004      	beq.n	6d5c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d54:	2280      	movs	r2, #128	; 0x80
    6d56:	0192      	lsls	r2, r2, #6
    6d58:	4313      	orrs	r3, r2
    6d5a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    6d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d5e:	681a      	ldr	r2, [r3, #0]
    6d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d62:	431a      	orrs	r2, r3
    6d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d66:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    6d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d6a:	685a      	ldr	r2, [r3, #4]
    6d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d6e:	431a      	orrs	r2, r3
    6d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d72:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    6d74:	2300      	movs	r3, #0
}
    6d76:	0018      	movs	r0, r3
    6d78:	46bd      	mov	sp, r7
    6d7a:	b013      	add	sp, #76	; 0x4c
    6d7c:	bd90      	pop	{r4, r7, pc}
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	00006a91 	.word	0x00006a91
    6d84:	00007845 	.word	0x00007845
    6d88:	000088d9 	.word	0x000088d9
    6d8c:	00007a01 	.word	0x00007a01
    6d90:	00008711 	.word	0x00008711
    6d94:	0000754f 	.word	0x0000754f
    6d98:	00006b2d 	.word	0x00006b2d

00006d9c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6d9c:	b590      	push	{r4, r7, lr}
    6d9e:	b08b      	sub	sp, #44	; 0x2c
    6da0:	af00      	add	r7, sp, #0
    6da2:	60f8      	str	r0, [r7, #12]
    6da4:	60b9      	str	r1, [r7, #8]
    6da6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	68ba      	ldr	r2, [r7, #8]
    6dac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    6dae:	68fb      	ldr	r3, [r7, #12]
    6db0:	681b      	ldr	r3, [r3, #0]
    6db2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6db4:	6a3b      	ldr	r3, [r7, #32]
    6db6:	681b      	ldr	r3, [r3, #0]
    6db8:	2202      	movs	r2, #2
    6dba:	4013      	ands	r3, r2
    6dbc:	d001      	beq.n	6dc2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    6dbe:	231c      	movs	r3, #28
    6dc0:	e0a6      	b.n	6f10 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6dc2:	6a3b      	ldr	r3, [r7, #32]
    6dc4:	681b      	ldr	r3, [r3, #0]
    6dc6:	2201      	movs	r2, #1
    6dc8:	4013      	ands	r3, r2
    6dca:	d001      	beq.n	6dd0 <spi_init+0x34>
		return STATUS_BUSY;
    6dcc:	2305      	movs	r3, #5
    6dce:	e09f      	b.n	6f10 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6dd0:	68fb      	ldr	r3, [r7, #12]
    6dd2:	681b      	ldr	r3, [r3, #0]
    6dd4:	0018      	movs	r0, r3
    6dd6:	4b50      	ldr	r3, [pc, #320]	; (6f18 <spi_init+0x17c>)
    6dd8:	4798      	blx	r3
    6dda:	0003      	movs	r3, r0
    6ddc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6dde:	69fb      	ldr	r3, [r7, #28]
    6de0:	3302      	adds	r3, #2
    6de2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6de4:	69fb      	ldr	r3, [r7, #28]
    6de6:	3314      	adds	r3, #20
    6de8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6dea:	2201      	movs	r2, #1
    6dec:	69bb      	ldr	r3, [r7, #24]
    6dee:	409a      	lsls	r2, r3
    6df0:	0013      	movs	r3, r2
    6df2:	0019      	movs	r1, r3
    6df4:	2002      	movs	r0, #2
    6df6:	4b49      	ldr	r3, [pc, #292]	; (6f1c <spi_init+0x180>)
    6df8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6dfa:	2310      	movs	r3, #16
    6dfc:	18fb      	adds	r3, r7, r3
    6dfe:	0018      	movs	r0, r3
    6e00:	4b47      	ldr	r3, [pc, #284]	; (6f20 <spi_init+0x184>)
    6e02:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	2224      	movs	r2, #36	; 0x24
    6e08:	5c9a      	ldrb	r2, [r3, r2]
    6e0a:	2310      	movs	r3, #16
    6e0c:	18fb      	adds	r3, r7, r3
    6e0e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6e10:	697b      	ldr	r3, [r7, #20]
    6e12:	b2db      	uxtb	r3, r3
    6e14:	2210      	movs	r2, #16
    6e16:	18ba      	adds	r2, r7, r2
    6e18:	0011      	movs	r1, r2
    6e1a:	0018      	movs	r0, r3
    6e1c:	4b41      	ldr	r3, [pc, #260]	; (6f24 <spi_init+0x188>)
    6e1e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6e20:	697b      	ldr	r3, [r7, #20]
    6e22:	b2db      	uxtb	r3, r3
    6e24:	0018      	movs	r0, r3
    6e26:	4b40      	ldr	r3, [pc, #256]	; (6f28 <spi_init+0x18c>)
    6e28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	2224      	movs	r2, #36	; 0x24
    6e2e:	5c9b      	ldrb	r3, [r3, r2]
    6e30:	2100      	movs	r1, #0
    6e32:	0018      	movs	r0, r3
    6e34:	4b3d      	ldr	r3, [pc, #244]	; (6f2c <spi_init+0x190>)
    6e36:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	781b      	ldrb	r3, [r3, #0]
    6e3c:	2b01      	cmp	r3, #1
    6e3e:	d105      	bne.n	6e4c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6e40:	6a3b      	ldr	r3, [r7, #32]
    6e42:	681b      	ldr	r3, [r3, #0]
    6e44:	220c      	movs	r2, #12
    6e46:	431a      	orrs	r2, r3
    6e48:	6a3b      	ldr	r3, [r7, #32]
    6e4a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d105      	bne.n	6e60 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    6e54:	6a3b      	ldr	r3, [r7, #32]
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	2208      	movs	r2, #8
    6e5a:	431a      	orrs	r2, r3
    6e5c:	6a3b      	ldr	r3, [r7, #32]
    6e5e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    6e60:	2327      	movs	r3, #39	; 0x27
    6e62:	18fb      	adds	r3, r7, r3
    6e64:	2200      	movs	r2, #0
    6e66:	701a      	strb	r2, [r3, #0]
    6e68:	e010      	b.n	6e8c <spi_init+0xf0>
		module->callback[i]        = NULL;
    6e6a:	2327      	movs	r3, #39	; 0x27
    6e6c:	18fb      	adds	r3, r7, r3
    6e6e:	781b      	ldrb	r3, [r3, #0]
    6e70:	68fa      	ldr	r2, [r7, #12]
    6e72:	3302      	adds	r3, #2
    6e74:	009b      	lsls	r3, r3, #2
    6e76:	18d3      	adds	r3, r2, r3
    6e78:	3304      	adds	r3, #4
    6e7a:	2200      	movs	r2, #0
    6e7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    6e7e:	2327      	movs	r3, #39	; 0x27
    6e80:	18fb      	adds	r3, r7, r3
    6e82:	781a      	ldrb	r2, [r3, #0]
    6e84:	2327      	movs	r3, #39	; 0x27
    6e86:	18fb      	adds	r3, r7, r3
    6e88:	3201      	adds	r2, #1
    6e8a:	701a      	strb	r2, [r3, #0]
    6e8c:	2327      	movs	r3, #39	; 0x27
    6e8e:	18fb      	adds	r3, r7, r3
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	2b06      	cmp	r3, #6
    6e94:	d9e9      	bls.n	6e6a <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    6e96:	68fb      	ldr	r3, [r7, #12]
    6e98:	2200      	movs	r2, #0
    6e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    6e9c:	68fb      	ldr	r3, [r7, #12]
    6e9e:	2200      	movs	r2, #0
    6ea0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    6ea2:	68fb      	ldr	r3, [r7, #12]
    6ea4:	2200      	movs	r2, #0
    6ea6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    6ea8:	68fb      	ldr	r3, [r7, #12]
    6eaa:	2200      	movs	r2, #0
    6eac:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	2236      	movs	r2, #54	; 0x36
    6eb2:	2100      	movs	r1, #0
    6eb4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    6eb6:	68fb      	ldr	r3, [r7, #12]
    6eb8:	2237      	movs	r2, #55	; 0x37
    6eba:	2100      	movs	r1, #0
    6ebc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    6ebe:	68fb      	ldr	r3, [r7, #12]
    6ec0:	2238      	movs	r2, #56	; 0x38
    6ec2:	2100      	movs	r1, #0
    6ec4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    6ec6:	68fb      	ldr	r3, [r7, #12]
    6ec8:	2203      	movs	r2, #3
    6eca:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    6ecc:	68fb      	ldr	r3, [r7, #12]
    6ece:	2200      	movs	r2, #0
    6ed0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    6ed2:	68fb      	ldr	r3, [r7, #12]
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	2213      	movs	r2, #19
    6ed8:	18bc      	adds	r4, r7, r2
    6eda:	0018      	movs	r0, r3
    6edc:	4b0e      	ldr	r3, [pc, #56]	; (6f18 <spi_init+0x17c>)
    6ede:	4798      	blx	r3
    6ee0:	0003      	movs	r3, r0
    6ee2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    6ee4:	4a12      	ldr	r2, [pc, #72]	; (6f30 <spi_init+0x194>)
    6ee6:	2313      	movs	r3, #19
    6ee8:	18fb      	adds	r3, r7, r3
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	0011      	movs	r1, r2
    6eee:	0018      	movs	r0, r3
    6ef0:	4b10      	ldr	r3, [pc, #64]	; (6f34 <spi_init+0x198>)
    6ef2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6ef4:	2313      	movs	r3, #19
    6ef6:	18fb      	adds	r3, r7, r3
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	4b0f      	ldr	r3, [pc, #60]	; (6f38 <spi_init+0x19c>)
    6efc:	0092      	lsls	r2, r2, #2
    6efe:	68f9      	ldr	r1, [r7, #12]
    6f00:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    6f02:	687a      	ldr	r2, [r7, #4]
    6f04:	68fb      	ldr	r3, [r7, #12]
    6f06:	0011      	movs	r1, r2
    6f08:	0018      	movs	r0, r3
    6f0a:	4b0c      	ldr	r3, [pc, #48]	; (6f3c <spi_init+0x1a0>)
    6f0c:	4798      	blx	r3
    6f0e:	0003      	movs	r3, r0
}
    6f10:	0018      	movs	r0, r3
    6f12:	46bd      	mov	sp, r7
    6f14:	b00b      	add	sp, #44	; 0x2c
    6f16:	bd90      	pop	{r4, r7, pc}
    6f18:	00007a01 	.word	0x00007a01
    6f1c:	00006ad1 	.word	0x00006ad1
    6f20:	00006ab9 	.word	0x00006ab9
    6f24:	000085ed 	.word	0x000085ed
    6f28:	00008631 	.word	0x00008631
    6f2c:	000077b9 	.word	0x000077b9
    6f30:	0000714d 	.word	0x0000714d
    6f34:	00007a65 	.word	0x00007a65
    6f38:	2000050c 	.word	0x2000050c
    6f3c:	00006b4d 	.word	0x00006b4d

00006f40 <_spi_write_buffer>:
 */
static void _spi_write_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b086      	sub	sp, #24
    6f44:	af00      	add	r7, sp, #0
    6f46:	60f8      	str	r0, [r7, #12]
    6f48:	60b9      	str	r1, [r7, #8]
    6f4a:	1dbb      	adds	r3, r7, #6
    6f4c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    6f4e:	68fb      	ldr	r3, [r7, #12]
    6f50:	1dba      	adds	r2, r7, #6
    6f52:	8812      	ldrh	r2, [r2, #0]
    6f54:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	1dba      	adds	r2, r7, #6
    6f5a:	8812      	ldrh	r2, [r2, #0]
    6f5c:	865a      	strh	r2, [r3, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	68ba      	ldr	r2, [r7, #8]
    6f62:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	2238      	movs	r2, #56	; 0x38
    6f68:	2105      	movs	r1, #5
    6f6a:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_WRITE;
    6f6c:	68fb      	ldr	r3, [r7, #12]
    6f6e:	2201      	movs	r2, #1
    6f70:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    6f72:	68fb      	ldr	r3, [r7, #12]
    6f74:	681b      	ldr	r3, [r3, #0]
    6f76:	617b      	str	r3, [r7, #20]

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    6f78:	68fb      	ldr	r3, [r7, #12]
    6f7a:	795b      	ldrb	r3, [r3, #5]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d105      	bne.n	6f8c <_spi_write_buffer+0x4c>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6f80:	697b      	ldr	r3, [r7, #20]
    6f82:	2202      	movs	r2, #2
    6f84:	761a      	strb	r2, [r3, #24]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6f86:	697b      	ldr	r3, [r7, #20]
    6f88:	2202      	movs	r2, #2
    6f8a:	759a      	strb	r2, [r3, #22]
	}
#  endif

	if (module->receiver_enabled) {
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	79db      	ldrb	r3, [r3, #7]
    6f90:	2b00      	cmp	r3, #0
    6f92:	d003      	beq.n	6f9c <_spi_write_buffer+0x5c>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    6f94:	697b      	ldr	r3, [r7, #20]
    6f96:	2205      	movs	r2, #5
    6f98:	759a      	strb	r2, [r3, #22]
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
}
    6f9a:	e002      	b.n	6fa2 <_spi_write_buffer+0x62>
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    6f9c:	697b      	ldr	r3, [r7, #20]
    6f9e:	2201      	movs	r2, #1
    6fa0:	759a      	strb	r2, [r3, #22]
}
    6fa2:	46c0      	nop			; (mov r8, r8)
    6fa4:	46bd      	mov	sp, r7
    6fa6:	b006      	add	sp, #24
    6fa8:	bd80      	pop	{r7, pc}
	...

00006fac <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6fac:	b580      	push	{r7, lr}
    6fae:	b084      	sub	sp, #16
    6fb0:	af00      	add	r7, sp, #0
    6fb2:	60f8      	str	r0, [r7, #12]
    6fb4:	60b9      	str	r1, [r7, #8]
    6fb6:	1dbb      	adds	r3, r7, #6
    6fb8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    6fba:	1dbb      	adds	r3, r7, #6
    6fbc:	881b      	ldrh	r3, [r3, #0]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d101      	bne.n	6fc6 <spi_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6fc2:	2317      	movs	r3, #23
    6fc4:	e00f      	b.n	6fe6 <spi_write_buffer_job+0x3a>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    6fc6:	68fb      	ldr	r3, [r7, #12]
    6fc8:	2238      	movs	r2, #56	; 0x38
    6fca:	5c9b      	ldrb	r3, [r3, r2]
    6fcc:	b2db      	uxtb	r3, r3
    6fce:	2b05      	cmp	r3, #5
    6fd0:	d101      	bne.n	6fd6 <spi_write_buffer_job+0x2a>
		return STATUS_BUSY;
    6fd2:	2305      	movs	r3, #5
    6fd4:	e007      	b.n	6fe6 <spi_write_buffer_job+0x3a>
	}

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);
    6fd6:	1dbb      	adds	r3, r7, #6
    6fd8:	881a      	ldrh	r2, [r3, #0]
    6fda:	68b9      	ldr	r1, [r7, #8]
    6fdc:	68fb      	ldr	r3, [r7, #12]
    6fde:	0018      	movs	r0, r3
    6fe0:	4b03      	ldr	r3, [pc, #12]	; (6ff0 <spi_write_buffer_job+0x44>)
    6fe2:	4798      	blx	r3

	return STATUS_OK;
    6fe4:	2300      	movs	r3, #0
}
    6fe6:	0018      	movs	r0, r3
    6fe8:	46bd      	mov	sp, r7
    6fea:	b004      	add	sp, #16
    6fec:	bd80      	pop	{r7, pc}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	00006f41 	.word	0x00006f41

00006ff4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b084      	sub	sp, #16
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	681b      	ldr	r3, [r3, #0]
    7000:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	b2da      	uxtb	r2, r3
    700a:	230e      	movs	r3, #14
    700c:	18fb      	adds	r3, r7, r3
    700e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7014:	1c5a      	adds	r2, r3, #1
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	799b      	ldrb	r3, [r3, #6]
    701e:	2b01      	cmp	r3, #1
    7020:	d113      	bne.n	704a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    7022:	687b      	ldr	r3, [r7, #4]
    7024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	b2db      	uxtb	r3, r3
    702a:	021b      	lsls	r3, r3, #8
    702c:	b21a      	sxth	r2, r3
    702e:	230e      	movs	r3, #14
    7030:	18fb      	adds	r3, r7, r3
    7032:	2100      	movs	r1, #0
    7034:	5e5b      	ldrsh	r3, [r3, r1]
    7036:	4313      	orrs	r3, r2
    7038:	b21a      	sxth	r2, r3
    703a:	230e      	movs	r3, #14
    703c:	18fb      	adds	r3, r7, r3
    703e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7044:	1c5a      	adds	r2, r3, #1
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    704a:	230e      	movs	r3, #14
    704c:	18fb      	adds	r3, r7, r3
    704e:	881b      	ldrh	r3, [r3, #0]
    7050:	05db      	lsls	r3, r3, #23
    7052:	0dda      	lsrs	r2, r3, #23
    7054:	68bb      	ldr	r3, [r7, #8]
    7056:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    705c:	b29b      	uxth	r3, r3
    705e:	3b01      	subs	r3, #1
    7060:	b29a      	uxth	r2, r3
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7066:	46c0      	nop			; (mov r8, r8)
    7068:	46bd      	mov	sp, r7
    706a:	b004      	add	sp, #16
    706c:	bd80      	pop	{r7, pc}
	...

00007070 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    7070:	b580      	push	{r7, lr}
    7072:	b084      	sub	sp, #16
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    707e:	4b08      	ldr	r3, [pc, #32]	; (70a0 <_spi_write_dummy+0x30>)
    7080:	881b      	ldrh	r3, [r3, #0]
    7082:	001a      	movs	r2, r3
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    708c:	b29b      	uxth	r3, r3
    708e:	3b01      	subs	r3, #1
    7090:	b29a      	uxth	r2, r3
    7092:	687b      	ldr	r3, [r7, #4]
    7094:	865a      	strh	r2, [r3, #50]	; 0x32
}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	46bd      	mov	sp, r7
    709a:	b004      	add	sp, #16
    709c:	bd80      	pop	{r7, pc}
    709e:	46c0      	nop			; (mov r8, r8)
    70a0:	20000508 	.word	0x20000508

000070a4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    70a4:	b580      	push	{r7, lr}
    70a6:	b084      	sub	sp, #16
    70a8:	af00      	add	r7, sp, #0
    70aa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	681b      	ldr	r3, [r3, #0]
    70b0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    70b2:	230a      	movs	r3, #10
    70b4:	18fb      	adds	r3, r7, r3
    70b6:	2200      	movs	r2, #0
    70b8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    70be:	230a      	movs	r3, #10
    70c0:	18fb      	adds	r3, r7, r3
    70c2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    70c8:	b29b      	uxth	r3, r3
    70ca:	3b01      	subs	r3, #1
    70cc:	b29a      	uxth	r2, r3
    70ce:	687b      	ldr	r3, [r7, #4]
    70d0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	46bd      	mov	sp, r7
    70d6:	b004      	add	sp, #16
    70d8:	bd80      	pop	{r7, pc}

000070da <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    70da:	b580      	push	{r7, lr}
    70dc:	b084      	sub	sp, #16
    70de:	af00      	add	r7, sp, #0
    70e0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	681b      	ldr	r3, [r3, #0]
    70e6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    70e8:	68fb      	ldr	r3, [r7, #12]
    70ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ec:	b29a      	uxth	r2, r3
    70ee:	230a      	movs	r3, #10
    70f0:	18fb      	adds	r3, r7, r3
    70f2:	05d2      	lsls	r2, r2, #23
    70f4:	0dd2      	lsrs	r2, r2, #23
    70f6:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70fc:	220a      	movs	r2, #10
    70fe:	18ba      	adds	r2, r7, r2
    7100:	8812      	ldrh	r2, [r2, #0]
    7102:	b2d2      	uxtb	r2, r2
    7104:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    710a:	1c5a      	adds	r2, r3, #1
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7110:	687b      	ldr	r3, [r7, #4]
    7112:	799b      	ldrb	r3, [r3, #6]
    7114:	2b01      	cmp	r3, #1
    7116:	d10d      	bne.n	7134 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    711c:	220a      	movs	r2, #10
    711e:	18ba      	adds	r2, r7, r2
    7120:	8812      	ldrh	r2, [r2, #0]
    7122:	0a12      	lsrs	r2, r2, #8
    7124:	b292      	uxth	r2, r2
    7126:	b2d2      	uxtb	r2, r2
    7128:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    712e:	1c5a      	adds	r2, r3, #1
    7130:	687b      	ldr	r3, [r7, #4]
    7132:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    7138:	b29b      	uxth	r3, r3
    713a:	3b01      	subs	r3, #1
    713c:	b29a      	uxth	r2, r3
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	861a      	strh	r2, [r3, #48]	; 0x30
}
    7142:	46c0      	nop			; (mov r8, r8)
    7144:	46bd      	mov	sp, r7
    7146:	b004      	add	sp, #16
    7148:	bd80      	pop	{r7, pc}
	...

0000714c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    714c:	b580      	push	{r7, lr}
    714e:	b086      	sub	sp, #24
    7150:	af00      	add	r7, sp, #0
    7152:	0002      	movs	r2, r0
    7154:	1dfb      	adds	r3, r7, #7
    7156:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    7158:	1dfb      	adds	r3, r7, #7
    715a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    715c:	4bb9      	ldr	r3, [pc, #740]	; (7444 <_spi_interrupt_handler+0x2f8>)
    715e:	0092      	lsls	r2, r2, #2
    7160:	58d3      	ldr	r3, [r2, r3]
    7162:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7164:	697b      	ldr	r3, [r7, #20]
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    716a:	697b      	ldr	r3, [r7, #20]
    716c:	2237      	movs	r2, #55	; 0x37
    716e:	5c9a      	ldrb	r2, [r3, r2]
    7170:	697b      	ldr	r3, [r7, #20]
    7172:	2136      	movs	r1, #54	; 0x36
    7174:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    7176:	230f      	movs	r3, #15
    7178:	18fb      	adds	r3, r7, r3
    717a:	400a      	ands	r2, r1
    717c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    717e:	693b      	ldr	r3, [r7, #16]
    7180:	7e1b      	ldrb	r3, [r3, #24]
    7182:	b2da      	uxtb	r2, r3
    7184:	230c      	movs	r3, #12
    7186:	18fb      	adds	r3, r7, r3
    7188:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    718a:	693b      	ldr	r3, [r7, #16]
    718c:	7d9b      	ldrb	r3, [r3, #22]
    718e:	b2db      	uxtb	r3, r3
    7190:	b29a      	uxth	r2, r3
    7192:	230c      	movs	r3, #12
    7194:	18fb      	adds	r3, r7, r3
    7196:	210c      	movs	r1, #12
    7198:	1879      	adds	r1, r7, r1
    719a:	8809      	ldrh	r1, [r1, #0]
    719c:	400a      	ands	r2, r1
    719e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    71a0:	230c      	movs	r3, #12
    71a2:	18fb      	adds	r3, r7, r3
    71a4:	881b      	ldrh	r3, [r3, #0]
    71a6:	2201      	movs	r2, #1
    71a8:	4013      	ands	r3, r2
    71aa:	d041      	beq.n	7230 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    71ac:	697b      	ldr	r3, [r7, #20]
    71ae:	795b      	ldrb	r3, [r3, #5]
    71b0:	2b01      	cmp	r3, #1
    71b2:	d110      	bne.n	71d6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    71b4:	697b      	ldr	r3, [r7, #20]
    71b6:	7a5b      	ldrb	r3, [r3, #9]
    71b8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    71ba:	2b00      	cmp	r3, #0
    71bc:	d10b      	bne.n	71d6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    71be:	697b      	ldr	r3, [r7, #20]
    71c0:	0018      	movs	r0, r3
    71c2:	4ba1      	ldr	r3, [pc, #644]	; (7448 <_spi_interrupt_handler+0x2fc>)
    71c4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    71c6:	697b      	ldr	r3, [r7, #20]
    71c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    71ca:	b29b      	uxth	r3, r3
    71cc:	2b00      	cmp	r3, #0
    71ce:	d102      	bne.n	71d6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    71d0:	693b      	ldr	r3, [r7, #16]
    71d2:	2201      	movs	r2, #1
    71d4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    71d6:	697b      	ldr	r3, [r7, #20]
    71d8:	795b      	ldrb	r3, [r3, #5]
		if (0
    71da:	2b01      	cmp	r3, #1
    71dc:	d104      	bne.n	71e8 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    71de:	697b      	ldr	r3, [r7, #20]
    71e0:	7a5b      	ldrb	r3, [r3, #9]
    71e2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    71e4:	2b00      	cmp	r3, #0
    71e6:	d108      	bne.n	71fa <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    71e8:	697b      	ldr	r3, [r7, #20]
    71ea:	795b      	ldrb	r3, [r3, #5]
    71ec:	2b00      	cmp	r3, #0
    71ee:	d11f      	bne.n	7230 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    71f0:	697b      	ldr	r3, [r7, #20]
    71f2:	7a5b      	ldrb	r3, [r3, #9]
    71f4:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    71f6:	2b00      	cmp	r3, #0
    71f8:	d01a      	beq.n	7230 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    71fa:	697b      	ldr	r3, [r7, #20]
    71fc:	0018      	movs	r0, r3
    71fe:	4b93      	ldr	r3, [pc, #588]	; (744c <_spi_interrupt_handler+0x300>)
    7200:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    7202:	697b      	ldr	r3, [r7, #20]
    7204:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7206:	b29b      	uxth	r3, r3
    7208:	2b00      	cmp	r3, #0
    720a:	d111      	bne.n	7230 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    720c:	693b      	ldr	r3, [r7, #16]
    720e:	2201      	movs	r2, #1
    7210:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    7212:	697b      	ldr	r3, [r7, #20]
    7214:	7a5b      	ldrb	r3, [r3, #9]
    7216:	b2db      	uxtb	r3, r3
    7218:	2b01      	cmp	r3, #1
    721a:	d109      	bne.n	7230 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    721c:	697b      	ldr	r3, [r7, #20]
    721e:	79db      	ldrb	r3, [r3, #7]
    7220:	2201      	movs	r2, #1
    7222:	4053      	eors	r3, r2
    7224:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    7226:	2b00      	cmp	r3, #0
    7228:	d002      	beq.n	7230 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    722a:	693b      	ldr	r3, [r7, #16]
    722c:	2202      	movs	r2, #2
    722e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    7230:	230c      	movs	r3, #12
    7232:	18fb      	adds	r3, r7, r3
    7234:	881b      	ldrh	r3, [r3, #0]
    7236:	2204      	movs	r2, #4
    7238:	4013      	ands	r3, r2
    723a:	d100      	bne.n	723e <_spi_interrupt_handler+0xf2>
    723c:	e07e      	b.n	733c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    723e:	693b      	ldr	r3, [r7, #16]
    7240:	8b5b      	ldrh	r3, [r3, #26]
    7242:	b29b      	uxth	r3, r3
    7244:	001a      	movs	r2, r3
    7246:	2304      	movs	r3, #4
    7248:	4013      	ands	r3, r2
    724a:	d022      	beq.n	7292 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    724c:	697b      	ldr	r3, [r7, #20]
    724e:	7a5b      	ldrb	r3, [r3, #9]
    7250:	b2db      	uxtb	r3, r3
    7252:	2b01      	cmp	r3, #1
    7254:	d014      	beq.n	7280 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7256:	697b      	ldr	r3, [r7, #20]
    7258:	2238      	movs	r2, #56	; 0x38
    725a:	211e      	movs	r1, #30
    725c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    725e:	697b      	ldr	r3, [r7, #20]
    7260:	2203      	movs	r2, #3
    7262:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    7264:	693b      	ldr	r3, [r7, #16]
    7266:	2205      	movs	r2, #5
    7268:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    726a:	230f      	movs	r3, #15
    726c:	18fb      	adds	r3, r7, r3
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	2208      	movs	r2, #8
    7272:	4013      	ands	r3, r2
    7274:	d004      	beq.n	7280 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7276:	697b      	ldr	r3, [r7, #20]
    7278:	699b      	ldr	r3, [r3, #24]
    727a:	697a      	ldr	r2, [r7, #20]
    727c:	0010      	movs	r0, r2
    727e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    7280:	693b      	ldr	r3, [r7, #16]
    7282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7284:	230a      	movs	r3, #10
    7286:	18fb      	adds	r3, r7, r3
    7288:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    728a:	693b      	ldr	r3, [r7, #16]
    728c:	2204      	movs	r2, #4
    728e:	835a      	strh	r2, [r3, #26]
    7290:	e054      	b.n	733c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    7292:	697b      	ldr	r3, [r7, #20]
    7294:	7a5b      	ldrb	r3, [r3, #9]
    7296:	b2db      	uxtb	r3, r3
    7298:	2b01      	cmp	r3, #1
    729a:	d11e      	bne.n	72da <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    729c:	697b      	ldr	r3, [r7, #20]
    729e:	0018      	movs	r0, r3
    72a0:	4b6b      	ldr	r3, [pc, #428]	; (7450 <_spi_interrupt_handler+0x304>)
    72a2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    72a4:	697b      	ldr	r3, [r7, #20]
    72a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    72a8:	b29b      	uxth	r3, r3
    72aa:	2b00      	cmp	r3, #0
    72ac:	d146      	bne.n	733c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    72ae:	693b      	ldr	r3, [r7, #16]
    72b0:	2204      	movs	r2, #4
    72b2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    72b4:	697b      	ldr	r3, [r7, #20]
    72b6:	2238      	movs	r2, #56	; 0x38
    72b8:	2100      	movs	r1, #0
    72ba:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    72bc:	697b      	ldr	r3, [r7, #20]
    72be:	2203      	movs	r2, #3
    72c0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    72c2:	230f      	movs	r3, #15
    72c4:	18fb      	adds	r3, r7, r3
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	2201      	movs	r2, #1
    72ca:	4013      	ands	r3, r2
    72cc:	d036      	beq.n	733c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    72ce:	697b      	ldr	r3, [r7, #20]
    72d0:	68db      	ldr	r3, [r3, #12]
    72d2:	697a      	ldr	r2, [r7, #20]
    72d4:	0010      	movs	r0, r2
    72d6:	4798      	blx	r3
    72d8:	e030      	b.n	733c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    72da:	697b      	ldr	r3, [r7, #20]
    72dc:	0018      	movs	r0, r3
    72de:	4b5d      	ldr	r3, [pc, #372]	; (7454 <_spi_interrupt_handler+0x308>)
    72e0:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    72e2:	697b      	ldr	r3, [r7, #20]
    72e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    72e6:	b29b      	uxth	r3, r3
    72e8:	2b00      	cmp	r3, #0
    72ea:	d127      	bne.n	733c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    72ec:	697b      	ldr	r3, [r7, #20]
    72ee:	2238      	movs	r2, #56	; 0x38
    72f0:	2100      	movs	r1, #0
    72f2:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    72f4:	693b      	ldr	r3, [r7, #16]
    72f6:	2204      	movs	r2, #4
    72f8:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    72fa:	697b      	ldr	r3, [r7, #20]
    72fc:	7a5b      	ldrb	r3, [r3, #9]
    72fe:	b2db      	uxtb	r3, r3
    7300:	2b02      	cmp	r3, #2
    7302:	d10b      	bne.n	731c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    7304:	230f      	movs	r3, #15
    7306:	18fb      	adds	r3, r7, r3
    7308:	781b      	ldrb	r3, [r3, #0]
    730a:	2204      	movs	r2, #4
    730c:	4013      	ands	r3, r2
    730e:	d015      	beq.n	733c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    7310:	697b      	ldr	r3, [r7, #20]
    7312:	695b      	ldr	r3, [r3, #20]
    7314:	697a      	ldr	r2, [r7, #20]
    7316:	0010      	movs	r0, r2
    7318:	4798      	blx	r3
    731a:	e00f      	b.n	733c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    731c:	697b      	ldr	r3, [r7, #20]
    731e:	7a5b      	ldrb	r3, [r3, #9]
    7320:	b2db      	uxtb	r3, r3
    7322:	2b00      	cmp	r3, #0
    7324:	d10a      	bne.n	733c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    7326:	230f      	movs	r3, #15
    7328:	18fb      	adds	r3, r7, r3
    732a:	781b      	ldrb	r3, [r3, #0]
    732c:	2202      	movs	r2, #2
    732e:	4013      	ands	r3, r2
    7330:	d004      	beq.n	733c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    7332:	697b      	ldr	r3, [r7, #20]
    7334:	691b      	ldr	r3, [r3, #16]
    7336:	697a      	ldr	r2, [r7, #20]
    7338:	0010      	movs	r0, r2
    733a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    733c:	230c      	movs	r3, #12
    733e:	18fb      	adds	r3, r7, r3
    7340:	881b      	ldrh	r3, [r3, #0]
    7342:	2202      	movs	r2, #2
    7344:	4013      	ands	r3, r2
    7346:	d046      	beq.n	73d6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    7348:	697b      	ldr	r3, [r7, #20]
    734a:	795b      	ldrb	r3, [r3, #5]
    734c:	2b00      	cmp	r3, #0
    734e:	d11d      	bne.n	738c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    7350:	693b      	ldr	r3, [r7, #16]
    7352:	2207      	movs	r2, #7
    7354:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7356:	693b      	ldr	r3, [r7, #16]
    7358:	2202      	movs	r2, #2
    735a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    735c:	697b      	ldr	r3, [r7, #20]
    735e:	2203      	movs	r2, #3
    7360:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    7362:	697b      	ldr	r3, [r7, #20]
    7364:	2200      	movs	r2, #0
    7366:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    7368:	697b      	ldr	r3, [r7, #20]
    736a:	2200      	movs	r2, #0
    736c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    736e:	697b      	ldr	r3, [r7, #20]
    7370:	2238      	movs	r2, #56	; 0x38
    7372:	2100      	movs	r1, #0
    7374:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    7376:	230f      	movs	r3, #15
    7378:	18fb      	adds	r3, r7, r3
    737a:	781b      	ldrb	r3, [r3, #0]
    737c:	2210      	movs	r2, #16
    737e:	4013      	ands	r3, r2
    7380:	d004      	beq.n	738c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    7382:	697b      	ldr	r3, [r7, #20]
    7384:	69db      	ldr	r3, [r3, #28]
    7386:	697a      	ldr	r2, [r7, #20]
    7388:	0010      	movs	r0, r2
    738a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    738c:	697b      	ldr	r3, [r7, #20]
    738e:	795b      	ldrb	r3, [r3, #5]
    7390:	2b01      	cmp	r3, #1
    7392:	d120      	bne.n	73d6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    7394:	697b      	ldr	r3, [r7, #20]
    7396:	7a5b      	ldrb	r3, [r3, #9]
    7398:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    739a:	2b01      	cmp	r3, #1
    739c:	d11b      	bne.n	73d6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    739e:	697b      	ldr	r3, [r7, #20]
    73a0:	79db      	ldrb	r3, [r3, #7]
    73a2:	2201      	movs	r2, #1
    73a4:	4053      	eors	r3, r2
    73a6:	b2db      	uxtb	r3, r3
    73a8:	2b00      	cmp	r3, #0
    73aa:	d014      	beq.n	73d6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    73ac:	693b      	ldr	r3, [r7, #16]
    73ae:	2202      	movs	r2, #2
    73b0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    73b2:	697b      	ldr	r3, [r7, #20]
    73b4:	2203      	movs	r2, #3
    73b6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    73b8:	697b      	ldr	r3, [r7, #20]
    73ba:	2238      	movs	r2, #56	; 0x38
    73bc:	2100      	movs	r1, #0
    73be:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    73c0:	230f      	movs	r3, #15
    73c2:	18fb      	adds	r3, r7, r3
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	2201      	movs	r2, #1
    73c8:	4013      	ands	r3, r2
    73ca:	d004      	beq.n	73d6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    73cc:	697b      	ldr	r3, [r7, #20]
    73ce:	68db      	ldr	r3, [r3, #12]
    73d0:	697a      	ldr	r2, [r7, #20]
    73d2:	0010      	movs	r0, r2
    73d4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    73d6:	230c      	movs	r3, #12
    73d8:	18fb      	adds	r3, r7, r3
    73da:	881b      	ldrh	r3, [r3, #0]
    73dc:	2208      	movs	r2, #8
    73de:	4013      	ands	r3, r2
    73e0:	d014      	beq.n	740c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    73e2:	697b      	ldr	r3, [r7, #20]
    73e4:	795b      	ldrb	r3, [r3, #5]
    73e6:	2b00      	cmp	r3, #0
    73e8:	d110      	bne.n	740c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    73ea:	693b      	ldr	r3, [r7, #16]
    73ec:	2208      	movs	r2, #8
    73ee:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    73f0:	693b      	ldr	r3, [r7, #16]
    73f2:	2208      	movs	r2, #8
    73f4:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    73f6:	230f      	movs	r3, #15
    73f8:	18fb      	adds	r3, r7, r3
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	2220      	movs	r2, #32
    73fe:	4013      	ands	r3, r2
    7400:	d004      	beq.n	740c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    7402:	697b      	ldr	r3, [r7, #20]
    7404:	6a1b      	ldr	r3, [r3, #32]
    7406:	697a      	ldr	r2, [r7, #20]
    7408:	0010      	movs	r0, r2
    740a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    740c:	230c      	movs	r3, #12
    740e:	18fb      	adds	r3, r7, r3
    7410:	881b      	ldrh	r3, [r3, #0]
    7412:	2280      	movs	r2, #128	; 0x80
    7414:	4013      	ands	r3, r2
    7416:	d010      	beq.n	743a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7418:	693b      	ldr	r3, [r7, #16]
    741a:	2280      	movs	r2, #128	; 0x80
    741c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    741e:	693b      	ldr	r3, [r7, #16]
    7420:	2280      	movs	r2, #128	; 0x80
    7422:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    7424:	230f      	movs	r3, #15
    7426:	18fb      	adds	r3, r7, r3
    7428:	781b      	ldrb	r3, [r3, #0]
    742a:	2240      	movs	r2, #64	; 0x40
    742c:	4013      	ands	r3, r2
    742e:	d004      	beq.n	743a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    7430:	697b      	ldr	r3, [r7, #20]
    7432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7434:	697a      	ldr	r2, [r7, #20]
    7436:	0010      	movs	r0, r2
    7438:	4798      	blx	r3
		}
	}
#  endif
}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	46bd      	mov	sp, r7
    743e:	b006      	add	sp, #24
    7440:	bd80      	pop	{r7, pc}
    7442:	46c0      	nop			; (mov r8, r8)
    7444:	2000050c 	.word	0x2000050c
    7448:	00007071 	.word	0x00007071
    744c:	00006ff5 	.word	0x00006ff5
    7450:	000070a5 	.word	0x000070a5
    7454:	000070db 	.word	0x000070db

00007458 <system_gclk_chan_get_config_defaults>:
{
    7458:	b580      	push	{r7, lr}
    745a:	b082      	sub	sp, #8
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	2200      	movs	r2, #0
    7464:	701a      	strb	r2, [r3, #0]
}
    7466:	46c0      	nop			; (mov r8, r8)
    7468:	46bd      	mov	sp, r7
    746a:	b002      	add	sp, #8
    746c:	bd80      	pop	{r7, pc}

0000746e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    746e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7470:	b08d      	sub	sp, #52	; 0x34
    7472:	af00      	add	r7, sp, #0
    7474:	60b8      	str	r0, [r7, #8]
    7476:	60f9      	str	r1, [r7, #12]
    7478:	603a      	str	r2, [r7, #0]
    747a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    747c:	2300      	movs	r3, #0
    747e:	2400      	movs	r4, #0
    7480:	623b      	str	r3, [r7, #32]
    7482:	627c      	str	r4, [r7, #36]	; 0x24
    7484:	2300      	movs	r3, #0
    7486:	2400      	movs	r4, #0
    7488:	61bb      	str	r3, [r7, #24]
    748a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    748c:	233f      	movs	r3, #63	; 0x3f
    748e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7490:	e053      	b.n	753a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    7492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7494:	3b20      	subs	r3, #32
    7496:	2b00      	cmp	r3, #0
    7498:	db04      	blt.n	74a4 <long_division+0x36>
    749a:	2201      	movs	r2, #1
    749c:	409a      	lsls	r2, r3
    749e:	0013      	movs	r3, r2
    74a0:	617b      	str	r3, [r7, #20]
    74a2:	e00b      	b.n	74bc <long_division+0x4e>
    74a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74a6:	2220      	movs	r2, #32
    74a8:	1ad3      	subs	r3, r2, r3
    74aa:	2201      	movs	r2, #1
    74ac:	40da      	lsrs	r2, r3
    74ae:	0013      	movs	r3, r2
    74b0:	2100      	movs	r1, #0
    74b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    74b4:	4091      	lsls	r1, r2
    74b6:	000a      	movs	r2, r1
    74b8:	4313      	orrs	r3, r2
    74ba:	617b      	str	r3, [r7, #20]
    74bc:	2201      	movs	r2, #1
    74be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74c0:	409a      	lsls	r2, r3
    74c2:	0013      	movs	r3, r2
    74c4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    74c6:	69bb      	ldr	r3, [r7, #24]
    74c8:	69fc      	ldr	r4, [r7, #28]
    74ca:	18db      	adds	r3, r3, r3
    74cc:	4164      	adcs	r4, r4
    74ce:	61bb      	str	r3, [r7, #24]
    74d0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    74d2:	68bb      	ldr	r3, [r7, #8]
    74d4:	693a      	ldr	r2, [r7, #16]
    74d6:	401a      	ands	r2, r3
    74d8:	0015      	movs	r5, r2
    74da:	68fb      	ldr	r3, [r7, #12]
    74dc:	697a      	ldr	r2, [r7, #20]
    74de:	401a      	ands	r2, r3
    74e0:	0016      	movs	r6, r2
    74e2:	002b      	movs	r3, r5
    74e4:	4333      	orrs	r3, r6
    74e6:	d007      	beq.n	74f8 <long_division+0x8a>
			r |= 0x01;
    74e8:	69bb      	ldr	r3, [r7, #24]
    74ea:	2201      	movs	r2, #1
    74ec:	4313      	orrs	r3, r2
    74ee:	61bb      	str	r3, [r7, #24]
    74f0:	69fb      	ldr	r3, [r7, #28]
    74f2:	2200      	movs	r2, #0
    74f4:	4313      	orrs	r3, r2
    74f6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    74f8:	687a      	ldr	r2, [r7, #4]
    74fa:	69fb      	ldr	r3, [r7, #28]
    74fc:	429a      	cmp	r2, r3
    74fe:	d819      	bhi.n	7534 <long_division+0xc6>
    7500:	687a      	ldr	r2, [r7, #4]
    7502:	69fb      	ldr	r3, [r7, #28]
    7504:	429a      	cmp	r2, r3
    7506:	d103      	bne.n	7510 <long_division+0xa2>
    7508:	683a      	ldr	r2, [r7, #0]
    750a:	69bb      	ldr	r3, [r7, #24]
    750c:	429a      	cmp	r2, r3
    750e:	d811      	bhi.n	7534 <long_division+0xc6>
			r = r - d;
    7510:	69b9      	ldr	r1, [r7, #24]
    7512:	69fa      	ldr	r2, [r7, #28]
    7514:	683b      	ldr	r3, [r7, #0]
    7516:	687c      	ldr	r4, [r7, #4]
    7518:	1ac9      	subs	r1, r1, r3
    751a:	41a2      	sbcs	r2, r4
    751c:	000b      	movs	r3, r1
    751e:	0014      	movs	r4, r2
    7520:	61bb      	str	r3, [r7, #24]
    7522:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    7524:	6a3a      	ldr	r2, [r7, #32]
    7526:	693b      	ldr	r3, [r7, #16]
    7528:	4313      	orrs	r3, r2
    752a:	623b      	str	r3, [r7, #32]
    752c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    752e:	697b      	ldr	r3, [r7, #20]
    7530:	4313      	orrs	r3, r2
    7532:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    7534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7536:	3b01      	subs	r3, #1
    7538:	62fb      	str	r3, [r7, #44]	; 0x2c
    753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    753c:	2b00      	cmp	r3, #0
    753e:	daa8      	bge.n	7492 <long_division+0x24>
		}
	}

	return q;
    7540:	6a3b      	ldr	r3, [r7, #32]
    7542:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    7544:	0018      	movs	r0, r3
    7546:	0021      	movs	r1, r4
    7548:	46bd      	mov	sp, r7
    754a:	b00d      	add	sp, #52	; 0x34
    754c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000754e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    754e:	b580      	push	{r7, lr}
    7550:	b086      	sub	sp, #24
    7552:	af00      	add	r7, sp, #0
    7554:	60f8      	str	r0, [r7, #12]
    7556:	60b9      	str	r1, [r7, #8]
    7558:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    755a:	2316      	movs	r3, #22
    755c:	18fb      	adds	r3, r7, r3
    755e:	2200      	movs	r2, #0
    7560:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    7562:	68bb      	ldr	r3, [r7, #8]
    7564:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7566:	68bb      	ldr	r3, [r7, #8]
    7568:	085a      	lsrs	r2, r3, #1
    756a:	68fb      	ldr	r3, [r7, #12]
    756c:	429a      	cmp	r2, r3
    756e:	d201      	bcs.n	7574 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7570:	2340      	movs	r3, #64	; 0x40
    7572:	e026      	b.n	75c2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    7574:	68bb      	ldr	r3, [r7, #8]
    7576:	085b      	lsrs	r3, r3, #1
    7578:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    757a:	e00a      	b.n	7592 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    757c:	693a      	ldr	r2, [r7, #16]
    757e:	68fb      	ldr	r3, [r7, #12]
    7580:	1ad3      	subs	r3, r2, r3
    7582:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    7584:	2316      	movs	r3, #22
    7586:	18fb      	adds	r3, r7, r3
    7588:	881a      	ldrh	r2, [r3, #0]
    758a:	2316      	movs	r3, #22
    758c:	18fb      	adds	r3, r7, r3
    758e:	3201      	adds	r2, #1
    7590:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    7592:	693a      	ldr	r2, [r7, #16]
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	429a      	cmp	r2, r3
    7598:	d2f0      	bcs.n	757c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    759a:	2316      	movs	r3, #22
    759c:	18fb      	adds	r3, r7, r3
    759e:	2216      	movs	r2, #22
    75a0:	18ba      	adds	r2, r7, r2
    75a2:	8812      	ldrh	r2, [r2, #0]
    75a4:	3a01      	subs	r2, #1
    75a6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    75a8:	2316      	movs	r3, #22
    75aa:	18fb      	adds	r3, r7, r3
    75ac:	881b      	ldrh	r3, [r3, #0]
    75ae:	2bff      	cmp	r3, #255	; 0xff
    75b0:	d901      	bls.n	75b6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    75b2:	2340      	movs	r3, #64	; 0x40
    75b4:	e005      	b.n	75c2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	2216      	movs	r2, #22
    75ba:	18ba      	adds	r2, r7, r2
    75bc:	8812      	ldrh	r2, [r2, #0]
    75be:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    75c0:	2300      	movs	r3, #0
	}
}
    75c2:	0018      	movs	r0, r3
    75c4:	46bd      	mov	sp, r7
    75c6:	b006      	add	sp, #24
    75c8:	bd80      	pop	{r7, pc}
	...

000075cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ce:	b09d      	sub	sp, #116	; 0x74
    75d0:	af00      	add	r7, sp, #0
    75d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    75d4:	63b9      	str	r1, [r7, #56]	; 0x38
    75d6:	637a      	str	r2, [r7, #52]	; 0x34
    75d8:	2233      	movs	r2, #51	; 0x33
    75da:	18ba      	adds	r2, r7, r2
    75dc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    75de:	2300      	movs	r3, #0
    75e0:	2400      	movs	r4, #0
    75e2:	65bb      	str	r3, [r7, #88]	; 0x58
    75e4:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    75e6:	2300      	movs	r3, #0
    75e8:	2400      	movs	r4, #0
    75ea:	653b      	str	r3, [r7, #80]	; 0x50
    75ec:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    75ee:	2300      	movs	r3, #0
    75f0:	2400      	movs	r4, #0
    75f2:	66bb      	str	r3, [r7, #104]	; 0x68
    75f4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    75f6:	2300      	movs	r3, #0
    75f8:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    75fa:	2358      	movs	r3, #88	; 0x58
    75fc:	2230      	movs	r2, #48	; 0x30
    75fe:	4694      	mov	ip, r2
    7600:	44bc      	add	ip, r7
    7602:	4463      	add	r3, ip
    7604:	781a      	ldrb	r2, [r3, #0]
    7606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7608:	435a      	muls	r2, r3
    760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    760c:	429a      	cmp	r2, r3
    760e:	d901      	bls.n	7614 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7610:	2340      	movs	r3, #64	; 0x40
    7612:	e0c6      	b.n	77a2 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7614:	2333      	movs	r3, #51	; 0x33
    7616:	18fb      	adds	r3, r7, r3
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	2b00      	cmp	r3, #0
    761c:	d13d      	bne.n	769a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    761e:	2358      	movs	r3, #88	; 0x58
    7620:	2230      	movs	r2, #48	; 0x30
    7622:	4694      	mov	ip, r2
    7624:	44bc      	add	ip, r7
    7626:	4463      	add	r3, ip
    7628:	781b      	ldrb	r3, [r3, #0]
    762a:	b2db      	uxtb	r3, r3
    762c:	613b      	str	r3, [r7, #16]
    762e:	2300      	movs	r3, #0
    7630:	617b      	str	r3, [r7, #20]
    7632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7634:	60bb      	str	r3, [r7, #8]
    7636:	2300      	movs	r3, #0
    7638:	60fb      	str	r3, [r7, #12]
    763a:	4c5c      	ldr	r4, [pc, #368]	; (77ac <_sercom_get_async_baud_val+0x1e0>)
    763c:	68ba      	ldr	r2, [r7, #8]
    763e:	68fb      	ldr	r3, [r7, #12]
    7640:	6938      	ldr	r0, [r7, #16]
    7642:	6979      	ldr	r1, [r7, #20]
    7644:	47a0      	blx	r4
    7646:	0003      	movs	r3, r0
    7648:	000c      	movs	r4, r1
    764a:	001b      	movs	r3, r3
    764c:	64fb      	str	r3, [r7, #76]	; 0x4c
    764e:	2300      	movs	r3, #0
    7650:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    7652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7654:	603b      	str	r3, [r7, #0]
    7656:	2300      	movs	r3, #0
    7658:	607b      	str	r3, [r7, #4]
    765a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    765c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    765e:	683a      	ldr	r2, [r7, #0]
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	4c53      	ldr	r4, [pc, #332]	; (77b0 <_sercom_get_async_baud_val+0x1e4>)
    7664:	47a0      	blx	r4
    7666:	0003      	movs	r3, r0
    7668:	000c      	movs	r4, r1
    766a:	65bb      	str	r3, [r7, #88]	; 0x58
    766c:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    766e:	2100      	movs	r1, #0
    7670:	2201      	movs	r2, #1
    7672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7674:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    7676:	1ac9      	subs	r1, r1, r3
    7678:	41a2      	sbcs	r2, r4
    767a:	000b      	movs	r3, r1
    767c:	0014      	movs	r4, r2
    767e:	653b      	str	r3, [r7, #80]	; 0x50
    7680:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    7682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7684:	0c1b      	lsrs	r3, r3, #16
    7686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7688:	0416      	lsls	r6, r2, #16
    768a:	431e      	orrs	r6, r3
    768c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    768e:	041d      	lsls	r5, r3, #16
    7690:	0033      	movs	r3, r6
    7692:	66bb      	str	r3, [r7, #104]	; 0x68
    7694:	2300      	movs	r3, #0
    7696:	66fb      	str	r3, [r7, #108]	; 0x6c
    7698:	e07d      	b.n	7796 <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    769a:	2333      	movs	r3, #51	; 0x33
    769c:	18fb      	adds	r3, r7, r3
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	2b01      	cmp	r3, #1
    76a2:	d000      	beq.n	76a6 <_sercom_get_async_baud_val+0xda>
    76a4:	e077      	b.n	7796 <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    76a6:	2337      	movs	r3, #55	; 0x37
    76a8:	2230      	movs	r2, #48	; 0x30
    76aa:	4694      	mov	ip, r2
    76ac:	44bc      	add	ip, r7
    76ae:	4463      	add	r3, ip
    76b0:	2200      	movs	r2, #0
    76b2:	701a      	strb	r2, [r3, #0]
    76b4:	e04e      	b.n	7754 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    76b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    76b8:	62bb      	str	r3, [r7, #40]	; 0x28
    76ba:	2300      	movs	r3, #0
    76bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    76be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    76c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    76c2:	0003      	movs	r3, r0
    76c4:	0f5b      	lsrs	r3, r3, #29
    76c6:	000a      	movs	r2, r1
    76c8:	00d2      	lsls	r2, r2, #3
    76ca:	4313      	orrs	r3, r2
    76cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    76ce:	0003      	movs	r3, r0
    76d0:	00db      	lsls	r3, r3, #3
    76d2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    76d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    76d6:	623b      	str	r3, [r7, #32]
    76d8:	2300      	movs	r3, #0
    76da:	627b      	str	r3, [r7, #36]	; 0x24
    76dc:	2358      	movs	r3, #88	; 0x58
    76de:	2230      	movs	r2, #48	; 0x30
    76e0:	4694      	mov	ip, r2
    76e2:	44bc      	add	ip, r7
    76e4:	4463      	add	r3, ip
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	b2db      	uxtb	r3, r3
    76ea:	61bb      	str	r3, [r7, #24]
    76ec:	2300      	movs	r3, #0
    76ee:	61fb      	str	r3, [r7, #28]
    76f0:	4c2e      	ldr	r4, [pc, #184]	; (77ac <_sercom_get_async_baud_val+0x1e0>)
    76f2:	69ba      	ldr	r2, [r7, #24]
    76f4:	69fb      	ldr	r3, [r7, #28]
    76f6:	6a38      	ldr	r0, [r7, #32]
    76f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    76fa:	47a0      	blx	r4
    76fc:	0003      	movs	r3, r0
    76fe:	000c      	movs	r4, r1
    7700:	643b      	str	r3, [r7, #64]	; 0x40
    7702:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    7704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7706:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    7708:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    770a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    770c:	001a      	movs	r2, r3
    770e:	0023      	movs	r3, r4
    7710:	4c27      	ldr	r4, [pc, #156]	; (77b0 <_sercom_get_async_baud_val+0x1e4>)
    7712:	47a0      	blx	r4
    7714:	0003      	movs	r3, r0
    7716:	000c      	movs	r4, r1
    7718:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    771a:	2337      	movs	r3, #55	; 0x37
    771c:	2230      	movs	r2, #48	; 0x30
    771e:	4694      	mov	ip, r2
    7720:	44bc      	add	ip, r7
    7722:	4463      	add	r3, ip
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7728:	1ad3      	subs	r3, r2, r3
    772a:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    772c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    772e:	08db      	lsrs	r3, r3, #3
    7730:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    7732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7734:	4a1f      	ldr	r2, [pc, #124]	; (77b4 <_sercom_get_async_baud_val+0x1e8>)
    7736:	4293      	cmp	r3, r2
    7738:	d915      	bls.n	7766 <_sercom_get_async_baud_val+0x19a>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    773a:	2337      	movs	r3, #55	; 0x37
    773c:	2230      	movs	r2, #48	; 0x30
    773e:	4694      	mov	ip, r2
    7740:	44bc      	add	ip, r7
    7742:	4463      	add	r3, ip
    7744:	781a      	ldrb	r2, [r3, #0]
    7746:	2337      	movs	r3, #55	; 0x37
    7748:	2130      	movs	r1, #48	; 0x30
    774a:	468c      	mov	ip, r1
    774c:	44bc      	add	ip, r7
    774e:	4463      	add	r3, ip
    7750:	3201      	adds	r2, #1
    7752:	701a      	strb	r2, [r3, #0]
    7754:	2337      	movs	r3, #55	; 0x37
    7756:	2230      	movs	r2, #48	; 0x30
    7758:	4694      	mov	ip, r2
    775a:	44bc      	add	ip, r7
    775c:	4463      	add	r3, ip
    775e:	781b      	ldrb	r3, [r3, #0]
    7760:	2b07      	cmp	r3, #7
    7762:	d9a8      	bls.n	76b6 <_sercom_get_async_baud_val+0xea>
    7764:	e000      	b.n	7768 <_sercom_get_async_baud_val+0x19c>
				break;
    7766:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    7768:	2337      	movs	r3, #55	; 0x37
    776a:	2230      	movs	r2, #48	; 0x30
    776c:	4694      	mov	ip, r2
    776e:	44bc      	add	ip, r7
    7770:	4463      	add	r3, ip
    7772:	781b      	ldrb	r3, [r3, #0]
    7774:	2b08      	cmp	r3, #8
    7776:	d101      	bne.n	777c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7778:	2340      	movs	r3, #64	; 0x40
    777a:	e012      	b.n	77a2 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    777c:	2337      	movs	r3, #55	; 0x37
    777e:	2230      	movs	r2, #48	; 0x30
    7780:	4694      	mov	ip, r2
    7782:	44bc      	add	ip, r7
    7784:	4463      	add	r3, ip
    7786:	781b      	ldrb	r3, [r3, #0]
    7788:	035b      	lsls	r3, r3, #13
    778a:	001a      	movs	r2, r3
    778c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    778e:	4313      	orrs	r3, r2
    7790:	66bb      	str	r3, [r7, #104]	; 0x68
    7792:	2300      	movs	r3, #0
    7794:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    7796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7798:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    779a:	b29a      	uxth	r2, r3
    779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    779e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    77a0:	2300      	movs	r3, #0
}
    77a2:	0018      	movs	r0, r3
    77a4:	46bd      	mov	sp, r7
    77a6:	b01d      	add	sp, #116	; 0x74
    77a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77aa:	46c0      	nop			; (mov r8, r8)
    77ac:	000187e9 	.word	0x000187e9
    77b0:	0000746f 	.word	0x0000746f
    77b4:	00001fff 	.word	0x00001fff

000077b8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    77b8:	b580      	push	{r7, lr}
    77ba:	b084      	sub	sp, #16
    77bc:	af00      	add	r7, sp, #0
    77be:	0002      	movs	r2, r0
    77c0:	1dfb      	adds	r3, r7, #7
    77c2:	701a      	strb	r2, [r3, #0]
    77c4:	1dbb      	adds	r3, r7, #6
    77c6:	1c0a      	adds	r2, r1, #0
    77c8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    77ca:	4b1a      	ldr	r3, [pc, #104]	; (7834 <sercom_set_gclk_generator+0x7c>)
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	2201      	movs	r2, #1
    77d0:	4053      	eors	r3, r2
    77d2:	b2db      	uxtb	r3, r3
    77d4:	2b00      	cmp	r3, #0
    77d6:	d103      	bne.n	77e0 <sercom_set_gclk_generator+0x28>
    77d8:	1dbb      	adds	r3, r7, #6
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	2b00      	cmp	r3, #0
    77de:	d01b      	beq.n	7818 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    77e0:	230c      	movs	r3, #12
    77e2:	18fb      	adds	r3, r7, r3
    77e4:	0018      	movs	r0, r3
    77e6:	4b14      	ldr	r3, [pc, #80]	; (7838 <sercom_set_gclk_generator+0x80>)
    77e8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    77ea:	230c      	movs	r3, #12
    77ec:	18fb      	adds	r3, r7, r3
    77ee:	1dfa      	adds	r2, r7, #7
    77f0:	7812      	ldrb	r2, [r2, #0]
    77f2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    77f4:	230c      	movs	r3, #12
    77f6:	18fb      	adds	r3, r7, r3
    77f8:	0019      	movs	r1, r3
    77fa:	2013      	movs	r0, #19
    77fc:	4b0f      	ldr	r3, [pc, #60]	; (783c <sercom_set_gclk_generator+0x84>)
    77fe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7800:	2013      	movs	r0, #19
    7802:	4b0f      	ldr	r3, [pc, #60]	; (7840 <sercom_set_gclk_generator+0x88>)
    7804:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    7806:	4b0b      	ldr	r3, [pc, #44]	; (7834 <sercom_set_gclk_generator+0x7c>)
    7808:	1dfa      	adds	r2, r7, #7
    780a:	7812      	ldrb	r2, [r2, #0]
    780c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    780e:	4b09      	ldr	r3, [pc, #36]	; (7834 <sercom_set_gclk_generator+0x7c>)
    7810:	2201      	movs	r2, #1
    7812:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    7814:	2300      	movs	r3, #0
    7816:	e008      	b.n	782a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    7818:	4b06      	ldr	r3, [pc, #24]	; (7834 <sercom_set_gclk_generator+0x7c>)
    781a:	785b      	ldrb	r3, [r3, #1]
    781c:	1dfa      	adds	r2, r7, #7
    781e:	7812      	ldrb	r2, [r2, #0]
    7820:	429a      	cmp	r2, r3
    7822:	d101      	bne.n	7828 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    7824:	2300      	movs	r3, #0
    7826:	e000      	b.n	782a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7828:	231d      	movs	r3, #29
}
    782a:	0018      	movs	r0, r3
    782c:	46bd      	mov	sp, r7
    782e:	b004      	add	sp, #16
    7830:	bd80      	pop	{r7, pc}
    7832:	46c0      	nop			; (mov r8, r8)
    7834:	200001fc 	.word	0x200001fc
    7838:	00007459 	.word	0x00007459
    783c:	000085ed 	.word	0x000085ed
    7840:	00008631 	.word	0x00008631

00007844 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    7844:	b580      	push	{r7, lr}
    7846:	b082      	sub	sp, #8
    7848:	af00      	add	r7, sp, #0
    784a:	6078      	str	r0, [r7, #4]
    784c:	000a      	movs	r2, r1
    784e:	1cfb      	adds	r3, r7, #3
    7850:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	4a4d      	ldr	r2, [pc, #308]	; (798c <_sercom_get_default_pad+0x148>)
    7856:	4293      	cmp	r3, r2
    7858:	d03f      	beq.n	78da <_sercom_get_default_pad+0x96>
    785a:	4a4c      	ldr	r2, [pc, #304]	; (798c <_sercom_get_default_pad+0x148>)
    785c:	4293      	cmp	r3, r2
    785e:	d806      	bhi.n	786e <_sercom_get_default_pad+0x2a>
    7860:	4a4b      	ldr	r2, [pc, #300]	; (7990 <_sercom_get_default_pad+0x14c>)
    7862:	4293      	cmp	r3, r2
    7864:	d00f      	beq.n	7886 <_sercom_get_default_pad+0x42>
    7866:	4a4b      	ldr	r2, [pc, #300]	; (7994 <_sercom_get_default_pad+0x150>)
    7868:	4293      	cmp	r3, r2
    786a:	d021      	beq.n	78b0 <_sercom_get_default_pad+0x6c>
    786c:	e089      	b.n	7982 <_sercom_get_default_pad+0x13e>
    786e:	4a4a      	ldr	r2, [pc, #296]	; (7998 <_sercom_get_default_pad+0x154>)
    7870:	4293      	cmp	r3, r2
    7872:	d100      	bne.n	7876 <_sercom_get_default_pad+0x32>
    7874:	e05b      	b.n	792e <_sercom_get_default_pad+0xea>
    7876:	4a49      	ldr	r2, [pc, #292]	; (799c <_sercom_get_default_pad+0x158>)
    7878:	4293      	cmp	r3, r2
    787a:	d100      	bne.n	787e <_sercom_get_default_pad+0x3a>
    787c:	e06c      	b.n	7958 <_sercom_get_default_pad+0x114>
    787e:	4a48      	ldr	r2, [pc, #288]	; (79a0 <_sercom_get_default_pad+0x15c>)
    7880:	4293      	cmp	r3, r2
    7882:	d03f      	beq.n	7904 <_sercom_get_default_pad+0xc0>
    7884:	e07d      	b.n	7982 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7886:	1cfb      	adds	r3, r7, #3
    7888:	781b      	ldrb	r3, [r3, #0]
    788a:	2b01      	cmp	r3, #1
    788c:	d00a      	beq.n	78a4 <_sercom_get_default_pad+0x60>
    788e:	dc02      	bgt.n	7896 <_sercom_get_default_pad+0x52>
    7890:	2b00      	cmp	r3, #0
    7892:	d005      	beq.n	78a0 <_sercom_get_default_pad+0x5c>
    7894:	e075      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7896:	2b02      	cmp	r3, #2
    7898:	d006      	beq.n	78a8 <_sercom_get_default_pad+0x64>
    789a:	2b03      	cmp	r3, #3
    789c:	d006      	beq.n	78ac <_sercom_get_default_pad+0x68>
    789e:	e070      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78a0:	4b40      	ldr	r3, [pc, #256]	; (79a4 <_sercom_get_default_pad+0x160>)
    78a2:	e06f      	b.n	7984 <_sercom_get_default_pad+0x140>
    78a4:	4b40      	ldr	r3, [pc, #256]	; (79a8 <_sercom_get_default_pad+0x164>)
    78a6:	e06d      	b.n	7984 <_sercom_get_default_pad+0x140>
    78a8:	4b40      	ldr	r3, [pc, #256]	; (79ac <_sercom_get_default_pad+0x168>)
    78aa:	e06b      	b.n	7984 <_sercom_get_default_pad+0x140>
    78ac:	4b40      	ldr	r3, [pc, #256]	; (79b0 <_sercom_get_default_pad+0x16c>)
    78ae:	e069      	b.n	7984 <_sercom_get_default_pad+0x140>
    78b0:	1cfb      	adds	r3, r7, #3
    78b2:	781b      	ldrb	r3, [r3, #0]
    78b4:	2b01      	cmp	r3, #1
    78b6:	d00a      	beq.n	78ce <_sercom_get_default_pad+0x8a>
    78b8:	dc02      	bgt.n	78c0 <_sercom_get_default_pad+0x7c>
    78ba:	2b00      	cmp	r3, #0
    78bc:	d005      	beq.n	78ca <_sercom_get_default_pad+0x86>
    78be:	e060      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78c0:	2b02      	cmp	r3, #2
    78c2:	d006      	beq.n	78d2 <_sercom_get_default_pad+0x8e>
    78c4:	2b03      	cmp	r3, #3
    78c6:	d006      	beq.n	78d6 <_sercom_get_default_pad+0x92>
    78c8:	e05b      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78ca:	2303      	movs	r3, #3
    78cc:	e05a      	b.n	7984 <_sercom_get_default_pad+0x140>
    78ce:	4b39      	ldr	r3, [pc, #228]	; (79b4 <_sercom_get_default_pad+0x170>)
    78d0:	e058      	b.n	7984 <_sercom_get_default_pad+0x140>
    78d2:	4b39      	ldr	r3, [pc, #228]	; (79b8 <_sercom_get_default_pad+0x174>)
    78d4:	e056      	b.n	7984 <_sercom_get_default_pad+0x140>
    78d6:	4b39      	ldr	r3, [pc, #228]	; (79bc <_sercom_get_default_pad+0x178>)
    78d8:	e054      	b.n	7984 <_sercom_get_default_pad+0x140>
    78da:	1cfb      	adds	r3, r7, #3
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	2b01      	cmp	r3, #1
    78e0:	d00a      	beq.n	78f8 <_sercom_get_default_pad+0xb4>
    78e2:	dc02      	bgt.n	78ea <_sercom_get_default_pad+0xa6>
    78e4:	2b00      	cmp	r3, #0
    78e6:	d005      	beq.n	78f4 <_sercom_get_default_pad+0xb0>
    78e8:	e04b      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78ea:	2b02      	cmp	r3, #2
    78ec:	d006      	beq.n	78fc <_sercom_get_default_pad+0xb8>
    78ee:	2b03      	cmp	r3, #3
    78f0:	d006      	beq.n	7900 <_sercom_get_default_pad+0xbc>
    78f2:	e046      	b.n	7982 <_sercom_get_default_pad+0x13e>
    78f4:	4b32      	ldr	r3, [pc, #200]	; (79c0 <_sercom_get_default_pad+0x17c>)
    78f6:	e045      	b.n	7984 <_sercom_get_default_pad+0x140>
    78f8:	4b32      	ldr	r3, [pc, #200]	; (79c4 <_sercom_get_default_pad+0x180>)
    78fa:	e043      	b.n	7984 <_sercom_get_default_pad+0x140>
    78fc:	4b32      	ldr	r3, [pc, #200]	; (79c8 <_sercom_get_default_pad+0x184>)
    78fe:	e041      	b.n	7984 <_sercom_get_default_pad+0x140>
    7900:	4b32      	ldr	r3, [pc, #200]	; (79cc <_sercom_get_default_pad+0x188>)
    7902:	e03f      	b.n	7984 <_sercom_get_default_pad+0x140>
    7904:	1cfb      	adds	r3, r7, #3
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	2b01      	cmp	r3, #1
    790a:	d00a      	beq.n	7922 <_sercom_get_default_pad+0xde>
    790c:	dc02      	bgt.n	7914 <_sercom_get_default_pad+0xd0>
    790e:	2b00      	cmp	r3, #0
    7910:	d005      	beq.n	791e <_sercom_get_default_pad+0xda>
    7912:	e036      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7914:	2b02      	cmp	r3, #2
    7916:	d006      	beq.n	7926 <_sercom_get_default_pad+0xe2>
    7918:	2b03      	cmp	r3, #3
    791a:	d006      	beq.n	792a <_sercom_get_default_pad+0xe6>
    791c:	e031      	b.n	7982 <_sercom_get_default_pad+0x13e>
    791e:	4b2c      	ldr	r3, [pc, #176]	; (79d0 <_sercom_get_default_pad+0x18c>)
    7920:	e030      	b.n	7984 <_sercom_get_default_pad+0x140>
    7922:	4b2c      	ldr	r3, [pc, #176]	; (79d4 <_sercom_get_default_pad+0x190>)
    7924:	e02e      	b.n	7984 <_sercom_get_default_pad+0x140>
    7926:	4b2c      	ldr	r3, [pc, #176]	; (79d8 <_sercom_get_default_pad+0x194>)
    7928:	e02c      	b.n	7984 <_sercom_get_default_pad+0x140>
    792a:	4b2c      	ldr	r3, [pc, #176]	; (79dc <_sercom_get_default_pad+0x198>)
    792c:	e02a      	b.n	7984 <_sercom_get_default_pad+0x140>
    792e:	1cfb      	adds	r3, r7, #3
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	2b01      	cmp	r3, #1
    7934:	d00a      	beq.n	794c <_sercom_get_default_pad+0x108>
    7936:	dc02      	bgt.n	793e <_sercom_get_default_pad+0xfa>
    7938:	2b00      	cmp	r3, #0
    793a:	d005      	beq.n	7948 <_sercom_get_default_pad+0x104>
    793c:	e021      	b.n	7982 <_sercom_get_default_pad+0x13e>
    793e:	2b02      	cmp	r3, #2
    7940:	d006      	beq.n	7950 <_sercom_get_default_pad+0x10c>
    7942:	2b03      	cmp	r3, #3
    7944:	d006      	beq.n	7954 <_sercom_get_default_pad+0x110>
    7946:	e01c      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7948:	4b25      	ldr	r3, [pc, #148]	; (79e0 <_sercom_get_default_pad+0x19c>)
    794a:	e01b      	b.n	7984 <_sercom_get_default_pad+0x140>
    794c:	4b25      	ldr	r3, [pc, #148]	; (79e4 <_sercom_get_default_pad+0x1a0>)
    794e:	e019      	b.n	7984 <_sercom_get_default_pad+0x140>
    7950:	4b25      	ldr	r3, [pc, #148]	; (79e8 <_sercom_get_default_pad+0x1a4>)
    7952:	e017      	b.n	7984 <_sercom_get_default_pad+0x140>
    7954:	4b25      	ldr	r3, [pc, #148]	; (79ec <_sercom_get_default_pad+0x1a8>)
    7956:	e015      	b.n	7984 <_sercom_get_default_pad+0x140>
    7958:	1cfb      	adds	r3, r7, #3
    795a:	781b      	ldrb	r3, [r3, #0]
    795c:	2b01      	cmp	r3, #1
    795e:	d00a      	beq.n	7976 <_sercom_get_default_pad+0x132>
    7960:	dc02      	bgt.n	7968 <_sercom_get_default_pad+0x124>
    7962:	2b00      	cmp	r3, #0
    7964:	d005      	beq.n	7972 <_sercom_get_default_pad+0x12e>
    7966:	e00c      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7968:	2b02      	cmp	r3, #2
    796a:	d006      	beq.n	797a <_sercom_get_default_pad+0x136>
    796c:	2b03      	cmp	r3, #3
    796e:	d006      	beq.n	797e <_sercom_get_default_pad+0x13a>
    7970:	e007      	b.n	7982 <_sercom_get_default_pad+0x13e>
    7972:	4b1f      	ldr	r3, [pc, #124]	; (79f0 <_sercom_get_default_pad+0x1ac>)
    7974:	e006      	b.n	7984 <_sercom_get_default_pad+0x140>
    7976:	4b1f      	ldr	r3, [pc, #124]	; (79f4 <_sercom_get_default_pad+0x1b0>)
    7978:	e004      	b.n	7984 <_sercom_get_default_pad+0x140>
    797a:	4b1f      	ldr	r3, [pc, #124]	; (79f8 <_sercom_get_default_pad+0x1b4>)
    797c:	e002      	b.n	7984 <_sercom_get_default_pad+0x140>
    797e:	4b1f      	ldr	r3, [pc, #124]	; (79fc <_sercom_get_default_pad+0x1b8>)
    7980:	e000      	b.n	7984 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    7982:	2300      	movs	r3, #0
}
    7984:	0018      	movs	r0, r3
    7986:	46bd      	mov	sp, r7
    7988:	b002      	add	sp, #8
    798a:	bd80      	pop	{r7, pc}
    798c:	42001000 	.word	0x42001000
    7990:	42000800 	.word	0x42000800
    7994:	42000c00 	.word	0x42000c00
    7998:	42001800 	.word	0x42001800
    799c:	42001c00 	.word	0x42001c00
    79a0:	42001400 	.word	0x42001400
    79a4:	00040003 	.word	0x00040003
    79a8:	00050003 	.word	0x00050003
    79ac:	00060003 	.word	0x00060003
    79b0:	00070003 	.word	0x00070003
    79b4:	00010003 	.word	0x00010003
    79b8:	001e0003 	.word	0x001e0003
    79bc:	001f0003 	.word	0x001f0003
    79c0:	00080003 	.word	0x00080003
    79c4:	00090003 	.word	0x00090003
    79c8:	000a0003 	.word	0x000a0003
    79cc:	000b0003 	.word	0x000b0003
    79d0:	00100003 	.word	0x00100003
    79d4:	00110003 	.word	0x00110003
    79d8:	00120003 	.word	0x00120003
    79dc:	00130003 	.word	0x00130003
    79e0:	000c0003 	.word	0x000c0003
    79e4:	000d0003 	.word	0x000d0003
    79e8:	000e0003 	.word	0x000e0003
    79ec:	000f0003 	.word	0x000f0003
    79f0:	00160003 	.word	0x00160003
    79f4:	00170003 	.word	0x00170003
    79f8:	00180003 	.word	0x00180003
    79fc:	00190003 	.word	0x00190003

00007a00 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7a00:	b590      	push	{r4, r7, lr}
    7a02:	b08b      	sub	sp, #44	; 0x2c
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7a08:	230c      	movs	r3, #12
    7a0a:	18fb      	adds	r3, r7, r3
    7a0c:	4a0f      	ldr	r2, [pc, #60]	; (7a4c <_sercom_get_sercom_inst_index+0x4c>)
    7a0e:	ca13      	ldmia	r2!, {r0, r1, r4}
    7a10:	c313      	stmia	r3!, {r0, r1, r4}
    7a12:	ca13      	ldmia	r2!, {r0, r1, r4}
    7a14:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a16:	2300      	movs	r3, #0
    7a18:	627b      	str	r3, [r7, #36]	; 0x24
    7a1a:	e00e      	b.n	7a3a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7a1c:	230c      	movs	r3, #12
    7a1e:	18fb      	adds	r3, r7, r3
    7a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7a22:	0092      	lsls	r2, r2, #2
    7a24:	58d3      	ldr	r3, [r2, r3]
    7a26:	001a      	movs	r2, r3
    7a28:	687b      	ldr	r3, [r7, #4]
    7a2a:	429a      	cmp	r2, r3
    7a2c:	d102      	bne.n	7a34 <_sercom_get_sercom_inst_index+0x34>
			return i;
    7a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a30:	b2db      	uxtb	r3, r3
    7a32:	e006      	b.n	7a42 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a36:	3301      	adds	r3, #1
    7a38:	627b      	str	r3, [r7, #36]	; 0x24
    7a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a3c:	2b05      	cmp	r3, #5
    7a3e:	d9ed      	bls.n	7a1c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    7a40:	2300      	movs	r3, #0
}
    7a42:	0018      	movs	r0, r3
    7a44:	46bd      	mov	sp, r7
    7a46:	b00b      	add	sp, #44	; 0x2c
    7a48:	bd90      	pop	{r4, r7, pc}
    7a4a:	46c0      	nop			; (mov r8, r8)
    7a4c:	0001b830 	.word	0x0001b830

00007a50 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b082      	sub	sp, #8
    7a54:	af00      	add	r7, sp, #0
    7a56:	0002      	movs	r2, r0
    7a58:	1dfb      	adds	r3, r7, #7
    7a5a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    7a5c:	46c0      	nop			; (mov r8, r8)
    7a5e:	46bd      	mov	sp, r7
    7a60:	b002      	add	sp, #8
    7a62:	bd80      	pop	{r7, pc}

00007a64 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    7a64:	b580      	push	{r7, lr}
    7a66:	b084      	sub	sp, #16
    7a68:	af00      	add	r7, sp, #0
    7a6a:	0002      	movs	r2, r0
    7a6c:	6039      	str	r1, [r7, #0]
    7a6e:	1dfb      	adds	r3, r7, #7
    7a70:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    7a72:	4b13      	ldr	r3, [pc, #76]	; (7ac0 <_sercom_set_handler+0x5c>)
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	2201      	movs	r2, #1
    7a78:	4053      	eors	r3, r2
    7a7a:	b2db      	uxtb	r3, r3
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d015      	beq.n	7aac <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a80:	2300      	movs	r3, #0
    7a82:	60fb      	str	r3, [r7, #12]
    7a84:	e00c      	b.n	7aa0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7a86:	4b0f      	ldr	r3, [pc, #60]	; (7ac4 <_sercom_set_handler+0x60>)
    7a88:	68fa      	ldr	r2, [r7, #12]
    7a8a:	0092      	lsls	r2, r2, #2
    7a8c:	490e      	ldr	r1, [pc, #56]	; (7ac8 <_sercom_set_handler+0x64>)
    7a8e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    7a90:	4b0e      	ldr	r3, [pc, #56]	; (7acc <_sercom_set_handler+0x68>)
    7a92:	68fa      	ldr	r2, [r7, #12]
    7a94:	0092      	lsls	r2, r2, #2
    7a96:	2100      	movs	r1, #0
    7a98:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a9a:	68fb      	ldr	r3, [r7, #12]
    7a9c:	3301      	adds	r3, #1
    7a9e:	60fb      	str	r3, [r7, #12]
    7aa0:	68fb      	ldr	r3, [r7, #12]
    7aa2:	2b05      	cmp	r3, #5
    7aa4:	d9ef      	bls.n	7a86 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    7aa6:	4b06      	ldr	r3, [pc, #24]	; (7ac0 <_sercom_set_handler+0x5c>)
    7aa8:	2201      	movs	r2, #1
    7aaa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7aac:	1dfb      	adds	r3, r7, #7
    7aae:	781a      	ldrb	r2, [r3, #0]
    7ab0:	4b04      	ldr	r3, [pc, #16]	; (7ac4 <_sercom_set_handler+0x60>)
    7ab2:	0092      	lsls	r2, r2, #2
    7ab4:	6839      	ldr	r1, [r7, #0]
    7ab6:	50d1      	str	r1, [r2, r3]
}
    7ab8:	46c0      	nop			; (mov r8, r8)
    7aba:	46bd      	mov	sp, r7
    7abc:	b004      	add	sp, #16
    7abe:	bd80      	pop	{r7, pc}
    7ac0:	200001fe 	.word	0x200001fe
    7ac4:	20000200 	.word	0x20000200
    7ac8:	00007a51 	.word	0x00007a51
    7acc:	2000050c 	.word	0x2000050c

00007ad0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7ad0:	b590      	push	{r4, r7, lr}
    7ad2:	b085      	sub	sp, #20
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7ad8:	2308      	movs	r3, #8
    7ada:	18fb      	adds	r3, r7, r3
    7adc:	4a0b      	ldr	r2, [pc, #44]	; (7b0c <_sercom_get_interrupt_vector+0x3c>)
    7ade:	6811      	ldr	r1, [r2, #0]
    7ae0:	6019      	str	r1, [r3, #0]
    7ae2:	8892      	ldrh	r2, [r2, #4]
    7ae4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7ae6:	230f      	movs	r3, #15
    7ae8:	18fc      	adds	r4, r7, r3
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	0018      	movs	r0, r3
    7aee:	4b08      	ldr	r3, [pc, #32]	; (7b10 <_sercom_get_interrupt_vector+0x40>)
    7af0:	4798      	blx	r3
    7af2:	0003      	movs	r3, r0
    7af4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7af6:	230f      	movs	r3, #15
    7af8:	18fb      	adds	r3, r7, r3
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	2208      	movs	r2, #8
    7afe:	18ba      	adds	r2, r7, r2
    7b00:	5cd3      	ldrb	r3, [r2, r3]
    7b02:	b25b      	sxtb	r3, r3
}
    7b04:	0018      	movs	r0, r3
    7b06:	46bd      	mov	sp, r7
    7b08:	b005      	add	sp, #20
    7b0a:	bd90      	pop	{r4, r7, pc}
    7b0c:	0001b848 	.word	0x0001b848
    7b10:	00007a01 	.word	0x00007a01

00007b14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7b14:	b580      	push	{r7, lr}
    7b16:	af00      	add	r7, sp, #0
    7b18:	4b03      	ldr	r3, [pc, #12]	; (7b28 <SERCOM0_Handler+0x14>)
    7b1a:	681b      	ldr	r3, [r3, #0]
    7b1c:	2000      	movs	r0, #0
    7b1e:	4798      	blx	r3
    7b20:	46c0      	nop			; (mov r8, r8)
    7b22:	46bd      	mov	sp, r7
    7b24:	bd80      	pop	{r7, pc}
    7b26:	46c0      	nop			; (mov r8, r8)
    7b28:	20000200 	.word	0x20000200

00007b2c <SERCOM1_Handler>:
    7b2c:	b580      	push	{r7, lr}
    7b2e:	af00      	add	r7, sp, #0
    7b30:	4b03      	ldr	r3, [pc, #12]	; (7b40 <SERCOM1_Handler+0x14>)
    7b32:	685b      	ldr	r3, [r3, #4]
    7b34:	2001      	movs	r0, #1
    7b36:	4798      	blx	r3
    7b38:	46c0      	nop			; (mov r8, r8)
    7b3a:	46bd      	mov	sp, r7
    7b3c:	bd80      	pop	{r7, pc}
    7b3e:	46c0      	nop			; (mov r8, r8)
    7b40:	20000200 	.word	0x20000200

00007b44 <SERCOM2_Handler>:
    7b44:	b580      	push	{r7, lr}
    7b46:	af00      	add	r7, sp, #0
    7b48:	4b03      	ldr	r3, [pc, #12]	; (7b58 <SERCOM2_Handler+0x14>)
    7b4a:	689b      	ldr	r3, [r3, #8]
    7b4c:	2002      	movs	r0, #2
    7b4e:	4798      	blx	r3
    7b50:	46c0      	nop			; (mov r8, r8)
    7b52:	46bd      	mov	sp, r7
    7b54:	bd80      	pop	{r7, pc}
    7b56:	46c0      	nop			; (mov r8, r8)
    7b58:	20000200 	.word	0x20000200

00007b5c <SERCOM3_Handler>:
    7b5c:	b580      	push	{r7, lr}
    7b5e:	af00      	add	r7, sp, #0
    7b60:	4b03      	ldr	r3, [pc, #12]	; (7b70 <SERCOM3_Handler+0x14>)
    7b62:	68db      	ldr	r3, [r3, #12]
    7b64:	2003      	movs	r0, #3
    7b66:	4798      	blx	r3
    7b68:	46c0      	nop			; (mov r8, r8)
    7b6a:	46bd      	mov	sp, r7
    7b6c:	bd80      	pop	{r7, pc}
    7b6e:	46c0      	nop			; (mov r8, r8)
    7b70:	20000200 	.word	0x20000200

00007b74 <SERCOM4_Handler>:
    7b74:	b580      	push	{r7, lr}
    7b76:	af00      	add	r7, sp, #0
    7b78:	4b03      	ldr	r3, [pc, #12]	; (7b88 <SERCOM4_Handler+0x14>)
    7b7a:	691b      	ldr	r3, [r3, #16]
    7b7c:	2004      	movs	r0, #4
    7b7e:	4798      	blx	r3
    7b80:	46c0      	nop			; (mov r8, r8)
    7b82:	46bd      	mov	sp, r7
    7b84:	bd80      	pop	{r7, pc}
    7b86:	46c0      	nop			; (mov r8, r8)
    7b88:	20000200 	.word	0x20000200

00007b8c <SERCOM5_Handler>:
    7b8c:	b580      	push	{r7, lr}
    7b8e:	af00      	add	r7, sp, #0
    7b90:	4b03      	ldr	r3, [pc, #12]	; (7ba0 <SERCOM5_Handler+0x14>)
    7b92:	695b      	ldr	r3, [r3, #20]
    7b94:	2005      	movs	r0, #5
    7b96:	4798      	blx	r3
    7b98:	46c0      	nop			; (mov r8, r8)
    7b9a:	46bd      	mov	sp, r7
    7b9c:	bd80      	pop	{r7, pc}
    7b9e:	46c0      	nop			; (mov r8, r8)
    7ba0:	20000200 	.word	0x20000200

00007ba4 <system_pinmux_get_config_defaults>:
{
    7ba4:	b580      	push	{r7, lr}
    7ba6:	b082      	sub	sp, #8
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	2280      	movs	r2, #128	; 0x80
    7bb0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	2200      	movs	r2, #0
    7bb6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	2201      	movs	r2, #1
    7bbc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	2200      	movs	r2, #0
    7bc2:	70da      	strb	r2, [r3, #3]
}
    7bc4:	46c0      	nop			; (mov r8, r8)
    7bc6:	46bd      	mov	sp, r7
    7bc8:	b002      	add	sp, #8
    7bca:	bd80      	pop	{r7, pc}

00007bcc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b084      	sub	sp, #16
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	0002      	movs	r2, r0
    7bd4:	6039      	str	r1, [r7, #0]
    7bd6:	1dfb      	adds	r3, r7, #7
    7bd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7bda:	230c      	movs	r3, #12
    7bdc:	18fb      	adds	r3, r7, r3
    7bde:	0018      	movs	r0, r3
    7be0:	4b10      	ldr	r3, [pc, #64]	; (7c24 <port_pin_set_config+0x58>)
    7be2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7be4:	230c      	movs	r3, #12
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	2280      	movs	r2, #128	; 0x80
    7bea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7bec:	683b      	ldr	r3, [r7, #0]
    7bee:	781a      	ldrb	r2, [r3, #0]
    7bf0:	230c      	movs	r3, #12
    7bf2:	18fb      	adds	r3, r7, r3
    7bf4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    7bf6:	683b      	ldr	r3, [r7, #0]
    7bf8:	785a      	ldrb	r2, [r3, #1]
    7bfa:	230c      	movs	r3, #12
    7bfc:	18fb      	adds	r3, r7, r3
    7bfe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7c00:	683b      	ldr	r3, [r7, #0]
    7c02:	789a      	ldrb	r2, [r3, #2]
    7c04:	230c      	movs	r3, #12
    7c06:	18fb      	adds	r3, r7, r3
    7c08:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7c0a:	230c      	movs	r3, #12
    7c0c:	18fa      	adds	r2, r7, r3
    7c0e:	1dfb      	adds	r3, r7, #7
    7c10:	781b      	ldrb	r3, [r3, #0]
    7c12:	0011      	movs	r1, r2
    7c14:	0018      	movs	r0, r3
    7c16:	4b04      	ldr	r3, [pc, #16]	; (7c28 <port_pin_set_config+0x5c>)
    7c18:	4798      	blx	r3
}
    7c1a:	46c0      	nop			; (mov r8, r8)
    7c1c:	46bd      	mov	sp, r7
    7c1e:	b004      	add	sp, #16
    7c20:	bd80      	pop	{r7, pc}
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	00007ba5 	.word	0x00007ba5
    7c28:	000088d9 	.word	0x000088d9

00007c2c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7c2c:	b580      	push	{r7, lr}
    7c2e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7c30:	46c0      	nop			; (mov r8, r8)
    7c32:	46bd      	mov	sp, r7
    7c34:	bd80      	pop	{r7, pc}
	...

00007c38 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    7c38:	b580      	push	{r7, lr}
    7c3a:	b082      	sub	sp, #8
    7c3c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7c3e:	4b10      	ldr	r3, [pc, #64]	; (7c80 <cpu_irq_enter_critical+0x48>)
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d112      	bne.n	7c6c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7c46:	f3ef 8310 	mrs	r3, PRIMASK
    7c4a:	607b      	str	r3, [r7, #4]
  return(result);
    7c4c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d109      	bne.n	7c66 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    7c52:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    7c54:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    7c58:	4b0a      	ldr	r3, [pc, #40]	; (7c84 <cpu_irq_enter_critical+0x4c>)
    7c5a:	2200      	movs	r2, #0
    7c5c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7c5e:	4b0a      	ldr	r3, [pc, #40]	; (7c88 <cpu_irq_enter_critical+0x50>)
    7c60:	2201      	movs	r2, #1
    7c62:	701a      	strb	r2, [r3, #0]
    7c64:	e002      	b.n	7c6c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    7c66:	4b08      	ldr	r3, [pc, #32]	; (7c88 <cpu_irq_enter_critical+0x50>)
    7c68:	2200      	movs	r2, #0
    7c6a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    7c6c:	4b04      	ldr	r3, [pc, #16]	; (7c80 <cpu_irq_enter_critical+0x48>)
    7c6e:	681b      	ldr	r3, [r3, #0]
    7c70:	1c5a      	adds	r2, r3, #1
    7c72:	4b03      	ldr	r3, [pc, #12]	; (7c80 <cpu_irq_enter_critical+0x48>)
    7c74:	601a      	str	r2, [r3, #0]
}
    7c76:	46c0      	nop			; (mov r8, r8)
    7c78:	46bd      	mov	sp, r7
    7c7a:	b002      	add	sp, #8
    7c7c:	bd80      	pop	{r7, pc}
    7c7e:	46c0      	nop			; (mov r8, r8)
    7c80:	20000218 	.word	0x20000218
    7c84:	20000000 	.word	0x20000000
    7c88:	2000021c 	.word	0x2000021c

00007c8c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7c90:	4b0b      	ldr	r3, [pc, #44]	; (7cc0 <cpu_irq_leave_critical+0x34>)
    7c92:	681b      	ldr	r3, [r3, #0]
    7c94:	1e5a      	subs	r2, r3, #1
    7c96:	4b0a      	ldr	r3, [pc, #40]	; (7cc0 <cpu_irq_leave_critical+0x34>)
    7c98:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    7c9a:	4b09      	ldr	r3, [pc, #36]	; (7cc0 <cpu_irq_leave_critical+0x34>)
    7c9c:	681b      	ldr	r3, [r3, #0]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d10a      	bne.n	7cb8 <cpu_irq_leave_critical+0x2c>
    7ca2:	4b08      	ldr	r3, [pc, #32]	; (7cc4 <cpu_irq_leave_critical+0x38>)
    7ca4:	781b      	ldrb	r3, [r3, #0]
    7ca6:	b2db      	uxtb	r3, r3
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d005      	beq.n	7cb8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    7cac:	4b06      	ldr	r3, [pc, #24]	; (7cc8 <cpu_irq_leave_critical+0x3c>)
    7cae:	2201      	movs	r2, #1
    7cb0:	701a      	strb	r2, [r3, #0]
    7cb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7cb6:	b662      	cpsie	i
	}
}
    7cb8:	46c0      	nop			; (mov r8, r8)
    7cba:	46bd      	mov	sp, r7
    7cbc:	bd80      	pop	{r7, pc}
    7cbe:	46c0      	nop			; (mov r8, r8)
    7cc0:	20000218 	.word	0x20000218
    7cc4:	2000021c 	.word	0x2000021c
    7cc8:	20000000 	.word	0x20000000

00007ccc <system_gclk_gen_get_config_defaults>:
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b082      	sub	sp, #8
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	2201      	movs	r2, #1
    7cd8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	2200      	movs	r2, #0
    7cde:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7ce0:	687b      	ldr	r3, [r7, #4]
    7ce2:	2206      	movs	r2, #6
    7ce4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    7ce6:	687b      	ldr	r3, [r7, #4]
    7ce8:	2200      	movs	r2, #0
    7cea:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	2200      	movs	r2, #0
    7cf0:	725a      	strb	r2, [r3, #9]
}
    7cf2:	46c0      	nop			; (mov r8, r8)
    7cf4:	46bd      	mov	sp, r7
    7cf6:	b002      	add	sp, #8
    7cf8:	bd80      	pop	{r7, pc}

00007cfa <system_clock_source_osc32k_get_config_defaults>:
{
    7cfa:	b580      	push	{r7, lr}
    7cfc:	b082      	sub	sp, #8
    7cfe:	af00      	add	r7, sp, #0
    7d00:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	2201      	movs	r2, #1
    7d06:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	2201      	movs	r2, #1
    7d0c:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	2200      	movs	r2, #0
    7d12:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	2201      	movs	r2, #1
    7d18:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    7d1a:	687b      	ldr	r3, [r7, #4]
    7d1c:	2207      	movs	r2, #7
    7d1e:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	2200      	movs	r2, #0
    7d24:	715a      	strb	r2, [r3, #5]
}
    7d26:	46c0      	nop			; (mov r8, r8)
    7d28:	46bd      	mov	sp, r7
    7d2a:	b002      	add	sp, #8
    7d2c:	bd80      	pop	{r7, pc}

00007d2e <system_clock_source_osc8m_get_config_defaults>:
{
    7d2e:	b580      	push	{r7, lr}
    7d30:	b082      	sub	sp, #8
    7d32:	af00      	add	r7, sp, #0
    7d34:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    7d36:	687b      	ldr	r3, [r7, #4]
    7d38:	2203      	movs	r2, #3
    7d3a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	2200      	movs	r2, #0
    7d40:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	2201      	movs	r2, #1
    7d46:	709a      	strb	r2, [r3, #2]
}
    7d48:	46c0      	nop			; (mov r8, r8)
    7d4a:	46bd      	mov	sp, r7
    7d4c:	b002      	add	sp, #8
    7d4e:	bd80      	pop	{r7, pc}

00007d50 <system_cpu_clock_set_divider>:
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b082      	sub	sp, #8
    7d54:	af00      	add	r7, sp, #0
    7d56:	0002      	movs	r2, r0
    7d58:	1dfb      	adds	r3, r7, #7
    7d5a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    7d5c:	4a03      	ldr	r2, [pc, #12]	; (7d6c <system_cpu_clock_set_divider+0x1c>)
    7d5e:	1dfb      	adds	r3, r7, #7
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	7213      	strb	r3, [r2, #8]
}
    7d64:	46c0      	nop			; (mov r8, r8)
    7d66:	46bd      	mov	sp, r7
    7d68:	b002      	add	sp, #8
    7d6a:	bd80      	pop	{r7, pc}
    7d6c:	40000400 	.word	0x40000400

00007d70 <system_apb_clock_set_divider>:
{
    7d70:	b580      	push	{r7, lr}
    7d72:	b082      	sub	sp, #8
    7d74:	af00      	add	r7, sp, #0
    7d76:	0002      	movs	r2, r0
    7d78:	1dfb      	adds	r3, r7, #7
    7d7a:	701a      	strb	r2, [r3, #0]
    7d7c:	1dbb      	adds	r3, r7, #6
    7d7e:	1c0a      	adds	r2, r1, #0
    7d80:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7d82:	1dfb      	adds	r3, r7, #7
    7d84:	781b      	ldrb	r3, [r3, #0]
    7d86:	2b01      	cmp	r3, #1
    7d88:	d008      	beq.n	7d9c <system_apb_clock_set_divider+0x2c>
    7d8a:	2b02      	cmp	r3, #2
    7d8c:	d00b      	beq.n	7da6 <system_apb_clock_set_divider+0x36>
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d10e      	bne.n	7db0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    7d92:	4a0b      	ldr	r2, [pc, #44]	; (7dc0 <system_apb_clock_set_divider+0x50>)
    7d94:	1dbb      	adds	r3, r7, #6
    7d96:	781b      	ldrb	r3, [r3, #0]
    7d98:	7253      	strb	r3, [r2, #9]
			break;
    7d9a:	e00b      	b.n	7db4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    7d9c:	4a08      	ldr	r2, [pc, #32]	; (7dc0 <system_apb_clock_set_divider+0x50>)
    7d9e:	1dbb      	adds	r3, r7, #6
    7da0:	781b      	ldrb	r3, [r3, #0]
    7da2:	7293      	strb	r3, [r2, #10]
			break;
    7da4:	e006      	b.n	7db4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    7da6:	4a06      	ldr	r2, [pc, #24]	; (7dc0 <system_apb_clock_set_divider+0x50>)
    7da8:	1dbb      	adds	r3, r7, #6
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	72d3      	strb	r3, [r2, #11]
			break;
    7dae:	e001      	b.n	7db4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    7db0:	2317      	movs	r3, #23
    7db2:	e000      	b.n	7db6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    7db4:	2300      	movs	r3, #0
}
    7db6:	0018      	movs	r0, r3
    7db8:	46bd      	mov	sp, r7
    7dba:	b002      	add	sp, #8
    7dbc:	bd80      	pop	{r7, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	40000400 	.word	0x40000400

00007dc4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b082      	sub	sp, #8
    7dc8:	af00      	add	r7, sp, #0
    7dca:	0002      	movs	r2, r0
    7dcc:	1dfb      	adds	r3, r7, #7
    7dce:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7dd0:	4a08      	ldr	r2, [pc, #32]	; (7df4 <system_flash_set_waitstates+0x30>)
    7dd2:	1dfb      	adds	r3, r7, #7
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	210f      	movs	r1, #15
    7dd8:	400b      	ands	r3, r1
    7dda:	b2d9      	uxtb	r1, r3
    7ddc:	6853      	ldr	r3, [r2, #4]
    7dde:	200f      	movs	r0, #15
    7de0:	4001      	ands	r1, r0
    7de2:	0049      	lsls	r1, r1, #1
    7de4:	201e      	movs	r0, #30
    7de6:	4383      	bics	r3, r0
    7de8:	430b      	orrs	r3, r1
    7dea:	6053      	str	r3, [r2, #4]
}
    7dec:	46c0      	nop			; (mov r8, r8)
    7dee:	46bd      	mov	sp, r7
    7df0:	b002      	add	sp, #8
    7df2:	bd80      	pop	{r7, pc}
    7df4:	41004000 	.word	0x41004000

00007df8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    7df8:	b580      	push	{r7, lr}
    7dfa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7dfc:	46c0      	nop			; (mov r8, r8)
    7dfe:	4b04      	ldr	r3, [pc, #16]	; (7e10 <_system_dfll_wait_for_sync+0x18>)
    7e00:	68db      	ldr	r3, [r3, #12]
    7e02:	2210      	movs	r2, #16
    7e04:	4013      	ands	r3, r2
    7e06:	d0fa      	beq.n	7dfe <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    7e08:	46c0      	nop			; (mov r8, r8)
    7e0a:	46bd      	mov	sp, r7
    7e0c:	bd80      	pop	{r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	40000800 	.word	0x40000800

00007e14 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    7e14:	b580      	push	{r7, lr}
    7e16:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7e18:	4b0c      	ldr	r3, [pc, #48]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e1a:	2202      	movs	r2, #2
    7e1c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7e1e:	4b0c      	ldr	r3, [pc, #48]	; (7e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7e20:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7e22:	4a0a      	ldr	r2, [pc, #40]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e24:	4b0b      	ldr	r3, [pc, #44]	; (7e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7e26:	689b      	ldr	r3, [r3, #8]
    7e28:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7e2a:	4a08      	ldr	r2, [pc, #32]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e2c:	4b09      	ldr	r3, [pc, #36]	; (7e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7e2e:	685b      	ldr	r3, [r3, #4]
    7e30:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    7e32:	4b06      	ldr	r3, [pc, #24]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e34:	2200      	movs	r2, #0
    7e36:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7e38:	4b05      	ldr	r3, [pc, #20]	; (7e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7e3a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7e3c:	4a03      	ldr	r2, [pc, #12]	; (7e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7e3e:	4b05      	ldr	r3, [pc, #20]	; (7e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7e40:	681b      	ldr	r3, [r3, #0]
    7e42:	b29b      	uxth	r3, r3
    7e44:	8493      	strh	r3, [r2, #36]	; 0x24
}
    7e46:	46c0      	nop			; (mov r8, r8)
    7e48:	46bd      	mov	sp, r7
    7e4a:	bd80      	pop	{r7, pc}
    7e4c:	40000800 	.word	0x40000800
    7e50:	00007df9 	.word	0x00007df9
    7e54:	20000220 	.word	0x20000220

00007e58 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7e58:	b580      	push	{r7, lr}
    7e5a:	b082      	sub	sp, #8
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	0002      	movs	r2, r0
    7e60:	1dfb      	adds	r3, r7, #7
    7e62:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7e64:	1dfb      	adds	r3, r7, #7
    7e66:	781b      	ldrb	r3, [r3, #0]
    7e68:	2b08      	cmp	r3, #8
    7e6a:	d840      	bhi.n	7eee <system_clock_source_get_hz+0x96>
    7e6c:	009a      	lsls	r2, r3, #2
    7e6e:	4b22      	ldr	r3, [pc, #136]	; (7ef8 <system_clock_source_get_hz+0xa0>)
    7e70:	18d3      	adds	r3, r2, r3
    7e72:	681b      	ldr	r3, [r3, #0]
    7e74:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    7e76:	4b21      	ldr	r3, [pc, #132]	; (7efc <system_clock_source_get_hz+0xa4>)
    7e78:	691b      	ldr	r3, [r3, #16]
    7e7a:	e039      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7e7c:	4b20      	ldr	r3, [pc, #128]	; (7f00 <system_clock_source_get_hz+0xa8>)
    7e7e:	6a1b      	ldr	r3, [r3, #32]
    7e80:	059b      	lsls	r3, r3, #22
    7e82:	0f9b      	lsrs	r3, r3, #30
    7e84:	b2db      	uxtb	r3, r3
    7e86:	001a      	movs	r2, r3
    7e88:	4b1e      	ldr	r3, [pc, #120]	; (7f04 <system_clock_source_get_hz+0xac>)
    7e8a:	40d3      	lsrs	r3, r2
    7e8c:	e030      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    7e8e:	2380      	movs	r3, #128	; 0x80
    7e90:	021b      	lsls	r3, r3, #8
    7e92:	e02d      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    7e94:	2380      	movs	r3, #128	; 0x80
    7e96:	021b      	lsls	r3, r3, #8
    7e98:	e02a      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    7e9a:	4b18      	ldr	r3, [pc, #96]	; (7efc <system_clock_source_get_hz+0xa4>)
    7e9c:	695b      	ldr	r3, [r3, #20]
    7e9e:	e027      	b.n	7ef0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7ea0:	4b16      	ldr	r3, [pc, #88]	; (7efc <system_clock_source_get_hz+0xa4>)
    7ea2:	681b      	ldr	r3, [r3, #0]
    7ea4:	2202      	movs	r2, #2
    7ea6:	4013      	ands	r3, r2
    7ea8:	d101      	bne.n	7eae <system_clock_source_get_hz+0x56>
			return 0;
    7eaa:	2300      	movs	r3, #0
    7eac:	e020      	b.n	7ef0 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    7eae:	4b16      	ldr	r3, [pc, #88]	; (7f08 <system_clock_source_get_hz+0xb0>)
    7eb0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    7eb2:	4b12      	ldr	r3, [pc, #72]	; (7efc <system_clock_source_get_hz+0xa4>)
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	2204      	movs	r2, #4
    7eb8:	4013      	ands	r3, r2
    7eba:	d009      	beq.n	7ed0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ebc:	2000      	movs	r0, #0
    7ebe:	4b13      	ldr	r3, [pc, #76]	; (7f0c <system_clock_source_get_hz+0xb4>)
    7ec0:	4798      	blx	r3
    7ec2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    7ec4:	4b0d      	ldr	r3, [pc, #52]	; (7efc <system_clock_source_get_hz+0xa4>)
    7ec6:	689b      	ldr	r3, [r3, #8]
    7ec8:	041b      	lsls	r3, r3, #16
    7eca:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ecc:	4353      	muls	r3, r2
    7ece:	e00f      	b.n	7ef0 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    7ed0:	4b0f      	ldr	r3, [pc, #60]	; (7f10 <system_clock_source_get_hz+0xb8>)
    7ed2:	e00d      	b.n	7ef0 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7ed4:	4a0a      	ldr	r2, [pc, #40]	; (7f00 <system_clock_source_get_hz+0xa8>)
    7ed6:	2350      	movs	r3, #80	; 0x50
    7ed8:	5cd3      	ldrb	r3, [r2, r3]
    7eda:	b2db      	uxtb	r3, r3
    7edc:	001a      	movs	r2, r3
    7ede:	2304      	movs	r3, #4
    7ee0:	4013      	ands	r3, r2
    7ee2:	d101      	bne.n	7ee8 <system_clock_source_get_hz+0x90>
			return 0;
    7ee4:	2300      	movs	r3, #0
    7ee6:	e003      	b.n	7ef0 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    7ee8:	4b04      	ldr	r3, [pc, #16]	; (7efc <system_clock_source_get_hz+0xa4>)
    7eea:	68db      	ldr	r3, [r3, #12]
    7eec:	e000      	b.n	7ef0 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    7eee:	2300      	movs	r3, #0
	}
}
    7ef0:	0018      	movs	r0, r3
    7ef2:	46bd      	mov	sp, r7
    7ef4:	b002      	add	sp, #8
    7ef6:	bd80      	pop	{r7, pc}
    7ef8:	0001b850 	.word	0x0001b850
    7efc:	20000220 	.word	0x20000220
    7f00:	40000800 	.word	0x40000800
    7f04:	007a1200 	.word	0x007a1200
    7f08:	00007df9 	.word	0x00007df9
    7f0c:	00008711 	.word	0x00008711
    7f10:	02dc6c00 	.word	0x02dc6c00

00007f14 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b084      	sub	sp, #16
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7f1c:	4b1a      	ldr	r3, [pc, #104]	; (7f88 <system_clock_source_osc8m_set_config+0x74>)
    7f1e:	6a1b      	ldr	r3, [r3, #32]
    7f20:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	1c1a      	adds	r2, r3, #0
    7f28:	2303      	movs	r3, #3
    7f2a:	4013      	ands	r3, r2
    7f2c:	b2da      	uxtb	r2, r3
    7f2e:	230d      	movs	r3, #13
    7f30:	18fb      	adds	r3, r7, r3
    7f32:	2103      	movs	r1, #3
    7f34:	400a      	ands	r2, r1
    7f36:	0010      	movs	r0, r2
    7f38:	781a      	ldrb	r2, [r3, #0]
    7f3a:	2103      	movs	r1, #3
    7f3c:	438a      	bics	r2, r1
    7f3e:	1c11      	adds	r1, r2, #0
    7f40:	1c02      	adds	r2, r0, #0
    7f42:	430a      	orrs	r2, r1
    7f44:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	789a      	ldrb	r2, [r3, #2]
    7f4a:	230c      	movs	r3, #12
    7f4c:	18fb      	adds	r3, r7, r3
    7f4e:	01d0      	lsls	r0, r2, #7
    7f50:	781a      	ldrb	r2, [r3, #0]
    7f52:	217f      	movs	r1, #127	; 0x7f
    7f54:	400a      	ands	r2, r1
    7f56:	1c11      	adds	r1, r2, #0
    7f58:	1c02      	adds	r2, r0, #0
    7f5a:	430a      	orrs	r2, r1
    7f5c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	785a      	ldrb	r2, [r3, #1]
    7f62:	230c      	movs	r3, #12
    7f64:	18fb      	adds	r3, r7, r3
    7f66:	2101      	movs	r1, #1
    7f68:	400a      	ands	r2, r1
    7f6a:	0190      	lsls	r0, r2, #6
    7f6c:	781a      	ldrb	r2, [r3, #0]
    7f6e:	2140      	movs	r1, #64	; 0x40
    7f70:	438a      	bics	r2, r1
    7f72:	1c11      	adds	r1, r2, #0
    7f74:	1c02      	adds	r2, r0, #0
    7f76:	430a      	orrs	r2, r1
    7f78:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    7f7a:	4b03      	ldr	r3, [pc, #12]	; (7f88 <system_clock_source_osc8m_set_config+0x74>)
    7f7c:	68fa      	ldr	r2, [r7, #12]
    7f7e:	621a      	str	r2, [r3, #32]
}
    7f80:	46c0      	nop			; (mov r8, r8)
    7f82:	46bd      	mov	sp, r7
    7f84:	b004      	add	sp, #16
    7f86:	bd80      	pop	{r7, pc}
    7f88:	40000800 	.word	0x40000800

00007f8c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b084      	sub	sp, #16
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    7f94:	4b2f      	ldr	r3, [pc, #188]	; (8054 <system_clock_source_osc32k_set_config+0xc8>)
    7f96:	699b      	ldr	r3, [r3, #24]
    7f98:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	785a      	ldrb	r2, [r3, #1]
    7f9e:	230c      	movs	r3, #12
    7fa0:	18fb      	adds	r3, r7, r3
    7fa2:	2101      	movs	r1, #1
    7fa4:	400a      	ands	r2, r1
    7fa6:	00d0      	lsls	r0, r2, #3
    7fa8:	781a      	ldrb	r2, [r3, #0]
    7faa:	2108      	movs	r1, #8
    7fac:	438a      	bics	r2, r1
    7fae:	1c11      	adds	r1, r2, #0
    7fb0:	1c02      	adds	r2, r0, #0
    7fb2:	430a      	orrs	r2, r1
    7fb4:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	789a      	ldrb	r2, [r3, #2]
    7fba:	230c      	movs	r3, #12
    7fbc:	18fb      	adds	r3, r7, r3
    7fbe:	2101      	movs	r1, #1
    7fc0:	400a      	ands	r2, r1
    7fc2:	0090      	lsls	r0, r2, #2
    7fc4:	781a      	ldrb	r2, [r3, #0]
    7fc6:	2104      	movs	r1, #4
    7fc8:	438a      	bics	r2, r1
    7fca:	1c11      	adds	r1, r2, #0
    7fcc:	1c02      	adds	r2, r0, #0
    7fce:	430a      	orrs	r2, r1
    7fd0:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	781b      	ldrb	r3, [r3, #0]
    7fd6:	1c1a      	adds	r2, r3, #0
    7fd8:	2307      	movs	r3, #7
    7fda:	4013      	ands	r3, r2
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	230d      	movs	r3, #13
    7fe0:	18fb      	adds	r3, r7, r3
    7fe2:	2107      	movs	r1, #7
    7fe4:	400a      	ands	r2, r1
    7fe6:	0010      	movs	r0, r2
    7fe8:	781a      	ldrb	r2, [r3, #0]
    7fea:	2107      	movs	r1, #7
    7fec:	438a      	bics	r2, r1
    7fee:	1c11      	adds	r1, r2, #0
    7ff0:	1c02      	adds	r2, r0, #0
    7ff2:	430a      	orrs	r2, r1
    7ff4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7ff6:	687b      	ldr	r3, [r7, #4]
    7ff8:	791a      	ldrb	r2, [r3, #4]
    7ffa:	230c      	movs	r3, #12
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	01d0      	lsls	r0, r2, #7
    8000:	781a      	ldrb	r2, [r3, #0]
    8002:	217f      	movs	r1, #127	; 0x7f
    8004:	400a      	ands	r2, r1
    8006:	1c11      	adds	r1, r2, #0
    8008:	1c02      	adds	r2, r0, #0
    800a:	430a      	orrs	r2, r1
    800c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    800e:	687b      	ldr	r3, [r7, #4]
    8010:	78da      	ldrb	r2, [r3, #3]
    8012:	230c      	movs	r3, #12
    8014:	18fb      	adds	r3, r7, r3
    8016:	2101      	movs	r1, #1
    8018:	400a      	ands	r2, r1
    801a:	0190      	lsls	r0, r2, #6
    801c:	781a      	ldrb	r2, [r3, #0]
    801e:	2140      	movs	r1, #64	; 0x40
    8020:	438a      	bics	r2, r1
    8022:	1c11      	adds	r1, r2, #0
    8024:	1c02      	adds	r2, r0, #0
    8026:	430a      	orrs	r2, r1
    8028:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	795a      	ldrb	r2, [r3, #5]
    802e:	230d      	movs	r3, #13
    8030:	18fb      	adds	r3, r7, r3
    8032:	2101      	movs	r1, #1
    8034:	400a      	ands	r2, r1
    8036:	0110      	lsls	r0, r2, #4
    8038:	781a      	ldrb	r2, [r3, #0]
    803a:	2110      	movs	r1, #16
    803c:	438a      	bics	r2, r1
    803e:	1c11      	adds	r1, r2, #0
    8040:	1c02      	adds	r2, r0, #0
    8042:	430a      	orrs	r2, r1
    8044:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    8046:	4b03      	ldr	r3, [pc, #12]	; (8054 <system_clock_source_osc32k_set_config+0xc8>)
    8048:	68fa      	ldr	r2, [r7, #12]
    804a:	619a      	str	r2, [r3, #24]
}
    804c:	46c0      	nop			; (mov r8, r8)
    804e:	46bd      	mov	sp, r7
    8050:	b004      	add	sp, #16
    8052:	bd80      	pop	{r7, pc}
    8054:	40000800 	.word	0x40000800

00008058 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    8058:	b580      	push	{r7, lr}
    805a:	b082      	sub	sp, #8
    805c:	af00      	add	r7, sp, #0
    805e:	0002      	movs	r2, r0
    8060:	1dfb      	adds	r3, r7, #7
    8062:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8064:	1dfb      	adds	r3, r7, #7
    8066:	781b      	ldrb	r3, [r3, #0]
    8068:	2b08      	cmp	r3, #8
    806a:	d83b      	bhi.n	80e4 <system_clock_source_enable+0x8c>
    806c:	009a      	lsls	r2, r3, #2
    806e:	4b21      	ldr	r3, [pc, #132]	; (80f4 <system_clock_source_enable+0x9c>)
    8070:	18d3      	adds	r3, r2, r3
    8072:	681b      	ldr	r3, [r3, #0]
    8074:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8076:	4b20      	ldr	r3, [pc, #128]	; (80f8 <system_clock_source_enable+0xa0>)
    8078:	4a1f      	ldr	r2, [pc, #124]	; (80f8 <system_clock_source_enable+0xa0>)
    807a:	6a12      	ldr	r2, [r2, #32]
    807c:	2102      	movs	r1, #2
    807e:	430a      	orrs	r2, r1
    8080:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    8082:	2300      	movs	r3, #0
    8084:	e031      	b.n	80ea <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8086:	4b1c      	ldr	r3, [pc, #112]	; (80f8 <system_clock_source_enable+0xa0>)
    8088:	4a1b      	ldr	r2, [pc, #108]	; (80f8 <system_clock_source_enable+0xa0>)
    808a:	6992      	ldr	r2, [r2, #24]
    808c:	2102      	movs	r1, #2
    808e:	430a      	orrs	r2, r1
    8090:	619a      	str	r2, [r3, #24]
		break;
    8092:	e029      	b.n	80e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8094:	4a18      	ldr	r2, [pc, #96]	; (80f8 <system_clock_source_enable+0xa0>)
    8096:	4b18      	ldr	r3, [pc, #96]	; (80f8 <system_clock_source_enable+0xa0>)
    8098:	8a1b      	ldrh	r3, [r3, #16]
    809a:	b29b      	uxth	r3, r3
    809c:	2102      	movs	r1, #2
    809e:	430b      	orrs	r3, r1
    80a0:	b29b      	uxth	r3, r3
    80a2:	8213      	strh	r3, [r2, #16]
		break;
    80a4:	e020      	b.n	80e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    80a6:	4a14      	ldr	r2, [pc, #80]	; (80f8 <system_clock_source_enable+0xa0>)
    80a8:	4b13      	ldr	r3, [pc, #76]	; (80f8 <system_clock_source_enable+0xa0>)
    80aa:	8a9b      	ldrh	r3, [r3, #20]
    80ac:	b29b      	uxth	r3, r3
    80ae:	2102      	movs	r1, #2
    80b0:	430b      	orrs	r3, r1
    80b2:	b29b      	uxth	r3, r3
    80b4:	8293      	strh	r3, [r2, #20]
		break;
    80b6:	e017      	b.n	80e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    80b8:	4b10      	ldr	r3, [pc, #64]	; (80fc <system_clock_source_enable+0xa4>)
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	2202      	movs	r2, #2
    80be:	431a      	orrs	r2, r3
    80c0:	4b0e      	ldr	r3, [pc, #56]	; (80fc <system_clock_source_enable+0xa4>)
    80c2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    80c4:	4b0e      	ldr	r3, [pc, #56]	; (8100 <system_clock_source_enable+0xa8>)
    80c6:	4798      	blx	r3
		break;
    80c8:	e00e      	b.n	80e8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    80ca:	4a0b      	ldr	r2, [pc, #44]	; (80f8 <system_clock_source_enable+0xa0>)
    80cc:	490a      	ldr	r1, [pc, #40]	; (80f8 <system_clock_source_enable+0xa0>)
    80ce:	2344      	movs	r3, #68	; 0x44
    80d0:	5ccb      	ldrb	r3, [r1, r3]
    80d2:	b2db      	uxtb	r3, r3
    80d4:	2102      	movs	r1, #2
    80d6:	430b      	orrs	r3, r1
    80d8:	b2d9      	uxtb	r1, r3
    80da:	2344      	movs	r3, #68	; 0x44
    80dc:	54d1      	strb	r1, [r2, r3]
		break;
    80de:	e003      	b.n	80e8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    80e0:	2300      	movs	r3, #0
    80e2:	e002      	b.n	80ea <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    80e4:	2317      	movs	r3, #23
    80e6:	e000      	b.n	80ea <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    80e8:	2300      	movs	r3, #0
}
    80ea:	0018      	movs	r0, r3
    80ec:	46bd      	mov	sp, r7
    80ee:	b002      	add	sp, #8
    80f0:	bd80      	pop	{r7, pc}
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	0001b874 	.word	0x0001b874
    80f8:	40000800 	.word	0x40000800
    80fc:	20000220 	.word	0x20000220
    8100:	00007e15 	.word	0x00007e15

00008104 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    8104:	b580      	push	{r7, lr}
    8106:	b082      	sub	sp, #8
    8108:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    810a:	003b      	movs	r3, r7
    810c:	2201      	movs	r2, #1
    810e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8110:	2300      	movs	r3, #0
    8112:	607b      	str	r3, [r7, #4]
    8114:	e009      	b.n	812a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	b2db      	uxtb	r3, r3
    811a:	003a      	movs	r2, r7
    811c:	0011      	movs	r1, r2
    811e:	0018      	movs	r0, r3
    8120:	4b05      	ldr	r3, [pc, #20]	; (8138 <_switch_peripheral_gclk+0x34>)
    8122:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	3301      	adds	r3, #1
    8128:	607b      	str	r3, [r7, #4]
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	2b24      	cmp	r3, #36	; 0x24
    812e:	d9f2      	bls.n	8116 <_switch_peripheral_gclk+0x12>
	}
}
    8130:	46c0      	nop			; (mov r8, r8)
    8132:	46bd      	mov	sp, r7
    8134:	b002      	add	sp, #8
    8136:	bd80      	pop	{r7, pc}
    8138:	000085ed 	.word	0x000085ed

0000813c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    813c:	b580      	push	{r7, lr}
    813e:	b0a2      	sub	sp, #136	; 0x88
    8140:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    8142:	4b4f      	ldr	r3, [pc, #316]	; (8280 <system_clock_init+0x144>)
    8144:	22c2      	movs	r2, #194	; 0xc2
    8146:	00d2      	lsls	r2, r2, #3
    8148:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    814a:	2000      	movs	r0, #0
    814c:	4b4d      	ldr	r3, [pc, #308]	; (8284 <system_clock_init+0x148>)
    814e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    8150:	4b4d      	ldr	r3, [pc, #308]	; (8288 <system_clock_init+0x14c>)
    8152:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    8154:	4a4a      	ldr	r2, [pc, #296]	; (8280 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    8156:	4b4d      	ldr	r3, [pc, #308]	; (828c <system_clock_init+0x150>)
    8158:	681b      	ldr	r3, [r3, #0]
    815a:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    815c:	b2db      	uxtb	r3, r3
    815e:	1c19      	adds	r1, r3, #0
    8160:	237f      	movs	r3, #127	; 0x7f
    8162:	400b      	ands	r3, r1
    8164:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    8166:	6993      	ldr	r3, [r2, #24]
    8168:	207f      	movs	r0, #127	; 0x7f
    816a:	4001      	ands	r1, r0
    816c:	0409      	lsls	r1, r1, #16
    816e:	4848      	ldr	r0, [pc, #288]	; (8290 <system_clock_init+0x154>)
    8170:	4003      	ands	r3, r0
    8172:	430b      	orrs	r3, r1
    8174:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    8176:	2380      	movs	r3, #128	; 0x80
    8178:	18fb      	adds	r3, r7, r3
    817a:	0018      	movs	r0, r3
    817c:	4b45      	ldr	r3, [pc, #276]	; (8294 <system_clock_init+0x158>)
    817e:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    8180:	2380      	movs	r3, #128	; 0x80
    8182:	18fb      	adds	r3, r7, r3
    8184:	2207      	movs	r2, #7
    8186:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    8188:	2380      	movs	r3, #128	; 0x80
    818a:	18fb      	adds	r3, r7, r3
    818c:	2201      	movs	r2, #1
    818e:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    8190:	2380      	movs	r3, #128	; 0x80
    8192:	18fb      	adds	r3, r7, r3
    8194:	2201      	movs	r2, #1
    8196:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    8198:	2380      	movs	r3, #128	; 0x80
    819a:	18fb      	adds	r3, r7, r3
    819c:	2201      	movs	r2, #1
    819e:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    81a0:	2380      	movs	r3, #128	; 0x80
    81a2:	18fb      	adds	r3, r7, r3
    81a4:	2200      	movs	r2, #0
    81a6:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    81a8:	2380      	movs	r3, #128	; 0x80
    81aa:	18fb      	adds	r3, r7, r3
    81ac:	0018      	movs	r0, r3
    81ae:	4b3a      	ldr	r3, [pc, #232]	; (8298 <system_clock_init+0x15c>)
    81b0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    81b2:	2004      	movs	r0, #4
    81b4:	4b39      	ldr	r3, [pc, #228]	; (829c <system_clock_init+0x160>)
    81b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    81b8:	237c      	movs	r3, #124	; 0x7c
    81ba:	18fb      	adds	r3, r7, r3
    81bc:	0018      	movs	r0, r3
    81be:	4b38      	ldr	r3, [pc, #224]	; (82a0 <system_clock_init+0x164>)
    81c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    81c2:	237c      	movs	r3, #124	; 0x7c
    81c4:	18fb      	adds	r3, r7, r3
    81c6:	2200      	movs	r2, #0
    81c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    81ca:	237c      	movs	r3, #124	; 0x7c
    81cc:	18fb      	adds	r3, r7, r3
    81ce:	2201      	movs	r2, #1
    81d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    81d2:	237c      	movs	r3, #124	; 0x7c
    81d4:	18fb      	adds	r3, r7, r3
    81d6:	2200      	movs	r2, #0
    81d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    81da:	237c      	movs	r3, #124	; 0x7c
    81dc:	18fb      	adds	r3, r7, r3
    81de:	0018      	movs	r0, r3
    81e0:	4b30      	ldr	r3, [pc, #192]	; (82a4 <system_clock_init+0x168>)
    81e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    81e4:	2006      	movs	r0, #6
    81e6:	4b2d      	ldr	r3, [pc, #180]	; (829c <system_clock_init+0x160>)
    81e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    81ea:	4b2f      	ldr	r3, [pc, #188]	; (82a8 <system_clock_init+0x16c>)
    81ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    81ee:	2358      	movs	r3, #88	; 0x58
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	0018      	movs	r0, r3
    81f4:	4b2d      	ldr	r3, [pc, #180]	; (82ac <system_clock_init+0x170>)
    81f6:	4798      	blx	r3
    81f8:	2358      	movs	r3, #88	; 0x58
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	2204      	movs	r2, #4
    81fe:	701a      	strb	r2, [r3, #0]
    8200:	2358      	movs	r3, #88	; 0x58
    8202:	18fb      	adds	r3, r7, r3
    8204:	2220      	movs	r2, #32
    8206:	605a      	str	r2, [r3, #4]
    8208:	2358      	movs	r3, #88	; 0x58
    820a:	18fb      	adds	r3, r7, r3
    820c:	2200      	movs	r2, #0
    820e:	721a      	strb	r2, [r3, #8]
    8210:	2358      	movs	r3, #88	; 0x58
    8212:	18fb      	adds	r3, r7, r3
    8214:	2200      	movs	r2, #0
    8216:	725a      	strb	r2, [r3, #9]
    8218:	2358      	movs	r3, #88	; 0x58
    821a:	18fb      	adds	r3, r7, r3
    821c:	0019      	movs	r1, r3
    821e:	2002      	movs	r0, #2
    8220:	4b23      	ldr	r3, [pc, #140]	; (82b0 <system_clock_init+0x174>)
    8222:	4798      	blx	r3
    8224:	2002      	movs	r0, #2
    8226:	4b23      	ldr	r3, [pc, #140]	; (82b4 <system_clock_init+0x178>)
    8228:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    822a:	2000      	movs	r0, #0
    822c:	4b22      	ldr	r3, [pc, #136]	; (82b8 <system_clock_init+0x17c>)
    822e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    8230:	2100      	movs	r1, #0
    8232:	2000      	movs	r0, #0
    8234:	4b21      	ldr	r3, [pc, #132]	; (82bc <system_clock_init+0x180>)
    8236:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    8238:	2100      	movs	r1, #0
    823a:	2001      	movs	r0, #1
    823c:	4b1f      	ldr	r3, [pc, #124]	; (82bc <system_clock_init+0x180>)
    823e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    8240:	2100      	movs	r1, #0
    8242:	2002      	movs	r0, #2
    8244:	4b1d      	ldr	r3, [pc, #116]	; (82bc <system_clock_init+0x180>)
    8246:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8248:	1d3b      	adds	r3, r7, #4
    824a:	0018      	movs	r0, r3
    824c:	4b17      	ldr	r3, [pc, #92]	; (82ac <system_clock_init+0x170>)
    824e:	4798      	blx	r3
    8250:	1d3b      	adds	r3, r7, #4
    8252:	2206      	movs	r2, #6
    8254:	701a      	strb	r2, [r3, #0]
    8256:	1d3b      	adds	r3, r7, #4
    8258:	2201      	movs	r2, #1
    825a:	605a      	str	r2, [r3, #4]
    825c:	1d3b      	adds	r3, r7, #4
    825e:	2200      	movs	r2, #0
    8260:	721a      	strb	r2, [r3, #8]
    8262:	1d3b      	adds	r3, r7, #4
    8264:	2200      	movs	r2, #0
    8266:	725a      	strb	r2, [r3, #9]
    8268:	1d3b      	adds	r3, r7, #4
    826a:	0019      	movs	r1, r3
    826c:	2000      	movs	r0, #0
    826e:	4b10      	ldr	r3, [pc, #64]	; (82b0 <system_clock_init+0x174>)
    8270:	4798      	blx	r3
    8272:	2000      	movs	r0, #0
    8274:	4b0f      	ldr	r3, [pc, #60]	; (82b4 <system_clock_init+0x178>)
    8276:	4798      	blx	r3
#endif
}
    8278:	46c0      	nop			; (mov r8, r8)
    827a:	46bd      	mov	sp, r7
    827c:	b022      	add	sp, #136	; 0x88
    827e:	bd80      	pop	{r7, pc}
    8280:	40000800 	.word	0x40000800
    8284:	00007dc5 	.word	0x00007dc5
    8288:	00008105 	.word	0x00008105
    828c:	00806024 	.word	0x00806024
    8290:	ff80ffff 	.word	0xff80ffff
    8294:	00007cfb 	.word	0x00007cfb
    8298:	00007f8d 	.word	0x00007f8d
    829c:	00008059 	.word	0x00008059
    82a0:	00007d2f 	.word	0x00007d2f
    82a4:	00007f15 	.word	0x00007f15
    82a8:	00008365 	.word	0x00008365
    82ac:	00007ccd 	.word	0x00007ccd
    82b0:	00008395 	.word	0x00008395
    82b4:	000084b9 	.word	0x000084b9
    82b8:	00007d51 	.word	0x00007d51
    82bc:	00007d71 	.word	0x00007d71

000082c0 <system_apb_clock_set_mask>:
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b082      	sub	sp, #8
    82c4:	af00      	add	r7, sp, #0
    82c6:	0002      	movs	r2, r0
    82c8:	6039      	str	r1, [r7, #0]
    82ca:	1dfb      	adds	r3, r7, #7
    82cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    82ce:	1dfb      	adds	r3, r7, #7
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	2b01      	cmp	r3, #1
    82d4:	d00a      	beq.n	82ec <system_apb_clock_set_mask+0x2c>
    82d6:	2b02      	cmp	r3, #2
    82d8:	d00f      	beq.n	82fa <system_apb_clock_set_mask+0x3a>
    82da:	2b00      	cmp	r3, #0
    82dc:	d114      	bne.n	8308 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    82de:	4b0e      	ldr	r3, [pc, #56]	; (8318 <system_apb_clock_set_mask+0x58>)
    82e0:	4a0d      	ldr	r2, [pc, #52]	; (8318 <system_apb_clock_set_mask+0x58>)
    82e2:	6991      	ldr	r1, [r2, #24]
    82e4:	683a      	ldr	r2, [r7, #0]
    82e6:	430a      	orrs	r2, r1
    82e8:	619a      	str	r2, [r3, #24]
			break;
    82ea:	e00f      	b.n	830c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    82ec:	4b0a      	ldr	r3, [pc, #40]	; (8318 <system_apb_clock_set_mask+0x58>)
    82ee:	4a0a      	ldr	r2, [pc, #40]	; (8318 <system_apb_clock_set_mask+0x58>)
    82f0:	69d1      	ldr	r1, [r2, #28]
    82f2:	683a      	ldr	r2, [r7, #0]
    82f4:	430a      	orrs	r2, r1
    82f6:	61da      	str	r2, [r3, #28]
			break;
    82f8:	e008      	b.n	830c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    82fa:	4b07      	ldr	r3, [pc, #28]	; (8318 <system_apb_clock_set_mask+0x58>)
    82fc:	4a06      	ldr	r2, [pc, #24]	; (8318 <system_apb_clock_set_mask+0x58>)
    82fe:	6a11      	ldr	r1, [r2, #32]
    8300:	683a      	ldr	r2, [r7, #0]
    8302:	430a      	orrs	r2, r1
    8304:	621a      	str	r2, [r3, #32]
			break;
    8306:	e001      	b.n	830c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8308:	2317      	movs	r3, #23
    830a:	e000      	b.n	830e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    830c:	2300      	movs	r3, #0
}
    830e:	0018      	movs	r0, r3
    8310:	46bd      	mov	sp, r7
    8312:	b002      	add	sp, #8
    8314:	bd80      	pop	{r7, pc}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	40000400 	.word	0x40000400

0000831c <system_interrupt_enter_critical_section>:
{
    831c:	b580      	push	{r7, lr}
    831e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8320:	4b02      	ldr	r3, [pc, #8]	; (832c <system_interrupt_enter_critical_section+0x10>)
    8322:	4798      	blx	r3
}
    8324:	46c0      	nop			; (mov r8, r8)
    8326:	46bd      	mov	sp, r7
    8328:	bd80      	pop	{r7, pc}
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	00007c39 	.word	0x00007c39

00008330 <system_interrupt_leave_critical_section>:
{
    8330:	b580      	push	{r7, lr}
    8332:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8334:	4b02      	ldr	r3, [pc, #8]	; (8340 <system_interrupt_leave_critical_section+0x10>)
    8336:	4798      	blx	r3
}
    8338:	46c0      	nop			; (mov r8, r8)
    833a:	46bd      	mov	sp, r7
    833c:	bd80      	pop	{r7, pc}
    833e:	46c0      	nop			; (mov r8, r8)
    8340:	00007c8d 	.word	0x00007c8d

00008344 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    8344:	b580      	push	{r7, lr}
    8346:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8348:	4b05      	ldr	r3, [pc, #20]	; (8360 <system_gclk_is_syncing+0x1c>)
    834a:	785b      	ldrb	r3, [r3, #1]
    834c:	b2db      	uxtb	r3, r3
    834e:	b25b      	sxtb	r3, r3
    8350:	2b00      	cmp	r3, #0
    8352:	da01      	bge.n	8358 <system_gclk_is_syncing+0x14>
		return true;
    8354:	2301      	movs	r3, #1
    8356:	e000      	b.n	835a <system_gclk_is_syncing+0x16>
	}

	return false;
    8358:	2300      	movs	r3, #0
}
    835a:	0018      	movs	r0, r3
    835c:	46bd      	mov	sp, r7
    835e:	bd80      	pop	{r7, pc}
    8360:	40000c00 	.word	0x40000c00

00008364 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    8364:	b580      	push	{r7, lr}
    8366:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    8368:	2108      	movs	r1, #8
    836a:	2000      	movs	r0, #0
    836c:	4b07      	ldr	r3, [pc, #28]	; (838c <system_gclk_init+0x28>)
    836e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8370:	4b07      	ldr	r3, [pc, #28]	; (8390 <system_gclk_init+0x2c>)
    8372:	2201      	movs	r2, #1
    8374:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8376:	46c0      	nop			; (mov r8, r8)
    8378:	4b05      	ldr	r3, [pc, #20]	; (8390 <system_gclk_init+0x2c>)
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	b2db      	uxtb	r3, r3
    837e:	001a      	movs	r2, r3
    8380:	2301      	movs	r3, #1
    8382:	4013      	ands	r3, r2
    8384:	d1f8      	bne.n	8378 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    8386:	46c0      	nop			; (mov r8, r8)
    8388:	46bd      	mov	sp, r7
    838a:	bd80      	pop	{r7, pc}
    838c:	000082c1 	.word	0x000082c1
    8390:	40000c00 	.word	0x40000c00

00008394 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8394:	b580      	push	{r7, lr}
    8396:	b086      	sub	sp, #24
    8398:	af00      	add	r7, sp, #0
    839a:	0002      	movs	r2, r0
    839c:	6039      	str	r1, [r7, #0]
    839e:	1dfb      	adds	r3, r7, #7
    83a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    83a2:	1dfb      	adds	r3, r7, #7
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    83a8:	1dfb      	adds	r3, r7, #7
    83aa:	781b      	ldrb	r3, [r3, #0]
    83ac:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    83ae:	683b      	ldr	r3, [r7, #0]
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	021b      	lsls	r3, r3, #8
    83b4:	001a      	movs	r2, r3
    83b6:	697b      	ldr	r3, [r7, #20]
    83b8:	4313      	orrs	r3, r2
    83ba:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    83bc:	683b      	ldr	r3, [r7, #0]
    83be:	785b      	ldrb	r3, [r3, #1]
    83c0:	2b00      	cmp	r3, #0
    83c2:	d004      	beq.n	83ce <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    83c4:	697b      	ldr	r3, [r7, #20]
    83c6:	2280      	movs	r2, #128	; 0x80
    83c8:	02d2      	lsls	r2, r2, #11
    83ca:	4313      	orrs	r3, r2
    83cc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    83ce:	683b      	ldr	r3, [r7, #0]
    83d0:	7a5b      	ldrb	r3, [r3, #9]
    83d2:	2b00      	cmp	r3, #0
    83d4:	d004      	beq.n	83e0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    83d6:	697b      	ldr	r3, [r7, #20]
    83d8:	2280      	movs	r2, #128	; 0x80
    83da:	0312      	lsls	r2, r2, #12
    83dc:	4313      	orrs	r3, r2
    83de:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    83e0:	683b      	ldr	r3, [r7, #0]
    83e2:	685b      	ldr	r3, [r3, #4]
    83e4:	2b01      	cmp	r3, #1
    83e6:	d92c      	bls.n	8442 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    83e8:	683b      	ldr	r3, [r7, #0]
    83ea:	685a      	ldr	r2, [r3, #4]
    83ec:	683b      	ldr	r3, [r7, #0]
    83ee:	685b      	ldr	r3, [r3, #4]
    83f0:	3b01      	subs	r3, #1
    83f2:	4013      	ands	r3, r2
    83f4:	d11a      	bne.n	842c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    83f6:	2300      	movs	r3, #0
    83f8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    83fa:	2302      	movs	r3, #2
    83fc:	60bb      	str	r3, [r7, #8]
    83fe:	e005      	b.n	840c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    8400:	68fb      	ldr	r3, [r7, #12]
    8402:	3301      	adds	r3, #1
    8404:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    8406:	68bb      	ldr	r3, [r7, #8]
    8408:	005b      	lsls	r3, r3, #1
    840a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    840c:	683b      	ldr	r3, [r7, #0]
    840e:	685a      	ldr	r2, [r3, #4]
    8410:	68bb      	ldr	r3, [r7, #8]
    8412:	429a      	cmp	r2, r3
    8414:	d8f4      	bhi.n	8400 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	021b      	lsls	r3, r3, #8
    841a:	693a      	ldr	r2, [r7, #16]
    841c:	4313      	orrs	r3, r2
    841e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8420:	697b      	ldr	r3, [r7, #20]
    8422:	2280      	movs	r2, #128	; 0x80
    8424:	0352      	lsls	r2, r2, #13
    8426:	4313      	orrs	r3, r2
    8428:	617b      	str	r3, [r7, #20]
    842a:	e00a      	b.n	8442 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    842c:	683b      	ldr	r3, [r7, #0]
    842e:	685b      	ldr	r3, [r3, #4]
    8430:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    8432:	693a      	ldr	r2, [r7, #16]
    8434:	4313      	orrs	r3, r2
    8436:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8438:	697b      	ldr	r3, [r7, #20]
    843a:	2280      	movs	r2, #128	; 0x80
    843c:	0292      	lsls	r2, r2, #10
    843e:	4313      	orrs	r3, r2
    8440:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8442:	683b      	ldr	r3, [r7, #0]
    8444:	7a1b      	ldrb	r3, [r3, #8]
    8446:	2b00      	cmp	r3, #0
    8448:	d004      	beq.n	8454 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    844a:	697b      	ldr	r3, [r7, #20]
    844c:	2280      	movs	r2, #128	; 0x80
    844e:	0392      	lsls	r2, r2, #14
    8450:	4313      	orrs	r3, r2
    8452:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    8454:	46c0      	nop			; (mov r8, r8)
    8456:	4b13      	ldr	r3, [pc, #76]	; (84a4 <system_gclk_gen_set_config+0x110>)
    8458:	4798      	blx	r3
    845a:	1e03      	subs	r3, r0, #0
    845c:	d1fb      	bne.n	8456 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    845e:	4b12      	ldr	r3, [pc, #72]	; (84a8 <system_gclk_gen_set_config+0x114>)
    8460:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8462:	4a12      	ldr	r2, [pc, #72]	; (84ac <system_gclk_gen_set_config+0x118>)
    8464:	1dfb      	adds	r3, r7, #7
    8466:	781b      	ldrb	r3, [r3, #0]
    8468:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	4b0d      	ldr	r3, [pc, #52]	; (84a4 <system_gclk_gen_set_config+0x110>)
    846e:	4798      	blx	r3
    8470:	1e03      	subs	r3, r0, #0
    8472:	d1fb      	bne.n	846c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8474:	4b0e      	ldr	r3, [pc, #56]	; (84b0 <system_gclk_gen_set_config+0x11c>)
    8476:	693a      	ldr	r2, [r7, #16]
    8478:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    847a:	46c0      	nop			; (mov r8, r8)
    847c:	4b09      	ldr	r3, [pc, #36]	; (84a4 <system_gclk_gen_set_config+0x110>)
    847e:	4798      	blx	r3
    8480:	1e03      	subs	r3, r0, #0
    8482:	d1fb      	bne.n	847c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8484:	4b0a      	ldr	r3, [pc, #40]	; (84b0 <system_gclk_gen_set_config+0x11c>)
    8486:	4a0a      	ldr	r2, [pc, #40]	; (84b0 <system_gclk_gen_set_config+0x11c>)
    8488:	6851      	ldr	r1, [r2, #4]
    848a:	2280      	movs	r2, #128	; 0x80
    848c:	0252      	lsls	r2, r2, #9
    848e:	4011      	ands	r1, r2
    8490:	697a      	ldr	r2, [r7, #20]
    8492:	430a      	orrs	r2, r1
    8494:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8496:	4b07      	ldr	r3, [pc, #28]	; (84b4 <system_gclk_gen_set_config+0x120>)
    8498:	4798      	blx	r3
}
    849a:	46c0      	nop			; (mov r8, r8)
    849c:	46bd      	mov	sp, r7
    849e:	b006      	add	sp, #24
    84a0:	bd80      	pop	{r7, pc}
    84a2:	46c0      	nop			; (mov r8, r8)
    84a4:	00008345 	.word	0x00008345
    84a8:	0000831d 	.word	0x0000831d
    84ac:	40000c08 	.word	0x40000c08
    84b0:	40000c00 	.word	0x40000c00
    84b4:	00008331 	.word	0x00008331

000084b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b082      	sub	sp, #8
    84bc:	af00      	add	r7, sp, #0
    84be:	0002      	movs	r2, r0
    84c0:	1dfb      	adds	r3, r7, #7
    84c2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    84c4:	46c0      	nop			; (mov r8, r8)
    84c6:	4b0e      	ldr	r3, [pc, #56]	; (8500 <system_gclk_gen_enable+0x48>)
    84c8:	4798      	blx	r3
    84ca:	1e03      	subs	r3, r0, #0
    84cc:	d1fb      	bne.n	84c6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    84ce:	4b0d      	ldr	r3, [pc, #52]	; (8504 <system_gclk_gen_enable+0x4c>)
    84d0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    84d2:	4a0d      	ldr	r2, [pc, #52]	; (8508 <system_gclk_gen_enable+0x50>)
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    84da:	46c0      	nop			; (mov r8, r8)
    84dc:	4b08      	ldr	r3, [pc, #32]	; (8500 <system_gclk_gen_enable+0x48>)
    84de:	4798      	blx	r3
    84e0:	1e03      	subs	r3, r0, #0
    84e2:	d1fb      	bne.n	84dc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    84e4:	4b09      	ldr	r3, [pc, #36]	; (850c <system_gclk_gen_enable+0x54>)
    84e6:	4a09      	ldr	r2, [pc, #36]	; (850c <system_gclk_gen_enable+0x54>)
    84e8:	6852      	ldr	r2, [r2, #4]
    84ea:	2180      	movs	r1, #128	; 0x80
    84ec:	0249      	lsls	r1, r1, #9
    84ee:	430a      	orrs	r2, r1
    84f0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    84f2:	4b07      	ldr	r3, [pc, #28]	; (8510 <system_gclk_gen_enable+0x58>)
    84f4:	4798      	blx	r3
}
    84f6:	46c0      	nop			; (mov r8, r8)
    84f8:	46bd      	mov	sp, r7
    84fa:	b002      	add	sp, #8
    84fc:	bd80      	pop	{r7, pc}
    84fe:	46c0      	nop			; (mov r8, r8)
    8500:	00008345 	.word	0x00008345
    8504:	0000831d 	.word	0x0000831d
    8508:	40000c04 	.word	0x40000c04
    850c:	40000c00 	.word	0x40000c00
    8510:	00008331 	.word	0x00008331

00008514 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8514:	b580      	push	{r7, lr}
    8516:	b086      	sub	sp, #24
    8518:	af00      	add	r7, sp, #0
    851a:	0002      	movs	r2, r0
    851c:	1dfb      	adds	r3, r7, #7
    851e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8520:	46c0      	nop			; (mov r8, r8)
    8522:	4b2a      	ldr	r3, [pc, #168]	; (85cc <system_gclk_gen_get_hz+0xb8>)
    8524:	4798      	blx	r3
    8526:	1e03      	subs	r3, r0, #0
    8528:	d1fb      	bne.n	8522 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    852a:	4b29      	ldr	r3, [pc, #164]	; (85d0 <system_gclk_gen_get_hz+0xbc>)
    852c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    852e:	4a29      	ldr	r2, [pc, #164]	; (85d4 <system_gclk_gen_get_hz+0xc0>)
    8530:	1dfb      	adds	r3, r7, #7
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	4b24      	ldr	r3, [pc, #144]	; (85cc <system_gclk_gen_get_hz+0xb8>)
    853a:	4798      	blx	r3
    853c:	1e03      	subs	r3, r0, #0
    853e:	d1fb      	bne.n	8538 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8540:	4b25      	ldr	r3, [pc, #148]	; (85d8 <system_gclk_gen_get_hz+0xc4>)
    8542:	685b      	ldr	r3, [r3, #4]
    8544:	04db      	lsls	r3, r3, #19
    8546:	0edb      	lsrs	r3, r3, #27
    8548:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    854a:	0018      	movs	r0, r3
    854c:	4b23      	ldr	r3, [pc, #140]	; (85dc <system_gclk_gen_get_hz+0xc8>)
    854e:	4798      	blx	r3
    8550:	0003      	movs	r3, r0
    8552:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8554:	4a1f      	ldr	r2, [pc, #124]	; (85d4 <system_gclk_gen_get_hz+0xc0>)
    8556:	1dfb      	adds	r3, r7, #7
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    855c:	4b1e      	ldr	r3, [pc, #120]	; (85d8 <system_gclk_gen_get_hz+0xc4>)
    855e:	685b      	ldr	r3, [r3, #4]
    8560:	02db      	lsls	r3, r3, #11
    8562:	0fdb      	lsrs	r3, r3, #31
    8564:	b2da      	uxtb	r2, r3
    8566:	2313      	movs	r3, #19
    8568:	18fb      	adds	r3, r7, r3
    856a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    856c:	4a1c      	ldr	r2, [pc, #112]	; (85e0 <system_gclk_gen_get_hz+0xcc>)
    856e:	1dfb      	adds	r3, r7, #7
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8574:	46c0      	nop			; (mov r8, r8)
    8576:	4b15      	ldr	r3, [pc, #84]	; (85cc <system_gclk_gen_get_hz+0xb8>)
    8578:	4798      	blx	r3
    857a:	1e03      	subs	r3, r0, #0
    857c:	d1fb      	bne.n	8576 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    857e:	4b16      	ldr	r3, [pc, #88]	; (85d8 <system_gclk_gen_get_hz+0xc4>)
    8580:	689b      	ldr	r3, [r3, #8]
    8582:	021b      	lsls	r3, r3, #8
    8584:	0c1b      	lsrs	r3, r3, #16
    8586:	b29b      	uxth	r3, r3
    8588:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    858a:	4b16      	ldr	r3, [pc, #88]	; (85e4 <system_gclk_gen_get_hz+0xd0>)
    858c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    858e:	2313      	movs	r3, #19
    8590:	18fb      	adds	r3, r7, r3
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	2b00      	cmp	r3, #0
    8596:	d109      	bne.n	85ac <system_gclk_gen_get_hz+0x98>
    8598:	68fb      	ldr	r3, [r7, #12]
    859a:	2b01      	cmp	r3, #1
    859c:	d906      	bls.n	85ac <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    859e:	4b12      	ldr	r3, [pc, #72]	; (85e8 <system_gclk_gen_get_hz+0xd4>)
    85a0:	68f9      	ldr	r1, [r7, #12]
    85a2:	6978      	ldr	r0, [r7, #20]
    85a4:	4798      	blx	r3
    85a6:	0003      	movs	r3, r0
    85a8:	617b      	str	r3, [r7, #20]
    85aa:	e00a      	b.n	85c2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    85ac:	2313      	movs	r3, #19
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	781b      	ldrb	r3, [r3, #0]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d005      	beq.n	85c2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    85b6:	68fb      	ldr	r3, [r7, #12]
    85b8:	3301      	adds	r3, #1
    85ba:	697a      	ldr	r2, [r7, #20]
    85bc:	40da      	lsrs	r2, r3
    85be:	0013      	movs	r3, r2
    85c0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    85c2:	697b      	ldr	r3, [r7, #20]
}
    85c4:	0018      	movs	r0, r3
    85c6:	46bd      	mov	sp, r7
    85c8:	b006      	add	sp, #24
    85ca:	bd80      	pop	{r7, pc}
    85cc:	00008345 	.word	0x00008345
    85d0:	0000831d 	.word	0x0000831d
    85d4:	40000c04 	.word	0x40000c04
    85d8:	40000c00 	.word	0x40000c00
    85dc:	00007e59 	.word	0x00007e59
    85e0:	40000c08 	.word	0x40000c08
    85e4:	00008331 	.word	0x00008331
    85e8:	0001840d 	.word	0x0001840d

000085ec <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    85ec:	b580      	push	{r7, lr}
    85ee:	b084      	sub	sp, #16
    85f0:	af00      	add	r7, sp, #0
    85f2:	0002      	movs	r2, r0
    85f4:	6039      	str	r1, [r7, #0]
    85f6:	1dfb      	adds	r3, r7, #7
    85f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    85fa:	1dfb      	adds	r3, r7, #7
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8600:	683b      	ldr	r3, [r7, #0]
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	021b      	lsls	r3, r3, #8
    8606:	001a      	movs	r2, r3
    8608:	68fb      	ldr	r3, [r7, #12]
    860a:	4313      	orrs	r3, r2
    860c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    860e:	1dfb      	adds	r3, r7, #7
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	0018      	movs	r0, r3
    8614:	4b04      	ldr	r3, [pc, #16]	; (8628 <system_gclk_chan_set_config+0x3c>)
    8616:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8618:	4b04      	ldr	r3, [pc, #16]	; (862c <system_gclk_chan_set_config+0x40>)
    861a:	68fa      	ldr	r2, [r7, #12]
    861c:	b292      	uxth	r2, r2
    861e:	805a      	strh	r2, [r3, #2]
}
    8620:	46c0      	nop			; (mov r8, r8)
    8622:	46bd      	mov	sp, r7
    8624:	b004      	add	sp, #16
    8626:	bd80      	pop	{r7, pc}
    8628:	00008679 	.word	0x00008679
    862c:	40000c00 	.word	0x40000c00

00008630 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8630:	b580      	push	{r7, lr}
    8632:	b082      	sub	sp, #8
    8634:	af00      	add	r7, sp, #0
    8636:	0002      	movs	r2, r0
    8638:	1dfb      	adds	r3, r7, #7
    863a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    863c:	4b0a      	ldr	r3, [pc, #40]	; (8668 <system_gclk_chan_enable+0x38>)
    863e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8640:	4a0a      	ldr	r2, [pc, #40]	; (866c <system_gclk_chan_enable+0x3c>)
    8642:	1dfb      	adds	r3, r7, #7
    8644:	781b      	ldrb	r3, [r3, #0]
    8646:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8648:	4909      	ldr	r1, [pc, #36]	; (8670 <system_gclk_chan_enable+0x40>)
    864a:	4b09      	ldr	r3, [pc, #36]	; (8670 <system_gclk_chan_enable+0x40>)
    864c:	885b      	ldrh	r3, [r3, #2]
    864e:	b29b      	uxth	r3, r3
    8650:	2280      	movs	r2, #128	; 0x80
    8652:	01d2      	lsls	r2, r2, #7
    8654:	4313      	orrs	r3, r2
    8656:	b29b      	uxth	r3, r3
    8658:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    865a:	4b06      	ldr	r3, [pc, #24]	; (8674 <system_gclk_chan_enable+0x44>)
    865c:	4798      	blx	r3
}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	46bd      	mov	sp, r7
    8662:	b002      	add	sp, #8
    8664:	bd80      	pop	{r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	0000831d 	.word	0x0000831d
    866c:	40000c02 	.word	0x40000c02
    8670:	40000c00 	.word	0x40000c00
    8674:	00008331 	.word	0x00008331

00008678 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8678:	b580      	push	{r7, lr}
    867a:	b084      	sub	sp, #16
    867c:	af00      	add	r7, sp, #0
    867e:	0002      	movs	r2, r0
    8680:	1dfb      	adds	r3, r7, #7
    8682:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8684:	4b1c      	ldr	r3, [pc, #112]	; (86f8 <system_gclk_chan_disable+0x80>)
    8686:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8688:	4a1c      	ldr	r2, [pc, #112]	; (86fc <system_gclk_chan_disable+0x84>)
    868a:	1dfb      	adds	r3, r7, #7
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8690:	4b1b      	ldr	r3, [pc, #108]	; (8700 <system_gclk_chan_disable+0x88>)
    8692:	885b      	ldrh	r3, [r3, #2]
    8694:	051b      	lsls	r3, r3, #20
    8696:	0f1b      	lsrs	r3, r3, #28
    8698:	b2db      	uxtb	r3, r3
    869a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    869c:	4a18      	ldr	r2, [pc, #96]	; (8700 <system_gclk_chan_disable+0x88>)
    869e:	8853      	ldrh	r3, [r2, #2]
    86a0:	4918      	ldr	r1, [pc, #96]	; (8704 <system_gclk_chan_disable+0x8c>)
    86a2:	400b      	ands	r3, r1
    86a4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    86a6:	4a16      	ldr	r2, [pc, #88]	; (8700 <system_gclk_chan_disable+0x88>)
    86a8:	4b15      	ldr	r3, [pc, #84]	; (8700 <system_gclk_chan_disable+0x88>)
    86aa:	885b      	ldrh	r3, [r3, #2]
    86ac:	b29b      	uxth	r3, r3
    86ae:	4916      	ldr	r1, [pc, #88]	; (8708 <system_gclk_chan_disable+0x90>)
    86b0:	400b      	ands	r3, r1
    86b2:	b29b      	uxth	r3, r3
    86b4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    86b6:	46c0      	nop			; (mov r8, r8)
    86b8:	4b11      	ldr	r3, [pc, #68]	; (8700 <system_gclk_chan_disable+0x88>)
    86ba:	885b      	ldrh	r3, [r3, #2]
    86bc:	b29b      	uxth	r3, r3
    86be:	001a      	movs	r2, r3
    86c0:	2380      	movs	r3, #128	; 0x80
    86c2:	01db      	lsls	r3, r3, #7
    86c4:	4013      	ands	r3, r2
    86c6:	d1f7      	bne.n	86b8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    86c8:	4a0d      	ldr	r2, [pc, #52]	; (8700 <system_gclk_chan_disable+0x88>)
    86ca:	68fb      	ldr	r3, [r7, #12]
    86cc:	b2db      	uxtb	r3, r3
    86ce:	1c19      	adds	r1, r3, #0
    86d0:	230f      	movs	r3, #15
    86d2:	400b      	ands	r3, r1
    86d4:	b2d9      	uxtb	r1, r3
    86d6:	8853      	ldrh	r3, [r2, #2]
    86d8:	1c08      	adds	r0, r1, #0
    86da:	210f      	movs	r1, #15
    86dc:	4001      	ands	r1, r0
    86de:	0208      	lsls	r0, r1, #8
    86e0:	4908      	ldr	r1, [pc, #32]	; (8704 <system_gclk_chan_disable+0x8c>)
    86e2:	400b      	ands	r3, r1
    86e4:	1c19      	adds	r1, r3, #0
    86e6:	1c03      	adds	r3, r0, #0
    86e8:	430b      	orrs	r3, r1
    86ea:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    86ec:	4b07      	ldr	r3, [pc, #28]	; (870c <system_gclk_chan_disable+0x94>)
    86ee:	4798      	blx	r3
}
    86f0:	46c0      	nop			; (mov r8, r8)
    86f2:	46bd      	mov	sp, r7
    86f4:	b004      	add	sp, #16
    86f6:	bd80      	pop	{r7, pc}
    86f8:	0000831d 	.word	0x0000831d
    86fc:	40000c02 	.word	0x40000c02
    8700:	40000c00 	.word	0x40000c00
    8704:	fffff0ff 	.word	0xfffff0ff
    8708:	ffffbfff 	.word	0xffffbfff
    870c:	00008331 	.word	0x00008331

00008710 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8710:	b580      	push	{r7, lr}
    8712:	b084      	sub	sp, #16
    8714:	af00      	add	r7, sp, #0
    8716:	0002      	movs	r2, r0
    8718:	1dfb      	adds	r3, r7, #7
    871a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    871c:	4b0d      	ldr	r3, [pc, #52]	; (8754 <system_gclk_chan_get_hz+0x44>)
    871e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8720:	4a0d      	ldr	r2, [pc, #52]	; (8758 <system_gclk_chan_get_hz+0x48>)
    8722:	1dfb      	adds	r3, r7, #7
    8724:	781b      	ldrb	r3, [r3, #0]
    8726:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8728:	4b0c      	ldr	r3, [pc, #48]	; (875c <system_gclk_chan_get_hz+0x4c>)
    872a:	885b      	ldrh	r3, [r3, #2]
    872c:	051b      	lsls	r3, r3, #20
    872e:	0f1b      	lsrs	r3, r3, #28
    8730:	b2da      	uxtb	r2, r3
    8732:	230f      	movs	r3, #15
    8734:	18fb      	adds	r3, r7, r3
    8736:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    8738:	4b09      	ldr	r3, [pc, #36]	; (8760 <system_gclk_chan_get_hz+0x50>)
    873a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    873c:	230f      	movs	r3, #15
    873e:	18fb      	adds	r3, r7, r3
    8740:	781b      	ldrb	r3, [r3, #0]
    8742:	0018      	movs	r0, r3
    8744:	4b07      	ldr	r3, [pc, #28]	; (8764 <system_gclk_chan_get_hz+0x54>)
    8746:	4798      	blx	r3
    8748:	0003      	movs	r3, r0
}
    874a:	0018      	movs	r0, r3
    874c:	46bd      	mov	sp, r7
    874e:	b004      	add	sp, #16
    8750:	bd80      	pop	{r7, pc}
    8752:	46c0      	nop			; (mov r8, r8)
    8754:	0000831d 	.word	0x0000831d
    8758:	40000c02 	.word	0x40000c02
    875c:	40000c00 	.word	0x40000c00
    8760:	00008331 	.word	0x00008331
    8764:	00008515 	.word	0x00008515

00008768 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8768:	b580      	push	{r7, lr}
    876a:	b084      	sub	sp, #16
    876c:	af00      	add	r7, sp, #0
    876e:	0002      	movs	r2, r0
    8770:	1dfb      	adds	r3, r7, #7
    8772:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8774:	230f      	movs	r3, #15
    8776:	18fb      	adds	r3, r7, r3
    8778:	1dfa      	adds	r2, r7, #7
    877a:	7812      	ldrb	r2, [r2, #0]
    877c:	09d2      	lsrs	r2, r2, #7
    877e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8780:	230e      	movs	r3, #14
    8782:	18fb      	adds	r3, r7, r3
    8784:	1dfa      	adds	r2, r7, #7
    8786:	7812      	ldrb	r2, [r2, #0]
    8788:	0952      	lsrs	r2, r2, #5
    878a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    878c:	4b0d      	ldr	r3, [pc, #52]	; (87c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    878e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8790:	230f      	movs	r3, #15
    8792:	18fb      	adds	r3, r7, r3
    8794:	781b      	ldrb	r3, [r3, #0]
    8796:	2b00      	cmp	r3, #0
    8798:	d10f      	bne.n	87ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    879a:	230f      	movs	r3, #15
    879c:	18fb      	adds	r3, r7, r3
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	009b      	lsls	r3, r3, #2
    87a2:	2210      	movs	r2, #16
    87a4:	4694      	mov	ip, r2
    87a6:	44bc      	add	ip, r7
    87a8:	4463      	add	r3, ip
    87aa:	3b08      	subs	r3, #8
    87ac:	681a      	ldr	r2, [r3, #0]
    87ae:	230e      	movs	r3, #14
    87b0:	18fb      	adds	r3, r7, r3
    87b2:	781b      	ldrb	r3, [r3, #0]
    87b4:	01db      	lsls	r3, r3, #7
    87b6:	18d3      	adds	r3, r2, r3
    87b8:	e000      	b.n	87bc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    87ba:	2300      	movs	r3, #0
	}
}
    87bc:	0018      	movs	r0, r3
    87be:	46bd      	mov	sp, r7
    87c0:	b004      	add	sp, #16
    87c2:	bd80      	pop	{r7, pc}
    87c4:	41004400 	.word	0x41004400

000087c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	b088      	sub	sp, #32
    87cc:	af00      	add	r7, sp, #0
    87ce:	60f8      	str	r0, [r7, #12]
    87d0:	60b9      	str	r1, [r7, #8]
    87d2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    87d4:	2300      	movs	r3, #0
    87d6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	78db      	ldrb	r3, [r3, #3]
    87dc:	2201      	movs	r2, #1
    87de:	4053      	eors	r3, r2
    87e0:	b2db      	uxtb	r3, r3
    87e2:	2b00      	cmp	r3, #0
    87e4:	d035      	beq.n	8852 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	781b      	ldrb	r3, [r3, #0]
    87ea:	2b80      	cmp	r3, #128	; 0x80
    87ec:	d00b      	beq.n	8806 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    87ee:	69fb      	ldr	r3, [r7, #28]
    87f0:	2280      	movs	r2, #128	; 0x80
    87f2:	0252      	lsls	r2, r2, #9
    87f4:	4313      	orrs	r3, r2
    87f6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    87f8:	687b      	ldr	r3, [r7, #4]
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	061b      	lsls	r3, r3, #24
    87fe:	001a      	movs	r2, r3
    8800:	69fb      	ldr	r3, [r7, #28]
    8802:	4313      	orrs	r3, r2
    8804:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	785b      	ldrb	r3, [r3, #1]
    880a:	2b00      	cmp	r3, #0
    880c:	d003      	beq.n	8816 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8812:	2b02      	cmp	r3, #2
    8814:	d110      	bne.n	8838 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    8816:	69fb      	ldr	r3, [r7, #28]
    8818:	2280      	movs	r2, #128	; 0x80
    881a:	0292      	lsls	r2, r2, #10
    881c:	4313      	orrs	r3, r2
    881e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	789b      	ldrb	r3, [r3, #2]
    8824:	2b00      	cmp	r3, #0
    8826:	d004      	beq.n	8832 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8828:	69fb      	ldr	r3, [r7, #28]
    882a:	2280      	movs	r2, #128	; 0x80
    882c:	02d2      	lsls	r2, r2, #11
    882e:	4313      	orrs	r3, r2
    8830:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8832:	68fb      	ldr	r3, [r7, #12]
    8834:	68ba      	ldr	r2, [r7, #8]
    8836:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	785b      	ldrb	r3, [r3, #1]
    883c:	2b01      	cmp	r3, #1
    883e:	d003      	beq.n	8848 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8844:	2b02      	cmp	r3, #2
    8846:	d107      	bne.n	8858 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8848:	69fb      	ldr	r3, [r7, #28]
    884a:	4a22      	ldr	r2, [pc, #136]	; (88d4 <_system_pinmux_config+0x10c>)
    884c:	4013      	ands	r3, r2
    884e:	61fb      	str	r3, [r7, #28]
    8850:	e002      	b.n	8858 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    8852:	68fb      	ldr	r3, [r7, #12]
    8854:	68ba      	ldr	r2, [r7, #8]
    8856:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8858:	68bb      	ldr	r3, [r7, #8]
    885a:	041b      	lsls	r3, r3, #16
    885c:	0c1b      	lsrs	r3, r3, #16
    885e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8860:	68bb      	ldr	r3, [r7, #8]
    8862:	0c1b      	lsrs	r3, r3, #16
    8864:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8866:	69ba      	ldr	r2, [r7, #24]
    8868:	69fb      	ldr	r3, [r7, #28]
    886a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    886c:	22a0      	movs	r2, #160	; 0xa0
    886e:	05d2      	lsls	r2, r2, #23
    8870:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8872:	68fb      	ldr	r3, [r7, #12]
    8874:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8876:	697a      	ldr	r2, [r7, #20]
    8878:	69fb      	ldr	r3, [r7, #28]
    887a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    887c:	22d0      	movs	r2, #208	; 0xd0
    887e:	0612      	lsls	r2, r2, #24
    8880:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8882:	68fb      	ldr	r3, [r7, #12]
    8884:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	78db      	ldrb	r3, [r3, #3]
    888a:	2201      	movs	r2, #1
    888c:	4053      	eors	r3, r2
    888e:	b2db      	uxtb	r3, r3
    8890:	2b00      	cmp	r3, #0
    8892:	d01a      	beq.n	88ca <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8894:	69fa      	ldr	r2, [r7, #28]
    8896:	2380      	movs	r3, #128	; 0x80
    8898:	02db      	lsls	r3, r3, #11
    889a:	4013      	ands	r3, r2
    889c:	d00a      	beq.n	88b4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    889e:	687b      	ldr	r3, [r7, #4]
    88a0:	789b      	ldrb	r3, [r3, #2]
    88a2:	2b01      	cmp	r3, #1
    88a4:	d103      	bne.n	88ae <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    88a6:	68fb      	ldr	r3, [r7, #12]
    88a8:	68ba      	ldr	r2, [r7, #8]
    88aa:	619a      	str	r2, [r3, #24]
    88ac:	e002      	b.n	88b4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    88ae:	68fb      	ldr	r3, [r7, #12]
    88b0:	68ba      	ldr	r2, [r7, #8]
    88b2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	785b      	ldrb	r3, [r3, #1]
    88b8:	2b01      	cmp	r3, #1
    88ba:	d003      	beq.n	88c4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    88bc:	687b      	ldr	r3, [r7, #4]
    88be:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    88c0:	2b02      	cmp	r3, #2
    88c2:	d102      	bne.n	88ca <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    88c4:	68fb      	ldr	r3, [r7, #12]
    88c6:	68ba      	ldr	r2, [r7, #8]
    88c8:	609a      	str	r2, [r3, #8]
		}
	}
}
    88ca:	46c0      	nop			; (mov r8, r8)
    88cc:	46bd      	mov	sp, r7
    88ce:	b008      	add	sp, #32
    88d0:	bd80      	pop	{r7, pc}
    88d2:	46c0      	nop			; (mov r8, r8)
    88d4:	fffbffff 	.word	0xfffbffff

000088d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    88d8:	b580      	push	{r7, lr}
    88da:	b084      	sub	sp, #16
    88dc:	af00      	add	r7, sp, #0
    88de:	0002      	movs	r2, r0
    88e0:	6039      	str	r1, [r7, #0]
    88e2:	1dfb      	adds	r3, r7, #7
    88e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    88e6:	1dfb      	adds	r3, r7, #7
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	0018      	movs	r0, r3
    88ec:	4b0a      	ldr	r3, [pc, #40]	; (8918 <system_pinmux_pin_set_config+0x40>)
    88ee:	4798      	blx	r3
    88f0:	0003      	movs	r3, r0
    88f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    88f4:	1dfb      	adds	r3, r7, #7
    88f6:	781b      	ldrb	r3, [r3, #0]
    88f8:	221f      	movs	r2, #31
    88fa:	4013      	ands	r3, r2
    88fc:	2201      	movs	r2, #1
    88fe:	409a      	lsls	r2, r3
    8900:	0013      	movs	r3, r2
    8902:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    8904:	683a      	ldr	r2, [r7, #0]
    8906:	68b9      	ldr	r1, [r7, #8]
    8908:	68fb      	ldr	r3, [r7, #12]
    890a:	0018      	movs	r0, r3
    890c:	4b03      	ldr	r3, [pc, #12]	; (891c <system_pinmux_pin_set_config+0x44>)
    890e:	4798      	blx	r3
}
    8910:	46c0      	nop			; (mov r8, r8)
    8912:	46bd      	mov	sp, r7
    8914:	b004      	add	sp, #16
    8916:	bd80      	pop	{r7, pc}
    8918:	00008769 	.word	0x00008769
    891c:	000087c9 	.word	0x000087c9

00008920 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    8920:	b580      	push	{r7, lr}
    8922:	af00      	add	r7, sp, #0
	return;
    8924:	46c0      	nop			; (mov r8, r8)
}
    8926:	46bd      	mov	sp, r7
    8928:	bd80      	pop	{r7, pc}
	...

0000892c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    892c:	b580      	push	{r7, lr}
    892e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8930:	4b06      	ldr	r3, [pc, #24]	; (894c <system_init+0x20>)
    8932:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8934:	4b06      	ldr	r3, [pc, #24]	; (8950 <system_init+0x24>)
    8936:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8938:	4b06      	ldr	r3, [pc, #24]	; (8954 <system_init+0x28>)
    893a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    893c:	4b06      	ldr	r3, [pc, #24]	; (8958 <system_init+0x2c>)
    893e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8940:	4b06      	ldr	r3, [pc, #24]	; (895c <system_init+0x30>)
    8942:	4798      	blx	r3
}
    8944:	46c0      	nop			; (mov r8, r8)
    8946:	46bd      	mov	sp, r7
    8948:	bd80      	pop	{r7, pc}
    894a:	46c0      	nop			; (mov r8, r8)
    894c:	0000813d 	.word	0x0000813d
    8950:	00007c2d 	.word	0x00007c2d
    8954:	00008921 	.word	0x00008921
    8958:	00008921 	.word	0x00008921
    895c:	00008921 	.word	0x00008921

00008960 <nvm_get_config_defaults>:
{
    8960:	b580      	push	{r7, lr}
    8962:	b082      	sub	sp, #8
    8964:	af00      	add	r7, sp, #0
    8966:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	2200      	movs	r2, #0
    896c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	2201      	movs	r2, #1
    8972:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    8974:	4b08      	ldr	r3, [pc, #32]	; (8998 <nvm_get_config_defaults+0x38>)
    8976:	685b      	ldr	r3, [r3, #4]
    8978:	06db      	lsls	r3, r3, #27
    897a:	0f1b      	lsrs	r3, r3, #28
    897c:	b2db      	uxtb	r3, r3
    897e:	001a      	movs	r2, r3
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	2200      	movs	r2, #0
    8988:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    898a:	687b      	ldr	r3, [r7, #4]
    898c:	2200      	movs	r2, #0
    898e:	711a      	strb	r2, [r3, #4]
}
    8990:	46c0      	nop			; (mov r8, r8)
    8992:	46bd      	mov	sp, r7
    8994:	b002      	add	sp, #8
    8996:	bd80      	pop	{r7, pc}
    8998:	41004000 	.word	0x41004000

0000899c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    899c:	b590      	push	{r4, r7, lr}
    899e:	b085      	sub	sp, #20
    89a0:	af00      	add	r7, sp, #0
    89a2:	0002      	movs	r2, r0
    89a4:	1dfb      	adds	r3, r7, #7
    89a6:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    89a8:	230f      	movs	r3, #15
    89aa:	18fb      	adds	r3, r7, r3
    89ac:	2200      	movs	r2, #0
    89ae:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    89b0:	4b0a      	ldr	r3, [pc, #40]	; (89dc <_eeprom_emulator_nvm_erase_row+0x40>)
    89b2:	685b      	ldr	r3, [r3, #4]
    89b4:	1dfa      	adds	r2, r7, #7
    89b6:	7812      	ldrb	r2, [r2, #0]
    89b8:	0212      	lsls	r2, r2, #8
    89ba:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
    89bc:	220f      	movs	r2, #15
    89be:	18bc      	adds	r4, r7, r2
    89c0:	0018      	movs	r0, r3
    89c2:	4b07      	ldr	r3, [pc, #28]	; (89e0 <_eeprom_emulator_nvm_erase_row+0x44>)
    89c4:	4798      	blx	r3
    89c6:	0003      	movs	r3, r0
    89c8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    89ca:	230f      	movs	r3, #15
    89cc:	18fb      	adds	r3, r7, r3
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	2b05      	cmp	r3, #5
    89d2:	d0ed      	beq.n	89b0 <_eeprom_emulator_nvm_erase_row+0x14>
}
    89d4:	46c0      	nop			; (mov r8, r8)
    89d6:	46bd      	mov	sp, r7
    89d8:	b005      	add	sp, #20
    89da:	bd90      	pop	{r4, r7, pc}
    89dc:	20000238 	.word	0x20000238
    89e0:	00002f0d 	.word	0x00002f0d

000089e4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
    89e4:	b590      	push	{r4, r7, lr}
    89e6:	b085      	sub	sp, #20
    89e8:	af00      	add	r7, sp, #0
    89ea:	0002      	movs	r2, r0
    89ec:	6039      	str	r1, [r7, #0]
    89ee:	1dbb      	adds	r3, r7, #6
    89f0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    89f2:	230f      	movs	r3, #15
    89f4:	18fb      	adds	r3, r7, r3
    89f6:	2200      	movs	r2, #0
    89f8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    89fa:	4b0c      	ldr	r3, [pc, #48]	; (8a2c <_eeprom_emulator_nvm_fill_cache+0x48>)
    89fc:	685a      	ldr	r2, [r3, #4]
    89fe:	1dbb      	adds	r3, r7, #6
    8a00:	881b      	ldrh	r3, [r3, #0]
    8a02:	019b      	lsls	r3, r3, #6
    8a04:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
    8a06:	0018      	movs	r0, r3
    8a08:	230f      	movs	r3, #15
    8a0a:	18fc      	adds	r4, r7, r3
    8a0c:	683b      	ldr	r3, [r7, #0]
    8a0e:	2240      	movs	r2, #64	; 0x40
    8a10:	0019      	movs	r1, r3
    8a12:	4b07      	ldr	r3, [pc, #28]	; (8a30 <_eeprom_emulator_nvm_fill_cache+0x4c>)
    8a14:	4798      	blx	r3
    8a16:	0003      	movs	r3, r0
    8a18:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    8a1a:	230f      	movs	r3, #15
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	2b05      	cmp	r3, #5
    8a22:	d0ea      	beq.n	89fa <_eeprom_emulator_nvm_fill_cache+0x16>
}
    8a24:	46c0      	nop			; (mov r8, r8)
    8a26:	46bd      	mov	sp, r7
    8a28:	b005      	add	sp, #20
    8a2a:	bd90      	pop	{r4, r7, pc}
    8a2c:	20000238 	.word	0x20000238
    8a30:	00002cc5 	.word	0x00002cc5

00008a34 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
    8a34:	b590      	push	{r4, r7, lr}
    8a36:	b085      	sub	sp, #20
    8a38:	af00      	add	r7, sp, #0
    8a3a:	0002      	movs	r2, r0
    8a3c:	1dbb      	adds	r3, r7, #6
    8a3e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8a40:	230f      	movs	r3, #15
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	2200      	movs	r2, #0
    8a46:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    8a48:	4b0b      	ldr	r3, [pc, #44]	; (8a78 <_eeprom_emulator_nvm_commit_cache+0x44>)
    8a4a:	685a      	ldr	r2, [r3, #4]
    8a4c:	1dbb      	adds	r3, r7, #6
    8a4e:	881b      	ldrh	r3, [r3, #0]
    8a50:	019b      	lsls	r3, r3, #6
    8a52:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
    8a54:	220f      	movs	r2, #15
    8a56:	18bc      	adds	r4, r7, r2
    8a58:	2200      	movs	r2, #0
    8a5a:	0019      	movs	r1, r3
    8a5c:	2004      	movs	r0, #4
    8a5e:	4b07      	ldr	r3, [pc, #28]	; (8a7c <_eeprom_emulator_nvm_commit_cache+0x48>)
    8a60:	4798      	blx	r3
    8a62:	0003      	movs	r3, r0
    8a64:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    8a66:	230f      	movs	r3, #15
    8a68:	18fb      	adds	r3, r7, r3
    8a6a:	781b      	ldrb	r3, [r3, #0]
    8a6c:	2b05      	cmp	r3, #5
    8a6e:	d0eb      	beq.n	8a48 <_eeprom_emulator_nvm_commit_cache+0x14>
}
    8a70:	46c0      	nop			; (mov r8, r8)
    8a72:	46bd      	mov	sp, r7
    8a74:	b005      	add	sp, #20
    8a76:	bd90      	pop	{r4, r7, pc}
    8a78:	20000238 	.word	0x20000238
    8a7c:	00002bad 	.word	0x00002bad

00008a80 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
    8a80:	b590      	push	{r4, r7, lr}
    8a82:	b085      	sub	sp, #20
    8a84:	af00      	add	r7, sp, #0
    8a86:	0002      	movs	r2, r0
    8a88:	6039      	str	r1, [r7, #0]
    8a8a:	1dbb      	adds	r3, r7, #6
    8a8c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8a8e:	230f      	movs	r3, #15
    8a90:	18fb      	adds	r3, r7, r3
    8a92:	2200      	movs	r2, #0
    8a94:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    8a96:	4b0c      	ldr	r3, [pc, #48]	; (8ac8 <_eeprom_emulator_nvm_read_page+0x48>)
    8a98:	685a      	ldr	r2, [r3, #4]
    8a9a:	1dbb      	adds	r3, r7, #6
    8a9c:	881b      	ldrh	r3, [r3, #0]
    8a9e:	019b      	lsls	r3, r3, #6
    8aa0:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
    8aa2:	0018      	movs	r0, r3
    8aa4:	230f      	movs	r3, #15
    8aa6:	18fc      	adds	r4, r7, r3
    8aa8:	683b      	ldr	r3, [r7, #0]
    8aaa:	2240      	movs	r2, #64	; 0x40
    8aac:	0019      	movs	r1, r3
    8aae:	4b07      	ldr	r3, [pc, #28]	; (8acc <_eeprom_emulator_nvm_read_page+0x4c>)
    8ab0:	4798      	blx	r3
    8ab2:	0003      	movs	r3, r0
    8ab4:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    8ab6:	230f      	movs	r3, #15
    8ab8:	18fb      	adds	r3, r7, r3
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	2b05      	cmp	r3, #5
    8abe:	d0ea      	beq.n	8a96 <_eeprom_emulator_nvm_read_page+0x16>
}
    8ac0:	46c0      	nop			; (mov r8, r8)
    8ac2:	46bd      	mov	sp, r7
    8ac4:	b005      	add	sp, #20
    8ac6:	bd90      	pop	{r4, r7, pc}
    8ac8:	20000238 	.word	0x20000238
    8acc:	00002e11 	.word	0x00002e11

00008ad0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b092      	sub	sp, #72	; 0x48
    8ad4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
    8ad6:	2346      	movs	r3, #70	; 0x46
    8ad8:	18fb      	adds	r3, r7, r3
    8ada:	2200      	movs	r2, #0
    8adc:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
    8ade:	4b32      	ldr	r3, [pc, #200]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8ae0:	2287      	movs	r2, #135	; 0x87
    8ae2:	2100      	movs	r1, #0
    8ae4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    8ae6:	4b30      	ldr	r3, [pc, #192]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8ae8:	2287      	movs	r2, #135	; 0x87
    8aea:	5c9b      	ldrb	r3, [r3, r2]
    8aec:	0018      	movs	r0, r3
    8aee:	4b2f      	ldr	r3, [pc, #188]	; (8bac <_eeprom_emulator_format_memory+0xdc>)
    8af0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    8af2:	2344      	movs	r3, #68	; 0x44
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	2204      	movs	r2, #4
    8af8:	801a      	strh	r2, [r3, #0]
    8afa:	e04a      	b.n	8b92 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8afc:	2344      	movs	r3, #68	; 0x44
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	881a      	ldrh	r2, [r3, #0]
    8b02:	4b29      	ldr	r3, [pc, #164]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8b04:	891b      	ldrh	r3, [r3, #8]
    8b06:	3b01      	subs	r3, #1
    8b08:	429a      	cmp	r2, r3
    8b0a:	d03a      	beq.n	8b82 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    8b0c:	2344      	movs	r3, #68	; 0x44
    8b0e:	18fb      	adds	r3, r7, r3
    8b10:	881b      	ldrh	r3, [r3, #0]
    8b12:	2203      	movs	r2, #3
    8b14:	4013      	ands	r3, r2
    8b16:	b29b      	uxth	r3, r3
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d108      	bne.n	8b2e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    8b1c:	2344      	movs	r3, #68	; 0x44
    8b1e:	18fb      	adds	r3, r7, r3
    8b20:	881b      	ldrh	r3, [r3, #0]
    8b22:	089b      	lsrs	r3, r3, #2
    8b24:	b29b      	uxth	r3, r3
    8b26:	b2db      	uxtb	r3, r3
    8b28:	0018      	movs	r0, r3
    8b2a:	4b20      	ldr	r3, [pc, #128]	; (8bac <_eeprom_emulator_format_memory+0xdc>)
    8b2c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    8b2e:	2344      	movs	r3, #68	; 0x44
    8b30:	18fb      	adds	r3, r7, r3
    8b32:	881b      	ldrh	r3, [r3, #0]
    8b34:	2203      	movs	r2, #3
    8b36:	4013      	ands	r3, r2
    8b38:	b29b      	uxth	r3, r3
    8b3a:	2b01      	cmp	r3, #1
    8b3c:	d822      	bhi.n	8b84 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
    8b3e:	1d3b      	adds	r3, r7, #4
    8b40:	2240      	movs	r2, #64	; 0x40
    8b42:	21ff      	movs	r1, #255	; 0xff
    8b44:	0018      	movs	r0, r3
    8b46:	4b1a      	ldr	r3, [pc, #104]	; (8bb0 <_eeprom_emulator_format_memory+0xe0>)
    8b48:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
    8b4a:	2346      	movs	r3, #70	; 0x46
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	881b      	ldrh	r3, [r3, #0]
    8b50:	b2da      	uxtb	r2, r3
    8b52:	1d3b      	adds	r3, r7, #4
    8b54:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    8b56:	1d3a      	adds	r2, r7, #4
    8b58:	2344      	movs	r3, #68	; 0x44
    8b5a:	18fb      	adds	r3, r7, r3
    8b5c:	881b      	ldrh	r3, [r3, #0]
    8b5e:	0011      	movs	r1, r2
    8b60:	0018      	movs	r0, r3
    8b62:	4b14      	ldr	r3, [pc, #80]	; (8bb4 <_eeprom_emulator_format_memory+0xe4>)
    8b64:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    8b66:	2344      	movs	r3, #68	; 0x44
    8b68:	18fb      	adds	r3, r7, r3
    8b6a:	881b      	ldrh	r3, [r3, #0]
    8b6c:	0018      	movs	r0, r3
    8b6e:	4b12      	ldr	r3, [pc, #72]	; (8bb8 <_eeprom_emulator_format_memory+0xe8>)
    8b70:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
    8b72:	2346      	movs	r3, #70	; 0x46
    8b74:	18fb      	adds	r3, r7, r3
    8b76:	881a      	ldrh	r2, [r3, #0]
    8b78:	2346      	movs	r3, #70	; 0x46
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	3201      	adds	r2, #1
    8b7e:	801a      	strh	r2, [r3, #0]
    8b80:	e000      	b.n	8b84 <_eeprom_emulator_format_memory+0xb4>
			continue;
    8b82:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    8b84:	2344      	movs	r3, #68	; 0x44
    8b86:	18fb      	adds	r3, r7, r3
    8b88:	881a      	ldrh	r2, [r3, #0]
    8b8a:	2344      	movs	r3, #68	; 0x44
    8b8c:	18fb      	adds	r3, r7, r3
    8b8e:	3201      	adds	r2, #1
    8b90:	801a      	strh	r2, [r3, #0]
    8b92:	4b05      	ldr	r3, [pc, #20]	; (8ba8 <_eeprom_emulator_format_memory+0xd8>)
    8b94:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    8b96:	2244      	movs	r2, #68	; 0x44
    8b98:	18ba      	adds	r2, r7, r2
    8b9a:	8812      	ldrh	r2, [r2, #0]
    8b9c:	429a      	cmp	r2, r3
    8b9e:	d3ad      	bcc.n	8afc <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
    8ba0:	46c0      	nop			; (mov r8, r8)
    8ba2:	46bd      	mov	sp, r7
    8ba4:	b012      	add	sp, #72	; 0x48
    8ba6:	bd80      	pop	{r7, pc}
    8ba8:	20000238 	.word	0x20000238
    8bac:	0000899d 	.word	0x0000899d
    8bb0:	0001b3fb 	.word	0x0001b3fb
    8bb4:	000089e5 	.word	0x000089e5
    8bb8:	00008a35 	.word	0x00008a35

00008bbc <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    8bbc:	b580      	push	{r7, lr}
    8bbe:	b084      	sub	sp, #16
    8bc0:	af00      	add	r7, sp, #0
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    8bc2:	230e      	movs	r3, #14
    8bc4:	18fb      	adds	r3, r7, r3
    8bc6:	2200      	movs	r2, #0
    8bc8:	801a      	strh	r2, [r3, #0]
    8bca:	e033      	b.n	8c34 <_eeprom_emulator_update_page_mapping+0x78>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    8bcc:	230e      	movs	r3, #14
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	881a      	ldrh	r2, [r3, #0]
    8bd2:	4b4c      	ldr	r3, [pc, #304]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8bd4:	891b      	ldrh	r3, [r3, #8]
    8bd6:	3b01      	subs	r3, #1
    8bd8:	429a      	cmp	r2, r3
    8bda:	d023      	beq.n	8c24 <_eeprom_emulator_update_page_mapping+0x68>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    8bdc:	4b49      	ldr	r3, [pc, #292]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8bde:	685a      	ldr	r2, [r3, #4]
    8be0:	230e      	movs	r3, #14
    8be2:	18fb      	adds	r3, r7, r3
    8be4:	881b      	ldrh	r3, [r3, #0]
    8be6:	019b      	lsls	r3, r3, #6
    8be8:	18d3      	adds	r3, r2, r3
    8bea:	781a      	ldrb	r2, [r3, #0]
    8bec:	2308      	movs	r3, #8
    8bee:	18fb      	adds	r3, r7, r3
    8bf0:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8bf2:	2308      	movs	r3, #8
    8bf4:	18fb      	adds	r3, r7, r3
    8bf6:	881b      	ldrh	r3, [r3, #0]
    8bf8:	2bff      	cmp	r3, #255	; 0xff
    8bfa:	d014      	beq.n	8c26 <_eeprom_emulator_update_page_mapping+0x6a>
				(logical_page < _eeprom_instance.logical_pages)) {
    8bfc:	4b41      	ldr	r3, [pc, #260]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8bfe:	7a9b      	ldrb	r3, [r3, #10]
    8c00:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8c02:	2208      	movs	r2, #8
    8c04:	18ba      	adds	r2, r7, r2
    8c06:	8812      	ldrh	r2, [r2, #0]
    8c08:	429a      	cmp	r2, r3
    8c0a:	d20c      	bcs.n	8c26 <_eeprom_emulator_update_page_mapping+0x6a>
			_eeprom_instance.page_map[logical_page] = c;
    8c0c:	2308      	movs	r3, #8
    8c0e:	18fb      	adds	r3, r7, r3
    8c10:	881b      	ldrh	r3, [r3, #0]
    8c12:	220e      	movs	r2, #14
    8c14:	18ba      	adds	r2, r7, r2
    8c16:	8812      	ldrh	r2, [r2, #0]
    8c18:	b2d1      	uxtb	r1, r2
    8c1a:	4a3a      	ldr	r2, [pc, #232]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c1c:	18d3      	adds	r3, r2, r3
    8c1e:	1c0a      	adds	r2, r1, #0
    8c20:	72da      	strb	r2, [r3, #11]
    8c22:	e000      	b.n	8c26 <_eeprom_emulator_update_page_mapping+0x6a>
			continue;
    8c24:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    8c26:	230e      	movs	r3, #14
    8c28:	18fb      	adds	r3, r7, r3
    8c2a:	881a      	ldrh	r2, [r3, #0]
    8c2c:	230e      	movs	r3, #14
    8c2e:	18fb      	adds	r3, r7, r3
    8c30:	3201      	adds	r2, #1
    8c32:	801a      	strh	r2, [r3, #0]
    8c34:	4b33      	ldr	r3, [pc, #204]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c36:	891b      	ldrh	r3, [r3, #8]
    8c38:	220e      	movs	r2, #14
    8c3a:	18ba      	adds	r2, r7, r2
    8c3c:	8812      	ldrh	r2, [r2, #0]
    8c3e:	429a      	cmp	r2, r3
    8c40:	d3c4      	bcc.n	8bcc <_eeprom_emulator_update_page_mapping+0x10>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    8c42:	4b30      	ldr	r3, [pc, #192]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c44:	2287      	movs	r2, #135	; 0x87
    8c46:	213f      	movs	r1, #63	; 0x3f
    8c48:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8c4a:	230c      	movs	r3, #12
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	2200      	movs	r2, #0
    8c50:	801a      	strh	r2, [r3, #0]
    8c52:	e04a      	b.n	8cea <_eeprom_emulator_update_page_mapping+0x12e>
		bool spare_row_found = true;
    8c54:	230b      	movs	r3, #11
    8c56:	18fb      	adds	r3, r7, r3
    8c58:	2201      	movs	r2, #1
    8c5a:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8c5c:	230a      	movs	r3, #10
    8c5e:	18fb      	adds	r3, r7, r3
    8c60:	2200      	movs	r2, #0
    8c62:	701a      	strb	r2, [r3, #0]
    8c64:	e028      	b.n	8cb8 <_eeprom_emulator_update_page_mapping+0xfc>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    8c66:	230c      	movs	r3, #12
    8c68:	18fb      	adds	r3, r7, r3
    8c6a:	881b      	ldrh	r3, [r3, #0]
    8c6c:	009b      	lsls	r3, r3, #2
    8c6e:	b299      	uxth	r1, r3
    8c70:	230a      	movs	r3, #10
    8c72:	18fb      	adds	r3, r7, r3
    8c74:	781b      	ldrb	r3, [r3, #0]
    8c76:	b29a      	uxth	r2, r3
    8c78:	1dbb      	adds	r3, r7, #6
    8c7a:	188a      	adds	r2, r1, r2
    8c7c:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8c7e:	1dbb      	adds	r3, r7, #6
    8c80:	881a      	ldrh	r2, [r3, #0]
    8c82:	4b20      	ldr	r3, [pc, #128]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c84:	891b      	ldrh	r3, [r3, #8]
    8c86:	3b01      	subs	r3, #1
    8c88:	429a      	cmp	r2, r3
    8c8a:	d00d      	beq.n	8ca8 <_eeprom_emulator_update_page_mapping+0xec>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    8c8c:	4b1d      	ldr	r3, [pc, #116]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8c8e:	685a      	ldr	r2, [r3, #4]
    8c90:	1dbb      	adds	r3, r7, #6
    8c92:	881b      	ldrh	r3, [r3, #0]
    8c94:	019b      	lsls	r3, r3, #6
    8c96:	18d3      	adds	r3, r2, r3
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	2bff      	cmp	r3, #255	; 0xff
    8c9c:	d005      	beq.n	8caa <_eeprom_emulator_update_page_mapping+0xee>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    8c9e:	230b      	movs	r3, #11
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	2200      	movs	r2, #0
    8ca4:	701a      	strb	r2, [r3, #0]
    8ca6:	e000      	b.n	8caa <_eeprom_emulator_update_page_mapping+0xee>
				continue;
    8ca8:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8caa:	230a      	movs	r3, #10
    8cac:	18fb      	adds	r3, r7, r3
    8cae:	781a      	ldrb	r2, [r3, #0]
    8cb0:	230a      	movs	r3, #10
    8cb2:	18fb      	adds	r3, r7, r3
    8cb4:	3201      	adds	r2, #1
    8cb6:	701a      	strb	r2, [r3, #0]
    8cb8:	230a      	movs	r3, #10
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	781b      	ldrb	r3, [r3, #0]
    8cbe:	2b03      	cmp	r3, #3
    8cc0:	d9d1      	bls.n	8c66 <_eeprom_emulator_update_page_mapping+0xaa>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    8cc2:	230b      	movs	r3, #11
    8cc4:	18fb      	adds	r3, r7, r3
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	2b00      	cmp	r3, #0
    8cca:	d007      	beq.n	8cdc <_eeprom_emulator_update_page_mapping+0x120>
			_eeprom_instance.spare_row = c;
    8ccc:	230c      	movs	r3, #12
    8cce:	18fb      	adds	r3, r7, r3
    8cd0:	881b      	ldrh	r3, [r3, #0]
    8cd2:	b2d9      	uxtb	r1, r3
    8cd4:	4b0b      	ldr	r3, [pc, #44]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8cd6:	2287      	movs	r2, #135	; 0x87
    8cd8:	5499      	strb	r1, [r3, r2]
			break;
    8cda:	e00f      	b.n	8cfc <_eeprom_emulator_update_page_mapping+0x140>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8cdc:	230c      	movs	r3, #12
    8cde:	18fb      	adds	r3, r7, r3
    8ce0:	881a      	ldrh	r2, [r3, #0]
    8ce2:	230c      	movs	r3, #12
    8ce4:	18fb      	adds	r3, r7, r3
    8ce6:	3201      	adds	r2, #1
    8ce8:	801a      	strh	r2, [r3, #0]
    8cea:	4b06      	ldr	r3, [pc, #24]	; (8d04 <_eeprom_emulator_update_page_mapping+0x148>)
    8cec:	891b      	ldrh	r3, [r3, #8]
    8cee:	089b      	lsrs	r3, r3, #2
    8cf0:	b29b      	uxth	r3, r3
    8cf2:	220c      	movs	r2, #12
    8cf4:	18ba      	adds	r2, r7, r2
    8cf6:	8812      	ldrh	r2, [r2, #0]
    8cf8:	429a      	cmp	r2, r3
    8cfa:	d3ab      	bcc.n	8c54 <_eeprom_emulator_update_page_mapping+0x98>
		}
	}
}
    8cfc:	46c0      	nop			; (mov r8, r8)
    8cfe:	46bd      	mov	sp, r7
    8d00:	b004      	add	sp, #16
    8d02:	bd80      	pop	{r7, pc}
    8d04:	20000238 	.word	0x20000238

00008d08 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b084      	sub	sp, #16
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	0002      	movs	r2, r0
    8d10:	6039      	str	r1, [r7, #0]
    8d12:	1dfb      	adds	r3, r7, #7
    8d14:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
    8d16:	230e      	movs	r3, #14
    8d18:	18fb      	adds	r3, r7, r3
    8d1a:	1dfa      	adds	r2, r7, #7
    8d1c:	7812      	ldrb	r2, [r2, #0]
    8d1e:	0892      	lsrs	r2, r2, #2
    8d20:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    8d22:	230d      	movs	r3, #13
    8d24:	18fb      	adds	r3, r7, r3
    8d26:	1dfa      	adds	r2, r7, #7
    8d28:	7812      	ldrb	r2, [r2, #0]
    8d2a:	2103      	movs	r1, #3
    8d2c:	400a      	ands	r2, r1
    8d2e:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8d30:	230f      	movs	r3, #15
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	220d      	movs	r2, #13
    8d36:	18ba      	adds	r2, r7, r2
    8d38:	7812      	ldrb	r2, [r2, #0]
    8d3a:	701a      	strb	r2, [r3, #0]
    8d3c:	e023      	b.n	8d86 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    8d3e:	230e      	movs	r3, #14
    8d40:	18fb      	adds	r3, r7, r3
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	009b      	lsls	r3, r3, #2
    8d46:	b2d9      	uxtb	r1, r3
    8d48:	230c      	movs	r3, #12
    8d4a:	18fb      	adds	r3, r7, r3
    8d4c:	220f      	movs	r2, #15
    8d4e:	18ba      	adds	r2, r7, r2
    8d50:	7812      	ldrb	r2, [r2, #0]
    8d52:	188a      	adds	r2, r1, r2
    8d54:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
    8d56:	4b11      	ldr	r3, [pc, #68]	; (8d9c <_eeprom_emulator_is_page_free_on_row+0x94>)
    8d58:	685a      	ldr	r2, [r3, #4]
    8d5a:	230c      	movs	r3, #12
    8d5c:	18fb      	adds	r3, r7, r3
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	019b      	lsls	r3, r3, #6
    8d62:	18d3      	adds	r3, r2, r3
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	2bff      	cmp	r3, #255	; 0xff
    8d68:	d106      	bne.n	8d78 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
    8d6a:	683b      	ldr	r3, [r7, #0]
    8d6c:	220c      	movs	r2, #12
    8d6e:	18ba      	adds	r2, r7, r2
    8d70:	7812      	ldrb	r2, [r2, #0]
    8d72:	701a      	strb	r2, [r3, #0]
			return true;
    8d74:	2301      	movs	r3, #1
    8d76:	e00c      	b.n	8d92 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8d78:	230f      	movs	r3, #15
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	781a      	ldrb	r2, [r3, #0]
    8d7e:	230f      	movs	r3, #15
    8d80:	18fb      	adds	r3, r7, r3
    8d82:	3201      	adds	r2, #1
    8d84:	701a      	strb	r2, [r3, #0]
    8d86:	230f      	movs	r3, #15
    8d88:	18fb      	adds	r3, r7, r3
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	2b03      	cmp	r3, #3
    8d8e:	d9d6      	bls.n	8d3e <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
    8d90:	2300      	movs	r3, #0
}
    8d92:	0018      	movs	r0, r3
    8d94:	46bd      	mov	sp, r7
    8d96:	b004      	add	sp, #16
    8d98:	bd80      	pop	{r7, pc}
    8d9a:	46c0      	nop			; (mov r8, r8)
    8d9c:	20000238 	.word	0x20000238

00008da0 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
    8da0:	b580      	push	{r7, lr}
    8da2:	b086      	sub	sp, #24
    8da4:	af00      	add	r7, sp, #0
    8da6:	603a      	str	r2, [r7, #0]
    8da8:	1dfb      	adds	r3, r7, #7
    8daa:	1c02      	adds	r2, r0, #0
    8dac:	701a      	strb	r2, [r3, #0]
    8dae:	1dbb      	adds	r3, r7, #6
    8db0:	1c0a      	adds	r2, r1, #0
    8db2:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    8db4:	2314      	movs	r3, #20
    8db6:	18fb      	adds	r3, r7, r3
    8db8:	2200      	movs	r2, #0
    8dba:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    8dbc:	4b69      	ldr	r3, [pc, #420]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8dbe:	685b      	ldr	r3, [r3, #4]
    8dc0:	1dfa      	adds	r2, r7, #7
    8dc2:	7812      	ldrb	r2, [r2, #0]
    8dc4:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
    8dc6:	189b      	adds	r3, r3, r2
    8dc8:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    8dca:	693b      	ldr	r3, [r7, #16]
    8dcc:	781a      	ldrb	r2, [r3, #0]
    8dce:	2308      	movs	r3, #8
    8dd0:	18fb      	adds	r3, r7, r3
    8dd2:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    8dd4:	1dfb      	adds	r3, r7, #7
    8dd6:	781b      	ldrb	r3, [r3, #0]
    8dd8:	009b      	lsls	r3, r3, #2
    8dda:	b2da      	uxtb	r2, r3
    8ddc:	2308      	movs	r3, #8
    8dde:	18fb      	adds	r3, r7, r3
    8de0:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
    8de2:	693b      	ldr	r3, [r7, #16]
    8de4:	3340      	adds	r3, #64	; 0x40
    8de6:	781a      	ldrb	r2, [r3, #0]
    8de8:	2308      	movs	r3, #8
    8dea:	18fb      	adds	r3, r7, r3
    8dec:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    8dee:	1dfb      	adds	r3, r7, #7
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	009b      	lsls	r3, r3, #2
    8df4:	b2db      	uxtb	r3, r3
    8df6:	3301      	adds	r3, #1
    8df8:	b2da      	uxtb	r2, r3
    8dfa:	2308      	movs	r3, #8
    8dfc:	18fb      	adds	r3, r7, r3
    8dfe:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
    8e00:	2317      	movs	r3, #23
    8e02:	18fb      	adds	r3, r7, r3
    8e04:	2200      	movs	r2, #0
    8e06:	701a      	strb	r2, [r3, #0]
    8e08:	e03a      	b.n	8e80 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8e0a:	2316      	movs	r3, #22
    8e0c:	18fb      	adds	r3, r7, r3
    8e0e:	2202      	movs	r2, #2
    8e10:	701a      	strb	r2, [r3, #0]
    8e12:	e029      	b.n	8e68 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    8e14:	2317      	movs	r3, #23
    8e16:	18fb      	adds	r3, r7, r3
    8e18:	781a      	ldrb	r2, [r3, #0]
    8e1a:	2308      	movs	r3, #8
    8e1c:	18fb      	adds	r3, r7, r3
    8e1e:	0052      	lsls	r2, r2, #1
    8e20:	5cd2      	ldrb	r2, [r2, r3]
    8e22:	2316      	movs	r3, #22
    8e24:	18fb      	adds	r3, r7, r3
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	019b      	lsls	r3, r3, #6
    8e2a:	6939      	ldr	r1, [r7, #16]
    8e2c:	18cb      	adds	r3, r1, r3
    8e2e:	781b      	ldrb	r3, [r3, #0]
    8e30:	429a      	cmp	r2, r3
    8e32:	d112      	bne.n	8e5a <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
    8e34:	2317      	movs	r3, #23
    8e36:	18fb      	adds	r3, r7, r3
    8e38:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    8e3a:	1dfa      	adds	r2, r7, #7
    8e3c:	7812      	ldrb	r2, [r2, #0]
    8e3e:	0092      	lsls	r2, r2, #2
    8e40:	b2d1      	uxtb	r1, r2
    8e42:	2216      	movs	r2, #22
    8e44:	18ba      	adds	r2, r7, r2
    8e46:	7812      	ldrb	r2, [r2, #0]
    8e48:	188a      	adds	r2, r1, r2
    8e4a:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
    8e4c:	2208      	movs	r2, #8
    8e4e:	18ba      	adds	r2, r7, r2
    8e50:	005b      	lsls	r3, r3, #1
    8e52:	18d3      	adds	r3, r2, r3
    8e54:	3301      	adds	r3, #1
    8e56:	1c0a      	adds	r2, r1, #0
    8e58:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    8e5a:	2316      	movs	r3, #22
    8e5c:	18fb      	adds	r3, r7, r3
    8e5e:	781a      	ldrb	r2, [r3, #0]
    8e60:	2316      	movs	r3, #22
    8e62:	18fb      	adds	r3, r7, r3
    8e64:	3201      	adds	r2, #1
    8e66:	701a      	strb	r2, [r3, #0]
    8e68:	2316      	movs	r3, #22
    8e6a:	18fb      	adds	r3, r7, r3
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	2b03      	cmp	r3, #3
    8e70:	d9d0      	bls.n	8e14 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
    8e72:	2317      	movs	r3, #23
    8e74:	18fb      	adds	r3, r7, r3
    8e76:	781a      	ldrb	r2, [r3, #0]
    8e78:	2317      	movs	r3, #23
    8e7a:	18fb      	adds	r3, r7, r3
    8e7c:	3201      	adds	r2, #1
    8e7e:	701a      	strb	r2, [r3, #0]
    8e80:	2317      	movs	r3, #23
    8e82:	18fb      	adds	r3, r7, r3
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	2b01      	cmp	r3, #1
    8e88:	d9bf      	bls.n	8e0a <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
    8e8a:	2315      	movs	r3, #21
    8e8c:	18fb      	adds	r3, r7, r3
    8e8e:	2200      	movs	r2, #0
    8e90:	701a      	strb	r2, [r3, #0]
    8e92:	e051      	b.n	8f38 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    8e94:	4b33      	ldr	r3, [pc, #204]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8e96:	2287      	movs	r2, #135	; 0x87
    8e98:	5c9b      	ldrb	r3, [r3, r2]
    8e9a:	009a      	lsls	r2, r3, #2
    8e9c:	2315      	movs	r3, #21
    8e9e:	18fb      	adds	r3, r7, r3
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
    8ea4:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    8ea6:	4b30      	ldr	r3, [pc, #192]	; (8f68 <_eeprom_emulator_move_data_to_spare+0x1c8>)
    8ea8:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
    8eaa:	2315      	movs	r3, #21
    8eac:	18fb      	adds	r3, r7, r3
    8eae:	781a      	ldrb	r2, [r3, #0]
    8eb0:	2308      	movs	r3, #8
    8eb2:	18fb      	adds	r3, r7, r3
    8eb4:	0052      	lsls	r2, r2, #1
    8eb6:	5cd3      	ldrb	r3, [r2, r3]
    8eb8:	1dba      	adds	r2, r7, #6
    8eba:	7812      	ldrb	r2, [r2, #0]
    8ebc:	429a      	cmp	r2, r3
    8ebe:	d10d      	bne.n	8edc <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
    8ec0:	4b28      	ldr	r3, [pc, #160]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8ec2:	1dba      	adds	r2, r7, #6
    8ec4:	2188      	movs	r1, #136	; 0x88
    8ec6:	7812      	ldrb	r2, [r2, #0]
    8ec8:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    8eca:	4b26      	ldr	r3, [pc, #152]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8ecc:	228c      	movs	r2, #140	; 0x8c
    8ece:	6839      	ldr	r1, [r7, #0]
    8ed0:	189b      	adds	r3, r3, r2
    8ed2:	223c      	movs	r2, #60	; 0x3c
    8ed4:	0018      	movs	r0, r3
    8ed6:	4b25      	ldr	r3, [pc, #148]	; (8f6c <_eeprom_emulator_move_data_to_spare+0x1cc>)
    8ed8:	4798      	blx	r3
    8eda:	e00e      	b.n	8efa <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
    8edc:	2315      	movs	r3, #21
    8ede:	18fb      	adds	r3, r7, r3
    8ee0:	781b      	ldrb	r3, [r3, #0]
    8ee2:	2208      	movs	r2, #8
    8ee4:	18ba      	adds	r2, r7, r2
    8ee6:	005b      	lsls	r3, r3, #1
    8ee8:	18d3      	adds	r3, r2, r3
    8eea:	3301      	adds	r3, #1
    8eec:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
    8eee:	b29b      	uxth	r3, r3
    8ef0:	4a1f      	ldr	r2, [pc, #124]	; (8f70 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8ef2:	0011      	movs	r1, r2
    8ef4:	0018      	movs	r0, r3
    8ef6:	4b1f      	ldr	r3, [pc, #124]	; (8f74 <_eeprom_emulator_move_data_to_spare+0x1d4>)
    8ef8:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    8efa:	68fb      	ldr	r3, [r7, #12]
    8efc:	b29b      	uxth	r3, r3
    8efe:	4a1c      	ldr	r2, [pc, #112]	; (8f70 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8f00:	0011      	movs	r1, r2
    8f02:	0018      	movs	r0, r3
    8f04:	4b1c      	ldr	r3, [pc, #112]	; (8f78 <_eeprom_emulator_move_data_to_spare+0x1d8>)
    8f06:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    8f08:	2315      	movs	r3, #21
    8f0a:	18fb      	adds	r3, r7, r3
    8f0c:	781a      	ldrb	r2, [r3, #0]
    8f0e:	2308      	movs	r3, #8
    8f10:	18fb      	adds	r3, r7, r3
    8f12:	0052      	lsls	r2, r2, #1
    8f14:	5cd3      	ldrb	r3, [r2, r3]
    8f16:	0019      	movs	r1, r3
    8f18:	68fb      	ldr	r3, [r7, #12]
    8f1a:	b2da      	uxtb	r2, r3
    8f1c:	4b11      	ldr	r3, [pc, #68]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8f1e:	185b      	adds	r3, r3, r1
    8f20:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
    8f22:	4b10      	ldr	r3, [pc, #64]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8f24:	22c8      	movs	r2, #200	; 0xc8
    8f26:	2101      	movs	r1, #1
    8f28:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
    8f2a:	2315      	movs	r3, #21
    8f2c:	18fb      	adds	r3, r7, r3
    8f2e:	781a      	ldrb	r2, [r3, #0]
    8f30:	2315      	movs	r3, #21
    8f32:	18fb      	adds	r3, r7, r3
    8f34:	3201      	adds	r2, #1
    8f36:	701a      	strb	r2, [r3, #0]
    8f38:	2315      	movs	r3, #21
    8f3a:	18fb      	adds	r3, r7, r3
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	2b01      	cmp	r3, #1
    8f40:	d9a8      	bls.n	8e94 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
    8f42:	1dfb      	adds	r3, r7, #7
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	0018      	movs	r0, r3
    8f48:	4b0c      	ldr	r3, [pc, #48]	; (8f7c <_eeprom_emulator_move_data_to_spare+0x1dc>)
    8f4a:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
    8f4c:	4b05      	ldr	r3, [pc, #20]	; (8f64 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8f4e:	1dfa      	adds	r2, r7, #7
    8f50:	2187      	movs	r1, #135	; 0x87
    8f52:	7812      	ldrb	r2, [r2, #0]
    8f54:	545a      	strb	r2, [r3, r1]

	return error_code;
    8f56:	2314      	movs	r3, #20
    8f58:	18fb      	adds	r3, r7, r3
    8f5a:	781b      	ldrb	r3, [r3, #0]
}
    8f5c:	0018      	movs	r0, r3
    8f5e:	46bd      	mov	sp, r7
    8f60:	b006      	add	sp, #24
    8f62:	bd80      	pop	{r7, pc}
    8f64:	20000238 	.word	0x20000238
    8f68:	0000939d 	.word	0x0000939d
    8f6c:	0001b3e9 	.word	0x0001b3e9
    8f70:	200002c0 	.word	0x200002c0
    8f74:	00008a81 	.word	0x00008a81
    8f78:	000089e5 	.word	0x000089e5
    8f7c:	0000899d 	.word	0x0000899d

00008f80 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
    8f80:	b590      	push	{r4, r7, lr}
    8f82:	b095      	sub	sp, #84	; 0x54
    8f84:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    8f86:	2340      	movs	r3, #64	; 0x40
    8f88:	18fb      	adds	r3, r7, r3
    8f8a:	4a29      	ldr	r2, [pc, #164]	; (9030 <_eeprom_emulator_create_master_page+0xb0>)
    8f8c:	ca13      	ldmia	r2!, {r0, r1, r4}
    8f8e:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
    8f90:	003b      	movs	r3, r7
    8f92:	2240      	movs	r2, #64	; 0x40
    8f94:	21ff      	movs	r1, #255	; 0xff
    8f96:	0018      	movs	r0, r3
    8f98:	4b26      	ldr	r3, [pc, #152]	; (9034 <_eeprom_emulator_create_master_page+0xb4>)
    8f9a:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    8f9c:	234f      	movs	r3, #79	; 0x4f
    8f9e:	18fb      	adds	r3, r7, r3
    8fa0:	2200      	movs	r2, #0
    8fa2:	701a      	strb	r2, [r3, #0]
    8fa4:	e013      	b.n	8fce <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
    8fa6:	234f      	movs	r3, #79	; 0x4f
    8fa8:	18fb      	adds	r3, r7, r3
    8faa:	781a      	ldrb	r2, [r3, #0]
    8fac:	234f      	movs	r3, #79	; 0x4f
    8fae:	18fb      	adds	r3, r7, r3
    8fb0:	7819      	ldrb	r1, [r3, #0]
    8fb2:	2340      	movs	r3, #64	; 0x40
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	0089      	lsls	r1, r1, #2
    8fb8:	58c9      	ldr	r1, [r1, r3]
    8fba:	003b      	movs	r3, r7
    8fbc:	0092      	lsls	r2, r2, #2
    8fbe:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    8fc0:	234f      	movs	r3, #79	; 0x4f
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	781a      	ldrb	r2, [r3, #0]
    8fc6:	234f      	movs	r3, #79	; 0x4f
    8fc8:	18fb      	adds	r3, r7, r3
    8fca:	3201      	adds	r2, #1
    8fcc:	701a      	strb	r2, [r3, #0]
    8fce:	234f      	movs	r3, #79	; 0x4f
    8fd0:	18fb      	adds	r3, r7, r3
    8fd2:	781b      	ldrb	r3, [r3, #0]
    8fd4:	2b02      	cmp	r3, #2
    8fd6:	d9e6      	bls.n	8fa6 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    8fd8:	003b      	movs	r3, r7
    8fda:	2201      	movs	r2, #1
    8fdc:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    8fde:	003b      	movs	r3, r7
    8fe0:	2201      	movs	r2, #1
    8fe2:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    8fe4:	003b      	movs	r3, r7
    8fe6:	2200      	movs	r2, #0
    8fe8:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
    8fea:	003b      	movs	r3, r7
    8fec:	2200      	movs	r2, #0
    8fee:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    8ff0:	4b11      	ldr	r3, [pc, #68]	; (9038 <_eeprom_emulator_create_master_page+0xb8>)
    8ff2:	891b      	ldrh	r3, [r3, #8]
    8ff4:	3b01      	subs	r3, #1
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	da00      	bge.n	8ffc <_eeprom_emulator_create_master_page+0x7c>
    8ffa:	3303      	adds	r3, #3
    8ffc:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
    8ffe:	b2db      	uxtb	r3, r3
    9000:	0018      	movs	r0, r3
    9002:	4b0e      	ldr	r3, [pc, #56]	; (903c <_eeprom_emulator_create_master_page+0xbc>)
    9004:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    9006:	4b0c      	ldr	r3, [pc, #48]	; (9038 <_eeprom_emulator_create_master_page+0xb8>)
    9008:	891b      	ldrh	r3, [r3, #8]
    900a:	3b01      	subs	r3, #1
    900c:	b29b      	uxth	r3, r3
    900e:	003a      	movs	r2, r7
    9010:	0011      	movs	r1, r2
    9012:	0018      	movs	r0, r3
    9014:	4b0a      	ldr	r3, [pc, #40]	; (9040 <_eeprom_emulator_create_master_page+0xc0>)
    9016:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    9018:	4b07      	ldr	r3, [pc, #28]	; (9038 <_eeprom_emulator_create_master_page+0xb8>)
    901a:	891b      	ldrh	r3, [r3, #8]
    901c:	3b01      	subs	r3, #1
    901e:	b29b      	uxth	r3, r3
    9020:	0018      	movs	r0, r3
    9022:	4b08      	ldr	r3, [pc, #32]	; (9044 <_eeprom_emulator_create_master_page+0xc4>)
    9024:	4798      	blx	r3
}
    9026:	46c0      	nop			; (mov r8, r8)
    9028:	46bd      	mov	sp, r7
    902a:	b015      	add	sp, #84	; 0x54
    902c:	bd90      	pop	{r4, r7, pc}
    902e:	46c0      	nop			; (mov r8, r8)
    9030:	0001b898 	.word	0x0001b898
    9034:	0001b3fb 	.word	0x0001b3fb
    9038:	20000238 	.word	0x20000238
    903c:	0000899d 	.word	0x0000899d
    9040:	000089e5 	.word	0x000089e5
    9044:	00008a35 	.word	0x00008a35

00009048 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
    9048:	b590      	push	{r4, r7, lr}
    904a:	b095      	sub	sp, #84	; 0x54
    904c:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    904e:	2340      	movs	r3, #64	; 0x40
    9050:	18fb      	adds	r3, r7, r3
    9052:	4a22      	ldr	r2, [pc, #136]	; (90dc <_eeprom_emulator_verify_master_page+0x94>)
    9054:	ca13      	ldmia	r2!, {r0, r1, r4}
    9056:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    9058:	4b21      	ldr	r3, [pc, #132]	; (90e0 <_eeprom_emulator_verify_master_page+0x98>)
    905a:	891b      	ldrh	r3, [r3, #8]
    905c:	3b01      	subs	r3, #1
    905e:	b29b      	uxth	r3, r3
    9060:	003a      	movs	r2, r7
    9062:	0011      	movs	r1, r2
    9064:	0018      	movs	r0, r3
    9066:	4b1f      	ldr	r3, [pc, #124]	; (90e4 <_eeprom_emulator_verify_master_page+0x9c>)
    9068:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    906a:	234f      	movs	r3, #79	; 0x4f
    906c:	18fb      	adds	r3, r7, r3
    906e:	2200      	movs	r2, #0
    9070:	701a      	strb	r2, [r3, #0]
    9072:	e017      	b.n	90a4 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
    9074:	234f      	movs	r3, #79	; 0x4f
    9076:	18fb      	adds	r3, r7, r3
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	003b      	movs	r3, r7
    907c:	0092      	lsls	r2, r2, #2
    907e:	58d2      	ldr	r2, [r2, r3]
    9080:	234f      	movs	r3, #79	; 0x4f
    9082:	18fb      	adds	r3, r7, r3
    9084:	7819      	ldrb	r1, [r3, #0]
    9086:	2340      	movs	r3, #64	; 0x40
    9088:	18fb      	adds	r3, r7, r3
    908a:	0089      	lsls	r1, r1, #2
    908c:	58cb      	ldr	r3, [r1, r3]
    908e:	429a      	cmp	r2, r3
    9090:	d001      	beq.n	9096 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
    9092:	231a      	movs	r3, #26
    9094:	e01e      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    9096:	234f      	movs	r3, #79	; 0x4f
    9098:	18fb      	adds	r3, r7, r3
    909a:	781a      	ldrb	r2, [r3, #0]
    909c:	234f      	movs	r3, #79	; 0x4f
    909e:	18fb      	adds	r3, r7, r3
    90a0:	3201      	adds	r2, #1
    90a2:	701a      	strb	r2, [r3, #0]
    90a4:	234f      	movs	r3, #79	; 0x4f
    90a6:	18fb      	adds	r3, r7, r3
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	2b02      	cmp	r3, #2
    90ac:	d9e2      	bls.n	9074 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    90ae:	003b      	movs	r3, r7
    90b0:	7bdb      	ldrb	r3, [r3, #15]
    90b2:	2b01      	cmp	r3, #1
    90b4:	d001      	beq.n	90ba <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
    90b6:	2310      	movs	r3, #16
    90b8:	e00c      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    90ba:	003b      	movs	r3, r7
    90bc:	7b1b      	ldrb	r3, [r3, #12]
    90be:	2b01      	cmp	r3, #1
    90c0:	d001      	beq.n	90c6 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
    90c2:	2310      	movs	r3, #16
    90c4:	e006      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    90c6:	003b      	movs	r3, r7
    90c8:	7b5b      	ldrb	r3, [r3, #13]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d001      	beq.n	90d2 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
    90ce:	2310      	movs	r3, #16
    90d0:	e000      	b.n	90d4 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
    90d2:	2300      	movs	r3, #0
}
    90d4:	0018      	movs	r0, r3
    90d6:	46bd      	mov	sp, r7
    90d8:	b015      	add	sp, #84	; 0x54
    90da:	bd90      	pop	{r4, r7, pc}
    90dc:	0001b898 	.word	0x0001b898
    90e0:	20000238 	.word	0x20000238
    90e4:	00008a81 	.word	0x00008a81

000090e8 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    90e8:	b590      	push	{r4, r7, lr}
    90ea:	b087      	sub	sp, #28
    90ec:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    90ee:	2317      	movs	r3, #23
    90f0:	18fb      	adds	r3, r7, r3
    90f2:	2200      	movs	r2, #0
    90f4:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
    90f6:	2310      	movs	r3, #16
    90f8:	18fb      	adds	r3, r7, r3
    90fa:	0018      	movs	r0, r3
    90fc:	4b2e      	ldr	r3, [pc, #184]	; (91b8 <eeprom_emulator_init+0xd0>)
    90fe:	4798      	blx	r3
	config.manual_page_write = true;
    9100:	2310      	movs	r3, #16
    9102:	18fb      	adds	r3, r7, r3
    9104:	2201      	movs	r2, #1
    9106:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    9108:	2317      	movs	r3, #23
    910a:	18fc      	adds	r4, r7, r3
    910c:	2310      	movs	r3, #16
    910e:	18fb      	adds	r3, r7, r3
    9110:	0018      	movs	r0, r3
    9112:	4b2a      	ldr	r3, [pc, #168]	; (91bc <eeprom_emulator_init+0xd4>)
    9114:	4798      	blx	r3
    9116:	0003      	movs	r3, r0
    9118:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    911a:	2317      	movs	r3, #23
    911c:	18fb      	adds	r3, r7, r3
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	2b05      	cmp	r3, #5
    9122:	d0f1      	beq.n	9108 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    9124:	1d3b      	adds	r3, r7, #4
    9126:	0018      	movs	r0, r3
    9128:	4b25      	ldr	r3, [pc, #148]	; (91c0 <eeprom_emulator_init+0xd8>)
    912a:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    912c:	1d3b      	adds	r3, r7, #4
    912e:	685b      	ldr	r3, [r3, #4]
    9130:	2b0b      	cmp	r3, #11
    9132:	d801      	bhi.n	9138 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
    9134:	2316      	movs	r3, #22
    9136:	e03b      	b.n	91b0 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
    9138:	1d3b      	adds	r3, r7, #4
    913a:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
    913c:	b29a      	uxth	r2, r3
    913e:	4b21      	ldr	r3, [pc, #132]	; (91c4 <eeprom_emulator_init+0xdc>)
    9140:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    9142:	1d3b      	adds	r3, r7, #4
    9144:	685b      	ldr	r3, [r3, #4]
    9146:	3b08      	subs	r3, #8
    9148:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
    914a:	b2da      	uxtb	r2, r3
    914c:	4b1d      	ldr	r3, [pc, #116]	; (91c4 <eeprom_emulator_init+0xdc>)
    914e:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
    9150:	4b1c      	ldr	r3, [pc, #112]	; (91c4 <eeprom_emulator_init+0xdc>)
    9152:	891b      	ldrh	r3, [r3, #8]
    9154:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
    9156:	0013      	movs	r3, r2
    9158:	069b      	lsls	r3, r3, #26
    915a:	1a9b      	subs	r3, r3, r2
    915c:	019b      	lsls	r3, r3, #6
    915e:	2280      	movs	r2, #128	; 0x80
    9160:	02d2      	lsls	r2, r2, #11
    9162:	4694      	mov	ip, r2
    9164:	4463      	add	r3, ip
    9166:	001a      	movs	r2, r3
	_eeprom_instance.flash =
    9168:	4b16      	ldr	r3, [pc, #88]	; (91c4 <eeprom_emulator_init+0xdc>)
    916a:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    916c:	4b15      	ldr	r3, [pc, #84]	; (91c4 <eeprom_emulator_init+0xdc>)
    916e:	22c8      	movs	r2, #200	; 0xc8
    9170:	2100      	movs	r1, #0
    9172:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    9174:	4b14      	ldr	r3, [pc, #80]	; (91c8 <eeprom_emulator_init+0xe0>)
    9176:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    9178:	4b12      	ldr	r3, [pc, #72]	; (91c4 <eeprom_emulator_init+0xdc>)
    917a:	2287      	movs	r2, #135	; 0x87
    917c:	5c9b      	ldrb	r3, [r3, r2]
    917e:	2b3f      	cmp	r3, #63	; 0x3f
    9180:	d101      	bne.n	9186 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
    9182:	231a      	movs	r3, #26
    9184:	e014      	b.n	91b0 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
    9186:	2317      	movs	r3, #23
    9188:	18fc      	adds	r4, r7, r3
    918a:	4b10      	ldr	r3, [pc, #64]	; (91cc <eeprom_emulator_init+0xe4>)
    918c:	4798      	blx	r3
    918e:	0003      	movs	r3, r0
    9190:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
    9192:	2317      	movs	r3, #23
    9194:	18fb      	adds	r3, r7, r3
    9196:	781b      	ldrb	r3, [r3, #0]
    9198:	2b00      	cmp	r3, #0
    919a:	d003      	beq.n	91a4 <eeprom_emulator_init+0xbc>
		return error_code;
    919c:	2317      	movs	r3, #23
    919e:	18fb      	adds	r3, r7, r3
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	e005      	b.n	91b0 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
    91a4:	4b07      	ldr	r3, [pc, #28]	; (91c4 <eeprom_emulator_init+0xdc>)
    91a6:	2201      	movs	r2, #1
    91a8:	701a      	strb	r2, [r3, #0]

	return error_code;
    91aa:	2317      	movs	r3, #23
    91ac:	18fb      	adds	r3, r7, r3
    91ae:	781b      	ldrb	r3, [r3, #0]
}
    91b0:	0018      	movs	r0, r3
    91b2:	46bd      	mov	sp, r7
    91b4:	b007      	add	sp, #28
    91b6:	bd90      	pop	{r4, r7, pc}
    91b8:	00008961 	.word	0x00008961
    91bc:	00002ad5 	.word	0x00002ad5
    91c0:	00002fa1 	.word	0x00002fa1
    91c4:	20000238 	.word	0x20000238
    91c8:	00008bbd 	.word	0x00008bbd
    91cc:	00009049 	.word	0x00009049

000091d0 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    91d0:	b580      	push	{r7, lr}
    91d2:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
    91d4:	4b04      	ldr	r3, [pc, #16]	; (91e8 <eeprom_emulator_erase_memory+0x18>)
    91d6:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
    91d8:	4b04      	ldr	r3, [pc, #16]	; (91ec <eeprom_emulator_erase_memory+0x1c>)
    91da:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    91dc:	4b04      	ldr	r3, [pc, #16]	; (91f0 <eeprom_emulator_erase_memory+0x20>)
    91de:	4798      	blx	r3
}
    91e0:	46c0      	nop			; (mov r8, r8)
    91e2:	46bd      	mov	sp, r7
    91e4:	bd80      	pop	{r7, pc}
    91e6:	46c0      	nop			; (mov r8, r8)
    91e8:	00008ad1 	.word	0x00008ad1
    91ec:	00008f81 	.word	0x00008f81
    91f0:	00008bbd 	.word	0x00008bbd

000091f4 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
    91f4:	b590      	push	{r4, r7, lr}
    91f6:	b085      	sub	sp, #20
    91f8:	af00      	add	r7, sp, #0
    91fa:	0002      	movs	r2, r0
    91fc:	6039      	str	r1, [r7, #0]
    91fe:	1dfb      	adds	r3, r7, #7
    9200:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    9202:	4b38      	ldr	r3, [pc, #224]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9204:	781b      	ldrb	r3, [r3, #0]
    9206:	2201      	movs	r2, #1
    9208:	4053      	eors	r3, r2
    920a:	b2db      	uxtb	r3, r3
    920c:	2b00      	cmp	r3, #0
    920e:	d001      	beq.n	9214 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    9210:	231f      	movs	r3, #31
    9212:	e063      	b.n	92dc <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    9214:	4b33      	ldr	r3, [pc, #204]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9216:	7a9b      	ldrb	r3, [r3, #10]
    9218:	1dfa      	adds	r2, r7, #7
    921a:	7812      	ldrb	r2, [r2, #0]
    921c:	429a      	cmp	r2, r3
    921e:	d301      	bcc.n	9224 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    9220:	2318      	movs	r3, #24
    9222:	e05b      	b.n	92dc <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
    9224:	4b2f      	ldr	r3, [pc, #188]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9226:	22c8      	movs	r2, #200	; 0xc8
    9228:	5c9b      	ldrb	r3, [r3, r2]
    922a:	2b00      	cmp	r3, #0
    922c:	d008      	beq.n	9240 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    922e:	4b2d      	ldr	r3, [pc, #180]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9230:	2288      	movs	r2, #136	; 0x88
    9232:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    9234:	1dfa      	adds	r2, r7, #7
    9236:	7812      	ldrb	r2, [r2, #0]
    9238:	429a      	cmp	r2, r3
    923a:	d001      	beq.n	9240 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    923c:	4b2a      	ldr	r3, [pc, #168]	; (92e8 <eeprom_emulator_write_page+0xf4>)
    923e:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
    9240:	230e      	movs	r3, #14
    9242:	18fb      	adds	r3, r7, r3
    9244:	2200      	movs	r2, #0
    9246:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    9248:	1dfb      	adds	r3, r7, #7
    924a:	781b      	ldrb	r3, [r3, #0]
    924c:	4a25      	ldr	r2, [pc, #148]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    924e:	18d3      	adds	r3, r2, r3
    9250:	7adb      	ldrb	r3, [r3, #11]
    9252:	220f      	movs	r2, #15
    9254:	18bc      	adds	r4, r7, r2
    9256:	220e      	movs	r2, #14
    9258:	18ba      	adds	r2, r7, r2
    925a:	0011      	movs	r1, r2
    925c:	0018      	movs	r0, r3
    925e:	4b23      	ldr	r3, [pc, #140]	; (92ec <eeprom_emulator_write_page+0xf8>)
    9260:	4798      	blx	r3
    9262:	0003      	movs	r3, r0
    9264:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
    9266:	230f      	movs	r3, #15
    9268:	18fb      	adds	r3, r7, r3
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	2201      	movs	r2, #1
    926e:	4053      	eors	r3, r2
    9270:	b2db      	uxtb	r3, r3
    9272:	2b00      	cmp	r3, #0
    9274:	d00e      	beq.n	9294 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
    9276:	1dfb      	adds	r3, r7, #7
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	4a1a      	ldr	r2, [pc, #104]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    927c:	18d3      	adds	r3, r2, r3
    927e:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
    9280:	089b      	lsrs	r3, r3, #2
    9282:	b2d8      	uxtb	r0, r3
    9284:	683a      	ldr	r2, [r7, #0]
    9286:	1dfb      	adds	r3, r7, #7
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	0019      	movs	r1, r3
    928c:	4b18      	ldr	r3, [pc, #96]	; (92f0 <eeprom_emulator_write_page+0xfc>)
    928e:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
    9290:	2300      	movs	r3, #0
    9292:	e023      	b.n	92dc <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
    9294:	4b13      	ldr	r3, [pc, #76]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    9296:	1dfa      	adds	r2, r7, #7
    9298:	2188      	movs	r1, #136	; 0x88
    929a:	7812      	ldrb	r2, [r2, #0]
    929c:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
    929e:	4b11      	ldr	r3, [pc, #68]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    92a0:	228c      	movs	r2, #140	; 0x8c
    92a2:	6839      	ldr	r1, [r7, #0]
    92a4:	189b      	adds	r3, r3, r2
    92a6:	223c      	movs	r2, #60	; 0x3c
    92a8:	0018      	movs	r0, r3
    92aa:	4b12      	ldr	r3, [pc, #72]	; (92f4 <eeprom_emulator_write_page+0x100>)
    92ac:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    92ae:	230e      	movs	r3, #14
    92b0:	18fb      	adds	r3, r7, r3
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	b29b      	uxth	r3, r3
    92b6:	4a10      	ldr	r2, [pc, #64]	; (92f8 <eeprom_emulator_write_page+0x104>)
    92b8:	0011      	movs	r1, r2
    92ba:	0018      	movs	r0, r3
    92bc:	4b0f      	ldr	r3, [pc, #60]	; (92fc <eeprom_emulator_write_page+0x108>)
    92be:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
    92c0:	1dfb      	adds	r3, r7, #7
    92c2:	781b      	ldrb	r3, [r3, #0]
    92c4:	220e      	movs	r2, #14
    92c6:	18ba      	adds	r2, r7, r2
    92c8:	7811      	ldrb	r1, [r2, #0]
    92ca:	4a06      	ldr	r2, [pc, #24]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    92cc:	18d3      	adds	r3, r2, r3
    92ce:	1c0a      	adds	r2, r1, #0
    92d0:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
    92d2:	4b04      	ldr	r3, [pc, #16]	; (92e4 <eeprom_emulator_write_page+0xf0>)
    92d4:	22c8      	movs	r2, #200	; 0xc8
    92d6:	2101      	movs	r1, #1
    92d8:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
    92da:	2300      	movs	r3, #0
}
    92dc:	0018      	movs	r0, r3
    92de:	46bd      	mov	sp, r7
    92e0:	b005      	add	sp, #20
    92e2:	bd90      	pop	{r4, r7, pc}
    92e4:	20000238 	.word	0x20000238
    92e8:	0000939d 	.word	0x0000939d
    92ec:	00008d09 	.word	0x00008d09
    92f0:	00008da1 	.word	0x00008da1
    92f4:	0001b3e9 	.word	0x0001b3e9
    92f8:	200002c0 	.word	0x200002c0
    92fc:	000089e5 	.word	0x000089e5

00009300 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    9300:	b580      	push	{r7, lr}
    9302:	b092      	sub	sp, #72	; 0x48
    9304:	af00      	add	r7, sp, #0
    9306:	0002      	movs	r2, r0
    9308:	6039      	str	r1, [r7, #0]
    930a:	1dfb      	adds	r3, r7, #7
    930c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    930e:	4b20      	ldr	r3, [pc, #128]	; (9390 <eeprom_emulator_read_page+0x90>)
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	2201      	movs	r2, #1
    9314:	4053      	eors	r3, r2
    9316:	b2db      	uxtb	r3, r3
    9318:	2b00      	cmp	r3, #0
    931a:	d001      	beq.n	9320 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    931c:	231f      	movs	r3, #31
    931e:	e033      	b.n	9388 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    9320:	4b1b      	ldr	r3, [pc, #108]	; (9390 <eeprom_emulator_read_page+0x90>)
    9322:	7a9b      	ldrb	r3, [r3, #10]
    9324:	1dfa      	adds	r2, r7, #7
    9326:	7812      	ldrb	r2, [r2, #0]
    9328:	429a      	cmp	r2, r3
    932a:	d301      	bcc.n	9330 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    932c:	2318      	movs	r3, #24
    932e:	e02b      	b.n	9388 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    9330:	4b17      	ldr	r3, [pc, #92]	; (9390 <eeprom_emulator_read_page+0x90>)
    9332:	22c8      	movs	r2, #200	; 0xc8
    9334:	5c9b      	ldrb	r3, [r3, r2]
    9336:	2b00      	cmp	r3, #0
    9338:	d010      	beq.n	935c <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    933a:	4b15      	ldr	r3, [pc, #84]	; (9390 <eeprom_emulator_read_page+0x90>)
    933c:	2288      	movs	r2, #136	; 0x88
    933e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    9340:	1dfa      	adds	r2, r7, #7
    9342:	7812      	ldrb	r2, [r2, #0]
    9344:	429a      	cmp	r2, r3
    9346:	d109      	bne.n	935c <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    9348:	6839      	ldr	r1, [r7, #0]
    934a:	4b11      	ldr	r3, [pc, #68]	; (9390 <eeprom_emulator_read_page+0x90>)
    934c:	228c      	movs	r2, #140	; 0x8c
    934e:	0008      	movs	r0, r1
    9350:	189b      	adds	r3, r3, r2
    9352:	223c      	movs	r2, #60	; 0x3c
    9354:	0019      	movs	r1, r3
    9356:	4b0f      	ldr	r3, [pc, #60]	; (9394 <eeprom_emulator_read_page+0x94>)
    9358:	4798      	blx	r3
    935a:	e014      	b.n	9386 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
    935c:	1dfb      	adds	r3, r7, #7
    935e:	781b      	ldrb	r3, [r3, #0]
    9360:	4a0b      	ldr	r2, [pc, #44]	; (9390 <eeprom_emulator_read_page+0x90>)
    9362:	18d3      	adds	r3, r2, r3
    9364:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
    9366:	b29b      	uxth	r3, r3
    9368:	2208      	movs	r2, #8
    936a:	18ba      	adds	r2, r7, r2
    936c:	0011      	movs	r1, r2
    936e:	0018      	movs	r0, r3
    9370:	4b09      	ldr	r3, [pc, #36]	; (9398 <eeprom_emulator_read_page+0x98>)
    9372:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    9374:	683a      	ldr	r2, [r7, #0]
    9376:	2308      	movs	r3, #8
    9378:	18fb      	adds	r3, r7, r3
    937a:	0010      	movs	r0, r2
    937c:	3304      	adds	r3, #4
    937e:	223c      	movs	r2, #60	; 0x3c
    9380:	0019      	movs	r1, r3
    9382:	4b04      	ldr	r3, [pc, #16]	; (9394 <eeprom_emulator_read_page+0x94>)
    9384:	4798      	blx	r3
	}

	return STATUS_OK;
    9386:	2300      	movs	r3, #0
}
    9388:	0018      	movs	r0, r3
    938a:	46bd      	mov	sp, r7
    938c:	b012      	add	sp, #72	; 0x48
    938e:	bd80      	pop	{r7, pc}
    9390:	20000238 	.word	0x20000238
    9394:	0001b3e9 	.word	0x0001b3e9
    9398:	00008a81 	.word	0x00008a81

0000939c <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    939c:	b580      	push	{r7, lr}
    939e:	b082      	sub	sp, #8
    93a0:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    93a2:	1dfb      	adds	r3, r7, #7
    93a4:	2200      	movs	r2, #0
    93a6:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    93a8:	4b10      	ldr	r3, [pc, #64]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93aa:	22c8      	movs	r2, #200	; 0xc8
    93ac:	5c9b      	ldrb	r3, [r3, r2]
    93ae:	2201      	movs	r2, #1
    93b0:	4053      	eors	r3, r2
    93b2:	b2db      	uxtb	r3, r3
    93b4:	2b00      	cmp	r3, #0
    93b6:	d001      	beq.n	93bc <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
    93b8:	2300      	movs	r3, #0
    93ba:	e013      	b.n	93e4 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    93bc:	1dbb      	adds	r3, r7, #6
    93be:	4a0b      	ldr	r2, [pc, #44]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93c0:	2188      	movs	r1, #136	; 0x88
    93c2:	5c52      	ldrb	r2, [r2, r1]
    93c4:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    93c6:	1dbb      	adds	r3, r7, #6
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	4a08      	ldr	r2, [pc, #32]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93cc:	18d3      	adds	r3, r2, r3
    93ce:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
    93d0:	b29b      	uxth	r3, r3
    93d2:	0018      	movs	r0, r3
    93d4:	4b06      	ldr	r3, [pc, #24]	; (93f0 <eeprom_emulator_commit_page_buffer+0x54>)
    93d6:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    93d8:	4b04      	ldr	r3, [pc, #16]	; (93ec <eeprom_emulator_commit_page_buffer+0x50>)
    93da:	22c8      	movs	r2, #200	; 0xc8
    93dc:	2100      	movs	r1, #0
    93de:	5499      	strb	r1, [r3, r2]

	return error_code;
    93e0:	1dfb      	adds	r3, r7, #7
    93e2:	781b      	ldrb	r3, [r3, #0]
}
    93e4:	0018      	movs	r0, r3
    93e6:	46bd      	mov	sp, r7
    93e8:	b002      	add	sp, #8
    93ea:	bd80      	pop	{r7, pc}
    93ec:	20000238 	.word	0x20000238
    93f0:	00008a35 	.word	0x00008a35

000093f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    93f4:	b580      	push	{r7, lr}
    93f6:	b082      	sub	sp, #8
    93f8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    93fa:	4b2f      	ldr	r3, [pc, #188]	; (94b8 <Reset_Handler+0xc4>)
    93fc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    93fe:	4b2f      	ldr	r3, [pc, #188]	; (94bc <Reset_Handler+0xc8>)
    9400:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9402:	687a      	ldr	r2, [r7, #4]
    9404:	683b      	ldr	r3, [r7, #0]
    9406:	429a      	cmp	r2, r3
    9408:	d00c      	beq.n	9424 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    940a:	e007      	b.n	941c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    940c:	683b      	ldr	r3, [r7, #0]
    940e:	1d1a      	adds	r2, r3, #4
    9410:	603a      	str	r2, [r7, #0]
    9412:	687a      	ldr	r2, [r7, #4]
    9414:	1d11      	adds	r1, r2, #4
    9416:	6079      	str	r1, [r7, #4]
    9418:	6812      	ldr	r2, [r2, #0]
    941a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    941c:	683a      	ldr	r2, [r7, #0]
    941e:	4b28      	ldr	r3, [pc, #160]	; (94c0 <Reset_Handler+0xcc>)
    9420:	429a      	cmp	r2, r3
    9422:	d3f3      	bcc.n	940c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9424:	4b27      	ldr	r3, [pc, #156]	; (94c4 <Reset_Handler+0xd0>)
    9426:	603b      	str	r3, [r7, #0]
    9428:	e004      	b.n	9434 <Reset_Handler+0x40>
                *pDest++ = 0;
    942a:	683b      	ldr	r3, [r7, #0]
    942c:	1d1a      	adds	r2, r3, #4
    942e:	603a      	str	r2, [r7, #0]
    9430:	2200      	movs	r2, #0
    9432:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    9434:	683a      	ldr	r2, [r7, #0]
    9436:	4b24      	ldr	r3, [pc, #144]	; (94c8 <Reset_Handler+0xd4>)
    9438:	429a      	cmp	r2, r3
    943a:	d3f6      	bcc.n	942a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    943c:	4b23      	ldr	r3, [pc, #140]	; (94cc <Reset_Handler+0xd8>)
    943e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9440:	4b23      	ldr	r3, [pc, #140]	; (94d0 <Reset_Handler+0xdc>)
    9442:	687a      	ldr	r2, [r7, #4]
    9444:	21ff      	movs	r1, #255	; 0xff
    9446:	438a      	bics	r2, r1
    9448:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    944a:	4a22      	ldr	r2, [pc, #136]	; (94d4 <Reset_Handler+0xe0>)
    944c:	2390      	movs	r3, #144	; 0x90
    944e:	005b      	lsls	r3, r3, #1
    9450:	2102      	movs	r1, #2
    9452:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9454:	4a20      	ldr	r2, [pc, #128]	; (94d8 <Reset_Handler+0xe4>)
    9456:	78d3      	ldrb	r3, [r2, #3]
    9458:	2103      	movs	r1, #3
    945a:	438b      	bics	r3, r1
    945c:	1c19      	adds	r1, r3, #0
    945e:	2302      	movs	r3, #2
    9460:	430b      	orrs	r3, r1
    9462:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9464:	4a1c      	ldr	r2, [pc, #112]	; (94d8 <Reset_Handler+0xe4>)
    9466:	78d3      	ldrb	r3, [r2, #3]
    9468:	210c      	movs	r1, #12
    946a:	438b      	bics	r3, r1
    946c:	1c19      	adds	r1, r3, #0
    946e:	2308      	movs	r3, #8
    9470:	430b      	orrs	r3, r1
    9472:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9474:	4a19      	ldr	r2, [pc, #100]	; (94dc <Reset_Handler+0xe8>)
    9476:	7b93      	ldrb	r3, [r2, #14]
    9478:	2130      	movs	r1, #48	; 0x30
    947a:	438b      	bics	r3, r1
    947c:	1c19      	adds	r1, r3, #0
    947e:	2320      	movs	r3, #32
    9480:	430b      	orrs	r3, r1
    9482:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9484:	4a15      	ldr	r2, [pc, #84]	; (94dc <Reset_Handler+0xe8>)
    9486:	7b93      	ldrb	r3, [r2, #14]
    9488:	210c      	movs	r1, #12
    948a:	438b      	bics	r3, r1
    948c:	1c19      	adds	r1, r3, #0
    948e:	2308      	movs	r3, #8
    9490:	430b      	orrs	r3, r1
    9492:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9494:	4a11      	ldr	r2, [pc, #68]	; (94dc <Reset_Handler+0xe8>)
    9496:	7b93      	ldrb	r3, [r2, #14]
    9498:	2103      	movs	r1, #3
    949a:	438b      	bics	r3, r1
    949c:	1c19      	adds	r1, r3, #0
    949e:	2302      	movs	r3, #2
    94a0:	430b      	orrs	r3, r1
    94a2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    94a4:	4a0e      	ldr	r2, [pc, #56]	; (94e0 <Reset_Handler+0xec>)
    94a6:	6853      	ldr	r3, [r2, #4]
    94a8:	2180      	movs	r1, #128	; 0x80
    94aa:	430b      	orrs	r3, r1
    94ac:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    94ae:	4b0d      	ldr	r3, [pc, #52]	; (94e4 <Reset_Handler+0xf0>)
    94b0:	4798      	blx	r3

        /* Branch to main function */
        main();
    94b2:	4b0d      	ldr	r3, [pc, #52]	; (94e8 <Reset_Handler+0xf4>)
    94b4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    94b6:	e7fe      	b.n	94b6 <Reset_Handler+0xc2>
    94b8:	0001bfa0 	.word	0x0001bfa0
    94bc:	20000000 	.word	0x20000000
    94c0:	20000170 	.word	0x20000170
    94c4:	20000170 	.word	0x20000170
    94c8:	20001b00 	.word	0x20001b00
    94cc:	00002000 	.word	0x00002000
    94d0:	e000ed00 	.word	0xe000ed00
    94d4:	41007000 	.word	0x41007000
    94d8:	41005000 	.word	0x41005000
    94dc:	41004800 	.word	0x41004800
    94e0:	41004000 	.word	0x41004000
    94e4:	0001b3a1 	.word	0x0001b3a1
    94e8:	00016639 	.word	0x00016639

000094ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    94ec:	b580      	push	{r7, lr}
    94ee:	af00      	add	r7, sp, #0
        while (1) {
    94f0:	e7fe      	b.n	94f0 <Dummy_Handler+0x4>
	...

000094f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    94f4:	b580      	push	{r7, lr}
    94f6:	b084      	sub	sp, #16
    94f8:	af00      	add	r7, sp, #0
    94fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    94fc:	4b0a      	ldr	r3, [pc, #40]	; (9528 <_sbrk+0x34>)
    94fe:	681b      	ldr	r3, [r3, #0]
    9500:	2b00      	cmp	r3, #0
    9502:	d102      	bne.n	950a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    9504:	4b08      	ldr	r3, [pc, #32]	; (9528 <_sbrk+0x34>)
    9506:	4a09      	ldr	r2, [pc, #36]	; (952c <_sbrk+0x38>)
    9508:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    950a:	4b07      	ldr	r3, [pc, #28]	; (9528 <_sbrk+0x34>)
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    9510:	4b05      	ldr	r3, [pc, #20]	; (9528 <_sbrk+0x34>)
    9512:	681a      	ldr	r2, [r3, #0]
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	18d2      	adds	r2, r2, r3
    9518:	4b03      	ldr	r3, [pc, #12]	; (9528 <_sbrk+0x34>)
    951a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    951c:	68fb      	ldr	r3, [r7, #12]
}
    951e:	0018      	movs	r0, r3
    9520:	46bd      	mov	sp, r7
    9522:	b004      	add	sp, #16
    9524:	bd80      	pop	{r7, pc}
    9526:	46c0      	nop			; (mov r8, r8)
    9528:	20000304 	.word	0x20000304
    952c:	20003b00 	.word	0x20003b00

00009530 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    9530:	b580      	push	{r7, lr}
    9532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    9534:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    9538:	4b02      	ldr	r3, [pc, #8]	; (9544 <NVIC_SystemReset+0x14>)
    953a:	4a03      	ldr	r2, [pc, #12]	; (9548 <NVIC_SystemReset+0x18>)
    953c:	60da      	str	r2, [r3, #12]
    953e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    9542:	e7fe      	b.n	9542 <NVIC_SystemReset+0x12>
    9544:	e000ed00 	.word	0xe000ed00
    9548:	05fa0004 	.word	0x05fa0004

0000954c <system_pinmux_get_group_from_gpio_pin>:
{
    954c:	b580      	push	{r7, lr}
    954e:	b084      	sub	sp, #16
    9550:	af00      	add	r7, sp, #0
    9552:	0002      	movs	r2, r0
    9554:	1dfb      	adds	r3, r7, #7
    9556:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9558:	230f      	movs	r3, #15
    955a:	18fb      	adds	r3, r7, r3
    955c:	1dfa      	adds	r2, r7, #7
    955e:	7812      	ldrb	r2, [r2, #0]
    9560:	09d2      	lsrs	r2, r2, #7
    9562:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9564:	230e      	movs	r3, #14
    9566:	18fb      	adds	r3, r7, r3
    9568:	1dfa      	adds	r2, r7, #7
    956a:	7812      	ldrb	r2, [r2, #0]
    956c:	0952      	lsrs	r2, r2, #5
    956e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9570:	4b0d      	ldr	r3, [pc, #52]	; (95a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9572:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9574:	230f      	movs	r3, #15
    9576:	18fb      	adds	r3, r7, r3
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	2b00      	cmp	r3, #0
    957c:	d10f      	bne.n	959e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    957e:	230f      	movs	r3, #15
    9580:	18fb      	adds	r3, r7, r3
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	009b      	lsls	r3, r3, #2
    9586:	2210      	movs	r2, #16
    9588:	4694      	mov	ip, r2
    958a:	44bc      	add	ip, r7
    958c:	4463      	add	r3, ip
    958e:	3b08      	subs	r3, #8
    9590:	681a      	ldr	r2, [r3, #0]
    9592:	230e      	movs	r3, #14
    9594:	18fb      	adds	r3, r7, r3
    9596:	781b      	ldrb	r3, [r3, #0]
    9598:	01db      	lsls	r3, r3, #7
    959a:	18d3      	adds	r3, r2, r3
    959c:	e000      	b.n	95a0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    959e:	2300      	movs	r3, #0
}
    95a0:	0018      	movs	r0, r3
    95a2:	46bd      	mov	sp, r7
    95a4:	b004      	add	sp, #16
    95a6:	bd80      	pop	{r7, pc}
    95a8:	41004400 	.word	0x41004400

000095ac <adc_is_syncing>:
{
    95ac:	b580      	push	{r7, lr}
    95ae:	b084      	sub	sp, #16
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	681b      	ldr	r3, [r3, #0]
    95b8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    95ba:	68fb      	ldr	r3, [r7, #12]
    95bc:	7e5b      	ldrb	r3, [r3, #25]
    95be:	b2db      	uxtb	r3, r3
    95c0:	b25b      	sxtb	r3, r3
    95c2:	2b00      	cmp	r3, #0
    95c4:	da01      	bge.n	95ca <adc_is_syncing+0x1e>
		return true;
    95c6:	2301      	movs	r3, #1
    95c8:	e000      	b.n	95cc <adc_is_syncing+0x20>
	return false;
    95ca:	2300      	movs	r3, #0
}
    95cc:	0018      	movs	r0, r3
    95ce:	46bd      	mov	sp, r7
    95d0:	b004      	add	sp, #16
    95d2:	bd80      	pop	{r7, pc}

000095d4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    95d4:	b580      	push	{r7, lr}
    95d6:	b086      	sub	sp, #24
    95d8:	af00      	add	r7, sp, #0
    95da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    95dc:	687b      	ldr	r3, [r7, #4]
    95de:	681b      	ldr	r3, [r3, #0]
    95e0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    95e2:	693b      	ldr	r3, [r7, #16]
    95e4:	7e1b      	ldrb	r3, [r3, #24]
    95e6:	b2db      	uxtb	r3, r3
    95e8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    95ea:	2300      	movs	r3, #0
    95ec:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    95ee:	68fb      	ldr	r3, [r7, #12]
    95f0:	2201      	movs	r2, #1
    95f2:	4013      	ands	r3, r2
    95f4:	d003      	beq.n	95fe <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    95f6:	697b      	ldr	r3, [r7, #20]
    95f8:	2201      	movs	r2, #1
    95fa:	4313      	orrs	r3, r2
    95fc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    95fe:	68fb      	ldr	r3, [r7, #12]
    9600:	2204      	movs	r2, #4
    9602:	4013      	ands	r3, r2
    9604:	d003      	beq.n	960e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    9606:	697b      	ldr	r3, [r7, #20]
    9608:	2202      	movs	r2, #2
    960a:	4313      	orrs	r3, r2
    960c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    960e:	68fb      	ldr	r3, [r7, #12]
    9610:	2202      	movs	r2, #2
    9612:	4013      	ands	r3, r2
    9614:	d003      	beq.n	961e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    9616:	697b      	ldr	r3, [r7, #20]
    9618:	2204      	movs	r2, #4
    961a:	4313      	orrs	r3, r2
    961c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    961e:	697b      	ldr	r3, [r7, #20]
}
    9620:	0018      	movs	r0, r3
    9622:	46bd      	mov	sp, r7
    9624:	b006      	add	sp, #24
    9626:	bd80      	pop	{r7, pc}

00009628 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    9628:	b580      	push	{r7, lr}
    962a:	b084      	sub	sp, #16
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
    9630:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	681b      	ldr	r3, [r3, #0]
    9636:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    9638:	2300      	movs	r3, #0
    963a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    963c:	683b      	ldr	r3, [r7, #0]
    963e:	2201      	movs	r2, #1
    9640:	4013      	ands	r3, r2
    9642:	d003      	beq.n	964c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    9644:	68fb      	ldr	r3, [r7, #12]
    9646:	2201      	movs	r2, #1
    9648:	4313      	orrs	r3, r2
    964a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    964c:	683b      	ldr	r3, [r7, #0]
    964e:	2202      	movs	r2, #2
    9650:	4013      	ands	r3, r2
    9652:	d003      	beq.n	965c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    9654:	68fb      	ldr	r3, [r7, #12]
    9656:	2204      	movs	r2, #4
    9658:	4313      	orrs	r3, r2
    965a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    965c:	683b      	ldr	r3, [r7, #0]
    965e:	2204      	movs	r2, #4
    9660:	4013      	ands	r3, r2
    9662:	d003      	beq.n	966c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	2202      	movs	r2, #2
    9668:	4313      	orrs	r3, r2
    966a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    966c:	68fb      	ldr	r3, [r7, #12]
    966e:	b2da      	uxtb	r2, r3
    9670:	68bb      	ldr	r3, [r7, #8]
    9672:	761a      	strb	r2, [r3, #24]
}
    9674:	46c0      	nop			; (mov r8, r8)
    9676:	46bd      	mov	sp, r7
    9678:	b004      	add	sp, #16
    967a:	bd80      	pop	{r7, pc}

0000967c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    967c:	b580      	push	{r7, lr}
    967e:	b084      	sub	sp, #16
    9680:	af00      	add	r7, sp, #0
    9682:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	681b      	ldr	r3, [r3, #0]
    9688:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	687b      	ldr	r3, [r7, #4]
    968e:	0018      	movs	r0, r3
    9690:	4b0b      	ldr	r3, [pc, #44]	; (96c0 <adc_enable+0x44>)
    9692:	4798      	blx	r3
    9694:	1e03      	subs	r3, r0, #0
    9696:	d1f9      	bne.n	968c <adc_enable+0x10>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    9698:	68fb      	ldr	r3, [r7, #12]
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	b2db      	uxtb	r3, r3
    969e:	2202      	movs	r2, #2
    96a0:	4313      	orrs	r3, r2
    96a2:	b2da      	uxtb	r2, r3
    96a4:	68fb      	ldr	r3, [r7, #12]
    96a6:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    96a8:	46c0      	nop			; (mov r8, r8)
    96aa:	687b      	ldr	r3, [r7, #4]
    96ac:	0018      	movs	r0, r3
    96ae:	4b04      	ldr	r3, [pc, #16]	; (96c0 <adc_enable+0x44>)
    96b0:	4798      	blx	r3
    96b2:	1e03      	subs	r3, r0, #0
    96b4:	d1f9      	bne.n	96aa <adc_enable+0x2e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    96b6:	2300      	movs	r3, #0
}
    96b8:	0018      	movs	r0, r3
    96ba:	46bd      	mov	sp, r7
    96bc:	b004      	add	sp, #16
    96be:	bd80      	pop	{r7, pc}
    96c0:	000095ad 	.word	0x000095ad

000096c4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    96c4:	b580      	push	{r7, lr}
    96c6:	b084      	sub	sp, #16
    96c8:	af00      	add	r7, sp, #0
    96ca:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    96cc:	687b      	ldr	r3, [r7, #4]
    96ce:	681b      	ldr	r3, [r3, #0]
    96d0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    96d2:	46c0      	nop			; (mov r8, r8)
    96d4:	687b      	ldr	r3, [r7, #4]
    96d6:	0018      	movs	r0, r3
    96d8:	4b0b      	ldr	r3, [pc, #44]	; (9708 <adc_start_conversion+0x44>)
    96da:	4798      	blx	r3
    96dc:	1e03      	subs	r3, r0, #0
    96de:	d1f9      	bne.n	96d4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    96e0:	68fb      	ldr	r3, [r7, #12]
    96e2:	7b1b      	ldrb	r3, [r3, #12]
    96e4:	b2db      	uxtb	r3, r3
    96e6:	2202      	movs	r2, #2
    96e8:	4313      	orrs	r3, r2
    96ea:	b2da      	uxtb	r2, r3
    96ec:	68fb      	ldr	r3, [r7, #12]
    96ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    96f0:	46c0      	nop			; (mov r8, r8)
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	0018      	movs	r0, r3
    96f6:	4b04      	ldr	r3, [pc, #16]	; (9708 <adc_start_conversion+0x44>)
    96f8:	4798      	blx	r3
    96fa:	1e03      	subs	r3, r0, #0
    96fc:	d1f9      	bne.n	96f2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    96fe:	46c0      	nop			; (mov r8, r8)
    9700:	46bd      	mov	sp, r7
    9702:	b004      	add	sp, #16
    9704:	bd80      	pop	{r7, pc}
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	000095ad 	.word	0x000095ad

0000970c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    970c:	b580      	push	{r7, lr}
    970e:	b084      	sub	sp, #16
    9710:	af00      	add	r7, sp, #0
    9712:	6078      	str	r0, [r7, #4]
    9714:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	0018      	movs	r0, r3
    971a:	4b18      	ldr	r3, [pc, #96]	; (977c <adc_read+0x70>)
    971c:	4798      	blx	r3
    971e:	0002      	movs	r2, r0
    9720:	2301      	movs	r3, #1
    9722:	4013      	ands	r3, r2
    9724:	d101      	bne.n	972a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    9726:	2305      	movs	r3, #5
    9728:	e023      	b.n	9772 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    972a:	687b      	ldr	r3, [r7, #4]
    972c:	681b      	ldr	r3, [r3, #0]
    972e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    9730:	46c0      	nop			; (mov r8, r8)
    9732:	687b      	ldr	r3, [r7, #4]
    9734:	0018      	movs	r0, r3
    9736:	4b12      	ldr	r3, [pc, #72]	; (9780 <adc_read+0x74>)
    9738:	4798      	blx	r3
    973a:	1e03      	subs	r3, r0, #0
    973c:	d1f9      	bne.n	9732 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    973e:	68fb      	ldr	r3, [r7, #12]
    9740:	8b5b      	ldrh	r3, [r3, #26]
    9742:	b29a      	uxth	r2, r3
    9744:	683b      	ldr	r3, [r7, #0]
    9746:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    9748:	687b      	ldr	r3, [r7, #4]
    974a:	2101      	movs	r1, #1
    974c:	0018      	movs	r0, r3
    974e:	4b0d      	ldr	r3, [pc, #52]	; (9784 <adc_read+0x78>)
    9750:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    9752:	687b      	ldr	r3, [r7, #4]
    9754:	0018      	movs	r0, r3
    9756:	4b09      	ldr	r3, [pc, #36]	; (977c <adc_read+0x70>)
    9758:	4798      	blx	r3
    975a:	0002      	movs	r2, r0
    975c:	2304      	movs	r3, #4
    975e:	4013      	ands	r3, r2
    9760:	d006      	beq.n	9770 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    9762:	687b      	ldr	r3, [r7, #4]
    9764:	2104      	movs	r1, #4
    9766:	0018      	movs	r0, r3
    9768:	4b06      	ldr	r3, [pc, #24]	; (9784 <adc_read+0x78>)
    976a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    976c:	231e      	movs	r3, #30
    976e:	e000      	b.n	9772 <adc_read+0x66>
	}

	return STATUS_OK;
    9770:	2300      	movs	r3, #0
}
    9772:	0018      	movs	r0, r3
    9774:	46bd      	mov	sp, r7
    9776:	b004      	add	sp, #16
    9778:	bd80      	pop	{r7, pc}
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	000095d5 	.word	0x000095d5
    9780:	000095ad 	.word	0x000095ad
    9784:	00009629 	.word	0x00009629

00009788 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9788:	b580      	push	{r7, lr}
    978a:	b082      	sub	sp, #8
    978c:	af00      	add	r7, sp, #0
    978e:	0002      	movs	r2, r0
    9790:	1dfb      	adds	r3, r7, #7
    9792:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9794:	1dfb      	adds	r3, r7, #7
    9796:	781b      	ldrb	r3, [r3, #0]
    9798:	0018      	movs	r0, r3
    979a:	4b03      	ldr	r3, [pc, #12]	; (97a8 <port_get_group_from_gpio_pin+0x20>)
    979c:	4798      	blx	r3
    979e:	0003      	movs	r3, r0
}
    97a0:	0018      	movs	r0, r3
    97a2:	46bd      	mov	sp, r7
    97a4:	b002      	add	sp, #8
    97a6:	bd80      	pop	{r7, pc}
    97a8:	0000954d 	.word	0x0000954d

000097ac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    97ac:	b580      	push	{r7, lr}
    97ae:	b082      	sub	sp, #8
    97b0:	af00      	add	r7, sp, #0
    97b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    97b4:	687b      	ldr	r3, [r7, #4]
    97b6:	2200      	movs	r2, #0
    97b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    97ba:	687b      	ldr	r3, [r7, #4]
    97bc:	2201      	movs	r2, #1
    97be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    97c0:	687b      	ldr	r3, [r7, #4]
    97c2:	2200      	movs	r2, #0
    97c4:	709a      	strb	r2, [r3, #2]
}
    97c6:	46c0      	nop			; (mov r8, r8)
    97c8:	46bd      	mov	sp, r7
    97ca:	b002      	add	sp, #8
    97cc:	bd80      	pop	{r7, pc}
	...

000097d0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    97d0:	b580      	push	{r7, lr}
    97d2:	b084      	sub	sp, #16
    97d4:	af00      	add	r7, sp, #0
    97d6:	0002      	movs	r2, r0
    97d8:	1dfb      	adds	r3, r7, #7
    97da:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    97dc:	1dfb      	adds	r3, r7, #7
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	0018      	movs	r0, r3
    97e2:	4b0b      	ldr	r3, [pc, #44]	; (9810 <port_pin_get_input_level+0x40>)
    97e4:	4798      	blx	r3
    97e6:	0003      	movs	r3, r0
    97e8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    97ea:	1dfb      	adds	r3, r7, #7
    97ec:	781b      	ldrb	r3, [r3, #0]
    97ee:	221f      	movs	r2, #31
    97f0:	4013      	ands	r3, r2
    97f2:	2201      	movs	r2, #1
    97f4:	409a      	lsls	r2, r3
    97f6:	0013      	movs	r3, r2
    97f8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    97fa:	68fb      	ldr	r3, [r7, #12]
    97fc:	6a1b      	ldr	r3, [r3, #32]
    97fe:	68ba      	ldr	r2, [r7, #8]
    9800:	4013      	ands	r3, r2
    9802:	1e5a      	subs	r2, r3, #1
    9804:	4193      	sbcs	r3, r2
    9806:	b2db      	uxtb	r3, r3
}
    9808:	0018      	movs	r0, r3
    980a:	46bd      	mov	sp, r7
    980c:	b004      	add	sp, #16
    980e:	bd80      	pop	{r7, pc}
    9810:	00009789 	.word	0x00009789

00009814 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9814:	b580      	push	{r7, lr}
    9816:	b084      	sub	sp, #16
    9818:	af00      	add	r7, sp, #0
    981a:	0002      	movs	r2, r0
    981c:	1dfb      	adds	r3, r7, #7
    981e:	701a      	strb	r2, [r3, #0]
    9820:	1dbb      	adds	r3, r7, #6
    9822:	1c0a      	adds	r2, r1, #0
    9824:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9826:	1dfb      	adds	r3, r7, #7
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	0018      	movs	r0, r3
    982c:	4b0d      	ldr	r3, [pc, #52]	; (9864 <port_pin_set_output_level+0x50>)
    982e:	4798      	blx	r3
    9830:	0003      	movs	r3, r0
    9832:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9834:	1dfb      	adds	r3, r7, #7
    9836:	781b      	ldrb	r3, [r3, #0]
    9838:	221f      	movs	r2, #31
    983a:	4013      	ands	r3, r2
    983c:	2201      	movs	r2, #1
    983e:	409a      	lsls	r2, r3
    9840:	0013      	movs	r3, r2
    9842:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9844:	1dbb      	adds	r3, r7, #6
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	2b00      	cmp	r3, #0
    984a:	d003      	beq.n	9854 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    984c:	68fb      	ldr	r3, [r7, #12]
    984e:	68ba      	ldr	r2, [r7, #8]
    9850:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9852:	e002      	b.n	985a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    9854:	68fb      	ldr	r3, [r7, #12]
    9856:	68ba      	ldr	r2, [r7, #8]
    9858:	615a      	str	r2, [r3, #20]
}
    985a:	46c0      	nop			; (mov r8, r8)
    985c:	46bd      	mov	sp, r7
    985e:	b004      	add	sp, #16
    9860:	bd80      	pop	{r7, pc}
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	00009789 	.word	0x00009789

00009868 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    9868:	b580      	push	{r7, lr}
    986a:	b082      	sub	sp, #8
    986c:	af00      	add	r7, sp, #0
    986e:	0002      	movs	r2, r0
    9870:	1dfb      	adds	r3, r7, #7
    9872:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9874:	4b06      	ldr	r3, [pc, #24]	; (9890 <system_interrupt_enable+0x28>)
    9876:	1dfa      	adds	r2, r7, #7
    9878:	7812      	ldrb	r2, [r2, #0]
    987a:	0011      	movs	r1, r2
    987c:	221f      	movs	r2, #31
    987e:	400a      	ands	r2, r1
    9880:	2101      	movs	r1, #1
    9882:	4091      	lsls	r1, r2
    9884:	000a      	movs	r2, r1
    9886:	601a      	str	r2, [r3, #0]
}
    9888:	46c0      	nop			; (mov r8, r8)
    988a:	46bd      	mov	sp, r7
    988c:	b002      	add	sp, #8
    988e:	bd80      	pop	{r7, pc}
    9890:	e000e100 	.word	0xe000e100

00009894 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    9894:	b580      	push	{r7, lr}
    9896:	b082      	sub	sp, #8
    9898:	af00      	add	r7, sp, #0
    989a:	0002      	movs	r2, r0
    989c:	1dfb      	adds	r3, r7, #7
    989e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    98a0:	4a07      	ldr	r2, [pc, #28]	; (98c0 <system_interrupt_disable+0x2c>)
    98a2:	1dfb      	adds	r3, r7, #7
    98a4:	781b      	ldrb	r3, [r3, #0]
    98a6:	0019      	movs	r1, r3
    98a8:	231f      	movs	r3, #31
    98aa:	400b      	ands	r3, r1
    98ac:	2101      	movs	r1, #1
    98ae:	4099      	lsls	r1, r3
    98b0:	000b      	movs	r3, r1
    98b2:	0019      	movs	r1, r3
    98b4:	2380      	movs	r3, #128	; 0x80
    98b6:	50d1      	str	r1, [r2, r3]
}
    98b8:	46c0      	nop			; (mov r8, r8)
    98ba:	46bd      	mov	sp, r7
    98bc:	b002      	add	sp, #8
    98be:	bd80      	pop	{r7, pc}
    98c0:	e000e100 	.word	0xe000e100

000098c4 <i2c_master_is_syncing>:
{
    98c4:	b580      	push	{r7, lr}
    98c6:	b084      	sub	sp, #16
    98c8:	af00      	add	r7, sp, #0
    98ca:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    98cc:	687b      	ldr	r3, [r7, #4]
    98ce:	681b      	ldr	r3, [r3, #0]
    98d0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    98d2:	68fb      	ldr	r3, [r7, #12]
    98d4:	69db      	ldr	r3, [r3, #28]
    98d6:	2207      	movs	r2, #7
    98d8:	4013      	ands	r3, r2
    98da:	1e5a      	subs	r2, r3, #1
    98dc:	4193      	sbcs	r3, r2
    98de:	b2db      	uxtb	r3, r3
}
    98e0:	0018      	movs	r0, r3
    98e2:	46bd      	mov	sp, r7
    98e4:	b004      	add	sp, #16
    98e6:	bd80      	pop	{r7, pc}

000098e8 <_i2c_master_wait_for_sync>:
{
    98e8:	b580      	push	{r7, lr}
    98ea:	b082      	sub	sp, #8
    98ec:	af00      	add	r7, sp, #0
    98ee:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    98f0:	46c0      	nop			; (mov r8, r8)
    98f2:	687b      	ldr	r3, [r7, #4]
    98f4:	0018      	movs	r0, r3
    98f6:	4b04      	ldr	r3, [pc, #16]	; (9908 <_i2c_master_wait_for_sync+0x20>)
    98f8:	4798      	blx	r3
    98fa:	1e03      	subs	r3, r0, #0
    98fc:	d1f9      	bne.n	98f2 <_i2c_master_wait_for_sync+0xa>
}
    98fe:	46c0      	nop			; (mov r8, r8)
    9900:	46bd      	mov	sp, r7
    9902:	b002      	add	sp, #8
    9904:	bd80      	pop	{r7, pc}
    9906:	46c0      	nop			; (mov r8, r8)
    9908:	000098c5 	.word	0x000098c5

0000990c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    990c:	b580      	push	{r7, lr}
    990e:	b082      	sub	sp, #8
    9910:	af00      	add	r7, sp, #0
    9912:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	2264      	movs	r2, #100	; 0x64
    9918:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    991a:	687b      	ldr	r3, [r7, #4]
    991c:	4a1b      	ldr	r2, [pc, #108]	; (998c <i2c_master_get_config_defaults+0x80>)
    991e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	2200      	movs	r2, #0
    9924:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	2200      	movs	r2, #0
    992a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    992c:	687b      	ldr	r3, [r7, #4]
    992e:	2200      	movs	r2, #0
    9930:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    9932:	687b      	ldr	r3, [r7, #4]
    9934:	2280      	movs	r2, #128	; 0x80
    9936:	0392      	lsls	r2, r2, #14
    9938:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	2201      	movs	r2, #1
    993e:	4252      	negs	r2, r2
    9940:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	2201      	movs	r2, #1
    9946:	4252      	negs	r2, r2
    9948:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	2200      	movs	r2, #0
    994e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	2200      	movs	r2, #0
    9954:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	2224      	movs	r2, #36	; 0x24
    995a:	2100      	movs	r1, #0
    995c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    995e:	687b      	ldr	r3, [r7, #4]
    9960:	2200      	movs	r2, #0
    9962:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    9964:	687b      	ldr	r3, [r7, #4]
    9966:	222c      	movs	r2, #44	; 0x2c
    9968:	2100      	movs	r1, #0
    996a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	222d      	movs	r2, #45	; 0x2d
    9970:	2100      	movs	r1, #0
    9972:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    9974:	687b      	ldr	r3, [r7, #4]
    9976:	222e      	movs	r2, #46	; 0x2e
    9978:	2100      	movs	r1, #0
    997a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    997c:	687b      	ldr	r3, [r7, #4]
    997e:	22d7      	movs	r2, #215	; 0xd7
    9980:	861a      	strh	r2, [r3, #48]	; 0x30
}
    9982:	46c0      	nop			; (mov r8, r8)
    9984:	46bd      	mov	sp, r7
    9986:	b002      	add	sp, #8
    9988:	bd80      	pop	{r7, pc}
    998a:	46c0      	nop			; (mov r8, r8)
    998c:	00000d48 	.word	0x00000d48

00009990 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    9990:	b580      	push	{r7, lr}
    9992:	b084      	sub	sp, #16
    9994:	af00      	add	r7, sp, #0
    9996:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9998:	687b      	ldr	r3, [r7, #4]
    999a:	681b      	ldr	r3, [r3, #0]
    999c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    999e:	2300      	movs	r3, #0
    99a0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    99a2:	687b      	ldr	r3, [r7, #4]
    99a4:	0018      	movs	r0, r3
    99a6:	4b14      	ldr	r3, [pc, #80]	; (99f8 <i2c_master_enable+0x68>)
    99a8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    99aa:	68bb      	ldr	r3, [r7, #8]
    99ac:	681b      	ldr	r3, [r3, #0]
    99ae:	2202      	movs	r2, #2
    99b0:	431a      	orrs	r2, r3
    99b2:	68bb      	ldr	r3, [r7, #8]
    99b4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    99b6:	687b      	ldr	r3, [r7, #4]
    99b8:	681b      	ldr	r3, [r3, #0]
    99ba:	0018      	movs	r0, r3
    99bc:	4b0f      	ldr	r3, [pc, #60]	; (99fc <i2c_master_enable+0x6c>)
    99be:	4798      	blx	r3
    99c0:	0003      	movs	r3, r0
    99c2:	0018      	movs	r0, r3
    99c4:	4b0e      	ldr	r3, [pc, #56]	; (9a00 <i2c_master_enable+0x70>)
    99c6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    99c8:	e00c      	b.n	99e4 <i2c_master_enable+0x54>
		timeout_counter++;
    99ca:	68fb      	ldr	r3, [r7, #12]
    99cc:	3301      	adds	r3, #1
    99ce:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	88db      	ldrh	r3, [r3, #6]
    99d4:	001a      	movs	r2, r3
    99d6:	68fb      	ldr	r3, [r7, #12]
    99d8:	429a      	cmp	r2, r3
    99da:	d803      	bhi.n	99e4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    99dc:	68bb      	ldr	r3, [r7, #8]
    99de:	2210      	movs	r2, #16
    99e0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    99e2:	e006      	b.n	99f2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    99e4:	68bb      	ldr	r3, [r7, #8]
    99e6:	8b5b      	ldrh	r3, [r3, #26]
    99e8:	b29b      	uxth	r3, r3
    99ea:	001a      	movs	r2, r3
    99ec:	2310      	movs	r3, #16
    99ee:	4013      	ands	r3, r2
    99f0:	d0eb      	beq.n	99ca <i2c_master_enable+0x3a>
		}
	}
}
    99f2:	46bd      	mov	sp, r7
    99f4:	b004      	add	sp, #16
    99f6:	bd80      	pop	{r7, pc}
    99f8:	000098e9 	.word	0x000098e9
    99fc:	00007ad1 	.word	0x00007ad1
    9a00:	00009869 	.word	0x00009869

00009a04 <i2c_slave_is_syncing>:
{
    9a04:	b580      	push	{r7, lr}
    9a06:	b084      	sub	sp, #16
    9a08:	af00      	add	r7, sp, #0
    9a0a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9a0c:	687b      	ldr	r3, [r7, #4]
    9a0e:	681b      	ldr	r3, [r3, #0]
    9a10:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    9a12:	68fb      	ldr	r3, [r7, #12]
    9a14:	69db      	ldr	r3, [r3, #28]
    9a16:	2203      	movs	r2, #3
    9a18:	4013      	ands	r3, r2
    9a1a:	1e5a      	subs	r2, r3, #1
    9a1c:	4193      	sbcs	r3, r2
    9a1e:	b2db      	uxtb	r3, r3
}
    9a20:	0018      	movs	r0, r3
    9a22:	46bd      	mov	sp, r7
    9a24:	b004      	add	sp, #16
    9a26:	bd80      	pop	{r7, pc}

00009a28 <_i2c_slave_wait_for_sync>:
{
    9a28:	b580      	push	{r7, lr}
    9a2a:	b082      	sub	sp, #8
    9a2c:	af00      	add	r7, sp, #0
    9a2e:	6078      	str	r0, [r7, #4]
	while (i2c_slave_is_syncing(module)) {
    9a30:	46c0      	nop			; (mov r8, r8)
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	0018      	movs	r0, r3
    9a36:	4b04      	ldr	r3, [pc, #16]	; (9a48 <_i2c_slave_wait_for_sync+0x20>)
    9a38:	4798      	blx	r3
    9a3a:	1e03      	subs	r3, r0, #0
    9a3c:	d1f9      	bne.n	9a32 <_i2c_slave_wait_for_sync+0xa>
}
    9a3e:	46c0      	nop			; (mov r8, r8)
    9a40:	46bd      	mov	sp, r7
    9a42:	b002      	add	sp, #8
    9a44:	bd80      	pop	{r7, pc}
    9a46:	46c0      	nop			; (mov r8, r8)
    9a48:	00009a05 	.word	0x00009a05

00009a4c <i2c_slave_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initialized
 */
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b082      	sub	sp, #8
    9a50:	af00      	add	r7, sp, #0
    9a52:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	2200      	movs	r2, #0
    9a58:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	2280      	movs	r2, #128	; 0x80
    9a5e:	0392      	lsls	r2, r2, #14
    9a60:	605a      	str	r2, [r3, #4]
	config->buffer_timeout = 65535;
    9a62:	687b      	ldr	r3, [r7, #4]
    9a64:	2201      	movs	r2, #1
    9a66:	4252      	negs	r2, r2
    9a68:	811a      	strh	r2, [r3, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    9a6a:	687b      	ldr	r3, [r7, #4]
    9a6c:	2200      	movs	r2, #0
    9a6e:	815a      	strh	r2, [r3, #10]
	config->address = 0;
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	2200      	movs	r2, #0
    9a74:	819a      	strh	r2, [r3, #12]
	config->address_mask = 0;
    9a76:	687b      	ldr	r3, [r7, #4]
    9a78:	2200      	movs	r2, #0
    9a7a:	81da      	strh	r2, [r3, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	2200      	movs	r2, #0
    9a80:	741a      	strb	r2, [r3, #16]
#endif
	config->enable_general_call_address = false;
    9a82:	687b      	ldr	r3, [r7, #4]
    9a84:	2200      	movs	r2, #0
    9a86:	745a      	strb	r2, [r3, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	2200      	movs	r2, #0
    9a8c:	615a      	str	r2, [r3, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	2200      	movs	r2, #0
    9a92:	761a      	strb	r2, [r3, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	2200      	movs	r2, #0
    9a98:	765a      	strb	r2, [r3, #25]
	config->run_in_standby = false;
    9a9a:	687b      	ldr	r3, [r7, #4]
    9a9c:	2200      	movs	r2, #0
    9a9e:	769a      	strb	r2, [r3, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9aa0:	687b      	ldr	r3, [r7, #4]
    9aa2:	2200      	movs	r2, #0
    9aa4:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9aa6:	687b      	ldr	r3, [r7, #4]
    9aa8:	2200      	movs	r2, #0
    9aaa:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	2224      	movs	r2, #36	; 0x24
    9ab0:	2100      	movs	r1, #0
    9ab2:	5499      	strb	r1, [r3, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    9ab4:	687b      	ldr	r3, [r7, #4]
    9ab6:	2225      	movs	r2, #37	; 0x25
    9ab8:	2100      	movs	r1, #0
    9aba:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	2226      	movs	r2, #38	; 0x26
    9ac0:	2100      	movs	r1, #0
    9ac2:	5499      	strb	r1, [r3, r2]
#endif
}
    9ac4:	46c0      	nop			; (mov r8, r8)
    9ac6:	46bd      	mov	sp, r7
    9ac8:	b002      	add	sp, #8
    9aca:	bd80      	pop	{r7, pc}

00009acc <i2c_slave_enable>:
 *
 * \param[in]  module Pointer to the software module struct
 */
static inline void i2c_slave_enable(
		const struct i2c_slave_module *const module)
{
    9acc:	b580      	push	{r7, lr}
    9ace:	b084      	sub	sp, #16
    9ad0:	af00      	add	r7, sp, #0
    9ad2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9ad4:	687b      	ldr	r3, [r7, #4]
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	60fb      	str	r3, [r7, #12]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9ada:	687b      	ldr	r3, [r7, #4]
    9adc:	681b      	ldr	r3, [r3, #0]
    9ade:	0018      	movs	r0, r3
    9ae0:	4b09      	ldr	r3, [pc, #36]	; (9b08 <i2c_slave_enable+0x3c>)
    9ae2:	4798      	blx	r3
    9ae4:	0003      	movs	r3, r0
    9ae6:	0018      	movs	r0, r3
    9ae8:	4b08      	ldr	r3, [pc, #32]	; (9b0c <i2c_slave_enable+0x40>)
    9aea:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
    9aec:	687b      	ldr	r3, [r7, #4]
    9aee:	0018      	movs	r0, r3
    9af0:	4b07      	ldr	r3, [pc, #28]	; (9b10 <i2c_slave_enable+0x44>)
    9af2:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    9af4:	68fb      	ldr	r3, [r7, #12]
    9af6:	681b      	ldr	r3, [r3, #0]
    9af8:	2202      	movs	r2, #2
    9afa:	431a      	orrs	r2, r3
    9afc:	68fb      	ldr	r3, [r7, #12]
    9afe:	601a      	str	r2, [r3, #0]
}
    9b00:	46c0      	nop			; (mov r8, r8)
    9b02:	46bd      	mov	sp, r7
    9b04:	b004      	add	sp, #16
    9b06:	bd80      	pop	{r7, pc}
    9b08:	00007ad1 	.word	0x00007ad1
    9b0c:	00009869 	.word	0x00009869
    9b10:	00009a29 	.word	0x00009a29

00009b14 <i2c_slave_enable_callback>:
 * \param[in]      callback_type  Callback type to enable
 */
static inline void i2c_slave_enable_callback(
		struct i2c_slave_module *const module,
		enum i2c_slave_callback callback_type)
{
    9b14:	b580      	push	{r7, lr}
    9b16:	b084      	sub	sp, #16
    9b18:	af00      	add	r7, sp, #0
    9b1a:	6078      	str	r0, [r7, #4]
    9b1c:	000a      	movs	r2, r1
    9b1e:	1cfb      	adds	r3, r7, #3
    9b20:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	2225      	movs	r2, #37	; 0x25
    9b26:	5c9b      	ldrb	r3, [r3, r2]
    9b28:	b2db      	uxtb	r3, r3
    9b2a:	b25a      	sxtb	r2, r3
    9b2c:	1cfb      	adds	r3, r7, #3
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	2101      	movs	r1, #1
    9b32:	4099      	lsls	r1, r3
    9b34:	000b      	movs	r3, r1
    9b36:	b25b      	sxtb	r3, r3
    9b38:	4313      	orrs	r3, r2
    9b3a:	b25b      	sxtb	r3, r3
    9b3c:	b2d9      	uxtb	r1, r3
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	2225      	movs	r2, #37	; 0x25
    9b42:	5499      	strb	r1, [r3, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    9b44:	687b      	ldr	r3, [r7, #4]
    9b46:	681b      	ldr	r3, [r3, #0]
    9b48:	60fb      	str	r3, [r7, #12]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
    9b4a:	1cfb      	adds	r3, r7, #3
    9b4c:	781b      	ldrb	r3, [r3, #0]
    9b4e:	2b02      	cmp	r3, #2
    9b50:	d003      	beq.n	9b5a <i2c_slave_enable_callback+0x46>
    9b52:	1cfb      	adds	r3, r7, #3
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	2b03      	cmp	r3, #3
    9b58:	d102      	bne.n	9b60 <i2c_slave_enable_callback+0x4c>
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    9b5a:	68fb      	ldr	r3, [r7, #12]
    9b5c:	2202      	movs	r2, #2
    9b5e:	759a      	strb	r2, [r3, #22]
	}
}
    9b60:	46c0      	nop			; (mov r8, r8)
    9b62:	46bd      	mov	sp, r7
    9b64:	b004      	add	sp, #16
    9b66:	bd80      	pop	{r7, pc}

00009b68 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    9b68:	b580      	push	{r7, lr}
    9b6a:	b084      	sub	sp, #16
    9b6c:	af00      	add	r7, sp, #0
    9b6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9b70:	687b      	ldr	r3, [r7, #4]
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    9b76:	68fb      	ldr	r3, [r7, #12]
    9b78:	69db      	ldr	r3, [r3, #28]
    9b7a:	1e5a      	subs	r2, r3, #1
    9b7c:	4193      	sbcs	r3, r2
    9b7e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    9b80:	0018      	movs	r0, r3
    9b82:	46bd      	mov	sp, r7
    9b84:	b004      	add	sp, #16
    9b86:	bd80      	pop	{r7, pc}

00009b88 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    9b88:	b580      	push	{r7, lr}
    9b8a:	b082      	sub	sp, #8
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	2201      	movs	r2, #1
    9b94:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9b96:	687b      	ldr	r3, [r7, #4]
    9b98:	2200      	movs	r2, #0
    9b9a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9b9c:	687b      	ldr	r3, [r7, #4]
    9b9e:	2200      	movs	r2, #0
    9ba0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	22c0      	movs	r2, #192	; 0xc0
    9ba6:	0392      	lsls	r2, r2, #14
    9ba8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	2200      	movs	r2, #0
    9bae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    9bb0:	687b      	ldr	r3, [r7, #4]
    9bb2:	2200      	movs	r2, #0
    9bb4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	2201      	movs	r2, #1
    9bba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    9bbc:	687b      	ldr	r3, [r7, #4]
    9bbe:	2201      	movs	r2, #1
    9bc0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	2200      	movs	r2, #0
    9bc6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	2224      	movs	r2, #36	; 0x24
    9bcc:	2100      	movs	r1, #0
    9bce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    9bd0:	687b      	ldr	r3, [r7, #4]
    9bd2:	3318      	adds	r3, #24
    9bd4:	220c      	movs	r2, #12
    9bd6:	2100      	movs	r1, #0
    9bd8:	0018      	movs	r0, r3
    9bda:	4b0a      	ldr	r3, [pc, #40]	; (9c04 <spi_get_config_defaults+0x7c>)
    9bdc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    9bde:	687b      	ldr	r3, [r7, #4]
    9be0:	4a09      	ldr	r2, [pc, #36]	; (9c08 <spi_get_config_defaults+0x80>)
    9be2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9be4:	687b      	ldr	r3, [r7, #4]
    9be6:	2200      	movs	r2, #0
    9be8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	2200      	movs	r2, #0
    9bee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	2200      	movs	r2, #0
    9bf4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	2200      	movs	r2, #0
    9bfa:	635a      	str	r2, [r3, #52]	; 0x34

};
    9bfc:	46c0      	nop			; (mov r8, r8)
    9bfe:	46bd      	mov	sp, r7
    9c00:	b002      	add	sp, #8
    9c02:	bd80      	pop	{r7, pc}
    9c04:	0001b3fb 	.word	0x0001b3fb
    9c08:	000186a0 	.word	0x000186a0

00009c0c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    9c0c:	b580      	push	{r7, lr}
    9c0e:	b084      	sub	sp, #16
    9c10:	af00      	add	r7, sp, #0
    9c12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	681b      	ldr	r3, [r3, #0]
    9c18:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	681b      	ldr	r3, [r3, #0]
    9c1e:	0018      	movs	r0, r3
    9c20:	4b0b      	ldr	r3, [pc, #44]	; (9c50 <spi_enable+0x44>)
    9c22:	4798      	blx	r3
    9c24:	0003      	movs	r3, r0
    9c26:	0018      	movs	r0, r3
    9c28:	4b0a      	ldr	r3, [pc, #40]	; (9c54 <spi_enable+0x48>)
    9c2a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    9c2c:	46c0      	nop			; (mov r8, r8)
    9c2e:	687b      	ldr	r3, [r7, #4]
    9c30:	0018      	movs	r0, r3
    9c32:	4b09      	ldr	r3, [pc, #36]	; (9c58 <spi_enable+0x4c>)
    9c34:	4798      	blx	r3
    9c36:	1e03      	subs	r3, r0, #0
    9c38:	d1f9      	bne.n	9c2e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	681b      	ldr	r3, [r3, #0]
    9c3e:	2202      	movs	r2, #2
    9c40:	431a      	orrs	r2, r3
    9c42:	68fb      	ldr	r3, [r7, #12]
    9c44:	601a      	str	r2, [r3, #0]
}
    9c46:	46c0      	nop			; (mov r8, r8)
    9c48:	46bd      	mov	sp, r7
    9c4a:	b004      	add	sp, #16
    9c4c:	bd80      	pop	{r7, pc}
    9c4e:	46c0      	nop			; (mov r8, r8)
    9c50:	00007ad1 	.word	0x00007ad1
    9c54:	00009869 	.word	0x00009869
    9c58:	00009b69 	.word	0x00009b69

00009c5c <usart_is_syncing>:
{
    9c5c:	b580      	push	{r7, lr}
    9c5e:	b084      	sub	sp, #16
    9c60:	af00      	add	r7, sp, #0
    9c62:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    9c64:	687b      	ldr	r3, [r7, #4]
    9c66:	681b      	ldr	r3, [r3, #0]
    9c68:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    9c6a:	68fb      	ldr	r3, [r7, #12]
    9c6c:	69db      	ldr	r3, [r3, #28]
    9c6e:	1e5a      	subs	r2, r3, #1
    9c70:	4193      	sbcs	r3, r2
    9c72:	b2db      	uxtb	r3, r3
}
    9c74:	0018      	movs	r0, r3
    9c76:	46bd      	mov	sp, r7
    9c78:	b004      	add	sp, #16
    9c7a:	bd80      	pop	{r7, pc}

00009c7c <_usart_wait_for_sync>:
{
    9c7c:	b580      	push	{r7, lr}
    9c7e:	b082      	sub	sp, #8
    9c80:	af00      	add	r7, sp, #0
    9c82:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    9c84:	46c0      	nop			; (mov r8, r8)
    9c86:	687b      	ldr	r3, [r7, #4]
    9c88:	0018      	movs	r0, r3
    9c8a:	4b04      	ldr	r3, [pc, #16]	; (9c9c <_usart_wait_for_sync+0x20>)
    9c8c:	4798      	blx	r3
    9c8e:	1e03      	subs	r3, r0, #0
    9c90:	d1f9      	bne.n	9c86 <_usart_wait_for_sync+0xa>
}
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	46bd      	mov	sp, r7
    9c96:	b002      	add	sp, #8
    9c98:	bd80      	pop	{r7, pc}
    9c9a:	46c0      	nop			; (mov r8, r8)
    9c9c:	00009c5d 	.word	0x00009c5d

00009ca0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b082      	sub	sp, #8
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	2280      	movs	r2, #128	; 0x80
    9cac:	05d2      	lsls	r2, r2, #23
    9cae:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	2200      	movs	r2, #0
    9cb4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	22ff      	movs	r2, #255	; 0xff
    9cba:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	2200      	movs	r2, #0
    9cc0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    9cc2:	687b      	ldr	r3, [r7, #4]
    9cc4:	2200      	movs	r2, #0
    9cc6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	2296      	movs	r2, #150	; 0x96
    9ccc:	0192      	lsls	r2, r2, #6
    9cce:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	2224      	movs	r2, #36	; 0x24
    9cd4:	2101      	movs	r1, #1
    9cd6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	2225      	movs	r2, #37	; 0x25
    9cdc:	2101      	movs	r1, #1
    9cde:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	2226      	movs	r2, #38	; 0x26
    9ce4:	2100      	movs	r1, #0
    9ce6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    9ce8:	687b      	ldr	r3, [r7, #4]
    9cea:	2227      	movs	r2, #39	; 0x27
    9cec:	2100      	movs	r1, #0
    9cee:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	2200      	movs	r2, #0
    9cf4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	2288      	movs	r2, #136	; 0x88
    9cfa:	0352      	lsls	r2, r2, #13
    9cfc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    9cfe:	687b      	ldr	r3, [r7, #4]
    9d00:	222c      	movs	r2, #44	; 0x2c
    9d02:	2100      	movs	r1, #0
    9d04:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	222d      	movs	r2, #45	; 0x2d
    9d0a:	2100      	movs	r1, #0
    9d0c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    9d0e:	687b      	ldr	r3, [r7, #4]
    9d10:	2200      	movs	r2, #0
    9d12:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	2200      	movs	r2, #0
    9d18:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	2200      	movs	r2, #0
    9d1e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	2200      	movs	r2, #0
    9d24:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	2200      	movs	r2, #0
    9d2a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	2200      	movs	r2, #0
    9d30:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    9d32:	687b      	ldr	r3, [r7, #4]
    9d34:	2200      	movs	r2, #0
    9d36:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	2200      	movs	r2, #0
    9d3c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	2200      	movs	r2, #0
    9d42:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	2200      	movs	r2, #0
    9d48:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	2213      	movs	r2, #19
    9d4e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    9d50:	687b      	ldr	r3, [r7, #4]
    9d52:	2200      	movs	r2, #0
    9d54:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	46bd      	mov	sp, r7
    9d5a:	b002      	add	sp, #8
    9d5c:	bd80      	pop	{r7, pc}
	...

00009d60 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    9d60:	b580      	push	{r7, lr}
    9d62:	b084      	sub	sp, #16
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	681b      	ldr	r3, [r3, #0]
    9d6c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	681b      	ldr	r3, [r3, #0]
    9d72:	0018      	movs	r0, r3
    9d74:	4b09      	ldr	r3, [pc, #36]	; (9d9c <usart_enable+0x3c>)
    9d76:	4798      	blx	r3
    9d78:	0003      	movs	r3, r0
    9d7a:	0018      	movs	r0, r3
    9d7c:	4b08      	ldr	r3, [pc, #32]	; (9da0 <usart_enable+0x40>)
    9d7e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9d80:	687b      	ldr	r3, [r7, #4]
    9d82:	0018      	movs	r0, r3
    9d84:	4b07      	ldr	r3, [pc, #28]	; (9da4 <usart_enable+0x44>)
    9d86:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9d88:	68fb      	ldr	r3, [r7, #12]
    9d8a:	681b      	ldr	r3, [r3, #0]
    9d8c:	2202      	movs	r2, #2
    9d8e:	431a      	orrs	r2, r3
    9d90:	68fb      	ldr	r3, [r7, #12]
    9d92:	601a      	str	r2, [r3, #0]
}
    9d94:	46c0      	nop			; (mov r8, r8)
    9d96:	46bd      	mov	sp, r7
    9d98:	b004      	add	sp, #16
    9d9a:	bd80      	pop	{r7, pc}
    9d9c:	00007ad1 	.word	0x00007ad1
    9da0:	00009869 	.word	0x00009869
    9da4:	00009c7d 	.word	0x00009c7d

00009da8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b084      	sub	sp, #16
    9dac:	af00      	add	r7, sp, #0
    9dae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	681b      	ldr	r3, [r3, #0]
    9db4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	681b      	ldr	r3, [r3, #0]
    9dba:	0018      	movs	r0, r3
    9dbc:	4b0a      	ldr	r3, [pc, #40]	; (9de8 <usart_disable+0x40>)
    9dbe:	4798      	blx	r3
    9dc0:	0003      	movs	r3, r0
    9dc2:	0018      	movs	r0, r3
    9dc4:	4b09      	ldr	r3, [pc, #36]	; (9dec <usart_disable+0x44>)
    9dc6:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	0018      	movs	r0, r3
    9dcc:	4b08      	ldr	r3, [pc, #32]	; (9df0 <usart_disable+0x48>)
    9dce:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    9dd0:	68fb      	ldr	r3, [r7, #12]
    9dd2:	681b      	ldr	r3, [r3, #0]
    9dd4:	2202      	movs	r2, #2
    9dd6:	4393      	bics	r3, r2
    9dd8:	001a      	movs	r2, r3
    9dda:	68fb      	ldr	r3, [r7, #12]
    9ddc:	601a      	str	r2, [r3, #0]
}
    9dde:	46c0      	nop			; (mov r8, r8)
    9de0:	46bd      	mov	sp, r7
    9de2:	b004      	add	sp, #16
    9de4:	bd80      	pop	{r7, pc}
    9de6:	46c0      	nop			; (mov r8, r8)
    9de8:	00007ad1 	.word	0x00007ad1
    9dec:	00009895 	.word	0x00009895
    9df0:	00009c7d 	.word	0x00009c7d

00009df4 <tc_is_syncing>:
{
    9df4:	b580      	push	{r7, lr}
    9df6:	b084      	sub	sp, #16
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	681b      	ldr	r3, [r3, #0]
    9e00:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    9e02:	68fb      	ldr	r3, [r7, #12]
    9e04:	7bdb      	ldrb	r3, [r3, #15]
    9e06:	b2db      	uxtb	r3, r3
    9e08:	001a      	movs	r2, r3
    9e0a:	2380      	movs	r3, #128	; 0x80
    9e0c:	4013      	ands	r3, r2
    9e0e:	1e5a      	subs	r2, r3, #1
    9e10:	4193      	sbcs	r3, r2
    9e12:	b2db      	uxtb	r3, r3
}
    9e14:	0018      	movs	r0, r3
    9e16:	46bd      	mov	sp, r7
    9e18:	b004      	add	sp, #16
    9e1a:	bd80      	pop	{r7, pc}

00009e1c <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b082      	sub	sp, #8
    9e20:	af00      	add	r7, sp, #0
    9e22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	2200      	movs	r2, #0
    9e28:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    9e2a:	687b      	ldr	r3, [r7, #4]
    9e2c:	2200      	movs	r2, #0
    9e2e:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    9e30:	687b      	ldr	r3, [r7, #4]
    9e32:	2200      	movs	r2, #0
    9e34:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	2200      	movs	r2, #0
    9e3a:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	2200      	movs	r2, #0
    9e40:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    9e42:	687b      	ldr	r3, [r7, #4]
    9e44:	2200      	movs	r2, #0
    9e46:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	2200      	movs	r2, #0
    9e4c:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9e4e:	687b      	ldr	r3, [r7, #4]
    9e50:	2200      	movs	r2, #0
    9e52:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	2200      	movs	r2, #0
    9e58:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    9e5a:	687b      	ldr	r3, [r7, #4]
    9e5c:	2200      	movs	r2, #0
    9e5e:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	2200      	movs	r2, #0
    9e64:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	2200      	movs	r2, #0
    9e6a:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    9e6c:	687b      	ldr	r3, [r7, #4]
    9e6e:	2200      	movs	r2, #0
    9e70:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	2200      	movs	r2, #0
    9e76:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	2200      	movs	r2, #0
    9e7c:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	2200      	movs	r2, #0
    9e82:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    9e84:	687b      	ldr	r3, [r7, #4]
    9e86:	2200      	movs	r2, #0
    9e88:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	2200      	movs	r2, #0
    9e8e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	2200      	movs	r2, #0
    9e94:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	2200      	movs	r2, #0
    9e9a:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    9e9c:	46c0      	nop			; (mov r8, r8)
    9e9e:	46bd      	mov	sp, r7
    9ea0:	b002      	add	sp, #8
    9ea2:	bd80      	pop	{r7, pc}

00009ea4 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	b084      	sub	sp, #16
    9ea8:	af00      	add	r7, sp, #0
    9eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    9eb2:	46c0      	nop			; (mov r8, r8)
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	0018      	movs	r0, r3
    9eb8:	4b07      	ldr	r3, [pc, #28]	; (9ed8 <tc_enable+0x34>)
    9eba:	4798      	blx	r3
    9ebc:	1e03      	subs	r3, r0, #0
    9ebe:	d1f9      	bne.n	9eb4 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    9ec0:	68fb      	ldr	r3, [r7, #12]
    9ec2:	881b      	ldrh	r3, [r3, #0]
    9ec4:	b29b      	uxth	r3, r3
    9ec6:	2202      	movs	r2, #2
    9ec8:	4313      	orrs	r3, r2
    9eca:	b29a      	uxth	r2, r3
    9ecc:	68fb      	ldr	r3, [r7, #12]
    9ece:	801a      	strh	r2, [r3, #0]
}
    9ed0:	46c0      	nop			; (mov r8, r8)
    9ed2:	46bd      	mov	sp, r7
    9ed4:	b004      	add	sp, #16
    9ed6:	bd80      	pop	{r7, pc}
    9ed8:	00009df5 	.word	0x00009df5

00009edc <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b084      	sub	sp, #16
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    9eea:	46c0      	nop			; (mov r8, r8)
    9eec:	68fb      	ldr	r3, [r7, #12]
    9eee:	689b      	ldr	r3, [r3, #8]
    9ef0:	2202      	movs	r2, #2
    9ef2:	4013      	ands	r3, r2
    9ef4:	d1fa      	bne.n	9eec <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9ef6:	68fb      	ldr	r3, [r7, #12]
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	2202      	movs	r2, #2
    9efc:	431a      	orrs	r2, r3
    9efe:	68fb      	ldr	r3, [r7, #12]
    9f00:	601a      	str	r2, [r3, #0]
}
    9f02:	46c0      	nop			; (mov r8, r8)
    9f04:	46bd      	mov	sp, r7
    9f06:	b004      	add	sp, #16
    9f08:	bd80      	pop	{r7, pc}
	...

00009f0c <configure_tc>:
void configure_tc(void);
void check_time(uint32_t* time_var);
void check_time_micros(uint32_t* time_var);

void configure_tc(void)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b08e      	sub	sp, #56	; 0x38
    9f10:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
    9f12:	1d3b      	adds	r3, r7, #4
    9f14:	0018      	movs	r0, r3
    9f16:	4b0e      	ldr	r3, [pc, #56]	; (9f50 <configure_tc+0x44>)
    9f18:	4798      	blx	r3
	
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    9f1a:	1d3b      	adds	r3, r7, #4
    9f1c:	2208      	movs	r2, #8
    9f1e:	709a      	strb	r2, [r3, #2]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    9f20:	1d3b      	adds	r3, r7, #4
    9f22:	2200      	movs	r2, #0
    9f24:	739a      	strb	r2, [r3, #14]
	config_tc.clock_source =  GCLK_CLKCTRL_GEN_GCLK0;
    9f26:	1d3b      	adds	r3, r7, #4
    9f28:	2200      	movs	r2, #0
    9f2a:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    9f2c:	1d3b      	adds	r3, r7, #4
    9f2e:	2200      	movs	r2, #0
    9f30:	809a      	strh	r2, [r3, #4]

	tc_init(&tc0, TC4, &config_tc);
    9f32:	1d3a      	adds	r2, r7, #4
    9f34:	4907      	ldr	r1, [pc, #28]	; (9f54 <configure_tc+0x48>)
    9f36:	4b08      	ldr	r3, [pc, #32]	; (9f58 <configure_tc+0x4c>)
    9f38:	0018      	movs	r0, r3
    9f3a:	4b08      	ldr	r3, [pc, #32]	; (9f5c <configure_tc+0x50>)
    9f3c:	4798      	blx	r3
	tc_enable(&tc0);
    9f3e:	4b06      	ldr	r3, [pc, #24]	; (9f58 <configure_tc+0x4c>)
    9f40:	0018      	movs	r0, r3
    9f42:	4b07      	ldr	r3, [pc, #28]	; (9f60 <configure_tc+0x54>)
    9f44:	4798      	blx	r3
}
    9f46:	46c0      	nop			; (mov r8, r8)
    9f48:	46bd      	mov	sp, r7
    9f4a:	b00e      	add	sp, #56	; 0x38
    9f4c:	bd80      	pop	{r7, pc}
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	00009e1d 	.word	0x00009e1d
    9f54:	42003000 	.word	0x42003000
    9f58:	20000b60 	.word	0x20000b60
    9f5c:	00005871 	.word	0x00005871
    9f60:	00009ea5 	.word	0x00009ea5

00009f64 <millis>:



uint32_t millis()
{
    9f64:	b580      	push	{r7, lr}
    9f66:	af00      	add	r7, sp, #0
	return (tc_get_count_value(&tc0)/7500);
    9f68:	4b06      	ldr	r3, [pc, #24]	; (9f84 <millis+0x20>)
    9f6a:	0018      	movs	r0, r3
    9f6c:	4b06      	ldr	r3, [pc, #24]	; (9f88 <millis+0x24>)
    9f6e:	4798      	blx	r3
    9f70:	0002      	movs	r2, r0
    9f72:	4b06      	ldr	r3, [pc, #24]	; (9f8c <millis+0x28>)
    9f74:	4906      	ldr	r1, [pc, #24]	; (9f90 <millis+0x2c>)
    9f76:	0010      	movs	r0, r2
    9f78:	4798      	blx	r3
    9f7a:	0003      	movs	r3, r0
}
    9f7c:	0018      	movs	r0, r3
    9f7e:	46bd      	mov	sp, r7
    9f80:	bd80      	pop	{r7, pc}
    9f82:	46c0      	nop			; (mov r8, r8)
    9f84:	20000b60 	.word	0x20000b60
    9f88:	00005cc1 	.word	0x00005cc1
    9f8c:	0001840d 	.word	0x0001840d
    9f90:	00001d4c 	.word	0x00001d4c

00009f94 <check_time>:
uint32_t micros()
{
	return (tc_get_count_value(&tc0)/7.5);
}

void check_time(uint32_t* time_var){
    9f94:	b590      	push	{r4, r7, lr}
    9f96:	b083      	sub	sp, #12
    9f98:	af00      	add	r7, sp, #0
    9f9a:	6078      	str	r0, [r7, #4]
	if(*time_var > millis())
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	681c      	ldr	r4, [r3, #0]
    9fa0:	4b05      	ldr	r3, [pc, #20]	; (9fb8 <check_time+0x24>)
    9fa2:	4798      	blx	r3
    9fa4:	0003      	movs	r3, r0
    9fa6:	429c      	cmp	r4, r3
    9fa8:	d902      	bls.n	9fb0 <check_time+0x1c>
		*time_var = 0;
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	2200      	movs	r2, #0
    9fae:	601a      	str	r2, [r3, #0]
}
    9fb0:	46c0      	nop			; (mov r8, r8)
    9fb2:	46bd      	mov	sp, r7
    9fb4:	b003      	add	sp, #12
    9fb6:	bd90      	pop	{r4, r7, pc}
    9fb8:	00009f65 	.word	0x00009f65

00009fbc <configure_APA_SPI>:
#include "LED_Vars.h"

void configure_APA_SPI(void);

void configure_APA_SPI(void)
{
    9fbc:	b580      	push	{r7, lr}
    9fbe:	b090      	sub	sp, #64	; 0x40
    9fc0:	af00      	add	r7, sp, #0
    struct spi_config config_spi_master;
	
	/* Configure, initialize and enable Left APA SPI module (SERCOM4)*/
	spi_get_config_defaults(&config_spi_master);
    9fc2:	003b      	movs	r3, r7
    9fc4:	0018      	movs	r0, r3
    9fc6:	4b51      	ldr	r3, [pc, #324]	; (a10c <configure_APA_SPI+0x150>)
    9fc8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = 80000;
    9fca:	003b      	movs	r3, r7
    9fcc:	4a50      	ldr	r2, [pc, #320]	; (a110 <configure_APA_SPI+0x154>)
    9fce:	619a      	str	r2, [r3, #24]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    9fd0:	003b      	movs	r3, r7
    9fd2:	2280      	movs	r2, #128	; 0x80
    9fd4:	0292      	lsls	r2, r2, #10
    9fd6:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PA13D_SERCOM4_PAD1; //CLK
    9fd8:	003b      	movs	r3, r7
    9fda:	4a4e      	ldr	r2, [pc, #312]	; (a114 <configure_APA_SPI+0x158>)
    9fdc:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    9fde:	003b      	movs	r3, r7
    9fe0:	2201      	movs	r2, #1
    9fe2:	4252      	negs	r2, r2
    9fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_PB11D_SERCOM4_PAD3; //DATA
    9fe6:	003b      	movs	r3, r7
    9fe8:	4a4b      	ldr	r2, [pc, #300]	; (a118 <configure_APA_SPI+0x15c>)
    9fea:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
    9fec:	003b      	movs	r3, r7
    9fee:	2201      	movs	r2, #1
    9ff0:	4252      	negs	r2, r2
    9ff2:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&L_LED_SPI_instance, SERCOM4, &config_spi_master);
    9ff4:	003a      	movs	r2, r7
    9ff6:	4949      	ldr	r1, [pc, #292]	; (a11c <configure_APA_SPI+0x160>)
    9ff8:	4b49      	ldr	r3, [pc, #292]	; (a120 <configure_APA_SPI+0x164>)
    9ffa:	0018      	movs	r0, r3
    9ffc:	4b49      	ldr	r3, [pc, #292]	; (a124 <configure_APA_SPI+0x168>)
    9ffe:	4798      	blx	r3
	spi_enable(&L_LED_SPI_instance);
    a000:	4b47      	ldr	r3, [pc, #284]	; (a120 <configure_APA_SPI+0x164>)
    a002:	0018      	movs	r0, r3
    a004:	4b48      	ldr	r3, [pc, #288]	; (a128 <configure_APA_SPI+0x16c>)
    a006:	4798      	blx	r3

    /* Configure, initialize and enable Right APA SPI module (SERCOM0)*/
    spi_get_config_defaults(&config_spi_master);
    a008:	003b      	movs	r3, r7
    a00a:	0018      	movs	r0, r3
    a00c:	4b3f      	ldr	r3, [pc, #252]	; (a10c <configure_APA_SPI+0x150>)
    a00e:	4798      	blx	r3
    config_spi_master.mode_specific.master.baudrate = 80000;
    a010:	003b      	movs	r3, r7
    a012:	4a3f      	ldr	r2, [pc, #252]	; (a110 <configure_APA_SPI+0x154>)
    a014:	619a      	str	r2, [r3, #24]
    config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_F;
    a016:	003b      	movs	r3, r7
    a018:	2288      	movs	r2, #136	; 0x88
    a01a:	0352      	lsls	r2, r2, #13
    a01c:	60da      	str	r2, [r3, #12]
    config_spi_master.pinmux_pad0 = PINMUX_UNUSED;
    a01e:	003b      	movs	r3, r7
    a020:	2201      	movs	r2, #1
    a022:	4252      	negs	r2, r2
    a024:	629a      	str	r2, [r3, #40]	; 0x28
    config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    a026:	003b      	movs	r3, r7
    a028:	2201      	movs	r2, #1
    a02a:	4252      	negs	r2, r2
    a02c:	62da      	str	r2, [r3, #44]	; 0x2c
    config_spi_master.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2; //DATA
    a02e:	003b      	movs	r3, r7
    a030:	4a3e      	ldr	r2, [pc, #248]	; (a12c <configure_APA_SPI+0x170>)
    a032:	631a      	str	r2, [r3, #48]	; 0x30
    config_spi_master.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3; //CLK
    a034:	003b      	movs	r3, r7
    a036:	4a3e      	ldr	r2, [pc, #248]	; (a130 <configure_APA_SPI+0x174>)
    a038:	635a      	str	r2, [r3, #52]	; 0x34
    spi_init(&R_LED_SPI_instance, SERCOM2, &config_spi_master);
    a03a:	003a      	movs	r2, r7
    a03c:	493d      	ldr	r1, [pc, #244]	; (a134 <configure_APA_SPI+0x178>)
    a03e:	4b3e      	ldr	r3, [pc, #248]	; (a138 <configure_APA_SPI+0x17c>)
    a040:	0018      	movs	r0, r3
    a042:	4b38      	ldr	r3, [pc, #224]	; (a124 <configure_APA_SPI+0x168>)
    a044:	4798      	blx	r3
    spi_enable(&R_LED_SPI_instance);
    a046:	4b3c      	ldr	r3, [pc, #240]	; (a138 <configure_APA_SPI+0x17c>)
    a048:	0018      	movs	r0, r3
    a04a:	4b37      	ldr	r3, [pc, #220]	; (a128 <configure_APA_SPI+0x16c>)
    a04c:	4798      	blx	r3

	
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a04e:	2300      	movs	r3, #0
    a050:	63fb      	str	r3, [r7, #60]	; 0x3c
    a052:	e01a      	b.n	a08a <configure_APA_SPI+0xce>
		L_SPI_send_buf[(i*4)+4] = (0b11100000 | 0x0A);
    a054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a056:	3301      	adds	r3, #1
    a058:	009b      	lsls	r3, r3, #2
    a05a:	4a38      	ldr	r2, [pc, #224]	; (a13c <configure_APA_SPI+0x180>)
    a05c:	21ea      	movs	r1, #234	; 0xea
    a05e:	54d1      	strb	r1, [r2, r3]
		L_SPI_send_buf[(i*4)+5] = 0x00;
    a060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a062:	009b      	lsls	r3, r3, #2
    a064:	3305      	adds	r3, #5
    a066:	4a35      	ldr	r2, [pc, #212]	; (a13c <configure_APA_SPI+0x180>)
    a068:	2100      	movs	r1, #0
    a06a:	54d1      	strb	r1, [r2, r3]
		L_SPI_send_buf[(i*4)+6] = 0x00;
    a06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a06e:	009b      	lsls	r3, r3, #2
    a070:	3306      	adds	r3, #6
    a072:	4a32      	ldr	r2, [pc, #200]	; (a13c <configure_APA_SPI+0x180>)
    a074:	2100      	movs	r1, #0
    a076:	54d1      	strb	r1, [r2, r3]
		L_SPI_send_buf[(i*4)+7] = 0x00;
    a078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a07a:	009b      	lsls	r3, r3, #2
    a07c:	3307      	adds	r3, #7
    a07e:	4a2f      	ldr	r2, [pc, #188]	; (a13c <configure_APA_SPI+0x180>)
    a080:	2100      	movs	r1, #0
    a082:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a086:	3301      	adds	r3, #1
    a088:	63fb      	str	r3, [r7, #60]	; 0x3c
    a08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a08c:	2b47      	cmp	r3, #71	; 0x47
    a08e:	dde1      	ble.n	a054 <configure_APA_SPI+0x98>
	}

	
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a090:	2300      	movs	r3, #0
    a092:	63bb      	str	r3, [r7, #56]	; 0x38
    a094:	e01a      	b.n	a0cc <configure_APA_SPI+0x110>
		R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0x0A);
    a096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a098:	3301      	adds	r3, #1
    a09a:	009b      	lsls	r3, r3, #2
    a09c:	4a28      	ldr	r2, [pc, #160]	; (a140 <configure_APA_SPI+0x184>)
    a09e:	21ea      	movs	r1, #234	; 0xea
    a0a0:	54d1      	strb	r1, [r2, r3]
		R_SPI_send_buf[(i*4)+5] = 0x00;
    a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0a4:	009b      	lsls	r3, r3, #2
    a0a6:	3305      	adds	r3, #5
    a0a8:	4a25      	ldr	r2, [pc, #148]	; (a140 <configure_APA_SPI+0x184>)
    a0aa:	2100      	movs	r1, #0
    a0ac:	54d1      	strb	r1, [r2, r3]
		R_SPI_send_buf[(i*4)+6] = 0x00;
    a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0b0:	009b      	lsls	r3, r3, #2
    a0b2:	3306      	adds	r3, #6
    a0b4:	4a22      	ldr	r2, [pc, #136]	; (a140 <configure_APA_SPI+0x184>)
    a0b6:	2100      	movs	r1, #0
    a0b8:	54d1      	strb	r1, [r2, r3]
		R_SPI_send_buf[(i*4)+7] = 0x00;
    a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0bc:	009b      	lsls	r3, r3, #2
    a0be:	3307      	adds	r3, #7
    a0c0:	4a1f      	ldr	r2, [pc, #124]	; (a140 <configure_APA_SPI+0x184>)
    a0c2:	2100      	movs	r1, #0
    a0c4:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < MAX_LEDCOUNT; i++){
    a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0c8:	3301      	adds	r3, #1
    a0ca:	63bb      	str	r3, [r7, #56]	; 0x38
    a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a0ce:	2b47      	cmp	r3, #71	; 0x47
    a0d0:	dde1      	ble.n	a096 <configure_APA_SPI+0xda>
	}
	
	L_SPI_send_buf[0] = 0x00;
    a0d2:	4b1a      	ldr	r3, [pc, #104]	; (a13c <configure_APA_SPI+0x180>)
    a0d4:	2200      	movs	r2, #0
    a0d6:	701a      	strb	r2, [r3, #0]
	L_SPI_send_buf[1] = 0x00;
    a0d8:	4b18      	ldr	r3, [pc, #96]	; (a13c <configure_APA_SPI+0x180>)
    a0da:	2200      	movs	r2, #0
    a0dc:	705a      	strb	r2, [r3, #1]
	L_SPI_send_buf[2] = 0x00;
    a0de:	4b17      	ldr	r3, [pc, #92]	; (a13c <configure_APA_SPI+0x180>)
    a0e0:	2200      	movs	r2, #0
    a0e2:	709a      	strb	r2, [r3, #2]
	L_SPI_send_buf[3] = 0x00;
    a0e4:	4b15      	ldr	r3, [pc, #84]	; (a13c <configure_APA_SPI+0x180>)
    a0e6:	2200      	movs	r2, #0
    a0e8:	70da      	strb	r2, [r3, #3]
	R_SPI_send_buf[0] = 0x00;
    a0ea:	4b15      	ldr	r3, [pc, #84]	; (a140 <configure_APA_SPI+0x184>)
    a0ec:	2200      	movs	r2, #0
    a0ee:	701a      	strb	r2, [r3, #0]
	R_SPI_send_buf[1] = 0x00;
    a0f0:	4b13      	ldr	r3, [pc, #76]	; (a140 <configure_APA_SPI+0x184>)
    a0f2:	2200      	movs	r2, #0
    a0f4:	705a      	strb	r2, [r3, #1]
	R_SPI_send_buf[2] = 0x00;
    a0f6:	4b12      	ldr	r3, [pc, #72]	; (a140 <configure_APA_SPI+0x184>)
    a0f8:	2200      	movs	r2, #0
    a0fa:	709a      	strb	r2, [r3, #2]
	R_SPI_send_buf[3] = 0x00;
    a0fc:	4b10      	ldr	r3, [pc, #64]	; (a140 <configure_APA_SPI+0x184>)
    a0fe:	2200      	movs	r2, #0
    a100:	70da      	strb	r2, [r3, #3]
}
    a102:	46c0      	nop			; (mov r8, r8)
    a104:	46bd      	mov	sp, r7
    a106:	b010      	add	sp, #64	; 0x40
    a108:	bd80      	pop	{r7, pc}
    a10a:	46c0      	nop			; (mov r8, r8)
    a10c:	00009b89 	.word	0x00009b89
    a110:	00013880 	.word	0x00013880
    a114:	000d0003 	.word	0x000d0003
    a118:	002b0003 	.word	0x002b0003
    a11c:	42001800 	.word	0x42001800
    a120:	20000fc4 	.word	0x20000fc4
    a124:	00006d9d 	.word	0x00006d9d
    a128:	00009c0d 	.word	0x00009c0d
    a12c:	000a0003 	.word	0x000a0003
    a130:	000b0003 	.word	0x000b0003
    a134:	42001000 	.word	0x42001000
    a138:	20000524 	.word	0x20000524
    a13c:	20001420 	.word	0x20001420
    a140:	20000578 	.word	0x20000578

0000a144 <set_left_gnd>:
void set_left_gnd(void);
void set_right_gnd(void);
void L_APA_write(uint16_t count);
void R_APA_write(uint16_t count);

void set_left_gnd(void){
    a144:	b580      	push	{r7, lr}
    a146:	af00      	add	r7, sp, #0
	port_pin_set_output_level(L_GND,1);
    a148:	2101      	movs	r1, #1
    a14a:	2007      	movs	r0, #7
    a14c:	4b02      	ldr	r3, [pc, #8]	; (a158 <set_left_gnd+0x14>)
    a14e:	4798      	blx	r3
}
    a150:	46c0      	nop			; (mov r8, r8)
    a152:	46bd      	mov	sp, r7
    a154:	bd80      	pop	{r7, pc}
    a156:	46c0      	nop			; (mov r8, r8)
    a158:	00009815 	.word	0x00009815

0000a15c <set_right_gnd>:

void set_right_gnd(void){
    a15c:	b580      	push	{r7, lr}
    a15e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(R_GND,1);
    a160:	2101      	movs	r1, #1
    a162:	200e      	movs	r0, #14
    a164:	4b02      	ldr	r3, [pc, #8]	; (a170 <set_right_gnd+0x14>)
    a166:	4798      	blx	r3
}
    a168:	46c0      	nop			; (mov r8, r8)
    a16a:	46bd      	mov	sp, r7
    a16c:	bd80      	pop	{r7, pc}
    a16e:	46c0      	nop			; (mov r8, r8)
    a170:	00009815 	.word	0x00009815

0000a174 <L_APA_write>:

void L_APA_write(uint16_t count)
{
    a174:	b580      	push	{r7, lr}
    a176:	b082      	sub	sp, #8
    a178:	af00      	add	r7, sp, #0
    a17a:	0002      	movs	r2, r0
    a17c:	1dbb      	adds	r3, r7, #6
    a17e:	801a      	strh	r2, [r3, #0]
	// Set the stop frame
	L_SPI_send_buf[count*4+4] = 0xFF;
    a180:	1dbb      	adds	r3, r7, #6
    a182:	881b      	ldrh	r3, [r3, #0]
    a184:	3301      	adds	r3, #1
    a186:	009b      	lsls	r3, r3, #2
    a188:	4a13      	ldr	r2, [pc, #76]	; (a1d8 <L_APA_write+0x64>)
    a18a:	21ff      	movs	r1, #255	; 0xff
    a18c:	54d1      	strb	r1, [r2, r3]
	L_SPI_send_buf[count*4+5] = 0xFF;
    a18e:	1dbb      	adds	r3, r7, #6
    a190:	881b      	ldrh	r3, [r3, #0]
    a192:	009b      	lsls	r3, r3, #2
    a194:	3305      	adds	r3, #5
    a196:	4a10      	ldr	r2, [pc, #64]	; (a1d8 <L_APA_write+0x64>)
    a198:	21ff      	movs	r1, #255	; 0xff
    a19a:	54d1      	strb	r1, [r2, r3]
	L_SPI_send_buf[count*4+6] = 0xFF;
    a19c:	1dbb      	adds	r3, r7, #6
    a19e:	881b      	ldrh	r3, [r3, #0]
    a1a0:	009b      	lsls	r3, r3, #2
    a1a2:	3306      	adds	r3, #6
    a1a4:	4a0c      	ldr	r2, [pc, #48]	; (a1d8 <L_APA_write+0x64>)
    a1a6:	21ff      	movs	r1, #255	; 0xff
    a1a8:	54d1      	strb	r1, [r2, r3]
	L_SPI_send_buf[count*4+7] = 0xFF;
    a1aa:	1dbb      	adds	r3, r7, #6
    a1ac:	881b      	ldrh	r3, [r3, #0]
    a1ae:	009b      	lsls	r3, r3, #2
    a1b0:	3307      	adds	r3, #7
    a1b2:	4a09      	ldr	r2, [pc, #36]	; (a1d8 <L_APA_write+0x64>)
    a1b4:	21ff      	movs	r1, #255	; 0xff
    a1b6:	54d1      	strb	r1, [r2, r3]
	spi_write_buffer_job(&L_LED_SPI_instance, L_SPI_send_buf, (count*4)+8);
    a1b8:	1dbb      	adds	r3, r7, #6
    a1ba:	881b      	ldrh	r3, [r3, #0]
    a1bc:	3302      	adds	r3, #2
    a1be:	b29b      	uxth	r3, r3
    a1c0:	009b      	lsls	r3, r3, #2
    a1c2:	b29a      	uxth	r2, r3
    a1c4:	4904      	ldr	r1, [pc, #16]	; (a1d8 <L_APA_write+0x64>)
    a1c6:	4b05      	ldr	r3, [pc, #20]	; (a1dc <L_APA_write+0x68>)
    a1c8:	0018      	movs	r0, r3
    a1ca:	4b05      	ldr	r3, [pc, #20]	; (a1e0 <L_APA_write+0x6c>)
    a1cc:	4798      	blx	r3
}
    a1ce:	46c0      	nop			; (mov r8, r8)
    a1d0:	46bd      	mov	sp, r7
    a1d2:	b002      	add	sp, #8
    a1d4:	bd80      	pop	{r7, pc}
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	20001420 	.word	0x20001420
    a1dc:	20000fc4 	.word	0x20000fc4
    a1e0:	00006fad 	.word	0x00006fad

0000a1e4 <R_APA_write>:
enum status_code L_APA_BUSY(){
	return spi_get_job_status(&L_LED_SPI_instance);
}

void R_APA_write(uint16_t count)
{
    a1e4:	b580      	push	{r7, lr}
    a1e6:	b082      	sub	sp, #8
    a1e8:	af00      	add	r7, sp, #0
    a1ea:	0002      	movs	r2, r0
    a1ec:	1dbb      	adds	r3, r7, #6
    a1ee:	801a      	strh	r2, [r3, #0]
	// Set the stop frame
	R_SPI_send_buf[count*4+4] = 0xFF;
    a1f0:	1dbb      	adds	r3, r7, #6
    a1f2:	881b      	ldrh	r3, [r3, #0]
    a1f4:	3301      	adds	r3, #1
    a1f6:	009b      	lsls	r3, r3, #2
    a1f8:	4a13      	ldr	r2, [pc, #76]	; (a248 <R_APA_write+0x64>)
    a1fa:	21ff      	movs	r1, #255	; 0xff
    a1fc:	54d1      	strb	r1, [r2, r3]
	R_SPI_send_buf[count*4+5] = 0xFF;
    a1fe:	1dbb      	adds	r3, r7, #6
    a200:	881b      	ldrh	r3, [r3, #0]
    a202:	009b      	lsls	r3, r3, #2
    a204:	3305      	adds	r3, #5
    a206:	4a10      	ldr	r2, [pc, #64]	; (a248 <R_APA_write+0x64>)
    a208:	21ff      	movs	r1, #255	; 0xff
    a20a:	54d1      	strb	r1, [r2, r3]
	R_SPI_send_buf[count*4+6] = 0xFF;
    a20c:	1dbb      	adds	r3, r7, #6
    a20e:	881b      	ldrh	r3, [r3, #0]
    a210:	009b      	lsls	r3, r3, #2
    a212:	3306      	adds	r3, #6
    a214:	4a0c      	ldr	r2, [pc, #48]	; (a248 <R_APA_write+0x64>)
    a216:	21ff      	movs	r1, #255	; 0xff
    a218:	54d1      	strb	r1, [r2, r3]
	R_SPI_send_buf[count*4+7] = 0xFF;
    a21a:	1dbb      	adds	r3, r7, #6
    a21c:	881b      	ldrh	r3, [r3, #0]
    a21e:	009b      	lsls	r3, r3, #2
    a220:	3307      	adds	r3, #7
    a222:	4a09      	ldr	r2, [pc, #36]	; (a248 <R_APA_write+0x64>)
    a224:	21ff      	movs	r1, #255	; 0xff
    a226:	54d1      	strb	r1, [r2, r3]
	spi_write_buffer_job(&R_LED_SPI_instance, R_SPI_send_buf, (count*4)+8);
    a228:	1dbb      	adds	r3, r7, #6
    a22a:	881b      	ldrh	r3, [r3, #0]
    a22c:	3302      	adds	r3, #2
    a22e:	b29b      	uxth	r3, r3
    a230:	009b      	lsls	r3, r3, #2
    a232:	b29a      	uxth	r2, r3
    a234:	4904      	ldr	r1, [pc, #16]	; (a248 <R_APA_write+0x64>)
    a236:	4b05      	ldr	r3, [pc, #20]	; (a24c <R_APA_write+0x68>)
    a238:	0018      	movs	r0, r3
    a23a:	4b05      	ldr	r3, [pc, #20]	; (a250 <R_APA_write+0x6c>)
    a23c:	4798      	blx	r3
}
    a23e:	46c0      	nop			; (mov r8, r8)
    a240:	46bd      	mov	sp, r7
    a242:	b002      	add	sp, #8
    a244:	bd80      	pop	{r7, pc}
    a246:	46c0      	nop			; (mov r8, r8)
    a248:	20000578 	.word	0x20000578
    a24c:	20000524 	.word	0x20000524
    a250:	00006fad 	.word	0x00006fad

0000a254 <configure_LED_PWM>:



// Configure all of the LED ports as PWM outputs
void configure_LED_PWM(void)
{
    a254:	b580      	push	{r7, lr}
    a256:	b0aa      	sub	sp, #168	; 0xa8
    a258:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    a25a:	4a5e      	ldr	r2, [pc, #376]	; (a3d4 <configure_LED_PWM+0x180>)
    a25c:	1d3b      	adds	r3, r7, #4
    a25e:	0011      	movs	r1, r2
    a260:	0018      	movs	r0, r3
    a262:	4b5d      	ldr	r3, [pc, #372]	; (a3d8 <configure_LED_PWM+0x184>)
    a264:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    a266:	1d3b      	adds	r3, r7, #4
    a268:	4a5c      	ldr	r2, [pc, #368]	; (a3dc <configure_LED_PWM+0x188>)
    a26a:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    a26c:	1d3b      	adds	r3, r7, #4
    a26e:	2202      	movs	r2, #2
    a270:	761a      	strb	r2, [r3, #24]

	if(RGB_led_type == RGB_ANALOG){
    a272:	4b5b      	ldr	r3, [pc, #364]	; (a3e0 <configure_LED_PWM+0x18c>)
    a274:	781b      	ldrb	r3, [r3, #0]
    a276:	2b00      	cmp	r3, #0
    a278:	d13f      	bne.n	a2fa <configure_LED_PWM+0xa6>
		config_tcc.compare.match[0] = 0;
    a27a:	1d3b      	adds	r3, r7, #4
    a27c:	2200      	movs	r2, #0
    a27e:	61da      	str	r2, [r3, #28]
		config_tcc.compare.match[1] = 0;
    a280:	1d3b      	adds	r3, r7, #4
    a282:	2200      	movs	r2, #0
    a284:	621a      	str	r2, [r3, #32]
		config_tcc.compare.match[2] = 0;
    a286:	1d3b      	adds	r3, r7, #4
    a288:	2200      	movs	r2, #0
    a28a:	625a      	str	r2, [r3, #36]	; 0x24
		config_tcc.compare.match[3] = 0;
    a28c:	1d3b      	adds	r3, r7, #4
    a28e:	2200      	movs	r2, #0
    a290:	629a      	str	r2, [r3, #40]	; 0x28
		config_tcc.pins.enable_wave_out_pin[0] = true;
    a292:	1d3b      	adds	r3, r7, #4
    a294:	2298      	movs	r2, #152	; 0x98
    a296:	2101      	movs	r1, #1
    a298:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.enable_wave_out_pin[1] = true;
    a29a:	1d3b      	adds	r3, r7, #4
    a29c:	2299      	movs	r2, #153	; 0x99
    a29e:	2101      	movs	r1, #1
    a2a0:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.enable_wave_out_pin[2] = true;
    a2a2:	1d3b      	adds	r3, r7, #4
    a2a4:	229a      	movs	r2, #154	; 0x9a
    a2a6:	2101      	movs	r1, #1
    a2a8:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.enable_wave_out_pin[3] = true;
    a2aa:	1d3b      	adds	r3, r7, #4
    a2ac:	229b      	movs	r2, #155	; 0x9b
    a2ae:	2101      	movs	r1, #1
    a2b0:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.wave_out_pin[0]        = PIN_PA14F_TCC0_WO4;
    a2b2:	1d3b      	adds	r3, r7, #4
    a2b4:	220e      	movs	r2, #14
    a2b6:	659a      	str	r2, [r3, #88]	; 0x58
		config_tcc.pins.wave_out_pin[1]        = PIN_PB11F_TCC0_WO5;
    a2b8:	1d3b      	adds	r3, r7, #4
    a2ba:	222b      	movs	r2, #43	; 0x2b
    a2bc:	65da      	str	r2, [r3, #92]	; 0x5c
		config_tcc.pins.wave_out_pin[2]        = PIN_PA10F_TCC0_WO2;
    a2be:	1d3b      	adds	r3, r7, #4
    a2c0:	220a      	movs	r2, #10
    a2c2:	661a      	str	r2, [r3, #96]	; 0x60
		config_tcc.pins.wave_out_pin[3]        = PIN_PA11F_TCC0_WO3;
    a2c4:	1d3b      	adds	r3, r7, #4
    a2c6:	220b      	movs	r2, #11
    a2c8:	665a      	str	r2, [r3, #100]	; 0x64
		config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA14F_TCC0_WO4;
    a2ca:	1d3b      	adds	r3, r7, #4
    a2cc:	2205      	movs	r2, #5
    a2ce:	679a      	str	r2, [r3, #120]	; 0x78
		config_tcc.pins.wave_out_pin_mux[1]    = MUX_PB11F_TCC0_WO5;
    a2d0:	1d3b      	adds	r3, r7, #4
    a2d2:	2205      	movs	r2, #5
    a2d4:	67da      	str	r2, [r3, #124]	; 0x7c
		config_tcc.pins.wave_out_pin_mux[2]    = MUX_PA10F_TCC0_WO2;
    a2d6:	1d3b      	adds	r3, r7, #4
    a2d8:	2280      	movs	r2, #128	; 0x80
    a2da:	2105      	movs	r1, #5
    a2dc:	5099      	str	r1, [r3, r2]
		config_tcc.pins.wave_out_pin_mux[3]    = MUX_PA11F_TCC0_WO3;
    a2de:	1d3b      	adds	r3, r7, #4
    a2e0:	2284      	movs	r2, #132	; 0x84
    a2e2:	2105      	movs	r1, #5
    a2e4:	5099      	str	r1, [r3, r2]
		tcc_init(&tcc0, TCC0, &config_tcc);
    a2e6:	1d3a      	adds	r2, r7, #4
    a2e8:	493a      	ldr	r1, [pc, #232]	; (a3d4 <configure_LED_PWM+0x180>)
    a2ea:	4b3e      	ldr	r3, [pc, #248]	; (a3e4 <configure_LED_PWM+0x190>)
    a2ec:	0018      	movs	r0, r3
    a2ee:	4b3e      	ldr	r3, [pc, #248]	; (a3e8 <configure_LED_PWM+0x194>)
    a2f0:	4798      	blx	r3
		tcc_enable(&tcc0);
    a2f2:	4b3c      	ldr	r3, [pc, #240]	; (a3e4 <configure_LED_PWM+0x190>)
    a2f4:	0018      	movs	r0, r3
    a2f6:	4b3d      	ldr	r3, [pc, #244]	; (a3ec <configure_LED_PWM+0x198>)
    a2f8:	4798      	blx	r3
	}

	tcc_get_config_defaults(&config_tcc, TCC1);
    a2fa:	4a3d      	ldr	r2, [pc, #244]	; (a3f0 <configure_LED_PWM+0x19c>)
    a2fc:	1d3b      	adds	r3, r7, #4
    a2fe:	0011      	movs	r1, r2
    a300:	0018      	movs	r0, r3
    a302:	4b35      	ldr	r3, [pc, #212]	; (a3d8 <configure_LED_PWM+0x184>)
    a304:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    a306:	1d3b      	adds	r3, r7, #4
    a308:	4a34      	ldr	r2, [pc, #208]	; (a3dc <configure_LED_PWM+0x188>)
    a30a:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    a30c:	1d3b      	adds	r3, r7, #4
    a30e:	2202      	movs	r2, #2
    a310:	761a      	strb	r2, [r3, #24]
	if(RGB_led_type == RGB_ANALOG){
    a312:	4b33      	ldr	r3, [pc, #204]	; (a3e0 <configure_LED_PWM+0x18c>)
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	2b00      	cmp	r3, #0
    a318:	d10c      	bne.n	a334 <configure_LED_PWM+0xe0>
		config_tcc.compare.match[1] = 0;
    a31a:	1d3b      	adds	r3, r7, #4
    a31c:	2200      	movs	r2, #0
    a31e:	621a      	str	r2, [r3, #32]
		config_tcc.pins.enable_wave_out_pin[1] = true;
    a320:	1d3b      	adds	r3, r7, #4
    a322:	2299      	movs	r2, #153	; 0x99
    a324:	2101      	movs	r1, #1
    a326:	5499      	strb	r1, [r3, r2]
		config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    a328:	1d3b      	adds	r3, r7, #4
    a32a:	2207      	movs	r2, #7
    a32c:	65da      	str	r2, [r3, #92]	; 0x5c
		config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    a32e:	1d3b      	adds	r3, r7, #4
    a330:	2204      	movs	r2, #4
    a332:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	tcc_init(&tcc1, TCC1, &config_tcc);
    a334:	1d3a      	adds	r2, r7, #4
    a336:	492e      	ldr	r1, [pc, #184]	; (a3f0 <configure_LED_PWM+0x19c>)
    a338:	4b2e      	ldr	r3, [pc, #184]	; (a3f4 <configure_LED_PWM+0x1a0>)
    a33a:	0018      	movs	r0, r3
    a33c:	4b2a      	ldr	r3, [pc, #168]	; (a3e8 <configure_LED_PWM+0x194>)
    a33e:	4798      	blx	r3
	// Configure the capture channel to read pulse width of PPM_IN pin
	TCC1->CTRLA.reg  |= TCC_CTRLA_CPTEN0;
    a340:	4b2b      	ldr	r3, [pc, #172]	; (a3f0 <configure_LED_PWM+0x19c>)
    a342:	4a2b      	ldr	r2, [pc, #172]	; (a3f0 <configure_LED_PWM+0x19c>)
    a344:	6812      	ldr	r2, [r2, #0]
    a346:	2180      	movs	r1, #128	; 0x80
    a348:	0449      	lsls	r1, r1, #17
    a34a:	430a      	orrs	r2, r1
    a34c:	601a      	str	r2, [r3, #0]
	TCC1->EVCTRL.reg |= TCC_EVCTRL_TCEI1 | TCC_EVCTRL_EVACT1_PWP;
    a34e:	4b28      	ldr	r3, [pc, #160]	; (a3f0 <configure_LED_PWM+0x19c>)
    a350:	4a27      	ldr	r2, [pc, #156]	; (a3f0 <configure_LED_PWM+0x19c>)
    a352:	6a12      	ldr	r2, [r2, #32]
    a354:	4928      	ldr	r1, [pc, #160]	; (a3f8 <configure_LED_PWM+0x1a4>)
    a356:	430a      	orrs	r2, r1
    a358:	621a      	str	r2, [r3, #32]
	tcc_enable(&tcc1);
    a35a:	4b26      	ldr	r3, [pc, #152]	; (a3f4 <configure_LED_PWM+0x1a0>)
    a35c:	0018      	movs	r0, r3
    a35e:	4b23      	ldr	r3, [pc, #140]	; (a3ec <configure_LED_PWM+0x198>)
    a360:	4798      	blx	r3


	tcc_get_config_defaults(&config_tcc, TCC2);
    a362:	4a26      	ldr	r2, [pc, #152]	; (a3fc <configure_LED_PWM+0x1a8>)
    a364:	1d3b      	adds	r3, r7, #4
    a366:	0011      	movs	r1, r2
    a368:	0018      	movs	r0, r3
    a36a:	4b1b      	ldr	r3, [pc, #108]	; (a3d8 <configure_LED_PWM+0x184>)
    a36c:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    a36e:	1d3b      	adds	r3, r7, #4
    a370:	4a1a      	ldr	r2, [pc, #104]	; (a3dc <configure_LED_PWM+0x188>)
    a372:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    a374:	1d3b      	adds	r3, r7, #4
    a376:	2202      	movs	r2, #2
    a378:	761a      	strb	r2, [r3, #24]

	config_tcc.compare.match[0] = 0;
    a37a:	1d3b      	adds	r3, r7, #4
    a37c:	2200      	movs	r2, #0
    a37e:	61da      	str	r2, [r3, #28]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    a380:	1d3b      	adds	r3, r7, #4
    a382:	2298      	movs	r2, #152	; 0x98
    a384:	2101      	movs	r1, #1
    a386:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[0]        = PIN_PA12E_TCC2_WO0;
    a388:	1d3b      	adds	r3, r7, #4
    a38a:	220c      	movs	r2, #12
    a38c:	659a      	str	r2, [r3, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA12E_TCC2_WO0;
    a38e:	1d3b      	adds	r3, r7, #4
    a390:	2204      	movs	r2, #4
    a392:	679a      	str	r2, [r3, #120]	; 0x78
	if(RGB_led_type == RGB_ANALOG){
    a394:	4b12      	ldr	r3, [pc, #72]	; (a3e0 <configure_LED_PWM+0x18c>)
    a396:	781b      	ldrb	r3, [r3, #0]
    a398:	2b00      	cmp	r3, #0
    a39a:	d10c      	bne.n	a3b6 <configure_LED_PWM+0x162>
		config_tcc.pins.enable_wave_out_pin[1] = true;
    a39c:	1d3b      	adds	r3, r7, #4
    a39e:	2299      	movs	r2, #153	; 0x99
    a3a0:	2101      	movs	r1, #1
    a3a2:	5499      	strb	r1, [r3, r2]
		config_tcc.compare.match[1] = 0;
    a3a4:	1d3b      	adds	r3, r7, #4
    a3a6:	2200      	movs	r2, #0
    a3a8:	621a      	str	r2, [r3, #32]
		config_tcc.pins.wave_out_pin[1]        = PIN_PA13E_TCC2_WO1;
    a3aa:	1d3b      	adds	r3, r7, #4
    a3ac:	220d      	movs	r2, #13
    a3ae:	65da      	str	r2, [r3, #92]	; 0x5c
		config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA13E_TCC2_WO1;
    a3b0:	1d3b      	adds	r3, r7, #4
    a3b2:	2204      	movs	r2, #4
    a3b4:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	tcc_init(&tcc2, TCC2, &config_tcc);
    a3b6:	1d3a      	adds	r2, r7, #4
    a3b8:	4910      	ldr	r1, [pc, #64]	; (a3fc <configure_LED_PWM+0x1a8>)
    a3ba:	4b11      	ldr	r3, [pc, #68]	; (a400 <configure_LED_PWM+0x1ac>)
    a3bc:	0018      	movs	r0, r3
    a3be:	4b0a      	ldr	r3, [pc, #40]	; (a3e8 <configure_LED_PWM+0x194>)
    a3c0:	4798      	blx	r3
	tcc_enable(&tcc2);
    a3c2:	4b0f      	ldr	r3, [pc, #60]	; (a400 <configure_LED_PWM+0x1ac>)
    a3c4:	0018      	movs	r0, r3
    a3c6:	4b09      	ldr	r3, [pc, #36]	; (a3ec <configure_LED_PWM+0x198>)
    a3c8:	4798      	blx	r3
}
    a3ca:	46c0      	nop			; (mov r8, r8)
    a3cc:	46bd      	mov	sp, r7
    a3ce:	b02a      	add	sp, #168	; 0xa8
    a3d0:	bd80      	pop	{r7, pc}
    a3d2:	46c0      	nop			; (mov r8, r8)
    a3d4:	42002000 	.word	0x42002000
    a3d8:	00004c29 	.word	0x00004c29
    a3dc:	0000ffff 	.word	0x0000ffff
    a3e0:	20001a4c 	.word	0x20001a4c
    a3e4:	20000b20 	.word	0x20000b20
    a3e8:	00005285 	.word	0x00005285
    a3ec:	00009edd 	.word	0x00009edd
    a3f0:	42002400 	.word	0x42002400
    a3f4:	200019d4 	.word	0x200019d4
    a3f8:	00008030 	.word	0x00008030
    a3fc:	42002800 	.word	0x42002800
    a400:	200018bc 	.word	0x200018bc

0000a404 <setLeftRGB>:

void setLeftRGB(uint16_t red, uint16_t green, uint16_t blue) {
    a404:	b590      	push	{r4, r7, lr}
    a406:	b083      	sub	sp, #12
    a408:	af00      	add	r7, sp, #0
    a40a:	0004      	movs	r4, r0
    a40c:	0008      	movs	r0, r1
    a40e:	0011      	movs	r1, r2
    a410:	1dbb      	adds	r3, r7, #6
    a412:	1c22      	adds	r2, r4, #0
    a414:	801a      	strh	r2, [r3, #0]
    a416:	1d3b      	adds	r3, r7, #4
    a418:	1c02      	adds	r2, r0, #0
    a41a:	801a      	strh	r2, [r3, #0]
    a41c:	1cbb      	adds	r3, r7, #2
    a41e:	1c0a      	adds	r2, r1, #0
    a420:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.LB = blue;
    a422:	4b12      	ldr	r3, [pc, #72]	; (a46c <setLeftRGB+0x68>)
    a424:	1cba      	adds	r2, r7, #2
    a426:	8812      	ldrh	r2, [r2, #0]
    a428:	809a      	strh	r2, [r3, #4]
	RGB_Ouptut.LG = green;
    a42a:	4b10      	ldr	r3, [pc, #64]	; (a46c <setLeftRGB+0x68>)
    a42c:	1d3a      	adds	r2, r7, #4
    a42e:	8812      	ldrh	r2, [r2, #0]
    a430:	805a      	strh	r2, [r3, #2]
	RGB_Ouptut.LR = red;
    a432:	4b0e      	ldr	r3, [pc, #56]	; (a46c <setLeftRGB+0x68>)
    a434:	1dba      	adds	r2, r7, #6
    a436:	8812      	ldrh	r2, [r2, #0]
    a438:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), red);
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
#endif
#if defined(HW_4v1)
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), red); 
    a43a:	1dbb      	adds	r3, r7, #6
    a43c:	881a      	ldrh	r2, [r3, #0]
    a43e:	4b0c      	ldr	r3, [pc, #48]	; (a470 <setLeftRGB+0x6c>)
    a440:	2101      	movs	r1, #1
    a442:	0018      	movs	r0, r3
    a444:	4b0b      	ldr	r3, [pc, #44]	; (a474 <setLeftRGB+0x70>)
    a446:	4798      	blx	r3
	//tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), red); //RG
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
    a448:	1d3b      	adds	r3, r7, #4
    a44a:	881a      	ldrh	r2, [r3, #0]
    a44c:	4b0a      	ldr	r3, [pc, #40]	; (a478 <setLeftRGB+0x74>)
    a44e:	2101      	movs	r1, #1
    a450:	0018      	movs	r0, r3
    a452:	4b08      	ldr	r3, [pc, #32]	; (a474 <setLeftRGB+0x70>)
    a454:	4798      	blx	r3
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
    a456:	1cbb      	adds	r3, r7, #2
    a458:	881a      	ldrh	r2, [r3, #0]
    a45a:	4b08      	ldr	r3, [pc, #32]	; (a47c <setLeftRGB+0x78>)
    a45c:	2101      	movs	r1, #1
    a45e:	0018      	movs	r0, r3
    a460:	4b04      	ldr	r3, [pc, #16]	; (a474 <setLeftRGB+0x70>)
    a462:	4798      	blx	r3
#endif
}
    a464:	46c0      	nop			; (mov r8, r8)
    a466:	46bd      	mov	sp, r7
    a468:	b003      	add	sp, #12
    a46a:	bd90      	pop	{r4, r7, pc}
    a46c:	20000360 	.word	0x20000360
    a470:	20000b20 	.word	0x20000b20
    a474:	0000572d 	.word	0x0000572d
    a478:	200018bc 	.word	0x200018bc
    a47c:	200019d4 	.word	0x200019d4

0000a480 <setRightRGB>:

void setRightRGB(uint16_t red, uint16_t green, uint16_t blue) {
    a480:	b590      	push	{r4, r7, lr}
    a482:	b083      	sub	sp, #12
    a484:	af00      	add	r7, sp, #0
    a486:	0004      	movs	r4, r0
    a488:	0008      	movs	r0, r1
    a48a:	0011      	movs	r1, r2
    a48c:	1dbb      	adds	r3, r7, #6
    a48e:	1c22      	adds	r2, r4, #0
    a490:	801a      	strh	r2, [r3, #0]
    a492:	1d3b      	adds	r3, r7, #4
    a494:	1c02      	adds	r2, r0, #0
    a496:	801a      	strh	r2, [r3, #0]
    a498:	1cbb      	adds	r3, r7, #2
    a49a:	1c0a      	adds	r2, r1, #0
    a49c:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.RB = blue;
    a49e:	4b12      	ldr	r3, [pc, #72]	; (a4e8 <setRightRGB+0x68>)
    a4a0:	1cba      	adds	r2, r7, #2
    a4a2:	8812      	ldrh	r2, [r2, #0]
    a4a4:	815a      	strh	r2, [r3, #10]
	RGB_Ouptut.RG = green;
    a4a6:	4b10      	ldr	r3, [pc, #64]	; (a4e8 <setRightRGB+0x68>)
    a4a8:	1d3a      	adds	r2, r7, #4
    a4aa:	8812      	ldrh	r2, [r2, #0]
    a4ac:	811a      	strh	r2, [r3, #8]
	RGB_Ouptut.RR = red;
    a4ae:	4b0e      	ldr	r3, [pc, #56]	; (a4e8 <setRightRGB+0x68>)
    a4b0:	1dba      	adds	r2, r7, #6
    a4b2:	8812      	ldrh	r2, [r2, #0]
    a4b4:	80da      	strh	r2, [r3, #6]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), red);
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), green);
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), blue);
#endif
#if defined(HW_4v1)
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), red);
    a4b6:	1dbb      	adds	r3, r7, #6
    a4b8:	881a      	ldrh	r2, [r3, #0]
    a4ba:	4b0c      	ldr	r3, [pc, #48]	; (a4ec <setRightRGB+0x6c>)
    a4bc:	2102      	movs	r1, #2
    a4be:	0018      	movs	r0, r3
    a4c0:	4b0b      	ldr	r3, [pc, #44]	; (a4f0 <setRightRGB+0x70>)
    a4c2:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
    a4c4:	1d3b      	adds	r3, r7, #4
    a4c6:	881a      	ldrh	r2, [r3, #0]
    a4c8:	4b08      	ldr	r3, [pc, #32]	; (a4ec <setRightRGB+0x6c>)
    a4ca:	2103      	movs	r1, #3
    a4cc:	0018      	movs	r0, r3
    a4ce:	4b08      	ldr	r3, [pc, #32]	; (a4f0 <setRightRGB+0x70>)
    a4d0:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), blue);
    a4d2:	1cbb      	adds	r3, r7, #2
    a4d4:	881a      	ldrh	r2, [r3, #0]
    a4d6:	4b05      	ldr	r3, [pc, #20]	; (a4ec <setRightRGB+0x6c>)
    a4d8:	2100      	movs	r1, #0
    a4da:	0018      	movs	r0, r3
    a4dc:	4b04      	ldr	r3, [pc, #16]	; (a4f0 <setRightRGB+0x70>)
    a4de:	4798      	blx	r3
	//tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), red);	//RB
	//tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), green); //RR
	//tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), blue); //LR
#endif
}
    a4e0:	46c0      	nop			; (mov r8, r8)
    a4e2:	46bd      	mov	sp, r7
    a4e4:	b003      	add	sp, #12
    a4e6:	bd90      	pop	{r4, r7, pc}
    a4e8:	20000360 	.word	0x20000360
    a4ec:	20000b20 	.word	0x20000b20
    a4f0:	0000572d 	.word	0x0000572d

0000a4f4 <setWhite>:

void setWhite(uint16_t white) {
    a4f4:	b580      	push	{r7, lr}
    a4f6:	b082      	sub	sp, #8
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	0002      	movs	r2, r0
    a4fc:	1dbb      	adds	r3, r7, #6
    a4fe:	801a      	strh	r2, [r3, #0]
	head = white;
    a500:	4b08      	ldr	r3, [pc, #32]	; (a524 <setWhite+0x30>)
    a502:	1dba      	adds	r2, r7, #6
    a504:	8812      	ldrh	r2, [r2, #0]
    a506:	801a      	strh	r2, [r3, #0]
	//tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), white);
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0, white); // Changed to non-pwm due to pulse width reading on PPM_IN pin
    a508:	1dbb      	adds	r3, r7, #6
    a50a:	881b      	ldrh	r3, [r3, #0]
    a50c:	1e5a      	subs	r2, r3, #1
    a50e:	4193      	sbcs	r3, r2
    a510:	b2db      	uxtb	r3, r3
    a512:	0019      	movs	r1, r3
    a514:	2006      	movs	r0, #6
    a516:	4b04      	ldr	r3, [pc, #16]	; (a528 <setWhite+0x34>)
    a518:	4798      	blx	r3
}
    a51a:	46c0      	nop			; (mov r8, r8)
    a51c:	46bd      	mov	sp, r7
    a51e:	b002      	add	sp, #8
    a520:	bd80      	pop	{r7, pc}
    a522:	46c0      	nop			; (mov r8, r8)
    a524:	20000f92 	.word	0x20000f92
    a528:	00009815 	.word	0x00009815

0000a52c <setRed>:

void setRed(uint16_t red) {
    a52c:	b580      	push	{r7, lr}
    a52e:	b082      	sub	sp, #8
    a530:	af00      	add	r7, sp, #0
    a532:	0002      	movs	r2, r0
    a534:	1dbb      	adds	r3, r7, #6
    a536:	801a      	strh	r2, [r3, #0]
	brake = red;
    a538:	4b07      	ldr	r3, [pc, #28]	; (a558 <setRed+0x2c>)
    a53a:	1dba      	adds	r2, r7, #6
    a53c:	8812      	ldrh	r2, [r2, #0]
    a53e:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (0), red);
    a540:	1dbb      	adds	r3, r7, #6
    a542:	881a      	ldrh	r2, [r3, #0]
    a544:	4b05      	ldr	r3, [pc, #20]	; (a55c <setRed+0x30>)
    a546:	2100      	movs	r1, #0
    a548:	0018      	movs	r0, r3
    a54a:	4b05      	ldr	r3, [pc, #20]	; (a560 <setRed+0x34>)
    a54c:	4798      	blx	r3
}
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	46bd      	mov	sp, r7
    a552:	b002      	add	sp, #8
    a554:	bd80      	pop	{r7, pc}
    a556:	46c0      	nop			; (mov r8, r8)
    a558:	2000035c 	.word	0x2000035c
    a55c:	200018bc 	.word	0x200018bc
    a560:	0000572d 	.word	0x0000572d

0000a564 <setAux>:

void setAux(bool aux) {
    a564:	b580      	push	{r7, lr}
    a566:	b082      	sub	sp, #8
    a568:	af00      	add	r7, sp, #0
    a56a:	0002      	movs	r2, r0
    a56c:	1dfb      	adds	r3, r7, #7
    a56e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(HORN_PIN,!aux);
    a570:	1dfb      	adds	r3, r7, #7
    a572:	781b      	ldrb	r3, [r3, #0]
    a574:	1e5a      	subs	r2, r3, #1
    a576:	4193      	sbcs	r3, r2
    a578:	b2db      	uxtb	r3, r3
    a57a:	2201      	movs	r2, #1
    a57c:	4053      	eors	r3, r2
    a57e:	b2db      	uxtb	r3, r3
    a580:	1c1a      	adds	r2, r3, #0
    a582:	2301      	movs	r3, #1
    a584:	4013      	ands	r3, r2
    a586:	b2db      	uxtb	r3, r3
    a588:	0019      	movs	r1, r3
    a58a:	2008      	movs	r0, #8
    a58c:	4b02      	ldr	r3, [pc, #8]	; (a598 <setAux+0x34>)
    a58e:	4798      	blx	r3
}
    a590:	46c0      	nop			; (mov r8, r8)
    a592:	46bd      	mov	sp, r7
    a594:	b002      	add	sp, #8
    a596:	bd80      	pop	{r7, pc}
    a598:	00009815 	.word	0x00009815

0000a59c <setCycleColor>:

struct RGB_Vals setCycleColor(uint16_t _upColor, uint16_t _downColor, int _cycle){
    a59c:	b580      	push	{r7, lr}
    a59e:	b088      	sub	sp, #32
    a5a0:	af00      	add	r7, sp, #0
    a5a2:	60f8      	str	r0, [r7, #12]
    a5a4:	0008      	movs	r0, r1
    a5a6:	0011      	movs	r1, r2
    a5a8:	607b      	str	r3, [r7, #4]
    a5aa:	230a      	movs	r3, #10
    a5ac:	18fb      	adds	r3, r7, r3
    a5ae:	1c02      	adds	r2, r0, #0
    a5b0:	801a      	strh	r2, [r3, #0]
    a5b2:	2308      	movs	r3, #8
    a5b4:	18fb      	adds	r3, r7, r3
    a5b6:	1c0a      	adds	r2, r1, #0
    a5b8:	801a      	strh	r2, [r3, #0]
	struct RGB_Vals color;
	if(_cycle == 0){
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d11f      	bne.n	a600 <setCycleColor+0x64>
		color.LR=_upColor;
    a5c0:	2314      	movs	r3, #20
    a5c2:	18fb      	adds	r3, r7, r3
    a5c4:	220a      	movs	r2, #10
    a5c6:	18ba      	adds	r2, r7, r2
    a5c8:	8812      	ldrh	r2, [r2, #0]
    a5ca:	801a      	strh	r2, [r3, #0]
		color.LG = 0;
    a5cc:	2314      	movs	r3, #20
    a5ce:	18fb      	adds	r3, r7, r3
    a5d0:	2200      	movs	r2, #0
    a5d2:	805a      	strh	r2, [r3, #2]
		color.LB = _downColor;
    a5d4:	2314      	movs	r3, #20
    a5d6:	18fb      	adds	r3, r7, r3
    a5d8:	2208      	movs	r2, #8
    a5da:	18ba      	adds	r2, r7, r2
    a5dc:	8812      	ldrh	r2, [r2, #0]
    a5de:	809a      	strh	r2, [r3, #4]
		color.RR=_upColor;
    a5e0:	2314      	movs	r3, #20
    a5e2:	18fb      	adds	r3, r7, r3
    a5e4:	220a      	movs	r2, #10
    a5e6:	18ba      	adds	r2, r7, r2
    a5e8:	8812      	ldrh	r2, [r2, #0]
    a5ea:	80da      	strh	r2, [r3, #6]
		color.RG = 0;
    a5ec:	2314      	movs	r3, #20
    a5ee:	18fb      	adds	r3, r7, r3
    a5f0:	2200      	movs	r2, #0
    a5f2:	811a      	strh	r2, [r3, #8]
		color.RB = _downColor;
    a5f4:	2314      	movs	r3, #20
    a5f6:	18fb      	adds	r3, r7, r3
    a5f8:	2208      	movs	r2, #8
    a5fa:	18ba      	adds	r2, r7, r2
    a5fc:	8812      	ldrh	r2, [r2, #0]
    a5fe:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 1){
    a600:	687b      	ldr	r3, [r7, #4]
    a602:	2b01      	cmp	r3, #1
    a604:	d11f      	bne.n	a646 <setCycleColor+0xaa>
		color.LR=_downColor;
    a606:	2314      	movs	r3, #20
    a608:	18fb      	adds	r3, r7, r3
    a60a:	2208      	movs	r2, #8
    a60c:	18ba      	adds	r2, r7, r2
    a60e:	8812      	ldrh	r2, [r2, #0]
    a610:	801a      	strh	r2, [r3, #0]
		color.LG = _upColor;
    a612:	2314      	movs	r3, #20
    a614:	18fb      	adds	r3, r7, r3
    a616:	220a      	movs	r2, #10
    a618:	18ba      	adds	r2, r7, r2
    a61a:	8812      	ldrh	r2, [r2, #0]
    a61c:	805a      	strh	r2, [r3, #2]
		color.LB = 0;
    a61e:	2314      	movs	r3, #20
    a620:	18fb      	adds	r3, r7, r3
    a622:	2200      	movs	r2, #0
    a624:	809a      	strh	r2, [r3, #4]
		color.RR=_downColor;
    a626:	2314      	movs	r3, #20
    a628:	18fb      	adds	r3, r7, r3
    a62a:	2208      	movs	r2, #8
    a62c:	18ba      	adds	r2, r7, r2
    a62e:	8812      	ldrh	r2, [r2, #0]
    a630:	80da      	strh	r2, [r3, #6]
		color.RG = _upColor;
    a632:	2314      	movs	r3, #20
    a634:	18fb      	adds	r3, r7, r3
    a636:	220a      	movs	r2, #10
    a638:	18ba      	adds	r2, r7, r2
    a63a:	8812      	ldrh	r2, [r2, #0]
    a63c:	811a      	strh	r2, [r3, #8]
		color.RB = 0;
    a63e:	2314      	movs	r3, #20
    a640:	18fb      	adds	r3, r7, r3
    a642:	2200      	movs	r2, #0
    a644:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 2){
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	2b02      	cmp	r3, #2
    a64a:	d11f      	bne.n	a68c <setCycleColor+0xf0>
		color.LR=0;
    a64c:	2314      	movs	r3, #20
    a64e:	18fb      	adds	r3, r7, r3
    a650:	2200      	movs	r2, #0
    a652:	801a      	strh	r2, [r3, #0]
		color.LG = _downColor;
    a654:	2314      	movs	r3, #20
    a656:	18fb      	adds	r3, r7, r3
    a658:	2208      	movs	r2, #8
    a65a:	18ba      	adds	r2, r7, r2
    a65c:	8812      	ldrh	r2, [r2, #0]
    a65e:	805a      	strh	r2, [r3, #2]
		color.LB = _upColor;
    a660:	2314      	movs	r3, #20
    a662:	18fb      	adds	r3, r7, r3
    a664:	220a      	movs	r2, #10
    a666:	18ba      	adds	r2, r7, r2
    a668:	8812      	ldrh	r2, [r2, #0]
    a66a:	809a      	strh	r2, [r3, #4]
		color.RR=0;
    a66c:	2314      	movs	r3, #20
    a66e:	18fb      	adds	r3, r7, r3
    a670:	2200      	movs	r2, #0
    a672:	80da      	strh	r2, [r3, #6]
		color.RG = _downColor;
    a674:	2314      	movs	r3, #20
    a676:	18fb      	adds	r3, r7, r3
    a678:	2208      	movs	r2, #8
    a67a:	18ba      	adds	r2, r7, r2
    a67c:	8812      	ldrh	r2, [r2, #0]
    a67e:	811a      	strh	r2, [r3, #8]
		color.RB = _upColor;
    a680:	2314      	movs	r3, #20
    a682:	18fb      	adds	r3, r7, r3
    a684:	220a      	movs	r2, #10
    a686:	18ba      	adds	r2, r7, r2
    a688:	8812      	ldrh	r2, [r2, #0]
    a68a:	815a      	strh	r2, [r3, #10]
	}
	return color;
    a68c:	68fa      	ldr	r2, [r7, #12]
    a68e:	2314      	movs	r3, #20
    a690:	18fb      	adds	r3, r7, r3
    a692:	0010      	movs	r0, r2
    a694:	0019      	movs	r1, r3
    a696:	230c      	movs	r3, #12
    a698:	001a      	movs	r2, r3
    a69a:	4b03      	ldr	r3, [pc, #12]	; (a6a8 <setCycleColor+0x10c>)
    a69c:	4798      	blx	r3
}
    a69e:	68f8      	ldr	r0, [r7, #12]
    a6a0:	46bd      	mov	sp, r7
    a6a2:	b008      	add	sp, #32
    a6a4:	bd80      	pop	{r7, pc}
    a6a6:	46c0      	nop			; (mov r8, r8)
    a6a8:	0001b3e9 	.word	0x0001b3e9

0000a6ac <setConstBases>:

void setConstBases(){
    a6ac:	b580      	push	{r7, lr}
    a6ae:	af00      	add	r7, sp, #0
	ColorBase[MODE_ANALOG_STATIC] = COLOR_STATIC;
    a6b0:	4b25      	ldr	r3, [pc, #148]	; (a748 <setConstBases+0x9c>)
    a6b2:	2200      	movs	r2, #0
    a6b4:	701a      	strb	r2, [r3, #0]
	RateBase[MODE_ANALOG_STATIC] = RATE_STATIC;
    a6b6:	4b25      	ldr	r3, [pc, #148]	; (a74c <setConstBases+0xa0>)
    a6b8:	2200      	movs	r2, #0
    a6ba:	701a      	strb	r2, [r3, #0]
	BrightBase[MODE_ANALOG_STATIC] = BRIGHT_STATIC;
    a6bc:	4b24      	ldr	r3, [pc, #144]	; (a750 <setConstBases+0xa4>)
    a6be:	2200      	movs	r2, #0
    a6c0:	701a      	strb	r2, [r3, #0]
	
	ColorBase[MODE_ANALOG_COLOR_CYCLE] = COLOR_COLOR_CYCLE;
    a6c2:	4b21      	ldr	r3, [pc, #132]	; (a748 <setConstBases+0x9c>)
    a6c4:	2201      	movs	r2, #1
    a6c6:	705a      	strb	r2, [r3, #1]
	RateBase[MODE_ANALOG_COLOR_CYCLE] = RATE_STATIC;
    a6c8:	4b20      	ldr	r3, [pc, #128]	; (a74c <setConstBases+0xa0>)
    a6ca:	2200      	movs	r2, #0
    a6cc:	705a      	strb	r2, [r3, #1]
	BrightBase[MODE_ANALOG_COLOR_CYCLE] = BRIGHT_STATIC;
    a6ce:	4b20      	ldr	r3, [pc, #128]	; (a750 <setConstBases+0xa4>)
    a6d0:	2200      	movs	r2, #0
    a6d2:	705a      	strb	r2, [r3, #1]
	
	ColorBase[MODE_ANALOG_COMPASS_CYCLE] = COLOR_COMPASS;
    a6d4:	4b1c      	ldr	r3, [pc, #112]	; (a748 <setConstBases+0x9c>)
    a6d6:	2202      	movs	r2, #2
    a6d8:	709a      	strb	r2, [r3, #2]
	RateBase[MODE_ANALOG_COMPASS_CYCLE] = RATE_STATIC;
    a6da:	4b1c      	ldr	r3, [pc, #112]	; (a74c <setConstBases+0xa0>)
    a6dc:	2200      	movs	r2, #0
    a6de:	709a      	strb	r2, [r3, #2]
	BrightBase[MODE_ANALOG_COMPASS_CYCLE] = BRIGHT_STATIC;
    a6e0:	4b1b      	ldr	r3, [pc, #108]	; (a750 <setConstBases+0xa4>)
    a6e2:	2200      	movs	r2, #0
    a6e4:	709a      	strb	r2, [r3, #2]
	
	ColorBase[MODE_ANALOG_THROTTLE] = COLOR_THROTTLE;
    a6e6:	4b18      	ldr	r3, [pc, #96]	; (a748 <setConstBases+0x9c>)
    a6e8:	2206      	movs	r2, #6
    a6ea:	70da      	strb	r2, [r3, #3]
	RateBase[MODE_ANALOG_THROTTLE] = RATE_STATIC;
    a6ec:	4b17      	ldr	r3, [pc, #92]	; (a74c <setConstBases+0xa0>)
    a6ee:	2200      	movs	r2, #0
    a6f0:	70da      	strb	r2, [r3, #3]
	BrightBase[MODE_ANALOG_THROTTLE] = BRIGHT_STATIC;
    a6f2:	4b17      	ldr	r3, [pc, #92]	; (a750 <setConstBases+0xa4>)
    a6f4:	2200      	movs	r2, #0
    a6f6:	70da      	strb	r2, [r3, #3]
	
	ColorBase[MODE_ANALOG_RPM_CYCLE] = COLOR_COLOR_CYCLE;
    a6f8:	4b13      	ldr	r3, [pc, #76]	; (a748 <setConstBases+0x9c>)
    a6fa:	2201      	movs	r2, #1
    a6fc:	711a      	strb	r2, [r3, #4]
	RateBase[MODE_ANALOG_RPM_CYCLE] = RATE_RPM;
    a6fe:	4b13      	ldr	r3, [pc, #76]	; (a74c <setConstBases+0xa0>)
    a700:	2203      	movs	r2, #3
    a702:	711a      	strb	r2, [r3, #4]
	BrightBase[MODE_ANALOG_RPM_CYCLE] = BRIGHT_RPM;
    a704:	4b12      	ldr	r3, [pc, #72]	; (a750 <setConstBases+0xa4>)
    a706:	2203      	movs	r2, #3
    a708:	711a      	strb	r2, [r3, #4]
	
	ColorBase[MODE_ANALOG_RPM_THROTTLE] = COLOR_THROTTLE;
    a70a:	4b0f      	ldr	r3, [pc, #60]	; (a748 <setConstBases+0x9c>)
    a70c:	2206      	movs	r2, #6
    a70e:	715a      	strb	r2, [r3, #5]
	RateBase[MODE_ANALOG_RPM_THROTTLE] = RATE_STATIC;
    a710:	4b0e      	ldr	r3, [pc, #56]	; (a74c <setConstBases+0xa0>)
    a712:	2200      	movs	r2, #0
    a714:	715a      	strb	r2, [r3, #5]
	BrightBase[MODE_ANALOG_RPM_THROTTLE] = BRIGHT_RPM;
    a716:	4b0e      	ldr	r3, [pc, #56]	; (a750 <setConstBases+0xa4>)
    a718:	2203      	movs	r2, #3
    a71a:	715a      	strb	r2, [r3, #5]
	
	ColorBase[MODE_ANALOG_X_ACCEL] = COLOR_COLOR_CYCLE;
    a71c:	4b0a      	ldr	r3, [pc, #40]	; (a748 <setConstBases+0x9c>)
    a71e:	2201      	movs	r2, #1
    a720:	719a      	strb	r2, [r3, #6]
	RateBase[MODE_ANALOG_X_ACCEL] = RATE_STATIC;
    a722:	4b0a      	ldr	r3, [pc, #40]	; (a74c <setConstBases+0xa0>)
    a724:	2200      	movs	r2, #0
    a726:	719a      	strb	r2, [r3, #6]
	BrightBase[MODE_ANALOG_X_ACCEL] = BRIGHT_X_ACCEL;
    a728:	4b09      	ldr	r3, [pc, #36]	; (a750 <setConstBases+0xa4>)
    a72a:	2205      	movs	r2, #5
    a72c:	719a      	strb	r2, [r3, #6]
	
	ColorBase[MODE_ANALOG_Y_ACCEL] = COLOR_Y_ACCEL;
    a72e:	4b06      	ldr	r3, [pc, #24]	; (a748 <setConstBases+0x9c>)
    a730:	2209      	movs	r2, #9
    a732:	71da      	strb	r2, [r3, #7]
	RateBase[MODE_ANALOG_Y_ACCEL] = RATE_STATIC;
    a734:	4b05      	ldr	r3, [pc, #20]	; (a74c <setConstBases+0xa0>)
    a736:	2200      	movs	r2, #0
    a738:	71da      	strb	r2, [r3, #7]
	BrightBase[MODE_ANALOG_Y_ACCEL] = BRIGHT_STATIC;
    a73a:	4b05      	ldr	r3, [pc, #20]	; (a750 <setConstBases+0xa4>)
    a73c:	2200      	movs	r2, #0
    a73e:	71da      	strb	r2, [r3, #7]
}
    a740:	46c0      	nop			; (mov r8, r8)
    a742:	46bd      	mov	sp, r7
    a744:	bd80      	pop	{r7, pc}
    a746:	46c0      	nop			; (mov r8, r8)
    a748:	2000008c 	.word	0x2000008c
    a74c:	200000a4 	.word	0x200000a4
    a750:	20000098 	.word	0x20000098

0000a754 <ERROR_LEDs>:

// Flash the side LEDs red until restart
// 0: Red, 1: Blue, 2:Green, 3: Teal, 4: Yellow, 5:Purple
void ERROR_LEDs(uint8_t error_type){
    a754:	b580      	push	{r7, lr}
    a756:	b086      	sub	sp, #24
    a758:	af00      	add	r7, sp, #0
    a75a:	0002      	movs	r2, r0
    a75c:	1dfb      	adds	r3, r7, #7
    a75e:	701a      	strb	r2, [r3, #0]
	uint32_t timer = 0;
    a760:	2300      	movs	r3, #0
    a762:	60fb      	str	r3, [r7, #12]

	uint16_t tempR = 0, tempG = 0, tempB = 0;
    a764:	2316      	movs	r3, #22
    a766:	18fb      	adds	r3, r7, r3
    a768:	2200      	movs	r2, #0
    a76a:	801a      	strh	r2, [r3, #0]
    a76c:	2314      	movs	r3, #20
    a76e:	18fb      	adds	r3, r7, r3
    a770:	2200      	movs	r2, #0
    a772:	801a      	strh	r2, [r3, #0]
    a774:	2312      	movs	r3, #18
    a776:	18fb      	adds	r3, r7, r3
    a778:	2200      	movs	r2, #0
    a77a:	801a      	strh	r2, [r3, #0]
	if(error_type == 0 || error_type == 4  || error_type == 5)
    a77c:	1dfb      	adds	r3, r7, #7
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	2b00      	cmp	r3, #0
    a782:	d007      	beq.n	a794 <ERROR_LEDs+0x40>
    a784:	1dfb      	adds	r3, r7, #7
    a786:	781b      	ldrb	r3, [r3, #0]
    a788:	2b04      	cmp	r3, #4
    a78a:	d003      	beq.n	a794 <ERROR_LEDs+0x40>
    a78c:	1dfb      	adds	r3, r7, #7
    a78e:	781b      	ldrb	r3, [r3, #0]
    a790:	2b05      	cmp	r3, #5
    a792:	d104      	bne.n	a79e <ERROR_LEDs+0x4a>
		tempR = 0xFFFF;
    a794:	2316      	movs	r3, #22
    a796:	18fb      	adds	r3, r7, r3
    a798:	2201      	movs	r2, #1
    a79a:	4252      	negs	r2, r2
    a79c:	801a      	strh	r2, [r3, #0]
	if(error_type >= 2 && error_type <= 4)
    a79e:	1dfb      	adds	r3, r7, #7
    a7a0:	781b      	ldrb	r3, [r3, #0]
    a7a2:	2b01      	cmp	r3, #1
    a7a4:	d908      	bls.n	a7b8 <ERROR_LEDs+0x64>
    a7a6:	1dfb      	adds	r3, r7, #7
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	2b04      	cmp	r3, #4
    a7ac:	d804      	bhi.n	a7b8 <ERROR_LEDs+0x64>
		tempG = 0xFFFF;
    a7ae:	2314      	movs	r3, #20
    a7b0:	18fb      	adds	r3, r7, r3
    a7b2:	2201      	movs	r2, #1
    a7b4:	4252      	negs	r2, r2
    a7b6:	801a      	strh	r2, [r3, #0]
	if(error_type == 1 || error_type == 3 || error_type == 5)
    a7b8:	1dfb      	adds	r3, r7, #7
    a7ba:	781b      	ldrb	r3, [r3, #0]
    a7bc:	2b01      	cmp	r3, #1
    a7be:	d007      	beq.n	a7d0 <ERROR_LEDs+0x7c>
    a7c0:	1dfb      	adds	r3, r7, #7
    a7c2:	781b      	ldrb	r3, [r3, #0]
    a7c4:	2b03      	cmp	r3, #3
    a7c6:	d003      	beq.n	a7d0 <ERROR_LEDs+0x7c>
    a7c8:	1dfb      	adds	r3, r7, #7
    a7ca:	781b      	ldrb	r3, [r3, #0]
    a7cc:	2b05      	cmp	r3, #5
    a7ce:	d104      	bne.n	a7da <ERROR_LEDs+0x86>
		tempB = 0xFFFF;
    a7d0:	2312      	movs	r3, #18
    a7d2:	18fb      	adds	r3, r7, r3
    a7d4:	2201      	movs	r2, #1
    a7d6:	4252      	negs	r2, r2
    a7d8:	801a      	strh	r2, [r3, #0]

	while(1){
		setLeftRGB(0,0,0);
    a7da:	2200      	movs	r2, #0
    a7dc:	2100      	movs	r1, #0
    a7de:	2000      	movs	r0, #0
    a7e0:	4b32      	ldr	r3, [pc, #200]	; (a8ac <ERROR_LEDs+0x158>)
    a7e2:	4798      	blx	r3
		setRightRGB(0,0,0);
    a7e4:	2200      	movs	r2, #0
    a7e6:	2100      	movs	r1, #0
    a7e8:	2000      	movs	r0, #0
    a7ea:	4b31      	ldr	r3, [pc, #196]	; (a8b0 <ERROR_LEDs+0x15c>)
    a7ec:	4798      	blx	r3
		
		setRed(0);
    a7ee:	2000      	movs	r0, #0
    a7f0:	4b30      	ldr	r3, [pc, #192]	; (a8b4 <ERROR_LEDs+0x160>)
    a7f2:	4798      	blx	r3
		setWhite(0);
    a7f4:	2000      	movs	r0, #0
    a7f6:	4b30      	ldr	r3, [pc, #192]	; (a8b8 <ERROR_LEDs+0x164>)
    a7f8:	4798      	blx	r3
		setAux(0);
    a7fa:	2000      	movs	r0, #0
    a7fc:	4b2f      	ldr	r3, [pc, #188]	; (a8bc <ERROR_LEDs+0x168>)
    a7fe:	4798      	blx	r3
		port_pin_set_output_level(STAT_LED, false);
    a800:	2100      	movs	r1, #0
    a802:	2023      	movs	r0, #35	; 0x23
    a804:	4b2e      	ldr	r3, [pc, #184]	; (a8c0 <ERROR_LEDs+0x16c>)
    a806:	4798      	blx	r3

		while(millis() - timer < 1000) {
    a808:	e004      	b.n	a814 <ERROR_LEDs+0xc0>
			check_time(&timer);
    a80a:	230c      	movs	r3, #12
    a80c:	18fb      	adds	r3, r7, r3
    a80e:	0018      	movs	r0, r3
    a810:	4b2c      	ldr	r3, [pc, #176]	; (a8c4 <ERROR_LEDs+0x170>)
    a812:	4798      	blx	r3
		while(millis() - timer < 1000) {
    a814:	4b2c      	ldr	r3, [pc, #176]	; (a8c8 <ERROR_LEDs+0x174>)
    a816:	4798      	blx	r3
    a818:	0002      	movs	r2, r0
    a81a:	68fb      	ldr	r3, [r7, #12]
    a81c:	1ad3      	subs	r3, r2, r3
    a81e:	4a2b      	ldr	r2, [pc, #172]	; (a8cc <ERROR_LEDs+0x178>)
    a820:	4293      	cmp	r3, r2
    a822:	d9f2      	bls.n	a80a <ERROR_LEDs+0xb6>
		}
		timer = millis();
    a824:	4b28      	ldr	r3, [pc, #160]	; (a8c8 <ERROR_LEDs+0x174>)
    a826:	4798      	blx	r3
    a828:	0003      	movs	r3, r0
    a82a:	60fb      	str	r3, [r7, #12]

		setLeftRGB(tempR,tempG,tempB);
    a82c:	2312      	movs	r3, #18
    a82e:	18fb      	adds	r3, r7, r3
    a830:	881a      	ldrh	r2, [r3, #0]
    a832:	2314      	movs	r3, #20
    a834:	18fb      	adds	r3, r7, r3
    a836:	8819      	ldrh	r1, [r3, #0]
    a838:	2316      	movs	r3, #22
    a83a:	18fb      	adds	r3, r7, r3
    a83c:	881b      	ldrh	r3, [r3, #0]
    a83e:	0018      	movs	r0, r3
    a840:	4b1a      	ldr	r3, [pc, #104]	; (a8ac <ERROR_LEDs+0x158>)
    a842:	4798      	blx	r3
		setRightRGB(tempR,tempG,tempB);
    a844:	2312      	movs	r3, #18
    a846:	18fb      	adds	r3, r7, r3
    a848:	881a      	ldrh	r2, [r3, #0]
    a84a:	2314      	movs	r3, #20
    a84c:	18fb      	adds	r3, r7, r3
    a84e:	8819      	ldrh	r1, [r3, #0]
    a850:	2316      	movs	r3, #22
    a852:	18fb      	adds	r3, r7, r3
    a854:	881b      	ldrh	r3, [r3, #0]
    a856:	0018      	movs	r0, r3
    a858:	4b15      	ldr	r3, [pc, #84]	; (a8b0 <ERROR_LEDs+0x15c>)
    a85a:	4798      	blx	r3
		
		setRed(0xFFFF);
    a85c:	4b1c      	ldr	r3, [pc, #112]	; (a8d0 <ERROR_LEDs+0x17c>)
    a85e:	0018      	movs	r0, r3
    a860:	4b14      	ldr	r3, [pc, #80]	; (a8b4 <ERROR_LEDs+0x160>)
    a862:	4798      	blx	r3
		setWhite(0xFFFF);
    a864:	4b1a      	ldr	r3, [pc, #104]	; (a8d0 <ERROR_LEDs+0x17c>)
    a866:	0018      	movs	r0, r3
    a868:	4b13      	ldr	r3, [pc, #76]	; (a8b8 <ERROR_LEDs+0x164>)
    a86a:	4798      	blx	r3
		setAux(1);
    a86c:	2001      	movs	r0, #1
    a86e:	4b13      	ldr	r3, [pc, #76]	; (a8bc <ERROR_LEDs+0x168>)
    a870:	4798      	blx	r3
		port_pin_set_output_level(STAT_LED, true);
    a872:	2101      	movs	r1, #1
    a874:	2023      	movs	r0, #35	; 0x23
    a876:	4b12      	ldr	r3, [pc, #72]	; (a8c0 <ERROR_LEDs+0x16c>)
    a878:	4798      	blx	r3

		while(millis() - timer < 250) {
    a87a:	e004      	b.n	a886 <ERROR_LEDs+0x132>
			check_time(&timer);
    a87c:	230c      	movs	r3, #12
    a87e:	18fb      	adds	r3, r7, r3
    a880:	0018      	movs	r0, r3
    a882:	4b10      	ldr	r3, [pc, #64]	; (a8c4 <ERROR_LEDs+0x170>)
    a884:	4798      	blx	r3
		while(millis() - timer < 250) {
    a886:	4b10      	ldr	r3, [pc, #64]	; (a8c8 <ERROR_LEDs+0x174>)
    a888:	4798      	blx	r3
    a88a:	0002      	movs	r2, r0
    a88c:	68fb      	ldr	r3, [r7, #12]
    a88e:	1ad3      	subs	r3, r2, r3
    a890:	2bf9      	cmp	r3, #249	; 0xf9
    a892:	d9f3      	bls.n	a87c <ERROR_LEDs+0x128>
		}
		timer = millis();
    a894:	4b0c      	ldr	r3, [pc, #48]	; (a8c8 <ERROR_LEDs+0x174>)
    a896:	4798      	blx	r3
    a898:	0003      	movs	r3, r0
    a89a:	60fb      	str	r3, [r7, #12]
    a89c:	2312      	movs	r3, #18
    a89e:	18fb      	adds	r3, r7, r3
    a8a0:	2212      	movs	r2, #18
    a8a2:	18ba      	adds	r2, r7, r2
    a8a4:	8812      	ldrh	r2, [r2, #0]
    a8a6:	801a      	strh	r2, [r3, #0]
		setLeftRGB(0,0,0);
    a8a8:	e797      	b.n	a7da <ERROR_LEDs+0x86>
    a8aa:	46c0      	nop			; (mov r8, r8)
    a8ac:	0000a405 	.word	0x0000a405
    a8b0:	0000a481 	.word	0x0000a481
    a8b4:	0000a52d 	.word	0x0000a52d
    a8b8:	0000a4f5 	.word	0x0000a4f5
    a8bc:	0000a565 	.word	0x0000a565
    a8c0:	00009815 	.word	0x00009815
    a8c4:	00009f95 	.word	0x00009f95
    a8c8:	00009f65 	.word	0x00009f65
    a8cc:	000003e7 	.word	0x000003e7
    a8d0:	0000ffff 	.word	0x0000ffff

0000a8d4 <TurnSignal>:
}

// true = left    false = right
uint32_t turnTimer = 0;
uint16_t turnOutput = 0;
void TurnSignal(bool direction){
    a8d4:	b580      	push	{r7, lr}
    a8d6:	b082      	sub	sp, #8
    a8d8:	af00      	add	r7, sp, #0
    a8da:	0002      	movs	r2, r0
    a8dc:	1dfb      	adds	r3, r7, #7
    a8de:	701a      	strb	r2, [r3, #0]

	check_time(&turnTimer);
    a8e0:	4b29      	ldr	r3, [pc, #164]	; (a988 <TurnSignal+0xb4>)
    a8e2:	0018      	movs	r0, r3
    a8e4:	4b29      	ldr	r3, [pc, #164]	; (a98c <TurnSignal+0xb8>)
    a8e6:	4798      	blx	r3
	if(turnOutput == 0x0 && (millis() - turnTimer >= TURN_OFF_TIME)){
    a8e8:	4b29      	ldr	r3, [pc, #164]	; (a990 <TurnSignal+0xbc>)
    a8ea:	881b      	ldrh	r3, [r3, #0]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d113      	bne.n	a918 <TurnSignal+0x44>
    a8f0:	4b28      	ldr	r3, [pc, #160]	; (a994 <TurnSignal+0xc0>)
    a8f2:	4798      	blx	r3
    a8f4:	0002      	movs	r2, r0
    a8f6:	4b24      	ldr	r3, [pc, #144]	; (a988 <TurnSignal+0xb4>)
    a8f8:	681b      	ldr	r3, [r3, #0]
    a8fa:	1ad2      	subs	r2, r2, r3
    a8fc:	2390      	movs	r3, #144	; 0x90
    a8fe:	33ff      	adds	r3, #255	; 0xff
    a900:	429a      	cmp	r2, r3
    a902:	d909      	bls.n	a918 <TurnSignal+0x44>
		turnOutput = 0xFFFF;
    a904:	4b22      	ldr	r3, [pc, #136]	; (a990 <TurnSignal+0xbc>)
    a906:	2201      	movs	r2, #1
    a908:	4252      	negs	r2, r2
    a90a:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    a90c:	4b21      	ldr	r3, [pc, #132]	; (a994 <TurnSignal+0xc0>)
    a90e:	4798      	blx	r3
    a910:	0002      	movs	r2, r0
    a912:	4b1d      	ldr	r3, [pc, #116]	; (a988 <TurnSignal+0xb4>)
    a914:	601a      	str	r2, [r3, #0]
    a916:	e014      	b.n	a942 <TurnSignal+0x6e>
	} else if(turnOutput == 0xFFFF && (millis() - turnTimer >= TURN_ON_TIME)){
    a918:	4b1d      	ldr	r3, [pc, #116]	; (a990 <TurnSignal+0xbc>)
    a91a:	881b      	ldrh	r3, [r3, #0]
    a91c:	4a1e      	ldr	r2, [pc, #120]	; (a998 <TurnSignal+0xc4>)
    a91e:	4293      	cmp	r3, r2
    a920:	d10f      	bne.n	a942 <TurnSignal+0x6e>
    a922:	4b1c      	ldr	r3, [pc, #112]	; (a994 <TurnSignal+0xc0>)
    a924:	4798      	blx	r3
    a926:	0002      	movs	r2, r0
    a928:	4b17      	ldr	r3, [pc, #92]	; (a988 <TurnSignal+0xb4>)
    a92a:	681b      	ldr	r3, [r3, #0]
    a92c:	1ad3      	subs	r3, r2, r3
    a92e:	2bf9      	cmp	r3, #249	; 0xf9
    a930:	d907      	bls.n	a942 <TurnSignal+0x6e>
		turnOutput = 0;
    a932:	4b17      	ldr	r3, [pc, #92]	; (a990 <TurnSignal+0xbc>)
    a934:	2200      	movs	r2, #0
    a936:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    a938:	4b16      	ldr	r3, [pc, #88]	; (a994 <TurnSignal+0xc0>)
    a93a:	4798      	blx	r3
    a93c:	0002      	movs	r2, r0
    a93e:	4b12      	ldr	r3, [pc, #72]	; (a988 <TurnSignal+0xb4>)
    a940:	601a      	str	r2, [r3, #0]
	}

	if(direction == true){
    a942:	1dfb      	adds	r3, r7, #7
    a944:	781b      	ldrb	r3, [r3, #0]
    a946:	2b00      	cmp	r3, #0
    a948:	d00d      	beq.n	a966 <TurnSignal+0x92>
		setLeftRGB(turnOutput,turnOutput,0);
    a94a:	4b11      	ldr	r3, [pc, #68]	; (a990 <TurnSignal+0xbc>)
    a94c:	8818      	ldrh	r0, [r3, #0]
    a94e:	4b10      	ldr	r3, [pc, #64]	; (a990 <TurnSignal+0xbc>)
    a950:	881b      	ldrh	r3, [r3, #0]
    a952:	2200      	movs	r2, #0
    a954:	0019      	movs	r1, r3
    a956:	4b11      	ldr	r3, [pc, #68]	; (a99c <TurnSignal+0xc8>)
    a958:	4798      	blx	r3
		setRightRGB(0,0,0);
    a95a:	2200      	movs	r2, #0
    a95c:	2100      	movs	r1, #0
    a95e:	2000      	movs	r0, #0
    a960:	4b0f      	ldr	r3, [pc, #60]	; (a9a0 <TurnSignal+0xcc>)
    a962:	4798      	blx	r3
	} else {
		setLeftRGB(0,0,0);
		setRightRGB(turnOutput,turnOutput,0);
	}
}
    a964:	e00c      	b.n	a980 <TurnSignal+0xac>
		setLeftRGB(0,0,0);
    a966:	2200      	movs	r2, #0
    a968:	2100      	movs	r1, #0
    a96a:	2000      	movs	r0, #0
    a96c:	4b0b      	ldr	r3, [pc, #44]	; (a99c <TurnSignal+0xc8>)
    a96e:	4798      	blx	r3
		setRightRGB(turnOutput,turnOutput,0);
    a970:	4b07      	ldr	r3, [pc, #28]	; (a990 <TurnSignal+0xbc>)
    a972:	8818      	ldrh	r0, [r3, #0]
    a974:	4b06      	ldr	r3, [pc, #24]	; (a990 <TurnSignal+0xbc>)
    a976:	881b      	ldrh	r3, [r3, #0]
    a978:	2200      	movs	r2, #0
    a97a:	0019      	movs	r1, r3
    a97c:	4b08      	ldr	r3, [pc, #32]	; (a9a0 <TurnSignal+0xcc>)
    a97e:	4798      	blx	r3
}
    a980:	46c0      	nop			; (mov r8, r8)
    a982:	46bd      	mov	sp, r7
    a984:	b002      	add	sp, #8
    a986:	bd80      	pop	{r7, pc}
    a988:	20000394 	.word	0x20000394
    a98c:	00009f95 	.word	0x00009f95
    a990:	20000398 	.word	0x20000398
    a994:	00009f65 	.word	0x00009f65
    a998:	0000ffff 	.word	0x0000ffff
    a99c:	0000a405 	.word	0x0000a405
    a9a0:	0000a481 	.word	0x0000a481

0000a9a4 <BlinkTail>:

//brightnes: 0 - 0xFFFF
//rate: 1-10
uint32_t blink_off_time = 0;
uint32_t blink_on_time = 0;
void BlinkTail(uint16_t brightness, float rate){
    a9a4:	b580      	push	{r7, lr}
    a9a6:	b082      	sub	sp, #8
    a9a8:	af00      	add	r7, sp, #0
    a9aa:	0002      	movs	r2, r0
    a9ac:	6039      	str	r1, [r7, #0]
    a9ae:	1dbb      	adds	r3, r7, #6
    a9b0:	801a      	strh	r2, [r3, #0]
	blink_off_time = 300/(rate/3);
    a9b2:	4b41      	ldr	r3, [pc, #260]	; (aab8 <BlinkTail+0x114>)
    a9b4:	4941      	ldr	r1, [pc, #260]	; (aabc <BlinkTail+0x118>)
    a9b6:	6838      	ldr	r0, [r7, #0]
    a9b8:	4798      	blx	r3
    a9ba:	1c03      	adds	r3, r0, #0
    a9bc:	1c1a      	adds	r2, r3, #0
    a9be:	4b3e      	ldr	r3, [pc, #248]	; (aab8 <BlinkTail+0x114>)
    a9c0:	1c11      	adds	r1, r2, #0
    a9c2:	483f      	ldr	r0, [pc, #252]	; (aac0 <BlinkTail+0x11c>)
    a9c4:	4798      	blx	r3
    a9c6:	1c03      	adds	r3, r0, #0
    a9c8:	1c1a      	adds	r2, r3, #0
    a9ca:	4b3e      	ldr	r3, [pc, #248]	; (aac4 <BlinkTail+0x120>)
    a9cc:	1c10      	adds	r0, r2, #0
    a9ce:	4798      	blx	r3
    a9d0:	0002      	movs	r2, r0
    a9d2:	4b3d      	ldr	r3, [pc, #244]	; (aac8 <BlinkTail+0x124>)
    a9d4:	601a      	str	r2, [r3, #0]
	blink_on_time = 100/(rate/3);
    a9d6:	4b38      	ldr	r3, [pc, #224]	; (aab8 <BlinkTail+0x114>)
    a9d8:	4938      	ldr	r1, [pc, #224]	; (aabc <BlinkTail+0x118>)
    a9da:	6838      	ldr	r0, [r7, #0]
    a9dc:	4798      	blx	r3
    a9de:	1c03      	adds	r3, r0, #0
    a9e0:	1c1a      	adds	r2, r3, #0
    a9e2:	4b35      	ldr	r3, [pc, #212]	; (aab8 <BlinkTail+0x114>)
    a9e4:	1c11      	adds	r1, r2, #0
    a9e6:	4839      	ldr	r0, [pc, #228]	; (aacc <BlinkTail+0x128>)
    a9e8:	4798      	blx	r3
    a9ea:	1c03      	adds	r3, r0, #0
    a9ec:	1c1a      	adds	r2, r3, #0
    a9ee:	4b35      	ldr	r3, [pc, #212]	; (aac4 <BlinkTail+0x120>)
    a9f0:	1c10      	adds	r0, r2, #0
    a9f2:	4798      	blx	r3
    a9f4:	0002      	movs	r2, r0
    a9f6:	4b36      	ldr	r3, [pc, #216]	; (aad0 <BlinkTail+0x12c>)
    a9f8:	601a      	str	r2, [r3, #0]
	static bool tail_on = false;
	static uint32_t timer = 0;
	check_time(&timer);
    a9fa:	4b36      	ldr	r3, [pc, #216]	; (aad4 <BlinkTail+0x130>)
    a9fc:	0018      	movs	r0, r3
    a9fe:	4b36      	ldr	r3, [pc, #216]	; (aad8 <BlinkTail+0x134>)
    aa00:	4798      	blx	r3
	if(tail_on && (millis()-timer) < blink_on_time &&
    aa02:	4b36      	ldr	r3, [pc, #216]	; (aadc <BlinkTail+0x138>)
    aa04:	781b      	ldrb	r3, [r3, #0]
    aa06:	2b00      	cmp	r3, #0
    aa08:	d01c      	beq.n	aa44 <BlinkTail+0xa0>
    aa0a:	4b35      	ldr	r3, [pc, #212]	; (aae0 <BlinkTail+0x13c>)
    aa0c:	4798      	blx	r3
    aa0e:	0002      	movs	r2, r0
    aa10:	4b30      	ldr	r3, [pc, #192]	; (aad4 <BlinkTail+0x130>)
    aa12:	681b      	ldr	r3, [r3, #0]
    aa14:	1ad2      	subs	r2, r2, r3
    aa16:	4b2e      	ldr	r3, [pc, #184]	; (aad0 <BlinkTail+0x12c>)
    aa18:	681b      	ldr	r3, [r3, #0]
    aa1a:	429a      	cmp	r2, r3
    aa1c:	d212      	bcs.n	aa44 <BlinkTail+0xa0>
		!((millis()-timer) >= blink_off_time+blink_on_time)){
    aa1e:	4b30      	ldr	r3, [pc, #192]	; (aae0 <BlinkTail+0x13c>)
    aa20:	4798      	blx	r3
    aa22:	0002      	movs	r2, r0
    aa24:	4b2b      	ldr	r3, [pc, #172]	; (aad4 <BlinkTail+0x130>)
    aa26:	681b      	ldr	r3, [r3, #0]
    aa28:	1ad2      	subs	r2, r2, r3
    aa2a:	4b27      	ldr	r3, [pc, #156]	; (aac8 <BlinkTail+0x124>)
    aa2c:	6819      	ldr	r1, [r3, #0]
    aa2e:	4b28      	ldr	r3, [pc, #160]	; (aad0 <BlinkTail+0x12c>)
    aa30:	681b      	ldr	r3, [r3, #0]
    aa32:	18cb      	adds	r3, r1, r3
	if(tail_on && (millis()-timer) < blink_on_time &&
    aa34:	429a      	cmp	r2, r3
    aa36:	d205      	bcs.n	aa44 <BlinkTail+0xa0>
		setRed(brightness);
    aa38:	1dbb      	adds	r3, r7, #6
    aa3a:	881b      	ldrh	r3, [r3, #0]
    aa3c:	0018      	movs	r0, r3
    aa3e:	4b29      	ldr	r3, [pc, #164]	; (aae4 <BlinkTail+0x140>)
    aa40:	4798      	blx	r3
    aa42:	e034      	b.n	aaae <BlinkTail+0x10a>
	}
	else if(!tail_on && (millis()-timer) < blink_off_time &&
    aa44:	4b25      	ldr	r3, [pc, #148]	; (aadc <BlinkTail+0x138>)
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	2201      	movs	r2, #1
    aa4a:	4053      	eors	r3, r2
    aa4c:	b2db      	uxtb	r3, r3
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d01a      	beq.n	aa88 <BlinkTail+0xe4>
    aa52:	4b23      	ldr	r3, [pc, #140]	; (aae0 <BlinkTail+0x13c>)
    aa54:	4798      	blx	r3
    aa56:	0002      	movs	r2, r0
    aa58:	4b1e      	ldr	r3, [pc, #120]	; (aad4 <BlinkTail+0x130>)
    aa5a:	681b      	ldr	r3, [r3, #0]
    aa5c:	1ad2      	subs	r2, r2, r3
    aa5e:	4b1a      	ldr	r3, [pc, #104]	; (aac8 <BlinkTail+0x124>)
    aa60:	681b      	ldr	r3, [r3, #0]
    aa62:	429a      	cmp	r2, r3
    aa64:	d210      	bcs.n	aa88 <BlinkTail+0xe4>
			!((millis()-timer) >= blink_off_time+blink_on_time)){
    aa66:	4b1e      	ldr	r3, [pc, #120]	; (aae0 <BlinkTail+0x13c>)
    aa68:	4798      	blx	r3
    aa6a:	0002      	movs	r2, r0
    aa6c:	4b19      	ldr	r3, [pc, #100]	; (aad4 <BlinkTail+0x130>)
    aa6e:	681b      	ldr	r3, [r3, #0]
    aa70:	1ad2      	subs	r2, r2, r3
    aa72:	4b15      	ldr	r3, [pc, #84]	; (aac8 <BlinkTail+0x124>)
    aa74:	6819      	ldr	r1, [r3, #0]
    aa76:	4b16      	ldr	r3, [pc, #88]	; (aad0 <BlinkTail+0x12c>)
    aa78:	681b      	ldr	r3, [r3, #0]
    aa7a:	18cb      	adds	r3, r1, r3
	else if(!tail_on && (millis()-timer) < blink_off_time &&
    aa7c:	429a      	cmp	r2, r3
    aa7e:	d203      	bcs.n	aa88 <BlinkTail+0xe4>
		setRed(0);
    aa80:	2000      	movs	r0, #0
    aa82:	4b18      	ldr	r3, [pc, #96]	; (aae4 <BlinkTail+0x140>)
    aa84:	4798      	blx	r3
    aa86:	e012      	b.n	aaae <BlinkTail+0x10a>
	}
	else{
		tail_on = !tail_on;
    aa88:	4b14      	ldr	r3, [pc, #80]	; (aadc <BlinkTail+0x138>)
    aa8a:	781b      	ldrb	r3, [r3, #0]
    aa8c:	1e5a      	subs	r2, r3, #1
    aa8e:	4193      	sbcs	r3, r2
    aa90:	b2db      	uxtb	r3, r3
    aa92:	2201      	movs	r2, #1
    aa94:	4053      	eors	r3, r2
    aa96:	b2db      	uxtb	r3, r3
    aa98:	1c1a      	adds	r2, r3, #0
    aa9a:	2301      	movs	r3, #1
    aa9c:	4013      	ands	r3, r2
    aa9e:	b2da      	uxtb	r2, r3
    aaa0:	4b0e      	ldr	r3, [pc, #56]	; (aadc <BlinkTail+0x138>)
    aaa2:	701a      	strb	r2, [r3, #0]
		timer = millis();
    aaa4:	4b0e      	ldr	r3, [pc, #56]	; (aae0 <BlinkTail+0x13c>)
    aaa6:	4798      	blx	r3
    aaa8:	0002      	movs	r2, r0
    aaaa:	4b0a      	ldr	r3, [pc, #40]	; (aad4 <BlinkTail+0x130>)
    aaac:	601a      	str	r2, [r3, #0]
	}
}
    aaae:	46c0      	nop			; (mov r8, r8)
    aab0:	46bd      	mov	sp, r7
    aab2:	b002      	add	sp, #8
    aab4:	bd80      	pop	{r7, pc}
    aab6:	46c0      	nop			; (mov r8, r8)
    aab8:	00018bcd 	.word	0x00018bcd
    aabc:	40400000 	.word	0x40400000
    aac0:	43960000 	.word	0x43960000
    aac4:	0001883d 	.word	0x0001883d
    aac8:	2000039c 	.word	0x2000039c
    aacc:	42c80000 	.word	0x42c80000
    aad0:	200003a0 	.word	0x200003a0
    aad4:	2000044c 	.word	0x2000044c
    aad8:	00009f95 	.word	0x00009f95
    aadc:	20000450 	.word	0x20000450
    aae0:	00009f65 	.word	0x00009f65
    aae4:	0000a52d 	.word	0x0000a52d

0000aae8 <AnalogSideLights>:

void AnalogSideLights(){
    aae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaea:	b087      	sub	sp, #28
    aaec:	af00      	add	r7, sp, #0
	// brightness is a value from 0 to 1
	static float output_brightness = 0;

	// Variable for controlling the rate or sensitivity in applicable modes
	// brightness is a value from 0 to 1
	float output_rate_sens = 0;
    aaee:	2300      	movs	r3, #0
    aaf0:	617b      	str	r3, [r7, #20]

	switch(RateBase[light_mode]){ // Set the value to be used for rate or sensitivity in the side LED algorithm
    aaf2:	4bd7      	ldr	r3, [pc, #860]	; (ae50 <AnalogSideLights+0x368>)
    aaf4:	781b      	ldrb	r3, [r3, #0]
    aaf6:	001a      	movs	r2, r3
    aaf8:	4bd6      	ldr	r3, [pc, #856]	; (ae54 <AnalogSideLights+0x36c>)
    aafa:	5c9b      	ldrb	r3, [r3, r2]
    aafc:	2b07      	cmp	r3, #7
    aafe:	d900      	bls.n	ab02 <AnalogSideLights+0x1a>
    ab00:	e0c0      	b.n	ac84 <AnalogSideLights+0x19c>
    ab02:	009a      	lsls	r2, r3, #2
    ab04:	4bd4      	ldr	r3, [pc, #848]	; (ae58 <AnalogSideLights+0x370>)
    ab06:	18d3      	adds	r3, r2, r3
    ab08:	681b      	ldr	r3, [r3, #0]
    ab0a:	469f      	mov	pc, r3
		case RATE_STATIC:
		{
			output_rate_sens = RateSens[light_mode];
    ab0c:	4bd0      	ldr	r3, [pc, #832]	; (ae50 <AnalogSideLights+0x368>)
    ab0e:	781b      	ldrb	r3, [r3, #0]
    ab10:	001a      	movs	r2, r3
    ab12:	4bd2      	ldr	r3, [pc, #840]	; (ae5c <AnalogSideLights+0x374>)
    ab14:	0092      	lsls	r2, r2, #2
    ab16:	58d3      	ldr	r3, [r2, r3]
    ab18:	617b      	str	r3, [r7, #20]
			break;
    ab1a:	e0b3      	b.n	ac84 <AnalogSideLights+0x19c>
		}
		case RATE_YAW_RATE:
		{
			if(gzKalman < 0)
    ab1c:	4bd0      	ldr	r3, [pc, #832]	; (ae60 <AnalogSideLights+0x378>)
    ab1e:	681a      	ldr	r2, [r3, #0]
    ab20:	4bd0      	ldr	r3, [pc, #832]	; (ae64 <AnalogSideLights+0x37c>)
    ab22:	2100      	movs	r1, #0
    ab24:	1c10      	adds	r0, r2, #0
    ab26:	4798      	blx	r3
    ab28:	1e03      	subs	r3, r0, #0
    ab2a:	d009      	beq.n	ab40 <AnalogSideLights+0x58>
			output_rate_sens = gzKalman/kalmanGZ_min;
    ab2c:	4bcc      	ldr	r3, [pc, #816]	; (ae60 <AnalogSideLights+0x378>)
    ab2e:	681a      	ldr	r2, [r3, #0]
    ab30:	4bcd      	ldr	r3, [pc, #820]	; (ae68 <AnalogSideLights+0x380>)
    ab32:	6819      	ldr	r1, [r3, #0]
    ab34:	4bcd      	ldr	r3, [pc, #820]	; (ae6c <AnalogSideLights+0x384>)
    ab36:	1c10      	adds	r0, r2, #0
    ab38:	4798      	blx	r3
    ab3a:	1c03      	adds	r3, r0, #0
    ab3c:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = gzKalman/kalmanGZ_max;
			break;
    ab3e:	e0a1      	b.n	ac84 <AnalogSideLights+0x19c>
			output_rate_sens = gzKalman/kalmanGZ_max;
    ab40:	4bc7      	ldr	r3, [pc, #796]	; (ae60 <AnalogSideLights+0x378>)
    ab42:	681a      	ldr	r2, [r3, #0]
    ab44:	4bca      	ldr	r3, [pc, #808]	; (ae70 <AnalogSideLights+0x388>)
    ab46:	6819      	ldr	r1, [r3, #0]
    ab48:	4bc8      	ldr	r3, [pc, #800]	; (ae6c <AnalogSideLights+0x384>)
    ab4a:	1c10      	adds	r0, r2, #0
    ab4c:	4798      	blx	r3
    ab4e:	1c03      	adds	r3, r0, #0
    ab50:	617b      	str	r3, [r7, #20]
			break;
    ab52:	e097      	b.n	ac84 <AnalogSideLights+0x19c>
		}
		case RATE_ROLL_RATE:
		{
			if(gyKalman < 0)
    ab54:	4bc7      	ldr	r3, [pc, #796]	; (ae74 <AnalogSideLights+0x38c>)
    ab56:	681a      	ldr	r2, [r3, #0]
    ab58:	4bc2      	ldr	r3, [pc, #776]	; (ae64 <AnalogSideLights+0x37c>)
    ab5a:	2100      	movs	r1, #0
    ab5c:	1c10      	adds	r0, r2, #0
    ab5e:	4798      	blx	r3
    ab60:	1e03      	subs	r3, r0, #0
    ab62:	d009      	beq.n	ab78 <AnalogSideLights+0x90>
			output_rate_sens = gyKalman/kalmanGY_min;
    ab64:	4bc3      	ldr	r3, [pc, #780]	; (ae74 <AnalogSideLights+0x38c>)
    ab66:	681a      	ldr	r2, [r3, #0]
    ab68:	4bc3      	ldr	r3, [pc, #780]	; (ae78 <AnalogSideLights+0x390>)
    ab6a:	6819      	ldr	r1, [r3, #0]
    ab6c:	4bbf      	ldr	r3, [pc, #764]	; (ae6c <AnalogSideLights+0x384>)
    ab6e:	1c10      	adds	r0, r2, #0
    ab70:	4798      	blx	r3
    ab72:	1c03      	adds	r3, r0, #0
    ab74:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = gyKalman/kalmanGY_max;
			break;
    ab76:	e085      	b.n	ac84 <AnalogSideLights+0x19c>
			output_rate_sens = gyKalman/kalmanGY_max;
    ab78:	4bbe      	ldr	r3, [pc, #760]	; (ae74 <AnalogSideLights+0x38c>)
    ab7a:	681a      	ldr	r2, [r3, #0]
    ab7c:	4bbf      	ldr	r3, [pc, #764]	; (ae7c <AnalogSideLights+0x394>)
    ab7e:	6819      	ldr	r1, [r3, #0]
    ab80:	4bba      	ldr	r3, [pc, #744]	; (ae6c <AnalogSideLights+0x384>)
    ab82:	1c10      	adds	r0, r2, #0
    ab84:	4798      	blx	r3
    ab86:	1c03      	adds	r3, r0, #0
    ab88:	617b      	str	r3, [r7, #20]
			break;
    ab8a:	e07b      	b.n	ac84 <AnalogSideLights+0x19c>
		}
		case RATE_RPM:
		{
			output_rate_sens = (((float)latest_vesc_vals.rpm)/mcconf_limits.max_erpm);
    ab8c:	4bbc      	ldr	r3, [pc, #752]	; (ae80 <AnalogSideLights+0x398>)
    ab8e:	691a      	ldr	r2, [r3, #16]
    ab90:	4bbc      	ldr	r3, [pc, #752]	; (ae84 <AnalogSideLights+0x39c>)
    ab92:	0010      	movs	r0, r2
    ab94:	4798      	blx	r3
    ab96:	1c04      	adds	r4, r0, #0
    ab98:	4bbb      	ldr	r3, [pc, #748]	; (ae88 <AnalogSideLights+0x3a0>)
    ab9a:	699a      	ldr	r2, [r3, #24]
    ab9c:	4bb9      	ldr	r3, [pc, #740]	; (ae84 <AnalogSideLights+0x39c>)
    ab9e:	0010      	movs	r0, r2
    aba0:	4798      	blx	r3
    aba2:	1c02      	adds	r2, r0, #0
    aba4:	4bb1      	ldr	r3, [pc, #708]	; (ae6c <AnalogSideLights+0x384>)
    aba6:	1c11      	adds	r1, r2, #0
    aba8:	1c20      	adds	r0, r4, #0
    abaa:	4798      	blx	r3
    abac:	1c03      	adds	r3, r0, #0
    abae:	617b      	str	r3, [r7, #20]
			break;
    abb0:	e068      	b.n	ac84 <AnalogSideLights+0x19c>
		}
		case RATE_THROTTLE:
		{
			output_rate_sens = remote_y/255.0;
    abb2:	4bb6      	ldr	r3, [pc, #728]	; (ae8c <AnalogSideLights+0x3a4>)
    abb4:	781b      	ldrb	r3, [r3, #0]
    abb6:	001a      	movs	r2, r3
    abb8:	4bb5      	ldr	r3, [pc, #724]	; (ae90 <AnalogSideLights+0x3a8>)
    abba:	0010      	movs	r0, r2
    abbc:	4798      	blx	r3
    abbe:	4cb5      	ldr	r4, [pc, #724]	; (ae94 <AnalogSideLights+0x3ac>)
    abc0:	2200      	movs	r2, #0
    abc2:	4bb5      	ldr	r3, [pc, #724]	; (ae98 <AnalogSideLights+0x3b0>)
    abc4:	47a0      	blx	r4
    abc6:	0003      	movs	r3, r0
    abc8:	000c      	movs	r4, r1
    abca:	0019      	movs	r1, r3
    abcc:	0022      	movs	r2, r4
    abce:	4bb3      	ldr	r3, [pc, #716]	; (ae9c <AnalogSideLights+0x3b4>)
    abd0:	0008      	movs	r0, r1
    abd2:	0011      	movs	r1, r2
    abd4:	4798      	blx	r3
    abd6:	1c03      	adds	r3, r0, #0
    abd8:	617b      	str	r3, [r7, #20]
		}
		break;
    abda:	e053      	b.n	ac84 <AnalogSideLights+0x19c>
		case RATE_X_ACCEL:
		{
			if(axKalman < 0)
    abdc:	4bb0      	ldr	r3, [pc, #704]	; (aea0 <AnalogSideLights+0x3b8>)
    abde:	681a      	ldr	r2, [r3, #0]
    abe0:	4ba0      	ldr	r3, [pc, #640]	; (ae64 <AnalogSideLights+0x37c>)
    abe2:	2100      	movs	r1, #0
    abe4:	1c10      	adds	r0, r2, #0
    abe6:	4798      	blx	r3
    abe8:	1e03      	subs	r3, r0, #0
    abea:	d009      	beq.n	ac00 <AnalogSideLights+0x118>
			output_rate_sens = axKalman/kalmanAX_min;
    abec:	4bac      	ldr	r3, [pc, #688]	; (aea0 <AnalogSideLights+0x3b8>)
    abee:	681a      	ldr	r2, [r3, #0]
    abf0:	4bac      	ldr	r3, [pc, #688]	; (aea4 <AnalogSideLights+0x3bc>)
    abf2:	6819      	ldr	r1, [r3, #0]
    abf4:	4b9d      	ldr	r3, [pc, #628]	; (ae6c <AnalogSideLights+0x384>)
    abf6:	1c10      	adds	r0, r2, #0
    abf8:	4798      	blx	r3
    abfa:	1c03      	adds	r3, r0, #0
    abfc:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = axKalman/kalmanAX_max;
			break;
    abfe:	e041      	b.n	ac84 <AnalogSideLights+0x19c>
			output_rate_sens = axKalman/kalmanAX_max;
    ac00:	4ba7      	ldr	r3, [pc, #668]	; (aea0 <AnalogSideLights+0x3b8>)
    ac02:	681a      	ldr	r2, [r3, #0]
    ac04:	4ba8      	ldr	r3, [pc, #672]	; (aea8 <AnalogSideLights+0x3c0>)
    ac06:	6819      	ldr	r1, [r3, #0]
    ac08:	4b98      	ldr	r3, [pc, #608]	; (ae6c <AnalogSideLights+0x384>)
    ac0a:	1c10      	adds	r0, r2, #0
    ac0c:	4798      	blx	r3
    ac0e:	1c03      	adds	r3, r0, #0
    ac10:	617b      	str	r3, [r7, #20]
			break;
    ac12:	e037      	b.n	ac84 <AnalogSideLights+0x19c>
		}
		case RATE_Y_ACCEL:
		{
			if(ayKalman < 0)
    ac14:	4ba5      	ldr	r3, [pc, #660]	; (aeac <AnalogSideLights+0x3c4>)
    ac16:	681a      	ldr	r2, [r3, #0]
    ac18:	4b92      	ldr	r3, [pc, #584]	; (ae64 <AnalogSideLights+0x37c>)
    ac1a:	2100      	movs	r1, #0
    ac1c:	1c10      	adds	r0, r2, #0
    ac1e:	4798      	blx	r3
    ac20:	1e03      	subs	r3, r0, #0
    ac22:	d009      	beq.n	ac38 <AnalogSideLights+0x150>
			output_rate_sens = ayKalman/kalmanAY_min;
    ac24:	4ba1      	ldr	r3, [pc, #644]	; (aeac <AnalogSideLights+0x3c4>)
    ac26:	681a      	ldr	r2, [r3, #0]
    ac28:	4ba1      	ldr	r3, [pc, #644]	; (aeb0 <AnalogSideLights+0x3c8>)
    ac2a:	6819      	ldr	r1, [r3, #0]
    ac2c:	4b8f      	ldr	r3, [pc, #572]	; (ae6c <AnalogSideLights+0x384>)
    ac2e:	1c10      	adds	r0, r2, #0
    ac30:	4798      	blx	r3
    ac32:	1c03      	adds	r3, r0, #0
    ac34:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = ayKalman/kalmanAY_max;
			break;
    ac36:	e025      	b.n	ac84 <AnalogSideLights+0x19c>
			output_rate_sens = ayKalman/kalmanAY_max;
    ac38:	4b9c      	ldr	r3, [pc, #624]	; (aeac <AnalogSideLights+0x3c4>)
    ac3a:	681a      	ldr	r2, [r3, #0]
    ac3c:	4b9d      	ldr	r3, [pc, #628]	; (aeb4 <AnalogSideLights+0x3cc>)
    ac3e:	6819      	ldr	r1, [r3, #0]
    ac40:	4b8a      	ldr	r3, [pc, #552]	; (ae6c <AnalogSideLights+0x384>)
    ac42:	1c10      	adds	r0, r2, #0
    ac44:	4798      	blx	r3
    ac46:	1c03      	adds	r3, r0, #0
    ac48:	617b      	str	r3, [r7, #20]
			break;
    ac4a:	e01b      	b.n	ac84 <AnalogSideLights+0x19c>
		}
		case RATE_Z_ACCEL:
		{
			if(azKalman < 0)
    ac4c:	4b9a      	ldr	r3, [pc, #616]	; (aeb8 <AnalogSideLights+0x3d0>)
    ac4e:	681a      	ldr	r2, [r3, #0]
    ac50:	4b84      	ldr	r3, [pc, #528]	; (ae64 <AnalogSideLights+0x37c>)
    ac52:	2100      	movs	r1, #0
    ac54:	1c10      	adds	r0, r2, #0
    ac56:	4798      	blx	r3
    ac58:	1e03      	subs	r3, r0, #0
    ac5a:	d009      	beq.n	ac70 <AnalogSideLights+0x188>
			output_rate_sens = azKalman/kalmanAZ_min;
    ac5c:	4b96      	ldr	r3, [pc, #600]	; (aeb8 <AnalogSideLights+0x3d0>)
    ac5e:	681a      	ldr	r2, [r3, #0]
    ac60:	4b96      	ldr	r3, [pc, #600]	; (aebc <AnalogSideLights+0x3d4>)
    ac62:	6819      	ldr	r1, [r3, #0]
    ac64:	4b81      	ldr	r3, [pc, #516]	; (ae6c <AnalogSideLights+0x384>)
    ac66:	1c10      	adds	r0, r2, #0
    ac68:	4798      	blx	r3
    ac6a:	1c03      	adds	r3, r0, #0
    ac6c:	617b      	str	r3, [r7, #20]
			else
			output_rate_sens = azKalman/kalmanAZ_max;
			break;
    ac6e:	e008      	b.n	ac82 <AnalogSideLights+0x19a>
			output_rate_sens = azKalman/kalmanAZ_max;
    ac70:	4b91      	ldr	r3, [pc, #580]	; (aeb8 <AnalogSideLights+0x3d0>)
    ac72:	681a      	ldr	r2, [r3, #0]
    ac74:	4b92      	ldr	r3, [pc, #584]	; (aec0 <AnalogSideLights+0x3d8>)
    ac76:	6819      	ldr	r1, [r3, #0]
    ac78:	4b7c      	ldr	r3, [pc, #496]	; (ae6c <AnalogSideLights+0x384>)
    ac7a:	1c10      	adds	r0, r2, #0
    ac7c:	4798      	blx	r3
    ac7e:	1c03      	adds	r3, r0, #0
    ac80:	617b      	str	r3, [r7, #20]
			break;
    ac82:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	if(output_rate_sens < 0)
    ac84:	4b77      	ldr	r3, [pc, #476]	; (ae64 <AnalogSideLights+0x37c>)
    ac86:	2100      	movs	r1, #0
    ac88:	6978      	ldr	r0, [r7, #20]
    ac8a:	4798      	blx	r3
    ac8c:	1e03      	subs	r3, r0, #0
    ac8e:	d002      	beq.n	ac96 <AnalogSideLights+0x1ae>
	output_rate_sens = 0;
    ac90:	2300      	movs	r3, #0
    ac92:	617b      	str	r3, [r7, #20]
    ac94:	e009      	b.n	acaa <AnalogSideLights+0x1c2>
	else if(output_rate_sens > 1)
    ac96:	4b8b      	ldr	r3, [pc, #556]	; (aec4 <AnalogSideLights+0x3dc>)
    ac98:	21fe      	movs	r1, #254	; 0xfe
    ac9a:	0589      	lsls	r1, r1, #22
    ac9c:	6978      	ldr	r0, [r7, #20]
    ac9e:	4798      	blx	r3
    aca0:	1e03      	subs	r3, r0, #0
    aca2:	d002      	beq.n	acaa <AnalogSideLights+0x1c2>
	output_rate_sens = 1;
    aca4:	23fe      	movs	r3, #254	; 0xfe
    aca6:	059b      	lsls	r3, r3, #22
    aca8:	617b      	str	r3, [r7, #20]

	switch(BrightBase[light_mode]){ // Set the Brightness of the side LEDs
    acaa:	4b69      	ldr	r3, [pc, #420]	; (ae50 <AnalogSideLights+0x368>)
    acac:	781b      	ldrb	r3, [r3, #0]
    acae:	001a      	movs	r2, r3
    acb0:	4b85      	ldr	r3, [pc, #532]	; (aec8 <AnalogSideLights+0x3e0>)
    acb2:	5c9b      	ldrb	r3, [r3, r2]
    acb4:	2b08      	cmp	r3, #8
    acb6:	d900      	bls.n	acba <AnalogSideLights+0x1d2>
    acb8:	e16f      	b.n	af9a <AnalogSideLights+0x4b2>
    acba:	009a      	lsls	r2, r3, #2
    acbc:	4b83      	ldr	r3, [pc, #524]	; (aecc <AnalogSideLights+0x3e4>)
    acbe:	18d3      	adds	r3, r2, r3
    acc0:	681b      	ldr	r3, [r3, #0]
    acc2:	469f      	mov	pc, r3
		case BRIGHT_STATIC:
		{
			output_brightness = Brightness[light_mode];
    acc4:	4b62      	ldr	r3, [pc, #392]	; (ae50 <AnalogSideLights+0x368>)
    acc6:	781b      	ldrb	r3, [r3, #0]
    acc8:	001a      	movs	r2, r3
    acca:	4b81      	ldr	r3, [pc, #516]	; (aed0 <AnalogSideLights+0x3e8>)
    accc:	0092      	lsls	r2, r2, #2
    acce:	58d2      	ldr	r2, [r2, r3]
    acd0:	4b80      	ldr	r3, [pc, #512]	; (aed4 <AnalogSideLights+0x3ec>)
    acd2:	601a      	str	r2, [r3, #0]
			break;
    acd4:	e161      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_YAW_RATE:
		{
			if(gzKalman < 0)
    acd6:	4b62      	ldr	r3, [pc, #392]	; (ae60 <AnalogSideLights+0x378>)
    acd8:	681a      	ldr	r2, [r3, #0]
    acda:	4b62      	ldr	r3, [pc, #392]	; (ae64 <AnalogSideLights+0x37c>)
    acdc:	2100      	movs	r1, #0
    acde:	1c10      	adds	r0, r2, #0
    ace0:	4798      	blx	r3
    ace2:	1e03      	subs	r3, r0, #0
    ace4:	d00b      	beq.n	acfe <AnalogSideLights+0x216>
			output_brightness = gzKalman/kalmanGZ_min;
    ace6:	4b5e      	ldr	r3, [pc, #376]	; (ae60 <AnalogSideLights+0x378>)
    ace8:	681a      	ldr	r2, [r3, #0]
    acea:	4b5f      	ldr	r3, [pc, #380]	; (ae68 <AnalogSideLights+0x380>)
    acec:	6819      	ldr	r1, [r3, #0]
    acee:	4b5f      	ldr	r3, [pc, #380]	; (ae6c <AnalogSideLights+0x384>)
    acf0:	1c10      	adds	r0, r2, #0
    acf2:	4798      	blx	r3
    acf4:	1c03      	adds	r3, r0, #0
    acf6:	1c1a      	adds	r2, r3, #0
    acf8:	4b76      	ldr	r3, [pc, #472]	; (aed4 <AnalogSideLights+0x3ec>)
    acfa:	601a      	str	r2, [r3, #0]
			else
			output_brightness = gzKalman/kalmanGZ_max;
			break;
    acfc:	e14d      	b.n	af9a <AnalogSideLights+0x4b2>
			output_brightness = gzKalman/kalmanGZ_max;
    acfe:	4b58      	ldr	r3, [pc, #352]	; (ae60 <AnalogSideLights+0x378>)
    ad00:	681a      	ldr	r2, [r3, #0]
    ad02:	4b5b      	ldr	r3, [pc, #364]	; (ae70 <AnalogSideLights+0x388>)
    ad04:	6819      	ldr	r1, [r3, #0]
    ad06:	4b59      	ldr	r3, [pc, #356]	; (ae6c <AnalogSideLights+0x384>)
    ad08:	1c10      	adds	r0, r2, #0
    ad0a:	4798      	blx	r3
    ad0c:	1c03      	adds	r3, r0, #0
    ad0e:	1c1a      	adds	r2, r3, #0
    ad10:	4b70      	ldr	r3, [pc, #448]	; (aed4 <AnalogSideLights+0x3ec>)
    ad12:	601a      	str	r2, [r3, #0]
			break;
    ad14:	e141      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_ROLL_RATE:
		{
			if(gyKalman < 0)
    ad16:	4b57      	ldr	r3, [pc, #348]	; (ae74 <AnalogSideLights+0x38c>)
    ad18:	681a      	ldr	r2, [r3, #0]
    ad1a:	4b52      	ldr	r3, [pc, #328]	; (ae64 <AnalogSideLights+0x37c>)
    ad1c:	2100      	movs	r1, #0
    ad1e:	1c10      	adds	r0, r2, #0
    ad20:	4798      	blx	r3
    ad22:	1e03      	subs	r3, r0, #0
    ad24:	d00b      	beq.n	ad3e <AnalogSideLights+0x256>
			output_brightness = gyKalman/kalmanGY_min;
    ad26:	4b53      	ldr	r3, [pc, #332]	; (ae74 <AnalogSideLights+0x38c>)
    ad28:	681a      	ldr	r2, [r3, #0]
    ad2a:	4b53      	ldr	r3, [pc, #332]	; (ae78 <AnalogSideLights+0x390>)
    ad2c:	6819      	ldr	r1, [r3, #0]
    ad2e:	4b4f      	ldr	r3, [pc, #316]	; (ae6c <AnalogSideLights+0x384>)
    ad30:	1c10      	adds	r0, r2, #0
    ad32:	4798      	blx	r3
    ad34:	1c03      	adds	r3, r0, #0
    ad36:	1c1a      	adds	r2, r3, #0
    ad38:	4b66      	ldr	r3, [pc, #408]	; (aed4 <AnalogSideLights+0x3ec>)
    ad3a:	601a      	str	r2, [r3, #0]
			else
			output_brightness = gyKalman/kalmanGY_max;
			break;
    ad3c:	e12d      	b.n	af9a <AnalogSideLights+0x4b2>
			output_brightness = gyKalman/kalmanGY_max;
    ad3e:	4b4d      	ldr	r3, [pc, #308]	; (ae74 <AnalogSideLights+0x38c>)
    ad40:	681a      	ldr	r2, [r3, #0]
    ad42:	4b4e      	ldr	r3, [pc, #312]	; (ae7c <AnalogSideLights+0x394>)
    ad44:	6819      	ldr	r1, [r3, #0]
    ad46:	4b49      	ldr	r3, [pc, #292]	; (ae6c <AnalogSideLights+0x384>)
    ad48:	1c10      	adds	r0, r2, #0
    ad4a:	4798      	blx	r3
    ad4c:	1c03      	adds	r3, r0, #0
    ad4e:	1c1a      	adds	r2, r3, #0
    ad50:	4b60      	ldr	r3, [pc, #384]	; (aed4 <AnalogSideLights+0x3ec>)
    ad52:	601a      	str	r2, [r3, #0]
			break;
    ad54:	e121      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_RPM:
		{
			if(latest_vesc_vals.rpm != 0)
    ad56:	4b4a      	ldr	r3, [pc, #296]	; (ae80 <AnalogSideLights+0x398>)
    ad58:	691b      	ldr	r3, [r3, #16]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d017      	beq.n	ad8e <AnalogSideLights+0x2a6>
			output_brightness = ((float)abs(latest_vesc_vals.rpm))/(float)mcconf_limits.max_erpm;
    ad5e:	4b48      	ldr	r3, [pc, #288]	; (ae80 <AnalogSideLights+0x398>)
    ad60:	691b      	ldr	r3, [r3, #16]
    ad62:	17d9      	asrs	r1, r3, #31
    ad64:	185a      	adds	r2, r3, r1
    ad66:	404a      	eors	r2, r1
    ad68:	4b46      	ldr	r3, [pc, #280]	; (ae84 <AnalogSideLights+0x39c>)
    ad6a:	0010      	movs	r0, r2
    ad6c:	4798      	blx	r3
    ad6e:	1c04      	adds	r4, r0, #0
    ad70:	4b45      	ldr	r3, [pc, #276]	; (ae88 <AnalogSideLights+0x3a0>)
    ad72:	699a      	ldr	r2, [r3, #24]
    ad74:	4b43      	ldr	r3, [pc, #268]	; (ae84 <AnalogSideLights+0x39c>)
    ad76:	0010      	movs	r0, r2
    ad78:	4798      	blx	r3
    ad7a:	1c02      	adds	r2, r0, #0
    ad7c:	4b3b      	ldr	r3, [pc, #236]	; (ae6c <AnalogSideLights+0x384>)
    ad7e:	1c11      	adds	r1, r2, #0
    ad80:	1c20      	adds	r0, r4, #0
    ad82:	4798      	blx	r3
    ad84:	1c03      	adds	r3, r0, #0
    ad86:	1c1a      	adds	r2, r3, #0
    ad88:	4b52      	ldr	r3, [pc, #328]	; (aed4 <AnalogSideLights+0x3ec>)
    ad8a:	601a      	str	r2, [r3, #0]
			else
			output_brightness = 0;
			break;
    ad8c:	e105      	b.n	af9a <AnalogSideLights+0x4b2>
			output_brightness = 0;
    ad8e:	4b51      	ldr	r3, [pc, #324]	; (aed4 <AnalogSideLights+0x3ec>)
    ad90:	2200      	movs	r2, #0
    ad92:	601a      	str	r2, [r3, #0]
			break;
    ad94:	e101      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_THROTTLE:
		{
			output_brightness = remote_y/255.0;
    ad96:	4b3d      	ldr	r3, [pc, #244]	; (ae8c <AnalogSideLights+0x3a4>)
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	001a      	movs	r2, r3
    ad9c:	4b3c      	ldr	r3, [pc, #240]	; (ae90 <AnalogSideLights+0x3a8>)
    ad9e:	0010      	movs	r0, r2
    ada0:	4798      	blx	r3
    ada2:	4c3c      	ldr	r4, [pc, #240]	; (ae94 <AnalogSideLights+0x3ac>)
    ada4:	2200      	movs	r2, #0
    ada6:	4b3c      	ldr	r3, [pc, #240]	; (ae98 <AnalogSideLights+0x3b0>)
    ada8:	47a0      	blx	r4
    adaa:	0003      	movs	r3, r0
    adac:	000c      	movs	r4, r1
    adae:	0019      	movs	r1, r3
    adb0:	0022      	movs	r2, r4
    adb2:	4b3a      	ldr	r3, [pc, #232]	; (ae9c <AnalogSideLights+0x3b4>)
    adb4:	0008      	movs	r0, r1
    adb6:	0011      	movs	r1, r2
    adb8:	4798      	blx	r3
    adba:	1c02      	adds	r2, r0, #0
    adbc:	4b45      	ldr	r3, [pc, #276]	; (aed4 <AnalogSideLights+0x3ec>)
    adbe:	601a      	str	r2, [r3, #0]
			break;
    adc0:	e0eb      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_X_ACCEL:
		{
			if(axKalman < 0){
    adc2:	4b37      	ldr	r3, [pc, #220]	; (aea0 <AnalogSideLights+0x3b8>)
    adc4:	681a      	ldr	r2, [r3, #0]
    adc6:	4b27      	ldr	r3, [pc, #156]	; (ae64 <AnalogSideLights+0x37c>)
    adc8:	2100      	movs	r1, #0
    adca:	1c10      	adds	r0, r2, #0
    adcc:	4798      	blx	r3
    adce:	1e03      	subs	r3, r0, #0
    add0:	d00e      	beq.n	adf0 <AnalogSideLights+0x308>
				output_brightness = axKalman/kalmanAX_min;
    add2:	4b33      	ldr	r3, [pc, #204]	; (aea0 <AnalogSideLights+0x3b8>)
    add4:	681a      	ldr	r2, [r3, #0]
    add6:	4b33      	ldr	r3, [pc, #204]	; (aea4 <AnalogSideLights+0x3bc>)
    add8:	6819      	ldr	r1, [r3, #0]
    adda:	4b24      	ldr	r3, [pc, #144]	; (ae6c <AnalogSideLights+0x384>)
    addc:	1c10      	adds	r0, r2, #0
    adde:	4798      	blx	r3
    ade0:	1c03      	adds	r3, r0, #0
    ade2:	1c1a      	adds	r2, r3, #0
    ade4:	4b3b      	ldr	r3, [pc, #236]	; (aed4 <AnalogSideLights+0x3ec>)
    ade6:	601a      	str	r2, [r3, #0]
				SUPRESS_RIGHT_RGB = true;
    ade8:	4b3b      	ldr	r3, [pc, #236]	; (aed8 <AnalogSideLights+0x3f0>)
    adea:	2201      	movs	r2, #1
    adec:	701a      	strb	r2, [r3, #0]
				} else{
				output_brightness = axKalman/kalmanAX_max;
				SUPRESS_LEFT_RGB = true;
			}
			break;
    adee:	e0d4      	b.n	af9a <AnalogSideLights+0x4b2>
				output_brightness = axKalman/kalmanAX_max;
    adf0:	4b2b      	ldr	r3, [pc, #172]	; (aea0 <AnalogSideLights+0x3b8>)
    adf2:	681a      	ldr	r2, [r3, #0]
    adf4:	4b2c      	ldr	r3, [pc, #176]	; (aea8 <AnalogSideLights+0x3c0>)
    adf6:	6819      	ldr	r1, [r3, #0]
    adf8:	4b1c      	ldr	r3, [pc, #112]	; (ae6c <AnalogSideLights+0x384>)
    adfa:	1c10      	adds	r0, r2, #0
    adfc:	4798      	blx	r3
    adfe:	1c03      	adds	r3, r0, #0
    ae00:	1c1a      	adds	r2, r3, #0
    ae02:	4b34      	ldr	r3, [pc, #208]	; (aed4 <AnalogSideLights+0x3ec>)
    ae04:	601a      	str	r2, [r3, #0]
				SUPRESS_LEFT_RGB = true;
    ae06:	4b35      	ldr	r3, [pc, #212]	; (aedc <AnalogSideLights+0x3f4>)
    ae08:	2201      	movs	r2, #1
    ae0a:	701a      	strb	r2, [r3, #0]
			break;
    ae0c:	e0c5      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_Y_ACCEL:
		{
			if(ayKalman < 0)
    ae0e:	4b27      	ldr	r3, [pc, #156]	; (aeac <AnalogSideLights+0x3c4>)
    ae10:	681a      	ldr	r2, [r3, #0]
    ae12:	4b14      	ldr	r3, [pc, #80]	; (ae64 <AnalogSideLights+0x37c>)
    ae14:	2100      	movs	r1, #0
    ae16:	1c10      	adds	r0, r2, #0
    ae18:	4798      	blx	r3
    ae1a:	1e03      	subs	r3, r0, #0
    ae1c:	d00b      	beq.n	ae36 <AnalogSideLights+0x34e>
			output_brightness = ayKalman/kalmanAY_min;
    ae1e:	4b23      	ldr	r3, [pc, #140]	; (aeac <AnalogSideLights+0x3c4>)
    ae20:	681a      	ldr	r2, [r3, #0]
    ae22:	4b23      	ldr	r3, [pc, #140]	; (aeb0 <AnalogSideLights+0x3c8>)
    ae24:	6819      	ldr	r1, [r3, #0]
    ae26:	4b11      	ldr	r3, [pc, #68]	; (ae6c <AnalogSideLights+0x384>)
    ae28:	1c10      	adds	r0, r2, #0
    ae2a:	4798      	blx	r3
    ae2c:	1c03      	adds	r3, r0, #0
    ae2e:	1c1a      	adds	r2, r3, #0
    ae30:	4b28      	ldr	r3, [pc, #160]	; (aed4 <AnalogSideLights+0x3ec>)
    ae32:	601a      	str	r2, [r3, #0]
			else
			output_brightness = ayKalman/kalmanAY_max;
			break;
    ae34:	e0b1      	b.n	af9a <AnalogSideLights+0x4b2>
			output_brightness = ayKalman/kalmanAY_max;
    ae36:	4b1d      	ldr	r3, [pc, #116]	; (aeac <AnalogSideLights+0x3c4>)
    ae38:	681a      	ldr	r2, [r3, #0]
    ae3a:	4b1e      	ldr	r3, [pc, #120]	; (aeb4 <AnalogSideLights+0x3cc>)
    ae3c:	6819      	ldr	r1, [r3, #0]
    ae3e:	4b0b      	ldr	r3, [pc, #44]	; (ae6c <AnalogSideLights+0x384>)
    ae40:	1c10      	adds	r0, r2, #0
    ae42:	4798      	blx	r3
    ae44:	1c03      	adds	r3, r0, #0
    ae46:	1c1a      	adds	r2, r3, #0
    ae48:	4b22      	ldr	r3, [pc, #136]	; (aed4 <AnalogSideLights+0x3ec>)
    ae4a:	601a      	str	r2, [r3, #0]
			break;
    ae4c:	e0a5      	b.n	af9a <AnalogSideLights+0x4b2>
    ae4e:	46c0      	nop			; (mov r8, r8)
    ae50:	20000034 	.word	0x20000034
    ae54:	200000a4 	.word	0x200000a4
    ae58:	0001b8a4 	.word	0x0001b8a4
    ae5c:	20000044 	.word	0x20000044
    ae60:	2000034c 	.word	0x2000034c
    ae64:	00018799 	.word	0x00018799
    ae68:	2000002c 	.word	0x2000002c
    ae6c:	00018bcd 	.word	0x00018bcd
    ae70:	20000030 	.word	0x20000030
    ae74:	20000348 	.word	0x20000348
    ae78:	20000024 	.word	0x20000024
    ae7c:	20000028 	.word	0x20000028
    ae80:	20000e1c 	.word	0x20000e1c
    ae84:	00019565 	.word	0x00019565
    ae88:	20001a50 	.word	0x20001a50
    ae8c:	2000038e 	.word	0x2000038e
    ae90:	0001b0ad 	.word	0x0001b0ad
    ae94:	00019cb1 	.word	0x00019cb1
    ae98:	406fe000 	.word	0x406fe000
    ae9c:	0001b245 	.word	0x0001b245
    aea0:	20000338 	.word	0x20000338
    aea4:	20000004 	.word	0x20000004
    aea8:	20000008 	.word	0x20000008
    aeac:	2000033c 	.word	0x2000033c
    aeb0:	2000000c 	.word	0x2000000c
    aeb4:	20000010 	.word	0x20000010
    aeb8:	20000340 	.word	0x20000340
    aebc:	20000014 	.word	0x20000014
    aec0:	20000018 	.word	0x20000018
    aec4:	000187c1 	.word	0x000187c1
    aec8:	20000098 	.word	0x20000098
    aecc:	0001b8c4 	.word	0x0001b8c4
    aed0:	20000068 	.word	0x20000068
    aed4:	20000454 	.word	0x20000454
    aed8:	2000036d 	.word	0x2000036d
    aedc:	2000036c 	.word	0x2000036c
		}
		case BRIGHT_Z_ACCEL:
		{
			if(azKalman < 0)
    aee0:	4bba      	ldr	r3, [pc, #744]	; (b1cc <AnalogSideLights+0x6e4>)
    aee2:	681a      	ldr	r2, [r3, #0]
    aee4:	4bba      	ldr	r3, [pc, #744]	; (b1d0 <AnalogSideLights+0x6e8>)
    aee6:	2100      	movs	r1, #0
    aee8:	1c10      	adds	r0, r2, #0
    aeea:	4798      	blx	r3
    aeec:	1e03      	subs	r3, r0, #0
    aeee:	d00b      	beq.n	af08 <AnalogSideLights+0x420>
			output_brightness = azKalman/kalmanAZ_min;
    aef0:	4bb6      	ldr	r3, [pc, #728]	; (b1cc <AnalogSideLights+0x6e4>)
    aef2:	681a      	ldr	r2, [r3, #0]
    aef4:	4bb7      	ldr	r3, [pc, #732]	; (b1d4 <AnalogSideLights+0x6ec>)
    aef6:	6819      	ldr	r1, [r3, #0]
    aef8:	4bb7      	ldr	r3, [pc, #732]	; (b1d8 <AnalogSideLights+0x6f0>)
    aefa:	1c10      	adds	r0, r2, #0
    aefc:	4798      	blx	r3
    aefe:	1c03      	adds	r3, r0, #0
    af00:	1c1a      	adds	r2, r3, #0
    af02:	4bb6      	ldr	r3, [pc, #728]	; (b1dc <AnalogSideLights+0x6f4>)
    af04:	601a      	str	r2, [r3, #0]
			else
			output_brightness = azKalman/kalmanAZ_max;
			break;
    af06:	e048      	b.n	af9a <AnalogSideLights+0x4b2>
			output_brightness = azKalman/kalmanAZ_max;
    af08:	4bb0      	ldr	r3, [pc, #704]	; (b1cc <AnalogSideLights+0x6e4>)
    af0a:	681a      	ldr	r2, [r3, #0]
    af0c:	4bb4      	ldr	r3, [pc, #720]	; (b1e0 <AnalogSideLights+0x6f8>)
    af0e:	6819      	ldr	r1, [r3, #0]
    af10:	4bb1      	ldr	r3, [pc, #708]	; (b1d8 <AnalogSideLights+0x6f0>)
    af12:	1c10      	adds	r0, r2, #0
    af14:	4798      	blx	r3
    af16:	1c03      	adds	r3, r0, #0
    af18:	1c1a      	adds	r2, r3, #0
    af1a:	4bb0      	ldr	r3, [pc, #704]	; (b1dc <AnalogSideLights+0x6f4>)
    af1c:	601a      	str	r2, [r3, #0]
			break;
    af1e:	e03c      	b.n	af9a <AnalogSideLights+0x4b2>
		}
		case BRIGHT_STROBE:
		{
			check_time(&strobe_time);
    af20:	4bb0      	ldr	r3, [pc, #704]	; (b1e4 <AnalogSideLights+0x6fc>)
    af22:	0018      	movs	r0, r3
    af24:	4bb0      	ldr	r3, [pc, #704]	; (b1e8 <AnalogSideLights+0x700>)
    af26:	4798      	blx	r3
			if(output_brightness == 0.0 && (millis()-strobe_time > strobe_off_dur)){
    af28:	4bac      	ldr	r3, [pc, #688]	; (b1dc <AnalogSideLights+0x6f4>)
    af2a:	681a      	ldr	r2, [r3, #0]
    af2c:	4baf      	ldr	r3, [pc, #700]	; (b1ec <AnalogSideLights+0x704>)
    af2e:	2100      	movs	r1, #0
    af30:	1c10      	adds	r0, r2, #0
    af32:	4798      	blx	r3
    af34:	1e03      	subs	r3, r0, #0
    af36:	d013      	beq.n	af60 <AnalogSideLights+0x478>
    af38:	4bad      	ldr	r3, [pc, #692]	; (b1f0 <AnalogSideLights+0x708>)
    af3a:	4798      	blx	r3
    af3c:	0002      	movs	r2, r0
    af3e:	4ba9      	ldr	r3, [pc, #676]	; (b1e4 <AnalogSideLights+0x6fc>)
    af40:	681b      	ldr	r3, [r3, #0]
    af42:	1ad3      	subs	r3, r2, r3
    af44:	4aab      	ldr	r2, [pc, #684]	; (b1f4 <AnalogSideLights+0x70c>)
    af46:	8812      	ldrh	r2, [r2, #0]
    af48:	4293      	cmp	r3, r2
    af4a:	d909      	bls.n	af60 <AnalogSideLights+0x478>
				output_brightness = 1.0;
    af4c:	4ba3      	ldr	r3, [pc, #652]	; (b1dc <AnalogSideLights+0x6f4>)
    af4e:	22fe      	movs	r2, #254	; 0xfe
    af50:	0592      	lsls	r2, r2, #22
    af52:	601a      	str	r2, [r3, #0]
				strobe_time = millis();
    af54:	4ba6      	ldr	r3, [pc, #664]	; (b1f0 <AnalogSideLights+0x708>)
    af56:	4798      	blx	r3
    af58:	0002      	movs	r2, r0
    af5a:	4ba2      	ldr	r3, [pc, #648]	; (b1e4 <AnalogSideLights+0x6fc>)
    af5c:	601a      	str	r2, [r3, #0]
			}
			else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
				output_brightness = 0.0;
				strobe_time = millis();
			}
			break;
    af5e:	e01b      	b.n	af98 <AnalogSideLights+0x4b0>
			else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
    af60:	4b9e      	ldr	r3, [pc, #632]	; (b1dc <AnalogSideLights+0x6f4>)
    af62:	681a      	ldr	r2, [r3, #0]
    af64:	4ba1      	ldr	r3, [pc, #644]	; (b1ec <AnalogSideLights+0x704>)
    af66:	21fe      	movs	r1, #254	; 0xfe
    af68:	0589      	lsls	r1, r1, #22
    af6a:	1c10      	adds	r0, r2, #0
    af6c:	4798      	blx	r3
    af6e:	1e03      	subs	r3, r0, #0
    af70:	d100      	bne.n	af74 <AnalogSideLights+0x48c>
			break;
    af72:	e011      	b.n	af98 <AnalogSideLights+0x4b0>
			else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
    af74:	4b9e      	ldr	r3, [pc, #632]	; (b1f0 <AnalogSideLights+0x708>)
    af76:	4798      	blx	r3
    af78:	0002      	movs	r2, r0
    af7a:	4b9a      	ldr	r3, [pc, #616]	; (b1e4 <AnalogSideLights+0x6fc>)
    af7c:	681b      	ldr	r3, [r3, #0]
    af7e:	1ad3      	subs	r3, r2, r3
    af80:	4a9d      	ldr	r2, [pc, #628]	; (b1f8 <AnalogSideLights+0x710>)
    af82:	8812      	ldrh	r2, [r2, #0]
    af84:	4293      	cmp	r3, r2
    af86:	d907      	bls.n	af98 <AnalogSideLights+0x4b0>
				output_brightness = 0.0;
    af88:	4b94      	ldr	r3, [pc, #592]	; (b1dc <AnalogSideLights+0x6f4>)
    af8a:	2200      	movs	r2, #0
    af8c:	601a      	str	r2, [r3, #0]
				strobe_time = millis();
    af8e:	4b98      	ldr	r3, [pc, #608]	; (b1f0 <AnalogSideLights+0x708>)
    af90:	4798      	blx	r3
    af92:	0002      	movs	r2, r0
    af94:	4b93      	ldr	r3, [pc, #588]	; (b1e4 <AnalogSideLights+0x6fc>)
    af96:	601a      	str	r2, [r3, #0]
			break;
    af98:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	if(output_brightness < 0)
    af9a:	4b90      	ldr	r3, [pc, #576]	; (b1dc <AnalogSideLights+0x6f4>)
    af9c:	681a      	ldr	r2, [r3, #0]
    af9e:	4b8c      	ldr	r3, [pc, #560]	; (b1d0 <AnalogSideLights+0x6e8>)
    afa0:	2100      	movs	r1, #0
    afa2:	1c10      	adds	r0, r2, #0
    afa4:	4798      	blx	r3
    afa6:	1e03      	subs	r3, r0, #0
    afa8:	d003      	beq.n	afb2 <AnalogSideLights+0x4ca>
	output_brightness = 0;
    afaa:	4b8c      	ldr	r3, [pc, #560]	; (b1dc <AnalogSideLights+0x6f4>)
    afac:	2200      	movs	r2, #0
    afae:	601a      	str	r2, [r3, #0]
    afb0:	e00c      	b.n	afcc <AnalogSideLights+0x4e4>
	else if(output_brightness > 1)
    afb2:	4b8a      	ldr	r3, [pc, #552]	; (b1dc <AnalogSideLights+0x6f4>)
    afb4:	681a      	ldr	r2, [r3, #0]
    afb6:	4b91      	ldr	r3, [pc, #580]	; (b1fc <AnalogSideLights+0x714>)
    afb8:	21fe      	movs	r1, #254	; 0xfe
    afba:	0589      	lsls	r1, r1, #22
    afbc:	1c10      	adds	r0, r2, #0
    afbe:	4798      	blx	r3
    afc0:	1e03      	subs	r3, r0, #0
    afc2:	d003      	beq.n	afcc <AnalogSideLights+0x4e4>
	output_brightness = 1;
    afc4:	4b85      	ldr	r3, [pc, #532]	; (b1dc <AnalogSideLights+0x6f4>)
    afc6:	22fe      	movs	r2, #254	; 0xfe
    afc8:	0592      	lsls	r2, r2, #22
    afca:	601a      	str	r2, [r3, #0]

	switch(ColorBase[light_mode]){ // Set the color of the side LEDs
    afcc:	4b8c      	ldr	r3, [pc, #560]	; (b200 <AnalogSideLights+0x718>)
    afce:	781b      	ldrb	r3, [r3, #0]
    afd0:	001a      	movs	r2, r3
    afd2:	4b8c      	ldr	r3, [pc, #560]	; (b204 <AnalogSideLights+0x71c>)
    afd4:	5c9b      	ldrb	r3, [r3, r2]
    afd6:	2b0a      	cmp	r3, #10
    afd8:	d901      	bls.n	afde <AnalogSideLights+0x4f6>
    afda:	f001 f8a3 	bl	c124 <AnalogSideLights+0x163c>
    afde:	009a      	lsls	r2, r3, #2
    afe0:	4b89      	ldr	r3, [pc, #548]	; (b208 <AnalogSideLights+0x720>)
    afe2:	18d3      	adds	r3, r2, r3
    afe4:	681b      	ldr	r3, [r3, #0]
    afe6:	469f      	mov	pc, r3
		case COLOR_STATIC:
		{
			if(light_mode == MODE_ANALOG_STATIC)
    afe8:	4b85      	ldr	r3, [pc, #532]	; (b200 <AnalogSideLights+0x718>)
    afea:	781b      	ldrb	r3, [r3, #0]
    afec:	2b00      	cmp	r3, #0
    afee:	d105      	bne.n	affc <AnalogSideLights+0x514>
			RGB_Ouptut = Static_RGB;
    aff0:	4b86      	ldr	r3, [pc, #536]	; (b20c <AnalogSideLights+0x724>)
    aff2:	4a87      	ldr	r2, [pc, #540]	; (b210 <AnalogSideLights+0x728>)
    aff4:	ca13      	ldmia	r2!, {r0, r1, r4}
    aff6:	c313      	stmia	r3!, {r0, r1, r4}
			else if(light_mode == MODE_ANALOG_CUSTOM)
			RGB_Ouptut = Custom_RGB;
			break;
    aff8:	f001 f891 	bl	c11e <AnalogSideLights+0x1636>
			else if(light_mode == MODE_ANALOG_CUSTOM)
    affc:	4b80      	ldr	r3, [pc, #512]	; (b200 <AnalogSideLights+0x718>)
    affe:	781b      	ldrb	r3, [r3, #0]
    b000:	2b08      	cmp	r3, #8
    b002:	d001      	beq.n	b008 <AnalogSideLights+0x520>
    b004:	f001 f88b 	bl	c11e <AnalogSideLights+0x1636>
			RGB_Ouptut = Custom_RGB;
    b008:	4b80      	ldr	r3, [pc, #512]	; (b20c <AnalogSideLights+0x724>)
    b00a:	4a82      	ldr	r2, [pc, #520]	; (b214 <AnalogSideLights+0x72c>)
    b00c:	ca13      	ldmia	r2!, {r0, r1, r4}
    b00e:	c313      	stmia	r3!, {r0, r1, r4}
			break;
    b010:	f001 f885 	bl	c11e <AnalogSideLights+0x1636>
		}
		case COLOR_COLOR_CYCLE:
		{
			upColor = cycle_index * output_brightness;
    b014:	4b80      	ldr	r3, [pc, #512]	; (b218 <AnalogSideLights+0x730>)
    b016:	681a      	ldr	r2, [r3, #0]
    b018:	4b80      	ldr	r3, [pc, #512]	; (b21c <AnalogSideLights+0x734>)
    b01a:	0010      	movs	r0, r2
    b01c:	4798      	blx	r3
    b01e:	4b6f      	ldr	r3, [pc, #444]	; (b1dc <AnalogSideLights+0x6f4>)
    b020:	681a      	ldr	r2, [r3, #0]
    b022:	4b7f      	ldr	r3, [pc, #508]	; (b220 <AnalogSideLights+0x738>)
    b024:	1c11      	adds	r1, r2, #0
    b026:	4798      	blx	r3
    b028:	1c03      	adds	r3, r0, #0
    b02a:	1c1a      	adds	r2, r3, #0
    b02c:	4b7d      	ldr	r3, [pc, #500]	; (b224 <AnalogSideLights+0x73c>)
    b02e:	1c10      	adds	r0, r2, #0
    b030:	4798      	blx	r3
    b032:	0003      	movs	r3, r0
    b034:	b29a      	uxth	r2, r3
    b036:	4b7c      	ldr	r3, [pc, #496]	; (b228 <AnalogSideLights+0x740>)
    b038:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b03a:	4b77      	ldr	r3, [pc, #476]	; (b218 <AnalogSideLights+0x730>)
    b03c:	681b      	ldr	r3, [r3, #0]
    b03e:	4a7b      	ldr	r2, [pc, #492]	; (b22c <AnalogSideLights+0x744>)
    b040:	1ad2      	subs	r2, r2, r3
    b042:	4b76      	ldr	r3, [pc, #472]	; (b21c <AnalogSideLights+0x734>)
    b044:	0010      	movs	r0, r2
    b046:	4798      	blx	r3
    b048:	4b64      	ldr	r3, [pc, #400]	; (b1dc <AnalogSideLights+0x6f4>)
    b04a:	681a      	ldr	r2, [r3, #0]
    b04c:	4b74      	ldr	r3, [pc, #464]	; (b220 <AnalogSideLights+0x738>)
    b04e:	1c11      	adds	r1, r2, #0
    b050:	4798      	blx	r3
    b052:	1c03      	adds	r3, r0, #0
    b054:	1c1a      	adds	r2, r3, #0
    b056:	4b73      	ldr	r3, [pc, #460]	; (b224 <AnalogSideLights+0x73c>)
    b058:	1c10      	adds	r0, r2, #0
    b05a:	4798      	blx	r3
    b05c:	0003      	movs	r3, r0
    b05e:	b29a      	uxth	r2, r3
    b060:	4b73      	ldr	r3, [pc, #460]	; (b230 <AnalogSideLights+0x748>)
    b062:	801a      	strh	r2, [r3, #0]
			
			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b064:	4b70      	ldr	r3, [pc, #448]	; (b228 <AnalogSideLights+0x740>)
    b066:	8819      	ldrh	r1, [r3, #0]
    b068:	4b71      	ldr	r3, [pc, #452]	; (b230 <AnalogSideLights+0x748>)
    b06a:	881a      	ldrh	r2, [r3, #0]
    b06c:	4b71      	ldr	r3, [pc, #452]	; (b234 <AnalogSideLights+0x74c>)
    b06e:	781b      	ldrb	r3, [r3, #0]
    b070:	4d66      	ldr	r5, [pc, #408]	; (b20c <AnalogSideLights+0x724>)
    b072:	0038      	movs	r0, r7
    b074:	4c70      	ldr	r4, [pc, #448]	; (b238 <AnalogSideLights+0x750>)
    b076:	47a0      	blx	r4
    b078:	003b      	movs	r3, r7
    b07a:	0028      	movs	r0, r5
    b07c:	0019      	movs	r1, r3
    b07e:	230c      	movs	r3, #12
    b080:	001a      	movs	r2, r3
    b082:	4b6e      	ldr	r3, [pc, #440]	; (b23c <AnalogSideLights+0x754>)
    b084:	4798      	blx	r3

			cycle_index += output_rate_sens*max_cycle_rate;
    b086:	4b64      	ldr	r3, [pc, #400]	; (b218 <AnalogSideLights+0x730>)
    b088:	681a      	ldr	r2, [r3, #0]
    b08a:	4b64      	ldr	r3, [pc, #400]	; (b21c <AnalogSideLights+0x734>)
    b08c:	0010      	movs	r0, r2
    b08e:	4798      	blx	r3
    b090:	1c04      	adds	r4, r0, #0
    b092:	4b6b      	ldr	r3, [pc, #428]	; (b240 <AnalogSideLights+0x758>)
    b094:	681a      	ldr	r2, [r3, #0]
    b096:	4b62      	ldr	r3, [pc, #392]	; (b220 <AnalogSideLights+0x738>)
    b098:	6979      	ldr	r1, [r7, #20]
    b09a:	1c10      	adds	r0, r2, #0
    b09c:	4798      	blx	r3
    b09e:	1c03      	adds	r3, r0, #0
    b0a0:	1c1a      	adds	r2, r3, #0
    b0a2:	4b68      	ldr	r3, [pc, #416]	; (b244 <AnalogSideLights+0x75c>)
    b0a4:	1c11      	adds	r1, r2, #0
    b0a6:	1c20      	adds	r0, r4, #0
    b0a8:	4798      	blx	r3
    b0aa:	1c03      	adds	r3, r0, #0
    b0ac:	1c1a      	adds	r2, r3, #0
    b0ae:	4b5d      	ldr	r3, [pc, #372]	; (b224 <AnalogSideLights+0x73c>)
    b0b0:	1c10      	adds	r0, r2, #0
    b0b2:	4798      	blx	r3
    b0b4:	0002      	movs	r2, r0
    b0b6:	4b58      	ldr	r3, [pc, #352]	; (b218 <AnalogSideLights+0x730>)
    b0b8:	601a      	str	r2, [r3, #0]
			if(cycle_index >= 0x0FFFF){
    b0ba:	4b57      	ldr	r3, [pc, #348]	; (b218 <AnalogSideLights+0x730>)
    b0bc:	681b      	ldr	r3, [r3, #0]
    b0be:	4a62      	ldr	r2, [pc, #392]	; (b248 <AnalogSideLights+0x760>)
    b0c0:	4293      	cmp	r3, r2
    b0c2:	d801      	bhi.n	b0c8 <AnalogSideLights+0x5e0>
    b0c4:	f001 f82d 	bl	c122 <AnalogSideLights+0x163a>
				cycle_index = 0;
    b0c8:	4b53      	ldr	r3, [pc, #332]	; (b218 <AnalogSideLights+0x730>)
    b0ca:	2200      	movs	r2, #0
    b0cc:	601a      	str	r2, [r3, #0]
				cycle += 1;
    b0ce:	4b59      	ldr	r3, [pc, #356]	; (b234 <AnalogSideLights+0x74c>)
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	3301      	adds	r3, #1
    b0d4:	b2da      	uxtb	r2, r3
    b0d6:	4b57      	ldr	r3, [pc, #348]	; (b234 <AnalogSideLights+0x74c>)
    b0d8:	701a      	strb	r2, [r3, #0]
				if(cycle == 3)
    b0da:	4b56      	ldr	r3, [pc, #344]	; (b234 <AnalogSideLights+0x74c>)
    b0dc:	781b      	ldrb	r3, [r3, #0]
    b0de:	2b03      	cmp	r3, #3
    b0e0:	d001      	beq.n	b0e6 <AnalogSideLights+0x5fe>
    b0e2:	f001 f81e 	bl	c122 <AnalogSideLights+0x163a>
				cycle = 0;
    b0e6:	4b53      	ldr	r3, [pc, #332]	; (b234 <AnalogSideLights+0x74c>)
    b0e8:	2200      	movs	r2, #0
    b0ea:	701a      	strb	r2, [r3, #0]
			}
			break;
    b0ec:	f001 f819 	bl	c122 <AnalogSideLights+0x163a>
		}
		case COLOR_COMPASS:
		{
			cycle_index = (int)(((((float)0x0FFFF) * 6) / 360) *heading) % 0x0FFFF;
    b0f0:	4b56      	ldr	r3, [pc, #344]	; (b24c <AnalogSideLights+0x764>)
    b0f2:	681a      	ldr	r2, [r3, #0]
    b0f4:	4b4a      	ldr	r3, [pc, #296]	; (b220 <AnalogSideLights+0x738>)
    b0f6:	4956      	ldr	r1, [pc, #344]	; (b250 <AnalogSideLights+0x768>)
    b0f8:	1c10      	adds	r0, r2, #0
    b0fa:	4798      	blx	r3
    b0fc:	1c03      	adds	r3, r0, #0
    b0fe:	1c1a      	adds	r2, r3, #0
    b100:	4b54      	ldr	r3, [pc, #336]	; (b254 <AnalogSideLights+0x76c>)
    b102:	1c10      	adds	r0, r2, #0
    b104:	4798      	blx	r3
    b106:	0002      	movs	r2, r0
    b108:	4b53      	ldr	r3, [pc, #332]	; (b258 <AnalogSideLights+0x770>)
    b10a:	4948      	ldr	r1, [pc, #288]	; (b22c <AnalogSideLights+0x744>)
    b10c:	0010      	movs	r0, r2
    b10e:	4798      	blx	r3
    b110:	000b      	movs	r3, r1
    b112:	001a      	movs	r2, r3
    b114:	4b40      	ldr	r3, [pc, #256]	; (b218 <AnalogSideLights+0x730>)
    b116:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 6) / 360) *heading) / 0x0FFFF;
    b118:	4b4c      	ldr	r3, [pc, #304]	; (b24c <AnalogSideLights+0x764>)
    b11a:	681a      	ldr	r2, [r3, #0]
    b11c:	4b40      	ldr	r3, [pc, #256]	; (b220 <AnalogSideLights+0x738>)
    b11e:	494c      	ldr	r1, [pc, #304]	; (b250 <AnalogSideLights+0x768>)
    b120:	1c10      	adds	r0, r2, #0
    b122:	4798      	blx	r3
    b124:	1c03      	adds	r3, r0, #0
    b126:	1c1a      	adds	r2, r3, #0
    b128:	4b4a      	ldr	r3, [pc, #296]	; (b254 <AnalogSideLights+0x76c>)
    b12a:	1c10      	adds	r0, r2, #0
    b12c:	4798      	blx	r3
    b12e:	0002      	movs	r2, r0
    b130:	4b4a      	ldr	r3, [pc, #296]	; (b25c <AnalogSideLights+0x774>)
    b132:	493e      	ldr	r1, [pc, #248]	; (b22c <AnalogSideLights+0x744>)
    b134:	0010      	movs	r0, r2
    b136:	4798      	blx	r3
    b138:	0003      	movs	r3, r0
    b13a:	b2da      	uxtb	r2, r3
    b13c:	4b3d      	ldr	r3, [pc, #244]	; (b234 <AnalogSideLights+0x74c>)
    b13e:	701a      	strb	r2, [r3, #0]
			upColor = cycle_index * output_brightness;
    b140:	4b35      	ldr	r3, [pc, #212]	; (b218 <AnalogSideLights+0x730>)
    b142:	681a      	ldr	r2, [r3, #0]
    b144:	4b35      	ldr	r3, [pc, #212]	; (b21c <AnalogSideLights+0x734>)
    b146:	0010      	movs	r0, r2
    b148:	4798      	blx	r3
    b14a:	4b24      	ldr	r3, [pc, #144]	; (b1dc <AnalogSideLights+0x6f4>)
    b14c:	681a      	ldr	r2, [r3, #0]
    b14e:	4b34      	ldr	r3, [pc, #208]	; (b220 <AnalogSideLights+0x738>)
    b150:	1c11      	adds	r1, r2, #0
    b152:	4798      	blx	r3
    b154:	1c03      	adds	r3, r0, #0
    b156:	1c1a      	adds	r2, r3, #0
    b158:	4b32      	ldr	r3, [pc, #200]	; (b224 <AnalogSideLights+0x73c>)
    b15a:	1c10      	adds	r0, r2, #0
    b15c:	4798      	blx	r3
    b15e:	0003      	movs	r3, r0
    b160:	b29a      	uxth	r2, r3
    b162:	4b31      	ldr	r3, [pc, #196]	; (b228 <AnalogSideLights+0x740>)
    b164:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b166:	4b2c      	ldr	r3, [pc, #176]	; (b218 <AnalogSideLights+0x730>)
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	4a30      	ldr	r2, [pc, #192]	; (b22c <AnalogSideLights+0x744>)
    b16c:	1ad2      	subs	r2, r2, r3
    b16e:	4b2b      	ldr	r3, [pc, #172]	; (b21c <AnalogSideLights+0x734>)
    b170:	0010      	movs	r0, r2
    b172:	4798      	blx	r3
    b174:	4b19      	ldr	r3, [pc, #100]	; (b1dc <AnalogSideLights+0x6f4>)
    b176:	681a      	ldr	r2, [r3, #0]
    b178:	4b29      	ldr	r3, [pc, #164]	; (b220 <AnalogSideLights+0x738>)
    b17a:	1c11      	adds	r1, r2, #0
    b17c:	4798      	blx	r3
    b17e:	1c03      	adds	r3, r0, #0
    b180:	1c1a      	adds	r2, r3, #0
    b182:	4b28      	ldr	r3, [pc, #160]	; (b224 <AnalogSideLights+0x73c>)
    b184:	1c10      	adds	r0, r2, #0
    b186:	4798      	blx	r3
    b188:	0003      	movs	r3, r0
    b18a:	b29a      	uxth	r2, r3
    b18c:	4b28      	ldr	r3, [pc, #160]	; (b230 <AnalogSideLights+0x748>)
    b18e:	801a      	strh	r2, [r3, #0]

			if(cycle >= 3)
    b190:	4b28      	ldr	r3, [pc, #160]	; (b234 <AnalogSideLights+0x74c>)
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	2b02      	cmp	r3, #2
    b196:	d905      	bls.n	b1a4 <AnalogSideLights+0x6bc>
			cycle -= 3;
    b198:	4b26      	ldr	r3, [pc, #152]	; (b234 <AnalogSideLights+0x74c>)
    b19a:	781b      	ldrb	r3, [r3, #0]
    b19c:	3b03      	subs	r3, #3
    b19e:	b2da      	uxtb	r2, r3
    b1a0:	4b24      	ldr	r3, [pc, #144]	; (b234 <AnalogSideLights+0x74c>)
    b1a2:	701a      	strb	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b1a4:	4b20      	ldr	r3, [pc, #128]	; (b228 <AnalogSideLights+0x740>)
    b1a6:	8819      	ldrh	r1, [r3, #0]
    b1a8:	4b21      	ldr	r3, [pc, #132]	; (b230 <AnalogSideLights+0x748>)
    b1aa:	881a      	ldrh	r2, [r3, #0]
    b1ac:	4b21      	ldr	r3, [pc, #132]	; (b234 <AnalogSideLights+0x74c>)
    b1ae:	781b      	ldrb	r3, [r3, #0]
    b1b0:	4d16      	ldr	r5, [pc, #88]	; (b20c <AnalogSideLights+0x724>)
    b1b2:	0038      	movs	r0, r7
    b1b4:	4c20      	ldr	r4, [pc, #128]	; (b238 <AnalogSideLights+0x750>)
    b1b6:	47a0      	blx	r4
    b1b8:	003b      	movs	r3, r7
    b1ba:	0028      	movs	r0, r5
    b1bc:	0019      	movs	r1, r3
    b1be:	230c      	movs	r3, #12
    b1c0:	001a      	movs	r2, r3
    b1c2:	4b1e      	ldr	r3, [pc, #120]	; (b23c <AnalogSideLights+0x754>)
    b1c4:	4798      	blx	r3
			break;
    b1c6:	f000 ffad 	bl	c124 <AnalogSideLights+0x163c>
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	20000340 	.word	0x20000340
    b1d0:	00018799 	.word	0x00018799
    b1d4:	20000014 	.word	0x20000014
    b1d8:	00018bcd 	.word	0x00018bcd
    b1dc:	20000454 	.word	0x20000454
    b1e0:	20000018 	.word	0x20000018
    b1e4:	2000037c 	.word	0x2000037c
    b1e8:	00009f95 	.word	0x00009f95
    b1ec:	0001878d 	.word	0x0001878d
    b1f0:	00009f65 	.word	0x00009f65
    b1f4:	200000d6 	.word	0x200000d6
    b1f8:	200000d4 	.word	0x200000d4
    b1fc:	000187c1 	.word	0x000187c1
    b200:	20000034 	.word	0x20000034
    b204:	2000008c 	.word	0x2000008c
    b208:	0001b8e8 	.word	0x0001b8e8
    b20c:	20000360 	.word	0x20000360
    b210:	20000038 	.word	0x20000038
    b214:	200000bc 	.word	0x200000bc
    b218:	20000374 	.word	0x20000374
    b21c:	00019605 	.word	0x00019605
    b220:	00018fad 	.word	0x00018fad
    b224:	0001883d 	.word	0x0001883d
    b228:	20000378 	.word	0x20000378
    b22c:	0000ffff 	.word	0x0000ffff
    b230:	2000037a 	.word	0x2000037a
    b234:	20000373 	.word	0x20000373
    b238:	0000a59d 	.word	0x0000a59d
    b23c:	0001b3e9 	.word	0x0001b3e9
    b240:	200000d0 	.word	0x200000d0
    b244:	000188a9 	.word	0x000188a9
    b248:	0000fffe 	.word	0x0000fffe
    b24c:	20000350 	.word	0x20000350
    b250:	44888800 	.word	0x44888800
    b254:	00019525 	.word	0x00019525
    b258:	000186ed 	.word	0x000186ed
    b25c:	00018521 	.word	0x00018521
		}
		case COLOR_YAW_RATE:
		{
			if(gzKalman < 0)
    b260:	4b7b      	ldr	r3, [pc, #492]	; (b450 <AnalogSideLights+0x968>)
    b262:	681a      	ldr	r2, [r3, #0]
    b264:	4b7b      	ldr	r3, [pc, #492]	; (b454 <AnalogSideLights+0x96c>)
    b266:	2100      	movs	r1, #0
    b268:	1c10      	adds	r0, r2, #0
    b26a:	4798      	blx	r3
    b26c:	1e03      	subs	r3, r0, #0
    b26e:	d02a      	beq.n	b2c6 <AnalogSideLights+0x7de>
			cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) % 0x0FFFF;
    b270:	4b79      	ldr	r3, [pc, #484]	; (b458 <AnalogSideLights+0x970>)
    b272:	681a      	ldr	r2, [r3, #0]
    b274:	4b79      	ldr	r3, [pc, #484]	; (b45c <AnalogSideLights+0x974>)
    b276:	1c10      	adds	r0, r2, #0
    b278:	4798      	blx	r3
    b27a:	0002      	movs	r2, r0
    b27c:	000b      	movs	r3, r1
    b27e:	4c78      	ldr	r4, [pc, #480]	; (b460 <AnalogSideLights+0x978>)
    b280:	2000      	movs	r0, #0
    b282:	4978      	ldr	r1, [pc, #480]	; (b464 <AnalogSideLights+0x97c>)
    b284:	47a0      	blx	r4
    b286:	0003      	movs	r3, r0
    b288:	000c      	movs	r4, r1
    b28a:	001d      	movs	r5, r3
    b28c:	0026      	movs	r6, r4
    b28e:	4b70      	ldr	r3, [pc, #448]	; (b450 <AnalogSideLights+0x968>)
    b290:	681a      	ldr	r2, [r3, #0]
    b292:	4b72      	ldr	r3, [pc, #456]	; (b45c <AnalogSideLights+0x974>)
    b294:	1c10      	adds	r0, r2, #0
    b296:	4798      	blx	r3
    b298:	0002      	movs	r2, r0
    b29a:	000b      	movs	r3, r1
    b29c:	4c72      	ldr	r4, [pc, #456]	; (b468 <AnalogSideLights+0x980>)
    b29e:	0028      	movs	r0, r5
    b2a0:	0031      	movs	r1, r6
    b2a2:	47a0      	blx	r4
    b2a4:	0003      	movs	r3, r0
    b2a6:	000c      	movs	r4, r1
    b2a8:	0019      	movs	r1, r3
    b2aa:	0022      	movs	r2, r4
    b2ac:	4b6f      	ldr	r3, [pc, #444]	; (b46c <AnalogSideLights+0x984>)
    b2ae:	0008      	movs	r0, r1
    b2b0:	0011      	movs	r1, r2
    b2b2:	4798      	blx	r3
    b2b4:	0002      	movs	r2, r0
    b2b6:	4b6e      	ldr	r3, [pc, #440]	; (b470 <AnalogSideLights+0x988>)
    b2b8:	496e      	ldr	r1, [pc, #440]	; (b474 <AnalogSideLights+0x98c>)
    b2ba:	0010      	movs	r0, r2
    b2bc:	4798      	blx	r3
    b2be:	000b      	movs	r3, r1
    b2c0:	001a      	movs	r2, r3
    b2c2:	4b6d      	ldr	r3, [pc, #436]	; (b478 <AnalogSideLights+0x990>)
    b2c4:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) / 0x0FFFF;
    b2c6:	4b64      	ldr	r3, [pc, #400]	; (b458 <AnalogSideLights+0x970>)
    b2c8:	681a      	ldr	r2, [r3, #0]
    b2ca:	4b64      	ldr	r3, [pc, #400]	; (b45c <AnalogSideLights+0x974>)
    b2cc:	1c10      	adds	r0, r2, #0
    b2ce:	4798      	blx	r3
    b2d0:	0002      	movs	r2, r0
    b2d2:	000b      	movs	r3, r1
    b2d4:	4c62      	ldr	r4, [pc, #392]	; (b460 <AnalogSideLights+0x978>)
    b2d6:	2000      	movs	r0, #0
    b2d8:	4962      	ldr	r1, [pc, #392]	; (b464 <AnalogSideLights+0x97c>)
    b2da:	47a0      	blx	r4
    b2dc:	0003      	movs	r3, r0
    b2de:	000c      	movs	r4, r1
    b2e0:	001d      	movs	r5, r3
    b2e2:	0026      	movs	r6, r4
    b2e4:	4b5a      	ldr	r3, [pc, #360]	; (b450 <AnalogSideLights+0x968>)
    b2e6:	681a      	ldr	r2, [r3, #0]
    b2e8:	4b5c      	ldr	r3, [pc, #368]	; (b45c <AnalogSideLights+0x974>)
    b2ea:	1c10      	adds	r0, r2, #0
    b2ec:	4798      	blx	r3
    b2ee:	0002      	movs	r2, r0
    b2f0:	000b      	movs	r3, r1
    b2f2:	4c5d      	ldr	r4, [pc, #372]	; (b468 <AnalogSideLights+0x980>)
    b2f4:	0028      	movs	r0, r5
    b2f6:	0031      	movs	r1, r6
    b2f8:	47a0      	blx	r4
    b2fa:	0003      	movs	r3, r0
    b2fc:	000c      	movs	r4, r1
    b2fe:	0019      	movs	r1, r3
    b300:	0022      	movs	r2, r4
    b302:	4b5a      	ldr	r3, [pc, #360]	; (b46c <AnalogSideLights+0x984>)
    b304:	0008      	movs	r0, r1
    b306:	0011      	movs	r1, r2
    b308:	4798      	blx	r3
    b30a:	0002      	movs	r2, r0
    b30c:	4b5b      	ldr	r3, [pc, #364]	; (b47c <AnalogSideLights+0x994>)
    b30e:	4959      	ldr	r1, [pc, #356]	; (b474 <AnalogSideLights+0x98c>)
    b310:	0010      	movs	r0, r2
    b312:	4798      	blx	r3
    b314:	0003      	movs	r3, r0
    b316:	b2da      	uxtb	r2, r3
    b318:	4b59      	ldr	r3, [pc, #356]	; (b480 <AnalogSideLights+0x998>)
    b31a:	701a      	strb	r2, [r3, #0]
			if(gzKalman >= 0){
    b31c:	4b4c      	ldr	r3, [pc, #304]	; (b450 <AnalogSideLights+0x968>)
    b31e:	681a      	ldr	r2, [r3, #0]
    b320:	4b58      	ldr	r3, [pc, #352]	; (b484 <AnalogSideLights+0x99c>)
    b322:	2100      	movs	r1, #0
    b324:	1c10      	adds	r0, r2, #0
    b326:	4798      	blx	r3
    b328:	1e03      	subs	r3, r0, #0
    b32a:	d055      	beq.n	b3d8 <AnalogSideLights+0x8f0>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) % 0x0FFFF;
    b32c:	4b56      	ldr	r3, [pc, #344]	; (b488 <AnalogSideLights+0x9a0>)
    b32e:	681a      	ldr	r2, [r3, #0]
    b330:	4b4a      	ldr	r3, [pc, #296]	; (b45c <AnalogSideLights+0x974>)
    b332:	1c10      	adds	r0, r2, #0
    b334:	4798      	blx	r3
    b336:	0002      	movs	r2, r0
    b338:	000b      	movs	r3, r1
    b33a:	4c49      	ldr	r4, [pc, #292]	; (b460 <AnalogSideLights+0x978>)
    b33c:	2000      	movs	r0, #0
    b33e:	4949      	ldr	r1, [pc, #292]	; (b464 <AnalogSideLights+0x97c>)
    b340:	47a0      	blx	r4
    b342:	0003      	movs	r3, r0
    b344:	000c      	movs	r4, r1
    b346:	001d      	movs	r5, r3
    b348:	0026      	movs	r6, r4
    b34a:	4b41      	ldr	r3, [pc, #260]	; (b450 <AnalogSideLights+0x968>)
    b34c:	681a      	ldr	r2, [r3, #0]
    b34e:	4b43      	ldr	r3, [pc, #268]	; (b45c <AnalogSideLights+0x974>)
    b350:	1c10      	adds	r0, r2, #0
    b352:	4798      	blx	r3
    b354:	0002      	movs	r2, r0
    b356:	000b      	movs	r3, r1
    b358:	4c43      	ldr	r4, [pc, #268]	; (b468 <AnalogSideLights+0x980>)
    b35a:	0028      	movs	r0, r5
    b35c:	0031      	movs	r1, r6
    b35e:	47a0      	blx	r4
    b360:	0003      	movs	r3, r0
    b362:	000c      	movs	r4, r1
    b364:	0019      	movs	r1, r3
    b366:	0022      	movs	r2, r4
    b368:	4b40      	ldr	r3, [pc, #256]	; (b46c <AnalogSideLights+0x984>)
    b36a:	0008      	movs	r0, r1
    b36c:	0011      	movs	r1, r2
    b36e:	4798      	blx	r3
    b370:	0002      	movs	r2, r0
    b372:	4b3f      	ldr	r3, [pc, #252]	; (b470 <AnalogSideLights+0x988>)
    b374:	493f      	ldr	r1, [pc, #252]	; (b474 <AnalogSideLights+0x98c>)
    b376:	0010      	movs	r0, r2
    b378:	4798      	blx	r3
    b37a:	000b      	movs	r3, r1
    b37c:	001a      	movs	r2, r3
    b37e:	4b3e      	ldr	r3, [pc, #248]	; (b478 <AnalogSideLights+0x990>)
    b380:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) / 0x0FFFF;
    b382:	4b41      	ldr	r3, [pc, #260]	; (b488 <AnalogSideLights+0x9a0>)
    b384:	681a      	ldr	r2, [r3, #0]
    b386:	4b35      	ldr	r3, [pc, #212]	; (b45c <AnalogSideLights+0x974>)
    b388:	1c10      	adds	r0, r2, #0
    b38a:	4798      	blx	r3
    b38c:	0002      	movs	r2, r0
    b38e:	000b      	movs	r3, r1
    b390:	4c33      	ldr	r4, [pc, #204]	; (b460 <AnalogSideLights+0x978>)
    b392:	2000      	movs	r0, #0
    b394:	4933      	ldr	r1, [pc, #204]	; (b464 <AnalogSideLights+0x97c>)
    b396:	47a0      	blx	r4
    b398:	0003      	movs	r3, r0
    b39a:	000c      	movs	r4, r1
    b39c:	001d      	movs	r5, r3
    b39e:	0026      	movs	r6, r4
    b3a0:	4b2b      	ldr	r3, [pc, #172]	; (b450 <AnalogSideLights+0x968>)
    b3a2:	681a      	ldr	r2, [r3, #0]
    b3a4:	4b2d      	ldr	r3, [pc, #180]	; (b45c <AnalogSideLights+0x974>)
    b3a6:	1c10      	adds	r0, r2, #0
    b3a8:	4798      	blx	r3
    b3aa:	0002      	movs	r2, r0
    b3ac:	000b      	movs	r3, r1
    b3ae:	4c2e      	ldr	r4, [pc, #184]	; (b468 <AnalogSideLights+0x980>)
    b3b0:	0028      	movs	r0, r5
    b3b2:	0031      	movs	r1, r6
    b3b4:	47a0      	blx	r4
    b3b6:	0003      	movs	r3, r0
    b3b8:	000c      	movs	r4, r1
    b3ba:	0019      	movs	r1, r3
    b3bc:	0022      	movs	r2, r4
    b3be:	4b2b      	ldr	r3, [pc, #172]	; (b46c <AnalogSideLights+0x984>)
    b3c0:	0008      	movs	r0, r1
    b3c2:	0011      	movs	r1, r2
    b3c4:	4798      	blx	r3
    b3c6:	0002      	movs	r2, r0
    b3c8:	4b2c      	ldr	r3, [pc, #176]	; (b47c <AnalogSideLights+0x994>)
    b3ca:	492a      	ldr	r1, [pc, #168]	; (b474 <AnalogSideLights+0x98c>)
    b3cc:	0010      	movs	r0, r2
    b3ce:	4798      	blx	r3
    b3d0:	0003      	movs	r3, r0
    b3d2:	b2da      	uxtb	r2, r3
    b3d4:	4b2a      	ldr	r3, [pc, #168]	; (b480 <AnalogSideLights+0x998>)
    b3d6:	701a      	strb	r2, [r3, #0]
			}
			
			upColor = cycle_index * output_brightness;
    b3d8:	4b27      	ldr	r3, [pc, #156]	; (b478 <AnalogSideLights+0x990>)
    b3da:	681a      	ldr	r2, [r3, #0]
    b3dc:	4b2b      	ldr	r3, [pc, #172]	; (b48c <AnalogSideLights+0x9a4>)
    b3de:	0010      	movs	r0, r2
    b3e0:	4798      	blx	r3
    b3e2:	4b2b      	ldr	r3, [pc, #172]	; (b490 <AnalogSideLights+0x9a8>)
    b3e4:	681a      	ldr	r2, [r3, #0]
    b3e6:	4b2b      	ldr	r3, [pc, #172]	; (b494 <AnalogSideLights+0x9ac>)
    b3e8:	1c11      	adds	r1, r2, #0
    b3ea:	4798      	blx	r3
    b3ec:	1c03      	adds	r3, r0, #0
    b3ee:	1c1a      	adds	r2, r3, #0
    b3f0:	4b29      	ldr	r3, [pc, #164]	; (b498 <AnalogSideLights+0x9b0>)
    b3f2:	1c10      	adds	r0, r2, #0
    b3f4:	4798      	blx	r3
    b3f6:	0003      	movs	r3, r0
    b3f8:	b29a      	uxth	r2, r3
    b3fa:	4b28      	ldr	r3, [pc, #160]	; (b49c <AnalogSideLights+0x9b4>)
    b3fc:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b3fe:	4b1e      	ldr	r3, [pc, #120]	; (b478 <AnalogSideLights+0x990>)
    b400:	681b      	ldr	r3, [r3, #0]
    b402:	4a1c      	ldr	r2, [pc, #112]	; (b474 <AnalogSideLights+0x98c>)
    b404:	1ad2      	subs	r2, r2, r3
    b406:	4b21      	ldr	r3, [pc, #132]	; (b48c <AnalogSideLights+0x9a4>)
    b408:	0010      	movs	r0, r2
    b40a:	4798      	blx	r3
    b40c:	4b20      	ldr	r3, [pc, #128]	; (b490 <AnalogSideLights+0x9a8>)
    b40e:	681a      	ldr	r2, [r3, #0]
    b410:	4b20      	ldr	r3, [pc, #128]	; (b494 <AnalogSideLights+0x9ac>)
    b412:	1c11      	adds	r1, r2, #0
    b414:	4798      	blx	r3
    b416:	1c03      	adds	r3, r0, #0
    b418:	1c1a      	adds	r2, r3, #0
    b41a:	4b1f      	ldr	r3, [pc, #124]	; (b498 <AnalogSideLights+0x9b0>)
    b41c:	1c10      	adds	r0, r2, #0
    b41e:	4798      	blx	r3
    b420:	0003      	movs	r3, r0
    b422:	b29a      	uxth	r2, r3
    b424:	4b1e      	ldr	r3, [pc, #120]	; (b4a0 <AnalogSideLights+0x9b8>)
    b426:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b428:	4b1c      	ldr	r3, [pc, #112]	; (b49c <AnalogSideLights+0x9b4>)
    b42a:	8819      	ldrh	r1, [r3, #0]
    b42c:	4b1c      	ldr	r3, [pc, #112]	; (b4a0 <AnalogSideLights+0x9b8>)
    b42e:	881a      	ldrh	r2, [r3, #0]
    b430:	4b13      	ldr	r3, [pc, #76]	; (b480 <AnalogSideLights+0x998>)
    b432:	781b      	ldrb	r3, [r3, #0]
    b434:	4d1b      	ldr	r5, [pc, #108]	; (b4a4 <AnalogSideLights+0x9bc>)
    b436:	0038      	movs	r0, r7
    b438:	4c1b      	ldr	r4, [pc, #108]	; (b4a8 <AnalogSideLights+0x9c0>)
    b43a:	47a0      	blx	r4
    b43c:	003b      	movs	r3, r7
    b43e:	0028      	movs	r0, r5
    b440:	0019      	movs	r1, r3
    b442:	230c      	movs	r3, #12
    b444:	001a      	movs	r2, r3
    b446:	4b19      	ldr	r3, [pc, #100]	; (b4ac <AnalogSideLights+0x9c4>)
    b448:	4798      	blx	r3
			break;
    b44a:	f000 fe6b 	bl	c124 <AnalogSideLights+0x163c>
    b44e:	46c0      	nop			; (mov r8, r8)
    b450:	2000034c 	.word	0x2000034c
    b454:	00018799 	.word	0x00018799
    b458:	2000002c 	.word	0x2000002c
    b45c:	0001b1a1 	.word	0x0001b1a1
    b460:	00019cb1 	.word	0x00019cb1
    b464:	4107ffe8 	.word	0x4107ffe8
    b468:	0001a519 	.word	0x0001a519
    b46c:	0001b045 	.word	0x0001b045
    b470:	000186ed 	.word	0x000186ed
    b474:	0000ffff 	.word	0x0000ffff
    b478:	20000374 	.word	0x20000374
    b47c:	00018521 	.word	0x00018521
    b480:	20000373 	.word	0x20000373
    b484:	000187d5 	.word	0x000187d5
    b488:	20000030 	.word	0x20000030
    b48c:	00019605 	.word	0x00019605
    b490:	20000454 	.word	0x20000454
    b494:	00018fad 	.word	0x00018fad
    b498:	0001883d 	.word	0x0001883d
    b49c:	20000378 	.word	0x20000378
    b4a0:	2000037a 	.word	0x2000037a
    b4a4:	20000360 	.word	0x20000360
    b4a8:	0000a59d 	.word	0x0000a59d
    b4ac:	0001b3e9 	.word	0x0001b3e9
		}
		case COLOR_ROLL_RATE:
		{
			if(gyKalman < 0)
    b4b0:	4b7b      	ldr	r3, [pc, #492]	; (b6a0 <AnalogSideLights+0xbb8>)
    b4b2:	681a      	ldr	r2, [r3, #0]
    b4b4:	4b7b      	ldr	r3, [pc, #492]	; (b6a4 <AnalogSideLights+0xbbc>)
    b4b6:	2100      	movs	r1, #0
    b4b8:	1c10      	adds	r0, r2, #0
    b4ba:	4798      	blx	r3
    b4bc:	1e03      	subs	r3, r0, #0
    b4be:	d02a      	beq.n	b516 <AnalogSideLights+0xa2e>
			cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) % 0x0FFFF;
    b4c0:	4b79      	ldr	r3, [pc, #484]	; (b6a8 <AnalogSideLights+0xbc0>)
    b4c2:	681a      	ldr	r2, [r3, #0]
    b4c4:	4b79      	ldr	r3, [pc, #484]	; (b6ac <AnalogSideLights+0xbc4>)
    b4c6:	1c10      	adds	r0, r2, #0
    b4c8:	4798      	blx	r3
    b4ca:	0002      	movs	r2, r0
    b4cc:	000b      	movs	r3, r1
    b4ce:	4c78      	ldr	r4, [pc, #480]	; (b6b0 <AnalogSideLights+0xbc8>)
    b4d0:	2000      	movs	r0, #0
    b4d2:	4978      	ldr	r1, [pc, #480]	; (b6b4 <AnalogSideLights+0xbcc>)
    b4d4:	47a0      	blx	r4
    b4d6:	0003      	movs	r3, r0
    b4d8:	000c      	movs	r4, r1
    b4da:	001d      	movs	r5, r3
    b4dc:	0026      	movs	r6, r4
    b4de:	4b70      	ldr	r3, [pc, #448]	; (b6a0 <AnalogSideLights+0xbb8>)
    b4e0:	681a      	ldr	r2, [r3, #0]
    b4e2:	4b72      	ldr	r3, [pc, #456]	; (b6ac <AnalogSideLights+0xbc4>)
    b4e4:	1c10      	adds	r0, r2, #0
    b4e6:	4798      	blx	r3
    b4e8:	0002      	movs	r2, r0
    b4ea:	000b      	movs	r3, r1
    b4ec:	4c72      	ldr	r4, [pc, #456]	; (b6b8 <AnalogSideLights+0xbd0>)
    b4ee:	0028      	movs	r0, r5
    b4f0:	0031      	movs	r1, r6
    b4f2:	47a0      	blx	r4
    b4f4:	0003      	movs	r3, r0
    b4f6:	000c      	movs	r4, r1
    b4f8:	0019      	movs	r1, r3
    b4fa:	0022      	movs	r2, r4
    b4fc:	4b6f      	ldr	r3, [pc, #444]	; (b6bc <AnalogSideLights+0xbd4>)
    b4fe:	0008      	movs	r0, r1
    b500:	0011      	movs	r1, r2
    b502:	4798      	blx	r3
    b504:	0002      	movs	r2, r0
    b506:	4b6e      	ldr	r3, [pc, #440]	; (b6c0 <AnalogSideLights+0xbd8>)
    b508:	496e      	ldr	r1, [pc, #440]	; (b6c4 <AnalogSideLights+0xbdc>)
    b50a:	0010      	movs	r0, r2
    b50c:	4798      	blx	r3
    b50e:	000b      	movs	r3, r1
    b510:	001a      	movs	r2, r3
    b512:	4b6d      	ldr	r3, [pc, #436]	; (b6c8 <AnalogSideLights+0xbe0>)
    b514:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) / 0x0FFFF;
    b516:	4b64      	ldr	r3, [pc, #400]	; (b6a8 <AnalogSideLights+0xbc0>)
    b518:	681a      	ldr	r2, [r3, #0]
    b51a:	4b64      	ldr	r3, [pc, #400]	; (b6ac <AnalogSideLights+0xbc4>)
    b51c:	1c10      	adds	r0, r2, #0
    b51e:	4798      	blx	r3
    b520:	0002      	movs	r2, r0
    b522:	000b      	movs	r3, r1
    b524:	4c62      	ldr	r4, [pc, #392]	; (b6b0 <AnalogSideLights+0xbc8>)
    b526:	2000      	movs	r0, #0
    b528:	4962      	ldr	r1, [pc, #392]	; (b6b4 <AnalogSideLights+0xbcc>)
    b52a:	47a0      	blx	r4
    b52c:	0003      	movs	r3, r0
    b52e:	000c      	movs	r4, r1
    b530:	001d      	movs	r5, r3
    b532:	0026      	movs	r6, r4
    b534:	4b5a      	ldr	r3, [pc, #360]	; (b6a0 <AnalogSideLights+0xbb8>)
    b536:	681a      	ldr	r2, [r3, #0]
    b538:	4b5c      	ldr	r3, [pc, #368]	; (b6ac <AnalogSideLights+0xbc4>)
    b53a:	1c10      	adds	r0, r2, #0
    b53c:	4798      	blx	r3
    b53e:	0002      	movs	r2, r0
    b540:	000b      	movs	r3, r1
    b542:	4c5d      	ldr	r4, [pc, #372]	; (b6b8 <AnalogSideLights+0xbd0>)
    b544:	0028      	movs	r0, r5
    b546:	0031      	movs	r1, r6
    b548:	47a0      	blx	r4
    b54a:	0003      	movs	r3, r0
    b54c:	000c      	movs	r4, r1
    b54e:	0019      	movs	r1, r3
    b550:	0022      	movs	r2, r4
    b552:	4b5a      	ldr	r3, [pc, #360]	; (b6bc <AnalogSideLights+0xbd4>)
    b554:	0008      	movs	r0, r1
    b556:	0011      	movs	r1, r2
    b558:	4798      	blx	r3
    b55a:	0002      	movs	r2, r0
    b55c:	4b5b      	ldr	r3, [pc, #364]	; (b6cc <AnalogSideLights+0xbe4>)
    b55e:	4959      	ldr	r1, [pc, #356]	; (b6c4 <AnalogSideLights+0xbdc>)
    b560:	0010      	movs	r0, r2
    b562:	4798      	blx	r3
    b564:	0003      	movs	r3, r0
    b566:	b2da      	uxtb	r2, r3
    b568:	4b59      	ldr	r3, [pc, #356]	; (b6d0 <AnalogSideLights+0xbe8>)
    b56a:	701a      	strb	r2, [r3, #0]
			if(gyKalman >= 0){
    b56c:	4b4c      	ldr	r3, [pc, #304]	; (b6a0 <AnalogSideLights+0xbb8>)
    b56e:	681a      	ldr	r2, [r3, #0]
    b570:	4b58      	ldr	r3, [pc, #352]	; (b6d4 <AnalogSideLights+0xbec>)
    b572:	2100      	movs	r1, #0
    b574:	1c10      	adds	r0, r2, #0
    b576:	4798      	blx	r3
    b578:	1e03      	subs	r3, r0, #0
    b57a:	d055      	beq.n	b628 <AnalogSideLights+0xb40>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) % 0x0FFFF;
    b57c:	4b56      	ldr	r3, [pc, #344]	; (b6d8 <AnalogSideLights+0xbf0>)
    b57e:	681a      	ldr	r2, [r3, #0]
    b580:	4b4a      	ldr	r3, [pc, #296]	; (b6ac <AnalogSideLights+0xbc4>)
    b582:	1c10      	adds	r0, r2, #0
    b584:	4798      	blx	r3
    b586:	0002      	movs	r2, r0
    b588:	000b      	movs	r3, r1
    b58a:	4c49      	ldr	r4, [pc, #292]	; (b6b0 <AnalogSideLights+0xbc8>)
    b58c:	2000      	movs	r0, #0
    b58e:	4949      	ldr	r1, [pc, #292]	; (b6b4 <AnalogSideLights+0xbcc>)
    b590:	47a0      	blx	r4
    b592:	0003      	movs	r3, r0
    b594:	000c      	movs	r4, r1
    b596:	001d      	movs	r5, r3
    b598:	0026      	movs	r6, r4
    b59a:	4b41      	ldr	r3, [pc, #260]	; (b6a0 <AnalogSideLights+0xbb8>)
    b59c:	681a      	ldr	r2, [r3, #0]
    b59e:	4b43      	ldr	r3, [pc, #268]	; (b6ac <AnalogSideLights+0xbc4>)
    b5a0:	1c10      	adds	r0, r2, #0
    b5a2:	4798      	blx	r3
    b5a4:	0002      	movs	r2, r0
    b5a6:	000b      	movs	r3, r1
    b5a8:	4c43      	ldr	r4, [pc, #268]	; (b6b8 <AnalogSideLights+0xbd0>)
    b5aa:	0028      	movs	r0, r5
    b5ac:	0031      	movs	r1, r6
    b5ae:	47a0      	blx	r4
    b5b0:	0003      	movs	r3, r0
    b5b2:	000c      	movs	r4, r1
    b5b4:	0019      	movs	r1, r3
    b5b6:	0022      	movs	r2, r4
    b5b8:	4b40      	ldr	r3, [pc, #256]	; (b6bc <AnalogSideLights+0xbd4>)
    b5ba:	0008      	movs	r0, r1
    b5bc:	0011      	movs	r1, r2
    b5be:	4798      	blx	r3
    b5c0:	0002      	movs	r2, r0
    b5c2:	4b3f      	ldr	r3, [pc, #252]	; (b6c0 <AnalogSideLights+0xbd8>)
    b5c4:	493f      	ldr	r1, [pc, #252]	; (b6c4 <AnalogSideLights+0xbdc>)
    b5c6:	0010      	movs	r0, r2
    b5c8:	4798      	blx	r3
    b5ca:	000b      	movs	r3, r1
    b5cc:	001a      	movs	r2, r3
    b5ce:	4b3e      	ldr	r3, [pc, #248]	; (b6c8 <AnalogSideLights+0xbe0>)
    b5d0:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) / 0x0FFFF;
    b5d2:	4b41      	ldr	r3, [pc, #260]	; (b6d8 <AnalogSideLights+0xbf0>)
    b5d4:	681a      	ldr	r2, [r3, #0]
    b5d6:	4b35      	ldr	r3, [pc, #212]	; (b6ac <AnalogSideLights+0xbc4>)
    b5d8:	1c10      	adds	r0, r2, #0
    b5da:	4798      	blx	r3
    b5dc:	0002      	movs	r2, r0
    b5de:	000b      	movs	r3, r1
    b5e0:	4c33      	ldr	r4, [pc, #204]	; (b6b0 <AnalogSideLights+0xbc8>)
    b5e2:	2000      	movs	r0, #0
    b5e4:	4933      	ldr	r1, [pc, #204]	; (b6b4 <AnalogSideLights+0xbcc>)
    b5e6:	47a0      	blx	r4
    b5e8:	0003      	movs	r3, r0
    b5ea:	000c      	movs	r4, r1
    b5ec:	001d      	movs	r5, r3
    b5ee:	0026      	movs	r6, r4
    b5f0:	4b2b      	ldr	r3, [pc, #172]	; (b6a0 <AnalogSideLights+0xbb8>)
    b5f2:	681a      	ldr	r2, [r3, #0]
    b5f4:	4b2d      	ldr	r3, [pc, #180]	; (b6ac <AnalogSideLights+0xbc4>)
    b5f6:	1c10      	adds	r0, r2, #0
    b5f8:	4798      	blx	r3
    b5fa:	0002      	movs	r2, r0
    b5fc:	000b      	movs	r3, r1
    b5fe:	4c2e      	ldr	r4, [pc, #184]	; (b6b8 <AnalogSideLights+0xbd0>)
    b600:	0028      	movs	r0, r5
    b602:	0031      	movs	r1, r6
    b604:	47a0      	blx	r4
    b606:	0003      	movs	r3, r0
    b608:	000c      	movs	r4, r1
    b60a:	0019      	movs	r1, r3
    b60c:	0022      	movs	r2, r4
    b60e:	4b2b      	ldr	r3, [pc, #172]	; (b6bc <AnalogSideLights+0xbd4>)
    b610:	0008      	movs	r0, r1
    b612:	0011      	movs	r1, r2
    b614:	4798      	blx	r3
    b616:	0002      	movs	r2, r0
    b618:	4b2c      	ldr	r3, [pc, #176]	; (b6cc <AnalogSideLights+0xbe4>)
    b61a:	492a      	ldr	r1, [pc, #168]	; (b6c4 <AnalogSideLights+0xbdc>)
    b61c:	0010      	movs	r0, r2
    b61e:	4798      	blx	r3
    b620:	0003      	movs	r3, r0
    b622:	b2da      	uxtb	r2, r3
    b624:	4b2a      	ldr	r3, [pc, #168]	; (b6d0 <AnalogSideLights+0xbe8>)
    b626:	701a      	strb	r2, [r3, #0]
			}
			
			upColor = cycle_index * output_brightness;
    b628:	4b27      	ldr	r3, [pc, #156]	; (b6c8 <AnalogSideLights+0xbe0>)
    b62a:	681a      	ldr	r2, [r3, #0]
    b62c:	4b2b      	ldr	r3, [pc, #172]	; (b6dc <AnalogSideLights+0xbf4>)
    b62e:	0010      	movs	r0, r2
    b630:	4798      	blx	r3
    b632:	4b2b      	ldr	r3, [pc, #172]	; (b6e0 <AnalogSideLights+0xbf8>)
    b634:	681a      	ldr	r2, [r3, #0]
    b636:	4b2b      	ldr	r3, [pc, #172]	; (b6e4 <AnalogSideLights+0xbfc>)
    b638:	1c11      	adds	r1, r2, #0
    b63a:	4798      	blx	r3
    b63c:	1c03      	adds	r3, r0, #0
    b63e:	1c1a      	adds	r2, r3, #0
    b640:	4b29      	ldr	r3, [pc, #164]	; (b6e8 <AnalogSideLights+0xc00>)
    b642:	1c10      	adds	r0, r2, #0
    b644:	4798      	blx	r3
    b646:	0003      	movs	r3, r0
    b648:	b29a      	uxth	r2, r3
    b64a:	4b28      	ldr	r3, [pc, #160]	; (b6ec <AnalogSideLights+0xc04>)
    b64c:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b64e:	4b1e      	ldr	r3, [pc, #120]	; (b6c8 <AnalogSideLights+0xbe0>)
    b650:	681b      	ldr	r3, [r3, #0]
    b652:	4a1c      	ldr	r2, [pc, #112]	; (b6c4 <AnalogSideLights+0xbdc>)
    b654:	1ad2      	subs	r2, r2, r3
    b656:	4b21      	ldr	r3, [pc, #132]	; (b6dc <AnalogSideLights+0xbf4>)
    b658:	0010      	movs	r0, r2
    b65a:	4798      	blx	r3
    b65c:	4b20      	ldr	r3, [pc, #128]	; (b6e0 <AnalogSideLights+0xbf8>)
    b65e:	681a      	ldr	r2, [r3, #0]
    b660:	4b20      	ldr	r3, [pc, #128]	; (b6e4 <AnalogSideLights+0xbfc>)
    b662:	1c11      	adds	r1, r2, #0
    b664:	4798      	blx	r3
    b666:	1c03      	adds	r3, r0, #0
    b668:	1c1a      	adds	r2, r3, #0
    b66a:	4b1f      	ldr	r3, [pc, #124]	; (b6e8 <AnalogSideLights+0xc00>)
    b66c:	1c10      	adds	r0, r2, #0
    b66e:	4798      	blx	r3
    b670:	0003      	movs	r3, r0
    b672:	b29a      	uxth	r2, r3
    b674:	4b1e      	ldr	r3, [pc, #120]	; (b6f0 <AnalogSideLights+0xc08>)
    b676:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b678:	4b1c      	ldr	r3, [pc, #112]	; (b6ec <AnalogSideLights+0xc04>)
    b67a:	8819      	ldrh	r1, [r3, #0]
    b67c:	4b1c      	ldr	r3, [pc, #112]	; (b6f0 <AnalogSideLights+0xc08>)
    b67e:	881a      	ldrh	r2, [r3, #0]
    b680:	4b13      	ldr	r3, [pc, #76]	; (b6d0 <AnalogSideLights+0xbe8>)
    b682:	781b      	ldrb	r3, [r3, #0]
    b684:	4d1b      	ldr	r5, [pc, #108]	; (b6f4 <AnalogSideLights+0xc0c>)
    b686:	0038      	movs	r0, r7
    b688:	4c1b      	ldr	r4, [pc, #108]	; (b6f8 <AnalogSideLights+0xc10>)
    b68a:	47a0      	blx	r4
    b68c:	003b      	movs	r3, r7
    b68e:	0028      	movs	r0, r5
    b690:	0019      	movs	r1, r3
    b692:	230c      	movs	r3, #12
    b694:	001a      	movs	r2, r3
    b696:	4b19      	ldr	r3, [pc, #100]	; (b6fc <AnalogSideLights+0xc14>)
    b698:	4798      	blx	r3
			break;
    b69a:	f000 fd43 	bl	c124 <AnalogSideLights+0x163c>
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	20000348 	.word	0x20000348
    b6a4:	00018799 	.word	0x00018799
    b6a8:	20000024 	.word	0x20000024
    b6ac:	0001b1a1 	.word	0x0001b1a1
    b6b0:	00019cb1 	.word	0x00019cb1
    b6b4:	4107ffe8 	.word	0x4107ffe8
    b6b8:	0001a519 	.word	0x0001a519
    b6bc:	0001b045 	.word	0x0001b045
    b6c0:	000186ed 	.word	0x000186ed
    b6c4:	0000ffff 	.word	0x0000ffff
    b6c8:	20000374 	.word	0x20000374
    b6cc:	00018521 	.word	0x00018521
    b6d0:	20000373 	.word	0x20000373
    b6d4:	000187d5 	.word	0x000187d5
    b6d8:	20000028 	.word	0x20000028
    b6dc:	00019605 	.word	0x00019605
    b6e0:	20000454 	.word	0x20000454
    b6e4:	00018fad 	.word	0x00018fad
    b6e8:	0001883d 	.word	0x0001883d
    b6ec:	20000378 	.word	0x20000378
    b6f0:	2000037a 	.word	0x2000037a
    b6f4:	20000360 	.word	0x20000360
    b6f8:	0000a59d 	.word	0x0000a59d
    b6fc:	0001b3e9 	.word	0x0001b3e9
		}
		case COLOR_PITCH_RATE:
		{
			if(gxKalman < 0)
    b700:	4bf6      	ldr	r3, [pc, #984]	; (badc <AnalogSideLights+0xff4>)
    b702:	681a      	ldr	r2, [r3, #0]
    b704:	4bf6      	ldr	r3, [pc, #984]	; (bae0 <AnalogSideLights+0xff8>)
    b706:	2100      	movs	r1, #0
    b708:	1c10      	adds	r0, r2, #0
    b70a:	4798      	blx	r3
    b70c:	1e03      	subs	r3, r0, #0
    b70e:	d02a      	beq.n	b766 <AnalogSideLights+0xc7e>
			cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) % 0x0FFFF;
    b710:	4bf4      	ldr	r3, [pc, #976]	; (bae4 <AnalogSideLights+0xffc>)
    b712:	681a      	ldr	r2, [r3, #0]
    b714:	4bf4      	ldr	r3, [pc, #976]	; (bae8 <AnalogSideLights+0x1000>)
    b716:	1c10      	adds	r0, r2, #0
    b718:	4798      	blx	r3
    b71a:	0002      	movs	r2, r0
    b71c:	000b      	movs	r3, r1
    b71e:	4cf3      	ldr	r4, [pc, #972]	; (baec <AnalogSideLights+0x1004>)
    b720:	2000      	movs	r0, #0
    b722:	49f3      	ldr	r1, [pc, #972]	; (baf0 <AnalogSideLights+0x1008>)
    b724:	47a0      	blx	r4
    b726:	0003      	movs	r3, r0
    b728:	000c      	movs	r4, r1
    b72a:	001d      	movs	r5, r3
    b72c:	0026      	movs	r6, r4
    b72e:	4beb      	ldr	r3, [pc, #940]	; (badc <AnalogSideLights+0xff4>)
    b730:	681a      	ldr	r2, [r3, #0]
    b732:	4bed      	ldr	r3, [pc, #948]	; (bae8 <AnalogSideLights+0x1000>)
    b734:	1c10      	adds	r0, r2, #0
    b736:	4798      	blx	r3
    b738:	0002      	movs	r2, r0
    b73a:	000b      	movs	r3, r1
    b73c:	4ced      	ldr	r4, [pc, #948]	; (baf4 <AnalogSideLights+0x100c>)
    b73e:	0028      	movs	r0, r5
    b740:	0031      	movs	r1, r6
    b742:	47a0      	blx	r4
    b744:	0003      	movs	r3, r0
    b746:	000c      	movs	r4, r1
    b748:	0019      	movs	r1, r3
    b74a:	0022      	movs	r2, r4
    b74c:	4bea      	ldr	r3, [pc, #936]	; (baf8 <AnalogSideLights+0x1010>)
    b74e:	0008      	movs	r0, r1
    b750:	0011      	movs	r1, r2
    b752:	4798      	blx	r3
    b754:	0002      	movs	r2, r0
    b756:	4be9      	ldr	r3, [pc, #932]	; (bafc <AnalogSideLights+0x1014>)
    b758:	49e9      	ldr	r1, [pc, #932]	; (bb00 <AnalogSideLights+0x1018>)
    b75a:	0010      	movs	r0, r2
    b75c:	4798      	blx	r3
    b75e:	000b      	movs	r3, r1
    b760:	001a      	movs	r2, r3
    b762:	4be8      	ldr	r3, [pc, #928]	; (bb04 <AnalogSideLights+0x101c>)
    b764:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) / 0x0FFFF;
    b766:	4bdf      	ldr	r3, [pc, #892]	; (bae4 <AnalogSideLights+0xffc>)
    b768:	681a      	ldr	r2, [r3, #0]
    b76a:	4bdf      	ldr	r3, [pc, #892]	; (bae8 <AnalogSideLights+0x1000>)
    b76c:	1c10      	adds	r0, r2, #0
    b76e:	4798      	blx	r3
    b770:	0002      	movs	r2, r0
    b772:	000b      	movs	r3, r1
    b774:	4cdd      	ldr	r4, [pc, #884]	; (baec <AnalogSideLights+0x1004>)
    b776:	2000      	movs	r0, #0
    b778:	49dd      	ldr	r1, [pc, #884]	; (baf0 <AnalogSideLights+0x1008>)
    b77a:	47a0      	blx	r4
    b77c:	0003      	movs	r3, r0
    b77e:	000c      	movs	r4, r1
    b780:	001d      	movs	r5, r3
    b782:	0026      	movs	r6, r4
    b784:	4bd5      	ldr	r3, [pc, #852]	; (badc <AnalogSideLights+0xff4>)
    b786:	681a      	ldr	r2, [r3, #0]
    b788:	4bd7      	ldr	r3, [pc, #860]	; (bae8 <AnalogSideLights+0x1000>)
    b78a:	1c10      	adds	r0, r2, #0
    b78c:	4798      	blx	r3
    b78e:	0002      	movs	r2, r0
    b790:	000b      	movs	r3, r1
    b792:	4cd8      	ldr	r4, [pc, #864]	; (baf4 <AnalogSideLights+0x100c>)
    b794:	0028      	movs	r0, r5
    b796:	0031      	movs	r1, r6
    b798:	47a0      	blx	r4
    b79a:	0003      	movs	r3, r0
    b79c:	000c      	movs	r4, r1
    b79e:	0019      	movs	r1, r3
    b7a0:	0022      	movs	r2, r4
    b7a2:	4bd5      	ldr	r3, [pc, #852]	; (baf8 <AnalogSideLights+0x1010>)
    b7a4:	0008      	movs	r0, r1
    b7a6:	0011      	movs	r1, r2
    b7a8:	4798      	blx	r3
    b7aa:	0002      	movs	r2, r0
    b7ac:	4bd6      	ldr	r3, [pc, #856]	; (bb08 <AnalogSideLights+0x1020>)
    b7ae:	49d4      	ldr	r1, [pc, #848]	; (bb00 <AnalogSideLights+0x1018>)
    b7b0:	0010      	movs	r0, r2
    b7b2:	4798      	blx	r3
    b7b4:	0003      	movs	r3, r0
    b7b6:	b2da      	uxtb	r2, r3
    b7b8:	4bd4      	ldr	r3, [pc, #848]	; (bb0c <AnalogSideLights+0x1024>)
    b7ba:	701a      	strb	r2, [r3, #0]
			if(gxKalman >= 0){
    b7bc:	4bc7      	ldr	r3, [pc, #796]	; (badc <AnalogSideLights+0xff4>)
    b7be:	681a      	ldr	r2, [r3, #0]
    b7c0:	4bd3      	ldr	r3, [pc, #844]	; (bb10 <AnalogSideLights+0x1028>)
    b7c2:	2100      	movs	r1, #0
    b7c4:	1c10      	adds	r0, r2, #0
    b7c6:	4798      	blx	r3
    b7c8:	1e03      	subs	r3, r0, #0
    b7ca:	d055      	beq.n	b878 <AnalogSideLights+0xd90>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) % 0x0FFFF;
    b7cc:	4bd1      	ldr	r3, [pc, #836]	; (bb14 <AnalogSideLights+0x102c>)
    b7ce:	681a      	ldr	r2, [r3, #0]
    b7d0:	4bc5      	ldr	r3, [pc, #788]	; (bae8 <AnalogSideLights+0x1000>)
    b7d2:	1c10      	adds	r0, r2, #0
    b7d4:	4798      	blx	r3
    b7d6:	0002      	movs	r2, r0
    b7d8:	000b      	movs	r3, r1
    b7da:	4cc4      	ldr	r4, [pc, #784]	; (baec <AnalogSideLights+0x1004>)
    b7dc:	2000      	movs	r0, #0
    b7de:	49c4      	ldr	r1, [pc, #784]	; (baf0 <AnalogSideLights+0x1008>)
    b7e0:	47a0      	blx	r4
    b7e2:	0003      	movs	r3, r0
    b7e4:	000c      	movs	r4, r1
    b7e6:	001d      	movs	r5, r3
    b7e8:	0026      	movs	r6, r4
    b7ea:	4bbc      	ldr	r3, [pc, #752]	; (badc <AnalogSideLights+0xff4>)
    b7ec:	681a      	ldr	r2, [r3, #0]
    b7ee:	4bbe      	ldr	r3, [pc, #760]	; (bae8 <AnalogSideLights+0x1000>)
    b7f0:	1c10      	adds	r0, r2, #0
    b7f2:	4798      	blx	r3
    b7f4:	0002      	movs	r2, r0
    b7f6:	000b      	movs	r3, r1
    b7f8:	4cbe      	ldr	r4, [pc, #760]	; (baf4 <AnalogSideLights+0x100c>)
    b7fa:	0028      	movs	r0, r5
    b7fc:	0031      	movs	r1, r6
    b7fe:	47a0      	blx	r4
    b800:	0003      	movs	r3, r0
    b802:	000c      	movs	r4, r1
    b804:	0019      	movs	r1, r3
    b806:	0022      	movs	r2, r4
    b808:	4bbb      	ldr	r3, [pc, #748]	; (baf8 <AnalogSideLights+0x1010>)
    b80a:	0008      	movs	r0, r1
    b80c:	0011      	movs	r1, r2
    b80e:	4798      	blx	r3
    b810:	0002      	movs	r2, r0
    b812:	4bba      	ldr	r3, [pc, #744]	; (bafc <AnalogSideLights+0x1014>)
    b814:	49ba      	ldr	r1, [pc, #744]	; (bb00 <AnalogSideLights+0x1018>)
    b816:	0010      	movs	r0, r2
    b818:	4798      	blx	r3
    b81a:	000b      	movs	r3, r1
    b81c:	001a      	movs	r2, r3
    b81e:	4bb9      	ldr	r3, [pc, #740]	; (bb04 <AnalogSideLights+0x101c>)
    b820:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) / 0x0FFFF;
    b822:	4bbc      	ldr	r3, [pc, #752]	; (bb14 <AnalogSideLights+0x102c>)
    b824:	681a      	ldr	r2, [r3, #0]
    b826:	4bb0      	ldr	r3, [pc, #704]	; (bae8 <AnalogSideLights+0x1000>)
    b828:	1c10      	adds	r0, r2, #0
    b82a:	4798      	blx	r3
    b82c:	0002      	movs	r2, r0
    b82e:	000b      	movs	r3, r1
    b830:	4cae      	ldr	r4, [pc, #696]	; (baec <AnalogSideLights+0x1004>)
    b832:	2000      	movs	r0, #0
    b834:	49ae      	ldr	r1, [pc, #696]	; (baf0 <AnalogSideLights+0x1008>)
    b836:	47a0      	blx	r4
    b838:	0003      	movs	r3, r0
    b83a:	000c      	movs	r4, r1
    b83c:	001d      	movs	r5, r3
    b83e:	0026      	movs	r6, r4
    b840:	4ba6      	ldr	r3, [pc, #664]	; (badc <AnalogSideLights+0xff4>)
    b842:	681a      	ldr	r2, [r3, #0]
    b844:	4ba8      	ldr	r3, [pc, #672]	; (bae8 <AnalogSideLights+0x1000>)
    b846:	1c10      	adds	r0, r2, #0
    b848:	4798      	blx	r3
    b84a:	0002      	movs	r2, r0
    b84c:	000b      	movs	r3, r1
    b84e:	4ca9      	ldr	r4, [pc, #676]	; (baf4 <AnalogSideLights+0x100c>)
    b850:	0028      	movs	r0, r5
    b852:	0031      	movs	r1, r6
    b854:	47a0      	blx	r4
    b856:	0003      	movs	r3, r0
    b858:	000c      	movs	r4, r1
    b85a:	0019      	movs	r1, r3
    b85c:	0022      	movs	r2, r4
    b85e:	4ba6      	ldr	r3, [pc, #664]	; (baf8 <AnalogSideLights+0x1010>)
    b860:	0008      	movs	r0, r1
    b862:	0011      	movs	r1, r2
    b864:	4798      	blx	r3
    b866:	0002      	movs	r2, r0
    b868:	4ba7      	ldr	r3, [pc, #668]	; (bb08 <AnalogSideLights+0x1020>)
    b86a:	49a5      	ldr	r1, [pc, #660]	; (bb00 <AnalogSideLights+0x1018>)
    b86c:	0010      	movs	r0, r2
    b86e:	4798      	blx	r3
    b870:	0003      	movs	r3, r0
    b872:	b2da      	uxtb	r2, r3
    b874:	4ba5      	ldr	r3, [pc, #660]	; (bb0c <AnalogSideLights+0x1024>)
    b876:	701a      	strb	r2, [r3, #0]
			}
			
			upColor = cycle_index * output_brightness;
    b878:	4ba2      	ldr	r3, [pc, #648]	; (bb04 <AnalogSideLights+0x101c>)
    b87a:	681a      	ldr	r2, [r3, #0]
    b87c:	4ba6      	ldr	r3, [pc, #664]	; (bb18 <AnalogSideLights+0x1030>)
    b87e:	0010      	movs	r0, r2
    b880:	4798      	blx	r3
    b882:	4ba6      	ldr	r3, [pc, #664]	; (bb1c <AnalogSideLights+0x1034>)
    b884:	681a      	ldr	r2, [r3, #0]
    b886:	4ba6      	ldr	r3, [pc, #664]	; (bb20 <AnalogSideLights+0x1038>)
    b888:	1c11      	adds	r1, r2, #0
    b88a:	4798      	blx	r3
    b88c:	1c03      	adds	r3, r0, #0
    b88e:	1c1a      	adds	r2, r3, #0
    b890:	4ba4      	ldr	r3, [pc, #656]	; (bb24 <AnalogSideLights+0x103c>)
    b892:	1c10      	adds	r0, r2, #0
    b894:	4798      	blx	r3
    b896:	0003      	movs	r3, r0
    b898:	b29a      	uxth	r2, r3
    b89a:	4ba3      	ldr	r3, [pc, #652]	; (bb28 <AnalogSideLights+0x1040>)
    b89c:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b89e:	4b99      	ldr	r3, [pc, #612]	; (bb04 <AnalogSideLights+0x101c>)
    b8a0:	681b      	ldr	r3, [r3, #0]
    b8a2:	4a97      	ldr	r2, [pc, #604]	; (bb00 <AnalogSideLights+0x1018>)
    b8a4:	1ad2      	subs	r2, r2, r3
    b8a6:	4b9c      	ldr	r3, [pc, #624]	; (bb18 <AnalogSideLights+0x1030>)
    b8a8:	0010      	movs	r0, r2
    b8aa:	4798      	blx	r3
    b8ac:	4b9b      	ldr	r3, [pc, #620]	; (bb1c <AnalogSideLights+0x1034>)
    b8ae:	681a      	ldr	r2, [r3, #0]
    b8b0:	4b9b      	ldr	r3, [pc, #620]	; (bb20 <AnalogSideLights+0x1038>)
    b8b2:	1c11      	adds	r1, r2, #0
    b8b4:	4798      	blx	r3
    b8b6:	1c03      	adds	r3, r0, #0
    b8b8:	1c1a      	adds	r2, r3, #0
    b8ba:	4b9a      	ldr	r3, [pc, #616]	; (bb24 <AnalogSideLights+0x103c>)
    b8bc:	1c10      	adds	r0, r2, #0
    b8be:	4798      	blx	r3
    b8c0:	0003      	movs	r3, r0
    b8c2:	b29a      	uxth	r2, r3
    b8c4:	4b99      	ldr	r3, [pc, #612]	; (bb2c <AnalogSideLights+0x1044>)
    b8c6:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b8c8:	4b97      	ldr	r3, [pc, #604]	; (bb28 <AnalogSideLights+0x1040>)
    b8ca:	8819      	ldrh	r1, [r3, #0]
    b8cc:	4b97      	ldr	r3, [pc, #604]	; (bb2c <AnalogSideLights+0x1044>)
    b8ce:	881a      	ldrh	r2, [r3, #0]
    b8d0:	4b8e      	ldr	r3, [pc, #568]	; (bb0c <AnalogSideLights+0x1024>)
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	4d96      	ldr	r5, [pc, #600]	; (bb30 <AnalogSideLights+0x1048>)
    b8d6:	0038      	movs	r0, r7
    b8d8:	4c96      	ldr	r4, [pc, #600]	; (bb34 <AnalogSideLights+0x104c>)
    b8da:	47a0      	blx	r4
    b8dc:	003b      	movs	r3, r7
    b8de:	0028      	movs	r0, r5
    b8e0:	0019      	movs	r1, r3
    b8e2:	230c      	movs	r3, #12
    b8e4:	001a      	movs	r2, r3
    b8e6:	4b94      	ldr	r3, [pc, #592]	; (bb38 <AnalogSideLights+0x1050>)
    b8e8:	4798      	blx	r3
			break;
    b8ea:	f000 fc1b 	bl	c124 <AnalogSideLights+0x163c>
		}
		case COLOR_THROTTLE:
		{
			cycle_index = (int)(((((float)0x0FFFF) * 2.0) / 256.0) * (255-remote_y)) % 0x0FFFF;
    b8ee:	4b93      	ldr	r3, [pc, #588]	; (bb3c <AnalogSideLights+0x1054>)
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	001a      	movs	r2, r3
    b8f4:	23ff      	movs	r3, #255	; 0xff
    b8f6:	1a9a      	subs	r2, r3, r2
    b8f8:	4b91      	ldr	r3, [pc, #580]	; (bb40 <AnalogSideLights+0x1058>)
    b8fa:	0010      	movs	r0, r2
    b8fc:	4798      	blx	r3
    b8fe:	4c7d      	ldr	r4, [pc, #500]	; (baf4 <AnalogSideLights+0x100c>)
    b900:	2200      	movs	r2, #0
    b902:	4b90      	ldr	r3, [pc, #576]	; (bb44 <AnalogSideLights+0x105c>)
    b904:	47a0      	blx	r4
    b906:	0003      	movs	r3, r0
    b908:	000c      	movs	r4, r1
    b90a:	0019      	movs	r1, r3
    b90c:	0022      	movs	r2, r4
    b90e:	4b7a      	ldr	r3, [pc, #488]	; (baf8 <AnalogSideLights+0x1010>)
    b910:	0008      	movs	r0, r1
    b912:	0011      	movs	r1, r2
    b914:	4798      	blx	r3
    b916:	0002      	movs	r2, r0
    b918:	4b78      	ldr	r3, [pc, #480]	; (bafc <AnalogSideLights+0x1014>)
    b91a:	4979      	ldr	r1, [pc, #484]	; (bb00 <AnalogSideLights+0x1018>)
    b91c:	0010      	movs	r0, r2
    b91e:	4798      	blx	r3
    b920:	000b      	movs	r3, r1
    b922:	001a      	movs	r2, r3
    b924:	4b77      	ldr	r3, [pc, #476]	; (bb04 <AnalogSideLights+0x101c>)
    b926:	601a      	str	r2, [r3, #0]
			cycle = (int)(((((float)0x0FFFF) * 2.0) / 256.0) * (255-remote_y)) / 0x0FFFF;
    b928:	4b84      	ldr	r3, [pc, #528]	; (bb3c <AnalogSideLights+0x1054>)
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	001a      	movs	r2, r3
    b92e:	23ff      	movs	r3, #255	; 0xff
    b930:	1a9a      	subs	r2, r3, r2
    b932:	4b83      	ldr	r3, [pc, #524]	; (bb40 <AnalogSideLights+0x1058>)
    b934:	0010      	movs	r0, r2
    b936:	4798      	blx	r3
    b938:	4c6e      	ldr	r4, [pc, #440]	; (baf4 <AnalogSideLights+0x100c>)
    b93a:	2200      	movs	r2, #0
    b93c:	4b81      	ldr	r3, [pc, #516]	; (bb44 <AnalogSideLights+0x105c>)
    b93e:	47a0      	blx	r4
    b940:	0003      	movs	r3, r0
    b942:	000c      	movs	r4, r1
    b944:	0019      	movs	r1, r3
    b946:	0022      	movs	r2, r4
    b948:	4b6b      	ldr	r3, [pc, #428]	; (baf8 <AnalogSideLights+0x1010>)
    b94a:	0008      	movs	r0, r1
    b94c:	0011      	movs	r1, r2
    b94e:	4798      	blx	r3
    b950:	0002      	movs	r2, r0
    b952:	4b6d      	ldr	r3, [pc, #436]	; (bb08 <AnalogSideLights+0x1020>)
    b954:	496a      	ldr	r1, [pc, #424]	; (bb00 <AnalogSideLights+0x1018>)
    b956:	0010      	movs	r0, r2
    b958:	4798      	blx	r3
    b95a:	0003      	movs	r3, r0
    b95c:	b2da      	uxtb	r2, r3
    b95e:	4b6b      	ldr	r3, [pc, #428]	; (bb0c <AnalogSideLights+0x1024>)
    b960:	701a      	strb	r2, [r3, #0]
			upColor = cycle_index * output_brightness;
    b962:	4b68      	ldr	r3, [pc, #416]	; (bb04 <AnalogSideLights+0x101c>)
    b964:	681a      	ldr	r2, [r3, #0]
    b966:	4b6c      	ldr	r3, [pc, #432]	; (bb18 <AnalogSideLights+0x1030>)
    b968:	0010      	movs	r0, r2
    b96a:	4798      	blx	r3
    b96c:	4b6b      	ldr	r3, [pc, #428]	; (bb1c <AnalogSideLights+0x1034>)
    b96e:	681a      	ldr	r2, [r3, #0]
    b970:	4b6b      	ldr	r3, [pc, #428]	; (bb20 <AnalogSideLights+0x1038>)
    b972:	1c11      	adds	r1, r2, #0
    b974:	4798      	blx	r3
    b976:	1c03      	adds	r3, r0, #0
    b978:	1c1a      	adds	r2, r3, #0
    b97a:	4b6a      	ldr	r3, [pc, #424]	; (bb24 <AnalogSideLights+0x103c>)
    b97c:	1c10      	adds	r0, r2, #0
    b97e:	4798      	blx	r3
    b980:	0003      	movs	r3, r0
    b982:	b29a      	uxth	r2, r3
    b984:	4b68      	ldr	r3, [pc, #416]	; (bb28 <AnalogSideLights+0x1040>)
    b986:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    b988:	4b5e      	ldr	r3, [pc, #376]	; (bb04 <AnalogSideLights+0x101c>)
    b98a:	681b      	ldr	r3, [r3, #0]
    b98c:	4a5c      	ldr	r2, [pc, #368]	; (bb00 <AnalogSideLights+0x1018>)
    b98e:	1ad2      	subs	r2, r2, r3
    b990:	4b61      	ldr	r3, [pc, #388]	; (bb18 <AnalogSideLights+0x1030>)
    b992:	0010      	movs	r0, r2
    b994:	4798      	blx	r3
    b996:	4b61      	ldr	r3, [pc, #388]	; (bb1c <AnalogSideLights+0x1034>)
    b998:	681a      	ldr	r2, [r3, #0]
    b99a:	4b61      	ldr	r3, [pc, #388]	; (bb20 <AnalogSideLights+0x1038>)
    b99c:	1c11      	adds	r1, r2, #0
    b99e:	4798      	blx	r3
    b9a0:	1c03      	adds	r3, r0, #0
    b9a2:	1c1a      	adds	r2, r3, #0
    b9a4:	4b5f      	ldr	r3, [pc, #380]	; (bb24 <AnalogSideLights+0x103c>)
    b9a6:	1c10      	adds	r0, r2, #0
    b9a8:	4798      	blx	r3
    b9aa:	0003      	movs	r3, r0
    b9ac:	b29a      	uxth	r2, r3
    b9ae:	4b5f      	ldr	r3, [pc, #380]	; (bb2c <AnalogSideLights+0x1044>)
    b9b0:	801a      	strh	r2, [r3, #0]

			cycle = cycle+2;
    b9b2:	4b56      	ldr	r3, [pc, #344]	; (bb0c <AnalogSideLights+0x1024>)
    b9b4:	781b      	ldrb	r3, [r3, #0]
    b9b6:	3302      	adds	r3, #2
    b9b8:	b2da      	uxtb	r2, r3
    b9ba:	4b54      	ldr	r3, [pc, #336]	; (bb0c <AnalogSideLights+0x1024>)
    b9bc:	701a      	strb	r2, [r3, #0]
			if(cycle > 2)
    b9be:	4b53      	ldr	r3, [pc, #332]	; (bb0c <AnalogSideLights+0x1024>)
    b9c0:	781b      	ldrb	r3, [r3, #0]
    b9c2:	2b02      	cmp	r3, #2
    b9c4:	d905      	bls.n	b9d2 <AnalogSideLights+0xeea>
			cycle = cycle - 3;
    b9c6:	4b51      	ldr	r3, [pc, #324]	; (bb0c <AnalogSideLights+0x1024>)
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	3b03      	subs	r3, #3
    b9cc:	b2da      	uxtb	r2, r3
    b9ce:	4b4f      	ldr	r3, [pc, #316]	; (bb0c <AnalogSideLights+0x1024>)
    b9d0:	701a      	strb	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    b9d2:	4b55      	ldr	r3, [pc, #340]	; (bb28 <AnalogSideLights+0x1040>)
    b9d4:	8819      	ldrh	r1, [r3, #0]
    b9d6:	4b55      	ldr	r3, [pc, #340]	; (bb2c <AnalogSideLights+0x1044>)
    b9d8:	881a      	ldrh	r2, [r3, #0]
    b9da:	4b4c      	ldr	r3, [pc, #304]	; (bb0c <AnalogSideLights+0x1024>)
    b9dc:	781b      	ldrb	r3, [r3, #0]
    b9de:	4d54      	ldr	r5, [pc, #336]	; (bb30 <AnalogSideLights+0x1048>)
    b9e0:	0038      	movs	r0, r7
    b9e2:	4c54      	ldr	r4, [pc, #336]	; (bb34 <AnalogSideLights+0x104c>)
    b9e4:	47a0      	blx	r4
    b9e6:	003b      	movs	r3, r7
    b9e8:	0028      	movs	r0, r5
    b9ea:	0019      	movs	r1, r3
    b9ec:	230c      	movs	r3, #12
    b9ee:	001a      	movs	r2, r3
    b9f0:	4b51      	ldr	r3, [pc, #324]	; (bb38 <AnalogSideLights+0x1050>)
    b9f2:	4798      	blx	r3

			break;
    b9f4:	e396      	b.n	c124 <AnalogSideLights+0x163c>
		}
		case COLOR_RPM:
		{
			if(latest_vesc_vals.rpm != 0){
    b9f6:	4b54      	ldr	r3, [pc, #336]	; (bb48 <AnalogSideLights+0x1060>)
    b9f8:	691b      	ldr	r3, [r3, #16]
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d100      	bne.n	ba00 <AnalogSideLights+0xf18>
    b9fe:	e0a9      	b.n	bb54 <AnalogSideLights+0x106c>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) % 0x0FFFF;
    ba00:	4b52      	ldr	r3, [pc, #328]	; (bb4c <AnalogSideLights+0x1064>)
    ba02:	699a      	ldr	r2, [r3, #24]
    ba04:	4b52      	ldr	r3, [pc, #328]	; (bb50 <AnalogSideLights+0x1068>)
    ba06:	0010      	movs	r0, r2
    ba08:	4798      	blx	r3
    ba0a:	1c02      	adds	r2, r0, #0
    ba0c:	4b36      	ldr	r3, [pc, #216]	; (bae8 <AnalogSideLights+0x1000>)
    ba0e:	1c10      	adds	r0, r2, #0
    ba10:	4798      	blx	r3
    ba12:	0002      	movs	r2, r0
    ba14:	000b      	movs	r3, r1
    ba16:	4c35      	ldr	r4, [pc, #212]	; (baec <AnalogSideLights+0x1004>)
    ba18:	2000      	movs	r0, #0
    ba1a:	4935      	ldr	r1, [pc, #212]	; (baf0 <AnalogSideLights+0x1008>)
    ba1c:	47a0      	blx	r4
    ba1e:	0003      	movs	r3, r0
    ba20:	000c      	movs	r4, r1
    ba22:	001d      	movs	r5, r3
    ba24:	0026      	movs	r6, r4
    ba26:	4b48      	ldr	r3, [pc, #288]	; (bb48 <AnalogSideLights+0x1060>)
    ba28:	691b      	ldr	r3, [r3, #16]
    ba2a:	17d9      	asrs	r1, r3, #31
    ba2c:	185a      	adds	r2, r3, r1
    ba2e:	404a      	eors	r2, r1
    ba30:	4b47      	ldr	r3, [pc, #284]	; (bb50 <AnalogSideLights+0x1068>)
    ba32:	0010      	movs	r0, r2
    ba34:	4798      	blx	r3
    ba36:	1c02      	adds	r2, r0, #0
    ba38:	4b2b      	ldr	r3, [pc, #172]	; (bae8 <AnalogSideLights+0x1000>)
    ba3a:	1c10      	adds	r0, r2, #0
    ba3c:	4798      	blx	r3
    ba3e:	0002      	movs	r2, r0
    ba40:	000b      	movs	r3, r1
    ba42:	4c2c      	ldr	r4, [pc, #176]	; (baf4 <AnalogSideLights+0x100c>)
    ba44:	0028      	movs	r0, r5
    ba46:	0031      	movs	r1, r6
    ba48:	47a0      	blx	r4
    ba4a:	0003      	movs	r3, r0
    ba4c:	000c      	movs	r4, r1
    ba4e:	0019      	movs	r1, r3
    ba50:	0022      	movs	r2, r4
    ba52:	4b29      	ldr	r3, [pc, #164]	; (baf8 <AnalogSideLights+0x1010>)
    ba54:	0008      	movs	r0, r1
    ba56:	0011      	movs	r1, r2
    ba58:	4798      	blx	r3
    ba5a:	0002      	movs	r2, r0
    ba5c:	4b27      	ldr	r3, [pc, #156]	; (bafc <AnalogSideLights+0x1014>)
    ba5e:	4928      	ldr	r1, [pc, #160]	; (bb00 <AnalogSideLights+0x1018>)
    ba60:	0010      	movs	r0, r2
    ba62:	4798      	blx	r3
    ba64:	000b      	movs	r3, r1
    ba66:	001a      	movs	r2, r3
    ba68:	4b26      	ldr	r3, [pc, #152]	; (bb04 <AnalogSideLights+0x101c>)
    ba6a:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)abs(latest_vesc_vals.rpm)) / 0x0FFFF;
    ba6c:	4b37      	ldr	r3, [pc, #220]	; (bb4c <AnalogSideLights+0x1064>)
    ba6e:	699a      	ldr	r2, [r3, #24]
    ba70:	4b37      	ldr	r3, [pc, #220]	; (bb50 <AnalogSideLights+0x1068>)
    ba72:	0010      	movs	r0, r2
    ba74:	4798      	blx	r3
    ba76:	1c02      	adds	r2, r0, #0
    ba78:	4b1b      	ldr	r3, [pc, #108]	; (bae8 <AnalogSideLights+0x1000>)
    ba7a:	1c10      	adds	r0, r2, #0
    ba7c:	4798      	blx	r3
    ba7e:	0002      	movs	r2, r0
    ba80:	000b      	movs	r3, r1
    ba82:	4c1a      	ldr	r4, [pc, #104]	; (baec <AnalogSideLights+0x1004>)
    ba84:	2000      	movs	r0, #0
    ba86:	491a      	ldr	r1, [pc, #104]	; (baf0 <AnalogSideLights+0x1008>)
    ba88:	47a0      	blx	r4
    ba8a:	0003      	movs	r3, r0
    ba8c:	000c      	movs	r4, r1
    ba8e:	001d      	movs	r5, r3
    ba90:	0026      	movs	r6, r4
    ba92:	4b2d      	ldr	r3, [pc, #180]	; (bb48 <AnalogSideLights+0x1060>)
    ba94:	691b      	ldr	r3, [r3, #16]
    ba96:	17d9      	asrs	r1, r3, #31
    ba98:	185a      	adds	r2, r3, r1
    ba9a:	404a      	eors	r2, r1
    ba9c:	4b2c      	ldr	r3, [pc, #176]	; (bb50 <AnalogSideLights+0x1068>)
    ba9e:	0010      	movs	r0, r2
    baa0:	4798      	blx	r3
    baa2:	1c02      	adds	r2, r0, #0
    baa4:	4b10      	ldr	r3, [pc, #64]	; (bae8 <AnalogSideLights+0x1000>)
    baa6:	1c10      	adds	r0, r2, #0
    baa8:	4798      	blx	r3
    baaa:	0002      	movs	r2, r0
    baac:	000b      	movs	r3, r1
    baae:	4c11      	ldr	r4, [pc, #68]	; (baf4 <AnalogSideLights+0x100c>)
    bab0:	0028      	movs	r0, r5
    bab2:	0031      	movs	r1, r6
    bab4:	47a0      	blx	r4
    bab6:	0003      	movs	r3, r0
    bab8:	000c      	movs	r4, r1
    baba:	0019      	movs	r1, r3
    babc:	0022      	movs	r2, r4
    babe:	4b0e      	ldr	r3, [pc, #56]	; (baf8 <AnalogSideLights+0x1010>)
    bac0:	0008      	movs	r0, r1
    bac2:	0011      	movs	r1, r2
    bac4:	4798      	blx	r3
    bac6:	0002      	movs	r2, r0
    bac8:	4b0f      	ldr	r3, [pc, #60]	; (bb08 <AnalogSideLights+0x1020>)
    baca:	490d      	ldr	r1, [pc, #52]	; (bb00 <AnalogSideLights+0x1018>)
    bacc:	0010      	movs	r0, r2
    bace:	4798      	blx	r3
    bad0:	0003      	movs	r3, r0
    bad2:	b2da      	uxtb	r2, r3
    bad4:	4b0d      	ldr	r3, [pc, #52]	; (bb0c <AnalogSideLights+0x1024>)
    bad6:	701a      	strb	r2, [r3, #0]
    bad8:	e042      	b.n	bb60 <AnalogSideLights+0x1078>
    bada:	46c0      	nop			; (mov r8, r8)
    badc:	20000344 	.word	0x20000344
    bae0:	00018799 	.word	0x00018799
    bae4:	2000001c 	.word	0x2000001c
    bae8:	0001b1a1 	.word	0x0001b1a1
    baec:	00019cb1 	.word	0x00019cb1
    baf0:	4107ffe8 	.word	0x4107ffe8
    baf4:	0001a519 	.word	0x0001a519
    baf8:	0001b045 	.word	0x0001b045
    bafc:	000186ed 	.word	0x000186ed
    bb00:	0000ffff 	.word	0x0000ffff
    bb04:	20000374 	.word	0x20000374
    bb08:	00018521 	.word	0x00018521
    bb0c:	20000373 	.word	0x20000373
    bb10:	000187d5 	.word	0x000187d5
    bb14:	20000020 	.word	0x20000020
    bb18:	00019605 	.word	0x00019605
    bb1c:	20000454 	.word	0x20000454
    bb20:	00018fad 	.word	0x00018fad
    bb24:	0001883d 	.word	0x0001883d
    bb28:	20000378 	.word	0x20000378
    bb2c:	2000037a 	.word	0x2000037a
    bb30:	20000360 	.word	0x20000360
    bb34:	0000a59d 	.word	0x0000a59d
    bb38:	0001b3e9 	.word	0x0001b3e9
    bb3c:	2000038e 	.word	0x2000038e
    bb40:	0001b0ad 	.word	0x0001b0ad
    bb44:	407fffe0 	.word	0x407fffe0
    bb48:	20000e1c 	.word	0x20000e1c
    bb4c:	20001a50 	.word	0x20001a50
    bb50:	00019565 	.word	0x00019565
			}
			else{
				cycle_index = 0;
    bb54:	4be2      	ldr	r3, [pc, #904]	; (bee0 <AnalogSideLights+0x13f8>)
    bb56:	2200      	movs	r2, #0
    bb58:	601a      	str	r2, [r3, #0]
				cycle = 0;
    bb5a:	4be2      	ldr	r3, [pc, #904]	; (bee4 <AnalogSideLights+0x13fc>)
    bb5c:	2200      	movs	r2, #0
    bb5e:	701a      	strb	r2, [r3, #0]
			}
			upColor = cycle_index * output_brightness;
    bb60:	4bdf      	ldr	r3, [pc, #892]	; (bee0 <AnalogSideLights+0x13f8>)
    bb62:	681a      	ldr	r2, [r3, #0]
    bb64:	4be0      	ldr	r3, [pc, #896]	; (bee8 <AnalogSideLights+0x1400>)
    bb66:	0010      	movs	r0, r2
    bb68:	4798      	blx	r3
    bb6a:	4be0      	ldr	r3, [pc, #896]	; (beec <AnalogSideLights+0x1404>)
    bb6c:	681a      	ldr	r2, [r3, #0]
    bb6e:	4be0      	ldr	r3, [pc, #896]	; (bef0 <AnalogSideLights+0x1408>)
    bb70:	1c11      	adds	r1, r2, #0
    bb72:	4798      	blx	r3
    bb74:	1c03      	adds	r3, r0, #0
    bb76:	1c1a      	adds	r2, r3, #0
    bb78:	4bde      	ldr	r3, [pc, #888]	; (bef4 <AnalogSideLights+0x140c>)
    bb7a:	1c10      	adds	r0, r2, #0
    bb7c:	4798      	blx	r3
    bb7e:	0003      	movs	r3, r0
    bb80:	b29a      	uxth	r2, r3
    bb82:	4bdd      	ldr	r3, [pc, #884]	; (bef8 <AnalogSideLights+0x1410>)
    bb84:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    bb86:	4bd6      	ldr	r3, [pc, #856]	; (bee0 <AnalogSideLights+0x13f8>)
    bb88:	681b      	ldr	r3, [r3, #0]
    bb8a:	4adc      	ldr	r2, [pc, #880]	; (befc <AnalogSideLights+0x1414>)
    bb8c:	1ad2      	subs	r2, r2, r3
    bb8e:	4bd6      	ldr	r3, [pc, #856]	; (bee8 <AnalogSideLights+0x1400>)
    bb90:	0010      	movs	r0, r2
    bb92:	4798      	blx	r3
    bb94:	4bd5      	ldr	r3, [pc, #852]	; (beec <AnalogSideLights+0x1404>)
    bb96:	681a      	ldr	r2, [r3, #0]
    bb98:	4bd5      	ldr	r3, [pc, #852]	; (bef0 <AnalogSideLights+0x1408>)
    bb9a:	1c11      	adds	r1, r2, #0
    bb9c:	4798      	blx	r3
    bb9e:	1c03      	adds	r3, r0, #0
    bba0:	1c1a      	adds	r2, r3, #0
    bba2:	4bd4      	ldr	r3, [pc, #848]	; (bef4 <AnalogSideLights+0x140c>)
    bba4:	1c10      	adds	r0, r2, #0
    bba6:	4798      	blx	r3
    bba8:	0003      	movs	r3, r0
    bbaa:	b29a      	uxth	r2, r3
    bbac:	4bd4      	ldr	r3, [pc, #848]	; (bf00 <AnalogSideLights+0x1418>)
    bbae:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    bbb0:	4bd1      	ldr	r3, [pc, #836]	; (bef8 <AnalogSideLights+0x1410>)
    bbb2:	8819      	ldrh	r1, [r3, #0]
    bbb4:	4bd2      	ldr	r3, [pc, #840]	; (bf00 <AnalogSideLights+0x1418>)
    bbb6:	881a      	ldrh	r2, [r3, #0]
    bbb8:	4bca      	ldr	r3, [pc, #808]	; (bee4 <AnalogSideLights+0x13fc>)
    bbba:	781b      	ldrb	r3, [r3, #0]
    bbbc:	4dd1      	ldr	r5, [pc, #836]	; (bf04 <AnalogSideLights+0x141c>)
    bbbe:	0038      	movs	r0, r7
    bbc0:	4cd1      	ldr	r4, [pc, #836]	; (bf08 <AnalogSideLights+0x1420>)
    bbc2:	47a0      	blx	r4
    bbc4:	003b      	movs	r3, r7
    bbc6:	0028      	movs	r0, r5
    bbc8:	0019      	movs	r1, r3
    bbca:	230c      	movs	r3, #12
    bbcc:	001a      	movs	r2, r3
    bbce:	4bcf      	ldr	r3, [pc, #828]	; (bf0c <AnalogSideLights+0x1424>)
    bbd0:	4798      	blx	r3
			break;
    bbd2:	e2a7      	b.n	c124 <AnalogSideLights+0x163c>
		}
		case COLOR_X_ACCEL:
		{
			if(axKalman < 0){
    bbd4:	4bce      	ldr	r3, [pc, #824]	; (bf10 <AnalogSideLights+0x1428>)
    bbd6:	681a      	ldr	r2, [r3, #0]
    bbd8:	4bce      	ldr	r3, [pc, #824]	; (bf14 <AnalogSideLights+0x142c>)
    bbda:	2100      	movs	r1, #0
    bbdc:	1c10      	adds	r0, r2, #0
    bbde:	4798      	blx	r3
    bbe0:	1e03      	subs	r3, r0, #0
    bbe2:	d040      	beq.n	bc66 <AnalogSideLights+0x117e>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
    bbe4:	4bca      	ldr	r3, [pc, #808]	; (bf10 <AnalogSideLights+0x1428>)
    bbe6:	681a      	ldr	r2, [r3, #0]
    bbe8:	4bcb      	ldr	r3, [pc, #812]	; (bf18 <AnalogSideLights+0x1430>)
    bbea:	49cc      	ldr	r1, [pc, #816]	; (bf1c <AnalogSideLights+0x1434>)
    bbec:	1c10      	adds	r0, r2, #0
    bbee:	4798      	blx	r3
    bbf0:	1c03      	adds	r3, r0, #0
    bbf2:	1c1a      	adds	r2, r3, #0
    bbf4:	4bca      	ldr	r3, [pc, #808]	; (bf20 <AnalogSideLights+0x1438>)
    bbf6:	1c10      	adds	r0, r2, #0
    bbf8:	4798      	blx	r3
    bbfa:	4cca      	ldr	r4, [pc, #808]	; (bf24 <AnalogSideLights+0x143c>)
    bbfc:	4aca      	ldr	r2, [pc, #808]	; (bf28 <AnalogSideLights+0x1440>)
    bbfe:	4bcb      	ldr	r3, [pc, #812]	; (bf2c <AnalogSideLights+0x1444>)
    bc00:	47a0      	blx	r4
    bc02:	0003      	movs	r3, r0
    bc04:	000c      	movs	r4, r1
    bc06:	0019      	movs	r1, r3
    bc08:	0022      	movs	r2, r4
    bc0a:	4bc9      	ldr	r3, [pc, #804]	; (bf30 <AnalogSideLights+0x1448>)
    bc0c:	0008      	movs	r0, r1
    bc0e:	0011      	movs	r1, r2
    bc10:	4798      	blx	r3
    bc12:	0002      	movs	r2, r0
    bc14:	4bc7      	ldr	r3, [pc, #796]	; (bf34 <AnalogSideLights+0x144c>)
    bc16:	49b9      	ldr	r1, [pc, #740]	; (befc <AnalogSideLights+0x1414>)
    bc18:	0010      	movs	r0, r2
    bc1a:	4798      	blx	r3
    bc1c:	000b      	movs	r3, r1
    bc1e:	001a      	movs	r2, r3
    bc20:	4baf      	ldr	r3, [pc, #700]	; (bee0 <AnalogSideLights+0x13f8>)
    bc22:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
    bc24:	4bba      	ldr	r3, [pc, #744]	; (bf10 <AnalogSideLights+0x1428>)
    bc26:	681a      	ldr	r2, [r3, #0]
    bc28:	4bbb      	ldr	r3, [pc, #748]	; (bf18 <AnalogSideLights+0x1430>)
    bc2a:	49bc      	ldr	r1, [pc, #752]	; (bf1c <AnalogSideLights+0x1434>)
    bc2c:	1c10      	adds	r0, r2, #0
    bc2e:	4798      	blx	r3
    bc30:	1c03      	adds	r3, r0, #0
    bc32:	1c1a      	adds	r2, r3, #0
    bc34:	4bba      	ldr	r3, [pc, #744]	; (bf20 <AnalogSideLights+0x1438>)
    bc36:	1c10      	adds	r0, r2, #0
    bc38:	4798      	blx	r3
    bc3a:	4cba      	ldr	r4, [pc, #744]	; (bf24 <AnalogSideLights+0x143c>)
    bc3c:	4aba      	ldr	r2, [pc, #744]	; (bf28 <AnalogSideLights+0x1440>)
    bc3e:	4bbb      	ldr	r3, [pc, #748]	; (bf2c <AnalogSideLights+0x1444>)
    bc40:	47a0      	blx	r4
    bc42:	0003      	movs	r3, r0
    bc44:	000c      	movs	r4, r1
    bc46:	0019      	movs	r1, r3
    bc48:	0022      	movs	r2, r4
    bc4a:	4bb9      	ldr	r3, [pc, #740]	; (bf30 <AnalogSideLights+0x1448>)
    bc4c:	0008      	movs	r0, r1
    bc4e:	0011      	movs	r1, r2
    bc50:	4798      	blx	r3
    bc52:	0002      	movs	r2, r0
    bc54:	4bb8      	ldr	r3, [pc, #736]	; (bf38 <AnalogSideLights+0x1450>)
    bc56:	49a9      	ldr	r1, [pc, #676]	; (befc <AnalogSideLights+0x1414>)
    bc58:	0010      	movs	r0, r2
    bc5a:	4798      	blx	r3
    bc5c:	0003      	movs	r3, r0
    bc5e:	b2da      	uxtb	r2, r3
    bc60:	4ba0      	ldr	r3, [pc, #640]	; (bee4 <AnalogSideLights+0x13fc>)
    bc62:	701a      	strb	r2, [r3, #0]
    bc64:	e03f      	b.n	bce6 <AnalogSideLights+0x11fe>
				} else {
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
    bc66:	4baa      	ldr	r3, [pc, #680]	; (bf10 <AnalogSideLights+0x1428>)
    bc68:	681a      	ldr	r2, [r3, #0]
    bc6a:	4bab      	ldr	r3, [pc, #684]	; (bf18 <AnalogSideLights+0x1430>)
    bc6c:	49ab      	ldr	r1, [pc, #684]	; (bf1c <AnalogSideLights+0x1434>)
    bc6e:	1c10      	adds	r0, r2, #0
    bc70:	4798      	blx	r3
    bc72:	1c03      	adds	r3, r0, #0
    bc74:	1c1a      	adds	r2, r3, #0
    bc76:	4baa      	ldr	r3, [pc, #680]	; (bf20 <AnalogSideLights+0x1438>)
    bc78:	1c10      	adds	r0, r2, #0
    bc7a:	4798      	blx	r3
    bc7c:	4ca9      	ldr	r4, [pc, #676]	; (bf24 <AnalogSideLights+0x143c>)
    bc7e:	4aaa      	ldr	r2, [pc, #680]	; (bf28 <AnalogSideLights+0x1440>)
    bc80:	4baa      	ldr	r3, [pc, #680]	; (bf2c <AnalogSideLights+0x1444>)
    bc82:	47a0      	blx	r4
    bc84:	0003      	movs	r3, r0
    bc86:	000c      	movs	r4, r1
    bc88:	0019      	movs	r1, r3
    bc8a:	0022      	movs	r2, r4
    bc8c:	4ba8      	ldr	r3, [pc, #672]	; (bf30 <AnalogSideLights+0x1448>)
    bc8e:	0008      	movs	r0, r1
    bc90:	0011      	movs	r1, r2
    bc92:	4798      	blx	r3
    bc94:	0002      	movs	r2, r0
    bc96:	4ba7      	ldr	r3, [pc, #668]	; (bf34 <AnalogSideLights+0x144c>)
    bc98:	4998      	ldr	r1, [pc, #608]	; (befc <AnalogSideLights+0x1414>)
    bc9a:	0010      	movs	r0, r2
    bc9c:	4798      	blx	r3
    bc9e:	000b      	movs	r3, r1
    bca0:	001a      	movs	r2, r3
    bca2:	4b8f      	ldr	r3, [pc, #572]	; (bee0 <AnalogSideLights+0x13f8>)
    bca4:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
    bca6:	4b9a      	ldr	r3, [pc, #616]	; (bf10 <AnalogSideLights+0x1428>)
    bca8:	681a      	ldr	r2, [r3, #0]
    bcaa:	4b9b      	ldr	r3, [pc, #620]	; (bf18 <AnalogSideLights+0x1430>)
    bcac:	499b      	ldr	r1, [pc, #620]	; (bf1c <AnalogSideLights+0x1434>)
    bcae:	1c10      	adds	r0, r2, #0
    bcb0:	4798      	blx	r3
    bcb2:	1c03      	adds	r3, r0, #0
    bcb4:	1c1a      	adds	r2, r3, #0
    bcb6:	4b9a      	ldr	r3, [pc, #616]	; (bf20 <AnalogSideLights+0x1438>)
    bcb8:	1c10      	adds	r0, r2, #0
    bcba:	4798      	blx	r3
    bcbc:	4c99      	ldr	r4, [pc, #612]	; (bf24 <AnalogSideLights+0x143c>)
    bcbe:	4a9a      	ldr	r2, [pc, #616]	; (bf28 <AnalogSideLights+0x1440>)
    bcc0:	4b9a      	ldr	r3, [pc, #616]	; (bf2c <AnalogSideLights+0x1444>)
    bcc2:	47a0      	blx	r4
    bcc4:	0003      	movs	r3, r0
    bcc6:	000c      	movs	r4, r1
    bcc8:	0019      	movs	r1, r3
    bcca:	0022      	movs	r2, r4
    bccc:	4b98      	ldr	r3, [pc, #608]	; (bf30 <AnalogSideLights+0x1448>)
    bcce:	0008      	movs	r0, r1
    bcd0:	0011      	movs	r1, r2
    bcd2:	4798      	blx	r3
    bcd4:	0002      	movs	r2, r0
    bcd6:	4b98      	ldr	r3, [pc, #608]	; (bf38 <AnalogSideLights+0x1450>)
    bcd8:	4988      	ldr	r1, [pc, #544]	; (befc <AnalogSideLights+0x1414>)
    bcda:	0010      	movs	r0, r2
    bcdc:	4798      	blx	r3
    bcde:	0003      	movs	r3, r0
    bce0:	b2da      	uxtb	r2, r3
    bce2:	4b80      	ldr	r3, [pc, #512]	; (bee4 <AnalogSideLights+0x13fc>)
    bce4:	701a      	strb	r2, [r3, #0]
			}

			upColor = cycle_index * output_brightness;
    bce6:	4b7e      	ldr	r3, [pc, #504]	; (bee0 <AnalogSideLights+0x13f8>)
    bce8:	681a      	ldr	r2, [r3, #0]
    bcea:	4b7f      	ldr	r3, [pc, #508]	; (bee8 <AnalogSideLights+0x1400>)
    bcec:	0010      	movs	r0, r2
    bcee:	4798      	blx	r3
    bcf0:	4b7e      	ldr	r3, [pc, #504]	; (beec <AnalogSideLights+0x1404>)
    bcf2:	681a      	ldr	r2, [r3, #0]
    bcf4:	4b7e      	ldr	r3, [pc, #504]	; (bef0 <AnalogSideLights+0x1408>)
    bcf6:	1c11      	adds	r1, r2, #0
    bcf8:	4798      	blx	r3
    bcfa:	1c03      	adds	r3, r0, #0
    bcfc:	1c1a      	adds	r2, r3, #0
    bcfe:	4b7d      	ldr	r3, [pc, #500]	; (bef4 <AnalogSideLights+0x140c>)
    bd00:	1c10      	adds	r0, r2, #0
    bd02:	4798      	blx	r3
    bd04:	0003      	movs	r3, r0
    bd06:	b29a      	uxth	r2, r3
    bd08:	4b7b      	ldr	r3, [pc, #492]	; (bef8 <AnalogSideLights+0x1410>)
    bd0a:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    bd0c:	4b74      	ldr	r3, [pc, #464]	; (bee0 <AnalogSideLights+0x13f8>)
    bd0e:	681b      	ldr	r3, [r3, #0]
    bd10:	4a7a      	ldr	r2, [pc, #488]	; (befc <AnalogSideLights+0x1414>)
    bd12:	1ad2      	subs	r2, r2, r3
    bd14:	4b74      	ldr	r3, [pc, #464]	; (bee8 <AnalogSideLights+0x1400>)
    bd16:	0010      	movs	r0, r2
    bd18:	4798      	blx	r3
    bd1a:	4b74      	ldr	r3, [pc, #464]	; (beec <AnalogSideLights+0x1404>)
    bd1c:	681a      	ldr	r2, [r3, #0]
    bd1e:	4b74      	ldr	r3, [pc, #464]	; (bef0 <AnalogSideLights+0x1408>)
    bd20:	1c11      	adds	r1, r2, #0
    bd22:	4798      	blx	r3
    bd24:	1c03      	adds	r3, r0, #0
    bd26:	1c1a      	adds	r2, r3, #0
    bd28:	4b72      	ldr	r3, [pc, #456]	; (bef4 <AnalogSideLights+0x140c>)
    bd2a:	1c10      	adds	r0, r2, #0
    bd2c:	4798      	blx	r3
    bd2e:	0003      	movs	r3, r0
    bd30:	b29a      	uxth	r2, r3
    bd32:	4b73      	ldr	r3, [pc, #460]	; (bf00 <AnalogSideLights+0x1418>)
    bd34:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    bd36:	4b70      	ldr	r3, [pc, #448]	; (bef8 <AnalogSideLights+0x1410>)
    bd38:	8819      	ldrh	r1, [r3, #0]
    bd3a:	4b71      	ldr	r3, [pc, #452]	; (bf00 <AnalogSideLights+0x1418>)
    bd3c:	881a      	ldrh	r2, [r3, #0]
    bd3e:	4b69      	ldr	r3, [pc, #420]	; (bee4 <AnalogSideLights+0x13fc>)
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	4d70      	ldr	r5, [pc, #448]	; (bf04 <AnalogSideLights+0x141c>)
    bd44:	0038      	movs	r0, r7
    bd46:	4c70      	ldr	r4, [pc, #448]	; (bf08 <AnalogSideLights+0x1420>)
    bd48:	47a0      	blx	r4
    bd4a:	003b      	movs	r3, r7
    bd4c:	0028      	movs	r0, r5
    bd4e:	0019      	movs	r1, r3
    bd50:	230c      	movs	r3, #12
    bd52:	001a      	movs	r2, r3
    bd54:	4b6d      	ldr	r3, [pc, #436]	; (bf0c <AnalogSideLights+0x1424>)
    bd56:	4798      	blx	r3
			break;
    bd58:	e1e4      	b.n	c124 <AnalogSideLights+0x163c>
		}
		case COLOR_Y_ACCEL:
		{
			if(ayKalman < 0){
    bd5a:	4b78      	ldr	r3, [pc, #480]	; (bf3c <AnalogSideLights+0x1454>)
    bd5c:	681a      	ldr	r2, [r3, #0]
    bd5e:	4b6d      	ldr	r3, [pc, #436]	; (bf14 <AnalogSideLights+0x142c>)
    bd60:	2100      	movs	r1, #0
    bd62:	1c10      	adds	r0, r2, #0
    bd64:	4798      	blx	r3
    bd66:	1e03      	subs	r3, r0, #0
    bd68:	d040      	beq.n	bdec <AnalogSideLights+0x1304>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
    bd6a:	4b74      	ldr	r3, [pc, #464]	; (bf3c <AnalogSideLights+0x1454>)
    bd6c:	681a      	ldr	r2, [r3, #0]
    bd6e:	4b6a      	ldr	r3, [pc, #424]	; (bf18 <AnalogSideLights+0x1430>)
    bd70:	496a      	ldr	r1, [pc, #424]	; (bf1c <AnalogSideLights+0x1434>)
    bd72:	1c10      	adds	r0, r2, #0
    bd74:	4798      	blx	r3
    bd76:	1c03      	adds	r3, r0, #0
    bd78:	1c1a      	adds	r2, r3, #0
    bd7a:	4b69      	ldr	r3, [pc, #420]	; (bf20 <AnalogSideLights+0x1438>)
    bd7c:	1c10      	adds	r0, r2, #0
    bd7e:	4798      	blx	r3
    bd80:	4c68      	ldr	r4, [pc, #416]	; (bf24 <AnalogSideLights+0x143c>)
    bd82:	4a69      	ldr	r2, [pc, #420]	; (bf28 <AnalogSideLights+0x1440>)
    bd84:	4b69      	ldr	r3, [pc, #420]	; (bf2c <AnalogSideLights+0x1444>)
    bd86:	47a0      	blx	r4
    bd88:	0003      	movs	r3, r0
    bd8a:	000c      	movs	r4, r1
    bd8c:	0019      	movs	r1, r3
    bd8e:	0022      	movs	r2, r4
    bd90:	4b67      	ldr	r3, [pc, #412]	; (bf30 <AnalogSideLights+0x1448>)
    bd92:	0008      	movs	r0, r1
    bd94:	0011      	movs	r1, r2
    bd96:	4798      	blx	r3
    bd98:	0002      	movs	r2, r0
    bd9a:	4b66      	ldr	r3, [pc, #408]	; (bf34 <AnalogSideLights+0x144c>)
    bd9c:	4957      	ldr	r1, [pc, #348]	; (befc <AnalogSideLights+0x1414>)
    bd9e:	0010      	movs	r0, r2
    bda0:	4798      	blx	r3
    bda2:	000b      	movs	r3, r1
    bda4:	001a      	movs	r2, r3
    bda6:	4b4e      	ldr	r3, [pc, #312]	; (bee0 <AnalogSideLights+0x13f8>)
    bda8:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
    bdaa:	4b64      	ldr	r3, [pc, #400]	; (bf3c <AnalogSideLights+0x1454>)
    bdac:	681a      	ldr	r2, [r3, #0]
    bdae:	4b5a      	ldr	r3, [pc, #360]	; (bf18 <AnalogSideLights+0x1430>)
    bdb0:	495a      	ldr	r1, [pc, #360]	; (bf1c <AnalogSideLights+0x1434>)
    bdb2:	1c10      	adds	r0, r2, #0
    bdb4:	4798      	blx	r3
    bdb6:	1c03      	adds	r3, r0, #0
    bdb8:	1c1a      	adds	r2, r3, #0
    bdba:	4b59      	ldr	r3, [pc, #356]	; (bf20 <AnalogSideLights+0x1438>)
    bdbc:	1c10      	adds	r0, r2, #0
    bdbe:	4798      	blx	r3
    bdc0:	4c58      	ldr	r4, [pc, #352]	; (bf24 <AnalogSideLights+0x143c>)
    bdc2:	4a59      	ldr	r2, [pc, #356]	; (bf28 <AnalogSideLights+0x1440>)
    bdc4:	4b59      	ldr	r3, [pc, #356]	; (bf2c <AnalogSideLights+0x1444>)
    bdc6:	47a0      	blx	r4
    bdc8:	0003      	movs	r3, r0
    bdca:	000c      	movs	r4, r1
    bdcc:	0019      	movs	r1, r3
    bdce:	0022      	movs	r2, r4
    bdd0:	4b57      	ldr	r3, [pc, #348]	; (bf30 <AnalogSideLights+0x1448>)
    bdd2:	0008      	movs	r0, r1
    bdd4:	0011      	movs	r1, r2
    bdd6:	4798      	blx	r3
    bdd8:	0002      	movs	r2, r0
    bdda:	4b57      	ldr	r3, [pc, #348]	; (bf38 <AnalogSideLights+0x1450>)
    bddc:	4947      	ldr	r1, [pc, #284]	; (befc <AnalogSideLights+0x1414>)
    bdde:	0010      	movs	r0, r2
    bde0:	4798      	blx	r3
    bde2:	0003      	movs	r3, r0
    bde4:	b2da      	uxtb	r2, r3
    bde6:	4b3f      	ldr	r3, [pc, #252]	; (bee4 <AnalogSideLights+0x13fc>)
    bde8:	701a      	strb	r2, [r3, #0]
    bdea:	e03f      	b.n	be6c <AnalogSideLights+0x1384>
				} else {
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
    bdec:	4b53      	ldr	r3, [pc, #332]	; (bf3c <AnalogSideLights+0x1454>)
    bdee:	681a      	ldr	r2, [r3, #0]
    bdf0:	4b49      	ldr	r3, [pc, #292]	; (bf18 <AnalogSideLights+0x1430>)
    bdf2:	494a      	ldr	r1, [pc, #296]	; (bf1c <AnalogSideLights+0x1434>)
    bdf4:	1c10      	adds	r0, r2, #0
    bdf6:	4798      	blx	r3
    bdf8:	1c03      	adds	r3, r0, #0
    bdfa:	1c1a      	adds	r2, r3, #0
    bdfc:	4b48      	ldr	r3, [pc, #288]	; (bf20 <AnalogSideLights+0x1438>)
    bdfe:	1c10      	adds	r0, r2, #0
    be00:	4798      	blx	r3
    be02:	4c48      	ldr	r4, [pc, #288]	; (bf24 <AnalogSideLights+0x143c>)
    be04:	4a48      	ldr	r2, [pc, #288]	; (bf28 <AnalogSideLights+0x1440>)
    be06:	4b49      	ldr	r3, [pc, #292]	; (bf2c <AnalogSideLights+0x1444>)
    be08:	47a0      	blx	r4
    be0a:	0003      	movs	r3, r0
    be0c:	000c      	movs	r4, r1
    be0e:	0019      	movs	r1, r3
    be10:	0022      	movs	r2, r4
    be12:	4b47      	ldr	r3, [pc, #284]	; (bf30 <AnalogSideLights+0x1448>)
    be14:	0008      	movs	r0, r1
    be16:	0011      	movs	r1, r2
    be18:	4798      	blx	r3
    be1a:	0002      	movs	r2, r0
    be1c:	4b45      	ldr	r3, [pc, #276]	; (bf34 <AnalogSideLights+0x144c>)
    be1e:	4937      	ldr	r1, [pc, #220]	; (befc <AnalogSideLights+0x1414>)
    be20:	0010      	movs	r0, r2
    be22:	4798      	blx	r3
    be24:	000b      	movs	r3, r1
    be26:	001a      	movs	r2, r3
    be28:	4b2d      	ldr	r3, [pc, #180]	; (bee0 <AnalogSideLights+0x13f8>)
    be2a:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
    be2c:	4b43      	ldr	r3, [pc, #268]	; (bf3c <AnalogSideLights+0x1454>)
    be2e:	681a      	ldr	r2, [r3, #0]
    be30:	4b39      	ldr	r3, [pc, #228]	; (bf18 <AnalogSideLights+0x1430>)
    be32:	493a      	ldr	r1, [pc, #232]	; (bf1c <AnalogSideLights+0x1434>)
    be34:	1c10      	adds	r0, r2, #0
    be36:	4798      	blx	r3
    be38:	1c03      	adds	r3, r0, #0
    be3a:	1c1a      	adds	r2, r3, #0
    be3c:	4b38      	ldr	r3, [pc, #224]	; (bf20 <AnalogSideLights+0x1438>)
    be3e:	1c10      	adds	r0, r2, #0
    be40:	4798      	blx	r3
    be42:	4c38      	ldr	r4, [pc, #224]	; (bf24 <AnalogSideLights+0x143c>)
    be44:	4a38      	ldr	r2, [pc, #224]	; (bf28 <AnalogSideLights+0x1440>)
    be46:	4b39      	ldr	r3, [pc, #228]	; (bf2c <AnalogSideLights+0x1444>)
    be48:	47a0      	blx	r4
    be4a:	0003      	movs	r3, r0
    be4c:	000c      	movs	r4, r1
    be4e:	0019      	movs	r1, r3
    be50:	0022      	movs	r2, r4
    be52:	4b37      	ldr	r3, [pc, #220]	; (bf30 <AnalogSideLights+0x1448>)
    be54:	0008      	movs	r0, r1
    be56:	0011      	movs	r1, r2
    be58:	4798      	blx	r3
    be5a:	0002      	movs	r2, r0
    be5c:	4b36      	ldr	r3, [pc, #216]	; (bf38 <AnalogSideLights+0x1450>)
    be5e:	4927      	ldr	r1, [pc, #156]	; (befc <AnalogSideLights+0x1414>)
    be60:	0010      	movs	r0, r2
    be62:	4798      	blx	r3
    be64:	0003      	movs	r3, r0
    be66:	b2da      	uxtb	r2, r3
    be68:	4b1e      	ldr	r3, [pc, #120]	; (bee4 <AnalogSideLights+0x13fc>)
    be6a:	701a      	strb	r2, [r3, #0]
			}

			upColor = cycle_index * output_brightness;
    be6c:	4b1c      	ldr	r3, [pc, #112]	; (bee0 <AnalogSideLights+0x13f8>)
    be6e:	681a      	ldr	r2, [r3, #0]
    be70:	4b1d      	ldr	r3, [pc, #116]	; (bee8 <AnalogSideLights+0x1400>)
    be72:	0010      	movs	r0, r2
    be74:	4798      	blx	r3
    be76:	4b1d      	ldr	r3, [pc, #116]	; (beec <AnalogSideLights+0x1404>)
    be78:	681a      	ldr	r2, [r3, #0]
    be7a:	4b1d      	ldr	r3, [pc, #116]	; (bef0 <AnalogSideLights+0x1408>)
    be7c:	1c11      	adds	r1, r2, #0
    be7e:	4798      	blx	r3
    be80:	1c03      	adds	r3, r0, #0
    be82:	1c1a      	adds	r2, r3, #0
    be84:	4b1b      	ldr	r3, [pc, #108]	; (bef4 <AnalogSideLights+0x140c>)
    be86:	1c10      	adds	r0, r2, #0
    be88:	4798      	blx	r3
    be8a:	0003      	movs	r3, r0
    be8c:	b29a      	uxth	r2, r3
    be8e:	4b1a      	ldr	r3, [pc, #104]	; (bef8 <AnalogSideLights+0x1410>)
    be90:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    be92:	4b13      	ldr	r3, [pc, #76]	; (bee0 <AnalogSideLights+0x13f8>)
    be94:	681b      	ldr	r3, [r3, #0]
    be96:	4a19      	ldr	r2, [pc, #100]	; (befc <AnalogSideLights+0x1414>)
    be98:	1ad2      	subs	r2, r2, r3
    be9a:	4b13      	ldr	r3, [pc, #76]	; (bee8 <AnalogSideLights+0x1400>)
    be9c:	0010      	movs	r0, r2
    be9e:	4798      	blx	r3
    bea0:	4b12      	ldr	r3, [pc, #72]	; (beec <AnalogSideLights+0x1404>)
    bea2:	681a      	ldr	r2, [r3, #0]
    bea4:	4b12      	ldr	r3, [pc, #72]	; (bef0 <AnalogSideLights+0x1408>)
    bea6:	1c11      	adds	r1, r2, #0
    bea8:	4798      	blx	r3
    beaa:	1c03      	adds	r3, r0, #0
    beac:	1c1a      	adds	r2, r3, #0
    beae:	4b11      	ldr	r3, [pc, #68]	; (bef4 <AnalogSideLights+0x140c>)
    beb0:	1c10      	adds	r0, r2, #0
    beb2:	4798      	blx	r3
    beb4:	0003      	movs	r3, r0
    beb6:	b29a      	uxth	r2, r3
    beb8:	4b11      	ldr	r3, [pc, #68]	; (bf00 <AnalogSideLights+0x1418>)
    beba:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    bebc:	4b0e      	ldr	r3, [pc, #56]	; (bef8 <AnalogSideLights+0x1410>)
    bebe:	8819      	ldrh	r1, [r3, #0]
    bec0:	4b0f      	ldr	r3, [pc, #60]	; (bf00 <AnalogSideLights+0x1418>)
    bec2:	881a      	ldrh	r2, [r3, #0]
    bec4:	4b07      	ldr	r3, [pc, #28]	; (bee4 <AnalogSideLights+0x13fc>)
    bec6:	781b      	ldrb	r3, [r3, #0]
    bec8:	4d0e      	ldr	r5, [pc, #56]	; (bf04 <AnalogSideLights+0x141c>)
    beca:	0038      	movs	r0, r7
    becc:	4c0e      	ldr	r4, [pc, #56]	; (bf08 <AnalogSideLights+0x1420>)
    bece:	47a0      	blx	r4
    bed0:	003b      	movs	r3, r7
    bed2:	0028      	movs	r0, r5
    bed4:	0019      	movs	r1, r3
    bed6:	230c      	movs	r3, #12
    bed8:	001a      	movs	r2, r3
    beda:	4b0c      	ldr	r3, [pc, #48]	; (bf0c <AnalogSideLights+0x1424>)
    bedc:	4798      	blx	r3
			break;
    bede:	e121      	b.n	c124 <AnalogSideLights+0x163c>
    bee0:	20000374 	.word	0x20000374
    bee4:	20000373 	.word	0x20000373
    bee8:	00019605 	.word	0x00019605
    beec:	20000454 	.word	0x20000454
    bef0:	00018fad 	.word	0x00018fad
    bef4:	0001883d 	.word	0x0001883d
    bef8:	20000378 	.word	0x20000378
    befc:	0000ffff 	.word	0x0000ffff
    bf00:	2000037a 	.word	0x2000037a
    bf04:	20000360 	.word	0x20000360
    bf08:	0000a59d 	.word	0x0000a59d
    bf0c:	0001b3e9 	.word	0x0001b3e9
    bf10:	20000338 	.word	0x20000338
    bf14:	00018799 	.word	0x00018799
    bf18:	000188a9 	.word	0x000188a9
    bf1c:	44bb8000 	.word	0x44bb8000
    bf20:	0001b1a1 	.word	0x0001b1a1
    bf24:	0001a519 	.word	0x0001a519
    bf28:	70a3d70a 	.word	0x70a3d70a
    bf2c:	4050623d 	.word	0x4050623d
    bf30:	0001b045 	.word	0x0001b045
    bf34:	000186ed 	.word	0x000186ed
    bf38:	00018521 	.word	0x00018521
    bf3c:	2000033c 	.word	0x2000033c
		}
		case COLOR_Z_ACCEL:
		{
			if(azKalman < 0){
    bf40:	4b9a      	ldr	r3, [pc, #616]	; (c1ac <AnalogSideLights+0x16c4>)
    bf42:	681a      	ldr	r2, [r3, #0]
    bf44:	4b9a      	ldr	r3, [pc, #616]	; (c1b0 <AnalogSideLights+0x16c8>)
    bf46:	2100      	movs	r1, #0
    bf48:	1c10      	adds	r0, r2, #0
    bf4a:	4798      	blx	r3
    bf4c:	1e03      	subs	r3, r0, #0
    bf4e:	d056      	beq.n	bffe <AnalogSideLights+0x1516>
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) % 0x0FFFF;
    bf50:	4b98      	ldr	r3, [pc, #608]	; (c1b4 <AnalogSideLights+0x16cc>)
    bf52:	681a      	ldr	r2, [r3, #0]
    bf54:	4b98      	ldr	r3, [pc, #608]	; (c1b8 <AnalogSideLights+0x16d0>)
    bf56:	1c10      	adds	r0, r2, #0
    bf58:	4798      	blx	r3
    bf5a:	0002      	movs	r2, r0
    bf5c:	000b      	movs	r3, r1
    bf5e:	4c97      	ldr	r4, [pc, #604]	; (c1bc <AnalogSideLights+0x16d4>)
    bf60:	2000      	movs	r0, #0
    bf62:	4997      	ldr	r1, [pc, #604]	; (c1c0 <AnalogSideLights+0x16d8>)
    bf64:	47a0      	blx	r4
    bf66:	0003      	movs	r3, r0
    bf68:	000c      	movs	r4, r1
    bf6a:	001d      	movs	r5, r3
    bf6c:	0026      	movs	r6, r4
    bf6e:	4b8f      	ldr	r3, [pc, #572]	; (c1ac <AnalogSideLights+0x16c4>)
    bf70:	681a      	ldr	r2, [r3, #0]
    bf72:	4b91      	ldr	r3, [pc, #580]	; (c1b8 <AnalogSideLights+0x16d0>)
    bf74:	1c10      	adds	r0, r2, #0
    bf76:	4798      	blx	r3
    bf78:	0002      	movs	r2, r0
    bf7a:	000b      	movs	r3, r1
    bf7c:	4c91      	ldr	r4, [pc, #580]	; (c1c4 <AnalogSideLights+0x16dc>)
    bf7e:	0028      	movs	r0, r5
    bf80:	0031      	movs	r1, r6
    bf82:	47a0      	blx	r4
    bf84:	0003      	movs	r3, r0
    bf86:	000c      	movs	r4, r1
    bf88:	0019      	movs	r1, r3
    bf8a:	0022      	movs	r2, r4
    bf8c:	4b8e      	ldr	r3, [pc, #568]	; (c1c8 <AnalogSideLights+0x16e0>)
    bf8e:	0008      	movs	r0, r1
    bf90:	0011      	movs	r1, r2
    bf92:	4798      	blx	r3
    bf94:	0002      	movs	r2, r0
    bf96:	4b8d      	ldr	r3, [pc, #564]	; (c1cc <AnalogSideLights+0x16e4>)
    bf98:	498d      	ldr	r1, [pc, #564]	; (c1d0 <AnalogSideLights+0x16e8>)
    bf9a:	0010      	movs	r0, r2
    bf9c:	4798      	blx	r3
    bf9e:	000b      	movs	r3, r1
    bfa0:	001a      	movs	r2, r3
    bfa2:	4b8c      	ldr	r3, [pc, #560]	; (c1d4 <AnalogSideLights+0x16ec>)
    bfa4:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) / 0x0FFFF;
    bfa6:	4b83      	ldr	r3, [pc, #524]	; (c1b4 <AnalogSideLights+0x16cc>)
    bfa8:	681a      	ldr	r2, [r3, #0]
    bfaa:	4b83      	ldr	r3, [pc, #524]	; (c1b8 <AnalogSideLights+0x16d0>)
    bfac:	1c10      	adds	r0, r2, #0
    bfae:	4798      	blx	r3
    bfb0:	0002      	movs	r2, r0
    bfb2:	000b      	movs	r3, r1
    bfb4:	4c81      	ldr	r4, [pc, #516]	; (c1bc <AnalogSideLights+0x16d4>)
    bfb6:	2000      	movs	r0, #0
    bfb8:	4981      	ldr	r1, [pc, #516]	; (c1c0 <AnalogSideLights+0x16d8>)
    bfba:	47a0      	blx	r4
    bfbc:	0003      	movs	r3, r0
    bfbe:	000c      	movs	r4, r1
    bfc0:	001d      	movs	r5, r3
    bfc2:	0026      	movs	r6, r4
    bfc4:	4b79      	ldr	r3, [pc, #484]	; (c1ac <AnalogSideLights+0x16c4>)
    bfc6:	681a      	ldr	r2, [r3, #0]
    bfc8:	4b7b      	ldr	r3, [pc, #492]	; (c1b8 <AnalogSideLights+0x16d0>)
    bfca:	1c10      	adds	r0, r2, #0
    bfcc:	4798      	blx	r3
    bfce:	0002      	movs	r2, r0
    bfd0:	000b      	movs	r3, r1
    bfd2:	4c7c      	ldr	r4, [pc, #496]	; (c1c4 <AnalogSideLights+0x16dc>)
    bfd4:	0028      	movs	r0, r5
    bfd6:	0031      	movs	r1, r6
    bfd8:	47a0      	blx	r4
    bfda:	0003      	movs	r3, r0
    bfdc:	000c      	movs	r4, r1
    bfde:	0019      	movs	r1, r3
    bfe0:	0022      	movs	r2, r4
    bfe2:	4b79      	ldr	r3, [pc, #484]	; (c1c8 <AnalogSideLights+0x16e0>)
    bfe4:	0008      	movs	r0, r1
    bfe6:	0011      	movs	r1, r2
    bfe8:	4798      	blx	r3
    bfea:	0002      	movs	r2, r0
    bfec:	4b7a      	ldr	r3, [pc, #488]	; (c1d8 <AnalogSideLights+0x16f0>)
    bfee:	4978      	ldr	r1, [pc, #480]	; (c1d0 <AnalogSideLights+0x16e8>)
    bff0:	0010      	movs	r0, r2
    bff2:	4798      	blx	r3
    bff4:	0003      	movs	r3, r0
    bff6:	b2da      	uxtb	r2, r3
    bff8:	4b78      	ldr	r3, [pc, #480]	; (c1dc <AnalogSideLights+0x16f4>)
    bffa:	701a      	strb	r2, [r3, #0]
    bffc:	e055      	b.n	c0aa <AnalogSideLights+0x15c2>
				} else {
				cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) % 0x0FFFF;
    bffe:	4b78      	ldr	r3, [pc, #480]	; (c1e0 <AnalogSideLights+0x16f8>)
    c000:	681a      	ldr	r2, [r3, #0]
    c002:	4b6d      	ldr	r3, [pc, #436]	; (c1b8 <AnalogSideLights+0x16d0>)
    c004:	1c10      	adds	r0, r2, #0
    c006:	4798      	blx	r3
    c008:	0002      	movs	r2, r0
    c00a:	000b      	movs	r3, r1
    c00c:	4c6b      	ldr	r4, [pc, #428]	; (c1bc <AnalogSideLights+0x16d4>)
    c00e:	2000      	movs	r0, #0
    c010:	496b      	ldr	r1, [pc, #428]	; (c1c0 <AnalogSideLights+0x16d8>)
    c012:	47a0      	blx	r4
    c014:	0003      	movs	r3, r0
    c016:	000c      	movs	r4, r1
    c018:	001d      	movs	r5, r3
    c01a:	0026      	movs	r6, r4
    c01c:	4b63      	ldr	r3, [pc, #396]	; (c1ac <AnalogSideLights+0x16c4>)
    c01e:	681a      	ldr	r2, [r3, #0]
    c020:	4b65      	ldr	r3, [pc, #404]	; (c1b8 <AnalogSideLights+0x16d0>)
    c022:	1c10      	adds	r0, r2, #0
    c024:	4798      	blx	r3
    c026:	0002      	movs	r2, r0
    c028:	000b      	movs	r3, r1
    c02a:	4c66      	ldr	r4, [pc, #408]	; (c1c4 <AnalogSideLights+0x16dc>)
    c02c:	0028      	movs	r0, r5
    c02e:	0031      	movs	r1, r6
    c030:	47a0      	blx	r4
    c032:	0003      	movs	r3, r0
    c034:	000c      	movs	r4, r1
    c036:	0019      	movs	r1, r3
    c038:	0022      	movs	r2, r4
    c03a:	4b63      	ldr	r3, [pc, #396]	; (c1c8 <AnalogSideLights+0x16e0>)
    c03c:	0008      	movs	r0, r1
    c03e:	0011      	movs	r1, r2
    c040:	4798      	blx	r3
    c042:	0002      	movs	r2, r0
    c044:	4b61      	ldr	r3, [pc, #388]	; (c1cc <AnalogSideLights+0x16e4>)
    c046:	4962      	ldr	r1, [pc, #392]	; (c1d0 <AnalogSideLights+0x16e8>)
    c048:	0010      	movs	r0, r2
    c04a:	4798      	blx	r3
    c04c:	000b      	movs	r3, r1
    c04e:	001a      	movs	r2, r3
    c050:	4b60      	ldr	r3, [pc, #384]	; (c1d4 <AnalogSideLights+0x16ec>)
    c052:	601a      	str	r2, [r3, #0]
				cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) / 0x0FFFF;
    c054:	4b62      	ldr	r3, [pc, #392]	; (c1e0 <AnalogSideLights+0x16f8>)
    c056:	681a      	ldr	r2, [r3, #0]
    c058:	4b57      	ldr	r3, [pc, #348]	; (c1b8 <AnalogSideLights+0x16d0>)
    c05a:	1c10      	adds	r0, r2, #0
    c05c:	4798      	blx	r3
    c05e:	0002      	movs	r2, r0
    c060:	000b      	movs	r3, r1
    c062:	4c56      	ldr	r4, [pc, #344]	; (c1bc <AnalogSideLights+0x16d4>)
    c064:	2000      	movs	r0, #0
    c066:	4956      	ldr	r1, [pc, #344]	; (c1c0 <AnalogSideLights+0x16d8>)
    c068:	47a0      	blx	r4
    c06a:	0003      	movs	r3, r0
    c06c:	000c      	movs	r4, r1
    c06e:	001d      	movs	r5, r3
    c070:	0026      	movs	r6, r4
    c072:	4b4e      	ldr	r3, [pc, #312]	; (c1ac <AnalogSideLights+0x16c4>)
    c074:	681a      	ldr	r2, [r3, #0]
    c076:	4b50      	ldr	r3, [pc, #320]	; (c1b8 <AnalogSideLights+0x16d0>)
    c078:	1c10      	adds	r0, r2, #0
    c07a:	4798      	blx	r3
    c07c:	0002      	movs	r2, r0
    c07e:	000b      	movs	r3, r1
    c080:	4c50      	ldr	r4, [pc, #320]	; (c1c4 <AnalogSideLights+0x16dc>)
    c082:	0028      	movs	r0, r5
    c084:	0031      	movs	r1, r6
    c086:	47a0      	blx	r4
    c088:	0003      	movs	r3, r0
    c08a:	000c      	movs	r4, r1
    c08c:	0019      	movs	r1, r3
    c08e:	0022      	movs	r2, r4
    c090:	4b4d      	ldr	r3, [pc, #308]	; (c1c8 <AnalogSideLights+0x16e0>)
    c092:	0008      	movs	r0, r1
    c094:	0011      	movs	r1, r2
    c096:	4798      	blx	r3
    c098:	0002      	movs	r2, r0
    c09a:	4b4f      	ldr	r3, [pc, #316]	; (c1d8 <AnalogSideLights+0x16f0>)
    c09c:	494c      	ldr	r1, [pc, #304]	; (c1d0 <AnalogSideLights+0x16e8>)
    c09e:	0010      	movs	r0, r2
    c0a0:	4798      	blx	r3
    c0a2:	0003      	movs	r3, r0
    c0a4:	b2da      	uxtb	r2, r3
    c0a6:	4b4d      	ldr	r3, [pc, #308]	; (c1dc <AnalogSideLights+0x16f4>)
    c0a8:	701a      	strb	r2, [r3, #0]
			}

			upColor = cycle_index * output_brightness;
    c0aa:	4b4a      	ldr	r3, [pc, #296]	; (c1d4 <AnalogSideLights+0x16ec>)
    c0ac:	681a      	ldr	r2, [r3, #0]
    c0ae:	4b4d      	ldr	r3, [pc, #308]	; (c1e4 <AnalogSideLights+0x16fc>)
    c0b0:	0010      	movs	r0, r2
    c0b2:	4798      	blx	r3
    c0b4:	4b4c      	ldr	r3, [pc, #304]	; (c1e8 <AnalogSideLights+0x1700>)
    c0b6:	681a      	ldr	r2, [r3, #0]
    c0b8:	4b4c      	ldr	r3, [pc, #304]	; (c1ec <AnalogSideLights+0x1704>)
    c0ba:	1c11      	adds	r1, r2, #0
    c0bc:	4798      	blx	r3
    c0be:	1c03      	adds	r3, r0, #0
    c0c0:	1c1a      	adds	r2, r3, #0
    c0c2:	4b4b      	ldr	r3, [pc, #300]	; (c1f0 <AnalogSideLights+0x1708>)
    c0c4:	1c10      	adds	r0, r2, #0
    c0c6:	4798      	blx	r3
    c0c8:	0003      	movs	r3, r0
    c0ca:	b29a      	uxth	r2, r3
    c0cc:	4b49      	ldr	r3, [pc, #292]	; (c1f4 <AnalogSideLights+0x170c>)
    c0ce:	801a      	strh	r2, [r3, #0]
			downColor = (0xFFFF-cycle_index) * output_brightness;
    c0d0:	4b40      	ldr	r3, [pc, #256]	; (c1d4 <AnalogSideLights+0x16ec>)
    c0d2:	681b      	ldr	r3, [r3, #0]
    c0d4:	4a3e      	ldr	r2, [pc, #248]	; (c1d0 <AnalogSideLights+0x16e8>)
    c0d6:	1ad2      	subs	r2, r2, r3
    c0d8:	4b42      	ldr	r3, [pc, #264]	; (c1e4 <AnalogSideLights+0x16fc>)
    c0da:	0010      	movs	r0, r2
    c0dc:	4798      	blx	r3
    c0de:	4b42      	ldr	r3, [pc, #264]	; (c1e8 <AnalogSideLights+0x1700>)
    c0e0:	681a      	ldr	r2, [r3, #0]
    c0e2:	4b42      	ldr	r3, [pc, #264]	; (c1ec <AnalogSideLights+0x1704>)
    c0e4:	1c11      	adds	r1, r2, #0
    c0e6:	4798      	blx	r3
    c0e8:	1c03      	adds	r3, r0, #0
    c0ea:	1c1a      	adds	r2, r3, #0
    c0ec:	4b40      	ldr	r3, [pc, #256]	; (c1f0 <AnalogSideLights+0x1708>)
    c0ee:	1c10      	adds	r0, r2, #0
    c0f0:	4798      	blx	r3
    c0f2:	0003      	movs	r3, r0
    c0f4:	b29a      	uxth	r2, r3
    c0f6:	4b40      	ldr	r3, [pc, #256]	; (c1f8 <AnalogSideLights+0x1710>)
    c0f8:	801a      	strh	r2, [r3, #0]

			RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
    c0fa:	4b3e      	ldr	r3, [pc, #248]	; (c1f4 <AnalogSideLights+0x170c>)
    c0fc:	8819      	ldrh	r1, [r3, #0]
    c0fe:	4b3e      	ldr	r3, [pc, #248]	; (c1f8 <AnalogSideLights+0x1710>)
    c100:	881a      	ldrh	r2, [r3, #0]
    c102:	4b36      	ldr	r3, [pc, #216]	; (c1dc <AnalogSideLights+0x16f4>)
    c104:	781b      	ldrb	r3, [r3, #0]
    c106:	4d3d      	ldr	r5, [pc, #244]	; (c1fc <AnalogSideLights+0x1714>)
    c108:	0038      	movs	r0, r7
    c10a:	4c3d      	ldr	r4, [pc, #244]	; (c200 <AnalogSideLights+0x1718>)
    c10c:	47a0      	blx	r4
    c10e:	003b      	movs	r3, r7
    c110:	0028      	movs	r0, r5
    c112:	0019      	movs	r1, r3
    c114:	230c      	movs	r3, #12
    c116:	001a      	movs	r2, r3
    c118:	4b3a      	ldr	r3, [pc, #232]	; (c204 <AnalogSideLights+0x171c>)
    c11a:	4798      	blx	r3
			break;
    c11c:	e002      	b.n	c124 <AnalogSideLights+0x163c>
			break;
    c11e:	46c0      	nop			; (mov r8, r8)
    c120:	e000      	b.n	c124 <AnalogSideLights+0x163c>
			break;
    c122:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(SUPRESS_LEFT_RGB){
    c124:	4b38      	ldr	r3, [pc, #224]	; (c208 <AnalogSideLights+0x1720>)
    c126:	781b      	ldrb	r3, [r3, #0]
    c128:	2b00      	cmp	r3, #0
    c12a:	d00b      	beq.n	c144 <AnalogSideLights+0x165c>
		RGB_Ouptut.LR = 0;
    c12c:	4b33      	ldr	r3, [pc, #204]	; (c1fc <AnalogSideLights+0x1714>)
    c12e:	2200      	movs	r2, #0
    c130:	801a      	strh	r2, [r3, #0]
		RGB_Ouptut.LG = 0;
    c132:	4b32      	ldr	r3, [pc, #200]	; (c1fc <AnalogSideLights+0x1714>)
    c134:	2200      	movs	r2, #0
    c136:	805a      	strh	r2, [r3, #2]
		RGB_Ouptut.LB = 0;
    c138:	4b30      	ldr	r3, [pc, #192]	; (c1fc <AnalogSideLights+0x1714>)
    c13a:	2200      	movs	r2, #0
    c13c:	809a      	strh	r2, [r3, #4]
		SUPRESS_LEFT_RGB = false;
    c13e:	4b32      	ldr	r3, [pc, #200]	; (c208 <AnalogSideLights+0x1720>)
    c140:	2200      	movs	r2, #0
    c142:	701a      	strb	r2, [r3, #0]
	}
	if(SUPRESS_RIGHT_RGB){
    c144:	4b31      	ldr	r3, [pc, #196]	; (c20c <AnalogSideLights+0x1724>)
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	2b00      	cmp	r3, #0
    c14a:	d00b      	beq.n	c164 <AnalogSideLights+0x167c>
		RGB_Ouptut.RR = 0;
    c14c:	4b2b      	ldr	r3, [pc, #172]	; (c1fc <AnalogSideLights+0x1714>)
    c14e:	2200      	movs	r2, #0
    c150:	80da      	strh	r2, [r3, #6]
		RGB_Ouptut.RG = 0;
    c152:	4b2a      	ldr	r3, [pc, #168]	; (c1fc <AnalogSideLights+0x1714>)
    c154:	2200      	movs	r2, #0
    c156:	811a      	strh	r2, [r3, #8]
		RGB_Ouptut.RB = 0;
    c158:	4b28      	ldr	r3, [pc, #160]	; (c1fc <AnalogSideLights+0x1714>)
    c15a:	2200      	movs	r2, #0
    c15c:	815a      	strh	r2, [r3, #10]
		SUPRESS_RIGHT_RGB = false;
    c15e:	4b2b      	ldr	r3, [pc, #172]	; (c20c <AnalogSideLights+0x1724>)
    c160:	2200      	movs	r2, #0
    c162:	701a      	strb	r2, [r3, #0]
	}
	
	if(SYNC_RGB)
    c164:	4b2a      	ldr	r3, [pc, #168]	; (c210 <AnalogSideLights+0x1728>)
    c166:	781b      	ldrb	r3, [r3, #0]
    c168:	2b00      	cmp	r3, #0
    c16a:	d009      	beq.n	c180 <AnalogSideLights+0x1698>
	setLeftRGB(RGB_Ouptut.LR,RGB_Ouptut.LG,RGB_Ouptut.LB);
    c16c:	4b23      	ldr	r3, [pc, #140]	; (c1fc <AnalogSideLights+0x1714>)
    c16e:	8818      	ldrh	r0, [r3, #0]
    c170:	4b22      	ldr	r3, [pc, #136]	; (c1fc <AnalogSideLights+0x1714>)
    c172:	8859      	ldrh	r1, [r3, #2]
    c174:	4b21      	ldr	r3, [pc, #132]	; (c1fc <AnalogSideLights+0x1714>)
    c176:	889b      	ldrh	r3, [r3, #4]
    c178:	001a      	movs	r2, r3
    c17a:	4b26      	ldr	r3, [pc, #152]	; (c214 <AnalogSideLights+0x172c>)
    c17c:	4798      	blx	r3
    c17e:	e008      	b.n	c192 <AnalogSideLights+0x16aa>
	else
	setLeftRGB(RGB_Ouptut.LG, RGB_Ouptut.LB, RGB_Ouptut.LR);
    c180:	4b1e      	ldr	r3, [pc, #120]	; (c1fc <AnalogSideLights+0x1714>)
    c182:	8858      	ldrh	r0, [r3, #2]
    c184:	4b1d      	ldr	r3, [pc, #116]	; (c1fc <AnalogSideLights+0x1714>)
    c186:	8899      	ldrh	r1, [r3, #4]
    c188:	4b1c      	ldr	r3, [pc, #112]	; (c1fc <AnalogSideLights+0x1714>)
    c18a:	881b      	ldrh	r3, [r3, #0]
    c18c:	001a      	movs	r2, r3
    c18e:	4b21      	ldr	r3, [pc, #132]	; (c214 <AnalogSideLights+0x172c>)
    c190:	4798      	blx	r3
	setRightRGB(RGB_Ouptut.RR,RGB_Ouptut.RG,RGB_Ouptut.RB);
    c192:	4b1a      	ldr	r3, [pc, #104]	; (c1fc <AnalogSideLights+0x1714>)
    c194:	88d8      	ldrh	r0, [r3, #6]
    c196:	4b19      	ldr	r3, [pc, #100]	; (c1fc <AnalogSideLights+0x1714>)
    c198:	8919      	ldrh	r1, [r3, #8]
    c19a:	4b18      	ldr	r3, [pc, #96]	; (c1fc <AnalogSideLights+0x1714>)
    c19c:	895b      	ldrh	r3, [r3, #10]
    c19e:	001a      	movs	r2, r3
    c1a0:	4b1d      	ldr	r3, [pc, #116]	; (c218 <AnalogSideLights+0x1730>)
    c1a2:	4798      	blx	r3
}
    c1a4:	46c0      	nop			; (mov r8, r8)
    c1a6:	46bd      	mov	sp, r7
    c1a8:	b007      	add	sp, #28
    c1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1ac:	20000340 	.word	0x20000340
    c1b0:	00018799 	.word	0x00018799
    c1b4:	20000014 	.word	0x20000014
    c1b8:	0001b1a1 	.word	0x0001b1a1
    c1bc:	00019cb1 	.word	0x00019cb1
    c1c0:	4107ffe8 	.word	0x4107ffe8
    c1c4:	0001a519 	.word	0x0001a519
    c1c8:	0001b045 	.word	0x0001b045
    c1cc:	000186ed 	.word	0x000186ed
    c1d0:	0000ffff 	.word	0x0000ffff
    c1d4:	20000374 	.word	0x20000374
    c1d8:	00018521 	.word	0x00018521
    c1dc:	20000373 	.word	0x20000373
    c1e0:	20000018 	.word	0x20000018
    c1e4:	00019605 	.word	0x00019605
    c1e8:	20000454 	.word	0x20000454
    c1ec:	00018fad 	.word	0x00018fad
    c1f0:	0001883d 	.word	0x0001883d
    c1f4:	20000378 	.word	0x20000378
    c1f8:	2000037a 	.word	0x2000037a
    c1fc:	20000360 	.word	0x20000360
    c200:	0000a59d 	.word	0x0000a59d
    c204:	0001b3e9 	.word	0x0001b3e9
    c208:	2000036c 	.word	0x2000036c
    c20c:	2000036d 	.word	0x2000036d
    c210:	200000ca 	.word	0x200000ca
    c214:	0000a405 	.word	0x0000a405
    c218:	0000a481 	.word	0x0000a481

0000c21c <DigitalSideLights>:

void DigitalSideLights(){
    c21c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c21e:	46c6      	mov	lr, r8
    c220:	b500      	push	{lr}
    c222:	b090      	sub	sp, #64	; 0x40
    c224:	af02      	add	r7, sp, #8
	set_left_gnd();
    c226:	4bd1      	ldr	r3, [pc, #836]	; (c56c <DigitalSideLights+0x350>)
    c228:	4798      	blx	r3
	set_right_gnd();
    c22a:	4bd1      	ldr	r3, [pc, #836]	; (c570 <DigitalSideLights+0x354>)
    c22c:	4798      	blx	r3

	check_time(&digital_refresh_time);
    c22e:	4bd1      	ldr	r3, [pc, #836]	; (c574 <DigitalSideLights+0x358>)
    c230:	0018      	movs	r0, r3
    c232:	4bd1      	ldr	r3, [pc, #836]	; (c578 <DigitalSideLights+0x35c>)
    c234:	4798      	blx	r3
	if((millis()-digital_refresh_time) > (1000/digital_refresh_rate)){
    c236:	4bd1      	ldr	r3, [pc, #836]	; (c57c <DigitalSideLights+0x360>)
    c238:	4798      	blx	r3
    c23a:	0002      	movs	r2, r0
    c23c:	4bcd      	ldr	r3, [pc, #820]	; (c574 <DigitalSideLights+0x358>)
    c23e:	681b      	ldr	r3, [r3, #0]
    c240:	1ad4      	subs	r4, r2, r3
    c242:	4bcf      	ldr	r3, [pc, #828]	; (c580 <DigitalSideLights+0x364>)
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	001a      	movs	r2, r3
    c248:	4bce      	ldr	r3, [pc, #824]	; (c584 <DigitalSideLights+0x368>)
    c24a:	0011      	movs	r1, r2
    c24c:	22fa      	movs	r2, #250	; 0xfa
    c24e:	0090      	lsls	r0, r2, #2
    c250:	4798      	blx	r3
    c252:	0003      	movs	r3, r0
    c254:	429c      	cmp	r4, r3
    c256:	d801      	bhi.n	c25c <DigitalSideLights+0x40>
    c258:	f001 f88a 	bl	d370 <DigitalSideLights+0x1154>
		if(led_num <= MAX_LEDCOUNT && led_num > 0){
    c25c:	4bca      	ldr	r3, [pc, #808]	; (c588 <DigitalSideLights+0x36c>)
    c25e:	781b      	ldrb	r3, [r3, #0]
    c260:	2b48      	cmp	r3, #72	; 0x48
    c262:	d901      	bls.n	c268 <DigitalSideLights+0x4c>
    c264:	f001 f87f 	bl	d366 <DigitalSideLights+0x114a>
    c268:	4bc7      	ldr	r3, [pc, #796]	; (c588 <DigitalSideLights+0x36c>)
    c26a:	781b      	ldrb	r3, [r3, #0]
    c26c:	2b00      	cmp	r3, #0
    c26e:	d101      	bne.n	c274 <DigitalSideLights+0x58>
    c270:	f001 f879 	bl	d366 <DigitalSideLights+0x114a>
			// Set the color frames
			switch(light_mode){
    c274:	4bc5      	ldr	r3, [pc, #788]	; (c58c <DigitalSideLights+0x370>)
    c276:	781b      	ldrb	r3, [r3, #0]
    c278:	2b08      	cmp	r3, #8
    c27a:	d901      	bls.n	c280 <DigitalSideLights+0x64>
    c27c:	f001 f864 	bl	d348 <DigitalSideLights+0x112c>
    c280:	009a      	lsls	r2, r3, #2
    c282:	4bc3      	ldr	r3, [pc, #780]	; (c590 <DigitalSideLights+0x374>)
    c284:	18d3      	adds	r3, r2, r3
    c286:	681b      	ldr	r3, [r3, #0]
    c288:	469f      	mov	pc, r3
				case MODE_DIGITAL_STATIC:
					// Slider 1 controls gradient zoom
					// Slider 2 controls gradient position 
					// slider 3 controls brightness
					setDigitalHue(0, Digital_Static_Zoom, Digital_Static_Shift*(764/100)*Digital_Static_Zoom, (uint16_t)(Digital_Static_Brightness*(31.0/100.0)), false);
    c28a:	4bc2      	ldr	r3, [pc, #776]	; (c594 <DigitalSideLights+0x378>)
    c28c:	781d      	ldrb	r5, [r3, #0]
    c28e:	4bc2      	ldr	r3, [pc, #776]	; (c598 <DigitalSideLights+0x37c>)
    c290:	781b      	ldrb	r3, [r3, #0]
    c292:	b29b      	uxth	r3, r3
    c294:	4abf      	ldr	r2, [pc, #764]	; (c594 <DigitalSideLights+0x378>)
    c296:	7812      	ldrb	r2, [r2, #0]
    c298:	b292      	uxth	r2, r2
    c29a:	4353      	muls	r3, r2
    c29c:	b29b      	uxth	r3, r3
    c29e:	1c1a      	adds	r2, r3, #0
    c2a0:	00d2      	lsls	r2, r2, #3
    c2a2:	1ad3      	subs	r3, r2, r3
    c2a4:	b29e      	uxth	r6, r3
    c2a6:	4bbd      	ldr	r3, [pc, #756]	; (c59c <DigitalSideLights+0x380>)
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	001a      	movs	r2, r3
    c2ac:	4bbc      	ldr	r3, [pc, #752]	; (c5a0 <DigitalSideLights+0x384>)
    c2ae:	0010      	movs	r0, r2
    c2b0:	4798      	blx	r3
    c2b2:	4cbc      	ldr	r4, [pc, #752]	; (c5a4 <DigitalSideLights+0x388>)
    c2b4:	4abc      	ldr	r2, [pc, #752]	; (c5a8 <DigitalSideLights+0x38c>)
    c2b6:	4bbd      	ldr	r3, [pc, #756]	; (c5ac <DigitalSideLights+0x390>)
    c2b8:	47a0      	blx	r4
    c2ba:	0003      	movs	r3, r0
    c2bc:	000c      	movs	r4, r1
    c2be:	0019      	movs	r1, r3
    c2c0:	0022      	movs	r2, r4
    c2c2:	4bbb      	ldr	r3, [pc, #748]	; (c5b0 <DigitalSideLights+0x394>)
    c2c4:	0008      	movs	r0, r1
    c2c6:	0011      	movs	r1, r2
    c2c8:	4798      	blx	r3
    c2ca:	0003      	movs	r3, r0
    c2cc:	b29b      	uxth	r3, r3
    c2ce:	b2da      	uxtb	r2, r3
    c2d0:	2300      	movs	r3, #0
    c2d2:	9300      	str	r3, [sp, #0]
    c2d4:	0013      	movs	r3, r2
    c2d6:	0032      	movs	r2, r6
    c2d8:	0029      	movs	r1, r5
    c2da:	2000      	movs	r0, #0
    c2dc:	4cb5      	ldr	r4, [pc, #724]	; (c5b4 <DigitalSideLights+0x398>)
    c2de:	47a0      	blx	r4
					break;
    c2e0:	f001 f832 	bl	d348 <DigitalSideLights+0x112c>
				case MODE_DIGITAL_SKITTLES:
				{
					for(uint16_t i = 0; i < led_num; i++)
    c2e4:	2326      	movs	r3, #38	; 0x26
    c2e6:	2210      	movs	r2, #16
    c2e8:	4694      	mov	ip, r2
    c2ea:	44bc      	add	ip, r7
    c2ec:	4463      	add	r3, ip
    c2ee:	2200      	movs	r2, #0
    c2f0:	801a      	strh	r2, [r3, #0]
    c2f2:	e270      	b.n	c7d6 <DigitalSideLights+0x5ba>
					{
						uint8_t weighted_index = (rand() / (RAND_MAX/6));
    c2f4:	4bb0      	ldr	r3, [pc, #704]	; (c5b8 <DigitalSideLights+0x39c>)
    c2f6:	4798      	blx	r3
    c2f8:	0002      	movs	r2, r0
    c2fa:	4ba2      	ldr	r3, [pc, #648]	; (c584 <DigitalSideLights+0x368>)
    c2fc:	49af      	ldr	r1, [pc, #700]	; (c5bc <DigitalSideLights+0x3a0>)
    c2fe:	0010      	movs	r0, r2
    c300:	4798      	blx	r3
    c302:	0003      	movs	r3, r0
    c304:	001a      	movs	r2, r3
    c306:	2317      	movs	r3, #23
    c308:	18fb      	adds	r3, r7, r3
    c30a:	701a      	strb	r2, [r3, #0]
						L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | (uint16_t)(Digital_Skittles_Brightness*(31.0/100.0)));
    c30c:	2326      	movs	r3, #38	; 0x26
    c30e:	2210      	movs	r2, #16
    c310:	4694      	mov	ip, r2
    c312:	44bc      	add	ip, r7
    c314:	4463      	add	r3, ip
    c316:	881b      	ldrh	r3, [r3, #0]
    c318:	3301      	adds	r3, #1
    c31a:	009d      	lsls	r5, r3, #2
    c31c:	2326      	movs	r3, #38	; 0x26
    c31e:	2210      	movs	r2, #16
    c320:	4694      	mov	ip, r2
    c322:	44bc      	add	ip, r7
    c324:	4463      	add	r3, ip
    c326:	881b      	ldrh	r3, [r3, #0]
    c328:	3301      	adds	r3, #1
    c32a:	009c      	lsls	r4, r3, #2
    c32c:	4ba4      	ldr	r3, [pc, #656]	; (c5c0 <DigitalSideLights+0x3a4>)
    c32e:	781b      	ldrb	r3, [r3, #0]
    c330:	001a      	movs	r2, r3
    c332:	4b9b      	ldr	r3, [pc, #620]	; (c5a0 <DigitalSideLights+0x384>)
    c334:	0010      	movs	r0, r2
    c336:	4798      	blx	r3
    c338:	4e9a      	ldr	r6, [pc, #616]	; (c5a4 <DigitalSideLights+0x388>)
    c33a:	4a9b      	ldr	r2, [pc, #620]	; (c5a8 <DigitalSideLights+0x38c>)
    c33c:	4b9b      	ldr	r3, [pc, #620]	; (c5ac <DigitalSideLights+0x390>)
    c33e:	47b0      	blx	r6
    c340:	0002      	movs	r2, r0
    c342:	000b      	movs	r3, r1
    c344:	0011      	movs	r1, r2
    c346:	001a      	movs	r2, r3
    c348:	4b99      	ldr	r3, [pc, #612]	; (c5b0 <DigitalSideLights+0x394>)
    c34a:	0008      	movs	r0, r1
    c34c:	0011      	movs	r1, r2
    c34e:	4798      	blx	r3
    c350:	0003      	movs	r3, r0
    c352:	b29b      	uxth	r3, r3
    c354:	b2db      	uxtb	r3, r3
    c356:	2220      	movs	r2, #32
    c358:	4252      	negs	r2, r2
    c35a:	4313      	orrs	r3, r2
    c35c:	b2da      	uxtb	r2, r3
    c35e:	4b99      	ldr	r3, [pc, #612]	; (c5c4 <DigitalSideLights+0x3a8>)
    c360:	551a      	strb	r2, [r3, r4]
    c362:	4b98      	ldr	r3, [pc, #608]	; (c5c4 <DigitalSideLights+0x3a8>)
    c364:	5d1a      	ldrb	r2, [r3, r4]
    c366:	4b98      	ldr	r3, [pc, #608]	; (c5c8 <DigitalSideLights+0x3ac>)
    c368:	555a      	strb	r2, [r3, r5]
						switch(weighted_index){
    c36a:	2317      	movs	r3, #23
    c36c:	18fb      	adds	r3, r7, r3
    c36e:	781b      	ldrb	r3, [r3, #0]
    c370:	2b05      	cmp	r3, #5
    c372:	d900      	bls.n	c376 <DigitalSideLights+0x15a>
    c374:	e222      	b.n	c7bc <DigitalSideLights+0x5a0>
    c376:	009a      	lsls	r2, r3, #2
    c378:	4b94      	ldr	r3, [pc, #592]	; (c5cc <DigitalSideLights+0x3b0>)
    c37a:	18d3      	adds	r3, r2, r3
    c37c:	681b      	ldr	r3, [r3, #0]
    c37e:	469f      	mov	pc, r3
							case 0:
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 31);
    c380:	2326      	movs	r3, #38	; 0x26
    c382:	2210      	movs	r2, #16
    c384:	4694      	mov	ip, r2
    c386:	44bc      	add	ip, r7
    c388:	4463      	add	r3, ip
    c38a:	881b      	ldrh	r3, [r3, #0]
    c38c:	009b      	lsls	r3, r3, #2
    c38e:	1d5d      	adds	r5, r3, #5
    c390:	2326      	movs	r3, #38	; 0x26
    c392:	2210      	movs	r2, #16
    c394:	4694      	mov	ip, r2
    c396:	44bc      	add	ip, r7
    c398:	4463      	add	r3, ip
    c39a:	881b      	ldrh	r3, [r3, #0]
    c39c:	009b      	lsls	r3, r3, #2
    c39e:	1d5c      	adds	r4, r3, #5
    c3a0:	4b85      	ldr	r3, [pc, #532]	; (c5b8 <DigitalSideLights+0x39c>)
    c3a2:	4798      	blx	r3
    c3a4:	0003      	movs	r3, r0
    c3a6:	17db      	asrs	r3, r3, #31
    c3a8:	b2da      	uxtb	r2, r3
    c3aa:	4b86      	ldr	r3, [pc, #536]	; (c5c4 <DigitalSideLights+0x3a8>)
    c3ac:	551a      	strb	r2, [r3, r4]
    c3ae:	4b85      	ldr	r3, [pc, #532]	; (c5c4 <DigitalSideLights+0x3a8>)
    c3b0:	5d1a      	ldrb	r2, [r3, r4]
    c3b2:	4b85      	ldr	r3, [pc, #532]	; (c5c8 <DigitalSideLights+0x3ac>)
    c3b4:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 23);
    c3b6:	2326      	movs	r3, #38	; 0x26
    c3b8:	2210      	movs	r2, #16
    c3ba:	4694      	mov	ip, r2
    c3bc:	44bc      	add	ip, r7
    c3be:	4463      	add	r3, ip
    c3c0:	881b      	ldrh	r3, [r3, #0]
    c3c2:	009b      	lsls	r3, r3, #2
    c3c4:	1d9d      	adds	r5, r3, #6
    c3c6:	2326      	movs	r3, #38	; 0x26
    c3c8:	2210      	movs	r2, #16
    c3ca:	4694      	mov	ip, r2
    c3cc:	44bc      	add	ip, r7
    c3ce:	4463      	add	r3, ip
    c3d0:	881b      	ldrh	r3, [r3, #0]
    c3d2:	009b      	lsls	r3, r3, #2
    c3d4:	1d9c      	adds	r4, r3, #6
    c3d6:	4b78      	ldr	r3, [pc, #480]	; (c5b8 <DigitalSideLights+0x39c>)
    c3d8:	4798      	blx	r3
    c3da:	0003      	movs	r3, r0
    c3dc:	15db      	asrs	r3, r3, #23
    c3de:	b2da      	uxtb	r2, r3
    c3e0:	4b78      	ldr	r3, [pc, #480]	; (c5c4 <DigitalSideLights+0x3a8>)
    c3e2:	551a      	strb	r2, [r3, r4]
    c3e4:	4b77      	ldr	r3, [pc, #476]	; (c5c4 <DigitalSideLights+0x3a8>)
    c3e6:	5d1a      	ldrb	r2, [r3, r4]
    c3e8:	4b77      	ldr	r3, [pc, #476]	; (c5c8 <DigitalSideLights+0x3ac>)
    c3ea:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 23);
    c3ec:	2326      	movs	r3, #38	; 0x26
    c3ee:	2210      	movs	r2, #16
    c3f0:	4694      	mov	ip, r2
    c3f2:	44bc      	add	ip, r7
    c3f4:	4463      	add	r3, ip
    c3f6:	881b      	ldrh	r3, [r3, #0]
    c3f8:	009b      	lsls	r3, r3, #2
    c3fa:	1ddd      	adds	r5, r3, #7
    c3fc:	2326      	movs	r3, #38	; 0x26
    c3fe:	2210      	movs	r2, #16
    c400:	4694      	mov	ip, r2
    c402:	44bc      	add	ip, r7
    c404:	4463      	add	r3, ip
    c406:	881b      	ldrh	r3, [r3, #0]
    c408:	009b      	lsls	r3, r3, #2
    c40a:	1ddc      	adds	r4, r3, #7
    c40c:	4b6a      	ldr	r3, [pc, #424]	; (c5b8 <DigitalSideLights+0x39c>)
    c40e:	4798      	blx	r3
    c410:	0003      	movs	r3, r0
    c412:	15db      	asrs	r3, r3, #23
    c414:	b2da      	uxtb	r2, r3
    c416:	4b6b      	ldr	r3, [pc, #428]	; (c5c4 <DigitalSideLights+0x3a8>)
    c418:	551a      	strb	r2, [r3, r4]
    c41a:	4b6a      	ldr	r3, [pc, #424]	; (c5c4 <DigitalSideLights+0x3a8>)
    c41c:	5d1a      	ldrb	r2, [r3, r4]
    c41e:	4b6a      	ldr	r3, [pc, #424]	; (c5c8 <DigitalSideLights+0x3ac>)
    c420:	555a      	strb	r2, [r3, r5]
								break;
    c422:	e1cb      	b.n	c7bc <DigitalSideLights+0x5a0>
							case 1:
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 23);
    c424:	2326      	movs	r3, #38	; 0x26
    c426:	2210      	movs	r2, #16
    c428:	4694      	mov	ip, r2
    c42a:	44bc      	add	ip, r7
    c42c:	4463      	add	r3, ip
    c42e:	881b      	ldrh	r3, [r3, #0]
    c430:	009b      	lsls	r3, r3, #2
    c432:	1d5d      	adds	r5, r3, #5
    c434:	2326      	movs	r3, #38	; 0x26
    c436:	2210      	movs	r2, #16
    c438:	4694      	mov	ip, r2
    c43a:	44bc      	add	ip, r7
    c43c:	4463      	add	r3, ip
    c43e:	881b      	ldrh	r3, [r3, #0]
    c440:	009b      	lsls	r3, r3, #2
    c442:	1d5c      	adds	r4, r3, #5
    c444:	4b5c      	ldr	r3, [pc, #368]	; (c5b8 <DigitalSideLights+0x39c>)
    c446:	4798      	blx	r3
    c448:	0003      	movs	r3, r0
    c44a:	15db      	asrs	r3, r3, #23
    c44c:	b2da      	uxtb	r2, r3
    c44e:	4b5d      	ldr	r3, [pc, #372]	; (c5c4 <DigitalSideLights+0x3a8>)
    c450:	551a      	strb	r2, [r3, r4]
    c452:	4b5c      	ldr	r3, [pc, #368]	; (c5c4 <DigitalSideLights+0x3a8>)
    c454:	5d1a      	ldrb	r2, [r3, r4]
    c456:	4b5c      	ldr	r3, [pc, #368]	; (c5c8 <DigitalSideLights+0x3ac>)
    c458:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 31);
    c45a:	2326      	movs	r3, #38	; 0x26
    c45c:	2210      	movs	r2, #16
    c45e:	4694      	mov	ip, r2
    c460:	44bc      	add	ip, r7
    c462:	4463      	add	r3, ip
    c464:	881b      	ldrh	r3, [r3, #0]
    c466:	009b      	lsls	r3, r3, #2
    c468:	1d9d      	adds	r5, r3, #6
    c46a:	2326      	movs	r3, #38	; 0x26
    c46c:	2210      	movs	r2, #16
    c46e:	4694      	mov	ip, r2
    c470:	44bc      	add	ip, r7
    c472:	4463      	add	r3, ip
    c474:	881b      	ldrh	r3, [r3, #0]
    c476:	009b      	lsls	r3, r3, #2
    c478:	1d9c      	adds	r4, r3, #6
    c47a:	4b4f      	ldr	r3, [pc, #316]	; (c5b8 <DigitalSideLights+0x39c>)
    c47c:	4798      	blx	r3
    c47e:	0003      	movs	r3, r0
    c480:	17db      	asrs	r3, r3, #31
    c482:	b2da      	uxtb	r2, r3
    c484:	4b4f      	ldr	r3, [pc, #316]	; (c5c4 <DigitalSideLights+0x3a8>)
    c486:	551a      	strb	r2, [r3, r4]
    c488:	4b4e      	ldr	r3, [pc, #312]	; (c5c4 <DigitalSideLights+0x3a8>)
    c48a:	5d1a      	ldrb	r2, [r3, r4]
    c48c:	4b4e      	ldr	r3, [pc, #312]	; (c5c8 <DigitalSideLights+0x3ac>)
    c48e:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 23);
    c490:	2326      	movs	r3, #38	; 0x26
    c492:	2210      	movs	r2, #16
    c494:	4694      	mov	ip, r2
    c496:	44bc      	add	ip, r7
    c498:	4463      	add	r3, ip
    c49a:	881b      	ldrh	r3, [r3, #0]
    c49c:	009b      	lsls	r3, r3, #2
    c49e:	1ddd      	adds	r5, r3, #7
    c4a0:	2326      	movs	r3, #38	; 0x26
    c4a2:	2210      	movs	r2, #16
    c4a4:	4694      	mov	ip, r2
    c4a6:	44bc      	add	ip, r7
    c4a8:	4463      	add	r3, ip
    c4aa:	881b      	ldrh	r3, [r3, #0]
    c4ac:	009b      	lsls	r3, r3, #2
    c4ae:	1ddc      	adds	r4, r3, #7
    c4b0:	4b41      	ldr	r3, [pc, #260]	; (c5b8 <DigitalSideLights+0x39c>)
    c4b2:	4798      	blx	r3
    c4b4:	0003      	movs	r3, r0
    c4b6:	15db      	asrs	r3, r3, #23
    c4b8:	b2da      	uxtb	r2, r3
    c4ba:	4b42      	ldr	r3, [pc, #264]	; (c5c4 <DigitalSideLights+0x3a8>)
    c4bc:	551a      	strb	r2, [r3, r4]
    c4be:	4b41      	ldr	r3, [pc, #260]	; (c5c4 <DigitalSideLights+0x3a8>)
    c4c0:	5d1a      	ldrb	r2, [r3, r4]
    c4c2:	4b41      	ldr	r3, [pc, #260]	; (c5c8 <DigitalSideLights+0x3ac>)
    c4c4:	555a      	strb	r2, [r3, r5]
								break;
    c4c6:	e179      	b.n	c7bc <DigitalSideLights+0x5a0>
							case 2:
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 23);
    c4c8:	2326      	movs	r3, #38	; 0x26
    c4ca:	2210      	movs	r2, #16
    c4cc:	4694      	mov	ip, r2
    c4ce:	44bc      	add	ip, r7
    c4d0:	4463      	add	r3, ip
    c4d2:	881b      	ldrh	r3, [r3, #0]
    c4d4:	009b      	lsls	r3, r3, #2
    c4d6:	1d5d      	adds	r5, r3, #5
    c4d8:	2326      	movs	r3, #38	; 0x26
    c4da:	2210      	movs	r2, #16
    c4dc:	4694      	mov	ip, r2
    c4de:	44bc      	add	ip, r7
    c4e0:	4463      	add	r3, ip
    c4e2:	881b      	ldrh	r3, [r3, #0]
    c4e4:	009b      	lsls	r3, r3, #2
    c4e6:	1d5c      	adds	r4, r3, #5
    c4e8:	4b33      	ldr	r3, [pc, #204]	; (c5b8 <DigitalSideLights+0x39c>)
    c4ea:	4798      	blx	r3
    c4ec:	0003      	movs	r3, r0
    c4ee:	15db      	asrs	r3, r3, #23
    c4f0:	b2da      	uxtb	r2, r3
    c4f2:	4b34      	ldr	r3, [pc, #208]	; (c5c4 <DigitalSideLights+0x3a8>)
    c4f4:	551a      	strb	r2, [r3, r4]
    c4f6:	4b33      	ldr	r3, [pc, #204]	; (c5c4 <DigitalSideLights+0x3a8>)
    c4f8:	5d1a      	ldrb	r2, [r3, r4]
    c4fa:	4b33      	ldr	r3, [pc, #204]	; (c5c8 <DigitalSideLights+0x3ac>)
    c4fc:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 23);
    c4fe:	2326      	movs	r3, #38	; 0x26
    c500:	2210      	movs	r2, #16
    c502:	4694      	mov	ip, r2
    c504:	44bc      	add	ip, r7
    c506:	4463      	add	r3, ip
    c508:	881b      	ldrh	r3, [r3, #0]
    c50a:	009b      	lsls	r3, r3, #2
    c50c:	1d9d      	adds	r5, r3, #6
    c50e:	2326      	movs	r3, #38	; 0x26
    c510:	2210      	movs	r2, #16
    c512:	4694      	mov	ip, r2
    c514:	44bc      	add	ip, r7
    c516:	4463      	add	r3, ip
    c518:	881b      	ldrh	r3, [r3, #0]
    c51a:	009b      	lsls	r3, r3, #2
    c51c:	1d9c      	adds	r4, r3, #6
    c51e:	4b26      	ldr	r3, [pc, #152]	; (c5b8 <DigitalSideLights+0x39c>)
    c520:	4798      	blx	r3
    c522:	0003      	movs	r3, r0
    c524:	15db      	asrs	r3, r3, #23
    c526:	b2da      	uxtb	r2, r3
    c528:	4b26      	ldr	r3, [pc, #152]	; (c5c4 <DigitalSideLights+0x3a8>)
    c52a:	551a      	strb	r2, [r3, r4]
    c52c:	4b25      	ldr	r3, [pc, #148]	; (c5c4 <DigitalSideLights+0x3a8>)
    c52e:	5d1a      	ldrb	r2, [r3, r4]
    c530:	4b25      	ldr	r3, [pc, #148]	; (c5c8 <DigitalSideLights+0x3ac>)
    c532:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 31);
    c534:	2326      	movs	r3, #38	; 0x26
    c536:	2210      	movs	r2, #16
    c538:	4694      	mov	ip, r2
    c53a:	44bc      	add	ip, r7
    c53c:	4463      	add	r3, ip
    c53e:	881b      	ldrh	r3, [r3, #0]
    c540:	009b      	lsls	r3, r3, #2
    c542:	1ddd      	adds	r5, r3, #7
    c544:	2326      	movs	r3, #38	; 0x26
    c546:	2210      	movs	r2, #16
    c548:	4694      	mov	ip, r2
    c54a:	44bc      	add	ip, r7
    c54c:	4463      	add	r3, ip
    c54e:	881b      	ldrh	r3, [r3, #0]
    c550:	009b      	lsls	r3, r3, #2
    c552:	1ddc      	adds	r4, r3, #7
    c554:	4b18      	ldr	r3, [pc, #96]	; (c5b8 <DigitalSideLights+0x39c>)
    c556:	4798      	blx	r3
    c558:	0003      	movs	r3, r0
    c55a:	17db      	asrs	r3, r3, #31
    c55c:	b2da      	uxtb	r2, r3
    c55e:	4b19      	ldr	r3, [pc, #100]	; (c5c4 <DigitalSideLights+0x3a8>)
    c560:	551a      	strb	r2, [r3, r4]
    c562:	4b18      	ldr	r3, [pc, #96]	; (c5c4 <DigitalSideLights+0x3a8>)
    c564:	5d1a      	ldrb	r2, [r3, r4]
    c566:	4b18      	ldr	r3, [pc, #96]	; (c5c8 <DigitalSideLights+0x3ac>)
    c568:	555a      	strb	r2, [r3, r5]
								break;
    c56a:	e127      	b.n	c7bc <DigitalSideLights+0x5a0>
    c56c:	0000a145 	.word	0x0000a145
    c570:	0000a15d 	.word	0x0000a15d
    c574:	20000384 	.word	0x20000384
    c578:	00009f95 	.word	0x00009f95
    c57c:	00009f65 	.word	0x00009f65
    c580:	200000d9 	.word	0x200000d9
    c584:	00018521 	.word	0x00018521
    c588:	200000d8 	.word	0x200000d8
    c58c:	20000034 	.word	0x20000034
    c590:	0001b914 	.word	0x0001b914
    c594:	200000ad 	.word	0x200000ad
    c598:	200000ae 	.word	0x200000ae
    c59c:	200000af 	.word	0x200000af
    c5a0:	0001b0ad 	.word	0x0001b0ad
    c5a4:	0001a519 	.word	0x0001a519
    c5a8:	3d70a3d7 	.word	0x3d70a3d7
    c5ac:	3fd3d70a 	.word	0x3fd3d70a
    c5b0:	0001886d 	.word	0x0001886d
    c5b4:	0000df4d 	.word	0x0000df4d
    c5b8:	0001b40d 	.word	0x0001b40d
    c5bc:	15555555 	.word	0x15555555
    c5c0:	200000b0 	.word	0x200000b0
    c5c4:	20000578 	.word	0x20000578
    c5c8:	20001420 	.word	0x20001420
    c5cc:	0001b938 	.word	0x0001b938
							case 3:
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 23);
    c5d0:	2326      	movs	r3, #38	; 0x26
    c5d2:	2210      	movs	r2, #16
    c5d4:	4694      	mov	ip, r2
    c5d6:	44bc      	add	ip, r7
    c5d8:	4463      	add	r3, ip
    c5da:	881b      	ldrh	r3, [r3, #0]
    c5dc:	009b      	lsls	r3, r3, #2
    c5de:	1d5d      	adds	r5, r3, #5
    c5e0:	2326      	movs	r3, #38	; 0x26
    c5e2:	2210      	movs	r2, #16
    c5e4:	4694      	mov	ip, r2
    c5e6:	44bc      	add	ip, r7
    c5e8:	4463      	add	r3, ip
    c5ea:	881b      	ldrh	r3, [r3, #0]
    c5ec:	009b      	lsls	r3, r3, #2
    c5ee:	1d5c      	adds	r4, r3, #5
    c5f0:	4bde      	ldr	r3, [pc, #888]	; (c96c <DigitalSideLights+0x750>)
    c5f2:	4798      	blx	r3
    c5f4:	0003      	movs	r3, r0
    c5f6:	15db      	asrs	r3, r3, #23
    c5f8:	b2da      	uxtb	r2, r3
    c5fa:	4bdd      	ldr	r3, [pc, #884]	; (c970 <DigitalSideLights+0x754>)
    c5fc:	551a      	strb	r2, [r3, r4]
    c5fe:	4bdc      	ldr	r3, [pc, #880]	; (c970 <DigitalSideLights+0x754>)
    c600:	5d1a      	ldrb	r2, [r3, r4]
    c602:	4bdc      	ldr	r3, [pc, #880]	; (c974 <DigitalSideLights+0x758>)
    c604:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 27);
    c606:	2326      	movs	r3, #38	; 0x26
    c608:	2210      	movs	r2, #16
    c60a:	4694      	mov	ip, r2
    c60c:	44bc      	add	ip, r7
    c60e:	4463      	add	r3, ip
    c610:	881b      	ldrh	r3, [r3, #0]
    c612:	009b      	lsls	r3, r3, #2
    c614:	1d9d      	adds	r5, r3, #6
    c616:	2326      	movs	r3, #38	; 0x26
    c618:	2210      	movs	r2, #16
    c61a:	4694      	mov	ip, r2
    c61c:	44bc      	add	ip, r7
    c61e:	4463      	add	r3, ip
    c620:	881b      	ldrh	r3, [r3, #0]
    c622:	009b      	lsls	r3, r3, #2
    c624:	1d9c      	adds	r4, r3, #6
    c626:	4bd1      	ldr	r3, [pc, #836]	; (c96c <DigitalSideLights+0x750>)
    c628:	4798      	blx	r3
    c62a:	0003      	movs	r3, r0
    c62c:	16db      	asrs	r3, r3, #27
    c62e:	b2da      	uxtb	r2, r3
    c630:	4bcf      	ldr	r3, [pc, #828]	; (c970 <DigitalSideLights+0x754>)
    c632:	551a      	strb	r2, [r3, r4]
    c634:	4bce      	ldr	r3, [pc, #824]	; (c970 <DigitalSideLights+0x754>)
    c636:	5d1a      	ldrb	r2, [r3, r4]
    c638:	4bce      	ldr	r3, [pc, #824]	; (c974 <DigitalSideLights+0x758>)
    c63a:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 27);
    c63c:	2326      	movs	r3, #38	; 0x26
    c63e:	2210      	movs	r2, #16
    c640:	4694      	mov	ip, r2
    c642:	44bc      	add	ip, r7
    c644:	4463      	add	r3, ip
    c646:	881b      	ldrh	r3, [r3, #0]
    c648:	009b      	lsls	r3, r3, #2
    c64a:	1ddd      	adds	r5, r3, #7
    c64c:	2326      	movs	r3, #38	; 0x26
    c64e:	2210      	movs	r2, #16
    c650:	4694      	mov	ip, r2
    c652:	44bc      	add	ip, r7
    c654:	4463      	add	r3, ip
    c656:	881b      	ldrh	r3, [r3, #0]
    c658:	009b      	lsls	r3, r3, #2
    c65a:	1ddc      	adds	r4, r3, #7
    c65c:	4bc3      	ldr	r3, [pc, #780]	; (c96c <DigitalSideLights+0x750>)
    c65e:	4798      	blx	r3
    c660:	0003      	movs	r3, r0
    c662:	16db      	asrs	r3, r3, #27
    c664:	b2da      	uxtb	r2, r3
    c666:	4bc2      	ldr	r3, [pc, #776]	; (c970 <DigitalSideLights+0x754>)
    c668:	551a      	strb	r2, [r3, r4]
    c66a:	4bc1      	ldr	r3, [pc, #772]	; (c970 <DigitalSideLights+0x754>)
    c66c:	5d1a      	ldrb	r2, [r3, r4]
    c66e:	4bc1      	ldr	r3, [pc, #772]	; (c974 <DigitalSideLights+0x758>)
    c670:	555a      	strb	r2, [r3, r5]
								break;
    c672:	e0a3      	b.n	c7bc <DigitalSideLights+0x5a0>
							case 4:
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 27);
    c674:	2326      	movs	r3, #38	; 0x26
    c676:	2210      	movs	r2, #16
    c678:	4694      	mov	ip, r2
    c67a:	44bc      	add	ip, r7
    c67c:	4463      	add	r3, ip
    c67e:	881b      	ldrh	r3, [r3, #0]
    c680:	009b      	lsls	r3, r3, #2
    c682:	1d5d      	adds	r5, r3, #5
    c684:	2326      	movs	r3, #38	; 0x26
    c686:	2210      	movs	r2, #16
    c688:	4694      	mov	ip, r2
    c68a:	44bc      	add	ip, r7
    c68c:	4463      	add	r3, ip
    c68e:	881b      	ldrh	r3, [r3, #0]
    c690:	009b      	lsls	r3, r3, #2
    c692:	1d5c      	adds	r4, r3, #5
    c694:	4bb5      	ldr	r3, [pc, #724]	; (c96c <DigitalSideLights+0x750>)
    c696:	4798      	blx	r3
    c698:	0003      	movs	r3, r0
    c69a:	16db      	asrs	r3, r3, #27
    c69c:	b2da      	uxtb	r2, r3
    c69e:	4bb4      	ldr	r3, [pc, #720]	; (c970 <DigitalSideLights+0x754>)
    c6a0:	551a      	strb	r2, [r3, r4]
    c6a2:	4bb3      	ldr	r3, [pc, #716]	; (c970 <DigitalSideLights+0x754>)
    c6a4:	5d1a      	ldrb	r2, [r3, r4]
    c6a6:	4bb3      	ldr	r3, [pc, #716]	; (c974 <DigitalSideLights+0x758>)
    c6a8:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 23);
    c6aa:	2326      	movs	r3, #38	; 0x26
    c6ac:	2210      	movs	r2, #16
    c6ae:	4694      	mov	ip, r2
    c6b0:	44bc      	add	ip, r7
    c6b2:	4463      	add	r3, ip
    c6b4:	881b      	ldrh	r3, [r3, #0]
    c6b6:	009b      	lsls	r3, r3, #2
    c6b8:	1d9d      	adds	r5, r3, #6
    c6ba:	2326      	movs	r3, #38	; 0x26
    c6bc:	2210      	movs	r2, #16
    c6be:	4694      	mov	ip, r2
    c6c0:	44bc      	add	ip, r7
    c6c2:	4463      	add	r3, ip
    c6c4:	881b      	ldrh	r3, [r3, #0]
    c6c6:	009b      	lsls	r3, r3, #2
    c6c8:	1d9c      	adds	r4, r3, #6
    c6ca:	4ba8      	ldr	r3, [pc, #672]	; (c96c <DigitalSideLights+0x750>)
    c6cc:	4798      	blx	r3
    c6ce:	0003      	movs	r3, r0
    c6d0:	15db      	asrs	r3, r3, #23
    c6d2:	b2da      	uxtb	r2, r3
    c6d4:	4ba6      	ldr	r3, [pc, #664]	; (c970 <DigitalSideLights+0x754>)
    c6d6:	551a      	strb	r2, [r3, r4]
    c6d8:	4ba5      	ldr	r3, [pc, #660]	; (c970 <DigitalSideLights+0x754>)
    c6da:	5d1a      	ldrb	r2, [r3, r4]
    c6dc:	4ba5      	ldr	r3, [pc, #660]	; (c974 <DigitalSideLights+0x758>)
    c6de:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 27);
    c6e0:	2326      	movs	r3, #38	; 0x26
    c6e2:	2210      	movs	r2, #16
    c6e4:	4694      	mov	ip, r2
    c6e6:	44bc      	add	ip, r7
    c6e8:	4463      	add	r3, ip
    c6ea:	881b      	ldrh	r3, [r3, #0]
    c6ec:	009b      	lsls	r3, r3, #2
    c6ee:	1ddd      	adds	r5, r3, #7
    c6f0:	2326      	movs	r3, #38	; 0x26
    c6f2:	2210      	movs	r2, #16
    c6f4:	4694      	mov	ip, r2
    c6f6:	44bc      	add	ip, r7
    c6f8:	4463      	add	r3, ip
    c6fa:	881b      	ldrh	r3, [r3, #0]
    c6fc:	009b      	lsls	r3, r3, #2
    c6fe:	1ddc      	adds	r4, r3, #7
    c700:	4b9a      	ldr	r3, [pc, #616]	; (c96c <DigitalSideLights+0x750>)
    c702:	4798      	blx	r3
    c704:	0003      	movs	r3, r0
    c706:	16db      	asrs	r3, r3, #27
    c708:	b2da      	uxtb	r2, r3
    c70a:	4b99      	ldr	r3, [pc, #612]	; (c970 <DigitalSideLights+0x754>)
    c70c:	551a      	strb	r2, [r3, r4]
    c70e:	4b98      	ldr	r3, [pc, #608]	; (c970 <DigitalSideLights+0x754>)
    c710:	5d1a      	ldrb	r2, [r3, r4]
    c712:	4b98      	ldr	r3, [pc, #608]	; (c974 <DigitalSideLights+0x758>)
    c714:	555a      	strb	r2, [r3, r5]
								break;
    c716:	e051      	b.n	c7bc <DigitalSideLights+0x5a0>
							case 5:
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (rand() >> 27);
    c718:	2326      	movs	r3, #38	; 0x26
    c71a:	2210      	movs	r2, #16
    c71c:	4694      	mov	ip, r2
    c71e:	44bc      	add	ip, r7
    c720:	4463      	add	r3, ip
    c722:	881b      	ldrh	r3, [r3, #0]
    c724:	009b      	lsls	r3, r3, #2
    c726:	1d5d      	adds	r5, r3, #5
    c728:	2326      	movs	r3, #38	; 0x26
    c72a:	2210      	movs	r2, #16
    c72c:	4694      	mov	ip, r2
    c72e:	44bc      	add	ip, r7
    c730:	4463      	add	r3, ip
    c732:	881b      	ldrh	r3, [r3, #0]
    c734:	009b      	lsls	r3, r3, #2
    c736:	1d5c      	adds	r4, r3, #5
    c738:	4b8c      	ldr	r3, [pc, #560]	; (c96c <DigitalSideLights+0x750>)
    c73a:	4798      	blx	r3
    c73c:	0003      	movs	r3, r0
    c73e:	16db      	asrs	r3, r3, #27
    c740:	b2da      	uxtb	r2, r3
    c742:	4b8b      	ldr	r3, [pc, #556]	; (c970 <DigitalSideLights+0x754>)
    c744:	551a      	strb	r2, [r3, r4]
    c746:	4b8a      	ldr	r3, [pc, #552]	; (c970 <DigitalSideLights+0x754>)
    c748:	5d1a      	ldrb	r2, [r3, r4]
    c74a:	4b8a      	ldr	r3, [pc, #552]	; (c974 <DigitalSideLights+0x758>)
    c74c:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (rand() >> 27);
    c74e:	2326      	movs	r3, #38	; 0x26
    c750:	2210      	movs	r2, #16
    c752:	4694      	mov	ip, r2
    c754:	44bc      	add	ip, r7
    c756:	4463      	add	r3, ip
    c758:	881b      	ldrh	r3, [r3, #0]
    c75a:	009b      	lsls	r3, r3, #2
    c75c:	1d9d      	adds	r5, r3, #6
    c75e:	2326      	movs	r3, #38	; 0x26
    c760:	2210      	movs	r2, #16
    c762:	4694      	mov	ip, r2
    c764:	44bc      	add	ip, r7
    c766:	4463      	add	r3, ip
    c768:	881b      	ldrh	r3, [r3, #0]
    c76a:	009b      	lsls	r3, r3, #2
    c76c:	1d9c      	adds	r4, r3, #6
    c76e:	4b7f      	ldr	r3, [pc, #508]	; (c96c <DigitalSideLights+0x750>)
    c770:	4798      	blx	r3
    c772:	0003      	movs	r3, r0
    c774:	16db      	asrs	r3, r3, #27
    c776:	b2da      	uxtb	r2, r3
    c778:	4b7d      	ldr	r3, [pc, #500]	; (c970 <DigitalSideLights+0x754>)
    c77a:	551a      	strb	r2, [r3, r4]
    c77c:	4b7c      	ldr	r3, [pc, #496]	; (c970 <DigitalSideLights+0x754>)
    c77e:	5d1a      	ldrb	r2, [r3, r4]
    c780:	4b7c      	ldr	r3, [pc, #496]	; (c974 <DigitalSideLights+0x758>)
    c782:	555a      	strb	r2, [r3, r5]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (rand() >> 23);
    c784:	2326      	movs	r3, #38	; 0x26
    c786:	2210      	movs	r2, #16
    c788:	4694      	mov	ip, r2
    c78a:	44bc      	add	ip, r7
    c78c:	4463      	add	r3, ip
    c78e:	881b      	ldrh	r3, [r3, #0]
    c790:	009b      	lsls	r3, r3, #2
    c792:	1ddd      	adds	r5, r3, #7
    c794:	2326      	movs	r3, #38	; 0x26
    c796:	2210      	movs	r2, #16
    c798:	4694      	mov	ip, r2
    c79a:	44bc      	add	ip, r7
    c79c:	4463      	add	r3, ip
    c79e:	881b      	ldrh	r3, [r3, #0]
    c7a0:	009b      	lsls	r3, r3, #2
    c7a2:	1ddc      	adds	r4, r3, #7
    c7a4:	4b71      	ldr	r3, [pc, #452]	; (c96c <DigitalSideLights+0x750>)
    c7a6:	4798      	blx	r3
    c7a8:	0003      	movs	r3, r0
    c7aa:	15db      	asrs	r3, r3, #23
    c7ac:	b2da      	uxtb	r2, r3
    c7ae:	4b70      	ldr	r3, [pc, #448]	; (c970 <DigitalSideLights+0x754>)
    c7b0:	551a      	strb	r2, [r3, r4]
    c7b2:	4b6f      	ldr	r3, [pc, #444]	; (c970 <DigitalSideLights+0x754>)
    c7b4:	5d1a      	ldrb	r2, [r3, r4]
    c7b6:	4b6f      	ldr	r3, [pc, #444]	; (c974 <DigitalSideLights+0x758>)
    c7b8:	555a      	strb	r2, [r3, r5]
								break;
    c7ba:	46c0      	nop			; (mov r8, r8)
					for(uint16_t i = 0; i < led_num; i++)
    c7bc:	2326      	movs	r3, #38	; 0x26
    c7be:	2210      	movs	r2, #16
    c7c0:	4694      	mov	ip, r2
    c7c2:	44bc      	add	ip, r7
    c7c4:	4463      	add	r3, ip
    c7c6:	881a      	ldrh	r2, [r3, #0]
    c7c8:	2326      	movs	r3, #38	; 0x26
    c7ca:	2110      	movs	r1, #16
    c7cc:	468c      	mov	ip, r1
    c7ce:	44bc      	add	ip, r7
    c7d0:	4463      	add	r3, ip
    c7d2:	3201      	adds	r2, #1
    c7d4:	801a      	strh	r2, [r3, #0]
    c7d6:	4b68      	ldr	r3, [pc, #416]	; (c978 <DigitalSideLights+0x75c>)
    c7d8:	781b      	ldrb	r3, [r3, #0]
    c7da:	b29b      	uxth	r3, r3
    c7dc:	2226      	movs	r2, #38	; 0x26
    c7de:	2110      	movs	r1, #16
    c7e0:	468c      	mov	ip, r1
    c7e2:	44bc      	add	ip, r7
    c7e4:	4462      	add	r2, ip
    c7e6:	8812      	ldrh	r2, [r2, #0]
    c7e8:	429a      	cmp	r2, r3
    c7ea:	d200      	bcs.n	c7ee <DigitalSideLights+0x5d2>
    c7ec:	e582      	b.n	c2f4 <DigitalSideLights+0xd8>
						}
					}
					break;
    c7ee:	f000 fdab 	bl	d348 <DigitalSideLights+0x112c>
				}
				case MODE_DIGITAL_GRADIENT_CYCLE:
				{
					uint16_t x = (uint16_t)(millis()/((101.0-Digital_Cycle_Rate)/20.0))%(764*Digital_Cycle_Zoom);
    c7f2:	4b62      	ldr	r3, [pc, #392]	; (c97c <DigitalSideLights+0x760>)
    c7f4:	4798      	blx	r3
    c7f6:	0002      	movs	r2, r0
    c7f8:	4b61      	ldr	r3, [pc, #388]	; (c980 <DigitalSideLights+0x764>)
    c7fa:	0010      	movs	r0, r2
    c7fc:	4798      	blx	r3
    c7fe:	0005      	movs	r5, r0
    c800:	000e      	movs	r6, r1
    c802:	4b60      	ldr	r3, [pc, #384]	; (c984 <DigitalSideLights+0x768>)
    c804:	781b      	ldrb	r3, [r3, #0]
    c806:	001a      	movs	r2, r3
    c808:	4b5f      	ldr	r3, [pc, #380]	; (c988 <DigitalSideLights+0x76c>)
    c80a:	0010      	movs	r0, r2
    c80c:	4798      	blx	r3
    c80e:	0002      	movs	r2, r0
    c810:	000b      	movs	r3, r1
    c812:	4c5e      	ldr	r4, [pc, #376]	; (c98c <DigitalSideLights+0x770>)
    c814:	2000      	movs	r0, #0
    c816:	495e      	ldr	r1, [pc, #376]	; (c990 <DigitalSideLights+0x774>)
    c818:	47a0      	blx	r4
    c81a:	0003      	movs	r3, r0
    c81c:	000c      	movs	r4, r1
    c81e:	0018      	movs	r0, r3
    c820:	0021      	movs	r1, r4
    c822:	4c5c      	ldr	r4, [pc, #368]	; (c994 <DigitalSideLights+0x778>)
    c824:	2200      	movs	r2, #0
    c826:	4b5c      	ldr	r3, [pc, #368]	; (c998 <DigitalSideLights+0x77c>)
    c828:	47a0      	blx	r4
    c82a:	0003      	movs	r3, r0
    c82c:	000c      	movs	r4, r1
    c82e:	001a      	movs	r2, r3
    c830:	0023      	movs	r3, r4
    c832:	4c58      	ldr	r4, [pc, #352]	; (c994 <DigitalSideLights+0x778>)
    c834:	0028      	movs	r0, r5
    c836:	0031      	movs	r1, r6
    c838:	47a0      	blx	r4
    c83a:	0003      	movs	r3, r0
    c83c:	000c      	movs	r4, r1
    c83e:	0019      	movs	r1, r3
    c840:	0022      	movs	r2, r4
    c842:	4b56      	ldr	r3, [pc, #344]	; (c99c <DigitalSideLights+0x780>)
    c844:	0008      	movs	r0, r1
    c846:	0011      	movs	r1, r2
    c848:	4798      	blx	r3
    c84a:	0003      	movs	r3, r0
    c84c:	b29b      	uxth	r3, r3
    c84e:	0018      	movs	r0, r3
    c850:	4b53      	ldr	r3, [pc, #332]	; (c9a0 <DigitalSideLights+0x784>)
    c852:	781b      	ldrb	r3, [r3, #0]
    c854:	001a      	movs	r2, r3
    c856:	23bf      	movs	r3, #191	; 0xbf
    c858:	009b      	lsls	r3, r3, #2
    c85a:	435a      	muls	r2, r3
    c85c:	4b51      	ldr	r3, [pc, #324]	; (c9a4 <DigitalSideLights+0x788>)
    c85e:	0011      	movs	r1, r2
    c860:	4798      	blx	r3
    c862:	000b      	movs	r3, r1
    c864:	001a      	movs	r2, r3
    c866:	2314      	movs	r3, #20
    c868:	18fb      	adds	r3, r7, r3
    c86a:	801a      	strh	r2, [r3, #0]
					setDigitalHue(x, Digital_Cycle_Zoom, 0, (uint16_t)(Digital_Cycle_Brightness*(31.0/100.0)), false);
    c86c:	4b4c      	ldr	r3, [pc, #304]	; (c9a0 <DigitalSideLights+0x784>)
    c86e:	781d      	ldrb	r5, [r3, #0]
    c870:	4b4d      	ldr	r3, [pc, #308]	; (c9a8 <DigitalSideLights+0x78c>)
    c872:	781b      	ldrb	r3, [r3, #0]
    c874:	001a      	movs	r2, r3
    c876:	4b44      	ldr	r3, [pc, #272]	; (c988 <DigitalSideLights+0x76c>)
    c878:	0010      	movs	r0, r2
    c87a:	4798      	blx	r3
    c87c:	4c4b      	ldr	r4, [pc, #300]	; (c9ac <DigitalSideLights+0x790>)
    c87e:	4a4c      	ldr	r2, [pc, #304]	; (c9b0 <DigitalSideLights+0x794>)
    c880:	4b4c      	ldr	r3, [pc, #304]	; (c9b4 <DigitalSideLights+0x798>)
    c882:	47a0      	blx	r4
    c884:	0003      	movs	r3, r0
    c886:	000c      	movs	r4, r1
    c888:	0019      	movs	r1, r3
    c88a:	0022      	movs	r2, r4
    c88c:	4b43      	ldr	r3, [pc, #268]	; (c99c <DigitalSideLights+0x780>)
    c88e:	0008      	movs	r0, r1
    c890:	0011      	movs	r1, r2
    c892:	4798      	blx	r3
    c894:	0003      	movs	r3, r0
    c896:	b29b      	uxth	r3, r3
    c898:	b2da      	uxtb	r2, r3
    c89a:	2314      	movs	r3, #20
    c89c:	18fb      	adds	r3, r7, r3
    c89e:	8818      	ldrh	r0, [r3, #0]
    c8a0:	2300      	movs	r3, #0
    c8a2:	9300      	str	r3, [sp, #0]
    c8a4:	0013      	movs	r3, r2
    c8a6:	2200      	movs	r2, #0
    c8a8:	0029      	movs	r1, r5
    c8aa:	4c43      	ldr	r4, [pc, #268]	; (c9b8 <DigitalSideLights+0x79c>)
    c8ac:	47a0      	blx	r4
					break;
    c8ae:	f000 fd4b 	bl	d348 <DigitalSideLights+0x112c>
				}
				case MODE_DIGITAL_COMPASS_CYCLE:
				{
					uint8_t temp_zoom = 2;
    c8b2:	2313      	movs	r3, #19
    c8b4:	18fb      	adds	r3, r7, r3
    c8b6:	2202      	movs	r2, #2
    c8b8:	701a      	strb	r2, [r3, #0]
					setDigitalHue((2*temp_zoom)*(heading/360.0)*(764*temp_zoom), temp_zoom, 0, (uint16_t)(Digital_Compass_Brightness*(31.0/100.0)), false);
    c8ba:	2313      	movs	r3, #19
    c8bc:	18fb      	adds	r3, r7, r3
    c8be:	781b      	ldrb	r3, [r3, #0]
    c8c0:	005a      	lsls	r2, r3, #1
    c8c2:	4b31      	ldr	r3, [pc, #196]	; (c988 <DigitalSideLights+0x76c>)
    c8c4:	0010      	movs	r0, r2
    c8c6:	4798      	blx	r3
    c8c8:	0005      	movs	r5, r0
    c8ca:	000e      	movs	r6, r1
    c8cc:	4b3b      	ldr	r3, [pc, #236]	; (c9bc <DigitalSideLights+0x7a0>)
    c8ce:	681a      	ldr	r2, [r3, #0]
    c8d0:	4b3b      	ldr	r3, [pc, #236]	; (c9c0 <DigitalSideLights+0x7a4>)
    c8d2:	1c10      	adds	r0, r2, #0
    c8d4:	4798      	blx	r3
    c8d6:	4c2f      	ldr	r4, [pc, #188]	; (c994 <DigitalSideLights+0x778>)
    c8d8:	2200      	movs	r2, #0
    c8da:	4b3a      	ldr	r3, [pc, #232]	; (c9c4 <DigitalSideLights+0x7a8>)
    c8dc:	47a0      	blx	r4
    c8de:	0003      	movs	r3, r0
    c8e0:	000c      	movs	r4, r1
    c8e2:	001a      	movs	r2, r3
    c8e4:	0023      	movs	r3, r4
    c8e6:	4c31      	ldr	r4, [pc, #196]	; (c9ac <DigitalSideLights+0x790>)
    c8e8:	0028      	movs	r0, r5
    c8ea:	0031      	movs	r1, r6
    c8ec:	47a0      	blx	r4
    c8ee:	0003      	movs	r3, r0
    c8f0:	000c      	movs	r4, r1
    c8f2:	001d      	movs	r5, r3
    c8f4:	0026      	movs	r6, r4
    c8f6:	2313      	movs	r3, #19
    c8f8:	18fb      	adds	r3, r7, r3
    c8fa:	781b      	ldrb	r3, [r3, #0]
    c8fc:	22bf      	movs	r2, #191	; 0xbf
    c8fe:	0092      	lsls	r2, r2, #2
    c900:	435a      	muls	r2, r3
    c902:	4b21      	ldr	r3, [pc, #132]	; (c988 <DigitalSideLights+0x76c>)
    c904:	0010      	movs	r0, r2
    c906:	4798      	blx	r3
    c908:	0002      	movs	r2, r0
    c90a:	000b      	movs	r3, r1
    c90c:	4c27      	ldr	r4, [pc, #156]	; (c9ac <DigitalSideLights+0x790>)
    c90e:	0028      	movs	r0, r5
    c910:	0031      	movs	r1, r6
    c912:	47a0      	blx	r4
    c914:	0003      	movs	r3, r0
    c916:	000c      	movs	r4, r1
    c918:	0019      	movs	r1, r3
    c91a:	0022      	movs	r2, r4
    c91c:	4b1f      	ldr	r3, [pc, #124]	; (c99c <DigitalSideLights+0x780>)
    c91e:	0008      	movs	r0, r1
    c920:	0011      	movs	r1, r2
    c922:	4798      	blx	r3
    c924:	0003      	movs	r3, r0
    c926:	b29d      	uxth	r5, r3
    c928:	4b27      	ldr	r3, [pc, #156]	; (c9c8 <DigitalSideLights+0x7ac>)
    c92a:	781b      	ldrb	r3, [r3, #0]
    c92c:	001a      	movs	r2, r3
    c92e:	4b16      	ldr	r3, [pc, #88]	; (c988 <DigitalSideLights+0x76c>)
    c930:	0010      	movs	r0, r2
    c932:	4798      	blx	r3
    c934:	4c1d      	ldr	r4, [pc, #116]	; (c9ac <DigitalSideLights+0x790>)
    c936:	4a1e      	ldr	r2, [pc, #120]	; (c9b0 <DigitalSideLights+0x794>)
    c938:	4b1e      	ldr	r3, [pc, #120]	; (c9b4 <DigitalSideLights+0x798>)
    c93a:	47a0      	blx	r4
    c93c:	0003      	movs	r3, r0
    c93e:	000c      	movs	r4, r1
    c940:	0019      	movs	r1, r3
    c942:	0022      	movs	r2, r4
    c944:	4b15      	ldr	r3, [pc, #84]	; (c99c <DigitalSideLights+0x780>)
    c946:	0008      	movs	r0, r1
    c948:	0011      	movs	r1, r2
    c94a:	4798      	blx	r3
    c94c:	0003      	movs	r3, r0
    c94e:	b29b      	uxth	r3, r3
    c950:	b2da      	uxtb	r2, r3
    c952:	2313      	movs	r3, #19
    c954:	18fb      	adds	r3, r7, r3
    c956:	7819      	ldrb	r1, [r3, #0]
    c958:	2300      	movs	r3, #0
    c95a:	9300      	str	r3, [sp, #0]
    c95c:	0013      	movs	r3, r2
    c95e:	2200      	movs	r2, #0
    c960:	0028      	movs	r0, r5
    c962:	4c15      	ldr	r4, [pc, #84]	; (c9b8 <DigitalSideLights+0x79c>)
    c964:	47a0      	blx	r4
					break;
    c966:	f000 fcef 	bl	d348 <DigitalSideLights+0x112c>
    c96a:	46c0      	nop			; (mov r8, r8)
    c96c:	0001b40d 	.word	0x0001b40d
    c970:	20000578 	.word	0x20000578
    c974:	20001420 	.word	0x20001420
    c978:	200000d8 	.word	0x200000d8
    c97c:	00009f65 	.word	0x00009f65
    c980:	0001b131 	.word	0x0001b131
    c984:	200000b2 	.word	0x200000b2
    c988:	0001b0ad 	.word	0x0001b0ad
    c98c:	0001aa19 	.word	0x0001aa19
    c990:	40594000 	.word	0x40594000
    c994:	00019cb1 	.word	0x00019cb1
    c998:	40340000 	.word	0x40340000
    c99c:	0001886d 	.word	0x0001886d
    c9a0:	200000b1 	.word	0x200000b1
    c9a4:	000186ed 	.word	0x000186ed
    c9a8:	200000b3 	.word	0x200000b3
    c9ac:	0001a519 	.word	0x0001a519
    c9b0:	3d70a3d7 	.word	0x3d70a3d7
    c9b4:	3fd3d70a 	.word	0x3fd3d70a
    c9b8:	0000df4d 	.word	0x0000df4d
    c9bc:	20000350 	.word	0x20000350
    c9c0:	0001b1a1 	.word	0x0001b1a1
    c9c4:	40768000 	.word	0x40768000
    c9c8:	200000b4 	.word	0x200000b4
				}
				case MODE_DIGITAL_THROTTLE:
				{
					setDigitalHue((remote_y)*(Digital_Throttle_Sens/10.0), Digital_Throttle_Zoom, Digital_Throttle_Shift*(764/100)*Digital_Throttle_Zoom, (uint16_t)(Digital_Throttle_Brightness*(31.0/100.0)), true);
    c9cc:	4bd8      	ldr	r3, [pc, #864]	; (cd30 <DigitalSideLights+0xb14>)
    c9ce:	781b      	ldrb	r3, [r3, #0]
    c9d0:	001a      	movs	r2, r3
    c9d2:	4bd8      	ldr	r3, [pc, #864]	; (cd34 <DigitalSideLights+0xb18>)
    c9d4:	0010      	movs	r0, r2
    c9d6:	4798      	blx	r3
    c9d8:	0005      	movs	r5, r0
    c9da:	000e      	movs	r6, r1
    c9dc:	4bd6      	ldr	r3, [pc, #856]	; (cd38 <DigitalSideLights+0xb1c>)
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	001a      	movs	r2, r3
    c9e2:	4bd4      	ldr	r3, [pc, #848]	; (cd34 <DigitalSideLights+0xb18>)
    c9e4:	0010      	movs	r0, r2
    c9e6:	4798      	blx	r3
    c9e8:	4cd4      	ldr	r4, [pc, #848]	; (cd3c <DigitalSideLights+0xb20>)
    c9ea:	2200      	movs	r2, #0
    c9ec:	4bd4      	ldr	r3, [pc, #848]	; (cd40 <DigitalSideLights+0xb24>)
    c9ee:	47a0      	blx	r4
    c9f0:	0003      	movs	r3, r0
    c9f2:	000c      	movs	r4, r1
    c9f4:	001a      	movs	r2, r3
    c9f6:	0023      	movs	r3, r4
    c9f8:	4cd2      	ldr	r4, [pc, #840]	; (cd44 <DigitalSideLights+0xb28>)
    c9fa:	0028      	movs	r0, r5
    c9fc:	0031      	movs	r1, r6
    c9fe:	47a0      	blx	r4
    ca00:	0003      	movs	r3, r0
    ca02:	000c      	movs	r4, r1
    ca04:	0019      	movs	r1, r3
    ca06:	0022      	movs	r2, r4
    ca08:	4bcf      	ldr	r3, [pc, #828]	; (cd48 <DigitalSideLights+0xb2c>)
    ca0a:	0008      	movs	r0, r1
    ca0c:	0011      	movs	r1, r2
    ca0e:	4798      	blx	r3
    ca10:	0003      	movs	r3, r0
    ca12:	b29d      	uxth	r5, r3
    ca14:	4bcd      	ldr	r3, [pc, #820]	; (cd4c <DigitalSideLights+0xb30>)
    ca16:	781e      	ldrb	r6, [r3, #0]
    ca18:	4bcd      	ldr	r3, [pc, #820]	; (cd50 <DigitalSideLights+0xb34>)
    ca1a:	781b      	ldrb	r3, [r3, #0]
    ca1c:	b29b      	uxth	r3, r3
    ca1e:	4acb      	ldr	r2, [pc, #812]	; (cd4c <DigitalSideLights+0xb30>)
    ca20:	7812      	ldrb	r2, [r2, #0]
    ca22:	b292      	uxth	r2, r2
    ca24:	4353      	muls	r3, r2
    ca26:	b29b      	uxth	r3, r3
    ca28:	1c1a      	adds	r2, r3, #0
    ca2a:	00d2      	lsls	r2, r2, #3
    ca2c:	1ad3      	subs	r3, r2, r3
    ca2e:	b29b      	uxth	r3, r3
    ca30:	4698      	mov	r8, r3
    ca32:	4bc8      	ldr	r3, [pc, #800]	; (cd54 <DigitalSideLights+0xb38>)
    ca34:	781b      	ldrb	r3, [r3, #0]
    ca36:	001a      	movs	r2, r3
    ca38:	4bbe      	ldr	r3, [pc, #760]	; (cd34 <DigitalSideLights+0xb18>)
    ca3a:	0010      	movs	r0, r2
    ca3c:	4798      	blx	r3
    ca3e:	4cc1      	ldr	r4, [pc, #772]	; (cd44 <DigitalSideLights+0xb28>)
    ca40:	4ac5      	ldr	r2, [pc, #788]	; (cd58 <DigitalSideLights+0xb3c>)
    ca42:	4bc6      	ldr	r3, [pc, #792]	; (cd5c <DigitalSideLights+0xb40>)
    ca44:	47a0      	blx	r4
    ca46:	0003      	movs	r3, r0
    ca48:	000c      	movs	r4, r1
    ca4a:	0019      	movs	r1, r3
    ca4c:	0022      	movs	r2, r4
    ca4e:	4bbe      	ldr	r3, [pc, #760]	; (cd48 <DigitalSideLights+0xb2c>)
    ca50:	0008      	movs	r0, r1
    ca52:	0011      	movs	r1, r2
    ca54:	4798      	blx	r3
    ca56:	0003      	movs	r3, r0
    ca58:	b29b      	uxth	r3, r3
    ca5a:	b2da      	uxtb	r2, r3
    ca5c:	2301      	movs	r3, #1
    ca5e:	9300      	str	r3, [sp, #0]
    ca60:	0013      	movs	r3, r2
    ca62:	4642      	mov	r2, r8
    ca64:	0031      	movs	r1, r6
    ca66:	0028      	movs	r0, r5
    ca68:	4cbd      	ldr	r4, [pc, #756]	; (cd60 <DigitalSideLights+0xb44>)
    ca6a:	47a0      	blx	r4
					break;
    ca6c:	f000 fc6c 	bl	d348 <DigitalSideLights+0x112c>
				case MODE_DIGITAL_RPM_CYCLE:
				{
					//Slider 1 rate
					//Slider 2 zoom
					static uint16_t pos = 0;
					pos = pos+(latest_vesc_vals.rpm*((1.0*Digital_RPM_Zoom)/(101.0-Digital_RPM_Rate)));
    ca70:	4bbc      	ldr	r3, [pc, #752]	; (cd64 <DigitalSideLights+0xb48>)
    ca72:	881b      	ldrh	r3, [r3, #0]
    ca74:	001a      	movs	r2, r3
    ca76:	4baf      	ldr	r3, [pc, #700]	; (cd34 <DigitalSideLights+0xb18>)
    ca78:	0010      	movs	r0, r2
    ca7a:	4798      	blx	r3
    ca7c:	0005      	movs	r5, r0
    ca7e:	000e      	movs	r6, r1
    ca80:	4bb9      	ldr	r3, [pc, #740]	; (cd68 <DigitalSideLights+0xb4c>)
    ca82:	691a      	ldr	r2, [r3, #16]
    ca84:	4bab      	ldr	r3, [pc, #684]	; (cd34 <DigitalSideLights+0xb18>)
    ca86:	0010      	movs	r0, r2
    ca88:	4798      	blx	r3
    ca8a:	60b8      	str	r0, [r7, #8]
    ca8c:	60f9      	str	r1, [r7, #12]
    ca8e:	4bb7      	ldr	r3, [pc, #732]	; (cd6c <DigitalSideLights+0xb50>)
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	001a      	movs	r2, r3
    ca94:	4ba7      	ldr	r3, [pc, #668]	; (cd34 <DigitalSideLights+0xb18>)
    ca96:	0010      	movs	r0, r2
    ca98:	4798      	blx	r3
    ca9a:	6038      	str	r0, [r7, #0]
    ca9c:	6079      	str	r1, [r7, #4]
    ca9e:	4bb4      	ldr	r3, [pc, #720]	; (cd70 <DigitalSideLights+0xb54>)
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	001a      	movs	r2, r3
    caa4:	4ba3      	ldr	r3, [pc, #652]	; (cd34 <DigitalSideLights+0xb18>)
    caa6:	0010      	movs	r0, r2
    caa8:	4798      	blx	r3
    caaa:	0002      	movs	r2, r0
    caac:	000b      	movs	r3, r1
    caae:	4cb1      	ldr	r4, [pc, #708]	; (cd74 <DigitalSideLights+0xb58>)
    cab0:	2000      	movs	r0, #0
    cab2:	49b1      	ldr	r1, [pc, #708]	; (cd78 <DigitalSideLights+0xb5c>)
    cab4:	47a0      	blx	r4
    cab6:	0003      	movs	r3, r0
    cab8:	000c      	movs	r4, r1
    caba:	001a      	movs	r2, r3
    cabc:	0023      	movs	r3, r4
    cabe:	4c9f      	ldr	r4, [pc, #636]	; (cd3c <DigitalSideLights+0xb20>)
    cac0:	6838      	ldr	r0, [r7, #0]
    cac2:	6879      	ldr	r1, [r7, #4]
    cac4:	47a0      	blx	r4
    cac6:	0003      	movs	r3, r0
    cac8:	000c      	movs	r4, r1
    caca:	001a      	movs	r2, r3
    cacc:	0023      	movs	r3, r4
    cace:	4c9d      	ldr	r4, [pc, #628]	; (cd44 <DigitalSideLights+0xb28>)
    cad0:	68b8      	ldr	r0, [r7, #8]
    cad2:	68f9      	ldr	r1, [r7, #12]
    cad4:	47a0      	blx	r4
    cad6:	0003      	movs	r3, r0
    cad8:	000c      	movs	r4, r1
    cada:	001a      	movs	r2, r3
    cadc:	0023      	movs	r3, r4
    cade:	4ca7      	ldr	r4, [pc, #668]	; (cd7c <DigitalSideLights+0xb60>)
    cae0:	0028      	movs	r0, r5
    cae2:	0031      	movs	r1, r6
    cae4:	47a0      	blx	r4
    cae6:	0003      	movs	r3, r0
    cae8:	000c      	movs	r4, r1
    caea:	0019      	movs	r1, r3
    caec:	0022      	movs	r2, r4
    caee:	4b96      	ldr	r3, [pc, #600]	; (cd48 <DigitalSideLights+0xb2c>)
    caf0:	0008      	movs	r0, r1
    caf2:	0011      	movs	r1, r2
    caf4:	4798      	blx	r3
    caf6:	0003      	movs	r3, r0
    caf8:	b29a      	uxth	r2, r3
    cafa:	4b9a      	ldr	r3, [pc, #616]	; (cd64 <DigitalSideLights+0xb48>)
    cafc:	801a      	strh	r2, [r3, #0]
					if(pos >= (Digital_RPM_Zoom * 764))
    cafe:	4b99      	ldr	r3, [pc, #612]	; (cd64 <DigitalSideLights+0xb48>)
    cb00:	881b      	ldrh	r3, [r3, #0]
    cb02:	001a      	movs	r2, r3
    cb04:	4b99      	ldr	r3, [pc, #612]	; (cd6c <DigitalSideLights+0xb50>)
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	0019      	movs	r1, r3
    cb0a:	23bf      	movs	r3, #191	; 0xbf
    cb0c:	009b      	lsls	r3, r3, #2
    cb0e:	434b      	muls	r3, r1
    cb10:	429a      	cmp	r2, r3
    cb12:	db02      	blt.n	cb1a <DigitalSideLights+0x8fe>
						pos = 0;
    cb14:	4b93      	ldr	r3, [pc, #588]	; (cd64 <DigitalSideLights+0xb48>)
    cb16:	2200      	movs	r2, #0
    cb18:	801a      	strh	r2, [r3, #0]
					setDigitalHue(pos, Digital_RPM_Zoom, 0, (uint16_t)(Digital_RPM_Brightness*(31.0/100.0)), false);
    cb1a:	4b92      	ldr	r3, [pc, #584]	; (cd64 <DigitalSideLights+0xb48>)
    cb1c:	881d      	ldrh	r5, [r3, #0]
    cb1e:	4b93      	ldr	r3, [pc, #588]	; (cd6c <DigitalSideLights+0xb50>)
    cb20:	781e      	ldrb	r6, [r3, #0]
    cb22:	4b97      	ldr	r3, [pc, #604]	; (cd80 <DigitalSideLights+0xb64>)
    cb24:	781b      	ldrb	r3, [r3, #0]
    cb26:	001a      	movs	r2, r3
    cb28:	4b82      	ldr	r3, [pc, #520]	; (cd34 <DigitalSideLights+0xb18>)
    cb2a:	0010      	movs	r0, r2
    cb2c:	4798      	blx	r3
    cb2e:	4c85      	ldr	r4, [pc, #532]	; (cd44 <DigitalSideLights+0xb28>)
    cb30:	4a89      	ldr	r2, [pc, #548]	; (cd58 <DigitalSideLights+0xb3c>)
    cb32:	4b8a      	ldr	r3, [pc, #552]	; (cd5c <DigitalSideLights+0xb40>)
    cb34:	47a0      	blx	r4
    cb36:	0003      	movs	r3, r0
    cb38:	000c      	movs	r4, r1
    cb3a:	0019      	movs	r1, r3
    cb3c:	0022      	movs	r2, r4
    cb3e:	4b82      	ldr	r3, [pc, #520]	; (cd48 <DigitalSideLights+0xb2c>)
    cb40:	0008      	movs	r0, r1
    cb42:	0011      	movs	r1, r2
    cb44:	4798      	blx	r3
    cb46:	0003      	movs	r3, r0
    cb48:	b29b      	uxth	r3, r3
    cb4a:	b2da      	uxtb	r2, r3
    cb4c:	2300      	movs	r3, #0
    cb4e:	9300      	str	r3, [sp, #0]
    cb50:	0013      	movs	r3, r2
    cb52:	2200      	movs	r2, #0
    cb54:	0031      	movs	r1, r6
    cb56:	0028      	movs	r0, r5
    cb58:	4c81      	ldr	r4, [pc, #516]	; (cd60 <DigitalSideLights+0xb44>)
    cb5a:	47a0      	blx	r4
					break;
    cb5c:	f000 fbf4 	bl	d348 <DigitalSideLights+0x112c>
				case MODE_DIGITAL_RPM_THROTTLE:
				{
					// New color is chosen by throttle position
					// old colors get pushed back at a rate set by the RPM
					// brightness is set by slider
					for(uint16_t i = led_num-1; i > 0; i--)
    cb60:	4b88      	ldr	r3, [pc, #544]	; (cd84 <DigitalSideLights+0xb68>)
    cb62:	781b      	ldrb	r3, [r3, #0]
    cb64:	b29a      	uxth	r2, r3
    cb66:	2324      	movs	r3, #36	; 0x24
    cb68:	2110      	movs	r1, #16
    cb6a:	468c      	mov	ip, r1
    cb6c:	44bc      	add	ip, r7
    cb6e:	4463      	add	r3, ip
    cb70:	3a01      	subs	r2, #1
    cb72:	801a      	strh	r2, [r3, #0]
    cb74:	e08e      	b.n	cc94 <DigitalSideLights+0xa78>
					{
						L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = L_SPI_send_buf[((i-1)*4)+4];
    cb76:	2324      	movs	r3, #36	; 0x24
    cb78:	2210      	movs	r2, #16
    cb7a:	4694      	mov	ip, r2
    cb7c:	44bc      	add	ip, r7
    cb7e:	4463      	add	r3, ip
    cb80:	881b      	ldrh	r3, [r3, #0]
    cb82:	3301      	adds	r3, #1
    cb84:	009a      	lsls	r2, r3, #2
    cb86:	2324      	movs	r3, #36	; 0x24
    cb88:	2110      	movs	r1, #16
    cb8a:	468c      	mov	ip, r1
    cb8c:	44bc      	add	ip, r7
    cb8e:	4463      	add	r3, ip
    cb90:	881b      	ldrh	r3, [r3, #0]
    cb92:	3301      	adds	r3, #1
    cb94:	009b      	lsls	r3, r3, #2
    cb96:	2124      	movs	r1, #36	; 0x24
    cb98:	2010      	movs	r0, #16
    cb9a:	4684      	mov	ip, r0
    cb9c:	44bc      	add	ip, r7
    cb9e:	4461      	add	r1, ip
    cba0:	8809      	ldrh	r1, [r1, #0]
    cba2:	0089      	lsls	r1, r1, #2
    cba4:	4878      	ldr	r0, [pc, #480]	; (cd88 <DigitalSideLights+0xb6c>)
    cba6:	5c40      	ldrb	r0, [r0, r1]
    cba8:	4978      	ldr	r1, [pc, #480]	; (cd8c <DigitalSideLights+0xb70>)
    cbaa:	54c8      	strb	r0, [r1, r3]
    cbac:	4977      	ldr	r1, [pc, #476]	; (cd8c <DigitalSideLights+0xb70>)
    cbae:	5cc9      	ldrb	r1, [r1, r3]
    cbb0:	4b75      	ldr	r3, [pc, #468]	; (cd88 <DigitalSideLights+0xb6c>)
    cbb2:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = L_SPI_send_buf[((i-1)*4)+5];
    cbb4:	2324      	movs	r3, #36	; 0x24
    cbb6:	2210      	movs	r2, #16
    cbb8:	4694      	mov	ip, r2
    cbba:	44bc      	add	ip, r7
    cbbc:	4463      	add	r3, ip
    cbbe:	881b      	ldrh	r3, [r3, #0]
    cbc0:	009b      	lsls	r3, r3, #2
    cbc2:	1d5a      	adds	r2, r3, #5
    cbc4:	2324      	movs	r3, #36	; 0x24
    cbc6:	2110      	movs	r1, #16
    cbc8:	468c      	mov	ip, r1
    cbca:	44bc      	add	ip, r7
    cbcc:	4463      	add	r3, ip
    cbce:	881b      	ldrh	r3, [r3, #0]
    cbd0:	009b      	lsls	r3, r3, #2
    cbd2:	3305      	adds	r3, #5
    cbd4:	2124      	movs	r1, #36	; 0x24
    cbd6:	2010      	movs	r0, #16
    cbd8:	4684      	mov	ip, r0
    cbda:	44bc      	add	ip, r7
    cbdc:	4461      	add	r1, ip
    cbde:	8809      	ldrh	r1, [r1, #0]
    cbe0:	3901      	subs	r1, #1
    cbe2:	0089      	lsls	r1, r1, #2
    cbe4:	3105      	adds	r1, #5
    cbe6:	4868      	ldr	r0, [pc, #416]	; (cd88 <DigitalSideLights+0xb6c>)
    cbe8:	5c40      	ldrb	r0, [r0, r1]
    cbea:	4968      	ldr	r1, [pc, #416]	; (cd8c <DigitalSideLights+0xb70>)
    cbec:	54c8      	strb	r0, [r1, r3]
    cbee:	4967      	ldr	r1, [pc, #412]	; (cd8c <DigitalSideLights+0xb70>)
    cbf0:	5cc9      	ldrb	r1, [r1, r3]
    cbf2:	4b65      	ldr	r3, [pc, #404]	; (cd88 <DigitalSideLights+0xb6c>)
    cbf4:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = L_SPI_send_buf[((i-1)*4)+6];
    cbf6:	2324      	movs	r3, #36	; 0x24
    cbf8:	2210      	movs	r2, #16
    cbfa:	4694      	mov	ip, r2
    cbfc:	44bc      	add	ip, r7
    cbfe:	4463      	add	r3, ip
    cc00:	881b      	ldrh	r3, [r3, #0]
    cc02:	009b      	lsls	r3, r3, #2
    cc04:	1d9a      	adds	r2, r3, #6
    cc06:	2324      	movs	r3, #36	; 0x24
    cc08:	2110      	movs	r1, #16
    cc0a:	468c      	mov	ip, r1
    cc0c:	44bc      	add	ip, r7
    cc0e:	4463      	add	r3, ip
    cc10:	881b      	ldrh	r3, [r3, #0]
    cc12:	009b      	lsls	r3, r3, #2
    cc14:	3306      	adds	r3, #6
    cc16:	2124      	movs	r1, #36	; 0x24
    cc18:	2010      	movs	r0, #16
    cc1a:	4684      	mov	ip, r0
    cc1c:	44bc      	add	ip, r7
    cc1e:	4461      	add	r1, ip
    cc20:	8809      	ldrh	r1, [r1, #0]
    cc22:	3901      	subs	r1, #1
    cc24:	0089      	lsls	r1, r1, #2
    cc26:	3106      	adds	r1, #6
    cc28:	4857      	ldr	r0, [pc, #348]	; (cd88 <DigitalSideLights+0xb6c>)
    cc2a:	5c40      	ldrb	r0, [r0, r1]
    cc2c:	4957      	ldr	r1, [pc, #348]	; (cd8c <DigitalSideLights+0xb70>)
    cc2e:	54c8      	strb	r0, [r1, r3]
    cc30:	4956      	ldr	r1, [pc, #344]	; (cd8c <DigitalSideLights+0xb70>)
    cc32:	5cc9      	ldrb	r1, [r1, r3]
    cc34:	4b54      	ldr	r3, [pc, #336]	; (cd88 <DigitalSideLights+0xb6c>)
    cc36:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = L_SPI_send_buf[((i-1)*4)+7];
    cc38:	2324      	movs	r3, #36	; 0x24
    cc3a:	2210      	movs	r2, #16
    cc3c:	4694      	mov	ip, r2
    cc3e:	44bc      	add	ip, r7
    cc40:	4463      	add	r3, ip
    cc42:	881b      	ldrh	r3, [r3, #0]
    cc44:	009b      	lsls	r3, r3, #2
    cc46:	1dda      	adds	r2, r3, #7
    cc48:	2324      	movs	r3, #36	; 0x24
    cc4a:	2110      	movs	r1, #16
    cc4c:	468c      	mov	ip, r1
    cc4e:	44bc      	add	ip, r7
    cc50:	4463      	add	r3, ip
    cc52:	881b      	ldrh	r3, [r3, #0]
    cc54:	009b      	lsls	r3, r3, #2
    cc56:	3307      	adds	r3, #7
    cc58:	2124      	movs	r1, #36	; 0x24
    cc5a:	2010      	movs	r0, #16
    cc5c:	4684      	mov	ip, r0
    cc5e:	44bc      	add	ip, r7
    cc60:	4461      	add	r1, ip
    cc62:	8809      	ldrh	r1, [r1, #0]
    cc64:	3901      	subs	r1, #1
    cc66:	0089      	lsls	r1, r1, #2
    cc68:	3107      	adds	r1, #7
    cc6a:	4847      	ldr	r0, [pc, #284]	; (cd88 <DigitalSideLights+0xb6c>)
    cc6c:	5c40      	ldrb	r0, [r0, r1]
    cc6e:	4947      	ldr	r1, [pc, #284]	; (cd8c <DigitalSideLights+0xb70>)
    cc70:	54c8      	strb	r0, [r1, r3]
    cc72:	4946      	ldr	r1, [pc, #280]	; (cd8c <DigitalSideLights+0xb70>)
    cc74:	5cc9      	ldrb	r1, [r1, r3]
    cc76:	4b44      	ldr	r3, [pc, #272]	; (cd88 <DigitalSideLights+0xb6c>)
    cc78:	5499      	strb	r1, [r3, r2]
					for(uint16_t i = led_num-1; i > 0; i--)
    cc7a:	2324      	movs	r3, #36	; 0x24
    cc7c:	2210      	movs	r2, #16
    cc7e:	4694      	mov	ip, r2
    cc80:	44bc      	add	ip, r7
    cc82:	4463      	add	r3, ip
    cc84:	881a      	ldrh	r2, [r3, #0]
    cc86:	2324      	movs	r3, #36	; 0x24
    cc88:	2110      	movs	r1, #16
    cc8a:	468c      	mov	ip, r1
    cc8c:	44bc      	add	ip, r7
    cc8e:	4463      	add	r3, ip
    cc90:	3a01      	subs	r2, #1
    cc92:	801a      	strh	r2, [r3, #0]
    cc94:	2324      	movs	r3, #36	; 0x24
    cc96:	2210      	movs	r2, #16
    cc98:	4694      	mov	ip, r2
    cc9a:	44bc      	add	ip, r7
    cc9c:	4463      	add	r3, ip
    cc9e:	881b      	ldrh	r3, [r3, #0]
    cca0:	2b00      	cmp	r3, #0
    cca2:	d000      	beq.n	cca6 <DigitalSideLights+0xa8a>
    cca4:	e767      	b.n	cb76 <DigitalSideLights+0x95a>
					}

					uint16_t x = (remote_y*3);
    cca6:	4b22      	ldr	r3, [pc, #136]	; (cd30 <DigitalSideLights+0xb14>)
    cca8:	781b      	ldrb	r3, [r3, #0]
    ccaa:	b29b      	uxth	r3, r3
    ccac:	2210      	movs	r2, #16
    ccae:	18ba      	adds	r2, r7, r2
    ccb0:	1c19      	adds	r1, r3, #0
    ccb2:	1c0b      	adds	r3, r1, #0
    ccb4:	18db      	adds	r3, r3, r3
    ccb6:	185b      	adds	r3, r3, r1
    ccb8:	8013      	strh	r3, [r2, #0]

					L_SPI_send_buf[4] = R_SPI_send_buf[4] = (0b11100000 | brightness);
    ccba:	220a      	movs	r2, #10
    ccbc:	2320      	movs	r3, #32
    ccbe:	425b      	negs	r3, r3
    ccc0:	4313      	orrs	r3, r2
    ccc2:	b2da      	uxtb	r2, r3
    ccc4:	4b31      	ldr	r3, [pc, #196]	; (cd8c <DigitalSideLights+0xb70>)
    ccc6:	711a      	strb	r2, [r3, #4]
    ccc8:	4b30      	ldr	r3, [pc, #192]	; (cd8c <DigitalSideLights+0xb70>)
    ccca:	791a      	ldrb	r2, [r3, #4]
    cccc:	4b2e      	ldr	r3, [pc, #184]	; (cd88 <DigitalSideLights+0xb6c>)
    ccce:	711a      	strb	r2, [r3, #4]
					if(x/255 == 0){
    ccd0:	2310      	movs	r3, #16
    ccd2:	18fb      	adds	r3, r7, r3
    ccd4:	881b      	ldrh	r3, [r3, #0]
    ccd6:	2bfe      	cmp	r3, #254	; 0xfe
    ccd8:	d85c      	bhi.n	cd94 <DigitalSideLights+0xb78>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 0;
    ccda:	4b2c      	ldr	r3, [pc, #176]	; (cd8c <DigitalSideLights+0xb70>)
    ccdc:	2200      	movs	r2, #0
    ccde:	715a      	strb	r2, [r3, #5]
    cce0:	4b2a      	ldr	r3, [pc, #168]	; (cd8c <DigitalSideLights+0xb70>)
    cce2:	795a      	ldrb	r2, [r3, #5]
    cce4:	4b28      	ldr	r3, [pc, #160]	; (cd88 <DigitalSideLights+0xb6c>)
    cce6:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = 255-(x%255);
    cce8:	2310      	movs	r3, #16
    ccea:	18fb      	adds	r3, r7, r3
    ccec:	881a      	ldrh	r2, [r3, #0]
    ccee:	4b28      	ldr	r3, [pc, #160]	; (cd90 <DigitalSideLights+0xb74>)
    ccf0:	21ff      	movs	r1, #255	; 0xff
    ccf2:	0010      	movs	r0, r2
    ccf4:	4798      	blx	r3
    ccf6:	000b      	movs	r3, r1
    ccf8:	b29b      	uxth	r3, r3
    ccfa:	b2db      	uxtb	r3, r3
    ccfc:	43db      	mvns	r3, r3
    ccfe:	b2da      	uxtb	r2, r3
    cd00:	4b22      	ldr	r3, [pc, #136]	; (cd8c <DigitalSideLights+0xb70>)
    cd02:	719a      	strb	r2, [r3, #6]
    cd04:	4b21      	ldr	r3, [pc, #132]	; (cd8c <DigitalSideLights+0xb70>)
    cd06:	799a      	ldrb	r2, [r3, #6]
    cd08:	4b1f      	ldr	r3, [pc, #124]	; (cd88 <DigitalSideLights+0xb6c>)
    cd0a:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = (x%255);
    cd0c:	2310      	movs	r3, #16
    cd0e:	18fb      	adds	r3, r7, r3
    cd10:	881a      	ldrh	r2, [r3, #0]
    cd12:	4b1f      	ldr	r3, [pc, #124]	; (cd90 <DigitalSideLights+0xb74>)
    cd14:	21ff      	movs	r1, #255	; 0xff
    cd16:	0010      	movs	r0, r2
    cd18:	4798      	blx	r3
    cd1a:	000b      	movs	r3, r1
    cd1c:	b29b      	uxth	r3, r3
    cd1e:	b2da      	uxtb	r2, r3
    cd20:	4b1a      	ldr	r3, [pc, #104]	; (cd8c <DigitalSideLights+0xb70>)
    cd22:	71da      	strb	r2, [r3, #7]
    cd24:	4b19      	ldr	r3, [pc, #100]	; (cd8c <DigitalSideLights+0xb70>)
    cd26:	79da      	ldrb	r2, [r3, #7]
    cd28:	4b17      	ldr	r3, [pc, #92]	; (cd88 <DigitalSideLights+0xb6c>)
    cd2a:	71da      	strb	r2, [r3, #7]
					} else if(x/255 == 2){
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
					}
					break;
    cd2c:	e309      	b.n	d342 <DigitalSideLights+0x1126>
    cd2e:	46c0      	nop			; (mov r8, r8)
    cd30:	2000038e 	.word	0x2000038e
    cd34:	0001b0ad 	.word	0x0001b0ad
    cd38:	200000b7 	.word	0x200000b7
    cd3c:	00019cb1 	.word	0x00019cb1
    cd40:	40240000 	.word	0x40240000
    cd44:	0001a519 	.word	0x0001a519
    cd48:	0001886d 	.word	0x0001886d
    cd4c:	200000b5 	.word	0x200000b5
    cd50:	200000b6 	.word	0x200000b6
    cd54:	200000b8 	.word	0x200000b8
    cd58:	3d70a3d7 	.word	0x3d70a3d7
    cd5c:	3fd3d70a 	.word	0x3fd3d70a
    cd60:	0000df4d 	.word	0x0000df4d
    cd64:	20000458 	.word	0x20000458
    cd68:	20000e1c 	.word	0x20000e1c
    cd6c:	200000b9 	.word	0x200000b9
    cd70:	200000ba 	.word	0x200000ba
    cd74:	0001aa19 	.word	0x0001aa19
    cd78:	40594000 	.word	0x40594000
    cd7c:	00019691 	.word	0x00019691
    cd80:	200000bb 	.word	0x200000bb
    cd84:	200000d8 	.word	0x200000d8
    cd88:	20001420 	.word	0x20001420
    cd8c:	20000578 	.word	0x20000578
    cd90:	00018519 	.word	0x00018519
					} else if(x/255 == 1){
    cd94:	2310      	movs	r3, #16
    cd96:	18fb      	adds	r3, r7, r3
    cd98:	881b      	ldrh	r3, [r3, #0]
    cd9a:	3bff      	subs	r3, #255	; 0xff
    cd9c:	b29b      	uxth	r3, r3
    cd9e:	2bfe      	cmp	r3, #254	; 0xfe
    cda0:	d829      	bhi.n	cdf6 <DigitalSideLights+0xbda>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = (x%255);
    cda2:	2310      	movs	r3, #16
    cda4:	18fb      	adds	r3, r7, r3
    cda6:	881a      	ldrh	r2, [r3, #0]
    cda8:	4ba2      	ldr	r3, [pc, #648]	; (d034 <DigitalSideLights+0xe18>)
    cdaa:	21ff      	movs	r1, #255	; 0xff
    cdac:	0010      	movs	r0, r2
    cdae:	4798      	blx	r3
    cdb0:	000b      	movs	r3, r1
    cdb2:	b29b      	uxth	r3, r3
    cdb4:	b2da      	uxtb	r2, r3
    cdb6:	4ba0      	ldr	r3, [pc, #640]	; (d038 <DigitalSideLights+0xe1c>)
    cdb8:	715a      	strb	r2, [r3, #5]
    cdba:	4b9f      	ldr	r3, [pc, #636]	; (d038 <DigitalSideLights+0xe1c>)
    cdbc:	795a      	ldrb	r2, [r3, #5]
    cdbe:	4b9f      	ldr	r3, [pc, #636]	; (d03c <DigitalSideLights+0xe20>)
    cdc0:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = 0;
    cdc2:	4b9d      	ldr	r3, [pc, #628]	; (d038 <DigitalSideLights+0xe1c>)
    cdc4:	2200      	movs	r2, #0
    cdc6:	719a      	strb	r2, [r3, #6]
    cdc8:	4b9b      	ldr	r3, [pc, #620]	; (d038 <DigitalSideLights+0xe1c>)
    cdca:	799a      	ldrb	r2, [r3, #6]
    cdcc:	4b9b      	ldr	r3, [pc, #620]	; (d03c <DigitalSideLights+0xe20>)
    cdce:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 255-(x%255);
    cdd0:	2310      	movs	r3, #16
    cdd2:	18fb      	adds	r3, r7, r3
    cdd4:	881a      	ldrh	r2, [r3, #0]
    cdd6:	4b97      	ldr	r3, [pc, #604]	; (d034 <DigitalSideLights+0xe18>)
    cdd8:	21ff      	movs	r1, #255	; 0xff
    cdda:	0010      	movs	r0, r2
    cddc:	4798      	blx	r3
    cdde:	000b      	movs	r3, r1
    cde0:	b29b      	uxth	r3, r3
    cde2:	b2db      	uxtb	r3, r3
    cde4:	43db      	mvns	r3, r3
    cde6:	b2da      	uxtb	r2, r3
    cde8:	4b93      	ldr	r3, [pc, #588]	; (d038 <DigitalSideLights+0xe1c>)
    cdea:	71da      	strb	r2, [r3, #7]
    cdec:	4b92      	ldr	r3, [pc, #584]	; (d038 <DigitalSideLights+0xe1c>)
    cdee:	79da      	ldrb	r2, [r3, #7]
    cdf0:	4b92      	ldr	r3, [pc, #584]	; (d03c <DigitalSideLights+0xe20>)
    cdf2:	71da      	strb	r2, [r3, #7]
					break;
    cdf4:	e2a5      	b.n	d342 <DigitalSideLights+0x1126>
					} else if(x/255 == 2){
    cdf6:	2310      	movs	r3, #16
    cdf8:	18fb      	adds	r3, r7, r3
    cdfa:	881b      	ldrh	r3, [r3, #0]
    cdfc:	3bff      	subs	r3, #255	; 0xff
    cdfe:	3bff      	subs	r3, #255	; 0xff
    ce00:	b29b      	uxth	r3, r3
    ce02:	2bfe      	cmp	r3, #254	; 0xfe
    ce04:	d900      	bls.n	ce08 <DigitalSideLights+0xbec>
    ce06:	e29c      	b.n	d342 <DigitalSideLights+0x1126>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
    ce08:	2310      	movs	r3, #16
    ce0a:	18fb      	adds	r3, r7, r3
    ce0c:	881a      	ldrh	r2, [r3, #0]
    ce0e:	4b89      	ldr	r3, [pc, #548]	; (d034 <DigitalSideLights+0xe18>)
    ce10:	21ff      	movs	r1, #255	; 0xff
    ce12:	0010      	movs	r0, r2
    ce14:	4798      	blx	r3
    ce16:	000b      	movs	r3, r1
    ce18:	b29b      	uxth	r3, r3
    ce1a:	b2db      	uxtb	r3, r3
    ce1c:	43db      	mvns	r3, r3
    ce1e:	b2da      	uxtb	r2, r3
    ce20:	4b85      	ldr	r3, [pc, #532]	; (d038 <DigitalSideLights+0xe1c>)
    ce22:	715a      	strb	r2, [r3, #5]
    ce24:	4b84      	ldr	r3, [pc, #528]	; (d038 <DigitalSideLights+0xe1c>)
    ce26:	795a      	ldrb	r2, [r3, #5]
    ce28:	4b84      	ldr	r3, [pc, #528]	; (d03c <DigitalSideLights+0xe20>)
    ce2a:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
    ce2c:	2310      	movs	r3, #16
    ce2e:	18fb      	adds	r3, r7, r3
    ce30:	881a      	ldrh	r2, [r3, #0]
    ce32:	4b80      	ldr	r3, [pc, #512]	; (d034 <DigitalSideLights+0xe18>)
    ce34:	21ff      	movs	r1, #255	; 0xff
    ce36:	0010      	movs	r0, r2
    ce38:	4798      	blx	r3
    ce3a:	000b      	movs	r3, r1
    ce3c:	b29b      	uxth	r3, r3
    ce3e:	b2da      	uxtb	r2, r3
    ce40:	4b7d      	ldr	r3, [pc, #500]	; (d038 <DigitalSideLights+0xe1c>)
    ce42:	719a      	strb	r2, [r3, #6]
    ce44:	4b7c      	ldr	r3, [pc, #496]	; (d038 <DigitalSideLights+0xe1c>)
    ce46:	799a      	ldrb	r2, [r3, #6]
    ce48:	4b7c      	ldr	r3, [pc, #496]	; (d03c <DigitalSideLights+0xe20>)
    ce4a:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
    ce4c:	4b7a      	ldr	r3, [pc, #488]	; (d038 <DigitalSideLights+0xe1c>)
    ce4e:	2200      	movs	r2, #0
    ce50:	71da      	strb	r2, [r3, #7]
    ce52:	4b79      	ldr	r3, [pc, #484]	; (d038 <DigitalSideLights+0xe1c>)
    ce54:	79da      	ldrb	r2, [r3, #7]
    ce56:	4b79      	ldr	r3, [pc, #484]	; (d03c <DigitalSideLights+0xe20>)
    ce58:	71da      	strb	r2, [r3, #7]
					break;
    ce5a:	e272      	b.n	d342 <DigitalSideLights+0x1126>
				}
				case MODE_DIGITAL_COMPASS_WHEEL:
				{
					//use digital hue logic for each pixel
					//extend the gradient for further LEDs
					float zoom_delta = 0.2;
    ce5c:	4b78      	ldr	r3, [pc, #480]	; (d040 <DigitalSideLights+0xe24>)
    ce5e:	633b      	str	r3, [r7, #48]	; 0x30
					float pos_delta = 50;
    ce60:	4b78      	ldr	r3, [pc, #480]	; (d044 <DigitalSideLights+0xe28>)
    ce62:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(led_num > 35){
    ce64:	4b78      	ldr	r3, [pc, #480]	; (d048 <DigitalSideLights+0xe2c>)
    ce66:	781b      	ldrb	r3, [r3, #0]
    ce68:	2b23      	cmp	r3, #35	; 0x23
    ce6a:	d903      	bls.n	ce74 <DigitalSideLights+0xc58>
						zoom_delta = 0.1;
    ce6c:	4b77      	ldr	r3, [pc, #476]	; (d04c <DigitalSideLights+0xe30>)
    ce6e:	633b      	str	r3, [r7, #48]	; 0x30
						pos_delta = 25;
    ce70:	4b77      	ldr	r3, [pc, #476]	; (d050 <DigitalSideLights+0xe34>)
    ce72:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
						
					float temp_zoom = 1+(zoom_delta*(led_num/2));
    ce74:	4b74      	ldr	r3, [pc, #464]	; (d048 <DigitalSideLights+0xe2c>)
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	085b      	lsrs	r3, r3, #1
    ce7a:	b2db      	uxtb	r3, r3
    ce7c:	001a      	movs	r2, r3
    ce7e:	4b75      	ldr	r3, [pc, #468]	; (d054 <DigitalSideLights+0xe38>)
    ce80:	0010      	movs	r0, r2
    ce82:	4798      	blx	r3
    ce84:	1c02      	adds	r2, r0, #0
    ce86:	4b74      	ldr	r3, [pc, #464]	; (d058 <DigitalSideLights+0xe3c>)
    ce88:	6b39      	ldr	r1, [r7, #48]	; 0x30
    ce8a:	1c10      	adds	r0, r2, #0
    ce8c:	4798      	blx	r3
    ce8e:	1c03      	adds	r3, r0, #0
    ce90:	1c1a      	adds	r2, r3, #0
    ce92:	4b72      	ldr	r3, [pc, #456]	; (d05c <DigitalSideLights+0xe40>)
    ce94:	21fe      	movs	r1, #254	; 0xfe
    ce96:	0589      	lsls	r1, r1, #22
    ce98:	1c10      	adds	r0, r2, #0
    ce9a:	4798      	blx	r3
    ce9c:	1c03      	adds	r3, r0, #0
    ce9e:	62bb      	str	r3, [r7, #40]	; 0x28

					int x = (heading/360.0)*764*4;
    cea0:	4b6f      	ldr	r3, [pc, #444]	; (d060 <DigitalSideLights+0xe44>)
    cea2:	681a      	ldr	r2, [r3, #0]
    cea4:	4b6f      	ldr	r3, [pc, #444]	; (d064 <DigitalSideLights+0xe48>)
    cea6:	1c10      	adds	r0, r2, #0
    cea8:	4798      	blx	r3
    ceaa:	4c6f      	ldr	r4, [pc, #444]	; (d068 <DigitalSideLights+0xe4c>)
    ceac:	2200      	movs	r2, #0
    ceae:	4b6f      	ldr	r3, [pc, #444]	; (d06c <DigitalSideLights+0xe50>)
    ceb0:	47a0      	blx	r4
    ceb2:	0003      	movs	r3, r0
    ceb4:	000c      	movs	r4, r1
    ceb6:	0018      	movs	r0, r3
    ceb8:	0021      	movs	r1, r4
    ceba:	4c6d      	ldr	r4, [pc, #436]	; (d070 <DigitalSideLights+0xe54>)
    cebc:	2200      	movs	r2, #0
    cebe:	4b6d      	ldr	r3, [pc, #436]	; (d074 <DigitalSideLights+0xe58>)
    cec0:	47a0      	blx	r4
    cec2:	0003      	movs	r3, r0
    cec4:	000c      	movs	r4, r1
    cec6:	0018      	movs	r0, r3
    cec8:	0021      	movs	r1, r4
    ceca:	4c69      	ldr	r4, [pc, #420]	; (d070 <DigitalSideLights+0xe54>)
    cecc:	2200      	movs	r2, #0
    cece:	4b6a      	ldr	r3, [pc, #424]	; (d078 <DigitalSideLights+0xe5c>)
    ced0:	47a0      	blx	r4
    ced2:	0003      	movs	r3, r0
    ced4:	000c      	movs	r4, r1
    ced6:	0019      	movs	r1, r3
    ced8:	0022      	movs	r2, r4
    ceda:	4b68      	ldr	r3, [pc, #416]	; (d07c <DigitalSideLights+0xe60>)
    cedc:	0008      	movs	r0, r1
    cede:	0011      	movs	r1, r2
    cee0:	4798      	blx	r3
    cee2:	0003      	movs	r3, r0
    cee4:	627b      	str	r3, [r7, #36]	; 0x24
					while(x<0)
    cee6:	e005      	b.n	cef4 <DigitalSideLights+0xcd8>
						x += (764);
    cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ceea:	22bf      	movs	r2, #191	; 0xbf
    ceec:	0092      	lsls	r2, r2, #2
    ceee:	4694      	mov	ip, r2
    cef0:	4463      	add	r3, ip
    cef2:	627b      	str	r3, [r7, #36]	; 0x24
					while(x<0)
    cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cef6:	2b00      	cmp	r3, #0
    cef8:	dbf6      	blt.n	cee8 <DigitalSideLights+0xccc>
					while(x>(764))
    cefa:	e004      	b.n	cf06 <DigitalSideLights+0xcea>
						x -= (764);
    cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cefe:	4a60      	ldr	r2, [pc, #384]	; (d080 <DigitalSideLights+0xe64>)
    cf00:	4694      	mov	ip, r2
    cf02:	4463      	add	r3, ip
    cf04:	627b      	str	r3, [r7, #36]	; 0x24
					while(x>(764))
    cf06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf08:	23bf      	movs	r3, #191	; 0xbf
    cf0a:	009b      	lsls	r3, r3, #2
    cf0c:	429a      	cmp	r2, r3
    cf0e:	dcf5      	bgt.n	cefc <DigitalSideLights+0xce0>

					x = x-(pos_delta*(led_num/2));
    cf10:	4b50      	ldr	r3, [pc, #320]	; (d054 <DigitalSideLights+0xe38>)
    cf12:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf14:	4798      	blx	r3
    cf16:	1c04      	adds	r4, r0, #0
    cf18:	4b4b      	ldr	r3, [pc, #300]	; (d048 <DigitalSideLights+0xe2c>)
    cf1a:	781b      	ldrb	r3, [r3, #0]
    cf1c:	085b      	lsrs	r3, r3, #1
    cf1e:	b2db      	uxtb	r3, r3
    cf20:	001a      	movs	r2, r3
    cf22:	4b4c      	ldr	r3, [pc, #304]	; (d054 <DigitalSideLights+0xe38>)
    cf24:	0010      	movs	r0, r2
    cf26:	4798      	blx	r3
    cf28:	1c02      	adds	r2, r0, #0
    cf2a:	4b4b      	ldr	r3, [pc, #300]	; (d058 <DigitalSideLights+0xe3c>)
    cf2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    cf2e:	1c10      	adds	r0, r2, #0
    cf30:	4798      	blx	r3
    cf32:	1c03      	adds	r3, r0, #0
    cf34:	1c1a      	adds	r2, r3, #0
    cf36:	4b53      	ldr	r3, [pc, #332]	; (d084 <DigitalSideLights+0xe68>)
    cf38:	1c11      	adds	r1, r2, #0
    cf3a:	1c20      	adds	r0, r4, #0
    cf3c:	4798      	blx	r3
    cf3e:	1c03      	adds	r3, r0, #0
    cf40:	1c1a      	adds	r2, r3, #0
    cf42:	4b51      	ldr	r3, [pc, #324]	; (d088 <DigitalSideLights+0xe6c>)
    cf44:	1c10      	adds	r0, r2, #0
    cf46:	4798      	blx	r3
    cf48:	0003      	movs	r3, r0
    cf4a:	627b      	str	r3, [r7, #36]	; 0x24

					for(int i = 0; i < led_num; i++){
    cf4c:	2300      	movs	r3, #0
    cf4e:	623b      	str	r3, [r7, #32]
    cf50:	e05e      	b.n	d010 <DigitalSideLights+0xdf4>
						setDigitalLEDHue(x, temp_zoom, brightness, i);
    cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf54:	b29c      	uxth	r4, r3
    cf56:	4b4d      	ldr	r3, [pc, #308]	; (d08c <DigitalSideLights+0xe70>)
    cf58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cf5a:	4798      	blx	r3
    cf5c:	0003      	movs	r3, r0
    cf5e:	b2d9      	uxtb	r1, r3
    cf60:	220a      	movs	r2, #10
    cf62:	6a3b      	ldr	r3, [r7, #32]
    cf64:	b2db      	uxtb	r3, r3
    cf66:	0020      	movs	r0, r4
    cf68:	4c49      	ldr	r4, [pc, #292]	; (d090 <DigitalSideLights+0xe74>)
    cf6a:	47a0      	blx	r4
						if(i < (led_num/2)-1){
    cf6c:	4b36      	ldr	r3, [pc, #216]	; (d048 <DigitalSideLights+0xe2c>)
    cf6e:	781b      	ldrb	r3, [r3, #0]
    cf70:	085b      	lsrs	r3, r3, #1
    cf72:	b2db      	uxtb	r3, r3
    cf74:	1e5a      	subs	r2, r3, #1
    cf76:	6a3b      	ldr	r3, [r7, #32]
    cf78:	429a      	cmp	r2, r3
    cf7a:	dd14      	ble.n	cfa6 <DigitalSideLights+0xd8a>
							x = x + pos_delta;
    cf7c:	4b35      	ldr	r3, [pc, #212]	; (d054 <DigitalSideLights+0xe38>)
    cf7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf80:	4798      	blx	r3
    cf82:	1c02      	adds	r2, r0, #0
    cf84:	4b35      	ldr	r3, [pc, #212]	; (d05c <DigitalSideLights+0xe40>)
    cf86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    cf88:	1c10      	adds	r0, r2, #0
    cf8a:	4798      	blx	r3
    cf8c:	1c03      	adds	r3, r0, #0
    cf8e:	1c1a      	adds	r2, r3, #0
    cf90:	4b3d      	ldr	r3, [pc, #244]	; (d088 <DigitalSideLights+0xe6c>)
    cf92:	1c10      	adds	r0, r2, #0
    cf94:	4798      	blx	r3
    cf96:	0003      	movs	r3, r0
    cf98:	627b      	str	r3, [r7, #36]	; 0x24
							temp_zoom = temp_zoom - zoom_delta;
    cf9a:	4b3a      	ldr	r3, [pc, #232]	; (d084 <DigitalSideLights+0xe68>)
    cf9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cf9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cfa0:	4798      	blx	r3
    cfa2:	1c03      	adds	r3, r0, #0
    cfa4:	62bb      	str	r3, [r7, #40]	; 0x28
						}
						if(i > (led_num/2)-1){
    cfa6:	4b28      	ldr	r3, [pc, #160]	; (d048 <DigitalSideLights+0xe2c>)
    cfa8:	781b      	ldrb	r3, [r3, #0]
    cfaa:	085b      	lsrs	r3, r3, #1
    cfac:	b2db      	uxtb	r3, r3
    cfae:	1e5a      	subs	r2, r3, #1
    cfb0:	6a3b      	ldr	r3, [r7, #32]
    cfb2:	429a      	cmp	r2, r3
    cfb4:	da1b      	bge.n	cfee <DigitalSideLights+0xdd2>
							x = x - pos_delta;
    cfb6:	4b27      	ldr	r3, [pc, #156]	; (d054 <DigitalSideLights+0xe38>)
    cfb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cfba:	4798      	blx	r3
    cfbc:	1c02      	adds	r2, r0, #0
    cfbe:	4b31      	ldr	r3, [pc, #196]	; (d084 <DigitalSideLights+0xe68>)
    cfc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    cfc2:	1c10      	adds	r0, r2, #0
    cfc4:	4798      	blx	r3
    cfc6:	1c03      	adds	r3, r0, #0
    cfc8:	1c1a      	adds	r2, r3, #0
    cfca:	4b2f      	ldr	r3, [pc, #188]	; (d088 <DigitalSideLights+0xe6c>)
    cfcc:	1c10      	adds	r0, r2, #0
    cfce:	4798      	blx	r3
    cfd0:	0003      	movs	r3, r0
    cfd2:	627b      	str	r3, [r7, #36]	; 0x24
							temp_zoom = temp_zoom +zoom_delta;
    cfd4:	4b21      	ldr	r3, [pc, #132]	; (d05c <DigitalSideLights+0xe40>)
    cfd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cfd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cfda:	4798      	blx	r3
    cfdc:	1c03      	adds	r3, r0, #0
    cfde:	62bb      	str	r3, [r7, #40]	; 0x28
						}
						while(x<0)
    cfe0:	e005      	b.n	cfee <DigitalSideLights+0xdd2>
							x += (764);
    cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfe4:	22bf      	movs	r2, #191	; 0xbf
    cfe6:	0092      	lsls	r2, r2, #2
    cfe8:	4694      	mov	ip, r2
    cfea:	4463      	add	r3, ip
    cfec:	627b      	str	r3, [r7, #36]	; 0x24
						while(x<0)
    cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cff0:	2b00      	cmp	r3, #0
    cff2:	dbf6      	blt.n	cfe2 <DigitalSideLights+0xdc6>
						while(x>(764))
    cff4:	e004      	b.n	d000 <DigitalSideLights+0xde4>
							x -= (764);
    cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cff8:	4a21      	ldr	r2, [pc, #132]	; (d080 <DigitalSideLights+0xe64>)
    cffa:	4694      	mov	ip, r2
    cffc:	4463      	add	r3, ip
    cffe:	627b      	str	r3, [r7, #36]	; 0x24
						while(x>(764))
    d000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d002:	23bf      	movs	r3, #191	; 0xbf
    d004:	009b      	lsls	r3, r3, #2
    d006:	429a      	cmp	r2, r3
    d008:	dcf5      	bgt.n	cff6 <DigitalSideLights+0xdda>
					for(int i = 0; i < led_num; i++){
    d00a:	6a3b      	ldr	r3, [r7, #32]
    d00c:	3301      	adds	r3, #1
    d00e:	623b      	str	r3, [r7, #32]
    d010:	4b0d      	ldr	r3, [pc, #52]	; (d048 <DigitalSideLights+0xe2c>)
    d012:	781b      	ldrb	r3, [r3, #0]
    d014:	001a      	movs	r2, r3
    d016:	6a3b      	ldr	r3, [r7, #32]
    d018:	429a      	cmp	r2, r3
    d01a:	dc9a      	bgt.n	cf52 <DigitalSideLights+0xd36>
					}
					break;
    d01c:	e194      	b.n	d348 <DigitalSideLights+0x112c>
				}
				case MODE_DIGITAL_COMPASS_SNAKE:
				{
					for(uint16_t i = led_num-1; i > 0; i--)
    d01e:	4b0a      	ldr	r3, [pc, #40]	; (d048 <DigitalSideLights+0xe2c>)
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	b29a      	uxth	r2, r3
    d024:	230e      	movs	r3, #14
    d026:	2110      	movs	r1, #16
    d028:	468c      	mov	ip, r1
    d02a:	44bc      	add	ip, r7
    d02c:	4463      	add	r3, ip
    d02e:	3a01      	subs	r2, #1
    d030:	801a      	strh	r2, [r3, #0]
    d032:	e0be      	b.n	d1b2 <DigitalSideLights+0xf96>
    d034:	00018519 	.word	0x00018519
    d038:	20000578 	.word	0x20000578
    d03c:	20001420 	.word	0x20001420
    d040:	3e4ccccd 	.word	0x3e4ccccd
    d044:	42480000 	.word	0x42480000
    d048:	200000d8 	.word	0x200000d8
    d04c:	3dcccccd 	.word	0x3dcccccd
    d050:	41c80000 	.word	0x41c80000
    d054:	00019565 	.word	0x00019565
    d058:	00018fad 	.word	0x00018fad
    d05c:	000188a9 	.word	0x000188a9
    d060:	20000350 	.word	0x20000350
    d064:	0001b1a1 	.word	0x0001b1a1
    d068:	00019cb1 	.word	0x00019cb1
    d06c:	40768000 	.word	0x40768000
    d070:	0001a519 	.word	0x0001a519
    d074:	4087e000 	.word	0x4087e000
    d078:	40100000 	.word	0x40100000
    d07c:	0001b045 	.word	0x0001b045
    d080:	fffffd04 	.word	0xfffffd04
    d084:	000191ed 	.word	0x000191ed
    d088:	00019525 	.word	0x00019525
    d08c:	0001883d 	.word	0x0001883d
    d090:	0000e2a1 	.word	0x0000e2a1
					{
						L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = L_SPI_send_buf[((i-1)*4)+4];
    d094:	230e      	movs	r3, #14
    d096:	2210      	movs	r2, #16
    d098:	4694      	mov	ip, r2
    d09a:	44bc      	add	ip, r7
    d09c:	4463      	add	r3, ip
    d09e:	881b      	ldrh	r3, [r3, #0]
    d0a0:	3301      	adds	r3, #1
    d0a2:	009a      	lsls	r2, r3, #2
    d0a4:	230e      	movs	r3, #14
    d0a6:	2110      	movs	r1, #16
    d0a8:	468c      	mov	ip, r1
    d0aa:	44bc      	add	ip, r7
    d0ac:	4463      	add	r3, ip
    d0ae:	881b      	ldrh	r3, [r3, #0]
    d0b0:	3301      	adds	r3, #1
    d0b2:	009b      	lsls	r3, r3, #2
    d0b4:	210e      	movs	r1, #14
    d0b6:	2010      	movs	r0, #16
    d0b8:	4684      	mov	ip, r0
    d0ba:	44bc      	add	ip, r7
    d0bc:	4461      	add	r1, ip
    d0be:	8809      	ldrh	r1, [r1, #0]
    d0c0:	0089      	lsls	r1, r1, #2
    d0c2:	48ae      	ldr	r0, [pc, #696]	; (d37c <DigitalSideLights+0x1160>)
    d0c4:	5c40      	ldrb	r0, [r0, r1]
    d0c6:	49ae      	ldr	r1, [pc, #696]	; (d380 <DigitalSideLights+0x1164>)
    d0c8:	54c8      	strb	r0, [r1, r3]
    d0ca:	49ad      	ldr	r1, [pc, #692]	; (d380 <DigitalSideLights+0x1164>)
    d0cc:	5cc9      	ldrb	r1, [r1, r3]
    d0ce:	4bab      	ldr	r3, [pc, #684]	; (d37c <DigitalSideLights+0x1160>)
    d0d0:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = L_SPI_send_buf[((i-1)*4)+5];
    d0d2:	230e      	movs	r3, #14
    d0d4:	2210      	movs	r2, #16
    d0d6:	4694      	mov	ip, r2
    d0d8:	44bc      	add	ip, r7
    d0da:	4463      	add	r3, ip
    d0dc:	881b      	ldrh	r3, [r3, #0]
    d0de:	009b      	lsls	r3, r3, #2
    d0e0:	1d5a      	adds	r2, r3, #5
    d0e2:	230e      	movs	r3, #14
    d0e4:	2110      	movs	r1, #16
    d0e6:	468c      	mov	ip, r1
    d0e8:	44bc      	add	ip, r7
    d0ea:	4463      	add	r3, ip
    d0ec:	881b      	ldrh	r3, [r3, #0]
    d0ee:	009b      	lsls	r3, r3, #2
    d0f0:	3305      	adds	r3, #5
    d0f2:	210e      	movs	r1, #14
    d0f4:	2010      	movs	r0, #16
    d0f6:	4684      	mov	ip, r0
    d0f8:	44bc      	add	ip, r7
    d0fa:	4461      	add	r1, ip
    d0fc:	8809      	ldrh	r1, [r1, #0]
    d0fe:	3901      	subs	r1, #1
    d100:	0089      	lsls	r1, r1, #2
    d102:	3105      	adds	r1, #5
    d104:	489d      	ldr	r0, [pc, #628]	; (d37c <DigitalSideLights+0x1160>)
    d106:	5c40      	ldrb	r0, [r0, r1]
    d108:	499d      	ldr	r1, [pc, #628]	; (d380 <DigitalSideLights+0x1164>)
    d10a:	54c8      	strb	r0, [r1, r3]
    d10c:	499c      	ldr	r1, [pc, #624]	; (d380 <DigitalSideLights+0x1164>)
    d10e:	5cc9      	ldrb	r1, [r1, r3]
    d110:	4b9a      	ldr	r3, [pc, #616]	; (d37c <DigitalSideLights+0x1160>)
    d112:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = L_SPI_send_buf[((i-1)*4)+6];
    d114:	230e      	movs	r3, #14
    d116:	2210      	movs	r2, #16
    d118:	4694      	mov	ip, r2
    d11a:	44bc      	add	ip, r7
    d11c:	4463      	add	r3, ip
    d11e:	881b      	ldrh	r3, [r3, #0]
    d120:	009b      	lsls	r3, r3, #2
    d122:	1d9a      	adds	r2, r3, #6
    d124:	230e      	movs	r3, #14
    d126:	2110      	movs	r1, #16
    d128:	468c      	mov	ip, r1
    d12a:	44bc      	add	ip, r7
    d12c:	4463      	add	r3, ip
    d12e:	881b      	ldrh	r3, [r3, #0]
    d130:	009b      	lsls	r3, r3, #2
    d132:	3306      	adds	r3, #6
    d134:	210e      	movs	r1, #14
    d136:	2010      	movs	r0, #16
    d138:	4684      	mov	ip, r0
    d13a:	44bc      	add	ip, r7
    d13c:	4461      	add	r1, ip
    d13e:	8809      	ldrh	r1, [r1, #0]
    d140:	3901      	subs	r1, #1
    d142:	0089      	lsls	r1, r1, #2
    d144:	3106      	adds	r1, #6
    d146:	488d      	ldr	r0, [pc, #564]	; (d37c <DigitalSideLights+0x1160>)
    d148:	5c40      	ldrb	r0, [r0, r1]
    d14a:	498d      	ldr	r1, [pc, #564]	; (d380 <DigitalSideLights+0x1164>)
    d14c:	54c8      	strb	r0, [r1, r3]
    d14e:	498c      	ldr	r1, [pc, #560]	; (d380 <DigitalSideLights+0x1164>)
    d150:	5cc9      	ldrb	r1, [r1, r3]
    d152:	4b8a      	ldr	r3, [pc, #552]	; (d37c <DigitalSideLights+0x1160>)
    d154:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = L_SPI_send_buf[((i-1)*4)+7];
    d156:	230e      	movs	r3, #14
    d158:	2210      	movs	r2, #16
    d15a:	4694      	mov	ip, r2
    d15c:	44bc      	add	ip, r7
    d15e:	4463      	add	r3, ip
    d160:	881b      	ldrh	r3, [r3, #0]
    d162:	009b      	lsls	r3, r3, #2
    d164:	1dda      	adds	r2, r3, #7
    d166:	230e      	movs	r3, #14
    d168:	2110      	movs	r1, #16
    d16a:	468c      	mov	ip, r1
    d16c:	44bc      	add	ip, r7
    d16e:	4463      	add	r3, ip
    d170:	881b      	ldrh	r3, [r3, #0]
    d172:	009b      	lsls	r3, r3, #2
    d174:	3307      	adds	r3, #7
    d176:	210e      	movs	r1, #14
    d178:	2010      	movs	r0, #16
    d17a:	4684      	mov	ip, r0
    d17c:	44bc      	add	ip, r7
    d17e:	4461      	add	r1, ip
    d180:	8809      	ldrh	r1, [r1, #0]
    d182:	3901      	subs	r1, #1
    d184:	0089      	lsls	r1, r1, #2
    d186:	3107      	adds	r1, #7
    d188:	487c      	ldr	r0, [pc, #496]	; (d37c <DigitalSideLights+0x1160>)
    d18a:	5c40      	ldrb	r0, [r0, r1]
    d18c:	497c      	ldr	r1, [pc, #496]	; (d380 <DigitalSideLights+0x1164>)
    d18e:	54c8      	strb	r0, [r1, r3]
    d190:	497b      	ldr	r1, [pc, #492]	; (d380 <DigitalSideLights+0x1164>)
    d192:	5cc9      	ldrb	r1, [r1, r3]
    d194:	4b79      	ldr	r3, [pc, #484]	; (d37c <DigitalSideLights+0x1160>)
    d196:	5499      	strb	r1, [r3, r2]
					for(uint16_t i = led_num-1; i > 0; i--)
    d198:	230e      	movs	r3, #14
    d19a:	2210      	movs	r2, #16
    d19c:	4694      	mov	ip, r2
    d19e:	44bc      	add	ip, r7
    d1a0:	4463      	add	r3, ip
    d1a2:	881a      	ldrh	r2, [r3, #0]
    d1a4:	230e      	movs	r3, #14
    d1a6:	2110      	movs	r1, #16
    d1a8:	468c      	mov	ip, r1
    d1aa:	44bc      	add	ip, r7
    d1ac:	4463      	add	r3, ip
    d1ae:	3a01      	subs	r2, #1
    d1b0:	801a      	strh	r2, [r3, #0]
    d1b2:	230e      	movs	r3, #14
    d1b4:	2210      	movs	r2, #16
    d1b6:	4694      	mov	ip, r2
    d1b8:	44bc      	add	ip, r7
    d1ba:	4463      	add	r3, ip
    d1bc:	881b      	ldrh	r3, [r3, #0]
    d1be:	2b00      	cmp	r3, #0
    d1c0:	d000      	beq.n	d1c4 <DigitalSideLights+0xfa8>
    d1c2:	e767      	b.n	d094 <DigitalSideLights+0xe78>
					}

					int x = (heading/360.0)*764*4;
    d1c4:	4b6f      	ldr	r3, [pc, #444]	; (d384 <DigitalSideLights+0x1168>)
    d1c6:	681a      	ldr	r2, [r3, #0]
    d1c8:	4b6f      	ldr	r3, [pc, #444]	; (d388 <DigitalSideLights+0x116c>)
    d1ca:	1c10      	adds	r0, r2, #0
    d1cc:	4798      	blx	r3
    d1ce:	4c6f      	ldr	r4, [pc, #444]	; (d38c <DigitalSideLights+0x1170>)
    d1d0:	2200      	movs	r2, #0
    d1d2:	4b6f      	ldr	r3, [pc, #444]	; (d390 <DigitalSideLights+0x1174>)
    d1d4:	47a0      	blx	r4
    d1d6:	0003      	movs	r3, r0
    d1d8:	000c      	movs	r4, r1
    d1da:	0018      	movs	r0, r3
    d1dc:	0021      	movs	r1, r4
    d1de:	4c6d      	ldr	r4, [pc, #436]	; (d394 <DigitalSideLights+0x1178>)
    d1e0:	2200      	movs	r2, #0
    d1e2:	4b6d      	ldr	r3, [pc, #436]	; (d398 <DigitalSideLights+0x117c>)
    d1e4:	47a0      	blx	r4
    d1e6:	0003      	movs	r3, r0
    d1e8:	000c      	movs	r4, r1
    d1ea:	0018      	movs	r0, r3
    d1ec:	0021      	movs	r1, r4
    d1ee:	4c69      	ldr	r4, [pc, #420]	; (d394 <DigitalSideLights+0x1178>)
    d1f0:	2200      	movs	r2, #0
    d1f2:	4b6a      	ldr	r3, [pc, #424]	; (d39c <DigitalSideLights+0x1180>)
    d1f4:	47a0      	blx	r4
    d1f6:	0003      	movs	r3, r0
    d1f8:	000c      	movs	r4, r1
    d1fa:	0019      	movs	r1, r3
    d1fc:	0022      	movs	r2, r4
    d1fe:	4b68      	ldr	r3, [pc, #416]	; (d3a0 <DigitalSideLights+0x1184>)
    d200:	0008      	movs	r0, r1
    d202:	0011      	movs	r1, r2
    d204:	4798      	blx	r3
    d206:	0003      	movs	r3, r0
    d208:	61bb      	str	r3, [r7, #24]
					while(x<0)
    d20a:	e005      	b.n	d218 <DigitalSideLights+0xffc>
						x += (764);
    d20c:	69bb      	ldr	r3, [r7, #24]
    d20e:	22bf      	movs	r2, #191	; 0xbf
    d210:	0092      	lsls	r2, r2, #2
    d212:	4694      	mov	ip, r2
    d214:	4463      	add	r3, ip
    d216:	61bb      	str	r3, [r7, #24]
					while(x<0)
    d218:	69bb      	ldr	r3, [r7, #24]
    d21a:	2b00      	cmp	r3, #0
    d21c:	dbf6      	blt.n	d20c <DigitalSideLights+0xff0>
					while(x>(764))
    d21e:	e004      	b.n	d22a <DigitalSideLights+0x100e>
						x -= (764);
    d220:	69bb      	ldr	r3, [r7, #24]
    d222:	4a60      	ldr	r2, [pc, #384]	; (d3a4 <DigitalSideLights+0x1188>)
    d224:	4694      	mov	ip, r2
    d226:	4463      	add	r3, ip
    d228:	61bb      	str	r3, [r7, #24]
					while(x>(764))
    d22a:	69ba      	ldr	r2, [r7, #24]
    d22c:	23bf      	movs	r3, #191	; 0xbf
    d22e:	009b      	lsls	r3, r3, #2
    d230:	429a      	cmp	r2, r3
    d232:	dcf5      	bgt.n	d220 <DigitalSideLights+0x1004>

					L_SPI_send_buf[4] = R_SPI_send_buf[4] = (0b11100000 | brightness);
    d234:	220a      	movs	r2, #10
    d236:	2320      	movs	r3, #32
    d238:	425b      	negs	r3, r3
    d23a:	4313      	orrs	r3, r2
    d23c:	b2da      	uxtb	r2, r3
    d23e:	4b50      	ldr	r3, [pc, #320]	; (d380 <DigitalSideLights+0x1164>)
    d240:	711a      	strb	r2, [r3, #4]
    d242:	4b4f      	ldr	r3, [pc, #316]	; (d380 <DigitalSideLights+0x1164>)
    d244:	791a      	ldrb	r2, [r3, #4]
    d246:	4b4d      	ldr	r3, [pc, #308]	; (d37c <DigitalSideLights+0x1160>)
    d248:	711a      	strb	r2, [r3, #4]
					if(x/255 == 0){
    d24a:	69bb      	ldr	r3, [r7, #24]
    d24c:	33fe      	adds	r3, #254	; 0xfe
    d24e:	001a      	movs	r2, r3
    d250:	23fe      	movs	r3, #254	; 0xfe
    d252:	005b      	lsls	r3, r3, #1
    d254:	429a      	cmp	r2, r3
    d256:	d823      	bhi.n	d2a0 <DigitalSideLights+0x1084>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 0;
    d258:	4b49      	ldr	r3, [pc, #292]	; (d380 <DigitalSideLights+0x1164>)
    d25a:	2200      	movs	r2, #0
    d25c:	715a      	strb	r2, [r3, #5]
    d25e:	4b48      	ldr	r3, [pc, #288]	; (d380 <DigitalSideLights+0x1164>)
    d260:	795a      	ldrb	r2, [r3, #5]
    d262:	4b46      	ldr	r3, [pc, #280]	; (d37c <DigitalSideLights+0x1160>)
    d264:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = 255-(x%255);
    d266:	69ba      	ldr	r2, [r7, #24]
    d268:	4b4f      	ldr	r3, [pc, #316]	; (d3a8 <DigitalSideLights+0x118c>)
    d26a:	21ff      	movs	r1, #255	; 0xff
    d26c:	0010      	movs	r0, r2
    d26e:	4798      	blx	r3
    d270:	000b      	movs	r3, r1
    d272:	b2db      	uxtb	r3, r3
    d274:	43db      	mvns	r3, r3
    d276:	b2da      	uxtb	r2, r3
    d278:	4b41      	ldr	r3, [pc, #260]	; (d380 <DigitalSideLights+0x1164>)
    d27a:	719a      	strb	r2, [r3, #6]
    d27c:	4b40      	ldr	r3, [pc, #256]	; (d380 <DigitalSideLights+0x1164>)
    d27e:	799a      	ldrb	r2, [r3, #6]
    d280:	4b3e      	ldr	r3, [pc, #248]	; (d37c <DigitalSideLights+0x1160>)
    d282:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = (x%255);
    d284:	69ba      	ldr	r2, [r7, #24]
    d286:	4b48      	ldr	r3, [pc, #288]	; (d3a8 <DigitalSideLights+0x118c>)
    d288:	21ff      	movs	r1, #255	; 0xff
    d28a:	0010      	movs	r0, r2
    d28c:	4798      	blx	r3
    d28e:	000b      	movs	r3, r1
    d290:	b2da      	uxtb	r2, r3
    d292:	4b3b      	ldr	r3, [pc, #236]	; (d380 <DigitalSideLights+0x1164>)
    d294:	71da      	strb	r2, [r3, #7]
    d296:	4b3a      	ldr	r3, [pc, #232]	; (d380 <DigitalSideLights+0x1164>)
    d298:	79da      	ldrb	r2, [r3, #7]
    d29a:	4b38      	ldr	r3, [pc, #224]	; (d37c <DigitalSideLights+0x1160>)
    d29c:	71da      	strb	r2, [r3, #7]
						} else if(x/255 == 2){
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
					}
					break;
    d29e:	e052      	b.n	d346 <DigitalSideLights+0x112a>
						} else if(x/255 == 1){
    d2a0:	69bb      	ldr	r3, [r7, #24]
    d2a2:	3bff      	subs	r3, #255	; 0xff
    d2a4:	2bfe      	cmp	r3, #254	; 0xfe
    d2a6:	d823      	bhi.n	d2f0 <DigitalSideLights+0x10d4>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = (x%255);
    d2a8:	69ba      	ldr	r2, [r7, #24]
    d2aa:	4b3f      	ldr	r3, [pc, #252]	; (d3a8 <DigitalSideLights+0x118c>)
    d2ac:	21ff      	movs	r1, #255	; 0xff
    d2ae:	0010      	movs	r0, r2
    d2b0:	4798      	blx	r3
    d2b2:	000b      	movs	r3, r1
    d2b4:	b2da      	uxtb	r2, r3
    d2b6:	4b32      	ldr	r3, [pc, #200]	; (d380 <DigitalSideLights+0x1164>)
    d2b8:	715a      	strb	r2, [r3, #5]
    d2ba:	4b31      	ldr	r3, [pc, #196]	; (d380 <DigitalSideLights+0x1164>)
    d2bc:	795a      	ldrb	r2, [r3, #5]
    d2be:	4b2f      	ldr	r3, [pc, #188]	; (d37c <DigitalSideLights+0x1160>)
    d2c0:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = 0;
    d2c2:	4b2f      	ldr	r3, [pc, #188]	; (d380 <DigitalSideLights+0x1164>)
    d2c4:	2200      	movs	r2, #0
    d2c6:	719a      	strb	r2, [r3, #6]
    d2c8:	4b2d      	ldr	r3, [pc, #180]	; (d380 <DigitalSideLights+0x1164>)
    d2ca:	799a      	ldrb	r2, [r3, #6]
    d2cc:	4b2b      	ldr	r3, [pc, #172]	; (d37c <DigitalSideLights+0x1160>)
    d2ce:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 255-(x%255);
    d2d0:	69ba      	ldr	r2, [r7, #24]
    d2d2:	4b35      	ldr	r3, [pc, #212]	; (d3a8 <DigitalSideLights+0x118c>)
    d2d4:	21ff      	movs	r1, #255	; 0xff
    d2d6:	0010      	movs	r0, r2
    d2d8:	4798      	blx	r3
    d2da:	000b      	movs	r3, r1
    d2dc:	b2db      	uxtb	r3, r3
    d2de:	43db      	mvns	r3, r3
    d2e0:	b2da      	uxtb	r2, r3
    d2e2:	4b27      	ldr	r3, [pc, #156]	; (d380 <DigitalSideLights+0x1164>)
    d2e4:	71da      	strb	r2, [r3, #7]
    d2e6:	4b26      	ldr	r3, [pc, #152]	; (d380 <DigitalSideLights+0x1164>)
    d2e8:	79da      	ldrb	r2, [r3, #7]
    d2ea:	4b24      	ldr	r3, [pc, #144]	; (d37c <DigitalSideLights+0x1160>)
    d2ec:	71da      	strb	r2, [r3, #7]
					break;
    d2ee:	e02a      	b.n	d346 <DigitalSideLights+0x112a>
						} else if(x/255 == 2){
    d2f0:	69bb      	ldr	r3, [r7, #24]
    d2f2:	3bff      	subs	r3, #255	; 0xff
    d2f4:	3bff      	subs	r3, #255	; 0xff
    d2f6:	2bfe      	cmp	r3, #254	; 0xfe
    d2f8:	d825      	bhi.n	d346 <DigitalSideLights+0x112a>
						L_SPI_send_buf[5] = R_SPI_send_buf[5] = 255-(x%255);
    d2fa:	69ba      	ldr	r2, [r7, #24]
    d2fc:	4b2a      	ldr	r3, [pc, #168]	; (d3a8 <DigitalSideLights+0x118c>)
    d2fe:	21ff      	movs	r1, #255	; 0xff
    d300:	0010      	movs	r0, r2
    d302:	4798      	blx	r3
    d304:	000b      	movs	r3, r1
    d306:	b2db      	uxtb	r3, r3
    d308:	43db      	mvns	r3, r3
    d30a:	b2da      	uxtb	r2, r3
    d30c:	4b1c      	ldr	r3, [pc, #112]	; (d380 <DigitalSideLights+0x1164>)
    d30e:	715a      	strb	r2, [r3, #5]
    d310:	4b1b      	ldr	r3, [pc, #108]	; (d380 <DigitalSideLights+0x1164>)
    d312:	795a      	ldrb	r2, [r3, #5]
    d314:	4b19      	ldr	r3, [pc, #100]	; (d37c <DigitalSideLights+0x1160>)
    d316:	715a      	strb	r2, [r3, #5]
						L_SPI_send_buf[6] = R_SPI_send_buf[6] = (x%255);
    d318:	69ba      	ldr	r2, [r7, #24]
    d31a:	4b23      	ldr	r3, [pc, #140]	; (d3a8 <DigitalSideLights+0x118c>)
    d31c:	21ff      	movs	r1, #255	; 0xff
    d31e:	0010      	movs	r0, r2
    d320:	4798      	blx	r3
    d322:	000b      	movs	r3, r1
    d324:	b2da      	uxtb	r2, r3
    d326:	4b16      	ldr	r3, [pc, #88]	; (d380 <DigitalSideLights+0x1164>)
    d328:	719a      	strb	r2, [r3, #6]
    d32a:	4b15      	ldr	r3, [pc, #84]	; (d380 <DigitalSideLights+0x1164>)
    d32c:	799a      	ldrb	r2, [r3, #6]
    d32e:	4b13      	ldr	r3, [pc, #76]	; (d37c <DigitalSideLights+0x1160>)
    d330:	719a      	strb	r2, [r3, #6]
						L_SPI_send_buf[7] = R_SPI_send_buf[7] = 0;
    d332:	4b13      	ldr	r3, [pc, #76]	; (d380 <DigitalSideLights+0x1164>)
    d334:	2200      	movs	r2, #0
    d336:	71da      	strb	r2, [r3, #7]
    d338:	4b11      	ldr	r3, [pc, #68]	; (d380 <DigitalSideLights+0x1164>)
    d33a:	79da      	ldrb	r2, [r3, #7]
    d33c:	4b0f      	ldr	r3, [pc, #60]	; (d37c <DigitalSideLights+0x1160>)
    d33e:	71da      	strb	r2, [r3, #7]
					break;
    d340:	e001      	b.n	d346 <DigitalSideLights+0x112a>
					break;
    d342:	46c0      	nop			; (mov r8, r8)
    d344:	e000      	b.n	d348 <DigitalSideLights+0x112c>
					break;
    d346:	46c0      	nop			; (mov r8, r8)
				}
			}
		
			L_APA_write(led_num);
    d348:	4b18      	ldr	r3, [pc, #96]	; (d3ac <DigitalSideLights+0x1190>)
    d34a:	781b      	ldrb	r3, [r3, #0]
    d34c:	b29b      	uxth	r3, r3
    d34e:	0018      	movs	r0, r3
    d350:	4b17      	ldr	r3, [pc, #92]	; (d3b0 <DigitalSideLights+0x1194>)
    d352:	4798      	blx	r3
			R_APA_write(led_num);
    d354:	4b15      	ldr	r3, [pc, #84]	; (d3ac <DigitalSideLights+0x1190>)
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	b29b      	uxth	r3, r3
    d35a:	0018      	movs	r0, r3
    d35c:	4b15      	ldr	r3, [pc, #84]	; (d3b4 <DigitalSideLights+0x1198>)
    d35e:	4798      	blx	r3

			DIGITAL_OFF = false;
    d360:	4b15      	ldr	r3, [pc, #84]	; (d3b8 <DigitalSideLights+0x119c>)
    d362:	2200      	movs	r2, #0
    d364:	701a      	strb	r2, [r3, #0]
		}
		digital_refresh_time = millis();
    d366:	4b15      	ldr	r3, [pc, #84]	; (d3bc <DigitalSideLights+0x11a0>)
    d368:	4798      	blx	r3
    d36a:	0002      	movs	r2, r0
    d36c:	4b14      	ldr	r3, [pc, #80]	; (d3c0 <DigitalSideLights+0x11a4>)
    d36e:	601a      	str	r2, [r3, #0]
	}
}
    d370:	46c0      	nop			; (mov r8, r8)
    d372:	46bd      	mov	sp, r7
    d374:	b00e      	add	sp, #56	; 0x38
    d376:	bc04      	pop	{r2}
    d378:	4690      	mov	r8, r2
    d37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d37c:	20001420 	.word	0x20001420
    d380:	20000578 	.word	0x20000578
    d384:	20000350 	.word	0x20000350
    d388:	0001b1a1 	.word	0x0001b1a1
    d38c:	00019cb1 	.word	0x00019cb1
    d390:	40768000 	.word	0x40768000
    d394:	0001a519 	.word	0x0001a519
    d398:	4087e000 	.word	0x4087e000
    d39c:	40100000 	.word	0x40100000
    d3a0:	0001b045 	.word	0x0001b045
    d3a4:	fffffd04 	.word	0xfffffd04
    d3a8:	000186ed 	.word	0x000186ed
    d3ac:	200000d8 	.word	0x200000d8
    d3b0:	0000a175 	.word	0x0000a175
    d3b4:	0000a1e5 	.word	0x0000a1e5
    d3b8:	20000380 	.word	0x20000380
    d3bc:	00009f65 	.word	0x00009f65
    d3c0:	20000384 	.word	0x20000384

0000d3c4 <BrakeLight>:

void BrakeLight(){
    d3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3c6:	b087      	sub	sp, #28
    d3c8:	af00      	add	r7, sp, #0
	if((HEADLIGHTS && lightControlHead() && LIGHTS_ON) | BRAKE_ALWAYS_ON){
    d3ca:	4bd3      	ldr	r3, [pc, #844]	; (d718 <BrakeLight+0x354>)
    d3cc:	781b      	ldrb	r3, [r3, #0]
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d009      	beq.n	d3e6 <BrakeLight+0x22>
    d3d2:	4bd2      	ldr	r3, [pc, #840]	; (d71c <BrakeLight+0x358>)
    d3d4:	4798      	blx	r3
    d3d6:	1e03      	subs	r3, r0, #0
    d3d8:	d005      	beq.n	d3e6 <BrakeLight+0x22>
    d3da:	4bd1      	ldr	r3, [pc, #836]	; (d720 <BrakeLight+0x35c>)
    d3dc:	781b      	ldrb	r3, [r3, #0]
    d3de:	2b00      	cmp	r3, #0
    d3e0:	d001      	beq.n	d3e6 <BrakeLight+0x22>
    d3e2:	2301      	movs	r3, #1
    d3e4:	e000      	b.n	d3e8 <BrakeLight+0x24>
    d3e6:	2300      	movs	r3, #0
    d3e8:	4ace      	ldr	r2, [pc, #824]	; (d724 <BrakeLight+0x360>)
    d3ea:	7812      	ldrb	r2, [r2, #0]
    d3ec:	4313      	orrs	r3, r2
    d3ee:	d101      	bne.n	d3f4 <BrakeLight+0x30>
    d3f0:	f000 fc3c 	bl	dc6c <BrakeLight+0x8a8>
		float temp_y = remote_y;
    d3f4:	4bcc      	ldr	r3, [pc, #816]	; (d728 <BrakeLight+0x364>)
    d3f6:	781a      	ldrb	r2, [r3, #0]
    d3f8:	4bcc      	ldr	r3, [pc, #816]	; (d72c <BrakeLight+0x368>)
    d3fa:	0010      	movs	r0, r2
    d3fc:	4798      	blx	r3
    d3fe:	1c03      	adds	r3, r0, #0
    d400:	617b      	str	r3, [r7, #20]
		float brake_temp;

		if(temp_y < 128-(128*((float)deadzone/100.0))){
    d402:	4bcb      	ldr	r3, [pc, #812]	; (d730 <BrakeLight+0x36c>)
    d404:	6978      	ldr	r0, [r7, #20]
    d406:	4798      	blx	r3
    d408:	0005      	movs	r5, r0
    d40a:	000e      	movs	r6, r1
    d40c:	4bc9      	ldr	r3, [pc, #804]	; (d734 <BrakeLight+0x370>)
    d40e:	781a      	ldrb	r2, [r3, #0]
    d410:	4bc6      	ldr	r3, [pc, #792]	; (d72c <BrakeLight+0x368>)
    d412:	0010      	movs	r0, r2
    d414:	4798      	blx	r3
    d416:	1c02      	adds	r2, r0, #0
    d418:	4bc5      	ldr	r3, [pc, #788]	; (d730 <BrakeLight+0x36c>)
    d41a:	1c10      	adds	r0, r2, #0
    d41c:	4798      	blx	r3
    d41e:	4cc6      	ldr	r4, [pc, #792]	; (d738 <BrakeLight+0x374>)
    d420:	2200      	movs	r2, #0
    d422:	4bc6      	ldr	r3, [pc, #792]	; (d73c <BrakeLight+0x378>)
    d424:	47a0      	blx	r4
    d426:	0003      	movs	r3, r0
    d428:	000c      	movs	r4, r1
    d42a:	0018      	movs	r0, r3
    d42c:	0021      	movs	r1, r4
    d42e:	4cc4      	ldr	r4, [pc, #784]	; (d740 <BrakeLight+0x37c>)
    d430:	2200      	movs	r2, #0
    d432:	4bc4      	ldr	r3, [pc, #784]	; (d744 <BrakeLight+0x380>)
    d434:	47a0      	blx	r4
    d436:	0003      	movs	r3, r0
    d438:	000c      	movs	r4, r1
    d43a:	001a      	movs	r2, r3
    d43c:	0023      	movs	r3, r4
    d43e:	4cc2      	ldr	r4, [pc, #776]	; (d748 <BrakeLight+0x384>)
    d440:	2000      	movs	r0, #0
    d442:	49c0      	ldr	r1, [pc, #768]	; (d744 <BrakeLight+0x380>)
    d444:	47a0      	blx	r4
    d446:	0003      	movs	r3, r0
    d448:	000c      	movs	r4, r1
    d44a:	001a      	movs	r2, r3
    d44c:	0023      	movs	r3, r4
    d44e:	4cbf      	ldr	r4, [pc, #764]	; (d74c <BrakeLight+0x388>)
    d450:	0028      	movs	r0, r5
    d452:	0031      	movs	r1, r6
    d454:	47a0      	blx	r4
    d456:	1e03      	subs	r3, r0, #0
    d458:	d101      	bne.n	d45e <BrakeLight+0x9a>
    d45a:	f000 fc01 	bl	dc60 <BrakeLight+0x89c>
			//setRed(brake_offset);
			switch(brake_light_mode){
    d45e:	4bbc      	ldr	r3, [pc, #752]	; (d750 <BrakeLight+0x38c>)
    d460:	781b      	ldrb	r3, [r3, #0]
    d462:	2b05      	cmp	r3, #5
    d464:	d901      	bls.n	d46a <BrakeLight+0xa6>
    d466:	f000 fc05 	bl	dc74 <BrakeLight+0x8b0>
    d46a:	009a      	lsls	r2, r3, #2
    d46c:	4bb9      	ldr	r3, [pc, #740]	; (d754 <BrakeLight+0x390>)
    d46e:	18d3      	adds	r3, r2, r3
    d470:	681b      	ldr	r3, [r3, #0]
    d472:	469f      	mov	pc, r3
				case BRAKE_FADE:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d474:	4bb8      	ldr	r3, [pc, #736]	; (d758 <BrakeLight+0x394>)
    d476:	881b      	ldrh	r3, [r3, #0]
    d478:	001a      	movs	r2, r3
    d47a:	4bb8      	ldr	r3, [pc, #736]	; (d75c <BrakeLight+0x398>)
    d47c:	1a9a      	subs	r2, r3, r2
    d47e:	4bb8      	ldr	r3, [pc, #736]	; (d760 <BrakeLight+0x39c>)
    d480:	0010      	movs	r0, r2
    d482:	4798      	blx	r3
    d484:	0005      	movs	r5, r0
    d486:	000e      	movs	r6, r1
    d488:	4baa      	ldr	r3, [pc, #680]	; (d734 <BrakeLight+0x370>)
    d48a:	781a      	ldrb	r2, [r3, #0]
    d48c:	4ba7      	ldr	r3, [pc, #668]	; (d72c <BrakeLight+0x368>)
    d48e:	0010      	movs	r0, r2
    d490:	4798      	blx	r3
    d492:	1c02      	adds	r2, r0, #0
    d494:	4ba6      	ldr	r3, [pc, #664]	; (d730 <BrakeLight+0x36c>)
    d496:	1c10      	adds	r0, r2, #0
    d498:	4798      	blx	r3
    d49a:	4ca7      	ldr	r4, [pc, #668]	; (d738 <BrakeLight+0x374>)
    d49c:	2200      	movs	r2, #0
    d49e:	4ba7      	ldr	r3, [pc, #668]	; (d73c <BrakeLight+0x378>)
    d4a0:	47a0      	blx	r4
    d4a2:	0003      	movs	r3, r0
    d4a4:	000c      	movs	r4, r1
    d4a6:	0018      	movs	r0, r3
    d4a8:	0021      	movs	r1, r4
    d4aa:	4ca5      	ldr	r4, [pc, #660]	; (d740 <BrakeLight+0x37c>)
    d4ac:	2200      	movs	r2, #0
    d4ae:	4ba5      	ldr	r3, [pc, #660]	; (d744 <BrakeLight+0x380>)
    d4b0:	47a0      	blx	r4
    d4b2:	0003      	movs	r3, r0
    d4b4:	000c      	movs	r4, r1
    d4b6:	001a      	movs	r2, r3
    d4b8:	0023      	movs	r3, r4
    d4ba:	4ca3      	ldr	r4, [pc, #652]	; (d748 <BrakeLight+0x384>)
    d4bc:	2000      	movs	r0, #0
    d4be:	49a1      	ldr	r1, [pc, #644]	; (d744 <BrakeLight+0x380>)
    d4c0:	47a0      	blx	r4
    d4c2:	0003      	movs	r3, r0
    d4c4:	000c      	movs	r4, r1
    d4c6:	001a      	movs	r2, r3
    d4c8:	0023      	movs	r3, r4
    d4ca:	4c9b      	ldr	r4, [pc, #620]	; (d738 <BrakeLight+0x374>)
    d4cc:	0028      	movs	r0, r5
    d4ce:	0031      	movs	r1, r6
    d4d0:	47a0      	blx	r4
    d4d2:	0003      	movs	r3, r0
    d4d4:	000c      	movs	r4, r1
    d4d6:	001d      	movs	r5, r3
    d4d8:	0026      	movs	r6, r4
    d4da:	4b96      	ldr	r3, [pc, #600]	; (d734 <BrakeLight+0x370>)
    d4dc:	781a      	ldrb	r2, [r3, #0]
    d4de:	4b93      	ldr	r3, [pc, #588]	; (d72c <BrakeLight+0x368>)
    d4e0:	0010      	movs	r0, r2
    d4e2:	4798      	blx	r3
    d4e4:	1c02      	adds	r2, r0, #0
    d4e6:	4b92      	ldr	r3, [pc, #584]	; (d730 <BrakeLight+0x36c>)
    d4e8:	1c10      	adds	r0, r2, #0
    d4ea:	4798      	blx	r3
    d4ec:	4c92      	ldr	r4, [pc, #584]	; (d738 <BrakeLight+0x374>)
    d4ee:	2200      	movs	r2, #0
    d4f0:	4b92      	ldr	r3, [pc, #584]	; (d73c <BrakeLight+0x378>)
    d4f2:	47a0      	blx	r4
    d4f4:	0003      	movs	r3, r0
    d4f6:	000c      	movs	r4, r1
    d4f8:	0018      	movs	r0, r3
    d4fa:	0021      	movs	r1, r4
    d4fc:	4c90      	ldr	r4, [pc, #576]	; (d740 <BrakeLight+0x37c>)
    d4fe:	2200      	movs	r2, #0
    d500:	4b90      	ldr	r3, [pc, #576]	; (d744 <BrakeLight+0x380>)
    d502:	47a0      	blx	r4
    d504:	0003      	movs	r3, r0
    d506:	000c      	movs	r4, r1
    d508:	001a      	movs	r2, r3
    d50a:	0023      	movs	r3, r4
    d50c:	4c8e      	ldr	r4, [pc, #568]	; (d748 <BrakeLight+0x384>)
    d50e:	2000      	movs	r0, #0
    d510:	498c      	ldr	r1, [pc, #560]	; (d744 <BrakeLight+0x380>)
    d512:	47a0      	blx	r4
    d514:	0003      	movs	r3, r0
    d516:	000c      	movs	r4, r1
    d518:	60bb      	str	r3, [r7, #8]
    d51a:	60fc      	str	r4, [r7, #12]
    d51c:	4b84      	ldr	r3, [pc, #528]	; (d730 <BrakeLight+0x36c>)
    d51e:	6978      	ldr	r0, [r7, #20]
    d520:	4798      	blx	r3
    d522:	0002      	movs	r2, r0
    d524:	000b      	movs	r3, r1
    d526:	4c88      	ldr	r4, [pc, #544]	; (d748 <BrakeLight+0x384>)
    d528:	68b8      	ldr	r0, [r7, #8]
    d52a:	68f9      	ldr	r1, [r7, #12]
    d52c:	47a0      	blx	r4
    d52e:	0003      	movs	r3, r0
    d530:	000c      	movs	r4, r1
    d532:	001a      	movs	r2, r3
    d534:	0023      	movs	r3, r4
    d536:	4c82      	ldr	r4, [pc, #520]	; (d740 <BrakeLight+0x37c>)
    d538:	0028      	movs	r0, r5
    d53a:	0031      	movs	r1, r6
    d53c:	47a0      	blx	r4
    d53e:	0003      	movs	r3, r0
    d540:	000c      	movs	r4, r1
    d542:	001d      	movs	r5, r3
    d544:	0026      	movs	r6, r4
    d546:	4b84      	ldr	r3, [pc, #528]	; (d758 <BrakeLight+0x394>)
    d548:	881b      	ldrh	r3, [r3, #0]
    d54a:	001a      	movs	r2, r3
    d54c:	4b84      	ldr	r3, [pc, #528]	; (d760 <BrakeLight+0x39c>)
    d54e:	0010      	movs	r0, r2
    d550:	4798      	blx	r3
    d552:	0002      	movs	r2, r0
    d554:	000b      	movs	r3, r1
    d556:	4c83      	ldr	r4, [pc, #524]	; (d764 <BrakeLight+0x3a0>)
    d558:	0028      	movs	r0, r5
    d55a:	0031      	movs	r1, r6
    d55c:	47a0      	blx	r4
    d55e:	0003      	movs	r3, r0
    d560:	000c      	movs	r4, r1
    d562:	0019      	movs	r1, r3
    d564:	0022      	movs	r2, r4
    d566:	4b80      	ldr	r3, [pc, #512]	; (d768 <BrakeLight+0x3a4>)
    d568:	0008      	movs	r0, r1
    d56a:	0011      	movs	r1, r2
    d56c:	4798      	blx	r3
    d56e:	1c03      	adds	r3, r0, #0
    d570:	613b      	str	r3, [r7, #16]
				setRed(brake_temp);
    d572:	4b7e      	ldr	r3, [pc, #504]	; (d76c <BrakeLight+0x3a8>)
    d574:	6938      	ldr	r0, [r7, #16]
    d576:	4798      	blx	r3
    d578:	0003      	movs	r3, r0
    d57a:	b29b      	uxth	r3, r3
    d57c:	0018      	movs	r0, r3
    d57e:	4b7c      	ldr	r3, [pc, #496]	; (d770 <BrakeLight+0x3ac>)
    d580:	4798      	blx	r3
				break;
    d582:	e377      	b.n	dc74 <BrakeLight+0x8b0>
				case BRAKE_BLINK:
				BlinkTail(0xFFFF, 7);
    d584:	4a7b      	ldr	r2, [pc, #492]	; (d774 <BrakeLight+0x3b0>)
    d586:	4b75      	ldr	r3, [pc, #468]	; (d75c <BrakeLight+0x398>)
    d588:	1c11      	adds	r1, r2, #0
    d58a:	0018      	movs	r0, r3
    d58c:	4b7a      	ldr	r3, [pc, #488]	; (d778 <BrakeLight+0x3b4>)
    d58e:	4798      	blx	r3
				break;
    d590:	e370      	b.n	dc74 <BrakeLight+0x8b0>
				case BRAKE_FADE_BLINK:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d592:	4b71      	ldr	r3, [pc, #452]	; (d758 <BrakeLight+0x394>)
    d594:	881b      	ldrh	r3, [r3, #0]
    d596:	001a      	movs	r2, r3
    d598:	4b70      	ldr	r3, [pc, #448]	; (d75c <BrakeLight+0x398>)
    d59a:	1a9a      	subs	r2, r3, r2
    d59c:	4b70      	ldr	r3, [pc, #448]	; (d760 <BrakeLight+0x39c>)
    d59e:	0010      	movs	r0, r2
    d5a0:	4798      	blx	r3
    d5a2:	0005      	movs	r5, r0
    d5a4:	000e      	movs	r6, r1
    d5a6:	4b63      	ldr	r3, [pc, #396]	; (d734 <BrakeLight+0x370>)
    d5a8:	781a      	ldrb	r2, [r3, #0]
    d5aa:	4b60      	ldr	r3, [pc, #384]	; (d72c <BrakeLight+0x368>)
    d5ac:	0010      	movs	r0, r2
    d5ae:	4798      	blx	r3
    d5b0:	1c02      	adds	r2, r0, #0
    d5b2:	4b5f      	ldr	r3, [pc, #380]	; (d730 <BrakeLight+0x36c>)
    d5b4:	1c10      	adds	r0, r2, #0
    d5b6:	4798      	blx	r3
    d5b8:	4c5f      	ldr	r4, [pc, #380]	; (d738 <BrakeLight+0x374>)
    d5ba:	2200      	movs	r2, #0
    d5bc:	4b5f      	ldr	r3, [pc, #380]	; (d73c <BrakeLight+0x378>)
    d5be:	47a0      	blx	r4
    d5c0:	0003      	movs	r3, r0
    d5c2:	000c      	movs	r4, r1
    d5c4:	0018      	movs	r0, r3
    d5c6:	0021      	movs	r1, r4
    d5c8:	4c5d      	ldr	r4, [pc, #372]	; (d740 <BrakeLight+0x37c>)
    d5ca:	2200      	movs	r2, #0
    d5cc:	4b5d      	ldr	r3, [pc, #372]	; (d744 <BrakeLight+0x380>)
    d5ce:	47a0      	blx	r4
    d5d0:	0003      	movs	r3, r0
    d5d2:	000c      	movs	r4, r1
    d5d4:	001a      	movs	r2, r3
    d5d6:	0023      	movs	r3, r4
    d5d8:	4c5b      	ldr	r4, [pc, #364]	; (d748 <BrakeLight+0x384>)
    d5da:	2000      	movs	r0, #0
    d5dc:	4959      	ldr	r1, [pc, #356]	; (d744 <BrakeLight+0x380>)
    d5de:	47a0      	blx	r4
    d5e0:	0003      	movs	r3, r0
    d5e2:	000c      	movs	r4, r1
    d5e4:	001a      	movs	r2, r3
    d5e6:	0023      	movs	r3, r4
    d5e8:	4c53      	ldr	r4, [pc, #332]	; (d738 <BrakeLight+0x374>)
    d5ea:	0028      	movs	r0, r5
    d5ec:	0031      	movs	r1, r6
    d5ee:	47a0      	blx	r4
    d5f0:	0003      	movs	r3, r0
    d5f2:	000c      	movs	r4, r1
    d5f4:	001d      	movs	r5, r3
    d5f6:	0026      	movs	r6, r4
    d5f8:	4b4e      	ldr	r3, [pc, #312]	; (d734 <BrakeLight+0x370>)
    d5fa:	781a      	ldrb	r2, [r3, #0]
    d5fc:	4b4b      	ldr	r3, [pc, #300]	; (d72c <BrakeLight+0x368>)
    d5fe:	0010      	movs	r0, r2
    d600:	4798      	blx	r3
    d602:	1c02      	adds	r2, r0, #0
    d604:	4b4a      	ldr	r3, [pc, #296]	; (d730 <BrakeLight+0x36c>)
    d606:	1c10      	adds	r0, r2, #0
    d608:	4798      	blx	r3
    d60a:	4c4b      	ldr	r4, [pc, #300]	; (d738 <BrakeLight+0x374>)
    d60c:	2200      	movs	r2, #0
    d60e:	4b4b      	ldr	r3, [pc, #300]	; (d73c <BrakeLight+0x378>)
    d610:	47a0      	blx	r4
    d612:	0003      	movs	r3, r0
    d614:	000c      	movs	r4, r1
    d616:	0018      	movs	r0, r3
    d618:	0021      	movs	r1, r4
    d61a:	4c49      	ldr	r4, [pc, #292]	; (d740 <BrakeLight+0x37c>)
    d61c:	2200      	movs	r2, #0
    d61e:	4b49      	ldr	r3, [pc, #292]	; (d744 <BrakeLight+0x380>)
    d620:	47a0      	blx	r4
    d622:	0003      	movs	r3, r0
    d624:	000c      	movs	r4, r1
    d626:	001a      	movs	r2, r3
    d628:	0023      	movs	r3, r4
    d62a:	4c47      	ldr	r4, [pc, #284]	; (d748 <BrakeLight+0x384>)
    d62c:	2000      	movs	r0, #0
    d62e:	4945      	ldr	r1, [pc, #276]	; (d744 <BrakeLight+0x380>)
    d630:	47a0      	blx	r4
    d632:	0003      	movs	r3, r0
    d634:	000c      	movs	r4, r1
    d636:	60bb      	str	r3, [r7, #8]
    d638:	60fc      	str	r4, [r7, #12]
    d63a:	4b3d      	ldr	r3, [pc, #244]	; (d730 <BrakeLight+0x36c>)
    d63c:	6978      	ldr	r0, [r7, #20]
    d63e:	4798      	blx	r3
    d640:	0002      	movs	r2, r0
    d642:	000b      	movs	r3, r1
    d644:	4c40      	ldr	r4, [pc, #256]	; (d748 <BrakeLight+0x384>)
    d646:	68b8      	ldr	r0, [r7, #8]
    d648:	68f9      	ldr	r1, [r7, #12]
    d64a:	47a0      	blx	r4
    d64c:	0003      	movs	r3, r0
    d64e:	000c      	movs	r4, r1
    d650:	001a      	movs	r2, r3
    d652:	0023      	movs	r3, r4
    d654:	4c3a      	ldr	r4, [pc, #232]	; (d740 <BrakeLight+0x37c>)
    d656:	0028      	movs	r0, r5
    d658:	0031      	movs	r1, r6
    d65a:	47a0      	blx	r4
    d65c:	0003      	movs	r3, r0
    d65e:	000c      	movs	r4, r1
    d660:	001d      	movs	r5, r3
    d662:	0026      	movs	r6, r4
    d664:	4b3c      	ldr	r3, [pc, #240]	; (d758 <BrakeLight+0x394>)
    d666:	881b      	ldrh	r3, [r3, #0]
    d668:	001a      	movs	r2, r3
    d66a:	4b3d      	ldr	r3, [pc, #244]	; (d760 <BrakeLight+0x39c>)
    d66c:	0010      	movs	r0, r2
    d66e:	4798      	blx	r3
    d670:	0002      	movs	r2, r0
    d672:	000b      	movs	r3, r1
    d674:	4c3b      	ldr	r4, [pc, #236]	; (d764 <BrakeLight+0x3a0>)
    d676:	0028      	movs	r0, r5
    d678:	0031      	movs	r1, r6
    d67a:	47a0      	blx	r4
    d67c:	0003      	movs	r3, r0
    d67e:	000c      	movs	r4, r1
    d680:	0019      	movs	r1, r3
    d682:	0022      	movs	r2, r4
    d684:	4b38      	ldr	r3, [pc, #224]	; (d768 <BrakeLight+0x3a4>)
    d686:	0008      	movs	r0, r1
    d688:	0011      	movs	r1, r2
    d68a:	4798      	blx	r3
    d68c:	1c03      	adds	r3, r0, #0
    d68e:	613b      	str	r3, [r7, #16]
				if(temp_y > (128-(128*((float)deadzone/100.0)))*0.1)
    d690:	4b27      	ldr	r3, [pc, #156]	; (d730 <BrakeLight+0x36c>)
    d692:	6978      	ldr	r0, [r7, #20]
    d694:	4798      	blx	r3
    d696:	0005      	movs	r5, r0
    d698:	000e      	movs	r6, r1
    d69a:	4b26      	ldr	r3, [pc, #152]	; (d734 <BrakeLight+0x370>)
    d69c:	781a      	ldrb	r2, [r3, #0]
    d69e:	4b23      	ldr	r3, [pc, #140]	; (d72c <BrakeLight+0x368>)
    d6a0:	0010      	movs	r0, r2
    d6a2:	4798      	blx	r3
    d6a4:	1c02      	adds	r2, r0, #0
    d6a6:	4b22      	ldr	r3, [pc, #136]	; (d730 <BrakeLight+0x36c>)
    d6a8:	1c10      	adds	r0, r2, #0
    d6aa:	4798      	blx	r3
    d6ac:	4c22      	ldr	r4, [pc, #136]	; (d738 <BrakeLight+0x374>)
    d6ae:	2200      	movs	r2, #0
    d6b0:	4b22      	ldr	r3, [pc, #136]	; (d73c <BrakeLight+0x378>)
    d6b2:	47a0      	blx	r4
    d6b4:	0003      	movs	r3, r0
    d6b6:	000c      	movs	r4, r1
    d6b8:	0018      	movs	r0, r3
    d6ba:	0021      	movs	r1, r4
    d6bc:	4c20      	ldr	r4, [pc, #128]	; (d740 <BrakeLight+0x37c>)
    d6be:	2200      	movs	r2, #0
    d6c0:	4b20      	ldr	r3, [pc, #128]	; (d744 <BrakeLight+0x380>)
    d6c2:	47a0      	blx	r4
    d6c4:	0003      	movs	r3, r0
    d6c6:	000c      	movs	r4, r1
    d6c8:	001a      	movs	r2, r3
    d6ca:	0023      	movs	r3, r4
    d6cc:	4c1e      	ldr	r4, [pc, #120]	; (d748 <BrakeLight+0x384>)
    d6ce:	2000      	movs	r0, #0
    d6d0:	491c      	ldr	r1, [pc, #112]	; (d744 <BrakeLight+0x380>)
    d6d2:	47a0      	blx	r4
    d6d4:	0003      	movs	r3, r0
    d6d6:	000c      	movs	r4, r1
    d6d8:	0018      	movs	r0, r3
    d6da:	0021      	movs	r1, r4
    d6dc:	4c18      	ldr	r4, [pc, #96]	; (d740 <BrakeLight+0x37c>)
    d6de:	4a27      	ldr	r2, [pc, #156]	; (d77c <BrakeLight+0x3b8>)
    d6e0:	4b27      	ldr	r3, [pc, #156]	; (d780 <BrakeLight+0x3bc>)
    d6e2:	47a0      	blx	r4
    d6e4:	0003      	movs	r3, r0
    d6e6:	000c      	movs	r4, r1
    d6e8:	001a      	movs	r2, r3
    d6ea:	0023      	movs	r3, r4
    d6ec:	4c25      	ldr	r4, [pc, #148]	; (d784 <BrakeLight+0x3c0>)
    d6ee:	0028      	movs	r0, r5
    d6f0:	0031      	movs	r1, r6
    d6f2:	47a0      	blx	r4
    d6f4:	1e03      	subs	r3, r0, #0
    d6f6:	d008      	beq.n	d70a <BrakeLight+0x346>
				setRed(brake_temp);
    d6f8:	4b1c      	ldr	r3, [pc, #112]	; (d76c <BrakeLight+0x3a8>)
    d6fa:	6938      	ldr	r0, [r7, #16]
    d6fc:	4798      	blx	r3
    d6fe:	0003      	movs	r3, r0
    d700:	b29b      	uxth	r3, r3
    d702:	0018      	movs	r0, r3
    d704:	4b1a      	ldr	r3, [pc, #104]	; (d770 <BrakeLight+0x3ac>)
    d706:	4798      	blx	r3
				else
				BlinkTail(0xFFFF, 7);
				break;
    d708:	e2b4      	b.n	dc74 <BrakeLight+0x8b0>
				BlinkTail(0xFFFF, 7);
    d70a:	4a1a      	ldr	r2, [pc, #104]	; (d774 <BrakeLight+0x3b0>)
    d70c:	4b13      	ldr	r3, [pc, #76]	; (d75c <BrakeLight+0x398>)
    d70e:	1c11      	adds	r1, r2, #0
    d710:	0018      	movs	r0, r3
    d712:	4b19      	ldr	r3, [pc, #100]	; (d778 <BrakeLight+0x3b4>)
    d714:	4798      	blx	r3
				break;
    d716:	e2ad      	b.n	dc74 <BrakeLight+0x8b0>
    d718:	2000036f 	.word	0x2000036f
    d71c:	0000dd0d 	.word	0x0000dd0d
    d720:	200000cd 	.word	0x200000cd
    d724:	200000cb 	.word	0x200000cb
    d728:	2000038e 	.word	0x2000038e
    d72c:	00019605 	.word	0x00019605
    d730:	0001b1a1 	.word	0x0001b1a1
    d734:	200000dc 	.word	0x200000dc
    d738:	00019cb1 	.word	0x00019cb1
    d73c:	40590000 	.word	0x40590000
    d740:	0001a519 	.word	0x0001a519
    d744:	40600000 	.word	0x40600000
    d748:	0001aa19 	.word	0x0001aa19
    d74c:	00018725 	.word	0x00018725
    d750:	2000036e 	.word	0x2000036e
    d754:	0001b950 	.word	0x0001b950
    d758:	200000c8 	.word	0x200000c8
    d75c:	0000ffff 	.word	0x0000ffff
    d760:	0001b0ad 	.word	0x0001b0ad
    d764:	00019691 	.word	0x00019691
    d768:	0001b245 	.word	0x0001b245
    d76c:	0001883d 	.word	0x0001883d
    d770:	0000a52d 	.word	0x0000a52d
    d774:	40e00000 	.word	0x40e00000
    d778:	0000a9a5 	.word	0x0000a9a5
    d77c:	9999999a 	.word	0x9999999a
    d780:	3fb99999 	.word	0x3fb99999
    d784:	0001874d 	.word	0x0001874d
				case BRAKE_BLINK_FADE:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d788:	4ba6      	ldr	r3, [pc, #664]	; (da24 <BrakeLight+0x660>)
    d78a:	881b      	ldrh	r3, [r3, #0]
    d78c:	001a      	movs	r2, r3
    d78e:	4ba6      	ldr	r3, [pc, #664]	; (da28 <BrakeLight+0x664>)
    d790:	1a9a      	subs	r2, r3, r2
    d792:	4ba6      	ldr	r3, [pc, #664]	; (da2c <BrakeLight+0x668>)
    d794:	0010      	movs	r0, r2
    d796:	4798      	blx	r3
    d798:	0005      	movs	r5, r0
    d79a:	000e      	movs	r6, r1
    d79c:	4ba4      	ldr	r3, [pc, #656]	; (da30 <BrakeLight+0x66c>)
    d79e:	781a      	ldrb	r2, [r3, #0]
    d7a0:	4ba4      	ldr	r3, [pc, #656]	; (da34 <BrakeLight+0x670>)
    d7a2:	0010      	movs	r0, r2
    d7a4:	4798      	blx	r3
    d7a6:	1c02      	adds	r2, r0, #0
    d7a8:	4ba3      	ldr	r3, [pc, #652]	; (da38 <BrakeLight+0x674>)
    d7aa:	1c10      	adds	r0, r2, #0
    d7ac:	4798      	blx	r3
    d7ae:	4ca3      	ldr	r4, [pc, #652]	; (da3c <BrakeLight+0x678>)
    d7b0:	2200      	movs	r2, #0
    d7b2:	4ba3      	ldr	r3, [pc, #652]	; (da40 <BrakeLight+0x67c>)
    d7b4:	47a0      	blx	r4
    d7b6:	0003      	movs	r3, r0
    d7b8:	000c      	movs	r4, r1
    d7ba:	0018      	movs	r0, r3
    d7bc:	0021      	movs	r1, r4
    d7be:	4ca1      	ldr	r4, [pc, #644]	; (da44 <BrakeLight+0x680>)
    d7c0:	2200      	movs	r2, #0
    d7c2:	4ba1      	ldr	r3, [pc, #644]	; (da48 <BrakeLight+0x684>)
    d7c4:	47a0      	blx	r4
    d7c6:	0003      	movs	r3, r0
    d7c8:	000c      	movs	r4, r1
    d7ca:	001a      	movs	r2, r3
    d7cc:	0023      	movs	r3, r4
    d7ce:	4c9f      	ldr	r4, [pc, #636]	; (da4c <BrakeLight+0x688>)
    d7d0:	2000      	movs	r0, #0
    d7d2:	499d      	ldr	r1, [pc, #628]	; (da48 <BrakeLight+0x684>)
    d7d4:	47a0      	blx	r4
    d7d6:	0003      	movs	r3, r0
    d7d8:	000c      	movs	r4, r1
    d7da:	001a      	movs	r2, r3
    d7dc:	0023      	movs	r3, r4
    d7de:	4c97      	ldr	r4, [pc, #604]	; (da3c <BrakeLight+0x678>)
    d7e0:	0028      	movs	r0, r5
    d7e2:	0031      	movs	r1, r6
    d7e4:	47a0      	blx	r4
    d7e6:	0003      	movs	r3, r0
    d7e8:	000c      	movs	r4, r1
    d7ea:	001d      	movs	r5, r3
    d7ec:	0026      	movs	r6, r4
    d7ee:	4b90      	ldr	r3, [pc, #576]	; (da30 <BrakeLight+0x66c>)
    d7f0:	781a      	ldrb	r2, [r3, #0]
    d7f2:	4b90      	ldr	r3, [pc, #576]	; (da34 <BrakeLight+0x670>)
    d7f4:	0010      	movs	r0, r2
    d7f6:	4798      	blx	r3
    d7f8:	1c02      	adds	r2, r0, #0
    d7fa:	4b8f      	ldr	r3, [pc, #572]	; (da38 <BrakeLight+0x674>)
    d7fc:	1c10      	adds	r0, r2, #0
    d7fe:	4798      	blx	r3
    d800:	4c8e      	ldr	r4, [pc, #568]	; (da3c <BrakeLight+0x678>)
    d802:	2200      	movs	r2, #0
    d804:	4b8e      	ldr	r3, [pc, #568]	; (da40 <BrakeLight+0x67c>)
    d806:	47a0      	blx	r4
    d808:	0003      	movs	r3, r0
    d80a:	000c      	movs	r4, r1
    d80c:	0018      	movs	r0, r3
    d80e:	0021      	movs	r1, r4
    d810:	4c8c      	ldr	r4, [pc, #560]	; (da44 <BrakeLight+0x680>)
    d812:	2200      	movs	r2, #0
    d814:	4b8c      	ldr	r3, [pc, #560]	; (da48 <BrakeLight+0x684>)
    d816:	47a0      	blx	r4
    d818:	0003      	movs	r3, r0
    d81a:	000c      	movs	r4, r1
    d81c:	001a      	movs	r2, r3
    d81e:	0023      	movs	r3, r4
    d820:	4c8a      	ldr	r4, [pc, #552]	; (da4c <BrakeLight+0x688>)
    d822:	2000      	movs	r0, #0
    d824:	4988      	ldr	r1, [pc, #544]	; (da48 <BrakeLight+0x684>)
    d826:	47a0      	blx	r4
    d828:	0003      	movs	r3, r0
    d82a:	000c      	movs	r4, r1
    d82c:	60bb      	str	r3, [r7, #8]
    d82e:	60fc      	str	r4, [r7, #12]
    d830:	4b81      	ldr	r3, [pc, #516]	; (da38 <BrakeLight+0x674>)
    d832:	6978      	ldr	r0, [r7, #20]
    d834:	4798      	blx	r3
    d836:	0002      	movs	r2, r0
    d838:	000b      	movs	r3, r1
    d83a:	4c84      	ldr	r4, [pc, #528]	; (da4c <BrakeLight+0x688>)
    d83c:	68b8      	ldr	r0, [r7, #8]
    d83e:	68f9      	ldr	r1, [r7, #12]
    d840:	47a0      	blx	r4
    d842:	0003      	movs	r3, r0
    d844:	000c      	movs	r4, r1
    d846:	001a      	movs	r2, r3
    d848:	0023      	movs	r3, r4
    d84a:	4c7e      	ldr	r4, [pc, #504]	; (da44 <BrakeLight+0x680>)
    d84c:	0028      	movs	r0, r5
    d84e:	0031      	movs	r1, r6
    d850:	47a0      	blx	r4
    d852:	0003      	movs	r3, r0
    d854:	000c      	movs	r4, r1
    d856:	001d      	movs	r5, r3
    d858:	0026      	movs	r6, r4
    d85a:	4b72      	ldr	r3, [pc, #456]	; (da24 <BrakeLight+0x660>)
    d85c:	881b      	ldrh	r3, [r3, #0]
    d85e:	001a      	movs	r2, r3
    d860:	4b72      	ldr	r3, [pc, #456]	; (da2c <BrakeLight+0x668>)
    d862:	0010      	movs	r0, r2
    d864:	4798      	blx	r3
    d866:	0002      	movs	r2, r0
    d868:	000b      	movs	r3, r1
    d86a:	4c79      	ldr	r4, [pc, #484]	; (da50 <BrakeLight+0x68c>)
    d86c:	0028      	movs	r0, r5
    d86e:	0031      	movs	r1, r6
    d870:	47a0      	blx	r4
    d872:	0003      	movs	r3, r0
    d874:	000c      	movs	r4, r1
    d876:	0019      	movs	r1, r3
    d878:	0022      	movs	r2, r4
    d87a:	4b76      	ldr	r3, [pc, #472]	; (da54 <BrakeLight+0x690>)
    d87c:	0008      	movs	r0, r1
    d87e:	0011      	movs	r1, r2
    d880:	4798      	blx	r3
    d882:	1c03      	adds	r3, r0, #0
    d884:	613b      	str	r3, [r7, #16]
				if(temp_y > (128-(128*((float)deadzone/100.0)))*0.1)
    d886:	4b6c      	ldr	r3, [pc, #432]	; (da38 <BrakeLight+0x674>)
    d888:	6978      	ldr	r0, [r7, #20]
    d88a:	4798      	blx	r3
    d88c:	0005      	movs	r5, r0
    d88e:	000e      	movs	r6, r1
    d890:	4b67      	ldr	r3, [pc, #412]	; (da30 <BrakeLight+0x66c>)
    d892:	781a      	ldrb	r2, [r3, #0]
    d894:	4b67      	ldr	r3, [pc, #412]	; (da34 <BrakeLight+0x670>)
    d896:	0010      	movs	r0, r2
    d898:	4798      	blx	r3
    d89a:	1c02      	adds	r2, r0, #0
    d89c:	4b66      	ldr	r3, [pc, #408]	; (da38 <BrakeLight+0x674>)
    d89e:	1c10      	adds	r0, r2, #0
    d8a0:	4798      	blx	r3
    d8a2:	4c66      	ldr	r4, [pc, #408]	; (da3c <BrakeLight+0x678>)
    d8a4:	2200      	movs	r2, #0
    d8a6:	4b66      	ldr	r3, [pc, #408]	; (da40 <BrakeLight+0x67c>)
    d8a8:	47a0      	blx	r4
    d8aa:	0003      	movs	r3, r0
    d8ac:	000c      	movs	r4, r1
    d8ae:	0018      	movs	r0, r3
    d8b0:	0021      	movs	r1, r4
    d8b2:	4c64      	ldr	r4, [pc, #400]	; (da44 <BrakeLight+0x680>)
    d8b4:	2200      	movs	r2, #0
    d8b6:	4b64      	ldr	r3, [pc, #400]	; (da48 <BrakeLight+0x684>)
    d8b8:	47a0      	blx	r4
    d8ba:	0003      	movs	r3, r0
    d8bc:	000c      	movs	r4, r1
    d8be:	001a      	movs	r2, r3
    d8c0:	0023      	movs	r3, r4
    d8c2:	4c62      	ldr	r4, [pc, #392]	; (da4c <BrakeLight+0x688>)
    d8c4:	2000      	movs	r0, #0
    d8c6:	4960      	ldr	r1, [pc, #384]	; (da48 <BrakeLight+0x684>)
    d8c8:	47a0      	blx	r4
    d8ca:	0003      	movs	r3, r0
    d8cc:	000c      	movs	r4, r1
    d8ce:	0018      	movs	r0, r3
    d8d0:	0021      	movs	r1, r4
    d8d2:	4c5c      	ldr	r4, [pc, #368]	; (da44 <BrakeLight+0x680>)
    d8d4:	4a60      	ldr	r2, [pc, #384]	; (da58 <BrakeLight+0x694>)
    d8d6:	4b61      	ldr	r3, [pc, #388]	; (da5c <BrakeLight+0x698>)
    d8d8:	47a0      	blx	r4
    d8da:	0003      	movs	r3, r0
    d8dc:	000c      	movs	r4, r1
    d8de:	001a      	movs	r2, r3
    d8e0:	0023      	movs	r3, r4
    d8e2:	4c5f      	ldr	r4, [pc, #380]	; (da60 <BrakeLight+0x69c>)
    d8e4:	0028      	movs	r0, r5
    d8e6:	0031      	movs	r1, r6
    d8e8:	47a0      	blx	r4
    d8ea:	1e03      	subs	r3, r0, #0
    d8ec:	d006      	beq.n	d8fc <BrakeLight+0x538>
				BlinkTail(0xFFFF, 7);
    d8ee:	4a5d      	ldr	r2, [pc, #372]	; (da64 <BrakeLight+0x6a0>)
    d8f0:	4b4d      	ldr	r3, [pc, #308]	; (da28 <BrakeLight+0x664>)
    d8f2:	1c11      	adds	r1, r2, #0
    d8f4:	0018      	movs	r0, r3
    d8f6:	4b5c      	ldr	r3, [pc, #368]	; (da68 <BrakeLight+0x6a4>)
    d8f8:	4798      	blx	r3
				else
				setRed(brake_temp);
				break;
    d8fa:	e1bb      	b.n	dc74 <BrakeLight+0x8b0>
				setRed(brake_temp);
    d8fc:	4b5b      	ldr	r3, [pc, #364]	; (da6c <BrakeLight+0x6a8>)
    d8fe:	6938      	ldr	r0, [r7, #16]
    d900:	4798      	blx	r3
    d902:	0003      	movs	r3, r0
    d904:	b29b      	uxth	r3, r3
    d906:	0018      	movs	r0, r3
    d908:	4b59      	ldr	r3, [pc, #356]	; (da70 <BrakeLight+0x6ac>)
    d90a:	4798      	blx	r3
				break;
    d90c:	e1b2      	b.n	dc74 <BrakeLight+0x8b0>
				case BRAKE_FADING_BLINK:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    d90e:	4b45      	ldr	r3, [pc, #276]	; (da24 <BrakeLight+0x660>)
    d910:	881b      	ldrh	r3, [r3, #0]
    d912:	001a      	movs	r2, r3
    d914:	4b44      	ldr	r3, [pc, #272]	; (da28 <BrakeLight+0x664>)
    d916:	1a9a      	subs	r2, r3, r2
    d918:	4b44      	ldr	r3, [pc, #272]	; (da2c <BrakeLight+0x668>)
    d91a:	0010      	movs	r0, r2
    d91c:	4798      	blx	r3
    d91e:	0005      	movs	r5, r0
    d920:	000e      	movs	r6, r1
    d922:	4b43      	ldr	r3, [pc, #268]	; (da30 <BrakeLight+0x66c>)
    d924:	781a      	ldrb	r2, [r3, #0]
    d926:	4b43      	ldr	r3, [pc, #268]	; (da34 <BrakeLight+0x670>)
    d928:	0010      	movs	r0, r2
    d92a:	4798      	blx	r3
    d92c:	1c02      	adds	r2, r0, #0
    d92e:	4b42      	ldr	r3, [pc, #264]	; (da38 <BrakeLight+0x674>)
    d930:	1c10      	adds	r0, r2, #0
    d932:	4798      	blx	r3
    d934:	4c41      	ldr	r4, [pc, #260]	; (da3c <BrakeLight+0x678>)
    d936:	2200      	movs	r2, #0
    d938:	4b41      	ldr	r3, [pc, #260]	; (da40 <BrakeLight+0x67c>)
    d93a:	47a0      	blx	r4
    d93c:	0003      	movs	r3, r0
    d93e:	000c      	movs	r4, r1
    d940:	0018      	movs	r0, r3
    d942:	0021      	movs	r1, r4
    d944:	4c3f      	ldr	r4, [pc, #252]	; (da44 <BrakeLight+0x680>)
    d946:	2200      	movs	r2, #0
    d948:	4b3f      	ldr	r3, [pc, #252]	; (da48 <BrakeLight+0x684>)
    d94a:	47a0      	blx	r4
    d94c:	0003      	movs	r3, r0
    d94e:	000c      	movs	r4, r1
    d950:	001a      	movs	r2, r3
    d952:	0023      	movs	r3, r4
    d954:	4c3d      	ldr	r4, [pc, #244]	; (da4c <BrakeLight+0x688>)
    d956:	2000      	movs	r0, #0
    d958:	493b      	ldr	r1, [pc, #236]	; (da48 <BrakeLight+0x684>)
    d95a:	47a0      	blx	r4
    d95c:	0003      	movs	r3, r0
    d95e:	000c      	movs	r4, r1
    d960:	001a      	movs	r2, r3
    d962:	0023      	movs	r3, r4
    d964:	4c35      	ldr	r4, [pc, #212]	; (da3c <BrakeLight+0x678>)
    d966:	0028      	movs	r0, r5
    d968:	0031      	movs	r1, r6
    d96a:	47a0      	blx	r4
    d96c:	0003      	movs	r3, r0
    d96e:	000c      	movs	r4, r1
    d970:	001d      	movs	r5, r3
    d972:	0026      	movs	r6, r4
    d974:	4b2e      	ldr	r3, [pc, #184]	; (da30 <BrakeLight+0x66c>)
    d976:	781a      	ldrb	r2, [r3, #0]
    d978:	4b2e      	ldr	r3, [pc, #184]	; (da34 <BrakeLight+0x670>)
    d97a:	0010      	movs	r0, r2
    d97c:	4798      	blx	r3
    d97e:	1c02      	adds	r2, r0, #0
    d980:	4b2d      	ldr	r3, [pc, #180]	; (da38 <BrakeLight+0x674>)
    d982:	1c10      	adds	r0, r2, #0
    d984:	4798      	blx	r3
    d986:	4c2d      	ldr	r4, [pc, #180]	; (da3c <BrakeLight+0x678>)
    d988:	2200      	movs	r2, #0
    d98a:	4b2d      	ldr	r3, [pc, #180]	; (da40 <BrakeLight+0x67c>)
    d98c:	47a0      	blx	r4
    d98e:	0003      	movs	r3, r0
    d990:	000c      	movs	r4, r1
    d992:	0018      	movs	r0, r3
    d994:	0021      	movs	r1, r4
    d996:	4c2b      	ldr	r4, [pc, #172]	; (da44 <BrakeLight+0x680>)
    d998:	2200      	movs	r2, #0
    d99a:	4b2b      	ldr	r3, [pc, #172]	; (da48 <BrakeLight+0x684>)
    d99c:	47a0      	blx	r4
    d99e:	0003      	movs	r3, r0
    d9a0:	000c      	movs	r4, r1
    d9a2:	001a      	movs	r2, r3
    d9a4:	0023      	movs	r3, r4
    d9a6:	4c29      	ldr	r4, [pc, #164]	; (da4c <BrakeLight+0x688>)
    d9a8:	2000      	movs	r0, #0
    d9aa:	4927      	ldr	r1, [pc, #156]	; (da48 <BrakeLight+0x684>)
    d9ac:	47a0      	blx	r4
    d9ae:	0003      	movs	r3, r0
    d9b0:	000c      	movs	r4, r1
    d9b2:	60bb      	str	r3, [r7, #8]
    d9b4:	60fc      	str	r4, [r7, #12]
    d9b6:	4b20      	ldr	r3, [pc, #128]	; (da38 <BrakeLight+0x674>)
    d9b8:	6978      	ldr	r0, [r7, #20]
    d9ba:	4798      	blx	r3
    d9bc:	0002      	movs	r2, r0
    d9be:	000b      	movs	r3, r1
    d9c0:	4c22      	ldr	r4, [pc, #136]	; (da4c <BrakeLight+0x688>)
    d9c2:	68b8      	ldr	r0, [r7, #8]
    d9c4:	68f9      	ldr	r1, [r7, #12]
    d9c6:	47a0      	blx	r4
    d9c8:	0003      	movs	r3, r0
    d9ca:	000c      	movs	r4, r1
    d9cc:	001a      	movs	r2, r3
    d9ce:	0023      	movs	r3, r4
    d9d0:	4c1c      	ldr	r4, [pc, #112]	; (da44 <BrakeLight+0x680>)
    d9d2:	0028      	movs	r0, r5
    d9d4:	0031      	movs	r1, r6
    d9d6:	47a0      	blx	r4
    d9d8:	0003      	movs	r3, r0
    d9da:	000c      	movs	r4, r1
    d9dc:	001d      	movs	r5, r3
    d9de:	0026      	movs	r6, r4
    d9e0:	4b10      	ldr	r3, [pc, #64]	; (da24 <BrakeLight+0x660>)
    d9e2:	881b      	ldrh	r3, [r3, #0]
    d9e4:	001a      	movs	r2, r3
    d9e6:	4b11      	ldr	r3, [pc, #68]	; (da2c <BrakeLight+0x668>)
    d9e8:	0010      	movs	r0, r2
    d9ea:	4798      	blx	r3
    d9ec:	0002      	movs	r2, r0
    d9ee:	000b      	movs	r3, r1
    d9f0:	4c17      	ldr	r4, [pc, #92]	; (da50 <BrakeLight+0x68c>)
    d9f2:	0028      	movs	r0, r5
    d9f4:	0031      	movs	r1, r6
    d9f6:	47a0      	blx	r4
    d9f8:	0003      	movs	r3, r0
    d9fa:	000c      	movs	r4, r1
    d9fc:	0019      	movs	r1, r3
    d9fe:	0022      	movs	r2, r4
    da00:	4b14      	ldr	r3, [pc, #80]	; (da54 <BrakeLight+0x690>)
    da02:	0008      	movs	r0, r1
    da04:	0011      	movs	r1, r2
    da06:	4798      	blx	r3
    da08:	1c03      	adds	r3, r0, #0
    da0a:	613b      	str	r3, [r7, #16]
				BlinkTail(brake_temp, 7);
    da0c:	4b17      	ldr	r3, [pc, #92]	; (da6c <BrakeLight+0x6a8>)
    da0e:	6938      	ldr	r0, [r7, #16]
    da10:	4798      	blx	r3
    da12:	0003      	movs	r3, r0
    da14:	b29b      	uxth	r3, r3
    da16:	4a13      	ldr	r2, [pc, #76]	; (da64 <BrakeLight+0x6a0>)
    da18:	1c11      	adds	r1, r2, #0
    da1a:	0018      	movs	r0, r3
    da1c:	4b12      	ldr	r3, [pc, #72]	; (da68 <BrakeLight+0x6a4>)
    da1e:	4798      	blx	r3
				break;
    da20:	e128      	b.n	dc74 <BrakeLight+0x8b0>
    da22:	46c0      	nop			; (mov r8, r8)
    da24:	200000c8 	.word	0x200000c8
    da28:	0000ffff 	.word	0x0000ffff
    da2c:	0001b0ad 	.word	0x0001b0ad
    da30:	200000dc 	.word	0x200000dc
    da34:	00019605 	.word	0x00019605
    da38:	0001b1a1 	.word	0x0001b1a1
    da3c:	00019cb1 	.word	0x00019cb1
    da40:	40590000 	.word	0x40590000
    da44:	0001a519 	.word	0x0001a519
    da48:	40600000 	.word	0x40600000
    da4c:	0001aa19 	.word	0x0001aa19
    da50:	00019691 	.word	0x00019691
    da54:	0001b245 	.word	0x0001b245
    da58:	9999999a 	.word	0x9999999a
    da5c:	3fb99999 	.word	0x3fb99999
    da60:	0001874d 	.word	0x0001874d
    da64:	40e00000 	.word	0x40e00000
    da68:	0000a9a5 	.word	0x0000a9a5
    da6c:	0001883d 	.word	0x0001883d
    da70:	0000a52d 	.word	0x0000a52d
				case BRAKE_PACED_BLINK:
				brake_temp = (((0xFFFF-brake_offset)/(128-(128*((float)deadzone/100.0)))*((128-(128*((float)deadzone/100.0)))-temp_y))+brake_offset);
    da74:	4b81      	ldr	r3, [pc, #516]	; (dc7c <BrakeLight+0x8b8>)
    da76:	881b      	ldrh	r3, [r3, #0]
    da78:	001a      	movs	r2, r3
    da7a:	4b81      	ldr	r3, [pc, #516]	; (dc80 <BrakeLight+0x8bc>)
    da7c:	1a9a      	subs	r2, r3, r2
    da7e:	4b81      	ldr	r3, [pc, #516]	; (dc84 <BrakeLight+0x8c0>)
    da80:	0010      	movs	r0, r2
    da82:	4798      	blx	r3
    da84:	0005      	movs	r5, r0
    da86:	000e      	movs	r6, r1
    da88:	4b7f      	ldr	r3, [pc, #508]	; (dc88 <BrakeLight+0x8c4>)
    da8a:	781a      	ldrb	r2, [r3, #0]
    da8c:	4b7f      	ldr	r3, [pc, #508]	; (dc8c <BrakeLight+0x8c8>)
    da8e:	0010      	movs	r0, r2
    da90:	4798      	blx	r3
    da92:	1c02      	adds	r2, r0, #0
    da94:	4b7e      	ldr	r3, [pc, #504]	; (dc90 <BrakeLight+0x8cc>)
    da96:	1c10      	adds	r0, r2, #0
    da98:	4798      	blx	r3
    da9a:	4c7e      	ldr	r4, [pc, #504]	; (dc94 <BrakeLight+0x8d0>)
    da9c:	2200      	movs	r2, #0
    da9e:	4b7e      	ldr	r3, [pc, #504]	; (dc98 <BrakeLight+0x8d4>)
    daa0:	47a0      	blx	r4
    daa2:	0003      	movs	r3, r0
    daa4:	000c      	movs	r4, r1
    daa6:	0018      	movs	r0, r3
    daa8:	0021      	movs	r1, r4
    daaa:	4c7c      	ldr	r4, [pc, #496]	; (dc9c <BrakeLight+0x8d8>)
    daac:	2200      	movs	r2, #0
    daae:	4b7c      	ldr	r3, [pc, #496]	; (dca0 <BrakeLight+0x8dc>)
    dab0:	47a0      	blx	r4
    dab2:	0003      	movs	r3, r0
    dab4:	000c      	movs	r4, r1
    dab6:	001a      	movs	r2, r3
    dab8:	0023      	movs	r3, r4
    daba:	4c7a      	ldr	r4, [pc, #488]	; (dca4 <BrakeLight+0x8e0>)
    dabc:	2000      	movs	r0, #0
    dabe:	4978      	ldr	r1, [pc, #480]	; (dca0 <BrakeLight+0x8dc>)
    dac0:	47a0      	blx	r4
    dac2:	0003      	movs	r3, r0
    dac4:	000c      	movs	r4, r1
    dac6:	001a      	movs	r2, r3
    dac8:	0023      	movs	r3, r4
    daca:	4c72      	ldr	r4, [pc, #456]	; (dc94 <BrakeLight+0x8d0>)
    dacc:	0028      	movs	r0, r5
    dace:	0031      	movs	r1, r6
    dad0:	47a0      	blx	r4
    dad2:	0003      	movs	r3, r0
    dad4:	000c      	movs	r4, r1
    dad6:	001d      	movs	r5, r3
    dad8:	0026      	movs	r6, r4
    dada:	4b6b      	ldr	r3, [pc, #428]	; (dc88 <BrakeLight+0x8c4>)
    dadc:	781a      	ldrb	r2, [r3, #0]
    dade:	4b6b      	ldr	r3, [pc, #428]	; (dc8c <BrakeLight+0x8c8>)
    dae0:	0010      	movs	r0, r2
    dae2:	4798      	blx	r3
    dae4:	1c02      	adds	r2, r0, #0
    dae6:	4b6a      	ldr	r3, [pc, #424]	; (dc90 <BrakeLight+0x8cc>)
    dae8:	1c10      	adds	r0, r2, #0
    daea:	4798      	blx	r3
    daec:	4c69      	ldr	r4, [pc, #420]	; (dc94 <BrakeLight+0x8d0>)
    daee:	2200      	movs	r2, #0
    daf0:	4b69      	ldr	r3, [pc, #420]	; (dc98 <BrakeLight+0x8d4>)
    daf2:	47a0      	blx	r4
    daf4:	0003      	movs	r3, r0
    daf6:	000c      	movs	r4, r1
    daf8:	0018      	movs	r0, r3
    dafa:	0021      	movs	r1, r4
    dafc:	4c67      	ldr	r4, [pc, #412]	; (dc9c <BrakeLight+0x8d8>)
    dafe:	2200      	movs	r2, #0
    db00:	4b67      	ldr	r3, [pc, #412]	; (dca0 <BrakeLight+0x8dc>)
    db02:	47a0      	blx	r4
    db04:	0003      	movs	r3, r0
    db06:	000c      	movs	r4, r1
    db08:	001a      	movs	r2, r3
    db0a:	0023      	movs	r3, r4
    db0c:	4c65      	ldr	r4, [pc, #404]	; (dca4 <BrakeLight+0x8e0>)
    db0e:	2000      	movs	r0, #0
    db10:	4963      	ldr	r1, [pc, #396]	; (dca0 <BrakeLight+0x8dc>)
    db12:	47a0      	blx	r4
    db14:	0003      	movs	r3, r0
    db16:	000c      	movs	r4, r1
    db18:	60bb      	str	r3, [r7, #8]
    db1a:	60fc      	str	r4, [r7, #12]
    db1c:	4b5c      	ldr	r3, [pc, #368]	; (dc90 <BrakeLight+0x8cc>)
    db1e:	6978      	ldr	r0, [r7, #20]
    db20:	4798      	blx	r3
    db22:	0002      	movs	r2, r0
    db24:	000b      	movs	r3, r1
    db26:	4c5f      	ldr	r4, [pc, #380]	; (dca4 <BrakeLight+0x8e0>)
    db28:	68b8      	ldr	r0, [r7, #8]
    db2a:	68f9      	ldr	r1, [r7, #12]
    db2c:	47a0      	blx	r4
    db2e:	0003      	movs	r3, r0
    db30:	000c      	movs	r4, r1
    db32:	001a      	movs	r2, r3
    db34:	0023      	movs	r3, r4
    db36:	4c59      	ldr	r4, [pc, #356]	; (dc9c <BrakeLight+0x8d8>)
    db38:	0028      	movs	r0, r5
    db3a:	0031      	movs	r1, r6
    db3c:	47a0      	blx	r4
    db3e:	0003      	movs	r3, r0
    db40:	000c      	movs	r4, r1
    db42:	001d      	movs	r5, r3
    db44:	0026      	movs	r6, r4
    db46:	4b4d      	ldr	r3, [pc, #308]	; (dc7c <BrakeLight+0x8b8>)
    db48:	881b      	ldrh	r3, [r3, #0]
    db4a:	001a      	movs	r2, r3
    db4c:	4b4d      	ldr	r3, [pc, #308]	; (dc84 <BrakeLight+0x8c0>)
    db4e:	0010      	movs	r0, r2
    db50:	4798      	blx	r3
    db52:	0002      	movs	r2, r0
    db54:	000b      	movs	r3, r1
    db56:	4c54      	ldr	r4, [pc, #336]	; (dca8 <BrakeLight+0x8e4>)
    db58:	0028      	movs	r0, r5
    db5a:	0031      	movs	r1, r6
    db5c:	47a0      	blx	r4
    db5e:	0003      	movs	r3, r0
    db60:	000c      	movs	r4, r1
    db62:	0019      	movs	r1, r3
    db64:	0022      	movs	r2, r4
    db66:	4b51      	ldr	r3, [pc, #324]	; (dcac <BrakeLight+0x8e8>)
    db68:	0008      	movs	r0, r1
    db6a:	0011      	movs	r1, r2
    db6c:	4798      	blx	r3
    db6e:	1c03      	adds	r3, r0, #0
    db70:	613b      	str	r3, [r7, #16]
				BlinkTail(brake_temp, (3+(7/(128-(128*((float)deadzone/100.0))))*((128-(128*((float)deadzone/100.0)))-temp_y)));
    db72:	4b4f      	ldr	r3, [pc, #316]	; (dcb0 <BrakeLight+0x8ec>)
    db74:	6938      	ldr	r0, [r7, #16]
    db76:	4798      	blx	r3
    db78:	0003      	movs	r3, r0
    db7a:	b29d      	uxth	r5, r3
    db7c:	4b42      	ldr	r3, [pc, #264]	; (dc88 <BrakeLight+0x8c4>)
    db7e:	781a      	ldrb	r2, [r3, #0]
    db80:	4b42      	ldr	r3, [pc, #264]	; (dc8c <BrakeLight+0x8c8>)
    db82:	0010      	movs	r0, r2
    db84:	4798      	blx	r3
    db86:	1c02      	adds	r2, r0, #0
    db88:	4b41      	ldr	r3, [pc, #260]	; (dc90 <BrakeLight+0x8cc>)
    db8a:	1c10      	adds	r0, r2, #0
    db8c:	4798      	blx	r3
    db8e:	4c41      	ldr	r4, [pc, #260]	; (dc94 <BrakeLight+0x8d0>)
    db90:	2200      	movs	r2, #0
    db92:	4b41      	ldr	r3, [pc, #260]	; (dc98 <BrakeLight+0x8d4>)
    db94:	47a0      	blx	r4
    db96:	0003      	movs	r3, r0
    db98:	000c      	movs	r4, r1
    db9a:	0018      	movs	r0, r3
    db9c:	0021      	movs	r1, r4
    db9e:	4c3f      	ldr	r4, [pc, #252]	; (dc9c <BrakeLight+0x8d8>)
    dba0:	2200      	movs	r2, #0
    dba2:	4b3f      	ldr	r3, [pc, #252]	; (dca0 <BrakeLight+0x8dc>)
    dba4:	47a0      	blx	r4
    dba6:	0003      	movs	r3, r0
    dba8:	000c      	movs	r4, r1
    dbaa:	001a      	movs	r2, r3
    dbac:	0023      	movs	r3, r4
    dbae:	4c3d      	ldr	r4, [pc, #244]	; (dca4 <BrakeLight+0x8e0>)
    dbb0:	2000      	movs	r0, #0
    dbb2:	493b      	ldr	r1, [pc, #236]	; (dca0 <BrakeLight+0x8dc>)
    dbb4:	47a0      	blx	r4
    dbb6:	0003      	movs	r3, r0
    dbb8:	000c      	movs	r4, r1
    dbba:	001a      	movs	r2, r3
    dbbc:	0023      	movs	r3, r4
    dbbe:	4c35      	ldr	r4, [pc, #212]	; (dc94 <BrakeLight+0x8d0>)
    dbc0:	2000      	movs	r0, #0
    dbc2:	493c      	ldr	r1, [pc, #240]	; (dcb4 <BrakeLight+0x8f0>)
    dbc4:	47a0      	blx	r4
    dbc6:	0003      	movs	r3, r0
    dbc8:	000c      	movs	r4, r1
    dbca:	60bb      	str	r3, [r7, #8]
    dbcc:	60fc      	str	r4, [r7, #12]
    dbce:	4b2e      	ldr	r3, [pc, #184]	; (dc88 <BrakeLight+0x8c4>)
    dbd0:	781a      	ldrb	r2, [r3, #0]
    dbd2:	4b2e      	ldr	r3, [pc, #184]	; (dc8c <BrakeLight+0x8c8>)
    dbd4:	0010      	movs	r0, r2
    dbd6:	4798      	blx	r3
    dbd8:	1c02      	adds	r2, r0, #0
    dbda:	4b2d      	ldr	r3, [pc, #180]	; (dc90 <BrakeLight+0x8cc>)
    dbdc:	1c10      	adds	r0, r2, #0
    dbde:	4798      	blx	r3
    dbe0:	4c2c      	ldr	r4, [pc, #176]	; (dc94 <BrakeLight+0x8d0>)
    dbe2:	2200      	movs	r2, #0
    dbe4:	4b2c      	ldr	r3, [pc, #176]	; (dc98 <BrakeLight+0x8d4>)
    dbe6:	47a0      	blx	r4
    dbe8:	0003      	movs	r3, r0
    dbea:	000c      	movs	r4, r1
    dbec:	0018      	movs	r0, r3
    dbee:	0021      	movs	r1, r4
    dbf0:	4c2a      	ldr	r4, [pc, #168]	; (dc9c <BrakeLight+0x8d8>)
    dbf2:	2200      	movs	r2, #0
    dbf4:	4b2a      	ldr	r3, [pc, #168]	; (dca0 <BrakeLight+0x8dc>)
    dbf6:	47a0      	blx	r4
    dbf8:	0003      	movs	r3, r0
    dbfa:	000c      	movs	r4, r1
    dbfc:	001a      	movs	r2, r3
    dbfe:	0023      	movs	r3, r4
    dc00:	4c28      	ldr	r4, [pc, #160]	; (dca4 <BrakeLight+0x8e0>)
    dc02:	2000      	movs	r0, #0
    dc04:	4926      	ldr	r1, [pc, #152]	; (dca0 <BrakeLight+0x8dc>)
    dc06:	47a0      	blx	r4
    dc08:	0003      	movs	r3, r0
    dc0a:	000c      	movs	r4, r1
    dc0c:	603b      	str	r3, [r7, #0]
    dc0e:	607c      	str	r4, [r7, #4]
    dc10:	4b1f      	ldr	r3, [pc, #124]	; (dc90 <BrakeLight+0x8cc>)
    dc12:	6978      	ldr	r0, [r7, #20]
    dc14:	4798      	blx	r3
    dc16:	0002      	movs	r2, r0
    dc18:	000b      	movs	r3, r1
    dc1a:	4c22      	ldr	r4, [pc, #136]	; (dca4 <BrakeLight+0x8e0>)
    dc1c:	6838      	ldr	r0, [r7, #0]
    dc1e:	6879      	ldr	r1, [r7, #4]
    dc20:	47a0      	blx	r4
    dc22:	0003      	movs	r3, r0
    dc24:	000c      	movs	r4, r1
    dc26:	001a      	movs	r2, r3
    dc28:	0023      	movs	r3, r4
    dc2a:	4c1c      	ldr	r4, [pc, #112]	; (dc9c <BrakeLight+0x8d8>)
    dc2c:	68b8      	ldr	r0, [r7, #8]
    dc2e:	68f9      	ldr	r1, [r7, #12]
    dc30:	47a0      	blx	r4
    dc32:	0003      	movs	r3, r0
    dc34:	000c      	movs	r4, r1
    dc36:	0018      	movs	r0, r3
    dc38:	0021      	movs	r1, r4
    dc3a:	4c1b      	ldr	r4, [pc, #108]	; (dca8 <BrakeLight+0x8e4>)
    dc3c:	2200      	movs	r2, #0
    dc3e:	4b1e      	ldr	r3, [pc, #120]	; (dcb8 <BrakeLight+0x8f4>)
    dc40:	47a0      	blx	r4
    dc42:	0003      	movs	r3, r0
    dc44:	000c      	movs	r4, r1
    dc46:	0019      	movs	r1, r3
    dc48:	0022      	movs	r2, r4
    dc4a:	4b18      	ldr	r3, [pc, #96]	; (dcac <BrakeLight+0x8e8>)
    dc4c:	0008      	movs	r0, r1
    dc4e:	0011      	movs	r1, r2
    dc50:	4798      	blx	r3
    dc52:	1c03      	adds	r3, r0, #0
    dc54:	1c19      	adds	r1, r3, #0
    dc56:	0028      	movs	r0, r5
    dc58:	4b18      	ldr	r3, [pc, #96]	; (dcbc <BrakeLight+0x8f8>)
    dc5a:	4798      	blx	r3
				break;
    dc5c:	46c0      	nop			; (mov r8, r8)
    dc5e:	e009      	b.n	dc74 <BrakeLight+0x8b0>
			}
		}
		else {
			setRed(brake_offset);
    dc60:	4b06      	ldr	r3, [pc, #24]	; (dc7c <BrakeLight+0x8b8>)
    dc62:	881b      	ldrh	r3, [r3, #0]
    dc64:	0018      	movs	r0, r3
    dc66:	4b16      	ldr	r3, [pc, #88]	; (dcc0 <BrakeLight+0x8fc>)
    dc68:	4798      	blx	r3
		}
	}
	else{
		setRed(0);
	}
}
    dc6a:	e003      	b.n	dc74 <BrakeLight+0x8b0>
		setRed(0);
    dc6c:	2000      	movs	r0, #0
    dc6e:	4b14      	ldr	r3, [pc, #80]	; (dcc0 <BrakeLight+0x8fc>)
    dc70:	4798      	blx	r3
}
    dc72:	e7ff      	b.n	dc74 <BrakeLight+0x8b0>
    dc74:	46c0      	nop			; (mov r8, r8)
    dc76:	46bd      	mov	sp, r7
    dc78:	b007      	add	sp, #28
    dc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc7c:	200000c8 	.word	0x200000c8
    dc80:	0000ffff 	.word	0x0000ffff
    dc84:	0001b0ad 	.word	0x0001b0ad
    dc88:	200000dc 	.word	0x200000dc
    dc8c:	00019605 	.word	0x00019605
    dc90:	0001b1a1 	.word	0x0001b1a1
    dc94:	00019cb1 	.word	0x00019cb1
    dc98:	40590000 	.word	0x40590000
    dc9c:	0001a519 	.word	0x0001a519
    dca0:	40600000 	.word	0x40600000
    dca4:	0001aa19 	.word	0x0001aa19
    dca8:	00019691 	.word	0x00019691
    dcac:	0001b245 	.word	0x0001b245
    dcb0:	0001883d 	.word	0x0001883d
    dcb4:	401c0000 	.word	0x401c0000
    dcb8:	40080000 	.word	0x40080000
    dcbc:	0000a9a5 	.word	0x0000a9a5
    dcc0:	0000a52d 	.word	0x0000a52d

0000dcc4 <HeadLight>:

void HeadLight(){
    dcc4:	b580      	push	{r7, lr}
    dcc6:	af00      	add	r7, sp, #0
	if(HEADLIGHTS && lightControlHead()){
    dcc8:	4b09      	ldr	r3, [pc, #36]	; (dcf0 <HeadLight+0x2c>)
    dcca:	781b      	ldrb	r3, [r3, #0]
    dccc:	2b00      	cmp	r3, #0
    dcce:	d008      	beq.n	dce2 <HeadLight+0x1e>
    dcd0:	4b08      	ldr	r3, [pc, #32]	; (dcf4 <HeadLight+0x30>)
    dcd2:	4798      	blx	r3
    dcd4:	1e03      	subs	r3, r0, #0
    dcd6:	d004      	beq.n	dce2 <HeadLight+0x1e>
		setWhite(0xFFFF);
    dcd8:	4b07      	ldr	r3, [pc, #28]	; (dcf8 <HeadLight+0x34>)
    dcda:	0018      	movs	r0, r3
    dcdc:	4b07      	ldr	r3, [pc, #28]	; (dcfc <HeadLight+0x38>)
    dcde:	4798      	blx	r3
    dce0:	e002      	b.n	dce8 <HeadLight+0x24>
	}else{
		setWhite(0);
    dce2:	2000      	movs	r0, #0
    dce4:	4b05      	ldr	r3, [pc, #20]	; (dcfc <HeadLight+0x38>)
    dce6:	4798      	blx	r3
	}
}
    dce8:	46c0      	nop			; (mov r8, r8)
    dcea:	46bd      	mov	sp, r7
    dcec:	bd80      	pop	{r7, pc}
    dcee:	46c0      	nop			; (mov r8, r8)
    dcf0:	2000036f 	.word	0x2000036f
    dcf4:	0000dd0d 	.word	0x0000dd0d
    dcf8:	0000ffff 	.word	0x0000ffff
    dcfc:	0000a4f5 	.word	0x0000a4f5

0000dd00 <lightControlSide>:


char lightControlSide() {
    dd00:	b580      	push	{r7, lr}
    dd02:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
    dd04:	2301      	movs	r3, #1
}
    dd06:	0018      	movs	r0, r3
    dd08:	46bd      	mov	sp, r7
    dd0a:	bd80      	pop	{r7, pc}

0000dd0c <lightControlHead>:

char lightControlHead() {
    dd0c:	b580      	push	{r7, lr}
    dd0e:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
    dd10:	2301      	movs	r3, #1
}
    dd12:	0018      	movs	r0, r3
    dd14:	46bd      	mov	sp, r7
    dd16:	bd80      	pop	{r7, pc}

0000dd18 <sensorControl>:

char sensorControl() {
    dd18:	b580      	push	{r7, lr}
    dd1a:	af00      	add	r7, sp, #0
	static uint8_t off_type = 0;
	static long count = 0;
	static bool result = 1;
	if(IMU_CONTROLED){
    dd1c:	4b60      	ldr	r3, [pc, #384]	; (dea0 <sensorControl+0x188>)
    dd1e:	781b      	ldrb	r3, [r3, #0]
    dd20:	2b00      	cmp	r3, #0
    dd22:	d100      	bne.n	dd26 <sensorControl+0xe>
    dd24:	e0b7      	b.n	de96 <sensorControl+0x17e>
		if(result){
    dd26:	4b5f      	ldr	r3, [pc, #380]	; (dea4 <sensorControl+0x18c>)
    dd28:	781b      	ldrb	r3, [r3, #0]
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d057      	beq.n	ddde <sensorControl+0xc6>
			if(ayKalman >= 1000 && result){
    dd2e:	4b5e      	ldr	r3, [pc, #376]	; (dea8 <sensorControl+0x190>)
    dd30:	681a      	ldr	r2, [r3, #0]
    dd32:	4b5e      	ldr	r3, [pc, #376]	; (deac <sensorControl+0x194>)
    dd34:	495e      	ldr	r1, [pc, #376]	; (deb0 <sensorControl+0x198>)
    dd36:	1c10      	adds	r0, r2, #0
    dd38:	4798      	blx	r3
    dd3a:	1e03      	subs	r3, r0, #0
    dd3c:	d00c      	beq.n	dd58 <sensorControl+0x40>
    dd3e:	4b59      	ldr	r3, [pc, #356]	; (dea4 <sensorControl+0x18c>)
    dd40:	781b      	ldrb	r3, [r3, #0]
    dd42:	2b00      	cmp	r3, #0
    dd44:	d008      	beq.n	dd58 <sensorControl+0x40>
				count++;
    dd46:	4b5b      	ldr	r3, [pc, #364]	; (deb4 <sensorControl+0x19c>)
    dd48:	681b      	ldr	r3, [r3, #0]
    dd4a:	1c5a      	adds	r2, r3, #1
    dd4c:	4b59      	ldr	r3, [pc, #356]	; (deb4 <sensorControl+0x19c>)
    dd4e:	601a      	str	r2, [r3, #0]
				off_type = 1;
    dd50:	4b59      	ldr	r3, [pc, #356]	; (deb8 <sensorControl+0x1a0>)
    dd52:	2201      	movs	r2, #1
    dd54:	701a      	strb	r2, [r3, #0]
    dd56:	e082      	b.n	de5e <sensorControl+0x146>
			}
			else if(ayKalman <= -1000 && result){
    dd58:	4b53      	ldr	r3, [pc, #332]	; (dea8 <sensorControl+0x190>)
    dd5a:	681a      	ldr	r2, [r3, #0]
    dd5c:	4b57      	ldr	r3, [pc, #348]	; (debc <sensorControl+0x1a4>)
    dd5e:	4958      	ldr	r1, [pc, #352]	; (dec0 <sensorControl+0x1a8>)
    dd60:	1c10      	adds	r0, r2, #0
    dd62:	4798      	blx	r3
    dd64:	1e03      	subs	r3, r0, #0
    dd66:	d00c      	beq.n	dd82 <sensorControl+0x6a>
    dd68:	4b4e      	ldr	r3, [pc, #312]	; (dea4 <sensorControl+0x18c>)
    dd6a:	781b      	ldrb	r3, [r3, #0]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d008      	beq.n	dd82 <sensorControl+0x6a>
				count++;
    dd70:	4b50      	ldr	r3, [pc, #320]	; (deb4 <sensorControl+0x19c>)
    dd72:	681b      	ldr	r3, [r3, #0]
    dd74:	1c5a      	adds	r2, r3, #1
    dd76:	4b4f      	ldr	r3, [pc, #316]	; (deb4 <sensorControl+0x19c>)
    dd78:	601a      	str	r2, [r3, #0]
				off_type = 2;
    dd7a:	4b4f      	ldr	r3, [pc, #316]	; (deb8 <sensorControl+0x1a0>)
    dd7c:	2202      	movs	r2, #2
    dd7e:	701a      	strb	r2, [r3, #0]
    dd80:	e06d      	b.n	de5e <sensorControl+0x146>
			}
			else if(axKalman >= 1250 && result){
    dd82:	4b50      	ldr	r3, [pc, #320]	; (dec4 <sensorControl+0x1ac>)
    dd84:	681a      	ldr	r2, [r3, #0]
    dd86:	4b49      	ldr	r3, [pc, #292]	; (deac <sensorControl+0x194>)
    dd88:	494f      	ldr	r1, [pc, #316]	; (dec8 <sensorControl+0x1b0>)
    dd8a:	1c10      	adds	r0, r2, #0
    dd8c:	4798      	blx	r3
    dd8e:	1e03      	subs	r3, r0, #0
    dd90:	d00c      	beq.n	ddac <sensorControl+0x94>
    dd92:	4b44      	ldr	r3, [pc, #272]	; (dea4 <sensorControl+0x18c>)
    dd94:	781b      	ldrb	r3, [r3, #0]
    dd96:	2b00      	cmp	r3, #0
    dd98:	d008      	beq.n	ddac <sensorControl+0x94>
				count++;
    dd9a:	4b46      	ldr	r3, [pc, #280]	; (deb4 <sensorControl+0x19c>)
    dd9c:	681b      	ldr	r3, [r3, #0]
    dd9e:	1c5a      	adds	r2, r3, #1
    dda0:	4b44      	ldr	r3, [pc, #272]	; (deb4 <sensorControl+0x19c>)
    dda2:	601a      	str	r2, [r3, #0]
				off_type = 3;
    dda4:	4b44      	ldr	r3, [pc, #272]	; (deb8 <sensorControl+0x1a0>)
    dda6:	2203      	movs	r2, #3
    dda8:	701a      	strb	r2, [r3, #0]
    ddaa:	e058      	b.n	de5e <sensorControl+0x146>
			}
			else if(axKalman <= -1250 && result){
    ddac:	4b45      	ldr	r3, [pc, #276]	; (dec4 <sensorControl+0x1ac>)
    ddae:	681a      	ldr	r2, [r3, #0]
    ddb0:	4b42      	ldr	r3, [pc, #264]	; (debc <sensorControl+0x1a4>)
    ddb2:	4946      	ldr	r1, [pc, #280]	; (decc <sensorControl+0x1b4>)
    ddb4:	1c10      	adds	r0, r2, #0
    ddb6:	4798      	blx	r3
    ddb8:	1e03      	subs	r3, r0, #0
    ddba:	d00c      	beq.n	ddd6 <sensorControl+0xbe>
    ddbc:	4b39      	ldr	r3, [pc, #228]	; (dea4 <sensorControl+0x18c>)
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	d008      	beq.n	ddd6 <sensorControl+0xbe>
				count++;
    ddc4:	4b3b      	ldr	r3, [pc, #236]	; (deb4 <sensorControl+0x19c>)
    ddc6:	681b      	ldr	r3, [r3, #0]
    ddc8:	1c5a      	adds	r2, r3, #1
    ddca:	4b3a      	ldr	r3, [pc, #232]	; (deb4 <sensorControl+0x19c>)
    ddcc:	601a      	str	r2, [r3, #0]
				off_type = 4;
    ddce:	4b3a      	ldr	r3, [pc, #232]	; (deb8 <sensorControl+0x1a0>)
    ddd0:	2204      	movs	r2, #4
    ddd2:	701a      	strb	r2, [r3, #0]
    ddd4:	e043      	b.n	de5e <sensorControl+0x146>
			}
			else
			count = 0;
    ddd6:	4b37      	ldr	r3, [pc, #220]	; (deb4 <sensorControl+0x19c>)
    ddd8:	2200      	movs	r2, #0
    ddda:	601a      	str	r2, [r3, #0]
    dddc:	e03f      	b.n	de5e <sensorControl+0x146>
		}
		else if(!result){
    ddde:	4b31      	ldr	r3, [pc, #196]	; (dea4 <sensorControl+0x18c>)
    dde0:	781b      	ldrb	r3, [r3, #0]
    dde2:	2201      	movs	r2, #1
    dde4:	4053      	eors	r3, r2
    dde6:	b2db      	uxtb	r3, r3
    dde8:	2b00      	cmp	r3, #0
    ddea:	d038      	beq.n	de5e <sensorControl+0x146>
			if((ayKalman < 750 && off_type == 1) || (ayKalman > -750 && off_type == 2) || (axKalman < 1000 && off_type == 3) || (axKalman > -1000 && off_type == 4)){
    ddec:	4b2e      	ldr	r3, [pc, #184]	; (dea8 <sensorControl+0x190>)
    ddee:	681a      	ldr	r2, [r3, #0]
    ddf0:	4b37      	ldr	r3, [pc, #220]	; (ded0 <sensorControl+0x1b8>)
    ddf2:	4938      	ldr	r1, [pc, #224]	; (ded4 <sensorControl+0x1bc>)
    ddf4:	1c10      	adds	r0, r2, #0
    ddf6:	4798      	blx	r3
    ddf8:	1e03      	subs	r3, r0, #0
    ddfa:	d003      	beq.n	de04 <sensorControl+0xec>
    ddfc:	4b2e      	ldr	r3, [pc, #184]	; (deb8 <sensorControl+0x1a0>)
    ddfe:	781b      	ldrb	r3, [r3, #0]
    de00:	2b01      	cmp	r3, #1
    de02:	d023      	beq.n	de4c <sensorControl+0x134>
    de04:	4b28      	ldr	r3, [pc, #160]	; (dea8 <sensorControl+0x190>)
    de06:	681a      	ldr	r2, [r3, #0]
    de08:	4b33      	ldr	r3, [pc, #204]	; (ded8 <sensorControl+0x1c0>)
    de0a:	4934      	ldr	r1, [pc, #208]	; (dedc <sensorControl+0x1c4>)
    de0c:	1c10      	adds	r0, r2, #0
    de0e:	4798      	blx	r3
    de10:	1e03      	subs	r3, r0, #0
    de12:	d003      	beq.n	de1c <sensorControl+0x104>
    de14:	4b28      	ldr	r3, [pc, #160]	; (deb8 <sensorControl+0x1a0>)
    de16:	781b      	ldrb	r3, [r3, #0]
    de18:	2b02      	cmp	r3, #2
    de1a:	d017      	beq.n	de4c <sensorControl+0x134>
    de1c:	4b29      	ldr	r3, [pc, #164]	; (dec4 <sensorControl+0x1ac>)
    de1e:	681a      	ldr	r2, [r3, #0]
    de20:	4b2b      	ldr	r3, [pc, #172]	; (ded0 <sensorControl+0x1b8>)
    de22:	4923      	ldr	r1, [pc, #140]	; (deb0 <sensorControl+0x198>)
    de24:	1c10      	adds	r0, r2, #0
    de26:	4798      	blx	r3
    de28:	1e03      	subs	r3, r0, #0
    de2a:	d003      	beq.n	de34 <sensorControl+0x11c>
    de2c:	4b22      	ldr	r3, [pc, #136]	; (deb8 <sensorControl+0x1a0>)
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	2b03      	cmp	r3, #3
    de32:	d00b      	beq.n	de4c <sensorControl+0x134>
    de34:	4b23      	ldr	r3, [pc, #140]	; (dec4 <sensorControl+0x1ac>)
    de36:	681a      	ldr	r2, [r3, #0]
    de38:	4b27      	ldr	r3, [pc, #156]	; (ded8 <sensorControl+0x1c0>)
    de3a:	4921      	ldr	r1, [pc, #132]	; (dec0 <sensorControl+0x1a8>)
    de3c:	1c10      	adds	r0, r2, #0
    de3e:	4798      	blx	r3
    de40:	1e03      	subs	r3, r0, #0
    de42:	d009      	beq.n	de58 <sensorControl+0x140>
    de44:	4b1c      	ldr	r3, [pc, #112]	; (deb8 <sensorControl+0x1a0>)
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	2b04      	cmp	r3, #4
    de4a:	d105      	bne.n	de58 <sensorControl+0x140>
				count++;
    de4c:	4b19      	ldr	r3, [pc, #100]	; (deb4 <sensorControl+0x19c>)
    de4e:	681b      	ldr	r3, [r3, #0]
    de50:	1c5a      	adds	r2, r3, #1
    de52:	4b18      	ldr	r3, [pc, #96]	; (deb4 <sensorControl+0x19c>)
    de54:	601a      	str	r2, [r3, #0]
    de56:	e002      	b.n	de5e <sensorControl+0x146>
			}
			else
			count = 0;
    de58:	4b16      	ldr	r3, [pc, #88]	; (deb4 <sensorControl+0x19c>)
    de5a:	2200      	movs	r2, #0
    de5c:	601a      	str	r2, [r3, #0]
		}
		
		if(count > 6)
    de5e:	4b15      	ldr	r3, [pc, #84]	; (deb4 <sensorControl+0x19c>)
    de60:	681b      	ldr	r3, [r3, #0]
    de62:	2b06      	cmp	r3, #6
    de64:	dd0d      	ble.n	de82 <sensorControl+0x16a>
		result = !result;
    de66:	4b0f      	ldr	r3, [pc, #60]	; (dea4 <sensorControl+0x18c>)
    de68:	781b      	ldrb	r3, [r3, #0]
    de6a:	1e5a      	subs	r2, r3, #1
    de6c:	4193      	sbcs	r3, r2
    de6e:	b2db      	uxtb	r3, r3
    de70:	2201      	movs	r2, #1
    de72:	4053      	eors	r3, r2
    de74:	b2db      	uxtb	r3, r3
    de76:	1c1a      	adds	r2, r3, #0
    de78:	2301      	movs	r3, #1
    de7a:	4013      	ands	r3, r2
    de7c:	b2da      	uxtb	r2, r3
    de7e:	4b09      	ldr	r3, [pc, #36]	; (dea4 <sensorControl+0x18c>)
    de80:	701a      	strb	r2, [r3, #0]

		if(result)
    de82:	4b08      	ldr	r3, [pc, #32]	; (dea4 <sensorControl+0x18c>)
    de84:	781b      	ldrb	r3, [r3, #0]
    de86:	2b00      	cmp	r3, #0
    de88:	d002      	beq.n	de90 <sensorControl+0x178>
		off_type = 0;
    de8a:	4b0b      	ldr	r3, [pc, #44]	; (deb8 <sensorControl+0x1a0>)
    de8c:	2200      	movs	r2, #0
    de8e:	701a      	strb	r2, [r3, #0]

		return result;
    de90:	4b04      	ldr	r3, [pc, #16]	; (dea4 <sensorControl+0x18c>)
    de92:	781b      	ldrb	r3, [r3, #0]
    de94:	e000      	b.n	de98 <sensorControl+0x180>
	}
	else
	return 1;
    de96:	2301      	movs	r3, #1
}
    de98:	0018      	movs	r0, r3
    de9a:	46bd      	mov	sp, r7
    de9c:	bd80      	pop	{r7, pc}
    de9e:	46c0      	nop			; (mov r8, r8)
    dea0:	20000371 	.word	0x20000371
    dea4:	200000fc 	.word	0x200000fc
    dea8:	2000033c 	.word	0x2000033c
    deac:	000187d5 	.word	0x000187d5
    deb0:	447a0000 	.word	0x447a0000
    deb4:	2000045c 	.word	0x2000045c
    deb8:	20000460 	.word	0x20000460
    debc:	000187ad 	.word	0x000187ad
    dec0:	c47a0000 	.word	0xc47a0000
    dec4:	20000338 	.word	0x20000338
    dec8:	449c4000 	.word	0x449c4000
    decc:	c49c4000 	.word	0xc49c4000
    ded0:	00018799 	.word	0x00018799
    ded4:	443b8000 	.word	0x443b8000
    ded8:	000187c1 	.word	0x000187c1
    dedc:	c43b8000 	.word	0xc43b8000

0000dee0 <getLightSens>:


struct adc_module adc1;
void getLightSens(uint16_t* light_val) {
    dee0:	b580      	push	{r7, lr}
    dee2:	b082      	sub	sp, #8
    dee4:	af00      	add	r7, sp, #0
    dee6:	6078      	str	r0, [r7, #4]
	static bool START_NEW_CONVERSION = true;
	if(START_NEW_CONVERSION){
    dee8:	4b12      	ldr	r3, [pc, #72]	; (df34 <getLightSens+0x54>)
    deea:	781b      	ldrb	r3, [r3, #0]
    deec:	2b00      	cmp	r3, #0
    deee:	d007      	beq.n	df00 <getLightSens+0x20>
		adc_start_conversion(&adc1);
    def0:	4b11      	ldr	r3, [pc, #68]	; (df38 <getLightSens+0x58>)
    def2:	0018      	movs	r0, r3
    def4:	4b11      	ldr	r3, [pc, #68]	; (df3c <getLightSens+0x5c>)
    def6:	4798      	blx	r3
		START_NEW_CONVERSION = false;
    def8:	4b0e      	ldr	r3, [pc, #56]	; (df34 <getLightSens+0x54>)
    defa:	2200      	movs	r2, #0
    defc:	701a      	strb	r2, [r3, #0]
		} else if(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY){
		adc_read(&adc1, light_val);
		adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
		START_NEW_CONVERSION = true;
	}
}
    defe:	e014      	b.n	df2a <getLightSens+0x4a>
		} else if(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY){
    df00:	4b0d      	ldr	r3, [pc, #52]	; (df38 <getLightSens+0x58>)
    df02:	0018      	movs	r0, r3
    df04:	4b0e      	ldr	r3, [pc, #56]	; (df40 <getLightSens+0x60>)
    df06:	4798      	blx	r3
    df08:	0003      	movs	r3, r0
    df0a:	2b01      	cmp	r3, #1
    df0c:	d00d      	beq.n	df2a <getLightSens+0x4a>
		adc_read(&adc1, light_val);
    df0e:	687a      	ldr	r2, [r7, #4]
    df10:	4b09      	ldr	r3, [pc, #36]	; (df38 <getLightSens+0x58>)
    df12:	0011      	movs	r1, r2
    df14:	0018      	movs	r0, r3
    df16:	4b0b      	ldr	r3, [pc, #44]	; (df44 <getLightSens+0x64>)
    df18:	4798      	blx	r3
		adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
    df1a:	4b07      	ldr	r3, [pc, #28]	; (df38 <getLightSens+0x58>)
    df1c:	2101      	movs	r1, #1
    df1e:	0018      	movs	r0, r3
    df20:	4b09      	ldr	r3, [pc, #36]	; (df48 <getLightSens+0x68>)
    df22:	4798      	blx	r3
		START_NEW_CONVERSION = true;
    df24:	4b03      	ldr	r3, [pc, #12]	; (df34 <getLightSens+0x54>)
    df26:	2201      	movs	r2, #1
    df28:	701a      	strb	r2, [r3, #0]
}
    df2a:	46c0      	nop			; (mov r8, r8)
    df2c:	46bd      	mov	sp, r7
    df2e:	b002      	add	sp, #8
    df30:	bd80      	pop	{r7, pc}
    df32:	46c0      	nop			; (mov r8, r8)
    df34:	200000fd 	.word	0x200000fd
    df38:	20000f84 	.word	0x20000f84
    df3c:	000096c5 	.word	0x000096c5
    df40:	000095d5 	.word	0x000095d5
    df44:	0000970d 	.word	0x0000970d
    df48:	00009629 	.word	0x00009629

0000df4c <setDigitalHue>:

// Start: 0-764*zoom
// Zoom: 1-10
void setDigitalHue(uint16_t start, uint8_t zoom, uint16_t offset, uint8_t hue_brightness, bool reverse_direction){
    df4c:	b5b0      	push	{r4, r5, r7, lr}
    df4e:	b084      	sub	sp, #16
    df50:	af00      	add	r7, sp, #0
    df52:	0005      	movs	r5, r0
    df54:	000c      	movs	r4, r1
    df56:	0010      	movs	r0, r2
    df58:	0019      	movs	r1, r3
    df5a:	1dbb      	adds	r3, r7, #6
    df5c:	1c2a      	adds	r2, r5, #0
    df5e:	801a      	strh	r2, [r3, #0]
    df60:	1d7b      	adds	r3, r7, #5
    df62:	1c22      	adds	r2, r4, #0
    df64:	701a      	strb	r2, [r3, #0]
    df66:	1cbb      	adds	r3, r7, #2
    df68:	1c02      	adds	r2, r0, #0
    df6a:	801a      	strh	r2, [r3, #0]
    df6c:	1d3b      	adds	r3, r7, #4
    df6e:	1c0a      	adds	r2, r1, #0
    df70:	701a      	strb	r2, [r3, #0]
	int x = 0;
    df72:	2300      	movs	r3, #0
    df74:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0; i < led_num; i++)
    df76:	230a      	movs	r3, #10
    df78:	18fb      	adds	r3, r7, r3
    df7a:	2200      	movs	r2, #0
    df7c:	801a      	strh	r2, [r3, #0]
    df7e:	e176      	b.n	e26e <setDigitalHue+0x322>
	{
		//if(reverse_direction)
		//	start= -start+255*6;
		x = (start+offset) - (i*((764)/led_num));
    df80:	1dbb      	adds	r3, r7, #6
    df82:	881a      	ldrh	r2, [r3, #0]
    df84:	1cbb      	adds	r3, r7, #2
    df86:	881b      	ldrh	r3, [r3, #0]
    df88:	18d4      	adds	r4, r2, r3
    df8a:	230a      	movs	r3, #10
    df8c:	18fb      	adds	r3, r7, r3
    df8e:	881d      	ldrh	r5, [r3, #0]
    df90:	4bbd      	ldr	r3, [pc, #756]	; (e288 <setDigitalHue+0x33c>)
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	001a      	movs	r2, r3
    df96:	4bbd      	ldr	r3, [pc, #756]	; (e28c <setDigitalHue+0x340>)
    df98:	0011      	movs	r1, r2
    df9a:	22bf      	movs	r2, #191	; 0xbf
    df9c:	0090      	lsls	r0, r2, #2
    df9e:	4798      	blx	r3
    dfa0:	0003      	movs	r3, r0
    dfa2:	436b      	muls	r3, r5
    dfa4:	1ae3      	subs	r3, r4, r3
    dfa6:	60fb      	str	r3, [r7, #12]
		while(x<0)
    dfa8:	e007      	b.n	dfba <setDigitalHue+0x6e>
			x += (764*zoom);
    dfaa:	1d7b      	adds	r3, r7, #5
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	22bf      	movs	r2, #191	; 0xbf
    dfb0:	0092      	lsls	r2, r2, #2
    dfb2:	4353      	muls	r3, r2
    dfb4:	68fa      	ldr	r2, [r7, #12]
    dfb6:	18d3      	adds	r3, r2, r3
    dfb8:	60fb      	str	r3, [r7, #12]
		while(x<0)
    dfba:	68fb      	ldr	r3, [r7, #12]
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	dbf4      	blt.n	dfaa <setDigitalHue+0x5e>
		while(x>(764*zoom))
    dfc0:	e006      	b.n	dfd0 <setDigitalHue+0x84>
			x -= (764*zoom);
    dfc2:	1d7b      	adds	r3, r7, #5
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	4ab2      	ldr	r2, [pc, #712]	; (e290 <setDigitalHue+0x344>)
    dfc8:	4353      	muls	r3, r2
    dfca:	68fa      	ldr	r2, [r7, #12]
    dfcc:	18d3      	adds	r3, r2, r3
    dfce:	60fb      	str	r3, [r7, #12]
		while(x>(764*zoom))
    dfd0:	1d7b      	adds	r3, r7, #5
    dfd2:	781b      	ldrb	r3, [r3, #0]
    dfd4:	22bf      	movs	r2, #191	; 0xbf
    dfd6:	0092      	lsls	r2, r2, #2
    dfd8:	435a      	muls	r2, r3
    dfda:	68fb      	ldr	r3, [r7, #12]
    dfdc:	429a      	cmp	r2, r3
    dfde:	dbf0      	blt.n	dfc2 <setDigitalHue+0x76>
			
		L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | hue_brightness);
    dfe0:	230a      	movs	r3, #10
    dfe2:	18fb      	adds	r3, r7, r3
    dfe4:	881b      	ldrh	r3, [r3, #0]
    dfe6:	3301      	adds	r3, #1
    dfe8:	009a      	lsls	r2, r3, #2
    dfea:	230a      	movs	r3, #10
    dfec:	18fb      	adds	r3, r7, r3
    dfee:	881b      	ldrh	r3, [r3, #0]
    dff0:	3301      	adds	r3, #1
    dff2:	009b      	lsls	r3, r3, #2
    dff4:	1d39      	adds	r1, r7, #4
    dff6:	7809      	ldrb	r1, [r1, #0]
    dff8:	2020      	movs	r0, #32
    dffa:	4240      	negs	r0, r0
    dffc:	4301      	orrs	r1, r0
    dffe:	b2c8      	uxtb	r0, r1
    e000:	49a4      	ldr	r1, [pc, #656]	; (e294 <setDigitalHue+0x348>)
    e002:	54c8      	strb	r0, [r1, r3]
    e004:	49a3      	ldr	r1, [pc, #652]	; (e294 <setDigitalHue+0x348>)
    e006:	5cc9      	ldrb	r1, [r1, r3]
    e008:	4ba3      	ldr	r3, [pc, #652]	; (e298 <setDigitalHue+0x34c>)
    e00a:	5499      	strb	r1, [r3, r2]
		if(x/(255*zoom) == 0){
    e00c:	1d7b      	adds	r3, r7, #5
    e00e:	781a      	ldrb	r2, [r3, #0]
    e010:	0013      	movs	r3, r2
    e012:	021b      	lsls	r3, r3, #8
    e014:	1a9a      	subs	r2, r3, r2
    e016:	4b9d      	ldr	r3, [pc, #628]	; (e28c <setDigitalHue+0x340>)
    e018:	0011      	movs	r1, r2
    e01a:	68f8      	ldr	r0, [r7, #12]
    e01c:	4798      	blx	r3
    e01e:	1e03      	subs	r3, r0, #0
    e020:	d157      	bne.n	e0d2 <setDigitalHue+0x186>
			L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
    e022:	230a      	movs	r3, #10
    e024:	18fb      	adds	r3, r7, r3
    e026:	881b      	ldrh	r3, [r3, #0]
    e028:	009b      	lsls	r3, r3, #2
    e02a:	1d5a      	adds	r2, r3, #5
    e02c:	230a      	movs	r3, #10
    e02e:	18fb      	adds	r3, r7, r3
    e030:	881b      	ldrh	r3, [r3, #0]
    e032:	009b      	lsls	r3, r3, #2
    e034:	3305      	adds	r3, #5
    e036:	4997      	ldr	r1, [pc, #604]	; (e294 <setDigitalHue+0x348>)
    e038:	2000      	movs	r0, #0
    e03a:	54c8      	strb	r0, [r1, r3]
    e03c:	4995      	ldr	r1, [pc, #596]	; (e294 <setDigitalHue+0x348>)
    e03e:	5cc9      	ldrb	r1, [r1, r3]
    e040:	4b95      	ldr	r3, [pc, #596]	; (e298 <setDigitalHue+0x34c>)
    e042:	5499      	strb	r1, [r3, r2]
			L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 255-(x%(255*zoom))/zoom;
    e044:	230a      	movs	r3, #10
    e046:	18fb      	adds	r3, r7, r3
    e048:	881b      	ldrh	r3, [r3, #0]
    e04a:	009b      	lsls	r3, r3, #2
    e04c:	1d9d      	adds	r5, r3, #6
    e04e:	230a      	movs	r3, #10
    e050:	18fb      	adds	r3, r7, r3
    e052:	881b      	ldrh	r3, [r3, #0]
    e054:	009b      	lsls	r3, r3, #2
    e056:	1d9c      	adds	r4, r3, #6
    e058:	1d7b      	adds	r3, r7, #5
    e05a:	781a      	ldrb	r2, [r3, #0]
    e05c:	0013      	movs	r3, r2
    e05e:	021b      	lsls	r3, r3, #8
    e060:	1a99      	subs	r1, r3, r2
    e062:	68fa      	ldr	r2, [r7, #12]
    e064:	4b8d      	ldr	r3, [pc, #564]	; (e29c <setDigitalHue+0x350>)
    e066:	0010      	movs	r0, r2
    e068:	4798      	blx	r3
    e06a:	000b      	movs	r3, r1
    e06c:	0018      	movs	r0, r3
    e06e:	1d7b      	adds	r3, r7, #5
    e070:	781a      	ldrb	r2, [r3, #0]
    e072:	4b86      	ldr	r3, [pc, #536]	; (e28c <setDigitalHue+0x340>)
    e074:	0011      	movs	r1, r2
    e076:	4798      	blx	r3
    e078:	0003      	movs	r3, r0
    e07a:	b2db      	uxtb	r3, r3
    e07c:	43db      	mvns	r3, r3
    e07e:	b2da      	uxtb	r2, r3
    e080:	4b84      	ldr	r3, [pc, #528]	; (e294 <setDigitalHue+0x348>)
    e082:	551a      	strb	r2, [r3, r4]
    e084:	4b83      	ldr	r3, [pc, #524]	; (e294 <setDigitalHue+0x348>)
    e086:	5d1a      	ldrb	r2, [r3, r4]
    e088:	4b83      	ldr	r3, [pc, #524]	; (e298 <setDigitalHue+0x34c>)
    e08a:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = (x%(255*zoom))/zoom;
    e08c:	230a      	movs	r3, #10
    e08e:	18fb      	adds	r3, r7, r3
    e090:	881b      	ldrh	r3, [r3, #0]
    e092:	009b      	lsls	r3, r3, #2
    e094:	1ddd      	adds	r5, r3, #7
    e096:	230a      	movs	r3, #10
    e098:	18fb      	adds	r3, r7, r3
    e09a:	881b      	ldrh	r3, [r3, #0]
    e09c:	009b      	lsls	r3, r3, #2
    e09e:	1ddc      	adds	r4, r3, #7
    e0a0:	1d7b      	adds	r3, r7, #5
    e0a2:	781a      	ldrb	r2, [r3, #0]
    e0a4:	0013      	movs	r3, r2
    e0a6:	021b      	lsls	r3, r3, #8
    e0a8:	1a99      	subs	r1, r3, r2
    e0aa:	68fa      	ldr	r2, [r7, #12]
    e0ac:	4b7b      	ldr	r3, [pc, #492]	; (e29c <setDigitalHue+0x350>)
    e0ae:	0010      	movs	r0, r2
    e0b0:	4798      	blx	r3
    e0b2:	000b      	movs	r3, r1
    e0b4:	0018      	movs	r0, r3
    e0b6:	1d7b      	adds	r3, r7, #5
    e0b8:	781a      	ldrb	r2, [r3, #0]
    e0ba:	4b74      	ldr	r3, [pc, #464]	; (e28c <setDigitalHue+0x340>)
    e0bc:	0011      	movs	r1, r2
    e0be:	4798      	blx	r3
    e0c0:	0003      	movs	r3, r0
    e0c2:	b2da      	uxtb	r2, r3
    e0c4:	4b73      	ldr	r3, [pc, #460]	; (e294 <setDigitalHue+0x348>)
    e0c6:	551a      	strb	r2, [r3, r4]
    e0c8:	4b72      	ldr	r3, [pc, #456]	; (e294 <setDigitalHue+0x348>)
    e0ca:	5d1a      	ldrb	r2, [r3, r4]
    e0cc:	4b72      	ldr	r3, [pc, #456]	; (e298 <setDigitalHue+0x34c>)
    e0ce:	555a      	strb	r2, [r3, r5]
    e0d0:	e0c6      	b.n	e260 <setDigitalHue+0x314>
		} else if(x/(255*zoom) == 1){
    e0d2:	1d7b      	adds	r3, r7, #5
    e0d4:	781a      	ldrb	r2, [r3, #0]
    e0d6:	0013      	movs	r3, r2
    e0d8:	021b      	lsls	r3, r3, #8
    e0da:	1a9a      	subs	r2, r3, r2
    e0dc:	4b6b      	ldr	r3, [pc, #428]	; (e28c <setDigitalHue+0x340>)
    e0de:	0011      	movs	r1, r2
    e0e0:	68f8      	ldr	r0, [r7, #12]
    e0e2:	4798      	blx	r3
    e0e4:	0003      	movs	r3, r0
    e0e6:	2b01      	cmp	r3, #1
    e0e8:	d157      	bne.n	e19a <setDigitalHue+0x24e>
			L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = (x%(255*zoom))/zoom;
    e0ea:	230a      	movs	r3, #10
    e0ec:	18fb      	adds	r3, r7, r3
    e0ee:	881b      	ldrh	r3, [r3, #0]
    e0f0:	009b      	lsls	r3, r3, #2
    e0f2:	1d5d      	adds	r5, r3, #5
    e0f4:	230a      	movs	r3, #10
    e0f6:	18fb      	adds	r3, r7, r3
    e0f8:	881b      	ldrh	r3, [r3, #0]
    e0fa:	009b      	lsls	r3, r3, #2
    e0fc:	1d5c      	adds	r4, r3, #5
    e0fe:	1d7b      	adds	r3, r7, #5
    e100:	781a      	ldrb	r2, [r3, #0]
    e102:	0013      	movs	r3, r2
    e104:	021b      	lsls	r3, r3, #8
    e106:	1a99      	subs	r1, r3, r2
    e108:	68fa      	ldr	r2, [r7, #12]
    e10a:	4b64      	ldr	r3, [pc, #400]	; (e29c <setDigitalHue+0x350>)
    e10c:	0010      	movs	r0, r2
    e10e:	4798      	blx	r3
    e110:	000b      	movs	r3, r1
    e112:	0018      	movs	r0, r3
    e114:	1d7b      	adds	r3, r7, #5
    e116:	781a      	ldrb	r2, [r3, #0]
    e118:	4b5c      	ldr	r3, [pc, #368]	; (e28c <setDigitalHue+0x340>)
    e11a:	0011      	movs	r1, r2
    e11c:	4798      	blx	r3
    e11e:	0003      	movs	r3, r0
    e120:	b2da      	uxtb	r2, r3
    e122:	4b5c      	ldr	r3, [pc, #368]	; (e294 <setDigitalHue+0x348>)
    e124:	551a      	strb	r2, [r3, r4]
    e126:	4b5b      	ldr	r3, [pc, #364]	; (e294 <setDigitalHue+0x348>)
    e128:	5d1a      	ldrb	r2, [r3, r4]
    e12a:	4b5b      	ldr	r3, [pc, #364]	; (e298 <setDigitalHue+0x34c>)
    e12c:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
    e12e:	230a      	movs	r3, #10
    e130:	18fb      	adds	r3, r7, r3
    e132:	881b      	ldrh	r3, [r3, #0]
    e134:	009b      	lsls	r3, r3, #2
    e136:	1d9a      	adds	r2, r3, #6
    e138:	230a      	movs	r3, #10
    e13a:	18fb      	adds	r3, r7, r3
    e13c:	881b      	ldrh	r3, [r3, #0]
    e13e:	009b      	lsls	r3, r3, #2
    e140:	3306      	adds	r3, #6
    e142:	4954      	ldr	r1, [pc, #336]	; (e294 <setDigitalHue+0x348>)
    e144:	2000      	movs	r0, #0
    e146:	54c8      	strb	r0, [r1, r3]
    e148:	4952      	ldr	r1, [pc, #328]	; (e294 <setDigitalHue+0x348>)
    e14a:	5cc9      	ldrb	r1, [r1, r3]
    e14c:	4b52      	ldr	r3, [pc, #328]	; (e298 <setDigitalHue+0x34c>)
    e14e:	5499      	strb	r1, [r3, r2]
			L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 255-(x%(255*zoom))/zoom;
    e150:	230a      	movs	r3, #10
    e152:	18fb      	adds	r3, r7, r3
    e154:	881b      	ldrh	r3, [r3, #0]
    e156:	009b      	lsls	r3, r3, #2
    e158:	1ddd      	adds	r5, r3, #7
    e15a:	230a      	movs	r3, #10
    e15c:	18fb      	adds	r3, r7, r3
    e15e:	881b      	ldrh	r3, [r3, #0]
    e160:	009b      	lsls	r3, r3, #2
    e162:	1ddc      	adds	r4, r3, #7
    e164:	1d7b      	adds	r3, r7, #5
    e166:	781a      	ldrb	r2, [r3, #0]
    e168:	0013      	movs	r3, r2
    e16a:	021b      	lsls	r3, r3, #8
    e16c:	1a99      	subs	r1, r3, r2
    e16e:	68fa      	ldr	r2, [r7, #12]
    e170:	4b4a      	ldr	r3, [pc, #296]	; (e29c <setDigitalHue+0x350>)
    e172:	0010      	movs	r0, r2
    e174:	4798      	blx	r3
    e176:	000b      	movs	r3, r1
    e178:	0018      	movs	r0, r3
    e17a:	1d7b      	adds	r3, r7, #5
    e17c:	781a      	ldrb	r2, [r3, #0]
    e17e:	4b43      	ldr	r3, [pc, #268]	; (e28c <setDigitalHue+0x340>)
    e180:	0011      	movs	r1, r2
    e182:	4798      	blx	r3
    e184:	0003      	movs	r3, r0
    e186:	b2db      	uxtb	r3, r3
    e188:	43db      	mvns	r3, r3
    e18a:	b2da      	uxtb	r2, r3
    e18c:	4b41      	ldr	r3, [pc, #260]	; (e294 <setDigitalHue+0x348>)
    e18e:	551a      	strb	r2, [r3, r4]
    e190:	4b40      	ldr	r3, [pc, #256]	; (e294 <setDigitalHue+0x348>)
    e192:	5d1a      	ldrb	r2, [r3, r4]
    e194:	4b40      	ldr	r3, [pc, #256]	; (e298 <setDigitalHue+0x34c>)
    e196:	555a      	strb	r2, [r3, r5]
    e198:	e062      	b.n	e260 <setDigitalHue+0x314>
		} else if(x/(255*zoom) == 2){
    e19a:	1d7b      	adds	r3, r7, #5
    e19c:	781a      	ldrb	r2, [r3, #0]
    e19e:	0013      	movs	r3, r2
    e1a0:	021b      	lsls	r3, r3, #8
    e1a2:	1a9a      	subs	r2, r3, r2
    e1a4:	4b39      	ldr	r3, [pc, #228]	; (e28c <setDigitalHue+0x340>)
    e1a6:	0011      	movs	r1, r2
    e1a8:	68f8      	ldr	r0, [r7, #12]
    e1aa:	4798      	blx	r3
    e1ac:	0003      	movs	r3, r0
    e1ae:	2b02      	cmp	r3, #2
    e1b0:	d156      	bne.n	e260 <setDigitalHue+0x314>
			L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 255-(x%(255*zoom))/zoom;
    e1b2:	230a      	movs	r3, #10
    e1b4:	18fb      	adds	r3, r7, r3
    e1b6:	881b      	ldrh	r3, [r3, #0]
    e1b8:	009b      	lsls	r3, r3, #2
    e1ba:	1d5d      	adds	r5, r3, #5
    e1bc:	230a      	movs	r3, #10
    e1be:	18fb      	adds	r3, r7, r3
    e1c0:	881b      	ldrh	r3, [r3, #0]
    e1c2:	009b      	lsls	r3, r3, #2
    e1c4:	1d5c      	adds	r4, r3, #5
    e1c6:	1d7b      	adds	r3, r7, #5
    e1c8:	781a      	ldrb	r2, [r3, #0]
    e1ca:	0013      	movs	r3, r2
    e1cc:	021b      	lsls	r3, r3, #8
    e1ce:	1a99      	subs	r1, r3, r2
    e1d0:	68fa      	ldr	r2, [r7, #12]
    e1d2:	4b32      	ldr	r3, [pc, #200]	; (e29c <setDigitalHue+0x350>)
    e1d4:	0010      	movs	r0, r2
    e1d6:	4798      	blx	r3
    e1d8:	000b      	movs	r3, r1
    e1da:	0018      	movs	r0, r3
    e1dc:	1d7b      	adds	r3, r7, #5
    e1de:	781a      	ldrb	r2, [r3, #0]
    e1e0:	4b2a      	ldr	r3, [pc, #168]	; (e28c <setDigitalHue+0x340>)
    e1e2:	0011      	movs	r1, r2
    e1e4:	4798      	blx	r3
    e1e6:	0003      	movs	r3, r0
    e1e8:	b2db      	uxtb	r3, r3
    e1ea:	43db      	mvns	r3, r3
    e1ec:	b2da      	uxtb	r2, r3
    e1ee:	4b29      	ldr	r3, [pc, #164]	; (e294 <setDigitalHue+0x348>)
    e1f0:	551a      	strb	r2, [r3, r4]
    e1f2:	4b28      	ldr	r3, [pc, #160]	; (e294 <setDigitalHue+0x348>)
    e1f4:	5d1a      	ldrb	r2, [r3, r4]
    e1f6:	4b28      	ldr	r3, [pc, #160]	; (e298 <setDigitalHue+0x34c>)
    e1f8:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = (x%(255*zoom))/zoom;
    e1fa:	230a      	movs	r3, #10
    e1fc:	18fb      	adds	r3, r7, r3
    e1fe:	881b      	ldrh	r3, [r3, #0]
    e200:	009b      	lsls	r3, r3, #2
    e202:	1d9d      	adds	r5, r3, #6
    e204:	230a      	movs	r3, #10
    e206:	18fb      	adds	r3, r7, r3
    e208:	881b      	ldrh	r3, [r3, #0]
    e20a:	009b      	lsls	r3, r3, #2
    e20c:	1d9c      	adds	r4, r3, #6
    e20e:	1d7b      	adds	r3, r7, #5
    e210:	781a      	ldrb	r2, [r3, #0]
    e212:	0013      	movs	r3, r2
    e214:	021b      	lsls	r3, r3, #8
    e216:	1a99      	subs	r1, r3, r2
    e218:	68fa      	ldr	r2, [r7, #12]
    e21a:	4b20      	ldr	r3, [pc, #128]	; (e29c <setDigitalHue+0x350>)
    e21c:	0010      	movs	r0, r2
    e21e:	4798      	blx	r3
    e220:	000b      	movs	r3, r1
    e222:	0018      	movs	r0, r3
    e224:	1d7b      	adds	r3, r7, #5
    e226:	781a      	ldrb	r2, [r3, #0]
    e228:	4b18      	ldr	r3, [pc, #96]	; (e28c <setDigitalHue+0x340>)
    e22a:	0011      	movs	r1, r2
    e22c:	4798      	blx	r3
    e22e:	0003      	movs	r3, r0
    e230:	b2da      	uxtb	r2, r3
    e232:	4b18      	ldr	r3, [pc, #96]	; (e294 <setDigitalHue+0x348>)
    e234:	551a      	strb	r2, [r3, r4]
    e236:	4b17      	ldr	r3, [pc, #92]	; (e294 <setDigitalHue+0x348>)
    e238:	5d1a      	ldrb	r2, [r3, r4]
    e23a:	4b17      	ldr	r3, [pc, #92]	; (e298 <setDigitalHue+0x34c>)
    e23c:	555a      	strb	r2, [r3, r5]
			L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
    e23e:	230a      	movs	r3, #10
    e240:	18fb      	adds	r3, r7, r3
    e242:	881b      	ldrh	r3, [r3, #0]
    e244:	009b      	lsls	r3, r3, #2
    e246:	1dda      	adds	r2, r3, #7
    e248:	230a      	movs	r3, #10
    e24a:	18fb      	adds	r3, r7, r3
    e24c:	881b      	ldrh	r3, [r3, #0]
    e24e:	009b      	lsls	r3, r3, #2
    e250:	3307      	adds	r3, #7
    e252:	4910      	ldr	r1, [pc, #64]	; (e294 <setDigitalHue+0x348>)
    e254:	2000      	movs	r0, #0
    e256:	54c8      	strb	r0, [r1, r3]
    e258:	490e      	ldr	r1, [pc, #56]	; (e294 <setDigitalHue+0x348>)
    e25a:	5cc9      	ldrb	r1, [r1, r3]
    e25c:	4b0e      	ldr	r3, [pc, #56]	; (e298 <setDigitalHue+0x34c>)
    e25e:	5499      	strb	r1, [r3, r2]
	for(uint16_t i = 0; i < led_num; i++)
    e260:	230a      	movs	r3, #10
    e262:	18fb      	adds	r3, r7, r3
    e264:	881a      	ldrh	r2, [r3, #0]
    e266:	230a      	movs	r3, #10
    e268:	18fb      	adds	r3, r7, r3
    e26a:	3201      	adds	r2, #1
    e26c:	801a      	strh	r2, [r3, #0]
    e26e:	4b06      	ldr	r3, [pc, #24]	; (e288 <setDigitalHue+0x33c>)
    e270:	781b      	ldrb	r3, [r3, #0]
    e272:	b29b      	uxth	r3, r3
    e274:	220a      	movs	r2, #10
    e276:	18ba      	adds	r2, r7, r2
    e278:	8812      	ldrh	r2, [r2, #0]
    e27a:	429a      	cmp	r2, r3
    e27c:	d200      	bcs.n	e280 <setDigitalHue+0x334>
    e27e:	e67f      	b.n	df80 <setDigitalHue+0x34>
		}
	}
}
    e280:	46c0      	nop			; (mov r8, r8)
    e282:	46bd      	mov	sp, r7
    e284:	b004      	add	sp, #16
    e286:	bdb0      	pop	{r4, r5, r7, pc}
    e288:	200000d8 	.word	0x200000d8
    e28c:	00018521 	.word	0x00018521
    e290:	fffffd04 	.word	0xfffffd04
    e294:	20000578 	.word	0x20000578
    e298:	20001420 	.word	0x20001420
    e29c:	000186ed 	.word	0x000186ed

0000e2a0 <setDigitalLEDHue>:

void setDigitalLEDHue(uint16_t pos, uint8_t zoom, uint8_t hue_brightness, uint8_t led){
    e2a0:	b5b0      	push	{r4, r5, r7, lr}
    e2a2:	b084      	sub	sp, #16
    e2a4:	af00      	add	r7, sp, #0
    e2a6:	0005      	movs	r5, r0
    e2a8:	000c      	movs	r4, r1
    e2aa:	0010      	movs	r0, r2
    e2ac:	0019      	movs	r1, r3
    e2ae:	1dbb      	adds	r3, r7, #6
    e2b0:	1c2a      	adds	r2, r5, #0
    e2b2:	801a      	strh	r2, [r3, #0]
    e2b4:	1d7b      	adds	r3, r7, #5
    e2b6:	1c22      	adds	r2, r4, #0
    e2b8:	701a      	strb	r2, [r3, #0]
    e2ba:	1d3b      	adds	r3, r7, #4
    e2bc:	1c02      	adds	r2, r0, #0
    e2be:	701a      	strb	r2, [r3, #0]
    e2c0:	1cfb      	adds	r3, r7, #3
    e2c2:	1c0a      	adds	r2, r1, #0
    e2c4:	701a      	strb	r2, [r3, #0]
	int x = 0;
    e2c6:	2300      	movs	r3, #0
    e2c8:	60fb      	str	r3, [r7, #12]

	x = pos;
    e2ca:	1dbb      	adds	r3, r7, #6
    e2cc:	881b      	ldrh	r3, [r3, #0]
    e2ce:	60fb      	str	r3, [r7, #12]
	
	L_SPI_send_buf[(led*4)+4] = R_SPI_send_buf[(led*4)+4] = (0b11100000 | hue_brightness);
    e2d0:	1cfb      	adds	r3, r7, #3
    e2d2:	781b      	ldrb	r3, [r3, #0]
    e2d4:	3301      	adds	r3, #1
    e2d6:	009a      	lsls	r2, r3, #2
    e2d8:	1cfb      	adds	r3, r7, #3
    e2da:	781b      	ldrb	r3, [r3, #0]
    e2dc:	3301      	adds	r3, #1
    e2de:	009b      	lsls	r3, r3, #2
    e2e0:	1d39      	adds	r1, r7, #4
    e2e2:	7809      	ldrb	r1, [r1, #0]
    e2e4:	2020      	movs	r0, #32
    e2e6:	4240      	negs	r0, r0
    e2e8:	4301      	orrs	r1, r0
    e2ea:	b2c8      	uxtb	r0, r1
    e2ec:	4990      	ldr	r1, [pc, #576]	; (e530 <setDigitalLEDHue+0x290>)
    e2ee:	54c8      	strb	r0, [r1, r3]
    e2f0:	498f      	ldr	r1, [pc, #572]	; (e530 <setDigitalLEDHue+0x290>)
    e2f2:	5cc9      	ldrb	r1, [r1, r3]
    e2f4:	4b8f      	ldr	r3, [pc, #572]	; (e534 <setDigitalLEDHue+0x294>)
    e2f6:	5499      	strb	r1, [r3, r2]
	if(x/(255*zoom) == 0){
    e2f8:	1d7b      	adds	r3, r7, #5
    e2fa:	781a      	ldrb	r2, [r3, #0]
    e2fc:	0013      	movs	r3, r2
    e2fe:	021b      	lsls	r3, r3, #8
    e300:	1a9a      	subs	r2, r3, r2
    e302:	4b8d      	ldr	r3, [pc, #564]	; (e538 <setDigitalLEDHue+0x298>)
    e304:	0011      	movs	r1, r2
    e306:	68f8      	ldr	r0, [r7, #12]
    e308:	4798      	blx	r3
    e30a:	1e03      	subs	r3, r0, #0
    e30c:	d151      	bne.n	e3b2 <setDigitalLEDHue+0x112>
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = 0;
    e30e:	1cfb      	adds	r3, r7, #3
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	009b      	lsls	r3, r3, #2
    e314:	1d5a      	adds	r2, r3, #5
    e316:	1cfb      	adds	r3, r7, #3
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	009b      	lsls	r3, r3, #2
    e31c:	3305      	adds	r3, #5
    e31e:	4984      	ldr	r1, [pc, #528]	; (e530 <setDigitalLEDHue+0x290>)
    e320:	2000      	movs	r0, #0
    e322:	54c8      	strb	r0, [r1, r3]
    e324:	4982      	ldr	r1, [pc, #520]	; (e530 <setDigitalLEDHue+0x290>)
    e326:	5cc9      	ldrb	r1, [r1, r3]
    e328:	4b82      	ldr	r3, [pc, #520]	; (e534 <setDigitalLEDHue+0x294>)
    e32a:	5499      	strb	r1, [r3, r2]
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = 255-(x%(255*zoom))/zoom;
    e32c:	1cfb      	adds	r3, r7, #3
    e32e:	781b      	ldrb	r3, [r3, #0]
    e330:	009b      	lsls	r3, r3, #2
    e332:	1d9d      	adds	r5, r3, #6
    e334:	1cfb      	adds	r3, r7, #3
    e336:	781b      	ldrb	r3, [r3, #0]
    e338:	009b      	lsls	r3, r3, #2
    e33a:	1d9c      	adds	r4, r3, #6
    e33c:	1d7b      	adds	r3, r7, #5
    e33e:	781a      	ldrb	r2, [r3, #0]
    e340:	0013      	movs	r3, r2
    e342:	021b      	lsls	r3, r3, #8
    e344:	1a99      	subs	r1, r3, r2
    e346:	68fa      	ldr	r2, [r7, #12]
    e348:	4b7c      	ldr	r3, [pc, #496]	; (e53c <setDigitalLEDHue+0x29c>)
    e34a:	0010      	movs	r0, r2
    e34c:	4798      	blx	r3
    e34e:	000b      	movs	r3, r1
    e350:	0018      	movs	r0, r3
    e352:	1d7b      	adds	r3, r7, #5
    e354:	781a      	ldrb	r2, [r3, #0]
    e356:	4b78      	ldr	r3, [pc, #480]	; (e538 <setDigitalLEDHue+0x298>)
    e358:	0011      	movs	r1, r2
    e35a:	4798      	blx	r3
    e35c:	0003      	movs	r3, r0
    e35e:	b2db      	uxtb	r3, r3
    e360:	43db      	mvns	r3, r3
    e362:	b2da      	uxtb	r2, r3
    e364:	4b72      	ldr	r3, [pc, #456]	; (e530 <setDigitalLEDHue+0x290>)
    e366:	551a      	strb	r2, [r3, r4]
    e368:	4b71      	ldr	r3, [pc, #452]	; (e530 <setDigitalLEDHue+0x290>)
    e36a:	5d1a      	ldrb	r2, [r3, r4]
    e36c:	4b71      	ldr	r3, [pc, #452]	; (e534 <setDigitalLEDHue+0x294>)
    e36e:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = (x%(255*zoom))/zoom;
    e370:	1cfb      	adds	r3, r7, #3
    e372:	781b      	ldrb	r3, [r3, #0]
    e374:	009b      	lsls	r3, r3, #2
    e376:	1ddd      	adds	r5, r3, #7
    e378:	1cfb      	adds	r3, r7, #3
    e37a:	781b      	ldrb	r3, [r3, #0]
    e37c:	009b      	lsls	r3, r3, #2
    e37e:	1ddc      	adds	r4, r3, #7
    e380:	1d7b      	adds	r3, r7, #5
    e382:	781a      	ldrb	r2, [r3, #0]
    e384:	0013      	movs	r3, r2
    e386:	021b      	lsls	r3, r3, #8
    e388:	1a99      	subs	r1, r3, r2
    e38a:	68fa      	ldr	r2, [r7, #12]
    e38c:	4b6b      	ldr	r3, [pc, #428]	; (e53c <setDigitalLEDHue+0x29c>)
    e38e:	0010      	movs	r0, r2
    e390:	4798      	blx	r3
    e392:	000b      	movs	r3, r1
    e394:	0018      	movs	r0, r3
    e396:	1d7b      	adds	r3, r7, #5
    e398:	781a      	ldrb	r2, [r3, #0]
    e39a:	4b67      	ldr	r3, [pc, #412]	; (e538 <setDigitalLEDHue+0x298>)
    e39c:	0011      	movs	r1, r2
    e39e:	4798      	blx	r3
    e3a0:	0003      	movs	r3, r0
    e3a2:	b2da      	uxtb	r2, r3
    e3a4:	4b62      	ldr	r3, [pc, #392]	; (e530 <setDigitalLEDHue+0x290>)
    e3a6:	551a      	strb	r2, [r3, r4]
    e3a8:	4b61      	ldr	r3, [pc, #388]	; (e530 <setDigitalLEDHue+0x290>)
    e3aa:	5d1a      	ldrb	r2, [r3, r4]
    e3ac:	4b61      	ldr	r3, [pc, #388]	; (e534 <setDigitalLEDHue+0x294>)
    e3ae:	555a      	strb	r2, [r3, r5]
		} else if(x/(255*zoom) == 2){
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = 255-(x%(255*zoom))/zoom;
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = (x%(255*zoom))/zoom;
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = 0;
	}
}
    e3b0:	e0ba      	b.n	e528 <setDigitalLEDHue+0x288>
		} else if(x/(255*zoom) == 1){
    e3b2:	1d7b      	adds	r3, r7, #5
    e3b4:	781a      	ldrb	r2, [r3, #0]
    e3b6:	0013      	movs	r3, r2
    e3b8:	021b      	lsls	r3, r3, #8
    e3ba:	1a9a      	subs	r2, r3, r2
    e3bc:	4b5e      	ldr	r3, [pc, #376]	; (e538 <setDigitalLEDHue+0x298>)
    e3be:	0011      	movs	r1, r2
    e3c0:	68f8      	ldr	r0, [r7, #12]
    e3c2:	4798      	blx	r3
    e3c4:	0003      	movs	r3, r0
    e3c6:	2b01      	cmp	r3, #1
    e3c8:	d151      	bne.n	e46e <setDigitalLEDHue+0x1ce>
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = (x%(255*zoom))/zoom;
    e3ca:	1cfb      	adds	r3, r7, #3
    e3cc:	781b      	ldrb	r3, [r3, #0]
    e3ce:	009b      	lsls	r3, r3, #2
    e3d0:	1d5d      	adds	r5, r3, #5
    e3d2:	1cfb      	adds	r3, r7, #3
    e3d4:	781b      	ldrb	r3, [r3, #0]
    e3d6:	009b      	lsls	r3, r3, #2
    e3d8:	1d5c      	adds	r4, r3, #5
    e3da:	1d7b      	adds	r3, r7, #5
    e3dc:	781a      	ldrb	r2, [r3, #0]
    e3de:	0013      	movs	r3, r2
    e3e0:	021b      	lsls	r3, r3, #8
    e3e2:	1a99      	subs	r1, r3, r2
    e3e4:	68fa      	ldr	r2, [r7, #12]
    e3e6:	4b55      	ldr	r3, [pc, #340]	; (e53c <setDigitalLEDHue+0x29c>)
    e3e8:	0010      	movs	r0, r2
    e3ea:	4798      	blx	r3
    e3ec:	000b      	movs	r3, r1
    e3ee:	0018      	movs	r0, r3
    e3f0:	1d7b      	adds	r3, r7, #5
    e3f2:	781a      	ldrb	r2, [r3, #0]
    e3f4:	4b50      	ldr	r3, [pc, #320]	; (e538 <setDigitalLEDHue+0x298>)
    e3f6:	0011      	movs	r1, r2
    e3f8:	4798      	blx	r3
    e3fa:	0003      	movs	r3, r0
    e3fc:	b2da      	uxtb	r2, r3
    e3fe:	4b4c      	ldr	r3, [pc, #304]	; (e530 <setDigitalLEDHue+0x290>)
    e400:	551a      	strb	r2, [r3, r4]
    e402:	4b4b      	ldr	r3, [pc, #300]	; (e530 <setDigitalLEDHue+0x290>)
    e404:	5d1a      	ldrb	r2, [r3, r4]
    e406:	4b4b      	ldr	r3, [pc, #300]	; (e534 <setDigitalLEDHue+0x294>)
    e408:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = 0;
    e40a:	1cfb      	adds	r3, r7, #3
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	009b      	lsls	r3, r3, #2
    e410:	1d9a      	adds	r2, r3, #6
    e412:	1cfb      	adds	r3, r7, #3
    e414:	781b      	ldrb	r3, [r3, #0]
    e416:	009b      	lsls	r3, r3, #2
    e418:	3306      	adds	r3, #6
    e41a:	4945      	ldr	r1, [pc, #276]	; (e530 <setDigitalLEDHue+0x290>)
    e41c:	2000      	movs	r0, #0
    e41e:	54c8      	strb	r0, [r1, r3]
    e420:	4943      	ldr	r1, [pc, #268]	; (e530 <setDigitalLEDHue+0x290>)
    e422:	5cc9      	ldrb	r1, [r1, r3]
    e424:	4b43      	ldr	r3, [pc, #268]	; (e534 <setDigitalLEDHue+0x294>)
    e426:	5499      	strb	r1, [r3, r2]
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = 255-(x%(255*zoom))/zoom;
    e428:	1cfb      	adds	r3, r7, #3
    e42a:	781b      	ldrb	r3, [r3, #0]
    e42c:	009b      	lsls	r3, r3, #2
    e42e:	1ddd      	adds	r5, r3, #7
    e430:	1cfb      	adds	r3, r7, #3
    e432:	781b      	ldrb	r3, [r3, #0]
    e434:	009b      	lsls	r3, r3, #2
    e436:	1ddc      	adds	r4, r3, #7
    e438:	1d7b      	adds	r3, r7, #5
    e43a:	781a      	ldrb	r2, [r3, #0]
    e43c:	0013      	movs	r3, r2
    e43e:	021b      	lsls	r3, r3, #8
    e440:	1a99      	subs	r1, r3, r2
    e442:	68fa      	ldr	r2, [r7, #12]
    e444:	4b3d      	ldr	r3, [pc, #244]	; (e53c <setDigitalLEDHue+0x29c>)
    e446:	0010      	movs	r0, r2
    e448:	4798      	blx	r3
    e44a:	000b      	movs	r3, r1
    e44c:	0018      	movs	r0, r3
    e44e:	1d7b      	adds	r3, r7, #5
    e450:	781a      	ldrb	r2, [r3, #0]
    e452:	4b39      	ldr	r3, [pc, #228]	; (e538 <setDigitalLEDHue+0x298>)
    e454:	0011      	movs	r1, r2
    e456:	4798      	blx	r3
    e458:	0003      	movs	r3, r0
    e45a:	b2db      	uxtb	r3, r3
    e45c:	43db      	mvns	r3, r3
    e45e:	b2da      	uxtb	r2, r3
    e460:	4b33      	ldr	r3, [pc, #204]	; (e530 <setDigitalLEDHue+0x290>)
    e462:	551a      	strb	r2, [r3, r4]
    e464:	4b32      	ldr	r3, [pc, #200]	; (e530 <setDigitalLEDHue+0x290>)
    e466:	5d1a      	ldrb	r2, [r3, r4]
    e468:	4b32      	ldr	r3, [pc, #200]	; (e534 <setDigitalLEDHue+0x294>)
    e46a:	555a      	strb	r2, [r3, r5]
}
    e46c:	e05c      	b.n	e528 <setDigitalLEDHue+0x288>
		} else if(x/(255*zoom) == 2){
    e46e:	1d7b      	adds	r3, r7, #5
    e470:	781a      	ldrb	r2, [r3, #0]
    e472:	0013      	movs	r3, r2
    e474:	021b      	lsls	r3, r3, #8
    e476:	1a9a      	subs	r2, r3, r2
    e478:	4b2f      	ldr	r3, [pc, #188]	; (e538 <setDigitalLEDHue+0x298>)
    e47a:	0011      	movs	r1, r2
    e47c:	68f8      	ldr	r0, [r7, #12]
    e47e:	4798      	blx	r3
    e480:	0003      	movs	r3, r0
    e482:	2b02      	cmp	r3, #2
    e484:	d150      	bne.n	e528 <setDigitalLEDHue+0x288>
		L_SPI_send_buf[(led*4)+5] = R_SPI_send_buf[(led*4)+5] = 255-(x%(255*zoom))/zoom;
    e486:	1cfb      	adds	r3, r7, #3
    e488:	781b      	ldrb	r3, [r3, #0]
    e48a:	009b      	lsls	r3, r3, #2
    e48c:	1d5d      	adds	r5, r3, #5
    e48e:	1cfb      	adds	r3, r7, #3
    e490:	781b      	ldrb	r3, [r3, #0]
    e492:	009b      	lsls	r3, r3, #2
    e494:	1d5c      	adds	r4, r3, #5
    e496:	1d7b      	adds	r3, r7, #5
    e498:	781a      	ldrb	r2, [r3, #0]
    e49a:	0013      	movs	r3, r2
    e49c:	021b      	lsls	r3, r3, #8
    e49e:	1a99      	subs	r1, r3, r2
    e4a0:	68fa      	ldr	r2, [r7, #12]
    e4a2:	4b26      	ldr	r3, [pc, #152]	; (e53c <setDigitalLEDHue+0x29c>)
    e4a4:	0010      	movs	r0, r2
    e4a6:	4798      	blx	r3
    e4a8:	000b      	movs	r3, r1
    e4aa:	0018      	movs	r0, r3
    e4ac:	1d7b      	adds	r3, r7, #5
    e4ae:	781a      	ldrb	r2, [r3, #0]
    e4b0:	4b21      	ldr	r3, [pc, #132]	; (e538 <setDigitalLEDHue+0x298>)
    e4b2:	0011      	movs	r1, r2
    e4b4:	4798      	blx	r3
    e4b6:	0003      	movs	r3, r0
    e4b8:	b2db      	uxtb	r3, r3
    e4ba:	43db      	mvns	r3, r3
    e4bc:	b2da      	uxtb	r2, r3
    e4be:	4b1c      	ldr	r3, [pc, #112]	; (e530 <setDigitalLEDHue+0x290>)
    e4c0:	551a      	strb	r2, [r3, r4]
    e4c2:	4b1b      	ldr	r3, [pc, #108]	; (e530 <setDigitalLEDHue+0x290>)
    e4c4:	5d1a      	ldrb	r2, [r3, r4]
    e4c6:	4b1b      	ldr	r3, [pc, #108]	; (e534 <setDigitalLEDHue+0x294>)
    e4c8:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+6] = R_SPI_send_buf[(led*4)+6] = (x%(255*zoom))/zoom;
    e4ca:	1cfb      	adds	r3, r7, #3
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	009b      	lsls	r3, r3, #2
    e4d0:	1d9d      	adds	r5, r3, #6
    e4d2:	1cfb      	adds	r3, r7, #3
    e4d4:	781b      	ldrb	r3, [r3, #0]
    e4d6:	009b      	lsls	r3, r3, #2
    e4d8:	1d9c      	adds	r4, r3, #6
    e4da:	1d7b      	adds	r3, r7, #5
    e4dc:	781a      	ldrb	r2, [r3, #0]
    e4de:	0013      	movs	r3, r2
    e4e0:	021b      	lsls	r3, r3, #8
    e4e2:	1a99      	subs	r1, r3, r2
    e4e4:	68fa      	ldr	r2, [r7, #12]
    e4e6:	4b15      	ldr	r3, [pc, #84]	; (e53c <setDigitalLEDHue+0x29c>)
    e4e8:	0010      	movs	r0, r2
    e4ea:	4798      	blx	r3
    e4ec:	000b      	movs	r3, r1
    e4ee:	0018      	movs	r0, r3
    e4f0:	1d7b      	adds	r3, r7, #5
    e4f2:	781a      	ldrb	r2, [r3, #0]
    e4f4:	4b10      	ldr	r3, [pc, #64]	; (e538 <setDigitalLEDHue+0x298>)
    e4f6:	0011      	movs	r1, r2
    e4f8:	4798      	blx	r3
    e4fa:	0003      	movs	r3, r0
    e4fc:	b2da      	uxtb	r2, r3
    e4fe:	4b0c      	ldr	r3, [pc, #48]	; (e530 <setDigitalLEDHue+0x290>)
    e500:	551a      	strb	r2, [r3, r4]
    e502:	4b0b      	ldr	r3, [pc, #44]	; (e530 <setDigitalLEDHue+0x290>)
    e504:	5d1a      	ldrb	r2, [r3, r4]
    e506:	4b0b      	ldr	r3, [pc, #44]	; (e534 <setDigitalLEDHue+0x294>)
    e508:	555a      	strb	r2, [r3, r5]
		L_SPI_send_buf[(led*4)+7] = R_SPI_send_buf[(led*4)+7] = 0;
    e50a:	1cfb      	adds	r3, r7, #3
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	009b      	lsls	r3, r3, #2
    e510:	1dda      	adds	r2, r3, #7
    e512:	1cfb      	adds	r3, r7, #3
    e514:	781b      	ldrb	r3, [r3, #0]
    e516:	009b      	lsls	r3, r3, #2
    e518:	3307      	adds	r3, #7
    e51a:	4905      	ldr	r1, [pc, #20]	; (e530 <setDigitalLEDHue+0x290>)
    e51c:	2000      	movs	r0, #0
    e51e:	54c8      	strb	r0, [r1, r3]
    e520:	4903      	ldr	r1, [pc, #12]	; (e530 <setDigitalLEDHue+0x290>)
    e522:	5cc9      	ldrb	r1, [r1, r3]
    e524:	4b03      	ldr	r3, [pc, #12]	; (e534 <setDigitalLEDHue+0x294>)
    e526:	5499      	strb	r1, [r3, r2]
}
    e528:	46c0      	nop			; (mov r8, r8)
    e52a:	46bd      	mov	sp, r7
    e52c:	b004      	add	sp, #16
    e52e:	bdb0      	pop	{r4, r5, r7, pc}
    e530:	20000578 	.word	0x20000578
    e534:	20001420 	.word	0x20001420
    e538:	00018521 	.word	0x00018521
    e53c:	000186ed 	.word	0x000186ed

0000e540 <initIMU>:


float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

void initIMU()
{
    e540:	b580      	push	{r7, lr}
    e542:	b082      	sub	sp, #8
    e544:	af00      	add	r7, sp, #0
	settings.device.agAddress = LSMXD_AG_ADDR;
    e546:	4b3e      	ldr	r3, [pc, #248]	; (e640 <initIMU+0x100>)
    e548:	226a      	movs	r2, #106	; 0x6a
    e54a:	705a      	strb	r2, [r3, #1]
	settings.device.mAddress = LSM9D_M_ADDR;
    e54c:	4b3c      	ldr	r3, [pc, #240]	; (e640 <initIMU+0x100>)
    e54e:	221e      	movs	r2, #30
    e550:	709a      	strb	r2, [r3, #2]

	settings.gyro.enabled = true;
    e552:	4b3b      	ldr	r3, [pc, #236]	; (e640 <initIMU+0x100>)
    e554:	2201      	movs	r2, #1
    e556:	711a      	strb	r2, [r3, #4]
	settings.gyro.enableX = true;
    e558:	4b39      	ldr	r3, [pc, #228]	; (e640 <initIMU+0x100>)
    e55a:	2201      	movs	r2, #1
    e55c:	745a      	strb	r2, [r3, #17]
	settings.gyro.enableY = true;
    e55e:	4b38      	ldr	r3, [pc, #224]	; (e640 <initIMU+0x100>)
    e560:	2201      	movs	r2, #1
    e562:	749a      	strb	r2, [r3, #18]
	settings.gyro.enableZ = true;
    e564:	4b36      	ldr	r3, [pc, #216]	; (e640 <initIMU+0x100>)
    e566:	2201      	movs	r2, #1
    e568:	74da      	strb	r2, [r3, #19]
	settings.gyro.lowPowerEnable = false;
    e56a:	4b35      	ldr	r3, [pc, #212]	; (e640 <initIMU+0x100>)
    e56c:	2200      	movs	r2, #0
    e56e:	729a      	strb	r2, [r3, #10]
	settings.gyro.HPFEnable = false;
    e570:	4b33      	ldr	r3, [pc, #204]	; (e640 <initIMU+0x100>)
    e572:	2200      	movs	r2, #0
    e574:	72da      	strb	r2, [r3, #11]
	settings.gyro.flipX = false;
    e576:	4b32      	ldr	r3, [pc, #200]	; (e640 <initIMU+0x100>)
    e578:	2200      	movs	r2, #0
    e57a:	735a      	strb	r2, [r3, #13]
	settings.gyro.flipY = false; // LSM6D inverted from LSM9D, corrected in init func
    e57c:	4b30      	ldr	r3, [pc, #192]	; (e640 <initIMU+0x100>)
    e57e:	2200      	movs	r2, #0
    e580:	739a      	strb	r2, [r3, #14]
	settings.gyro.flipZ = false;
    e582:	4b2f      	ldr	r3, [pc, #188]	; (e640 <initIMU+0x100>)
    e584:	2200      	movs	r2, #0
    e586:	73da      	strb	r2, [r3, #15]
	settings.gyro.latchInterrupt = true;
    e588:	4b2d      	ldr	r3, [pc, #180]	; (e640 <initIMU+0x100>)
    e58a:	2201      	movs	r2, #1
    e58c:	751a      	strb	r2, [r3, #20]
	
	settings.accel.enabled = true;
    e58e:	4b2c      	ldr	r3, [pc, #176]	; (e640 <initIMU+0x100>)
    e590:	2201      	movs	r2, #1
    e592:	759a      	strb	r2, [r3, #22]
	settings.accel.enableX = true;
    e594:	4b2a      	ldr	r3, [pc, #168]	; (e640 <initIMU+0x100>)
    e596:	2201      	movs	r2, #1
    e598:	765a      	strb	r2, [r3, #25]
	settings.accel.enableY = true;
    e59a:	4b29      	ldr	r3, [pc, #164]	; (e640 <initIMU+0x100>)
    e59c:	2201      	movs	r2, #1
    e59e:	769a      	strb	r2, [r3, #26]
	settings.accel.enableZ = true;
    e5a0:	4b27      	ldr	r3, [pc, #156]	; (e640 <initIMU+0x100>)
    e5a2:	2201      	movs	r2, #1
    e5a4:	76da      	strb	r2, [r3, #27]
	settings.accel.highResEnable = false;
    e5a6:	4b26      	ldr	r3, [pc, #152]	; (e640 <initIMU+0x100>)
    e5a8:	2200      	movs	r2, #0
    e5aa:	775a      	strb	r2, [r3, #29]

	settings.temp.enabled = true;
    e5ac:	4b24      	ldr	r3, [pc, #144]	; (e640 <initIMU+0x100>)
    e5ae:	2227      	movs	r2, #39	; 0x27
    e5b0:	2101      	movs	r1, #1
    e5b2:	5499      	strb	r1, [r3, r2]
	// 2 = power down
	settings.mag.operatingMode = 0;
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	// gyro scale can be 250, 500, 1000, or 2000
	settings.gyro.scale = 250;//245
    e5b4:	4b22      	ldr	r3, [pc, #136]	; (e640 <initIMU+0x100>)
    e5b6:	22fa      	movs	r2, #250	; 0xfa
    e5b8:	80da      	strh	r2, [r3, #6]
	// gyro sample rate: value between 1-8
	// 1 = 12.5		4 = 104		7 = 833
	// 2 = 26		5 = 208		8 = 1660
	// 3 = 52		6 = 416
	settings.gyro.sampleRate = 8;
    e5ba:	4b21      	ldr	r3, [pc, #132]	; (e640 <initIMU+0x100>)
    e5bc:	2208      	movs	r2, #8
    e5be:	721a      	strb	r2, [r3, #8]
	// Gyro HPF cutoff frequency: value between 0-3
	// 0 = 0.0081	2 = 2.07
	// 1 = 0.0324	3 = 16.32
	// Only applies if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
    e5c0:	4b1f      	ldr	r3, [pc, #124]	; (e640 <initIMU+0x100>)
    e5c2:	2200      	movs	r2, #0
    e5c4:	731a      	strb	r2, [r3, #12]
	settings.gyro.orientation = 0;
    e5c6:	4b1e      	ldr	r3, [pc, #120]	; (e640 <initIMU+0x100>)
    e5c8:	2200      	movs	r2, #0
    e5ca:	741a      	strb	r2, [r3, #16]

	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 16;//8
    e5cc:	4b1c      	ldr	r3, [pc, #112]	; (e640 <initIMU+0x100>)
    e5ce:	2210      	movs	r2, #16
    e5d0:	75da      	strb	r2, [r3, #23]
	// accel sample rate can be 1-10
	// 1 = 12.5 Hz		4 = 104 Hz	7 = 833Hz	10 = 6.66kHz
	// 2 = 26 Hz		5 = 208 Hz	8 = 1.66kHz	
	// 3 = 152 Hz		6 = 412 Hz	9 = 3.33kHz	
	settings.accel.sampleRate = 8;
    e5d2:	4b1b      	ldr	r3, [pc, #108]	; (e640 <initIMU+0x100>)
    e5d4:	2208      	movs	r2, #8
    e5d6:	761a      	strb	r2, [r3, #24]
	// Accel cutoff freqeuncy can be any value between 0 - 3.
	// -1 = bandwidth determined by sample rate
	// 0 = 400 Hz   2 = 100 Hz
	// 1 = 200 Hz   3 = 50 Hz
	settings.accel.bandwidth = 0;
    e5d8:	4b19      	ldr	r3, [pc, #100]	; (e640 <initIMU+0x100>)
    e5da:	2200      	movs	r2, #0
    e5dc:	771a      	strb	r2, [r3, #28]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/4    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
    e5de:	4b18      	ldr	r3, [pc, #96]	; (e640 <initIMU+0x100>)
    e5e0:	2200      	movs	r2, #0
    e5e2:	779a      	strb	r2, [r3, #30]
#endif

	for (int i=0; i<3; i++)
    e5e4:	2300      	movs	r3, #0
    e5e6:	607b      	str	r3, [r7, #4]
    e5e8:	e020      	b.n	e62c <initIMU+0xec>
	{
		gBias[i] = 0;
    e5ea:	4b16      	ldr	r3, [pc, #88]	; (e644 <initIMU+0x104>)
    e5ec:	687a      	ldr	r2, [r7, #4]
    e5ee:	0092      	lsls	r2, r2, #2
    e5f0:	2100      	movs	r1, #0
    e5f2:	50d1      	str	r1, [r2, r3]
		aBias[i] = 0;
    e5f4:	4b14      	ldr	r3, [pc, #80]	; (e648 <initIMU+0x108>)
    e5f6:	687a      	ldr	r2, [r7, #4]
    e5f8:	0092      	lsls	r2, r2, #2
    e5fa:	2100      	movs	r1, #0
    e5fc:	50d1      	str	r1, [r2, r3]
		mBias[i] = 0;
    e5fe:	4b13      	ldr	r3, [pc, #76]	; (e64c <initIMU+0x10c>)
    e600:	687a      	ldr	r2, [r7, #4]
    e602:	0092      	lsls	r2, r2, #2
    e604:	2100      	movs	r1, #0
    e606:	50d1      	str	r1, [r2, r3]
		gBiasRaw[i] = 0;
    e608:	4b11      	ldr	r3, [pc, #68]	; (e650 <initIMU+0x110>)
    e60a:	687a      	ldr	r2, [r7, #4]
    e60c:	0052      	lsls	r2, r2, #1
    e60e:	2100      	movs	r1, #0
    e610:	52d1      	strh	r1, [r2, r3]
		aBiasRaw[i] = 0;
    e612:	4b10      	ldr	r3, [pc, #64]	; (e654 <initIMU+0x114>)
    e614:	687a      	ldr	r2, [r7, #4]
    e616:	0052      	lsls	r2, r2, #1
    e618:	2100      	movs	r1, #0
    e61a:	52d1      	strh	r1, [r2, r3]
		mBiasRaw[i] = 0;
    e61c:	4b0e      	ldr	r3, [pc, #56]	; (e658 <initIMU+0x118>)
    e61e:	687a      	ldr	r2, [r7, #4]
    e620:	0052      	lsls	r2, r2, #1
    e622:	2100      	movs	r1, #0
    e624:	52d1      	strh	r1, [r2, r3]
	for (int i=0; i<3; i++)
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	3301      	adds	r3, #1
    e62a:	607b      	str	r3, [r7, #4]
    e62c:	687b      	ldr	r3, [r7, #4]
    e62e:	2b02      	cmp	r3, #2
    e630:	dddb      	ble.n	e5ea <initIMU+0xaa>
	}
	_autoCalc = false;
    e632:	4b0a      	ldr	r3, [pc, #40]	; (e65c <initIMU+0x11c>)
    e634:	2200      	movs	r2, #0
    e636:	701a      	strb	r2, [r3, #0]
}
    e638:	46c0      	nop			; (mov r8, r8)
    e63a:	46bd      	mov	sp, r7
    e63c:	b002      	add	sp, #8
    e63e:	bd80      	pop	{r7, pc}
    e640:	200008bc 	.word	0x200008bc
    e644:	20001a14 	.word	0x20001a14
    e648:	20000560 	.word	0x20000560
    e64c:	20001af0 	.word	0x20001af0
    e650:	20001410 	.word	0x20001410
    e654:	20001418 	.word	0x20001418
    e658:	200006a4 	.word	0x200006a4
    e65c:	20000dcc 	.word	0x20000dcc

0000e660 <beginIMU>:


uint16_t beginIMU()
{
    e660:	b590      	push	{r4, r7, lr}
    e662:	b083      	sub	sp, #12
    e664:	af00      	add	r7, sp, #0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
    e666:	4b1c      	ldr	r3, [pc, #112]	; (e6d8 <beginIMU+0x78>)
    e668:	785a      	ldrb	r2, [r3, #1]
    e66a:	4b1c      	ldr	r3, [pc, #112]	; (e6dc <beginIMU+0x7c>)
    e66c:	701a      	strb	r2, [r3, #0]
	_mAddress = settings.device.mAddress;
    e66e:	4b1a      	ldr	r3, [pc, #104]	; (e6d8 <beginIMU+0x78>)
    e670:	789a      	ldrb	r2, [r3, #2]
    e672:	4b1b      	ldr	r3, [pc, #108]	; (e6e0 <beginIMU+0x80>)
    e674:	701a      	strb	r2, [r3, #0]
	
	constrainScales();
    e676:	4b1b      	ldr	r3, [pc, #108]	; (e6e4 <beginIMU+0x84>)
    e678:	4798      	blx	r3
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
    e67a:	4b1b      	ldr	r3, [pc, #108]	; (e6e8 <beginIMU+0x88>)
    e67c:	4798      	blx	r3
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
    e67e:	4b1b      	ldr	r3, [pc, #108]	; (e6ec <beginIMU+0x8c>)
    e680:	4798      	blx	r3
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
    e682:	4b1b      	ldr	r3, [pc, #108]	; (e6f0 <beginIMU+0x90>)
    e684:	4798      	blx	r3
	
	initI2C();	// Initialize I2C
    e686:	4b1b      	ldr	r3, [pc, #108]	; (e6f4 <beginIMU+0x94>)
    e688:	4798      	blx	r3
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
    e68a:	1dfc      	adds	r4, r7, #7
    e68c:	200f      	movs	r0, #15
    e68e:	4b1a      	ldr	r3, [pc, #104]	; (e6f8 <beginIMU+0x98>)
    e690:	4798      	blx	r3
    e692:	0003      	movs	r3, r0
    e694:	7023      	strb	r3, [r4, #0]
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	uint16_t whoAmICombined = xgTest;
    e696:	1d3b      	adds	r3, r7, #4
    e698:	1dfa      	adds	r2, r7, #7
    e69a:	7812      	ldrb	r2, [r2, #0]
    e69c:	801a      	strh	r2, [r3, #0]
	if (xgTest != 0x69 && xgTest != 0x6A && xgTest != 0x6B && xgTest != 0x6C)//WHO_AM_I_AG_RSP) // A work around to protect for the use of al LSM6DS parts
    e69e:	1dfb      	adds	r3, r7, #7
    e6a0:	781b      	ldrb	r3, [r3, #0]
    e6a2:	2b69      	cmp	r3, #105	; 0x69
    e6a4:	d00d      	beq.n	e6c2 <beginIMU+0x62>
    e6a6:	1dfb      	adds	r3, r7, #7
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	2b6a      	cmp	r3, #106	; 0x6a
    e6ac:	d009      	beq.n	e6c2 <beginIMU+0x62>
    e6ae:	1dfb      	adds	r3, r7, #7
    e6b0:	781b      	ldrb	r3, [r3, #0]
    e6b2:	2b6b      	cmp	r3, #107	; 0x6b
    e6b4:	d005      	beq.n	e6c2 <beginIMU+0x62>
    e6b6:	1dfb      	adds	r3, r7, #7
    e6b8:	781b      	ldrb	r3, [r3, #0]
    e6ba:	2b6c      	cmp	r3, #108	; 0x6c
    e6bc:	d001      	beq.n	e6c2 <beginIMU+0x62>
		return 0;
    e6be:	2300      	movs	r3, #0
    e6c0:	e005      	b.n	e6ce <beginIMU+0x6e>
#endif
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
    e6c2:	4b0e      	ldr	r3, [pc, #56]	; (e6fc <beginIMU+0x9c>)
    e6c4:	4798      	blx	r3
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
    e6c6:	4b0e      	ldr	r3, [pc, #56]	; (e700 <beginIMU+0xa0>)
    e6c8:	4798      	blx	r3
#ifdef HW_3v4
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
#endif

	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
    e6ca:	1d3b      	adds	r3, r7, #4
    e6cc:	881b      	ldrh	r3, [r3, #0]
}
    e6ce:	0018      	movs	r0, r3
    e6d0:	46bd      	mov	sp, r7
    e6d2:	b003      	add	sp, #12
    e6d4:	bd90      	pop	{r4, r7, pc}
    e6d6:	46c0      	nop			; (mov r8, r8)
    e6d8:	200008bc 	.word	0x200008bc
    e6dc:	20001104 	.word	0x20001104
    e6e0:	20000f90 	.word	0x20000f90
    e6e4:	0000ef45 	.word	0x0000ef45
    e6e8:	0000ede5 	.word	0x0000ede5
    e6ec:	0000ee55 	.word	0x0000ee55
    e6f0:	0000ee1d 	.word	0x0000ee1d
    e6f4:	0000f071 	.word	0x0000f071
    e6f8:	0000f005 	.word	0x0000f005
    e6fc:	0000e705 	.word	0x0000e705
    e700:	0000e865 	.word	0x0000e865

0000e704 <initGyro>:

void initGyro()
{
    e704:	b580      	push	{r7, lr}
    e706:	b082      	sub	sp, #8
    e708:	af00      	add	r7, sp, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	uint8_t tempRegValue = 0;
    e70a:	1dfb      	adds	r3, r7, #7
    e70c:	2200      	movs	r2, #0
    e70e:	701a      	strb	r2, [r3, #0]
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
    e710:	4b52      	ldr	r3, [pc, #328]	; (e85c <initGyro+0x158>)
    e712:	791b      	ldrb	r3, [r3, #4]
    e714:	2b00      	cmp	r3, #0
    e716:	d004      	beq.n	e722 <initGyro+0x1e>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x0F) << 4;
    e718:	4b50      	ldr	r3, [pc, #320]	; (e85c <initGyro+0x158>)
    e71a:	7a1b      	ldrb	r3, [r3, #8]
    e71c:	011a      	lsls	r2, r3, #4
    e71e:	1dfb      	adds	r3, r7, #7
    e720:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.gyro.scale)
    e722:	4b4e      	ldr	r3, [pc, #312]	; (e85c <initGyro+0x158>)
    e724:	88db      	ldrh	r3, [r3, #6]
    e726:	22fa      	movs	r2, #250	; 0xfa
    e728:	0092      	lsls	r2, r2, #2
    e72a:	4293      	cmp	r3, r2
    e72c:	d00e      	beq.n	e74c <initGyro+0x48>
    e72e:	22fa      	movs	r2, #250	; 0xfa
    e730:	00d2      	lsls	r2, r2, #3
    e732:	4293      	cmp	r3, r2
    e734:	d011      	beq.n	e75a <initGyro+0x56>
    e736:	22fa      	movs	r2, #250	; 0xfa
    e738:	0052      	lsls	r2, r2, #1
    e73a:	4293      	cmp	r3, r2
    e73c:	d114      	bne.n	e768 <initGyro+0x64>
	{
		case 500:
			tempRegValue |= (0x1 << 2);
    e73e:	1dfb      	adds	r3, r7, #7
    e740:	1dfa      	adds	r2, r7, #7
    e742:	7812      	ldrb	r2, [r2, #0]
    e744:	2104      	movs	r1, #4
    e746:	430a      	orrs	r2, r1
    e748:	701a      	strb	r2, [r3, #0]
			break;
    e74a:	e00d      	b.n	e768 <initGyro+0x64>
		case 1000:
			tempRegValue |= (0x2 << 2);
    e74c:	1dfb      	adds	r3, r7, #7
    e74e:	1dfa      	adds	r2, r7, #7
    e750:	7812      	ldrb	r2, [r2, #0]
    e752:	2108      	movs	r1, #8
    e754:	430a      	orrs	r2, r1
    e756:	701a      	strb	r2, [r3, #0]
			break;
    e758:	e006      	b.n	e768 <initGyro+0x64>
		case 2000:
			tempRegValue |= (0x3 << 2);
    e75a:	1dfb      	adds	r3, r7, #7
    e75c:	1dfa      	adds	r2, r7, #7
    e75e:	7812      	ldrb	r2, [r2, #0]
    e760:	210c      	movs	r1, #12
    e762:	430a      	orrs	r2, r1
    e764:	701a      	strb	r2, [r3, #0]
			break;
    e766:	46c0      	nop			; (mov r8, r8)
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	xgWriteByte(CTRL2_G, tempRegValue);
    e768:	1dfb      	adds	r3, r7, #7
    e76a:	781b      	ldrb	r3, [r3, #0]
    e76c:	0019      	movs	r1, r3
    e76e:	2011      	movs	r0, #17
    e770:	4b3b      	ldr	r3, [pc, #236]	; (e860 <initGyro+0x15c>)
    e772:	4798      	blx	r3
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
    e774:	4b39      	ldr	r3, [pc, #228]	; (e85c <initGyro+0x158>)
    e776:	7a9b      	ldrb	r3, [r3, #10]
    e778:	2b00      	cmp	r3, #0
    e77a:	d001      	beq.n	e780 <initGyro+0x7c>
    e77c:	2280      	movs	r2, #128	; 0x80
    e77e:	e000      	b.n	e782 <initGyro+0x7e>
    e780:	2200      	movs	r2, #0
    e782:	1dfb      	adds	r3, r7, #7
    e784:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.HPFEnable)
    e786:	4b35      	ldr	r3, [pc, #212]	; (e85c <initGyro+0x158>)
    e788:	7adb      	ldrb	r3, [r3, #11]
    e78a:	2b00      	cmp	r3, #0
    e78c:	d00e      	beq.n	e7ac <initGyro+0xa8>
	{
		tempRegValue |= (1<<6) | ((settings.gyro.HPFCutoff & 0x03)<<4);
    e78e:	4b33      	ldr	r3, [pc, #204]	; (e85c <initGyro+0x158>)
    e790:	7b1b      	ldrb	r3, [r3, #12]
    e792:	011b      	lsls	r3, r3, #4
    e794:	b2db      	uxtb	r3, r3
    e796:	2230      	movs	r2, #48	; 0x30
    e798:	4013      	ands	r3, r2
    e79a:	b2da      	uxtb	r2, r3
    e79c:	1dfb      	adds	r3, r7, #7
    e79e:	781b      	ldrb	r3, [r3, #0]
    e7a0:	4313      	orrs	r3, r2
    e7a2:	b2da      	uxtb	r2, r3
    e7a4:	1dfb      	adds	r3, r7, #7
    e7a6:	2140      	movs	r1, #64	; 0x40
    e7a8:	430a      	orrs	r2, r1
    e7aa:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL7_G, tempRegValue);
    e7ac:	1dfb      	adds	r3, r7, #7
    e7ae:	781b      	ldrb	r3, [r3, #0]
    e7b0:	0019      	movs	r1, r3
    e7b2:	2016      	movs	r0, #22
    e7b4:	4b2a      	ldr	r3, [pc, #168]	; (e860 <initGyro+0x15c>)
    e7b6:	4798      	blx	r3
	// Zen_G - Z-axis output enable (0:disable, 1:enable)
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
    e7b8:	1dfb      	adds	r3, r7, #7
    e7ba:	2200      	movs	r2, #0
    e7bc:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
    e7be:	4b27      	ldr	r3, [pc, #156]	; (e85c <initGyro+0x158>)
    e7c0:	7cdb      	ldrb	r3, [r3, #19]
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d005      	beq.n	e7d2 <initGyro+0xce>
    e7c6:	1dfb      	adds	r3, r7, #7
    e7c8:	1dfa      	adds	r2, r7, #7
    e7ca:	7812      	ldrb	r2, [r2, #0]
    e7cc:	2120      	movs	r1, #32
    e7ce:	430a      	orrs	r2, r1
    e7d0:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
    e7d2:	4b22      	ldr	r3, [pc, #136]	; (e85c <initGyro+0x158>)
    e7d4:	7c9b      	ldrb	r3, [r3, #18]
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d005      	beq.n	e7e6 <initGyro+0xe2>
    e7da:	1dfb      	adds	r3, r7, #7
    e7dc:	1dfa      	adds	r2, r7, #7
    e7de:	7812      	ldrb	r2, [r2, #0]
    e7e0:	2110      	movs	r1, #16
    e7e2:	430a      	orrs	r2, r1
    e7e4:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
    e7e6:	4b1d      	ldr	r3, [pc, #116]	; (e85c <initGyro+0x158>)
    e7e8:	7c5b      	ldrb	r3, [r3, #17]
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	d005      	beq.n	e7fa <initGyro+0xf6>
    e7ee:	1dfb      	adds	r3, r7, #7
    e7f0:	1dfa      	adds	r2, r7, #7
    e7f2:	7812      	ldrb	r2, [r2, #0]
    e7f4:	2108      	movs	r1, #8
    e7f6:	430a      	orrs	r2, r1
    e7f8:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL10_C, tempRegValue);
    e7fa:	1dfb      	adds	r3, r7, #7
    e7fc:	781b      	ldrb	r3, [r3, #0]
    e7fe:	0019      	movs	r1, r3
    e800:	2019      	movs	r0, #25
    e802:	4b17      	ldr	r3, [pc, #92]	; (e860 <initGyro+0x15c>)
    e804:	4798      	blx	r3
	
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
    e806:	1dfb      	adds	r3, r7, #7
    e808:	2200      	movs	r2, #0
    e80a:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
    e80c:	4b13      	ldr	r3, [pc, #76]	; (e85c <initGyro+0x158>)
    e80e:	7b5b      	ldrb	r3, [r3, #13]
    e810:	2b00      	cmp	r3, #0
    e812:	d005      	beq.n	e820 <initGyro+0x11c>
    e814:	1dfb      	adds	r3, r7, #7
    e816:	1dfa      	adds	r2, r7, #7
    e818:	7812      	ldrb	r2, [r2, #0]
    e81a:	2120      	movs	r1, #32
    e81c:	430a      	orrs	r2, r1
    e81e:	701a      	strb	r2, [r3, #0]
	if (!settings.gyro.flipY) tempRegValue |= (1<<4); // Flip to align with LSM9D
    e820:	4b0e      	ldr	r3, [pc, #56]	; (e85c <initGyro+0x158>)
    e822:	7b9b      	ldrb	r3, [r3, #14]
    e824:	2b00      	cmp	r3, #0
    e826:	d105      	bne.n	e834 <initGyro+0x130>
    e828:	1dfb      	adds	r3, r7, #7
    e82a:	1dfa      	adds	r2, r7, #7
    e82c:	7812      	ldrb	r2, [r2, #0]
    e82e:	2110      	movs	r1, #16
    e830:	430a      	orrs	r2, r1
    e832:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
    e834:	4b09      	ldr	r3, [pc, #36]	; (e85c <initGyro+0x158>)
    e836:	7bdb      	ldrb	r3, [r3, #15]
    e838:	2b00      	cmp	r3, #0
    e83a:	d005      	beq.n	e848 <initGyro+0x144>
    e83c:	1dfb      	adds	r3, r7, #7
    e83e:	1dfa      	adds	r2, r7, #7
    e840:	7812      	ldrb	r2, [r2, #0]
    e842:	2108      	movs	r1, #8
    e844:	430a      	orrs	r2, r1
    e846:	701a      	strb	r2, [r3, #0]
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
    e848:	1dfb      	adds	r3, r7, #7
    e84a:	781b      	ldrb	r3, [r3, #0]
    e84c:	0019      	movs	r1, r3
    e84e:	200b      	movs	r0, #11
    e850:	4b03      	ldr	r3, [pc, #12]	; (e860 <initGyro+0x15c>)
    e852:	4798      	blx	r3
#endif
}
    e854:	46c0      	nop			; (mov r8, r8)
    e856:	46bd      	mov	sp, r7
    e858:	b002      	add	sp, #8
    e85a:	bd80      	pop	{r7, pc}
    e85c:	200008bc 	.word	0x200008bc
    e860:	0000efd1 	.word	0x0000efd1

0000e864 <initAccel>:

void initAccel()
{
    e864:	b580      	push	{r7, lr}
    e866:	b082      	sub	sp, #8
    e868:	af00      	add	r7, sp, #0
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	uint8_t tempRegValue = 0;
    e86a:	1dfb      	adds	r3, r7, #7
    e86c:	2200      	movs	r2, #0
    e86e:	701a      	strb	r2, [r3, #0]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
    e870:	4b45      	ldr	r3, [pc, #276]	; (e988 <initAccel+0x124>)
    e872:	7edb      	ldrb	r3, [r3, #27]
    e874:	2b00      	cmp	r3, #0
    e876:	d005      	beq.n	e884 <initAccel+0x20>
    e878:	1dfb      	adds	r3, r7, #7
    e87a:	1dfa      	adds	r2, r7, #7
    e87c:	7812      	ldrb	r2, [r2, #0]
    e87e:	2120      	movs	r1, #32
    e880:	430a      	orrs	r2, r1
    e882:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableY) tempRegValue |= (1<<4);
    e884:	4b40      	ldr	r3, [pc, #256]	; (e988 <initAccel+0x124>)
    e886:	7e9b      	ldrb	r3, [r3, #26]
    e888:	2b00      	cmp	r3, #0
    e88a:	d005      	beq.n	e898 <initAccel+0x34>
    e88c:	1dfb      	adds	r3, r7, #7
    e88e:	1dfa      	adds	r2, r7, #7
    e890:	7812      	ldrb	r2, [r2, #0]
    e892:	2110      	movs	r1, #16
    e894:	430a      	orrs	r2, r1
    e896:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableX) tempRegValue |= (1<<3);
    e898:	4b3b      	ldr	r3, [pc, #236]	; (e988 <initAccel+0x124>)
    e89a:	7e5b      	ldrb	r3, [r3, #25]
    e89c:	2b00      	cmp	r3, #0
    e89e:	d005      	beq.n	e8ac <initAccel+0x48>
    e8a0:	1dfb      	adds	r3, r7, #7
    e8a2:	1dfa      	adds	r2, r7, #7
    e8a4:	7812      	ldrb	r2, [r2, #0]
    e8a6:	2108      	movs	r1, #8
    e8a8:	430a      	orrs	r2, r1
    e8aa:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL9_XL, tempRegValue);
    e8ac:	1dfb      	adds	r3, r7, #7
    e8ae:	781b      	ldrb	r3, [r3, #0]
    e8b0:	0019      	movs	r1, r3
    e8b2:	2018      	movs	r0, #24
    e8b4:	4b35      	ldr	r3, [pc, #212]	; (e98c <initAccel+0x128>)
    e8b6:	4798      	blx	r3
	// CTRL_REG6_XL (0x20) (Default value: 0x00)
	// [ODR_XL3][ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_XL1][BW_XL0]
	// ODR_XL[3:0] - Output data rate & power mode selection
	// FS_XL[1:0] - Full-scale selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
    e8b8:	1dfb      	adds	r3, r7, #7
    e8ba:	2200      	movs	r2, #0
    e8bc:	701a      	strb	r2, [r3, #0]
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
    e8be:	4b32      	ldr	r3, [pc, #200]	; (e988 <initAccel+0x124>)
    e8c0:	7d9b      	ldrb	r3, [r3, #22]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d00a      	beq.n	e8dc <initAccel+0x78>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x0F) << 4;
    e8c6:	4b30      	ldr	r3, [pc, #192]	; (e988 <initAccel+0x124>)
    e8c8:	7e1b      	ldrb	r3, [r3, #24]
    e8ca:	011b      	lsls	r3, r3, #4
    e8cc:	b25a      	sxtb	r2, r3
    e8ce:	1dfb      	adds	r3, r7, #7
    e8d0:	781b      	ldrb	r3, [r3, #0]
    e8d2:	b25b      	sxtb	r3, r3
    e8d4:	4313      	orrs	r3, r2
    e8d6:	b25a      	sxtb	r2, r3
    e8d8:	1dfb      	adds	r3, r7, #7
    e8da:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.accel.scale)
    e8dc:	4b2a      	ldr	r3, [pc, #168]	; (e988 <initAccel+0x124>)
    e8de:	7ddb      	ldrb	r3, [r3, #23]
    e8e0:	2b08      	cmp	r3, #8
    e8e2:	d00a      	beq.n	e8fa <initAccel+0x96>
    e8e4:	2b10      	cmp	r3, #16
    e8e6:	d00f      	beq.n	e908 <initAccel+0xa4>
    e8e8:	2b04      	cmp	r3, #4
    e8ea:	d114      	bne.n	e916 <initAccel+0xb2>
	{
		case 4:
			tempRegValue |= (0x2 << 2);
    e8ec:	1dfb      	adds	r3, r7, #7
    e8ee:	1dfa      	adds	r2, r7, #7
    e8f0:	7812      	ldrb	r2, [r2, #0]
    e8f2:	2108      	movs	r1, #8
    e8f4:	430a      	orrs	r2, r1
    e8f6:	701a      	strb	r2, [r3, #0]
			break;
    e8f8:	e00d      	b.n	e916 <initAccel+0xb2>
		case 8:
			tempRegValue |= (0x3 << 2);
    e8fa:	1dfb      	adds	r3, r7, #7
    e8fc:	1dfa      	adds	r2, r7, #7
    e8fe:	7812      	ldrb	r2, [r2, #0]
    e900:	210c      	movs	r1, #12
    e902:	430a      	orrs	r2, r1
    e904:	701a      	strb	r2, [r3, #0]
			break;
    e906:	e006      	b.n	e916 <initAccel+0xb2>
		case 16:
			tempRegValue |= (0x1 << 2);
    e908:	1dfb      	adds	r3, r7, #7
    e90a:	1dfa      	adds	r2, r7, #7
    e90c:	7812      	ldrb	r2, [r2, #0]
    e90e:	2104      	movs	r1, #4
    e910:	430a      	orrs	r2, r1
    e912:	701a      	strb	r2, [r3, #0]
			break;
    e914:	46c0      	nop			; (mov r8, r8)
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	tempRegValue |= (settings.accel.bandwidth & 0x03);
    e916:	4b1c      	ldr	r3, [pc, #112]	; (e988 <initAccel+0x124>)
    e918:	7f1b      	ldrb	r3, [r3, #28]
    e91a:	b25b      	sxtb	r3, r3
    e91c:	2203      	movs	r2, #3
    e91e:	4013      	ands	r3, r2
    e920:	b25a      	sxtb	r2, r3
    e922:	1dfb      	adds	r3, r7, #7
    e924:	781b      	ldrb	r3, [r3, #0]
    e926:	b25b      	sxtb	r3, r3
    e928:	4313      	orrs	r3, r2
    e92a:	b25a      	sxtb	r2, r3
    e92c:	1dfb      	adds	r3, r7, #7
    e92e:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL1_XL, tempRegValue);
    e930:	1dfb      	adds	r3, r7, #7
    e932:	781b      	ldrb	r3, [r3, #0]
    e934:	0019      	movs	r1, r3
    e936:	2010      	movs	r0, #16
    e938:	4b14      	ldr	r3, [pc, #80]	; (e98c <initAccel+0x128>)
    e93a:	4798      	blx	r3
	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
    e93c:	1dfb      	adds	r3, r7, #7
    e93e:	2200      	movs	r2, #0
    e940:	701a      	strb	r2, [r3, #0]
	if (settings.accel.highResEnable)
    e942:	4b11      	ldr	r3, [pc, #68]	; (e988 <initAccel+0x124>)
    e944:	7f5b      	ldrb	r3, [r3, #29]
    e946:	2b00      	cmp	r3, #0
    e948:	d014      	beq.n	e974 <initAccel+0x110>
	{
		tempRegValue |= (1<<7); // Set HR bit
    e94a:	1dfb      	adds	r3, r7, #7
    e94c:	1dfa      	adds	r2, r7, #7
    e94e:	7812      	ldrb	r2, [r2, #0]
    e950:	2180      	movs	r1, #128	; 0x80
    e952:	4249      	negs	r1, r1
    e954:	430a      	orrs	r2, r1
    e956:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
    e958:	4b0b      	ldr	r3, [pc, #44]	; (e988 <initAccel+0x124>)
    e95a:	7f9b      	ldrb	r3, [r3, #30]
    e95c:	015b      	lsls	r3, r3, #5
    e95e:	b25b      	sxtb	r3, r3
    e960:	2260      	movs	r2, #96	; 0x60
    e962:	4013      	ands	r3, r2
    e964:	b25a      	sxtb	r2, r3
    e966:	1dfb      	adds	r3, r7, #7
    e968:	781b      	ldrb	r3, [r3, #0]
    e96a:	b25b      	sxtb	r3, r3
    e96c:	4313      	orrs	r3, r2
    e96e:	b25a      	sxtb	r2, r3
    e970:	1dfb      	adds	r3, r7, #7
    e972:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL8_XL, tempRegValue);
    e974:	1dfb      	adds	r3, r7, #7
    e976:	781b      	ldrb	r3, [r3, #0]
    e978:	0019      	movs	r1, r3
    e97a:	2017      	movs	r0, #23
    e97c:	4b03      	ldr	r3, [pc, #12]	; (e98c <initAccel+0x128>)
    e97e:	4798      	blx	r3
#endif
}
    e980:	46c0      	nop			; (mov r8, r8)
    e982:	46bd      	mov	sp, r7
    e984:	b002      	add	sp, #8
    e986:	bd80      	pop	{r7, pc}
    e988:	200008bc 	.word	0x200008bc
    e98c:	0000efd1 	.word	0x0000efd1

0000e990 <calibrate>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void calibrate(bool autoCalc)
{
    e990:	b5f0      	push	{r4, r5, r6, r7, lr}
    e992:	b08b      	sub	sp, #44	; 0x2c
    e994:	af00      	add	r7, sp, #0
    e996:	0002      	movs	r2, r0
    e998:	1dfb      	adds	r3, r7, #7
    e99a:	701a      	strb	r2, [r3, #0]
	_autoCalc = false; // Workaround so that calibrate doesnt include the current offset
    e99c:	4b78      	ldr	r3, [pc, #480]	; (eb80 <calibrate+0x1f0>)
    e99e:	2200      	movs	r2, #0
    e9a0:	701a      	strb	r2, [r3, #0]
	//uint8_t data[6] = {0, 0, 0, 0, 0, 0};
	uint16_t samples = 0;
    e9a2:	2326      	movs	r3, #38	; 0x26
    e9a4:	18fb      	adds	r3, r7, r3
    e9a6:	2200      	movs	r2, #0
    e9a8:	801a      	strh	r2, [r3, #0]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
    e9aa:	2314      	movs	r3, #20
    e9ac:	18fb      	adds	r3, r7, r3
    e9ae:	2200      	movs	r2, #0
    e9b0:	601a      	str	r2, [r3, #0]
    e9b2:	2314      	movs	r3, #20
    e9b4:	18fb      	adds	r3, r7, r3
    e9b6:	2200      	movs	r2, #0
    e9b8:	605a      	str	r2, [r3, #4]
    e9ba:	2314      	movs	r3, #20
    e9bc:	18fb      	adds	r3, r7, r3
    e9be:	2200      	movs	r2, #0
    e9c0:	609a      	str	r2, [r3, #8]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
    e9c2:	2308      	movs	r3, #8
    e9c4:	18fb      	adds	r3, r7, r3
    e9c6:	2200      	movs	r2, #0
    e9c8:	601a      	str	r2, [r3, #0]
    e9ca:	2308      	movs	r3, #8
    e9cc:	18fb      	adds	r3, r7, r3
    e9ce:	2200      	movs	r2, #0
    e9d0:	605a      	str	r2, [r3, #4]
    e9d2:	2308      	movs	r3, #8
    e9d4:	18fb      	adds	r3, r7, r3
    e9d6:	2200      	movs	r2, #0
    e9d8:	609a      	str	r2, [r3, #8]
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	setFIFO(FIFO_THS, 0x003D);
    e9da:	213d      	movs	r1, #61	; 0x3d
    e9dc:	2001      	movs	r0, #1
    e9de:	4b69      	ldr	r3, [pc, #420]	; (eb84 <calibrate+0x1f4>)
    e9e0:	4798      	blx	r3
	while (samples < 0x003C)
    e9e2:	e013      	b.n	ea0c <calibrate+0x7c>
	{
		samples = (((xgReadByte(FIFO_STATUS2) & 0x0F)<<8)|(xgReadByte(FIFO_STATUS1))); // Read number of stored samples
    e9e4:	203b      	movs	r0, #59	; 0x3b
    e9e6:	4b68      	ldr	r3, [pc, #416]	; (eb88 <calibrate+0x1f8>)
    e9e8:	4798      	blx	r3
    e9ea:	0003      	movs	r3, r0
    e9ec:	021b      	lsls	r3, r3, #8
    e9ee:	b21a      	sxth	r2, r3
    e9f0:	23f0      	movs	r3, #240	; 0xf0
    e9f2:	011b      	lsls	r3, r3, #4
    e9f4:	4013      	ands	r3, r2
    e9f6:	b21c      	sxth	r4, r3
    e9f8:	203a      	movs	r0, #58	; 0x3a
    e9fa:	4b63      	ldr	r3, [pc, #396]	; (eb88 <calibrate+0x1f8>)
    e9fc:	4798      	blx	r3
    e9fe:	0003      	movs	r3, r0
    ea00:	b21b      	sxth	r3, r3
    ea02:	4323      	orrs	r3, r4
    ea04:	b21a      	sxth	r2, r3
    ea06:	2326      	movs	r3, #38	; 0x26
    ea08:	18fb      	adds	r3, r7, r3
    ea0a:	801a      	strh	r2, [r3, #0]
	while (samples < 0x003C)
    ea0c:	2326      	movs	r3, #38	; 0x26
    ea0e:	18fb      	adds	r3, r7, r3
    ea10:	881b      	ldrh	r3, [r3, #0]
    ea12:	2b3b      	cmp	r3, #59	; 0x3b
    ea14:	d9e6      	bls.n	e9e4 <calibrate+0x54>
	}
#endif
	for(ii = 0; ii < samples ; ii++) 
    ea16:	2300      	movs	r3, #0
    ea18:	623b      	str	r3, [r7, #32]
    ea1a:	e059      	b.n	ead0 <calibrate+0x140>
	{	// Read the gyro data stored in the FIFO
		readGyro();
    ea1c:	4b5b      	ldr	r3, [pc, #364]	; (eb8c <calibrate+0x1fc>)
    ea1e:	4798      	blx	r3
		gBiasRawTemp[0] += gx;
    ea20:	2308      	movs	r3, #8
    ea22:	18fb      	adds	r3, r7, r3
    ea24:	681b      	ldr	r3, [r3, #0]
    ea26:	4a5a      	ldr	r2, [pc, #360]	; (eb90 <calibrate+0x200>)
    ea28:	2100      	movs	r1, #0
    ea2a:	5e52      	ldrsh	r2, [r2, r1]
    ea2c:	189a      	adds	r2, r3, r2
    ea2e:	2308      	movs	r3, #8
    ea30:	18fb      	adds	r3, r7, r3
    ea32:	601a      	str	r2, [r3, #0]
		gBiasRawTemp[1] += gy;
    ea34:	2308      	movs	r3, #8
    ea36:	18fb      	adds	r3, r7, r3
    ea38:	685b      	ldr	r3, [r3, #4]
    ea3a:	4a56      	ldr	r2, [pc, #344]	; (eb94 <calibrate+0x204>)
    ea3c:	2100      	movs	r1, #0
    ea3e:	5e52      	ldrsh	r2, [r2, r1]
    ea40:	189a      	adds	r2, r3, r2
    ea42:	2308      	movs	r3, #8
    ea44:	18fb      	adds	r3, r7, r3
    ea46:	605a      	str	r2, [r3, #4]
		gBiasRawTemp[2] += gz;
    ea48:	2308      	movs	r3, #8
    ea4a:	18fb      	adds	r3, r7, r3
    ea4c:	689b      	ldr	r3, [r3, #8]
    ea4e:	4a52      	ldr	r2, [pc, #328]	; (eb98 <calibrate+0x208>)
    ea50:	2100      	movs	r1, #0
    ea52:	5e52      	ldrsh	r2, [r2, r1]
    ea54:	189a      	adds	r2, r3, r2
    ea56:	2308      	movs	r3, #8
    ea58:	18fb      	adds	r3, r7, r3
    ea5a:	609a      	str	r2, [r3, #8]
		readAccel();
    ea5c:	4b4f      	ldr	r3, [pc, #316]	; (eb9c <calibrate+0x20c>)
    ea5e:	4798      	blx	r3
		aBiasRawTemp[0] += ax;
    ea60:	2314      	movs	r3, #20
    ea62:	18fb      	adds	r3, r7, r3
    ea64:	681b      	ldr	r3, [r3, #0]
    ea66:	4a4e      	ldr	r2, [pc, #312]	; (eba0 <calibrate+0x210>)
    ea68:	2100      	movs	r1, #0
    ea6a:	5e52      	ldrsh	r2, [r2, r1]
    ea6c:	189a      	adds	r2, r3, r2
    ea6e:	2314      	movs	r3, #20
    ea70:	18fb      	adds	r3, r7, r3
    ea72:	601a      	str	r2, [r3, #0]
		aBiasRawTemp[1] += ay;
    ea74:	2314      	movs	r3, #20
    ea76:	18fb      	adds	r3, r7, r3
    ea78:	685b      	ldr	r3, [r3, #4]
    ea7a:	4a4a      	ldr	r2, [pc, #296]	; (eba4 <calibrate+0x214>)
    ea7c:	2100      	movs	r1, #0
    ea7e:	5e52      	ldrsh	r2, [r2, r1]
    ea80:	189a      	adds	r2, r3, r2
    ea82:	2314      	movs	r3, #20
    ea84:	18fb      	adds	r3, r7, r3
    ea86:	605a      	str	r2, [r3, #4]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
    ea88:	2314      	movs	r3, #20
    ea8a:	18fb      	adds	r3, r7, r3
    ea8c:	689c      	ldr	r4, [r3, #8]
    ea8e:	4b46      	ldr	r3, [pc, #280]	; (eba8 <calibrate+0x218>)
    ea90:	2200      	movs	r2, #0
    ea92:	5e9b      	ldrsh	r3, [r3, r2]
    ea94:	001e      	movs	r6, r3
    ea96:	4b45      	ldr	r3, [pc, #276]	; (ebac <calibrate+0x21c>)
    ea98:	681a      	ldr	r2, [r3, #0]
    ea9a:	4b45      	ldr	r3, [pc, #276]	; (ebb0 <calibrate+0x220>)
    ea9c:	1c10      	adds	r0, r2, #0
    ea9e:	4798      	blx	r3
    eaa0:	0002      	movs	r2, r0
    eaa2:	000b      	movs	r3, r1
    eaa4:	4d43      	ldr	r5, [pc, #268]	; (ebb4 <calibrate+0x224>)
    eaa6:	2000      	movs	r0, #0
    eaa8:	4943      	ldr	r1, [pc, #268]	; (ebb8 <calibrate+0x228>)
    eaaa:	47a8      	blx	r5
    eaac:	0002      	movs	r2, r0
    eaae:	000b      	movs	r3, r1
    eab0:	0011      	movs	r1, r2
    eab2:	001a      	movs	r2, r3
    eab4:	4b41      	ldr	r3, [pc, #260]	; (ebbc <calibrate+0x22c>)
    eab6:	0008      	movs	r0, r1
    eab8:	0011      	movs	r1, r2
    eaba:	4798      	blx	r3
    eabc:	0003      	movs	r3, r0
    eabe:	b21b      	sxth	r3, r3
    eac0:	1af3      	subs	r3, r6, r3
    eac2:	18e2      	adds	r2, r4, r3
    eac4:	2314      	movs	r3, #20
    eac6:	18fb      	adds	r3, r7, r3
    eac8:	609a      	str	r2, [r3, #8]
	for(ii = 0; ii < samples ; ii++) 
    eaca:	6a3b      	ldr	r3, [r7, #32]
    eacc:	3301      	adds	r3, #1
    eace:	623b      	str	r3, [r7, #32]
    ead0:	2326      	movs	r3, #38	; 0x26
    ead2:	18fb      	adds	r3, r7, r3
    ead4:	881a      	ldrh	r2, [r3, #0]
    ead6:	6a3b      	ldr	r3, [r7, #32]
    ead8:	429a      	cmp	r2, r3
    eada:	dc9f      	bgt.n	ea1c <calibrate+0x8c>
	}  
	for (ii = 0; ii < 3; ii++)
    eadc:	2300      	movs	r3, #0
    eade:	623b      	str	r3, [r7, #32]
    eae0:	e03c      	b.n	eb5c <calibrate+0x1cc>
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
    eae2:	2308      	movs	r3, #8
    eae4:	18fb      	adds	r3, r7, r3
    eae6:	6a3a      	ldr	r2, [r7, #32]
    eae8:	0092      	lsls	r2, r2, #2
    eaea:	58d2      	ldr	r2, [r2, r3]
    eaec:	2326      	movs	r3, #38	; 0x26
    eaee:	18fb      	adds	r3, r7, r3
    eaf0:	8819      	ldrh	r1, [r3, #0]
    eaf2:	4b33      	ldr	r3, [pc, #204]	; (ebc0 <calibrate+0x230>)
    eaf4:	0010      	movs	r0, r2
    eaf6:	4798      	blx	r3
    eaf8:	0003      	movs	r3, r0
    eafa:	b219      	sxth	r1, r3
    eafc:	4b31      	ldr	r3, [pc, #196]	; (ebc4 <calibrate+0x234>)
    eafe:	6a3a      	ldr	r2, [r7, #32]
    eb00:	0052      	lsls	r2, r2, #1
    eb02:	52d1      	strh	r1, [r2, r3]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
    eb04:	4b2f      	ldr	r3, [pc, #188]	; (ebc4 <calibrate+0x234>)
    eb06:	6a3a      	ldr	r2, [r7, #32]
    eb08:	0052      	lsls	r2, r2, #1
    eb0a:	5ed3      	ldrsh	r3, [r2, r3]
    eb0c:	0018      	movs	r0, r3
    eb0e:	4b2e      	ldr	r3, [pc, #184]	; (ebc8 <calibrate+0x238>)
    eb10:	4798      	blx	r3
    eb12:	1c01      	adds	r1, r0, #0
    eb14:	4b2d      	ldr	r3, [pc, #180]	; (ebcc <calibrate+0x23c>)
    eb16:	6a3a      	ldr	r2, [r7, #32]
    eb18:	0092      	lsls	r2, r2, #2
    eb1a:	50d1      	str	r1, [r2, r3]
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
    eb1c:	2314      	movs	r3, #20
    eb1e:	18fb      	adds	r3, r7, r3
    eb20:	6a3a      	ldr	r2, [r7, #32]
    eb22:	0092      	lsls	r2, r2, #2
    eb24:	58d2      	ldr	r2, [r2, r3]
    eb26:	2326      	movs	r3, #38	; 0x26
    eb28:	18fb      	adds	r3, r7, r3
    eb2a:	8819      	ldrh	r1, [r3, #0]
    eb2c:	4b24      	ldr	r3, [pc, #144]	; (ebc0 <calibrate+0x230>)
    eb2e:	0010      	movs	r0, r2
    eb30:	4798      	blx	r3
    eb32:	0003      	movs	r3, r0
    eb34:	b219      	sxth	r1, r3
    eb36:	4b26      	ldr	r3, [pc, #152]	; (ebd0 <calibrate+0x240>)
    eb38:	6a3a      	ldr	r2, [r7, #32]
    eb3a:	0052      	lsls	r2, r2, #1
    eb3c:	52d1      	strh	r1, [r2, r3]
		aBias[ii] = calcAccel(aBiasRaw[ii]);
    eb3e:	4b24      	ldr	r3, [pc, #144]	; (ebd0 <calibrate+0x240>)
    eb40:	6a3a      	ldr	r2, [r7, #32]
    eb42:	0052      	lsls	r2, r2, #1
    eb44:	5ed3      	ldrsh	r3, [r2, r3]
    eb46:	0018      	movs	r0, r3
    eb48:	4b22      	ldr	r3, [pc, #136]	; (ebd4 <calibrate+0x244>)
    eb4a:	4798      	blx	r3
    eb4c:	1c01      	adds	r1, r0, #0
    eb4e:	4b22      	ldr	r3, [pc, #136]	; (ebd8 <calibrate+0x248>)
    eb50:	6a3a      	ldr	r2, [r7, #32]
    eb52:	0092      	lsls	r2, r2, #2
    eb54:	50d1      	str	r1, [r2, r3]
	for (ii = 0; ii < 3; ii++)
    eb56:	6a3b      	ldr	r3, [r7, #32]
    eb58:	3301      	adds	r3, #1
    eb5a:	623b      	str	r3, [r7, #32]
    eb5c:	6a3b      	ldr	r3, [r7, #32]
    eb5e:	2b02      	cmp	r3, #2
    eb60:	ddbf      	ble.n	eae2 <calibrate+0x152>
	}

#ifdef HW_3v4
	enableFIFO(false);
#endif
	setFIFO(FIFO_OFF, 0x00);
    eb62:	2100      	movs	r1, #0
    eb64:	2000      	movs	r0, #0
    eb66:	4b07      	ldr	r3, [pc, #28]	; (eb84 <calibrate+0x1f4>)
    eb68:	4798      	blx	r3
	
	if (autoCalc) _autoCalc = true;
    eb6a:	1dfb      	adds	r3, r7, #7
    eb6c:	781b      	ldrb	r3, [r3, #0]
    eb6e:	2b00      	cmp	r3, #0
    eb70:	d002      	beq.n	eb78 <calibrate+0x1e8>
    eb72:	4b03      	ldr	r3, [pc, #12]	; (eb80 <calibrate+0x1f0>)
    eb74:	2201      	movs	r2, #1
    eb76:	701a      	strb	r2, [r3, #0]
}
    eb78:	46c0      	nop			; (mov r8, r8)
    eb7a:	46bd      	mov	sp, r7
    eb7c:	b00b      	add	sp, #44	; 0x2c
    eb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb80:	20000dcc 	.word	0x20000dcc
    eb84:	0000eeb1 	.word	0x0000eeb1
    eb88:	0000f005 	.word	0x0000f005
    eb8c:	0000eca9 	.word	0x0000eca9
    eb90:	200003a4 	.word	0x200003a4
    eb94:	200003a6 	.word	0x200003a6
    eb98:	200003a8 	.word	0x200003a8
    eb9c:	0000ebdd 	.word	0x0000ebdd
    eba0:	200003aa 	.word	0x200003aa
    eba4:	200003ac 	.word	0x200003ac
    eba8:	200003ae 	.word	0x200003ae
    ebac:	20000f8c 	.word	0x20000f8c
    ebb0:	0001b1a1 	.word	0x0001b1a1
    ebb4:	00019cb1 	.word	0x00019cb1
    ebb8:	3ff00000 	.word	0x3ff00000
    ebbc:	0001b045 	.word	0x0001b045
    ebc0:	00018521 	.word	0x00018521
    ebc4:	20001410 	.word	0x20001410
    ebc8:	0000ed75 	.word	0x0000ed75
    ebcc:	20001a14 	.word	0x20001a14
    ebd0:	20001418 	.word	0x20001418
    ebd4:	0000edad 	.word	0x0000edad
    ebd8:	20000560 	.word	0x20000560

0000ebdc <readAccel>:
	return ((status & (1<<axis)) >> axis);
#endif
}

void readAccel()
{
    ebdc:	b580      	push	{r7, lr}
    ebde:	b082      	sub	sp, #8
    ebe0:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
#ifdef HW_3v4
	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	xgReadBytes(OUTX_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
    ebe2:	003b      	movs	r3, r7
    ebe4:	2206      	movs	r2, #6
    ebe6:	0019      	movs	r1, r3
    ebe8:	2028      	movs	r0, #40	; 0x28
    ebea:	4b29      	ldr	r3, [pc, #164]	; (ec90 <readAccel+0xb4>)
    ebec:	4798      	blx	r3
#endif
	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
    ebee:	003b      	movs	r3, r7
    ebf0:	785b      	ldrb	r3, [r3, #1]
    ebf2:	021b      	lsls	r3, r3, #8
    ebf4:	b21a      	sxth	r2, r3
    ebf6:	003b      	movs	r3, r7
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	b21b      	sxth	r3, r3
    ebfc:	4313      	orrs	r3, r2
    ebfe:	b21a      	sxth	r2, r3
    ec00:	4b24      	ldr	r3, [pc, #144]	; (ec94 <readAccel+0xb8>)
    ec02:	801a      	strh	r2, [r3, #0]
	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
    ec04:	003b      	movs	r3, r7
    ec06:	78db      	ldrb	r3, [r3, #3]
    ec08:	021b      	lsls	r3, r3, #8
    ec0a:	b21a      	sxth	r2, r3
    ec0c:	003b      	movs	r3, r7
    ec0e:	789b      	ldrb	r3, [r3, #2]
    ec10:	b21b      	sxth	r3, r3
    ec12:	4313      	orrs	r3, r2
    ec14:	b21a      	sxth	r2, r3
    ec16:	4b20      	ldr	r3, [pc, #128]	; (ec98 <readAccel+0xbc>)
    ec18:	801a      	strh	r2, [r3, #0]
	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
    ec1a:	003b      	movs	r3, r7
    ec1c:	795b      	ldrb	r3, [r3, #5]
    ec1e:	021b      	lsls	r3, r3, #8
    ec20:	b21a      	sxth	r2, r3
    ec22:	003b      	movs	r3, r7
    ec24:	791b      	ldrb	r3, [r3, #4]
    ec26:	b21b      	sxth	r3, r3
    ec28:	4313      	orrs	r3, r2
    ec2a:	b21a      	sxth	r2, r3
    ec2c:	4b1b      	ldr	r3, [pc, #108]	; (ec9c <readAccel+0xc0>)
    ec2e:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    ec30:	4b1b      	ldr	r3, [pc, #108]	; (eca0 <readAccel+0xc4>)
    ec32:	781b      	ldrb	r3, [r3, #0]
    ec34:	2b00      	cmp	r3, #0
    ec36:	d026      	beq.n	ec86 <readAccel+0xaa>
	{
		ax -= aBiasRaw[X_AXIS];
    ec38:	4b16      	ldr	r3, [pc, #88]	; (ec94 <readAccel+0xb8>)
    ec3a:	2200      	movs	r2, #0
    ec3c:	5e9b      	ldrsh	r3, [r3, r2]
    ec3e:	b29a      	uxth	r2, r3
    ec40:	4b18      	ldr	r3, [pc, #96]	; (eca4 <readAccel+0xc8>)
    ec42:	2100      	movs	r1, #0
    ec44:	5e5b      	ldrsh	r3, [r3, r1]
    ec46:	b29b      	uxth	r3, r3
    ec48:	1ad3      	subs	r3, r2, r3
    ec4a:	b29b      	uxth	r3, r3
    ec4c:	b21a      	sxth	r2, r3
    ec4e:	4b11      	ldr	r3, [pc, #68]	; (ec94 <readAccel+0xb8>)
    ec50:	801a      	strh	r2, [r3, #0]
		ay -= aBiasRaw[Y_AXIS];
    ec52:	4b11      	ldr	r3, [pc, #68]	; (ec98 <readAccel+0xbc>)
    ec54:	2200      	movs	r2, #0
    ec56:	5e9b      	ldrsh	r3, [r3, r2]
    ec58:	b29a      	uxth	r2, r3
    ec5a:	4b12      	ldr	r3, [pc, #72]	; (eca4 <readAccel+0xc8>)
    ec5c:	2102      	movs	r1, #2
    ec5e:	5e5b      	ldrsh	r3, [r3, r1]
    ec60:	b29b      	uxth	r3, r3
    ec62:	1ad3      	subs	r3, r2, r3
    ec64:	b29b      	uxth	r3, r3
    ec66:	b21a      	sxth	r2, r3
    ec68:	4b0b      	ldr	r3, [pc, #44]	; (ec98 <readAccel+0xbc>)
    ec6a:	801a      	strh	r2, [r3, #0]
		az -= aBiasRaw[Z_AXIS];
    ec6c:	4b0b      	ldr	r3, [pc, #44]	; (ec9c <readAccel+0xc0>)
    ec6e:	2200      	movs	r2, #0
    ec70:	5e9b      	ldrsh	r3, [r3, r2]
    ec72:	b29a      	uxth	r2, r3
    ec74:	4b0b      	ldr	r3, [pc, #44]	; (eca4 <readAccel+0xc8>)
    ec76:	2104      	movs	r1, #4
    ec78:	5e5b      	ldrsh	r3, [r3, r1]
    ec7a:	b29b      	uxth	r3, r3
    ec7c:	1ad3      	subs	r3, r2, r3
    ec7e:	b29b      	uxth	r3, r3
    ec80:	b21a      	sxth	r2, r3
    ec82:	4b06      	ldr	r3, [pc, #24]	; (ec9c <readAccel+0xc0>)
    ec84:	801a      	strh	r2, [r3, #0]
	}
}
    ec86:	46c0      	nop			; (mov r8, r8)
    ec88:	46bd      	mov	sp, r7
    ec8a:	b002      	add	sp, #8
    ec8c:	bd80      	pop	{r7, pc}
    ec8e:	46c0      	nop			; (mov r8, r8)
    ec90:	0000f035 	.word	0x0000f035
    ec94:	200003aa 	.word	0x200003aa
    ec98:	200003ac 	.word	0x200003ac
    ec9c:	200003ae 	.word	0x200003ae
    eca0:	20000dcc 	.word	0x20000dcc
    eca4:	20001418 	.word	0x20001418

0000eca8 <readGyro>:
	temperature = ((int16_t)temp[1] << 8) | temp[0];
#endif
}

void readGyro()
{
    eca8:	b580      	push	{r7, lr}
    ecaa:	b082      	sub	sp, #8
    ecac:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp#ifdef HW_3v4
#ifdef HW_3v4
	xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
#endif
#if defined(HW_4v0) || defined(HW_4v1)
	xgReadBytes(OUTX_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
    ecae:	003b      	movs	r3, r7
    ecb0:	2206      	movs	r2, #6
    ecb2:	0019      	movs	r1, r3
    ecb4:	2022      	movs	r0, #34	; 0x22
    ecb6:	4b29      	ldr	r3, [pc, #164]	; (ed5c <readGyro+0xb4>)
    ecb8:	4798      	blx	r3
#endif
	gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
    ecba:	003b      	movs	r3, r7
    ecbc:	785b      	ldrb	r3, [r3, #1]
    ecbe:	021b      	lsls	r3, r3, #8
    ecc0:	b21a      	sxth	r2, r3
    ecc2:	003b      	movs	r3, r7
    ecc4:	781b      	ldrb	r3, [r3, #0]
    ecc6:	b21b      	sxth	r3, r3
    ecc8:	4313      	orrs	r3, r2
    ecca:	b21a      	sxth	r2, r3
    eccc:	4b24      	ldr	r3, [pc, #144]	; (ed60 <readGyro+0xb8>)
    ecce:	801a      	strh	r2, [r3, #0]
	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
    ecd0:	003b      	movs	r3, r7
    ecd2:	78db      	ldrb	r3, [r3, #3]
    ecd4:	021b      	lsls	r3, r3, #8
    ecd6:	b21a      	sxth	r2, r3
    ecd8:	003b      	movs	r3, r7
    ecda:	789b      	ldrb	r3, [r3, #2]
    ecdc:	b21b      	sxth	r3, r3
    ecde:	4313      	orrs	r3, r2
    ece0:	b21a      	sxth	r2, r3
    ece2:	4b20      	ldr	r3, [pc, #128]	; (ed64 <readGyro+0xbc>)
    ece4:	801a      	strh	r2, [r3, #0]
	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
    ece6:	003b      	movs	r3, r7
    ece8:	795b      	ldrb	r3, [r3, #5]
    ecea:	021b      	lsls	r3, r3, #8
    ecec:	b21a      	sxth	r2, r3
    ecee:	003b      	movs	r3, r7
    ecf0:	791b      	ldrb	r3, [r3, #4]
    ecf2:	b21b      	sxth	r3, r3
    ecf4:	4313      	orrs	r3, r2
    ecf6:	b21a      	sxth	r2, r3
    ecf8:	4b1b      	ldr	r3, [pc, #108]	; (ed68 <readGyro+0xc0>)
    ecfa:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    ecfc:	4b1b      	ldr	r3, [pc, #108]	; (ed6c <readGyro+0xc4>)
    ecfe:	781b      	ldrb	r3, [r3, #0]
    ed00:	2b00      	cmp	r3, #0
    ed02:	d026      	beq.n	ed52 <readGyro+0xaa>
	{
		gx -= gBiasRaw[X_AXIS];
    ed04:	4b16      	ldr	r3, [pc, #88]	; (ed60 <readGyro+0xb8>)
    ed06:	2200      	movs	r2, #0
    ed08:	5e9b      	ldrsh	r3, [r3, r2]
    ed0a:	b29a      	uxth	r2, r3
    ed0c:	4b18      	ldr	r3, [pc, #96]	; (ed70 <readGyro+0xc8>)
    ed0e:	2100      	movs	r1, #0
    ed10:	5e5b      	ldrsh	r3, [r3, r1]
    ed12:	b29b      	uxth	r3, r3
    ed14:	1ad3      	subs	r3, r2, r3
    ed16:	b29b      	uxth	r3, r3
    ed18:	b21a      	sxth	r2, r3
    ed1a:	4b11      	ldr	r3, [pc, #68]	; (ed60 <readGyro+0xb8>)
    ed1c:	801a      	strh	r2, [r3, #0]
		gy -= gBiasRaw[Y_AXIS];
    ed1e:	4b11      	ldr	r3, [pc, #68]	; (ed64 <readGyro+0xbc>)
    ed20:	2200      	movs	r2, #0
    ed22:	5e9b      	ldrsh	r3, [r3, r2]
    ed24:	b29a      	uxth	r2, r3
    ed26:	4b12      	ldr	r3, [pc, #72]	; (ed70 <readGyro+0xc8>)
    ed28:	2102      	movs	r1, #2
    ed2a:	5e5b      	ldrsh	r3, [r3, r1]
    ed2c:	b29b      	uxth	r3, r3
    ed2e:	1ad3      	subs	r3, r2, r3
    ed30:	b29b      	uxth	r3, r3
    ed32:	b21a      	sxth	r2, r3
    ed34:	4b0b      	ldr	r3, [pc, #44]	; (ed64 <readGyro+0xbc>)
    ed36:	801a      	strh	r2, [r3, #0]
		gz -= gBiasRaw[Z_AXIS];
    ed38:	4b0b      	ldr	r3, [pc, #44]	; (ed68 <readGyro+0xc0>)
    ed3a:	2200      	movs	r2, #0
    ed3c:	5e9b      	ldrsh	r3, [r3, r2]
    ed3e:	b29a      	uxth	r2, r3
    ed40:	4b0b      	ldr	r3, [pc, #44]	; (ed70 <readGyro+0xc8>)
    ed42:	2104      	movs	r1, #4
    ed44:	5e5b      	ldrsh	r3, [r3, r1]
    ed46:	b29b      	uxth	r3, r3
    ed48:	1ad3      	subs	r3, r2, r3
    ed4a:	b29b      	uxth	r3, r3
    ed4c:	b21a      	sxth	r2, r3
    ed4e:	4b06      	ldr	r3, [pc, #24]	; (ed68 <readGyro+0xc0>)
    ed50:	801a      	strh	r2, [r3, #0]
	}
}
    ed52:	46c0      	nop			; (mov r8, r8)
    ed54:	46bd      	mov	sp, r7
    ed56:	b002      	add	sp, #8
    ed58:	bd80      	pop	{r7, pc}
    ed5a:	46c0      	nop			; (mov r8, r8)
    ed5c:	0000f035 	.word	0x0000f035
    ed60:	200003a4 	.word	0x200003a4
    ed64:	200003a6 	.word	0x200003a6
    ed68:	200003a8 	.word	0x200003a8
    ed6c:	20000dcc 	.word	0x20000dcc
    ed70:	20001410 	.word	0x20001410

0000ed74 <calcGyro>:
	return value;
#endif
}

float calcGyro(int16_t gyro)
{
    ed74:	b580      	push	{r7, lr}
    ed76:	b082      	sub	sp, #8
    ed78:	af00      	add	r7, sp, #0
    ed7a:	0002      	movs	r2, r0
    ed7c:	1dbb      	adds	r3, r7, #6
    ed7e:	801a      	strh	r2, [r3, #0]
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
    ed80:	1dbb      	adds	r3, r7, #6
    ed82:	2200      	movs	r2, #0
    ed84:	5e9a      	ldrsh	r2, [r3, r2]
    ed86:	4b06      	ldr	r3, [pc, #24]	; (eda0 <calcGyro+0x2c>)
    ed88:	0010      	movs	r0, r2
    ed8a:	4798      	blx	r3
    ed8c:	4b05      	ldr	r3, [pc, #20]	; (eda4 <calcGyro+0x30>)
    ed8e:	681a      	ldr	r2, [r3, #0]
    ed90:	4b05      	ldr	r3, [pc, #20]	; (eda8 <calcGyro+0x34>)
    ed92:	1c11      	adds	r1, r2, #0
    ed94:	4798      	blx	r3
    ed96:	1c03      	adds	r3, r0, #0
}
    ed98:	1c18      	adds	r0, r3, #0
    ed9a:	46bd      	mov	sp, r7
    ed9c:	b002      	add	sp, #8
    ed9e:	bd80      	pop	{r7, pc}
    eda0:	00019565 	.word	0x00019565
    eda4:	200017b4 	.word	0x200017b4
    eda8:	00018fad 	.word	0x00018fad

0000edac <calcAccel>:

float calcAccel(int16_t accel)
{
    edac:	b580      	push	{r7, lr}
    edae:	b082      	sub	sp, #8
    edb0:	af00      	add	r7, sp, #0
    edb2:	0002      	movs	r2, r0
    edb4:	1dbb      	adds	r3, r7, #6
    edb6:	801a      	strh	r2, [r3, #0]
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
    edb8:	1dbb      	adds	r3, r7, #6
    edba:	2200      	movs	r2, #0
    edbc:	5e9a      	ldrsh	r2, [r3, r2]
    edbe:	4b06      	ldr	r3, [pc, #24]	; (edd8 <calcAccel+0x2c>)
    edc0:	0010      	movs	r0, r2
    edc2:	4798      	blx	r3
    edc4:	4b05      	ldr	r3, [pc, #20]	; (eddc <calcAccel+0x30>)
    edc6:	681a      	ldr	r2, [r3, #0]
    edc8:	4b05      	ldr	r3, [pc, #20]	; (ede0 <calcAccel+0x34>)
    edca:	1c11      	adds	r1, r2, #0
    edcc:	4798      	blx	r3
    edce:	1c03      	adds	r3, r0, #0
}
    edd0:	1c18      	adds	r0, r3, #0
    edd2:	46bd      	mov	sp, r7
    edd4:	b002      	add	sp, #8
    edd6:	bd80      	pop	{r7, pc}
    edd8:	00019565 	.word	0x00019565
    eddc:	20000f8c 	.word	0x20000f8c
    ede0:	00018fad 	.word	0x00018fad

0000ede4 <calcgRes>:
	mWriteByte(CTRL_REG1_M, temp);
#endif
}

void calcgRes()
{
    ede4:	b580      	push	{r7, lr}
    ede6:	af00      	add	r7, sp, #0
	gRes = ((float) settings.gyro.scale) / 32768.0;
    ede8:	4b08      	ldr	r3, [pc, #32]	; (ee0c <calcgRes+0x28>)
    edea:	88da      	ldrh	r2, [r3, #6]
    edec:	4b08      	ldr	r3, [pc, #32]	; (ee10 <calcgRes+0x2c>)
    edee:	0010      	movs	r0, r2
    edf0:	4798      	blx	r3
    edf2:	1c02      	adds	r2, r0, #0
    edf4:	4b07      	ldr	r3, [pc, #28]	; (ee14 <calcgRes+0x30>)
    edf6:	218e      	movs	r1, #142	; 0x8e
    edf8:	05c9      	lsls	r1, r1, #23
    edfa:	1c10      	adds	r0, r2, #0
    edfc:	4798      	blx	r3
    edfe:	1c03      	adds	r3, r0, #0
    ee00:	1c1a      	adds	r2, r3, #0
    ee02:	4b05      	ldr	r3, [pc, #20]	; (ee18 <calcgRes+0x34>)
    ee04:	601a      	str	r2, [r3, #0]
}
    ee06:	46c0      	nop			; (mov r8, r8)
    ee08:	46bd      	mov	sp, r7
    ee0a:	bd80      	pop	{r7, pc}
    ee0c:	200008bc 	.word	0x200008bc
    ee10:	00019605 	.word	0x00019605
    ee14:	00018bcd 	.word	0x00018bcd
    ee18:	200017b4 	.word	0x200017b4

0000ee1c <calcaRes>:

void calcaRes()
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	af00      	add	r7, sp, #0
	aRes = ((float) settings.accel.scale) / 32768.0;
    ee20:	4b08      	ldr	r3, [pc, #32]	; (ee44 <calcaRes+0x28>)
    ee22:	7dda      	ldrb	r2, [r3, #23]
    ee24:	4b08      	ldr	r3, [pc, #32]	; (ee48 <calcaRes+0x2c>)
    ee26:	0010      	movs	r0, r2
    ee28:	4798      	blx	r3
    ee2a:	1c02      	adds	r2, r0, #0
    ee2c:	4b07      	ldr	r3, [pc, #28]	; (ee4c <calcaRes+0x30>)
    ee2e:	218e      	movs	r1, #142	; 0x8e
    ee30:	05c9      	lsls	r1, r1, #23
    ee32:	1c10      	adds	r0, r2, #0
    ee34:	4798      	blx	r3
    ee36:	1c03      	adds	r3, r0, #0
    ee38:	1c1a      	adds	r2, r3, #0
    ee3a:	4b05      	ldr	r3, [pc, #20]	; (ee50 <calcaRes+0x34>)
    ee3c:	601a      	str	r2, [r3, #0]
}
    ee3e:	46c0      	nop			; (mov r8, r8)
    ee40:	46bd      	mov	sp, r7
    ee42:	bd80      	pop	{r7, pc}
    ee44:	200008bc 	.word	0x200008bc
    ee48:	00019605 	.word	0x00019605
    ee4c:	00018bcd 	.word	0x00018bcd
    ee50:	20000f8c 	.word	0x20000f8c

0000ee54 <calcmRes>:

void calcmRes()
{
    ee54:	b580      	push	{r7, lr}
    ee56:	af00      	add	r7, sp, #0
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
    ee58:	4b12      	ldr	r3, [pc, #72]	; (eea4 <calcmRes+0x50>)
    ee5a:	2220      	movs	r2, #32
    ee5c:	5c9b      	ldrb	r3, [r3, r2]
    ee5e:	2b08      	cmp	r3, #8
    ee60:	d00d      	beq.n	ee7e <calcmRes+0x2a>
    ee62:	dc02      	bgt.n	ee6a <calcmRes+0x16>
    ee64:	2b04      	cmp	r3, #4
    ee66:	d005      	beq.n	ee74 <calcmRes+0x20>
	case 16:
		mRes = magSensitivity[3];
		break;
	}
	
}
    ee68:	e018      	b.n	ee9c <calcmRes+0x48>
	switch (settings.mag.scale)
    ee6a:	2b0c      	cmp	r3, #12
    ee6c:	d00c      	beq.n	ee88 <calcmRes+0x34>
    ee6e:	2b10      	cmp	r3, #16
    ee70:	d00f      	beq.n	ee92 <calcmRes+0x3e>
}
    ee72:	e013      	b.n	ee9c <calcmRes+0x48>
		mRes = magSensitivity[0];
    ee74:	4b0c      	ldr	r3, [pc, #48]	; (eea8 <calcmRes+0x54>)
    ee76:	681a      	ldr	r2, [r3, #0]
    ee78:	4b0c      	ldr	r3, [pc, #48]	; (eeac <calcmRes+0x58>)
    ee7a:	601a      	str	r2, [r3, #0]
		break;
    ee7c:	e00e      	b.n	ee9c <calcmRes+0x48>
		mRes = magSensitivity[1];
    ee7e:	4b0a      	ldr	r3, [pc, #40]	; (eea8 <calcmRes+0x54>)
    ee80:	685a      	ldr	r2, [r3, #4]
    ee82:	4b0a      	ldr	r3, [pc, #40]	; (eeac <calcmRes+0x58>)
    ee84:	601a      	str	r2, [r3, #0]
		break;
    ee86:	e009      	b.n	ee9c <calcmRes+0x48>
		mRes = magSensitivity[2];
    ee88:	4b07      	ldr	r3, [pc, #28]	; (eea8 <calcmRes+0x54>)
    ee8a:	689a      	ldr	r2, [r3, #8]
    ee8c:	4b07      	ldr	r3, [pc, #28]	; (eeac <calcmRes+0x58>)
    ee8e:	601a      	str	r2, [r3, #0]
		break;
    ee90:	e004      	b.n	ee9c <calcmRes+0x48>
		mRes = magSensitivity[3];
    ee92:	4b05      	ldr	r3, [pc, #20]	; (eea8 <calcmRes+0x54>)
    ee94:	68da      	ldr	r2, [r3, #12]
    ee96:	4b05      	ldr	r3, [pc, #20]	; (eeac <calcmRes+0x58>)
    ee98:	601a      	str	r2, [r3, #0]
		break;
    ee9a:	46c0      	nop			; (mov r8, r8)
}
    ee9c:	46c0      	nop			; (mov r8, r8)
    ee9e:	46bd      	mov	sp, r7
    eea0:	bd80      	pop	{r7, pc}
    eea2:	46c0      	nop			; (mov r8, r8)
    eea4:	200008bc 	.word	0x200008bc
    eea8:	200000e4 	.word	0x200000e4
    eeac:	20001a20 	.word	0x20001a20

0000eeb0 <setFIFO>:
	xgWriteByte(CTRL_REG9, temp);
#endif
}

void setFIFO(enum fifoMode_type fifoMode, uint16_t fifoThs)
{
    eeb0:	b580      	push	{r7, lr}
    eeb2:	b084      	sub	sp, #16
    eeb4:	af00      	add	r7, sp, #0
    eeb6:	0002      	movs	r2, r0
    eeb8:	1dfb      	adds	r3, r7, #7
    eeba:	701a      	strb	r2, [r3, #0]
    eebc:	1d3b      	adds	r3, r7, #4
    eebe:	1c0a      	adds	r2, r1, #0
    eec0:	801a      	strh	r2, [r3, #0]
#ifdef HW_3v4
	uint16_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	uint16_t threshold = fifoThs <= 0x0FFC ? fifoThs : 0x0FFC;
    eec2:	230e      	movs	r3, #14
    eec4:	18fa      	adds	r2, r7, r3
    eec6:	1d3b      	adds	r3, r7, #4
    eec8:	881b      	ldrh	r3, [r3, #0]
    eeca:	b299      	uxth	r1, r3
    eecc:	481b      	ldr	r0, [pc, #108]	; (ef3c <setFIFO+0x8c>)
    eece:	4281      	cmp	r1, r0
    eed0:	d900      	bls.n	eed4 <setFIFO+0x24>
    eed2:	4b1a      	ldr	r3, [pc, #104]	; (ef3c <setFIFO+0x8c>)
    eed4:	8013      	strh	r3, [r2, #0]
	//xgWriteByte(MASTER_CONFIG, 0x00);//Set the STOP_ON_FTH bit to limit the FIFO memory depth
	//xgWriteByte(CTRL3_C, 0x04);//Set the STOP_ON_FTH bit to limit the FIFO memory depth
	xgWriteByte(CTRL4_C, 0x01);//Set the STOP_ON_FTH bit to limit the FIFO memory depth
    eed6:	2101      	movs	r1, #1
    eed8:	2013      	movs	r0, #19
    eeda:	4b19      	ldr	r3, [pc, #100]	; (ef40 <setFIFO+0x90>)
    eedc:	4798      	blx	r3
	//xgWriteByte(CTRL5_C, 0x00);//Set the STOP_ON_FTH bit to limit the FIFO memory depth
	//xgWriteByte(CTRL6_C, 0x00);//Set the STOP_ON_FTH bit to limit the FIFO memory depth
	xgWriteByte(FIFO_CTRL1, threshold & 0xFF);
    eede:	230e      	movs	r3, #14
    eee0:	18fb      	adds	r3, r7, r3
    eee2:	881b      	ldrh	r3, [r3, #0]
    eee4:	b2db      	uxtb	r3, r3
    eee6:	0019      	movs	r1, r3
    eee8:	2006      	movs	r0, #6
    eeea:	4b15      	ldr	r3, [pc, #84]	; (ef40 <setFIFO+0x90>)
    eeec:	4798      	blx	r3
	xgWriteByte(FIFO_CTRL2, (threshold & 0x0F00)>>8);
    eeee:	230e      	movs	r3, #14
    eef0:	18fb      	adds	r3, r7, r3
    eef2:	881b      	ldrh	r3, [r3, #0]
    eef4:	121b      	asrs	r3, r3, #8
    eef6:	b2db      	uxtb	r3, r3
    eef8:	220f      	movs	r2, #15
    eefa:	4013      	ands	r3, r2
    eefc:	b2db      	uxtb	r3, r3
    eefe:	0019      	movs	r1, r3
    ef00:	2007      	movs	r0, #7
    ef02:	4b0f      	ldr	r3, [pc, #60]	; (ef40 <setFIFO+0x90>)
    ef04:	4798      	blx	r3
	xgWriteByte(FIFO_CTRL3, 0x09);//Set the FIFO to no accel or gyro decimation
    ef06:	2109      	movs	r1, #9
    ef08:	2008      	movs	r0, #8
    ef0a:	4b0d      	ldr	r3, [pc, #52]	; (ef40 <setFIFO+0x90>)
    ef0c:	4798      	blx	r3
	xgWriteByte(FIFO_CTRL4, 0x09);//Set the FIFO to no accel or gyro decimation
    ef0e:	2109      	movs	r1, #9
    ef10:	2009      	movs	r0, #9
    ef12:	4b0b      	ldr	r3, [pc, #44]	; (ef40 <setFIFO+0x90>)
    ef14:	4798      	blx	r3
	xgWriteByte(FIFO_CTRL5, (fifoMode & 0x07)|0x40);//Set FIFO ODR to 6.66kHZ to enable FIFO
    ef16:	1dfb      	adds	r3, r7, #7
    ef18:	781b      	ldrb	r3, [r3, #0]
    ef1a:	b25b      	sxtb	r3, r3
    ef1c:	2207      	movs	r2, #7
    ef1e:	4013      	ands	r3, r2
    ef20:	b25b      	sxtb	r3, r3
    ef22:	2240      	movs	r2, #64	; 0x40
    ef24:	4313      	orrs	r3, r2
    ef26:	b25b      	sxtb	r3, r3
    ef28:	b2db      	uxtb	r3, r3
    ef2a:	0019      	movs	r1, r3
    ef2c:	200a      	movs	r0, #10
    ef2e:	4b04      	ldr	r3, [pc, #16]	; (ef40 <setFIFO+0x90>)
    ef30:	4798      	blx	r3
#endif
}
    ef32:	46c0      	nop			; (mov r8, r8)
    ef34:	46bd      	mov	sp, r7
    ef36:	b004      	add	sp, #16
    ef38:	bd80      	pop	{r7, pc}
    ef3a:	46c0      	nop			; (mov r8, r8)
    ef3c:	00000ffc 	.word	0x00000ffc
    ef40:	0000efd1 	.word	0x0000efd1

0000ef44 <constrainScales>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
#endif
}

void constrainScales()
{
    ef44:	b580      	push	{r7, lr}
    ef46:	af00      	add	r7, sp, #0
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    ef48:	4b20      	ldr	r3, [pc, #128]	; (efcc <constrainScales+0x88>)
    ef4a:	88db      	ldrh	r3, [r3, #6]
    ef4c:	2bf5      	cmp	r3, #245	; 0xf5
    ef4e:	d00e      	beq.n	ef6e <constrainScales+0x2a>
    ef50:	4b1e      	ldr	r3, [pc, #120]	; (efcc <constrainScales+0x88>)
    ef52:	88da      	ldrh	r2, [r3, #6]
    ef54:	23fa      	movs	r3, #250	; 0xfa
    ef56:	005b      	lsls	r3, r3, #1
    ef58:	429a      	cmp	r2, r3
    ef5a:	d008      	beq.n	ef6e <constrainScales+0x2a>
		(settings.gyro.scale != 2000))
    ef5c:	4b1b      	ldr	r3, [pc, #108]	; (efcc <constrainScales+0x88>)
    ef5e:	88da      	ldrh	r2, [r3, #6]
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    ef60:	23fa      	movs	r3, #250	; 0xfa
    ef62:	00db      	lsls	r3, r3, #3
    ef64:	429a      	cmp	r2, r3
    ef66:	d002      	beq.n	ef6e <constrainScales+0x2a>
	{
		settings.gyro.scale = 245;
    ef68:	4b18      	ldr	r3, [pc, #96]	; (efcc <constrainScales+0x88>)
    ef6a:	22f5      	movs	r2, #245	; 0xf5
    ef6c:	80da      	strh	r2, [r3, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    ef6e:	4b17      	ldr	r3, [pc, #92]	; (efcc <constrainScales+0x88>)
    ef70:	7ddb      	ldrb	r3, [r3, #23]
    ef72:	2b02      	cmp	r3, #2
    ef74:	d00e      	beq.n	ef94 <constrainScales+0x50>
    ef76:	4b15      	ldr	r3, [pc, #84]	; (efcc <constrainScales+0x88>)
    ef78:	7ddb      	ldrb	r3, [r3, #23]
    ef7a:	2b04      	cmp	r3, #4
    ef7c:	d00a      	beq.n	ef94 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    ef7e:	4b13      	ldr	r3, [pc, #76]	; (efcc <constrainScales+0x88>)
    ef80:	7ddb      	ldrb	r3, [r3, #23]
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    ef82:	2b08      	cmp	r3, #8
    ef84:	d006      	beq.n	ef94 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    ef86:	4b11      	ldr	r3, [pc, #68]	; (efcc <constrainScales+0x88>)
    ef88:	7ddb      	ldrb	r3, [r3, #23]
    ef8a:	2b10      	cmp	r3, #16
    ef8c:	d002      	beq.n	ef94 <constrainScales+0x50>
	{
		settings.accel.scale = 2;
    ef8e:	4b0f      	ldr	r3, [pc, #60]	; (efcc <constrainScales+0x88>)
    ef90:	2202      	movs	r2, #2
    ef92:	75da      	strb	r2, [r3, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    ef94:	4b0d      	ldr	r3, [pc, #52]	; (efcc <constrainScales+0x88>)
    ef96:	2220      	movs	r2, #32
    ef98:	5c9b      	ldrb	r3, [r3, r2]
    ef9a:	2b04      	cmp	r3, #4
    ef9c:	d012      	beq.n	efc4 <constrainScales+0x80>
    ef9e:	4b0b      	ldr	r3, [pc, #44]	; (efcc <constrainScales+0x88>)
    efa0:	2220      	movs	r2, #32
    efa2:	5c9b      	ldrb	r3, [r3, r2]
    efa4:	2b08      	cmp	r3, #8
    efa6:	d00d      	beq.n	efc4 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    efa8:	4b08      	ldr	r3, [pc, #32]	; (efcc <constrainScales+0x88>)
    efaa:	2220      	movs	r2, #32
    efac:	5c9b      	ldrb	r3, [r3, r2]
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    efae:	2b0c      	cmp	r3, #12
    efb0:	d008      	beq.n	efc4 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    efb2:	4b06      	ldr	r3, [pc, #24]	; (efcc <constrainScales+0x88>)
    efb4:	2220      	movs	r2, #32
    efb6:	5c9b      	ldrb	r3, [r3, r2]
    efb8:	2b10      	cmp	r3, #16
    efba:	d003      	beq.n	efc4 <constrainScales+0x80>
	{
		settings.mag.scale = 4;
    efbc:	4b03      	ldr	r3, [pc, #12]	; (efcc <constrainScales+0x88>)
    efbe:	2220      	movs	r2, #32
    efc0:	2104      	movs	r1, #4
    efc2:	5499      	strb	r1, [r3, r2]
	}
}
    efc4:	46c0      	nop			; (mov r8, r8)
    efc6:	46bd      	mov	sp, r7
    efc8:	bd80      	pop	{r7, pc}
    efca:	46c0      	nop			; (mov r8, r8)
    efcc:	200008bc 	.word	0x200008bc

0000efd0 <xgWriteByte>:

void xgWriteByte(uint8_t subAddress, uint8_t data)
{
    efd0:	b580      	push	{r7, lr}
    efd2:	b082      	sub	sp, #8
    efd4:	af00      	add	r7, sp, #0
    efd6:	0002      	movs	r2, r0
    efd8:	1dfb      	adds	r3, r7, #7
    efda:	701a      	strb	r2, [r3, #0]
    efdc:	1dbb      	adds	r3, r7, #6
    efde:	1c0a      	adds	r2, r1, #0
    efe0:	701a      	strb	r2, [r3, #0]
		writeByte(_xgAddress, subAddress, data);
    efe2:	4b06      	ldr	r3, [pc, #24]	; (effc <xgWriteByte+0x2c>)
    efe4:	7818      	ldrb	r0, [r3, #0]
    efe6:	1dbb      	adds	r3, r7, #6
    efe8:	781a      	ldrb	r2, [r3, #0]
    efea:	1dfb      	adds	r3, r7, #7
    efec:	781b      	ldrb	r3, [r3, #0]
    efee:	0019      	movs	r1, r3
    eff0:	4b03      	ldr	r3, [pc, #12]	; (f000 <xgWriteByte+0x30>)
    eff2:	4798      	blx	r3
}
    eff4:	46c0      	nop			; (mov r8, r8)
    eff6:	46bd      	mov	sp, r7
    eff8:	b002      	add	sp, #8
    effa:	bd80      	pop	{r7, pc}
    effc:	20001104 	.word	0x20001104
    f000:	0000f0c9 	.word	0x0000f0c9

0000f004 <xgReadByte>:
{
		return writeByte(_mAddress, subAddress, data);
}

uint8_t xgReadByte(uint8_t subAddress)
{
    f004:	b580      	push	{r7, lr}
    f006:	b082      	sub	sp, #8
    f008:	af00      	add	r7, sp, #0
    f00a:	0002      	movs	r2, r0
    f00c:	1dfb      	adds	r3, r7, #7
    f00e:	701a      	strb	r2, [r3, #0]
		return readByte(_xgAddress, subAddress);
    f010:	4b06      	ldr	r3, [pc, #24]	; (f02c <xgReadByte+0x28>)
    f012:	781a      	ldrb	r2, [r3, #0]
    f014:	1dfb      	adds	r3, r7, #7
    f016:	781b      	ldrb	r3, [r3, #0]
    f018:	0019      	movs	r1, r3
    f01a:	0010      	movs	r0, r2
    f01c:	4b04      	ldr	r3, [pc, #16]	; (f030 <xgReadByte+0x2c>)
    f01e:	4798      	blx	r3
    f020:	0003      	movs	r3, r0
}
    f022:	0018      	movs	r0, r3
    f024:	46bd      	mov	sp, r7
    f026:	b002      	add	sp, #8
    f028:	bd80      	pop	{r7, pc}
    f02a:	46c0      	nop			; (mov r8, r8)
    f02c:	20001104 	.word	0x20001104
    f030:	0000f171 	.word	0x0000f171

0000f034 <xgReadBytes>:

void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    f034:	b590      	push	{r4, r7, lr}
    f036:	b083      	sub	sp, #12
    f038:	af00      	add	r7, sp, #0
    f03a:	6039      	str	r1, [r7, #0]
    f03c:	0011      	movs	r1, r2
    f03e:	1dfb      	adds	r3, r7, #7
    f040:	1c02      	adds	r2, r0, #0
    f042:	701a      	strb	r2, [r3, #0]
    f044:	1dbb      	adds	r3, r7, #6
    f046:	1c0a      	adds	r2, r1, #0
    f048:	701a      	strb	r2, [r3, #0]
		readBytes(_xgAddress, subAddress, dest, count);
    f04a:	4b07      	ldr	r3, [pc, #28]	; (f068 <xgReadBytes+0x34>)
    f04c:	7818      	ldrb	r0, [r3, #0]
    f04e:	1dbb      	adds	r3, r7, #6
    f050:	781c      	ldrb	r4, [r3, #0]
    f052:	683a      	ldr	r2, [r7, #0]
    f054:	1dfb      	adds	r3, r7, #7
    f056:	7819      	ldrb	r1, [r3, #0]
    f058:	0023      	movs	r3, r4
    f05a:	4c04      	ldr	r4, [pc, #16]	; (f06c <xgReadBytes+0x38>)
    f05c:	47a0      	blx	r4
}
    f05e:	46c0      	nop			; (mov r8, r8)
    f060:	46bd      	mov	sp, r7
    f062:	b003      	add	sp, #12
    f064:	bd90      	pop	{r4, r7, pc}
    f066:	46c0      	nop			; (mov r8, r8)
    f068:	20001104 	.word	0x20001104
    f06c:	0000f241 	.word	0x0000f241

0000f070 <initI2C>:
		readBytes(_mAddress, subAddress, dest, count);
}

// Configure SERCOM channel 3 as I2C master for IMU communication
void initI2C()
{
    f070:	b580      	push	{r7, lr}
    f072:	b08e      	sub	sp, #56	; 0x38
    f074:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    f076:	1d3b      	adds	r3, r7, #4
    f078:	0018      	movs	r0, r3
    f07a:	4b0c      	ldr	r3, [pc, #48]	; (f0ac <initI2C+0x3c>)
    f07c:	4798      	blx	r3
	config_i2c_master.buffer_timeout = MASTER_TIMEOUT;
    f07e:	1d3b      	adds	r3, r7, #4
    f080:	22fa      	movs	r2, #250	; 0xfa
    f082:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    f084:	1d3b      	adds	r3, r7, #4
    f086:	4a0a      	ldr	r2, [pc, #40]	; (f0b0 <initI2C+0x40>)
    f088:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    f08a:	1d3b      	adds	r3, r7, #4
    f08c:	4a09      	ldr	r2, [pc, #36]	; (f0b4 <initI2C+0x44>)
    f08e:	621a      	str	r2, [r3, #32]
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    f090:	1d3a      	adds	r2, r7, #4
    f092:	4909      	ldr	r1, [pc, #36]	; (f0b8 <initI2C+0x48>)
    f094:	4b09      	ldr	r3, [pc, #36]	; (f0bc <initI2C+0x4c>)
    f096:	0018      	movs	r0, r3
    f098:	4b09      	ldr	r3, [pc, #36]	; (f0c0 <initI2C+0x50>)
    f09a:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    f09c:	4b07      	ldr	r3, [pc, #28]	; (f0bc <initI2C+0x4c>)
    f09e:	0018      	movs	r0, r3
    f0a0:	4b08      	ldr	r3, [pc, #32]	; (f0c4 <initI2C+0x54>)
    f0a2:	4798      	blx	r3
}
    f0a4:	46c0      	nop			; (mov r8, r8)
    f0a6:	46bd      	mov	sp, r7
    f0a8:	b00e      	add	sp, #56	; 0x38
    f0aa:	bd80      	pop	{r7, pc}
    f0ac:	0000990d 	.word	0x0000990d
    f0b0:	00160002 	.word	0x00160002
    f0b4:	00170002 	.word	0x00170002
    f0b8:	42001400 	.word	0x42001400
    f0bc:	20001548 	.word	0x20001548
    f0c0:	00003701 	.word	0x00003701
    f0c4:	00009991 	.word	0x00009991

0000f0c8 <writeByte>:

// Wire.h read and write protocols
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
    f0c8:	b590      	push	{r4, r7, lr}
    f0ca:	b087      	sub	sp, #28
    f0cc:	af00      	add	r7, sp, #0
    f0ce:	0004      	movs	r4, r0
    f0d0:	0008      	movs	r0, r1
    f0d2:	0011      	movs	r1, r2
    f0d4:	1dfb      	adds	r3, r7, #7
    f0d6:	1c22      	adds	r2, r4, #0
    f0d8:	701a      	strb	r2, [r3, #0]
    f0da:	1dbb      	adds	r3, r7, #6
    f0dc:	1c02      	adds	r2, r0, #0
    f0de:	701a      	strb	r2, [r3, #0]
    f0e0:	1d7b      	adds	r3, r7, #5
    f0e2:	1c0a      	adds	r2, r1, #0
    f0e4:	701a      	strb	r2, [r3, #0]
	/* Timeout counter. */
	uint16_t timeout = 0;
    f0e6:	2316      	movs	r3, #22
    f0e8:	18fb      	adds	r3, r7, r3
    f0ea:	2200      	movs	r2, #0
    f0ec:	801a      	strh	r2, [r3, #0]
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    f0ee:	4b1d      	ldr	r3, [pc, #116]	; (f164 <writeByte+0x9c>)
    f0f0:	1dba      	adds	r2, r7, #6
    f0f2:	7812      	ldrb	r2, [r2, #0]
    f0f4:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = data;
    f0f6:	4b1b      	ldr	r3, [pc, #108]	; (f164 <writeByte+0x9c>)
    f0f8:	1d7a      	adds	r2, r7, #5
    f0fa:	7812      	ldrb	r2, [r2, #0]
    f0fc:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
    f0fe:	1dfb      	adds	r3, r7, #7
    f100:	781b      	ldrb	r3, [r3, #0]
    f102:	b29a      	uxth	r2, r3
    f104:	2308      	movs	r3, #8
    f106:	18fb      	adds	r3, r7, r3
    f108:	801a      	strh	r2, [r3, #0]
    f10a:	2308      	movs	r3, #8
    f10c:	18fb      	adds	r3, r7, r3
    f10e:	2202      	movs	r2, #2
    f110:	805a      	strh	r2, [r3, #2]
    f112:	2308      	movs	r3, #8
    f114:	18fb      	adds	r3, r7, r3
    f116:	4a13      	ldr	r2, [pc, #76]	; (f164 <writeByte+0x9c>)
    f118:	605a      	str	r2, [r3, #4]
    f11a:	2308      	movs	r3, #8
    f11c:	18fb      	adds	r3, r7, r3
    f11e:	2200      	movs	r2, #0
    f120:	721a      	strb	r2, [r3, #8]
    f122:	2308      	movs	r3, #8
    f124:	18fb      	adds	r3, r7, r3
    f126:	2200      	movs	r2, #0
    f128:	725a      	strb	r2, [r3, #9]
    f12a:	2308      	movs	r3, #8
    f12c:	18fb      	adds	r3, r7, r3
    f12e:	2200      	movs	r2, #0
    f130:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

    /* Write buffer to slave until success. */
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    f132:	e008      	b.n	f146 <writeByte+0x7e>
    STATUS_OK) {
	    /* Increment timeout counter and check if timed out. */
	    if (timeout++ == MASTER_TIMEOUT) {
    f134:	2316      	movs	r3, #22
    f136:	18fb      	adds	r3, r7, r3
    f138:	881b      	ldrh	r3, [r3, #0]
    f13a:	2216      	movs	r2, #22
    f13c:	18ba      	adds	r2, r7, r2
    f13e:	1c59      	adds	r1, r3, #1
    f140:	8011      	strh	r1, [r2, #0]
    f142:	2bfa      	cmp	r3, #250	; 0xfa
    f144:	d009      	beq.n	f15a <writeByte+0x92>
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    f146:	2308      	movs	r3, #8
    f148:	18fa      	adds	r2, r7, r3
    f14a:	4b07      	ldr	r3, [pc, #28]	; (f168 <writeByte+0xa0>)
    f14c:	0011      	movs	r1, r2
    f14e:	0018      	movs	r0, r3
    f150:	4b06      	ldr	r3, [pc, #24]	; (f16c <writeByte+0xa4>)
    f152:	4798      	blx	r3
    f154:	1e03      	subs	r3, r0, #0
    f156:	d1ed      	bne.n	f134 <writeByte+0x6c>
		    break;
	    }
    }
}
    f158:	e000      	b.n	f15c <writeByte+0x94>
		    break;
    f15a:	46c0      	nop			; (mov r8, r8)
}
    f15c:	46c0      	nop			; (mov r8, r8)
    f15e:	46bd      	mov	sp, r7
    f160:	b007      	add	sp, #28
    f162:	bd90      	pop	{r4, r7, pc}
    f164:	20001a24 	.word	0x20001a24
    f168:	20001548 	.word	0x20001548
    f16c:	00003d71 	.word	0x00003d71

0000f170 <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
    f170:	b580      	push	{r7, lr}
    f172:	b088      	sub	sp, #32
    f174:	af00      	add	r7, sp, #0
    f176:	0002      	movs	r2, r0
    f178:	1dfb      	adds	r3, r7, #7
    f17a:	701a      	strb	r2, [r3, #0]
    f17c:	1dbb      	adds	r3, r7, #6
    f17e:	1c0a      	adds	r2, r1, #0
    f180:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    f182:	2300      	movs	r3, #0
    f184:	61fb      	str	r3, [r7, #28]
	uint8_t data; // `data` will store the register data	
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    f186:	4b29      	ldr	r3, [pc, #164]	; (f22c <readByte+0xbc>)
    f188:	1dba      	adds	r2, r7, #6
    f18a:	7812      	ldrb	r2, [r2, #0]
    f18c:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    f18e:	1dfb      	adds	r3, r7, #7
    f190:	781b      	ldrb	r3, [r3, #0]
    f192:	b29a      	uxth	r2, r3
    f194:	230c      	movs	r3, #12
    f196:	18fb      	adds	r3, r7, r3
    f198:	801a      	strh	r2, [r3, #0]
    f19a:	230c      	movs	r3, #12
    f19c:	18fb      	adds	r3, r7, r3
    f19e:	2201      	movs	r2, #1
    f1a0:	805a      	strh	r2, [r3, #2]
    f1a2:	230c      	movs	r3, #12
    f1a4:	18fb      	adds	r3, r7, r3
    f1a6:	4a21      	ldr	r2, [pc, #132]	; (f22c <readByte+0xbc>)
    f1a8:	605a      	str	r2, [r3, #4]
    f1aa:	230c      	movs	r3, #12
    f1ac:	18fb      	adds	r3, r7, r3
    f1ae:	2200      	movs	r2, #0
    f1b0:	721a      	strb	r2, [r3, #8]
    f1b2:	230c      	movs	r3, #12
    f1b4:	18fb      	adds	r3, r7, r3
    f1b6:	2200      	movs	r2, #0
    f1b8:	725a      	strb	r2, [r3, #9]
    f1ba:	230c      	movs	r3, #12
    f1bc:	18fb      	adds	r3, r7, r3
    f1be:	2200      	movs	r2, #0
    f1c0:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    f1c2:	e004      	b.n	f1ce <readByte+0x5e>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    f1c4:	69fb      	ldr	r3, [r7, #28]
    f1c6:	1c5a      	adds	r2, r3, #1
    f1c8:	61fa      	str	r2, [r7, #28]
    f1ca:	2bfa      	cmp	r3, #250	; 0xfa
    f1cc:	d009      	beq.n	f1e2 <readByte+0x72>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    f1ce:	230c      	movs	r3, #12
    f1d0:	18fa      	adds	r2, r7, r3
    f1d2:	4b17      	ldr	r3, [pc, #92]	; (f230 <readByte+0xc0>)
    f1d4:	0011      	movs	r1, r2
    f1d6:	0018      	movs	r0, r3
    f1d8:	4b16      	ldr	r3, [pc, #88]	; (f234 <readByte+0xc4>)
    f1da:	4798      	blx	r3
    f1dc:	1e03      	subs	r3, r0, #0
    f1de:	d1f1      	bne.n	f1c4 <readByte+0x54>
    f1e0:	e000      	b.n	f1e4 <readByte+0x74>
			break;
    f1e2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    f1e4:	2300      	movs	r3, #0
    f1e6:	61fb      	str	r3, [r7, #28]
	packet.data = read_buffer;
    f1e8:	230c      	movs	r3, #12
    f1ea:	18fb      	adds	r3, r7, r3
    f1ec:	4a12      	ldr	r2, [pc, #72]	; (f238 <readByte+0xc8>)
    f1ee:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f1f0:	e004      	b.n	f1fc <readByte+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    f1f2:	69fb      	ldr	r3, [r7, #28]
    f1f4:	1c5a      	adds	r2, r3, #1
    f1f6:	61fa      	str	r2, [r7, #28]
    f1f8:	2bfa      	cmp	r3, #250	; 0xfa
    f1fa:	d009      	beq.n	f210 <readByte+0xa0>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f1fc:	230c      	movs	r3, #12
    f1fe:	18fa      	adds	r2, r7, r3
    f200:	4b0b      	ldr	r3, [pc, #44]	; (f230 <readByte+0xc0>)
    f202:	0011      	movs	r1, r2
    f204:	0018      	movs	r0, r3
    f206:	4b0d      	ldr	r3, [pc, #52]	; (f23c <readByte+0xcc>)
    f208:	4798      	blx	r3
    f20a:	1e03      	subs	r3, r0, #0
    f20c:	d1f1      	bne.n	f1f2 <readByte+0x82>
    f20e:	e000      	b.n	f212 <readByte+0xa2>
			break;
    f210:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	data = read_buffer[0];                      // Fill Rx buffer with result
    f212:	231b      	movs	r3, #27
    f214:	18fb      	adds	r3, r7, r3
    f216:	4a08      	ldr	r2, [pc, #32]	; (f238 <readByte+0xc8>)
    f218:	7812      	ldrb	r2, [r2, #0]
    f21a:	701a      	strb	r2, [r3, #0]
	return data;                             // Return data read from slave register
    f21c:	231b      	movs	r3, #27
    f21e:	18fb      	adds	r3, r7, r3
    f220:	781b      	ldrb	r3, [r3, #0]
}
    f222:	0018      	movs	r0, r3
    f224:	46bd      	mov	sp, r7
    f226:	b008      	add	sp, #32
    f228:	bd80      	pop	{r7, pc}
    f22a:	46c0      	nop			; (mov r8, r8)
    f22c:	20001a24 	.word	0x20001a24
    f230:	20001548 	.word	0x20001548
    f234:	00003d71 	.word	0x00003d71
    f238:	20001584 	.word	0x20001584
    f23c:	00003bb9 	.word	0x00003bb9

0000f240 <readBytes>:

uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
    f240:	b590      	push	{r4, r7, lr}
    f242:	b089      	sub	sp, #36	; 0x24
    f244:	af00      	add	r7, sp, #0
    f246:	0004      	movs	r4, r0
    f248:	0008      	movs	r0, r1
    f24a:	603a      	str	r2, [r7, #0]
    f24c:	0019      	movs	r1, r3
    f24e:	1dfb      	adds	r3, r7, #7
    f250:	1c22      	adds	r2, r4, #0
    f252:	701a      	strb	r2, [r3, #0]
    f254:	1dbb      	adds	r3, r7, #6
    f256:	1c02      	adds	r2, r0, #0
    f258:	701a      	strb	r2, [r3, #0]
    f25a:	1d7b      	adds	r3, r7, #5
    f25c:	1c0a      	adds	r2, r1, #0
    f25e:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    f260:	2300      	movs	r3, #0
    f262:	61fb      	str	r3, [r7, #28]
	/* Init i2c packet. */
#ifdef HW_3v4
	write_buffer[0] = subAddress | 0x80;
#endif
#if  defined(HW_4v0) || defined(HW_4v1)
	write_buffer[0] = subAddress;
    f264:	4b39      	ldr	r3, [pc, #228]	; (f34c <readBytes+0x10c>)
    f266:	1dba      	adds	r2, r7, #6
    f268:	7812      	ldrb	r2, [r2, #0]
    f26a:	701a      	strb	r2, [r3, #0]
#endif
	struct i2c_master_packet packet = {
    f26c:	1dfb      	adds	r3, r7, #7
    f26e:	781b      	ldrb	r3, [r3, #0]
    f270:	b29a      	uxth	r2, r3
    f272:	230c      	movs	r3, #12
    f274:	18fb      	adds	r3, r7, r3
    f276:	801a      	strh	r2, [r3, #0]
    f278:	230c      	movs	r3, #12
    f27a:	18fb      	adds	r3, r7, r3
    f27c:	2201      	movs	r2, #1
    f27e:	805a      	strh	r2, [r3, #2]
    f280:	230c      	movs	r3, #12
    f282:	18fb      	adds	r3, r7, r3
    f284:	4a31      	ldr	r2, [pc, #196]	; (f34c <readBytes+0x10c>)
    f286:	605a      	str	r2, [r3, #4]
    f288:	230c      	movs	r3, #12
    f28a:	18fb      	adds	r3, r7, r3
    f28c:	2200      	movs	r2, #0
    f28e:	721a      	strb	r2, [r3, #8]
    f290:	230c      	movs	r3, #12
    f292:	18fb      	adds	r3, r7, r3
    f294:	2200      	movs	r2, #0
    f296:	725a      	strb	r2, [r3, #9]
    f298:	230c      	movs	r3, #12
    f29a:	18fb      	adds	r3, r7, r3
    f29c:	2200      	movs	r2, #0
    f29e:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    f2a0:	e004      	b.n	f2ac <readBytes+0x6c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    f2a2:	69fb      	ldr	r3, [r7, #28]
    f2a4:	1c5a      	adds	r2, r3, #1
    f2a6:	61fa      	str	r2, [r7, #28]
    f2a8:	2bfa      	cmp	r3, #250	; 0xfa
    f2aa:	d009      	beq.n	f2c0 <readBytes+0x80>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    f2ac:	230c      	movs	r3, #12
    f2ae:	18fa      	adds	r2, r7, r3
    f2b0:	4b27      	ldr	r3, [pc, #156]	; (f350 <readBytes+0x110>)
    f2b2:	0011      	movs	r1, r2
    f2b4:	0018      	movs	r0, r3
    f2b6:	4b27      	ldr	r3, [pc, #156]	; (f354 <readBytes+0x114>)
    f2b8:	4798      	blx	r3
    f2ba:	1e03      	subs	r3, r0, #0
    f2bc:	d1f1      	bne.n	f2a2 <readBytes+0x62>
    f2be:	e000      	b.n	f2c2 <readBytes+0x82>
			break;
    f2c0:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    f2c2:	2300      	movs	r3, #0
    f2c4:	61fb      	str	r3, [r7, #28]
	packet.data_length = count;
    f2c6:	1d7b      	adds	r3, r7, #5
    f2c8:	781b      	ldrb	r3, [r3, #0]
    f2ca:	b29a      	uxth	r2, r3
    f2cc:	230c      	movs	r3, #12
    f2ce:	18fb      	adds	r3, r7, r3
    f2d0:	805a      	strh	r2, [r3, #2]
	packet.data = read_buffer;
    f2d2:	230c      	movs	r3, #12
    f2d4:	18fb      	adds	r3, r7, r3
    f2d6:	4a20      	ldr	r2, [pc, #128]	; (f358 <readBytes+0x118>)
    f2d8:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f2da:	e004      	b.n	f2e6 <readBytes+0xa6>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    f2dc:	69fb      	ldr	r3, [r7, #28]
    f2de:	1c5a      	adds	r2, r3, #1
    f2e0:	61fa      	str	r2, [r7, #28]
    f2e2:	2bfa      	cmp	r3, #250	; 0xfa
    f2e4:	d009      	beq.n	f2fa <readBytes+0xba>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f2e6:	230c      	movs	r3, #12
    f2e8:	18fa      	adds	r2, r7, r3
    f2ea:	4b19      	ldr	r3, [pc, #100]	; (f350 <readBytes+0x110>)
    f2ec:	0011      	movs	r1, r2
    f2ee:	0018      	movs	r0, r3
    f2f0:	4b1a      	ldr	r3, [pc, #104]	; (f35c <readBytes+0x11c>)
    f2f2:	4798      	blx	r3
    f2f4:	1e03      	subs	r3, r0, #0
    f2f6:	d1f1      	bne.n	f2dc <readBytes+0x9c>
    f2f8:	e000      	b.n	f2fc <readBytes+0xbc>
			break;
    f2fa:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	uint8_t i = 0;
    f2fc:	231b      	movs	r3, #27
    f2fe:	18fb      	adds	r3, r7, r3
    f300:	2200      	movs	r2, #0
    f302:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    f304:	231b      	movs	r3, #27
    f306:	18fb      	adds	r3, r7, r3
    f308:	2200      	movs	r2, #0
    f30a:	701a      	strb	r2, [r3, #0]
    f30c:	e011      	b.n	f332 <readBytes+0xf2>
	{
		dest[i] = read_buffer[i];
    f30e:	231b      	movs	r3, #27
    f310:	18fb      	adds	r3, r7, r3
    f312:	781b      	ldrb	r3, [r3, #0]
    f314:	683a      	ldr	r2, [r7, #0]
    f316:	18d3      	adds	r3, r2, r3
    f318:	221b      	movs	r2, #27
    f31a:	18ba      	adds	r2, r7, r2
    f31c:	7812      	ldrb	r2, [r2, #0]
    f31e:	490e      	ldr	r1, [pc, #56]	; (f358 <readBytes+0x118>)
    f320:	5c8a      	ldrb	r2, [r1, r2]
    f322:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    f324:	231b      	movs	r3, #27
    f326:	18fb      	adds	r3, r7, r3
    f328:	781a      	ldrb	r2, [r3, #0]
    f32a:	231b      	movs	r3, #27
    f32c:	18fb      	adds	r3, r7, r3
    f32e:	3201      	adds	r2, #1
    f330:	701a      	strb	r2, [r3, #0]
    f332:	231b      	movs	r3, #27
    f334:	18fa      	adds	r2, r7, r3
    f336:	1d7b      	adds	r3, r7, #5
    f338:	7812      	ldrb	r2, [r2, #0]
    f33a:	781b      	ldrb	r3, [r3, #0]
    f33c:	429a      	cmp	r2, r3
    f33e:	d3e6      	bcc.n	f30e <readBytes+0xce>
	}
	return count;
    f340:	1d7b      	adds	r3, r7, #5
    f342:	781b      	ldrb	r3, [r3, #0]
}
    f344:	0018      	movs	r0, r3
    f346:	46bd      	mov	sp, r7
    f348:	b009      	add	sp, #36	; 0x24
    f34a:	bd90      	pop	{r4, r7, pc}
    f34c:	20001a24 	.word	0x20001a24
    f350:	20001548 	.word	0x20001548
    f354:	00003d71 	.word	0x00003d71
    f358:	20001584 	.word	0x20001584
    f35c:	00003bb9 	.word	0x00003bb9

0000f360 <CorrectIMUvalues>:

void CorrectIMUvalues(uint8_t connector_orient, uint8_t power_orient){
    f360:	b580      	push	{r7, lr}
    f362:	b082      	sub	sp, #8
    f364:	af00      	add	r7, sp, #0
    f366:	0002      	movs	r2, r0
    f368:	1dfb      	adds	r3, r7, #7
    f36a:	701a      	strb	r2, [r3, #0]
    f36c:	1dbb      	adds	r3, r7, #6
    f36e:	1c0a      	adds	r2, r1, #0
    f370:	701a      	strb	r2, [r3, #0]
	if((connector_orient == 0 || power_orient == 0)||(connector_orient > 6 || power_orient > 6)){
    f372:	1dfb      	adds	r3, r7, #7
    f374:	781b      	ldrb	r3, [r3, #0]
    f376:	2b00      	cmp	r3, #0
    f378:	d00b      	beq.n	f392 <CorrectIMUvalues+0x32>
    f37a:	1dbb      	adds	r3, r7, #6
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	2b00      	cmp	r3, #0
    f380:	d007      	beq.n	f392 <CorrectIMUvalues+0x32>
    f382:	1dfb      	adds	r3, r7, #7
    f384:	781b      	ldrb	r3, [r3, #0]
    f386:	2b06      	cmp	r3, #6
    f388:	d803      	bhi.n	f392 <CorrectIMUvalues+0x32>
    f38a:	1dbb      	adds	r3, r7, #6
    f38c:	781b      	ldrb	r3, [r3, #0]
    f38e:	2b06      	cmp	r3, #6
    f390:	d92e      	bls.n	f3f0 <CorrectIMUvalues+0x90>
		caz = az;
    f392:	4bf3      	ldr	r3, [pc, #972]	; (f760 <CorrectIMUvalues+0x400>)
    f394:	2200      	movs	r2, #0
    f396:	5e9a      	ldrsh	r2, [r3, r2]
    f398:	4bf2      	ldr	r3, [pc, #968]	; (f764 <CorrectIMUvalues+0x404>)
    f39a:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    f39c:	4bf2      	ldr	r3, [pc, #968]	; (f768 <CorrectIMUvalues+0x408>)
    f39e:	2200      	movs	r2, #0
    f3a0:	5e9a      	ldrsh	r2, [r3, r2]
    f3a2:	4bf2      	ldr	r3, [pc, #968]	; (f76c <CorrectIMUvalues+0x40c>)
    f3a4:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    f3a6:	4bf2      	ldr	r3, [pc, #968]	; (f770 <CorrectIMUvalues+0x410>)
    f3a8:	2200      	movs	r2, #0
    f3aa:	5e9a      	ldrsh	r2, [r3, r2]
    f3ac:	4bf1      	ldr	r3, [pc, #964]	; (f774 <CorrectIMUvalues+0x414>)
    f3ae:	801a      	strh	r2, [r3, #0]
		cax = ax;
    f3b0:	4bf1      	ldr	r3, [pc, #964]	; (f778 <CorrectIMUvalues+0x418>)
    f3b2:	2200      	movs	r2, #0
    f3b4:	5e9a      	ldrsh	r2, [r3, r2]
    f3b6:	4bf1      	ldr	r3, [pc, #964]	; (f77c <CorrectIMUvalues+0x41c>)
    f3b8:	801a      	strh	r2, [r3, #0]
		cay = ay;
    f3ba:	4bf1      	ldr	r3, [pc, #964]	; (f780 <CorrectIMUvalues+0x420>)
    f3bc:	2200      	movs	r2, #0
    f3be:	5e9a      	ldrsh	r2, [r3, r2]
    f3c0:	4bf0      	ldr	r3, [pc, #960]	; (f784 <CorrectIMUvalues+0x424>)
    f3c2:	801a      	strh	r2, [r3, #0]
		cgx = gx;
    f3c4:	4bf0      	ldr	r3, [pc, #960]	; (f788 <CorrectIMUvalues+0x428>)
    f3c6:	2200      	movs	r2, #0
    f3c8:	5e9a      	ldrsh	r2, [r3, r2]
    f3ca:	4bf0      	ldr	r3, [pc, #960]	; (f78c <CorrectIMUvalues+0x42c>)
    f3cc:	801a      	strh	r2, [r3, #0]
		cgy = gy;
    f3ce:	4bf0      	ldr	r3, [pc, #960]	; (f790 <CorrectIMUvalues+0x430>)
    f3d0:	2200      	movs	r2, #0
    f3d2:	5e9a      	ldrsh	r2, [r3, r2]
    f3d4:	4bef      	ldr	r3, [pc, #956]	; (f794 <CorrectIMUvalues+0x434>)
    f3d6:	801a      	strh	r2, [r3, #0]
		cmx = mx;
    f3d8:	4bef      	ldr	r3, [pc, #956]	; (f798 <CorrectIMUvalues+0x438>)
    f3da:	2200      	movs	r2, #0
    f3dc:	5e9a      	ldrsh	r2, [r3, r2]
    f3de:	4bef      	ldr	r3, [pc, #956]	; (f79c <CorrectIMUvalues+0x43c>)
    f3e0:	801a      	strh	r2, [r3, #0]
		cmy = my;
    f3e2:	4bef      	ldr	r3, [pc, #956]	; (f7a0 <CorrectIMUvalues+0x440>)
    f3e4:	2200      	movs	r2, #0
    f3e6:	5e9a      	ldrsh	r2, [r3, r2]
    f3e8:	4bee      	ldr	r3, [pc, #952]	; (f7a4 <CorrectIMUvalues+0x444>)
    f3ea:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
			cmx = mz;
			cmy = mx;
		}
	}
}
    f3ec:	f000 fd5a 	bl	fea4 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_UP){ // Connectors Up
    f3f0:	1dfb      	adds	r3, r7, #7
    f3f2:	781b      	ldrb	r3, [r3, #0]
    f3f4:	2b01      	cmp	r3, #1
    f3f6:	d000      	beq.n	f3fa <CorrectIMUvalues+0x9a>
    f3f8:	e0d0      	b.n	f59c <CorrectIMUvalues+0x23c>
		caz = az;
    f3fa:	4bd9      	ldr	r3, [pc, #868]	; (f760 <CorrectIMUvalues+0x400>)
    f3fc:	2200      	movs	r2, #0
    f3fe:	5e9a      	ldrsh	r2, [r3, r2]
    f400:	4bd8      	ldr	r3, [pc, #864]	; (f764 <CorrectIMUvalues+0x404>)
    f402:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    f404:	4bd8      	ldr	r3, [pc, #864]	; (f768 <CorrectIMUvalues+0x408>)
    f406:	2200      	movs	r2, #0
    f408:	5e9a      	ldrsh	r2, [r3, r2]
    f40a:	4bd8      	ldr	r3, [pc, #864]	; (f76c <CorrectIMUvalues+0x40c>)
    f40c:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    f40e:	4bd8      	ldr	r3, [pc, #864]	; (f770 <CorrectIMUvalues+0x410>)
    f410:	2200      	movs	r2, #0
    f412:	5e9a      	ldrsh	r2, [r3, r2]
    f414:	4bd7      	ldr	r3, [pc, #860]	; (f774 <CorrectIMUvalues+0x414>)
    f416:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    f418:	1dbb      	adds	r3, r7, #6
    f41a:	781b      	ldrb	r3, [r3, #0]
    f41c:	2b03      	cmp	r3, #3
    f41e:	d12b      	bne.n	f478 <CorrectIMUvalues+0x118>
			cax = -ay;
    f420:	4bd7      	ldr	r3, [pc, #860]	; (f780 <CorrectIMUvalues+0x420>)
    f422:	2200      	movs	r2, #0
    f424:	5e9b      	ldrsh	r3, [r3, r2]
    f426:	b29b      	uxth	r3, r3
    f428:	425b      	negs	r3, r3
    f42a:	b29b      	uxth	r3, r3
    f42c:	b21a      	sxth	r2, r3
    f42e:	4bd3      	ldr	r3, [pc, #844]	; (f77c <CorrectIMUvalues+0x41c>)
    f430:	801a      	strh	r2, [r3, #0]
			cay = ax;
    f432:	4bd1      	ldr	r3, [pc, #836]	; (f778 <CorrectIMUvalues+0x418>)
    f434:	2200      	movs	r2, #0
    f436:	5e9a      	ldrsh	r2, [r3, r2]
    f438:	4bd2      	ldr	r3, [pc, #840]	; (f784 <CorrectIMUvalues+0x424>)
    f43a:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    f43c:	4bd4      	ldr	r3, [pc, #848]	; (f790 <CorrectIMUvalues+0x430>)
    f43e:	2200      	movs	r2, #0
    f440:	5e9b      	ldrsh	r3, [r3, r2]
    f442:	b29b      	uxth	r3, r3
    f444:	425b      	negs	r3, r3
    f446:	b29b      	uxth	r3, r3
    f448:	b21a      	sxth	r2, r3
    f44a:	4bd0      	ldr	r3, [pc, #832]	; (f78c <CorrectIMUvalues+0x42c>)
    f44c:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    f44e:	4bce      	ldr	r3, [pc, #824]	; (f788 <CorrectIMUvalues+0x428>)
    f450:	2200      	movs	r2, #0
    f452:	5e9a      	ldrsh	r2, [r3, r2]
    f454:	4bcf      	ldr	r3, [pc, #828]	; (f794 <CorrectIMUvalues+0x434>)
    f456:	801a      	strh	r2, [r3, #0]
			cmx = my;
    f458:	4bd1      	ldr	r3, [pc, #836]	; (f7a0 <CorrectIMUvalues+0x440>)
    f45a:	2200      	movs	r2, #0
    f45c:	5e9a      	ldrsh	r2, [r3, r2]
    f45e:	4bcf      	ldr	r3, [pc, #828]	; (f79c <CorrectIMUvalues+0x43c>)
    f460:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    f462:	4bcd      	ldr	r3, [pc, #820]	; (f798 <CorrectIMUvalues+0x438>)
    f464:	2200      	movs	r2, #0
    f466:	5e9b      	ldrsh	r3, [r3, r2]
    f468:	b29b      	uxth	r3, r3
    f46a:	425b      	negs	r3, r3
    f46c:	b29b      	uxth	r3, r3
    f46e:	b21a      	sxth	r2, r3
    f470:	4bcc      	ldr	r3, [pc, #816]	; (f7a4 <CorrectIMUvalues+0x444>)
    f472:	801a      	strh	r2, [r3, #0]
}
    f474:	f000 fd16 	bl	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    f478:	1dbb      	adds	r3, r7, #6
    f47a:	781b      	ldrb	r3, [r3, #0]
    f47c:	2b04      	cmp	r3, #4
    f47e:	d12b      	bne.n	f4d8 <CorrectIMUvalues+0x178>
			cax = ay;
    f480:	4bbf      	ldr	r3, [pc, #764]	; (f780 <CorrectIMUvalues+0x420>)
    f482:	2200      	movs	r2, #0
    f484:	5e9a      	ldrsh	r2, [r3, r2]
    f486:	4bbd      	ldr	r3, [pc, #756]	; (f77c <CorrectIMUvalues+0x41c>)
    f488:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    f48a:	4bbb      	ldr	r3, [pc, #748]	; (f778 <CorrectIMUvalues+0x418>)
    f48c:	2200      	movs	r2, #0
    f48e:	5e9b      	ldrsh	r3, [r3, r2]
    f490:	b29b      	uxth	r3, r3
    f492:	425b      	negs	r3, r3
    f494:	b29b      	uxth	r3, r3
    f496:	b21a      	sxth	r2, r3
    f498:	4bba      	ldr	r3, [pc, #744]	; (f784 <CorrectIMUvalues+0x424>)
    f49a:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    f49c:	4bbc      	ldr	r3, [pc, #752]	; (f790 <CorrectIMUvalues+0x430>)
    f49e:	2200      	movs	r2, #0
    f4a0:	5e9a      	ldrsh	r2, [r3, r2]
    f4a2:	4bba      	ldr	r3, [pc, #744]	; (f78c <CorrectIMUvalues+0x42c>)
    f4a4:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    f4a6:	4bb8      	ldr	r3, [pc, #736]	; (f788 <CorrectIMUvalues+0x428>)
    f4a8:	2200      	movs	r2, #0
    f4aa:	5e9b      	ldrsh	r3, [r3, r2]
    f4ac:	b29b      	uxth	r3, r3
    f4ae:	425b      	negs	r3, r3
    f4b0:	b29b      	uxth	r3, r3
    f4b2:	b21a      	sxth	r2, r3
    f4b4:	4bb7      	ldr	r3, [pc, #732]	; (f794 <CorrectIMUvalues+0x434>)
    f4b6:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    f4b8:	4bb9      	ldr	r3, [pc, #740]	; (f7a0 <CorrectIMUvalues+0x440>)
    f4ba:	2200      	movs	r2, #0
    f4bc:	5e9b      	ldrsh	r3, [r3, r2]
    f4be:	b29b      	uxth	r3, r3
    f4c0:	425b      	negs	r3, r3
    f4c2:	b29b      	uxth	r3, r3
    f4c4:	b21a      	sxth	r2, r3
    f4c6:	4bb5      	ldr	r3, [pc, #724]	; (f79c <CorrectIMUvalues+0x43c>)
    f4c8:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    f4ca:	4bb3      	ldr	r3, [pc, #716]	; (f798 <CorrectIMUvalues+0x438>)
    f4cc:	2200      	movs	r2, #0
    f4ce:	5e9a      	ldrsh	r2, [r3, r2]
    f4d0:	4bb4      	ldr	r3, [pc, #720]	; (f7a4 <CorrectIMUvalues+0x444>)
    f4d2:	801a      	strh	r2, [r3, #0]
}
    f4d4:	f000 fce6 	bl	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    f4d8:	1dbb      	adds	r3, r7, #6
    f4da:	781b      	ldrb	r3, [r3, #0]
    f4dc:	2b05      	cmp	r3, #5
    f4de:	d137      	bne.n	f550 <CorrectIMUvalues+0x1f0>
			cax = -ax;
    f4e0:	4ba5      	ldr	r3, [pc, #660]	; (f778 <CorrectIMUvalues+0x418>)
    f4e2:	2200      	movs	r2, #0
    f4e4:	5e9b      	ldrsh	r3, [r3, r2]
    f4e6:	b29b      	uxth	r3, r3
    f4e8:	425b      	negs	r3, r3
    f4ea:	b29b      	uxth	r3, r3
    f4ec:	b21a      	sxth	r2, r3
    f4ee:	4ba3      	ldr	r3, [pc, #652]	; (f77c <CorrectIMUvalues+0x41c>)
    f4f0:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    f4f2:	4ba3      	ldr	r3, [pc, #652]	; (f780 <CorrectIMUvalues+0x420>)
    f4f4:	2200      	movs	r2, #0
    f4f6:	5e9b      	ldrsh	r3, [r3, r2]
    f4f8:	b29b      	uxth	r3, r3
    f4fa:	425b      	negs	r3, r3
    f4fc:	b29b      	uxth	r3, r3
    f4fe:	b21a      	sxth	r2, r3
    f500:	4ba0      	ldr	r3, [pc, #640]	; (f784 <CorrectIMUvalues+0x424>)
    f502:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    f504:	4ba0      	ldr	r3, [pc, #640]	; (f788 <CorrectIMUvalues+0x428>)
    f506:	2200      	movs	r2, #0
    f508:	5e9b      	ldrsh	r3, [r3, r2]
    f50a:	b29b      	uxth	r3, r3
    f50c:	425b      	negs	r3, r3
    f50e:	b29b      	uxth	r3, r3
    f510:	b21a      	sxth	r2, r3
    f512:	4b9e      	ldr	r3, [pc, #632]	; (f78c <CorrectIMUvalues+0x42c>)
    f514:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    f516:	4b9e      	ldr	r3, [pc, #632]	; (f790 <CorrectIMUvalues+0x430>)
    f518:	2200      	movs	r2, #0
    f51a:	5e9b      	ldrsh	r3, [r3, r2]
    f51c:	b29b      	uxth	r3, r3
    f51e:	425b      	negs	r3, r3
    f520:	b29b      	uxth	r3, r3
    f522:	b21a      	sxth	r2, r3
    f524:	4b9b      	ldr	r3, [pc, #620]	; (f794 <CorrectIMUvalues+0x434>)
    f526:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    f528:	4b9b      	ldr	r3, [pc, #620]	; (f798 <CorrectIMUvalues+0x438>)
    f52a:	2200      	movs	r2, #0
    f52c:	5e9b      	ldrsh	r3, [r3, r2]
    f52e:	b29b      	uxth	r3, r3
    f530:	425b      	negs	r3, r3
    f532:	b29b      	uxth	r3, r3
    f534:	b21a      	sxth	r2, r3
    f536:	4b99      	ldr	r3, [pc, #612]	; (f79c <CorrectIMUvalues+0x43c>)
    f538:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    f53a:	4b99      	ldr	r3, [pc, #612]	; (f7a0 <CorrectIMUvalues+0x440>)
    f53c:	2200      	movs	r2, #0
    f53e:	5e9b      	ldrsh	r3, [r3, r2]
    f540:	b29b      	uxth	r3, r3
    f542:	425b      	negs	r3, r3
    f544:	b29b      	uxth	r3, r3
    f546:	b21a      	sxth	r2, r3
    f548:	4b96      	ldr	r3, [pc, #600]	; (f7a4 <CorrectIMUvalues+0x444>)
    f54a:	801a      	strh	r2, [r3, #0]
}
    f54c:	f000 fcaa 	bl	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    f550:	1dbb      	adds	r3, r7, #6
    f552:	781b      	ldrb	r3, [r3, #0]
    f554:	2b06      	cmp	r3, #6
    f556:	d001      	beq.n	f55c <CorrectIMUvalues+0x1fc>
    f558:	f000 fca4 	bl	fea4 <CorrectIMUvalues+0xb44>
			cax = ax;
    f55c:	4b86      	ldr	r3, [pc, #536]	; (f778 <CorrectIMUvalues+0x418>)
    f55e:	2200      	movs	r2, #0
    f560:	5e9a      	ldrsh	r2, [r3, r2]
    f562:	4b86      	ldr	r3, [pc, #536]	; (f77c <CorrectIMUvalues+0x41c>)
    f564:	801a      	strh	r2, [r3, #0]
			cay = ay;
    f566:	4b86      	ldr	r3, [pc, #536]	; (f780 <CorrectIMUvalues+0x420>)
    f568:	2200      	movs	r2, #0
    f56a:	5e9a      	ldrsh	r2, [r3, r2]
    f56c:	4b85      	ldr	r3, [pc, #532]	; (f784 <CorrectIMUvalues+0x424>)
    f56e:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    f570:	4b85      	ldr	r3, [pc, #532]	; (f788 <CorrectIMUvalues+0x428>)
    f572:	2200      	movs	r2, #0
    f574:	5e9a      	ldrsh	r2, [r3, r2]
    f576:	4b85      	ldr	r3, [pc, #532]	; (f78c <CorrectIMUvalues+0x42c>)
    f578:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    f57a:	4b85      	ldr	r3, [pc, #532]	; (f790 <CorrectIMUvalues+0x430>)
    f57c:	2200      	movs	r2, #0
    f57e:	5e9a      	ldrsh	r2, [r3, r2]
    f580:	4b84      	ldr	r3, [pc, #528]	; (f794 <CorrectIMUvalues+0x434>)
    f582:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    f584:	4b84      	ldr	r3, [pc, #528]	; (f798 <CorrectIMUvalues+0x438>)
    f586:	2200      	movs	r2, #0
    f588:	5e9a      	ldrsh	r2, [r3, r2]
    f58a:	4b84      	ldr	r3, [pc, #528]	; (f79c <CorrectIMUvalues+0x43c>)
    f58c:	801a      	strh	r2, [r3, #0]
			cmy = my;
    f58e:	4b84      	ldr	r3, [pc, #528]	; (f7a0 <CorrectIMUvalues+0x440>)
    f590:	2200      	movs	r2, #0
    f592:	5e9a      	ldrsh	r2, [r3, r2]
    f594:	4b83      	ldr	r3, [pc, #524]	; (f7a4 <CorrectIMUvalues+0x444>)
    f596:	801a      	strh	r2, [r3, #0]
}
    f598:	f000 fc84 	bl	fea4 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_DOWN){ // Connectors Down
    f59c:	1dfb      	adds	r3, r7, #7
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	2b02      	cmp	r3, #2
    f5a2:	d000      	beq.n	f5a6 <CorrectIMUvalues+0x246>
    f5a4:	e100      	b.n	f7a8 <CorrectIMUvalues+0x448>
		caz = -az;
    f5a6:	4b6e      	ldr	r3, [pc, #440]	; (f760 <CorrectIMUvalues+0x400>)
    f5a8:	2200      	movs	r2, #0
    f5aa:	5e9b      	ldrsh	r3, [r3, r2]
    f5ac:	b29b      	uxth	r3, r3
    f5ae:	425b      	negs	r3, r3
    f5b0:	b29b      	uxth	r3, r3
    f5b2:	b21a      	sxth	r2, r3
    f5b4:	4b6b      	ldr	r3, [pc, #428]	; (f764 <CorrectIMUvalues+0x404>)
    f5b6:	801a      	strh	r2, [r3, #0]
		cgz = -gz;
    f5b8:	4b6b      	ldr	r3, [pc, #428]	; (f768 <CorrectIMUvalues+0x408>)
    f5ba:	2200      	movs	r2, #0
    f5bc:	5e9b      	ldrsh	r3, [r3, r2]
    f5be:	b29b      	uxth	r3, r3
    f5c0:	425b      	negs	r3, r3
    f5c2:	b29b      	uxth	r3, r3
    f5c4:	b21a      	sxth	r2, r3
    f5c6:	4b69      	ldr	r3, [pc, #420]	; (f76c <CorrectIMUvalues+0x40c>)
    f5c8:	801a      	strh	r2, [r3, #0]
		cmz = -mz;
    f5ca:	4b69      	ldr	r3, [pc, #420]	; (f770 <CorrectIMUvalues+0x410>)
    f5cc:	2200      	movs	r2, #0
    f5ce:	5e9b      	ldrsh	r3, [r3, r2]
    f5d0:	b29b      	uxth	r3, r3
    f5d2:	425b      	negs	r3, r3
    f5d4:	b29b      	uxth	r3, r3
    f5d6:	b21a      	sxth	r2, r3
    f5d8:	4b66      	ldr	r3, [pc, #408]	; (f774 <CorrectIMUvalues+0x414>)
    f5da:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    f5dc:	1dbb      	adds	r3, r7, #6
    f5de:	781b      	ldrb	r3, [r3, #0]
    f5e0:	2b03      	cmp	r3, #3
    f5e2:	d127      	bne.n	f634 <CorrectIMUvalues+0x2d4>
			cax = ay;
    f5e4:	4b66      	ldr	r3, [pc, #408]	; (f780 <CorrectIMUvalues+0x420>)
    f5e6:	2200      	movs	r2, #0
    f5e8:	5e9a      	ldrsh	r2, [r3, r2]
    f5ea:	4b64      	ldr	r3, [pc, #400]	; (f77c <CorrectIMUvalues+0x41c>)
    f5ec:	801a      	strh	r2, [r3, #0]
			cay = ax;
    f5ee:	4b62      	ldr	r3, [pc, #392]	; (f778 <CorrectIMUvalues+0x418>)
    f5f0:	2200      	movs	r2, #0
    f5f2:	5e9a      	ldrsh	r2, [r3, r2]
    f5f4:	4b63      	ldr	r3, [pc, #396]	; (f784 <CorrectIMUvalues+0x424>)
    f5f6:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    f5f8:	4b65      	ldr	r3, [pc, #404]	; (f790 <CorrectIMUvalues+0x430>)
    f5fa:	2200      	movs	r2, #0
    f5fc:	5e9a      	ldrsh	r2, [r3, r2]
    f5fe:	4b63      	ldr	r3, [pc, #396]	; (f78c <CorrectIMUvalues+0x42c>)
    f600:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    f602:	4b61      	ldr	r3, [pc, #388]	; (f788 <CorrectIMUvalues+0x428>)
    f604:	2200      	movs	r2, #0
    f606:	5e9a      	ldrsh	r2, [r3, r2]
    f608:	4b62      	ldr	r3, [pc, #392]	; (f794 <CorrectIMUvalues+0x434>)
    f60a:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    f60c:	4b64      	ldr	r3, [pc, #400]	; (f7a0 <CorrectIMUvalues+0x440>)
    f60e:	2200      	movs	r2, #0
    f610:	5e9b      	ldrsh	r3, [r3, r2]
    f612:	b29b      	uxth	r3, r3
    f614:	425b      	negs	r3, r3
    f616:	b29b      	uxth	r3, r3
    f618:	b21a      	sxth	r2, r3
    f61a:	4b60      	ldr	r3, [pc, #384]	; (f79c <CorrectIMUvalues+0x43c>)
    f61c:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    f61e:	4b5e      	ldr	r3, [pc, #376]	; (f798 <CorrectIMUvalues+0x438>)
    f620:	2200      	movs	r2, #0
    f622:	5e9b      	ldrsh	r3, [r3, r2]
    f624:	b29b      	uxth	r3, r3
    f626:	425b      	negs	r3, r3
    f628:	b29b      	uxth	r3, r3
    f62a:	b21a      	sxth	r2, r3
    f62c:	4b5d      	ldr	r3, [pc, #372]	; (f7a4 <CorrectIMUvalues+0x444>)
    f62e:	801a      	strh	r2, [r3, #0]
}
    f630:	f000 fc38 	bl	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    f634:	1dbb      	adds	r3, r7, #6
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	2b04      	cmp	r3, #4
    f63a:	d12f      	bne.n	f69c <CorrectIMUvalues+0x33c>
			cax = -ay;
    f63c:	4b50      	ldr	r3, [pc, #320]	; (f780 <CorrectIMUvalues+0x420>)
    f63e:	2200      	movs	r2, #0
    f640:	5e9b      	ldrsh	r3, [r3, r2]
    f642:	b29b      	uxth	r3, r3
    f644:	425b      	negs	r3, r3
    f646:	b29b      	uxth	r3, r3
    f648:	b21a      	sxth	r2, r3
    f64a:	4b4c      	ldr	r3, [pc, #304]	; (f77c <CorrectIMUvalues+0x41c>)
    f64c:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    f64e:	4b4a      	ldr	r3, [pc, #296]	; (f778 <CorrectIMUvalues+0x418>)
    f650:	2200      	movs	r2, #0
    f652:	5e9b      	ldrsh	r3, [r3, r2]
    f654:	b29b      	uxth	r3, r3
    f656:	425b      	negs	r3, r3
    f658:	b29b      	uxth	r3, r3
    f65a:	b21a      	sxth	r2, r3
    f65c:	4b49      	ldr	r3, [pc, #292]	; (f784 <CorrectIMUvalues+0x424>)
    f65e:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    f660:	4b4b      	ldr	r3, [pc, #300]	; (f790 <CorrectIMUvalues+0x430>)
    f662:	2200      	movs	r2, #0
    f664:	5e9b      	ldrsh	r3, [r3, r2]
    f666:	b29b      	uxth	r3, r3
    f668:	425b      	negs	r3, r3
    f66a:	b29b      	uxth	r3, r3
    f66c:	b21a      	sxth	r2, r3
    f66e:	4b47      	ldr	r3, [pc, #284]	; (f78c <CorrectIMUvalues+0x42c>)
    f670:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    f672:	4b45      	ldr	r3, [pc, #276]	; (f788 <CorrectIMUvalues+0x428>)
    f674:	2200      	movs	r2, #0
    f676:	5e9b      	ldrsh	r3, [r3, r2]
    f678:	b29b      	uxth	r3, r3
    f67a:	425b      	negs	r3, r3
    f67c:	b29b      	uxth	r3, r3
    f67e:	b21a      	sxth	r2, r3
    f680:	4b44      	ldr	r3, [pc, #272]	; (f794 <CorrectIMUvalues+0x434>)
    f682:	801a      	strh	r2, [r3, #0]
			cmx = my;
    f684:	4b46      	ldr	r3, [pc, #280]	; (f7a0 <CorrectIMUvalues+0x440>)
    f686:	2200      	movs	r2, #0
    f688:	5e9a      	ldrsh	r2, [r3, r2]
    f68a:	4b44      	ldr	r3, [pc, #272]	; (f79c <CorrectIMUvalues+0x43c>)
    f68c:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    f68e:	4b42      	ldr	r3, [pc, #264]	; (f798 <CorrectIMUvalues+0x438>)
    f690:	2200      	movs	r2, #0
    f692:	5e9a      	ldrsh	r2, [r3, r2]
    f694:	4b43      	ldr	r3, [pc, #268]	; (f7a4 <CorrectIMUvalues+0x444>)
    f696:	801a      	strh	r2, [r3, #0]
}
    f698:	f000 fc04 	bl	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    f69c:	1dbb      	adds	r3, r7, #6
    f69e:	781b      	ldrb	r3, [r3, #0]
    f6a0:	2b05      	cmp	r3, #5
    f6a2:	d12b      	bne.n	f6fc <CorrectIMUvalues+0x39c>
			cax = ax;
    f6a4:	4b34      	ldr	r3, [pc, #208]	; (f778 <CorrectIMUvalues+0x418>)
    f6a6:	2200      	movs	r2, #0
    f6a8:	5e9a      	ldrsh	r2, [r3, r2]
    f6aa:	4b34      	ldr	r3, [pc, #208]	; (f77c <CorrectIMUvalues+0x41c>)
    f6ac:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    f6ae:	4b34      	ldr	r3, [pc, #208]	; (f780 <CorrectIMUvalues+0x420>)
    f6b0:	2200      	movs	r2, #0
    f6b2:	5e9b      	ldrsh	r3, [r3, r2]
    f6b4:	b29b      	uxth	r3, r3
    f6b6:	425b      	negs	r3, r3
    f6b8:	b29b      	uxth	r3, r3
    f6ba:	b21a      	sxth	r2, r3
    f6bc:	4b31      	ldr	r3, [pc, #196]	; (f784 <CorrectIMUvalues+0x424>)
    f6be:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    f6c0:	4b31      	ldr	r3, [pc, #196]	; (f788 <CorrectIMUvalues+0x428>)
    f6c2:	2200      	movs	r2, #0
    f6c4:	5e9a      	ldrsh	r2, [r3, r2]
    f6c6:	4b31      	ldr	r3, [pc, #196]	; (f78c <CorrectIMUvalues+0x42c>)
    f6c8:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    f6ca:	4b31      	ldr	r3, [pc, #196]	; (f790 <CorrectIMUvalues+0x430>)
    f6cc:	2200      	movs	r2, #0
    f6ce:	5e9b      	ldrsh	r3, [r3, r2]
    f6d0:	b29b      	uxth	r3, r3
    f6d2:	425b      	negs	r3, r3
    f6d4:	b29b      	uxth	r3, r3
    f6d6:	b21a      	sxth	r2, r3
    f6d8:	4b2e      	ldr	r3, [pc, #184]	; (f794 <CorrectIMUvalues+0x434>)
    f6da:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    f6dc:	4b2e      	ldr	r3, [pc, #184]	; (f798 <CorrectIMUvalues+0x438>)
    f6de:	2200      	movs	r2, #0
    f6e0:	5e9a      	ldrsh	r2, [r3, r2]
    f6e2:	4b2e      	ldr	r3, [pc, #184]	; (f79c <CorrectIMUvalues+0x43c>)
    f6e4:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    f6e6:	4b2e      	ldr	r3, [pc, #184]	; (f7a0 <CorrectIMUvalues+0x440>)
    f6e8:	2200      	movs	r2, #0
    f6ea:	5e9b      	ldrsh	r3, [r3, r2]
    f6ec:	b29b      	uxth	r3, r3
    f6ee:	425b      	negs	r3, r3
    f6f0:	b29b      	uxth	r3, r3
    f6f2:	b21a      	sxth	r2, r3
    f6f4:	4b2b      	ldr	r3, [pc, #172]	; (f7a4 <CorrectIMUvalues+0x444>)
    f6f6:	801a      	strh	r2, [r3, #0]
}
    f6f8:	f000 fbd4 	bl	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    f6fc:	1dbb      	adds	r3, r7, #6
    f6fe:	781b      	ldrb	r3, [r3, #0]
    f700:	2b06      	cmp	r3, #6
    f702:	d001      	beq.n	f708 <CorrectIMUvalues+0x3a8>
    f704:	f000 fbce 	bl	fea4 <CorrectIMUvalues+0xb44>
			cax = -ax;
    f708:	4b1b      	ldr	r3, [pc, #108]	; (f778 <CorrectIMUvalues+0x418>)
    f70a:	2200      	movs	r2, #0
    f70c:	5e9b      	ldrsh	r3, [r3, r2]
    f70e:	b29b      	uxth	r3, r3
    f710:	425b      	negs	r3, r3
    f712:	b29b      	uxth	r3, r3
    f714:	b21a      	sxth	r2, r3
    f716:	4b19      	ldr	r3, [pc, #100]	; (f77c <CorrectIMUvalues+0x41c>)
    f718:	801a      	strh	r2, [r3, #0]
			cay = ay;
    f71a:	4b19      	ldr	r3, [pc, #100]	; (f780 <CorrectIMUvalues+0x420>)
    f71c:	2200      	movs	r2, #0
    f71e:	5e9a      	ldrsh	r2, [r3, r2]
    f720:	4b18      	ldr	r3, [pc, #96]	; (f784 <CorrectIMUvalues+0x424>)
    f722:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    f724:	4b18      	ldr	r3, [pc, #96]	; (f788 <CorrectIMUvalues+0x428>)
    f726:	2200      	movs	r2, #0
    f728:	5e9b      	ldrsh	r3, [r3, r2]
    f72a:	b29b      	uxth	r3, r3
    f72c:	425b      	negs	r3, r3
    f72e:	b29b      	uxth	r3, r3
    f730:	b21a      	sxth	r2, r3
    f732:	4b16      	ldr	r3, [pc, #88]	; (f78c <CorrectIMUvalues+0x42c>)
    f734:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    f736:	4b16      	ldr	r3, [pc, #88]	; (f790 <CorrectIMUvalues+0x430>)
    f738:	2200      	movs	r2, #0
    f73a:	5e9a      	ldrsh	r2, [r3, r2]
    f73c:	4b15      	ldr	r3, [pc, #84]	; (f794 <CorrectIMUvalues+0x434>)
    f73e:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    f740:	4b15      	ldr	r3, [pc, #84]	; (f798 <CorrectIMUvalues+0x438>)
    f742:	2200      	movs	r2, #0
    f744:	5e9b      	ldrsh	r3, [r3, r2]
    f746:	b29b      	uxth	r3, r3
    f748:	425b      	negs	r3, r3
    f74a:	b29b      	uxth	r3, r3
    f74c:	b21a      	sxth	r2, r3
    f74e:	4b13      	ldr	r3, [pc, #76]	; (f79c <CorrectIMUvalues+0x43c>)
    f750:	801a      	strh	r2, [r3, #0]
			cmy = my;
    f752:	4b13      	ldr	r3, [pc, #76]	; (f7a0 <CorrectIMUvalues+0x440>)
    f754:	2200      	movs	r2, #0
    f756:	5e9a      	ldrsh	r2, [r3, r2]
    f758:	4b12      	ldr	r3, [pc, #72]	; (f7a4 <CorrectIMUvalues+0x444>)
    f75a:	801a      	strh	r2, [r3, #0]
}
    f75c:	e3a2      	b.n	fea4 <CorrectIMUvalues+0xb44>
    f75e:	46c0      	nop			; (mov r8, r8)
    f760:	200003ae 	.word	0x200003ae
    f764:	200003c0 	.word	0x200003c0
    f768:	200003a8 	.word	0x200003a8
    f76c:	200003ba 	.word	0x200003ba
    f770:	200003b4 	.word	0x200003b4
    f774:	200003c6 	.word	0x200003c6
    f778:	200003aa 	.word	0x200003aa
    f77c:	200003bc 	.word	0x200003bc
    f780:	200003ac 	.word	0x200003ac
    f784:	200003be 	.word	0x200003be
    f788:	200003a4 	.word	0x200003a4
    f78c:	200003b6 	.word	0x200003b6
    f790:	200003a6 	.word	0x200003a6
    f794:	200003b8 	.word	0x200003b8
    f798:	200003b0 	.word	0x200003b0
    f79c:	200003c2 	.word	0x200003c2
    f7a0:	200003b2 	.word	0x200003b2
    f7a4:	200003c4 	.word	0x200003c4
	} else if(connector_orient == ORIENT_LEFT){ // Connectors Left
    f7a8:	1dfb      	adds	r3, r7, #7
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	2b03      	cmp	r3, #3
    f7ae:	d000      	beq.n	f7b2 <CorrectIMUvalues+0x452>
    f7b0:	e0cf      	b.n	f952 <CorrectIMUvalues+0x5f2>
		caz = ax;
    f7b2:	4bd4      	ldr	r3, [pc, #848]	; (fb04 <CorrectIMUvalues+0x7a4>)
    f7b4:	2200      	movs	r2, #0
    f7b6:	5e9a      	ldrsh	r2, [r3, r2]
    f7b8:	4bd3      	ldr	r3, [pc, #844]	; (fb08 <CorrectIMUvalues+0x7a8>)
    f7ba:	801a      	strh	r2, [r3, #0]
		cgz = gx;
    f7bc:	4bd3      	ldr	r3, [pc, #844]	; (fb0c <CorrectIMUvalues+0x7ac>)
    f7be:	2200      	movs	r2, #0
    f7c0:	5e9a      	ldrsh	r2, [r3, r2]
    f7c2:	4bd3      	ldr	r3, [pc, #844]	; (fb10 <CorrectIMUvalues+0x7b0>)
    f7c4:	801a      	strh	r2, [r3, #0]
		cmz = -mx;
    f7c6:	4bd3      	ldr	r3, [pc, #844]	; (fb14 <CorrectIMUvalues+0x7b4>)
    f7c8:	2200      	movs	r2, #0
    f7ca:	5e9b      	ldrsh	r3, [r3, r2]
    f7cc:	b29b      	uxth	r3, r3
    f7ce:	425b      	negs	r3, r3
    f7d0:	b29b      	uxth	r3, r3
    f7d2:	b21a      	sxth	r2, r3
    f7d4:	4bd0      	ldr	r3, [pc, #832]	; (fb18 <CorrectIMUvalues+0x7b8>)
    f7d6:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    f7d8:	1dbb      	adds	r3, r7, #6
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	2b01      	cmp	r3, #1
    f7de:	d122      	bne.n	f826 <CorrectIMUvalues+0x4c6>
			cax = ay;
    f7e0:	4bce      	ldr	r3, [pc, #824]	; (fb1c <CorrectIMUvalues+0x7bc>)
    f7e2:	2200      	movs	r2, #0
    f7e4:	5e9a      	ldrsh	r2, [r3, r2]
    f7e6:	4bce      	ldr	r3, [pc, #824]	; (fb20 <CorrectIMUvalues+0x7c0>)
    f7e8:	801a      	strh	r2, [r3, #0]
			cay = az;
    f7ea:	4bce      	ldr	r3, [pc, #824]	; (fb24 <CorrectIMUvalues+0x7c4>)
    f7ec:	2200      	movs	r2, #0
    f7ee:	5e9a      	ldrsh	r2, [r3, r2]
    f7f0:	4bcd      	ldr	r3, [pc, #820]	; (fb28 <CorrectIMUvalues+0x7c8>)
    f7f2:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    f7f4:	4bcd      	ldr	r3, [pc, #820]	; (fb2c <CorrectIMUvalues+0x7cc>)
    f7f6:	2200      	movs	r2, #0
    f7f8:	5e9a      	ldrsh	r2, [r3, r2]
    f7fa:	4bcd      	ldr	r3, [pc, #820]	; (fb30 <CorrectIMUvalues+0x7d0>)
    f7fc:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    f7fe:	4bcd      	ldr	r3, [pc, #820]	; (fb34 <CorrectIMUvalues+0x7d4>)
    f800:	2200      	movs	r2, #0
    f802:	5e9a      	ldrsh	r2, [r3, r2]
    f804:	4bcc      	ldr	r3, [pc, #816]	; (fb38 <CorrectIMUvalues+0x7d8>)
    f806:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    f808:	4bcc      	ldr	r3, [pc, #816]	; (fb3c <CorrectIMUvalues+0x7dc>)
    f80a:	2200      	movs	r2, #0
    f80c:	5e9b      	ldrsh	r3, [r3, r2]
    f80e:	b29b      	uxth	r3, r3
    f810:	425b      	negs	r3, r3
    f812:	b29b      	uxth	r3, r3
    f814:	b21a      	sxth	r2, r3
    f816:	4bca      	ldr	r3, [pc, #808]	; (fb40 <CorrectIMUvalues+0x7e0>)
    f818:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    f81a:	4bca      	ldr	r3, [pc, #808]	; (fb44 <CorrectIMUvalues+0x7e4>)
    f81c:	2200      	movs	r2, #0
    f81e:	5e9a      	ldrsh	r2, [r3, r2]
    f820:	4bc9      	ldr	r3, [pc, #804]	; (fb48 <CorrectIMUvalues+0x7e8>)
    f822:	801a      	strh	r2, [r3, #0]
}
    f824:	e33e      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    f826:	1dbb      	adds	r3, r7, #6
    f828:	781b      	ldrb	r3, [r3, #0]
    f82a:	2b02      	cmp	r3, #2
    f82c:	d132      	bne.n	f894 <CorrectIMUvalues+0x534>
			cax = -ay;
    f82e:	4bbb      	ldr	r3, [pc, #748]	; (fb1c <CorrectIMUvalues+0x7bc>)
    f830:	2200      	movs	r2, #0
    f832:	5e9b      	ldrsh	r3, [r3, r2]
    f834:	b29b      	uxth	r3, r3
    f836:	425b      	negs	r3, r3
    f838:	b29b      	uxth	r3, r3
    f83a:	b21a      	sxth	r2, r3
    f83c:	4bb8      	ldr	r3, [pc, #736]	; (fb20 <CorrectIMUvalues+0x7c0>)
    f83e:	801a      	strh	r2, [r3, #0]
			cay = -az;
    f840:	4bb8      	ldr	r3, [pc, #736]	; (fb24 <CorrectIMUvalues+0x7c4>)
    f842:	2200      	movs	r2, #0
    f844:	5e9b      	ldrsh	r3, [r3, r2]
    f846:	b29b      	uxth	r3, r3
    f848:	425b      	negs	r3, r3
    f84a:	b29b      	uxth	r3, r3
    f84c:	b21a      	sxth	r2, r3
    f84e:	4bb6      	ldr	r3, [pc, #728]	; (fb28 <CorrectIMUvalues+0x7c8>)
    f850:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    f852:	4bb6      	ldr	r3, [pc, #728]	; (fb2c <CorrectIMUvalues+0x7cc>)
    f854:	2200      	movs	r2, #0
    f856:	5e9b      	ldrsh	r3, [r3, r2]
    f858:	b29b      	uxth	r3, r3
    f85a:	425b      	negs	r3, r3
    f85c:	b29b      	uxth	r3, r3
    f85e:	b21a      	sxth	r2, r3
    f860:	4bb3      	ldr	r3, [pc, #716]	; (fb30 <CorrectIMUvalues+0x7d0>)
    f862:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    f864:	4bb3      	ldr	r3, [pc, #716]	; (fb34 <CorrectIMUvalues+0x7d4>)
    f866:	2200      	movs	r2, #0
    f868:	5e9b      	ldrsh	r3, [r3, r2]
    f86a:	b29b      	uxth	r3, r3
    f86c:	425b      	negs	r3, r3
    f86e:	b29b      	uxth	r3, r3
    f870:	b21a      	sxth	r2, r3
    f872:	4bb1      	ldr	r3, [pc, #708]	; (fb38 <CorrectIMUvalues+0x7d8>)
    f874:	801a      	strh	r2, [r3, #0]
			cmx = my;
    f876:	4bb1      	ldr	r3, [pc, #708]	; (fb3c <CorrectIMUvalues+0x7dc>)
    f878:	2200      	movs	r2, #0
    f87a:	5e9a      	ldrsh	r2, [r3, r2]
    f87c:	4bb0      	ldr	r3, [pc, #704]	; (fb40 <CorrectIMUvalues+0x7e0>)
    f87e:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    f880:	4bb0      	ldr	r3, [pc, #704]	; (fb44 <CorrectIMUvalues+0x7e4>)
    f882:	2200      	movs	r2, #0
    f884:	5e9b      	ldrsh	r3, [r3, r2]
    f886:	b29b      	uxth	r3, r3
    f888:	425b      	negs	r3, r3
    f88a:	b29b      	uxth	r3, r3
    f88c:	b21a      	sxth	r2, r3
    f88e:	4bae      	ldr	r3, [pc, #696]	; (fb48 <CorrectIMUvalues+0x7e8>)
    f890:	801a      	strh	r2, [r3, #0]
}
    f892:	e307      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    f894:	1dbb      	adds	r3, r7, #6
    f896:	781b      	ldrb	r3, [r3, #0]
    f898:	2b05      	cmp	r3, #5
    f89a:	d12e      	bne.n	f8fa <CorrectIMUvalues+0x59a>
			cax = az;
    f89c:	4ba1      	ldr	r3, [pc, #644]	; (fb24 <CorrectIMUvalues+0x7c4>)
    f89e:	2200      	movs	r2, #0
    f8a0:	5e9a      	ldrsh	r2, [r3, r2]
    f8a2:	4b9f      	ldr	r3, [pc, #636]	; (fb20 <CorrectIMUvalues+0x7c0>)
    f8a4:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    f8a6:	4b9d      	ldr	r3, [pc, #628]	; (fb1c <CorrectIMUvalues+0x7bc>)
    f8a8:	2200      	movs	r2, #0
    f8aa:	5e9b      	ldrsh	r3, [r3, r2]
    f8ac:	b29b      	uxth	r3, r3
    f8ae:	425b      	negs	r3, r3
    f8b0:	b29b      	uxth	r3, r3
    f8b2:	b21a      	sxth	r2, r3
    f8b4:	4b9c      	ldr	r3, [pc, #624]	; (fb28 <CorrectIMUvalues+0x7c8>)
    f8b6:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    f8b8:	4b9e      	ldr	r3, [pc, #632]	; (fb34 <CorrectIMUvalues+0x7d4>)
    f8ba:	2200      	movs	r2, #0
    f8bc:	5e9a      	ldrsh	r2, [r3, r2]
    f8be:	4b9c      	ldr	r3, [pc, #624]	; (fb30 <CorrectIMUvalues+0x7d0>)
    f8c0:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    f8c2:	4b9a      	ldr	r3, [pc, #616]	; (fb2c <CorrectIMUvalues+0x7cc>)
    f8c4:	2200      	movs	r2, #0
    f8c6:	5e9b      	ldrsh	r3, [r3, r2]
    f8c8:	b29b      	uxth	r3, r3
    f8ca:	425b      	negs	r3, r3
    f8cc:	b29b      	uxth	r3, r3
    f8ce:	b21a      	sxth	r2, r3
    f8d0:	4b99      	ldr	r3, [pc, #612]	; (fb38 <CorrectIMUvalues+0x7d8>)
    f8d2:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    f8d4:	4b9b      	ldr	r3, [pc, #620]	; (fb44 <CorrectIMUvalues+0x7e4>)
    f8d6:	2200      	movs	r2, #0
    f8d8:	5e9b      	ldrsh	r3, [r3, r2]
    f8da:	b29b      	uxth	r3, r3
    f8dc:	425b      	negs	r3, r3
    f8de:	b29b      	uxth	r3, r3
    f8e0:	b21a      	sxth	r2, r3
    f8e2:	4b97      	ldr	r3, [pc, #604]	; (fb40 <CorrectIMUvalues+0x7e0>)
    f8e4:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    f8e6:	4b95      	ldr	r3, [pc, #596]	; (fb3c <CorrectIMUvalues+0x7dc>)
    f8e8:	2200      	movs	r2, #0
    f8ea:	5e9b      	ldrsh	r3, [r3, r2]
    f8ec:	b29b      	uxth	r3, r3
    f8ee:	425b      	negs	r3, r3
    f8f0:	b29b      	uxth	r3, r3
    f8f2:	b21a      	sxth	r2, r3
    f8f4:	4b94      	ldr	r3, [pc, #592]	; (fb48 <CorrectIMUvalues+0x7e8>)
    f8f6:	801a      	strh	r2, [r3, #0]
}
    f8f8:	e2d4      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    f8fa:	1dbb      	adds	r3, r7, #6
    f8fc:	781b      	ldrb	r3, [r3, #0]
    f8fe:	2b06      	cmp	r3, #6
    f900:	d000      	beq.n	f904 <CorrectIMUvalues+0x5a4>
    f902:	e2cf      	b.n	fea4 <CorrectIMUvalues+0xb44>
			cax = -az;
    f904:	4b87      	ldr	r3, [pc, #540]	; (fb24 <CorrectIMUvalues+0x7c4>)
    f906:	2200      	movs	r2, #0
    f908:	5e9b      	ldrsh	r3, [r3, r2]
    f90a:	b29b      	uxth	r3, r3
    f90c:	425b      	negs	r3, r3
    f90e:	b29b      	uxth	r3, r3
    f910:	b21a      	sxth	r2, r3
    f912:	4b83      	ldr	r3, [pc, #524]	; (fb20 <CorrectIMUvalues+0x7c0>)
    f914:	801a      	strh	r2, [r3, #0]
			cay = ay;
    f916:	4b81      	ldr	r3, [pc, #516]	; (fb1c <CorrectIMUvalues+0x7bc>)
    f918:	2200      	movs	r2, #0
    f91a:	5e9a      	ldrsh	r2, [r3, r2]
    f91c:	4b82      	ldr	r3, [pc, #520]	; (fb28 <CorrectIMUvalues+0x7c8>)
    f91e:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    f920:	4b84      	ldr	r3, [pc, #528]	; (fb34 <CorrectIMUvalues+0x7d4>)
    f922:	2200      	movs	r2, #0
    f924:	5e9b      	ldrsh	r3, [r3, r2]
    f926:	b29b      	uxth	r3, r3
    f928:	425b      	negs	r3, r3
    f92a:	b29b      	uxth	r3, r3
    f92c:	b21a      	sxth	r2, r3
    f92e:	4b80      	ldr	r3, [pc, #512]	; (fb30 <CorrectIMUvalues+0x7d0>)
    f930:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    f932:	4b7e      	ldr	r3, [pc, #504]	; (fb2c <CorrectIMUvalues+0x7cc>)
    f934:	2200      	movs	r2, #0
    f936:	5e9a      	ldrsh	r2, [r3, r2]
    f938:	4b7f      	ldr	r3, [pc, #508]	; (fb38 <CorrectIMUvalues+0x7d8>)
    f93a:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    f93c:	4b81      	ldr	r3, [pc, #516]	; (fb44 <CorrectIMUvalues+0x7e4>)
    f93e:	2200      	movs	r2, #0
    f940:	5e9a      	ldrsh	r2, [r3, r2]
    f942:	4b7f      	ldr	r3, [pc, #508]	; (fb40 <CorrectIMUvalues+0x7e0>)
    f944:	801a      	strh	r2, [r3, #0]
			cmy = my;
    f946:	4b7d      	ldr	r3, [pc, #500]	; (fb3c <CorrectIMUvalues+0x7dc>)
    f948:	2200      	movs	r2, #0
    f94a:	5e9a      	ldrsh	r2, [r3, r2]
    f94c:	4b7e      	ldr	r3, [pc, #504]	; (fb48 <CorrectIMUvalues+0x7e8>)
    f94e:	801a      	strh	r2, [r3, #0]
}
    f950:	e2a8      	b.n	fea4 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_RIGHT){ // Connectors Right
    f952:	1dfb      	adds	r3, r7, #7
    f954:	781b      	ldrb	r3, [r3, #0]
    f956:	2b04      	cmp	r3, #4
    f958:	d000      	beq.n	f95c <CorrectIMUvalues+0x5fc>
    f95a:	e0f7      	b.n	fb4c <CorrectIMUvalues+0x7ec>
		caz = -ax;
    f95c:	4b69      	ldr	r3, [pc, #420]	; (fb04 <CorrectIMUvalues+0x7a4>)
    f95e:	2200      	movs	r2, #0
    f960:	5e9b      	ldrsh	r3, [r3, r2]
    f962:	b29b      	uxth	r3, r3
    f964:	425b      	negs	r3, r3
    f966:	b29b      	uxth	r3, r3
    f968:	b21a      	sxth	r2, r3
    f96a:	4b67      	ldr	r3, [pc, #412]	; (fb08 <CorrectIMUvalues+0x7a8>)
    f96c:	801a      	strh	r2, [r3, #0]
		cgz = -gx;
    f96e:	4b67      	ldr	r3, [pc, #412]	; (fb0c <CorrectIMUvalues+0x7ac>)
    f970:	2200      	movs	r2, #0
    f972:	5e9b      	ldrsh	r3, [r3, r2]
    f974:	b29b      	uxth	r3, r3
    f976:	425b      	negs	r3, r3
    f978:	b29b      	uxth	r3, r3
    f97a:	b21a      	sxth	r2, r3
    f97c:	4b64      	ldr	r3, [pc, #400]	; (fb10 <CorrectIMUvalues+0x7b0>)
    f97e:	801a      	strh	r2, [r3, #0]
		cmz = mx;
    f980:	4b64      	ldr	r3, [pc, #400]	; (fb14 <CorrectIMUvalues+0x7b4>)
    f982:	2200      	movs	r2, #0
    f984:	5e9a      	ldrsh	r2, [r3, r2]
    f986:	4b64      	ldr	r3, [pc, #400]	; (fb18 <CorrectIMUvalues+0x7b8>)
    f988:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    f98a:	1dbb      	adds	r3, r7, #6
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	2b01      	cmp	r3, #1
    f990:	d126      	bne.n	f9e0 <CorrectIMUvalues+0x680>
			cax = -ay;
    f992:	4b62      	ldr	r3, [pc, #392]	; (fb1c <CorrectIMUvalues+0x7bc>)
    f994:	2200      	movs	r2, #0
    f996:	5e9b      	ldrsh	r3, [r3, r2]
    f998:	b29b      	uxth	r3, r3
    f99a:	425b      	negs	r3, r3
    f99c:	b29b      	uxth	r3, r3
    f99e:	b21a      	sxth	r2, r3
    f9a0:	4b5f      	ldr	r3, [pc, #380]	; (fb20 <CorrectIMUvalues+0x7c0>)
    f9a2:	801a      	strh	r2, [r3, #0]
			cay = az;
    f9a4:	4b5f      	ldr	r3, [pc, #380]	; (fb24 <CorrectIMUvalues+0x7c4>)
    f9a6:	2200      	movs	r2, #0
    f9a8:	5e9a      	ldrsh	r2, [r3, r2]
    f9aa:	4b5f      	ldr	r3, [pc, #380]	; (fb28 <CorrectIMUvalues+0x7c8>)
    f9ac:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    f9ae:	4b5f      	ldr	r3, [pc, #380]	; (fb2c <CorrectIMUvalues+0x7cc>)
    f9b0:	2200      	movs	r2, #0
    f9b2:	5e9b      	ldrsh	r3, [r3, r2]
    f9b4:	b29b      	uxth	r3, r3
    f9b6:	425b      	negs	r3, r3
    f9b8:	b29b      	uxth	r3, r3
    f9ba:	b21a      	sxth	r2, r3
    f9bc:	4b5c      	ldr	r3, [pc, #368]	; (fb30 <CorrectIMUvalues+0x7d0>)
    f9be:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    f9c0:	4b5c      	ldr	r3, [pc, #368]	; (fb34 <CorrectIMUvalues+0x7d4>)
    f9c2:	2200      	movs	r2, #0
    f9c4:	5e9a      	ldrsh	r2, [r3, r2]
    f9c6:	4b5c      	ldr	r3, [pc, #368]	; (fb38 <CorrectIMUvalues+0x7d8>)
    f9c8:	801a      	strh	r2, [r3, #0]
			cmx = my;
    f9ca:	4b5c      	ldr	r3, [pc, #368]	; (fb3c <CorrectIMUvalues+0x7dc>)
    f9cc:	2200      	movs	r2, #0
    f9ce:	5e9a      	ldrsh	r2, [r3, r2]
    f9d0:	4b5b      	ldr	r3, [pc, #364]	; (fb40 <CorrectIMUvalues+0x7e0>)
    f9d2:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    f9d4:	4b5b      	ldr	r3, [pc, #364]	; (fb44 <CorrectIMUvalues+0x7e4>)
    f9d6:	2200      	movs	r2, #0
    f9d8:	5e9a      	ldrsh	r2, [r3, r2]
    f9da:	4b5b      	ldr	r3, [pc, #364]	; (fb48 <CorrectIMUvalues+0x7e8>)
    f9dc:	801a      	strh	r2, [r3, #0]
}
    f9de:	e261      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    f9e0:	1dbb      	adds	r3, r7, #6
    f9e2:	781b      	ldrb	r3, [r3, #0]
    f9e4:	2b02      	cmp	r3, #2
    f9e6:	d12e      	bne.n	fa46 <CorrectIMUvalues+0x6e6>
			cax = ay;
    f9e8:	4b4c      	ldr	r3, [pc, #304]	; (fb1c <CorrectIMUvalues+0x7bc>)
    f9ea:	2200      	movs	r2, #0
    f9ec:	5e9a      	ldrsh	r2, [r3, r2]
    f9ee:	4b4c      	ldr	r3, [pc, #304]	; (fb20 <CorrectIMUvalues+0x7c0>)
    f9f0:	801a      	strh	r2, [r3, #0]
			cay = -az;
    f9f2:	4b4c      	ldr	r3, [pc, #304]	; (fb24 <CorrectIMUvalues+0x7c4>)
    f9f4:	2200      	movs	r2, #0
    f9f6:	5e9b      	ldrsh	r3, [r3, r2]
    f9f8:	b29b      	uxth	r3, r3
    f9fa:	425b      	negs	r3, r3
    f9fc:	b29b      	uxth	r3, r3
    f9fe:	b21a      	sxth	r2, r3
    fa00:	4b49      	ldr	r3, [pc, #292]	; (fb28 <CorrectIMUvalues+0x7c8>)
    fa02:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    fa04:	4b49      	ldr	r3, [pc, #292]	; (fb2c <CorrectIMUvalues+0x7cc>)
    fa06:	2200      	movs	r2, #0
    fa08:	5e9a      	ldrsh	r2, [r3, r2]
    fa0a:	4b49      	ldr	r3, [pc, #292]	; (fb30 <CorrectIMUvalues+0x7d0>)
    fa0c:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    fa0e:	4b49      	ldr	r3, [pc, #292]	; (fb34 <CorrectIMUvalues+0x7d4>)
    fa10:	2200      	movs	r2, #0
    fa12:	5e9b      	ldrsh	r3, [r3, r2]
    fa14:	b29b      	uxth	r3, r3
    fa16:	425b      	negs	r3, r3
    fa18:	b29b      	uxth	r3, r3
    fa1a:	b21a      	sxth	r2, r3
    fa1c:	4b46      	ldr	r3, [pc, #280]	; (fb38 <CorrectIMUvalues+0x7d8>)
    fa1e:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    fa20:	4b46      	ldr	r3, [pc, #280]	; (fb3c <CorrectIMUvalues+0x7dc>)
    fa22:	2200      	movs	r2, #0
    fa24:	5e9b      	ldrsh	r3, [r3, r2]
    fa26:	b29b      	uxth	r3, r3
    fa28:	425b      	negs	r3, r3
    fa2a:	b29b      	uxth	r3, r3
    fa2c:	b21a      	sxth	r2, r3
    fa2e:	4b44      	ldr	r3, [pc, #272]	; (fb40 <CorrectIMUvalues+0x7e0>)
    fa30:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    fa32:	4b44      	ldr	r3, [pc, #272]	; (fb44 <CorrectIMUvalues+0x7e4>)
    fa34:	2200      	movs	r2, #0
    fa36:	5e9b      	ldrsh	r3, [r3, r2]
    fa38:	b29b      	uxth	r3, r3
    fa3a:	425b      	negs	r3, r3
    fa3c:	b29b      	uxth	r3, r3
    fa3e:	b21a      	sxth	r2, r3
    fa40:	4b41      	ldr	r3, [pc, #260]	; (fb48 <CorrectIMUvalues+0x7e8>)
    fa42:	801a      	strh	r2, [r3, #0]
}
    fa44:	e22e      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    fa46:	1dbb      	adds	r3, r7, #6
    fa48:	781b      	ldrb	r3, [r3, #0]
    fa4a:	2b05      	cmp	r3, #5
    fa4c:	d132      	bne.n	fab4 <CorrectIMUvalues+0x754>
			cax = -az;
    fa4e:	4b35      	ldr	r3, [pc, #212]	; (fb24 <CorrectIMUvalues+0x7c4>)
    fa50:	2200      	movs	r2, #0
    fa52:	5e9b      	ldrsh	r3, [r3, r2]
    fa54:	b29b      	uxth	r3, r3
    fa56:	425b      	negs	r3, r3
    fa58:	b29b      	uxth	r3, r3
    fa5a:	b21a      	sxth	r2, r3
    fa5c:	4b30      	ldr	r3, [pc, #192]	; (fb20 <CorrectIMUvalues+0x7c0>)
    fa5e:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    fa60:	4b2e      	ldr	r3, [pc, #184]	; (fb1c <CorrectIMUvalues+0x7bc>)
    fa62:	2200      	movs	r2, #0
    fa64:	5e9b      	ldrsh	r3, [r3, r2]
    fa66:	b29b      	uxth	r3, r3
    fa68:	425b      	negs	r3, r3
    fa6a:	b29b      	uxth	r3, r3
    fa6c:	b21a      	sxth	r2, r3
    fa6e:	4b2e      	ldr	r3, [pc, #184]	; (fb28 <CorrectIMUvalues+0x7c8>)
    fa70:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    fa72:	4b30      	ldr	r3, [pc, #192]	; (fb34 <CorrectIMUvalues+0x7d4>)
    fa74:	2200      	movs	r2, #0
    fa76:	5e9b      	ldrsh	r3, [r3, r2]
    fa78:	b29b      	uxth	r3, r3
    fa7a:	425b      	negs	r3, r3
    fa7c:	b29b      	uxth	r3, r3
    fa7e:	b21a      	sxth	r2, r3
    fa80:	4b2b      	ldr	r3, [pc, #172]	; (fb30 <CorrectIMUvalues+0x7d0>)
    fa82:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    fa84:	4b29      	ldr	r3, [pc, #164]	; (fb2c <CorrectIMUvalues+0x7cc>)
    fa86:	2200      	movs	r2, #0
    fa88:	5e9b      	ldrsh	r3, [r3, r2]
    fa8a:	b29b      	uxth	r3, r3
    fa8c:	425b      	negs	r3, r3
    fa8e:	b29b      	uxth	r3, r3
    fa90:	b21a      	sxth	r2, r3
    fa92:	4b29      	ldr	r3, [pc, #164]	; (fb38 <CorrectIMUvalues+0x7d8>)
    fa94:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    fa96:	4b2b      	ldr	r3, [pc, #172]	; (fb44 <CorrectIMUvalues+0x7e4>)
    fa98:	2200      	movs	r2, #0
    fa9a:	5e9a      	ldrsh	r2, [r3, r2]
    fa9c:	4b28      	ldr	r3, [pc, #160]	; (fb40 <CorrectIMUvalues+0x7e0>)
    fa9e:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    faa0:	4b26      	ldr	r3, [pc, #152]	; (fb3c <CorrectIMUvalues+0x7dc>)
    faa2:	2200      	movs	r2, #0
    faa4:	5e9b      	ldrsh	r3, [r3, r2]
    faa6:	b29b      	uxth	r3, r3
    faa8:	425b      	negs	r3, r3
    faaa:	b29b      	uxth	r3, r3
    faac:	b21a      	sxth	r2, r3
    faae:	4b26      	ldr	r3, [pc, #152]	; (fb48 <CorrectIMUvalues+0x7e8>)
    fab0:	801a      	strh	r2, [r3, #0]
}
    fab2:	e1f7      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    fab4:	1dbb      	adds	r3, r7, #6
    fab6:	781b      	ldrb	r3, [r3, #0]
    fab8:	2b06      	cmp	r3, #6
    faba:	d000      	beq.n	fabe <CorrectIMUvalues+0x75e>
    fabc:	e1f2      	b.n	fea4 <CorrectIMUvalues+0xb44>
			cax = az;
    fabe:	4b19      	ldr	r3, [pc, #100]	; (fb24 <CorrectIMUvalues+0x7c4>)
    fac0:	2200      	movs	r2, #0
    fac2:	5e9a      	ldrsh	r2, [r3, r2]
    fac4:	4b16      	ldr	r3, [pc, #88]	; (fb20 <CorrectIMUvalues+0x7c0>)
    fac6:	801a      	strh	r2, [r3, #0]
			cay = ay;
    fac8:	4b14      	ldr	r3, [pc, #80]	; (fb1c <CorrectIMUvalues+0x7bc>)
    faca:	2200      	movs	r2, #0
    facc:	5e9a      	ldrsh	r2, [r3, r2]
    face:	4b16      	ldr	r3, [pc, #88]	; (fb28 <CorrectIMUvalues+0x7c8>)
    fad0:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    fad2:	4b18      	ldr	r3, [pc, #96]	; (fb34 <CorrectIMUvalues+0x7d4>)
    fad4:	2200      	movs	r2, #0
    fad6:	5e9a      	ldrsh	r2, [r3, r2]
    fad8:	4b15      	ldr	r3, [pc, #84]	; (fb30 <CorrectIMUvalues+0x7d0>)
    fada:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    fadc:	4b13      	ldr	r3, [pc, #76]	; (fb2c <CorrectIMUvalues+0x7cc>)
    fade:	2200      	movs	r2, #0
    fae0:	5e9a      	ldrsh	r2, [r3, r2]
    fae2:	4b15      	ldr	r3, [pc, #84]	; (fb38 <CorrectIMUvalues+0x7d8>)
    fae4:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    fae6:	4b17      	ldr	r3, [pc, #92]	; (fb44 <CorrectIMUvalues+0x7e4>)
    fae8:	2200      	movs	r2, #0
    faea:	5e9b      	ldrsh	r3, [r3, r2]
    faec:	b29b      	uxth	r3, r3
    faee:	425b      	negs	r3, r3
    faf0:	b29b      	uxth	r3, r3
    faf2:	b21a      	sxth	r2, r3
    faf4:	4b12      	ldr	r3, [pc, #72]	; (fb40 <CorrectIMUvalues+0x7e0>)
    faf6:	801a      	strh	r2, [r3, #0]
			cmy = my;
    faf8:	4b10      	ldr	r3, [pc, #64]	; (fb3c <CorrectIMUvalues+0x7dc>)
    fafa:	2200      	movs	r2, #0
    fafc:	5e9a      	ldrsh	r2, [r3, r2]
    fafe:	4b12      	ldr	r3, [pc, #72]	; (fb48 <CorrectIMUvalues+0x7e8>)
    fb00:	801a      	strh	r2, [r3, #0]
}
    fb02:	e1cf      	b.n	fea4 <CorrectIMUvalues+0xb44>
    fb04:	200003aa 	.word	0x200003aa
    fb08:	200003c0 	.word	0x200003c0
    fb0c:	200003a4 	.word	0x200003a4
    fb10:	200003ba 	.word	0x200003ba
    fb14:	200003b0 	.word	0x200003b0
    fb18:	200003c6 	.word	0x200003c6
    fb1c:	200003ac 	.word	0x200003ac
    fb20:	200003bc 	.word	0x200003bc
    fb24:	200003ae 	.word	0x200003ae
    fb28:	200003be 	.word	0x200003be
    fb2c:	200003a6 	.word	0x200003a6
    fb30:	200003b6 	.word	0x200003b6
    fb34:	200003a8 	.word	0x200003a8
    fb38:	200003b8 	.word	0x200003b8
    fb3c:	200003b2 	.word	0x200003b2
    fb40:	200003c2 	.word	0x200003c2
    fb44:	200003b4 	.word	0x200003b4
    fb48:	200003c4 	.word	0x200003c4
	} else if(connector_orient == ORIENT_REAR){ // Connectors Rear
    fb4c:	1dfb      	adds	r3, r7, #7
    fb4e:	781b      	ldrb	r3, [r3, #0]
    fb50:	2b05      	cmp	r3, #5
    fb52:	d000      	beq.n	fb56 <CorrectIMUvalues+0x7f6>
    fb54:	e0d7      	b.n	fd06 <CorrectIMUvalues+0x9a6>
		caz = -ay;
    fb56:	4bd5      	ldr	r3, [pc, #852]	; (feac <CorrectIMUvalues+0xb4c>)
    fb58:	2200      	movs	r2, #0
    fb5a:	5e9b      	ldrsh	r3, [r3, r2]
    fb5c:	b29b      	uxth	r3, r3
    fb5e:	425b      	negs	r3, r3
    fb60:	b29b      	uxth	r3, r3
    fb62:	b21a      	sxth	r2, r3
    fb64:	4bd2      	ldr	r3, [pc, #840]	; (feb0 <CorrectIMUvalues+0xb50>)
    fb66:	801a      	strh	r2, [r3, #0]
		cgz = -gy;
    fb68:	4bd2      	ldr	r3, [pc, #840]	; (feb4 <CorrectIMUvalues+0xb54>)
    fb6a:	2200      	movs	r2, #0
    fb6c:	5e9b      	ldrsh	r3, [r3, r2]
    fb6e:	b29b      	uxth	r3, r3
    fb70:	425b      	negs	r3, r3
    fb72:	b29b      	uxth	r3, r3
    fb74:	b21a      	sxth	r2, r3
    fb76:	4bd0      	ldr	r3, [pc, #832]	; (feb8 <CorrectIMUvalues+0xb58>)
    fb78:	801a      	strh	r2, [r3, #0]
		cmz = -my;
    fb7a:	4bd0      	ldr	r3, [pc, #832]	; (febc <CorrectIMUvalues+0xb5c>)
    fb7c:	2200      	movs	r2, #0
    fb7e:	5e9b      	ldrsh	r3, [r3, r2]
    fb80:	b29b      	uxth	r3, r3
    fb82:	425b      	negs	r3, r3
    fb84:	b29b      	uxth	r3, r3
    fb86:	b21a      	sxth	r2, r3
    fb88:	4bcd      	ldr	r3, [pc, #820]	; (fec0 <CorrectIMUvalues+0xb60>)
    fb8a:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    fb8c:	1dbb      	adds	r3, r7, #6
    fb8e:	781b      	ldrb	r3, [r3, #0]
    fb90:	2b01      	cmp	r3, #1
    fb92:	d11e      	bne.n	fbd2 <CorrectIMUvalues+0x872>
			cax = ax;
    fb94:	4bcb      	ldr	r3, [pc, #812]	; (fec4 <CorrectIMUvalues+0xb64>)
    fb96:	2200      	movs	r2, #0
    fb98:	5e9a      	ldrsh	r2, [r3, r2]
    fb9a:	4bcb      	ldr	r3, [pc, #812]	; (fec8 <CorrectIMUvalues+0xb68>)
    fb9c:	801a      	strh	r2, [r3, #0]
			cay = az;
    fb9e:	4bcb      	ldr	r3, [pc, #812]	; (fecc <CorrectIMUvalues+0xb6c>)
    fba0:	2200      	movs	r2, #0
    fba2:	5e9a      	ldrsh	r2, [r3, r2]
    fba4:	4bca      	ldr	r3, [pc, #808]	; (fed0 <CorrectIMUvalues+0xb70>)
    fba6:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    fba8:	4bca      	ldr	r3, [pc, #808]	; (fed4 <CorrectIMUvalues+0xb74>)
    fbaa:	2200      	movs	r2, #0
    fbac:	5e9a      	ldrsh	r2, [r3, r2]
    fbae:	4bca      	ldr	r3, [pc, #808]	; (fed8 <CorrectIMUvalues+0xb78>)
    fbb0:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    fbb2:	4bca      	ldr	r3, [pc, #808]	; (fedc <CorrectIMUvalues+0xb7c>)
    fbb4:	2200      	movs	r2, #0
    fbb6:	5e9a      	ldrsh	r2, [r3, r2]
    fbb8:	4bc9      	ldr	r3, [pc, #804]	; (fee0 <CorrectIMUvalues+0xb80>)
    fbba:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    fbbc:	4bc9      	ldr	r3, [pc, #804]	; (fee4 <CorrectIMUvalues+0xb84>)
    fbbe:	2200      	movs	r2, #0
    fbc0:	5e9a      	ldrsh	r2, [r3, r2]
    fbc2:	4bc9      	ldr	r3, [pc, #804]	; (fee8 <CorrectIMUvalues+0xb88>)
    fbc4:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    fbc6:	4bc9      	ldr	r3, [pc, #804]	; (feec <CorrectIMUvalues+0xb8c>)
    fbc8:	2200      	movs	r2, #0
    fbca:	5e9a      	ldrsh	r2, [r3, r2]
    fbcc:	4bc8      	ldr	r3, [pc, #800]	; (fef0 <CorrectIMUvalues+0xb90>)
    fbce:	801a      	strh	r2, [r3, #0]
}
    fbd0:	e168      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    fbd2:	1dbb      	adds	r3, r7, #6
    fbd4:	781b      	ldrb	r3, [r3, #0]
    fbd6:	2b02      	cmp	r3, #2
    fbd8:	d136      	bne.n	fc48 <CorrectIMUvalues+0x8e8>
			cax = -ax;
    fbda:	4bba      	ldr	r3, [pc, #744]	; (fec4 <CorrectIMUvalues+0xb64>)
    fbdc:	2200      	movs	r2, #0
    fbde:	5e9b      	ldrsh	r3, [r3, r2]
    fbe0:	b29b      	uxth	r3, r3
    fbe2:	425b      	negs	r3, r3
    fbe4:	b29b      	uxth	r3, r3
    fbe6:	b21a      	sxth	r2, r3
    fbe8:	4bb7      	ldr	r3, [pc, #732]	; (fec8 <CorrectIMUvalues+0xb68>)
    fbea:	801a      	strh	r2, [r3, #0]
			cay = -az;
    fbec:	4bb7      	ldr	r3, [pc, #732]	; (fecc <CorrectIMUvalues+0xb6c>)
    fbee:	2200      	movs	r2, #0
    fbf0:	5e9b      	ldrsh	r3, [r3, r2]
    fbf2:	b29b      	uxth	r3, r3
    fbf4:	425b      	negs	r3, r3
    fbf6:	b29b      	uxth	r3, r3
    fbf8:	b21a      	sxth	r2, r3
    fbfa:	4bb5      	ldr	r3, [pc, #724]	; (fed0 <CorrectIMUvalues+0xb70>)
    fbfc:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    fbfe:	4bb5      	ldr	r3, [pc, #724]	; (fed4 <CorrectIMUvalues+0xb74>)
    fc00:	2200      	movs	r2, #0
    fc02:	5e9b      	ldrsh	r3, [r3, r2]
    fc04:	b29b      	uxth	r3, r3
    fc06:	425b      	negs	r3, r3
    fc08:	b29b      	uxth	r3, r3
    fc0a:	b21a      	sxth	r2, r3
    fc0c:	4bb2      	ldr	r3, [pc, #712]	; (fed8 <CorrectIMUvalues+0xb78>)
    fc0e:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    fc10:	4bb2      	ldr	r3, [pc, #712]	; (fedc <CorrectIMUvalues+0xb7c>)
    fc12:	2200      	movs	r2, #0
    fc14:	5e9b      	ldrsh	r3, [r3, r2]
    fc16:	b29b      	uxth	r3, r3
    fc18:	425b      	negs	r3, r3
    fc1a:	b29b      	uxth	r3, r3
    fc1c:	b21a      	sxth	r2, r3
    fc1e:	4bb0      	ldr	r3, [pc, #704]	; (fee0 <CorrectIMUvalues+0xb80>)
    fc20:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    fc22:	4bb0      	ldr	r3, [pc, #704]	; (fee4 <CorrectIMUvalues+0xb84>)
    fc24:	2200      	movs	r2, #0
    fc26:	5e9b      	ldrsh	r3, [r3, r2]
    fc28:	b29b      	uxth	r3, r3
    fc2a:	425b      	negs	r3, r3
    fc2c:	b29b      	uxth	r3, r3
    fc2e:	b21a      	sxth	r2, r3
    fc30:	4bad      	ldr	r3, [pc, #692]	; (fee8 <CorrectIMUvalues+0xb88>)
    fc32:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    fc34:	4bad      	ldr	r3, [pc, #692]	; (feec <CorrectIMUvalues+0xb8c>)
    fc36:	2200      	movs	r2, #0
    fc38:	5e9b      	ldrsh	r3, [r3, r2]
    fc3a:	b29b      	uxth	r3, r3
    fc3c:	425b      	negs	r3, r3
    fc3e:	b29b      	uxth	r3, r3
    fc40:	b21a      	sxth	r2, r3
    fc42:	4bab      	ldr	r3, [pc, #684]	; (fef0 <CorrectIMUvalues+0xb90>)
    fc44:	801a      	strh	r2, [r3, #0]
}
    fc46:	e12d      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    fc48:	1dbb      	adds	r3, r7, #6
    fc4a:	781b      	ldrb	r3, [r3, #0]
    fc4c:	2b03      	cmp	r3, #3
    fc4e:	d12a      	bne.n	fca6 <CorrectIMUvalues+0x946>
			cax = -az;
    fc50:	4b9e      	ldr	r3, [pc, #632]	; (fecc <CorrectIMUvalues+0xb6c>)
    fc52:	2200      	movs	r2, #0
    fc54:	5e9b      	ldrsh	r3, [r3, r2]
    fc56:	b29b      	uxth	r3, r3
    fc58:	425b      	negs	r3, r3
    fc5a:	b29b      	uxth	r3, r3
    fc5c:	b21a      	sxth	r2, r3
    fc5e:	4b9a      	ldr	r3, [pc, #616]	; (fec8 <CorrectIMUvalues+0xb68>)
    fc60:	801a      	strh	r2, [r3, #0]
			cay = ax;
    fc62:	4b98      	ldr	r3, [pc, #608]	; (fec4 <CorrectIMUvalues+0xb64>)
    fc64:	2200      	movs	r2, #0
    fc66:	5e9a      	ldrsh	r2, [r3, r2]
    fc68:	4b99      	ldr	r3, [pc, #612]	; (fed0 <CorrectIMUvalues+0xb70>)
    fc6a:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    fc6c:	4b9b      	ldr	r3, [pc, #620]	; (fedc <CorrectIMUvalues+0xb7c>)
    fc6e:	2200      	movs	r2, #0
    fc70:	5e9b      	ldrsh	r3, [r3, r2]
    fc72:	b29b      	uxth	r3, r3
    fc74:	425b      	negs	r3, r3
    fc76:	b29b      	uxth	r3, r3
    fc78:	b21a      	sxth	r2, r3
    fc7a:	4b97      	ldr	r3, [pc, #604]	; (fed8 <CorrectIMUvalues+0xb78>)
    fc7c:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    fc7e:	4b95      	ldr	r3, [pc, #596]	; (fed4 <CorrectIMUvalues+0xb74>)
    fc80:	2200      	movs	r2, #0
    fc82:	5e9a      	ldrsh	r2, [r3, r2]
    fc84:	4b96      	ldr	r3, [pc, #600]	; (fee0 <CorrectIMUvalues+0xb80>)
    fc86:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    fc88:	4b98      	ldr	r3, [pc, #608]	; (feec <CorrectIMUvalues+0xb8c>)
    fc8a:	2200      	movs	r2, #0
    fc8c:	5e9a      	ldrsh	r2, [r3, r2]
    fc8e:	4b96      	ldr	r3, [pc, #600]	; (fee8 <CorrectIMUvalues+0xb88>)
    fc90:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    fc92:	4b94      	ldr	r3, [pc, #592]	; (fee4 <CorrectIMUvalues+0xb84>)
    fc94:	2200      	movs	r2, #0
    fc96:	5e9b      	ldrsh	r3, [r3, r2]
    fc98:	b29b      	uxth	r3, r3
    fc9a:	425b      	negs	r3, r3
    fc9c:	b29b      	uxth	r3, r3
    fc9e:	b21a      	sxth	r2, r3
    fca0:	4b93      	ldr	r3, [pc, #588]	; (fef0 <CorrectIMUvalues+0xb90>)
    fca2:	801a      	strh	r2, [r3, #0]
}
    fca4:	e0fe      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    fca6:	1dbb      	adds	r3, r7, #6
    fca8:	781b      	ldrb	r3, [r3, #0]
    fcaa:	2b04      	cmp	r3, #4
    fcac:	d000      	beq.n	fcb0 <CorrectIMUvalues+0x950>
    fcae:	e0f9      	b.n	fea4 <CorrectIMUvalues+0xb44>
			cax = az;
    fcb0:	4b86      	ldr	r3, [pc, #536]	; (fecc <CorrectIMUvalues+0xb6c>)
    fcb2:	2200      	movs	r2, #0
    fcb4:	5e9a      	ldrsh	r2, [r3, r2]
    fcb6:	4b84      	ldr	r3, [pc, #528]	; (fec8 <CorrectIMUvalues+0xb68>)
    fcb8:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    fcba:	4b82      	ldr	r3, [pc, #520]	; (fec4 <CorrectIMUvalues+0xb64>)
    fcbc:	2200      	movs	r2, #0
    fcbe:	5e9b      	ldrsh	r3, [r3, r2]
    fcc0:	b29b      	uxth	r3, r3
    fcc2:	425b      	negs	r3, r3
    fcc4:	b29b      	uxth	r3, r3
    fcc6:	b21a      	sxth	r2, r3
    fcc8:	4b81      	ldr	r3, [pc, #516]	; (fed0 <CorrectIMUvalues+0xb70>)
    fcca:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    fccc:	4b83      	ldr	r3, [pc, #524]	; (fedc <CorrectIMUvalues+0xb7c>)
    fcce:	2200      	movs	r2, #0
    fcd0:	5e9a      	ldrsh	r2, [r3, r2]
    fcd2:	4b81      	ldr	r3, [pc, #516]	; (fed8 <CorrectIMUvalues+0xb78>)
    fcd4:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    fcd6:	4b7f      	ldr	r3, [pc, #508]	; (fed4 <CorrectIMUvalues+0xb74>)
    fcd8:	2200      	movs	r2, #0
    fcda:	5e9b      	ldrsh	r3, [r3, r2]
    fcdc:	b29b      	uxth	r3, r3
    fcde:	425b      	negs	r3, r3
    fce0:	b29b      	uxth	r3, r3
    fce2:	b21a      	sxth	r2, r3
    fce4:	4b7e      	ldr	r3, [pc, #504]	; (fee0 <CorrectIMUvalues+0xb80>)
    fce6:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    fce8:	4b80      	ldr	r3, [pc, #512]	; (feec <CorrectIMUvalues+0xb8c>)
    fcea:	2200      	movs	r2, #0
    fcec:	5e9b      	ldrsh	r3, [r3, r2]
    fcee:	b29b      	uxth	r3, r3
    fcf0:	425b      	negs	r3, r3
    fcf2:	b29b      	uxth	r3, r3
    fcf4:	b21a      	sxth	r2, r3
    fcf6:	4b7c      	ldr	r3, [pc, #496]	; (fee8 <CorrectIMUvalues+0xb88>)
    fcf8:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    fcfa:	4b7a      	ldr	r3, [pc, #488]	; (fee4 <CorrectIMUvalues+0xb84>)
    fcfc:	2200      	movs	r2, #0
    fcfe:	5e9a      	ldrsh	r2, [r3, r2]
    fd00:	4b7b      	ldr	r3, [pc, #492]	; (fef0 <CorrectIMUvalues+0xb90>)
    fd02:	801a      	strh	r2, [r3, #0]
}
    fd04:	e0ce      	b.n	fea4 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_FRONT){ // Connectors Front
    fd06:	1dfb      	adds	r3, r7, #7
    fd08:	781b      	ldrb	r3, [r3, #0]
    fd0a:	2b06      	cmp	r3, #6
    fd0c:	d000      	beq.n	fd10 <CorrectIMUvalues+0x9b0>
    fd0e:	e0c9      	b.n	fea4 <CorrectIMUvalues+0xb44>
		caz = ay;
    fd10:	4b66      	ldr	r3, [pc, #408]	; (feac <CorrectIMUvalues+0xb4c>)
    fd12:	2200      	movs	r2, #0
    fd14:	5e9a      	ldrsh	r2, [r3, r2]
    fd16:	4b66      	ldr	r3, [pc, #408]	; (feb0 <CorrectIMUvalues+0xb50>)
    fd18:	801a      	strh	r2, [r3, #0]
		cgz = gy;
    fd1a:	4b66      	ldr	r3, [pc, #408]	; (feb4 <CorrectIMUvalues+0xb54>)
    fd1c:	2200      	movs	r2, #0
    fd1e:	5e9a      	ldrsh	r2, [r3, r2]
    fd20:	4b65      	ldr	r3, [pc, #404]	; (feb8 <CorrectIMUvalues+0xb58>)
    fd22:	801a      	strh	r2, [r3, #0]
		cgz = my;
    fd24:	4b65      	ldr	r3, [pc, #404]	; (febc <CorrectIMUvalues+0xb5c>)
    fd26:	2200      	movs	r2, #0
    fd28:	5e9a      	ldrsh	r2, [r3, r2]
    fd2a:	4b63      	ldr	r3, [pc, #396]	; (feb8 <CorrectIMUvalues+0xb58>)
    fd2c:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    fd2e:	1dbb      	adds	r3, r7, #6
    fd30:	781b      	ldrb	r3, [r3, #0]
    fd32:	2b01      	cmp	r3, #1
    fd34:	d12a      	bne.n	fd8c <CorrectIMUvalues+0xa2c>
			cax = -ax;
    fd36:	4b63      	ldr	r3, [pc, #396]	; (fec4 <CorrectIMUvalues+0xb64>)
    fd38:	2200      	movs	r2, #0
    fd3a:	5e9b      	ldrsh	r3, [r3, r2]
    fd3c:	b29b      	uxth	r3, r3
    fd3e:	425b      	negs	r3, r3
    fd40:	b29b      	uxth	r3, r3
    fd42:	b21a      	sxth	r2, r3
    fd44:	4b60      	ldr	r3, [pc, #384]	; (fec8 <CorrectIMUvalues+0xb68>)
    fd46:	801a      	strh	r2, [r3, #0]
			cay = az;
    fd48:	4b60      	ldr	r3, [pc, #384]	; (fecc <CorrectIMUvalues+0xb6c>)
    fd4a:	2200      	movs	r2, #0
    fd4c:	5e9a      	ldrsh	r2, [r3, r2]
    fd4e:	4b60      	ldr	r3, [pc, #384]	; (fed0 <CorrectIMUvalues+0xb70>)
    fd50:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    fd52:	4b60      	ldr	r3, [pc, #384]	; (fed4 <CorrectIMUvalues+0xb74>)
    fd54:	2200      	movs	r2, #0
    fd56:	5e9b      	ldrsh	r3, [r3, r2]
    fd58:	b29b      	uxth	r3, r3
    fd5a:	425b      	negs	r3, r3
    fd5c:	b29b      	uxth	r3, r3
    fd5e:	b21a      	sxth	r2, r3
    fd60:	4b5d      	ldr	r3, [pc, #372]	; (fed8 <CorrectIMUvalues+0xb78>)
    fd62:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    fd64:	4b5d      	ldr	r3, [pc, #372]	; (fedc <CorrectIMUvalues+0xb7c>)
    fd66:	2200      	movs	r2, #0
    fd68:	5e9a      	ldrsh	r2, [r3, r2]
    fd6a:	4b5d      	ldr	r3, [pc, #372]	; (fee0 <CorrectIMUvalues+0xb80>)
    fd6c:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    fd6e:	4b5d      	ldr	r3, [pc, #372]	; (fee4 <CorrectIMUvalues+0xb84>)
    fd70:	2200      	movs	r2, #0
    fd72:	5e9b      	ldrsh	r3, [r3, r2]
    fd74:	b29b      	uxth	r3, r3
    fd76:	425b      	negs	r3, r3
    fd78:	b29b      	uxth	r3, r3
    fd7a:	b21a      	sxth	r2, r3
    fd7c:	4b5a      	ldr	r3, [pc, #360]	; (fee8 <CorrectIMUvalues+0xb88>)
    fd7e:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    fd80:	4b5a      	ldr	r3, [pc, #360]	; (feec <CorrectIMUvalues+0xb8c>)
    fd82:	2200      	movs	r2, #0
    fd84:	5e9a      	ldrsh	r2, [r3, r2]
    fd86:	4b5a      	ldr	r3, [pc, #360]	; (fef0 <CorrectIMUvalues+0xb90>)
    fd88:	801a      	strh	r2, [r3, #0]
}
    fd8a:	e08b      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    fd8c:	1dbb      	adds	r3, r7, #6
    fd8e:	781b      	ldrb	r3, [r3, #0]
    fd90:	2b02      	cmp	r3, #2
    fd92:	d12a      	bne.n	fdea <CorrectIMUvalues+0xa8a>
			cax = ax;
    fd94:	4b4b      	ldr	r3, [pc, #300]	; (fec4 <CorrectIMUvalues+0xb64>)
    fd96:	2200      	movs	r2, #0
    fd98:	5e9a      	ldrsh	r2, [r3, r2]
    fd9a:	4b4b      	ldr	r3, [pc, #300]	; (fec8 <CorrectIMUvalues+0xb68>)
    fd9c:	801a      	strh	r2, [r3, #0]
			cay = -az;
    fd9e:	4b4b      	ldr	r3, [pc, #300]	; (fecc <CorrectIMUvalues+0xb6c>)
    fda0:	2200      	movs	r2, #0
    fda2:	5e9b      	ldrsh	r3, [r3, r2]
    fda4:	b29b      	uxth	r3, r3
    fda6:	425b      	negs	r3, r3
    fda8:	b29b      	uxth	r3, r3
    fdaa:	b21a      	sxth	r2, r3
    fdac:	4b48      	ldr	r3, [pc, #288]	; (fed0 <CorrectIMUvalues+0xb70>)
    fdae:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    fdb0:	4b48      	ldr	r3, [pc, #288]	; (fed4 <CorrectIMUvalues+0xb74>)
    fdb2:	2200      	movs	r2, #0
    fdb4:	5e9a      	ldrsh	r2, [r3, r2]
    fdb6:	4b48      	ldr	r3, [pc, #288]	; (fed8 <CorrectIMUvalues+0xb78>)
    fdb8:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    fdba:	4b48      	ldr	r3, [pc, #288]	; (fedc <CorrectIMUvalues+0xb7c>)
    fdbc:	2200      	movs	r2, #0
    fdbe:	5e9b      	ldrsh	r3, [r3, r2]
    fdc0:	b29b      	uxth	r3, r3
    fdc2:	425b      	negs	r3, r3
    fdc4:	b29b      	uxth	r3, r3
    fdc6:	b21a      	sxth	r2, r3
    fdc8:	4b45      	ldr	r3, [pc, #276]	; (fee0 <CorrectIMUvalues+0xb80>)
    fdca:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    fdcc:	4b45      	ldr	r3, [pc, #276]	; (fee4 <CorrectIMUvalues+0xb84>)
    fdce:	2200      	movs	r2, #0
    fdd0:	5e9a      	ldrsh	r2, [r3, r2]
    fdd2:	4b45      	ldr	r3, [pc, #276]	; (fee8 <CorrectIMUvalues+0xb88>)
    fdd4:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    fdd6:	4b45      	ldr	r3, [pc, #276]	; (feec <CorrectIMUvalues+0xb8c>)
    fdd8:	2200      	movs	r2, #0
    fdda:	5e9b      	ldrsh	r3, [r3, r2]
    fddc:	b29b      	uxth	r3, r3
    fdde:	425b      	negs	r3, r3
    fde0:	b29b      	uxth	r3, r3
    fde2:	b21a      	sxth	r2, r3
    fde4:	4b42      	ldr	r3, [pc, #264]	; (fef0 <CorrectIMUvalues+0xb90>)
    fde6:	801a      	strh	r2, [r3, #0]
}
    fde8:	e05c      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    fdea:	1dbb      	adds	r3, r7, #6
    fdec:	781b      	ldrb	r3, [r3, #0]
    fdee:	2b03      	cmp	r3, #3
    fdf0:	d126      	bne.n	fe40 <CorrectIMUvalues+0xae0>
			cax = az;
    fdf2:	4b36      	ldr	r3, [pc, #216]	; (fecc <CorrectIMUvalues+0xb6c>)
    fdf4:	2200      	movs	r2, #0
    fdf6:	5e9a      	ldrsh	r2, [r3, r2]
    fdf8:	4b33      	ldr	r3, [pc, #204]	; (fec8 <CorrectIMUvalues+0xb68>)
    fdfa:	801a      	strh	r2, [r3, #0]
			cay = ax;
    fdfc:	4b31      	ldr	r3, [pc, #196]	; (fec4 <CorrectIMUvalues+0xb64>)
    fdfe:	2200      	movs	r2, #0
    fe00:	5e9a      	ldrsh	r2, [r3, r2]
    fe02:	4b33      	ldr	r3, [pc, #204]	; (fed0 <CorrectIMUvalues+0xb70>)
    fe04:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    fe06:	4b35      	ldr	r3, [pc, #212]	; (fedc <CorrectIMUvalues+0xb7c>)
    fe08:	2200      	movs	r2, #0
    fe0a:	5e9a      	ldrsh	r2, [r3, r2]
    fe0c:	4b32      	ldr	r3, [pc, #200]	; (fed8 <CorrectIMUvalues+0xb78>)
    fe0e:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    fe10:	4b30      	ldr	r3, [pc, #192]	; (fed4 <CorrectIMUvalues+0xb74>)
    fe12:	2200      	movs	r2, #0
    fe14:	5e9a      	ldrsh	r2, [r3, r2]
    fe16:	4b32      	ldr	r3, [pc, #200]	; (fee0 <CorrectIMUvalues+0xb80>)
    fe18:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    fe1a:	4b34      	ldr	r3, [pc, #208]	; (feec <CorrectIMUvalues+0xb8c>)
    fe1c:	2200      	movs	r2, #0
    fe1e:	5e9b      	ldrsh	r3, [r3, r2]
    fe20:	b29b      	uxth	r3, r3
    fe22:	425b      	negs	r3, r3
    fe24:	b29b      	uxth	r3, r3
    fe26:	b21a      	sxth	r2, r3
    fe28:	4b2f      	ldr	r3, [pc, #188]	; (fee8 <CorrectIMUvalues+0xb88>)
    fe2a:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    fe2c:	4b2d      	ldr	r3, [pc, #180]	; (fee4 <CorrectIMUvalues+0xb84>)
    fe2e:	2200      	movs	r2, #0
    fe30:	5e9b      	ldrsh	r3, [r3, r2]
    fe32:	b29b      	uxth	r3, r3
    fe34:	425b      	negs	r3, r3
    fe36:	b29b      	uxth	r3, r3
    fe38:	b21a      	sxth	r2, r3
    fe3a:	4b2d      	ldr	r3, [pc, #180]	; (fef0 <CorrectIMUvalues+0xb90>)
    fe3c:	801a      	strh	r2, [r3, #0]
}
    fe3e:	e031      	b.n	fea4 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    fe40:	1dbb      	adds	r3, r7, #6
    fe42:	781b      	ldrb	r3, [r3, #0]
    fe44:	2b04      	cmp	r3, #4
    fe46:	d12d      	bne.n	fea4 <CorrectIMUvalues+0xb44>
			cax = -az;
    fe48:	4b20      	ldr	r3, [pc, #128]	; (fecc <CorrectIMUvalues+0xb6c>)
    fe4a:	2200      	movs	r2, #0
    fe4c:	5e9b      	ldrsh	r3, [r3, r2]
    fe4e:	b29b      	uxth	r3, r3
    fe50:	425b      	negs	r3, r3
    fe52:	b29b      	uxth	r3, r3
    fe54:	b21a      	sxth	r2, r3
    fe56:	4b1c      	ldr	r3, [pc, #112]	; (fec8 <CorrectIMUvalues+0xb68>)
    fe58:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    fe5a:	4b1a      	ldr	r3, [pc, #104]	; (fec4 <CorrectIMUvalues+0xb64>)
    fe5c:	2200      	movs	r2, #0
    fe5e:	5e9b      	ldrsh	r3, [r3, r2]
    fe60:	b29b      	uxth	r3, r3
    fe62:	425b      	negs	r3, r3
    fe64:	b29b      	uxth	r3, r3
    fe66:	b21a      	sxth	r2, r3
    fe68:	4b19      	ldr	r3, [pc, #100]	; (fed0 <CorrectIMUvalues+0xb70>)
    fe6a:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    fe6c:	4b1b      	ldr	r3, [pc, #108]	; (fedc <CorrectIMUvalues+0xb7c>)
    fe6e:	2200      	movs	r2, #0
    fe70:	5e9b      	ldrsh	r3, [r3, r2]
    fe72:	b29b      	uxth	r3, r3
    fe74:	425b      	negs	r3, r3
    fe76:	b29b      	uxth	r3, r3
    fe78:	b21a      	sxth	r2, r3
    fe7a:	4b17      	ldr	r3, [pc, #92]	; (fed8 <CorrectIMUvalues+0xb78>)
    fe7c:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    fe7e:	4b15      	ldr	r3, [pc, #84]	; (fed4 <CorrectIMUvalues+0xb74>)
    fe80:	2200      	movs	r2, #0
    fe82:	5e9b      	ldrsh	r3, [r3, r2]
    fe84:	b29b      	uxth	r3, r3
    fe86:	425b      	negs	r3, r3
    fe88:	b29b      	uxth	r3, r3
    fe8a:	b21a      	sxth	r2, r3
    fe8c:	4b14      	ldr	r3, [pc, #80]	; (fee0 <CorrectIMUvalues+0xb80>)
    fe8e:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    fe90:	4b16      	ldr	r3, [pc, #88]	; (feec <CorrectIMUvalues+0xb8c>)
    fe92:	2200      	movs	r2, #0
    fe94:	5e9a      	ldrsh	r2, [r3, r2]
    fe96:	4b14      	ldr	r3, [pc, #80]	; (fee8 <CorrectIMUvalues+0xb88>)
    fe98:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    fe9a:	4b12      	ldr	r3, [pc, #72]	; (fee4 <CorrectIMUvalues+0xb84>)
    fe9c:	2200      	movs	r2, #0
    fe9e:	5e9a      	ldrsh	r2, [r3, r2]
    fea0:	4b13      	ldr	r3, [pc, #76]	; (fef0 <CorrectIMUvalues+0xb90>)
    fea2:	801a      	strh	r2, [r3, #0]
}
    fea4:	46c0      	nop			; (mov r8, r8)
    fea6:	46bd      	mov	sp, r7
    fea8:	b002      	add	sp, #8
    feaa:	bd80      	pop	{r7, pc}
    feac:	200003ac 	.word	0x200003ac
    feb0:	200003c0 	.word	0x200003c0
    feb4:	200003a6 	.word	0x200003a6
    feb8:	200003ba 	.word	0x200003ba
    febc:	200003b2 	.word	0x200003b2
    fec0:	200003c6 	.word	0x200003c6
    fec4:	200003aa 	.word	0x200003aa
    fec8:	200003bc 	.word	0x200003bc
    fecc:	200003ae 	.word	0x200003ae
    fed0:	200003be 	.word	0x200003be
    fed4:	200003a4 	.word	0x200003a4
    fed8:	200003b6 	.word	0x200003b6
    fedc:	200003a8 	.word	0x200003a8
    fee0:	200003b8 	.word	0x200003b8
    fee4:	200003b0 	.word	0x200003b0
    fee8:	200003c2 	.word	0x200003c2
    feec:	200003b4 	.word	0x200003b4
    fef0:	200003c4 	.word	0x200003c4

0000fef4 <calculate_heading>:

void calculate_heading(){
    fef4:	b5b0      	push	{r4, r5, r7, lr}
    fef6:	af00      	add	r7, sp, #0
	headingTime = millis();
    fef8:	4b44      	ldr	r3, [pc, #272]	; (1000c <calculate_heading+0x118>)
    fefa:	4798      	blx	r3
    fefc:	0002      	movs	r2, r0
    fefe:	4b44      	ldr	r3, [pc, #272]	; (10010 <calculate_heading+0x11c>)
    ff00:	601a      	str	r2, [r3, #0]
	if(abs(gzKalman) >= 0.5){
    ff02:	4b44      	ldr	r3, [pc, #272]	; (10014 <calculate_heading+0x120>)
    ff04:	681a      	ldr	r2, [r3, #0]
    ff06:	4b44      	ldr	r3, [pc, #272]	; (10018 <calculate_heading+0x124>)
    ff08:	1c10      	adds	r0, r2, #0
    ff0a:	4798      	blx	r3
    ff0c:	0003      	movs	r3, r0
    ff0e:	17d9      	asrs	r1, r3, #31
    ff10:	185a      	adds	r2, r3, r1
    ff12:	404a      	eors	r2, r1
    ff14:	4b41      	ldr	r3, [pc, #260]	; (1001c <calculate_heading+0x128>)
    ff16:	0010      	movs	r0, r2
    ff18:	4798      	blx	r3
    ff1a:	4c41      	ldr	r4, [pc, #260]	; (10020 <calculate_heading+0x12c>)
    ff1c:	2200      	movs	r2, #0
    ff1e:	4b41      	ldr	r3, [pc, #260]	; (10024 <calculate_heading+0x130>)
    ff20:	47a0      	blx	r4
    ff22:	1e03      	subs	r3, r0, #0
    ff24:	d045      	beq.n	ffb2 <calculate_heading+0xbe>
		if(headingTime < lheadingTime){
    ff26:	4b3a      	ldr	r3, [pc, #232]	; (10010 <calculate_heading+0x11c>)
    ff28:	681a      	ldr	r2, [r3, #0]
    ff2a:	4b3f      	ldr	r3, [pc, #252]	; (10028 <calculate_heading+0x134>)
    ff2c:	681b      	ldr	r3, [r3, #0]
    ff2e:	429a      	cmp	r2, r3
    ff30:	d220      	bcs.n	ff74 <calculate_heading+0x80>
			heading += (gzKalman) * (((float)(headingTime + (0xFFFFFFFF - lheadingTime)))/1000);
    ff32:	4b37      	ldr	r3, [pc, #220]	; (10010 <calculate_heading+0x11c>)
    ff34:	681a      	ldr	r2, [r3, #0]
    ff36:	4b3c      	ldr	r3, [pc, #240]	; (10028 <calculate_heading+0x134>)
    ff38:	681b      	ldr	r3, [r3, #0]
    ff3a:	1ad3      	subs	r3, r2, r3
    ff3c:	1e5a      	subs	r2, r3, #1
    ff3e:	4b3b      	ldr	r3, [pc, #236]	; (1002c <calculate_heading+0x138>)
    ff40:	0010      	movs	r0, r2
    ff42:	4798      	blx	r3
    ff44:	1c02      	adds	r2, r0, #0
    ff46:	4b3a      	ldr	r3, [pc, #232]	; (10030 <calculate_heading+0x13c>)
    ff48:	493a      	ldr	r1, [pc, #232]	; (10034 <calculate_heading+0x140>)
    ff4a:	1c10      	adds	r0, r2, #0
    ff4c:	4798      	blx	r3
    ff4e:	1c03      	adds	r3, r0, #0
    ff50:	1c18      	adds	r0, r3, #0
    ff52:	4b30      	ldr	r3, [pc, #192]	; (10014 <calculate_heading+0x120>)
    ff54:	681a      	ldr	r2, [r3, #0]
    ff56:	4b38      	ldr	r3, [pc, #224]	; (10038 <calculate_heading+0x144>)
    ff58:	1c11      	adds	r1, r2, #0
    ff5a:	4798      	blx	r3
    ff5c:	1c03      	adds	r3, r0, #0
    ff5e:	1c18      	adds	r0, r3, #0
    ff60:	4b36      	ldr	r3, [pc, #216]	; (1003c <calculate_heading+0x148>)
    ff62:	681a      	ldr	r2, [r3, #0]
    ff64:	4b36      	ldr	r3, [pc, #216]	; (10040 <calculate_heading+0x14c>)
    ff66:	1c11      	adds	r1, r2, #0
    ff68:	4798      	blx	r3
    ff6a:	1c03      	adds	r3, r0, #0
    ff6c:	1c1a      	adds	r2, r3, #0
    ff6e:	4b33      	ldr	r3, [pc, #204]	; (1003c <calculate_heading+0x148>)
    ff70:	601a      	str	r2, [r3, #0]
    ff72:	e01e      	b.n	ffb2 <calculate_heading+0xbe>
		}
		else
			heading += (gzKalman) * (((float)(headingTime - lheadingTime))/1000);
    ff74:	4b26      	ldr	r3, [pc, #152]	; (10010 <calculate_heading+0x11c>)
    ff76:	681a      	ldr	r2, [r3, #0]
    ff78:	4b2b      	ldr	r3, [pc, #172]	; (10028 <calculate_heading+0x134>)
    ff7a:	681b      	ldr	r3, [r3, #0]
    ff7c:	1ad2      	subs	r2, r2, r3
    ff7e:	4b2b      	ldr	r3, [pc, #172]	; (1002c <calculate_heading+0x138>)
    ff80:	0010      	movs	r0, r2
    ff82:	4798      	blx	r3
    ff84:	1c02      	adds	r2, r0, #0
    ff86:	4b2a      	ldr	r3, [pc, #168]	; (10030 <calculate_heading+0x13c>)
    ff88:	492a      	ldr	r1, [pc, #168]	; (10034 <calculate_heading+0x140>)
    ff8a:	1c10      	adds	r0, r2, #0
    ff8c:	4798      	blx	r3
    ff8e:	1c03      	adds	r3, r0, #0
    ff90:	1c18      	adds	r0, r3, #0
    ff92:	4b20      	ldr	r3, [pc, #128]	; (10014 <calculate_heading+0x120>)
    ff94:	681a      	ldr	r2, [r3, #0]
    ff96:	4b28      	ldr	r3, [pc, #160]	; (10038 <calculate_heading+0x144>)
    ff98:	1c11      	adds	r1, r2, #0
    ff9a:	4798      	blx	r3
    ff9c:	1c03      	adds	r3, r0, #0
    ff9e:	1c18      	adds	r0, r3, #0
    ffa0:	4b26      	ldr	r3, [pc, #152]	; (1003c <calculate_heading+0x148>)
    ffa2:	681a      	ldr	r2, [r3, #0]
    ffa4:	4b26      	ldr	r3, [pc, #152]	; (10040 <calculate_heading+0x14c>)
    ffa6:	1c11      	adds	r1, r2, #0
    ffa8:	4798      	blx	r3
    ffaa:	1c03      	adds	r3, r0, #0
    ffac:	1c1a      	adds	r2, r3, #0
    ffae:	4b23      	ldr	r3, [pc, #140]	; (1003c <calculate_heading+0x148>)
    ffb0:	601a      	str	r2, [r3, #0]
	}
	lheadingTime = headingTime;
    ffb2:	4b17      	ldr	r3, [pc, #92]	; (10010 <calculate_heading+0x11c>)
    ffb4:	681a      	ldr	r2, [r3, #0]
    ffb6:	4b1c      	ldr	r3, [pc, #112]	; (10028 <calculate_heading+0x134>)
    ffb8:	601a      	str	r2, [r3, #0]
	if(heading < 0)
    ffba:	4b20      	ldr	r3, [pc, #128]	; (1003c <calculate_heading+0x148>)
    ffbc:	681a      	ldr	r2, [r3, #0]
    ffbe:	4b21      	ldr	r3, [pc, #132]	; (10044 <calculate_heading+0x150>)
    ffc0:	2100      	movs	r1, #0
    ffc2:	1c10      	adds	r0, r2, #0
    ffc4:	4798      	blx	r3
    ffc6:	1e03      	subs	r3, r0, #0
    ffc8:	d00a      	beq.n	ffe0 <calculate_heading+0xec>
		heading = 360 + heading;
    ffca:	4b1c      	ldr	r3, [pc, #112]	; (1003c <calculate_heading+0x148>)
    ffcc:	681a      	ldr	r2, [r3, #0]
    ffce:	4b1c      	ldr	r3, [pc, #112]	; (10040 <calculate_heading+0x14c>)
    ffd0:	491d      	ldr	r1, [pc, #116]	; (10048 <calculate_heading+0x154>)
    ffd2:	1c10      	adds	r0, r2, #0
    ffd4:	4798      	blx	r3
    ffd6:	1c03      	adds	r3, r0, #0
    ffd8:	1c1a      	adds	r2, r3, #0
    ffda:	4b18      	ldr	r3, [pc, #96]	; (1003c <calculate_heading+0x148>)
    ffdc:	601a      	str	r2, [r3, #0]
	else if(heading > 360)
		heading = heading - 360;
}
    ffde:	e012      	b.n	10006 <calculate_heading+0x112>
	else if(heading > 360)
    ffe0:	4b16      	ldr	r3, [pc, #88]	; (1003c <calculate_heading+0x148>)
    ffe2:	681a      	ldr	r2, [r3, #0]
    ffe4:	4b19      	ldr	r3, [pc, #100]	; (1004c <calculate_heading+0x158>)
    ffe6:	4918      	ldr	r1, [pc, #96]	; (10048 <calculate_heading+0x154>)
    ffe8:	1c10      	adds	r0, r2, #0
    ffea:	4798      	blx	r3
    ffec:	1e03      	subs	r3, r0, #0
    ffee:	d100      	bne.n	fff2 <calculate_heading+0xfe>
}
    fff0:	e009      	b.n	10006 <calculate_heading+0x112>
		heading = heading - 360;
    fff2:	4b12      	ldr	r3, [pc, #72]	; (1003c <calculate_heading+0x148>)
    fff4:	681a      	ldr	r2, [r3, #0]
    fff6:	4b16      	ldr	r3, [pc, #88]	; (10050 <calculate_heading+0x15c>)
    fff8:	4913      	ldr	r1, [pc, #76]	; (10048 <calculate_heading+0x154>)
    fffa:	1c10      	adds	r0, r2, #0
    fffc:	4798      	blx	r3
    fffe:	1c03      	adds	r3, r0, #0
   10000:	1c1a      	adds	r2, r3, #0
   10002:	4b0e      	ldr	r3, [pc, #56]	; (1003c <calculate_heading+0x148>)
   10004:	601a      	str	r2, [r3, #0]
}
   10006:	46c0      	nop			; (mov r8, r8)
   10008:	46bd      	mov	sp, r7
   1000a:	bdb0      	pop	{r4, r5, r7, pc}
   1000c:	00009f65 	.word	0x00009f65
   10010:	20000354 	.word	0x20000354
   10014:	2000034c 	.word	0x2000034c
   10018:	00019525 	.word	0x00019525
   1001c:	0001b0ad 	.word	0x0001b0ad
   10020:	00018761 	.word	0x00018761
   10024:	3fe00000 	.word	0x3fe00000
   10028:	20000358 	.word	0x20000358
   1002c:	00019605 	.word	0x00019605
   10030:	00018bcd 	.word	0x00018bcd
   10034:	447a0000 	.word	0x447a0000
   10038:	00018fad 	.word	0x00018fad
   1003c:	20000350 	.word	0x20000350
   10040:	000188a9 	.word	0x000188a9
   10044:	00018799 	.word	0x00018799
   10048:	43b40000 	.word	0x43b40000
   1004c:	000187c1 	.word	0x000187c1
   10050:	000191ed 	.word	0x000191ed

00010054 <update_kalman_limits>:

void update_kalman_limits(){
   10054:	b580      	push	{r7, lr}
   10056:	af00      	add	r7, sp, #0
	if(axKalman > kalmanAX_max)
   10058:	4b52      	ldr	r3, [pc, #328]	; (101a4 <update_kalman_limits+0x150>)
   1005a:	681a      	ldr	r2, [r3, #0]
   1005c:	4b52      	ldr	r3, [pc, #328]	; (101a8 <update_kalman_limits+0x154>)
   1005e:	6819      	ldr	r1, [r3, #0]
   10060:	4b52      	ldr	r3, [pc, #328]	; (101ac <update_kalman_limits+0x158>)
   10062:	1c10      	adds	r0, r2, #0
   10064:	4798      	blx	r3
   10066:	1e03      	subs	r3, r0, #0
   10068:	d004      	beq.n	10074 <update_kalman_limits+0x20>
		kalmanAX_max = axKalman;
   1006a:	4b4e      	ldr	r3, [pc, #312]	; (101a4 <update_kalman_limits+0x150>)
   1006c:	681a      	ldr	r2, [r3, #0]
   1006e:	4b4e      	ldr	r3, [pc, #312]	; (101a8 <update_kalman_limits+0x154>)
   10070:	601a      	str	r2, [r3, #0]
   10072:	e00c      	b.n	1008e <update_kalman_limits+0x3a>
	else if(axKalman < kalmanAX_min)
   10074:	4b4b      	ldr	r3, [pc, #300]	; (101a4 <update_kalman_limits+0x150>)
   10076:	681a      	ldr	r2, [r3, #0]
   10078:	4b4d      	ldr	r3, [pc, #308]	; (101b0 <update_kalman_limits+0x15c>)
   1007a:	6819      	ldr	r1, [r3, #0]
   1007c:	4b4d      	ldr	r3, [pc, #308]	; (101b4 <update_kalman_limits+0x160>)
   1007e:	1c10      	adds	r0, r2, #0
   10080:	4798      	blx	r3
   10082:	1e03      	subs	r3, r0, #0
   10084:	d003      	beq.n	1008e <update_kalman_limits+0x3a>
		kalmanAX_min = axKalman;
   10086:	4b47      	ldr	r3, [pc, #284]	; (101a4 <update_kalman_limits+0x150>)
   10088:	681a      	ldr	r2, [r3, #0]
   1008a:	4b49      	ldr	r3, [pc, #292]	; (101b0 <update_kalman_limits+0x15c>)
   1008c:	601a      	str	r2, [r3, #0]

	if(ayKalman > kalmanAY_max)
   1008e:	4b4a      	ldr	r3, [pc, #296]	; (101b8 <update_kalman_limits+0x164>)
   10090:	681a      	ldr	r2, [r3, #0]
   10092:	4b4a      	ldr	r3, [pc, #296]	; (101bc <update_kalman_limits+0x168>)
   10094:	6819      	ldr	r1, [r3, #0]
   10096:	4b45      	ldr	r3, [pc, #276]	; (101ac <update_kalman_limits+0x158>)
   10098:	1c10      	adds	r0, r2, #0
   1009a:	4798      	blx	r3
   1009c:	1e03      	subs	r3, r0, #0
   1009e:	d004      	beq.n	100aa <update_kalman_limits+0x56>
		kalmanAY_max = ayKalman;
   100a0:	4b45      	ldr	r3, [pc, #276]	; (101b8 <update_kalman_limits+0x164>)
   100a2:	681a      	ldr	r2, [r3, #0]
   100a4:	4b45      	ldr	r3, [pc, #276]	; (101bc <update_kalman_limits+0x168>)
   100a6:	601a      	str	r2, [r3, #0]
   100a8:	e00c      	b.n	100c4 <update_kalman_limits+0x70>
	else if(ayKalman < kalmanAY_min)
   100aa:	4b43      	ldr	r3, [pc, #268]	; (101b8 <update_kalman_limits+0x164>)
   100ac:	681a      	ldr	r2, [r3, #0]
   100ae:	4b44      	ldr	r3, [pc, #272]	; (101c0 <update_kalman_limits+0x16c>)
   100b0:	6819      	ldr	r1, [r3, #0]
   100b2:	4b40      	ldr	r3, [pc, #256]	; (101b4 <update_kalman_limits+0x160>)
   100b4:	1c10      	adds	r0, r2, #0
   100b6:	4798      	blx	r3
   100b8:	1e03      	subs	r3, r0, #0
   100ba:	d003      	beq.n	100c4 <update_kalman_limits+0x70>
		kalmanAY_min = ayKalman;
   100bc:	4b3e      	ldr	r3, [pc, #248]	; (101b8 <update_kalman_limits+0x164>)
   100be:	681a      	ldr	r2, [r3, #0]
   100c0:	4b3f      	ldr	r3, [pc, #252]	; (101c0 <update_kalman_limits+0x16c>)
   100c2:	601a      	str	r2, [r3, #0]

	if(azKalman > kalmanAZ_max)
   100c4:	4b3f      	ldr	r3, [pc, #252]	; (101c4 <update_kalman_limits+0x170>)
   100c6:	681a      	ldr	r2, [r3, #0]
   100c8:	4b3f      	ldr	r3, [pc, #252]	; (101c8 <update_kalman_limits+0x174>)
   100ca:	6819      	ldr	r1, [r3, #0]
   100cc:	4b37      	ldr	r3, [pc, #220]	; (101ac <update_kalman_limits+0x158>)
   100ce:	1c10      	adds	r0, r2, #0
   100d0:	4798      	blx	r3
   100d2:	1e03      	subs	r3, r0, #0
   100d4:	d004      	beq.n	100e0 <update_kalman_limits+0x8c>
		kalmanAZ_max = azKalman;
   100d6:	4b3b      	ldr	r3, [pc, #236]	; (101c4 <update_kalman_limits+0x170>)
   100d8:	681a      	ldr	r2, [r3, #0]
   100da:	4b3b      	ldr	r3, [pc, #236]	; (101c8 <update_kalman_limits+0x174>)
   100dc:	601a      	str	r2, [r3, #0]
   100de:	e00c      	b.n	100fa <update_kalman_limits+0xa6>
	else if(azKalman < kalmanAZ_min)
   100e0:	4b38      	ldr	r3, [pc, #224]	; (101c4 <update_kalman_limits+0x170>)
   100e2:	681a      	ldr	r2, [r3, #0]
   100e4:	4b39      	ldr	r3, [pc, #228]	; (101cc <update_kalman_limits+0x178>)
   100e6:	6819      	ldr	r1, [r3, #0]
   100e8:	4b32      	ldr	r3, [pc, #200]	; (101b4 <update_kalman_limits+0x160>)
   100ea:	1c10      	adds	r0, r2, #0
   100ec:	4798      	blx	r3
   100ee:	1e03      	subs	r3, r0, #0
   100f0:	d003      	beq.n	100fa <update_kalman_limits+0xa6>
		kalmanAZ_min = azKalman;
   100f2:	4b34      	ldr	r3, [pc, #208]	; (101c4 <update_kalman_limits+0x170>)
   100f4:	681a      	ldr	r2, [r3, #0]
   100f6:	4b35      	ldr	r3, [pc, #212]	; (101cc <update_kalman_limits+0x178>)
   100f8:	601a      	str	r2, [r3, #0]
	
	if(gxKalman > kalmanGX_max)
   100fa:	4b35      	ldr	r3, [pc, #212]	; (101d0 <update_kalman_limits+0x17c>)
   100fc:	681a      	ldr	r2, [r3, #0]
   100fe:	4b35      	ldr	r3, [pc, #212]	; (101d4 <update_kalman_limits+0x180>)
   10100:	6819      	ldr	r1, [r3, #0]
   10102:	4b2a      	ldr	r3, [pc, #168]	; (101ac <update_kalman_limits+0x158>)
   10104:	1c10      	adds	r0, r2, #0
   10106:	4798      	blx	r3
   10108:	1e03      	subs	r3, r0, #0
   1010a:	d004      	beq.n	10116 <update_kalman_limits+0xc2>
		kalmanGX_max = gxKalman;
   1010c:	4b30      	ldr	r3, [pc, #192]	; (101d0 <update_kalman_limits+0x17c>)
   1010e:	681a      	ldr	r2, [r3, #0]
   10110:	4b30      	ldr	r3, [pc, #192]	; (101d4 <update_kalman_limits+0x180>)
   10112:	601a      	str	r2, [r3, #0]
   10114:	e00c      	b.n	10130 <update_kalman_limits+0xdc>
	else if(gxKalman < kalmanGX_min)
   10116:	4b2e      	ldr	r3, [pc, #184]	; (101d0 <update_kalman_limits+0x17c>)
   10118:	681a      	ldr	r2, [r3, #0]
   1011a:	4b2f      	ldr	r3, [pc, #188]	; (101d8 <update_kalman_limits+0x184>)
   1011c:	6819      	ldr	r1, [r3, #0]
   1011e:	4b25      	ldr	r3, [pc, #148]	; (101b4 <update_kalman_limits+0x160>)
   10120:	1c10      	adds	r0, r2, #0
   10122:	4798      	blx	r3
   10124:	1e03      	subs	r3, r0, #0
   10126:	d003      	beq.n	10130 <update_kalman_limits+0xdc>
		kalmanGX_min = gxKalman;
   10128:	4b29      	ldr	r3, [pc, #164]	; (101d0 <update_kalman_limits+0x17c>)
   1012a:	681a      	ldr	r2, [r3, #0]
   1012c:	4b2a      	ldr	r3, [pc, #168]	; (101d8 <update_kalman_limits+0x184>)
   1012e:	601a      	str	r2, [r3, #0]

	if(gyKalman > kalmanGY_max)
   10130:	4b2a      	ldr	r3, [pc, #168]	; (101dc <update_kalman_limits+0x188>)
   10132:	681a      	ldr	r2, [r3, #0]
   10134:	4b2a      	ldr	r3, [pc, #168]	; (101e0 <update_kalman_limits+0x18c>)
   10136:	6819      	ldr	r1, [r3, #0]
   10138:	4b1c      	ldr	r3, [pc, #112]	; (101ac <update_kalman_limits+0x158>)
   1013a:	1c10      	adds	r0, r2, #0
   1013c:	4798      	blx	r3
   1013e:	1e03      	subs	r3, r0, #0
   10140:	d004      	beq.n	1014c <update_kalman_limits+0xf8>
		kalmanGY_max = gyKalman;
   10142:	4b26      	ldr	r3, [pc, #152]	; (101dc <update_kalman_limits+0x188>)
   10144:	681a      	ldr	r2, [r3, #0]
   10146:	4b26      	ldr	r3, [pc, #152]	; (101e0 <update_kalman_limits+0x18c>)
   10148:	601a      	str	r2, [r3, #0]
   1014a:	e00c      	b.n	10166 <update_kalman_limits+0x112>
	else if(gyKalman < kalmanGY_min)
   1014c:	4b23      	ldr	r3, [pc, #140]	; (101dc <update_kalman_limits+0x188>)
   1014e:	681a      	ldr	r2, [r3, #0]
   10150:	4b24      	ldr	r3, [pc, #144]	; (101e4 <update_kalman_limits+0x190>)
   10152:	6819      	ldr	r1, [r3, #0]
   10154:	4b17      	ldr	r3, [pc, #92]	; (101b4 <update_kalman_limits+0x160>)
   10156:	1c10      	adds	r0, r2, #0
   10158:	4798      	blx	r3
   1015a:	1e03      	subs	r3, r0, #0
   1015c:	d003      	beq.n	10166 <update_kalman_limits+0x112>
		kalmanGY_min = gyKalman;
   1015e:	4b1f      	ldr	r3, [pc, #124]	; (101dc <update_kalman_limits+0x188>)
   10160:	681a      	ldr	r2, [r3, #0]
   10162:	4b20      	ldr	r3, [pc, #128]	; (101e4 <update_kalman_limits+0x190>)
   10164:	601a      	str	r2, [r3, #0]

	if(gzKalman > kalmanAZ_max)
   10166:	4b20      	ldr	r3, [pc, #128]	; (101e8 <update_kalman_limits+0x194>)
   10168:	681a      	ldr	r2, [r3, #0]
   1016a:	4b17      	ldr	r3, [pc, #92]	; (101c8 <update_kalman_limits+0x174>)
   1016c:	6819      	ldr	r1, [r3, #0]
   1016e:	4b0f      	ldr	r3, [pc, #60]	; (101ac <update_kalman_limits+0x158>)
   10170:	1c10      	adds	r0, r2, #0
   10172:	4798      	blx	r3
   10174:	1e03      	subs	r3, r0, #0
   10176:	d004      	beq.n	10182 <update_kalman_limits+0x12e>
		kalmanGZ_max = gzKalman;
   10178:	4b1b      	ldr	r3, [pc, #108]	; (101e8 <update_kalman_limits+0x194>)
   1017a:	681a      	ldr	r2, [r3, #0]
   1017c:	4b1b      	ldr	r3, [pc, #108]	; (101ec <update_kalman_limits+0x198>)
   1017e:	601a      	str	r2, [r3, #0]
	else if(gzKalman < kalmanGZ_min)
		kalmanGZ_min = gzKalman;
}
   10180:	e00d      	b.n	1019e <update_kalman_limits+0x14a>
	else if(gzKalman < kalmanGZ_min)
   10182:	4b19      	ldr	r3, [pc, #100]	; (101e8 <update_kalman_limits+0x194>)
   10184:	681a      	ldr	r2, [r3, #0]
   10186:	4b1a      	ldr	r3, [pc, #104]	; (101f0 <update_kalman_limits+0x19c>)
   10188:	6819      	ldr	r1, [r3, #0]
   1018a:	4b0a      	ldr	r3, [pc, #40]	; (101b4 <update_kalman_limits+0x160>)
   1018c:	1c10      	adds	r0, r2, #0
   1018e:	4798      	blx	r3
   10190:	1e03      	subs	r3, r0, #0
   10192:	d100      	bne.n	10196 <update_kalman_limits+0x142>
}
   10194:	e003      	b.n	1019e <update_kalman_limits+0x14a>
		kalmanGZ_min = gzKalman;
   10196:	4b14      	ldr	r3, [pc, #80]	; (101e8 <update_kalman_limits+0x194>)
   10198:	681a      	ldr	r2, [r3, #0]
   1019a:	4b15      	ldr	r3, [pc, #84]	; (101f0 <update_kalman_limits+0x19c>)
   1019c:	601a      	str	r2, [r3, #0]
}
   1019e:	46c0      	nop			; (mov r8, r8)
   101a0:	46bd      	mov	sp, r7
   101a2:	bd80      	pop	{r7, pc}
   101a4:	20000338 	.word	0x20000338
   101a8:	20000008 	.word	0x20000008
   101ac:	000187c1 	.word	0x000187c1
   101b0:	20000004 	.word	0x20000004
   101b4:	00018799 	.word	0x00018799
   101b8:	2000033c 	.word	0x2000033c
   101bc:	20000010 	.word	0x20000010
   101c0:	2000000c 	.word	0x2000000c
   101c4:	20000340 	.word	0x20000340
   101c8:	20000018 	.word	0x20000018
   101cc:	20000014 	.word	0x20000014
   101d0:	20000344 	.word	0x20000344
   101d4:	20000020 	.word	0x20000020
   101d8:	2000001c 	.word	0x2000001c
   101dc:	20000348 	.word	0x20000348
   101e0:	20000028 	.word	0x20000028
   101e4:	20000024 	.word	0x20000024
   101e8:	2000034c 	.word	0x2000034c
   101ec:	20000030 	.word	0x20000030
   101f0:	2000002c 	.word	0x2000002c

000101f4 <averageAX>:

int16_t averageAX(){
   101f4:	b580      	push	{r7, lr}
   101f6:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	AXtotal -= AXaverage[sample_index];
   101f8:	4b18      	ldr	r3, [pc, #96]	; (1025c <averageAX+0x68>)
   101fa:	681a      	ldr	r2, [r3, #0]
   101fc:	4b18      	ldr	r3, [pc, #96]	; (10260 <averageAX+0x6c>)
   101fe:	6819      	ldr	r1, [r3, #0]
   10200:	4b18      	ldr	r3, [pc, #96]	; (10264 <averageAX+0x70>)
   10202:	0049      	lsls	r1, r1, #1
   10204:	5ecb      	ldrsh	r3, [r1, r3]
   10206:	1ad2      	subs	r2, r2, r3
   10208:	4b14      	ldr	r3, [pc, #80]	; (1025c <averageAX+0x68>)
   1020a:	601a      	str	r2, [r3, #0]
	AXtotal += cax;
   1020c:	4b16      	ldr	r3, [pc, #88]	; (10268 <averageAX+0x74>)
   1020e:	2200      	movs	r2, #0
   10210:	5e9b      	ldrsh	r3, [r3, r2]
   10212:	001a      	movs	r2, r3
   10214:	4b11      	ldr	r3, [pc, #68]	; (1025c <averageAX+0x68>)
   10216:	681b      	ldr	r3, [r3, #0]
   10218:	18d2      	adds	r2, r2, r3
   1021a:	4b10      	ldr	r3, [pc, #64]	; (1025c <averageAX+0x68>)
   1021c:	601a      	str	r2, [r3, #0]
	AXaverage[sample_index] = cax;
   1021e:	4b10      	ldr	r3, [pc, #64]	; (10260 <averageAX+0x6c>)
   10220:	681a      	ldr	r2, [r3, #0]
   10222:	4b11      	ldr	r3, [pc, #68]	; (10268 <averageAX+0x74>)
   10224:	2100      	movs	r1, #0
   10226:	5e59      	ldrsh	r1, [r3, r1]
   10228:	4b0e      	ldr	r3, [pc, #56]	; (10264 <averageAX+0x70>)
   1022a:	0052      	lsls	r2, r2, #1
   1022c:	52d1      	strh	r1, [r2, r3]
	
	sample_index++;
   1022e:	4b0c      	ldr	r3, [pc, #48]	; (10260 <averageAX+0x6c>)
   10230:	681b      	ldr	r3, [r3, #0]
   10232:	1c5a      	adds	r2, r3, #1
   10234:	4b0a      	ldr	r3, [pc, #40]	; (10260 <averageAX+0x6c>)
   10236:	601a      	str	r2, [r3, #0]
	if(sample_index == ACCELXYsamples)
   10238:	4b09      	ldr	r3, [pc, #36]	; (10260 <averageAX+0x6c>)
   1023a:	681b      	ldr	r3, [r3, #0]
   1023c:	2b64      	cmp	r3, #100	; 0x64
   1023e:	d102      	bne.n	10246 <averageAX+0x52>
	sample_index = 0;
   10240:	4b07      	ldr	r3, [pc, #28]	; (10260 <averageAX+0x6c>)
   10242:	2200      	movs	r2, #0
   10244:	601a      	str	r2, [r3, #0]

	return (int16_t)(AXtotal/ACCELXYsamples);
   10246:	4b05      	ldr	r3, [pc, #20]	; (1025c <averageAX+0x68>)
   10248:	681a      	ldr	r2, [r3, #0]
   1024a:	4b08      	ldr	r3, [pc, #32]	; (1026c <averageAX+0x78>)
   1024c:	2164      	movs	r1, #100	; 0x64
   1024e:	0010      	movs	r0, r2
   10250:	4798      	blx	r3
   10252:	0003      	movs	r3, r0
   10254:	b21b      	sxth	r3, r3
}
   10256:	0018      	movs	r0, r3
   10258:	46bd      	mov	sp, r7
   1025a:	bd80      	pop	{r7, pc}
   1025c:	2000030c 	.word	0x2000030c
   10260:	20000464 	.word	0x20000464
   10264:	20001124 	.word	0x20001124
   10268:	200003bc 	.word	0x200003bc
   1026c:	00018521 	.word	0x00018521

00010270 <averageAY>:

int16_t averageAY(){
   10270:	b580      	push	{r7, lr}
   10272:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	AYtotal -= AYaverage[sample_index];
   10274:	4b18      	ldr	r3, [pc, #96]	; (102d8 <averageAY+0x68>)
   10276:	681a      	ldr	r2, [r3, #0]
   10278:	4b18      	ldr	r3, [pc, #96]	; (102dc <averageAY+0x6c>)
   1027a:	6819      	ldr	r1, [r3, #0]
   1027c:	4b18      	ldr	r3, [pc, #96]	; (102e0 <averageAY+0x70>)
   1027e:	0049      	lsls	r1, r1, #1
   10280:	5ecb      	ldrsh	r3, [r1, r3]
   10282:	1ad2      	subs	r2, r2, r3
   10284:	4b14      	ldr	r3, [pc, #80]	; (102d8 <averageAY+0x68>)
   10286:	601a      	str	r2, [r3, #0]
	AYtotal += cay;
   10288:	4b16      	ldr	r3, [pc, #88]	; (102e4 <averageAY+0x74>)
   1028a:	2200      	movs	r2, #0
   1028c:	5e9b      	ldrsh	r3, [r3, r2]
   1028e:	001a      	movs	r2, r3
   10290:	4b11      	ldr	r3, [pc, #68]	; (102d8 <averageAY+0x68>)
   10292:	681b      	ldr	r3, [r3, #0]
   10294:	18d2      	adds	r2, r2, r3
   10296:	4b10      	ldr	r3, [pc, #64]	; (102d8 <averageAY+0x68>)
   10298:	601a      	str	r2, [r3, #0]
	AYaverage[sample_index] = cay;
   1029a:	4b10      	ldr	r3, [pc, #64]	; (102dc <averageAY+0x6c>)
   1029c:	681a      	ldr	r2, [r3, #0]
   1029e:	4b11      	ldr	r3, [pc, #68]	; (102e4 <averageAY+0x74>)
   102a0:	2100      	movs	r1, #0
   102a2:	5e59      	ldrsh	r1, [r3, r1]
   102a4:	4b0e      	ldr	r3, [pc, #56]	; (102e0 <averageAY+0x70>)
   102a6:	0052      	lsls	r2, r2, #1
   102a8:	52d1      	strh	r1, [r2, r3]
	
	sample_index++;
   102aa:	4b0c      	ldr	r3, [pc, #48]	; (102dc <averageAY+0x6c>)
   102ac:	681b      	ldr	r3, [r3, #0]
   102ae:	1c5a      	adds	r2, r3, #1
   102b0:	4b0a      	ldr	r3, [pc, #40]	; (102dc <averageAY+0x6c>)
   102b2:	601a      	str	r2, [r3, #0]
	if(sample_index == ACCELXYsamples)
   102b4:	4b09      	ldr	r3, [pc, #36]	; (102dc <averageAY+0x6c>)
   102b6:	681b      	ldr	r3, [r3, #0]
   102b8:	2b64      	cmp	r3, #100	; 0x64
   102ba:	d102      	bne.n	102c2 <averageAY+0x52>
	sample_index = 0;
   102bc:	4b07      	ldr	r3, [pc, #28]	; (102dc <averageAY+0x6c>)
   102be:	2200      	movs	r2, #0
   102c0:	601a      	str	r2, [r3, #0]

	return (int16_t)(AYtotal/ACCELXYsamples);
   102c2:	4b05      	ldr	r3, [pc, #20]	; (102d8 <averageAY+0x68>)
   102c4:	681a      	ldr	r2, [r3, #0]
   102c6:	4b08      	ldr	r3, [pc, #32]	; (102e8 <averageAY+0x78>)
   102c8:	2164      	movs	r1, #100	; 0x64
   102ca:	0010      	movs	r0, r2
   102cc:	4798      	blx	r3
   102ce:	0003      	movs	r3, r0
   102d0:	b21b      	sxth	r3, r3
}
   102d2:	0018      	movs	r0, r3
   102d4:	46bd      	mov	sp, r7
   102d6:	bd80      	pop	{r7, pc}
   102d8:	20000310 	.word	0x20000310
   102dc:	20000468 	.word	0x20000468
   102e0:	2000103c 	.word	0x2000103c
   102e4:	200003be 	.word	0x200003be
   102e8:	00018521 	.word	0x00018521

000102ec <averageAZ>:

int16_t averageAZ(){
   102ec:	b580      	push	{r7, lr}
   102ee:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	AZtotal -= AZaverage[sample_index];
   102f0:	4b18      	ldr	r3, [pc, #96]	; (10354 <averageAZ+0x68>)
   102f2:	681a      	ldr	r2, [r3, #0]
   102f4:	4b18      	ldr	r3, [pc, #96]	; (10358 <averageAZ+0x6c>)
   102f6:	6819      	ldr	r1, [r3, #0]
   102f8:	4b18      	ldr	r3, [pc, #96]	; (1035c <averageAZ+0x70>)
   102fa:	0049      	lsls	r1, r1, #1
   102fc:	5ecb      	ldrsh	r3, [r1, r3]
   102fe:	1ad2      	subs	r2, r2, r3
   10300:	4b14      	ldr	r3, [pc, #80]	; (10354 <averageAZ+0x68>)
   10302:	601a      	str	r2, [r3, #0]
	AZtotal += caz;
   10304:	4b16      	ldr	r3, [pc, #88]	; (10360 <averageAZ+0x74>)
   10306:	2200      	movs	r2, #0
   10308:	5e9b      	ldrsh	r3, [r3, r2]
   1030a:	001a      	movs	r2, r3
   1030c:	4b11      	ldr	r3, [pc, #68]	; (10354 <averageAZ+0x68>)
   1030e:	681b      	ldr	r3, [r3, #0]
   10310:	18d2      	adds	r2, r2, r3
   10312:	4b10      	ldr	r3, [pc, #64]	; (10354 <averageAZ+0x68>)
   10314:	601a      	str	r2, [r3, #0]
	AZaverage[sample_index] = caz;
   10316:	4b10      	ldr	r3, [pc, #64]	; (10358 <averageAZ+0x6c>)
   10318:	681a      	ldr	r2, [r3, #0]
   1031a:	4b11      	ldr	r3, [pc, #68]	; (10360 <averageAZ+0x74>)
   1031c:	2100      	movs	r1, #0
   1031e:	5e59      	ldrsh	r1, [r3, r1]
   10320:	4b0e      	ldr	r3, [pc, #56]	; (1035c <averageAZ+0x70>)
   10322:	0052      	lsls	r2, r2, #1
   10324:	52d1      	strh	r1, [r2, r3]

	sample_index++;
   10326:	4b0c      	ldr	r3, [pc, #48]	; (10358 <averageAZ+0x6c>)
   10328:	681b      	ldr	r3, [r3, #0]
   1032a:	1c5a      	adds	r2, r3, #1
   1032c:	4b0a      	ldr	r3, [pc, #40]	; (10358 <averageAZ+0x6c>)
   1032e:	601a      	str	r2, [r3, #0]
	if(sample_index == ACCELZsamples)
   10330:	4b09      	ldr	r3, [pc, #36]	; (10358 <averageAZ+0x6c>)
   10332:	681b      	ldr	r3, [r3, #0]
   10334:	2b96      	cmp	r3, #150	; 0x96
   10336:	d102      	bne.n	1033e <averageAZ+0x52>
	sample_index = 0;
   10338:	4b07      	ldr	r3, [pc, #28]	; (10358 <averageAZ+0x6c>)
   1033a:	2200      	movs	r2, #0
   1033c:	601a      	str	r2, [r3, #0]

	return (int16_t)(AZtotal/ACCELZsamples);
   1033e:	4b05      	ldr	r3, [pc, #20]	; (10354 <averageAZ+0x68>)
   10340:	681a      	ldr	r2, [r3, #0]
   10342:	4b08      	ldr	r3, [pc, #32]	; (10364 <averageAZ+0x78>)
   10344:	2196      	movs	r1, #150	; 0x96
   10346:	0010      	movs	r0, r2
   10348:	4798      	blx	r3
   1034a:	0003      	movs	r3, r0
   1034c:	b21b      	sxth	r3, r3
}
   1034e:	0018      	movs	r0, r3
   10350:	46bd      	mov	sp, r7
   10352:	bd80      	pop	{r7, pc}
   10354:	20000314 	.word	0x20000314
   10358:	2000046c 	.word	0x2000046c
   1035c:	20000e58 	.word	0x20000e58
   10360:	200003c0 	.word	0x200003c0
   10364:	00018521 	.word	0x00018521

00010368 <averageGX>:

float averageGX(){
   10368:	b5b0      	push	{r4, r5, r7, lr}
   1036a:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	GXtotal -= GXaverage[sample_index];
   1036c:	4b1f      	ldr	r3, [pc, #124]	; (103ec <averageGX+0x84>)
   1036e:	6818      	ldr	r0, [r3, #0]
   10370:	4b1f      	ldr	r3, [pc, #124]	; (103f0 <averageGX+0x88>)
   10372:	681a      	ldr	r2, [r3, #0]
   10374:	4b1f      	ldr	r3, [pc, #124]	; (103f4 <averageGX+0x8c>)
   10376:	0092      	lsls	r2, r2, #2
   10378:	58d2      	ldr	r2, [r2, r3]
   1037a:	4b1f      	ldr	r3, [pc, #124]	; (103f8 <averageGX+0x90>)
   1037c:	1c11      	adds	r1, r2, #0
   1037e:	4798      	blx	r3
   10380:	1c03      	adds	r3, r0, #0
   10382:	1c1a      	adds	r2, r3, #0
   10384:	4b19      	ldr	r3, [pc, #100]	; (103ec <averageGX+0x84>)
   10386:	601a      	str	r2, [r3, #0]
	GXtotal += calcGyro(cgx);
   10388:	4b1c      	ldr	r3, [pc, #112]	; (103fc <averageGX+0x94>)
   1038a:	2200      	movs	r2, #0
   1038c:	5e9b      	ldrsh	r3, [r3, r2]
   1038e:	0018      	movs	r0, r3
   10390:	4b1b      	ldr	r3, [pc, #108]	; (10400 <averageGX+0x98>)
   10392:	4798      	blx	r3
   10394:	4b15      	ldr	r3, [pc, #84]	; (103ec <averageGX+0x84>)
   10396:	681a      	ldr	r2, [r3, #0]
   10398:	4b1a      	ldr	r3, [pc, #104]	; (10404 <averageGX+0x9c>)
   1039a:	1c11      	adds	r1, r2, #0
   1039c:	4798      	blx	r3
   1039e:	1c03      	adds	r3, r0, #0
   103a0:	1c1a      	adds	r2, r3, #0
   103a2:	4b12      	ldr	r3, [pc, #72]	; (103ec <averageGX+0x84>)
   103a4:	601a      	str	r2, [r3, #0]
	GXaverage[sample_index] = calcGyro(cgx);
   103a6:	4b12      	ldr	r3, [pc, #72]	; (103f0 <averageGX+0x88>)
   103a8:	681c      	ldr	r4, [r3, #0]
   103aa:	4b14      	ldr	r3, [pc, #80]	; (103fc <averageGX+0x94>)
   103ac:	2200      	movs	r2, #0
   103ae:	5e9b      	ldrsh	r3, [r3, r2]
   103b0:	0018      	movs	r0, r3
   103b2:	4b13      	ldr	r3, [pc, #76]	; (10400 <averageGX+0x98>)
   103b4:	4798      	blx	r3
   103b6:	1c01      	adds	r1, r0, #0
   103b8:	4b0e      	ldr	r3, [pc, #56]	; (103f4 <averageGX+0x8c>)
   103ba:	00a2      	lsls	r2, r4, #2
   103bc:	50d1      	str	r1, [r2, r3]

	sample_index++;
   103be:	4b0c      	ldr	r3, [pc, #48]	; (103f0 <averageGX+0x88>)
   103c0:	681b      	ldr	r3, [r3, #0]
   103c2:	1c5a      	adds	r2, r3, #1
   103c4:	4b0a      	ldr	r3, [pc, #40]	; (103f0 <averageGX+0x88>)
   103c6:	601a      	str	r2, [r3, #0]
	if(sample_index == GYROsamples)
   103c8:	4b09      	ldr	r3, [pc, #36]	; (103f0 <averageGX+0x88>)
   103ca:	681b      	ldr	r3, [r3, #0]
   103cc:	2b05      	cmp	r3, #5
   103ce:	d102      	bne.n	103d6 <averageGX+0x6e>
	sample_index = 0;
   103d0:	4b07      	ldr	r3, [pc, #28]	; (103f0 <averageGX+0x88>)
   103d2:	2200      	movs	r2, #0
   103d4:	601a      	str	r2, [r3, #0]

	return (GXtotal/GYROsamples);
   103d6:	4b05      	ldr	r3, [pc, #20]	; (103ec <averageGX+0x84>)
   103d8:	681a      	ldr	r2, [r3, #0]
   103da:	4b0b      	ldr	r3, [pc, #44]	; (10408 <averageGX+0xa0>)
   103dc:	490b      	ldr	r1, [pc, #44]	; (1040c <averageGX+0xa4>)
   103de:	1c10      	adds	r0, r2, #0
   103e0:	4798      	blx	r3
   103e2:	1c03      	adds	r3, r0, #0
}
   103e4:	1c18      	adds	r0, r3, #0
   103e6:	46bd      	mov	sp, r7
   103e8:	bdb0      	pop	{r4, r5, r7, pc}
   103ea:	46c0      	nop			; (mov r8, r8)
   103ec:	20000318 	.word	0x20000318
   103f0:	20000470 	.word	0x20000470
   103f4:	20001a9c 	.word	0x20001a9c
   103f8:	000191ed 	.word	0x000191ed
   103fc:	200003b6 	.word	0x200003b6
   10400:	0000ed75 	.word	0x0000ed75
   10404:	000188a9 	.word	0x000188a9
   10408:	00018bcd 	.word	0x00018bcd
   1040c:	40a00000 	.word	0x40a00000

00010410 <averageGY>:

float averageGY(){
   10410:	b5b0      	push	{r4, r5, r7, lr}
   10412:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	GYtotal -= GYaverage[sample_index];
   10414:	4b1f      	ldr	r3, [pc, #124]	; (10494 <averageGY+0x84>)
   10416:	6818      	ldr	r0, [r3, #0]
   10418:	4b1f      	ldr	r3, [pc, #124]	; (10498 <averageGY+0x88>)
   1041a:	681a      	ldr	r2, [r3, #0]
   1041c:	4b1f      	ldr	r3, [pc, #124]	; (1049c <averageGY+0x8c>)
   1041e:	0092      	lsls	r2, r2, #2
   10420:	58d2      	ldr	r2, [r2, r3]
   10422:	4b1f      	ldr	r3, [pc, #124]	; (104a0 <averageGY+0x90>)
   10424:	1c11      	adds	r1, r2, #0
   10426:	4798      	blx	r3
   10428:	1c03      	adds	r3, r0, #0
   1042a:	1c1a      	adds	r2, r3, #0
   1042c:	4b19      	ldr	r3, [pc, #100]	; (10494 <averageGY+0x84>)
   1042e:	601a      	str	r2, [r3, #0]
	GYtotal += calcGyro(cgy);
   10430:	4b1c      	ldr	r3, [pc, #112]	; (104a4 <averageGY+0x94>)
   10432:	2200      	movs	r2, #0
   10434:	5e9b      	ldrsh	r3, [r3, r2]
   10436:	0018      	movs	r0, r3
   10438:	4b1b      	ldr	r3, [pc, #108]	; (104a8 <averageGY+0x98>)
   1043a:	4798      	blx	r3
   1043c:	4b15      	ldr	r3, [pc, #84]	; (10494 <averageGY+0x84>)
   1043e:	681a      	ldr	r2, [r3, #0]
   10440:	4b1a      	ldr	r3, [pc, #104]	; (104ac <averageGY+0x9c>)
   10442:	1c11      	adds	r1, r2, #0
   10444:	4798      	blx	r3
   10446:	1c03      	adds	r3, r0, #0
   10448:	1c1a      	adds	r2, r3, #0
   1044a:	4b12      	ldr	r3, [pc, #72]	; (10494 <averageGY+0x84>)
   1044c:	601a      	str	r2, [r3, #0]
	GYaverage[sample_index] = calcGyro(cgy);
   1044e:	4b12      	ldr	r3, [pc, #72]	; (10498 <averageGY+0x88>)
   10450:	681c      	ldr	r4, [r3, #0]
   10452:	4b14      	ldr	r3, [pc, #80]	; (104a4 <averageGY+0x94>)
   10454:	2200      	movs	r2, #0
   10456:	5e9b      	ldrsh	r3, [r3, r2]
   10458:	0018      	movs	r0, r3
   1045a:	4b13      	ldr	r3, [pc, #76]	; (104a8 <averageGY+0x98>)
   1045c:	4798      	blx	r3
   1045e:	1c01      	adds	r1, r0, #0
   10460:	4b0e      	ldr	r3, [pc, #56]	; (1049c <averageGY+0x8c>)
   10462:	00a2      	lsls	r2, r4, #2
   10464:	50d1      	str	r1, [r2, r3]

	sample_index++;
   10466:	4b0c      	ldr	r3, [pc, #48]	; (10498 <averageGY+0x88>)
   10468:	681b      	ldr	r3, [r3, #0]
   1046a:	1c5a      	adds	r2, r3, #1
   1046c:	4b0a      	ldr	r3, [pc, #40]	; (10498 <averageGY+0x88>)
   1046e:	601a      	str	r2, [r3, #0]
	if(sample_index == GYROsamples)
   10470:	4b09      	ldr	r3, [pc, #36]	; (10498 <averageGY+0x88>)
   10472:	681b      	ldr	r3, [r3, #0]
   10474:	2b05      	cmp	r3, #5
   10476:	d102      	bne.n	1047e <averageGY+0x6e>
	sample_index = 0;
   10478:	4b07      	ldr	r3, [pc, #28]	; (10498 <averageGY+0x88>)
   1047a:	2200      	movs	r2, #0
   1047c:	601a      	str	r2, [r3, #0]

	return (GYtotal/GYROsamples);
   1047e:	4b05      	ldr	r3, [pc, #20]	; (10494 <averageGY+0x84>)
   10480:	681a      	ldr	r2, [r3, #0]
   10482:	4b0b      	ldr	r3, [pc, #44]	; (104b0 <averageGY+0xa0>)
   10484:	490b      	ldr	r1, [pc, #44]	; (104b4 <averageGY+0xa4>)
   10486:	1c10      	adds	r0, r2, #0
   10488:	4798      	blx	r3
   1048a:	1c03      	adds	r3, r0, #0
}
   1048c:	1c18      	adds	r0, r3, #0
   1048e:	46bd      	mov	sp, r7
   10490:	bdb0      	pop	{r4, r5, r7, pc}
   10492:	46c0      	nop			; (mov r8, r8)
   10494:	2000031c 	.word	0x2000031c
   10498:	20000474 	.word	0x20000474
   1049c:	20000fb0 	.word	0x20000fb0
   104a0:	000191ed 	.word	0x000191ed
   104a4:	200003b8 	.word	0x200003b8
   104a8:	0000ed75 	.word	0x0000ed75
   104ac:	000188a9 	.word	0x000188a9
   104b0:	00018bcd 	.word	0x00018bcd
   104b4:	40a00000 	.word	0x40a00000

000104b8 <averageGZ>:

float averageGZ(){
   104b8:	b5b0      	push	{r4, r5, r7, lr}
   104ba:	af00      	add	r7, sp, #0
	static int sample_index = 0;
	GZtotal -= GZaverage[sample_index];
   104bc:	4b1f      	ldr	r3, [pc, #124]	; (1053c <averageGZ+0x84>)
   104be:	6818      	ldr	r0, [r3, #0]
   104c0:	4b1f      	ldr	r3, [pc, #124]	; (10540 <averageGZ+0x88>)
   104c2:	681a      	ldr	r2, [r3, #0]
   104c4:	4b1f      	ldr	r3, [pc, #124]	; (10544 <averageGZ+0x8c>)
   104c6:	0092      	lsls	r2, r2, #2
   104c8:	58d2      	ldr	r2, [r2, r3]
   104ca:	4b1f      	ldr	r3, [pc, #124]	; (10548 <averageGZ+0x90>)
   104cc:	1c11      	adds	r1, r2, #0
   104ce:	4798      	blx	r3
   104d0:	1c03      	adds	r3, r0, #0
   104d2:	1c1a      	adds	r2, r3, #0
   104d4:	4b19      	ldr	r3, [pc, #100]	; (1053c <averageGZ+0x84>)
   104d6:	601a      	str	r2, [r3, #0]
	GZtotal += calcGyro(cgz);
   104d8:	4b1c      	ldr	r3, [pc, #112]	; (1054c <averageGZ+0x94>)
   104da:	2200      	movs	r2, #0
   104dc:	5e9b      	ldrsh	r3, [r3, r2]
   104de:	0018      	movs	r0, r3
   104e0:	4b1b      	ldr	r3, [pc, #108]	; (10550 <averageGZ+0x98>)
   104e2:	4798      	blx	r3
   104e4:	4b15      	ldr	r3, [pc, #84]	; (1053c <averageGZ+0x84>)
   104e6:	681a      	ldr	r2, [r3, #0]
   104e8:	4b1a      	ldr	r3, [pc, #104]	; (10554 <averageGZ+0x9c>)
   104ea:	1c11      	adds	r1, r2, #0
   104ec:	4798      	blx	r3
   104ee:	1c03      	adds	r3, r0, #0
   104f0:	1c1a      	adds	r2, r3, #0
   104f2:	4b12      	ldr	r3, [pc, #72]	; (1053c <averageGZ+0x84>)
   104f4:	601a      	str	r2, [r3, #0]
	GZaverage[sample_index] = calcGyro(cgz);
   104f6:	4b12      	ldr	r3, [pc, #72]	; (10540 <averageGZ+0x88>)
   104f8:	681c      	ldr	r4, [r3, #0]
   104fa:	4b14      	ldr	r3, [pc, #80]	; (1054c <averageGZ+0x94>)
   104fc:	2200      	movs	r2, #0
   104fe:	5e9b      	ldrsh	r3, [r3, r2]
   10500:	0018      	movs	r0, r3
   10502:	4b13      	ldr	r3, [pc, #76]	; (10550 <averageGZ+0x98>)
   10504:	4798      	blx	r3
   10506:	1c01      	adds	r1, r0, #0
   10508:	4b0e      	ldr	r3, [pc, #56]	; (10544 <averageGZ+0x8c>)
   1050a:	00a2      	lsls	r2, r4, #2
   1050c:	50d1      	str	r1, [r2, r3]

	sample_index++;
   1050e:	4b0c      	ldr	r3, [pc, #48]	; (10540 <averageGZ+0x88>)
   10510:	681b      	ldr	r3, [r3, #0]
   10512:	1c5a      	adds	r2, r3, #1
   10514:	4b0a      	ldr	r3, [pc, #40]	; (10540 <averageGZ+0x88>)
   10516:	601a      	str	r2, [r3, #0]
	if(sample_index == GYROsamples)
   10518:	4b09      	ldr	r3, [pc, #36]	; (10540 <averageGZ+0x88>)
   1051a:	681b      	ldr	r3, [r3, #0]
   1051c:	2b05      	cmp	r3, #5
   1051e:	d102      	bne.n	10526 <averageGZ+0x6e>
	sample_index = 0;
   10520:	4b07      	ldr	r3, [pc, #28]	; (10540 <averageGZ+0x88>)
   10522:	2200      	movs	r2, #0
   10524:	601a      	str	r2, [r3, #0]

	return (GZtotal/GYROsamples);
   10526:	4b05      	ldr	r3, [pc, #20]	; (1053c <averageGZ+0x84>)
   10528:	681a      	ldr	r2, [r3, #0]
   1052a:	4b0b      	ldr	r3, [pc, #44]	; (10558 <averageGZ+0xa0>)
   1052c:	490b      	ldr	r1, [pc, #44]	; (1055c <averageGZ+0xa4>)
   1052e:	1c10      	adds	r0, r2, #0
   10530:	4798      	blx	r3
   10532:	1c03      	adds	r3, r0, #0
}
   10534:	1c18      	adds	r0, r3, #0
   10536:	46bd      	mov	sp, r7
   10538:	bdb0      	pop	{r4, r5, r7, pc}
   1053a:	46c0      	nop			; (mov r8, r8)
   1053c:	20000320 	.word	0x20000320
   10540:	20000478 	.word	0x20000478
   10544:	20001570 	.word	0x20001570
   10548:	000191ed 	.word	0x000191ed
   1054c:	200003ba 	.word	0x200003ba
   10550:	0000ed75 	.word	0x0000ed75
   10554:	000188a9 	.word	0x000188a9
   10558:	00018bcd 	.word	0x00018bcd
   1055c:	40a00000 	.word	0x40a00000

00010560 <initKalman>:

void initKalman(float meas, float est, float _q)
{
   10560:	b580      	push	{r7, lr}
   10562:	b086      	sub	sp, #24
   10564:	af00      	add	r7, sp, #0
   10566:	60f8      	str	r0, [r7, #12]
   10568:	60b9      	str	r1, [r7, #8]
   1056a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < KalmanArraySize; i++){
   1056c:	2300      	movs	r3, #0
   1056e:	617b      	str	r3, [r7, #20]
   10570:	e020      	b.n	105b4 <initKalman+0x54>
		err_measure[i] = meas;
   10572:	4b26      	ldr	r3, [pc, #152]	; (1060c <initKalman+0xac>)
   10574:	697a      	ldr	r2, [r7, #20]
   10576:	0092      	lsls	r2, r2, #2
   10578:	68f9      	ldr	r1, [r7, #12]
   1057a:	50d1      	str	r1, [r2, r3]
		err_estimate[i] = est;
   1057c:	4b24      	ldr	r3, [pc, #144]	; (10610 <initKalman+0xb0>)
   1057e:	697a      	ldr	r2, [r7, #20]
   10580:	0092      	lsls	r2, r2, #2
   10582:	68b9      	ldr	r1, [r7, #8]
   10584:	50d1      	str	r1, [r2, r3]
		q[i] = _q;
   10586:	4b23      	ldr	r3, [pc, #140]	; (10614 <initKalman+0xb4>)
   10588:	697a      	ldr	r2, [r7, #20]
   1058a:	0092      	lsls	r2, r2, #2
   1058c:	6879      	ldr	r1, [r7, #4]
   1058e:	50d1      	str	r1, [r2, r3]
		current_estimate[i] = 0;
   10590:	4b21      	ldr	r3, [pc, #132]	; (10618 <initKalman+0xb8>)
   10592:	697a      	ldr	r2, [r7, #20]
   10594:	0092      	lsls	r2, r2, #2
   10596:	2100      	movs	r1, #0
   10598:	50d1      	str	r1, [r2, r3]
		last_estimate[i] = 0;
   1059a:	4b20      	ldr	r3, [pc, #128]	; (1061c <initKalman+0xbc>)
   1059c:	697a      	ldr	r2, [r7, #20]
   1059e:	0092      	lsls	r2, r2, #2
   105a0:	2100      	movs	r1, #0
   105a2:	50d1      	str	r1, [r2, r3]
		kalman_gain[i] = 0;
   105a4:	4b1e      	ldr	r3, [pc, #120]	; (10620 <initKalman+0xc0>)
   105a6:	697a      	ldr	r2, [r7, #20]
   105a8:	0092      	lsls	r2, r2, #2
   105aa:	2100      	movs	r1, #0
   105ac:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < KalmanArraySize; i++){
   105ae:	697b      	ldr	r3, [r7, #20]
   105b0:	3301      	adds	r3, #1
   105b2:	617b      	str	r3, [r7, #20]
   105b4:	697b      	ldr	r3, [r7, #20]
   105b6:	2b06      	cmp	r3, #6
   105b8:	dddb      	ble.n	10572 <initKalman+0x12>
	}

	err_measure[ax_kalman] = 15;
   105ba:	4b14      	ldr	r3, [pc, #80]	; (1060c <initKalman+0xac>)
   105bc:	4a19      	ldr	r2, [pc, #100]	; (10624 <initKalman+0xc4>)
   105be:	601a      	str	r2, [r3, #0]
	err_estimate[ax_kalman] = 15;
   105c0:	4b13      	ldr	r3, [pc, #76]	; (10610 <initKalman+0xb0>)
   105c2:	4a18      	ldr	r2, [pc, #96]	; (10624 <initKalman+0xc4>)
   105c4:	601a      	str	r2, [r3, #0]
	q[ax_kalman] = 0.3;
   105c6:	4b13      	ldr	r3, [pc, #76]	; (10614 <initKalman+0xb4>)
   105c8:	4a17      	ldr	r2, [pc, #92]	; (10628 <initKalman+0xc8>)
   105ca:	601a      	str	r2, [r3, #0]

	err_measure[ay_kalman] = 15;
   105cc:	4b0f      	ldr	r3, [pc, #60]	; (1060c <initKalman+0xac>)
   105ce:	4a15      	ldr	r2, [pc, #84]	; (10624 <initKalman+0xc4>)
   105d0:	605a      	str	r2, [r3, #4]
	err_estimate[ay_kalman] = 15;
   105d2:	4b0f      	ldr	r3, [pc, #60]	; (10610 <initKalman+0xb0>)
   105d4:	4a13      	ldr	r2, [pc, #76]	; (10624 <initKalman+0xc4>)
   105d6:	605a      	str	r2, [r3, #4]
	q[ay_kalman] = 0.3;
   105d8:	4b0e      	ldr	r3, [pc, #56]	; (10614 <initKalman+0xb4>)
   105da:	4a13      	ldr	r2, [pc, #76]	; (10628 <initKalman+0xc8>)
   105dc:	605a      	str	r2, [r3, #4]

	// 	err_measure[ay_kalman] = 20;
	// 	err_estimate[ay_kalman] = 20;
	// 	q[ay_kalman] = 0.8;

	err_measure[az_kalman] = 30;
   105de:	4b0b      	ldr	r3, [pc, #44]	; (1060c <initKalman+0xac>)
   105e0:	4a12      	ldr	r2, [pc, #72]	; (1062c <initKalman+0xcc>)
   105e2:	609a      	str	r2, [r3, #8]
	err_estimate[az_kalman] = 30;
   105e4:	4b0a      	ldr	r3, [pc, #40]	; (10610 <initKalman+0xb0>)
   105e6:	4a11      	ldr	r2, [pc, #68]	; (1062c <initKalman+0xcc>)
   105e8:	609a      	str	r2, [r3, #8]
	q[az_kalman] = 0.3;
   105ea:	4b0a      	ldr	r3, [pc, #40]	; (10614 <initKalman+0xb4>)
   105ec:	4a0e      	ldr	r2, [pc, #56]	; (10628 <initKalman+0xc8>)
   105ee:	609a      	str	r2, [r3, #8]
	//
	// 	err_measure[gz_kalman] = 0.1;
	// 	err_estimate[gz_kalman] = 1;
	// 	q[gz_kalman] = 0.99;

	err_measure[light_kalman] = 200;
   105f0:	4b06      	ldr	r3, [pc, #24]	; (1060c <initKalman+0xac>)
   105f2:	4a0f      	ldr	r2, [pc, #60]	; (10630 <initKalman+0xd0>)
   105f4:	619a      	str	r2, [r3, #24]
	err_estimate[light_kalman] = 200;
   105f6:	4b06      	ldr	r3, [pc, #24]	; (10610 <initKalman+0xb0>)
   105f8:	4a0d      	ldr	r2, [pc, #52]	; (10630 <initKalman+0xd0>)
   105fa:	619a      	str	r2, [r3, #24]
	q[light_kalman] = 0.008;
   105fc:	4b05      	ldr	r3, [pc, #20]	; (10614 <initKalman+0xb4>)
   105fe:	4a0d      	ldr	r2, [pc, #52]	; (10634 <initKalman+0xd4>)
   10600:	619a      	str	r2, [r3, #24]
}
   10602:	46c0      	nop			; (mov r8, r8)
   10604:	46bd      	mov	sp, r7
   10606:	b006      	add	sp, #24
   10608:	bd80      	pop	{r7, pc}
   1060a:	46c0      	nop			; (mov r8, r8)
   1060c:	200013f4 	.word	0x200013f4
   10610:	20000f94 	.word	0x20000f94
   10614:	20001a30 	.word	0x20001a30
   10618:	20001108 	.word	0x20001108
   1061c:	20000dd0 	.word	0x20000dd0
   10620:	20001798 	.word	0x20001798
   10624:	41700000 	.word	0x41700000
   10628:	3e99999a 	.word	0x3e99999a
   1062c:	41f00000 	.word	0x41f00000
   10630:	43480000 	.word	0x43480000
   10634:	3c03126f 	.word	0x3c03126f

00010638 <updateKalman>:

float updateKalman(float meas, int kalmanIndex)
{
   10638:	b5f0      	push	{r4, r5, r6, r7, lr}
   1063a:	b083      	sub	sp, #12
   1063c:	af00      	add	r7, sp, #0
   1063e:	6078      	str	r0, [r7, #4]
   10640:	6039      	str	r1, [r7, #0]
	kalman_gain[kalmanIndex] = err_estimate[kalmanIndex]/(err_estimate[kalmanIndex] + err_measure[kalmanIndex]);
   10642:	4b5e      	ldr	r3, [pc, #376]	; (107bc <updateKalman+0x184>)
   10644:	683a      	ldr	r2, [r7, #0]
   10646:	0092      	lsls	r2, r2, #2
   10648:	58d4      	ldr	r4, [r2, r3]
   1064a:	4b5c      	ldr	r3, [pc, #368]	; (107bc <updateKalman+0x184>)
   1064c:	683a      	ldr	r2, [r7, #0]
   1064e:	0092      	lsls	r2, r2, #2
   10650:	58d0      	ldr	r0, [r2, r3]
   10652:	4b5b      	ldr	r3, [pc, #364]	; (107c0 <updateKalman+0x188>)
   10654:	683a      	ldr	r2, [r7, #0]
   10656:	0092      	lsls	r2, r2, #2
   10658:	58d2      	ldr	r2, [r2, r3]
   1065a:	4b5a      	ldr	r3, [pc, #360]	; (107c4 <updateKalman+0x18c>)
   1065c:	1c11      	adds	r1, r2, #0
   1065e:	4798      	blx	r3
   10660:	1c03      	adds	r3, r0, #0
   10662:	1c1a      	adds	r2, r3, #0
   10664:	4b58      	ldr	r3, [pc, #352]	; (107c8 <updateKalman+0x190>)
   10666:	1c11      	adds	r1, r2, #0
   10668:	1c20      	adds	r0, r4, #0
   1066a:	4798      	blx	r3
   1066c:	1c03      	adds	r3, r0, #0
   1066e:	1c19      	adds	r1, r3, #0
   10670:	4b56      	ldr	r3, [pc, #344]	; (107cc <updateKalman+0x194>)
   10672:	683a      	ldr	r2, [r7, #0]
   10674:	0092      	lsls	r2, r2, #2
   10676:	50d1      	str	r1, [r2, r3]
	kalman_gain[kalmanIndex] = max(kalman_gain[kalmanIndex],0.015);
   10678:	4b54      	ldr	r3, [pc, #336]	; (107cc <updateKalman+0x194>)
   1067a:	683a      	ldr	r2, [r7, #0]
   1067c:	0092      	lsls	r2, r2, #2
   1067e:	58d2      	ldr	r2, [r2, r3]
   10680:	4b53      	ldr	r3, [pc, #332]	; (107d0 <updateKalman+0x198>)
   10682:	1c10      	adds	r0, r2, #0
   10684:	4798      	blx	r3
   10686:	4c53      	ldr	r4, [pc, #332]	; (107d4 <updateKalman+0x19c>)
   10688:	4a53      	ldr	r2, [pc, #332]	; (107d8 <updateKalman+0x1a0>)
   1068a:	4b54      	ldr	r3, [pc, #336]	; (107dc <updateKalman+0x1a4>)
   1068c:	47a0      	blx	r4
   1068e:	1e03      	subs	r3, r0, #0
   10690:	d004      	beq.n	1069c <updateKalman+0x64>
   10692:	4b4e      	ldr	r3, [pc, #312]	; (107cc <updateKalman+0x194>)
   10694:	683a      	ldr	r2, [r7, #0]
   10696:	0092      	lsls	r2, r2, #2
   10698:	58d3      	ldr	r3, [r2, r3]
   1069a:	e000      	b.n	1069e <updateKalman+0x66>
   1069c:	4b50      	ldr	r3, [pc, #320]	; (107e0 <updateKalman+0x1a8>)
   1069e:	4a4b      	ldr	r2, [pc, #300]	; (107cc <updateKalman+0x194>)
   106a0:	6839      	ldr	r1, [r7, #0]
   106a2:	0089      	lsls	r1, r1, #2
   106a4:	508b      	str	r3, [r1, r2]
	current_estimate[kalmanIndex] = last_estimate[kalmanIndex] + kalman_gain[kalmanIndex] * (meas - last_estimate[kalmanIndex]);
   106a6:	4b4f      	ldr	r3, [pc, #316]	; (107e4 <updateKalman+0x1ac>)
   106a8:	683a      	ldr	r2, [r7, #0]
   106aa:	0092      	lsls	r2, r2, #2
   106ac:	58d4      	ldr	r4, [r2, r3]
   106ae:	4b47      	ldr	r3, [pc, #284]	; (107cc <updateKalman+0x194>)
   106b0:	683a      	ldr	r2, [r7, #0]
   106b2:	0092      	lsls	r2, r2, #2
   106b4:	58d5      	ldr	r5, [r2, r3]
   106b6:	4b4b      	ldr	r3, [pc, #300]	; (107e4 <updateKalman+0x1ac>)
   106b8:	683a      	ldr	r2, [r7, #0]
   106ba:	0092      	lsls	r2, r2, #2
   106bc:	58d2      	ldr	r2, [r2, r3]
   106be:	4b4a      	ldr	r3, [pc, #296]	; (107e8 <updateKalman+0x1b0>)
   106c0:	1c11      	adds	r1, r2, #0
   106c2:	6878      	ldr	r0, [r7, #4]
   106c4:	4798      	blx	r3
   106c6:	1c03      	adds	r3, r0, #0
   106c8:	1c1a      	adds	r2, r3, #0
   106ca:	4b48      	ldr	r3, [pc, #288]	; (107ec <updateKalman+0x1b4>)
   106cc:	1c11      	adds	r1, r2, #0
   106ce:	1c28      	adds	r0, r5, #0
   106d0:	4798      	blx	r3
   106d2:	1c03      	adds	r3, r0, #0
   106d4:	1c1a      	adds	r2, r3, #0
   106d6:	4b3b      	ldr	r3, [pc, #236]	; (107c4 <updateKalman+0x18c>)
   106d8:	1c11      	adds	r1, r2, #0
   106da:	1c20      	adds	r0, r4, #0
   106dc:	4798      	blx	r3
   106de:	1c03      	adds	r3, r0, #0
   106e0:	1c19      	adds	r1, r3, #0
   106e2:	4b43      	ldr	r3, [pc, #268]	; (107f0 <updateKalman+0x1b8>)
   106e4:	683a      	ldr	r2, [r7, #0]
   106e6:	0092      	lsls	r2, r2, #2
   106e8:	50d1      	str	r1, [r2, r3]
	err_estimate[kalmanIndex] =  (1.0 - kalman_gain[kalmanIndex])*err_estimate[kalmanIndex] + abs(last_estimate[kalmanIndex]-current_estimate[kalmanIndex])*q[kalmanIndex];
   106ea:	4b38      	ldr	r3, [pc, #224]	; (107cc <updateKalman+0x194>)
   106ec:	683a      	ldr	r2, [r7, #0]
   106ee:	0092      	lsls	r2, r2, #2
   106f0:	58d2      	ldr	r2, [r2, r3]
   106f2:	4b37      	ldr	r3, [pc, #220]	; (107d0 <updateKalman+0x198>)
   106f4:	1c10      	adds	r0, r2, #0
   106f6:	4798      	blx	r3
   106f8:	0002      	movs	r2, r0
   106fa:	000b      	movs	r3, r1
   106fc:	4c3d      	ldr	r4, [pc, #244]	; (107f4 <updateKalman+0x1bc>)
   106fe:	2000      	movs	r0, #0
   10700:	493d      	ldr	r1, [pc, #244]	; (107f8 <updateKalman+0x1c0>)
   10702:	47a0      	blx	r4
   10704:	0003      	movs	r3, r0
   10706:	000c      	movs	r4, r1
   10708:	001d      	movs	r5, r3
   1070a:	0026      	movs	r6, r4
   1070c:	4b2b      	ldr	r3, [pc, #172]	; (107bc <updateKalman+0x184>)
   1070e:	683a      	ldr	r2, [r7, #0]
   10710:	0092      	lsls	r2, r2, #2
   10712:	58d2      	ldr	r2, [r2, r3]
   10714:	4b2e      	ldr	r3, [pc, #184]	; (107d0 <updateKalman+0x198>)
   10716:	1c10      	adds	r0, r2, #0
   10718:	4798      	blx	r3
   1071a:	0002      	movs	r2, r0
   1071c:	000b      	movs	r3, r1
   1071e:	4c37      	ldr	r4, [pc, #220]	; (107fc <updateKalman+0x1c4>)
   10720:	0028      	movs	r0, r5
   10722:	0031      	movs	r1, r6
   10724:	47a0      	blx	r4
   10726:	0003      	movs	r3, r0
   10728:	000c      	movs	r4, r1
   1072a:	001d      	movs	r5, r3
   1072c:	0026      	movs	r6, r4
   1072e:	4b2d      	ldr	r3, [pc, #180]	; (107e4 <updateKalman+0x1ac>)
   10730:	683a      	ldr	r2, [r7, #0]
   10732:	0092      	lsls	r2, r2, #2
   10734:	58d0      	ldr	r0, [r2, r3]
   10736:	4b2e      	ldr	r3, [pc, #184]	; (107f0 <updateKalman+0x1b8>)
   10738:	683a      	ldr	r2, [r7, #0]
   1073a:	0092      	lsls	r2, r2, #2
   1073c:	58d2      	ldr	r2, [r2, r3]
   1073e:	4b2a      	ldr	r3, [pc, #168]	; (107e8 <updateKalman+0x1b0>)
   10740:	1c11      	adds	r1, r2, #0
   10742:	4798      	blx	r3
   10744:	1c03      	adds	r3, r0, #0
   10746:	1c1a      	adds	r2, r3, #0
   10748:	4b2d      	ldr	r3, [pc, #180]	; (10800 <updateKalman+0x1c8>)
   1074a:	1c10      	adds	r0, r2, #0
   1074c:	4798      	blx	r3
   1074e:	0003      	movs	r3, r0
   10750:	17d9      	asrs	r1, r3, #31
   10752:	185a      	adds	r2, r3, r1
   10754:	404a      	eors	r2, r1
   10756:	4b2b      	ldr	r3, [pc, #172]	; (10804 <updateKalman+0x1cc>)
   10758:	0010      	movs	r0, r2
   1075a:	4798      	blx	r3
   1075c:	4b2a      	ldr	r3, [pc, #168]	; (10808 <updateKalman+0x1d0>)
   1075e:	683a      	ldr	r2, [r7, #0]
   10760:	0092      	lsls	r2, r2, #2
   10762:	58d2      	ldr	r2, [r2, r3]
   10764:	4b21      	ldr	r3, [pc, #132]	; (107ec <updateKalman+0x1b4>)
   10766:	1c11      	adds	r1, r2, #0
   10768:	4798      	blx	r3
   1076a:	1c03      	adds	r3, r0, #0
   1076c:	1c1a      	adds	r2, r3, #0
   1076e:	4b18      	ldr	r3, [pc, #96]	; (107d0 <updateKalman+0x198>)
   10770:	1c10      	adds	r0, r2, #0
   10772:	4798      	blx	r3
   10774:	0002      	movs	r2, r0
   10776:	000b      	movs	r3, r1
   10778:	4c24      	ldr	r4, [pc, #144]	; (1080c <updateKalman+0x1d4>)
   1077a:	0028      	movs	r0, r5
   1077c:	0031      	movs	r1, r6
   1077e:	47a0      	blx	r4
   10780:	0003      	movs	r3, r0
   10782:	000c      	movs	r4, r1
   10784:	0019      	movs	r1, r3
   10786:	0022      	movs	r2, r4
   10788:	4b21      	ldr	r3, [pc, #132]	; (10810 <updateKalman+0x1d8>)
   1078a:	0008      	movs	r0, r1
   1078c:	0011      	movs	r1, r2
   1078e:	4798      	blx	r3
   10790:	1c01      	adds	r1, r0, #0
   10792:	4b0a      	ldr	r3, [pc, #40]	; (107bc <updateKalman+0x184>)
   10794:	683a      	ldr	r2, [r7, #0]
   10796:	0092      	lsls	r2, r2, #2
   10798:	50d1      	str	r1, [r2, r3]
	last_estimate[kalmanIndex]=current_estimate[kalmanIndex];
   1079a:	4b15      	ldr	r3, [pc, #84]	; (107f0 <updateKalman+0x1b8>)
   1079c:	683a      	ldr	r2, [r7, #0]
   1079e:	0092      	lsls	r2, r2, #2
   107a0:	58d1      	ldr	r1, [r2, r3]
   107a2:	4b10      	ldr	r3, [pc, #64]	; (107e4 <updateKalman+0x1ac>)
   107a4:	683a      	ldr	r2, [r7, #0]
   107a6:	0092      	lsls	r2, r2, #2
   107a8:	50d1      	str	r1, [r2, r3]

	return current_estimate[kalmanIndex];
   107aa:	4b11      	ldr	r3, [pc, #68]	; (107f0 <updateKalman+0x1b8>)
   107ac:	683a      	ldr	r2, [r7, #0]
   107ae:	0092      	lsls	r2, r2, #2
   107b0:	58d3      	ldr	r3, [r2, r3]
}
   107b2:	1c18      	adds	r0, r3, #0
   107b4:	46bd      	mov	sp, r7
   107b6:	b003      	add	sp, #12
   107b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107ba:	46c0      	nop			; (mov r8, r8)
   107bc:	20000f94 	.word	0x20000f94
   107c0:	200013f4 	.word	0x200013f4
   107c4:	000188a9 	.word	0x000188a9
   107c8:	00018bcd 	.word	0x00018bcd
   107cc:	20001798 	.word	0x20001798
   107d0:	0001b1a1 	.word	0x0001b1a1
   107d4:	0001874d 	.word	0x0001874d
   107d8:	eb851eb8 	.word	0xeb851eb8
   107dc:	3f8eb851 	.word	0x3f8eb851
   107e0:	3c75c28f 	.word	0x3c75c28f
   107e4:	20000dd0 	.word	0x20000dd0
   107e8:	000191ed 	.word	0x000191ed
   107ec:	00018fad 	.word	0x00018fad
   107f0:	20001108 	.word	0x20001108
   107f4:	0001aa19 	.word	0x0001aa19
   107f8:	3ff00000 	.word	0x3ff00000
   107fc:	0001a519 	.word	0x0001a519
   10800:	00019525 	.word	0x00019525
   10804:	00019565 	.word	0x00019565
   10808:	20001a30 	.word	0x20001a30
   1080c:	00019691 	.word	0x00019691
   10810:	0001b245 	.word	0x0001b245

00010814 <crc16>:
	0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
	0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
	0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

uint16_t crc16(uint8_t *buf, uint16_t len) {
   10814:	b580      	push	{r7, lr}
   10816:	b084      	sub	sp, #16
   10818:	af00      	add	r7, sp, #0
   1081a:	6078      	str	r0, [r7, #4]
   1081c:	000a      	movs	r2, r1
   1081e:	1cbb      	adds	r3, r7, #2
   10820:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint16_t cksum = 0;
   10822:	230c      	movs	r3, #12
   10824:	18fb      	adds	r3, r7, r3
   10826:	2200      	movs	r2, #0
   10828:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
   1082a:	230e      	movs	r3, #14
   1082c:	18fb      	adds	r3, r7, r3
   1082e:	2200      	movs	r2, #0
   10830:	801a      	strh	r2, [r3, #0]
   10832:	e021      	b.n	10878 <crc16+0x64>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
   10834:	230c      	movs	r3, #12
   10836:	18fb      	adds	r3, r7, r3
   10838:	881b      	ldrh	r3, [r3, #0]
   1083a:	0a1b      	lsrs	r3, r3, #8
   1083c:	b29b      	uxth	r3, r3
   1083e:	0019      	movs	r1, r3
   10840:	687b      	ldr	r3, [r7, #4]
   10842:	1c5a      	adds	r2, r3, #1
   10844:	607a      	str	r2, [r7, #4]
   10846:	781b      	ldrb	r3, [r3, #0]
   10848:	404b      	eors	r3, r1
   1084a:	22ff      	movs	r2, #255	; 0xff
   1084c:	401a      	ands	r2, r3
   1084e:	4b11      	ldr	r3, [pc, #68]	; (10894 <crc16+0x80>)
   10850:	0052      	lsls	r2, r2, #1
   10852:	5ad3      	ldrh	r3, [r2, r3]
   10854:	b21a      	sxth	r2, r3
   10856:	230c      	movs	r3, #12
   10858:	18fb      	adds	r3, r7, r3
   1085a:	881b      	ldrh	r3, [r3, #0]
   1085c:	021b      	lsls	r3, r3, #8
   1085e:	b21b      	sxth	r3, r3
   10860:	4053      	eors	r3, r2
   10862:	b21a      	sxth	r2, r3
   10864:	230c      	movs	r3, #12
   10866:	18fb      	adds	r3, r7, r3
   10868:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
   1086a:	230e      	movs	r3, #14
   1086c:	18fb      	adds	r3, r7, r3
   1086e:	881a      	ldrh	r2, [r3, #0]
   10870:	230e      	movs	r3, #14
   10872:	18fb      	adds	r3, r7, r3
   10874:	3201      	adds	r2, #1
   10876:	801a      	strh	r2, [r3, #0]
   10878:	230e      	movs	r3, #14
   1087a:	18fa      	adds	r2, r7, r3
   1087c:	1cbb      	adds	r3, r7, #2
   1087e:	8812      	ldrh	r2, [r2, #0]
   10880:	881b      	ldrh	r3, [r3, #0]
   10882:	429a      	cmp	r2, r3
   10884:	d3d6      	bcc.n	10834 <crc16+0x20>
	}
	return cksum;
   10886:	230c      	movs	r3, #12
   10888:	18fb      	adds	r3, r7, r3
   1088a:	881b      	ldrh	r3, [r3, #0]
}
   1088c:	0018      	movs	r0, r3
   1088e:	46bd      	mov	sp, r7
   10890:	b004      	add	sp, #16
   10892:	bd80      	pop	{r7, pc}
   10894:	0001b968 	.word	0x0001b968

00010898 <configure_vesc_usart>:
float buffer_get_float32_auto(uint8_t *buffer, int8_t index);


// Configure SERCOM5 as USART for VESC
void configure_vesc_usart()
{
   10898:	b580      	push	{r7, lr}
   1089a:	b092      	sub	sp, #72	; 0x48
   1089c:	af00      	add	r7, sp, #0
	uint32_t baud = 0;
   1089e:	2300      	movs	r3, #0
   108a0:	647b      	str	r3, [r7, #68]	; 0x44
	if(UART_baud == BAUD_9600)
   108a2:	4b2d      	ldr	r3, [pc, #180]	; (10958 <configure_vesc_usart+0xc0>)
   108a4:	781b      	ldrb	r3, [r3, #0]
   108a6:	2b00      	cmp	r3, #0
   108a8:	d103      	bne.n	108b2 <configure_vesc_usart+0x1a>
		baud = 9600;
   108aa:	2396      	movs	r3, #150	; 0x96
   108ac:	019b      	lsls	r3, r3, #6
   108ae:	647b      	str	r3, [r7, #68]	; 0x44
   108b0:	e016      	b.n	108e0 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_38400)
   108b2:	4b29      	ldr	r3, [pc, #164]	; (10958 <configure_vesc_usart+0xc0>)
   108b4:	781b      	ldrb	r3, [r3, #0]
   108b6:	2b01      	cmp	r3, #1
   108b8:	d103      	bne.n	108c2 <configure_vesc_usart+0x2a>
		baud = 38400;
   108ba:	2396      	movs	r3, #150	; 0x96
   108bc:	021b      	lsls	r3, r3, #8
   108be:	647b      	str	r3, [r7, #68]	; 0x44
   108c0:	e00e      	b.n	108e0 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_57600)
   108c2:	4b25      	ldr	r3, [pc, #148]	; (10958 <configure_vesc_usart+0xc0>)
   108c4:	781b      	ldrb	r3, [r3, #0]
   108c6:	2b02      	cmp	r3, #2
   108c8:	d103      	bne.n	108d2 <configure_vesc_usart+0x3a>
		baud = 57600;
   108ca:	23e1      	movs	r3, #225	; 0xe1
   108cc:	021b      	lsls	r3, r3, #8
   108ce:	647b      	str	r3, [r7, #68]	; 0x44
   108d0:	e006      	b.n	108e0 <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_115200)
   108d2:	4b21      	ldr	r3, [pc, #132]	; (10958 <configure_vesc_usart+0xc0>)
   108d4:	781b      	ldrb	r3, [r3, #0]
   108d6:	2b03      	cmp	r3, #3
   108d8:	d102      	bne.n	108e0 <configure_vesc_usart+0x48>
		baud = 115200;
   108da:	23e1      	movs	r3, #225	; 0xe1
   108dc:	025b      	lsls	r3, r3, #9
   108de:	647b      	str	r3, [r7, #68]	; 0x44

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   108e0:	1d3b      	adds	r3, r7, #4
   108e2:	0018      	movs	r0, r3
   108e4:	4b1d      	ldr	r3, [pc, #116]	; (1095c <configure_vesc_usart+0xc4>)
   108e6:	4798      	blx	r3
	config_usart.baudrate    = baud;
   108e8:	1d3b      	adds	r3, r7, #4
   108ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   108ec:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
#endif
#if  defined(HW_4v0)|| defined(HW_4v1)
	if(ESC_UART_PIN_CONFIG)
   108ee:	4b1c      	ldr	r3, [pc, #112]	; (10960 <configure_vesc_usart+0xc8>)
   108f0:	781b      	ldrb	r3, [r3, #0]
   108f2:	2b00      	cmp	r3, #0
   108f4:	d004      	beq.n	10900 <configure_vesc_usart+0x68>
		config_usart.mux_setting = USART_RX_2_TX_0_XCK_1;
   108f6:	1d3b      	adds	r3, r7, #4
   108f8:	2280      	movs	r2, #128	; 0x80
   108fa:	0392      	lsls	r2, r2, #14
   108fc:	60da      	str	r2, [r3, #12]
   108fe:	e003      	b.n	10908 <configure_vesc_usart+0x70>
	else
		config_usart.mux_setting = USART_RX_0_TX_2_XCK_3;
   10900:	1d3b      	adds	r3, r7, #4
   10902:	2280      	movs	r2, #128	; 0x80
   10904:	0252      	lsls	r2, r2, #9
   10906:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   10908:	1d3b      	adds	r3, r7, #4
   1090a:	4a16      	ldr	r2, [pc, #88]	; (10964 <configure_vesc_usart+0xcc>)
   1090c:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
   1090e:	1d3b      	adds	r3, r7, #4
   10910:	2201      	movs	r2, #1
   10912:	4252      	negs	r2, r2
   10914:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
   10916:	1d3b      	adds	r3, r7, #4
   10918:	4a13      	ldr	r2, [pc, #76]	; (10968 <configure_vesc_usart+0xd0>)
   1091a:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   1091c:	1d3b      	adds	r3, r7, #4
   1091e:	2201      	movs	r2, #1
   10920:	4252      	negs	r2, r2
   10922:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
	while (usart_init(&vesc_usart,SERCOM1, &config_usart) != STATUS_OK)
   10924:	46c0      	nop			; (mov r8, r8)
   10926:	1d3a      	adds	r2, r7, #4
   10928:	4910      	ldr	r1, [pc, #64]	; (1096c <configure_vesc_usart+0xd4>)
   1092a:	4b11      	ldr	r3, [pc, #68]	; (10970 <configure_vesc_usart+0xd8>)
   1092c:	0018      	movs	r0, r3
   1092e:	4b11      	ldr	r3, [pc, #68]	; (10974 <configure_vesc_usart+0xdc>)
   10930:	4798      	blx	r3
   10932:	1e03      	subs	r3, r0, #0
   10934:	d1f7      	bne.n	10926 <configure_vesc_usart+0x8e>
	{}
	usart_enable(&vesc_usart);
   10936:	4b0e      	ldr	r3, [pc, #56]	; (10970 <configure_vesc_usart+0xd8>)
   10938:	0018      	movs	r0, r3
   1093a:	4b0f      	ldr	r3, [pc, #60]	; (10978 <configure_vesc_usart+0xe0>)
   1093c:	4798      	blx	r3

	latest_vesc_vals.FW_VERSION_MAJOR = 0;
   1093e:	4b0f      	ldr	r3, [pc, #60]	; (1097c <configure_vesc_usart+0xe4>)
   10940:	2234      	movs	r2, #52	; 0x34
   10942:	2100      	movs	r1, #0
   10944:	5499      	strb	r1, [r3, r2]
	latest_vesc_vals.FW_VERSION_MINOR = 0;
   10946:	4b0d      	ldr	r3, [pc, #52]	; (1097c <configure_vesc_usart+0xe4>)
   10948:	2235      	movs	r2, #53	; 0x35
   1094a:	2100      	movs	r1, #0
   1094c:	5499      	strb	r1, [r3, r2]
}
   1094e:	46c0      	nop			; (mov r8, r8)
   10950:	46bd      	mov	sp, r7
   10952:	b012      	add	sp, #72	; 0x48
   10954:	bd80      	pop	{r7, pc}
   10956:	46c0      	nop			; (mov r8, r8)
   10958:	2000038b 	.word	0x2000038b
   1095c:	00009ca1 	.word	0x00009ca1
   10960:	200003fc 	.word	0x200003fc
   10964:	00100002 	.word	0x00100002
   10968:	00120002 	.word	0x00120002
   1096c:	42000c00 	.word	0x42000c00
   10970:	20000aec 	.word	0x20000aec
   10974:	000060e5 	.word	0x000060e5
   10978:	00009d61 	.word	0x00009d61
   1097c:	20000e1c 	.word	0x20000e1c

00010980 <send_packet>:
	VESC_UART_BYTES_CRC,
	VESC_UART_BYTES_STOP,
};

uint8_t vesc_tx_buff[MAX_PAYLOAD_LEN+6];
void send_packet(struct uart_packet send_pak){
   10980:	b084      	sub	sp, #16
   10982:	b590      	push	{r4, r7, lr}
   10984:	b085      	sub	sp, #20
   10986:	af00      	add	r7, sp, #0
   10988:	2420      	movs	r4, #32
   1098a:	193c      	adds	r4, r7, r4
   1098c:	6020      	str	r0, [r4, #0]
   1098e:	6061      	str	r1, [r4, #4]
   10990:	60a2      	str	r2, [r4, #8]
   10992:	60e3      	str	r3, [r4, #12]
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
   10994:	4b49      	ldr	r3, [pc, #292]	; (10abc <send_packet+0x13c>)
   10996:	4798      	blx	r3
   10998:	0002      	movs	r2, r0
   1099a:	4b49      	ldr	r3, [pc, #292]	; (10ac0 <send_packet+0x140>)
   1099c:	681b      	ldr	r3, [r3, #0]
   1099e:	1ad2      	subs	r2, r2, r3
   109a0:	4b48      	ldr	r3, [pc, #288]	; (10ac4 <send_packet+0x144>)
   109a2:	681b      	ldr	r3, [r3, #0]
   109a4:	429a      	cmp	r2, r3
   109a6:	d902      	bls.n	109ae <send_packet+0x2e>
		HOLD_FOR_REPLY = false;
   109a8:	4b47      	ldr	r3, [pc, #284]	; (10ac8 <send_packet+0x148>)
   109aa:	2200      	movs	r2, #0
   109ac:	701a      	strb	r2, [r3, #0]

	send_pak.stop = 0x03;
   109ae:	2320      	movs	r3, #32
   109b0:	18fa      	adds	r2, r7, r3
   109b2:	4b46      	ldr	r3, [pc, #280]	; (10acc <send_packet+0x14c>)
   109b4:	2103      	movs	r1, #3
   109b6:	54d1      	strb	r1, [r2, r3]

	if(!HOLD_FOR_REPLY){
   109b8:	4b43      	ldr	r3, [pc, #268]	; (10ac8 <send_packet+0x148>)
   109ba:	781b      	ldrb	r3, [r3, #0]
   109bc:	2201      	movs	r2, #1
   109be:	4053      	eors	r3, r2
   109c0:	b2db      	uxtb	r3, r3
   109c2:	2b00      	cmp	r3, #0
   109c4:	d100      	bne.n	109c8 <send_packet+0x48>
   109c6:	e071      	b.n	10aac <send_packet+0x12c>
		uint16_t payload_len = 0;
   109c8:	230e      	movs	r3, #14
   109ca:	18fb      	adds	r3, r7, r3
   109cc:	2200      	movs	r2, #0
   109ce:	801a      	strh	r2, [r3, #0]
		if(send_pak.start == 0x03)
   109d0:	2320      	movs	r3, #32
   109d2:	18fb      	adds	r3, r7, r3
   109d4:	781b      	ldrb	r3, [r3, #0]
   109d6:	2b03      	cmp	r3, #3
   109d8:	d10e      	bne.n	109f8 <send_packet+0x78>
			payload_len = ((send_pak.len[0]<<8)|send_pak.len[1]);
   109da:	2320      	movs	r3, #32
   109dc:	18fb      	adds	r3, r7, r3
   109de:	785b      	ldrb	r3, [r3, #1]
   109e0:	021b      	lsls	r3, r3, #8
   109e2:	b21a      	sxth	r2, r3
   109e4:	2320      	movs	r3, #32
   109e6:	18fb      	adds	r3, r7, r3
   109e8:	789b      	ldrb	r3, [r3, #2]
   109ea:	b21b      	sxth	r3, r3
   109ec:	4313      	orrs	r3, r2
   109ee:	b21a      	sxth	r2, r3
   109f0:	230e      	movs	r3, #14
   109f2:	18fb      	adds	r3, r7, r3
   109f4:	801a      	strh	r2, [r3, #0]
   109f6:	e005      	b.n	10a04 <send_packet+0x84>
		else
			payload_len = send_pak.len[0];
   109f8:	2320      	movs	r3, #32
   109fa:	18fb      	adds	r3, r7, r3
   109fc:	785a      	ldrb	r2, [r3, #1]
   109fe:	230e      	movs	r3, #14
   10a00:	18fb      	adds	r3, r7, r3
   10a02:	801a      	strh	r2, [r3, #0]
		
		uint16_t message_len = (send_pak.start+payload_len+3);
   10a04:	2320      	movs	r3, #32
   10a06:	18fb      	adds	r3, r7, r3
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	b29a      	uxth	r2, r3
   10a0c:	230e      	movs	r3, #14
   10a0e:	18fb      	adds	r3, r7, r3
   10a10:	881b      	ldrh	r3, [r3, #0]
   10a12:	18d3      	adds	r3, r2, r3
   10a14:	b29a      	uxth	r2, r3
   10a16:	1cbb      	adds	r3, r7, #2
   10a18:	3203      	adds	r2, #3
   10a1a:	801a      	strh	r2, [r3, #0]
		uint8_t *send_ptr = &(send_pak.start);
   10a1c:	2320      	movs	r3, #32
   10a1e:	18fb      	adds	r3, r7, r3
   10a20:	60bb      	str	r3, [r7, #8]

		for(size_t i=0;i<message_len;i++){
   10a22:	2300      	movs	r3, #0
   10a24:	607b      	str	r3, [r7, #4]
   10a26:	e02d      	b.n	10a84 <send_packet+0x104>
			if(send_pak.start==0x02 && i==2)
   10a28:	2320      	movs	r3, #32
   10a2a:	18fb      	adds	r3, r7, r3
   10a2c:	781b      	ldrb	r3, [r3, #0]
   10a2e:	2b02      	cmp	r3, #2
   10a30:	d106      	bne.n	10a40 <send_packet+0xc0>
   10a32:	687b      	ldr	r3, [r7, #4]
   10a34:	2b02      	cmp	r3, #2
   10a36:	d103      	bne.n	10a40 <send_packet+0xc0>
			send_ptr+=1;
   10a38:	68bb      	ldr	r3, [r7, #8]
   10a3a:	3301      	adds	r3, #1
   10a3c:	60bb      	str	r3, [r7, #8]
   10a3e:	e014      	b.n	10a6a <send_packet+0xea>
			else if(i==payload_len+send_pak.start)
   10a40:	230e      	movs	r3, #14
   10a42:	18fb      	adds	r3, r7, r3
   10a44:	881b      	ldrh	r3, [r3, #0]
   10a46:	2220      	movs	r2, #32
   10a48:	18ba      	adds	r2, r7, r2
   10a4a:	7812      	ldrb	r2, [r2, #0]
   10a4c:	189b      	adds	r3, r3, r2
   10a4e:	001a      	movs	r2, r3
   10a50:	687b      	ldr	r3, [r7, #4]
   10a52:	429a      	cmp	r2, r3
   10a54:	d109      	bne.n	10a6a <send_packet+0xea>
			send_ptr+=(MAX_PAYLOAD_LEN-payload_len);
   10a56:	230e      	movs	r3, #14
   10a58:	18fb      	adds	r3, r7, r3
   10a5a:	881b      	ldrh	r3, [r3, #0]
   10a5c:	2280      	movs	r2, #128	; 0x80
   10a5e:	0092      	lsls	r2, r2, #2
   10a60:	1ad3      	subs	r3, r2, r3
   10a62:	001a      	movs	r2, r3
   10a64:	68bb      	ldr	r3, [r7, #8]
   10a66:	189b      	adds	r3, r3, r2
   10a68:	60bb      	str	r3, [r7, #8]

			vesc_tx_buff[i] = *send_ptr;
   10a6a:	68bb      	ldr	r3, [r7, #8]
   10a6c:	7819      	ldrb	r1, [r3, #0]
   10a6e:	4a18      	ldr	r2, [pc, #96]	; (10ad0 <send_packet+0x150>)
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	18d3      	adds	r3, r2, r3
   10a74:	1c0a      	adds	r2, r1, #0
   10a76:	701a      	strb	r2, [r3, #0]

			send_ptr++;
   10a78:	68bb      	ldr	r3, [r7, #8]
   10a7a:	3301      	adds	r3, #1
   10a7c:	60bb      	str	r3, [r7, #8]
		for(size_t i=0;i<message_len;i++){
   10a7e:	687b      	ldr	r3, [r7, #4]
   10a80:	3301      	adds	r3, #1
   10a82:	607b      	str	r3, [r7, #4]
   10a84:	1cbb      	adds	r3, r7, #2
   10a86:	881a      	ldrh	r2, [r3, #0]
   10a88:	687b      	ldr	r3, [r7, #4]
   10a8a:	429a      	cmp	r2, r3
   10a8c:	d8cc      	bhi.n	10a28 <send_packet+0xa8>
		}
		
		HOLD_FOR_REPLY = true;
   10a8e:	4b0e      	ldr	r3, [pc, #56]	; (10ac8 <send_packet+0x148>)
   10a90:	2201      	movs	r2, #1
   10a92:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_job(&vesc_usart, vesc_tx_buff, message_len);
   10a94:	1cbb      	adds	r3, r7, #2
   10a96:	881a      	ldrh	r2, [r3, #0]
   10a98:	490d      	ldr	r1, [pc, #52]	; (10ad0 <send_packet+0x150>)
   10a9a:	4b0e      	ldr	r3, [pc, #56]	; (10ad4 <send_packet+0x154>)
   10a9c:	0018      	movs	r0, r3
   10a9e:	4b0e      	ldr	r3, [pc, #56]	; (10ad8 <send_packet+0x158>)
   10aa0:	4798      	blx	r3
		vesc_usart_time = millis();
   10aa2:	4b06      	ldr	r3, [pc, #24]	; (10abc <send_packet+0x13c>)
   10aa4:	4798      	blx	r3
   10aa6:	0002      	movs	r2, r0
   10aa8:	4b05      	ldr	r3, [pc, #20]	; (10ac0 <send_packet+0x140>)
   10aaa:	601a      	str	r2, [r3, #0]
	}
}
   10aac:	46c0      	nop			; (mov r8, r8)
   10aae:	46bd      	mov	sp, r7
   10ab0:	b005      	add	sp, #20
   10ab2:	bc90      	pop	{r4, r7}
   10ab4:	bc08      	pop	{r3}
   10ab6:	b004      	add	sp, #16
   10ab8:	4718      	bx	r3
   10aba:	46c0      	nop			; (mov r8, r8)
   10abc:	00009f65 	.word	0x00009f65
   10ac0:	200003f0 	.word	0x200003f0
   10ac4:	200000f4 	.word	0x200000f4
   10ac8:	200003f4 	.word	0x200003f4
   10acc:	00000205 	.word	0x00000205
   10ad0:	200008e4 	.word	0x200008e4
   10ad4:	20000aec 	.word	0x20000aec
   10ad8:	00006629 	.word	0x00006629

00010adc <process_recieved_packet>:

void process_recieved_packet(){
   10adc:	b580      	push	{r7, lr}
   10ade:	b082      	sub	sp, #8
   10ae0:	af00      	add	r7, sp, #0
		uint8_t packet_id = vesc_revieve_packet.payload[0];
   10ae2:	1dfb      	adds	r3, r7, #7
   10ae4:	4abc      	ldr	r2, [pc, #752]	; (10dd8 <process_recieved_packet+0x2fc>)
   10ae6:	78d2      	ldrb	r2, [r2, #3]
   10ae8:	701a      	strb	r2, [r3, #0]
		if(packet_id == COMM_FW_VERSION){ // Bytes are the same for all FW's
   10aea:	4bbc      	ldr	r3, [pc, #752]	; (10ddc <process_recieved_packet+0x300>)
   10aec:	781b      	ldrb	r3, [r3, #0]
   10aee:	1dfa      	adds	r2, r7, #7
   10af0:	7812      	ldrb	r2, [r2, #0]
   10af2:	429a      	cmp	r2, r3
   10af4:	d10b      	bne.n	10b0e <process_recieved_packet+0x32>
			latest_vesc_vals.FW_VERSION_MAJOR = (uint16_t)vesc_revieve_packet.payload[1];
   10af6:	4bb8      	ldr	r3, [pc, #736]	; (10dd8 <process_recieved_packet+0x2fc>)
   10af8:	7919      	ldrb	r1, [r3, #4]
   10afa:	4bb9      	ldr	r3, [pc, #740]	; (10de0 <process_recieved_packet+0x304>)
   10afc:	2234      	movs	r2, #52	; 0x34
   10afe:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.FW_VERSION_MINOR = (uint16_t)vesc_revieve_packet.payload[2];
   10b00:	4bb5      	ldr	r3, [pc, #724]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b02:	7959      	ldrb	r1, [r3, #5]
   10b04:	4bb6      	ldr	r3, [pc, #728]	; (10de0 <process_recieved_packet+0x304>)
   10b06:	2235      	movs	r2, #53	; 0x35
   10b08:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
		} else if(packet_id == COMM_GET_IMU_DATA){ 
			// TODO
	}
}
   10b0a:	f000 ff34 	bl	11976 <process_recieved_packet+0xe9a>
		} else if(packet_id == COMM_GET_VALUES){
   10b0e:	4bb5      	ldr	r3, [pc, #724]	; (10de4 <process_recieved_packet+0x308>)
   10b10:	781b      	ldrb	r3, [r3, #0]
   10b12:	1dfa      	adds	r2, r7, #7
   10b14:	7812      	ldrb	r2, [r2, #0]
   10b16:	429a      	cmp	r2, r3
   10b18:	d000      	beq.n	10b1c <process_recieved_packet+0x40>
   10b1a:	e17f      	b.n	10e1c <process_recieved_packet+0x340>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[GET_VALUES_FET_TEMP] << 8) | vesc_revieve_packet.payload[GET_VALUES_FET_TEMP+1];
   10b1c:	4bb2      	ldr	r3, [pc, #712]	; (10de8 <process_recieved_packet+0x30c>)
   10b1e:	781b      	ldrb	r3, [r3, #0]
   10b20:	001a      	movs	r2, r3
   10b22:	4bad      	ldr	r3, [pc, #692]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b24:	189b      	adds	r3, r3, r2
   10b26:	78db      	ldrb	r3, [r3, #3]
   10b28:	021b      	lsls	r3, r3, #8
   10b2a:	b21a      	sxth	r2, r3
   10b2c:	4bae      	ldr	r3, [pc, #696]	; (10de8 <process_recieved_packet+0x30c>)
   10b2e:	781b      	ldrb	r3, [r3, #0]
   10b30:	3301      	adds	r3, #1
   10b32:	49a9      	ldr	r1, [pc, #676]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b34:	18cb      	adds	r3, r1, r3
   10b36:	78db      	ldrb	r3, [r3, #3]
   10b38:	b21b      	sxth	r3, r3
   10b3a:	4313      	orrs	r3, r2
   10b3c:	b21a      	sxth	r2, r3
   10b3e:	4ba8      	ldr	r3, [pc, #672]	; (10de0 <process_recieved_packet+0x304>)
   10b40:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+3];
   10b42:	4baa      	ldr	r3, [pc, #680]	; (10dec <process_recieved_packet+0x310>)
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	001a      	movs	r2, r3
   10b48:	4ba3      	ldr	r3, [pc, #652]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b4a:	189b      	adds	r3, r3, r2
   10b4c:	78db      	ldrb	r3, [r3, #3]
   10b4e:	061a      	lsls	r2, r3, #24
   10b50:	4ba6      	ldr	r3, [pc, #664]	; (10dec <process_recieved_packet+0x310>)
   10b52:	781b      	ldrb	r3, [r3, #0]
   10b54:	3301      	adds	r3, #1
   10b56:	49a0      	ldr	r1, [pc, #640]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b58:	18cb      	adds	r3, r1, r3
   10b5a:	78db      	ldrb	r3, [r3, #3]
   10b5c:	041b      	lsls	r3, r3, #16
   10b5e:	431a      	orrs	r2, r3
   10b60:	4ba2      	ldr	r3, [pc, #648]	; (10dec <process_recieved_packet+0x310>)
   10b62:	781b      	ldrb	r3, [r3, #0]
   10b64:	3302      	adds	r3, #2
   10b66:	499c      	ldr	r1, [pc, #624]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b68:	18cb      	adds	r3, r1, r3
   10b6a:	78db      	ldrb	r3, [r3, #3]
   10b6c:	021b      	lsls	r3, r3, #8
   10b6e:	4313      	orrs	r3, r2
   10b70:	4a9e      	ldr	r2, [pc, #632]	; (10dec <process_recieved_packet+0x310>)
   10b72:	7812      	ldrb	r2, [r2, #0]
   10b74:	3203      	adds	r2, #3
   10b76:	4998      	ldr	r1, [pc, #608]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b78:	188a      	adds	r2, r1, r2
   10b7a:	78d2      	ldrb	r2, [r2, #3]
   10b7c:	431a      	orrs	r2, r3
   10b7e:	4b98      	ldr	r3, [pc, #608]	; (10de0 <process_recieved_packet+0x304>)
   10b80:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[GET_VALUES_IN_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_CURR+3];
   10b82:	4b9b      	ldr	r3, [pc, #620]	; (10df0 <process_recieved_packet+0x314>)
   10b84:	781b      	ldrb	r3, [r3, #0]
   10b86:	001a      	movs	r2, r3
   10b88:	4b93      	ldr	r3, [pc, #588]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b8a:	189b      	adds	r3, r3, r2
   10b8c:	78db      	ldrb	r3, [r3, #3]
   10b8e:	061a      	lsls	r2, r3, #24
   10b90:	4b97      	ldr	r3, [pc, #604]	; (10df0 <process_recieved_packet+0x314>)
   10b92:	781b      	ldrb	r3, [r3, #0]
   10b94:	3301      	adds	r3, #1
   10b96:	4990      	ldr	r1, [pc, #576]	; (10dd8 <process_recieved_packet+0x2fc>)
   10b98:	18cb      	adds	r3, r1, r3
   10b9a:	78db      	ldrb	r3, [r3, #3]
   10b9c:	041b      	lsls	r3, r3, #16
   10b9e:	431a      	orrs	r2, r3
   10ba0:	4b93      	ldr	r3, [pc, #588]	; (10df0 <process_recieved_packet+0x314>)
   10ba2:	781b      	ldrb	r3, [r3, #0]
   10ba4:	3302      	adds	r3, #2
   10ba6:	498c      	ldr	r1, [pc, #560]	; (10dd8 <process_recieved_packet+0x2fc>)
   10ba8:	18cb      	adds	r3, r1, r3
   10baa:	78db      	ldrb	r3, [r3, #3]
   10bac:	021b      	lsls	r3, r3, #8
   10bae:	4313      	orrs	r3, r2
   10bb0:	4a8f      	ldr	r2, [pc, #572]	; (10df0 <process_recieved_packet+0x314>)
   10bb2:	7812      	ldrb	r2, [r2, #0]
   10bb4:	3203      	adds	r2, #3
   10bb6:	4988      	ldr	r1, [pc, #544]	; (10dd8 <process_recieved_packet+0x2fc>)
   10bb8:	188a      	adds	r2, r1, r2
   10bba:	78d2      	ldrb	r2, [r2, #3]
   10bbc:	431a      	orrs	r2, r3
   10bbe:	4b88      	ldr	r3, [pc, #544]	; (10de0 <process_recieved_packet+0x304>)
   10bc0:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[GET_VALUES_DUTY] << 8) | vesc_revieve_packet.payload[GET_VALUES_DUTY+1];
   10bc2:	4b8c      	ldr	r3, [pc, #560]	; (10df4 <process_recieved_packet+0x318>)
   10bc4:	781b      	ldrb	r3, [r3, #0]
   10bc6:	001a      	movs	r2, r3
   10bc8:	4b83      	ldr	r3, [pc, #524]	; (10dd8 <process_recieved_packet+0x2fc>)
   10bca:	189b      	adds	r3, r3, r2
   10bcc:	78db      	ldrb	r3, [r3, #3]
   10bce:	021b      	lsls	r3, r3, #8
   10bd0:	b21a      	sxth	r2, r3
   10bd2:	4b88      	ldr	r3, [pc, #544]	; (10df4 <process_recieved_packet+0x318>)
   10bd4:	781b      	ldrb	r3, [r3, #0]
   10bd6:	3301      	adds	r3, #1
   10bd8:	497f      	ldr	r1, [pc, #508]	; (10dd8 <process_recieved_packet+0x2fc>)
   10bda:	18cb      	adds	r3, r1, r3
   10bdc:	78db      	ldrb	r3, [r3, #3]
   10bde:	b21b      	sxth	r3, r3
   10be0:	4313      	orrs	r3, r2
   10be2:	b21a      	sxth	r2, r3
   10be4:	4b7e      	ldr	r3, [pc, #504]	; (10de0 <process_recieved_packet+0x304>)
   10be6:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[GET_VALUES_RPM] << 24) | (vesc_revieve_packet.payload[GET_VALUES_RPM+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_RPM+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_RPM+3];
   10be8:	4b83      	ldr	r3, [pc, #524]	; (10df8 <process_recieved_packet+0x31c>)
   10bea:	781b      	ldrb	r3, [r3, #0]
   10bec:	001a      	movs	r2, r3
   10bee:	4b7a      	ldr	r3, [pc, #488]	; (10dd8 <process_recieved_packet+0x2fc>)
   10bf0:	189b      	adds	r3, r3, r2
   10bf2:	78db      	ldrb	r3, [r3, #3]
   10bf4:	061a      	lsls	r2, r3, #24
   10bf6:	4b80      	ldr	r3, [pc, #512]	; (10df8 <process_recieved_packet+0x31c>)
   10bf8:	781b      	ldrb	r3, [r3, #0]
   10bfa:	3301      	adds	r3, #1
   10bfc:	4976      	ldr	r1, [pc, #472]	; (10dd8 <process_recieved_packet+0x2fc>)
   10bfe:	18cb      	adds	r3, r1, r3
   10c00:	78db      	ldrb	r3, [r3, #3]
   10c02:	041b      	lsls	r3, r3, #16
   10c04:	431a      	orrs	r2, r3
   10c06:	4b7c      	ldr	r3, [pc, #496]	; (10df8 <process_recieved_packet+0x31c>)
   10c08:	781b      	ldrb	r3, [r3, #0]
   10c0a:	3302      	adds	r3, #2
   10c0c:	4972      	ldr	r1, [pc, #456]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c0e:	18cb      	adds	r3, r1, r3
   10c10:	78db      	ldrb	r3, [r3, #3]
   10c12:	021b      	lsls	r3, r3, #8
   10c14:	4313      	orrs	r3, r2
   10c16:	4a78      	ldr	r2, [pc, #480]	; (10df8 <process_recieved_packet+0x31c>)
   10c18:	7812      	ldrb	r2, [r2, #0]
   10c1a:	3203      	adds	r2, #3
   10c1c:	496e      	ldr	r1, [pc, #440]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c1e:	188a      	adds	r2, r1, r2
   10c20:	78d2      	ldrb	r2, [r2, #3]
   10c22:	431a      	orrs	r2, r3
   10c24:	4b6e      	ldr	r3, [pc, #440]	; (10de0 <process_recieved_packet+0x304>)
   10c26:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[GET_VALUES_IN_VOLT] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_VOLT+1];
   10c28:	4b74      	ldr	r3, [pc, #464]	; (10dfc <process_recieved_packet+0x320>)
   10c2a:	781b      	ldrb	r3, [r3, #0]
   10c2c:	001a      	movs	r2, r3
   10c2e:	4b6a      	ldr	r3, [pc, #424]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c30:	189b      	adds	r3, r3, r2
   10c32:	78db      	ldrb	r3, [r3, #3]
   10c34:	021b      	lsls	r3, r3, #8
   10c36:	b21a      	sxth	r2, r3
   10c38:	4b70      	ldr	r3, [pc, #448]	; (10dfc <process_recieved_packet+0x320>)
   10c3a:	781b      	ldrb	r3, [r3, #0]
   10c3c:	3301      	adds	r3, #1
   10c3e:	4966      	ldr	r1, [pc, #408]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c40:	18cb      	adds	r3, r1, r3
   10c42:	78db      	ldrb	r3, [r3, #3]
   10c44:	b21b      	sxth	r3, r3
   10c46:	4313      	orrs	r3, r2
   10c48:	b21a      	sxth	r2, r3
   10c4a:	4b65      	ldr	r3, [pc, #404]	; (10de0 <process_recieved_packet+0x304>)
   10c4c:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[GET_VALUES_AH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_USED+3])/100;
   10c4e:	4b6c      	ldr	r3, [pc, #432]	; (10e00 <process_recieved_packet+0x324>)
   10c50:	781b      	ldrb	r3, [r3, #0]
   10c52:	001a      	movs	r2, r3
   10c54:	4b60      	ldr	r3, [pc, #384]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c56:	189b      	adds	r3, r3, r2
   10c58:	78db      	ldrb	r3, [r3, #3]
   10c5a:	061a      	lsls	r2, r3, #24
   10c5c:	4b68      	ldr	r3, [pc, #416]	; (10e00 <process_recieved_packet+0x324>)
   10c5e:	781b      	ldrb	r3, [r3, #0]
   10c60:	3301      	adds	r3, #1
   10c62:	495d      	ldr	r1, [pc, #372]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c64:	18cb      	adds	r3, r1, r3
   10c66:	78db      	ldrb	r3, [r3, #3]
   10c68:	041b      	lsls	r3, r3, #16
   10c6a:	431a      	orrs	r2, r3
   10c6c:	4b64      	ldr	r3, [pc, #400]	; (10e00 <process_recieved_packet+0x324>)
   10c6e:	781b      	ldrb	r3, [r3, #0]
   10c70:	3302      	adds	r3, #2
   10c72:	4959      	ldr	r1, [pc, #356]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c74:	18cb      	adds	r3, r1, r3
   10c76:	78db      	ldrb	r3, [r3, #3]
   10c78:	021b      	lsls	r3, r3, #8
   10c7a:	4313      	orrs	r3, r2
   10c7c:	4a60      	ldr	r2, [pc, #384]	; (10e00 <process_recieved_packet+0x324>)
   10c7e:	7812      	ldrb	r2, [r2, #0]
   10c80:	3203      	adds	r2, #3
   10c82:	4955      	ldr	r1, [pc, #340]	; (10dd8 <process_recieved_packet+0x2fc>)
   10c84:	188a      	adds	r2, r1, r2
   10c86:	78d2      	ldrb	r2, [r2, #3]
   10c88:	431a      	orrs	r2, r3
   10c8a:	4b5e      	ldr	r3, [pc, #376]	; (10e04 <process_recieved_packet+0x328>)
   10c8c:	2164      	movs	r1, #100	; 0x64
   10c8e:	0010      	movs	r0, r2
   10c90:	4798      	blx	r3
   10c92:	0003      	movs	r3, r0
   10c94:	001a      	movs	r2, r3
   10c96:	4b52      	ldr	r3, [pc, #328]	; (10de0 <process_recieved_packet+0x304>)
   10c98:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_AH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+3])/100;
   10c9a:	4b5b      	ldr	r3, [pc, #364]	; (10e08 <process_recieved_packet+0x32c>)
   10c9c:	781b      	ldrb	r3, [r3, #0]
   10c9e:	001a      	movs	r2, r3
   10ca0:	4b4d      	ldr	r3, [pc, #308]	; (10dd8 <process_recieved_packet+0x2fc>)
   10ca2:	189b      	adds	r3, r3, r2
   10ca4:	78db      	ldrb	r3, [r3, #3]
   10ca6:	061a      	lsls	r2, r3, #24
   10ca8:	4b57      	ldr	r3, [pc, #348]	; (10e08 <process_recieved_packet+0x32c>)
   10caa:	781b      	ldrb	r3, [r3, #0]
   10cac:	3301      	adds	r3, #1
   10cae:	494a      	ldr	r1, [pc, #296]	; (10dd8 <process_recieved_packet+0x2fc>)
   10cb0:	18cb      	adds	r3, r1, r3
   10cb2:	78db      	ldrb	r3, [r3, #3]
   10cb4:	041b      	lsls	r3, r3, #16
   10cb6:	431a      	orrs	r2, r3
   10cb8:	4b53      	ldr	r3, [pc, #332]	; (10e08 <process_recieved_packet+0x32c>)
   10cba:	781b      	ldrb	r3, [r3, #0]
   10cbc:	3302      	adds	r3, #2
   10cbe:	4946      	ldr	r1, [pc, #280]	; (10dd8 <process_recieved_packet+0x2fc>)
   10cc0:	18cb      	adds	r3, r1, r3
   10cc2:	78db      	ldrb	r3, [r3, #3]
   10cc4:	021b      	lsls	r3, r3, #8
   10cc6:	4313      	orrs	r3, r2
   10cc8:	4a4f      	ldr	r2, [pc, #316]	; (10e08 <process_recieved_packet+0x32c>)
   10cca:	7812      	ldrb	r2, [r2, #0]
   10ccc:	3203      	adds	r2, #3
   10cce:	4942      	ldr	r1, [pc, #264]	; (10dd8 <process_recieved_packet+0x2fc>)
   10cd0:	188a      	adds	r2, r1, r2
   10cd2:	78d2      	ldrb	r2, [r2, #3]
   10cd4:	431a      	orrs	r2, r3
   10cd6:	4b4b      	ldr	r3, [pc, #300]	; (10e04 <process_recieved_packet+0x328>)
   10cd8:	2164      	movs	r1, #100	; 0x64
   10cda:	0010      	movs	r0, r2
   10cdc:	4798      	blx	r3
   10cde:	0003      	movs	r3, r0
   10ce0:	001a      	movs	r2, r3
   10ce2:	4b3f      	ldr	r3, [pc, #252]	; (10de0 <process_recieved_packet+0x304>)
   10ce4:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[GET_VALUES_WH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_USED+3])/100;
   10ce6:	4b49      	ldr	r3, [pc, #292]	; (10e0c <process_recieved_packet+0x330>)
   10ce8:	781b      	ldrb	r3, [r3, #0]
   10cea:	001a      	movs	r2, r3
   10cec:	4b3a      	ldr	r3, [pc, #232]	; (10dd8 <process_recieved_packet+0x2fc>)
   10cee:	189b      	adds	r3, r3, r2
   10cf0:	78db      	ldrb	r3, [r3, #3]
   10cf2:	061a      	lsls	r2, r3, #24
   10cf4:	4b45      	ldr	r3, [pc, #276]	; (10e0c <process_recieved_packet+0x330>)
   10cf6:	781b      	ldrb	r3, [r3, #0]
   10cf8:	3301      	adds	r3, #1
   10cfa:	4937      	ldr	r1, [pc, #220]	; (10dd8 <process_recieved_packet+0x2fc>)
   10cfc:	18cb      	adds	r3, r1, r3
   10cfe:	78db      	ldrb	r3, [r3, #3]
   10d00:	041b      	lsls	r3, r3, #16
   10d02:	431a      	orrs	r2, r3
   10d04:	4b41      	ldr	r3, [pc, #260]	; (10e0c <process_recieved_packet+0x330>)
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	3302      	adds	r3, #2
   10d0a:	4933      	ldr	r1, [pc, #204]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d0c:	18cb      	adds	r3, r1, r3
   10d0e:	78db      	ldrb	r3, [r3, #3]
   10d10:	021b      	lsls	r3, r3, #8
   10d12:	4313      	orrs	r3, r2
   10d14:	4a3d      	ldr	r2, [pc, #244]	; (10e0c <process_recieved_packet+0x330>)
   10d16:	7812      	ldrb	r2, [r2, #0]
   10d18:	3203      	adds	r2, #3
   10d1a:	492f      	ldr	r1, [pc, #188]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d1c:	188a      	adds	r2, r1, r2
   10d1e:	78d2      	ldrb	r2, [r2, #3]
   10d20:	431a      	orrs	r2, r3
   10d22:	4b38      	ldr	r3, [pc, #224]	; (10e04 <process_recieved_packet+0x328>)
   10d24:	2164      	movs	r1, #100	; 0x64
   10d26:	0010      	movs	r0, r2
   10d28:	4798      	blx	r3
   10d2a:	0003      	movs	r3, r0
   10d2c:	001a      	movs	r2, r3
   10d2e:	4b2c      	ldr	r3, [pc, #176]	; (10de0 <process_recieved_packet+0x304>)
   10d30:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_WH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+3])/100;
   10d32:	4b37      	ldr	r3, [pc, #220]	; (10e10 <process_recieved_packet+0x334>)
   10d34:	781b      	ldrb	r3, [r3, #0]
   10d36:	001a      	movs	r2, r3
   10d38:	4b27      	ldr	r3, [pc, #156]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d3a:	189b      	adds	r3, r3, r2
   10d3c:	78db      	ldrb	r3, [r3, #3]
   10d3e:	061a      	lsls	r2, r3, #24
   10d40:	4b33      	ldr	r3, [pc, #204]	; (10e10 <process_recieved_packet+0x334>)
   10d42:	781b      	ldrb	r3, [r3, #0]
   10d44:	3301      	adds	r3, #1
   10d46:	4924      	ldr	r1, [pc, #144]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d48:	18cb      	adds	r3, r1, r3
   10d4a:	78db      	ldrb	r3, [r3, #3]
   10d4c:	041b      	lsls	r3, r3, #16
   10d4e:	431a      	orrs	r2, r3
   10d50:	4b2f      	ldr	r3, [pc, #188]	; (10e10 <process_recieved_packet+0x334>)
   10d52:	781b      	ldrb	r3, [r3, #0]
   10d54:	3302      	adds	r3, #2
   10d56:	4920      	ldr	r1, [pc, #128]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d58:	18cb      	adds	r3, r1, r3
   10d5a:	78db      	ldrb	r3, [r3, #3]
   10d5c:	021b      	lsls	r3, r3, #8
   10d5e:	4313      	orrs	r3, r2
   10d60:	4a2b      	ldr	r2, [pc, #172]	; (10e10 <process_recieved_packet+0x334>)
   10d62:	7812      	ldrb	r2, [r2, #0]
   10d64:	3203      	adds	r2, #3
   10d66:	491c      	ldr	r1, [pc, #112]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d68:	188a      	adds	r2, r1, r2
   10d6a:	78d2      	ldrb	r2, [r2, #3]
   10d6c:	431a      	orrs	r2, r3
   10d6e:	4b25      	ldr	r3, [pc, #148]	; (10e04 <process_recieved_packet+0x328>)
   10d70:	2164      	movs	r1, #100	; 0x64
   10d72:	0010      	movs	r0, r2
   10d74:	4798      	blx	r3
   10d76:	0003      	movs	r3, r0
   10d78:	001a      	movs	r2, r3
   10d7a:	4b19      	ldr	r3, [pc, #100]	; (10de0 <process_recieved_packet+0x304>)
   10d7c:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[GET_VALUES_TACH] << 24) | (vesc_revieve_packet.payload[GET_VALUES_TACH+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_TACH+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_TACH+2];
   10d7e:	4b25      	ldr	r3, [pc, #148]	; (10e14 <process_recieved_packet+0x338>)
   10d80:	781b      	ldrb	r3, [r3, #0]
   10d82:	001a      	movs	r2, r3
   10d84:	4b14      	ldr	r3, [pc, #80]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d86:	189b      	adds	r3, r3, r2
   10d88:	78db      	ldrb	r3, [r3, #3]
   10d8a:	061a      	lsls	r2, r3, #24
   10d8c:	4b21      	ldr	r3, [pc, #132]	; (10e14 <process_recieved_packet+0x338>)
   10d8e:	781b      	ldrb	r3, [r3, #0]
   10d90:	3301      	adds	r3, #1
   10d92:	4911      	ldr	r1, [pc, #68]	; (10dd8 <process_recieved_packet+0x2fc>)
   10d94:	18cb      	adds	r3, r1, r3
   10d96:	78db      	ldrb	r3, [r3, #3]
   10d98:	041b      	lsls	r3, r3, #16
   10d9a:	431a      	orrs	r2, r3
   10d9c:	4b1d      	ldr	r3, [pc, #116]	; (10e14 <process_recieved_packet+0x338>)
   10d9e:	781b      	ldrb	r3, [r3, #0]
   10da0:	3302      	adds	r3, #2
   10da2:	490d      	ldr	r1, [pc, #52]	; (10dd8 <process_recieved_packet+0x2fc>)
   10da4:	18cb      	adds	r3, r1, r3
   10da6:	78db      	ldrb	r3, [r3, #3]
   10da8:	021b      	lsls	r3, r3, #8
   10daa:	4313      	orrs	r3, r2
   10dac:	4a19      	ldr	r2, [pc, #100]	; (10e14 <process_recieved_packet+0x338>)
   10dae:	7812      	ldrb	r2, [r2, #0]
   10db0:	3202      	adds	r2, #2
   10db2:	4909      	ldr	r1, [pc, #36]	; (10dd8 <process_recieved_packet+0x2fc>)
   10db4:	188a      	adds	r2, r1, r2
   10db6:	78d2      	ldrb	r2, [r2, #3]
   10db8:	431a      	orrs	r2, r3
   10dba:	4b09      	ldr	r3, [pc, #36]	; (10de0 <process_recieved_packet+0x304>)
   10dbc:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[GET_VALUES_FAULT];
   10dbe:	4b16      	ldr	r3, [pc, #88]	; (10e18 <process_recieved_packet+0x33c>)
   10dc0:	781b      	ldrb	r3, [r3, #0]
   10dc2:	001a      	movs	r2, r3
   10dc4:	4b04      	ldr	r3, [pc, #16]	; (10dd8 <process_recieved_packet+0x2fc>)
   10dc6:	189b      	adds	r3, r3, r2
   10dc8:	78db      	ldrb	r3, [r3, #3]
   10dca:	b259      	sxtb	r1, r3
   10dcc:	4b04      	ldr	r3, [pc, #16]	; (10de0 <process_recieved_packet+0x304>)
   10dce:	222c      	movs	r2, #44	; 0x2c
   10dd0:	5499      	strb	r1, [r3, r2]
}
   10dd2:	f000 fdd0 	bl	11976 <process_recieved_packet+0xe9a>
   10dd6:	46c0      	nop			; (mov r8, r8)
   10dd8:	20001590 	.word	0x20001590
   10ddc:	200003c8 	.word	0x200003c8
   10de0:	20000e1c 	.word	0x20000e1c
   10de4:	200003c9 	.word	0x200003c9
   10de8:	200003d1 	.word	0x200003d1
   10dec:	200003d2 	.word	0x200003d2
   10df0:	200003d3 	.word	0x200003d3
   10df4:	200003d4 	.word	0x200003d4
   10df8:	200003d5 	.word	0x200003d5
   10dfc:	200003d6 	.word	0x200003d6
   10e00:	200003d7 	.word	0x200003d7
   10e04:	00018521 	.word	0x00018521
   10e08:	200003d8 	.word	0x200003d8
   10e0c:	200003d9 	.word	0x200003d9
   10e10:	200003da 	.word	0x200003da
   10e14:	200003db 	.word	0x200003db
   10e18:	200003dc 	.word	0x200003dc
		} else if(packet_id == COMM_GET_MCCONF){
   10e1c:	4bfd      	ldr	r3, [pc, #1012]	; (11214 <process_recieved_packet+0x738>)
   10e1e:	781b      	ldrb	r3, [r3, #0]
   10e20:	1dfa      	adds	r2, r7, #7
   10e22:	7812      	ldrb	r2, [r2, #0]
   10e24:	429a      	cmp	r2, r3
   10e26:	d001      	beq.n	10e2c <process_recieved_packet+0x350>
   10e28:	f000 fc58 	bl	116dc <process_recieved_packet+0xc00>
			if(esc_fw == FW_2v18){
   10e2c:	4bfa      	ldr	r3, [pc, #1000]	; (11218 <process_recieved_packet+0x73c>)
   10e2e:	781b      	ldrb	r3, [r3, #0]
   10e30:	2b00      	cmp	r3, #0
   10e32:	d000      	beq.n	10e36 <process_recieved_packet+0x35a>
   10e34:	e32a      	b.n	1148c <process_recieved_packet+0x9b0>
				mcconf_limits.motor_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+3])/1000;
   10e36:	4bf9      	ldr	r3, [pc, #996]	; (1121c <process_recieved_packet+0x740>)
   10e38:	781b      	ldrb	r3, [r3, #0]
   10e3a:	001a      	movs	r2, r3
   10e3c:	4bf8      	ldr	r3, [pc, #992]	; (11220 <process_recieved_packet+0x744>)
   10e3e:	189b      	adds	r3, r3, r2
   10e40:	78db      	ldrb	r3, [r3, #3]
   10e42:	061a      	lsls	r2, r3, #24
   10e44:	4bf5      	ldr	r3, [pc, #980]	; (1121c <process_recieved_packet+0x740>)
   10e46:	781b      	ldrb	r3, [r3, #0]
   10e48:	3301      	adds	r3, #1
   10e4a:	49f5      	ldr	r1, [pc, #980]	; (11220 <process_recieved_packet+0x744>)
   10e4c:	18cb      	adds	r3, r1, r3
   10e4e:	78db      	ldrb	r3, [r3, #3]
   10e50:	041b      	lsls	r3, r3, #16
   10e52:	431a      	orrs	r2, r3
   10e54:	4bf1      	ldr	r3, [pc, #964]	; (1121c <process_recieved_packet+0x740>)
   10e56:	781b      	ldrb	r3, [r3, #0]
   10e58:	3302      	adds	r3, #2
   10e5a:	49f1      	ldr	r1, [pc, #964]	; (11220 <process_recieved_packet+0x744>)
   10e5c:	18cb      	adds	r3, r1, r3
   10e5e:	78db      	ldrb	r3, [r3, #3]
   10e60:	021b      	lsls	r3, r3, #8
   10e62:	4313      	orrs	r3, r2
   10e64:	4aed      	ldr	r2, [pc, #948]	; (1121c <process_recieved_packet+0x740>)
   10e66:	7812      	ldrb	r2, [r2, #0]
   10e68:	3203      	adds	r2, #3
   10e6a:	49ed      	ldr	r1, [pc, #948]	; (11220 <process_recieved_packet+0x744>)
   10e6c:	188a      	adds	r2, r1, r2
   10e6e:	78d2      	ldrb	r2, [r2, #3]
   10e70:	4313      	orrs	r3, r2
   10e72:	0018      	movs	r0, r3
   10e74:	4beb      	ldr	r3, [pc, #940]	; (11224 <process_recieved_packet+0x748>)
   10e76:	22fa      	movs	r2, #250	; 0xfa
   10e78:	0091      	lsls	r1, r2, #2
   10e7a:	4798      	blx	r3
   10e7c:	0003      	movs	r3, r0
   10e7e:	001a      	movs	r2, r3
   10e80:	4be9      	ldr	r3, [pc, #932]	; (11228 <process_recieved_packet+0x74c>)
   10e82:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+3])/1000;
   10e84:	4be9      	ldr	r3, [pc, #932]	; (1122c <process_recieved_packet+0x750>)
   10e86:	781b      	ldrb	r3, [r3, #0]
   10e88:	001a      	movs	r2, r3
   10e8a:	4be5      	ldr	r3, [pc, #916]	; (11220 <process_recieved_packet+0x744>)
   10e8c:	189b      	adds	r3, r3, r2
   10e8e:	78db      	ldrb	r3, [r3, #3]
   10e90:	061a      	lsls	r2, r3, #24
   10e92:	4be6      	ldr	r3, [pc, #920]	; (1122c <process_recieved_packet+0x750>)
   10e94:	781b      	ldrb	r3, [r3, #0]
   10e96:	3301      	adds	r3, #1
   10e98:	49e1      	ldr	r1, [pc, #900]	; (11220 <process_recieved_packet+0x744>)
   10e9a:	18cb      	adds	r3, r1, r3
   10e9c:	78db      	ldrb	r3, [r3, #3]
   10e9e:	041b      	lsls	r3, r3, #16
   10ea0:	431a      	orrs	r2, r3
   10ea2:	4be2      	ldr	r3, [pc, #904]	; (1122c <process_recieved_packet+0x750>)
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	3302      	adds	r3, #2
   10ea8:	49dd      	ldr	r1, [pc, #884]	; (11220 <process_recieved_packet+0x744>)
   10eaa:	18cb      	adds	r3, r1, r3
   10eac:	78db      	ldrb	r3, [r3, #3]
   10eae:	021b      	lsls	r3, r3, #8
   10eb0:	4313      	orrs	r3, r2
   10eb2:	4ade      	ldr	r2, [pc, #888]	; (1122c <process_recieved_packet+0x750>)
   10eb4:	7812      	ldrb	r2, [r2, #0]
   10eb6:	3203      	adds	r2, #3
   10eb8:	49d9      	ldr	r1, [pc, #868]	; (11220 <process_recieved_packet+0x744>)
   10eba:	188a      	adds	r2, r1, r2
   10ebc:	78d2      	ldrb	r2, [r2, #3]
   10ebe:	4313      	orrs	r3, r2
   10ec0:	0018      	movs	r0, r3
   10ec2:	4bd8      	ldr	r3, [pc, #864]	; (11224 <process_recieved_packet+0x748>)
   10ec4:	22fa      	movs	r2, #250	; 0xfa
   10ec6:	0091      	lsls	r1, r2, #2
   10ec8:	4798      	blx	r3
   10eca:	0003      	movs	r3, r0
   10ecc:	001a      	movs	r2, r3
   10ece:	4bd6      	ldr	r3, [pc, #856]	; (11228 <process_recieved_packet+0x74c>)
   10ed0:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+3])/1000;
   10ed2:	4bd7      	ldr	r3, [pc, #860]	; (11230 <process_recieved_packet+0x754>)
   10ed4:	781b      	ldrb	r3, [r3, #0]
   10ed6:	001a      	movs	r2, r3
   10ed8:	4bd1      	ldr	r3, [pc, #836]	; (11220 <process_recieved_packet+0x744>)
   10eda:	189b      	adds	r3, r3, r2
   10edc:	78db      	ldrb	r3, [r3, #3]
   10ede:	061a      	lsls	r2, r3, #24
   10ee0:	4bd3      	ldr	r3, [pc, #844]	; (11230 <process_recieved_packet+0x754>)
   10ee2:	781b      	ldrb	r3, [r3, #0]
   10ee4:	3301      	adds	r3, #1
   10ee6:	49ce      	ldr	r1, [pc, #824]	; (11220 <process_recieved_packet+0x744>)
   10ee8:	18cb      	adds	r3, r1, r3
   10eea:	78db      	ldrb	r3, [r3, #3]
   10eec:	041b      	lsls	r3, r3, #16
   10eee:	431a      	orrs	r2, r3
   10ef0:	4bcf      	ldr	r3, [pc, #828]	; (11230 <process_recieved_packet+0x754>)
   10ef2:	781b      	ldrb	r3, [r3, #0]
   10ef4:	3302      	adds	r3, #2
   10ef6:	49ca      	ldr	r1, [pc, #808]	; (11220 <process_recieved_packet+0x744>)
   10ef8:	18cb      	adds	r3, r1, r3
   10efa:	78db      	ldrb	r3, [r3, #3]
   10efc:	021b      	lsls	r3, r3, #8
   10efe:	4313      	orrs	r3, r2
   10f00:	4acb      	ldr	r2, [pc, #812]	; (11230 <process_recieved_packet+0x754>)
   10f02:	7812      	ldrb	r2, [r2, #0]
   10f04:	3203      	adds	r2, #3
   10f06:	49c6      	ldr	r1, [pc, #792]	; (11220 <process_recieved_packet+0x744>)
   10f08:	188a      	adds	r2, r1, r2
   10f0a:	78d2      	ldrb	r2, [r2, #3]
   10f0c:	4313      	orrs	r3, r2
   10f0e:	0018      	movs	r0, r3
   10f10:	4bc4      	ldr	r3, [pc, #784]	; (11224 <process_recieved_packet+0x748>)
   10f12:	22fa      	movs	r2, #250	; 0xfa
   10f14:	0091      	lsls	r1, r2, #2
   10f16:	4798      	blx	r3
   10f18:	0003      	movs	r3, r0
   10f1a:	001a      	movs	r2, r3
   10f1c:	4bc2      	ldr	r3, [pc, #776]	; (11228 <process_recieved_packet+0x74c>)
   10f1e:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+3])/1000;
   10f20:	4bc4      	ldr	r3, [pc, #784]	; (11234 <process_recieved_packet+0x758>)
   10f22:	781b      	ldrb	r3, [r3, #0]
   10f24:	001a      	movs	r2, r3
   10f26:	4bbe      	ldr	r3, [pc, #760]	; (11220 <process_recieved_packet+0x744>)
   10f28:	189b      	adds	r3, r3, r2
   10f2a:	78db      	ldrb	r3, [r3, #3]
   10f2c:	061a      	lsls	r2, r3, #24
   10f2e:	4bc1      	ldr	r3, [pc, #772]	; (11234 <process_recieved_packet+0x758>)
   10f30:	781b      	ldrb	r3, [r3, #0]
   10f32:	3301      	adds	r3, #1
   10f34:	49ba      	ldr	r1, [pc, #744]	; (11220 <process_recieved_packet+0x744>)
   10f36:	18cb      	adds	r3, r1, r3
   10f38:	78db      	ldrb	r3, [r3, #3]
   10f3a:	041b      	lsls	r3, r3, #16
   10f3c:	431a      	orrs	r2, r3
   10f3e:	4bbd      	ldr	r3, [pc, #756]	; (11234 <process_recieved_packet+0x758>)
   10f40:	781b      	ldrb	r3, [r3, #0]
   10f42:	3302      	adds	r3, #2
   10f44:	49b6      	ldr	r1, [pc, #728]	; (11220 <process_recieved_packet+0x744>)
   10f46:	18cb      	adds	r3, r1, r3
   10f48:	78db      	ldrb	r3, [r3, #3]
   10f4a:	021b      	lsls	r3, r3, #8
   10f4c:	4313      	orrs	r3, r2
   10f4e:	4ab9      	ldr	r2, [pc, #740]	; (11234 <process_recieved_packet+0x758>)
   10f50:	7812      	ldrb	r2, [r2, #0]
   10f52:	3203      	adds	r2, #3
   10f54:	49b2      	ldr	r1, [pc, #712]	; (11220 <process_recieved_packet+0x744>)
   10f56:	188a      	adds	r2, r1, r2
   10f58:	78d2      	ldrb	r2, [r2, #3]
   10f5a:	4313      	orrs	r3, r2
   10f5c:	0018      	movs	r0, r3
   10f5e:	4bb1      	ldr	r3, [pc, #708]	; (11224 <process_recieved_packet+0x748>)
   10f60:	22fa      	movs	r2, #250	; 0xfa
   10f62:	0091      	lsls	r1, r2, #2
   10f64:	4798      	blx	r3
   10f66:	0003      	movs	r3, r0
   10f68:	001a      	movs	r2, r3
   10f6a:	4baf      	ldr	r3, [pc, #700]	; (11228 <process_recieved_packet+0x74c>)
   10f6c:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+3])/1000;
   10f6e:	4bb2      	ldr	r3, [pc, #712]	; (11238 <process_recieved_packet+0x75c>)
   10f70:	781b      	ldrb	r3, [r3, #0]
   10f72:	001a      	movs	r2, r3
   10f74:	4baa      	ldr	r3, [pc, #680]	; (11220 <process_recieved_packet+0x744>)
   10f76:	189b      	adds	r3, r3, r2
   10f78:	78db      	ldrb	r3, [r3, #3]
   10f7a:	061a      	lsls	r2, r3, #24
   10f7c:	4bae      	ldr	r3, [pc, #696]	; (11238 <process_recieved_packet+0x75c>)
   10f7e:	781b      	ldrb	r3, [r3, #0]
   10f80:	3301      	adds	r3, #1
   10f82:	49a7      	ldr	r1, [pc, #668]	; (11220 <process_recieved_packet+0x744>)
   10f84:	18cb      	adds	r3, r1, r3
   10f86:	78db      	ldrb	r3, [r3, #3]
   10f88:	041b      	lsls	r3, r3, #16
   10f8a:	431a      	orrs	r2, r3
   10f8c:	4baa      	ldr	r3, [pc, #680]	; (11238 <process_recieved_packet+0x75c>)
   10f8e:	781b      	ldrb	r3, [r3, #0]
   10f90:	3302      	adds	r3, #2
   10f92:	49a3      	ldr	r1, [pc, #652]	; (11220 <process_recieved_packet+0x744>)
   10f94:	18cb      	adds	r3, r1, r3
   10f96:	78db      	ldrb	r3, [r3, #3]
   10f98:	021b      	lsls	r3, r3, #8
   10f9a:	4313      	orrs	r3, r2
   10f9c:	4aa6      	ldr	r2, [pc, #664]	; (11238 <process_recieved_packet+0x75c>)
   10f9e:	7812      	ldrb	r2, [r2, #0]
   10fa0:	3203      	adds	r2, #3
   10fa2:	499f      	ldr	r1, [pc, #636]	; (11220 <process_recieved_packet+0x744>)
   10fa4:	188a      	adds	r2, r1, r2
   10fa6:	78d2      	ldrb	r2, [r2, #3]
   10fa8:	4313      	orrs	r3, r2
   10faa:	0018      	movs	r0, r3
   10fac:	4b9d      	ldr	r3, [pc, #628]	; (11224 <process_recieved_packet+0x748>)
   10fae:	22fa      	movs	r2, #250	; 0xfa
   10fb0:	0091      	lsls	r1, r2, #2
   10fb2:	4798      	blx	r3
   10fb4:	0003      	movs	r3, r0
   10fb6:	001a      	movs	r2, r3
   10fb8:	4b9b      	ldr	r3, [pc, #620]	; (11228 <process_recieved_packet+0x74c>)
   10fba:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+3])/1000;
   10fbc:	4b9f      	ldr	r3, [pc, #636]	; (1123c <process_recieved_packet+0x760>)
   10fbe:	781b      	ldrb	r3, [r3, #0]
   10fc0:	001a      	movs	r2, r3
   10fc2:	4b97      	ldr	r3, [pc, #604]	; (11220 <process_recieved_packet+0x744>)
   10fc4:	189b      	adds	r3, r3, r2
   10fc6:	78db      	ldrb	r3, [r3, #3]
   10fc8:	061a      	lsls	r2, r3, #24
   10fca:	4b9c      	ldr	r3, [pc, #624]	; (1123c <process_recieved_packet+0x760>)
   10fcc:	781b      	ldrb	r3, [r3, #0]
   10fce:	3301      	adds	r3, #1
   10fd0:	4993      	ldr	r1, [pc, #588]	; (11220 <process_recieved_packet+0x744>)
   10fd2:	18cb      	adds	r3, r1, r3
   10fd4:	78db      	ldrb	r3, [r3, #3]
   10fd6:	041b      	lsls	r3, r3, #16
   10fd8:	431a      	orrs	r2, r3
   10fda:	4b98      	ldr	r3, [pc, #608]	; (1123c <process_recieved_packet+0x760>)
   10fdc:	781b      	ldrb	r3, [r3, #0]
   10fde:	3302      	adds	r3, #2
   10fe0:	498f      	ldr	r1, [pc, #572]	; (11220 <process_recieved_packet+0x744>)
   10fe2:	18cb      	adds	r3, r1, r3
   10fe4:	78db      	ldrb	r3, [r3, #3]
   10fe6:	021b      	lsls	r3, r3, #8
   10fe8:	4313      	orrs	r3, r2
   10fea:	4a94      	ldr	r2, [pc, #592]	; (1123c <process_recieved_packet+0x760>)
   10fec:	7812      	ldrb	r2, [r2, #0]
   10fee:	3203      	adds	r2, #3
   10ff0:	498b      	ldr	r1, [pc, #556]	; (11220 <process_recieved_packet+0x744>)
   10ff2:	188a      	adds	r2, r1, r2
   10ff4:	78d2      	ldrb	r2, [r2, #3]
   10ff6:	4313      	orrs	r3, r2
   10ff8:	0018      	movs	r0, r3
   10ffa:	4b8a      	ldr	r3, [pc, #552]	; (11224 <process_recieved_packet+0x748>)
   10ffc:	22fa      	movs	r2, #250	; 0xfa
   10ffe:	0091      	lsls	r1, r2, #2
   11000:	4798      	blx	r3
   11002:	0003      	movs	r3, r0
   11004:	001a      	movs	r2, r3
   11006:	4b88      	ldr	r3, [pc, #544]	; (11228 <process_recieved_packet+0x74c>)
   11008:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+3])/1000;
   1100a:	4b8d      	ldr	r3, [pc, #564]	; (11240 <process_recieved_packet+0x764>)
   1100c:	781b      	ldrb	r3, [r3, #0]
   1100e:	001a      	movs	r2, r3
   11010:	4b83      	ldr	r3, [pc, #524]	; (11220 <process_recieved_packet+0x744>)
   11012:	189b      	adds	r3, r3, r2
   11014:	78db      	ldrb	r3, [r3, #3]
   11016:	061a      	lsls	r2, r3, #24
   11018:	4b89      	ldr	r3, [pc, #548]	; (11240 <process_recieved_packet+0x764>)
   1101a:	781b      	ldrb	r3, [r3, #0]
   1101c:	3301      	adds	r3, #1
   1101e:	4980      	ldr	r1, [pc, #512]	; (11220 <process_recieved_packet+0x744>)
   11020:	18cb      	adds	r3, r1, r3
   11022:	78db      	ldrb	r3, [r3, #3]
   11024:	041b      	lsls	r3, r3, #16
   11026:	431a      	orrs	r2, r3
   11028:	4b85      	ldr	r3, [pc, #532]	; (11240 <process_recieved_packet+0x764>)
   1102a:	781b      	ldrb	r3, [r3, #0]
   1102c:	3302      	adds	r3, #2
   1102e:	497c      	ldr	r1, [pc, #496]	; (11220 <process_recieved_packet+0x744>)
   11030:	18cb      	adds	r3, r1, r3
   11032:	78db      	ldrb	r3, [r3, #3]
   11034:	021b      	lsls	r3, r3, #8
   11036:	4313      	orrs	r3, r2
   11038:	4a81      	ldr	r2, [pc, #516]	; (11240 <process_recieved_packet+0x764>)
   1103a:	7812      	ldrb	r2, [r2, #0]
   1103c:	3203      	adds	r2, #3
   1103e:	4978      	ldr	r1, [pc, #480]	; (11220 <process_recieved_packet+0x744>)
   11040:	188a      	adds	r2, r1, r2
   11042:	78d2      	ldrb	r2, [r2, #3]
   11044:	4313      	orrs	r3, r2
   11046:	0018      	movs	r0, r3
   11048:	4b76      	ldr	r3, [pc, #472]	; (11224 <process_recieved_packet+0x748>)
   1104a:	22fa      	movs	r2, #250	; 0xfa
   1104c:	0091      	lsls	r1, r2, #2
   1104e:	4798      	blx	r3
   11050:	0003      	movs	r3, r0
   11052:	001a      	movs	r2, r3
   11054:	4b74      	ldr	r3, [pc, #464]	; (11228 <process_recieved_packet+0x74c>)
   11056:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+3])/1000;
   11058:	4b7a      	ldr	r3, [pc, #488]	; (11244 <process_recieved_packet+0x768>)
   1105a:	781b      	ldrb	r3, [r3, #0]
   1105c:	001a      	movs	r2, r3
   1105e:	4b70      	ldr	r3, [pc, #448]	; (11220 <process_recieved_packet+0x744>)
   11060:	189b      	adds	r3, r3, r2
   11062:	78db      	ldrb	r3, [r3, #3]
   11064:	061a      	lsls	r2, r3, #24
   11066:	4b77      	ldr	r3, [pc, #476]	; (11244 <process_recieved_packet+0x768>)
   11068:	781b      	ldrb	r3, [r3, #0]
   1106a:	3301      	adds	r3, #1
   1106c:	496c      	ldr	r1, [pc, #432]	; (11220 <process_recieved_packet+0x744>)
   1106e:	18cb      	adds	r3, r1, r3
   11070:	78db      	ldrb	r3, [r3, #3]
   11072:	041b      	lsls	r3, r3, #16
   11074:	431a      	orrs	r2, r3
   11076:	4b73      	ldr	r3, [pc, #460]	; (11244 <process_recieved_packet+0x768>)
   11078:	781b      	ldrb	r3, [r3, #0]
   1107a:	3302      	adds	r3, #2
   1107c:	4968      	ldr	r1, [pc, #416]	; (11220 <process_recieved_packet+0x744>)
   1107e:	18cb      	adds	r3, r1, r3
   11080:	78db      	ldrb	r3, [r3, #3]
   11082:	021b      	lsls	r3, r3, #8
   11084:	4313      	orrs	r3, r2
   11086:	4a6f      	ldr	r2, [pc, #444]	; (11244 <process_recieved_packet+0x768>)
   11088:	7812      	ldrb	r2, [r2, #0]
   1108a:	3203      	adds	r2, #3
   1108c:	4964      	ldr	r1, [pc, #400]	; (11220 <process_recieved_packet+0x744>)
   1108e:	188a      	adds	r2, r1, r2
   11090:	78d2      	ldrb	r2, [r2, #3]
   11092:	4313      	orrs	r3, r2
   11094:	0018      	movs	r0, r3
   11096:	4b63      	ldr	r3, [pc, #396]	; (11224 <process_recieved_packet+0x748>)
   11098:	22fa      	movs	r2, #250	; 0xfa
   1109a:	0091      	lsls	r1, r2, #2
   1109c:	4798      	blx	r3
   1109e:	0003      	movs	r3, r0
   110a0:	001a      	movs	r2, r3
   110a2:	4b61      	ldr	r3, [pc, #388]	; (11228 <process_recieved_packet+0x74c>)
   110a4:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+3])/1000;
   110a6:	4b68      	ldr	r3, [pc, #416]	; (11248 <process_recieved_packet+0x76c>)
   110a8:	781b      	ldrb	r3, [r3, #0]
   110aa:	001a      	movs	r2, r3
   110ac:	4b5c      	ldr	r3, [pc, #368]	; (11220 <process_recieved_packet+0x744>)
   110ae:	189b      	adds	r3, r3, r2
   110b0:	78db      	ldrb	r3, [r3, #3]
   110b2:	061a      	lsls	r2, r3, #24
   110b4:	4b64      	ldr	r3, [pc, #400]	; (11248 <process_recieved_packet+0x76c>)
   110b6:	781b      	ldrb	r3, [r3, #0]
   110b8:	3301      	adds	r3, #1
   110ba:	4959      	ldr	r1, [pc, #356]	; (11220 <process_recieved_packet+0x744>)
   110bc:	18cb      	adds	r3, r1, r3
   110be:	78db      	ldrb	r3, [r3, #3]
   110c0:	041b      	lsls	r3, r3, #16
   110c2:	431a      	orrs	r2, r3
   110c4:	4b60      	ldr	r3, [pc, #384]	; (11248 <process_recieved_packet+0x76c>)
   110c6:	781b      	ldrb	r3, [r3, #0]
   110c8:	3302      	adds	r3, #2
   110ca:	4955      	ldr	r1, [pc, #340]	; (11220 <process_recieved_packet+0x744>)
   110cc:	18cb      	adds	r3, r1, r3
   110ce:	78db      	ldrb	r3, [r3, #3]
   110d0:	021b      	lsls	r3, r3, #8
   110d2:	4313      	orrs	r3, r2
   110d4:	4a5c      	ldr	r2, [pc, #368]	; (11248 <process_recieved_packet+0x76c>)
   110d6:	7812      	ldrb	r2, [r2, #0]
   110d8:	3203      	adds	r2, #3
   110da:	4951      	ldr	r1, [pc, #324]	; (11220 <process_recieved_packet+0x744>)
   110dc:	188a      	adds	r2, r1, r2
   110de:	78d2      	ldrb	r2, [r2, #3]
   110e0:	4313      	orrs	r3, r2
   110e2:	0018      	movs	r0, r3
   110e4:	4b4f      	ldr	r3, [pc, #316]	; (11224 <process_recieved_packet+0x748>)
   110e6:	22fa      	movs	r2, #250	; 0xfa
   110e8:	0091      	lsls	r1, r2, #2
   110ea:	4798      	blx	r3
   110ec:	0003      	movs	r3, r0
   110ee:	001a      	movs	r2, r3
   110f0:	4b4d      	ldr	r3, [pc, #308]	; (11228 <process_recieved_packet+0x74c>)
   110f2:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+3])/1000;
   110f4:	4b55      	ldr	r3, [pc, #340]	; (1124c <process_recieved_packet+0x770>)
   110f6:	781b      	ldrb	r3, [r3, #0]
   110f8:	001a      	movs	r2, r3
   110fa:	4b49      	ldr	r3, [pc, #292]	; (11220 <process_recieved_packet+0x744>)
   110fc:	189b      	adds	r3, r3, r2
   110fe:	78db      	ldrb	r3, [r3, #3]
   11100:	061a      	lsls	r2, r3, #24
   11102:	4b52      	ldr	r3, [pc, #328]	; (1124c <process_recieved_packet+0x770>)
   11104:	781b      	ldrb	r3, [r3, #0]
   11106:	3301      	adds	r3, #1
   11108:	4945      	ldr	r1, [pc, #276]	; (11220 <process_recieved_packet+0x744>)
   1110a:	18cb      	adds	r3, r1, r3
   1110c:	78db      	ldrb	r3, [r3, #3]
   1110e:	041b      	lsls	r3, r3, #16
   11110:	431a      	orrs	r2, r3
   11112:	4b4e      	ldr	r3, [pc, #312]	; (1124c <process_recieved_packet+0x770>)
   11114:	781b      	ldrb	r3, [r3, #0]
   11116:	3302      	adds	r3, #2
   11118:	4941      	ldr	r1, [pc, #260]	; (11220 <process_recieved_packet+0x744>)
   1111a:	18cb      	adds	r3, r1, r3
   1111c:	78db      	ldrb	r3, [r3, #3]
   1111e:	021b      	lsls	r3, r3, #8
   11120:	4313      	orrs	r3, r2
   11122:	4a4a      	ldr	r2, [pc, #296]	; (1124c <process_recieved_packet+0x770>)
   11124:	7812      	ldrb	r2, [r2, #0]
   11126:	3203      	adds	r2, #3
   11128:	493d      	ldr	r1, [pc, #244]	; (11220 <process_recieved_packet+0x744>)
   1112a:	188a      	adds	r2, r1, r2
   1112c:	78d2      	ldrb	r2, [r2, #3]
   1112e:	4313      	orrs	r3, r2
   11130:	0018      	movs	r0, r3
   11132:	4b3c      	ldr	r3, [pc, #240]	; (11224 <process_recieved_packet+0x748>)
   11134:	22fa      	movs	r2, #250	; 0xfa
   11136:	0091      	lsls	r1, r2, #2
   11138:	4798      	blx	r3
   1113a:	0003      	movs	r3, r0
   1113c:	001a      	movs	r2, r3
   1113e:	4b3a      	ldr	r3, [pc, #232]	; (11228 <process_recieved_packet+0x74c>)
   11140:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+3])/1000;
   11142:	4b43      	ldr	r3, [pc, #268]	; (11250 <process_recieved_packet+0x774>)
   11144:	781b      	ldrb	r3, [r3, #0]
   11146:	001a      	movs	r2, r3
   11148:	4b35      	ldr	r3, [pc, #212]	; (11220 <process_recieved_packet+0x744>)
   1114a:	189b      	adds	r3, r3, r2
   1114c:	78db      	ldrb	r3, [r3, #3]
   1114e:	061a      	lsls	r2, r3, #24
   11150:	4b3f      	ldr	r3, [pc, #252]	; (11250 <process_recieved_packet+0x774>)
   11152:	781b      	ldrb	r3, [r3, #0]
   11154:	3301      	adds	r3, #1
   11156:	4932      	ldr	r1, [pc, #200]	; (11220 <process_recieved_packet+0x744>)
   11158:	18cb      	adds	r3, r1, r3
   1115a:	78db      	ldrb	r3, [r3, #3]
   1115c:	041b      	lsls	r3, r3, #16
   1115e:	431a      	orrs	r2, r3
   11160:	4b3b      	ldr	r3, [pc, #236]	; (11250 <process_recieved_packet+0x774>)
   11162:	781b      	ldrb	r3, [r3, #0]
   11164:	3302      	adds	r3, #2
   11166:	492e      	ldr	r1, [pc, #184]	; (11220 <process_recieved_packet+0x744>)
   11168:	18cb      	adds	r3, r1, r3
   1116a:	78db      	ldrb	r3, [r3, #3]
   1116c:	021b      	lsls	r3, r3, #8
   1116e:	4313      	orrs	r3, r2
   11170:	4a37      	ldr	r2, [pc, #220]	; (11250 <process_recieved_packet+0x774>)
   11172:	7812      	ldrb	r2, [r2, #0]
   11174:	3203      	adds	r2, #3
   11176:	492a      	ldr	r1, [pc, #168]	; (11220 <process_recieved_packet+0x744>)
   11178:	188a      	adds	r2, r1, r2
   1117a:	78d2      	ldrb	r2, [r2, #3]
   1117c:	4313      	orrs	r3, r2
   1117e:	0018      	movs	r0, r3
   11180:	4b28      	ldr	r3, [pc, #160]	; (11224 <process_recieved_packet+0x748>)
   11182:	22fa      	movs	r2, #250	; 0xfa
   11184:	0091      	lsls	r1, r2, #2
   11186:	4798      	blx	r3
   11188:	0003      	movs	r3, r0
   1118a:	001a      	movs	r2, r3
   1118c:	4b26      	ldr	r3, [pc, #152]	; (11228 <process_recieved_packet+0x74c>)
   1118e:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+3])/1000;
   11190:	4b30      	ldr	r3, [pc, #192]	; (11254 <process_recieved_packet+0x778>)
   11192:	781b      	ldrb	r3, [r3, #0]
   11194:	001a      	movs	r2, r3
   11196:	4b22      	ldr	r3, [pc, #136]	; (11220 <process_recieved_packet+0x744>)
   11198:	189b      	adds	r3, r3, r2
   1119a:	78db      	ldrb	r3, [r3, #3]
   1119c:	061a      	lsls	r2, r3, #24
   1119e:	4b2d      	ldr	r3, [pc, #180]	; (11254 <process_recieved_packet+0x778>)
   111a0:	781b      	ldrb	r3, [r3, #0]
   111a2:	3301      	adds	r3, #1
   111a4:	491e      	ldr	r1, [pc, #120]	; (11220 <process_recieved_packet+0x744>)
   111a6:	18cb      	adds	r3, r1, r3
   111a8:	78db      	ldrb	r3, [r3, #3]
   111aa:	041b      	lsls	r3, r3, #16
   111ac:	431a      	orrs	r2, r3
   111ae:	4b29      	ldr	r3, [pc, #164]	; (11254 <process_recieved_packet+0x778>)
   111b0:	781b      	ldrb	r3, [r3, #0]
   111b2:	3302      	adds	r3, #2
   111b4:	491a      	ldr	r1, [pc, #104]	; (11220 <process_recieved_packet+0x744>)
   111b6:	18cb      	adds	r3, r1, r3
   111b8:	78db      	ldrb	r3, [r3, #3]
   111ba:	021b      	lsls	r3, r3, #8
   111bc:	4313      	orrs	r3, r2
   111be:	4a25      	ldr	r2, [pc, #148]	; (11254 <process_recieved_packet+0x778>)
   111c0:	7812      	ldrb	r2, [r2, #0]
   111c2:	3203      	adds	r2, #3
   111c4:	4916      	ldr	r1, [pc, #88]	; (11220 <process_recieved_packet+0x744>)
   111c6:	188a      	adds	r2, r1, r2
   111c8:	78d2      	ldrb	r2, [r2, #3]
   111ca:	4313      	orrs	r3, r2
   111cc:	0018      	movs	r0, r3
   111ce:	4b15      	ldr	r3, [pc, #84]	; (11224 <process_recieved_packet+0x748>)
   111d0:	22fa      	movs	r2, #250	; 0xfa
   111d2:	0091      	lsls	r1, r2, #2
   111d4:	4798      	blx	r3
   111d6:	0003      	movs	r3, r0
   111d8:	001a      	movs	r2, r3
   111da:	4b1f      	ldr	r3, [pc, #124]	; (11258 <process_recieved_packet+0x77c>)
   111dc:	0010      	movs	r0, r2
   111de:	4798      	blx	r3
   111e0:	1c02      	adds	r2, r0, #0
   111e2:	4b11      	ldr	r3, [pc, #68]	; (11228 <process_recieved_packet+0x74c>)
   111e4:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+3])/1000;
   111e6:	4b1d      	ldr	r3, [pc, #116]	; (1125c <process_recieved_packet+0x780>)
   111e8:	781b      	ldrb	r3, [r3, #0]
   111ea:	001a      	movs	r2, r3
   111ec:	4b0c      	ldr	r3, [pc, #48]	; (11220 <process_recieved_packet+0x744>)
   111ee:	189b      	adds	r3, r3, r2
   111f0:	78db      	ldrb	r3, [r3, #3]
   111f2:	061a      	lsls	r2, r3, #24
   111f4:	4b19      	ldr	r3, [pc, #100]	; (1125c <process_recieved_packet+0x780>)
   111f6:	781b      	ldrb	r3, [r3, #0]
   111f8:	3301      	adds	r3, #1
   111fa:	4909      	ldr	r1, [pc, #36]	; (11220 <process_recieved_packet+0x744>)
   111fc:	18cb      	adds	r3, r1, r3
   111fe:	78db      	ldrb	r3, [r3, #3]
   11200:	041b      	lsls	r3, r3, #16
   11202:	431a      	orrs	r2, r3
   11204:	4b15      	ldr	r3, [pc, #84]	; (1125c <process_recieved_packet+0x780>)
   11206:	781b      	ldrb	r3, [r3, #0]
   11208:	3302      	adds	r3, #2
   1120a:	4905      	ldr	r1, [pc, #20]	; (11220 <process_recieved_packet+0x744>)
   1120c:	18cb      	adds	r3, r1, r3
   1120e:	78db      	ldrb	r3, [r3, #3]
   11210:	021b      	lsls	r3, r3, #8
   11212:	e025      	b.n	11260 <process_recieved_packet+0x784>
   11214:	200003ca 	.word	0x200003ca
   11218:	200000db 	.word	0x200000db
   1121c:	200003dd 	.word	0x200003dd
   11220:	20001590 	.word	0x20001590
   11224:	00018521 	.word	0x00018521
   11228:	20001a50 	.word	0x20001a50
   1122c:	200003de 	.word	0x200003de
   11230:	200003df 	.word	0x200003df
   11234:	200003e0 	.word	0x200003e0
   11238:	200003e1 	.word	0x200003e1
   1123c:	200003e2 	.word	0x200003e2
   11240:	200003e3 	.word	0x200003e3
   11244:	200003e4 	.word	0x200003e4
   11248:	200003e5 	.word	0x200003e5
   1124c:	200003e6 	.word	0x200003e6
   11250:	200003e7 	.word	0x200003e7
   11254:	200003e8 	.word	0x200003e8
   11258:	00019565 	.word	0x00019565
   1125c:	200003e9 	.word	0x200003e9
   11260:	4313      	orrs	r3, r2
   11262:	4a7f      	ldr	r2, [pc, #508]	; (11460 <process_recieved_packet+0x984>)
   11264:	7812      	ldrb	r2, [r2, #0]
   11266:	3203      	adds	r2, #3
   11268:	497e      	ldr	r1, [pc, #504]	; (11464 <process_recieved_packet+0x988>)
   1126a:	188a      	adds	r2, r1, r2
   1126c:	78d2      	ldrb	r2, [r2, #3]
   1126e:	4313      	orrs	r3, r2
   11270:	0018      	movs	r0, r3
   11272:	4b7d      	ldr	r3, [pc, #500]	; (11468 <process_recieved_packet+0x98c>)
   11274:	22fa      	movs	r2, #250	; 0xfa
   11276:	0091      	lsls	r1, r2, #2
   11278:	4798      	blx	r3
   1127a:	0003      	movs	r3, r0
   1127c:	001a      	movs	r2, r3
   1127e:	4b7b      	ldr	r3, [pc, #492]	; (1146c <process_recieved_packet+0x990>)
   11280:	0010      	movs	r0, r2
   11282:	4798      	blx	r3
   11284:	1c02      	adds	r2, r0, #0
   11286:	4b7a      	ldr	r3, [pc, #488]	; (11470 <process_recieved_packet+0x994>)
   11288:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+3])/1000;
   1128a:	4b7a      	ldr	r3, [pc, #488]	; (11474 <process_recieved_packet+0x998>)
   1128c:	781b      	ldrb	r3, [r3, #0]
   1128e:	001a      	movs	r2, r3
   11290:	4b74      	ldr	r3, [pc, #464]	; (11464 <process_recieved_packet+0x988>)
   11292:	189b      	adds	r3, r3, r2
   11294:	78db      	ldrb	r3, [r3, #3]
   11296:	061a      	lsls	r2, r3, #24
   11298:	4b76      	ldr	r3, [pc, #472]	; (11474 <process_recieved_packet+0x998>)
   1129a:	781b      	ldrb	r3, [r3, #0]
   1129c:	3301      	adds	r3, #1
   1129e:	4971      	ldr	r1, [pc, #452]	; (11464 <process_recieved_packet+0x988>)
   112a0:	18cb      	adds	r3, r1, r3
   112a2:	78db      	ldrb	r3, [r3, #3]
   112a4:	041b      	lsls	r3, r3, #16
   112a6:	431a      	orrs	r2, r3
   112a8:	4b72      	ldr	r3, [pc, #456]	; (11474 <process_recieved_packet+0x998>)
   112aa:	781b      	ldrb	r3, [r3, #0]
   112ac:	3302      	adds	r3, #2
   112ae:	496d      	ldr	r1, [pc, #436]	; (11464 <process_recieved_packet+0x988>)
   112b0:	18cb      	adds	r3, r1, r3
   112b2:	78db      	ldrb	r3, [r3, #3]
   112b4:	021b      	lsls	r3, r3, #8
   112b6:	4313      	orrs	r3, r2
   112b8:	4a6e      	ldr	r2, [pc, #440]	; (11474 <process_recieved_packet+0x998>)
   112ba:	7812      	ldrb	r2, [r2, #0]
   112bc:	3203      	adds	r2, #3
   112be:	4969      	ldr	r1, [pc, #420]	; (11464 <process_recieved_packet+0x988>)
   112c0:	188a      	adds	r2, r1, r2
   112c2:	78d2      	ldrb	r2, [r2, #3]
   112c4:	4313      	orrs	r3, r2
   112c6:	0018      	movs	r0, r3
   112c8:	4b67      	ldr	r3, [pc, #412]	; (11468 <process_recieved_packet+0x98c>)
   112ca:	22fa      	movs	r2, #250	; 0xfa
   112cc:	0091      	lsls	r1, r2, #2
   112ce:	4798      	blx	r3
   112d0:	0003      	movs	r3, r0
   112d2:	001a      	movs	r2, r3
   112d4:	4b66      	ldr	r3, [pc, #408]	; (11470 <process_recieved_packet+0x994>)
   112d6:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+3])/1000;
   112d8:	4b67      	ldr	r3, [pc, #412]	; (11478 <process_recieved_packet+0x99c>)
   112da:	781b      	ldrb	r3, [r3, #0]
   112dc:	001a      	movs	r2, r3
   112de:	4b61      	ldr	r3, [pc, #388]	; (11464 <process_recieved_packet+0x988>)
   112e0:	189b      	adds	r3, r3, r2
   112e2:	78db      	ldrb	r3, [r3, #3]
   112e4:	061a      	lsls	r2, r3, #24
   112e6:	4b64      	ldr	r3, [pc, #400]	; (11478 <process_recieved_packet+0x99c>)
   112e8:	781b      	ldrb	r3, [r3, #0]
   112ea:	3301      	adds	r3, #1
   112ec:	495d      	ldr	r1, [pc, #372]	; (11464 <process_recieved_packet+0x988>)
   112ee:	18cb      	adds	r3, r1, r3
   112f0:	78db      	ldrb	r3, [r3, #3]
   112f2:	041b      	lsls	r3, r3, #16
   112f4:	431a      	orrs	r2, r3
   112f6:	4b60      	ldr	r3, [pc, #384]	; (11478 <process_recieved_packet+0x99c>)
   112f8:	781b      	ldrb	r3, [r3, #0]
   112fa:	3302      	adds	r3, #2
   112fc:	4959      	ldr	r1, [pc, #356]	; (11464 <process_recieved_packet+0x988>)
   112fe:	18cb      	adds	r3, r1, r3
   11300:	78db      	ldrb	r3, [r3, #3]
   11302:	021b      	lsls	r3, r3, #8
   11304:	4313      	orrs	r3, r2
   11306:	4a5c      	ldr	r2, [pc, #368]	; (11478 <process_recieved_packet+0x99c>)
   11308:	7812      	ldrb	r2, [r2, #0]
   1130a:	3203      	adds	r2, #3
   1130c:	4955      	ldr	r1, [pc, #340]	; (11464 <process_recieved_packet+0x988>)
   1130e:	188a      	adds	r2, r1, r2
   11310:	78d2      	ldrb	r2, [r2, #3]
   11312:	4313      	orrs	r3, r2
   11314:	0018      	movs	r0, r3
   11316:	4b54      	ldr	r3, [pc, #336]	; (11468 <process_recieved_packet+0x98c>)
   11318:	22fa      	movs	r2, #250	; 0xfa
   1131a:	0091      	lsls	r1, r2, #2
   1131c:	4798      	blx	r3
   1131e:	0003      	movs	r3, r0
   11320:	001a      	movs	r2, r3
   11322:	4b53      	ldr	r3, [pc, #332]	; (11470 <process_recieved_packet+0x994>)
   11324:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2])/1000;
   11326:	4b55      	ldr	r3, [pc, #340]	; (1147c <process_recieved_packet+0x9a0>)
   11328:	781b      	ldrb	r3, [r3, #0]
   1132a:	001a      	movs	r2, r3
   1132c:	4b4d      	ldr	r3, [pc, #308]	; (11464 <process_recieved_packet+0x988>)
   1132e:	189b      	adds	r3, r3, r2
   11330:	78db      	ldrb	r3, [r3, #3]
   11332:	061a      	lsls	r2, r3, #24
   11334:	4b51      	ldr	r3, [pc, #324]	; (1147c <process_recieved_packet+0x9a0>)
   11336:	781b      	ldrb	r3, [r3, #0]
   11338:	3301      	adds	r3, #1
   1133a:	494a      	ldr	r1, [pc, #296]	; (11464 <process_recieved_packet+0x988>)
   1133c:	18cb      	adds	r3, r1, r3
   1133e:	78db      	ldrb	r3, [r3, #3]
   11340:	041b      	lsls	r3, r3, #16
   11342:	431a      	orrs	r2, r3
   11344:	4b4d      	ldr	r3, [pc, #308]	; (1147c <process_recieved_packet+0x9a0>)
   11346:	781b      	ldrb	r3, [r3, #0]
   11348:	3302      	adds	r3, #2
   1134a:	4946      	ldr	r1, [pc, #280]	; (11464 <process_recieved_packet+0x988>)
   1134c:	18cb      	adds	r3, r1, r3
   1134e:	78db      	ldrb	r3, [r3, #3]
   11350:	021b      	lsls	r3, r3, #8
   11352:	4313      	orrs	r3, r2
   11354:	4a49      	ldr	r2, [pc, #292]	; (1147c <process_recieved_packet+0x9a0>)
   11356:	7812      	ldrb	r2, [r2, #0]
   11358:	3202      	adds	r2, #2
   1135a:	4942      	ldr	r1, [pc, #264]	; (11464 <process_recieved_packet+0x988>)
   1135c:	188a      	adds	r2, r1, r2
   1135e:	78d2      	ldrb	r2, [r2, #3]
   11360:	4313      	orrs	r3, r2
   11362:	0018      	movs	r0, r3
   11364:	4b40      	ldr	r3, [pc, #256]	; (11468 <process_recieved_packet+0x98c>)
   11366:	22fa      	movs	r2, #250	; 0xfa
   11368:	0091      	lsls	r1, r2, #2
   1136a:	4798      	blx	r3
   1136c:	0003      	movs	r3, r0
   1136e:	001a      	movs	r2, r3
   11370:	4b3f      	ldr	r3, [pc, #252]	; (11470 <process_recieved_packet+0x994>)
   11372:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+3])/1000;
   11374:	4b42      	ldr	r3, [pc, #264]	; (11480 <process_recieved_packet+0x9a4>)
   11376:	781b      	ldrb	r3, [r3, #0]
   11378:	001a      	movs	r2, r3
   1137a:	4b3a      	ldr	r3, [pc, #232]	; (11464 <process_recieved_packet+0x988>)
   1137c:	189b      	adds	r3, r3, r2
   1137e:	78db      	ldrb	r3, [r3, #3]
   11380:	061a      	lsls	r2, r3, #24
   11382:	4b3f      	ldr	r3, [pc, #252]	; (11480 <process_recieved_packet+0x9a4>)
   11384:	781b      	ldrb	r3, [r3, #0]
   11386:	3301      	adds	r3, #1
   11388:	4936      	ldr	r1, [pc, #216]	; (11464 <process_recieved_packet+0x988>)
   1138a:	18cb      	adds	r3, r1, r3
   1138c:	78db      	ldrb	r3, [r3, #3]
   1138e:	041b      	lsls	r3, r3, #16
   11390:	431a      	orrs	r2, r3
   11392:	4b3b      	ldr	r3, [pc, #236]	; (11480 <process_recieved_packet+0x9a4>)
   11394:	781b      	ldrb	r3, [r3, #0]
   11396:	3302      	adds	r3, #2
   11398:	4932      	ldr	r1, [pc, #200]	; (11464 <process_recieved_packet+0x988>)
   1139a:	18cb      	adds	r3, r1, r3
   1139c:	78db      	ldrb	r3, [r3, #3]
   1139e:	021b      	lsls	r3, r3, #8
   113a0:	4313      	orrs	r3, r2
   113a2:	4a37      	ldr	r2, [pc, #220]	; (11480 <process_recieved_packet+0x9a4>)
   113a4:	7812      	ldrb	r2, [r2, #0]
   113a6:	3203      	adds	r2, #3
   113a8:	492e      	ldr	r1, [pc, #184]	; (11464 <process_recieved_packet+0x988>)
   113aa:	188a      	adds	r2, r1, r2
   113ac:	78d2      	ldrb	r2, [r2, #3]
   113ae:	4313      	orrs	r3, r2
   113b0:	0018      	movs	r0, r3
   113b2:	4b2d      	ldr	r3, [pc, #180]	; (11468 <process_recieved_packet+0x98c>)
   113b4:	22fa      	movs	r2, #250	; 0xfa
   113b6:	0091      	lsls	r1, r2, #2
   113b8:	4798      	blx	r3
   113ba:	0003      	movs	r3, r0
   113bc:	001a      	movs	r2, r3
   113be:	4b2c      	ldr	r3, [pc, #176]	; (11470 <process_recieved_packet+0x994>)
   113c0:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+3])/1000;
   113c2:	4b30      	ldr	r3, [pc, #192]	; (11484 <process_recieved_packet+0x9a8>)
   113c4:	781b      	ldrb	r3, [r3, #0]
   113c6:	001a      	movs	r2, r3
   113c8:	4b26      	ldr	r3, [pc, #152]	; (11464 <process_recieved_packet+0x988>)
   113ca:	189b      	adds	r3, r3, r2
   113cc:	78db      	ldrb	r3, [r3, #3]
   113ce:	061a      	lsls	r2, r3, #24
   113d0:	4b2c      	ldr	r3, [pc, #176]	; (11484 <process_recieved_packet+0x9a8>)
   113d2:	781b      	ldrb	r3, [r3, #0]
   113d4:	3301      	adds	r3, #1
   113d6:	4923      	ldr	r1, [pc, #140]	; (11464 <process_recieved_packet+0x988>)
   113d8:	18cb      	adds	r3, r1, r3
   113da:	78db      	ldrb	r3, [r3, #3]
   113dc:	041b      	lsls	r3, r3, #16
   113de:	431a      	orrs	r2, r3
   113e0:	4b28      	ldr	r3, [pc, #160]	; (11484 <process_recieved_packet+0x9a8>)
   113e2:	781b      	ldrb	r3, [r3, #0]
   113e4:	3302      	adds	r3, #2
   113e6:	491f      	ldr	r1, [pc, #124]	; (11464 <process_recieved_packet+0x988>)
   113e8:	18cb      	adds	r3, r1, r3
   113ea:	78db      	ldrb	r3, [r3, #3]
   113ec:	021b      	lsls	r3, r3, #8
   113ee:	4313      	orrs	r3, r2
   113f0:	4a24      	ldr	r2, [pc, #144]	; (11484 <process_recieved_packet+0x9a8>)
   113f2:	7812      	ldrb	r2, [r2, #0]
   113f4:	3203      	adds	r2, #3
   113f6:	491b      	ldr	r1, [pc, #108]	; (11464 <process_recieved_packet+0x988>)
   113f8:	188a      	adds	r2, r1, r2
   113fa:	78d2      	ldrb	r2, [r2, #3]
   113fc:	4313      	orrs	r3, r2
   113fe:	0018      	movs	r0, r3
   11400:	4b19      	ldr	r3, [pc, #100]	; (11468 <process_recieved_packet+0x98c>)
   11402:	22fa      	movs	r2, #250	; 0xfa
   11404:	0091      	lsls	r1, r2, #2
   11406:	4798      	blx	r3
   11408:	0003      	movs	r3, r0
   1140a:	001a      	movs	r2, r3
   1140c:	4b18      	ldr	r3, [pc, #96]	; (11470 <process_recieved_packet+0x994>)
   1140e:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+3])/1000;
   11410:	4b1d      	ldr	r3, [pc, #116]	; (11488 <process_recieved_packet+0x9ac>)
   11412:	781b      	ldrb	r3, [r3, #0]
   11414:	001a      	movs	r2, r3
   11416:	4b13      	ldr	r3, [pc, #76]	; (11464 <process_recieved_packet+0x988>)
   11418:	189b      	adds	r3, r3, r2
   1141a:	78db      	ldrb	r3, [r3, #3]
   1141c:	061a      	lsls	r2, r3, #24
   1141e:	4b1a      	ldr	r3, [pc, #104]	; (11488 <process_recieved_packet+0x9ac>)
   11420:	781b      	ldrb	r3, [r3, #0]
   11422:	3301      	adds	r3, #1
   11424:	490f      	ldr	r1, [pc, #60]	; (11464 <process_recieved_packet+0x988>)
   11426:	18cb      	adds	r3, r1, r3
   11428:	78db      	ldrb	r3, [r3, #3]
   1142a:	041b      	lsls	r3, r3, #16
   1142c:	431a      	orrs	r2, r3
   1142e:	4b16      	ldr	r3, [pc, #88]	; (11488 <process_recieved_packet+0x9ac>)
   11430:	781b      	ldrb	r3, [r3, #0]
   11432:	3302      	adds	r3, #2
   11434:	490b      	ldr	r1, [pc, #44]	; (11464 <process_recieved_packet+0x988>)
   11436:	18cb      	adds	r3, r1, r3
   11438:	78db      	ldrb	r3, [r3, #3]
   1143a:	021b      	lsls	r3, r3, #8
   1143c:	4313      	orrs	r3, r2
   1143e:	4a12      	ldr	r2, [pc, #72]	; (11488 <process_recieved_packet+0x9ac>)
   11440:	7812      	ldrb	r2, [r2, #0]
   11442:	3203      	adds	r2, #3
   11444:	4907      	ldr	r1, [pc, #28]	; (11464 <process_recieved_packet+0x988>)
   11446:	188a      	adds	r2, r1, r2
   11448:	78d2      	ldrb	r2, [r2, #3]
   1144a:	4313      	orrs	r3, r2
   1144c:	0018      	movs	r0, r3
   1144e:	4b06      	ldr	r3, [pc, #24]	; (11468 <process_recieved_packet+0x98c>)
   11450:	22fa      	movs	r2, #250	; 0xfa
   11452:	0091      	lsls	r1, r2, #2
   11454:	4798      	blx	r3
   11456:	0003      	movs	r3, r0
   11458:	001a      	movs	r2, r3
   1145a:	4b05      	ldr	r3, [pc, #20]	; (11470 <process_recieved_packet+0x994>)
   1145c:	649a      	str	r2, [r3, #72]	; 0x48
   1145e:	e136      	b.n	116ce <process_recieved_packet+0xbf2>
   11460:	200003e9 	.word	0x200003e9
   11464:	20001590 	.word	0x20001590
   11468:	00018521 	.word	0x00018521
   1146c:	00019565 	.word	0x00019565
   11470:	20001a50 	.word	0x20001a50
   11474:	200003ea 	.word	0x200003ea
   11478:	200003eb 	.word	0x200003eb
   1147c:	200003ec 	.word	0x200003ec
   11480:	200003ed 	.word	0x200003ed
   11484:	200003ee 	.word	0x200003ee
   11488:	200003ef 	.word	0x200003ef
				mcconf_limits.motor_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MAX);
   1148c:	4baf      	ldr	r3, [pc, #700]	; (1174c <process_recieved_packet+0xc70>)
   1148e:	781b      	ldrb	r3, [r3, #0]
   11490:	b25a      	sxtb	r2, r3
   11492:	4baf      	ldr	r3, [pc, #700]	; (11750 <process_recieved_packet+0xc74>)
   11494:	0011      	movs	r1, r2
   11496:	0018      	movs	r0, r3
   11498:	4bae      	ldr	r3, [pc, #696]	; (11754 <process_recieved_packet+0xc78>)
   1149a:	4798      	blx	r3
   1149c:	1c02      	adds	r2, r0, #0
   1149e:	4bae      	ldr	r3, [pc, #696]	; (11758 <process_recieved_packet+0xc7c>)
   114a0:	1c10      	adds	r0, r2, #0
   114a2:	4798      	blx	r3
   114a4:	0002      	movs	r2, r0
   114a6:	4bad      	ldr	r3, [pc, #692]	; (1175c <process_recieved_packet+0xc80>)
   114a8:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MIN);
   114aa:	4bad      	ldr	r3, [pc, #692]	; (11760 <process_recieved_packet+0xc84>)
   114ac:	781b      	ldrb	r3, [r3, #0]
   114ae:	b25a      	sxtb	r2, r3
   114b0:	4ba7      	ldr	r3, [pc, #668]	; (11750 <process_recieved_packet+0xc74>)
   114b2:	0011      	movs	r1, r2
   114b4:	0018      	movs	r0, r3
   114b6:	4ba7      	ldr	r3, [pc, #668]	; (11754 <process_recieved_packet+0xc78>)
   114b8:	4798      	blx	r3
   114ba:	1c02      	adds	r2, r0, #0
   114bc:	4ba6      	ldr	r3, [pc, #664]	; (11758 <process_recieved_packet+0xc7c>)
   114be:	1c10      	adds	r0, r2, #0
   114c0:	4798      	blx	r3
   114c2:	0002      	movs	r2, r0
   114c4:	4ba5      	ldr	r3, [pc, #660]	; (1175c <process_recieved_packet+0xc80>)
   114c6:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MAX);
   114c8:	4ba6      	ldr	r3, [pc, #664]	; (11764 <process_recieved_packet+0xc88>)
   114ca:	781b      	ldrb	r3, [r3, #0]
   114cc:	b25a      	sxtb	r2, r3
   114ce:	4ba0      	ldr	r3, [pc, #640]	; (11750 <process_recieved_packet+0xc74>)
   114d0:	0011      	movs	r1, r2
   114d2:	0018      	movs	r0, r3
   114d4:	4b9f      	ldr	r3, [pc, #636]	; (11754 <process_recieved_packet+0xc78>)
   114d6:	4798      	blx	r3
   114d8:	1c02      	adds	r2, r0, #0
   114da:	4b9f      	ldr	r3, [pc, #636]	; (11758 <process_recieved_packet+0xc7c>)
   114dc:	1c10      	adds	r0, r2, #0
   114de:	4798      	blx	r3
   114e0:	0002      	movs	r2, r0
   114e2:	4b9e      	ldr	r3, [pc, #632]	; (1175c <process_recieved_packet+0xc80>)
   114e4:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MIN);
   114e6:	4ba0      	ldr	r3, [pc, #640]	; (11768 <process_recieved_packet+0xc8c>)
   114e8:	781b      	ldrb	r3, [r3, #0]
   114ea:	b25a      	sxtb	r2, r3
   114ec:	4b98      	ldr	r3, [pc, #608]	; (11750 <process_recieved_packet+0xc74>)
   114ee:	0011      	movs	r1, r2
   114f0:	0018      	movs	r0, r3
   114f2:	4b98      	ldr	r3, [pc, #608]	; (11754 <process_recieved_packet+0xc78>)
   114f4:	4798      	blx	r3
   114f6:	1c02      	adds	r2, r0, #0
   114f8:	4b97      	ldr	r3, [pc, #604]	; (11758 <process_recieved_packet+0xc7c>)
   114fa:	1c10      	adds	r0, r2, #0
   114fc:	4798      	blx	r3
   114fe:	0002      	movs	r2, r0
   11500:	4b96      	ldr	r3, [pc, #600]	; (1175c <process_recieved_packet+0xc80>)
   11502:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ABS_CURR_MAX);
   11504:	4b99      	ldr	r3, [pc, #612]	; (1176c <process_recieved_packet+0xc90>)
   11506:	781b      	ldrb	r3, [r3, #0]
   11508:	b25a      	sxtb	r2, r3
   1150a:	4b91      	ldr	r3, [pc, #580]	; (11750 <process_recieved_packet+0xc74>)
   1150c:	0011      	movs	r1, r2
   1150e:	0018      	movs	r0, r3
   11510:	4b90      	ldr	r3, [pc, #576]	; (11754 <process_recieved_packet+0xc78>)
   11512:	4798      	blx	r3
   11514:	1c02      	adds	r2, r0, #0
   11516:	4b90      	ldr	r3, [pc, #576]	; (11758 <process_recieved_packet+0xc7c>)
   11518:	1c10      	adds	r0, r2, #0
   1151a:	4798      	blx	r3
   1151c:	0002      	movs	r2, r0
   1151e:	4b8f      	ldr	r3, [pc, #572]	; (1175c <process_recieved_packet+0xc80>)
   11520:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MIN);
   11522:	4b93      	ldr	r3, [pc, #588]	; (11770 <process_recieved_packet+0xc94>)
   11524:	781b      	ldrb	r3, [r3, #0]
   11526:	b25a      	sxtb	r2, r3
   11528:	4b89      	ldr	r3, [pc, #548]	; (11750 <process_recieved_packet+0xc74>)
   1152a:	0011      	movs	r1, r2
   1152c:	0018      	movs	r0, r3
   1152e:	4b89      	ldr	r3, [pc, #548]	; (11754 <process_recieved_packet+0xc78>)
   11530:	4798      	blx	r3
   11532:	1c02      	adds	r2, r0, #0
   11534:	4b88      	ldr	r3, [pc, #544]	; (11758 <process_recieved_packet+0xc7c>)
   11536:	1c10      	adds	r0, r2, #0
   11538:	4798      	blx	r3
   1153a:	0002      	movs	r2, r0
   1153c:	4b87      	ldr	r3, [pc, #540]	; (1175c <process_recieved_packet+0xc80>)
   1153e:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MAX);
   11540:	4b8c      	ldr	r3, [pc, #560]	; (11774 <process_recieved_packet+0xc98>)
   11542:	781b      	ldrb	r3, [r3, #0]
   11544:	b25a      	sxtb	r2, r3
   11546:	4b82      	ldr	r3, [pc, #520]	; (11750 <process_recieved_packet+0xc74>)
   11548:	0011      	movs	r1, r2
   1154a:	0018      	movs	r0, r3
   1154c:	4b81      	ldr	r3, [pc, #516]	; (11754 <process_recieved_packet+0xc78>)
   1154e:	4798      	blx	r3
   11550:	1c02      	adds	r2, r0, #0
   11552:	4b81      	ldr	r3, [pc, #516]	; (11758 <process_recieved_packet+0xc7c>)
   11554:	1c10      	adds	r0, r2, #0
   11556:	4798      	blx	r3
   11558:	0002      	movs	r2, r0
   1155a:	4b80      	ldr	r3, [pc, #512]	; (1175c <process_recieved_packet+0xc80>)
   1155c:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_MAX);
   1155e:	4b86      	ldr	r3, [pc, #536]	; (11778 <process_recieved_packet+0xc9c>)
   11560:	781b      	ldrb	r3, [r3, #0]
   11562:	b25a      	sxtb	r2, r3
   11564:	4b7a      	ldr	r3, [pc, #488]	; (11750 <process_recieved_packet+0xc74>)
   11566:	0011      	movs	r1, r2
   11568:	0018      	movs	r0, r3
   1156a:	4b7a      	ldr	r3, [pc, #488]	; (11754 <process_recieved_packet+0xc78>)
   1156c:	4798      	blx	r3
   1156e:	1c02      	adds	r2, r0, #0
   11570:	4b79      	ldr	r3, [pc, #484]	; (11758 <process_recieved_packet+0xc7c>)
   11572:	1c10      	adds	r0, r2, #0
   11574:	4798      	blx	r3
   11576:	0002      	movs	r2, r0
   11578:	4b78      	ldr	r3, [pc, #480]	; (1175c <process_recieved_packet+0xc80>)
   1157a:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_CC_MAX);
   1157c:	4b7f      	ldr	r3, [pc, #508]	; (1177c <process_recieved_packet+0xca0>)
   1157e:	781b      	ldrb	r3, [r3, #0]
   11580:	b25a      	sxtb	r2, r3
   11582:	4b73      	ldr	r3, [pc, #460]	; (11750 <process_recieved_packet+0xc74>)
   11584:	0011      	movs	r1, r2
   11586:	0018      	movs	r0, r3
   11588:	4b72      	ldr	r3, [pc, #456]	; (11754 <process_recieved_packet+0xc78>)
   1158a:	4798      	blx	r3
   1158c:	1c02      	adds	r2, r0, #0
   1158e:	4b72      	ldr	r3, [pc, #456]	; (11758 <process_recieved_packet+0xc7c>)
   11590:	1c10      	adds	r0, r2, #0
   11592:	4798      	blx	r3
   11594:	0002      	movs	r2, r0
   11596:	4b71      	ldr	r3, [pc, #452]	; (1175c <process_recieved_packet+0xc80>)
   11598:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MIN);
   1159a:	4b79      	ldr	r3, [pc, #484]	; (11780 <process_recieved_packet+0xca4>)
   1159c:	781b      	ldrb	r3, [r3, #0]
   1159e:	b25a      	sxtb	r2, r3
   115a0:	4b6b      	ldr	r3, [pc, #428]	; (11750 <process_recieved_packet+0xc74>)
   115a2:	0011      	movs	r1, r2
   115a4:	0018      	movs	r0, r3
   115a6:	4b6b      	ldr	r3, [pc, #428]	; (11754 <process_recieved_packet+0xc78>)
   115a8:	4798      	blx	r3
   115aa:	1c02      	adds	r2, r0, #0
   115ac:	4b6a      	ldr	r3, [pc, #424]	; (11758 <process_recieved_packet+0xc7c>)
   115ae:	1c10      	adds	r0, r2, #0
   115b0:	4798      	blx	r3
   115b2:	0002      	movs	r2, r0
   115b4:	4b69      	ldr	r3, [pc, #420]	; (1175c <process_recieved_packet+0xc80>)
   115b6:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MAX);
   115b8:	4b72      	ldr	r3, [pc, #456]	; (11784 <process_recieved_packet+0xca8>)
   115ba:	781b      	ldrb	r3, [r3, #0]
   115bc:	b25a      	sxtb	r2, r3
   115be:	4b64      	ldr	r3, [pc, #400]	; (11750 <process_recieved_packet+0xc74>)
   115c0:	0011      	movs	r1, r2
   115c2:	0018      	movs	r0, r3
   115c4:	4b63      	ldr	r3, [pc, #396]	; (11754 <process_recieved_packet+0xc78>)
   115c6:	4798      	blx	r3
   115c8:	1c02      	adds	r2, r0, #0
   115ca:	4b63      	ldr	r3, [pc, #396]	; (11758 <process_recieved_packet+0xc7c>)
   115cc:	1c10      	adds	r0, r2, #0
   115ce:	4798      	blx	r3
   115d0:	0002      	movs	r2, r0
   115d2:	4b62      	ldr	r3, [pc, #392]	; (1175c <process_recieved_packet+0xc80>)
   115d4:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_STRT);
   115d6:	4b6c      	ldr	r3, [pc, #432]	; (11788 <process_recieved_packet+0xcac>)
   115d8:	781b      	ldrb	r3, [r3, #0]
   115da:	b25a      	sxtb	r2, r3
   115dc:	4b5c      	ldr	r3, [pc, #368]	; (11750 <process_recieved_packet+0xc74>)
   115de:	0011      	movs	r1, r2
   115e0:	0018      	movs	r0, r3
   115e2:	4b5c      	ldr	r3, [pc, #368]	; (11754 <process_recieved_packet+0xc78>)
   115e4:	4798      	blx	r3
   115e6:	1c02      	adds	r2, r0, #0
   115e8:	4b5c      	ldr	r3, [pc, #368]	; (1175c <process_recieved_packet+0xc80>)
   115ea:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_END);
   115ec:	4b67      	ldr	r3, [pc, #412]	; (1178c <process_recieved_packet+0xcb0>)
   115ee:	781b      	ldrb	r3, [r3, #0]
   115f0:	b25a      	sxtb	r2, r3
   115f2:	4b57      	ldr	r3, [pc, #348]	; (11750 <process_recieved_packet+0xc74>)
   115f4:	0011      	movs	r1, r2
   115f6:	0018      	movs	r0, r3
   115f8:	4b56      	ldr	r3, [pc, #344]	; (11754 <process_recieved_packet+0xc78>)
   115fa:	4798      	blx	r3
   115fc:	1c02      	adds	r2, r0, #0
   115fe:	4b57      	ldr	r3, [pc, #348]	; (1175c <process_recieved_packet+0xc80>)
   11600:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_STRT);
   11602:	4b63      	ldr	r3, [pc, #396]	; (11790 <process_recieved_packet+0xcb4>)
   11604:	781b      	ldrb	r3, [r3, #0]
   11606:	b25a      	sxtb	r2, r3
   11608:	4b51      	ldr	r3, [pc, #324]	; (11750 <process_recieved_packet+0xc74>)
   1160a:	0011      	movs	r1, r2
   1160c:	0018      	movs	r0, r3
   1160e:	4b51      	ldr	r3, [pc, #324]	; (11754 <process_recieved_packet+0xc78>)
   11610:	4798      	blx	r3
   11612:	1c02      	adds	r2, r0, #0
   11614:	4b50      	ldr	r3, [pc, #320]	; (11758 <process_recieved_packet+0xc7c>)
   11616:	1c10      	adds	r0, r2, #0
   11618:	4798      	blx	r3
   1161a:	0002      	movs	r2, r0
   1161c:	4b4f      	ldr	r3, [pc, #316]	; (1175c <process_recieved_packet+0xc80>)
   1161e:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_END);
   11620:	4b5c      	ldr	r3, [pc, #368]	; (11794 <process_recieved_packet+0xcb8>)
   11622:	781b      	ldrb	r3, [r3, #0]
   11624:	b25a      	sxtb	r2, r3
   11626:	4b4a      	ldr	r3, [pc, #296]	; (11750 <process_recieved_packet+0xc74>)
   11628:	0011      	movs	r1, r2
   1162a:	0018      	movs	r0, r3
   1162c:	4b49      	ldr	r3, [pc, #292]	; (11754 <process_recieved_packet+0xc78>)
   1162e:	4798      	blx	r3
   11630:	1c02      	adds	r2, r0, #0
   11632:	4b49      	ldr	r3, [pc, #292]	; (11758 <process_recieved_packet+0xc7c>)
   11634:	1c10      	adds	r0, r2, #0
   11636:	4798      	blx	r3
   11638:	0002      	movs	r2, r0
   1163a:	4b48      	ldr	r3, [pc, #288]	; (1175c <process_recieved_packet+0xc80>)
   1163c:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_STRT);
   1163e:	4b56      	ldr	r3, [pc, #344]	; (11798 <process_recieved_packet+0xcbc>)
   11640:	781b      	ldrb	r3, [r3, #0]
   11642:	b25a      	sxtb	r2, r3
   11644:	4b42      	ldr	r3, [pc, #264]	; (11750 <process_recieved_packet+0xc74>)
   11646:	0011      	movs	r1, r2
   11648:	0018      	movs	r0, r3
   1164a:	4b42      	ldr	r3, [pc, #264]	; (11754 <process_recieved_packet+0xc78>)
   1164c:	4798      	blx	r3
   1164e:	1c02      	adds	r2, r0, #0
   11650:	4b41      	ldr	r3, [pc, #260]	; (11758 <process_recieved_packet+0xc7c>)
   11652:	1c10      	adds	r0, r2, #0
   11654:	4798      	blx	r3
   11656:	0002      	movs	r2, r0
   11658:	4b40      	ldr	r3, [pc, #256]	; (1175c <process_recieved_packet+0xc80>)
   1165a:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_END);
   1165c:	4b4f      	ldr	r3, [pc, #316]	; (1179c <process_recieved_packet+0xcc0>)
   1165e:	781b      	ldrb	r3, [r3, #0]
   11660:	b25a      	sxtb	r2, r3
   11662:	4b3b      	ldr	r3, [pc, #236]	; (11750 <process_recieved_packet+0xc74>)
   11664:	0011      	movs	r1, r2
   11666:	0018      	movs	r0, r3
   11668:	4b3a      	ldr	r3, [pc, #232]	; (11754 <process_recieved_packet+0xc78>)
   1166a:	4798      	blx	r3
   1166c:	1c02      	adds	r2, r0, #0
   1166e:	4b3a      	ldr	r3, [pc, #232]	; (11758 <process_recieved_packet+0xc7c>)
   11670:	1c10      	adds	r0, r2, #0
   11672:	4798      	blx	r3
   11674:	0002      	movs	r2, r0
   11676:	4b39      	ldr	r3, [pc, #228]	; (1175c <process_recieved_packet+0xc80>)
   11678:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MIN)*100);
   1167a:	4b49      	ldr	r3, [pc, #292]	; (117a0 <process_recieved_packet+0xcc4>)
   1167c:	781b      	ldrb	r3, [r3, #0]
   1167e:	b25a      	sxtb	r2, r3
   11680:	4b33      	ldr	r3, [pc, #204]	; (11750 <process_recieved_packet+0xc74>)
   11682:	0011      	movs	r1, r2
   11684:	0018      	movs	r0, r3
   11686:	4b33      	ldr	r3, [pc, #204]	; (11754 <process_recieved_packet+0xc78>)
   11688:	4798      	blx	r3
   1168a:	1c02      	adds	r2, r0, #0
   1168c:	4b45      	ldr	r3, [pc, #276]	; (117a4 <process_recieved_packet+0xcc8>)
   1168e:	4946      	ldr	r1, [pc, #280]	; (117a8 <process_recieved_packet+0xccc>)
   11690:	1c10      	adds	r0, r2, #0
   11692:	4798      	blx	r3
   11694:	1c03      	adds	r3, r0, #0
   11696:	1c1a      	adds	r2, r3, #0
   11698:	4b2f      	ldr	r3, [pc, #188]	; (11758 <process_recieved_packet+0xc7c>)
   1169a:	1c10      	adds	r0, r2, #0
   1169c:	4798      	blx	r3
   1169e:	0002      	movs	r2, r0
   116a0:	4b2e      	ldr	r3, [pc, #184]	; (1175c <process_recieved_packet+0xc80>)
   116a2:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MAX)*100);
   116a4:	4b41      	ldr	r3, [pc, #260]	; (117ac <process_recieved_packet+0xcd0>)
   116a6:	781b      	ldrb	r3, [r3, #0]
   116a8:	b25a      	sxtb	r2, r3
   116aa:	4b29      	ldr	r3, [pc, #164]	; (11750 <process_recieved_packet+0xc74>)
   116ac:	0011      	movs	r1, r2
   116ae:	0018      	movs	r0, r3
   116b0:	4b28      	ldr	r3, [pc, #160]	; (11754 <process_recieved_packet+0xc78>)
   116b2:	4798      	blx	r3
   116b4:	1c02      	adds	r2, r0, #0
   116b6:	4b3b      	ldr	r3, [pc, #236]	; (117a4 <process_recieved_packet+0xcc8>)
   116b8:	493b      	ldr	r1, [pc, #236]	; (117a8 <process_recieved_packet+0xccc>)
   116ba:	1c10      	adds	r0, r2, #0
   116bc:	4798      	blx	r3
   116be:	1c03      	adds	r3, r0, #0
   116c0:	1c1a      	adds	r2, r3, #0
   116c2:	4b25      	ldr	r3, [pc, #148]	; (11758 <process_recieved_packet+0xc7c>)
   116c4:	1c10      	adds	r0, r2, #0
   116c6:	4798      	blx	r3
   116c8:	0002      	movs	r2, r0
   116ca:	4b24      	ldr	r3, [pc, #144]	; (1175c <process_recieved_packet+0xc80>)
   116cc:	649a      	str	r2, [r3, #72]	; 0x48
			GET_LIMITS = 0;
   116ce:	4b38      	ldr	r3, [pc, #224]	; (117b0 <process_recieved_packet+0xcd4>)
   116d0:	2200      	movs	r2, #0
   116d2:	701a      	strb	r2, [r3, #0]
			SEND_LIMITS = 1;
   116d4:	4b37      	ldr	r3, [pc, #220]	; (117b4 <process_recieved_packet+0xcd8>)
   116d6:	2201      	movs	r2, #1
   116d8:	701a      	strb	r2, [r3, #0]
}
   116da:	e14c      	b.n	11976 <process_recieved_packet+0xe9a>
		} else if(packet_id == COMM_GET_DECODED_PPM){
   116dc:	4b36      	ldr	r3, [pc, #216]	; (117b8 <process_recieved_packet+0xcdc>)
   116de:	781b      	ldrb	r3, [r3, #0]
   116e0:	1dfa      	adds	r2, r7, #7
   116e2:	7812      	ldrb	r2, [r2, #0]
   116e4:	429a      	cmp	r2, r3
   116e6:	d110      	bne.n	1170a <process_recieved_packet+0xc2e>
			latest_vesc_vals.pwm_val = (int32_t)(((vesc_revieve_packet.payload[1]&0x00FF)<<24)|((vesc_revieve_packet.payload[2]&0x00FF)<<16)|((vesc_revieve_packet.payload[3]&0x00FF)<<8)|(vesc_revieve_packet.payload[4]&0x00FF));
   116e8:	4b34      	ldr	r3, [pc, #208]	; (117bc <process_recieved_packet+0xce0>)
   116ea:	791b      	ldrb	r3, [r3, #4]
   116ec:	061a      	lsls	r2, r3, #24
   116ee:	4b33      	ldr	r3, [pc, #204]	; (117bc <process_recieved_packet+0xce0>)
   116f0:	795b      	ldrb	r3, [r3, #5]
   116f2:	041b      	lsls	r3, r3, #16
   116f4:	431a      	orrs	r2, r3
   116f6:	4b31      	ldr	r3, [pc, #196]	; (117bc <process_recieved_packet+0xce0>)
   116f8:	799b      	ldrb	r3, [r3, #6]
   116fa:	021b      	lsls	r3, r3, #8
   116fc:	4313      	orrs	r3, r2
   116fe:	4a2f      	ldr	r2, [pc, #188]	; (117bc <process_recieved_packet+0xce0>)
   11700:	79d2      	ldrb	r2, [r2, #7]
   11702:	431a      	orrs	r2, r3
   11704:	4b2e      	ldr	r3, [pc, #184]	; (117c0 <process_recieved_packet+0xce4>)
   11706:	631a      	str	r2, [r3, #48]	; 0x30
}
   11708:	e135      	b.n	11976 <process_recieved_packet+0xe9a>
		} else if(packet_id == COMM_GET_DECODED_CHUK){
   1170a:	4b2e      	ldr	r3, [pc, #184]	; (117c4 <process_recieved_packet+0xce8>)
   1170c:	781b      	ldrb	r3, [r3, #0]
   1170e:	1dfa      	adds	r2, r7, #7
   11710:	7812      	ldrb	r2, [r2, #0]
   11712:	429a      	cmp	r2, r3
   11714:	d15c      	bne.n	117d0 <process_recieved_packet+0xcf4>
				rec_chuck_struct.bt_c = ((((vesc_revieve_packet.payload[1] & 0x000000FF) << 24)|((vesc_revieve_packet.payload[2] & 0x000000FF) << 16)|((vesc_revieve_packet.payload[3] & 0x000000FF) << 8)|(vesc_revieve_packet.payload[4] & 0x000000FF)) == 0xFFF0DC45); //-992187
   11716:	4b29      	ldr	r3, [pc, #164]	; (117bc <process_recieved_packet+0xce0>)
   11718:	791b      	ldrb	r3, [r3, #4]
   1171a:	061a      	lsls	r2, r3, #24
   1171c:	4b27      	ldr	r3, [pc, #156]	; (117bc <process_recieved_packet+0xce0>)
   1171e:	795b      	ldrb	r3, [r3, #5]
   11720:	041b      	lsls	r3, r3, #16
   11722:	431a      	orrs	r2, r3
   11724:	4b25      	ldr	r3, [pc, #148]	; (117bc <process_recieved_packet+0xce0>)
   11726:	799b      	ldrb	r3, [r3, #6]
   11728:	021b      	lsls	r3, r3, #8
   1172a:	4313      	orrs	r3, r2
   1172c:	4a23      	ldr	r2, [pc, #140]	; (117bc <process_recieved_packet+0xce0>)
   1172e:	79d2      	ldrb	r2, [r2, #7]
   11730:	4313      	orrs	r3, r2
   11732:	4a25      	ldr	r2, [pc, #148]	; (117c8 <process_recieved_packet+0xcec>)
   11734:	4694      	mov	ip, r2
   11736:	4463      	add	r3, ip
   11738:	425a      	negs	r2, r3
   1173a:	4153      	adcs	r3, r2
   1173c:	b2da      	uxtb	r2, r3
   1173e:	4b23      	ldr	r3, [pc, #140]	; (117cc <process_recieved_packet+0xcf0>)
   11740:	721a      	strb	r2, [r3, #8]
				rec_chuck_struct.bt_z = rec_chuck_struct.bt_c;
   11742:	4b22      	ldr	r3, [pc, #136]	; (117cc <process_recieved_packet+0xcf0>)
   11744:	7a1a      	ldrb	r2, [r3, #8]
   11746:	4b21      	ldr	r3, [pc, #132]	; (117cc <process_recieved_packet+0xcf0>)
   11748:	725a      	strb	r2, [r3, #9]
}
   1174a:	e114      	b.n	11976 <process_recieved_packet+0xe9a>
   1174c:	200003dd 	.word	0x200003dd
   11750:	20001593 	.word	0x20001593
   11754:	00011991 	.word	0x00011991
   11758:	00019525 	.word	0x00019525
   1175c:	20001a50 	.word	0x20001a50
   11760:	200003de 	.word	0x200003de
   11764:	200003df 	.word	0x200003df
   11768:	200003e0 	.word	0x200003e0
   1176c:	200003e1 	.word	0x200003e1
   11770:	200003e2 	.word	0x200003e2
   11774:	200003e3 	.word	0x200003e3
   11778:	200003e4 	.word	0x200003e4
   1177c:	200003e5 	.word	0x200003e5
   11780:	200003e6 	.word	0x200003e6
   11784:	200003e7 	.word	0x200003e7
   11788:	200003e8 	.word	0x200003e8
   1178c:	200003e9 	.word	0x200003e9
   11790:	200003ea 	.word	0x200003ea
   11794:	200003eb 	.word	0x200003eb
   11798:	200003ec 	.word	0x200003ec
   1179c:	200003ed 	.word	0x200003ed
   117a0:	200003ee 	.word	0x200003ee
   117a4:	00018fad 	.word	0x00018fad
   117a8:	42c80000 	.word	0x42c80000
   117ac:	200003ef 	.word	0x200003ef
   117b0:	200000da 	.word	0x200000da
   117b4:	20000388 	.word	0x20000388
   117b8:	200003cc 	.word	0x200003cc
   117bc:	20001590 	.word	0x20001590
   117c0:	20000e1c 	.word	0x20000e1c
   117c4:	200003cd 	.word	0x200003cd
   117c8:	000f23bb 	.word	0x000f23bb
   117cc:	20001ae4 	.word	0x20001ae4
		} else if(packet_id == COMM_GET_VALUES_SELECTIVE){ // Only available in latest Official FW
   117d0:	4b6b      	ldr	r3, [pc, #428]	; (11980 <process_recieved_packet+0xea4>)
   117d2:	781b      	ldrb	r3, [r3, #0]
   117d4:	1dfa      	adds	r2, r7, #7
   117d6:	7812      	ldrb	r2, [r2, #0]
   117d8:	429a      	cmp	r2, r3
   117da:	d000      	beq.n	117de <process_recieved_packet+0xd02>
   117dc:	e0cb      	b.n	11976 <process_recieved_packet+0xe9a>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[5] << 8) | vesc_revieve_packet.payload[6];
   117de:	4b69      	ldr	r3, [pc, #420]	; (11984 <process_recieved_packet+0xea8>)
   117e0:	7a1b      	ldrb	r3, [r3, #8]
   117e2:	021b      	lsls	r3, r3, #8
   117e4:	b21a      	sxth	r2, r3
   117e6:	4b67      	ldr	r3, [pc, #412]	; (11984 <process_recieved_packet+0xea8>)
   117e8:	7a5b      	ldrb	r3, [r3, #9]
   117ea:	b21b      	sxth	r3, r3
   117ec:	4313      	orrs	r3, r2
   117ee:	b21a      	sxth	r2, r3
   117f0:	4b65      	ldr	r3, [pc, #404]	; (11988 <process_recieved_packet+0xeac>)
   117f2:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[7] << 24) | (vesc_revieve_packet.payload[8] << 16) | (vesc_revieve_packet.payload[9] << 8) | vesc_revieve_packet.payload[10];
   117f4:	4b63      	ldr	r3, [pc, #396]	; (11984 <process_recieved_packet+0xea8>)
   117f6:	7a9b      	ldrb	r3, [r3, #10]
   117f8:	061a      	lsls	r2, r3, #24
   117fa:	4b62      	ldr	r3, [pc, #392]	; (11984 <process_recieved_packet+0xea8>)
   117fc:	7adb      	ldrb	r3, [r3, #11]
   117fe:	041b      	lsls	r3, r3, #16
   11800:	431a      	orrs	r2, r3
   11802:	4b60      	ldr	r3, [pc, #384]	; (11984 <process_recieved_packet+0xea8>)
   11804:	7b1b      	ldrb	r3, [r3, #12]
   11806:	021b      	lsls	r3, r3, #8
   11808:	4313      	orrs	r3, r2
   1180a:	4a5e      	ldr	r2, [pc, #376]	; (11984 <process_recieved_packet+0xea8>)
   1180c:	7b52      	ldrb	r2, [r2, #13]
   1180e:	431a      	orrs	r2, r3
   11810:	4b5d      	ldr	r3, [pc, #372]	; (11988 <process_recieved_packet+0xeac>)
   11812:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[11] << 24) | (vesc_revieve_packet.payload[12] << 16) | (vesc_revieve_packet.payload[13] << 8) | vesc_revieve_packet.payload[14];
   11814:	4b5b      	ldr	r3, [pc, #364]	; (11984 <process_recieved_packet+0xea8>)
   11816:	7b9b      	ldrb	r3, [r3, #14]
   11818:	061a      	lsls	r2, r3, #24
   1181a:	4b5a      	ldr	r3, [pc, #360]	; (11984 <process_recieved_packet+0xea8>)
   1181c:	7bdb      	ldrb	r3, [r3, #15]
   1181e:	041b      	lsls	r3, r3, #16
   11820:	431a      	orrs	r2, r3
   11822:	4b58      	ldr	r3, [pc, #352]	; (11984 <process_recieved_packet+0xea8>)
   11824:	7c1b      	ldrb	r3, [r3, #16]
   11826:	021b      	lsls	r3, r3, #8
   11828:	4313      	orrs	r3, r2
   1182a:	4a56      	ldr	r2, [pc, #344]	; (11984 <process_recieved_packet+0xea8>)
   1182c:	7c52      	ldrb	r2, [r2, #17]
   1182e:	431a      	orrs	r2, r3
   11830:	4b55      	ldr	r3, [pc, #340]	; (11988 <process_recieved_packet+0xeac>)
   11832:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[15] << 8) | vesc_revieve_packet.payload[16];
   11834:	4b53      	ldr	r3, [pc, #332]	; (11984 <process_recieved_packet+0xea8>)
   11836:	7c9b      	ldrb	r3, [r3, #18]
   11838:	021b      	lsls	r3, r3, #8
   1183a:	b21a      	sxth	r2, r3
   1183c:	4b51      	ldr	r3, [pc, #324]	; (11984 <process_recieved_packet+0xea8>)
   1183e:	7cdb      	ldrb	r3, [r3, #19]
   11840:	b21b      	sxth	r3, r3
   11842:	4313      	orrs	r3, r2
   11844:	b21a      	sxth	r2, r3
   11846:	4b50      	ldr	r3, [pc, #320]	; (11988 <process_recieved_packet+0xeac>)
   11848:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[17] << 24) | (vesc_revieve_packet.payload[18] << 16) | (vesc_revieve_packet.payload[19] << 8) | vesc_revieve_packet.payload[20];
   1184a:	4b4e      	ldr	r3, [pc, #312]	; (11984 <process_recieved_packet+0xea8>)
   1184c:	7d1b      	ldrb	r3, [r3, #20]
   1184e:	061a      	lsls	r2, r3, #24
   11850:	4b4c      	ldr	r3, [pc, #304]	; (11984 <process_recieved_packet+0xea8>)
   11852:	7d5b      	ldrb	r3, [r3, #21]
   11854:	041b      	lsls	r3, r3, #16
   11856:	431a      	orrs	r2, r3
   11858:	4b4a      	ldr	r3, [pc, #296]	; (11984 <process_recieved_packet+0xea8>)
   1185a:	7d9b      	ldrb	r3, [r3, #22]
   1185c:	021b      	lsls	r3, r3, #8
   1185e:	4313      	orrs	r3, r2
   11860:	4a48      	ldr	r2, [pc, #288]	; (11984 <process_recieved_packet+0xea8>)
   11862:	7dd2      	ldrb	r2, [r2, #23]
   11864:	431a      	orrs	r2, r3
   11866:	4b48      	ldr	r3, [pc, #288]	; (11988 <process_recieved_packet+0xeac>)
   11868:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[21] << 8) | vesc_revieve_packet.payload[22];
   1186a:	4b46      	ldr	r3, [pc, #280]	; (11984 <process_recieved_packet+0xea8>)
   1186c:	7e1b      	ldrb	r3, [r3, #24]
   1186e:	021b      	lsls	r3, r3, #8
   11870:	b21a      	sxth	r2, r3
   11872:	4b44      	ldr	r3, [pc, #272]	; (11984 <process_recieved_packet+0xea8>)
   11874:	7e5b      	ldrb	r3, [r3, #25]
   11876:	b21b      	sxth	r3, r3
   11878:	4313      	orrs	r3, r2
   1187a:	b21a      	sxth	r2, r3
   1187c:	4b42      	ldr	r3, [pc, #264]	; (11988 <process_recieved_packet+0xeac>)
   1187e:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[23] << 24) | (vesc_revieve_packet.payload[24] << 16) | (vesc_revieve_packet.payload[25] << 8) | vesc_revieve_packet.payload[26])*10;
   11880:	4b40      	ldr	r3, [pc, #256]	; (11984 <process_recieved_packet+0xea8>)
   11882:	7e9b      	ldrb	r3, [r3, #26]
   11884:	061a      	lsls	r2, r3, #24
   11886:	4b3f      	ldr	r3, [pc, #252]	; (11984 <process_recieved_packet+0xea8>)
   11888:	7edb      	ldrb	r3, [r3, #27]
   1188a:	041b      	lsls	r3, r3, #16
   1188c:	431a      	orrs	r2, r3
   1188e:	4b3d      	ldr	r3, [pc, #244]	; (11984 <process_recieved_packet+0xea8>)
   11890:	7f1b      	ldrb	r3, [r3, #28]
   11892:	021b      	lsls	r3, r3, #8
   11894:	4313      	orrs	r3, r2
   11896:	4a3b      	ldr	r2, [pc, #236]	; (11984 <process_recieved_packet+0xea8>)
   11898:	7f52      	ldrb	r2, [r2, #29]
   1189a:	431a      	orrs	r2, r3
   1189c:	0013      	movs	r3, r2
   1189e:	009b      	lsls	r3, r3, #2
   118a0:	189b      	adds	r3, r3, r2
   118a2:	005b      	lsls	r3, r3, #1
   118a4:	001a      	movs	r2, r3
   118a6:	4b38      	ldr	r3, [pc, #224]	; (11988 <process_recieved_packet+0xeac>)
   118a8:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[27] << 24) | (vesc_revieve_packet.payload[28] << 16) | (vesc_revieve_packet.payload[29] << 8) | vesc_revieve_packet.payload[30])*10;
   118aa:	4b36      	ldr	r3, [pc, #216]	; (11984 <process_recieved_packet+0xea8>)
   118ac:	7f9b      	ldrb	r3, [r3, #30]
   118ae:	061a      	lsls	r2, r3, #24
   118b0:	4b34      	ldr	r3, [pc, #208]	; (11984 <process_recieved_packet+0xea8>)
   118b2:	7fdb      	ldrb	r3, [r3, #31]
   118b4:	041b      	lsls	r3, r3, #16
   118b6:	431a      	orrs	r2, r3
   118b8:	4b32      	ldr	r3, [pc, #200]	; (11984 <process_recieved_packet+0xea8>)
   118ba:	2120      	movs	r1, #32
   118bc:	5c5b      	ldrb	r3, [r3, r1]
   118be:	021b      	lsls	r3, r3, #8
   118c0:	4313      	orrs	r3, r2
   118c2:	4a30      	ldr	r2, [pc, #192]	; (11984 <process_recieved_packet+0xea8>)
   118c4:	2121      	movs	r1, #33	; 0x21
   118c6:	5c52      	ldrb	r2, [r2, r1]
   118c8:	431a      	orrs	r2, r3
   118ca:	0013      	movs	r3, r2
   118cc:	009b      	lsls	r3, r3, #2
   118ce:	189b      	adds	r3, r3, r2
   118d0:	005b      	lsls	r3, r3, #1
   118d2:	001a      	movs	r2, r3
   118d4:	4b2c      	ldr	r3, [pc, #176]	; (11988 <process_recieved_packet+0xeac>)
   118d6:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[31] << 24) | (vesc_revieve_packet.payload[32] << 16) | (vesc_revieve_packet.payload[33] << 8) | vesc_revieve_packet.payload[34])/100;
   118d8:	4b2a      	ldr	r3, [pc, #168]	; (11984 <process_recieved_packet+0xea8>)
   118da:	2222      	movs	r2, #34	; 0x22
   118dc:	5c9b      	ldrb	r3, [r3, r2]
   118de:	061a      	lsls	r2, r3, #24
   118e0:	4b28      	ldr	r3, [pc, #160]	; (11984 <process_recieved_packet+0xea8>)
   118e2:	2123      	movs	r1, #35	; 0x23
   118e4:	5c5b      	ldrb	r3, [r3, r1]
   118e6:	041b      	lsls	r3, r3, #16
   118e8:	431a      	orrs	r2, r3
   118ea:	4b26      	ldr	r3, [pc, #152]	; (11984 <process_recieved_packet+0xea8>)
   118ec:	2124      	movs	r1, #36	; 0x24
   118ee:	5c5b      	ldrb	r3, [r3, r1]
   118f0:	021b      	lsls	r3, r3, #8
   118f2:	4313      	orrs	r3, r2
   118f4:	4a23      	ldr	r2, [pc, #140]	; (11984 <process_recieved_packet+0xea8>)
   118f6:	2125      	movs	r1, #37	; 0x25
   118f8:	5c52      	ldrb	r2, [r2, r1]
   118fa:	431a      	orrs	r2, r3
   118fc:	4b23      	ldr	r3, [pc, #140]	; (1198c <process_recieved_packet+0xeb0>)
   118fe:	2164      	movs	r1, #100	; 0x64
   11900:	0010      	movs	r0, r2
   11902:	4798      	blx	r3
   11904:	0003      	movs	r3, r0
   11906:	001a      	movs	r2, r3
   11908:	4b1f      	ldr	r3, [pc, #124]	; (11988 <process_recieved_packet+0xeac>)
   1190a:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[35] << 24) | (vesc_revieve_packet.payload[36] << 16) | (vesc_revieve_packet.payload[37] << 8) | vesc_revieve_packet.payload[38])/100;
   1190c:	4b1d      	ldr	r3, [pc, #116]	; (11984 <process_recieved_packet+0xea8>)
   1190e:	2226      	movs	r2, #38	; 0x26
   11910:	5c9b      	ldrb	r3, [r3, r2]
   11912:	061a      	lsls	r2, r3, #24
   11914:	4b1b      	ldr	r3, [pc, #108]	; (11984 <process_recieved_packet+0xea8>)
   11916:	2127      	movs	r1, #39	; 0x27
   11918:	5c5b      	ldrb	r3, [r3, r1]
   1191a:	041b      	lsls	r3, r3, #16
   1191c:	431a      	orrs	r2, r3
   1191e:	4b19      	ldr	r3, [pc, #100]	; (11984 <process_recieved_packet+0xea8>)
   11920:	2128      	movs	r1, #40	; 0x28
   11922:	5c5b      	ldrb	r3, [r3, r1]
   11924:	021b      	lsls	r3, r3, #8
   11926:	4313      	orrs	r3, r2
   11928:	4a16      	ldr	r2, [pc, #88]	; (11984 <process_recieved_packet+0xea8>)
   1192a:	2129      	movs	r1, #41	; 0x29
   1192c:	5c52      	ldrb	r2, [r2, r1]
   1192e:	431a      	orrs	r2, r3
   11930:	4b16      	ldr	r3, [pc, #88]	; (1198c <process_recieved_packet+0xeb0>)
   11932:	2164      	movs	r1, #100	; 0x64
   11934:	0010      	movs	r0, r2
   11936:	4798      	blx	r3
   11938:	0003      	movs	r3, r0
   1193a:	001a      	movs	r2, r3
   1193c:	4b12      	ldr	r3, [pc, #72]	; (11988 <process_recieved_packet+0xeac>)
   1193e:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
   11940:	4b10      	ldr	r3, [pc, #64]	; (11984 <process_recieved_packet+0xea8>)
   11942:	222a      	movs	r2, #42	; 0x2a
   11944:	5c9b      	ldrb	r3, [r3, r2]
   11946:	061a      	lsls	r2, r3, #24
   11948:	4b0e      	ldr	r3, [pc, #56]	; (11984 <process_recieved_packet+0xea8>)
   1194a:	212b      	movs	r1, #43	; 0x2b
   1194c:	5c5b      	ldrb	r3, [r3, r1]
   1194e:	041b      	lsls	r3, r3, #16
   11950:	431a      	orrs	r2, r3
   11952:	4b0c      	ldr	r3, [pc, #48]	; (11984 <process_recieved_packet+0xea8>)
   11954:	212c      	movs	r1, #44	; 0x2c
   11956:	5c5b      	ldrb	r3, [r3, r1]
   11958:	021b      	lsls	r3, r3, #8
   1195a:	4313      	orrs	r3, r2
   1195c:	4a09      	ldr	r2, [pc, #36]	; (11984 <process_recieved_packet+0xea8>)
   1195e:	212d      	movs	r1, #45	; 0x2d
   11960:	5c52      	ldrb	r2, [r2, r1]
   11962:	431a      	orrs	r2, r3
   11964:	4b08      	ldr	r3, [pc, #32]	; (11988 <process_recieved_packet+0xeac>)
   11966:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
   11968:	4b06      	ldr	r3, [pc, #24]	; (11984 <process_recieved_packet+0xea8>)
   1196a:	222e      	movs	r2, #46	; 0x2e
   1196c:	5c9b      	ldrb	r3, [r3, r2]
   1196e:	b259      	sxtb	r1, r3
   11970:	4b05      	ldr	r3, [pc, #20]	; (11988 <process_recieved_packet+0xeac>)
   11972:	222c      	movs	r2, #44	; 0x2c
   11974:	5499      	strb	r1, [r3, r2]
}
   11976:	46c0      	nop			; (mov r8, r8)
   11978:	46bd      	mov	sp, r7
   1197a:	b002      	add	sp, #8
   1197c:	bd80      	pop	{r7, pc}
   1197e:	46c0      	nop			; (mov r8, r8)
   11980:	200003cf 	.word	0x200003cf
   11984:	20001590 	.word	0x20001590
   11988:	20000e1c 	.word	0x20000e1c
   1198c:	00018521 	.word	0x00018521

00011990 <buffer_get_float32_auto>:

float buffer_get_float32_auto(uint8_t *buffer, int8_t index) {
   11990:	b590      	push	{r4, r7, lr}
   11992:	b089      	sub	sp, #36	; 0x24
   11994:	af00      	add	r7, sp, #0
   11996:	6078      	str	r0, [r7, #4]
   11998:	000a      	movs	r2, r1
   1199a:	1cfb      	adds	r3, r7, #3
   1199c:	701a      	strb	r2, [r3, #0]
	uint32_t res = ((uint32_t) buffer[index]) << 24 | ((uint32_t) buffer[index+1]) << 16 | ((uint32_t) buffer[index+2]) << 8 | ((uint32_t) buffer[index+3]);
   1199e:	1cfb      	adds	r3, r7, #3
   119a0:	781b      	ldrb	r3, [r3, #0]
   119a2:	b25b      	sxtb	r3, r3
   119a4:	687a      	ldr	r2, [r7, #4]
   119a6:	18d3      	adds	r3, r2, r3
   119a8:	781b      	ldrb	r3, [r3, #0]
   119aa:	061a      	lsls	r2, r3, #24
   119ac:	1cfb      	adds	r3, r7, #3
   119ae:	781b      	ldrb	r3, [r3, #0]
   119b0:	b25b      	sxtb	r3, r3
   119b2:	3301      	adds	r3, #1
   119b4:	6879      	ldr	r1, [r7, #4]
   119b6:	18cb      	adds	r3, r1, r3
   119b8:	781b      	ldrb	r3, [r3, #0]
   119ba:	041b      	lsls	r3, r3, #16
   119bc:	431a      	orrs	r2, r3
   119be:	1cfb      	adds	r3, r7, #3
   119c0:	781b      	ldrb	r3, [r3, #0]
   119c2:	b25b      	sxtb	r3, r3
   119c4:	3302      	adds	r3, #2
   119c6:	6879      	ldr	r1, [r7, #4]
   119c8:	18cb      	adds	r3, r1, r3
   119ca:	781b      	ldrb	r3, [r3, #0]
   119cc:	021b      	lsls	r3, r3, #8
   119ce:	4313      	orrs	r3, r2
   119d0:	1cfa      	adds	r2, r7, #3
   119d2:	7812      	ldrb	r2, [r2, #0]
   119d4:	b252      	sxtb	r2, r2
   119d6:	3203      	adds	r2, #3
   119d8:	6879      	ldr	r1, [r7, #4]
   119da:	188a      	adds	r2, r1, r2
   119dc:	7812      	ldrb	r2, [r2, #0]
   119de:	4313      	orrs	r3, r2
   119e0:	617b      	str	r3, [r7, #20]

	int e = (res >> 23) & 0xFF;
   119e2:	697b      	ldr	r3, [r7, #20]
   119e4:	0ddb      	lsrs	r3, r3, #23
   119e6:	001a      	movs	r2, r3
   119e8:	23ff      	movs	r3, #255	; 0xff
   119ea:	4013      	ands	r3, r2
   119ec:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
   119ee:	697b      	ldr	r3, [r7, #20]
   119f0:	025b      	lsls	r3, r3, #9
   119f2:	0a5b      	lsrs	r3, r3, #9
   119f4:	613b      	str	r3, [r7, #16]
	bool neg = res & (1U << 31);
   119f6:	697b      	ldr	r3, [r7, #20]
   119f8:	0fdb      	lsrs	r3, r3, #31
   119fa:	07da      	lsls	r2, r3, #31
   119fc:	230f      	movs	r3, #15
   119fe:	18fb      	adds	r3, r7, r3
   11a00:	1e51      	subs	r1, r2, #1
   11a02:	418a      	sbcs	r2, r1
   11a04:	701a      	strb	r2, [r3, #0]

	float sig = 0.0;
   11a06:	2300      	movs	r3, #0
   11a08:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
   11a0a:	69fb      	ldr	r3, [r7, #28]
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	d102      	bne.n	11a16 <buffer_get_float32_auto+0x86>
   11a10:	693b      	ldr	r3, [r7, #16]
   11a12:	2b00      	cmp	r3, #0
   11a14:	d01f      	beq.n	11a56 <buffer_get_float32_auto+0xc6>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
   11a16:	4b1a      	ldr	r3, [pc, #104]	; (11a80 <buffer_get_float32_auto+0xf0>)
   11a18:	6938      	ldr	r0, [r7, #16]
   11a1a:	4798      	blx	r3
   11a1c:	1c02      	adds	r2, r0, #0
   11a1e:	4b19      	ldr	r3, [pc, #100]	; (11a84 <buffer_get_float32_auto+0xf4>)
   11a20:	1c10      	adds	r0, r2, #0
   11a22:	4798      	blx	r3
   11a24:	4c18      	ldr	r4, [pc, #96]	; (11a88 <buffer_get_float32_auto+0xf8>)
   11a26:	2200      	movs	r2, #0
   11a28:	4b18      	ldr	r3, [pc, #96]	; (11a8c <buffer_get_float32_auto+0xfc>)
   11a2a:	47a0      	blx	r4
   11a2c:	0003      	movs	r3, r0
   11a2e:	000c      	movs	r4, r1
   11a30:	0018      	movs	r0, r3
   11a32:	0021      	movs	r1, r4
   11a34:	4c16      	ldr	r4, [pc, #88]	; (11a90 <buffer_get_float32_auto+0x100>)
   11a36:	2200      	movs	r2, #0
   11a38:	4b16      	ldr	r3, [pc, #88]	; (11a94 <buffer_get_float32_auto+0x104>)
   11a3a:	47a0      	blx	r4
   11a3c:	0003      	movs	r3, r0
   11a3e:	000c      	movs	r4, r1
   11a40:	0019      	movs	r1, r3
   11a42:	0022      	movs	r2, r4
   11a44:	4b14      	ldr	r3, [pc, #80]	; (11a98 <buffer_get_float32_auto+0x108>)
   11a46:	0008      	movs	r0, r1
   11a48:	0011      	movs	r1, r2
   11a4a:	4798      	blx	r3
   11a4c:	1c03      	adds	r3, r0, #0
   11a4e:	61bb      	str	r3, [r7, #24]
		e -= 126;
   11a50:	69fb      	ldr	r3, [r7, #28]
   11a52:	3b7e      	subs	r3, #126	; 0x7e
   11a54:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
   11a56:	230f      	movs	r3, #15
   11a58:	18fb      	adds	r3, r7, r3
   11a5a:	781b      	ldrb	r3, [r3, #0]
   11a5c:	2b00      	cmp	r3, #0
   11a5e:	d004      	beq.n	11a6a <buffer_get_float32_auto+0xda>
		sig = -sig;
   11a60:	69bb      	ldr	r3, [r7, #24]
   11a62:	2280      	movs	r2, #128	; 0x80
   11a64:	0612      	lsls	r2, r2, #24
   11a66:	4053      	eors	r3, r2
   11a68:	61bb      	str	r3, [r7, #24]
	}
	
	return ldexpf(sig, e);
   11a6a:	69fa      	ldr	r2, [r7, #28]
   11a6c:	69bb      	ldr	r3, [r7, #24]
   11a6e:	0011      	movs	r1, r2
   11a70:	1c18      	adds	r0, r3, #0
   11a72:	4b0a      	ldr	r3, [pc, #40]	; (11a9c <buffer_get_float32_auto+0x10c>)
   11a74:	4798      	blx	r3
   11a76:	1c03      	adds	r3, r0, #0
}
   11a78:	1c18      	adds	r0, r3, #0
   11a7a:	46bd      	mov	sp, r7
   11a7c:	b009      	add	sp, #36	; 0x24
   11a7e:	bd90      	pop	{r4, r7, pc}
   11a80:	00019605 	.word	0x00019605
   11a84:	0001b1a1 	.word	0x0001b1a1
   11a88:	00019cb1 	.word	0x00019cb1
   11a8c:	41700000 	.word	0x41700000
   11a90:	00019691 	.word	0x00019691
   11a94:	3fe00000 	.word	0x3fe00000
   11a98:	0001b245 	.word	0x0001b245
   11a9c:	000182dd 	.word	0x000182dd

00011aa0 <vesc_get_fw_version>:


void vesc_get_fw_version(){
   11aa0:	b590      	push	{r4, r7, lr}
   11aa2:	4c2d      	ldr	r4, [pc, #180]	; (11b58 <vesc_get_fw_version+0xb8>)
   11aa4:	44a5      	add	sp, r4
   11aa6:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   11aa8:	4b2c      	ldr	r3, [pc, #176]	; (11b5c <vesc_get_fw_version+0xbc>)
   11aaa:	2282      	movs	r2, #130	; 0x82
   11aac:	0092      	lsls	r2, r2, #2
   11aae:	4694      	mov	ip, r2
   11ab0:	44bc      	add	ip, r7
   11ab2:	4463      	add	r3, ip
   11ab4:	2202      	movs	r2, #2
   11ab6:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
   11ab8:	4b28      	ldr	r3, [pc, #160]	; (11b5c <vesc_get_fw_version+0xbc>)
   11aba:	2282      	movs	r2, #130	; 0x82
   11abc:	0092      	lsls	r2, r2, #2
   11abe:	4694      	mov	ip, r2
   11ac0:	44bc      	add	ip, r7
   11ac2:	4463      	add	r3, ip
   11ac4:	2201      	movs	r2, #1
   11ac6:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_FW_VERSION;
   11ac8:	4b25      	ldr	r3, [pc, #148]	; (11b60 <vesc_get_fw_version+0xc0>)
   11aca:	781a      	ldrb	r2, [r3, #0]
   11acc:	4b23      	ldr	r3, [pc, #140]	; (11b5c <vesc_get_fw_version+0xbc>)
   11ace:	2182      	movs	r1, #130	; 0x82
   11ad0:	0089      	lsls	r1, r1, #2
   11ad2:	468c      	mov	ip, r1
   11ad4:	44bc      	add	ip, r7
   11ad6:	4463      	add	r3, ip
   11ad8:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
   11ada:	4b22      	ldr	r3, [pc, #136]	; (11b64 <vesc_get_fw_version+0xc4>)
   11adc:	18fc      	adds	r4, r7, r3
   11ade:	003b      	movs	r3, r7
   11ae0:	3303      	adds	r3, #3
   11ae2:	2101      	movs	r1, #1
   11ae4:	0018      	movs	r0, r3
   11ae6:	4b20      	ldr	r3, [pc, #128]	; (11b68 <vesc_get_fw_version+0xc8>)
   11ae8:	4798      	blx	r3
   11aea:	0003      	movs	r3, r0
   11aec:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   11aee:	4b1d      	ldr	r3, [pc, #116]	; (11b64 <vesc_get_fw_version+0xc4>)
   11af0:	18fb      	adds	r3, r7, r3
   11af2:	881b      	ldrh	r3, [r3, #0]
   11af4:	0a1b      	lsrs	r3, r3, #8
   11af6:	b29b      	uxth	r3, r3
   11af8:	b2d9      	uxtb	r1, r3
   11afa:	4b18      	ldr	r3, [pc, #96]	; (11b5c <vesc_get_fw_version+0xbc>)
   11afc:	2282      	movs	r2, #130	; 0x82
   11afe:	0092      	lsls	r2, r2, #2
   11b00:	4694      	mov	ip, r2
   11b02:	44bc      	add	ip, r7
   11b04:	4463      	add	r3, ip
   11b06:	4a19      	ldr	r2, [pc, #100]	; (11b6c <vesc_get_fw_version+0xcc>)
   11b08:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   11b0a:	4b16      	ldr	r3, [pc, #88]	; (11b64 <vesc_get_fw_version+0xc4>)
   11b0c:	18fb      	adds	r3, r7, r3
   11b0e:	881b      	ldrh	r3, [r3, #0]
   11b10:	b2d9      	uxtb	r1, r3
   11b12:	4b12      	ldr	r3, [pc, #72]	; (11b5c <vesc_get_fw_version+0xbc>)
   11b14:	2282      	movs	r2, #130	; 0x82
   11b16:	0092      	lsls	r2, r2, #2
   11b18:	18ba      	adds	r2, r7, r2
   11b1a:	18d2      	adds	r2, r2, r3
   11b1c:	2381      	movs	r3, #129	; 0x81
   11b1e:	009b      	lsls	r3, r3, #2
   11b20:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   11b22:	4b0e      	ldr	r3, [pc, #56]	; (11b5c <vesc_get_fw_version+0xbc>)
   11b24:	2282      	movs	r2, #130	; 0x82
   11b26:	0092      	lsls	r2, r2, #2
   11b28:	18ba      	adds	r2, r7, r2
   11b2a:	18d4      	adds	r4, r2, r3
   11b2c:	466b      	mov	r3, sp
   11b2e:	0018      	movs	r0, r3
   11b30:	0021      	movs	r1, r4
   11b32:	3110      	adds	r1, #16
   11b34:	23fb      	movs	r3, #251	; 0xfb
   11b36:	005b      	lsls	r3, r3, #1
   11b38:	001a      	movs	r2, r3
   11b3a:	4b0d      	ldr	r3, [pc, #52]	; (11b70 <vesc_get_fw_version+0xd0>)
   11b3c:	4798      	blx	r3
   11b3e:	6820      	ldr	r0, [r4, #0]
   11b40:	6861      	ldr	r1, [r4, #4]
   11b42:	68a2      	ldr	r2, [r4, #8]
   11b44:	68e3      	ldr	r3, [r4, #12]
   11b46:	4c0b      	ldr	r4, [pc, #44]	; (11b74 <vesc_get_fw_version+0xd4>)
   11b48:	47a0      	blx	r4
}
   11b4a:	46c0      	nop			; (mov r8, r8)
   11b4c:	46bd      	mov	sp, r7
   11b4e:	2383      	movs	r3, #131	; 0x83
   11b50:	009b      	lsls	r3, r3, #2
   11b52:	449d      	add	sp, r3
   11b54:	bd90      	pop	{r4, r7, pc}
   11b56:	46c0      	nop			; (mov r8, r8)
   11b58:	fffffbfc 	.word	0xfffffbfc
   11b5c:	fffffdf8 	.word	0xfffffdf8
   11b60:	200003c8 	.word	0x200003c8
   11b64:	00000206 	.word	0x00000206
   11b68:	00010815 	.word	0x00010815
   11b6c:	00000203 	.word	0x00000203
   11b70:	0001b3e9 	.word	0x0001b3e9
   11b74:	00010981 	.word	0x00010981

00011b78 <vesc_get_vals>:

void vesc_get_vals(){
   11b78:	b590      	push	{r4, r7, lr}
   11b7a:	4c6a      	ldr	r4, [pc, #424]	; (11d24 <vesc_get_vals+0x1ac>)
   11b7c:	44a5      	add	sp, r4
   11b7e:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;
	
	send_pack.start = 0x02;
   11b80:	4b69      	ldr	r3, [pc, #420]	; (11d28 <vesc_get_vals+0x1b0>)
   11b82:	2284      	movs	r2, #132	; 0x84
   11b84:	0092      	lsls	r2, r2, #2
   11b86:	4694      	mov	ip, r2
   11b88:	44bc      	add	ip, r7
   11b8a:	4463      	add	r3, ip
   11b8c:	2202      	movs	r2, #2
   11b8e:	701a      	strb	r2, [r3, #0]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
   11b90:	4b66      	ldr	r3, [pc, #408]	; (11d2c <vesc_get_vals+0x1b4>)
   11b92:	2235      	movs	r2, #53	; 0x35
   11b94:	5c9b      	ldrb	r3, [r3, r2]
   11b96:	2b2f      	cmp	r3, #47	; 0x2f
   11b98:	d972      	bls.n	11c80 <vesc_get_vals+0x108>
   11b9a:	4b64      	ldr	r3, [pc, #400]	; (11d2c <vesc_get_vals+0x1b4>)
   11b9c:	2235      	movs	r2, #53	; 0x35
   11b9e:	5c9b      	ldrb	r3, [r3, r2]
   11ba0:	2b63      	cmp	r3, #99	; 0x63
   11ba2:	d86d      	bhi.n	11c80 <vesc_get_vals+0x108>
		send_pack.len[0] = 0x05;
   11ba4:	4b60      	ldr	r3, [pc, #384]	; (11d28 <vesc_get_vals+0x1b0>)
   11ba6:	2284      	movs	r2, #132	; 0x84
   11ba8:	0092      	lsls	r2, r2, #2
   11baa:	4694      	mov	ip, r2
   11bac:	44bc      	add	ip, r7
   11bae:	4463      	add	r3, ip
   11bb0:	2205      	movs	r2, #5
   11bb2:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES_SELECTIVE;
   11bb4:	4b5e      	ldr	r3, [pc, #376]	; (11d30 <vesc_get_vals+0x1b8>)
   11bb6:	781a      	ldrb	r2, [r3, #0]
   11bb8:	4b5b      	ldr	r3, [pc, #364]	; (11d28 <vesc_get_vals+0x1b0>)
   11bba:	2184      	movs	r1, #132	; 0x84
   11bbc:	0089      	lsls	r1, r1, #2
   11bbe:	468c      	mov	ip, r1
   11bc0:	44bc      	add	ip, r7
   11bc2:	4463      	add	r3, ip
   11bc4:	70da      	strb	r2, [r3, #3]
		int32_t mask = (uint32_t)0b0001011111111001101;
   11bc6:	4b5b      	ldr	r3, [pc, #364]	; (11d34 <vesc_get_vals+0x1bc>)
   11bc8:	2283      	movs	r2, #131	; 0x83
   11bca:	0092      	lsls	r2, r2, #2
   11bcc:	18ba      	adds	r2, r7, r2
   11bce:	6013      	str	r3, [r2, #0]
		send_pack.payload[1] = (mask>>24)&0xFF;
   11bd0:	2383      	movs	r3, #131	; 0x83
   11bd2:	009b      	lsls	r3, r3, #2
   11bd4:	18fb      	adds	r3, r7, r3
   11bd6:	681b      	ldr	r3, [r3, #0]
   11bd8:	0e1b      	lsrs	r3, r3, #24
   11bda:	b2da      	uxtb	r2, r3
   11bdc:	4b52      	ldr	r3, [pc, #328]	; (11d28 <vesc_get_vals+0x1b0>)
   11bde:	2184      	movs	r1, #132	; 0x84
   11be0:	0089      	lsls	r1, r1, #2
   11be2:	468c      	mov	ip, r1
   11be4:	44bc      	add	ip, r7
   11be6:	4463      	add	r3, ip
   11be8:	711a      	strb	r2, [r3, #4]
		send_pack.payload[2] = (mask>>16)&0xFF;
   11bea:	2383      	movs	r3, #131	; 0x83
   11bec:	009b      	lsls	r3, r3, #2
   11bee:	18fb      	adds	r3, r7, r3
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	141b      	asrs	r3, r3, #16
   11bf4:	b2da      	uxtb	r2, r3
   11bf6:	4b4c      	ldr	r3, [pc, #304]	; (11d28 <vesc_get_vals+0x1b0>)
   11bf8:	2184      	movs	r1, #132	; 0x84
   11bfa:	0089      	lsls	r1, r1, #2
   11bfc:	468c      	mov	ip, r1
   11bfe:	44bc      	add	ip, r7
   11c00:	4463      	add	r3, ip
   11c02:	715a      	strb	r2, [r3, #5]
		send_pack.payload[3] = (mask>>8)&0xFF;
   11c04:	2383      	movs	r3, #131	; 0x83
   11c06:	009b      	lsls	r3, r3, #2
   11c08:	18fb      	adds	r3, r7, r3
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	121b      	asrs	r3, r3, #8
   11c0e:	b2da      	uxtb	r2, r3
   11c10:	4b45      	ldr	r3, [pc, #276]	; (11d28 <vesc_get_vals+0x1b0>)
   11c12:	2184      	movs	r1, #132	; 0x84
   11c14:	0089      	lsls	r1, r1, #2
   11c16:	468c      	mov	ip, r1
   11c18:	44bc      	add	ip, r7
   11c1a:	4463      	add	r3, ip
   11c1c:	719a      	strb	r2, [r3, #6]
		send_pack.payload[4] = (mask&0xFF);
   11c1e:	2383      	movs	r3, #131	; 0x83
   11c20:	009b      	lsls	r3, r3, #2
   11c22:	18fb      	adds	r3, r7, r3
   11c24:	681b      	ldr	r3, [r3, #0]
   11c26:	b2da      	uxtb	r2, r3
   11c28:	4b3f      	ldr	r3, [pc, #252]	; (11d28 <vesc_get_vals+0x1b0>)
   11c2a:	2184      	movs	r1, #132	; 0x84
   11c2c:	0089      	lsls	r1, r1, #2
   11c2e:	468c      	mov	ip, r1
   11c30:	44bc      	add	ip, r7
   11c32:	4463      	add	r3, ip
   11c34:	71da      	strb	r2, [r3, #7]
		uint16_t crc = crc16(send_pack.payload, 5);
   11c36:	4b40      	ldr	r3, [pc, #256]	; (11d38 <vesc_get_vals+0x1c0>)
   11c38:	18fc      	adds	r4, r7, r3
   11c3a:	003b      	movs	r3, r7
   11c3c:	3303      	adds	r3, #3
   11c3e:	2105      	movs	r1, #5
   11c40:	0018      	movs	r0, r3
   11c42:	4b3e      	ldr	r3, [pc, #248]	; (11d3c <vesc_get_vals+0x1c4>)
   11c44:	4798      	blx	r3
   11c46:	0003      	movs	r3, r0
   11c48:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   11c4a:	4b3b      	ldr	r3, [pc, #236]	; (11d38 <vesc_get_vals+0x1c0>)
   11c4c:	18fb      	adds	r3, r7, r3
   11c4e:	881b      	ldrh	r3, [r3, #0]
   11c50:	0a1b      	lsrs	r3, r3, #8
   11c52:	b29b      	uxth	r3, r3
   11c54:	b2d9      	uxtb	r1, r3
   11c56:	4b34      	ldr	r3, [pc, #208]	; (11d28 <vesc_get_vals+0x1b0>)
   11c58:	2284      	movs	r2, #132	; 0x84
   11c5a:	0092      	lsls	r2, r2, #2
   11c5c:	4694      	mov	ip, r2
   11c5e:	44bc      	add	ip, r7
   11c60:	4463      	add	r3, ip
   11c62:	4a37      	ldr	r2, [pc, #220]	; (11d40 <vesc_get_vals+0x1c8>)
   11c64:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   11c66:	4b34      	ldr	r3, [pc, #208]	; (11d38 <vesc_get_vals+0x1c0>)
   11c68:	18fb      	adds	r3, r7, r3
   11c6a:	881b      	ldrh	r3, [r3, #0]
   11c6c:	b2d9      	uxtb	r1, r3
   11c6e:	4b2e      	ldr	r3, [pc, #184]	; (11d28 <vesc_get_vals+0x1b0>)
   11c70:	2284      	movs	r2, #132	; 0x84
   11c72:	0092      	lsls	r2, r2, #2
   11c74:	18ba      	adds	r2, r7, r2
   11c76:	18d2      	adds	r2, r2, r3
   11c78:	2381      	movs	r3, #129	; 0x81
   11c7a:	009b      	lsls	r3, r3, #2
   11c7c:	54d1      	strb	r1, [r2, r3]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
   11c7e:	e037      	b.n	11cf0 <vesc_get_vals+0x178>
	} else {
		send_pack.len[0] = 0x01;
   11c80:	4b29      	ldr	r3, [pc, #164]	; (11d28 <vesc_get_vals+0x1b0>)
   11c82:	2284      	movs	r2, #132	; 0x84
   11c84:	0092      	lsls	r2, r2, #2
   11c86:	4694      	mov	ip, r2
   11c88:	44bc      	add	ip, r7
   11c8a:	4463      	add	r3, ip
   11c8c:	2201      	movs	r2, #1
   11c8e:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES;
   11c90:	4b2c      	ldr	r3, [pc, #176]	; (11d44 <vesc_get_vals+0x1cc>)
   11c92:	781a      	ldrb	r2, [r3, #0]
   11c94:	4b24      	ldr	r3, [pc, #144]	; (11d28 <vesc_get_vals+0x1b0>)
   11c96:	2184      	movs	r1, #132	; 0x84
   11c98:	0089      	lsls	r1, r1, #2
   11c9a:	468c      	mov	ip, r1
   11c9c:	44bc      	add	ip, r7
   11c9e:	4463      	add	r3, ip
   11ca0:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
   11ca2:	2382      	movs	r3, #130	; 0x82
   11ca4:	009b      	lsls	r3, r3, #2
   11ca6:	18fc      	adds	r4, r7, r3
   11ca8:	003b      	movs	r3, r7
   11caa:	3303      	adds	r3, #3
   11cac:	2101      	movs	r1, #1
   11cae:	0018      	movs	r0, r3
   11cb0:	4b22      	ldr	r3, [pc, #136]	; (11d3c <vesc_get_vals+0x1c4>)
   11cb2:	4798      	blx	r3
   11cb4:	0003      	movs	r3, r0
   11cb6:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   11cb8:	2382      	movs	r3, #130	; 0x82
   11cba:	009b      	lsls	r3, r3, #2
   11cbc:	18fb      	adds	r3, r7, r3
   11cbe:	881b      	ldrh	r3, [r3, #0]
   11cc0:	0a1b      	lsrs	r3, r3, #8
   11cc2:	b29b      	uxth	r3, r3
   11cc4:	b2d9      	uxtb	r1, r3
   11cc6:	4b18      	ldr	r3, [pc, #96]	; (11d28 <vesc_get_vals+0x1b0>)
   11cc8:	2284      	movs	r2, #132	; 0x84
   11cca:	0092      	lsls	r2, r2, #2
   11ccc:	4694      	mov	ip, r2
   11cce:	44bc      	add	ip, r7
   11cd0:	4463      	add	r3, ip
   11cd2:	4a1b      	ldr	r2, [pc, #108]	; (11d40 <vesc_get_vals+0x1c8>)
   11cd4:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   11cd6:	2382      	movs	r3, #130	; 0x82
   11cd8:	009b      	lsls	r3, r3, #2
   11cda:	18fb      	adds	r3, r7, r3
   11cdc:	881b      	ldrh	r3, [r3, #0]
   11cde:	b2d9      	uxtb	r1, r3
   11ce0:	4b11      	ldr	r3, [pc, #68]	; (11d28 <vesc_get_vals+0x1b0>)
   11ce2:	2284      	movs	r2, #132	; 0x84
   11ce4:	0092      	lsls	r2, r2, #2
   11ce6:	18ba      	adds	r2, r7, r2
   11ce8:	18d2      	adds	r2, r2, r3
   11cea:	2381      	movs	r3, #129	; 0x81
   11cec:	009b      	lsls	r3, r3, #2
   11cee:	54d1      	strb	r1, [r2, r3]
	}

	send_packet(send_pack);
   11cf0:	4b0d      	ldr	r3, [pc, #52]	; (11d28 <vesc_get_vals+0x1b0>)
   11cf2:	2284      	movs	r2, #132	; 0x84
   11cf4:	0092      	lsls	r2, r2, #2
   11cf6:	18ba      	adds	r2, r7, r2
   11cf8:	18d4      	adds	r4, r2, r3
   11cfa:	466b      	mov	r3, sp
   11cfc:	0018      	movs	r0, r3
   11cfe:	0021      	movs	r1, r4
   11d00:	3110      	adds	r1, #16
   11d02:	23fb      	movs	r3, #251	; 0xfb
   11d04:	005b      	lsls	r3, r3, #1
   11d06:	001a      	movs	r2, r3
   11d08:	4b0f      	ldr	r3, [pc, #60]	; (11d48 <vesc_get_vals+0x1d0>)
   11d0a:	4798      	blx	r3
   11d0c:	6820      	ldr	r0, [r4, #0]
   11d0e:	6861      	ldr	r1, [r4, #4]
   11d10:	68a2      	ldr	r2, [r4, #8]
   11d12:	68e3      	ldr	r3, [r4, #12]
   11d14:	4c0d      	ldr	r4, [pc, #52]	; (11d4c <vesc_get_vals+0x1d4>)
   11d16:	47a0      	blx	r4
}
   11d18:	46c0      	nop			; (mov r8, r8)
   11d1a:	46bd      	mov	sp, r7
   11d1c:	2385      	movs	r3, #133	; 0x85
   11d1e:	009b      	lsls	r3, r3, #2
   11d20:	449d      	add	sp, r3
   11d22:	bd90      	pop	{r4, r7, pc}
   11d24:	fffffbf4 	.word	0xfffffbf4
   11d28:	fffffdf0 	.word	0xfffffdf0
   11d2c:	20000e1c 	.word	0x20000e1c
   11d30:	200003cf 	.word	0x200003cf
   11d34:	0000bfcd 	.word	0x0000bfcd
   11d38:	0000020a 	.word	0x0000020a
   11d3c:	00010815 	.word	0x00010815
   11d40:	00000203 	.word	0x00000203
   11d44:	200003c9 	.word	0x200003c9
   11d48:	0001b3e9 	.word	0x0001b3e9
   11d4c:	00010981 	.word	0x00010981

00011d50 <vesc_get_mcconf>:

void vesc_get_mcconf(){
   11d50:	b590      	push	{r4, r7, lr}
   11d52:	4c2d      	ldr	r4, [pc, #180]	; (11e08 <vesc_get_mcconf+0xb8>)
   11d54:	44a5      	add	sp, r4
   11d56:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   11d58:	4b2c      	ldr	r3, [pc, #176]	; (11e0c <vesc_get_mcconf+0xbc>)
   11d5a:	2282      	movs	r2, #130	; 0x82
   11d5c:	0092      	lsls	r2, r2, #2
   11d5e:	4694      	mov	ip, r2
   11d60:	44bc      	add	ip, r7
   11d62:	4463      	add	r3, ip
   11d64:	2202      	movs	r2, #2
   11d66:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
   11d68:	4b28      	ldr	r3, [pc, #160]	; (11e0c <vesc_get_mcconf+0xbc>)
   11d6a:	2282      	movs	r2, #130	; 0x82
   11d6c:	0092      	lsls	r2, r2, #2
   11d6e:	4694      	mov	ip, r2
   11d70:	44bc      	add	ip, r7
   11d72:	4463      	add	r3, ip
   11d74:	2201      	movs	r2, #1
   11d76:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_MCCONF;
   11d78:	4b25      	ldr	r3, [pc, #148]	; (11e10 <vesc_get_mcconf+0xc0>)
   11d7a:	781a      	ldrb	r2, [r3, #0]
   11d7c:	4b23      	ldr	r3, [pc, #140]	; (11e0c <vesc_get_mcconf+0xbc>)
   11d7e:	2182      	movs	r1, #130	; 0x82
   11d80:	0089      	lsls	r1, r1, #2
   11d82:	468c      	mov	ip, r1
   11d84:	44bc      	add	ip, r7
   11d86:	4463      	add	r3, ip
   11d88:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
   11d8a:	4b22      	ldr	r3, [pc, #136]	; (11e14 <vesc_get_mcconf+0xc4>)
   11d8c:	18fc      	adds	r4, r7, r3
   11d8e:	003b      	movs	r3, r7
   11d90:	3303      	adds	r3, #3
   11d92:	2101      	movs	r1, #1
   11d94:	0018      	movs	r0, r3
   11d96:	4b20      	ldr	r3, [pc, #128]	; (11e18 <vesc_get_mcconf+0xc8>)
   11d98:	4798      	blx	r3
   11d9a:	0003      	movs	r3, r0
   11d9c:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   11d9e:	4b1d      	ldr	r3, [pc, #116]	; (11e14 <vesc_get_mcconf+0xc4>)
   11da0:	18fb      	adds	r3, r7, r3
   11da2:	881b      	ldrh	r3, [r3, #0]
   11da4:	0a1b      	lsrs	r3, r3, #8
   11da6:	b29b      	uxth	r3, r3
   11da8:	b2d9      	uxtb	r1, r3
   11daa:	4b18      	ldr	r3, [pc, #96]	; (11e0c <vesc_get_mcconf+0xbc>)
   11dac:	2282      	movs	r2, #130	; 0x82
   11dae:	0092      	lsls	r2, r2, #2
   11db0:	4694      	mov	ip, r2
   11db2:	44bc      	add	ip, r7
   11db4:	4463      	add	r3, ip
   11db6:	4a19      	ldr	r2, [pc, #100]	; (11e1c <vesc_get_mcconf+0xcc>)
   11db8:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   11dba:	4b16      	ldr	r3, [pc, #88]	; (11e14 <vesc_get_mcconf+0xc4>)
   11dbc:	18fb      	adds	r3, r7, r3
   11dbe:	881b      	ldrh	r3, [r3, #0]
   11dc0:	b2d9      	uxtb	r1, r3
   11dc2:	4b12      	ldr	r3, [pc, #72]	; (11e0c <vesc_get_mcconf+0xbc>)
   11dc4:	2282      	movs	r2, #130	; 0x82
   11dc6:	0092      	lsls	r2, r2, #2
   11dc8:	18ba      	adds	r2, r7, r2
   11dca:	18d2      	adds	r2, r2, r3
   11dcc:	2381      	movs	r3, #129	; 0x81
   11dce:	009b      	lsls	r3, r3, #2
   11dd0:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   11dd2:	4b0e      	ldr	r3, [pc, #56]	; (11e0c <vesc_get_mcconf+0xbc>)
   11dd4:	2282      	movs	r2, #130	; 0x82
   11dd6:	0092      	lsls	r2, r2, #2
   11dd8:	18ba      	adds	r2, r7, r2
   11dda:	18d4      	adds	r4, r2, r3
   11ddc:	466b      	mov	r3, sp
   11dde:	0018      	movs	r0, r3
   11de0:	0021      	movs	r1, r4
   11de2:	3110      	adds	r1, #16
   11de4:	23fb      	movs	r3, #251	; 0xfb
   11de6:	005b      	lsls	r3, r3, #1
   11de8:	001a      	movs	r2, r3
   11dea:	4b0d      	ldr	r3, [pc, #52]	; (11e20 <vesc_get_mcconf+0xd0>)
   11dec:	4798      	blx	r3
   11dee:	6820      	ldr	r0, [r4, #0]
   11df0:	6861      	ldr	r1, [r4, #4]
   11df2:	68a2      	ldr	r2, [r4, #8]
   11df4:	68e3      	ldr	r3, [r4, #12]
   11df6:	4c0b      	ldr	r4, [pc, #44]	; (11e24 <vesc_get_mcconf+0xd4>)
   11df8:	47a0      	blx	r4
}
   11dfa:	46c0      	nop			; (mov r8, r8)
   11dfc:	46bd      	mov	sp, r7
   11dfe:	2383      	movs	r3, #131	; 0x83
   11e00:	009b      	lsls	r3, r3, #2
   11e02:	449d      	add	sp, r3
   11e04:	bd90      	pop	{r4, r7, pc}
   11e06:	46c0      	nop			; (mov r8, r8)
   11e08:	fffffbfc 	.word	0xfffffbfc
   11e0c:	fffffdf8 	.word	0xfffffdf8
   11e10:	200003ca 	.word	0x200003ca
   11e14:	00000206 	.word	0x00000206
   11e18:	00010815 	.word	0x00010815
   11e1c:	00000203 	.word	0x00000203
   11e20:	0001b3e9 	.word	0x0001b3e9
   11e24:	00010981 	.word	0x00010981

00011e28 <vesc_get_pwm>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_get_pwm(){
   11e28:	b590      	push	{r4, r7, lr}
   11e2a:	4c30      	ldr	r4, [pc, #192]	; (11eec <vesc_get_pwm+0xc4>)
   11e2c:	44a5      	add	sp, r4
   11e2e:	af7e      	add	r7, sp, #504	; 0x1f8
	if(!SEND_VESC_CHUCK)
   11e30:	4b2f      	ldr	r3, [pc, #188]	; (11ef0 <vesc_get_pwm+0xc8>)
   11e32:	781b      	ldrb	r3, [r3, #0]
   11e34:	2201      	movs	r2, #1
   11e36:	4053      	eors	r3, r2
   11e38:	b2db      	uxtb	r3, r3
   11e3a:	2b00      	cmp	r3, #0
   11e3c:	d050      	beq.n	11ee0 <vesc_get_pwm+0xb8>
	{
		struct uart_packet send_pack;

		send_pack.start = 0x02;
   11e3e:	4b2d      	ldr	r3, [pc, #180]	; (11ef4 <vesc_get_pwm+0xcc>)
   11e40:	2282      	movs	r2, #130	; 0x82
   11e42:	0092      	lsls	r2, r2, #2
   11e44:	4694      	mov	ip, r2
   11e46:	44bc      	add	ip, r7
   11e48:	4463      	add	r3, ip
   11e4a:	2202      	movs	r2, #2
   11e4c:	701a      	strb	r2, [r3, #0]
		send_pack.len[0] = 0x01;
   11e4e:	4b29      	ldr	r3, [pc, #164]	; (11ef4 <vesc_get_pwm+0xcc>)
   11e50:	2282      	movs	r2, #130	; 0x82
   11e52:	0092      	lsls	r2, r2, #2
   11e54:	4694      	mov	ip, r2
   11e56:	44bc      	add	ip, r7
   11e58:	4463      	add	r3, ip
   11e5a:	2201      	movs	r2, #1
   11e5c:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_DECODED_PPM;
   11e5e:	4b26      	ldr	r3, [pc, #152]	; (11ef8 <vesc_get_pwm+0xd0>)
   11e60:	781a      	ldrb	r2, [r3, #0]
   11e62:	4b24      	ldr	r3, [pc, #144]	; (11ef4 <vesc_get_pwm+0xcc>)
   11e64:	2182      	movs	r1, #130	; 0x82
   11e66:	0089      	lsls	r1, r1, #2
   11e68:	468c      	mov	ip, r1
   11e6a:	44bc      	add	ip, r7
   11e6c:	4463      	add	r3, ip
   11e6e:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
   11e70:	4b22      	ldr	r3, [pc, #136]	; (11efc <vesc_get_pwm+0xd4>)
   11e72:	18fc      	adds	r4, r7, r3
   11e74:	003b      	movs	r3, r7
   11e76:	3303      	adds	r3, #3
   11e78:	2101      	movs	r1, #1
   11e7a:	0018      	movs	r0, r3
   11e7c:	4b20      	ldr	r3, [pc, #128]	; (11f00 <vesc_get_pwm+0xd8>)
   11e7e:	4798      	blx	r3
   11e80:	0003      	movs	r3, r0
   11e82:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   11e84:	4b1d      	ldr	r3, [pc, #116]	; (11efc <vesc_get_pwm+0xd4>)
   11e86:	18fb      	adds	r3, r7, r3
   11e88:	881b      	ldrh	r3, [r3, #0]
   11e8a:	0a1b      	lsrs	r3, r3, #8
   11e8c:	b29b      	uxth	r3, r3
   11e8e:	b2d9      	uxtb	r1, r3
   11e90:	4b18      	ldr	r3, [pc, #96]	; (11ef4 <vesc_get_pwm+0xcc>)
   11e92:	2282      	movs	r2, #130	; 0x82
   11e94:	0092      	lsls	r2, r2, #2
   11e96:	4694      	mov	ip, r2
   11e98:	44bc      	add	ip, r7
   11e9a:	4463      	add	r3, ip
   11e9c:	4a19      	ldr	r2, [pc, #100]	; (11f04 <vesc_get_pwm+0xdc>)
   11e9e:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   11ea0:	4b16      	ldr	r3, [pc, #88]	; (11efc <vesc_get_pwm+0xd4>)
   11ea2:	18fb      	adds	r3, r7, r3
   11ea4:	881b      	ldrh	r3, [r3, #0]
   11ea6:	b2d9      	uxtb	r1, r3
   11ea8:	4b12      	ldr	r3, [pc, #72]	; (11ef4 <vesc_get_pwm+0xcc>)
   11eaa:	2282      	movs	r2, #130	; 0x82
   11eac:	0092      	lsls	r2, r2, #2
   11eae:	18ba      	adds	r2, r7, r2
   11eb0:	18d2      	adds	r2, r2, r3
   11eb2:	2381      	movs	r3, #129	; 0x81
   11eb4:	009b      	lsls	r3, r3, #2
   11eb6:	54d1      	strb	r1, [r2, r3]

		send_packet(send_pack);
   11eb8:	4b0e      	ldr	r3, [pc, #56]	; (11ef4 <vesc_get_pwm+0xcc>)
   11eba:	2282      	movs	r2, #130	; 0x82
   11ebc:	0092      	lsls	r2, r2, #2
   11ebe:	18ba      	adds	r2, r7, r2
   11ec0:	18d4      	adds	r4, r2, r3
   11ec2:	466b      	mov	r3, sp
   11ec4:	0018      	movs	r0, r3
   11ec6:	0021      	movs	r1, r4
   11ec8:	3110      	adds	r1, #16
   11eca:	23fb      	movs	r3, #251	; 0xfb
   11ecc:	005b      	lsls	r3, r3, #1
   11ece:	001a      	movs	r2, r3
   11ed0:	4b0d      	ldr	r3, [pc, #52]	; (11f08 <vesc_get_pwm+0xe0>)
   11ed2:	4798      	blx	r3
   11ed4:	6820      	ldr	r0, [r4, #0]
   11ed6:	6861      	ldr	r1, [r4, #4]
   11ed8:	68a2      	ldr	r2, [r4, #8]
   11eda:	68e3      	ldr	r3, [r4, #12]
   11edc:	4c0b      	ldr	r4, [pc, #44]	; (11f0c <vesc_get_pwm+0xe4>)
   11ede:	47a0      	blx	r4
	}
}
   11ee0:	46c0      	nop			; (mov r8, r8)
   11ee2:	46bd      	mov	sp, r7
   11ee4:	2383      	movs	r3, #131	; 0x83
   11ee6:	009b      	lsls	r3, r3, #2
   11ee8:	449d      	add	sp, r3
   11eea:	bd90      	pop	{r4, r7, pc}
   11eec:	fffffbfc 	.word	0xfffffbfc
   11ef0:	200003f7 	.word	0x200003f7
   11ef4:	fffffdf8 	.word	0xfffffdf8
   11ef8:	200003cc 	.word	0x200003cc
   11efc:	00000206 	.word	0x00000206
   11f00:	00010815 	.word	0x00010815
   11f04:	00000203 	.word	0x00000203
   11f08:	0001b3e9 	.word	0x0001b3e9
   11f0c:	00010981 	.word	0x00010981

00011f10 <vesc_get_chuck>:

void vesc_get_chuck(){
   11f10:	b590      	push	{r4, r7, lr}
   11f12:	4c2d      	ldr	r4, [pc, #180]	; (11fc8 <vesc_get_chuck+0xb8>)
   11f14:	44a5      	add	sp, r4
   11f16:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   11f18:	4b2c      	ldr	r3, [pc, #176]	; (11fcc <vesc_get_chuck+0xbc>)
   11f1a:	2282      	movs	r2, #130	; 0x82
   11f1c:	0092      	lsls	r2, r2, #2
   11f1e:	4694      	mov	ip, r2
   11f20:	44bc      	add	ip, r7
   11f22:	4463      	add	r3, ip
   11f24:	2202      	movs	r2, #2
   11f26:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
   11f28:	4b28      	ldr	r3, [pc, #160]	; (11fcc <vesc_get_chuck+0xbc>)
   11f2a:	2282      	movs	r2, #130	; 0x82
   11f2c:	0092      	lsls	r2, r2, #2
   11f2e:	4694      	mov	ip, r2
   11f30:	44bc      	add	ip, r7
   11f32:	4463      	add	r3, ip
   11f34:	2201      	movs	r2, #1
   11f36:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_CHUK;
   11f38:	4b25      	ldr	r3, [pc, #148]	; (11fd0 <vesc_get_chuck+0xc0>)
   11f3a:	781a      	ldrb	r2, [r3, #0]
   11f3c:	4b23      	ldr	r3, [pc, #140]	; (11fcc <vesc_get_chuck+0xbc>)
   11f3e:	2182      	movs	r1, #130	; 0x82
   11f40:	0089      	lsls	r1, r1, #2
   11f42:	468c      	mov	ip, r1
   11f44:	44bc      	add	ip, r7
   11f46:	4463      	add	r3, ip
   11f48:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
   11f4a:	4b22      	ldr	r3, [pc, #136]	; (11fd4 <vesc_get_chuck+0xc4>)
   11f4c:	18fc      	adds	r4, r7, r3
   11f4e:	003b      	movs	r3, r7
   11f50:	3303      	adds	r3, #3
   11f52:	2101      	movs	r1, #1
   11f54:	0018      	movs	r0, r3
   11f56:	4b20      	ldr	r3, [pc, #128]	; (11fd8 <vesc_get_chuck+0xc8>)
   11f58:	4798      	blx	r3
   11f5a:	0003      	movs	r3, r0
   11f5c:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   11f5e:	4b1d      	ldr	r3, [pc, #116]	; (11fd4 <vesc_get_chuck+0xc4>)
   11f60:	18fb      	adds	r3, r7, r3
   11f62:	881b      	ldrh	r3, [r3, #0]
   11f64:	0a1b      	lsrs	r3, r3, #8
   11f66:	b29b      	uxth	r3, r3
   11f68:	b2d9      	uxtb	r1, r3
   11f6a:	4b18      	ldr	r3, [pc, #96]	; (11fcc <vesc_get_chuck+0xbc>)
   11f6c:	2282      	movs	r2, #130	; 0x82
   11f6e:	0092      	lsls	r2, r2, #2
   11f70:	4694      	mov	ip, r2
   11f72:	44bc      	add	ip, r7
   11f74:	4463      	add	r3, ip
   11f76:	4a19      	ldr	r2, [pc, #100]	; (11fdc <vesc_get_chuck+0xcc>)
   11f78:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   11f7a:	4b16      	ldr	r3, [pc, #88]	; (11fd4 <vesc_get_chuck+0xc4>)
   11f7c:	18fb      	adds	r3, r7, r3
   11f7e:	881b      	ldrh	r3, [r3, #0]
   11f80:	b2d9      	uxtb	r1, r3
   11f82:	4b12      	ldr	r3, [pc, #72]	; (11fcc <vesc_get_chuck+0xbc>)
   11f84:	2282      	movs	r2, #130	; 0x82
   11f86:	0092      	lsls	r2, r2, #2
   11f88:	18ba      	adds	r2, r7, r2
   11f8a:	18d2      	adds	r2, r2, r3
   11f8c:	2381      	movs	r3, #129	; 0x81
   11f8e:	009b      	lsls	r3, r3, #2
   11f90:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   11f92:	4b0e      	ldr	r3, [pc, #56]	; (11fcc <vesc_get_chuck+0xbc>)
   11f94:	2282      	movs	r2, #130	; 0x82
   11f96:	0092      	lsls	r2, r2, #2
   11f98:	18ba      	adds	r2, r7, r2
   11f9a:	18d4      	adds	r4, r2, r3
   11f9c:	466b      	mov	r3, sp
   11f9e:	0018      	movs	r0, r3
   11fa0:	0021      	movs	r1, r4
   11fa2:	3110      	adds	r1, #16
   11fa4:	23fb      	movs	r3, #251	; 0xfb
   11fa6:	005b      	lsls	r3, r3, #1
   11fa8:	001a      	movs	r2, r3
   11faa:	4b0d      	ldr	r3, [pc, #52]	; (11fe0 <vesc_get_chuck+0xd0>)
   11fac:	4798      	blx	r3
   11fae:	6820      	ldr	r0, [r4, #0]
   11fb0:	6861      	ldr	r1, [r4, #4]
   11fb2:	68a2      	ldr	r2, [r4, #8]
   11fb4:	68e3      	ldr	r3, [r4, #12]
   11fb6:	4c0b      	ldr	r4, [pc, #44]	; (11fe4 <vesc_get_chuck+0xd4>)
   11fb8:	47a0      	blx	r4
}
   11fba:	46c0      	nop			; (mov r8, r8)
   11fbc:	46bd      	mov	sp, r7
   11fbe:	2383      	movs	r3, #131	; 0x83
   11fc0:	009b      	lsls	r3, r3, #2
   11fc2:	449d      	add	sp, r3
   11fc4:	bd90      	pop	{r4, r7, pc}
   11fc6:	46c0      	nop			; (mov r8, r8)
   11fc8:	fffffbfc 	.word	0xfffffbfc
   11fcc:	fffffdf8 	.word	0xfffffdf8
   11fd0:	200003cd 	.word	0x200003cd
   11fd4:	00000206 	.word	0x00000206
   11fd8:	00010815 	.word	0x00010815
   11fdc:	00000203 	.word	0x00000203
   11fe0:	0001b3e9 	.word	0x0001b3e9
   11fe4:	00010981 	.word	0x00010981

00011fe8 <vesc_set_chuck>:

void vesc_set_chuck(){
   11fe8:	b590      	push	{r4, r7, lr}
   11fea:	4c64      	ldr	r4, [pc, #400]	; (1217c <vesc_set_chuck+0x194>)
   11fec:	44a5      	add	sp, r4
   11fee:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
   11ff0:	4b63      	ldr	r3, [pc, #396]	; (12180 <vesc_set_chuck+0x198>)
   11ff2:	2282      	movs	r2, #130	; 0x82
   11ff4:	0092      	lsls	r2, r2, #2
   11ff6:	4694      	mov	ip, r2
   11ff8:	44bc      	add	ip, r7
   11ffa:	4463      	add	r3, ip
   11ffc:	2202      	movs	r2, #2
   11ffe:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x0B;
   12000:	4b5f      	ldr	r3, [pc, #380]	; (12180 <vesc_set_chuck+0x198>)
   12002:	2282      	movs	r2, #130	; 0x82
   12004:	0092      	lsls	r2, r2, #2
   12006:	4694      	mov	ip, r2
   12008:	44bc      	add	ip, r7
   1200a:	4463      	add	r3, ip
   1200c:	220b      	movs	r2, #11
   1200e:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_SET_CHUCK_DATA;
   12010:	4b5c      	ldr	r3, [pc, #368]	; (12184 <vesc_set_chuck+0x19c>)
   12012:	781a      	ldrb	r2, [r3, #0]
   12014:	4b5a      	ldr	r3, [pc, #360]	; (12180 <vesc_set_chuck+0x198>)
   12016:	2182      	movs	r1, #130	; 0x82
   12018:	0089      	lsls	r1, r1, #2
   1201a:	468c      	mov	ip, r1
   1201c:	44bc      	add	ip, r7
   1201e:	4463      	add	r3, ip
   12020:	70da      	strb	r2, [r3, #3]
	send_pack.payload[1] = send_chuck_struct.js_x;
   12022:	4b59      	ldr	r3, [pc, #356]	; (12188 <vesc_set_chuck+0x1a0>)
   12024:	781b      	ldrb	r3, [r3, #0]
   12026:	b25b      	sxtb	r3, r3
   12028:	b2da      	uxtb	r2, r3
   1202a:	4b55      	ldr	r3, [pc, #340]	; (12180 <vesc_set_chuck+0x198>)
   1202c:	2182      	movs	r1, #130	; 0x82
   1202e:	0089      	lsls	r1, r1, #2
   12030:	468c      	mov	ip, r1
   12032:	44bc      	add	ip, r7
   12034:	4463      	add	r3, ip
   12036:	711a      	strb	r2, [r3, #4]
	send_pack.payload[2] = send_chuck_struct.js_y;
   12038:	4b53      	ldr	r3, [pc, #332]	; (12188 <vesc_set_chuck+0x1a0>)
   1203a:	785b      	ldrb	r3, [r3, #1]
   1203c:	b25b      	sxtb	r3, r3
   1203e:	b2da      	uxtb	r2, r3
   12040:	4b4f      	ldr	r3, [pc, #316]	; (12180 <vesc_set_chuck+0x198>)
   12042:	2182      	movs	r1, #130	; 0x82
   12044:	0089      	lsls	r1, r1, #2
   12046:	468c      	mov	ip, r1
   12048:	44bc      	add	ip, r7
   1204a:	4463      	add	r3, ip
   1204c:	715a      	strb	r2, [r3, #5]
	send_pack.payload[3] = send_chuck_struct.bt_c;
   1204e:	4b4e      	ldr	r3, [pc, #312]	; (12188 <vesc_set_chuck+0x1a0>)
   12050:	7a1b      	ldrb	r3, [r3, #8]
   12052:	001a      	movs	r2, r3
   12054:	4b4a      	ldr	r3, [pc, #296]	; (12180 <vesc_set_chuck+0x198>)
   12056:	2182      	movs	r1, #130	; 0x82
   12058:	0089      	lsls	r1, r1, #2
   1205a:	468c      	mov	ip, r1
   1205c:	44bc      	add	ip, r7
   1205e:	4463      	add	r3, ip
   12060:	719a      	strb	r2, [r3, #6]
	send_pack.payload[4] = send_chuck_struct.bt_z;
   12062:	4b49      	ldr	r3, [pc, #292]	; (12188 <vesc_set_chuck+0x1a0>)
   12064:	7a5b      	ldrb	r3, [r3, #9]
   12066:	001a      	movs	r2, r3
   12068:	4b45      	ldr	r3, [pc, #276]	; (12180 <vesc_set_chuck+0x198>)
   1206a:	2182      	movs	r1, #130	; 0x82
   1206c:	0089      	lsls	r1, r1, #2
   1206e:	468c      	mov	ip, r1
   12070:	44bc      	add	ip, r7
   12072:	4463      	add	r3, ip
   12074:	71da      	strb	r2, [r3, #7]
	send_pack.payload[5] = (send_chuck_struct.acc_x & 0xF0) >> 8;
   12076:	4b42      	ldr	r3, [pc, #264]	; (12180 <vesc_set_chuck+0x198>)
   12078:	2282      	movs	r2, #130	; 0x82
   1207a:	0092      	lsls	r2, r2, #2
   1207c:	4694      	mov	ip, r2
   1207e:	44bc      	add	ip, r7
   12080:	4463      	add	r3, ip
   12082:	2200      	movs	r2, #0
   12084:	721a      	strb	r2, [r3, #8]
	send_pack.payload[6] = (send_chuck_struct.acc_x & 0x0F);
   12086:	4b40      	ldr	r3, [pc, #256]	; (12188 <vesc_set_chuck+0x1a0>)
   12088:	2202      	movs	r2, #2
   1208a:	5e9b      	ldrsh	r3, [r3, r2]
   1208c:	b2db      	uxtb	r3, r3
   1208e:	220f      	movs	r2, #15
   12090:	4013      	ands	r3, r2
   12092:	b2da      	uxtb	r2, r3
   12094:	4b3a      	ldr	r3, [pc, #232]	; (12180 <vesc_set_chuck+0x198>)
   12096:	2182      	movs	r1, #130	; 0x82
   12098:	0089      	lsls	r1, r1, #2
   1209a:	468c      	mov	ip, r1
   1209c:	44bc      	add	ip, r7
   1209e:	4463      	add	r3, ip
   120a0:	725a      	strb	r2, [r3, #9]
	send_pack.payload[7] = (send_chuck_struct.acc_y & 0xF0) >> 8;
   120a2:	4b37      	ldr	r3, [pc, #220]	; (12180 <vesc_set_chuck+0x198>)
   120a4:	2282      	movs	r2, #130	; 0x82
   120a6:	0092      	lsls	r2, r2, #2
   120a8:	4694      	mov	ip, r2
   120aa:	44bc      	add	ip, r7
   120ac:	4463      	add	r3, ip
   120ae:	2200      	movs	r2, #0
   120b0:	729a      	strb	r2, [r3, #10]
	send_pack.payload[8] = (send_chuck_struct.acc_y & 0x0F);
   120b2:	4b35      	ldr	r3, [pc, #212]	; (12188 <vesc_set_chuck+0x1a0>)
   120b4:	2204      	movs	r2, #4
   120b6:	5e9b      	ldrsh	r3, [r3, r2]
   120b8:	b2db      	uxtb	r3, r3
   120ba:	220f      	movs	r2, #15
   120bc:	4013      	ands	r3, r2
   120be:	b2da      	uxtb	r2, r3
   120c0:	4b2f      	ldr	r3, [pc, #188]	; (12180 <vesc_set_chuck+0x198>)
   120c2:	2182      	movs	r1, #130	; 0x82
   120c4:	0089      	lsls	r1, r1, #2
   120c6:	468c      	mov	ip, r1
   120c8:	44bc      	add	ip, r7
   120ca:	4463      	add	r3, ip
   120cc:	72da      	strb	r2, [r3, #11]
	send_pack.payload[9] = (send_chuck_struct.acc_z & 0xF0) >> 8;
   120ce:	4b2c      	ldr	r3, [pc, #176]	; (12180 <vesc_set_chuck+0x198>)
   120d0:	2282      	movs	r2, #130	; 0x82
   120d2:	0092      	lsls	r2, r2, #2
   120d4:	4694      	mov	ip, r2
   120d6:	44bc      	add	ip, r7
   120d8:	4463      	add	r3, ip
   120da:	2200      	movs	r2, #0
   120dc:	731a      	strb	r2, [r3, #12]
	send_pack.payload[10] = (send_chuck_struct.acc_z & 0x0F);
   120de:	4b2a      	ldr	r3, [pc, #168]	; (12188 <vesc_set_chuck+0x1a0>)
   120e0:	2206      	movs	r2, #6
   120e2:	5e9b      	ldrsh	r3, [r3, r2]
   120e4:	b2db      	uxtb	r3, r3
   120e6:	220f      	movs	r2, #15
   120e8:	4013      	ands	r3, r2
   120ea:	b2da      	uxtb	r2, r3
   120ec:	4b24      	ldr	r3, [pc, #144]	; (12180 <vesc_set_chuck+0x198>)
   120ee:	2182      	movs	r1, #130	; 0x82
   120f0:	0089      	lsls	r1, r1, #2
   120f2:	468c      	mov	ip, r1
   120f4:	44bc      	add	ip, r7
   120f6:	4463      	add	r3, ip
   120f8:	735a      	strb	r2, [r3, #13]
	uint16_t crc = crc16(send_pack.payload, 11);
   120fa:	4b24      	ldr	r3, [pc, #144]	; (1218c <vesc_set_chuck+0x1a4>)
   120fc:	18fc      	adds	r4, r7, r3
   120fe:	003b      	movs	r3, r7
   12100:	3303      	adds	r3, #3
   12102:	210b      	movs	r1, #11
   12104:	0018      	movs	r0, r3
   12106:	4b22      	ldr	r3, [pc, #136]	; (12190 <vesc_set_chuck+0x1a8>)
   12108:	4798      	blx	r3
   1210a:	0003      	movs	r3, r0
   1210c:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
   1210e:	4b1f      	ldr	r3, [pc, #124]	; (1218c <vesc_set_chuck+0x1a4>)
   12110:	18fb      	adds	r3, r7, r3
   12112:	881b      	ldrh	r3, [r3, #0]
   12114:	0a1b      	lsrs	r3, r3, #8
   12116:	b29b      	uxth	r3, r3
   12118:	b2d9      	uxtb	r1, r3
   1211a:	4b19      	ldr	r3, [pc, #100]	; (12180 <vesc_set_chuck+0x198>)
   1211c:	2282      	movs	r2, #130	; 0x82
   1211e:	0092      	lsls	r2, r2, #2
   12120:	4694      	mov	ip, r2
   12122:	44bc      	add	ip, r7
   12124:	4463      	add	r3, ip
   12126:	4a1b      	ldr	r2, [pc, #108]	; (12194 <vesc_set_chuck+0x1ac>)
   12128:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
   1212a:	4b18      	ldr	r3, [pc, #96]	; (1218c <vesc_set_chuck+0x1a4>)
   1212c:	18fb      	adds	r3, r7, r3
   1212e:	881b      	ldrh	r3, [r3, #0]
   12130:	b2d9      	uxtb	r1, r3
   12132:	4b13      	ldr	r3, [pc, #76]	; (12180 <vesc_set_chuck+0x198>)
   12134:	2282      	movs	r2, #130	; 0x82
   12136:	0092      	lsls	r2, r2, #2
   12138:	18ba      	adds	r2, r7, r2
   1213a:	18d2      	adds	r2, r2, r3
   1213c:	2381      	movs	r3, #129	; 0x81
   1213e:	009b      	lsls	r3, r3, #2
   12140:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
   12142:	4b0f      	ldr	r3, [pc, #60]	; (12180 <vesc_set_chuck+0x198>)
   12144:	2282      	movs	r2, #130	; 0x82
   12146:	0092      	lsls	r2, r2, #2
   12148:	18ba      	adds	r2, r7, r2
   1214a:	18d4      	adds	r4, r2, r3
   1214c:	466b      	mov	r3, sp
   1214e:	0018      	movs	r0, r3
   12150:	0021      	movs	r1, r4
   12152:	3110      	adds	r1, #16
   12154:	23fb      	movs	r3, #251	; 0xfb
   12156:	005b      	lsls	r3, r3, #1
   12158:	001a      	movs	r2, r3
   1215a:	4b0f      	ldr	r3, [pc, #60]	; (12198 <vesc_set_chuck+0x1b0>)
   1215c:	4798      	blx	r3
   1215e:	6820      	ldr	r0, [r4, #0]
   12160:	6861      	ldr	r1, [r4, #4]
   12162:	68a2      	ldr	r2, [r4, #8]
   12164:	68e3      	ldr	r3, [r4, #12]
   12166:	4c0d      	ldr	r4, [pc, #52]	; (1219c <vesc_set_chuck+0x1b4>)
   12168:	47a0      	blx	r4
	HOLD_FOR_REPLY = false;
   1216a:	4b0d      	ldr	r3, [pc, #52]	; (121a0 <vesc_set_chuck+0x1b8>)
   1216c:	2200      	movs	r2, #0
   1216e:	701a      	strb	r2, [r3, #0]
}
   12170:	46c0      	nop			; (mov r8, r8)
   12172:	46bd      	mov	sp, r7
   12174:	2383      	movs	r3, #131	; 0x83
   12176:	009b      	lsls	r3, r3, #2
   12178:	449d      	add	sp, r3
   1217a:	bd90      	pop	{r4, r7, pc}
   1217c:	fffffbfc 	.word	0xfffffbfc
   12180:	fffffdf8 	.word	0xfffffdf8
   12184:	200003ce 	.word	0x200003ce
   12188:	2000056c 	.word	0x2000056c
   1218c:	00000206 	.word	0x00000206
   12190:	00010815 	.word	0x00010815
   12194:	00000203 	.word	0x00000203
   12198:	0001b3e9 	.word	0x0001b3e9
   1219c:	00010981 	.word	0x00010981
   121a0:	200003f4 	.word	0x200003f4

000121a4 <vesc_read_all>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_read_all(){
   121a4:	b580      	push	{r7, lr}
   121a6:	af00      	add	r7, sp, #0
	static uint8_t read_index = 0;
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
   121a8:	4b5e      	ldr	r3, [pc, #376]	; (12324 <vesc_read_all+0x180>)
   121aa:	4798      	blx	r3
   121ac:	0002      	movs	r2, r0
   121ae:	4b5e      	ldr	r3, [pc, #376]	; (12328 <vesc_read_all+0x184>)
   121b0:	681b      	ldr	r3, [r3, #0]
   121b2:	1ad2      	subs	r2, r2, r3
   121b4:	4b5d      	ldr	r3, [pc, #372]	; (1232c <vesc_read_all+0x188>)
   121b6:	681b      	ldr	r3, [r3, #0]
   121b8:	429a      	cmp	r2, r3
   121ba:	d902      	bls.n	121c2 <vesc_read_all+0x1e>
		HOLD_FOR_REPLY = false;
   121bc:	4b5c      	ldr	r3, [pc, #368]	; (12330 <vesc_read_all+0x18c>)
   121be:	2200      	movs	r2, #0
   121c0:	701a      	strb	r2, [r3, #0]

	switch(read_index){
   121c2:	4b5c      	ldr	r3, [pc, #368]	; (12334 <vesc_read_all+0x190>)
   121c4:	781b      	ldrb	r3, [r3, #0]
   121c6:	2b04      	cmp	r3, #4
   121c8:	d900      	bls.n	121cc <vesc_read_all+0x28>
   121ca:	e09b      	b.n	12304 <vesc_read_all+0x160>
   121cc:	009a      	lsls	r2, r3, #2
   121ce:	4b5a      	ldr	r3, [pc, #360]	; (12338 <vesc_read_all+0x194>)
   121d0:	18d3      	adds	r3, r2, r3
   121d2:	681b      	ldr	r3, [r3, #0]
   121d4:	469f      	mov	pc, r3
		case 0:
		if(!READ_VESC_PWM){
   121d6:	4b59      	ldr	r3, [pc, #356]	; (1233c <vesc_read_all+0x198>)
   121d8:	781b      	ldrb	r3, [r3, #0]
   121da:	2201      	movs	r2, #1
   121dc:	4053      	eors	r3, r2
   121de:	b2db      	uxtb	r3, r3
   121e0:	2b00      	cmp	r3, #0
   121e2:	d006      	beq.n	121f2 <vesc_read_all+0x4e>
			read_index++;
   121e4:	4b53      	ldr	r3, [pc, #332]	; (12334 <vesc_read_all+0x190>)
   121e6:	781b      	ldrb	r3, [r3, #0]
   121e8:	3301      	adds	r3, #1
   121ea:	b2da      	uxtb	r2, r3
   121ec:	4b51      	ldr	r3, [pc, #324]	; (12334 <vesc_read_all+0x190>)
   121ee:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_pwm();
		}
		break;
   121f0:	e081      	b.n	122f6 <vesc_read_all+0x152>
		} else if(!HOLD_FOR_REPLY){
   121f2:	4b4f      	ldr	r3, [pc, #316]	; (12330 <vesc_read_all+0x18c>)
   121f4:	781b      	ldrb	r3, [r3, #0]
   121f6:	2201      	movs	r2, #1
   121f8:	4053      	eors	r3, r2
   121fa:	b2db      	uxtb	r3, r3
   121fc:	2b00      	cmp	r3, #0
   121fe:	d100      	bne.n	12202 <vesc_read_all+0x5e>
   12200:	e079      	b.n	122f6 <vesc_read_all+0x152>
			read_index++;
   12202:	4b4c      	ldr	r3, [pc, #304]	; (12334 <vesc_read_all+0x190>)
   12204:	781b      	ldrb	r3, [r3, #0]
   12206:	3301      	adds	r3, #1
   12208:	b2da      	uxtb	r2, r3
   1220a:	4b4a      	ldr	r3, [pc, #296]	; (12334 <vesc_read_all+0x190>)
   1220c:	701a      	strb	r2, [r3, #0]
			vesc_get_pwm();
   1220e:	4b4c      	ldr	r3, [pc, #304]	; (12340 <vesc_read_all+0x19c>)
   12210:	4798      	blx	r3
		break;
   12212:	e070      	b.n	122f6 <vesc_read_all+0x152>
		case 1:
		if(!READ_VESC_FW){
   12214:	4b4b      	ldr	r3, [pc, #300]	; (12344 <vesc_read_all+0x1a0>)
   12216:	781b      	ldrb	r3, [r3, #0]
   12218:	2201      	movs	r2, #1
   1221a:	4053      	eors	r3, r2
   1221c:	b2db      	uxtb	r3, r3
   1221e:	2b00      	cmp	r3, #0
   12220:	d006      	beq.n	12230 <vesc_read_all+0x8c>
			read_index++;
   12222:	4b44      	ldr	r3, [pc, #272]	; (12334 <vesc_read_all+0x190>)
   12224:	781b      	ldrb	r3, [r3, #0]
   12226:	3301      	adds	r3, #1
   12228:	b2da      	uxtb	r2, r3
   1222a:	4b42      	ldr	r3, [pc, #264]	; (12334 <vesc_read_all+0x190>)
   1222c:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_fw_version();
		}
		break;
   1222e:	e064      	b.n	122fa <vesc_read_all+0x156>
		} else if(!HOLD_FOR_REPLY){
   12230:	4b3f      	ldr	r3, [pc, #252]	; (12330 <vesc_read_all+0x18c>)
   12232:	781b      	ldrb	r3, [r3, #0]
   12234:	2201      	movs	r2, #1
   12236:	4053      	eors	r3, r2
   12238:	b2db      	uxtb	r3, r3
   1223a:	2b00      	cmp	r3, #0
   1223c:	d05d      	beq.n	122fa <vesc_read_all+0x156>
			read_index++;
   1223e:	4b3d      	ldr	r3, [pc, #244]	; (12334 <vesc_read_all+0x190>)
   12240:	781b      	ldrb	r3, [r3, #0]
   12242:	3301      	adds	r3, #1
   12244:	b2da      	uxtb	r2, r3
   12246:	4b3b      	ldr	r3, [pc, #236]	; (12334 <vesc_read_all+0x190>)
   12248:	701a      	strb	r2, [r3, #0]
			vesc_get_fw_version();
   1224a:	4b3f      	ldr	r3, [pc, #252]	; (12348 <vesc_read_all+0x1a4>)
   1224c:	4798      	blx	r3
		break;
   1224e:	e054      	b.n	122fa <vesc_read_all+0x156>
		case 2:
		if(!READ_VESC_VALS){
   12250:	4b3e      	ldr	r3, [pc, #248]	; (1234c <vesc_read_all+0x1a8>)
   12252:	781b      	ldrb	r3, [r3, #0]
   12254:	2201      	movs	r2, #1
   12256:	4053      	eors	r3, r2
   12258:	b2db      	uxtb	r3, r3
   1225a:	2b00      	cmp	r3, #0
   1225c:	d006      	beq.n	1226c <vesc_read_all+0xc8>
			read_index++;
   1225e:	4b35      	ldr	r3, [pc, #212]	; (12334 <vesc_read_all+0x190>)
   12260:	781b      	ldrb	r3, [r3, #0]
   12262:	3301      	adds	r3, #1
   12264:	b2da      	uxtb	r2, r3
   12266:	4b33      	ldr	r3, [pc, #204]	; (12334 <vesc_read_all+0x190>)
   12268:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_vals();
		}
		break;
   1226a:	e048      	b.n	122fe <vesc_read_all+0x15a>
		} else if(!HOLD_FOR_REPLY){
   1226c:	4b30      	ldr	r3, [pc, #192]	; (12330 <vesc_read_all+0x18c>)
   1226e:	781b      	ldrb	r3, [r3, #0]
   12270:	2201      	movs	r2, #1
   12272:	4053      	eors	r3, r2
   12274:	b2db      	uxtb	r3, r3
   12276:	2b00      	cmp	r3, #0
   12278:	d041      	beq.n	122fe <vesc_read_all+0x15a>
			read_index++;
   1227a:	4b2e      	ldr	r3, [pc, #184]	; (12334 <vesc_read_all+0x190>)
   1227c:	781b      	ldrb	r3, [r3, #0]
   1227e:	3301      	adds	r3, #1
   12280:	b2da      	uxtb	r2, r3
   12282:	4b2c      	ldr	r3, [pc, #176]	; (12334 <vesc_read_all+0x190>)
   12284:	701a      	strb	r2, [r3, #0]
			vesc_get_vals();
   12286:	4b32      	ldr	r3, [pc, #200]	; (12350 <vesc_read_all+0x1ac>)
   12288:	4798      	blx	r3
		break;
   1228a:	e038      	b.n	122fe <vesc_read_all+0x15a>
		case 3:
		if(!READ_VESC_CHUCK){
   1228c:	4b31      	ldr	r3, [pc, #196]	; (12354 <vesc_read_all+0x1b0>)
   1228e:	781b      	ldrb	r3, [r3, #0]
   12290:	2201      	movs	r2, #1
   12292:	4053      	eors	r3, r2
   12294:	b2db      	uxtb	r3, r3
   12296:	2b00      	cmp	r3, #0
   12298:	d006      	beq.n	122a8 <vesc_read_all+0x104>
			read_index++;
   1229a:	4b26      	ldr	r3, [pc, #152]	; (12334 <vesc_read_all+0x190>)
   1229c:	781b      	ldrb	r3, [r3, #0]
   1229e:	3301      	adds	r3, #1
   122a0:	b2da      	uxtb	r2, r3
   122a2:	4b24      	ldr	r3, [pc, #144]	; (12334 <vesc_read_all+0x190>)
   122a4:	701a      	strb	r2, [r3, #0]
   122a6:	e00e      	b.n	122c6 <vesc_read_all+0x122>
		} else if(!HOLD_FOR_REPLY){
   122a8:	4b21      	ldr	r3, [pc, #132]	; (12330 <vesc_read_all+0x18c>)
   122aa:	781b      	ldrb	r3, [r3, #0]
   122ac:	2201      	movs	r2, #1
   122ae:	4053      	eors	r3, r2
   122b0:	b2db      	uxtb	r3, r3
   122b2:	2b00      	cmp	r3, #0
   122b4:	d007      	beq.n	122c6 <vesc_read_all+0x122>
			read_index++;
   122b6:	4b1f      	ldr	r3, [pc, #124]	; (12334 <vesc_read_all+0x190>)
   122b8:	781b      	ldrb	r3, [r3, #0]
   122ba:	3301      	adds	r3, #1
   122bc:	b2da      	uxtb	r2, r3
   122be:	4b1d      	ldr	r3, [pc, #116]	; (12334 <vesc_read_all+0x190>)
   122c0:	701a      	strb	r2, [r3, #0]
			vesc_get_chuck();
   122c2:	4b25      	ldr	r3, [pc, #148]	; (12358 <vesc_read_all+0x1b4>)
   122c4:	4798      	blx	r3
		}
		case 4:
		if(!SEND_VESC_CHUCK){
   122c6:	4b25      	ldr	r3, [pc, #148]	; (1235c <vesc_read_all+0x1b8>)
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	2201      	movs	r2, #1
   122cc:	4053      	eors	r3, r2
   122ce:	b2db      	uxtb	r3, r3
   122d0:	2b00      	cmp	r3, #0
   122d2:	d003      	beq.n	122dc <vesc_read_all+0x138>
			read_index=0;
   122d4:	4b17      	ldr	r3, [pc, #92]	; (12334 <vesc_read_all+0x190>)
   122d6:	2200      	movs	r2, #0
   122d8:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index=0;
			vesc_set_chuck();
		}
		break;
   122da:	e012      	b.n	12302 <vesc_read_all+0x15e>
		} else if(!HOLD_FOR_REPLY){
   122dc:	4b14      	ldr	r3, [pc, #80]	; (12330 <vesc_read_all+0x18c>)
   122de:	781b      	ldrb	r3, [r3, #0]
   122e0:	2201      	movs	r2, #1
   122e2:	4053      	eors	r3, r2
   122e4:	b2db      	uxtb	r3, r3
   122e6:	2b00      	cmp	r3, #0
   122e8:	d00b      	beq.n	12302 <vesc_read_all+0x15e>
			read_index=0;
   122ea:	4b12      	ldr	r3, [pc, #72]	; (12334 <vesc_read_all+0x190>)
   122ec:	2200      	movs	r2, #0
   122ee:	701a      	strb	r2, [r3, #0]
			vesc_set_chuck();
   122f0:	4b1b      	ldr	r3, [pc, #108]	; (12360 <vesc_read_all+0x1bc>)
   122f2:	4798      	blx	r3
		break;
   122f4:	e005      	b.n	12302 <vesc_read_all+0x15e>
		break;
   122f6:	46c0      	nop			; (mov r8, r8)
   122f8:	e004      	b.n	12304 <vesc_read_all+0x160>
		break;
   122fa:	46c0      	nop			; (mov r8, r8)
   122fc:	e002      	b.n	12304 <vesc_read_all+0x160>
		break;
   122fe:	46c0      	nop			; (mov r8, r8)
   12300:	e000      	b.n	12304 <vesc_read_all+0x160>
		break;
   12302:	46c0      	nop			; (mov r8, r8)
	}
	
	READ_VESC_PWM = false;
   12304:	4b0d      	ldr	r3, [pc, #52]	; (1233c <vesc_read_all+0x198>)
   12306:	2200      	movs	r2, #0
   12308:	701a      	strb	r2, [r3, #0]
	READ_VESC_FW = false;
   1230a:	4b0e      	ldr	r3, [pc, #56]	; (12344 <vesc_read_all+0x1a0>)
   1230c:	2200      	movs	r2, #0
   1230e:	701a      	strb	r2, [r3, #0]
	READ_VESC_VALS = false;
   12310:	4b0e      	ldr	r3, [pc, #56]	; (1234c <vesc_read_all+0x1a8>)
   12312:	2200      	movs	r2, #0
   12314:	701a      	strb	r2, [r3, #0]
	READ_VESC_CHUCK = false;
   12316:	4b0f      	ldr	r3, [pc, #60]	; (12354 <vesc_read_all+0x1b0>)
   12318:	2200      	movs	r2, #0
   1231a:	701a      	strb	r2, [r3, #0]
}
   1231c:	46c0      	nop			; (mov r8, r8)
   1231e:	46bd      	mov	sp, r7
   12320:	bd80      	pop	{r7, pc}
   12322:	46c0      	nop			; (mov r8, r8)
   12324:	00009f65 	.word	0x00009f65
   12328:	200003f0 	.word	0x200003f0
   1232c:	200000f4 	.word	0x200000f4
   12330:	200003f4 	.word	0x200003f4
   12334:	2000047c 	.word	0x2000047c
   12338:	0001bb68 	.word	0x0001bb68
   1233c:	200003f5 	.word	0x200003f5
   12340:	00011e29 	.word	0x00011e29
   12344:	200003f9 	.word	0x200003f9
   12348:	00011aa1 	.word	0x00011aa1
   1234c:	200003f8 	.word	0x200003f8
   12350:	00011b79 	.word	0x00011b79
   12354:	200003f6 	.word	0x200003f6
   12358:	00011f11 	.word	0x00011f11
   1235c:	200003f7 	.word	0x200003f7
   12360:	00011fe9 	.word	0x00011fe9

00012364 <detect_vesc_firmware>:


void detect_vesc_firmware(){
   12364:	b580      	push	{r7, lr}
   12366:	af00      	add	r7, sp, #0
	vesc_get_fw_version();
   12368:	4bcf      	ldr	r3, [pc, #828]	; (126a8 <detect_vesc_firmware+0x344>)
   1236a:	4798      	blx	r3

	if(latest_vesc_vals.FW_VERSION_MAJOR != 0 || latest_vesc_vals.FW_VERSION_MINOR != 0)
   1236c:	4bcf      	ldr	r3, [pc, #828]	; (126ac <detect_vesc_firmware+0x348>)
   1236e:	2234      	movs	r2, #52	; 0x34
   12370:	5c9b      	ldrb	r3, [r3, r2]
   12372:	2b00      	cmp	r3, #0
   12374:	d105      	bne.n	12382 <detect_vesc_firmware+0x1e>
   12376:	4bcd      	ldr	r3, [pc, #820]	; (126ac <detect_vesc_firmware+0x348>)
   12378:	2235      	movs	r2, #53	; 0x35
   1237a:	5c9b      	ldrb	r3, [r3, r2]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <detect_vesc_firmware+0x1e>
   12380:	e271      	b.n	12866 <detect_vesc_firmware+0x502>
	{
		ESC_FW_READ = true;
   12382:	4bcb      	ldr	r3, [pc, #812]	; (126b0 <detect_vesc_firmware+0x34c>)
   12384:	2201      	movs	r2, #1
   12386:	701a      	strb	r2, [r3, #0]

		// Define the location in which particular values can be found in COMM messages used by each FW
		if(latest_vesc_vals.FW_VERSION_MAJOR == 2 && latest_vesc_vals.FW_VERSION_MINOR <= 18){ // <= v2.18
   12388:	4bc8      	ldr	r3, [pc, #800]	; (126ac <detect_vesc_firmware+0x348>)
   1238a:	2234      	movs	r2, #52	; 0x34
   1238c:	5c9b      	ldrb	r3, [r3, r2]
   1238e:	2b02      	cmp	r3, #2
   12390:	d000      	beq.n	12394 <detect_vesc_firmware+0x30>
   12392:	e080      	b.n	12496 <detect_vesc_firmware+0x132>
   12394:	4bc5      	ldr	r3, [pc, #788]	; (126ac <detect_vesc_firmware+0x348>)
   12396:	2235      	movs	r2, #53	; 0x35
   12398:	5c9b      	ldrb	r3, [r3, r2]
   1239a:	2b12      	cmp	r3, #18
   1239c:	d87b      	bhi.n	12496 <detect_vesc_firmware+0x132>
			esc_fw = FW_2v18;
   1239e:	4bc5      	ldr	r3, [pc, #788]	; (126b4 <detect_vesc_firmware+0x350>)
   123a0:	2200      	movs	r2, #0
   123a2:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
   123a4:	4bc4      	ldr	r3, [pc, #784]	; (126b8 <detect_vesc_firmware+0x354>)
   123a6:	2200      	movs	r2, #0
   123a8:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
   123aa:	4bc4      	ldr	r3, [pc, #784]	; (126bc <detect_vesc_firmware+0x358>)
   123ac:	2204      	movs	r2, #4
   123ae:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 13;
   123b0:	4bc3      	ldr	r3, [pc, #780]	; (126c0 <detect_vesc_firmware+0x35c>)
   123b2:	220d      	movs	r2, #13
   123b4:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 29;
   123b6:	4bc3      	ldr	r3, [pc, #780]	; (126c4 <detect_vesc_firmware+0x360>)
   123b8:	221d      	movs	r2, #29
   123ba:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 30;
   123bc:	4bc2      	ldr	r3, [pc, #776]	; (126c8 <detect_vesc_firmware+0x364>)
   123be:	221e      	movs	r2, #30
   123c0:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 32;
   123c2:	4bc2      	ldr	r3, [pc, #776]	; (126cc <detect_vesc_firmware+0x368>)
   123c4:	2220      	movs	r2, #32
   123c6:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 34;
   123c8:	4bc1      	ldr	r3, [pc, #772]	; (126d0 <detect_vesc_firmware+0x36c>)
   123ca:	2222      	movs	r2, #34	; 0x22
   123cc:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
   123ce:	4bc1      	ldr	r3, [pc, #772]	; (126d4 <detect_vesc_firmware+0x370>)
   123d0:	22ff      	movs	r2, #255	; 0xff
   123d2:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
   123d4:	4bc0      	ldr	r3, [pc, #768]	; (126d8 <detect_vesc_firmware+0x374>)
   123d6:	22ff      	movs	r2, #255	; 0xff
   123d8:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
   123da:	4bc0      	ldr	r3, [pc, #768]	; (126dc <detect_vesc_firmware+0x378>)
   123dc:	2201      	movs	r2, #1
   123de:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 15;
   123e0:	4bbf      	ldr	r3, [pc, #764]	; (126e0 <detect_vesc_firmware+0x37c>)
   123e2:	220f      	movs	r2, #15
   123e4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 19;
   123e6:	4bbf      	ldr	r3, [pc, #764]	; (126e4 <detect_vesc_firmware+0x380>)
   123e8:	2213      	movs	r2, #19
   123ea:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 23;
   123ec:	4bbe      	ldr	r3, [pc, #760]	; (126e8 <detect_vesc_firmware+0x384>)
   123ee:	2217      	movs	r2, #23
   123f0:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 25;
   123f2:	4bbe      	ldr	r3, [pc, #760]	; (126ec <detect_vesc_firmware+0x388>)
   123f4:	2219      	movs	r2, #25
   123f6:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 29;
   123f8:	4bbd      	ldr	r3, [pc, #756]	; (126f0 <detect_vesc_firmware+0x38c>)
   123fa:	221d      	movs	r2, #29
   123fc:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 31;
   123fe:	4bbd      	ldr	r3, [pc, #756]	; (126f4 <detect_vesc_firmware+0x390>)
   12400:	221f      	movs	r2, #31
   12402:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 35;
   12404:	4bbc      	ldr	r3, [pc, #752]	; (126f8 <detect_vesc_firmware+0x394>)
   12406:	2223      	movs	r2, #35	; 0x23
   12408:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 39;
   1240a:	4bbc      	ldr	r3, [pc, #752]	; (126fc <detect_vesc_firmware+0x398>)
   1240c:	2227      	movs	r2, #39	; 0x27
   1240e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 43;
   12410:	4bbb      	ldr	r3, [pc, #748]	; (12700 <detect_vesc_firmware+0x39c>)
   12412:	222b      	movs	r2, #43	; 0x2b
   12414:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 47;
   12416:	4bbb      	ldr	r3, [pc, #748]	; (12704 <detect_vesc_firmware+0x3a0>)
   12418:	222f      	movs	r2, #47	; 0x2f
   1241a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 55;
   1241c:	4bba      	ldr	r3, [pc, #744]	; (12708 <detect_vesc_firmware+0x3a4>)
   1241e:	2237      	movs	r2, #55	; 0x37
   12420:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
   12422:	4bba      	ldr	r3, [pc, #744]	; (1270c <detect_vesc_firmware+0x3a8>)
   12424:	2205      	movs	r2, #5
   12426:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
   12428:	4bb9      	ldr	r3, [pc, #740]	; (12710 <detect_vesc_firmware+0x3ac>)
   1242a:	2209      	movs	r2, #9
   1242c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
   1242e:	4bb9      	ldr	r3, [pc, #740]	; (12714 <detect_vesc_firmware+0x3b0>)
   12430:	220d      	movs	r2, #13
   12432:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
   12434:	4bb8      	ldr	r3, [pc, #736]	; (12718 <detect_vesc_firmware+0x3b4>)
   12436:	2211      	movs	r2, #17
   12438:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
   1243a:	4bb8      	ldr	r3, [pc, #736]	; (1271c <detect_vesc_firmware+0x3b8>)
   1243c:	2215      	movs	r2, #21
   1243e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
   12440:	4bb7      	ldr	r3, [pc, #732]	; (12720 <detect_vesc_firmware+0x3bc>)
   12442:	2219      	movs	r2, #25
   12444:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
   12446:	4bb7      	ldr	r3, [pc, #732]	; (12724 <detect_vesc_firmware+0x3c0>)
   12448:	221d      	movs	r2, #29
   1244a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 33;
   1244c:	4bb6      	ldr	r3, [pc, #728]	; (12728 <detect_vesc_firmware+0x3c4>)
   1244e:	2221      	movs	r2, #33	; 0x21
   12450:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 37;
   12452:	4bb6      	ldr	r3, [pc, #728]	; (1272c <detect_vesc_firmware+0x3c8>)
   12454:	2225      	movs	r2, #37	; 0x25
   12456:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 41;
   12458:	4bb5      	ldr	r3, [pc, #724]	; (12730 <detect_vesc_firmware+0x3cc>)
   1245a:	2229      	movs	r2, #41	; 0x29
   1245c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 45;
   1245e:	4bb5      	ldr	r3, [pc, #724]	; (12734 <detect_vesc_firmware+0x3d0>)
   12460:	222d      	movs	r2, #45	; 0x2d
   12462:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 49;
   12464:	4bb4      	ldr	r3, [pc, #720]	; (12738 <detect_vesc_firmware+0x3d4>)
   12466:	2231      	movs	r2, #49	; 0x31
   12468:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 53;
   1246a:	4bb4      	ldr	r3, [pc, #720]	; (1273c <detect_vesc_firmware+0x3d8>)
   1246c:	2235      	movs	r2, #53	; 0x35
   1246e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 59;
   12470:	4bb3      	ldr	r3, [pc, #716]	; (12740 <detect_vesc_firmware+0x3dc>)
   12472:	223b      	movs	r2, #59	; 0x3b
   12474:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 63;
   12476:	4bb3      	ldr	r3, [pc, #716]	; (12744 <detect_vesc_firmware+0x3e0>)
   12478:	223f      	movs	r2, #63	; 0x3f
   1247a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 67;
   1247c:	4bb2      	ldr	r3, [pc, #712]	; (12748 <detect_vesc_firmware+0x3e4>)
   1247e:	2243      	movs	r2, #67	; 0x43
   12480:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 71;
   12482:	4bb2      	ldr	r3, [pc, #712]	; (1274c <detect_vesc_firmware+0x3e8>)
   12484:	2247      	movs	r2, #71	; 0x47
   12486:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 75;
   12488:	4bb1      	ldr	r3, [pc, #708]	; (12750 <detect_vesc_firmware+0x3ec>)
   1248a:	224b      	movs	r2, #75	; 0x4b
   1248c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 79;
   1248e:	4bb1      	ldr	r3, [pc, #708]	; (12754 <detect_vesc_firmware+0x3f0>)
   12490:	224f      	movs	r2, #79	; 0x4f
   12492:	701a      	strb	r2, [r3, #0]
   12494:	e1e7      	b.n	12866 <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR < 100){ // >= 3.0
   12496:	4b85      	ldr	r3, [pc, #532]	; (126ac <detect_vesc_firmware+0x348>)
   12498:	2234      	movs	r2, #52	; 0x34
   1249a:	5c9b      	ldrb	r3, [r3, r2]
   1249c:	2b03      	cmp	r3, #3
   1249e:	d000      	beq.n	124a2 <detect_vesc_firmware+0x13e>
   124a0:	e080      	b.n	125a4 <detect_vesc_firmware+0x240>
   124a2:	4b82      	ldr	r3, [pc, #520]	; (126ac <detect_vesc_firmware+0x348>)
   124a4:	2235      	movs	r2, #53	; 0x35
   124a6:	5c9b      	ldrb	r3, [r3, r2]
   124a8:	2b63      	cmp	r3, #99	; 0x63
   124aa:	d87b      	bhi.n	125a4 <detect_vesc_firmware+0x240>
			esc_fw = FW_3v00;
   124ac:	4b81      	ldr	r3, [pc, #516]	; (126b4 <detect_vesc_firmware+0x350>)
   124ae:	2201      	movs	r2, #1
   124b0:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
   124b2:	4b81      	ldr	r3, [pc, #516]	; (126b8 <detect_vesc_firmware+0x354>)
   124b4:	2200      	movs	r2, #0
   124b6:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
   124b8:	4b80      	ldr	r3, [pc, #512]	; (126bc <detect_vesc_firmware+0x358>)
   124ba:	2204      	movs	r2, #4
   124bc:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
   124be:	4b80      	ldr	r3, [pc, #512]	; (126c0 <detect_vesc_firmware+0x35c>)
   124c0:	220e      	movs	r2, #14
   124c2:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
   124c4:	4b7f      	ldr	r3, [pc, #508]	; (126c4 <detect_vesc_firmware+0x360>)
   124c6:	221e      	movs	r2, #30
   124c8:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
   124ca:	4b7f      	ldr	r3, [pc, #508]	; (126c8 <detect_vesc_firmware+0x364>)
   124cc:	221f      	movs	r2, #31
   124ce:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
   124d0:	4b7e      	ldr	r3, [pc, #504]	; (126cc <detect_vesc_firmware+0x368>)
   124d2:	2221      	movs	r2, #33	; 0x21
   124d4:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
   124d6:	4b7e      	ldr	r3, [pc, #504]	; (126d0 <detect_vesc_firmware+0x36c>)
   124d8:	2223      	movs	r2, #35	; 0x23
   124da:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 50;
   124dc:	4b7d      	ldr	r3, [pc, #500]	; (126d4 <detect_vesc_firmware+0x370>)
   124de:	2232      	movs	r2, #50	; 0x32
   124e0:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 65;
   124e2:	4b7d      	ldr	r3, [pc, #500]	; (126d8 <detect_vesc_firmware+0x374>)
   124e4:	2241      	movs	r2, #65	; 0x41
   124e6:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
   124e8:	4b7c      	ldr	r3, [pc, #496]	; (126dc <detect_vesc_firmware+0x378>)
   124ea:	2201      	movs	r2, #1
   124ec:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
   124ee:	4b7c      	ldr	r3, [pc, #496]	; (126e0 <detect_vesc_firmware+0x37c>)
   124f0:	2205      	movs	r2, #5
   124f2:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
   124f4:	4b7b      	ldr	r3, [pc, #492]	; (126e4 <detect_vesc_firmware+0x380>)
   124f6:	2209      	movs	r2, #9
   124f8:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
   124fa:	4b7b      	ldr	r3, [pc, #492]	; (126e8 <detect_vesc_firmware+0x384>)
   124fc:	2215      	movs	r2, #21
   124fe:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
   12500:	4b7a      	ldr	r3, [pc, #488]	; (126ec <detect_vesc_firmware+0x388>)
   12502:	2217      	movs	r2, #23
   12504:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
   12506:	4b7a      	ldr	r3, [pc, #488]	; (126f0 <detect_vesc_firmware+0x38c>)
   12508:	221b      	movs	r2, #27
   1250a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
   1250c:	4b79      	ldr	r3, [pc, #484]	; (126f4 <detect_vesc_firmware+0x390>)
   1250e:	221d      	movs	r2, #29
   12510:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
   12512:	4b79      	ldr	r3, [pc, #484]	; (126f8 <detect_vesc_firmware+0x394>)
   12514:	2221      	movs	r2, #33	; 0x21
   12516:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
   12518:	4b78      	ldr	r3, [pc, #480]	; (126fc <detect_vesc_firmware+0x398>)
   1251a:	2225      	movs	r2, #37	; 0x25
   1251c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
   1251e:	4b78      	ldr	r3, [pc, #480]	; (12700 <detect_vesc_firmware+0x39c>)
   12520:	2229      	movs	r2, #41	; 0x29
   12522:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
   12524:	4b77      	ldr	r3, [pc, #476]	; (12704 <detect_vesc_firmware+0x3a0>)
   12526:	222d      	movs	r2, #45	; 0x2d
   12528:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
   1252a:	4b77      	ldr	r3, [pc, #476]	; (12708 <detect_vesc_firmware+0x3a4>)
   1252c:	2235      	movs	r2, #53	; 0x35
   1252e:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
   12530:	4b76      	ldr	r3, [pc, #472]	; (1270c <detect_vesc_firmware+0x3a8>)
   12532:	2205      	movs	r2, #5
   12534:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
   12536:	4b76      	ldr	r3, [pc, #472]	; (12710 <detect_vesc_firmware+0x3ac>)
   12538:	2209      	movs	r2, #9
   1253a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
   1253c:	4b75      	ldr	r3, [pc, #468]	; (12714 <detect_vesc_firmware+0x3b0>)
   1253e:	220d      	movs	r2, #13
   12540:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
   12542:	4b75      	ldr	r3, [pc, #468]	; (12718 <detect_vesc_firmware+0x3b4>)
   12544:	2211      	movs	r2, #17
   12546:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
   12548:	4b74      	ldr	r3, [pc, #464]	; (1271c <detect_vesc_firmware+0x3b8>)
   1254a:	2215      	movs	r2, #21
   1254c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
   1254e:	4b74      	ldr	r3, [pc, #464]	; (12720 <detect_vesc_firmware+0x3bc>)
   12550:	2219      	movs	r2, #25
   12552:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
   12554:	4b73      	ldr	r3, [pc, #460]	; (12724 <detect_vesc_firmware+0x3c0>)
   12556:	221d      	movs	r2, #29
   12558:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
   1255a:	4b73      	ldr	r3, [pc, #460]	; (12728 <detect_vesc_firmware+0x3c4>)
   1255c:	2225      	movs	r2, #37	; 0x25
   1255e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
   12560:	4b72      	ldr	r3, [pc, #456]	; (1272c <detect_vesc_firmware+0x3c8>)
   12562:	2229      	movs	r2, #41	; 0x29
   12564:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
   12566:	4b72      	ldr	r3, [pc, #456]	; (12730 <detect_vesc_firmware+0x3cc>)
   12568:	222d      	movs	r2, #45	; 0x2d
   1256a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
   1256c:	4b71      	ldr	r3, [pc, #452]	; (12734 <detect_vesc_firmware+0x3d0>)
   1256e:	2231      	movs	r2, #49	; 0x31
   12570:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
   12572:	4b71      	ldr	r3, [pc, #452]	; (12738 <detect_vesc_firmware+0x3d4>)
   12574:	2235      	movs	r2, #53	; 0x35
   12576:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
   12578:	4b70      	ldr	r3, [pc, #448]	; (1273c <detect_vesc_firmware+0x3d8>)
   1257a:	2239      	movs	r2, #57	; 0x39
   1257c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
   1257e:	4b70      	ldr	r3, [pc, #448]	; (12740 <detect_vesc_firmware+0x3dc>)
   12580:	223e      	movs	r2, #62	; 0x3e
   12582:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
   12584:	4b6f      	ldr	r3, [pc, #444]	; (12744 <detect_vesc_firmware+0x3e0>)
   12586:	2242      	movs	r2, #66	; 0x42
   12588:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
   1258a:	4b6f      	ldr	r3, [pc, #444]	; (12748 <detect_vesc_firmware+0x3e4>)
   1258c:	2246      	movs	r2, #70	; 0x46
   1258e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
   12590:	4b6e      	ldr	r3, [pc, #440]	; (1274c <detect_vesc_firmware+0x3e8>)
   12592:	224a      	movs	r2, #74	; 0x4a
   12594:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
   12596:	4b6e      	ldr	r3, [pc, #440]	; (12750 <detect_vesc_firmware+0x3ec>)
   12598:	2252      	movs	r2, #82	; 0x52
   1259a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
   1259c:	4b6d      	ldr	r3, [pc, #436]	; (12754 <detect_vesc_firmware+0x3f0>)
   1259e:	2256      	movs	r2, #86	; 0x56
   125a0:	701a      	strb	r2, [r3, #0]
   125a2:	e160      	b.n	12866 <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 23){ // Unity
   125a4:	4b41      	ldr	r3, [pc, #260]	; (126ac <detect_vesc_firmware+0x348>)
   125a6:	2234      	movs	r2, #52	; 0x34
   125a8:	5c9b      	ldrb	r3, [r3, r2]
   125aa:	2b17      	cmp	r3, #23
   125ac:	d000      	beq.n	125b0 <detect_vesc_firmware+0x24c>
   125ae:	e0d3      	b.n	12758 <detect_vesc_firmware+0x3f4>
			esc_fw = FW_UNITY;
   125b0:	4b40      	ldr	r3, [pc, #256]	; (126b4 <detect_vesc_firmware+0x350>)
   125b2:	2202      	movs	r2, #2
   125b4:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
   125b6:	4b40      	ldr	r3, [pc, #256]	; (126b8 <detect_vesc_firmware+0x354>)
   125b8:	2200      	movs	r2, #0
   125ba:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4; // May use COMM_GET_UNITY_VALUES = 38
   125bc:	4b3f      	ldr	r3, [pc, #252]	; (126bc <detect_vesc_firmware+0x358>)
   125be:	2204      	movs	r2, #4
   125c0:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
   125c2:	4b3f      	ldr	r3, [pc, #252]	; (126c0 <detect_vesc_firmware+0x35c>)
   125c4:	220e      	movs	r2, #14
   125c6:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
   125c8:	4b3e      	ldr	r3, [pc, #248]	; (126c4 <detect_vesc_firmware+0x360>)
   125ca:	221e      	movs	r2, #30
   125cc:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
   125ce:	4b3e      	ldr	r3, [pc, #248]	; (126c8 <detect_vesc_firmware+0x364>)
   125d0:	221f      	movs	r2, #31
   125d2:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
   125d4:	4b3d      	ldr	r3, [pc, #244]	; (126cc <detect_vesc_firmware+0x368>)
   125d6:	2221      	movs	r2, #33	; 0x21
   125d8:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
   125da:	4b3d      	ldr	r3, [pc, #244]	; (126d0 <detect_vesc_firmware+0x36c>)
   125dc:	2223      	movs	r2, #35	; 0x23
   125de:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
   125e0:	4b3c      	ldr	r3, [pc, #240]	; (126d4 <detect_vesc_firmware+0x370>)
   125e2:	22ff      	movs	r2, #255	; 0xff
   125e4:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
   125e6:	4b3c      	ldr	r3, [pc, #240]	; (126d8 <detect_vesc_firmware+0x374>)
   125e8:	22ff      	movs	r2, #255	; 0xff
   125ea:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
   125ec:	4b3b      	ldr	r3, [pc, #236]	; (126dc <detect_vesc_firmware+0x378>)
   125ee:	2201      	movs	r2, #1
   125f0:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 9;
   125f2:	4b3b      	ldr	r3, [pc, #236]	; (126e0 <detect_vesc_firmware+0x37c>)
   125f4:	2209      	movs	r2, #9
   125f6:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 17;
   125f8:	4b3a      	ldr	r3, [pc, #232]	; (126e4 <detect_vesc_firmware+0x380>)
   125fa:	2211      	movs	r2, #17
   125fc:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 37;
   125fe:	4b3a      	ldr	r3, [pc, #232]	; (126e8 <detect_vesc_firmware+0x384>)
   12600:	2225      	movs	r2, #37	; 0x25
   12602:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 41;
   12604:	4b39      	ldr	r3, [pc, #228]	; (126ec <detect_vesc_firmware+0x388>)
   12606:	2229      	movs	r2, #41	; 0x29
   12608:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 49;
   1260a:	4b39      	ldr	r3, [pc, #228]	; (126f0 <detect_vesc_firmware+0x38c>)
   1260c:	2231      	movs	r2, #49	; 0x31
   1260e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 51;
   12610:	4b38      	ldr	r3, [pc, #224]	; (126f4 <detect_vesc_firmware+0x390>)
   12612:	2233      	movs	r2, #51	; 0x33
   12614:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 55;
   12616:	4b38      	ldr	r3, [pc, #224]	; (126f8 <detect_vesc_firmware+0x394>)
   12618:	2237      	movs	r2, #55	; 0x37
   1261a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 59;
   1261c:	4b37      	ldr	r3, [pc, #220]	; (126fc <detect_vesc_firmware+0x398>)
   1261e:	223b      	movs	r2, #59	; 0x3b
   12620:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 63;
   12622:	4b37      	ldr	r3, [pc, #220]	; (12700 <detect_vesc_firmware+0x39c>)
   12624:	223f      	movs	r2, #63	; 0x3f
   12626:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 67;
   12628:	4b36      	ldr	r3, [pc, #216]	; (12704 <detect_vesc_firmware+0x3a0>)
   1262a:	2243      	movs	r2, #67	; 0x43
   1262c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 83;
   1262e:	4b36      	ldr	r3, [pc, #216]	; (12708 <detect_vesc_firmware+0x3a4>)
   12630:	2253      	movs	r2, #83	; 0x53
   12632:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 9;
   12634:	4b35      	ldr	r3, [pc, #212]	; (1270c <detect_vesc_firmware+0x3a8>)
   12636:	2209      	movs	r2, #9
   12638:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 13;
   1263a:	4b35      	ldr	r3, [pc, #212]	; (12710 <detect_vesc_firmware+0x3ac>)
   1263c:	220d      	movs	r2, #13
   1263e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 17;
   12640:	4b34      	ldr	r3, [pc, #208]	; (12714 <detect_vesc_firmware+0x3b0>)
   12642:	2211      	movs	r2, #17
   12644:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 21;
   12646:	4b34      	ldr	r3, [pc, #208]	; (12718 <detect_vesc_firmware+0x3b4>)
   12648:	2215      	movs	r2, #21
   1264a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 25;
   1264c:	4b33      	ldr	r3, [pc, #204]	; (1271c <detect_vesc_firmware+0x3b8>)
   1264e:	2219      	movs	r2, #25
   12650:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 29;
   12652:	4b33      	ldr	r3, [pc, #204]	; (12720 <detect_vesc_firmware+0x3bc>)
   12654:	221d      	movs	r2, #29
   12656:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 33;
   12658:	4b32      	ldr	r3, [pc, #200]	; (12724 <detect_vesc_firmware+0x3c0>)
   1265a:	2221      	movs	r2, #33	; 0x21
   1265c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 41;
   1265e:	4b32      	ldr	r3, [pc, #200]	; (12728 <detect_vesc_firmware+0x3c4>)
   12660:	2229      	movs	r2, #41	; 0x29
   12662:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 45;
   12664:	4b31      	ldr	r3, [pc, #196]	; (1272c <detect_vesc_firmware+0x3c8>)
   12666:	222d      	movs	r2, #45	; 0x2d
   12668:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 49;
   1266a:	4b31      	ldr	r3, [pc, #196]	; (12730 <detect_vesc_firmware+0x3cc>)
   1266c:	2231      	movs	r2, #49	; 0x31
   1266e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 53;
   12670:	4b30      	ldr	r3, [pc, #192]	; (12734 <detect_vesc_firmware+0x3d0>)
   12672:	2235      	movs	r2, #53	; 0x35
   12674:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 57;
   12676:	4b30      	ldr	r3, [pc, #192]	; (12738 <detect_vesc_firmware+0x3d4>)
   12678:	2239      	movs	r2, #57	; 0x39
   1267a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 61;
   1267c:	4b2f      	ldr	r3, [pc, #188]	; (1273c <detect_vesc_firmware+0x3d8>)
   1267e:	223d      	movs	r2, #61	; 0x3d
   12680:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 66;
   12682:	4b2f      	ldr	r3, [pc, #188]	; (12740 <detect_vesc_firmware+0x3dc>)
   12684:	2242      	movs	r2, #66	; 0x42
   12686:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 70;
   12688:	4b2e      	ldr	r3, [pc, #184]	; (12744 <detect_vesc_firmware+0x3e0>)
   1268a:	2246      	movs	r2, #70	; 0x46
   1268c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 74;
   1268e:	4b2e      	ldr	r3, [pc, #184]	; (12748 <detect_vesc_firmware+0x3e4>)
   12690:	224a      	movs	r2, #74	; 0x4a
   12692:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 78;
   12694:	4b2d      	ldr	r3, [pc, #180]	; (1274c <detect_vesc_firmware+0x3e8>)
   12696:	224e      	movs	r2, #78	; 0x4e
   12698:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 86;
   1269a:	4b2d      	ldr	r3, [pc, #180]	; (12750 <detect_vesc_firmware+0x3ec>)
   1269c:	2256      	movs	r2, #86	; 0x56
   1269e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 90;
   126a0:	4b2c      	ldr	r3, [pc, #176]	; (12754 <detect_vesc_firmware+0x3f0>)
   126a2:	225a      	movs	r2, #90	; 0x5a
   126a4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
			GET_MCCONF_DUTY_MIN = 82;
			GET_MCCONF_DUTY_MAX = 86;
		}
	}
}
   126a6:	e0de      	b.n	12866 <detect_vesc_firmware+0x502>
   126a8:	00011aa1 	.word	0x00011aa1
   126ac:	20000e1c 	.word	0x20000e1c
   126b0:	20000389 	.word	0x20000389
   126b4:	200000db 	.word	0x200000db
   126b8:	200003c8 	.word	0x200003c8
   126bc:	200003c9 	.word	0x200003c9
   126c0:	200003ca 	.word	0x200003ca
   126c4:	200003cb 	.word	0x200003cb
   126c8:	200003cc 	.word	0x200003cc
   126cc:	200003cd 	.word	0x200003cd
   126d0:	200003ce 	.word	0x200003ce
   126d4:	200003cf 	.word	0x200003cf
   126d8:	200003d0 	.word	0x200003d0
   126dc:	200003d1 	.word	0x200003d1
   126e0:	200003d2 	.word	0x200003d2
   126e4:	200003d3 	.word	0x200003d3
   126e8:	200003d4 	.word	0x200003d4
   126ec:	200003d5 	.word	0x200003d5
   126f0:	200003d6 	.word	0x200003d6
   126f4:	200003d7 	.word	0x200003d7
   126f8:	200003d8 	.word	0x200003d8
   126fc:	200003d9 	.word	0x200003d9
   12700:	200003da 	.word	0x200003da
   12704:	200003db 	.word	0x200003db
   12708:	200003dc 	.word	0x200003dc
   1270c:	200003dd 	.word	0x200003dd
   12710:	200003de 	.word	0x200003de
   12714:	200003df 	.word	0x200003df
   12718:	200003e0 	.word	0x200003e0
   1271c:	200003e1 	.word	0x200003e1
   12720:	200003e2 	.word	0x200003e2
   12724:	200003e3 	.word	0x200003e3
   12728:	200003e4 	.word	0x200003e4
   1272c:	200003e5 	.word	0x200003e5
   12730:	200003e6 	.word	0x200003e6
   12734:	200003e7 	.word	0x200003e7
   12738:	200003e8 	.word	0x200003e8
   1273c:	200003e9 	.word	0x200003e9
   12740:	200003ea 	.word	0x200003ea
   12744:	200003eb 	.word	0x200003eb
   12748:	200003ec 	.word	0x200003ec
   1274c:	200003ed 	.word	0x200003ed
   12750:	200003ee 	.word	0x200003ee
   12754:	200003ef 	.word	0x200003ef
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 100){ // Ackmaniac
   12758:	4b44      	ldr	r3, [pc, #272]	; (1286c <detect_vesc_firmware+0x508>)
   1275a:	2234      	movs	r2, #52	; 0x34
   1275c:	5c9b      	ldrb	r3, [r3, r2]
   1275e:	2b03      	cmp	r3, #3
   12760:	d000      	beq.n	12764 <detect_vesc_firmware+0x400>
   12762:	e080      	b.n	12866 <detect_vesc_firmware+0x502>
   12764:	4b41      	ldr	r3, [pc, #260]	; (1286c <detect_vesc_firmware+0x508>)
   12766:	2235      	movs	r2, #53	; 0x35
   12768:	5c9b      	ldrb	r3, [r3, r2]
   1276a:	2b63      	cmp	r3, #99	; 0x63
   1276c:	d97b      	bls.n	12866 <detect_vesc_firmware+0x502>
			esc_fw = FW_ACKMANIAC;
   1276e:	4b40      	ldr	r3, [pc, #256]	; (12870 <detect_vesc_firmware+0x50c>)
   12770:	2203      	movs	r2, #3
   12772:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
   12774:	4b3f      	ldr	r3, [pc, #252]	; (12874 <detect_vesc_firmware+0x510>)
   12776:	2200      	movs	r2, #0
   12778:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
   1277a:	4b3f      	ldr	r3, [pc, #252]	; (12878 <detect_vesc_firmware+0x514>)
   1277c:	2204      	movs	r2, #4
   1277e:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
   12780:	4b3e      	ldr	r3, [pc, #248]	; (1287c <detect_vesc_firmware+0x518>)
   12782:	220e      	movs	r2, #14
   12784:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
   12786:	4b3e      	ldr	r3, [pc, #248]	; (12880 <detect_vesc_firmware+0x51c>)
   12788:	221e      	movs	r2, #30
   1278a:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
   1278c:	4b3d      	ldr	r3, [pc, #244]	; (12884 <detect_vesc_firmware+0x520>)
   1278e:	221f      	movs	r2, #31
   12790:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
   12792:	4b3d      	ldr	r3, [pc, #244]	; (12888 <detect_vesc_firmware+0x524>)
   12794:	2221      	movs	r2, #33	; 0x21
   12796:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
   12798:	4b3c      	ldr	r3, [pc, #240]	; (1288c <detect_vesc_firmware+0x528>)
   1279a:	2223      	movs	r2, #35	; 0x23
   1279c:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
   1279e:	4b3c      	ldr	r3, [pc, #240]	; (12890 <detect_vesc_firmware+0x52c>)
   127a0:	22ff      	movs	r2, #255	; 0xff
   127a2:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
   127a4:	4b3b      	ldr	r3, [pc, #236]	; (12894 <detect_vesc_firmware+0x530>)
   127a6:	22ff      	movs	r2, #255	; 0xff
   127a8:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FET_TEMP = 1;
   127aa:	4b3b      	ldr	r3, [pc, #236]	; (12898 <detect_vesc_firmware+0x534>)
   127ac:	2201      	movs	r2, #1
   127ae:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
   127b0:	4b3a      	ldr	r3, [pc, #232]	; (1289c <detect_vesc_firmware+0x538>)
   127b2:	2205      	movs	r2, #5
   127b4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
   127b6:	4b3a      	ldr	r3, [pc, #232]	; (128a0 <detect_vesc_firmware+0x53c>)
   127b8:	2209      	movs	r2, #9
   127ba:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
   127bc:	4b39      	ldr	r3, [pc, #228]	; (128a4 <detect_vesc_firmware+0x540>)
   127be:	2215      	movs	r2, #21
   127c0:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
   127c2:	4b39      	ldr	r3, [pc, #228]	; (128a8 <detect_vesc_firmware+0x544>)
   127c4:	2217      	movs	r2, #23
   127c6:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
   127c8:	4b38      	ldr	r3, [pc, #224]	; (128ac <detect_vesc_firmware+0x548>)
   127ca:	221b      	movs	r2, #27
   127cc:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
   127ce:	4b38      	ldr	r3, [pc, #224]	; (128b0 <detect_vesc_firmware+0x54c>)
   127d0:	221d      	movs	r2, #29
   127d2:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
   127d4:	4b37      	ldr	r3, [pc, #220]	; (128b4 <detect_vesc_firmware+0x550>)
   127d6:	2221      	movs	r2, #33	; 0x21
   127d8:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
   127da:	4b37      	ldr	r3, [pc, #220]	; (128b8 <detect_vesc_firmware+0x554>)
   127dc:	2225      	movs	r2, #37	; 0x25
   127de:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
   127e0:	4b36      	ldr	r3, [pc, #216]	; (128bc <detect_vesc_firmware+0x558>)
   127e2:	2229      	movs	r2, #41	; 0x29
   127e4:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
   127e6:	4b36      	ldr	r3, [pc, #216]	; (128c0 <detect_vesc_firmware+0x55c>)
   127e8:	222d      	movs	r2, #45	; 0x2d
   127ea:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
   127ec:	4b35      	ldr	r3, [pc, #212]	; (128c4 <detect_vesc_firmware+0x560>)
   127ee:	2235      	movs	r2, #53	; 0x35
   127f0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MAX = 5;
   127f2:	4b35      	ldr	r3, [pc, #212]	; (128c8 <detect_vesc_firmware+0x564>)
   127f4:	2205      	movs	r2, #5
   127f6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
   127f8:	4b34      	ldr	r3, [pc, #208]	; (128cc <detect_vesc_firmware+0x568>)
   127fa:	2209      	movs	r2, #9
   127fc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
   127fe:	4b34      	ldr	r3, [pc, #208]	; (128d0 <detect_vesc_firmware+0x56c>)
   12800:	220d      	movs	r2, #13
   12802:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
   12804:	4b33      	ldr	r3, [pc, #204]	; (128d4 <detect_vesc_firmware+0x570>)
   12806:	2211      	movs	r2, #17
   12808:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
   1280a:	4b33      	ldr	r3, [pc, #204]	; (128d8 <detect_vesc_firmware+0x574>)
   1280c:	2215      	movs	r2, #21
   1280e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
   12810:	4b32      	ldr	r3, [pc, #200]	; (128dc <detect_vesc_firmware+0x578>)
   12812:	2219      	movs	r2, #25
   12814:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
   12816:	4b32      	ldr	r3, [pc, #200]	; (128e0 <detect_vesc_firmware+0x57c>)
   12818:	221d      	movs	r2, #29
   1281a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
   1281c:	4b31      	ldr	r3, [pc, #196]	; (128e4 <detect_vesc_firmware+0x580>)
   1281e:	2225      	movs	r2, #37	; 0x25
   12820:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
   12822:	4b31      	ldr	r3, [pc, #196]	; (128e8 <detect_vesc_firmware+0x584>)
   12824:	2229      	movs	r2, #41	; 0x29
   12826:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
   12828:	4b30      	ldr	r3, [pc, #192]	; (128ec <detect_vesc_firmware+0x588>)
   1282a:	222d      	movs	r2, #45	; 0x2d
   1282c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
   1282e:	4b30      	ldr	r3, [pc, #192]	; (128f0 <detect_vesc_firmware+0x58c>)
   12830:	2231      	movs	r2, #49	; 0x31
   12832:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
   12834:	4b2f      	ldr	r3, [pc, #188]	; (128f4 <detect_vesc_firmware+0x590>)
   12836:	2235      	movs	r2, #53	; 0x35
   12838:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
   1283a:	4b2f      	ldr	r3, [pc, #188]	; (128f8 <detect_vesc_firmware+0x594>)
   1283c:	2239      	movs	r2, #57	; 0x39
   1283e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
   12840:	4b2e      	ldr	r3, [pc, #184]	; (128fc <detect_vesc_firmware+0x598>)
   12842:	223e      	movs	r2, #62	; 0x3e
   12844:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
   12846:	4b2e      	ldr	r3, [pc, #184]	; (12900 <detect_vesc_firmware+0x59c>)
   12848:	2242      	movs	r2, #66	; 0x42
   1284a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
   1284c:	4b2d      	ldr	r3, [pc, #180]	; (12904 <detect_vesc_firmware+0x5a0>)
   1284e:	2246      	movs	r2, #70	; 0x46
   12850:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
   12852:	4b2d      	ldr	r3, [pc, #180]	; (12908 <detect_vesc_firmware+0x5a4>)
   12854:	224a      	movs	r2, #74	; 0x4a
   12856:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
   12858:	4b2c      	ldr	r3, [pc, #176]	; (1290c <detect_vesc_firmware+0x5a8>)
   1285a:	2252      	movs	r2, #82	; 0x52
   1285c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
   1285e:	4b2c      	ldr	r3, [pc, #176]	; (12910 <detect_vesc_firmware+0x5ac>)
   12860:	2256      	movs	r2, #86	; 0x56
   12862:	701a      	strb	r2, [r3, #0]
}
   12864:	e7ff      	b.n	12866 <detect_vesc_firmware+0x502>
   12866:	46c0      	nop			; (mov r8, r8)
   12868:	46bd      	mov	sp, r7
   1286a:	bd80      	pop	{r7, pc}
   1286c:	20000e1c 	.word	0x20000e1c
   12870:	200000db 	.word	0x200000db
   12874:	200003c8 	.word	0x200003c8
   12878:	200003c9 	.word	0x200003c9
   1287c:	200003ca 	.word	0x200003ca
   12880:	200003cb 	.word	0x200003cb
   12884:	200003cc 	.word	0x200003cc
   12888:	200003cd 	.word	0x200003cd
   1288c:	200003ce 	.word	0x200003ce
   12890:	200003cf 	.word	0x200003cf
   12894:	200003d0 	.word	0x200003d0
   12898:	200003d1 	.word	0x200003d1
   1289c:	200003d2 	.word	0x200003d2
   128a0:	200003d3 	.word	0x200003d3
   128a4:	200003d4 	.word	0x200003d4
   128a8:	200003d5 	.word	0x200003d5
   128ac:	200003d6 	.word	0x200003d6
   128b0:	200003d7 	.word	0x200003d7
   128b4:	200003d8 	.word	0x200003d8
   128b8:	200003d9 	.word	0x200003d9
   128bc:	200003da 	.word	0x200003da
   128c0:	200003db 	.word	0x200003db
   128c4:	200003dc 	.word	0x200003dc
   128c8:	200003dd 	.word	0x200003dd
   128cc:	200003de 	.word	0x200003de
   128d0:	200003df 	.word	0x200003df
   128d4:	200003e0 	.word	0x200003e0
   128d8:	200003e1 	.word	0x200003e1
   128dc:	200003e2 	.word	0x200003e2
   128e0:	200003e3 	.word	0x200003e3
   128e4:	200003e4 	.word	0x200003e4
   128e8:	200003e5 	.word	0x200003e5
   128ec:	200003e6 	.word	0x200003e6
   128f0:	200003e7 	.word	0x200003e7
   128f4:	200003e8 	.word	0x200003e8
   128f8:	200003e9 	.word	0x200003e9
   128fc:	200003ea 	.word	0x200003ea
   12900:	200003eb 	.word	0x200003eb
   12904:	200003ec 	.word	0x200003ec
   12908:	200003ed 	.word	0x200003ed
   1290c:	200003ee 	.word	0x200003ee
   12910:	200003ef 	.word	0x200003ef

00012914 <CHECK_BUFFER>:

inline bool CHECK_BUFFER(uint8_t *buf){
   12914:	b580      	push	{r7, lr}
   12916:	b082      	sub	sp, #8
   12918:	af00      	add	r7, sp, #0
   1291a:	6078      	str	r0, [r7, #4]
	return (((buf[0] == 0x2) && (buf[buf[1]+4] == 0x3)) || ((buf[0] == 0x3) && (buf[((buf[1]<<8)|buf[2])+5] == 0x3)));
   1291c:	687b      	ldr	r3, [r7, #4]
   1291e:	781b      	ldrb	r3, [r3, #0]
   12920:	2b02      	cmp	r3, #2
   12922:	d108      	bne.n	12936 <CHECK_BUFFER+0x22>
   12924:	687b      	ldr	r3, [r7, #4]
   12926:	3301      	adds	r3, #1
   12928:	781b      	ldrb	r3, [r3, #0]
   1292a:	3304      	adds	r3, #4
   1292c:	687a      	ldr	r2, [r7, #4]
   1292e:	18d3      	adds	r3, r2, r3
   12930:	781b      	ldrb	r3, [r3, #0]
   12932:	2b03      	cmp	r3, #3
   12934:	d011      	beq.n	1295a <CHECK_BUFFER+0x46>
   12936:	687b      	ldr	r3, [r7, #4]
   12938:	781b      	ldrb	r3, [r3, #0]
   1293a:	2b03      	cmp	r3, #3
   1293c:	d10f      	bne.n	1295e <CHECK_BUFFER+0x4a>
   1293e:	687b      	ldr	r3, [r7, #4]
   12940:	3301      	adds	r3, #1
   12942:	781b      	ldrb	r3, [r3, #0]
   12944:	021b      	lsls	r3, r3, #8
   12946:	687a      	ldr	r2, [r7, #4]
   12948:	3202      	adds	r2, #2
   1294a:	7812      	ldrb	r2, [r2, #0]
   1294c:	4313      	orrs	r3, r2
   1294e:	3305      	adds	r3, #5
   12950:	687a      	ldr	r2, [r7, #4]
   12952:	18d3      	adds	r3, r2, r3
   12954:	781b      	ldrb	r3, [r3, #0]
   12956:	2b03      	cmp	r3, #3
   12958:	d101      	bne.n	1295e <CHECK_BUFFER+0x4a>
   1295a:	2301      	movs	r3, #1
   1295c:	e000      	b.n	12960 <CHECK_BUFFER+0x4c>
   1295e:	2300      	movs	r3, #0
   12960:	1c1a      	adds	r2, r3, #0
   12962:	2301      	movs	r3, #1
   12964:	4013      	ands	r3, r2
   12966:	b2db      	uxtb	r3, r3
}
   12968:	0018      	movs	r0, r3
   1296a:	46bd      	mov	sp, r7
   1296c:	b002      	add	sp, #8
   1296e:	bd80      	pop	{r7, pc}

00012970 <read_vesc_packet>:

void read_vesc_packet(void){
   12970:	b590      	push	{r4, r7, lr}
   12972:	b083      	sub	sp, #12
   12974:	af00      	add	r7, sp, #0
	if(CHECK_BUFFER(vesc_USART_read_buffer)){
   12976:	4b5e      	ldr	r3, [pc, #376]	; (12af0 <read_vesc_packet+0x180>)
   12978:	0018      	movs	r0, r3
   1297a:	4b5e      	ldr	r3, [pc, #376]	; (12af4 <read_vesc_packet+0x184>)
   1297c:	4798      	blx	r3
   1297e:	1e03      	subs	r3, r0, #0
   12980:	d100      	bne.n	12984 <read_vesc_packet+0x14>
   12982:	e085      	b.n	12a90 <read_vesc_packet+0x120>
		//ERROR_LEDs(0);
		VESC_PACKET_RECIEVED = true;
   12984:	4b5c      	ldr	r3, [pc, #368]	; (12af8 <read_vesc_packet+0x188>)
   12986:	2201      	movs	r2, #1
   12988:	701a      	strb	r2, [r3, #0]

		if(vesc_USART_read_buffer[0] == 0x2){
   1298a:	4b59      	ldr	r3, [pc, #356]	; (12af0 <read_vesc_packet+0x180>)
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	2b02      	cmp	r3, #2
   12990:	d11e      	bne.n	129d0 <read_vesc_packet+0x60>
			packet_len = vesc_USART_read_buffer[1];
   12992:	4b57      	ldr	r3, [pc, #348]	; (12af0 <read_vesc_packet+0x180>)
   12994:	785b      	ldrb	r3, [r3, #1]
   12996:	b29a      	uxth	r2, r3
   12998:	4b58      	ldr	r3, [pc, #352]	; (12afc <read_vesc_packet+0x18c>)
   1299a:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+2,packet_len);
   1299c:	4958      	ldr	r1, [pc, #352]	; (12b00 <read_vesc_packet+0x190>)
   1299e:	4b57      	ldr	r3, [pc, #348]	; (12afc <read_vesc_packet+0x18c>)
   129a0:	881b      	ldrh	r3, [r3, #0]
   129a2:	001a      	movs	r2, r3
   129a4:	4b57      	ldr	r3, [pc, #348]	; (12b04 <read_vesc_packet+0x194>)
   129a6:	0018      	movs	r0, r3
   129a8:	4b57      	ldr	r3, [pc, #348]	; (12b08 <read_vesc_packet+0x198>)
   129aa:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+2];
   129ac:	4b53      	ldr	r3, [pc, #332]	; (12afc <read_vesc_packet+0x18c>)
   129ae:	881b      	ldrh	r3, [r3, #0]
   129b0:	3302      	adds	r3, #2
   129b2:	4a4f      	ldr	r2, [pc, #316]	; (12af0 <read_vesc_packet+0x180>)
   129b4:	5cd1      	ldrb	r1, [r2, r3]
   129b6:	4b55      	ldr	r3, [pc, #340]	; (12b0c <read_vesc_packet+0x19c>)
   129b8:	4a55      	ldr	r2, [pc, #340]	; (12b10 <read_vesc_packet+0x1a0>)
   129ba:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+3];
   129bc:	4b4f      	ldr	r3, [pc, #316]	; (12afc <read_vesc_packet+0x18c>)
   129be:	881b      	ldrh	r3, [r3, #0]
   129c0:	3303      	adds	r3, #3
   129c2:	4a4b      	ldr	r2, [pc, #300]	; (12af0 <read_vesc_packet+0x180>)
   129c4:	5cd1      	ldrb	r1, [r2, r3]
   129c6:	4a51      	ldr	r2, [pc, #324]	; (12b0c <read_vesc_packet+0x19c>)
   129c8:	2381      	movs	r3, #129	; 0x81
   129ca:	009b      	lsls	r3, r3, #2
   129cc:	54d1      	strb	r1, [r2, r3]
   129ce:	e024      	b.n	12a1a <read_vesc_packet+0xaa>
		} else{
			packet_len = ((vesc_USART_read_buffer[1]<<8)|vesc_USART_read_buffer[2]);
   129d0:	4b47      	ldr	r3, [pc, #284]	; (12af0 <read_vesc_packet+0x180>)
   129d2:	785b      	ldrb	r3, [r3, #1]
   129d4:	021b      	lsls	r3, r3, #8
   129d6:	b21a      	sxth	r2, r3
   129d8:	4b45      	ldr	r3, [pc, #276]	; (12af0 <read_vesc_packet+0x180>)
   129da:	789b      	ldrb	r3, [r3, #2]
   129dc:	b21b      	sxth	r3, r3
   129de:	4313      	orrs	r3, r2
   129e0:	b21b      	sxth	r3, r3
   129e2:	b29a      	uxth	r2, r3
   129e4:	4b45      	ldr	r3, [pc, #276]	; (12afc <read_vesc_packet+0x18c>)
   129e6:	801a      	strh	r2, [r3, #0]
			memcpy(vesc_revieve_packet.payload,vesc_USART_read_buffer+3,packet_len);
   129e8:	494a      	ldr	r1, [pc, #296]	; (12b14 <read_vesc_packet+0x1a4>)
   129ea:	4b44      	ldr	r3, [pc, #272]	; (12afc <read_vesc_packet+0x18c>)
   129ec:	881b      	ldrh	r3, [r3, #0]
   129ee:	001a      	movs	r2, r3
   129f0:	4b44      	ldr	r3, [pc, #272]	; (12b04 <read_vesc_packet+0x194>)
   129f2:	0018      	movs	r0, r3
   129f4:	4b44      	ldr	r3, [pc, #272]	; (12b08 <read_vesc_packet+0x198>)
   129f6:	4798      	blx	r3
			vesc_revieve_packet.crc[0] = vesc_USART_read_buffer[packet_len+3];
   129f8:	4b40      	ldr	r3, [pc, #256]	; (12afc <read_vesc_packet+0x18c>)
   129fa:	881b      	ldrh	r3, [r3, #0]
   129fc:	3303      	adds	r3, #3
   129fe:	4a3c      	ldr	r2, [pc, #240]	; (12af0 <read_vesc_packet+0x180>)
   12a00:	5cd1      	ldrb	r1, [r2, r3]
   12a02:	4b42      	ldr	r3, [pc, #264]	; (12b0c <read_vesc_packet+0x19c>)
   12a04:	4a42      	ldr	r2, [pc, #264]	; (12b10 <read_vesc_packet+0x1a0>)
   12a06:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = vesc_USART_read_buffer[packet_len+4];
   12a08:	4b3c      	ldr	r3, [pc, #240]	; (12afc <read_vesc_packet+0x18c>)
   12a0a:	881b      	ldrh	r3, [r3, #0]
   12a0c:	3304      	adds	r3, #4
   12a0e:	4a38      	ldr	r2, [pc, #224]	; (12af0 <read_vesc_packet+0x180>)
   12a10:	5cd1      	ldrb	r1, [r2, r3]
   12a12:	4a3e      	ldr	r2, [pc, #248]	; (12b0c <read_vesc_packet+0x19c>)
   12a14:	2381      	movs	r3, #129	; 0x81
   12a16:	009b      	lsls	r3, r3, #2
   12a18:	54d1      	strb	r1, [r2, r3]
		}
		
		// Check if the message was corrupted
		uint16_t crc_check = crc16(vesc_revieve_packet.payload, packet_len);
   12a1a:	4b38      	ldr	r3, [pc, #224]	; (12afc <read_vesc_packet+0x18c>)
   12a1c:	881a      	ldrh	r2, [r3, #0]
   12a1e:	1dbc      	adds	r4, r7, #6
   12a20:	4b38      	ldr	r3, [pc, #224]	; (12b04 <read_vesc_packet+0x194>)
   12a22:	0011      	movs	r1, r2
   12a24:	0018      	movs	r0, r3
   12a26:	4b3c      	ldr	r3, [pc, #240]	; (12b18 <read_vesc_packet+0x1a8>)
   12a28:	4798      	blx	r3
   12a2a:	0003      	movs	r3, r0
   12a2c:	8023      	strh	r3, [r4, #0]
		if(crc_check != (uint16_t)((vesc_revieve_packet.crc[0]<<8)|vesc_revieve_packet.crc[1])){
   12a2e:	4b37      	ldr	r3, [pc, #220]	; (12b0c <read_vesc_packet+0x19c>)
   12a30:	4a37      	ldr	r2, [pc, #220]	; (12b10 <read_vesc_packet+0x1a0>)
   12a32:	5c9b      	ldrb	r3, [r3, r2]
   12a34:	021b      	lsls	r3, r3, #8
   12a36:	b21a      	sxth	r2, r3
   12a38:	4934      	ldr	r1, [pc, #208]	; (12b0c <read_vesc_packet+0x19c>)
   12a3a:	2381      	movs	r3, #129	; 0x81
   12a3c:	009b      	lsls	r3, r3, #2
   12a3e:	5ccb      	ldrb	r3, [r1, r3]
   12a40:	b21b      	sxth	r3, r3
   12a42:	4313      	orrs	r3, r2
   12a44:	b21b      	sxth	r3, r3
   12a46:	b29b      	uxth	r3, r3
   12a48:	1dba      	adds	r2, r7, #6
   12a4a:	8812      	ldrh	r2, [r2, #0]
   12a4c:	429a      	cmp	r2, r3
   12a4e:	d005      	beq.n	12a5c <read_vesc_packet+0xec>
			ERROR_LEDs(0);
   12a50:	2000      	movs	r0, #0
   12a52:	4b32      	ldr	r3, [pc, #200]	; (12b1c <read_vesc_packet+0x1ac>)
   12a54:	4798      	blx	r3
			VESC_PACKET_RECIEVED = false; // dont handle the packet if it was
   12a56:	4b28      	ldr	r3, [pc, #160]	; (12af8 <read_vesc_packet+0x188>)
   12a58:	2200      	movs	r2, #0
   12a5a:	701a      	strb	r2, [r3, #0]
		}
		
		vesc_usart_time = millis();
   12a5c:	4b30      	ldr	r3, [pc, #192]	; (12b20 <read_vesc_packet+0x1b0>)
   12a5e:	4798      	blx	r3
   12a60:	0002      	movs	r2, r0
   12a62:	4b30      	ldr	r3, [pc, #192]	; (12b24 <read_vesc_packet+0x1b4>)
   12a64:	601a      	str	r2, [r3, #0]
		HOLD_FOR_REPLY = false;
   12a66:	4b30      	ldr	r3, [pc, #192]	; (12b28 <read_vesc_packet+0x1b8>)
   12a68:	2200      	movs	r2, #0
   12a6a:	701a      	strb	r2, [r3, #0]
		
		memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6);
   12a6c:	4a2f      	ldr	r2, [pc, #188]	; (12b2c <read_vesc_packet+0x1bc>)
   12a6e:	4b20      	ldr	r3, [pc, #128]	; (12af0 <read_vesc_packet+0x180>)
   12a70:	2100      	movs	r1, #0
   12a72:	0018      	movs	r0, r3
   12a74:	4b2e      	ldr	r3, [pc, #184]	; (12b30 <read_vesc_packet+0x1c0>)
   12a76:	4798      	blx	r3
		//Stop listening to the ESC UART
		usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
   12a78:	4b2e      	ldr	r3, [pc, #184]	; (12b34 <read_vesc_packet+0x1c4>)
   12a7a:	2100      	movs	r1, #0
   12a7c:	0018      	movs	r0, r3
   12a7e:	4b2e      	ldr	r3, [pc, #184]	; (12b38 <read_vesc_packet+0x1c8>)
   12a80:	4798      	blx	r3
		// Start listening to the ESC UART
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   12a82:	4a2a      	ldr	r2, [pc, #168]	; (12b2c <read_vesc_packet+0x1bc>)
   12a84:	491a      	ldr	r1, [pc, #104]	; (12af0 <read_vesc_packet+0x180>)
   12a86:	4b2b      	ldr	r3, [pc, #172]	; (12b34 <read_vesc_packet+0x1c4>)
   12a88:	0018      	movs	r0, r3
   12a8a:	4b2c      	ldr	r3, [pc, #176]	; (12b3c <read_vesc_packet+0x1cc>)
   12a8c:	4798      	blx	r3
   12a8e:	e024      	b.n	12ada <read_vesc_packet+0x16a>
	} else if(CHECK_FOR_NOISE(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6)){
   12a90:	4a26      	ldr	r2, [pc, #152]	; (12b2c <read_vesc_packet+0x1bc>)
   12a92:	4917      	ldr	r1, [pc, #92]	; (12af0 <read_vesc_packet+0x180>)
   12a94:	4b27      	ldr	r3, [pc, #156]	; (12b34 <read_vesc_packet+0x1c4>)
   12a96:	0018      	movs	r0, r3
   12a98:	4b29      	ldr	r3, [pc, #164]	; (12b40 <read_vesc_packet+0x1d0>)
   12a9a:	4798      	blx	r3
   12a9c:	1e03      	subs	r3, r0, #0
   12a9e:	d01c      	beq.n	12ada <read_vesc_packet+0x16a>
		//Stop listening to the BLE UART
		usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
   12aa0:	4b24      	ldr	r3, [pc, #144]	; (12b34 <read_vesc_packet+0x1c4>)
   12aa2:	2100      	movs	r1, #0
   12aa4:	0018      	movs	r0, r3
   12aa6:	4b24      	ldr	r3, [pc, #144]	; (12b38 <read_vesc_packet+0x1c8>)
   12aa8:	4798      	blx	r3
		memset(vesc_USART_read_buffer, 0, MAX_PAYLOAD_LEN+6);
   12aaa:	4a20      	ldr	r2, [pc, #128]	; (12b2c <read_vesc_packet+0x1bc>)
   12aac:	4b10      	ldr	r3, [pc, #64]	; (12af0 <read_vesc_packet+0x180>)
   12aae:	2100      	movs	r1, #0
   12ab0:	0018      	movs	r0, r3
   12ab2:	4b1f      	ldr	r3, [pc, #124]	; (12b30 <read_vesc_packet+0x1c0>)
   12ab4:	4798      	blx	r3
		uint32_t temp_timer = millis();
   12ab6:	4b1a      	ldr	r3, [pc, #104]	; (12b20 <read_vesc_packet+0x1b0>)
   12ab8:	4798      	blx	r3
   12aba:	0003      	movs	r3, r0
   12abc:	603b      	str	r3, [r7, #0]
		while(millis() - temp_timer < 10){}
   12abe:	46c0      	nop			; (mov r8, r8)
   12ac0:	4b17      	ldr	r3, [pc, #92]	; (12b20 <read_vesc_packet+0x1b0>)
   12ac2:	4798      	blx	r3
   12ac4:	0002      	movs	r2, r0
   12ac6:	683b      	ldr	r3, [r7, #0]
   12ac8:	1ad3      	subs	r3, r2, r3
   12aca:	2b09      	cmp	r3, #9
   12acc:	d9f8      	bls.n	12ac0 <read_vesc_packet+0x150>
		// Start listening to the BLE UART
		usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   12ace:	4a17      	ldr	r2, [pc, #92]	; (12b2c <read_vesc_packet+0x1bc>)
   12ad0:	4907      	ldr	r1, [pc, #28]	; (12af0 <read_vesc_packet+0x180>)
   12ad2:	4b18      	ldr	r3, [pc, #96]	; (12b34 <read_vesc_packet+0x1c4>)
   12ad4:	0018      	movs	r0, r3
   12ad6:	4b19      	ldr	r3, [pc, #100]	; (12b3c <read_vesc_packet+0x1cc>)
   12ad8:	4798      	blx	r3
	}

	if(VESC_PACKET_RECIEVED){
   12ada:	4b07      	ldr	r3, [pc, #28]	; (12af8 <read_vesc_packet+0x188>)
   12adc:	781b      	ldrb	r3, [r3, #0]
   12ade:	2b00      	cmp	r3, #0
   12ae0:	d001      	beq.n	12ae6 <read_vesc_packet+0x176>
		process_recieved_packet();
   12ae2:	4b18      	ldr	r3, [pc, #96]	; (12b44 <read_vesc_packet+0x1d4>)
   12ae4:	4798      	blx	r3
	}
}
   12ae6:	46c0      	nop			; (mov r8, r8)
   12ae8:	46bd      	mov	sp, r7
   12aea:	b003      	add	sp, #12
   12aec:	bd90      	pop	{r4, r7, pc}
   12aee:	46c0      	nop			; (mov r8, r8)
   12af0:	200011ec 	.word	0x200011ec
   12af4:	00012915 	.word	0x00012915
   12af8:	200003fa 	.word	0x200003fa
   12afc:	200003fe 	.word	0x200003fe
   12b00:	200011ee 	.word	0x200011ee
   12b04:	20001593 	.word	0x20001593
   12b08:	0001b3e9 	.word	0x0001b3e9
   12b0c:	20001590 	.word	0x20001590
   12b10:	00000203 	.word	0x00000203
   12b14:	200011ef 	.word	0x200011ef
   12b18:	00010815 	.word	0x00010815
   12b1c:	0000a755 	.word	0x0000a755
   12b20:	00009f65 	.word	0x00009f65
   12b24:	200003f0 	.word	0x200003f0
   12b28:	200003f4 	.word	0x200003f4
   12b2c:	00000206 	.word	0x00000206
   12b30:	0001b3fb 	.word	0x0001b3fb
   12b34:	20000aec 	.word	0x20000aec
   12b38:	000066b9 	.word	0x000066b9
   12b3c:	00006671 	.word	0x00006671
   12b40:	00012ccd 	.word	0x00012ccd
   12b44:	00010add 	.word	0x00010add

00012b48 <detect_esc_baud_pins>:

detect_esc_baud_pins(void){
   12b48:	b580      	push	{r7, lr}
   12b4a:	af00      	add	r7, sp, #0
	static uint32_t send_delay = 15;
	static uint32_t recieve_delay = 50;
	static bool CONFIG_PACKET_SENT = false;
	static bool DISABLE_UART = true;

	if(!ESC_UART_CONFIGED){
   12b4c:	4b4a      	ldr	r3, [pc, #296]	; (12c78 <detect_esc_baud_pins+0x130>)
   12b4e:	781b      	ldrb	r3, [r3, #0]
   12b50:	2201      	movs	r2, #1
   12b52:	4053      	eors	r3, r2
   12b54:	b2db      	uxtb	r3, r3
   12b56:	2b00      	cmp	r3, #0
   12b58:	d100      	bne.n	12b5c <detect_esc_baud_pins+0x14>
   12b5a:	e08a      	b.n	12c72 <detect_esc_baud_pins+0x12a>
		if(DISABLE_UART){
   12b5c:	4b47      	ldr	r3, [pc, #284]	; (12c7c <detect_esc_baud_pins+0x134>)
   12b5e:	781b      	ldrb	r3, [r3, #0]
   12b60:	2b00      	cmp	r3, #0
   12b62:	d00b      	beq.n	12b7c <detect_esc_baud_pins+0x34>
			usart_disable(&vesc_usart);
   12b64:	4b46      	ldr	r3, [pc, #280]	; (12c80 <detect_esc_baud_pins+0x138>)
   12b66:	0018      	movs	r0, r3
   12b68:	4b46      	ldr	r3, [pc, #280]	; (12c84 <detect_esc_baud_pins+0x13c>)
   12b6a:	4798      	blx	r3
			wait_time = millis();
   12b6c:	4b46      	ldr	r3, [pc, #280]	; (12c88 <detect_esc_baud_pins+0x140>)
   12b6e:	4798      	blx	r3
   12b70:	0002      	movs	r2, r0
   12b72:	4b46      	ldr	r3, [pc, #280]	; (12c8c <detect_esc_baud_pins+0x144>)
   12b74:	601a      	str	r2, [r3, #0]
			DISABLE_UART = false;
   12b76:	4b41      	ldr	r3, [pc, #260]	; (12c7c <detect_esc_baud_pins+0x134>)
   12b78:	2200      	movs	r2, #0
   12b7a:	701a      	strb	r2, [r3, #0]
		}
		check_time(&wait_time);
   12b7c:	4b43      	ldr	r3, [pc, #268]	; (12c8c <detect_esc_baud_pins+0x144>)
   12b7e:	0018      	movs	r0, r3
   12b80:	4b43      	ldr	r3, [pc, #268]	; (12c90 <detect_esc_baud_pins+0x148>)
   12b82:	4798      	blx	r3
		if(!CONFIG_PACKET_SENT && (millis()-wait_time) > send_delay){ // Pause 5ms
   12b84:	4b43      	ldr	r3, [pc, #268]	; (12c94 <detect_esc_baud_pins+0x14c>)
   12b86:	781b      	ldrb	r3, [r3, #0]
   12b88:	2201      	movs	r2, #1
   12b8a:	4053      	eors	r3, r2
   12b8c:	b2db      	uxtb	r3, r3
   12b8e:	2b00      	cmp	r3, #0
   12b90:	d03a      	beq.n	12c08 <detect_esc_baud_pins+0xc0>
   12b92:	4b3d      	ldr	r3, [pc, #244]	; (12c88 <detect_esc_baud_pins+0x140>)
   12b94:	4798      	blx	r3
   12b96:	0002      	movs	r2, r0
   12b98:	4b3c      	ldr	r3, [pc, #240]	; (12c8c <detect_esc_baud_pins+0x144>)
   12b9a:	681b      	ldr	r3, [r3, #0]
   12b9c:	1ad2      	subs	r2, r2, r3
   12b9e:	4b3e      	ldr	r3, [pc, #248]	; (12c98 <detect_esc_baud_pins+0x150>)
   12ba0:	681b      	ldr	r3, [r3, #0]
   12ba2:	429a      	cmp	r2, r3
   12ba4:	d930      	bls.n	12c08 <detect_esc_baud_pins+0xc0>

			// Configure the VESC UART with a new buad rate
			UART_baud++;
   12ba6:	4b3d      	ldr	r3, [pc, #244]	; (12c9c <detect_esc_baud_pins+0x154>)
   12ba8:	781b      	ldrb	r3, [r3, #0]
   12baa:	3301      	adds	r3, #1
   12bac:	b2da      	uxtb	r2, r3
   12bae:	4b3b      	ldr	r3, [pc, #236]	; (12c9c <detect_esc_baud_pins+0x154>)
   12bb0:	701a      	strb	r2, [r3, #0]
			if(UART_baud > BAUD_115200){
   12bb2:	4b3a      	ldr	r3, [pc, #232]	; (12c9c <detect_esc_baud_pins+0x154>)
   12bb4:	781b      	ldrb	r3, [r3, #0]
   12bb6:	2b03      	cmp	r3, #3
   12bb8:	d910      	bls.n	12bdc <detect_esc_baud_pins+0x94>
				UART_baud = BAUD_9600;
   12bba:	4b38      	ldr	r3, [pc, #224]	; (12c9c <detect_esc_baud_pins+0x154>)
   12bbc:	2200      	movs	r2, #0
   12bbe:	701a      	strb	r2, [r3, #0]
				ESC_UART_PIN_CONFIG = !ESC_UART_PIN_CONFIG;
   12bc0:	4b37      	ldr	r3, [pc, #220]	; (12ca0 <detect_esc_baud_pins+0x158>)
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	1e5a      	subs	r2, r3, #1
   12bc6:	4193      	sbcs	r3, r2
   12bc8:	b2db      	uxtb	r3, r3
   12bca:	2201      	movs	r2, #1
   12bcc:	4053      	eors	r3, r2
   12bce:	b2db      	uxtb	r3, r3
   12bd0:	1c1a      	adds	r2, r3, #0
   12bd2:	2301      	movs	r3, #1
   12bd4:	4013      	ands	r3, r2
   12bd6:	b2da      	uxtb	r2, r3
   12bd8:	4b31      	ldr	r3, [pc, #196]	; (12ca0 <detect_esc_baud_pins+0x158>)
   12bda:	701a      	strb	r2, [r3, #0]
			}
			configure_vesc_usart();
   12bdc:	4b31      	ldr	r3, [pc, #196]	; (12ca4 <detect_esc_baud_pins+0x15c>)
   12bde:	4798      	blx	r3

			//port_pin_set_output_level(STATUS_LED, true); // TODO: Add status LED

			// Start listening for responses
			usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   12be0:	4a31      	ldr	r2, [pc, #196]	; (12ca8 <detect_esc_baud_pins+0x160>)
   12be2:	4932      	ldr	r1, [pc, #200]	; (12cac <detect_esc_baud_pins+0x164>)
   12be4:	4b26      	ldr	r3, [pc, #152]	; (12c80 <detect_esc_baud_pins+0x138>)
   12be6:	0018      	movs	r0, r3
   12be8:	4b31      	ldr	r3, [pc, #196]	; (12cb0 <detect_esc_baud_pins+0x168>)
   12bea:	4798      	blx	r3

			// Dont wait for the normal send timeout to expire
			HOLD_FOR_REPLY = false;
   12bec:	4b31      	ldr	r3, [pc, #196]	; (12cb4 <detect_esc_baud_pins+0x16c>)
   12bee:	2200      	movs	r2, #0
   12bf0:	701a      	strb	r2, [r3, #0]
			// Request FW version
			vesc_get_fw_version();
   12bf2:	4b31      	ldr	r3, [pc, #196]	; (12cb8 <detect_esc_baud_pins+0x170>)
   12bf4:	4798      	blx	r3

			CONFIG_PACKET_SENT = true;
   12bf6:	4b27      	ldr	r3, [pc, #156]	; (12c94 <detect_esc_baud_pins+0x14c>)
   12bf8:	2201      	movs	r2, #1
   12bfa:	701a      	strb	r2, [r3, #0]

			wait_time = millis();
   12bfc:	4b22      	ldr	r3, [pc, #136]	; (12c88 <detect_esc_baud_pins+0x140>)
   12bfe:	4798      	blx	r3
   12c00:	0002      	movs	r2, r0
   12c02:	4b22      	ldr	r3, [pc, #136]	; (12c8c <detect_esc_baud_pins+0x144>)
   12c04:	601a      	str	r2, [r3, #0]

			CONFIG_PACKET_SENT = false;
			DISABLE_UART = true;
		}
	}
}
   12c06:	e034      	b.n	12c72 <detect_esc_baud_pins+0x12a>
		else if(CONFIG_PACKET_SENT && (millis()-wait_time) > recieve_delay){
   12c08:	4b22      	ldr	r3, [pc, #136]	; (12c94 <detect_esc_baud_pins+0x14c>)
   12c0a:	781b      	ldrb	r3, [r3, #0]
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	d030      	beq.n	12c72 <detect_esc_baud_pins+0x12a>
   12c10:	4b1d      	ldr	r3, [pc, #116]	; (12c88 <detect_esc_baud_pins+0x140>)
   12c12:	4798      	blx	r3
   12c14:	0002      	movs	r2, r0
   12c16:	4b1d      	ldr	r3, [pc, #116]	; (12c8c <detect_esc_baud_pins+0x144>)
   12c18:	681b      	ldr	r3, [r3, #0]
   12c1a:	1ad2      	subs	r2, r2, r3
   12c1c:	4b27      	ldr	r3, [pc, #156]	; (12cbc <detect_esc_baud_pins+0x174>)
   12c1e:	681b      	ldr	r3, [r3, #0]
   12c20:	429a      	cmp	r2, r3
   12c22:	d926      	bls.n	12c72 <detect_esc_baud_pins+0x12a>
			if(CHECK_BUFFER(vesc_USART_read_buffer)){
   12c24:	4b21      	ldr	r3, [pc, #132]	; (12cac <detect_esc_baud_pins+0x164>)
   12c26:	0018      	movs	r0, r3
   12c28:	4b25      	ldr	r3, [pc, #148]	; (12cc0 <detect_esc_baud_pins+0x178>)
   12c2a:	4798      	blx	r3
   12c2c:	1e03      	subs	r3, r0, #0
   12c2e:	d014      	beq.n	12c5a <detect_esc_baud_pins+0x112>
				ESC_UART_CONFIGED = true;
   12c30:	4b11      	ldr	r3, [pc, #68]	; (12c78 <detect_esc_baud_pins+0x130>)
   12c32:	2201      	movs	r2, #1
   12c34:	701a      	strb	r2, [r3, #0]
				memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6);
   12c36:	4a1c      	ldr	r2, [pc, #112]	; (12ca8 <detect_esc_baud_pins+0x160>)
   12c38:	4b1c      	ldr	r3, [pc, #112]	; (12cac <detect_esc_baud_pins+0x164>)
   12c3a:	2100      	movs	r1, #0
   12c3c:	0018      	movs	r0, r3
   12c3e:	4b21      	ldr	r3, [pc, #132]	; (12cc4 <detect_esc_baud_pins+0x17c>)
   12c40:	4798      	blx	r3
				usart_abort_job(&vesc_usart, USART_TRANSCEIVER_RX);
   12c42:	4b0f      	ldr	r3, [pc, #60]	; (12c80 <detect_esc_baud_pins+0x138>)
   12c44:	2100      	movs	r1, #0
   12c46:	0018      	movs	r0, r3
   12c48:	4b1f      	ldr	r3, [pc, #124]	; (12cc8 <detect_esc_baud_pins+0x180>)
   12c4a:	4798      	blx	r3
				usart_read_buffer_job(&vesc_usart, vesc_USART_read_buffer, MAX_PAYLOAD_LEN+6);
   12c4c:	4a16      	ldr	r2, [pc, #88]	; (12ca8 <detect_esc_baud_pins+0x160>)
   12c4e:	4917      	ldr	r1, [pc, #92]	; (12cac <detect_esc_baud_pins+0x164>)
   12c50:	4b0b      	ldr	r3, [pc, #44]	; (12c80 <detect_esc_baud_pins+0x138>)
   12c52:	0018      	movs	r0, r3
   12c54:	4b16      	ldr	r3, [pc, #88]	; (12cb0 <detect_esc_baud_pins+0x168>)
   12c56:	4798      	blx	r3
   12c58:	e005      	b.n	12c66 <detect_esc_baud_pins+0x11e>
				memset(vesc_USART_read_buffer,0,MAX_PAYLOAD_LEN+6); // Clear the VESC receive buffer
   12c5a:	4a13      	ldr	r2, [pc, #76]	; (12ca8 <detect_esc_baud_pins+0x160>)
   12c5c:	4b13      	ldr	r3, [pc, #76]	; (12cac <detect_esc_baud_pins+0x164>)
   12c5e:	2100      	movs	r1, #0
   12c60:	0018      	movs	r0, r3
   12c62:	4b18      	ldr	r3, [pc, #96]	; (12cc4 <detect_esc_baud_pins+0x17c>)
   12c64:	4798      	blx	r3
			CONFIG_PACKET_SENT = false;
   12c66:	4b0b      	ldr	r3, [pc, #44]	; (12c94 <detect_esc_baud_pins+0x14c>)
   12c68:	2200      	movs	r2, #0
   12c6a:	701a      	strb	r2, [r3, #0]
			DISABLE_UART = true;
   12c6c:	4b03      	ldr	r3, [pc, #12]	; (12c7c <detect_esc_baud_pins+0x134>)
   12c6e:	2201      	movs	r2, #1
   12c70:	701a      	strb	r2, [r3, #0]
}
   12c72:	46c0      	nop			; (mov r8, r8)
   12c74:	46bd      	mov	sp, r7
   12c76:	bd80      	pop	{r7, pc}
   12c78:	200003fb 	.word	0x200003fb
   12c7c:	200000fe 	.word	0x200000fe
   12c80:	20000aec 	.word	0x20000aec
   12c84:	00009da9 	.word	0x00009da9
   12c88:	00009f65 	.word	0x00009f65
   12c8c:	20000480 	.word	0x20000480
   12c90:	00009f95 	.word	0x00009f95
   12c94:	20000484 	.word	0x20000484
   12c98:	20000100 	.word	0x20000100
   12c9c:	2000038b 	.word	0x2000038b
   12ca0:	200003fc 	.word	0x200003fc
   12ca4:	00010899 	.word	0x00010899
   12ca8:	00000206 	.word	0x00000206
   12cac:	200011ec 	.word	0x200011ec
   12cb0:	00006671 	.word	0x00006671
   12cb4:	200003f4 	.word	0x200003f4
   12cb8:	00011aa1 	.word	0x00011aa1
   12cbc:	20000104 	.word	0x20000104
   12cc0:	00012915 	.word	0x00012915
   12cc4:	0001b3fb 	.word	0x0001b3fb
   12cc8:	000066b9 	.word	0x000066b9

00012ccc <CHECK_FOR_NOISE>:

bool CHECK_FOR_NOISE(struct usart_module *const module, uint8_t buf[MAX_PAYLOAD_LEN+6], uint16_t max_size){
   12ccc:	b580      	push	{r7, lr}
   12cce:	b084      	sub	sp, #16
   12cd0:	af00      	add	r7, sp, #0
   12cd2:	60f8      	str	r0, [r7, #12]
   12cd4:	60b9      	str	r1, [r7, #8]
   12cd6:	1dbb      	adds	r3, r7, #6
   12cd8:	801a      	strh	r2, [r3, #0]
	return (buf[0] != 0x02 && buf[0] != 0x03 && buf[0] != 0xA5 && module->remaining_rx_buffer_length != max_size);
   12cda:	68bb      	ldr	r3, [r7, #8]
   12cdc:	781b      	ldrb	r3, [r3, #0]
   12cde:	2b02      	cmp	r3, #2
   12ce0:	d010      	beq.n	12d04 <CHECK_FOR_NOISE+0x38>
   12ce2:	68bb      	ldr	r3, [r7, #8]
   12ce4:	781b      	ldrb	r3, [r3, #0]
   12ce6:	2b03      	cmp	r3, #3
   12ce8:	d00c      	beq.n	12d04 <CHECK_FOR_NOISE+0x38>
   12cea:	68bb      	ldr	r3, [r7, #8]
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	2ba5      	cmp	r3, #165	; 0xa5
   12cf0:	d008      	beq.n	12d04 <CHECK_FOR_NOISE+0x38>
   12cf2:	68fb      	ldr	r3, [r7, #12]
   12cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   12cf6:	b29b      	uxth	r3, r3
   12cf8:	1dba      	adds	r2, r7, #6
   12cfa:	8812      	ldrh	r2, [r2, #0]
   12cfc:	429a      	cmp	r2, r3
   12cfe:	d001      	beq.n	12d04 <CHECK_FOR_NOISE+0x38>
   12d00:	2301      	movs	r3, #1
   12d02:	e000      	b.n	12d06 <CHECK_FOR_NOISE+0x3a>
   12d04:	2300      	movs	r3, #0
   12d06:	1c1a      	adds	r2, r3, #0
   12d08:	2301      	movs	r3, #1
   12d0a:	4013      	ands	r3, r2
   12d0c:	b2db      	uxtb	r3, r3
}
   12d0e:	0018      	movs	r0, r3
   12d10:	46bd      	mov	sp, r7
   12d12:	b004      	add	sp, #16
   12d14:	bd80      	pop	{r7, pc}
	...

00012d18 <config_eic_channel>:

/* Sense: 
 * None, Rise, Fall, Both, High, Low
 * 0x0	 0x1   0x2	 0x3   0x4   0x5
 */
void config_eic_channel(int ch, int sense, bool filt) {
   12d18:	b5b0      	push	{r4, r5, r7, lr}
   12d1a:	b084      	sub	sp, #16
   12d1c:	af00      	add	r7, sp, #0
   12d1e:	60f8      	str	r0, [r7, #12]
   12d20:	60b9      	str	r1, [r7, #8]
   12d22:	1dfb      	adds	r3, r7, #7
   12d24:	701a      	strb	r2, [r3, #0]
	// Config channel
	EIC->CONFIG[ch/8].reg &= ~(0xF << 4*(ch%8));
   12d26:	4c32      	ldr	r4, [pc, #200]	; (12df0 <config_eic_channel+0xd8>)
   12d28:	68fb      	ldr	r3, [r7, #12]
   12d2a:	2b00      	cmp	r3, #0
   12d2c:	da00      	bge.n	12d30 <config_eic_channel+0x18>
   12d2e:	3307      	adds	r3, #7
   12d30:	10db      	asrs	r3, r3, #3
   12d32:	001a      	movs	r2, r3
   12d34:	492e      	ldr	r1, [pc, #184]	; (12df0 <config_eic_channel+0xd8>)
   12d36:	1d93      	adds	r3, r2, #6
   12d38:	009b      	lsls	r3, r3, #2
   12d3a:	5859      	ldr	r1, [r3, r1]
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	482d      	ldr	r0, [pc, #180]	; (12df4 <config_eic_channel+0xdc>)
   12d40:	4003      	ands	r3, r0
   12d42:	d504      	bpl.n	12d4e <config_eic_channel+0x36>
   12d44:	3b01      	subs	r3, #1
   12d46:	2008      	movs	r0, #8
   12d48:	4240      	negs	r0, r0
   12d4a:	4303      	orrs	r3, r0
   12d4c:	3301      	adds	r3, #1
   12d4e:	009b      	lsls	r3, r3, #2
   12d50:	200f      	movs	r0, #15
   12d52:	4098      	lsls	r0, r3
   12d54:	0003      	movs	r3, r0
   12d56:	43db      	mvns	r3, r3
   12d58:	4019      	ands	r1, r3
   12d5a:	1d93      	adds	r3, r2, #6
   12d5c:	009b      	lsls	r3, r3, #2
   12d5e:	5119      	str	r1, [r3, r4]
	EIC->CONFIG[ch/8].reg |= (0xF & ((filt? 0x8 : 0) | (0x7 & sense))) << 4*(ch%8);
   12d60:	4d23      	ldr	r5, [pc, #140]	; (12df0 <config_eic_channel+0xd8>)
   12d62:	68fb      	ldr	r3, [r7, #12]
   12d64:	2b00      	cmp	r3, #0
   12d66:	da00      	bge.n	12d6a <config_eic_channel+0x52>
   12d68:	3307      	adds	r3, #7
   12d6a:	10db      	asrs	r3, r3, #3
   12d6c:	001a      	movs	r2, r3
   12d6e:	4920      	ldr	r1, [pc, #128]	; (12df0 <config_eic_channel+0xd8>)
   12d70:	1d93      	adds	r3, r2, #6
   12d72:	009b      	lsls	r3, r3, #2
   12d74:	5859      	ldr	r1, [r3, r1]
   12d76:	1dfb      	adds	r3, r7, #7
   12d78:	781b      	ldrb	r3, [r3, #0]
   12d7a:	2b00      	cmp	r3, #0
   12d7c:	d001      	beq.n	12d82 <config_eic_channel+0x6a>
   12d7e:	2308      	movs	r3, #8
   12d80:	e000      	b.n	12d84 <config_eic_channel+0x6c>
   12d82:	2300      	movs	r3, #0
   12d84:	68b8      	ldr	r0, [r7, #8]
   12d86:	2407      	movs	r4, #7
   12d88:	4020      	ands	r0, r4
   12d8a:	4303      	orrs	r3, r0
   12d8c:	200f      	movs	r0, #15
   12d8e:	4018      	ands	r0, r3
   12d90:	68fb      	ldr	r3, [r7, #12]
   12d92:	4c18      	ldr	r4, [pc, #96]	; (12df4 <config_eic_channel+0xdc>)
   12d94:	4023      	ands	r3, r4
   12d96:	d504      	bpl.n	12da2 <config_eic_channel+0x8a>
   12d98:	3b01      	subs	r3, #1
   12d9a:	2408      	movs	r4, #8
   12d9c:	4264      	negs	r4, r4
   12d9e:	4323      	orrs	r3, r4
   12da0:	3301      	adds	r3, #1
   12da2:	009b      	lsls	r3, r3, #2
   12da4:	4098      	lsls	r0, r3
   12da6:	0003      	movs	r3, r0
   12da8:	4319      	orrs	r1, r3
   12daa:	1d93      	adds	r3, r2, #6
   12dac:	009b      	lsls	r3, r3, #2
   12dae:	5159      	str	r1, [r3, r5]
	// No wake-up
	EIC->WAKEUP.reg &= ~(1 << ch);	
   12db0:	4b0f      	ldr	r3, [pc, #60]	; (12df0 <config_eic_channel+0xd8>)
   12db2:	4a0f      	ldr	r2, [pc, #60]	; (12df0 <config_eic_channel+0xd8>)
   12db4:	6952      	ldr	r2, [r2, #20]
   12db6:	2001      	movs	r0, #1
   12db8:	68f9      	ldr	r1, [r7, #12]
   12dba:	4088      	lsls	r0, r1
   12dbc:	0001      	movs	r1, r0
   12dbe:	43c9      	mvns	r1, r1
   12dc0:	400a      	ands	r2, r1
   12dc2:	615a      	str	r2, [r3, #20]
	// No interrupt
	EIC->INTENCLR.reg |= 1<<ch;
   12dc4:	4b0a      	ldr	r3, [pc, #40]	; (12df0 <config_eic_channel+0xd8>)
   12dc6:	4a0a      	ldr	r2, [pc, #40]	; (12df0 <config_eic_channel+0xd8>)
   12dc8:	6892      	ldr	r2, [r2, #8]
   12dca:	2001      	movs	r0, #1
   12dcc:	68f9      	ldr	r1, [r7, #12]
   12dce:	4088      	lsls	r0, r1
   12dd0:	0001      	movs	r1, r0
   12dd2:	430a      	orrs	r2, r1
   12dd4:	609a      	str	r2, [r3, #8]
	// Generate Event 
	EIC->EVCTRL.reg |= 1<<ch;
   12dd6:	4b06      	ldr	r3, [pc, #24]	; (12df0 <config_eic_channel+0xd8>)
   12dd8:	4a05      	ldr	r2, [pc, #20]	; (12df0 <config_eic_channel+0xd8>)
   12dda:	6852      	ldr	r2, [r2, #4]
   12ddc:	2001      	movs	r0, #1
   12dde:	68f9      	ldr	r1, [r7, #12]
   12de0:	4088      	lsls	r0, r1
   12de2:	0001      	movs	r1, r0
   12de4:	430a      	orrs	r2, r1
   12de6:	605a      	str	r2, [r3, #4]
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	b004      	add	sp, #16
   12dee:	bdb0      	pop	{r4, r5, r7, pc}
   12df0:	40001800 	.word	0x40001800
   12df4:	80000007 	.word	0x80000007

00012df8 <config_eic>:

void config_eic() {
   12df8:	b580      	push	{r7, lr}
   12dfa:	af00      	add	r7, sp, #0
PM->APBAMASK.reg |= PM_APBAMASK_EIC;
   12dfc:	4b17      	ldr	r3, [pc, #92]	; (12e5c <config_eic+0x64>)
   12dfe:	4a17      	ldr	r2, [pc, #92]	; (12e5c <config_eic+0x64>)
   12e00:	6992      	ldr	r2, [r2, #24]
   12e02:	2140      	movs	r1, #64	; 0x40
   12e04:	430a      	orrs	r2, r1
   12e06:	619a      	str	r2, [r3, #24]
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EIC_GCLK_ID) |
   12e08:	4b15      	ldr	r3, [pc, #84]	; (12e60 <config_eic+0x68>)
   12e0a:	4a16      	ldr	r2, [pc, #88]	; (12e64 <config_eic+0x6c>)
   12e0c:	805a      	strh	r2, [r3, #2]
GCLK_CLKCTRL_CLKEN |
GCLK_CLKCTRL_GEN(0);
EIC->CTRL.reg = EIC_CTRL_SWRST;
   12e0e:	4b16      	ldr	r3, [pc, #88]	; (12e68 <config_eic+0x70>)
   12e10:	2201      	movs	r2, #1
   12e12:	701a      	strb	r2, [r3, #0]
while(EIC->CTRL.bit.SWRST && EIC->STATUS.bit.SYNCBUSY);
   12e14:	46c0      	nop			; (mov r8, r8)
   12e16:	4b14      	ldr	r3, [pc, #80]	; (12e68 <config_eic+0x70>)
   12e18:	781b      	ldrb	r3, [r3, #0]
   12e1a:	07db      	lsls	r3, r3, #31
   12e1c:	0fdb      	lsrs	r3, r3, #31
   12e1e:	b2db      	uxtb	r3, r3
   12e20:	2b00      	cmp	r3, #0
   12e22:	d006      	beq.n	12e32 <config_eic+0x3a>
   12e24:	4b10      	ldr	r3, [pc, #64]	; (12e68 <config_eic+0x70>)
   12e26:	785b      	ldrb	r3, [r3, #1]
   12e28:	061b      	lsls	r3, r3, #24
   12e2a:	0fdb      	lsrs	r3, r3, #31
   12e2c:	b2db      	uxtb	r3, r3
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d1f1      	bne.n	12e16 <config_eic+0x1e>
config_eic_channel(2, 4, false);
   12e32:	2200      	movs	r2, #0
   12e34:	2104      	movs	r1, #4
   12e36:	2002      	movs	r0, #2
   12e38:	4b0c      	ldr	r3, [pc, #48]	; (12e6c <config_eic+0x74>)
   12e3a:	4798      	blx	r3

EIC->CTRL.bit.ENABLE = 1;
   12e3c:	4a0a      	ldr	r2, [pc, #40]	; (12e68 <config_eic+0x70>)
   12e3e:	7813      	ldrb	r3, [r2, #0]
   12e40:	2102      	movs	r1, #2
   12e42:	430b      	orrs	r3, r1
   12e44:	7013      	strb	r3, [r2, #0]
while(EIC->STATUS.bit.SYNCBUSY);
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	4b07      	ldr	r3, [pc, #28]	; (12e68 <config_eic+0x70>)
   12e4a:	785b      	ldrb	r3, [r3, #1]
   12e4c:	061b      	lsls	r3, r3, #24
   12e4e:	0fdb      	lsrs	r3, r3, #31
   12e50:	b2db      	uxtb	r3, r3
   12e52:	2b00      	cmp	r3, #0
   12e54:	d1f8      	bne.n	12e48 <config_eic+0x50>
}
   12e56:	46c0      	nop			; (mov r8, r8)
   12e58:	46bd      	mov	sp, r7
   12e5a:	bd80      	pop	{r7, pc}
   12e5c:	40000400 	.word	0x40000400
   12e60:	40000c00 	.word	0x40000c00
   12e64:	00004005 	.word	0x00004005
   12e68:	40001800 	.word	0x40001800
   12e6c:	00012d19 	.word	0x00012d19

00012e70 <config_evsys>:

void config_evsys() {
   12e70:	b580      	push	{r7, lr}
   12e72:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_EVSYS;
   12e74:	4b17      	ldr	r3, [pc, #92]	; (12ed4 <config_evsys+0x64>)
   12e76:	4a17      	ldr	r2, [pc, #92]	; (12ed4 <config_evsys+0x64>)
   12e78:	6a12      	ldr	r2, [r2, #32]
   12e7a:	2102      	movs	r1, #2
   12e7c:	430a      	orrs	r2, r1
   12e7e:	621a      	str	r2, [r3, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EVSYS_GCLK_ID_0) |
   12e80:	4b15      	ldr	r3, [pc, #84]	; (12ed8 <config_evsys+0x68>)
   12e82:	4a16      	ldr	r2, [pc, #88]	; (12edc <config_evsys+0x6c>)
   12e84:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN |
	GCLK_CLKCTRL_GEN(0);
	while(GCLK->STATUS.bit.SYNCBUSY);
   12e86:	46c0      	nop			; (mov r8, r8)
   12e88:	4b13      	ldr	r3, [pc, #76]	; (12ed8 <config_evsys+0x68>)
   12e8a:	785b      	ldrb	r3, [r3, #1]
   12e8c:	061b      	lsls	r3, r3, #24
   12e8e:	0fdb      	lsrs	r3, r3, #31
   12e90:	b2db      	uxtb	r3, r3
   12e92:	2b00      	cmp	r3, #0
   12e94:	d1f8      	bne.n	12e88 <config_evsys+0x18>

	EVSYS->CTRL.bit.SWRST = 1;
   12e96:	4a12      	ldr	r2, [pc, #72]	; (12ee0 <config_evsys+0x70>)
   12e98:	7813      	ldrb	r3, [r2, #0]
   12e9a:	2101      	movs	r1, #1
   12e9c:	430b      	orrs	r3, r1
   12e9e:	7013      	strb	r3, [r2, #0]
	while(EVSYS->CTRL.bit.SWRST);
   12ea0:	46c0      	nop			; (mov r8, r8)
   12ea2:	4b0f      	ldr	r3, [pc, #60]	; (12ee0 <config_evsys+0x70>)
   12ea4:	781b      	ldrb	r3, [r3, #0]
   12ea6:	07db      	lsls	r3, r3, #31
   12ea8:	0fdb      	lsrs	r3, r3, #31
   12eaa:	b2db      	uxtb	r3, r3
   12eac:	2b00      	cmp	r3, #0
   12eae:	d1f8      	bne.n	12ea2 <config_evsys+0x32>

	// Event receiver
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(1) | // Set channel n-1
   12eb0:	4b0b      	ldr	r3, [pc, #44]	; (12ee0 <config_evsys+0x70>)
   12eb2:	220c      	movs	r2, #12
   12eb4:	32ff      	adds	r2, #255	; 0xff
   12eb6:	811a      	strh	r2, [r3, #8]
	EVSYS_USER_USER(EVSYS_ID_USER_TCC1_EV_1); // Match/Capture 1 on TCC1
	// Event channel
	EVSYS->CHANNEL.reg = EVSYS_CHANNEL_CHANNEL(0) | // Set channel n
   12eb8:	4b09      	ldr	r3, [pc, #36]	; (12ee0 <config_evsys+0x70>)
   12eba:	4a0a      	ldr	r2, [pc, #40]	; (12ee4 <config_evsys+0x74>)
   12ebc:	605a      	str	r2, [r3, #4]
	EVSYS_CHANNEL_PATH_ASYNCHRONOUS |
	EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_2) |
	EVSYS_CHANNEL_EDGSEL_BOTH_EDGES; // Detect both edges
	// Wait channel to be ready
	while(!EVSYS->CHSTATUS.bit.USRRDY0);
   12ebe:	46c0      	nop			; (mov r8, r8)
   12ec0:	4b07      	ldr	r3, [pc, #28]	; (12ee0 <config_evsys+0x70>)
   12ec2:	68db      	ldr	r3, [r3, #12]
   12ec4:	07db      	lsls	r3, r3, #31
   12ec6:	0fdb      	lsrs	r3, r3, #31
   12ec8:	b2db      	uxtb	r3, r3
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d0f8      	beq.n	12ec0 <config_evsys+0x50>
	// EVSYS is always enabled
}
   12ece:	46c0      	nop			; (mov r8, r8)
   12ed0:	46bd      	mov	sp, r7
   12ed2:	bd80      	pop	{r7, pc}
   12ed4:	40000400 	.word	0x40000400
   12ed8:	40000c00 	.word	0x40000c00
   12edc:	00004007 	.word	0x00004007
   12ee0:	42000400 	.word	0x42000400
   12ee4:	0e0e0000 	.word	0x0e0e0000

00012ee8 <gpio_in>:

void gpio_in(int port, int pin)	{
   12ee8:	b590      	push	{r4, r7, lr}
   12eea:	b083      	sub	sp, #12
   12eec:	af00      	add	r7, sp, #0
   12eee:	6078      	str	r0, [r7, #4]
   12ef0:	6039      	str	r1, [r7, #0]
	PORT->Group[port].DIRCLR.reg = (1 << pin);
   12ef2:	4a13      	ldr	r2, [pc, #76]	; (12f40 <gpio_in+0x58>)
   12ef4:	2101      	movs	r1, #1
   12ef6:	683b      	ldr	r3, [r7, #0]
   12ef8:	4099      	lsls	r1, r3
   12efa:	000b      	movs	r3, r1
   12efc:	0019      	movs	r1, r3
   12efe:	687b      	ldr	r3, [r7, #4]
   12f00:	01db      	lsls	r3, r3, #7
   12f02:	18d3      	adds	r3, r2, r3
   12f04:	3304      	adds	r3, #4
   12f06:	6019      	str	r1, [r3, #0]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_INEN;
   12f08:	480d      	ldr	r0, [pc, #52]	; (12f40 <gpio_in+0x58>)
   12f0a:	4a0d      	ldr	r2, [pc, #52]	; (12f40 <gpio_in+0x58>)
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	2140      	movs	r1, #64	; 0x40
   12f10:	01db      	lsls	r3, r3, #7
   12f12:	18d2      	adds	r2, r2, r3
   12f14:	683b      	ldr	r3, [r7, #0]
   12f16:	18d3      	adds	r3, r2, r3
   12f18:	185b      	adds	r3, r3, r1
   12f1a:	781b      	ldrb	r3, [r3, #0]
   12f1c:	b2db      	uxtb	r3, r3
   12f1e:	2202      	movs	r2, #2
   12f20:	4313      	orrs	r3, r2
   12f22:	b2dc      	uxtb	r4, r3
   12f24:	687b      	ldr	r3, [r7, #4]
   12f26:	2140      	movs	r1, #64	; 0x40
   12f28:	01db      	lsls	r3, r3, #7
   12f2a:	18c2      	adds	r2, r0, r3
   12f2c:	683b      	ldr	r3, [r7, #0]
   12f2e:	18d3      	adds	r3, r2, r3
   12f30:	185b      	adds	r3, r3, r1
   12f32:	1c22      	adds	r2, r4, #0
   12f34:	701a      	strb	r2, [r3, #0]
}
   12f36:	46c0      	nop			; (mov r8, r8)
   12f38:	46bd      	mov	sp, r7
   12f3a:	b003      	add	sp, #12
   12f3c:	bd90      	pop	{r4, r7, pc}
   12f3e:	46c0      	nop			; (mov r8, r8)
   12f40:	41004400 	.word	0x41004400

00012f44 <gpio_pmuxen>:

void gpio_pmuxen(int port, int pin, int mux) {
   12f44:	b590      	push	{r4, r7, lr}
   12f46:	b085      	sub	sp, #20
   12f48:	af00      	add	r7, sp, #0
   12f4a:	60f8      	str	r0, [r7, #12]
   12f4c:	60b9      	str	r1, [r7, #8]
   12f4e:	607a      	str	r2, [r7, #4]
	PORT->Group[port].PINCFG[pin].reg |= PORT_PINCFG_PMUXEN;
   12f50:	4827      	ldr	r0, [pc, #156]	; (12ff0 <gpio_pmuxen+0xac>)
   12f52:	4a27      	ldr	r2, [pc, #156]	; (12ff0 <gpio_pmuxen+0xac>)
   12f54:	68fb      	ldr	r3, [r7, #12]
   12f56:	2140      	movs	r1, #64	; 0x40
   12f58:	01db      	lsls	r3, r3, #7
   12f5a:	18d2      	adds	r2, r2, r3
   12f5c:	68bb      	ldr	r3, [r7, #8]
   12f5e:	18d3      	adds	r3, r2, r3
   12f60:	185b      	adds	r3, r3, r1
   12f62:	781b      	ldrb	r3, [r3, #0]
   12f64:	b2db      	uxtb	r3, r3
   12f66:	2201      	movs	r2, #1
   12f68:	4313      	orrs	r3, r2
   12f6a:	b2dc      	uxtb	r4, r3
   12f6c:	68fb      	ldr	r3, [r7, #12]
   12f6e:	2140      	movs	r1, #64	; 0x40
   12f70:	01db      	lsls	r3, r3, #7
   12f72:	18c2      	adds	r2, r0, r3
   12f74:	68bb      	ldr	r3, [r7, #8]
   12f76:	18d3      	adds	r3, r2, r3
   12f78:	185b      	adds	r3, r3, r1
   12f7a:	1c22      	adds	r2, r4, #0
   12f7c:	701a      	strb	r2, [r3, #0]
	if (pin & 1)
   12f7e:	68bb      	ldr	r3, [r7, #8]
   12f80:	2201      	movs	r2, #1
   12f82:	4013      	ands	r3, r2
   12f84:	d017      	beq.n	12fb6 <gpio_pmuxen+0x72>
	PORT->Group[port].PMUX[pin>>1].bit.PMUXO = mux;
   12f86:	4c1a      	ldr	r4, [pc, #104]	; (12ff0 <gpio_pmuxen+0xac>)
   12f88:	68bb      	ldr	r3, [r7, #8]
   12f8a:	105b      	asrs	r3, r3, #1
   12f8c:	687a      	ldr	r2, [r7, #4]
   12f8e:	b2d2      	uxtb	r2, r2
   12f90:	1c11      	adds	r1, r2, #0
   12f92:	220f      	movs	r2, #15
   12f94:	400a      	ands	r2, r1
   12f96:	b2d1      	uxtb	r1, r2
   12f98:	68fa      	ldr	r2, [r7, #12]
   12f9a:	2030      	movs	r0, #48	; 0x30
   12f9c:	01d2      	lsls	r2, r2, #7
   12f9e:	18a2      	adds	r2, r4, r2
   12fa0:	18d3      	adds	r3, r2, r3
   12fa2:	181a      	adds	r2, r3, r0
   12fa4:	7813      	ldrb	r3, [r2, #0]
   12fa6:	0108      	lsls	r0, r1, #4
   12fa8:	210f      	movs	r1, #15
   12faa:	400b      	ands	r3, r1
   12fac:	1c19      	adds	r1, r3, #0
   12fae:	1c03      	adds	r3, r0, #0
   12fb0:	430b      	orrs	r3, r1
   12fb2:	7013      	strb	r3, [r2, #0]
	else
	PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
}
   12fb4:	e017      	b.n	12fe6 <gpio_pmuxen+0xa2>
	PORT->Group[port].PMUX[pin>>1].bit.PMUXE = mux;
   12fb6:	4c0e      	ldr	r4, [pc, #56]	; (12ff0 <gpio_pmuxen+0xac>)
   12fb8:	68bb      	ldr	r3, [r7, #8]
   12fba:	105b      	asrs	r3, r3, #1
   12fbc:	687a      	ldr	r2, [r7, #4]
   12fbe:	b2d2      	uxtb	r2, r2
   12fc0:	1c11      	adds	r1, r2, #0
   12fc2:	220f      	movs	r2, #15
   12fc4:	400a      	ands	r2, r1
   12fc6:	b2d1      	uxtb	r1, r2
   12fc8:	68fa      	ldr	r2, [r7, #12]
   12fca:	2030      	movs	r0, #48	; 0x30
   12fcc:	01d2      	lsls	r2, r2, #7
   12fce:	18a2      	adds	r2, r4, r2
   12fd0:	18d3      	adds	r3, r2, r3
   12fd2:	181a      	adds	r2, r3, r0
   12fd4:	7813      	ldrb	r3, [r2, #0]
   12fd6:	200f      	movs	r0, #15
   12fd8:	4008      	ands	r0, r1
   12fda:	210f      	movs	r1, #15
   12fdc:	438b      	bics	r3, r1
   12fde:	1c19      	adds	r1, r3, #0
   12fe0:	1c03      	adds	r3, r0, #0
   12fe2:	430b      	orrs	r3, r1
   12fe4:	7013      	strb	r3, [r2, #0]
}
   12fe6:	46c0      	nop			; (mov r8, r8)
   12fe8:	46bd      	mov	sp, r7
   12fea:	b005      	add	sp, #20
   12fec:	bd90      	pop	{r4, r7, pc}
   12fee:	46c0      	nop			; (mov r8, r8)
   12ff0:	41004400 	.word	0x41004400

00012ff4 <config_gpio>:

void config_gpio() {
   12ff4:	b580      	push	{r7, lr}
   12ff6:	af00      	add	r7, sp, #0
	gpio_in(1, 2);
   12ff8:	2102      	movs	r1, #2
   12ffa:	2001      	movs	r0, #1
   12ffc:	4b05      	ldr	r3, [pc, #20]	; (13014 <config_gpio+0x20>)
   12ffe:	4798      	blx	r3
	gpio_pmuxen(1, 2, PINMUX_PB02A_EIC_EXTINT2);
   13000:	2388      	movs	r3, #136	; 0x88
   13002:	039b      	lsls	r3, r3, #14
   13004:	001a      	movs	r2, r3
   13006:	2102      	movs	r1, #2
   13008:	2001      	movs	r0, #1
   1300a:	4b03      	ldr	r3, [pc, #12]	; (13018 <config_gpio+0x24>)
   1300c:	4798      	blx	r3
}
   1300e:	46c0      	nop			; (mov r8, r8)
   13010:	46bd      	mov	sp, r7
   13012:	bd80      	pop	{r7, pc}
   13014:	00012ee9 	.word	0x00012ee9
   13018:	00012f45 	.word	0x00012f45

0001301c <get_pulse_width>:

//uint16_t light_sens = 0; // for PWM debugging
inline int get_pulse_width() {
   1301c:	b580      	push	{r7, lr}
   1301e:	af00      	add	r7, sp, #0
	return TCC1->CC[0].bit.CC;
   13020:	4b03      	ldr	r3, [pc, #12]	; (13030 <get_pulse_width+0x14>)
   13022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13024:	021b      	lsls	r3, r3, #8
   13026:	0a1b      	lsrs	r3, r3, #8
}
   13028:	0018      	movs	r0, r3
   1302a:	46bd      	mov	sp, r7
   1302c:	bd80      	pop	{r7, pc}
   1302e:	46c0      	nop			; (mov r8, r8)
   13030:	42002400 	.word	0x42002400

00013034 <HandleUserInput>:

void HandleUserInput()
{
   13034:	b590      	push	{r4, r7, lr}
   13036:	b083      	sub	sp, #12
   13038:	af00      	add	r7, sp, #0
	///////////////   Use the appropriate throttle input   ///////////////
	//////////////////////////////////////////////////////////////////////
	switch(remote_type){
   1303a:	4bd3      	ldr	r3, [pc, #844]	; (13388 <HandleUserInput+0x354>)
   1303c:	781b      	ldrb	r3, [r3, #0]
   1303e:	2b04      	cmp	r3, #4
   13040:	d858      	bhi.n	130f4 <HandleUserInput+0xc0>
   13042:	009a      	lsls	r2, r3, #2
   13044:	4bd1      	ldr	r3, [pc, #836]	; (1338c <HandleUserInput+0x358>)
   13046:	18d3      	adds	r3, r2, r3
   13048:	681b      	ldr	r3, [r3, #0]
   1304a:	469f      	mov	pc, r3
		case REMOTE_PPM:
		case REMOTE_UART_PPM:{
			READ_VESC_PWM = true;
   1304c:	4bd0      	ldr	r3, [pc, #832]	; (13390 <HandleUserInput+0x35c>)
   1304e:	2201      	movs	r2, #1
   13050:	701a      	strb	r2, [r3, #0]
			float temp = (((float)latest_vesc_vals.pwm_val + 595000.0)*(255.0/1495000.0));
   13052:	4bd0      	ldr	r3, [pc, #832]	; (13394 <HandleUserInput+0x360>)
   13054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13056:	4bd0      	ldr	r3, [pc, #832]	; (13398 <HandleUserInput+0x364>)
   13058:	0010      	movs	r0, r2
   1305a:	4798      	blx	r3
   1305c:	1c02      	adds	r2, r0, #0
   1305e:	4bcf      	ldr	r3, [pc, #828]	; (1339c <HandleUserInput+0x368>)
   13060:	1c10      	adds	r0, r2, #0
   13062:	4798      	blx	r3
   13064:	4cce      	ldr	r4, [pc, #824]	; (133a0 <HandleUserInput+0x36c>)
   13066:	2200      	movs	r2, #0
   13068:	4bce      	ldr	r3, [pc, #824]	; (133a4 <HandleUserInput+0x370>)
   1306a:	47a0      	blx	r4
   1306c:	0003      	movs	r3, r0
   1306e:	000c      	movs	r4, r1
   13070:	0018      	movs	r0, r3
   13072:	0021      	movs	r1, r4
   13074:	4ccc      	ldr	r4, [pc, #816]	; (133a8 <HandleUserInput+0x374>)
   13076:	4acd      	ldr	r2, [pc, #820]	; (133ac <HandleUserInput+0x378>)
   13078:	4bcd      	ldr	r3, [pc, #820]	; (133b0 <HandleUserInput+0x37c>)
   1307a:	47a0      	blx	r4
   1307c:	0003      	movs	r3, r0
   1307e:	000c      	movs	r4, r1
   13080:	0019      	movs	r1, r3
   13082:	0022      	movs	r2, r4
   13084:	4bcb      	ldr	r3, [pc, #812]	; (133b4 <HandleUserInput+0x380>)
   13086:	0008      	movs	r0, r1
   13088:	0011      	movs	r1, r2
   1308a:	4798      	blx	r3
   1308c:	1c03      	adds	r3, r0, #0
   1308e:	607b      	str	r3, [r7, #4]
			//temp = -temp + 255;
			if(temp < 0)
   13090:	4bc9      	ldr	r3, [pc, #804]	; (133b8 <HandleUserInput+0x384>)
   13092:	2100      	movs	r1, #0
   13094:	6878      	ldr	r0, [r7, #4]
   13096:	4798      	blx	r3
   13098:	1e03      	subs	r3, r0, #0
   1309a:	d002      	beq.n	130a2 <HandleUserInput+0x6e>
				temp = 0;
   1309c:	2300      	movs	r3, #0
   1309e:	607b      	str	r3, [r7, #4]
   130a0:	e007      	b.n	130b2 <HandleUserInput+0x7e>
			else if(temp > 255)
   130a2:	4bc6      	ldr	r3, [pc, #792]	; (133bc <HandleUserInput+0x388>)
   130a4:	49c6      	ldr	r1, [pc, #792]	; (133c0 <HandleUserInput+0x38c>)
   130a6:	6878      	ldr	r0, [r7, #4]
   130a8:	4798      	blx	r3
   130aa:	1e03      	subs	r3, r0, #0
   130ac:	d001      	beq.n	130b2 <HandleUserInput+0x7e>
				temp = 255;
   130ae:	4bc4      	ldr	r3, [pc, #784]	; (133c0 <HandleUserInput+0x38c>)
   130b0:	607b      	str	r3, [r7, #4]
			remote_y = (uint8_t)(temp);
   130b2:	4bc4      	ldr	r3, [pc, #784]	; (133c4 <HandleUserInput+0x390>)
   130b4:	6878      	ldr	r0, [r7, #4]
   130b6:	4798      	blx	r3
   130b8:	0003      	movs	r3, r0
   130ba:	b2da      	uxtb	r2, r3
   130bc:	4bc2      	ldr	r3, [pc, #776]	; (133c8 <HandleUserInput+0x394>)
   130be:	701a      	strb	r2, [r3, #0]
			break;}
   130c0:	e018      	b.n	130f4 <HandleUserInput+0xc0>
		case REMOTE_UART_SINGLE:
		case REMOTE_UART_DUAL:
			READ_VESC_CHUCK = true;
   130c2:	4bc2      	ldr	r3, [pc, #776]	; (133cc <HandleUserInput+0x398>)
   130c4:	2201      	movs	r2, #1
   130c6:	701a      	strb	r2, [r3, #0]
			remote_y = rec_chuck_struct.js_y;
   130c8:	4bc1      	ldr	r3, [pc, #772]	; (133d0 <HandleUserInput+0x39c>)
   130ca:	785b      	ldrb	r3, [r3, #1]
   130cc:	b25b      	sxtb	r3, r3
   130ce:	b2da      	uxtb	r2, r3
   130d0:	4bbd      	ldr	r3, [pc, #756]	; (133c8 <HandleUserInput+0x394>)
   130d2:	701a      	strb	r2, [r3, #0]
			if(remote_type == REMOTE_UART_DUAL)
   130d4:	4bac      	ldr	r3, [pc, #688]	; (13388 <HandleUserInput+0x354>)
   130d6:	781b      	ldrb	r3, [r3, #0]
   130d8:	2b03      	cmp	r3, #3
   130da:	d106      	bne.n	130ea <HandleUserInput+0xb6>
				remote_x = rec_chuck_struct.js_x;
   130dc:	4bbc      	ldr	r3, [pc, #752]	; (133d0 <HandleUserInput+0x39c>)
   130de:	781b      	ldrb	r3, [r3, #0]
   130e0:	b25b      	sxtb	r3, r3
   130e2:	b2da      	uxtb	r2, r3
   130e4:	4bbb      	ldr	r3, [pc, #748]	; (133d4 <HandleUserInput+0x3a0>)
   130e6:	701a      	strb	r2, [r3, #0]
			else
				remote_x = 255/2;
			break;
   130e8:	e004      	b.n	130f4 <HandleUserInput+0xc0>
				remote_x = 255/2;
   130ea:	4bba      	ldr	r3, [pc, #744]	; (133d4 <HandleUserInput+0x3a0>)
   130ec:	227f      	movs	r2, #127	; 0x7f
   130ee:	701a      	strb	r2, [r3, #0]
			break;
   130f0:	e000      	b.n	130f4 <HandleUserInput+0xc0>
		case REMOTE_APP:
			//if(app_remote_check && REMOTE_TYPE < 2)
				//temp_y = AppRemoteY;
			//else
				//temp_y = VescRemoteY;
			break;
   130f2:	46c0      	nop			; (mov r8, r8)
	}


	////////////////   Use the appropriate button input   ////////////////
	//////////////////////////////////////////////////////////////////////
	switch(button_type){
   130f4:	4bb8      	ldr	r3, [pc, #736]	; (133d8 <HandleUserInput+0x3a4>)
   130f6:	781b      	ldrb	r3, [r3, #0]
   130f8:	2b07      	cmp	r3, #7
   130fa:	d84d      	bhi.n	13198 <HandleUserInput+0x164>
   130fc:	009a      	lsls	r2, r3, #2
   130fe:	4bb7      	ldr	r3, [pc, #732]	; (133dc <HandleUserInput+0x3a8>)
   13100:	18d3      	adds	r3, r2, r3
   13102:	681b      	ldr	r3, [r3, #0]
   13104:	469f      	mov	pc, r3
		case BTN_MOMENTARY: 
		case BTN_LATCHED:
			remote_btn_state = port_pin_get_input_level(PPM_IN);
   13106:	2022      	movs	r0, #34	; 0x22
   13108:	4bb5      	ldr	r3, [pc, #724]	; (133e0 <HandleUserInput+0x3ac>)
   1310a:	4798      	blx	r3
   1310c:	0003      	movs	r3, r0
   1310e:	001a      	movs	r2, r3
   13110:	4bb4      	ldr	r3, [pc, #720]	; (133e4 <HandleUserInput+0x3b0>)
   13112:	701a      	strb	r2, [r3, #0]
			break;
   13114:	e045      	b.n	131a2 <HandleUserInput+0x16e>
		case BTN_LATCHED_PPM:{
				static bool FIRST_READ = true;
				//static int pulse_width = 0;		// For debugging pulse width
				//pulse_width = get_pulse_width();	// For debugging pulse width
				if(get_pulse_width() > 9000)
   13116:	4bb4      	ldr	r3, [pc, #720]	; (133e8 <HandleUserInput+0x3b4>)
   13118:	4798      	blx	r3
   1311a:	0002      	movs	r2, r0
   1311c:	4bb3      	ldr	r3, [pc, #716]	; (133ec <HandleUserInput+0x3b8>)
   1311e:	429a      	cmp	r2, r3
   13120:	dd03      	ble.n	1312a <HandleUserInput+0xf6>
					remote_btn_state = false;
   13122:	4bb0      	ldr	r3, [pc, #704]	; (133e4 <HandleUserInput+0x3b0>)
   13124:	2200      	movs	r2, #0
   13126:	701a      	strb	r2, [r3, #0]
   13128:	e002      	b.n	13130 <HandleUserInput+0xfc>
				else
					remote_btn_state = true;
   1312a:	4bae      	ldr	r3, [pc, #696]	; (133e4 <HandleUserInput+0x3b0>)
   1312c:	2201      	movs	r2, #1
   1312e:	701a      	strb	r2, [r3, #0]
				if(FIRST_READ){
   13130:	4baf      	ldr	r3, [pc, #700]	; (133f0 <HandleUserInput+0x3bc>)
   13132:	781b      	ldrb	r3, [r3, #0]
   13134:	2b00      	cmp	r3, #0
   13136:	d033      	beq.n	131a0 <HandleUserInput+0x16c>
					lremote_btn_state = remote_btn_state;
   13138:	4baa      	ldr	r3, [pc, #680]	; (133e4 <HandleUserInput+0x3b0>)
   1313a:	781a      	ldrb	r2, [r3, #0]
   1313c:	4bad      	ldr	r3, [pc, #692]	; (133f4 <HandleUserInput+0x3c0>)
   1313e:	701a      	strb	r2, [r3, #0]
					FIRST_READ = false;
   13140:	4bab      	ldr	r3, [pc, #684]	; (133f0 <HandleUserInput+0x3bc>)
   13142:	2200      	movs	r2, #0
   13144:	701a      	strb	r2, [r3, #0]
				}
				//light_sens = pulse_width; // for debugging pulse width reading
			}
			break;
   13146:	e02b      	b.n	131a0 <HandleUserInput+0x16c>
		case BTN_UART_C:
			READ_VESC_CHUCK = true;
   13148:	4ba0      	ldr	r3, [pc, #640]	; (133cc <HandleUserInput+0x398>)
   1314a:	2201      	movs	r2, #1
   1314c:	701a      	strb	r2, [r3, #0]
			remote_btn_state = rec_chuck_struct.bt_c;
   1314e:	4ba0      	ldr	r3, [pc, #640]	; (133d0 <HandleUserInput+0x39c>)
   13150:	7a1b      	ldrb	r3, [r3, #8]
   13152:	001a      	movs	r2, r3
   13154:	4ba3      	ldr	r3, [pc, #652]	; (133e4 <HandleUserInput+0x3b0>)
   13156:	701a      	strb	r2, [r3, #0]
			break;	
   13158:	e023      	b.n	131a2 <HandleUserInput+0x16e>
		case BTN_UART_Z:
			READ_VESC_CHUCK = true;
   1315a:	4b9c      	ldr	r3, [pc, #624]	; (133cc <HandleUserInput+0x398>)
   1315c:	2201      	movs	r2, #1
   1315e:	701a      	strb	r2, [r3, #0]
			remote_btn_state = rec_chuck_struct.bt_z;
   13160:	4b9b      	ldr	r3, [pc, #620]	; (133d0 <HandleUserInput+0x39c>)
   13162:	7a5b      	ldrb	r3, [r3, #9]
   13164:	001a      	movs	r2, r3
   13166:	4b9f      	ldr	r3, [pc, #636]	; (133e4 <HandleUserInput+0x3b0>)
   13168:	701a      	strb	r2, [r3, #0]
			break;
   1316a:	e01a      	b.n	131a2 <HandleUserInput+0x16e>
		case BTN_THROTTLE_DWN:
			remote_btn_state = (remote_y < (127 - DWN_THRESH));
   1316c:	4b96      	ldr	r3, [pc, #600]	; (133c8 <HandleUserInput+0x394>)
   1316e:	781a      	ldrb	r2, [r3, #0]
   13170:	2174      	movs	r1, #116	; 0x74
   13172:	2300      	movs	r3, #0
   13174:	4291      	cmp	r1, r2
   13176:	415b      	adcs	r3, r3
   13178:	b2db      	uxtb	r3, r3
   1317a:	001a      	movs	r2, r3
   1317c:	4b99      	ldr	r3, [pc, #612]	; (133e4 <HandleUserInput+0x3b0>)
   1317e:	701a      	strb	r2, [r3, #0]
			break;
   13180:	e00f      	b.n	131a2 <HandleUserInput+0x16e>
		case BTN_THROTTLE_UP:
			remote_btn_state = (remote_y > (127 + UP_THRESH));
   13182:	4b91      	ldr	r3, [pc, #580]	; (133c8 <HandleUserInput+0x394>)
   13184:	781b      	ldrb	r3, [r3, #0]
   13186:	2289      	movs	r2, #137	; 0x89
   13188:	429a      	cmp	r2, r3
   1318a:	419b      	sbcs	r3, r3
   1318c:	425b      	negs	r3, r3
   1318e:	b2db      	uxtb	r3, r3
   13190:	001a      	movs	r2, r3
   13192:	4b94      	ldr	r3, [pc, #592]	; (133e4 <HandleUserInput+0x3b0>)
   13194:	701a      	strb	r2, [r3, #0]
			break;
   13196:	e004      	b.n	131a2 <HandleUserInput+0x16e>
		default:
			remote_btn_state = 0;
   13198:	4b92      	ldr	r3, [pc, #584]	; (133e4 <HandleUserInput+0x3b0>)
   1319a:	2200      	movs	r2, #0
   1319c:	701a      	strb	r2, [r3, #0]
			break;
   1319e:	e000      	b.n	131a2 <HandleUserInput+0x16e>
			break;
   131a0:	46c0      	nop			; (mov r8, r8)
	}

	////   Determine the time the button was held down and released   ////
	//////////////////////////////////////////////////////////////////////
	if(button_type != BTN_LATCHED && button_type != BTN_LATCHED_PPM){
   131a2:	4b8d      	ldr	r3, [pc, #564]	; (133d8 <HandleUserInput+0x3a4>)
   131a4:	781b      	ldrb	r3, [r3, #0]
   131a6:	2b02      	cmp	r3, #2
   131a8:	d063      	beq.n	13272 <HandleUserInput+0x23e>
   131aa:	4b8b      	ldr	r3, [pc, #556]	; (133d8 <HandleUserInput+0x3a4>)
   131ac:	781b      	ldrb	r3, [r3, #0]
   131ae:	2b03      	cmp	r3, #3
   131b0:	d05f      	beq.n	13272 <HandleUserInput+0x23e>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   131b2:	4b8c      	ldr	r3, [pc, #560]	; (133e4 <HandleUserInput+0x3b0>)
   131b4:	781b      	ldrb	r3, [r3, #0]
   131b6:	2b01      	cmp	r3, #1
   131b8:	d10c      	bne.n	131d4 <HandleUserInput+0x1a0>
   131ba:	4b8e      	ldr	r3, [pc, #568]	; (133f4 <HandleUserInput+0x3c0>)
   131bc:	781b      	ldrb	r3, [r3, #0]
   131be:	2b00      	cmp	r3, #0
   131c0:	d108      	bne.n	131d4 <HandleUserInput+0x1a0>
			lButtonTime = millis(); // Mark the time of button state transition
   131c2:	4b8d      	ldr	r3, [pc, #564]	; (133f8 <HandleUserInput+0x3c4>)
   131c4:	4798      	blx	r3
   131c6:	0002      	movs	r2, r0
   131c8:	4b8c      	ldr	r3, [pc, #560]	; (133fc <HandleUserInput+0x3c8>)
   131ca:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
   131cc:	4b8c      	ldr	r3, [pc, #560]	; (13400 <HandleUserInput+0x3cc>)
   131ce:	2200      	movs	r2, #0
   131d0:	601a      	str	r2, [r3, #0]
   131d2:	e04d      	b.n	13270 <HandleUserInput+0x23c>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
   131d4:	4b83      	ldr	r3, [pc, #524]	; (133e4 <HandleUserInput+0x3b0>)
   131d6:	781b      	ldrb	r3, [r3, #0]
   131d8:	2b00      	cmp	r3, #0
   131da:	d118      	bne.n	1320e <HandleUserInput+0x1da>
   131dc:	4b85      	ldr	r3, [pc, #532]	; (133f4 <HandleUserInput+0x3c0>)
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	2b01      	cmp	r3, #1
   131e2:	d114      	bne.n	1320e <HandleUserInput+0x1da>
			check_time(&lButtonTime);
   131e4:	4b85      	ldr	r3, [pc, #532]	; (133fc <HandleUserInput+0x3c8>)
   131e6:	0018      	movs	r0, r3
   131e8:	4b86      	ldr	r3, [pc, #536]	; (13404 <HandleUserInput+0x3d0>)
   131ea:	4798      	blx	r3
			ButtonDownTime = millis() - lButtonTime;  // Track time button was pressed
   131ec:	4b82      	ldr	r3, [pc, #520]	; (133f8 <HandleUserInput+0x3c4>)
   131ee:	4798      	blx	r3
   131f0:	0002      	movs	r2, r0
   131f2:	4b82      	ldr	r3, [pc, #520]	; (133fc <HandleUserInput+0x3c8>)
   131f4:	681b      	ldr	r3, [r3, #0]
   131f6:	1ad2      	subs	r2, r2, r3
   131f8:	4b83      	ldr	r3, [pc, #524]	; (13408 <HandleUserInput+0x3d4>)
   131fa:	601a      	str	r2, [r3, #0]

			lButtonTime = millis();  // Mark the time of button state transition
   131fc:	4b7e      	ldr	r3, [pc, #504]	; (133f8 <HandleUserInput+0x3c4>)
   131fe:	4798      	blx	r3
   13200:	0002      	movs	r2, r0
   13202:	4b7e      	ldr	r3, [pc, #504]	; (133fc <HandleUserInput+0x3c8>)
   13204:	601a      	str	r2, [r3, #0]
			ButtonHeldTime = 0;
   13206:	4b81      	ldr	r3, [pc, #516]	; (1340c <HandleUserInput+0x3d8>)
   13208:	2200      	movs	r2, #0
   1320a:	601a      	str	r2, [r3, #0]
   1320c:	e030      	b.n	13270 <HandleUserInput+0x23c>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
   1320e:	4b75      	ldr	r3, [pc, #468]	; (133e4 <HandleUserInput+0x3b0>)
   13210:	781b      	ldrb	r3, [r3, #0]
   13212:	2b00      	cmp	r3, #0
   13214:	d116      	bne.n	13244 <HandleUserInput+0x210>
   13216:	4b77      	ldr	r3, [pc, #476]	; (133f4 <HandleUserInput+0x3c0>)
   13218:	781b      	ldrb	r3, [r3, #0]
   1321a:	2b00      	cmp	r3, #0
   1321c:	d112      	bne.n	13244 <HandleUserInput+0x210>
			check_time(&lButtonTime);
   1321e:	4b77      	ldr	r3, [pc, #476]	; (133fc <HandleUserInput+0x3c8>)
   13220:	0018      	movs	r0, r3
   13222:	4b78      	ldr	r3, [pc, #480]	; (13404 <HandleUserInput+0x3d0>)
   13224:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
   13226:	4b74      	ldr	r3, [pc, #464]	; (133f8 <HandleUserInput+0x3c4>)
   13228:	4798      	blx	r3
   1322a:	0002      	movs	r2, r0
   1322c:	4b73      	ldr	r3, [pc, #460]	; (133fc <HandleUserInput+0x3c8>)
   1322e:	681b      	ldr	r3, [r3, #0]
   13230:	1ad2      	subs	r2, r2, r3
   13232:	4b73      	ldr	r3, [pc, #460]	; (13400 <HandleUserInput+0x3cc>)
   13234:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
   13236:	4b74      	ldr	r3, [pc, #464]	; (13408 <HandleUserInput+0x3d4>)
   13238:	2200      	movs	r2, #0
   1323a:	601a      	str	r2, [r3, #0]
			TurnSignalOn = false;
   1323c:	4b74      	ldr	r3, [pc, #464]	; (13410 <HandleUserInput+0x3dc>)
   1323e:	2200      	movs	r2, #0
   13240:	701a      	strb	r2, [r3, #0]
   13242:	e015      	b.n	13270 <HandleUserInput+0x23c>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
   13244:	4b67      	ldr	r3, [pc, #412]	; (133e4 <HandleUserInput+0x3b0>)
   13246:	781b      	ldrb	r3, [r3, #0]
   13248:	2b01      	cmp	r3, #1
   1324a:	d000      	beq.n	1324e <HandleUserInput+0x21a>
   1324c:	e06c      	b.n	13328 <HandleUserInput+0x2f4>
   1324e:	4b69      	ldr	r3, [pc, #420]	; (133f4 <HandleUserInput+0x3c0>)
   13250:	781b      	ldrb	r3, [r3, #0]
   13252:	2b01      	cmp	r3, #1
   13254:	d168      	bne.n	13328 <HandleUserInput+0x2f4>
			check_time(&lButtonTime);
   13256:	4b69      	ldr	r3, [pc, #420]	; (133fc <HandleUserInput+0x3c8>)
   13258:	0018      	movs	r0, r3
   1325a:	4b6a      	ldr	r3, [pc, #424]	; (13404 <HandleUserInput+0x3d0>)
   1325c:	4798      	blx	r3
			ButtonHeldTime = millis() - lButtonTime; // Track time button is not pressed
   1325e:	4b66      	ldr	r3, [pc, #408]	; (133f8 <HandleUserInput+0x3c4>)
   13260:	4798      	blx	r3
   13262:	0002      	movs	r2, r0
   13264:	4b65      	ldr	r3, [pc, #404]	; (133fc <HandleUserInput+0x3c8>)
   13266:	681b      	ldr	r3, [r3, #0]
   13268:	1ad2      	subs	r2, r2, r3
   1326a:	4b68      	ldr	r3, [pc, #416]	; (1340c <HandleUserInput+0x3d8>)
   1326c:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   1326e:	e05b      	b.n	13328 <HandleUserInput+0x2f4>
   13270:	e05a      	b.n	13328 <HandleUserInput+0x2f4>
		}
	} else {
		ButtonHeldTime = 0;
   13272:	4b66      	ldr	r3, [pc, #408]	; (1340c <HandleUserInput+0x3d8>)
   13274:	2200      	movs	r2, #0
   13276:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   13278:	4b5a      	ldr	r3, [pc, #360]	; (133e4 <HandleUserInput+0x3b0>)
   1327a:	781b      	ldrb	r3, [r3, #0]
   1327c:	2b01      	cmp	r3, #1
   1327e:	d10f      	bne.n	132a0 <HandleUserInput+0x26c>
   13280:	4b5c      	ldr	r3, [pc, #368]	; (133f4 <HandleUserInput+0x3c0>)
   13282:	781b      	ldrb	r3, [r3, #0]
   13284:	2b00      	cmp	r3, #0
   13286:	d10b      	bne.n	132a0 <HandleUserInput+0x26c>
			ButtonDownTime = 250;  // Track time button was pressed
   13288:	4b5f      	ldr	r3, [pc, #380]	; (13408 <HandleUserInput+0x3d4>)
   1328a:	22fa      	movs	r2, #250	; 0xfa
   1328c:	601a      	str	r2, [r3, #0]
			lButtonTime = millis(); // Mark the time of button state transition
   1328e:	4b5a      	ldr	r3, [pc, #360]	; (133f8 <HandleUserInput+0x3c4>)
   13290:	4798      	blx	r3
   13292:	0002      	movs	r2, r0
   13294:	4b59      	ldr	r3, [pc, #356]	; (133fc <HandleUserInput+0x3c8>)
   13296:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
   13298:	4b59      	ldr	r3, [pc, #356]	; (13400 <HandleUserInput+0x3cc>)
   1329a:	2200      	movs	r2, #0
   1329c:	601a      	str	r2, [r3, #0]
   1329e:	e044      	b.n	1332a <HandleUserInput+0x2f6>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
   132a0:	4b50      	ldr	r3, [pc, #320]	; (133e4 <HandleUserInput+0x3b0>)
   132a2:	781b      	ldrb	r3, [r3, #0]
   132a4:	2b00      	cmp	r3, #0
   132a6:	d10f      	bne.n	132c8 <HandleUserInput+0x294>
   132a8:	4b52      	ldr	r3, [pc, #328]	; (133f4 <HandleUserInput+0x3c0>)
   132aa:	781b      	ldrb	r3, [r3, #0]
   132ac:	2b01      	cmp	r3, #1
   132ae:	d10b      	bne.n	132c8 <HandleUserInput+0x294>
			ButtonDownTime = 250;  // Track time button was pressed
   132b0:	4b55      	ldr	r3, [pc, #340]	; (13408 <HandleUserInput+0x3d4>)
   132b2:	22fa      	movs	r2, #250	; 0xfa
   132b4:	601a      	str	r2, [r3, #0]
			lButtonTime = millis();  // Mark the time of button state transition
   132b6:	4b50      	ldr	r3, [pc, #320]	; (133f8 <HandleUserInput+0x3c4>)
   132b8:	4798      	blx	r3
   132ba:	0002      	movs	r2, r0
   132bc:	4b4f      	ldr	r3, [pc, #316]	; (133fc <HandleUserInput+0x3c8>)
   132be:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
   132c0:	4b4f      	ldr	r3, [pc, #316]	; (13400 <HandleUserInput+0x3cc>)
   132c2:	2200      	movs	r2, #0
   132c4:	601a      	str	r2, [r3, #0]
   132c6:	e030      	b.n	1332a <HandleUserInput+0x2f6>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
   132c8:	4b46      	ldr	r3, [pc, #280]	; (133e4 <HandleUserInput+0x3b0>)
   132ca:	781b      	ldrb	r3, [r3, #0]
   132cc:	2b00      	cmp	r3, #0
   132ce:	d113      	bne.n	132f8 <HandleUserInput+0x2c4>
   132d0:	4b48      	ldr	r3, [pc, #288]	; (133f4 <HandleUserInput+0x3c0>)
   132d2:	781b      	ldrb	r3, [r3, #0]
   132d4:	2b00      	cmp	r3, #0
   132d6:	d10f      	bne.n	132f8 <HandleUserInput+0x2c4>
			check_time(&lButtonTime);
   132d8:	4b48      	ldr	r3, [pc, #288]	; (133fc <HandleUserInput+0x3c8>)
   132da:	0018      	movs	r0, r3
   132dc:	4b49      	ldr	r3, [pc, #292]	; (13404 <HandleUserInput+0x3d0>)
   132de:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
   132e0:	4b45      	ldr	r3, [pc, #276]	; (133f8 <HandleUserInput+0x3c4>)
   132e2:	4798      	blx	r3
   132e4:	0002      	movs	r2, r0
   132e6:	4b45      	ldr	r3, [pc, #276]	; (133fc <HandleUserInput+0x3c8>)
   132e8:	681b      	ldr	r3, [r3, #0]
   132ea:	1ad2      	subs	r2, r2, r3
   132ec:	4b44      	ldr	r3, [pc, #272]	; (13400 <HandleUserInput+0x3cc>)
   132ee:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
   132f0:	4b45      	ldr	r3, [pc, #276]	; (13408 <HandleUserInput+0x3d4>)
   132f2:	2200      	movs	r2, #0
   132f4:	601a      	str	r2, [r3, #0]
   132f6:	e018      	b.n	1332a <HandleUserInput+0x2f6>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
   132f8:	4b3a      	ldr	r3, [pc, #232]	; (133e4 <HandleUserInput+0x3b0>)
   132fa:	781b      	ldrb	r3, [r3, #0]
   132fc:	2b01      	cmp	r3, #1
   132fe:	d114      	bne.n	1332a <HandleUserInput+0x2f6>
   13300:	4b3c      	ldr	r3, [pc, #240]	; (133f4 <HandleUserInput+0x3c0>)
   13302:	781b      	ldrb	r3, [r3, #0]
   13304:	2b01      	cmp	r3, #1
   13306:	d110      	bne.n	1332a <HandleUserInput+0x2f6>
			check_time(&lButtonTime);
   13308:	4b3c      	ldr	r3, [pc, #240]	; (133fc <HandleUserInput+0x3c8>)
   1330a:	0018      	movs	r0, r3
   1330c:	4b3d      	ldr	r3, [pc, #244]	; (13404 <HandleUserInput+0x3d0>)
   1330e:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
   13310:	4b39      	ldr	r3, [pc, #228]	; (133f8 <HandleUserInput+0x3c4>)
   13312:	4798      	blx	r3
   13314:	0002      	movs	r2, r0
   13316:	4b39      	ldr	r3, [pc, #228]	; (133fc <HandleUserInput+0x3c8>)
   13318:	681b      	ldr	r3, [r3, #0]
   1331a:	1ad2      	subs	r2, r2, r3
   1331c:	4b38      	ldr	r3, [pc, #224]	; (13400 <HandleUserInput+0x3cc>)
   1331e:	601a      	str	r2, [r3, #0]
			
			ButtonDownTime = 0;
   13320:	4b39      	ldr	r3, [pc, #228]	; (13408 <HandleUserInput+0x3d4>)
   13322:	2200      	movs	r2, #0
   13324:	601a      	str	r2, [r3, #0]
   13326:	e000      	b.n	1332a <HandleUserInput+0x2f6>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
   13328:	46c0      	nop			; (mov r8, r8)
		}
	}
	lremote_btn_state = remote_btn_state;
   1332a:	4b2e      	ldr	r3, [pc, #184]	; (133e4 <HandleUserInput+0x3b0>)
   1332c:	781a      	ldrb	r2, [r3, #0]
   1332e:	4b31      	ldr	r3, [pc, #196]	; (133f4 <HandleUserInput+0x3c0>)
   13330:	701a      	strb	r2, [r3, #0]

	////////   Determine the type of button press that occurred   ////////
	//////////////////////////////////////////////////////////////////////
	ButtonPressType = PRESS_NONE;
   13332:	4b38      	ldr	r3, [pc, #224]	; (13414 <HandleUserInput+0x3e0>)
   13334:	2200      	movs	r2, #0
   13336:	701a      	strb	r2, [r3, #0]
	if(ButtonDownTime > 0 && ButtonDownTime < 500){ // Button Tap
   13338:	4b33      	ldr	r3, [pc, #204]	; (13408 <HandleUserInput+0x3d4>)
   1333a:	681b      	ldr	r3, [r3, #0]
   1333c:	2b00      	cmp	r3, #0
   1333e:	d00c      	beq.n	1335a <HandleUserInput+0x326>
   13340:	4b31      	ldr	r3, [pc, #196]	; (13408 <HandleUserInput+0x3d4>)
   13342:	681a      	ldr	r2, [r3, #0]
   13344:	23f4      	movs	r3, #244	; 0xf4
   13346:	33ff      	adds	r3, #255	; 0xff
   13348:	429a      	cmp	r2, r3
   1334a:	d806      	bhi.n	1335a <HandleUserInput+0x326>
		tapIndex++;
   1334c:	4b32      	ldr	r3, [pc, #200]	; (13418 <HandleUserInput+0x3e4>)
   1334e:	781b      	ldrb	r3, [r3, #0]
   13350:	3301      	adds	r3, #1
   13352:	b2da      	uxtb	r2, r3
   13354:	4b30      	ldr	r3, [pc, #192]	; (13418 <HandleUserInput+0x3e4>)
   13356:	701a      	strb	r2, [r3, #0]
   13358:	e071      	b.n	1343e <HandleUserInput+0x40a>
	} else if(ButtonDownTime > 500 && ButtonDownTime < 1000 && !TurnSignalOn){ // Medium Press
   1335a:	4b2b      	ldr	r3, [pc, #172]	; (13408 <HandleUserInput+0x3d4>)
   1335c:	681a      	ldr	r2, [r3, #0]
   1335e:	23fa      	movs	r3, #250	; 0xfa
   13360:	005b      	lsls	r3, r3, #1
   13362:	429a      	cmp	r2, r3
   13364:	d95c      	bls.n	13420 <HandleUserInput+0x3ec>
   13366:	4b28      	ldr	r3, [pc, #160]	; (13408 <HandleUserInput+0x3d4>)
   13368:	681b      	ldr	r3, [r3, #0]
   1336a:	4a2c      	ldr	r2, [pc, #176]	; (1341c <HandleUserInput+0x3e8>)
   1336c:	4293      	cmp	r3, r2
   1336e:	d857      	bhi.n	13420 <HandleUserInput+0x3ec>
   13370:	4b27      	ldr	r3, [pc, #156]	; (13410 <HandleUserInput+0x3dc>)
   13372:	781b      	ldrb	r3, [r3, #0]
   13374:	2201      	movs	r2, #1
   13376:	4053      	eors	r3, r2
   13378:	b2db      	uxtb	r3, r3
   1337a:	2b00      	cmp	r3, #0
   1337c:	d050      	beq.n	13420 <HandleUserInput+0x3ec>
		ButtonPressType = MEDIUM_PRESS;
   1337e:	4b25      	ldr	r3, [pc, #148]	; (13414 <HandleUserInput+0x3e0>)
   13380:	2206      	movs	r2, #6
   13382:	701a      	strb	r2, [r3, #0]
   13384:	e05b      	b.n	1343e <HandleUserInput+0x40a>
   13386:	46c0      	nop			; (mov r8, r8)
   13388:	2000038c 	.word	0x2000038c
   1338c:	0001bb7c 	.word	0x0001bb7c
   13390:	200003f5 	.word	0x200003f5
   13394:	20000e1c 	.word	0x20000e1c
   13398:	00019565 	.word	0x00019565
   1339c:	0001b1a1 	.word	0x0001b1a1
   133a0:	00019691 	.word	0x00019691
   133a4:	41222870 	.word	0x41222870
   133a8:	0001a519 	.word	0x0001a519
   133ac:	ca397ea4 	.word	0xca397ea4
   133b0:	3f265b54 	.word	0x3f265b54
   133b4:	0001b245 	.word	0x0001b245
   133b8:	00018799 	.word	0x00018799
   133bc:	000187c1 	.word	0x000187c1
   133c0:	437f0000 	.word	0x437f0000
   133c4:	0001883d 	.word	0x0001883d
   133c8:	2000038e 	.word	0x2000038e
   133cc:	200003f6 	.word	0x200003f6
   133d0:	20001ae4 	.word	0x20001ae4
   133d4:	2000038f 	.word	0x2000038f
   133d8:	2000038d 	.word	0x2000038d
   133dc:	0001bb90 	.word	0x0001bb90
   133e0:	000097d1 	.word	0x000097d1
   133e4:	20000390 	.word	0x20000390
   133e8:	0001301d 	.word	0x0001301d
   133ec:	00002328 	.word	0x00002328
   133f0:	20000108 	.word	0x20000108
   133f4:	20000391 	.word	0x20000391
   133f8:	00009f65 	.word	0x00009f65
   133fc:	20000428 	.word	0x20000428
   13400:	20000424 	.word	0x20000424
   13404:	00009f95 	.word	0x00009f95
   13408:	20000420 	.word	0x20000420
   1340c:	2000041c 	.word	0x2000041c
   13410:	2000042c 	.word	0x2000042c
   13414:	20000416 	.word	0x20000416
   13418:	20000418 	.word	0x20000418
   1341c:	000003e7 	.word	0x000003e7
	} else if(ButtonDownTime >= 1000 && !TurnSignalOn){ // Long Press
   13420:	4bc0      	ldr	r3, [pc, #768]	; (13724 <HandleUserInput+0x6f0>)
   13422:	681b      	ldr	r3, [r3, #0]
   13424:	4ac0      	ldr	r2, [pc, #768]	; (13728 <HandleUserInput+0x6f4>)
   13426:	4293      	cmp	r3, r2
   13428:	d909      	bls.n	1343e <HandleUserInput+0x40a>
   1342a:	4bc0      	ldr	r3, [pc, #768]	; (1372c <HandleUserInput+0x6f8>)
   1342c:	781b      	ldrb	r3, [r3, #0]
   1342e:	2201      	movs	r2, #1
   13430:	4053      	eors	r3, r2
   13432:	b2db      	uxtb	r3, r3
   13434:	2b00      	cmp	r3, #0
   13436:	d002      	beq.n	1343e <HandleUserInput+0x40a>
		ButtonPressType = LONG_PRESS;
   13438:	4bbd      	ldr	r3, [pc, #756]	; (13730 <HandleUserInput+0x6fc>)
   1343a:	2207      	movs	r2, #7
   1343c:	701a      	strb	r2, [r3, #0]
	}
	if(tapIndex > 0 && ButtonUpTime > 200){
   1343e:	4bbd      	ldr	r3, [pc, #756]	; (13734 <HandleUserInput+0x700>)
   13440:	781b      	ldrb	r3, [r3, #0]
   13442:	2b00      	cmp	r3, #0
   13444:	d006      	beq.n	13454 <HandleUserInput+0x420>
   13446:	4bbc      	ldr	r3, [pc, #752]	; (13738 <HandleUserInput+0x704>)
   13448:	681b      	ldr	r3, [r3, #0]
   1344a:	2bc8      	cmp	r3, #200	; 0xc8
   1344c:	d902      	bls.n	13454 <HandleUserInput+0x420>
		tapSequence = 1;
   1344e:	4bbb      	ldr	r3, [pc, #748]	; (1373c <HandleUserInput+0x708>)
   13450:	2201      	movs	r2, #1
   13452:	701a      	strb	r2, [r3, #0]
	}
	if(tapSequence){
   13454:	4bb9      	ldr	r3, [pc, #740]	; (1373c <HandleUserInput+0x708>)
   13456:	781b      	ldrb	r3, [r3, #0]
   13458:	2b00      	cmp	r3, #0
   1345a:	d03c      	beq.n	134d6 <HandleUserInput+0x4a2>
		if(remote_type == REMOTE_UART_DUAL && VescRemoteX <= 110 && tapIndex == 1)
   1345c:	4bb8      	ldr	r3, [pc, #736]	; (13740 <HandleUserInput+0x70c>)
   1345e:	781b      	ldrb	r3, [r3, #0]
   13460:	2b03      	cmp	r3, #3
   13462:	d10b      	bne.n	1347c <HandleUserInput+0x448>
   13464:	4bb7      	ldr	r3, [pc, #732]	; (13744 <HandleUserInput+0x710>)
   13466:	781b      	ldrb	r3, [r3, #0]
   13468:	2b6e      	cmp	r3, #110	; 0x6e
   1346a:	d807      	bhi.n	1347c <HandleUserInput+0x448>
   1346c:	4bb1      	ldr	r3, [pc, #708]	; (13734 <HandleUserInput+0x700>)
   1346e:	781b      	ldrb	r3, [r3, #0]
   13470:	2b01      	cmp	r3, #1
   13472:	d103      	bne.n	1347c <HandleUserInput+0x448>
			ButtonPressType = LEFT_TAP;
   13474:	4bae      	ldr	r3, [pc, #696]	; (13730 <HandleUserInput+0x6fc>)
   13476:	2204      	movs	r2, #4
   13478:	701a      	strb	r2, [r3, #0]
   1347a:	e026      	b.n	134ca <HandleUserInput+0x496>
		else if(remote_type == REMOTE_UART_DUAL && VescRemoteX >= 150 && tapIndex == 1)
   1347c:	4bb0      	ldr	r3, [pc, #704]	; (13740 <HandleUserInput+0x70c>)
   1347e:	781b      	ldrb	r3, [r3, #0]
   13480:	2b03      	cmp	r3, #3
   13482:	d10b      	bne.n	1349c <HandleUserInput+0x468>
   13484:	4baf      	ldr	r3, [pc, #700]	; (13744 <HandleUserInput+0x710>)
   13486:	781b      	ldrb	r3, [r3, #0]
   13488:	2b95      	cmp	r3, #149	; 0x95
   1348a:	d907      	bls.n	1349c <HandleUserInput+0x468>
   1348c:	4ba9      	ldr	r3, [pc, #676]	; (13734 <HandleUserInput+0x700>)
   1348e:	781b      	ldrb	r3, [r3, #0]
   13490:	2b01      	cmp	r3, #1
   13492:	d103      	bne.n	1349c <HandleUserInput+0x468>
		ButtonPressType = RIGHT_TAP;
   13494:	4ba6      	ldr	r3, [pc, #664]	; (13730 <HandleUserInput+0x6fc>)
   13496:	2205      	movs	r2, #5
   13498:	701a      	strb	r2, [r3, #0]
   1349a:	e016      	b.n	134ca <HandleUserInput+0x496>
		else if(tapIndex == 1){
   1349c:	4ba5      	ldr	r3, [pc, #660]	; (13734 <HandleUserInput+0x700>)
   1349e:	781b      	ldrb	r3, [r3, #0]
   134a0:	2b01      	cmp	r3, #1
   134a2:	d103      	bne.n	134ac <HandleUserInput+0x478>
			ButtonPressType = SINGLE_TAP;
   134a4:	4ba2      	ldr	r3, [pc, #648]	; (13730 <HandleUserInput+0x6fc>)
   134a6:	2201      	movs	r2, #1
   134a8:	701a      	strb	r2, [r3, #0]
   134aa:	e00e      	b.n	134ca <HandleUserInput+0x496>
		}
		else if(tapIndex == 2)
   134ac:	4ba1      	ldr	r3, [pc, #644]	; (13734 <HandleUserInput+0x700>)
   134ae:	781b      	ldrb	r3, [r3, #0]
   134b0:	2b02      	cmp	r3, #2
   134b2:	d103      	bne.n	134bc <HandleUserInput+0x488>
			ButtonPressType = DOUBLE_TAP;
   134b4:	4b9e      	ldr	r3, [pc, #632]	; (13730 <HandleUserInput+0x6fc>)
   134b6:	2202      	movs	r2, #2
   134b8:	701a      	strb	r2, [r3, #0]
   134ba:	e006      	b.n	134ca <HandleUserInput+0x496>
		else if(tapIndex == 3)
   134bc:	4b9d      	ldr	r3, [pc, #628]	; (13734 <HandleUserInput+0x700>)
   134be:	781b      	ldrb	r3, [r3, #0]
   134c0:	2b03      	cmp	r3, #3
   134c2:	d102      	bne.n	134ca <HandleUserInput+0x496>
			ButtonPressType = TRIPLE_TAP;
   134c4:	4b9a      	ldr	r3, [pc, #616]	; (13730 <HandleUserInput+0x6fc>)
   134c6:	2203      	movs	r2, #3
   134c8:	701a      	strb	r2, [r3, #0]
		
		tapSequence = 0;
   134ca:	4b9c      	ldr	r3, [pc, #624]	; (1373c <HandleUserInput+0x708>)
   134cc:	2200      	movs	r2, #0
   134ce:	701a      	strb	r2, [r3, #0]
		tapIndex = 0;
   134d0:	4b98      	ldr	r3, [pc, #608]	; (13734 <HandleUserInput+0x700>)
   134d2:	2200      	movs	r2, #0
   134d4:	701a      	strb	r2, [r3, #0]
	}
	
	//////////////////////   Handle the aux output   /////////////////////
	//////////////////////////////////////////////////////////////////////
	if(AUX_ENABLED){
   134d6:	4b9c      	ldr	r3, [pc, #624]	; (13748 <HandleUserInput+0x714>)
   134d8:	781b      	ldrb	r3, [r3, #0]
   134da:	2b00      	cmp	r3, #0
   134dc:	d100      	bne.n	134e0 <HandleUserInput+0x4ac>
   134de:	e09a      	b.n	13616 <HandleUserInput+0x5e2>
		if(!AppAuxButton){
   134e0:	4b9a      	ldr	r3, [pc, #616]	; (1374c <HandleUserInput+0x718>)
   134e2:	781b      	ldrb	r3, [r3, #0]
   134e4:	2b00      	cmp	r3, #0
   134e6:	d000      	beq.n	134ea <HandleUserInput+0x4b6>
   134e8:	e070      	b.n	135cc <HandleUserInput+0x598>
			switch(auxControlType){
   134ea:	4b99      	ldr	r3, [pc, #612]	; (13750 <HandleUserInput+0x71c>)
   134ec:	781b      	ldrb	r3, [r3, #0]
   134ee:	2b01      	cmp	r3, #1
   134f0:	d014      	beq.n	1351c <HandleUserInput+0x4e8>
   134f2:	dc02      	bgt.n	134fa <HandleUserInput+0x4c6>
   134f4:	2b00      	cmp	r3, #0
   134f6:	d003      	beq.n	13500 <HandleUserInput+0x4cc>
   134f8:	e083      	b.n	13602 <HandleUserInput+0x5ce>
   134fa:	2b02      	cmp	r3, #2
   134fc:	d031      	beq.n	13562 <HandleUserInput+0x52e>
				check_time(&AuxOnTime);
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
				AUX_OUTPUT = false;
				break;
				case AUX_PATTERN:
				break;
   134fe:	e080      	b.n	13602 <HandleUserInput+0x5ce>
				if(ButtonHeldTime > 500){
   13500:	4b94      	ldr	r3, [pc, #592]	; (13754 <HandleUserInput+0x720>)
   13502:	681a      	ldr	r2, [r3, #0]
   13504:	23fa      	movs	r3, #250	; 0xfa
   13506:	005b      	lsls	r3, r3, #1
   13508:	429a      	cmp	r2, r3
   1350a:	d903      	bls.n	13514 <HandleUserInput+0x4e0>
					AUX_OUTPUT = true;
   1350c:	4b92      	ldr	r3, [pc, #584]	; (13758 <HandleUserInput+0x724>)
   1350e:	2201      	movs	r2, #1
   13510:	701a      	strb	r2, [r3, #0]
				break;
   13512:	e076      	b.n	13602 <HandleUserInput+0x5ce>
					AUX_OUTPUT = false;
   13514:	4b90      	ldr	r3, [pc, #576]	; (13758 <HandleUserInput+0x724>)
   13516:	2200      	movs	r2, #0
   13518:	701a      	strb	r2, [r3, #0]
				break;
   1351a:	e072      	b.n	13602 <HandleUserInput+0x5ce>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
   1351c:	4b88      	ldr	r3, [pc, #544]	; (13740 <HandleUserInput+0x70c>)
   1351e:	781b      	ldrb	r3, [r3, #0]
   13520:	2b03      	cmp	r3, #3
   13522:	d005      	beq.n	13530 <HandleUserInput+0x4fc>
   13524:	4b8d      	ldr	r3, [pc, #564]	; (1375c <HandleUserInput+0x728>)
   13526:	781a      	ldrb	r2, [r3, #0]
   13528:	4b81      	ldr	r3, [pc, #516]	; (13730 <HandleUserInput+0x6fc>)
   1352a:	781b      	ldrb	r3, [r3, #0]
   1352c:	429a      	cmp	r2, r3
   1352e:	d009      	beq.n	13544 <HandleUserInput+0x510>
				|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
   13530:	4b83      	ldr	r3, [pc, #524]	; (13740 <HandleUserInput+0x70c>)
   13532:	781b      	ldrb	r3, [r3, #0]
   13534:	2b03      	cmp	r3, #3
   13536:	d161      	bne.n	135fc <HandleUserInput+0x5c8>
   13538:	4b89      	ldr	r3, [pc, #548]	; (13760 <HandleUserInput+0x72c>)
   1353a:	781a      	ldrb	r2, [r3, #0]
   1353c:	4b7c      	ldr	r3, [pc, #496]	; (13730 <HandleUserInput+0x6fc>)
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	429a      	cmp	r2, r3
   13542:	d15b      	bne.n	135fc <HandleUserInput+0x5c8>
					AUX_OUTPUT = !AUX_OUTPUT;
   13544:	4b84      	ldr	r3, [pc, #528]	; (13758 <HandleUserInput+0x724>)
   13546:	781b      	ldrb	r3, [r3, #0]
   13548:	1e5a      	subs	r2, r3, #1
   1354a:	4193      	sbcs	r3, r2
   1354c:	b2db      	uxtb	r3, r3
   1354e:	2201      	movs	r2, #1
   13550:	4053      	eors	r3, r2
   13552:	b2db      	uxtb	r3, r3
   13554:	1c1a      	adds	r2, r3, #0
   13556:	2301      	movs	r3, #1
   13558:	4013      	ands	r3, r2
   1355a:	b2da      	uxtb	r2, r3
   1355c:	4b7e      	ldr	r3, [pc, #504]	; (13758 <HandleUserInput+0x724>)
   1355e:	701a      	strb	r2, [r3, #0]
				break;
   13560:	e04c      	b.n	135fc <HandleUserInput+0x5c8>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
   13562:	4b77      	ldr	r3, [pc, #476]	; (13740 <HandleUserInput+0x70c>)
   13564:	781b      	ldrb	r3, [r3, #0]
   13566:	2b03      	cmp	r3, #3
   13568:	d005      	beq.n	13576 <HandleUserInput+0x542>
   1356a:	4b7c      	ldr	r3, [pc, #496]	; (1375c <HandleUserInput+0x728>)
   1356c:	781a      	ldrb	r2, [r3, #0]
   1356e:	4b70      	ldr	r3, [pc, #448]	; (13730 <HandleUserInput+0x6fc>)
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	429a      	cmp	r2, r3
   13574:	d009      	beq.n	1358a <HandleUserInput+0x556>
				|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
   13576:	4b72      	ldr	r3, [pc, #456]	; (13740 <HandleUserInput+0x70c>)
   13578:	781b      	ldrb	r3, [r3, #0]
   1357a:	2b03      	cmp	r3, #3
   1357c:	d10d      	bne.n	1359a <HandleUserInput+0x566>
   1357e:	4b78      	ldr	r3, [pc, #480]	; (13760 <HandleUserInput+0x72c>)
   13580:	781a      	ldrb	r2, [r3, #0]
   13582:	4b6b      	ldr	r3, [pc, #428]	; (13730 <HandleUserInput+0x6fc>)
   13584:	781b      	ldrb	r3, [r3, #0]
   13586:	429a      	cmp	r2, r3
   13588:	d107      	bne.n	1359a <HandleUserInput+0x566>
					AUX_OUTPUT = true;
   1358a:	4b73      	ldr	r3, [pc, #460]	; (13758 <HandleUserInput+0x724>)
   1358c:	2201      	movs	r2, #1
   1358e:	701a      	strb	r2, [r3, #0]
					AuxOnTime = millis();
   13590:	4b74      	ldr	r3, [pc, #464]	; (13764 <HandleUserInput+0x730>)
   13592:	4798      	blx	r3
   13594:	0002      	movs	r2, r0
   13596:	4b74      	ldr	r3, [pc, #464]	; (13768 <HandleUserInput+0x734>)
   13598:	601a      	str	r2, [r3, #0]
				check_time(&AuxOnTime);
   1359a:	4b73      	ldr	r3, [pc, #460]	; (13768 <HandleUserInput+0x734>)
   1359c:	0018      	movs	r0, r3
   1359e:	4b73      	ldr	r3, [pc, #460]	; (1376c <HandleUserInput+0x738>)
   135a0:	4798      	blx	r3
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
   135a2:	4b6d      	ldr	r3, [pc, #436]	; (13758 <HandleUserInput+0x724>)
   135a4:	781b      	ldrb	r3, [r3, #0]
   135a6:	2b00      	cmp	r3, #0
   135a8:	d02a      	beq.n	13600 <HandleUserInput+0x5cc>
   135aa:	4b6e      	ldr	r3, [pc, #440]	; (13764 <HandleUserInput+0x730>)
   135ac:	4798      	blx	r3
   135ae:	0002      	movs	r2, r0
   135b0:	4b6d      	ldr	r3, [pc, #436]	; (13768 <HandleUserInput+0x734>)
   135b2:	681b      	ldr	r3, [r3, #0]
   135b4:	1ad3      	subs	r3, r2, r3
   135b6:	4a6e      	ldr	r2, [pc, #440]	; (13770 <HandleUserInput+0x73c>)
   135b8:	7812      	ldrb	r2, [r2, #0]
   135ba:	0011      	movs	r1, r2
   135bc:	2264      	movs	r2, #100	; 0x64
   135be:	434a      	muls	r2, r1
   135c0:	4293      	cmp	r3, r2
   135c2:	d31d      	bcc.n	13600 <HandleUserInput+0x5cc>
				AUX_OUTPUT = false;
   135c4:	4b64      	ldr	r3, [pc, #400]	; (13758 <HandleUserInput+0x724>)
   135c6:	2200      	movs	r2, #0
   135c8:	701a      	strb	r2, [r3, #0]
				break;
   135ca:	e019      	b.n	13600 <HandleUserInput+0x5cc>
			}
		} else if(AppAuxButton == 1 && lAppAuxButton == 0) {
   135cc:	4b5f      	ldr	r3, [pc, #380]	; (1374c <HandleUserInput+0x718>)
   135ce:	781b      	ldrb	r3, [r3, #0]
   135d0:	2b01      	cmp	r3, #1
   135d2:	d107      	bne.n	135e4 <HandleUserInput+0x5b0>
   135d4:	4b67      	ldr	r3, [pc, #412]	; (13774 <HandleUserInput+0x740>)
   135d6:	781b      	ldrb	r3, [r3, #0]
   135d8:	2b00      	cmp	r3, #0
   135da:	d103      	bne.n	135e4 <HandleUserInput+0x5b0>
			AUX_OUTPUT = true;
   135dc:	4b5e      	ldr	r3, [pc, #376]	; (13758 <HandleUserInput+0x724>)
   135de:	2201      	movs	r2, #1
   135e0:	701a      	strb	r2, [r3, #0]
   135e2:	e00e      	b.n	13602 <HandleUserInput+0x5ce>
		} else if(AppAuxButton == 0 && lAppAuxButton == 1){
   135e4:	4b59      	ldr	r3, [pc, #356]	; (1374c <HandleUserInput+0x718>)
   135e6:	781b      	ldrb	r3, [r3, #0]
   135e8:	2b00      	cmp	r3, #0
   135ea:	d10a      	bne.n	13602 <HandleUserInput+0x5ce>
   135ec:	4b61      	ldr	r3, [pc, #388]	; (13774 <HandleUserInput+0x740>)
   135ee:	781b      	ldrb	r3, [r3, #0]
   135f0:	2b01      	cmp	r3, #1
   135f2:	d106      	bne.n	13602 <HandleUserInput+0x5ce>
			AUX_OUTPUT = false;
   135f4:	4b58      	ldr	r3, [pc, #352]	; (13758 <HandleUserInput+0x724>)
   135f6:	2200      	movs	r2, #0
   135f8:	701a      	strb	r2, [r3, #0]
   135fa:	e002      	b.n	13602 <HandleUserInput+0x5ce>
				break;
   135fc:	46c0      	nop			; (mov r8, r8)
   135fe:	e000      	b.n	13602 <HandleUserInput+0x5ce>
				break;
   13600:	46c0      	nop			; (mov r8, r8)
		}
		lAppAuxButton = AppAuxButton;
   13602:	4b52      	ldr	r3, [pc, #328]	; (1374c <HandleUserInput+0x718>)
   13604:	781a      	ldrb	r2, [r3, #0]
   13606:	4b5b      	ldr	r3, [pc, #364]	; (13774 <HandleUserInput+0x740>)
   13608:	701a      	strb	r2, [r3, #0]

		setAux(AUX_OUTPUT);
   1360a:	4b53      	ldr	r3, [pc, #332]	; (13758 <HandleUserInput+0x724>)
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	0018      	movs	r0, r3
   13610:	4b59      	ldr	r3, [pc, #356]	; (13778 <HandleUserInput+0x744>)
   13612:	4798      	blx	r3
   13614:	e002      	b.n	1361c <HandleUserInput+0x5e8>
	}
	else{
		setAux(false);
   13616:	2000      	movs	r0, #0
   13618:	4b57      	ldr	r3, [pc, #348]	; (13778 <HandleUserInput+0x744>)
   1361a:	4798      	blx	r3
	}

	/////////////   Handle the side, head, and tail lights   /////////////
	//////////////////////////////////////////////////////////////////////
	if(ButtonPressType != PRESS_NONE){
   1361c:	4b44      	ldr	r3, [pc, #272]	; (13730 <HandleUserInput+0x6fc>)
   1361e:	781b      	ldrb	r3, [r3, #0]
   13620:	2b00      	cmp	r3, #0
   13622:	d100      	bne.n	13626 <HandleUserInput+0x5f2>
   13624:	e1a5      	b.n	13972 <HandleUserInput+0x93e>
		if(remote_type != REMOTE_UART_DUAL){ // If single axis remote is connected
   13626:	4b46      	ldr	r3, [pc, #280]	; (13740 <HandleUserInput+0x70c>)
   13628:	781b      	ldrb	r3, [r3, #0]
   1362a:	2b03      	cmp	r3, #3
   1362c:	d100      	bne.n	13630 <HandleUserInput+0x5fc>
   1362e:	e0cc      	b.n	137ca <HandleUserInput+0x796>
			if(single_all_control == ButtonPressType){
   13630:	4b52      	ldr	r3, [pc, #328]	; (1377c <HandleUserInput+0x748>)
   13632:	781a      	ldrb	r2, [r3, #0]
   13634:	4b3e      	ldr	r3, [pc, #248]	; (13730 <HandleUserInput+0x6fc>)
   13636:	781b      	ldrb	r3, [r3, #0]
   13638:	429a      	cmp	r2, r3
   1363a:	d108      	bne.n	1364e <HandleUserInput+0x61a>
				LIGHTS_ON = !LIGHTS_ON;
   1363c:	4b50      	ldr	r3, [pc, #320]	; (13780 <HandleUserInput+0x74c>)
   1363e:	781b      	ldrb	r3, [r3, #0]
   13640:	425a      	negs	r2, r3
   13642:	4153      	adcs	r3, r2
   13644:	b2db      	uxtb	r3, r3
   13646:	001a      	movs	r2, r3
   13648:	4b4d      	ldr	r3, [pc, #308]	; (13780 <HandleUserInput+0x74c>)
   1364a:	701a      	strb	r2, [r3, #0]
				SIDELIGHTS = true;
				RestoreTurnLights = false;
			}
		}
	}
}
   1364c:	e191      	b.n	13972 <HandleUserInput+0x93e>
			else if(single_head_control == ButtonPressType){
   1364e:	4b4d      	ldr	r3, [pc, #308]	; (13784 <HandleUserInput+0x750>)
   13650:	781a      	ldrb	r2, [r3, #0]
   13652:	4b37      	ldr	r3, [pc, #220]	; (13730 <HandleUserInput+0x6fc>)
   13654:	781b      	ldrb	r3, [r3, #0]
   13656:	429a      	cmp	r2, r3
   13658:	d123      	bne.n	136a2 <HandleUserInput+0x66e>
				if(!LIGHTS_ON){
   1365a:	4b49      	ldr	r3, [pc, #292]	; (13780 <HandleUserInput+0x74c>)
   1365c:	781b      	ldrb	r3, [r3, #0]
   1365e:	2b00      	cmp	r3, #0
   13660:	d109      	bne.n	13676 <HandleUserInput+0x642>
					HEADLIGHTS = true;
   13662:	4b49      	ldr	r3, [pc, #292]	; (13788 <HandleUserInput+0x754>)
   13664:	2201      	movs	r2, #1
   13666:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
   13668:	4b48      	ldr	r3, [pc, #288]	; (1378c <HandleUserInput+0x758>)
   1366a:	2200      	movs	r2, #0
   1366c:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
   1366e:	4b44      	ldr	r3, [pc, #272]	; (13780 <HandleUserInput+0x74c>)
   13670:	2201      	movs	r2, #1
   13672:	701a      	strb	r2, [r3, #0]
}
   13674:	e17d      	b.n	13972 <HandleUserInput+0x93e>
				else if(SIDELIGHTS)
   13676:	4b45      	ldr	r3, [pc, #276]	; (1378c <HandleUserInput+0x758>)
   13678:	781b      	ldrb	r3, [r3, #0]
   1367a:	2b00      	cmp	r3, #0
   1367c:	d008      	beq.n	13690 <HandleUserInput+0x65c>
				HEADLIGHTS = !HEADLIGHTS;
   1367e:	4b42      	ldr	r3, [pc, #264]	; (13788 <HandleUserInput+0x754>)
   13680:	781b      	ldrb	r3, [r3, #0]
   13682:	425a      	negs	r2, r3
   13684:	4153      	adcs	r3, r2
   13686:	b2db      	uxtb	r3, r3
   13688:	001a      	movs	r2, r3
   1368a:	4b3f      	ldr	r3, [pc, #252]	; (13788 <HandleUserInput+0x754>)
   1368c:	701a      	strb	r2, [r3, #0]
}
   1368e:	e170      	b.n	13972 <HandleUserInput+0x93e>
				LIGHTS_ON = !LIGHTS_ON;
   13690:	4b3b      	ldr	r3, [pc, #236]	; (13780 <HandleUserInput+0x74c>)
   13692:	781b      	ldrb	r3, [r3, #0]
   13694:	425a      	negs	r2, r3
   13696:	4153      	adcs	r3, r2
   13698:	b2db      	uxtb	r3, r3
   1369a:	001a      	movs	r2, r3
   1369c:	4b38      	ldr	r3, [pc, #224]	; (13780 <HandleUserInput+0x74c>)
   1369e:	701a      	strb	r2, [r3, #0]
}
   136a0:	e167      	b.n	13972 <HandleUserInput+0x93e>
			else if(single_side_control == ButtonPressType){
   136a2:	4b3b      	ldr	r3, [pc, #236]	; (13790 <HandleUserInput+0x75c>)
   136a4:	781a      	ldrb	r2, [r3, #0]
   136a6:	4b22      	ldr	r3, [pc, #136]	; (13730 <HandleUserInput+0x6fc>)
   136a8:	781b      	ldrb	r3, [r3, #0]
   136aa:	429a      	cmp	r2, r3
   136ac:	d123      	bne.n	136f6 <HandleUserInput+0x6c2>
				if(!LIGHTS_ON){
   136ae:	4b34      	ldr	r3, [pc, #208]	; (13780 <HandleUserInput+0x74c>)
   136b0:	781b      	ldrb	r3, [r3, #0]
   136b2:	2b00      	cmp	r3, #0
   136b4:	d109      	bne.n	136ca <HandleUserInput+0x696>
					HEADLIGHTS = false;
   136b6:	4b34      	ldr	r3, [pc, #208]	; (13788 <HandleUserInput+0x754>)
   136b8:	2200      	movs	r2, #0
   136ba:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
   136bc:	4b33      	ldr	r3, [pc, #204]	; (1378c <HandleUserInput+0x758>)
   136be:	2201      	movs	r2, #1
   136c0:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
   136c2:	4b2f      	ldr	r3, [pc, #188]	; (13780 <HandleUserInput+0x74c>)
   136c4:	2201      	movs	r2, #1
   136c6:	701a      	strb	r2, [r3, #0]
}
   136c8:	e153      	b.n	13972 <HandleUserInput+0x93e>
				else if(HEADLIGHTS)
   136ca:	4b2f      	ldr	r3, [pc, #188]	; (13788 <HandleUserInput+0x754>)
   136cc:	781b      	ldrb	r3, [r3, #0]
   136ce:	2b00      	cmp	r3, #0
   136d0:	d008      	beq.n	136e4 <HandleUserInput+0x6b0>
				SIDELIGHTS = !SIDELIGHTS;
   136d2:	4b2e      	ldr	r3, [pc, #184]	; (1378c <HandleUserInput+0x758>)
   136d4:	781b      	ldrb	r3, [r3, #0]
   136d6:	425a      	negs	r2, r3
   136d8:	4153      	adcs	r3, r2
   136da:	b2db      	uxtb	r3, r3
   136dc:	001a      	movs	r2, r3
   136de:	4b2b      	ldr	r3, [pc, #172]	; (1378c <HandleUserInput+0x758>)
   136e0:	701a      	strb	r2, [r3, #0]
}
   136e2:	e146      	b.n	13972 <HandleUserInput+0x93e>
				LIGHTS_ON = !LIGHTS_ON;
   136e4:	4b26      	ldr	r3, [pc, #152]	; (13780 <HandleUserInput+0x74c>)
   136e6:	781b      	ldrb	r3, [r3, #0]
   136e8:	425a      	negs	r2, r3
   136ea:	4153      	adcs	r3, r2
   136ec:	b2db      	uxtb	r3, r3
   136ee:	001a      	movs	r2, r3
   136f0:	4b23      	ldr	r3, [pc, #140]	; (13780 <HandleUserInput+0x74c>)
   136f2:	701a      	strb	r2, [r3, #0]
}
   136f4:	e13d      	b.n	13972 <HandleUserInput+0x93e>
			else if(single_down_control == ButtonPressType){
   136f6:	4b27      	ldr	r3, [pc, #156]	; (13794 <HandleUserInput+0x760>)
   136f8:	781a      	ldrb	r2, [r3, #0]
   136fa:	4b0d      	ldr	r3, [pc, #52]	; (13730 <HandleUserInput+0x6fc>)
   136fc:	781b      	ldrb	r3, [r3, #0]
   136fe:	429a      	cmp	r2, r3
   13700:	d14c      	bne.n	1379c <HandleUserInput+0x768>
				if(light_mode == 0)
   13702:	4b25      	ldr	r3, [pc, #148]	; (13798 <HandleUserInput+0x764>)
   13704:	781b      	ldrb	r3, [r3, #0]
   13706:	2b00      	cmp	r3, #0
   13708:	d105      	bne.n	13716 <HandleUserInput+0x6e2>
					light_mode = light_modes - 1;
   1370a:	2309      	movs	r3, #9
   1370c:	3b01      	subs	r3, #1
   1370e:	b2da      	uxtb	r2, r3
   13710:	4b21      	ldr	r3, [pc, #132]	; (13798 <HandleUserInput+0x764>)
   13712:	701a      	strb	r2, [r3, #0]
}
   13714:	e12d      	b.n	13972 <HandleUserInput+0x93e>
					light_mode--;
   13716:	4b20      	ldr	r3, [pc, #128]	; (13798 <HandleUserInput+0x764>)
   13718:	781b      	ldrb	r3, [r3, #0]
   1371a:	3b01      	subs	r3, #1
   1371c:	b2da      	uxtb	r2, r3
   1371e:	4b1e      	ldr	r3, [pc, #120]	; (13798 <HandleUserInput+0x764>)
   13720:	701a      	strb	r2, [r3, #0]
}
   13722:	e126      	b.n	13972 <HandleUserInput+0x93e>
   13724:	20000420 	.word	0x20000420
   13728:	000003e7 	.word	0x000003e7
   1372c:	2000042c 	.word	0x2000042c
   13730:	20000416 	.word	0x20000416
   13734:	20000418 	.word	0x20000418
   13738:	20000424 	.word	0x20000424
   1373c:	20000417 	.word	0x20000417
   13740:	2000038c 	.word	0x2000038c
   13744:	20000400 	.word	0x20000400
   13748:	20000402 	.word	0x20000402
   1374c:	20000414 	.word	0x20000414
   13750:	20000406 	.word	0x20000406
   13754:	2000041c 	.word	0x2000041c
   13758:	20000404 	.word	0x20000404
   1375c:	20000408 	.word	0x20000408
   13760:	2000040e 	.word	0x2000040e
   13764:	00009f65 	.word	0x00009f65
   13768:	20000430 	.word	0x20000430
   1376c:	00009f95 	.word	0x00009f95
   13770:	20000407 	.word	0x20000407
   13774:	20000415 	.word	0x20000415
   13778:	0000a565 	.word	0x0000a565
   1377c:	20000409 	.word	0x20000409
   13780:	200000cd 	.word	0x200000cd
   13784:	2000040a 	.word	0x2000040a
   13788:	2000036f 	.word	0x2000036f
   1378c:	200000cc 	.word	0x200000cc
   13790:	2000040b 	.word	0x2000040b
   13794:	2000040d 	.word	0x2000040d
   13798:	20000034 	.word	0x20000034
			else if(single_up_control == ButtonPressType){
   1379c:	4b77      	ldr	r3, [pc, #476]	; (1397c <HandleUserInput+0x948>)
   1379e:	781a      	ldrb	r2, [r3, #0]
   137a0:	4b77      	ldr	r3, [pc, #476]	; (13980 <HandleUserInput+0x94c>)
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	429a      	cmp	r2, r3
   137a6:	d000      	beq.n	137aa <HandleUserInput+0x776>
   137a8:	e0e3      	b.n	13972 <HandleUserInput+0x93e>
				light_mode++;
   137aa:	4b76      	ldr	r3, [pc, #472]	; (13984 <HandleUserInput+0x950>)
   137ac:	781b      	ldrb	r3, [r3, #0]
   137ae:	3301      	adds	r3, #1
   137b0:	b2da      	uxtb	r2, r3
   137b2:	4b74      	ldr	r3, [pc, #464]	; (13984 <HandleUserInput+0x950>)
   137b4:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
   137b6:	4b73      	ldr	r3, [pc, #460]	; (13984 <HandleUserInput+0x950>)
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2209      	movs	r2, #9
   137bc:	4293      	cmp	r3, r2
   137be:	d200      	bcs.n	137c2 <HandleUserInput+0x78e>
   137c0:	e0d7      	b.n	13972 <HandleUserInput+0x93e>
					light_mode = 0;
   137c2:	4b70      	ldr	r3, [pc, #448]	; (13984 <HandleUserInput+0x950>)
   137c4:	2200      	movs	r2, #0
   137c6:	701a      	strb	r2, [r3, #0]
}
   137c8:	e0d3      	b.n	13972 <HandleUserInput+0x93e>
		else if(remote_type == REMOTE_UART_DUAL){ // If dual axis remote is connected
   137ca:	4b6f      	ldr	r3, [pc, #444]	; (13988 <HandleUserInput+0x954>)
   137cc:	781b      	ldrb	r3, [r3, #0]
   137ce:	2b03      	cmp	r3, #3
   137d0:	d000      	beq.n	137d4 <HandleUserInput+0x7a0>
   137d2:	e0ce      	b.n	13972 <HandleUserInput+0x93e>
			if(dual_all_control == ButtonPressType){
   137d4:	4b6d      	ldr	r3, [pc, #436]	; (1398c <HandleUserInput+0x958>)
   137d6:	781a      	ldrb	r2, [r3, #0]
   137d8:	4b69      	ldr	r3, [pc, #420]	; (13980 <HandleUserInput+0x94c>)
   137da:	781b      	ldrb	r3, [r3, #0]
   137dc:	429a      	cmp	r2, r3
   137de:	d108      	bne.n	137f2 <HandleUserInput+0x7be>
				LIGHTS_ON = !LIGHTS_ON;
   137e0:	4b6b      	ldr	r3, [pc, #428]	; (13990 <HandleUserInput+0x95c>)
   137e2:	781b      	ldrb	r3, [r3, #0]
   137e4:	425a      	negs	r2, r3
   137e6:	4153      	adcs	r3, r2
   137e8:	b2db      	uxtb	r3, r3
   137ea:	001a      	movs	r2, r3
   137ec:	4b68      	ldr	r3, [pc, #416]	; (13990 <HandleUserInput+0x95c>)
   137ee:	701a      	strb	r2, [r3, #0]
}
   137f0:	e0bf      	b.n	13972 <HandleUserInput+0x93e>
			else if(dual_head_control == ButtonPressType){
   137f2:	4b68      	ldr	r3, [pc, #416]	; (13994 <HandleUserInput+0x960>)
   137f4:	781a      	ldrb	r2, [r3, #0]
   137f6:	4b62      	ldr	r3, [pc, #392]	; (13980 <HandleUserInput+0x94c>)
   137f8:	781b      	ldrb	r3, [r3, #0]
   137fa:	429a      	cmp	r2, r3
   137fc:	d123      	bne.n	13846 <HandleUserInput+0x812>
				if(!LIGHTS_ON){
   137fe:	4b64      	ldr	r3, [pc, #400]	; (13990 <HandleUserInput+0x95c>)
   13800:	781b      	ldrb	r3, [r3, #0]
   13802:	2b00      	cmp	r3, #0
   13804:	d109      	bne.n	1381a <HandleUserInput+0x7e6>
					HEADLIGHTS = true;
   13806:	4b64      	ldr	r3, [pc, #400]	; (13998 <HandleUserInput+0x964>)
   13808:	2201      	movs	r2, #1
   1380a:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
   1380c:	4b63      	ldr	r3, [pc, #396]	; (1399c <HandleUserInput+0x968>)
   1380e:	2200      	movs	r2, #0
   13810:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
   13812:	4b5f      	ldr	r3, [pc, #380]	; (13990 <HandleUserInput+0x95c>)
   13814:	2201      	movs	r2, #1
   13816:	701a      	strb	r2, [r3, #0]
}
   13818:	e0ab      	b.n	13972 <HandleUserInput+0x93e>
				else if(SIDELIGHTS)
   1381a:	4b60      	ldr	r3, [pc, #384]	; (1399c <HandleUserInput+0x968>)
   1381c:	781b      	ldrb	r3, [r3, #0]
   1381e:	2b00      	cmp	r3, #0
   13820:	d008      	beq.n	13834 <HandleUserInput+0x800>
				HEADLIGHTS = !HEADLIGHTS;
   13822:	4b5d      	ldr	r3, [pc, #372]	; (13998 <HandleUserInput+0x964>)
   13824:	781b      	ldrb	r3, [r3, #0]
   13826:	425a      	negs	r2, r3
   13828:	4153      	adcs	r3, r2
   1382a:	b2db      	uxtb	r3, r3
   1382c:	001a      	movs	r2, r3
   1382e:	4b5a      	ldr	r3, [pc, #360]	; (13998 <HandleUserInput+0x964>)
   13830:	701a      	strb	r2, [r3, #0]
}
   13832:	e09e      	b.n	13972 <HandleUserInput+0x93e>
				LIGHTS_ON = !LIGHTS_ON;
   13834:	4b56      	ldr	r3, [pc, #344]	; (13990 <HandleUserInput+0x95c>)
   13836:	781b      	ldrb	r3, [r3, #0]
   13838:	425a      	negs	r2, r3
   1383a:	4153      	adcs	r3, r2
   1383c:	b2db      	uxtb	r3, r3
   1383e:	001a      	movs	r2, r3
   13840:	4b53      	ldr	r3, [pc, #332]	; (13990 <HandleUserInput+0x95c>)
   13842:	701a      	strb	r2, [r3, #0]
}
   13844:	e095      	b.n	13972 <HandleUserInput+0x93e>
			else if(dual_side_control == ButtonPressType){
   13846:	4b56      	ldr	r3, [pc, #344]	; (139a0 <HandleUserInput+0x96c>)
   13848:	781a      	ldrb	r2, [r3, #0]
   1384a:	4b4d      	ldr	r3, [pc, #308]	; (13980 <HandleUserInput+0x94c>)
   1384c:	781b      	ldrb	r3, [r3, #0]
   1384e:	429a      	cmp	r2, r3
   13850:	d123      	bne.n	1389a <HandleUserInput+0x866>
				if(!LIGHTS_ON){
   13852:	4b4f      	ldr	r3, [pc, #316]	; (13990 <HandleUserInput+0x95c>)
   13854:	781b      	ldrb	r3, [r3, #0]
   13856:	2b00      	cmp	r3, #0
   13858:	d109      	bne.n	1386e <HandleUserInput+0x83a>
					HEADLIGHTS = false;
   1385a:	4b4f      	ldr	r3, [pc, #316]	; (13998 <HandleUserInput+0x964>)
   1385c:	2200      	movs	r2, #0
   1385e:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
   13860:	4b4e      	ldr	r3, [pc, #312]	; (1399c <HandleUserInput+0x968>)
   13862:	2201      	movs	r2, #1
   13864:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
   13866:	4b4a      	ldr	r3, [pc, #296]	; (13990 <HandleUserInput+0x95c>)
   13868:	2201      	movs	r2, #1
   1386a:	701a      	strb	r2, [r3, #0]
}
   1386c:	e081      	b.n	13972 <HandleUserInput+0x93e>
				else if(HEADLIGHTS)
   1386e:	4b4a      	ldr	r3, [pc, #296]	; (13998 <HandleUserInput+0x964>)
   13870:	781b      	ldrb	r3, [r3, #0]
   13872:	2b00      	cmp	r3, #0
   13874:	d008      	beq.n	13888 <HandleUserInput+0x854>
				SIDELIGHTS = !SIDELIGHTS;
   13876:	4b49      	ldr	r3, [pc, #292]	; (1399c <HandleUserInput+0x968>)
   13878:	781b      	ldrb	r3, [r3, #0]
   1387a:	425a      	negs	r2, r3
   1387c:	4153      	adcs	r3, r2
   1387e:	b2db      	uxtb	r3, r3
   13880:	001a      	movs	r2, r3
   13882:	4b46      	ldr	r3, [pc, #280]	; (1399c <HandleUserInput+0x968>)
   13884:	701a      	strb	r2, [r3, #0]
}
   13886:	e074      	b.n	13972 <HandleUserInput+0x93e>
				LIGHTS_ON = !LIGHTS_ON;
   13888:	4b41      	ldr	r3, [pc, #260]	; (13990 <HandleUserInput+0x95c>)
   1388a:	781b      	ldrb	r3, [r3, #0]
   1388c:	425a      	negs	r2, r3
   1388e:	4153      	adcs	r3, r2
   13890:	b2db      	uxtb	r3, r3
   13892:	001a      	movs	r2, r3
   13894:	4b3e      	ldr	r3, [pc, #248]	; (13990 <HandleUserInput+0x95c>)
   13896:	701a      	strb	r2, [r3, #0]
}
   13898:	e06b      	b.n	13972 <HandleUserInput+0x93e>
			else if(dual_down_control == ButtonPressType){
   1389a:	4b42      	ldr	r3, [pc, #264]	; (139a4 <HandleUserInput+0x970>)
   1389c:	781a      	ldrb	r2, [r3, #0]
   1389e:	4b38      	ldr	r3, [pc, #224]	; (13980 <HandleUserInput+0x94c>)
   138a0:	781b      	ldrb	r3, [r3, #0]
   138a2:	429a      	cmp	r2, r3
   138a4:	d110      	bne.n	138c8 <HandleUserInput+0x894>
				if(light_mode == 0)
   138a6:	4b37      	ldr	r3, [pc, #220]	; (13984 <HandleUserInput+0x950>)
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	2b00      	cmp	r3, #0
   138ac:	d105      	bne.n	138ba <HandleUserInput+0x886>
					light_mode = light_modes - 1;
   138ae:	2309      	movs	r3, #9
   138b0:	3b01      	subs	r3, #1
   138b2:	b2da      	uxtb	r2, r3
   138b4:	4b33      	ldr	r3, [pc, #204]	; (13984 <HandleUserInput+0x950>)
   138b6:	701a      	strb	r2, [r3, #0]
}
   138b8:	e05b      	b.n	13972 <HandleUserInput+0x93e>
					light_mode--;
   138ba:	4b32      	ldr	r3, [pc, #200]	; (13984 <HandleUserInput+0x950>)
   138bc:	781b      	ldrb	r3, [r3, #0]
   138be:	3b01      	subs	r3, #1
   138c0:	b2da      	uxtb	r2, r3
   138c2:	4b30      	ldr	r3, [pc, #192]	; (13984 <HandleUserInput+0x950>)
   138c4:	701a      	strb	r2, [r3, #0]
}
   138c6:	e054      	b.n	13972 <HandleUserInput+0x93e>
			else if(dual_up_control == ButtonPressType){
   138c8:	4b37      	ldr	r3, [pc, #220]	; (139a8 <HandleUserInput+0x974>)
   138ca:	781a      	ldrb	r2, [r3, #0]
   138cc:	4b2c      	ldr	r3, [pc, #176]	; (13980 <HandleUserInput+0x94c>)
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	429a      	cmp	r2, r3
   138d2:	d10e      	bne.n	138f2 <HandleUserInput+0x8be>
				light_mode++;
   138d4:	4b2b      	ldr	r3, [pc, #172]	; (13984 <HandleUserInput+0x950>)
   138d6:	781b      	ldrb	r3, [r3, #0]
   138d8:	3301      	adds	r3, #1
   138da:	b2da      	uxtb	r2, r3
   138dc:	4b29      	ldr	r3, [pc, #164]	; (13984 <HandleUserInput+0x950>)
   138de:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
   138e0:	4b28      	ldr	r3, [pc, #160]	; (13984 <HandleUserInput+0x950>)
   138e2:	781b      	ldrb	r3, [r3, #0]
   138e4:	2209      	movs	r2, #9
   138e6:	4293      	cmp	r3, r2
   138e8:	d343      	bcc.n	13972 <HandleUserInput+0x93e>
					light_mode = 0;
   138ea:	4b26      	ldr	r3, [pc, #152]	; (13984 <HandleUserInput+0x950>)
   138ec:	2200      	movs	r2, #0
   138ee:	701a      	strb	r2, [r3, #0]
}
   138f0:	e03f      	b.n	13972 <HandleUserInput+0x93e>
			else if(TURN_ENABLED == 1 && ButtonHeldTime > 500){
   138f2:	4b2e      	ldr	r3, [pc, #184]	; (139ac <HandleUserInput+0x978>)
   138f4:	781b      	ldrb	r3, [r3, #0]
   138f6:	2b00      	cmp	r3, #0
   138f8:	d02f      	beq.n	1395a <HandleUserInput+0x926>
   138fa:	4b2d      	ldr	r3, [pc, #180]	; (139b0 <HandleUserInput+0x97c>)
   138fc:	681a      	ldr	r2, [r3, #0]
   138fe:	23fa      	movs	r3, #250	; 0xfa
   13900:	005b      	lsls	r3, r3, #1
   13902:	429a      	cmp	r2, r3
   13904:	d929      	bls.n	1395a <HandleUserInput+0x926>
				if(VescRemoteX < 110){
   13906:	4b2b      	ldr	r3, [pc, #172]	; (139b4 <HandleUserInput+0x980>)
   13908:	781b      	ldrb	r3, [r3, #0]
   1390a:	2b6d      	cmp	r3, #109	; 0x6d
   1390c:	d810      	bhi.n	13930 <HandleUserInput+0x8fc>
					if(SIDELIGHTS)
   1390e:	4b23      	ldr	r3, [pc, #140]	; (1399c <HandleUserInput+0x968>)
   13910:	781b      	ldrb	r3, [r3, #0]
   13912:	2b00      	cmp	r3, #0
   13914:	d002      	beq.n	1391c <HandleUserInput+0x8e8>
						RestoreTurnLights = true;
   13916:	4b28      	ldr	r3, [pc, #160]	; (139b8 <HandleUserInput+0x984>)
   13918:	2201      	movs	r2, #1
   1391a:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
   1391c:	4b1f      	ldr	r3, [pc, #124]	; (1399c <HandleUserInput+0x968>)
   1391e:	2200      	movs	r2, #0
   13920:	701a      	strb	r2, [r3, #0]
					TurnSignalOn = true;
   13922:	4b26      	ldr	r3, [pc, #152]	; (139bc <HandleUserInput+0x988>)
   13924:	2201      	movs	r2, #1
   13926:	701a      	strb	r2, [r3, #0]
					TurnSignal(true);
   13928:	2001      	movs	r0, #1
   1392a:	4b25      	ldr	r3, [pc, #148]	; (139c0 <HandleUserInput+0x98c>)
   1392c:	4798      	blx	r3
				if(VescRemoteX < 110){
   1392e:	e01f      	b.n	13970 <HandleUserInput+0x93c>
				else if(VescRemoteX > 150){
   13930:	4b20      	ldr	r3, [pc, #128]	; (139b4 <HandleUserInput+0x980>)
   13932:	781b      	ldrb	r3, [r3, #0]
   13934:	2b96      	cmp	r3, #150	; 0x96
   13936:	d91b      	bls.n	13970 <HandleUserInput+0x93c>
					if(SIDELIGHTS)
   13938:	4b18      	ldr	r3, [pc, #96]	; (1399c <HandleUserInput+0x968>)
   1393a:	781b      	ldrb	r3, [r3, #0]
   1393c:	2b00      	cmp	r3, #0
   1393e:	d002      	beq.n	13946 <HandleUserInput+0x912>
						RestoreTurnLights = true;
   13940:	4b1d      	ldr	r3, [pc, #116]	; (139b8 <HandleUserInput+0x984>)
   13942:	2201      	movs	r2, #1
   13944:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
   13946:	4b15      	ldr	r3, [pc, #84]	; (1399c <HandleUserInput+0x968>)
   13948:	2200      	movs	r2, #0
   1394a:	701a      	strb	r2, [r3, #0]
					TurnSignalOn = true;
   1394c:	4b1b      	ldr	r3, [pc, #108]	; (139bc <HandleUserInput+0x988>)
   1394e:	2201      	movs	r2, #1
   13950:	701a      	strb	r2, [r3, #0]
					TurnSignal(false);
   13952:	2000      	movs	r0, #0
   13954:	4b1a      	ldr	r3, [pc, #104]	; (139c0 <HandleUserInput+0x98c>)
   13956:	4798      	blx	r3
				if(VescRemoteX < 110){
   13958:	e00a      	b.n	13970 <HandleUserInput+0x93c>
			else if(RestoreTurnLights){
   1395a:	4b17      	ldr	r3, [pc, #92]	; (139b8 <HandleUserInput+0x984>)
   1395c:	781b      	ldrb	r3, [r3, #0]
   1395e:	2b00      	cmp	r3, #0
   13960:	d007      	beq.n	13972 <HandleUserInput+0x93e>
				SIDELIGHTS = true;
   13962:	4b0e      	ldr	r3, [pc, #56]	; (1399c <HandleUserInput+0x968>)
   13964:	2201      	movs	r2, #1
   13966:	701a      	strb	r2, [r3, #0]
				RestoreTurnLights = false;
   13968:	4b13      	ldr	r3, [pc, #76]	; (139b8 <HandleUserInput+0x984>)
   1396a:	2200      	movs	r2, #0
   1396c:	701a      	strb	r2, [r3, #0]
}
   1396e:	e000      	b.n	13972 <HandleUserInput+0x93e>
				if(VescRemoteX < 110){
   13970:	46c0      	nop			; (mov r8, r8)
}
   13972:	46c0      	nop			; (mov r8, r8)
   13974:	46bd      	mov	sp, r7
   13976:	b003      	add	sp, #12
   13978:	bd90      	pop	{r4, r7, pc}
   1397a:	46c0      	nop			; (mov r8, r8)
   1397c:	2000040c 	.word	0x2000040c
   13980:	20000416 	.word	0x20000416
   13984:	20000034 	.word	0x20000034
   13988:	2000038c 	.word	0x2000038c
   1398c:	2000040f 	.word	0x2000040f
   13990:	200000cd 	.word	0x200000cd
   13994:	20000410 	.word	0x20000410
   13998:	2000036f 	.word	0x2000036f
   1399c:	200000cc 	.word	0x200000cc
   139a0:	20000411 	.word	0x20000411
   139a4:	20000413 	.word	0x20000413
   139a8:	20000412 	.word	0x20000412
   139ac:	20000403 	.word	0x20000403
   139b0:	2000041c 	.word	0x2000041c
   139b4:	20000400 	.word	0x20000400
   139b8:	2000042d 	.word	0x2000042d
   139bc:	2000042c 	.word	0x2000042c
   139c0:	0000a8d5 	.word	0x0000a8d5

000139c4 <HandleAppRemote>:

void HandleAppRemote(){
   139c4:	b580      	push	{r7, lr}
   139c6:	b082      	sub	sp, #8
   139c8:	af00      	add	r7, sp, #0
	send_chuck_struct.js_x = 0xFF/2;
   139ca:	4b36      	ldr	r3, [pc, #216]	; (13aa4 <HandleAppRemote+0xe0>)
   139cc:	227f      	movs	r2, #127	; 0x7f
   139ce:	701a      	strb	r2, [r3, #0]
	send_chuck_struct.bt_z = false;
   139d0:	4b34      	ldr	r3, [pc, #208]	; (13aa4 <HandleAppRemote+0xe0>)
   139d2:	2200      	movs	r2, #0
   139d4:	725a      	strb	r2, [r3, #9]
	send_chuck_struct.bt_c = false;
   139d6:	4b33      	ldr	r3, [pc, #204]	; (13aa4 <HandleAppRemote+0xe0>)
   139d8:	2200      	movs	r2, #0
   139da:	721a      	strb	r2, [r3, #8]
	send_chuck_struct.acc_x = 0;
   139dc:	4b31      	ldr	r3, [pc, #196]	; (13aa4 <HandleAppRemote+0xe0>)
   139de:	2200      	movs	r2, #0
   139e0:	805a      	strh	r2, [r3, #2]
	send_chuck_struct.acc_y = 0;
   139e2:	4b30      	ldr	r3, [pc, #192]	; (13aa4 <HandleAppRemote+0xe0>)
   139e4:	2200      	movs	r2, #0
   139e6:	809a      	strh	r2, [r3, #4]
	send_chuck_struct.acc_z = 0;
   139e8:	4b2e      	ldr	r3, [pc, #184]	; (13aa4 <HandleAppRemote+0xe0>)
   139ea:	2200      	movs	r2, #0
   139ec:	80da      	strh	r2, [r3, #6]
	
	uint32_t app_remote_soft_timeout = 100;
   139ee:	2364      	movs	r3, #100	; 0x64
   139f0:	607b      	str	r3, [r7, #4]
	uint32_t app_remote_hard_timeout = 500;
   139f2:	23fa      	movs	r3, #250	; 0xfa
   139f4:	005b      	lsls	r3, r3, #1
   139f6:	603b      	str	r3, [r7, #0]
	static uint32_t app_remote_time = 0;

	check_time(&app_remote_time);
   139f8:	4b2b      	ldr	r3, [pc, #172]	; (13aa8 <HandleAppRemote+0xe4>)
   139fa:	0018      	movs	r0, r3
   139fc:	4b2b      	ldr	r3, [pc, #172]	; (13aac <HandleAppRemote+0xe8>)
   139fe:	4798      	blx	r3
	if(NEW_REMOTE_DATA){
   13a00:	4b2b      	ldr	r3, [pc, #172]	; (13ab0 <HandleAppRemote+0xec>)
   13a02:	781b      	ldrb	r3, [r3, #0]
   13a04:	2b00      	cmp	r3, #0
   13a06:	d014      	beq.n	13a32 <HandleAppRemote+0x6e>
		send_chuck_struct.js_y = remote_y = AppRemoteY;
   13a08:	4b2a      	ldr	r3, [pc, #168]	; (13ab4 <HandleAppRemote+0xf0>)
   13a0a:	781a      	ldrb	r2, [r3, #0]
   13a0c:	4b2a      	ldr	r3, [pc, #168]	; (13ab8 <HandleAppRemote+0xf4>)
   13a0e:	701a      	strb	r2, [r3, #0]
   13a10:	4b29      	ldr	r3, [pc, #164]	; (13ab8 <HandleAppRemote+0xf4>)
   13a12:	781b      	ldrb	r3, [r3, #0]
   13a14:	b25a      	sxtb	r2, r3
   13a16:	4b23      	ldr	r3, [pc, #140]	; (13aa4 <HandleAppRemote+0xe0>)
   13a18:	705a      	strb	r2, [r3, #1]
		app_remote_time = millis();
   13a1a:	4b28      	ldr	r3, [pc, #160]	; (13abc <HandleAppRemote+0xf8>)
   13a1c:	4798      	blx	r3
   13a1e:	0002      	movs	r2, r0
   13a20:	4b21      	ldr	r3, [pc, #132]	; (13aa8 <HandleAppRemote+0xe4>)
   13a22:	601a      	str	r2, [r3, #0]
		NEW_REMOTE_DATA = false;
   13a24:	4b22      	ldr	r3, [pc, #136]	; (13ab0 <HandleAppRemote+0xec>)
   13a26:	2200      	movs	r2, #0
   13a28:	701a      	strb	r2, [r3, #0]
		SEND_VESC_CHUCK = true;
   13a2a:	4b25      	ldr	r3, [pc, #148]	; (13ac0 <HandleAppRemote+0xfc>)
   13a2c:	2201      	movs	r2, #1
   13a2e:	701a      	strb	r2, [r3, #0]
		SEND_VESC_CHUCK = true;
	}
	else{
		SEND_VESC_CHUCK = false;
	}
}
   13a30:	e034      	b.n	13a9c <HandleAppRemote+0xd8>
	} else if(SEND_VESC_CHUCK && millis()-app_remote_time <= app_remote_soft_timeout){
   13a32:	4b23      	ldr	r3, [pc, #140]	; (13ac0 <HandleAppRemote+0xfc>)
   13a34:	781b      	ldrb	r3, [r3, #0]
   13a36:	2b00      	cmp	r3, #0
   13a38:	d015      	beq.n	13a66 <HandleAppRemote+0xa2>
   13a3a:	4b20      	ldr	r3, [pc, #128]	; (13abc <HandleAppRemote+0xf8>)
   13a3c:	4798      	blx	r3
   13a3e:	0002      	movs	r2, r0
   13a40:	4b19      	ldr	r3, [pc, #100]	; (13aa8 <HandleAppRemote+0xe4>)
   13a42:	681b      	ldr	r3, [r3, #0]
   13a44:	1ad2      	subs	r2, r2, r3
   13a46:	687b      	ldr	r3, [r7, #4]
   13a48:	429a      	cmp	r2, r3
   13a4a:	d80c      	bhi.n	13a66 <HandleAppRemote+0xa2>
		send_chuck_struct.js_y = remote_y = AppRemoteY;
   13a4c:	4b19      	ldr	r3, [pc, #100]	; (13ab4 <HandleAppRemote+0xf0>)
   13a4e:	781a      	ldrb	r2, [r3, #0]
   13a50:	4b19      	ldr	r3, [pc, #100]	; (13ab8 <HandleAppRemote+0xf4>)
   13a52:	701a      	strb	r2, [r3, #0]
   13a54:	4b18      	ldr	r3, [pc, #96]	; (13ab8 <HandleAppRemote+0xf4>)
   13a56:	781b      	ldrb	r3, [r3, #0]
   13a58:	b25a      	sxtb	r2, r3
   13a5a:	4b12      	ldr	r3, [pc, #72]	; (13aa4 <HandleAppRemote+0xe0>)
   13a5c:	705a      	strb	r2, [r3, #1]
		SEND_VESC_CHUCK = true;
   13a5e:	4b18      	ldr	r3, [pc, #96]	; (13ac0 <HandleAppRemote+0xfc>)
   13a60:	2201      	movs	r2, #1
   13a62:	701a      	strb	r2, [r3, #0]
   13a64:	e01a      	b.n	13a9c <HandleAppRemote+0xd8>
	} else if(SEND_VESC_CHUCK && millis()-app_remote_time <= app_remote_hard_timeout){
   13a66:	4b16      	ldr	r3, [pc, #88]	; (13ac0 <HandleAppRemote+0xfc>)
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2b00      	cmp	r3, #0
   13a6c:	d012      	beq.n	13a94 <HandleAppRemote+0xd0>
   13a6e:	4b13      	ldr	r3, [pc, #76]	; (13abc <HandleAppRemote+0xf8>)
   13a70:	4798      	blx	r3
   13a72:	0002      	movs	r2, r0
   13a74:	4b0c      	ldr	r3, [pc, #48]	; (13aa8 <HandleAppRemote+0xe4>)
   13a76:	681b      	ldr	r3, [r3, #0]
   13a78:	1ad2      	subs	r2, r2, r3
   13a7a:	683b      	ldr	r3, [r7, #0]
   13a7c:	429a      	cmp	r2, r3
   13a7e:	d809      	bhi.n	13a94 <HandleAppRemote+0xd0>
		send_chuck_struct.js_y = remote_y = 0xFF/2;
   13a80:	4b0d      	ldr	r3, [pc, #52]	; (13ab8 <HandleAppRemote+0xf4>)
   13a82:	227f      	movs	r2, #127	; 0x7f
   13a84:	701a      	strb	r2, [r3, #0]
   13a86:	4b07      	ldr	r3, [pc, #28]	; (13aa4 <HandleAppRemote+0xe0>)
   13a88:	227f      	movs	r2, #127	; 0x7f
   13a8a:	705a      	strb	r2, [r3, #1]
		SEND_VESC_CHUCK = true;
   13a8c:	4b0c      	ldr	r3, [pc, #48]	; (13ac0 <HandleAppRemote+0xfc>)
   13a8e:	2201      	movs	r2, #1
   13a90:	701a      	strb	r2, [r3, #0]
   13a92:	e003      	b.n	13a9c <HandleAppRemote+0xd8>
		SEND_VESC_CHUCK = false;
   13a94:	4b0a      	ldr	r3, [pc, #40]	; (13ac0 <HandleAppRemote+0xfc>)
   13a96:	2200      	movs	r2, #0
   13a98:	701a      	strb	r2, [r3, #0]
}
   13a9a:	e7ff      	b.n	13a9c <HandleAppRemote+0xd8>
   13a9c:	46c0      	nop			; (mov r8, r8)
   13a9e:	46bd      	mov	sp, r7
   13aa0:	b002      	add	sp, #8
   13aa2:	bd80      	pop	{r7, pc}
   13aa4:	2000056c 	.word	0x2000056c
   13aa8:	20000488 	.word	0x20000488
   13aac:	00009f95 	.word	0x00009f95
   13ab0:	20000405 	.word	0x20000405
   13ab4:	200000f9 	.word	0x200000f9
   13ab8:	2000038e 	.word	0x2000038e
   13abc:	00009f65 	.word	0x00009f65
   13ac0:	200003f7 	.word	0x200003f7

00013ac4 <save_led_data>:


// EEPROM size needs to be set to 0x02


void save_led_data(){
   13ac4:	b590      	push	{r4, r7, lr}
   13ac6:	b085      	sub	sp, #20
   13ac8:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   13aca:	2300      	movs	r3, #0
   13acc:	60fb      	str	r3, [r7, #12]
   13ace:	e005      	b.n	13adc <save_led_data+0x18>
		eeprom_data[0] = 0;
   13ad0:	4bc2      	ldr	r3, [pc, #776]	; (13ddc <save_led_data+0x318>)
   13ad2:	2200      	movs	r2, #0
   13ad4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   13ad6:	68fb      	ldr	r3, [r7, #12]
   13ad8:	3301      	adds	r3, #1
   13ada:	60fb      	str	r3, [r7, #12]
   13adc:	68fb      	ldr	r3, [r7, #12]
   13ade:	2b3b      	cmp	r3, #59	; 0x3b
   13ae0:	ddf6      	ble.n	13ad0 <save_led_data+0xc>
	}

	eeprom_data[0] = SWITCHES;
   13ae2:	4bbf      	ldr	r3, [pc, #764]	; (13de0 <save_led_data+0x31c>)
   13ae4:	781a      	ldrb	r2, [r3, #0]
   13ae6:	4bbd      	ldr	r3, [pc, #756]	; (13ddc <save_led_data+0x318>)
   13ae8:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = light_mode;
   13aea:	4bbe      	ldr	r3, [pc, #760]	; (13de4 <save_led_data+0x320>)
   13aec:	781a      	ldrb	r2, [r3, #0]
   13aee:	4bbb      	ldr	r3, [pc, #748]	; (13ddc <save_led_data+0x318>)
   13af0:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = (Static_RGB.LR & 0xFF);
   13af2:	4bbd      	ldr	r3, [pc, #756]	; (13de8 <save_led_data+0x324>)
   13af4:	881b      	ldrh	r3, [r3, #0]
   13af6:	b2da      	uxtb	r2, r3
   13af8:	4bb8      	ldr	r3, [pc, #736]	; (13ddc <save_led_data+0x318>)
   13afa:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (Static_RGB.LR & 0xFF00) >> 8;
   13afc:	4bba      	ldr	r3, [pc, #744]	; (13de8 <save_led_data+0x324>)
   13afe:	881b      	ldrh	r3, [r3, #0]
   13b00:	0a1b      	lsrs	r3, r3, #8
   13b02:	b29b      	uxth	r3, r3
   13b04:	b2da      	uxtb	r2, r3
   13b06:	4bb5      	ldr	r3, [pc, #724]	; (13ddc <save_led_data+0x318>)
   13b08:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (Static_RGB.LG & 0xFF);
   13b0a:	4bb7      	ldr	r3, [pc, #732]	; (13de8 <save_led_data+0x324>)
   13b0c:	885b      	ldrh	r3, [r3, #2]
   13b0e:	b2da      	uxtb	r2, r3
   13b10:	4bb2      	ldr	r3, [pc, #712]	; (13ddc <save_led_data+0x318>)
   13b12:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Static_RGB.LG & 0xFF00) >> 8;
   13b14:	4bb4      	ldr	r3, [pc, #720]	; (13de8 <save_led_data+0x324>)
   13b16:	885b      	ldrh	r3, [r3, #2]
   13b18:	0a1b      	lsrs	r3, r3, #8
   13b1a:	b29b      	uxth	r3, r3
   13b1c:	b2da      	uxtb	r2, r3
   13b1e:	4baf      	ldr	r3, [pc, #700]	; (13ddc <save_led_data+0x318>)
   13b20:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Static_RGB.LB & 0xFF);
   13b22:	4bb1      	ldr	r3, [pc, #708]	; (13de8 <save_led_data+0x324>)
   13b24:	889b      	ldrh	r3, [r3, #4]
   13b26:	b2da      	uxtb	r2, r3
   13b28:	4bac      	ldr	r3, [pc, #688]	; (13ddc <save_led_data+0x318>)
   13b2a:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Static_RGB.LB & 0xFF00) >> 8;
   13b2c:	4bae      	ldr	r3, [pc, #696]	; (13de8 <save_led_data+0x324>)
   13b2e:	889b      	ldrh	r3, [r3, #4]
   13b30:	0a1b      	lsrs	r3, r3, #8
   13b32:	b29b      	uxth	r3, r3
   13b34:	b2da      	uxtb	r2, r3
   13b36:	4ba9      	ldr	r3, [pc, #676]	; (13ddc <save_led_data+0x318>)
   13b38:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Static_RGB.RR & 0xFF);
   13b3a:	4bab      	ldr	r3, [pc, #684]	; (13de8 <save_led_data+0x324>)
   13b3c:	88db      	ldrh	r3, [r3, #6]
   13b3e:	b2da      	uxtb	r2, r3
   13b40:	4ba6      	ldr	r3, [pc, #664]	; (13ddc <save_led_data+0x318>)
   13b42:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Static_RGB.RR & 0xFF00) >> 8;
   13b44:	4ba8      	ldr	r3, [pc, #672]	; (13de8 <save_led_data+0x324>)
   13b46:	88db      	ldrh	r3, [r3, #6]
   13b48:	0a1b      	lsrs	r3, r3, #8
   13b4a:	b29b      	uxth	r3, r3
   13b4c:	b2da      	uxtb	r2, r3
   13b4e:	4ba3      	ldr	r3, [pc, #652]	; (13ddc <save_led_data+0x318>)
   13b50:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Static_RGB.RG & 0xFF);
   13b52:	4ba5      	ldr	r3, [pc, #660]	; (13de8 <save_led_data+0x324>)
   13b54:	891b      	ldrh	r3, [r3, #8]
   13b56:	b2da      	uxtb	r2, r3
   13b58:	4ba0      	ldr	r3, [pc, #640]	; (13ddc <save_led_data+0x318>)
   13b5a:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Static_RGB.RG & 0xFF00) >> 8;
   13b5c:	4ba2      	ldr	r3, [pc, #648]	; (13de8 <save_led_data+0x324>)
   13b5e:	891b      	ldrh	r3, [r3, #8]
   13b60:	0a1b      	lsrs	r3, r3, #8
   13b62:	b29b      	uxth	r3, r3
   13b64:	b2da      	uxtb	r2, r3
   13b66:	4b9d      	ldr	r3, [pc, #628]	; (13ddc <save_led_data+0x318>)
   13b68:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Static_RGB.RB & 0xFF);
   13b6a:	4b9f      	ldr	r3, [pc, #636]	; (13de8 <save_led_data+0x324>)
   13b6c:	895b      	ldrh	r3, [r3, #10]
   13b6e:	b2da      	uxtb	r2, r3
   13b70:	4b9a      	ldr	r3, [pc, #616]	; (13ddc <save_led_data+0x318>)
   13b72:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Static_RGB.RB & 0xFF00) >> 8;
   13b74:	4b9c      	ldr	r3, [pc, #624]	; (13de8 <save_led_data+0x324>)
   13b76:	895b      	ldrh	r3, [r3, #10]
   13b78:	0a1b      	lsrs	r3, r3, #8
   13b7a:	b29b      	uxth	r3, r3
   13b7c:	b2da      	uxtb	r2, r3
   13b7e:	4b97      	ldr	r3, [pc, #604]	; (13ddc <save_led_data+0x318>)
   13b80:	735a      	strb	r2, [r3, #13]
	int dataOffset = 14;
   13b82:	230e      	movs	r3, #14
   13b84:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++){
   13b86:	2300      	movs	r3, #0
   13b88:	60bb      	str	r3, [r7, #8]
   13b8a:	e058      	b.n	13c3e <save_led_data+0x17a>
		eeprom_data[dataOffset + (i*5)] = ColorBase[i];
   13b8c:	68ba      	ldr	r2, [r7, #8]
   13b8e:	0013      	movs	r3, r2
   13b90:	009b      	lsls	r3, r3, #2
   13b92:	189a      	adds	r2, r3, r2
   13b94:	683b      	ldr	r3, [r7, #0]
   13b96:	18d3      	adds	r3, r2, r3
   13b98:	4994      	ldr	r1, [pc, #592]	; (13dec <save_led_data+0x328>)
   13b9a:	68ba      	ldr	r2, [r7, #8]
   13b9c:	188a      	adds	r2, r1, r2
   13b9e:	7811      	ldrb	r1, [r2, #0]
   13ba0:	4a8e      	ldr	r2, [pc, #568]	; (13ddc <save_led_data+0x318>)
   13ba2:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+1] = BrightBase[i];
   13ba4:	68ba      	ldr	r2, [r7, #8]
   13ba6:	0013      	movs	r3, r2
   13ba8:	009b      	lsls	r3, r3, #2
   13baa:	189a      	adds	r2, r3, r2
   13bac:	683b      	ldr	r3, [r7, #0]
   13bae:	18d3      	adds	r3, r2, r3
   13bb0:	3301      	adds	r3, #1
   13bb2:	498f      	ldr	r1, [pc, #572]	; (13df0 <save_led_data+0x32c>)
   13bb4:	68ba      	ldr	r2, [r7, #8]
   13bb6:	188a      	adds	r2, r1, r2
   13bb8:	7811      	ldrb	r1, [r2, #0]
   13bba:	4a88      	ldr	r2, [pc, #544]	; (13ddc <save_led_data+0x318>)
   13bbc:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+2] = RateBase[i];
   13bbe:	68ba      	ldr	r2, [r7, #8]
   13bc0:	0013      	movs	r3, r2
   13bc2:	009b      	lsls	r3, r3, #2
   13bc4:	189a      	adds	r2, r3, r2
   13bc6:	683b      	ldr	r3, [r7, #0]
   13bc8:	18d3      	adds	r3, r2, r3
   13bca:	3302      	adds	r3, #2
   13bcc:	4989      	ldr	r1, [pc, #548]	; (13df4 <save_led_data+0x330>)
   13bce:	68ba      	ldr	r2, [r7, #8]
   13bd0:	188a      	adds	r2, r1, r2
   13bd2:	7811      	ldrb	r1, [r2, #0]
   13bd4:	4a81      	ldr	r2, [pc, #516]	; (13ddc <save_led_data+0x318>)
   13bd6:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+3] = (uint8_t)(RateSens[i]*100);
   13bd8:	68ba      	ldr	r2, [r7, #8]
   13bda:	0013      	movs	r3, r2
   13bdc:	009b      	lsls	r3, r3, #2
   13bde:	189a      	adds	r2, r3, r2
   13be0:	683b      	ldr	r3, [r7, #0]
   13be2:	18d3      	adds	r3, r2, r3
   13be4:	1cdc      	adds	r4, r3, #3
   13be6:	4b84      	ldr	r3, [pc, #528]	; (13df8 <save_led_data+0x334>)
   13be8:	68ba      	ldr	r2, [r7, #8]
   13bea:	0092      	lsls	r2, r2, #2
   13bec:	58d2      	ldr	r2, [r2, r3]
   13bee:	4b83      	ldr	r3, [pc, #524]	; (13dfc <save_led_data+0x338>)
   13bf0:	4983      	ldr	r1, [pc, #524]	; (13e00 <save_led_data+0x33c>)
   13bf2:	1c10      	adds	r0, r2, #0
   13bf4:	4798      	blx	r3
   13bf6:	1c03      	adds	r3, r0, #0
   13bf8:	1c1a      	adds	r2, r3, #0
   13bfa:	4b82      	ldr	r3, [pc, #520]	; (13e04 <save_led_data+0x340>)
   13bfc:	1c10      	adds	r0, r2, #0
   13bfe:	4798      	blx	r3
   13c00:	0003      	movs	r3, r0
   13c02:	b2da      	uxtb	r2, r3
   13c04:	4b75      	ldr	r3, [pc, #468]	; (13ddc <save_led_data+0x318>)
   13c06:	551a      	strb	r2, [r3, r4]
		eeprom_data[dataOffset + (i*5)+4] = (uint8_t)(Brightness[i]*100);
   13c08:	68ba      	ldr	r2, [r7, #8]
   13c0a:	0013      	movs	r3, r2
   13c0c:	009b      	lsls	r3, r3, #2
   13c0e:	189a      	adds	r2, r3, r2
   13c10:	683b      	ldr	r3, [r7, #0]
   13c12:	18d3      	adds	r3, r2, r3
   13c14:	1d1c      	adds	r4, r3, #4
   13c16:	4b7c      	ldr	r3, [pc, #496]	; (13e08 <save_led_data+0x344>)
   13c18:	68ba      	ldr	r2, [r7, #8]
   13c1a:	0092      	lsls	r2, r2, #2
   13c1c:	58d2      	ldr	r2, [r2, r3]
   13c1e:	4b77      	ldr	r3, [pc, #476]	; (13dfc <save_led_data+0x338>)
   13c20:	4977      	ldr	r1, [pc, #476]	; (13e00 <save_led_data+0x33c>)
   13c22:	1c10      	adds	r0, r2, #0
   13c24:	4798      	blx	r3
   13c26:	1c03      	adds	r3, r0, #0
   13c28:	1c1a      	adds	r2, r3, #0
   13c2a:	4b76      	ldr	r3, [pc, #472]	; (13e04 <save_led_data+0x340>)
   13c2c:	1c10      	adds	r0, r2, #0
   13c2e:	4798      	blx	r3
   13c30:	0003      	movs	r3, r0
   13c32:	b2da      	uxtb	r2, r3
   13c34:	4b69      	ldr	r3, [pc, #420]	; (13ddc <save_led_data+0x318>)
   13c36:	551a      	strb	r2, [r3, r4]
	for(int i = 0; i < 8; i++){
   13c38:	68bb      	ldr	r3, [r7, #8]
   13c3a:	3301      	adds	r3, #1
   13c3c:	60bb      	str	r3, [r7, #8]
   13c3e:	68bb      	ldr	r3, [r7, #8]
   13c40:	2b07      	cmp	r3, #7
   13c42:	dda3      	ble.n	13b8c <save_led_data+0xc8>
	}

	eeprom_emulator_write_page(0, eeprom_data);
   13c44:	4b65      	ldr	r3, [pc, #404]	; (13ddc <save_led_data+0x318>)
   13c46:	0019      	movs	r1, r3
   13c48:	2000      	movs	r0, #0
   13c4a:	4b70      	ldr	r3, [pc, #448]	; (13e0c <save_led_data+0x348>)
   13c4c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   13c4e:	4b70      	ldr	r3, [pc, #448]	; (13e10 <save_led_data+0x34c>)
   13c50:	4798      	blx	r3

	
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   13c52:	2300      	movs	r3, #0
   13c54:	607b      	str	r3, [r7, #4]
   13c56:	e005      	b.n	13c64 <save_led_data+0x1a0>
		eeprom_data[0] = 0;
   13c58:	4b60      	ldr	r3, [pc, #384]	; (13ddc <save_led_data+0x318>)
   13c5a:	2200      	movs	r2, #0
   13c5c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   13c5e:	687b      	ldr	r3, [r7, #4]
   13c60:	3301      	adds	r3, #1
   13c62:	607b      	str	r3, [r7, #4]
   13c64:	687b      	ldr	r3, [r7, #4]
   13c66:	2b3b      	cmp	r3, #59	; 0x3b
   13c68:	ddf6      	ble.n	13c58 <save_led_data+0x194>
	}
	
	eeprom_data[0] = ColorBase[8];
   13c6a:	4b60      	ldr	r3, [pc, #384]	; (13dec <save_led_data+0x328>)
   13c6c:	7a1a      	ldrb	r2, [r3, #8]
   13c6e:	4b5b      	ldr	r3, [pc, #364]	; (13ddc <save_led_data+0x318>)
   13c70:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = BrightBase[8];
   13c72:	4b5f      	ldr	r3, [pc, #380]	; (13df0 <save_led_data+0x32c>)
   13c74:	7a1a      	ldrb	r2, [r3, #8]
   13c76:	4b59      	ldr	r3, [pc, #356]	; (13ddc <save_led_data+0x318>)
   13c78:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = RateBase[8];
   13c7a:	4b5e      	ldr	r3, [pc, #376]	; (13df4 <save_led_data+0x330>)
   13c7c:	7a1a      	ldrb	r2, [r3, #8]
   13c7e:	4b57      	ldr	r3, [pc, #348]	; (13ddc <save_led_data+0x318>)
   13c80:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (uint8_t)(RateSens[8]*100);
   13c82:	4b5d      	ldr	r3, [pc, #372]	; (13df8 <save_led_data+0x334>)
   13c84:	6a1a      	ldr	r2, [r3, #32]
   13c86:	4b5d      	ldr	r3, [pc, #372]	; (13dfc <save_led_data+0x338>)
   13c88:	495d      	ldr	r1, [pc, #372]	; (13e00 <save_led_data+0x33c>)
   13c8a:	1c10      	adds	r0, r2, #0
   13c8c:	4798      	blx	r3
   13c8e:	1c03      	adds	r3, r0, #0
   13c90:	1c1a      	adds	r2, r3, #0
   13c92:	4b5c      	ldr	r3, [pc, #368]	; (13e04 <save_led_data+0x340>)
   13c94:	1c10      	adds	r0, r2, #0
   13c96:	4798      	blx	r3
   13c98:	0003      	movs	r3, r0
   13c9a:	b2da      	uxtb	r2, r3
   13c9c:	4b4f      	ldr	r3, [pc, #316]	; (13ddc <save_led_data+0x318>)
   13c9e:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (uint8_t)(Brightness[8]*100);
   13ca0:	4b59      	ldr	r3, [pc, #356]	; (13e08 <save_led_data+0x344>)
   13ca2:	6a1a      	ldr	r2, [r3, #32]
   13ca4:	4b55      	ldr	r3, [pc, #340]	; (13dfc <save_led_data+0x338>)
   13ca6:	4956      	ldr	r1, [pc, #344]	; (13e00 <save_led_data+0x33c>)
   13ca8:	1c10      	adds	r0, r2, #0
   13caa:	4798      	blx	r3
   13cac:	1c03      	adds	r3, r0, #0
   13cae:	1c1a      	adds	r2, r3, #0
   13cb0:	4b54      	ldr	r3, [pc, #336]	; (13e04 <save_led_data+0x340>)
   13cb2:	1c10      	adds	r0, r2, #0
   13cb4:	4798      	blx	r3
   13cb6:	0003      	movs	r3, r0
   13cb8:	b2da      	uxtb	r2, r3
   13cba:	4b48      	ldr	r3, [pc, #288]	; (13ddc <save_led_data+0x318>)
   13cbc:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Custom_RGB.LR & 0xFF);
   13cbe:	4b55      	ldr	r3, [pc, #340]	; (13e14 <save_led_data+0x350>)
   13cc0:	881b      	ldrh	r3, [r3, #0]
   13cc2:	b2da      	uxtb	r2, r3
   13cc4:	4b45      	ldr	r3, [pc, #276]	; (13ddc <save_led_data+0x318>)
   13cc6:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Custom_RGB.LR & 0xFF00) >> 8;
   13cc8:	4b52      	ldr	r3, [pc, #328]	; (13e14 <save_led_data+0x350>)
   13cca:	881b      	ldrh	r3, [r3, #0]
   13ccc:	0a1b      	lsrs	r3, r3, #8
   13cce:	b29b      	uxth	r3, r3
   13cd0:	b2da      	uxtb	r2, r3
   13cd2:	4b42      	ldr	r3, [pc, #264]	; (13ddc <save_led_data+0x318>)
   13cd4:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Custom_RGB.LG & 0xFF);
   13cd6:	4b4f      	ldr	r3, [pc, #316]	; (13e14 <save_led_data+0x350>)
   13cd8:	885b      	ldrh	r3, [r3, #2]
   13cda:	b2da      	uxtb	r2, r3
   13cdc:	4b3f      	ldr	r3, [pc, #252]	; (13ddc <save_led_data+0x318>)
   13cde:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Custom_RGB.LG & 0xFF00) >> 8;
   13ce0:	4b4c      	ldr	r3, [pc, #304]	; (13e14 <save_led_data+0x350>)
   13ce2:	885b      	ldrh	r3, [r3, #2]
   13ce4:	0a1b      	lsrs	r3, r3, #8
   13ce6:	b29b      	uxth	r3, r3
   13ce8:	b2da      	uxtb	r2, r3
   13cea:	4b3c      	ldr	r3, [pc, #240]	; (13ddc <save_led_data+0x318>)
   13cec:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Custom_RGB.LB & 0xFF);
   13cee:	4b49      	ldr	r3, [pc, #292]	; (13e14 <save_led_data+0x350>)
   13cf0:	889b      	ldrh	r3, [r3, #4]
   13cf2:	b2da      	uxtb	r2, r3
   13cf4:	4b39      	ldr	r3, [pc, #228]	; (13ddc <save_led_data+0x318>)
   13cf6:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Custom_RGB.LB & 0xFF00) >> 8;
   13cf8:	4b46      	ldr	r3, [pc, #280]	; (13e14 <save_led_data+0x350>)
   13cfa:	889b      	ldrh	r3, [r3, #4]
   13cfc:	0a1b      	lsrs	r3, r3, #8
   13cfe:	b29b      	uxth	r3, r3
   13d00:	b2da      	uxtb	r2, r3
   13d02:	4b36      	ldr	r3, [pc, #216]	; (13ddc <save_led_data+0x318>)
   13d04:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Custom_RGB.RR & 0xFF);
   13d06:	4b43      	ldr	r3, [pc, #268]	; (13e14 <save_led_data+0x350>)
   13d08:	88db      	ldrh	r3, [r3, #6]
   13d0a:	b2da      	uxtb	r2, r3
   13d0c:	4b33      	ldr	r3, [pc, #204]	; (13ddc <save_led_data+0x318>)
   13d0e:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Custom_RGB.RR & 0xFF00) >> 8;
   13d10:	4b40      	ldr	r3, [pc, #256]	; (13e14 <save_led_data+0x350>)
   13d12:	88db      	ldrh	r3, [r3, #6]
   13d14:	0a1b      	lsrs	r3, r3, #8
   13d16:	b29b      	uxth	r3, r3
   13d18:	b2da      	uxtb	r2, r3
   13d1a:	4b30      	ldr	r3, [pc, #192]	; (13ddc <save_led_data+0x318>)
   13d1c:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Custom_RGB.RG & 0xFF);
   13d1e:	4b3d      	ldr	r3, [pc, #244]	; (13e14 <save_led_data+0x350>)
   13d20:	891b      	ldrh	r3, [r3, #8]
   13d22:	b2da      	uxtb	r2, r3
   13d24:	4b2d      	ldr	r3, [pc, #180]	; (13ddc <save_led_data+0x318>)
   13d26:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = (Custom_RGB.RG & 0xFF00) >> 8;
   13d28:	4b3a      	ldr	r3, [pc, #232]	; (13e14 <save_led_data+0x350>)
   13d2a:	891b      	ldrh	r3, [r3, #8]
   13d2c:	0a1b      	lsrs	r3, r3, #8
   13d2e:	b29b      	uxth	r3, r3
   13d30:	b2da      	uxtb	r2, r3
   13d32:	4b2a      	ldr	r3, [pc, #168]	; (13ddc <save_led_data+0x318>)
   13d34:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = (Custom_RGB.RB & 0xFF);
   13d36:	4b37      	ldr	r3, [pc, #220]	; (13e14 <save_led_data+0x350>)
   13d38:	895b      	ldrh	r3, [r3, #10]
   13d3a:	b2da      	uxtb	r2, r3
   13d3c:	4b27      	ldr	r3, [pc, #156]	; (13ddc <save_led_data+0x318>)
   13d3e:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = (Custom_RGB.RB & 0xFF00) >> 8;
   13d40:	4b34      	ldr	r3, [pc, #208]	; (13e14 <save_led_data+0x350>)
   13d42:	895b      	ldrh	r3, [r3, #10]
   13d44:	0a1b      	lsrs	r3, r3, #8
   13d46:	b29b      	uxth	r3, r3
   13d48:	b2da      	uxtb	r2, r3
   13d4a:	4b24      	ldr	r3, [pc, #144]	; (13ddc <save_led_data+0x318>)
   13d4c:	741a      	strb	r2, [r3, #16]

	eeprom_data[17] = Digital_Static_Zoom;
   13d4e:	4b32      	ldr	r3, [pc, #200]	; (13e18 <save_led_data+0x354>)
   13d50:	781a      	ldrb	r2, [r3, #0]
   13d52:	4b22      	ldr	r3, [pc, #136]	; (13ddc <save_led_data+0x318>)
   13d54:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = Digital_Static_Shift;
   13d56:	4b31      	ldr	r3, [pc, #196]	; (13e1c <save_led_data+0x358>)
   13d58:	781a      	ldrb	r2, [r3, #0]
   13d5a:	4b20      	ldr	r3, [pc, #128]	; (13ddc <save_led_data+0x318>)
   13d5c:	749a      	strb	r2, [r3, #18]
	eeprom_data[19] = Digital_Static_Brightness;
   13d5e:	4b30      	ldr	r3, [pc, #192]	; (13e20 <save_led_data+0x35c>)
   13d60:	781a      	ldrb	r2, [r3, #0]
   13d62:	4b1e      	ldr	r3, [pc, #120]	; (13ddc <save_led_data+0x318>)
   13d64:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = Digital_Skittles_Brightness;
   13d66:	4b2f      	ldr	r3, [pc, #188]	; (13e24 <save_led_data+0x360>)
   13d68:	781a      	ldrb	r2, [r3, #0]
   13d6a:	4b1c      	ldr	r3, [pc, #112]	; (13ddc <save_led_data+0x318>)
   13d6c:	751a      	strb	r2, [r3, #20]
	eeprom_data[21] = Digital_Cycle_Zoom;
   13d6e:	4b2e      	ldr	r3, [pc, #184]	; (13e28 <save_led_data+0x364>)
   13d70:	781a      	ldrb	r2, [r3, #0]
   13d72:	4b1a      	ldr	r3, [pc, #104]	; (13ddc <save_led_data+0x318>)
   13d74:	755a      	strb	r2, [r3, #21]
	eeprom_data[22] = Digital_Cycle_Rate;
   13d76:	4b2d      	ldr	r3, [pc, #180]	; (13e2c <save_led_data+0x368>)
   13d78:	781a      	ldrb	r2, [r3, #0]
   13d7a:	4b18      	ldr	r3, [pc, #96]	; (13ddc <save_led_data+0x318>)
   13d7c:	759a      	strb	r2, [r3, #22]
	eeprom_data[23] = Digital_Cycle_Brightness;
   13d7e:	4b2c      	ldr	r3, [pc, #176]	; (13e30 <save_led_data+0x36c>)
   13d80:	781a      	ldrb	r2, [r3, #0]
   13d82:	4b16      	ldr	r3, [pc, #88]	; (13ddc <save_led_data+0x318>)
   13d84:	75da      	strb	r2, [r3, #23]
	eeprom_data[24] = Digital_Compass_Brightness;
   13d86:	4b2b      	ldr	r3, [pc, #172]	; (13e34 <save_led_data+0x370>)
   13d88:	781a      	ldrb	r2, [r3, #0]
   13d8a:	4b14      	ldr	r3, [pc, #80]	; (13ddc <save_led_data+0x318>)
   13d8c:	761a      	strb	r2, [r3, #24]
	eeprom_data[25] = Digital_Throttle_Zoom;
   13d8e:	4b2a      	ldr	r3, [pc, #168]	; (13e38 <save_led_data+0x374>)
   13d90:	781a      	ldrb	r2, [r3, #0]
   13d92:	4b12      	ldr	r3, [pc, #72]	; (13ddc <save_led_data+0x318>)
   13d94:	765a      	strb	r2, [r3, #25]
	eeprom_data[26] = Digital_Throttle_Shift;
   13d96:	4b29      	ldr	r3, [pc, #164]	; (13e3c <save_led_data+0x378>)
   13d98:	781a      	ldrb	r2, [r3, #0]
   13d9a:	4b10      	ldr	r3, [pc, #64]	; (13ddc <save_led_data+0x318>)
   13d9c:	769a      	strb	r2, [r3, #26]
	eeprom_data[27] = Digital_Throttle_Sens;
   13d9e:	4b28      	ldr	r3, [pc, #160]	; (13e40 <save_led_data+0x37c>)
   13da0:	781a      	ldrb	r2, [r3, #0]
   13da2:	4b0e      	ldr	r3, [pc, #56]	; (13ddc <save_led_data+0x318>)
   13da4:	76da      	strb	r2, [r3, #27]
	eeprom_data[28] = Digital_Throttle_Brightness;
   13da6:	4b27      	ldr	r3, [pc, #156]	; (13e44 <save_led_data+0x380>)
   13da8:	781a      	ldrb	r2, [r3, #0]
   13daa:	4b0c      	ldr	r3, [pc, #48]	; (13ddc <save_led_data+0x318>)
   13dac:	771a      	strb	r2, [r3, #28]
	eeprom_data[29] = Digital_RPM_Zoom;
   13dae:	4b26      	ldr	r3, [pc, #152]	; (13e48 <save_led_data+0x384>)
   13db0:	781a      	ldrb	r2, [r3, #0]
   13db2:	4b0a      	ldr	r3, [pc, #40]	; (13ddc <save_led_data+0x318>)
   13db4:	775a      	strb	r2, [r3, #29]
	eeprom_data[30] = Digital_RPM_Rate;
   13db6:	4b25      	ldr	r3, [pc, #148]	; (13e4c <save_led_data+0x388>)
   13db8:	781a      	ldrb	r2, [r3, #0]
   13dba:	4b08      	ldr	r3, [pc, #32]	; (13ddc <save_led_data+0x318>)
   13dbc:	779a      	strb	r2, [r3, #30]
	eeprom_data[31] = Digital_RPM_Brightness;
   13dbe:	4b24      	ldr	r3, [pc, #144]	; (13e50 <save_led_data+0x38c>)
   13dc0:	781a      	ldrb	r2, [r3, #0]
   13dc2:	4b06      	ldr	r3, [pc, #24]	; (13ddc <save_led_data+0x318>)
   13dc4:	77da      	strb	r2, [r3, #31]

	eeprom_emulator_write_page(1, eeprom_data);
   13dc6:	4b05      	ldr	r3, [pc, #20]	; (13ddc <save_led_data+0x318>)
   13dc8:	0019      	movs	r1, r3
   13dca:	2001      	movs	r0, #1
   13dcc:	4b0f      	ldr	r3, [pc, #60]	; (13e0c <save_led_data+0x348>)
   13dce:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   13dd0:	4b0f      	ldr	r3, [pc, #60]	; (13e10 <save_led_data+0x34c>)
   13dd2:	4798      	blx	r3
}
   13dd4:	46c0      	nop			; (mov r8, r8)
   13dd6:	46bd      	mov	sp, r7
   13dd8:	b005      	add	sp, #20
   13dda:	bd90      	pop	{r4, r7, pc}
   13ddc:	20001000 	.word	0x20001000
   13de0:	20000372 	.word	0x20000372
   13de4:	20000034 	.word	0x20000034
   13de8:	20000038 	.word	0x20000038
   13dec:	2000008c 	.word	0x2000008c
   13df0:	20000098 	.word	0x20000098
   13df4:	200000a4 	.word	0x200000a4
   13df8:	20000044 	.word	0x20000044
   13dfc:	00018fad 	.word	0x00018fad
   13e00:	42c80000 	.word	0x42c80000
   13e04:	0001883d 	.word	0x0001883d
   13e08:	20000068 	.word	0x20000068
   13e0c:	000091f5 	.word	0x000091f5
   13e10:	0000939d 	.word	0x0000939d
   13e14:	200000bc 	.word	0x200000bc
   13e18:	200000ad 	.word	0x200000ad
   13e1c:	200000ae 	.word	0x200000ae
   13e20:	200000af 	.word	0x200000af
   13e24:	200000b0 	.word	0x200000b0
   13e28:	200000b1 	.word	0x200000b1
   13e2c:	200000b2 	.word	0x200000b2
   13e30:	200000b3 	.word	0x200000b3
   13e34:	200000b4 	.word	0x200000b4
   13e38:	200000b5 	.word	0x200000b5
   13e3c:	200000b6 	.word	0x200000b6
   13e40:	200000b7 	.word	0x200000b7
   13e44:	200000b8 	.word	0x200000b8
   13e48:	200000b9 	.word	0x200000b9
   13e4c:	200000ba 	.word	0x200000ba
   13e50:	200000bb 	.word	0x200000bb

00013e54 <restore_led_data>:

void restore_led_data(){
   13e54:	b590      	push	{r4, r7, lr}
   13e56:	b09f      	sub	sp, #124	; 0x7c
   13e58:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(0, eeprom_data);
   13e5a:	4bc0      	ldr	r3, [pc, #768]	; (1415c <restore_led_data+0x308>)
   13e5c:	0019      	movs	r1, r3
   13e5e:	2000      	movs	r0, #0
   13e60:	4bbf      	ldr	r3, [pc, #764]	; (14160 <restore_led_data+0x30c>)
   13e62:	4798      	blx	r3
	
	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   13e64:	4bbd      	ldr	r3, [pc, #756]	; (1415c <restore_led_data+0x308>)
   13e66:	781b      	ldrb	r3, [r3, #0]
   13e68:	2bff      	cmp	r3, #255	; 0xff
   13e6a:	d000      	beq.n	13e6e <restore_led_data+0x1a>
   13e6c:	e0e1      	b.n	14032 <restore_led_data+0x1de>
   13e6e:	4bbb      	ldr	r3, [pc, #748]	; (1415c <restore_led_data+0x308>)
   13e70:	785b      	ldrb	r3, [r3, #1]
   13e72:	2bff      	cmp	r3, #255	; 0xff
   13e74:	d000      	beq.n	13e78 <restore_led_data+0x24>
   13e76:	e0dc      	b.n	14032 <restore_led_data+0x1de>
		SWITCHES = 0x30; // SIDE: on	HEAD: on	LIGHT: disable	IMU: disable
   13e78:	4bba      	ldr	r3, [pc, #744]	; (14164 <restore_led_data+0x310>)
   13e7a:	2230      	movs	r2, #48	; 0x30
   13e7c:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   13e7e:	4bb9      	ldr	r3, [pc, #740]	; (14164 <restore_led_data+0x310>)
   13e80:	781b      	ldrb	r3, [r3, #0]
   13e82:	111b      	asrs	r3, r3, #4
   13e84:	b2db      	uxtb	r3, r3
   13e86:	2201      	movs	r2, #1
   13e88:	4013      	ands	r3, r2
   13e8a:	b2da      	uxtb	r2, r3
   13e8c:	4bb6      	ldr	r3, [pc, #728]	; (14168 <restore_led_data+0x314>)
   13e8e:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   13e90:	4bb4      	ldr	r3, [pc, #720]	; (14164 <restore_led_data+0x310>)
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	115b      	asrs	r3, r3, #5
   13e96:	b2db      	uxtb	r3, r3
   13e98:	2201      	movs	r2, #1
   13e9a:	4013      	ands	r3, r2
   13e9c:	b2da      	uxtb	r2, r3
   13e9e:	4bb3      	ldr	r3, [pc, #716]	; (1416c <restore_led_data+0x318>)
   13ea0:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   13ea2:	4bb0      	ldr	r3, [pc, #704]	; (14164 <restore_led_data+0x310>)
   13ea4:	781b      	ldrb	r3, [r3, #0]
   13ea6:	119b      	asrs	r3, r3, #6
   13ea8:	b2db      	uxtb	r3, r3
   13eaa:	2201      	movs	r2, #1
   13eac:	4013      	ands	r3, r2
   13eae:	b2da      	uxtb	r2, r3
   13eb0:	4baf      	ldr	r3, [pc, #700]	; (14170 <restore_led_data+0x31c>)
   13eb2:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   13eb4:	4bab      	ldr	r3, [pc, #684]	; (14164 <restore_led_data+0x310>)
   13eb6:	781b      	ldrb	r3, [r3, #0]
   13eb8:	09db      	lsrs	r3, r3, #7
   13eba:	b2da      	uxtb	r2, r3
   13ebc:	4bad      	ldr	r3, [pc, #692]	; (14174 <restore_led_data+0x320>)
   13ebe:	701a      	strb	r2, [r3, #0]
		light_mode = MODE_ANALOG_COLOR_CYCLE;
   13ec0:	4bad      	ldr	r3, [pc, #692]	; (14178 <restore_led_data+0x324>)
   13ec2:	2201      	movs	r2, #1
   13ec4:	701a      	strb	r2, [r3, #0]

		Static_RGB.LR = 0;
   13ec6:	4bad      	ldr	r3, [pc, #692]	; (1417c <restore_led_data+0x328>)
   13ec8:	2200      	movs	r2, #0
   13eca:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = 0xFFFF;
   13ecc:	4bab      	ldr	r3, [pc, #684]	; (1417c <restore_led_data+0x328>)
   13ece:	2201      	movs	r2, #1
   13ed0:	4252      	negs	r2, r2
   13ed2:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = 0;
   13ed4:	4ba9      	ldr	r3, [pc, #676]	; (1417c <restore_led_data+0x328>)
   13ed6:	2200      	movs	r2, #0
   13ed8:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = 0;
   13eda:	4ba8      	ldr	r3, [pc, #672]	; (1417c <restore_led_data+0x328>)
   13edc:	2200      	movs	r2, #0
   13ede:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = 0;
   13ee0:	4ba6      	ldr	r3, [pc, #664]	; (1417c <restore_led_data+0x328>)
   13ee2:	2200      	movs	r2, #0
   13ee4:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = 0xFFFF;
   13ee6:	4ba5      	ldr	r3, [pc, #660]	; (1417c <restore_led_data+0x328>)
   13ee8:	2201      	movs	r2, #1
   13eea:	4252      	negs	r2, r2
   13eec:	815a      	strh	r2, [r3, #10]

		
		uint8_t default_ColorBase[9] = {0,1,2,7,1,7,9,10,1};
   13eee:	2360      	movs	r3, #96	; 0x60
   13ef0:	18fb      	adds	r3, r7, r3
   13ef2:	4aa3      	ldr	r2, [pc, #652]	; (14180 <restore_led_data+0x32c>)
   13ef4:	ca03      	ldmia	r2!, {r0, r1}
   13ef6:	c303      	stmia	r3!, {r0, r1}
   13ef8:	7812      	ldrb	r2, [r2, #0]
   13efa:	701a      	strb	r2, [r3, #0]
		uint8_t default_BrightBase[9] = {255,0,0,0,3,3,0,0,2};
   13efc:	2354      	movs	r3, #84	; 0x54
   13efe:	18fb      	adds	r3, r7, r3
   13f00:	4aa0      	ldr	r2, [pc, #640]	; (14184 <restore_led_data+0x330>)
   13f02:	ca03      	ldmia	r2!, {r0, r1}
   13f04:	c303      	stmia	r3!, {r0, r1}
   13f06:	7812      	ldrb	r2, [r2, #0]
   13f08:	701a      	strb	r2, [r3, #0]
		uint8_t default_RateBase[9] = {255,0,255,0,0,255,0,0,3};
   13f0a:	2348      	movs	r3, #72	; 0x48
   13f0c:	18fb      	adds	r3, r7, r3
   13f0e:	4a9e      	ldr	r2, [pc, #632]	; (14188 <restore_led_data+0x334>)
   13f10:	ca03      	ldmia	r2!, {r0, r1}
   13f12:	c303      	stmia	r3!, {r0, r1}
   13f14:	7812      	ldrb	r2, [r2, #0]
   13f16:	701a      	strb	r2, [r3, #0]
		float default_RateSens[9] = {0,0.75,0,0.5,0.5,0,0.5,0.5,0.5};
   13f18:	003b      	movs	r3, r7
   13f1a:	4a9c      	ldr	r2, [pc, #624]	; (1418c <restore_led_data+0x338>)
   13f1c:	ca13      	ldmia	r2!, {r0, r1, r4}
   13f1e:	c313      	stmia	r3!, {r0, r1, r4}
   13f20:	ca13      	ldmia	r2!, {r0, r1, r4}
   13f22:	c313      	stmia	r3!, {r0, r1, r4}
   13f24:	ca13      	ldmia	r2!, {r0, r1, r4}
   13f26:	c313      	stmia	r3!, {r0, r1, r4}
		float default_Brightness[9] = {0,0.25,0.5,0.5,0.5,0.5,0.5,0.5,0.5};
   13f28:	2324      	movs	r3, #36	; 0x24
   13f2a:	18fb      	adds	r3, r7, r3
   13f2c:	4a98      	ldr	r2, [pc, #608]	; (14190 <restore_led_data+0x33c>)
   13f2e:	ca13      	ldmia	r2!, {r0, r1, r4}
   13f30:	c313      	stmia	r3!, {r0, r1, r4}
   13f32:	ca13      	ldmia	r2!, {r0, r1, r4}
   13f34:	c313      	stmia	r3!, {r0, r1, r4}
   13f36:	ca13      	ldmia	r2!, {r0, r1, r4}
   13f38:	c313      	stmia	r3!, {r0, r1, r4}

		for(int i = 0; i < 9; i++){
   13f3a:	2300      	movs	r3, #0
   13f3c:	677b      	str	r3, [r7, #116]	; 0x74
   13f3e:	e031      	b.n	13fa4 <restore_led_data+0x150>
			ColorBase[i] = default_ColorBase[i];
   13f40:	2360      	movs	r3, #96	; 0x60
   13f42:	18fa      	adds	r2, r7, r3
   13f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f46:	18d3      	adds	r3, r2, r3
   13f48:	7819      	ldrb	r1, [r3, #0]
   13f4a:	4a92      	ldr	r2, [pc, #584]	; (14194 <restore_led_data+0x340>)
   13f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f4e:	18d3      	adds	r3, r2, r3
   13f50:	1c0a      	adds	r2, r1, #0
   13f52:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = default_BrightBase[i];
   13f54:	2354      	movs	r3, #84	; 0x54
   13f56:	18fa      	adds	r2, r7, r3
   13f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f5a:	18d3      	adds	r3, r2, r3
   13f5c:	7819      	ldrb	r1, [r3, #0]
   13f5e:	4a8e      	ldr	r2, [pc, #568]	; (14198 <restore_led_data+0x344>)
   13f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f62:	18d3      	adds	r3, r2, r3
   13f64:	1c0a      	adds	r2, r1, #0
   13f66:	701a      	strb	r2, [r3, #0]
			RateBase[i] = default_RateBase[i];
   13f68:	2348      	movs	r3, #72	; 0x48
   13f6a:	18fa      	adds	r2, r7, r3
   13f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f6e:	18d3      	adds	r3, r2, r3
   13f70:	7819      	ldrb	r1, [r3, #0]
   13f72:	4a8a      	ldr	r2, [pc, #552]	; (1419c <restore_led_data+0x348>)
   13f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f76:	18d3      	adds	r3, r2, r3
   13f78:	1c0a      	adds	r2, r1, #0
   13f7a:	701a      	strb	r2, [r3, #0]
			RateSens[i] = default_RateSens[i];
   13f7c:	003b      	movs	r3, r7
   13f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13f80:	0092      	lsls	r2, r2, #2
   13f82:	58d1      	ldr	r1, [r2, r3]
   13f84:	4b86      	ldr	r3, [pc, #536]	; (141a0 <restore_led_data+0x34c>)
   13f86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13f88:	0092      	lsls	r2, r2, #2
   13f8a:	50d1      	str	r1, [r2, r3]
			Brightness[i] = default_Brightness[i];
   13f8c:	2324      	movs	r3, #36	; 0x24
   13f8e:	18fb      	adds	r3, r7, r3
   13f90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13f92:	0092      	lsls	r2, r2, #2
   13f94:	58d1      	ldr	r1, [r2, r3]
   13f96:	4b83      	ldr	r3, [pc, #524]	; (141a4 <restore_led_data+0x350>)
   13f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13f9a:	0092      	lsls	r2, r2, #2
   13f9c:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 9; i++){
   13f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13fa0:	3301      	adds	r3, #1
   13fa2:	677b      	str	r3, [r7, #116]	; 0x74
   13fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13fa6:	2b08      	cmp	r3, #8
   13fa8:	ddca      	ble.n	13f40 <restore_led_data+0xec>
		}

		Custom_RGB.LR = 0;
   13faa:	4b7f      	ldr	r3, [pc, #508]	; (141a8 <restore_led_data+0x354>)
   13fac:	2200      	movs	r2, #0
   13fae:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = 0;
   13fb0:	4b7d      	ldr	r3, [pc, #500]	; (141a8 <restore_led_data+0x354>)
   13fb2:	2200      	movs	r2, #0
   13fb4:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = 0xFFFF;
   13fb6:	4b7c      	ldr	r3, [pc, #496]	; (141a8 <restore_led_data+0x354>)
   13fb8:	2201      	movs	r2, #1
   13fba:	4252      	negs	r2, r2
   13fbc:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = 0;
   13fbe:	4b7a      	ldr	r3, [pc, #488]	; (141a8 <restore_led_data+0x354>)
   13fc0:	2200      	movs	r2, #0
   13fc2:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = 0xFFFF;
   13fc4:	4b78      	ldr	r3, [pc, #480]	; (141a8 <restore_led_data+0x354>)
   13fc6:	2201      	movs	r2, #1
   13fc8:	4252      	negs	r2, r2
   13fca:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = 0;
   13fcc:	4b76      	ldr	r3, [pc, #472]	; (141a8 <restore_led_data+0x354>)
   13fce:	2200      	movs	r2, #0
   13fd0:	815a      	strh	r2, [r3, #10]

		Digital_Static_Zoom = 1;
   13fd2:	4b76      	ldr	r3, [pc, #472]	; (141ac <restore_led_data+0x358>)
   13fd4:	2201      	movs	r2, #1
   13fd6:	701a      	strb	r2, [r3, #0]
		Digital_Static_Shift = 50;
   13fd8:	4b75      	ldr	r3, [pc, #468]	; (141b0 <restore_led_data+0x35c>)
   13fda:	2232      	movs	r2, #50	; 0x32
   13fdc:	701a      	strb	r2, [r3, #0]
		Digital_Static_Brightness = 50;
   13fde:	4b75      	ldr	r3, [pc, #468]	; (141b4 <restore_led_data+0x360>)
   13fe0:	2232      	movs	r2, #50	; 0x32
   13fe2:	701a      	strb	r2, [r3, #0]
		Digital_Skittles_Brightness = 50;
   13fe4:	4b74      	ldr	r3, [pc, #464]	; (141b8 <restore_led_data+0x364>)
   13fe6:	2232      	movs	r2, #50	; 0x32
   13fe8:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Zoom = 1;
   13fea:	4b74      	ldr	r3, [pc, #464]	; (141bc <restore_led_data+0x368>)
   13fec:	2201      	movs	r2, #1
   13fee:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Rate = 50;
   13ff0:	4b73      	ldr	r3, [pc, #460]	; (141c0 <restore_led_data+0x36c>)
   13ff2:	2232      	movs	r2, #50	; 0x32
   13ff4:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Brightness = 50;
   13ff6:	4b73      	ldr	r3, [pc, #460]	; (141c4 <restore_led_data+0x370>)
   13ff8:	2232      	movs	r2, #50	; 0x32
   13ffa:	701a      	strb	r2, [r3, #0]
		Digital_Compass_Brightness = 50;
   13ffc:	4b72      	ldr	r3, [pc, #456]	; (141c8 <restore_led_data+0x374>)
   13ffe:	2232      	movs	r2, #50	; 0x32
   14000:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Zoom = 1;
   14002:	4b72      	ldr	r3, [pc, #456]	; (141cc <restore_led_data+0x378>)
   14004:	2201      	movs	r2, #1
   14006:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Shift = 50;
   14008:	4b71      	ldr	r3, [pc, #452]	; (141d0 <restore_led_data+0x37c>)
   1400a:	2232      	movs	r2, #50	; 0x32
   1400c:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Sens = 50;
   1400e:	4b71      	ldr	r3, [pc, #452]	; (141d4 <restore_led_data+0x380>)
   14010:	2232      	movs	r2, #50	; 0x32
   14012:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Brightness = 50;
   14014:	4b70      	ldr	r3, [pc, #448]	; (141d8 <restore_led_data+0x384>)
   14016:	2232      	movs	r2, #50	; 0x32
   14018:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Zoom = 7;
   1401a:	4b70      	ldr	r3, [pc, #448]	; (141dc <restore_led_data+0x388>)
   1401c:	2207      	movs	r2, #7
   1401e:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Rate = 50;
   14020:	4b6f      	ldr	r3, [pc, #444]	; (141e0 <restore_led_data+0x38c>)
   14022:	2232      	movs	r2, #50	; 0x32
   14024:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Brightness = 50;
   14026:	4b6f      	ldr	r3, [pc, #444]	; (141e4 <restore_led_data+0x390>)
   14028:	2232      	movs	r2, #50	; 0x32
   1402a:	701a      	strb	r2, [r3, #0]

		save_led_data();
   1402c:	4b6e      	ldr	r3, [pc, #440]	; (141e8 <restore_led_data+0x394>)
   1402e:	4798      	blx	r3
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   14030:	e208      	b.n	14444 <restore_led_data+0x5f0>
	}
	else{ // else restore the stored data
		SWITCHES = eeprom_data[0];
   14032:	4b4a      	ldr	r3, [pc, #296]	; (1415c <restore_led_data+0x308>)
   14034:	781a      	ldrb	r2, [r3, #0]
   14036:	4b4b      	ldr	r3, [pc, #300]	; (14164 <restore_led_data+0x310>)
   14038:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1403a:	4b4a      	ldr	r3, [pc, #296]	; (14164 <restore_led_data+0x310>)
   1403c:	781b      	ldrb	r3, [r3, #0]
   1403e:	111b      	asrs	r3, r3, #4
   14040:	b2db      	uxtb	r3, r3
   14042:	2201      	movs	r2, #1
   14044:	4013      	ands	r3, r2
   14046:	b2da      	uxtb	r2, r3
   14048:	4b47      	ldr	r3, [pc, #284]	; (14168 <restore_led_data+0x314>)
   1404a:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   1404c:	4b45      	ldr	r3, [pc, #276]	; (14164 <restore_led_data+0x310>)
   1404e:	781b      	ldrb	r3, [r3, #0]
   14050:	115b      	asrs	r3, r3, #5
   14052:	b2db      	uxtb	r3, r3
   14054:	2201      	movs	r2, #1
   14056:	4013      	ands	r3, r2
   14058:	b2da      	uxtb	r2, r3
   1405a:	4b44      	ldr	r3, [pc, #272]	; (1416c <restore_led_data+0x318>)
   1405c:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   1405e:	4b41      	ldr	r3, [pc, #260]	; (14164 <restore_led_data+0x310>)
   14060:	781b      	ldrb	r3, [r3, #0]
   14062:	119b      	asrs	r3, r3, #6
   14064:	b2db      	uxtb	r3, r3
   14066:	2201      	movs	r2, #1
   14068:	4013      	ands	r3, r2
   1406a:	b2da      	uxtb	r2, r3
   1406c:	4b40      	ldr	r3, [pc, #256]	; (14170 <restore_led_data+0x31c>)
   1406e:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   14070:	4b3c      	ldr	r3, [pc, #240]	; (14164 <restore_led_data+0x310>)
   14072:	781b      	ldrb	r3, [r3, #0]
   14074:	09db      	lsrs	r3, r3, #7
   14076:	b2da      	uxtb	r2, r3
   14078:	4b3e      	ldr	r3, [pc, #248]	; (14174 <restore_led_data+0x320>)
   1407a:	701a      	strb	r2, [r3, #0]
		light_mode = eeprom_data[1];
   1407c:	4b37      	ldr	r3, [pc, #220]	; (1415c <restore_led_data+0x308>)
   1407e:	785a      	ldrb	r2, [r3, #1]
   14080:	4b3d      	ldr	r3, [pc, #244]	; (14178 <restore_led_data+0x324>)
   14082:	701a      	strb	r2, [r3, #0]
		Static_RGB.LR = eeprom_data[2];
   14084:	4b35      	ldr	r3, [pc, #212]	; (1415c <restore_led_data+0x308>)
   14086:	789b      	ldrb	r3, [r3, #2]
   14088:	b29a      	uxth	r2, r3
   1408a:	4b3c      	ldr	r3, [pc, #240]	; (1417c <restore_led_data+0x328>)
   1408c:	801a      	strh	r2, [r3, #0]
		Static_RGB.LR = (Static_RGB.LR | (eeprom_data[3] << 8));
   1408e:	4b3b      	ldr	r3, [pc, #236]	; (1417c <restore_led_data+0x328>)
   14090:	881b      	ldrh	r3, [r3, #0]
   14092:	b21a      	sxth	r2, r3
   14094:	4b31      	ldr	r3, [pc, #196]	; (1415c <restore_led_data+0x308>)
   14096:	78db      	ldrb	r3, [r3, #3]
   14098:	021b      	lsls	r3, r3, #8
   1409a:	b21b      	sxth	r3, r3
   1409c:	4313      	orrs	r3, r2
   1409e:	b21b      	sxth	r3, r3
   140a0:	b29a      	uxth	r2, r3
   140a2:	4b36      	ldr	r3, [pc, #216]	; (1417c <restore_led_data+0x328>)
   140a4:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = eeprom_data[4];
   140a6:	4b2d      	ldr	r3, [pc, #180]	; (1415c <restore_led_data+0x308>)
   140a8:	791b      	ldrb	r3, [r3, #4]
   140aa:	b29a      	uxth	r2, r3
   140ac:	4b33      	ldr	r3, [pc, #204]	; (1417c <restore_led_data+0x328>)
   140ae:	805a      	strh	r2, [r3, #2]
		Static_RGB.LG = (Static_RGB.LG | (eeprom_data[5] << 8));
   140b0:	4b32      	ldr	r3, [pc, #200]	; (1417c <restore_led_data+0x328>)
   140b2:	885b      	ldrh	r3, [r3, #2]
   140b4:	b21a      	sxth	r2, r3
   140b6:	4b29      	ldr	r3, [pc, #164]	; (1415c <restore_led_data+0x308>)
   140b8:	795b      	ldrb	r3, [r3, #5]
   140ba:	021b      	lsls	r3, r3, #8
   140bc:	b21b      	sxth	r3, r3
   140be:	4313      	orrs	r3, r2
   140c0:	b21b      	sxth	r3, r3
   140c2:	b29a      	uxth	r2, r3
   140c4:	4b2d      	ldr	r3, [pc, #180]	; (1417c <restore_led_data+0x328>)
   140c6:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = eeprom_data[6];
   140c8:	4b24      	ldr	r3, [pc, #144]	; (1415c <restore_led_data+0x308>)
   140ca:	799b      	ldrb	r3, [r3, #6]
   140cc:	b29a      	uxth	r2, r3
   140ce:	4b2b      	ldr	r3, [pc, #172]	; (1417c <restore_led_data+0x328>)
   140d0:	809a      	strh	r2, [r3, #4]
		Static_RGB.LB = (Static_RGB.LB | (eeprom_data[7] << 8));
   140d2:	4b2a      	ldr	r3, [pc, #168]	; (1417c <restore_led_data+0x328>)
   140d4:	889b      	ldrh	r3, [r3, #4]
   140d6:	b21a      	sxth	r2, r3
   140d8:	4b20      	ldr	r3, [pc, #128]	; (1415c <restore_led_data+0x308>)
   140da:	79db      	ldrb	r3, [r3, #7]
   140dc:	021b      	lsls	r3, r3, #8
   140de:	b21b      	sxth	r3, r3
   140e0:	4313      	orrs	r3, r2
   140e2:	b21b      	sxth	r3, r3
   140e4:	b29a      	uxth	r2, r3
   140e6:	4b25      	ldr	r3, [pc, #148]	; (1417c <restore_led_data+0x328>)
   140e8:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = eeprom_data[8];
   140ea:	4b1c      	ldr	r3, [pc, #112]	; (1415c <restore_led_data+0x308>)
   140ec:	7a1b      	ldrb	r3, [r3, #8]
   140ee:	b29a      	uxth	r2, r3
   140f0:	4b22      	ldr	r3, [pc, #136]	; (1417c <restore_led_data+0x328>)
   140f2:	80da      	strh	r2, [r3, #6]
		Static_RGB.RR = (Static_RGB.RR | (eeprom_data[9] << 8));
   140f4:	4b21      	ldr	r3, [pc, #132]	; (1417c <restore_led_data+0x328>)
   140f6:	88db      	ldrh	r3, [r3, #6]
   140f8:	b21a      	sxth	r2, r3
   140fa:	4b18      	ldr	r3, [pc, #96]	; (1415c <restore_led_data+0x308>)
   140fc:	7a5b      	ldrb	r3, [r3, #9]
   140fe:	021b      	lsls	r3, r3, #8
   14100:	b21b      	sxth	r3, r3
   14102:	4313      	orrs	r3, r2
   14104:	b21b      	sxth	r3, r3
   14106:	b29a      	uxth	r2, r3
   14108:	4b1c      	ldr	r3, [pc, #112]	; (1417c <restore_led_data+0x328>)
   1410a:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = eeprom_data[10];
   1410c:	4b13      	ldr	r3, [pc, #76]	; (1415c <restore_led_data+0x308>)
   1410e:	7a9b      	ldrb	r3, [r3, #10]
   14110:	b29a      	uxth	r2, r3
   14112:	4b1a      	ldr	r3, [pc, #104]	; (1417c <restore_led_data+0x328>)
   14114:	811a      	strh	r2, [r3, #8]
		Static_RGB.RG = (Static_RGB.RG | (eeprom_data[11] << 8));
   14116:	4b19      	ldr	r3, [pc, #100]	; (1417c <restore_led_data+0x328>)
   14118:	891b      	ldrh	r3, [r3, #8]
   1411a:	b21a      	sxth	r2, r3
   1411c:	4b0f      	ldr	r3, [pc, #60]	; (1415c <restore_led_data+0x308>)
   1411e:	7adb      	ldrb	r3, [r3, #11]
   14120:	021b      	lsls	r3, r3, #8
   14122:	b21b      	sxth	r3, r3
   14124:	4313      	orrs	r3, r2
   14126:	b21b      	sxth	r3, r3
   14128:	b29a      	uxth	r2, r3
   1412a:	4b14      	ldr	r3, [pc, #80]	; (1417c <restore_led_data+0x328>)
   1412c:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = eeprom_data[12];
   1412e:	4b0b      	ldr	r3, [pc, #44]	; (1415c <restore_led_data+0x308>)
   14130:	7b1b      	ldrb	r3, [r3, #12]
   14132:	b29a      	uxth	r2, r3
   14134:	4b11      	ldr	r3, [pc, #68]	; (1417c <restore_led_data+0x328>)
   14136:	815a      	strh	r2, [r3, #10]
		Static_RGB.RB = (Static_RGB.RB | (eeprom_data[13] << 8));
   14138:	4b10      	ldr	r3, [pc, #64]	; (1417c <restore_led_data+0x328>)
   1413a:	895b      	ldrh	r3, [r3, #10]
   1413c:	b21a      	sxth	r2, r3
   1413e:	4b07      	ldr	r3, [pc, #28]	; (1415c <restore_led_data+0x308>)
   14140:	7b5b      	ldrb	r3, [r3, #13]
   14142:	021b      	lsls	r3, r3, #8
   14144:	b21b      	sxth	r3, r3
   14146:	4313      	orrs	r3, r2
   14148:	b21b      	sxth	r3, r3
   1414a:	b29a      	uxth	r2, r3
   1414c:	4b0b      	ldr	r3, [pc, #44]	; (1417c <restore_led_data+0x328>)
   1414e:	815a      	strh	r2, [r3, #10]
		int dataOffset = 14;
   14150:	230e      	movs	r3, #14
   14152:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < 8; i++){
   14154:	2300      	movs	r3, #0
   14156:	673b      	str	r3, [r7, #112]	; 0x70
   14158:	e0a2      	b.n	142a0 <restore_led_data+0x44c>
   1415a:	46c0      	nop			; (mov r8, r8)
   1415c:	20001000 	.word	0x20001000
   14160:	00009301 	.word	0x00009301
   14164:	20000372 	.word	0x20000372
   14168:	200000cc 	.word	0x200000cc
   1416c:	2000036f 	.word	0x2000036f
   14170:	20000370 	.word	0x20000370
   14174:	20000371 	.word	0x20000371
   14178:	20000034 	.word	0x20000034
   1417c:	20000038 	.word	0x20000038
   14180:	0001bbb0 	.word	0x0001bbb0
   14184:	0001bbbc 	.word	0x0001bbbc
   14188:	0001bbc8 	.word	0x0001bbc8
   1418c:	0001bbd4 	.word	0x0001bbd4
   14190:	0001bbf8 	.word	0x0001bbf8
   14194:	2000008c 	.word	0x2000008c
   14198:	20000098 	.word	0x20000098
   1419c:	200000a4 	.word	0x200000a4
   141a0:	20000044 	.word	0x20000044
   141a4:	20000068 	.word	0x20000068
   141a8:	200000bc 	.word	0x200000bc
   141ac:	200000ad 	.word	0x200000ad
   141b0:	200000ae 	.word	0x200000ae
   141b4:	200000af 	.word	0x200000af
   141b8:	200000b0 	.word	0x200000b0
   141bc:	200000b1 	.word	0x200000b1
   141c0:	200000b2 	.word	0x200000b2
   141c4:	200000b3 	.word	0x200000b3
   141c8:	200000b4 	.word	0x200000b4
   141cc:	200000b5 	.word	0x200000b5
   141d0:	200000b6 	.word	0x200000b6
   141d4:	200000b7 	.word	0x200000b7
   141d8:	200000b8 	.word	0x200000b8
   141dc:	200000b9 	.word	0x200000b9
   141e0:	200000ba 	.word	0x200000ba
   141e4:	200000bb 	.word	0x200000bb
   141e8:	00013ac5 	.word	0x00013ac5
			ColorBase[i] = eeprom_data[dataOffset + (i*5)];
   141ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   141ee:	0013      	movs	r3, r2
   141f0:	009b      	lsls	r3, r3, #2
   141f2:	189a      	adds	r2, r3, r2
   141f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   141f6:	18d3      	adds	r3, r2, r3
   141f8:	4a94      	ldr	r2, [pc, #592]	; (1444c <restore_led_data+0x5f8>)
   141fa:	5cd1      	ldrb	r1, [r2, r3]
   141fc:	4a94      	ldr	r2, [pc, #592]	; (14450 <restore_led_data+0x5fc>)
   141fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14200:	18d3      	adds	r3, r2, r3
   14202:	1c0a      	adds	r2, r1, #0
   14204:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = eeprom_data[dataOffset + (i*5) + 1];
   14206:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14208:	0013      	movs	r3, r2
   1420a:	009b      	lsls	r3, r3, #2
   1420c:	189a      	adds	r2, r3, r2
   1420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14210:	18d3      	adds	r3, r2, r3
   14212:	3301      	adds	r3, #1
   14214:	4a8d      	ldr	r2, [pc, #564]	; (1444c <restore_led_data+0x5f8>)
   14216:	5cd1      	ldrb	r1, [r2, r3]
   14218:	4a8e      	ldr	r2, [pc, #568]	; (14454 <restore_led_data+0x600>)
   1421a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1421c:	18d3      	adds	r3, r2, r3
   1421e:	1c0a      	adds	r2, r1, #0
   14220:	701a      	strb	r2, [r3, #0]
			RateBase[i] = eeprom_data[dataOffset + (i*5) + 2];
   14222:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14224:	0013      	movs	r3, r2
   14226:	009b      	lsls	r3, r3, #2
   14228:	189a      	adds	r2, r3, r2
   1422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1422c:	18d3      	adds	r3, r2, r3
   1422e:	3302      	adds	r3, #2
   14230:	4a86      	ldr	r2, [pc, #536]	; (1444c <restore_led_data+0x5f8>)
   14232:	5cd1      	ldrb	r1, [r2, r3]
   14234:	4a88      	ldr	r2, [pc, #544]	; (14458 <restore_led_data+0x604>)
   14236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14238:	18d3      	adds	r3, r2, r3
   1423a:	1c0a      	adds	r2, r1, #0
   1423c:	701a      	strb	r2, [r3, #0]
			RateSens[i] = ((float)eeprom_data[dataOffset + (i*5) + 3])/100;
   1423e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14240:	0013      	movs	r3, r2
   14242:	009b      	lsls	r3, r3, #2
   14244:	189a      	adds	r2, r3, r2
   14246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14248:	18d3      	adds	r3, r2, r3
   1424a:	3303      	adds	r3, #3
   1424c:	4a7f      	ldr	r2, [pc, #508]	; (1444c <restore_led_data+0x5f8>)
   1424e:	5cd2      	ldrb	r2, [r2, r3]
   14250:	4b82      	ldr	r3, [pc, #520]	; (1445c <restore_led_data+0x608>)
   14252:	0010      	movs	r0, r2
   14254:	4798      	blx	r3
   14256:	1c02      	adds	r2, r0, #0
   14258:	4b81      	ldr	r3, [pc, #516]	; (14460 <restore_led_data+0x60c>)
   1425a:	4982      	ldr	r1, [pc, #520]	; (14464 <restore_led_data+0x610>)
   1425c:	1c10      	adds	r0, r2, #0
   1425e:	4798      	blx	r3
   14260:	1c03      	adds	r3, r0, #0
   14262:	1c19      	adds	r1, r3, #0
   14264:	4b80      	ldr	r3, [pc, #512]	; (14468 <restore_led_data+0x614>)
   14266:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14268:	0092      	lsls	r2, r2, #2
   1426a:	50d1      	str	r1, [r2, r3]
			Brightness[i] = ((float)eeprom_data[dataOffset + (i*5) + 4])/100;
   1426c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1426e:	0013      	movs	r3, r2
   14270:	009b      	lsls	r3, r3, #2
   14272:	189a      	adds	r2, r3, r2
   14274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14276:	18d3      	adds	r3, r2, r3
   14278:	3304      	adds	r3, #4
   1427a:	4a74      	ldr	r2, [pc, #464]	; (1444c <restore_led_data+0x5f8>)
   1427c:	5cd2      	ldrb	r2, [r2, r3]
   1427e:	4b77      	ldr	r3, [pc, #476]	; (1445c <restore_led_data+0x608>)
   14280:	0010      	movs	r0, r2
   14282:	4798      	blx	r3
   14284:	1c02      	adds	r2, r0, #0
   14286:	4b76      	ldr	r3, [pc, #472]	; (14460 <restore_led_data+0x60c>)
   14288:	4976      	ldr	r1, [pc, #472]	; (14464 <restore_led_data+0x610>)
   1428a:	1c10      	adds	r0, r2, #0
   1428c:	4798      	blx	r3
   1428e:	1c03      	adds	r3, r0, #0
   14290:	1c19      	adds	r1, r3, #0
   14292:	4b76      	ldr	r3, [pc, #472]	; (1446c <restore_led_data+0x618>)
   14294:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14296:	0092      	lsls	r2, r2, #2
   14298:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 8; i++){
   1429a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1429c:	3301      	adds	r3, #1
   1429e:	673b      	str	r3, [r7, #112]	; 0x70
   142a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   142a2:	2b07      	cmp	r3, #7
   142a4:	dda2      	ble.n	141ec <restore_led_data+0x398>
		}

		eeprom_emulator_read_page(1, eeprom_data);
   142a6:	4b69      	ldr	r3, [pc, #420]	; (1444c <restore_led_data+0x5f8>)
   142a8:	0019      	movs	r1, r3
   142aa:	2001      	movs	r0, #1
   142ac:	4b70      	ldr	r3, [pc, #448]	; (14470 <restore_led_data+0x61c>)
   142ae:	4798      	blx	r3

		ColorBase[8] = eeprom_data[0];
   142b0:	4b66      	ldr	r3, [pc, #408]	; (1444c <restore_led_data+0x5f8>)
   142b2:	781a      	ldrb	r2, [r3, #0]
   142b4:	4b66      	ldr	r3, [pc, #408]	; (14450 <restore_led_data+0x5fc>)
   142b6:	721a      	strb	r2, [r3, #8]
		BrightBase[8] = eeprom_data[1];
   142b8:	4b64      	ldr	r3, [pc, #400]	; (1444c <restore_led_data+0x5f8>)
   142ba:	785a      	ldrb	r2, [r3, #1]
   142bc:	4b65      	ldr	r3, [pc, #404]	; (14454 <restore_led_data+0x600>)
   142be:	721a      	strb	r2, [r3, #8]
		RateBase[8] = eeprom_data[2];
   142c0:	4b62      	ldr	r3, [pc, #392]	; (1444c <restore_led_data+0x5f8>)
   142c2:	789a      	ldrb	r2, [r3, #2]
   142c4:	4b64      	ldr	r3, [pc, #400]	; (14458 <restore_led_data+0x604>)
   142c6:	721a      	strb	r2, [r3, #8]
		RateSens[8] = ((float)eeprom_data[3])/100;
   142c8:	4b60      	ldr	r3, [pc, #384]	; (1444c <restore_led_data+0x5f8>)
   142ca:	78da      	ldrb	r2, [r3, #3]
   142cc:	4b63      	ldr	r3, [pc, #396]	; (1445c <restore_led_data+0x608>)
   142ce:	0010      	movs	r0, r2
   142d0:	4798      	blx	r3
   142d2:	1c02      	adds	r2, r0, #0
   142d4:	4b62      	ldr	r3, [pc, #392]	; (14460 <restore_led_data+0x60c>)
   142d6:	4963      	ldr	r1, [pc, #396]	; (14464 <restore_led_data+0x610>)
   142d8:	1c10      	adds	r0, r2, #0
   142da:	4798      	blx	r3
   142dc:	1c03      	adds	r3, r0, #0
   142de:	1c1a      	adds	r2, r3, #0
   142e0:	4b61      	ldr	r3, [pc, #388]	; (14468 <restore_led_data+0x614>)
   142e2:	621a      	str	r2, [r3, #32]
		Brightness[8] = ((float)eeprom_data[4])/100;
   142e4:	4b59      	ldr	r3, [pc, #356]	; (1444c <restore_led_data+0x5f8>)
   142e6:	791a      	ldrb	r2, [r3, #4]
   142e8:	4b5c      	ldr	r3, [pc, #368]	; (1445c <restore_led_data+0x608>)
   142ea:	0010      	movs	r0, r2
   142ec:	4798      	blx	r3
   142ee:	1c02      	adds	r2, r0, #0
   142f0:	4b5b      	ldr	r3, [pc, #364]	; (14460 <restore_led_data+0x60c>)
   142f2:	495c      	ldr	r1, [pc, #368]	; (14464 <restore_led_data+0x610>)
   142f4:	1c10      	adds	r0, r2, #0
   142f6:	4798      	blx	r3
   142f8:	1c03      	adds	r3, r0, #0
   142fa:	1c1a      	adds	r2, r3, #0
   142fc:	4b5b      	ldr	r3, [pc, #364]	; (1446c <restore_led_data+0x618>)
   142fe:	621a      	str	r2, [r3, #32]
		Custom_RGB.LR = eeprom_data[5];
   14300:	4b52      	ldr	r3, [pc, #328]	; (1444c <restore_led_data+0x5f8>)
   14302:	795b      	ldrb	r3, [r3, #5]
   14304:	b29a      	uxth	r2, r3
   14306:	4b5b      	ldr	r3, [pc, #364]	; (14474 <restore_led_data+0x620>)
   14308:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LR = (Custom_RGB.LR | (eeprom_data[6] << 8));
   1430a:	4b5a      	ldr	r3, [pc, #360]	; (14474 <restore_led_data+0x620>)
   1430c:	881b      	ldrh	r3, [r3, #0]
   1430e:	b21a      	sxth	r2, r3
   14310:	4b4e      	ldr	r3, [pc, #312]	; (1444c <restore_led_data+0x5f8>)
   14312:	799b      	ldrb	r3, [r3, #6]
   14314:	021b      	lsls	r3, r3, #8
   14316:	b21b      	sxth	r3, r3
   14318:	4313      	orrs	r3, r2
   1431a:	b21b      	sxth	r3, r3
   1431c:	b29a      	uxth	r2, r3
   1431e:	4b55      	ldr	r3, [pc, #340]	; (14474 <restore_led_data+0x620>)
   14320:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = eeprom_data[7];
   14322:	4b4a      	ldr	r3, [pc, #296]	; (1444c <restore_led_data+0x5f8>)
   14324:	79db      	ldrb	r3, [r3, #7]
   14326:	b29a      	uxth	r2, r3
   14328:	4b52      	ldr	r3, [pc, #328]	; (14474 <restore_led_data+0x620>)
   1432a:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LG = (Custom_RGB.LG | (eeprom_data[8] << 8));
   1432c:	4b51      	ldr	r3, [pc, #324]	; (14474 <restore_led_data+0x620>)
   1432e:	885b      	ldrh	r3, [r3, #2]
   14330:	b21a      	sxth	r2, r3
   14332:	4b46      	ldr	r3, [pc, #280]	; (1444c <restore_led_data+0x5f8>)
   14334:	7a1b      	ldrb	r3, [r3, #8]
   14336:	021b      	lsls	r3, r3, #8
   14338:	b21b      	sxth	r3, r3
   1433a:	4313      	orrs	r3, r2
   1433c:	b21b      	sxth	r3, r3
   1433e:	b29a      	uxth	r2, r3
   14340:	4b4c      	ldr	r3, [pc, #304]	; (14474 <restore_led_data+0x620>)
   14342:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = eeprom_data[9];
   14344:	4b41      	ldr	r3, [pc, #260]	; (1444c <restore_led_data+0x5f8>)
   14346:	7a5b      	ldrb	r3, [r3, #9]
   14348:	b29a      	uxth	r2, r3
   1434a:	4b4a      	ldr	r3, [pc, #296]	; (14474 <restore_led_data+0x620>)
   1434c:	809a      	strh	r2, [r3, #4]
		Custom_RGB.LB = (Custom_RGB.LB | (eeprom_data[10] << 8));
   1434e:	4b49      	ldr	r3, [pc, #292]	; (14474 <restore_led_data+0x620>)
   14350:	889b      	ldrh	r3, [r3, #4]
   14352:	b21a      	sxth	r2, r3
   14354:	4b3d      	ldr	r3, [pc, #244]	; (1444c <restore_led_data+0x5f8>)
   14356:	7a9b      	ldrb	r3, [r3, #10]
   14358:	021b      	lsls	r3, r3, #8
   1435a:	b21b      	sxth	r3, r3
   1435c:	4313      	orrs	r3, r2
   1435e:	b21b      	sxth	r3, r3
   14360:	b29a      	uxth	r2, r3
   14362:	4b44      	ldr	r3, [pc, #272]	; (14474 <restore_led_data+0x620>)
   14364:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = eeprom_data[11];
   14366:	4b39      	ldr	r3, [pc, #228]	; (1444c <restore_led_data+0x5f8>)
   14368:	7adb      	ldrb	r3, [r3, #11]
   1436a:	b29a      	uxth	r2, r3
   1436c:	4b41      	ldr	r3, [pc, #260]	; (14474 <restore_led_data+0x620>)
   1436e:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RR = (Custom_RGB.RR | (eeprom_data[12] << 8));
   14370:	4b40      	ldr	r3, [pc, #256]	; (14474 <restore_led_data+0x620>)
   14372:	88db      	ldrh	r3, [r3, #6]
   14374:	b21a      	sxth	r2, r3
   14376:	4b35      	ldr	r3, [pc, #212]	; (1444c <restore_led_data+0x5f8>)
   14378:	7b1b      	ldrb	r3, [r3, #12]
   1437a:	021b      	lsls	r3, r3, #8
   1437c:	b21b      	sxth	r3, r3
   1437e:	4313      	orrs	r3, r2
   14380:	b21b      	sxth	r3, r3
   14382:	b29a      	uxth	r2, r3
   14384:	4b3b      	ldr	r3, [pc, #236]	; (14474 <restore_led_data+0x620>)
   14386:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = eeprom_data[13];
   14388:	4b30      	ldr	r3, [pc, #192]	; (1444c <restore_led_data+0x5f8>)
   1438a:	7b5b      	ldrb	r3, [r3, #13]
   1438c:	b29a      	uxth	r2, r3
   1438e:	4b39      	ldr	r3, [pc, #228]	; (14474 <restore_led_data+0x620>)
   14390:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RG = (Custom_RGB.RG | (eeprom_data[14] << 8));
   14392:	4b38      	ldr	r3, [pc, #224]	; (14474 <restore_led_data+0x620>)
   14394:	891b      	ldrh	r3, [r3, #8]
   14396:	b21a      	sxth	r2, r3
   14398:	4b2c      	ldr	r3, [pc, #176]	; (1444c <restore_led_data+0x5f8>)
   1439a:	7b9b      	ldrb	r3, [r3, #14]
   1439c:	021b      	lsls	r3, r3, #8
   1439e:	b21b      	sxth	r3, r3
   143a0:	4313      	orrs	r3, r2
   143a2:	b21b      	sxth	r3, r3
   143a4:	b29a      	uxth	r2, r3
   143a6:	4b33      	ldr	r3, [pc, #204]	; (14474 <restore_led_data+0x620>)
   143a8:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = eeprom_data[15];
   143aa:	4b28      	ldr	r3, [pc, #160]	; (1444c <restore_led_data+0x5f8>)
   143ac:	7bdb      	ldrb	r3, [r3, #15]
   143ae:	b29a      	uxth	r2, r3
   143b0:	4b30      	ldr	r3, [pc, #192]	; (14474 <restore_led_data+0x620>)
   143b2:	815a      	strh	r2, [r3, #10]
		Custom_RGB.RB = (Custom_RGB.RB | (eeprom_data[16] << 8));
   143b4:	4b2f      	ldr	r3, [pc, #188]	; (14474 <restore_led_data+0x620>)
   143b6:	895b      	ldrh	r3, [r3, #10]
   143b8:	b21a      	sxth	r2, r3
   143ba:	4b24      	ldr	r3, [pc, #144]	; (1444c <restore_led_data+0x5f8>)
   143bc:	7c1b      	ldrb	r3, [r3, #16]
   143be:	021b      	lsls	r3, r3, #8
   143c0:	b21b      	sxth	r3, r3
   143c2:	4313      	orrs	r3, r2
   143c4:	b21b      	sxth	r3, r3
   143c6:	b29a      	uxth	r2, r3
   143c8:	4b2a      	ldr	r3, [pc, #168]	; (14474 <restore_led_data+0x620>)
   143ca:	815a      	strh	r2, [r3, #10]

		Digital_Static_Zoom = eeprom_data[17];
   143cc:	4b1f      	ldr	r3, [pc, #124]	; (1444c <restore_led_data+0x5f8>)
   143ce:	7c5a      	ldrb	r2, [r3, #17]
   143d0:	4b29      	ldr	r3, [pc, #164]	; (14478 <restore_led_data+0x624>)
   143d2:	701a      	strb	r2, [r3, #0]
		Digital_Static_Shift = eeprom_data[18];
   143d4:	4b1d      	ldr	r3, [pc, #116]	; (1444c <restore_led_data+0x5f8>)
   143d6:	7c9a      	ldrb	r2, [r3, #18]
   143d8:	4b28      	ldr	r3, [pc, #160]	; (1447c <restore_led_data+0x628>)
   143da:	701a      	strb	r2, [r3, #0]
		Digital_Static_Brightness = eeprom_data[19];
   143dc:	4b1b      	ldr	r3, [pc, #108]	; (1444c <restore_led_data+0x5f8>)
   143de:	7cda      	ldrb	r2, [r3, #19]
   143e0:	4b27      	ldr	r3, [pc, #156]	; (14480 <restore_led_data+0x62c>)
   143e2:	701a      	strb	r2, [r3, #0]
		Digital_Skittles_Brightness = eeprom_data[20];
   143e4:	4b19      	ldr	r3, [pc, #100]	; (1444c <restore_led_data+0x5f8>)
   143e6:	7d1a      	ldrb	r2, [r3, #20]
   143e8:	4b26      	ldr	r3, [pc, #152]	; (14484 <restore_led_data+0x630>)
   143ea:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Zoom = eeprom_data[21];
   143ec:	4b17      	ldr	r3, [pc, #92]	; (1444c <restore_led_data+0x5f8>)
   143ee:	7d5a      	ldrb	r2, [r3, #21]
   143f0:	4b25      	ldr	r3, [pc, #148]	; (14488 <restore_led_data+0x634>)
   143f2:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Rate = eeprom_data[22];
   143f4:	4b15      	ldr	r3, [pc, #84]	; (1444c <restore_led_data+0x5f8>)
   143f6:	7d9a      	ldrb	r2, [r3, #22]
   143f8:	4b24      	ldr	r3, [pc, #144]	; (1448c <restore_led_data+0x638>)
   143fa:	701a      	strb	r2, [r3, #0]
		Digital_Cycle_Brightness = eeprom_data[23];
   143fc:	4b13      	ldr	r3, [pc, #76]	; (1444c <restore_led_data+0x5f8>)
   143fe:	7dda      	ldrb	r2, [r3, #23]
   14400:	4b23      	ldr	r3, [pc, #140]	; (14490 <restore_led_data+0x63c>)
   14402:	701a      	strb	r2, [r3, #0]
		Digital_Compass_Brightness = eeprom_data[24];
   14404:	4b11      	ldr	r3, [pc, #68]	; (1444c <restore_led_data+0x5f8>)
   14406:	7e1a      	ldrb	r2, [r3, #24]
   14408:	4b22      	ldr	r3, [pc, #136]	; (14494 <restore_led_data+0x640>)
   1440a:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Zoom = eeprom_data[25];
   1440c:	4b0f      	ldr	r3, [pc, #60]	; (1444c <restore_led_data+0x5f8>)
   1440e:	7e5a      	ldrb	r2, [r3, #25]
   14410:	4b21      	ldr	r3, [pc, #132]	; (14498 <restore_led_data+0x644>)
   14412:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Shift = eeprom_data[26];
   14414:	4b0d      	ldr	r3, [pc, #52]	; (1444c <restore_led_data+0x5f8>)
   14416:	7e9a      	ldrb	r2, [r3, #26]
   14418:	4b20      	ldr	r3, [pc, #128]	; (1449c <restore_led_data+0x648>)
   1441a:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Sens = eeprom_data[27];
   1441c:	4b0b      	ldr	r3, [pc, #44]	; (1444c <restore_led_data+0x5f8>)
   1441e:	7eda      	ldrb	r2, [r3, #27]
   14420:	4b1f      	ldr	r3, [pc, #124]	; (144a0 <restore_led_data+0x64c>)
   14422:	701a      	strb	r2, [r3, #0]
		Digital_Throttle_Brightness = eeprom_data[28];
   14424:	4b09      	ldr	r3, [pc, #36]	; (1444c <restore_led_data+0x5f8>)
   14426:	7f1a      	ldrb	r2, [r3, #28]
   14428:	4b1e      	ldr	r3, [pc, #120]	; (144a4 <restore_led_data+0x650>)
   1442a:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Zoom = eeprom_data[29];
   1442c:	4b07      	ldr	r3, [pc, #28]	; (1444c <restore_led_data+0x5f8>)
   1442e:	7f5a      	ldrb	r2, [r3, #29]
   14430:	4b1d      	ldr	r3, [pc, #116]	; (144a8 <restore_led_data+0x654>)
   14432:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Rate = eeprom_data[30];
   14434:	4b05      	ldr	r3, [pc, #20]	; (1444c <restore_led_data+0x5f8>)
   14436:	7f9a      	ldrb	r2, [r3, #30]
   14438:	4b1c      	ldr	r3, [pc, #112]	; (144ac <restore_led_data+0x658>)
   1443a:	701a      	strb	r2, [r3, #0]
		Digital_RPM_Brightness = eeprom_data[31];
   1443c:	4b03      	ldr	r3, [pc, #12]	; (1444c <restore_led_data+0x5f8>)
   1443e:	7fda      	ldrb	r2, [r3, #31]
   14440:	4b1b      	ldr	r3, [pc, #108]	; (144b0 <restore_led_data+0x65c>)
   14442:	701a      	strb	r2, [r3, #0]
	}
}
   14444:	46c0      	nop			; (mov r8, r8)
   14446:	46bd      	mov	sp, r7
   14448:	b01f      	add	sp, #124	; 0x7c
   1444a:	bd90      	pop	{r4, r7, pc}
   1444c:	20001000 	.word	0x20001000
   14450:	2000008c 	.word	0x2000008c
   14454:	20000098 	.word	0x20000098
   14458:	200000a4 	.word	0x200000a4
   1445c:	00019605 	.word	0x00019605
   14460:	00018bcd 	.word	0x00018bcd
   14464:	42c80000 	.word	0x42c80000
   14468:	20000044 	.word	0x20000044
   1446c:	20000068 	.word	0x20000068
   14470:	00009301 	.word	0x00009301
   14474:	200000bc 	.word	0x200000bc
   14478:	200000ad 	.word	0x200000ad
   1447c:	200000ae 	.word	0x200000ae
   14480:	200000af 	.word	0x200000af
   14484:	200000b0 	.word	0x200000b0
   14488:	200000b1 	.word	0x200000b1
   1448c:	200000b2 	.word	0x200000b2
   14490:	200000b3 	.word	0x200000b3
   14494:	200000b4 	.word	0x200000b4
   14498:	200000b5 	.word	0x200000b5
   1449c:	200000b6 	.word	0x200000b6
   144a0:	200000b7 	.word	0x200000b7
   144a4:	200000b8 	.word	0x200000b8
   144a8:	200000b9 	.word	0x200000b9
   144ac:	200000ba 	.word	0x200000ba
   144b0:	200000bb 	.word	0x200000bb

000144b4 <save_cal_data>:

void save_cal_data()
{
   144b4:	b580      	push	{r7, lr}
   144b6:	b082      	sub	sp, #8
   144b8:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   144ba:	2300      	movs	r3, #0
   144bc:	607b      	str	r3, [r7, #4]
   144be:	e005      	b.n	144cc <save_cal_data+0x18>
		eeprom_data[0] = 0;
   144c0:	4b44      	ldr	r3, [pc, #272]	; (145d4 <save_cal_data+0x120>)
   144c2:	2200      	movs	r2, #0
   144c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   144c6:	687b      	ldr	r3, [r7, #4]
   144c8:	3301      	adds	r3, #1
   144ca:	607b      	str	r3, [r7, #4]
   144cc:	687b      	ldr	r3, [r7, #4]
   144ce:	2b3b      	cmp	r3, #59	; 0x3b
   144d0:	ddf6      	ble.n	144c0 <save_cal_data+0xc>
	}

	eeprom_data[0] = ((gBiasRaw[0]) & 0xFF00) >> 8;
   144d2:	4b41      	ldr	r3, [pc, #260]	; (145d8 <save_cal_data+0x124>)
   144d4:	2200      	movs	r2, #0
   144d6:	5e9b      	ldrsh	r3, [r3, r2]
   144d8:	121b      	asrs	r3, r3, #8
   144da:	b2da      	uxtb	r2, r3
   144dc:	4b3d      	ldr	r3, [pc, #244]	; (145d4 <save_cal_data+0x120>)
   144de:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ((gBiasRaw[0]) & 0xFF);
   144e0:	4b3d      	ldr	r3, [pc, #244]	; (145d8 <save_cal_data+0x124>)
   144e2:	2200      	movs	r2, #0
   144e4:	5e9b      	ldrsh	r3, [r3, r2]
   144e6:	b2da      	uxtb	r2, r3
   144e8:	4b3a      	ldr	r3, [pc, #232]	; (145d4 <save_cal_data+0x120>)
   144ea:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = ((gBiasRaw[1]) & 0xFF00) >> 8;
   144ec:	4b3a      	ldr	r3, [pc, #232]	; (145d8 <save_cal_data+0x124>)
   144ee:	2202      	movs	r2, #2
   144f0:	5e9b      	ldrsh	r3, [r3, r2]
   144f2:	121b      	asrs	r3, r3, #8
   144f4:	b2da      	uxtb	r2, r3
   144f6:	4b37      	ldr	r3, [pc, #220]	; (145d4 <save_cal_data+0x120>)
   144f8:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = ((gBiasRaw[1]) & 0xFF);
   144fa:	4b37      	ldr	r3, [pc, #220]	; (145d8 <save_cal_data+0x124>)
   144fc:	2202      	movs	r2, #2
   144fe:	5e9b      	ldrsh	r3, [r3, r2]
   14500:	b2da      	uxtb	r2, r3
   14502:	4b34      	ldr	r3, [pc, #208]	; (145d4 <save_cal_data+0x120>)
   14504:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = ((gBiasRaw[2]) & 0xFF00) >> 8;
   14506:	4b34      	ldr	r3, [pc, #208]	; (145d8 <save_cal_data+0x124>)
   14508:	2204      	movs	r2, #4
   1450a:	5e9b      	ldrsh	r3, [r3, r2]
   1450c:	121b      	asrs	r3, r3, #8
   1450e:	b2da      	uxtb	r2, r3
   14510:	4b30      	ldr	r3, [pc, #192]	; (145d4 <save_cal_data+0x120>)
   14512:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = ((gBiasRaw[2]) & 0xFF);
   14514:	4b30      	ldr	r3, [pc, #192]	; (145d8 <save_cal_data+0x124>)
   14516:	2204      	movs	r2, #4
   14518:	5e9b      	ldrsh	r3, [r3, r2]
   1451a:	b2da      	uxtb	r2, r3
   1451c:	4b2d      	ldr	r3, [pc, #180]	; (145d4 <save_cal_data+0x120>)
   1451e:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = ((aBiasRaw[0]) & 0xFF00) >> 8;
   14520:	4b2e      	ldr	r3, [pc, #184]	; (145dc <save_cal_data+0x128>)
   14522:	2200      	movs	r2, #0
   14524:	5e9b      	ldrsh	r3, [r3, r2]
   14526:	121b      	asrs	r3, r3, #8
   14528:	b2da      	uxtb	r2, r3
   1452a:	4b2a      	ldr	r3, [pc, #168]	; (145d4 <save_cal_data+0x120>)
   1452c:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = ((aBiasRaw[0]) & 0xFF);
   1452e:	4b2b      	ldr	r3, [pc, #172]	; (145dc <save_cal_data+0x128>)
   14530:	2200      	movs	r2, #0
   14532:	5e9b      	ldrsh	r3, [r3, r2]
   14534:	b2da      	uxtb	r2, r3
   14536:	4b27      	ldr	r3, [pc, #156]	; (145d4 <save_cal_data+0x120>)
   14538:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = ((aBiasRaw[1]) & 0xFF00) >> 8;
   1453a:	4b28      	ldr	r3, [pc, #160]	; (145dc <save_cal_data+0x128>)
   1453c:	2202      	movs	r2, #2
   1453e:	5e9b      	ldrsh	r3, [r3, r2]
   14540:	121b      	asrs	r3, r3, #8
   14542:	b2da      	uxtb	r2, r3
   14544:	4b23      	ldr	r3, [pc, #140]	; (145d4 <save_cal_data+0x120>)
   14546:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = ((aBiasRaw[1]) & 0xFF);
   14548:	4b24      	ldr	r3, [pc, #144]	; (145dc <save_cal_data+0x128>)
   1454a:	2202      	movs	r2, #2
   1454c:	5e9b      	ldrsh	r3, [r3, r2]
   1454e:	b2da      	uxtb	r2, r3
   14550:	4b20      	ldr	r3, [pc, #128]	; (145d4 <save_cal_data+0x120>)
   14552:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = ((aBiasRaw[2]) & 0xFF00) >> 8;
   14554:	4b21      	ldr	r3, [pc, #132]	; (145dc <save_cal_data+0x128>)
   14556:	2204      	movs	r2, #4
   14558:	5e9b      	ldrsh	r3, [r3, r2]
   1455a:	121b      	asrs	r3, r3, #8
   1455c:	b2da      	uxtb	r2, r3
   1455e:	4b1d      	ldr	r3, [pc, #116]	; (145d4 <save_cal_data+0x120>)
   14560:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = ((aBiasRaw[2]) & 0xFF);
   14562:	4b1e      	ldr	r3, [pc, #120]	; (145dc <save_cal_data+0x128>)
   14564:	2204      	movs	r2, #4
   14566:	5e9b      	ldrsh	r3, [r3, r2]
   14568:	b2da      	uxtb	r2, r3
   1456a:	4b1a      	ldr	r3, [pc, #104]	; (145d4 <save_cal_data+0x120>)
   1456c:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = ((mBiasRaw[0]) & 0xFF00) >> 8;
   1456e:	4b1c      	ldr	r3, [pc, #112]	; (145e0 <save_cal_data+0x12c>)
   14570:	2200      	movs	r2, #0
   14572:	5e9b      	ldrsh	r3, [r3, r2]
   14574:	121b      	asrs	r3, r3, #8
   14576:	b2da      	uxtb	r2, r3
   14578:	4b16      	ldr	r3, [pc, #88]	; (145d4 <save_cal_data+0x120>)
   1457a:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = ((mBiasRaw[0]) & 0xFF);
   1457c:	4b18      	ldr	r3, [pc, #96]	; (145e0 <save_cal_data+0x12c>)
   1457e:	2200      	movs	r2, #0
   14580:	5e9b      	ldrsh	r3, [r3, r2]
   14582:	b2da      	uxtb	r2, r3
   14584:	4b13      	ldr	r3, [pc, #76]	; (145d4 <save_cal_data+0x120>)
   14586:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = ((mBiasRaw[1]) & 0xFF00) >> 8;
   14588:	4b15      	ldr	r3, [pc, #84]	; (145e0 <save_cal_data+0x12c>)
   1458a:	2202      	movs	r2, #2
   1458c:	5e9b      	ldrsh	r3, [r3, r2]
   1458e:	121b      	asrs	r3, r3, #8
   14590:	b2da      	uxtb	r2, r3
   14592:	4b10      	ldr	r3, [pc, #64]	; (145d4 <save_cal_data+0x120>)
   14594:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = ((mBiasRaw[1]) & 0xFF);
   14596:	4b12      	ldr	r3, [pc, #72]	; (145e0 <save_cal_data+0x12c>)
   14598:	2202      	movs	r2, #2
   1459a:	5e9b      	ldrsh	r3, [r3, r2]
   1459c:	b2da      	uxtb	r2, r3
   1459e:	4b0d      	ldr	r3, [pc, #52]	; (145d4 <save_cal_data+0x120>)
   145a0:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = ((mBiasRaw[2]) & 0xFF00) >> 8;
   145a2:	4b0f      	ldr	r3, [pc, #60]	; (145e0 <save_cal_data+0x12c>)
   145a4:	2204      	movs	r2, #4
   145a6:	5e9b      	ldrsh	r3, [r3, r2]
   145a8:	121b      	asrs	r3, r3, #8
   145aa:	b2da      	uxtb	r2, r3
   145ac:	4b09      	ldr	r3, [pc, #36]	; (145d4 <save_cal_data+0x120>)
   145ae:	741a      	strb	r2, [r3, #16]
	eeprom_data[17] = ((mBiasRaw[2]) & 0xFF);
   145b0:	4b0b      	ldr	r3, [pc, #44]	; (145e0 <save_cal_data+0x12c>)
   145b2:	2204      	movs	r2, #4
   145b4:	5e9b      	ldrsh	r3, [r3, r2]
   145b6:	b2da      	uxtb	r2, r3
   145b8:	4b06      	ldr	r3, [pc, #24]	; (145d4 <save_cal_data+0x120>)
   145ba:	745a      	strb	r2, [r3, #17]

	//Write EEPROM data
	eeprom_emulator_write_page(2, eeprom_data);
   145bc:	4b05      	ldr	r3, [pc, #20]	; (145d4 <save_cal_data+0x120>)
   145be:	0019      	movs	r1, r3
   145c0:	2002      	movs	r0, #2
   145c2:	4b08      	ldr	r3, [pc, #32]	; (145e4 <save_cal_data+0x130>)
   145c4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   145c6:	4b08      	ldr	r3, [pc, #32]	; (145e8 <save_cal_data+0x134>)
   145c8:	4798      	blx	r3
}
   145ca:	46c0      	nop			; (mov r8, r8)
   145cc:	46bd      	mov	sp, r7
   145ce:	b002      	add	sp, #8
   145d0:	bd80      	pop	{r7, pc}
   145d2:	46c0      	nop			; (mov r8, r8)
   145d4:	20001000 	.word	0x20001000
   145d8:	20001410 	.word	0x20001410
   145dc:	20001418 	.word	0x20001418
   145e0:	200006a4 	.word	0x200006a4
   145e4:	000091f5 	.word	0x000091f5
   145e8:	0000939d 	.word	0x0000939d

000145ec <restore_cal_data>:

void restore_cal_data(bool autoCal)
{
   145ec:	b580      	push	{r7, lr}
   145ee:	b084      	sub	sp, #16
   145f0:	af00      	add	r7, sp, #0
   145f2:	0002      	movs	r2, r0
   145f4:	1dfb      	adds	r3, r7, #7
   145f6:	701a      	strb	r2, [r3, #0]
	eeprom_emulator_read_page(2, eeprom_data);
   145f8:	4b63      	ldr	r3, [pc, #396]	; (14788 <restore_cal_data+0x19c>)
   145fa:	0019      	movs	r1, r3
   145fc:	2002      	movs	r0, #2
   145fe:	4b63      	ldr	r3, [pc, #396]	; (1478c <restore_cal_data+0x1a0>)
   14600:	4798      	blx	r3
	int16_t temp = 0;
   14602:	230e      	movs	r3, #14
   14604:	18fb      	adds	r3, r7, r3
   14606:	2200      	movs	r2, #0
   14608:	801a      	strh	r2, [r3, #0]

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   1460a:	4b5f      	ldr	r3, [pc, #380]	; (14788 <restore_cal_data+0x19c>)
   1460c:	781b      	ldrb	r3, [r3, #0]
   1460e:	2bff      	cmp	r3, #255	; 0xff
   14610:	d121      	bne.n	14656 <restore_cal_data+0x6a>
   14612:	4b5d      	ldr	r3, [pc, #372]	; (14788 <restore_cal_data+0x19c>)
   14614:	785b      	ldrb	r3, [r3, #1]
   14616:	2bff      	cmp	r3, #255	; 0xff
   14618:	d11d      	bne.n	14656 <restore_cal_data+0x6a>
		gBiasRaw[0] = 0;
   1461a:	4b5d      	ldr	r3, [pc, #372]	; (14790 <restore_cal_data+0x1a4>)
   1461c:	2200      	movs	r2, #0
   1461e:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = 0;
   14620:	4b5b      	ldr	r3, [pc, #364]	; (14790 <restore_cal_data+0x1a4>)
   14622:	2200      	movs	r2, #0
   14624:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = 0;
   14626:	4b5a      	ldr	r3, [pc, #360]	; (14790 <restore_cal_data+0x1a4>)
   14628:	2200      	movs	r2, #0
   1462a:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = 0;
   1462c:	4b59      	ldr	r3, [pc, #356]	; (14794 <restore_cal_data+0x1a8>)
   1462e:	2200      	movs	r2, #0
   14630:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = 0;
   14632:	4b58      	ldr	r3, [pc, #352]	; (14794 <restore_cal_data+0x1a8>)
   14634:	2200      	movs	r2, #0
   14636:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = 0;
   14638:	4b56      	ldr	r3, [pc, #344]	; (14794 <restore_cal_data+0x1a8>)
   1463a:	2200      	movs	r2, #0
   1463c:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = 0;
   1463e:	4b56      	ldr	r3, [pc, #344]	; (14798 <restore_cal_data+0x1ac>)
   14640:	2200      	movs	r2, #0
   14642:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = 0;
   14644:	4b54      	ldr	r3, [pc, #336]	; (14798 <restore_cal_data+0x1ac>)
   14646:	2200      	movs	r2, #0
   14648:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = 0;
   1464a:	4b53      	ldr	r3, [pc, #332]	; (14798 <restore_cal_data+0x1ac>)
   1464c:	2200      	movs	r2, #0
   1464e:	809a      	strh	r2, [r3, #4]

		save_cal_data();
   14650:	4b52      	ldr	r3, [pc, #328]	; (1479c <restore_cal_data+0x1b0>)
   14652:	4798      	blx	r3
   14654:	e08f      	b.n	14776 <restore_cal_data+0x18a>
	}
	else{ // else restore the stored data
		gBiasRaw[0] = (temp | (eeprom_data[0] << 8) | eeprom_data[1]);
   14656:	4b4c      	ldr	r3, [pc, #304]	; (14788 <restore_cal_data+0x19c>)
   14658:	781b      	ldrb	r3, [r3, #0]
   1465a:	021b      	lsls	r3, r3, #8
   1465c:	b21a      	sxth	r2, r3
   1465e:	230e      	movs	r3, #14
   14660:	18fb      	adds	r3, r7, r3
   14662:	881b      	ldrh	r3, [r3, #0]
   14664:	4313      	orrs	r3, r2
   14666:	b21a      	sxth	r2, r3
   14668:	4b47      	ldr	r3, [pc, #284]	; (14788 <restore_cal_data+0x19c>)
   1466a:	785b      	ldrb	r3, [r3, #1]
   1466c:	b21b      	sxth	r3, r3
   1466e:	4313      	orrs	r3, r2
   14670:	b21a      	sxth	r2, r3
   14672:	4b47      	ldr	r3, [pc, #284]	; (14790 <restore_cal_data+0x1a4>)
   14674:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = (temp | (eeprom_data[2] << 8) | eeprom_data[3]);
   14676:	4b44      	ldr	r3, [pc, #272]	; (14788 <restore_cal_data+0x19c>)
   14678:	789b      	ldrb	r3, [r3, #2]
   1467a:	021b      	lsls	r3, r3, #8
   1467c:	b21a      	sxth	r2, r3
   1467e:	230e      	movs	r3, #14
   14680:	18fb      	adds	r3, r7, r3
   14682:	881b      	ldrh	r3, [r3, #0]
   14684:	4313      	orrs	r3, r2
   14686:	b21a      	sxth	r2, r3
   14688:	4b3f      	ldr	r3, [pc, #252]	; (14788 <restore_cal_data+0x19c>)
   1468a:	78db      	ldrb	r3, [r3, #3]
   1468c:	b21b      	sxth	r3, r3
   1468e:	4313      	orrs	r3, r2
   14690:	b21a      	sxth	r2, r3
   14692:	4b3f      	ldr	r3, [pc, #252]	; (14790 <restore_cal_data+0x1a4>)
   14694:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = (temp | (eeprom_data[4] << 8) | eeprom_data[5]);
   14696:	4b3c      	ldr	r3, [pc, #240]	; (14788 <restore_cal_data+0x19c>)
   14698:	791b      	ldrb	r3, [r3, #4]
   1469a:	021b      	lsls	r3, r3, #8
   1469c:	b21a      	sxth	r2, r3
   1469e:	230e      	movs	r3, #14
   146a0:	18fb      	adds	r3, r7, r3
   146a2:	881b      	ldrh	r3, [r3, #0]
   146a4:	4313      	orrs	r3, r2
   146a6:	b21a      	sxth	r2, r3
   146a8:	4b37      	ldr	r3, [pc, #220]	; (14788 <restore_cal_data+0x19c>)
   146aa:	795b      	ldrb	r3, [r3, #5]
   146ac:	b21b      	sxth	r3, r3
   146ae:	4313      	orrs	r3, r2
   146b0:	b21a      	sxth	r2, r3
   146b2:	4b37      	ldr	r3, [pc, #220]	; (14790 <restore_cal_data+0x1a4>)
   146b4:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = (temp | (eeprom_data[6] << 8) | eeprom_data[7]);
   146b6:	4b34      	ldr	r3, [pc, #208]	; (14788 <restore_cal_data+0x19c>)
   146b8:	799b      	ldrb	r3, [r3, #6]
   146ba:	021b      	lsls	r3, r3, #8
   146bc:	b21a      	sxth	r2, r3
   146be:	230e      	movs	r3, #14
   146c0:	18fb      	adds	r3, r7, r3
   146c2:	881b      	ldrh	r3, [r3, #0]
   146c4:	4313      	orrs	r3, r2
   146c6:	b21a      	sxth	r2, r3
   146c8:	4b2f      	ldr	r3, [pc, #188]	; (14788 <restore_cal_data+0x19c>)
   146ca:	79db      	ldrb	r3, [r3, #7]
   146cc:	b21b      	sxth	r3, r3
   146ce:	4313      	orrs	r3, r2
   146d0:	b21a      	sxth	r2, r3
   146d2:	4b30      	ldr	r3, [pc, #192]	; (14794 <restore_cal_data+0x1a8>)
   146d4:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = (temp | (eeprom_data[8] << 8) | eeprom_data[9]);
   146d6:	4b2c      	ldr	r3, [pc, #176]	; (14788 <restore_cal_data+0x19c>)
   146d8:	7a1b      	ldrb	r3, [r3, #8]
   146da:	021b      	lsls	r3, r3, #8
   146dc:	b21a      	sxth	r2, r3
   146de:	230e      	movs	r3, #14
   146e0:	18fb      	adds	r3, r7, r3
   146e2:	881b      	ldrh	r3, [r3, #0]
   146e4:	4313      	orrs	r3, r2
   146e6:	b21a      	sxth	r2, r3
   146e8:	4b27      	ldr	r3, [pc, #156]	; (14788 <restore_cal_data+0x19c>)
   146ea:	7a5b      	ldrb	r3, [r3, #9]
   146ec:	b21b      	sxth	r3, r3
   146ee:	4313      	orrs	r3, r2
   146f0:	b21a      	sxth	r2, r3
   146f2:	4b28      	ldr	r3, [pc, #160]	; (14794 <restore_cal_data+0x1a8>)
   146f4:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = (temp | (eeprom_data[10] << 8) | eeprom_data[11]);
   146f6:	4b24      	ldr	r3, [pc, #144]	; (14788 <restore_cal_data+0x19c>)
   146f8:	7a9b      	ldrb	r3, [r3, #10]
   146fa:	021b      	lsls	r3, r3, #8
   146fc:	b21a      	sxth	r2, r3
   146fe:	230e      	movs	r3, #14
   14700:	18fb      	adds	r3, r7, r3
   14702:	881b      	ldrh	r3, [r3, #0]
   14704:	4313      	orrs	r3, r2
   14706:	b21a      	sxth	r2, r3
   14708:	4b1f      	ldr	r3, [pc, #124]	; (14788 <restore_cal_data+0x19c>)
   1470a:	7adb      	ldrb	r3, [r3, #11]
   1470c:	b21b      	sxth	r3, r3
   1470e:	4313      	orrs	r3, r2
   14710:	b21a      	sxth	r2, r3
   14712:	4b20      	ldr	r3, [pc, #128]	; (14794 <restore_cal_data+0x1a8>)
   14714:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = (temp | (eeprom_data[12] << 8) | eeprom_data[13]);
   14716:	4b1c      	ldr	r3, [pc, #112]	; (14788 <restore_cal_data+0x19c>)
   14718:	7b1b      	ldrb	r3, [r3, #12]
   1471a:	021b      	lsls	r3, r3, #8
   1471c:	b21a      	sxth	r2, r3
   1471e:	230e      	movs	r3, #14
   14720:	18fb      	adds	r3, r7, r3
   14722:	881b      	ldrh	r3, [r3, #0]
   14724:	4313      	orrs	r3, r2
   14726:	b21a      	sxth	r2, r3
   14728:	4b17      	ldr	r3, [pc, #92]	; (14788 <restore_cal_data+0x19c>)
   1472a:	7b5b      	ldrb	r3, [r3, #13]
   1472c:	b21b      	sxth	r3, r3
   1472e:	4313      	orrs	r3, r2
   14730:	b21a      	sxth	r2, r3
   14732:	4b19      	ldr	r3, [pc, #100]	; (14798 <restore_cal_data+0x1ac>)
   14734:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = (temp | (eeprom_data[14] << 8) | eeprom_data[15]);
   14736:	4b14      	ldr	r3, [pc, #80]	; (14788 <restore_cal_data+0x19c>)
   14738:	7b9b      	ldrb	r3, [r3, #14]
   1473a:	021b      	lsls	r3, r3, #8
   1473c:	b21a      	sxth	r2, r3
   1473e:	230e      	movs	r3, #14
   14740:	18fb      	adds	r3, r7, r3
   14742:	881b      	ldrh	r3, [r3, #0]
   14744:	4313      	orrs	r3, r2
   14746:	b21a      	sxth	r2, r3
   14748:	4b0f      	ldr	r3, [pc, #60]	; (14788 <restore_cal_data+0x19c>)
   1474a:	7bdb      	ldrb	r3, [r3, #15]
   1474c:	b21b      	sxth	r3, r3
   1474e:	4313      	orrs	r3, r2
   14750:	b21a      	sxth	r2, r3
   14752:	4b11      	ldr	r3, [pc, #68]	; (14798 <restore_cal_data+0x1ac>)
   14754:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = (temp | (eeprom_data[16] << 8) | eeprom_data[17]);
   14756:	4b0c      	ldr	r3, [pc, #48]	; (14788 <restore_cal_data+0x19c>)
   14758:	7c1b      	ldrb	r3, [r3, #16]
   1475a:	021b      	lsls	r3, r3, #8
   1475c:	b21a      	sxth	r2, r3
   1475e:	230e      	movs	r3, #14
   14760:	18fb      	adds	r3, r7, r3
   14762:	881b      	ldrh	r3, [r3, #0]
   14764:	4313      	orrs	r3, r2
   14766:	b21a      	sxth	r2, r3
   14768:	4b07      	ldr	r3, [pc, #28]	; (14788 <restore_cal_data+0x19c>)
   1476a:	7c5b      	ldrb	r3, [r3, #17]
   1476c:	b21b      	sxth	r3, r3
   1476e:	4313      	orrs	r3, r2
   14770:	b21a      	sxth	r2, r3
   14772:	4b09      	ldr	r3, [pc, #36]	; (14798 <restore_cal_data+0x1ac>)
   14774:	809a      	strh	r2, [r3, #4]
	}
	
	_autoCalc = autoCal;
   14776:	4b0a      	ldr	r3, [pc, #40]	; (147a0 <restore_cal_data+0x1b4>)
   14778:	1dfa      	adds	r2, r7, #7
   1477a:	7812      	ldrb	r2, [r2, #0]
   1477c:	701a      	strb	r2, [r3, #0]
}
   1477e:	46c0      	nop			; (mov r8, r8)
   14780:	46bd      	mov	sp, r7
   14782:	b004      	add	sp, #16
   14784:	bd80      	pop	{r7, pc}
   14786:	46c0      	nop			; (mov r8, r8)
   14788:	20001000 	.word	0x20001000
   1478c:	00009301 	.word	0x00009301
   14790:	20001410 	.word	0x20001410
   14794:	20001418 	.word	0x20001418
   14798:	200006a4 	.word	0x200006a4
   1479c:	000144b5 	.word	0x000144b5
   147a0:	20000dcc 	.word	0x20000dcc

000147a4 <save_orientation_controls_remote_esc_lights>:

void save_orientation_controls_remote_esc_lights()
{
   147a4:	b580      	push	{r7, lr}
   147a6:	b082      	sub	sp, #8
   147a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   147aa:	2300      	movs	r3, #0
   147ac:	607b      	str	r3, [r7, #4]
   147ae:	e005      	b.n	147bc <save_orientation_controls_remote_esc_lights+0x18>
		eeprom_data[0] = 0;
   147b0:	4b53      	ldr	r3, [pc, #332]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   147b2:	2200      	movs	r2, #0
   147b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
   147b6:	687b      	ldr	r3, [r7, #4]
   147b8:	3301      	adds	r3, #1
   147ba:	607b      	str	r3, [r7, #4]
   147bc:	687b      	ldr	r3, [r7, #4]
   147be:	2b3b      	cmp	r3, #59	; 0x3b
   147c0:	ddf6      	ble.n	147b0 <save_orientation_controls_remote_esc_lights+0xc>
	}

	eeprom_data[0] = ORIENTATION[0];
   147c2:	4b50      	ldr	r3, [pc, #320]	; (14904 <save_orientation_controls_remote_esc_lights+0x160>)
   147c4:	781a      	ldrb	r2, [r3, #0]
   147c6:	4b4e      	ldr	r3, [pc, #312]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   147c8:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ORIENTATION[1];
   147ca:	4b4e      	ldr	r3, [pc, #312]	; (14904 <save_orientation_controls_remote_esc_lights+0x160>)
   147cc:	785a      	ldrb	r2, [r3, #1]
   147ce:	4b4c      	ldr	r3, [pc, #304]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   147d0:	705a      	strb	r2, [r3, #1]

	eeprom_data[2] = ((AUX_ENABLED << 1) | TURN_ENABLED);
   147d2:	4b4d      	ldr	r3, [pc, #308]	; (14908 <save_orientation_controls_remote_esc_lights+0x164>)
   147d4:	781b      	ldrb	r3, [r3, #0]
   147d6:	005b      	lsls	r3, r3, #1
   147d8:	b25a      	sxtb	r2, r3
   147da:	4b4c      	ldr	r3, [pc, #304]	; (1490c <save_orientation_controls_remote_esc_lights+0x168>)
   147dc:	781b      	ldrb	r3, [r3, #0]
   147de:	b25b      	sxtb	r3, r3
   147e0:	4313      	orrs	r3, r2
   147e2:	b25b      	sxtb	r3, r3
   147e4:	b2da      	uxtb	r2, r3
   147e6:	4b46      	ldr	r3, [pc, #280]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   147e8:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = auxControlType;
   147ea:	4b49      	ldr	r3, [pc, #292]	; (14910 <save_orientation_controls_remote_esc_lights+0x16c>)
   147ec:	781a      	ldrb	r2, [r3, #0]
   147ee:	4b44      	ldr	r3, [pc, #272]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   147f0:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = auxTimedDuration;
   147f2:	4b48      	ldr	r3, [pc, #288]	; (14914 <save_orientation_controls_remote_esc_lights+0x170>)
   147f4:	781a      	ldrb	r2, [r3, #0]
   147f6:	4b42      	ldr	r3, [pc, #264]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   147f8:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = single_aux_control;
   147fa:	4b47      	ldr	r3, [pc, #284]	; (14918 <save_orientation_controls_remote_esc_lights+0x174>)
   147fc:	781a      	ldrb	r2, [r3, #0]
   147fe:	4b40      	ldr	r3, [pc, #256]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14800:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = single_all_control;
   14802:	4b46      	ldr	r3, [pc, #280]	; (1491c <save_orientation_controls_remote_esc_lights+0x178>)
   14804:	781a      	ldrb	r2, [r3, #0]
   14806:	4b3e      	ldr	r3, [pc, #248]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14808:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = single_head_control;
   1480a:	4b45      	ldr	r3, [pc, #276]	; (14920 <save_orientation_controls_remote_esc_lights+0x17c>)
   1480c:	781a      	ldrb	r2, [r3, #0]
   1480e:	4b3c      	ldr	r3, [pc, #240]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14810:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = single_side_control;
   14812:	4b44      	ldr	r3, [pc, #272]	; (14924 <save_orientation_controls_remote_esc_lights+0x180>)
   14814:	781a      	ldrb	r2, [r3, #0]
   14816:	4b3a      	ldr	r3, [pc, #232]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14818:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = single_up_control;
   1481a:	4b43      	ldr	r3, [pc, #268]	; (14928 <save_orientation_controls_remote_esc_lights+0x184>)
   1481c:	781a      	ldrb	r2, [r3, #0]
   1481e:	4b38      	ldr	r3, [pc, #224]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14820:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = single_down_control;
   14822:	4b42      	ldr	r3, [pc, #264]	; (1492c <save_orientation_controls_remote_esc_lights+0x188>)
   14824:	781a      	ldrb	r2, [r3, #0]
   14826:	4b36      	ldr	r3, [pc, #216]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14828:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = dual_aux_control;
   1482a:	4b41      	ldr	r3, [pc, #260]	; (14930 <save_orientation_controls_remote_esc_lights+0x18c>)
   1482c:	781a      	ldrb	r2, [r3, #0]
   1482e:	4b34      	ldr	r3, [pc, #208]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14830:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = dual_all_control;
   14832:	4b40      	ldr	r3, [pc, #256]	; (14934 <save_orientation_controls_remote_esc_lights+0x190>)
   14834:	781a      	ldrb	r2, [r3, #0]
   14836:	4b32      	ldr	r3, [pc, #200]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14838:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = dual_head_control;
   1483a:	4b3f      	ldr	r3, [pc, #252]	; (14938 <save_orientation_controls_remote_esc_lights+0x194>)
   1483c:	781a      	ldrb	r2, [r3, #0]
   1483e:	4b30      	ldr	r3, [pc, #192]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14840:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = dual_side_control;
   14842:	4b3e      	ldr	r3, [pc, #248]	; (1493c <save_orientation_controls_remote_esc_lights+0x198>)
   14844:	781a      	ldrb	r2, [r3, #0]
   14846:	4b2e      	ldr	r3, [pc, #184]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14848:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = dual_up_control;
   1484a:	4b3d      	ldr	r3, [pc, #244]	; (14940 <save_orientation_controls_remote_esc_lights+0x19c>)
   1484c:	781a      	ldrb	r2, [r3, #0]
   1484e:	4b2c      	ldr	r3, [pc, #176]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14850:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = dual_down_control;
   14852:	4b3c      	ldr	r3, [pc, #240]	; (14944 <save_orientation_controls_remote_esc_lights+0x1a0>)
   14854:	781a      	ldrb	r2, [r3, #0]
   14856:	4b2a      	ldr	r3, [pc, #168]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14858:	741a      	strb	r2, [r3, #16]

	eeprom_data[17] = ((remote_type << 4) | (button_type & 0x0F));
   1485a:	4b3b      	ldr	r3, [pc, #236]	; (14948 <save_orientation_controls_remote_esc_lights+0x1a4>)
   1485c:	781b      	ldrb	r3, [r3, #0]
   1485e:	011b      	lsls	r3, r3, #4
   14860:	b25a      	sxtb	r2, r3
   14862:	4b3a      	ldr	r3, [pc, #232]	; (1494c <save_orientation_controls_remote_esc_lights+0x1a8>)
   14864:	781b      	ldrb	r3, [r3, #0]
   14866:	b25b      	sxtb	r3, r3
   14868:	210f      	movs	r1, #15
   1486a:	400b      	ands	r3, r1
   1486c:	b25b      	sxtb	r3, r3
   1486e:	4313      	orrs	r3, r2
   14870:	b25b      	sxtb	r3, r3
   14872:	b2da      	uxtb	r2, r3
   14874:	4b22      	ldr	r3, [pc, #136]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14876:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = deadzone;
   14878:	4b35      	ldr	r3, [pc, #212]	; (14950 <save_orientation_controls_remote_esc_lights+0x1ac>)
   1487a:	781a      	ldrb	r2, [r3, #0]
   1487c:	4b20      	ldr	r3, [pc, #128]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   1487e:	749a      	strb	r2, [r3, #18]
	
	eeprom_data[19] = esc_fw;
   14880:	4b34      	ldr	r3, [pc, #208]	; (14954 <save_orientation_controls_remote_esc_lights+0x1b0>)
   14882:	781a      	ldrb	r2, [r3, #0]
   14884:	4b1e      	ldr	r3, [pc, #120]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   14886:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = ((esc_comms << 4) | (UART_baud & 0x0F));//*/
   14888:	4b33      	ldr	r3, [pc, #204]	; (14958 <save_orientation_controls_remote_esc_lights+0x1b4>)
   1488a:	781b      	ldrb	r3, [r3, #0]
   1488c:	011b      	lsls	r3, r3, #4
   1488e:	b25a      	sxtb	r2, r3
   14890:	4b32      	ldr	r3, [pc, #200]	; (1495c <save_orientation_controls_remote_esc_lights+0x1b8>)
   14892:	781b      	ldrb	r3, [r3, #0]
   14894:	b25b      	sxtb	r3, r3
   14896:	210f      	movs	r1, #15
   14898:	400b      	ands	r3, r1
   1489a:	b25b      	sxtb	r3, r3
   1489c:	4313      	orrs	r3, r2
   1489e:	b25b      	sxtb	r3, r3
   148a0:	b2da      	uxtb	r2, r3
   148a2:	4b17      	ldr	r3, [pc, #92]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   148a4:	751a      	strb	r2, [r3, #20]
	
	eeprom_data[21] = (RGB_led_type << 4) | brake_light_mode;
   148a6:	4b2e      	ldr	r3, [pc, #184]	; (14960 <save_orientation_controls_remote_esc_lights+0x1bc>)
   148a8:	781b      	ldrb	r3, [r3, #0]
   148aa:	011b      	lsls	r3, r3, #4
   148ac:	b25a      	sxtb	r2, r3
   148ae:	4b2d      	ldr	r3, [pc, #180]	; (14964 <save_orientation_controls_remote_esc_lights+0x1c0>)
   148b0:	781b      	ldrb	r3, [r3, #0]
   148b2:	b25b      	sxtb	r3, r3
   148b4:	4313      	orrs	r3, r2
   148b6:	b25b      	sxtb	r3, r3
   148b8:	b2da      	uxtb	r2, r3
   148ba:	4b11      	ldr	r3, [pc, #68]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   148bc:	755a      	strb	r2, [r3, #21]
	eeprom_data[22] = deadzone;
   148be:	4b24      	ldr	r3, [pc, #144]	; (14950 <save_orientation_controls_remote_esc_lights+0x1ac>)
   148c0:	781a      	ldrb	r2, [r3, #0]
   148c2:	4b0f      	ldr	r3, [pc, #60]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   148c4:	759a      	strb	r2, [r3, #22]
	eeprom_data[23] = led_num;
   148c6:	4b28      	ldr	r3, [pc, #160]	; (14968 <save_orientation_controls_remote_esc_lights+0x1c4>)
   148c8:	781a      	ldrb	r2, [r3, #0]
   148ca:	4b0d      	ldr	r3, [pc, #52]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   148cc:	75da      	strb	r2, [r3, #23]
	eeprom_data[24] = (SYNC_RGB << 7) | (BRAKE_ALWAYS_ON << 6);
   148ce:	4b27      	ldr	r3, [pc, #156]	; (1496c <save_orientation_controls_remote_esc_lights+0x1c8>)
   148d0:	781b      	ldrb	r3, [r3, #0]
   148d2:	01db      	lsls	r3, r3, #7
   148d4:	b25a      	sxtb	r2, r3
   148d6:	4b26      	ldr	r3, [pc, #152]	; (14970 <save_orientation_controls_remote_esc_lights+0x1cc>)
   148d8:	781b      	ldrb	r3, [r3, #0]
   148da:	019b      	lsls	r3, r3, #6
   148dc:	b25b      	sxtb	r3, r3
   148de:	4313      	orrs	r3, r2
   148e0:	b25b      	sxtb	r3, r3
   148e2:	b2da      	uxtb	r2, r3
   148e4:	4b06      	ldr	r3, [pc, #24]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   148e6:	761a      	strb	r2, [r3, #24]

	//Write EEPROM data
	eeprom_emulator_write_page(3, eeprom_data);
   148e8:	4b05      	ldr	r3, [pc, #20]	; (14900 <save_orientation_controls_remote_esc_lights+0x15c>)
   148ea:	0019      	movs	r1, r3
   148ec:	2003      	movs	r0, #3
   148ee:	4b21      	ldr	r3, [pc, #132]	; (14974 <save_orientation_controls_remote_esc_lights+0x1d0>)
   148f0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   148f2:	4b21      	ldr	r3, [pc, #132]	; (14978 <save_orientation_controls_remote_esc_lights+0x1d4>)
   148f4:	4798      	blx	r3
}
   148f6:	46c0      	nop			; (mov r8, r8)
   148f8:	46bd      	mov	sp, r7
   148fa:	b002      	add	sp, #8
   148fc:	bd80      	pop	{r7, pc}
   148fe:	46c0      	nop			; (mov r8, r8)
   14900:	20001000 	.word	0x20001000
   14904:	200000e0 	.word	0x200000e0
   14908:	20000402 	.word	0x20000402
   1490c:	20000403 	.word	0x20000403
   14910:	20000406 	.word	0x20000406
   14914:	20000407 	.word	0x20000407
   14918:	20000408 	.word	0x20000408
   1491c:	20000409 	.word	0x20000409
   14920:	2000040a 	.word	0x2000040a
   14924:	2000040b 	.word	0x2000040b
   14928:	2000040c 	.word	0x2000040c
   1492c:	2000040d 	.word	0x2000040d
   14930:	2000040e 	.word	0x2000040e
   14934:	2000040f 	.word	0x2000040f
   14938:	20000410 	.word	0x20000410
   1493c:	20000411 	.word	0x20000411
   14940:	20000412 	.word	0x20000412
   14944:	20000413 	.word	0x20000413
   14948:	2000038c 	.word	0x2000038c
   1494c:	2000038d 	.word	0x2000038d
   14950:	200000dc 	.word	0x200000dc
   14954:	200000db 	.word	0x200000db
   14958:	2000038a 	.word	0x2000038a
   1495c:	2000038b 	.word	0x2000038b
   14960:	20001a4c 	.word	0x20001a4c
   14964:	2000036e 	.word	0x2000036e
   14968:	200000d8 	.word	0x200000d8
   1496c:	200000ca 	.word	0x200000ca
   14970:	200000cb 	.word	0x200000cb
   14974:	000091f5 	.word	0x000091f5
   14978:	0000939d 	.word	0x0000939d

0001497c <restore_orientation_controls_remote_esc_lights>:

void restore_orientation_controls_remote_esc_lights()
{
   1497c:	b580      	push	{r7, lr}
   1497e:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(3, eeprom_data);
   14980:	4b85      	ldr	r3, [pc, #532]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14982:	0019      	movs	r1, r3
   14984:	2003      	movs	r0, #3
   14986:	4b85      	ldr	r3, [pc, #532]	; (14b9c <restore_orientation_controls_remote_esc_lights+0x220>)
   14988:	4798      	blx	r3

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
   1498a:	4b83      	ldr	r3, [pc, #524]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   1498c:	781b      	ldrb	r3, [r3, #0]
   1498e:	2bff      	cmp	r3, #255	; 0xff
   14990:	d160      	bne.n	14a54 <restore_orientation_controls_remote_esc_lights+0xd8>
   14992:	4b81      	ldr	r3, [pc, #516]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14994:	785b      	ldrb	r3, [r3, #1]
   14996:	2bff      	cmp	r3, #255	; 0xff
   14998:	d15c      	bne.n	14a54 <restore_orientation_controls_remote_esc_lights+0xd8>
		ORIENTATION[0] = 1; // Connectors up
   1499a:	4b81      	ldr	r3, [pc, #516]	; (14ba0 <restore_orientation_controls_remote_esc_lights+0x224>)
   1499c:	2201      	movs	r2, #1
   1499e:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = 6; // Power front
   149a0:	4b7f      	ldr	r3, [pc, #508]	; (14ba0 <restore_orientation_controls_remote_esc_lights+0x224>)
   149a2:	2206      	movs	r2, #6
   149a4:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = 0; // Aux disabled
   149a6:	4b7f      	ldr	r3, [pc, #508]	; (14ba4 <restore_orientation_controls_remote_esc_lights+0x228>)
   149a8:	2200      	movs	r2, #0
   149aa:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = 0; // Turn disabled
   149ac:	4b7e      	ldr	r3, [pc, #504]	; (14ba8 <restore_orientation_controls_remote_esc_lights+0x22c>)
   149ae:	2200      	movs	r2, #0
   149b0:	701a      	strb	r2, [r3, #0]
		auxControlType = AUX_MOMENTARY;
   149b2:	4b7e      	ldr	r3, [pc, #504]	; (14bac <restore_orientation_controls_remote_esc_lights+0x230>)
   149b4:	2200      	movs	r2, #0
   149b6:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = 10; // 1 second
   149b8:	4b7d      	ldr	r3, [pc, #500]	; (14bb0 <restore_orientation_controls_remote_esc_lights+0x234>)
   149ba:	220a      	movs	r2, #10
   149bc:	701a      	strb	r2, [r3, #0]
		single_aux_control = PRESS_NONE;
   149be:	4b7d      	ldr	r3, [pc, #500]	; (14bb4 <restore_orientation_controls_remote_esc_lights+0x238>)
   149c0:	2200      	movs	r2, #0
   149c2:	701a      	strb	r2, [r3, #0]
		single_all_control = SINGLE_TAP;
   149c4:	4b7c      	ldr	r3, [pc, #496]	; (14bb8 <restore_orientation_controls_remote_esc_lights+0x23c>)
   149c6:	2201      	movs	r2, #1
   149c8:	701a      	strb	r2, [r3, #0]
		single_head_control = MEDIUM_PRESS;
   149ca:	4b7c      	ldr	r3, [pc, #496]	; (14bbc <restore_orientation_controls_remote_esc_lights+0x240>)
   149cc:	2206      	movs	r2, #6
   149ce:	701a      	strb	r2, [r3, #0]
		single_side_control = LONG_PRESS;
   149d0:	4b7b      	ldr	r3, [pc, #492]	; (14bc0 <restore_orientation_controls_remote_esc_lights+0x244>)
   149d2:	2207      	movs	r2, #7
   149d4:	701a      	strb	r2, [r3, #0]
		single_up_control = DOUBLE_TAP;
   149d6:	4b7b      	ldr	r3, [pc, #492]	; (14bc4 <restore_orientation_controls_remote_esc_lights+0x248>)
   149d8:	2202      	movs	r2, #2
   149da:	701a      	strb	r2, [r3, #0]
		single_down_control = TRIPLE_TAP;
   149dc:	4b7a      	ldr	r3, [pc, #488]	; (14bc8 <restore_orientation_controls_remote_esc_lights+0x24c>)
   149de:	2203      	movs	r2, #3
   149e0:	701a      	strb	r2, [r3, #0]
		dual_aux_control = PRESS_NONE;
   149e2:	4b7a      	ldr	r3, [pc, #488]	; (14bcc <restore_orientation_controls_remote_esc_lights+0x250>)
   149e4:	2200      	movs	r2, #0
   149e6:	701a      	strb	r2, [r3, #0]
		dual_all_control = SINGLE_TAP;
   149e8:	4b79      	ldr	r3, [pc, #484]	; (14bd0 <restore_orientation_controls_remote_esc_lights+0x254>)
   149ea:	2201      	movs	r2, #1
   149ec:	701a      	strb	r2, [r3, #0]
		dual_head_control = MEDIUM_PRESS;
   149ee:	4b79      	ldr	r3, [pc, #484]	; (14bd4 <restore_orientation_controls_remote_esc_lights+0x258>)
   149f0:	2206      	movs	r2, #6
   149f2:	701a      	strb	r2, [r3, #0]
		dual_side_control = LONG_PRESS;
   149f4:	4b78      	ldr	r3, [pc, #480]	; (14bd8 <restore_orientation_controls_remote_esc_lights+0x25c>)
   149f6:	2207      	movs	r2, #7
   149f8:	701a      	strb	r2, [r3, #0]
		dual_up_control =  RIGHT_TAP;
   149fa:	4b78      	ldr	r3, [pc, #480]	; (14bdc <restore_orientation_controls_remote_esc_lights+0x260>)
   149fc:	2205      	movs	r2, #5
   149fe:	701a      	strb	r2, [r3, #0]
		dual_down_control = LEFT_TAP;
   14a00:	4b77      	ldr	r3, [pc, #476]	; (14be0 <restore_orientation_controls_remote_esc_lights+0x264>)
   14a02:	2204      	movs	r2, #4
   14a04:	701a      	strb	r2, [r3, #0]

		remote_type = 0;
   14a06:	4b77      	ldr	r3, [pc, #476]	; (14be4 <restore_orientation_controls_remote_esc_lights+0x268>)
   14a08:	2200      	movs	r2, #0
   14a0a:	701a      	strb	r2, [r3, #0]
		deadzone = 10;
   14a0c:	4b76      	ldr	r3, [pc, #472]	; (14be8 <restore_orientation_controls_remote_esc_lights+0x26c>)
   14a0e:	220a      	movs	r2, #10
   14a10:	701a      	strb	r2, [r3, #0]
		button_type = 1;
   14a12:	4b76      	ldr	r3, [pc, #472]	; (14bec <restore_orientation_controls_remote_esc_lights+0x270>)
   14a14:	2201      	movs	r2, #1
   14a16:	701a      	strb	r2, [r3, #0]

		esc_fw = FW_3v00; // Set 3.0 as the default FW to prevent bricking any ESCs
   14a18:	4b75      	ldr	r3, [pc, #468]	; (14bf0 <restore_orientation_controls_remote_esc_lights+0x274>)
   14a1a:	2201      	movs	r2, #1
   14a1c:	701a      	strb	r2, [r3, #0]
		esc_comms = 2;
   14a1e:	4b75      	ldr	r3, [pc, #468]	; (14bf4 <restore_orientation_controls_remote_esc_lights+0x278>)
   14a20:	2202      	movs	r2, #2
   14a22:	701a      	strb	r2, [r3, #0]
		UART_baud = 3;
   14a24:	4b74      	ldr	r3, [pc, #464]	; (14bf8 <restore_orientation_controls_remote_esc_lights+0x27c>)
   14a26:	2203      	movs	r2, #3
   14a28:	701a      	strb	r2, [r3, #0]

		RGB_led_type = RGB_ANALOG;
   14a2a:	4b74      	ldr	r3, [pc, #464]	; (14bfc <restore_orientation_controls_remote_esc_lights+0x280>)
   14a2c:	2200      	movs	r2, #0
   14a2e:	701a      	strb	r2, [r3, #0]
		brake_light_mode = BRAKE_FADE;
   14a30:	4b73      	ldr	r3, [pc, #460]	; (14c00 <restore_orientation_controls_remote_esc_lights+0x284>)
   14a32:	2200      	movs	r2, #0
   14a34:	701a      	strb	r2, [r3, #0]
		deadzone = 10;
   14a36:	4b6c      	ldr	r3, [pc, #432]	; (14be8 <restore_orientation_controls_remote_esc_lights+0x26c>)
   14a38:	220a      	movs	r2, #10
   14a3a:	701a      	strb	r2, [r3, #0]
		led_num = 30;
   14a3c:	4b71      	ldr	r3, [pc, #452]	; (14c04 <restore_orientation_controls_remote_esc_lights+0x288>)
   14a3e:	221e      	movs	r2, #30
   14a40:	701a      	strb	r2, [r3, #0]
		SYNC_RGB = true;
   14a42:	4b71      	ldr	r3, [pc, #452]	; (14c08 <restore_orientation_controls_remote_esc_lights+0x28c>)
   14a44:	2201      	movs	r2, #1
   14a46:	701a      	strb	r2, [r3, #0]
		BRAKE_ALWAYS_ON = false;
   14a48:	4b70      	ldr	r3, [pc, #448]	; (14c0c <restore_orientation_controls_remote_esc_lights+0x290>)
   14a4a:	2200      	movs	r2, #0
   14a4c:	701a      	strb	r2, [r3, #0]

		save_orientation_controls_remote_esc_lights();
   14a4e:	4b70      	ldr	r3, [pc, #448]	; (14c10 <restore_orientation_controls_remote_esc_lights+0x294>)
   14a50:	4798      	blx	r3
   14a52:	e09d      	b.n	14b90 <restore_orientation_controls_remote_esc_lights+0x214>
	}
	else { // else restore the stored data
		ORIENTATION[0] = eeprom_data[0];
   14a54:	4b50      	ldr	r3, [pc, #320]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a56:	781a      	ldrb	r2, [r3, #0]
   14a58:	4b51      	ldr	r3, [pc, #324]	; (14ba0 <restore_orientation_controls_remote_esc_lights+0x224>)
   14a5a:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = eeprom_data[1];
   14a5c:	4b4e      	ldr	r3, [pc, #312]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a5e:	785a      	ldrb	r2, [r3, #1]
   14a60:	4b4f      	ldr	r3, [pc, #316]	; (14ba0 <restore_orientation_controls_remote_esc_lights+0x224>)
   14a62:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = (eeprom_data[2] & 0x02) >> 1;
   14a64:	4b4c      	ldr	r3, [pc, #304]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a66:	789b      	ldrb	r3, [r3, #2]
   14a68:	105b      	asrs	r3, r3, #1
   14a6a:	2201      	movs	r2, #1
   14a6c:	4013      	ands	r3, r2
   14a6e:	1e5a      	subs	r2, r3, #1
   14a70:	4193      	sbcs	r3, r2
   14a72:	b2da      	uxtb	r2, r3
   14a74:	4b4b      	ldr	r3, [pc, #300]	; (14ba4 <restore_orientation_controls_remote_esc_lights+0x228>)
   14a76:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = (eeprom_data[2] & 0x01);
   14a78:	4b47      	ldr	r3, [pc, #284]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a7a:	789b      	ldrb	r3, [r3, #2]
   14a7c:	001a      	movs	r2, r3
   14a7e:	2301      	movs	r3, #1
   14a80:	4013      	ands	r3, r2
   14a82:	1e5a      	subs	r2, r3, #1
   14a84:	4193      	sbcs	r3, r2
   14a86:	b2da      	uxtb	r2, r3
   14a88:	4b47      	ldr	r3, [pc, #284]	; (14ba8 <restore_orientation_controls_remote_esc_lights+0x22c>)
   14a8a:	701a      	strb	r2, [r3, #0]
		auxControlType = eeprom_data[3];
   14a8c:	4b42      	ldr	r3, [pc, #264]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a8e:	78da      	ldrb	r2, [r3, #3]
   14a90:	4b46      	ldr	r3, [pc, #280]	; (14bac <restore_orientation_controls_remote_esc_lights+0x230>)
   14a92:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = eeprom_data[4];
   14a94:	4b40      	ldr	r3, [pc, #256]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a96:	791a      	ldrb	r2, [r3, #4]
   14a98:	4b45      	ldr	r3, [pc, #276]	; (14bb0 <restore_orientation_controls_remote_esc_lights+0x234>)
   14a9a:	701a      	strb	r2, [r3, #0]
		single_aux_control = eeprom_data[5];
   14a9c:	4b3e      	ldr	r3, [pc, #248]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14a9e:	795a      	ldrb	r2, [r3, #5]
   14aa0:	4b44      	ldr	r3, [pc, #272]	; (14bb4 <restore_orientation_controls_remote_esc_lights+0x238>)
   14aa2:	701a      	strb	r2, [r3, #0]
		single_all_control = eeprom_data[6];
   14aa4:	4b3c      	ldr	r3, [pc, #240]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14aa6:	799a      	ldrb	r2, [r3, #6]
   14aa8:	4b43      	ldr	r3, [pc, #268]	; (14bb8 <restore_orientation_controls_remote_esc_lights+0x23c>)
   14aaa:	701a      	strb	r2, [r3, #0]
		single_head_control = eeprom_data[7];
   14aac:	4b3a      	ldr	r3, [pc, #232]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14aae:	79da      	ldrb	r2, [r3, #7]
   14ab0:	4b42      	ldr	r3, [pc, #264]	; (14bbc <restore_orientation_controls_remote_esc_lights+0x240>)
   14ab2:	701a      	strb	r2, [r3, #0]
		single_side_control = eeprom_data[8];
   14ab4:	4b38      	ldr	r3, [pc, #224]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14ab6:	7a1a      	ldrb	r2, [r3, #8]
   14ab8:	4b41      	ldr	r3, [pc, #260]	; (14bc0 <restore_orientation_controls_remote_esc_lights+0x244>)
   14aba:	701a      	strb	r2, [r3, #0]
		single_up_control = eeprom_data[9];
   14abc:	4b36      	ldr	r3, [pc, #216]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14abe:	7a5a      	ldrb	r2, [r3, #9]
   14ac0:	4b40      	ldr	r3, [pc, #256]	; (14bc4 <restore_orientation_controls_remote_esc_lights+0x248>)
   14ac2:	701a      	strb	r2, [r3, #0]
		single_down_control = eeprom_data[10];
   14ac4:	4b34      	ldr	r3, [pc, #208]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14ac6:	7a9a      	ldrb	r2, [r3, #10]
   14ac8:	4b3f      	ldr	r3, [pc, #252]	; (14bc8 <restore_orientation_controls_remote_esc_lights+0x24c>)
   14aca:	701a      	strb	r2, [r3, #0]
		dual_aux_control = eeprom_data[11];
   14acc:	4b32      	ldr	r3, [pc, #200]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14ace:	7ada      	ldrb	r2, [r3, #11]
   14ad0:	4b3e      	ldr	r3, [pc, #248]	; (14bcc <restore_orientation_controls_remote_esc_lights+0x250>)
   14ad2:	701a      	strb	r2, [r3, #0]
		dual_all_control = eeprom_data[12];
   14ad4:	4b30      	ldr	r3, [pc, #192]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14ad6:	7b1a      	ldrb	r2, [r3, #12]
   14ad8:	4b3d      	ldr	r3, [pc, #244]	; (14bd0 <restore_orientation_controls_remote_esc_lights+0x254>)
   14ada:	701a      	strb	r2, [r3, #0]
		dual_head_control = eeprom_data[13];
   14adc:	4b2e      	ldr	r3, [pc, #184]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14ade:	7b5a      	ldrb	r2, [r3, #13]
   14ae0:	4b3c      	ldr	r3, [pc, #240]	; (14bd4 <restore_orientation_controls_remote_esc_lights+0x258>)
   14ae2:	701a      	strb	r2, [r3, #0]
		dual_side_control = eeprom_data[14];
   14ae4:	4b2c      	ldr	r3, [pc, #176]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14ae6:	7b9a      	ldrb	r2, [r3, #14]
   14ae8:	4b3b      	ldr	r3, [pc, #236]	; (14bd8 <restore_orientation_controls_remote_esc_lights+0x25c>)
   14aea:	701a      	strb	r2, [r3, #0]
		dual_up_control = eeprom_data[15];
   14aec:	4b2a      	ldr	r3, [pc, #168]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14aee:	7bda      	ldrb	r2, [r3, #15]
   14af0:	4b3a      	ldr	r3, [pc, #232]	; (14bdc <restore_orientation_controls_remote_esc_lights+0x260>)
   14af2:	701a      	strb	r2, [r3, #0]
		dual_down_control = eeprom_data[16];
   14af4:	4b28      	ldr	r3, [pc, #160]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14af6:	7c1a      	ldrb	r2, [r3, #16]
   14af8:	4b39      	ldr	r3, [pc, #228]	; (14be0 <restore_orientation_controls_remote_esc_lights+0x264>)
   14afa:	701a      	strb	r2, [r3, #0]

		remote_type = ((eeprom_data[17]&0xF0)>>4);
   14afc:	4b26      	ldr	r3, [pc, #152]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14afe:	7c5b      	ldrb	r3, [r3, #17]
   14b00:	091b      	lsrs	r3, r3, #4
   14b02:	b2da      	uxtb	r2, r3
   14b04:	4b37      	ldr	r3, [pc, #220]	; (14be4 <restore_orientation_controls_remote_esc_lights+0x268>)
   14b06:	701a      	strb	r2, [r3, #0]
		button_type = (eeprom_data[17]&0x0F);
   14b08:	4b23      	ldr	r3, [pc, #140]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b0a:	7c5b      	ldrb	r3, [r3, #17]
   14b0c:	220f      	movs	r2, #15
   14b0e:	4013      	ands	r3, r2
   14b10:	b2da      	uxtb	r2, r3
   14b12:	4b36      	ldr	r3, [pc, #216]	; (14bec <restore_orientation_controls_remote_esc_lights+0x270>)
   14b14:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[18];
   14b16:	4b20      	ldr	r3, [pc, #128]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b18:	7c9a      	ldrb	r2, [r3, #18]
   14b1a:	4b33      	ldr	r3, [pc, #204]	; (14be8 <restore_orientation_controls_remote_esc_lights+0x26c>)
   14b1c:	701a      	strb	r2, [r3, #0]

		esc_fw = eeprom_data[19];
   14b1e:	4b1e      	ldr	r3, [pc, #120]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b20:	7cda      	ldrb	r2, [r3, #19]
   14b22:	4b33      	ldr	r3, [pc, #204]	; (14bf0 <restore_orientation_controls_remote_esc_lights+0x274>)
   14b24:	701a      	strb	r2, [r3, #0]
		esc_comms = ((eeprom_data[20]&0xF0)>>4);
   14b26:	4b1c      	ldr	r3, [pc, #112]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b28:	7d1b      	ldrb	r3, [r3, #20]
   14b2a:	091b      	lsrs	r3, r3, #4
   14b2c:	b2da      	uxtb	r2, r3
   14b2e:	4b31      	ldr	r3, [pc, #196]	; (14bf4 <restore_orientation_controls_remote_esc_lights+0x278>)
   14b30:	701a      	strb	r2, [r3, #0]
		UART_baud = (eeprom_data[20]&0x0F);//*/
   14b32:	4b19      	ldr	r3, [pc, #100]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b34:	7d1b      	ldrb	r3, [r3, #20]
   14b36:	220f      	movs	r2, #15
   14b38:	4013      	ands	r3, r2
   14b3a:	b2da      	uxtb	r2, r3
   14b3c:	4b2e      	ldr	r3, [pc, #184]	; (14bf8 <restore_orientation_controls_remote_esc_lights+0x27c>)
   14b3e:	701a      	strb	r2, [r3, #0]
		
		RGB_led_type = ((eeprom_data[21]&0xF0)>>4);
   14b40:	4b15      	ldr	r3, [pc, #84]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b42:	7d5b      	ldrb	r3, [r3, #21]
   14b44:	091b      	lsrs	r3, r3, #4
   14b46:	b2da      	uxtb	r2, r3
   14b48:	4b2c      	ldr	r3, [pc, #176]	; (14bfc <restore_orientation_controls_remote_esc_lights+0x280>)
   14b4a:	701a      	strb	r2, [r3, #0]
		brake_light_mode = (eeprom_data[21]&0x0F);
   14b4c:	4b12      	ldr	r3, [pc, #72]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b4e:	7d5b      	ldrb	r3, [r3, #21]
   14b50:	220f      	movs	r2, #15
   14b52:	4013      	ands	r3, r2
   14b54:	b2da      	uxtb	r2, r3
   14b56:	4b2a      	ldr	r3, [pc, #168]	; (14c00 <restore_orientation_controls_remote_esc_lights+0x284>)
   14b58:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[22];
   14b5a:	4b0f      	ldr	r3, [pc, #60]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b5c:	7d9a      	ldrb	r2, [r3, #22]
   14b5e:	4b22      	ldr	r3, [pc, #136]	; (14be8 <restore_orientation_controls_remote_esc_lights+0x26c>)
   14b60:	701a      	strb	r2, [r3, #0]
		led_num = eeprom_data[23];
   14b62:	4b0d      	ldr	r3, [pc, #52]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b64:	7dda      	ldrb	r2, [r3, #23]
   14b66:	4b27      	ldr	r3, [pc, #156]	; (14c04 <restore_orientation_controls_remote_esc_lights+0x288>)
   14b68:	701a      	strb	r2, [r3, #0]
		SYNC_RGB = ((eeprom_data[24]&0x80)>>7);
   14b6a:	4b0b      	ldr	r3, [pc, #44]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b6c:	7e1b      	ldrb	r3, [r3, #24]
   14b6e:	09db      	lsrs	r3, r3, #7
   14b70:	b2db      	uxtb	r3, r3
   14b72:	1e5a      	subs	r2, r3, #1
   14b74:	4193      	sbcs	r3, r2
   14b76:	b2da      	uxtb	r2, r3
   14b78:	4b23      	ldr	r3, [pc, #140]	; (14c08 <restore_orientation_controls_remote_esc_lights+0x28c>)
   14b7a:	701a      	strb	r2, [r3, #0]
		BRAKE_ALWAYS_ON = ((eeprom_data[24]&0x40)>>6);
   14b7c:	4b06      	ldr	r3, [pc, #24]	; (14b98 <restore_orientation_controls_remote_esc_lights+0x21c>)
   14b7e:	7e1b      	ldrb	r3, [r3, #24]
   14b80:	119b      	asrs	r3, r3, #6
   14b82:	2201      	movs	r2, #1
   14b84:	4013      	ands	r3, r2
   14b86:	1e5a      	subs	r2, r3, #1
   14b88:	4193      	sbcs	r3, r2
   14b8a:	b2da      	uxtb	r2, r3
   14b8c:	4b1f      	ldr	r3, [pc, #124]	; (14c0c <restore_orientation_controls_remote_esc_lights+0x290>)
   14b8e:	701a      	strb	r2, [r3, #0]
	}
}
   14b90:	46c0      	nop			; (mov r8, r8)
   14b92:	46bd      	mov	sp, r7
   14b94:	bd80      	pop	{r7, pc}
   14b96:	46c0      	nop			; (mov r8, r8)
   14b98:	20001000 	.word	0x20001000
   14b9c:	00009301 	.word	0x00009301
   14ba0:	200000e0 	.word	0x200000e0
   14ba4:	20000402 	.word	0x20000402
   14ba8:	20000403 	.word	0x20000403
   14bac:	20000406 	.word	0x20000406
   14bb0:	20000407 	.word	0x20000407
   14bb4:	20000408 	.word	0x20000408
   14bb8:	20000409 	.word	0x20000409
   14bbc:	2000040a 	.word	0x2000040a
   14bc0:	2000040b 	.word	0x2000040b
   14bc4:	2000040c 	.word	0x2000040c
   14bc8:	2000040d 	.word	0x2000040d
   14bcc:	2000040e 	.word	0x2000040e
   14bd0:	2000040f 	.word	0x2000040f
   14bd4:	20000410 	.word	0x20000410
   14bd8:	20000411 	.word	0x20000411
   14bdc:	20000412 	.word	0x20000412
   14be0:	20000413 	.word	0x20000413
   14be4:	2000038c 	.word	0x2000038c
   14be8:	200000dc 	.word	0x200000dc
   14bec:	2000038d 	.word	0x2000038d
   14bf0:	200000db 	.word	0x200000db
   14bf4:	2000038a 	.word	0x2000038a
   14bf8:	2000038b 	.word	0x2000038b
   14bfc:	20001a4c 	.word	0x20001a4c
   14c00:	2000036e 	.word	0x2000036e
   14c04:	200000d8 	.word	0x200000d8
   14c08:	200000ca 	.word	0x200000ca
   14c0c:	200000cb 	.word	0x200000cb
   14c10:	000147a5 	.word	0x000147a5

00014c14 <configure_ble_usart>:
struct ble_packet ble_recieve_packet;


// Configure SERCOM5 as USART for BLE module
void configure_ble_usart(int baud)
{
   14c14:	b580      	push	{r7, lr}
   14c16:	b092      	sub	sp, #72	; 0x48
   14c18:	af00      	add	r7, sp, #0
   14c1a:	6078      	str	r0, [r7, #4]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   14c1c:	2308      	movs	r3, #8
   14c1e:	18fb      	adds	r3, r7, r3
   14c20:	0018      	movs	r0, r3
   14c22:	4b17      	ldr	r3, [pc, #92]	; (14c80 <configure_ble_usart+0x6c>)
   14c24:	4798      	blx	r3
	config_usart.baudrate    = baud;
   14c26:	687a      	ldr	r2, [r7, #4]
   14c28:	2308      	movs	r3, #8
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
   14c2e:	2308      	movs	r3, #8
   14c30:	18fb      	adds	r3, r7, r3
   14c32:	22c4      	movs	r2, #196	; 0xc4
   14c34:	0392      	lsls	r2, r2, #14
   14c36:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
   14c38:	2308      	movs	r3, #8
   14c3a:	18fb      	adds	r3, r7, r3
   14c3c:	2201      	movs	r2, #1
   14c3e:	4252      	negs	r2, r2
   14c40:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
   14c42:	2308      	movs	r3, #8
   14c44:	18fb      	adds	r3, r7, r3
   14c46:	2201      	movs	r2, #1
   14c48:	4252      	negs	r2, r2
   14c4a:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20C_SERCOM5_PAD2;
   14c4c:	2308      	movs	r3, #8
   14c4e:	18fb      	adds	r3, r7, r3
   14c50:	4a0c      	ldr	r2, [pc, #48]	; (14c84 <configure_ble_usart+0x70>)
   14c52:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21C_SERCOM5_PAD3;
   14c54:	2308      	movs	r3, #8
   14c56:	18fb      	adds	r3, r7, r3
   14c58:	4a0b      	ldr	r2, [pc, #44]	; (14c88 <configure_ble_usart+0x74>)
   14c5a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&ble_usart,SERCOM5, &config_usart) != STATUS_OK)
   14c5c:	46c0      	nop			; (mov r8, r8)
   14c5e:	2308      	movs	r3, #8
   14c60:	18fa      	adds	r2, r7, r3
   14c62:	490a      	ldr	r1, [pc, #40]	; (14c8c <configure_ble_usart+0x78>)
   14c64:	4b0a      	ldr	r3, [pc, #40]	; (14c90 <configure_ble_usart+0x7c>)
   14c66:	0018      	movs	r0, r3
   14c68:	4b0a      	ldr	r3, [pc, #40]	; (14c94 <configure_ble_usart+0x80>)
   14c6a:	4798      	blx	r3
   14c6c:	1e03      	subs	r3, r0, #0
   14c6e:	d1f6      	bne.n	14c5e <configure_ble_usart+0x4a>
	{}
	usart_enable(&ble_usart);
   14c70:	4b07      	ldr	r3, [pc, #28]	; (14c90 <configure_ble_usart+0x7c>)
   14c72:	0018      	movs	r0, r3
   14c74:	4b08      	ldr	r3, [pc, #32]	; (14c98 <configure_ble_usart+0x84>)
   14c76:	4798      	blx	r3
}
   14c78:	46c0      	nop			; (mov r8, r8)
   14c7a:	46bd      	mov	sp, r7
   14c7c:	b012      	add	sp, #72	; 0x48
   14c7e:	bd80      	pop	{r7, pc}
   14c80:	00009ca1 	.word	0x00009ca1
   14c84:	00140002 	.word	0x00140002
   14c88:	00150002 	.word	0x00150002
   14c8c:	42001c00 	.word	0x42001c00
   14c90:	200006ac 	.word	0x200006ac
   14c94:	000060e5 	.word	0x000060e5
   14c98:	00009d61 	.word	0x00009d61

00014c9c <configure_BLE_module>:

void configure_BLE_module()
{
   14c9c:	b590      	push	{r4, r7, lr}
   14c9e:	b09b      	sub	sp, #108	; 0x6c
   14ca0:	af00      	add	r7, sp, #0
	int baud = 0;
   14ca2:	2300      	movs	r3, #0
   14ca4:	667b      	str	r3, [r7, #100]	; 0x64
	int bauds[5] = {9600, 19200, 38400, 57600, 115200};
   14ca6:	232c      	movs	r3, #44	; 0x2c
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	4a77      	ldr	r2, [pc, #476]	; (14e88 <configure_BLE_module+0x1ec>)
   14cac:	ca13      	ldmia	r2!, {r0, r1, r4}
   14cae:	c313      	stmia	r3!, {r0, r1, r4}
   14cb0:	ca03      	ldmia	r2!, {r0, r1}
   14cb2:	c303      	stmia	r3!, {r0, r1}
	while(1){
		configure_ble_usart(bauds[baud]);
   14cb4:	232c      	movs	r3, #44	; 0x2c
   14cb6:	18fb      	adds	r3, r7, r3
   14cb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   14cba:	0092      	lsls	r2, r2, #2
   14cbc:	58d3      	ldr	r3, [r2, r3]
   14cbe:	0018      	movs	r0, r3
   14cc0:	4b72      	ldr	r3, [pc, #456]	; (14e8c <configure_BLE_module+0x1f0>)
   14cc2:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   14cc4:	2304      	movs	r3, #4
   14cc6:	33ff      	adds	r3, #255	; 0xff
   14cc8:	001a      	movs	r2, r3
   14cca:	4971      	ldr	r1, [pc, #452]	; (14e90 <configure_BLE_module+0x1f4>)
   14ccc:	4b71      	ldr	r3, [pc, #452]	; (14e94 <configure_BLE_module+0x1f8>)
   14cce:	0018      	movs	r0, r3
   14cd0:	4b71      	ldr	r3, [pc, #452]	; (14e98 <configure_BLE_module+0x1fc>)
   14cd2:	4798      	blx	r3

		baud += 1;
   14cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14cd6:	3301      	adds	r3, #1
   14cd8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud > 4)
   14cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14cdc:	2b04      	cmp	r3, #4
   14cde:	dd01      	ble.n	14ce4 <configure_BLE_module+0x48>
		baud = 0;
   14ce0:	2300      	movs	r3, #0
   14ce2:	667b      	str	r3, [r7, #100]	; 0x64
		
		for(int i = 0; i < 10000; ++i);
   14ce4:	2300      	movs	r3, #0
   14ce6:	663b      	str	r3, [r7, #96]	; 0x60
   14ce8:	e002      	b.n	14cf0 <configure_BLE_module+0x54>
   14cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14cec:	3301      	adds	r3, #1
   14cee:	663b      	str	r3, [r7, #96]	; 0x60
   14cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14cf2:	4a6a      	ldr	r2, [pc, #424]	; (14e9c <configure_BLE_module+0x200>)
   14cf4:	4293      	cmp	r3, r2
   14cf6:	ddf8      	ble.n	14cea <configure_BLE_module+0x4e>
		else if(BLE_BAUD == 38400)
		strcpy(string1,"AT+BAUD2");
		else if(BLE_BAUD == 57600)
		strcpy(string1,"AT+BAUD3");
		else if(BLE_BAUD == 115200)
		strcpy(string1,"AT+BAUD4");
   14cf8:	2324      	movs	r3, #36	; 0x24
   14cfa:	18fb      	adds	r3, r7, r3
   14cfc:	4a68      	ldr	r2, [pc, #416]	; (14ea0 <configure_BLE_module+0x204>)
   14cfe:	ca03      	ldmia	r2!, {r0, r1}
   14d00:	c303      	stmia	r3!, {r0, r1}
   14d02:	7812      	ldrb	r2, [r2, #0]
   14d04:	701a      	strb	r2, [r3, #0]
		OK_EXPECTED = true;
   14d06:	4b67      	ldr	r3, [pc, #412]	; (14ea4 <configure_BLE_module+0x208>)
   14d08:	2201      	movs	r2, #1
   14d0a:	701a      	strb	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string1, sizeof(string1))!=STATUS_OK){}
   14d0c:	46c0      	nop			; (mov r8, r8)
   14d0e:	2324      	movs	r3, #36	; 0x24
   14d10:	18f9      	adds	r1, r7, r3
   14d12:	4b60      	ldr	r3, [pc, #384]	; (14e94 <configure_BLE_module+0x1f8>)
   14d14:	2208      	movs	r2, #8
   14d16:	0018      	movs	r0, r3
   14d18:	4b63      	ldr	r3, [pc, #396]	; (14ea8 <configure_BLE_module+0x20c>)
   14d1a:	4798      	blx	r3
   14d1c:	1e03      	subs	r3, r0, #0
   14d1e:	d1f6      	bne.n	14d0e <configure_BLE_module+0x72>
		for(int i = 0; i < 25000; ++i);
   14d20:	2300      	movs	r3, #0
   14d22:	65fb      	str	r3, [r7, #92]	; 0x5c
   14d24:	e002      	b.n	14d2c <configure_BLE_module+0x90>
   14d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   14d28:	3301      	adds	r3, #1
   14d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   14d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   14d2e:	4a5f      	ldr	r2, [pc, #380]	; (14eac <configure_BLE_module+0x210>)
   14d30:	4293      	cmp	r3, r2
   14d32:	ddf8      	ble.n	14d26 <configure_BLE_module+0x8a>
		
		OK_EXPECTED = true;
   14d34:	4b5b      	ldr	r3, [pc, #364]	; (14ea4 <configure_BLE_module+0x208>)
   14d36:	2201      	movs	r2, #1
   14d38:	701a      	strb	r2, [r3, #0]
		uint8_t string2[14] = "AT+NAMETelTail";
   14d3a:	2314      	movs	r3, #20
   14d3c:	18fb      	adds	r3, r7, r3
   14d3e:	4a5c      	ldr	r2, [pc, #368]	; (14eb0 <configure_BLE_module+0x214>)
   14d40:	ca13      	ldmia	r2!, {r0, r1, r4}
   14d42:	c313      	stmia	r3!, {r0, r1, r4}
   14d44:	8812      	ldrh	r2, [r2, #0]
   14d46:	801a      	strh	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string2, sizeof(string2))!=STATUS_OK){}
   14d48:	46c0      	nop			; (mov r8, r8)
   14d4a:	2314      	movs	r3, #20
   14d4c:	18f9      	adds	r1, r7, r3
   14d4e:	4b51      	ldr	r3, [pc, #324]	; (14e94 <configure_BLE_module+0x1f8>)
   14d50:	220e      	movs	r2, #14
   14d52:	0018      	movs	r0, r3
   14d54:	4b54      	ldr	r3, [pc, #336]	; (14ea8 <configure_BLE_module+0x20c>)
   14d56:	4798      	blx	r3
   14d58:	1e03      	subs	r3, r0, #0
   14d5a:	d1f6      	bne.n	14d4a <configure_BLE_module+0xae>
		for(int i = 0; i < 25000; ++i);
   14d5c:	2300      	movs	r3, #0
   14d5e:	65bb      	str	r3, [r7, #88]	; 0x58
   14d60:	e002      	b.n	14d68 <configure_BLE_module+0xcc>
   14d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14d64:	3301      	adds	r3, #1
   14d66:	65bb      	str	r3, [r7, #88]	; 0x58
   14d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14d6a:	4a50      	ldr	r2, [pc, #320]	; (14eac <configure_BLE_module+0x210>)
   14d6c:	4293      	cmp	r3, r2
   14d6e:	ddf8      	ble.n	14d62 <configure_BLE_module+0xc6>
		
		OK_EXPECTED = true;
   14d70:	4b4c      	ldr	r3, [pc, #304]	; (14ea4 <configure_BLE_module+0x208>)
   14d72:	2201      	movs	r2, #1
   14d74:	701a      	strb	r2, [r3, #0]
		uint8_t string3[8] = "AT+POWE3"; // Default = 2
   14d76:	230c      	movs	r3, #12
   14d78:	18fb      	adds	r3, r7, r3
   14d7a:	4a4e      	ldr	r2, [pc, #312]	; (14eb4 <configure_BLE_module+0x218>)
   14d7c:	ca03      	ldmia	r2!, {r0, r1}
   14d7e:	c303      	stmia	r3!, {r0, r1}
		while(usart_write_buffer_wait(&ble_usart, string3, sizeof(string3))!=STATUS_OK){}
   14d80:	46c0      	nop			; (mov r8, r8)
   14d82:	230c      	movs	r3, #12
   14d84:	18f9      	adds	r1, r7, r3
   14d86:	4b43      	ldr	r3, [pc, #268]	; (14e94 <configure_BLE_module+0x1f8>)
   14d88:	2208      	movs	r2, #8
   14d8a:	0018      	movs	r0, r3
   14d8c:	4b46      	ldr	r3, [pc, #280]	; (14ea8 <configure_BLE_module+0x20c>)
   14d8e:	4798      	blx	r3
   14d90:	1e03      	subs	r3, r0, #0
   14d92:	d1f6      	bne.n	14d82 <configure_BLE_module+0xe6>
		for(int i = 0; i < 25000; ++i);
   14d94:	2300      	movs	r3, #0
   14d96:	657b      	str	r3, [r7, #84]	; 0x54
   14d98:	e002      	b.n	14da0 <configure_BLE_module+0x104>
   14d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14d9c:	3301      	adds	r3, #1
   14d9e:	657b      	str	r3, [r7, #84]	; 0x54
   14da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14da2:	4a42      	ldr	r2, [pc, #264]	; (14eac <configure_BLE_module+0x210>)
   14da4:	4293      	cmp	r3, r2
   14da6:	ddf8      	ble.n	14d9a <configure_BLE_module+0xfe>
		
		read_ble_packet();
   14da8:	4b43      	ldr	r3, [pc, #268]	; (14eb8 <configure_BLE_module+0x21c>)
   14daa:	4798      	blx	r3
		if(!BLE_CONFIGURED){
   14dac:	4b43      	ldr	r3, [pc, #268]	; (14ebc <configure_BLE_module+0x220>)
   14dae:	781b      	ldrb	r3, [r3, #0]
   14db0:	2201      	movs	r2, #1
   14db2:	4053      	eors	r3, r2
   14db4:	b2db      	uxtb	r3, r3
   14db6:	2b00      	cmp	r3, #0
   14db8:	d00e      	beq.n	14dd8 <configure_BLE_module+0x13c>
			usart_disable(&ble_usart);
   14dba:	4b36      	ldr	r3, [pc, #216]	; (14e94 <configure_BLE_module+0x1f8>)
   14dbc:	0018      	movs	r0, r3
   14dbe:	4b40      	ldr	r3, [pc, #256]	; (14ec0 <configure_BLE_module+0x224>)
   14dc0:	4798      	blx	r3
			for(int i = 0; i < 10000; ++i);
   14dc2:	2300      	movs	r3, #0
   14dc4:	653b      	str	r3, [r7, #80]	; 0x50
   14dc6:	e002      	b.n	14dce <configure_BLE_module+0x132>
   14dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14dca:	3301      	adds	r3, #1
   14dcc:	653b      	str	r3, [r7, #80]	; 0x50
   14dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14dd0:	4a32      	ldr	r2, [pc, #200]	; (14e9c <configure_BLE_module+0x200>)
   14dd2:	4293      	cmp	r3, r2
   14dd4:	ddf8      	ble.n	14dc8 <configure_BLE_module+0x12c>
	while(1){
   14dd6:	e76d      	b.n	14cb4 <configure_BLE_module+0x18>
		}
		else{
			uint8_t string4[8] = "AT+RESET";
   14dd8:	1d3b      	adds	r3, r7, #4
   14dda:	4a3a      	ldr	r2, [pc, #232]	; (14ec4 <configure_BLE_module+0x228>)
   14ddc:	ca03      	ldmia	r2!, {r0, r1}
   14dde:	c303      	stmia	r3!, {r0, r1}
			while(usart_write_buffer_wait(&ble_usart, string4, sizeof(string4))!=STATUS_OK){}
   14de0:	46c0      	nop			; (mov r8, r8)
   14de2:	1d39      	adds	r1, r7, #4
   14de4:	4b2b      	ldr	r3, [pc, #172]	; (14e94 <configure_BLE_module+0x1f8>)
   14de6:	2208      	movs	r2, #8
   14de8:	0018      	movs	r0, r3
   14dea:	4b2f      	ldr	r3, [pc, #188]	; (14ea8 <configure_BLE_module+0x20c>)
   14dec:	4798      	blx	r3
   14dee:	1e03      	subs	r3, r0, #0
   14df0:	d1f7      	bne.n	14de2 <configure_BLE_module+0x146>
			for(int i = 0; i < 25000; ++i);
   14df2:	2300      	movs	r3, #0
   14df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   14df6:	e002      	b.n	14dfe <configure_BLE_module+0x162>
   14df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14dfa:	3301      	adds	r3, #1
   14dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   14dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14e00:	4a2a      	ldr	r2, [pc, #168]	; (14eac <configure_BLE_module+0x210>)
   14e02:	4293      	cmp	r3, r2
   14e04:	ddf8      	ble.n	14df8 <configure_BLE_module+0x15c>
			usart_disable(&ble_usart);
   14e06:	4b23      	ldr	r3, [pc, #140]	; (14e94 <configure_BLE_module+0x1f8>)
   14e08:	0018      	movs	r0, r3
   14e0a:	4b2d      	ldr	r3, [pc, #180]	; (14ec0 <configure_BLE_module+0x224>)
   14e0c:	4798      	blx	r3
			for(int i = 0; i < 500000; ++i);
   14e0e:	2300      	movs	r3, #0
   14e10:	64bb      	str	r3, [r7, #72]	; 0x48
   14e12:	e002      	b.n	14e1a <configure_BLE_module+0x17e>
   14e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14e16:	3301      	adds	r3, #1
   14e18:	64bb      	str	r3, [r7, #72]	; 0x48
   14e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14e1c:	4a2a      	ldr	r2, [pc, #168]	; (14ec8 <configure_BLE_module+0x22c>)
   14e1e:	4293      	cmp	r3, r2
   14e20:	ddf8      	ble.n	14e14 <configure_BLE_module+0x178>
			configure_ble_usart(BLE_BAUD);
   14e22:	23e1      	movs	r3, #225	; 0xe1
   14e24:	025b      	lsls	r3, r3, #9
   14e26:	0018      	movs	r0, r3
   14e28:	4b18      	ldr	r3, [pc, #96]	; (14e8c <configure_BLE_module+0x1f0>)
   14e2a:	4798      	blx	r3
			for(int i = 0; i < 5000; ++i);
   14e2c:	2300      	movs	r3, #0
   14e2e:	647b      	str	r3, [r7, #68]	; 0x44
   14e30:	e002      	b.n	14e38 <configure_BLE_module+0x19c>
   14e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14e34:	3301      	adds	r3, #1
   14e36:	647b      	str	r3, [r7, #68]	; 0x44
   14e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14e3a:	4a24      	ldr	r2, [pc, #144]	; (14ecc <configure_BLE_module+0x230>)
   14e3c:	4293      	cmp	r3, r2
   14e3e:	ddf8      	ble.n	14e32 <configure_BLE_module+0x196>
			uint8_t string5[2] = "AT";
   14e40:	003b      	movs	r3, r7
   14e42:	4a23      	ldr	r2, [pc, #140]	; (14ed0 <configure_BLE_module+0x234>)
   14e44:	801a      	strh	r2, [r3, #0]
			while(usart_write_buffer_wait(&ble_usart, string5, sizeof(string5))!=STATUS_OK){}
   14e46:	46c0      	nop			; (mov r8, r8)
   14e48:	0039      	movs	r1, r7
   14e4a:	4b12      	ldr	r3, [pc, #72]	; (14e94 <configure_BLE_module+0x1f8>)
   14e4c:	2202      	movs	r2, #2
   14e4e:	0018      	movs	r0, r3
   14e50:	4b15      	ldr	r3, [pc, #84]	; (14ea8 <configure_BLE_module+0x20c>)
   14e52:	4798      	blx	r3
   14e54:	1e03      	subs	r3, r0, #0
   14e56:	d1f7      	bne.n	14e48 <configure_BLE_module+0x1ac>
			for(int i = 0; i < 10000; ++i);
   14e58:	2300      	movs	r3, #0
   14e5a:	643b      	str	r3, [r7, #64]	; 0x40
   14e5c:	e002      	b.n	14e64 <configure_BLE_module+0x1c8>
   14e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14e60:	3301      	adds	r3, #1
   14e62:	643b      	str	r3, [r7, #64]	; 0x40
   14e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14e66:	4a0d      	ldr	r2, [pc, #52]	; (14e9c <configure_BLE_module+0x200>)
   14e68:	4293      	cmp	r3, r2
   14e6a:	ddf8      	ble.n	14e5e <configure_BLE_module+0x1c2>
			usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   14e6c:	2304      	movs	r3, #4
   14e6e:	33ff      	adds	r3, #255	; 0xff
   14e70:	001a      	movs	r2, r3
   14e72:	4907      	ldr	r1, [pc, #28]	; (14e90 <configure_BLE_module+0x1f4>)
   14e74:	4b07      	ldr	r3, [pc, #28]	; (14e94 <configure_BLE_module+0x1f8>)
   14e76:	0018      	movs	r0, r3
   14e78:	4b07      	ldr	r3, [pc, #28]	; (14e98 <configure_BLE_module+0x1fc>)
   14e7a:	4798      	blx	r3
			break;
   14e7c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   14e7e:	46c0      	nop			; (mov r8, r8)
   14e80:	46bd      	mov	sp, r7
   14e82:	b01b      	add	sp, #108	; 0x6c
   14e84:	bd90      	pop	{r4, r7, pc}
   14e86:	46c0      	nop			; (mov r8, r8)
   14e88:	0001bc28 	.word	0x0001bc28
   14e8c:	00014c15 	.word	0x00014c15
   14e90:	200017b8 	.word	0x200017b8
   14e94:	200006ac 	.word	0x200006ac
   14e98:	00006671 	.word	0x00006671
   14e9c:	0000270f 	.word	0x0000270f
   14ea0:	0001bc1c 	.word	0x0001bc1c
   14ea4:	2000043d 	.word	0x2000043d
   14ea8:	000063bd 	.word	0x000063bd
   14eac:	000061a7 	.word	0x000061a7
   14eb0:	0001bc3c 	.word	0x0001bc3c
   14eb4:	0001bc4c 	.word	0x0001bc4c
   14eb8:	00015f11 	.word	0x00015f11
   14ebc:	20000435 	.word	0x20000435
   14ec0:	00009da9 	.word	0x00009da9
   14ec4:	0001bc58 	.word	0x0001bc58
   14ec8:	0007a11f 	.word	0x0007a11f
   14ecc:	00001387 	.word	0x00001387
   14ed0:	00005441 	.word	0x00005441

00014ed4 <check_ble_AT_recieved>:

inline bool check_ble_AT_recieved(){
   14ed4:	b580      	push	{r7, lr}
   14ed6:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == 'O' && ble_USART_read_buffer[1] == 'K');
   14ed8:	4b08      	ldr	r3, [pc, #32]	; (14efc <check_ble_AT_recieved+0x28>)
   14eda:	781b      	ldrb	r3, [r3, #0]
   14edc:	2b4f      	cmp	r3, #79	; 0x4f
   14ede:	d105      	bne.n	14eec <check_ble_AT_recieved+0x18>
   14ee0:	4b06      	ldr	r3, [pc, #24]	; (14efc <check_ble_AT_recieved+0x28>)
   14ee2:	785b      	ldrb	r3, [r3, #1]
   14ee4:	2b4b      	cmp	r3, #75	; 0x4b
   14ee6:	d101      	bne.n	14eec <check_ble_AT_recieved+0x18>
   14ee8:	2301      	movs	r3, #1
   14eea:	e000      	b.n	14eee <check_ble_AT_recieved+0x1a>
   14eec:	2300      	movs	r3, #0
   14eee:	1c1a      	adds	r2, r3, #0
   14ef0:	2301      	movs	r3, #1
   14ef2:	4013      	ands	r3, r2
   14ef4:	b2db      	uxtb	r3, r3
}
   14ef6:	0018      	movs	r0, r3
   14ef8:	46bd      	mov	sp, r7
   14efa:	bd80      	pop	{r7, pc}
   14efc:	200017b8 	.word	0x200017b8

00014f00 <check_ble_packet_recieved>:

inline bool check_ble_packet_recieved(){
   14f00:	b580      	push	{r7, lr}
   14f02:	af00      	add	r7, sp, #0
	return (ble_USART_read_buffer[0] == BLE_START_BYTE && ble_USART_read_buffer[ble_USART_read_buffer[1]+3] == BLE_STOP_BYTE);
   14f04:	4b0a      	ldr	r3, [pc, #40]	; (14f30 <check_ble_packet_recieved+0x30>)
   14f06:	781b      	ldrb	r3, [r3, #0]
   14f08:	2ba5      	cmp	r3, #165	; 0xa5
   14f0a:	d108      	bne.n	14f1e <check_ble_packet_recieved+0x1e>
   14f0c:	4b08      	ldr	r3, [pc, #32]	; (14f30 <check_ble_packet_recieved+0x30>)
   14f0e:	785b      	ldrb	r3, [r3, #1]
   14f10:	3303      	adds	r3, #3
   14f12:	4a07      	ldr	r2, [pc, #28]	; (14f30 <check_ble_packet_recieved+0x30>)
   14f14:	5cd3      	ldrb	r3, [r2, r3]
   14f16:	2b5a      	cmp	r3, #90	; 0x5a
   14f18:	d101      	bne.n	14f1e <check_ble_packet_recieved+0x1e>
   14f1a:	2301      	movs	r3, #1
   14f1c:	e000      	b.n	14f20 <check_ble_packet_recieved+0x20>
   14f1e:	2300      	movs	r3, #0
   14f20:	1c1a      	adds	r2, r3, #0
   14f22:	2301      	movs	r3, #1
   14f24:	4013      	ands	r3, r2
   14f26:	b2db      	uxtb	r3, r3
}
   14f28:	0018      	movs	r0, r3
   14f2a:	46bd      	mov	sp, r7
   14f2c:	bd80      	pop	{r7, pc}
   14f2e:	46c0      	nop			; (mov r8, r8)
   14f30:	200017b8 	.word	0x200017b8

00014f34 <process_ble_packet>:

void process_ble_packet(){
   14f34:	b580      	push	{r7, lr}
   14f36:	af00      	add	r7, sp, #0
	switch(ble_recieve_packet.ID){
   14f38:	4bfa      	ldr	r3, [pc, #1000]	; (15324 <process_ble_packet+0x3f0>)
   14f3a:	781b      	ldrb	r3, [r3, #0]
   14f3c:	3ba1      	subs	r3, #161	; 0xa1
   14f3e:	2b5d      	cmp	r3, #93	; 0x5d
   14f40:	d901      	bls.n	14f46 <process_ble_packet+0x12>
   14f42:	f000 ffbf 	bl	15ec4 <process_ble_packet+0xf90>
   14f46:	009a      	lsls	r2, r3, #2
   14f48:	4bf7      	ldr	r3, [pc, #988]	; (15328 <process_ble_packet+0x3f4>)
   14f4a:	18d3      	adds	r3, r2, r3
   14f4c:	681b      	ldr	r3, [r3, #0]
   14f4e:	469f      	mov	pc, r3
		case Read_Motor_Limits:
			GET_LIMITS = 1;
   14f50:	4bf6      	ldr	r3, [pc, #984]	; (1532c <process_ble_packet+0x3f8>)
   14f52:	2201      	movs	r2, #1
   14f54:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   14f56:	4bf6      	ldr	r3, [pc, #984]	; (15330 <process_ble_packet+0x3fc>)
   14f58:	2200      	movs	r2, #0
   14f5a:	701a      	strb	r2, [r3, #0]
			break;
   14f5c:	f000 ffb2 	bl	15ec4 <process_ble_packet+0xf90>
		case (int)Read_LED_Vars:
			SEND_LED_CHARS = 1;
   14f60:	4bf4      	ldr	r3, [pc, #976]	; (15334 <process_ble_packet+0x400>)
   14f62:	2201      	movs	r2, #1
   14f64:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   14f66:	4bf2      	ldr	r3, [pc, #968]	; (15330 <process_ble_packet+0x3fc>)
   14f68:	2200      	movs	r2, #0
   14f6a:	701a      	strb	r2, [r3, #0]
			break;
   14f6c:	f000 ffaa 	bl	15ec4 <process_ble_packet+0xf90>
		case Calibrate_All:
			calibrate(true);
   14f70:	2001      	movs	r0, #1
   14f72:	4bf1      	ldr	r3, [pc, #964]	; (15338 <process_ble_packet+0x404>)
   14f74:	4798      	blx	r3
			save_cal_data();
   14f76:	4bf1      	ldr	r3, [pc, #964]	; (1533c <process_ble_packet+0x408>)
   14f78:	4798      	blx	r3
			break;
   14f7a:	f000 ffa3 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_Sensor_Vars:
			SEND_SENSORS = 1;
   14f7e:	4bf0      	ldr	r3, [pc, #960]	; (15340 <process_ble_packet+0x40c>)
   14f80:	2201      	movs	r2, #1
   14f82:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   14f84:	4bea      	ldr	r3, [pc, #936]	; (15330 <process_ble_packet+0x3fc>)
   14f86:	2200      	movs	r2, #0
   14f88:	701a      	strb	r2, [r3, #0]
			break;
   14f8a:	f000 ff9b 	bl	15ec4 <process_ble_packet+0xf90>
		case LED_Toggle:
			LIGHTS_ON = !LIGHTS_ON;
   14f8e:	4bed      	ldr	r3, [pc, #948]	; (15344 <process_ble_packet+0x410>)
   14f90:	781b      	ldrb	r3, [r3, #0]
   14f92:	425a      	negs	r2, r3
   14f94:	4153      	adcs	r3, r2
   14f96:	b2db      	uxtb	r3, r3
   14f98:	001a      	movs	r2, r3
   14f9a:	4bea      	ldr	r3, [pc, #936]	; (15344 <process_ble_packet+0x410>)
   14f9c:	701a      	strb	r2, [r3, #0]
			save_led_data();
   14f9e:	4bea      	ldr	r3, [pc, #936]	; (15348 <process_ble_packet+0x414>)
   14fa0:	4798      	blx	r3
			break;
   14fa2:	f000 ff8f 	bl	15ec4 <process_ble_packet+0xf90>
		case LED_Mode_Down:
			if(light_mode == 0)
   14fa6:	4be9      	ldr	r3, [pc, #932]	; (1534c <process_ble_packet+0x418>)
   14fa8:	781b      	ldrb	r3, [r3, #0]
   14faa:	2b00      	cmp	r3, #0
   14fac:	d105      	bne.n	14fba <process_ble_packet+0x86>
				light_mode = light_modes - 1;
   14fae:	2309      	movs	r3, #9
   14fb0:	3b01      	subs	r3, #1
   14fb2:	b2da      	uxtb	r2, r3
   14fb4:	4be5      	ldr	r3, [pc, #916]	; (1534c <process_ble_packet+0x418>)
   14fb6:	701a      	strb	r2, [r3, #0]
   14fb8:	e005      	b.n	14fc6 <process_ble_packet+0x92>
			else
				light_mode--;
   14fba:	4be4      	ldr	r3, [pc, #912]	; (1534c <process_ble_packet+0x418>)
   14fbc:	781b      	ldrb	r3, [r3, #0]
   14fbe:	3b01      	subs	r3, #1
   14fc0:	b2da      	uxtb	r2, r3
   14fc2:	4be2      	ldr	r3, [pc, #904]	; (1534c <process_ble_packet+0x418>)
   14fc4:	701a      	strb	r2, [r3, #0]
			save_led_data();
   14fc6:	4be0      	ldr	r3, [pc, #896]	; (15348 <process_ble_packet+0x414>)
   14fc8:	4798      	blx	r3
			break;
   14fca:	f000 ff7b 	bl	15ec4 <process_ble_packet+0xf90>
		case LED_Mode_Up:
			light_mode++;
   14fce:	4bdf      	ldr	r3, [pc, #892]	; (1534c <process_ble_packet+0x418>)
   14fd0:	781b      	ldrb	r3, [r3, #0]
   14fd2:	3301      	adds	r3, #1
   14fd4:	b2da      	uxtb	r2, r3
   14fd6:	4bdd      	ldr	r3, [pc, #884]	; (1534c <process_ble_packet+0x418>)
   14fd8:	701a      	strb	r2, [r3, #0]
			if(light_mode >= light_modes)
   14fda:	4bdc      	ldr	r3, [pc, #880]	; (1534c <process_ble_packet+0x418>)
   14fdc:	781b      	ldrb	r3, [r3, #0]
   14fde:	2209      	movs	r2, #9
   14fe0:	4293      	cmp	r3, r2
   14fe2:	d302      	bcc.n	14fea <process_ble_packet+0xb6>
				light_mode = 0;
   14fe4:	4bd9      	ldr	r3, [pc, #868]	; (1534c <process_ble_packet+0x418>)
   14fe6:	2200      	movs	r2, #0
   14fe8:	701a      	strb	r2, [r3, #0]
			save_led_data();
   14fea:	4bd7      	ldr	r3, [pc, #860]	; (15348 <process_ble_packet+0x414>)
   14fec:	4798      	blx	r3
			break;
   14fee:	f000 ff69 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_Orientaion:
			SEND_ORIENTAION_CONFIG = 1;
   14ff2:	4bd7      	ldr	r3, [pc, #860]	; (15350 <process_ble_packet+0x41c>)
   14ff4:	2201      	movs	r2, #1
   14ff6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   14ff8:	4bcd      	ldr	r3, [pc, #820]	; (15330 <process_ble_packet+0x3fc>)
   14ffa:	2200      	movs	r2, #0
   14ffc:	701a      	strb	r2, [r3, #0]
			break;
   14ffe:	f000 ff61 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_Controls:
			SEND_CONTROLS_CONFIG = 1;
   15002:	4bd4      	ldr	r3, [pc, #848]	; (15354 <process_ble_packet+0x420>)
   15004:	2201      	movs	r2, #1
   15006:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15008:	4bc9      	ldr	r3, [pc, #804]	; (15330 <process_ble_packet+0x3fc>)
   1500a:	2200      	movs	r2, #0
   1500c:	701a      	strb	r2, [r3, #0]
			break;
   1500e:	f000 ff59 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_Remote_Config:
			SEND_REMOTE_CONFIG = 1;
   15012:	4bd1      	ldr	r3, [pc, #836]	; (15358 <process_ble_packet+0x424>)
   15014:	2201      	movs	r2, #1
   15016:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15018:	4bc5      	ldr	r3, [pc, #788]	; (15330 <process_ble_packet+0x3fc>)
   1501a:	2200      	movs	r2, #0
   1501c:	701a      	strb	r2, [r3, #0]
			break;
   1501e:	f000 ff51 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_ESC_Config:
			SEND_ESC_CONFIG = 1;
   15022:	4bce      	ldr	r3, [pc, #824]	; (1535c <process_ble_packet+0x428>)
   15024:	2201      	movs	r2, #1
   15026:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15028:	4bc1      	ldr	r3, [pc, #772]	; (15330 <process_ble_packet+0x3fc>)
   1502a:	2200      	movs	r2, #0
   1502c:	701a      	strb	r2, [r3, #0]
			break;
   1502e:	f000 ff49 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_Lights_Config:
			SEND_Lights_CONFIG = 1;
   15032:	4bcb      	ldr	r3, [pc, #812]	; (15360 <process_ble_packet+0x42c>)
   15034:	2201      	movs	r2, #1
   15036:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15038:	4bbd      	ldr	r3, [pc, #756]	; (15330 <process_ble_packet+0x3fc>)
   1503a:	2200      	movs	r2, #0
   1503c:	701a      	strb	r2, [r3, #0]
			break;
   1503e:	f000 ff41 	bl	15ec4 <process_ble_packet+0xf90>
		case Read_TTL_FW:
			SEND_TTL_FW = 1;
   15042:	4bc8      	ldr	r3, [pc, #800]	; (15364 <process_ble_packet+0x430>)
   15044:	2201      	movs	r2, #1
   15046:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   15048:	4bb9      	ldr	r3, [pc, #740]	; (15330 <process_ble_packet+0x3fc>)
   1504a:	2200      	movs	r2, #0
   1504c:	701a      	strb	r2, [r3, #0]
			break;
   1504e:	f000 ff39 	bl	15ec4 <process_ble_packet+0xf90>
		case Aux_Pressed:
			AppAuxButton = 1;
   15052:	4bc5      	ldr	r3, [pc, #788]	; (15368 <process_ble_packet+0x434>)
   15054:	2201      	movs	r2, #1
   15056:	701a      	strb	r2, [r3, #0]
			break;
   15058:	f000 ff34 	bl	15ec4 <process_ble_packet+0xf90>
		case Aux_Released:
			AppAuxButton = 0;
   1505c:	4bc2      	ldr	r3, [pc, #776]	; (15368 <process_ble_packet+0x434>)
   1505e:	2200      	movs	r2, #0
   15060:	701a      	strb	r2, [r3, #0]
			break;
   15062:	f000 ff2f 	bl	15ec4 <process_ble_packet+0xf90>
		case Remote_Data:
			AppRemoteY = (ble_recieve_packet.payload[0] & 0x0FF);
   15066:	4baf      	ldr	r3, [pc, #700]	; (15324 <process_ble_packet+0x3f0>)
   15068:	789a      	ldrb	r2, [r3, #2]
   1506a:	4bc0      	ldr	r3, [pc, #768]	; (1536c <process_ble_packet+0x438>)
   1506c:	701a      	strb	r2, [r3, #0]
			NEW_REMOTE_DATA = true;
   1506e:	4bc0      	ldr	r3, [pc, #768]	; (15370 <process_ble_packet+0x43c>)
   15070:	2201      	movs	r2, #1
   15072:	701a      	strb	r2, [r3, #0]
			break;
   15074:	f000 ff26 	bl	15ec4 <process_ble_packet+0xf90>
		case RPM_Throttle:
			LIGHTS_ON = 1;
   15078:	4bb2      	ldr	r3, [pc, #712]	; (15344 <process_ble_packet+0x410>)
   1507a:	2201      	movs	r2, #1
   1507c:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_RPM_THROTTLE;
   1507e:	4bb3      	ldr	r3, [pc, #716]	; (1534c <process_ble_packet+0x418>)
   15080:	2205      	movs	r2, #5
   15082:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15084:	4ba7      	ldr	r3, [pc, #668]	; (15324 <process_ble_packet+0x3f0>)
   15086:	789b      	ldrb	r3, [r3, #2]
   15088:	220f      	movs	r2, #15
   1508a:	4393      	bics	r3, r2
   1508c:	b2da      	uxtb	r2, r3
   1508e:	4bb9      	ldr	r3, [pc, #740]	; (15374 <process_ble_packet+0x440>)
   15090:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   15092:	4ba4      	ldr	r3, [pc, #656]	; (15324 <process_ble_packet+0x3f0>)
   15094:	789b      	ldrb	r3, [r3, #2]
   15096:	220f      	movs	r2, #15
   15098:	4013      	ands	r3, r2
   1509a:	b2da      	uxtb	r2, r3
   1509c:	4bb6      	ldr	r3, [pc, #728]	; (15378 <process_ble_packet+0x444>)
   1509e:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   150a0:	4bb4      	ldr	r3, [pc, #720]	; (15374 <process_ble_packet+0x440>)
   150a2:	781b      	ldrb	r3, [r3, #0]
   150a4:	111b      	asrs	r3, r3, #4
   150a6:	b2db      	uxtb	r3, r3
   150a8:	2201      	movs	r2, #1
   150aa:	4013      	ands	r3, r2
   150ac:	b2da      	uxtb	r2, r3
   150ae:	4bb3      	ldr	r3, [pc, #716]	; (1537c <process_ble_packet+0x448>)
   150b0:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   150b2:	4bb0      	ldr	r3, [pc, #704]	; (15374 <process_ble_packet+0x440>)
   150b4:	781b      	ldrb	r3, [r3, #0]
   150b6:	115b      	asrs	r3, r3, #5
   150b8:	b2db      	uxtb	r3, r3
   150ba:	2201      	movs	r2, #1
   150bc:	4013      	ands	r3, r2
   150be:	b2da      	uxtb	r2, r3
   150c0:	4baf      	ldr	r3, [pc, #700]	; (15380 <process_ble_packet+0x44c>)
   150c2:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   150c4:	4bab      	ldr	r3, [pc, #684]	; (15374 <process_ble_packet+0x440>)
   150c6:	781b      	ldrb	r3, [r3, #0]
   150c8:	119b      	asrs	r3, r3, #6
   150ca:	b2db      	uxtb	r3, r3
   150cc:	2201      	movs	r2, #1
   150ce:	4013      	ands	r3, r2
   150d0:	b2da      	uxtb	r2, r3
   150d2:	4bac      	ldr	r3, [pc, #688]	; (15384 <process_ble_packet+0x450>)
   150d4:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   150d6:	4ba7      	ldr	r3, [pc, #668]	; (15374 <process_ble_packet+0x440>)
   150d8:	781b      	ldrb	r3, [r3, #0]
   150da:	09db      	lsrs	r3, r3, #7
   150dc:	b2da      	uxtb	r2, r3
   150de:	4baa      	ldr	r3, [pc, #680]	; (15388 <process_ble_packet+0x454>)
   150e0:	701a      	strb	r2, [r3, #0]
			save_led_data();
   150e2:	4b99      	ldr	r3, [pc, #612]	; (15348 <process_ble_packet+0x414>)
   150e4:	4798      	blx	r3
			break;
   150e6:	f000 feed 	bl	15ec4 <process_ble_packet+0xf90>
		case Compass_Cycle_Values:
			LIGHTS_ON = 1;
   150ea:	4b96      	ldr	r3, [pc, #600]	; (15344 <process_ble_packet+0x410>)
   150ec:	2201      	movs	r2, #1
   150ee:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_COMPASS_CYCLE;
   150f0:	4b96      	ldr	r3, [pc, #600]	; (1534c <process_ble_packet+0x418>)
   150f2:	2202      	movs	r2, #2
   150f4:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   150f6:	4b8b      	ldr	r3, [pc, #556]	; (15324 <process_ble_packet+0x3f0>)
   150f8:	789b      	ldrb	r3, [r3, #2]
   150fa:	220f      	movs	r2, #15
   150fc:	4393      	bics	r3, r2
   150fe:	b2da      	uxtb	r2, r3
   15100:	4b9c      	ldr	r3, [pc, #624]	; (15374 <process_ble_packet+0x440>)
   15102:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   15104:	4b87      	ldr	r3, [pc, #540]	; (15324 <process_ble_packet+0x3f0>)
   15106:	789b      	ldrb	r3, [r3, #2]
   15108:	220f      	movs	r2, #15
   1510a:	4013      	ands	r3, r2
   1510c:	b2da      	uxtb	r2, r3
   1510e:	4b9a      	ldr	r3, [pc, #616]	; (15378 <process_ble_packet+0x444>)
   15110:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15112:	4b98      	ldr	r3, [pc, #608]	; (15374 <process_ble_packet+0x440>)
   15114:	781b      	ldrb	r3, [r3, #0]
   15116:	111b      	asrs	r3, r3, #4
   15118:	b2db      	uxtb	r3, r3
   1511a:	2201      	movs	r2, #1
   1511c:	4013      	ands	r3, r2
   1511e:	b2da      	uxtb	r2, r3
   15120:	4b96      	ldr	r3, [pc, #600]	; (1537c <process_ble_packet+0x448>)
   15122:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15124:	4b93      	ldr	r3, [pc, #588]	; (15374 <process_ble_packet+0x440>)
   15126:	781b      	ldrb	r3, [r3, #0]
   15128:	115b      	asrs	r3, r3, #5
   1512a:	b2db      	uxtb	r3, r3
   1512c:	2201      	movs	r2, #1
   1512e:	4013      	ands	r3, r2
   15130:	b2da      	uxtb	r2, r3
   15132:	4b93      	ldr	r3, [pc, #588]	; (15380 <process_ble_packet+0x44c>)
   15134:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15136:	4b8f      	ldr	r3, [pc, #572]	; (15374 <process_ble_packet+0x440>)
   15138:	781b      	ldrb	r3, [r3, #0]
   1513a:	119b      	asrs	r3, r3, #6
   1513c:	b2db      	uxtb	r3, r3
   1513e:	2201      	movs	r2, #1
   15140:	4013      	ands	r3, r2
   15142:	b2da      	uxtb	r2, r3
   15144:	4b8f      	ldr	r3, [pc, #572]	; (15384 <process_ble_packet+0x450>)
   15146:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15148:	4b8a      	ldr	r3, [pc, #552]	; (15374 <process_ble_packet+0x440>)
   1514a:	781b      	ldrb	r3, [r3, #0]
   1514c:	09db      	lsrs	r3, r3, #7
   1514e:	b2da      	uxtb	r2, r3
   15150:	4b8d      	ldr	r3, [pc, #564]	; (15388 <process_ble_packet+0x454>)
   15152:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_ANALOG_COMPASS_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   15154:	4b73      	ldr	r3, [pc, #460]	; (15324 <process_ble_packet+0x3f0>)
   15156:	78da      	ldrb	r2, [r3, #3]
   15158:	4b8c      	ldr	r3, [pc, #560]	; (1538c <process_ble_packet+0x458>)
   1515a:	0010      	movs	r0, r2
   1515c:	4798      	blx	r3
   1515e:	1c02      	adds	r2, r0, #0
   15160:	4b8b      	ldr	r3, [pc, #556]	; (15390 <process_ble_packet+0x45c>)
   15162:	498c      	ldr	r1, [pc, #560]	; (15394 <process_ble_packet+0x460>)
   15164:	1c10      	adds	r0, r2, #0
   15166:	4798      	blx	r3
   15168:	1c03      	adds	r3, r0, #0
   1516a:	1c1a      	adds	r2, r3, #0
   1516c:	4b8a      	ldr	r3, [pc, #552]	; (15398 <process_ble_packet+0x464>)
   1516e:	609a      	str	r2, [r3, #8]
			save_led_data();
   15170:	4b75      	ldr	r3, [pc, #468]	; (15348 <process_ble_packet+0x414>)
   15172:	4798      	blx	r3
			break;
   15174:	f000 fea6 	bl	15ec4 <process_ble_packet+0xf90>
		case RPM_Values:
			LIGHTS_ON = 1;
   15178:	4b72      	ldr	r3, [pc, #456]	; (15344 <process_ble_packet+0x410>)
   1517a:	2201      	movs	r2, #1
   1517c:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_RPM_CYCLE;
   1517e:	4b73      	ldr	r3, [pc, #460]	; (1534c <process_ble_packet+0x418>)
   15180:	2204      	movs	r2, #4
   15182:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15184:	4b67      	ldr	r3, [pc, #412]	; (15324 <process_ble_packet+0x3f0>)
   15186:	789b      	ldrb	r3, [r3, #2]
   15188:	220f      	movs	r2, #15
   1518a:	4393      	bics	r3, r2
   1518c:	b2da      	uxtb	r2, r3
   1518e:	4b79      	ldr	r3, [pc, #484]	; (15374 <process_ble_packet+0x440>)
   15190:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   15192:	4b64      	ldr	r3, [pc, #400]	; (15324 <process_ble_packet+0x3f0>)
   15194:	789b      	ldrb	r3, [r3, #2]
   15196:	220f      	movs	r2, #15
   15198:	4013      	ands	r3, r2
   1519a:	b2da      	uxtb	r2, r3
   1519c:	4b76      	ldr	r3, [pc, #472]	; (15378 <process_ble_packet+0x444>)
   1519e:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   151a0:	4b74      	ldr	r3, [pc, #464]	; (15374 <process_ble_packet+0x440>)
   151a2:	781b      	ldrb	r3, [r3, #0]
   151a4:	111b      	asrs	r3, r3, #4
   151a6:	b2db      	uxtb	r3, r3
   151a8:	2201      	movs	r2, #1
   151aa:	4013      	ands	r3, r2
   151ac:	b2da      	uxtb	r2, r3
   151ae:	4b73      	ldr	r3, [pc, #460]	; (1537c <process_ble_packet+0x448>)
   151b0:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   151b2:	4b70      	ldr	r3, [pc, #448]	; (15374 <process_ble_packet+0x440>)
   151b4:	781b      	ldrb	r3, [r3, #0]
   151b6:	115b      	asrs	r3, r3, #5
   151b8:	b2db      	uxtb	r3, r3
   151ba:	2201      	movs	r2, #1
   151bc:	4013      	ands	r3, r2
   151be:	b2da      	uxtb	r2, r3
   151c0:	4b6f      	ldr	r3, [pc, #444]	; (15380 <process_ble_packet+0x44c>)
   151c2:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   151c4:	4b6b      	ldr	r3, [pc, #428]	; (15374 <process_ble_packet+0x440>)
   151c6:	781b      	ldrb	r3, [r3, #0]
   151c8:	119b      	asrs	r3, r3, #6
   151ca:	b2db      	uxtb	r3, r3
   151cc:	2201      	movs	r2, #1
   151ce:	4013      	ands	r3, r2
   151d0:	b2da      	uxtb	r2, r3
   151d2:	4b6c      	ldr	r3, [pc, #432]	; (15384 <process_ble_packet+0x450>)
   151d4:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   151d6:	4b67      	ldr	r3, [pc, #412]	; (15374 <process_ble_packet+0x440>)
   151d8:	781b      	ldrb	r3, [r3, #0]
   151da:	09db      	lsrs	r3, r3, #7
   151dc:	b2da      	uxtb	r2, r3
   151de:	4b6a      	ldr	r3, [pc, #424]	; (15388 <process_ble_packet+0x454>)
   151e0:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_RPM_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   151e2:	4b50      	ldr	r3, [pc, #320]	; (15324 <process_ble_packet+0x3f0>)
   151e4:	78da      	ldrb	r2, [r3, #3]
   151e6:	4b69      	ldr	r3, [pc, #420]	; (1538c <process_ble_packet+0x458>)
   151e8:	0010      	movs	r0, r2
   151ea:	4798      	blx	r3
   151ec:	1c02      	adds	r2, r0, #0
   151ee:	4b68      	ldr	r3, [pc, #416]	; (15390 <process_ble_packet+0x45c>)
   151f0:	4968      	ldr	r1, [pc, #416]	; (15394 <process_ble_packet+0x460>)
   151f2:	1c10      	adds	r0, r2, #0
   151f4:	4798      	blx	r3
   151f6:	1c03      	adds	r3, r0, #0
   151f8:	1c1a      	adds	r2, r3, #0
   151fa:	4b68      	ldr	r3, [pc, #416]	; (1539c <process_ble_packet+0x468>)
   151fc:	611a      	str	r2, [r3, #16]
			save_led_data();
   151fe:	4b52      	ldr	r3, [pc, #328]	; (15348 <process_ble_packet+0x414>)
   15200:	4798      	blx	r3
			break;
   15202:	f000 fe5f 	bl	15ec4 <process_ble_packet+0xf90>
		case X_Accel_Values:
			LIGHTS_ON = 1;
   15206:	4b4f      	ldr	r3, [pc, #316]	; (15344 <process_ble_packet+0x410>)
   15208:	2201      	movs	r2, #1
   1520a:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_X_ACCEL;
   1520c:	4b4f      	ldr	r3, [pc, #316]	; (1534c <process_ble_packet+0x418>)
   1520e:	2206      	movs	r2, #6
   15210:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15212:	4b44      	ldr	r3, [pc, #272]	; (15324 <process_ble_packet+0x3f0>)
   15214:	789b      	ldrb	r3, [r3, #2]
   15216:	220f      	movs	r2, #15
   15218:	4393      	bics	r3, r2
   1521a:	b2da      	uxtb	r2, r3
   1521c:	4b55      	ldr	r3, [pc, #340]	; (15374 <process_ble_packet+0x440>)
   1521e:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   15220:	4b40      	ldr	r3, [pc, #256]	; (15324 <process_ble_packet+0x3f0>)
   15222:	789b      	ldrb	r3, [r3, #2]
   15224:	220f      	movs	r2, #15
   15226:	4013      	ands	r3, r2
   15228:	b2da      	uxtb	r2, r3
   1522a:	4b53      	ldr	r3, [pc, #332]	; (15378 <process_ble_packet+0x444>)
   1522c:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1522e:	4b51      	ldr	r3, [pc, #324]	; (15374 <process_ble_packet+0x440>)
   15230:	781b      	ldrb	r3, [r3, #0]
   15232:	111b      	asrs	r3, r3, #4
   15234:	b2db      	uxtb	r3, r3
   15236:	2201      	movs	r2, #1
   15238:	4013      	ands	r3, r2
   1523a:	b2da      	uxtb	r2, r3
   1523c:	4b4f      	ldr	r3, [pc, #316]	; (1537c <process_ble_packet+0x448>)
   1523e:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15240:	4b4c      	ldr	r3, [pc, #304]	; (15374 <process_ble_packet+0x440>)
   15242:	781b      	ldrb	r3, [r3, #0]
   15244:	115b      	asrs	r3, r3, #5
   15246:	b2db      	uxtb	r3, r3
   15248:	2201      	movs	r2, #1
   1524a:	4013      	ands	r3, r2
   1524c:	b2da      	uxtb	r2, r3
   1524e:	4b4c      	ldr	r3, [pc, #304]	; (15380 <process_ble_packet+0x44c>)
   15250:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15252:	4b48      	ldr	r3, [pc, #288]	; (15374 <process_ble_packet+0x440>)
   15254:	781b      	ldrb	r3, [r3, #0]
   15256:	119b      	asrs	r3, r3, #6
   15258:	b2db      	uxtb	r3, r3
   1525a:	2201      	movs	r2, #1
   1525c:	4013      	ands	r3, r2
   1525e:	b2da      	uxtb	r2, r3
   15260:	4b48      	ldr	r3, [pc, #288]	; (15384 <process_ble_packet+0x450>)
   15262:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15264:	4b43      	ldr	r3, [pc, #268]	; (15374 <process_ble_packet+0x440>)
   15266:	781b      	ldrb	r3, [r3, #0]
   15268:	09db      	lsrs	r3, r3, #7
   1526a:	b2da      	uxtb	r2, r3
   1526c:	4b46      	ldr	r3, [pc, #280]	; (15388 <process_ble_packet+0x454>)
   1526e:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_X_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
   15270:	4b2c      	ldr	r3, [pc, #176]	; (15324 <process_ble_packet+0x3f0>)
   15272:	78da      	ldrb	r2, [r3, #3]
   15274:	4b45      	ldr	r3, [pc, #276]	; (1538c <process_ble_packet+0x458>)
   15276:	0010      	movs	r0, r2
   15278:	4798      	blx	r3
   1527a:	1c02      	adds	r2, r0, #0
   1527c:	4b44      	ldr	r3, [pc, #272]	; (15390 <process_ble_packet+0x45c>)
   1527e:	4945      	ldr	r1, [pc, #276]	; (15394 <process_ble_packet+0x460>)
   15280:	1c10      	adds	r0, r2, #0
   15282:	4798      	blx	r3
   15284:	1c03      	adds	r3, r0, #0
   15286:	1c1a      	adds	r2, r3, #0
   15288:	4b44      	ldr	r3, [pc, #272]	; (1539c <process_ble_packet+0x468>)
   1528a:	619a      	str	r2, [r3, #24]
			save_led_data();
   1528c:	4b2e      	ldr	r3, [pc, #184]	; (15348 <process_ble_packet+0x414>)
   1528e:	4798      	blx	r3
			break;
   15290:	f000 fe18 	bl	15ec4 <process_ble_packet+0xf90>
		case Y_Accel_Values:
			LIGHTS_ON = 1;
   15294:	4b2b      	ldr	r3, [pc, #172]	; (15344 <process_ble_packet+0x410>)
   15296:	2201      	movs	r2, #1
   15298:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_Y_ACCEL;
   1529a:	4b2c      	ldr	r3, [pc, #176]	; (1534c <process_ble_packet+0x418>)
   1529c:	2207      	movs	r2, #7
   1529e:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   152a0:	4b20      	ldr	r3, [pc, #128]	; (15324 <process_ble_packet+0x3f0>)
   152a2:	789b      	ldrb	r3, [r3, #2]
   152a4:	220f      	movs	r2, #15
   152a6:	4393      	bics	r3, r2
   152a8:	b2da      	uxtb	r2, r3
   152aa:	4b32      	ldr	r3, [pc, #200]	; (15374 <process_ble_packet+0x440>)
   152ac:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   152ae:	4b1d      	ldr	r3, [pc, #116]	; (15324 <process_ble_packet+0x3f0>)
   152b0:	789b      	ldrb	r3, [r3, #2]
   152b2:	220f      	movs	r2, #15
   152b4:	4013      	ands	r3, r2
   152b6:	b2da      	uxtb	r2, r3
   152b8:	4b2f      	ldr	r3, [pc, #188]	; (15378 <process_ble_packet+0x444>)
   152ba:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   152bc:	4b2d      	ldr	r3, [pc, #180]	; (15374 <process_ble_packet+0x440>)
   152be:	781b      	ldrb	r3, [r3, #0]
   152c0:	111b      	asrs	r3, r3, #4
   152c2:	b2db      	uxtb	r3, r3
   152c4:	2201      	movs	r2, #1
   152c6:	4013      	ands	r3, r2
   152c8:	b2da      	uxtb	r2, r3
   152ca:	4b2c      	ldr	r3, [pc, #176]	; (1537c <process_ble_packet+0x448>)
   152cc:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   152ce:	4b29      	ldr	r3, [pc, #164]	; (15374 <process_ble_packet+0x440>)
   152d0:	781b      	ldrb	r3, [r3, #0]
   152d2:	115b      	asrs	r3, r3, #5
   152d4:	b2db      	uxtb	r3, r3
   152d6:	2201      	movs	r2, #1
   152d8:	4013      	ands	r3, r2
   152da:	b2da      	uxtb	r2, r3
   152dc:	4b28      	ldr	r3, [pc, #160]	; (15380 <process_ble_packet+0x44c>)
   152de:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   152e0:	4b24      	ldr	r3, [pc, #144]	; (15374 <process_ble_packet+0x440>)
   152e2:	781b      	ldrb	r3, [r3, #0]
   152e4:	119b      	asrs	r3, r3, #6
   152e6:	b2db      	uxtb	r3, r3
   152e8:	2201      	movs	r2, #1
   152ea:	4013      	ands	r3, r2
   152ec:	b2da      	uxtb	r2, r3
   152ee:	4b25      	ldr	r3, [pc, #148]	; (15384 <process_ble_packet+0x450>)
   152f0:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   152f2:	4b20      	ldr	r3, [pc, #128]	; (15374 <process_ble_packet+0x440>)
   152f4:	781b      	ldrb	r3, [r3, #0]
   152f6:	09db      	lsrs	r3, r3, #7
   152f8:	b2da      	uxtb	r2, r3
   152fa:	4b23      	ldr	r3, [pc, #140]	; (15388 <process_ble_packet+0x454>)
   152fc:	701a      	strb	r2, [r3, #0]
			Brightness[MODE_ANALOG_Y_ACCEL] = ((float)(ble_recieve_packet.payload[1]))/100;
   152fe:	4b09      	ldr	r3, [pc, #36]	; (15324 <process_ble_packet+0x3f0>)
   15300:	78da      	ldrb	r2, [r3, #3]
   15302:	4b22      	ldr	r3, [pc, #136]	; (1538c <process_ble_packet+0x458>)
   15304:	0010      	movs	r0, r2
   15306:	4798      	blx	r3
   15308:	1c02      	adds	r2, r0, #0
   1530a:	4b21      	ldr	r3, [pc, #132]	; (15390 <process_ble_packet+0x45c>)
   1530c:	4921      	ldr	r1, [pc, #132]	; (15394 <process_ble_packet+0x460>)
   1530e:	1c10      	adds	r0, r2, #0
   15310:	4798      	blx	r3
   15312:	1c03      	adds	r3, r0, #0
   15314:	1c1a      	adds	r2, r3, #0
   15316:	4b20      	ldr	r3, [pc, #128]	; (15398 <process_ble_packet+0x464>)
   15318:	61da      	str	r2, [r3, #28]
			save_led_data();
   1531a:	4b0b      	ldr	r3, [pc, #44]	; (15348 <process_ble_packet+0x414>)
   1531c:	4798      	blx	r3
			break;
   1531e:	f000 fdd1 	bl	15ec4 <process_ble_packet+0xf90>
   15322:	46c0      	nop			; (mov r8, r8)
   15324:	200006e0 	.word	0x200006e0
   15328:	0001bc68 	.word	0x0001bc68
   1532c:	200000da 	.word	0x200000da
   15330:	200000fa 	.word	0x200000fa
   15334:	20000434 	.word	0x20000434
   15338:	0000e991 	.word	0x0000e991
   1533c:	000144b5 	.word	0x000144b5
   15340:	20000436 	.word	0x20000436
   15344:	200000cd 	.word	0x200000cd
   15348:	00013ac5 	.word	0x00013ac5
   1534c:	20000034 	.word	0x20000034
   15350:	20000437 	.word	0x20000437
   15354:	20000438 	.word	0x20000438
   15358:	20000439 	.word	0x20000439
   1535c:	2000043a 	.word	0x2000043a
   15360:	2000043b 	.word	0x2000043b
   15364:	2000043c 	.word	0x2000043c
   15368:	20000414 	.word	0x20000414
   1536c:	200000f9 	.word	0x200000f9
   15370:	20000405 	.word	0x20000405
   15374:	20000372 	.word	0x20000372
   15378:	20001a4c 	.word	0x20001a4c
   1537c:	200000cc 	.word	0x200000cc
   15380:	2000036f 	.word	0x2000036f
   15384:	20000370 	.word	0x20000370
   15388:	20000371 	.word	0x20000371
   1538c:	00019605 	.word	0x00019605
   15390:	00018bcd 	.word	0x00018bcd
   15394:	42c80000 	.word	0x42c80000
   15398:	20000068 	.word	0x20000068
   1539c:	20000044 	.word	0x20000044
		case Apply_Orientation:
			ORIENTATION[0] = ble_recieve_packet.payload[0];
   153a0:	4bdc      	ldr	r3, [pc, #880]	; (15714 <process_ble_packet+0x7e0>)
   153a2:	789a      	ldrb	r2, [r3, #2]
   153a4:	4bdc      	ldr	r3, [pc, #880]	; (15718 <process_ble_packet+0x7e4>)
   153a6:	701a      	strb	r2, [r3, #0]
			ORIENTATION[1] = ble_recieve_packet.payload[1];
   153a8:	4bda      	ldr	r3, [pc, #872]	; (15714 <process_ble_packet+0x7e0>)
   153aa:	78da      	ldrb	r2, [r3, #3]
   153ac:	4bda      	ldr	r3, [pc, #872]	; (15718 <process_ble_packet+0x7e4>)
   153ae:	705a      	strb	r2, [r3, #1]
			save_orientation_controls_remote_esc_lights();
   153b0:	4bda      	ldr	r3, [pc, #872]	; (1571c <process_ble_packet+0x7e8>)
   153b2:	4798      	blx	r3
			break;
   153b4:	f000 fd86 	bl	15ec4 <process_ble_packet+0xf90>
		case Apply_Remote_Config:
			remote_type = (ble_recieve_packet.payload[0]&0x0F0)>>4;
   153b8:	4bd6      	ldr	r3, [pc, #856]	; (15714 <process_ble_packet+0x7e0>)
   153ba:	789b      	ldrb	r3, [r3, #2]
   153bc:	091b      	lsrs	r3, r3, #4
   153be:	b2da      	uxtb	r2, r3
   153c0:	4bd7      	ldr	r3, [pc, #860]	; (15720 <process_ble_packet+0x7ec>)
   153c2:	701a      	strb	r2, [r3, #0]
			button_type = (ble_recieve_packet.payload[0]&0x0F);
   153c4:	4bd3      	ldr	r3, [pc, #844]	; (15714 <process_ble_packet+0x7e0>)
   153c6:	789b      	ldrb	r3, [r3, #2]
   153c8:	220f      	movs	r2, #15
   153ca:	4013      	ands	r3, r2
   153cc:	b2da      	uxtb	r2, r3
   153ce:	4bd5      	ldr	r3, [pc, #852]	; (15724 <process_ble_packet+0x7f0>)
   153d0:	701a      	strb	r2, [r3, #0]
			deadzone = ble_recieve_packet.payload[1];
   153d2:	4bd0      	ldr	r3, [pc, #832]	; (15714 <process_ble_packet+0x7e0>)
   153d4:	78da      	ldrb	r2, [r3, #3]
   153d6:	4bd4      	ldr	r3, [pc, #848]	; (15728 <process_ble_packet+0x7f4>)
   153d8:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   153da:	4bd0      	ldr	r3, [pc, #832]	; (1571c <process_ble_packet+0x7e8>)
   153dc:	4798      	blx	r3
			break;
   153de:	f000 fd71 	bl	15ec4 <process_ble_packet+0xf90>
		case Apply_ESC_Config:
			esc_fw = ble_recieve_packet.payload[0];
   153e2:	4bcc      	ldr	r3, [pc, #816]	; (15714 <process_ble_packet+0x7e0>)
   153e4:	789a      	ldrb	r2, [r3, #2]
   153e6:	4bd1      	ldr	r3, [pc, #836]	; (1572c <process_ble_packet+0x7f8>)
   153e8:	701a      	strb	r2, [r3, #0]
			esc_comms = (ble_recieve_packet.payload[1]&0x0F0)>>4;
   153ea:	4bca      	ldr	r3, [pc, #808]	; (15714 <process_ble_packet+0x7e0>)
   153ec:	78db      	ldrb	r3, [r3, #3]
   153ee:	091b      	lsrs	r3, r3, #4
   153f0:	b2da      	uxtb	r2, r3
   153f2:	4bcf      	ldr	r3, [pc, #828]	; (15730 <process_ble_packet+0x7fc>)
   153f4:	701a      	strb	r2, [r3, #0]
			UART_baud = (ble_recieve_packet.payload[1]&0x0F);
   153f6:	4bc7      	ldr	r3, [pc, #796]	; (15714 <process_ble_packet+0x7e0>)
   153f8:	78db      	ldrb	r3, [r3, #3]
   153fa:	220f      	movs	r2, #15
   153fc:	4013      	ands	r3, r2
   153fe:	b2da      	uxtb	r2, r3
   15400:	4bcc      	ldr	r3, [pc, #816]	; (15734 <process_ble_packet+0x800>)
   15402:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   15404:	4bc5      	ldr	r3, [pc, #788]	; (1571c <process_ble_packet+0x7e8>)
   15406:	4798      	blx	r3
			configured_comms = esc_comms;
   15408:	4bc9      	ldr	r3, [pc, #804]	; (15730 <process_ble_packet+0x7fc>)
   1540a:	781a      	ldrb	r2, [r3, #0]
   1540c:	4bca      	ldr	r3, [pc, #808]	; (15738 <process_ble_packet+0x804>)
   1540e:	701a      	strb	r2, [r3, #0]
			break;
   15410:	f000 fd58 	bl	15ec4 <process_ble_packet+0xf90>
		case Apply_Lights_Config:
			RGB_led_type = (ble_recieve_packet.payload[0]&0x0F0)>>4;
   15414:	4bbf      	ldr	r3, [pc, #764]	; (15714 <process_ble_packet+0x7e0>)
   15416:	789b      	ldrb	r3, [r3, #2]
   15418:	091b      	lsrs	r3, r3, #4
   1541a:	b2da      	uxtb	r2, r3
   1541c:	4bc7      	ldr	r3, [pc, #796]	; (1573c <process_ble_packet+0x808>)
   1541e:	701a      	strb	r2, [r3, #0]
			brake_light_mode = (ble_recieve_packet.payload[0]&0x0F);
   15420:	4bbc      	ldr	r3, [pc, #752]	; (15714 <process_ble_packet+0x7e0>)
   15422:	789b      	ldrb	r3, [r3, #2]
   15424:	220f      	movs	r2, #15
   15426:	4013      	ands	r3, r2
   15428:	b2da      	uxtb	r2, r3
   1542a:	4bc5      	ldr	r3, [pc, #788]	; (15740 <process_ble_packet+0x80c>)
   1542c:	701a      	strb	r2, [r3, #0]
			deadzone = (ble_recieve_packet.payload[1]);
   1542e:	4bb9      	ldr	r3, [pc, #740]	; (15714 <process_ble_packet+0x7e0>)
   15430:	78da      	ldrb	r2, [r3, #3]
   15432:	4bbd      	ldr	r3, [pc, #756]	; (15728 <process_ble_packet+0x7f4>)
   15434:	701a      	strb	r2, [r3, #0]
			led_num = (ble_recieve_packet.payload[2]);
   15436:	4bb7      	ldr	r3, [pc, #732]	; (15714 <process_ble_packet+0x7e0>)
   15438:	791a      	ldrb	r2, [r3, #4]
   1543a:	4bc2      	ldr	r3, [pc, #776]	; (15744 <process_ble_packet+0x810>)
   1543c:	701a      	strb	r2, [r3, #0]
			SYNC_RGB = (ble_recieve_packet.payload[3]&0x80)==0x80;
   1543e:	4bb5      	ldr	r3, [pc, #724]	; (15714 <process_ble_packet+0x7e0>)
   15440:	795b      	ldrb	r3, [r3, #5]
   15442:	b25b      	sxtb	r3, r3
   15444:	b2db      	uxtb	r3, r3
   15446:	09db      	lsrs	r3, r3, #7
   15448:	b2da      	uxtb	r2, r3
   1544a:	4bbf      	ldr	r3, [pc, #764]	; (15748 <process_ble_packet+0x814>)
   1544c:	701a      	strb	r2, [r3, #0]
			BRAKE_ALWAYS_ON = (ble_recieve_packet.payload[3]&0x40)==0x40;
   1544e:	4bb1      	ldr	r3, [pc, #708]	; (15714 <process_ble_packet+0x7e0>)
   15450:	795b      	ldrb	r3, [r3, #5]
   15452:	001a      	movs	r2, r3
   15454:	2340      	movs	r3, #64	; 0x40
   15456:	4013      	ands	r3, r2
   15458:	1e5a      	subs	r2, r3, #1
   1545a:	4193      	sbcs	r3, r2
   1545c:	b2da      	uxtb	r2, r3
   1545e:	4bbb      	ldr	r3, [pc, #748]	; (1574c <process_ble_packet+0x818>)
   15460:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   15462:	4bae      	ldr	r3, [pc, #696]	; (1571c <process_ble_packet+0x7e8>)
   15464:	4798      	blx	r3
			break;
   15466:	f000 fd2d 	bl	15ec4 <process_ble_packet+0xf90>
		case Color_Cycle_Values:
			LIGHTS_ON = 1;
   1546a:	4bb9      	ldr	r3, [pc, #740]	; (15750 <process_ble_packet+0x81c>)
   1546c:	2201      	movs	r2, #1
   1546e:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_COLOR_CYCLE;
   15470:	4bb8      	ldr	r3, [pc, #736]	; (15754 <process_ble_packet+0x820>)
   15472:	2201      	movs	r2, #1
   15474:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15476:	4ba7      	ldr	r3, [pc, #668]	; (15714 <process_ble_packet+0x7e0>)
   15478:	789b      	ldrb	r3, [r3, #2]
   1547a:	220f      	movs	r2, #15
   1547c:	4393      	bics	r3, r2
   1547e:	b2da      	uxtb	r2, r3
   15480:	4bb5      	ldr	r3, [pc, #724]	; (15758 <process_ble_packet+0x824>)
   15482:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   15484:	4ba3      	ldr	r3, [pc, #652]	; (15714 <process_ble_packet+0x7e0>)
   15486:	789b      	ldrb	r3, [r3, #2]
   15488:	220f      	movs	r2, #15
   1548a:	4013      	ands	r3, r2
   1548c:	b2da      	uxtb	r2, r3
   1548e:	4bab      	ldr	r3, [pc, #684]	; (1573c <process_ble_packet+0x808>)
   15490:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15492:	4bb1      	ldr	r3, [pc, #708]	; (15758 <process_ble_packet+0x824>)
   15494:	781b      	ldrb	r3, [r3, #0]
   15496:	111b      	asrs	r3, r3, #4
   15498:	b2db      	uxtb	r3, r3
   1549a:	2201      	movs	r2, #1
   1549c:	4013      	ands	r3, r2
   1549e:	b2da      	uxtb	r2, r3
   154a0:	4bae      	ldr	r3, [pc, #696]	; (1575c <process_ble_packet+0x828>)
   154a2:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   154a4:	4bac      	ldr	r3, [pc, #688]	; (15758 <process_ble_packet+0x824>)
   154a6:	781b      	ldrb	r3, [r3, #0]
   154a8:	115b      	asrs	r3, r3, #5
   154aa:	b2db      	uxtb	r3, r3
   154ac:	2201      	movs	r2, #1
   154ae:	4013      	ands	r3, r2
   154b0:	b2da      	uxtb	r2, r3
   154b2:	4bab      	ldr	r3, [pc, #684]	; (15760 <process_ble_packet+0x82c>)
   154b4:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   154b6:	4ba8      	ldr	r3, [pc, #672]	; (15758 <process_ble_packet+0x824>)
   154b8:	781b      	ldrb	r3, [r3, #0]
   154ba:	119b      	asrs	r3, r3, #6
   154bc:	b2db      	uxtb	r3, r3
   154be:	2201      	movs	r2, #1
   154c0:	4013      	ands	r3, r2
   154c2:	b2da      	uxtb	r2, r3
   154c4:	4ba7      	ldr	r3, [pc, #668]	; (15764 <process_ble_packet+0x830>)
   154c6:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   154c8:	4ba3      	ldr	r3, [pc, #652]	; (15758 <process_ble_packet+0x824>)
   154ca:	781b      	ldrb	r3, [r3, #0]
   154cc:	09db      	lsrs	r3, r3, #7
   154ce:	b2da      	uxtb	r2, r3
   154d0:	4ba5      	ldr	r3, [pc, #660]	; (15768 <process_ble_packet+0x834>)
   154d2:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   154d4:	4b8f      	ldr	r3, [pc, #572]	; (15714 <process_ble_packet+0x7e0>)
   154d6:	78da      	ldrb	r2, [r3, #3]
   154d8:	4ba4      	ldr	r3, [pc, #656]	; (1576c <process_ble_packet+0x838>)
   154da:	0010      	movs	r0, r2
   154dc:	4798      	blx	r3
   154de:	1c02      	adds	r2, r0, #0
   154e0:	4ba3      	ldr	r3, [pc, #652]	; (15770 <process_ble_packet+0x83c>)
   154e2:	49a4      	ldr	r1, [pc, #656]	; (15774 <process_ble_packet+0x840>)
   154e4:	1c10      	adds	r0, r2, #0
   154e6:	4798      	blx	r3
   154e8:	1c03      	adds	r3, r0, #0
   154ea:	1c1a      	adds	r2, r3, #0
   154ec:	4ba2      	ldr	r3, [pc, #648]	; (15778 <process_ble_packet+0x844>)
   154ee:	605a      	str	r2, [r3, #4]
			Brightness[MODE_ANALOG_COLOR_CYCLE] = ((float)(ble_recieve_packet.payload[2]))/100;
   154f0:	4b88      	ldr	r3, [pc, #544]	; (15714 <process_ble_packet+0x7e0>)
   154f2:	791a      	ldrb	r2, [r3, #4]
   154f4:	4b9d      	ldr	r3, [pc, #628]	; (1576c <process_ble_packet+0x838>)
   154f6:	0010      	movs	r0, r2
   154f8:	4798      	blx	r3
   154fa:	1c02      	adds	r2, r0, #0
   154fc:	4b9c      	ldr	r3, [pc, #624]	; (15770 <process_ble_packet+0x83c>)
   154fe:	499d      	ldr	r1, [pc, #628]	; (15774 <process_ble_packet+0x840>)
   15500:	1c10      	adds	r0, r2, #0
   15502:	4798      	blx	r3
   15504:	1c03      	adds	r3, r0, #0
   15506:	1c1a      	adds	r2, r3, #0
   15508:	4b9c      	ldr	r3, [pc, #624]	; (1577c <process_ble_packet+0x848>)
   1550a:	605a      	str	r2, [r3, #4]
			save_led_data();
   1550c:	4b9c      	ldr	r3, [pc, #624]	; (15780 <process_ble_packet+0x84c>)
   1550e:	4798      	blx	r3
			break;
   15510:	f000 fcd8 	bl	15ec4 <process_ble_packet+0xf90>
		case Throttle_Values:
			LIGHTS_ON = 1;
   15514:	4b8e      	ldr	r3, [pc, #568]	; (15750 <process_ble_packet+0x81c>)
   15516:	2201      	movs	r2, #1
   15518:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_THROTTLE;
   1551a:	4b8e      	ldr	r3, [pc, #568]	; (15754 <process_ble_packet+0x820>)
   1551c:	2203      	movs	r2, #3
   1551e:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15520:	4b7c      	ldr	r3, [pc, #496]	; (15714 <process_ble_packet+0x7e0>)
   15522:	789b      	ldrb	r3, [r3, #2]
   15524:	220f      	movs	r2, #15
   15526:	4393      	bics	r3, r2
   15528:	b2da      	uxtb	r2, r3
   1552a:	4b8b      	ldr	r3, [pc, #556]	; (15758 <process_ble_packet+0x824>)
   1552c:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   1552e:	4b79      	ldr	r3, [pc, #484]	; (15714 <process_ble_packet+0x7e0>)
   15530:	789b      	ldrb	r3, [r3, #2]
   15532:	220f      	movs	r2, #15
   15534:	4013      	ands	r3, r2
   15536:	b2da      	uxtb	r2, r3
   15538:	4b80      	ldr	r3, [pc, #512]	; (1573c <process_ble_packet+0x808>)
   1553a:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1553c:	4b86      	ldr	r3, [pc, #536]	; (15758 <process_ble_packet+0x824>)
   1553e:	781b      	ldrb	r3, [r3, #0]
   15540:	111b      	asrs	r3, r3, #4
   15542:	b2db      	uxtb	r3, r3
   15544:	2201      	movs	r2, #1
   15546:	4013      	ands	r3, r2
   15548:	b2da      	uxtb	r2, r3
   1554a:	4b84      	ldr	r3, [pc, #528]	; (1575c <process_ble_packet+0x828>)
   1554c:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   1554e:	4b82      	ldr	r3, [pc, #520]	; (15758 <process_ble_packet+0x824>)
   15550:	781b      	ldrb	r3, [r3, #0]
   15552:	115b      	asrs	r3, r3, #5
   15554:	b2db      	uxtb	r3, r3
   15556:	2201      	movs	r2, #1
   15558:	4013      	ands	r3, r2
   1555a:	b2da      	uxtb	r2, r3
   1555c:	4b80      	ldr	r3, [pc, #512]	; (15760 <process_ble_packet+0x82c>)
   1555e:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15560:	4b7d      	ldr	r3, [pc, #500]	; (15758 <process_ble_packet+0x824>)
   15562:	781b      	ldrb	r3, [r3, #0]
   15564:	119b      	asrs	r3, r3, #6
   15566:	b2db      	uxtb	r3, r3
   15568:	2201      	movs	r2, #1
   1556a:	4013      	ands	r3, r2
   1556c:	b2da      	uxtb	r2, r3
   1556e:	4b7d      	ldr	r3, [pc, #500]	; (15764 <process_ble_packet+0x830>)
   15570:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15572:	4b79      	ldr	r3, [pc, #484]	; (15758 <process_ble_packet+0x824>)
   15574:	781b      	ldrb	r3, [r3, #0]
   15576:	09db      	lsrs	r3, r3, #7
   15578:	b2da      	uxtb	r2, r3
   1557a:	4b7b      	ldr	r3, [pc, #492]	; (15768 <process_ble_packet+0x834>)
   1557c:	701a      	strb	r2, [r3, #0]
			RateSens[MODE_ANALOG_THROTTLE] = ((float)(ble_recieve_packet.payload[1]))/100;
   1557e:	4b65      	ldr	r3, [pc, #404]	; (15714 <process_ble_packet+0x7e0>)
   15580:	78da      	ldrb	r2, [r3, #3]
   15582:	4b7a      	ldr	r3, [pc, #488]	; (1576c <process_ble_packet+0x838>)
   15584:	0010      	movs	r0, r2
   15586:	4798      	blx	r3
   15588:	1c02      	adds	r2, r0, #0
   1558a:	4b79      	ldr	r3, [pc, #484]	; (15770 <process_ble_packet+0x83c>)
   1558c:	4979      	ldr	r1, [pc, #484]	; (15774 <process_ble_packet+0x840>)
   1558e:	1c10      	adds	r0, r2, #0
   15590:	4798      	blx	r3
   15592:	1c03      	adds	r3, r0, #0
   15594:	1c1a      	adds	r2, r3, #0
   15596:	4b78      	ldr	r3, [pc, #480]	; (15778 <process_ble_packet+0x844>)
   15598:	60da      	str	r2, [r3, #12]
			Brightness[MODE_ANALOG_THROTTLE] = ((float)(ble_recieve_packet.payload[2]))/100;
   1559a:	4b5e      	ldr	r3, [pc, #376]	; (15714 <process_ble_packet+0x7e0>)
   1559c:	791a      	ldrb	r2, [r3, #4]
   1559e:	4b73      	ldr	r3, [pc, #460]	; (1576c <process_ble_packet+0x838>)
   155a0:	0010      	movs	r0, r2
   155a2:	4798      	blx	r3
   155a4:	1c02      	adds	r2, r0, #0
   155a6:	4b72      	ldr	r3, [pc, #456]	; (15770 <process_ble_packet+0x83c>)
   155a8:	4972      	ldr	r1, [pc, #456]	; (15774 <process_ble_packet+0x840>)
   155aa:	1c10      	adds	r0, r2, #0
   155ac:	4798      	blx	r3
   155ae:	1c03      	adds	r3, r0, #0
   155b0:	1c1a      	adds	r2, r3, #0
   155b2:	4b72      	ldr	r3, [pc, #456]	; (1577c <process_ble_packet+0x848>)
   155b4:	60da      	str	r2, [r3, #12]
			save_led_data();
   155b6:	4b72      	ldr	r3, [pc, #456]	; (15780 <process_ble_packet+0x84c>)
   155b8:	4798      	blx	r3
			break;
   155ba:	f000 fc83 	bl	15ec4 <process_ble_packet+0xf90>
		case Static_Values:
			LIGHTS_ON = 1;
   155be:	4b64      	ldr	r3, [pc, #400]	; (15750 <process_ble_packet+0x81c>)
   155c0:	2201      	movs	r2, #1
   155c2:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_STATIC;
   155c4:	4b63      	ldr	r3, [pc, #396]	; (15754 <process_ble_packet+0x820>)
   155c6:	2200      	movs	r2, #0
   155c8:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   155ca:	4b52      	ldr	r3, [pc, #328]	; (15714 <process_ble_packet+0x7e0>)
   155cc:	789b      	ldrb	r3, [r3, #2]
   155ce:	220f      	movs	r2, #15
   155d0:	4393      	bics	r3, r2
   155d2:	b2da      	uxtb	r2, r3
   155d4:	4b60      	ldr	r3, [pc, #384]	; (15758 <process_ble_packet+0x824>)
   155d6:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   155d8:	4b4e      	ldr	r3, [pc, #312]	; (15714 <process_ble_packet+0x7e0>)
   155da:	789b      	ldrb	r3, [r3, #2]
   155dc:	220f      	movs	r2, #15
   155de:	4013      	ands	r3, r2
   155e0:	b2da      	uxtb	r2, r3
   155e2:	4b56      	ldr	r3, [pc, #344]	; (1573c <process_ble_packet+0x808>)
   155e4:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   155e6:	4b5c      	ldr	r3, [pc, #368]	; (15758 <process_ble_packet+0x824>)
   155e8:	781b      	ldrb	r3, [r3, #0]
   155ea:	111b      	asrs	r3, r3, #4
   155ec:	b2db      	uxtb	r3, r3
   155ee:	2201      	movs	r2, #1
   155f0:	4013      	ands	r3, r2
   155f2:	b2da      	uxtb	r2, r3
   155f4:	4b59      	ldr	r3, [pc, #356]	; (1575c <process_ble_packet+0x828>)
   155f6:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   155f8:	4b57      	ldr	r3, [pc, #348]	; (15758 <process_ble_packet+0x824>)
   155fa:	781b      	ldrb	r3, [r3, #0]
   155fc:	115b      	asrs	r3, r3, #5
   155fe:	b2db      	uxtb	r3, r3
   15600:	2201      	movs	r2, #1
   15602:	4013      	ands	r3, r2
   15604:	b2da      	uxtb	r2, r3
   15606:	4b56      	ldr	r3, [pc, #344]	; (15760 <process_ble_packet+0x82c>)
   15608:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   1560a:	4b53      	ldr	r3, [pc, #332]	; (15758 <process_ble_packet+0x824>)
   1560c:	781b      	ldrb	r3, [r3, #0]
   1560e:	119b      	asrs	r3, r3, #6
   15610:	b2db      	uxtb	r3, r3
   15612:	2201      	movs	r2, #1
   15614:	4013      	ands	r3, r2
   15616:	b2da      	uxtb	r2, r3
   15618:	4b52      	ldr	r3, [pc, #328]	; (15764 <process_ble_packet+0x830>)
   1561a:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   1561c:	4b4e      	ldr	r3, [pc, #312]	; (15758 <process_ble_packet+0x824>)
   1561e:	781b      	ldrb	r3, [r3, #0]
   15620:	09db      	lsrs	r3, r3, #7
   15622:	b2da      	uxtb	r2, r3
   15624:	4b50      	ldr	r3, [pc, #320]	; (15768 <process_ble_packet+0x834>)
   15626:	701a      	strb	r2, [r3, #0]
			Static_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[1] * 257);
   15628:	4b3a      	ldr	r3, [pc, #232]	; (15714 <process_ble_packet+0x7e0>)
   1562a:	78da      	ldrb	r2, [r3, #3]
   1562c:	4b4f      	ldr	r3, [pc, #316]	; (1576c <process_ble_packet+0x838>)
   1562e:	0010      	movs	r0, r2
   15630:	4798      	blx	r3
   15632:	1c02      	adds	r2, r0, #0
   15634:	4b53      	ldr	r3, [pc, #332]	; (15784 <process_ble_packet+0x850>)
   15636:	4954      	ldr	r1, [pc, #336]	; (15788 <process_ble_packet+0x854>)
   15638:	1c10      	adds	r0, r2, #0
   1563a:	4798      	blx	r3
   1563c:	1c03      	adds	r3, r0, #0
   1563e:	1c1a      	adds	r2, r3, #0
   15640:	4b52      	ldr	r3, [pc, #328]	; (1578c <process_ble_packet+0x858>)
   15642:	1c10      	adds	r0, r2, #0
   15644:	4798      	blx	r3
   15646:	0003      	movs	r3, r0
   15648:	b29a      	uxth	r2, r3
   1564a:	4b51      	ldr	r3, [pc, #324]	; (15790 <process_ble_packet+0x85c>)
   1564c:	801a      	strh	r2, [r3, #0]
			Static_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[2] * 257);
   1564e:	4b31      	ldr	r3, [pc, #196]	; (15714 <process_ble_packet+0x7e0>)
   15650:	791a      	ldrb	r2, [r3, #4]
   15652:	4b46      	ldr	r3, [pc, #280]	; (1576c <process_ble_packet+0x838>)
   15654:	0010      	movs	r0, r2
   15656:	4798      	blx	r3
   15658:	1c02      	adds	r2, r0, #0
   1565a:	4b4a      	ldr	r3, [pc, #296]	; (15784 <process_ble_packet+0x850>)
   1565c:	494a      	ldr	r1, [pc, #296]	; (15788 <process_ble_packet+0x854>)
   1565e:	1c10      	adds	r0, r2, #0
   15660:	4798      	blx	r3
   15662:	1c03      	adds	r3, r0, #0
   15664:	1c1a      	adds	r2, r3, #0
   15666:	4b49      	ldr	r3, [pc, #292]	; (1578c <process_ble_packet+0x858>)
   15668:	1c10      	adds	r0, r2, #0
   1566a:	4798      	blx	r3
   1566c:	0003      	movs	r3, r0
   1566e:	b29a      	uxth	r2, r3
   15670:	4b47      	ldr	r3, [pc, #284]	; (15790 <process_ble_packet+0x85c>)
   15672:	805a      	strh	r2, [r3, #2]
			Static_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
   15674:	4b27      	ldr	r3, [pc, #156]	; (15714 <process_ble_packet+0x7e0>)
   15676:	795a      	ldrb	r2, [r3, #5]
   15678:	4b3c      	ldr	r3, [pc, #240]	; (1576c <process_ble_packet+0x838>)
   1567a:	0010      	movs	r0, r2
   1567c:	4798      	blx	r3
   1567e:	1c02      	adds	r2, r0, #0
   15680:	4b40      	ldr	r3, [pc, #256]	; (15784 <process_ble_packet+0x850>)
   15682:	4941      	ldr	r1, [pc, #260]	; (15788 <process_ble_packet+0x854>)
   15684:	1c10      	adds	r0, r2, #0
   15686:	4798      	blx	r3
   15688:	1c03      	adds	r3, r0, #0
   1568a:	1c1a      	adds	r2, r3, #0
   1568c:	4b3f      	ldr	r3, [pc, #252]	; (1578c <process_ble_packet+0x858>)
   1568e:	1c10      	adds	r0, r2, #0
   15690:	4798      	blx	r3
   15692:	0003      	movs	r3, r0
   15694:	b29a      	uxth	r2, r3
   15696:	4b3e      	ldr	r3, [pc, #248]	; (15790 <process_ble_packet+0x85c>)
   15698:	809a      	strh	r2, [r3, #4]
			Static_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
   1569a:	4b1e      	ldr	r3, [pc, #120]	; (15714 <process_ble_packet+0x7e0>)
   1569c:	799a      	ldrb	r2, [r3, #6]
   1569e:	4b33      	ldr	r3, [pc, #204]	; (1576c <process_ble_packet+0x838>)
   156a0:	0010      	movs	r0, r2
   156a2:	4798      	blx	r3
   156a4:	1c02      	adds	r2, r0, #0
   156a6:	4b37      	ldr	r3, [pc, #220]	; (15784 <process_ble_packet+0x850>)
   156a8:	4937      	ldr	r1, [pc, #220]	; (15788 <process_ble_packet+0x854>)
   156aa:	1c10      	adds	r0, r2, #0
   156ac:	4798      	blx	r3
   156ae:	1c03      	adds	r3, r0, #0
   156b0:	1c1a      	adds	r2, r3, #0
   156b2:	4b36      	ldr	r3, [pc, #216]	; (1578c <process_ble_packet+0x858>)
   156b4:	1c10      	adds	r0, r2, #0
   156b6:	4798      	blx	r3
   156b8:	0003      	movs	r3, r0
   156ba:	b29a      	uxth	r2, r3
   156bc:	4b34      	ldr	r3, [pc, #208]	; (15790 <process_ble_packet+0x85c>)
   156be:	80da      	strh	r2, [r3, #6]
			Static_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
   156c0:	4b14      	ldr	r3, [pc, #80]	; (15714 <process_ble_packet+0x7e0>)
   156c2:	79da      	ldrb	r2, [r3, #7]
   156c4:	4b29      	ldr	r3, [pc, #164]	; (1576c <process_ble_packet+0x838>)
   156c6:	0010      	movs	r0, r2
   156c8:	4798      	blx	r3
   156ca:	1c02      	adds	r2, r0, #0
   156cc:	4b2d      	ldr	r3, [pc, #180]	; (15784 <process_ble_packet+0x850>)
   156ce:	492e      	ldr	r1, [pc, #184]	; (15788 <process_ble_packet+0x854>)
   156d0:	1c10      	adds	r0, r2, #0
   156d2:	4798      	blx	r3
   156d4:	1c03      	adds	r3, r0, #0
   156d6:	1c1a      	adds	r2, r3, #0
   156d8:	4b2c      	ldr	r3, [pc, #176]	; (1578c <process_ble_packet+0x858>)
   156da:	1c10      	adds	r0, r2, #0
   156dc:	4798      	blx	r3
   156de:	0003      	movs	r3, r0
   156e0:	b29a      	uxth	r2, r3
   156e2:	4b2b      	ldr	r3, [pc, #172]	; (15790 <process_ble_packet+0x85c>)
   156e4:	811a      	strh	r2, [r3, #8]
			Static_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
   156e6:	4b0b      	ldr	r3, [pc, #44]	; (15714 <process_ble_packet+0x7e0>)
   156e8:	7a1a      	ldrb	r2, [r3, #8]
   156ea:	4b20      	ldr	r3, [pc, #128]	; (1576c <process_ble_packet+0x838>)
   156ec:	0010      	movs	r0, r2
   156ee:	4798      	blx	r3
   156f0:	1c02      	adds	r2, r0, #0
   156f2:	4b24      	ldr	r3, [pc, #144]	; (15784 <process_ble_packet+0x850>)
   156f4:	4924      	ldr	r1, [pc, #144]	; (15788 <process_ble_packet+0x854>)
   156f6:	1c10      	adds	r0, r2, #0
   156f8:	4798      	blx	r3
   156fa:	1c03      	adds	r3, r0, #0
   156fc:	1c1a      	adds	r2, r3, #0
   156fe:	4b23      	ldr	r3, [pc, #140]	; (1578c <process_ble_packet+0x858>)
   15700:	1c10      	adds	r0, r2, #0
   15702:	4798      	blx	r3
   15704:	0003      	movs	r3, r0
   15706:	b29a      	uxth	r2, r3
   15708:	4b21      	ldr	r3, [pc, #132]	; (15790 <process_ble_packet+0x85c>)
   1570a:	815a      	strh	r2, [r3, #10]
			save_led_data();
   1570c:	4b1c      	ldr	r3, [pc, #112]	; (15780 <process_ble_packet+0x84c>)
   1570e:	4798      	blx	r3
			break;
   15710:	e3d8      	b.n	15ec4 <process_ble_packet+0xf90>
   15712:	46c0      	nop			; (mov r8, r8)
   15714:	200006e0 	.word	0x200006e0
   15718:	200000e0 	.word	0x200000e0
   1571c:	000147a5 	.word	0x000147a5
   15720:	2000038c 	.word	0x2000038c
   15724:	2000038d 	.word	0x2000038d
   15728:	200000dc 	.word	0x200000dc
   1572c:	200000db 	.word	0x200000db
   15730:	2000038a 	.word	0x2000038a
   15734:	2000038b 	.word	0x2000038b
   15738:	200003fd 	.word	0x200003fd
   1573c:	20001a4c 	.word	0x20001a4c
   15740:	2000036e 	.word	0x2000036e
   15744:	200000d8 	.word	0x200000d8
   15748:	200000ca 	.word	0x200000ca
   1574c:	200000cb 	.word	0x200000cb
   15750:	200000cd 	.word	0x200000cd
   15754:	20000034 	.word	0x20000034
   15758:	20000372 	.word	0x20000372
   1575c:	200000cc 	.word	0x200000cc
   15760:	2000036f 	.word	0x2000036f
   15764:	20000370 	.word	0x20000370
   15768:	20000371 	.word	0x20000371
   1576c:	00019605 	.word	0x00019605
   15770:	00018bcd 	.word	0x00018bcd
   15774:	42c80000 	.word	0x42c80000
   15778:	20000044 	.word	0x20000044
   1577c:	20000068 	.word	0x20000068
   15780:	00013ac5 	.word	0x00013ac5
   15784:	00018fad 	.word	0x00018fad
   15788:	43808000 	.word	0x43808000
   1578c:	0001883d 	.word	0x0001883d
   15790:	20000038 	.word	0x20000038
		case Apply_Control_Settings:
			AUX_ENABLED = (ble_recieve_packet.payload[0]&0x80)>>7;
   15794:	4bfa      	ldr	r3, [pc, #1000]	; (15b80 <process_ble_packet+0xc4c>)
   15796:	789b      	ldrb	r3, [r3, #2]
   15798:	09db      	lsrs	r3, r3, #7
   1579a:	b2db      	uxtb	r3, r3
   1579c:	1e5a      	subs	r2, r3, #1
   1579e:	4193      	sbcs	r3, r2
   157a0:	b2da      	uxtb	r2, r3
   157a2:	4bf8      	ldr	r3, [pc, #992]	; (15b84 <process_ble_packet+0xc50>)
   157a4:	701a      	strb	r2, [r3, #0]
			TURN_ENABLED = (ble_recieve_packet.payload[0]&0x40)>>6;
   157a6:	4bf6      	ldr	r3, [pc, #984]	; (15b80 <process_ble_packet+0xc4c>)
   157a8:	789b      	ldrb	r3, [r3, #2]
   157aa:	119b      	asrs	r3, r3, #6
   157ac:	2201      	movs	r2, #1
   157ae:	4013      	ands	r3, r2
   157b0:	1e5a      	subs	r2, r3, #1
   157b2:	4193      	sbcs	r3, r2
   157b4:	b2da      	uxtb	r2, r3
   157b6:	4bf4      	ldr	r3, [pc, #976]	; (15b88 <process_ble_packet+0xc54>)
   157b8:	701a      	strb	r2, [r3, #0]
			auxControlType = (ble_recieve_packet.payload[0]&0x0F);
   157ba:	4bf1      	ldr	r3, [pc, #964]	; (15b80 <process_ble_packet+0xc4c>)
   157bc:	789b      	ldrb	r3, [r3, #2]
   157be:	220f      	movs	r2, #15
   157c0:	4013      	ands	r3, r2
   157c2:	b2da      	uxtb	r2, r3
   157c4:	4bf1      	ldr	r3, [pc, #964]	; (15b8c <process_ble_packet+0xc58>)
   157c6:	701a      	strb	r2, [r3, #0]
			auxTimedDuration = (ble_recieve_packet.payload[1]&0xFF);
   157c8:	4bed      	ldr	r3, [pc, #948]	; (15b80 <process_ble_packet+0xc4c>)
   157ca:	78da      	ldrb	r2, [r3, #3]
   157cc:	4bf0      	ldr	r3, [pc, #960]	; (15b90 <process_ble_packet+0xc5c>)
   157ce:	701a      	strb	r2, [r3, #0]
			single_aux_control = (ble_recieve_packet.payload[2]&0xF0)>>4;
   157d0:	4beb      	ldr	r3, [pc, #940]	; (15b80 <process_ble_packet+0xc4c>)
   157d2:	791b      	ldrb	r3, [r3, #4]
   157d4:	091b      	lsrs	r3, r3, #4
   157d6:	b2da      	uxtb	r2, r3
   157d8:	4bee      	ldr	r3, [pc, #952]	; (15b94 <process_ble_packet+0xc60>)
   157da:	701a      	strb	r2, [r3, #0]
			single_all_control = (ble_recieve_packet.payload[2]&0x0F);
   157dc:	4be8      	ldr	r3, [pc, #928]	; (15b80 <process_ble_packet+0xc4c>)
   157de:	791b      	ldrb	r3, [r3, #4]
   157e0:	220f      	movs	r2, #15
   157e2:	4013      	ands	r3, r2
   157e4:	b2da      	uxtb	r2, r3
   157e6:	4bec      	ldr	r3, [pc, #944]	; (15b98 <process_ble_packet+0xc64>)
   157e8:	701a      	strb	r2, [r3, #0]
			single_head_control = (ble_recieve_packet.payload[3]&0xF0)>>4;
   157ea:	4be5      	ldr	r3, [pc, #916]	; (15b80 <process_ble_packet+0xc4c>)
   157ec:	795b      	ldrb	r3, [r3, #5]
   157ee:	091b      	lsrs	r3, r3, #4
   157f0:	b2da      	uxtb	r2, r3
   157f2:	4bea      	ldr	r3, [pc, #936]	; (15b9c <process_ble_packet+0xc68>)
   157f4:	701a      	strb	r2, [r3, #0]
			single_side_control = (ble_recieve_packet.payload[3]&0x0F);
   157f6:	4be2      	ldr	r3, [pc, #904]	; (15b80 <process_ble_packet+0xc4c>)
   157f8:	795b      	ldrb	r3, [r3, #5]
   157fa:	220f      	movs	r2, #15
   157fc:	4013      	ands	r3, r2
   157fe:	b2da      	uxtb	r2, r3
   15800:	4be7      	ldr	r3, [pc, #924]	; (15ba0 <process_ble_packet+0xc6c>)
   15802:	701a      	strb	r2, [r3, #0]
			single_down_control = (ble_recieve_packet.payload[4]&0xF0)>>4;
   15804:	4bde      	ldr	r3, [pc, #888]	; (15b80 <process_ble_packet+0xc4c>)
   15806:	799b      	ldrb	r3, [r3, #6]
   15808:	091b      	lsrs	r3, r3, #4
   1580a:	b2da      	uxtb	r2, r3
   1580c:	4be5      	ldr	r3, [pc, #916]	; (15ba4 <process_ble_packet+0xc70>)
   1580e:	701a      	strb	r2, [r3, #0]
			single_up_control = (ble_recieve_packet.payload[4]&0x0F);
   15810:	4bdb      	ldr	r3, [pc, #876]	; (15b80 <process_ble_packet+0xc4c>)
   15812:	799b      	ldrb	r3, [r3, #6]
   15814:	220f      	movs	r2, #15
   15816:	4013      	ands	r3, r2
   15818:	b2da      	uxtb	r2, r3
   1581a:	4be3      	ldr	r3, [pc, #908]	; (15ba8 <process_ble_packet+0xc74>)
   1581c:	701a      	strb	r2, [r3, #0]
			dual_aux_control = (ble_recieve_packet.payload[5]&0xF0)>>4;
   1581e:	4bd8      	ldr	r3, [pc, #864]	; (15b80 <process_ble_packet+0xc4c>)
   15820:	79db      	ldrb	r3, [r3, #7]
   15822:	091b      	lsrs	r3, r3, #4
   15824:	b2da      	uxtb	r2, r3
   15826:	4be1      	ldr	r3, [pc, #900]	; (15bac <process_ble_packet+0xc78>)
   15828:	701a      	strb	r2, [r3, #0]
			dual_all_control = (ble_recieve_packet.payload[5]&0x0F);
   1582a:	4bd5      	ldr	r3, [pc, #852]	; (15b80 <process_ble_packet+0xc4c>)
   1582c:	79db      	ldrb	r3, [r3, #7]
   1582e:	220f      	movs	r2, #15
   15830:	4013      	ands	r3, r2
   15832:	b2da      	uxtb	r2, r3
   15834:	4bde      	ldr	r3, [pc, #888]	; (15bb0 <process_ble_packet+0xc7c>)
   15836:	701a      	strb	r2, [r3, #0]
			dual_head_control = (ble_recieve_packet.payload[6]&0xF0)>>4;
   15838:	4bd1      	ldr	r3, [pc, #836]	; (15b80 <process_ble_packet+0xc4c>)
   1583a:	7a1b      	ldrb	r3, [r3, #8]
   1583c:	091b      	lsrs	r3, r3, #4
   1583e:	b2da      	uxtb	r2, r3
   15840:	4bdc      	ldr	r3, [pc, #880]	; (15bb4 <process_ble_packet+0xc80>)
   15842:	701a      	strb	r2, [r3, #0]
			dual_side_control = (ble_recieve_packet.payload[6]&0x0F);
   15844:	4bce      	ldr	r3, [pc, #824]	; (15b80 <process_ble_packet+0xc4c>)
   15846:	7a1b      	ldrb	r3, [r3, #8]
   15848:	220f      	movs	r2, #15
   1584a:	4013      	ands	r3, r2
   1584c:	b2da      	uxtb	r2, r3
   1584e:	4bda      	ldr	r3, [pc, #872]	; (15bb8 <process_ble_packet+0xc84>)
   15850:	701a      	strb	r2, [r3, #0]
			dual_down_control = (ble_recieve_packet.payload[7]&0xF0)>>4;
   15852:	4bcb      	ldr	r3, [pc, #812]	; (15b80 <process_ble_packet+0xc4c>)
   15854:	7a5b      	ldrb	r3, [r3, #9]
   15856:	091b      	lsrs	r3, r3, #4
   15858:	b2da      	uxtb	r2, r3
   1585a:	4bd8      	ldr	r3, [pc, #864]	; (15bbc <process_ble_packet+0xc88>)
   1585c:	701a      	strb	r2, [r3, #0]
			dual_up_control = (ble_recieve_packet.payload[7]&0x0F);
   1585e:	4bc8      	ldr	r3, [pc, #800]	; (15b80 <process_ble_packet+0xc4c>)
   15860:	7a5b      	ldrb	r3, [r3, #9]
   15862:	220f      	movs	r2, #15
   15864:	4013      	ands	r3, r2
   15866:	b2da      	uxtb	r2, r3
   15868:	4bd5      	ldr	r3, [pc, #852]	; (15bc0 <process_ble_packet+0xc8c>)
   1586a:	701a      	strb	r2, [r3, #0]
			save_orientation_controls_remote_esc_lights();
   1586c:	4bd5      	ldr	r3, [pc, #852]	; (15bc4 <process_ble_packet+0xc90>)
   1586e:	4798      	blx	r3
			break;
   15870:	e328      	b.n	15ec4 <process_ble_packet+0xf90>
		case Custom_Values:
			LIGHTS_ON = 1;
   15872:	4bd5      	ldr	r3, [pc, #852]	; (15bc8 <process_ble_packet+0xc94>)
   15874:	2201      	movs	r2, #1
   15876:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_ANALOG_CUSTOM;
   15878:	4bd4      	ldr	r3, [pc, #848]	; (15bcc <process_ble_packet+0xc98>)
   1587a:	2208      	movs	r2, #8
   1587c:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   1587e:	4bc0      	ldr	r3, [pc, #768]	; (15b80 <process_ble_packet+0xc4c>)
   15880:	789b      	ldrb	r3, [r3, #2]
   15882:	220f      	movs	r2, #15
   15884:	4393      	bics	r3, r2
   15886:	b2da      	uxtb	r2, r3
   15888:	4bd1      	ldr	r3, [pc, #836]	; (15bd0 <process_ble_packet+0xc9c>)
   1588a:	701a      	strb	r2, [r3, #0]
			RGB_led_type = (ble_recieve_packet.payload[0] & 0x0F);
   1588c:	4bbc      	ldr	r3, [pc, #752]	; (15b80 <process_ble_packet+0xc4c>)
   1588e:	789b      	ldrb	r3, [r3, #2]
   15890:	220f      	movs	r2, #15
   15892:	4013      	ands	r3, r2
   15894:	b2da      	uxtb	r2, r3
   15896:	4bcf      	ldr	r3, [pc, #828]	; (15bd4 <process_ble_packet+0xca0>)
   15898:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   1589a:	4bcd      	ldr	r3, [pc, #820]	; (15bd0 <process_ble_packet+0xc9c>)
   1589c:	781b      	ldrb	r3, [r3, #0]
   1589e:	111b      	asrs	r3, r3, #4
   158a0:	b2db      	uxtb	r3, r3
   158a2:	2201      	movs	r2, #1
   158a4:	4013      	ands	r3, r2
   158a6:	b2da      	uxtb	r2, r3
   158a8:	4bcb      	ldr	r3, [pc, #812]	; (15bd8 <process_ble_packet+0xca4>)
   158aa:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   158ac:	4bc8      	ldr	r3, [pc, #800]	; (15bd0 <process_ble_packet+0xc9c>)
   158ae:	781b      	ldrb	r3, [r3, #0]
   158b0:	115b      	asrs	r3, r3, #5
   158b2:	b2db      	uxtb	r3, r3
   158b4:	2201      	movs	r2, #1
   158b6:	4013      	ands	r3, r2
   158b8:	b2da      	uxtb	r2, r3
   158ba:	4bc8      	ldr	r3, [pc, #800]	; (15bdc <process_ble_packet+0xca8>)
   158bc:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   158be:	4bc4      	ldr	r3, [pc, #784]	; (15bd0 <process_ble_packet+0xc9c>)
   158c0:	781b      	ldrb	r3, [r3, #0]
   158c2:	119b      	asrs	r3, r3, #6
   158c4:	b2db      	uxtb	r3, r3
   158c6:	2201      	movs	r2, #1
   158c8:	4013      	ands	r3, r2
   158ca:	b2da      	uxtb	r2, r3
   158cc:	4bc4      	ldr	r3, [pc, #784]	; (15be0 <process_ble_packet+0xcac>)
   158ce:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   158d0:	4bbf      	ldr	r3, [pc, #764]	; (15bd0 <process_ble_packet+0xc9c>)
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	09db      	lsrs	r3, r3, #7
   158d6:	b2da      	uxtb	r2, r3
   158d8:	4bc2      	ldr	r3, [pc, #776]	; (15be4 <process_ble_packet+0xcb0>)
   158da:	701a      	strb	r2, [r3, #0]
			ColorBase[MODE_ANALOG_CUSTOM] = (ble_recieve_packet.payload[1] & 0x0FF);
   158dc:	4ba8      	ldr	r3, [pc, #672]	; (15b80 <process_ble_packet+0xc4c>)
   158de:	78da      	ldrb	r2, [r3, #3]
   158e0:	4bc1      	ldr	r3, [pc, #772]	; (15be8 <process_ble_packet+0xcb4>)
   158e2:	721a      	strb	r2, [r3, #8]
			RateBase[MODE_ANALOG_CUSTOM] = (ble_recieve_packet.payload[2] & 0xF0) >> 4;
   158e4:	4ba6      	ldr	r3, [pc, #664]	; (15b80 <process_ble_packet+0xc4c>)
   158e6:	791b      	ldrb	r3, [r3, #4]
   158e8:	091b      	lsrs	r3, r3, #4
   158ea:	b2da      	uxtb	r2, r3
   158ec:	4bbf      	ldr	r3, [pc, #764]	; (15bec <process_ble_packet+0xcb8>)
   158ee:	721a      	strb	r2, [r3, #8]
			BrightBase[MODE_ANALOG_CUSTOM] = (ble_recieve_packet.payload[2] & 0x0F);
   158f0:	4ba3      	ldr	r3, [pc, #652]	; (15b80 <process_ble_packet+0xc4c>)
   158f2:	791b      	ldrb	r3, [r3, #4]
   158f4:	220f      	movs	r2, #15
   158f6:	4013      	ands	r3, r2
   158f8:	b2da      	uxtb	r2, r3
   158fa:	4bbd      	ldr	r3, [pc, #756]	; (15bf0 <process_ble_packet+0xcbc>)
   158fc:	721a      	strb	r2, [r3, #8]
			Custom_RGB.LR = (uint16_t)((float)ble_recieve_packet.payload[3] * 257);
   158fe:	4ba0      	ldr	r3, [pc, #640]	; (15b80 <process_ble_packet+0xc4c>)
   15900:	795a      	ldrb	r2, [r3, #5]
   15902:	4bbc      	ldr	r3, [pc, #752]	; (15bf4 <process_ble_packet+0xcc0>)
   15904:	0010      	movs	r0, r2
   15906:	4798      	blx	r3
   15908:	1c02      	adds	r2, r0, #0
   1590a:	4bbb      	ldr	r3, [pc, #748]	; (15bf8 <process_ble_packet+0xcc4>)
   1590c:	49bb      	ldr	r1, [pc, #748]	; (15bfc <process_ble_packet+0xcc8>)
   1590e:	1c10      	adds	r0, r2, #0
   15910:	4798      	blx	r3
   15912:	1c03      	adds	r3, r0, #0
   15914:	1c1a      	adds	r2, r3, #0
   15916:	4bba      	ldr	r3, [pc, #744]	; (15c00 <process_ble_packet+0xccc>)
   15918:	1c10      	adds	r0, r2, #0
   1591a:	4798      	blx	r3
   1591c:	0003      	movs	r3, r0
   1591e:	b29a      	uxth	r2, r3
   15920:	4bb8      	ldr	r3, [pc, #736]	; (15c04 <process_ble_packet+0xcd0>)
   15922:	801a      	strh	r2, [r3, #0]
			Custom_RGB.LG = (uint16_t)((float)ble_recieve_packet.payload[4] * 257);
   15924:	4b96      	ldr	r3, [pc, #600]	; (15b80 <process_ble_packet+0xc4c>)
   15926:	799a      	ldrb	r2, [r3, #6]
   15928:	4bb2      	ldr	r3, [pc, #712]	; (15bf4 <process_ble_packet+0xcc0>)
   1592a:	0010      	movs	r0, r2
   1592c:	4798      	blx	r3
   1592e:	1c02      	adds	r2, r0, #0
   15930:	4bb1      	ldr	r3, [pc, #708]	; (15bf8 <process_ble_packet+0xcc4>)
   15932:	49b2      	ldr	r1, [pc, #712]	; (15bfc <process_ble_packet+0xcc8>)
   15934:	1c10      	adds	r0, r2, #0
   15936:	4798      	blx	r3
   15938:	1c03      	adds	r3, r0, #0
   1593a:	1c1a      	adds	r2, r3, #0
   1593c:	4bb0      	ldr	r3, [pc, #704]	; (15c00 <process_ble_packet+0xccc>)
   1593e:	1c10      	adds	r0, r2, #0
   15940:	4798      	blx	r3
   15942:	0003      	movs	r3, r0
   15944:	b29a      	uxth	r2, r3
   15946:	4baf      	ldr	r3, [pc, #700]	; (15c04 <process_ble_packet+0xcd0>)
   15948:	805a      	strh	r2, [r3, #2]
			Custom_RGB.LB = (uint16_t)((float)ble_recieve_packet.payload[5] * 257);
   1594a:	4b8d      	ldr	r3, [pc, #564]	; (15b80 <process_ble_packet+0xc4c>)
   1594c:	79da      	ldrb	r2, [r3, #7]
   1594e:	4ba9      	ldr	r3, [pc, #676]	; (15bf4 <process_ble_packet+0xcc0>)
   15950:	0010      	movs	r0, r2
   15952:	4798      	blx	r3
   15954:	1c02      	adds	r2, r0, #0
   15956:	4ba8      	ldr	r3, [pc, #672]	; (15bf8 <process_ble_packet+0xcc4>)
   15958:	49a8      	ldr	r1, [pc, #672]	; (15bfc <process_ble_packet+0xcc8>)
   1595a:	1c10      	adds	r0, r2, #0
   1595c:	4798      	blx	r3
   1595e:	1c03      	adds	r3, r0, #0
   15960:	1c1a      	adds	r2, r3, #0
   15962:	4ba7      	ldr	r3, [pc, #668]	; (15c00 <process_ble_packet+0xccc>)
   15964:	1c10      	adds	r0, r2, #0
   15966:	4798      	blx	r3
   15968:	0003      	movs	r3, r0
   1596a:	b29a      	uxth	r2, r3
   1596c:	4ba5      	ldr	r3, [pc, #660]	; (15c04 <process_ble_packet+0xcd0>)
   1596e:	809a      	strh	r2, [r3, #4]
			Custom_RGB.RR = (uint16_t)((float)ble_recieve_packet.payload[6] * 257);
   15970:	4b83      	ldr	r3, [pc, #524]	; (15b80 <process_ble_packet+0xc4c>)
   15972:	7a1a      	ldrb	r2, [r3, #8]
   15974:	4b9f      	ldr	r3, [pc, #636]	; (15bf4 <process_ble_packet+0xcc0>)
   15976:	0010      	movs	r0, r2
   15978:	4798      	blx	r3
   1597a:	1c02      	adds	r2, r0, #0
   1597c:	4b9e      	ldr	r3, [pc, #632]	; (15bf8 <process_ble_packet+0xcc4>)
   1597e:	499f      	ldr	r1, [pc, #636]	; (15bfc <process_ble_packet+0xcc8>)
   15980:	1c10      	adds	r0, r2, #0
   15982:	4798      	blx	r3
   15984:	1c03      	adds	r3, r0, #0
   15986:	1c1a      	adds	r2, r3, #0
   15988:	4b9d      	ldr	r3, [pc, #628]	; (15c00 <process_ble_packet+0xccc>)
   1598a:	1c10      	adds	r0, r2, #0
   1598c:	4798      	blx	r3
   1598e:	0003      	movs	r3, r0
   15990:	b29a      	uxth	r2, r3
   15992:	4b9c      	ldr	r3, [pc, #624]	; (15c04 <process_ble_packet+0xcd0>)
   15994:	80da      	strh	r2, [r3, #6]
			Custom_RGB.RG = (uint16_t)((float)ble_recieve_packet.payload[7] * 257);
   15996:	4b7a      	ldr	r3, [pc, #488]	; (15b80 <process_ble_packet+0xc4c>)
   15998:	7a5a      	ldrb	r2, [r3, #9]
   1599a:	4b96      	ldr	r3, [pc, #600]	; (15bf4 <process_ble_packet+0xcc0>)
   1599c:	0010      	movs	r0, r2
   1599e:	4798      	blx	r3
   159a0:	1c02      	adds	r2, r0, #0
   159a2:	4b95      	ldr	r3, [pc, #596]	; (15bf8 <process_ble_packet+0xcc4>)
   159a4:	4995      	ldr	r1, [pc, #596]	; (15bfc <process_ble_packet+0xcc8>)
   159a6:	1c10      	adds	r0, r2, #0
   159a8:	4798      	blx	r3
   159aa:	1c03      	adds	r3, r0, #0
   159ac:	1c1a      	adds	r2, r3, #0
   159ae:	4b94      	ldr	r3, [pc, #592]	; (15c00 <process_ble_packet+0xccc>)
   159b0:	1c10      	adds	r0, r2, #0
   159b2:	4798      	blx	r3
   159b4:	0003      	movs	r3, r0
   159b6:	b29a      	uxth	r2, r3
   159b8:	4b92      	ldr	r3, [pc, #584]	; (15c04 <process_ble_packet+0xcd0>)
   159ba:	811a      	strh	r2, [r3, #8]
			Custom_RGB.RB = (uint16_t)((float)ble_recieve_packet.payload[8] * 257);
   159bc:	4b70      	ldr	r3, [pc, #448]	; (15b80 <process_ble_packet+0xc4c>)
   159be:	7a9a      	ldrb	r2, [r3, #10]
   159c0:	4b8c      	ldr	r3, [pc, #560]	; (15bf4 <process_ble_packet+0xcc0>)
   159c2:	0010      	movs	r0, r2
   159c4:	4798      	blx	r3
   159c6:	1c02      	adds	r2, r0, #0
   159c8:	4b8b      	ldr	r3, [pc, #556]	; (15bf8 <process_ble_packet+0xcc4>)
   159ca:	498c      	ldr	r1, [pc, #560]	; (15bfc <process_ble_packet+0xcc8>)
   159cc:	1c10      	adds	r0, r2, #0
   159ce:	4798      	blx	r3
   159d0:	1c03      	adds	r3, r0, #0
   159d2:	1c1a      	adds	r2, r3, #0
   159d4:	4b8a      	ldr	r3, [pc, #552]	; (15c00 <process_ble_packet+0xccc>)
   159d6:	1c10      	adds	r0, r2, #0
   159d8:	4798      	blx	r3
   159da:	0003      	movs	r3, r0
   159dc:	b29a      	uxth	r2, r3
   159de:	4b89      	ldr	r3, [pc, #548]	; (15c04 <process_ble_packet+0xcd0>)
   159e0:	815a      	strh	r2, [r3, #10]
			RateSens[MODE_ANALOG_CUSTOM] = ((float)(ble_recieve_packet.payload[9]))/100;
   159e2:	4b67      	ldr	r3, [pc, #412]	; (15b80 <process_ble_packet+0xc4c>)
   159e4:	7ada      	ldrb	r2, [r3, #11]
   159e6:	4b83      	ldr	r3, [pc, #524]	; (15bf4 <process_ble_packet+0xcc0>)
   159e8:	0010      	movs	r0, r2
   159ea:	4798      	blx	r3
   159ec:	1c02      	adds	r2, r0, #0
   159ee:	4b86      	ldr	r3, [pc, #536]	; (15c08 <process_ble_packet+0xcd4>)
   159f0:	4986      	ldr	r1, [pc, #536]	; (15c0c <process_ble_packet+0xcd8>)
   159f2:	1c10      	adds	r0, r2, #0
   159f4:	4798      	blx	r3
   159f6:	1c03      	adds	r3, r0, #0
   159f8:	1c1a      	adds	r2, r3, #0
   159fa:	4b85      	ldr	r3, [pc, #532]	; (15c10 <process_ble_packet+0xcdc>)
   159fc:	621a      	str	r2, [r3, #32]
			Brightness[MODE_ANALOG_CUSTOM] = ((float)(ble_recieve_packet.payload[10]))/100;
   159fe:	4b60      	ldr	r3, [pc, #384]	; (15b80 <process_ble_packet+0xc4c>)
   15a00:	7b1a      	ldrb	r2, [r3, #12]
   15a02:	4b7c      	ldr	r3, [pc, #496]	; (15bf4 <process_ble_packet+0xcc0>)
   15a04:	0010      	movs	r0, r2
   15a06:	4798      	blx	r3
   15a08:	1c02      	adds	r2, r0, #0
   15a0a:	4b7f      	ldr	r3, [pc, #508]	; (15c08 <process_ble_packet+0xcd4>)
   15a0c:	497f      	ldr	r1, [pc, #508]	; (15c0c <process_ble_packet+0xcd8>)
   15a0e:	1c10      	adds	r0, r2, #0
   15a10:	4798      	blx	r3
   15a12:	1c03      	adds	r3, r0, #0
   15a14:	1c1a      	adds	r2, r3, #0
   15a16:	4b7f      	ldr	r3, [pc, #508]	; (15c14 <process_ble_packet+0xce0>)
   15a18:	621a      	str	r2, [r3, #32]
			save_led_data();
   15a1a:	4b7f      	ldr	r3, [pc, #508]	; (15c18 <process_ble_packet+0xce4>)
   15a1c:	4798      	blx	r3
			break;
   15a1e:	e251      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_Static_Values:
			LIGHTS_ON = 1;
   15a20:	4b69      	ldr	r3, [pc, #420]	; (15bc8 <process_ble_packet+0xc94>)
   15a22:	2201      	movs	r2, #1
   15a24:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_STATIC;
   15a26:	4b69      	ldr	r3, [pc, #420]	; (15bcc <process_ble_packet+0xc98>)
   15a28:	2200      	movs	r2, #0
   15a2a:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15a2c:	4b54      	ldr	r3, [pc, #336]	; (15b80 <process_ble_packet+0xc4c>)
   15a2e:	789b      	ldrb	r3, [r3, #2]
   15a30:	220f      	movs	r2, #15
   15a32:	4393      	bics	r3, r2
   15a34:	b2da      	uxtb	r2, r3
   15a36:	4b66      	ldr	r3, [pc, #408]	; (15bd0 <process_ble_packet+0xc9c>)
   15a38:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15a3a:	4b65      	ldr	r3, [pc, #404]	; (15bd0 <process_ble_packet+0xc9c>)
   15a3c:	781b      	ldrb	r3, [r3, #0]
   15a3e:	111b      	asrs	r3, r3, #4
   15a40:	b2db      	uxtb	r3, r3
   15a42:	2201      	movs	r2, #1
   15a44:	4013      	ands	r3, r2
   15a46:	b2da      	uxtb	r2, r3
   15a48:	4b63      	ldr	r3, [pc, #396]	; (15bd8 <process_ble_packet+0xca4>)
   15a4a:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15a4c:	4b60      	ldr	r3, [pc, #384]	; (15bd0 <process_ble_packet+0xc9c>)
   15a4e:	781b      	ldrb	r3, [r3, #0]
   15a50:	115b      	asrs	r3, r3, #5
   15a52:	b2db      	uxtb	r3, r3
   15a54:	2201      	movs	r2, #1
   15a56:	4013      	ands	r3, r2
   15a58:	b2da      	uxtb	r2, r3
   15a5a:	4b60      	ldr	r3, [pc, #384]	; (15bdc <process_ble_packet+0xca8>)
   15a5c:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15a5e:	4b5c      	ldr	r3, [pc, #368]	; (15bd0 <process_ble_packet+0xc9c>)
   15a60:	781b      	ldrb	r3, [r3, #0]
   15a62:	119b      	asrs	r3, r3, #6
   15a64:	b2db      	uxtb	r3, r3
   15a66:	2201      	movs	r2, #1
   15a68:	4013      	ands	r3, r2
   15a6a:	b2da      	uxtb	r2, r3
   15a6c:	4b5c      	ldr	r3, [pc, #368]	; (15be0 <process_ble_packet+0xcac>)
   15a6e:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15a70:	4b57      	ldr	r3, [pc, #348]	; (15bd0 <process_ble_packet+0xc9c>)
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	09db      	lsrs	r3, r3, #7
   15a76:	b2da      	uxtb	r2, r3
   15a78:	4b5a      	ldr	r3, [pc, #360]	; (15be4 <process_ble_packet+0xcb0>)
   15a7a:	701a      	strb	r2, [r3, #0]
			Digital_Static_Zoom = ble_recieve_packet.payload[1];
   15a7c:	4b40      	ldr	r3, [pc, #256]	; (15b80 <process_ble_packet+0xc4c>)
   15a7e:	78da      	ldrb	r2, [r3, #3]
   15a80:	4b66      	ldr	r3, [pc, #408]	; (15c1c <process_ble_packet+0xce8>)
   15a82:	701a      	strb	r2, [r3, #0]
			Digital_Static_Shift = ble_recieve_packet.payload[2];
   15a84:	4b3e      	ldr	r3, [pc, #248]	; (15b80 <process_ble_packet+0xc4c>)
   15a86:	791a      	ldrb	r2, [r3, #4]
   15a88:	4b65      	ldr	r3, [pc, #404]	; (15c20 <process_ble_packet+0xcec>)
   15a8a:	701a      	strb	r2, [r3, #0]
			Digital_Static_Brightness = ble_recieve_packet.payload[3];
   15a8c:	4b3c      	ldr	r3, [pc, #240]	; (15b80 <process_ble_packet+0xc4c>)
   15a8e:	795a      	ldrb	r2, [r3, #5]
   15a90:	4b64      	ldr	r3, [pc, #400]	; (15c24 <process_ble_packet+0xcf0>)
   15a92:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15a94:	4b60      	ldr	r3, [pc, #384]	; (15c18 <process_ble_packet+0xce4>)
   15a96:	4798      	blx	r3
			break;
   15a98:	e214      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_Skittles_Values:
			LIGHTS_ON = 1;
   15a9a:	4b4b      	ldr	r3, [pc, #300]	; (15bc8 <process_ble_packet+0xc94>)
   15a9c:	2201      	movs	r2, #1
   15a9e:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_SKITTLES;
   15aa0:	4b4a      	ldr	r3, [pc, #296]	; (15bcc <process_ble_packet+0xc98>)
   15aa2:	2201      	movs	r2, #1
   15aa4:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15aa6:	4b36      	ldr	r3, [pc, #216]	; (15b80 <process_ble_packet+0xc4c>)
   15aa8:	789b      	ldrb	r3, [r3, #2]
   15aaa:	220f      	movs	r2, #15
   15aac:	4393      	bics	r3, r2
   15aae:	b2da      	uxtb	r2, r3
   15ab0:	4b47      	ldr	r3, [pc, #284]	; (15bd0 <process_ble_packet+0xc9c>)
   15ab2:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15ab4:	4b46      	ldr	r3, [pc, #280]	; (15bd0 <process_ble_packet+0xc9c>)
   15ab6:	781b      	ldrb	r3, [r3, #0]
   15ab8:	111b      	asrs	r3, r3, #4
   15aba:	b2db      	uxtb	r3, r3
   15abc:	2201      	movs	r2, #1
   15abe:	4013      	ands	r3, r2
   15ac0:	b2da      	uxtb	r2, r3
   15ac2:	4b45      	ldr	r3, [pc, #276]	; (15bd8 <process_ble_packet+0xca4>)
   15ac4:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15ac6:	4b42      	ldr	r3, [pc, #264]	; (15bd0 <process_ble_packet+0xc9c>)
   15ac8:	781b      	ldrb	r3, [r3, #0]
   15aca:	115b      	asrs	r3, r3, #5
   15acc:	b2db      	uxtb	r3, r3
   15ace:	2201      	movs	r2, #1
   15ad0:	4013      	ands	r3, r2
   15ad2:	b2da      	uxtb	r2, r3
   15ad4:	4b41      	ldr	r3, [pc, #260]	; (15bdc <process_ble_packet+0xca8>)
   15ad6:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15ad8:	4b3d      	ldr	r3, [pc, #244]	; (15bd0 <process_ble_packet+0xc9c>)
   15ada:	781b      	ldrb	r3, [r3, #0]
   15adc:	119b      	asrs	r3, r3, #6
   15ade:	b2db      	uxtb	r3, r3
   15ae0:	2201      	movs	r2, #1
   15ae2:	4013      	ands	r3, r2
   15ae4:	b2da      	uxtb	r2, r3
   15ae6:	4b3e      	ldr	r3, [pc, #248]	; (15be0 <process_ble_packet+0xcac>)
   15ae8:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15aea:	4b39      	ldr	r3, [pc, #228]	; (15bd0 <process_ble_packet+0xc9c>)
   15aec:	781b      	ldrb	r3, [r3, #0]
   15aee:	09db      	lsrs	r3, r3, #7
   15af0:	b2da      	uxtb	r2, r3
   15af2:	4b3c      	ldr	r3, [pc, #240]	; (15be4 <process_ble_packet+0xcb0>)
   15af4:	701a      	strb	r2, [r3, #0]
			Digital_Skittles_Brightness = ble_recieve_packet.payload[1];
   15af6:	4b22      	ldr	r3, [pc, #136]	; (15b80 <process_ble_packet+0xc4c>)
   15af8:	78da      	ldrb	r2, [r3, #3]
   15afa:	4b4b      	ldr	r3, [pc, #300]	; (15c28 <process_ble_packet+0xcf4>)
   15afc:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15afe:	4b46      	ldr	r3, [pc, #280]	; (15c18 <process_ble_packet+0xce4>)
   15b00:	4798      	blx	r3
			break;
   15b02:	e1df      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_Cycle_Values:
			LIGHTS_ON = 1;
   15b04:	4b30      	ldr	r3, [pc, #192]	; (15bc8 <process_ble_packet+0xc94>)
   15b06:	2201      	movs	r2, #1
   15b08:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_GRADIENT_CYCLE;
   15b0a:	4b30      	ldr	r3, [pc, #192]	; (15bcc <process_ble_packet+0xc98>)
   15b0c:	2202      	movs	r2, #2
   15b0e:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15b10:	4b1b      	ldr	r3, [pc, #108]	; (15b80 <process_ble_packet+0xc4c>)
   15b12:	789b      	ldrb	r3, [r3, #2]
   15b14:	220f      	movs	r2, #15
   15b16:	4393      	bics	r3, r2
   15b18:	b2da      	uxtb	r2, r3
   15b1a:	4b2d      	ldr	r3, [pc, #180]	; (15bd0 <process_ble_packet+0xc9c>)
   15b1c:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15b1e:	4b2c      	ldr	r3, [pc, #176]	; (15bd0 <process_ble_packet+0xc9c>)
   15b20:	781b      	ldrb	r3, [r3, #0]
   15b22:	111b      	asrs	r3, r3, #4
   15b24:	b2db      	uxtb	r3, r3
   15b26:	2201      	movs	r2, #1
   15b28:	4013      	ands	r3, r2
   15b2a:	b2da      	uxtb	r2, r3
   15b2c:	4b2a      	ldr	r3, [pc, #168]	; (15bd8 <process_ble_packet+0xca4>)
   15b2e:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15b30:	4b27      	ldr	r3, [pc, #156]	; (15bd0 <process_ble_packet+0xc9c>)
   15b32:	781b      	ldrb	r3, [r3, #0]
   15b34:	115b      	asrs	r3, r3, #5
   15b36:	b2db      	uxtb	r3, r3
   15b38:	2201      	movs	r2, #1
   15b3a:	4013      	ands	r3, r2
   15b3c:	b2da      	uxtb	r2, r3
   15b3e:	4b27      	ldr	r3, [pc, #156]	; (15bdc <process_ble_packet+0xca8>)
   15b40:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15b42:	4b23      	ldr	r3, [pc, #140]	; (15bd0 <process_ble_packet+0xc9c>)
   15b44:	781b      	ldrb	r3, [r3, #0]
   15b46:	119b      	asrs	r3, r3, #6
   15b48:	b2db      	uxtb	r3, r3
   15b4a:	2201      	movs	r2, #1
   15b4c:	4013      	ands	r3, r2
   15b4e:	b2da      	uxtb	r2, r3
   15b50:	4b23      	ldr	r3, [pc, #140]	; (15be0 <process_ble_packet+0xcac>)
   15b52:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15b54:	4b1e      	ldr	r3, [pc, #120]	; (15bd0 <process_ble_packet+0xc9c>)
   15b56:	781b      	ldrb	r3, [r3, #0]
   15b58:	09db      	lsrs	r3, r3, #7
   15b5a:	b2da      	uxtb	r2, r3
   15b5c:	4b21      	ldr	r3, [pc, #132]	; (15be4 <process_ble_packet+0xcb0>)
   15b5e:	701a      	strb	r2, [r3, #0]
			Digital_Cycle_Zoom = ble_recieve_packet.payload[1];
   15b60:	4b07      	ldr	r3, [pc, #28]	; (15b80 <process_ble_packet+0xc4c>)
   15b62:	78da      	ldrb	r2, [r3, #3]
   15b64:	4b31      	ldr	r3, [pc, #196]	; (15c2c <process_ble_packet+0xcf8>)
   15b66:	701a      	strb	r2, [r3, #0]
			Digital_Cycle_Rate = ble_recieve_packet.payload[2];
   15b68:	4b05      	ldr	r3, [pc, #20]	; (15b80 <process_ble_packet+0xc4c>)
   15b6a:	791a      	ldrb	r2, [r3, #4]
   15b6c:	4b30      	ldr	r3, [pc, #192]	; (15c30 <process_ble_packet+0xcfc>)
   15b6e:	701a      	strb	r2, [r3, #0]
			Digital_Cycle_Brightness = ble_recieve_packet.payload[3];
   15b70:	4b03      	ldr	r3, [pc, #12]	; (15b80 <process_ble_packet+0xc4c>)
   15b72:	795a      	ldrb	r2, [r3, #5]
   15b74:	4b2f      	ldr	r3, [pc, #188]	; (15c34 <process_ble_packet+0xd00>)
   15b76:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15b78:	4b27      	ldr	r3, [pc, #156]	; (15c18 <process_ble_packet+0xce4>)
   15b7a:	4798      	blx	r3
			break;
   15b7c:	e1a2      	b.n	15ec4 <process_ble_packet+0xf90>
   15b7e:	46c0      	nop			; (mov r8, r8)
   15b80:	200006e0 	.word	0x200006e0
   15b84:	20000402 	.word	0x20000402
   15b88:	20000403 	.word	0x20000403
   15b8c:	20000406 	.word	0x20000406
   15b90:	20000407 	.word	0x20000407
   15b94:	20000408 	.word	0x20000408
   15b98:	20000409 	.word	0x20000409
   15b9c:	2000040a 	.word	0x2000040a
   15ba0:	2000040b 	.word	0x2000040b
   15ba4:	2000040d 	.word	0x2000040d
   15ba8:	2000040c 	.word	0x2000040c
   15bac:	2000040e 	.word	0x2000040e
   15bb0:	2000040f 	.word	0x2000040f
   15bb4:	20000410 	.word	0x20000410
   15bb8:	20000411 	.word	0x20000411
   15bbc:	20000413 	.word	0x20000413
   15bc0:	20000412 	.word	0x20000412
   15bc4:	000147a5 	.word	0x000147a5
   15bc8:	200000cd 	.word	0x200000cd
   15bcc:	20000034 	.word	0x20000034
   15bd0:	20000372 	.word	0x20000372
   15bd4:	20001a4c 	.word	0x20001a4c
   15bd8:	200000cc 	.word	0x200000cc
   15bdc:	2000036f 	.word	0x2000036f
   15be0:	20000370 	.word	0x20000370
   15be4:	20000371 	.word	0x20000371
   15be8:	2000008c 	.word	0x2000008c
   15bec:	200000a4 	.word	0x200000a4
   15bf0:	20000098 	.word	0x20000098
   15bf4:	00019605 	.word	0x00019605
   15bf8:	00018fad 	.word	0x00018fad
   15bfc:	43808000 	.word	0x43808000
   15c00:	0001883d 	.word	0x0001883d
   15c04:	200000bc 	.word	0x200000bc
   15c08:	00018bcd 	.word	0x00018bcd
   15c0c:	42c80000 	.word	0x42c80000
   15c10:	20000044 	.word	0x20000044
   15c14:	20000068 	.word	0x20000068
   15c18:	00013ac5 	.word	0x00013ac5
   15c1c:	200000ad 	.word	0x200000ad
   15c20:	200000ae 	.word	0x200000ae
   15c24:	200000af 	.word	0x200000af
   15c28:	200000b0 	.word	0x200000b0
   15c2c:	200000b1 	.word	0x200000b1
   15c30:	200000b2 	.word	0x200000b2
   15c34:	200000b3 	.word	0x200000b3
		case Digital_Compass_Values:
			LIGHTS_ON = 1;
   15c38:	4ba4      	ldr	r3, [pc, #656]	; (15ecc <process_ble_packet+0xf98>)
   15c3a:	2201      	movs	r2, #1
   15c3c:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_COMPASS_CYCLE;
   15c3e:	4ba4      	ldr	r3, [pc, #656]	; (15ed0 <process_ble_packet+0xf9c>)
   15c40:	2203      	movs	r2, #3
   15c42:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15c44:	4ba3      	ldr	r3, [pc, #652]	; (15ed4 <process_ble_packet+0xfa0>)
   15c46:	789b      	ldrb	r3, [r3, #2]
   15c48:	220f      	movs	r2, #15
   15c4a:	4393      	bics	r3, r2
   15c4c:	b2da      	uxtb	r2, r3
   15c4e:	4ba2      	ldr	r3, [pc, #648]	; (15ed8 <process_ble_packet+0xfa4>)
   15c50:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15c52:	4ba1      	ldr	r3, [pc, #644]	; (15ed8 <process_ble_packet+0xfa4>)
   15c54:	781b      	ldrb	r3, [r3, #0]
   15c56:	111b      	asrs	r3, r3, #4
   15c58:	b2db      	uxtb	r3, r3
   15c5a:	2201      	movs	r2, #1
   15c5c:	4013      	ands	r3, r2
   15c5e:	b2da      	uxtb	r2, r3
   15c60:	4b9e      	ldr	r3, [pc, #632]	; (15edc <process_ble_packet+0xfa8>)
   15c62:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15c64:	4b9c      	ldr	r3, [pc, #624]	; (15ed8 <process_ble_packet+0xfa4>)
   15c66:	781b      	ldrb	r3, [r3, #0]
   15c68:	115b      	asrs	r3, r3, #5
   15c6a:	b2db      	uxtb	r3, r3
   15c6c:	2201      	movs	r2, #1
   15c6e:	4013      	ands	r3, r2
   15c70:	b2da      	uxtb	r2, r3
   15c72:	4b9b      	ldr	r3, [pc, #620]	; (15ee0 <process_ble_packet+0xfac>)
   15c74:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15c76:	4b98      	ldr	r3, [pc, #608]	; (15ed8 <process_ble_packet+0xfa4>)
   15c78:	781b      	ldrb	r3, [r3, #0]
   15c7a:	119b      	asrs	r3, r3, #6
   15c7c:	b2db      	uxtb	r3, r3
   15c7e:	2201      	movs	r2, #1
   15c80:	4013      	ands	r3, r2
   15c82:	b2da      	uxtb	r2, r3
   15c84:	4b97      	ldr	r3, [pc, #604]	; (15ee4 <process_ble_packet+0xfb0>)
   15c86:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15c88:	4b93      	ldr	r3, [pc, #588]	; (15ed8 <process_ble_packet+0xfa4>)
   15c8a:	781b      	ldrb	r3, [r3, #0]
   15c8c:	09db      	lsrs	r3, r3, #7
   15c8e:	b2da      	uxtb	r2, r3
   15c90:	4b95      	ldr	r3, [pc, #596]	; (15ee8 <process_ble_packet+0xfb4>)
   15c92:	701a      	strb	r2, [r3, #0]
			Digital_Compass_Brightness = ble_recieve_packet.payload[1];
   15c94:	4b8f      	ldr	r3, [pc, #572]	; (15ed4 <process_ble_packet+0xfa0>)
   15c96:	78da      	ldrb	r2, [r3, #3]
   15c98:	4b94      	ldr	r3, [pc, #592]	; (15eec <process_ble_packet+0xfb8>)
   15c9a:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15c9c:	4b94      	ldr	r3, [pc, #592]	; (15ef0 <process_ble_packet+0xfbc>)
   15c9e:	4798      	blx	r3
			break;
   15ca0:	e110      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_Throttle_Values:
			LIGHTS_ON = 1;
   15ca2:	4b8a      	ldr	r3, [pc, #552]	; (15ecc <process_ble_packet+0xf98>)
   15ca4:	2201      	movs	r2, #1
   15ca6:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_THROTTLE;
   15ca8:	4b89      	ldr	r3, [pc, #548]	; (15ed0 <process_ble_packet+0xf9c>)
   15caa:	2204      	movs	r2, #4
   15cac:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15cae:	4b89      	ldr	r3, [pc, #548]	; (15ed4 <process_ble_packet+0xfa0>)
   15cb0:	789b      	ldrb	r3, [r3, #2]
   15cb2:	220f      	movs	r2, #15
   15cb4:	4393      	bics	r3, r2
   15cb6:	b2da      	uxtb	r2, r3
   15cb8:	4b87      	ldr	r3, [pc, #540]	; (15ed8 <process_ble_packet+0xfa4>)
   15cba:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15cbc:	4b86      	ldr	r3, [pc, #536]	; (15ed8 <process_ble_packet+0xfa4>)
   15cbe:	781b      	ldrb	r3, [r3, #0]
   15cc0:	111b      	asrs	r3, r3, #4
   15cc2:	b2db      	uxtb	r3, r3
   15cc4:	2201      	movs	r2, #1
   15cc6:	4013      	ands	r3, r2
   15cc8:	b2da      	uxtb	r2, r3
   15cca:	4b84      	ldr	r3, [pc, #528]	; (15edc <process_ble_packet+0xfa8>)
   15ccc:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15cce:	4b82      	ldr	r3, [pc, #520]	; (15ed8 <process_ble_packet+0xfa4>)
   15cd0:	781b      	ldrb	r3, [r3, #0]
   15cd2:	115b      	asrs	r3, r3, #5
   15cd4:	b2db      	uxtb	r3, r3
   15cd6:	2201      	movs	r2, #1
   15cd8:	4013      	ands	r3, r2
   15cda:	b2da      	uxtb	r2, r3
   15cdc:	4b80      	ldr	r3, [pc, #512]	; (15ee0 <process_ble_packet+0xfac>)
   15cde:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15ce0:	4b7d      	ldr	r3, [pc, #500]	; (15ed8 <process_ble_packet+0xfa4>)
   15ce2:	781b      	ldrb	r3, [r3, #0]
   15ce4:	119b      	asrs	r3, r3, #6
   15ce6:	b2db      	uxtb	r3, r3
   15ce8:	2201      	movs	r2, #1
   15cea:	4013      	ands	r3, r2
   15cec:	b2da      	uxtb	r2, r3
   15cee:	4b7d      	ldr	r3, [pc, #500]	; (15ee4 <process_ble_packet+0xfb0>)
   15cf0:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15cf2:	4b79      	ldr	r3, [pc, #484]	; (15ed8 <process_ble_packet+0xfa4>)
   15cf4:	781b      	ldrb	r3, [r3, #0]
   15cf6:	09db      	lsrs	r3, r3, #7
   15cf8:	b2da      	uxtb	r2, r3
   15cfa:	4b7b      	ldr	r3, [pc, #492]	; (15ee8 <process_ble_packet+0xfb4>)
   15cfc:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Zoom = ble_recieve_packet.payload[1];
   15cfe:	4b75      	ldr	r3, [pc, #468]	; (15ed4 <process_ble_packet+0xfa0>)
   15d00:	78da      	ldrb	r2, [r3, #3]
   15d02:	4b7c      	ldr	r3, [pc, #496]	; (15ef4 <process_ble_packet+0xfc0>)
   15d04:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Shift = ble_recieve_packet.payload[2];
   15d06:	4b73      	ldr	r3, [pc, #460]	; (15ed4 <process_ble_packet+0xfa0>)
   15d08:	791a      	ldrb	r2, [r3, #4]
   15d0a:	4b7b      	ldr	r3, [pc, #492]	; (15ef8 <process_ble_packet+0xfc4>)
   15d0c:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Sens = ble_recieve_packet.payload[3];
   15d0e:	4b71      	ldr	r3, [pc, #452]	; (15ed4 <process_ble_packet+0xfa0>)
   15d10:	795a      	ldrb	r2, [r3, #5]
   15d12:	4b7a      	ldr	r3, [pc, #488]	; (15efc <process_ble_packet+0xfc8>)
   15d14:	701a      	strb	r2, [r3, #0]
			Digital_Throttle_Brightness = ble_recieve_packet.payload[4];
   15d16:	4b6f      	ldr	r3, [pc, #444]	; (15ed4 <process_ble_packet+0xfa0>)
   15d18:	799a      	ldrb	r2, [r3, #6]
   15d1a:	4b79      	ldr	r3, [pc, #484]	; (15f00 <process_ble_packet+0xfcc>)
   15d1c:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15d1e:	4b74      	ldr	r3, [pc, #464]	; (15ef0 <process_ble_packet+0xfbc>)
   15d20:	4798      	blx	r3
			break;
   15d22:	e0cf      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_RPM_Values:
			LIGHTS_ON = 1;
   15d24:	4b69      	ldr	r3, [pc, #420]	; (15ecc <process_ble_packet+0xf98>)
   15d26:	2201      	movs	r2, #1
   15d28:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_RPM_CYCLE;
   15d2a:	4b69      	ldr	r3, [pc, #420]	; (15ed0 <process_ble_packet+0xf9c>)
   15d2c:	2205      	movs	r2, #5
   15d2e:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15d30:	4b68      	ldr	r3, [pc, #416]	; (15ed4 <process_ble_packet+0xfa0>)
   15d32:	789b      	ldrb	r3, [r3, #2]
   15d34:	220f      	movs	r2, #15
   15d36:	4393      	bics	r3, r2
   15d38:	b2da      	uxtb	r2, r3
   15d3a:	4b67      	ldr	r3, [pc, #412]	; (15ed8 <process_ble_packet+0xfa4>)
   15d3c:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15d3e:	4b66      	ldr	r3, [pc, #408]	; (15ed8 <process_ble_packet+0xfa4>)
   15d40:	781b      	ldrb	r3, [r3, #0]
   15d42:	111b      	asrs	r3, r3, #4
   15d44:	b2db      	uxtb	r3, r3
   15d46:	2201      	movs	r2, #1
   15d48:	4013      	ands	r3, r2
   15d4a:	b2da      	uxtb	r2, r3
   15d4c:	4b63      	ldr	r3, [pc, #396]	; (15edc <process_ble_packet+0xfa8>)
   15d4e:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15d50:	4b61      	ldr	r3, [pc, #388]	; (15ed8 <process_ble_packet+0xfa4>)
   15d52:	781b      	ldrb	r3, [r3, #0]
   15d54:	115b      	asrs	r3, r3, #5
   15d56:	b2db      	uxtb	r3, r3
   15d58:	2201      	movs	r2, #1
   15d5a:	4013      	ands	r3, r2
   15d5c:	b2da      	uxtb	r2, r3
   15d5e:	4b60      	ldr	r3, [pc, #384]	; (15ee0 <process_ble_packet+0xfac>)
   15d60:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15d62:	4b5d      	ldr	r3, [pc, #372]	; (15ed8 <process_ble_packet+0xfa4>)
   15d64:	781b      	ldrb	r3, [r3, #0]
   15d66:	119b      	asrs	r3, r3, #6
   15d68:	b2db      	uxtb	r3, r3
   15d6a:	2201      	movs	r2, #1
   15d6c:	4013      	ands	r3, r2
   15d6e:	b2da      	uxtb	r2, r3
   15d70:	4b5c      	ldr	r3, [pc, #368]	; (15ee4 <process_ble_packet+0xfb0>)
   15d72:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15d74:	4b58      	ldr	r3, [pc, #352]	; (15ed8 <process_ble_packet+0xfa4>)
   15d76:	781b      	ldrb	r3, [r3, #0]
   15d78:	09db      	lsrs	r3, r3, #7
   15d7a:	b2da      	uxtb	r2, r3
   15d7c:	4b5a      	ldr	r3, [pc, #360]	; (15ee8 <process_ble_packet+0xfb4>)
   15d7e:	701a      	strb	r2, [r3, #0]
			Digital_RPM_Zoom = ble_recieve_packet.payload[1];
   15d80:	4b54      	ldr	r3, [pc, #336]	; (15ed4 <process_ble_packet+0xfa0>)
   15d82:	78da      	ldrb	r2, [r3, #3]
   15d84:	4b5f      	ldr	r3, [pc, #380]	; (15f04 <process_ble_packet+0xfd0>)
   15d86:	701a      	strb	r2, [r3, #0]
			Digital_RPM_Rate = ble_recieve_packet.payload[2];
   15d88:	4b52      	ldr	r3, [pc, #328]	; (15ed4 <process_ble_packet+0xfa0>)
   15d8a:	791a      	ldrb	r2, [r3, #4]
   15d8c:	4b5e      	ldr	r3, [pc, #376]	; (15f08 <process_ble_packet+0xfd4>)
   15d8e:	701a      	strb	r2, [r3, #0]
			Digital_RPM_Brightness = ble_recieve_packet.payload[3];
   15d90:	4b50      	ldr	r3, [pc, #320]	; (15ed4 <process_ble_packet+0xfa0>)
   15d92:	795a      	ldrb	r2, [r3, #5]
   15d94:	4b5d      	ldr	r3, [pc, #372]	; (15f0c <process_ble_packet+0xfd8>)
   15d96:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15d98:	4b55      	ldr	r3, [pc, #340]	; (15ef0 <process_ble_packet+0xfbc>)
   15d9a:	4798      	blx	r3
			break;
   15d9c:	e092      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_RPM_Throttle_Values:
			LIGHTS_ON = 1;
   15d9e:	4b4b      	ldr	r3, [pc, #300]	; (15ecc <process_ble_packet+0xf98>)
   15da0:	2201      	movs	r2, #1
   15da2:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_RPM_THROTTLE;
   15da4:	4b4a      	ldr	r3, [pc, #296]	; (15ed0 <process_ble_packet+0xf9c>)
   15da6:	2206      	movs	r2, #6
   15da8:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15daa:	4b4a      	ldr	r3, [pc, #296]	; (15ed4 <process_ble_packet+0xfa0>)
   15dac:	789b      	ldrb	r3, [r3, #2]
   15dae:	220f      	movs	r2, #15
   15db0:	4393      	bics	r3, r2
   15db2:	b2da      	uxtb	r2, r3
   15db4:	4b48      	ldr	r3, [pc, #288]	; (15ed8 <process_ble_packet+0xfa4>)
   15db6:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15db8:	4b47      	ldr	r3, [pc, #284]	; (15ed8 <process_ble_packet+0xfa4>)
   15dba:	781b      	ldrb	r3, [r3, #0]
   15dbc:	111b      	asrs	r3, r3, #4
   15dbe:	b2db      	uxtb	r3, r3
   15dc0:	2201      	movs	r2, #1
   15dc2:	4013      	ands	r3, r2
   15dc4:	b2da      	uxtb	r2, r3
   15dc6:	4b45      	ldr	r3, [pc, #276]	; (15edc <process_ble_packet+0xfa8>)
   15dc8:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15dca:	4b43      	ldr	r3, [pc, #268]	; (15ed8 <process_ble_packet+0xfa4>)
   15dcc:	781b      	ldrb	r3, [r3, #0]
   15dce:	115b      	asrs	r3, r3, #5
   15dd0:	b2db      	uxtb	r3, r3
   15dd2:	2201      	movs	r2, #1
   15dd4:	4013      	ands	r3, r2
   15dd6:	b2da      	uxtb	r2, r3
   15dd8:	4b41      	ldr	r3, [pc, #260]	; (15ee0 <process_ble_packet+0xfac>)
   15dda:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15ddc:	4b3e      	ldr	r3, [pc, #248]	; (15ed8 <process_ble_packet+0xfa4>)
   15dde:	781b      	ldrb	r3, [r3, #0]
   15de0:	119b      	asrs	r3, r3, #6
   15de2:	b2db      	uxtb	r3, r3
   15de4:	2201      	movs	r2, #1
   15de6:	4013      	ands	r3, r2
   15de8:	b2da      	uxtb	r2, r3
   15dea:	4b3e      	ldr	r3, [pc, #248]	; (15ee4 <process_ble_packet+0xfb0>)
   15dec:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15dee:	4b3a      	ldr	r3, [pc, #232]	; (15ed8 <process_ble_packet+0xfa4>)
   15df0:	781b      	ldrb	r3, [r3, #0]
   15df2:	09db      	lsrs	r3, r3, #7
   15df4:	b2da      	uxtb	r2, r3
   15df6:	4b3c      	ldr	r3, [pc, #240]	; (15ee8 <process_ble_packet+0xfb4>)
   15df8:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15dfa:	4b3d      	ldr	r3, [pc, #244]	; (15ef0 <process_ble_packet+0xfbc>)
   15dfc:	4798      	blx	r3
			break;
   15dfe:	e061      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_Compass_Wheel_Values:
			LIGHTS_ON = 1;
   15e00:	4b32      	ldr	r3, [pc, #200]	; (15ecc <process_ble_packet+0xf98>)
   15e02:	2201      	movs	r2, #1
   15e04:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_COMPASS_WHEEL;
   15e06:	4b32      	ldr	r3, [pc, #200]	; (15ed0 <process_ble_packet+0xf9c>)
   15e08:	2207      	movs	r2, #7
   15e0a:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15e0c:	4b31      	ldr	r3, [pc, #196]	; (15ed4 <process_ble_packet+0xfa0>)
   15e0e:	789b      	ldrb	r3, [r3, #2]
   15e10:	220f      	movs	r2, #15
   15e12:	4393      	bics	r3, r2
   15e14:	b2da      	uxtb	r2, r3
   15e16:	4b30      	ldr	r3, [pc, #192]	; (15ed8 <process_ble_packet+0xfa4>)
   15e18:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15e1a:	4b2f      	ldr	r3, [pc, #188]	; (15ed8 <process_ble_packet+0xfa4>)
   15e1c:	781b      	ldrb	r3, [r3, #0]
   15e1e:	111b      	asrs	r3, r3, #4
   15e20:	b2db      	uxtb	r3, r3
   15e22:	2201      	movs	r2, #1
   15e24:	4013      	ands	r3, r2
   15e26:	b2da      	uxtb	r2, r3
   15e28:	4b2c      	ldr	r3, [pc, #176]	; (15edc <process_ble_packet+0xfa8>)
   15e2a:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15e2c:	4b2a      	ldr	r3, [pc, #168]	; (15ed8 <process_ble_packet+0xfa4>)
   15e2e:	781b      	ldrb	r3, [r3, #0]
   15e30:	115b      	asrs	r3, r3, #5
   15e32:	b2db      	uxtb	r3, r3
   15e34:	2201      	movs	r2, #1
   15e36:	4013      	ands	r3, r2
   15e38:	b2da      	uxtb	r2, r3
   15e3a:	4b29      	ldr	r3, [pc, #164]	; (15ee0 <process_ble_packet+0xfac>)
   15e3c:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15e3e:	4b26      	ldr	r3, [pc, #152]	; (15ed8 <process_ble_packet+0xfa4>)
   15e40:	781b      	ldrb	r3, [r3, #0]
   15e42:	119b      	asrs	r3, r3, #6
   15e44:	b2db      	uxtb	r3, r3
   15e46:	2201      	movs	r2, #1
   15e48:	4013      	ands	r3, r2
   15e4a:	b2da      	uxtb	r2, r3
   15e4c:	4b25      	ldr	r3, [pc, #148]	; (15ee4 <process_ble_packet+0xfb0>)
   15e4e:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15e50:	4b21      	ldr	r3, [pc, #132]	; (15ed8 <process_ble_packet+0xfa4>)
   15e52:	781b      	ldrb	r3, [r3, #0]
   15e54:	09db      	lsrs	r3, r3, #7
   15e56:	b2da      	uxtb	r2, r3
   15e58:	4b23      	ldr	r3, [pc, #140]	; (15ee8 <process_ble_packet+0xfb4>)
   15e5a:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15e5c:	4b24      	ldr	r3, [pc, #144]	; (15ef0 <process_ble_packet+0xfbc>)
   15e5e:	4798      	blx	r3
			break;
   15e60:	e030      	b.n	15ec4 <process_ble_packet+0xf90>
		case Digital_Compass_Snake_Values:
			LIGHTS_ON = 1;
   15e62:	4b1a      	ldr	r3, [pc, #104]	; (15ecc <process_ble_packet+0xf98>)
   15e64:	2201      	movs	r2, #1
   15e66:	701a      	strb	r2, [r3, #0]
			light_mode = MODE_DIGITAL_COMPASS_SNAKE;
   15e68:	4b19      	ldr	r3, [pc, #100]	; (15ed0 <process_ble_packet+0xf9c>)
   15e6a:	2208      	movs	r2, #8
   15e6c:	701a      	strb	r2, [r3, #0]
			SWITCHES = (ble_recieve_packet.payload[0] & 0xF0);
   15e6e:	4b19      	ldr	r3, [pc, #100]	; (15ed4 <process_ble_packet+0xfa0>)
   15e70:	789b      	ldrb	r3, [r3, #2]
   15e72:	220f      	movs	r2, #15
   15e74:	4393      	bics	r3, r2
   15e76:	b2da      	uxtb	r2, r3
   15e78:	4b17      	ldr	r3, [pc, #92]	; (15ed8 <process_ble_packet+0xfa4>)
   15e7a:	701a      	strb	r2, [r3, #0]
			SIDELIGHTS = (SWITCHES & 0x10) >> 4;
   15e7c:	4b16      	ldr	r3, [pc, #88]	; (15ed8 <process_ble_packet+0xfa4>)
   15e7e:	781b      	ldrb	r3, [r3, #0]
   15e80:	111b      	asrs	r3, r3, #4
   15e82:	b2db      	uxtb	r3, r3
   15e84:	2201      	movs	r2, #1
   15e86:	4013      	ands	r3, r2
   15e88:	b2da      	uxtb	r2, r3
   15e8a:	4b14      	ldr	r3, [pc, #80]	; (15edc <process_ble_packet+0xfa8>)
   15e8c:	701a      	strb	r2, [r3, #0]
			HEADLIGHTS = (SWITCHES & 0x20) >> 5;
   15e8e:	4b12      	ldr	r3, [pc, #72]	; (15ed8 <process_ble_packet+0xfa4>)
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	115b      	asrs	r3, r3, #5
   15e94:	b2db      	uxtb	r3, r3
   15e96:	2201      	movs	r2, #1
   15e98:	4013      	ands	r3, r2
   15e9a:	b2da      	uxtb	r2, r3
   15e9c:	4b10      	ldr	r3, [pc, #64]	; (15ee0 <process_ble_packet+0xfac>)
   15e9e:	701a      	strb	r2, [r3, #0]
			LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
   15ea0:	4b0d      	ldr	r3, [pc, #52]	; (15ed8 <process_ble_packet+0xfa4>)
   15ea2:	781b      	ldrb	r3, [r3, #0]
   15ea4:	119b      	asrs	r3, r3, #6
   15ea6:	b2db      	uxtb	r3, r3
   15ea8:	2201      	movs	r2, #1
   15eaa:	4013      	ands	r3, r2
   15eac:	b2da      	uxtb	r2, r3
   15eae:	4b0d      	ldr	r3, [pc, #52]	; (15ee4 <process_ble_packet+0xfb0>)
   15eb0:	701a      	strb	r2, [r3, #0]
			IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
   15eb2:	4b09      	ldr	r3, [pc, #36]	; (15ed8 <process_ble_packet+0xfa4>)
   15eb4:	781b      	ldrb	r3, [r3, #0]
   15eb6:	09db      	lsrs	r3, r3, #7
   15eb8:	b2da      	uxtb	r2, r3
   15eba:	4b0b      	ldr	r3, [pc, #44]	; (15ee8 <process_ble_packet+0xfb4>)
   15ebc:	701a      	strb	r2, [r3, #0]
			save_led_data();
   15ebe:	4b0c      	ldr	r3, [pc, #48]	; (15ef0 <process_ble_packet+0xfbc>)
   15ec0:	4798      	blx	r3
			break;
   15ec2:	46c0      	nop			; (mov r8, r8)
	}
}
   15ec4:	46c0      	nop			; (mov r8, r8)
   15ec6:	46bd      	mov	sp, r7
   15ec8:	bd80      	pop	{r7, pc}
   15eca:	46c0      	nop			; (mov r8, r8)
   15ecc:	200000cd 	.word	0x200000cd
   15ed0:	20000034 	.word	0x20000034
   15ed4:	200006e0 	.word	0x200006e0
   15ed8:	20000372 	.word	0x20000372
   15edc:	200000cc 	.word	0x200000cc
   15ee0:	2000036f 	.word	0x2000036f
   15ee4:	20000370 	.word	0x20000370
   15ee8:	20000371 	.word	0x20000371
   15eec:	200000b4 	.word	0x200000b4
   15ef0:	00013ac5 	.word	0x00013ac5
   15ef4:	200000b5 	.word	0x200000b5
   15ef8:	200000b6 	.word	0x200000b6
   15efc:	200000b7 	.word	0x200000b7
   15f00:	200000b8 	.word	0x200000b8
   15f04:	200000b9 	.word	0x200000b9
   15f08:	200000ba 	.word	0x200000ba
   15f0c:	200000bb 	.word	0x200000bb

00015f10 <read_ble_packet>:

void read_ble_packet(){
   15f10:	b580      	push	{r7, lr}
   15f12:	b082      	sub	sp, #8
   15f14:	af00      	add	r7, sp, #0
	if(check_ble_packet_recieved()){
   15f16:	4b43      	ldr	r3, [pc, #268]	; (16024 <read_ble_packet+0x114>)
   15f18:	4798      	blx	r3
   15f1a:	1e03      	subs	r3, r0, #0
   15f1c:	d027      	beq.n	15f6e <read_ble_packet+0x5e>
		ble_recieve_packet.size = ble_USART_read_buffer[1];
   15f1e:	4b42      	ldr	r3, [pc, #264]	; (16028 <read_ble_packet+0x118>)
   15f20:	785a      	ldrb	r2, [r3, #1]
   15f22:	4b42      	ldr	r3, [pc, #264]	; (1602c <read_ble_packet+0x11c>)
   15f24:	705a      	strb	r2, [r3, #1]
		ble_recieve_packet.ID = ble_USART_read_buffer[2];
   15f26:	4b40      	ldr	r3, [pc, #256]	; (16028 <read_ble_packet+0x118>)
   15f28:	789a      	ldrb	r2, [r3, #2]
   15f2a:	4b40      	ldr	r3, [pc, #256]	; (1602c <read_ble_packet+0x11c>)
   15f2c:	701a      	strb	r2, [r3, #0]
		memcpy(ble_recieve_packet.payload, ble_USART_read_buffer+3, ble_recieve_packet.size);
   15f2e:	4940      	ldr	r1, [pc, #256]	; (16030 <read_ble_packet+0x120>)
   15f30:	4b3e      	ldr	r3, [pc, #248]	; (1602c <read_ble_packet+0x11c>)
   15f32:	785b      	ldrb	r3, [r3, #1]
   15f34:	001a      	movs	r2, r3
   15f36:	4b3f      	ldr	r3, [pc, #252]	; (16034 <read_ble_packet+0x124>)
   15f38:	0018      	movs	r0, r3
   15f3a:	4b3f      	ldr	r3, [pc, #252]	; (16038 <read_ble_packet+0x128>)
   15f3c:	4798      	blx	r3

		process_ble_packet();
   15f3e:	4b3f      	ldr	r3, [pc, #252]	; (1603c <read_ble_packet+0x12c>)
   15f40:	4798      	blx	r3
			
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
   15f42:	2304      	movs	r3, #4
   15f44:	33ff      	adds	r3, #255	; 0xff
   15f46:	001a      	movs	r2, r3
   15f48:	4b37      	ldr	r3, [pc, #220]	; (16028 <read_ble_packet+0x118>)
   15f4a:	2100      	movs	r1, #0
   15f4c:	0018      	movs	r0, r3
   15f4e:	4b3c      	ldr	r3, [pc, #240]	; (16040 <read_ble_packet+0x130>)
   15f50:	4798      	blx	r3
		//Stop listening to the BLE UART
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
   15f52:	4b3c      	ldr	r3, [pc, #240]	; (16044 <read_ble_packet+0x134>)
   15f54:	2100      	movs	r1, #0
   15f56:	0018      	movs	r0, r3
   15f58:	4b3b      	ldr	r3, [pc, #236]	; (16048 <read_ble_packet+0x138>)
   15f5a:	4798      	blx	r3
		// Start listening to the BLE UART
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   15f5c:	2304      	movs	r3, #4
   15f5e:	33ff      	adds	r3, #255	; 0xff
   15f60:	001a      	movs	r2, r3
   15f62:	4931      	ldr	r1, [pc, #196]	; (16028 <read_ble_packet+0x118>)
   15f64:	4b37      	ldr	r3, [pc, #220]	; (16044 <read_ble_packet+0x134>)
   15f66:	0018      	movs	r0, r3
   15f68:	4b38      	ldr	r3, [pc, #224]	; (1604c <read_ble_packet+0x13c>)
   15f6a:	4798      	blx	r3
		uint32_t temp_timer = millis();
		while(millis() - temp_timer < 10){}
		// Start listening to the BLE UART
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
	}
}
   15f6c:	e055      	b.n	1601a <read_ble_packet+0x10a>
	} else if(check_ble_AT_recieved()){
   15f6e:	4b38      	ldr	r3, [pc, #224]	; (16050 <read_ble_packet+0x140>)
   15f70:	4798      	blx	r3
   15f72:	1e03      	subs	r3, r0, #0
   15f74:	d026      	beq.n	15fc4 <read_ble_packet+0xb4>
		if(!BLE_CONFIGURED && OK_EXPECTED){
   15f76:	4b37      	ldr	r3, [pc, #220]	; (16054 <read_ble_packet+0x144>)
   15f78:	781b      	ldrb	r3, [r3, #0]
   15f7a:	2201      	movs	r2, #1
   15f7c:	4053      	eors	r3, r2
   15f7e:	b2db      	uxtb	r3, r3
   15f80:	2b00      	cmp	r3, #0
   15f82:	d009      	beq.n	15f98 <read_ble_packet+0x88>
   15f84:	4b34      	ldr	r3, [pc, #208]	; (16058 <read_ble_packet+0x148>)
   15f86:	781b      	ldrb	r3, [r3, #0]
   15f88:	2b00      	cmp	r3, #0
   15f8a:	d005      	beq.n	15f98 <read_ble_packet+0x88>
			BLE_CONFIGURED = true;
   15f8c:	4b31      	ldr	r3, [pc, #196]	; (16054 <read_ble_packet+0x144>)
   15f8e:	2201      	movs	r2, #1
   15f90:	701a      	strb	r2, [r3, #0]
			OK_EXPECTED = false;
   15f92:	4b31      	ldr	r3, [pc, #196]	; (16058 <read_ble_packet+0x148>)
   15f94:	2200      	movs	r2, #0
   15f96:	701a      	strb	r2, [r3, #0]
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
   15f98:	2304      	movs	r3, #4
   15f9a:	33ff      	adds	r3, #255	; 0xff
   15f9c:	001a      	movs	r2, r3
   15f9e:	4b22      	ldr	r3, [pc, #136]	; (16028 <read_ble_packet+0x118>)
   15fa0:	2100      	movs	r1, #0
   15fa2:	0018      	movs	r0, r3
   15fa4:	4b26      	ldr	r3, [pc, #152]	; (16040 <read_ble_packet+0x130>)
   15fa6:	4798      	blx	r3
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
   15fa8:	4b26      	ldr	r3, [pc, #152]	; (16044 <read_ble_packet+0x134>)
   15faa:	2100      	movs	r1, #0
   15fac:	0018      	movs	r0, r3
   15fae:	4b26      	ldr	r3, [pc, #152]	; (16048 <read_ble_packet+0x138>)
   15fb0:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   15fb2:	2304      	movs	r3, #4
   15fb4:	33ff      	adds	r3, #255	; 0xff
   15fb6:	001a      	movs	r2, r3
   15fb8:	491b      	ldr	r1, [pc, #108]	; (16028 <read_ble_packet+0x118>)
   15fba:	4b22      	ldr	r3, [pc, #136]	; (16044 <read_ble_packet+0x134>)
   15fbc:	0018      	movs	r0, r3
   15fbe:	4b23      	ldr	r3, [pc, #140]	; (1604c <read_ble_packet+0x13c>)
   15fc0:	4798      	blx	r3
}
   15fc2:	e02a      	b.n	1601a <read_ble_packet+0x10a>
	} else if(CHECK_FOR_NOISE(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE)){
   15fc4:	2304      	movs	r3, #4
   15fc6:	33ff      	adds	r3, #255	; 0xff
   15fc8:	001a      	movs	r2, r3
   15fca:	4917      	ldr	r1, [pc, #92]	; (16028 <read_ble_packet+0x118>)
   15fcc:	4b1d      	ldr	r3, [pc, #116]	; (16044 <read_ble_packet+0x134>)
   15fce:	0018      	movs	r0, r3
   15fd0:	4b22      	ldr	r3, [pc, #136]	; (1605c <read_ble_packet+0x14c>)
   15fd2:	4798      	blx	r3
   15fd4:	1e03      	subs	r3, r0, #0
   15fd6:	d020      	beq.n	1601a <read_ble_packet+0x10a>
		usart_abort_job(&ble_usart, USART_TRANSCEIVER_RX);
   15fd8:	4b1a      	ldr	r3, [pc, #104]	; (16044 <read_ble_packet+0x134>)
   15fda:	2100      	movs	r1, #0
   15fdc:	0018      	movs	r0, r3
   15fde:	4b1a      	ldr	r3, [pc, #104]	; (16048 <read_ble_packet+0x138>)
   15fe0:	4798      	blx	r3
		memset(ble_USART_read_buffer, 0, MAX_BLE_MESSAGE_SIZE);
   15fe2:	2304      	movs	r3, #4
   15fe4:	33ff      	adds	r3, #255	; 0xff
   15fe6:	001a      	movs	r2, r3
   15fe8:	4b0f      	ldr	r3, [pc, #60]	; (16028 <read_ble_packet+0x118>)
   15fea:	2100      	movs	r1, #0
   15fec:	0018      	movs	r0, r3
   15fee:	4b14      	ldr	r3, [pc, #80]	; (16040 <read_ble_packet+0x130>)
   15ff0:	4798      	blx	r3
		uint32_t temp_timer = millis();
   15ff2:	4b1b      	ldr	r3, [pc, #108]	; (16060 <read_ble_packet+0x150>)
   15ff4:	4798      	blx	r3
   15ff6:	0003      	movs	r3, r0
   15ff8:	607b      	str	r3, [r7, #4]
		while(millis() - temp_timer < 10){}
   15ffa:	46c0      	nop			; (mov r8, r8)
   15ffc:	4b18      	ldr	r3, [pc, #96]	; (16060 <read_ble_packet+0x150>)
   15ffe:	4798      	blx	r3
   16000:	0002      	movs	r2, r0
   16002:	687b      	ldr	r3, [r7, #4]
   16004:	1ad3      	subs	r3, r2, r3
   16006:	2b09      	cmp	r3, #9
   16008:	d9f8      	bls.n	15ffc <read_ble_packet+0xec>
		usart_read_buffer_job(&ble_usart, ble_USART_read_buffer, MAX_BLE_MESSAGE_SIZE);
   1600a:	2304      	movs	r3, #4
   1600c:	33ff      	adds	r3, #255	; 0xff
   1600e:	001a      	movs	r2, r3
   16010:	4905      	ldr	r1, [pc, #20]	; (16028 <read_ble_packet+0x118>)
   16012:	4b0c      	ldr	r3, [pc, #48]	; (16044 <read_ble_packet+0x134>)
   16014:	0018      	movs	r0, r3
   16016:	4b0d      	ldr	r3, [pc, #52]	; (1604c <read_ble_packet+0x13c>)
   16018:	4798      	blx	r3
}
   1601a:	46c0      	nop			; (mov r8, r8)
   1601c:	46bd      	mov	sp, r7
   1601e:	b002      	add	sp, #8
   16020:	bd80      	pop	{r7, pc}
   16022:	46c0      	nop			; (mov r8, r8)
   16024:	00014f01 	.word	0x00014f01
   16028:	200017b8 	.word	0x200017b8
   1602c:	200006e0 	.word	0x200006e0
   16030:	200017bb 	.word	0x200017bb
   16034:	200006e2 	.word	0x200006e2
   16038:	0001b3e9 	.word	0x0001b3e9
   1603c:	00014f35 	.word	0x00014f35
   16040:	0001b3fb 	.word	0x0001b3fb
   16044:	200006ac 	.word	0x200006ac
   16048:	000066b9 	.word	0x000066b9
   1604c:	00006671 	.word	0x00006671
   16050:	00014ed5 	.word	0x00014ed5
   16054:	20000435 	.word	0x20000435
   16058:	2000043d 	.word	0x2000043d
   1605c:	00012ccd 	.word	0x00012ccd
   16060:	00009f65 	.word	0x00009f65

00016064 <configure_ADC>:
void configure_eeprom(void);


// Configure the light sensor port as an input
void configure_ADC(void)
{
   16064:	b580      	push	{r7, lr}
   16066:	b08e      	sub	sp, #56	; 0x38
   16068:	af00      	add	r7, sp, #0
	for(int i = 0; i < LGHTsamples; ++i){
   1606a:	2300      	movs	r3, #0
   1606c:	637b      	str	r3, [r7, #52]	; 0x34
   1606e:	e007      	b.n	16080 <configure_ADC+0x1c>
		LGHTaverage[i] = 0;
   16070:	4b1a      	ldr	r3, [pc, #104]	; (160dc <configure_ADC+0x78>)
   16072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16074:	0052      	lsls	r2, r2, #1
   16076:	2100      	movs	r1, #0
   16078:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < LGHTsamples; ++i){
   1607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1607c:	3301      	adds	r3, #1
   1607e:	637b      	str	r3, [r7, #52]	; 0x34
   16080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16082:	2b95      	cmp	r3, #149	; 0x95
   16084:	ddf4      	ble.n	16070 <configure_ADC+0xc>
	}

	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
   16086:	1d3b      	adds	r3, r7, #4
   16088:	0018      	movs	r0, r3
   1608a:	4b15      	ldr	r3, [pc, #84]	; (160e0 <configure_ADC+0x7c>)
   1608c:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INTVCC1;
   1608e:	1d3b      	adds	r3, r7, #4
   16090:	2202      	movs	r2, #2
   16092:	705a      	strb	r2, [r3, #1]
	config_adc.resolution = ADC_RESOLUTION_16BIT;
   16094:	1d3b      	adds	r3, r7, #4
   16096:	2210      	movs	r2, #16
   16098:	711a      	strb	r2, [r3, #4]
	config_adc.differential_mode = DISABLE;
   1609a:	1d3b      	adds	r3, r7, #4
   1609c:	2200      	movs	r2, #0
   1609e:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
   160a0:	1d3b      	adds	r3, r7, #4
   160a2:	22c0      	movs	r2, #192	; 0xc0
   160a4:	0152      	lsls	r2, r2, #5
   160a6:	81da      	strh	r2, [r3, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN17;
   160a8:	1d3b      	adds	r3, r7, #4
   160aa:	2211      	movs	r2, #17
   160ac:	731a      	strb	r2, [r3, #12]
	config_adc.freerunning = DISABLE;
   160ae:	1d3b      	adds	r3, r7, #4
   160b0:	2200      	movs	r2, #0
   160b2:	751a      	strb	r2, [r3, #20]
	config_adc.run_in_standby = true;
   160b4:	1d3b      	adds	r3, r7, #4
   160b6:	2201      	movs	r2, #1
   160b8:	755a      	strb	r2, [r3, #21]
	config_adc.left_adjust = false;
   160ba:	1d3b      	adds	r3, r7, #4
   160bc:	2200      	movs	r2, #0
   160be:	749a      	strb	r2, [r3, #18]
	adc_init(&adc1, ADC, &config_adc);
   160c0:	1d3a      	adds	r2, r7, #4
   160c2:	4908      	ldr	r1, [pc, #32]	; (160e4 <configure_ADC+0x80>)
   160c4:	4b08      	ldr	r3, [pc, #32]	; (160e8 <configure_ADC+0x84>)
   160c6:	0018      	movs	r0, r3
   160c8:	4b08      	ldr	r3, [pc, #32]	; (160ec <configure_ADC+0x88>)
   160ca:	4798      	blx	r3
	adc_enable(&adc1);
   160cc:	4b06      	ldr	r3, [pc, #24]	; (160e8 <configure_ADC+0x84>)
   160ce:	0018      	movs	r0, r3
   160d0:	4b07      	ldr	r3, [pc, #28]	; (160f0 <configure_ADC+0x8c>)
   160d2:	4798      	blx	r3
}
   160d4:	46c0      	nop			; (mov r8, r8)
   160d6:	46bd      	mov	sp, r7
   160d8:	b00e      	add	sp, #56	; 0x38
   160da:	bd80      	pop	{r7, pc}
   160dc:	20000ca0 	.word	0x20000ca0
   160e0:	00002219 	.word	0x00002219
   160e4:	42004000 	.word	0x42004000
   160e8:	20000f84 	.word	0x20000f84
   160ec:	00002869 	.word	0x00002869
   160f0:	0000967d 	.word	0x0000967d

000160f4 <configure_port_pins>:

// Configure the LED selection port as output
void configure_port_pins(void)
{
   160f4:	b580      	push	{r7, lr}
   160f6:	b082      	sub	sp, #8
   160f8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   160fa:	1d3b      	adds	r3, r7, #4
   160fc:	0018      	movs	r0, r3
   160fe:	4b36      	ldr	r3, [pc, #216]	; (161d8 <configure_port_pins+0xe4>)
   16100:	4798      	blx	r3
	
	if(RGB_led_type == RGB_DIGITAL_APA102 || RGB_led_type == RGB_DIGITAL_SK9822){
   16102:	4b36      	ldr	r3, [pc, #216]	; (161dc <configure_port_pins+0xe8>)
   16104:	781b      	ldrb	r3, [r3, #0]
   16106:	2b01      	cmp	r3, #1
   16108:	d003      	beq.n	16112 <configure_port_pins+0x1e>
   1610a:	4b34      	ldr	r3, [pc, #208]	; (161dc <configure_port_pins+0xe8>)
   1610c:	781b      	ldrb	r3, [r3, #0]
   1610e:	2b02      	cmp	r3, #2
   16110:	d11d      	bne.n	1614e <configure_port_pins+0x5a>
		config_port_pin.powersave = false;
   16112:	1d3b      	adds	r3, r7, #4
   16114:	2200      	movs	r2, #0
   16116:	709a      	strb	r2, [r3, #2]
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16118:	1d3b      	adds	r3, r7, #4
   1611a:	2201      	movs	r2, #1
   1611c:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(L_GND, &config_port_pin);
   1611e:	1d3b      	adds	r3, r7, #4
   16120:	0019      	movs	r1, r3
   16122:	2007      	movs	r0, #7
   16124:	4b2e      	ldr	r3, [pc, #184]	; (161e0 <configure_port_pins+0xec>)
   16126:	4798      	blx	r3
		port_pin_set_output_level(L_GND,false);
   16128:	2100      	movs	r1, #0
   1612a:	2007      	movs	r0, #7
   1612c:	4b2d      	ldr	r3, [pc, #180]	; (161e4 <configure_port_pins+0xf0>)
   1612e:	4798      	blx	r3

		config_port_pin.powersave = false;
   16130:	1d3b      	adds	r3, r7, #4
   16132:	2200      	movs	r2, #0
   16134:	709a      	strb	r2, [r3, #2]
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16136:	1d3b      	adds	r3, r7, #4
   16138:	2201      	movs	r2, #1
   1613a:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(R_GND, &config_port_pin);
   1613c:	1d3b      	adds	r3, r7, #4
   1613e:	0019      	movs	r1, r3
   16140:	200e      	movs	r0, #14
   16142:	4b27      	ldr	r3, [pc, #156]	; (161e0 <configure_port_pins+0xec>)
   16144:	4798      	blx	r3
		port_pin_set_output_level(L_GND,false);
   16146:	2100      	movs	r1, #0
   16148:	2007      	movs	r0, #7
   1614a:	4b26      	ldr	r3, [pc, #152]	; (161e4 <configure_port_pins+0xf0>)
   1614c:	4798      	blx	r3
	}
	
	config_port_pin.powersave = false;
   1614e:	1d3b      	adds	r3, r7, #4
   16150:	2200      	movs	r2, #0
   16152:	709a      	strb	r2, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16154:	1d3b      	adds	r3, r7, #4
   16156:	2201      	movs	r2, #1
   16158:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA06E_TCC1_WO0, &config_port_pin);
   1615a:	1d3b      	adds	r3, r7, #4
   1615c:	0019      	movs	r1, r3
   1615e:	2006      	movs	r0, #6
   16160:	4b1f      	ldr	r3, [pc, #124]	; (161e0 <configure_port_pins+0xec>)
   16162:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA06E_TCC1_WO0,false);
   16164:	2100      	movs	r1, #0
   16166:	2006      	movs	r0, #6
   16168:	4b1e      	ldr	r3, [pc, #120]	; (161e4 <configure_port_pins+0xf0>)
   1616a:	4798      	blx	r3

	config_port_pin.powersave = false;
   1616c:	1d3b      	adds	r3, r7, #4
   1616e:	2200      	movs	r2, #0
   16170:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
   16172:	1d3b      	adds	r3, r7, #4
   16174:	2201      	movs	r2, #1
   16176:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   16178:	1d3b      	adds	r3, r7, #4
   1617a:	2200      	movs	r2, #0
   1617c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PPM_IN, &config_port_pin);
   1617e:	1d3b      	adds	r3, r7, #4
   16180:	0019      	movs	r1, r3
   16182:	2022      	movs	r0, #34	; 0x22
   16184:	4b16      	ldr	r3, [pc, #88]	; (161e0 <configure_port_pins+0xec>)
   16186:	4798      	blx	r3
	
	config_port_pin.powersave = false;
   16188:	1d3b      	adds	r3, r7, #4
   1618a:	2200      	movs	r2, #0
   1618c:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
   1618e:	1d3b      	adds	r3, r7, #4
   16190:	2200      	movs	r2, #0
   16192:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16194:	1d3b      	adds	r3, r7, #4
   16196:	2201      	movs	r2, #1
   16198:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(HORN_PIN, &config_port_pin);
   1619a:	1d3b      	adds	r3, r7, #4
   1619c:	0019      	movs	r1, r3
   1619e:	2008      	movs	r0, #8
   161a0:	4b0f      	ldr	r3, [pc, #60]	; (161e0 <configure_port_pins+0xec>)
   161a2:	4798      	blx	r3
	port_pin_set_output_level(HORN_PIN,true);
   161a4:	2101      	movs	r1, #1
   161a6:	2008      	movs	r0, #8
   161a8:	4b0e      	ldr	r3, [pc, #56]	; (161e4 <configure_port_pins+0xf0>)
   161aa:	4798      	blx	r3

#if  defined(HW_4v0) || defined(HW_4v1)
	config_port_pin.powersave = false;
   161ac:	1d3b      	adds	r3, r7, #4
   161ae:	2200      	movs	r2, #0
   161b0:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
   161b2:	1d3b      	adds	r3, r7, #4
   161b4:	2200      	movs	r2, #0
   161b6:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   161b8:	1d3b      	adds	r3, r7, #4
   161ba:	2201      	movs	r2, #1
   161bc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(STAT_LED, &config_port_pin);
   161be:	1d3b      	adds	r3, r7, #4
   161c0:	0019      	movs	r1, r3
   161c2:	2023      	movs	r0, #35	; 0x23
   161c4:	4b06      	ldr	r3, [pc, #24]	; (161e0 <configure_port_pins+0xec>)
   161c6:	4798      	blx	r3
	port_pin_set_output_level(STAT_LED,false);
   161c8:	2100      	movs	r1, #0
   161ca:	2023      	movs	r0, #35	; 0x23
   161cc:	4b05      	ldr	r3, [pc, #20]	; (161e4 <configure_port_pins+0xf0>)
   161ce:	4798      	blx	r3
#endif
}
   161d0:	46c0      	nop			; (mov r8, r8)
   161d2:	46bd      	mov	sp, r7
   161d4:	b002      	add	sp, #8
   161d6:	bd80      	pop	{r7, pc}
   161d8:	000097ad 	.word	0x000097ad
   161dc:	20001a4c 	.word	0x20001a4c
   161e0:	00007bcd 	.word	0x00007bcd
   161e4:	00009815 	.word	0x00009815

000161e8 <configure_i2c_slave>:
	}
}

// Configure SERCOM1 as I2C slave for VESC communication
void configure_i2c_slave(void)
{	
   161e8:	b580      	push	{r7, lr}
   161ea:	b08a      	sub	sp, #40	; 0x28
   161ec:	af00      	add	r7, sp, #0
	/* Create and initialize config_i2c_slave structure */
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
   161ee:	003b      	movs	r3, r7
   161f0:	0018      	movs	r0, r3
   161f2:	4b0f      	ldr	r3, [pc, #60]	; (16230 <configure_i2c_slave+0x48>)
   161f4:	4798      	blx	r3
	/* Change address and address_mode */
	config_i2c_slave.address        = SLAVE_ADDRESS;
   161f6:	003b      	movs	r3, r7
   161f8:	2212      	movs	r2, #18
   161fa:	819a      	strh	r2, [r3, #12]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_MASK;
   161fc:	003b      	movs	r3, r7
   161fe:	2200      	movs	r2, #0
   16200:	815a      	strh	r2, [r3, #10]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   16202:	003b      	movs	r3, r7
   16204:	4a0b      	ldr	r2, [pc, #44]	; (16234 <configure_i2c_slave+0x4c>)
   16206:	61da      	str	r2, [r3, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   16208:	003b      	movs	r3, r7
   1620a:	4a0b      	ldr	r2, [pc, #44]	; (16238 <configure_i2c_slave+0x50>)
   1620c:	621a      	str	r2, [r3, #32]
	config_i2c_slave.generator_source = GCLK_GENERATOR_0;
   1620e:	003b      	movs	r3, r7
   16210:	2200      	movs	r2, #0
   16212:	765a      	strb	r2, [r3, #25]
	/* Initialize and enable device with config_i2c_slave */
	i2c_slave_init(&i2c_slave_instance, SERCOM1, &config_i2c_slave);
   16214:	003a      	movs	r2, r7
   16216:	4909      	ldr	r1, [pc, #36]	; (1623c <configure_i2c_slave+0x54>)
   16218:	4b09      	ldr	r3, [pc, #36]	; (16240 <configure_i2c_slave+0x58>)
   1621a:	0018      	movs	r0, r3
   1621c:	4b09      	ldr	r3, [pc, #36]	; (16244 <configure_i2c_slave+0x5c>)
   1621e:	4798      	blx	r3
	i2c_slave_enable(&i2c_slave_instance);
   16220:	4b07      	ldr	r3, [pc, #28]	; (16240 <configure_i2c_slave+0x58>)
   16222:	0018      	movs	r0, r3
   16224:	4b08      	ldr	r3, [pc, #32]	; (16248 <configure_i2c_slave+0x60>)
   16226:	4798      	blx	r3
}
   16228:	46c0      	nop			; (mov r8, r8)
   1622a:	46bd      	mov	sp, r7
   1622c:	b00a      	add	sp, #40	; 0x28
   1622e:	bd80      	pop	{r7, pc}
   16230:	00009a4d 	.word	0x00009a4d
   16234:	00100002 	.word	0x00100002
   16238:	00110002 	.word	0x00110002
   1623c:	42000c00 	.word	0x42000c00
   16240:	20001ab0 	.word	0x20001ab0
   16244:	000044b5 	.word	0x000044b5
   16248:	00009acd 	.word	0x00009acd

0001624c <i2c_write_request_callback>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
   1624c:	b580      	push	{r7, lr}
   1624e:	b082      	sub	sp, #8
   16250:	af00      	add	r7, sp, #0
   16252:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	packet.data_length = SLAVE_READ_DATA_LENGTH;
   16254:	4bae      	ldr	r3, [pc, #696]	; (16510 <i2c_write_request_callback+0x2c4>)
   16256:	221e      	movs	r2, #30
   16258:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_read_buffer;
   1625a:	4bad      	ldr	r3, [pc, #692]	; (16510 <i2c_write_request_callback+0x2c4>)
   1625c:	4aad      	ldr	r2, [pc, #692]	; (16514 <i2c_write_request_callback+0x2c8>)
   1625e:	605a      	str	r2, [r3, #4]
	
	if(FIRST_MESSAGE == 1){
   16260:	4bad      	ldr	r3, [pc, #692]	; (16518 <i2c_write_request_callback+0x2cc>)
   16262:	781b      	ldrb	r3, [r3, #0]
   16264:	2b01      	cmp	r3, #1
   16266:	d105      	bne.n	16274 <i2c_write_request_callback+0x28>
		FIRST_MESSAGE = 0;
   16268:	4bab      	ldr	r3, [pc, #684]	; (16518 <i2c_write_request_callback+0x2cc>)
   1626a:	2200      	movs	r2, #0
   1626c:	701a      	strb	r2, [r3, #0]
		GET_LIMITS = 1; // Read the limits on first message to set lighting variables
   1626e:	4bab      	ldr	r3, [pc, #684]	; (1651c <i2c_write_request_callback+0x2d0>)
   16270:	2201      	movs	r2, #1
   16272:	701a      	strb	r2, [r3, #0]
	}
	i2c_slave_read_packet_job(module, &packet);
   16274:	4aa6      	ldr	r2, [pc, #664]	; (16510 <i2c_write_request_callback+0x2c4>)
   16276:	687b      	ldr	r3, [r7, #4]
   16278:	0011      	movs	r1, r2
   1627a:	0018      	movs	r0, r3
   1627c:	4ba8      	ldr	r3, [pc, #672]	; (16520 <i2c_write_request_callback+0x2d4>)
   1627e:	4798      	blx	r3
		if(I2C_slave_read_buffer[0] == 0x8D && I2C_slave_read_buffer[28] == 0xAD) {
   16280:	4ba4      	ldr	r3, [pc, #656]	; (16514 <i2c_write_request_callback+0x2c8>)
   16282:	781b      	ldrb	r3, [r3, #0]
   16284:	2b8d      	cmp	r3, #141	; 0x8d
   16286:	d000      	beq.n	1628a <i2c_write_request_callback+0x3e>
   16288:	e090      	b.n	163ac <i2c_write_request_callback+0x160>
   1628a:	4ba2      	ldr	r3, [pc, #648]	; (16514 <i2c_write_request_callback+0x2c8>)
   1628c:	7f1b      	ldrb	r3, [r3, #28]
   1628e:	2bad      	cmp	r3, #173	; 0xad
   16290:	d000      	beq.n	16294 <i2c_write_request_callback+0x48>
   16292:	e08b      	b.n	163ac <i2c_write_request_callback+0x160>
			mcconf_limits.motor_current_max = I2C_slave_read_buffer[1];
   16294:	4b9f      	ldr	r3, [pc, #636]	; (16514 <i2c_write_request_callback+0x2c8>)
   16296:	785b      	ldrb	r3, [r3, #1]
   16298:	001a      	movs	r2, r3
   1629a:	4ba2      	ldr	r3, [pc, #648]	; (16524 <i2c_write_request_callback+0x2d8>)
   1629c:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = I2C_slave_read_buffer[2];
   1629e:	4b9d      	ldr	r3, [pc, #628]	; (16514 <i2c_write_request_callback+0x2c8>)
   162a0:	789b      	ldrb	r3, [r3, #2]
   162a2:	001a      	movs	r2, r3
   162a4:	4b9f      	ldr	r3, [pc, #636]	; (16524 <i2c_write_request_callback+0x2d8>)
   162a6:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = I2C_slave_read_buffer[3];
   162a8:	4b9a      	ldr	r3, [pc, #616]	; (16514 <i2c_write_request_callback+0x2c8>)
   162aa:	78db      	ldrb	r3, [r3, #3]
   162ac:	001a      	movs	r2, r3
   162ae:	4b9d      	ldr	r3, [pc, #628]	; (16524 <i2c_write_request_callback+0x2d8>)
   162b0:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = I2C_slave_read_buffer[4];
   162b2:	4b98      	ldr	r3, [pc, #608]	; (16514 <i2c_write_request_callback+0x2c8>)
   162b4:	791b      	ldrb	r3, [r3, #4]
   162b6:	001a      	movs	r2, r3
   162b8:	4b9a      	ldr	r3, [pc, #616]	; (16524 <i2c_write_request_callback+0x2d8>)
   162ba:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = I2C_slave_read_buffer[5];
   162bc:	4b95      	ldr	r3, [pc, #596]	; (16514 <i2c_write_request_callback+0x2c8>)
   162be:	795b      	ldrb	r3, [r3, #5]
   162c0:	001a      	movs	r2, r3
   162c2:	4b98      	ldr	r3, [pc, #608]	; (16524 <i2c_write_request_callback+0x2d8>)
   162c4:	611a      	str	r2, [r3, #16]
			mcconf_limits.max_vin = I2C_slave_read_buffer[6];
   162c6:	4b93      	ldr	r3, [pc, #588]	; (16514 <i2c_write_request_callback+0x2c8>)
   162c8:	799b      	ldrb	r3, [r3, #6]
   162ca:	001a      	movs	r2, r3
   162cc:	4b95      	ldr	r3, [pc, #596]	; (16524 <i2c_write_request_callback+0x2d8>)
   162ce:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.min_vin = I2C_slave_read_buffer[7];
   162d0:	4b90      	ldr	r3, [pc, #576]	; (16514 <i2c_write_request_callback+0x2c8>)
   162d2:	79db      	ldrb	r3, [r3, #7]
   162d4:	001a      	movs	r2, r3
   162d6:	4b93      	ldr	r3, [pc, #588]	; (16524 <i2c_write_request_callback+0x2d8>)
   162d8:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.battery_cut_start = I2C_slave_read_buffer[8];
   162da:	4b8e      	ldr	r3, [pc, #568]	; (16514 <i2c_write_request_callback+0x2c8>)
   162dc:	7a1a      	ldrb	r2, [r3, #8]
   162de:	4b92      	ldr	r3, [pc, #584]	; (16528 <i2c_write_request_callback+0x2dc>)
   162e0:	0010      	movs	r0, r2
   162e2:	4798      	blx	r3
   162e4:	1c02      	adds	r2, r0, #0
   162e6:	4b8f      	ldr	r3, [pc, #572]	; (16524 <i2c_write_request_callback+0x2d8>)
   162e8:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = I2C_slave_read_buffer[9];
   162ea:	4b8a      	ldr	r3, [pc, #552]	; (16514 <i2c_write_request_callback+0x2c8>)
   162ec:	7a5a      	ldrb	r2, [r3, #9]
   162ee:	4b8e      	ldr	r3, [pc, #568]	; (16528 <i2c_write_request_callback+0x2dc>)
   162f0:	0010      	movs	r0, r2
   162f2:	4798      	blx	r3
   162f4:	1c02      	adds	r2, r0, #0
   162f6:	4b8b      	ldr	r3, [pc, #556]	; (16524 <i2c_write_request_callback+0x2d8>)
   162f8:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.max_erpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   162fa:	4b86      	ldr	r3, [pc, #536]	; (16514 <i2c_write_request_callback+0x2c8>)
   162fc:	7a9b      	ldrb	r3, [r3, #10]
   162fe:	001a      	movs	r2, r3
   16300:	4b84      	ldr	r3, [pc, #528]	; (16514 <i2c_write_request_callback+0x2c8>)
   16302:	7adb      	ldrb	r3, [r3, #11]
   16304:	021b      	lsls	r3, r3, #8
   16306:	431a      	orrs	r2, r3
   16308:	4b82      	ldr	r3, [pc, #520]	; (16514 <i2c_write_request_callback+0x2c8>)
   1630a:	7b1b      	ldrb	r3, [r3, #12]
   1630c:	041b      	lsls	r3, r3, #16
   1630e:	431a      	orrs	r2, r3
   16310:	4b84      	ldr	r3, [pc, #528]	; (16524 <i2c_write_request_callback+0x2d8>)
   16312:	619a      	str	r2, [r3, #24]
			mcconf_limits.min_erpm = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   16314:	4b7f      	ldr	r3, [pc, #508]	; (16514 <i2c_write_request_callback+0x2c8>)
   16316:	7b5b      	ldrb	r3, [r3, #13]
   16318:	001a      	movs	r2, r3
   1631a:	4b7e      	ldr	r3, [pc, #504]	; (16514 <i2c_write_request_callback+0x2c8>)
   1631c:	7b9b      	ldrb	r3, [r3, #14]
   1631e:	021b      	lsls	r3, r3, #8
   16320:	431a      	orrs	r2, r3
   16322:	4b7c      	ldr	r3, [pc, #496]	; (16514 <i2c_write_request_callback+0x2c8>)
   16324:	7bdb      	ldrb	r3, [r3, #15]
   16326:	041b      	lsls	r3, r3, #16
   16328:	431a      	orrs	r2, r3
   1632a:	4b7e      	ldr	r3, [pc, #504]	; (16524 <i2c_write_request_callback+0x2d8>)
   1632c:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm_fbrake = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   1632e:	4b79      	ldr	r3, [pc, #484]	; (16514 <i2c_write_request_callback+0x2c8>)
   16330:	7c1b      	ldrb	r3, [r3, #16]
   16332:	001a      	movs	r2, r3
   16334:	4b77      	ldr	r3, [pc, #476]	; (16514 <i2c_write_request_callback+0x2c8>)
   16336:	7c5b      	ldrb	r3, [r3, #17]
   16338:	021b      	lsls	r3, r3, #8
   1633a:	431a      	orrs	r2, r3
   1633c:	4b75      	ldr	r3, [pc, #468]	; (16514 <i2c_write_request_callback+0x2c8>)
   1633e:	7c9b      	ldrb	r3, [r3, #18]
   16340:	041b      	lsls	r3, r3, #16
   16342:	431a      	orrs	r2, r3
   16344:	4b77      	ldr	r3, [pc, #476]	; (16524 <i2c_write_request_callback+0x2d8>)
   16346:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   16348:	4b72      	ldr	r3, [pc, #456]	; (16514 <i2c_write_request_callback+0x2c8>)
   1634a:	7cdb      	ldrb	r3, [r3, #19]
   1634c:	001a      	movs	r2, r3
   1634e:	4b71      	ldr	r3, [pc, #452]	; (16514 <i2c_write_request_callback+0x2c8>)
   16350:	7d1b      	ldrb	r3, [r3, #20]
   16352:	021b      	lsls	r3, r3, #8
   16354:	431a      	orrs	r2, r3
   16356:	4b6f      	ldr	r3, [pc, #444]	; (16514 <i2c_write_request_callback+0x2c8>)
   16358:	7d5b      	ldrb	r3, [r3, #21]
   1635a:	041b      	lsls	r3, r3, #16
   1635c:	431a      	orrs	r2, r3
   1635e:	4b71      	ldr	r3, [pc, #452]	; (16524 <i2c_write_request_callback+0x2d8>)
   16360:	621a      	str	r2, [r3, #32]
			mcconf_limits.temp_fet_start = I2C_slave_read_buffer[22];
   16362:	4b6c      	ldr	r3, [pc, #432]	; (16514 <i2c_write_request_callback+0x2c8>)
   16364:	7d9b      	ldrb	r3, [r3, #22]
   16366:	001a      	movs	r2, r3
   16368:	4b6e      	ldr	r3, [pc, #440]	; (16524 <i2c_write_request_callback+0x2d8>)
   1636a:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = I2C_slave_read_buffer[23];
   1636c:	4b69      	ldr	r3, [pc, #420]	; (16514 <i2c_write_request_callback+0x2c8>)
   1636e:	7ddb      	ldrb	r3, [r3, #23]
   16370:	001a      	movs	r2, r3
   16372:	4b6c      	ldr	r3, [pc, #432]	; (16524 <i2c_write_request_callback+0x2d8>)
   16374:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = I2C_slave_read_buffer[24];
   16376:	4b67      	ldr	r3, [pc, #412]	; (16514 <i2c_write_request_callback+0x2c8>)
   16378:	7e1b      	ldrb	r3, [r3, #24]
   1637a:	001a      	movs	r2, r3
   1637c:	4b69      	ldr	r3, [pc, #420]	; (16524 <i2c_write_request_callback+0x2d8>)
   1637e:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = I2C_slave_read_buffer[25];
   16380:	4b64      	ldr	r3, [pc, #400]	; (16514 <i2c_write_request_callback+0x2c8>)
   16382:	7e5b      	ldrb	r3, [r3, #25]
   16384:	001a      	movs	r2, r3
   16386:	4b67      	ldr	r3, [pc, #412]	; (16524 <i2c_write_request_callback+0x2d8>)
   16388:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.max_duty = I2C_slave_read_buffer[26];
   1638a:	4b62      	ldr	r3, [pc, #392]	; (16514 <i2c_write_request_callback+0x2c8>)
   1638c:	7e9b      	ldrb	r3, [r3, #26]
   1638e:	001a      	movs	r2, r3
   16390:	4b64      	ldr	r3, [pc, #400]	; (16524 <i2c_write_request_callback+0x2d8>)
   16392:	649a      	str	r2, [r3, #72]	; 0x48
			mcconf_limits.min_duty = I2C_slave_read_buffer[27];
   16394:	4b5f      	ldr	r3, [pc, #380]	; (16514 <i2c_write_request_callback+0x2c8>)
   16396:	7edb      	ldrb	r3, [r3, #27]
   16398:	001a      	movs	r2, r3
   1639a:	4b62      	ldr	r3, [pc, #392]	; (16524 <i2c_write_request_callback+0x2d8>)
   1639c:	645a      	str	r2, [r3, #68]	; 0x44
			SEND_LIMITS = 1;
   1639e:	4b63      	ldr	r3, [pc, #396]	; (1652c <i2c_write_request_callback+0x2e0>)
   163a0:	2201      	movs	r2, #1
   163a2:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   163a4:	4b62      	ldr	r3, [pc, #392]	; (16530 <i2c_write_request_callback+0x2e4>)
   163a6:	2200      	movs	r2, #0
   163a8:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
		}
}
   163aa:	e0ad      	b.n	16508 <i2c_write_request_callback+0x2bc>
		} else if(I2C_slave_read_buffer[0] == 0xDD && I2C_slave_read_buffer[29] == 0xAD) {
   163ac:	4b59      	ldr	r3, [pc, #356]	; (16514 <i2c_write_request_callback+0x2c8>)
   163ae:	781b      	ldrb	r3, [r3, #0]
   163b0:	2bdd      	cmp	r3, #221	; 0xdd
   163b2:	d000      	beq.n	163b6 <i2c_write_request_callback+0x16a>
   163b4:	e0a8      	b.n	16508 <i2c_write_request_callback+0x2bc>
   163b6:	4b57      	ldr	r3, [pc, #348]	; (16514 <i2c_write_request_callback+0x2c8>)
   163b8:	7f5b      	ldrb	r3, [r3, #29]
   163ba:	2bad      	cmp	r3, #173	; 0xad
   163bc:	d000      	beq.n	163c0 <i2c_write_request_callback+0x174>
   163be:	e0a3      	b.n	16508 <i2c_write_request_callback+0x2bc>
			latest_vesc_vals.avg_input_current = I2C_slave_read_buffer[1];
   163c0:	4b54      	ldr	r3, [pc, #336]	; (16514 <i2c_write_request_callback+0x2c8>)
   163c2:	785b      	ldrb	r3, [r3, #1]
   163c4:	001a      	movs	r2, r3
   163c6:	4b5b      	ldr	r3, [pc, #364]	; (16534 <i2c_write_request_callback+0x2e8>)
   163c8:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.avg_input_current += (I2C_slave_read_buffer[2] << 8);
   163ca:	4b5a      	ldr	r3, [pc, #360]	; (16534 <i2c_write_request_callback+0x2e8>)
   163cc:	689a      	ldr	r2, [r3, #8]
   163ce:	4b51      	ldr	r3, [pc, #324]	; (16514 <i2c_write_request_callback+0x2c8>)
   163d0:	789b      	ldrb	r3, [r3, #2]
   163d2:	021b      	lsls	r3, r3, #8
   163d4:	18d2      	adds	r2, r2, r3
   163d6:	4b57      	ldr	r3, [pc, #348]	; (16534 <i2c_write_request_callback+0x2e8>)
   163d8:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.INPUT_VOLTAGE = I2C_slave_read_buffer[3];
   163da:	4b4e      	ldr	r3, [pc, #312]	; (16514 <i2c_write_request_callback+0x2c8>)
   163dc:	78db      	ldrb	r3, [r3, #3]
   163de:	b21a      	sxth	r2, r3
   163e0:	4b54      	ldr	r3, [pc, #336]	; (16534 <i2c_write_request_callback+0x2e8>)
   163e2:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.INPUT_VOLTAGE += (I2C_slave_read_buffer[4] << 8);
   163e4:	4b53      	ldr	r3, [pc, #332]	; (16534 <i2c_write_request_callback+0x2e8>)
   163e6:	2214      	movs	r2, #20
   163e8:	5e9b      	ldrsh	r3, [r3, r2]
   163ea:	b29a      	uxth	r2, r3
   163ec:	4b49      	ldr	r3, [pc, #292]	; (16514 <i2c_write_request_callback+0x2c8>)
   163ee:	791b      	ldrb	r3, [r3, #4]
   163f0:	b29b      	uxth	r3, r3
   163f2:	021b      	lsls	r3, r3, #8
   163f4:	b29b      	uxth	r3, r3
   163f6:	18d3      	adds	r3, r2, r3
   163f8:	b29b      	uxth	r3, r3
   163fa:	b21a      	sxth	r2, r3
   163fc:	4b4d      	ldr	r3, [pc, #308]	; (16534 <i2c_write_request_callback+0x2e8>)
   163fe:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.avg_motor_current = I2C_slave_read_buffer[5];
   16400:	4b44      	ldr	r3, [pc, #272]	; (16514 <i2c_write_request_callback+0x2c8>)
   16402:	795b      	ldrb	r3, [r3, #5]
   16404:	001a      	movs	r2, r3
   16406:	4b4b      	ldr	r3, [pc, #300]	; (16534 <i2c_write_request_callback+0x2e8>)
   16408:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_motor_current += (I2C_slave_read_buffer[6] << 8);
   1640a:	4b4a      	ldr	r3, [pc, #296]	; (16534 <i2c_write_request_callback+0x2e8>)
   1640c:	685a      	ldr	r2, [r3, #4]
   1640e:	4b41      	ldr	r3, [pc, #260]	; (16514 <i2c_write_request_callback+0x2c8>)
   16410:	799b      	ldrb	r3, [r3, #6]
   16412:	021b      	lsls	r3, r3, #8
   16414:	18d2      	adds	r2, r2, r3
   16416:	4b47      	ldr	r3, [pc, #284]	; (16534 <i2c_write_request_callback+0x2e8>)
   16418:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.temp_fet_filtered = I2C_slave_read_buffer[7];
   1641a:	4b3e      	ldr	r3, [pc, #248]	; (16514 <i2c_write_request_callback+0x2c8>)
   1641c:	79db      	ldrb	r3, [r3, #7]
   1641e:	b21a      	sxth	r2, r3
   16420:	4b44      	ldr	r3, [pc, #272]	; (16534 <i2c_write_request_callback+0x2e8>)
   16422:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.temp_fet_filtered += (I2C_slave_read_buffer[8] << 8);
   16424:	4b43      	ldr	r3, [pc, #268]	; (16534 <i2c_write_request_callback+0x2e8>)
   16426:	2200      	movs	r2, #0
   16428:	5e9b      	ldrsh	r3, [r3, r2]
   1642a:	b29a      	uxth	r2, r3
   1642c:	4b39      	ldr	r3, [pc, #228]	; (16514 <i2c_write_request_callback+0x2c8>)
   1642e:	7a1b      	ldrb	r3, [r3, #8]
   16430:	b29b      	uxth	r3, r3
   16432:	021b      	lsls	r3, r3, #8
   16434:	b29b      	uxth	r3, r3
   16436:	18d3      	adds	r3, r2, r3
   16438:	b29b      	uxth	r3, r3
   1643a:	b21a      	sxth	r2, r3
   1643c:	4b3d      	ldr	r3, [pc, #244]	; (16534 <i2c_write_request_callback+0x2e8>)
   1643e:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.duty_cycle = I2C_slave_read_buffer[9];
   16440:	4b34      	ldr	r3, [pc, #208]	; (16514 <i2c_write_request_callback+0x2c8>)
   16442:	7a5b      	ldrb	r3, [r3, #9]
   16444:	b21a      	sxth	r2, r3
   16446:	4b3b      	ldr	r3, [pc, #236]	; (16534 <i2c_write_request_callback+0x2e8>)
   16448:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   1644a:	4b32      	ldr	r3, [pc, #200]	; (16514 <i2c_write_request_callback+0x2c8>)
   1644c:	7a9b      	ldrb	r3, [r3, #10]
   1644e:	001a      	movs	r2, r3
   16450:	4b30      	ldr	r3, [pc, #192]	; (16514 <i2c_write_request_callback+0x2c8>)
   16452:	7adb      	ldrb	r3, [r3, #11]
   16454:	021b      	lsls	r3, r3, #8
   16456:	431a      	orrs	r2, r3
   16458:	4b2e      	ldr	r3, [pc, #184]	; (16514 <i2c_write_request_callback+0x2c8>)
   1645a:	7b1b      	ldrb	r3, [r3, #12]
   1645c:	041b      	lsls	r3, r3, #16
   1645e:	431a      	orrs	r2, r3
   16460:	4b34      	ldr	r3, [pc, #208]	; (16534 <i2c_write_request_callback+0x2e8>)
   16462:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.amp_hours = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   16464:	4b2b      	ldr	r3, [pc, #172]	; (16514 <i2c_write_request_callback+0x2c8>)
   16466:	7b5b      	ldrb	r3, [r3, #13]
   16468:	001a      	movs	r2, r3
   1646a:	4b2a      	ldr	r3, [pc, #168]	; (16514 <i2c_write_request_callback+0x2c8>)
   1646c:	7b9b      	ldrb	r3, [r3, #14]
   1646e:	021b      	lsls	r3, r3, #8
   16470:	431a      	orrs	r2, r3
   16472:	4b28      	ldr	r3, [pc, #160]	; (16514 <i2c_write_request_callback+0x2c8>)
   16474:	7bdb      	ldrb	r3, [r3, #15]
   16476:	041b      	lsls	r3, r3, #16
   16478:	431a      	orrs	r2, r3
   1647a:	4b2e      	ldr	r3, [pc, #184]	; (16534 <i2c_write_request_callback+0x2e8>)
   1647c:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   1647e:	4b25      	ldr	r3, [pc, #148]	; (16514 <i2c_write_request_callback+0x2c8>)
   16480:	7c1b      	ldrb	r3, [r3, #16]
   16482:	001a      	movs	r2, r3
   16484:	4b23      	ldr	r3, [pc, #140]	; (16514 <i2c_write_request_callback+0x2c8>)
   16486:	7c5b      	ldrb	r3, [r3, #17]
   16488:	021b      	lsls	r3, r3, #8
   1648a:	431a      	orrs	r2, r3
   1648c:	4b21      	ldr	r3, [pc, #132]	; (16514 <i2c_write_request_callback+0x2c8>)
   1648e:	7c9b      	ldrb	r3, [r3, #18]
   16490:	041b      	lsls	r3, r3, #16
   16492:	431a      	orrs	r2, r3
   16494:	4b27      	ldr	r3, [pc, #156]	; (16534 <i2c_write_request_callback+0x2e8>)
   16496:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   16498:	4b1e      	ldr	r3, [pc, #120]	; (16514 <i2c_write_request_callback+0x2c8>)
   1649a:	7cdb      	ldrb	r3, [r3, #19]
   1649c:	001a      	movs	r2, r3
   1649e:	4b1d      	ldr	r3, [pc, #116]	; (16514 <i2c_write_request_callback+0x2c8>)
   164a0:	7d1b      	ldrb	r3, [r3, #20]
   164a2:	021b      	lsls	r3, r3, #8
   164a4:	431a      	orrs	r2, r3
   164a6:	4b1b      	ldr	r3, [pc, #108]	; (16514 <i2c_write_request_callback+0x2c8>)
   164a8:	7d5b      	ldrb	r3, [r3, #21]
   164aa:	041b      	lsls	r3, r3, #16
   164ac:	431a      	orrs	r2, r3
   164ae:	4b21      	ldr	r3, [pc, #132]	; (16534 <i2c_write_request_callback+0x2e8>)
   164b0:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = (I2C_slave_read_buffer[22] | (I2C_slave_read_buffer[23] << 8) | (I2C_slave_read_buffer[24] << 16));
   164b2:	4b18      	ldr	r3, [pc, #96]	; (16514 <i2c_write_request_callback+0x2c8>)
   164b4:	7d9b      	ldrb	r3, [r3, #22]
   164b6:	001a      	movs	r2, r3
   164b8:	4b16      	ldr	r3, [pc, #88]	; (16514 <i2c_write_request_callback+0x2c8>)
   164ba:	7ddb      	ldrb	r3, [r3, #23]
   164bc:	021b      	lsls	r3, r3, #8
   164be:	431a      	orrs	r2, r3
   164c0:	4b14      	ldr	r3, [pc, #80]	; (16514 <i2c_write_request_callback+0x2c8>)
   164c2:	7e1b      	ldrb	r3, [r3, #24]
   164c4:	041b      	lsls	r3, r3, #16
   164c6:	431a      	orrs	r2, r3
   164c8:	4b1a      	ldr	r3, [pc, #104]	; (16534 <i2c_write_request_callback+0x2e8>)
   164ca:	625a      	str	r2, [r3, #36]	; 0x24
			remote_x = I2C_slave_read_buffer[25];
   164cc:	4b11      	ldr	r3, [pc, #68]	; (16514 <i2c_write_request_callback+0x2c8>)
   164ce:	7e5a      	ldrb	r2, [r3, #25]
   164d0:	4b19      	ldr	r3, [pc, #100]	; (16538 <i2c_write_request_callback+0x2ec>)
   164d2:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
   164d4:	4b0f      	ldr	r3, [pc, #60]	; (16514 <i2c_write_request_callback+0x2c8>)
   164d6:	7e9a      	ldrb	r2, [r3, #26]
   164d8:	4b18      	ldr	r3, [pc, #96]	; (1653c <i2c_write_request_callback+0x2f0>)
   164da:	701a      	strb	r2, [r3, #0]
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
   164dc:	4b0d      	ldr	r3, [pc, #52]	; (16514 <i2c_write_request_callback+0x2c8>)
   164de:	7edb      	ldrb	r3, [r3, #27]
   164e0:	105b      	asrs	r3, r3, #1
   164e2:	b2db      	uxtb	r3, r3
   164e4:	2203      	movs	r2, #3
   164e6:	4013      	ands	r3, r2
   164e8:	b2da      	uxtb	r2, r3
   164ea:	4b15      	ldr	r3, [pc, #84]	; (16540 <i2c_write_request_callback+0x2f4>)
   164ec:	701a      	strb	r2, [r3, #0]
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
   164ee:	4b09      	ldr	r3, [pc, #36]	; (16514 <i2c_write_request_callback+0x2c8>)
   164f0:	7edb      	ldrb	r3, [r3, #27]
   164f2:	2201      	movs	r2, #1
   164f4:	4013      	ands	r3, r2
   164f6:	b2da      	uxtb	r2, r3
   164f8:	4b12      	ldr	r3, [pc, #72]	; (16544 <i2c_write_request_callback+0x2f8>)
   164fa:	701a      	strb	r2, [r3, #0]
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
   164fc:	4b05      	ldr	r3, [pc, #20]	; (16514 <i2c_write_request_callback+0x2c8>)
   164fe:	7f1b      	ldrb	r3, [r3, #28]
   16500:	b259      	sxtb	r1, r3
   16502:	4b0c      	ldr	r3, [pc, #48]	; (16534 <i2c_write_request_callback+0x2e8>)
   16504:	222c      	movs	r2, #44	; 0x2c
   16506:	5499      	strb	r1, [r3, r2]
}
   16508:	46c0      	nop			; (mov r8, r8)
   1650a:	46bd      	mov	sp, r7
   1650c:	b002      	add	sp, #8
   1650e:	bd80      	pop	{r7, pc}
   16510:	20000440 	.word	0x20000440
   16514:	20000b7c 	.word	0x20000b7c
   16518:	200000fb 	.word	0x200000fb
   1651c:	200000da 	.word	0x200000da
   16520:	0000473b 	.word	0x0000473b
   16524:	20001a50 	.word	0x20001a50
   16528:	00019605 	.word	0x00019605
   1652c:	20000388 	.word	0x20000388
   16530:	200000fa 	.word	0x200000fa
   16534:	20000e1c 	.word	0x20000e1c
   16538:	2000038f 	.word	0x2000038f
   1653c:	2000038e 	.word	0x2000038e
   16540:	2000038c 	.word	0x2000038c
   16544:	20000390 	.word	0x20000390

00016548 <i2c_read_request_callback>:

uint8_t app_remote_check = 0;
void i2c_read_request_callback(struct i2c_slave_module *const module)
{
   16548:	b580      	push	{r7, lr}
   1654a:	b082      	sub	sp, #8
   1654c:	af00      	add	r7, sp, #0
   1654e:	6078      	str	r0, [r7, #4]
	I2C_slave_write_buffer[0] = AppRemoteY;
   16550:	4b10      	ldr	r3, [pc, #64]	; (16594 <i2c_read_request_callback+0x4c>)
   16552:	781a      	ldrb	r2, [r3, #0]
   16554:	4b10      	ldr	r3, [pc, #64]	; (16598 <i2c_read_request_callback+0x50>)
   16556:	701a      	strb	r2, [r3, #0]
	I2C_slave_write_buffer[1] = GET_LIMITS;
   16558:	4b10      	ldr	r3, [pc, #64]	; (1659c <i2c_read_request_callback+0x54>)
   1655a:	781a      	ldrb	r2, [r3, #0]
   1655c:	4b0e      	ldr	r3, [pc, #56]	; (16598 <i2c_read_request_callback+0x50>)
   1655e:	705a      	strb	r2, [r3, #1]
	I2C_slave_write_buffer[2] = app_remote_check;
   16560:	4b0f      	ldr	r3, [pc, #60]	; (165a0 <i2c_read_request_callback+0x58>)
   16562:	781a      	ldrb	r2, [r3, #0]
   16564:	4b0c      	ldr	r3, [pc, #48]	; (16598 <i2c_read_request_callback+0x50>)
   16566:	709a      	strb	r2, [r3, #2]

	/* Init i2c packet. */
	packet.data_length = SLAVE_WRITE_DATA_LENGTH;
   16568:	4b0e      	ldr	r3, [pc, #56]	; (165a4 <i2c_read_request_callback+0x5c>)
   1656a:	2203      	movs	r2, #3
   1656c:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_write_buffer;
   1656e:	4b0d      	ldr	r3, [pc, #52]	; (165a4 <i2c_read_request_callback+0x5c>)
   16570:	4a09      	ldr	r2, [pc, #36]	; (16598 <i2c_read_request_callback+0x50>)
   16572:	605a      	str	r2, [r3, #4]
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
   16574:	4a0b      	ldr	r2, [pc, #44]	; (165a4 <i2c_read_request_callback+0x5c>)
   16576:	687b      	ldr	r3, [r7, #4]
   16578:	0011      	movs	r1, r2
   1657a:	0018      	movs	r0, r3
   1657c:	4b0a      	ldr	r3, [pc, #40]	; (165a8 <i2c_read_request_callback+0x60>)
   1657e:	4798      	blx	r3
	NEW_REMOTE_DATA = false;
   16580:	4b0a      	ldr	r3, [pc, #40]	; (165ac <i2c_read_request_callback+0x64>)
   16582:	2200      	movs	r2, #0
   16584:	701a      	strb	r2, [r3, #0]

	GET_LIMITS = 0;
   16586:	4b05      	ldr	r3, [pc, #20]	; (1659c <i2c_read_request_callback+0x54>)
   16588:	2200      	movs	r2, #0
   1658a:	701a      	strb	r2, [r3, #0]
}
   1658c:	46c0      	nop			; (mov r8, r8)
   1658e:	46bd      	mov	sp, r7
   16590:	b002      	add	sp, #8
   16592:	bd80      	pop	{r7, pc}
   16594:	200000f9 	.word	0x200000f9
   16598:	20000e54 	.word	0x20000e54
   1659c:	200000da 	.word	0x200000da
   165a0:	20000448 	.word	0x20000448
   165a4:	20000440 	.word	0x20000440
   165a8:	00004787 	.word	0x00004787
   165ac:	20000405 	.word	0x20000405

000165b0 <configure_i2c_slave_callbacks>:


void configure_i2c_slave_callbacks(void)
{
   165b0:	b580      	push	{r7, lr}
   165b2:	af00      	add	r7, sp, #0
	/* Register and enable callback functions */
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback, I2C_SLAVE_CALLBACK_READ_REQUEST);
   165b4:	490c      	ldr	r1, [pc, #48]	; (165e8 <configure_i2c_slave_callbacks+0x38>)
   165b6:	4b0d      	ldr	r3, [pc, #52]	; (165ec <configure_i2c_slave_callbacks+0x3c>)
   165b8:	2202      	movs	r2, #2
   165ba:	0018      	movs	r0, r3
   165bc:	4b0c      	ldr	r3, [pc, #48]	; (165f0 <configure_i2c_slave_callbacks+0x40>)
   165be:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_READ_REQUEST);
   165c0:	4b0a      	ldr	r3, [pc, #40]	; (165ec <configure_i2c_slave_callbacks+0x3c>)
   165c2:	2102      	movs	r1, #2
   165c4:	0018      	movs	r0, r3
   165c6:	4b0b      	ldr	r3, [pc, #44]	; (165f4 <configure_i2c_slave_callbacks+0x44>)
   165c8:	4798      	blx	r3

	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   165ca:	490b      	ldr	r1, [pc, #44]	; (165f8 <configure_i2c_slave_callbacks+0x48>)
   165cc:	4b07      	ldr	r3, [pc, #28]	; (165ec <configure_i2c_slave_callbacks+0x3c>)
   165ce:	2203      	movs	r2, #3
   165d0:	0018      	movs	r0, r3
   165d2:	4b07      	ldr	r3, [pc, #28]	; (165f0 <configure_i2c_slave_callbacks+0x40>)
   165d4:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   165d6:	4b05      	ldr	r3, [pc, #20]	; (165ec <configure_i2c_slave_callbacks+0x3c>)
   165d8:	2103      	movs	r1, #3
   165da:	0018      	movs	r0, r3
   165dc:	4b05      	ldr	r3, [pc, #20]	; (165f4 <configure_i2c_slave_callbacks+0x44>)
   165de:	4798      	blx	r3
}
   165e0:	46c0      	nop			; (mov r8, r8)
   165e2:	46bd      	mov	sp, r7
   165e4:	bd80      	pop	{r7, pc}
   165e6:	46c0      	nop			; (mov r8, r8)
   165e8:	00016549 	.word	0x00016549
   165ec:	20001ab0 	.word	0x20001ab0
   165f0:	000046f1 	.word	0x000046f1
   165f4:	00009b15 	.word	0x00009b15
   165f8:	0001624d 	.word	0x0001624d

000165fc <configure_eeprom>:

void configure_eeprom(void)
{
   165fc:	b590      	push	{r4, r7, lr}
   165fe:	b083      	sub	sp, #12
   16600:	af00      	add	r7, sp, #0
	/* Setup EEPROM emulator service */
	enum status_code error_code = eeprom_emulator_init();
   16602:	1dfc      	adds	r4, r7, #7
   16604:	4b0a      	ldr	r3, [pc, #40]	; (16630 <configure_eeprom+0x34>)
   16606:	4798      	blx	r3
   16608:	0003      	movs	r3, r0
   1660a:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY) {
   1660c:	1dfb      	adds	r3, r7, #7
   1660e:	781b      	ldrb	r3, [r3, #0]
   16610:	2b16      	cmp	r3, #22
   16612:	d100      	bne.n	16616 <configure_eeprom+0x1a>
		while (true) {
   16614:	e7fe      	b.n	16614 <configure_eeprom+0x18>
			/* No EEPROM section has been set in the device's fuses */
		}
	}
	else if (error_code != STATUS_OK) {
   16616:	1dfb      	adds	r3, r7, #7
   16618:	781b      	ldrb	r3, [r3, #0]
   1661a:	2b00      	cmp	r3, #0
   1661c:	d003      	beq.n	16626 <configure_eeprom+0x2a>
		/* Erase the emulated EEPROM memory (assume it is unformatted or
		 * irrecoverably corrupt) */
		eeprom_emulator_erase_memory();
   1661e:	4b05      	ldr	r3, [pc, #20]	; (16634 <configure_eeprom+0x38>)
   16620:	4798      	blx	r3
		eeprom_emulator_init();
   16622:	4b03      	ldr	r3, [pc, #12]	; (16630 <configure_eeprom+0x34>)
   16624:	4798      	blx	r3
	}
}
   16626:	46c0      	nop			; (mov r8, r8)
   16628:	46bd      	mov	sp, r7
   1662a:	b003      	add	sp, #12
   1662c:	bd90      	pop	{r4, r7, pc}
   1662e:	46c0      	nop			; (mov r8, r8)
   16630:	000090e9 	.word	0x000090e9
   16634:	000091d1 	.word	0x000091d1

00016638 <main>:
	PM->APBCMASK.bit.SERCOM0_ = 1;                         // enable SERCOM0 interface
}


int main (void)
{
   16638:	b590      	push	{r4, r7, lr}
   1663a:	b087      	sub	sp, #28
   1663c:	af00      	add	r7, sp, #0
	system_init();
   1663e:	4b9c      	ldr	r3, [pc, #624]	; (168b0 <main+0x278>)
   16640:	4798      	blx	r3
	//clockInit();
	configure_tc(); // Configure millis timer
   16642:	4b9c      	ldr	r3, [pc, #624]	; (168b4 <main+0x27c>)
   16644:	4798      	blx	r3
	
	// Configure Devices
	configure_ADC();
   16646:	4b9c      	ldr	r3, [pc, #624]	; (168b8 <main+0x280>)
   16648:	4798      	blx	r3

	configure_eeprom();
   1664a:	4b9c      	ldr	r3, [pc, #624]	; (168bc <main+0x284>)
   1664c:	4798      	blx	r3
	restore_led_data();
   1664e:	4b9c      	ldr	r3, [pc, #624]	; (168c0 <main+0x288>)
   16650:	4798      	blx	r3
	restore_orientation_controls_remote_esc_lights();
   16652:	4b9c      	ldr	r3, [pc, #624]	; (168c4 <main+0x28c>)
   16654:	4798      	blx	r3
	
	// Configure The button input pin and interrupt handlers for pulse width measurement
	configure_port_pins();
   16656:	4b9c      	ldr	r3, [pc, #624]	; (168c8 <main+0x290>)
   16658:	4798      	blx	r3
	config_eic();    // Configure the external interruption
   1665a:	4b9c      	ldr	r3, [pc, #624]	; (168cc <main+0x294>)
   1665c:	4798      	blx	r3
	config_evsys();  // Configure the event system
   1665e:	4b9c      	ldr	r3, [pc, #624]	; (168d0 <main+0x298>)
   16660:	4798      	blx	r3
	config_gpio();   // Configure the dedicated pin
   16662:	4b9c      	ldr	r3, [pc, #624]	; (168d4 <main+0x29c>)
   16664:	4798      	blx	r3

	
	configure_LED_PWM();
   16666:	4b9c      	ldr	r3, [pc, #624]	; (168d8 <main+0x2a0>)
   16668:	4798      	blx	r3
	if(RGB_led_type == RGB_DIGITAL_APA102 || RGB_led_type == RGB_DIGITAL_SK9822){
   1666a:	4b9c      	ldr	r3, [pc, #624]	; (168dc <main+0x2a4>)
   1666c:	781b      	ldrb	r3, [r3, #0]
   1666e:	2b01      	cmp	r3, #1
   16670:	d003      	beq.n	1667a <main+0x42>
   16672:	4b9a      	ldr	r3, [pc, #616]	; (168dc <main+0x2a4>)
   16674:	781b      	ldrb	r3, [r3, #0]
   16676:	2b02      	cmp	r3, #2
   16678:	d101      	bne.n	1667e <main+0x46>
		configure_APA_SPI();
   1667a:	4b99      	ldr	r3, [pc, #612]	; (168e0 <main+0x2a8>)
   1667c:	4798      	blx	r3
	}

	//ERROR_LEDs(0);
#if  defined(HW_4v0) || defined(HW_4v1)
	port_pin_set_output_level(STAT_LED, true);
   1667e:	2101      	movs	r1, #1
   16680:	2023      	movs	r0, #35	; 0x23
   16682:	4b98      	ldr	r3, [pc, #608]	; (168e4 <main+0x2ac>)
   16684:	4798      	blx	r3
#endif
	configure_BLE_module(); // Blocks when no BLE module is installed
   16686:	4b98      	ldr	r3, [pc, #608]	; (168e8 <main+0x2b0>)
   16688:	4798      	blx	r3
	initIMU();
   1668a:	4b98      	ldr	r3, [pc, #608]	; (168ec <main+0x2b4>)
   1668c:	4798      	blx	r3
	restore_cal_data(true);
   1668e:	2001      	movs	r0, #1
   16690:	4b97      	ldr	r3, [pc, #604]	; (168f0 <main+0x2b8>)
   16692:	4798      	blx	r3
	if(!beginIMU()){} //ERROR_LEDs(0);
   16694:	4b97      	ldr	r3, [pc, #604]	; (168f4 <main+0x2bc>)
   16696:	4798      	blx	r3
#if  defined(HW_4v0) || defined(HW_4v1)
	port_pin_set_output_level(STAT_LED, false);
   16698:	2100      	movs	r1, #0
   1669a:	2023      	movs	r0, #35	; 0x23
   1669c:	4b91      	ldr	r3, [pc, #580]	; (168e4 <main+0x2ac>)
   1669e:	4798      	blx	r3
#endif

	initKalman(0.1, 0.1, 0.5);
   166a0:	22fc      	movs	r2, #252	; 0xfc
   166a2:	0592      	lsls	r2, r2, #22
   166a4:	4994      	ldr	r1, [pc, #592]	; (168f8 <main+0x2c0>)
   166a6:	4b94      	ldr	r3, [pc, #592]	; (168f8 <main+0x2c0>)
   166a8:	1c18      	adds	r0, r3, #0
   166aa:	4b94      	ldr	r3, [pc, #592]	; (168fc <main+0x2c4>)
   166ac:	4798      	blx	r3
	setConstBases();
   166ae:	4b94      	ldr	r3, [pc, #592]	; (16900 <main+0x2c8>)
   166b0:	4798      	blx	r3

	if(esc_comms == COMMS_I2C){
   166b2:	4b94      	ldr	r3, [pc, #592]	; (16904 <main+0x2cc>)
   166b4:	781b      	ldrb	r3, [r3, #0]
   166b6:	2b01      	cmp	r3, #1
   166b8:	d103      	bne.n	166c2 <main+0x8a>
		configure_i2c_slave();
   166ba:	4b93      	ldr	r3, [pc, #588]	; (16908 <main+0x2d0>)
   166bc:	4798      	blx	r3
		configure_i2c_slave_callbacks();
   166be:	4b93      	ldr	r3, [pc, #588]	; (1690c <main+0x2d4>)
   166c0:	4798      	blx	r3
	
	//ERROR_LEDs(1); // Uncomment for testing SAM-BA and LED output functionality
	
	////////////////////////////////////////////

	configured_comms = esc_comms;
   166c2:	4b90      	ldr	r3, [pc, #576]	; (16904 <main+0x2cc>)
   166c4:	781a      	ldrb	r2, [r3, #0]
   166c6:	4b92      	ldr	r3, [pc, #584]	; (16910 <main+0x2d8>)
   166c8:	701a      	strb	r2, [r3, #0]
	configured_RGB_led_type = RGB_led_type;
   166ca:	4b84      	ldr	r3, [pc, #528]	; (168dc <main+0x2a4>)
   166cc:	781a      	ldrb	r2, [r3, #0]
   166ce:	4b91      	ldr	r3, [pc, #580]	; (16914 <main+0x2dc>)
   166d0:	701a      	strb	r2, [r3, #0]
	current_led_num = led_num;
   166d2:	4b91      	ldr	r3, [pc, #580]	; (16918 <main+0x2e0>)
   166d4:	781a      	ldrb	r2, [r3, #0]
   166d6:	4b91      	ldr	r3, [pc, #580]	; (1691c <main+0x2e4>)
   166d8:	701a      	strb	r2, [r3, #0]

	memset(AXaverage, 0, ACCELXYsamples);
   166da:	4b91      	ldr	r3, [pc, #580]	; (16920 <main+0x2e8>)
   166dc:	2264      	movs	r2, #100	; 0x64
   166de:	2100      	movs	r1, #0
   166e0:	0018      	movs	r0, r3
   166e2:	4b90      	ldr	r3, [pc, #576]	; (16924 <main+0x2ec>)
   166e4:	4798      	blx	r3
	memset(AYaverage, 0, ACCELXYsamples);
   166e6:	4b90      	ldr	r3, [pc, #576]	; (16928 <main+0x2f0>)
   166e8:	2264      	movs	r2, #100	; 0x64
   166ea:	2100      	movs	r1, #0
   166ec:	0018      	movs	r0, r3
   166ee:	4b8d      	ldr	r3, [pc, #564]	; (16924 <main+0x2ec>)
   166f0:	4798      	blx	r3
	memset(AZaverage, 0, ACCELZsamples);
   166f2:	4b8e      	ldr	r3, [pc, #568]	; (1692c <main+0x2f4>)
   166f4:	2296      	movs	r2, #150	; 0x96
   166f6:	2100      	movs	r1, #0
   166f8:	0018      	movs	r0, r3
   166fa:	4b8a      	ldr	r3, [pc, #552]	; (16924 <main+0x2ec>)
   166fc:	4798      	blx	r3

	memset(I2C_slave_read_buffer, 0, SLAVE_READ_DATA_LENGTH);
   166fe:	4b8c      	ldr	r3, [pc, #560]	; (16930 <main+0x2f8>)
   16700:	221e      	movs	r2, #30
   16702:	2100      	movs	r1, #0
   16704:	0018      	movs	r0, r3
   16706:	4b87      	ldr	r3, [pc, #540]	; (16924 <main+0x2ec>)
   16708:	4798      	blx	r3
	memset(I2C_slave_write_buffer, 0, SLAVE_WRITE_DATA_LENGTH);
   1670a:	4b8a      	ldr	r3, [pc, #552]	; (16934 <main+0x2fc>)
   1670c:	2203      	movs	r2, #3
   1670e:	2100      	movs	r1, #0
   16710:	0018      	movs	r0, r3
   16712:	4b84      	ldr	r3, [pc, #528]	; (16924 <main+0x2ec>)
   16714:	4798      	blx	r3
	
	memset(ble_write_buffer, 0, BLE_WRITE_BUF_SIZE);
   16716:	4b88      	ldr	r3, [pc, #544]	; (16938 <main+0x300>)
   16718:	222c      	movs	r2, #44	; 0x2c
   1671a:	2100      	movs	r1, #0
   1671c:	0018      	movs	r0, r3
   1671e:	4b81      	ldr	r3, [pc, #516]	; (16924 <main+0x2ec>)
   16720:	4798      	blx	r3

	// Initialize local variables used in main
	VescRemoteX = VescRemoteY = 128;
   16722:	4b86      	ldr	r3, [pc, #536]	; (1693c <main+0x304>)
   16724:	2280      	movs	r2, #128	; 0x80
   16726:	701a      	strb	r2, [r3, #0]
   16728:	4b84      	ldr	r3, [pc, #528]	; (1693c <main+0x304>)
   1672a:	781a      	ldrb	r2, [r3, #0]
   1672c:	4b84      	ldr	r3, [pc, #528]	; (16940 <main+0x308>)
   1672e:	701a      	strb	r2, [r3, #0]

	int BLE_TX_INDEX = 0;
   16730:	2300      	movs	r3, #0
   16732:	617b      	str	r3, [r7, #20]
	uint16_t BLE_TX_DELAY = 15;
   16734:	230c      	movs	r3, #12
   16736:	18fb      	adds	r3, r7, r3
   16738:	220f      	movs	r2, #15
   1673a:	801a      	strh	r2, [r3, #0]
	uint32_t BLE_TX_TIME = 0;
   1673c:	2300      	movs	r3, #0
   1673e:	607b      	str	r3, [r7, #4]
	//uint32_t BLE_DUMMY_TIME = 0;

	mcconf_limits.max_erpm = 1000000;
   16740:	4b80      	ldr	r3, [pc, #512]	; (16944 <main+0x30c>)
   16742:	4a81      	ldr	r2, [pc, #516]	; (16948 <main+0x310>)
   16744:	619a      	str	r2, [r3, #24]
	mcconf_limits.min_erpm = -1000000;
   16746:	4b7f      	ldr	r3, [pc, #508]	; (16944 <main+0x30c>)
   16748:	4a80      	ldr	r2, [pc, #512]	; (1694c <main+0x314>)
   1674a:	615a      	str	r2, [r3, #20]
	////////////////////////////////////////////
	
	while(1)
	{
		// Reset the module if PA15 is pulled low
		if(port_pin_get_input_level(BOOT_BTN)==false)
   1674c:	200f      	movs	r0, #15
   1674e:	4b80      	ldr	r3, [pc, #512]	; (16950 <main+0x318>)
   16750:	4798      	blx	r3
   16752:	0003      	movs	r3, r0
   16754:	001a      	movs	r2, r3
   16756:	2301      	movs	r3, #1
   16758:	4053      	eors	r3, r2
   1675a:	b2db      	uxtb	r3, r3
   1675c:	2b00      	cmp	r3, #0
   1675e:	d001      	beq.n	16764 <main+0x12c>
			NVIC_SystemReset();
   16760:	4b7c      	ldr	r3, [pc, #496]	; (16954 <main+0x31c>)
   16762:	4798      	blx	r3

		// Handle BLE Communication
		read_ble_packet(); // Blocks when BLE is not configured
   16764:	4b7c      	ldr	r3, [pc, #496]	; (16958 <main+0x320>)
   16766:	4798      	blx	r3

		if(configured_comms != esc_comms)
   16768:	4b69      	ldr	r3, [pc, #420]	; (16910 <main+0x2d8>)
   1676a:	781a      	ldrb	r2, [r3, #0]
   1676c:	4b65      	ldr	r3, [pc, #404]	; (16904 <main+0x2cc>)
   1676e:	781b      	ldrb	r3, [r3, #0]
   16770:	429a      	cmp	r2, r3
   16772:	d002      	beq.n	1677a <main+0x142>
		{
			// TODO: Deconfigure old comms and configure new comms
			ERROR_LEDs(5);
   16774:	2005      	movs	r0, #5
   16776:	4b79      	ldr	r3, [pc, #484]	; (1695c <main+0x324>)
   16778:	4798      	blx	r3
		}
		
		if(configured_RGB_led_type != RGB_led_type)
   1677a:	4b66      	ldr	r3, [pc, #408]	; (16914 <main+0x2dc>)
   1677c:	781a      	ldrb	r2, [r3, #0]
   1677e:	4b57      	ldr	r3, [pc, #348]	; (168dc <main+0x2a4>)
   16780:	781b      	ldrb	r3, [r3, #0]
   16782:	429a      	cmp	r2, r3
   16784:	d002      	beq.n	1678c <main+0x154>
		{
			if(configured_RGB_led_type == RGB_ANALOG){
				
			}
			// TODO: Reconfigure for new LED type
			ERROR_LEDs(5);
   16786:	2005      	movs	r0, #5
   16788:	4b74      	ldr	r3, [pc, #464]	; (1695c <main+0x324>)
   1678a:	4798      	blx	r3
		}

		if((configured_RGB_led_type == RGB_DIGITAL_APA102 || configured_RGB_led_type == RGB_DIGITAL_SK9822) && current_led_num != led_num)
   1678c:	4b61      	ldr	r3, [pc, #388]	; (16914 <main+0x2dc>)
   1678e:	781b      	ldrb	r3, [r3, #0]
   16790:	2b01      	cmp	r3, #1
   16792:	d003      	beq.n	1679c <main+0x164>
   16794:	4b5f      	ldr	r3, [pc, #380]	; (16914 <main+0x2dc>)
   16796:	781b      	ldrb	r3, [r3, #0]
   16798:	2b02      	cmp	r3, #2
   1679a:	d164      	bne.n	16866 <main+0x22e>
   1679c:	4b5f      	ldr	r3, [pc, #380]	; (1691c <main+0x2e4>)
   1679e:	781a      	ldrb	r2, [r3, #0]
   167a0:	4b5d      	ldr	r3, [pc, #372]	; (16918 <main+0x2e0>)
   167a2:	781b      	ldrb	r3, [r3, #0]
   167a4:	429a      	cmp	r2, r3
   167a6:	d05e      	beq.n	16866 <main+0x22e>
		{
			for(uint16_t i = 0; i < MAX_LEDCOUNT; i++)
   167a8:	2312      	movs	r3, #18
   167aa:	18fb      	adds	r3, r7, r3
   167ac:	2200      	movs	r2, #0
   167ae:	801a      	strh	r2, [r3, #0]
   167b0:	e04a      	b.n	16848 <main+0x210>
			{
				L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0);
   167b2:	2312      	movs	r3, #18
   167b4:	18fb      	adds	r3, r7, r3
   167b6:	881b      	ldrh	r3, [r3, #0]
   167b8:	3301      	adds	r3, #1
   167ba:	009a      	lsls	r2, r3, #2
   167bc:	2312      	movs	r3, #18
   167be:	18fb      	adds	r3, r7, r3
   167c0:	881b      	ldrh	r3, [r3, #0]
   167c2:	3301      	adds	r3, #1
   167c4:	009b      	lsls	r3, r3, #2
   167c6:	4966      	ldr	r1, [pc, #408]	; (16960 <main+0x328>)
   167c8:	20e0      	movs	r0, #224	; 0xe0
   167ca:	54c8      	strb	r0, [r1, r3]
   167cc:	4964      	ldr	r1, [pc, #400]	; (16960 <main+0x328>)
   167ce:	5cc9      	ldrb	r1, [r1, r3]
   167d0:	4b64      	ldr	r3, [pc, #400]	; (16964 <main+0x32c>)
   167d2:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
   167d4:	2312      	movs	r3, #18
   167d6:	18fb      	adds	r3, r7, r3
   167d8:	881b      	ldrh	r3, [r3, #0]
   167da:	009b      	lsls	r3, r3, #2
   167dc:	1d5a      	adds	r2, r3, #5
   167de:	2312      	movs	r3, #18
   167e0:	18fb      	adds	r3, r7, r3
   167e2:	881b      	ldrh	r3, [r3, #0]
   167e4:	009b      	lsls	r3, r3, #2
   167e6:	3305      	adds	r3, #5
   167e8:	495d      	ldr	r1, [pc, #372]	; (16960 <main+0x328>)
   167ea:	2000      	movs	r0, #0
   167ec:	54c8      	strb	r0, [r1, r3]
   167ee:	495c      	ldr	r1, [pc, #368]	; (16960 <main+0x328>)
   167f0:	5cc9      	ldrb	r1, [r1, r3]
   167f2:	4b5c      	ldr	r3, [pc, #368]	; (16964 <main+0x32c>)
   167f4:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
   167f6:	2312      	movs	r3, #18
   167f8:	18fb      	adds	r3, r7, r3
   167fa:	881b      	ldrh	r3, [r3, #0]
   167fc:	009b      	lsls	r3, r3, #2
   167fe:	1d9a      	adds	r2, r3, #6
   16800:	2312      	movs	r3, #18
   16802:	18fb      	adds	r3, r7, r3
   16804:	881b      	ldrh	r3, [r3, #0]
   16806:	009b      	lsls	r3, r3, #2
   16808:	3306      	adds	r3, #6
   1680a:	4955      	ldr	r1, [pc, #340]	; (16960 <main+0x328>)
   1680c:	2000      	movs	r0, #0
   1680e:	54c8      	strb	r0, [r1, r3]
   16810:	4953      	ldr	r1, [pc, #332]	; (16960 <main+0x328>)
   16812:	5cc9      	ldrb	r1, [r1, r3]
   16814:	4b53      	ldr	r3, [pc, #332]	; (16964 <main+0x32c>)
   16816:	5499      	strb	r1, [r3, r2]
				L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
   16818:	2312      	movs	r3, #18
   1681a:	18fb      	adds	r3, r7, r3
   1681c:	881b      	ldrh	r3, [r3, #0]
   1681e:	009b      	lsls	r3, r3, #2
   16820:	1dda      	adds	r2, r3, #7
   16822:	2312      	movs	r3, #18
   16824:	18fb      	adds	r3, r7, r3
   16826:	881b      	ldrh	r3, [r3, #0]
   16828:	009b      	lsls	r3, r3, #2
   1682a:	3307      	adds	r3, #7
   1682c:	494c      	ldr	r1, [pc, #304]	; (16960 <main+0x328>)
   1682e:	2000      	movs	r0, #0
   16830:	54c8      	strb	r0, [r1, r3]
   16832:	494b      	ldr	r1, [pc, #300]	; (16960 <main+0x328>)
   16834:	5cc9      	ldrb	r1, [r1, r3]
   16836:	4b4b      	ldr	r3, [pc, #300]	; (16964 <main+0x32c>)
   16838:	5499      	strb	r1, [r3, r2]
			for(uint16_t i = 0; i < MAX_LEDCOUNT; i++)
   1683a:	2312      	movs	r3, #18
   1683c:	18fb      	adds	r3, r7, r3
   1683e:	881a      	ldrh	r2, [r3, #0]
   16840:	2312      	movs	r3, #18
   16842:	18fb      	adds	r3, r7, r3
   16844:	3201      	adds	r2, #1
   16846:	801a      	strh	r2, [r3, #0]
   16848:	2312      	movs	r3, #18
   1684a:	18fb      	adds	r3, r7, r3
   1684c:	881b      	ldrh	r3, [r3, #0]
   1684e:	2b47      	cmp	r3, #71	; 0x47
   16850:	d9af      	bls.n	167b2 <main+0x17a>
			}

			L_APA_write(MAX_LEDCOUNT);
   16852:	2048      	movs	r0, #72	; 0x48
   16854:	4b44      	ldr	r3, [pc, #272]	; (16968 <main+0x330>)
   16856:	4798      	blx	r3
			R_APA_write(MAX_LEDCOUNT);
   16858:	2048      	movs	r0, #72	; 0x48
   1685a:	4b44      	ldr	r3, [pc, #272]	; (1696c <main+0x334>)
   1685c:	4798      	blx	r3
			current_led_num = led_num;
   1685e:	4b2e      	ldr	r3, [pc, #184]	; (16918 <main+0x2e0>)
   16860:	781a      	ldrb	r2, [r3, #0]
   16862:	4b2e      	ldr	r3, [pc, #184]	; (1691c <main+0x2e4>)
   16864:	701a      	strb	r2, [r3, #0]

		
		////////////////////////////   Communicate with ESC   /////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		
		if(esc_comms == COMMS_UART){
   16866:	4b27      	ldr	r3, [pc, #156]	; (16904 <main+0x2cc>)
   16868:	781b      	ldrb	r3, [r3, #0]
   1686a:	2b02      	cmp	r3, #2
   1686c:	d000      	beq.n	16870 <main+0x238>
   1686e:	e093      	b.n	16998 <main+0x360>
			if(ESC_UART_CONFIGED){
   16870:	4b3f      	ldr	r3, [pc, #252]	; (16970 <main+0x338>)
   16872:	781b      	ldrb	r3, [r3, #0]
   16874:	2b00      	cmp	r3, #0
   16876:	d100      	bne.n	1687a <main+0x242>
   16878:	e08c      	b.n	16994 <main+0x35c>
				read_vesc_packet();
   1687a:	4b3e      	ldr	r3, [pc, #248]	; (16974 <main+0x33c>)
   1687c:	4798      	blx	r3
				if(ESC_FW_READ){
   1687e:	4b3e      	ldr	r3, [pc, #248]	; (16978 <main+0x340>)
   16880:	781b      	ldrb	r3, [r3, #0]
   16882:	2b00      	cmp	r3, #0
   16884:	d011      	beq.n	168aa <main+0x272>
					if(GET_LIMITS) {
   16886:	4b3d      	ldr	r3, [pc, #244]	; (1697c <main+0x344>)
   16888:	781b      	ldrb	r3, [r3, #0]
   1688a:	2b00      	cmp	r3, #0
   1688c:	d002      	beq.n	16894 <main+0x25c>
						vesc_get_mcconf();
   1688e:	4b3c      	ldr	r3, [pc, #240]	; (16980 <main+0x348>)
   16890:	4798      	blx	r3
   16892:	e081      	b.n	16998 <main+0x360>
					} else if(SEND_CONTINUOUS){
   16894:	4b3b      	ldr	r3, [pc, #236]	; (16984 <main+0x34c>)
   16896:	781b      	ldrb	r3, [r3, #0]
   16898:	2b00      	cmp	r3, #0
   1689a:	d100      	bne.n	1689e <main+0x266>
   1689c:	e07c      	b.n	16998 <main+0x360>
						READ_VESC_VALS = true;
   1689e:	4b3a      	ldr	r3, [pc, #232]	; (16988 <main+0x350>)
   168a0:	2201      	movs	r2, #1
   168a2:	701a      	strb	r2, [r3, #0]
						vesc_read_all();
   168a4:	4b39      	ldr	r3, [pc, #228]	; (1698c <main+0x354>)
   168a6:	4798      	blx	r3
   168a8:	e076      	b.n	16998 <main+0x360>
					}
				} else{
					detect_vesc_firmware();
   168aa:	4b39      	ldr	r3, [pc, #228]	; (16990 <main+0x358>)
   168ac:	4798      	blx	r3
   168ae:	e073      	b.n	16998 <main+0x360>
   168b0:	0000892d 	.word	0x0000892d
   168b4:	00009f0d 	.word	0x00009f0d
   168b8:	00016065 	.word	0x00016065
   168bc:	000165fd 	.word	0x000165fd
   168c0:	00013e55 	.word	0x00013e55
   168c4:	0001497d 	.word	0x0001497d
   168c8:	000160f5 	.word	0x000160f5
   168cc:	00012df9 	.word	0x00012df9
   168d0:	00012e71 	.word	0x00012e71
   168d4:	00012ff5 	.word	0x00012ff5
   168d8:	0000a255 	.word	0x0000a255
   168dc:	20001a4c 	.word	0x20001a4c
   168e0:	00009fbd 	.word	0x00009fbd
   168e4:	00009815 	.word	0x00009815
   168e8:	00014c9d 	.word	0x00014c9d
   168ec:	0000e541 	.word	0x0000e541
   168f0:	000145ed 	.word	0x000145ed
   168f4:	0000e661 	.word	0x0000e661
   168f8:	3dcccccd 	.word	0x3dcccccd
   168fc:	00010561 	.word	0x00010561
   16900:	0000a6ad 	.word	0x0000a6ad
   16904:	2000038a 	.word	0x2000038a
   16908:	000161e9 	.word	0x000161e9
   1690c:	000165b1 	.word	0x000165b1
   16910:	200003fd 	.word	0x200003fd
   16914:	200006a0 	.word	0x200006a0
   16918:	200000d8 	.word	0x200000d8
   1691c:	20000381 	.word	0x20000381
   16920:	20001124 	.word	0x20001124
   16924:	0001b3fb 	.word	0x0001b3fb
   16928:	2000103c 	.word	0x2000103c
   1692c:	20000e58 	.word	0x20000e58
   16930:	20000b7c 	.word	0x20000b7c
   16934:	20000e54 	.word	0x20000e54
   16938:	20000dec 	.word	0x20000dec
   1693c:	20000401 	.word	0x20000401
   16940:	20000400 	.word	0x20000400
   16944:	20001a50 	.word	0x20001a50
   16948:	000f4240 	.word	0x000f4240
   1694c:	fff0bdc0 	.word	0xfff0bdc0
   16950:	000097d1 	.word	0x000097d1
   16954:	00009531 	.word	0x00009531
   16958:	00015f11 	.word	0x00015f11
   1695c:	0000a755 	.word	0x0000a755
   16960:	20000578 	.word	0x20000578
   16964:	20001420 	.word	0x20001420
   16968:	0000a175 	.word	0x0000a175
   1696c:	0000a1e5 	.word	0x0000a1e5
   16970:	200003fb 	.word	0x200003fb
   16974:	00012971 	.word	0x00012971
   16978:	20000389 	.word	0x20000389
   1697c:	200000da 	.word	0x200000da
   16980:	00011d51 	.word	0x00011d51
   16984:	200000fa 	.word	0x200000fa
   16988:	200003f8 	.word	0x200003f8
   1698c:	000121a5 	.word	0x000121a5
   16990:	00012365 	.word	0x00012365
				}
			} else{
				detect_esc_baud_pins();
   16994:	4bd6      	ldr	r3, [pc, #856]	; (16cf0 <main+0x6b8>)
   16996:	4798      	blx	r3
		}
		
		///////////////////////////////   Process Sensor data   //////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////

		readAccel();
   16998:	4bd6      	ldr	r3, [pc, #856]	; (16cf4 <main+0x6bc>)
   1699a:	4798      	blx	r3
		readGyro();
   1699c:	4bd6      	ldr	r3, [pc, #856]	; (16cf8 <main+0x6c0>)
   1699e:	4798      	blx	r3
#ifdef HW_3v4
		readMag();
#endif

		// All IMU measurements are corrected to orient power to front and connectors up
		CorrectIMUvalues(ORIENTATION[0], ORIENTATION[1]);
   169a0:	4bd6      	ldr	r3, [pc, #856]	; (16cfc <main+0x6c4>)
   169a2:	781a      	ldrb	r2, [r3, #0]
   169a4:	4bd5      	ldr	r3, [pc, #852]	; (16cfc <main+0x6c4>)
   169a6:	785b      	ldrb	r3, [r3, #1]
   169a8:	0019      	movs	r1, r3
   169aa:	0010      	movs	r0, r2
   169ac:	4bd4      	ldr	r3, [pc, #848]	; (16d00 <main+0x6c8>)
   169ae:	4798      	blx	r3

		if(abs(axKalman - cax) < 10000)
   169b0:	4bd4      	ldr	r3, [pc, #848]	; (16d04 <main+0x6cc>)
   169b2:	681c      	ldr	r4, [r3, #0]
   169b4:	4bd4      	ldr	r3, [pc, #848]	; (16d08 <main+0x6d0>)
   169b6:	2200      	movs	r2, #0
   169b8:	5e9a      	ldrsh	r2, [r3, r2]
   169ba:	4bd4      	ldr	r3, [pc, #848]	; (16d0c <main+0x6d4>)
   169bc:	0010      	movs	r0, r2
   169be:	4798      	blx	r3
   169c0:	1c02      	adds	r2, r0, #0
   169c2:	4bd3      	ldr	r3, [pc, #844]	; (16d10 <main+0x6d8>)
   169c4:	1c11      	adds	r1, r2, #0
   169c6:	1c20      	adds	r0, r4, #0
   169c8:	4798      	blx	r3
   169ca:	1c03      	adds	r3, r0, #0
   169cc:	1c1a      	adds	r2, r3, #0
   169ce:	4bd1      	ldr	r3, [pc, #836]	; (16d14 <main+0x6dc>)
   169d0:	1c10      	adds	r0, r2, #0
   169d2:	4798      	blx	r3
   169d4:	0002      	movs	r2, r0
   169d6:	4bd0      	ldr	r3, [pc, #832]	; (16d18 <main+0x6e0>)
   169d8:	429a      	cmp	r2, r3
   169da:	db29      	blt.n	16a30 <main+0x3f8>
   169dc:	4bc9      	ldr	r3, [pc, #804]	; (16d04 <main+0x6cc>)
   169de:	681c      	ldr	r4, [r3, #0]
   169e0:	4bc9      	ldr	r3, [pc, #804]	; (16d08 <main+0x6d0>)
   169e2:	2200      	movs	r2, #0
   169e4:	5e9a      	ldrsh	r2, [r3, r2]
   169e6:	4bc9      	ldr	r3, [pc, #804]	; (16d0c <main+0x6d4>)
   169e8:	0010      	movs	r0, r2
   169ea:	4798      	blx	r3
   169ec:	1c02      	adds	r2, r0, #0
   169ee:	4bc8      	ldr	r3, [pc, #800]	; (16d10 <main+0x6d8>)
   169f0:	1c11      	adds	r1, r2, #0
   169f2:	1c20      	adds	r0, r4, #0
   169f4:	4798      	blx	r3
   169f6:	1c03      	adds	r3, r0, #0
   169f8:	1c1a      	adds	r2, r3, #0
   169fa:	4bc6      	ldr	r3, [pc, #792]	; (16d14 <main+0x6dc>)
   169fc:	1c10      	adds	r0, r2, #0
   169fe:	4798      	blx	r3
   16a00:	0002      	movs	r2, r0
   16a02:	4bc6      	ldr	r3, [pc, #792]	; (16d1c <main+0x6e4>)
   16a04:	429a      	cmp	r2, r3
   16a06:	dc13      	bgt.n	16a30 <main+0x3f8>
		{
			avgAX = averageAX();
   16a08:	4bc5      	ldr	r3, [pc, #788]	; (16d20 <main+0x6e8>)
   16a0a:	4798      	blx	r3
   16a0c:	0003      	movs	r3, r0
   16a0e:	001a      	movs	r2, r3
   16a10:	4bc4      	ldr	r3, [pc, #784]	; (16d24 <main+0x6ec>)
   16a12:	801a      	strh	r2, [r3, #0]
			axKalman = updateKalman(avgAX, ax_kalman);
   16a14:	4bc3      	ldr	r3, [pc, #780]	; (16d24 <main+0x6ec>)
   16a16:	2200      	movs	r2, #0
   16a18:	5e9a      	ldrsh	r2, [r3, r2]
   16a1a:	4bbc      	ldr	r3, [pc, #752]	; (16d0c <main+0x6d4>)
   16a1c:	0010      	movs	r0, r2
   16a1e:	4798      	blx	r3
   16a20:	1c03      	adds	r3, r0, #0
   16a22:	2100      	movs	r1, #0
   16a24:	1c18      	adds	r0, r3, #0
   16a26:	4bc0      	ldr	r3, [pc, #768]	; (16d28 <main+0x6f0>)
   16a28:	4798      	blx	r3
   16a2a:	1c02      	adds	r2, r0, #0
   16a2c:	4bb5      	ldr	r3, [pc, #724]	; (16d04 <main+0x6cc>)
   16a2e:	601a      	str	r2, [r3, #0]
		}
		avgAY = averageAY();
   16a30:	4bbe      	ldr	r3, [pc, #760]	; (16d2c <main+0x6f4>)
   16a32:	4798      	blx	r3
   16a34:	0003      	movs	r3, r0
   16a36:	001a      	movs	r2, r3
   16a38:	4bbd      	ldr	r3, [pc, #756]	; (16d30 <main+0x6f8>)
   16a3a:	801a      	strh	r2, [r3, #0]
		avgAZ = averageAZ();
   16a3c:	4bbd      	ldr	r3, [pc, #756]	; (16d34 <main+0x6fc>)
   16a3e:	4798      	blx	r3
   16a40:	0003      	movs	r3, r0
   16a42:	001a      	movs	r2, r3
   16a44:	4bbc      	ldr	r3, [pc, #752]	; (16d38 <main+0x700>)
   16a46:	801a      	strh	r2, [r3, #0]
		ayKalman = updateKalman(avgAY, ay_kalman);
   16a48:	4bb9      	ldr	r3, [pc, #740]	; (16d30 <main+0x6f8>)
   16a4a:	2200      	movs	r2, #0
   16a4c:	5e9a      	ldrsh	r2, [r3, r2]
   16a4e:	4baf      	ldr	r3, [pc, #700]	; (16d0c <main+0x6d4>)
   16a50:	0010      	movs	r0, r2
   16a52:	4798      	blx	r3
   16a54:	1c03      	adds	r3, r0, #0
   16a56:	2101      	movs	r1, #1
   16a58:	1c18      	adds	r0, r3, #0
   16a5a:	4bb3      	ldr	r3, [pc, #716]	; (16d28 <main+0x6f0>)
   16a5c:	4798      	blx	r3
   16a5e:	1c02      	adds	r2, r0, #0
   16a60:	4bb6      	ldr	r3, [pc, #728]	; (16d3c <main+0x704>)
   16a62:	601a      	str	r2, [r3, #0]
		azKalman = updateKalman(avgAZ, az_kalman);
   16a64:	4bb4      	ldr	r3, [pc, #720]	; (16d38 <main+0x700>)
   16a66:	2200      	movs	r2, #0
   16a68:	5e9a      	ldrsh	r2, [r3, r2]
   16a6a:	4ba8      	ldr	r3, [pc, #672]	; (16d0c <main+0x6d4>)
   16a6c:	0010      	movs	r0, r2
   16a6e:	4798      	blx	r3
   16a70:	1c03      	adds	r3, r0, #0
   16a72:	2102      	movs	r1, #2
   16a74:	1c18      	adds	r0, r3, #0
   16a76:	4bac      	ldr	r3, [pc, #688]	; (16d28 <main+0x6f0>)
   16a78:	4798      	blx	r3
   16a7a:	1c02      	adds	r2, r0, #0
   16a7c:	4bb0      	ldr	r3, [pc, #704]	; (16d40 <main+0x708>)
   16a7e:	601a      	str	r2, [r3, #0]
		
		avgGX = averageGX();
   16a80:	4bb0      	ldr	r3, [pc, #704]	; (16d44 <main+0x70c>)
   16a82:	4798      	blx	r3
   16a84:	1c02      	adds	r2, r0, #0
   16a86:	4bb0      	ldr	r3, [pc, #704]	; (16d48 <main+0x710>)
   16a88:	601a      	str	r2, [r3, #0]
		avgGY = averageGY();
   16a8a:	4bb0      	ldr	r3, [pc, #704]	; (16d4c <main+0x714>)
   16a8c:	4798      	blx	r3
   16a8e:	1c02      	adds	r2, r0, #0
   16a90:	4baf      	ldr	r3, [pc, #700]	; (16d50 <main+0x718>)
   16a92:	601a      	str	r2, [r3, #0]
		avgGZ = averageGZ();
   16a94:	4baf      	ldr	r3, [pc, #700]	; (16d54 <main+0x71c>)
   16a96:	4798      	blx	r3
   16a98:	1c02      	adds	r2, r0, #0
   16a9a:	4baf      	ldr	r3, [pc, #700]	; (16d58 <main+0x720>)
   16a9c:	601a      	str	r2, [r3, #0]
		// TODO: Re-implement gyro kalman
		gxKalman = avgGX;
   16a9e:	4baa      	ldr	r3, [pc, #680]	; (16d48 <main+0x710>)
   16aa0:	681a      	ldr	r2, [r3, #0]
   16aa2:	4bae      	ldr	r3, [pc, #696]	; (16d5c <main+0x724>)
   16aa4:	601a      	str	r2, [r3, #0]
		gyKalman = avgGY;
   16aa6:	4baa      	ldr	r3, [pc, #680]	; (16d50 <main+0x718>)
   16aa8:	681a      	ldr	r2, [r3, #0]
   16aaa:	4bad      	ldr	r3, [pc, #692]	; (16d60 <main+0x728>)
   16aac:	601a      	str	r2, [r3, #0]
		gzKalman = avgGZ;
   16aae:	4baa      	ldr	r3, [pc, #680]	; (16d58 <main+0x720>)
   16ab0:	681a      	ldr	r2, [r3, #0]
   16ab2:	4bac      	ldr	r3, [pc, #688]	; (16d64 <main+0x72c>)
   16ab4:	601a      	str	r2, [r3, #0]
		
		update_kalman_limits();
   16ab6:	4bac      	ldr	r3, [pc, #688]	; (16d68 <main+0x730>)
   16ab8:	4798      	blx	r3
		calculate_heading();
   16aba:	4bac      	ldr	r3, [pc, #688]	; (16d6c <main+0x734>)
   16abc:	4798      	blx	r3
		
		getLightSens(&light_sens);
   16abe:	4bac      	ldr	r3, [pc, #688]	; (16d70 <main+0x738>)
   16ac0:	0018      	movs	r0, r3
   16ac2:	4bac      	ldr	r3, [pc, #688]	; (16d74 <main+0x73c>)
   16ac4:	4798      	blx	r3
		light_sens = updateKalman(light_sens, light_kalman);
   16ac6:	4baa      	ldr	r3, [pc, #680]	; (16d70 <main+0x738>)
   16ac8:	881a      	ldrh	r2, [r3, #0]
   16aca:	4bab      	ldr	r3, [pc, #684]	; (16d78 <main+0x740>)
   16acc:	0010      	movs	r0, r2
   16ace:	4798      	blx	r3
   16ad0:	1c03      	adds	r3, r0, #0
   16ad2:	2106      	movs	r1, #6
   16ad4:	1c18      	adds	r0, r3, #0
   16ad6:	4b94      	ldr	r3, [pc, #592]	; (16d28 <main+0x6f0>)
   16ad8:	4798      	blx	r3
   16ada:	1c02      	adds	r2, r0, #0
   16adc:	4ba7      	ldr	r3, [pc, #668]	; (16d7c <main+0x744>)
   16ade:	1c10      	adds	r0, r2, #0
   16ae0:	4798      	blx	r3
   16ae2:	0003      	movs	r3, r0
   16ae4:	b29a      	uxth	r2, r3
   16ae6:	4ba2      	ldr	r3, [pc, #648]	; (16d70 <main+0x738>)
   16ae8:	801a      	strh	r2, [r3, #0]
		
		//////////////////////////////   Send Realtime Data   /////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		check_time(&BLE_TX_TIME);
   16aea:	1d3b      	adds	r3, r7, #4
   16aec:	0018      	movs	r0, r3
   16aee:	4ba4      	ldr	r3, [pc, #656]	; (16d80 <main+0x748>)
   16af0:	4798      	blx	r3
		if(SEND_CONTINUOUS && app_remote_check == 0 && ((millis()-BLE_TX_TIME) >= BLE_TX_DELAY) && usart_get_job_status(&ble_usart, USART_TRANSCEIVER_TX) != STATUS_BUSY)
   16af2:	4ba4      	ldr	r3, [pc, #656]	; (16d84 <main+0x74c>)
   16af4:	781b      	ldrb	r3, [r3, #0]
   16af6:	2b00      	cmp	r3, #0
   16af8:	d100      	bne.n	16afc <main+0x4c4>
   16afa:	e2c8      	b.n	1708e <main+0xa56>
   16afc:	4ba2      	ldr	r3, [pc, #648]	; (16d88 <main+0x750>)
   16afe:	781b      	ldrb	r3, [r3, #0]
   16b00:	2b00      	cmp	r3, #0
   16b02:	d000      	beq.n	16b06 <main+0x4ce>
   16b04:	e2c3      	b.n	1708e <main+0xa56>
   16b06:	4ba1      	ldr	r3, [pc, #644]	; (16d8c <main+0x754>)
   16b08:	4798      	blx	r3
   16b0a:	0002      	movs	r2, r0
   16b0c:	687b      	ldr	r3, [r7, #4]
   16b0e:	1ad2      	subs	r2, r2, r3
   16b10:	230c      	movs	r3, #12
   16b12:	18fb      	adds	r3, r7, r3
   16b14:	881b      	ldrh	r3, [r3, #0]
   16b16:	429a      	cmp	r2, r3
   16b18:	d200      	bcs.n	16b1c <main+0x4e4>
   16b1a:	e2b8      	b.n	1708e <main+0xa56>
   16b1c:	4b9c      	ldr	r3, [pc, #624]	; (16d90 <main+0x758>)
   16b1e:	2101      	movs	r1, #1
   16b20:	0018      	movs	r0, r3
   16b22:	4b9c      	ldr	r3, [pc, #624]	; (16d94 <main+0x75c>)
   16b24:	4798      	blx	r3
   16b26:	0003      	movs	r3, r0
   16b28:	2b05      	cmp	r3, #5
   16b2a:	d100      	bne.n	16b2e <main+0x4f6>
   16b2c:	e2af      	b.n	1708e <main+0xa56>
		{
#if  defined(HW_4v0) || defined(HW_4v1)
			port_pin_set_output_level(STAT_LED,true);
   16b2e:	2101      	movs	r1, #1
   16b30:	2023      	movs	r0, #35	; 0x23
   16b32:	4b99      	ldr	r3, [pc, #612]	; (16d98 <main+0x760>)
   16b34:	4798      	blx	r3
#endif
			switch(BLE_TX_INDEX){
   16b36:	697b      	ldr	r3, [r7, #20]
   16b38:	2b01      	cmp	r3, #1
   16b3a:	d071      	beq.n	16c20 <main+0x5e8>
   16b3c:	dc02      	bgt.n	16b44 <main+0x50c>
   16b3e:	2b00      	cmp	r3, #0
   16b40:	d007      	beq.n	16b52 <main+0x51a>
   16b42:	e294      	b.n	1706e <main+0xa36>
   16b44:	2b02      	cmp	r3, #2
   16b46:	d100      	bne.n	16b4a <main+0x512>
   16b48:	e130      	b.n	16dac <main+0x774>
   16b4a:	2b03      	cmp	r3, #3
   16b4c:	d100      	bne.n	16b50 <main+0x518>
   16b4e:	e1fb      	b.n	16f48 <main+0x910>
   16b50:	e28d      	b.n	1706e <main+0xa36>
				case 0:
					ble_write_buffer[0] = 0x11;
   16b52:	4b92      	ldr	r3, [pc, #584]	; (16d9c <main+0x764>)
   16b54:	2211      	movs	r2, #17
   16b56:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = latest_vesc_vals.avg_input_current & 0xFF;
   16b58:	4b91      	ldr	r3, [pc, #580]	; (16da0 <main+0x768>)
   16b5a:	689b      	ldr	r3, [r3, #8]
   16b5c:	b2da      	uxtb	r2, r3
   16b5e:	4b8f      	ldr	r3, [pc, #572]	; (16d9c <main+0x764>)
   16b60:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.avg_input_current & 0xFF00) >> 8;
   16b62:	4b8f      	ldr	r3, [pc, #572]	; (16da0 <main+0x768>)
   16b64:	689b      	ldr	r3, [r3, #8]
   16b66:	121b      	asrs	r3, r3, #8
   16b68:	b2da      	uxtb	r2, r3
   16b6a:	4b8c      	ldr	r3, [pc, #560]	; (16d9c <main+0x764>)
   16b6c:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x12;
   16b6e:	4b8b      	ldr	r3, [pc, #556]	; (16d9c <main+0x764>)
   16b70:	2212      	movs	r2, #18
   16b72:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = latest_vesc_vals.INPUT_VOLTAGE;
   16b74:	4b8a      	ldr	r3, [pc, #552]	; (16da0 <main+0x768>)
   16b76:	2214      	movs	r2, #20
   16b78:	5e9b      	ldrsh	r3, [r3, r2]
   16b7a:	b2da      	uxtb	r2, r3
   16b7c:	4b87      	ldr	r3, [pc, #540]	; (16d9c <main+0x764>)
   16b7e:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.INPUT_VOLTAGE & 0xFF00) >> 8;
   16b80:	4b87      	ldr	r3, [pc, #540]	; (16da0 <main+0x768>)
   16b82:	2214      	movs	r2, #20
   16b84:	5e9b      	ldrsh	r3, [r3, r2]
   16b86:	121b      	asrs	r3, r3, #8
   16b88:	b2da      	uxtb	r2, r3
   16b8a:	4b84      	ldr	r3, [pc, #528]	; (16d9c <main+0x764>)
   16b8c:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x13;
   16b8e:	4b83      	ldr	r3, [pc, #524]	; (16d9c <main+0x764>)
   16b90:	2213      	movs	r2, #19
   16b92:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = latest_vesc_vals.avg_motor_current;
   16b94:	4b82      	ldr	r3, [pc, #520]	; (16da0 <main+0x768>)
   16b96:	685b      	ldr	r3, [r3, #4]
   16b98:	b2da      	uxtb	r2, r3
   16b9a:	4b80      	ldr	r3, [pc, #512]	; (16d9c <main+0x764>)
   16b9c:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (latest_vesc_vals.avg_motor_current & 0xFF00) >> 8;
   16b9e:	4b80      	ldr	r3, [pc, #512]	; (16da0 <main+0x768>)
   16ba0:	685b      	ldr	r3, [r3, #4]
   16ba2:	121b      	asrs	r3, r3, #8
   16ba4:	b2da      	uxtb	r2, r3
   16ba6:	4b7d      	ldr	r3, [pc, #500]	; (16d9c <main+0x764>)
   16ba8:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x14;
   16baa:	4b7c      	ldr	r3, [pc, #496]	; (16d9c <main+0x764>)
   16bac:	2214      	movs	r2, #20
   16bae:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = latest_vesc_vals.temp_fet_filtered;
   16bb0:	4b7b      	ldr	r3, [pc, #492]	; (16da0 <main+0x768>)
   16bb2:	2200      	movs	r2, #0
   16bb4:	5e9b      	ldrsh	r3, [r3, r2]
   16bb6:	b2da      	uxtb	r2, r3
   16bb8:	4b78      	ldr	r3, [pc, #480]	; (16d9c <main+0x764>)
   16bba:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.temp_fet_filtered & 0xFF00) >> 8;
   16bbc:	4b78      	ldr	r3, [pc, #480]	; (16da0 <main+0x768>)
   16bbe:	2200      	movs	r2, #0
   16bc0:	5e9b      	ldrsh	r3, [r3, r2]
   16bc2:	121b      	asrs	r3, r3, #8
   16bc4:	b2da      	uxtb	r2, r3
   16bc6:	4b75      	ldr	r3, [pc, #468]	; (16d9c <main+0x764>)
   16bc8:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x15;
   16bca:	4b74      	ldr	r3, [pc, #464]	; (16d9c <main+0x764>)
   16bcc:	2215      	movs	r2, #21
   16bce:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = latest_vesc_vals.duty_cycle;
   16bd0:	4b73      	ldr	r3, [pc, #460]	; (16da0 <main+0x768>)
   16bd2:	220c      	movs	r2, #12
   16bd4:	5e9b      	ldrsh	r3, [r3, r2]
   16bd6:	b2da      	uxtb	r2, r3
   16bd8:	4b70      	ldr	r3, [pc, #448]	; (16d9c <main+0x764>)
   16bda:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.duty_cycle & 0xFF00) >> 8;
   16bdc:	4b70      	ldr	r3, [pc, #448]	; (16da0 <main+0x768>)
   16bde:	220c      	movs	r2, #12
   16be0:	5e9b      	ldrsh	r3, [r3, r2]
   16be2:	121b      	asrs	r3, r3, #8
   16be4:	b2da      	uxtb	r2, r3
   16be6:	4b6d      	ldr	r3, [pc, #436]	; (16d9c <main+0x764>)
   16be8:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x16;
   16bea:	4b6c      	ldr	r3, [pc, #432]	; (16d9c <main+0x764>)
   16bec:	2216      	movs	r2, #22
   16bee:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = (latest_vesc_vals.rpm & 0xFF);
   16bf0:	4b6b      	ldr	r3, [pc, #428]	; (16da0 <main+0x768>)
   16bf2:	691b      	ldr	r3, [r3, #16]
   16bf4:	b2da      	uxtb	r2, r3
   16bf6:	4b69      	ldr	r3, [pc, #420]	; (16d9c <main+0x764>)
   16bf8:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = (latest_vesc_vals.rpm & 0xFF00) >> 8;
   16bfa:	4b69      	ldr	r3, [pc, #420]	; (16da0 <main+0x768>)
   16bfc:	691b      	ldr	r3, [r3, #16]
   16bfe:	121b      	asrs	r3, r3, #8
   16c00:	b2da      	uxtb	r2, r3
   16c02:	4b66      	ldr	r3, [pc, #408]	; (16d9c <main+0x764>)
   16c04:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = (latest_vesc_vals.rpm & 0xFF0000) >> 16;
   16c06:	4b66      	ldr	r3, [pc, #408]	; (16da0 <main+0x768>)
   16c08:	691b      	ldr	r3, [r3, #16]
   16c0a:	141b      	asrs	r3, r3, #16
   16c0c:	b2da      	uxtb	r2, r3
   16c0e:	4b63      	ldr	r3, [pc, #396]	; (16d9c <main+0x764>)
   16c10:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   16c12:	4962      	ldr	r1, [pc, #392]	; (16d9c <main+0x764>)
   16c14:	4b5e      	ldr	r3, [pc, #376]	; (16d90 <main+0x758>)
   16c16:	2213      	movs	r2, #19
   16c18:	0018      	movs	r0, r3
   16c1a:	4b62      	ldr	r3, [pc, #392]	; (16da4 <main+0x76c>)
   16c1c:	4798      	blx	r3
					break;
   16c1e:	e226      	b.n	1706e <main+0xa36>
				case 1:
					ble_write_buffer[0] = 0x17;
   16c20:	4b5e      	ldr	r3, [pc, #376]	; (16d9c <main+0x764>)
   16c22:	2217      	movs	r2, #23
   16c24:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = (latest_vesc_vals.amp_hours & 0xFF);
   16c26:	4b5e      	ldr	r3, [pc, #376]	; (16da0 <main+0x768>)
   16c28:	699b      	ldr	r3, [r3, #24]
   16c2a:	b2da      	uxtb	r2, r3
   16c2c:	4b5b      	ldr	r3, [pc, #364]	; (16d9c <main+0x764>)
   16c2e:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.amp_hours & 0xFF00) >> 8;
   16c30:	4b5b      	ldr	r3, [pc, #364]	; (16da0 <main+0x768>)
   16c32:	699b      	ldr	r3, [r3, #24]
   16c34:	121b      	asrs	r3, r3, #8
   16c36:	b2da      	uxtb	r2, r3
   16c38:	4b58      	ldr	r3, [pc, #352]	; (16d9c <main+0x764>)
   16c3a:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = (latest_vesc_vals.amp_hours & 0xFF0000) >> 16;
   16c3c:	4b58      	ldr	r3, [pc, #352]	; (16da0 <main+0x768>)
   16c3e:	699b      	ldr	r3, [r3, #24]
   16c40:	141b      	asrs	r3, r3, #16
   16c42:	b2da      	uxtb	r2, r3
   16c44:	4b55      	ldr	r3, [pc, #340]	; (16d9c <main+0x764>)
   16c46:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = 0x18;
   16c48:	4b54      	ldr	r3, [pc, #336]	; (16d9c <main+0x764>)
   16c4a:	2218      	movs	r2, #24
   16c4c:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.amp_hours_charged & 0xFF);
   16c4e:	4b54      	ldr	r3, [pc, #336]	; (16da0 <main+0x768>)
   16c50:	69db      	ldr	r3, [r3, #28]
   16c52:	b2da      	uxtb	r2, r3
   16c54:	4b51      	ldr	r3, [pc, #324]	; (16d9c <main+0x764>)
   16c56:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (latest_vesc_vals.amp_hours_charged & 0xFF00) >> 8;
   16c58:	4b51      	ldr	r3, [pc, #324]	; (16da0 <main+0x768>)
   16c5a:	69db      	ldr	r3, [r3, #28]
   16c5c:	121b      	asrs	r3, r3, #8
   16c5e:	b2da      	uxtb	r2, r3
   16c60:	4b4e      	ldr	r3, [pc, #312]	; (16d9c <main+0x764>)
   16c62:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = (latest_vesc_vals.amp_hours_charged & 0xFF0000) >> 16;
   16c64:	4b4e      	ldr	r3, [pc, #312]	; (16da0 <main+0x768>)
   16c66:	69db      	ldr	r3, [r3, #28]
   16c68:	141b      	asrs	r3, r3, #16
   16c6a:	b2da      	uxtb	r2, r3
   16c6c:	4b4b      	ldr	r3, [pc, #300]	; (16d9c <main+0x764>)
   16c6e:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = 0x19;
   16c70:	4b4a      	ldr	r3, [pc, #296]	; (16d9c <main+0x764>)
   16c72:	2219      	movs	r2, #25
   16c74:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = (latest_vesc_vals.watt_hours & 0xFF);
   16c76:	4b4a      	ldr	r3, [pc, #296]	; (16da0 <main+0x768>)
   16c78:	6a1b      	ldr	r3, [r3, #32]
   16c7a:	b2da      	uxtb	r2, r3
   16c7c:	4b47      	ldr	r3, [pc, #284]	; (16d9c <main+0x764>)
   16c7e:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (latest_vesc_vals.watt_hours & 0xFF00) >> 8;
   16c80:	4b47      	ldr	r3, [pc, #284]	; (16da0 <main+0x768>)
   16c82:	6a1b      	ldr	r3, [r3, #32]
   16c84:	121b      	asrs	r3, r3, #8
   16c86:	b2da      	uxtb	r2, r3
   16c88:	4b44      	ldr	r3, [pc, #272]	; (16d9c <main+0x764>)
   16c8a:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.watt_hours & 0xFF0000) >> 16;
   16c8c:	4b44      	ldr	r3, [pc, #272]	; (16da0 <main+0x768>)
   16c8e:	6a1b      	ldr	r3, [r3, #32]
   16c90:	141b      	asrs	r3, r3, #16
   16c92:	b2da      	uxtb	r2, r3
   16c94:	4b41      	ldr	r3, [pc, #260]	; (16d9c <main+0x764>)
   16c96:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x1A;
   16c98:	4b40      	ldr	r3, [pc, #256]	; (16d9c <main+0x764>)
   16c9a:	221a      	movs	r2, #26
   16c9c:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (latest_vesc_vals.watt_hours_charged & 0xFF);
   16c9e:	4b40      	ldr	r3, [pc, #256]	; (16da0 <main+0x768>)
   16ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16ca2:	b2da      	uxtb	r2, r3
   16ca4:	4b3d      	ldr	r3, [pc, #244]	; (16d9c <main+0x764>)
   16ca6:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.watt_hours_charged & 0xFF00) >> 8;
   16ca8:	4b3d      	ldr	r3, [pc, #244]	; (16da0 <main+0x768>)
   16caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16cac:	121b      	asrs	r3, r3, #8
   16cae:	b2da      	uxtb	r2, r3
   16cb0:	4b3a      	ldr	r3, [pc, #232]	; (16d9c <main+0x764>)
   16cb2:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = (latest_vesc_vals.watt_hours_charged & 0xFF0000) >> 16;
   16cb4:	4b3a      	ldr	r3, [pc, #232]	; (16da0 <main+0x768>)
   16cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16cb8:	141b      	asrs	r3, r3, #16
   16cba:	b2da      	uxtb	r2, r3
   16cbc:	4b37      	ldr	r3, [pc, #220]	; (16d9c <main+0x764>)
   16cbe:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x1B;
   16cc0:	4b36      	ldr	r3, [pc, #216]	; (16d9c <main+0x764>)
   16cc2:	221b      	movs	r2, #27
   16cc4:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = latest_vesc_vals.fault;
   16cc6:	4b36      	ldr	r3, [pc, #216]	; (16da0 <main+0x768>)
   16cc8:	222c      	movs	r2, #44	; 0x2c
   16cca:	569b      	ldrsb	r3, [r3, r2]
   16ccc:	b2da      	uxtb	r2, r3
   16cce:	4b33      	ldr	r3, [pc, #204]	; (16d9c <main+0x764>)
   16cd0:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0x21;
   16cd2:	4b32      	ldr	r3, [pc, #200]	; (16d9c <main+0x764>)
   16cd4:	2221      	movs	r2, #33	; 0x21
   16cd6:	749a      	strb	r2, [r3, #18]
					ble_write_buffer[19] = remote_x;
   16cd8:	4b33      	ldr	r3, [pc, #204]	; (16da8 <main+0x770>)
   16cda:	781a      	ldrb	r2, [r3, #0]
   16cdc:	4b2f      	ldr	r3, [pc, #188]	; (16d9c <main+0x764>)
   16cde:	74da      	strb	r2, [r3, #19]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 20);
   16ce0:	492e      	ldr	r1, [pc, #184]	; (16d9c <main+0x764>)
   16ce2:	4b2b      	ldr	r3, [pc, #172]	; (16d90 <main+0x758>)
   16ce4:	2214      	movs	r2, #20
   16ce6:	0018      	movs	r0, r3
   16ce8:	4b2e      	ldr	r3, [pc, #184]	; (16da4 <main+0x76c>)
   16cea:	4798      	blx	r3
					break;
   16cec:	e1bf      	b.n	1706e <main+0xa36>
   16cee:	46c0      	nop			; (mov r8, r8)
   16cf0:	00012b49 	.word	0x00012b49
   16cf4:	0000ebdd 	.word	0x0000ebdd
   16cf8:	0000eca9 	.word	0x0000eca9
   16cfc:	200000e0 	.word	0x200000e0
   16d00:	0000f361 	.word	0x0000f361
   16d04:	20000338 	.word	0x20000338
   16d08:	200003bc 	.word	0x200003bc
   16d0c:	00019565 	.word	0x00019565
   16d10:	000191ed 	.word	0x000191ed
   16d14:	00019525 	.word	0x00019525
   16d18:	ffffd8f1 	.word	0xffffd8f1
   16d1c:	0000270f 	.word	0x0000270f
   16d20:	000101f5 	.word	0x000101f5
   16d24:	20000324 	.word	0x20000324
   16d28:	00010639 	.word	0x00010639
   16d2c:	00010271 	.word	0x00010271
   16d30:	20000326 	.word	0x20000326
   16d34:	000102ed 	.word	0x000102ed
   16d38:	20000328 	.word	0x20000328
   16d3c:	2000033c 	.word	0x2000033c
   16d40:	20000340 	.word	0x20000340
   16d44:	00010369 	.word	0x00010369
   16d48:	2000032c 	.word	0x2000032c
   16d4c:	00010411 	.word	0x00010411
   16d50:	20000330 	.word	0x20000330
   16d54:	000104b9 	.word	0x000104b9
   16d58:	20000334 	.word	0x20000334
   16d5c:	20000344 	.word	0x20000344
   16d60:	20000348 	.word	0x20000348
   16d64:	2000034c 	.word	0x2000034c
   16d68:	00010055 	.word	0x00010055
   16d6c:	0000fef5 	.word	0x0000fef5
   16d70:	20000308 	.word	0x20000308
   16d74:	0000dee1 	.word	0x0000dee1
   16d78:	00019605 	.word	0x00019605
   16d7c:	0001883d 	.word	0x0001883d
   16d80:	00009f95 	.word	0x00009f95
   16d84:	200000fa 	.word	0x200000fa
   16d88:	20000448 	.word	0x20000448
   16d8c:	00009f65 	.word	0x00009f65
   16d90:	200006ac 	.word	0x200006ac
   16d94:	000066ff 	.word	0x000066ff
   16d98:	00009815 	.word	0x00009815
   16d9c:	20000dec 	.word	0x20000dec
   16da0:	20000e1c 	.word	0x20000e1c
   16da4:	00006629 	.word	0x00006629
   16da8:	2000038f 	.word	0x2000038f
				case 2:
					ble_write_buffer[0] = 0x2E;
   16dac:	4b58      	ldr	r3, [pc, #352]	; (16f10 <main+0x8d8>)
   16dae:	222e      	movs	r2, #46	; 0x2e
   16db0:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(heading*10) & 0xFF); // Heading
   16db2:	4b58      	ldr	r3, [pc, #352]	; (16f14 <main+0x8dc>)
   16db4:	681a      	ldr	r2, [r3, #0]
   16db6:	4b58      	ldr	r3, [pc, #352]	; (16f18 <main+0x8e0>)
   16db8:	4958      	ldr	r1, [pc, #352]	; (16f1c <main+0x8e4>)
   16dba:	1c10      	adds	r0, r2, #0
   16dbc:	4798      	blx	r3
   16dbe:	1c03      	adds	r3, r0, #0
   16dc0:	1c1a      	adds	r2, r3, #0
   16dc2:	4b57      	ldr	r3, [pc, #348]	; (16f20 <main+0x8e8>)
   16dc4:	1c10      	adds	r0, r2, #0
   16dc6:	4798      	blx	r3
   16dc8:	0003      	movs	r3, r0
   16dca:	b29b      	uxth	r3, r3
   16dcc:	b2da      	uxtb	r2, r3
   16dce:	4b50      	ldr	r3, [pc, #320]	; (16f10 <main+0x8d8>)
   16dd0:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(heading*10) & 0xFF00) >> 8; // Heading
   16dd2:	4b50      	ldr	r3, [pc, #320]	; (16f14 <main+0x8dc>)
   16dd4:	681a      	ldr	r2, [r3, #0]
   16dd6:	4b50      	ldr	r3, [pc, #320]	; (16f18 <main+0x8e0>)
   16dd8:	4950      	ldr	r1, [pc, #320]	; (16f1c <main+0x8e4>)
   16dda:	1c10      	adds	r0, r2, #0
   16ddc:	4798      	blx	r3
   16dde:	1c03      	adds	r3, r0, #0
   16de0:	1c1a      	adds	r2, r3, #0
   16de2:	4b4f      	ldr	r3, [pc, #316]	; (16f20 <main+0x8e8>)
   16de4:	1c10      	adds	r0, r2, #0
   16de6:	4798      	blx	r3
   16de8:	0003      	movs	r3, r0
   16dea:	b29b      	uxth	r3, r3
   16dec:	0a1b      	lsrs	r3, r3, #8
   16dee:	b29b      	uxth	r3, r3
   16df0:	b2da      	uxtb	r2, r3
   16df2:	4b47      	ldr	r3, [pc, #284]	; (16f10 <main+0x8d8>)
   16df4:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x22;
   16df6:	4b46      	ldr	r3, [pc, #280]	; (16f10 <main+0x8d8>)
   16df8:	2222      	movs	r2, #34	; 0x22
   16dfa:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = remote_y;
   16dfc:	4b49      	ldr	r3, [pc, #292]	; (16f24 <main+0x8ec>)
   16dfe:	781a      	ldrb	r2, [r3, #0]
   16e00:	4b43      	ldr	r3, [pc, #268]	; (16f10 <main+0x8d8>)
   16e02:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = 0x23;
   16e04:	4b42      	ldr	r3, [pc, #264]	; (16f10 <main+0x8d8>)
   16e06:	2223      	movs	r2, #35	; 0x23
   16e08:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (remote_btn_state | (REMOTE_TYPE << 1));
   16e0a:	4b47      	ldr	r3, [pc, #284]	; (16f28 <main+0x8f0>)
   16e0c:	781b      	ldrb	r3, [r3, #0]
   16e0e:	005b      	lsls	r3, r3, #1
   16e10:	b25a      	sxtb	r2, r3
   16e12:	4b46      	ldr	r3, [pc, #280]	; (16f2c <main+0x8f4>)
   16e14:	781b      	ldrb	r3, [r3, #0]
   16e16:	b25b      	sxtb	r3, r3
   16e18:	4313      	orrs	r3, r2
   16e1a:	b25b      	sxtb	r3, r3
   16e1c:	b2da      	uxtb	r2, r3
   16e1e:	4b3c      	ldr	r3, [pc, #240]	; (16f10 <main+0x8d8>)
   16e20:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = 0x24;
   16e22:	4b3b      	ldr	r3, [pc, #236]	; (16f10 <main+0x8d8>)
   16e24:	2224      	movs	r2, #36	; 0x24
   16e26:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = ((uint16_t)axKalman & 0xFF); // Accel X
   16e28:	4b41      	ldr	r3, [pc, #260]	; (16f30 <main+0x8f8>)
   16e2a:	681a      	ldr	r2, [r3, #0]
   16e2c:	4b3c      	ldr	r3, [pc, #240]	; (16f20 <main+0x8e8>)
   16e2e:	1c10      	adds	r0, r2, #0
   16e30:	4798      	blx	r3
   16e32:	0003      	movs	r3, r0
   16e34:	b29b      	uxth	r3, r3
   16e36:	b2da      	uxtb	r2, r3
   16e38:	4b35      	ldr	r3, [pc, #212]	; (16f10 <main+0x8d8>)
   16e3a:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = ((uint16_t)axKalman & 0xFF00) >> 8; // Accel X
   16e3c:	4b3c      	ldr	r3, [pc, #240]	; (16f30 <main+0x8f8>)
   16e3e:	681a      	ldr	r2, [r3, #0]
   16e40:	4b37      	ldr	r3, [pc, #220]	; (16f20 <main+0x8e8>)
   16e42:	1c10      	adds	r0, r2, #0
   16e44:	4798      	blx	r3
   16e46:	0003      	movs	r3, r0
   16e48:	b29b      	uxth	r3, r3
   16e4a:	0a1b      	lsrs	r3, r3, #8
   16e4c:	b29b      	uxth	r3, r3
   16e4e:	b2da      	uxtb	r2, r3
   16e50:	4b2f      	ldr	r3, [pc, #188]	; (16f10 <main+0x8d8>)
   16e52:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = 0x25;
   16e54:	4b2e      	ldr	r3, [pc, #184]	; (16f10 <main+0x8d8>)
   16e56:	2225      	movs	r2, #37	; 0x25
   16e58:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = ((uint16_t)ayKalman & 0xFF); // Accel Y
   16e5a:	4b36      	ldr	r3, [pc, #216]	; (16f34 <main+0x8fc>)
   16e5c:	681a      	ldr	r2, [r3, #0]
   16e5e:	4b30      	ldr	r3, [pc, #192]	; (16f20 <main+0x8e8>)
   16e60:	1c10      	adds	r0, r2, #0
   16e62:	4798      	blx	r3
   16e64:	0003      	movs	r3, r0
   16e66:	b29b      	uxth	r3, r3
   16e68:	b2da      	uxtb	r2, r3
   16e6a:	4b29      	ldr	r3, [pc, #164]	; (16f10 <main+0x8d8>)
   16e6c:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = ((uint16_t)ayKalman & 0xFF00) >> 8; // Accel Y
   16e6e:	4b31      	ldr	r3, [pc, #196]	; (16f34 <main+0x8fc>)
   16e70:	681a      	ldr	r2, [r3, #0]
   16e72:	4b2b      	ldr	r3, [pc, #172]	; (16f20 <main+0x8e8>)
   16e74:	1c10      	adds	r0, r2, #0
   16e76:	4798      	blx	r3
   16e78:	0003      	movs	r3, r0
   16e7a:	b29b      	uxth	r3, r3
   16e7c:	0a1b      	lsrs	r3, r3, #8
   16e7e:	b29b      	uxth	r3, r3
   16e80:	b2da      	uxtb	r2, r3
   16e82:	4b23      	ldr	r3, [pc, #140]	; (16f10 <main+0x8d8>)
   16e84:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = 0x26;
   16e86:	4b22      	ldr	r3, [pc, #136]	; (16f10 <main+0x8d8>)
   16e88:	2226      	movs	r2, #38	; 0x26
   16e8a:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = ((uint16_t)azKalman & 0xFF); // Accel Z
   16e8c:	4b2a      	ldr	r3, [pc, #168]	; (16f38 <main+0x900>)
   16e8e:	681a      	ldr	r2, [r3, #0]
   16e90:	4b23      	ldr	r3, [pc, #140]	; (16f20 <main+0x8e8>)
   16e92:	1c10      	adds	r0, r2, #0
   16e94:	4798      	blx	r3
   16e96:	0003      	movs	r3, r0
   16e98:	b29b      	uxth	r3, r3
   16e9a:	b2da      	uxtb	r2, r3
   16e9c:	4b1c      	ldr	r3, [pc, #112]	; (16f10 <main+0x8d8>)
   16e9e:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = ((uint16_t)azKalman & 0xFF00) >> 8; // Accel Z
   16ea0:	4b25      	ldr	r3, [pc, #148]	; (16f38 <main+0x900>)
   16ea2:	681a      	ldr	r2, [r3, #0]
   16ea4:	4b1e      	ldr	r3, [pc, #120]	; (16f20 <main+0x8e8>)
   16ea6:	1c10      	adds	r0, r2, #0
   16ea8:	4798      	blx	r3
   16eaa:	0003      	movs	r3, r0
   16eac:	b29b      	uxth	r3, r3
   16eae:	0a1b      	lsrs	r3, r3, #8
   16eb0:	b29b      	uxth	r3, r3
   16eb2:	b2da      	uxtb	r2, r3
   16eb4:	4b16      	ldr	r3, [pc, #88]	; (16f10 <main+0x8d8>)
   16eb6:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x27;
   16eb8:	4b15      	ldr	r3, [pc, #84]	; (16f10 <main+0x8d8>)
   16eba:	2227      	movs	r2, #39	; 0x27
   16ebc:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((uint16_t)(gxKalman*10) & 0xFF); // Gyro X
   16ebe:	4b1f      	ldr	r3, [pc, #124]	; (16f3c <main+0x904>)
   16ec0:	681a      	ldr	r2, [r3, #0]
   16ec2:	4b15      	ldr	r3, [pc, #84]	; (16f18 <main+0x8e0>)
   16ec4:	4915      	ldr	r1, [pc, #84]	; (16f1c <main+0x8e4>)
   16ec6:	1c10      	adds	r0, r2, #0
   16ec8:	4798      	blx	r3
   16eca:	1c03      	adds	r3, r0, #0
   16ecc:	1c1a      	adds	r2, r3, #0
   16ece:	4b14      	ldr	r3, [pc, #80]	; (16f20 <main+0x8e8>)
   16ed0:	1c10      	adds	r0, r2, #0
   16ed2:	4798      	blx	r3
   16ed4:	0003      	movs	r3, r0
   16ed6:	b29b      	uxth	r3, r3
   16ed8:	b2da      	uxtb	r2, r3
   16eda:	4b0d      	ldr	r3, [pc, #52]	; (16f10 <main+0x8d8>)
   16edc:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = ((uint16_t)(gxKalman*10) & 0xFF00) >> 8; // Gyro X
   16ede:	4b17      	ldr	r3, [pc, #92]	; (16f3c <main+0x904>)
   16ee0:	681a      	ldr	r2, [r3, #0]
   16ee2:	4b0d      	ldr	r3, [pc, #52]	; (16f18 <main+0x8e0>)
   16ee4:	490d      	ldr	r1, [pc, #52]	; (16f1c <main+0x8e4>)
   16ee6:	1c10      	adds	r0, r2, #0
   16ee8:	4798      	blx	r3
   16eea:	1c03      	adds	r3, r0, #0
   16eec:	1c1a      	adds	r2, r3, #0
   16eee:	4b0c      	ldr	r3, [pc, #48]	; (16f20 <main+0x8e8>)
   16ef0:	1c10      	adds	r0, r2, #0
   16ef2:	4798      	blx	r3
   16ef4:	0003      	movs	r3, r0
   16ef6:	b29b      	uxth	r3, r3
   16ef8:	0a1b      	lsrs	r3, r3, #8
   16efa:	b29b      	uxth	r3, r3
   16efc:	b2da      	uxtb	r2, r3
   16efe:	4b04      	ldr	r3, [pc, #16]	; (16f10 <main+0x8d8>)
   16f00:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   16f02:	4903      	ldr	r1, [pc, #12]	; (16f10 <main+0x8d8>)
   16f04:	4b0e      	ldr	r3, [pc, #56]	; (16f40 <main+0x908>)
   16f06:	2213      	movs	r2, #19
   16f08:	0018      	movs	r0, r3
   16f0a:	4b0e      	ldr	r3, [pc, #56]	; (16f44 <main+0x90c>)
   16f0c:	4798      	blx	r3
					break;
   16f0e:	e0ae      	b.n	1706e <main+0xa36>
   16f10:	20000dec 	.word	0x20000dec
   16f14:	20000350 	.word	0x20000350
   16f18:	00018fad 	.word	0x00018fad
   16f1c:	41200000 	.word	0x41200000
   16f20:	0001883d 	.word	0x0001883d
   16f24:	2000038e 	.word	0x2000038e
   16f28:	200000f8 	.word	0x200000f8
   16f2c:	20000390 	.word	0x20000390
   16f30:	20000338 	.word	0x20000338
   16f34:	2000033c 	.word	0x2000033c
   16f38:	20000340 	.word	0x20000340
   16f3c:	20000344 	.word	0x20000344
   16f40:	200006ac 	.word	0x200006ac
   16f44:	00006629 	.word	0x00006629
				case 3:
					ble_write_buffer[0] = 0x28;
   16f48:	4bf3      	ldr	r3, [pc, #972]	; (17318 <main+0xce0>)
   16f4a:	2228      	movs	r2, #40	; 0x28
   16f4c:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(gyKalman*10) & 0xFF); // Gyro Y
   16f4e:	4bf3      	ldr	r3, [pc, #972]	; (1731c <main+0xce4>)
   16f50:	681a      	ldr	r2, [r3, #0]
   16f52:	4bf3      	ldr	r3, [pc, #972]	; (17320 <main+0xce8>)
   16f54:	49f3      	ldr	r1, [pc, #972]	; (17324 <main+0xcec>)
   16f56:	1c10      	adds	r0, r2, #0
   16f58:	4798      	blx	r3
   16f5a:	1c03      	adds	r3, r0, #0
   16f5c:	1c1a      	adds	r2, r3, #0
   16f5e:	4bf2      	ldr	r3, [pc, #968]	; (17328 <main+0xcf0>)
   16f60:	1c10      	adds	r0, r2, #0
   16f62:	4798      	blx	r3
   16f64:	0003      	movs	r3, r0
   16f66:	b29b      	uxth	r3, r3
   16f68:	b2da      	uxtb	r2, r3
   16f6a:	4beb      	ldr	r3, [pc, #940]	; (17318 <main+0xce0>)
   16f6c:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(gyKalman*10) & 0xFF00) >> 8; // Gyro Y
   16f6e:	4beb      	ldr	r3, [pc, #940]	; (1731c <main+0xce4>)
   16f70:	681a      	ldr	r2, [r3, #0]
   16f72:	4beb      	ldr	r3, [pc, #940]	; (17320 <main+0xce8>)
   16f74:	49eb      	ldr	r1, [pc, #940]	; (17324 <main+0xcec>)
   16f76:	1c10      	adds	r0, r2, #0
   16f78:	4798      	blx	r3
   16f7a:	1c03      	adds	r3, r0, #0
   16f7c:	1c1a      	adds	r2, r3, #0
   16f7e:	4bea      	ldr	r3, [pc, #936]	; (17328 <main+0xcf0>)
   16f80:	1c10      	adds	r0, r2, #0
   16f82:	4798      	blx	r3
   16f84:	0003      	movs	r3, r0
   16f86:	b29b      	uxth	r3, r3
   16f88:	0a1b      	lsrs	r3, r3, #8
   16f8a:	b29b      	uxth	r3, r3
   16f8c:	b2da      	uxtb	r2, r3
   16f8e:	4be2      	ldr	r3, [pc, #904]	; (17318 <main+0xce0>)
   16f90:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x29;
   16f92:	4be1      	ldr	r3, [pc, #900]	; (17318 <main+0xce0>)
   16f94:	2229      	movs	r2, #41	; 0x29
   16f96:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = ((uint16_t)(gzKalman*10) & 0xFF); // Gyro Z
   16f98:	4be4      	ldr	r3, [pc, #912]	; (1732c <main+0xcf4>)
   16f9a:	681a      	ldr	r2, [r3, #0]
   16f9c:	4be0      	ldr	r3, [pc, #896]	; (17320 <main+0xce8>)
   16f9e:	49e1      	ldr	r1, [pc, #900]	; (17324 <main+0xcec>)
   16fa0:	1c10      	adds	r0, r2, #0
   16fa2:	4798      	blx	r3
   16fa4:	1c03      	adds	r3, r0, #0
   16fa6:	1c1a      	adds	r2, r3, #0
   16fa8:	4bdf      	ldr	r3, [pc, #892]	; (17328 <main+0xcf0>)
   16faa:	1c10      	adds	r0, r2, #0
   16fac:	4798      	blx	r3
   16fae:	0003      	movs	r3, r0
   16fb0:	b29b      	uxth	r3, r3
   16fb2:	b2da      	uxtb	r2, r3
   16fb4:	4bd8      	ldr	r3, [pc, #864]	; (17318 <main+0xce0>)
   16fb6:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = ((uint16_t)(gzKalman*10) & 0xFF00) >> 8; // Gyro Z
   16fb8:	4bdc      	ldr	r3, [pc, #880]	; (1732c <main+0xcf4>)
   16fba:	681a      	ldr	r2, [r3, #0]
   16fbc:	4bd8      	ldr	r3, [pc, #864]	; (17320 <main+0xce8>)
   16fbe:	49d9      	ldr	r1, [pc, #868]	; (17324 <main+0xcec>)
   16fc0:	1c10      	adds	r0, r2, #0
   16fc2:	4798      	blx	r3
   16fc4:	1c03      	adds	r3, r0, #0
   16fc6:	1c1a      	adds	r2, r3, #0
   16fc8:	4bd7      	ldr	r3, [pc, #860]	; (17328 <main+0xcf0>)
   16fca:	1c10      	adds	r0, r2, #0
   16fcc:	4798      	blx	r3
   16fce:	0003      	movs	r3, r0
   16fd0:	b29b      	uxth	r3, r3
   16fd2:	0a1b      	lsrs	r3, r3, #8
   16fd4:	b29b      	uxth	r3, r3
   16fd6:	b2da      	uxtb	r2, r3
   16fd8:	4bcf      	ldr	r3, [pc, #828]	; (17318 <main+0xce0>)
   16fda:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x2A;
   16fdc:	4bce      	ldr	r3, [pc, #824]	; (17318 <main+0xce0>)
   16fde:	222a      	movs	r2, #42	; 0x2a
   16fe0:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = ((mx) & 0xFF); // Compass X
   16fe2:	4bd3      	ldr	r3, [pc, #844]	; (17330 <main+0xcf8>)
   16fe4:	2200      	movs	r2, #0
   16fe6:	5e9b      	ldrsh	r3, [r3, r2]
   16fe8:	b2da      	uxtb	r2, r3
   16fea:	4bcb      	ldr	r3, [pc, #812]	; (17318 <main+0xce0>)
   16fec:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (mx & 0xFF00) >> 8; // Compass X
   16fee:	4bd0      	ldr	r3, [pc, #832]	; (17330 <main+0xcf8>)
   16ff0:	2200      	movs	r2, #0
   16ff2:	5e9b      	ldrsh	r3, [r3, r2]
   16ff4:	121b      	asrs	r3, r3, #8
   16ff6:	b2da      	uxtb	r2, r3
   16ff8:	4bc7      	ldr	r3, [pc, #796]	; (17318 <main+0xce0>)
   16ffa:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x2B;
   16ffc:	4bc6      	ldr	r3, [pc, #792]	; (17318 <main+0xce0>)
   16ffe:	222b      	movs	r2, #43	; 0x2b
   17000:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (my & 0xFF); // Compass Y
   17002:	4bcc      	ldr	r3, [pc, #816]	; (17334 <main+0xcfc>)
   17004:	2200      	movs	r2, #0
   17006:	5e9b      	ldrsh	r3, [r3, r2]
   17008:	b2da      	uxtb	r2, r3
   1700a:	4bc3      	ldr	r3, [pc, #780]	; (17318 <main+0xce0>)
   1700c:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (my & 0xFF00) >> 8; // Compass Y
   1700e:	4bc9      	ldr	r3, [pc, #804]	; (17334 <main+0xcfc>)
   17010:	2200      	movs	r2, #0
   17012:	5e9b      	ldrsh	r3, [r3, r2]
   17014:	121b      	asrs	r3, r3, #8
   17016:	b2da      	uxtb	r2, r3
   17018:	4bbf      	ldr	r3, [pc, #764]	; (17318 <main+0xce0>)
   1701a:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x2C;
   1701c:	4bbe      	ldr	r3, [pc, #760]	; (17318 <main+0xce0>)
   1701e:	222c      	movs	r2, #44	; 0x2c
   17020:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (mz & 0xFF); // Compass Z
   17022:	4bc5      	ldr	r3, [pc, #788]	; (17338 <main+0xd00>)
   17024:	2200      	movs	r2, #0
   17026:	5e9b      	ldrsh	r3, [r3, r2]
   17028:	b2da      	uxtb	r2, r3
   1702a:	4bbb      	ldr	r3, [pc, #748]	; (17318 <main+0xce0>)
   1702c:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (mz & 0xFF00) >> 8; // Compass Z
   1702e:	4bc2      	ldr	r3, [pc, #776]	; (17338 <main+0xd00>)
   17030:	2200      	movs	r2, #0
   17032:	5e9b      	ldrsh	r3, [r3, r2]
   17034:	121b      	asrs	r3, r3, #8
   17036:	b2da      	uxtb	r2, r3
   17038:	4bb7      	ldr	r3, [pc, #732]	; (17318 <main+0xce0>)
   1703a:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x2D;
   1703c:	4bb6      	ldr	r3, [pc, #728]	; (17318 <main+0xce0>)
   1703e:	222d      	movs	r2, #45	; 0x2d
   17040:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = ((int)(light_sens) & 0xFF); // Light Sensor
   17042:	4bbe      	ldr	r3, [pc, #760]	; (1733c <main+0xd04>)
   17044:	881b      	ldrh	r3, [r3, #0]
   17046:	b2da      	uxtb	r2, r3
   17048:	4bb3      	ldr	r3, [pc, #716]	; (17318 <main+0xce0>)
   1704a:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((int)(light_sens) & 0xFF00) >> 8; // Light Sensor
   1704c:	4bbb      	ldr	r3, [pc, #748]	; (1733c <main+0xd04>)
   1704e:	881b      	ldrh	r3, [r3, #0]
   17050:	0a1b      	lsrs	r3, r3, #8
   17052:	b29b      	uxth	r3, r3
   17054:	b2da      	uxtb	r2, r3
   17056:	4bb0      	ldr	r3, [pc, #704]	; (17318 <main+0xce0>)
   17058:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0xDE;
   1705a:	4baf      	ldr	r3, [pc, #700]	; (17318 <main+0xce0>)
   1705c:	22de      	movs	r2, #222	; 0xde
   1705e:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_job(&ble_usart, ble_write_buffer, 19);
   17060:	49ad      	ldr	r1, [pc, #692]	; (17318 <main+0xce0>)
   17062:	4bb7      	ldr	r3, [pc, #732]	; (17340 <main+0xd08>)
   17064:	2213      	movs	r2, #19
   17066:	0018      	movs	r0, r3
   17068:	4bb6      	ldr	r3, [pc, #728]	; (17344 <main+0xd0c>)
   1706a:	4798      	blx	r3
					break;
   1706c:	46c0      	nop			; (mov r8, r8)
		}
#if  defined(HW_4v0) || defined(HW_4v1)
			port_pin_set_output_level(STAT_LED,false);
   1706e:	2100      	movs	r1, #0
   17070:	2023      	movs	r0, #35	; 0x23
   17072:	4bb5      	ldr	r3, [pc, #724]	; (17348 <main+0xd10>)
   17074:	4798      	blx	r3
#endif
			BLE_TX_INDEX++;
   17076:	697b      	ldr	r3, [r7, #20]
   17078:	3301      	adds	r3, #1
   1707a:	617b      	str	r3, [r7, #20]
			if(BLE_TX_INDEX > 3)
   1707c:	697b      	ldr	r3, [r7, #20]
   1707e:	2b03      	cmp	r3, #3
   17080:	dd01      	ble.n	17086 <main+0xa4e>
				BLE_TX_INDEX = 0;
   17082:	2300      	movs	r3, #0
   17084:	617b      	str	r3, [r7, #20]

			BLE_TX_TIME = millis(); // Placed at end of transmit to provide accurate message timing
   17086:	4bb1      	ldr	r3, [pc, #708]	; (1734c <main+0xd14>)
   17088:	4798      	blx	r3
   1708a:	0003      	movs	r3, r0
   1708c:	607b      	str	r3, [r7, #4]
		}

		
		////////////////////////////   Handle Limits Request   ////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LIMITS)
   1708e:	4bb0      	ldr	r3, [pc, #704]	; (17350 <main+0xd18>)
   17090:	781b      	ldrb	r3, [r3, #0]
   17092:	2b00      	cmp	r3, #0
   17094:	d100      	bne.n	17098 <main+0xa60>
   17096:	e12d      	b.n	172f4 <main+0xcbc>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17098:	46c0      	nop			; (mov r8, r8)
   1709a:	4bac      	ldr	r3, [pc, #688]	; (1734c <main+0xd14>)
   1709c:	4798      	blx	r3
   1709e:	0002      	movs	r2, r0
   170a0:	687b      	ldr	r3, [r7, #4]
   170a2:	1ad3      	subs	r3, r2, r3
   170a4:	220c      	movs	r2, #12
   170a6:	18ba      	adds	r2, r7, r2
   170a8:	8812      	ldrh	r2, [r2, #0]
   170aa:	0052      	lsls	r2, r2, #1
   170ac:	4293      	cmp	r3, r2
   170ae:	d3f4      	bcc.n	1709a <main+0xa62>
			BLE_TX_TIME = millis();
   170b0:	4ba6      	ldr	r3, [pc, #664]	; (1734c <main+0xd14>)
   170b2:	4798      	blx	r3
   170b4:	0003      	movs	r3, r0
   170b6:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x41;
   170b8:	4b97      	ldr	r3, [pc, #604]	; (17318 <main+0xce0>)
   170ba:	2241      	movs	r2, #65	; 0x41
   170bc:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.motor_current_max;
   170be:	4ba5      	ldr	r3, [pc, #660]	; (17354 <main+0xd1c>)
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	b2da      	uxtb	r2, r3
   170c4:	4b94      	ldr	r3, [pc, #592]	; (17318 <main+0xce0>)
   170c6:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x42;
   170c8:	4b93      	ldr	r3, [pc, #588]	; (17318 <main+0xce0>)
   170ca:	2242      	movs	r2, #66	; 0x42
   170cc:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.motor_current_min;
   170ce:	4ba1      	ldr	r3, [pc, #644]	; (17354 <main+0xd1c>)
   170d0:	685b      	ldr	r3, [r3, #4]
   170d2:	b2da      	uxtb	r2, r3
   170d4:	4b90      	ldr	r3, [pc, #576]	; (17318 <main+0xce0>)
   170d6:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x43;
   170d8:	4b8f      	ldr	r3, [pc, #572]	; (17318 <main+0xce0>)
   170da:	2243      	movs	r2, #67	; 0x43
   170dc:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.input_current_max;
   170de:	4b9d      	ldr	r3, [pc, #628]	; (17354 <main+0xd1c>)
   170e0:	689b      	ldr	r3, [r3, #8]
   170e2:	b2da      	uxtb	r2, r3
   170e4:	4b8c      	ldr	r3, [pc, #560]	; (17318 <main+0xce0>)
   170e6:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x44;
   170e8:	4b8b      	ldr	r3, [pc, #556]	; (17318 <main+0xce0>)
   170ea:	2244      	movs	r2, #68	; 0x44
   170ec:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.input_current_min;
   170ee:	4b99      	ldr	r3, [pc, #612]	; (17354 <main+0xd1c>)
   170f0:	68db      	ldr	r3, [r3, #12]
   170f2:	b2da      	uxtb	r2, r3
   170f4:	4b88      	ldr	r3, [pc, #544]	; (17318 <main+0xce0>)
   170f6:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x45;
   170f8:	4b87      	ldr	r3, [pc, #540]	; (17318 <main+0xce0>)
   170fa:	2245      	movs	r2, #69	; 0x45
   170fc:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.abs_current_max;
   170fe:	4b95      	ldr	r3, [pc, #596]	; (17354 <main+0xd1c>)
   17100:	691b      	ldr	r3, [r3, #16]
   17102:	b2da      	uxtb	r2, r3
   17104:	4b84      	ldr	r3, [pc, #528]	; (17318 <main+0xce0>)
   17106:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x46;
   17108:	4b83      	ldr	r3, [pc, #524]	; (17318 <main+0xce0>)
   1710a:	2246      	movs	r2, #70	; 0x46
   1710c:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.max_vin;
   1710e:	4b91      	ldr	r3, [pc, #580]	; (17354 <main+0xd1c>)
   17110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17112:	b2da      	uxtb	r2, r3
   17114:	4b80      	ldr	r3, [pc, #512]	; (17318 <main+0xce0>)
   17116:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   17118:	497f      	ldr	r1, [pc, #508]	; (17318 <main+0xce0>)
   1711a:	4b89      	ldr	r3, [pc, #548]	; (17340 <main+0xd08>)
   1711c:	220c      	movs	r2, #12
   1711e:	0018      	movs	r0, r3
   17120:	4b8d      	ldr	r3, [pc, #564]	; (17358 <main+0xd20>)
   17122:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17124:	46c0      	nop			; (mov r8, r8)
   17126:	4b89      	ldr	r3, [pc, #548]	; (1734c <main+0xd14>)
   17128:	4798      	blx	r3
   1712a:	0002      	movs	r2, r0
   1712c:	687b      	ldr	r3, [r7, #4]
   1712e:	1ad3      	subs	r3, r2, r3
   17130:	220c      	movs	r2, #12
   17132:	18ba      	adds	r2, r7, r2
   17134:	8812      	ldrh	r2, [r2, #0]
   17136:	0052      	lsls	r2, r2, #1
   17138:	4293      	cmp	r3, r2
   1713a:	d3f4      	bcc.n	17126 <main+0xaee>
			BLE_TX_TIME = millis();
   1713c:	4b83      	ldr	r3, [pc, #524]	; (1734c <main+0xd14>)
   1713e:	4798      	blx	r3
   17140:	0003      	movs	r3, r0
   17142:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x48;
   17144:	4b74      	ldr	r3, [pc, #464]	; (17318 <main+0xce0>)
   17146:	2248      	movs	r2, #72	; 0x48
   17148:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.battery_cut_start;
   1714a:	4b82      	ldr	r3, [pc, #520]	; (17354 <main+0xd1c>)
   1714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1714e:	4b76      	ldr	r3, [pc, #472]	; (17328 <main+0xcf0>)
   17150:	1c10      	adds	r0, r2, #0
   17152:	4798      	blx	r3
   17154:	0003      	movs	r3, r0
   17156:	b2da      	uxtb	r2, r3
   17158:	4b6f      	ldr	r3, [pc, #444]	; (17318 <main+0xce0>)
   1715a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x49;
   1715c:	4b6e      	ldr	r3, [pc, #440]	; (17318 <main+0xce0>)
   1715e:	2249      	movs	r2, #73	; 0x49
   17160:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.battery_cut_end;
   17162:	4b7c      	ldr	r3, [pc, #496]	; (17354 <main+0xd1c>)
   17164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17166:	4b70      	ldr	r3, [pc, #448]	; (17328 <main+0xcf0>)
   17168:	1c10      	adds	r0, r2, #0
   1716a:	4798      	blx	r3
   1716c:	0003      	movs	r3, r0
   1716e:	b2da      	uxtb	r2, r3
   17170:	4b69      	ldr	r3, [pc, #420]	; (17318 <main+0xce0>)
   17172:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4A;
   17174:	4b68      	ldr	r3, [pc, #416]	; (17318 <main+0xce0>)
   17176:	224a      	movs	r2, #74	; 0x4a
   17178:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (mcconf_limits.max_erpm & 0xFF);
   1717a:	4b76      	ldr	r3, [pc, #472]	; (17354 <main+0xd1c>)
   1717c:	699b      	ldr	r3, [r3, #24]
   1717e:	b2da      	uxtb	r2, r3
   17180:	4b65      	ldr	r3, [pc, #404]	; (17318 <main+0xce0>)
   17182:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (mcconf_limits.max_erpm & 0xFF00) >> 8;
   17184:	4b73      	ldr	r3, [pc, #460]	; (17354 <main+0xd1c>)
   17186:	699b      	ldr	r3, [r3, #24]
   17188:	121b      	asrs	r3, r3, #8
   1718a:	b2da      	uxtb	r2, r3
   1718c:	4b62      	ldr	r3, [pc, #392]	; (17318 <main+0xce0>)
   1718e:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (mcconf_limits.max_erpm & 0xFF0000) >> 16;
   17190:	4b70      	ldr	r3, [pc, #448]	; (17354 <main+0xd1c>)
   17192:	699b      	ldr	r3, [r3, #24]
   17194:	141b      	asrs	r3, r3, #16
   17196:	b2da      	uxtb	r2, r3
   17198:	4b5f      	ldr	r3, [pc, #380]	; (17318 <main+0xce0>)
   1719a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4B;
   1719c:	4b5e      	ldr	r3, [pc, #376]	; (17318 <main+0xce0>)
   1719e:	224b      	movs	r2, #75	; 0x4b
   171a0:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (mcconf_limits.min_erpm & 0xFF);
   171a2:	4b6c      	ldr	r3, [pc, #432]	; (17354 <main+0xd1c>)
   171a4:	695b      	ldr	r3, [r3, #20]
   171a6:	b2da      	uxtb	r2, r3
   171a8:	4b5b      	ldr	r3, [pc, #364]	; (17318 <main+0xce0>)
   171aa:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (mcconf_limits.min_erpm & 0xFF00) >> 8;
   171ac:	4b69      	ldr	r3, [pc, #420]	; (17354 <main+0xd1c>)
   171ae:	695b      	ldr	r3, [r3, #20]
   171b0:	121b      	asrs	r3, r3, #8
   171b2:	b2da      	uxtb	r2, r3
   171b4:	4b58      	ldr	r3, [pc, #352]	; (17318 <main+0xce0>)
   171b6:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (mcconf_limits.min_erpm & 0xFF0000) >> 16;
   171b8:	4b66      	ldr	r3, [pc, #408]	; (17354 <main+0xd1c>)
   171ba:	695b      	ldr	r3, [r3, #20]
   171bc:	141b      	asrs	r3, r3, #16
   171be:	b2da      	uxtb	r2, r3
   171c0:	4b55      	ldr	r3, [pc, #340]	; (17318 <main+0xce0>)
   171c2:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   171c4:	4954      	ldr	r1, [pc, #336]	; (17318 <main+0xce0>)
   171c6:	4b5e      	ldr	r3, [pc, #376]	; (17340 <main+0xd08>)
   171c8:	220c      	movs	r2, #12
   171ca:	0018      	movs	r0, r3
   171cc:	4b62      	ldr	r3, [pc, #392]	; (17358 <main+0xd20>)
   171ce:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   171d0:	46c0      	nop			; (mov r8, r8)
   171d2:	4b5e      	ldr	r3, [pc, #376]	; (1734c <main+0xd14>)
   171d4:	4798      	blx	r3
   171d6:	0002      	movs	r2, r0
   171d8:	687b      	ldr	r3, [r7, #4]
   171da:	1ad3      	subs	r3, r2, r3
   171dc:	220c      	movs	r2, #12
   171de:	18ba      	adds	r2, r7, r2
   171e0:	8812      	ldrh	r2, [r2, #0]
   171e2:	0052      	lsls	r2, r2, #1
   171e4:	4293      	cmp	r3, r2
   171e6:	d3f4      	bcc.n	171d2 <main+0xb9a>
			BLE_TX_TIME = millis();
   171e8:	4b58      	ldr	r3, [pc, #352]	; (1734c <main+0xd14>)
   171ea:	4798      	blx	r3
   171ec:	0003      	movs	r3, r0
   171ee:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x4C;
   171f0:	4b49      	ldr	r3, [pc, #292]	; (17318 <main+0xce0>)
   171f2:	224c      	movs	r2, #76	; 0x4c
   171f4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((mcconf_limits.max_erpm_fbrake) & 0xFF);
   171f6:	4b57      	ldr	r3, [pc, #348]	; (17354 <main+0xd1c>)
   171f8:	69db      	ldr	r3, [r3, #28]
   171fa:	b2da      	uxtb	r2, r3
   171fc:	4b46      	ldr	r3, [pc, #280]	; (17318 <main+0xce0>)
   171fe:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ((mcconf_limits.max_erpm_fbrake) & 0xFF00) >> 8;
   17200:	4b54      	ldr	r3, [pc, #336]	; (17354 <main+0xd1c>)
   17202:	69db      	ldr	r3, [r3, #28]
   17204:	121b      	asrs	r3, r3, #8
   17206:	b2da      	uxtb	r2, r3
   17208:	4b43      	ldr	r3, [pc, #268]	; (17318 <main+0xce0>)
   1720a:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((mcconf_limits.max_erpm_fbrake) & 0xFF0000) >> 16;
   1720c:	4b51      	ldr	r3, [pc, #324]	; (17354 <main+0xd1c>)
   1720e:	69db      	ldr	r3, [r3, #28]
   17210:	141b      	asrs	r3, r3, #16
   17212:	b2da      	uxtb	r2, r3
   17214:	4b40      	ldr	r3, [pc, #256]	; (17318 <main+0xce0>)
   17216:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4D;
   17218:	4b3f      	ldr	r3, [pc, #252]	; (17318 <main+0xce0>)
   1721a:	224d      	movs	r2, #77	; 0x4d
   1721c:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF);
   1721e:	4b4d      	ldr	r3, [pc, #308]	; (17354 <main+0xd1c>)
   17220:	6a1b      	ldr	r3, [r3, #32]
   17222:	b2da      	uxtb	r2, r3
   17224:	4b3c      	ldr	r3, [pc, #240]	; (17318 <main+0xce0>)
   17226:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF00) >> 8;
   17228:	4b4a      	ldr	r3, [pc, #296]	; (17354 <main+0xd1c>)
   1722a:	6a1b      	ldr	r3, [r3, #32]
   1722c:	121b      	asrs	r3, r3, #8
   1722e:	b2da      	uxtb	r2, r3
   17230:	4b39      	ldr	r3, [pc, #228]	; (17318 <main+0xce0>)
   17232:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF0000) >> 16;
   17234:	4b47      	ldr	r3, [pc, #284]	; (17354 <main+0xd1c>)
   17236:	6a1b      	ldr	r3, [r3, #32]
   17238:	141b      	asrs	r3, r3, #16
   1723a:	b2da      	uxtb	r2, r3
   1723c:	4b36      	ldr	r3, [pc, #216]	; (17318 <main+0xce0>)
   1723e:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4E;
   17240:	4b35      	ldr	r3, [pc, #212]	; (17318 <main+0xce0>)
   17242:	224e      	movs	r2, #78	; 0x4e
   17244:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.temp_fet_start;
   17246:	4b43      	ldr	r3, [pc, #268]	; (17354 <main+0xd1c>)
   17248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1724a:	b2da      	uxtb	r2, r3
   1724c:	4b32      	ldr	r3, [pc, #200]	; (17318 <main+0xce0>)
   1724e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x4F;
   17250:	4b31      	ldr	r3, [pc, #196]	; (17318 <main+0xce0>)
   17252:	224f      	movs	r2, #79	; 0x4f
   17254:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.temp_fet_end;
   17256:	4b3f      	ldr	r3, [pc, #252]	; (17354 <main+0xd1c>)
   17258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1725a:	b2da      	uxtb	r2, r3
   1725c:	4b2e      	ldr	r3, [pc, #184]	; (17318 <main+0xce0>)
   1725e:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   17260:	492d      	ldr	r1, [pc, #180]	; (17318 <main+0xce0>)
   17262:	4b37      	ldr	r3, [pc, #220]	; (17340 <main+0xd08>)
   17264:	220c      	movs	r2, #12
   17266:	0018      	movs	r0, r3
   17268:	4b3b      	ldr	r3, [pc, #236]	; (17358 <main+0xd20>)
   1726a:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1726c:	46c0      	nop			; (mov r8, r8)
   1726e:	4b37      	ldr	r3, [pc, #220]	; (1734c <main+0xd14>)
   17270:	4798      	blx	r3
   17272:	0002      	movs	r2, r0
   17274:	687b      	ldr	r3, [r7, #4]
   17276:	1ad3      	subs	r3, r2, r3
   17278:	220c      	movs	r2, #12
   1727a:	18ba      	adds	r2, r7, r2
   1727c:	8812      	ldrh	r2, [r2, #0]
   1727e:	0052      	lsls	r2, r2, #1
   17280:	4293      	cmp	r3, r2
   17282:	d3f4      	bcc.n	1726e <main+0xc36>
			BLE_TX_TIME = millis();
   17284:	4b31      	ldr	r3, [pc, #196]	; (1734c <main+0xd14>)
   17286:	4798      	blx	r3
   17288:	0003      	movs	r3, r0
   1728a:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x50;
   1728c:	4b22      	ldr	r3, [pc, #136]	; (17318 <main+0xce0>)
   1728e:	2250      	movs	r2, #80	; 0x50
   17290:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.temp_motor_start;
   17292:	4b30      	ldr	r3, [pc, #192]	; (17354 <main+0xd1c>)
   17294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17296:	b2da      	uxtb	r2, r3
   17298:	4b1f      	ldr	r3, [pc, #124]	; (17318 <main+0xce0>)
   1729a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x51;
   1729c:	4b1e      	ldr	r3, [pc, #120]	; (17318 <main+0xce0>)
   1729e:	2251      	movs	r2, #81	; 0x51
   172a0:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.temp_motor_end;
   172a2:	4b2c      	ldr	r3, [pc, #176]	; (17354 <main+0xd1c>)
   172a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   172a6:	b2da      	uxtb	r2, r3
   172a8:	4b1b      	ldr	r3, [pc, #108]	; (17318 <main+0xce0>)
   172aa:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x52;
   172ac:	4b1a      	ldr	r3, [pc, #104]	; (17318 <main+0xce0>)
   172ae:	2252      	movs	r2, #82	; 0x52
   172b0:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.max_duty;
   172b2:	4b28      	ldr	r3, [pc, #160]	; (17354 <main+0xd1c>)
   172b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   172b6:	b2da      	uxtb	r2, r3
   172b8:	4b17      	ldr	r3, [pc, #92]	; (17318 <main+0xce0>)
   172ba:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x53;
   172bc:	4b16      	ldr	r3, [pc, #88]	; (17318 <main+0xce0>)
   172be:	2253      	movs	r2, #83	; 0x53
   172c0:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.min_duty;
   172c2:	4b24      	ldr	r3, [pc, #144]	; (17354 <main+0xd1c>)
   172c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   172c6:	b2da      	uxtb	r2, r3
   172c8:	4b13      	ldr	r3, [pc, #76]	; (17318 <main+0xce0>)
   172ca:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x47;
   172cc:	4b12      	ldr	r3, [pc, #72]	; (17318 <main+0xce0>)
   172ce:	2247      	movs	r2, #71	; 0x47
   172d0:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.min_vin;
   172d2:	4b20      	ldr	r3, [pc, #128]	; (17354 <main+0xd1c>)
   172d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   172d6:	b2da      	uxtb	r2, r3
   172d8:	4b0f      	ldr	r3, [pc, #60]	; (17318 <main+0xce0>)
   172da:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   172dc:	490e      	ldr	r1, [pc, #56]	; (17318 <main+0xce0>)
   172de:	4b18      	ldr	r3, [pc, #96]	; (17340 <main+0xd08>)
   172e0:	220a      	movs	r2, #10
   172e2:	0018      	movs	r0, r3
   172e4:	4b1c      	ldr	r3, [pc, #112]	; (17358 <main+0xd20>)
   172e6:	4798      	blx	r3

			SEND_LIMITS = 0;
   172e8:	4b19      	ldr	r3, [pc, #100]	; (17350 <main+0xd18>)
   172ea:	2200      	movs	r2, #0
   172ec:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   172ee:	4b1b      	ldr	r3, [pc, #108]	; (1735c <main+0xd24>)
   172f0:	2201      	movs	r2, #1
   172f2:	701a      	strb	r2, [r3, #0]
		}

		
		////////////////////////   Handle Sensor Params Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_SENSORS)
   172f4:	4b1a      	ldr	r3, [pc, #104]	; (17360 <main+0xd28>)
   172f6:	781b      	ldrb	r3, [r3, #0]
   172f8:	2b00      	cmp	r3, #0
   172fa:	d100      	bne.n	172fe <main+0xcc6>
   172fc:	e162      	b.n	175c4 <main+0xf8c>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   172fe:	46c0      	nop			; (mov r8, r8)
   17300:	4b12      	ldr	r3, [pc, #72]	; (1734c <main+0xd14>)
   17302:	4798      	blx	r3
   17304:	0002      	movs	r2, r0
   17306:	687b      	ldr	r3, [r7, #4]
   17308:	1ad3      	subs	r3, r2, r3
   1730a:	220c      	movs	r2, #12
   1730c:	18ba      	adds	r2, r7, r2
   1730e:	8812      	ldrh	r2, [r2, #0]
   17310:	0052      	lsls	r2, r2, #1
   17312:	4293      	cmp	r3, r2
   17314:	d3f4      	bcc.n	17300 <main+0xcc8>
   17316:	e025      	b.n	17364 <main+0xd2c>
   17318:	20000dec 	.word	0x20000dec
   1731c:	20000348 	.word	0x20000348
   17320:	00018fad 	.word	0x00018fad
   17324:	41200000 	.word	0x41200000
   17328:	0001883d 	.word	0x0001883d
   1732c:	2000034c 	.word	0x2000034c
   17330:	200003b0 	.word	0x200003b0
   17334:	200003b2 	.word	0x200003b2
   17338:	200003b4 	.word	0x200003b4
   1733c:	20000308 	.word	0x20000308
   17340:	200006ac 	.word	0x200006ac
   17344:	00006629 	.word	0x00006629
   17348:	00009815 	.word	0x00009815
   1734c:	00009f65 	.word	0x00009f65
   17350:	20000388 	.word	0x20000388
   17354:	20001a50 	.word	0x20001a50
   17358:	000063bd 	.word	0x000063bd
   1735c:	200000fa 	.word	0x200000fa
   17360:	20000436 	.word	0x20000436
			BLE_TX_TIME = millis();
   17364:	4bf7      	ldr	r3, [pc, #988]	; (17744 <main+0x110c>)
   17366:	4798      	blx	r3
   17368:	0003      	movs	r3, r0
   1736a:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x61;
   1736c:	4bf6      	ldr	r3, [pc, #984]	; (17748 <main+0x1110>)
   1736e:	2261      	movs	r2, #97	; 0x61
   17370:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(err_estimate[ax_kalman]) & 0xFF); // Accel X estimated error
   17372:	4bf6      	ldr	r3, [pc, #984]	; (1774c <main+0x1114>)
   17374:	681a      	ldr	r2, [r3, #0]
   17376:	4bf6      	ldr	r3, [pc, #984]	; (17750 <main+0x1118>)
   17378:	1c10      	adds	r0, r2, #0
   1737a:	4798      	blx	r3
   1737c:	0003      	movs	r3, r0
   1737e:	b29b      	uxth	r3, r3
   17380:	b2da      	uxtb	r2, r3
   17382:	4bf1      	ldr	r3, [pc, #964]	; (17748 <main+0x1110>)
   17384:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x62;
   17386:	4bf0      	ldr	r3, [pc, #960]	; (17748 <main+0x1110>)
   17388:	2262      	movs	r2, #98	; 0x62
   1738a:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(err_estimate[ay_kalman]) & 0xFF); // AccelY estimated error
   1738c:	4bef      	ldr	r3, [pc, #956]	; (1774c <main+0x1114>)
   1738e:	685a      	ldr	r2, [r3, #4]
   17390:	4bef      	ldr	r3, [pc, #956]	; (17750 <main+0x1118>)
   17392:	1c10      	adds	r0, r2, #0
   17394:	4798      	blx	r3
   17396:	0003      	movs	r3, r0
   17398:	b29b      	uxth	r3, r3
   1739a:	b2da      	uxtb	r2, r3
   1739c:	4bea      	ldr	r3, [pc, #936]	; (17748 <main+0x1110>)
   1739e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x63;
   173a0:	4be9      	ldr	r3, [pc, #932]	; (17748 <main+0x1110>)
   173a2:	2263      	movs	r2, #99	; 0x63
   173a4:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(err_estimate[az_kalman]) & 0xFF); // Accel Z estimated error
   173a6:	4be9      	ldr	r3, [pc, #932]	; (1774c <main+0x1114>)
   173a8:	689a      	ldr	r2, [r3, #8]
   173aa:	4be9      	ldr	r3, [pc, #932]	; (17750 <main+0x1118>)
   173ac:	1c10      	adds	r0, r2, #0
   173ae:	4798      	blx	r3
   173b0:	0003      	movs	r3, r0
   173b2:	b29b      	uxth	r3, r3
   173b4:	b2da      	uxtb	r2, r3
   173b6:	4be4      	ldr	r3, [pc, #912]	; (17748 <main+0x1110>)
   173b8:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x64;
   173ba:	4be3      	ldr	r3, [pc, #908]	; (17748 <main+0x1110>)
   173bc:	2264      	movs	r2, #100	; 0x64
   173be:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(err_estimate[gx_kalman]) & 0xFF); // Gyro X estimated error
   173c0:	4be2      	ldr	r3, [pc, #904]	; (1774c <main+0x1114>)
   173c2:	68da      	ldr	r2, [r3, #12]
   173c4:	4be2      	ldr	r3, [pc, #904]	; (17750 <main+0x1118>)
   173c6:	1c10      	adds	r0, r2, #0
   173c8:	4798      	blx	r3
   173ca:	0003      	movs	r3, r0
   173cc:	b29b      	uxth	r3, r3
   173ce:	b2da      	uxtb	r2, r3
   173d0:	4bdd      	ldr	r3, [pc, #884]	; (17748 <main+0x1110>)
   173d2:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x65;
   173d4:	4bdc      	ldr	r3, [pc, #880]	; (17748 <main+0x1110>)
   173d6:	2265      	movs	r2, #101	; 0x65
   173d8:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(err_estimate[gy_kalman]) & 0xFF); // Gyro Y estimated error
   173da:	4bdc      	ldr	r3, [pc, #880]	; (1774c <main+0x1114>)
   173dc:	691a      	ldr	r2, [r3, #16]
   173de:	4bdc      	ldr	r3, [pc, #880]	; (17750 <main+0x1118>)
   173e0:	1c10      	adds	r0, r2, #0
   173e2:	4798      	blx	r3
   173e4:	0003      	movs	r3, r0
   173e6:	b29b      	uxth	r3, r3
   173e8:	b2da      	uxtb	r2, r3
   173ea:	4bd7      	ldr	r3, [pc, #860]	; (17748 <main+0x1110>)
   173ec:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x66;
   173ee:	4bd6      	ldr	r3, [pc, #856]	; (17748 <main+0x1110>)
   173f0:	2266      	movs	r2, #102	; 0x66
   173f2:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(err_estimate[gz_kalman]) & 0xFF); // Gyro Z estimated error
   173f4:	4bd5      	ldr	r3, [pc, #852]	; (1774c <main+0x1114>)
   173f6:	695a      	ldr	r2, [r3, #20]
   173f8:	4bd5      	ldr	r3, [pc, #852]	; (17750 <main+0x1118>)
   173fa:	1c10      	adds	r0, r2, #0
   173fc:	4798      	blx	r3
   173fe:	0003      	movs	r3, r0
   17400:	b29b      	uxth	r3, r3
   17402:	b2da      	uxtb	r2, r3
   17404:	4bd0      	ldr	r3, [pc, #832]	; (17748 <main+0x1110>)
   17406:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x67;
   17408:	4bcf      	ldr	r3, [pc, #828]	; (17748 <main+0x1110>)
   1740a:	2267      	movs	r2, #103	; 0x67
   1740c:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(err_estimate[light_kalman]) & 0xFF); // Light Sensor estimated error
   1740e:	4bcf      	ldr	r3, [pc, #828]	; (1774c <main+0x1114>)
   17410:	699a      	ldr	r2, [r3, #24]
   17412:	4bcf      	ldr	r3, [pc, #828]	; (17750 <main+0x1118>)
   17414:	1c10      	adds	r0, r2, #0
   17416:	4798      	blx	r3
   17418:	0003      	movs	r3, r0
   1741a:	b29b      	uxth	r3, r3
   1741c:	b2da      	uxtb	r2, r3
   1741e:	4bca      	ldr	r3, [pc, #808]	; (17748 <main+0x1110>)
   17420:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   17422:	49c9      	ldr	r1, [pc, #804]	; (17748 <main+0x1110>)
   17424:	4bcb      	ldr	r3, [pc, #812]	; (17754 <main+0x111c>)
   17426:	220e      	movs	r2, #14
   17428:	0018      	movs	r0, r3
   1742a:	4bcb      	ldr	r3, [pc, #812]	; (17758 <main+0x1120>)
   1742c:	4798      	blx	r3
		
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1742e:	46c0      	nop			; (mov r8, r8)
   17430:	4bc4      	ldr	r3, [pc, #784]	; (17744 <main+0x110c>)
   17432:	4798      	blx	r3
   17434:	0002      	movs	r2, r0
   17436:	687b      	ldr	r3, [r7, #4]
   17438:	1ad3      	subs	r3, r2, r3
   1743a:	220c      	movs	r2, #12
   1743c:	18ba      	adds	r2, r7, r2
   1743e:	8812      	ldrh	r2, [r2, #0]
   17440:	0052      	lsls	r2, r2, #1
   17442:	4293      	cmp	r3, r2
   17444:	d3f4      	bcc.n	17430 <main+0xdf8>
			BLE_TX_TIME = millis();
   17446:	4bbf      	ldr	r3, [pc, #764]	; (17744 <main+0x110c>)
   17448:	4798      	blx	r3
   1744a:	0003      	movs	r3, r0
   1744c:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x68;
   1744e:	4bbe      	ldr	r3, [pc, #760]	; (17748 <main+0x1110>)
   17450:	2268      	movs	r2, #104	; 0x68
   17452:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(q[ax_kalman]*100.0) & 0xFF); // Accel X Sensitivity
   17454:	4bc1      	ldr	r3, [pc, #772]	; (1775c <main+0x1124>)
   17456:	681a      	ldr	r2, [r3, #0]
   17458:	4bc1      	ldr	r3, [pc, #772]	; (17760 <main+0x1128>)
   1745a:	1c10      	adds	r0, r2, #0
   1745c:	4798      	blx	r3
   1745e:	4cc1      	ldr	r4, [pc, #772]	; (17764 <main+0x112c>)
   17460:	2200      	movs	r2, #0
   17462:	4bc1      	ldr	r3, [pc, #772]	; (17768 <main+0x1130>)
   17464:	47a0      	blx	r4
   17466:	0003      	movs	r3, r0
   17468:	000c      	movs	r4, r1
   1746a:	0019      	movs	r1, r3
   1746c:	0022      	movs	r2, r4
   1746e:	4bbf      	ldr	r3, [pc, #764]	; (1776c <main+0x1134>)
   17470:	0008      	movs	r0, r1
   17472:	0011      	movs	r1, r2
   17474:	4798      	blx	r3
   17476:	0003      	movs	r3, r0
   17478:	b29b      	uxth	r3, r3
   1747a:	b2da      	uxtb	r2, r3
   1747c:	4bb2      	ldr	r3, [pc, #712]	; (17748 <main+0x1110>)
   1747e:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x69;
   17480:	4bb1      	ldr	r3, [pc, #708]	; (17748 <main+0x1110>)
   17482:	2269      	movs	r2, #105	; 0x69
   17484:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(q[ay_kalman]*100.0) & 0xFF); // Accel Y Sensitivity
   17486:	4bb5      	ldr	r3, [pc, #724]	; (1775c <main+0x1124>)
   17488:	685a      	ldr	r2, [r3, #4]
   1748a:	4bb5      	ldr	r3, [pc, #724]	; (17760 <main+0x1128>)
   1748c:	1c10      	adds	r0, r2, #0
   1748e:	4798      	blx	r3
   17490:	4cb4      	ldr	r4, [pc, #720]	; (17764 <main+0x112c>)
   17492:	2200      	movs	r2, #0
   17494:	4bb4      	ldr	r3, [pc, #720]	; (17768 <main+0x1130>)
   17496:	47a0      	blx	r4
   17498:	0003      	movs	r3, r0
   1749a:	000c      	movs	r4, r1
   1749c:	0019      	movs	r1, r3
   1749e:	0022      	movs	r2, r4
   174a0:	4bb2      	ldr	r3, [pc, #712]	; (1776c <main+0x1134>)
   174a2:	0008      	movs	r0, r1
   174a4:	0011      	movs	r1, r2
   174a6:	4798      	blx	r3
   174a8:	0003      	movs	r3, r0
   174aa:	b29b      	uxth	r3, r3
   174ac:	b2da      	uxtb	r2, r3
   174ae:	4ba6      	ldr	r3, [pc, #664]	; (17748 <main+0x1110>)
   174b0:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x6A;
   174b2:	4ba5      	ldr	r3, [pc, #660]	; (17748 <main+0x1110>)
   174b4:	226a      	movs	r2, #106	; 0x6a
   174b6:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(q[az_kalman]*100.0) & 0xFF); // Accel Z Sensitivity
   174b8:	4ba8      	ldr	r3, [pc, #672]	; (1775c <main+0x1124>)
   174ba:	689a      	ldr	r2, [r3, #8]
   174bc:	4ba8      	ldr	r3, [pc, #672]	; (17760 <main+0x1128>)
   174be:	1c10      	adds	r0, r2, #0
   174c0:	4798      	blx	r3
   174c2:	4ca8      	ldr	r4, [pc, #672]	; (17764 <main+0x112c>)
   174c4:	2200      	movs	r2, #0
   174c6:	4ba8      	ldr	r3, [pc, #672]	; (17768 <main+0x1130>)
   174c8:	47a0      	blx	r4
   174ca:	0003      	movs	r3, r0
   174cc:	000c      	movs	r4, r1
   174ce:	0019      	movs	r1, r3
   174d0:	0022      	movs	r2, r4
   174d2:	4ba6      	ldr	r3, [pc, #664]	; (1776c <main+0x1134>)
   174d4:	0008      	movs	r0, r1
   174d6:	0011      	movs	r1, r2
   174d8:	4798      	blx	r3
   174da:	0003      	movs	r3, r0
   174dc:	b29b      	uxth	r3, r3
   174de:	b2da      	uxtb	r2, r3
   174e0:	4b99      	ldr	r3, [pc, #612]	; (17748 <main+0x1110>)
   174e2:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x6B;
   174e4:	4b98      	ldr	r3, [pc, #608]	; (17748 <main+0x1110>)
   174e6:	226b      	movs	r2, #107	; 0x6b
   174e8:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(q[gx_kalman]*100.0) & 0xFF); // Gyro X Sensitivity
   174ea:	4b9c      	ldr	r3, [pc, #624]	; (1775c <main+0x1124>)
   174ec:	68da      	ldr	r2, [r3, #12]
   174ee:	4b9c      	ldr	r3, [pc, #624]	; (17760 <main+0x1128>)
   174f0:	1c10      	adds	r0, r2, #0
   174f2:	4798      	blx	r3
   174f4:	4c9b      	ldr	r4, [pc, #620]	; (17764 <main+0x112c>)
   174f6:	2200      	movs	r2, #0
   174f8:	4b9b      	ldr	r3, [pc, #620]	; (17768 <main+0x1130>)
   174fa:	47a0      	blx	r4
   174fc:	0003      	movs	r3, r0
   174fe:	000c      	movs	r4, r1
   17500:	0019      	movs	r1, r3
   17502:	0022      	movs	r2, r4
   17504:	4b99      	ldr	r3, [pc, #612]	; (1776c <main+0x1134>)
   17506:	0008      	movs	r0, r1
   17508:	0011      	movs	r1, r2
   1750a:	4798      	blx	r3
   1750c:	0003      	movs	r3, r0
   1750e:	b29b      	uxth	r3, r3
   17510:	b2da      	uxtb	r2, r3
   17512:	4b8d      	ldr	r3, [pc, #564]	; (17748 <main+0x1110>)
   17514:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x6C;
   17516:	4b8c      	ldr	r3, [pc, #560]	; (17748 <main+0x1110>)
   17518:	226c      	movs	r2, #108	; 0x6c
   1751a:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(q[gy_kalman]*100.0) & 0xFF); // Gyro Y Sensitivity
   1751c:	4b8f      	ldr	r3, [pc, #572]	; (1775c <main+0x1124>)
   1751e:	691a      	ldr	r2, [r3, #16]
   17520:	4b8f      	ldr	r3, [pc, #572]	; (17760 <main+0x1128>)
   17522:	1c10      	adds	r0, r2, #0
   17524:	4798      	blx	r3
   17526:	4c8f      	ldr	r4, [pc, #572]	; (17764 <main+0x112c>)
   17528:	2200      	movs	r2, #0
   1752a:	4b8f      	ldr	r3, [pc, #572]	; (17768 <main+0x1130>)
   1752c:	47a0      	blx	r4
   1752e:	0003      	movs	r3, r0
   17530:	000c      	movs	r4, r1
   17532:	0019      	movs	r1, r3
   17534:	0022      	movs	r2, r4
   17536:	4b8d      	ldr	r3, [pc, #564]	; (1776c <main+0x1134>)
   17538:	0008      	movs	r0, r1
   1753a:	0011      	movs	r1, r2
   1753c:	4798      	blx	r3
   1753e:	0003      	movs	r3, r0
   17540:	b29b      	uxth	r3, r3
   17542:	b2da      	uxtb	r2, r3
   17544:	4b80      	ldr	r3, [pc, #512]	; (17748 <main+0x1110>)
   17546:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x6D;
   17548:	4b7f      	ldr	r3, [pc, #508]	; (17748 <main+0x1110>)
   1754a:	226d      	movs	r2, #109	; 0x6d
   1754c:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(q[gz_kalman]*100.0) & 0xFF); // Gyro Z Sensitivity
   1754e:	4b83      	ldr	r3, [pc, #524]	; (1775c <main+0x1124>)
   17550:	695a      	ldr	r2, [r3, #20]
   17552:	4b83      	ldr	r3, [pc, #524]	; (17760 <main+0x1128>)
   17554:	1c10      	adds	r0, r2, #0
   17556:	4798      	blx	r3
   17558:	4c82      	ldr	r4, [pc, #520]	; (17764 <main+0x112c>)
   1755a:	2200      	movs	r2, #0
   1755c:	4b82      	ldr	r3, [pc, #520]	; (17768 <main+0x1130>)
   1755e:	47a0      	blx	r4
   17560:	0003      	movs	r3, r0
   17562:	000c      	movs	r4, r1
   17564:	0019      	movs	r1, r3
   17566:	0022      	movs	r2, r4
   17568:	4b80      	ldr	r3, [pc, #512]	; (1776c <main+0x1134>)
   1756a:	0008      	movs	r0, r1
   1756c:	0011      	movs	r1, r2
   1756e:	4798      	blx	r3
   17570:	0003      	movs	r3, r0
   17572:	b29b      	uxth	r3, r3
   17574:	b2da      	uxtb	r2, r3
   17576:	4b74      	ldr	r3, [pc, #464]	; (17748 <main+0x1110>)
   17578:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x6E;
   1757a:	4b73      	ldr	r3, [pc, #460]	; (17748 <main+0x1110>)
   1757c:	226e      	movs	r2, #110	; 0x6e
   1757e:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(q[light_kalman]*100.0) & 0xFF); // Light Sensitivity
   17580:	4b76      	ldr	r3, [pc, #472]	; (1775c <main+0x1124>)
   17582:	699a      	ldr	r2, [r3, #24]
   17584:	4b76      	ldr	r3, [pc, #472]	; (17760 <main+0x1128>)
   17586:	1c10      	adds	r0, r2, #0
   17588:	4798      	blx	r3
   1758a:	4c76      	ldr	r4, [pc, #472]	; (17764 <main+0x112c>)
   1758c:	2200      	movs	r2, #0
   1758e:	4b76      	ldr	r3, [pc, #472]	; (17768 <main+0x1130>)
   17590:	47a0      	blx	r4
   17592:	0003      	movs	r3, r0
   17594:	000c      	movs	r4, r1
   17596:	0019      	movs	r1, r3
   17598:	0022      	movs	r2, r4
   1759a:	4b74      	ldr	r3, [pc, #464]	; (1776c <main+0x1134>)
   1759c:	0008      	movs	r0, r1
   1759e:	0011      	movs	r1, r2
   175a0:	4798      	blx	r3
   175a2:	0003      	movs	r3, r0
   175a4:	b29b      	uxth	r3, r3
   175a6:	b2da      	uxtb	r2, r3
   175a8:	4b67      	ldr	r3, [pc, #412]	; (17748 <main+0x1110>)
   175aa:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   175ac:	4966      	ldr	r1, [pc, #408]	; (17748 <main+0x1110>)
   175ae:	4b69      	ldr	r3, [pc, #420]	; (17754 <main+0x111c>)
   175b0:	220e      	movs	r2, #14
   175b2:	0018      	movs	r0, r3
   175b4:	4b68      	ldr	r3, [pc, #416]	; (17758 <main+0x1120>)
   175b6:	4798      	blx	r3

			SEND_SENSORS = 0;
   175b8:	4b6d      	ldr	r3, [pc, #436]	; (17770 <main+0x1138>)
   175ba:	2200      	movs	r2, #0
   175bc:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   175be:	4b6d      	ldr	r3, [pc, #436]	; (17774 <main+0x113c>)
   175c0:	2201      	movs	r2, #1
   175c2:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle LED Params Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LED_CHARS)
   175c4:	4b6c      	ldr	r3, [pc, #432]	; (17778 <main+0x1140>)
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	2b00      	cmp	r3, #0
   175ca:	d100      	bne.n	175ce <main+0xf96>
   175cc:	e337      	b.n	17c3e <main+0x1606>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   175ce:	46c0      	nop			; (mov r8, r8)
   175d0:	4b5c      	ldr	r3, [pc, #368]	; (17744 <main+0x110c>)
   175d2:	4798      	blx	r3
   175d4:	0002      	movs	r2, r0
   175d6:	687b      	ldr	r3, [r7, #4]
   175d8:	1ad3      	subs	r3, r2, r3
   175da:	220c      	movs	r2, #12
   175dc:	18ba      	adds	r2, r7, r2
   175de:	8812      	ldrh	r2, [r2, #0]
   175e0:	0052      	lsls	r2, r2, #1
   175e2:	4293      	cmp	r3, r2
   175e4:	d3f4      	bcc.n	175d0 <main+0xf98>
			BLE_TX_TIME = millis();
   175e6:	4b57      	ldr	r3, [pc, #348]	; (17744 <main+0x110c>)
   175e8:	4798      	blx	r3
   175ea:	0003      	movs	r3, r0
   175ec:	607b      	str	r3, [r7, #4]

			uint8_t led_mode_switches = ((light_mode << 4) | (HEADLIGHTS << 3) | (SIDELIGHTS << 2) | (LIGHT_CONTROLLED << 1) | IMU_CONTROLED);
   175ee:	4b63      	ldr	r3, [pc, #396]	; (1777c <main+0x1144>)
   175f0:	781b      	ldrb	r3, [r3, #0]
   175f2:	011b      	lsls	r3, r3, #4
   175f4:	b25a      	sxtb	r2, r3
   175f6:	4b62      	ldr	r3, [pc, #392]	; (17780 <main+0x1148>)
   175f8:	781b      	ldrb	r3, [r3, #0]
   175fa:	00db      	lsls	r3, r3, #3
   175fc:	b25b      	sxtb	r3, r3
   175fe:	4313      	orrs	r3, r2
   17600:	b25a      	sxtb	r2, r3
   17602:	4b60      	ldr	r3, [pc, #384]	; (17784 <main+0x114c>)
   17604:	781b      	ldrb	r3, [r3, #0]
   17606:	009b      	lsls	r3, r3, #2
   17608:	b25b      	sxtb	r3, r3
   1760a:	4313      	orrs	r3, r2
   1760c:	b25a      	sxtb	r2, r3
   1760e:	4b5e      	ldr	r3, [pc, #376]	; (17788 <main+0x1150>)
   17610:	781b      	ldrb	r3, [r3, #0]
   17612:	005b      	lsls	r3, r3, #1
   17614:	b25b      	sxtb	r3, r3
   17616:	4313      	orrs	r3, r2
   17618:	b25a      	sxtb	r2, r3
   1761a:	4b5c      	ldr	r3, [pc, #368]	; (1778c <main+0x1154>)
   1761c:	781b      	ldrb	r3, [r3, #0]
   1761e:	b25b      	sxtb	r3, r3
   17620:	4313      	orrs	r3, r2
   17622:	b25a      	sxtb	r2, r3
   17624:	230b      	movs	r3, #11
   17626:	18fb      	adds	r3, r7, r3
   17628:	701a      	strb	r2, [r3, #0]

			// Global LED Settings
			ble_write_buffer[0] = 0x31;
   1762a:	4b47      	ldr	r3, [pc, #284]	; (17748 <main+0x1110>)
   1762c:	2231      	movs	r2, #49	; 0x31
   1762e:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = led_mode_switches; // Current switch states
   17630:	4b45      	ldr	r3, [pc, #276]	; (17748 <main+0x1110>)
   17632:	220b      	movs	r2, #11
   17634:	18ba      	adds	r2, r7, r2
   17636:	7812      	ldrb	r2, [r2, #0]
   17638:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = RGB_led_type;
   1763a:	4b55      	ldr	r3, [pc, #340]	; (17790 <main+0x1158>)
   1763c:	781a      	ldrb	r2, [r3, #0]
   1763e:	4b42      	ldr	r3, [pc, #264]	; (17748 <main+0x1110>)
   17640:	709a      	strb	r2, [r3, #2]
			// Static
			ble_write_buffer[3] = 0x32;
   17642:	4b41      	ldr	r3, [pc, #260]	; (17748 <main+0x1110>)
   17644:	2232      	movs	r2, #50	; 0x32
   17646:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((float)Static_RGB.LR / 655.35);
   17648:	4b52      	ldr	r3, [pc, #328]	; (17794 <main+0x115c>)
   1764a:	881a      	ldrh	r2, [r3, #0]
   1764c:	4b52      	ldr	r3, [pc, #328]	; (17798 <main+0x1160>)
   1764e:	0010      	movs	r0, r2
   17650:	4798      	blx	r3
   17652:	1c02      	adds	r2, r0, #0
   17654:	4b42      	ldr	r3, [pc, #264]	; (17760 <main+0x1128>)
   17656:	1c10      	adds	r0, r2, #0
   17658:	4798      	blx	r3
   1765a:	4c50      	ldr	r4, [pc, #320]	; (1779c <main+0x1164>)
   1765c:	4a50      	ldr	r2, [pc, #320]	; (177a0 <main+0x1168>)
   1765e:	4b51      	ldr	r3, [pc, #324]	; (177a4 <main+0x116c>)
   17660:	47a0      	blx	r4
   17662:	0003      	movs	r3, r0
   17664:	000c      	movs	r4, r1
   17666:	0019      	movs	r1, r3
   17668:	0022      	movs	r2, r4
   1766a:	4b40      	ldr	r3, [pc, #256]	; (1776c <main+0x1134>)
   1766c:	0008      	movs	r0, r1
   1766e:	0011      	movs	r1, r2
   17670:	4798      	blx	r3
   17672:	0003      	movs	r3, r0
   17674:	b2da      	uxtb	r2, r3
   17676:	4b34      	ldr	r3, [pc, #208]	; (17748 <main+0x1110>)
   17678:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((float)Static_RGB.LG / 655.35);
   1767a:	4b46      	ldr	r3, [pc, #280]	; (17794 <main+0x115c>)
   1767c:	885a      	ldrh	r2, [r3, #2]
   1767e:	4b46      	ldr	r3, [pc, #280]	; (17798 <main+0x1160>)
   17680:	0010      	movs	r0, r2
   17682:	4798      	blx	r3
   17684:	1c02      	adds	r2, r0, #0
   17686:	4b36      	ldr	r3, [pc, #216]	; (17760 <main+0x1128>)
   17688:	1c10      	adds	r0, r2, #0
   1768a:	4798      	blx	r3
   1768c:	4c43      	ldr	r4, [pc, #268]	; (1779c <main+0x1164>)
   1768e:	4a44      	ldr	r2, [pc, #272]	; (177a0 <main+0x1168>)
   17690:	4b44      	ldr	r3, [pc, #272]	; (177a4 <main+0x116c>)
   17692:	47a0      	blx	r4
   17694:	0003      	movs	r3, r0
   17696:	000c      	movs	r4, r1
   17698:	0019      	movs	r1, r3
   1769a:	0022      	movs	r2, r4
   1769c:	4b33      	ldr	r3, [pc, #204]	; (1776c <main+0x1134>)
   1769e:	0008      	movs	r0, r1
   176a0:	0011      	movs	r1, r2
   176a2:	4798      	blx	r3
   176a4:	0003      	movs	r3, r0
   176a6:	b2da      	uxtb	r2, r3
   176a8:	4b27      	ldr	r3, [pc, #156]	; (17748 <main+0x1110>)
   176aa:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((float)Static_RGB.LB / 655.35);
   176ac:	4b39      	ldr	r3, [pc, #228]	; (17794 <main+0x115c>)
   176ae:	889a      	ldrh	r2, [r3, #4]
   176b0:	4b39      	ldr	r3, [pc, #228]	; (17798 <main+0x1160>)
   176b2:	0010      	movs	r0, r2
   176b4:	4798      	blx	r3
   176b6:	1c02      	adds	r2, r0, #0
   176b8:	4b29      	ldr	r3, [pc, #164]	; (17760 <main+0x1128>)
   176ba:	1c10      	adds	r0, r2, #0
   176bc:	4798      	blx	r3
   176be:	4c37      	ldr	r4, [pc, #220]	; (1779c <main+0x1164>)
   176c0:	4a37      	ldr	r2, [pc, #220]	; (177a0 <main+0x1168>)
   176c2:	4b38      	ldr	r3, [pc, #224]	; (177a4 <main+0x116c>)
   176c4:	47a0      	blx	r4
   176c6:	0003      	movs	r3, r0
   176c8:	000c      	movs	r4, r1
   176ca:	0019      	movs	r1, r3
   176cc:	0022      	movs	r2, r4
   176ce:	4b27      	ldr	r3, [pc, #156]	; (1776c <main+0x1134>)
   176d0:	0008      	movs	r0, r1
   176d2:	0011      	movs	r1, r2
   176d4:	4798      	blx	r3
   176d6:	0003      	movs	r3, r0
   176d8:	b2da      	uxtb	r2, r3
   176da:	4b1b      	ldr	r3, [pc, #108]	; (17748 <main+0x1110>)
   176dc:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Static_RGB.RR / 655.35);
   176de:	4b2d      	ldr	r3, [pc, #180]	; (17794 <main+0x115c>)
   176e0:	88da      	ldrh	r2, [r3, #6]
   176e2:	4b2d      	ldr	r3, [pc, #180]	; (17798 <main+0x1160>)
   176e4:	0010      	movs	r0, r2
   176e6:	4798      	blx	r3
   176e8:	1c02      	adds	r2, r0, #0
   176ea:	4b1d      	ldr	r3, [pc, #116]	; (17760 <main+0x1128>)
   176ec:	1c10      	adds	r0, r2, #0
   176ee:	4798      	blx	r3
   176f0:	4c2a      	ldr	r4, [pc, #168]	; (1779c <main+0x1164>)
   176f2:	4a2b      	ldr	r2, [pc, #172]	; (177a0 <main+0x1168>)
   176f4:	4b2b      	ldr	r3, [pc, #172]	; (177a4 <main+0x116c>)
   176f6:	47a0      	blx	r4
   176f8:	0003      	movs	r3, r0
   176fa:	000c      	movs	r4, r1
   176fc:	0019      	movs	r1, r3
   176fe:	0022      	movs	r2, r4
   17700:	4b1a      	ldr	r3, [pc, #104]	; (1776c <main+0x1134>)
   17702:	0008      	movs	r0, r1
   17704:	0011      	movs	r1, r2
   17706:	4798      	blx	r3
   17708:	0003      	movs	r3, r0
   1770a:	b2da      	uxtb	r2, r3
   1770c:	4b0e      	ldr	r3, [pc, #56]	; (17748 <main+0x1110>)
   1770e:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Static_RGB.RG / 655.35);
   17710:	4b20      	ldr	r3, [pc, #128]	; (17794 <main+0x115c>)
   17712:	891a      	ldrh	r2, [r3, #8]
   17714:	4b20      	ldr	r3, [pc, #128]	; (17798 <main+0x1160>)
   17716:	0010      	movs	r0, r2
   17718:	4798      	blx	r3
   1771a:	1c02      	adds	r2, r0, #0
   1771c:	4b10      	ldr	r3, [pc, #64]	; (17760 <main+0x1128>)
   1771e:	1c10      	adds	r0, r2, #0
   17720:	4798      	blx	r3
   17722:	4c1e      	ldr	r4, [pc, #120]	; (1779c <main+0x1164>)
   17724:	4a1e      	ldr	r2, [pc, #120]	; (177a0 <main+0x1168>)
   17726:	4b1f      	ldr	r3, [pc, #124]	; (177a4 <main+0x116c>)
   17728:	47a0      	blx	r4
   1772a:	0003      	movs	r3, r0
   1772c:	000c      	movs	r4, r1
   1772e:	0019      	movs	r1, r3
   17730:	0022      	movs	r2, r4
   17732:	4b0e      	ldr	r3, [pc, #56]	; (1776c <main+0x1134>)
   17734:	0008      	movs	r0, r1
   17736:	0011      	movs	r1, r2
   17738:	4798      	blx	r3
   1773a:	0003      	movs	r3, r0
   1773c:	b2da      	uxtb	r2, r3
   1773e:	4b02      	ldr	r3, [pc, #8]	; (17748 <main+0x1110>)
   17740:	721a      	strb	r2, [r3, #8]
   17742:	e031      	b.n	177a8 <main+0x1170>
   17744:	00009f65 	.word	0x00009f65
   17748:	20000dec 	.word	0x20000dec
   1774c:	20000f94 	.word	0x20000f94
   17750:	0001883d 	.word	0x0001883d
   17754:	200006ac 	.word	0x200006ac
   17758:	000063bd 	.word	0x000063bd
   1775c:	20001a30 	.word	0x20001a30
   17760:	0001b1a1 	.word	0x0001b1a1
   17764:	0001a519 	.word	0x0001a519
   17768:	40590000 	.word	0x40590000
   1776c:	0001886d 	.word	0x0001886d
   17770:	20000436 	.word	0x20000436
   17774:	200000fa 	.word	0x200000fa
   17778:	20000434 	.word	0x20000434
   1777c:	20000034 	.word	0x20000034
   17780:	2000036f 	.word	0x2000036f
   17784:	200000cc 	.word	0x200000cc
   17788:	20000370 	.word	0x20000370
   1778c:	20000371 	.word	0x20000371
   17790:	20001a4c 	.word	0x20001a4c
   17794:	20000038 	.word	0x20000038
   17798:	00019605 	.word	0x00019605
   1779c:	00019cb1 	.word	0x00019cb1
   177a0:	cccccccd 	.word	0xcccccccd
   177a4:	40847acc 	.word	0x40847acc
			ble_write_buffer[9] = (uint8_t)((float)Static_RGB.RB / 655.35);
   177a8:	4bf5      	ldr	r3, [pc, #980]	; (17b80 <main+0x1548>)
   177aa:	895a      	ldrh	r2, [r3, #10]
   177ac:	4bf5      	ldr	r3, [pc, #980]	; (17b84 <main+0x154c>)
   177ae:	0010      	movs	r0, r2
   177b0:	4798      	blx	r3
   177b2:	1c02      	adds	r2, r0, #0
   177b4:	4bf4      	ldr	r3, [pc, #976]	; (17b88 <main+0x1550>)
   177b6:	1c10      	adds	r0, r2, #0
   177b8:	4798      	blx	r3
   177ba:	4cf4      	ldr	r4, [pc, #976]	; (17b8c <main+0x1554>)
   177bc:	4af4      	ldr	r2, [pc, #976]	; (17b90 <main+0x1558>)
   177be:	4bf5      	ldr	r3, [pc, #980]	; (17b94 <main+0x155c>)
   177c0:	47a0      	blx	r4
   177c2:	0003      	movs	r3, r0
   177c4:	000c      	movs	r4, r1
   177c6:	0019      	movs	r1, r3
   177c8:	0022      	movs	r2, r4
   177ca:	4bf3      	ldr	r3, [pc, #972]	; (17b98 <main+0x1560>)
   177cc:	0008      	movs	r0, r1
   177ce:	0011      	movs	r1, r2
   177d0:	4798      	blx	r3
   177d2:	0003      	movs	r3, r0
   177d4:	b2da      	uxtb	r2, r3
   177d6:	4bf1      	ldr	r3, [pc, #964]	; (17b9c <main+0x1564>)
   177d8:	725a      	strb	r2, [r3, #9]
			// Color Cycle
			ble_write_buffer[10] = 0x33;
   177da:	4bf0      	ldr	r3, [pc, #960]	; (17b9c <main+0x1564>)
   177dc:	2233      	movs	r2, #51	; 0x33
   177de:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)(RateSens[MODE_ANALOG_COLOR_CYCLE] * 100);
   177e0:	4bef      	ldr	r3, [pc, #956]	; (17ba0 <main+0x1568>)
   177e2:	685a      	ldr	r2, [r3, #4]
   177e4:	4bef      	ldr	r3, [pc, #956]	; (17ba4 <main+0x156c>)
   177e6:	49f0      	ldr	r1, [pc, #960]	; (17ba8 <main+0x1570>)
   177e8:	1c10      	adds	r0, r2, #0
   177ea:	4798      	blx	r3
   177ec:	1c03      	adds	r3, r0, #0
   177ee:	1c1a      	adds	r2, r3, #0
   177f0:	4bee      	ldr	r3, [pc, #952]	; (17bac <main+0x1574>)
   177f2:	1c10      	adds	r0, r2, #0
   177f4:	4798      	blx	r3
   177f6:	0003      	movs	r3, r0
   177f8:	b2da      	uxtb	r2, r3
   177fa:	4be8      	ldr	r3, [pc, #928]	; (17b9c <main+0x1564>)
   177fc:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)(Brightness[MODE_ANALOG_COLOR_CYCLE] * 100);
   177fe:	4bec      	ldr	r3, [pc, #944]	; (17bb0 <main+0x1578>)
   17800:	685a      	ldr	r2, [r3, #4]
   17802:	4be8      	ldr	r3, [pc, #928]	; (17ba4 <main+0x156c>)
   17804:	49e8      	ldr	r1, [pc, #928]	; (17ba8 <main+0x1570>)
   17806:	1c10      	adds	r0, r2, #0
   17808:	4798      	blx	r3
   1780a:	1c03      	adds	r3, r0, #0
   1780c:	1c1a      	adds	r2, r3, #0
   1780e:	4be7      	ldr	r3, [pc, #924]	; (17bac <main+0x1574>)
   17810:	1c10      	adds	r0, r2, #0
   17812:	4798      	blx	r3
   17814:	0003      	movs	r3, r0
   17816:	b2da      	uxtb	r2, r3
   17818:	4be0      	ldr	r3, [pc, #896]	; (17b9c <main+0x1564>)
   1781a:	731a      	strb	r2, [r3, #12]
			// Compass Cycle
			ble_write_buffer[13] = 0x34;
   1781c:	4bdf      	ldr	r3, [pc, #892]	; (17b9c <main+0x1564>)
   1781e:	2234      	movs	r2, #52	; 0x34
   17820:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_ANALOG_COMPASS_CYCLE] * 100);
   17822:	4be3      	ldr	r3, [pc, #908]	; (17bb0 <main+0x1578>)
   17824:	689a      	ldr	r2, [r3, #8]
   17826:	4bdf      	ldr	r3, [pc, #892]	; (17ba4 <main+0x156c>)
   17828:	49df      	ldr	r1, [pc, #892]	; (17ba8 <main+0x1570>)
   1782a:	1c10      	adds	r0, r2, #0
   1782c:	4798      	blx	r3
   1782e:	1c03      	adds	r3, r0, #0
   17830:	1c1a      	adds	r2, r3, #0
   17832:	4bde      	ldr	r3, [pc, #888]	; (17bac <main+0x1574>)
   17834:	1c10      	adds	r0, r2, #0
   17836:	4798      	blx	r3
   17838:	0003      	movs	r3, r0
   1783a:	b2da      	uxtb	r2, r3
   1783c:	4bd7      	ldr	r3, [pc, #860]	; (17b9c <main+0x1564>)
   1783e:	739a      	strb	r2, [r3, #14]
			// Throttle Based
			ble_write_buffer[15] = 0x35;
   17840:	4bd6      	ldr	r3, [pc, #856]	; (17b9c <main+0x1564>)
   17842:	2235      	movs	r2, #53	; 0x35
   17844:	73da      	strb	r2, [r3, #15]
			ble_write_buffer[16] = (uint8_t)(RateSens[MODE_ANALOG_THROTTLE] * 100);
   17846:	4bd6      	ldr	r3, [pc, #856]	; (17ba0 <main+0x1568>)
   17848:	68da      	ldr	r2, [r3, #12]
   1784a:	4bd6      	ldr	r3, [pc, #856]	; (17ba4 <main+0x156c>)
   1784c:	49d6      	ldr	r1, [pc, #856]	; (17ba8 <main+0x1570>)
   1784e:	1c10      	adds	r0, r2, #0
   17850:	4798      	blx	r3
   17852:	1c03      	adds	r3, r0, #0
   17854:	1c1a      	adds	r2, r3, #0
   17856:	4bd5      	ldr	r3, [pc, #852]	; (17bac <main+0x1574>)
   17858:	1c10      	adds	r0, r2, #0
   1785a:	4798      	blx	r3
   1785c:	0003      	movs	r3, r0
   1785e:	b2da      	uxtb	r2, r3
   17860:	4bce      	ldr	r3, [pc, #824]	; (17b9c <main+0x1564>)
   17862:	741a      	strb	r2, [r3, #16]
			ble_write_buffer[17] = (uint8_t)(Brightness[MODE_ANALOG_THROTTLE] * 100);
   17864:	4bd2      	ldr	r3, [pc, #840]	; (17bb0 <main+0x1578>)
   17866:	68da      	ldr	r2, [r3, #12]
   17868:	4bce      	ldr	r3, [pc, #824]	; (17ba4 <main+0x156c>)
   1786a:	49cf      	ldr	r1, [pc, #828]	; (17ba8 <main+0x1570>)
   1786c:	1c10      	adds	r0, r2, #0
   1786e:	4798      	blx	r3
   17870:	1c03      	adds	r3, r0, #0
   17872:	1c1a      	adds	r2, r3, #0
   17874:	4bcd      	ldr	r3, [pc, #820]	; (17bac <main+0x1574>)
   17876:	1c10      	adds	r0, r2, #0
   17878:	4798      	blx	r3
   1787a:	0003      	movs	r3, r0
   1787c:	b2da      	uxtb	r2, r3
   1787e:	4bc7      	ldr	r3, [pc, #796]	; (17b9c <main+0x1564>)
   17880:	745a      	strb	r2, [r3, #17]
			// RPM Based
			ble_write_buffer[18] = 0x36;
   17882:	4bc6      	ldr	r3, [pc, #792]	; (17b9c <main+0x1564>)
   17884:	2236      	movs	r2, #54	; 0x36
   17886:	749a      	strb	r2, [r3, #18]
			ble_write_buffer[19] = (uint8_t)(RateSens[MODE_ANALOG_RPM_CYCLE] * 100);
   17888:	4bc5      	ldr	r3, [pc, #788]	; (17ba0 <main+0x1568>)
   1788a:	691a      	ldr	r2, [r3, #16]
   1788c:	4bc5      	ldr	r3, [pc, #788]	; (17ba4 <main+0x156c>)
   1788e:	49c6      	ldr	r1, [pc, #792]	; (17ba8 <main+0x1570>)
   17890:	1c10      	adds	r0, r2, #0
   17892:	4798      	blx	r3
   17894:	1c03      	adds	r3, r0, #0
   17896:	1c1a      	adds	r2, r3, #0
   17898:	4bc4      	ldr	r3, [pc, #784]	; (17bac <main+0x1574>)
   1789a:	1c10      	adds	r0, r2, #0
   1789c:	4798      	blx	r3
   1789e:	0003      	movs	r3, r0
   178a0:	b2da      	uxtb	r2, r3
   178a2:	4bbe      	ldr	r3, [pc, #760]	; (17b9c <main+0x1564>)
   178a4:	74da      	strb	r2, [r3, #19]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 20);
   178a6:	49bd      	ldr	r1, [pc, #756]	; (17b9c <main+0x1564>)
   178a8:	4bc2      	ldr	r3, [pc, #776]	; (17bb4 <main+0x157c>)
   178aa:	2214      	movs	r2, #20
   178ac:	0018      	movs	r0, r3
   178ae:	4bc2      	ldr	r3, [pc, #776]	; (17bb8 <main+0x1580>)
   178b0:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   178b2:	46c0      	nop			; (mov r8, r8)
   178b4:	4bc1      	ldr	r3, [pc, #772]	; (17bbc <main+0x1584>)
   178b6:	4798      	blx	r3
   178b8:	0002      	movs	r2, r0
   178ba:	687b      	ldr	r3, [r7, #4]
   178bc:	1ad3      	subs	r3, r2, r3
   178be:	220c      	movs	r2, #12
   178c0:	18ba      	adds	r2, r7, r2
   178c2:	8812      	ldrh	r2, [r2, #0]
   178c4:	0052      	lsls	r2, r2, #1
   178c6:	4293      	cmp	r3, r2
   178c8:	d3f4      	bcc.n	178b4 <main+0x127c>
			BLE_TX_TIME = millis();
   178ca:	4bbc      	ldr	r3, [pc, #752]	; (17bbc <main+0x1584>)
   178cc:	4798      	blx	r3
   178ce:	0003      	movs	r3, r0
   178d0:	607b      	str	r3, [r7, #4]

			// X Accel Based
			ble_write_buffer[0] = 0x37;
   178d2:	4bb2      	ldr	r3, [pc, #712]	; (17b9c <main+0x1564>)
   178d4:	2237      	movs	r2, #55	; 0x37
   178d6:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RateSens[MODE_ANALOG_X_ACCEL] * 100);
   178d8:	4bb1      	ldr	r3, [pc, #708]	; (17ba0 <main+0x1568>)
   178da:	699a      	ldr	r2, [r3, #24]
   178dc:	4bb1      	ldr	r3, [pc, #708]	; (17ba4 <main+0x156c>)
   178de:	49b2      	ldr	r1, [pc, #712]	; (17ba8 <main+0x1570>)
   178e0:	1c10      	adds	r0, r2, #0
   178e2:	4798      	blx	r3
   178e4:	1c03      	adds	r3, r0, #0
   178e6:	1c1a      	adds	r2, r3, #0
   178e8:	4bb0      	ldr	r3, [pc, #704]	; (17bac <main+0x1574>)
   178ea:	1c10      	adds	r0, r2, #0
   178ec:	4798      	blx	r3
   178ee:	0003      	movs	r3, r0
   178f0:	b2da      	uxtb	r2, r3
   178f2:	4baa      	ldr	r3, [pc, #680]	; (17b9c <main+0x1564>)
   178f4:	705a      	strb	r2, [r3, #1]
			// Y Accel Based
			ble_write_buffer[2] = 0x38;
   178f6:	4ba9      	ldr	r3, [pc, #676]	; (17b9c <main+0x1564>)
   178f8:	2238      	movs	r2, #56	; 0x38
   178fa:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Brightness[MODE_ANALOG_Y_ACCEL] * 100);
   178fc:	4bac      	ldr	r3, [pc, #688]	; (17bb0 <main+0x1578>)
   178fe:	69da      	ldr	r2, [r3, #28]
   17900:	4ba8      	ldr	r3, [pc, #672]	; (17ba4 <main+0x156c>)
   17902:	49a9      	ldr	r1, [pc, #676]	; (17ba8 <main+0x1570>)
   17904:	1c10      	adds	r0, r2, #0
   17906:	4798      	blx	r3
   17908:	1c03      	adds	r3, r0, #0
   1790a:	1c1a      	adds	r2, r3, #0
   1790c:	4ba7      	ldr	r3, [pc, #668]	; (17bac <main+0x1574>)
   1790e:	1c10      	adds	r0, r2, #0
   17910:	4798      	blx	r3
   17912:	0003      	movs	r3, r0
   17914:	b2da      	uxtb	r2, r3
   17916:	4ba1      	ldr	r3, [pc, #644]	; (17b9c <main+0x1564>)
   17918:	70da      	strb	r2, [r3, #3]
			// Custom
			uint8_t color_bright_base = (ColorBase[MODE_ANALOG_CUSTOM] << 4) | BrightBase[MODE_ANALOG_CUSTOM];
   1791a:	4ba9      	ldr	r3, [pc, #676]	; (17bc0 <main+0x1588>)
   1791c:	7a1b      	ldrb	r3, [r3, #8]
   1791e:	011b      	lsls	r3, r3, #4
   17920:	b25a      	sxtb	r2, r3
   17922:	4ba8      	ldr	r3, [pc, #672]	; (17bc4 <main+0x158c>)
   17924:	7a1b      	ldrb	r3, [r3, #8]
   17926:	b25b      	sxtb	r3, r3
   17928:	4313      	orrs	r3, r2
   1792a:	b25a      	sxtb	r2, r3
   1792c:	230a      	movs	r3, #10
   1792e:	18fb      	adds	r3, r7, r3
   17930:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[4] = 0x39;
   17932:	4b9a      	ldr	r3, [pc, #616]	; (17b9c <main+0x1564>)
   17934:	2239      	movs	r2, #57	; 0x39
   17936:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = color_bright_base;
   17938:	4b98      	ldr	r3, [pc, #608]	; (17b9c <main+0x1564>)
   1793a:	220a      	movs	r2, #10
   1793c:	18ba      	adds	r2, r7, r2
   1793e:	7812      	ldrb	r2, [r2, #0]
   17940:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = RateBase[MODE_ANALOG_CUSTOM];
   17942:	4ba1      	ldr	r3, [pc, #644]	; (17bc8 <main+0x1590>)
   17944:	7a1a      	ldrb	r2, [r3, #8]
   17946:	4b95      	ldr	r3, [pc, #596]	; (17b9c <main+0x1564>)
   17948:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Custom_RGB.LR / 655.35);
   1794a:	4ba0      	ldr	r3, [pc, #640]	; (17bcc <main+0x1594>)
   1794c:	881a      	ldrh	r2, [r3, #0]
   1794e:	4b8d      	ldr	r3, [pc, #564]	; (17b84 <main+0x154c>)
   17950:	0010      	movs	r0, r2
   17952:	4798      	blx	r3
   17954:	1c02      	adds	r2, r0, #0
   17956:	4b8c      	ldr	r3, [pc, #560]	; (17b88 <main+0x1550>)
   17958:	1c10      	adds	r0, r2, #0
   1795a:	4798      	blx	r3
   1795c:	4c8b      	ldr	r4, [pc, #556]	; (17b8c <main+0x1554>)
   1795e:	4a8c      	ldr	r2, [pc, #560]	; (17b90 <main+0x1558>)
   17960:	4b8c      	ldr	r3, [pc, #560]	; (17b94 <main+0x155c>)
   17962:	47a0      	blx	r4
   17964:	0003      	movs	r3, r0
   17966:	000c      	movs	r4, r1
   17968:	0019      	movs	r1, r3
   1796a:	0022      	movs	r2, r4
   1796c:	4b8a      	ldr	r3, [pc, #552]	; (17b98 <main+0x1560>)
   1796e:	0008      	movs	r0, r1
   17970:	0011      	movs	r1, r2
   17972:	4798      	blx	r3
   17974:	0003      	movs	r3, r0
   17976:	b2da      	uxtb	r2, r3
   17978:	4b88      	ldr	r3, [pc, #544]	; (17b9c <main+0x1564>)
   1797a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Custom_RGB.LG / 655.35);
   1797c:	4b93      	ldr	r3, [pc, #588]	; (17bcc <main+0x1594>)
   1797e:	885a      	ldrh	r2, [r3, #2]
   17980:	4b80      	ldr	r3, [pc, #512]	; (17b84 <main+0x154c>)
   17982:	0010      	movs	r0, r2
   17984:	4798      	blx	r3
   17986:	1c02      	adds	r2, r0, #0
   17988:	4b7f      	ldr	r3, [pc, #508]	; (17b88 <main+0x1550>)
   1798a:	1c10      	adds	r0, r2, #0
   1798c:	4798      	blx	r3
   1798e:	4c7f      	ldr	r4, [pc, #508]	; (17b8c <main+0x1554>)
   17990:	4a7f      	ldr	r2, [pc, #508]	; (17b90 <main+0x1558>)
   17992:	4b80      	ldr	r3, [pc, #512]	; (17b94 <main+0x155c>)
   17994:	47a0      	blx	r4
   17996:	0003      	movs	r3, r0
   17998:	000c      	movs	r4, r1
   1799a:	0019      	movs	r1, r3
   1799c:	0022      	movs	r2, r4
   1799e:	4b7e      	ldr	r3, [pc, #504]	; (17b98 <main+0x1560>)
   179a0:	0008      	movs	r0, r1
   179a2:	0011      	movs	r1, r2
   179a4:	4798      	blx	r3
   179a6:	0003      	movs	r3, r0
   179a8:	b2da      	uxtb	r2, r3
   179aa:	4b7c      	ldr	r3, [pc, #496]	; (17b9c <main+0x1564>)
   179ac:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)((float)Custom_RGB.LB / 655.35);
   179ae:	4b87      	ldr	r3, [pc, #540]	; (17bcc <main+0x1594>)
   179b0:	889a      	ldrh	r2, [r3, #4]
   179b2:	4b74      	ldr	r3, [pc, #464]	; (17b84 <main+0x154c>)
   179b4:	0010      	movs	r0, r2
   179b6:	4798      	blx	r3
   179b8:	1c02      	adds	r2, r0, #0
   179ba:	4b73      	ldr	r3, [pc, #460]	; (17b88 <main+0x1550>)
   179bc:	1c10      	adds	r0, r2, #0
   179be:	4798      	blx	r3
   179c0:	4c72      	ldr	r4, [pc, #456]	; (17b8c <main+0x1554>)
   179c2:	4a73      	ldr	r2, [pc, #460]	; (17b90 <main+0x1558>)
   179c4:	4b73      	ldr	r3, [pc, #460]	; (17b94 <main+0x155c>)
   179c6:	47a0      	blx	r4
   179c8:	0003      	movs	r3, r0
   179ca:	000c      	movs	r4, r1
   179cc:	0019      	movs	r1, r3
   179ce:	0022      	movs	r2, r4
   179d0:	4b71      	ldr	r3, [pc, #452]	; (17b98 <main+0x1560>)
   179d2:	0008      	movs	r0, r1
   179d4:	0011      	movs	r1, r2
   179d6:	4798      	blx	r3
   179d8:	0003      	movs	r3, r0
   179da:	b2da      	uxtb	r2, r3
   179dc:	4b6f      	ldr	r3, [pc, #444]	; (17b9c <main+0x1564>)
   179de:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)((float)Custom_RGB.RR / 655.35);
   179e0:	4b7a      	ldr	r3, [pc, #488]	; (17bcc <main+0x1594>)
   179e2:	88da      	ldrh	r2, [r3, #6]
   179e4:	4b67      	ldr	r3, [pc, #412]	; (17b84 <main+0x154c>)
   179e6:	0010      	movs	r0, r2
   179e8:	4798      	blx	r3
   179ea:	1c02      	adds	r2, r0, #0
   179ec:	4b66      	ldr	r3, [pc, #408]	; (17b88 <main+0x1550>)
   179ee:	1c10      	adds	r0, r2, #0
   179f0:	4798      	blx	r3
   179f2:	4c66      	ldr	r4, [pc, #408]	; (17b8c <main+0x1554>)
   179f4:	4a66      	ldr	r2, [pc, #408]	; (17b90 <main+0x1558>)
   179f6:	4b67      	ldr	r3, [pc, #412]	; (17b94 <main+0x155c>)
   179f8:	47a0      	blx	r4
   179fa:	0003      	movs	r3, r0
   179fc:	000c      	movs	r4, r1
   179fe:	0019      	movs	r1, r3
   17a00:	0022      	movs	r2, r4
   17a02:	4b65      	ldr	r3, [pc, #404]	; (17b98 <main+0x1560>)
   17a04:	0008      	movs	r0, r1
   17a06:	0011      	movs	r1, r2
   17a08:	4798      	blx	r3
   17a0a:	0003      	movs	r3, r0
   17a0c:	b2da      	uxtb	r2, r3
   17a0e:	4b63      	ldr	r3, [pc, #396]	; (17b9c <main+0x1564>)
   17a10:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)((float)Custom_RGB.RG / 655.35);
   17a12:	4b6e      	ldr	r3, [pc, #440]	; (17bcc <main+0x1594>)
   17a14:	891a      	ldrh	r2, [r3, #8]
   17a16:	4b5b      	ldr	r3, [pc, #364]	; (17b84 <main+0x154c>)
   17a18:	0010      	movs	r0, r2
   17a1a:	4798      	blx	r3
   17a1c:	1c02      	adds	r2, r0, #0
   17a1e:	4b5a      	ldr	r3, [pc, #360]	; (17b88 <main+0x1550>)
   17a20:	1c10      	adds	r0, r2, #0
   17a22:	4798      	blx	r3
   17a24:	4c59      	ldr	r4, [pc, #356]	; (17b8c <main+0x1554>)
   17a26:	4a5a      	ldr	r2, [pc, #360]	; (17b90 <main+0x1558>)
   17a28:	4b5a      	ldr	r3, [pc, #360]	; (17b94 <main+0x155c>)
   17a2a:	47a0      	blx	r4
   17a2c:	0003      	movs	r3, r0
   17a2e:	000c      	movs	r4, r1
   17a30:	0019      	movs	r1, r3
   17a32:	0022      	movs	r2, r4
   17a34:	4b58      	ldr	r3, [pc, #352]	; (17b98 <main+0x1560>)
   17a36:	0008      	movs	r0, r1
   17a38:	0011      	movs	r1, r2
   17a3a:	4798      	blx	r3
   17a3c:	0003      	movs	r3, r0
   17a3e:	b2da      	uxtb	r2, r3
   17a40:	4b56      	ldr	r3, [pc, #344]	; (17b9c <main+0x1564>)
   17a42:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)((float)Custom_RGB.RB / 655.35);
   17a44:	4b61      	ldr	r3, [pc, #388]	; (17bcc <main+0x1594>)
   17a46:	895a      	ldrh	r2, [r3, #10]
   17a48:	4b4e      	ldr	r3, [pc, #312]	; (17b84 <main+0x154c>)
   17a4a:	0010      	movs	r0, r2
   17a4c:	4798      	blx	r3
   17a4e:	1c02      	adds	r2, r0, #0
   17a50:	4b4d      	ldr	r3, [pc, #308]	; (17b88 <main+0x1550>)
   17a52:	1c10      	adds	r0, r2, #0
   17a54:	4798      	blx	r3
   17a56:	4c4d      	ldr	r4, [pc, #308]	; (17b8c <main+0x1554>)
   17a58:	4a4d      	ldr	r2, [pc, #308]	; (17b90 <main+0x1558>)
   17a5a:	4b4e      	ldr	r3, [pc, #312]	; (17b94 <main+0x155c>)
   17a5c:	47a0      	blx	r4
   17a5e:	0003      	movs	r3, r0
   17a60:	000c      	movs	r4, r1
   17a62:	0019      	movs	r1, r3
   17a64:	0022      	movs	r2, r4
   17a66:	4b4c      	ldr	r3, [pc, #304]	; (17b98 <main+0x1560>)
   17a68:	0008      	movs	r0, r1
   17a6a:	0011      	movs	r1, r2
   17a6c:	4798      	blx	r3
   17a6e:	0003      	movs	r3, r0
   17a70:	b2da      	uxtb	r2, r3
   17a72:	4b4a      	ldr	r3, [pc, #296]	; (17b9c <main+0x1564>)
   17a74:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(RateSens[MODE_ANALOG_CUSTOM] * 100);
   17a76:	4b4a      	ldr	r3, [pc, #296]	; (17ba0 <main+0x1568>)
   17a78:	6a1a      	ldr	r2, [r3, #32]
   17a7a:	4b4a      	ldr	r3, [pc, #296]	; (17ba4 <main+0x156c>)
   17a7c:	494a      	ldr	r1, [pc, #296]	; (17ba8 <main+0x1570>)
   17a7e:	1c10      	adds	r0, r2, #0
   17a80:	4798      	blx	r3
   17a82:	1c03      	adds	r3, r0, #0
   17a84:	1c1a      	adds	r2, r3, #0
   17a86:	4b49      	ldr	r3, [pc, #292]	; (17bac <main+0x1574>)
   17a88:	1c10      	adds	r0, r2, #0
   17a8a:	4798      	blx	r3
   17a8c:	0003      	movs	r3, r0
   17a8e:	b2da      	uxtb	r2, r3
   17a90:	4b42      	ldr	r3, [pc, #264]	; (17b9c <main+0x1564>)
   17a92:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_ANALOG_CUSTOM] * 100);
   17a94:	4b46      	ldr	r3, [pc, #280]	; (17bb0 <main+0x1578>)
   17a96:	6a1a      	ldr	r2, [r3, #32]
   17a98:	4b42      	ldr	r3, [pc, #264]	; (17ba4 <main+0x156c>)
   17a9a:	4943      	ldr	r1, [pc, #268]	; (17ba8 <main+0x1570>)
   17a9c:	1c10      	adds	r0, r2, #0
   17a9e:	4798      	blx	r3
   17aa0:	1c03      	adds	r3, r0, #0
   17aa2:	1c1a      	adds	r2, r3, #0
   17aa4:	4b41      	ldr	r3, [pc, #260]	; (17bac <main+0x1574>)
   17aa6:	1c10      	adds	r0, r2, #0
   17aa8:	4798      	blx	r3
   17aaa:	0003      	movs	r3, r0
   17aac:	b2da      	uxtb	r2, r3
   17aae:	4b3b      	ldr	r3, [pc, #236]	; (17b9c <main+0x1564>)
   17ab0:	739a      	strb	r2, [r3, #14]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 15);
   17ab2:	493a      	ldr	r1, [pc, #232]	; (17b9c <main+0x1564>)
   17ab4:	4b3f      	ldr	r3, [pc, #252]	; (17bb4 <main+0x157c>)
   17ab6:	220f      	movs	r2, #15
   17ab8:	0018      	movs	r0, r3
   17aba:	4b3f      	ldr	r3, [pc, #252]	; (17bb8 <main+0x1580>)
   17abc:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17abe:	46c0      	nop			; (mov r8, r8)
   17ac0:	4b3e      	ldr	r3, [pc, #248]	; (17bbc <main+0x1584>)
   17ac2:	4798      	blx	r3
   17ac4:	0002      	movs	r2, r0
   17ac6:	687b      	ldr	r3, [r7, #4]
   17ac8:	1ad3      	subs	r3, r2, r3
   17aca:	220c      	movs	r2, #12
   17acc:	18ba      	adds	r2, r7, r2
   17ace:	8812      	ldrh	r2, [r2, #0]
   17ad0:	0052      	lsls	r2, r2, #1
   17ad2:	4293      	cmp	r3, r2
   17ad4:	d3f4      	bcc.n	17ac0 <main+0x1488>
			BLE_TX_TIME = millis();
   17ad6:	4b39      	ldr	r3, [pc, #228]	; (17bbc <main+0x1584>)
   17ad8:	4798      	blx	r3
   17ada:	0003      	movs	r3, r0
   17adc:	607b      	str	r3, [r7, #4]

			// Y Accel Based
			ble_write_buffer[0] = 0x3A;
   17ade:	4b2f      	ldr	r3, [pc, #188]	; (17b9c <main+0x1564>)
   17ae0:	223a      	movs	r2, #58	; 0x3a
   17ae2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(Digital_Static_Zoom);
   17ae4:	4b3a      	ldr	r3, [pc, #232]	; (17bd0 <main+0x1598>)
   17ae6:	781a      	ldrb	r2, [r3, #0]
   17ae8:	4b2c      	ldr	r3, [pc, #176]	; (17b9c <main+0x1564>)
   17aea:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(Digital_Static_Shift);
   17aec:	4b39      	ldr	r3, [pc, #228]	; (17bd4 <main+0x159c>)
   17aee:	781a      	ldrb	r2, [r3, #0]
   17af0:	4b2a      	ldr	r3, [pc, #168]	; (17b9c <main+0x1564>)
   17af2:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Digital_Static_Brightness);
   17af4:	4b38      	ldr	r3, [pc, #224]	; (17bd8 <main+0x15a0>)
   17af6:	781a      	ldrb	r2, [r3, #0]
   17af8:	4b28      	ldr	r3, [pc, #160]	; (17b9c <main+0x1564>)
   17afa:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x3B;
   17afc:	4b27      	ldr	r3, [pc, #156]	; (17b9c <main+0x1564>)
   17afe:	223b      	movs	r2, #59	; 0x3b
   17b00:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)(Digital_Skittles_Brightness);
   17b02:	4b36      	ldr	r3, [pc, #216]	; (17bdc <main+0x15a4>)
   17b04:	781a      	ldrb	r2, [r3, #0]
   17b06:	4b25      	ldr	r3, [pc, #148]	; (17b9c <main+0x1564>)
   17b08:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x3C;
   17b0a:	4b24      	ldr	r3, [pc, #144]	; (17b9c <main+0x1564>)
   17b0c:	223c      	movs	r2, #60	; 0x3c
   17b0e:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)(Digital_Cycle_Zoom);
   17b10:	4b33      	ldr	r3, [pc, #204]	; (17be0 <main+0x15a8>)
   17b12:	781a      	ldrb	r2, [r3, #0]
   17b14:	4b21      	ldr	r3, [pc, #132]	; (17b9c <main+0x1564>)
   17b16:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)(Digital_Cycle_Rate);
   17b18:	4b32      	ldr	r3, [pc, #200]	; (17be4 <main+0x15ac>)
   17b1a:	781a      	ldrb	r2, [r3, #0]
   17b1c:	4b1f      	ldr	r3, [pc, #124]	; (17b9c <main+0x1564>)
   17b1e:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)(Digital_Cycle_Brightness);
   17b20:	4b31      	ldr	r3, [pc, #196]	; (17be8 <main+0x15b0>)
   17b22:	781a      	ldrb	r2, [r3, #0]
   17b24:	4b1d      	ldr	r3, [pc, #116]	; (17b9c <main+0x1564>)
   17b26:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   17b28:	491c      	ldr	r1, [pc, #112]	; (17b9c <main+0x1564>)
   17b2a:	4b22      	ldr	r3, [pc, #136]	; (17bb4 <main+0x157c>)
   17b2c:	220a      	movs	r2, #10
   17b2e:	0018      	movs	r0, r3
   17b30:	4b21      	ldr	r3, [pc, #132]	; (17bb8 <main+0x1580>)
   17b32:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17b34:	46c0      	nop			; (mov r8, r8)
   17b36:	4b21      	ldr	r3, [pc, #132]	; (17bbc <main+0x1584>)
   17b38:	4798      	blx	r3
   17b3a:	0002      	movs	r2, r0
   17b3c:	687b      	ldr	r3, [r7, #4]
   17b3e:	1ad3      	subs	r3, r2, r3
   17b40:	220c      	movs	r2, #12
   17b42:	18ba      	adds	r2, r7, r2
   17b44:	8812      	ldrh	r2, [r2, #0]
   17b46:	0052      	lsls	r2, r2, #1
   17b48:	4293      	cmp	r3, r2
   17b4a:	d3f4      	bcc.n	17b36 <main+0x14fe>
			BLE_TX_TIME = millis();
   17b4c:	4b1b      	ldr	r3, [pc, #108]	; (17bbc <main+0x1584>)
   17b4e:	4798      	blx	r3
   17b50:	0003      	movs	r3, r0
   17b52:	607b      	str	r3, [r7, #4]

			ble_write_buffer[0] = 0x3D;
   17b54:	4b11      	ldr	r3, [pc, #68]	; (17b9c <main+0x1564>)
   17b56:	223d      	movs	r2, #61	; 0x3d
   17b58:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(Digital_Compass_Brightness);
   17b5a:	4b24      	ldr	r3, [pc, #144]	; (17bec <main+0x15b4>)
   17b5c:	781a      	ldrb	r2, [r3, #0]
   17b5e:	4b0f      	ldr	r3, [pc, #60]	; (17b9c <main+0x1564>)
   17b60:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x3E;
   17b62:	4b0e      	ldr	r3, [pc, #56]	; (17b9c <main+0x1564>)
   17b64:	223e      	movs	r2, #62	; 0x3e
   17b66:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Digital_Throttle_Zoom);
   17b68:	4b21      	ldr	r3, [pc, #132]	; (17bf0 <main+0x15b8>)
   17b6a:	781a      	ldrb	r2, [r3, #0]
   17b6c:	4b0b      	ldr	r3, [pc, #44]	; (17b9c <main+0x1564>)
   17b6e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)(Digital_Throttle_Shift);
   17b70:	4b20      	ldr	r3, [pc, #128]	; (17bf4 <main+0x15bc>)
   17b72:	781a      	ldrb	r2, [r3, #0]
   17b74:	4b09      	ldr	r3, [pc, #36]	; (17b9c <main+0x1564>)
   17b76:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)(Digital_Throttle_Sens);
   17b78:	4b1f      	ldr	r3, [pc, #124]	; (17bf8 <main+0x15c0>)
   17b7a:	781a      	ldrb	r2, [r3, #0]
   17b7c:	e03e      	b.n	17bfc <main+0x15c4>
   17b7e:	46c0      	nop			; (mov r8, r8)
   17b80:	20000038 	.word	0x20000038
   17b84:	00019605 	.word	0x00019605
   17b88:	0001b1a1 	.word	0x0001b1a1
   17b8c:	00019cb1 	.word	0x00019cb1
   17b90:	cccccccd 	.word	0xcccccccd
   17b94:	40847acc 	.word	0x40847acc
   17b98:	0001886d 	.word	0x0001886d
   17b9c:	20000dec 	.word	0x20000dec
   17ba0:	20000044 	.word	0x20000044
   17ba4:	00018fad 	.word	0x00018fad
   17ba8:	42c80000 	.word	0x42c80000
   17bac:	0001883d 	.word	0x0001883d
   17bb0:	20000068 	.word	0x20000068
   17bb4:	200006ac 	.word	0x200006ac
   17bb8:	000063bd 	.word	0x000063bd
   17bbc:	00009f65 	.word	0x00009f65
   17bc0:	2000008c 	.word	0x2000008c
   17bc4:	20000098 	.word	0x20000098
   17bc8:	200000a4 	.word	0x200000a4
   17bcc:	200000bc 	.word	0x200000bc
   17bd0:	200000ad 	.word	0x200000ad
   17bd4:	200000ae 	.word	0x200000ae
   17bd8:	200000af 	.word	0x200000af
   17bdc:	200000b0 	.word	0x200000b0
   17be0:	200000b1 	.word	0x200000b1
   17be4:	200000b2 	.word	0x200000b2
   17be8:	200000b3 	.word	0x200000b3
   17bec:	200000b4 	.word	0x200000b4
   17bf0:	200000b5 	.word	0x200000b5
   17bf4:	200000b6 	.word	0x200000b6
   17bf8:	200000b7 	.word	0x200000b7
   17bfc:	4be6      	ldr	r3, [pc, #920]	; (17f98 <main+0x1960>)
   17bfe:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)(Digital_Throttle_Brightness);
   17c00:	4be6      	ldr	r3, [pc, #920]	; (17f9c <main+0x1964>)
   17c02:	781a      	ldrb	r2, [r3, #0]
   17c04:	4be4      	ldr	r3, [pc, #912]	; (17f98 <main+0x1960>)
   17c06:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = 0x3F;
   17c08:	4be3      	ldr	r3, [pc, #908]	; (17f98 <main+0x1960>)
   17c0a:	223f      	movs	r2, #63	; 0x3f
   17c0c:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)(Digital_RPM_Zoom);
   17c0e:	4be4      	ldr	r3, [pc, #912]	; (17fa0 <main+0x1968>)
   17c10:	781a      	ldrb	r2, [r3, #0]
   17c12:	4be1      	ldr	r3, [pc, #900]	; (17f98 <main+0x1960>)
   17c14:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)(Digital_RPM_Rate);
   17c16:	4be3      	ldr	r3, [pc, #908]	; (17fa4 <main+0x196c>)
   17c18:	781a      	ldrb	r2, [r3, #0]
   17c1a:	4bdf      	ldr	r3, [pc, #892]	; (17f98 <main+0x1960>)
   17c1c:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)(Digital_RPM_Brightness);
   17c1e:	4be2      	ldr	r3, [pc, #904]	; (17fa8 <main+0x1970>)
   17c20:	781a      	ldrb	r2, [r3, #0]
   17c22:	4bdd      	ldr	r3, [pc, #884]	; (17f98 <main+0x1960>)
   17c24:	729a      	strb	r2, [r3, #10]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 11);
   17c26:	49dc      	ldr	r1, [pc, #880]	; (17f98 <main+0x1960>)
   17c28:	4be0      	ldr	r3, [pc, #896]	; (17fac <main+0x1974>)
   17c2a:	220b      	movs	r2, #11
   17c2c:	0018      	movs	r0, r3
   17c2e:	4be0      	ldr	r3, [pc, #896]	; (17fb0 <main+0x1978>)
   17c30:	4798      	blx	r3

			SEND_LED_CHARS = 0;
   17c32:	4be0      	ldr	r3, [pc, #896]	; (17fb4 <main+0x197c>)
   17c34:	2200      	movs	r2, #0
   17c36:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17c38:	4bdf      	ldr	r3, [pc, #892]	; (17fb8 <main+0x1980>)
   17c3a:	2201      	movs	r2, #1
   17c3c:	701a      	strb	r2, [r3, #0]
	}
		

		//////////////////////////   Handle Orientation Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ORIENTAION_CONFIG)
   17c3e:	4bdf      	ldr	r3, [pc, #892]	; (17fbc <main+0x1984>)
   17c40:	781b      	ldrb	r3, [r3, #0]
   17c42:	2b00      	cmp	r3, #0
   17c44:	d026      	beq.n	17c94 <main+0x165c>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17c46:	46c0      	nop			; (mov r8, r8)
   17c48:	4bdd      	ldr	r3, [pc, #884]	; (17fc0 <main+0x1988>)
   17c4a:	4798      	blx	r3
   17c4c:	0002      	movs	r2, r0
   17c4e:	687b      	ldr	r3, [r7, #4]
   17c50:	1ad3      	subs	r3, r2, r3
   17c52:	220c      	movs	r2, #12
   17c54:	18ba      	adds	r2, r7, r2
   17c56:	8812      	ldrh	r2, [r2, #0]
   17c58:	0052      	lsls	r2, r2, #1
   17c5a:	4293      	cmp	r3, r2
   17c5c:	d3f4      	bcc.n	17c48 <main+0x1610>
			BLE_TX_TIME = millis();
   17c5e:	4bd8      	ldr	r3, [pc, #864]	; (17fc0 <main+0x1988>)
   17c60:	4798      	blx	r3
   17c62:	0003      	movs	r3, r0
   17c64:	607b      	str	r3, [r7, #4]

			// Global LED Settings
			ble_write_buffer[0] = BLE_ORIENTATION_CONFIG;//0x71;
   17c66:	4bcc      	ldr	r3, [pc, #816]	; (17f98 <main+0x1960>)
   17c68:	2271      	movs	r2, #113	; 0x71
   17c6a:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ORIENTATION[0]; // Connectors Orientation
   17c6c:	4bd5      	ldr	r3, [pc, #852]	; (17fc4 <main+0x198c>)
   17c6e:	781a      	ldrb	r2, [r3, #0]
   17c70:	4bc9      	ldr	r3, [pc, #804]	; (17f98 <main+0x1960>)
   17c72:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ORIENTATION[1]; // Power Orientation
   17c74:	4bd3      	ldr	r3, [pc, #844]	; (17fc4 <main+0x198c>)
   17c76:	785a      	ldrb	r2, [r3, #1]
   17c78:	4bc7      	ldr	r3, [pc, #796]	; (17f98 <main+0x1960>)
   17c7a:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   17c7c:	49c6      	ldr	r1, [pc, #792]	; (17f98 <main+0x1960>)
   17c7e:	4bcb      	ldr	r3, [pc, #812]	; (17fac <main+0x1974>)
   17c80:	2203      	movs	r2, #3
   17c82:	0018      	movs	r0, r3
   17c84:	4bca      	ldr	r3, [pc, #808]	; (17fb0 <main+0x1978>)
   17c86:	4798      	blx	r3


			SEND_ORIENTAION_CONFIG = 0;
   17c88:	4bcc      	ldr	r3, [pc, #816]	; (17fbc <main+0x1984>)
   17c8a:	2200      	movs	r2, #0
   17c8c:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17c8e:	4bca      	ldr	r3, [pc, #808]	; (17fb8 <main+0x1980>)
   17c90:	2201      	movs	r2, #1
   17c92:	701a      	strb	r2, [r3, #0]
		}


		///////////////////////////   Handle Controls Request   ///////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_CONTROLS_CONFIG)
   17c94:	4bcc      	ldr	r3, [pc, #816]	; (17fc8 <main+0x1990>)
   17c96:	781b      	ldrb	r3, [r3, #0]
   17c98:	2b00      	cmp	r3, #0
   17c9a:	d07c      	beq.n	17d96 <main+0x175e>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17c9c:	46c0      	nop			; (mov r8, r8)
   17c9e:	4bc8      	ldr	r3, [pc, #800]	; (17fc0 <main+0x1988>)
   17ca0:	4798      	blx	r3
   17ca2:	0002      	movs	r2, r0
   17ca4:	687b      	ldr	r3, [r7, #4]
   17ca6:	1ad3      	subs	r3, r2, r3
   17ca8:	220c      	movs	r2, #12
   17caa:	18ba      	adds	r2, r7, r2
   17cac:	8812      	ldrh	r2, [r2, #0]
   17cae:	0052      	lsls	r2, r2, #1
   17cb0:	4293      	cmp	r3, r2
   17cb2:	d3f4      	bcc.n	17c9e <main+0x1666>
			BLE_TX_TIME = millis();
   17cb4:	4bc2      	ldr	r3, [pc, #776]	; (17fc0 <main+0x1988>)
   17cb6:	4798      	blx	r3
   17cb8:	0003      	movs	r3, r0
   17cba:	607b      	str	r3, [r7, #4]

			// Global LED Settings
			ble_write_buffer[0] = BLE_CONTROLS_CONFIG;//0x81;
   17cbc:	4bb6      	ldr	r3, [pc, #728]	; (17f98 <main+0x1960>)
   17cbe:	2281      	movs	r2, #129	; 0x81
   17cc0:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((AUX_ENABLED << 7) | (TURN_ENABLED << 6) | auxControlType);
   17cc2:	4bc2      	ldr	r3, [pc, #776]	; (17fcc <main+0x1994>)
   17cc4:	781b      	ldrb	r3, [r3, #0]
   17cc6:	01db      	lsls	r3, r3, #7
   17cc8:	b25a      	sxtb	r2, r3
   17cca:	4bc1      	ldr	r3, [pc, #772]	; (17fd0 <main+0x1998>)
   17ccc:	781b      	ldrb	r3, [r3, #0]
   17cce:	019b      	lsls	r3, r3, #6
   17cd0:	b25b      	sxtb	r3, r3
   17cd2:	4313      	orrs	r3, r2
   17cd4:	b25a      	sxtb	r2, r3
   17cd6:	4bbf      	ldr	r3, [pc, #764]	; (17fd4 <main+0x199c>)
   17cd8:	781b      	ldrb	r3, [r3, #0]
   17cda:	b25b      	sxtb	r3, r3
   17cdc:	4313      	orrs	r3, r2
   17cde:	b25b      	sxtb	r3, r3
   17ce0:	b2da      	uxtb	r2, r3
   17ce2:	4bad      	ldr	r3, [pc, #692]	; (17f98 <main+0x1960>)
   17ce4:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)auxTimedDuration;
   17ce6:	4bbc      	ldr	r3, [pc, #752]	; (17fd8 <main+0x19a0>)
   17ce8:	781a      	ldrb	r2, [r3, #0]
   17cea:	4bab      	ldr	r3, [pc, #684]	; (17f98 <main+0x1960>)
   17cec:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((single_aux_control << 4) | single_all_control);
   17cee:	4bbb      	ldr	r3, [pc, #748]	; (17fdc <main+0x19a4>)
   17cf0:	781b      	ldrb	r3, [r3, #0]
   17cf2:	011b      	lsls	r3, r3, #4
   17cf4:	b25a      	sxtb	r2, r3
   17cf6:	4bba      	ldr	r3, [pc, #744]	; (17fe0 <main+0x19a8>)
   17cf8:	781b      	ldrb	r3, [r3, #0]
   17cfa:	b25b      	sxtb	r3, r3
   17cfc:	4313      	orrs	r3, r2
   17cfe:	b25b      	sxtb	r3, r3
   17d00:	b2da      	uxtb	r2, r3
   17d02:	4ba5      	ldr	r3, [pc, #660]	; (17f98 <main+0x1960>)
   17d04:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((single_head_control << 4) | single_side_control);
   17d06:	4bb7      	ldr	r3, [pc, #732]	; (17fe4 <main+0x19ac>)
   17d08:	781b      	ldrb	r3, [r3, #0]
   17d0a:	011b      	lsls	r3, r3, #4
   17d0c:	b25a      	sxtb	r2, r3
   17d0e:	4bb6      	ldr	r3, [pc, #728]	; (17fe8 <main+0x19b0>)
   17d10:	781b      	ldrb	r3, [r3, #0]
   17d12:	b25b      	sxtb	r3, r3
   17d14:	4313      	orrs	r3, r2
   17d16:	b25b      	sxtb	r3, r3
   17d18:	b2da      	uxtb	r2, r3
   17d1a:	4b9f      	ldr	r3, [pc, #636]	; (17f98 <main+0x1960>)
   17d1c:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((single_down_control << 4) | single_up_control);
   17d1e:	4bb3      	ldr	r3, [pc, #716]	; (17fec <main+0x19b4>)
   17d20:	781b      	ldrb	r3, [r3, #0]
   17d22:	011b      	lsls	r3, r3, #4
   17d24:	b25a      	sxtb	r2, r3
   17d26:	4bb2      	ldr	r3, [pc, #712]	; (17ff0 <main+0x19b8>)
   17d28:	781b      	ldrb	r3, [r3, #0]
   17d2a:	b25b      	sxtb	r3, r3
   17d2c:	4313      	orrs	r3, r2
   17d2e:	b25b      	sxtb	r3, r3
   17d30:	b2da      	uxtb	r2, r3
   17d32:	4b99      	ldr	r3, [pc, #612]	; (17f98 <main+0x1960>)
   17d34:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((dual_aux_control << 4) | dual_all_control);
   17d36:	4baf      	ldr	r3, [pc, #700]	; (17ff4 <main+0x19bc>)
   17d38:	781b      	ldrb	r3, [r3, #0]
   17d3a:	011b      	lsls	r3, r3, #4
   17d3c:	b25a      	sxtb	r2, r3
   17d3e:	4bae      	ldr	r3, [pc, #696]	; (17ff8 <main+0x19c0>)
   17d40:	781b      	ldrb	r3, [r3, #0]
   17d42:	b25b      	sxtb	r3, r3
   17d44:	4313      	orrs	r3, r2
   17d46:	b25b      	sxtb	r3, r3
   17d48:	b2da      	uxtb	r2, r3
   17d4a:	4b93      	ldr	r3, [pc, #588]	; (17f98 <main+0x1960>)
   17d4c:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((dual_head_control << 4) | dual_side_control);
   17d4e:	4bab      	ldr	r3, [pc, #684]	; (17ffc <main+0x19c4>)
   17d50:	781b      	ldrb	r3, [r3, #0]
   17d52:	011b      	lsls	r3, r3, #4
   17d54:	b25a      	sxtb	r2, r3
   17d56:	4baa      	ldr	r3, [pc, #680]	; (18000 <main+0x19c8>)
   17d58:	781b      	ldrb	r3, [r3, #0]
   17d5a:	b25b      	sxtb	r3, r3
   17d5c:	4313      	orrs	r3, r2
   17d5e:	b25b      	sxtb	r3, r3
   17d60:	b2da      	uxtb	r2, r3
   17d62:	4b8d      	ldr	r3, [pc, #564]	; (17f98 <main+0x1960>)
   17d64:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((dual_down_control << 4) | dual_up_control);
   17d66:	4ba7      	ldr	r3, [pc, #668]	; (18004 <main+0x19cc>)
   17d68:	781b      	ldrb	r3, [r3, #0]
   17d6a:	011b      	lsls	r3, r3, #4
   17d6c:	b25a      	sxtb	r2, r3
   17d6e:	4ba6      	ldr	r3, [pc, #664]	; (18008 <main+0x19d0>)
   17d70:	781b      	ldrb	r3, [r3, #0]
   17d72:	b25b      	sxtb	r3, r3
   17d74:	4313      	orrs	r3, r2
   17d76:	b25b      	sxtb	r3, r3
   17d78:	b2da      	uxtb	r2, r3
   17d7a:	4b87      	ldr	r3, [pc, #540]	; (17f98 <main+0x1960>)
   17d7c:	721a      	strb	r2, [r3, #8]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 9);
   17d7e:	4986      	ldr	r1, [pc, #536]	; (17f98 <main+0x1960>)
   17d80:	4b8a      	ldr	r3, [pc, #552]	; (17fac <main+0x1974>)
   17d82:	2209      	movs	r2, #9
   17d84:	0018      	movs	r0, r3
   17d86:	4b8a      	ldr	r3, [pc, #552]	; (17fb0 <main+0x1978>)
   17d88:	4798      	blx	r3

			SEND_CONTROLS_CONFIG = 0;
   17d8a:	4b8f      	ldr	r3, [pc, #572]	; (17fc8 <main+0x1990>)
   17d8c:	2200      	movs	r2, #0
   17d8e:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17d90:	4b89      	ldr	r3, [pc, #548]	; (17fb8 <main+0x1980>)
   17d92:	2201      	movs	r2, #1
   17d94:	701a      	strb	r2, [r3, #0]
		}


		/////////////////////////   Handle Remote Config Request   ////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_REMOTE_CONFIG)
   17d96:	4b9d      	ldr	r3, [pc, #628]	; (1800c <main+0x19d4>)
   17d98:	781b      	ldrb	r3, [r3, #0]
   17d9a:	2b00      	cmp	r3, #0
   17d9c:	d02e      	beq.n	17dfc <main+0x17c4>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17d9e:	46c0      	nop			; (mov r8, r8)
   17da0:	4b87      	ldr	r3, [pc, #540]	; (17fc0 <main+0x1988>)
   17da2:	4798      	blx	r3
   17da4:	0002      	movs	r2, r0
   17da6:	687b      	ldr	r3, [r7, #4]
   17da8:	1ad3      	subs	r3, r2, r3
   17daa:	220c      	movs	r2, #12
   17dac:	18ba      	adds	r2, r7, r2
   17dae:	8812      	ldrh	r2, [r2, #0]
   17db0:	0052      	lsls	r2, r2, #1
   17db2:	4293      	cmp	r3, r2
   17db4:	d3f4      	bcc.n	17da0 <main+0x1768>
			BLE_TX_TIME = millis();
   17db6:	4b82      	ldr	r3, [pc, #520]	; (17fc0 <main+0x1988>)
   17db8:	4798      	blx	r3
   17dba:	0003      	movs	r3, r0
   17dbc:	607b      	str	r3, [r7, #4]

			// Global LED Settings
			ble_write_buffer[0] = BLE_REMOTE_CONFIG;//0x72;
   17dbe:	4b76      	ldr	r3, [pc, #472]	; (17f98 <main+0x1960>)
   17dc0:	2272      	movs	r2, #114	; 0x72
   17dc2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((remote_type << 4) | button_type);
   17dc4:	4b92      	ldr	r3, [pc, #584]	; (18010 <main+0x19d8>)
   17dc6:	781b      	ldrb	r3, [r3, #0]
   17dc8:	011b      	lsls	r3, r3, #4
   17dca:	b25a      	sxtb	r2, r3
   17dcc:	4b91      	ldr	r3, [pc, #580]	; (18014 <main+0x19dc>)
   17dce:	781b      	ldrb	r3, [r3, #0]
   17dd0:	b25b      	sxtb	r3, r3
   17dd2:	4313      	orrs	r3, r2
   17dd4:	b25b      	sxtb	r3, r3
   17dd6:	b2da      	uxtb	r2, r3
   17dd8:	4b6f      	ldr	r3, [pc, #444]	; (17f98 <main+0x1960>)
   17dda:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   17ddc:	4b8e      	ldr	r3, [pc, #568]	; (18018 <main+0x19e0>)
   17dde:	781a      	ldrb	r2, [r3, #0]
   17de0:	4b6d      	ldr	r3, [pc, #436]	; (17f98 <main+0x1960>)
   17de2:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   17de4:	496c      	ldr	r1, [pc, #432]	; (17f98 <main+0x1960>)
   17de6:	4b71      	ldr	r3, [pc, #452]	; (17fac <main+0x1974>)
   17de8:	2203      	movs	r2, #3
   17dea:	0018      	movs	r0, r3
   17dec:	4b70      	ldr	r3, [pc, #448]	; (17fb0 <main+0x1978>)
   17dee:	4798      	blx	r3

			SEND_REMOTE_CONFIG = 0;
   17df0:	4b86      	ldr	r3, [pc, #536]	; (1800c <main+0x19d4>)
   17df2:	2200      	movs	r2, #0
   17df4:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17df6:	4b70      	ldr	r3, [pc, #448]	; (17fb8 <main+0x1980>)
   17df8:	2201      	movs	r2, #1
   17dfa:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle ESC Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ESC_CONFIG)
   17dfc:	4b87      	ldr	r3, [pc, #540]	; (1801c <main+0x19e4>)
   17dfe:	781b      	ldrb	r3, [r3, #0]
   17e00:	2b00      	cmp	r3, #0
   17e02:	d02e      	beq.n	17e62 <main+0x182a>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17e04:	46c0      	nop			; (mov r8, r8)
   17e06:	4b6e      	ldr	r3, [pc, #440]	; (17fc0 <main+0x1988>)
   17e08:	4798      	blx	r3
   17e0a:	0002      	movs	r2, r0
   17e0c:	687b      	ldr	r3, [r7, #4]
   17e0e:	1ad3      	subs	r3, r2, r3
   17e10:	220c      	movs	r2, #12
   17e12:	18ba      	adds	r2, r7, r2
   17e14:	8812      	ldrh	r2, [r2, #0]
   17e16:	0052      	lsls	r2, r2, #1
   17e18:	4293      	cmp	r3, r2
   17e1a:	d3f4      	bcc.n	17e06 <main+0x17ce>
			BLE_TX_TIME = millis();
   17e1c:	4b68      	ldr	r3, [pc, #416]	; (17fc0 <main+0x1988>)
   17e1e:	4798      	blx	r3
   17e20:	0003      	movs	r3, r0
   17e22:	607b      	str	r3, [r7, #4]

			// Global LED Settings
			ble_write_buffer[0] = BLE_ESC_CONFIG;//0x73;
   17e24:	4b5c      	ldr	r3, [pc, #368]	; (17f98 <main+0x1960>)
   17e26:	2273      	movs	r2, #115	; 0x73
   17e28:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(esc_fw);
   17e2a:	4b7d      	ldr	r3, [pc, #500]	; (18020 <main+0x19e8>)
   17e2c:	781a      	ldrb	r2, [r3, #0]
   17e2e:	4b5a      	ldr	r3, [pc, #360]	; (17f98 <main+0x1960>)
   17e30:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)((esc_comms << 4) | UART_baud);
   17e32:	4b7c      	ldr	r3, [pc, #496]	; (18024 <main+0x19ec>)
   17e34:	781b      	ldrb	r3, [r3, #0]
   17e36:	011b      	lsls	r3, r3, #4
   17e38:	b25a      	sxtb	r2, r3
   17e3a:	4b7b      	ldr	r3, [pc, #492]	; (18028 <main+0x19f0>)
   17e3c:	781b      	ldrb	r3, [r3, #0]
   17e3e:	b25b      	sxtb	r3, r3
   17e40:	4313      	orrs	r3, r2
   17e42:	b25b      	sxtb	r3, r3
   17e44:	b2da      	uxtb	r2, r3
   17e46:	4b54      	ldr	r3, [pc, #336]	; (17f98 <main+0x1960>)
   17e48:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   17e4a:	4953      	ldr	r1, [pc, #332]	; (17f98 <main+0x1960>)
   17e4c:	4b57      	ldr	r3, [pc, #348]	; (17fac <main+0x1974>)
   17e4e:	2203      	movs	r2, #3
   17e50:	0018      	movs	r0, r3
   17e52:	4b57      	ldr	r3, [pc, #348]	; (17fb0 <main+0x1978>)
   17e54:	4798      	blx	r3

			SEND_ESC_CONFIG = 0;
   17e56:	4b71      	ldr	r3, [pc, #452]	; (1801c <main+0x19e4>)
   17e58:	2200      	movs	r2, #0
   17e5a:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17e5c:	4b56      	ldr	r3, [pc, #344]	; (17fb8 <main+0x1980>)
   17e5e:	2201      	movs	r2, #1
   17e60:	701a      	strb	r2, [r3, #0]
		}
		

		//////////////////////////   Handle Lights Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_Lights_CONFIG)
   17e62:	4b72      	ldr	r3, [pc, #456]	; (1802c <main+0x19f4>)
   17e64:	781b      	ldrb	r3, [r3, #0]
   17e66:	2b00      	cmp	r3, #0
   17e68:	d03d      	beq.n	17ee6 <main+0x18ae>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17e6a:	46c0      	nop			; (mov r8, r8)
   17e6c:	4b54      	ldr	r3, [pc, #336]	; (17fc0 <main+0x1988>)
   17e6e:	4798      	blx	r3
   17e70:	0002      	movs	r2, r0
   17e72:	687b      	ldr	r3, [r7, #4]
   17e74:	1ad3      	subs	r3, r2, r3
   17e76:	220c      	movs	r2, #12
   17e78:	18ba      	adds	r2, r7, r2
   17e7a:	8812      	ldrh	r2, [r2, #0]
   17e7c:	0052      	lsls	r2, r2, #1
   17e7e:	4293      	cmp	r3, r2
   17e80:	d3f4      	bcc.n	17e6c <main+0x1834>
			BLE_TX_TIME = millis();
   17e82:	4b4f      	ldr	r3, [pc, #316]	; (17fc0 <main+0x1988>)
   17e84:	4798      	blx	r3
   17e86:	0003      	movs	r3, r0
   17e88:	607b      	str	r3, [r7, #4]

			// Global LED Settings
			ble_write_buffer[0] = BLE_LIGHTS_CONFIG;//0x75;
   17e8a:	4b43      	ldr	r3, [pc, #268]	; (17f98 <main+0x1960>)
   17e8c:	2275      	movs	r2, #117	; 0x75
   17e8e:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RGB_led_type << 4) | brake_light_mode;
   17e90:	4b67      	ldr	r3, [pc, #412]	; (18030 <main+0x19f8>)
   17e92:	781b      	ldrb	r3, [r3, #0]
   17e94:	011b      	lsls	r3, r3, #4
   17e96:	b2da      	uxtb	r2, r3
   17e98:	4b66      	ldr	r3, [pc, #408]	; (18034 <main+0x19fc>)
   17e9a:	781b      	ldrb	r3, [r3, #0]
   17e9c:	4313      	orrs	r3, r2
   17e9e:	b2da      	uxtb	r2, r3
   17ea0:	4b3d      	ldr	r3, [pc, #244]	; (17f98 <main+0x1960>)
   17ea2:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   17ea4:	4b5c      	ldr	r3, [pc, #368]	; (18018 <main+0x19e0>)
   17ea6:	781a      	ldrb	r2, [r3, #0]
   17ea8:	4b3b      	ldr	r3, [pc, #236]	; (17f98 <main+0x1960>)
   17eaa:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(led_num);
   17eac:	4b62      	ldr	r3, [pc, #392]	; (18038 <main+0x1a00>)
   17eae:	781a      	ldrb	r2, [r3, #0]
   17eb0:	4b39      	ldr	r3, [pc, #228]	; (17f98 <main+0x1960>)
   17eb2:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)(SYNC_RGB << 7 | BRAKE_ALWAYS_ON << 6);
   17eb4:	4b61      	ldr	r3, [pc, #388]	; (1803c <main+0x1a04>)
   17eb6:	781b      	ldrb	r3, [r3, #0]
   17eb8:	01db      	lsls	r3, r3, #7
   17eba:	b25a      	sxtb	r2, r3
   17ebc:	4b60      	ldr	r3, [pc, #384]	; (18040 <main+0x1a08>)
   17ebe:	781b      	ldrb	r3, [r3, #0]
   17ec0:	019b      	lsls	r3, r3, #6
   17ec2:	b25b      	sxtb	r3, r3
   17ec4:	4313      	orrs	r3, r2
   17ec6:	b25b      	sxtb	r3, r3
   17ec8:	b2da      	uxtb	r2, r3
   17eca:	4b33      	ldr	r3, [pc, #204]	; (17f98 <main+0x1960>)
   17ecc:	711a      	strb	r2, [r3, #4]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 5);
   17ece:	4932      	ldr	r1, [pc, #200]	; (17f98 <main+0x1960>)
   17ed0:	4b36      	ldr	r3, [pc, #216]	; (17fac <main+0x1974>)
   17ed2:	2205      	movs	r2, #5
   17ed4:	0018      	movs	r0, r3
   17ed6:	4b36      	ldr	r3, [pc, #216]	; (17fb0 <main+0x1978>)
   17ed8:	4798      	blx	r3

			SEND_Lights_CONFIG = 0;
   17eda:	4b54      	ldr	r3, [pc, #336]	; (1802c <main+0x19f4>)
   17edc:	2200      	movs	r2, #0
   17ede:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17ee0:	4b35      	ldr	r3, [pc, #212]	; (17fb8 <main+0x1980>)
   17ee2:	2201      	movs	r2, #1
   17ee4:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle FW Read Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_TTL_FW)
   17ee6:	4b57      	ldr	r3, [pc, #348]	; (18044 <main+0x1a0c>)
   17ee8:	781b      	ldrb	r3, [r3, #0]
   17eea:	2b00      	cmp	r3, #0
   17eec:	d034      	beq.n	17f58 <main+0x1920>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   17eee:	46c0      	nop			; (mov r8, r8)
   17ef0:	4b33      	ldr	r3, [pc, #204]	; (17fc0 <main+0x1988>)
   17ef2:	4798      	blx	r3
   17ef4:	0002      	movs	r2, r0
   17ef6:	687b      	ldr	r3, [r7, #4]
   17ef8:	1ad3      	subs	r3, r2, r3
   17efa:	220c      	movs	r2, #12
   17efc:	18ba      	adds	r2, r7, r2
   17efe:	8812      	ldrh	r2, [r2, #0]
   17f00:	0052      	lsls	r2, r2, #1
   17f02:	4293      	cmp	r3, r2
   17f04:	d3f4      	bcc.n	17ef0 <main+0x18b8>
			BLE_TX_TIME = millis();
   17f06:	4b2e      	ldr	r3, [pc, #184]	; (17fc0 <main+0x1988>)
   17f08:	4798      	blx	r3
   17f0a:	0003      	movs	r3, r0
   17f0c:	607b      	str	r3, [r7, #4]

			// Global LED Settings
			ble_write_buffer[0] = BLE_TTL_FW;//0x74;
   17f0e:	4b22      	ldr	r3, [pc, #136]	; (17f98 <main+0x1960>)
   17f10:	2274      	movs	r2, #116	; 0x74
   17f12:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(TTL_FW%100 & 0x00FF);
   17f14:	4b4c      	ldr	r3, [pc, #304]	; (18048 <main+0x1a10>)
   17f16:	881a      	ldrh	r2, [r3, #0]
   17f18:	4b4c      	ldr	r3, [pc, #304]	; (1804c <main+0x1a14>)
   17f1a:	2164      	movs	r1, #100	; 0x64
   17f1c:	0010      	movs	r0, r2
   17f1e:	4798      	blx	r3
   17f20:	000b      	movs	r3, r1
   17f22:	b29b      	uxth	r3, r3
   17f24:	b2da      	uxtb	r2, r3
   17f26:	4b1c      	ldr	r3, [pc, #112]	; (17f98 <main+0x1960>)
   17f28:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(TTL_FW/100 & 0x00FF);
   17f2a:	4b47      	ldr	r3, [pc, #284]	; (18048 <main+0x1a10>)
   17f2c:	881a      	ldrh	r2, [r3, #0]
   17f2e:	4b48      	ldr	r3, [pc, #288]	; (18050 <main+0x1a18>)
   17f30:	2164      	movs	r1, #100	; 0x64
   17f32:	0010      	movs	r0, r2
   17f34:	4798      	blx	r3
   17f36:	0003      	movs	r3, r0
   17f38:	b29b      	uxth	r3, r3
   17f3a:	b2da      	uxtb	r2, r3
   17f3c:	4b16      	ldr	r3, [pc, #88]	; (17f98 <main+0x1960>)
   17f3e:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   17f40:	4915      	ldr	r1, [pc, #84]	; (17f98 <main+0x1960>)
   17f42:	4b1a      	ldr	r3, [pc, #104]	; (17fac <main+0x1974>)
   17f44:	2203      	movs	r2, #3
   17f46:	0018      	movs	r0, r3
   17f48:	4b19      	ldr	r3, [pc, #100]	; (17fb0 <main+0x1978>)
   17f4a:	4798      	blx	r3

			SEND_TTL_FW = 0;
   17f4c:	4b3d      	ldr	r3, [pc, #244]	; (18044 <main+0x1a0c>)
   17f4e:	2200      	movs	r2, #0
   17f50:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   17f52:	4b19      	ldr	r3, [pc, #100]	; (17fb8 <main+0x1980>)
   17f54:	2201      	movs	r2, #1
   17f56:	701a      	strb	r2, [r3, #0]
		}
		

		////////////////////////////////   LED Controls   /////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleUserInput();
   17f58:	4b3e      	ldr	r3, [pc, #248]	; (18054 <main+0x1a1c>)
   17f5a:	4798      	blx	r3


		/////////////////////////////////   App Remote   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleAppRemote();
   17f5c:	4b3e      	ldr	r3, [pc, #248]	; (18058 <main+0x1a20>)
   17f5e:	4798      	blx	r3

		
		//////////////////////////////////   LED MODES   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(sensorControl() && LIGHTS_ON){
   17f60:	4b3e      	ldr	r3, [pc, #248]	; (1805c <main+0x1a24>)
   17f62:	4798      	blx	r3
   17f64:	1e03      	subs	r3, r0, #0
   17f66:	d100      	bne.n	17f6a <main+0x1932>
   17f68:	e118      	b.n	1819c <main+0x1b64>
   17f6a:	4b3d      	ldr	r3, [pc, #244]	; (18060 <main+0x1a28>)
   17f6c:	781b      	ldrb	r3, [r3, #0]
   17f6e:	2b00      	cmp	r3, #0
   17f70:	d100      	bne.n	17f74 <main+0x193c>
   17f72:	e113      	b.n	1819c <main+0x1b64>
			if(SIDELIGHTS && lightControlSide()){
   17f74:	4b3b      	ldr	r3, [pc, #236]	; (18064 <main+0x1a2c>)
   17f76:	781b      	ldrb	r3, [r3, #0]
   17f78:	2b00      	cmp	r3, #0
   17f7a:	d100      	bne.n	17f7e <main+0x1946>
   17f7c:	e084      	b.n	18088 <main+0x1a50>
   17f7e:	4b3a      	ldr	r3, [pc, #232]	; (18068 <main+0x1a30>)
   17f80:	4798      	blx	r3
   17f82:	1e03      	subs	r3, r0, #0
   17f84:	d100      	bne.n	17f88 <main+0x1950>
   17f86:	e07f      	b.n	18088 <main+0x1a50>
				if(RGB_led_type == RGB_ANALOG){
   17f88:	4b29      	ldr	r3, [pc, #164]	; (18030 <main+0x19f8>)
   17f8a:	781b      	ldrb	r3, [r3, #0]
   17f8c:	2b00      	cmp	r3, #0
   17f8e:	d16f      	bne.n	18070 <main+0x1a38>
					AnalogSideLights();
   17f90:	4b36      	ldr	r3, [pc, #216]	; (1806c <main+0x1a34>)
   17f92:	4798      	blx	r3
				if(RGB_led_type == RGB_ANALOG){
   17f94:	e0fe      	b.n	18194 <main+0x1b5c>
   17f96:	46c0      	nop			; (mov r8, r8)
   17f98:	20000dec 	.word	0x20000dec
   17f9c:	200000b8 	.word	0x200000b8
   17fa0:	200000b9 	.word	0x200000b9
   17fa4:	200000ba 	.word	0x200000ba
   17fa8:	200000bb 	.word	0x200000bb
   17fac:	200006ac 	.word	0x200006ac
   17fb0:	000063bd 	.word	0x000063bd
   17fb4:	20000434 	.word	0x20000434
   17fb8:	200000fa 	.word	0x200000fa
   17fbc:	20000437 	.word	0x20000437
   17fc0:	00009f65 	.word	0x00009f65
   17fc4:	200000e0 	.word	0x200000e0
   17fc8:	20000438 	.word	0x20000438
   17fcc:	20000402 	.word	0x20000402
   17fd0:	20000403 	.word	0x20000403
   17fd4:	20000406 	.word	0x20000406
   17fd8:	20000407 	.word	0x20000407
   17fdc:	20000408 	.word	0x20000408
   17fe0:	20000409 	.word	0x20000409
   17fe4:	2000040a 	.word	0x2000040a
   17fe8:	2000040b 	.word	0x2000040b
   17fec:	2000040d 	.word	0x2000040d
   17ff0:	2000040c 	.word	0x2000040c
   17ff4:	2000040e 	.word	0x2000040e
   17ff8:	2000040f 	.word	0x2000040f
   17ffc:	20000410 	.word	0x20000410
   18000:	20000411 	.word	0x20000411
   18004:	20000413 	.word	0x20000413
   18008:	20000412 	.word	0x20000412
   1800c:	20000439 	.word	0x20000439
   18010:	2000038c 	.word	0x2000038c
   18014:	2000038d 	.word	0x2000038d
   18018:	200000dc 	.word	0x200000dc
   1801c:	2000043a 	.word	0x2000043a
   18020:	200000db 	.word	0x200000db
   18024:	2000038a 	.word	0x2000038a
   18028:	2000038b 	.word	0x2000038b
   1802c:	2000043b 	.word	0x2000043b
   18030:	20001a4c 	.word	0x20001a4c
   18034:	2000036e 	.word	0x2000036e
   18038:	200000d8 	.word	0x200000d8
   1803c:	200000ca 	.word	0x200000ca
   18040:	200000cb 	.word	0x200000cb
   18044:	2000043c 	.word	0x2000043c
   18048:	20000002 	.word	0x20000002
   1804c:	00018519 	.word	0x00018519
   18050:	0001840d 	.word	0x0001840d
   18054:	00013035 	.word	0x00013035
   18058:	000139c5 	.word	0x000139c5
   1805c:	0000dd19 	.word	0x0000dd19
   18060:	200000cd 	.word	0x200000cd
   18064:	200000cc 	.word	0x200000cc
   18068:	0000dd01 	.word	0x0000dd01
   1806c:	0000aae9 	.word	0x0000aae9
				}else if(RGB_led_type == RGB_DIGITAL_APA102 || RGB_led_type == RGB_DIGITAL_SK9822) { // Digital LED Functions
   18070:	4b8c      	ldr	r3, [pc, #560]	; (182a4 <main+0x1c6c>)
   18072:	781b      	ldrb	r3, [r3, #0]
   18074:	2b01      	cmp	r3, #1
   18076:	d004      	beq.n	18082 <main+0x1a4a>
   18078:	4b8a      	ldr	r3, [pc, #552]	; (182a4 <main+0x1c6c>)
   1807a:	781b      	ldrb	r3, [r3, #0]
   1807c:	2b02      	cmp	r3, #2
   1807e:	d000      	beq.n	18082 <main+0x1a4a>
   18080:	e088      	b.n	18194 <main+0x1b5c>
					DigitalSideLights();
   18082:	4b89      	ldr	r3, [pc, #548]	; (182a8 <main+0x1c70>)
   18084:	4798      	blx	r3
				if(RGB_led_type == RGB_ANALOG){
   18086:	e085      	b.n	18194 <main+0x1b5c>
				} else{
					//No RGB LEDs
				}
			}
			else {
				if(!TurnSignalOn) {
   18088:	4b88      	ldr	r3, [pc, #544]	; (182ac <main+0x1c74>)
   1808a:	781b      	ldrb	r3, [r3, #0]
   1808c:	2201      	movs	r2, #1
   1808e:	4053      	eors	r3, r2
   18090:	b2db      	uxtb	r3, r3
   18092:	2b00      	cmp	r3, #0
   18094:	d100      	bne.n	18098 <main+0x1a60>
   18096:	e07e      	b.n	18196 <main+0x1b5e>
					if(RGB_led_type == RGB_ANALOG){
   18098:	4b82      	ldr	r3, [pc, #520]	; (182a4 <main+0x1c6c>)
   1809a:	781b      	ldrb	r3, [r3, #0]
   1809c:	2b00      	cmp	r3, #0
   1809e:	d10a      	bne.n	180b6 <main+0x1a7e>
						setLeftRGB(0, 0, 0);
   180a0:	2200      	movs	r2, #0
   180a2:	2100      	movs	r1, #0
   180a4:	2000      	movs	r0, #0
   180a6:	4b82      	ldr	r3, [pc, #520]	; (182b0 <main+0x1c78>)
   180a8:	4798      	blx	r3
						setRightRGB(0, 0, 0);
   180aa:	2200      	movs	r2, #0
   180ac:	2100      	movs	r1, #0
   180ae:	2000      	movs	r0, #0
   180b0:	4b80      	ldr	r3, [pc, #512]	; (182b4 <main+0x1c7c>)
   180b2:	4798      	blx	r3
   180b4:	e06f      	b.n	18196 <main+0x1b5e>
					}
					else{
						if(!DIGITAL_OFF){
   180b6:	4b80      	ldr	r3, [pc, #512]	; (182b8 <main+0x1c80>)
   180b8:	781b      	ldrb	r3, [r3, #0]
   180ba:	2201      	movs	r2, #1
   180bc:	4053      	eors	r3, r2
   180be:	b2db      	uxtb	r3, r3
   180c0:	2b00      	cmp	r3, #0
   180c2:	d068      	beq.n	18196 <main+0x1b5e>
							for(uint16_t i = 0; i < led_num; i++)
   180c4:	2310      	movs	r3, #16
   180c6:	18fb      	adds	r3, r7, r3
   180c8:	2200      	movs	r2, #0
   180ca:	801a      	strh	r2, [r3, #0]
   180cc:	e04a      	b.n	18164 <main+0x1b2c>
							{
								L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0);
   180ce:	2310      	movs	r3, #16
   180d0:	18fb      	adds	r3, r7, r3
   180d2:	881b      	ldrh	r3, [r3, #0]
   180d4:	3301      	adds	r3, #1
   180d6:	009a      	lsls	r2, r3, #2
   180d8:	2310      	movs	r3, #16
   180da:	18fb      	adds	r3, r7, r3
   180dc:	881b      	ldrh	r3, [r3, #0]
   180de:	3301      	adds	r3, #1
   180e0:	009b      	lsls	r3, r3, #2
   180e2:	4976      	ldr	r1, [pc, #472]	; (182bc <main+0x1c84>)
   180e4:	20e0      	movs	r0, #224	; 0xe0
   180e6:	54c8      	strb	r0, [r1, r3]
   180e8:	4974      	ldr	r1, [pc, #464]	; (182bc <main+0x1c84>)
   180ea:	5cc9      	ldrb	r1, [r1, r3]
   180ec:	4b74      	ldr	r3, [pc, #464]	; (182c0 <main+0x1c88>)
   180ee:	5499      	strb	r1, [r3, r2]
								L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
   180f0:	2310      	movs	r3, #16
   180f2:	18fb      	adds	r3, r7, r3
   180f4:	881b      	ldrh	r3, [r3, #0]
   180f6:	009b      	lsls	r3, r3, #2
   180f8:	1d5a      	adds	r2, r3, #5
   180fa:	2310      	movs	r3, #16
   180fc:	18fb      	adds	r3, r7, r3
   180fe:	881b      	ldrh	r3, [r3, #0]
   18100:	009b      	lsls	r3, r3, #2
   18102:	3305      	adds	r3, #5
   18104:	496d      	ldr	r1, [pc, #436]	; (182bc <main+0x1c84>)
   18106:	2000      	movs	r0, #0
   18108:	54c8      	strb	r0, [r1, r3]
   1810a:	496c      	ldr	r1, [pc, #432]	; (182bc <main+0x1c84>)
   1810c:	5cc9      	ldrb	r1, [r1, r3]
   1810e:	4b6c      	ldr	r3, [pc, #432]	; (182c0 <main+0x1c88>)
   18110:	5499      	strb	r1, [r3, r2]
								L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
   18112:	2310      	movs	r3, #16
   18114:	18fb      	adds	r3, r7, r3
   18116:	881b      	ldrh	r3, [r3, #0]
   18118:	009b      	lsls	r3, r3, #2
   1811a:	1d9a      	adds	r2, r3, #6
   1811c:	2310      	movs	r3, #16
   1811e:	18fb      	adds	r3, r7, r3
   18120:	881b      	ldrh	r3, [r3, #0]
   18122:	009b      	lsls	r3, r3, #2
   18124:	3306      	adds	r3, #6
   18126:	4965      	ldr	r1, [pc, #404]	; (182bc <main+0x1c84>)
   18128:	2000      	movs	r0, #0
   1812a:	54c8      	strb	r0, [r1, r3]
   1812c:	4963      	ldr	r1, [pc, #396]	; (182bc <main+0x1c84>)
   1812e:	5cc9      	ldrb	r1, [r1, r3]
   18130:	4b63      	ldr	r3, [pc, #396]	; (182c0 <main+0x1c88>)
   18132:	5499      	strb	r1, [r3, r2]
								L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
   18134:	2310      	movs	r3, #16
   18136:	18fb      	adds	r3, r7, r3
   18138:	881b      	ldrh	r3, [r3, #0]
   1813a:	009b      	lsls	r3, r3, #2
   1813c:	1dda      	adds	r2, r3, #7
   1813e:	2310      	movs	r3, #16
   18140:	18fb      	adds	r3, r7, r3
   18142:	881b      	ldrh	r3, [r3, #0]
   18144:	009b      	lsls	r3, r3, #2
   18146:	3307      	adds	r3, #7
   18148:	495c      	ldr	r1, [pc, #368]	; (182bc <main+0x1c84>)
   1814a:	2000      	movs	r0, #0
   1814c:	54c8      	strb	r0, [r1, r3]
   1814e:	495b      	ldr	r1, [pc, #364]	; (182bc <main+0x1c84>)
   18150:	5cc9      	ldrb	r1, [r1, r3]
   18152:	4b5b      	ldr	r3, [pc, #364]	; (182c0 <main+0x1c88>)
   18154:	5499      	strb	r1, [r3, r2]
							for(uint16_t i = 0; i < led_num; i++)
   18156:	2310      	movs	r3, #16
   18158:	18fb      	adds	r3, r7, r3
   1815a:	881a      	ldrh	r2, [r3, #0]
   1815c:	2310      	movs	r3, #16
   1815e:	18fb      	adds	r3, r7, r3
   18160:	3201      	adds	r2, #1
   18162:	801a      	strh	r2, [r3, #0]
   18164:	4b57      	ldr	r3, [pc, #348]	; (182c4 <main+0x1c8c>)
   18166:	781b      	ldrb	r3, [r3, #0]
   18168:	b29b      	uxth	r3, r3
   1816a:	2210      	movs	r2, #16
   1816c:	18ba      	adds	r2, r7, r2
   1816e:	8812      	ldrh	r2, [r2, #0]
   18170:	429a      	cmp	r2, r3
   18172:	d3ac      	bcc.n	180ce <main+0x1a96>
							}
							L_APA_write(led_num);
   18174:	4b53      	ldr	r3, [pc, #332]	; (182c4 <main+0x1c8c>)
   18176:	781b      	ldrb	r3, [r3, #0]
   18178:	b29b      	uxth	r3, r3
   1817a:	0018      	movs	r0, r3
   1817c:	4b52      	ldr	r3, [pc, #328]	; (182c8 <main+0x1c90>)
   1817e:	4798      	blx	r3
							R_APA_write(led_num);
   18180:	4b50      	ldr	r3, [pc, #320]	; (182c4 <main+0x1c8c>)
   18182:	781b      	ldrb	r3, [r3, #0]
   18184:	b29b      	uxth	r3, r3
   18186:	0018      	movs	r0, r3
   18188:	4b50      	ldr	r3, [pc, #320]	; (182cc <main+0x1c94>)
   1818a:	4798      	blx	r3
							DIGITAL_OFF = true;
   1818c:	4b4a      	ldr	r3, [pc, #296]	; (182b8 <main+0x1c80>)
   1818e:	2201      	movs	r2, #1
   18190:	701a      	strb	r2, [r3, #0]
   18192:	e000      	b.n	18196 <main+0x1b5e>
				if(RGB_led_type == RGB_ANALOG){
   18194:	46c0      	nop			; (mov r8, r8)
				}
			}


			/////////////// Control the head and tail lights //////////////////
			HeadLight();
   18196:	4b4e      	ldr	r3, [pc, #312]	; (182d0 <main+0x1c98>)
   18198:	4798      	blx	r3
   1819a:	e07f      	b.n	1829c <main+0x1c64>
			
		} else {
			setWhite(0);
   1819c:	2000      	movs	r0, #0
   1819e:	4b4d      	ldr	r3, [pc, #308]	; (182d4 <main+0x1c9c>)
   181a0:	4798      	blx	r3
			if(RGB_led_type == RGB_ANALOG){
   181a2:	4b40      	ldr	r3, [pc, #256]	; (182a4 <main+0x1c6c>)
   181a4:	781b      	ldrb	r3, [r3, #0]
   181a6:	2b00      	cmp	r3, #0
   181a8:	d10a      	bne.n	181c0 <main+0x1b88>
				setLeftRGB(0,0,0);
   181aa:	2200      	movs	r2, #0
   181ac:	2100      	movs	r1, #0
   181ae:	2000      	movs	r0, #0
   181b0:	4b3f      	ldr	r3, [pc, #252]	; (182b0 <main+0x1c78>)
   181b2:	4798      	blx	r3
				setRightRGB(0,0,0);
   181b4:	2200      	movs	r2, #0
   181b6:	2100      	movs	r1, #0
   181b8:	2000      	movs	r0, #0
   181ba:	4b3e      	ldr	r3, [pc, #248]	; (182b4 <main+0x1c7c>)
   181bc:	4798      	blx	r3
   181be:	e06d      	b.n	1829c <main+0x1c64>
			}
			else{
				if(!DIGITAL_OFF){
   181c0:	4b3d      	ldr	r3, [pc, #244]	; (182b8 <main+0x1c80>)
   181c2:	781b      	ldrb	r3, [r3, #0]
   181c4:	2201      	movs	r2, #1
   181c6:	4053      	eors	r3, r2
   181c8:	b2db      	uxtb	r3, r3
   181ca:	2b00      	cmp	r3, #0
   181cc:	d066      	beq.n	1829c <main+0x1c64>
					for(uint16_t i = 0; i < led_num; i++)
   181ce:	230e      	movs	r3, #14
   181d0:	18fb      	adds	r3, r7, r3
   181d2:	2200      	movs	r2, #0
   181d4:	801a      	strh	r2, [r3, #0]
   181d6:	e04a      	b.n	1826e <main+0x1c36>
					{
						L_SPI_send_buf[(i*4)+4] = R_SPI_send_buf[(i*4)+4] = (0b11100000 | 0);
   181d8:	230e      	movs	r3, #14
   181da:	18fb      	adds	r3, r7, r3
   181dc:	881b      	ldrh	r3, [r3, #0]
   181de:	3301      	adds	r3, #1
   181e0:	009a      	lsls	r2, r3, #2
   181e2:	230e      	movs	r3, #14
   181e4:	18fb      	adds	r3, r7, r3
   181e6:	881b      	ldrh	r3, [r3, #0]
   181e8:	3301      	adds	r3, #1
   181ea:	009b      	lsls	r3, r3, #2
   181ec:	4933      	ldr	r1, [pc, #204]	; (182bc <main+0x1c84>)
   181ee:	20e0      	movs	r0, #224	; 0xe0
   181f0:	54c8      	strb	r0, [r1, r3]
   181f2:	4932      	ldr	r1, [pc, #200]	; (182bc <main+0x1c84>)
   181f4:	5cc9      	ldrb	r1, [r1, r3]
   181f6:	4b32      	ldr	r3, [pc, #200]	; (182c0 <main+0x1c88>)
   181f8:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+5] = R_SPI_send_buf[(i*4)+5] = 0;
   181fa:	230e      	movs	r3, #14
   181fc:	18fb      	adds	r3, r7, r3
   181fe:	881b      	ldrh	r3, [r3, #0]
   18200:	009b      	lsls	r3, r3, #2
   18202:	1d5a      	adds	r2, r3, #5
   18204:	230e      	movs	r3, #14
   18206:	18fb      	adds	r3, r7, r3
   18208:	881b      	ldrh	r3, [r3, #0]
   1820a:	009b      	lsls	r3, r3, #2
   1820c:	3305      	adds	r3, #5
   1820e:	492b      	ldr	r1, [pc, #172]	; (182bc <main+0x1c84>)
   18210:	2000      	movs	r0, #0
   18212:	54c8      	strb	r0, [r1, r3]
   18214:	4929      	ldr	r1, [pc, #164]	; (182bc <main+0x1c84>)
   18216:	5cc9      	ldrb	r1, [r1, r3]
   18218:	4b29      	ldr	r3, [pc, #164]	; (182c0 <main+0x1c88>)
   1821a:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+6] = R_SPI_send_buf[(i*4)+6] = 0;
   1821c:	230e      	movs	r3, #14
   1821e:	18fb      	adds	r3, r7, r3
   18220:	881b      	ldrh	r3, [r3, #0]
   18222:	009b      	lsls	r3, r3, #2
   18224:	1d9a      	adds	r2, r3, #6
   18226:	230e      	movs	r3, #14
   18228:	18fb      	adds	r3, r7, r3
   1822a:	881b      	ldrh	r3, [r3, #0]
   1822c:	009b      	lsls	r3, r3, #2
   1822e:	3306      	adds	r3, #6
   18230:	4922      	ldr	r1, [pc, #136]	; (182bc <main+0x1c84>)
   18232:	2000      	movs	r0, #0
   18234:	54c8      	strb	r0, [r1, r3]
   18236:	4921      	ldr	r1, [pc, #132]	; (182bc <main+0x1c84>)
   18238:	5cc9      	ldrb	r1, [r1, r3]
   1823a:	4b21      	ldr	r3, [pc, #132]	; (182c0 <main+0x1c88>)
   1823c:	5499      	strb	r1, [r3, r2]
						L_SPI_send_buf[(i*4)+7] = R_SPI_send_buf[(i*4)+7] = 0;
   1823e:	230e      	movs	r3, #14
   18240:	18fb      	adds	r3, r7, r3
   18242:	881b      	ldrh	r3, [r3, #0]
   18244:	009b      	lsls	r3, r3, #2
   18246:	1dda      	adds	r2, r3, #7
   18248:	230e      	movs	r3, #14
   1824a:	18fb      	adds	r3, r7, r3
   1824c:	881b      	ldrh	r3, [r3, #0]
   1824e:	009b      	lsls	r3, r3, #2
   18250:	3307      	adds	r3, #7
   18252:	491a      	ldr	r1, [pc, #104]	; (182bc <main+0x1c84>)
   18254:	2000      	movs	r0, #0
   18256:	54c8      	strb	r0, [r1, r3]
   18258:	4918      	ldr	r1, [pc, #96]	; (182bc <main+0x1c84>)
   1825a:	5cc9      	ldrb	r1, [r1, r3]
   1825c:	4b18      	ldr	r3, [pc, #96]	; (182c0 <main+0x1c88>)
   1825e:	5499      	strb	r1, [r3, r2]
					for(uint16_t i = 0; i < led_num; i++)
   18260:	230e      	movs	r3, #14
   18262:	18fb      	adds	r3, r7, r3
   18264:	881a      	ldrh	r2, [r3, #0]
   18266:	230e      	movs	r3, #14
   18268:	18fb      	adds	r3, r7, r3
   1826a:	3201      	adds	r2, #1
   1826c:	801a      	strh	r2, [r3, #0]
   1826e:	4b15      	ldr	r3, [pc, #84]	; (182c4 <main+0x1c8c>)
   18270:	781b      	ldrb	r3, [r3, #0]
   18272:	b29b      	uxth	r3, r3
   18274:	220e      	movs	r2, #14
   18276:	18ba      	adds	r2, r7, r2
   18278:	8812      	ldrh	r2, [r2, #0]
   1827a:	429a      	cmp	r2, r3
   1827c:	d3ac      	bcc.n	181d8 <main+0x1ba0>
					}
					L_APA_write(led_num);
   1827e:	4b11      	ldr	r3, [pc, #68]	; (182c4 <main+0x1c8c>)
   18280:	781b      	ldrb	r3, [r3, #0]
   18282:	b29b      	uxth	r3, r3
   18284:	0018      	movs	r0, r3
   18286:	4b10      	ldr	r3, [pc, #64]	; (182c8 <main+0x1c90>)
   18288:	4798      	blx	r3
					R_APA_write(led_num);
   1828a:	4b0e      	ldr	r3, [pc, #56]	; (182c4 <main+0x1c8c>)
   1828c:	781b      	ldrb	r3, [r3, #0]
   1828e:	b29b      	uxth	r3, r3
   18290:	0018      	movs	r0, r3
   18292:	4b0e      	ldr	r3, [pc, #56]	; (182cc <main+0x1c94>)
   18294:	4798      	blx	r3
					DIGITAL_OFF = true;
   18296:	4b08      	ldr	r3, [pc, #32]	; (182b8 <main+0x1c80>)
   18298:	2201      	movs	r2, #1
   1829a:	701a      	strb	r2, [r3, #0]
				}
			}
		}//*/
		BrakeLight();
   1829c:	4b0e      	ldr	r3, [pc, #56]	; (182d8 <main+0x1ca0>)
   1829e:	4798      	blx	r3
		if(port_pin_get_input_level(BOOT_BTN)==false)
   182a0:	f7fe fa54 	bl	1674c <main+0x114>
   182a4:	20001a4c 	.word	0x20001a4c
   182a8:	0000c21d 	.word	0x0000c21d
   182ac:	2000042c 	.word	0x2000042c
   182b0:	0000a405 	.word	0x0000a405
   182b4:	0000a481 	.word	0x0000a481
   182b8:	20000380 	.word	0x20000380
   182bc:	20000578 	.word	0x20000578
   182c0:	20001420 	.word	0x20001420
   182c4:	200000d8 	.word	0x200000d8
   182c8:	0000a175 	.word	0x0000a175
   182cc:	0000a1e5 	.word	0x0000a1e5
   182d0:	0000dcc5 	.word	0x0000dcc5
   182d4:	0000a4f5 	.word	0x0000a4f5
   182d8:	0000d3c5 	.word	0x0000d3c5

000182dc <ldexpf>:
   182dc:	b570      	push	{r4, r5, r6, lr}
   182de:	1c04      	adds	r4, r0, #0
   182e0:	000d      	movs	r5, r1
   182e2:	f000 f889 	bl	183f8 <finitef>
   182e6:	2800      	cmp	r0, #0
   182e8:	d005      	beq.n	182f6 <ldexpf+0x1a>
   182ea:	2100      	movs	r1, #0
   182ec:	1c20      	adds	r0, r4, #0
   182ee:	f000 fa4d 	bl	1878c <__aeabi_fcmpeq>
   182f2:	2800      	cmp	r0, #0
   182f4:	d001      	beq.n	182fa <ldexpf+0x1e>
   182f6:	1c20      	adds	r0, r4, #0
   182f8:	bd70      	pop	{r4, r5, r6, pc}
   182fa:	1c20      	adds	r0, r4, #0
   182fc:	0029      	movs	r1, r5
   182fe:	f000 f811 	bl	18324 <scalbnf>
   18302:	1c04      	adds	r4, r0, #0
   18304:	f000 f878 	bl	183f8 <finitef>
   18308:	2800      	cmp	r0, #0
   1830a:	d005      	beq.n	18318 <ldexpf+0x3c>
   1830c:	2100      	movs	r1, #0
   1830e:	1c20      	adds	r0, r4, #0
   18310:	f000 fa3c 	bl	1878c <__aeabi_fcmpeq>
   18314:	2800      	cmp	r0, #0
   18316:	d0ee      	beq.n	182f6 <ldexpf+0x1a>
   18318:	f003 f83c 	bl	1b394 <__errno>
   1831c:	2322      	movs	r3, #34	; 0x22
   1831e:	6003      	str	r3, [r0, #0]
   18320:	e7e9      	b.n	182f6 <ldexpf+0x1a>
   18322:	46c0      	nop			; (mov r8, r8)

00018324 <scalbnf>:
   18324:	0043      	lsls	r3, r0, #1
   18326:	b570      	push	{r4, r5, r6, lr}
   18328:	1c02      	adds	r2, r0, #0
   1832a:	000c      	movs	r4, r1
   1832c:	0005      	movs	r5, r0
   1832e:	0859      	lsrs	r1, r3, #1
   18330:	d00f      	beq.n	18352 <scalbnf+0x2e>
   18332:	4e27      	ldr	r6, [pc, #156]	; (183d0 <scalbnf+0xac>)
   18334:	42b1      	cmp	r1, r6
   18336:	d80d      	bhi.n	18354 <scalbnf+0x30>
   18338:	4826      	ldr	r0, [pc, #152]	; (183d4 <scalbnf+0xb0>)
   1833a:	4281      	cmp	r1, r0
   1833c:	d90e      	bls.n	1835c <scalbnf+0x38>
   1833e:	0e1b      	lsrs	r3, r3, #24
   18340:	191b      	adds	r3, r3, r4
   18342:	2bfe      	cmp	r3, #254	; 0xfe
   18344:	dc2a      	bgt.n	1839c <scalbnf+0x78>
   18346:	2b00      	cmp	r3, #0
   18348:	dd16      	ble.n	18378 <scalbnf+0x54>
   1834a:	4823      	ldr	r0, [pc, #140]	; (183d8 <scalbnf+0xb4>)
   1834c:	05db      	lsls	r3, r3, #23
   1834e:	4028      	ands	r0, r5
   18350:	4318      	orrs	r0, r3
   18352:	bd70      	pop	{r4, r5, r6, pc}
   18354:	1c01      	adds	r1, r0, #0
   18356:	f000 faa7 	bl	188a8 <__aeabi_fadd>
   1835a:	e7fa      	b.n	18352 <scalbnf+0x2e>
   1835c:	2198      	movs	r1, #152	; 0x98
   1835e:	1c10      	adds	r0, r2, #0
   18360:	05c9      	lsls	r1, r1, #23
   18362:	f000 fe23 	bl	18fac <__aeabi_fmul>
   18366:	4b1d      	ldr	r3, [pc, #116]	; (183dc <scalbnf+0xb8>)
   18368:	1c02      	adds	r2, r0, #0
   1836a:	429c      	cmp	r4, r3
   1836c:	db12      	blt.n	18394 <scalbnf+0x70>
   1836e:	0043      	lsls	r3, r0, #1
   18370:	0e1b      	lsrs	r3, r3, #24
   18372:	0005      	movs	r5, r0
   18374:	3b19      	subs	r3, #25
   18376:	e7e3      	b.n	18340 <scalbnf+0x1c>
   18378:	0019      	movs	r1, r3
   1837a:	3116      	adds	r1, #22
   1837c:	da16      	bge.n	183ac <scalbnf+0x88>
   1837e:	4b18      	ldr	r3, [pc, #96]	; (183e0 <scalbnf+0xbc>)
   18380:	1c11      	adds	r1, r2, #0
   18382:	429c      	cmp	r4, r3
   18384:	dd1c      	ble.n	183c0 <scalbnf+0x9c>
   18386:	4817      	ldr	r0, [pc, #92]	; (183e4 <scalbnf+0xc0>)
   18388:	f000 f830 	bl	183ec <copysignf>
   1838c:	4915      	ldr	r1, [pc, #84]	; (183e4 <scalbnf+0xc0>)
   1838e:	f000 fe0d 	bl	18fac <__aeabi_fmul>
   18392:	e7de      	b.n	18352 <scalbnf+0x2e>
   18394:	4914      	ldr	r1, [pc, #80]	; (183e8 <scalbnf+0xc4>)
   18396:	f000 fe09 	bl	18fac <__aeabi_fmul>
   1839a:	e7da      	b.n	18352 <scalbnf+0x2e>
   1839c:	1c11      	adds	r1, r2, #0
   1839e:	4811      	ldr	r0, [pc, #68]	; (183e4 <scalbnf+0xc0>)
   183a0:	f000 f824 	bl	183ec <copysignf>
   183a4:	490f      	ldr	r1, [pc, #60]	; (183e4 <scalbnf+0xc0>)
   183a6:	f000 fe01 	bl	18fac <__aeabi_fmul>
   183aa:	e7d2      	b.n	18352 <scalbnf+0x2e>
   183ac:	21cc      	movs	r1, #204	; 0xcc
   183ae:	3319      	adds	r3, #25
   183b0:	05d8      	lsls	r0, r3, #23
   183b2:	4b09      	ldr	r3, [pc, #36]	; (183d8 <scalbnf+0xb4>)
   183b4:	0589      	lsls	r1, r1, #22
   183b6:	401d      	ands	r5, r3
   183b8:	4328      	orrs	r0, r5
   183ba:	f000 fdf7 	bl	18fac <__aeabi_fmul>
   183be:	e7c8      	b.n	18352 <scalbnf+0x2e>
   183c0:	4809      	ldr	r0, [pc, #36]	; (183e8 <scalbnf+0xc4>)
   183c2:	f000 f813 	bl	183ec <copysignf>
   183c6:	4908      	ldr	r1, [pc, #32]	; (183e8 <scalbnf+0xc4>)
   183c8:	f000 fdf0 	bl	18fac <__aeabi_fmul>
   183cc:	e7c1      	b.n	18352 <scalbnf+0x2e>
   183ce:	46c0      	nop			; (mov r8, r8)
   183d0:	7f7fffff 	.word	0x7f7fffff
   183d4:	007fffff 	.word	0x007fffff
   183d8:	807fffff 	.word	0x807fffff
   183dc:	ffff3cb0 	.word	0xffff3cb0
   183e0:	0000c350 	.word	0x0000c350
   183e4:	7149f2ca 	.word	0x7149f2ca
   183e8:	0da24260 	.word	0x0da24260

000183ec <copysignf>:
   183ec:	0040      	lsls	r0, r0, #1
   183ee:	0fc9      	lsrs	r1, r1, #31
   183f0:	07c9      	lsls	r1, r1, #31
   183f2:	0840      	lsrs	r0, r0, #1
   183f4:	4308      	orrs	r0, r1
   183f6:	4770      	bx	lr

000183f8 <finitef>:
   183f8:	0043      	lsls	r3, r0, #1
   183fa:	2000      	movs	r0, #0
   183fc:	4a02      	ldr	r2, [pc, #8]	; (18408 <finitef+0x10>)
   183fe:	085b      	lsrs	r3, r3, #1
   18400:	429a      	cmp	r2, r3
   18402:	4140      	adcs	r0, r0
   18404:	4770      	bx	lr
   18406:	46c0      	nop			; (mov r8, r8)
   18408:	7f7fffff 	.word	0x7f7fffff

0001840c <__udivsi3>:
   1840c:	2200      	movs	r2, #0
   1840e:	0843      	lsrs	r3, r0, #1
   18410:	428b      	cmp	r3, r1
   18412:	d374      	bcc.n	184fe <__udivsi3+0xf2>
   18414:	0903      	lsrs	r3, r0, #4
   18416:	428b      	cmp	r3, r1
   18418:	d35f      	bcc.n	184da <__udivsi3+0xce>
   1841a:	0a03      	lsrs	r3, r0, #8
   1841c:	428b      	cmp	r3, r1
   1841e:	d344      	bcc.n	184aa <__udivsi3+0x9e>
   18420:	0b03      	lsrs	r3, r0, #12
   18422:	428b      	cmp	r3, r1
   18424:	d328      	bcc.n	18478 <__udivsi3+0x6c>
   18426:	0c03      	lsrs	r3, r0, #16
   18428:	428b      	cmp	r3, r1
   1842a:	d30d      	bcc.n	18448 <__udivsi3+0x3c>
   1842c:	22ff      	movs	r2, #255	; 0xff
   1842e:	0209      	lsls	r1, r1, #8
   18430:	ba12      	rev	r2, r2
   18432:	0c03      	lsrs	r3, r0, #16
   18434:	428b      	cmp	r3, r1
   18436:	d302      	bcc.n	1843e <__udivsi3+0x32>
   18438:	1212      	asrs	r2, r2, #8
   1843a:	0209      	lsls	r1, r1, #8
   1843c:	d065      	beq.n	1850a <__udivsi3+0xfe>
   1843e:	0b03      	lsrs	r3, r0, #12
   18440:	428b      	cmp	r3, r1
   18442:	d319      	bcc.n	18478 <__udivsi3+0x6c>
   18444:	e000      	b.n	18448 <__udivsi3+0x3c>
   18446:	0a09      	lsrs	r1, r1, #8
   18448:	0bc3      	lsrs	r3, r0, #15
   1844a:	428b      	cmp	r3, r1
   1844c:	d301      	bcc.n	18452 <__udivsi3+0x46>
   1844e:	03cb      	lsls	r3, r1, #15
   18450:	1ac0      	subs	r0, r0, r3
   18452:	4152      	adcs	r2, r2
   18454:	0b83      	lsrs	r3, r0, #14
   18456:	428b      	cmp	r3, r1
   18458:	d301      	bcc.n	1845e <__udivsi3+0x52>
   1845a:	038b      	lsls	r3, r1, #14
   1845c:	1ac0      	subs	r0, r0, r3
   1845e:	4152      	adcs	r2, r2
   18460:	0b43      	lsrs	r3, r0, #13
   18462:	428b      	cmp	r3, r1
   18464:	d301      	bcc.n	1846a <__udivsi3+0x5e>
   18466:	034b      	lsls	r3, r1, #13
   18468:	1ac0      	subs	r0, r0, r3
   1846a:	4152      	adcs	r2, r2
   1846c:	0b03      	lsrs	r3, r0, #12
   1846e:	428b      	cmp	r3, r1
   18470:	d301      	bcc.n	18476 <__udivsi3+0x6a>
   18472:	030b      	lsls	r3, r1, #12
   18474:	1ac0      	subs	r0, r0, r3
   18476:	4152      	adcs	r2, r2
   18478:	0ac3      	lsrs	r3, r0, #11
   1847a:	428b      	cmp	r3, r1
   1847c:	d301      	bcc.n	18482 <__udivsi3+0x76>
   1847e:	02cb      	lsls	r3, r1, #11
   18480:	1ac0      	subs	r0, r0, r3
   18482:	4152      	adcs	r2, r2
   18484:	0a83      	lsrs	r3, r0, #10
   18486:	428b      	cmp	r3, r1
   18488:	d301      	bcc.n	1848e <__udivsi3+0x82>
   1848a:	028b      	lsls	r3, r1, #10
   1848c:	1ac0      	subs	r0, r0, r3
   1848e:	4152      	adcs	r2, r2
   18490:	0a43      	lsrs	r3, r0, #9
   18492:	428b      	cmp	r3, r1
   18494:	d301      	bcc.n	1849a <__udivsi3+0x8e>
   18496:	024b      	lsls	r3, r1, #9
   18498:	1ac0      	subs	r0, r0, r3
   1849a:	4152      	adcs	r2, r2
   1849c:	0a03      	lsrs	r3, r0, #8
   1849e:	428b      	cmp	r3, r1
   184a0:	d301      	bcc.n	184a6 <__udivsi3+0x9a>
   184a2:	020b      	lsls	r3, r1, #8
   184a4:	1ac0      	subs	r0, r0, r3
   184a6:	4152      	adcs	r2, r2
   184a8:	d2cd      	bcs.n	18446 <__udivsi3+0x3a>
   184aa:	09c3      	lsrs	r3, r0, #7
   184ac:	428b      	cmp	r3, r1
   184ae:	d301      	bcc.n	184b4 <__udivsi3+0xa8>
   184b0:	01cb      	lsls	r3, r1, #7
   184b2:	1ac0      	subs	r0, r0, r3
   184b4:	4152      	adcs	r2, r2
   184b6:	0983      	lsrs	r3, r0, #6
   184b8:	428b      	cmp	r3, r1
   184ba:	d301      	bcc.n	184c0 <__udivsi3+0xb4>
   184bc:	018b      	lsls	r3, r1, #6
   184be:	1ac0      	subs	r0, r0, r3
   184c0:	4152      	adcs	r2, r2
   184c2:	0943      	lsrs	r3, r0, #5
   184c4:	428b      	cmp	r3, r1
   184c6:	d301      	bcc.n	184cc <__udivsi3+0xc0>
   184c8:	014b      	lsls	r3, r1, #5
   184ca:	1ac0      	subs	r0, r0, r3
   184cc:	4152      	adcs	r2, r2
   184ce:	0903      	lsrs	r3, r0, #4
   184d0:	428b      	cmp	r3, r1
   184d2:	d301      	bcc.n	184d8 <__udivsi3+0xcc>
   184d4:	010b      	lsls	r3, r1, #4
   184d6:	1ac0      	subs	r0, r0, r3
   184d8:	4152      	adcs	r2, r2
   184da:	08c3      	lsrs	r3, r0, #3
   184dc:	428b      	cmp	r3, r1
   184de:	d301      	bcc.n	184e4 <__udivsi3+0xd8>
   184e0:	00cb      	lsls	r3, r1, #3
   184e2:	1ac0      	subs	r0, r0, r3
   184e4:	4152      	adcs	r2, r2
   184e6:	0883      	lsrs	r3, r0, #2
   184e8:	428b      	cmp	r3, r1
   184ea:	d301      	bcc.n	184f0 <__udivsi3+0xe4>
   184ec:	008b      	lsls	r3, r1, #2
   184ee:	1ac0      	subs	r0, r0, r3
   184f0:	4152      	adcs	r2, r2
   184f2:	0843      	lsrs	r3, r0, #1
   184f4:	428b      	cmp	r3, r1
   184f6:	d301      	bcc.n	184fc <__udivsi3+0xf0>
   184f8:	004b      	lsls	r3, r1, #1
   184fa:	1ac0      	subs	r0, r0, r3
   184fc:	4152      	adcs	r2, r2
   184fe:	1a41      	subs	r1, r0, r1
   18500:	d200      	bcs.n	18504 <__udivsi3+0xf8>
   18502:	4601      	mov	r1, r0
   18504:	4152      	adcs	r2, r2
   18506:	4610      	mov	r0, r2
   18508:	4770      	bx	lr
   1850a:	e7ff      	b.n	1850c <__udivsi3+0x100>
   1850c:	b501      	push	{r0, lr}
   1850e:	2000      	movs	r0, #0
   18510:	f000 f8f0 	bl	186f4 <__aeabi_idiv0>
   18514:	bd02      	pop	{r1, pc}
   18516:	46c0      	nop			; (mov r8, r8)

00018518 <__aeabi_uidivmod>:
   18518:	2900      	cmp	r1, #0
   1851a:	d0f7      	beq.n	1850c <__udivsi3+0x100>
   1851c:	e776      	b.n	1840c <__udivsi3>
   1851e:	4770      	bx	lr

00018520 <__divsi3>:
   18520:	4603      	mov	r3, r0
   18522:	430b      	orrs	r3, r1
   18524:	d47f      	bmi.n	18626 <__divsi3+0x106>
   18526:	2200      	movs	r2, #0
   18528:	0843      	lsrs	r3, r0, #1
   1852a:	428b      	cmp	r3, r1
   1852c:	d374      	bcc.n	18618 <__divsi3+0xf8>
   1852e:	0903      	lsrs	r3, r0, #4
   18530:	428b      	cmp	r3, r1
   18532:	d35f      	bcc.n	185f4 <__divsi3+0xd4>
   18534:	0a03      	lsrs	r3, r0, #8
   18536:	428b      	cmp	r3, r1
   18538:	d344      	bcc.n	185c4 <__divsi3+0xa4>
   1853a:	0b03      	lsrs	r3, r0, #12
   1853c:	428b      	cmp	r3, r1
   1853e:	d328      	bcc.n	18592 <__divsi3+0x72>
   18540:	0c03      	lsrs	r3, r0, #16
   18542:	428b      	cmp	r3, r1
   18544:	d30d      	bcc.n	18562 <__divsi3+0x42>
   18546:	22ff      	movs	r2, #255	; 0xff
   18548:	0209      	lsls	r1, r1, #8
   1854a:	ba12      	rev	r2, r2
   1854c:	0c03      	lsrs	r3, r0, #16
   1854e:	428b      	cmp	r3, r1
   18550:	d302      	bcc.n	18558 <__divsi3+0x38>
   18552:	1212      	asrs	r2, r2, #8
   18554:	0209      	lsls	r1, r1, #8
   18556:	d065      	beq.n	18624 <__divsi3+0x104>
   18558:	0b03      	lsrs	r3, r0, #12
   1855a:	428b      	cmp	r3, r1
   1855c:	d319      	bcc.n	18592 <__divsi3+0x72>
   1855e:	e000      	b.n	18562 <__divsi3+0x42>
   18560:	0a09      	lsrs	r1, r1, #8
   18562:	0bc3      	lsrs	r3, r0, #15
   18564:	428b      	cmp	r3, r1
   18566:	d301      	bcc.n	1856c <__divsi3+0x4c>
   18568:	03cb      	lsls	r3, r1, #15
   1856a:	1ac0      	subs	r0, r0, r3
   1856c:	4152      	adcs	r2, r2
   1856e:	0b83      	lsrs	r3, r0, #14
   18570:	428b      	cmp	r3, r1
   18572:	d301      	bcc.n	18578 <__divsi3+0x58>
   18574:	038b      	lsls	r3, r1, #14
   18576:	1ac0      	subs	r0, r0, r3
   18578:	4152      	adcs	r2, r2
   1857a:	0b43      	lsrs	r3, r0, #13
   1857c:	428b      	cmp	r3, r1
   1857e:	d301      	bcc.n	18584 <__divsi3+0x64>
   18580:	034b      	lsls	r3, r1, #13
   18582:	1ac0      	subs	r0, r0, r3
   18584:	4152      	adcs	r2, r2
   18586:	0b03      	lsrs	r3, r0, #12
   18588:	428b      	cmp	r3, r1
   1858a:	d301      	bcc.n	18590 <__divsi3+0x70>
   1858c:	030b      	lsls	r3, r1, #12
   1858e:	1ac0      	subs	r0, r0, r3
   18590:	4152      	adcs	r2, r2
   18592:	0ac3      	lsrs	r3, r0, #11
   18594:	428b      	cmp	r3, r1
   18596:	d301      	bcc.n	1859c <__divsi3+0x7c>
   18598:	02cb      	lsls	r3, r1, #11
   1859a:	1ac0      	subs	r0, r0, r3
   1859c:	4152      	adcs	r2, r2
   1859e:	0a83      	lsrs	r3, r0, #10
   185a0:	428b      	cmp	r3, r1
   185a2:	d301      	bcc.n	185a8 <__divsi3+0x88>
   185a4:	028b      	lsls	r3, r1, #10
   185a6:	1ac0      	subs	r0, r0, r3
   185a8:	4152      	adcs	r2, r2
   185aa:	0a43      	lsrs	r3, r0, #9
   185ac:	428b      	cmp	r3, r1
   185ae:	d301      	bcc.n	185b4 <__divsi3+0x94>
   185b0:	024b      	lsls	r3, r1, #9
   185b2:	1ac0      	subs	r0, r0, r3
   185b4:	4152      	adcs	r2, r2
   185b6:	0a03      	lsrs	r3, r0, #8
   185b8:	428b      	cmp	r3, r1
   185ba:	d301      	bcc.n	185c0 <__divsi3+0xa0>
   185bc:	020b      	lsls	r3, r1, #8
   185be:	1ac0      	subs	r0, r0, r3
   185c0:	4152      	adcs	r2, r2
   185c2:	d2cd      	bcs.n	18560 <__divsi3+0x40>
   185c4:	09c3      	lsrs	r3, r0, #7
   185c6:	428b      	cmp	r3, r1
   185c8:	d301      	bcc.n	185ce <__divsi3+0xae>
   185ca:	01cb      	lsls	r3, r1, #7
   185cc:	1ac0      	subs	r0, r0, r3
   185ce:	4152      	adcs	r2, r2
   185d0:	0983      	lsrs	r3, r0, #6
   185d2:	428b      	cmp	r3, r1
   185d4:	d301      	bcc.n	185da <__divsi3+0xba>
   185d6:	018b      	lsls	r3, r1, #6
   185d8:	1ac0      	subs	r0, r0, r3
   185da:	4152      	adcs	r2, r2
   185dc:	0943      	lsrs	r3, r0, #5
   185de:	428b      	cmp	r3, r1
   185e0:	d301      	bcc.n	185e6 <__divsi3+0xc6>
   185e2:	014b      	lsls	r3, r1, #5
   185e4:	1ac0      	subs	r0, r0, r3
   185e6:	4152      	adcs	r2, r2
   185e8:	0903      	lsrs	r3, r0, #4
   185ea:	428b      	cmp	r3, r1
   185ec:	d301      	bcc.n	185f2 <__divsi3+0xd2>
   185ee:	010b      	lsls	r3, r1, #4
   185f0:	1ac0      	subs	r0, r0, r3
   185f2:	4152      	adcs	r2, r2
   185f4:	08c3      	lsrs	r3, r0, #3
   185f6:	428b      	cmp	r3, r1
   185f8:	d301      	bcc.n	185fe <__divsi3+0xde>
   185fa:	00cb      	lsls	r3, r1, #3
   185fc:	1ac0      	subs	r0, r0, r3
   185fe:	4152      	adcs	r2, r2
   18600:	0883      	lsrs	r3, r0, #2
   18602:	428b      	cmp	r3, r1
   18604:	d301      	bcc.n	1860a <__divsi3+0xea>
   18606:	008b      	lsls	r3, r1, #2
   18608:	1ac0      	subs	r0, r0, r3
   1860a:	4152      	adcs	r2, r2
   1860c:	0843      	lsrs	r3, r0, #1
   1860e:	428b      	cmp	r3, r1
   18610:	d301      	bcc.n	18616 <__divsi3+0xf6>
   18612:	004b      	lsls	r3, r1, #1
   18614:	1ac0      	subs	r0, r0, r3
   18616:	4152      	adcs	r2, r2
   18618:	1a41      	subs	r1, r0, r1
   1861a:	d200      	bcs.n	1861e <__divsi3+0xfe>
   1861c:	4601      	mov	r1, r0
   1861e:	4152      	adcs	r2, r2
   18620:	4610      	mov	r0, r2
   18622:	4770      	bx	lr
   18624:	e05d      	b.n	186e2 <__divsi3+0x1c2>
   18626:	0fca      	lsrs	r2, r1, #31
   18628:	d000      	beq.n	1862c <__divsi3+0x10c>
   1862a:	4249      	negs	r1, r1
   1862c:	1003      	asrs	r3, r0, #32
   1862e:	d300      	bcc.n	18632 <__divsi3+0x112>
   18630:	4240      	negs	r0, r0
   18632:	4053      	eors	r3, r2
   18634:	2200      	movs	r2, #0
   18636:	469c      	mov	ip, r3
   18638:	0903      	lsrs	r3, r0, #4
   1863a:	428b      	cmp	r3, r1
   1863c:	d32d      	bcc.n	1869a <__divsi3+0x17a>
   1863e:	0a03      	lsrs	r3, r0, #8
   18640:	428b      	cmp	r3, r1
   18642:	d312      	bcc.n	1866a <__divsi3+0x14a>
   18644:	22fc      	movs	r2, #252	; 0xfc
   18646:	0189      	lsls	r1, r1, #6
   18648:	ba12      	rev	r2, r2
   1864a:	0a03      	lsrs	r3, r0, #8
   1864c:	428b      	cmp	r3, r1
   1864e:	d30c      	bcc.n	1866a <__divsi3+0x14a>
   18650:	0189      	lsls	r1, r1, #6
   18652:	1192      	asrs	r2, r2, #6
   18654:	428b      	cmp	r3, r1
   18656:	d308      	bcc.n	1866a <__divsi3+0x14a>
   18658:	0189      	lsls	r1, r1, #6
   1865a:	1192      	asrs	r2, r2, #6
   1865c:	428b      	cmp	r3, r1
   1865e:	d304      	bcc.n	1866a <__divsi3+0x14a>
   18660:	0189      	lsls	r1, r1, #6
   18662:	d03a      	beq.n	186da <__divsi3+0x1ba>
   18664:	1192      	asrs	r2, r2, #6
   18666:	e000      	b.n	1866a <__divsi3+0x14a>
   18668:	0989      	lsrs	r1, r1, #6
   1866a:	09c3      	lsrs	r3, r0, #7
   1866c:	428b      	cmp	r3, r1
   1866e:	d301      	bcc.n	18674 <__divsi3+0x154>
   18670:	01cb      	lsls	r3, r1, #7
   18672:	1ac0      	subs	r0, r0, r3
   18674:	4152      	adcs	r2, r2
   18676:	0983      	lsrs	r3, r0, #6
   18678:	428b      	cmp	r3, r1
   1867a:	d301      	bcc.n	18680 <__divsi3+0x160>
   1867c:	018b      	lsls	r3, r1, #6
   1867e:	1ac0      	subs	r0, r0, r3
   18680:	4152      	adcs	r2, r2
   18682:	0943      	lsrs	r3, r0, #5
   18684:	428b      	cmp	r3, r1
   18686:	d301      	bcc.n	1868c <__divsi3+0x16c>
   18688:	014b      	lsls	r3, r1, #5
   1868a:	1ac0      	subs	r0, r0, r3
   1868c:	4152      	adcs	r2, r2
   1868e:	0903      	lsrs	r3, r0, #4
   18690:	428b      	cmp	r3, r1
   18692:	d301      	bcc.n	18698 <__divsi3+0x178>
   18694:	010b      	lsls	r3, r1, #4
   18696:	1ac0      	subs	r0, r0, r3
   18698:	4152      	adcs	r2, r2
   1869a:	08c3      	lsrs	r3, r0, #3
   1869c:	428b      	cmp	r3, r1
   1869e:	d301      	bcc.n	186a4 <__divsi3+0x184>
   186a0:	00cb      	lsls	r3, r1, #3
   186a2:	1ac0      	subs	r0, r0, r3
   186a4:	4152      	adcs	r2, r2
   186a6:	0883      	lsrs	r3, r0, #2
   186a8:	428b      	cmp	r3, r1
   186aa:	d301      	bcc.n	186b0 <__divsi3+0x190>
   186ac:	008b      	lsls	r3, r1, #2
   186ae:	1ac0      	subs	r0, r0, r3
   186b0:	4152      	adcs	r2, r2
   186b2:	d2d9      	bcs.n	18668 <__divsi3+0x148>
   186b4:	0843      	lsrs	r3, r0, #1
   186b6:	428b      	cmp	r3, r1
   186b8:	d301      	bcc.n	186be <__divsi3+0x19e>
   186ba:	004b      	lsls	r3, r1, #1
   186bc:	1ac0      	subs	r0, r0, r3
   186be:	4152      	adcs	r2, r2
   186c0:	1a41      	subs	r1, r0, r1
   186c2:	d200      	bcs.n	186c6 <__divsi3+0x1a6>
   186c4:	4601      	mov	r1, r0
   186c6:	4663      	mov	r3, ip
   186c8:	4152      	adcs	r2, r2
   186ca:	105b      	asrs	r3, r3, #1
   186cc:	4610      	mov	r0, r2
   186ce:	d301      	bcc.n	186d4 <__divsi3+0x1b4>
   186d0:	4240      	negs	r0, r0
   186d2:	2b00      	cmp	r3, #0
   186d4:	d500      	bpl.n	186d8 <__divsi3+0x1b8>
   186d6:	4249      	negs	r1, r1
   186d8:	4770      	bx	lr
   186da:	4663      	mov	r3, ip
   186dc:	105b      	asrs	r3, r3, #1
   186de:	d300      	bcc.n	186e2 <__divsi3+0x1c2>
   186e0:	4240      	negs	r0, r0
   186e2:	b501      	push	{r0, lr}
   186e4:	2000      	movs	r0, #0
   186e6:	f000 f805 	bl	186f4 <__aeabi_idiv0>
   186ea:	bd02      	pop	{r1, pc}

000186ec <__aeabi_idivmod>:
   186ec:	2900      	cmp	r1, #0
   186ee:	d0f8      	beq.n	186e2 <__divsi3+0x1c2>
   186f0:	e716      	b.n	18520 <__divsi3>
   186f2:	4770      	bx	lr

000186f4 <__aeabi_idiv0>:
   186f4:	4770      	bx	lr
   186f6:	46c0      	nop			; (mov r8, r8)

000186f8 <__aeabi_cdrcmple>:
   186f8:	4684      	mov	ip, r0
   186fa:	1c10      	adds	r0, r2, #0
   186fc:	4662      	mov	r2, ip
   186fe:	468c      	mov	ip, r1
   18700:	1c19      	adds	r1, r3, #0
   18702:	4663      	mov	r3, ip
   18704:	e000      	b.n	18708 <__aeabi_cdcmpeq>
   18706:	46c0      	nop			; (mov r8, r8)

00018708 <__aeabi_cdcmpeq>:
   18708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1870a:	f001 fea3 	bl	1a454 <__ledf2>
   1870e:	2800      	cmp	r0, #0
   18710:	d401      	bmi.n	18716 <__aeabi_cdcmpeq+0xe>
   18712:	2100      	movs	r1, #0
   18714:	42c8      	cmn	r0, r1
   18716:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00018718 <__aeabi_dcmpeq>:
   18718:	b510      	push	{r4, lr}
   1871a:	f001 fdfd 	bl	1a318 <__eqdf2>
   1871e:	4240      	negs	r0, r0
   18720:	3001      	adds	r0, #1
   18722:	bd10      	pop	{r4, pc}

00018724 <__aeabi_dcmplt>:
   18724:	b510      	push	{r4, lr}
   18726:	f001 fe95 	bl	1a454 <__ledf2>
   1872a:	2800      	cmp	r0, #0
   1872c:	db01      	blt.n	18732 <__aeabi_dcmplt+0xe>
   1872e:	2000      	movs	r0, #0
   18730:	bd10      	pop	{r4, pc}
   18732:	2001      	movs	r0, #1
   18734:	bd10      	pop	{r4, pc}
   18736:	46c0      	nop			; (mov r8, r8)

00018738 <__aeabi_dcmple>:
   18738:	b510      	push	{r4, lr}
   1873a:	f001 fe8b 	bl	1a454 <__ledf2>
   1873e:	2800      	cmp	r0, #0
   18740:	dd01      	ble.n	18746 <__aeabi_dcmple+0xe>
   18742:	2000      	movs	r0, #0
   18744:	bd10      	pop	{r4, pc}
   18746:	2001      	movs	r0, #1
   18748:	bd10      	pop	{r4, pc}
   1874a:	46c0      	nop			; (mov r8, r8)

0001874c <__aeabi_dcmpgt>:
   1874c:	b510      	push	{r4, lr}
   1874e:	f001 fe1d 	bl	1a38c <__gedf2>
   18752:	2800      	cmp	r0, #0
   18754:	dc01      	bgt.n	1875a <__aeabi_dcmpgt+0xe>
   18756:	2000      	movs	r0, #0
   18758:	bd10      	pop	{r4, pc}
   1875a:	2001      	movs	r0, #1
   1875c:	bd10      	pop	{r4, pc}
   1875e:	46c0      	nop			; (mov r8, r8)

00018760 <__aeabi_dcmpge>:
   18760:	b510      	push	{r4, lr}
   18762:	f001 fe13 	bl	1a38c <__gedf2>
   18766:	2800      	cmp	r0, #0
   18768:	da01      	bge.n	1876e <__aeabi_dcmpge+0xe>
   1876a:	2000      	movs	r0, #0
   1876c:	bd10      	pop	{r4, pc}
   1876e:	2001      	movs	r0, #1
   18770:	bd10      	pop	{r4, pc}
   18772:	46c0      	nop			; (mov r8, r8)

00018774 <__aeabi_cfrcmple>:
   18774:	4684      	mov	ip, r0
   18776:	1c08      	adds	r0, r1, #0
   18778:	4661      	mov	r1, ip
   1877a:	e7ff      	b.n	1877c <__aeabi_cfcmpeq>

0001877c <__aeabi_cfcmpeq>:
   1877c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1877e:	f000 fbd3 	bl	18f28 <__lesf2>
   18782:	2800      	cmp	r0, #0
   18784:	d401      	bmi.n	1878a <__aeabi_cfcmpeq+0xe>
   18786:	2100      	movs	r1, #0
   18788:	42c8      	cmn	r0, r1
   1878a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001878c <__aeabi_fcmpeq>:
   1878c:	b510      	push	{r4, lr}
   1878e:	f000 fb65 	bl	18e5c <__eqsf2>
   18792:	4240      	negs	r0, r0
   18794:	3001      	adds	r0, #1
   18796:	bd10      	pop	{r4, pc}

00018798 <__aeabi_fcmplt>:
   18798:	b510      	push	{r4, lr}
   1879a:	f000 fbc5 	bl	18f28 <__lesf2>
   1879e:	2800      	cmp	r0, #0
   187a0:	db01      	blt.n	187a6 <__aeabi_fcmplt+0xe>
   187a2:	2000      	movs	r0, #0
   187a4:	bd10      	pop	{r4, pc}
   187a6:	2001      	movs	r0, #1
   187a8:	bd10      	pop	{r4, pc}
   187aa:	46c0      	nop			; (mov r8, r8)

000187ac <__aeabi_fcmple>:
   187ac:	b510      	push	{r4, lr}
   187ae:	f000 fbbb 	bl	18f28 <__lesf2>
   187b2:	2800      	cmp	r0, #0
   187b4:	dd01      	ble.n	187ba <__aeabi_fcmple+0xe>
   187b6:	2000      	movs	r0, #0
   187b8:	bd10      	pop	{r4, pc}
   187ba:	2001      	movs	r0, #1
   187bc:	bd10      	pop	{r4, pc}
   187be:	46c0      	nop			; (mov r8, r8)

000187c0 <__aeabi_fcmpgt>:
   187c0:	b510      	push	{r4, lr}
   187c2:	f000 fb71 	bl	18ea8 <__gesf2>
   187c6:	2800      	cmp	r0, #0
   187c8:	dc01      	bgt.n	187ce <__aeabi_fcmpgt+0xe>
   187ca:	2000      	movs	r0, #0
   187cc:	bd10      	pop	{r4, pc}
   187ce:	2001      	movs	r0, #1
   187d0:	bd10      	pop	{r4, pc}
   187d2:	46c0      	nop			; (mov r8, r8)

000187d4 <__aeabi_fcmpge>:
   187d4:	b510      	push	{r4, lr}
   187d6:	f000 fb67 	bl	18ea8 <__gesf2>
   187da:	2800      	cmp	r0, #0
   187dc:	da01      	bge.n	187e2 <__aeabi_fcmpge+0xe>
   187de:	2000      	movs	r0, #0
   187e0:	bd10      	pop	{r4, pc}
   187e2:	2001      	movs	r0, #1
   187e4:	bd10      	pop	{r4, pc}
   187e6:	46c0      	nop			; (mov r8, r8)

000187e8 <__aeabi_lmul>:
   187e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   187ea:	46ce      	mov	lr, r9
   187ec:	4647      	mov	r7, r8
   187ee:	0415      	lsls	r5, r2, #16
   187f0:	0c2d      	lsrs	r5, r5, #16
   187f2:	002e      	movs	r6, r5
   187f4:	b580      	push	{r7, lr}
   187f6:	0407      	lsls	r7, r0, #16
   187f8:	0c14      	lsrs	r4, r2, #16
   187fa:	0c3f      	lsrs	r7, r7, #16
   187fc:	4699      	mov	r9, r3
   187fe:	0c03      	lsrs	r3, r0, #16
   18800:	437e      	muls	r6, r7
   18802:	435d      	muls	r5, r3
   18804:	4367      	muls	r7, r4
   18806:	4363      	muls	r3, r4
   18808:	197f      	adds	r7, r7, r5
   1880a:	0c34      	lsrs	r4, r6, #16
   1880c:	19e4      	adds	r4, r4, r7
   1880e:	469c      	mov	ip, r3
   18810:	42a5      	cmp	r5, r4
   18812:	d903      	bls.n	1881c <__aeabi_lmul+0x34>
   18814:	2380      	movs	r3, #128	; 0x80
   18816:	025b      	lsls	r3, r3, #9
   18818:	4698      	mov	r8, r3
   1881a:	44c4      	add	ip, r8
   1881c:	464b      	mov	r3, r9
   1881e:	4351      	muls	r1, r2
   18820:	4343      	muls	r3, r0
   18822:	0436      	lsls	r6, r6, #16
   18824:	0c36      	lsrs	r6, r6, #16
   18826:	0c25      	lsrs	r5, r4, #16
   18828:	0424      	lsls	r4, r4, #16
   1882a:	4465      	add	r5, ip
   1882c:	19a4      	adds	r4, r4, r6
   1882e:	1859      	adds	r1, r3, r1
   18830:	1949      	adds	r1, r1, r5
   18832:	0020      	movs	r0, r4
   18834:	bc0c      	pop	{r2, r3}
   18836:	4690      	mov	r8, r2
   18838:	4699      	mov	r9, r3
   1883a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001883c <__aeabi_f2uiz>:
   1883c:	219e      	movs	r1, #158	; 0x9e
   1883e:	b510      	push	{r4, lr}
   18840:	05c9      	lsls	r1, r1, #23
   18842:	1c04      	adds	r4, r0, #0
   18844:	f7ff ffc6 	bl	187d4 <__aeabi_fcmpge>
   18848:	2800      	cmp	r0, #0
   1884a:	d103      	bne.n	18854 <__aeabi_f2uiz+0x18>
   1884c:	1c20      	adds	r0, r4, #0
   1884e:	f000 fe69 	bl	19524 <__aeabi_f2iz>
   18852:	bd10      	pop	{r4, pc}
   18854:	219e      	movs	r1, #158	; 0x9e
   18856:	1c20      	adds	r0, r4, #0
   18858:	05c9      	lsls	r1, r1, #23
   1885a:	f000 fcc7 	bl	191ec <__aeabi_fsub>
   1885e:	f000 fe61 	bl	19524 <__aeabi_f2iz>
   18862:	2380      	movs	r3, #128	; 0x80
   18864:	061b      	lsls	r3, r3, #24
   18866:	469c      	mov	ip, r3
   18868:	4460      	add	r0, ip
   1886a:	e7f2      	b.n	18852 <__aeabi_f2uiz+0x16>

0001886c <__aeabi_d2uiz>:
   1886c:	b570      	push	{r4, r5, r6, lr}
   1886e:	2200      	movs	r2, #0
   18870:	4b0c      	ldr	r3, [pc, #48]	; (188a4 <__aeabi_d2uiz+0x38>)
   18872:	0004      	movs	r4, r0
   18874:	000d      	movs	r5, r1
   18876:	f7ff ff73 	bl	18760 <__aeabi_dcmpge>
   1887a:	2800      	cmp	r0, #0
   1887c:	d104      	bne.n	18888 <__aeabi_d2uiz+0x1c>
   1887e:	0020      	movs	r0, r4
   18880:	0029      	movs	r1, r5
   18882:	f002 fbdf 	bl	1b044 <__aeabi_d2iz>
   18886:	bd70      	pop	{r4, r5, r6, pc}
   18888:	4b06      	ldr	r3, [pc, #24]	; (188a4 <__aeabi_d2uiz+0x38>)
   1888a:	2200      	movs	r2, #0
   1888c:	0020      	movs	r0, r4
   1888e:	0029      	movs	r1, r5
   18890:	f002 f8c2 	bl	1aa18 <__aeabi_dsub>
   18894:	f002 fbd6 	bl	1b044 <__aeabi_d2iz>
   18898:	2380      	movs	r3, #128	; 0x80
   1889a:	061b      	lsls	r3, r3, #24
   1889c:	469c      	mov	ip, r3
   1889e:	4460      	add	r0, ip
   188a0:	e7f1      	b.n	18886 <__aeabi_d2uiz+0x1a>
   188a2:	46c0      	nop			; (mov r8, r8)
   188a4:	41e00000 	.word	0x41e00000

000188a8 <__aeabi_fadd>:
   188a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   188aa:	46c6      	mov	lr, r8
   188ac:	024e      	lsls	r6, r1, #9
   188ae:	0247      	lsls	r7, r0, #9
   188b0:	0a76      	lsrs	r6, r6, #9
   188b2:	0a7b      	lsrs	r3, r7, #9
   188b4:	0044      	lsls	r4, r0, #1
   188b6:	0fc5      	lsrs	r5, r0, #31
   188b8:	00f7      	lsls	r7, r6, #3
   188ba:	0048      	lsls	r0, r1, #1
   188bc:	4698      	mov	r8, r3
   188be:	b500      	push	{lr}
   188c0:	0e24      	lsrs	r4, r4, #24
   188c2:	002a      	movs	r2, r5
   188c4:	00db      	lsls	r3, r3, #3
   188c6:	0e00      	lsrs	r0, r0, #24
   188c8:	0fc9      	lsrs	r1, r1, #31
   188ca:	46bc      	mov	ip, r7
   188cc:	428d      	cmp	r5, r1
   188ce:	d067      	beq.n	189a0 <__aeabi_fadd+0xf8>
   188d0:	1a22      	subs	r2, r4, r0
   188d2:	2a00      	cmp	r2, #0
   188d4:	dc00      	bgt.n	188d8 <__aeabi_fadd+0x30>
   188d6:	e0a5      	b.n	18a24 <__aeabi_fadd+0x17c>
   188d8:	2800      	cmp	r0, #0
   188da:	d13a      	bne.n	18952 <__aeabi_fadd+0xaa>
   188dc:	2f00      	cmp	r7, #0
   188de:	d100      	bne.n	188e2 <__aeabi_fadd+0x3a>
   188e0:	e093      	b.n	18a0a <__aeabi_fadd+0x162>
   188e2:	1e51      	subs	r1, r2, #1
   188e4:	2900      	cmp	r1, #0
   188e6:	d000      	beq.n	188ea <__aeabi_fadd+0x42>
   188e8:	e0bc      	b.n	18a64 <__aeabi_fadd+0x1bc>
   188ea:	2401      	movs	r4, #1
   188ec:	1bdb      	subs	r3, r3, r7
   188ee:	015a      	lsls	r2, r3, #5
   188f0:	d546      	bpl.n	18980 <__aeabi_fadd+0xd8>
   188f2:	019b      	lsls	r3, r3, #6
   188f4:	099e      	lsrs	r6, r3, #6
   188f6:	0030      	movs	r0, r6
   188f8:	f002 fd2e 	bl	1b358 <__clzsi2>
   188fc:	3805      	subs	r0, #5
   188fe:	4086      	lsls	r6, r0
   18900:	4284      	cmp	r4, r0
   18902:	dd00      	ble.n	18906 <__aeabi_fadd+0x5e>
   18904:	e09d      	b.n	18a42 <__aeabi_fadd+0x19a>
   18906:	1b04      	subs	r4, r0, r4
   18908:	0032      	movs	r2, r6
   1890a:	2020      	movs	r0, #32
   1890c:	3401      	adds	r4, #1
   1890e:	40e2      	lsrs	r2, r4
   18910:	1b04      	subs	r4, r0, r4
   18912:	40a6      	lsls	r6, r4
   18914:	0033      	movs	r3, r6
   18916:	1e5e      	subs	r6, r3, #1
   18918:	41b3      	sbcs	r3, r6
   1891a:	2400      	movs	r4, #0
   1891c:	4313      	orrs	r3, r2
   1891e:	075a      	lsls	r2, r3, #29
   18920:	d004      	beq.n	1892c <__aeabi_fadd+0x84>
   18922:	220f      	movs	r2, #15
   18924:	401a      	ands	r2, r3
   18926:	2a04      	cmp	r2, #4
   18928:	d000      	beq.n	1892c <__aeabi_fadd+0x84>
   1892a:	3304      	adds	r3, #4
   1892c:	015a      	lsls	r2, r3, #5
   1892e:	d529      	bpl.n	18984 <__aeabi_fadd+0xdc>
   18930:	3401      	adds	r4, #1
   18932:	2cff      	cmp	r4, #255	; 0xff
   18934:	d100      	bne.n	18938 <__aeabi_fadd+0x90>
   18936:	e081      	b.n	18a3c <__aeabi_fadd+0x194>
   18938:	002a      	movs	r2, r5
   1893a:	019b      	lsls	r3, r3, #6
   1893c:	0a5b      	lsrs	r3, r3, #9
   1893e:	b2e4      	uxtb	r4, r4
   18940:	025b      	lsls	r3, r3, #9
   18942:	05e4      	lsls	r4, r4, #23
   18944:	0a58      	lsrs	r0, r3, #9
   18946:	07d2      	lsls	r2, r2, #31
   18948:	4320      	orrs	r0, r4
   1894a:	4310      	orrs	r0, r2
   1894c:	bc04      	pop	{r2}
   1894e:	4690      	mov	r8, r2
   18950:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18952:	2cff      	cmp	r4, #255	; 0xff
   18954:	d0e3      	beq.n	1891e <__aeabi_fadd+0x76>
   18956:	2180      	movs	r1, #128	; 0x80
   18958:	0038      	movs	r0, r7
   1895a:	04c9      	lsls	r1, r1, #19
   1895c:	4308      	orrs	r0, r1
   1895e:	4684      	mov	ip, r0
   18960:	2a1b      	cmp	r2, #27
   18962:	dd00      	ble.n	18966 <__aeabi_fadd+0xbe>
   18964:	e082      	b.n	18a6c <__aeabi_fadd+0x1c4>
   18966:	2020      	movs	r0, #32
   18968:	4661      	mov	r1, ip
   1896a:	40d1      	lsrs	r1, r2
   1896c:	1a82      	subs	r2, r0, r2
   1896e:	4660      	mov	r0, ip
   18970:	4090      	lsls	r0, r2
   18972:	0002      	movs	r2, r0
   18974:	1e50      	subs	r0, r2, #1
   18976:	4182      	sbcs	r2, r0
   18978:	430a      	orrs	r2, r1
   1897a:	1a9b      	subs	r3, r3, r2
   1897c:	015a      	lsls	r2, r3, #5
   1897e:	d4b8      	bmi.n	188f2 <__aeabi_fadd+0x4a>
   18980:	075a      	lsls	r2, r3, #29
   18982:	d1ce      	bne.n	18922 <__aeabi_fadd+0x7a>
   18984:	08de      	lsrs	r6, r3, #3
   18986:	002a      	movs	r2, r5
   18988:	2cff      	cmp	r4, #255	; 0xff
   1898a:	d13a      	bne.n	18a02 <__aeabi_fadd+0x15a>
   1898c:	2e00      	cmp	r6, #0
   1898e:	d100      	bne.n	18992 <__aeabi_fadd+0xea>
   18990:	e0ae      	b.n	18af0 <__aeabi_fadd+0x248>
   18992:	2380      	movs	r3, #128	; 0x80
   18994:	03db      	lsls	r3, r3, #15
   18996:	4333      	orrs	r3, r6
   18998:	025b      	lsls	r3, r3, #9
   1899a:	0a5b      	lsrs	r3, r3, #9
   1899c:	24ff      	movs	r4, #255	; 0xff
   1899e:	e7cf      	b.n	18940 <__aeabi_fadd+0x98>
   189a0:	1a21      	subs	r1, r4, r0
   189a2:	2900      	cmp	r1, #0
   189a4:	dd52      	ble.n	18a4c <__aeabi_fadd+0x1a4>
   189a6:	2800      	cmp	r0, #0
   189a8:	d031      	beq.n	18a0e <__aeabi_fadd+0x166>
   189aa:	2cff      	cmp	r4, #255	; 0xff
   189ac:	d0b7      	beq.n	1891e <__aeabi_fadd+0x76>
   189ae:	2080      	movs	r0, #128	; 0x80
   189b0:	003e      	movs	r6, r7
   189b2:	04c0      	lsls	r0, r0, #19
   189b4:	4306      	orrs	r6, r0
   189b6:	46b4      	mov	ip, r6
   189b8:	291b      	cmp	r1, #27
   189ba:	dd00      	ble.n	189be <__aeabi_fadd+0x116>
   189bc:	e0aa      	b.n	18b14 <__aeabi_fadd+0x26c>
   189be:	2620      	movs	r6, #32
   189c0:	4660      	mov	r0, ip
   189c2:	40c8      	lsrs	r0, r1
   189c4:	1a71      	subs	r1, r6, r1
   189c6:	4666      	mov	r6, ip
   189c8:	408e      	lsls	r6, r1
   189ca:	0031      	movs	r1, r6
   189cc:	1e4e      	subs	r6, r1, #1
   189ce:	41b1      	sbcs	r1, r6
   189d0:	4301      	orrs	r1, r0
   189d2:	185b      	adds	r3, r3, r1
   189d4:	0159      	lsls	r1, r3, #5
   189d6:	d5d3      	bpl.n	18980 <__aeabi_fadd+0xd8>
   189d8:	3401      	adds	r4, #1
   189da:	2cff      	cmp	r4, #255	; 0xff
   189dc:	d100      	bne.n	189e0 <__aeabi_fadd+0x138>
   189de:	e087      	b.n	18af0 <__aeabi_fadd+0x248>
   189e0:	2201      	movs	r2, #1
   189e2:	4978      	ldr	r1, [pc, #480]	; (18bc4 <__aeabi_fadd+0x31c>)
   189e4:	401a      	ands	r2, r3
   189e6:	085b      	lsrs	r3, r3, #1
   189e8:	400b      	ands	r3, r1
   189ea:	4313      	orrs	r3, r2
   189ec:	e797      	b.n	1891e <__aeabi_fadd+0x76>
   189ee:	2c00      	cmp	r4, #0
   189f0:	d000      	beq.n	189f4 <__aeabi_fadd+0x14c>
   189f2:	e0a7      	b.n	18b44 <__aeabi_fadd+0x29c>
   189f4:	2b00      	cmp	r3, #0
   189f6:	d000      	beq.n	189fa <__aeabi_fadd+0x152>
   189f8:	e0b6      	b.n	18b68 <__aeabi_fadd+0x2c0>
   189fa:	1e3b      	subs	r3, r7, #0
   189fc:	d162      	bne.n	18ac4 <__aeabi_fadd+0x21c>
   189fe:	2600      	movs	r6, #0
   18a00:	2200      	movs	r2, #0
   18a02:	0273      	lsls	r3, r6, #9
   18a04:	0a5b      	lsrs	r3, r3, #9
   18a06:	b2e4      	uxtb	r4, r4
   18a08:	e79a      	b.n	18940 <__aeabi_fadd+0x98>
   18a0a:	0014      	movs	r4, r2
   18a0c:	e787      	b.n	1891e <__aeabi_fadd+0x76>
   18a0e:	2f00      	cmp	r7, #0
   18a10:	d04d      	beq.n	18aae <__aeabi_fadd+0x206>
   18a12:	1e48      	subs	r0, r1, #1
   18a14:	2800      	cmp	r0, #0
   18a16:	d157      	bne.n	18ac8 <__aeabi_fadd+0x220>
   18a18:	4463      	add	r3, ip
   18a1a:	2401      	movs	r4, #1
   18a1c:	015a      	lsls	r2, r3, #5
   18a1e:	d5af      	bpl.n	18980 <__aeabi_fadd+0xd8>
   18a20:	2402      	movs	r4, #2
   18a22:	e7dd      	b.n	189e0 <__aeabi_fadd+0x138>
   18a24:	2a00      	cmp	r2, #0
   18a26:	d124      	bne.n	18a72 <__aeabi_fadd+0x1ca>
   18a28:	1c62      	adds	r2, r4, #1
   18a2a:	b2d2      	uxtb	r2, r2
   18a2c:	2a01      	cmp	r2, #1
   18a2e:	ddde      	ble.n	189ee <__aeabi_fadd+0x146>
   18a30:	1bde      	subs	r6, r3, r7
   18a32:	0172      	lsls	r2, r6, #5
   18a34:	d535      	bpl.n	18aa2 <__aeabi_fadd+0x1fa>
   18a36:	1afe      	subs	r6, r7, r3
   18a38:	000d      	movs	r5, r1
   18a3a:	e75c      	b.n	188f6 <__aeabi_fadd+0x4e>
   18a3c:	002a      	movs	r2, r5
   18a3e:	2300      	movs	r3, #0
   18a40:	e77e      	b.n	18940 <__aeabi_fadd+0x98>
   18a42:	0033      	movs	r3, r6
   18a44:	4a60      	ldr	r2, [pc, #384]	; (18bc8 <__aeabi_fadd+0x320>)
   18a46:	1a24      	subs	r4, r4, r0
   18a48:	4013      	ands	r3, r2
   18a4a:	e768      	b.n	1891e <__aeabi_fadd+0x76>
   18a4c:	2900      	cmp	r1, #0
   18a4e:	d163      	bne.n	18b18 <__aeabi_fadd+0x270>
   18a50:	1c61      	adds	r1, r4, #1
   18a52:	b2c8      	uxtb	r0, r1
   18a54:	2801      	cmp	r0, #1
   18a56:	dd4e      	ble.n	18af6 <__aeabi_fadd+0x24e>
   18a58:	29ff      	cmp	r1, #255	; 0xff
   18a5a:	d049      	beq.n	18af0 <__aeabi_fadd+0x248>
   18a5c:	4463      	add	r3, ip
   18a5e:	085b      	lsrs	r3, r3, #1
   18a60:	000c      	movs	r4, r1
   18a62:	e75c      	b.n	1891e <__aeabi_fadd+0x76>
   18a64:	2aff      	cmp	r2, #255	; 0xff
   18a66:	d041      	beq.n	18aec <__aeabi_fadd+0x244>
   18a68:	000a      	movs	r2, r1
   18a6a:	e779      	b.n	18960 <__aeabi_fadd+0xb8>
   18a6c:	2201      	movs	r2, #1
   18a6e:	1a9b      	subs	r3, r3, r2
   18a70:	e784      	b.n	1897c <__aeabi_fadd+0xd4>
   18a72:	2c00      	cmp	r4, #0
   18a74:	d01d      	beq.n	18ab2 <__aeabi_fadd+0x20a>
   18a76:	28ff      	cmp	r0, #255	; 0xff
   18a78:	d022      	beq.n	18ac0 <__aeabi_fadd+0x218>
   18a7a:	2480      	movs	r4, #128	; 0x80
   18a7c:	04e4      	lsls	r4, r4, #19
   18a7e:	4252      	negs	r2, r2
   18a80:	4323      	orrs	r3, r4
   18a82:	2a1b      	cmp	r2, #27
   18a84:	dd00      	ble.n	18a88 <__aeabi_fadd+0x1e0>
   18a86:	e08a      	b.n	18b9e <__aeabi_fadd+0x2f6>
   18a88:	001c      	movs	r4, r3
   18a8a:	2520      	movs	r5, #32
   18a8c:	40d4      	lsrs	r4, r2
   18a8e:	1aaa      	subs	r2, r5, r2
   18a90:	4093      	lsls	r3, r2
   18a92:	1e5a      	subs	r2, r3, #1
   18a94:	4193      	sbcs	r3, r2
   18a96:	4323      	orrs	r3, r4
   18a98:	4662      	mov	r2, ip
   18a9a:	0004      	movs	r4, r0
   18a9c:	1ad3      	subs	r3, r2, r3
   18a9e:	000d      	movs	r5, r1
   18aa0:	e725      	b.n	188ee <__aeabi_fadd+0x46>
   18aa2:	2e00      	cmp	r6, #0
   18aa4:	d000      	beq.n	18aa8 <__aeabi_fadd+0x200>
   18aa6:	e726      	b.n	188f6 <__aeabi_fadd+0x4e>
   18aa8:	2200      	movs	r2, #0
   18aaa:	2400      	movs	r4, #0
   18aac:	e7a9      	b.n	18a02 <__aeabi_fadd+0x15a>
   18aae:	000c      	movs	r4, r1
   18ab0:	e735      	b.n	1891e <__aeabi_fadd+0x76>
   18ab2:	2b00      	cmp	r3, #0
   18ab4:	d04d      	beq.n	18b52 <__aeabi_fadd+0x2aa>
   18ab6:	43d2      	mvns	r2, r2
   18ab8:	2a00      	cmp	r2, #0
   18aba:	d0ed      	beq.n	18a98 <__aeabi_fadd+0x1f0>
   18abc:	28ff      	cmp	r0, #255	; 0xff
   18abe:	d1e0      	bne.n	18a82 <__aeabi_fadd+0x1da>
   18ac0:	4663      	mov	r3, ip
   18ac2:	24ff      	movs	r4, #255	; 0xff
   18ac4:	000d      	movs	r5, r1
   18ac6:	e72a      	b.n	1891e <__aeabi_fadd+0x76>
   18ac8:	29ff      	cmp	r1, #255	; 0xff
   18aca:	d00f      	beq.n	18aec <__aeabi_fadd+0x244>
   18acc:	0001      	movs	r1, r0
   18ace:	e773      	b.n	189b8 <__aeabi_fadd+0x110>
   18ad0:	2b00      	cmp	r3, #0
   18ad2:	d061      	beq.n	18b98 <__aeabi_fadd+0x2f0>
   18ad4:	24ff      	movs	r4, #255	; 0xff
   18ad6:	2f00      	cmp	r7, #0
   18ad8:	d100      	bne.n	18adc <__aeabi_fadd+0x234>
   18ada:	e720      	b.n	1891e <__aeabi_fadd+0x76>
   18adc:	2280      	movs	r2, #128	; 0x80
   18ade:	4641      	mov	r1, r8
   18ae0:	03d2      	lsls	r2, r2, #15
   18ae2:	4211      	tst	r1, r2
   18ae4:	d002      	beq.n	18aec <__aeabi_fadd+0x244>
   18ae6:	4216      	tst	r6, r2
   18ae8:	d100      	bne.n	18aec <__aeabi_fadd+0x244>
   18aea:	003b      	movs	r3, r7
   18aec:	24ff      	movs	r4, #255	; 0xff
   18aee:	e716      	b.n	1891e <__aeabi_fadd+0x76>
   18af0:	24ff      	movs	r4, #255	; 0xff
   18af2:	2300      	movs	r3, #0
   18af4:	e724      	b.n	18940 <__aeabi_fadd+0x98>
   18af6:	2c00      	cmp	r4, #0
   18af8:	d1ea      	bne.n	18ad0 <__aeabi_fadd+0x228>
   18afa:	2b00      	cmp	r3, #0
   18afc:	d058      	beq.n	18bb0 <__aeabi_fadd+0x308>
   18afe:	2f00      	cmp	r7, #0
   18b00:	d100      	bne.n	18b04 <__aeabi_fadd+0x25c>
   18b02:	e70c      	b.n	1891e <__aeabi_fadd+0x76>
   18b04:	4463      	add	r3, ip
   18b06:	015a      	lsls	r2, r3, #5
   18b08:	d400      	bmi.n	18b0c <__aeabi_fadd+0x264>
   18b0a:	e739      	b.n	18980 <__aeabi_fadd+0xd8>
   18b0c:	4a2e      	ldr	r2, [pc, #184]	; (18bc8 <__aeabi_fadd+0x320>)
   18b0e:	000c      	movs	r4, r1
   18b10:	4013      	ands	r3, r2
   18b12:	e704      	b.n	1891e <__aeabi_fadd+0x76>
   18b14:	2101      	movs	r1, #1
   18b16:	e75c      	b.n	189d2 <__aeabi_fadd+0x12a>
   18b18:	2c00      	cmp	r4, #0
   18b1a:	d11e      	bne.n	18b5a <__aeabi_fadd+0x2b2>
   18b1c:	2b00      	cmp	r3, #0
   18b1e:	d040      	beq.n	18ba2 <__aeabi_fadd+0x2fa>
   18b20:	43c9      	mvns	r1, r1
   18b22:	2900      	cmp	r1, #0
   18b24:	d00b      	beq.n	18b3e <__aeabi_fadd+0x296>
   18b26:	28ff      	cmp	r0, #255	; 0xff
   18b28:	d036      	beq.n	18b98 <__aeabi_fadd+0x2f0>
   18b2a:	291b      	cmp	r1, #27
   18b2c:	dc47      	bgt.n	18bbe <__aeabi_fadd+0x316>
   18b2e:	001c      	movs	r4, r3
   18b30:	2620      	movs	r6, #32
   18b32:	40cc      	lsrs	r4, r1
   18b34:	1a71      	subs	r1, r6, r1
   18b36:	408b      	lsls	r3, r1
   18b38:	1e59      	subs	r1, r3, #1
   18b3a:	418b      	sbcs	r3, r1
   18b3c:	4323      	orrs	r3, r4
   18b3e:	4463      	add	r3, ip
   18b40:	0004      	movs	r4, r0
   18b42:	e747      	b.n	189d4 <__aeabi_fadd+0x12c>
   18b44:	2b00      	cmp	r3, #0
   18b46:	d118      	bne.n	18b7a <__aeabi_fadd+0x2d2>
   18b48:	1e3b      	subs	r3, r7, #0
   18b4a:	d02d      	beq.n	18ba8 <__aeabi_fadd+0x300>
   18b4c:	000d      	movs	r5, r1
   18b4e:	24ff      	movs	r4, #255	; 0xff
   18b50:	e6e5      	b.n	1891e <__aeabi_fadd+0x76>
   18b52:	003b      	movs	r3, r7
   18b54:	0004      	movs	r4, r0
   18b56:	000d      	movs	r5, r1
   18b58:	e6e1      	b.n	1891e <__aeabi_fadd+0x76>
   18b5a:	28ff      	cmp	r0, #255	; 0xff
   18b5c:	d01c      	beq.n	18b98 <__aeabi_fadd+0x2f0>
   18b5e:	2480      	movs	r4, #128	; 0x80
   18b60:	04e4      	lsls	r4, r4, #19
   18b62:	4249      	negs	r1, r1
   18b64:	4323      	orrs	r3, r4
   18b66:	e7e0      	b.n	18b2a <__aeabi_fadd+0x282>
   18b68:	2f00      	cmp	r7, #0
   18b6a:	d100      	bne.n	18b6e <__aeabi_fadd+0x2c6>
   18b6c:	e6d7      	b.n	1891e <__aeabi_fadd+0x76>
   18b6e:	1bde      	subs	r6, r3, r7
   18b70:	0172      	lsls	r2, r6, #5
   18b72:	d51f      	bpl.n	18bb4 <__aeabi_fadd+0x30c>
   18b74:	1afb      	subs	r3, r7, r3
   18b76:	000d      	movs	r5, r1
   18b78:	e6d1      	b.n	1891e <__aeabi_fadd+0x76>
   18b7a:	24ff      	movs	r4, #255	; 0xff
   18b7c:	2f00      	cmp	r7, #0
   18b7e:	d100      	bne.n	18b82 <__aeabi_fadd+0x2da>
   18b80:	e6cd      	b.n	1891e <__aeabi_fadd+0x76>
   18b82:	2280      	movs	r2, #128	; 0x80
   18b84:	4640      	mov	r0, r8
   18b86:	03d2      	lsls	r2, r2, #15
   18b88:	4210      	tst	r0, r2
   18b8a:	d0af      	beq.n	18aec <__aeabi_fadd+0x244>
   18b8c:	4216      	tst	r6, r2
   18b8e:	d1ad      	bne.n	18aec <__aeabi_fadd+0x244>
   18b90:	003b      	movs	r3, r7
   18b92:	000d      	movs	r5, r1
   18b94:	24ff      	movs	r4, #255	; 0xff
   18b96:	e6c2      	b.n	1891e <__aeabi_fadd+0x76>
   18b98:	4663      	mov	r3, ip
   18b9a:	24ff      	movs	r4, #255	; 0xff
   18b9c:	e6bf      	b.n	1891e <__aeabi_fadd+0x76>
   18b9e:	2301      	movs	r3, #1
   18ba0:	e77a      	b.n	18a98 <__aeabi_fadd+0x1f0>
   18ba2:	003b      	movs	r3, r7
   18ba4:	0004      	movs	r4, r0
   18ba6:	e6ba      	b.n	1891e <__aeabi_fadd+0x76>
   18ba8:	2680      	movs	r6, #128	; 0x80
   18baa:	2200      	movs	r2, #0
   18bac:	03f6      	lsls	r6, r6, #15
   18bae:	e6f0      	b.n	18992 <__aeabi_fadd+0xea>
   18bb0:	003b      	movs	r3, r7
   18bb2:	e6b4      	b.n	1891e <__aeabi_fadd+0x76>
   18bb4:	1e33      	subs	r3, r6, #0
   18bb6:	d000      	beq.n	18bba <__aeabi_fadd+0x312>
   18bb8:	e6e2      	b.n	18980 <__aeabi_fadd+0xd8>
   18bba:	2200      	movs	r2, #0
   18bbc:	e721      	b.n	18a02 <__aeabi_fadd+0x15a>
   18bbe:	2301      	movs	r3, #1
   18bc0:	e7bd      	b.n	18b3e <__aeabi_fadd+0x296>
   18bc2:	46c0      	nop			; (mov r8, r8)
   18bc4:	7dffffff 	.word	0x7dffffff
   18bc8:	fbffffff 	.word	0xfbffffff

00018bcc <__aeabi_fdiv>:
   18bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bce:	4657      	mov	r7, sl
   18bd0:	464e      	mov	r6, r9
   18bd2:	46de      	mov	lr, fp
   18bd4:	4645      	mov	r5, r8
   18bd6:	b5e0      	push	{r5, r6, r7, lr}
   18bd8:	0244      	lsls	r4, r0, #9
   18bda:	0043      	lsls	r3, r0, #1
   18bdc:	0fc6      	lsrs	r6, r0, #31
   18bde:	b083      	sub	sp, #12
   18be0:	1c0f      	adds	r7, r1, #0
   18be2:	0a64      	lsrs	r4, r4, #9
   18be4:	0e1b      	lsrs	r3, r3, #24
   18be6:	46b2      	mov	sl, r6
   18be8:	d053      	beq.n	18c92 <__aeabi_fdiv+0xc6>
   18bea:	2bff      	cmp	r3, #255	; 0xff
   18bec:	d027      	beq.n	18c3e <__aeabi_fdiv+0x72>
   18bee:	2280      	movs	r2, #128	; 0x80
   18bf0:	00e4      	lsls	r4, r4, #3
   18bf2:	04d2      	lsls	r2, r2, #19
   18bf4:	4314      	orrs	r4, r2
   18bf6:	227f      	movs	r2, #127	; 0x7f
   18bf8:	4252      	negs	r2, r2
   18bfa:	4690      	mov	r8, r2
   18bfc:	4498      	add	r8, r3
   18bfe:	2300      	movs	r3, #0
   18c00:	4699      	mov	r9, r3
   18c02:	469b      	mov	fp, r3
   18c04:	027d      	lsls	r5, r7, #9
   18c06:	0078      	lsls	r0, r7, #1
   18c08:	0ffb      	lsrs	r3, r7, #31
   18c0a:	0a6d      	lsrs	r5, r5, #9
   18c0c:	0e00      	lsrs	r0, r0, #24
   18c0e:	9300      	str	r3, [sp, #0]
   18c10:	d024      	beq.n	18c5c <__aeabi_fdiv+0x90>
   18c12:	28ff      	cmp	r0, #255	; 0xff
   18c14:	d046      	beq.n	18ca4 <__aeabi_fdiv+0xd8>
   18c16:	2380      	movs	r3, #128	; 0x80
   18c18:	2100      	movs	r1, #0
   18c1a:	00ed      	lsls	r5, r5, #3
   18c1c:	04db      	lsls	r3, r3, #19
   18c1e:	431d      	orrs	r5, r3
   18c20:	387f      	subs	r0, #127	; 0x7f
   18c22:	4647      	mov	r7, r8
   18c24:	1a38      	subs	r0, r7, r0
   18c26:	464f      	mov	r7, r9
   18c28:	430f      	orrs	r7, r1
   18c2a:	00bf      	lsls	r7, r7, #2
   18c2c:	46b9      	mov	r9, r7
   18c2e:	0033      	movs	r3, r6
   18c30:	9a00      	ldr	r2, [sp, #0]
   18c32:	4f87      	ldr	r7, [pc, #540]	; (18e50 <__aeabi_fdiv+0x284>)
   18c34:	4053      	eors	r3, r2
   18c36:	464a      	mov	r2, r9
   18c38:	58ba      	ldr	r2, [r7, r2]
   18c3a:	9301      	str	r3, [sp, #4]
   18c3c:	4697      	mov	pc, r2
   18c3e:	2c00      	cmp	r4, #0
   18c40:	d14e      	bne.n	18ce0 <__aeabi_fdiv+0x114>
   18c42:	2308      	movs	r3, #8
   18c44:	4699      	mov	r9, r3
   18c46:	33f7      	adds	r3, #247	; 0xf7
   18c48:	4698      	mov	r8, r3
   18c4a:	3bfd      	subs	r3, #253	; 0xfd
   18c4c:	469b      	mov	fp, r3
   18c4e:	027d      	lsls	r5, r7, #9
   18c50:	0078      	lsls	r0, r7, #1
   18c52:	0ffb      	lsrs	r3, r7, #31
   18c54:	0a6d      	lsrs	r5, r5, #9
   18c56:	0e00      	lsrs	r0, r0, #24
   18c58:	9300      	str	r3, [sp, #0]
   18c5a:	d1da      	bne.n	18c12 <__aeabi_fdiv+0x46>
   18c5c:	2d00      	cmp	r5, #0
   18c5e:	d126      	bne.n	18cae <__aeabi_fdiv+0xe2>
   18c60:	2000      	movs	r0, #0
   18c62:	2101      	movs	r1, #1
   18c64:	0033      	movs	r3, r6
   18c66:	9a00      	ldr	r2, [sp, #0]
   18c68:	4f7a      	ldr	r7, [pc, #488]	; (18e54 <__aeabi_fdiv+0x288>)
   18c6a:	4053      	eors	r3, r2
   18c6c:	4642      	mov	r2, r8
   18c6e:	1a10      	subs	r0, r2, r0
   18c70:	464a      	mov	r2, r9
   18c72:	430a      	orrs	r2, r1
   18c74:	0092      	lsls	r2, r2, #2
   18c76:	58ba      	ldr	r2, [r7, r2]
   18c78:	001d      	movs	r5, r3
   18c7a:	4697      	mov	pc, r2
   18c7c:	9b00      	ldr	r3, [sp, #0]
   18c7e:	002c      	movs	r4, r5
   18c80:	469a      	mov	sl, r3
   18c82:	468b      	mov	fp, r1
   18c84:	465b      	mov	r3, fp
   18c86:	2b02      	cmp	r3, #2
   18c88:	d131      	bne.n	18cee <__aeabi_fdiv+0x122>
   18c8a:	4653      	mov	r3, sl
   18c8c:	21ff      	movs	r1, #255	; 0xff
   18c8e:	2400      	movs	r4, #0
   18c90:	e038      	b.n	18d04 <__aeabi_fdiv+0x138>
   18c92:	2c00      	cmp	r4, #0
   18c94:	d117      	bne.n	18cc6 <__aeabi_fdiv+0xfa>
   18c96:	2304      	movs	r3, #4
   18c98:	4699      	mov	r9, r3
   18c9a:	2300      	movs	r3, #0
   18c9c:	4698      	mov	r8, r3
   18c9e:	3301      	adds	r3, #1
   18ca0:	469b      	mov	fp, r3
   18ca2:	e7af      	b.n	18c04 <__aeabi_fdiv+0x38>
   18ca4:	20ff      	movs	r0, #255	; 0xff
   18ca6:	2d00      	cmp	r5, #0
   18ca8:	d10b      	bne.n	18cc2 <__aeabi_fdiv+0xf6>
   18caa:	2102      	movs	r1, #2
   18cac:	e7da      	b.n	18c64 <__aeabi_fdiv+0x98>
   18cae:	0028      	movs	r0, r5
   18cb0:	f002 fb52 	bl	1b358 <__clzsi2>
   18cb4:	1f43      	subs	r3, r0, #5
   18cb6:	409d      	lsls	r5, r3
   18cb8:	2376      	movs	r3, #118	; 0x76
   18cba:	425b      	negs	r3, r3
   18cbc:	1a18      	subs	r0, r3, r0
   18cbe:	2100      	movs	r1, #0
   18cc0:	e7af      	b.n	18c22 <__aeabi_fdiv+0x56>
   18cc2:	2103      	movs	r1, #3
   18cc4:	e7ad      	b.n	18c22 <__aeabi_fdiv+0x56>
   18cc6:	0020      	movs	r0, r4
   18cc8:	f002 fb46 	bl	1b358 <__clzsi2>
   18ccc:	1f43      	subs	r3, r0, #5
   18cce:	409c      	lsls	r4, r3
   18cd0:	2376      	movs	r3, #118	; 0x76
   18cd2:	425b      	negs	r3, r3
   18cd4:	1a1b      	subs	r3, r3, r0
   18cd6:	4698      	mov	r8, r3
   18cd8:	2300      	movs	r3, #0
   18cda:	4699      	mov	r9, r3
   18cdc:	469b      	mov	fp, r3
   18cde:	e791      	b.n	18c04 <__aeabi_fdiv+0x38>
   18ce0:	230c      	movs	r3, #12
   18ce2:	4699      	mov	r9, r3
   18ce4:	33f3      	adds	r3, #243	; 0xf3
   18ce6:	4698      	mov	r8, r3
   18ce8:	3bfc      	subs	r3, #252	; 0xfc
   18cea:	469b      	mov	fp, r3
   18cec:	e78a      	b.n	18c04 <__aeabi_fdiv+0x38>
   18cee:	2b03      	cmp	r3, #3
   18cf0:	d100      	bne.n	18cf4 <__aeabi_fdiv+0x128>
   18cf2:	e0a5      	b.n	18e40 <__aeabi_fdiv+0x274>
   18cf4:	4655      	mov	r5, sl
   18cf6:	2b01      	cmp	r3, #1
   18cf8:	d000      	beq.n	18cfc <__aeabi_fdiv+0x130>
   18cfa:	e081      	b.n	18e00 <__aeabi_fdiv+0x234>
   18cfc:	2301      	movs	r3, #1
   18cfe:	2100      	movs	r1, #0
   18d00:	2400      	movs	r4, #0
   18d02:	402b      	ands	r3, r5
   18d04:	0264      	lsls	r4, r4, #9
   18d06:	05c9      	lsls	r1, r1, #23
   18d08:	0a60      	lsrs	r0, r4, #9
   18d0a:	07db      	lsls	r3, r3, #31
   18d0c:	4308      	orrs	r0, r1
   18d0e:	4318      	orrs	r0, r3
   18d10:	b003      	add	sp, #12
   18d12:	bc3c      	pop	{r2, r3, r4, r5}
   18d14:	4690      	mov	r8, r2
   18d16:	4699      	mov	r9, r3
   18d18:	46a2      	mov	sl, r4
   18d1a:	46ab      	mov	fp, r5
   18d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d1e:	2480      	movs	r4, #128	; 0x80
   18d20:	2300      	movs	r3, #0
   18d22:	03e4      	lsls	r4, r4, #15
   18d24:	21ff      	movs	r1, #255	; 0xff
   18d26:	e7ed      	b.n	18d04 <__aeabi_fdiv+0x138>
   18d28:	21ff      	movs	r1, #255	; 0xff
   18d2a:	2400      	movs	r4, #0
   18d2c:	e7ea      	b.n	18d04 <__aeabi_fdiv+0x138>
   18d2e:	2301      	movs	r3, #1
   18d30:	1a59      	subs	r1, r3, r1
   18d32:	291b      	cmp	r1, #27
   18d34:	dd66      	ble.n	18e04 <__aeabi_fdiv+0x238>
   18d36:	9a01      	ldr	r2, [sp, #4]
   18d38:	4013      	ands	r3, r2
   18d3a:	2100      	movs	r1, #0
   18d3c:	2400      	movs	r4, #0
   18d3e:	e7e1      	b.n	18d04 <__aeabi_fdiv+0x138>
   18d40:	2380      	movs	r3, #128	; 0x80
   18d42:	03db      	lsls	r3, r3, #15
   18d44:	421c      	tst	r4, r3
   18d46:	d038      	beq.n	18dba <__aeabi_fdiv+0x1ee>
   18d48:	421d      	tst	r5, r3
   18d4a:	d051      	beq.n	18df0 <__aeabi_fdiv+0x224>
   18d4c:	431c      	orrs	r4, r3
   18d4e:	0264      	lsls	r4, r4, #9
   18d50:	0a64      	lsrs	r4, r4, #9
   18d52:	0033      	movs	r3, r6
   18d54:	21ff      	movs	r1, #255	; 0xff
   18d56:	e7d5      	b.n	18d04 <__aeabi_fdiv+0x138>
   18d58:	0163      	lsls	r3, r4, #5
   18d5a:	016c      	lsls	r4, r5, #5
   18d5c:	42a3      	cmp	r3, r4
   18d5e:	d23b      	bcs.n	18dd8 <__aeabi_fdiv+0x20c>
   18d60:	261b      	movs	r6, #27
   18d62:	2100      	movs	r1, #0
   18d64:	3801      	subs	r0, #1
   18d66:	2501      	movs	r5, #1
   18d68:	001f      	movs	r7, r3
   18d6a:	0049      	lsls	r1, r1, #1
   18d6c:	005b      	lsls	r3, r3, #1
   18d6e:	2f00      	cmp	r7, #0
   18d70:	db01      	blt.n	18d76 <__aeabi_fdiv+0x1aa>
   18d72:	429c      	cmp	r4, r3
   18d74:	d801      	bhi.n	18d7a <__aeabi_fdiv+0x1ae>
   18d76:	1b1b      	subs	r3, r3, r4
   18d78:	4329      	orrs	r1, r5
   18d7a:	3e01      	subs	r6, #1
   18d7c:	2e00      	cmp	r6, #0
   18d7e:	d1f3      	bne.n	18d68 <__aeabi_fdiv+0x19c>
   18d80:	001c      	movs	r4, r3
   18d82:	1e63      	subs	r3, r4, #1
   18d84:	419c      	sbcs	r4, r3
   18d86:	430c      	orrs	r4, r1
   18d88:	0001      	movs	r1, r0
   18d8a:	317f      	adds	r1, #127	; 0x7f
   18d8c:	2900      	cmp	r1, #0
   18d8e:	ddce      	ble.n	18d2e <__aeabi_fdiv+0x162>
   18d90:	0763      	lsls	r3, r4, #29
   18d92:	d004      	beq.n	18d9e <__aeabi_fdiv+0x1d2>
   18d94:	230f      	movs	r3, #15
   18d96:	4023      	ands	r3, r4
   18d98:	2b04      	cmp	r3, #4
   18d9a:	d000      	beq.n	18d9e <__aeabi_fdiv+0x1d2>
   18d9c:	3404      	adds	r4, #4
   18d9e:	0123      	lsls	r3, r4, #4
   18da0:	d503      	bpl.n	18daa <__aeabi_fdiv+0x1de>
   18da2:	0001      	movs	r1, r0
   18da4:	4b2c      	ldr	r3, [pc, #176]	; (18e58 <__aeabi_fdiv+0x28c>)
   18da6:	3180      	adds	r1, #128	; 0x80
   18da8:	401c      	ands	r4, r3
   18daa:	29fe      	cmp	r1, #254	; 0xfe
   18dac:	dd0d      	ble.n	18dca <__aeabi_fdiv+0x1fe>
   18dae:	2301      	movs	r3, #1
   18db0:	9a01      	ldr	r2, [sp, #4]
   18db2:	21ff      	movs	r1, #255	; 0xff
   18db4:	4013      	ands	r3, r2
   18db6:	2400      	movs	r4, #0
   18db8:	e7a4      	b.n	18d04 <__aeabi_fdiv+0x138>
   18dba:	2380      	movs	r3, #128	; 0x80
   18dbc:	03db      	lsls	r3, r3, #15
   18dbe:	431c      	orrs	r4, r3
   18dc0:	0264      	lsls	r4, r4, #9
   18dc2:	0a64      	lsrs	r4, r4, #9
   18dc4:	0033      	movs	r3, r6
   18dc6:	21ff      	movs	r1, #255	; 0xff
   18dc8:	e79c      	b.n	18d04 <__aeabi_fdiv+0x138>
   18dca:	2301      	movs	r3, #1
   18dcc:	9a01      	ldr	r2, [sp, #4]
   18dce:	01a4      	lsls	r4, r4, #6
   18dd0:	0a64      	lsrs	r4, r4, #9
   18dd2:	b2c9      	uxtb	r1, r1
   18dd4:	4013      	ands	r3, r2
   18dd6:	e795      	b.n	18d04 <__aeabi_fdiv+0x138>
   18dd8:	1b1b      	subs	r3, r3, r4
   18dda:	261a      	movs	r6, #26
   18ddc:	2101      	movs	r1, #1
   18dde:	e7c2      	b.n	18d66 <__aeabi_fdiv+0x19a>
   18de0:	9b00      	ldr	r3, [sp, #0]
   18de2:	468b      	mov	fp, r1
   18de4:	469a      	mov	sl, r3
   18de6:	2400      	movs	r4, #0
   18de8:	e74c      	b.n	18c84 <__aeabi_fdiv+0xb8>
   18dea:	0263      	lsls	r3, r4, #9
   18dec:	d5e5      	bpl.n	18dba <__aeabi_fdiv+0x1ee>
   18dee:	2500      	movs	r5, #0
   18df0:	2480      	movs	r4, #128	; 0x80
   18df2:	03e4      	lsls	r4, r4, #15
   18df4:	432c      	orrs	r4, r5
   18df6:	0264      	lsls	r4, r4, #9
   18df8:	0a64      	lsrs	r4, r4, #9
   18dfa:	9b00      	ldr	r3, [sp, #0]
   18dfc:	21ff      	movs	r1, #255	; 0xff
   18dfe:	e781      	b.n	18d04 <__aeabi_fdiv+0x138>
   18e00:	9501      	str	r5, [sp, #4]
   18e02:	e7c1      	b.n	18d88 <__aeabi_fdiv+0x1bc>
   18e04:	0023      	movs	r3, r4
   18e06:	2020      	movs	r0, #32
   18e08:	40cb      	lsrs	r3, r1
   18e0a:	1a41      	subs	r1, r0, r1
   18e0c:	408c      	lsls	r4, r1
   18e0e:	1e61      	subs	r1, r4, #1
   18e10:	418c      	sbcs	r4, r1
   18e12:	431c      	orrs	r4, r3
   18e14:	0763      	lsls	r3, r4, #29
   18e16:	d004      	beq.n	18e22 <__aeabi_fdiv+0x256>
   18e18:	230f      	movs	r3, #15
   18e1a:	4023      	ands	r3, r4
   18e1c:	2b04      	cmp	r3, #4
   18e1e:	d000      	beq.n	18e22 <__aeabi_fdiv+0x256>
   18e20:	3404      	adds	r4, #4
   18e22:	0163      	lsls	r3, r4, #5
   18e24:	d505      	bpl.n	18e32 <__aeabi_fdiv+0x266>
   18e26:	2301      	movs	r3, #1
   18e28:	9a01      	ldr	r2, [sp, #4]
   18e2a:	2101      	movs	r1, #1
   18e2c:	4013      	ands	r3, r2
   18e2e:	2400      	movs	r4, #0
   18e30:	e768      	b.n	18d04 <__aeabi_fdiv+0x138>
   18e32:	2301      	movs	r3, #1
   18e34:	9a01      	ldr	r2, [sp, #4]
   18e36:	01a4      	lsls	r4, r4, #6
   18e38:	0a64      	lsrs	r4, r4, #9
   18e3a:	4013      	ands	r3, r2
   18e3c:	2100      	movs	r1, #0
   18e3e:	e761      	b.n	18d04 <__aeabi_fdiv+0x138>
   18e40:	2380      	movs	r3, #128	; 0x80
   18e42:	03db      	lsls	r3, r3, #15
   18e44:	431c      	orrs	r4, r3
   18e46:	0264      	lsls	r4, r4, #9
   18e48:	0a64      	lsrs	r4, r4, #9
   18e4a:	4653      	mov	r3, sl
   18e4c:	21ff      	movs	r1, #255	; 0xff
   18e4e:	e759      	b.n	18d04 <__aeabi_fdiv+0x138>
   18e50:	0001bde0 	.word	0x0001bde0
   18e54:	0001be20 	.word	0x0001be20
   18e58:	f7ffffff 	.word	0xf7ffffff

00018e5c <__eqsf2>:
   18e5c:	b570      	push	{r4, r5, r6, lr}
   18e5e:	0042      	lsls	r2, r0, #1
   18e60:	0245      	lsls	r5, r0, #9
   18e62:	024e      	lsls	r6, r1, #9
   18e64:	004c      	lsls	r4, r1, #1
   18e66:	0fc3      	lsrs	r3, r0, #31
   18e68:	0a6d      	lsrs	r5, r5, #9
   18e6a:	0e12      	lsrs	r2, r2, #24
   18e6c:	0a76      	lsrs	r6, r6, #9
   18e6e:	0e24      	lsrs	r4, r4, #24
   18e70:	0fc9      	lsrs	r1, r1, #31
   18e72:	2001      	movs	r0, #1
   18e74:	2aff      	cmp	r2, #255	; 0xff
   18e76:	d006      	beq.n	18e86 <__eqsf2+0x2a>
   18e78:	2cff      	cmp	r4, #255	; 0xff
   18e7a:	d003      	beq.n	18e84 <__eqsf2+0x28>
   18e7c:	42a2      	cmp	r2, r4
   18e7e:	d101      	bne.n	18e84 <__eqsf2+0x28>
   18e80:	42b5      	cmp	r5, r6
   18e82:	d006      	beq.n	18e92 <__eqsf2+0x36>
   18e84:	bd70      	pop	{r4, r5, r6, pc}
   18e86:	2d00      	cmp	r5, #0
   18e88:	d1fc      	bne.n	18e84 <__eqsf2+0x28>
   18e8a:	2cff      	cmp	r4, #255	; 0xff
   18e8c:	d1fa      	bne.n	18e84 <__eqsf2+0x28>
   18e8e:	2e00      	cmp	r6, #0
   18e90:	d1f8      	bne.n	18e84 <__eqsf2+0x28>
   18e92:	428b      	cmp	r3, r1
   18e94:	d006      	beq.n	18ea4 <__eqsf2+0x48>
   18e96:	2001      	movs	r0, #1
   18e98:	2a00      	cmp	r2, #0
   18e9a:	d1f3      	bne.n	18e84 <__eqsf2+0x28>
   18e9c:	0028      	movs	r0, r5
   18e9e:	1e45      	subs	r5, r0, #1
   18ea0:	41a8      	sbcs	r0, r5
   18ea2:	e7ef      	b.n	18e84 <__eqsf2+0x28>
   18ea4:	2000      	movs	r0, #0
   18ea6:	e7ed      	b.n	18e84 <__eqsf2+0x28>

00018ea8 <__gesf2>:
   18ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18eaa:	0042      	lsls	r2, r0, #1
   18eac:	0245      	lsls	r5, r0, #9
   18eae:	024c      	lsls	r4, r1, #9
   18eb0:	0fc3      	lsrs	r3, r0, #31
   18eb2:	0048      	lsls	r0, r1, #1
   18eb4:	0a6d      	lsrs	r5, r5, #9
   18eb6:	0e12      	lsrs	r2, r2, #24
   18eb8:	0a64      	lsrs	r4, r4, #9
   18eba:	0e00      	lsrs	r0, r0, #24
   18ebc:	0fc9      	lsrs	r1, r1, #31
   18ebe:	2aff      	cmp	r2, #255	; 0xff
   18ec0:	d01e      	beq.n	18f00 <__gesf2+0x58>
   18ec2:	28ff      	cmp	r0, #255	; 0xff
   18ec4:	d021      	beq.n	18f0a <__gesf2+0x62>
   18ec6:	2a00      	cmp	r2, #0
   18ec8:	d10a      	bne.n	18ee0 <__gesf2+0x38>
   18eca:	426e      	negs	r6, r5
   18ecc:	416e      	adcs	r6, r5
   18ece:	b2f6      	uxtb	r6, r6
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d10f      	bne.n	18ef4 <__gesf2+0x4c>
   18ed4:	2c00      	cmp	r4, #0
   18ed6:	d10d      	bne.n	18ef4 <__gesf2+0x4c>
   18ed8:	2000      	movs	r0, #0
   18eda:	2d00      	cmp	r5, #0
   18edc:	d009      	beq.n	18ef2 <__gesf2+0x4a>
   18ede:	e005      	b.n	18eec <__gesf2+0x44>
   18ee0:	2800      	cmp	r0, #0
   18ee2:	d101      	bne.n	18ee8 <__gesf2+0x40>
   18ee4:	2c00      	cmp	r4, #0
   18ee6:	d001      	beq.n	18eec <__gesf2+0x44>
   18ee8:	428b      	cmp	r3, r1
   18eea:	d011      	beq.n	18f10 <__gesf2+0x68>
   18eec:	2101      	movs	r1, #1
   18eee:	4258      	negs	r0, r3
   18ef0:	4308      	orrs	r0, r1
   18ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ef4:	2e00      	cmp	r6, #0
   18ef6:	d0f7      	beq.n	18ee8 <__gesf2+0x40>
   18ef8:	2001      	movs	r0, #1
   18efa:	3901      	subs	r1, #1
   18efc:	4308      	orrs	r0, r1
   18efe:	e7f8      	b.n	18ef2 <__gesf2+0x4a>
   18f00:	2d00      	cmp	r5, #0
   18f02:	d0de      	beq.n	18ec2 <__gesf2+0x1a>
   18f04:	2002      	movs	r0, #2
   18f06:	4240      	negs	r0, r0
   18f08:	e7f3      	b.n	18ef2 <__gesf2+0x4a>
   18f0a:	2c00      	cmp	r4, #0
   18f0c:	d0db      	beq.n	18ec6 <__gesf2+0x1e>
   18f0e:	e7f9      	b.n	18f04 <__gesf2+0x5c>
   18f10:	4282      	cmp	r2, r0
   18f12:	dceb      	bgt.n	18eec <__gesf2+0x44>
   18f14:	db04      	blt.n	18f20 <__gesf2+0x78>
   18f16:	42a5      	cmp	r5, r4
   18f18:	d8e8      	bhi.n	18eec <__gesf2+0x44>
   18f1a:	2000      	movs	r0, #0
   18f1c:	42a5      	cmp	r5, r4
   18f1e:	d2e8      	bcs.n	18ef2 <__gesf2+0x4a>
   18f20:	2101      	movs	r1, #1
   18f22:	1e58      	subs	r0, r3, #1
   18f24:	4308      	orrs	r0, r1
   18f26:	e7e4      	b.n	18ef2 <__gesf2+0x4a>

00018f28 <__lesf2>:
   18f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f2a:	0042      	lsls	r2, r0, #1
   18f2c:	024d      	lsls	r5, r1, #9
   18f2e:	004c      	lsls	r4, r1, #1
   18f30:	0246      	lsls	r6, r0, #9
   18f32:	0a76      	lsrs	r6, r6, #9
   18f34:	0e12      	lsrs	r2, r2, #24
   18f36:	0fc3      	lsrs	r3, r0, #31
   18f38:	0a6d      	lsrs	r5, r5, #9
   18f3a:	0e24      	lsrs	r4, r4, #24
   18f3c:	0fc9      	lsrs	r1, r1, #31
   18f3e:	2aff      	cmp	r2, #255	; 0xff
   18f40:	d016      	beq.n	18f70 <__lesf2+0x48>
   18f42:	2cff      	cmp	r4, #255	; 0xff
   18f44:	d018      	beq.n	18f78 <__lesf2+0x50>
   18f46:	2a00      	cmp	r2, #0
   18f48:	d10a      	bne.n	18f60 <__lesf2+0x38>
   18f4a:	4270      	negs	r0, r6
   18f4c:	4170      	adcs	r0, r6
   18f4e:	b2c0      	uxtb	r0, r0
   18f50:	2c00      	cmp	r4, #0
   18f52:	d015      	beq.n	18f80 <__lesf2+0x58>
   18f54:	2800      	cmp	r0, #0
   18f56:	d005      	beq.n	18f64 <__lesf2+0x3c>
   18f58:	2001      	movs	r0, #1
   18f5a:	3901      	subs	r1, #1
   18f5c:	4308      	orrs	r0, r1
   18f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f60:	2c00      	cmp	r4, #0
   18f62:	d013      	beq.n	18f8c <__lesf2+0x64>
   18f64:	4299      	cmp	r1, r3
   18f66:	d014      	beq.n	18f92 <__lesf2+0x6a>
   18f68:	2001      	movs	r0, #1
   18f6a:	425b      	negs	r3, r3
   18f6c:	4318      	orrs	r0, r3
   18f6e:	e7f6      	b.n	18f5e <__lesf2+0x36>
   18f70:	2002      	movs	r0, #2
   18f72:	2e00      	cmp	r6, #0
   18f74:	d1f3      	bne.n	18f5e <__lesf2+0x36>
   18f76:	e7e4      	b.n	18f42 <__lesf2+0x1a>
   18f78:	2002      	movs	r0, #2
   18f7a:	2d00      	cmp	r5, #0
   18f7c:	d1ef      	bne.n	18f5e <__lesf2+0x36>
   18f7e:	e7e2      	b.n	18f46 <__lesf2+0x1e>
   18f80:	2d00      	cmp	r5, #0
   18f82:	d1e7      	bne.n	18f54 <__lesf2+0x2c>
   18f84:	2000      	movs	r0, #0
   18f86:	2e00      	cmp	r6, #0
   18f88:	d0e9      	beq.n	18f5e <__lesf2+0x36>
   18f8a:	e7ed      	b.n	18f68 <__lesf2+0x40>
   18f8c:	2d00      	cmp	r5, #0
   18f8e:	d1e9      	bne.n	18f64 <__lesf2+0x3c>
   18f90:	e7ea      	b.n	18f68 <__lesf2+0x40>
   18f92:	42a2      	cmp	r2, r4
   18f94:	dc06      	bgt.n	18fa4 <__lesf2+0x7c>
   18f96:	dbdf      	blt.n	18f58 <__lesf2+0x30>
   18f98:	42ae      	cmp	r6, r5
   18f9a:	d803      	bhi.n	18fa4 <__lesf2+0x7c>
   18f9c:	2000      	movs	r0, #0
   18f9e:	42ae      	cmp	r6, r5
   18fa0:	d3da      	bcc.n	18f58 <__lesf2+0x30>
   18fa2:	e7dc      	b.n	18f5e <__lesf2+0x36>
   18fa4:	2001      	movs	r0, #1
   18fa6:	4249      	negs	r1, r1
   18fa8:	4308      	orrs	r0, r1
   18faa:	e7d8      	b.n	18f5e <__lesf2+0x36>

00018fac <__aeabi_fmul>:
   18fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fae:	4657      	mov	r7, sl
   18fb0:	464e      	mov	r6, r9
   18fb2:	4645      	mov	r5, r8
   18fb4:	46de      	mov	lr, fp
   18fb6:	b5e0      	push	{r5, r6, r7, lr}
   18fb8:	0247      	lsls	r7, r0, #9
   18fba:	0046      	lsls	r6, r0, #1
   18fbc:	4688      	mov	r8, r1
   18fbe:	0a7f      	lsrs	r7, r7, #9
   18fc0:	0e36      	lsrs	r6, r6, #24
   18fc2:	0fc4      	lsrs	r4, r0, #31
   18fc4:	2e00      	cmp	r6, #0
   18fc6:	d047      	beq.n	19058 <__aeabi_fmul+0xac>
   18fc8:	2eff      	cmp	r6, #255	; 0xff
   18fca:	d024      	beq.n	19016 <__aeabi_fmul+0x6a>
   18fcc:	00fb      	lsls	r3, r7, #3
   18fce:	2780      	movs	r7, #128	; 0x80
   18fd0:	04ff      	lsls	r7, r7, #19
   18fd2:	431f      	orrs	r7, r3
   18fd4:	2300      	movs	r3, #0
   18fd6:	4699      	mov	r9, r3
   18fd8:	469a      	mov	sl, r3
   18fda:	3e7f      	subs	r6, #127	; 0x7f
   18fdc:	4643      	mov	r3, r8
   18fde:	025d      	lsls	r5, r3, #9
   18fe0:	0058      	lsls	r0, r3, #1
   18fe2:	0fdb      	lsrs	r3, r3, #31
   18fe4:	0a6d      	lsrs	r5, r5, #9
   18fe6:	0e00      	lsrs	r0, r0, #24
   18fe8:	4698      	mov	r8, r3
   18fea:	d043      	beq.n	19074 <__aeabi_fmul+0xc8>
   18fec:	28ff      	cmp	r0, #255	; 0xff
   18fee:	d03b      	beq.n	19068 <__aeabi_fmul+0xbc>
   18ff0:	00eb      	lsls	r3, r5, #3
   18ff2:	2580      	movs	r5, #128	; 0x80
   18ff4:	2200      	movs	r2, #0
   18ff6:	04ed      	lsls	r5, r5, #19
   18ff8:	431d      	orrs	r5, r3
   18ffa:	387f      	subs	r0, #127	; 0x7f
   18ffc:	1836      	adds	r6, r6, r0
   18ffe:	1c73      	adds	r3, r6, #1
   19000:	4641      	mov	r1, r8
   19002:	469b      	mov	fp, r3
   19004:	464b      	mov	r3, r9
   19006:	4061      	eors	r1, r4
   19008:	4313      	orrs	r3, r2
   1900a:	2b0f      	cmp	r3, #15
   1900c:	d864      	bhi.n	190d8 <__aeabi_fmul+0x12c>
   1900e:	4875      	ldr	r0, [pc, #468]	; (191e4 <__aeabi_fmul+0x238>)
   19010:	009b      	lsls	r3, r3, #2
   19012:	58c3      	ldr	r3, [r0, r3]
   19014:	469f      	mov	pc, r3
   19016:	2f00      	cmp	r7, #0
   19018:	d142      	bne.n	190a0 <__aeabi_fmul+0xf4>
   1901a:	2308      	movs	r3, #8
   1901c:	4699      	mov	r9, r3
   1901e:	3b06      	subs	r3, #6
   19020:	26ff      	movs	r6, #255	; 0xff
   19022:	469a      	mov	sl, r3
   19024:	e7da      	b.n	18fdc <__aeabi_fmul+0x30>
   19026:	4641      	mov	r1, r8
   19028:	2a02      	cmp	r2, #2
   1902a:	d028      	beq.n	1907e <__aeabi_fmul+0xd2>
   1902c:	2a03      	cmp	r2, #3
   1902e:	d100      	bne.n	19032 <__aeabi_fmul+0x86>
   19030:	e0ce      	b.n	191d0 <__aeabi_fmul+0x224>
   19032:	2a01      	cmp	r2, #1
   19034:	d000      	beq.n	19038 <__aeabi_fmul+0x8c>
   19036:	e0ac      	b.n	19192 <__aeabi_fmul+0x1e6>
   19038:	4011      	ands	r1, r2
   1903a:	2000      	movs	r0, #0
   1903c:	2200      	movs	r2, #0
   1903e:	b2cc      	uxtb	r4, r1
   19040:	0240      	lsls	r0, r0, #9
   19042:	05d2      	lsls	r2, r2, #23
   19044:	0a40      	lsrs	r0, r0, #9
   19046:	07e4      	lsls	r4, r4, #31
   19048:	4310      	orrs	r0, r2
   1904a:	4320      	orrs	r0, r4
   1904c:	bc3c      	pop	{r2, r3, r4, r5}
   1904e:	4690      	mov	r8, r2
   19050:	4699      	mov	r9, r3
   19052:	46a2      	mov	sl, r4
   19054:	46ab      	mov	fp, r5
   19056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19058:	2f00      	cmp	r7, #0
   1905a:	d115      	bne.n	19088 <__aeabi_fmul+0xdc>
   1905c:	2304      	movs	r3, #4
   1905e:	4699      	mov	r9, r3
   19060:	3b03      	subs	r3, #3
   19062:	2600      	movs	r6, #0
   19064:	469a      	mov	sl, r3
   19066:	e7b9      	b.n	18fdc <__aeabi_fmul+0x30>
   19068:	20ff      	movs	r0, #255	; 0xff
   1906a:	2202      	movs	r2, #2
   1906c:	2d00      	cmp	r5, #0
   1906e:	d0c5      	beq.n	18ffc <__aeabi_fmul+0x50>
   19070:	2203      	movs	r2, #3
   19072:	e7c3      	b.n	18ffc <__aeabi_fmul+0x50>
   19074:	2d00      	cmp	r5, #0
   19076:	d119      	bne.n	190ac <__aeabi_fmul+0x100>
   19078:	2000      	movs	r0, #0
   1907a:	2201      	movs	r2, #1
   1907c:	e7be      	b.n	18ffc <__aeabi_fmul+0x50>
   1907e:	2401      	movs	r4, #1
   19080:	22ff      	movs	r2, #255	; 0xff
   19082:	400c      	ands	r4, r1
   19084:	2000      	movs	r0, #0
   19086:	e7db      	b.n	19040 <__aeabi_fmul+0x94>
   19088:	0038      	movs	r0, r7
   1908a:	f002 f965 	bl	1b358 <__clzsi2>
   1908e:	2676      	movs	r6, #118	; 0x76
   19090:	1f43      	subs	r3, r0, #5
   19092:	409f      	lsls	r7, r3
   19094:	2300      	movs	r3, #0
   19096:	4276      	negs	r6, r6
   19098:	1a36      	subs	r6, r6, r0
   1909a:	4699      	mov	r9, r3
   1909c:	469a      	mov	sl, r3
   1909e:	e79d      	b.n	18fdc <__aeabi_fmul+0x30>
   190a0:	230c      	movs	r3, #12
   190a2:	4699      	mov	r9, r3
   190a4:	3b09      	subs	r3, #9
   190a6:	26ff      	movs	r6, #255	; 0xff
   190a8:	469a      	mov	sl, r3
   190aa:	e797      	b.n	18fdc <__aeabi_fmul+0x30>
   190ac:	0028      	movs	r0, r5
   190ae:	f002 f953 	bl	1b358 <__clzsi2>
   190b2:	1f43      	subs	r3, r0, #5
   190b4:	409d      	lsls	r5, r3
   190b6:	2376      	movs	r3, #118	; 0x76
   190b8:	425b      	negs	r3, r3
   190ba:	1a18      	subs	r0, r3, r0
   190bc:	2200      	movs	r2, #0
   190be:	e79d      	b.n	18ffc <__aeabi_fmul+0x50>
   190c0:	2080      	movs	r0, #128	; 0x80
   190c2:	2400      	movs	r4, #0
   190c4:	03c0      	lsls	r0, r0, #15
   190c6:	22ff      	movs	r2, #255	; 0xff
   190c8:	e7ba      	b.n	19040 <__aeabi_fmul+0x94>
   190ca:	003d      	movs	r5, r7
   190cc:	4652      	mov	r2, sl
   190ce:	e7ab      	b.n	19028 <__aeabi_fmul+0x7c>
   190d0:	003d      	movs	r5, r7
   190d2:	0021      	movs	r1, r4
   190d4:	4652      	mov	r2, sl
   190d6:	e7a7      	b.n	19028 <__aeabi_fmul+0x7c>
   190d8:	0c3b      	lsrs	r3, r7, #16
   190da:	469c      	mov	ip, r3
   190dc:	042a      	lsls	r2, r5, #16
   190de:	0c12      	lsrs	r2, r2, #16
   190e0:	0c2b      	lsrs	r3, r5, #16
   190e2:	0014      	movs	r4, r2
   190e4:	4660      	mov	r0, ip
   190e6:	4665      	mov	r5, ip
   190e8:	043f      	lsls	r7, r7, #16
   190ea:	0c3f      	lsrs	r7, r7, #16
   190ec:	437c      	muls	r4, r7
   190ee:	4342      	muls	r2, r0
   190f0:	435d      	muls	r5, r3
   190f2:	437b      	muls	r3, r7
   190f4:	0c27      	lsrs	r7, r4, #16
   190f6:	189b      	adds	r3, r3, r2
   190f8:	18ff      	adds	r7, r7, r3
   190fa:	42ba      	cmp	r2, r7
   190fc:	d903      	bls.n	19106 <__aeabi_fmul+0x15a>
   190fe:	2380      	movs	r3, #128	; 0x80
   19100:	025b      	lsls	r3, r3, #9
   19102:	469c      	mov	ip, r3
   19104:	4465      	add	r5, ip
   19106:	0424      	lsls	r4, r4, #16
   19108:	043a      	lsls	r2, r7, #16
   1910a:	0c24      	lsrs	r4, r4, #16
   1910c:	1912      	adds	r2, r2, r4
   1910e:	0193      	lsls	r3, r2, #6
   19110:	1e5c      	subs	r4, r3, #1
   19112:	41a3      	sbcs	r3, r4
   19114:	0c3f      	lsrs	r7, r7, #16
   19116:	0e92      	lsrs	r2, r2, #26
   19118:	197d      	adds	r5, r7, r5
   1911a:	431a      	orrs	r2, r3
   1911c:	01ad      	lsls	r5, r5, #6
   1911e:	4315      	orrs	r5, r2
   19120:	012b      	lsls	r3, r5, #4
   19122:	d504      	bpl.n	1912e <__aeabi_fmul+0x182>
   19124:	2301      	movs	r3, #1
   19126:	465e      	mov	r6, fp
   19128:	086a      	lsrs	r2, r5, #1
   1912a:	401d      	ands	r5, r3
   1912c:	4315      	orrs	r5, r2
   1912e:	0032      	movs	r2, r6
   19130:	327f      	adds	r2, #127	; 0x7f
   19132:	2a00      	cmp	r2, #0
   19134:	dd25      	ble.n	19182 <__aeabi_fmul+0x1d6>
   19136:	076b      	lsls	r3, r5, #29
   19138:	d004      	beq.n	19144 <__aeabi_fmul+0x198>
   1913a:	230f      	movs	r3, #15
   1913c:	402b      	ands	r3, r5
   1913e:	2b04      	cmp	r3, #4
   19140:	d000      	beq.n	19144 <__aeabi_fmul+0x198>
   19142:	3504      	adds	r5, #4
   19144:	012b      	lsls	r3, r5, #4
   19146:	d503      	bpl.n	19150 <__aeabi_fmul+0x1a4>
   19148:	0032      	movs	r2, r6
   1914a:	4b27      	ldr	r3, [pc, #156]	; (191e8 <__aeabi_fmul+0x23c>)
   1914c:	3280      	adds	r2, #128	; 0x80
   1914e:	401d      	ands	r5, r3
   19150:	2afe      	cmp	r2, #254	; 0xfe
   19152:	dc94      	bgt.n	1907e <__aeabi_fmul+0xd2>
   19154:	2401      	movs	r4, #1
   19156:	01a8      	lsls	r0, r5, #6
   19158:	0a40      	lsrs	r0, r0, #9
   1915a:	b2d2      	uxtb	r2, r2
   1915c:	400c      	ands	r4, r1
   1915e:	e76f      	b.n	19040 <__aeabi_fmul+0x94>
   19160:	2080      	movs	r0, #128	; 0x80
   19162:	03c0      	lsls	r0, r0, #15
   19164:	4207      	tst	r7, r0
   19166:	d007      	beq.n	19178 <__aeabi_fmul+0x1cc>
   19168:	4205      	tst	r5, r0
   1916a:	d105      	bne.n	19178 <__aeabi_fmul+0x1cc>
   1916c:	4328      	orrs	r0, r5
   1916e:	0240      	lsls	r0, r0, #9
   19170:	0a40      	lsrs	r0, r0, #9
   19172:	4644      	mov	r4, r8
   19174:	22ff      	movs	r2, #255	; 0xff
   19176:	e763      	b.n	19040 <__aeabi_fmul+0x94>
   19178:	4338      	orrs	r0, r7
   1917a:	0240      	lsls	r0, r0, #9
   1917c:	0a40      	lsrs	r0, r0, #9
   1917e:	22ff      	movs	r2, #255	; 0xff
   19180:	e75e      	b.n	19040 <__aeabi_fmul+0x94>
   19182:	2401      	movs	r4, #1
   19184:	1aa3      	subs	r3, r4, r2
   19186:	2b1b      	cmp	r3, #27
   19188:	dd05      	ble.n	19196 <__aeabi_fmul+0x1ea>
   1918a:	400c      	ands	r4, r1
   1918c:	2200      	movs	r2, #0
   1918e:	2000      	movs	r0, #0
   19190:	e756      	b.n	19040 <__aeabi_fmul+0x94>
   19192:	465e      	mov	r6, fp
   19194:	e7cb      	b.n	1912e <__aeabi_fmul+0x182>
   19196:	002a      	movs	r2, r5
   19198:	2020      	movs	r0, #32
   1919a:	40da      	lsrs	r2, r3
   1919c:	1ac3      	subs	r3, r0, r3
   1919e:	409d      	lsls	r5, r3
   191a0:	002b      	movs	r3, r5
   191a2:	1e5d      	subs	r5, r3, #1
   191a4:	41ab      	sbcs	r3, r5
   191a6:	4313      	orrs	r3, r2
   191a8:	075a      	lsls	r2, r3, #29
   191aa:	d004      	beq.n	191b6 <__aeabi_fmul+0x20a>
   191ac:	220f      	movs	r2, #15
   191ae:	401a      	ands	r2, r3
   191b0:	2a04      	cmp	r2, #4
   191b2:	d000      	beq.n	191b6 <__aeabi_fmul+0x20a>
   191b4:	3304      	adds	r3, #4
   191b6:	015a      	lsls	r2, r3, #5
   191b8:	d504      	bpl.n	191c4 <__aeabi_fmul+0x218>
   191ba:	2401      	movs	r4, #1
   191bc:	2201      	movs	r2, #1
   191be:	400c      	ands	r4, r1
   191c0:	2000      	movs	r0, #0
   191c2:	e73d      	b.n	19040 <__aeabi_fmul+0x94>
   191c4:	2401      	movs	r4, #1
   191c6:	019b      	lsls	r3, r3, #6
   191c8:	0a58      	lsrs	r0, r3, #9
   191ca:	400c      	ands	r4, r1
   191cc:	2200      	movs	r2, #0
   191ce:	e737      	b.n	19040 <__aeabi_fmul+0x94>
   191d0:	2080      	movs	r0, #128	; 0x80
   191d2:	2401      	movs	r4, #1
   191d4:	03c0      	lsls	r0, r0, #15
   191d6:	4328      	orrs	r0, r5
   191d8:	0240      	lsls	r0, r0, #9
   191da:	0a40      	lsrs	r0, r0, #9
   191dc:	400c      	ands	r4, r1
   191de:	22ff      	movs	r2, #255	; 0xff
   191e0:	e72e      	b.n	19040 <__aeabi_fmul+0x94>
   191e2:	46c0      	nop			; (mov r8, r8)
   191e4:	0001be60 	.word	0x0001be60
   191e8:	f7ffffff 	.word	0xf7ffffff

000191ec <__aeabi_fsub>:
   191ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   191ee:	464f      	mov	r7, r9
   191f0:	46d6      	mov	lr, sl
   191f2:	4646      	mov	r6, r8
   191f4:	0044      	lsls	r4, r0, #1
   191f6:	b5c0      	push	{r6, r7, lr}
   191f8:	0fc2      	lsrs	r2, r0, #31
   191fa:	0247      	lsls	r7, r0, #9
   191fc:	0248      	lsls	r0, r1, #9
   191fe:	0a40      	lsrs	r0, r0, #9
   19200:	4684      	mov	ip, r0
   19202:	4666      	mov	r6, ip
   19204:	0a7b      	lsrs	r3, r7, #9
   19206:	0048      	lsls	r0, r1, #1
   19208:	0fc9      	lsrs	r1, r1, #31
   1920a:	469a      	mov	sl, r3
   1920c:	0e24      	lsrs	r4, r4, #24
   1920e:	0015      	movs	r5, r2
   19210:	00db      	lsls	r3, r3, #3
   19212:	0e00      	lsrs	r0, r0, #24
   19214:	4689      	mov	r9, r1
   19216:	00f6      	lsls	r6, r6, #3
   19218:	28ff      	cmp	r0, #255	; 0xff
   1921a:	d100      	bne.n	1921e <__aeabi_fsub+0x32>
   1921c:	e08f      	b.n	1933e <__aeabi_fsub+0x152>
   1921e:	2101      	movs	r1, #1
   19220:	464f      	mov	r7, r9
   19222:	404f      	eors	r7, r1
   19224:	0039      	movs	r1, r7
   19226:	4291      	cmp	r1, r2
   19228:	d066      	beq.n	192f8 <__aeabi_fsub+0x10c>
   1922a:	1a22      	subs	r2, r4, r0
   1922c:	2a00      	cmp	r2, #0
   1922e:	dc00      	bgt.n	19232 <__aeabi_fsub+0x46>
   19230:	e09d      	b.n	1936e <__aeabi_fsub+0x182>
   19232:	2800      	cmp	r0, #0
   19234:	d13d      	bne.n	192b2 <__aeabi_fsub+0xc6>
   19236:	2e00      	cmp	r6, #0
   19238:	d100      	bne.n	1923c <__aeabi_fsub+0x50>
   1923a:	e08b      	b.n	19354 <__aeabi_fsub+0x168>
   1923c:	1e51      	subs	r1, r2, #1
   1923e:	2900      	cmp	r1, #0
   19240:	d000      	beq.n	19244 <__aeabi_fsub+0x58>
   19242:	e0b5      	b.n	193b0 <__aeabi_fsub+0x1c4>
   19244:	2401      	movs	r4, #1
   19246:	1b9b      	subs	r3, r3, r6
   19248:	015a      	lsls	r2, r3, #5
   1924a:	d544      	bpl.n	192d6 <__aeabi_fsub+0xea>
   1924c:	019b      	lsls	r3, r3, #6
   1924e:	099f      	lsrs	r7, r3, #6
   19250:	0038      	movs	r0, r7
   19252:	f002 f881 	bl	1b358 <__clzsi2>
   19256:	3805      	subs	r0, #5
   19258:	4087      	lsls	r7, r0
   1925a:	4284      	cmp	r4, r0
   1925c:	dd00      	ble.n	19260 <__aeabi_fsub+0x74>
   1925e:	e096      	b.n	1938e <__aeabi_fsub+0x1a2>
   19260:	1b04      	subs	r4, r0, r4
   19262:	003a      	movs	r2, r7
   19264:	2020      	movs	r0, #32
   19266:	3401      	adds	r4, #1
   19268:	40e2      	lsrs	r2, r4
   1926a:	1b04      	subs	r4, r0, r4
   1926c:	40a7      	lsls	r7, r4
   1926e:	003b      	movs	r3, r7
   19270:	1e5f      	subs	r7, r3, #1
   19272:	41bb      	sbcs	r3, r7
   19274:	2400      	movs	r4, #0
   19276:	4313      	orrs	r3, r2
   19278:	075a      	lsls	r2, r3, #29
   1927a:	d004      	beq.n	19286 <__aeabi_fsub+0x9a>
   1927c:	220f      	movs	r2, #15
   1927e:	401a      	ands	r2, r3
   19280:	2a04      	cmp	r2, #4
   19282:	d000      	beq.n	19286 <__aeabi_fsub+0x9a>
   19284:	3304      	adds	r3, #4
   19286:	015a      	lsls	r2, r3, #5
   19288:	d527      	bpl.n	192da <__aeabi_fsub+0xee>
   1928a:	3401      	adds	r4, #1
   1928c:	2cff      	cmp	r4, #255	; 0xff
   1928e:	d100      	bne.n	19292 <__aeabi_fsub+0xa6>
   19290:	e079      	b.n	19386 <__aeabi_fsub+0x19a>
   19292:	2201      	movs	r2, #1
   19294:	019b      	lsls	r3, r3, #6
   19296:	0a5b      	lsrs	r3, r3, #9
   19298:	b2e4      	uxtb	r4, r4
   1929a:	402a      	ands	r2, r5
   1929c:	025b      	lsls	r3, r3, #9
   1929e:	05e4      	lsls	r4, r4, #23
   192a0:	0a58      	lsrs	r0, r3, #9
   192a2:	07d2      	lsls	r2, r2, #31
   192a4:	4320      	orrs	r0, r4
   192a6:	4310      	orrs	r0, r2
   192a8:	bc1c      	pop	{r2, r3, r4}
   192aa:	4690      	mov	r8, r2
   192ac:	4699      	mov	r9, r3
   192ae:	46a2      	mov	sl, r4
   192b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192b2:	2cff      	cmp	r4, #255	; 0xff
   192b4:	d0e0      	beq.n	19278 <__aeabi_fsub+0x8c>
   192b6:	2180      	movs	r1, #128	; 0x80
   192b8:	04c9      	lsls	r1, r1, #19
   192ba:	430e      	orrs	r6, r1
   192bc:	2a1b      	cmp	r2, #27
   192be:	dc7b      	bgt.n	193b8 <__aeabi_fsub+0x1cc>
   192c0:	0031      	movs	r1, r6
   192c2:	2020      	movs	r0, #32
   192c4:	40d1      	lsrs	r1, r2
   192c6:	1a82      	subs	r2, r0, r2
   192c8:	4096      	lsls	r6, r2
   192ca:	1e72      	subs	r2, r6, #1
   192cc:	4196      	sbcs	r6, r2
   192ce:	430e      	orrs	r6, r1
   192d0:	1b9b      	subs	r3, r3, r6
   192d2:	015a      	lsls	r2, r3, #5
   192d4:	d4ba      	bmi.n	1924c <__aeabi_fsub+0x60>
   192d6:	075a      	lsls	r2, r3, #29
   192d8:	d1d0      	bne.n	1927c <__aeabi_fsub+0x90>
   192da:	2201      	movs	r2, #1
   192dc:	08df      	lsrs	r7, r3, #3
   192de:	402a      	ands	r2, r5
   192e0:	2cff      	cmp	r4, #255	; 0xff
   192e2:	d133      	bne.n	1934c <__aeabi_fsub+0x160>
   192e4:	2f00      	cmp	r7, #0
   192e6:	d100      	bne.n	192ea <__aeabi_fsub+0xfe>
   192e8:	e0a8      	b.n	1943c <__aeabi_fsub+0x250>
   192ea:	2380      	movs	r3, #128	; 0x80
   192ec:	03db      	lsls	r3, r3, #15
   192ee:	433b      	orrs	r3, r7
   192f0:	025b      	lsls	r3, r3, #9
   192f2:	0a5b      	lsrs	r3, r3, #9
   192f4:	24ff      	movs	r4, #255	; 0xff
   192f6:	e7d1      	b.n	1929c <__aeabi_fsub+0xb0>
   192f8:	1a21      	subs	r1, r4, r0
   192fa:	2900      	cmp	r1, #0
   192fc:	dd4c      	ble.n	19398 <__aeabi_fsub+0x1ac>
   192fe:	2800      	cmp	r0, #0
   19300:	d02a      	beq.n	19358 <__aeabi_fsub+0x16c>
   19302:	2cff      	cmp	r4, #255	; 0xff
   19304:	d0b8      	beq.n	19278 <__aeabi_fsub+0x8c>
   19306:	2080      	movs	r0, #128	; 0x80
   19308:	04c0      	lsls	r0, r0, #19
   1930a:	4306      	orrs	r6, r0
   1930c:	291b      	cmp	r1, #27
   1930e:	dd00      	ble.n	19312 <__aeabi_fsub+0x126>
   19310:	e0af      	b.n	19472 <__aeabi_fsub+0x286>
   19312:	0030      	movs	r0, r6
   19314:	2720      	movs	r7, #32
   19316:	40c8      	lsrs	r0, r1
   19318:	1a79      	subs	r1, r7, r1
   1931a:	408e      	lsls	r6, r1
   1931c:	1e71      	subs	r1, r6, #1
   1931e:	418e      	sbcs	r6, r1
   19320:	4306      	orrs	r6, r0
   19322:	199b      	adds	r3, r3, r6
   19324:	0159      	lsls	r1, r3, #5
   19326:	d5d6      	bpl.n	192d6 <__aeabi_fsub+0xea>
   19328:	3401      	adds	r4, #1
   1932a:	2cff      	cmp	r4, #255	; 0xff
   1932c:	d100      	bne.n	19330 <__aeabi_fsub+0x144>
   1932e:	e085      	b.n	1943c <__aeabi_fsub+0x250>
   19330:	2201      	movs	r2, #1
   19332:	497a      	ldr	r1, [pc, #488]	; (1951c <__aeabi_fsub+0x330>)
   19334:	401a      	ands	r2, r3
   19336:	085b      	lsrs	r3, r3, #1
   19338:	400b      	ands	r3, r1
   1933a:	4313      	orrs	r3, r2
   1933c:	e79c      	b.n	19278 <__aeabi_fsub+0x8c>
   1933e:	2e00      	cmp	r6, #0
   19340:	d000      	beq.n	19344 <__aeabi_fsub+0x158>
   19342:	e770      	b.n	19226 <__aeabi_fsub+0x3a>
   19344:	e76b      	b.n	1921e <__aeabi_fsub+0x32>
   19346:	1e3b      	subs	r3, r7, #0
   19348:	d1c5      	bne.n	192d6 <__aeabi_fsub+0xea>
   1934a:	2200      	movs	r2, #0
   1934c:	027b      	lsls	r3, r7, #9
   1934e:	0a5b      	lsrs	r3, r3, #9
   19350:	b2e4      	uxtb	r4, r4
   19352:	e7a3      	b.n	1929c <__aeabi_fsub+0xb0>
   19354:	0014      	movs	r4, r2
   19356:	e78f      	b.n	19278 <__aeabi_fsub+0x8c>
   19358:	2e00      	cmp	r6, #0
   1935a:	d04d      	beq.n	193f8 <__aeabi_fsub+0x20c>
   1935c:	1e48      	subs	r0, r1, #1
   1935e:	2800      	cmp	r0, #0
   19360:	d157      	bne.n	19412 <__aeabi_fsub+0x226>
   19362:	199b      	adds	r3, r3, r6
   19364:	2401      	movs	r4, #1
   19366:	015a      	lsls	r2, r3, #5
   19368:	d5b5      	bpl.n	192d6 <__aeabi_fsub+0xea>
   1936a:	2402      	movs	r4, #2
   1936c:	e7e0      	b.n	19330 <__aeabi_fsub+0x144>
   1936e:	2a00      	cmp	r2, #0
   19370:	d125      	bne.n	193be <__aeabi_fsub+0x1d2>
   19372:	1c62      	adds	r2, r4, #1
   19374:	b2d2      	uxtb	r2, r2
   19376:	2a01      	cmp	r2, #1
   19378:	dd72      	ble.n	19460 <__aeabi_fsub+0x274>
   1937a:	1b9f      	subs	r7, r3, r6
   1937c:	017a      	lsls	r2, r7, #5
   1937e:	d535      	bpl.n	193ec <__aeabi_fsub+0x200>
   19380:	1af7      	subs	r7, r6, r3
   19382:	000d      	movs	r5, r1
   19384:	e764      	b.n	19250 <__aeabi_fsub+0x64>
   19386:	2201      	movs	r2, #1
   19388:	2300      	movs	r3, #0
   1938a:	402a      	ands	r2, r5
   1938c:	e786      	b.n	1929c <__aeabi_fsub+0xb0>
   1938e:	003b      	movs	r3, r7
   19390:	4a63      	ldr	r2, [pc, #396]	; (19520 <__aeabi_fsub+0x334>)
   19392:	1a24      	subs	r4, r4, r0
   19394:	4013      	ands	r3, r2
   19396:	e76f      	b.n	19278 <__aeabi_fsub+0x8c>
   19398:	2900      	cmp	r1, #0
   1939a:	d16c      	bne.n	19476 <__aeabi_fsub+0x28a>
   1939c:	1c61      	adds	r1, r4, #1
   1939e:	b2c8      	uxtb	r0, r1
   193a0:	2801      	cmp	r0, #1
   193a2:	dd4e      	ble.n	19442 <__aeabi_fsub+0x256>
   193a4:	29ff      	cmp	r1, #255	; 0xff
   193a6:	d049      	beq.n	1943c <__aeabi_fsub+0x250>
   193a8:	199b      	adds	r3, r3, r6
   193aa:	085b      	lsrs	r3, r3, #1
   193ac:	000c      	movs	r4, r1
   193ae:	e763      	b.n	19278 <__aeabi_fsub+0x8c>
   193b0:	2aff      	cmp	r2, #255	; 0xff
   193b2:	d041      	beq.n	19438 <__aeabi_fsub+0x24c>
   193b4:	000a      	movs	r2, r1
   193b6:	e781      	b.n	192bc <__aeabi_fsub+0xd0>
   193b8:	2601      	movs	r6, #1
   193ba:	1b9b      	subs	r3, r3, r6
   193bc:	e789      	b.n	192d2 <__aeabi_fsub+0xe6>
   193be:	2c00      	cmp	r4, #0
   193c0:	d01c      	beq.n	193fc <__aeabi_fsub+0x210>
   193c2:	28ff      	cmp	r0, #255	; 0xff
   193c4:	d021      	beq.n	1940a <__aeabi_fsub+0x21e>
   193c6:	2480      	movs	r4, #128	; 0x80
   193c8:	04e4      	lsls	r4, r4, #19
   193ca:	4252      	negs	r2, r2
   193cc:	4323      	orrs	r3, r4
   193ce:	2a1b      	cmp	r2, #27
   193d0:	dd00      	ble.n	193d4 <__aeabi_fsub+0x1e8>
   193d2:	e096      	b.n	19502 <__aeabi_fsub+0x316>
   193d4:	001c      	movs	r4, r3
   193d6:	2520      	movs	r5, #32
   193d8:	40d4      	lsrs	r4, r2
   193da:	1aaa      	subs	r2, r5, r2
   193dc:	4093      	lsls	r3, r2
   193de:	1e5a      	subs	r2, r3, #1
   193e0:	4193      	sbcs	r3, r2
   193e2:	4323      	orrs	r3, r4
   193e4:	1af3      	subs	r3, r6, r3
   193e6:	0004      	movs	r4, r0
   193e8:	000d      	movs	r5, r1
   193ea:	e72d      	b.n	19248 <__aeabi_fsub+0x5c>
   193ec:	2f00      	cmp	r7, #0
   193ee:	d000      	beq.n	193f2 <__aeabi_fsub+0x206>
   193f0:	e72e      	b.n	19250 <__aeabi_fsub+0x64>
   193f2:	2200      	movs	r2, #0
   193f4:	2400      	movs	r4, #0
   193f6:	e7a9      	b.n	1934c <__aeabi_fsub+0x160>
   193f8:	000c      	movs	r4, r1
   193fa:	e73d      	b.n	19278 <__aeabi_fsub+0x8c>
   193fc:	2b00      	cmp	r3, #0
   193fe:	d058      	beq.n	194b2 <__aeabi_fsub+0x2c6>
   19400:	43d2      	mvns	r2, r2
   19402:	2a00      	cmp	r2, #0
   19404:	d0ee      	beq.n	193e4 <__aeabi_fsub+0x1f8>
   19406:	28ff      	cmp	r0, #255	; 0xff
   19408:	d1e1      	bne.n	193ce <__aeabi_fsub+0x1e2>
   1940a:	0033      	movs	r3, r6
   1940c:	24ff      	movs	r4, #255	; 0xff
   1940e:	000d      	movs	r5, r1
   19410:	e732      	b.n	19278 <__aeabi_fsub+0x8c>
   19412:	29ff      	cmp	r1, #255	; 0xff
   19414:	d010      	beq.n	19438 <__aeabi_fsub+0x24c>
   19416:	0001      	movs	r1, r0
   19418:	e778      	b.n	1930c <__aeabi_fsub+0x120>
   1941a:	2b00      	cmp	r3, #0
   1941c:	d06e      	beq.n	194fc <__aeabi_fsub+0x310>
   1941e:	24ff      	movs	r4, #255	; 0xff
   19420:	2e00      	cmp	r6, #0
   19422:	d100      	bne.n	19426 <__aeabi_fsub+0x23a>
   19424:	e728      	b.n	19278 <__aeabi_fsub+0x8c>
   19426:	2280      	movs	r2, #128	; 0x80
   19428:	4651      	mov	r1, sl
   1942a:	03d2      	lsls	r2, r2, #15
   1942c:	4211      	tst	r1, r2
   1942e:	d003      	beq.n	19438 <__aeabi_fsub+0x24c>
   19430:	4661      	mov	r1, ip
   19432:	4211      	tst	r1, r2
   19434:	d100      	bne.n	19438 <__aeabi_fsub+0x24c>
   19436:	0033      	movs	r3, r6
   19438:	24ff      	movs	r4, #255	; 0xff
   1943a:	e71d      	b.n	19278 <__aeabi_fsub+0x8c>
   1943c:	24ff      	movs	r4, #255	; 0xff
   1943e:	2300      	movs	r3, #0
   19440:	e72c      	b.n	1929c <__aeabi_fsub+0xb0>
   19442:	2c00      	cmp	r4, #0
   19444:	d1e9      	bne.n	1941a <__aeabi_fsub+0x22e>
   19446:	2b00      	cmp	r3, #0
   19448:	d063      	beq.n	19512 <__aeabi_fsub+0x326>
   1944a:	2e00      	cmp	r6, #0
   1944c:	d100      	bne.n	19450 <__aeabi_fsub+0x264>
   1944e:	e713      	b.n	19278 <__aeabi_fsub+0x8c>
   19450:	199b      	adds	r3, r3, r6
   19452:	015a      	lsls	r2, r3, #5
   19454:	d400      	bmi.n	19458 <__aeabi_fsub+0x26c>
   19456:	e73e      	b.n	192d6 <__aeabi_fsub+0xea>
   19458:	4a31      	ldr	r2, [pc, #196]	; (19520 <__aeabi_fsub+0x334>)
   1945a:	000c      	movs	r4, r1
   1945c:	4013      	ands	r3, r2
   1945e:	e70b      	b.n	19278 <__aeabi_fsub+0x8c>
   19460:	2c00      	cmp	r4, #0
   19462:	d11e      	bne.n	194a2 <__aeabi_fsub+0x2b6>
   19464:	2b00      	cmp	r3, #0
   19466:	d12f      	bne.n	194c8 <__aeabi_fsub+0x2dc>
   19468:	2e00      	cmp	r6, #0
   1946a:	d04f      	beq.n	1950c <__aeabi_fsub+0x320>
   1946c:	0033      	movs	r3, r6
   1946e:	000d      	movs	r5, r1
   19470:	e702      	b.n	19278 <__aeabi_fsub+0x8c>
   19472:	2601      	movs	r6, #1
   19474:	e755      	b.n	19322 <__aeabi_fsub+0x136>
   19476:	2c00      	cmp	r4, #0
   19478:	d11f      	bne.n	194ba <__aeabi_fsub+0x2ce>
   1947a:	2b00      	cmp	r3, #0
   1947c:	d043      	beq.n	19506 <__aeabi_fsub+0x31a>
   1947e:	43c9      	mvns	r1, r1
   19480:	2900      	cmp	r1, #0
   19482:	d00b      	beq.n	1949c <__aeabi_fsub+0x2b0>
   19484:	28ff      	cmp	r0, #255	; 0xff
   19486:	d039      	beq.n	194fc <__aeabi_fsub+0x310>
   19488:	291b      	cmp	r1, #27
   1948a:	dc44      	bgt.n	19516 <__aeabi_fsub+0x32a>
   1948c:	001c      	movs	r4, r3
   1948e:	2720      	movs	r7, #32
   19490:	40cc      	lsrs	r4, r1
   19492:	1a79      	subs	r1, r7, r1
   19494:	408b      	lsls	r3, r1
   19496:	1e59      	subs	r1, r3, #1
   19498:	418b      	sbcs	r3, r1
   1949a:	4323      	orrs	r3, r4
   1949c:	199b      	adds	r3, r3, r6
   1949e:	0004      	movs	r4, r0
   194a0:	e740      	b.n	19324 <__aeabi_fsub+0x138>
   194a2:	2b00      	cmp	r3, #0
   194a4:	d11a      	bne.n	194dc <__aeabi_fsub+0x2f0>
   194a6:	2e00      	cmp	r6, #0
   194a8:	d124      	bne.n	194f4 <__aeabi_fsub+0x308>
   194aa:	2780      	movs	r7, #128	; 0x80
   194ac:	2200      	movs	r2, #0
   194ae:	03ff      	lsls	r7, r7, #15
   194b0:	e71b      	b.n	192ea <__aeabi_fsub+0xfe>
   194b2:	0033      	movs	r3, r6
   194b4:	0004      	movs	r4, r0
   194b6:	000d      	movs	r5, r1
   194b8:	e6de      	b.n	19278 <__aeabi_fsub+0x8c>
   194ba:	28ff      	cmp	r0, #255	; 0xff
   194bc:	d01e      	beq.n	194fc <__aeabi_fsub+0x310>
   194be:	2480      	movs	r4, #128	; 0x80
   194c0:	04e4      	lsls	r4, r4, #19
   194c2:	4249      	negs	r1, r1
   194c4:	4323      	orrs	r3, r4
   194c6:	e7df      	b.n	19488 <__aeabi_fsub+0x29c>
   194c8:	2e00      	cmp	r6, #0
   194ca:	d100      	bne.n	194ce <__aeabi_fsub+0x2e2>
   194cc:	e6d4      	b.n	19278 <__aeabi_fsub+0x8c>
   194ce:	1b9f      	subs	r7, r3, r6
   194d0:	017a      	lsls	r2, r7, #5
   194d2:	d400      	bmi.n	194d6 <__aeabi_fsub+0x2ea>
   194d4:	e737      	b.n	19346 <__aeabi_fsub+0x15a>
   194d6:	1af3      	subs	r3, r6, r3
   194d8:	000d      	movs	r5, r1
   194da:	e6cd      	b.n	19278 <__aeabi_fsub+0x8c>
   194dc:	24ff      	movs	r4, #255	; 0xff
   194de:	2e00      	cmp	r6, #0
   194e0:	d100      	bne.n	194e4 <__aeabi_fsub+0x2f8>
   194e2:	e6c9      	b.n	19278 <__aeabi_fsub+0x8c>
   194e4:	2280      	movs	r2, #128	; 0x80
   194e6:	4650      	mov	r0, sl
   194e8:	03d2      	lsls	r2, r2, #15
   194ea:	4210      	tst	r0, r2
   194ec:	d0a4      	beq.n	19438 <__aeabi_fsub+0x24c>
   194ee:	4660      	mov	r0, ip
   194f0:	4210      	tst	r0, r2
   194f2:	d1a1      	bne.n	19438 <__aeabi_fsub+0x24c>
   194f4:	0033      	movs	r3, r6
   194f6:	000d      	movs	r5, r1
   194f8:	24ff      	movs	r4, #255	; 0xff
   194fa:	e6bd      	b.n	19278 <__aeabi_fsub+0x8c>
   194fc:	0033      	movs	r3, r6
   194fe:	24ff      	movs	r4, #255	; 0xff
   19500:	e6ba      	b.n	19278 <__aeabi_fsub+0x8c>
   19502:	2301      	movs	r3, #1
   19504:	e76e      	b.n	193e4 <__aeabi_fsub+0x1f8>
   19506:	0033      	movs	r3, r6
   19508:	0004      	movs	r4, r0
   1950a:	e6b5      	b.n	19278 <__aeabi_fsub+0x8c>
   1950c:	2700      	movs	r7, #0
   1950e:	2200      	movs	r2, #0
   19510:	e71c      	b.n	1934c <__aeabi_fsub+0x160>
   19512:	0033      	movs	r3, r6
   19514:	e6b0      	b.n	19278 <__aeabi_fsub+0x8c>
   19516:	2301      	movs	r3, #1
   19518:	e7c0      	b.n	1949c <__aeabi_fsub+0x2b0>
   1951a:	46c0      	nop			; (mov r8, r8)
   1951c:	7dffffff 	.word	0x7dffffff
   19520:	fbffffff 	.word	0xfbffffff

00019524 <__aeabi_f2iz>:
   19524:	0241      	lsls	r1, r0, #9
   19526:	0043      	lsls	r3, r0, #1
   19528:	0fc2      	lsrs	r2, r0, #31
   1952a:	0a49      	lsrs	r1, r1, #9
   1952c:	0e1b      	lsrs	r3, r3, #24
   1952e:	2000      	movs	r0, #0
   19530:	2b7e      	cmp	r3, #126	; 0x7e
   19532:	dd0d      	ble.n	19550 <__aeabi_f2iz+0x2c>
   19534:	2b9d      	cmp	r3, #157	; 0x9d
   19536:	dc0c      	bgt.n	19552 <__aeabi_f2iz+0x2e>
   19538:	2080      	movs	r0, #128	; 0x80
   1953a:	0400      	lsls	r0, r0, #16
   1953c:	4301      	orrs	r1, r0
   1953e:	2b95      	cmp	r3, #149	; 0x95
   19540:	dc0a      	bgt.n	19558 <__aeabi_f2iz+0x34>
   19542:	2096      	movs	r0, #150	; 0x96
   19544:	1ac3      	subs	r3, r0, r3
   19546:	40d9      	lsrs	r1, r3
   19548:	4248      	negs	r0, r1
   1954a:	2a00      	cmp	r2, #0
   1954c:	d100      	bne.n	19550 <__aeabi_f2iz+0x2c>
   1954e:	0008      	movs	r0, r1
   19550:	4770      	bx	lr
   19552:	4b03      	ldr	r3, [pc, #12]	; (19560 <__aeabi_f2iz+0x3c>)
   19554:	18d0      	adds	r0, r2, r3
   19556:	e7fb      	b.n	19550 <__aeabi_f2iz+0x2c>
   19558:	3b96      	subs	r3, #150	; 0x96
   1955a:	4099      	lsls	r1, r3
   1955c:	e7f4      	b.n	19548 <__aeabi_f2iz+0x24>
   1955e:	46c0      	nop			; (mov r8, r8)
   19560:	7fffffff 	.word	0x7fffffff

00019564 <__aeabi_i2f>:
   19564:	b570      	push	{r4, r5, r6, lr}
   19566:	2800      	cmp	r0, #0
   19568:	d030      	beq.n	195cc <__aeabi_i2f+0x68>
   1956a:	17c3      	asrs	r3, r0, #31
   1956c:	18c4      	adds	r4, r0, r3
   1956e:	405c      	eors	r4, r3
   19570:	0fc5      	lsrs	r5, r0, #31
   19572:	0020      	movs	r0, r4
   19574:	f001 fef0 	bl	1b358 <__clzsi2>
   19578:	239e      	movs	r3, #158	; 0x9e
   1957a:	1a1b      	subs	r3, r3, r0
   1957c:	2b96      	cmp	r3, #150	; 0x96
   1957e:	dc0d      	bgt.n	1959c <__aeabi_i2f+0x38>
   19580:	2296      	movs	r2, #150	; 0x96
   19582:	1ad2      	subs	r2, r2, r3
   19584:	4094      	lsls	r4, r2
   19586:	002a      	movs	r2, r5
   19588:	0264      	lsls	r4, r4, #9
   1958a:	0a64      	lsrs	r4, r4, #9
   1958c:	b2db      	uxtb	r3, r3
   1958e:	0264      	lsls	r4, r4, #9
   19590:	05db      	lsls	r3, r3, #23
   19592:	0a60      	lsrs	r0, r4, #9
   19594:	07d2      	lsls	r2, r2, #31
   19596:	4318      	orrs	r0, r3
   19598:	4310      	orrs	r0, r2
   1959a:	bd70      	pop	{r4, r5, r6, pc}
   1959c:	2b99      	cmp	r3, #153	; 0x99
   1959e:	dc19      	bgt.n	195d4 <__aeabi_i2f+0x70>
   195a0:	2299      	movs	r2, #153	; 0x99
   195a2:	1ad2      	subs	r2, r2, r3
   195a4:	2a00      	cmp	r2, #0
   195a6:	dd29      	ble.n	195fc <__aeabi_i2f+0x98>
   195a8:	4094      	lsls	r4, r2
   195aa:	0022      	movs	r2, r4
   195ac:	4c14      	ldr	r4, [pc, #80]	; (19600 <__aeabi_i2f+0x9c>)
   195ae:	4014      	ands	r4, r2
   195b0:	0751      	lsls	r1, r2, #29
   195b2:	d004      	beq.n	195be <__aeabi_i2f+0x5a>
   195b4:	210f      	movs	r1, #15
   195b6:	400a      	ands	r2, r1
   195b8:	2a04      	cmp	r2, #4
   195ba:	d000      	beq.n	195be <__aeabi_i2f+0x5a>
   195bc:	3404      	adds	r4, #4
   195be:	0162      	lsls	r2, r4, #5
   195c0:	d413      	bmi.n	195ea <__aeabi_i2f+0x86>
   195c2:	01a4      	lsls	r4, r4, #6
   195c4:	0a64      	lsrs	r4, r4, #9
   195c6:	b2db      	uxtb	r3, r3
   195c8:	002a      	movs	r2, r5
   195ca:	e7e0      	b.n	1958e <__aeabi_i2f+0x2a>
   195cc:	2200      	movs	r2, #0
   195ce:	2300      	movs	r3, #0
   195d0:	2400      	movs	r4, #0
   195d2:	e7dc      	b.n	1958e <__aeabi_i2f+0x2a>
   195d4:	2205      	movs	r2, #5
   195d6:	0021      	movs	r1, r4
   195d8:	1a12      	subs	r2, r2, r0
   195da:	40d1      	lsrs	r1, r2
   195dc:	22b9      	movs	r2, #185	; 0xb9
   195de:	1ad2      	subs	r2, r2, r3
   195e0:	4094      	lsls	r4, r2
   195e2:	1e62      	subs	r2, r4, #1
   195e4:	4194      	sbcs	r4, r2
   195e6:	430c      	orrs	r4, r1
   195e8:	e7da      	b.n	195a0 <__aeabi_i2f+0x3c>
   195ea:	4b05      	ldr	r3, [pc, #20]	; (19600 <__aeabi_i2f+0x9c>)
   195ec:	002a      	movs	r2, r5
   195ee:	401c      	ands	r4, r3
   195f0:	239f      	movs	r3, #159	; 0x9f
   195f2:	01a4      	lsls	r4, r4, #6
   195f4:	1a1b      	subs	r3, r3, r0
   195f6:	0a64      	lsrs	r4, r4, #9
   195f8:	b2db      	uxtb	r3, r3
   195fa:	e7c8      	b.n	1958e <__aeabi_i2f+0x2a>
   195fc:	0022      	movs	r2, r4
   195fe:	e7d5      	b.n	195ac <__aeabi_i2f+0x48>
   19600:	fbffffff 	.word	0xfbffffff

00019604 <__aeabi_ui2f>:
   19604:	b510      	push	{r4, lr}
   19606:	1e04      	subs	r4, r0, #0
   19608:	d027      	beq.n	1965a <__aeabi_ui2f+0x56>
   1960a:	f001 fea5 	bl	1b358 <__clzsi2>
   1960e:	239e      	movs	r3, #158	; 0x9e
   19610:	1a1b      	subs	r3, r3, r0
   19612:	2b96      	cmp	r3, #150	; 0x96
   19614:	dc0a      	bgt.n	1962c <__aeabi_ui2f+0x28>
   19616:	2296      	movs	r2, #150	; 0x96
   19618:	1ad2      	subs	r2, r2, r3
   1961a:	4094      	lsls	r4, r2
   1961c:	0264      	lsls	r4, r4, #9
   1961e:	0a64      	lsrs	r4, r4, #9
   19620:	b2db      	uxtb	r3, r3
   19622:	0264      	lsls	r4, r4, #9
   19624:	05db      	lsls	r3, r3, #23
   19626:	0a60      	lsrs	r0, r4, #9
   19628:	4318      	orrs	r0, r3
   1962a:	bd10      	pop	{r4, pc}
   1962c:	2b99      	cmp	r3, #153	; 0x99
   1962e:	dc17      	bgt.n	19660 <__aeabi_ui2f+0x5c>
   19630:	2299      	movs	r2, #153	; 0x99
   19632:	1ad2      	subs	r2, r2, r3
   19634:	2a00      	cmp	r2, #0
   19636:	dd27      	ble.n	19688 <__aeabi_ui2f+0x84>
   19638:	4094      	lsls	r4, r2
   1963a:	0022      	movs	r2, r4
   1963c:	4c13      	ldr	r4, [pc, #76]	; (1968c <__aeabi_ui2f+0x88>)
   1963e:	4014      	ands	r4, r2
   19640:	0751      	lsls	r1, r2, #29
   19642:	d004      	beq.n	1964e <__aeabi_ui2f+0x4a>
   19644:	210f      	movs	r1, #15
   19646:	400a      	ands	r2, r1
   19648:	2a04      	cmp	r2, #4
   1964a:	d000      	beq.n	1964e <__aeabi_ui2f+0x4a>
   1964c:	3404      	adds	r4, #4
   1964e:	0162      	lsls	r2, r4, #5
   19650:	d412      	bmi.n	19678 <__aeabi_ui2f+0x74>
   19652:	01a4      	lsls	r4, r4, #6
   19654:	0a64      	lsrs	r4, r4, #9
   19656:	b2db      	uxtb	r3, r3
   19658:	e7e3      	b.n	19622 <__aeabi_ui2f+0x1e>
   1965a:	2300      	movs	r3, #0
   1965c:	2400      	movs	r4, #0
   1965e:	e7e0      	b.n	19622 <__aeabi_ui2f+0x1e>
   19660:	22b9      	movs	r2, #185	; 0xb9
   19662:	0021      	movs	r1, r4
   19664:	1ad2      	subs	r2, r2, r3
   19666:	4091      	lsls	r1, r2
   19668:	000a      	movs	r2, r1
   1966a:	1e51      	subs	r1, r2, #1
   1966c:	418a      	sbcs	r2, r1
   1966e:	2105      	movs	r1, #5
   19670:	1a09      	subs	r1, r1, r0
   19672:	40cc      	lsrs	r4, r1
   19674:	4314      	orrs	r4, r2
   19676:	e7db      	b.n	19630 <__aeabi_ui2f+0x2c>
   19678:	4b04      	ldr	r3, [pc, #16]	; (1968c <__aeabi_ui2f+0x88>)
   1967a:	401c      	ands	r4, r3
   1967c:	239f      	movs	r3, #159	; 0x9f
   1967e:	01a4      	lsls	r4, r4, #6
   19680:	1a1b      	subs	r3, r3, r0
   19682:	0a64      	lsrs	r4, r4, #9
   19684:	b2db      	uxtb	r3, r3
   19686:	e7cc      	b.n	19622 <__aeabi_ui2f+0x1e>
   19688:	0022      	movs	r2, r4
   1968a:	e7d7      	b.n	1963c <__aeabi_ui2f+0x38>
   1968c:	fbffffff 	.word	0xfbffffff

00019690 <__aeabi_dadd>:
   19690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19692:	4645      	mov	r5, r8
   19694:	46de      	mov	lr, fp
   19696:	4657      	mov	r7, sl
   19698:	464e      	mov	r6, r9
   1969a:	030c      	lsls	r4, r1, #12
   1969c:	b5e0      	push	{r5, r6, r7, lr}
   1969e:	004e      	lsls	r6, r1, #1
   196a0:	0fc9      	lsrs	r1, r1, #31
   196a2:	4688      	mov	r8, r1
   196a4:	000d      	movs	r5, r1
   196a6:	0a61      	lsrs	r1, r4, #9
   196a8:	0f44      	lsrs	r4, r0, #29
   196aa:	430c      	orrs	r4, r1
   196ac:	00c7      	lsls	r7, r0, #3
   196ae:	0319      	lsls	r1, r3, #12
   196b0:	0058      	lsls	r0, r3, #1
   196b2:	0fdb      	lsrs	r3, r3, #31
   196b4:	469b      	mov	fp, r3
   196b6:	0a4b      	lsrs	r3, r1, #9
   196b8:	0f51      	lsrs	r1, r2, #29
   196ba:	430b      	orrs	r3, r1
   196bc:	0d76      	lsrs	r6, r6, #21
   196be:	0d40      	lsrs	r0, r0, #21
   196c0:	0019      	movs	r1, r3
   196c2:	00d2      	lsls	r2, r2, #3
   196c4:	45d8      	cmp	r8, fp
   196c6:	d100      	bne.n	196ca <__aeabi_dadd+0x3a>
   196c8:	e0ae      	b.n	19828 <__aeabi_dadd+0x198>
   196ca:	1a35      	subs	r5, r6, r0
   196cc:	2d00      	cmp	r5, #0
   196ce:	dc00      	bgt.n	196d2 <__aeabi_dadd+0x42>
   196d0:	e0f6      	b.n	198c0 <__aeabi_dadd+0x230>
   196d2:	2800      	cmp	r0, #0
   196d4:	d10f      	bne.n	196f6 <__aeabi_dadd+0x66>
   196d6:	4313      	orrs	r3, r2
   196d8:	d100      	bne.n	196dc <__aeabi_dadd+0x4c>
   196da:	e0db      	b.n	19894 <__aeabi_dadd+0x204>
   196dc:	1e6b      	subs	r3, r5, #1
   196de:	2b00      	cmp	r3, #0
   196e0:	d000      	beq.n	196e4 <__aeabi_dadd+0x54>
   196e2:	e137      	b.n	19954 <__aeabi_dadd+0x2c4>
   196e4:	1aba      	subs	r2, r7, r2
   196e6:	4297      	cmp	r7, r2
   196e8:	41bf      	sbcs	r7, r7
   196ea:	1a64      	subs	r4, r4, r1
   196ec:	427f      	negs	r7, r7
   196ee:	1be4      	subs	r4, r4, r7
   196f0:	2601      	movs	r6, #1
   196f2:	0017      	movs	r7, r2
   196f4:	e024      	b.n	19740 <__aeabi_dadd+0xb0>
   196f6:	4bc6      	ldr	r3, [pc, #792]	; (19a10 <__aeabi_dadd+0x380>)
   196f8:	429e      	cmp	r6, r3
   196fa:	d04d      	beq.n	19798 <__aeabi_dadd+0x108>
   196fc:	2380      	movs	r3, #128	; 0x80
   196fe:	041b      	lsls	r3, r3, #16
   19700:	4319      	orrs	r1, r3
   19702:	2d38      	cmp	r5, #56	; 0x38
   19704:	dd00      	ble.n	19708 <__aeabi_dadd+0x78>
   19706:	e107      	b.n	19918 <__aeabi_dadd+0x288>
   19708:	2d1f      	cmp	r5, #31
   1970a:	dd00      	ble.n	1970e <__aeabi_dadd+0x7e>
   1970c:	e138      	b.n	19980 <__aeabi_dadd+0x2f0>
   1970e:	2020      	movs	r0, #32
   19710:	1b43      	subs	r3, r0, r5
   19712:	469a      	mov	sl, r3
   19714:	000b      	movs	r3, r1
   19716:	4650      	mov	r0, sl
   19718:	4083      	lsls	r3, r0
   1971a:	4699      	mov	r9, r3
   1971c:	0013      	movs	r3, r2
   1971e:	4648      	mov	r0, r9
   19720:	40eb      	lsrs	r3, r5
   19722:	4318      	orrs	r0, r3
   19724:	0003      	movs	r3, r0
   19726:	4650      	mov	r0, sl
   19728:	4082      	lsls	r2, r0
   1972a:	1e50      	subs	r0, r2, #1
   1972c:	4182      	sbcs	r2, r0
   1972e:	40e9      	lsrs	r1, r5
   19730:	431a      	orrs	r2, r3
   19732:	1aba      	subs	r2, r7, r2
   19734:	1a61      	subs	r1, r4, r1
   19736:	4297      	cmp	r7, r2
   19738:	41a4      	sbcs	r4, r4
   1973a:	0017      	movs	r7, r2
   1973c:	4264      	negs	r4, r4
   1973e:	1b0c      	subs	r4, r1, r4
   19740:	0223      	lsls	r3, r4, #8
   19742:	d562      	bpl.n	1980a <__aeabi_dadd+0x17a>
   19744:	0264      	lsls	r4, r4, #9
   19746:	0a65      	lsrs	r5, r4, #9
   19748:	2d00      	cmp	r5, #0
   1974a:	d100      	bne.n	1974e <__aeabi_dadd+0xbe>
   1974c:	e0df      	b.n	1990e <__aeabi_dadd+0x27e>
   1974e:	0028      	movs	r0, r5
   19750:	f001 fe02 	bl	1b358 <__clzsi2>
   19754:	0003      	movs	r3, r0
   19756:	3b08      	subs	r3, #8
   19758:	2b1f      	cmp	r3, #31
   1975a:	dd00      	ble.n	1975e <__aeabi_dadd+0xce>
   1975c:	e0d2      	b.n	19904 <__aeabi_dadd+0x274>
   1975e:	2220      	movs	r2, #32
   19760:	003c      	movs	r4, r7
   19762:	1ad2      	subs	r2, r2, r3
   19764:	409d      	lsls	r5, r3
   19766:	40d4      	lsrs	r4, r2
   19768:	409f      	lsls	r7, r3
   1976a:	4325      	orrs	r5, r4
   1976c:	429e      	cmp	r6, r3
   1976e:	dd00      	ble.n	19772 <__aeabi_dadd+0xe2>
   19770:	e0c4      	b.n	198fc <__aeabi_dadd+0x26c>
   19772:	1b9e      	subs	r6, r3, r6
   19774:	1c73      	adds	r3, r6, #1
   19776:	2b1f      	cmp	r3, #31
   19778:	dd00      	ble.n	1977c <__aeabi_dadd+0xec>
   1977a:	e0f1      	b.n	19960 <__aeabi_dadd+0x2d0>
   1977c:	2220      	movs	r2, #32
   1977e:	0038      	movs	r0, r7
   19780:	0029      	movs	r1, r5
   19782:	1ad2      	subs	r2, r2, r3
   19784:	40d8      	lsrs	r0, r3
   19786:	4091      	lsls	r1, r2
   19788:	4097      	lsls	r7, r2
   1978a:	002c      	movs	r4, r5
   1978c:	4301      	orrs	r1, r0
   1978e:	1e78      	subs	r0, r7, #1
   19790:	4187      	sbcs	r7, r0
   19792:	40dc      	lsrs	r4, r3
   19794:	2600      	movs	r6, #0
   19796:	430f      	orrs	r7, r1
   19798:	077b      	lsls	r3, r7, #29
   1979a:	d009      	beq.n	197b0 <__aeabi_dadd+0x120>
   1979c:	230f      	movs	r3, #15
   1979e:	403b      	ands	r3, r7
   197a0:	2b04      	cmp	r3, #4
   197a2:	d005      	beq.n	197b0 <__aeabi_dadd+0x120>
   197a4:	1d3b      	adds	r3, r7, #4
   197a6:	42bb      	cmp	r3, r7
   197a8:	41bf      	sbcs	r7, r7
   197aa:	427f      	negs	r7, r7
   197ac:	19e4      	adds	r4, r4, r7
   197ae:	001f      	movs	r7, r3
   197b0:	0223      	lsls	r3, r4, #8
   197b2:	d52c      	bpl.n	1980e <__aeabi_dadd+0x17e>
   197b4:	4b96      	ldr	r3, [pc, #600]	; (19a10 <__aeabi_dadd+0x380>)
   197b6:	3601      	adds	r6, #1
   197b8:	429e      	cmp	r6, r3
   197ba:	d100      	bne.n	197be <__aeabi_dadd+0x12e>
   197bc:	e09a      	b.n	198f4 <__aeabi_dadd+0x264>
   197be:	4645      	mov	r5, r8
   197c0:	4b94      	ldr	r3, [pc, #592]	; (19a14 <__aeabi_dadd+0x384>)
   197c2:	08ff      	lsrs	r7, r7, #3
   197c4:	401c      	ands	r4, r3
   197c6:	0760      	lsls	r0, r4, #29
   197c8:	0576      	lsls	r6, r6, #21
   197ca:	0264      	lsls	r4, r4, #9
   197cc:	4307      	orrs	r7, r0
   197ce:	0b24      	lsrs	r4, r4, #12
   197d0:	0d76      	lsrs	r6, r6, #21
   197d2:	2100      	movs	r1, #0
   197d4:	0324      	lsls	r4, r4, #12
   197d6:	0b23      	lsrs	r3, r4, #12
   197d8:	0d0c      	lsrs	r4, r1, #20
   197da:	4a8f      	ldr	r2, [pc, #572]	; (19a18 <__aeabi_dadd+0x388>)
   197dc:	0524      	lsls	r4, r4, #20
   197de:	431c      	orrs	r4, r3
   197e0:	4014      	ands	r4, r2
   197e2:	0533      	lsls	r3, r6, #20
   197e4:	4323      	orrs	r3, r4
   197e6:	005b      	lsls	r3, r3, #1
   197e8:	07ed      	lsls	r5, r5, #31
   197ea:	085b      	lsrs	r3, r3, #1
   197ec:	432b      	orrs	r3, r5
   197ee:	0038      	movs	r0, r7
   197f0:	0019      	movs	r1, r3
   197f2:	bc3c      	pop	{r2, r3, r4, r5}
   197f4:	4690      	mov	r8, r2
   197f6:	4699      	mov	r9, r3
   197f8:	46a2      	mov	sl, r4
   197fa:	46ab      	mov	fp, r5
   197fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197fe:	4664      	mov	r4, ip
   19800:	4304      	orrs	r4, r0
   19802:	d100      	bne.n	19806 <__aeabi_dadd+0x176>
   19804:	e211      	b.n	19c2a <__aeabi_dadd+0x59a>
   19806:	0004      	movs	r4, r0
   19808:	4667      	mov	r7, ip
   1980a:	077b      	lsls	r3, r7, #29
   1980c:	d1c6      	bne.n	1979c <__aeabi_dadd+0x10c>
   1980e:	4645      	mov	r5, r8
   19810:	0760      	lsls	r0, r4, #29
   19812:	08ff      	lsrs	r7, r7, #3
   19814:	4307      	orrs	r7, r0
   19816:	08e4      	lsrs	r4, r4, #3
   19818:	4b7d      	ldr	r3, [pc, #500]	; (19a10 <__aeabi_dadd+0x380>)
   1981a:	429e      	cmp	r6, r3
   1981c:	d030      	beq.n	19880 <__aeabi_dadd+0x1f0>
   1981e:	0324      	lsls	r4, r4, #12
   19820:	0576      	lsls	r6, r6, #21
   19822:	0b24      	lsrs	r4, r4, #12
   19824:	0d76      	lsrs	r6, r6, #21
   19826:	e7d4      	b.n	197d2 <__aeabi_dadd+0x142>
   19828:	1a33      	subs	r3, r6, r0
   1982a:	469a      	mov	sl, r3
   1982c:	2b00      	cmp	r3, #0
   1982e:	dd78      	ble.n	19922 <__aeabi_dadd+0x292>
   19830:	2800      	cmp	r0, #0
   19832:	d031      	beq.n	19898 <__aeabi_dadd+0x208>
   19834:	4876      	ldr	r0, [pc, #472]	; (19a10 <__aeabi_dadd+0x380>)
   19836:	4286      	cmp	r6, r0
   19838:	d0ae      	beq.n	19798 <__aeabi_dadd+0x108>
   1983a:	2080      	movs	r0, #128	; 0x80
   1983c:	0400      	lsls	r0, r0, #16
   1983e:	4301      	orrs	r1, r0
   19840:	4653      	mov	r3, sl
   19842:	2b38      	cmp	r3, #56	; 0x38
   19844:	dc00      	bgt.n	19848 <__aeabi_dadd+0x1b8>
   19846:	e0e9      	b.n	19a1c <__aeabi_dadd+0x38c>
   19848:	430a      	orrs	r2, r1
   1984a:	1e51      	subs	r1, r2, #1
   1984c:	418a      	sbcs	r2, r1
   1984e:	2100      	movs	r1, #0
   19850:	19d2      	adds	r2, r2, r7
   19852:	42ba      	cmp	r2, r7
   19854:	41bf      	sbcs	r7, r7
   19856:	1909      	adds	r1, r1, r4
   19858:	427c      	negs	r4, r7
   1985a:	0017      	movs	r7, r2
   1985c:	190c      	adds	r4, r1, r4
   1985e:	0223      	lsls	r3, r4, #8
   19860:	d5d3      	bpl.n	1980a <__aeabi_dadd+0x17a>
   19862:	4b6b      	ldr	r3, [pc, #428]	; (19a10 <__aeabi_dadd+0x380>)
   19864:	3601      	adds	r6, #1
   19866:	429e      	cmp	r6, r3
   19868:	d100      	bne.n	1986c <__aeabi_dadd+0x1dc>
   1986a:	e13a      	b.n	19ae2 <__aeabi_dadd+0x452>
   1986c:	2001      	movs	r0, #1
   1986e:	4b69      	ldr	r3, [pc, #420]	; (19a14 <__aeabi_dadd+0x384>)
   19870:	401c      	ands	r4, r3
   19872:	087b      	lsrs	r3, r7, #1
   19874:	4007      	ands	r7, r0
   19876:	431f      	orrs	r7, r3
   19878:	07e0      	lsls	r0, r4, #31
   1987a:	4307      	orrs	r7, r0
   1987c:	0864      	lsrs	r4, r4, #1
   1987e:	e78b      	b.n	19798 <__aeabi_dadd+0x108>
   19880:	0023      	movs	r3, r4
   19882:	433b      	orrs	r3, r7
   19884:	d100      	bne.n	19888 <__aeabi_dadd+0x1f8>
   19886:	e1cb      	b.n	19c20 <__aeabi_dadd+0x590>
   19888:	2280      	movs	r2, #128	; 0x80
   1988a:	0312      	lsls	r2, r2, #12
   1988c:	4314      	orrs	r4, r2
   1988e:	0324      	lsls	r4, r4, #12
   19890:	0b24      	lsrs	r4, r4, #12
   19892:	e79e      	b.n	197d2 <__aeabi_dadd+0x142>
   19894:	002e      	movs	r6, r5
   19896:	e77f      	b.n	19798 <__aeabi_dadd+0x108>
   19898:	0008      	movs	r0, r1
   1989a:	4310      	orrs	r0, r2
   1989c:	d100      	bne.n	198a0 <__aeabi_dadd+0x210>
   1989e:	e0b4      	b.n	19a0a <__aeabi_dadd+0x37a>
   198a0:	1e58      	subs	r0, r3, #1
   198a2:	2800      	cmp	r0, #0
   198a4:	d000      	beq.n	198a8 <__aeabi_dadd+0x218>
   198a6:	e0de      	b.n	19a66 <__aeabi_dadd+0x3d6>
   198a8:	18ba      	adds	r2, r7, r2
   198aa:	42ba      	cmp	r2, r7
   198ac:	419b      	sbcs	r3, r3
   198ae:	1864      	adds	r4, r4, r1
   198b0:	425b      	negs	r3, r3
   198b2:	18e4      	adds	r4, r4, r3
   198b4:	0017      	movs	r7, r2
   198b6:	2601      	movs	r6, #1
   198b8:	0223      	lsls	r3, r4, #8
   198ba:	d5a6      	bpl.n	1980a <__aeabi_dadd+0x17a>
   198bc:	2602      	movs	r6, #2
   198be:	e7d5      	b.n	1986c <__aeabi_dadd+0x1dc>
   198c0:	2d00      	cmp	r5, #0
   198c2:	d16e      	bne.n	199a2 <__aeabi_dadd+0x312>
   198c4:	1c70      	adds	r0, r6, #1
   198c6:	0540      	lsls	r0, r0, #21
   198c8:	0d40      	lsrs	r0, r0, #21
   198ca:	2801      	cmp	r0, #1
   198cc:	dc00      	bgt.n	198d0 <__aeabi_dadd+0x240>
   198ce:	e0f9      	b.n	19ac4 <__aeabi_dadd+0x434>
   198d0:	1ab8      	subs	r0, r7, r2
   198d2:	4684      	mov	ip, r0
   198d4:	4287      	cmp	r7, r0
   198d6:	4180      	sbcs	r0, r0
   198d8:	1ae5      	subs	r5, r4, r3
   198da:	4240      	negs	r0, r0
   198dc:	1a2d      	subs	r5, r5, r0
   198de:	0228      	lsls	r0, r5, #8
   198e0:	d400      	bmi.n	198e4 <__aeabi_dadd+0x254>
   198e2:	e089      	b.n	199f8 <__aeabi_dadd+0x368>
   198e4:	1bd7      	subs	r7, r2, r7
   198e6:	42ba      	cmp	r2, r7
   198e8:	4192      	sbcs	r2, r2
   198ea:	1b1c      	subs	r4, r3, r4
   198ec:	4252      	negs	r2, r2
   198ee:	1aa5      	subs	r5, r4, r2
   198f0:	46d8      	mov	r8, fp
   198f2:	e729      	b.n	19748 <__aeabi_dadd+0xb8>
   198f4:	4645      	mov	r5, r8
   198f6:	2400      	movs	r4, #0
   198f8:	2700      	movs	r7, #0
   198fa:	e76a      	b.n	197d2 <__aeabi_dadd+0x142>
   198fc:	4c45      	ldr	r4, [pc, #276]	; (19a14 <__aeabi_dadd+0x384>)
   198fe:	1af6      	subs	r6, r6, r3
   19900:	402c      	ands	r4, r5
   19902:	e749      	b.n	19798 <__aeabi_dadd+0x108>
   19904:	003d      	movs	r5, r7
   19906:	3828      	subs	r0, #40	; 0x28
   19908:	4085      	lsls	r5, r0
   1990a:	2700      	movs	r7, #0
   1990c:	e72e      	b.n	1976c <__aeabi_dadd+0xdc>
   1990e:	0038      	movs	r0, r7
   19910:	f001 fd22 	bl	1b358 <__clzsi2>
   19914:	3020      	adds	r0, #32
   19916:	e71d      	b.n	19754 <__aeabi_dadd+0xc4>
   19918:	430a      	orrs	r2, r1
   1991a:	1e51      	subs	r1, r2, #1
   1991c:	418a      	sbcs	r2, r1
   1991e:	2100      	movs	r1, #0
   19920:	e707      	b.n	19732 <__aeabi_dadd+0xa2>
   19922:	2b00      	cmp	r3, #0
   19924:	d000      	beq.n	19928 <__aeabi_dadd+0x298>
   19926:	e0f3      	b.n	19b10 <__aeabi_dadd+0x480>
   19928:	1c70      	adds	r0, r6, #1
   1992a:	0543      	lsls	r3, r0, #21
   1992c:	0d5b      	lsrs	r3, r3, #21
   1992e:	2b01      	cmp	r3, #1
   19930:	dc00      	bgt.n	19934 <__aeabi_dadd+0x2a4>
   19932:	e0ad      	b.n	19a90 <__aeabi_dadd+0x400>
   19934:	4b36      	ldr	r3, [pc, #216]	; (19a10 <__aeabi_dadd+0x380>)
   19936:	4298      	cmp	r0, r3
   19938:	d100      	bne.n	1993c <__aeabi_dadd+0x2ac>
   1993a:	e0d1      	b.n	19ae0 <__aeabi_dadd+0x450>
   1993c:	18ba      	adds	r2, r7, r2
   1993e:	42ba      	cmp	r2, r7
   19940:	41bf      	sbcs	r7, r7
   19942:	1864      	adds	r4, r4, r1
   19944:	427f      	negs	r7, r7
   19946:	19e4      	adds	r4, r4, r7
   19948:	07e7      	lsls	r7, r4, #31
   1994a:	0852      	lsrs	r2, r2, #1
   1994c:	4317      	orrs	r7, r2
   1994e:	0864      	lsrs	r4, r4, #1
   19950:	0006      	movs	r6, r0
   19952:	e721      	b.n	19798 <__aeabi_dadd+0x108>
   19954:	482e      	ldr	r0, [pc, #184]	; (19a10 <__aeabi_dadd+0x380>)
   19956:	4285      	cmp	r5, r0
   19958:	d100      	bne.n	1995c <__aeabi_dadd+0x2cc>
   1995a:	e093      	b.n	19a84 <__aeabi_dadd+0x3f4>
   1995c:	001d      	movs	r5, r3
   1995e:	e6d0      	b.n	19702 <__aeabi_dadd+0x72>
   19960:	0029      	movs	r1, r5
   19962:	3e1f      	subs	r6, #31
   19964:	40f1      	lsrs	r1, r6
   19966:	2b20      	cmp	r3, #32
   19968:	d100      	bne.n	1996c <__aeabi_dadd+0x2dc>
   1996a:	e08d      	b.n	19a88 <__aeabi_dadd+0x3f8>
   1996c:	2240      	movs	r2, #64	; 0x40
   1996e:	1ad3      	subs	r3, r2, r3
   19970:	409d      	lsls	r5, r3
   19972:	432f      	orrs	r7, r5
   19974:	1e7d      	subs	r5, r7, #1
   19976:	41af      	sbcs	r7, r5
   19978:	2400      	movs	r4, #0
   1997a:	430f      	orrs	r7, r1
   1997c:	2600      	movs	r6, #0
   1997e:	e744      	b.n	1980a <__aeabi_dadd+0x17a>
   19980:	002b      	movs	r3, r5
   19982:	0008      	movs	r0, r1
   19984:	3b20      	subs	r3, #32
   19986:	40d8      	lsrs	r0, r3
   19988:	0003      	movs	r3, r0
   1998a:	2d20      	cmp	r5, #32
   1998c:	d100      	bne.n	19990 <__aeabi_dadd+0x300>
   1998e:	e07d      	b.n	19a8c <__aeabi_dadd+0x3fc>
   19990:	2040      	movs	r0, #64	; 0x40
   19992:	1b45      	subs	r5, r0, r5
   19994:	40a9      	lsls	r1, r5
   19996:	430a      	orrs	r2, r1
   19998:	1e51      	subs	r1, r2, #1
   1999a:	418a      	sbcs	r2, r1
   1999c:	2100      	movs	r1, #0
   1999e:	431a      	orrs	r2, r3
   199a0:	e6c7      	b.n	19732 <__aeabi_dadd+0xa2>
   199a2:	2e00      	cmp	r6, #0
   199a4:	d050      	beq.n	19a48 <__aeabi_dadd+0x3b8>
   199a6:	4e1a      	ldr	r6, [pc, #104]	; (19a10 <__aeabi_dadd+0x380>)
   199a8:	42b0      	cmp	r0, r6
   199aa:	d057      	beq.n	19a5c <__aeabi_dadd+0x3cc>
   199ac:	2680      	movs	r6, #128	; 0x80
   199ae:	426b      	negs	r3, r5
   199b0:	4699      	mov	r9, r3
   199b2:	0436      	lsls	r6, r6, #16
   199b4:	4334      	orrs	r4, r6
   199b6:	464b      	mov	r3, r9
   199b8:	2b38      	cmp	r3, #56	; 0x38
   199ba:	dd00      	ble.n	199be <__aeabi_dadd+0x32e>
   199bc:	e0d6      	b.n	19b6c <__aeabi_dadd+0x4dc>
   199be:	2b1f      	cmp	r3, #31
   199c0:	dd00      	ble.n	199c4 <__aeabi_dadd+0x334>
   199c2:	e135      	b.n	19c30 <__aeabi_dadd+0x5a0>
   199c4:	2620      	movs	r6, #32
   199c6:	1af5      	subs	r5, r6, r3
   199c8:	0026      	movs	r6, r4
   199ca:	40ae      	lsls	r6, r5
   199cc:	46b2      	mov	sl, r6
   199ce:	003e      	movs	r6, r7
   199d0:	40de      	lsrs	r6, r3
   199d2:	46ac      	mov	ip, r5
   199d4:	0035      	movs	r5, r6
   199d6:	4656      	mov	r6, sl
   199d8:	432e      	orrs	r6, r5
   199da:	4665      	mov	r5, ip
   199dc:	40af      	lsls	r7, r5
   199de:	1e7d      	subs	r5, r7, #1
   199e0:	41af      	sbcs	r7, r5
   199e2:	40dc      	lsrs	r4, r3
   199e4:	4337      	orrs	r7, r6
   199e6:	1bd7      	subs	r7, r2, r7
   199e8:	42ba      	cmp	r2, r7
   199ea:	4192      	sbcs	r2, r2
   199ec:	1b0c      	subs	r4, r1, r4
   199ee:	4252      	negs	r2, r2
   199f0:	1aa4      	subs	r4, r4, r2
   199f2:	0006      	movs	r6, r0
   199f4:	46d8      	mov	r8, fp
   199f6:	e6a3      	b.n	19740 <__aeabi_dadd+0xb0>
   199f8:	4664      	mov	r4, ip
   199fa:	4667      	mov	r7, ip
   199fc:	432c      	orrs	r4, r5
   199fe:	d000      	beq.n	19a02 <__aeabi_dadd+0x372>
   19a00:	e6a2      	b.n	19748 <__aeabi_dadd+0xb8>
   19a02:	2500      	movs	r5, #0
   19a04:	2600      	movs	r6, #0
   19a06:	2700      	movs	r7, #0
   19a08:	e706      	b.n	19818 <__aeabi_dadd+0x188>
   19a0a:	001e      	movs	r6, r3
   19a0c:	e6c4      	b.n	19798 <__aeabi_dadd+0x108>
   19a0e:	46c0      	nop			; (mov r8, r8)
   19a10:	000007ff 	.word	0x000007ff
   19a14:	ff7fffff 	.word	0xff7fffff
   19a18:	800fffff 	.word	0x800fffff
   19a1c:	2b1f      	cmp	r3, #31
   19a1e:	dc63      	bgt.n	19ae8 <__aeabi_dadd+0x458>
   19a20:	2020      	movs	r0, #32
   19a22:	1ac3      	subs	r3, r0, r3
   19a24:	0008      	movs	r0, r1
   19a26:	4098      	lsls	r0, r3
   19a28:	469c      	mov	ip, r3
   19a2a:	4683      	mov	fp, r0
   19a2c:	4653      	mov	r3, sl
   19a2e:	0010      	movs	r0, r2
   19a30:	40d8      	lsrs	r0, r3
   19a32:	0003      	movs	r3, r0
   19a34:	4658      	mov	r0, fp
   19a36:	4318      	orrs	r0, r3
   19a38:	4663      	mov	r3, ip
   19a3a:	409a      	lsls	r2, r3
   19a3c:	1e53      	subs	r3, r2, #1
   19a3e:	419a      	sbcs	r2, r3
   19a40:	4653      	mov	r3, sl
   19a42:	4302      	orrs	r2, r0
   19a44:	40d9      	lsrs	r1, r3
   19a46:	e703      	b.n	19850 <__aeabi_dadd+0x1c0>
   19a48:	0026      	movs	r6, r4
   19a4a:	433e      	orrs	r6, r7
   19a4c:	d006      	beq.n	19a5c <__aeabi_dadd+0x3cc>
   19a4e:	43eb      	mvns	r3, r5
   19a50:	4699      	mov	r9, r3
   19a52:	2b00      	cmp	r3, #0
   19a54:	d0c7      	beq.n	199e6 <__aeabi_dadd+0x356>
   19a56:	4e94      	ldr	r6, [pc, #592]	; (19ca8 <__aeabi_dadd+0x618>)
   19a58:	42b0      	cmp	r0, r6
   19a5a:	d1ac      	bne.n	199b6 <__aeabi_dadd+0x326>
   19a5c:	000c      	movs	r4, r1
   19a5e:	0017      	movs	r7, r2
   19a60:	0006      	movs	r6, r0
   19a62:	46d8      	mov	r8, fp
   19a64:	e698      	b.n	19798 <__aeabi_dadd+0x108>
   19a66:	4b90      	ldr	r3, [pc, #576]	; (19ca8 <__aeabi_dadd+0x618>)
   19a68:	459a      	cmp	sl, r3
   19a6a:	d00b      	beq.n	19a84 <__aeabi_dadd+0x3f4>
   19a6c:	4682      	mov	sl, r0
   19a6e:	e6e7      	b.n	19840 <__aeabi_dadd+0x1b0>
   19a70:	2800      	cmp	r0, #0
   19a72:	d000      	beq.n	19a76 <__aeabi_dadd+0x3e6>
   19a74:	e09e      	b.n	19bb4 <__aeabi_dadd+0x524>
   19a76:	0018      	movs	r0, r3
   19a78:	4310      	orrs	r0, r2
   19a7a:	d100      	bne.n	19a7e <__aeabi_dadd+0x3ee>
   19a7c:	e0e9      	b.n	19c52 <__aeabi_dadd+0x5c2>
   19a7e:	001c      	movs	r4, r3
   19a80:	0017      	movs	r7, r2
   19a82:	46d8      	mov	r8, fp
   19a84:	4e88      	ldr	r6, [pc, #544]	; (19ca8 <__aeabi_dadd+0x618>)
   19a86:	e687      	b.n	19798 <__aeabi_dadd+0x108>
   19a88:	2500      	movs	r5, #0
   19a8a:	e772      	b.n	19972 <__aeabi_dadd+0x2e2>
   19a8c:	2100      	movs	r1, #0
   19a8e:	e782      	b.n	19996 <__aeabi_dadd+0x306>
   19a90:	0023      	movs	r3, r4
   19a92:	433b      	orrs	r3, r7
   19a94:	2e00      	cmp	r6, #0
   19a96:	d000      	beq.n	19a9a <__aeabi_dadd+0x40a>
   19a98:	e0ab      	b.n	19bf2 <__aeabi_dadd+0x562>
   19a9a:	2b00      	cmp	r3, #0
   19a9c:	d100      	bne.n	19aa0 <__aeabi_dadd+0x410>
   19a9e:	e0e7      	b.n	19c70 <__aeabi_dadd+0x5e0>
   19aa0:	000b      	movs	r3, r1
   19aa2:	4313      	orrs	r3, r2
   19aa4:	d100      	bne.n	19aa8 <__aeabi_dadd+0x418>
   19aa6:	e677      	b.n	19798 <__aeabi_dadd+0x108>
   19aa8:	18ba      	adds	r2, r7, r2
   19aaa:	42ba      	cmp	r2, r7
   19aac:	41bf      	sbcs	r7, r7
   19aae:	1864      	adds	r4, r4, r1
   19ab0:	427f      	negs	r7, r7
   19ab2:	19e4      	adds	r4, r4, r7
   19ab4:	0223      	lsls	r3, r4, #8
   19ab6:	d400      	bmi.n	19aba <__aeabi_dadd+0x42a>
   19ab8:	e0f2      	b.n	19ca0 <__aeabi_dadd+0x610>
   19aba:	4b7c      	ldr	r3, [pc, #496]	; (19cac <__aeabi_dadd+0x61c>)
   19abc:	0017      	movs	r7, r2
   19abe:	401c      	ands	r4, r3
   19ac0:	0006      	movs	r6, r0
   19ac2:	e669      	b.n	19798 <__aeabi_dadd+0x108>
   19ac4:	0020      	movs	r0, r4
   19ac6:	4338      	orrs	r0, r7
   19ac8:	2e00      	cmp	r6, #0
   19aca:	d1d1      	bne.n	19a70 <__aeabi_dadd+0x3e0>
   19acc:	2800      	cmp	r0, #0
   19ace:	d15b      	bne.n	19b88 <__aeabi_dadd+0x4f8>
   19ad0:	001c      	movs	r4, r3
   19ad2:	4314      	orrs	r4, r2
   19ad4:	d100      	bne.n	19ad8 <__aeabi_dadd+0x448>
   19ad6:	e0a8      	b.n	19c2a <__aeabi_dadd+0x59a>
   19ad8:	001c      	movs	r4, r3
   19ada:	0017      	movs	r7, r2
   19adc:	46d8      	mov	r8, fp
   19ade:	e65b      	b.n	19798 <__aeabi_dadd+0x108>
   19ae0:	0006      	movs	r6, r0
   19ae2:	2400      	movs	r4, #0
   19ae4:	2700      	movs	r7, #0
   19ae6:	e697      	b.n	19818 <__aeabi_dadd+0x188>
   19ae8:	4650      	mov	r0, sl
   19aea:	000b      	movs	r3, r1
   19aec:	3820      	subs	r0, #32
   19aee:	40c3      	lsrs	r3, r0
   19af0:	4699      	mov	r9, r3
   19af2:	4653      	mov	r3, sl
   19af4:	2b20      	cmp	r3, #32
   19af6:	d100      	bne.n	19afa <__aeabi_dadd+0x46a>
   19af8:	e095      	b.n	19c26 <__aeabi_dadd+0x596>
   19afa:	2340      	movs	r3, #64	; 0x40
   19afc:	4650      	mov	r0, sl
   19afe:	1a1b      	subs	r3, r3, r0
   19b00:	4099      	lsls	r1, r3
   19b02:	430a      	orrs	r2, r1
   19b04:	1e51      	subs	r1, r2, #1
   19b06:	418a      	sbcs	r2, r1
   19b08:	464b      	mov	r3, r9
   19b0a:	2100      	movs	r1, #0
   19b0c:	431a      	orrs	r2, r3
   19b0e:	e69f      	b.n	19850 <__aeabi_dadd+0x1c0>
   19b10:	2e00      	cmp	r6, #0
   19b12:	d130      	bne.n	19b76 <__aeabi_dadd+0x4e6>
   19b14:	0026      	movs	r6, r4
   19b16:	433e      	orrs	r6, r7
   19b18:	d067      	beq.n	19bea <__aeabi_dadd+0x55a>
   19b1a:	43db      	mvns	r3, r3
   19b1c:	469a      	mov	sl, r3
   19b1e:	2b00      	cmp	r3, #0
   19b20:	d01c      	beq.n	19b5c <__aeabi_dadd+0x4cc>
   19b22:	4e61      	ldr	r6, [pc, #388]	; (19ca8 <__aeabi_dadd+0x618>)
   19b24:	42b0      	cmp	r0, r6
   19b26:	d060      	beq.n	19bea <__aeabi_dadd+0x55a>
   19b28:	4653      	mov	r3, sl
   19b2a:	2b38      	cmp	r3, #56	; 0x38
   19b2c:	dd00      	ble.n	19b30 <__aeabi_dadd+0x4a0>
   19b2e:	e096      	b.n	19c5e <__aeabi_dadd+0x5ce>
   19b30:	2b1f      	cmp	r3, #31
   19b32:	dd00      	ble.n	19b36 <__aeabi_dadd+0x4a6>
   19b34:	e09f      	b.n	19c76 <__aeabi_dadd+0x5e6>
   19b36:	2620      	movs	r6, #32
   19b38:	1af3      	subs	r3, r6, r3
   19b3a:	0026      	movs	r6, r4
   19b3c:	409e      	lsls	r6, r3
   19b3e:	469c      	mov	ip, r3
   19b40:	46b3      	mov	fp, r6
   19b42:	4653      	mov	r3, sl
   19b44:	003e      	movs	r6, r7
   19b46:	40de      	lsrs	r6, r3
   19b48:	0033      	movs	r3, r6
   19b4a:	465e      	mov	r6, fp
   19b4c:	431e      	orrs	r6, r3
   19b4e:	4663      	mov	r3, ip
   19b50:	409f      	lsls	r7, r3
   19b52:	1e7b      	subs	r3, r7, #1
   19b54:	419f      	sbcs	r7, r3
   19b56:	4653      	mov	r3, sl
   19b58:	40dc      	lsrs	r4, r3
   19b5a:	4337      	orrs	r7, r6
   19b5c:	18bf      	adds	r7, r7, r2
   19b5e:	4297      	cmp	r7, r2
   19b60:	4192      	sbcs	r2, r2
   19b62:	1864      	adds	r4, r4, r1
   19b64:	4252      	negs	r2, r2
   19b66:	18a4      	adds	r4, r4, r2
   19b68:	0006      	movs	r6, r0
   19b6a:	e678      	b.n	1985e <__aeabi_dadd+0x1ce>
   19b6c:	4327      	orrs	r7, r4
   19b6e:	1e7c      	subs	r4, r7, #1
   19b70:	41a7      	sbcs	r7, r4
   19b72:	2400      	movs	r4, #0
   19b74:	e737      	b.n	199e6 <__aeabi_dadd+0x356>
   19b76:	4e4c      	ldr	r6, [pc, #304]	; (19ca8 <__aeabi_dadd+0x618>)
   19b78:	42b0      	cmp	r0, r6
   19b7a:	d036      	beq.n	19bea <__aeabi_dadd+0x55a>
   19b7c:	2680      	movs	r6, #128	; 0x80
   19b7e:	425b      	negs	r3, r3
   19b80:	0436      	lsls	r6, r6, #16
   19b82:	469a      	mov	sl, r3
   19b84:	4334      	orrs	r4, r6
   19b86:	e7cf      	b.n	19b28 <__aeabi_dadd+0x498>
   19b88:	0018      	movs	r0, r3
   19b8a:	4310      	orrs	r0, r2
   19b8c:	d100      	bne.n	19b90 <__aeabi_dadd+0x500>
   19b8e:	e603      	b.n	19798 <__aeabi_dadd+0x108>
   19b90:	1ab8      	subs	r0, r7, r2
   19b92:	4684      	mov	ip, r0
   19b94:	4567      	cmp	r7, ip
   19b96:	41ad      	sbcs	r5, r5
   19b98:	1ae0      	subs	r0, r4, r3
   19b9a:	426d      	negs	r5, r5
   19b9c:	1b40      	subs	r0, r0, r5
   19b9e:	0205      	lsls	r5, r0, #8
   19ba0:	d400      	bmi.n	19ba4 <__aeabi_dadd+0x514>
   19ba2:	e62c      	b.n	197fe <__aeabi_dadd+0x16e>
   19ba4:	1bd7      	subs	r7, r2, r7
   19ba6:	42ba      	cmp	r2, r7
   19ba8:	4192      	sbcs	r2, r2
   19baa:	1b1c      	subs	r4, r3, r4
   19bac:	4252      	negs	r2, r2
   19bae:	1aa4      	subs	r4, r4, r2
   19bb0:	46d8      	mov	r8, fp
   19bb2:	e5f1      	b.n	19798 <__aeabi_dadd+0x108>
   19bb4:	0018      	movs	r0, r3
   19bb6:	4310      	orrs	r0, r2
   19bb8:	d100      	bne.n	19bbc <__aeabi_dadd+0x52c>
   19bba:	e763      	b.n	19a84 <__aeabi_dadd+0x3f4>
   19bbc:	08f8      	lsrs	r0, r7, #3
   19bbe:	0767      	lsls	r7, r4, #29
   19bc0:	4307      	orrs	r7, r0
   19bc2:	2080      	movs	r0, #128	; 0x80
   19bc4:	08e4      	lsrs	r4, r4, #3
   19bc6:	0300      	lsls	r0, r0, #12
   19bc8:	4204      	tst	r4, r0
   19bca:	d008      	beq.n	19bde <__aeabi_dadd+0x54e>
   19bcc:	08dd      	lsrs	r5, r3, #3
   19bce:	4205      	tst	r5, r0
   19bd0:	d105      	bne.n	19bde <__aeabi_dadd+0x54e>
   19bd2:	08d2      	lsrs	r2, r2, #3
   19bd4:	0759      	lsls	r1, r3, #29
   19bd6:	4311      	orrs	r1, r2
   19bd8:	000f      	movs	r7, r1
   19bda:	002c      	movs	r4, r5
   19bdc:	46d8      	mov	r8, fp
   19bde:	0f7b      	lsrs	r3, r7, #29
   19be0:	00e4      	lsls	r4, r4, #3
   19be2:	431c      	orrs	r4, r3
   19be4:	00ff      	lsls	r7, r7, #3
   19be6:	4e30      	ldr	r6, [pc, #192]	; (19ca8 <__aeabi_dadd+0x618>)
   19be8:	e5d6      	b.n	19798 <__aeabi_dadd+0x108>
   19bea:	000c      	movs	r4, r1
   19bec:	0017      	movs	r7, r2
   19bee:	0006      	movs	r6, r0
   19bf0:	e5d2      	b.n	19798 <__aeabi_dadd+0x108>
   19bf2:	2b00      	cmp	r3, #0
   19bf4:	d038      	beq.n	19c68 <__aeabi_dadd+0x5d8>
   19bf6:	000b      	movs	r3, r1
   19bf8:	4313      	orrs	r3, r2
   19bfa:	d100      	bne.n	19bfe <__aeabi_dadd+0x56e>
   19bfc:	e742      	b.n	19a84 <__aeabi_dadd+0x3f4>
   19bfe:	08f8      	lsrs	r0, r7, #3
   19c00:	0767      	lsls	r7, r4, #29
   19c02:	4307      	orrs	r7, r0
   19c04:	2080      	movs	r0, #128	; 0x80
   19c06:	08e4      	lsrs	r4, r4, #3
   19c08:	0300      	lsls	r0, r0, #12
   19c0a:	4204      	tst	r4, r0
   19c0c:	d0e7      	beq.n	19bde <__aeabi_dadd+0x54e>
   19c0e:	08cb      	lsrs	r3, r1, #3
   19c10:	4203      	tst	r3, r0
   19c12:	d1e4      	bne.n	19bde <__aeabi_dadd+0x54e>
   19c14:	08d2      	lsrs	r2, r2, #3
   19c16:	0749      	lsls	r1, r1, #29
   19c18:	4311      	orrs	r1, r2
   19c1a:	000f      	movs	r7, r1
   19c1c:	001c      	movs	r4, r3
   19c1e:	e7de      	b.n	19bde <__aeabi_dadd+0x54e>
   19c20:	2700      	movs	r7, #0
   19c22:	2400      	movs	r4, #0
   19c24:	e5d5      	b.n	197d2 <__aeabi_dadd+0x142>
   19c26:	2100      	movs	r1, #0
   19c28:	e76b      	b.n	19b02 <__aeabi_dadd+0x472>
   19c2a:	2500      	movs	r5, #0
   19c2c:	2700      	movs	r7, #0
   19c2e:	e5f3      	b.n	19818 <__aeabi_dadd+0x188>
   19c30:	464e      	mov	r6, r9
   19c32:	0025      	movs	r5, r4
   19c34:	3e20      	subs	r6, #32
   19c36:	40f5      	lsrs	r5, r6
   19c38:	464b      	mov	r3, r9
   19c3a:	002e      	movs	r6, r5
   19c3c:	2b20      	cmp	r3, #32
   19c3e:	d02d      	beq.n	19c9c <__aeabi_dadd+0x60c>
   19c40:	2540      	movs	r5, #64	; 0x40
   19c42:	1aed      	subs	r5, r5, r3
   19c44:	40ac      	lsls	r4, r5
   19c46:	4327      	orrs	r7, r4
   19c48:	1e7c      	subs	r4, r7, #1
   19c4a:	41a7      	sbcs	r7, r4
   19c4c:	2400      	movs	r4, #0
   19c4e:	4337      	orrs	r7, r6
   19c50:	e6c9      	b.n	199e6 <__aeabi_dadd+0x356>
   19c52:	2480      	movs	r4, #128	; 0x80
   19c54:	2500      	movs	r5, #0
   19c56:	0324      	lsls	r4, r4, #12
   19c58:	4e13      	ldr	r6, [pc, #76]	; (19ca8 <__aeabi_dadd+0x618>)
   19c5a:	2700      	movs	r7, #0
   19c5c:	e5dc      	b.n	19818 <__aeabi_dadd+0x188>
   19c5e:	4327      	orrs	r7, r4
   19c60:	1e7c      	subs	r4, r7, #1
   19c62:	41a7      	sbcs	r7, r4
   19c64:	2400      	movs	r4, #0
   19c66:	e779      	b.n	19b5c <__aeabi_dadd+0x4cc>
   19c68:	000c      	movs	r4, r1
   19c6a:	0017      	movs	r7, r2
   19c6c:	4e0e      	ldr	r6, [pc, #56]	; (19ca8 <__aeabi_dadd+0x618>)
   19c6e:	e593      	b.n	19798 <__aeabi_dadd+0x108>
   19c70:	000c      	movs	r4, r1
   19c72:	0017      	movs	r7, r2
   19c74:	e590      	b.n	19798 <__aeabi_dadd+0x108>
   19c76:	4656      	mov	r6, sl
   19c78:	0023      	movs	r3, r4
   19c7a:	3e20      	subs	r6, #32
   19c7c:	40f3      	lsrs	r3, r6
   19c7e:	4699      	mov	r9, r3
   19c80:	4653      	mov	r3, sl
   19c82:	2b20      	cmp	r3, #32
   19c84:	d00e      	beq.n	19ca4 <__aeabi_dadd+0x614>
   19c86:	2340      	movs	r3, #64	; 0x40
   19c88:	4656      	mov	r6, sl
   19c8a:	1b9b      	subs	r3, r3, r6
   19c8c:	409c      	lsls	r4, r3
   19c8e:	4327      	orrs	r7, r4
   19c90:	1e7c      	subs	r4, r7, #1
   19c92:	41a7      	sbcs	r7, r4
   19c94:	464b      	mov	r3, r9
   19c96:	2400      	movs	r4, #0
   19c98:	431f      	orrs	r7, r3
   19c9a:	e75f      	b.n	19b5c <__aeabi_dadd+0x4cc>
   19c9c:	2400      	movs	r4, #0
   19c9e:	e7d2      	b.n	19c46 <__aeabi_dadd+0x5b6>
   19ca0:	0017      	movs	r7, r2
   19ca2:	e5b2      	b.n	1980a <__aeabi_dadd+0x17a>
   19ca4:	2400      	movs	r4, #0
   19ca6:	e7f2      	b.n	19c8e <__aeabi_dadd+0x5fe>
   19ca8:	000007ff 	.word	0x000007ff
   19cac:	ff7fffff 	.word	0xff7fffff

00019cb0 <__aeabi_ddiv>:
   19cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cb2:	4657      	mov	r7, sl
   19cb4:	4645      	mov	r5, r8
   19cb6:	46de      	mov	lr, fp
   19cb8:	464e      	mov	r6, r9
   19cba:	b5e0      	push	{r5, r6, r7, lr}
   19cbc:	004c      	lsls	r4, r1, #1
   19cbe:	030e      	lsls	r6, r1, #12
   19cc0:	b087      	sub	sp, #28
   19cc2:	4683      	mov	fp, r0
   19cc4:	4692      	mov	sl, r2
   19cc6:	001d      	movs	r5, r3
   19cc8:	4680      	mov	r8, r0
   19cca:	0b36      	lsrs	r6, r6, #12
   19ccc:	0d64      	lsrs	r4, r4, #21
   19cce:	0fcf      	lsrs	r7, r1, #31
   19cd0:	2c00      	cmp	r4, #0
   19cd2:	d04f      	beq.n	19d74 <__aeabi_ddiv+0xc4>
   19cd4:	4b6f      	ldr	r3, [pc, #444]	; (19e94 <__aeabi_ddiv+0x1e4>)
   19cd6:	429c      	cmp	r4, r3
   19cd8:	d035      	beq.n	19d46 <__aeabi_ddiv+0x96>
   19cda:	2380      	movs	r3, #128	; 0x80
   19cdc:	0f42      	lsrs	r2, r0, #29
   19cde:	041b      	lsls	r3, r3, #16
   19ce0:	00f6      	lsls	r6, r6, #3
   19ce2:	4313      	orrs	r3, r2
   19ce4:	4333      	orrs	r3, r6
   19ce6:	4699      	mov	r9, r3
   19ce8:	00c3      	lsls	r3, r0, #3
   19cea:	4698      	mov	r8, r3
   19cec:	4b6a      	ldr	r3, [pc, #424]	; (19e98 <__aeabi_ddiv+0x1e8>)
   19cee:	2600      	movs	r6, #0
   19cf0:	469c      	mov	ip, r3
   19cf2:	2300      	movs	r3, #0
   19cf4:	4464      	add	r4, ip
   19cf6:	9303      	str	r3, [sp, #12]
   19cf8:	032b      	lsls	r3, r5, #12
   19cfa:	0b1b      	lsrs	r3, r3, #12
   19cfc:	469b      	mov	fp, r3
   19cfe:	006b      	lsls	r3, r5, #1
   19d00:	0fed      	lsrs	r5, r5, #31
   19d02:	4650      	mov	r0, sl
   19d04:	0d5b      	lsrs	r3, r3, #21
   19d06:	9501      	str	r5, [sp, #4]
   19d08:	d05e      	beq.n	19dc8 <__aeabi_ddiv+0x118>
   19d0a:	4a62      	ldr	r2, [pc, #392]	; (19e94 <__aeabi_ddiv+0x1e4>)
   19d0c:	4293      	cmp	r3, r2
   19d0e:	d053      	beq.n	19db8 <__aeabi_ddiv+0x108>
   19d10:	465a      	mov	r2, fp
   19d12:	00d1      	lsls	r1, r2, #3
   19d14:	2280      	movs	r2, #128	; 0x80
   19d16:	0f40      	lsrs	r0, r0, #29
   19d18:	0412      	lsls	r2, r2, #16
   19d1a:	4302      	orrs	r2, r0
   19d1c:	430a      	orrs	r2, r1
   19d1e:	4693      	mov	fp, r2
   19d20:	4652      	mov	r2, sl
   19d22:	00d1      	lsls	r1, r2, #3
   19d24:	4a5c      	ldr	r2, [pc, #368]	; (19e98 <__aeabi_ddiv+0x1e8>)
   19d26:	4694      	mov	ip, r2
   19d28:	2200      	movs	r2, #0
   19d2a:	4463      	add	r3, ip
   19d2c:	0038      	movs	r0, r7
   19d2e:	4068      	eors	r0, r5
   19d30:	4684      	mov	ip, r0
   19d32:	9002      	str	r0, [sp, #8]
   19d34:	1ae4      	subs	r4, r4, r3
   19d36:	4316      	orrs	r6, r2
   19d38:	2e0f      	cmp	r6, #15
   19d3a:	d900      	bls.n	19d3e <__aeabi_ddiv+0x8e>
   19d3c:	e0b4      	b.n	19ea8 <__aeabi_ddiv+0x1f8>
   19d3e:	4b57      	ldr	r3, [pc, #348]	; (19e9c <__aeabi_ddiv+0x1ec>)
   19d40:	00b6      	lsls	r6, r6, #2
   19d42:	599b      	ldr	r3, [r3, r6]
   19d44:	469f      	mov	pc, r3
   19d46:	0003      	movs	r3, r0
   19d48:	4333      	orrs	r3, r6
   19d4a:	4699      	mov	r9, r3
   19d4c:	d16c      	bne.n	19e28 <__aeabi_ddiv+0x178>
   19d4e:	2300      	movs	r3, #0
   19d50:	4698      	mov	r8, r3
   19d52:	3302      	adds	r3, #2
   19d54:	2608      	movs	r6, #8
   19d56:	9303      	str	r3, [sp, #12]
   19d58:	e7ce      	b.n	19cf8 <__aeabi_ddiv+0x48>
   19d5a:	46cb      	mov	fp, r9
   19d5c:	4641      	mov	r1, r8
   19d5e:	9a03      	ldr	r2, [sp, #12]
   19d60:	9701      	str	r7, [sp, #4]
   19d62:	2a02      	cmp	r2, #2
   19d64:	d165      	bne.n	19e32 <__aeabi_ddiv+0x182>
   19d66:	9b01      	ldr	r3, [sp, #4]
   19d68:	4c4a      	ldr	r4, [pc, #296]	; (19e94 <__aeabi_ddiv+0x1e4>)
   19d6a:	469c      	mov	ip, r3
   19d6c:	2300      	movs	r3, #0
   19d6e:	2200      	movs	r2, #0
   19d70:	4698      	mov	r8, r3
   19d72:	e06b      	b.n	19e4c <__aeabi_ddiv+0x19c>
   19d74:	0003      	movs	r3, r0
   19d76:	4333      	orrs	r3, r6
   19d78:	4699      	mov	r9, r3
   19d7a:	d04e      	beq.n	19e1a <__aeabi_ddiv+0x16a>
   19d7c:	2e00      	cmp	r6, #0
   19d7e:	d100      	bne.n	19d82 <__aeabi_ddiv+0xd2>
   19d80:	e1bc      	b.n	1a0fc <__aeabi_ddiv+0x44c>
   19d82:	0030      	movs	r0, r6
   19d84:	f001 fae8 	bl	1b358 <__clzsi2>
   19d88:	0003      	movs	r3, r0
   19d8a:	3b0b      	subs	r3, #11
   19d8c:	2b1c      	cmp	r3, #28
   19d8e:	dd00      	ble.n	19d92 <__aeabi_ddiv+0xe2>
   19d90:	e1ac      	b.n	1a0ec <__aeabi_ddiv+0x43c>
   19d92:	221d      	movs	r2, #29
   19d94:	1ad3      	subs	r3, r2, r3
   19d96:	465a      	mov	r2, fp
   19d98:	0001      	movs	r1, r0
   19d9a:	40da      	lsrs	r2, r3
   19d9c:	3908      	subs	r1, #8
   19d9e:	408e      	lsls	r6, r1
   19da0:	0013      	movs	r3, r2
   19da2:	4333      	orrs	r3, r6
   19da4:	4699      	mov	r9, r3
   19da6:	465b      	mov	r3, fp
   19da8:	408b      	lsls	r3, r1
   19daa:	4698      	mov	r8, r3
   19dac:	2300      	movs	r3, #0
   19dae:	4c3c      	ldr	r4, [pc, #240]	; (19ea0 <__aeabi_ddiv+0x1f0>)
   19db0:	2600      	movs	r6, #0
   19db2:	1a24      	subs	r4, r4, r0
   19db4:	9303      	str	r3, [sp, #12]
   19db6:	e79f      	b.n	19cf8 <__aeabi_ddiv+0x48>
   19db8:	4651      	mov	r1, sl
   19dba:	465a      	mov	r2, fp
   19dbc:	4311      	orrs	r1, r2
   19dbe:	d129      	bne.n	19e14 <__aeabi_ddiv+0x164>
   19dc0:	2200      	movs	r2, #0
   19dc2:	4693      	mov	fp, r2
   19dc4:	3202      	adds	r2, #2
   19dc6:	e7b1      	b.n	19d2c <__aeabi_ddiv+0x7c>
   19dc8:	4659      	mov	r1, fp
   19dca:	4301      	orrs	r1, r0
   19dcc:	d01e      	beq.n	19e0c <__aeabi_ddiv+0x15c>
   19dce:	465b      	mov	r3, fp
   19dd0:	2b00      	cmp	r3, #0
   19dd2:	d100      	bne.n	19dd6 <__aeabi_ddiv+0x126>
   19dd4:	e19e      	b.n	1a114 <__aeabi_ddiv+0x464>
   19dd6:	4658      	mov	r0, fp
   19dd8:	f001 fabe 	bl	1b358 <__clzsi2>
   19ddc:	0003      	movs	r3, r0
   19dde:	3b0b      	subs	r3, #11
   19de0:	2b1c      	cmp	r3, #28
   19de2:	dd00      	ble.n	19de6 <__aeabi_ddiv+0x136>
   19de4:	e18f      	b.n	1a106 <__aeabi_ddiv+0x456>
   19de6:	0002      	movs	r2, r0
   19de8:	4659      	mov	r1, fp
   19dea:	3a08      	subs	r2, #8
   19dec:	4091      	lsls	r1, r2
   19dee:	468b      	mov	fp, r1
   19df0:	211d      	movs	r1, #29
   19df2:	1acb      	subs	r3, r1, r3
   19df4:	4651      	mov	r1, sl
   19df6:	40d9      	lsrs	r1, r3
   19df8:	000b      	movs	r3, r1
   19dfa:	4659      	mov	r1, fp
   19dfc:	430b      	orrs	r3, r1
   19dfe:	4651      	mov	r1, sl
   19e00:	469b      	mov	fp, r3
   19e02:	4091      	lsls	r1, r2
   19e04:	4b26      	ldr	r3, [pc, #152]	; (19ea0 <__aeabi_ddiv+0x1f0>)
   19e06:	2200      	movs	r2, #0
   19e08:	1a1b      	subs	r3, r3, r0
   19e0a:	e78f      	b.n	19d2c <__aeabi_ddiv+0x7c>
   19e0c:	2300      	movs	r3, #0
   19e0e:	2201      	movs	r2, #1
   19e10:	469b      	mov	fp, r3
   19e12:	e78b      	b.n	19d2c <__aeabi_ddiv+0x7c>
   19e14:	4651      	mov	r1, sl
   19e16:	2203      	movs	r2, #3
   19e18:	e788      	b.n	19d2c <__aeabi_ddiv+0x7c>
   19e1a:	2300      	movs	r3, #0
   19e1c:	4698      	mov	r8, r3
   19e1e:	3301      	adds	r3, #1
   19e20:	2604      	movs	r6, #4
   19e22:	2400      	movs	r4, #0
   19e24:	9303      	str	r3, [sp, #12]
   19e26:	e767      	b.n	19cf8 <__aeabi_ddiv+0x48>
   19e28:	2303      	movs	r3, #3
   19e2a:	46b1      	mov	r9, r6
   19e2c:	9303      	str	r3, [sp, #12]
   19e2e:	260c      	movs	r6, #12
   19e30:	e762      	b.n	19cf8 <__aeabi_ddiv+0x48>
   19e32:	2a03      	cmp	r2, #3
   19e34:	d100      	bne.n	19e38 <__aeabi_ddiv+0x188>
   19e36:	e25c      	b.n	1a2f2 <__aeabi_ddiv+0x642>
   19e38:	9b01      	ldr	r3, [sp, #4]
   19e3a:	2a01      	cmp	r2, #1
   19e3c:	d000      	beq.n	19e40 <__aeabi_ddiv+0x190>
   19e3e:	e1e4      	b.n	1a20a <__aeabi_ddiv+0x55a>
   19e40:	4013      	ands	r3, r2
   19e42:	469c      	mov	ip, r3
   19e44:	2300      	movs	r3, #0
   19e46:	2400      	movs	r4, #0
   19e48:	2200      	movs	r2, #0
   19e4a:	4698      	mov	r8, r3
   19e4c:	2100      	movs	r1, #0
   19e4e:	0312      	lsls	r2, r2, #12
   19e50:	0b13      	lsrs	r3, r2, #12
   19e52:	0d0a      	lsrs	r2, r1, #20
   19e54:	0512      	lsls	r2, r2, #20
   19e56:	431a      	orrs	r2, r3
   19e58:	0523      	lsls	r3, r4, #20
   19e5a:	4c12      	ldr	r4, [pc, #72]	; (19ea4 <__aeabi_ddiv+0x1f4>)
   19e5c:	4640      	mov	r0, r8
   19e5e:	4022      	ands	r2, r4
   19e60:	4313      	orrs	r3, r2
   19e62:	4662      	mov	r2, ip
   19e64:	005b      	lsls	r3, r3, #1
   19e66:	07d2      	lsls	r2, r2, #31
   19e68:	085b      	lsrs	r3, r3, #1
   19e6a:	4313      	orrs	r3, r2
   19e6c:	0019      	movs	r1, r3
   19e6e:	b007      	add	sp, #28
   19e70:	bc3c      	pop	{r2, r3, r4, r5}
   19e72:	4690      	mov	r8, r2
   19e74:	4699      	mov	r9, r3
   19e76:	46a2      	mov	sl, r4
   19e78:	46ab      	mov	fp, r5
   19e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e7c:	2300      	movs	r3, #0
   19e7e:	2280      	movs	r2, #128	; 0x80
   19e80:	469c      	mov	ip, r3
   19e82:	0312      	lsls	r2, r2, #12
   19e84:	4698      	mov	r8, r3
   19e86:	4c03      	ldr	r4, [pc, #12]	; (19e94 <__aeabi_ddiv+0x1e4>)
   19e88:	e7e0      	b.n	19e4c <__aeabi_ddiv+0x19c>
   19e8a:	2300      	movs	r3, #0
   19e8c:	4c01      	ldr	r4, [pc, #4]	; (19e94 <__aeabi_ddiv+0x1e4>)
   19e8e:	2200      	movs	r2, #0
   19e90:	4698      	mov	r8, r3
   19e92:	e7db      	b.n	19e4c <__aeabi_ddiv+0x19c>
   19e94:	000007ff 	.word	0x000007ff
   19e98:	fffffc01 	.word	0xfffffc01
   19e9c:	0001bea0 	.word	0x0001bea0
   19ea0:	fffffc0d 	.word	0xfffffc0d
   19ea4:	800fffff 	.word	0x800fffff
   19ea8:	45d9      	cmp	r9, fp
   19eaa:	d900      	bls.n	19eae <__aeabi_ddiv+0x1fe>
   19eac:	e139      	b.n	1a122 <__aeabi_ddiv+0x472>
   19eae:	d100      	bne.n	19eb2 <__aeabi_ddiv+0x202>
   19eb0:	e134      	b.n	1a11c <__aeabi_ddiv+0x46c>
   19eb2:	2300      	movs	r3, #0
   19eb4:	4646      	mov	r6, r8
   19eb6:	464d      	mov	r5, r9
   19eb8:	469a      	mov	sl, r3
   19eba:	3c01      	subs	r4, #1
   19ebc:	465b      	mov	r3, fp
   19ebe:	0e0a      	lsrs	r2, r1, #24
   19ec0:	021b      	lsls	r3, r3, #8
   19ec2:	431a      	orrs	r2, r3
   19ec4:	020b      	lsls	r3, r1, #8
   19ec6:	0c17      	lsrs	r7, r2, #16
   19ec8:	9303      	str	r3, [sp, #12]
   19eca:	0413      	lsls	r3, r2, #16
   19ecc:	0c1b      	lsrs	r3, r3, #16
   19ece:	0039      	movs	r1, r7
   19ed0:	0028      	movs	r0, r5
   19ed2:	4690      	mov	r8, r2
   19ed4:	9301      	str	r3, [sp, #4]
   19ed6:	f7fe fa99 	bl	1840c <__udivsi3>
   19eda:	0002      	movs	r2, r0
   19edc:	9b01      	ldr	r3, [sp, #4]
   19ede:	4683      	mov	fp, r0
   19ee0:	435a      	muls	r2, r3
   19ee2:	0028      	movs	r0, r5
   19ee4:	0039      	movs	r1, r7
   19ee6:	4691      	mov	r9, r2
   19ee8:	f7fe fb16 	bl	18518 <__aeabi_uidivmod>
   19eec:	0c35      	lsrs	r5, r6, #16
   19eee:	0409      	lsls	r1, r1, #16
   19ef0:	430d      	orrs	r5, r1
   19ef2:	45a9      	cmp	r9, r5
   19ef4:	d90d      	bls.n	19f12 <__aeabi_ddiv+0x262>
   19ef6:	465b      	mov	r3, fp
   19ef8:	4445      	add	r5, r8
   19efa:	3b01      	subs	r3, #1
   19efc:	45a8      	cmp	r8, r5
   19efe:	d900      	bls.n	19f02 <__aeabi_ddiv+0x252>
   19f00:	e13a      	b.n	1a178 <__aeabi_ddiv+0x4c8>
   19f02:	45a9      	cmp	r9, r5
   19f04:	d800      	bhi.n	19f08 <__aeabi_ddiv+0x258>
   19f06:	e137      	b.n	1a178 <__aeabi_ddiv+0x4c8>
   19f08:	2302      	movs	r3, #2
   19f0a:	425b      	negs	r3, r3
   19f0c:	469c      	mov	ip, r3
   19f0e:	4445      	add	r5, r8
   19f10:	44e3      	add	fp, ip
   19f12:	464b      	mov	r3, r9
   19f14:	1aeb      	subs	r3, r5, r3
   19f16:	0039      	movs	r1, r7
   19f18:	0018      	movs	r0, r3
   19f1a:	9304      	str	r3, [sp, #16]
   19f1c:	f7fe fa76 	bl	1840c <__udivsi3>
   19f20:	9b01      	ldr	r3, [sp, #4]
   19f22:	0005      	movs	r5, r0
   19f24:	4343      	muls	r3, r0
   19f26:	0039      	movs	r1, r7
   19f28:	9804      	ldr	r0, [sp, #16]
   19f2a:	4699      	mov	r9, r3
   19f2c:	f7fe faf4 	bl	18518 <__aeabi_uidivmod>
   19f30:	0433      	lsls	r3, r6, #16
   19f32:	0409      	lsls	r1, r1, #16
   19f34:	0c1b      	lsrs	r3, r3, #16
   19f36:	430b      	orrs	r3, r1
   19f38:	4599      	cmp	r9, r3
   19f3a:	d909      	bls.n	19f50 <__aeabi_ddiv+0x2a0>
   19f3c:	4443      	add	r3, r8
   19f3e:	1e6a      	subs	r2, r5, #1
   19f40:	4598      	cmp	r8, r3
   19f42:	d900      	bls.n	19f46 <__aeabi_ddiv+0x296>
   19f44:	e11a      	b.n	1a17c <__aeabi_ddiv+0x4cc>
   19f46:	4599      	cmp	r9, r3
   19f48:	d800      	bhi.n	19f4c <__aeabi_ddiv+0x29c>
   19f4a:	e117      	b.n	1a17c <__aeabi_ddiv+0x4cc>
   19f4c:	3d02      	subs	r5, #2
   19f4e:	4443      	add	r3, r8
   19f50:	464a      	mov	r2, r9
   19f52:	1a9b      	subs	r3, r3, r2
   19f54:	465a      	mov	r2, fp
   19f56:	0412      	lsls	r2, r2, #16
   19f58:	432a      	orrs	r2, r5
   19f5a:	9903      	ldr	r1, [sp, #12]
   19f5c:	4693      	mov	fp, r2
   19f5e:	0c10      	lsrs	r0, r2, #16
   19f60:	0c0a      	lsrs	r2, r1, #16
   19f62:	4691      	mov	r9, r2
   19f64:	0409      	lsls	r1, r1, #16
   19f66:	465a      	mov	r2, fp
   19f68:	0c09      	lsrs	r1, r1, #16
   19f6a:	464e      	mov	r6, r9
   19f6c:	000d      	movs	r5, r1
   19f6e:	0412      	lsls	r2, r2, #16
   19f70:	0c12      	lsrs	r2, r2, #16
   19f72:	4345      	muls	r5, r0
   19f74:	9105      	str	r1, [sp, #20]
   19f76:	4351      	muls	r1, r2
   19f78:	4372      	muls	r2, r6
   19f7a:	4370      	muls	r0, r6
   19f7c:	1952      	adds	r2, r2, r5
   19f7e:	0c0e      	lsrs	r6, r1, #16
   19f80:	18b2      	adds	r2, r6, r2
   19f82:	4295      	cmp	r5, r2
   19f84:	d903      	bls.n	19f8e <__aeabi_ddiv+0x2de>
   19f86:	2580      	movs	r5, #128	; 0x80
   19f88:	026d      	lsls	r5, r5, #9
   19f8a:	46ac      	mov	ip, r5
   19f8c:	4460      	add	r0, ip
   19f8e:	0c15      	lsrs	r5, r2, #16
   19f90:	0409      	lsls	r1, r1, #16
   19f92:	0412      	lsls	r2, r2, #16
   19f94:	0c09      	lsrs	r1, r1, #16
   19f96:	1828      	adds	r0, r5, r0
   19f98:	1852      	adds	r2, r2, r1
   19f9a:	4283      	cmp	r3, r0
   19f9c:	d200      	bcs.n	19fa0 <__aeabi_ddiv+0x2f0>
   19f9e:	e0ce      	b.n	1a13e <__aeabi_ddiv+0x48e>
   19fa0:	d100      	bne.n	19fa4 <__aeabi_ddiv+0x2f4>
   19fa2:	e0c8      	b.n	1a136 <__aeabi_ddiv+0x486>
   19fa4:	1a1d      	subs	r5, r3, r0
   19fa6:	4653      	mov	r3, sl
   19fa8:	1a9e      	subs	r6, r3, r2
   19faa:	45b2      	cmp	sl, r6
   19fac:	4192      	sbcs	r2, r2
   19fae:	4252      	negs	r2, r2
   19fb0:	1aab      	subs	r3, r5, r2
   19fb2:	469a      	mov	sl, r3
   19fb4:	4598      	cmp	r8, r3
   19fb6:	d100      	bne.n	19fba <__aeabi_ddiv+0x30a>
   19fb8:	e117      	b.n	1a1ea <__aeabi_ddiv+0x53a>
   19fba:	0039      	movs	r1, r7
   19fbc:	0018      	movs	r0, r3
   19fbe:	f7fe fa25 	bl	1840c <__udivsi3>
   19fc2:	9b01      	ldr	r3, [sp, #4]
   19fc4:	0005      	movs	r5, r0
   19fc6:	4343      	muls	r3, r0
   19fc8:	0039      	movs	r1, r7
   19fca:	4650      	mov	r0, sl
   19fcc:	9304      	str	r3, [sp, #16]
   19fce:	f7fe faa3 	bl	18518 <__aeabi_uidivmod>
   19fd2:	9804      	ldr	r0, [sp, #16]
   19fd4:	040b      	lsls	r3, r1, #16
   19fd6:	0c31      	lsrs	r1, r6, #16
   19fd8:	4319      	orrs	r1, r3
   19fda:	4288      	cmp	r0, r1
   19fdc:	d909      	bls.n	19ff2 <__aeabi_ddiv+0x342>
   19fde:	4441      	add	r1, r8
   19fe0:	1e6b      	subs	r3, r5, #1
   19fe2:	4588      	cmp	r8, r1
   19fe4:	d900      	bls.n	19fe8 <__aeabi_ddiv+0x338>
   19fe6:	e107      	b.n	1a1f8 <__aeabi_ddiv+0x548>
   19fe8:	4288      	cmp	r0, r1
   19fea:	d800      	bhi.n	19fee <__aeabi_ddiv+0x33e>
   19fec:	e104      	b.n	1a1f8 <__aeabi_ddiv+0x548>
   19fee:	3d02      	subs	r5, #2
   19ff0:	4441      	add	r1, r8
   19ff2:	9b04      	ldr	r3, [sp, #16]
   19ff4:	1acb      	subs	r3, r1, r3
   19ff6:	0018      	movs	r0, r3
   19ff8:	0039      	movs	r1, r7
   19ffa:	9304      	str	r3, [sp, #16]
   19ffc:	f7fe fa06 	bl	1840c <__udivsi3>
   1a000:	9b01      	ldr	r3, [sp, #4]
   1a002:	4682      	mov	sl, r0
   1a004:	4343      	muls	r3, r0
   1a006:	0039      	movs	r1, r7
   1a008:	9804      	ldr	r0, [sp, #16]
   1a00a:	9301      	str	r3, [sp, #4]
   1a00c:	f7fe fa84 	bl	18518 <__aeabi_uidivmod>
   1a010:	9801      	ldr	r0, [sp, #4]
   1a012:	040b      	lsls	r3, r1, #16
   1a014:	0431      	lsls	r1, r6, #16
   1a016:	0c09      	lsrs	r1, r1, #16
   1a018:	4319      	orrs	r1, r3
   1a01a:	4288      	cmp	r0, r1
   1a01c:	d90d      	bls.n	1a03a <__aeabi_ddiv+0x38a>
   1a01e:	4653      	mov	r3, sl
   1a020:	4441      	add	r1, r8
   1a022:	3b01      	subs	r3, #1
   1a024:	4588      	cmp	r8, r1
   1a026:	d900      	bls.n	1a02a <__aeabi_ddiv+0x37a>
   1a028:	e0e8      	b.n	1a1fc <__aeabi_ddiv+0x54c>
   1a02a:	4288      	cmp	r0, r1
   1a02c:	d800      	bhi.n	1a030 <__aeabi_ddiv+0x380>
   1a02e:	e0e5      	b.n	1a1fc <__aeabi_ddiv+0x54c>
   1a030:	2302      	movs	r3, #2
   1a032:	425b      	negs	r3, r3
   1a034:	469c      	mov	ip, r3
   1a036:	4441      	add	r1, r8
   1a038:	44e2      	add	sl, ip
   1a03a:	9b01      	ldr	r3, [sp, #4]
   1a03c:	042d      	lsls	r5, r5, #16
   1a03e:	1ace      	subs	r6, r1, r3
   1a040:	4651      	mov	r1, sl
   1a042:	4329      	orrs	r1, r5
   1a044:	9d05      	ldr	r5, [sp, #20]
   1a046:	464f      	mov	r7, r9
   1a048:	002a      	movs	r2, r5
   1a04a:	040b      	lsls	r3, r1, #16
   1a04c:	0c08      	lsrs	r0, r1, #16
   1a04e:	0c1b      	lsrs	r3, r3, #16
   1a050:	435a      	muls	r2, r3
   1a052:	4345      	muls	r5, r0
   1a054:	437b      	muls	r3, r7
   1a056:	4378      	muls	r0, r7
   1a058:	195b      	adds	r3, r3, r5
   1a05a:	0c17      	lsrs	r7, r2, #16
   1a05c:	18fb      	adds	r3, r7, r3
   1a05e:	429d      	cmp	r5, r3
   1a060:	d903      	bls.n	1a06a <__aeabi_ddiv+0x3ba>
   1a062:	2580      	movs	r5, #128	; 0x80
   1a064:	026d      	lsls	r5, r5, #9
   1a066:	46ac      	mov	ip, r5
   1a068:	4460      	add	r0, ip
   1a06a:	0c1d      	lsrs	r5, r3, #16
   1a06c:	0412      	lsls	r2, r2, #16
   1a06e:	041b      	lsls	r3, r3, #16
   1a070:	0c12      	lsrs	r2, r2, #16
   1a072:	1828      	adds	r0, r5, r0
   1a074:	189b      	adds	r3, r3, r2
   1a076:	4286      	cmp	r6, r0
   1a078:	d200      	bcs.n	1a07c <__aeabi_ddiv+0x3cc>
   1a07a:	e093      	b.n	1a1a4 <__aeabi_ddiv+0x4f4>
   1a07c:	d100      	bne.n	1a080 <__aeabi_ddiv+0x3d0>
   1a07e:	e08e      	b.n	1a19e <__aeabi_ddiv+0x4ee>
   1a080:	2301      	movs	r3, #1
   1a082:	4319      	orrs	r1, r3
   1a084:	4ba0      	ldr	r3, [pc, #640]	; (1a308 <__aeabi_ddiv+0x658>)
   1a086:	18e3      	adds	r3, r4, r3
   1a088:	2b00      	cmp	r3, #0
   1a08a:	dc00      	bgt.n	1a08e <__aeabi_ddiv+0x3de>
   1a08c:	e099      	b.n	1a1c2 <__aeabi_ddiv+0x512>
   1a08e:	074a      	lsls	r2, r1, #29
   1a090:	d000      	beq.n	1a094 <__aeabi_ddiv+0x3e4>
   1a092:	e09e      	b.n	1a1d2 <__aeabi_ddiv+0x522>
   1a094:	465a      	mov	r2, fp
   1a096:	01d2      	lsls	r2, r2, #7
   1a098:	d506      	bpl.n	1a0a8 <__aeabi_ddiv+0x3f8>
   1a09a:	465a      	mov	r2, fp
   1a09c:	4b9b      	ldr	r3, [pc, #620]	; (1a30c <__aeabi_ddiv+0x65c>)
   1a09e:	401a      	ands	r2, r3
   1a0a0:	2380      	movs	r3, #128	; 0x80
   1a0a2:	4693      	mov	fp, r2
   1a0a4:	00db      	lsls	r3, r3, #3
   1a0a6:	18e3      	adds	r3, r4, r3
   1a0a8:	4a99      	ldr	r2, [pc, #612]	; (1a310 <__aeabi_ddiv+0x660>)
   1a0aa:	4293      	cmp	r3, r2
   1a0ac:	dd68      	ble.n	1a180 <__aeabi_ddiv+0x4d0>
   1a0ae:	2301      	movs	r3, #1
   1a0b0:	9a02      	ldr	r2, [sp, #8]
   1a0b2:	4c98      	ldr	r4, [pc, #608]	; (1a314 <__aeabi_ddiv+0x664>)
   1a0b4:	401a      	ands	r2, r3
   1a0b6:	2300      	movs	r3, #0
   1a0b8:	4694      	mov	ip, r2
   1a0ba:	4698      	mov	r8, r3
   1a0bc:	2200      	movs	r2, #0
   1a0be:	e6c5      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a0c0:	2280      	movs	r2, #128	; 0x80
   1a0c2:	464b      	mov	r3, r9
   1a0c4:	0312      	lsls	r2, r2, #12
   1a0c6:	4213      	tst	r3, r2
   1a0c8:	d00a      	beq.n	1a0e0 <__aeabi_ddiv+0x430>
   1a0ca:	465b      	mov	r3, fp
   1a0cc:	4213      	tst	r3, r2
   1a0ce:	d106      	bne.n	1a0de <__aeabi_ddiv+0x42e>
   1a0d0:	431a      	orrs	r2, r3
   1a0d2:	0312      	lsls	r2, r2, #12
   1a0d4:	0b12      	lsrs	r2, r2, #12
   1a0d6:	46ac      	mov	ip, r5
   1a0d8:	4688      	mov	r8, r1
   1a0da:	4c8e      	ldr	r4, [pc, #568]	; (1a314 <__aeabi_ddiv+0x664>)
   1a0dc:	e6b6      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a0de:	464b      	mov	r3, r9
   1a0e0:	431a      	orrs	r2, r3
   1a0e2:	0312      	lsls	r2, r2, #12
   1a0e4:	0b12      	lsrs	r2, r2, #12
   1a0e6:	46bc      	mov	ip, r7
   1a0e8:	4c8a      	ldr	r4, [pc, #552]	; (1a314 <__aeabi_ddiv+0x664>)
   1a0ea:	e6af      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a0ec:	0003      	movs	r3, r0
   1a0ee:	465a      	mov	r2, fp
   1a0f0:	3b28      	subs	r3, #40	; 0x28
   1a0f2:	409a      	lsls	r2, r3
   1a0f4:	2300      	movs	r3, #0
   1a0f6:	4691      	mov	r9, r2
   1a0f8:	4698      	mov	r8, r3
   1a0fa:	e657      	b.n	19dac <__aeabi_ddiv+0xfc>
   1a0fc:	4658      	mov	r0, fp
   1a0fe:	f001 f92b 	bl	1b358 <__clzsi2>
   1a102:	3020      	adds	r0, #32
   1a104:	e640      	b.n	19d88 <__aeabi_ddiv+0xd8>
   1a106:	0003      	movs	r3, r0
   1a108:	4652      	mov	r2, sl
   1a10a:	3b28      	subs	r3, #40	; 0x28
   1a10c:	409a      	lsls	r2, r3
   1a10e:	2100      	movs	r1, #0
   1a110:	4693      	mov	fp, r2
   1a112:	e677      	b.n	19e04 <__aeabi_ddiv+0x154>
   1a114:	f001 f920 	bl	1b358 <__clzsi2>
   1a118:	3020      	adds	r0, #32
   1a11a:	e65f      	b.n	19ddc <__aeabi_ddiv+0x12c>
   1a11c:	4588      	cmp	r8, r1
   1a11e:	d200      	bcs.n	1a122 <__aeabi_ddiv+0x472>
   1a120:	e6c7      	b.n	19eb2 <__aeabi_ddiv+0x202>
   1a122:	464b      	mov	r3, r9
   1a124:	07de      	lsls	r6, r3, #31
   1a126:	085d      	lsrs	r5, r3, #1
   1a128:	4643      	mov	r3, r8
   1a12a:	085b      	lsrs	r3, r3, #1
   1a12c:	431e      	orrs	r6, r3
   1a12e:	4643      	mov	r3, r8
   1a130:	07db      	lsls	r3, r3, #31
   1a132:	469a      	mov	sl, r3
   1a134:	e6c2      	b.n	19ebc <__aeabi_ddiv+0x20c>
   1a136:	2500      	movs	r5, #0
   1a138:	4592      	cmp	sl, r2
   1a13a:	d300      	bcc.n	1a13e <__aeabi_ddiv+0x48e>
   1a13c:	e733      	b.n	19fa6 <__aeabi_ddiv+0x2f6>
   1a13e:	9e03      	ldr	r6, [sp, #12]
   1a140:	4659      	mov	r1, fp
   1a142:	46b4      	mov	ip, r6
   1a144:	44e2      	add	sl, ip
   1a146:	45b2      	cmp	sl, r6
   1a148:	41ad      	sbcs	r5, r5
   1a14a:	426d      	negs	r5, r5
   1a14c:	4445      	add	r5, r8
   1a14e:	18eb      	adds	r3, r5, r3
   1a150:	3901      	subs	r1, #1
   1a152:	4598      	cmp	r8, r3
   1a154:	d207      	bcs.n	1a166 <__aeabi_ddiv+0x4b6>
   1a156:	4298      	cmp	r0, r3
   1a158:	d900      	bls.n	1a15c <__aeabi_ddiv+0x4ac>
   1a15a:	e07f      	b.n	1a25c <__aeabi_ddiv+0x5ac>
   1a15c:	d100      	bne.n	1a160 <__aeabi_ddiv+0x4b0>
   1a15e:	e0bc      	b.n	1a2da <__aeabi_ddiv+0x62a>
   1a160:	1a1d      	subs	r5, r3, r0
   1a162:	468b      	mov	fp, r1
   1a164:	e71f      	b.n	19fa6 <__aeabi_ddiv+0x2f6>
   1a166:	4598      	cmp	r8, r3
   1a168:	d1fa      	bne.n	1a160 <__aeabi_ddiv+0x4b0>
   1a16a:	9d03      	ldr	r5, [sp, #12]
   1a16c:	4555      	cmp	r5, sl
   1a16e:	d9f2      	bls.n	1a156 <__aeabi_ddiv+0x4a6>
   1a170:	4643      	mov	r3, r8
   1a172:	468b      	mov	fp, r1
   1a174:	1a1d      	subs	r5, r3, r0
   1a176:	e716      	b.n	19fa6 <__aeabi_ddiv+0x2f6>
   1a178:	469b      	mov	fp, r3
   1a17a:	e6ca      	b.n	19f12 <__aeabi_ddiv+0x262>
   1a17c:	0015      	movs	r5, r2
   1a17e:	e6e7      	b.n	19f50 <__aeabi_ddiv+0x2a0>
   1a180:	465a      	mov	r2, fp
   1a182:	08c9      	lsrs	r1, r1, #3
   1a184:	0752      	lsls	r2, r2, #29
   1a186:	430a      	orrs	r2, r1
   1a188:	055b      	lsls	r3, r3, #21
   1a18a:	4690      	mov	r8, r2
   1a18c:	0d5c      	lsrs	r4, r3, #21
   1a18e:	465a      	mov	r2, fp
   1a190:	2301      	movs	r3, #1
   1a192:	9902      	ldr	r1, [sp, #8]
   1a194:	0252      	lsls	r2, r2, #9
   1a196:	4019      	ands	r1, r3
   1a198:	0b12      	lsrs	r2, r2, #12
   1a19a:	468c      	mov	ip, r1
   1a19c:	e656      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a19e:	2b00      	cmp	r3, #0
   1a1a0:	d100      	bne.n	1a1a4 <__aeabi_ddiv+0x4f4>
   1a1a2:	e76f      	b.n	1a084 <__aeabi_ddiv+0x3d4>
   1a1a4:	4446      	add	r6, r8
   1a1a6:	1e4a      	subs	r2, r1, #1
   1a1a8:	45b0      	cmp	r8, r6
   1a1aa:	d929      	bls.n	1a200 <__aeabi_ddiv+0x550>
   1a1ac:	0011      	movs	r1, r2
   1a1ae:	4286      	cmp	r6, r0
   1a1b0:	d000      	beq.n	1a1b4 <__aeabi_ddiv+0x504>
   1a1b2:	e765      	b.n	1a080 <__aeabi_ddiv+0x3d0>
   1a1b4:	9a03      	ldr	r2, [sp, #12]
   1a1b6:	4293      	cmp	r3, r2
   1a1b8:	d000      	beq.n	1a1bc <__aeabi_ddiv+0x50c>
   1a1ba:	e761      	b.n	1a080 <__aeabi_ddiv+0x3d0>
   1a1bc:	e762      	b.n	1a084 <__aeabi_ddiv+0x3d4>
   1a1be:	2101      	movs	r1, #1
   1a1c0:	4249      	negs	r1, r1
   1a1c2:	2001      	movs	r0, #1
   1a1c4:	1ac2      	subs	r2, r0, r3
   1a1c6:	2a38      	cmp	r2, #56	; 0x38
   1a1c8:	dd21      	ble.n	1a20e <__aeabi_ddiv+0x55e>
   1a1ca:	9b02      	ldr	r3, [sp, #8]
   1a1cc:	4003      	ands	r3, r0
   1a1ce:	469c      	mov	ip, r3
   1a1d0:	e638      	b.n	19e44 <__aeabi_ddiv+0x194>
   1a1d2:	220f      	movs	r2, #15
   1a1d4:	400a      	ands	r2, r1
   1a1d6:	2a04      	cmp	r2, #4
   1a1d8:	d100      	bne.n	1a1dc <__aeabi_ddiv+0x52c>
   1a1da:	e75b      	b.n	1a094 <__aeabi_ddiv+0x3e4>
   1a1dc:	000a      	movs	r2, r1
   1a1de:	1d11      	adds	r1, r2, #4
   1a1e0:	4291      	cmp	r1, r2
   1a1e2:	4192      	sbcs	r2, r2
   1a1e4:	4252      	negs	r2, r2
   1a1e6:	4493      	add	fp, r2
   1a1e8:	e754      	b.n	1a094 <__aeabi_ddiv+0x3e4>
   1a1ea:	4b47      	ldr	r3, [pc, #284]	; (1a308 <__aeabi_ddiv+0x658>)
   1a1ec:	18e3      	adds	r3, r4, r3
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	dde5      	ble.n	1a1be <__aeabi_ddiv+0x50e>
   1a1f2:	2201      	movs	r2, #1
   1a1f4:	4252      	negs	r2, r2
   1a1f6:	e7f2      	b.n	1a1de <__aeabi_ddiv+0x52e>
   1a1f8:	001d      	movs	r5, r3
   1a1fa:	e6fa      	b.n	19ff2 <__aeabi_ddiv+0x342>
   1a1fc:	469a      	mov	sl, r3
   1a1fe:	e71c      	b.n	1a03a <__aeabi_ddiv+0x38a>
   1a200:	42b0      	cmp	r0, r6
   1a202:	d839      	bhi.n	1a278 <__aeabi_ddiv+0x5c8>
   1a204:	d06e      	beq.n	1a2e4 <__aeabi_ddiv+0x634>
   1a206:	0011      	movs	r1, r2
   1a208:	e73a      	b.n	1a080 <__aeabi_ddiv+0x3d0>
   1a20a:	9302      	str	r3, [sp, #8]
   1a20c:	e73a      	b.n	1a084 <__aeabi_ddiv+0x3d4>
   1a20e:	2a1f      	cmp	r2, #31
   1a210:	dc3c      	bgt.n	1a28c <__aeabi_ddiv+0x5dc>
   1a212:	2320      	movs	r3, #32
   1a214:	1a9b      	subs	r3, r3, r2
   1a216:	000c      	movs	r4, r1
   1a218:	4658      	mov	r0, fp
   1a21a:	4099      	lsls	r1, r3
   1a21c:	4098      	lsls	r0, r3
   1a21e:	1e4b      	subs	r3, r1, #1
   1a220:	4199      	sbcs	r1, r3
   1a222:	465b      	mov	r3, fp
   1a224:	40d4      	lsrs	r4, r2
   1a226:	40d3      	lsrs	r3, r2
   1a228:	4320      	orrs	r0, r4
   1a22a:	4308      	orrs	r0, r1
   1a22c:	001a      	movs	r2, r3
   1a22e:	0743      	lsls	r3, r0, #29
   1a230:	d009      	beq.n	1a246 <__aeabi_ddiv+0x596>
   1a232:	230f      	movs	r3, #15
   1a234:	4003      	ands	r3, r0
   1a236:	2b04      	cmp	r3, #4
   1a238:	d005      	beq.n	1a246 <__aeabi_ddiv+0x596>
   1a23a:	0001      	movs	r1, r0
   1a23c:	1d08      	adds	r0, r1, #4
   1a23e:	4288      	cmp	r0, r1
   1a240:	419b      	sbcs	r3, r3
   1a242:	425b      	negs	r3, r3
   1a244:	18d2      	adds	r2, r2, r3
   1a246:	0213      	lsls	r3, r2, #8
   1a248:	d53a      	bpl.n	1a2c0 <__aeabi_ddiv+0x610>
   1a24a:	2301      	movs	r3, #1
   1a24c:	9a02      	ldr	r2, [sp, #8]
   1a24e:	2401      	movs	r4, #1
   1a250:	401a      	ands	r2, r3
   1a252:	2300      	movs	r3, #0
   1a254:	4694      	mov	ip, r2
   1a256:	4698      	mov	r8, r3
   1a258:	2200      	movs	r2, #0
   1a25a:	e5f7      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a25c:	2102      	movs	r1, #2
   1a25e:	4249      	negs	r1, r1
   1a260:	468c      	mov	ip, r1
   1a262:	9d03      	ldr	r5, [sp, #12]
   1a264:	44e3      	add	fp, ip
   1a266:	46ac      	mov	ip, r5
   1a268:	44e2      	add	sl, ip
   1a26a:	45aa      	cmp	sl, r5
   1a26c:	41ad      	sbcs	r5, r5
   1a26e:	426d      	negs	r5, r5
   1a270:	4445      	add	r5, r8
   1a272:	18ed      	adds	r5, r5, r3
   1a274:	1a2d      	subs	r5, r5, r0
   1a276:	e696      	b.n	19fa6 <__aeabi_ddiv+0x2f6>
   1a278:	1e8a      	subs	r2, r1, #2
   1a27a:	9903      	ldr	r1, [sp, #12]
   1a27c:	004d      	lsls	r5, r1, #1
   1a27e:	428d      	cmp	r5, r1
   1a280:	4189      	sbcs	r1, r1
   1a282:	4249      	negs	r1, r1
   1a284:	4441      	add	r1, r8
   1a286:	1876      	adds	r6, r6, r1
   1a288:	9503      	str	r5, [sp, #12]
   1a28a:	e78f      	b.n	1a1ac <__aeabi_ddiv+0x4fc>
   1a28c:	201f      	movs	r0, #31
   1a28e:	4240      	negs	r0, r0
   1a290:	1ac3      	subs	r3, r0, r3
   1a292:	4658      	mov	r0, fp
   1a294:	40d8      	lsrs	r0, r3
   1a296:	0003      	movs	r3, r0
   1a298:	2a20      	cmp	r2, #32
   1a29a:	d028      	beq.n	1a2ee <__aeabi_ddiv+0x63e>
   1a29c:	2040      	movs	r0, #64	; 0x40
   1a29e:	465d      	mov	r5, fp
   1a2a0:	1a82      	subs	r2, r0, r2
   1a2a2:	4095      	lsls	r5, r2
   1a2a4:	4329      	orrs	r1, r5
   1a2a6:	1e4a      	subs	r2, r1, #1
   1a2a8:	4191      	sbcs	r1, r2
   1a2aa:	4319      	orrs	r1, r3
   1a2ac:	2307      	movs	r3, #7
   1a2ae:	2200      	movs	r2, #0
   1a2b0:	400b      	ands	r3, r1
   1a2b2:	d009      	beq.n	1a2c8 <__aeabi_ddiv+0x618>
   1a2b4:	230f      	movs	r3, #15
   1a2b6:	2200      	movs	r2, #0
   1a2b8:	400b      	ands	r3, r1
   1a2ba:	0008      	movs	r0, r1
   1a2bc:	2b04      	cmp	r3, #4
   1a2be:	d1bd      	bne.n	1a23c <__aeabi_ddiv+0x58c>
   1a2c0:	0001      	movs	r1, r0
   1a2c2:	0753      	lsls	r3, r2, #29
   1a2c4:	0252      	lsls	r2, r2, #9
   1a2c6:	0b12      	lsrs	r2, r2, #12
   1a2c8:	08c9      	lsrs	r1, r1, #3
   1a2ca:	4319      	orrs	r1, r3
   1a2cc:	2301      	movs	r3, #1
   1a2ce:	4688      	mov	r8, r1
   1a2d0:	9902      	ldr	r1, [sp, #8]
   1a2d2:	2400      	movs	r4, #0
   1a2d4:	4019      	ands	r1, r3
   1a2d6:	468c      	mov	ip, r1
   1a2d8:	e5b8      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a2da:	4552      	cmp	r2, sl
   1a2dc:	d8be      	bhi.n	1a25c <__aeabi_ddiv+0x5ac>
   1a2de:	468b      	mov	fp, r1
   1a2e0:	2500      	movs	r5, #0
   1a2e2:	e660      	b.n	19fa6 <__aeabi_ddiv+0x2f6>
   1a2e4:	9d03      	ldr	r5, [sp, #12]
   1a2e6:	429d      	cmp	r5, r3
   1a2e8:	d3c6      	bcc.n	1a278 <__aeabi_ddiv+0x5c8>
   1a2ea:	0011      	movs	r1, r2
   1a2ec:	e762      	b.n	1a1b4 <__aeabi_ddiv+0x504>
   1a2ee:	2500      	movs	r5, #0
   1a2f0:	e7d8      	b.n	1a2a4 <__aeabi_ddiv+0x5f4>
   1a2f2:	2280      	movs	r2, #128	; 0x80
   1a2f4:	465b      	mov	r3, fp
   1a2f6:	0312      	lsls	r2, r2, #12
   1a2f8:	431a      	orrs	r2, r3
   1a2fa:	9b01      	ldr	r3, [sp, #4]
   1a2fc:	0312      	lsls	r2, r2, #12
   1a2fe:	0b12      	lsrs	r2, r2, #12
   1a300:	469c      	mov	ip, r3
   1a302:	4688      	mov	r8, r1
   1a304:	4c03      	ldr	r4, [pc, #12]	; (1a314 <__aeabi_ddiv+0x664>)
   1a306:	e5a1      	b.n	19e4c <__aeabi_ddiv+0x19c>
   1a308:	000003ff 	.word	0x000003ff
   1a30c:	feffffff 	.word	0xfeffffff
   1a310:	000007fe 	.word	0x000007fe
   1a314:	000007ff 	.word	0x000007ff

0001a318 <__eqdf2>:
   1a318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a31a:	464f      	mov	r7, r9
   1a31c:	4646      	mov	r6, r8
   1a31e:	46d6      	mov	lr, sl
   1a320:	005c      	lsls	r4, r3, #1
   1a322:	b5c0      	push	{r6, r7, lr}
   1a324:	031f      	lsls	r7, r3, #12
   1a326:	0fdb      	lsrs	r3, r3, #31
   1a328:	469a      	mov	sl, r3
   1a32a:	4b17      	ldr	r3, [pc, #92]	; (1a388 <__eqdf2+0x70>)
   1a32c:	030e      	lsls	r6, r1, #12
   1a32e:	004d      	lsls	r5, r1, #1
   1a330:	4684      	mov	ip, r0
   1a332:	4680      	mov	r8, r0
   1a334:	0b36      	lsrs	r6, r6, #12
   1a336:	0d6d      	lsrs	r5, r5, #21
   1a338:	0fc9      	lsrs	r1, r1, #31
   1a33a:	4691      	mov	r9, r2
   1a33c:	0b3f      	lsrs	r7, r7, #12
   1a33e:	0d64      	lsrs	r4, r4, #21
   1a340:	2001      	movs	r0, #1
   1a342:	429d      	cmp	r5, r3
   1a344:	d008      	beq.n	1a358 <__eqdf2+0x40>
   1a346:	429c      	cmp	r4, r3
   1a348:	d001      	beq.n	1a34e <__eqdf2+0x36>
   1a34a:	42a5      	cmp	r5, r4
   1a34c:	d00b      	beq.n	1a366 <__eqdf2+0x4e>
   1a34e:	bc1c      	pop	{r2, r3, r4}
   1a350:	4690      	mov	r8, r2
   1a352:	4699      	mov	r9, r3
   1a354:	46a2      	mov	sl, r4
   1a356:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a358:	4663      	mov	r3, ip
   1a35a:	4333      	orrs	r3, r6
   1a35c:	d1f7      	bne.n	1a34e <__eqdf2+0x36>
   1a35e:	42ac      	cmp	r4, r5
   1a360:	d1f5      	bne.n	1a34e <__eqdf2+0x36>
   1a362:	433a      	orrs	r2, r7
   1a364:	d1f3      	bne.n	1a34e <__eqdf2+0x36>
   1a366:	2001      	movs	r0, #1
   1a368:	42be      	cmp	r6, r7
   1a36a:	d1f0      	bne.n	1a34e <__eqdf2+0x36>
   1a36c:	45c8      	cmp	r8, r9
   1a36e:	d1ee      	bne.n	1a34e <__eqdf2+0x36>
   1a370:	4551      	cmp	r1, sl
   1a372:	d007      	beq.n	1a384 <__eqdf2+0x6c>
   1a374:	2d00      	cmp	r5, #0
   1a376:	d1ea      	bne.n	1a34e <__eqdf2+0x36>
   1a378:	4663      	mov	r3, ip
   1a37a:	431e      	orrs	r6, r3
   1a37c:	0030      	movs	r0, r6
   1a37e:	1e46      	subs	r6, r0, #1
   1a380:	41b0      	sbcs	r0, r6
   1a382:	e7e4      	b.n	1a34e <__eqdf2+0x36>
   1a384:	2000      	movs	r0, #0
   1a386:	e7e2      	b.n	1a34e <__eqdf2+0x36>
   1a388:	000007ff 	.word	0x000007ff

0001a38c <__gedf2>:
   1a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a38e:	4645      	mov	r5, r8
   1a390:	46de      	mov	lr, fp
   1a392:	4657      	mov	r7, sl
   1a394:	464e      	mov	r6, r9
   1a396:	b5e0      	push	{r5, r6, r7, lr}
   1a398:	031f      	lsls	r7, r3, #12
   1a39a:	0b3d      	lsrs	r5, r7, #12
   1a39c:	4f2c      	ldr	r7, [pc, #176]	; (1a450 <__gedf2+0xc4>)
   1a39e:	030e      	lsls	r6, r1, #12
   1a3a0:	004c      	lsls	r4, r1, #1
   1a3a2:	46ab      	mov	fp, r5
   1a3a4:	005d      	lsls	r5, r3, #1
   1a3a6:	4684      	mov	ip, r0
   1a3a8:	0b36      	lsrs	r6, r6, #12
   1a3aa:	0d64      	lsrs	r4, r4, #21
   1a3ac:	0fc9      	lsrs	r1, r1, #31
   1a3ae:	4690      	mov	r8, r2
   1a3b0:	0d6d      	lsrs	r5, r5, #21
   1a3b2:	0fdb      	lsrs	r3, r3, #31
   1a3b4:	42bc      	cmp	r4, r7
   1a3b6:	d02a      	beq.n	1a40e <__gedf2+0x82>
   1a3b8:	4f25      	ldr	r7, [pc, #148]	; (1a450 <__gedf2+0xc4>)
   1a3ba:	42bd      	cmp	r5, r7
   1a3bc:	d02d      	beq.n	1a41a <__gedf2+0x8e>
   1a3be:	2c00      	cmp	r4, #0
   1a3c0:	d10f      	bne.n	1a3e2 <__gedf2+0x56>
   1a3c2:	4330      	orrs	r0, r6
   1a3c4:	0007      	movs	r7, r0
   1a3c6:	4681      	mov	r9, r0
   1a3c8:	4278      	negs	r0, r7
   1a3ca:	4178      	adcs	r0, r7
   1a3cc:	b2c0      	uxtb	r0, r0
   1a3ce:	2d00      	cmp	r5, #0
   1a3d0:	d117      	bne.n	1a402 <__gedf2+0x76>
   1a3d2:	465f      	mov	r7, fp
   1a3d4:	433a      	orrs	r2, r7
   1a3d6:	d114      	bne.n	1a402 <__gedf2+0x76>
   1a3d8:	464b      	mov	r3, r9
   1a3da:	2000      	movs	r0, #0
   1a3dc:	2b00      	cmp	r3, #0
   1a3de:	d00a      	beq.n	1a3f6 <__gedf2+0x6a>
   1a3e0:	e006      	b.n	1a3f0 <__gedf2+0x64>
   1a3e2:	2d00      	cmp	r5, #0
   1a3e4:	d102      	bne.n	1a3ec <__gedf2+0x60>
   1a3e6:	4658      	mov	r0, fp
   1a3e8:	4302      	orrs	r2, r0
   1a3ea:	d001      	beq.n	1a3f0 <__gedf2+0x64>
   1a3ec:	4299      	cmp	r1, r3
   1a3ee:	d018      	beq.n	1a422 <__gedf2+0x96>
   1a3f0:	4248      	negs	r0, r1
   1a3f2:	2101      	movs	r1, #1
   1a3f4:	4308      	orrs	r0, r1
   1a3f6:	bc3c      	pop	{r2, r3, r4, r5}
   1a3f8:	4690      	mov	r8, r2
   1a3fa:	4699      	mov	r9, r3
   1a3fc:	46a2      	mov	sl, r4
   1a3fe:	46ab      	mov	fp, r5
   1a400:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a402:	2800      	cmp	r0, #0
   1a404:	d0f2      	beq.n	1a3ec <__gedf2+0x60>
   1a406:	2001      	movs	r0, #1
   1a408:	3b01      	subs	r3, #1
   1a40a:	4318      	orrs	r0, r3
   1a40c:	e7f3      	b.n	1a3f6 <__gedf2+0x6a>
   1a40e:	0037      	movs	r7, r6
   1a410:	4307      	orrs	r7, r0
   1a412:	d0d1      	beq.n	1a3b8 <__gedf2+0x2c>
   1a414:	2002      	movs	r0, #2
   1a416:	4240      	negs	r0, r0
   1a418:	e7ed      	b.n	1a3f6 <__gedf2+0x6a>
   1a41a:	465f      	mov	r7, fp
   1a41c:	4317      	orrs	r7, r2
   1a41e:	d0ce      	beq.n	1a3be <__gedf2+0x32>
   1a420:	e7f8      	b.n	1a414 <__gedf2+0x88>
   1a422:	42ac      	cmp	r4, r5
   1a424:	dce4      	bgt.n	1a3f0 <__gedf2+0x64>
   1a426:	da03      	bge.n	1a430 <__gedf2+0xa4>
   1a428:	1e48      	subs	r0, r1, #1
   1a42a:	2101      	movs	r1, #1
   1a42c:	4308      	orrs	r0, r1
   1a42e:	e7e2      	b.n	1a3f6 <__gedf2+0x6a>
   1a430:	455e      	cmp	r6, fp
   1a432:	d8dd      	bhi.n	1a3f0 <__gedf2+0x64>
   1a434:	d006      	beq.n	1a444 <__gedf2+0xb8>
   1a436:	2000      	movs	r0, #0
   1a438:	455e      	cmp	r6, fp
   1a43a:	d2dc      	bcs.n	1a3f6 <__gedf2+0x6a>
   1a43c:	2301      	movs	r3, #1
   1a43e:	1e48      	subs	r0, r1, #1
   1a440:	4318      	orrs	r0, r3
   1a442:	e7d8      	b.n	1a3f6 <__gedf2+0x6a>
   1a444:	45c4      	cmp	ip, r8
   1a446:	d8d3      	bhi.n	1a3f0 <__gedf2+0x64>
   1a448:	2000      	movs	r0, #0
   1a44a:	45c4      	cmp	ip, r8
   1a44c:	d3f6      	bcc.n	1a43c <__gedf2+0xb0>
   1a44e:	e7d2      	b.n	1a3f6 <__gedf2+0x6a>
   1a450:	000007ff 	.word	0x000007ff

0001a454 <__ledf2>:
   1a454:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a456:	464e      	mov	r6, r9
   1a458:	4645      	mov	r5, r8
   1a45a:	46de      	mov	lr, fp
   1a45c:	4657      	mov	r7, sl
   1a45e:	005c      	lsls	r4, r3, #1
   1a460:	b5e0      	push	{r5, r6, r7, lr}
   1a462:	031f      	lsls	r7, r3, #12
   1a464:	0fdb      	lsrs	r3, r3, #31
   1a466:	4699      	mov	r9, r3
   1a468:	4b2a      	ldr	r3, [pc, #168]	; (1a514 <__ledf2+0xc0>)
   1a46a:	030e      	lsls	r6, r1, #12
   1a46c:	004d      	lsls	r5, r1, #1
   1a46e:	0fc9      	lsrs	r1, r1, #31
   1a470:	4684      	mov	ip, r0
   1a472:	0b36      	lsrs	r6, r6, #12
   1a474:	0d6d      	lsrs	r5, r5, #21
   1a476:	468b      	mov	fp, r1
   1a478:	4690      	mov	r8, r2
   1a47a:	0b3f      	lsrs	r7, r7, #12
   1a47c:	0d64      	lsrs	r4, r4, #21
   1a47e:	429d      	cmp	r5, r3
   1a480:	d020      	beq.n	1a4c4 <__ledf2+0x70>
   1a482:	4b24      	ldr	r3, [pc, #144]	; (1a514 <__ledf2+0xc0>)
   1a484:	429c      	cmp	r4, r3
   1a486:	d022      	beq.n	1a4ce <__ledf2+0x7a>
   1a488:	2d00      	cmp	r5, #0
   1a48a:	d112      	bne.n	1a4b2 <__ledf2+0x5e>
   1a48c:	4330      	orrs	r0, r6
   1a48e:	4243      	negs	r3, r0
   1a490:	4143      	adcs	r3, r0
   1a492:	b2db      	uxtb	r3, r3
   1a494:	2c00      	cmp	r4, #0
   1a496:	d01f      	beq.n	1a4d8 <__ledf2+0x84>
   1a498:	2b00      	cmp	r3, #0
   1a49a:	d00c      	beq.n	1a4b6 <__ledf2+0x62>
   1a49c:	464b      	mov	r3, r9
   1a49e:	2001      	movs	r0, #1
   1a4a0:	3b01      	subs	r3, #1
   1a4a2:	4303      	orrs	r3, r0
   1a4a4:	0018      	movs	r0, r3
   1a4a6:	bc3c      	pop	{r2, r3, r4, r5}
   1a4a8:	4690      	mov	r8, r2
   1a4aa:	4699      	mov	r9, r3
   1a4ac:	46a2      	mov	sl, r4
   1a4ae:	46ab      	mov	fp, r5
   1a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4b2:	2c00      	cmp	r4, #0
   1a4b4:	d016      	beq.n	1a4e4 <__ledf2+0x90>
   1a4b6:	45cb      	cmp	fp, r9
   1a4b8:	d017      	beq.n	1a4ea <__ledf2+0x96>
   1a4ba:	465b      	mov	r3, fp
   1a4bc:	4259      	negs	r1, r3
   1a4be:	2301      	movs	r3, #1
   1a4c0:	430b      	orrs	r3, r1
   1a4c2:	e7ef      	b.n	1a4a4 <__ledf2+0x50>
   1a4c4:	0031      	movs	r1, r6
   1a4c6:	2302      	movs	r3, #2
   1a4c8:	4301      	orrs	r1, r0
   1a4ca:	d1eb      	bne.n	1a4a4 <__ledf2+0x50>
   1a4cc:	e7d9      	b.n	1a482 <__ledf2+0x2e>
   1a4ce:	0039      	movs	r1, r7
   1a4d0:	2302      	movs	r3, #2
   1a4d2:	4311      	orrs	r1, r2
   1a4d4:	d1e6      	bne.n	1a4a4 <__ledf2+0x50>
   1a4d6:	e7d7      	b.n	1a488 <__ledf2+0x34>
   1a4d8:	433a      	orrs	r2, r7
   1a4da:	d1dd      	bne.n	1a498 <__ledf2+0x44>
   1a4dc:	2300      	movs	r3, #0
   1a4de:	2800      	cmp	r0, #0
   1a4e0:	d0e0      	beq.n	1a4a4 <__ledf2+0x50>
   1a4e2:	e7ea      	b.n	1a4ba <__ledf2+0x66>
   1a4e4:	433a      	orrs	r2, r7
   1a4e6:	d1e6      	bne.n	1a4b6 <__ledf2+0x62>
   1a4e8:	e7e7      	b.n	1a4ba <__ledf2+0x66>
   1a4ea:	42a5      	cmp	r5, r4
   1a4ec:	dce5      	bgt.n	1a4ba <__ledf2+0x66>
   1a4ee:	db05      	blt.n	1a4fc <__ledf2+0xa8>
   1a4f0:	42be      	cmp	r6, r7
   1a4f2:	d8e2      	bhi.n	1a4ba <__ledf2+0x66>
   1a4f4:	d007      	beq.n	1a506 <__ledf2+0xb2>
   1a4f6:	2300      	movs	r3, #0
   1a4f8:	42be      	cmp	r6, r7
   1a4fa:	d2d3      	bcs.n	1a4a4 <__ledf2+0x50>
   1a4fc:	4659      	mov	r1, fp
   1a4fe:	2301      	movs	r3, #1
   1a500:	3901      	subs	r1, #1
   1a502:	430b      	orrs	r3, r1
   1a504:	e7ce      	b.n	1a4a4 <__ledf2+0x50>
   1a506:	45c4      	cmp	ip, r8
   1a508:	d8d7      	bhi.n	1a4ba <__ledf2+0x66>
   1a50a:	2300      	movs	r3, #0
   1a50c:	45c4      	cmp	ip, r8
   1a50e:	d3f5      	bcc.n	1a4fc <__ledf2+0xa8>
   1a510:	e7c8      	b.n	1a4a4 <__ledf2+0x50>
   1a512:	46c0      	nop			; (mov r8, r8)
   1a514:	000007ff 	.word	0x000007ff

0001a518 <__aeabi_dmul>:
   1a518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a51a:	4657      	mov	r7, sl
   1a51c:	4645      	mov	r5, r8
   1a51e:	46de      	mov	lr, fp
   1a520:	464e      	mov	r6, r9
   1a522:	b5e0      	push	{r5, r6, r7, lr}
   1a524:	030c      	lsls	r4, r1, #12
   1a526:	4698      	mov	r8, r3
   1a528:	004e      	lsls	r6, r1, #1
   1a52a:	0b23      	lsrs	r3, r4, #12
   1a52c:	b087      	sub	sp, #28
   1a52e:	0007      	movs	r7, r0
   1a530:	4692      	mov	sl, r2
   1a532:	469b      	mov	fp, r3
   1a534:	0d76      	lsrs	r6, r6, #21
   1a536:	0fcd      	lsrs	r5, r1, #31
   1a538:	2e00      	cmp	r6, #0
   1a53a:	d06b      	beq.n	1a614 <__aeabi_dmul+0xfc>
   1a53c:	4b6d      	ldr	r3, [pc, #436]	; (1a6f4 <__aeabi_dmul+0x1dc>)
   1a53e:	429e      	cmp	r6, r3
   1a540:	d035      	beq.n	1a5ae <__aeabi_dmul+0x96>
   1a542:	2480      	movs	r4, #128	; 0x80
   1a544:	465b      	mov	r3, fp
   1a546:	0f42      	lsrs	r2, r0, #29
   1a548:	0424      	lsls	r4, r4, #16
   1a54a:	00db      	lsls	r3, r3, #3
   1a54c:	4314      	orrs	r4, r2
   1a54e:	431c      	orrs	r4, r3
   1a550:	00c3      	lsls	r3, r0, #3
   1a552:	4699      	mov	r9, r3
   1a554:	4b68      	ldr	r3, [pc, #416]	; (1a6f8 <__aeabi_dmul+0x1e0>)
   1a556:	46a3      	mov	fp, r4
   1a558:	469c      	mov	ip, r3
   1a55a:	2300      	movs	r3, #0
   1a55c:	2700      	movs	r7, #0
   1a55e:	4466      	add	r6, ip
   1a560:	9302      	str	r3, [sp, #8]
   1a562:	4643      	mov	r3, r8
   1a564:	031c      	lsls	r4, r3, #12
   1a566:	005a      	lsls	r2, r3, #1
   1a568:	0fdb      	lsrs	r3, r3, #31
   1a56a:	4650      	mov	r0, sl
   1a56c:	0b24      	lsrs	r4, r4, #12
   1a56e:	0d52      	lsrs	r2, r2, #21
   1a570:	4698      	mov	r8, r3
   1a572:	d100      	bne.n	1a576 <__aeabi_dmul+0x5e>
   1a574:	e076      	b.n	1a664 <__aeabi_dmul+0x14c>
   1a576:	4b5f      	ldr	r3, [pc, #380]	; (1a6f4 <__aeabi_dmul+0x1dc>)
   1a578:	429a      	cmp	r2, r3
   1a57a:	d06d      	beq.n	1a658 <__aeabi_dmul+0x140>
   1a57c:	2380      	movs	r3, #128	; 0x80
   1a57e:	0f41      	lsrs	r1, r0, #29
   1a580:	041b      	lsls	r3, r3, #16
   1a582:	430b      	orrs	r3, r1
   1a584:	495c      	ldr	r1, [pc, #368]	; (1a6f8 <__aeabi_dmul+0x1e0>)
   1a586:	00e4      	lsls	r4, r4, #3
   1a588:	468c      	mov	ip, r1
   1a58a:	431c      	orrs	r4, r3
   1a58c:	00c3      	lsls	r3, r0, #3
   1a58e:	2000      	movs	r0, #0
   1a590:	4462      	add	r2, ip
   1a592:	4641      	mov	r1, r8
   1a594:	18b6      	adds	r6, r6, r2
   1a596:	4069      	eors	r1, r5
   1a598:	1c72      	adds	r2, r6, #1
   1a59a:	9101      	str	r1, [sp, #4]
   1a59c:	4694      	mov	ip, r2
   1a59e:	4307      	orrs	r7, r0
   1a5a0:	2f0f      	cmp	r7, #15
   1a5a2:	d900      	bls.n	1a5a6 <__aeabi_dmul+0x8e>
   1a5a4:	e0b0      	b.n	1a708 <__aeabi_dmul+0x1f0>
   1a5a6:	4a55      	ldr	r2, [pc, #340]	; (1a6fc <__aeabi_dmul+0x1e4>)
   1a5a8:	00bf      	lsls	r7, r7, #2
   1a5aa:	59d2      	ldr	r2, [r2, r7]
   1a5ac:	4697      	mov	pc, r2
   1a5ae:	465b      	mov	r3, fp
   1a5b0:	4303      	orrs	r3, r0
   1a5b2:	4699      	mov	r9, r3
   1a5b4:	d000      	beq.n	1a5b8 <__aeabi_dmul+0xa0>
   1a5b6:	e087      	b.n	1a6c8 <__aeabi_dmul+0x1b0>
   1a5b8:	2300      	movs	r3, #0
   1a5ba:	469b      	mov	fp, r3
   1a5bc:	3302      	adds	r3, #2
   1a5be:	2708      	movs	r7, #8
   1a5c0:	9302      	str	r3, [sp, #8]
   1a5c2:	e7ce      	b.n	1a562 <__aeabi_dmul+0x4a>
   1a5c4:	4642      	mov	r2, r8
   1a5c6:	9201      	str	r2, [sp, #4]
   1a5c8:	2802      	cmp	r0, #2
   1a5ca:	d067      	beq.n	1a69c <__aeabi_dmul+0x184>
   1a5cc:	2803      	cmp	r0, #3
   1a5ce:	d100      	bne.n	1a5d2 <__aeabi_dmul+0xba>
   1a5d0:	e20e      	b.n	1a9f0 <__aeabi_dmul+0x4d8>
   1a5d2:	2801      	cmp	r0, #1
   1a5d4:	d000      	beq.n	1a5d8 <__aeabi_dmul+0xc0>
   1a5d6:	e162      	b.n	1a89e <__aeabi_dmul+0x386>
   1a5d8:	2300      	movs	r3, #0
   1a5da:	2400      	movs	r4, #0
   1a5dc:	2200      	movs	r2, #0
   1a5de:	4699      	mov	r9, r3
   1a5e0:	9901      	ldr	r1, [sp, #4]
   1a5e2:	4001      	ands	r1, r0
   1a5e4:	b2cd      	uxtb	r5, r1
   1a5e6:	2100      	movs	r1, #0
   1a5e8:	0312      	lsls	r2, r2, #12
   1a5ea:	0d0b      	lsrs	r3, r1, #20
   1a5ec:	0b12      	lsrs	r2, r2, #12
   1a5ee:	051b      	lsls	r3, r3, #20
   1a5f0:	4313      	orrs	r3, r2
   1a5f2:	4a43      	ldr	r2, [pc, #268]	; (1a700 <__aeabi_dmul+0x1e8>)
   1a5f4:	0524      	lsls	r4, r4, #20
   1a5f6:	4013      	ands	r3, r2
   1a5f8:	431c      	orrs	r4, r3
   1a5fa:	0064      	lsls	r4, r4, #1
   1a5fc:	07ed      	lsls	r5, r5, #31
   1a5fe:	0864      	lsrs	r4, r4, #1
   1a600:	432c      	orrs	r4, r5
   1a602:	4648      	mov	r0, r9
   1a604:	0021      	movs	r1, r4
   1a606:	b007      	add	sp, #28
   1a608:	bc3c      	pop	{r2, r3, r4, r5}
   1a60a:	4690      	mov	r8, r2
   1a60c:	4699      	mov	r9, r3
   1a60e:	46a2      	mov	sl, r4
   1a610:	46ab      	mov	fp, r5
   1a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a614:	4303      	orrs	r3, r0
   1a616:	4699      	mov	r9, r3
   1a618:	d04f      	beq.n	1a6ba <__aeabi_dmul+0x1a2>
   1a61a:	465b      	mov	r3, fp
   1a61c:	2b00      	cmp	r3, #0
   1a61e:	d100      	bne.n	1a622 <__aeabi_dmul+0x10a>
   1a620:	e189      	b.n	1a936 <__aeabi_dmul+0x41e>
   1a622:	4658      	mov	r0, fp
   1a624:	f000 fe98 	bl	1b358 <__clzsi2>
   1a628:	0003      	movs	r3, r0
   1a62a:	3b0b      	subs	r3, #11
   1a62c:	2b1c      	cmp	r3, #28
   1a62e:	dd00      	ble.n	1a632 <__aeabi_dmul+0x11a>
   1a630:	e17a      	b.n	1a928 <__aeabi_dmul+0x410>
   1a632:	221d      	movs	r2, #29
   1a634:	1ad3      	subs	r3, r2, r3
   1a636:	003a      	movs	r2, r7
   1a638:	0001      	movs	r1, r0
   1a63a:	465c      	mov	r4, fp
   1a63c:	40da      	lsrs	r2, r3
   1a63e:	3908      	subs	r1, #8
   1a640:	408c      	lsls	r4, r1
   1a642:	0013      	movs	r3, r2
   1a644:	408f      	lsls	r7, r1
   1a646:	4323      	orrs	r3, r4
   1a648:	469b      	mov	fp, r3
   1a64a:	46b9      	mov	r9, r7
   1a64c:	2300      	movs	r3, #0
   1a64e:	4e2d      	ldr	r6, [pc, #180]	; (1a704 <__aeabi_dmul+0x1ec>)
   1a650:	2700      	movs	r7, #0
   1a652:	1a36      	subs	r6, r6, r0
   1a654:	9302      	str	r3, [sp, #8]
   1a656:	e784      	b.n	1a562 <__aeabi_dmul+0x4a>
   1a658:	4653      	mov	r3, sl
   1a65a:	4323      	orrs	r3, r4
   1a65c:	d12a      	bne.n	1a6b4 <__aeabi_dmul+0x19c>
   1a65e:	2400      	movs	r4, #0
   1a660:	2002      	movs	r0, #2
   1a662:	e796      	b.n	1a592 <__aeabi_dmul+0x7a>
   1a664:	4653      	mov	r3, sl
   1a666:	4323      	orrs	r3, r4
   1a668:	d020      	beq.n	1a6ac <__aeabi_dmul+0x194>
   1a66a:	2c00      	cmp	r4, #0
   1a66c:	d100      	bne.n	1a670 <__aeabi_dmul+0x158>
   1a66e:	e157      	b.n	1a920 <__aeabi_dmul+0x408>
   1a670:	0020      	movs	r0, r4
   1a672:	f000 fe71 	bl	1b358 <__clzsi2>
   1a676:	0003      	movs	r3, r0
   1a678:	3b0b      	subs	r3, #11
   1a67a:	2b1c      	cmp	r3, #28
   1a67c:	dd00      	ble.n	1a680 <__aeabi_dmul+0x168>
   1a67e:	e149      	b.n	1a914 <__aeabi_dmul+0x3fc>
   1a680:	211d      	movs	r1, #29
   1a682:	1acb      	subs	r3, r1, r3
   1a684:	4651      	mov	r1, sl
   1a686:	0002      	movs	r2, r0
   1a688:	40d9      	lsrs	r1, r3
   1a68a:	4653      	mov	r3, sl
   1a68c:	3a08      	subs	r2, #8
   1a68e:	4094      	lsls	r4, r2
   1a690:	4093      	lsls	r3, r2
   1a692:	430c      	orrs	r4, r1
   1a694:	4a1b      	ldr	r2, [pc, #108]	; (1a704 <__aeabi_dmul+0x1ec>)
   1a696:	1a12      	subs	r2, r2, r0
   1a698:	2000      	movs	r0, #0
   1a69a:	e77a      	b.n	1a592 <__aeabi_dmul+0x7a>
   1a69c:	2501      	movs	r5, #1
   1a69e:	9b01      	ldr	r3, [sp, #4]
   1a6a0:	4c14      	ldr	r4, [pc, #80]	; (1a6f4 <__aeabi_dmul+0x1dc>)
   1a6a2:	401d      	ands	r5, r3
   1a6a4:	2300      	movs	r3, #0
   1a6a6:	2200      	movs	r2, #0
   1a6a8:	4699      	mov	r9, r3
   1a6aa:	e79c      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a6ac:	2400      	movs	r4, #0
   1a6ae:	2200      	movs	r2, #0
   1a6b0:	2001      	movs	r0, #1
   1a6b2:	e76e      	b.n	1a592 <__aeabi_dmul+0x7a>
   1a6b4:	4653      	mov	r3, sl
   1a6b6:	2003      	movs	r0, #3
   1a6b8:	e76b      	b.n	1a592 <__aeabi_dmul+0x7a>
   1a6ba:	2300      	movs	r3, #0
   1a6bc:	469b      	mov	fp, r3
   1a6be:	3301      	adds	r3, #1
   1a6c0:	2704      	movs	r7, #4
   1a6c2:	2600      	movs	r6, #0
   1a6c4:	9302      	str	r3, [sp, #8]
   1a6c6:	e74c      	b.n	1a562 <__aeabi_dmul+0x4a>
   1a6c8:	2303      	movs	r3, #3
   1a6ca:	4681      	mov	r9, r0
   1a6cc:	270c      	movs	r7, #12
   1a6ce:	9302      	str	r3, [sp, #8]
   1a6d0:	e747      	b.n	1a562 <__aeabi_dmul+0x4a>
   1a6d2:	2280      	movs	r2, #128	; 0x80
   1a6d4:	2300      	movs	r3, #0
   1a6d6:	2500      	movs	r5, #0
   1a6d8:	0312      	lsls	r2, r2, #12
   1a6da:	4699      	mov	r9, r3
   1a6dc:	4c05      	ldr	r4, [pc, #20]	; (1a6f4 <__aeabi_dmul+0x1dc>)
   1a6de:	e782      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a6e0:	465c      	mov	r4, fp
   1a6e2:	464b      	mov	r3, r9
   1a6e4:	9802      	ldr	r0, [sp, #8]
   1a6e6:	e76f      	b.n	1a5c8 <__aeabi_dmul+0xb0>
   1a6e8:	465c      	mov	r4, fp
   1a6ea:	464b      	mov	r3, r9
   1a6ec:	9501      	str	r5, [sp, #4]
   1a6ee:	9802      	ldr	r0, [sp, #8]
   1a6f0:	e76a      	b.n	1a5c8 <__aeabi_dmul+0xb0>
   1a6f2:	46c0      	nop			; (mov r8, r8)
   1a6f4:	000007ff 	.word	0x000007ff
   1a6f8:	fffffc01 	.word	0xfffffc01
   1a6fc:	0001bee0 	.word	0x0001bee0
   1a700:	800fffff 	.word	0x800fffff
   1a704:	fffffc0d 	.word	0xfffffc0d
   1a708:	464a      	mov	r2, r9
   1a70a:	4649      	mov	r1, r9
   1a70c:	0c17      	lsrs	r7, r2, #16
   1a70e:	0c1a      	lsrs	r2, r3, #16
   1a710:	041b      	lsls	r3, r3, #16
   1a712:	0c1b      	lsrs	r3, r3, #16
   1a714:	0408      	lsls	r0, r1, #16
   1a716:	0019      	movs	r1, r3
   1a718:	0c00      	lsrs	r0, r0, #16
   1a71a:	4341      	muls	r1, r0
   1a71c:	0015      	movs	r5, r2
   1a71e:	4688      	mov	r8, r1
   1a720:	0019      	movs	r1, r3
   1a722:	437d      	muls	r5, r7
   1a724:	4379      	muls	r1, r7
   1a726:	9503      	str	r5, [sp, #12]
   1a728:	4689      	mov	r9, r1
   1a72a:	0029      	movs	r1, r5
   1a72c:	0015      	movs	r5, r2
   1a72e:	4345      	muls	r5, r0
   1a730:	444d      	add	r5, r9
   1a732:	9502      	str	r5, [sp, #8]
   1a734:	4645      	mov	r5, r8
   1a736:	0c2d      	lsrs	r5, r5, #16
   1a738:	46aa      	mov	sl, r5
   1a73a:	9d02      	ldr	r5, [sp, #8]
   1a73c:	4455      	add	r5, sl
   1a73e:	45a9      	cmp	r9, r5
   1a740:	d906      	bls.n	1a750 <__aeabi_dmul+0x238>
   1a742:	468a      	mov	sl, r1
   1a744:	2180      	movs	r1, #128	; 0x80
   1a746:	0249      	lsls	r1, r1, #9
   1a748:	4689      	mov	r9, r1
   1a74a:	44ca      	add	sl, r9
   1a74c:	4651      	mov	r1, sl
   1a74e:	9103      	str	r1, [sp, #12]
   1a750:	0c29      	lsrs	r1, r5, #16
   1a752:	9104      	str	r1, [sp, #16]
   1a754:	4641      	mov	r1, r8
   1a756:	0409      	lsls	r1, r1, #16
   1a758:	042d      	lsls	r5, r5, #16
   1a75a:	0c09      	lsrs	r1, r1, #16
   1a75c:	4688      	mov	r8, r1
   1a75e:	0029      	movs	r1, r5
   1a760:	0c25      	lsrs	r5, r4, #16
   1a762:	0424      	lsls	r4, r4, #16
   1a764:	4441      	add	r1, r8
   1a766:	0c24      	lsrs	r4, r4, #16
   1a768:	9105      	str	r1, [sp, #20]
   1a76a:	0021      	movs	r1, r4
   1a76c:	4341      	muls	r1, r0
   1a76e:	4688      	mov	r8, r1
   1a770:	0021      	movs	r1, r4
   1a772:	4379      	muls	r1, r7
   1a774:	468a      	mov	sl, r1
   1a776:	4368      	muls	r0, r5
   1a778:	4641      	mov	r1, r8
   1a77a:	4450      	add	r0, sl
   1a77c:	4681      	mov	r9, r0
   1a77e:	0c08      	lsrs	r0, r1, #16
   1a780:	4448      	add	r0, r9
   1a782:	436f      	muls	r7, r5
   1a784:	4582      	cmp	sl, r0
   1a786:	d903      	bls.n	1a790 <__aeabi_dmul+0x278>
   1a788:	2180      	movs	r1, #128	; 0x80
   1a78a:	0249      	lsls	r1, r1, #9
   1a78c:	4689      	mov	r9, r1
   1a78e:	444f      	add	r7, r9
   1a790:	0c01      	lsrs	r1, r0, #16
   1a792:	4689      	mov	r9, r1
   1a794:	0039      	movs	r1, r7
   1a796:	4449      	add	r1, r9
   1a798:	9102      	str	r1, [sp, #8]
   1a79a:	4641      	mov	r1, r8
   1a79c:	040f      	lsls	r7, r1, #16
   1a79e:	9904      	ldr	r1, [sp, #16]
   1a7a0:	0c3f      	lsrs	r7, r7, #16
   1a7a2:	4688      	mov	r8, r1
   1a7a4:	0400      	lsls	r0, r0, #16
   1a7a6:	19c0      	adds	r0, r0, r7
   1a7a8:	4480      	add	r8, r0
   1a7aa:	4641      	mov	r1, r8
   1a7ac:	9104      	str	r1, [sp, #16]
   1a7ae:	4659      	mov	r1, fp
   1a7b0:	0c0f      	lsrs	r7, r1, #16
   1a7b2:	0409      	lsls	r1, r1, #16
   1a7b4:	0c09      	lsrs	r1, r1, #16
   1a7b6:	4688      	mov	r8, r1
   1a7b8:	4359      	muls	r1, r3
   1a7ba:	468a      	mov	sl, r1
   1a7bc:	0039      	movs	r1, r7
   1a7be:	4351      	muls	r1, r2
   1a7c0:	4689      	mov	r9, r1
   1a7c2:	4641      	mov	r1, r8
   1a7c4:	434a      	muls	r2, r1
   1a7c6:	4651      	mov	r1, sl
   1a7c8:	0c09      	lsrs	r1, r1, #16
   1a7ca:	468b      	mov	fp, r1
   1a7cc:	437b      	muls	r3, r7
   1a7ce:	18d2      	adds	r2, r2, r3
   1a7d0:	445a      	add	r2, fp
   1a7d2:	4293      	cmp	r3, r2
   1a7d4:	d903      	bls.n	1a7de <__aeabi_dmul+0x2c6>
   1a7d6:	2380      	movs	r3, #128	; 0x80
   1a7d8:	025b      	lsls	r3, r3, #9
   1a7da:	469b      	mov	fp, r3
   1a7dc:	44d9      	add	r9, fp
   1a7de:	4651      	mov	r1, sl
   1a7e0:	0409      	lsls	r1, r1, #16
   1a7e2:	0c09      	lsrs	r1, r1, #16
   1a7e4:	468a      	mov	sl, r1
   1a7e6:	4641      	mov	r1, r8
   1a7e8:	4361      	muls	r1, r4
   1a7ea:	437c      	muls	r4, r7
   1a7ec:	0c13      	lsrs	r3, r2, #16
   1a7ee:	0412      	lsls	r2, r2, #16
   1a7f0:	444b      	add	r3, r9
   1a7f2:	4452      	add	r2, sl
   1a7f4:	46a1      	mov	r9, r4
   1a7f6:	468a      	mov	sl, r1
   1a7f8:	003c      	movs	r4, r7
   1a7fa:	4641      	mov	r1, r8
   1a7fc:	436c      	muls	r4, r5
   1a7fe:	434d      	muls	r5, r1
   1a800:	4651      	mov	r1, sl
   1a802:	444d      	add	r5, r9
   1a804:	0c0f      	lsrs	r7, r1, #16
   1a806:	197d      	adds	r5, r7, r5
   1a808:	45a9      	cmp	r9, r5
   1a80a:	d903      	bls.n	1a814 <__aeabi_dmul+0x2fc>
   1a80c:	2180      	movs	r1, #128	; 0x80
   1a80e:	0249      	lsls	r1, r1, #9
   1a810:	4688      	mov	r8, r1
   1a812:	4444      	add	r4, r8
   1a814:	9f04      	ldr	r7, [sp, #16]
   1a816:	9903      	ldr	r1, [sp, #12]
   1a818:	46b8      	mov	r8, r7
   1a81a:	4441      	add	r1, r8
   1a81c:	468b      	mov	fp, r1
   1a81e:	4583      	cmp	fp, r0
   1a820:	4180      	sbcs	r0, r0
   1a822:	4241      	negs	r1, r0
   1a824:	4688      	mov	r8, r1
   1a826:	4651      	mov	r1, sl
   1a828:	0408      	lsls	r0, r1, #16
   1a82a:	042f      	lsls	r7, r5, #16
   1a82c:	0c00      	lsrs	r0, r0, #16
   1a82e:	183f      	adds	r7, r7, r0
   1a830:	4658      	mov	r0, fp
   1a832:	9902      	ldr	r1, [sp, #8]
   1a834:	1810      	adds	r0, r2, r0
   1a836:	4689      	mov	r9, r1
   1a838:	4290      	cmp	r0, r2
   1a83a:	4192      	sbcs	r2, r2
   1a83c:	444f      	add	r7, r9
   1a83e:	46ba      	mov	sl, r7
   1a840:	4252      	negs	r2, r2
   1a842:	4699      	mov	r9, r3
   1a844:	4693      	mov	fp, r2
   1a846:	44c2      	add	sl, r8
   1a848:	44d1      	add	r9, sl
   1a84a:	44cb      	add	fp, r9
   1a84c:	428f      	cmp	r7, r1
   1a84e:	41bf      	sbcs	r7, r7
   1a850:	45c2      	cmp	sl, r8
   1a852:	4189      	sbcs	r1, r1
   1a854:	4599      	cmp	r9, r3
   1a856:	419b      	sbcs	r3, r3
   1a858:	4593      	cmp	fp, r2
   1a85a:	4192      	sbcs	r2, r2
   1a85c:	427f      	negs	r7, r7
   1a85e:	4249      	negs	r1, r1
   1a860:	0c2d      	lsrs	r5, r5, #16
   1a862:	4252      	negs	r2, r2
   1a864:	430f      	orrs	r7, r1
   1a866:	425b      	negs	r3, r3
   1a868:	4313      	orrs	r3, r2
   1a86a:	197f      	adds	r7, r7, r5
   1a86c:	18ff      	adds	r7, r7, r3
   1a86e:	465b      	mov	r3, fp
   1a870:	193c      	adds	r4, r7, r4
   1a872:	0ddb      	lsrs	r3, r3, #23
   1a874:	9a05      	ldr	r2, [sp, #20]
   1a876:	0264      	lsls	r4, r4, #9
   1a878:	431c      	orrs	r4, r3
   1a87a:	0243      	lsls	r3, r0, #9
   1a87c:	4313      	orrs	r3, r2
   1a87e:	1e5d      	subs	r5, r3, #1
   1a880:	41ab      	sbcs	r3, r5
   1a882:	465a      	mov	r2, fp
   1a884:	0dc0      	lsrs	r0, r0, #23
   1a886:	4303      	orrs	r3, r0
   1a888:	0252      	lsls	r2, r2, #9
   1a88a:	4313      	orrs	r3, r2
   1a88c:	01e2      	lsls	r2, r4, #7
   1a88e:	d556      	bpl.n	1a93e <__aeabi_dmul+0x426>
   1a890:	2001      	movs	r0, #1
   1a892:	085a      	lsrs	r2, r3, #1
   1a894:	4003      	ands	r3, r0
   1a896:	4313      	orrs	r3, r2
   1a898:	07e2      	lsls	r2, r4, #31
   1a89a:	4313      	orrs	r3, r2
   1a89c:	0864      	lsrs	r4, r4, #1
   1a89e:	485a      	ldr	r0, [pc, #360]	; (1aa08 <__aeabi_dmul+0x4f0>)
   1a8a0:	4460      	add	r0, ip
   1a8a2:	2800      	cmp	r0, #0
   1a8a4:	dd4d      	ble.n	1a942 <__aeabi_dmul+0x42a>
   1a8a6:	075a      	lsls	r2, r3, #29
   1a8a8:	d009      	beq.n	1a8be <__aeabi_dmul+0x3a6>
   1a8aa:	220f      	movs	r2, #15
   1a8ac:	401a      	ands	r2, r3
   1a8ae:	2a04      	cmp	r2, #4
   1a8b0:	d005      	beq.n	1a8be <__aeabi_dmul+0x3a6>
   1a8b2:	1d1a      	adds	r2, r3, #4
   1a8b4:	429a      	cmp	r2, r3
   1a8b6:	419b      	sbcs	r3, r3
   1a8b8:	425b      	negs	r3, r3
   1a8ba:	18e4      	adds	r4, r4, r3
   1a8bc:	0013      	movs	r3, r2
   1a8be:	01e2      	lsls	r2, r4, #7
   1a8c0:	d504      	bpl.n	1a8cc <__aeabi_dmul+0x3b4>
   1a8c2:	2080      	movs	r0, #128	; 0x80
   1a8c4:	4a51      	ldr	r2, [pc, #324]	; (1aa0c <__aeabi_dmul+0x4f4>)
   1a8c6:	00c0      	lsls	r0, r0, #3
   1a8c8:	4014      	ands	r4, r2
   1a8ca:	4460      	add	r0, ip
   1a8cc:	4a50      	ldr	r2, [pc, #320]	; (1aa10 <__aeabi_dmul+0x4f8>)
   1a8ce:	4290      	cmp	r0, r2
   1a8d0:	dd00      	ble.n	1a8d4 <__aeabi_dmul+0x3bc>
   1a8d2:	e6e3      	b.n	1a69c <__aeabi_dmul+0x184>
   1a8d4:	2501      	movs	r5, #1
   1a8d6:	08db      	lsrs	r3, r3, #3
   1a8d8:	0762      	lsls	r2, r4, #29
   1a8da:	431a      	orrs	r2, r3
   1a8dc:	0264      	lsls	r4, r4, #9
   1a8de:	9b01      	ldr	r3, [sp, #4]
   1a8e0:	4691      	mov	r9, r2
   1a8e2:	0b22      	lsrs	r2, r4, #12
   1a8e4:	0544      	lsls	r4, r0, #21
   1a8e6:	0d64      	lsrs	r4, r4, #21
   1a8e8:	401d      	ands	r5, r3
   1a8ea:	e67c      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a8ec:	2280      	movs	r2, #128	; 0x80
   1a8ee:	4659      	mov	r1, fp
   1a8f0:	0312      	lsls	r2, r2, #12
   1a8f2:	4211      	tst	r1, r2
   1a8f4:	d008      	beq.n	1a908 <__aeabi_dmul+0x3f0>
   1a8f6:	4214      	tst	r4, r2
   1a8f8:	d106      	bne.n	1a908 <__aeabi_dmul+0x3f0>
   1a8fa:	4322      	orrs	r2, r4
   1a8fc:	0312      	lsls	r2, r2, #12
   1a8fe:	0b12      	lsrs	r2, r2, #12
   1a900:	4645      	mov	r5, r8
   1a902:	4699      	mov	r9, r3
   1a904:	4c43      	ldr	r4, [pc, #268]	; (1aa14 <__aeabi_dmul+0x4fc>)
   1a906:	e66e      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a908:	465b      	mov	r3, fp
   1a90a:	431a      	orrs	r2, r3
   1a90c:	0312      	lsls	r2, r2, #12
   1a90e:	0b12      	lsrs	r2, r2, #12
   1a910:	4c40      	ldr	r4, [pc, #256]	; (1aa14 <__aeabi_dmul+0x4fc>)
   1a912:	e668      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a914:	0003      	movs	r3, r0
   1a916:	4654      	mov	r4, sl
   1a918:	3b28      	subs	r3, #40	; 0x28
   1a91a:	409c      	lsls	r4, r3
   1a91c:	2300      	movs	r3, #0
   1a91e:	e6b9      	b.n	1a694 <__aeabi_dmul+0x17c>
   1a920:	f000 fd1a 	bl	1b358 <__clzsi2>
   1a924:	3020      	adds	r0, #32
   1a926:	e6a6      	b.n	1a676 <__aeabi_dmul+0x15e>
   1a928:	0003      	movs	r3, r0
   1a92a:	3b28      	subs	r3, #40	; 0x28
   1a92c:	409f      	lsls	r7, r3
   1a92e:	2300      	movs	r3, #0
   1a930:	46bb      	mov	fp, r7
   1a932:	4699      	mov	r9, r3
   1a934:	e68a      	b.n	1a64c <__aeabi_dmul+0x134>
   1a936:	f000 fd0f 	bl	1b358 <__clzsi2>
   1a93a:	3020      	adds	r0, #32
   1a93c:	e674      	b.n	1a628 <__aeabi_dmul+0x110>
   1a93e:	46b4      	mov	ip, r6
   1a940:	e7ad      	b.n	1a89e <__aeabi_dmul+0x386>
   1a942:	2501      	movs	r5, #1
   1a944:	1a2a      	subs	r2, r5, r0
   1a946:	2a38      	cmp	r2, #56	; 0x38
   1a948:	dd06      	ble.n	1a958 <__aeabi_dmul+0x440>
   1a94a:	9b01      	ldr	r3, [sp, #4]
   1a94c:	2400      	movs	r4, #0
   1a94e:	401d      	ands	r5, r3
   1a950:	2300      	movs	r3, #0
   1a952:	2200      	movs	r2, #0
   1a954:	4699      	mov	r9, r3
   1a956:	e646      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a958:	2a1f      	cmp	r2, #31
   1a95a:	dc21      	bgt.n	1a9a0 <__aeabi_dmul+0x488>
   1a95c:	2520      	movs	r5, #32
   1a95e:	0020      	movs	r0, r4
   1a960:	1aad      	subs	r5, r5, r2
   1a962:	001e      	movs	r6, r3
   1a964:	40ab      	lsls	r3, r5
   1a966:	40a8      	lsls	r0, r5
   1a968:	40d6      	lsrs	r6, r2
   1a96a:	1e5d      	subs	r5, r3, #1
   1a96c:	41ab      	sbcs	r3, r5
   1a96e:	4330      	orrs	r0, r6
   1a970:	4318      	orrs	r0, r3
   1a972:	40d4      	lsrs	r4, r2
   1a974:	0743      	lsls	r3, r0, #29
   1a976:	d009      	beq.n	1a98c <__aeabi_dmul+0x474>
   1a978:	230f      	movs	r3, #15
   1a97a:	4003      	ands	r3, r0
   1a97c:	2b04      	cmp	r3, #4
   1a97e:	d005      	beq.n	1a98c <__aeabi_dmul+0x474>
   1a980:	0003      	movs	r3, r0
   1a982:	1d18      	adds	r0, r3, #4
   1a984:	4298      	cmp	r0, r3
   1a986:	419b      	sbcs	r3, r3
   1a988:	425b      	negs	r3, r3
   1a98a:	18e4      	adds	r4, r4, r3
   1a98c:	0223      	lsls	r3, r4, #8
   1a98e:	d521      	bpl.n	1a9d4 <__aeabi_dmul+0x4bc>
   1a990:	2501      	movs	r5, #1
   1a992:	9b01      	ldr	r3, [sp, #4]
   1a994:	2401      	movs	r4, #1
   1a996:	401d      	ands	r5, r3
   1a998:	2300      	movs	r3, #0
   1a99a:	2200      	movs	r2, #0
   1a99c:	4699      	mov	r9, r3
   1a99e:	e622      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a9a0:	251f      	movs	r5, #31
   1a9a2:	0021      	movs	r1, r4
   1a9a4:	426d      	negs	r5, r5
   1a9a6:	1a28      	subs	r0, r5, r0
   1a9a8:	40c1      	lsrs	r1, r0
   1a9aa:	0008      	movs	r0, r1
   1a9ac:	2a20      	cmp	r2, #32
   1a9ae:	d01d      	beq.n	1a9ec <__aeabi_dmul+0x4d4>
   1a9b0:	355f      	adds	r5, #95	; 0x5f
   1a9b2:	1aaa      	subs	r2, r5, r2
   1a9b4:	4094      	lsls	r4, r2
   1a9b6:	4323      	orrs	r3, r4
   1a9b8:	1e5c      	subs	r4, r3, #1
   1a9ba:	41a3      	sbcs	r3, r4
   1a9bc:	2507      	movs	r5, #7
   1a9be:	4303      	orrs	r3, r0
   1a9c0:	401d      	ands	r5, r3
   1a9c2:	2200      	movs	r2, #0
   1a9c4:	2d00      	cmp	r5, #0
   1a9c6:	d009      	beq.n	1a9dc <__aeabi_dmul+0x4c4>
   1a9c8:	220f      	movs	r2, #15
   1a9ca:	2400      	movs	r4, #0
   1a9cc:	401a      	ands	r2, r3
   1a9ce:	0018      	movs	r0, r3
   1a9d0:	2a04      	cmp	r2, #4
   1a9d2:	d1d6      	bne.n	1a982 <__aeabi_dmul+0x46a>
   1a9d4:	0003      	movs	r3, r0
   1a9d6:	0765      	lsls	r5, r4, #29
   1a9d8:	0264      	lsls	r4, r4, #9
   1a9da:	0b22      	lsrs	r2, r4, #12
   1a9dc:	08db      	lsrs	r3, r3, #3
   1a9de:	432b      	orrs	r3, r5
   1a9e0:	2501      	movs	r5, #1
   1a9e2:	4699      	mov	r9, r3
   1a9e4:	9b01      	ldr	r3, [sp, #4]
   1a9e6:	2400      	movs	r4, #0
   1a9e8:	401d      	ands	r5, r3
   1a9ea:	e5fc      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1a9ec:	2400      	movs	r4, #0
   1a9ee:	e7e2      	b.n	1a9b6 <__aeabi_dmul+0x49e>
   1a9f0:	2280      	movs	r2, #128	; 0x80
   1a9f2:	2501      	movs	r5, #1
   1a9f4:	0312      	lsls	r2, r2, #12
   1a9f6:	4322      	orrs	r2, r4
   1a9f8:	9901      	ldr	r1, [sp, #4]
   1a9fa:	0312      	lsls	r2, r2, #12
   1a9fc:	0b12      	lsrs	r2, r2, #12
   1a9fe:	400d      	ands	r5, r1
   1aa00:	4699      	mov	r9, r3
   1aa02:	4c04      	ldr	r4, [pc, #16]	; (1aa14 <__aeabi_dmul+0x4fc>)
   1aa04:	e5ef      	b.n	1a5e6 <__aeabi_dmul+0xce>
   1aa06:	46c0      	nop			; (mov r8, r8)
   1aa08:	000003ff 	.word	0x000003ff
   1aa0c:	feffffff 	.word	0xfeffffff
   1aa10:	000007fe 	.word	0x000007fe
   1aa14:	000007ff 	.word	0x000007ff

0001aa18 <__aeabi_dsub>:
   1aa18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa1a:	4646      	mov	r6, r8
   1aa1c:	46d6      	mov	lr, sl
   1aa1e:	464f      	mov	r7, r9
   1aa20:	030c      	lsls	r4, r1, #12
   1aa22:	b5c0      	push	{r6, r7, lr}
   1aa24:	0fcd      	lsrs	r5, r1, #31
   1aa26:	004e      	lsls	r6, r1, #1
   1aa28:	0a61      	lsrs	r1, r4, #9
   1aa2a:	0f44      	lsrs	r4, r0, #29
   1aa2c:	430c      	orrs	r4, r1
   1aa2e:	00c1      	lsls	r1, r0, #3
   1aa30:	0058      	lsls	r0, r3, #1
   1aa32:	0d40      	lsrs	r0, r0, #21
   1aa34:	4684      	mov	ip, r0
   1aa36:	468a      	mov	sl, r1
   1aa38:	000f      	movs	r7, r1
   1aa3a:	0319      	lsls	r1, r3, #12
   1aa3c:	0f50      	lsrs	r0, r2, #29
   1aa3e:	0a49      	lsrs	r1, r1, #9
   1aa40:	4301      	orrs	r1, r0
   1aa42:	48c6      	ldr	r0, [pc, #792]	; (1ad5c <__aeabi_dsub+0x344>)
   1aa44:	0d76      	lsrs	r6, r6, #21
   1aa46:	46a8      	mov	r8, r5
   1aa48:	0fdb      	lsrs	r3, r3, #31
   1aa4a:	00d2      	lsls	r2, r2, #3
   1aa4c:	4584      	cmp	ip, r0
   1aa4e:	d100      	bne.n	1aa52 <__aeabi_dsub+0x3a>
   1aa50:	e0d8      	b.n	1ac04 <__aeabi_dsub+0x1ec>
   1aa52:	2001      	movs	r0, #1
   1aa54:	4043      	eors	r3, r0
   1aa56:	42ab      	cmp	r3, r5
   1aa58:	d100      	bne.n	1aa5c <__aeabi_dsub+0x44>
   1aa5a:	e0a6      	b.n	1abaa <__aeabi_dsub+0x192>
   1aa5c:	4660      	mov	r0, ip
   1aa5e:	1a35      	subs	r5, r6, r0
   1aa60:	2d00      	cmp	r5, #0
   1aa62:	dc00      	bgt.n	1aa66 <__aeabi_dsub+0x4e>
   1aa64:	e105      	b.n	1ac72 <__aeabi_dsub+0x25a>
   1aa66:	2800      	cmp	r0, #0
   1aa68:	d110      	bne.n	1aa8c <__aeabi_dsub+0x74>
   1aa6a:	000b      	movs	r3, r1
   1aa6c:	4313      	orrs	r3, r2
   1aa6e:	d100      	bne.n	1aa72 <__aeabi_dsub+0x5a>
   1aa70:	e0d7      	b.n	1ac22 <__aeabi_dsub+0x20a>
   1aa72:	1e6b      	subs	r3, r5, #1
   1aa74:	2b00      	cmp	r3, #0
   1aa76:	d000      	beq.n	1aa7a <__aeabi_dsub+0x62>
   1aa78:	e14b      	b.n	1ad12 <__aeabi_dsub+0x2fa>
   1aa7a:	4653      	mov	r3, sl
   1aa7c:	1a9f      	subs	r7, r3, r2
   1aa7e:	45ba      	cmp	sl, r7
   1aa80:	4180      	sbcs	r0, r0
   1aa82:	1a64      	subs	r4, r4, r1
   1aa84:	4240      	negs	r0, r0
   1aa86:	1a24      	subs	r4, r4, r0
   1aa88:	2601      	movs	r6, #1
   1aa8a:	e01e      	b.n	1aaca <__aeabi_dsub+0xb2>
   1aa8c:	4bb3      	ldr	r3, [pc, #716]	; (1ad5c <__aeabi_dsub+0x344>)
   1aa8e:	429e      	cmp	r6, r3
   1aa90:	d048      	beq.n	1ab24 <__aeabi_dsub+0x10c>
   1aa92:	2380      	movs	r3, #128	; 0x80
   1aa94:	041b      	lsls	r3, r3, #16
   1aa96:	4319      	orrs	r1, r3
   1aa98:	2d38      	cmp	r5, #56	; 0x38
   1aa9a:	dd00      	ble.n	1aa9e <__aeabi_dsub+0x86>
   1aa9c:	e119      	b.n	1acd2 <__aeabi_dsub+0x2ba>
   1aa9e:	2d1f      	cmp	r5, #31
   1aaa0:	dd00      	ble.n	1aaa4 <__aeabi_dsub+0x8c>
   1aaa2:	e14c      	b.n	1ad3e <__aeabi_dsub+0x326>
   1aaa4:	2320      	movs	r3, #32
   1aaa6:	000f      	movs	r7, r1
   1aaa8:	1b5b      	subs	r3, r3, r5
   1aaaa:	0010      	movs	r0, r2
   1aaac:	409a      	lsls	r2, r3
   1aaae:	409f      	lsls	r7, r3
   1aab0:	40e8      	lsrs	r0, r5
   1aab2:	1e53      	subs	r3, r2, #1
   1aab4:	419a      	sbcs	r2, r3
   1aab6:	40e9      	lsrs	r1, r5
   1aab8:	4307      	orrs	r7, r0
   1aaba:	4317      	orrs	r7, r2
   1aabc:	4653      	mov	r3, sl
   1aabe:	1bdf      	subs	r7, r3, r7
   1aac0:	1a61      	subs	r1, r4, r1
   1aac2:	45ba      	cmp	sl, r7
   1aac4:	41a4      	sbcs	r4, r4
   1aac6:	4264      	negs	r4, r4
   1aac8:	1b0c      	subs	r4, r1, r4
   1aaca:	0223      	lsls	r3, r4, #8
   1aacc:	d400      	bmi.n	1aad0 <__aeabi_dsub+0xb8>
   1aace:	e0c5      	b.n	1ac5c <__aeabi_dsub+0x244>
   1aad0:	0264      	lsls	r4, r4, #9
   1aad2:	0a65      	lsrs	r5, r4, #9
   1aad4:	2d00      	cmp	r5, #0
   1aad6:	d100      	bne.n	1aada <__aeabi_dsub+0xc2>
   1aad8:	e0f6      	b.n	1acc8 <__aeabi_dsub+0x2b0>
   1aada:	0028      	movs	r0, r5
   1aadc:	f000 fc3c 	bl	1b358 <__clzsi2>
   1aae0:	0003      	movs	r3, r0
   1aae2:	3b08      	subs	r3, #8
   1aae4:	2b1f      	cmp	r3, #31
   1aae6:	dd00      	ble.n	1aaea <__aeabi_dsub+0xd2>
   1aae8:	e0e9      	b.n	1acbe <__aeabi_dsub+0x2a6>
   1aaea:	2220      	movs	r2, #32
   1aaec:	003c      	movs	r4, r7
   1aaee:	1ad2      	subs	r2, r2, r3
   1aaf0:	409d      	lsls	r5, r3
   1aaf2:	40d4      	lsrs	r4, r2
   1aaf4:	409f      	lsls	r7, r3
   1aaf6:	4325      	orrs	r5, r4
   1aaf8:	429e      	cmp	r6, r3
   1aafa:	dd00      	ble.n	1aafe <__aeabi_dsub+0xe6>
   1aafc:	e0db      	b.n	1acb6 <__aeabi_dsub+0x29e>
   1aafe:	1b9e      	subs	r6, r3, r6
   1ab00:	1c73      	adds	r3, r6, #1
   1ab02:	2b1f      	cmp	r3, #31
   1ab04:	dd00      	ble.n	1ab08 <__aeabi_dsub+0xf0>
   1ab06:	e10a      	b.n	1ad1e <__aeabi_dsub+0x306>
   1ab08:	2220      	movs	r2, #32
   1ab0a:	0038      	movs	r0, r7
   1ab0c:	1ad2      	subs	r2, r2, r3
   1ab0e:	0029      	movs	r1, r5
   1ab10:	4097      	lsls	r7, r2
   1ab12:	002c      	movs	r4, r5
   1ab14:	4091      	lsls	r1, r2
   1ab16:	40d8      	lsrs	r0, r3
   1ab18:	1e7a      	subs	r2, r7, #1
   1ab1a:	4197      	sbcs	r7, r2
   1ab1c:	40dc      	lsrs	r4, r3
   1ab1e:	2600      	movs	r6, #0
   1ab20:	4301      	orrs	r1, r0
   1ab22:	430f      	orrs	r7, r1
   1ab24:	077b      	lsls	r3, r7, #29
   1ab26:	d009      	beq.n	1ab3c <__aeabi_dsub+0x124>
   1ab28:	230f      	movs	r3, #15
   1ab2a:	403b      	ands	r3, r7
   1ab2c:	2b04      	cmp	r3, #4
   1ab2e:	d005      	beq.n	1ab3c <__aeabi_dsub+0x124>
   1ab30:	1d3b      	adds	r3, r7, #4
   1ab32:	42bb      	cmp	r3, r7
   1ab34:	41bf      	sbcs	r7, r7
   1ab36:	427f      	negs	r7, r7
   1ab38:	19e4      	adds	r4, r4, r7
   1ab3a:	001f      	movs	r7, r3
   1ab3c:	0223      	lsls	r3, r4, #8
   1ab3e:	d525      	bpl.n	1ab8c <__aeabi_dsub+0x174>
   1ab40:	4b86      	ldr	r3, [pc, #536]	; (1ad5c <__aeabi_dsub+0x344>)
   1ab42:	3601      	adds	r6, #1
   1ab44:	429e      	cmp	r6, r3
   1ab46:	d100      	bne.n	1ab4a <__aeabi_dsub+0x132>
   1ab48:	e0af      	b.n	1acaa <__aeabi_dsub+0x292>
   1ab4a:	4b85      	ldr	r3, [pc, #532]	; (1ad60 <__aeabi_dsub+0x348>)
   1ab4c:	2501      	movs	r5, #1
   1ab4e:	401c      	ands	r4, r3
   1ab50:	4643      	mov	r3, r8
   1ab52:	0762      	lsls	r2, r4, #29
   1ab54:	08ff      	lsrs	r7, r7, #3
   1ab56:	0264      	lsls	r4, r4, #9
   1ab58:	0576      	lsls	r6, r6, #21
   1ab5a:	4317      	orrs	r7, r2
   1ab5c:	0b24      	lsrs	r4, r4, #12
   1ab5e:	0d76      	lsrs	r6, r6, #21
   1ab60:	401d      	ands	r5, r3
   1ab62:	2100      	movs	r1, #0
   1ab64:	0324      	lsls	r4, r4, #12
   1ab66:	0b23      	lsrs	r3, r4, #12
   1ab68:	0d0c      	lsrs	r4, r1, #20
   1ab6a:	4a7e      	ldr	r2, [pc, #504]	; (1ad64 <__aeabi_dsub+0x34c>)
   1ab6c:	0524      	lsls	r4, r4, #20
   1ab6e:	431c      	orrs	r4, r3
   1ab70:	4014      	ands	r4, r2
   1ab72:	0533      	lsls	r3, r6, #20
   1ab74:	4323      	orrs	r3, r4
   1ab76:	005b      	lsls	r3, r3, #1
   1ab78:	07ed      	lsls	r5, r5, #31
   1ab7a:	085b      	lsrs	r3, r3, #1
   1ab7c:	432b      	orrs	r3, r5
   1ab7e:	0038      	movs	r0, r7
   1ab80:	0019      	movs	r1, r3
   1ab82:	bc1c      	pop	{r2, r3, r4}
   1ab84:	4690      	mov	r8, r2
   1ab86:	4699      	mov	r9, r3
   1ab88:	46a2      	mov	sl, r4
   1ab8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab8c:	2501      	movs	r5, #1
   1ab8e:	4643      	mov	r3, r8
   1ab90:	0762      	lsls	r2, r4, #29
   1ab92:	08ff      	lsrs	r7, r7, #3
   1ab94:	4317      	orrs	r7, r2
   1ab96:	08e4      	lsrs	r4, r4, #3
   1ab98:	401d      	ands	r5, r3
   1ab9a:	4b70      	ldr	r3, [pc, #448]	; (1ad5c <__aeabi_dsub+0x344>)
   1ab9c:	429e      	cmp	r6, r3
   1ab9e:	d036      	beq.n	1ac0e <__aeabi_dsub+0x1f6>
   1aba0:	0324      	lsls	r4, r4, #12
   1aba2:	0576      	lsls	r6, r6, #21
   1aba4:	0b24      	lsrs	r4, r4, #12
   1aba6:	0d76      	lsrs	r6, r6, #21
   1aba8:	e7db      	b.n	1ab62 <__aeabi_dsub+0x14a>
   1abaa:	4663      	mov	r3, ip
   1abac:	1af3      	subs	r3, r6, r3
   1abae:	2b00      	cmp	r3, #0
   1abb0:	dc00      	bgt.n	1abb4 <__aeabi_dsub+0x19c>
   1abb2:	e094      	b.n	1acde <__aeabi_dsub+0x2c6>
   1abb4:	4660      	mov	r0, ip
   1abb6:	2800      	cmp	r0, #0
   1abb8:	d035      	beq.n	1ac26 <__aeabi_dsub+0x20e>
   1abba:	4868      	ldr	r0, [pc, #416]	; (1ad5c <__aeabi_dsub+0x344>)
   1abbc:	4286      	cmp	r6, r0
   1abbe:	d0b1      	beq.n	1ab24 <__aeabi_dsub+0x10c>
   1abc0:	2780      	movs	r7, #128	; 0x80
   1abc2:	043f      	lsls	r7, r7, #16
   1abc4:	4339      	orrs	r1, r7
   1abc6:	2b38      	cmp	r3, #56	; 0x38
   1abc8:	dc00      	bgt.n	1abcc <__aeabi_dsub+0x1b4>
   1abca:	e0fd      	b.n	1adc8 <__aeabi_dsub+0x3b0>
   1abcc:	430a      	orrs	r2, r1
   1abce:	0017      	movs	r7, r2
   1abd0:	2100      	movs	r1, #0
   1abd2:	1e7a      	subs	r2, r7, #1
   1abd4:	4197      	sbcs	r7, r2
   1abd6:	4457      	add	r7, sl
   1abd8:	4557      	cmp	r7, sl
   1abda:	4180      	sbcs	r0, r0
   1abdc:	1909      	adds	r1, r1, r4
   1abde:	4244      	negs	r4, r0
   1abe0:	190c      	adds	r4, r1, r4
   1abe2:	0223      	lsls	r3, r4, #8
   1abe4:	d53a      	bpl.n	1ac5c <__aeabi_dsub+0x244>
   1abe6:	4b5d      	ldr	r3, [pc, #372]	; (1ad5c <__aeabi_dsub+0x344>)
   1abe8:	3601      	adds	r6, #1
   1abea:	429e      	cmp	r6, r3
   1abec:	d100      	bne.n	1abf0 <__aeabi_dsub+0x1d8>
   1abee:	e14b      	b.n	1ae88 <__aeabi_dsub+0x470>
   1abf0:	2201      	movs	r2, #1
   1abf2:	4b5b      	ldr	r3, [pc, #364]	; (1ad60 <__aeabi_dsub+0x348>)
   1abf4:	401c      	ands	r4, r3
   1abf6:	087b      	lsrs	r3, r7, #1
   1abf8:	4017      	ands	r7, r2
   1abfa:	431f      	orrs	r7, r3
   1abfc:	07e2      	lsls	r2, r4, #31
   1abfe:	4317      	orrs	r7, r2
   1ac00:	0864      	lsrs	r4, r4, #1
   1ac02:	e78f      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ac04:	0008      	movs	r0, r1
   1ac06:	4310      	orrs	r0, r2
   1ac08:	d000      	beq.n	1ac0c <__aeabi_dsub+0x1f4>
   1ac0a:	e724      	b.n	1aa56 <__aeabi_dsub+0x3e>
   1ac0c:	e721      	b.n	1aa52 <__aeabi_dsub+0x3a>
   1ac0e:	0023      	movs	r3, r4
   1ac10:	433b      	orrs	r3, r7
   1ac12:	d100      	bne.n	1ac16 <__aeabi_dsub+0x1fe>
   1ac14:	e1b9      	b.n	1af8a <__aeabi_dsub+0x572>
   1ac16:	2280      	movs	r2, #128	; 0x80
   1ac18:	0312      	lsls	r2, r2, #12
   1ac1a:	4314      	orrs	r4, r2
   1ac1c:	0324      	lsls	r4, r4, #12
   1ac1e:	0b24      	lsrs	r4, r4, #12
   1ac20:	e79f      	b.n	1ab62 <__aeabi_dsub+0x14a>
   1ac22:	002e      	movs	r6, r5
   1ac24:	e77e      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ac26:	0008      	movs	r0, r1
   1ac28:	4310      	orrs	r0, r2
   1ac2a:	d100      	bne.n	1ac2e <__aeabi_dsub+0x216>
   1ac2c:	e0ca      	b.n	1adc4 <__aeabi_dsub+0x3ac>
   1ac2e:	1e58      	subs	r0, r3, #1
   1ac30:	4684      	mov	ip, r0
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d000      	beq.n	1ac38 <__aeabi_dsub+0x220>
   1ac36:	e0e7      	b.n	1ae08 <__aeabi_dsub+0x3f0>
   1ac38:	4452      	add	r2, sl
   1ac3a:	4552      	cmp	r2, sl
   1ac3c:	4180      	sbcs	r0, r0
   1ac3e:	1864      	adds	r4, r4, r1
   1ac40:	4240      	negs	r0, r0
   1ac42:	1824      	adds	r4, r4, r0
   1ac44:	0017      	movs	r7, r2
   1ac46:	2601      	movs	r6, #1
   1ac48:	0223      	lsls	r3, r4, #8
   1ac4a:	d507      	bpl.n	1ac5c <__aeabi_dsub+0x244>
   1ac4c:	2602      	movs	r6, #2
   1ac4e:	e7cf      	b.n	1abf0 <__aeabi_dsub+0x1d8>
   1ac50:	4664      	mov	r4, ip
   1ac52:	432c      	orrs	r4, r5
   1ac54:	d100      	bne.n	1ac58 <__aeabi_dsub+0x240>
   1ac56:	e1b3      	b.n	1afc0 <__aeabi_dsub+0x5a8>
   1ac58:	002c      	movs	r4, r5
   1ac5a:	4667      	mov	r7, ip
   1ac5c:	077b      	lsls	r3, r7, #29
   1ac5e:	d000      	beq.n	1ac62 <__aeabi_dsub+0x24a>
   1ac60:	e762      	b.n	1ab28 <__aeabi_dsub+0x110>
   1ac62:	0763      	lsls	r3, r4, #29
   1ac64:	08ff      	lsrs	r7, r7, #3
   1ac66:	431f      	orrs	r7, r3
   1ac68:	2501      	movs	r5, #1
   1ac6a:	4643      	mov	r3, r8
   1ac6c:	08e4      	lsrs	r4, r4, #3
   1ac6e:	401d      	ands	r5, r3
   1ac70:	e793      	b.n	1ab9a <__aeabi_dsub+0x182>
   1ac72:	2d00      	cmp	r5, #0
   1ac74:	d178      	bne.n	1ad68 <__aeabi_dsub+0x350>
   1ac76:	1c75      	adds	r5, r6, #1
   1ac78:	056d      	lsls	r5, r5, #21
   1ac7a:	0d6d      	lsrs	r5, r5, #21
   1ac7c:	2d01      	cmp	r5, #1
   1ac7e:	dc00      	bgt.n	1ac82 <__aeabi_dsub+0x26a>
   1ac80:	e0f2      	b.n	1ae68 <__aeabi_dsub+0x450>
   1ac82:	4650      	mov	r0, sl
   1ac84:	1a80      	subs	r0, r0, r2
   1ac86:	4582      	cmp	sl, r0
   1ac88:	41bf      	sbcs	r7, r7
   1ac8a:	1a65      	subs	r5, r4, r1
   1ac8c:	427f      	negs	r7, r7
   1ac8e:	1bed      	subs	r5, r5, r7
   1ac90:	4684      	mov	ip, r0
   1ac92:	0228      	lsls	r0, r5, #8
   1ac94:	d400      	bmi.n	1ac98 <__aeabi_dsub+0x280>
   1ac96:	e08c      	b.n	1adb2 <__aeabi_dsub+0x39a>
   1ac98:	4650      	mov	r0, sl
   1ac9a:	1a17      	subs	r7, r2, r0
   1ac9c:	42ba      	cmp	r2, r7
   1ac9e:	4192      	sbcs	r2, r2
   1aca0:	1b0c      	subs	r4, r1, r4
   1aca2:	4255      	negs	r5, r2
   1aca4:	1b65      	subs	r5, r4, r5
   1aca6:	4698      	mov	r8, r3
   1aca8:	e714      	b.n	1aad4 <__aeabi_dsub+0xbc>
   1acaa:	2501      	movs	r5, #1
   1acac:	4643      	mov	r3, r8
   1acae:	2400      	movs	r4, #0
   1acb0:	401d      	ands	r5, r3
   1acb2:	2700      	movs	r7, #0
   1acb4:	e755      	b.n	1ab62 <__aeabi_dsub+0x14a>
   1acb6:	4c2a      	ldr	r4, [pc, #168]	; (1ad60 <__aeabi_dsub+0x348>)
   1acb8:	1af6      	subs	r6, r6, r3
   1acba:	402c      	ands	r4, r5
   1acbc:	e732      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1acbe:	003d      	movs	r5, r7
   1acc0:	3828      	subs	r0, #40	; 0x28
   1acc2:	4085      	lsls	r5, r0
   1acc4:	2700      	movs	r7, #0
   1acc6:	e717      	b.n	1aaf8 <__aeabi_dsub+0xe0>
   1acc8:	0038      	movs	r0, r7
   1acca:	f000 fb45 	bl	1b358 <__clzsi2>
   1acce:	3020      	adds	r0, #32
   1acd0:	e706      	b.n	1aae0 <__aeabi_dsub+0xc8>
   1acd2:	430a      	orrs	r2, r1
   1acd4:	0017      	movs	r7, r2
   1acd6:	2100      	movs	r1, #0
   1acd8:	1e7a      	subs	r2, r7, #1
   1acda:	4197      	sbcs	r7, r2
   1acdc:	e6ee      	b.n	1aabc <__aeabi_dsub+0xa4>
   1acde:	2b00      	cmp	r3, #0
   1ace0:	d000      	beq.n	1ace4 <__aeabi_dsub+0x2cc>
   1ace2:	e0e5      	b.n	1aeb0 <__aeabi_dsub+0x498>
   1ace4:	1c73      	adds	r3, r6, #1
   1ace6:	469c      	mov	ip, r3
   1ace8:	055b      	lsls	r3, r3, #21
   1acea:	0d5b      	lsrs	r3, r3, #21
   1acec:	2b01      	cmp	r3, #1
   1acee:	dc00      	bgt.n	1acf2 <__aeabi_dsub+0x2da>
   1acf0:	e09f      	b.n	1ae32 <__aeabi_dsub+0x41a>
   1acf2:	4b1a      	ldr	r3, [pc, #104]	; (1ad5c <__aeabi_dsub+0x344>)
   1acf4:	459c      	cmp	ip, r3
   1acf6:	d100      	bne.n	1acfa <__aeabi_dsub+0x2e2>
   1acf8:	e0c5      	b.n	1ae86 <__aeabi_dsub+0x46e>
   1acfa:	4452      	add	r2, sl
   1acfc:	4552      	cmp	r2, sl
   1acfe:	4180      	sbcs	r0, r0
   1ad00:	1864      	adds	r4, r4, r1
   1ad02:	4240      	negs	r0, r0
   1ad04:	1824      	adds	r4, r4, r0
   1ad06:	07e7      	lsls	r7, r4, #31
   1ad08:	0852      	lsrs	r2, r2, #1
   1ad0a:	4317      	orrs	r7, r2
   1ad0c:	0864      	lsrs	r4, r4, #1
   1ad0e:	4666      	mov	r6, ip
   1ad10:	e708      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ad12:	4812      	ldr	r0, [pc, #72]	; (1ad5c <__aeabi_dsub+0x344>)
   1ad14:	4285      	cmp	r5, r0
   1ad16:	d100      	bne.n	1ad1a <__aeabi_dsub+0x302>
   1ad18:	e085      	b.n	1ae26 <__aeabi_dsub+0x40e>
   1ad1a:	001d      	movs	r5, r3
   1ad1c:	e6bc      	b.n	1aa98 <__aeabi_dsub+0x80>
   1ad1e:	0029      	movs	r1, r5
   1ad20:	3e1f      	subs	r6, #31
   1ad22:	40f1      	lsrs	r1, r6
   1ad24:	2b20      	cmp	r3, #32
   1ad26:	d100      	bne.n	1ad2a <__aeabi_dsub+0x312>
   1ad28:	e07f      	b.n	1ae2a <__aeabi_dsub+0x412>
   1ad2a:	2240      	movs	r2, #64	; 0x40
   1ad2c:	1ad3      	subs	r3, r2, r3
   1ad2e:	409d      	lsls	r5, r3
   1ad30:	432f      	orrs	r7, r5
   1ad32:	1e7d      	subs	r5, r7, #1
   1ad34:	41af      	sbcs	r7, r5
   1ad36:	2400      	movs	r4, #0
   1ad38:	430f      	orrs	r7, r1
   1ad3a:	2600      	movs	r6, #0
   1ad3c:	e78e      	b.n	1ac5c <__aeabi_dsub+0x244>
   1ad3e:	002b      	movs	r3, r5
   1ad40:	000f      	movs	r7, r1
   1ad42:	3b20      	subs	r3, #32
   1ad44:	40df      	lsrs	r7, r3
   1ad46:	2d20      	cmp	r5, #32
   1ad48:	d071      	beq.n	1ae2e <__aeabi_dsub+0x416>
   1ad4a:	2340      	movs	r3, #64	; 0x40
   1ad4c:	1b5d      	subs	r5, r3, r5
   1ad4e:	40a9      	lsls	r1, r5
   1ad50:	430a      	orrs	r2, r1
   1ad52:	1e51      	subs	r1, r2, #1
   1ad54:	418a      	sbcs	r2, r1
   1ad56:	2100      	movs	r1, #0
   1ad58:	4317      	orrs	r7, r2
   1ad5a:	e6af      	b.n	1aabc <__aeabi_dsub+0xa4>
   1ad5c:	000007ff 	.word	0x000007ff
   1ad60:	ff7fffff 	.word	0xff7fffff
   1ad64:	800fffff 	.word	0x800fffff
   1ad68:	2e00      	cmp	r6, #0
   1ad6a:	d03e      	beq.n	1adea <__aeabi_dsub+0x3d2>
   1ad6c:	4eb3      	ldr	r6, [pc, #716]	; (1b03c <__aeabi_dsub+0x624>)
   1ad6e:	45b4      	cmp	ip, r6
   1ad70:	d045      	beq.n	1adfe <__aeabi_dsub+0x3e6>
   1ad72:	2680      	movs	r6, #128	; 0x80
   1ad74:	0436      	lsls	r6, r6, #16
   1ad76:	426d      	negs	r5, r5
   1ad78:	4334      	orrs	r4, r6
   1ad7a:	2d38      	cmp	r5, #56	; 0x38
   1ad7c:	dd00      	ble.n	1ad80 <__aeabi_dsub+0x368>
   1ad7e:	e0a8      	b.n	1aed2 <__aeabi_dsub+0x4ba>
   1ad80:	2d1f      	cmp	r5, #31
   1ad82:	dd00      	ble.n	1ad86 <__aeabi_dsub+0x36e>
   1ad84:	e11f      	b.n	1afc6 <__aeabi_dsub+0x5ae>
   1ad86:	2620      	movs	r6, #32
   1ad88:	0027      	movs	r7, r4
   1ad8a:	4650      	mov	r0, sl
   1ad8c:	1b76      	subs	r6, r6, r5
   1ad8e:	40b7      	lsls	r7, r6
   1ad90:	40e8      	lsrs	r0, r5
   1ad92:	4307      	orrs	r7, r0
   1ad94:	4650      	mov	r0, sl
   1ad96:	40b0      	lsls	r0, r6
   1ad98:	1e46      	subs	r6, r0, #1
   1ad9a:	41b0      	sbcs	r0, r6
   1ad9c:	40ec      	lsrs	r4, r5
   1ad9e:	4338      	orrs	r0, r7
   1ada0:	1a17      	subs	r7, r2, r0
   1ada2:	42ba      	cmp	r2, r7
   1ada4:	4192      	sbcs	r2, r2
   1ada6:	1b0c      	subs	r4, r1, r4
   1ada8:	4252      	negs	r2, r2
   1adaa:	1aa4      	subs	r4, r4, r2
   1adac:	4666      	mov	r6, ip
   1adae:	4698      	mov	r8, r3
   1adb0:	e68b      	b.n	1aaca <__aeabi_dsub+0xb2>
   1adb2:	4664      	mov	r4, ip
   1adb4:	4667      	mov	r7, ip
   1adb6:	432c      	orrs	r4, r5
   1adb8:	d000      	beq.n	1adbc <__aeabi_dsub+0x3a4>
   1adba:	e68b      	b.n	1aad4 <__aeabi_dsub+0xbc>
   1adbc:	2500      	movs	r5, #0
   1adbe:	2600      	movs	r6, #0
   1adc0:	2700      	movs	r7, #0
   1adc2:	e6ea      	b.n	1ab9a <__aeabi_dsub+0x182>
   1adc4:	001e      	movs	r6, r3
   1adc6:	e6ad      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1adc8:	2b1f      	cmp	r3, #31
   1adca:	dc60      	bgt.n	1ae8e <__aeabi_dsub+0x476>
   1adcc:	2720      	movs	r7, #32
   1adce:	1af8      	subs	r0, r7, r3
   1add0:	000f      	movs	r7, r1
   1add2:	4684      	mov	ip, r0
   1add4:	4087      	lsls	r7, r0
   1add6:	0010      	movs	r0, r2
   1add8:	40d8      	lsrs	r0, r3
   1adda:	4307      	orrs	r7, r0
   1addc:	4660      	mov	r0, ip
   1adde:	4082      	lsls	r2, r0
   1ade0:	1e50      	subs	r0, r2, #1
   1ade2:	4182      	sbcs	r2, r0
   1ade4:	40d9      	lsrs	r1, r3
   1ade6:	4317      	orrs	r7, r2
   1ade8:	e6f5      	b.n	1abd6 <__aeabi_dsub+0x1be>
   1adea:	0026      	movs	r6, r4
   1adec:	4650      	mov	r0, sl
   1adee:	4306      	orrs	r6, r0
   1adf0:	d005      	beq.n	1adfe <__aeabi_dsub+0x3e6>
   1adf2:	43ed      	mvns	r5, r5
   1adf4:	2d00      	cmp	r5, #0
   1adf6:	d0d3      	beq.n	1ada0 <__aeabi_dsub+0x388>
   1adf8:	4e90      	ldr	r6, [pc, #576]	; (1b03c <__aeabi_dsub+0x624>)
   1adfa:	45b4      	cmp	ip, r6
   1adfc:	d1bd      	bne.n	1ad7a <__aeabi_dsub+0x362>
   1adfe:	000c      	movs	r4, r1
   1ae00:	0017      	movs	r7, r2
   1ae02:	4666      	mov	r6, ip
   1ae04:	4698      	mov	r8, r3
   1ae06:	e68d      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ae08:	488c      	ldr	r0, [pc, #560]	; (1b03c <__aeabi_dsub+0x624>)
   1ae0a:	4283      	cmp	r3, r0
   1ae0c:	d00b      	beq.n	1ae26 <__aeabi_dsub+0x40e>
   1ae0e:	4663      	mov	r3, ip
   1ae10:	e6d9      	b.n	1abc6 <__aeabi_dsub+0x1ae>
   1ae12:	2d00      	cmp	r5, #0
   1ae14:	d000      	beq.n	1ae18 <__aeabi_dsub+0x400>
   1ae16:	e096      	b.n	1af46 <__aeabi_dsub+0x52e>
   1ae18:	0008      	movs	r0, r1
   1ae1a:	4310      	orrs	r0, r2
   1ae1c:	d100      	bne.n	1ae20 <__aeabi_dsub+0x408>
   1ae1e:	e0e2      	b.n	1afe6 <__aeabi_dsub+0x5ce>
   1ae20:	000c      	movs	r4, r1
   1ae22:	0017      	movs	r7, r2
   1ae24:	4698      	mov	r8, r3
   1ae26:	4e85      	ldr	r6, [pc, #532]	; (1b03c <__aeabi_dsub+0x624>)
   1ae28:	e67c      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ae2a:	2500      	movs	r5, #0
   1ae2c:	e780      	b.n	1ad30 <__aeabi_dsub+0x318>
   1ae2e:	2100      	movs	r1, #0
   1ae30:	e78e      	b.n	1ad50 <__aeabi_dsub+0x338>
   1ae32:	0023      	movs	r3, r4
   1ae34:	4650      	mov	r0, sl
   1ae36:	4303      	orrs	r3, r0
   1ae38:	2e00      	cmp	r6, #0
   1ae3a:	d000      	beq.n	1ae3e <__aeabi_dsub+0x426>
   1ae3c:	e0a8      	b.n	1af90 <__aeabi_dsub+0x578>
   1ae3e:	2b00      	cmp	r3, #0
   1ae40:	d100      	bne.n	1ae44 <__aeabi_dsub+0x42c>
   1ae42:	e0de      	b.n	1b002 <__aeabi_dsub+0x5ea>
   1ae44:	000b      	movs	r3, r1
   1ae46:	4313      	orrs	r3, r2
   1ae48:	d100      	bne.n	1ae4c <__aeabi_dsub+0x434>
   1ae4a:	e66b      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ae4c:	4452      	add	r2, sl
   1ae4e:	4552      	cmp	r2, sl
   1ae50:	4180      	sbcs	r0, r0
   1ae52:	1864      	adds	r4, r4, r1
   1ae54:	4240      	negs	r0, r0
   1ae56:	1824      	adds	r4, r4, r0
   1ae58:	0017      	movs	r7, r2
   1ae5a:	0223      	lsls	r3, r4, #8
   1ae5c:	d400      	bmi.n	1ae60 <__aeabi_dsub+0x448>
   1ae5e:	e6fd      	b.n	1ac5c <__aeabi_dsub+0x244>
   1ae60:	4b77      	ldr	r3, [pc, #476]	; (1b040 <__aeabi_dsub+0x628>)
   1ae62:	4666      	mov	r6, ip
   1ae64:	401c      	ands	r4, r3
   1ae66:	e65d      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ae68:	0025      	movs	r5, r4
   1ae6a:	4650      	mov	r0, sl
   1ae6c:	4305      	orrs	r5, r0
   1ae6e:	2e00      	cmp	r6, #0
   1ae70:	d1cf      	bne.n	1ae12 <__aeabi_dsub+0x3fa>
   1ae72:	2d00      	cmp	r5, #0
   1ae74:	d14f      	bne.n	1af16 <__aeabi_dsub+0x4fe>
   1ae76:	000c      	movs	r4, r1
   1ae78:	4314      	orrs	r4, r2
   1ae7a:	d100      	bne.n	1ae7e <__aeabi_dsub+0x466>
   1ae7c:	e0a0      	b.n	1afc0 <__aeabi_dsub+0x5a8>
   1ae7e:	000c      	movs	r4, r1
   1ae80:	0017      	movs	r7, r2
   1ae82:	4698      	mov	r8, r3
   1ae84:	e64e      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1ae86:	4666      	mov	r6, ip
   1ae88:	2400      	movs	r4, #0
   1ae8a:	2700      	movs	r7, #0
   1ae8c:	e685      	b.n	1ab9a <__aeabi_dsub+0x182>
   1ae8e:	001f      	movs	r7, r3
   1ae90:	0008      	movs	r0, r1
   1ae92:	3f20      	subs	r7, #32
   1ae94:	40f8      	lsrs	r0, r7
   1ae96:	0007      	movs	r7, r0
   1ae98:	2b20      	cmp	r3, #32
   1ae9a:	d100      	bne.n	1ae9e <__aeabi_dsub+0x486>
   1ae9c:	e08e      	b.n	1afbc <__aeabi_dsub+0x5a4>
   1ae9e:	2040      	movs	r0, #64	; 0x40
   1aea0:	1ac3      	subs	r3, r0, r3
   1aea2:	4099      	lsls	r1, r3
   1aea4:	430a      	orrs	r2, r1
   1aea6:	1e51      	subs	r1, r2, #1
   1aea8:	418a      	sbcs	r2, r1
   1aeaa:	2100      	movs	r1, #0
   1aeac:	4317      	orrs	r7, r2
   1aeae:	e692      	b.n	1abd6 <__aeabi_dsub+0x1be>
   1aeb0:	2e00      	cmp	r6, #0
   1aeb2:	d114      	bne.n	1aede <__aeabi_dsub+0x4c6>
   1aeb4:	0026      	movs	r6, r4
   1aeb6:	4650      	mov	r0, sl
   1aeb8:	4306      	orrs	r6, r0
   1aeba:	d062      	beq.n	1af82 <__aeabi_dsub+0x56a>
   1aebc:	43db      	mvns	r3, r3
   1aebe:	2b00      	cmp	r3, #0
   1aec0:	d15c      	bne.n	1af7c <__aeabi_dsub+0x564>
   1aec2:	1887      	adds	r7, r0, r2
   1aec4:	4297      	cmp	r7, r2
   1aec6:	4192      	sbcs	r2, r2
   1aec8:	1864      	adds	r4, r4, r1
   1aeca:	4252      	negs	r2, r2
   1aecc:	18a4      	adds	r4, r4, r2
   1aece:	4666      	mov	r6, ip
   1aed0:	e687      	b.n	1abe2 <__aeabi_dsub+0x1ca>
   1aed2:	4650      	mov	r0, sl
   1aed4:	4320      	orrs	r0, r4
   1aed6:	1e44      	subs	r4, r0, #1
   1aed8:	41a0      	sbcs	r0, r4
   1aeda:	2400      	movs	r4, #0
   1aedc:	e760      	b.n	1ada0 <__aeabi_dsub+0x388>
   1aede:	4e57      	ldr	r6, [pc, #348]	; (1b03c <__aeabi_dsub+0x624>)
   1aee0:	45b4      	cmp	ip, r6
   1aee2:	d04e      	beq.n	1af82 <__aeabi_dsub+0x56a>
   1aee4:	2680      	movs	r6, #128	; 0x80
   1aee6:	0436      	lsls	r6, r6, #16
   1aee8:	425b      	negs	r3, r3
   1aeea:	4334      	orrs	r4, r6
   1aeec:	2b38      	cmp	r3, #56	; 0x38
   1aeee:	dd00      	ble.n	1aef2 <__aeabi_dsub+0x4da>
   1aef0:	e07f      	b.n	1aff2 <__aeabi_dsub+0x5da>
   1aef2:	2b1f      	cmp	r3, #31
   1aef4:	dd00      	ble.n	1aef8 <__aeabi_dsub+0x4e0>
   1aef6:	e08b      	b.n	1b010 <__aeabi_dsub+0x5f8>
   1aef8:	2620      	movs	r6, #32
   1aefa:	0027      	movs	r7, r4
   1aefc:	4650      	mov	r0, sl
   1aefe:	1af6      	subs	r6, r6, r3
   1af00:	40b7      	lsls	r7, r6
   1af02:	40d8      	lsrs	r0, r3
   1af04:	4307      	orrs	r7, r0
   1af06:	4650      	mov	r0, sl
   1af08:	40b0      	lsls	r0, r6
   1af0a:	1e46      	subs	r6, r0, #1
   1af0c:	41b0      	sbcs	r0, r6
   1af0e:	4307      	orrs	r7, r0
   1af10:	40dc      	lsrs	r4, r3
   1af12:	18bf      	adds	r7, r7, r2
   1af14:	e7d6      	b.n	1aec4 <__aeabi_dsub+0x4ac>
   1af16:	000d      	movs	r5, r1
   1af18:	4315      	orrs	r5, r2
   1af1a:	d100      	bne.n	1af1e <__aeabi_dsub+0x506>
   1af1c:	e602      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1af1e:	4650      	mov	r0, sl
   1af20:	1a80      	subs	r0, r0, r2
   1af22:	4582      	cmp	sl, r0
   1af24:	41bf      	sbcs	r7, r7
   1af26:	1a65      	subs	r5, r4, r1
   1af28:	427f      	negs	r7, r7
   1af2a:	1bed      	subs	r5, r5, r7
   1af2c:	4684      	mov	ip, r0
   1af2e:	0228      	lsls	r0, r5, #8
   1af30:	d400      	bmi.n	1af34 <__aeabi_dsub+0x51c>
   1af32:	e68d      	b.n	1ac50 <__aeabi_dsub+0x238>
   1af34:	4650      	mov	r0, sl
   1af36:	1a17      	subs	r7, r2, r0
   1af38:	42ba      	cmp	r2, r7
   1af3a:	4192      	sbcs	r2, r2
   1af3c:	1b0c      	subs	r4, r1, r4
   1af3e:	4252      	negs	r2, r2
   1af40:	1aa4      	subs	r4, r4, r2
   1af42:	4698      	mov	r8, r3
   1af44:	e5ee      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1af46:	000d      	movs	r5, r1
   1af48:	4315      	orrs	r5, r2
   1af4a:	d100      	bne.n	1af4e <__aeabi_dsub+0x536>
   1af4c:	e76b      	b.n	1ae26 <__aeabi_dsub+0x40e>
   1af4e:	4650      	mov	r0, sl
   1af50:	0767      	lsls	r7, r4, #29
   1af52:	08c0      	lsrs	r0, r0, #3
   1af54:	4307      	orrs	r7, r0
   1af56:	2080      	movs	r0, #128	; 0x80
   1af58:	08e4      	lsrs	r4, r4, #3
   1af5a:	0300      	lsls	r0, r0, #12
   1af5c:	4204      	tst	r4, r0
   1af5e:	d007      	beq.n	1af70 <__aeabi_dsub+0x558>
   1af60:	08cd      	lsrs	r5, r1, #3
   1af62:	4205      	tst	r5, r0
   1af64:	d104      	bne.n	1af70 <__aeabi_dsub+0x558>
   1af66:	002c      	movs	r4, r5
   1af68:	4698      	mov	r8, r3
   1af6a:	08d7      	lsrs	r7, r2, #3
   1af6c:	0749      	lsls	r1, r1, #29
   1af6e:	430f      	orrs	r7, r1
   1af70:	0f7b      	lsrs	r3, r7, #29
   1af72:	00e4      	lsls	r4, r4, #3
   1af74:	431c      	orrs	r4, r3
   1af76:	00ff      	lsls	r7, r7, #3
   1af78:	4e30      	ldr	r6, [pc, #192]	; (1b03c <__aeabi_dsub+0x624>)
   1af7a:	e5d3      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1af7c:	4e2f      	ldr	r6, [pc, #188]	; (1b03c <__aeabi_dsub+0x624>)
   1af7e:	45b4      	cmp	ip, r6
   1af80:	d1b4      	bne.n	1aeec <__aeabi_dsub+0x4d4>
   1af82:	000c      	movs	r4, r1
   1af84:	0017      	movs	r7, r2
   1af86:	4666      	mov	r6, ip
   1af88:	e5cc      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1af8a:	2700      	movs	r7, #0
   1af8c:	2400      	movs	r4, #0
   1af8e:	e5e8      	b.n	1ab62 <__aeabi_dsub+0x14a>
   1af90:	2b00      	cmp	r3, #0
   1af92:	d039      	beq.n	1b008 <__aeabi_dsub+0x5f0>
   1af94:	000b      	movs	r3, r1
   1af96:	4313      	orrs	r3, r2
   1af98:	d100      	bne.n	1af9c <__aeabi_dsub+0x584>
   1af9a:	e744      	b.n	1ae26 <__aeabi_dsub+0x40e>
   1af9c:	08c0      	lsrs	r0, r0, #3
   1af9e:	0767      	lsls	r7, r4, #29
   1afa0:	4307      	orrs	r7, r0
   1afa2:	2080      	movs	r0, #128	; 0x80
   1afa4:	08e4      	lsrs	r4, r4, #3
   1afa6:	0300      	lsls	r0, r0, #12
   1afa8:	4204      	tst	r4, r0
   1afaa:	d0e1      	beq.n	1af70 <__aeabi_dsub+0x558>
   1afac:	08cb      	lsrs	r3, r1, #3
   1afae:	4203      	tst	r3, r0
   1afb0:	d1de      	bne.n	1af70 <__aeabi_dsub+0x558>
   1afb2:	08d7      	lsrs	r7, r2, #3
   1afb4:	0749      	lsls	r1, r1, #29
   1afb6:	430f      	orrs	r7, r1
   1afb8:	001c      	movs	r4, r3
   1afba:	e7d9      	b.n	1af70 <__aeabi_dsub+0x558>
   1afbc:	2100      	movs	r1, #0
   1afbe:	e771      	b.n	1aea4 <__aeabi_dsub+0x48c>
   1afc0:	2500      	movs	r5, #0
   1afc2:	2700      	movs	r7, #0
   1afc4:	e5e9      	b.n	1ab9a <__aeabi_dsub+0x182>
   1afc6:	002e      	movs	r6, r5
   1afc8:	0027      	movs	r7, r4
   1afca:	3e20      	subs	r6, #32
   1afcc:	40f7      	lsrs	r7, r6
   1afce:	2d20      	cmp	r5, #32
   1afd0:	d02f      	beq.n	1b032 <__aeabi_dsub+0x61a>
   1afd2:	2640      	movs	r6, #64	; 0x40
   1afd4:	1b75      	subs	r5, r6, r5
   1afd6:	40ac      	lsls	r4, r5
   1afd8:	4650      	mov	r0, sl
   1afda:	4320      	orrs	r0, r4
   1afdc:	1e44      	subs	r4, r0, #1
   1afde:	41a0      	sbcs	r0, r4
   1afe0:	2400      	movs	r4, #0
   1afe2:	4338      	orrs	r0, r7
   1afe4:	e6dc      	b.n	1ada0 <__aeabi_dsub+0x388>
   1afe6:	2480      	movs	r4, #128	; 0x80
   1afe8:	2500      	movs	r5, #0
   1afea:	0324      	lsls	r4, r4, #12
   1afec:	4e13      	ldr	r6, [pc, #76]	; (1b03c <__aeabi_dsub+0x624>)
   1afee:	2700      	movs	r7, #0
   1aff0:	e5d3      	b.n	1ab9a <__aeabi_dsub+0x182>
   1aff2:	4650      	mov	r0, sl
   1aff4:	4320      	orrs	r0, r4
   1aff6:	0007      	movs	r7, r0
   1aff8:	1e78      	subs	r0, r7, #1
   1affa:	4187      	sbcs	r7, r0
   1affc:	2400      	movs	r4, #0
   1affe:	18bf      	adds	r7, r7, r2
   1b000:	e760      	b.n	1aec4 <__aeabi_dsub+0x4ac>
   1b002:	000c      	movs	r4, r1
   1b004:	0017      	movs	r7, r2
   1b006:	e58d      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1b008:	000c      	movs	r4, r1
   1b00a:	0017      	movs	r7, r2
   1b00c:	4e0b      	ldr	r6, [pc, #44]	; (1b03c <__aeabi_dsub+0x624>)
   1b00e:	e589      	b.n	1ab24 <__aeabi_dsub+0x10c>
   1b010:	001e      	movs	r6, r3
   1b012:	0027      	movs	r7, r4
   1b014:	3e20      	subs	r6, #32
   1b016:	40f7      	lsrs	r7, r6
   1b018:	2b20      	cmp	r3, #32
   1b01a:	d00c      	beq.n	1b036 <__aeabi_dsub+0x61e>
   1b01c:	2640      	movs	r6, #64	; 0x40
   1b01e:	1af3      	subs	r3, r6, r3
   1b020:	409c      	lsls	r4, r3
   1b022:	4650      	mov	r0, sl
   1b024:	4320      	orrs	r0, r4
   1b026:	1e44      	subs	r4, r0, #1
   1b028:	41a0      	sbcs	r0, r4
   1b02a:	4307      	orrs	r7, r0
   1b02c:	2400      	movs	r4, #0
   1b02e:	18bf      	adds	r7, r7, r2
   1b030:	e748      	b.n	1aec4 <__aeabi_dsub+0x4ac>
   1b032:	2400      	movs	r4, #0
   1b034:	e7d0      	b.n	1afd8 <__aeabi_dsub+0x5c0>
   1b036:	2400      	movs	r4, #0
   1b038:	e7f3      	b.n	1b022 <__aeabi_dsub+0x60a>
   1b03a:	46c0      	nop			; (mov r8, r8)
   1b03c:	000007ff 	.word	0x000007ff
   1b040:	ff7fffff 	.word	0xff7fffff

0001b044 <__aeabi_d2iz>:
   1b044:	b530      	push	{r4, r5, lr}
   1b046:	4d13      	ldr	r5, [pc, #76]	; (1b094 <__aeabi_d2iz+0x50>)
   1b048:	030a      	lsls	r2, r1, #12
   1b04a:	004b      	lsls	r3, r1, #1
   1b04c:	0b12      	lsrs	r2, r2, #12
   1b04e:	0d5b      	lsrs	r3, r3, #21
   1b050:	0fc9      	lsrs	r1, r1, #31
   1b052:	2400      	movs	r4, #0
   1b054:	42ab      	cmp	r3, r5
   1b056:	dd10      	ble.n	1b07a <__aeabi_d2iz+0x36>
   1b058:	4c0f      	ldr	r4, [pc, #60]	; (1b098 <__aeabi_d2iz+0x54>)
   1b05a:	42a3      	cmp	r3, r4
   1b05c:	dc0f      	bgt.n	1b07e <__aeabi_d2iz+0x3a>
   1b05e:	2480      	movs	r4, #128	; 0x80
   1b060:	4d0e      	ldr	r5, [pc, #56]	; (1b09c <__aeabi_d2iz+0x58>)
   1b062:	0364      	lsls	r4, r4, #13
   1b064:	4322      	orrs	r2, r4
   1b066:	1aed      	subs	r5, r5, r3
   1b068:	2d1f      	cmp	r5, #31
   1b06a:	dd0b      	ble.n	1b084 <__aeabi_d2iz+0x40>
   1b06c:	480c      	ldr	r0, [pc, #48]	; (1b0a0 <__aeabi_d2iz+0x5c>)
   1b06e:	1ac3      	subs	r3, r0, r3
   1b070:	40da      	lsrs	r2, r3
   1b072:	4254      	negs	r4, r2
   1b074:	2900      	cmp	r1, #0
   1b076:	d100      	bne.n	1b07a <__aeabi_d2iz+0x36>
   1b078:	0014      	movs	r4, r2
   1b07a:	0020      	movs	r0, r4
   1b07c:	bd30      	pop	{r4, r5, pc}
   1b07e:	4b09      	ldr	r3, [pc, #36]	; (1b0a4 <__aeabi_d2iz+0x60>)
   1b080:	18cc      	adds	r4, r1, r3
   1b082:	e7fa      	b.n	1b07a <__aeabi_d2iz+0x36>
   1b084:	4c08      	ldr	r4, [pc, #32]	; (1b0a8 <__aeabi_d2iz+0x64>)
   1b086:	40e8      	lsrs	r0, r5
   1b088:	46a4      	mov	ip, r4
   1b08a:	4463      	add	r3, ip
   1b08c:	409a      	lsls	r2, r3
   1b08e:	4302      	orrs	r2, r0
   1b090:	e7ef      	b.n	1b072 <__aeabi_d2iz+0x2e>
   1b092:	46c0      	nop			; (mov r8, r8)
   1b094:	000003fe 	.word	0x000003fe
   1b098:	0000041d 	.word	0x0000041d
   1b09c:	00000433 	.word	0x00000433
   1b0a0:	00000413 	.word	0x00000413
   1b0a4:	7fffffff 	.word	0x7fffffff
   1b0a8:	fffffbed 	.word	0xfffffbed

0001b0ac <__aeabi_i2d>:
   1b0ac:	b570      	push	{r4, r5, r6, lr}
   1b0ae:	2800      	cmp	r0, #0
   1b0b0:	d030      	beq.n	1b114 <__aeabi_i2d+0x68>
   1b0b2:	17c3      	asrs	r3, r0, #31
   1b0b4:	18c4      	adds	r4, r0, r3
   1b0b6:	405c      	eors	r4, r3
   1b0b8:	0fc5      	lsrs	r5, r0, #31
   1b0ba:	0020      	movs	r0, r4
   1b0bc:	f000 f94c 	bl	1b358 <__clzsi2>
   1b0c0:	4b17      	ldr	r3, [pc, #92]	; (1b120 <__aeabi_i2d+0x74>)
   1b0c2:	4a18      	ldr	r2, [pc, #96]	; (1b124 <__aeabi_i2d+0x78>)
   1b0c4:	1a1b      	subs	r3, r3, r0
   1b0c6:	1ad2      	subs	r2, r2, r3
   1b0c8:	2a1f      	cmp	r2, #31
   1b0ca:	dd18      	ble.n	1b0fe <__aeabi_i2d+0x52>
   1b0cc:	4a16      	ldr	r2, [pc, #88]	; (1b128 <__aeabi_i2d+0x7c>)
   1b0ce:	1ad2      	subs	r2, r2, r3
   1b0d0:	4094      	lsls	r4, r2
   1b0d2:	2200      	movs	r2, #0
   1b0d4:	0324      	lsls	r4, r4, #12
   1b0d6:	055b      	lsls	r3, r3, #21
   1b0d8:	0b24      	lsrs	r4, r4, #12
   1b0da:	0d5b      	lsrs	r3, r3, #21
   1b0dc:	2100      	movs	r1, #0
   1b0de:	0010      	movs	r0, r2
   1b0e0:	0324      	lsls	r4, r4, #12
   1b0e2:	0d0a      	lsrs	r2, r1, #20
   1b0e4:	0b24      	lsrs	r4, r4, #12
   1b0e6:	0512      	lsls	r2, r2, #20
   1b0e8:	4322      	orrs	r2, r4
   1b0ea:	4c10      	ldr	r4, [pc, #64]	; (1b12c <__aeabi_i2d+0x80>)
   1b0ec:	051b      	lsls	r3, r3, #20
   1b0ee:	4022      	ands	r2, r4
   1b0f0:	4313      	orrs	r3, r2
   1b0f2:	005b      	lsls	r3, r3, #1
   1b0f4:	07ed      	lsls	r5, r5, #31
   1b0f6:	085b      	lsrs	r3, r3, #1
   1b0f8:	432b      	orrs	r3, r5
   1b0fa:	0019      	movs	r1, r3
   1b0fc:	bd70      	pop	{r4, r5, r6, pc}
   1b0fe:	0021      	movs	r1, r4
   1b100:	4091      	lsls	r1, r2
   1b102:	000a      	movs	r2, r1
   1b104:	210b      	movs	r1, #11
   1b106:	1a08      	subs	r0, r1, r0
   1b108:	40c4      	lsrs	r4, r0
   1b10a:	055b      	lsls	r3, r3, #21
   1b10c:	0324      	lsls	r4, r4, #12
   1b10e:	0b24      	lsrs	r4, r4, #12
   1b110:	0d5b      	lsrs	r3, r3, #21
   1b112:	e7e3      	b.n	1b0dc <__aeabi_i2d+0x30>
   1b114:	2500      	movs	r5, #0
   1b116:	2300      	movs	r3, #0
   1b118:	2400      	movs	r4, #0
   1b11a:	2200      	movs	r2, #0
   1b11c:	e7de      	b.n	1b0dc <__aeabi_i2d+0x30>
   1b11e:	46c0      	nop			; (mov r8, r8)
   1b120:	0000041e 	.word	0x0000041e
   1b124:	00000433 	.word	0x00000433
   1b128:	00000413 	.word	0x00000413
   1b12c:	800fffff 	.word	0x800fffff

0001b130 <__aeabi_ui2d>:
   1b130:	b510      	push	{r4, lr}
   1b132:	1e04      	subs	r4, r0, #0
   1b134:	d028      	beq.n	1b188 <__aeabi_ui2d+0x58>
   1b136:	f000 f90f 	bl	1b358 <__clzsi2>
   1b13a:	4b15      	ldr	r3, [pc, #84]	; (1b190 <__aeabi_ui2d+0x60>)
   1b13c:	4a15      	ldr	r2, [pc, #84]	; (1b194 <__aeabi_ui2d+0x64>)
   1b13e:	1a1b      	subs	r3, r3, r0
   1b140:	1ad2      	subs	r2, r2, r3
   1b142:	2a1f      	cmp	r2, #31
   1b144:	dd15      	ble.n	1b172 <__aeabi_ui2d+0x42>
   1b146:	4a14      	ldr	r2, [pc, #80]	; (1b198 <__aeabi_ui2d+0x68>)
   1b148:	1ad2      	subs	r2, r2, r3
   1b14a:	4094      	lsls	r4, r2
   1b14c:	2200      	movs	r2, #0
   1b14e:	0324      	lsls	r4, r4, #12
   1b150:	055b      	lsls	r3, r3, #21
   1b152:	0b24      	lsrs	r4, r4, #12
   1b154:	0d5b      	lsrs	r3, r3, #21
   1b156:	2100      	movs	r1, #0
   1b158:	0010      	movs	r0, r2
   1b15a:	0324      	lsls	r4, r4, #12
   1b15c:	0d0a      	lsrs	r2, r1, #20
   1b15e:	0b24      	lsrs	r4, r4, #12
   1b160:	0512      	lsls	r2, r2, #20
   1b162:	4322      	orrs	r2, r4
   1b164:	4c0d      	ldr	r4, [pc, #52]	; (1b19c <__aeabi_ui2d+0x6c>)
   1b166:	051b      	lsls	r3, r3, #20
   1b168:	4022      	ands	r2, r4
   1b16a:	4313      	orrs	r3, r2
   1b16c:	005b      	lsls	r3, r3, #1
   1b16e:	0859      	lsrs	r1, r3, #1
   1b170:	bd10      	pop	{r4, pc}
   1b172:	0021      	movs	r1, r4
   1b174:	4091      	lsls	r1, r2
   1b176:	000a      	movs	r2, r1
   1b178:	210b      	movs	r1, #11
   1b17a:	1a08      	subs	r0, r1, r0
   1b17c:	40c4      	lsrs	r4, r0
   1b17e:	055b      	lsls	r3, r3, #21
   1b180:	0324      	lsls	r4, r4, #12
   1b182:	0b24      	lsrs	r4, r4, #12
   1b184:	0d5b      	lsrs	r3, r3, #21
   1b186:	e7e6      	b.n	1b156 <__aeabi_ui2d+0x26>
   1b188:	2300      	movs	r3, #0
   1b18a:	2400      	movs	r4, #0
   1b18c:	2200      	movs	r2, #0
   1b18e:	e7e2      	b.n	1b156 <__aeabi_ui2d+0x26>
   1b190:	0000041e 	.word	0x0000041e
   1b194:	00000433 	.word	0x00000433
   1b198:	00000413 	.word	0x00000413
   1b19c:	800fffff 	.word	0x800fffff

0001b1a0 <__aeabi_f2d>:
   1b1a0:	0041      	lsls	r1, r0, #1
   1b1a2:	0e09      	lsrs	r1, r1, #24
   1b1a4:	1c4b      	adds	r3, r1, #1
   1b1a6:	b570      	push	{r4, r5, r6, lr}
   1b1a8:	b2db      	uxtb	r3, r3
   1b1aa:	0246      	lsls	r6, r0, #9
   1b1ac:	0a75      	lsrs	r5, r6, #9
   1b1ae:	0fc4      	lsrs	r4, r0, #31
   1b1b0:	2b01      	cmp	r3, #1
   1b1b2:	dd14      	ble.n	1b1de <__aeabi_f2d+0x3e>
   1b1b4:	23e0      	movs	r3, #224	; 0xe0
   1b1b6:	009b      	lsls	r3, r3, #2
   1b1b8:	076d      	lsls	r5, r5, #29
   1b1ba:	0b36      	lsrs	r6, r6, #12
   1b1bc:	18cb      	adds	r3, r1, r3
   1b1be:	2100      	movs	r1, #0
   1b1c0:	0d0a      	lsrs	r2, r1, #20
   1b1c2:	0028      	movs	r0, r5
   1b1c4:	0512      	lsls	r2, r2, #20
   1b1c6:	4d1c      	ldr	r5, [pc, #112]	; (1b238 <__aeabi_f2d+0x98>)
   1b1c8:	4332      	orrs	r2, r6
   1b1ca:	055b      	lsls	r3, r3, #21
   1b1cc:	402a      	ands	r2, r5
   1b1ce:	085b      	lsrs	r3, r3, #1
   1b1d0:	4313      	orrs	r3, r2
   1b1d2:	005b      	lsls	r3, r3, #1
   1b1d4:	07e4      	lsls	r4, r4, #31
   1b1d6:	085b      	lsrs	r3, r3, #1
   1b1d8:	4323      	orrs	r3, r4
   1b1da:	0019      	movs	r1, r3
   1b1dc:	bd70      	pop	{r4, r5, r6, pc}
   1b1de:	2900      	cmp	r1, #0
   1b1e0:	d114      	bne.n	1b20c <__aeabi_f2d+0x6c>
   1b1e2:	2d00      	cmp	r5, #0
   1b1e4:	d01e      	beq.n	1b224 <__aeabi_f2d+0x84>
   1b1e6:	0028      	movs	r0, r5
   1b1e8:	f000 f8b6 	bl	1b358 <__clzsi2>
   1b1ec:	280a      	cmp	r0, #10
   1b1ee:	dc1c      	bgt.n	1b22a <__aeabi_f2d+0x8a>
   1b1f0:	230b      	movs	r3, #11
   1b1f2:	002a      	movs	r2, r5
   1b1f4:	1a1b      	subs	r3, r3, r0
   1b1f6:	40da      	lsrs	r2, r3
   1b1f8:	0003      	movs	r3, r0
   1b1fa:	3315      	adds	r3, #21
   1b1fc:	409d      	lsls	r5, r3
   1b1fe:	4b0f      	ldr	r3, [pc, #60]	; (1b23c <__aeabi_f2d+0x9c>)
   1b200:	0312      	lsls	r2, r2, #12
   1b202:	1a1b      	subs	r3, r3, r0
   1b204:	055b      	lsls	r3, r3, #21
   1b206:	0b16      	lsrs	r6, r2, #12
   1b208:	0d5b      	lsrs	r3, r3, #21
   1b20a:	e7d8      	b.n	1b1be <__aeabi_f2d+0x1e>
   1b20c:	2d00      	cmp	r5, #0
   1b20e:	d006      	beq.n	1b21e <__aeabi_f2d+0x7e>
   1b210:	0b32      	lsrs	r2, r6, #12
   1b212:	2680      	movs	r6, #128	; 0x80
   1b214:	0336      	lsls	r6, r6, #12
   1b216:	076d      	lsls	r5, r5, #29
   1b218:	4316      	orrs	r6, r2
   1b21a:	4b09      	ldr	r3, [pc, #36]	; (1b240 <__aeabi_f2d+0xa0>)
   1b21c:	e7cf      	b.n	1b1be <__aeabi_f2d+0x1e>
   1b21e:	4b08      	ldr	r3, [pc, #32]	; (1b240 <__aeabi_f2d+0xa0>)
   1b220:	2600      	movs	r6, #0
   1b222:	e7cc      	b.n	1b1be <__aeabi_f2d+0x1e>
   1b224:	2300      	movs	r3, #0
   1b226:	2600      	movs	r6, #0
   1b228:	e7c9      	b.n	1b1be <__aeabi_f2d+0x1e>
   1b22a:	0003      	movs	r3, r0
   1b22c:	002a      	movs	r2, r5
   1b22e:	3b0b      	subs	r3, #11
   1b230:	409a      	lsls	r2, r3
   1b232:	2500      	movs	r5, #0
   1b234:	e7e3      	b.n	1b1fe <__aeabi_f2d+0x5e>
   1b236:	46c0      	nop			; (mov r8, r8)
   1b238:	800fffff 	.word	0x800fffff
   1b23c:	00000389 	.word	0x00000389
   1b240:	000007ff 	.word	0x000007ff

0001b244 <__aeabi_d2f>:
   1b244:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b246:	004c      	lsls	r4, r1, #1
   1b248:	0d64      	lsrs	r4, r4, #21
   1b24a:	030b      	lsls	r3, r1, #12
   1b24c:	1c62      	adds	r2, r4, #1
   1b24e:	0f45      	lsrs	r5, r0, #29
   1b250:	0a5b      	lsrs	r3, r3, #9
   1b252:	0552      	lsls	r2, r2, #21
   1b254:	432b      	orrs	r3, r5
   1b256:	0fc9      	lsrs	r1, r1, #31
   1b258:	00c5      	lsls	r5, r0, #3
   1b25a:	0d52      	lsrs	r2, r2, #21
   1b25c:	2a01      	cmp	r2, #1
   1b25e:	dd28      	ble.n	1b2b2 <__aeabi_d2f+0x6e>
   1b260:	4a3a      	ldr	r2, [pc, #232]	; (1b34c <__aeabi_d2f+0x108>)
   1b262:	18a6      	adds	r6, r4, r2
   1b264:	2efe      	cmp	r6, #254	; 0xfe
   1b266:	dc1b      	bgt.n	1b2a0 <__aeabi_d2f+0x5c>
   1b268:	2e00      	cmp	r6, #0
   1b26a:	dd3e      	ble.n	1b2ea <__aeabi_d2f+0xa6>
   1b26c:	0180      	lsls	r0, r0, #6
   1b26e:	0002      	movs	r2, r0
   1b270:	1e50      	subs	r0, r2, #1
   1b272:	4182      	sbcs	r2, r0
   1b274:	0f6d      	lsrs	r5, r5, #29
   1b276:	432a      	orrs	r2, r5
   1b278:	00db      	lsls	r3, r3, #3
   1b27a:	4313      	orrs	r3, r2
   1b27c:	075a      	lsls	r2, r3, #29
   1b27e:	d004      	beq.n	1b28a <__aeabi_d2f+0x46>
   1b280:	220f      	movs	r2, #15
   1b282:	401a      	ands	r2, r3
   1b284:	2a04      	cmp	r2, #4
   1b286:	d000      	beq.n	1b28a <__aeabi_d2f+0x46>
   1b288:	3304      	adds	r3, #4
   1b28a:	2280      	movs	r2, #128	; 0x80
   1b28c:	04d2      	lsls	r2, r2, #19
   1b28e:	401a      	ands	r2, r3
   1b290:	d05a      	beq.n	1b348 <__aeabi_d2f+0x104>
   1b292:	3601      	adds	r6, #1
   1b294:	2eff      	cmp	r6, #255	; 0xff
   1b296:	d003      	beq.n	1b2a0 <__aeabi_d2f+0x5c>
   1b298:	019b      	lsls	r3, r3, #6
   1b29a:	0a5b      	lsrs	r3, r3, #9
   1b29c:	b2f4      	uxtb	r4, r6
   1b29e:	e001      	b.n	1b2a4 <__aeabi_d2f+0x60>
   1b2a0:	24ff      	movs	r4, #255	; 0xff
   1b2a2:	2300      	movs	r3, #0
   1b2a4:	0258      	lsls	r0, r3, #9
   1b2a6:	05e4      	lsls	r4, r4, #23
   1b2a8:	0a40      	lsrs	r0, r0, #9
   1b2aa:	07c9      	lsls	r1, r1, #31
   1b2ac:	4320      	orrs	r0, r4
   1b2ae:	4308      	orrs	r0, r1
   1b2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2b2:	2c00      	cmp	r4, #0
   1b2b4:	d007      	beq.n	1b2c6 <__aeabi_d2f+0x82>
   1b2b6:	431d      	orrs	r5, r3
   1b2b8:	d0f2      	beq.n	1b2a0 <__aeabi_d2f+0x5c>
   1b2ba:	2080      	movs	r0, #128	; 0x80
   1b2bc:	00db      	lsls	r3, r3, #3
   1b2be:	0480      	lsls	r0, r0, #18
   1b2c0:	4303      	orrs	r3, r0
   1b2c2:	26ff      	movs	r6, #255	; 0xff
   1b2c4:	e7da      	b.n	1b27c <__aeabi_d2f+0x38>
   1b2c6:	432b      	orrs	r3, r5
   1b2c8:	d003      	beq.n	1b2d2 <__aeabi_d2f+0x8e>
   1b2ca:	2305      	movs	r3, #5
   1b2cc:	08db      	lsrs	r3, r3, #3
   1b2ce:	2cff      	cmp	r4, #255	; 0xff
   1b2d0:	d003      	beq.n	1b2da <__aeabi_d2f+0x96>
   1b2d2:	025b      	lsls	r3, r3, #9
   1b2d4:	0a5b      	lsrs	r3, r3, #9
   1b2d6:	b2e4      	uxtb	r4, r4
   1b2d8:	e7e4      	b.n	1b2a4 <__aeabi_d2f+0x60>
   1b2da:	2b00      	cmp	r3, #0
   1b2dc:	d032      	beq.n	1b344 <__aeabi_d2f+0x100>
   1b2de:	2080      	movs	r0, #128	; 0x80
   1b2e0:	03c0      	lsls	r0, r0, #15
   1b2e2:	4303      	orrs	r3, r0
   1b2e4:	025b      	lsls	r3, r3, #9
   1b2e6:	0a5b      	lsrs	r3, r3, #9
   1b2e8:	e7dc      	b.n	1b2a4 <__aeabi_d2f+0x60>
   1b2ea:	0032      	movs	r2, r6
   1b2ec:	3217      	adds	r2, #23
   1b2ee:	db14      	blt.n	1b31a <__aeabi_d2f+0xd6>
   1b2f0:	2280      	movs	r2, #128	; 0x80
   1b2f2:	271e      	movs	r7, #30
   1b2f4:	0412      	lsls	r2, r2, #16
   1b2f6:	4313      	orrs	r3, r2
   1b2f8:	1bbf      	subs	r7, r7, r6
   1b2fa:	2f1f      	cmp	r7, #31
   1b2fc:	dc0f      	bgt.n	1b31e <__aeabi_d2f+0xda>
   1b2fe:	4a14      	ldr	r2, [pc, #80]	; (1b350 <__aeabi_d2f+0x10c>)
   1b300:	4694      	mov	ip, r2
   1b302:	4464      	add	r4, ip
   1b304:	002a      	movs	r2, r5
   1b306:	40a5      	lsls	r5, r4
   1b308:	002e      	movs	r6, r5
   1b30a:	40a3      	lsls	r3, r4
   1b30c:	1e75      	subs	r5, r6, #1
   1b30e:	41ae      	sbcs	r6, r5
   1b310:	40fa      	lsrs	r2, r7
   1b312:	4333      	orrs	r3, r6
   1b314:	4313      	orrs	r3, r2
   1b316:	2600      	movs	r6, #0
   1b318:	e7b0      	b.n	1b27c <__aeabi_d2f+0x38>
   1b31a:	2400      	movs	r4, #0
   1b31c:	e7d5      	b.n	1b2ca <__aeabi_d2f+0x86>
   1b31e:	2202      	movs	r2, #2
   1b320:	4252      	negs	r2, r2
   1b322:	1b96      	subs	r6, r2, r6
   1b324:	001a      	movs	r2, r3
   1b326:	40f2      	lsrs	r2, r6
   1b328:	2f20      	cmp	r7, #32
   1b32a:	d009      	beq.n	1b340 <__aeabi_d2f+0xfc>
   1b32c:	4809      	ldr	r0, [pc, #36]	; (1b354 <__aeabi_d2f+0x110>)
   1b32e:	4684      	mov	ip, r0
   1b330:	4464      	add	r4, ip
   1b332:	40a3      	lsls	r3, r4
   1b334:	432b      	orrs	r3, r5
   1b336:	1e5d      	subs	r5, r3, #1
   1b338:	41ab      	sbcs	r3, r5
   1b33a:	2600      	movs	r6, #0
   1b33c:	4313      	orrs	r3, r2
   1b33e:	e79d      	b.n	1b27c <__aeabi_d2f+0x38>
   1b340:	2300      	movs	r3, #0
   1b342:	e7f7      	b.n	1b334 <__aeabi_d2f+0xf0>
   1b344:	2300      	movs	r3, #0
   1b346:	e7ad      	b.n	1b2a4 <__aeabi_d2f+0x60>
   1b348:	0034      	movs	r4, r6
   1b34a:	e7bf      	b.n	1b2cc <__aeabi_d2f+0x88>
   1b34c:	fffffc80 	.word	0xfffffc80
   1b350:	fffffc82 	.word	0xfffffc82
   1b354:	fffffca2 	.word	0xfffffca2

0001b358 <__clzsi2>:
   1b358:	211c      	movs	r1, #28
   1b35a:	2301      	movs	r3, #1
   1b35c:	041b      	lsls	r3, r3, #16
   1b35e:	4298      	cmp	r0, r3
   1b360:	d301      	bcc.n	1b366 <__clzsi2+0xe>
   1b362:	0c00      	lsrs	r0, r0, #16
   1b364:	3910      	subs	r1, #16
   1b366:	0a1b      	lsrs	r3, r3, #8
   1b368:	4298      	cmp	r0, r3
   1b36a:	d301      	bcc.n	1b370 <__clzsi2+0x18>
   1b36c:	0a00      	lsrs	r0, r0, #8
   1b36e:	3908      	subs	r1, #8
   1b370:	091b      	lsrs	r3, r3, #4
   1b372:	4298      	cmp	r0, r3
   1b374:	d301      	bcc.n	1b37a <__clzsi2+0x22>
   1b376:	0900      	lsrs	r0, r0, #4
   1b378:	3904      	subs	r1, #4
   1b37a:	a202      	add	r2, pc, #8	; (adr r2, 1b384 <__clzsi2+0x2c>)
   1b37c:	5c10      	ldrb	r0, [r2, r0]
   1b37e:	1840      	adds	r0, r0, r1
   1b380:	4770      	bx	lr
   1b382:	46c0      	nop			; (mov r8, r8)
   1b384:	02020304 	.word	0x02020304
   1b388:	01010101 	.word	0x01010101
	...

0001b394 <__errno>:
   1b394:	4b01      	ldr	r3, [pc, #4]	; (1b39c <__errno+0x8>)
   1b396:	6818      	ldr	r0, [r3, #0]
   1b398:	4770      	bx	lr
   1b39a:	46c0      	nop			; (mov r8, r8)
   1b39c:	2000010c 	.word	0x2000010c

0001b3a0 <__libc_init_array>:
   1b3a0:	b570      	push	{r4, r5, r6, lr}
   1b3a2:	2600      	movs	r6, #0
   1b3a4:	4d0c      	ldr	r5, [pc, #48]	; (1b3d8 <__libc_init_array+0x38>)
   1b3a6:	4c0d      	ldr	r4, [pc, #52]	; (1b3dc <__libc_init_array+0x3c>)
   1b3a8:	1b64      	subs	r4, r4, r5
   1b3aa:	10a4      	asrs	r4, r4, #2
   1b3ac:	42a6      	cmp	r6, r4
   1b3ae:	d109      	bne.n	1b3c4 <__libc_init_array+0x24>
   1b3b0:	2600      	movs	r6, #0
   1b3b2:	f000 fde5 	bl	1bf80 <_init>
   1b3b6:	4d0a      	ldr	r5, [pc, #40]	; (1b3e0 <__libc_init_array+0x40>)
   1b3b8:	4c0a      	ldr	r4, [pc, #40]	; (1b3e4 <__libc_init_array+0x44>)
   1b3ba:	1b64      	subs	r4, r4, r5
   1b3bc:	10a4      	asrs	r4, r4, #2
   1b3be:	42a6      	cmp	r6, r4
   1b3c0:	d105      	bne.n	1b3ce <__libc_init_array+0x2e>
   1b3c2:	bd70      	pop	{r4, r5, r6, pc}
   1b3c4:	00b3      	lsls	r3, r6, #2
   1b3c6:	58eb      	ldr	r3, [r5, r3]
   1b3c8:	4798      	blx	r3
   1b3ca:	3601      	adds	r6, #1
   1b3cc:	e7ee      	b.n	1b3ac <__libc_init_array+0xc>
   1b3ce:	00b3      	lsls	r3, r6, #2
   1b3d0:	58eb      	ldr	r3, [r5, r3]
   1b3d2:	4798      	blx	r3
   1b3d4:	3601      	adds	r6, #1
   1b3d6:	e7f2      	b.n	1b3be <__libc_init_array+0x1e>
   1b3d8:	0001bf8c 	.word	0x0001bf8c
   1b3dc:	0001bf8c 	.word	0x0001bf8c
   1b3e0:	0001bf8c 	.word	0x0001bf8c
   1b3e4:	0001bf90 	.word	0x0001bf90

0001b3e8 <memcpy>:
   1b3e8:	2300      	movs	r3, #0
   1b3ea:	b510      	push	{r4, lr}
   1b3ec:	429a      	cmp	r2, r3
   1b3ee:	d100      	bne.n	1b3f2 <memcpy+0xa>
   1b3f0:	bd10      	pop	{r4, pc}
   1b3f2:	5ccc      	ldrb	r4, [r1, r3]
   1b3f4:	54c4      	strb	r4, [r0, r3]
   1b3f6:	3301      	adds	r3, #1
   1b3f8:	e7f8      	b.n	1b3ec <memcpy+0x4>

0001b3fa <memset>:
   1b3fa:	0003      	movs	r3, r0
   1b3fc:	1882      	adds	r2, r0, r2
   1b3fe:	4293      	cmp	r3, r2
   1b400:	d100      	bne.n	1b404 <memset+0xa>
   1b402:	4770      	bx	lr
   1b404:	7019      	strb	r1, [r3, #0]
   1b406:	3301      	adds	r3, #1
   1b408:	e7f9      	b.n	1b3fe <memset+0x4>
	...

0001b40c <rand>:
   1b40c:	4b15      	ldr	r3, [pc, #84]	; (1b464 <rand+0x58>)
   1b40e:	b510      	push	{r4, lr}
   1b410:	681c      	ldr	r4, [r3, #0]
   1b412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b414:	2b00      	cmp	r3, #0
   1b416:	d115      	bne.n	1b444 <rand+0x38>
   1b418:	2018      	movs	r0, #24
   1b41a:	f000 f833 	bl	1b484 <malloc>
   1b41e:	4b12      	ldr	r3, [pc, #72]	; (1b468 <rand+0x5c>)
   1b420:	63a0      	str	r0, [r4, #56]	; 0x38
   1b422:	8003      	strh	r3, [r0, #0]
   1b424:	4b11      	ldr	r3, [pc, #68]	; (1b46c <rand+0x60>)
   1b426:	2201      	movs	r2, #1
   1b428:	8043      	strh	r3, [r0, #2]
   1b42a:	4b11      	ldr	r3, [pc, #68]	; (1b470 <rand+0x64>)
   1b42c:	8083      	strh	r3, [r0, #4]
   1b42e:	4b11      	ldr	r3, [pc, #68]	; (1b474 <rand+0x68>)
   1b430:	80c3      	strh	r3, [r0, #6]
   1b432:	4b11      	ldr	r3, [pc, #68]	; (1b478 <rand+0x6c>)
   1b434:	8103      	strh	r3, [r0, #8]
   1b436:	2305      	movs	r3, #5
   1b438:	8143      	strh	r3, [r0, #10]
   1b43a:	3306      	adds	r3, #6
   1b43c:	8183      	strh	r3, [r0, #12]
   1b43e:	2300      	movs	r3, #0
   1b440:	6102      	str	r2, [r0, #16]
   1b442:	6143      	str	r3, [r0, #20]
   1b444:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1b446:	4a0d      	ldr	r2, [pc, #52]	; (1b47c <rand+0x70>)
   1b448:	6920      	ldr	r0, [r4, #16]
   1b44a:	6961      	ldr	r1, [r4, #20]
   1b44c:	4b0c      	ldr	r3, [pc, #48]	; (1b480 <rand+0x74>)
   1b44e:	f7fd f9cb 	bl	187e8 <__aeabi_lmul>
   1b452:	2201      	movs	r2, #1
   1b454:	2300      	movs	r3, #0
   1b456:	1880      	adds	r0, r0, r2
   1b458:	4159      	adcs	r1, r3
   1b45a:	6120      	str	r0, [r4, #16]
   1b45c:	6161      	str	r1, [r4, #20]
   1b45e:	0048      	lsls	r0, r1, #1
   1b460:	0840      	lsrs	r0, r0, #1
   1b462:	bd10      	pop	{r4, pc}
   1b464:	2000010c 	.word	0x2000010c
   1b468:	0000330e 	.word	0x0000330e
   1b46c:	ffffabcd 	.word	0xffffabcd
   1b470:	00001234 	.word	0x00001234
   1b474:	ffffe66d 	.word	0xffffe66d
   1b478:	ffffdeec 	.word	0xffffdeec
   1b47c:	4c957f2d 	.word	0x4c957f2d
   1b480:	5851f42d 	.word	0x5851f42d

0001b484 <malloc>:
   1b484:	b510      	push	{r4, lr}
   1b486:	4b03      	ldr	r3, [pc, #12]	; (1b494 <malloc+0x10>)
   1b488:	0001      	movs	r1, r0
   1b48a:	6818      	ldr	r0, [r3, #0]
   1b48c:	f000 f804 	bl	1b498 <_malloc_r>
   1b490:	bd10      	pop	{r4, pc}
   1b492:	46c0      	nop			; (mov r8, r8)
   1b494:	2000010c 	.word	0x2000010c

0001b498 <_malloc_r>:
   1b498:	2303      	movs	r3, #3
   1b49a:	b570      	push	{r4, r5, r6, lr}
   1b49c:	1ccd      	adds	r5, r1, #3
   1b49e:	439d      	bics	r5, r3
   1b4a0:	3508      	adds	r5, #8
   1b4a2:	0006      	movs	r6, r0
   1b4a4:	2d0c      	cmp	r5, #12
   1b4a6:	d21e      	bcs.n	1b4e6 <_malloc_r+0x4e>
   1b4a8:	250c      	movs	r5, #12
   1b4aa:	42a9      	cmp	r1, r5
   1b4ac:	d81d      	bhi.n	1b4ea <_malloc_r+0x52>
   1b4ae:	0030      	movs	r0, r6
   1b4b0:	f000 f862 	bl	1b578 <__malloc_lock>
   1b4b4:	4a25      	ldr	r2, [pc, #148]	; (1b54c <_malloc_r+0xb4>)
   1b4b6:	6814      	ldr	r4, [r2, #0]
   1b4b8:	0021      	movs	r1, r4
   1b4ba:	2900      	cmp	r1, #0
   1b4bc:	d119      	bne.n	1b4f2 <_malloc_r+0x5a>
   1b4be:	4c24      	ldr	r4, [pc, #144]	; (1b550 <_malloc_r+0xb8>)
   1b4c0:	6823      	ldr	r3, [r4, #0]
   1b4c2:	2b00      	cmp	r3, #0
   1b4c4:	d103      	bne.n	1b4ce <_malloc_r+0x36>
   1b4c6:	0030      	movs	r0, r6
   1b4c8:	f000 f844 	bl	1b554 <_sbrk_r>
   1b4cc:	6020      	str	r0, [r4, #0]
   1b4ce:	0029      	movs	r1, r5
   1b4d0:	0030      	movs	r0, r6
   1b4d2:	f000 f83f 	bl	1b554 <_sbrk_r>
   1b4d6:	1c43      	adds	r3, r0, #1
   1b4d8:	d12c      	bne.n	1b534 <_malloc_r+0x9c>
   1b4da:	230c      	movs	r3, #12
   1b4dc:	0030      	movs	r0, r6
   1b4de:	6033      	str	r3, [r6, #0]
   1b4e0:	f000 f84b 	bl	1b57a <__malloc_unlock>
   1b4e4:	e003      	b.n	1b4ee <_malloc_r+0x56>
   1b4e6:	2d00      	cmp	r5, #0
   1b4e8:	dadf      	bge.n	1b4aa <_malloc_r+0x12>
   1b4ea:	230c      	movs	r3, #12
   1b4ec:	6033      	str	r3, [r6, #0]
   1b4ee:	2000      	movs	r0, #0
   1b4f0:	bd70      	pop	{r4, r5, r6, pc}
   1b4f2:	680b      	ldr	r3, [r1, #0]
   1b4f4:	1b5b      	subs	r3, r3, r5
   1b4f6:	d41a      	bmi.n	1b52e <_malloc_r+0x96>
   1b4f8:	2b0b      	cmp	r3, #11
   1b4fa:	d903      	bls.n	1b504 <_malloc_r+0x6c>
   1b4fc:	600b      	str	r3, [r1, #0]
   1b4fe:	18cc      	adds	r4, r1, r3
   1b500:	6025      	str	r5, [r4, #0]
   1b502:	e003      	b.n	1b50c <_malloc_r+0x74>
   1b504:	428c      	cmp	r4, r1
   1b506:	d10e      	bne.n	1b526 <_malloc_r+0x8e>
   1b508:	6863      	ldr	r3, [r4, #4]
   1b50a:	6013      	str	r3, [r2, #0]
   1b50c:	0030      	movs	r0, r6
   1b50e:	f000 f834 	bl	1b57a <__malloc_unlock>
   1b512:	0020      	movs	r0, r4
   1b514:	2207      	movs	r2, #7
   1b516:	300b      	adds	r0, #11
   1b518:	1d23      	adds	r3, r4, #4
   1b51a:	4390      	bics	r0, r2
   1b51c:	1ac3      	subs	r3, r0, r3
   1b51e:	d0e7      	beq.n	1b4f0 <_malloc_r+0x58>
   1b520:	425a      	negs	r2, r3
   1b522:	50e2      	str	r2, [r4, r3]
   1b524:	e7e4      	b.n	1b4f0 <_malloc_r+0x58>
   1b526:	684b      	ldr	r3, [r1, #4]
   1b528:	6063      	str	r3, [r4, #4]
   1b52a:	000c      	movs	r4, r1
   1b52c:	e7ee      	b.n	1b50c <_malloc_r+0x74>
   1b52e:	000c      	movs	r4, r1
   1b530:	6849      	ldr	r1, [r1, #4]
   1b532:	e7c2      	b.n	1b4ba <_malloc_r+0x22>
   1b534:	2303      	movs	r3, #3
   1b536:	1cc4      	adds	r4, r0, #3
   1b538:	439c      	bics	r4, r3
   1b53a:	42a0      	cmp	r0, r4
   1b53c:	d0e0      	beq.n	1b500 <_malloc_r+0x68>
   1b53e:	1a21      	subs	r1, r4, r0
   1b540:	0030      	movs	r0, r6
   1b542:	f000 f807 	bl	1b554 <_sbrk_r>
   1b546:	1c43      	adds	r3, r0, #1
   1b548:	d1da      	bne.n	1b500 <_malloc_r+0x68>
   1b54a:	e7c6      	b.n	1b4da <_malloc_r+0x42>
   1b54c:	2000048c 	.word	0x2000048c
   1b550:	20000490 	.word	0x20000490

0001b554 <_sbrk_r>:
   1b554:	2300      	movs	r3, #0
   1b556:	b570      	push	{r4, r5, r6, lr}
   1b558:	4c06      	ldr	r4, [pc, #24]	; (1b574 <_sbrk_r+0x20>)
   1b55a:	0005      	movs	r5, r0
   1b55c:	0008      	movs	r0, r1
   1b55e:	6023      	str	r3, [r4, #0]
   1b560:	f7ed ffc8 	bl	94f4 <_sbrk>
   1b564:	1c43      	adds	r3, r0, #1
   1b566:	d103      	bne.n	1b570 <_sbrk_r+0x1c>
   1b568:	6823      	ldr	r3, [r4, #0]
   1b56a:	2b00      	cmp	r3, #0
   1b56c:	d000      	beq.n	1b570 <_sbrk_r+0x1c>
   1b56e:	602b      	str	r3, [r5, #0]
   1b570:	bd70      	pop	{r4, r5, r6, pc}
   1b572:	46c0      	nop			; (mov r8, r8)
   1b574:	20001afc 	.word	0x20001afc

0001b578 <__malloc_lock>:
   1b578:	4770      	bx	lr

0001b57a <__malloc_unlock>:
   1b57a:	4770      	bx	lr
   1b57c:	00000002 	.word	0x00000002
   1b580:	00000003 	.word	0x00000003
   1b584:	00000028 	.word	0x00000028
   1b588:	00000029 	.word	0x00000029
   1b58c:	00000004 	.word	0x00000004
   1b590:	00000005 	.word	0x00000005
   1b594:	00000006 	.word	0x00000006
   1b598:	00000007 	.word	0x00000007
   1b59c:	0000ffff 	.word	0x0000ffff
   1b5a0:	0000ffff 	.word	0x0000ffff
   1b5a4:	00000022 	.word	0x00000022
   1b5a8:	00000023 	.word	0x00000023
   1b5ac:	0000ffff 	.word	0x0000ffff
   1b5b0:	0000ffff 	.word	0x0000ffff
   1b5b4:	0000ffff 	.word	0x0000ffff
   1b5b8:	0000ffff 	.word	0x0000ffff
   1b5bc:	00000008 	.word	0x00000008
   1b5c0:	00000009 	.word	0x00000009
   1b5c4:	0000000a 	.word	0x0000000a
   1b5c8:	0000000b 	.word	0x0000000b
   1b5cc:	000024da 	.word	0x000024da
   1b5d0:	000024e0 	.word	0x000024e0
   1b5d4:	000024e0 	.word	0x000024e0
   1b5d8:	000024e0 	.word	0x000024e0
   1b5dc:	000024e0 	.word	0x000024e0
   1b5e0:	000024e0 	.word	0x000024e0
   1b5e4:	000024e0 	.word	0x000024e0
   1b5e8:	000024e0 	.word	0x000024e0
   1b5ec:	000024e0 	.word	0x000024e0
   1b5f0:	000024e0 	.word	0x000024e0
   1b5f4:	000024e0 	.word	0x000024e0
   1b5f8:	000024e0 	.word	0x000024e0
   1b5fc:	000024e0 	.word	0x000024e0
   1b600:	000024e0 	.word	0x000024e0
   1b604:	000024e0 	.word	0x000024e0
   1b608:	000024e0 	.word	0x000024e0
   1b60c:	000024b8 	.word	0x000024b8
   1b610:	000024e0 	.word	0x000024e0
   1b614:	000024e0 	.word	0x000024e0
   1b618:	000024e0 	.word	0x000024e0
   1b61c:	000024e0 	.word	0x000024e0
   1b620:	000024e0 	.word	0x000024e0
   1b624:	000024e0 	.word	0x000024e0
   1b628:	000024e0 	.word	0x000024e0
   1b62c:	000024e0 	.word	0x000024e0
   1b630:	000024e0 	.word	0x000024e0
   1b634:	000024e0 	.word	0x000024e0
   1b638:	000024e0 	.word	0x000024e0
   1b63c:	000024e0 	.word	0x000024e0
   1b640:	000024e0 	.word	0x000024e0
   1b644:	000024e0 	.word	0x000024e0
   1b648:	000024e0 	.word	0x000024e0
   1b64c:	000024d4 	.word	0x000024d4
   1b650:	000024e0 	.word	0x000024e0
   1b654:	000024e0 	.word	0x000024e0
   1b658:	000024e0 	.word	0x000024e0
   1b65c:	000024e0 	.word	0x000024e0
   1b660:	000024e0 	.word	0x000024e0
   1b664:	000024e0 	.word	0x000024e0
   1b668:	000024e0 	.word	0x000024e0
   1b66c:	000024e0 	.word	0x000024e0
   1b670:	000024e0 	.word	0x000024e0
   1b674:	000024e0 	.word	0x000024e0
   1b678:	000024e0 	.word	0x000024e0
   1b67c:	000024e0 	.word	0x000024e0
   1b680:	000024e0 	.word	0x000024e0
   1b684:	000024e0 	.word	0x000024e0
   1b688:	000024e0 	.word	0x000024e0
   1b68c:	000024ce 	.word	0x000024ce
   1b690:	00002476 	.word	0x00002476
   1b694:	0000248c 	.word	0x0000248c
   1b698:	000024a2 	.word	0x000024a2
   1b69c:	0000245c 	.word	0x0000245c
   1b6a0:	00002c64 	.word	0x00002c64
   1b6a4:	00002c64 	.word	0x00002c64
   1b6a8:	00002c58 	.word	0x00002c58
   1b6ac:	00002c64 	.word	0x00002c64
   1b6b0:	00002c58 	.word	0x00002c58
   1b6b4:	00002c32 	.word	0x00002c32
   1b6b8:	00002c32 	.word	0x00002c32
   1b6bc:	00002c64 	.word	0x00002c64
   1b6c0:	00002c64 	.word	0x00002c64
   1b6c4:	00002c64 	.word	0x00002c64
   1b6c8:	00002c64 	.word	0x00002c64
   1b6cc:	00002c64 	.word	0x00002c64
   1b6d0:	00002c64 	.word	0x00002c64
   1b6d4:	00002c64 	.word	0x00002c64
   1b6d8:	00002c64 	.word	0x00002c64
   1b6dc:	00002c64 	.word	0x00002c64
   1b6e0:	00002c64 	.word	0x00002c64
   1b6e4:	00002c64 	.word	0x00002c64
   1b6e8:	00002c64 	.word	0x00002c64
   1b6ec:	00002c64 	.word	0x00002c64
   1b6f0:	00002c64 	.word	0x00002c64
   1b6f4:	00002c64 	.word	0x00002c64
   1b6f8:	00002c64 	.word	0x00002c64
   1b6fc:	00002c64 	.word	0x00002c64
   1b700:	00002c64 	.word	0x00002c64
   1b704:	00002c64 	.word	0x00002c64
   1b708:	00002c64 	.word	0x00002c64
   1b70c:	00002c64 	.word	0x00002c64
   1b710:	00002c64 	.word	0x00002c64
   1b714:	00002c64 	.word	0x00002c64
   1b718:	00002c64 	.word	0x00002c64
   1b71c:	00002c64 	.word	0x00002c64
   1b720:	00002c64 	.word	0x00002c64
   1b724:	00002c64 	.word	0x00002c64
   1b728:	00002c64 	.word	0x00002c64
   1b72c:	00002c64 	.word	0x00002c64
   1b730:	00002c64 	.word	0x00002c64
   1b734:	00002c64 	.word	0x00002c64
   1b738:	00002c64 	.word	0x00002c64
   1b73c:	00002c64 	.word	0x00002c64
   1b740:	00002c64 	.word	0x00002c64
   1b744:	00002c64 	.word	0x00002c64
   1b748:	00002c64 	.word	0x00002c64
   1b74c:	00002c64 	.word	0x00002c64
   1b750:	00002c64 	.word	0x00002c64
   1b754:	00002c64 	.word	0x00002c64
   1b758:	00002c64 	.word	0x00002c64
   1b75c:	00002c64 	.word	0x00002c64
   1b760:	00002c64 	.word	0x00002c64
   1b764:	00002c64 	.word	0x00002c64
   1b768:	00002c64 	.word	0x00002c64
   1b76c:	00002c64 	.word	0x00002c64
   1b770:	00002c64 	.word	0x00002c64
   1b774:	00002c64 	.word	0x00002c64
   1b778:	00002c64 	.word	0x00002c64
   1b77c:	00002c64 	.word	0x00002c64
   1b780:	00002c64 	.word	0x00002c64
   1b784:	00002c64 	.word	0x00002c64
   1b788:	00002c64 	.word	0x00002c64
   1b78c:	00002c64 	.word	0x00002c64
   1b790:	00002c64 	.word	0x00002c64
   1b794:	00002c64 	.word	0x00002c64
   1b798:	00002c64 	.word	0x00002c64
   1b79c:	00002c64 	.word	0x00002c64
   1b7a0:	00002c58 	.word	0x00002c58
   1b7a4:	00002c58 	.word	0x00002c58
   1b7a8:	00002c6e 	.word	0x00002c6e
   1b7ac:	00002c6e 	.word	0x00002c6e
   1b7b0:	00002c6e 	.word	0x00002c6e
   1b7b4:	00002c6e 	.word	0x00002c6e

0001b7b8 <_tcc_intflag>:
   1b7b8:	00000001 00000002 00000004 00000008     ................
   1b7c8:	00001000 00002000 00004000 00008000     ..... ...@......
   1b7d8:	00010000 00020000 00040000 00080000     ................

0001b7e8 <tcc_modules>:
   1b7e8:	42002000 42002400 42002800              . .B.$.B.(.B

0001b7f4 <_tcc_gclk_ids>:
   1b7f4:	001b1a1a                                ....

0001b7f8 <_tcc_apbcmasks>:
   1b7f8:	00000100 00000200 00000400              ............

0001b804 <_tcc_maxs>:
   1b804:	00ffffff 00ffffff 0000ffff              ............

0001b810 <_tcc_cc_nums>:
   1b810:	00020204                                ....

0001b814 <_tcc_ow_nums>:
   1b814:	00020408 42002c00 42003000 42003400     .....,.B.0.B.4.B
   1b824:	001c1c1b 10000800 00002000 42000800     ......... .....B
   1b834:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   1b844:	42001c00 0c0b0a09 00000e0d 00007e76     ...B........v~..
   1b854:	00007eee 00007eee 00007e94 00007e8e     .~...~...~...~..
   1b864:	00007e9a 00007e7c 00007ea0 00007ed4     .~..|~...~...~..
   1b874:	00008094 000080e4 000080e4 000080e0     ................
   1b884:	00008086 000080a6 00008076 000080b8     ........v.......
   1b894:	000080ca 41744545 50524f4d 456d752e     ....EEtAMORP.umE
   1b8a4:	0000ab0c 0000ab1c 0000ab54 0000ab8c     ........T.......
   1b8b4:	0000abb2 0000abdc 0000ac14 0000ac4c     ............L...
   1b8c4:	0000acc4 0000acd6 0000ad16 0000ad56     ............V...
   1b8d4:	0000ad96 0000adc2 0000ae0e 0000aee0     ................
   1b8e4:	0000af20 0000afe8 0000b014 0000b0f0      ...............
   1b8f4:	0000b260 0000b4b0 0000b700 0000b8ee     `...............
   1b904:	0000b9f6 0000bbd4 0000bd5a 0000bf40     ........Z...@...
   1b914:	0000c28a 0000c2e4 0000c7f2 0000c8b2     ................
   1b924:	0000c9cc 0000ca70 0000cb60 0000ce5c     ....p...`...\...
   1b934:	0000d01e 0000c380 0000c424 0000c4c8     ........$.......
   1b944:	0000c5d0 0000c674 0000c718 0000d474     ....t.......t...
   1b954:	0000d584 0000d592 0000d788 0000d90e     ................
   1b964:	0000da74                                t...

0001b968 <crc16_tab>:
   1b968:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   1b978:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   1b988:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   1b998:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   1b9a8:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   1b9b8:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   1b9c8:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   1b9d8:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   1b9e8:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   1b9f8:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   1ba08:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   1ba18:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   1ba28:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   1ba38:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   1ba48:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   1ba58:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   1ba68:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   1ba78:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   1ba88:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   1ba98:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   1baa8:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   1bab8:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   1bac8:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   1bad8:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   1bae8:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   1baf8:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   1bb08:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   1bb18:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   1bb28:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   1bb38:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   1bb48:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   1bb58:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
   1bb68:	000121d6 00012214 00012250 0001228c     .!..."..P"..."..
   1bb78:	000122c6 0001304c 0001304c 000130c2     ."..L0..L0...0..
   1bb88:	000130c2 000130f2 00013198 00013106     .0...0...1...1..
   1bb98:	00013106 00013116 00013148 0001315a     .1...1..H1..Z1..
   1bba8:	0001316c 00013182 07020100 0a090701     l1...1..........
   1bbb8:	00000001 000000ff 00000303 00000002     ................
   1bbc8:	00ff00ff 0000ff00 00000003 00000000     ................
   1bbd8:	3f400000 00000000 3f000000 3f000000     ..@?.......?...?
   1bbe8:	00000000 3f000000 3f000000 3f000000     .......?...?...?
   1bbf8:	00000000 3e800000 3f000000 3f000000     .......>...?...?
   1bc08:	3f000000 3f000000 3f000000 3f000000     ...?...?...?...?
   1bc18:	3f000000 422b5441 34445541 00000000     ...?AT+BAUD4....
   1bc28:	00002580 00004b00 00009600 0000e100     .%...K..........
   1bc38:	0001c200 4e2b5441 54454d41 61546c65     ....AT+NAMETelTa
   1bc48:	00006c69 502b5441 3345574f 00000000     il..AT+POWE3....
   1bc58:	522b5441 54455345 00000000 00000030     AT+RESET....0...
   1bc68:	00015032 00015ec4 00015ec4 00015ec4     2P...^...^...^..
   1bc78:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bc88:	00015ec4 00015052 0001505c 00014f7e     .^..RP..\P..~O..
   1bc98:	00014f70 00015ec4 00015ec4 00015ec4     pO...^...^...^..
   1bca8:	00015872 00015ec4 00015ec4 00015ec4     rX...^...^...^..
   1bcb8:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bcc8:	00015a20 00015a9a 00015b04 00015c38      Z...Z...[..8\..
   1bcd8:	00015066 00015d24 00015d9e 00015ca2     fP..$]...]...\..
   1bce8:	00015e00 00015794 000153b8 000153e2     .^...W...S...S..
   1bcf8:	00015414 00015e62 00015ec4 00015ec4     .T..b^...^...^..
   1bd08:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bd18:	00014f60 00015ec4 00015ec4 00015ec4     `O...^...^...^..
   1bd28:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bd38:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bd48:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bd58:	00014f50 00015ec4 00015ec4 00015ec4     PO...^...^...^..
   1bd68:	00014fce 00014fa6 00014f8e 00015ec4     .O...O...O...^..
   1bd78:	00015ec4 00015294 00015206 00015078     .^...R...R..xP..
   1bd88:	00015178 00015514 000150ea 0001546a     xQ...U...P..jT..
   1bd98:	000155be 00015ec4 00015ec4 00015ec4     .U...^...^...^..
   1bda8:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bdb8:	00015ec4 00015ec4 00015ec4 00015ec4     .^...^...^...^..
   1bdc8:	00015042 00015022 00015012 00015002     BP.."P...P...P..
   1bdd8:	000153a0 00014ff2 00018d58 00018d28     .S...O..X...(...
   1bde8:	00018d3a 00018c7c 00018d3a 00018d1e     :...|...:.......
   1bdf8:	00018d3a 00018c7c 00018d28 00018d28     :...|...(...(...
   1be08:	00018d1e 00018c7c 00018c84 00018c84     ....|...........
   1be18:	00018c84 00018d40 00018d28 00018d28     ....@...(...(...
   1be28:	00018cfc 00018de0 00018cfc 00018d1e     ................
   1be38:	00018cfc 00018de0 00018d28 00018d28     ........(...(...
   1be48:	00018d1e 00018de0 00018c84 00018c84     ................
   1be58:	00018c84 00018dea 000190d8 00019028     ............(...
   1be68:	00019028 00019026 000190ca 000190ca     (...&...........
   1be78:	000190c0 00019026 000190ca 000190c0     ....&...........
   1be88:	000190ca 00019026 000190d0 000190d0     ....&...........
   1be98:	000190d0 00019160 00019ea8 00019e8a     ....`...........
   1bea8:	00019e44 00019d62 00019e44 00019e7c     D...b...D...|...
   1beb8:	00019e44 00019d62 00019e8a 00019e8a     D...b...........
   1bec8:	00019e7c 00019d62 00019d5a 00019d5a     |...b...Z...Z...
   1bed8:	00019d5a 0001a0c0 0001a708 0001a5c8     Z...............
   1bee8:	0001a5c8 0001a5c4 0001a6e0 0001a6e0     ................
   1bef8:	0001a6d2 0001a5c4 0001a6e0 0001a6d2     ................
   1bf08:	0001a6e0 0001a5c4 0001a6e8 0001a6e8     ................
   1bf18:	0001a6e8 0001a8ec                       ........

0001bf20 <__sf_fake_stderr>:
	...

0001bf40 <__sf_fake_stdin>:
	...

0001bf60 <__sf_fake_stdout>:
	...

0001bf80 <_init>:
   1bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf82:	46c0      	nop			; (mov r8, r8)
   1bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bf86:	bc08      	pop	{r3}
   1bf88:	469e      	mov	lr, r3
   1bf8a:	4770      	bx	lr

0001bf8c <__init_array_start>:
   1bf8c:	000020dd 	.word	0x000020dd

0001bf90 <_fini>:
   1bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf92:	46c0      	nop			; (mov r8, r8)
   1bf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bf96:	bc08      	pop	{r3}
   1bf98:	469e      	mov	lr, r3
   1bf9a:	4770      	bx	lr

0001bf9c <__fini_array_start>:
   1bf9c:	000020b5 	.word	0x000020b5
